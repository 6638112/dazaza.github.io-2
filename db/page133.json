[{"category": "", "categoryclass": "", "imagename": "988c5d69fc8d994821b57cccbd3326c2.png", "infoid": 1069293, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6d4f\u89c8\u5668\u4e2d\u7684 Blockly \u5141\u8bb8\u7f51\u9875\u5305\u542b\u7528\u4e8e Blockly \u652f\u6301\u7684\u4e94\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u6216\u60a8\u81ea\u5df1\u7684\u53ef\u89c6\u5316\u4ee3\u7801\u7f16\u8f91\u5668\u3002\u5728 Blockly Games \u4e2d\uff0c\u5982\u56fe\u6240\u793a\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u53f3\u4fa7\u7684 Blockly \u7f16\u8f91\u5668\u89e3\u51b3\u8ff7\u5bab\u95ee\u9898\u3002\u6211\u4eec\u6709\u5927\u7ea6 80 \u540d Blockly \u793e\u533a\u6210\u5458\u53c2\u52a0\u4e86 16 \u573a\u5173\u4e8e Blockly \u53ca\u5176\u5e94\u7528\u7684\u6280\u672f\u8bb2\u5ea7\u3002", "note_en": "Blockly in a browser allows web pages to include a visual code editor for any of Blockly&#39;s five supported programming languages, or your own. In Blockly Games, pictured here, users can solve a maze using Blockly&#39;s editor on the right.\n  We had around 80 members of the Blockly community attend with 16 tech talks on Blockly and its applications.", "posttime": "2021-07-24 07:03:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,\u53ef\u89c6\u5316,programming,\u7f16\u7a0b,javascript", "title": "\u7528\u4e8e\u6784\u5efa\u53ef\u89c6\u5316\u7f16\u7a0b\u7f16\u8f91\u5668\u7684 JavaScript \u5e93", "title_en": "A JavaScript library for building visual programming editors", "transed": 1, "url": "https://developers.google.com/blockly", "via": "", "real_tags": ["java", "\u53ef\u89c6\u5316", "\u7f16\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "480c58ea61ab85a6d10a67ed1eb20050.png", "infoid": 1069292, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u7684\u773c\u775b\u4e0d\u4f1a\u6b3a\u9a97\u4f60\u3002\u4ece 5.0-14690 \u5f00\u59cb\uff0cDolphin \u73b0\u5728\u76f4\u63a5\u5185\u7f6e\u4e86 mGBA\uff0c\u4f5c\u4e3a\u5904\u7406 Game Boy Advance \u4e0e GameCube \u6e38\u620f\u8fde\u63a5\u7684\u65b0\u65b9\u6cd5\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u77e5\u9053\u7684\u4eba\u6765\u8bf4\uff0cmGBA \u662f\u8fd9\u4e2a\u65f6\u4ee3\u6700\u8457\u540d\u3001\u6700\u51c6\u786e\u7684 GBA \u6a21\u62df\u5668\uff0c\u5e76\u4e14\u81ea\u95ee\u4e16\u4ee5\u6765\u4e00\u76f4\u5728\u8fc5\u901f\u6539\u8fdb\u3002\u6700\u8fd1\uff0c\u6211\u4eec\u5199\u4e86\u5173\u4e8e mGBA \u6dfb\u52a0\u5bf9\u6211\u4eec\u7684 TCP GBA \u534f\u8bae\u7684\u652f\u6301\uff0c\u4f46\u8fd9\u662f\u5168\u65b0\u7684\u4e1c\u897f\u3002\u901a\u8fc7 bonta \u5b8c\u6210\u7684\u96c6\u6210\u548c\u540c\u6b65\u5de5\u4f5c\uff0c\u73b0\u5728\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u5c06\u60a8\u6700\u559c\u7231\u7684 GameCube \u6e38\u620f\u4e0e Game Boy Advance \u7684\u591a\u4eba\u6e38\u620f\u548c\u5176\u4ed6\u5956\u52b1\u529f\u80fd\u8fde\u63a5\u8d77\u6765\u3002\u5f53\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u63a7\u5236\u5668\u7aef\u53e3\u65f6\uff0c\u79f0\u4e3a\u96c6\u6210 GBA \u7684\u7cbe\u7b80\u7248 mGBA \u5c06\u4e0e Dolphin \u4e00\u8d77\u542f\u52a8\u3002\u8fd9\u4e9b mGBA \u5b9e\u4f8b\u4e0e GameCube \u4eff\u771f\u65f6\u949f\u540c\u6b65\uff0c\u4ee5\u5b9e\u73b0\u65e0\u53ef\u6311\u5254\u7684\u8fde\u63a5\u7a33\u5b9a\u6027\u3002\u901a\u8fc7\u5c06\u8fd9\u4e24\u4e2a\u6a21\u62df\u5668\u6574\u5408\u5230\u4e00\u4e2a\u5305\u4e2d\uff0cGBA \u8fde\u63a5\u529f\u80fd\u73b0\u5728\u53ef\u4ee5\u4e0e\u6d41\u884c\u7684\u529f\u80fd\uff08\u5982\u4fdd\u5b58\u72b6\u6001\u3001\u8f93\u5165\u5f55\u97f3\u548c\u7f51\u7edc\u64ad\u653e\uff09\u4e00\u8d77\u4f7f\u7528\uff01\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u4f34\u968f\u7740\u6539\u8fdb\u7684\u6027\u80fd\u548c\u517c\u5bb9\u6027\u7684\u989d\u5916\u597d\u5904\u3002\u5982\u679c\u60a8\u4e0d\u76f8\u4fe1\u6211\u4eec\uff0c\u8bf7\u81ea\u5df1\u68c0\u67e5\u4e00\u4e0b\uff01\u8fbe\u5230\u8fd9\u4e00\u70b9\u662f\u8de8\u8d8a\u51e0\u4ee3\u5f00\u53d1\u4eba\u5458\u548c\u6a21\u62df\u5668\u7684\u8bd5\u9a8c\u3002\u5982\u679c\u6211\u4eec\u8981\u8bb2\u8ff0\u6a21\u62df GBA \u5230 GCN \u901a\u4fe1\u80cc\u540e\u7684\u5b8c\u6574\u6545\u4e8b\uff0c\u6211\u4eec\u5fc5\u987b\u4ece\u5934\u5f00\u59cb\u3002\u4f5c\u4e3a GameCube \u7684\u4e00\u9879\u529f\u80fd\uff0cGame Boy Advance \u7684\u8fde\u63a5\u6027\u5728\u7cfb\u7edf\u65e9\u671f\u5728 E3\u3001\u6742\u5fd7\u548c\u7535\u89c6\u5e7f\u544a\u7b49\u6d3b\u52a8\u4e2d\u5f97\u5230\u4e86\u5f88\u5927\u7a0b\u5ea6\u7684\u63a8\u52a8\u3002\u6765\u81ea Sonic Team USA\u3001Nintendo EAD\u3001The Pokemon Company \u548c\u5176\u4ed6\u516c\u53f8\u7684\u624d\u534e\u6a2a\u6ea2\u7684\u5f00\u53d1\u4eba\u5458\u53d1\u5e03\u4e86\u53ef\u4ee5\u5229\u7528\u8be5\u529f\u80fd\u7684\u6e38\u620f\uff0c\u5f88\u5bb9\u6613\u770b\u5230\u5176\u6f5c\u529b\u3002\u6700\u597d\u7684\u60c5\u51b5\u662f\uff0cGBA \u8fde\u63a5\u6e38\u620f\u975e\u5e38\u6709\u8da3\uff0c\u5e76\u63d0\u4f9b\u60a8\u5728\u4efb\u4f55\u5176\u4ed6\u63a7\u5236\u53f0\u4e0a\u90fd\u627e\u4e0d\u5230\u7684\u76f8\u5f53\u72ec\u7279\u7684\u4f53\u9a8c\u3002\u62e5\u6709 GameCube \u7684\u4eba\u90fd\u77e5\u9053\uff0c\u8fd9\u4e9b\u4f53\u9a8c\u5f88\u5c11\u3002\u8be5\u529f\u80fd\u88ab\u7559\u5728\u4e86\u4e00\u4e2a\u5c34\u5c2c\u7684\u5730\u65b9\uff0c\u5b83\u5f88\u6602\u8d35\uff0c\u9700\u8981\u5f88\u591a\u6e38\u620f\u6765\u8bc1\u660e\u6210\u672c\u662f\u5408\u7406\u7684\uff0c\u4f46\u7531\u4e8e\u7528\u6237\u7fa4\u5f88\u5c0f\uff0c\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u4e0d\u613f\u610f\u5728 GBA \u8fde\u63a5\u529f\u80fd\u4e0a\u6295\u5165\u5927\u91cf\u7cbe\u529b\u3002\u6709\u4e00\u4e9b\u4e0d\u53ef\u5426\u8ba4\u7684\u5b9d\u77f3\uff0c\u4f46\u901a\u5e38 GBA \u8fde\u63a5\u529f\u80fd\u4f5c\u4e3a\u67d0\u79cd\u590d\u9009\u6846\u529f\u80fd\u88ab\u6dfb\u52a0\u5f97\u5f88\u5dee\u3002\u73b0\u5728\u8bbe\u7f6e\u5e93\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 GBA \u8fde\u63a5\u529f\u80fd\u7684\u7c7b\u578b\u5206\u4e3a\u4e94\u4e2a\u7c97\u7565\u7684\u7c7b\u522b\u3002\u591a\u4eba\u6e38\u620f - \u8fd9\u4e9b\u6e38\u620f\u4e25\u91cd\u4f9d\u8d56 GBA &lt;-&gt; GCN \u8fde\u63a5\u6765\u4e3a\u6bcf\u4e2a\u73a9\u5bb6\u63d0\u4f9b\u72ec\u7279\u7684\u4fe1\u606f\u6216\u4ed6\u4eec\u81ea\u5df1\u7684\u5c4f\u5e55\uff0c\u6709\u65f6\u53ef\u4ee5\u73a9\u3002\u8fd9\u5305\u62ec\u585e\u5c14\u8fbe\u4f20\u8bf4\uff1a\u56db\u5251\u5386\u9669\u8bb0\u3001\u6700\u7ec8\u5e7b\u60f3\u6c34\u6676\u7f16\u5e74\u53f2\u548c\u5403\u8c46\u4eba\u5927\u6218\u3002\u5956\u52b1\u79ef\u5206\u5f52\u4e8e\u56e0\u7d20 5\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8 Rogue Squadron III \u4e2d\u7684\u73a9\u5bb6\u5728\u7ade\u6280\u591a\u4eba\u6e38\u620f\u4e2d\u94fe\u63a5 GBA \u4ee5\u7528\u4f5c\u9690\u85cf\u547d\u4ee4\u7684\u989d\u5916\u5c4f\u5e55\uff0c\u5373\u4f7f\u5b83\u7684\u6570\u91cf\u4e0d\u591a\u3002\u53ef\u8f6c\u79fb\u5c0f\u6e38\u620f - \u8fd9\u4e9b\u6e38\u620f\u53ef\u8ba9\u60a8\u5c06\u53ef\u5206\u79bb\u6e38\u620f\u8f6c\u79fb\u5230 GBA\u3002\u6709\u65f6\u662f\u5956\u52b1 NES \u6e38\u620f\uff0c\u6709\u65f6\u662f\u60a8\u6b63\u5728\u73a9\u7684\u6e38\u620f\u7684\u5fae\u578b\u7248\u672c\u3002\u6709\u65f6\u662f... Crash Blast\u3002\u5177\u6709\u6b64\u529f\u80fd\u7684\u6e38\u620f\u793a\u4f8b\u5305\u62ec Nintendo Puzzle Collection\u3001Animal Crossing \u548c\u6280\u672f\u4e0a\u7684 Crash Bandicoot: Wrath of Cortex\u3002\u5956\u52b1\u6a21\u5f0f\u6216\u989d\u5916\u5185\u5bb9 - \u6e38\u620f\u8fd8\u53ef\u4ee5\u5728\u5355\u200b\u200b\u4eba\u6e38\u620f\u73af\u5883\u4e2d\u4f7f\u7528 GBA \u6765\u89e3\u9501\u4e3b\u6e38\u620f\u4e2d\u7684\u5956\u52b1\u5185\u5bb9\u3002 Animal Crossing \u7684 GBA \u5c9b\u3001\u6d1b\u514b\u4eba X\uff1a\u6307\u6325\u4efb\u52a1\u7684\u5b9d\u85cf\u8ffd\u8e2a\u5668\u548c Wind Waker \u7684 Tingle Tuner \u5c31\u662f\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u76f8\u5f53\u6602\u8d35\u7684\u5956\u52b1\u529f\u80fd\uff0c\u4f46\u81f3\u5c11\u5b83\u4e0d\u662f\u89e3\u9501\u5feb\u901f\u7fd8\u66f2\u7684 amiibo\uff0c\u5bf9\u5427\uff1f\n\u4e0e GBA \u6e38\u620f\u7684\u8fde\u63a5 - \u6807\u9898\u8fd8\u53ef\u4ee5\u4e0e\u7279\u5b9a\u7684 GBA \u6e38\u620f\u8fde\u63a5\u4ee5\u89e3\u9501\u5185\u5bb9\u6216\u5728\u4e00\u4e2a\u6216\u4e24\u4e2a\u6e38\u620f\u4e4b\u95f4\u6267\u884c\u64cd\u4f5c\u3002\u8bb8\u591a\u6e38\u620f\u90fd\u8fd9\u6837\u505a\uff0c\u5305\u62ec Harvest Moon: A Wonderful Life\u3001Sonic Adventure 2: Battle \u548c Metroid Prime\u3002\u8bf7\u6ce8\u610f\uff0cSonic Adventure 2\uff1aBattle \u4e5f\u53ef\u4ee5\u8fde\u63a5\u5230\u6ca1\u6709\u6e38\u620f\u7684 GBA\uff0c\u56e0\u4e3a\u5b83\u7684\u529f\u80fd\u7565\u4f4e\u3002\u53e3\u888b\u5996\u602a\u6e38\u620f - \u6211\u4eec\u5c06\u5176\u5206\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7c7b\u522b\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b GBA \u6e38\u620f\u662f\u4e3b\u8981\u4ea7\u54c1\u3002 Pokemon Colosseum\u3001Pokemon XD: Gale of Darkness\u3001Pokemon Box \u4ee5\u53ca\u5b83\u4eec\u7684\u5956\u52b1\u5149\u76d8\u90fd\u53ef\u4ee5\u8fde\u63a5\u5230\u5404\u79cd\u7b2c 3 \u4ee3 Pokemon GBA \u6e38\u620f\u4ee5\u83b7\u5f97\u5956\u52b1\u3001\u4ea4\u6613\u548c\u6218\u6597\u3002 Pokemon Box \u8fd8\u53ef\u4ee5\u8ba9\u60a8\u5b58\u50a8 Pokemon \u5e76\u5177\u6709\u5192\u9669\u6a21\u5f0f\uff0c\u60a8\u53ef\u4ee5\u5728\u6ca1\u6709 Game Boy Player \u7684\u60c5\u51b5\u4e0b\u5728\u5927\u5c4f\u5e55\u4e0a\u73a9 GBA\u200b\u200b \u6e38\u620f\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u771f\u6b63\u652f\u6301 GBA \u8fde\u63a5\u7684\u5c11\u6570\u6e38\u620f\u8fd8\u662f\u5e26\u6765\u4e86\u6709\u8da3\u7684\u4eff\u771f\u6311\u6218\u3002\u591a\u5e74\u6765\uff0c\u4e00\u4e9b\u5f00\u53d1\u4eba\u5458\u5f00\u59cb\u6267\u884c\u591a\u7cfb\u7edf\u4efb\u52a1\u3002\u6700\u65e9\u8bb0\u5f55\u7684 GBA \u8fde\u63a5\u4eff\u771f\u5b9e\u73b0\u53ef\u4ee5\u8ffd\u6eaf\u5230 2009 \u5e74\u5de6\u53f3\uff0c\u8be5\u529f\u80fd\u9996\u5148\u5728 Dolphin r2578 \u4e2d\u53d1\u73b0\u3002\u867d\u7136\u6211\u4eec\u4e0d\u77e5\u9053\u5c06\u6700\u65e9\u7248\u672c\u8fde\u63a5\u5230 GBA \u6a21\u62df\u5668\u80cc\u540e\u7684\u786e\u5207\u7ec6\u8282\uff0c\u4f46\u6211\u4eec\u786e\u5b9e\u4ece\u5f00\u53d1\u4eba\u5458\u5e10\u6237\u4e2d\u77e5\u9053\uff0c\u56f4\u7ed5\u8be5\u65f6\u4ee3\u6700\u597d\u7684 GBA \u6a21\u62df\u5668 VBA-M \u5bf9\u591a\u4e2a\u60f3\u6cd5\u8fdb\u884c\u4e86\u8bd5\u9a8c\u3002\u4f46\u5728\u6211\u4eec\u53ef\u4ee5\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u6a21\u62df\u5668\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u8fde\u63a5\u7684\u5b9e\u9645\u5de5\u4f5c\u65b9\u5f0f\u3002 GameCube \u6e38\u620f\u5b9e\u9645\u4e0a\u4f1a\u52a0\u5bc6\u53d1\u9001\u5230\u5404\u79cd\u6e38\u620f\u7684 GBA \u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5b83\u8fd9\u6837\u505a\u7684\u65b9\u5f0f\u5b9e\u9645\u4e0a\u5728\u65e9\u671f\u7ed9 Dolphin \u5e26\u6765\u4e86\u4e00\u4e9b\u95ee\u9898\u3002\u52a0\u5bc6\u8fc7\u7a0b\u5728\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668 (DSP) \u4e0a\u4ee5\u6211\u4eec\u79f0\u4e3a GBA \u5fae\u7801\u7684\u7279\u6b8a\u5fae\u7801\u8fdb\u884c\u3002\u73b0\u5728\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u5f88\u5947\u602a\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u4eba\u8ba4\u4e3a GameCube/Wii \u7684\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668 (DSP) \u4e13\u95e8\u7528\u4e8e\u97f3\u9891\u6a21\u62df\uff0c\u4f46\u6709\u65f6\u5b83\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u4efb\u52a1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u7528\u4e8e\u5c06\u53d1\u9001\u5230 GBA \u7684\u53ef\u6267\u884c\u6587\u4ef6\u7f16\u7801\u4e3a\u4e00\u79cd\u5f31\u6df7\u6dc6\u5f62\u5f0f\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6700\u503c\u5f97\u6ce8\u610f\u7684\u90e8\u5206\u662f GBA BIOS \u7528\u4e8e\u89e3\u5bc6\u7684\u5bc6\u7801\u5305\u62ec\u4e00\u4e2a\u6b65\u9aa4\uff0c\u5176\u4e2d\u6570\u636e\u4e0e\u5176\u4f5c\u8005\u7684\u6635\u79f0 kawasedo \u8fdb\u884c\u5f02\u6216\u3002\u8fd9\u6307\u7684\u662f Tomohiro Kawasae\uff0c\u4ed6\u6700\u7ec8\u8fd8\u7f16\u5199\u4e86 NES \u4eff\u771f\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u5c06\u7528\u4e8e GBA \u8fde\u63a5\u6e38\u620f\uff0c\u5982\u52a8\u7269\u4e4b\u68ee\u3001\u94f6\u6cb3\u6218\u58eb Prime \u7b49\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u5728\u521d\u59cb\u8fde\u63a5\u671f\u95f4\u53d1\u751f\u4e00\u6b21\uff0c\u5e76\u4e14\u53ea\u9700\u8981\u4e00\u5e27\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u4e4b\u540e\uff0c\u6e38\u620f\u4f1a\u5728\u60a8\u751a\u81f3\u542c\u5230\u97f3\u9891\u4e2d\u65ad\u4e4b\u524d\u8fc5\u901f\u8df3\u56de\u4e4b\u524d\u7684\u5fae\u7801\u3002\u9700\u8981\u7279\u522b\u8bf4\u660e\u7684\u662f\uff0c\u67d0\u4e9b\u7b2c\u4e00\u65b9\u4efb\u5929\u5802\u6e38\u620f\u8df3\u8fc7\u4e86\u8fd9\u4e00\u6b65\u5e76\u4e14\u4ece\u4e0d\u4ea4\u6362\u5fae\u7801\u3002\u5728\u8fd9\u4e9b\u7f55\u89c1\u7684\u60c5\u51b5\u4e0b\uff0c\u6e38\u620f\uff08\u6216\u670d\u52a1\u76d8\uff09\u5c06\u76f4\u63a5\u5728 PowerPC \u4ee3\u7801\u4e2d\u5b9e\u73b0\u52a0\u5bc6\u8fc7\u7a0b\u3002\u8fd9\u5305\u62ec\u585e\u5c14\u8fbe\u4f20\u8bf4\uff1a\u98ce\u4e4b\u6756\u3001\u52a8\u7269\u4e4b\u68ee\u548c\u4e00\u4e9b\u53ef\u80fd\u7684\u670d\u52a1\u5149\u76d8\u3002\n\u9664\u4e86\u90a3\u4e00\u70b9\u70b9\u66f2\u7ebf\u7403\u4e4b\u5916\uff0cGCN \u4e0e GBA \u901a\u4fe1\u7684\u534f\u8bae\u975e\u5e38\u7b80\u5355\u3002 GBA \u94fe\u8def\u7535\u7f06\u8fde\u63a5\u5230 GBA \u7684\u6570\u636e\u7aef\u53e3\u5e76\u63d2\u5165 GameCube \u4e0a\u7684\u63a7\u5236\u5668\u7aef\u53e3\u3002\u5728 GameCube \u7aef\uff0c\u901a\u4fe1\u7531\u4e32\u884c\u63a5\u53e3 (SI) \u5904\u7406\u3002\u4e3b\u8981\u95ee\u9898\u662f\u627e\u51fa\u4e00\u79cd\u5728\u4e24\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u6a21\u62df\u5668\u4e4b\u95f4\u5b9e\u73b0\u901a\u4fe1\u7684\u597d\u65b9\u6cd5\u3002\u867d\u7136\u6211\u4eec\u77e5\u9053\u5c1d\u8bd5\u4e86\u591a\u79cd\u65b9\u6cd5\uff0c\u4f46\u90a3\u4e2a\u65f6\u4ee3\u5e78\u5b58\u7684\u5b9e\u73b0\u4f7f\u7528\u4f20\u8f93\u63a7\u5236\u534f\u8bae (TCP) \u6765\u6865\u63a5 GameCube \u548c GBA \u6a21\u62df\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u867d\u7136\u4f7f\u7528\u7f51\u7edc\u901a\u4fe1\u534f\u8bae\u4f3c\u4e4e\u662f\u4e00\u4e2a\u5947\u602a\u7684\u9009\u62e9\uff0c\u4f46\u505a\u51fa\u8fd9\u4e00\u51b3\u5b9a\u662f\u4e3a\u4e86\u4fdd\u6301\u5c06\u591a\u4e2a\u72ec\u7acb\u8bbe\u5907\u8fde\u63a5\u5230 GameCube \u7684\u4f53\u9a8c\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u5982\u679c\u9700\u8981\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u5728\u540c\u4e00\u53f0 PC \u4e0a\u8fde\u63a5 VBA-M\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u4ece\u540c\u4e00\u7f51\u7edc\u4e0a\u7684\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a\u8fde\u63a5\u5b83\u3002\u8fd9\u4e9b\u52aa\u529b\u7531 shuffle2 \u5e26\u5934\uff0c\u867d\u7136\u65e7\u7684\u652f\u6301\u65e5\u5fd7\u4f3c\u4e4e\u8868\u660e\u8be5\u529f\u80fd\u53ea\u662f\u4e00\u4e2a\u6846\u67b6\u5e76\u4e14\u529f\u80fd\u5f88\u5c11\uff0c\u4f46\u7528\u6237\u786e\u5b9e\u58f0\u79f0\u53ef\u4ee5\u8fdb\u5165 Animal Crossing \u7684 GBA \u5c9b\u3002\u60f3\u62ff\u5c31\u62ff\u5427\u3002\u867d\u7136\u6700\u521d\u7684 GBA \u63a7\u5236\u5668\u9009\u9879\u51fa\u73b0\u5728 2009 \u5e74\uff0c\u4f46\u771f\u6b63\u53ef\u73a9\u6027\u7684\u7b2c\u4e00\u4e2a\u8bc1\u636e\u51fa\u73b0\u5728 2010 \u5e74\u521d\uff0cshuffle2 \u7684\u5f00\u53d1\u5e16\u5b50\u89e3\u91ca\u4e86\u5982\u4f55\u5728 VBA-M \u4e2d\u4f7f\u7528\u65b0\u7684 Joybus \u9009\u9879\u4ee5\u53ca\u5728 Dolphin \u4e2d\u8be5\u505a\u4ec0\u4e48\u3002\u5f53\u7136\uff0c\u4ed6\u8fd8\u5305\u542b\u4e86\u4e00\u4e9b\u4f1a\u8ba9\u6f5c\u5728\u73a9\u5bb6\u60ca\u53f9\u7684\u5c4f\u5e55\u622a\u56fe\u3002 GBA \u8fde\u63a5\u7ec8\u4e8e\u5f00\u59cb\u5de5\u4f5c\u4e86\uff0c\u4f46\u6027\u80fd\u5374\u5f88\u7cdf\u7cd5\u3002\u8fd9\u662f\u7531\u4e8e\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\u6df7\u6dc6\u3002 Dolphin \u7684 DSP-HLE \u4e0d\u652f\u6301 GBA \u5fae\u7801\uff0c\u8feb\u4f7f\u7528\u6237\u9000\u56de\u5230 DSP-LLE\u3002\u8fd9\u4e0d\u662f\u6211\u4eec\u4eca\u5929\u559c\u6b22\u7684 DSP-LLE Recompiler\u3002\u4e0d\uff0c\u8fd9\u662f DSP-LLE \u89e3\u91ca\u5668\u3002 shuffle2 \u5bf9\u8be5\u9879\u76ee\u5931\u53bb\u4e86\u5174\u8da3\uff0c\u8868\u793a\u5728\u89e3\u51b3\u6781\u7aef\u6027\u80fd\u95ee\u9898\u4e4b\u524d\uff0c\u505a\u4efb\u4f55\u4e8b\u60c5\u90fd\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u8fd9\u6700\u7ec8\u5c06\u901a\u8fc7 shuffle2 \u5f00\u53d1\u7684 GBA \u5fae\u7801\u7684 DSP-HLE \u5b9e\u73b0\u6765\u89e3\u51b3\u3002\u6709\u4e86 DSP-HLE \u7684\u652f\u6301\uff0c\u5c11\u6570\u53ef\u4ee5\u8fd0\u884c\u7684\u6e38\u620f\u7684\u6027\u80fd\u731b\u589e\uff0c\u4f46\u5e76\u6ca1\u6709\u89e3\u51b3\u6838\u5fc3\u53ef\u7528\u6027\u95ee\u9898\u548c\u4f4e\u517c\u5bb9\u6027\u95ee\u9898\u3002 2011 \u5e74\uff0c\u5bf9\u8be5\u529f\u80fd\u8fdb\u5c55\u7f13\u6162\u611f\u5230\u6cae\u4e27\uff0c\u6700\u7ec8\u5bfc\u81f4 VBA-M \u548c Dolphin \u5f00\u53d1\u4eba\u5458\u4e4b\u95f4\u7684\u5173\u7cfb\u7d27\u5f20\u3002\u8fd9\u51fa\u620f\u5bfc\u81f4 shuffle2 \u5bf9 VBA-M \u5bf9 Dolphin \u8fde\u63a5\u9879\u76ee\u5931\u53bb\u5174\u8da3\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u4ed6\u6700\u540e\u4e00\u6b21\u6d89\u8db3\u8be5\u9886\u57dfGBA \u8fde\u901a\u6027\u3002\u4ed6\u4e8e 2014 \u5e74\u8fd4\u56de\uff0c\u8fd9\u6b21\u4f7f\u7528 Higan GBA \u6838\u5fc3\u4f5c\u4e3a\u4ed6\u65b0\u5b9e\u9a8c\u7684\u50ac\u5316\u5242\u3002\u5728\u8003\u8651\u6700\u597d\u7684 GBA \u6a21\u62df\u5668\u65f6\uff0c\u4f7f\u7528 Higan \u7684 GBA \u5185\u6838\u4ece\u8868\u9762\u4e0a\u770b\u4f3c\u4e4e\u5f88\u5947\u602a\uff0c\u5c24\u5176\u662f\u5728 2014 \u5e74\u3002\u5b83\u76f8\u5f53\u4e0d\u6210\u719f\uff0c\u65e0\u6cd5\u4e0e VBA-M \u7684\u9ad8\u517c\u5bb9\u6027\u6216\u6027\u80fd\u76f8\u63d0\u5e76\u8bba\u3002\u4f46\u8fd9\u4e0d\u662f\u4ed6\u9700\u8981\u7684\u3002 Higan \u7684 GBA \u6838\u5fc3\u63d0\u4f9b\u4e86 VBA-M \u7edd\u5bf9\u4e0d\u80fd\u63d0\u4f9b\u7684\u4e1c\u897f\uff1a\u4e00\u4e2a\u5e72\u51c0\u3001\u73b0\u4ee3\u5316\u7684\u4ee3\u7801\u5e93\uff0c\u66f4\u5bb9\u6613\u4f7f\u7528\u548c\u96c6\u6210\u3002\u4ed6\u8fd8\u653e\u5f03\u4e86 TCP \u901a\u4fe1\u5b9e\u73b0\u3002 shuffle2 \u53cd\u800c\u5199\u4e86\u4e00\u4e2a\u65b0\u7684\u5171\u4eab\u5185\u5b58\u901a\u4fe1\u65b9\u6cd5\u3002\u8fd9\u662f\u4e00\u79cd\u8f83\u4f4e\u5f00\u9500\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u6cd5\uff0c\u5141\u8bb8\u66f4\u7d27\u5bc6\u7684\u540c\u6b65\uff0c\u4f46\u610f\u5473\u7740\u60a8\u5c06\u65e0\u6cd5\u5728\u5355\u72ec\u7684\u673a\u5668\u4e0a\u8fd0\u884c GBA\u3002\u770b\u5230\u5728 LAN \u4e0a\u8fd0\u884c GBA \u6a21\u62df\u5668\u5bf9\u524d\u4e00\u79cd\u65b9\u6cd5\u7684\u5de5\u4f5c\u6709\u591a\u5927\u95ee\u9898\u540e\uff0c\u4ed6\u4e0d\u518d\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u60f3\u6cd5\u3002\u8fd9\u4e9b\u66f4\u6539\u4ea7\u751f\u4e86\u7acb\u7aff\u89c1\u5f71\u7684\u6548\u679c\uff0c\u56e0\u4e3a\u6027\u80fd\u548c\u517c\u5bb9\u6027\u90fd\u6709\u4e86\u5de8\u5927\u7684\u660e\u663e\u6539\u8fdb\u3002\u585e\u5c14\u8fbe\u4f20\u8bf4\uff1a\u56db\u5251\u5386\u9669\u8bb0\uff08\u548c\u56db\u5251+\uff01\uff09\u73b0\u5728\u53d8\u5f97\u6d41\u7545\u4e14\u53cd\u5e94\u7075\u654f\u3002\u8fd8\u6709\u5927\u91cf\u65b0\u6e38\u620f\u4e5f\u6709\u6548\uff0c\u4f8b\u5982\u585e\u5c14\u8fbe\u4f20\u8bf4\uff1a\u98ce\u4e4b\u6756\u3001\u4efb\u5929\u5802\u62fc\u56fe\u5408\u96c6\u3001\u52a8\u7269\u4e4b\u68ee\u548c\u6d1b\u514b\u4eba X\uff1a\u6307\u6325\u4efb\u52a1\u3002\u73b0\u5728\u6709\u8d85\u8fc7\u516d\u6b3e\u6e38\u620f\u652f\u6301\u3002\u751a\u81f3\u66f4\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff1f\u6240\u6709\u8fd9\u4e9b\u6e38\u620f\u90fd\u5728\u5168\u901f\u8fd0\u884c\uff01\u6211\u4eec\u5728\u535a\u5ba2\u4e0a\u5bf9\u8fd9\u4e2a\u529f\u80fd\u611f\u5230\u975e\u5e38\u5174\u594b\uff0c\u6211\u4eec\u5236\u4f5c\u4e86\u4e00\u4e2a\u89c6\u9891\uff0c\u671f\u5f85\u5b83\u7684\u6700\u7ec8\u53d1\u5e03\uff01\u5bf9\u4e8e\u90a3\u4e9b\u8ddf\u968f\u5f00\u53d1\u7684\u4eba\u6765\u8bf4\uff0c\u4f60\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e2a\u5b9e\u73b0\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5408\u5e76\u3002\u6b63\u5982\u6211\u4eec\u5728\u535a\u5ba2\u4e0a\u75db\u82e6\u5730\u4e86\u89e3\u5230\u7684\u90a3\u6837\uff0c\u6709\u65f6\u6700\u56f0\u96be\u7684\u90e8\u5206\u4e0d\u662f\u8bc1\u660e\u67d0\u4e9b\u4e1c\u897f\u53ef\u4ee5\u5de5\u4f5c\uff0c\u800c\u662f\u6e05\u7406\u5b83\u5e76\u4f7f\u5176\u5b8c\u6210\u7684\u8fc7\u7a0b\u3002\u517c\u5bb9\u6027\u548c\u6027\u80fd\u90fd\u5f88\u597d\uff0c\u4f46\u4f7f\u7528\u8d77\u6765\u5f88\u56f0\u96be\uff0c\u800c\u4e14\u6709\u5f88\u591a\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u5d29\u6e83\u3002\u8fd8\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u5728\u539f\u578b\u4e2d\u4e00\u6b21\u53ea\u80fd\u8fde\u63a5\u4e00\u4e2a GBA \u6a21\u62df\u5668\uff0c\u5e76\u4e14\u5b9e\u73b0\u88ab\u9501\u5b9a\u5728 Windows \u673a\u5668\u4e0a\u3002\u867d\u7136\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u8db3\u591f\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u6765\u89e3\u51b3\uff0c\u4f46\u8be5\u9879\u76ee\u6700\u7ec8\u505c\u6ede\u4e0d\u524d\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u770b\u5230\u66d9\u5149\u3002\n\u968f\u7740 Higan Dolphin \u5171\u4eab\u5185\u5b58\u9879\u76ee\u7684\u6c38\u4e45\u6682\u505c\uff0cGBA \u8fde\u63a5\u4eff\u771f\u5904\u4e8e\u751f\u547d\u652f\u6301\u72b6\u6001\u3002\u65e9\u671f\u7684\u534f\u8bae\u53ea\u652f\u6301\u51e0\u6b3e\u6e38\u620f\uff0c\u5e76\u6ca1\u6709\u591a\u5927\u7528\u5904\u3002\u5b83\u7f13\u6162\uff0c\u7e41\u7410\uff0c\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u53cc\u65b9\u7684\u8bb8\u591a\u5f00\u53d1\u4eba\u5458\u90fd\u5bf9\u652f\u6301\u7684\u8fde\u63a5\u9879\u76ee\u8868\u793a\u4e0d\u5c51\u3002\u7531\u4e8e VBA-M \u5f00\u53d1\u4eba\u5458\u751a\u81f3\u5236\u5b9a\u4e86\u4ece\u5b98\u65b9\u7248\u672c\u4e2d\u5220\u9664\u8be5\u529f\u80fd\u7684\u8ba1\u5212\uff0c\u770b\u8d77\u6765\u597d\u50cf\u4e00\u5207\u90fd\u5728\u5d29\u6e83......\u76f4\u5230\u5b83\u6ca1\u6709\u3002\u4e8b\u60c5\u80fd\u591f\u5728\u8270\u96be\u65f6\u671f\u4fdd\u6301\u4e00\u81f4\u7684\u4e00\u4e2a\u5173\u952e\u539f\u56e0\u662f\u4e00\u4e2a\u540d\u4e3askidau\u7684\u5f00\u53d1\u4eba\u5458\u3002\u4ed6\u4eec\u662f Dolphin \u548c VBA-M \u7684\u8d21\u732e\u8005\uff0c\u8fd8\u5e2e\u52a9\u4e86\u200b\u200b 2010 \u5e74\u5b9e\u65bd\u7684 GBA \u65b9\u9762\u3002\u5728\u90a3\u4e4b\u540e\u7684\u51e0\u5e74\u91cc\uff0c\u4ed6\u4eec\u63d0\u4f9b\u652f\u6301\u5e76\u5e2e\u52a9\u7528\u6237\u83b7\u5f97 GBA \u8fde\u63a5\u529f\u80fd\u3002\u51ed\u501f\u8fd9\u4e00\u7ecf\u9a8c\uff0c\u4ed6\u4eec\u5bf9\u5927\u6e7e\u533a\u8fde\u901a\u6027\u65b9\u9762\u7684\u95ee\u9898\u548c\u6311\u6218\u6709\u4e86\u6df1\u5165\u7684\u4e86\u89e3\u3002\u4e0e shuffle2 \u4f7f\u7528\u4ed6\u4eec\u4ece 2010 \u5e74\u5b9e\u73b0\u4e2d\u5b66\u5230\u7684\u4e1c\u897f\u6765\u521b\u5efa\u65b0\u534f\u8bae\u4e0d\u540c\uff0cskidau \u63a5\u53d7\u4e86\u4ed6\u4eec\u5b66\u5230\u7684\u4e1c\u897f\u5e76\u8bd5\u56fe\u6539\u5584\u5f53\u524d\u7684 TCP GBA \u60c5\u51b5\u3002 2015 \u5e74\uff0c\u4ed6\u4eec\u7684\u52b3\u52a8\u6210\u679c\u968f\u7740\u5bf9 Dolphin \u548c VBA-M \u7684\u5927\u91cf\u66f4\u6539\u800c\u4ea4\u4ed8\u3002\u4e00\u591c\u4e4b\u95f4\uff0cDolphin \u4ece\u80fd\u591f\u8fde\u63a5\u5230\u51e0\u4e2a\u6e38\u620f\u5230\u81f3\u5c11\u4e0e\u5927\u591a\u6570 GBA \u8fde\u63a5\u5e93\u6709\u4e00\u5b9a\u7684\u517c\u5bb9\u6027\u3002\u8fd9\u662f\u901a\u8fc7\u4e00\u4e2a\u806a\u660e\u7684\u7cfb\u7edf\u5b9e\u73b0\u7684\uff0c\u8be5\u7cfb\u7edf\u4f7f\u6a21\u62df\u5668\u4ee5\u6700\u5c11\u7684\u540c\u6b65\u8fdb\u884c\u901a\u4fe1\u3002\u5176\u4e2d\u7684\u5173\u952e\u7ec4\u6210\u90e8\u5206\u662f GBA \u6a21\u62df\u5668\u5728\u7b49\u5f85\u6765\u81ea Dolphin \u7684\u6570\u636e\u5305\u65f6\u4fdd\u6301\u6682\u505c\u72b6\u6001\u3002 Dolphin \u4f1a\u5728\u8fde\u63a5\u65f6\u5c06\u6570\u636e\u5305\u53d1\u9001\u5230 GBA \u4eff\u771f\u5668\uff0c\u544a\u8bc9 GBA \u5b83\u5728\u4eff\u771f\u4e2d\u7684\u4f4d\u7f6e\u4ee5\u53ca\u9884\u8ba1\u4e0b\u4e00\u4e2a\u56de\u590d\u7684\u65f6\u95f4\u3002\u7136\u540e\uff0cGBA \u6a21\u62df\u5668\u5c06\u5728\u6a21\u62df\u65e0\u4e0a\u9650\u4e4b\u524d\u7acb\u5373\u56de\u590d\u6570\u636e\u5305\u4e2d\u62a5\u544a\u7684\u8bbf\u5ba2\u65f6\u95f4\u3002\u5982\u679c\u6b64\u65f6\u5b83\u6ca1\u6709\u6536\u5230\u53e6\u4e00\u4e2a\u547d\u4ee4\uff0cGBA \u4eff\u771f\u5668\u5c06\u6682\u505c\u5e76\u7b49\u5f85\u4e0b\u4e00\u4e2a\u6570\u636e\u5305\u3002\u89e3\u51b3\u65b9\u6848\u76f8\u5f53\u7c97\u7cd9\uff0c\u5e27\u901f\u5ea6\u4e5f\u4e0d\u662f\u5f88\u597d\uff0c\u4f46\u5b83\u594f\u6548\u4e86\u3002\u8fd9\u4e2a\u6838\u5fc3\u601d\u60f3\u5c06\u6210\u4e3a\u672a\u6765\u51e0\u5e74 Dolphin \u4e2d GBA \u8fde\u63a5\u7684\u57fa\u7840\uff0c\u5373\u4f7f\u73b0\u5728\u8be5\u5b9e\u73b0\u4e2d\u7684\u4e00\u4e9b\u4ee3\u7801\u4ecd\u5728\u4f7f\u7528\uff01\u6b63\u662f\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u5929\u5e73\u5f00\u59cb\u503e\u659c\uff0cGBA &lt;-&gt; GCN \u8fde\u63a5\u6027\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u5b9e\u9a8c\u6027\u7684\u597d\u5947\u5fc3\u3002\u901a\u8fc7\u4f7f\u7528 Dolphin \u548c VBA-M\uff0c\u60a8\u53ef\u4ee5\u8bbf\u95ee\u6d41\u884c\u6e38\u620f\u4e2d\u7684 GBA \u8fde\u63a5\u529f\u80fd\uff0c\u4f8b\u5982\u98ce\u4e4b\u6756\u548c\u585e\u5c14\u8fbe\u4f20\u8bf4\uff1a\u56db\u5251\u5927\u5192\u9669\u4e2d\u7684\u591a\u4eba\u6e38\u620f\u3002\u5927\u91cf\u5176\u4ed6\u6e38\u620f\u4e5f\u53ef\u4ee5\u8fd0\u884c\uff0c\u751a\u81f3\u300a\u6700\u7ec8\u5e7b\u60f3\u6c34\u6676\u7f16\u5e74\u53f2\u300b\u4e5f\u53ef\u4ee5\u8fde\u63a5\u2026\u2026\u81f3\u5c11\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u8fd9\u6837\u3002\u5927\u591a\u6570\u5176\u4ed6\u529f\u80fd\u8f83\u5c0f\u7684\u6e38\u620f\u90fd\u53ef\u4ee5\u8fd0\u884c\uff0c\u4f46\u8fd9\u91cc\u548c\u90a3\u91cc\u6709\u4e00\u4e9b\u4f8b\u5916\u3002\u4e8b\u60c5\u7ec8\u4e8e\u8d70\u5230\u4e86\u4e00\u8d77\uff0c\u4f46\u8be5\u529f\u80fd\u5e76\u6ca1\u6709\u53d1\u6325\u5176\u5168\u90e8\u6f5c\u529b\u3002\u9996\u5148\u9700\u8981\u6f84\u6e05\u7684\u662f\uff0c\u867d\u7136 TCP \u662f\u4e00\u79cd\u7f51\u7edc\u901a\u4fe1\u534f\u8bae\uff0c\u4f46 TCP GBA \u5728\u7f51\u7edc\u4e0a\u7684\u5de5\u4f5c\u6548\u679c\u5e76\u4e0d\u597d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u50cf\u4f7f\u7528 WiFi \u8fd9\u6837\u7b80\u5355\u7684\u4e8b\u60c5\u5c31\u8db3\u4ee5\u5c06\u5ef6\u8fdf\u63a8\u5f97\u592a\u9ad8\u4ee5\u7ef4\u6301\u8fde\u63a5\u3002\u6709\u7ebf\u5c40\u57df\u7f51\u53ef\u4ee5\u5728\u67d0\u4e9b\u6e38\u620f\u4e2d\u5de5\u4f5c\uff0c\u4f46\u5373\u4fbf\u5982\u6b64\uff0c\u5b83\u4e5f\u975e\u5e38\u63a5\u8fd1\u3002\u8be5\u529f\u80fd\u4ec5\u5728\u4e00\u6b3e\u6e38\u620f\u300a\u585e\u5c14\u8fbe\u4f20\u8bf4\uff1a\u56db\u5251\u5927\u5192\u9669\u300b\u4e2d\u771f\u6b63\u9002\u7528\u4e8e\u5c40\u57df\u7f51\uff0c\u5e76\u589e\u52a0\u4e86\u5927\u91cf\u7684\u6027\u80fd\u5f71\u54cd\u3002\u8bf4\u5230\u6027\u80fd\uff0c\u4f7f\u7528 TCP GBA \u7684 CPU \u8981\u6c42\u5bf9\u5f88\u591a\u7528\u6237\u6765\u8bf4\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u7834\u574f\u3002\u5728\u6700\u57fa\u7840\u4e0a\uff0c\u4e0e\u4ec5\u8fd0\u884c\u57fa\u7840\u6e38\u620f\u76f8\u6bd4\uff0c\u6240\u6709\u7684\u6682\u505c\u548c\u7b49\u5f85\u610f\u5473\u7740\u60a8\u9700\u8981\u4e00\u53f0\u66f4\u5f3a\u5927\u7684\u8ba1\u7b97\u673a\u6765\u4fdd\u6301\u5168\u901f\u8fd0\u884c\u3002\u8bf7\u8bb0\u4f4f\uff0c\u65e9\u5728 2015 \u5e74\uff0c\u60a8\u5f88\u53ef\u80fd\u4f1a\u4f7f\u7528 LLE\uff08\u91cd\u65b0\u7f16\u8bd1\u5668\uff09\u97f3\u9891\u6765\u8fde\u63a5\u60a8\u7684 GBA\uff0c\u56e0\u4e3a HLE \u97f3\u9891\u9650\u5236\u517c\u5bb9\u6027\u7684\u4f17\u591a\u95ee\u9898\u3002\u53ea\u6709\u6700\u5f3a\u5927\u7684\u8ba1\u7b97\u673a\u624d\u80fd\u5728\u50cf\u585e\u5c14\u8fbe\u4f20\u8bf4\uff1a\u56db\u5251\u5927\u5192\u9669\u8fd9\u6837\u540c\u65f6\u8fde\u63a5\u591a\u4e2a VBA-M \u5b9e\u4f8b\u7684\u6e38\u620f\u4e2d\u4fdd\u6301\u5168\u901f\u8fd0\u884c\u3002\u65e0\u8bba\u60a8\u5c1d\u8bd5\u505a\u4ec0\u4e48\uff0c\u6700\u7ec8\u5e7b\u60f3\u6c34\u6676\u7f16\u5e74\u53f2\u90fd\u4f1a\u56e0\u8f93\u5165\u4e22\u5931\u800c\u7f13\u6162\u3002\u4f46\u8fd9\u4e9b\u6e38\u620f\u81f3\u5c11\u5728\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u53ef\u4ee5\u8fde\u63a5\u548c\u8fd0\u884c\u3002 2015 \u5e74\u5b9e\u65bd\u7684\u6700\u5927\u95ee\u9898\u4e4b\u4e00\u662f\u4e00\u4e9b\u76f8\u5f53\u5927\u7684\u6e38\u620f\u96be\u4ee5\u8fde\u63a5\u3002\u6211\u4eec\u6b63\u5728\u8c08\u8bba Pokemon Colosseum \u548c XD \u4ee5\u53ca\u4ed6\u4eec\u7684\u5956\u52b1\u5149\u76d8\u3002\u5bf9\u4e8e\u8bb8\u591a\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u662f GBA \u8fde\u63a5\u6700\u5927\u7684\u5931\u671b\u3002\u591a\u5e74\u6765\uff0c\u806a\u660e\u7684\u7528\u6237\u5df2\u7ecf\u60f3\u51fa\u4e86\u4e00\u4e9b\u6280\u5de7\u6765\u8ba9\u5b83\u6709\u65f6\u8fde\u63a5\u8d77\u6765\u3002\u6218\u6597\u66f4\u52a0\u4e00\u81f4\uff0c\u56e0\u4e3a\u5b83\u6709\u91cd\u8bd5\u8fde\u63a5\u9009\u9879\uff0c\u4f46\u4ea4\u6613\u51e0\u4e4e\u4e0d\u53ef\u80fd\u3002\n\u662f\u4ec0\u4e48\u5bfc\u81f4\u4e86\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\uff0c\u5c24\u5176\u662f\u8003\u8651\u5230\u534f\u8bae\u5b9e\u9645\u4e0a\u6709\u591a\u7b80\u5355\uff1f\u5173\u952e\u5728\u4e8e TCP GBA \u5982\u4f55\u4e0e Dolphin \u4fdd\u6301\u8054\u7cfb\u3002\u8fd9\u4e9b\u6e38\u620f\u7279\u522b\u559c\u6b22\u53d1\u9001\u5927\u91cf\u547d\u4ee4\uff0c\u6709\u65f6\u6bcf\u5e27\u53d1\u9001 200 \u591a\u4e2a\u547d\u4ee4\u3002\u8fd9\u66b4\u9732\u4e86 TCP GBA \u534f\u8bae\u4e2d\u4e00\u4e2a\u76f8\u5f53\u4e25\u91cd\u7684\u7f3a\u9677\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4ed6\u4eec\u5728\u7ee7\u7eed\u5411\u524d\u6a21\u62df\u4ee5\u8d76\u4e0a\u524d\u4e00\u4e2a\u547d\u4ee4\u7684\u70b9\u65f6\u6536\u5230\u547d\u4ee4\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u88ab\u7eca\u5012\u3002\u8fd9\u53ef\u80fd\u4f1a\u91cd\u590d\u53d1\u751f\uff0c\u76f4\u5230 GBA \u8fdc\u8fdc\u843d\u540e\u4ee5\u81f3\u4e8e GameCube \u5f97\u5230\u6ca1\u6709\u610f\u4e49\u7684\u54cd\u5e94\u3002\u6b64\u65f6\uff0c\u6e38\u620f\u5c06\u505c\u6b62\u4e0e GBA \u5bf9\u8bdd\uff0c\u5e76\u4e14\u4f1a\u53d1\u751f\u67d0\u79cd\u901a\u4fe1\u9519\u8bef\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5982\u679c\u901a\u4fe1\u9519\u8bef\u6ca1\u6709\u5f97\u5230\u59a5\u5584\u5904\u7406\uff0c\u5176\u4e2d\u4e00\u4e2a\u6216\u4e24\u4e2a\u6a21\u62df\u5668\u53ef\u80fd\u4f1a\u5b8c\u5168\u51bb\u7ed3\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6a21\u62df\u5668\u90fd\u4f1a\u9677\u5165\u56f0\u5883\uff0c\u7b49\u5f85\u53e6\u4e00\u4e2a\u7684\u54cd\u5e94\u3002\u8d85\u65f6\u529f\u80fd\u901a\u5e38\u4f1a\u5728\u5d29\u6e83\u65f6\u5b8c\u5168\u963b\u6b62\uff0c\u4f46\u80af\u5b9a\u6709\u65f6\u4e00\u5207\u90fd\u4f1a\u53d1\u751f\u707e\u96be\u6027\u7684\u9519\u8bef\u3002\u867d\u7136\u6307\u8d23\u7cdf\u7cd5\u7684\u6a21\u62df\u5f88\u5bb9\u6613\uff0c\u4f46\u6e38\u620f\u5e76\u6ca1\u6709\u8ba9\u4e8b\u60c5\u53d8\u5f97\u7b80\u5355\u3002\u8bb8\u591a\u6e38\u620f\u90fd\u4f9d\u8d56\u4e8e\u6bd4\u8d5b\u6761\u4ef6\uff0c\u751a\u81f3\u5728\u63a7\u5236\u53f0\u4e0a\u4e5f\u5b58\u5728\u8ba1\u65f6\u95ee\u9898\uff01\u5728 2015 \u5e74 TCP GBA \u5b9e\u65bd\u4e4b\u540e\u7684\u51e0\u5e74\u91cc\uff0c\u6539\u8fdb\u51e0\u4e4e\u6ca1\u6709\u90a3\u4e48\u663e\u7740\uff0c\u4f46\u4e0d\u65ad\u4f7f\u60c5\u51b5\u597d\u8f6c\u4e00\u4e9b\u3002\u5927\u591a\u6570\u6539\u8fdb\u90fd\u5728\u5b9e\u9645\u534f\u8bae\u4e4b\u5916\u3002\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662f\u4fee\u590d HLE \u97f3\u9891\uff0c\u5141\u8bb8\u8fde\u63a5\u591a\u4e2a TCP GBA\uff0c\u4ece\u800c\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u663e\u7740\u63d0\u9ad8\u6027\u80fd\u3002\u5bf9\u9006\u5411\u5de5\u7a0b DSP-LLE \u7684\u6dfb\u52a0\u5141\u8bb8\u5728\u6311\u5254\u7684\u6e38\u620f\u4e2d\u8fdb\u884c\u8fde\u63a5\uff0c\u800c\u65e0\u9700\u4e13\u95e8\u4ece GameCube \u6216 Wii \u8f6c\u50a8 DSP \u6587\u4ef6\u3002\u867d\u7136 GameCube \u65b9\u9762\u7684\u60c5\u51b5\u6ca1\u6709\u6539\u53d8\uff0c\u4f46 GBA \u7684\u683c\u5c40\u6b63\u5728\u53d1\u751f\u8303\u5f0f\u8f6c\u53d8\u3002 VBA-M \u73b0\u5728\u662f\u4e00\u4e2a\u4f20\u5947\u7684\u4eff\u771f\u5668\uff0c\u5b83\u7262\u7262\u5730\u8f7d\u5165\u4e86\u4eff\u771f\u5386\u53f2\u7684\u53f2\u518c\uff0c\u4f46\u662f\u65b0\u4e00\u4ee3\u7684\u4eff\u771f\u5668\u5df2\u7ecf\u51fa\u73b0\u3002\u5f88\u5feb\uff0cmGBA \u4e0d\u65ad\u6539\u8fdb\u5e76\u6210\u4e3a\u5177\u6709\u5927\u91cf\u9ad8\u7ea7\u529f\u80fd\u7684\u5f3a\u5927\u3001\u51c6\u786e\u7684\u66ff\u4ee3\u65b9\u6848\u3002\u968f\u7740\u7528\u6237\u770b\u5230\u652f\u6301\u66f4\u591a\u786c\u4ef6\u5916\u56f4\u8bbe\u5907\uff0c\u8bb8\u591a\u4eba\u60f3\u77e5\u9053 Joybus \u652f\u6301\u548c\u4e0e Dolphin \u7684\u8fde\u63a5\u662f\u5426\u6700\u7ec8\u4f1a\u51fa\u73b0\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u7528\u6237\u5e76\u4e0d\u662f\u552f\u4e00\u611f\u5174\u8da3\u7684\u4eba\uff1b endrift \u8fd8\u60f3\u5b9e\u73b0\u5bf9 Joybus \u7684\u652f\u6301\uff0c\u751a\u81f3\u5411 Dolphin \u63d0\u4ea4\u4e86\u4fee\u590d\u7a0b\u5e8f\u4ee5\u51c6\u5907\u652f\u6301\u3002\u4e0d\u5e78\u7684\u662f\uff0cmGBA \u7684\u5176\u4ed6\u529f\u80fd\u548c\u5de5\u4f5c\u5bfc\u81f4\u4e8b\u60c5\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u5ef6\u8fdf\u3002\u6700\u540e\uff0c\u5728 2021 \u5e74\uff0cmGBA 0.9 \u4e2d\u6dfb\u52a0\u4e86\u5bf9 Dolphin \u8fde\u63a5\u7684\u652f\u6301\uff01 mGBA \u66f4\u51c6\u786e\u7684\u4eff\u771f\u7acb\u5373\u5bf9\u517c\u5bb9\u6027\u4ea7\u751f\u4e86\u5f71\u54cd\u3002\u5728\u300a\u585e\u5c14\u8fbe\u4f20\u8bf4\uff1a\u56db\u5251+\u300b\u7b49 GBA \u8fde\u63a5\u6e38\u620f\u4e2d\u56f0\u6270 VBA-M \u7684\u97f3\u9891\u95ee\u9898\u5728 mGBA \u4e2d\u6ca1\u6709\u53d1\u751f\u3002 Endrift \u5bf9 Dolphin \u7684\u5176\u4ed6\u4fee\u590d\u8fd8\u4fee\u590d\u4e86\u4e0e\u300a\u7d22\u5c3c\u514b\u5927\u5192\u9669 2\uff1a\u6218\u6597\u300b\u548c\u300a\u6700\u7ec8\u5e7b\u60f3\u6c34\u6676\u7f16\u5e74\u53f2\u300b\u7b49\u6e38\u620f\u7684\u8fde\u63a5\u3002\u9664\u4e86\u6b63\u786e\u64ad\u653e\u97f3\u9891\u4e4b\u5916\uff0cendrift \u548c bonta \u4fee\u590d\u4e86\u585e\u5c14\u8fbe\u4f20\u8bf4\uff1a\u56db\u5251 + \u4e2d\u56de\u5408\u4e4b\u95f4\u7684\u5173\u952e\u6302\u8d77\u3002\u66f4\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u662f\uff0c\u6240\u6709\u8fd9\u4e9b\u66f4\u6539\u90fd\u662f\u5728 2015 \u534f\u8bae\u7684\u8303\u56f4\u5185\u8fdb\u884c\u7684\uff01\u5411\u540e\u517c\u5bb9\u6027\u4e0d\u53d7\u5f71\u54cd\uff0cVBA-M \u4e0d\u9700\u8981\u4efb\u4f55\u66f4\u6539\u3002\u7136\u800c\uff0c\u5728\u6240\u6709\u7684\u51c6\u5907\u548c\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53e6\u4e00\u4e2a\u9879\u76ee\u63ed\u5f00\u4e86\u9762\u7eb1\uff0c\u4e00\u4e2a\u4e0d\u53d7 TCP GBA \u534f\u8bae\u9650\u5236\u7684\u9879\u76ee\u3002\u5728\u5f00\u53d1\u6e20\u9053\u7684\u8ba8\u8bba\u4e2d\uff0cbonta \u6ce8\u610f\u5230\u4e00\u4e9b\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u4e0e endrift \u8ba8\u8bba\u5bf9 GBA &lt;-&gt; GCN \u534f\u8bae\u7684\u6f5c\u5728\u6539\u8fdb\u3002\u8003\u8651\u5230\u4ed6\u7684\u4e2a\u4eba\u9879\u76ee\u53ef\u80fd\u4f1a\u5f15\u8d77\u4eba\u4eec\u7684\u5174\u8da3\uff0c\u4ed6\u51b3\u5b9a\u76f4\u8a00\u4e0d\u8bb3\u5e76\u5ba3\u5e03\u4ed6\u4e00\u76f4\u81f4\u529b\u4e8e\u5c06 mGBA \u76f4\u63a5\u96c6\u6210\u5230 Dolphin \u4e2d\u3002\u4ed6\u751a\u81f3\u58f0\u79f0\u8fd9\u4e9b\u5185\u90e8 GBA \u4e0e netplay \u517c\u5bb9\u3002\n\u5927\u627f\u8bfa\u5f88\u5bb9\u6613\u5b9e\u73b0......", "note_en": "Your eyes are not deceiving you. As of  5.0-14690, Dolphin now has  mGBA directly built into it as a new way to handle Game Boy Advance connectivity with GameCube titles. For those who don&#39;t know, mGBA is the most renowned and accurate GBA emulator of this era and has been rapidly improving since its inception. Recently,  we wrote about  mGBA adding support for our TCP GBA protocol, but this is something completely new. With integration and synchronization work done by   bonta, connecting your favorite GameCube titles with a Game Boy Advance for multiplayer and other bonus features is now greatly simplified. Dubbed the  Integrated GBA, a stripped-down version of mGBA will boot up alongside Dolphin when set to one or more controller ports. These mGBA instances are clock-synced to GameCube emulation for impeccable connection stability. By bringing these two emulators together in one package, GBA connectivity features now work with popular features like savestates, input recordings, and  netplay! All of this comes with the added bonus of improved performance and compatibility. If you don&#39;t believe us, check it out yourself!\n   Getting to this point has been a trial that spans generations of developers and emulators. If we&#39;re going to tell the full story behind emulating GBA to GCN communication, we have to start from the very beginning.\n  As a feature of the GameCube, Game Boy Advance connectivity was pushed to a significant degree in the early days of the system at events like E3, magazines, and of course television commercials. With talented developers from  Sonic Team USA,  Nintendo EAD,  The Pokemon Company, and others releasing titles that would take advantage of the feature, it was easy to see the potential. And at its best, GBA connectivity games are incredibly fun and provide rather unique experiences that you wouldn&#39;t be able to find on any other console.\n  As those who had a GameCube would know, these experiences were few and far between. The feature was left in an awkward spot where it was expensive and needed lots of games to justify the cost, but because of the small userbase most developers weren&#39;t willing to invest a significant amount of effort into GBA connectivity features. There are some undeniable gems, but more often than not GBA connectivity features were tacked on poorly as some kind of checkbox feature. With the library now set, we can sort the types of GBA connectivity features into five rough categories.\n  Multiplayer Games - These games heavily rely on GBA &lt;-&gt; GCN connectivity to give each player unique information or their own screen to play off of at times. This includes  The Legend of Zelda: Four Swords Adventures,  Final Fantasy Crystal Chronicles, and  Pac-Man Vs. Bonus points go to Factor 5 for allowing players in  Rogue Squadron III to link a GBA in competitive multiplayer to use as an extra screen for hiding orders, even if it doesn&#39;t amount to much.\n Transferrable Minigames - These games let you transfer detachable games to the GBA. Sometimes it is a bonus NES game, sometimes it&#39;s a miniature version of the game you&#39;re playing. Sometimes it is...  Crash Blast. Examples of games with this feature include  Nintendo Puzzle Collection,  Animal Crossing, and  technically  Crash Bandicoot: Wrath of Cortex.\n Bonus Modes or Extra Content - Games could also use the GBA in a single player context to unlock bonus content on the main game.  Animal Crossing&#39;s GBA island,  Mega Man X: Command Mission&#39;s Treasure Tracker and  Wind Waker&#39;s Tingle Tuner are great examples of this. This may seem like a rather expensive bonus feature, but at least it&#39;s not an amiibo to unlock quick warping, right?\n Connectivity with a GBA game - Titles could also connect with specific GBA games to unlock content or do things between one or both games. Many games do this, including  Harvest Moon: A Wonderful Life,  Sonic Adventure 2: Battle, and  Metroid Prime. Note that  Sonic Adventure 2: Battle can also connect to a GBA  without a game for a slightly lesser version of what it does.\n The Pokemon Games - We split this into a separate category because the GBA games are the  main product in this case.  Pokemon Colosseum,  Pokemon XD: Gale of Darkness,  Pokemon Box, and their bonus discs can all connect to various Generation 3 Pokemon GBA games for bonuses, trading, and battling.  Pokemon Box also let you store Pokemon and had an adventure mode where you could play the GBA games on the big screen without a Game Boy Player.\n  Still, the few games that truly embraced GBA connectivity presented an interesting emulation challenge. Over the years, several developers have embarked on the multi-system mission.\n  The earliest recorded implementations of GBA connectivity emulation go back to around 2009, with the feature first being spotted in  Dolphin r2578. While we don&#39;t know the exact details behind connecting the earliest versions to a GBA emulator, we do know from developer accounts that multiple ideas were trialed with a focus around the best GBA emulator of the era,  VBA-M.\n But before we could connect to another emulator, we needed to understand how the connection actually works. GameCube games will actually encrypt the GBA binary that is sent to the various games, and the way it does this actually posed a bit of a problem for Dolphin early on. The encryption process took place on the  Digital Signal Processor (DSP) under a special microcode that we refer to as the  GBA microcode. Now this may sound weird, as most people consider the GameCube/Wii&#39;s Digital Signal Processor (DSP) specifically for  audio emulation, but sometimes it could be used for other tasks. In this case, it is used to encode the executable sent to the GBA as a weak form of obfuscation.\n The most notable part of this process is that the cipher used by the GBA BIOS for decryption includes a step where data is XORed with its author&#39;s nickname, kawasedo. This refers to  Tomohiro Kawasae, who would also end up coding NES emulation features that would be used in GBA connectivity games like  Animal Crossing,  Metroid Prime and many others.\n All of this happens once during the initial connection and only takes a fraction of a frame. After that the game quickly jumps back to the previous microcode before you can even hear an interruption in audio. As a special note, certain first party Nintendo games skipped this step and never swap microcodes. In these rare cases, the game (or service disc) will implement the encryption process directly in PowerPC code. This includes  The Legend of Zelda: The Wind Waker,  Animal Crossing, and potentially some service discs.\n Other than that little bit of a curveball, the protocol in which the GCN communicated to the GBA was dead simple. The GBA Link Cable attached to the data port of the GBA and plugged into a controller port on the GameCube. On the GameCube side, communication was then handled by Serial Interface (SI). The main problem was then figuring out a good way to implement communication between two completely different emulators. While we know several methods were trialed, the surviving implementation from that era used the Transmission Control Protocol (TCP) to bridge communication between the GameCube and GBA emulators. While it may seem like an odd choice to use a  network communication protocol, the decision was made in an effort to preserve the experience of having multiple separate devices connected to the GameCube. The idea was that you could still connect VBA-M on the same PC if you wanted,  or you could connect it from another computer on the same network. These efforts were spearheaded by   shuffle2 and while old support logs seem to indicate that this feature was just a framework and had very little functionality, users did claim that getting to  Animal Crossing&#39;s GBA island was possible. Take that as you will.\n  While the initial GBA controller option turned up in 2009, the first evidence of  true playability turned up in early 2010, with development posts from   shuffle2 explaining how to use the new Joybus options in VBA-M and what to do in Dolphin. He, of course, included some screenshots that would wow prospective players.\n  GBA connectivity was finally working, but performance was abysmal. This was due to the obfuscation we mentioned earlier. Dolphin&#39;s DSP-HLE didn&#39;t support the GBA microcode, forcing users to fall back to DSP-LLE. And this isn&#39;t the DSP-LLE  Recompiler we enjoy today. No, this was  DSP-LLE Interpreter.   shuffle2 lost interest in the project, saying that until the extreme performance problems were solved, there wasn&#39;t much point in doing anything. This would eventually be remedied with a DSP-HLE implementation of the GBA microcode developed by...   shuffle2. With DSP-HLE support, performance in the few games that  did work skyrocketed, but it didn&#39;t fix the core usability issues and low compatibility.\n Frustration with how slowly the feature was progressing eventually strained relations between VBA-M and Dolphin developers in 2011. The drama resulted in   shuffle2 losing interest in the VBA-M to Dolphin connectivity project, but it wouldn&#39;t be his last foray into the realm of GBA connectivity. He returned in 2014, this time using the Higan GBA core as the catalyst for his new experiment. When thinking about the best GBA emulators, using Higan&#39;s GBA core might seem odd on the surface, especially back in 2014. It was rather immature and couldn&#39;t match the high compatibility or performance of VBA-M. But that&#39;s not what he needed. Higan&#39;s GBA core offered something that VBA-M absolutely couldn&#39;t: A clean, modernized codebase that was easier to work with and integrate.\n He also abandoned the TCP communication implementation.   shuffle2 instead wrote a new  Shared Memory communication method. This was a lower overhead method of interprocess communication which allowed for tighter synchronization but meant that you wouldn&#39;t be able to run GBAs on separate machines. Having seen how problematic running a GBA emulator across LAN worked for the previous method, he no longer considered that a viable idea anyway.\n These changes yielded immediate results, as there were huge visible improvements to both performance and compatibility.  The Legend of Zelda: Four Swords Adventures (and Four Swords+!) was now smooth and responsive. There were tons of new games that also worked, like  The Legend of Zelda: The Wind Waker,  Nintendo Puzzle Collection,  Animal Crossing, and  Mega Man X: Command Mission. There were now over half a dozen games supported. And even more impressively? All of these games were running  full speed! We here at the blog were so excited about the feature that we made a video anticipating its eventual release!\n  For those that followed development back then, you already know that this implementation would never be merged. As we at the blog painfully learned, sometimes the hardest part isn&#39;t proving that something can work, but rather is the process of cleaning it up and getting it to completion. Compatibility and performance was great, but using it was difficult and there were a lot of ways to cause crashes. There was also the  small issue that you could only connect one GBA emulator at a time in the prototype and the implementation was locked to Windows machines. While all of these problems were fixable with enough time and effort, the project eventually stalled and would never see the light of day.\n  With the permanent suspension of the Higan Dolphin Shared Memory project, GBA connectivity emulation was on life support. The early protocol only supported a few games and it didn&#39;t see much use. It was slow, cumbersome, and worse yet, many developers on both sides showing disdain toward the supporting connectivity project. With VBA-M developers even drawing up plans to remove the feature from official builds, it really seemed as though everything was falling apart... until it wasn&#39;t.\n One of the key reasons things were able to hold together through rough times was a developer known as   skidau. They were a contributor to both Dolphin and VBA-M and also helped with the GBA side of the 2010 implementation. Throughout the years after that, they provided support and helped users get GBA connectivity features working. Because of this experience, they had a deep knowledge of the problems and challenges around GBA connectivity. Unlike   shuffle2, who used what they learned from the 2010 implementation to create a new protocol,   skidau took what they learned and tried to improve the current TCP GBA situation. In 2015, the fruits of their labor were delivered with tons of changes to both Dolphin and VBA-M.\n   Overnight, Dolphin went from being able to connect to a couple of games to having  at least some compatibility with most of the GBA connectivity library. This was accomplished through a clever system that kept emulators communicating with minimal syncing. The key component to this was that the GBA emulator was to remain paused while waiting for packets from Dolphin. Dolphin would in turn send packets to the GBA emulator while they were connected, telling the GBA where it was in emulation and when the next reply was expected. The GBA emulator would then reply immediately before emulating  uncapped to the reported guest time in the packet. If by that point it hadn&#39;t received another command, the GBA emulator would pause and wait for the next packet. The solution was rather crude and the framepacing wasn&#39;t fantastic, but it  worked. This core idea would become the basis for GBA connectivity in Dolphin for years to come, and even now some of the code from this implementation is still used!\n  It was at this point then the scales tipped and GBA &lt;-&gt; GCN connectivity became more than an experimental curiosity. By using Dolphin and VBA-M, you could access GBA connectivity features in popular games like  Wind Waker and multiplayer in  The Legend of Zelda: Four Swords Adventures. Tons of other games worked too, and even  Final Fantasy Crystal Chronicles could connect... at least to some degree. Most other games with smaller features worked, with a few exceptions here and there.\n  Things were finally coming together, but the feature wasn&#39;t living up to its full potential. The first thing that has to be clarified is that while TCP is a  network communication protocol, TCP GBAs do not work very well over the network. In fact, something as simple as using  WiFi was enough to push the latency too high to maintain connectivity. Wired LAN  could work in some games, but even then it was cutting it  extremely close. The feature only really worked on LAN in one game,  The Legend of Zelda: Four Swords Adventures, and added tons of performance implications.\n Speaking of performance, the CPU requirements of using TCP GBAs were a huge deal breaker for a lot of users. At the very base, all of the pausing and waiting meant that you needed a much stronger computer just to keep things running full speed compared to running just the base game. And remember, back in 2015 you&#39;d most likely be using LLE (Recompiler) audio to connect your GBAs as the numerous problems with HLE audio limited compatibility. Only the most powerful computers could maintain full speed in games like  The Legend of Zelda: Four Swords Adventures with multiple VBA-M instances connected at once.  Final Fantasy Crystal Chronicles was slow with dropped inputs no matter what you tried to do.\n But those games at least connected and worked most of the time. One of the biggest problems with the 2015 implementation was that some rather big titles  struggled to connect. We&#39;re talking about  Pokemon Colosseum and  XD and their bonus discs. For many users, this was the biggest disappointment of GBA connectivity. Over the years, clever users have figured out tricks to make it connect  sometimes. Battling was more consistent because it had a retry connection option but trading was near impossible.\n What was causing all of these problems, especially considering how simple the protocol actually was? The key was in how the TCP GBAs remained in contact with Dolphin. These games in particular loved to spam tons of commands, sometimes sending over  200 commands a frame. This exposed a rather serious flaw in the TCP GBA protocol. Namely, they could get tripped up if they received a command while they were still emulating forward to catch up to the point from the previous command.\n  This could happen on repeat until the GBA falls so far behind that the GameCube gets responses that don&#39;t make sense. At this point, the game would cease talking to the GBA and a communication error of some kind would occur. Worse yet, one or both of the emulators could outright freeze if the communication error wasn&#39;t handled cleanly, as each emulator would be stuck in limbo waiting for a response from the other. Timeout features  usually prevented full on crashes, but there were definitely times where everything would go catastrophically wrong. While it would be easy to just blame bad emulation, the games didn&#39;t exactly make things easy. Many of the games relied on race conditions or had timing issues even   on console!\n  In the years following the 2015 TCP GBA implementation, improvements were not nearly as dramatic but kept making the situation a little bit better. Most of the improvements came outside of the actual protocol. Most notably were things like  fixes to HLE audio that allowed for the connection of multiple TCP GBAs, giving a sizeable performance increase in those situations. Additions to  reverse engineered DSP-LLE allowed connectivity in picky games  without needing to specifically dump DSP files from a GameCube or Wii.\n While things weren&#39;t changing on the GameCube side of things, the GBA landscape was seeing a paradigm shift. VBA-M was now a legendary emulator that had firmly cemented itself into the annals of emulation history, but a new generation of emulators had emerged. Rapidly,  mGBA was improving and becoming a robust, accurate alternative with a plethora of advanced features. As users saw more hardware peripherals supported, many wondered if Joybus support and connectivity with Dolphin would eventually come. It turns out that users weren&#39;t the only one interested;   endrift also wanted to implement Joybus support and even submitted fixes to Dolphin in preparation for support. Unfortunately, other features and work on mGBA caused things to get delayed again and again. Finally, in 2021,  support for Dolphin connectivity was added in mGBA 0.9!\n mGBA&#39;s more accurate emulation immediately made an impact in compatibility. Audio issues that plagued VBA-M in GBA connectivity titles like  The Legend of Zelda: Four Swords+ did not happen in mGBA. Additional fixes to Dolphin from   endrift also fixed connectivity with games like  Sonic Adventure 2: Battle and  Final Fantasy Crystal Chronicles. On top of playing audio correctly, fixes by both   endrift and   bonta fixed a critical hang between rounds in  The Legend of Zelda: Four Swords+.\n More impressively, all of these changes were made within the confines of the 2015 protocol! Backward compatibility wasn&#39;t affected and there weren&#39;t any changes needed from VBA-M. However, during all of the preparation and development another project was unveiled, one that wouldn&#39;t be limited by the TCP GBA protocol.\n  During discussions in the development channels,   bonta noticed that several developers were talking with   endrift about potential improvements to the GBA &lt;-&gt; GCN protocol. Figuring that his personal project may be of interest, he decided to speak up and announced that he had been working to integrate mGBA directly into Dolphin. He even claimed that these internal GBAs were compatible with  netplay.\n Big promises are easy to ma\n......", "posttime": "2021-07-24 07:02:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u96c6\u6210,integration,gba", "title": "MGBA \u96c6\u6210\uff1a\u4ecb\u7ecd\u96c6\u6210\u7684 GBA", "title_en": "MGBA Integration: Introducing the Integrated GBA", "transed": 1, "url": "https://dolphin-emu.org/blog/2021/07/21/integrated-gba/", "via": "", "real_tags": ["\u96c6\u6210", "gba"]}, {"category": "", "categoryclass": "", "imagename": "5338670d178b7cecf3f940522aa34190.jpeg", "infoid": 1069291, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u6ca1\u6709\u79d1\u5b66\u4eea\u5668\u6216\u77e5\u8bc6\u6765\u544a\u8bc9\u4ed6\u4eec\uff0c\u4f60\u53ef\u4ee5\u539f\u8c05\u53e4\u4ee3\u4eba\u7c7b\u6700\u521d\u76f8\u4fe1\u5730\u7403\u662f\u5e73\u7684\u3002\u6bd5\u7adf\uff0c\u4ece\u4eba\u7c7b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4e16\u754c\u786e\u5b9e\u5728\u6211\u4eec\u9762\u524d\u4f38\u5c55\u5f00\u6765\uff0c\u800c\u6ca1\u6709\u50cf\u534a\u7ba1\u4e00\u6837\u7a81\u7136\u5411\u4e0b\u503e\u659c\u3002\u4f46\u662f\uff0c\u867d\u7136\u8fd9\u4e2a\u6982\u5ff5\u5df2\u7ecf\u88ab\u5f7b\u5e95\u5426\u5b9a\u4e86\u51e0\u4e2a\u4e16\u7eaa\uff0c\u4f46\u6700\u8fd1\u51fa\u73b0\u4e86\u4e00\u79cd\u65b0\u7684\u6241\u5e73\u4e0e\u5f2f\u66f2\u7684\u8fa9\u8bba\uff0c\u5f15\u8d77\u4e86\u5b66\u672f\u754c\u7684\u60f3\u8c61\u3002\u8fd9\u4e00\u6b21\uff0c\u79d1\u5b66\u5bb6\u4eec\u6b63\u5728\u8fa9\u8bba\u5b87\u5b99\u672c\u8eab\u7684\u5f62\u72b6\u3002\u5728 arXiv \u9884\u5370\u672c\u670d\u52a1\u5668\u4e0a\u6700\u8fd1\u53d1\u8868\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\uff0c\u6765\u81ea\u4e4c\u5c14\u59c6\u5927\u5b66\u548c\u91cc\u6602\u5927\u5b66\u7684\u4e00\u7ec4\u5929\u4f53\u7269\u7406\u5b66\u5bb6\u548c\u5b87\u5b99\u5b66\u5bb6\u7814\u7a76\u4e86\u5927\u7206\u70b8\u7684\u5269\u4f59\u5149\u2014\u2014\u88ab\u79f0\u4e3a\u5b87\u5b99\u5fae\u6ce2\u80cc\u666f\uff0c\u6216 CMB\u2014\u2014\u5e76\u786e\u5b9a\u5b87\u5b99\u53ef\u80fd\u4e0d\u662f\u5e73\u9762\uff0c\u6b63\u5982\u8bb8\u591a\u79d1\u5b66\u5bb6\u76ee\u524d\u8ba4\u4e3a\u7684\u90a3\u6837\u3002 \u201c\u6211\u4eec\u8bba\u6587\u4e2d\u7684\u4f8b\u5b50\u662f\u2026\u2026\u4e00\u4e2a\u751c\u751c\u5708\u5f62\u72b6\u7684\u5b87\u5b99\u6a21\u578b\uff0c\u201d\u91cc\u6602\u5927\u5b66\u5b87\u5b99\u5b66\u6559\u6388\u3001\u65b0\u8bba\u6587\u7684\u5408\u8457\u8005 Thomas Buchert \u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u89e3\u91ca\u9053\u3002 Buchert \u5199\u9053\uff0c\u8fd9\u79cd\u5f62\u72b6\u4e5f\u79f0\u4e3a\u4e09\u73af\u9762\uff0c\u4e5f\u5c31\u662f\u4e09\u7ef4\u751c\u751c\u5708\u3002\u5b87\u5b99\u5177\u6709\u5706\u73af\u5f62\u72b6\u7684\u60f3\u6cd5\u662f\u4e00\u4e9b\u975e\u5e38\u9065\u8fdc\u7684\u4e1c\u897f\u7684\u4e2d\u5fc3\uff0c\u4f8b\u5982\u4e2d\u592e\u60c5\u62a5\u5c40 1980 \u5e74\u4ee3\u5173\u4e8e\u901a\u7075\u73b0\u8c61\u7684\u7f51\u5173\u62a5\u544a\u3002\u8fd9\u7bc7\u8bba\u6587\u5c1a\u672a\u7ecf\u8fc7\u540c\u884c\u8bc4\u5ba1\uff0c\u4f46 Buchert \u8868\u793a\u5df2\u63d0\u4ea4\u7ed9\u671f\u520a\u8fdb\u884c\u5ba1\u8bae\u3002 Buchert \u548c\u4ed6\u7684\u540c\u4e8b\u5e76\u4e0d\u662f\u7b2c\u4e00\u4e2a\u63d0\u51fa\u5f62\u72b6\u5947\u7279\u7684\u5b87\u5b99\u7684\u4eba\u3002\u73af\u9762\u5f62\u72b6\u7684\u60f3\u6cd5\u8d77\u6e90\u4e8e 1980 \u5e74\u4ee3\uff0c\u65b0\u6570\u636e\u5728 2003 \u5e74\u91cd\u65b0\u6fc0\u53d1\u4e86\u7814\u7a76\u4eba\u5458\u4e4b\u95f4\u7684\u8ba8\u8bba\u3002\u4f46\u5728\u8fc7\u53bb\u7684 18 \u5e74\u4e2d\uff0c\u79d1\u5b66\u5bb6\u4eec\u5bf9\u5b87\u5b99\u7684\u5f62\u72b6\u666e\u904d\u5f97\u51fa\u4e86\u4e0d\u540c\u7684\u7ed3\u8bba\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u5b83\u5728\u51e0\u4f55\u4e0a\u662f\u5e73\u5766\u7684\u2014\u2014\u610f\u5473\u7740\u65f6\u7a7a\u7ed3\u6784\u4e2d\u7684\u5e73\u884c\u7ebf\u4fdd\u6301\u5e73\u884c\u2014\u2014\u5e76\u4e14\u65e0\u9650\u6269\u5c55\u3002\u89c2\u5bdf\u5230\u7684\u7ea2\u79fb\u8bc1\u660e\u4e86\u6700\u540e\u4e00\u6761\u539f\u5219\uff0c\u8fd9\u662f\u4e00\u79cd\u6765\u81ea\u5b87\u5b99\u8fb9\u7f18\u7684\u5149\u4fe1\u53f7\uff0c\u8868\u660e\u5b83\u6b63\u5728\u540e\u9000\u3002\u5b87\u5b99\u7684\u5f62\u72b6\u672c\u8d28\u4e0a\u662f\u4e00\u5f20\u65e0\u9650\u5927\u7684\u5e73\u9762\u7eb8\u7684\u60f3\u6cd5\u4f3c\u4e4e\u662f\u6545\u4e8b\u7684\u7ed3\u5c3e\uff0c\u4f46\u5e03\u8d6b\u7279\u548c\u540c\u4e8b\u5728\u4ed6\u4eec\u7684\u8bba\u6587\u4e2d\u5199\u9053\uff0cCMB \u4e2d\u5b58\u5728\u4e00\u4e9b\u4e0d\u592a\u4e00\u81f4\u7684\u4e1c\u897f\u3002 \u201c[CMB] \u9891\u8c31\u4e0d\u4ec5\u662f\u79bb\u6563\u7684\uff0c\u800c\u4e14\u8fd8\u6709\u5f88\u5927\u7684\u5dee\u8ddd\uff0c\u201d\u4ed6\u4eec\u5199\u9053\u3002\u8fd9\u9020\u6210\u4e86\u201c[\u6807\u51c6\u6a21\u578b] \u7684\u9884\u6d4b\u548c CMB \u89c2\u5bdf\u7ed3\u679c\u4e4b\u95f4\u7684\u6709\u8da3\u5dee\u5f02\u3002\u201d\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u5b87\u5b99\u771f\u7684\u50cf\u6807\u51c6\u6a21\u578b\u6240\u63d0\u51fa\u7684\u90a3\u6837\u662f\u65e0\u9650\u7684\uff0c\u90a3\u4e48 CMB \u4f3c\u4e4e\u4f1a\u4e22\u5931\u4e00\u4e9b\u4fe1\u53f7\u3002\u5bf9\u6b64\u7684\u4e00\u79cd\u89e3\u91ca\u662f\uff0c\u5728\u8fd9\u4e9b\u7f3a\u5931\u7684\u70b9\u4e0a\uff0c\u5b87\u5b99\u5b9e\u9645\u4e0a\u662f\u201c\u591a\u91cd\u8fde\u63a5\u201d\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u7684\u62d3\u6251\u7ed3\u6784\u662f\u5f2f\u66f2\u7684\uff0c\u4ee5\u81f3\u4e8e\u5b83\u50cf\u751c\u751c\u5708\u4e00\u6837\u91cd\u65b0\u8fde\u63a5\u5230\u81ea\u8eab\u4e0a\u3002\u5c31\u50cf\u4f60\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u5e73\u884c\u5c5e\u6027\u7684\u60c5\u51b5\u4e0b\u5c06\u4e00\u5f20\u6241\u5e73\u7684\u7eb8\u6298\u53e0\u6210\u5f2f\u66f2\u7684\u5f62\u72b6\u4e00\u6837\uff0c\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u610f\u5473\u7740\u5b87\u5b99\u65e2\u53ef\u4ee5\u662f\u5e73\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u751c\u751c\u5708\u7684\u3002\u901a\u8fc7\u5bf9 CMB \u7684\u6a21\u62df\uff0c\u8fd9\u6b63\u662f\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u7684\u3002\u7136\u800c\uff0c\u5982\u679c\u88ab\u8bc1\u660e\u662f\u6b63\u786e\u7684\uff0c\u8fd9\u5c06\u610f\u5473\u7740\u5b87\u5b99\u4e0d\u518d\u662f\u65e0\u9650\u7684\uff0cBuchert \u8bf4\uff0c\u8fd9\u5728\u54f2\u5b66\u4e0a\u53ef\u80fd\u5bf9\u67d0\u4e9b\u4eba\u6765\u8bf4\u662f\u523a\u8033\u7684\u3002 \u201c\u6709\u9650\u5b87\u5b99\u6a21\u578b\u5bf9\u67d0\u4e9b\u4eba\u6765\u8bf4\u53ef\u80fd\u5f88\u53ef\u6015\uff0c\u4f46\u4f60\u4e0d\u4f1a\u4f53\u9a8c\u5230\u8fb9\u754c\uff0c\u201d\u5e03\u8d6b\u7279\u8bf4\u3002 \u201c\u6240\u4ee5\u4f60\u751f\u6d3b\u5728\u4e00\u4e2a\u65e0\u9650\u7684\u5b87\u5b99\u4e2d\uff0c\u5c3d\u7ba1\u5b83\u7684\u4f53\u79ef\u662f\u6709\u9650\u7684\u3002\u201d\u4f46\u662f\uff0c\u5373\u4f7f\u4f60\u4e0d\u4e00\u5b9a\u4f1a\u649e\u5230\u8fd9\u4e2a\u6709\u9650\u5b87\u5b99\u7684\u8fb9\u7f18\uff0c\u4f60\u80fd\u7ed5\u7740\u5b83\u822a\u884c\u5e76\u6700\u7ec8\u56de\u5230\u4f60\u5f00\u59cb\u7684\u5730\u65b9\u5417\uff1f\u7406\u8bba\u4e0a\uff0c\u662f\u7684\u3002 \u201c\u5149\u53ef\u4ee5\u5728\u6574\u4e2a\u6709\u9650\u7684\u5b87\u5b99\u4e2d\u4f20\u64ad\uff0c\u4f46\u5bf9\u4e8e\u592a\u7a7a\u65c5\u884c\u8005\u6765\u8bf4\uff0c\u8fd9\u5c06\u662f\u56f0\u96be\u7684\uff0c\u201d\u5e03\u8d6b\u7279\u8bf4\u3002 \u201c\u5f53\u7136\uff0c\u5982\u679c\u672a\u6765\u7684\u6280\u672f\u5141\u8bb8\u5728\u65f6\u7a7a\u4e2d\u521b\u9020\u866b\u6d1e\uff0c\u6216\u8005\u5982\u679c\u6211\u4eec\u80fd\u591f\u5b9e\u73b0\u4e0d\u53d7\u5149\u901f\u9650\u5236\u7684[\u66f2\u901f\u9a71\u52a8\u5668]\uff0c\u90a3\u4e48\u539f\u5219\u4e0a\u53ef\u4ee5\u56db\u5904\u65c5\u884c\u3002\u201d\u4f46\u5373\u4f7f\u4f60\u53ef\u4ee5\u8df3\u4e0a\u66f2\u901f\u822a\u5929\u5668\uff0c\u5b83\u4e5f\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e9b\u610f\u60f3\u4e0d\u5230\u7684\u540e\u679c\uff0c\u5e03\u8d6b\u7279\u8b66\u544a\u8bf4\u3002 \u201c\u9884\u8ba1\u4f60\u5728\u66f2\u901f\u6c14\u6ce1\u4e2d\u7684\u9002\u5f53\u65f6\u95f4\u6bd4\u4f60\u5728\u5730\u7403\u4e0a\u5f00\u59cb\u7684\u65f6\u95f4\u8981\u77ed\u5f97\u591a\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u5982\u679c\u4f60\u5b8c\u6210\u5faa\u73af\u5e76\u56de\u6765\uff0c\u5730\u7403\u53ef\u80fd\u4e0d\u518d\u5b58\u5728\u3002\u201d\n\u5728\u7b49\u5f85\u65b0\u7684\u7ecf\u7ebf\u5de5\u827a\u5f00\u53d1\u51fa\u6765\u7684\u540c\u65f6\uff0cBuchert \u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u5c06\u7ee7\u7eed\u4ee5\u65e7\u65f6\u5c1a\u7684\u65b9\u5f0f\u63a2\u7d22\u8fd9\u4e2a\u8c1c\u56e2\uff1a\u5206\u6790\u6765\u81ea\u666e\u6717\u514b\u3001WMAP \u548c COBE \u7b49\u63a2\u6d4b\u5668\u7684\u6570\u636e\uff0c\u4ee5\u53d1\u73b0\u5b87\u5b99\u8bde\u751f\u65f6\u9690\u85cf\u7684\u7ebf\u7d22\u3002", "note_en": "Without scientific instruments or knowledge to tell them otherwise, you can forgive ancient humans for initially believing the Earth was flat. After all, from a human perspective, the world does appear to stretch out before us without suddenly sloping down like a half-pipe. But while this notion has been thoroughly disproven for centuries, a new kind of flat-versus-curved debate has recently captured academic imagination. And this time, scientists are debating the very shape of the universe itself.\n    In a   paper recently published on the arXiv preprint server, a team of astrophysicists and cosmologists from Ulm University and the University of Lyon have studied the leftover light from the Big Bang\u2014known as the Cosmic Microwave Background, or CMB\u2014and determined that the universe may not be a flat plane, as many scientists currently believe.\n  \u201cThe example in our paper is\u2026 a donut shaped universe model,\u201d explained\u00a0   Thomas Buchert, a professor of cosmology at the University of Lyon and coauthor on the new paper, in an email. This shape is also known as a   three-torus, Buchert wrote, AKA a three-dimensional donut. The idea that the universe has a torus shape is at the center of some pretty far-out stuff, such as   the CIA\u2019s 1980s Gateway report on psychic phenomena.\n  This paper has not yet been peer-reviewed, but Buchert said it has been submitted to journals for consideration.\n  Buchert and colleagues are not the first to propose an oddly shaped universe. The idea of a torus shape originated in the 1980s, and new data   reinvigorated discussions among researchers in 2003. But in the last 18 years scientists have broadly come to a different conclusion about the universe\u2019s shape. Namely, they believe it to be geometrically flat\u2014meaning parallel lines in the fabric of spacetime remain parallel\u2014and infinitely expanding. This last tenet is evidenced by observed redshifts, a signal from light that it\u2019s retreating, at the edge of the universe.\n    This idea that the universe\u2019s shape is essentially an infinite sheet of flat paper would seem like the end of the story, but Buchert and colleagues write in their paper that there was something in the CMB that didn\u2019t quite line up.\n  \u201cThe [CMB] spectrum is not only discrete but has in addition large gaps,\u201d they write. Which creates \u201cintriguing discrepancies between predictions of the [standard model] and CMB observations.\u201d\n  In other words, there appear to be signals missing from the CMB that would be present if the universe were truly infinite as the standard model proposes. One explanation for this would be that the universe is actually \u201cmultiply connected,\u201d at these missing points, meaning that its topology is curved in such a way that it connects back\u00a0 onto itself like a donut.\n  The same way you can fold a flat piece of paper into a curved shape without changing its parallel properties, this solution would mean the universe could be both flat  and donut shaped. Through simulations of the CMB, this is exactly what the researchers found. However, if proven to be true, this would mean that the universe was no longer infinite, said Buchert, which may be philosophically jarring to some.\n  \u201cFinite universe models might be scary to some people, but you do not experience a boundary,\u201d said Buchert. \u201cSo you live in an unbounded Universe although it has finite volume.\u201d\n    But even if you won\u2019t necessarily bonk into the edge of this finite universe, can you sail around it and end up back where you started? Theoretically, yes.\n  \u201cLight can travel around the whole finite Universe, but for a space-traveler it&#39;ll be difficult,\u201d said Buchert. \u201cCertainly, if future technologies would allow to create wormholes in spacetime, or if we would realize [warp drives that are] not limited by the speed of light, then it is in principle possible to travel around.\u201d\n  But even if you could hop onboard a warp-speed spacecraft, it might have some unintended consequences, warns Buchert.\n  \u201cIt is expected that your proper time   within the warp bubble is considerably shorter than the time elapsed at Earth where you started from,\u201d he said. \u201cIf you would complete the loop and come back, Earth might no longer exist.\u201d\n  While they wait for new warp craft to be developed, Buchert and colleagues will instead continue probing this mystery the old fashion way: analyzing data from probes like Planck, WMAP and COBE to uncover hidden clues at the birth of the universe.", "posttime": "2021-07-24 07:01:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b87\u5b99,giant", "title": "\u5b87\u5b99\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u751c\u751c\u5708\uff0c\u6211\u4eec\u4f4f\u5728\u91cc\u9762", "title_en": "The universe is a giant donut that we live inside", "transed": 1, "url": "https://www.vice.com/en/article/3aqjkn/the-universe-is-a-giant-donut-that-we-live-inside-new-research-suggests", "via": "", "real_tags": ["\u5b87\u5b99", "giant"]}, {"category": "", "categoryclass": "", "imagename": "db0d48a05e8b5977c4385610642193d2.jpg", "infoid": 1069289, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u6211\u7ffb\u8bd1\u7406\u8bba\u4e0e\u5b9e\u8df5\u7855\u58eb\u671f\u95f4\u6700\u559c\u6b22\u7684\u6587\u7ae0\u4e4b\u4e00\u3002 MA\u5f53\u7136\u66f4\u4fa7\u91cd\u4e8e\u7ffb\u8bd1\u7684\u7406\u8bba\u65b9\u9762\uff0c\u8fd9\u4ece\u672c\u6587\u4e2d\u53ef\u4ee5\u660e\u663e\u770b\u51fa\u3002\u8fd9\u7bc7\u6587\u7ae0\u7684\u91cd\u70b9\u662f\u6bd4\u8f83\u4e00\u4e2a\u6587\u672c\u7684\u4e24\u4e2a\u7ffb\u8bd1\uff0c\u5e76\u5728\u5404\u4e2a\u5c42\u9762\u8ba8\u8bba\u5b83\u4eec\u7684\u201c\u7b49\u6548\u6027\u201d\u3002\u6211\u9009\u62e9\u4e86 Jabberwocky\uff0c\u56e0\u4e3a\u5b83\u662f\u6211\u957f\u5927\u7684\u4e00\u9996\u8bd7\u3002\u6211\u5927\u7ea6 7 \u5c81\u7684\u65f6\u5019\u5c31\u5b66\u4f1a\u4e86\u6b4c\u8bcd\uff0c\u4eca\u5929\u4ecd\u7136\u53ef\u4ee5\u5b8c\u6574\u5730\u80cc\u8bf5\u5b83\u4eec\u3002\u6240\u4ee5\u63a2\u7d22\u4e24\u4e2a\u65e5\u8bed\u7ffb\u8bd1\u5bf9\u6211\u6765\u8bf4\u975e\u5e38\u4ee4\u4eba\u5174\u594b\u3002\u5728\u5c06\u6e90\u6587\u672c (ST) \u7ffb\u8bd1\u6210\u53e6\u4e00\u79cd\u8bed\u8a00\u7684\u76ee\u6807\u6587\u672c (TT) \u65f6\u5b9e\u73b0\u7b49\u6548\u662f\u7ffb\u8bd1\u4eba\u5458\u7684\u4e3b\u8981\u76ee\u6807\u3002\u7136\u800c\uff0c\u8bb8\u591a\u7406\u8bba\u5bb6\u5728\u53e5\u6cd5\u5c42\u9762\uff08Nida 1964\uff1bNida 2000\uff1bBaker 1992\uff09\u3001\u8bed\u4e49\u5c42\u9762\uff08Nida and Taber 1982\uff1b Newmark 1981)\uff0c\u6587\u4f53\u7684\u6216\u6563\u6f2b\u7684\u3002\u6b64\u5916\uff0c\u7ffb\u8bd1\u5c06\u4f7f\u7528\u54ea\u79cd\u5bf9\u7b49\u53d6\u51b3\u4e8e\u8bb8\u591a\u56e0\u7d20\uff0c\u5305\u62ec\u6587\u672c\u7c7b\u578b\u3001\u5176\u4fe1\u606f\u3001\u4f5c\u8005\u7684\u76ee\u7684\u3001\u8bd1\u8005\u7684\u610f\u56fe\uff08\u504f\u5411 ST \u6216 TT\uff09\u4ee5\u53ca\u8bfb\u8005\uff08Newmark 1981\uff1a20 -21, 39\uff1b\u5948\u8fbe\u548c\u6cf0\u4f2f 1982\uff1a31\uff1b\u5948\u8fbe 2000\uff1a127\uff09\u3002\u8ba8\u8bba\u5404\u79cd\u6587\u672c\u7c7b\u578b\u3001\u53d7\u4f17\u548c\u76ee\u6807\u5bf9\u4e8e\u672c\u6587\u7684\u8303\u56f4\u6765\u8bf4\u592a\u8fc7\u5206\u4e86\uff0c\u6240\u4ee5\u6211\u60f3\u7279\u522b\u5173\u6ce8\u4e00\u4e2a\u6587\u672c\uff1b\u5218\u6613\u65af\u5361\u7f57\u5c14\u7684\u201cJabberwocky\u201d\u7684\u8bd7\u4f5c\u3002\u8bd7\u6b4c\u5728\u5bf9\u7b49\u6027\u65b9\u9762\u7684\u5206\u6790\u7279\u522b\u6709\u8da3\uff0c\u56e0\u4e3a\u5b83\u5728\u6e90\u8bed\u8a00\u7684\u6587\u5316\u3001\u8bd7\u6b4c\u98ce\u683c\u548c\u62bd\u8c61\u542b\u4e49\u65b9\u9762\u5177\u6709\u5f3a\u5927\u7684\u57fa\u7840\u3002\u8bd7\u6b4c\u7ffb\u8bd1\u8005\u5fc5\u987b\u5904\u7406\u7ffb\u8bd1\u610f\u4e49\u4e0e\u8bdd\u8bed\u7684\u8fd9\u4e9b\u95ee\u9898\uff0c\u4ee5\u4f7f\u5176\u5fe0\u5b9e\u4e8e ST\uff0c\u540c\u65f6\u4f7f\u5176\u5728 TT \u4e2d\u6613\u4e8e\u7406\u89e3\u548c\u6709\u610f\u4e49\uff08\u53c2\u89c1 Nida 2000\uff1a131\uff09\u3002\n\u672c\u6587\u5c06\u7740\u773c\u4e8e\u5728 Yanagawa (Carroll 1994) \u548c Sawasaki (2008) \u7684\u201cJabberwocky\u201d\u7684\u4e24\u4e2a\u65e5\u6587\u7ffb\u8bd1\u4e2d\u5b9e\u73b0\u5bf9\u7b49\u65f6\u7684\u8fd9\u4e9b\u95ee\u9898\uff0c\u91cd\u70b9\u5173\u6ce8\u8bd7\u6b4c\u7684\u8bcd\u6c47\u65b9\u9762\u5e76\u501f\u9274\u4ee5\u524d\u7684\u5bf9\u7b49\u7406\u8bba\uff0c\u8d1d\u514b\u5c24\u5176\u5982\u6b64\u3002\u7ffb\u8bd1\u5b9e\u73b0\u5bf9\u7b49\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u5728\u8bcd\u6c47\u5c42\u9762\uff0c\u6216\u8005\u5982 Baker (1992) \u6240\u8bf4\uff0c\u5728\u8bcd\u5c42\u9762\u3002 \u201cJabberwocky\u201d\u662f 1871 \u5e74\u4e3a\u300a\u955c\u82b1\u6c34\u6708\u300b\u4e00\u4e66\u5199\u7684\u4e00\u7bc7\u6587\u7ae0\u3002\u5728\u67d0\u4e9b\u4eba\u770b\u6765\uff0c\u5b83\u88ab\u5199\u6210\u4e00\u9996\u201c\u80e1\u8bf4\u516b\u9053\u7684\u8bd7\u201d\uff08Klug 2000\uff1a4\uff09\uff0c\u8fd9\u662f\u7531\u4e8e\u5361\u7f57\u5c14\u634f\u9020\u4e86\u5927\u91cf\u6587\u5b57\u3002\u4f46\u662f\uff0c\u5f53\u60a8\u5206\u89e3\u6240\u8c13\u7684\u201c\u634f\u9020\u201d\u8bdd\u8bed\u65f6\uff0c\u60a8\u4f1a\u53d1\u73b0\u5b83\u4eec\u5728\u82f1\u8bed\u4e2d\u5177\u6709\u67d0\u79cd\u610f\u4e49\uff0c\u800c\u65e5\u8bed\u7ffb\u8bd1\u4e2d\u4e5f\u501f\u9274\u4e86\u8fd9\u4e9b\u8bdd\u8bed\u3002\u4ee5\u201cfrumious\u201d\u8fd9\u4e2a\u8bcd\uff08\u5b83\u63cf\u8ff0\u4e86 Bandersnatch\uff0c\u4e00\u4e2a\u865a\u6784\u7684\u602a\u7269\uff09\u4e3a\u4f8b\u3002\u5728\u82f1\u8bed\u4e2d\uff0c\u8fd9\u4e2a\u8bcd\u501f\u9274\u4e86\u201cfurious\u201d\u548c\u201cfuming\u201d\u8fd9\u4e24\u4e2a\u8bcd\uff0c\u8fd9\u4e24\u4e2a\u8bcd\u90fd\u610f\u5473\u7740\u201c\u6124\u6012\u201d\uff0c\u4f46\u201cfuming\u201d\u4e5f\u5e26\u6709\u201c\u5438\u70df\u201d\u7684\u610f\u601d\u3002 Yagawa \u5c06\u5176\u7ffb\u8bd1\u4e3atakeburu\uff0c\u5b83\u501f\u9274\u4e86takeru\uff08\u610f\u601d\u662f\u201c\u51f6\u731b\u201d\uff09\u548ckeburu\uff08\u610f\u601d\u662f\u201c\u5438\u70df\u201d\uff09\u8fd9\u4e24\u4e2a\u8bcd\u3002\u800c Sawasaki \u5c06\u8fd9\u4e2a\u8bcd\u7ffb\u8bd1\u6210 iburikurueru\uff0c\u4f7f\u7528 iburidau\uff0c\u201c\u628a\u52a8\u7269\u62bd\u51fa\u53bb\u201d\u548c kuruu\uff0c\u201c\u53d1\u75af\u201d\u3002\u4e24\u8005\u90fd\u4f7f\u7528\u63a5\u8fd1\u82f1\u8bed\u201cfrumious\u201d\u7684\u610f\u8c61\uff0c\u7528\u7c7b\u4f3c\u7684\u201csmoky\u201d\u8bcd\u6765\u8868\u793a\u201cfuming\u201d\uff0c\u5c3d\u7ba1\u4ed6\u4eec\u5bf9\u201cfurious\u201d\u3001\u201cfierce\u201d\u6216\u201cmad\u201d\u7684\u89e3\u91ca\u5404\u4e0d\u76f8\u540c\u3002 Baker \u7684\u8bcd\u7ea7\u5bf9\u7b49\u7406\u8bba\u4fa7\u91cd\u4e8e\u5982\u4f55\u5728\u6587\u672c\u4e4b\u95f4\u65e0\u6cd5\u5b9e\u73b0\u76f4\u63a5\u5bf9\u7b49\uff0c\u56e0\u6b64\u9700\u8981\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u8bcd\u7ea7\u7684\u5bf9\u7b49 (Baker 1992: 18-21)\u3002\u867d\u7136\u5979\u5173\u6ce8\u7684\u662f\u5e26\u8bcd\u7f00\u7684\u8bcd\u7684\u7ffb\u8bd1\u95ee\u9898\uff0c\u4f46\u8d1d\u514b\u7684\u4e0d\u540c\u5f62\u5f0f\u7684\u975e\u5bf9\u7b49\u6982\u5ff5\uff08\u540c\u4e0a\uff1a21\uff09\u6700\u9002\u5408\u6e90\u6587\u672c\u4e2d\u634f\u9020\u8bcd\u7684\u95ee\u9898\u3002\nYagawa \u548c Sawasaki \u90fd\u901a\u8fc7\u5728\u65e5\u8bed\u4e2d\u4f7f\u7528\u4ed6\u4eec\u81ea\u5df1\u634f\u9020\u7684\u8bcd\u6765\u89e3\u91ca\u201cfrumious\u201d\uff08\u540c\u4e0a\uff1a38\uff09\uff0c\u5b9e\u73b0\u4e86\u201cfrumious\u201d\u7684\u7b49\u4ef7\u6027\uff0c\u8fd9\u79cd\u7b56\u7565\u4e0e Carroll \u7c7b\u4f3c\uff0c\u4ed6\u5229\u7528\u81ea\u5df1\u7684\u6bcd\u8bed\u4e2d\u7684\u4e24\u4e2a\u8bcd\u521b\u9020\u4e86\u4e00\u4e2a\u65b0\u8bcd\u3002\u7136\u800c\uff0cYagawa \u548c Sawasaki \u5e76\u6ca1\u6709\u5bf9\u6587\u672c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u634f\u9020\u7684\u8bcd\u90fd\u4f7f\u7528\u8fd9\u79cd\u7b56\u7565\uff0c\u4f8b\u5982\u201cburble\u201d\u8fd9\u4e2a\u8bcd\uff08\u7528\u6765\u63cf\u8ff0 Jabberwocky \u63a5\u8fd1\u65f6\u7684\u566a\u97f3\uff09\uff0c\u5361\u7f57\u5c14\u672c\u4eba\u88ab\u5f15\u7528\u4e3a\u6e90\u81ea\u82f1\u8bed\u5355\u8bcd\u201cbleat\u201d &#39;\u3001&#39;\u6742\u97f3&#39;\u548c&#39;\u98a4\u97f3&#39;\uff08Carroll 2009\uff09\u3002\u7ffb\u8bd1\u4eba\u5458\u8bd5\u56fe\u4f7f\u7528 Baker \u6240\u8bf4\u7684\u201c\u4f7f\u7528\u65e0\u5173\u8bcd\u7684\u91ca\u4e49\u7ffb\u8bd1\u201d\uff08Baker 1992\uff1a38\uff09\u6765\u5b9e\u73b0\u5bf9\u7b49\uff0c\u8fd9\u79cd\u7b56\u7565\u4e0e\u524d\u4e00\u79cd\u7b56\u7565\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u4e86\u4fee\u6539\u540e\u7684\u4ece\u53e5\u800c\u4e0d\u662f\u6539\u53d8\u8bed\u8a00\u7684\u5f62\u5f0f\u3002\u77e2\u5ddd\u4f7f\u7528\u4e86sawaga mashiku\uff0c\u610f\u601d\u662f\u201c\u5168\u901f\u55a7\u95f9\u201d\u3002 Sawasaki \u5c06\u5176\u7ffb\u8bd1\u4e3a domekizuri\uff0c\u5b83\u4f7f\u7528\u6c49\u5b57\u7684 onyomi\uff08\u57fa\u4e8e\u4e2d\u6587\u539f\u6587\u7684\u9605\u8bfb\uff09\uff0c\u610f\u601d\u662f\u201c\u6124\u6012\u201d\uff0cmekimeki\uff0c\u610f\u601d\u662f\u201c\u660e\u663e\u201d\uff0c\u800c zuriagaru \u610f\u601d\u662f\u201c\u722c\u8d77\u6765\u201d\u3002 Sawasaki \u4f7f\u7528\u4e86\u4e0e Carroll \u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u5c06\u4e09\u4e2a\u8bcd\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5728\u65e5\u8bed\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u865a\u6784\u7684\u8bcd\uff0c\u610f\u601d\u662f\u201c\u6124\u6012\u5730\u722c\u4e0a\u663e\u773c\u201d\u3002\u5c3d\u7ba1\u4ed6\u4f7f\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u4f46\u4ed6\u4e22\u5931\u4e86\u5f88\u591a\u539f\u59cb\u56fe\u50cf\u3002 Yagawa \u786e\u5b9e\u8bd5\u56fe\u4fdd\u6301 Jabberwocky \u53d1\u51fa\u7684\u58f0\u97f3\u7684\u610f\u8c61\uff0c\u4f46\u4ed6\u4eec\u90fd\u6ca1\u6709\u5229\u7528\u8fd9\u4e2a\u8bcd\u7684\u5b8c\u6574\u82f1\u8bed\u8d77\u6e90\uff0c\u800c\u662f\u901a\u8fc7\u5c06\u8fd9\u4e2a\u8bcd\u7ffb\u8bd1\u6210\u4ece\u53e5\u6765\u5173\u6ce8\u751f\u7269\u7684\u79fb\u52a8\u65b9\u5f0f\u3002 \u201cJabberwocky\u201d\u5e76\u975e\u5b8c\u5168\u7531\u634f\u9020\u7684\u5355\u8bcd\u7ec4\u6210\uff0c\u4e24\u4f4d\u7ffb\u8bd1\u4eba\u5458\u7ffb\u8bd1\u6807\u51c6\u82f1\u8bed\u8bdd\u8bed\u7684\u65b9\u5f0f\u5f88\u91cd\u8981\u3002\nST \u4e2d\u7684\u4e00\u4e2a\u8bcd\u4e0e TT \u4e2d\u7684\u4e00\u4e2a\u8bcd\u76f4\u63a5\u5bf9\u5e94\u7684\u73b0\u8c61\u5df2\u7ecf\u88ab\u4e00\u4e9b\u7406\u8bba\u5bb6\u7814\u7a76\u8fc7\uff0c\u5305\u62ec Catford (1965)\u3002\u4ed6\u63d0\u51fa\u4e86\u6587\u672c\u5bf9\u7b49\u7684\u6982\u5ff5\uff0c\u5373\u201c\u4efb\u4f55 T\u200b\u200bL \u5f62\u5f0f\uff08\u6587\u672c\u6216\u6587\u672c\u7684\u4e00\u90e8\u5206\uff09\u88ab\u89c2\u5bdf\u5230\u4e0e\u7ed9\u5b9a\u7684 SL \u5f62\u5f0f\uff08\u6587\u672c\u6216\u6587\u672c\u7684\u4e00\u90e8\u5206\uff09\u7b49\u6548\u201d\uff08Catford 1965\uff1b27\uff09\u3002\u4ed6\u4f7f\u7528\u4e86\u82f1\u8bed\u4e2d\u7684\u201cson\u201d\u4e0e\u6cd5\u8bed fil \u7684\u4f8b\u5b50\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u5728\u201cJabberwocky\u201d\u4e2d\u770b\u5230\uff0c\u4e24\u4f4d\u8bd1\u8005\u90fd\u5c06\u201cson\u201d\u7ffb\u8bd1\u6210\u65e5\u8bed\u4e2d\u7684 musuko\u3002\u53ef\u4ee5\u5728\u8bd7\u4e2d\u7684\u8bb8\u591a\u5730\u65b9\u770b\u5230\u6587\u672c\u5bf9\u7b49\uff0c\u5176\u4e2d\u4e24\u4f4d\u8bd1\u8005\u90fd\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u5bf9\u5e94\u8bdd\u8bed\uff0c\u4f8b\u5982 tsurugi \u610f\u601d\u662f\u201c\u5251\u201d\uff0c\u6216\u8005 mori\uff0c\u610f\u601d\u662f\u201c\u68ee\u6797\u201d\u3002\u4f46\u662f\uff0c\u5e76\u975e\u6240\u6709\u60a8\u53ef\u80fd\u5e0c\u671b\u5e94\u7528\u6587\u672c\u5bf9\u7b49\u7684\u8bdd\u8bed\u90fd\u5982\u6b64\uff0c\u4f8b\u5982 Yagawa \u7ffb\u8bd1\u4e3a tsume \u548c Sawasaki \u7ffb\u8bd1\u4e3a kagitsume \u7684\u201cclaws\u201d\u3002\u540e\u8005\u7684\u610f\u601d\u662f\u201c\u94a9\u722a\u201d\uff0c\u4e3a\u4e86\u8bd7\u610f\u7684\u6548\u679c\u548c\u610f\u8c61\uff0c\u4ece ST \u7684\u610f\u601d\u7565\u6709\u53d8\u5316\u3002\u8fd9\u4e0e Catford \u7684\u6587\u672c\u5bf9\u7b49\u7406\u8bba\u80cc\u9053\u800c\u9a70\uff0c\u5c3d\u7ba1\u4ed6\u786e\u5b9e\u8bf4\u5728\u76ee\u6807\u8bed\u8a00\u4e2d\u6ca1\u6709\u5bf9\u7b49\u7684\u6587\u672c\u5c06\u5728\u6587\u672c\u7684\u7ea7\u522b\u6216\u7c7b\u522b\u4e0a\u53d1\u751f\u53d8\u5316\uff08Catford 1965\uff1a73\uff09\u3002\u7136\u800c\uff0cSawasaki \u5e76\u6ca1\u6709\u6539\u53d8\u7ffb\u8bd1\u7684\u610f\u601d\uff0c\u56e0\u4e3a\u6ca1\u6709\u76f4\u63a5\u4ece ST \u7ffb\u8bd1\u3002\u4e0e\u6587\u672c\u5bf9\u7b49\u5e73\u884c\uff0c\u5361\u7279\u798f\u5fb7\u7406\u8bba\u5316\u4e86\u4ed6\u6240\u8c13\u7684\u6b63\u5f0f\u5bf9\u5e94\u3002\u8fd9\u662f\u201c\u4ec5\u8fd1\u4f3c\u201d\u7684\u7ffb\u8bd1\uff08idib\uff1a32\uff09\uff0c\u56e0\u4e3a\u5f53\u4e24\u79cd\u8bed\u8a00\u201c\u5c3d\u53ef\u80fd\u63a5\u8fd1\u5730\u5728 TL \u7684\u2018\u7ecf\u6d4e\u2019\u4e2d\u5360\u636e\u2018\u76f8\u540c\u2019\u7684\u4f4d\u7f6e\uff0c\u5c31\u50cf\u7ed9\u5b9a\u7684 SL \u7c7b\u522b\u5728SL\u201d\uff08\u540c\u4e0a\uff1a27\uff09\u3002\u8fd9\u610f\u5473\u7740 Sawasaki \u5c06\u201c\u722a\u201d\u7ffb\u8bd1\u6210\u201c\u94a9\u722a\u201d\u4ecd\u7136\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u5bf9\u7b49\u5f62\u5f0f\uff0c\u56e0\u4e3a\u5b83\u201c\u5360\u636e\u201d\u4e86\u4e0e\u539f\u6587\u7684\u201c\u8fd1\u4f3c\u201d\u3002\u4e0e Catford \u7c7b\u4f3c\uff0c\u5948\u8fbe\u5bf9\u5f62\u5f0f\u7b49\u4ef7\u8fdb\u884c\u4e86\u7406\u8bba\u5316\uff0c\u5176\u4e2d\u201c\u63a5\u53d7\u8bed\u8a00\u4e2d\u7684\u4fe1\u606f\u5e94\u5c3d\u53ef\u80fd\u5339\u914d\u6e90\u8bed\u8a00\u4e2d\u7684\u4e0d\u540c\u5143\u7d20\u3002\n\u8fd9\u610f\u5473\u7740\uff0c\u4f8b\u5982\uff0c\u63a5\u6536\u8005\u6587\u5316\u4e2d\u7684\u4fe1\u606f\u4e0d\u65ad\u4e0e\u6e90\u6587\u5316\u4e2d\u7684\u4fe1\u606f\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u786e\u5b9a\u51c6\u786e\u6027\u548c\u6b63\u786e\u6027\u7684\u6807\u51c6\u201d\uff08Venuti \u4e2d\u7684 Nida\uff1a127\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b9e\u73b0\u5f62\u5f0f\u4e0a\u7684\u5bf9\u7b49\u53d6\u51b3\u4e8e\u7ffb\u8bd1\u8005\u5c06 TT \u4e0e ST \u5339\u914d\u7684\u7a0b\u5ea6\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff0c\u56e0\u4e3a Catford \u548c Nida \u7684\u65b9\u6cd5\u663e\u793a\u51fa\u5bf9 ST \u7684\u504f\u89c1\uff0c\u6307\u51fa\u53ea\u6709\u5f53 TT \u88ab\u7ffb\u8bd1\u6210\u5c3d\u53ef\u80fd\u63a5\u8fd1\u539f\u59cb\u8bcd\u6c47\u3001\u53e5\u6cd5\u3001\u98ce\u683c\u7b49\u65f6\u624d\u80fd\u5b9e\u73b0\u7b49\u6548\u3002\u5982\u679c\u771f\u662f\u8fd9\u6837\uff0c\u672c\u6765\u5c31\u96be\u61c2\u7684\u300aJabberwocky\u300b\uff0c\u65e5\u672c\u89c2\u4f17\u5c31\u5b8c\u5168\u542c\u4e0d\u61c2\u4e86\u3002\u4f46\u662f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6709\u65f6\u8bd1\u8005\u4e0d\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u800c\u662f\u5b8c\u5168\u6539\u53d8\u539f\u6587\u7684\u8bcd\u6c47\u4ee5\u9002\u5e94\u76ee\u6807\u53d7\u4f17\u3002\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50\u662f\u201cHe go to galumphing back\u201d\uff08Carroll 2009\uff09\u8fd9\u53e5\u8bdd\uff0cSawasaki \u5c06\u5176\u7ffb\u8bd1\u4e3a kare wa ikitoutou taru gaisen no gyaroppu wo fumu\uff0c\u5176\u540e\u7ffb\u8bd1\u4e3a\u201c\u4ed6\u7684\u5fc3 [going] step-step he walks a chievant return gallop\u201d .\u867d\u7136\u5b83\u4ecd\u7136\u4f20\u8fbe\u4e86\u7537\u5b69\u5f52\u6765\u7684\u76f8\u540c\u5f62\u8c61\uff0c\u4f46\u6cfd\u5d0e\u5df2\u7ecf\u91cd\u65b0\u63aa\u8f9e\u4ee5\u9002\u5e94\u65e5\u672c\u89c2\u4f17\uff0c\u4f7f\u7528\u65e5\u8bed\u62df\u58f0\u8bcd\u5f62\u6210\u66f4\u5177\u63cf\u8ff0\u6027\u7684\u5f62\u8c61\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8bd1\u8005\u4f7f\u7528\u4e86\u5948\u8fbe\u6240\u8bf4\u7684\u52a8\u6001\u5bf9\u7b49\uff0c\u5728\u201c\u7ffb\u8bd1\u4e2d\uff0c\u4eba\u4eec\u5e76\u4e0d\u90a3\u4e48\u5173\u5fc3\u5c06\u63a5\u53d7\u8005\u8bed\u8a00\u4fe1\u606f\u4e0e\u6e90\u8bed\u8a00\u4fe1\u606f\u76f8\u5339\u914d\uff0c\u4f46\u662f\u2026\u2026\u63a5\u53d7\u8005\u548c\u4fe1\u606f\u4e4b\u95f4\u7684\u5173\u7cfb\u5e94\u8be5\u57fa\u672c\u4e0a\u662f\u4e0e\u539f\u59cb\u63a5\u6536\u5668\u548c\u4fe1\u606f\u4e4b\u95f4\u5b58\u5728\u7684\u76f8\u540c\u201d\uff08Nida 2000\uff1a129\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u201cJabberwocky\u201d\u7684\u90e8\u5206\uff0c\u8bd1\u8005\u6cfd\u5d0e\u548c\u77e2\u5ddd\u504f\u79bb\u4e86\u9010\u5b57\u7ffb\u8bd1\u8fd9\u9996\u8bd7\uff0c\u800c\u662f\u521b\u9020\u4e86\u4e00\u79cd\u52a8\u6001\u5bf9\u7b49\uff0c\u91cd\u65b0\u521b\u9020\u4e86\u5361\u7f57\u5c14\u82f1\u6587\u539f\u6587\u4e2d\u53ef\u80fd\u5524\u8d77\u7684\u4fe1\u606f\u548c\u611f\u53d7\u65e5\u672c\u89c2\u4f17\u3002\n\u6839\u636e Nida \u548c Taber (1982:22) \u7684\u8bf4\u6cd5\uff0c\u8fd9\u79cd\u52a8\u6001\u65b9\u6cd5\u5728\u5927\u591a\u6570\u7ffb\u8bd1\u4e2d\u6bd4\u5f62\u5f0f\u5bf9\u7b49\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u7ffb\u8bd1\u4eba\u5458\u5fc5\u987b\u8003\u8651\u53d7\u4f17\u7684\u9700\u6c42\u800c\u4e0d\u662f\u8bed\u8a00\u5f62\u5f0f\uff08\u540c\u4e0a\uff1a31\uff09\u3002\u5728\u8bd7\u6b4c\u7ffb\u8bd1\u4e2d\u5c24\u5176\u5982\u6b64\uff0c\u5728\u90a3\u91cc\u975e\u5e38\u9700\u8981\u5173\u6ce8\u201c\u518d\u73b0\u60c5\u611f\u5f3a\u5ea6\u548c\u98ce\u5473\u201d\uff08Nida 2000\uff1a127\uff09\u3002\u4eba\u4eec\u4e0d\u5e94\u8be5\u628a\u4e00\u9996\u8bd7\u5f53\u4f5c\u6563\u6587\u6765\u7ffb\u8bd1\uff0c\u800c\u5e94\u8be5\u7528\u76ee\u6807\u8bed\u8a00\u521b\u4f5c\u53e6\u4e00\u9996\u8bd7\uff0c\u8fd9\u9996\u8bd7\u5c06\u62e5\u6709\u4e0e\u6e90\u6587\u672c\u5206\u5f00\u7684\u751f\u547d\uff08Matthews 1959 in Nida 2000: 127\uff09\u3002\u8fd9\u5c06\u89e3\u91ca\u4e24\u4f4d\u8bd1\u8005\u5982\u4f55\u521b\u9020\u51fa\u65e5\u8bed\u7248\u672c\u7684\u539f\u6587\uff0c\u65e2\u4f20\u8fbe\u4e86\u539f\u59cb\u4fe1\u606f\uff0c\u53c8\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6587\u672c\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u5361\u7f57\u5c14\u7684\u6587\u672c\u201c\u4e00\uff0c\u4e8c\uff01\u4e00\u4e8c\uff01\u5e76\u4e14\u5f7b\u5934\u5f7b\u5c3e\u201d\uff0cYagawa \u5c06\u5176\u7ffb\u8bd1\u4e3a Ei\uff0c\u662f\u7684\uff01\u8bf6\uff0c\u8036\uff01 Koredemo kato bakari\uff0c\u610f\u601d\u662f&#39;Ei\uff0c\u4f60\uff01\u8bf6\uff0c\u8036\uff01\u5373\u4f7f\u8fd9\u6837[\u4ed6\u4e5f\u505a\u4e86]\u66f4\u591a\u7684&#39;\uff0c\u8fd9\u610f\u5473\u7740\u7537\u5b69\u5728\u6253\u67b6\u65f6\u5927\u558a\u5927\u53eb\u3002\u6cfd\u5d0e\u5c06\u5176\u7ffb\u8bd1\u4e3a\uff1aichi\uff0cni\uff01\u4e00\uff0c\u4f60\uff01 Tsuranukite nao mo tsuranuku \u8fd9\u662f\u66f4\u63a5\u8fd1\u539f\u6587\u7684\u7ffb\u8bd1\uff0c\u53cd\u8bd1\u4e3a\u201c\u4e00\uff0c\u4e8c\uff01\u4e00\u4e8c\uff01\u901a\u8fc7\u548c\u901a\u8fc7\u66f4\u591a&#39;\u3002\u6b63\u5982\u4f60\u5728\u8fd9\u91cc\u770b\u5230\u7684\uff0c\u4e24\u4f4d\u8bd1\u8005\u90fd\u8bd5\u56fe\u4fdd\u6301\u539f\u6587\u7684\u53e5\u6cd5\u7ed3\u6784\uff0c\u4f46\u540c\u65f6\u7528\u65e5\u8bed\u521b\u4f5c\u4e86\u81ea\u5df1\u72ec\u7279\u7684\u4f5c\u54c1\u3002\u5c3d\u7ba1 Yagawa \u6bd4 Sawasaki \u66f4\u8fdc\u79bb ST\uff0c\u4f46\u5979\u8bd5\u56fe\u5e73\u8861\u4fe1\u606f\u4e0e\u65e5\u8bed\u4e2d\u542c\u8d77\u6765\u81ea\u7136\u7684\u53f0\u8bcd\u3002\u5c31\u50cf\u77e2\u5ddd\u4e00\u6837\uff0c\u8bd1\u8005\u9762\u4e34\u7740\u6e90\u6587\u672c\u7684\u51c6\u786e\u6027\u548c\u76ee\u6807\u6587\u672c\u7684\u81ea\u7136\u6027\u7684\u95ee\u9898\uff0c\u5e76\u5728\u4e24\u8005\u4e4b\u95f4\u627e\u5230\u9002\u5f53\u7684\u5e73\u8861\u70b9\u3002\u8d1d\u514b\u4ece\u642d\u914d\u7684\u89d2\u5ea6\u8ba8\u8bba\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bd1\u8005\u9762\u4e34\u7740\u201c\u5728\u4ec0\u4e48\u662f\u5178\u578b\u7684\u548c\u4ec0\u4e48\u662f\u51c6\u786e\u7684\u4e4b\u95f4\u7684\u8270\u96be\u9009\u62e9\u201d\uff08\u8d1d\u514b 1992\uff1a60\uff09\u3002\u5c3d\u7ba1 TT \u4e2d\u7684\u53e5\u5b50\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u65e0\u610f\u4e2d\u7a0d\u5fae\u6539\u53d8\u76ee\u6807\u53d7\u4f17\u7684\u610f\u601d\u3002\u8fd9\u4e0d\u4e00\u5b9a\u662f\u4ef6\u574f\u4e8b\uff0c\u56e0\u4e3a\u67d0\u4e9b\u8bcd\u548c\u642d\u914d\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u57fa\u4e8e\u6587\u5316\u7406\u89e3\uff0c\u53ef\u80fd\u4e0d\u4f1a\u8f6c\u79fb\u5230\u53e6\u4e00\u79cd\u6587\u5316\uff0c\u7a0d\u5fae\u6539\u53d8\u542b\u4e49\u53ef\u80fd\u4f1a\u4f7f\u5176\u5728 TT \u4e2d\u66f4\u5bb9\u6613\u7406\u89e3\u3002\n\u8fd9\u4e9b\u7279\u5b9a\u6587\u5316\u7684\u642d\u914d\u5728\u201cJabberwocky\u201d\u4e2d\u5f88\u96be\u89c2\u5bdf\u5230\uff0c\u56e0\u4e3a\u5927\u91cf\u634f\u9020\u7684\u8bcd\u6c47\u9996\u5148\u5728\u82f1\u8bed\u4e2d\u9020\u6210\u4e86\u4e0d\u6807\u51c6\u7684\u642d\u914d\uff0c\u4f8b\u5982\u201cthe Jabberwock with eyes of fire\u201d\u662f\u4e00\u79cd\u660e\u663e\u7684\u642d\u914d\u201c\u773c\u775b\u201d\u548c\u201c\u706b\u7130\u201d\u3002\u8bf8\u5982\u6b64\u7c7b\u7684\u4e0d\u5bfb\u5e38\u642d\u914d\u5c31\u662f Baker (1992: 55) \u6240\u8bf4\u7684\u6807\u8bb0\u642d\u914d\uff0c\u662f\u6545\u610f\u9009\u62e9\u7684\u4e0d\u5bfb\u5e38\u7684\u8bcd\u7ec4\u5408\uff0c\u4ee5\u521b\u9020\u65b0\u7684\u56fe\u50cf\u5e76\u6311\u6218\u6211\u4eec\u4f5c\u4e3a\u8bfb\u8005\u7684\u671f\u671b\u3002\u8fd9\u901a\u5e38\u7528\u4e8e\u5c0f\u8bf4\u3001\u5e7d\u9ed8\u3001\u65b0\u95fb\u3001\u5e7f\u544a\u548c\u8bd7\u6b4c\u3002\u6cfd\u5d0e\u5c06\u8fd9\u53e5\u8bdd\u7ffb\u8bd1\u6210 ryou no manako wo keikei \u5230 moyashitaru &#39;\u4e24\u4e2a\u773c\u775b\u90fd\u77aa\u7740\u53c8\u71c3\u70e7&#39; Yagawa \u7684\u7ffb\u8bd1\u662f manako ranran\uff0c\u610f\u601d\u662f\u201c\u773c\u775b\u77aa\u201d\u6216\u201c\u71c3\u70e7\u201d\u3002 Sawasaki \u548c Yagawa \u7684\u7ffb\u8bd1\u90fd\u8bd5\u56fe\u4fdd\u6301\u201c\u706b\u70ed\u201d\u7684\u5f62\u8c61\uff0c\u4f46\u7531\u4e8e\u5728\u65e5\u8bed\u4e2d\u4f7f\u7528\u4e86\u66f4\u81ea\u7136\u7684\u642d\u914d\uff0c\u5e76\u5e26\u6709\u8bf4\u660e Jabberwocky \u662f\u523a\u773c\u7684\u8bcd\u8bed\uff0c\u8fd9\u4ec5\u5728\u6807\u8bb0\u7684\u642d\u914d\u4e2d\u6697\u793a\uff0c\u4ece\u800c\u5931\u53bb\u4e86\u4e00\u4e9b\u504f\u5411\u4e8e\u81ea\u7136\u7684\u51c6\u786e\u6027\u3002\u82f1\u8bed\u3002\u7531\u4e8e\u8bd7\u6b4c\u7684\u6587\u5316\u5d4c\u5165\u601d\u60f3\u548c\u62bd\u8c61\u6027\u8d28\uff0c\u8fd9\u79cd\u4fe1\u606f\u7684\u81ea\u7136\u6027\u548c\u51c6\u786e\u6027\u7684\u5e73\u8861\u53ef\u4ee5\u8bf4\u662f\u8bd7\u6b4c\u8f6c\u578b\u4e2d\u8bd1\u8005\u6700\u56f0\u96be\u7684\u4efb\u52a1\u3002\u4e3a\u4e86\u5b9e\u73b0\u5bf9\u7b49\uff0c\u8bd1\u8005\u9762\u4e34\u8bb8\u591a\u95ee\u9898\uff0c\u8fd9\u5f88\u53ef\u80fd\u662f Catford (1965: 27) \u6307\u51fa\u7ffb\u8bd1\u662f\u4e00\u79cd\u201c\u7ecf\u9a8c\u73b0\u8c61\u201d\u7684\u539f\u56e0\u3002\u672c\u6587\u8ba8\u8bba\u4e86\u5982\u4f55\u5728\u8bd7\u6b4c\u201cJabberwocky\u201d\u7684\u4e24\u4e2a\u4e0d\u540c\u65e5\u6587\u7ffb\u8bd1\u4e2d\u5b9e\u73b0\u5bf9\u7b49\uff0c\u91cd\u70b9\u662f\u57fa\u4e8e\u5148\u524d\u5bf9\u7b49\u7406\u8bba\u7684\u8bcd\u6c47\u5dee\u5f02\u3002\n\u77e2\u5ddd\u548c\u6cfd\u5d0e\u90fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u5361\u7f57\u5c14\u7684\u634f\u9020\u8bcd\uff0c\u867d\u7136\u90fd\u5c1d\u8bd5\u4e86\u81ea\u5df1\u634f\u9020\u7684\u65e5\u8bed\u8bcd\uff0c\u4f46\u4e24\u4f4d\u8bd1\u8005\u90fd\u4f7f\u7528\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u63aa\u8f9e\uff0c\u800c\u662f\u7528\u4ed6\u4eec\u81ea\u5df1\u5bf9\u82f1\u8bed\u7684\u89e3\u91ca\u6765\u89e3\u91ca\u4ed6\u4eec\u7ffb\u8bd1\u4e2d\u7684\u610f\u601d\u3002\u8fd9\u4e0e\u975e\u865a\u6784\u7684\u8bcd\u76f8\u540c\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8bd1\u8005\u90fd\u4ee5\u81ea\u5df1\u7684\u65b9\u5f0f\u89e3\u91ca\u5b83\u4eec\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u7684\u7ffb\u8bd1\u4e0e\u5361\u7279\u798f\u5fb7\u7684\u6587\u672c\u5bf9\u7b49\u7406\u8bba\u76f8\u5339\u914d\uff0c\u800c\u5728\u5176\u4ed6\u65f6\u5019\uff0c\u4ed6\u7684\u5f62\u5f0f\u5bf9\u5e94\u7406\u8bba\u4e0e\u4ed6\u4eec\u7684\u7ffb\u8bd1\u76f8\u5339\u914d\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u5168\u6587\u4e0e\u4ed6\u7684\u4efb\u4f55\u4e00\u4e2a\u7406\u8bba\u5b8c\u5168\u5339\u914d\u3002\u8fd9\u4e3b\u8981\u662f\u7531\u4e8e Catford \u7684\u5de5\u4f5c\u5b58\u5728\u8bb8\u591a\u95ee\u9898\uff0c\u5305\u62ec\u4ed6\u4e13\u6ce8\u4e8e\u5728 TT \u5c3d\u53ef\u80fd\u63a5\u8fd1 ST \u65f6\u5b9e\u73b0\u7b49\u6548\uff0c\u5c3d\u7ba1\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u8f6c\u53d8\u624d\u80fd\u4f7f\u5176\u5728 TT \u4e2d\u6709\u610f\u4e49\u3002\u95ee\u9898\u5728\u4e8e\u8bd7\u6b4c\uff0c\u5c24\u5176\u662f\u201cJabberwocky\u201d\uff0c\u4e0d\u662f\u53ef\u4ee5\u76f4\u63a5\u9010\u5b57\u7ffb\u8bd1\u7684\u4e1c\u897f\uff0c\u5373\u4f7f\u6709\u8f6c\u6362\uff0c\u5b83\u5bf9\u76ee\u6807\u65e5\u672c\u53d7\u4f17\u4e5f\u6ca1\u6709\u610f\u4e49\u3002 Nida \u548c Taber \u7684\u7406\u8bba\u66f4\u5173\u6ce8\u53d7\u4f17\uff0c\u5f53\u4fe1\u606f\u4ece ST \u51c6\u786e\u8f6c\u6362\u4e3a TT \u65f6\uff0c\u5c31\u5b9e\u73b0\u4e86\u5bf9\u7b49\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u5728 Yagawa \u548c Sawasaki \u7684\u7ffb\u8bd1\u4e2d\u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u8bd5\u56fe\u4e3a\u65e5\u672c\u89c2\u4f17\u91cd\u65b0\u521b\u9020\u5361\u7f57\u5c14\u6700\u521d\u7684\u76ee\u6807\u53d7\u4f17\u53ef\u80fd\u4f1a\u5524\u8d77\u7684\u4fe1\u606f\u548c\u611f\u53d7\u3002\n\u8bd7\u6b4c\u4e0e\u6280\u672f\u6587\u672c\u4e0d\u540c\uff0c\u662f\u4e00\u79cd\u521b\u9020\u6027\u7684\u5a92\u4ecb\uff0c\u9700\u8981\u4ee5\u521b\u9020\u6027\u7684\u65b9\u5f0f\u8fdb\u884c\u7ffb\u8bd1\uff0c\u4ee5\u4fbf\u5c06\u539f\u59cb\u4fe1\u606f\u548c\u60c5\u611f\u4f20\u9012\u7ed9\u76ee\u6807\u53d7\u4f17\u3002\u7136\u800c\uff0c\u8fc7\u4e8e\u6709\u521b\u610f\u548c\u8fdc\u79bb ST \u53ef\u80fd\u4f1a\u5192\u7740\u6539\u53d8\u4fe1\u606f\u7684\u98ce\u9669\uff0c\u5e76\u53ef\u80fd\u5f15\u53d1\u4e0e\u4f5c\u8005\u6700\u521d\u610f\u56fe\u4e0d\u540c\u7684\u60c5\u7eea\u3002\u96c5\u5404\u5e03\u68ee\u6307\u51fa\uff0c\u7531\u4e8e\u5e26\u6709\u5176\u81ea\u4e3b\u610f\u4e49\u7684\u8bed\u8a00\u4ee3\u7801\u7684\u72ec\u7279\u7279\u5f81\uff0c\u201c\u6839\u636e\u5b9a\u4e49\uff0c\u8bd7\u6b4c\u662f\u4e0d\u53ef\u7ffb\u8bd1\u7684\u201d\uff081959\uff1a238\uff09\u3002\u6211\u8ba4\u4e3a\u201cJabberwocky\u201d\u7684\u60c5\u51b5\u5e76\u975e\u5982\u6b64\uff0c\u56e0\u4e3a\u65e5\u8bed\u8bd1\u8005\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fde\u8d2f\u7684\u7ffb\u8bd1\uff0c\u5c3d\u53ef\u80fd\u5730\u5339\u914d\u4e0e\u539f\u6587\u76f8\u540c\u7684\u4fe1\u606f\uff0c\u540c\u65f6\u8fd8\u4fdd\u6301\u4e86\u8bd7\u7684\u521b\u4f5c\u98ce\u683c\uff0c\u501f\u9274\u4e86\u5361\u7f57\u5c14\u7684\u4e00\u4e9b\u634f\u9020\u8bcd\u6c47\u3002\u8fd9\u4fdd\u6301\u4e86\u4e0e\u6e90\u6587\u672c\u76f8\u4f3c\u7684\u611f\u89c9\uff0c\u540c\u65f6\u8fd8\u901a\u8fc7\u91ca\u4e49\u4e00\u4e9b\u634f\u9020\u7684\u8bcd\u6c47\u4f7f\u65e5\u672c\u89c2\u4f17\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u5c3d\u7ba1\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u4e89\u8fa9\u8bf4\u8bd1\u8005\u6b63\u5728\u5931\u53bb\u539f\u6587\u7684\u542b\u4e49\u5e76\u5524\u8d77\u4e0d\u540c\u7684\u60c5\u611f\uff0c\u4f46\u8d1d\u514b\u8ba8\u8bba\u4e86\u6587\u672c\u662f\u5426\u4e00\u81f4\u53d6\u51b3\u4e8e\u4e2a\u4eba\u8bfb\u8005\u53ca\u5176\u5bf9\u4e16\u754c\u7684\u7406\u89e3\uff08\u8d1d\u514b 1992\uff1a233\uff09\u3002\u6839\u636e\u5979\u7684\u5b9a\u4e49\uff0c\u4e00\u4e9b\u65e5\u672c\u672c\u571f\u8bfb\u8005\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e00\u9996\u8bd7\u6bd4\u5176\u4ed6\u8bd7\u66f4\u7b26\u5408\u6e90\u6587\u672c\u3002\u56e0\u6b64\uff0c\u8fd9\u4f7f\u5f97\u4f5c\u4e3a\u5b66\u8005\u5f88\u96be\u5224\u65ad\u6587\u672c\u4e2d\u662f\u5426\u5b9e\u73b0\u4e86\u5bf9\u7b49\uff1b\u867d\u7136\u6211\u76f8\u4fe1\u8fd9\u4e24\u9996\u8bd7\u90fd\u8fbe\u5230\u4e86\u5bf9\u7b49\uff0c\u4f46\u5176\u4ed6\u5b66\u8005\u53ef\u80fd\u4e0d\u4f1a\u3002\n\u6ce8\u610f\uff1a\u6211\u6ca1\u6709\u5217\u51fa\u6211\u7684\u53c2\u8003\u6587\u732e\uff0c\u4ee5\u9632\u6709\u4eba\u51b3\u5b9a\u590d\u5236\u8fd9\u7bc7\u6587\u7ae0\u3002 \uff08\u5982\u679c\u6709\u4eba\u611a\u8822\u5230\u6284\u88ad\u8fd9\u7bc7\u6587\u7ae0\uff0c\u4ed6\u4eec\u4f1a\u7acb\u5373\u88ab\u53d1\u73b0\u6284\u88ad\uff0c\u56e0\u4e3a\u5927\u5b66\u6709\u7a0b\u5e8f\u53ef\u4ee5\u68c0\u67e5\u4e92\u8054\u7f51\u4e0a\u7684\u6b64\u7c7b\u5185\u5bb9\u3002\uff09\u592a\u68d2\u4e86\uff0c\u6ed1\u6e9c\u6e9c\u7684\u6258\u592b\u5728 wabe \u4e2d\u65cb\u8f6c\u548c\u6447\u6643\uff1b\u6240\u6709\u7684 mimsy \u90fd\u662f borogoves\uff0c\u800c mome raths \u4e0d\u5c51\u4e00\u987e\u3002\u5f53\u5fc3Jabberwock\uff0c\u6211\u7684\u513f\u5b50\uff01\u54ac\u4eba\u7684\u4e0b\u5df4\uff0c\u6293\u4f4f\u7684\u722a\u5b50\uff01\u5f53\u5fc3 Jubjub \u9e1f\uff0c\u907f\u5f00\u70e6\u8e81\u7684 Bandersnatch\uff01\u4ed6\u624b\u91cc\u62ff\u7740\u4ed6\u7684 vorpal \u5251\uff1a\u4ed6\u5bfb\u627e\u7684\u66fc\u82cf\u59c6\u654c\u4eba\u5df2\u7ecf\u5f88\u4e45\u4e86 \u6240\u4ee5\u4ed6\u5728 Tumtum \u6811\u65c1\u4f11\u606f\uff0c\u7ad9\u4e86\u4e00\u4f1a\u513f\u9677\u5165\u6c89\u601d\u3002\u5c31\u50cf\u4ed6\u4ee5\u4e3a\u4ed6\u7ad9\u7740\u4e00\u6837\uff0c Jabberwock\uff0c\u5e26\u7740\u706b\u7130\u7684\u773c\u775b\uff0c \u55d6\u55d6\u55d6\u55d6\u5730\u7a7f\u8fc7\u5854\u5c14\u5409\u6811\u6797\uff0c \u6765\u7684\u65f6\u5019\u53d1\u51fa\u5495\u565c\u5495\u565c\u7684\u58f0\u97f3\uff01\u4e00\u4e8c\uff01\u4e00\u4e8c\uff01\u5e76\u4e14\u901a\u8fc7\u548c\u901a\u8fc7vorpal\u5200\u7247\u53bb\u7a83\u7b11\u5c0f\u5403\uff01\u4ed6\u8ba9\u5b83\u6b7b\u4e86\uff0c\u4ed6\u5e26\u7740\u5b83\u7684\u5934\u98de\u5feb\u5730\u56de\u53bb\u4e86\u3002\n\u4f60\u6740\u4e86 Jabberwock \u5417\uff1f\u6765\u5230\u6211\u7684\u6000\u91cc\uff0c\u6211\u559c\u6c14\u6d0b\u6d0b\u7684\u5b69\u5b50\uff01\u54e6\uff0c\u7f8e\u597d\u7684\u4e00\u5929\uff01Callooh\uff01Callay\uff01\u4ed6\u5728\u4ed6\u7684\u5feb\u4e50\u4e2d\u54af\u54af\u5730\u7b11\u7740\u3002\u800c\u5988\u5988\u5374\u5f88\u751f\u6c14\u3002\n\u6ca1\u5173\u7cfb\uff0c\u5c31\u7b97\u662f\u86c7\uff0c\u4e5f\u662f\u6c99\u86c7\u3002\u201d\u662f\u7684\uff0c\u5582\uff01\u5373\u4fbf\u662f\u8fd9\u628a\u5200\uff0c\u4e5f\u53ea\u80fd\u4f5c\u4e3a\u5200\u5203\u4f7f\u7528\u3002 \u201c\u4f60\u6253\u5012\u90aa\u6076\u7684\u963f\u91cc\u5965\u9b3c\u4e86\u5417\uff1f\u5bf9\u4e0d\u8d77\u3002\u6765\u5427\uff0c\u6211\u7684\u76ae\u5361\u5766\u68ee\u3002\n\u54e6\uff0c\u771f\u662f\u6709\u8da3\u7684\u4e00\u5929\u3002 Yuuhi Kirara \u4e00\u5b9a\u662f\u7ed5\u6765\u7ed5\u53bb\u7684 Toov \u548c\u88ab\u79f0\u4e3a\u201cItokayo\u201d\u7684 Laas \u4f4d\u4e8e\u9c81\u5df4\uff0c\u5448\u5706\u5f62\u3002\n\u6240\u6709\u5f31\u70b9\u90fd\u662fBorogove\uff0c\u56e0\u6b64\u662fSatoto Lars\u7684\u5c16\u53eb\u3002 \u201c\u6211\u7684\u513f\u5b50\uff0c\u5f53\u5fc3\u8d3e\u4f2f\u6c83\u514b\uff01\u54ac\u7259\uff08Agito\uff09\uff0c\u722a\u5b50\u6293\uff01\u4e0d\u8981\u62c5\u5fc3 Jubjub Birds\uff0c\u4e5f\u4e0d\u8981\u505c\u7559\u5728\u9634\u71c3\u7684 Bandersnatch\uff01 \u300f\\ Vorpal\u7684\u5251\uff08\u5251\uff09\uff0c\u6361\u8d77\u6765\uff0c\u5bfb\u627e\u50cf\u5c3e\u5df4\u4e00\u6837\u7684\u4e1c\u897f\u3002\n\u5728\u5176\u4f59\u7684\u65c1\u8fb9\uff0c\u6709\u4e00\u68f5Tamtam\u6811\uff0c\u5f53\u65f6\u6211\u5728\u4e00\u79cd\u66b4\u529b\u7684\u611f\u89c9\u4e2d\u505c\u4e0b\u6765\uff0c\u5f53\u65f6\uff0c\u4e00\u4e2a\u707c\u70ed\u53cc\u773c\u7684Jabberwock\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7a7f\u8fc7Tarjii\u68ee\u6797\u5e76\u5f97\u5230\u7684Jabberwock\u751f\u6c14\u3002\uff08\u505a\uff09\u6211\u60f3\u77e5\u9053\u6211\u662f\u5426\u6b63\u5728\u63a5\u8fd1\u90a3\u91cc\uff01\u4e00\u4e8c\uff01\u4e00\u4e8c\uff01 Vorpal \u7684\u5251\uff0c\u523a\u7a7f\uff0c\u4ecd\u7136\u523a\u7a7f\uff0c\u88ab\u65a9\u65ad\u63a5\u4f4f\uff01\n\u4ece Jabberwock \u5f00\u59cb\u7684\u751f\u6d3b\uff0c\u4ece\u8116\u5b50\u5230\u82f1\u96c4\u3002\u4ed6\u8e0f\u4e0a\u51ef\u65cb\u5f52\u6765\u7684\u9a70\u9a8b\u3002 \u201c\u5bf9\u4e86\uff0cJabberwock\u7684\u5931\u8d25\u662f\u771f\u7684\u5417\uff1f\u9760\u8fd1\u6211\u7684\u624b\u81c2\uff0c\u6211\u662f\u4e00\u4e2a\u7ea2\u53d1\u7537\u5b69\uff01\u8fd9\u4e00\u5929\u4f3c\u4e4e\u662f\u4e2a\u597d\u5929\u6c14\uff01\u662f\u82b1\u67f3\u5417\uff1f\u662f\u4e0d\u662f\u5f88\u5389\u5bb3\uff01 \u300f\\\u7236\u4eb2\u9ad8\u5174\u5730\u54af\u54af\u7b11\u3002\u665a\u706b\u65f6\uff0c\u7c98\u6258\u592b\u4f4d\u4e8e\u54c8\u9c81\u5df4\uff0c\u6709\u4e00\u4e2a\u5706\u5f62\u7684\u624b\u956f\u3002\u6240\u6709\u5f31\u70b9\u90fd\u662fBorogove\uff0c\u56e0\u6b64\u662fSatoto Lars\u7684\u547b\u541f\u3002", "note_en": "This is one of my favourite essays from my MA in Translation Theory and Practice. The MA certainly focuses more on the theory side of translation which is evident from this essay. The point of the essay was to compare two translations of a text and discuss their \u201cequivalence\u201d on various levels.\n I chose the Jabberwocky because it\u2019s a poem that I grew up with. I learnt the lyrics when I was about 7 and can still recite them in full today. So exploring two Japanese translations were very exciting for me.\n     Achieving equivalence when translating a source text (ST) to a target text (TT) in another language is a translator\u2019s main goal.\n However, many theorists debate what determines equivalence between texts, whether it is between corresponding lexical utterances (Catford 1965; Baker 1992), on a syntactic level (Nida 1964; Nida 2000; Baker 1992), a semantic level (Nida and Taber 1982; Newmark 1981), stylistic or discursive.\n Also, which equivalence a translation will use depends on a number of factors including the type of text, its message, the purpose of the author, the intention of the translator (bias towards ST or TT), and the audience (Newmark 1981: 20-21, 39; Nida and Taber 1982: 31; Nida 2000: 127).\n To discuss the various text types, audiences and aims would be too much for a the scope of this essay, so I wish to focus on one text in particular; the poetic work of Lewis Carroll\u2019s\u00a0 \u201cJabberwocky\u201d.\n  Poetry is particularly interesting to analyse in regards to equivalence because it has a strong base in the culture, poetic styles, and abstract meanings of its source language. Translators of poetry have to deal with these issues of translating the meaning versus utterances, to make it faithful to the ST while also making it understandable and meaningful in the TT (see Nida 2000: 131).\n This essay will look at these issues when trying to achieve equivalence in two Japanese translations of the \u201cJabberwocky\u201d by Yanagawa (Carroll 1994) and Sawasaki (2008)., focusing on the lexical aspects of the poems and drawing on previous theories of equivalence, Baker\u2019s in particular.\n   One way a translation can achieve equivalence is at a lexical or, as Baker (1992) says, at the word level. The \u201cJabberwocky\u201d is a piece written in 1871 for the book  Through the Looking Glass. It was written as, what some people view, a \u201cnonsense poem\u201d (Klug 2000: 4) due to the large number of fabricated words by Caroll. However, when you break down the so-called \u2018fabricated\u2019 utterances you can see there is some sense to them in the English language which has been drawn upon in the Japanese translations.\n Take the word \u201cfrumious\u201d (which describes the Bandersnatch, a fictional monster) for example. In English this word draws upon the words \u2018furious\u2019 and \u2018fuming\u2019 both of which mean \u2018angry\u2019, but \u2018fuming\u2019 carries with it a \u2018smoking\u2019 meaning as well.\n Yagawa has translated this to  takeburu which draws on the words  takeru which means \u2018to be fierce\u2019 and  keburu which means \u2018to smoke\u2019. Whereas Sawasaki translated this word to  iburikurueru, using  iburidau, \u2018to smoke an animal out\u2019 and  kuruu, \u2018to go mad\u2019.\n Both of these use imagery close to the English \u201cfrumious\u201d with similar \u2018smoky\u2019 words for \u2018fuming\u2019, although they varied on their interpretations of \u2018furious\u2019 to \u2018fierce\u2019 or \u2018mad\u2019.\n Baker\u2019s theory of equivalence at the word level focuses on how direct equivalence is unachievable between texts, and so different approaches are needed to achieve equivalence at the word level (Baker 1992: 18-21).\n Although she focuses on the issue of translating words with affixes, Baker\u2019s concept of non-equivalence in different forms (ibid: 21) is most appropriate for this issue of fabricated words in the source text.\n Both Yagawa and Sawasaki have achieved equivalences for \u201cfrumious\u201d by paraphrasing it (ibid: 38), using their own fabricated words in Japanese, a similar tactic as Carroll, who drew upon two words in his native language to create a new one.\n   Yagawa and Sawasaki do not use this tactic with every fabricated word in the text however, such as with the word \u201cburble\u201d (to describe the noise of the Jabberwocky as it approaches), which Caroll himself was quoted as originating from English words \u2018bleat\u2019, \u2018murmur\u2019 and \u2018warble\u2019 (Carroll 2009).\n The translators have tried to achieve equivalence using what Baker calls \u201ctranslation by paraphrase using unrelated word\u201d (Baker 1992: 38), a tactic similar to the previous one but using a modified subordinate clause rather than changing the form of the language.\n Yagawa uses  sawaga mashiku which means \u2018noisily at full speed\u2019. Sawasaki translates it to  domekizuri which uses the  onyomi (reading based on the original Chinese) of the kanji meaning \u2018angry\u2019,  mekimeki, meaning \u2018conspicuously\u2019, and  zuriagaru which means \u2018to creep up\u2019.\n Sawasaki uses a similar approach to Carroll by combining three words, which creates a fabricated word in Japanese meaning \u2018angrily creeps up conspicuously\u2019. Although he uses the same approach he loses a lot of the original imagery.\n Yagawa does attempt to maintain the imagery of the sound the Jabberwocky is making, but neither have drawn upon the full English origins for this word, and have instead focused on the way the creature is moving by translating the word to subordinate clauses.\n   The \u201cJabberwocky\u201d is not entirely made up of fabricated words and the way the two translators have translated the standard English utterances are important to touch upon.\n The phenomenon when a word in the ST has direct correspondence with a word in the TT has been approached by a few theorists, including Catford (1965). He composed the idea of textual equivalence which is \u201cany TL form (text or portion of text) which is observed to be the equivalent of a given SL form (text or portion of text)\u201d (Catford 1965; 27).\n He uses the example of \u2018son\u2019 in English compared to the French  fil, which can also be seen in the \u201cJabberwocky\u201d where both translators have translated \u2018son\u2019 to  musuko in Japanese.\n Textual equivalence can be viewed at a number of points in the poems where both translators have used the same corresponding utterances, such as  tsurugi which means \u2018sword\u2019, or  mori, \u2018forest\u2019.   However, this is not the case with all utterances where you might expect textual equivalence to apply, such as \u2018claws\u2019 which Yagawa translates to  tsume and Sawasaki translates to  kagitsume. The latter meaning \u2018hooked claws\u2019 is a slight shift in meaning from the ST for the sake of poetic effect and imagery.\n This goes against Catford\u2019s theory of textual equivalence, although he does say that texts which do not have an equivalent in the target language will have shifts in levels or categories of the text (Catford 1965: 73).\n Sawasaki, however, did not shift the meaning of the translation because there was no direct translation from the ST. Parallel to textual equivalence Catford theorised what he called formal correspondence.\n This is translation that is \u201conly approximate\u201d (idib: 32) because it is achieved when two languages \u201coccupy, as nearly as possible, the \u2018same\u2019 place in the \u2018economy\u2019 of the TL as the given SL category occupies in the SL\u201d (ibid: 27). Which means that Sawasaki\u2019s translation of \u2018claw\u2019 to \u2018hooked claw\u2019 can still be considered a form of equivalence as it \u2018occupies\u2019 a \u2018close approximation\u2019 to the original.\n   Similar to Catford, Nida theorised formal equivalence, where the \u201cmessage in the receptor language should match as closely as possible the different elements in the source language.\n This means, for example, that the message in the receptor culture is constantly compared with the message in the source culture to determine standards of accuracy and correctness\u201d (Nida in Venuti: 127).\n In other words, achieving formal equivalence can be determined by how closely a translator matches the TT to the ST.\n There are issues with these approaches however, as Catford and Nida\u2019s approaches display a bias towards the ST, stating that equivalence is only achieved when the TT is translated as close to the original lexis, syntax, style etc. as possible. If this were the case, the already difficult to understand \u201cJabberwocky\u201d would become completely incomprehensible to a Japanese audience.\n However, there are instances in this case where the translator does not use these approaches and completely changes the lexis of the original to suit the target audience. One such instance is the line \u201cHe went galumphing back\u201d (Carroll 2009) which Sawasaki translates to  kare wa ikitoutou taru gaisen no gyaroppu wo fumu, which back translates to \u2018his heart [going] step-step he stepped a triumphant return gallop\u2019.\n Although it still conveys the same image of the boy returning, Sawasaki has re-worded it to suit a Japanese audience using Japanese onomatopoeia to form a more descriptive image.\n   In the instance above, the translator has used what Nida calls dynamic equivalence, where in \u201ctranslation one is not so concerned with matching the receptor-language message with the source-language message, but\u2026the relationship between receptor and message should be substantially the same as that which existed between the original receptors and the message\u201d (Nida 2000: 129).\n In other words, at parts in the \u201cJabberwocky\u201d the translators Sawasaki and Yagawa depart from translating the poem word-for-word and create a dynamic equivalence that re-creates the message and feelings that might have been evoked in Carroll\u2019s original English text for a Japanese audience.\n  This dynamic approach, according to Nida and Taber (1982 :22), has, in most translations, a higher priority over formal equivalence, and a translator must consider the needs of the audience over the forms of the language (ibid: 31).\n This is especially the case in poetry translations where there is a great need to focus on \u201creproducing the emotional intensity and flavour\u201d (Nida 2000: 127). One should not translate a poem as if it were prose, but compose another poem in the target language which will have a life of its own separate from its source text (Matthews 1959 in Nida 2000: 127).\n This would explain how both translators have created Japanese versions of the original that convey the original message while also being two different texts in their own right. One example is the line in Carroll\u2019s text \u201cOne, two! One, two! And through and through\u201d, which Yagawa translates to  Ei, ya! Ei, yaa! Koredemo kato bakari which means \u2018 Ei, ya! Ei, yaa! Even this [he did] more of\u2019, implying the boy shouting a lot as he fights.\n Sawasaki translates this to:  ichi, ni! Ichi, ni! Tsuranukite nao mo tsuranuku which is a closer translation to the original, back translating to \u2018One, two! One, two! Through and through more\u2019.\n As you can see here, both translators have attempted to keep the syntactic structure of the original but have composed their own unique works in Japanese at the same time. Although Yagawa has moved away from the ST more than Sawasaki she has tried to balance the message with the line sounding natural in Japanese.\n   Just like Yagawa, translators are faced with the issue of accuracy to the source text and naturalness in the target text, and finding an appropriate balance between the two. Baker discussed this issue in terms of collocations, where translators are faced with \u201ca difficult choice between what is typical and what is accurate\u201d (Baker 1992: 60).\n Although a sentence might be changed in the TT, it could inadvertently change the meaning slightly for the target audience. This is not necessarily a bad thing, as certain words and collocations are heavily based in cultural understandings which might not transfer to another culture and changing the meaning slightly may make it more understandable in the TT.\n These culturally specific collocations are difficult to observe in the \u201cJabberwocky\u201d due to the large quantity of fabricated lexis which create non-standard collocations in English in the first place, such as \u201cthe Jabberwock with eyes of flame\u201d which is a marked collocation between \u2018eyes\u2019 and \u2018flame\u2019.\n Unusual collocations such as these are what Baker (1992: 55) calls marked collocations, unusual combinations of words deliberately chosen to create new images and to challenge our expectations as readers. This is normally used in fiction, humour, news, advertisements and poetry.\n Sawasaki translated this to  ryou no manako wo keikei to moyashitaru \u2018both eyes glaring and burning\u2019; whereas Yagawa\u2019s translation is  manako ranran which means \u2018eyes glaring\u2019 or \u2018burning\u2019.\n Both Sawasaki and Yagawa\u2019s translations have attempted to keep the \u2018fiery\u2019 image, but have lost some accuracy in favour of naturalness by using more natural collocations in Japanese with the words that state the Jabberwocky is glaring, which is only implied in the marked collocation in English.\n This balance of naturalness and accuracy of message is arguably the most difficult task for a translator in poetry transition due to the cultural embedded ideas and abstract nature of poetry.\n   There are many issues translators face in order to achieve equivalence, which is most likely why Catford (1965: 27) stated that translation was an \u201cempirical phenomenon\u201d.\n This essay discussed how equivalence was achieved in two different Japanese translations of the poem \u201cJabberwocky\u201d, focusing on the lexical differences based on previous theories of equivalence.\n Both Yagawa and Sawasaki handled Carroll\u2019s fabricated words in different ways, although both attempted their own fabricated Japanese words, but neither translator used the exact same wording, instead using their own interpretations of the English to paraphrase the meaning in their translations.\n This is the same with the non-fabricated words, as each translator has interpreted them in their own way.\n In some instances their translations match with Catford\u2019s theory of textual equivalence, and at other times his theory of formal correspondence, but neither of the full texts match either of his theories entirely.\n This is mostly due to a number of issues with Catford\u2019s work, including\u00a0 his concentrating on achieving equivalence when a TT is as close to the ST as possible, although some shifts may be needed for it to make sense in the TT.\n The problem with this is that poetry, especially the \u201cJabberwocky\u201d, is not something one can directly translate word-for-word, and even with shifts it would not make sense to the target Japanese audience.\n Nida and Taber\u2019s theories focus more on the audience and that equivalence is achieved when the message is accurately translated from ST to TT.\n I would argue that this is achieved in Yagawa and Sawasaki\u2019s translations, as they attempt to re-create the message and feelings that might have been evoked in Carroll\u2019s original target audience for their Japanese audience.\n  Poetry, unlike a technical text, is a creative medium and needs to be translated in a creative way for the original message and emotions to transfer to the target audience.\n Being too creative and moving away from the ST, however, can risk changing the message and may evoke emotions that are different from what the author originally intended. Jakobson states how, due to distinctive features of verbal code which carry their own autonomous signification, \u201cpoetry by definition is untranslatable\u201d (1959: 238).\n I would argue that this is not the case with \u201cJabberwocky\u201d as the Japanese translators have achieved coherent translations that match, as best they can, the same message as the original while also maintaining the creative style of the poem drawing upon some of Carroll\u2019s fabricated lexis.\n This maintains a similar feeling as the source text, while also making it more understandable for a Japanese audience by paraphrasing some of the fabricated lexis.\n Although in these instances one might argue the translators are losing the meaning of the original and are evoking different emotions, but Baker discusses whether a text coheres or not depends on the individual reader and their understanding of the world (Baker 1992: 233).\n By her definition some native Japanese readers might find one poem more equivalent to the source text than others.\n This therefore makes it difficult to judge as a scholar if equivalence is achieved in a text or not; although I believe equivalence is achieved in both these poems, other scholars might not.\n     Note: I haven\u2019t listed my references in case someone decides to copy this essay.\n (And if someone was stupid enough to copy this essay they will be discovered for plagiarism right away because Universities have programs which check the internet for this kind of stuff.)\n    Twas brillig, and the slithy toves Did gyre and gimble in the wabe; All mimsy were the borogoves, And the mome raths outgrabe.\n Beware the Jabberwock, my son! The jaws that bite, the claws that catch! Beware the Jubjub bird, and shun The frumious Bandersnatch!\n He took his vorpal sword in hand: Long time the manxome foe he sought So rested he by the Tumtum tree, And stood awhile in thought.\n And as in uffish thought he stood, The Jabberwock, with eyes of flame, Came whiffling through the tulgey wood, And burbled as it came!\n One, two! One, two! And through and through The vorpal blade went snicker-snack! He left it dead, and with its head He went galumphing back.\n And hast thou slain the Jabberwock? Come to my arms, my beamish boy! O frabjous day! Callooh! Callay! He chortled in his joy.\n Twas brillig, and the slithy toves Did gyre and gimble in the wabe; All mimsy were the borogoves, And the mome raths outgrabe.\n    \u3086\u3046\u307e\u3060\u304d\u3089\u3089\u3000\u3057\u306a\u306d\u3070\u30c8\u30aa\u30f4\n \u307e\u308f\u308b\u304b\u306e\u3046\u3061\u3000\u3058\u3083\u3044\u3063\u3066\u304d\u308a\u308b\n \u3044\u3068\u304b\u3088\u308f\u308c\u306e\u3000\u304a\u3093\u30dc\u30ed\u30b4\u30aa\u30f4\n \u307e\u3067\u305f\u308b\u30e9\u30a2\u30b9\u3000\u307b\u3055\u3081\u3059\u308a\u3064\u3064\n \u300c\u3080\u3059\u3053\u3088\u3000\u90aa\u5a46\u6709\u5c3e\u9b3c\u306b\u3083\u5fc3\u3086\u308b\u3059\u306a\n   \u3044\u3044\u304b\u3000\u305f\u3051\u3076\u308b\u4e07\u86c7\u7802\u9b51\u306b\u3082\u300d\n      \u304b\u306e\u90aa\u5a46\u6709\u5c3e\u9b3c\u304c\u307e\u306a\u3053\u3089\u3093\u3089\u3093\n \u91cd\u308b\u6728\u306e\u68ee\u3092\u3073\u3085\u308b\u3073\u3085\u308b\u3068\u904e\u304e\n  \u3048\u3044\u3001\u3084\uff01\u3048\u3044\u3001\u3084\u3042\uff01\u3053\u308c\u3067\u3082\u304b\u3068\u3070\u304b\u308a\n \u3053\u3068\u3057\u3048\u308b\u5203\u3067\u3057\u305f\u305f\u304b\u3050\u3055\u308a\uff01\n   \u300c\u90aa\u5a46\u6709\u5c3e\u9b3c\u3092\u3084\u3063\u3064\u3051\u305f\u3093\u3060\u3068\uff1f\n \u3067\u304b\u3057\u305f\u305e\u3000\u6765\u3044\u3000\u308f\u304c\u30d4\u30ab\u5929\u606f\u5b50\n \u3042\u3042\u6109\u5feb\u306a\u308b\u65e5\u3088\u3000\u3042\u3063\u3071\u308c\u304b\u3063\u307d\u308c\uff01\u300d\n  \u3086\u3046\u307e\u3060\u304d\u3089\u3089\u3000\u3057\u306a\u306d\u3070\u30c8\u30aa\u30f4\n \u307e\u308f\u308b\u304b\u306e\u3046\u3061\u3000\u3058\u3083\u3044\u3063\u3066\u304d\u308a\u308b\n \u3044\u3068\u304b\u3088\u308f\u308c\u306e\u3000\u304a\u3093\u30dc\u30ed\u30b4\u30aa\u30f4\n \u307e\u3067\u305f\u308b\u30e9\u30a2\u30b9\u3000\u307b\u3055\u3081\u3059\u308a\u3064\u3064\n    \u5915\u706b\uff08\u3042\u3076\u308a\uff09\u306e\u523b\u3001\u7c98\u6ed1\uff08\u306d\u3070\u3089\u304b\uff09\u306a\u308b\u30c8\u30fc\u30f4\n \u9065\u5834\uff08\u306f\u308b\u3070\uff09\u306b\u3042\u308a\u3066\u56de\u5100\uff08\u307e\u308f\u308a\u3075\u308b\u307e\uff09\u3044\u9310\u7a7f\uff08\u304d\u308a\u3046\u304c\uff09\u3064\u3002\n \u7dcf\u3066\u5f31\u307c\u3089\u3057\u304d\u306f\u30dc\u30ed\u30b4\u30fc\u30f4\u3001 \u304b\u304f\u3066\u90f7\u9060\uff08\u3055\u3068\u3068\u304a\uff09\u3057\u30e9\u30fc\u30b9\u306e\u3046\u305a\u3081\u304d\u53eb\u3070\u3093\u3002\n \u300e\u6211\u304c\u606f\u5b50\u3088\u3001\u30b8\u30e3\u30d0\u30a6\u30a9\u30c3\u30af\u306b\u7528\u5fc3\u3042\u308c\uff01\n \u55b0\u3089\u3044\u3064\u304f\u984e\uff08\u3042\u304e\u3068\uff09\u3001\u5f15\u304d\u63b4\u3080\u920e\u722a\uff01\n \u30b8\u30e3\u30d6\u30b8\u30e3\u30d6\u9ce5\u306b\u3082\u5fc3\u914d\u308b\u3079\u3057\u3001\u305d\u3057\u3066\u52aa\uff08\u3086\u3081\uff09\n \u71fb\u308a\u72c2\u3048\u308b\u30d0\u30f3\u30c0\u30fc\u30b9\u30ca\u30c3\u30c1\u306e\u508d\u306b\u5bc4\u308b\u3079\u304b\u3089\u305a\uff01\u300f\n \u30f4\u30a9\u30fc\u30d1\u30eb\u306e\u5263\uff08\u3064\u308b\u304e\uff09\u305e\u624b\u306b\u53d6\u308a\u3066\n \u5c3e\u63c3\uff08\u304a\u305d\u308d\uff09\u3057\u304d\u7269\u63a2\u3059\u3053\u3068\u6c38\u304d\u306b\u6e09\u308c\u308a\n \u61a9\u3046\u508d\u3089\u306b\u3042\u308b\u306f\u30bf\u30e0\u30bf\u30e0\u306e\u6a39\u3001\n  \u304b\u304f\u3066\u66b4\uff08\u307c\u3046\uff09\u306a\u308b\u60f3\u3044\u306b\u7acb\u3061\u6b62\u307e\u308a\u3057\u305d\u306e\u6298\u3001\n \u4e21\u306e\u773c\uff08\u307e\u306a\u3053\uff09\u3092\u70af\u3005\uff08\u3051\u3044\u3051\u3044\uff09\u3068\u71c3\u3084\u3057\u305f\u308b\u30b8\u30e3\u30d0\u30a6\u30a9\u30c3\u30af\u3001\n \u305d\u3088\u305d\u3088\u3068\u30bf\u30eb\u30b8\u30a4\u306e\u68ee\u79fb\u308d\u3044\u629c\u3051\u3066\u3001\n \u6012\uff08\u3069\uff09\u3081\u304d\u305a\u308a\u3064\u3064\u3082\u305d\u3053\u306b\u8feb\u308a\u6765\u305f\u3089\u3093\uff01\n \u4e00\u3001\u4e8c\uff01\u3000\u4e00\u3001\u4e8c\uff01\u3000\u8cab\u304d\u3066\u5c1a\u3082\u8cab\u304f\n \u30f4\u30a9\u30fc\u30d1\u30eb\u306e\u5263\uff08\u3064\u308b\u304e\uff09\u304c\u523b\u307f\u5208\u308a\u7372\u3089\u3093\uff01\n \u30b8\u30e3\u30d0\u30a6\u30a9\u30c3\u30af\u304b\u3089\u306f\u547d\u3092\u3001\u52c7\u58eb\u3078\u306f\u9996\u3092\u3002\n \u5f7c\u306f\u610f\u6c17\u8e0f\u3005\uff08\u3044\u304d\u3068\u3046\u3068\u3046\uff09\u305f\u308b\u51f1\u65cb\u306e\u30ae\u30e3\u30ed\u30c3\u30d7\u3092\u8e0f\u3080\u3002\n \u300e\u3055\u3066\u3082\u30b8\u30e3\u30d0\u30a6\u30a9\u30c3\u30af\u306e\u8a0e\u3061\u5012\u3055\u308c\u3057\u306f\u771f\uff08\u307e\u3053\u3068\uff09\u306a\u308a\u3084\uff1f\n \u6211\u304c\u8155\uff08\u304b\u3044\u306a\uff09\u306b\u6765\u305f\u308c\u3001\u8d64\u5c04\uff08\u305b\u304d\u3057\u3083\uff09\u306e\u7537\u5b50\uff08\u304a\u306e\u3053\uff09\u3088\uff01\n \u304a\u304a\u82b3\u6674\uff08\u304b\u3093\u3070\uff09\u3089\u3057\u304d\u65e5\u3088\uff01\u3000\u82b1\u67f3\u304b\u306a\uff01\u3000\u83ef\u9e97\u304b\u306a\uff01\u300f\n \u7236\u306f\u559c\u3073\u306b\u30af\u30b9\u30af\u30b9\u3068\u9f3b\u3092\u9cf4\u3089\u305b\u308a\u3002\n \u5915\u706b\uff08\u3042\u3076\u308a\uff09\u306e\u523b\u3001\u7c98\u6ed1\uff08\u306d\u3070\u3089\u304b\uff09\u306a\u308b\u30c8\u30fc\u30f4 \u9065\u5834\uff08\u306f\u308b\u3070\uff09\u306b\u3042\u308a\u3066\u56de\u5100\uff08\u307e\u308f\u308a\u3075\u308b\u307e\uff09\u3044\u9310\u7a7f\uff08\u304d\u308a\u3046\u304c\uff09\u3064\u3002 \u7dcf\uff08\u3059\u3079\uff09\u3066\u5f31\u307c\u3089\u3057\u304d\u306f\u30dc\u30ed\u30b4\u30fc\u30f4\u3001 \u304b\u304f\u3066\u90f7\u9060\uff08\u3055\u3068\u3068\u304a\uff09\u3057\u30e9\u30fc\u30b9\u306e\u3046\u305a\u3081\u304d\u53eb\u3070\u3093\u3002", "posttime": "2021-07-24 07:00:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e5\u672c,\u80e1\u8a00\u4e71\u8bed,jabberwocky,\u7ffb\u8bd1", "title": "\u4e24\u9996\u65e5\u672c\u80e1\u8a00\u4e71\u8bed\u8bd7\uff082017\uff09", "title_en": "Two Japanese Jabberwocky Poems (2017)", "transed": 1, "url": "https://j-entranslations.com/two-japanese-jabberwocky-poems/", "via": "", "real_tags": ["\u65e5\u672c", "\u80e1\u8a00\u4e71\u8bed", "\u7ffb\u8bd1"]}, {"category": "", "categoryclass": "", "imagename": "48a3b53842fb9c8f700659443747d789.png", "infoid": 1069288, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u4e4b\u524d\u7684\u4e00\u4e9b\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u63cf\u8ff0\u4e86\u5982\u4f55\u901a\u8fc7\u5c06\u56fe\u8f6c\u6362\u5408\u5e76\u5230\u4ee3\u7801\u751f\u6210\u4e2d\u6765\u6cdb\u5316\u81ea\u52a8\u5fae\u5206\u4ee5\u81ea\u52a8\u589e\u5f3a\u7a33\u5b9a\u6027\u548c\u5404\u79cd\u5176\u4ed6\u7ec6\u8282\u3002\u4f46\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u8fc7\u591a\u8ba8\u8bba\u7684\u4e00\u4ef6\u4e8b\u662f\u8fd9\u4e9b\u7c7b\u578b\u7684\u7b97\u6cd5\u7684\u5c40\u9650\u6027\u3002\u8fd9\u79cd\u9650\u5236\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u201c\u51c6\u9759\u6001\u201d\uff0c\u5373\u4e00\u79cd\u7b97\u6cd5\u53ef\u4ee5\u91cd\u65b0\u89e3\u91ca\u4e3a\u67d0\u79cd\u9759\u6001\u7b97\u6cd5\u7684\u7279\u6027\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u51fa\u4e8e\u975e\u5e38\u6839\u672c\u7684\u539f\u56e0\uff0c\u8fd9\u4e0e\u67d0\u4e9b\u4e3b\u8981\u673a\u5668\u5b66\u4e60\u6846\u67b6\u5bf9\u5b83\u4eec\u53ef\u4ee5\u5b8c\u5168\u4f18\u5316\u7684\u4ee3\u7801\uff08\u4f8b\u5982 Jax \u6216 Tensorflow\uff09\u5f3a\u52a0\u7684\u9650\u5236\u76f8\u540c\u3002\u8fd9\u8ba9\u6211\u4eec\u4ea7\u751f\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5728\u8fd9\u79cd\u5fc3\u6001\u4e0b\u662f\u5426\u5b58\u5728\u4e0d\u53ef\u4f18\u5316\u7684\u7b97\u6cd5\uff0c\u4e3a\u4ec0\u4e48\uff1f\u7b54\u6848\u73b0\u5df2\u5728 ICML 2021 \u4e0a\u53d1\u5e03\uff0c\u8ba9\u6211\u4eec\u6df1\u5165\u7814\u7a76\u8fd9\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u6982\u5ff5\u3002\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5bf9\u4ec0\u4e48\u662f\u51c6\u9759\u6001\u7b97\u6cd5\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u60f3\u6cd5\u3002\u5b83\u662f\u7b97\u6cd5\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4ee5\u67d0\u79cd\u65b9\u5f0f\u91cd\u65b0\u8868\u793a\u4e3a\u9759\u6001\u7b97\u6cd5\u3002\u53ef\u4ee5\u5c06\u201c\u9759\u6001\u7b97\u6cd5\u201d\u89c6\u4e3a\u5177\u6709\u4e0d\u9700\u8981\u5b8c\u6574\u8ba1\u7b97\u673a\u63cf\u8ff0\u7684\u7b80\u5355\u6570\u5b66\u63cf\u8ff0\u7684\u7b97\u6cd5\uff0c\u5373\u6ca1\u6709\u5faa\u73af\u3001\u91cd\u5199\u5230\u5185\u5b58\u7b49\u3002\u4f5c\u4e3a\u793a\u4f8b\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b Jax \u6587\u6863\u4e2d\u7684\u4e00\u4e2a\u793a\u4f8b\u3002\u4e0b\u9762\u662fJax JIT\u7684\u4f5c\u7528\uff1a \u6ce8\u610f\u5b83\u662f\u7528\u63a7\u5236\u6d41\u8868\u793a\u7684\uff0c\u5373\u7528\u5faa\u73af\u8868\u793a\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u5faa\u73af\u4e0d\u662f\u5fc5\u987b\u7684 \u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u8fd9\u4e2a\u65b9\u6cd5\u7406\u89e3\u4e3a2*2*2 *x \u6216 8*x\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b JIT \u5c06\u5931\u8d25\u7684\u793a\u4f8b\u662f\uff1a@jit def f (x): if x &lt; 3: return 3. * x ** 2 else: return - 4 * x # \u8fd9\u5c06\u5931\u8d25\uff01 try: f ( 2 ) except Exception as e: print ( &quot;Exception {}&quot;.format (e) ) \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u672c\u8d28\u4e0a\u6709\u4e24\u4e2a\u8ba1\u7b97\u56fe\u5728 x&lt;3 \u5904\u62c6\u5206\uff0c\u56e0\u6b64\u5982\u4e0a\u6240\u8ff0\u8fd9\u5e76\u6ca1\u6709\u6709\u4e00\u4e2a\u63cf\u8ff0\u8ba1\u7b97\u7684\u6570\u5b66\u8bed\u53e5\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u6267\u884c lax.cond(x &lt; 3, 3. * x ** 2, -4 * x) \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u8bf7\u6ce8\u610f\u8fd9\u662f\u4e00\u4e2a\u6839\u672c\u4e0d\u540c\u7684\u8ba1\u7b97\uff1alax.cond \u5f62\u5f0f\u603b\u662f\u8ba1\u7b97 if \u7684\u4e24\u8fb9\u5728\u9009\u62e9\u8981\u7ed3\u8f6c\u54ea\u4e00\u4e2a\u4e4b\u524d\u7684\u8bed\u53e5\uff0c\u800c true if \u8bed\u53e5\u6839\u636e\u6761\u4ef6\u66f4\u6539\u5176\u8ba1\u7b97\u3002 lax.cond \u5f62\u5f0f\u4e4b\u6240\u4ee5\u5982\u6b64\u9002\u7528\u4e8e Jax \u7684 JIT \u7f16\u8bd1\u7cfb\u7edf\uff0c\u662f\u56e0\u4e3a\u5b83\u662f\u51c6\u9759\u6001\u7684\u3002\u5c06\u53d1\u751f\u7684\u8ba1\u7b97\u662f\u56fa\u5b9a\u7684\uff0c\u5373\u4f7f\u7ed3\u679c\u4e0d\u662f\uff0c\u800c\u539f\u59cb if \u8bed\u53e5\u5c06\u66f4\u6539\u57fa\u4e8e\u8f93\u5165\u503c\u8ba1\u7b97\u7684\u5185\u5bb9\u3002\u5b58\u5728\u6b64\u9650\u5236\u662f\u56e0\u4e3a Jax \u8ddf\u8e2a\u7a0b\u5e8f\u4ee5\u5c1d\u8bd5\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u6784\u5efa\u9759\u6001\u8ba1\u7b97\u56fehood\uff0c\u7136\u540e\u5c1d\u8bd5\u5728\u8be5\u56fe\u4e0a\u8fdb\u884c\u5b9e\u9645\u8f6c\u6362\u3002\u8fd8\u6709\u5176\u4ed6\u7c7b\u578b\u7684\u6846\u67b6\u53ef\u4ee5\u505a\u7c7b\u4f3c\u7684\u4e8b\u60c5\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u53ef\u8f6c\u6362\u4e3a\u7eaf\u7b26\u53f7\u8bed\u8a00\u7684\u7b97\u6cd5\u96c6\u662f\u51c6\u9759\u6001\u7b97\u6cd5\u96c6\uff0c\u6240\u4ee5\u50cf Symbolics.jl \u8fd9\u6837\u7684\u4e1c\u897f\u5728\u5176\u7b97\u6cd5\u7684\u884c\u4e3a\u4e2d\u4e5f\u6709\u4e00\u79cd\u51c6\u9759\u6001\u8868\u73b0\u5f62\u5f0f\u3002\u4e5f\u662f\u51fa\u4e8e\u540c\u6837\u7684\u539f\u56e0\uff1a\u5728\u7b26\u53f7\u7b97\u6cd5\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u8bf8\u5982\u201cx\u201d\u548c\u201cy\u201d\u4e4b\u7c7b\u7684\u7b26\u53f7\u53d8\u91cf\uff0c\u7136\u540e\u901a\u8fc7\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u6613\u4ee5\u6784\u5efa\u201c2x^2 + 3y\u201d\u7684\u9759\u6001\u8ba1\u7b97\u56fe\uff0c\u7136\u540e\u60a8\u5bf9\u5176\u8fdb\u884c\u7b26\u53f7\u5904\u7406\u3002\u5728\u5e38\u89c1\u95ee\u9898\u4e2d\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u5f53\u51fd\u6570\u5230\u7b26\u53f7\u7684\u8f6c\u6362\u5931\u8d25\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u5982\u679c\u4f60\u770b\u4e00\u4e0b\u4f8b\u5b50\uff1a function factorial (x ) out = x while x &gt; 1 x -= 1 out *= x end out end @variables xfactorial (x ) \u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u662f\u56e0\u4e3a\u7b97\u6cd5\u4e0d\u80fd\u8868\u793a\u4e3a\u5355\u4e2a\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a\u9636\u4e58\u4e0d\u80fd\u5199\u4e3a\u56fa\u5b9a\u4e58\u6cd5\u6b21\u6570\uff0c\u56e0\u4e3a\u4e58\u6cd5\u6b21\u6570\u53d6\u51b3\u4e8e\u60a8\u5c1d\u8bd5\u8ba1\u7b97 x \u7684\u503c x\uff01\u4e3a\u4e86\uff01\u7b26\u53f7\u8bed\u8a00\u629b\u51fa\u7684\u9519\u8bef\u662f\u201cERROR: TypeError: non-boolean (Num) used in boolean context\u201d\uff0c\u8fd9\u662f\u8bf4\u5b83\u4e0d\u77e5\u9053\u5982\u4f55\u7b26\u53f7\u6269\u5c55\u201cwhile x &gt; 1\u201d\u6765\u8868\u793a\u5b83\u9759\u6001\u5730\u3002\u8fd9\u4e0d\u662f\u4e0d\u4e00\u5b9a\u201c\u53ef\u4fee\u590d\u201d\u7684\u4e1c\u897f\uff0c\u8fd9\u662f\u8be5\u7b97\u6cd5\u65e0\u6cd5\u7531\u56fa\u5b9a\u8ba1\u7b97\u8868\u793a\u5e76\u4e14\u5fc5\u987b\u9700\u8981\u6839\u636e\u8f93\u5165\u66f4\u6539\u8ba1\u7b97\u8fd9\u4e00\u4e8b\u5b9e\u7684\u57fa\u7840\u3002\n\u201c\u89e3\u51b3\u65b9\u6848\u201d\u662f\u901a\u8fc7\u201c@register factorial(x)\u201d\u4e3a\u56fe\u5f62\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u539f\u8bed\uff0c\u8fd9\u6837\u8fd9\u4e2a\u51fd\u6570\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u56fa\u5b9a\u8282\u70b9\uff0c\u4e0d\u4f1a\u5c1d\u8bd5\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\u3002\u8fd9\u4e0e\u5b9a\u4e49 Jax \u539f\u8bed\u6216 Tensorflow \u539f\u8bed\u7684\u6982\u5ff5\u76f8\u540c\uff0c\u5176\u4e2d\u7b97\u6cd5\u6839\u672c\u4e0d\u662f\u51c6\u9759\u6001\u7684\uff0c\u56e0\u6b64\u83b7\u5f97\u51c6\u9759\u6001\u8ba1\u7b97\u56fe\u7684\u65b9\u6cd5\u662f\u5c06\u52a8\u6001\u5757\u89c6\u4e3a\u51fd\u6570\u201cy = f (x)\u201d\u662f\u6ce8\u5b9a\u5b58\u5728\u7684\u3002\u5728\u7b26\u53f7\u8bed\u8a00\u548c\u673a\u5668\u5b66\u4e60\u6846\u67b6\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8981\u4f7f\u5176\u5145\u5206\u53d1\u6325\u4f5c\u7528\uff0c\u60a8\u8fd8\u9700\u8981\u5b9a\u4e49\u6240\u8ff0\u51fd\u6570\u7684\u5bfc\u6570\u3002\u6700\u540e\u4e00\u90e8\u5206\u662f\u6355\u83b7\u3002\u5982\u679c\u60a8\u518d\u770b\u4e00\u4e0b\u5176\u4e2d\u4e00\u4e9b\u5de5\u5177\u7684\u6587\u6863\u7684\u6df1\u5ea6\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230\u8bb8\u591a\u8868\u793a\u975e\u9759\u6001\u63a7\u5236\u6d41\u7684\u539f\u8bed\u90fd\u8d85\u51fa\u4e86\u5b8c\u5168\u5904\u7406\u7684\u9886\u57df\u3002\u5728\u6587\u6863\u4e2d\uff0c\u5b83\u6307\u51fa\u60a8\u53ef\u4ee5\u7528 lax.while_loop \u66ff\u6362 while \u5faa\u73af\uff0c\u4f46\u8fd9\u4e0d\u9002\u7528\u4e8e\u53cd\u5411\u6a21\u5f0f\u81ea\u52a8\u5fae\u5206\u3002\u539f\u56e0\u662f\u56e0\u4e3a\u5b83\u7684\u53cd\u5411\u6a21\u5f0f AD \u5b9e\u73b0\u5047\u8bbe\u5b58\u5728\u8fd9\u79cd\u51c6\u9759\u6001\u7b97\u6cd5\u5e76\u5c06\u5176\u7528\u4e8e\u4e24\u4e2a\u76ee\u7684\uff0c\u4e00\u662f\u7528\u4e8e\u751f\u6210\u53cd\u5411\u4f20\u9012\uff0c\u4e8c\u662f\u751f\u6210\u7b97\u6cd5\u7684 XLA\uff08\u201cTensorflow\u201d\uff09\u63cf\u8ff0\uff0c\u7136\u540e\u8fdb\u884c JIT \u7f16\u8bd1\u4f18\u5316\u3002 XLA \u9700\u8981\u9759\u6001\u8ba1\u7b97\u56fe\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u5b83\u4e5f\u4e0d\u4e00\u5b9a\u5b58\u5728\uff0c\u56e0\u6b64\u5b58\u5728\u57fa\u672c\u9650\u5236\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u5f53\u7136\u662f\u7528\u5b83\u81ea\u5df1\u7684\u5feb\u901f\u68af\u5ea6\u8ba1\u7b97\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684\u539f\u8bed\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u6d88\u5931\u4e86......\u6709\u673a\u5668\u5b66\u4e60\u6846\u67b6\u4e0d\u5047\u8bbe\u51c6\u9759\u6001\u4f46\u4e5f\u4f18\u5316\uff0c\u5927\u591a\u6570Julia \u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684 Diffractor.jl\u3001Zygote.jl \u548c Enzyme.jl\uff08\u6ce8\u610f PyTorch \u4e0d\u5047\u8bbe\u51c6\u9759\u6001\u8868\u793a\uff0c\u5c3d\u7ba1 TorchScript \u7684 JIT \u7f16\u8bd1\u4f1a\uff09\u3002\u8fd9\u8ba9\u6211\u601d\u8003\uff1a\u662f\u5426\u5b58\u5728\u771f\u6b63\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u8fd9\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u9650\u5236\uff1f\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u63d0\u51fa\u50cf\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u8fd9\u6837\u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f\u4e00\u4e2a\u56fa\u5b9a\u51fd\u6570\u5185\u6838\u8c03\u7528\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u5bfc\u6570\uff0c\u6216\u8005\u4e00\u4e2a\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff0c\u8fd9\u662f\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u5faa\u73af\u3002\u5982\u679c\u4f60\u60f3\u6253\u7834\u8fd9\u4e2a\u5047\u8bbe\uff0c\u4f60\u5fc5\u987b\u8fdb\u5165\u4e00\u4e2a\u57fa\u672c\u4e0a\u5173\u4e8e\u7b97\u6cd5\u7684\u7a7a\u95f4\uff0c\u5728\u90a3\u91cc\u4f60\u65e0\u6cd5\u77e5\u9053\u201c\u8ba1\u7b97\u91cf\u201d\uff0c\u76f4\u5230\u4f60\u77e5\u9053\u95ee\u9898\u4e2d\u7684\u7279\u5b9a\u503c\uff0c\u800c\u65b9\u7a0b\u6c42\u89e3\u5668\u5c31\u662f\u8fd9\u79cd\u5f62\u5f0f\u3002\u725b\u987f\u6cd5\u6536\u655b\u9700\u8981\u591a\u5c11\u6b65\uff1f\u81ea\u9002\u5e94 ODE \u6c42\u89e3\u5668\u9700\u8981\u591a\u5c11\u6b65\uff1f\u8fd9\u4e0d\u662f\u53ef\u4ee5\u5148\u9a8c\u56de\u7b54\u7684\u95ee\u9898\uff1a\u5b83\u4eec\u57fa\u672c\u4e0a\u662f\u9700\u8981\u4e86\u89e3\u7684\u95ee\u9898\uff1a\u56e0\u6b64\uff0c\u5728 Python \u6846\u67b6\u4e2d\u5de5\u4f5c\u7684\u4eba\u4eec\u4e00\u76f4\u5728\u5bfb\u627e\u5904\u7406\u65b9\u7a0b\u6c42\u89e3\u7684\u201c\u6b63\u786e\u201d\u65b9\u6cd5\uff08ODE \u6c42\u89e3\uff0c\u6c42\u6839 f( x)=0 \u7b49\uff09\u4f5c\u4e3a\u9ed1\u76d2\u8868\u793a\u3002\u5982\u679c\u4f60\u518d\u770b\u4e00\u4e0b\u795e\u7ecf\u5e38\u5fae\u5206\u65b9\u7a0b\u8bba\u6587\uff0c\u5b83\u63d0\u51fa\u7684\u4e00\u9879\u91cd\u8981\u5efa\u8bae\u662f\u5c06\u795e\u7ecf ODE \u5904\u7406\u4e3a\u4e00\u4e2a\u9ed1\u76d2\uff0c\u5176\u5bfc\u6570\u7531 ODE \u4f34\u968f\u5b9a\u4e49\u3002\u539f\u56e0\u5f53\u7136\u662f\u56e0\u4e3a\u81ea\u9002\u5e94 ODE \u6c42\u89e3\u5668\u5fc5\u987b\u8fed\u4ee3\u5230\u5bb9\u5dee\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u8bf8\u5982\u201cwhile t &lt;tend\u201d\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5f53\u524d\u8ba1\u7b97\u662f\u5426\u8ba1\u7b97\u5230\u5bb9\u5dee\u3002\u4f5c\u4e3a\u5728\u4ed6\u4eec\u5de5\u4f5c\u7684\u6846\u67b6\u4e2d\u6ca1\u6709\u4f18\u5316\u7684\u4e1c\u897f\uff0c\u8fd9\u662f\u4f7f\u7b97\u6cd5\u5de5\u4f5c\u6240\u5fc5\u9700\u7684\u3002\u4e0d\uff0c\u5c06\u6b64\u7c7b\u7b97\u6cd5\u89c6\u4e3a\u9ed1\u76d2\u5e76\u4e0d\u662f\u6839\u672c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u51e0\u5e74\u524d\u6211\u4eec\u6709\u4e00\u7bc7\u76f8\u5f53\u53d7\u6b22\u8fce\u7684\u8bba\u6587\uff0c\u8868\u660e\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b Julia AD \u5de5\u5177\u76f4\u63a5\u4f7f\u7528\u6b63\u5411\u548c\u53cd\u5411\u6a21\u5f0f\u81ea\u52a8\u5fae\u5206\u8bad\u7ec3\u795e\u7ecf\u968f\u673a\u5fae\u5206\u65b9\u7a0b\u3002\u539f\u56e0\u662f\u56e0\u4e3a\u8fd9\u4e9b AD \u5de5\u5177\uff08Zygote\u3001Diffractor\u3001Enzyme \u7b49\uff09\u7531\u4e8e\u5b83\u4eec\u5982\u4f55\u8fdb\u884c\u76f4\u63a5\u7684\u6e90\u5230\u6e90\u8f6c\u6362\u800c\u4e0d\u4e00\u5b9a\u91c7\u7528\u51c6\u9759\u6001\u5f62\u5f0f\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u76f4\u63a5\u533a\u5206\u81ea\u9002\u5e94\u6c42\u89e3\u5668\u5e76\u5410\u51fa\u6b63\u786e\u7684\u68af\u5ea6\u3002\u6240\u4ee5\u4f60\u4e0d\u4e00\u5b9a\u8981\u4ee5\u201c\u5b9a\u4e49\u4e00\u4e2a Tensorflow op\u201d\u7684\u98ce\u683c\u6765\u505a\uff0c\u4f46\u54ea\u4e2a\u66f4\u597d\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u201c\u66f4\u597d\u201d\u771f\u7684\u5f88\u96be\u5b9a\u4e49\uff0c\u56e0\u4e3a\u8fd9\u4e24\u79cd\u7b97\u6cd5\u4e0d\u4e00\u5b9a\u76f8\u540c\u5e76\u4e14\u53ef\u4ee5\u8ba1\u7b97\u4e0d\u540c\u7684\u503c\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u5f52\u7ed3\u4e3a\uff1a\u60a8\u662f\u8981\u5bf9\u65b9\u7a0b\u7684\u6c42\u89e3\u5668\u8fdb\u884c\u5fae\u5206\uff0c\u8fd8\u662f\u8981\u5bf9\u65b9\u7a0b\u8fdb\u884c\u5fae\u5206\u5e76\u5bf9\u5176\u5e94\u7528\u6c42\u89e3\u5668\uff1f\u524d\u8005\u76f8\u5f53\u4e8e\u7b97\u6cd5\u7684\u81ea\u52a8\u5fae\u5206\uff0c\u79f0\u4e3a\u79bb\u6563\u7075\u654f\u5ea6\u5206\u6790\u6216\u79bb\u6563\u7136\u540e\u4f18\u5316\u3002\u540e\u8005\u662f\u8fde\u7eed\u654f\u611f\u6027\u5206\u6790\u6216\u4f18\u5316\u7136\u540e\u79bb\u6563\u5316\u7684\u65b9\u6cd5\u3002\u673a\u5668\u5b66\u4e60\u5e76\u4e0d\u662f\u7b2c\u4e00\u4e2a\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u9886\u57df\uff0c\u6240\u4ee5\u5173\u4e8e\u901a\u7528\u5fae\u5206\u65b9\u7a0b\u548c\u79d1\u5b66\u673a\u5668\u5b66\u4e60\u751f\u6001\u7cfb\u7edf\u7684\u8bba\u6587\u6709\u4e00\u4e2a\u76f8\u5f53\u957f\u7684\u63cf\u8ff0\uff0c\u6211\u5c06\u5f15\u7528\uff1a\u201c\u201d\u201c\u4e4b\u524d\u7684\u7814\u7a76\u8868\u660e\u79bb\u6563\u4f34\u968f\u65b9\u6cd5\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u6bd4\u8fde\u7eed\u4f34\u968f\u66f4\u7a33\u5b9a [41, 37, 42, 43, 44, 45] \u800c\u8fde\u7eed\u4f34\u968f\u5df2\u88ab\u8bc1\u660e\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u66f4\u7a33\u5b9a [46, 43] \u5e76\u4e14\u53ef\u4ee5\u51cf\u5c11\u865a\u5047\u632f\u8361 [47, 48, 49] . \u79bb\u6563\u548c\u8fde\u7eed\u4f34\u968f\u65b9\u6cd5\u4e4b\u95f4\u7684\u8fd9\u79cd\u6743\u8861\u5df2\u7ecf\u5728\u4e00\u4e9b\u65b9\u7a0b\u4e2d\u88ab\u8bc1\u660e\u662f\u7a33\u5b9a\u6027\u548c\u8ba1\u7b97\u6548\u7387\u4e4b\u95f4\u7684\u6743\u8861 [50, 51, 52, 53, 54, 55, 56, 57, 58]\u3002\u5fc5\u987b\u5c0f\u5fc3\u88ab\u89c6\u4e3a\u4f34\u968f\u65b9\u6cd5\u7684\u7a33\u5b9a\u6027\u53ef\u80fd\u53d6\u51b3\u4e8e\u6240\u9009\u7684\u79bb\u6563\u5316\u65b9\u6cd5 [59, 60, 61, 62, 63]\uff0c\u6211\u4eec\u7684\u8f6f\u4ef6\u8d21\u732e\u5e2e\u52a9\u7814\u7a76\u4eba\u5458\u5728\u6240\u6709\u8fd9\u4e9b\u4f18\u5316\u65b9\u6cd5\u4e4b\u95f4\u5207\u6362\uff0c\u5e76\u7ed3\u5408\u6570\u767e\u4e2a\u5fae\u5206\u65b9\u7a0b\u6c42\u89e3er \u65b9\u6cd5\u53ea\u9700\u4e00\u884c\u4ee3\u7801\u66f4\u6539\u3002 &quot;&quot;&quot;\n\u6216\u8005\uff0ctl; dr\uff1a\u6709\u5927\u91cf\u5148\u524d\u7684\u7814\u7a76\u8868\u660e\uff0c\u8fde\u7eed\u4f34\u968f\u8bcd\u4e0d\u5982\u79bb\u6563\u4f34\u968f\u8bcd\u7a33\u5b9a\uff0c\u4f46\u5b83\u4eec\u53ef\u4ee5\u66f4\u5feb\u3002\u6211\u4eec\u6700\u8fd1\u8fdb\u884c\u4e86\u8ddf\u8fdb\uff0c\u8868\u660e\u8fd9\u4e9b\u8bf4\u6cd5\u5728\u73b0\u4ee3\u8f6f\u4ef6\u7684\u73b0\u4ee3\u95ee\u9898\u4e0a\u662f\u6b63\u786e\u7684\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u7bc7\u5173\u4e8e\u521a\u6027\u795e\u7ecf ODE \u7684\u8bba\u6587\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u5728\u591a\u5c3a\u5ea6\u6570\u636e\u4e0a\u8bad\u7ec3\u65f6\u79bb\u6563\u4f34\u968f\u6bd4\u8fde\u7eed\u4f34\u968f\u66f4\u7a33\u5b9a\uff0c\u4f46\u6211\u4eec\u6700\u8fd1\u8fd8\u8868\u660e\uff0c\u8fde\u7eed\u4f34\u968f\u5728\u68af\u5ea6\u8ba1\u7b97\u65b9\u9762\u6bd4\uff08\u67d0\u4e9b\uff09\u5f53\u524d\u7528\u4e8e\u79bb\u6563\u4f34\u968f\u7684 AD \u6280\u672f\u8981\u5feb\u5f97\u591a\u3002\u597d\u5427\uff0c\u5982\u679c\u60a8\u6b63\u5728\u5904\u7406\u8fd9\u4e9b\u786c\u5fae\u5206\u65b9\u7a0b\u3001\u5fae\u5206\u504f\u5fae\u5206\u65b9\u7a0b\u7b49\uff0c\u90a3\u4e48\u4f7f\u7528\u79bb\u6563\u4f34\u968f\u6280\u672f\u786e\u5b9e\u6709\u597d\u5904\uff0c\u8fd9\u5728 80 \u5e74\u4ee3\u5728\u63a7\u5236\u7406\u8bba\u9886\u57df\u5c31\u5df2\u4e3a\u4eba\u6240\u77e5\u3002\u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u662f\u4e00\u79cd\u6d17\u793c\uff0c\u56e0\u6b64\u5c1a\u4e0d\u6e05\u695a\u533a\u5206\u6b64\u7c7b\u7b97\u6cd5\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u662f\u5426\u66f4\u597d\uff0c\u5bf9\u5417\uff1f\u8fd9\u73b0\u5728\u8ba9\u6211\u4eec\u4e86\u89e3\u6700\u8fd1\u7684 ICML \u8bba\u6587\u5982\u4f55\u9002\u5e94\u8fd9\u79cd\u53d9\u8ff0\u3002\u662f\u5426\u5b58\u5728\u771f\u6b63\u5bf9\u6807\u51c6\u673a\u5668\u5b66\u4e60\u6709\u7528\u7684\u975e\u51c6\u9759\u6001\u7b97\u6cd5\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u4f46\u662f\u5982\u4f55\u5230\u8fbe\u90a3\u91cc\u9700\u8981\u4e00\u4e9b\u5de7\u5999\u7684\u6280\u5de7\u3002\u9996\u5148\uff0c\u8bbe\u7f6e\u3002\u795e\u7ecf ODE \u53ef\u80fd\u662f\u4e00\u79cd\u6709\u8da3\u7684\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f7f\u7528\u81ea\u9002\u5e94 ODE \u6c42\u89e3\u5668\u4ece\u672c\u8d28\u4e0a\u4e3a\u60a8\u9009\u62e9\u5c42\u6570\uff0c\u56e0\u6b64\u5b83\u5c31\u50cf\u4e00\u4e2a\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff08\u6216\u8005\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u50cf\u4e00\u4e2a\u6b8b\u5dee\u795e\u7ecf\u7f51\u7edc\uff09\u81ea\u52a8\u627e\u5230\u201c\u6b63\u786e\u201d\u5c42\u6570\uff0c\u5176\u4e2d\u5c42\u6570\u662f ODE \u6c42\u89e3\u5668\u51b3\u5b9a\u91c7\u53d6\u7684\u6b65\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7528\u4e8e\u56fe\u50cf\u5904\u7406\u7684\u795e\u7ecf ODE \u662f\u4e00\u79cd\u81ea\u52a8\u8fdb\u884c\u8d85\u53c2\u6570\u4f18\u5316\u7684\u7b97\u6cd5\u3002\u6574\u6d01\u7684\uff01\u4f46\u662f\u2026\u2026\u201c\u6b63\u786e\u201d\u7684\u5c42\u6570\u662f\u591a\u5c11\uff1f\u5bf9\u4e8e\u8d85\u53c2\u6570\u4f18\u5316\uff0c\u60a8\u4f1a\u5047\u8bbe\u8fd9\u5c06\u662f\u201c\u51c6\u786e\u9884\u6d4b\u7684\u6700\u5c11\u5c42\u6570\u201d\u3002\u4f46\u662f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u795e\u7ecf ODE \u4e0d\u4f1a\u4e3a\u60a8\u63d0\u4f9b\u90a3\u4e48\u591a\u5c42\uff1a\u5b83\u4eec\u4f1a\u7ed9\u60a8\u4efb\u4f55\u611f\u89c9\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4f60\u770b\u4e00\u4e0b\u539f\u59cb\u7684\u795e\u7ecf ODE \u8bba\u6587\uff0c\u968f\u7740\u795e\u7ecf ODE \u8bad\u7ec3\u5b83\u4e0d\u65ad\u589e\u52a0\u5b83\u4f7f\u7528\u7684\u5c42\u6570\uff1a\u90a3\u4e48\u6709\u6ca1\u6709\u529e\u6cd5\u6539\u53d8\u795e\u7ecf ODE \u4ee5\u4f7f\u5176\u5c06\u201c\u6b63\u786e\u7684\u5c42\u6570\u201d\u5b9a\u4e49\u4e3a\u201c\u6700\u5c11\u7684\u5c42\u6570\u201d\uff1f\u5728\u5b66\u4e60\u6613\u4e8e\u6c42\u89e3\u7684\u5fae\u5206\u65b9\u7a0b\u7684\u5de5\u4f5c\u4e2d\uff0c\u4ed6\u4eec\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002\u4ed6\u4eec\u662f\u5982\u4f55\u505a\u5230\u7684\uff0c\u4ed6\u4eec\u6b63\u5219\u5316\u4e86\u795e\u7ecf ODE \u7684\u8bad\u7ec3\u8fc7\u7a0b\u3002\u4ed6\u4eec\u67e5\u770b\u4e86\u89e3\u51b3\u65b9\u6848\u5e76\u6307\u51fa\uff0c\u53d1\u751f\u66f4\u591a\u53d8\u5316\u7684 ODE \u5fc5\u7136\u66f4\u96be\u6c42\u89e3\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u8868\u793a\u201c\u4f7f\u9ad8\u9636\u5bfc\u6570\u9879\u5c3d\u53ef\u80fd\u5c0f\u201d\u7684\u6b63\u5219\u5316\u9879\u5c06\u8bad\u7ec3\u8fc7\u7a0b\u8f6c\u6362\u4e3a\u8d85\u53c2\u6570\u4f18\u5316.\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\u662f\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e2a\u60f3\u6cd5\u3002\u90a3\u662f\u600e\u4e48\u505a\u7684\uff1f\u597d\u5427\uff0c\u5982\u679c\u60a8\u5fc5\u987b\u5c06\u7b97\u6cd5\u89c6\u4e3a\u9ed1\u76d2\uff0c\u5219\u9700\u8981\u5b9a\u4e49\u4e00\u4e9b\u9ed1\u76d2\u65b9\u6cd5\u6765\u5b9a\u4e49\u9ad8\u9636\u5bfc\u6570\uff0c\u4ece\u800c\u5bfc\u81f4 Jesse \u975e\u5e38\u9177\u7684\u6cf0\u52d2\u6a21\u5f0f\u81ea\u52a8\u5fae\u5206\u516c\u5f0f\u3002\u4f46\u65e0\u8bba\u4f60\u600e\u4e48\u8bf4\uff0c\u8fd9\u90fd\u5c06\u662f\u4e00\u4e2a\u6602\u8d35\u7684\u8ba1\u7b97\u5bf9\u8c61\uff1a\u8ba1\u7b97\u68af\u5ea6\u6bd4\u524d\u5411\u4f20\u9012\u66f4\u6602\u8d35\uff0c\u4e8c\u9636\u5bfc\u6570\u6bd4\u68af\u5ea6\u66f4\u8d35\uff0c\u4e09\u9636\u7b49\u7b49\uff0c\u6240\u4ee5\u4e00\u4e2a\u9700\u8981\u516d\u9636\u5bfc\u6570\u7684\u7b97\u6cd5\u8bad\u7ec3\u4f1a\u5f88\u8ba8\u538c\u3002\u901a\u8fc7\u4e00\u4e9b\u975e\u5e38\u82f1\u52c7\u7684\u5de5\u4f5c\uff0c\u4ed6\u4eec\u5f97\u5230\u4e86\u8fd9\u4e2a\u9ed1\u76d2\u64cd\u4f5c\u7684\u516c\u5f0f\uff0c\u5b83\u9700\u8981\u4e24\u500d\u7684\u65f6\u95f4\u6765\u8bad\u7ec3\uff0c\u4f46\u6210\u529f\u5730\u5b8c\u6210\u4e86\u8d85\u53c2\u6570\u4f18\u5316\u3002\u6709\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7\u795e\u7ecf ODE \u8bad\u7ec3\u66f4\u5feb\u5730\u8fdb\u884c\u81ea\u52a8\u8d85\u53c2\u6570\u4f18\u5316\uff1f\u662f\u7684\uff0c\u6211\u4eec\u7684\u8bba\u6587\u4e0d\u4ec5\u4f7f\u5b83\u4eec\u7684\u8bad\u7ec3\u901f\u5ea6\u6bd4\u5176\u4ed6\u65b9\u6cd5\u5feb\uff0c\u800c\u4e14\u6bd4\u666e\u901a\u795e\u7ecf ODE \u8bad\u7ec3\u901f\u5ea6\u66f4\u5feb\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u5c42\u8d85\u53c2\u6570\u4f18\u5316\u4e0d\u90a3\u4e48\u514d\u8d39\uff1a\u6211\u4eec\u53ef\u4ee5\u4f7f\u5b83\u6bd4\u4e0d\u8fdb\u884c\u4f18\u5316\u66f4\u4fbf\u5b9c\uff01\u4f46\u662f\u5982\u4f55\uff1f\u8bc0\u7a8d\u662f\u6253\u5f00\u9ed1\u5323\u5b50\u3002\u8ba9\u6211\u5411\u60a8\u5c55\u793a\u81ea\u9002\u5e94 ODE \u6c42\u89e3\u5668\u7684\u6b65\u9aa4\u662f\u4ec0\u4e48\u6837\u7684\uff1a\u8bf7\u6ce8\u610f\uff0c\u81ea\u9002\u5e94 ODE \u6c42\u89e3\u5668\u901a\u8fc7\u4f7f\u7528\u8bef\u5dee\u4f30\u8ba1\u6765\u9009\u62e9\u65f6\u95f4\u6b65\u957f\u662f\u5426\u5408\u9002\u3002 ODE \u7b97\u6cd5\u7684\u5b9e\u9645\u6784\u9020\u662f\u4e3a\u4e86\u514d\u8d39\u8ba1\u7b97\u8bef\u5dee\u4f30\u8ba1\u503c\uff0c\u5373\u201c\u8fd9\u4e2a ODE \u6c42\u89e3\u7684\u96be\u5ea6\u201d\u7684\u4f30\u8ba1\u503c\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u81ea\u7531\u8bef\u5dee\u4f30\u8ba1\u4f5c\u4e3a\u6211\u4eec\u7684\u6b63\u5219\u5316\u6280\u672f\u4f1a\u600e\u6837\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8bad\u7ec3\u901f\u5ea6\u6bd4\u4ee5\u524d\u5feb 10 \u500d\uff0c\u540c\u65f6\u7c7b\u4f3c\u5730\u81ea\u52a8\u6267\u884c\u8d85\u53c2\u6570\u4f18\u5316\u3002\n\u8bf7\u6ce8\u610f\u6211\u4eec\u7ed3\u675f\u7684\u5730\u65b9\uff1a\u7ed3\u679c\u7b97\u6cd5\u4e0d\u4e00\u5b9a\u662f\u51c6\u9759\u6001\u7684\u3002\u8be5\u8bef\u5dee\u4f30\u8ba1\u662f\u901a\u8fc7\u81ea\u9002\u5e94 ODE \u6c42\u89e3\u5668\u7684\u5b9e\u9645\u6b65\u9aa4\u8ba1\u7b97\u7684\uff1a\u8981\u8ba1\u7b97\u8be5\u8bef\u5dee\u4f30\u8ba1\uff0c\u60a8\u5fc5\u987b\u6267\u884c\u4e0e ODE \u6c42\u89e3\u5668\u76f8\u540c\u7684\u8ba1\u7b97\u548c\u76f8\u540c\u7684 while \u5faa\u73af\u3002\u5728\u6b64\u7b97\u6cd5\u4e2d\uff0c\u60a8\u65e0\u6cd5\u907f\u514d\u76f4\u63a5\u5bf9 ODE \u6c42\u89e3\u5668\u8fdb\u884c\u5fae\u5206\uff0c\u56e0\u4e3a ODE \u6c42\u89e3\u5668\u7684\u5185\u90e8\u8ba1\u7b97\u90e8\u5206\u73b0\u5728\u662f\u6b63\u5219\u5316\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4ece\u6839\u672c\u4e0a\u6ca1\u6709\u88ab\u9700\u8981\u51c6\u9759\u6001\u8ba1\u7b97\u56fe\uff08Jax\u3001Tensorflow \u7b49\uff09\u7684\u65b9\u6cd5\u4f18\u5316\uff0c\u5e76\u4e14\u8fd9\u4f7f\u5f97\u8d85\u53c2\u6570\u4f18\u5316\u6bd4\u4e0d\u8fdb\u884c\u8d85\u53c2\u6570\u4f18\u5316\u66f4\u4fbf\u5b9c\uff0c\u56e0\u4e3a\u6b63\u5219\u5316\u5668\u662f\u514d\u8d39\u8ba1\u7b97\u7684\u3002\u6211\u53ea\u662f\u89c9\u5f97\u8fd9\u4e2a\u7ed3\u679c\u592a\u9177\u4e86\uff01\u6240\u4ee5\u662f\u7684\uff0c\u8fd9\u7bc7\u8bba\u6587\u662f\u4e00\u7bc7\u5173\u4e8e\u5982\u4f55\u4f7f\u7528\u795e\u7ecf ODE \u7684\u6280\u5de7\u514d\u8d39\u8fdb\u884c\u8d85\u53c2\u6570\u4f18\u5316\u7684\u673a\u5668\u5b66\u4e60\u8bba\u6587\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u6240\u5904\u7684\u4e00\u822c\u8f6f\u4ef6\u4e0a\u4e0b\u6587\u7a81\u51fa\u4e86\u8bba\u6587\u7684\u771f\u5b9e\u53d1\u73b0\u3002\u8fd9\u662f\u6211\u6240\u77e5\u9053\u7684\u7b2c\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5b83\u6709\u660e\u786e\u7684\u52a8\u673a\u7528\u4e8e\u73b0\u4ee3\u673a\u5668\u5b66\u4e60\uff0c\u800c\u4e14\uff0cJax \u548c Tensorflow \u7b49\u5e38\u89c1\u673a\u5668\u5b66\u4e60\u6846\u67b6\u65e0\u6cd5\u5904\u7406\u5b83\u4eec\u662f\u6709\u6839\u672c\u539f\u56e0\u7684\u6700\u4f73\u3002\u5373\u4f7f\u662f PyTorch \u7684 TorchScript\uff0c\u7531\u4e8e\u5176\u7f16\u8bd1\u8fc7\u7a0b\u7684\u5047\u8bbe\uff0c\u4ece\u6839\u672c\u4e0a\u4e5f\u4e0d\u4f1a\u5728\u8be5\u7b97\u6cd5\u4e0a\u5de5\u4f5c\u3002\u8fd9\u4e9b\u5047\u8bbe\u662f\u660e\u667a\u5730\u9009\u62e9\u7684\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u7b97\u6cd5\u90fd\u53ef\u4ee5\u6ee1\u8db3\u5b83\u4eec\uff0c\u4f46\u8fd9\u4e2a\u7b97\u6cd5\u4e0d\u80fd\u3002\u8fd9\u662f\u5426\u610f\u5473\u7740\u673a\u5668\u5b66\u4e60\u5728\u7b97\u6cd5\u4e0a\u505c\u6ede\u4e0d\u524d\uff1f\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u5b8c\u5168\u76f8\u4fe1\u5728\u4e0d\u4f18\u5316\u6b64\u7b97\u6cd5\u7684\u5de5\u5177\u96c6\u4e2d\u5de5\u4f5c\u7684\u4eba\u6c38\u8fdc\u4e0d\u4f1a\u627e\u5230\u5b83\uff0c\u8fd9\u8ba9\u6211\u975e\u5e38\u53d1\u4eba\u6df1\u7701\u3002\u8fd8\u6709\u54ea\u4e9b\u7b97\u6cd5\u6bd4\u6211\u4eec\u5f53\u524d\u7684\u65b9\u6cd5\u66f4\u597d\uff0c\u4f46\u4ec5\u56e0\u4e3a\u5f53\u524d\u7684\u673a\u5668\u5b66\u4e60\u6846\u67b6\u800c\u66f4\u5dee\uff1f\u6211\u8feb\u4e0d\u53ca\u5f85\u5730\u7b49\u5230 Diffractor.jl \u7684\u53d1\u5e03\u624d\u5f00\u59cb\u6df1\u5165\u63a2\u8ba8\u8fd9\u4e2a\u95ee\u9898\u3002", "note_en": "In some previous blog posts we described in details how  one can generalize automatic differentiation to give automatically stability enhancements and all sorts of other niceties by incorporating graph transformations into code generation. However, one of the things which we didn&#39;t go into too much is the limitation of these types of algorithms. This limitation is what we have termed &#34;quasi-static&#34; which is the property that an algorithm can be reinterpreted as some static algorithm. It turns out that for very fundamental reasons, this is the same limitation that some major machine learning frameworks impose on the code that they can fully optimize, such as Jax or Tensorflow. This led us to the question: are there algorithms which are not optimizable within this mindset, and why?  The answer is now published at ICML 2021, so lets dig into this higher level concept.\n  First of all, lets come up with a concrete idea of what a quasi-static algorithm is. It&#39;s the space of algorithms which in some way can be re-expressed as a static algorithm. Think of a &#34;static algorithm&#34; as one which has a simple mathematical description that does not require a full computer description, i.e. no loops, rewriting to memory, etc. As an example, let&#39;s take a look at an example from  the Jax documentation. The following is something that the Jax JIT works on:\n  Notice that it&#39;s represented by something with control flow, i.e. it is code represented with a loop, but the  but the loop is not necessary We can also understand this method as 2*2*2*x or 8*x. The demonstrated example of where the JIT will fail by default is:\n @jit def f (x ):  if x  &lt;  3:  return  3. * x **  2  else:  return - 4 * x\u00a0 # This will fail! try: f ( 2 ) except  Exception  as e:  print ( &#34;Exception {}&#34;. format (e ) )\n In this case, we can see that there&#39;s essentially two compute graphs split at x&lt;3, and so as stated this does not have a single mathematical statement that describes the computation. You can get around this by doing lax.cond(x &lt; 3, 3. * x ** 2, -4 * x), but notice this is a fundamentally different computation: the lax.cond form always computes both sides of the if statement before choosing which one to carry forward, while the true if statement changes its computation based on the conditional. The reason why the lax.cond form thus works with Jax&#39;s JIT compilation system is thus because it is quasi-static. The computations that will occur are fixed, even if the result is not, while the original if statement will change what is computed based on the input values.This limitation exists because Jax traces through a program to attempt to build the static compute graph under the hood, and it then attempts to do its actual transformations on this graph. Are there other kinds of frameworks that do something similar? It also turns out that the set of algorithms which are transformable into purely symbolic languages is the set of quasi-static algorithms, so something like  Symbolics.jl also has a form of quasi-staticness manifest in the behaviors of its algorithms. And it&#39;s for the same reason: in symbolic algorithms you define symbolic variables like &#34;x&#34; and &#34;y&#34;, and then trade through a program to build a static compute graph for &#34;2x^2 + 3y&#34; which you then treat symbolically. In the  frequently asked questions, there is a question for what happens when a conversion of a function to symbolic fails. If you take a look at the example:\n function factorial (x ) out = x  while x  &gt;  1 x -=  1 out  *= x  end out end\u00a0@variables xfactorial (x )\n You can see that the reason for this is because the algorithm is not representable as a single mathematical expression: the factorial cannot be written as a fixed number of multiplications because the number of multiplications is dependent on that value x you&#39;re trying to compute x! for! The error that the symbolic language throws is &#34;ERROR: TypeError: non-boolean (Num) used in boolean context&#34;, which is saying that it does not know how to symbolically expand out &#34;while x &gt; 1&#34; to be able to represent it statically. And this is not something that is not necessarily &#34;fixable&#34;, it&#39;s fundamental to the fact that this algorithm is not able to be represented by a fixed computation and necessarily needs to change the computation based on the input.\n  The &#34;solution&#34; is to define a new primitive to the graph via &#34;@register factorial(x)&#34;, so that this function itself is a fixed node that does not try to be symbolically expanded. This is the same concept as defining a Jax primitive or a Tensorflow primitive, where an algorithm simply is not quasi-static and so the way to get a quasi-static compute graph is to treat the dynamic block just as a function &#34;y = f(x)&#34; that is preordained to exist. In the context of both symbolic languages and machine learning frameworks, for this to work in full you also need to define derivatives of said function. That last part is the catch. If you take another look at the  depths of the documentation of some of these tools, you&#39;ll notice that many of these primitives representing non-static control flow fall outside of the realm that is fully handled.\n  Right there in the documentation it notes that you can replace a while loop with lax.while_loop, but that is not amenable to reverse-mode automatic differentiation. The reason is because its reverse-mode AD implementation assumes that such a quasi-static algorithm exists and uses this for two purposes, one for generating the backpass but secondly for generating the XLA (&#34;Tensorflow&#34;) description of the algorithm to then JIT compile optimize. XLA wants the static compute graph, which again, does not necessarily exist for this case, hence the fundamental limitation. The way to get around this of course is then to define your own primitive with its own fast gradient calculation and this problem goes away...\n   There are machine learning frameworks which do not make the assumption of quasi-staticness but also optimize, and most of these things like Diffractor.jl, Zygote.jl, and Enzyme.jl in the Julia programming language (note PyTorch does not assume quasi-static representations, though TorchScript&#39;s JIT compilation does). This got me thinking: are there actual machine learning algorithms for which this is a real limitation? This is a good question, because if you pull up your standard methods like convolutional neural networks, that&#39;s a fixed function kernel call with a good derivative defined, or a recurrent neural network, that&#39;s a fixed size for loop. If you want to break this assumption, you have to go to a space that is fundamentally about an algorithm where you cannot know &#34;the amount of computation&#34; until you know the specific values in the problem, and equation solvers are something of this form.\n How many steps does it take for Newton&#39;s method to converge? How many steps does an adaptive ODE solver take? This is not questions that can be answered a priori: they are fundamentally questions which require knowing:\n  For this reason, people who work in Python frameworks have been looking for the &#34;right&#34; way to treat equation solving (ODE solving, finding roots f(x)=0, etc.) as a blackbox representation. If you take another look at the  Neural Ordinary Differential Equations paper, one of the big things it was proposing was the treatment of neural ODEs as a blackbox with a derivative defined by the ODE adjoint. The reason of course is because adaptive ODE solvers necessarily iterate to tolerance, so there is necessarily something like &#34;while t &lt; tend&#34; which is dependent on whether the current computations are computed to tolerance. As something not optimized in the frameworks they were working in, this is something that was required to make the algorithm work.  No it&#39;s not fundamental to have to treat such algorithms as a blackbox. In fact, we  had a rather popular paper a few years ago showing that neural stochastic differential equations can be trained with forward and reverse mode automatic differentiation directly via some Julia AD tools. The reason is because these AD tools (Zygote, Diffractor, Enzyme, etc.) do not necessarily assume quasi-static forms due to how they do direct source-to-source transformations, and so they can differentiate the adaptive solvers directly and spit out the correct gradients. So you do not necessarily have to do it in the &#34;define a Tensorflow op&#34; style, but which is better?\n It turns out that &#34;better&#34; can be really hard to define because the two algorithms are not necessarily the same and can compute different values. You can boil this down to: do you want to differentiate the solver of the equation, or do you want to differentiate the equation and apply a solver to that? The former, which is equivalent to automatic differentiation of the algorithm, is known as discrete sensitivity analysis or discrete-then-optimize. The latter is continuous sensitivity analysis or optimize-then-discretize approaches. Machine learning is not the first field to come up against this problem, so the paper on  universal differential equations and the scientific machine learning ecosystem has a rather long description that I will quote:\n &#34;&#34;&#34; Previous research has shown that the discrete adjoint approach is more stable than continuous adjoints in some cases [41, 37, 42, 43, 44, 45] while continuous adjoints have been demonstrated to be more stable in others [46, 43] and can reduce spurious oscillations [47, 48, 49]. This trade-off between discrete and continuous adjoint approaches has been demonstrated on some equations as a trade-off between stability and computational efficiency [50, 51, 52, 53, 54, 55, 56, 57, 58]. Care has to be taken as the stability of an adjoint approach can be dependent on the chosen discretization method [59, 60, 61, 62, 63], and our software contribution helps researchers switch between all of these optimization approaches in combination with hundreds of differential equation solver methods with a single line of code change. &#34;&#34;&#34;\n Or, tl;dr: there&#39;s tons of prior research which generally shows that continuous adjoints are less stable than discrete adjoints, but they can be faster. We have done recent follow-ups which show these claims are true on modern problems with modern software. Specifically,  this paper on stiff neural ODEs shows why discrete adjoints are more stable that continuous adjoints when training on multiscale data, but  we also recently showed continuous adjoints can be much faster at gradient computations than (some) current AD techniques for discrete adjoints.\n So okay, there&#39;s a true benefit to using discrete adjoint techniques if you&#39;re handling these hard stiff differential equations, differentiating partial differential equations, etc. and this has been known since the 80&#39;s in the field of control theory. But other than that, it&#39;s a wash, and so it&#39;s not clear whether differentiating such algorithms is better in machine learning, right?\n  This now brings us to how  the recent ICML paper fits into this narrative. Is there a non-quasi-static algorithm that is truly useful for standard machine learning? The answer turns out to be yes, but how to get there requires a few slick tricks. First, the setup. Neural ODEs can be an interesting method for machine learning because they use an adaptive ODE solver to essentially choose the number of layers for you, so it&#39;s like a recurrent neural network (or more specifically, like a residual neural network) that automatically finds the &#34;correct&#34; number of layers, where the number of layers is the number of steps the ODE solver decides to take. In other words, Neural ODEs for image processing are an algorithm that automatically do hyperparameter optimization. Neat!\n But... what is the &#34;correct&#34; number of layers? For hyperparameter optimization you&#39;d assume that would be &#34;the least number of layers to make predictions accurately&#34;. However, by default neural ODEs will not give you that number of layers: they will give you whatever they feel like. In fact, if you look at the original neural ODE paper, as the neural ODE trains it keeps increasing the number of layers it uses:\n  So is there a way to change the neural ODE to make it define &#34;correct number of layers&#34; as &#34;least number of layers&#34;? In the work  Learning Differential Equations that are Easy to Solve they did just that. How they did it is that they regularized the training process of the neural ODE. They looked at the solution and noted that ODEs which have more changes going on are necessarily harder to solve, so you can transform the training process into hyperparameter optimization by adding a regularization term that says &#34;make the higher order derivative terms as small as possible&#34;. The rest of the paper is how to enact this idea. How was that done? Well, if you have to treat the algorithm as a blackbox, you need to define some blackbox way to defining high order derivatives which then leads to Jesse&#39;s pretty cool formulation of Taylor-mode automatic differentiation. But no matter how you put it, that&#39;s going to be an expensive object to compute: computing the gradient is more expensive than the forward pass, and the second derivative moreso than the gradient, and the third etc, so an algorithm that wants 6th derivatives is going to be nasty to train. With some pretty heroic work they got a formulation of this blackbox operation which takes twice as long to train but successfully does the hyperparmeter optimization.\n   Is there a way to make automatic hyperparameter optimization via neural ODEs train faster? Yes,  and our paper makes them not only train faster than that other method, but makes it train faster than the vanilla neural ODE. We can make layer hyperparameter optimization less than free: we can make it cheaper than not doing the optimization! But how? The trick is to open the blackbox. Let me show you what a step of the adaptive ODE solver looks like:\n  Notice that the adaptive ODE solver chooses whether a time step is appropriate by using an error estimate.  The ODE algorithm is actually constructed so that the error estimate, the estimate of &#34;how hard this ODE is to solve&#34;, is computed for free. What if we use this free error estimate as our regularization technique? It turns out that is 10x faster to train than before, while similarly automatically performing hyperparameter optimization.\n  Notice where we have ended up: the resulting algorithm is necessarily not quasi-static. This error estimate is computed by the actual steps of the adaptive ODE solver: to compute this error estimate, you have to do the same computations, the same while loop, as the ODE solver. In this algorithm, you cannot avoid directly differentiating the ODE solver because pieces of the ODE solver&#39;s internal calculations are now part of the regularization. This is something that is fundamentally not optimized by methods that require quasi-static compute graphs (Jax, Tensorflow, etc.), and it is something that makes hyperparameter optimization cheaper than not doing hyperparameter optimization since the regularizer is computed for free. I just find this result so cool!\n  So yes, the paper is a machine learning paper on how to do hyperparameter optimization for free using a trick on neural ODEs, but I think the general software context this sits in highlights the true finding of the paper. This is the first algorithm that I know of where there is both a clear incentive for it to be used in modern machine learning, but also, there is a fundamental reason why common machine learning frameworks like Jax and Tensorflow will not be able to treat them optimally. Even PyTorch&#39;s TorchScript will fundamentally, due to the assumptions of its compilation process, not work on this algorithm. Those assumptions were smartly chosen because most algorithms can satisfy them, but this one cannot. Does this mean  machine learning is algorithmically stuck in a rut? Possibly, because I thoroughly believe that someone working within a toolset that does not optimize this algorithm would have never found it, which makes it very thought-provoking to me.\n What other algorithms are out there which are simply better than our current approaches but are worse only because of the current machine learning frameworks? I cannot wait until Diffractor.jl&#39;s release to start probing this question deeper.", "posttime": "2021-07-24 07:00:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,algorithms,pytorch,optimized", "title": "\u672a\u7ecf Jax\u3001PyTorch \u6216 TensorFlow \u4f18\u5316\u7684\u6709\u7528\u7b97\u6cd5", "title_en": "Useful algorithms that are not optimized by Jax, PyTorch, or TensorFlow", "transed": 1, "url": "https://www.stochasticlifestyle.com/useful-algorithms-that-are-not-optimized-by-jax-pytorch-or-tensorflow/", "via": "", "real_tags": ["\u7b97\u6cd5", "pytorch", "optimized"]}]