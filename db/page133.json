[{"category": "", "categoryclass": "", "imagename": "ad0300951505e2513230092f49b390e6.jpg", "infoid": 1072352, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u628a\u4f60\u7684\u624b\u673a\u6536\u8d77\u6765\u201d\u5df2\u7ecf\u6210\u4e3a\u4e00\u4e2a\u7ecf\u5e38\u88ab\u5ffd\u89c6\u7684\u5e38\u89c1\u77ed\u8bed\u3002\u5c3d\u7ba1\u60f3\u6d3b\u5728\u5f53\u4e0b\uff0c\u4f46\u6211\u4eec\u5f80\u5f80\u4f1a\u5728\u529b\u6240\u80fd\u53ca\u7684\u8303\u56f4\u5185\u505a\u76f8\u53cd\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u5728\u8282\u65e5\u7684\u5bb6\u5ead\u805a\u9910\u4e2d\u62ff\u51fa\u624b\u673a\u62cd\u7167\uff0c\u5728\u7ea6\u4f1a\u4e2d\u9014\u6216\u770b\u7535\u5f71\u65f6\u53d1\u9001\u77ed\u4fe1\u6216\u66f4\u65b0\u6211\u4eec\u7684\u793e\u4ea4\u5a92\u4f53\u8d44\u6599\u3002\u540c\u65f6\uff0c\u6211\u4eec\u7ecf\u5e38\u88ab\u7535\u5b50\u90ae\u4ef6\u6216\u7535\u8bdd\u901a\u77e5\u88ab\u52a8\u5730\u6253\u65ad\u3002\u663e\u7136\uff0c\u4e0e\u6211\u4eec\u7684\u667a\u80fd\u624b\u673a\u4e92\u52a8\u4f1a\u5f71\u54cd\u6211\u4eec\u7684\u4f53\u9a8c\u3002\u4f46\u662f\uff0c\u5373\u4f7f\u6211\u4eec\u4e0d\u4e0e\u667a\u80fd\u624b\u673a\u4e92\u52a8\u2014\u2014\u5f53\u5b83\u4eec\u5c31\u5728\u9644\u8fd1\u65f6\uff0c\u6211\u4eec\u7684\u667a\u80fd\u624b\u673a\u4f1a\u5f71\u54cd\u6211\u4eec\u5417\uff1f\u5728\u6700\u8fd1\u7684\u7814\u7a76\u4e2d\uff0c\u6211\u4eec\u8c03\u67e5\u4e86\u4ec5\u5728\u9644\u8fd1\u62e5\u6709\u81ea\u5df1\u7684\u667a\u80fd\u624b\u673a\u662f\u5426\u4f1a\u5f71\u54cd\u8ba4\u77e5\u80fd\u529b\u3002\u5728\u4e24\u4e2a\u5b9e\u9a8c\u5ba4\u5b9e\u9a8c\u4e2d\uff0c\u8fd1 800 \u4eba\u5b8c\u6210\u4e86\u65e8\u5728\u6d4b\u91cf\u5176\u8ba4\u77e5\u80fd\u529b\u7684\u4efb\u52a1\u3002\u5728\u4e00\u9879\u4efb\u52a1\u4e2d\uff0c\u53c2\u4e0e\u8005\u540c\u65f6\u5b8c\u6210\u6570\u5b66\u95ee\u9898\u5e76\u8bb0\u4f4f\u968f\u673a\u5b57\u6bcd\u3002\u8fd9\u6d4b\u8bd5\u4e86\u4ed6\u4eec\u5728\u4ece\u4e8b\u590d\u6742\u7684\u8ba4\u77e5\u4efb\u52a1\u65f6\u8ddf\u8e2a\u4efb\u52a1\u76f8\u5173\u4fe1\u606f\u7684\u80fd\u529b\u3002\u5728\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u4e2d\uff0c\u53c2\u4e0e\u8005\u770b\u5230\u4e00\u7ec4\u5f62\u6210\u4e0d\u5b8c\u6574\u6a21\u5f0f\u7684\u56fe\u50cf\uff0c\u5e76\u9009\u62e9\u6700\u80fd\u5b8c\u6210\u6a21\u5f0f\u7684\u56fe\u50cf\u3002\u8fd9\u9879\u4efb\u52a1\u6d4b\u91cf\u201c\u6d41\u4f53\u667a\u529b\u201d\uff0c\u5373\u4eba\u4eec\u63a8\u7406\u548c\u89e3\u51b3\u65b0\u95ee\u9898\u7684\u80fd\u529b\u3002\u8fd9\u4e24\u9879\u4efb\u52a1\u7684\u8868\u73b0\u90fd\u53d7\u4e2a\u4eba\u53ef\u7528\u5fc3\u7406\u8d44\u6e90\u7684\u5f71\u54cd\u3002\u6211\u4eec\u7684\u5e72\u9884\u5f88\u7b80\u5355\uff1a\u5728\u5b8c\u6210\u8fd9\u4e9b\u4efb\u52a1\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u6c42\u53c2\u4e0e\u8005\u5c06\u624b\u673a\u653e\u5728\u4ed6\u4eec\u9762\u524d\uff08\u9762\u671d\u4e0b\u653e\u5728\u529e\u516c\u684c\u4e0a\uff09\uff0c\u5c06\u5b83\u4eec\u653e\u5728\u53e3\u888b\u6216\u5305\u91cc\uff0c\u6216\u8005\u5c06\u5b83\u4eec\u7559\u5728\u53e6\u4e00\u4e2a\u623f\u95f4\u3002\u91cd\u8981\u7684\u662f\uff0c\u6240\u6709\u624b\u673a\u90fd\u5173\u95ed\u4e86\u58f0\u97f3\u8b66\u62a5\u548c\u632f\u52a8\u529f\u80fd\uff0c\u56e0\u6b64\u53c2\u4e0e\u8005\u4e0d\u4f1a\u88ab\u901a\u77e5\u6253\u6270\u3002\u7ed3\u679c\u4ee4\u4eba\u9707\u60ca\uff1a\u5c06\u624b\u673a\u653e\u5728\u53e6\u4e00\u4e2a\u623f\u95f4\u65f6\u5b8c\u6210\u8fd9\u4e9b\u4efb\u52a1\u7684\u4eba\u8868\u73b0\u6700\u597d\uff0c\u5176\u6b21\u662f\u5c06\u624b\u673a\u653e\u5728\u53e3\u888b\u91cc\u7684\u4eba\u3002\u6392\u5728\u6700\u540e\u7684\u662f\u90a3\u4e9b\u7535\u8bdd\u653e\u5728\u529e\u516c\u684c\u4e0a\u7684\u4eba\u3002\u5f53\u53c2\u4e0e\u8005\u7684\u624b\u673a\u5173\u95ed\u65f6\uff0c\u6211\u4eec\u770b\u5230\u4e86\u7c7b\u4f3c\u7684\u7ed3\u679c\uff1a\u5f53\u4ed6\u4eec\u7684\u624b\u673a\u5728\u9644\u8fd1\u65f6\uff0c\u4eba\u4eec\u7684\u8868\u73b0\u6700\u5dee\uff0c\u800c\u5f53\u4ed6\u4eec\u4e0d\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u623f\u95f4\u65f6\uff0c\u8868\u73b0\u6700\u597d\u3002\u56e0\u6b64\uff0c\u4ec5\u4ec5\u5c06\u667a\u80fd\u624b\u673a\u653e\u5728\u529e\u516c\u684c\u4e0a\u4f1a\u5bfc\u81f4\u4e2a\u4eba\u8ba4\u77e5\u80fd\u529b\u51fa\u73b0\u8f7b\u5fae\u4f46\u5177\u6709\u7edf\u8ba1\u5b66\u610f\u4e49\u7684\u635f\u5bb3\u2014\u2014\u4e0e\u7761\u7720\u4e0d\u8db3\u7684\u5f71\u54cd\u76f8\u5f53\u3002\u8fd9\u79cd\u8ba4\u77e5\u80fd\u529b\u5bf9\u4e8e\u5e2e\u52a9\u6211\u4eec\u5b66\u4e60\u3001\u63a8\u7406\u548c\u53d1\u5c55\u521b\u610f\u81f3\u5173\u91cd\u8981\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8003\u8651\u5230\u6570\u5341\u4ebf\u667a\u80fd\u624b\u673a\u7528\u6237\u5728\u4ed6\u4eec\u7684\u751f\u6d3b\u4e2d\u65e0\u6570\u65f6\u523b\u90fd\u5728\u4f7f\u7528\u8bbe\u5907\uff0c\u5373\u4f7f\u5bf9\u8ba4\u77e5\u80fd\u529b\u7684\u5f71\u54cd\u5f88\u5c0f\u4e5f\u53ef\u80fd\u4f1a\u4ea7\u751f\u5f88\u5927\u7684\u5f71\u54cd\u3002\u8fd9\u610f\u5473\u7740\u5728\u8fd9\u4e9b\u65f6\u523b\uff0c\u5373\u4f7f\u6211\u4eec\u4e0d\u4f7f\u7528\u667a\u80fd\u624b\u673a\uff0c\u667a\u80fd\u624b\u673a\u7684\u5b58\u5728\u4e5f\u4f1a\u5bf9\u6211\u4eec\u601d\u8003\u548c\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\u4ea7\u751f\u4e0d\u5229\u5f71\u54cd\u3002\u5373\u4f7f\u6211\u4eec\u4e0d\u770b\u5b83\u4eec\u3002\u5373\u4f7f\u4ed6\u4eec\u9762\u671d\u4e0b\u3002\u5373\u4f7f\u5b83\u4eec\u5b8c\u5168\u65ad\u7535\u3002\u4e3a\u4ec0\u4e48\u667a\u80fd\u624b\u673a\u5982\u6b64\u5206\u6563\u6ce8\u610f\u529b\uff0c\u5373\u4f7f\u5b83\u4eec\u6ca1\u6709\u5bf9\u6211\u4eec\u53d1\u51fa\u55e1\u55e1\u58f0\u6216\u9e23\u53eb\u58f0\uff1f\u667a\u80fd\u624b\u673a\u7684\u6210\u672c\u4e0e\u5176\u6536\u76ca\u5bc6\u4e0d\u53ef\u5206\u3002\u667a\u80fd\u624b\u673a\u63d0\u4f9b\u7684\u5de8\u5927\u4ef7\u503c\uff0c\u4f5c\u4e3a\u5c06\u6211\u4eec\u5f7c\u6b64\u8054\u7cfb\u8d77\u6765\u5e76\u8fde\u63a5\u5230\u4e16\u754c\u4e0a\u51e0\u4e4e\u6240\u6709\u96c6\u4f53\u77e5\u8bc6\u7684\u4e2a\u4eba\u67a2\u7ebd\uff0c\u5fc5\u7136\u5c06\u5b83\u4eec\u5b9a\u4f4d\u4e3a\u4e0e\u6211\u4eec\u65e5\u5e38\u751f\u6d3b\u7684\u65e0\u6570\u65b9\u9762\u76f8\u5173\u7684\u91cd\u8981\u5185\u5bb9\u3002\u8ba4\u77e5\u5fc3\u7406\u5b66\u7814\u7a76\u8868\u660e\uff0c\u4eba\u7c7b\u5b66\u4f1a\u81ea\u52a8\u5173\u6ce8\u4e0e\u4ed6\u4eec\u4e60\u60ef\u76f8\u5173\u7684\u4e8b\u7269\uff0c\u5373\u4f7f\u4ed6\u4eec\u4e13\u6ce8\u4e8e\u4e0d\u540c\u7684\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u5373\u4f7f\u6211\u4eec\u79ef\u6781\u53c2\u4e0e\u8c08\u8bdd\uff0c\u5f53\u6709\u4eba\u5728\u623f\u95f4\u91cc\u558a\u6211\u4eec\u7684\u540d\u5b57\u65f6\uff0c\u6211\u4eec\u4e5f\u4f1a\u8f6c\u8fc7\u5934\u6765\u3002\u540c\u6837\uff0c\u7236\u6bcd\u4f1a\u81ea\u52a8\u5173\u6ce8\u5a74\u513f\u7684\u54ed\u58f0\u3002\u6211\u4eec\u7684\u7814\u7a76\u8868\u660e\uff0c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u6211\u4eec\u667a\u80fd\u624b\u673a\u7684\u5b58\u5728\u5c31\u50cf\u6211\u4eec\u7684\u540d\u5b57\u7684\u58f0\u97f3\u2014\u2014\u5b83\u4eec\u4e0d\u65ad\u5730\u547c\u5524\u6211\u4eec\uff0c\u5bf9\u6211\u4eec\u7684\u6ce8\u610f\u529b\u65bd\u52a0\u5f15\u529b\u3002\u5982\u679c\u60a8\u66fe\u7ecf\u611f\u53d7\u5230\u201c\u5e7b\u5f71\u55e1\u55e1\u58f0\u201d\uff0c\u90a3\u4e48\u60a8\u5929\u751f\u5c31\u77e5\u9053\u8fd9\u4e00\u70b9\u3002\u8bd5\u56fe\u963b\u6b62\u6216\u62b5\u5236\u8fd9\u79cd\u62c9\u529b\u4f1a\u635f\u5bb3\u6211\u4eec\u7684\u8ba4\u77e5\u80fd\u529b\u3002\u90a3\u4e48\uff0c\u4ee4\u4eba\u5fc3\u9178\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u6211\u4eec\u6210\u529f\u5730\u6291\u5236\u4e86\u5173\u6ce8\u667a\u80fd\u624b\u673a\u7684\u51b2\u52a8\u65f6\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u53ef\u80fd\u4f1a\u7834\u574f\u6211\u4eec\u81ea\u5df1\u7684\u8ba4\u77e5\u80fd\u529b\u3002\n\u4f60\u53d7\u5f71\u54cd\u5417\uff1f\u6700\u6709\u53ef\u80fd\u7684\u3002\u60f3\u60f3\u4f60\u6700\u8fd1\u53c2\u52a0\u7684\u4f1a\u8bae\u6216\u8bb2\u5ea7\uff1a\u6709\u4eba\u628a\u667a\u80fd\u624b\u673a\u653e\u5728\u684c\u5b50\u4e0a\u5417\uff1f\u60f3\u60f3\u4f60\u4e0a\u6b21\u53bb\u770b\u7535\u5f71\u3001\u548c\u670b\u53cb\u51fa\u53bb\u3001\u770b\u4e66\u6216\u73a9\u6e38\u620f\u662f\u4ec0\u4e48\u65f6\u5019\uff1a\u4f60\u7684\u667a\u80fd\u624b\u673a\u5728\u9644\u8fd1\u5417\uff1f\u5728\u6240\u6709\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4ec5\u4ec5\u8ba9\u60a8\u7684\u667a\u80fd\u624b\u673a\u5728\u573a\u53ef\u80fd\u4f1a\u635f\u5bb3\u60a8\u7684\u8ba4\u77e5\u529f\u80fd\u3002\u6211\u4eec\u7684\u6570\u636e\u8fd8\u663e\u793a\uff0c\u667a\u80fd\u624b\u673a\u5b58\u5728\u7684\u8d1f\u9762\u5f71\u54cd\u5bf9\u4e8e\u5728\u8861\u91cf\u5176\u4e0e\u624b\u673a\u7684\u8fde\u63a5\u5f3a\u5ea6\u7684\u8861\u91cf\u6807\u51c6\u4e2d\u6392\u540d\u9760\u524d\u7684\u4eba\u6700\u4e3a\u660e\u663e\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u90a3\u4e9b\u5f3a\u70c8\u540c\u610f\u8bf8\u5982\u201c\u6211\u5f88\u96be\u901a\u8fc7\u6ca1\u6709\u624b\u673a\u7684\u6b63\u5e38\u4e00\u5929\u201d\u548c\u201c\u653e\u5f03\u624b\u673a\u4e00\u5929\u5bf9\u6211\u6765\u8bf4\u4f1a\u5f88\u75db\u82e6\u3002\u201d\u5728\u4eba\u4eec\u7ee7\u7eed\u8d8a\u6765\u8d8a\u4f9d\u8d56\u624b\u673a\u7684\u4e16\u754c\u4e2d\uff0c\u671f\u671b\u8fd9\u79cd\u5f71\u54cd\u53d8\u5f97\u66f4\u5f3a\u5927\u548c\u66f4\u666e\u904d\u662f\u5408\u4e4e\u903b\u8f91\u7684\u3002\u6211\u4eec\u663e\u7136\u4e0d\u662f\u7b2c\u4e00\u4e2a\u6ce8\u610f\u5230\u667a\u80fd\u624b\u673a\u6f5c\u5728\u6210\u672c\u7684\u4eba\u3002\u60f3\u4e00\u60f3\u4e0e\u8fb9\u5f00\u8f66\u8fb9\u6253\u7535\u8bdd\u6216\u53d1\u77ed\u4fe1\uff0c\u6216\u8fb9\u8d70\u8def\u8fb9\u53d1\u77ed\u4fe1\u76f8\u5173\u7684\u6b7b\u4ea1\u4eba\u6570\u3002\u5373\u4f7f\u5728\u60a8\u5fd9\u4e8e\u505a\u5176\u4ed6\u4e8b\u60c5\u65f6\u542c\u5230\u7535\u8bdd\u94c3\u58f0\u4e5f\u4f1a\u52a0\u5267\u60a8\u7684\u7126\u8651\u3002\u77e5\u9053\u6211\u4eec\u9519\u8fc7\u4e86\u4e00\u6761\u77ed\u4fe1\u6216\u7535\u8bdd\u4f1a\u5bfc\u81f4\u6211\u4eec\u8d70\u795e\uff0c\u8fd9\u4f1a\u5f71\u54cd\u9700\u8981\u6301\u7eed\u5173\u6ce8\u7684\u4efb\u52a1\u7684\u8868\u73b0\u5e76\u7834\u574f\u6211\u4eec\u7684\u4e50\u8da3\u3002\u9664\u4e86\u8fd9\u4e9b\u4e0e\u8ba4\u77e5\u548c\u5065\u5eb7\u76f8\u5173\u7684\u540e\u679c\u4e4b\u5916\uff0c\u667a\u80fd\u624b\u673a\u53ef\u80fd\u4f1a\u635f\u5bb3\u6211\u4eec\u7684\u793e\u4ea4\u529f\u80fd\uff1a\u5728\u793e\u4ea4\u4f53\u9a8c\u4e2d\u5c06\u667a\u80fd\u624b\u673a\u62ff\u51fa\u6765\u4f1a\u5206\u6563\u60a8\u7684\u6ce8\u610f\u529b\uff0c\u5e76\u4f7f\u4ed6\u4eec\u4e0d\u90a3\u4e48\u6109\u5feb\u3002\u7136\u800c\uff0c\u8003\u8651\u5230\u6240\u6709\u8fd9\u4e9b\u6210\u672c\uff0c\u6211\u4eec\u5fc5\u987b\u8003\u8651\u667a\u80fd\u624b\u673a\u63d0\u4f9b\u7684\u5de8\u5927\u4ef7\u503c\u3002\u5728\u4e00\u5929\u7684\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u53ef\u80fd\u4f1a\u4f7f\u7528\u667a\u80fd\u624b\u673a\u4e0e\u670b\u53cb\u3001\u5bb6\u4eba\u548c\u540c\u4e8b\u53d6\u5f97\u8054\u7cfb\uff1b\u5728\u7ebf\u8ba2\u8d2d\u4ea7\u54c1\uff1b\u67e5\u770b\u5929\u6c14\uff1b\u4ea4\u6613\u80a1\u7968\uff1b\u9605\u8bfb HBR\uff1b\u5bfc\u822a\u5230\u65b0\u5730\u5740\u7b49\u7b49\u3002\u663e\u7136\uff0c\u667a\u80fd\u624b\u673a\u63d0\u9ad8\u4e86\u6211\u4eec\u7684\u6548\u7387\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u8282\u7701\u65f6\u95f4\u548c\u91d1\u94b1\u3001\u4e0e\u4ed6\u4eba\u8054\u7cfb\u3001\u63d0\u9ad8\u5de5\u4f5c\u6548\u7387\u5e76\u4fdd\u6301\u5a31\u4e50\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u667a\u80fd\u624b\u673a\u6210\u672c\u548c\u6536\u76ca\u4e4b\u95f4\u7684\u8fd9\u79cd\u7d27\u5f20\u5173\u7cfb\u5462\uff1f\u667a\u80fd\u624b\u673a\u6709\u4e0d\u540c\u7684\u7528\u9014\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7684\u667a\u80fd\u624b\u673a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5173\u952e\u4ef7\u503c\uff0c\u4f8b\u5982\u5f53\u5b83\u4eec\u5e2e\u52a9\u6211\u4eec\u4e0e\u6211\u4eec\u60f3\u8981\u89c1\u9762\u7684\u4eba\u53d6\u5f97\u8054\u7cfb\u65f6\uff0c\u6216\u8005\u5f53\u6211\u4eec\u4f7f\u7528\u5b83\u4eec\u6765\u641c\u7d22\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u505a\u51fa\u66f4\u597d\u51b3\u7b56\u7684\u4fe1\u606f\u65f6\u3002\u8fd9\u4e9b\u90fd\u662f\u8ba9\u6211\u4eec\u7684\u624b\u673a\u5c31\u5728\u9644\u8fd1\u7684\u597d\u65f6\u673a\u3002\u4f46\u662f\uff0c\u4e0e\u5176\u8ba9\u667a\u80fd\u624b\u673a\u63a5\u7ba1\u6211\u4eec\u7684\u751f\u6d3b\uff0c\u4e0d\u5982\u8ba9\u6211\u4eec\u91cd\u65b0\u638c\u63a7\u81ea\u5df1\u7684\u751f\u6d3b\uff1a\u5f53\u6211\u4eec\u7684\u667a\u80fd\u624b\u673a\u4e0d\u662f\u76f4\u63a5\u5fc5\u9700\u7684\uff0c\u5e76\u4e14\u5728\u8ba4\u77e5\u4e0a\u5b8c\u5168\u53ef\u7528\u5f88\u91cd\u8981\u65f6\uff0c\u7559\u51fa\u4e00\u6bb5\u65f6\u95f4\u5c06\u5b83\u4eec\u6536\u8d77\u6765\u2014\u2014\u5728\u53e6\u4e00\u4e2a\u623f\u95f4\u2014\u2014\u53ef\u4ee5\u5f88\u6709\u4ef7\u503c\u3002\u8003\u8651\u5230\u8fd9\u4e9b\u53d1\u73b0\uff0c\u5b66\u751f\u3001\u5458\u5de5\u548c CEO \u4eec\u53ef\u80fd\u5e0c\u671b\u901a\u8fc7\u5b9a\u4e49\u4ed6\u4eec\u8ba1\u5212\u4e0e\u624b\u673a\u5206\u5f00\u7684\u65f6\u95f4\u7a97\u53e3\u6765\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u4ed6\u4eec\u7684\u751f\u4ea7\u529b\uff0c\u8ba9\u4ed6\u4eec\u80fd\u591f\u5b8c\u6210\u9700\u8981\u66f4\u6df1\u5165\u601d\u8003\u7684\u4efb\u52a1\u3002\u6b64\u5916\uff0c\u8981\u6c42\u5458\u5de5\u5728\u4f1a\u8bae\u671f\u95f4\u4e0d\u8981\u4f7f\u7528\u624b\u673a\u53ef\u80fd\u8fd8\u4e0d\u591f\u3002\u6211\u4eec\u7684\u5de5\u4f5c\u8868\u660e\uff0c\u5728\u6ca1\u6709\u7535\u8bdd\u7684\u60c5\u51b5\u4e0b\u53ec\u5f00\u4f1a\u8bae\u4f1a\u66f4\u6709\u6548\uff0c\u53ef\u4ee5\u63d0\u9ad8\u6ce8\u610f\u529b\u3001\u63d0\u9ad8\u529f\u80fd\u4ee5\u53ca\u63d0\u51fa\u521b\u9020\u6027\u89e3\u51b3\u65b9\u6848\u7684\u80fd\u529b\u3002\u66f4\u5e7f\u6cdb\u5730\u8bf4\uff0c\u53ea\u9700\u5c06\u667a\u80fd\u624b\u673a\uff08\u8fdc\uff09\u653e\u5728\u8fdc\u5904\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\u53d8\u5f97\u66f4\u52a0\u6295\u5165\u548c\u8ba4\u77e5\u719f\u7ec3\u3002", "note_en": "\u201cPut your phone away\u201d has become a commonplace phrase that is just as often dismissed. Despite wanting to be in the moment, we often do everything within our power to the contrary. We take out our phones to take pictures in the middle of festive family meals, and send text messages or update our social media profiles in the middle of a date or while watching a movie. At the same time, we are often interrupted passively by notifications of emails or phone calls. Clearly, interacting with our smartphones affects our experiences. But can our smartphones affect us even when we aren\u2019t interacting with them \u2014 when they are simply nearby?\n  In  recent research, we investigated whether merely having one\u2019s own smartphone nearby could influence cognitive abilities. In two lab experiments, nearly 800 people completed tasks designed to measure their cognitive capacity. In one task, participants simultaneously completed math problems and memorized random letters. This tests how well they can keep track of task-relevant information while engaging in a complex cognitive task. In the second task, participants saw a set of images that formed an incomplete pattern, and chose the image that best completed the pattern. This task measures \u201cfluid intelligence,\u201d or people\u2019s ability to reason and solve novel problems. Performance on both of these tasks is affected by individuals\u2019 available mental resources.\n  Our intervention was simple: before completing these tasks, we asked participants to either place their phones in front of them (face-down on their desks), keep them in their pockets or bags, or leave them in another room. Importantly, all phones had sound alerts and vibration turned off, so the participants couldn\u2019t be interrupted by notifications.\n  The results were striking: individuals who completed these tasks while their phones were in another room performed the best, followed by those who left their phones in their pockets. In last place were those whose phones were on their desks. We saw similar results when participants\u2019 phones were turned off: people performed worst when their phones were nearby, and best when they were away in a separate room. Thus, merely having their smartphones out on the desk led to a small but statistically significant impairment of individuals\u2019 cognitive capacity \u2014 on par with effects of  lacking sleep.\n  This cognitive capacity is  critical for helping us learn, reason, and develop creative ideas. In this way, even a small effect on cognitive capacity can have a big impact, considering the billions of smartphone owners who have their devices present at countless moments of their lives. This means that in these moments, the mere presence of our smartphones can adversely affect our ability to think and problem-solve \u2014 even when we aren\u2019t using them. Even when we aren\u2019t looking at them. Even when they are face-down. And even when they are powered off altogether.\n  Why are smart phones so distracting, even when they\u2019re not buzzing or chirping at us? The costs of smartphones are inextricably linked to their benefits. The immense value smartphones provide, as personal hubs connecting us to each other and to virtually all of the world\u2019s collective knowledge, necessarily positions them as important and relevant to myriad aspects of our everyday lives. Research in cognitive psychology shows that humans learn to  automatically pay attention to things that are habitually relevant to them, even when they are focused on a different task. For example, even if we are actively engaged in a conversation, we will turn our heads when  someone says our name across the room. Similarly, parents automatically attend to the  sight or  sound of a baby\u2019s cry.\n  Our research suggests that, in a way, the mere presence of our smartphones is like the sound of our names \u2014 they are constantly calling to us, exerting a gravitational pull on our attention. If you have ever felt a \u201c phantom buzz\u201d you inherently know this. Attempts to block or resist this pull takes a toll by impairing our cognitive abilities. In a poignant twist, then, this means that when we are  successful at resisting the urge to attend to our smartphones, we may actually be undermining our own cognitive performance.\n  Are you affected? Most likely. Consider the most recent meeting or lecture you attended: did anyone have their smartphone out on the table? Think about the last time you went to the movies, or went out with friends, read a book, or played a game: was your smartphone close by? In all of these cases, merely having your smartphone present may have impaired your cognitive functioning.\n  Our data also show that the negative impact of smartphone presence is most pronounced for individuals who rank high on a measure capturing the strength of their connection to their phones \u2014 that is, those who strongly agree with statements such as \u201cI would have trouble getting through a normal day without my cell phone\u201d and \u201cIt would be painful for me to give up my cell phone for a day.\u201d In a world where people continue to increasingly rely on their phones, it is only logical to expect this effect to become stronger and more universal.\n  We are clearly not the first to take note of the potential costs of smartphones. Think about the number of fatalities associated with  driving while talking on the phone or texting, or of  texting while walking. Even hearing your phone ring while you\u2019re busy doing something else can  boost your anxiety. Knowing we have missed a text message or call leads our minds to wander, which can  impair performance on tasks that require sustained attention and  undermine our enjoyment. Beyond these cognitive and health-related consequences, smartphones may impair our social functioning: having your smartphone out can  distract you during social experiences and make them less enjoyable.\n  With all these costs in mind, however, we must consider the immense value that smartphones provide. In the course of a day, you may use your smartphone to get in touch with friends, family, and coworkers; order products online; check the weather; trade stocks; read HBR; navigate your way to a new address, and more. Evidently, smartphones increase our efficiency, allowing us to save time and money, connect with others, become more productive, and remain entertained.\n  So how do we resolve this tension between the costs and benefits of our smartphones?\n  Smartphones have distinct uses. There are situations in which our smartphones provide a key value, such as when they help us get in touch with someone we\u2019re trying to meet, or when we use them to search for information that can help us make better decisions. Those are great moments to have our phones nearby. But, rather than smartphones taking over our lives, we should take back the reins: when our smartphones aren\u2019t directly necessary, and when being fully cognitively available is important, setting aside a period of time to put them away \u2014 in another room \u2014 can be quite valuable.\n  With these findings in mind, students, employees, and CEOs alike may wish to maximize their productivity by defining windows of time during which they plan to be separated from their phones, allowing them to accomplish tasks requiring deeper thought. Moreover, asking employees not to use their phones during meetings may not be enough. Our work suggests that having meetings without phones present can be more effective, boosting focus, function, and the ability to come up with creative solutions. More broadly, we can all become more engaged and cognitively adept in our everyday lives simply by putting our smartphones (far) away.", "posttime": "2021-08-10 01:21:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u624b\u673a,\u601d\u7ef4,\u5f71\u54cd,nearby,\u667a\u80fd\u624b\u673a", "title": "\u5c06\u667a\u80fd\u624b\u673a\u653e\u5728\u8eab\u8fb9\u4f1a\u5f71\u54cd\u60a8\u7684\u601d\u7ef4", "title_en": "Having Your Smartphone Nearby Takes a Toll on Your Thinking", "transed": 1, "url": "https://hbr.org/2018/03/having-your-smartphone-nearby-takes-a-toll-on-your-thinking", "via": "", "real_tags": ["\u624b\u673a", "\u601d\u7ef4", "\u5f71\u54cd", "nearby", "\u667a\u80fd\u624b\u673a"]}, {"category": "", "categoryclass": "", "imagename": "26db2545b75996c7b349aed4d3068373.jpg", "infoid": 1072351, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fc3\u6000\u4e0d\u6ee1\u7684 Conti \u5206\u652f\u673a\u6784\u5728\u8fdb\u884c\u653b\u51fb\u65f6\u6cc4\u9732\u4e86\u8be5\u56e2\u4f19\u7684\u57f9\u8bad\u6750\u6599\uff0c\u5176\u4e2d\u5305\u62ec\u6709\u5173\u52d2\u7d22\u8f6f\u4ef6\u64cd\u4f5c\u5458\u4e4b\u4e00\u7684\u4fe1\u606f\u3002 Conti Ransomware \u64cd\u4f5c\u4f5c\u4e3a\u52d2\u7d22\u8f6f\u4ef6\u5373\u670d\u52a1 (RaaS) \u8fd0\u884c\uff0c\u5176\u4e2d\u6838\u5fc3\u56e2\u961f\u7ba1\u7406\u6076\u610f\u8f6f\u4ef6\u548c Tor \u7ad9\u70b9\uff0c\u800c\u62db\u52df\u7684\u9644\u5c5e\u673a\u6784\u5219\u6267\u884c\u7f51\u7edc\u6f0f\u6d1e\u548c\u52a0\u5bc6\u8bbe\u5907\u3002\u4f5c\u4e3a\u8fd9\u79cd\u5b89\u6392\u7684\u4e00\u90e8\u5206\uff0c\u6838\u5fc3\u56e2\u961f\u8d5a\u53d6\u8d4e\u91d1\u7684 20-30%\uff0c\u800c\u9644\u5c5e\u516c\u53f8\u8d5a\u53d6\u5176\u4f59\u90e8\u5206\u3002\u4eca\u5929\uff0c\u4e00\u540d\u5b89\u5168\u7814\u7a76\u4eba\u5458\u5206\u4eab\u4e86\u4e00\u4e2a\u7531\u6124\u6012\u7684 Conti \u5206\u652f\u673a\u6784\u521b\u5efa\u7684\u8bba\u575b\u5e16\u5b50\uff0c\u8be5\u5206\u652f\u673a\u6784\u516c\u5f00\u6cc4\u9732\u4e86\u6709\u5173\u52d2\u7d22\u8f6f\u4ef6\u64cd\u4f5c\u7684\u4fe1\u606f\u3002\u8be5\u4fe1\u606f\u5305\u62ec Cobalt Strike C2 \u670d\u52a1\u5668\u7684 IP \u5730\u5740\u548c\u4e00\u4e2a 113 MB \u7684\u6863\u6848\uff0c\u5176\u4e2d\u5305\u542b\u5927\u91cf\u7528\u4e8e\u8fdb\u884c\u52d2\u7d22\u8f6f\u4ef6\u653b\u51fb\u7684\u5de5\u5177\u548c\u57f9\u8bad\u6750\u6599\u3002\u8be5\u9644\u5c5e\u516c\u53f8\u8868\u793a\uff0c\u4ed6\u4eec\u53d1\u5e03\u4e86\u8fd9\u4e9b\u6750\u6599\uff0c\u56e0\u4e3a\u4f5c\u4e3a\u653b\u51fb\u7684\u4e00\u90e8\u5206\uff0c\u4ed6\u53ea\u83b7\u5f97\u4e86 1,500 \u7f8e\u5143\uff0c\u800c\u56e2\u961f\u7684\u5176\u4ed6\u6210\u5458\u6b63\u5728\u8d5a\u53d6\u6570\u767e\u4e07\u7f8e\u5143\uff0c\u5e76\u627f\u8bfa\u5728\u53d7\u5bb3\u8005\u652f\u4ed8\u8d4e\u91d1\u540e\u83b7\u5f97\u5de8\u989d\u8d54\u507f\u3002 \u201c\u6211\u628a\u4ed6\u4eec\u7684\u94b4\u670d\u52a1\u5668\u7684 ip \u5730\u5740\u548c\u57f9\u8bad\u6750\u6599\u7684\u7c7b\u578b\u5408\u5e76\u7ed9\u4f60\u30021500 \u7f8e\u5143\u662f\u7684\uff0c\u5f53\u7136\uff0c\u4ed6\u4eec\u62db\u52df\u5438\u76d8\u5e76\u5c06\u94b1\u5206\u7ed9\u4ed6\u4eec\uff0c\u7537\u5b69\u4eec\u5f97\u5230\u4e86\u53d7\u5bb3\u8005\u652f\u4ed8\u65f6\u4ed6\u4eec\u4f1a\u544a\u8bc9\u4ed6\u4eec\u7684\u4e1c\u897f\uff0c\u201d\u8be5\u9644\u5c5e\u673a\u6784\u5728\u4e00\u4e2a\u6d41\u884c\u7684\u4fc4\u8bed\u9ed1\u5ba2\u8bba\u575b\u4e0a\u53d1\u5e16\u3002\u9644\u5728\u4e0a\u8ff0\u5e16\u5b50\u4e2d\u7684\u662f Cobalt Strike \u4fe1\u6807\u914d\u7f6e\u7684\u56fe\u50cf\uff0c\u5176\u4e2d\u5305\u542b\u52d2\u7d22\u8f6f\u4ef6\u56e2\u4f19\u4f7f\u7528\u7684\u547d\u4ee4\u548c\u63a7\u5236\u670d\u52a1\u5668\u7684 IP \u5730\u5740\u3002\n\u5728\u5b89\u5168\u7814\u7a76\u5458 Pancak3 \u7684\u63a8\u6587\u4e2d\uff0c\u5efa\u8bae\u6bcf\u4e2a\u4eba\u90fd\u963b\u6b62\u8fd9\u4e9b IP \u5730\u5740\uff0c\u4ee5\u9632\u6b62\u6765\u81ea\u8be5\u7ec4\u7ec7\u7684\u653b\u51fb\u3002\u5728\u968f\u540e\u7684\u5e16\u5b50\u4e2d\uff0c\u8be5\u9644\u5c5e\u516c\u53f8\u5171\u4eab\u4e86\u4e00\u4e2a\u5305\u542b 111 MB \u6587\u4ef6\u7684\u6863\u6848\uff0c\u5176\u4e2d\u5305\u62ec\u9ed1\u5ba2\u5de5\u5177\u3001\u4fc4\u6587\u624b\u518c\u3001\u57f9\u8bad\u6750\u6599\u548c\u636e\u79f0\u5728\u6267\u884c Conti \u52d2\u7d22\u8f6f\u4ef6\u653b\u51fb\u65f6\u63d0\u4f9b\u7ed9\u9644\u5c5e\u516c\u53f8\u7684\u5e2e\u52a9\u6587\u6863\u3002\u4e00\u4f4d\u5b89\u5168\u7814\u7a76\u4eba\u5458\u4e0e BleepingComputer \u5206\u4eab\u4e86\u6b64\u63d0\u53d6\u6587\u4ef6\u5939\u7684\u5c4f\u5e55\u622a\u56fe\u3002\u6211\u4eec\u88ab\u544a\u77e5\u5b83\u5305\u542b\u6709\u5173\u90e8\u7f72 Cobalt Strike \u7684\u624b\u518c\u3001\u7528\u4e8e\u8f6c\u50a8 NTLM \u54c8\u5e0c\u7684 mimikatz \u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u586b\u5145\u4e86\u5404\u79cd\u547d\u4ee4\u7684\u6587\u672c\u6587\u4ef6\u3002\u5df2\u7ecf\u5206\u6790\u8fc7\u6863\u6848\u7684\u9ad8\u7ea7\u82f1\u7279\u5c14\u7684 Vitali Kremez \u544a\u8bc9 BleepingCompter\uff0c\u57f9\u8bad\u6750\u6599\u4e0e\u6d3b\u8dc3\u7684 Conti \u6848\u4f8b\u76f8\u5339\u914d\u3002 \u201c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6211\u4eec\u7684\u6d3b\u8dc3\u6848\u4f8b\u8fdb\u884c\u786e\u8ba4\u3002\u8fd9\u4e2a\u5267\u672c\u4e0e\u6211\u4eec\u73b0\u5728\u770b\u5230\u7684 Conti \u7684\u6d3b\u8dc3\u6848\u4f8b\u76f8\u5339\u914d\uff0c\u201dKremez \u5728\u4e00\u6b21\u5bf9\u8bdd\u4e2d\u544a\u8bc9 BleepingComputer\u3002 \u201c\u603b\u7684\u6765\u8bf4\uff0c\u5b83\u662f\u6765\u81ea AZ \u7684 Conti \u52d2\u7d22\u8f6f\u4ef6\u201c\u6e17\u900f\u6d4b\u8bd5\u201d\u56e2\u961f\u80cc\u540e\u6e17\u900f\u6d4b\u8bd5\u64cd\u4f5c\u7684\u5723\u676f\u3002\u5176\u5f71\u54cd\u662f\u5de8\u5927\u7684\uff0c\u5141\u8bb8\u65b0\u7684\u6e17\u900f\u6d4b\u8bd5\u52d2\u7d22\u8f6f\u4ef6\u64cd\u4f5c\u5458\u9010\u6b65\u63d0\u9ad8\u4ed6\u4eec\u7684\u6e17\u900f\u6d4b\u8bd5\u6280\u80fd\u4ee5\u5e94\u5bf9\u52d2\u7d22\u8f6f\u4ef6\u3002\u201d \u201c\u6b64\u6b21\u6cc4\u5bc6\u8fd8\u663e\u793a\u4e86\u4ed6\u4eec\u52d2\u7d22\u8f6f\u4ef6\u7ec4\u7ec7\u7684\u6210\u719f\u5ea6\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5728\u9488\u5bf9\u5168\u7403\u516c\u53f8\u65f6\u7684\u590d\u6742\u3001\u7ec6\u81f4\u548c\u7ecf\u9a8c\u3002\u201d\n\u201c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u68c0\u6d4b\u673a\u4f1a\uff0c\u5305\u62ec\u4e13\u6ce8\u4e8e AnyDesk \u6301\u4e45\u6027\u548c Atera \u5b89\u5168\u8f6f\u4ef6\u4ee3\u7406\u6301\u4e45\u6027\u4ee5\u5728\u68c0\u6d4b\u4e2d\u5b58\u6d3b\u7684\u5c0f\u7ec4\u3002\u201d\u8fd9\u79cd\u6cc4\u6f0f\u8bf4\u660e\u4e86\u52d2\u7d22\u8f6f\u4ef6\u5373\u670d\u52a1\u64cd\u4f5c\u7684\u8106\u5f31\u6027\uff0c\u56e0\u4e3a\u4e00\u4e2a\u4e0d\u6ee1\u610f\u7684\u9644\u5c5e\u673a\u6784\u53ef\u80fd\u4f1a\u5bfc\u81f4\u653b\u51fb\u4e2d\u4f7f\u7528\u7684\u7cbe\u5fc3\u57f9\u80b2\u7684\u4fe1\u606f\u548c\u8d44\u6e90\u7684\u66b4\u9732\u3002\u6700\u8fd1\uff0c\u7f8e\u56fd\u653f\u5e9c\u5ba3\u5e03\u5176\u6b63\u4e49\u5956\u52b1\u8ba1\u5212\u73b0\u5728\u6b63\u5728\u63a5\u53d7\u6709\u5173\u9488\u5bf9\u7f8e\u56fd\u5173\u952e\u57fa\u7840\u8bbe\u65bd\u7684\u5916\u56fd\u6076\u610f\u7f51\u7edc\u6d3b\u52a8\u7684\u63d0\u793a\uff0c\u5e76\u53ef\u80fd\u4e3a\u63d0\u4f9b\u6709\u7528\u4fe1\u606f\u63d0\u4f9b 1000 \u4e07\u7f8e\u5143\u7684\u5956\u52b1\u3002\u6b64\u5916\uff0c\u901a\u8fc7\u8be5\u8ba1\u5212\u7684\u5956\u52b1\u53ef\u80fd\u4f1a\u4ee5\u52a0\u5bc6\u8d27\u5e01\u533f\u540d\u5b8c\u6210\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6fc0\u52b1\u4f4e\u6536\u5165\u7684\u9644\u5c5e\u673a\u6784\u653b\u51fb\u5176\u4ed6\u7f51\u7edc\u72af\u7f6a\u5206\u5b50\u3002 21 \u5e74 8 \u6708 6 \u65e5\u66f4\u65b0\uff1a\u4e00\u4f4d\u6d88\u606f\u4eba\u58eb\u544a\u8bc9 BleepingComputer\uff0c\u5eb7\u8482\u5728\u5f97\u77e5\u4ed6\u6b63\u5728\u901a\u8fc7\u63a8\u5e7f\u4e0d\u540c\u7684\u8eab\u4efd\u4e0d\u660e\u7684\u9644\u5c5e\u8ba1\u5212\u4ece\u4ed6\u4eec\u7684\u8fd0\u8425\u4e2d\u6316\u8d70\u4e1a\u52a1\u540e\uff0c\u7981\u6b62\u4e86\u6e17\u900f\u6d4b\u8bd5\u4eba\u5458\u3002", "note_en": "A disgruntled Conti affiliate has leaked the gang&#39;s training material when conducting attacks, including information about one of the ransomware&#39;s operators.\n The Conti Ransomware operation is run as a ransomware-as-a-service (RaaS), where the core team manages the malware and Tor sites, while recruited affiliates perform network breaches and encrypt devices.\n As part of this arrangement, the core team earns 20-30% of a ransom payment, while the affiliates earn the rest.\n Today, a security researcher shared a forum post created by an angry Conti affiliate who publicly leaked information about the ransomware operation. This information includes the IP addresses for Cobalt Strike C2 servers and a 113 MB archive containing numerous tools and training material for conducting ransomware attacks.\n  The affiliate said they posted the material as he was only paid $1,500 as part of an attack, while the rest of the team\u00a0are making millions and promising big payouts after a victim pays a ransom.\n &#34;I merge you their ip-address of cobalt servers and type of training materials.\u00a01500 $ yes, of course, they recruit suckers and divide the money among themselves, and the boys are fed with what they will let them know when the victim pays,&#34; the affiliate posted to a popular Russian-speaking hacking forum.\n Attached to the above post are images of Cobalt Strike beacon configurations that contain the IP addresses for command and control servers used by the ransomware gang.\n In a tweet by security researcher Pancak3, it is advised that everyone block those IP addresses\u00a0to prevent attacks from the group.\n  In a subsequent post, the affiliate shared an archive containing 111 MB of files, including hacking tools, manuals written in Russian, training material, and help documents that are allegedly provided to affiliates when performing Conti ransomware attacks.\n A security researcher shared a screenshot of this extracted folder with BleepingComputer. We were told it contains a manual on deploying Cobalt Strike, mimikatz to dump NTLM hashes, and numerous other text files filled with various commands.\n  Advanced Intel&#39;s Vitali Kremez, who had already analyzed the archive, told BleepingCompter that the training material matches active Conti cases.\n &#34;We can confirm based on our active cases. This playbook matches the active cases for Conti as we see right now,&#34; Kremez told BleepingComputer in a conversation.\n &#34;By and large, it is the holy grail of the pentester operation behind the Conti ransomware &#34;pentester&#34; team from A-Z. The implications are huge and allow new pentester ransomware operators to level up their pentester skills for ransomware step by step.&#34;\n &#34;The leak also shows the maturity of their ransomware organization and how sophisticated, meticulous and experienced they are while targeting corporations worldwide.&#34;\n &#34;It also provides a plethora detection opportunities including the group focus on AnyDesk persistence and Atera security software agent persistence to survive detections.&#34;\n This leak illustrates the vulnerability of ransomware-as-a-service operations, as a singly unhappy affiliate could lead to the exposure of carefully cultivated information and resources used in attacks.\n Recently the United States government announced that its Rewards for Justice program is now accepting tips on foreign malicious cyberactivity against U.S. critical infrastructure, with a potential\u00a0 $10 million reward for helpful information.\n Additionally, rewards through this program may be done anonymously in cryptocurrency, which could incentivize low-paid affiliates to turn on other cybercriminals.\n Update 8/6/21:\u00a0A source told BleepingComputer that Conti banned the pentester after learning he was poaching business away from their operation by promoting a different unidentified affiliate program.", "posttime": "2021-08-10 01:20:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,\u6cc4\u9732,conti", "title": "\u6124\u6012\u7684 Conti \u52d2\u7d22\u8f6f\u4ef6\u9644\u5c5e\u673a\u6784\u6cc4\u9732\u4e86\u56e2\u4f19\u7684\u653b\u51fb\u624b\u518c", "title_en": "Angry Conti ransomware affiliate leaks gang's attack playbook", "transed": 1, "url": "https://www.bleepingcomputer.com/news/security/angry-conti-ransomware-affiliate-leaks-gangs-attack-playbook/", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u6cc4\u9732", "conti"]}, {"category": "", "categoryclass": "", "imagename": "1af1b07046405fdcbe398446d8b23597.jpg", "infoid": 1072350, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9a6c\u8428\u8bf8\u585e\u5dde\u516c\u5171\u536b\u751f\u5b98\u5458\u7684\u65b0\u6570\u636e\u663e\u793a\uff0c\u5728\u51a0\u72b6\u75c5\u6bd2\u7a81\u7834\u6027\u611f\u67d3\u540e\u6b7b\u4ea1\u7684\u5b8c\u5168\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u4e2d\uff0c\u7edd\u5927\u591a\u6570\u90fd\u6709\u6f5c\u5728\u7684\u75be\u75c5\uff0c\u4f7f\u4ed6\u4eec\u66f4\u6709\u53ef\u80fd\u60a3\u4e0a\u91cd\u75c7\u3002\u6b64\u5916\uff0c\u6839\u636e\u5dde\u516c\u5171\u536b\u751f\u90e8\u7684\u65b0\u6570\u636e\uff0c\u9a6c\u8428\u8bf8\u585e\u5dde\u75ab\u82d7\u7a81\u7834\u75c5\u4f8b\u6b7b\u4ea1\u7684\u4e2d\u4f4d\u5e74\u9f84\u4e3a 82.5 \u5c81\u3002\u6e7e\u5dde\u6709 100 \u4f8b\u7a81\u7834\u6027\u75c5\u4f8b\u6b7b\u4ea1\uff0c\u5360\u6240\u6709\u5b8c\u5168\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u6570\u7684 0.002%\uff0c\u5373\u6bcf 100,000 \u540d\u63a5\u79cd\u75ab\u82d7\u7684\u5c45\u6c11\u4e2d\u7ea6\u6709\u4e24\u4eba\u6b7b\u4ea1\u3002\u8be5\u5dde\u5df2\u6709\u8d85\u8fc7 430 \u4e07\u4eba\u63a5\u79cd\u4e86\u75ab\u82d7\u3002\u5728 100 \u4f8b\u7a81\u7834\u6027\u75c5\u4f8b\u6b7b\u4ea1\u4e2d\uff0c\u636e\u62a5\u9053\uff0c\u8fd9\u4e9b\u75c5\u4f8b\u4e2d\u6709 73% \u6709\u6f5c\u5728\u75be\u75c5\uff0c\u4f7f\u4ed6\u4eec\u66f4\u53ef\u80fd\u60a3\u4e0a\u4e25\u91cd\u75be\u75c5\u3002\u603b\u4f53\u800c\u8a00\uff0c\u6709 395 \u4f8b\u7a81\u7834\u6027\u4f4f\u9662\u6cbb\u7597\uff0c\u5360\u6240\u6709\u5b8c\u5168\u63a5\u79cd\u75ab\u82d7\u8005\u7684 0.009%\u3002\u5728 395 \u6b21\u4f4f\u9662\u6cbb\u7597\u4e2d\uff0c\u636e\u62a5\u9053\u8fd9\u4e9b\u60a3\u8005\u4e2d\u6709 57% \u6709\u6f5c\u5728\u75be\u75c5\u3002\u6ce2\u58eb\u987f\u5927\u5b66\u4f20\u67d3\u75c5\u4e13\u5bb6\u6234\u7ef4\u68ee\u00b7\u54c8\u9ed8 (Davidson Hamer) \u8868\u793a\uff0c\u8fd9\u4e00\u65b0\u6570\u636e\u4e0e\u5176\u4ed6\u56fd\u5bb6\u7684\u7a81\u7834\u6027\u75c5\u4f8b\u6570\u636e\u76f8\u5f53\u3002\u54c8\u9ed8\u8bf4\uff1a\u201c\u75c5\u60c5\u4e25\u91cd\u5230\u9700\u8981\u4f4f\u9662\u6cbb\u7597\u7684\u7a81\u7834\u6027\u75c5\u4f8b\u901a\u5e38\u662f\u8001\u5e74\u4eba\u548c\u6709\u57fa\u7840\u75be\u75c5\u4e14\u514d\u75ab\u529f\u80fd\u4f4e\u4e0b\u7684\u4eba\u3002\u201d \u201c\u56e0\u6b64\uff0c\u73b0\u5728\u9700\u8981\u771f\u6b63\u5c0f\u5fc3\u7684\u662f\u8001\u5e74\u4eba\u3001\u6709\u57fa\u7840\u75be\u75c5\u7684\u4eba\u548c\u514d\u75ab\u529f\u80fd\u4f4e\u4e0b\u7684\u4eba\u3002\u201d\n\u7531\u4e8e\u4f20\u67d3\u6027\u66f4\u9ad8\u7684\u4e09\u89d2\u6d32\u53d8\u5f02\u4f53\u7684\u4f20\u64ad\uff0c\u6700\u8fd1\u51e0\u5468\u9a6c\u8428\u8bf8\u585e\u5dde\u7684\u7a81\u7834\u6027\u75c5\u4f8b\u4e00\u76f4\u5728\u589e\u52a0\u3002\u8be5\u5dde\u4e0a\u5468\u62a5\u544a\u79f0\uff0c\u6709 7,737 \u540d\u5b8c\u5168\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u7684 COVID-19 \u68c0\u6d4b\u5448\u9633\u6027\uff0c\u4e00\u5468\u5185\u589e\u52a0\u4e86 1,364 \u4f8b\uff0c\u6216\u5e73\u5747\u6bcf\u5929 195 \u4f8b\u3002 7,737 \u4f8b\u7a81\u7834\u6027\u75c5\u4f8b\u5360\u9a6c\u8428\u8bf8\u585e\u5dde 430 \u4e07\u5b8c\u5168\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u7684 0.18%\u3002 DPH \u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\uff1a\u201c\u9a6c\u8428\u8bf8\u585e\u5dde\u7684\u7a81\u7834\u6027\u75c5\u4f8b\u975e\u5e38\u5c11\uff0c\u4f4f\u9662\u6216\u6b7b\u4ea1\u7684\u4eba\u6570\u751a\u81f3\u66f4\u5c11\u3002\u201d \u201c\u6240\u6709\u53ef\u7528\u6570\u636e\u7ee7\u7eed\u652f\u6301\u7f8e\u56fd\u4f7f\u7528\u7684\u6240\u6709 3 \u79cd\u75ab\u82d7\u90fd\u5bf9\u6240\u6709\u5df2\u77e5\u7684 COVID-19 \u53d8\u4f53\u5f15\u8d77\u7684\u4e25\u91cd\u75be\u75c5\u548c\u6b7b\u4ea1\u5177\u6709\u9ad8\u5ea6\u4fdd\u62a4\u4f5c\u7528\u3002\u4fdd\u62a4\u81ea\u5df1\u548c\u4eb2\u4eba\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u63a5\u79cd\u75ab\u82d7\u3002\u201d South Shore Health \u4f20\u67d3\u75c5\u4e3b\u4efb\u6258\u5fb7\u00b7\u57c3\u52d2\u6797 (Todd Ellerin) \u8bf4\uff0c\u7a81\u7834\u6027\u611f\u67d3\u5bfc\u81f4\u7684\u6b7b\u4ea1\u201c\u975e\u5e38\u7f55\u89c1\u201d\u3002 \u201c\u4f46\u5f53\u5b83\u53d1\u751f\u65f6\uff0c\u901a\u5e38\u662f\u8001\u5e74\u4eba\u6216\u514d\u75ab\u529f\u80fd\u4f4e\u4e0b\u7684\u4eba\uff0c\u201d\u57c3\u52d2\u6797\u8bf4\uff0c\u5e76\u5f3a\u8c03\u8bf4\uff0c\u201c\u75ab\u82d7\u8868\u660e\u5b83\u5bf9\u8001\u5e74\u4eba\u5177\u6709\u6781\u5f3a\u7684\u4fdd\u62a4\u4f5c\u7528\u3002\u201d\u7f8e\u56fd\u56fd\u5bb6\u8fc7\u654f\u548c\u4f20\u67d3\u75c5\u7814\u7a76\u6240\u6240\u957f\u5b89\u4e1c\u5c3c\u00b7\u798f\u5947\u535a\u58eb\u5468\u65e5\u5728\u201c\u4e0e\u5a92\u4f53\u89c1\u9762\u201d\u4e0a\u8bf4\uff0c\u90a3\u4e9b\u514d\u75ab\u529f\u80fd\u4f4e\u4e0b\u5e76\u63a5\u79cd\u4e86\u75ab\u82d7\u7684\u4eba\u201c\u53ef\u80fd\u4e00\u5f00\u59cb\u5c31\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u53cd\u5e94\u201d\u3002\n\u62c5\u4efb\u62dc\u767b\u603b\u7edf\u9996\u5e2d\u533b\u7597\u987e\u95ee\u7684\u798f\u5947\u8bf4\uff1a\u201c\u5bf9\u4e8e\u8fd9\u4e9b\u4eba\uff0c\u6211\u5f3a\u70c8\u652f\u6301\u5c3d\u5feb\u8ba9\u4ed6\u4eec\u63a5\u53d7\u989d\u5916\u7684\u6ce8\u5c04\u3002\u201d\u798f\u5947\u8bf4\uff0c\u6839\u636e\u75ab\u82d7\u968f\u65f6\u95f4\u63a8\u79fb\u7684\u6709\u6548\u6027\u6570\u636e\uff0c\u8001\u5e74\u4eba\u53ef\u80fd\u4f1a\u5728\u5176\u4ed6\u4eba\u7fa4\u4e4b\u524d\u63a5\u79cd\u75ab\u82d7\u3002", "note_en": "New data from Massachusetts public health officials reveals that a significant majority of fully vaccinated people who died after a coronavirus breakthrough infection had underlying conditions that made them more likely to have a severe case.\n Also, the median age of Massachusetts vaccine breakthrough cases who died has been 82.5 years, according to the new data from the state Department of Public Health.\n There have been  100 breakthrough case deaths in the Bay State, which is 0.002% of all fully vaccinated individuals, or about two for every 100,000 residents who got their shots. More than 4.3 million people in the state have been fully vaccinated.\n Of the 100 breakthrough case deaths, 73% of these cases were reported to have underlying conditions that made them more likely to have severe disease.\n   Overall, there have been  395 breakthrough hospitalizations, which is 0.009% of all fully vaccinated individuals. Of the 395 hospitalizations, 57% of these patients were reported to have underlying conditions.\n This new data is comparable to the data of breakthrough cases in other countries, said Davidson Hamer, a Boston University specialist in infectious diseases.\n \u201cThe breakthrough cases that are sick enough to be hospitalized is generally older people and those with underlying conditions and who are immunocompromised,\u201d Hamer said. \u201cSo the people who need to be really careful right now is older people and  those who have underlying conditions and those who are immunocompromised.\u201d\n Breakthrough cases have been rising in Massachusetts in recent weeks amid the spread of the more highly contagious delta variant.\n The state last week reported that  7,737 fully vaccinated people have tested positive for COVID-19, a jump of 1,364 cases in one week, or a daily average of 195 cases.\n   The 7,737 breakthrough cases is 0.18% of the 4.3 million fully vaccinated people in Massachusetts.\n \u201cBreakthrough cases in Massachusetts are incredibly low, and those hospitalized or who have died are even lower,\u201d the DPH said in a statement. \u201cAll available data continue to support that all 3 vaccines used in the US are highly protective against severe disease and death from all known variants of COVID-19. The best way to protect yourself and your loved ones is to get vaccinated.\u201d\n Deaths from breakthrough infections is \u201cvery uncommon,\u201d said Todd Ellerin, director of infectious diseases at South Shore Health.\n \u201cBut when it happens, it\u2019s usually those who are elderly or immunocompromised,\u201d Ellerin said, stressing, \u201cThe vaccine has shown that it\u2019s been extremely protective in the elderly.\u201d\n   Dr. Anthony Fauci, director of the National Institute of Allergy and Infectious Diseases, said on \u201cMeet The Press\u201d Sunday that  those who are immunocompromised and got vaccinated, \u201clikely never got a good response to begin with.\u201d\n \u201cFor those individuals, I am strongly in favor of getting them that additional shot as soon as possible,\u201d said Fauci, who serves as chief medical adviser to President Biden.\n Those who are elderly will likely get a booster before other groups, Fauci said, based on data of the vaccine\u2019s effectiveness over time.", "posttime": "2021-08-10 01:20:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75c5\u6bd2,\u51a0\u72b6\u75c5\u6bd2,coronavirus,\u6570\u636e", "title": "MA \u51a0\u72b6\u75c5\u6bd2\u7a81\u7834\u6027\u6b7b\u4ea1\uff1a73% \u6709\u6f5c\u5728\u75be\u75c5\uff0c\u4e2d\u4f4d\u5e74\u9f84 82", "title_en": "MA coronavirus breakthrough deaths: 73% had underlying conditions, median age 82", "transed": 1, "url": "https://www.bostonherald.com/2021/08/08/massachusetts-coronavirus-breakthrough-deaths-73-had-underlying-conditions-median-age-was-82-5/", "via": "", "real_tags": ["\u75c5\u6bd2", "\u51a0\u72b6\u75c5\u6bd2", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072348, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "bpftrace \u662f\u4e00\u4e2a\u65b0\u7684 Linux \u5f00\u6e90\u8ddf\u8e2a\u5668\uff0c\u7528\u4e8e\u5206\u6790\u751f\u4ea7\u6027\u80fd\u95ee\u9898\u548c\u6545\u969c\u6392\u9664\u8f6f\u4ef6\u3002\u8bb8\u591a\u516c\u53f8\u90fd\u5728\u4f7f\u7528\u5b83\uff0c\u5305\u62ec Netfilx\u3001Facebook\u3001Red Hat\u3001Shopify \u7b49\u3002\u5b83\u7531 Alastair Robertson \u521b\u5efa\uff0cAlastair Robertson \u662f\u4e00\u4f4d\u624d\u534e\u6a2a\u6ea2\u7684\u82f1\u56fd\u5f00\u53d1\u4eba\u5458\uff0c\u66fe\u5728\u5404\u79cd\u7f16\u7801\u6bd4\u8d5b\u4e2d\u83b7\u80dc\u3002 Linux \u5df2\u7ecf\u6709\u8bb8\u591a\u6027\u80fd\u5de5\u5177\uff0c\u4f46\u8fd9\u4e9b\u5de5\u5177\u901a\u5e38\u662f\u57fa\u4e8e\u8ba1\u6570\u5668\u7684\u5e76\u4e14\u53ef\u89c1\u6027\u6709\u9650\u3002\u4f8b\u5982\uff0ciostat(1) \u6216\u76d1\u63a7\u4ee3\u7406\u53ef\u80fd\u4f1a\u544a\u8bc9\u60a8\u5e73\u5747\u78c1\u76d8\u5ef6\u8fdf\uff0c\u4f46\u4e0d\u4f1a\u544a\u8bc9\u60a8\u6b64\u5ef6\u8fdf\u7684\u5206\u5e03\u3002\u5206\u5e03\u53ef\u4ee5\u63ed\u793a\u591a\u79cd\u6a21\u5f0f\u6216\u5f02\u5e38\u503c\uff0c\u5176\u4e2d\u4efb\u4f55\u4e00\u79cd\u90fd\u53ef\u80fd\u662f\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\u7684\u771f\u6b63\u539f\u56e0\u3002 bpftrace \u9002\u7528\u4e8e\u8fd9\u79cd\u5206\u6790\uff1a\u5c06\u6307\u6807\u5206\u89e3\u4e3a\u5206\u5e03\u6216\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u65e5\u5fd7\uff0c\u5e76\u521b\u5efa\u65b0\u7684\u6307\u6807\u4ee5\u4e86\u89e3\u76f2\u70b9\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5355\u884c\u7a0b\u5e8f\u6216\u811a\u672c\u4f7f\u7528 bpftrace\uff0c\u5b83\u9644\u5e26\u4e86\u8bb8\u591a\u9884\u5148\u7f16\u5199\u7684\u5de5\u5177\u3002\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u5c4f\u5e55\u622a\u56fe\uff1a\u8ddf\u8e2a PID 181 \u7684\u8bfb\u53d6\u5ef6\u8fdf\u5206\u5e03\uff0c\u5e76\u5c06\u5176\u663e\u793a\u4e3a 2 \u7684\u5e42\u76f4\u65b9\u56fe\uff1a# bpftrace -e &#39;kprobe:vfs_read /pid == 30153/ { @start[tid] = nsecs ; }kretprobe:vfs_read /@start[tid]/ { @ns = hist(nsecs - @start[tid]);\u5220\u9664(@start[tid]); }&#39;\u9644\u52a02\u4e2a\u63a2\u9488...^C@ns:[256, 512) 10900 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ |[512, 1k) 18291 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@|[1k, 2k) 4998 |@@@@@@@@@@@@@@|[2k, 4k) 57 | |[4k, 8k) 117 | |[8k, 16k) 48 | |[16k, 32k) 109 | |[32k, 64k) 3 | |\u6b64\u793a\u4f8b\u68c0\u6d4b\u4e86\u6570\u5343\u4e2a\u53ef\u7528\u4e8b\u4ef6\u4e4b\u4e00\u3002\u5982\u679c\u60a8\u9047\u5230\u4e00\u4e9b\u5947\u602a\u7684\u6027\u80fd\u95ee\u9898\uff0c\u53ef\u80fd\u6709\u4e00\u4e9b bpftrace one-liner \u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5bf9\u4e8e\u5927\u578b\u73af\u5883\uff0c\u6b64\u529f\u80fd\u53ef\u4ee5\u5e2e\u52a9\u60a8\u8282\u7701\u6570\u767e\u4e07\u7f8e\u5143\u3002\u5bf9\u4e8e\u8f83\u5c0f\u7684\u73af\u5883\uff0c\u5b83\u53ef\u4ee5\u66f4\u6709\u7528\u5730\u5e2e\u52a9\u6d88\u9664\u5ef6\u8fdf\u5f02\u5e38\u503c\u3002\u6211\u4e4b\u524d\u5199\u8fc7\u5173\u4e8e bpftrace \u4e0e\u5176\u4ed6\u8ddf\u8e2a\u5668\u7684\u6587\u7ae0\uff0c\u5305\u62ec BCC\uff08BPF \u7f16\u8bd1\u5668\u96c6\u5408\uff09\u3002 BCC \u975e\u5e38\u9002\u5408\u7f50\u88c5\u7684\u590d\u6742\u5de5\u5177\u548c\u4ee3\u7406\u3002 bpftrace \u6700\u9002\u5408\u77ed\u811a\u672c\u548c\u4e34\u65f6\u8c03\u67e5\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u603b\u7ed3 bpftrace \u8bed\u8a00\u3001\u53d8\u91cf\u7c7b\u578b\u3001\u63a2\u9488\u548c\u5de5\u5177\u3002 bpftrace \u4f7f\u7528 BPF\uff08\u4f2f\u514b\u5229\u6570\u636e\u5305\u8fc7\u6ee4\u5668\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u5904\u7406\u865a\u62df\u6307\u4ee4\u96c6\u7684\u5185\u6838\u6267\u884c\u5f15\u64ce\u3002\u8fd1\u5e74\u6765\uff0cBPF \u5f97\u5230\u4e86\u6269\u5c55\uff08\u53c8\u540d eBPF\uff09\uff0c\u4ee5\u63d0\u4f9b\u4e00\u79cd\u5b89\u5168\u7684\u65b9\u5f0f\u6765\u6269\u5c55\u5185\u6838\u529f\u80fd\uff0c\u5e76\u5df2\u6210\u4e3a\u7cfb\u7edf\u5de5\u7a0b\u4e2d\u7684\u70ed\u95e8\u8bdd\u9898\uff0c\u5728\u4e0a\u5c4a Linux Plumber \u4f1a\u8bae\u4e0a\u81f3\u5c11\u6709 24 \u573a\u5173\u4e8e BPF \u7684\u6f14\u8bb2\u3002 BPF \u5728 Linux \u5185\u6838\u4e2d\uff0cbpftrace \u662f\u5f00\u59cb\u4f7f\u7528 BPF \u8fdb\u884c\u53ef\u89c2\u5bdf\u6027\u7684\u6700\u4f73\u65b9\u5f0f\u3002\n\u6709\u5173\u5982\u4f55\u5b89\u88c5\u5b83\uff0c\u8bf7\u53c2\u9605 bpftrace INSTALL \u6307\u5357\uff0c\u5e76\u83b7\u53d6\u6700\u65b0\u7248\u672c\uff1a0.9.1 \u521a\u521a\u53d1\u5e03\u3002\u5bf9\u4e8e Kubernetes \u96c6\u7fa4\uff0c\u8fd8\u6709\u7528\u4e8e\u8fd0\u884c\u5b83\u7684 kubectl-trace\u3002\u63a2\u9488\u6307\u5b9a\u8981\u68c0\u6d4b\u7684\u4e8b\u4ef6\uff0c\u8fc7\u6ee4\u5668\u662f\u53ef\u9009\u7684\uff0c\u53ef\u4ee5\u6839\u636e\u5e03\u5c14\u8868\u8fbe\u5f0f\u8fc7\u6ee4\u4e8b\u4ef6\uff0c\u52a8\u4f5c\u662f\u8fd0\u884c\u7684\u5c0f\u7a0b\u5e8f\u3002\u63a2\u9488\u662f BEGIN\uff0c\u4e00\u4e2a\u7279\u6b8a\u7684\u63a2\u9488\uff0c\u5b83\u8fd0\u884c\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\uff08\u5982 awk\uff09\u3002\u6ca1\u6709\u8fc7\u6ee4\u5668\u3002\u8be5\u64cd\u4f5c\u662f\u4e00\u4e2a printf() \u8bed\u53e5\u3002\u8fd9\u4f7f\u7528 kretprobe \u6765\u68c0\u6d4b sys_read() \u5185\u6838\u51fd\u6570\u7684\u8fd4\u56de\u3002\u5982\u679c PID \u662f 181\uff0c\u4e00\u4e2a\u7279\u6b8a\u7684\u6620\u5c04\u53d8\u91cf @bytes \u88ab\u586b\u5145\u4e00\u4e2a log2 \u76f4\u65b9\u56fe\u51fd\u6570\uff0c\u8fd4\u56de\u503c\u662f sys_read()\u3002\u8fd9\u4f1a\u751f\u6210 PID 181 \u7684\u8fd4\u56de\u8bfb\u53d6\u5927\u5c0f\u7684\u76f4\u65b9\u56fe\u3002\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u8fdb\u884c\u4e86\u5927\u91cf 1 \u5b57\u8282\u8bfb\u53d6\uff1f\u4e5f\u8bb8\u53ef\u4ee5\u4f18\u5316\u3002\u8fd9\u4e9b\u662f\u76f8\u5173\u7684\u63a2\u9488\u5e93\u3002\u5f53\u524d\u652f\u6301\u7684\u7c7b\u578b\u662f\uff08\u5c06\u6dfb\u52a0\u66f4\u591a\u7c7b\u578b\uff09\uff1a \u5982\u679c\u60a8\u4e0d\u719f\u6089\u8fd9\u4e2a\u672f\u8bed\uff1a\u52a8\u6001\u68c0\u6d4b\uff08\u53c8\u540d\u52a8\u6001\u8ddf\u8e2a\uff09\u662f\u4e00\u79cd\u8d85\u80fd\u529b\uff0c\u5b83\u4f7f\u60a8\u65e0\u9700\u91cd\u65b0\u542f\u52a8\u5373\u53ef\u8ddf\u8e2a\u6b63\u5728\u8fd0\u884c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u7684\u4efb\u4f55\u8f6f\u4ef6\u529f\u80fd\u3002\u8fd9\u53ef\u4ee5\u8ba9\u60a8\u6df1\u5165\u4e86\u89e3\u4efb\u4f55\u95ee\u9898\u3002\u4f46\u662f\uff0c\u5b83\u516c\u5f00\u7684\u51fd\u6570\u4e0d\u88ab\u89c6\u4e3a\u7a33\u5b9a\u7684 API\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u4ece\u4e00\u4e2a\u8f6f\u4ef6\u7248\u672c\u66f4\u6539\u4e3a\u53e6\u4e00\u4e2a\u8f6f\u4ef6\u7248\u672c\u3002\u56e0\u6b64\u9759\u6001\u68c0\u6d4b\uff0c\u5176\u4e2d\u4e8b\u4ef6\u70b9\u88ab\u786c\u7f16\u7801\u5e76\u6210\u4e3a\u7a33\u5b9a\u7684 API\u3002\u5199bpftrace\u7a0b\u5e8f\u65f6\uff0c\u5c3d\u91cf\u5148\u7528\u9759\u6001\u7c7b\u578b\uff0c\u518d\u7528\u52a8\u6001\u7c7b\u578b\uff0c\u8fd9\u6837\u4f60\u7684\u7a0b\u5e8f\u4f1a\u66f4\u7a33\u5b9a\u3002\u5e26\u6709\u201c@\u201d\u524d\u7f00\u7684\u53d8\u91cf\u4f7f\u7528 BPF \u6620\u5c04\uff0c\u5176\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u5173\u8054\u6570\u7ec4\u3002\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u4e4b\u4e00\u8fdb\u884c\u586b\u5145\uff1a\n\u5b66\u4e60 bpftrace \u7684\u4e00\u4e2a\u597d\u65b9\u6cd5\u662f\u901a\u8fc7 one-liners\uff0c\u6211\u628a\u5b83\u53d8\u6210\u4e86 one-liners \u6559\u7a0b\u3002\u8be5\u6559\u7a0b\u6db5\u76d6\u4ee5\u4e0b\u5355\u884c\uff1a 1. \u5217\u51fa\u63a2\u9488 bpftrace -l &#39;tracepoint:syscalls:sys_enter_*&#39;2\u3002 Hello world bpftrace -e &#39;BEGIN { printf(&quot;hello world\\n&quot;) }&#39;3.\u6587\u4ef6\u6253\u5f00 bpftrace -e &#39;tracepoint:syscalls:sys_enter_open { printf(&quot;%s %s\\n&quot;, comm, str(args-&gt;filename)) }&#39;4.\u7cfb\u7edf\u8c03\u7528\u6309\u8fdb\u7a0b bpftrace -e &#39;tracepoint:raw_syscalls:sys_enter { @[comm] = count() }&#39;5. read() \u5b57\u8282\u7684\u5206\u5e03 bpftrace -e &#39;tracepoint:syscalls:sys_exit_read /pid == 18644/ { @bytes = hist(args-&gt;retval) }&#39;6. read() \u5b57\u8282\u7684\u5185\u6838\u52a8\u6001\u8ddf\u8e2a bpftrace -e &#39;kretprobe:vfs_read { @bytes = lhist(retval, 0, 2000, 200) }&#39;7.\u8ba1\u65f6 read()s bpftrace -e &#39;kprobe:vfs_read { @start[tid] = nsecs } kretprobe:vfs_read /@start[tid]/ { @ns[comm] = hist(nsecs - @start[tid]);\u5220\u9664(@start[tid]) }&#39;8.\u8ba1\u6570\u8fdb\u7a0b\u7ea7\u4e8b\u4ef6 bpftrace -e &#39;tracepoint:sched:sched* { @[name] = count() } interval:s:5 { exit() }&#39;9.\u914d\u7f6e CPU \u5185\u6838\u5806\u6808 bpftrace -e &#39;profile:hz:99 { @[stack] = count() }&#39;10.\u8c03\u5ea6\u7a0b\u5e8f\u8ddf\u8e2a bpftrace -e &#39;tracepoint:sched:sched_switch { @[stack] = count() }&#39;11.\u5757 I/O \u8ddf\u8e2a bpftrace -e &#39;tracepoint:block:block_rq_complete { @ = hist(args-&gt;nr_sector * 512) }&#39; \u9664\u4e86\u5355\u884c\u7a0b\u5e8f\uff0cbpftrace \u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u662f\u591a\u884c\u811a\u672c\u3002 bpftrace \u9644\u5e26\u4e86\u5176\u4e2d 28 \u4e2a\u4f5c\u4e3a\u5de5\u5177\uff1a tools# ls *.btbashreadline.bt dcsnoop.bt oomkill.bt syncsnoop.bt vfscount.btbiolatency.bt execsnoop.bt opensnoop.bt syscount.bt vfsstat.btbiosnoop.btper get bt tcpaccept.bt writeback.btbitesize.bt killsnoop.bt runqlat.bt tcpconnect.bt xfsdist.btcapable.bt load.bt runqlen.bt tcpdrop.btcpuwalk.bt mdflush.bt statsnoop.bt \u4e0e\u4ed6\u4eec\u7684\u6027\u80fd\u4f7f\u7528 tdiagnosbtrans \u4f7f\u7528\u95ee\u9898\u548c\u4e00\u822c\u6545\u969c\u6392\u9664\uff0c\u5b83\u4eec\u8fd8\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u5b66\u4e60 bpftrace \u7684\u65b9\u6cd5\uff1a\u901a\u8fc7\u793a\u4f8b\u3002 tools# cat -n biolatency.bt 1 /* 2 * biolatency.bt \u5757 I/O \u5ef6\u8fdf\u4f5c\u4e3a\u76f4\u65b9\u56fe\u3002 3 * \u5bf9\u4e8e Linux\uff0c\u4f7f\u7528 bpftrace\u3001eBPF\u3002 4 * 5 * \u8fd9\u662f\u540c\u540d bcc \u5de5\u5177\u7684 bpftrace \u7248\u672c\u3002 6 * 7 * \u7248\u6743\u6240\u6709 2018 Netflix, Inc. 8 * \u6839\u636e Apache \u8bb8\u53ef\u8bc1\u83b7\u5f97\u8bb8\u53ef\uff0c\u7248\u672c 2.0\uff08\u201c\u8bb8\u53ef\u8bc1\u201d\uff099 * 10 * 2018 \u5e74 9 \u6708 13 \u65e5 Brendan Gregg \u521b\u5efa\u4e86\u8fd9\u4e2a\u3002 11 */ 12 13 BEGIN 14 { 15 printf(&quot;Tracing block device I/O... Hit Ctrl-C to end.\\n&quot;); 16 } 17 18 kprobe:blk_account_io_start 19 { 20 @start[arg0] = nsecs; 21 } 22 23 kprobe:blk_account_io_done 24 /@start[arg0]/ 25 26 { 27 @usecs = hist((nsecs - @start[arg0]) / 1000); 28 \u5220\u9664(@start[arg0]); 29 } 30 31 END 32 { 33 \u6e05\u9664\uff08@start\uff09\uff1b 34 } \u5b83\u7b80\u5355\u6613\u8bfb\uff0c\u800c\u4e14\u8db3\u591f\u7b80\u77ed\uff0c\u53ef\u4ee5\u5305\u542b\u5728\u5e7b\u706f\u7247\u4e2d\u3002\u6b64\u7248\u672c\u4f7f\u7528\u5185\u6838\u52a8\u6001\u8ddf\u8e2a\u6765\u68c0\u6d4b blk_account_io_start() \u548c blk_account_io_done() \u51fd\u6570\uff0c\u5e76\u5c06\u5b83\u4eec\u4e4b\u95f4\u4ee5 arg0 \u4e3a\u952e\u7684\u65f6\u95f4\u6233\u4f20\u9012\u7ed9\u6bcf\u4e2a\u51fd\u6570\u3002 kprobe \u4e0a\u7684 arg0 \u662f\u8be5\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u53c2\u6570\u662f struct request *\uff0c\u5176\u5185\u5b58\u5730\u5740\u7528\u4f5c\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n*_example.txt \u6587\u4ef6\u4e2d\u8fd8\u63d0\u4f9b\u4e86\u8fd9\u4e9b\u5de5\u5177\u7684\u5c4f\u5e55\u622a\u56fe\uff0c\u6211\u5728\u5176\u4e2d\u51c6\u786e\u89e3\u91ca\u4e86\u6211\u4eec\u6240\u770b\u5230\u7684\u5185\u5bb9\u3002\u4f8b\u5982\uff1atools# more biolatency_example.txtDemolatency of biolatency\uff0cLinux BPF/bpftrace \u7248\u672c\u3002\u8fd9\u4f1a\u8ddf\u8e2a\u5757 I/O\uff0c\u5e76\u5c06\u5ef6\u8fdf\u663e\u793a\u4e3a 2 \u7684\u5e42\u76f4\u65b9\u56fe\u3002\u4f8b\u5982\uff1a# biolatency.btAttaching 3 probes...Tracing block device I/O...\u6309Ctrl-C \u7ed3\u675f\u3002^C@usecs:[256, 512) 2 | |[512, 1K) 10 |@ |[1K, 2K) 426 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@|[2K, 4K) 230 |@@@@@@@@@@@@@@@@@@@@@@@ @@@@@ |[4K, 8K) 9 |@ |[8K, 16K) 128 |@@@@@@@@@@@@@@@ |[16K, 32K) 68 |@@@@@ @@@ |[32K, 64K) 0 | |[64K, 128K) 0 | |[128K, 256K) 10 |@ |\u8ddf\u8e2a\u65f6\uff0c\u8fd9\u8868\u660e 426 \u5757 I/O \u7684\u5ef6\u8fdf\u5728 1K \u5230 2Kusecs\uff081024 \u5230 2048 \u5fae\u79d2\uff09\u4e4b\u95f4\uff0c\u5728 1 \u5230 2 \u6beb\u79d2\u4e4b\u95f4\u3002\u8fd8\u6709\u4e24\u79cd\u6a21\u5f0f\u53ef\u89c1\uff0c\u4e00\u4e2a\u5728 1 \u5230 2 \u6beb\u79d2\u4e4b\u95f4\uff0c\u53e6\u4e00\u4e2a\u5728 8 \u5230 16 \u6beb\u79d2\u4e4b\u95f4\uff1a\u8fd9\u542c\u8d77\u6765\u50cf\u662f\u7f13\u5b58\u547d\u4e2d\u548c\u7f13\u5b58\u672a\u547d\u4e2d\u3002\u8fd8\u6709 10 \u4e2a I/O \u5ef6\u8fdf\u4e3a 128 \u5230 256 \u6beb\u79d2\uff1a\u5f02\u5e38\u503c\u3002\u5176\u4ed6\u5de5\u5177\u548c\u4eea\u5668\uff0c\u5982 biosnoop.bt\uff0c\u53ef\u4ee5\u66f4\u6e05\u695a\u5730\u4e86\u89e3\u8fd9\u4e9b\u5f02\u5e38\u503c\u3002[...] \u6709\u65f6\u5728\u5c1d\u8bd5\u7406\u89e3\u8fd9\u4e9b\u5de5\u5177\u65f6\u76f4\u63a5\u5207\u6362\u5230\u793a\u4f8b\u6587\u4ef6\u662f\u6700\u6709\u6548\u7684\uff0c\u56e0\u4e3a\u8f93\u51fa\u53ef\u80fd\u662f\u4e0d\u8a00\u800c\u55bb\u7684\uff08\u6309\u8bbe\u8ba1\uff01\uff09\u3002\u5728 /man/man8 \u4e0b\u8fd8\u6709\u6bcf\u4e2a\u5de5\u5177\u7684\u624b\u518c\u9875\u3002\u5b83\u4eec\u5305\u62ec\u5173\u4e8e\u8f93\u51fa\u5b57\u6bb5\u7684\u90e8\u5206\uff0c\u4ee5\u53ca\u5de5\u5177\u7684\u9884\u671f\u5f00\u9500\u3002 # nroff -man man/man8/biolatency.8biolatency(8) \u7cfb\u7edf\u7ba1\u7406\u5458\u624b\u518c biolatency(8)NAME biolatency.bt - \u5757 I/O \u5ef6\u8fdf\u4f5c\u4e3a\u76f4\u65b9\u56fe\u3002\u4f7f\u7528 bpftrace/eBPF.SYNOPSIS biolatency.btDESCRIPTION \u8be5\u5de5\u5177\u5c06\u5757\u8bbe\u5907 I/O\uff08\u78c1\u76d8 I/O\uff09\u4e2d\u82b1\u8d39\u7684\u65f6\u95f4\uff08\u5ef6\u8fdf\uff09\u603b\u7ed3\u4e3a 2 \u7684\u5e42\u76f4\u65b9\u56fe\u3002\u8fd9\u5141\u8bb8\u7814\u7a76\u5206\u5e03\uff0c\u5305\u62ec\u6a21\u5f0f\u548c\u5f02\u5e38\u503c\u3002\u901a\u5e38\u6709\u4e24\u79cd\u6a21\u5f0f\uff0c\u4e00\u79cd\u7528\u4e8e\u8bbe\u5907\u7f13\u5b58\u547d\u4e2d\uff0c\u53e6\u4e00\u79cd\u7528\u4e8e\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u5de5\u5177\u663e\u793a\u3002\u5ef6\u8fdf\u5f02\u5e38\u503c\u4e5f\u5c06\u663e\u793a\u3002[...] \u7f16\u5199\u6240\u6709\u8fd9\u4e9b\u624b\u518c\u9875\u662f\u5f00\u53d1\u8fd9\u4e9b\u5de5\u5177\u4e2d\u6700\u4e0d\u6709\u8da3\u7684\u90e8\u5206\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7f16\u5199\u5de5\u5177\u7684\u65f6\u95f4\u6bd4\u5f00\u53d1\u5de5\u5177\u6240\u9700\u7684\u65f6\u95f4\u957f\uff0c\u4f46\u5f88\u9ad8\u5174\u770b\u5230\u6700\u7ec8\u7ed3\u679c.\u7531\u4e8e eBPF \u5df2\u7ecf\u5408\u5e76\u5230\u5185\u6838\u4e2d\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u653e\u5728 BCC \u524d\u7aef\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a BPF \u5e93\u548c Python\u3001C++ \u548c lua \u63a5\u53e3\u6765\u7f16\u5199\u7a0b\u5e8f\u3002\u6211\u5df2\u7ecf\u5728 BCC/python \u4e2d\u5f00\u53d1\u4e86\u5f88\u591a\u5de5\u5177\uff0c\u867d\u7136\u5728 BCC \u4e2d\u7f16\u7801\u5f88\u5197\u957f\uff0c\u4f46\u6548\u679c\u5f88\u597d\u3002\u5982\u679c\u60a8\u6b63\u5728\u89e3\u51b3\u6027\u80fd\u95ee\u9898\uff0cbpftrace \u66f4\u9002\u5408\u60a8\u62e5\u6709\u7684\u6240\u6709\u4e00\u6b21\u6027\u81ea\u5b9a\u4e49\u67e5\u8be2\u3002\u5982\u679c\u60a8\u6b63\u5728\u7f16\u5199\u5177\u6709\u8bb8\u591a\u547d\u4ee4\u884c\u9009\u9879\u7684\u5de5\u5177\u6216\u4f7f\u7528 Python \u5e93\u7684\u4ee3\u7406\uff0c\u60a8\u5c06\u9700\u8981\u8003\u8651\u4f7f\u7528 BCC\u3002\n\u4ee5\u4e0b\u662f Netflix \u5c06\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\uff1a\u5728\u6027\u80fd\u56e2\u961f\u4e2d\uff0c\u6211\u540c\u65f6\u4f7f\u7528\u4e24\u8005\uff1aBCC \u7528\u4e8e\u5f00\u53d1\u5176\u4ed6\u4eba\u53ef\u4ee5\u8f7b\u677e\u4f7f\u7528\u7684\u7f50\u5934\u5de5\u5177\uff0c\u4ee5\u53ca\u7528\u4e8e\u5f00\u53d1\u4ee3\u7406\uff1b\u548c bpftrace \u7528\u4e8e\u4e34\u65f6\u5206\u6790\u3002\u6bd4\u5982\u8bf4\uff0c\u5728\u7f51\u7edc\u5de5\u7a0b\u56e2\u961f\u4e2d\uff0c\u4ed6\u4eec\u4e00\u76f4\u5728\u4f7f\u7528 BCC \u6765\u5f00\u53d1\u6ee1\u8db3\u4ed6\u4eec\u9700\u6c42\u7684\u4ee3\u7406\u3002\u5b89\u5168\u56e2\u961f\u6700\u611f\u5174\u8da3\u7684\u662f bpftrace\uff0c\u5b83\u53ef\u4ee5\u5feb\u901f\u68c0\u6d4b\u96f6\u65e5\u6f0f\u6d1e\u3002\u5bf9\u4e8e\u5f00\u53d1\u4eba\u5458\u56e2\u961f\uff1a\u6211\u5e0c\u671b\u4ed6\u4eec\u4f1a\u5728\u4e0d\u77e5\u9053\u7684\u60c5\u51b5\u4e0b\u901a\u8fc7\u6211\u4eec\u6b63\u5728\u6784\u5efa\u7684\u81ea\u52a9\u670d\u52a1 GUI\uff08Vector\uff09\u4f7f\u7528\u8fd9\u4e24\u8005\uff0c\u5e76\u4e14\u5076\u5c14\u53ef\u80fd\u4f1a\u901a\u8fc7 ssh \u8fde\u63a5\u5230\u4e00\u4e2a\u5b9e\u4f8b\u5e76\u8fd0\u884c\u4e00\u4e2a\u56fa\u5b9a\u5de5\u5177\u6216\u4e34\u65f6 bpftrace one-liner\u3002\u4eca\u5e74\u6211\u8fd8\u51fa\u7248\u4e86\u4e00\u672c\u6db5\u76d6 bpftrace \u7684\u4e66\uff1aBPF \u6027\u80fd\u5de5\u5177\uff1aLinux \u7cfb\u7edf\u548c\u5e94\u7528\u7a0b\u5e8f\u53ef\u89c2\u5bdf\u6027\uff0c\u7531 Addison Wesley \u51fa\u7248\uff0c\u5176\u4e2d\u5305\u542b\u8bb8\u591a\u65b0\u7684 bpftrace \u5de5\u5177\u3002\u611f\u8c22 Alastair Robertson \u521b\u5efa bpftrace\uff0c\u611f\u8c22 bpftrace\u3001BCC \u548c BPF \u793e\u533a\u5728\u8fc7\u53bb\u4e94\u5e74\u4e2d\u6240\u505a\u7684\u6240\u6709\u5de5\u4f5c\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u53d1\u8868\u8bc4\u8bba\uff0c\u4f46\u6211\u4e0d\u80fd\u4fdd\u8bc1\u4f60\u7684\u8bc4\u8bba\u4f1a\u6c38\u8fdc\u7559\u5728\u8fd9\u91cc\uff1a\u6211\u53ef\u80fd\u4f1a\u5728\u67d0\u4e2a\u65f6\u5019\u5207\u6362\u8bc4\u8bba\u7cfb\u7edf\uff08\u4f8b\u5982\uff0c\u5982\u679cdisqus\u6dfb\u52a0\u5e7f\u544a\uff09\u3002\u7531 Disqus \u63d0\u4f9b\u652f\u6301\u7684\u8bc4\u8bba", "note_en": "bpftrace is a new open source tracer for Linux for analyzing production performance problems and troubleshooting software. It is used by and has had contributions from many companies including Netfilx, Facebook, Red Hat, Shopify, and others. It was created by Alastair Robertson, a talented UK-based developer who has previously won various coding competitions.\n Linux already has many performance tools, but these are often counter-based and have limited visibility. For example, iostat(1), or a monitoring agent, may tell you your average disk latency, but not the distribution of this latency. Distributions can reveal multiple modes, or outliers, either of which may be the real cause of your performance problems. bpftrace is suited for this kind of analysis: decomposing metrics into distributions or per-event logs, and creating new metrics for visibility into blind spots.\n You can use bpftrace via one-liners or scripts, and it ships with many prewritten tools. Here is an example screenshot: tracing the distribution of read latency for PID 181, and showing it as a power-of-two histogram:\n #  bpftrace -e &#39;kprobe:vfs_read /pid == 30153/ { @start[tid] = nsecs; }kretprobe:vfs_read /@start[tid]/ { @ns = hist(nsecs - @start[tid]); delete(@start[tid]); }&#39;Attaching 2 probes...^C@ns:[256, 512) 10900 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ |[512, 1k) 18291 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|[1k, 2k) 4998 |@@@@@@@@@@@@@@ |[2k, 4k) 57 | |[4k, 8k) 117 | |[8k, 16k) 48 | |[16k, 32k) 109 | |[32k, 64k) 3 | |\n This example instrumented one of many thousands of available events. If you have some weird performance problem, there&#39;s probably some bpftrace one-liner that can shed light on it. For large environments, this ability can help you save millions. For smaller environments, it can be of more use helping eliminate latency outliers.\n I  previously wrote about bpftrace vs other tracers, including  BCC (BPF Compiler Collection). BCC is great for canned complex tools and agents. bpftrace is best for short scripts and ad hoc investigations. In this post I&#39;ll summarize the bpftrace language, variable types, probes, and tools.\n bpftrace uses BPF (Berkeley Packet Filter), an in-kernel execution engine that processes a virtual instruction set. BPF has been extended (aka eBPF) in recent years for providing a safe way to extend kernel functionality, and has become a hot topic in systems engineering, with at least 24 talks on BPF at the last Linux Plumber&#39;s conference. BPF is in the Linux kernel, and bpftrace is the best way to get started using BPF for observability.\n See the bpftrace  INSTALL guide for how to install it, and get the latest version:  0.9.1 was just released. For Kubernetes clusters, there is also  kubectl-trace for running it.\n   The probe specifies what events to instrument, the filter is optional and can filter down the events based on a boolean expression, and the action is the mini program that runs.\n   The probe is  BEGIN, a special probe that runs at the beginning of the program (like awk). There&#39;s no filter. The action is a  printf() statement.\n   This uses a kretprobe to instrument the return of the sys_read() kernel function. If the PID is 181, a special map variable  @bytes is populated with a log2 histogram function with the return value  retval of sys_read(). This produces a histogram of the returned read size for PID 181. Is your app doing lots of 1 byte reads? Maybe that can be optimized.\n  These are libraries of probes which are related. The currently supported types are (more will be added):\n  If you&#39;re new to this terminology: dynamic instrumentation (aka dynamic tracing) is the superpower that lets you trace any software function in a running binary without restarting it. This lets you get to the bottom of just about any problem. However, the functions it exposes are not considered a stable API, as they can change from one software version to another. Hence static instrumentation, where event points are hard-coded and become a stable API. When you write bpftrace programs, try to use the static types first, before the dynamic ones, so that your programs are more stable.\n   Variables with a &#39;@&#39; prefix use BPF maps, which can behave like associative arrays. They can be populated in one of two ways:\n           A great way to learn bpftrace is via one-liners, which I turned into the  one-liners tutorial. That tutorial covers the following one-liners:\n 1. Listing probes bpftrace -l &#39;tracepoint:syscalls:sys_enter_*&#39;2. Hello world bpftrace -e &#39;BEGIN { printf(&#34;hello world\\n&#34;) }&#39;3. File opens bpftrace -e &#39;tracepoint:syscalls:sys_enter_open { printf(&#34;%s %s\\n&#34;, comm, str(args-&gt;filename)) }&#39;4. Syscall counts by process bpftrace -e &#39;tracepoint:raw_syscalls:sys_enter { @[comm] = count() }&#39;5. Distribution of read() bytes bpftrace -e &#39;tracepoint:syscalls:sys_exit_read /pid == 18644/ { @bytes = hist(args-&gt;retval) }&#39;6. Kernel dynamic tracing of read() bytes bpftrace -e &#39;kretprobe:vfs_read { @bytes = lhist(retval, 0, 2000, 200) }&#39;7. Timing read()s bpftrace -e &#39;kprobe:vfs_read { @start[tid] = nsecs } kretprobe:vfs_read /@start[tid]/ { @ns[comm] = hist(nsecs - @start[tid]); delete(@start[tid]) }&#39;8. Count process-level events bpftrace -e &#39;tracepoint:sched:sched* { @[name] = count() } interval:s:5 { exit() }&#39;9. Profile on-CPU kernel stacks bpftrace -e &#39;profile:hz:99 { @[stack] = count() }&#39;10. Scheduler tracing bpftrace -e &#39;tracepoint:sched:sched_switch { @[stack] = count() }&#39;11. Block I/O tracing bpftrace -e &#39;tracepoint:block:block_rq_complete { @ = hist(args-&gt;nr_sector * 512) }&#39;\n   Apart from one-liners, bpftrace programs can be multi-line scripts. bpftrace ships with 28 of these as tools:\n   tools#  ls *.btbashreadline.bt dcsnoop.bt oomkill.bt syncsnoop.bt vfscount.btbiolatency.bt execsnoop.bt opensnoop.bt syscount.bt vfsstat.btbiosnoop.bt gethostlatency.bt pidpersec.bt tcpaccept.bt writeback.btbitesize.bt killsnoop.bt runqlat.bt tcpconnect.bt xfsdist.btcapable.bt loads.bt runqlen.bt tcpdrop.btcpuwalk.bt mdflush.bt statsnoop.bt tcpretrans.bt\n Apart from their use with diagnosing performance issues and general troubleshooting, they also provide another way to learn bpftrace: by example.\n   tools#  cat -n biolatency.bt 1 /* 2 * biolatency.bt Block I/O latency as a histogram. 3 * For Linux, uses bpftrace, eBPF. 4 * 5 * This is a bpftrace version of the bcc tool of the same name. 6 * 7 * Copyright 2018 Netflix, Inc. 8 * Licensed under the Apache License, Version 2.0 (the &#34;License&#34;) 9 * 10 * 13-Sep-2018 Brendan Gregg Created this. 11 */ 12 13 BEGIN 14 { 15 printf(&#34;Tracing block device I/O... Hit Ctrl-C to end.\\n&#34;); 16 } 17 18 kprobe:blk_account_io_start 19 { 20 @start[arg0] = nsecs; 21 } 22 23 kprobe:blk_account_io_done 24 /@start[arg0]/ 25 26 { 27 @usecs = hist((nsecs - @start[arg0]) / 1000); 28 delete(@start[arg0]); 29 } 30 31 END 32 { 33 clear(@start); 34 }\n It&#39;s straightforward and easy to read, and short enough to include on a slide. This version is using kernel dynamic tracing to instrument the blk_account_io_start() and blk_account_io_done() functions, and passes a timestamp between them keyed on arg0 to each. arg0 on kprobe is the first argument to that function, which for these is the struct request *, and its memory address is used as a unique identifier.\n  Screenshots from these tools is also provided in *_example.txt files, where I explain exactly what we are seeing. For example:\n tools#  more biolatency_example.txtDemonstrations of biolatency, the Linux BPF/bpftrace version.This traces block I/O, and shows latency as a power-of-2 histogram. For example:# biolatency.btAttaching 3 probes...Tracing block device I/O... Hit Ctrl-C to end.^C@usecs:[256, 512) 2 | |[512, 1K) 10 |@ |[1K, 2K) 426 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|[2K, 4K) 230 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@ |[4K, 8K) 9 |@ |[8K, 16K) 128 |@@@@@@@@@@@@@@@ |[16K, 32K) 68 |@@@@@@@@ |[32K, 64K) 0 | |[64K, 128K) 0 | |[128K, 256K) 10 |@ |While tracing, this shows that 426 block I/O had a latency of between 1K and 2Kusecs (1024 and 2048 microseconds), which is between 1 and 2 milliseconds.There are also two modes visible, one between 1 and 2 milliseconds, and anotherbetween 8 and 16 milliseconds: this sounds like cache hits and cache misses.There were also 10 I/O with latency 128 to 256 ms: outliers. Other tools andinstrumentation, like biosnoop.bt, can shed more light on those outliers.[...]\n Sometimes it can be most effective to switch straight to the example file when trying to understand these tools, since the output may be self evident (by design!).\n  There are also man pages for every tool, under /man/man8. They include sections on the output fields, and expected overhead of the tool.\n #  nroff -man man/man8/biolatency.8biolatency(8) System Manager&#39;s Manual biolatency(8)NAME biolatency.bt - Block I/O latency as a histogram. Uses bpftrace/eBPF.SYNOPSIS biolatency.btDESCRIPTION This tool summarizes time (latency) spent in block device I/O (disk I/O) as a power-of-2 histogram. This allows the distribution to be studied, including modes and outliers. There are often two modes, one for device cache hits and one for cache misses, which can be shown by this tool. Latency outliers will also be shown.[...]\n Writing all these man pages was the least fun part of developing these tools, and in some cases tool longer to write than the tool took to develop, but it&#39;s nice to see the final result.\n  Since eBPF has been merging in the kernel, most effort has been on the  BCC front-end, which provides a BPF library and Python, C++, and lua interfaces for writing programs. I&#39;ve developed a lot of  tools in BCC/python, and it works great, although coding in BCC is verbose. If you&#39;re hacking away at a performance issue, bpftrace is better for all the one-off custom queries you have. If you&#39;re writing a tool with many command line options, or an agent that uses Python libraries, you&#39;ll want to consider using BCC.\n Here&#39;s how these will be used at Netflix: on the performance team, I use both: BCC for developing canned tools that others can easily use, and for developing agents; and bpftrace for ad hoc analysis. On, say, the network engineering team, they have been using BCC to develop an agent for their needs. The security team are most interested in bpftrace for quick ad hoc instrumentation for detecting zero day vulnerabilities. And for the developer teams: I expect they&#39;ll use both without knowing it via the self-service GUIs we are building (Vector), and occasionally may ssh onto an instance and run a canned tool or ad hoc bpftrace one-liner.\n   I also have a book coming out this year that covers bpftrace:  BPF Performance Tools: Linux System and Application Observability, to be published by Addison Wesley, and which contains many new bpftrace tools.\n Thanks to Alastair Robertson for creating bpftrace, and the bpftrace, BCC, and BPF communities for all the work over the past five years.\n    You can comment here, but I can&#39;t guarantee your comment will remain here forever: I might switch comment systems at some point (eg, if disqus add advertisements).\n comments powered by  Disqus", "posttime": "2021-08-10 01:19:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5168\u9762,introduction,bpftrace", "title": "Bpftrace \u7684\u5168\u9762\u4ecb\u7ecd", "title_en": "A Thorough Introduction to Bpftrace", "transed": 1, "url": "https://www.brendangregg.com/blog/2019-08-19/bpftrace.html", "via": "", "real_tags": ["\u5168\u9762", "bpftrace"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072347, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u5c0f\u96c6\u5408\u662f\u4ece\u8fc5\u901f\u6d88\u4ea1\u7684 Geocities \u4e2d\u4fdd\u5b58\u4e0b\u6765\u7684\uff0cArchive Team \u6b63\u5728\u62fc\u547d\u5730\u5de5\u4f5c\u4ee5\u4fdd\u5b58\u5386\u53f2\u6863\u6848\u3002\u8bf7\u8003\u8651\u8bbf\u95ee\u6211\u4eec\u7684\u7f51\u7ad9\u5e76\u5e2e\u52a9\u6211\u4eec\u6536\u96c6\u3001\u6559\u80b2\u548c\u5199\u4f5c\u3002", "note_en": "This small collection was saved from the rapidly dying Geocities, which  Archive Team is working desperately to save for a historical archive. Please consider visit our site and helping us with collecting, education, and writing.", "posttime": "2021-08-10 01:19:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "construction,\u4fdd\u5b58", "title": "\ufffd\ufffd\u6b63\u5728\u65bd\u5de5\ud83d\udea7", "title_en": "Under Construction", "transed": 1, "url": "http://www.textfiles.com/underconstruction/", "via": "", "real_tags": ["\u4fdd\u5b58"]}]