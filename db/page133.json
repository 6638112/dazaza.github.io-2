[{"category": "", "categoryclass": "", "imagename": "abc583fc1a4aecb759f34e079b198bb5.png", "infoid": 1072162, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e9a\u5386\u5c71\u5927\u00b7\u963f\u52a0\u76ae\u6258\u592b\uff08Aleksandr Agapitov\uff09\u8ba8\u8bba\u4e86\u56f4\u7ed5\u4ed6\u51b3\u5b9a\u4ece Xsolla \u88c1\u5458\u7ea6 150 \u540d\u5458\u5de5\u7684\u6700\u65b0\u4e89\u8bae\u3002\u4ed6\u89e3\u91ca\u4e86\u5982\u4f55\u51c6\u786e\u8bc4\u4f30\u5458\u5de5\u7ee9\u6548\u4ee5\u53ca\u4ed6\u5bf9\u6279\u8bc4\u4ed6\u7684\u4eba\u7684\u770b\u6cd5\u3002 Meduza \u4e8e 8 \u6708 6 \u65e5\u53d1\u8868\u4e86\u5bf9 Agapitov \u7684\u91c7\u8bbf\u3002\u4ee5\u4e0b\u662f\u91c7\u8bbf\u6458\u8981\u3002\u516c\u53f8\u88c1\u5458\u51b3\u5b9a\u7684\u7075\u611f\u6765\u81ea Netflix\u3001Harward \u548c\u5176\u4ed6\u7ec4\u7ec7\uff0c\u8fd9\u4e9b\u7ec4\u7ec7\u5b9a\u671f\u89e3\u96c7 10% \u6700\u4e0d\u656c\u4e1a\u548c\u6548\u7387\u6700\u4f4e\u7684\u5458\u5de5\u3002\u7136\u800c\uff0cXsolla \u6ca1\u6709\u8ba1\u5212\u89e3\u96c7\u8fd9\u4e48\u591a\u4eba\uff0c\u76f4\u5230\u5b83\u505c\u6b62\u540c\u6bd4\u589e\u957f 40%\u3002\u7ee9\u6548\u8bc4\u4f30\u7cfb\u7edf\u4e8e 2021 \u5e74\u521d\u5b9e\u65bd\u3002\u516c\u53f8\u6839\u636e 30 \u4e2a\u7279\u5f81\u4ee5 100 \u5206\u5236\u8861\u91cf\u5458\u5de5\u7684\u6548\u7387\u3002\u8be5\u5217\u8868\u5305\u62ec\u5728\u5185\u90e8 Wiki \u4e2d\u64b0\u5199\u548c\u9605\u8bfb\u6587\u7ae0\u3001\u521b\u5efa\u548c\u5173\u95ed\u4efb\u52a1\u5de5\u5355\uff0c\u4ee5\u53ca\u4eea\u8868\u677f\u6d3b\u52a8\u548c\u53c2\u4e0e\u5185\u90e8\u4f1a\u8bae\u3002\u6839\u636e\u963f\u52a0\u76ae\u6258\u592b\u7684\u8bf4\u6cd5\uff0c\u5199\u4f5c\u548c\u9605\u8bfb\u6587\u672c\u6bd4\u505a\u6f14\u8bb2\u66f4\u6709\u6548\u7387\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4ed6\u8ba4\u4e3a\u6bcf\u4e2a\u5458\u5de5\u90fd\u5e94\u8be5\u9605\u8bfb Xsolla Wiki \u4e2d\u6709\u5173\u4e1a\u52a1\u548c\u5176\u4ed6\u516c\u53f8\u7684\u4fe1\u606f\u3002 \u201c\u6709\u4e9b\u4eba\u53ea\u662f\u4e0d\u60f3\u81ea\u5b66\u6216\u4e86\u89e3\u516c\u53f8\u7684\u8ba1\u5212\u3002\u6211\u4eec\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u4e86\u4e30\u539a\u7684\u9063\u6563\u8d39\uff0c\u201d\u963f\u52a0\u76ae\u6258\u592b\u8bf4\u3002\u827e\u514b\u7d22\u62c9\u53ea\u8ddf\u8e2a\u5de5\u4f5c\u65e5\u5fd7\uff0c\u6240\u4ee5\u521b\u59cb\u4eba\u8ba4\u4e3a\u516c\u53f8\u6ca1\u6709\u4fb5\u72af\u5458\u5de5\u9690\u79c1\u3002\u4ed6\u58f0\u79f0\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u7684\u201c\u6570\u5b57\u8db3\u8ff9\u201d\u4e0d\u53ef\u89c1\uff0c\u4ed6\u4eec\u5c31\u4e0d\u5e94\u8be5\u5728 Xsolla \u5de5\u4f5c\u3002\u8be5\u516c\u53f8\u8fd8\u8ba1\u5212\u5b9e\u65bd\u6240\u8c13\u7684\u201c\u6570\u5b57\u955c\u50cf\u201d\uff0c\u4ee5\u4fbf\u6bcf\u4f4d\u5458\u5de5\u90fd\u80fd\u4e86\u89e3\u4eba\u5de5\u667a\u80fd\u5bf9\u4ed6\u4eec\u7684\u5de5\u4f5c\u548c\u656c\u4e1a\u5ea6\u7684\u770b\u6cd5\u3002\u7136\u800c\uff0c\u5f00\u53d1\u56e2\u961f\u5bf9\u8fd9\u4e2a\u60f3\u6cd5\u5e76\u4e0d\u70ed\u60c5\u200b\u200b\uff0c\u6240\u4ee5\u5b83\u7684\u63a8\u51fa\u6b63\u5728\u7b49\u5f85\u4e2d\u3002\n\u7531\u4e8e\u5927\u6d41\u884c\u5bf9\u6e38\u620f\u884c\u4e1a\u7684\u5f71\u54cd\uff0cXsolla \u53bb\u5e74\u7684\u6536\u5165\u589e\u957f\u4e86 80%\u3002\u7136\u800c\uff0c\u589e\u957f\u653e\u7f13\u662f\u56e0\u4e3a\u7f3a\u4e4f\u7ebf\u4e0b\u6d3b\u52a8\u4f7f\u5f97\u5e73\u53f0\u66f4\u96be\u5438\u5f15\u65b0\u5ba2\u6237\u3002\u6839\u636e Agapitov \u7684\u8bf4\u6cd5\uff0cXsolla \u5728\u8fc7\u53bb\u516d\u4e2a\u6708\u4e2d\u505c\u6b62\u4e86 40% \u7684\u589e\u957f\uff0c\u56e0\u6b64\u4ed6\u51b3\u5b9a\u88c1\u5458\u3002\u5927\u7ea6150\u540d\u4e0b\u5c97\u5458\u5de5\u5360\u516c\u53f8500\u4eba\u5de6\u53f3\u5458\u5de5\u7684\u4e09\u5206\u4e4b\u4e00\u3002\u76ee\u6807\u662f\u5c06\u5de5\u8d44\u9884\u7b97\u51cf\u5c11 10%\uff0c\u800c\u4e0d\u662f\u89e3\u96c7 10% \u7684\u5458\u5de5\u3002\u963f\u52a0\u76ae\u6258\u592b\u51c6\u5907\u5728\u5fc5\u8981\u65f6\u4ece\u8bc4\u7ea7\u5e95\u90e8\u89e3\u96c7\u5c3d\u53ef\u80fd\u591a\u7684\u8868\u73b0\u4e0d\u4f73\u7684\u4eba\uff0c\u4ee5\u51cf\u5c11 10% \u7684\u5de5\u8d44\u57fa\u91d1\u3002\u5927\u591a\u6570\u88c1\u5458\u53d1\u751f\u5728\u827e\u514b\u7d22\u62c9\u6700\u521d\u6210\u7acb\u7684\u5f7c\u5c14\u59c6\u3002\u963f\u52a0\u76ae\u6258\u592b\u89e3\u96c7\u4e86 6 \u540d\u7f8e\u56fd\u5458\u5de5\uff0850 \u540d\u7f8e\u56fd\u5458\u5de5\uff09\u548c 2 \u540d\u4e9a\u6d32\u5458\u5de5\uff0812 \u540d\u5728\u97e9\u56fd\u529e\u516c\u5ba4\u5de5\u4f5c\u7684\u5458\u5de5\uff09\u3002\u516c\u53f8\u88c1\u6389\u4e86\u4e0d\u540c\u9886\u57df\u7684\u4e13\u804c\u4eba\u5458\u3002 \u201c\u6700\u5dee\u7684\u7a0b\u5e8f\u5458\u3001\u6700\u5dee\u7684\u8425\u9500\u4eba\u5458\u3001\u6700\u5dee\u7684\u529e\u516c\u5ba4\u7ecf\u7406\u3001\u6700\u5dee\u7684\u7ba1\u7406\u5458\uff0c\u751a\u81f3\u6700\u5dee\u7684\u4f1a\u8ba1\u5e08\uff0c\u201dAgapitov \u8bc4\u8bba\u9053\u3002 Xsolla \u8ba1\u5212\u6bcf 12 \u4e2a\u6708\u524a\u51cf 10% \u7684\u9884\u7b97\uff0c\u76f4\u5230\u5b83\u518d\u6b21\u5f00\u59cb\u663e\u793a\u81f3\u5c11 40% \u7684\u589e\u957f\u3002\u8be5\u516c\u53f8\u76ee\u524d\u6b63\u5728\u4e9a\u6d32\u548c\u6b27\u6d32\u5bfb\u627e\u65b0\u7684\u4eba\u624d\u3002\n\u963f\u52a0\u76ae\u6258\u592b\u8fd8\u627f\u8ba4\uff0c\u4ed6\u7684\u76f4\u8a00\u4e0d\u8bb3\u53ef\u80fd\u4f1a\u5413\u5230\u5f88\u591a\u5458\u5de5\u3002 \u201c\u6211\u610f\u8bc6\u5230\u6211\u7684\u60c5\u5546\u6709\u95ee\u9898\uff0c\u4f46\u6211\u6b63\u5728\u52aa\u529b\uff0c\u201d\u4ed6\u8bf4\u3002\u5c3d\u7ba1\u5927\u89c4\u6a21\u88c1\u5458\uff0c\u4ed6\u5e76\u4e0d\u5bb3\u6015\u53ef\u80fd\u7684\u8c03\u67e5\u3002\u4ed6\u8ba4\u4e3a Xsolla \u5e76\u6ca1\u6709\u8fdd\u53cd\u4fc4\u7f57\u65af\u7684\u52b3\u52a8\u6cd5\uff0c\u800c\u4e14\u8fd8\u6ca1\u6709\u6b63\u5f0f\u89e3\u96c7\u4efb\u4f55\u4eba\u3002 \u201c\u5bf9\u4e8e\u6536\u5230\u8fd9\u5c01\u4fe1\u7684\u6240\u6709\u5458\u5de5\uff0c\u6211\u4eec\u8bf4\u516c\u53f8\u4e0d\u91cd\u89c6\u4f60\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u4e3a\u4f60\u627e\u5230\u4e00\u4efd\u85aa\u6c34\u66f4\u9ad8\u7684\u66f4\u597d\u7684\u5de5\u4f5c\uff0c\u201d\u963f\u52a0\u76ae\u6258\u592b\u8bc4\u8bba\u9053\u3002 \u201c\u540c\u6837\uff0c\u4f60\u5bf9 Xsolla \u7684\u672a\u6765\u4e5f\u4e0d\u611f\u5174\u8da3\u3002\u6240\u4ee5\u8fd9\u662f\u4f60\u6177\u6168\u7684\u9063\u6563\u8d39\uff0c\u795d\u4f60\u597d\u8fd0\u3002\u201d\u827e\u514b\u7d22\u62c9\u521b\u59cb\u4eba\u4e5f\u610f\u8bc6\u5230\uff0c\u5728\u8fd9\u573a\u4e89\u8bae\u4e4b\u540e\uff0c\u6709\u4e9b\u4eba\u53ef\u80fd\u60f3\u8981\u79bb\u5f00\u3002\u4f46\u4ed6\u8ba4\u4e3a\u4ed6\u7684\u516c\u53f8\u53ea\u9700\u8981\u5173\u5fc3\u4e2a\u4eba\u548c\u804c\u4e1a\u53d1\u5c55\u7684\u656c\u4e1a\u5458\u5de5\u3002\u4ed6\u58f0\u79f0\u7f8e\u56fd\u5a92\u4f53\u4f1a\u8ba4\u4e3a\u8fd9\u4e00\u51b3\u5b9a\u975e\u5e38\u79ef\u6781\uff0c\u56e0\u4e3a Xsolla \u9075\u5faa\u201c\u8be5\u5730\u533a\u5e38\u89c1\u7684\u505a\u6cd5\u201d\u3002\u963f\u52a0\u76ae\u6258\u592b\u63a5\u7740\u8bf4\uff0c\u5982\u4eca\u7684\u516c\u53f8\u5982\u4f55\u4fdd\u62a4\u5c11\u6570\u65cf\u88d4\uff0c\u5982\u679c\u4e0d\u5f97\u4e0d\u89e3\u96c7\u4ed6\u4eec\u7684\u4ee3\u8868\uff0c\u53ef\u80fd\u4f1a\u8fc7\u4e8e\u8c28\u614e\uff0c\u8fd9\u4f1a\u4f7f\u8fd9\u4e9b\u5458\u5de5\u51e0\u4e4e\u4e0d\u53d7\u88c1\u5458\u7684\u5f71\u54cd\u3002 \u201c\u6211\u4eec\u57fa\u4e8e\u7b97\u6cd5\u7684\u89e3\u51b3\u65b9\u6848\u5c3d\u53ef\u80fd\u65e0\u504f\u89c1\u3002\u56e0\u6b64\uff0c\u4ece\u7f8e\u56fd\u5a92\u4f53\u548c\u793e\u4f1a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\uff08\u6839\u636e\u7b97\u6cd5\u89e3\u96c7\u4e00\u4e2a\u4eba\uff09\u6bd4\u67d0\u4e9b\u7ecf\u7406\u6839\u636e\u4ed6\u4eec\u81ea\u5df1\u7684\u89c2\u70b9\u8fd9\u6837\u505a\u8981\u597d\u5f97\u591a\uff0c\u201c\u4ed6\u8bf4\u3002\u6839\u636e\u963f\u52a0\u76ae\u6258\u592b\u7684\u8bf4\u6cd5\uff0c\u6574\u4e2a\u4e89\u8bae\u59cb\u4e8e\u4fc4\u7f57\u65af\u7684\u8fdc\u7a0b\u5de5\u4f5c\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u95ee\u9898\u3002\u4ed6\u58f0\u79f0\u6709\u4e9b\u4eba\u89c9\u5f97\u5728\u5bb6\u5de5\u4f5c\u5f88\u56f0\u96be\uff0c\u6240\u4ee5\u5982\u679c\u6709\u4eba\u6279\u8bc4\u4ed6\u7684\u51b3\u5b9a\uff0c\u90a3\u53ea\u662f\u56e0\u4e3a\u4ed6\u4eec\u610f\u8bc6\u5230\u81ea\u5df1\u662f\u6548\u7387\u4f4e\u4e0b\u7684\u5458\u5de5\u3002\u827e\u514b\u7d22\u62c9\u521b\u59cb\u4eba\u8fd8\u6307\u51fa\uff0c\u4e0e\u4ed6\u5408\u4f5c\u7684\u7f8e\u56fd\u516c\u5173\u516c\u53f8\u5e76\u4e0d\u8ba4\u4e3a\u8fd9\u79cd\u60c5\u51b5\u662f\u516c\u53f8\u7684\u5371\u673a\u3002 \u201c\u65e0\u8bba\u4f60\u544a\u8bc9\u5a92\u4f53\u4ec0\u4e48\uff0c\u53ea\u6709\u4e24\u79cd\u6545\u4e8b\u2014\u2014\u6050\u60e7\u7684\u6545\u4e8b\u548c\u5e0c\u671b\u7684\u6545\u4e8b\u3002\u6050\u60e7\u5356\u5f97\u66f4\u597d\uff0c\u8fd9\u662f\u4e00\u4e2a\u5356\u5f97\u5f88\u597d\u7684\u53ef\u6015\u6545\u4e8b\uff0c\u201d\u963f\u52a0\u76ae\u6258\u592b\u8bf4\u3002", "note_en": "Aleksandr Agapitov discussed the latest controversy surrounding his decision to lay off around 150 employees from Xsolla. He explained how exactly employee performance has been evaluated and what he thinks of people criticizing him.\n  An interview with Agapitov was   published by Meduza  on August 6. Below is the summary of that interview.\n  The company\u2019s decision regarding layoffs was inspired by Netflix, Harward, and other organizations that lay off 10% of the most unengaged and ineffective employees on a regular basis. However, Xsolla had no plans to fire these many people until it stopped growing by 40% year-over-year.\n The performance rating system was implemented in early 2021. The company measures its employees\u2019 efficiency on a 100-point scale, based on 30 characteristics. The list includes writing and reading articles in the internal Wiki, creating and closing task tickets, as well as dashboard activity and participation in internal meetings.\n According to Agapitov, writing and reading texts is way more efficient than making presentations. That\u2019s why he thinks that every employee should read the information about the business and other companies in Xsolla\u2019s Wiki. \u201cSome people just didn\u2019t really want to educate themselves or learn about the company\u2019s plans. We offered them a generous severance pay,\u201d Agapitov said.\n Xsolla only tracks work logs, so the founder thinks that the company doesn\u2019t violate employees\u2019 privacy. He claimed that if a person\u2019s \u201cdigital footprint\u201d is not visible, they shouldn\u2019t work at Xsolla.\n The company also planned to implement the so-called \u201cdigital mirror,\u201d so every employee could learn what AI thinks of their work and engagement. However, the development team wasn\u2019t enthusiastic about this idea, so its rollout is pending.\n  Xsolla\u2019s revenue increased by 80% last year, thanks to the effect that the pandemic had on the games industry.\n However, the growth slowed down because the lack of offline events made it harder to attract new customers to the platform.\n According to Agapitov, Xsolla stopped showing a 40% growth during the last six months, so he decided to reduce the staff.\n  Roughly 150 laid-off employees account for a third of the company\u2019s staff of around 500 people. The goal was to reduce the salary budget by ten percent, not to fire 10 percent of the employees. Agapitov was prepared to fire as many low-performing people from the bottom of the rating as necessary to achieve a 10% salary fund reduction.\n Most layoffs happened in Perm, where Xsolla was initially founded. Agapitov fired six people from the US (out of 50 US-based staff) and two people from Asia (out of 12 employees working at the South Korean office).\n The company laid off people specializing in different spheres. \u201cWorst programmers, worst marketers, worst office managers, worst admins, and even worst accountants,\u201d Agapitov commented.\n Xsolla plans to cut 10% of its budget every 12 months until it starts showing at least a 40% growth again. The company is now looking for new talent in Asia and Europe.\n Agapitov also admitted that his blunt statements could have scared a lot of employees. \u201cI realize I\u2019m having trouble with my emotional intelligence but I\u2019m working on it,\u201d he said.\n Despite the mass layoffs, he isn\u2019t afraid of possible investigations. He thinks that Xsolla hasn\u2019t violated Russian labor laws and, formally, hasn\u2019t fired anyone yet. \u201cTo all employees who received the letter, we said that the company doesn\u2019t value you, so we will find you a better job with a better salary,\u201d Agapitov commented. \u201cLikewise, you aren\u2019t interested in Xsolla\u2019s future either. So here is your generous severance pay, good luck.\u201d\n The Xsolla founder also realizes that some people might want to leave in the wake of this controversy. But he thinks that his company only needs engaged employees who care about their personal and professional growth.\n  He claimed that the US media would have seen the decision as quite positive, as Xsolla follows the \u201cpractices common for this region.\u201d\n Agapitov went on to say how companies nowadays protect minorities and can be overly cautios if they have to fire their representatives, which can make these employees almost immune to layoffs. \u201cOur algorithm-based solution is as unbiased as possible. Therefore, from the point of view of the US media and society, it is much better for us [to fire a person based on the algorithm] rather than some manager doing it, based on their own views,\u201d he said.\n According to Agapitov, the whole controversy started because remote work in Russia is a huge problem. He claimed that some find it difficult to work from home, so if someone criticizes his decision, it is only because they realize that they are inefficient employees themselves.\n The Xsolla founder also noted that the US PR firm he worked with doesn\u2019t see this situation as a crisis for the company. \u201cWhatever you tell the press, there are only two kinds of stories  \u00a0\u2014  stories of fear and stories of hope. Fear sells better, and this is a scary story that sells very well,\u201d Agapitov said.", "posttime": "2021-08-09 02:57:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,\u6267\u884c\u5b98,ceo", "title": "\u827e\u514b\u7d22\u62c9\u9996\u5e2d\u6267\u884c\u5b98\u8868\u793a\uff0c\u4f7f\u7528\u57fa\u4e8e\u7b97\u6cd5\u7684\u89e3\u51b3\u65b9\u6848\u89e3\u96c7\u53ef\u4ee5\u4fdd\u62a4\u5c11\u6570\u65cf\u88d4", "title_en": "Xsolla CEO says firing using an algorithm-based solution protect minorities", "transed": 1, "url": "https://gameworldobserver.com/2021/08/06/xsolla-founder-on-mass-layoffs-and-ai-based-employee-appraisal-system", "via": "", "real_tags": ["\u7b97\u6cd5", "\u6267\u884c\u5b98", "ceo"]}, {"category": "", "categoryclass": "", "imagename": "111c6720bb4383460be17dcfe7dffeaf.jpeg", "infoid": 1072160, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u82cf\u683c\u5170\u5a01\u58eb\u5fcc\u5236\u9020\u5546\u683c\u5170\u83f2\u8fea (Glenfiddich) \u5ba3\u5e03\uff0c\u5c06\u6539\u9020\u5176\u9001\u8d27\u5361\u8f66\uff0c\u4ee5\u4f7f\u7528\u7531\u5176\u81ea\u5df1\u7684\u5a01\u58eb\u5fcc\u84b8\u998f\u8fc7\u7a0b\u4ea7\u751f\u7684\u5e9f\u7269\u5236\u6210\u7684\u4f4e\u6392\u653e\u6cbc\u6c14\u3002\u8be5\u516c\u53f8\u8868\u793a\u5df2\u5728\u5176\u4f4d\u4e8e\u82cf\u683c\u5170\u4e1c\u5317\u90e8\u7684 Dufftown \u917f\u9152\u5382\u5b89\u88c5\u4e86\u52a0\u6cb9\u7ad9\uff0c\u4f7f\u7528\u5176\u6bcd\u516c\u53f8 William Grant and Sons \u5f00\u53d1\u7684\u6280\u672f\u3002\u5b83\u5c06\u5176\u751f\u4ea7\u5e9f\u7269\u548c\u6b8b\u7559\u7269\u8f6c\u5316\u4e3a\u4ea7\u751f\u6700\u5c11\u4e8c\u6c27\u5316\u78b3\u548c\u5176\u4ed6\u6709\u5bb3\u6392\u653e\u7269\u7684\u8d85\u4f4e\u78b3\u71c3\u6599 (ULCF) \u6c14\u4f53\u3002 Glenfiddich \u8868\u793a\uff0c\u5411\u4f7f\u7528\u7531\u9152\u5382\u5e9f\u54c1\u5236\u6210\u7684\u71c3\u6599\u7684\u8fc7\u6e21\u662f\u201c\u95ed\u73af\u201d\u53ef\u6301\u7eed\u53d1\u5c55\u8ba1\u5212\u7684\u4e00\u90e8\u5206\u3002 William Grant \u917f\u9152\u5382\u4e3b\u7ba1 Stuart Watts \u8868\u793a\uff0c\u4f20\u7edf\u4e0a\uff0c\u683c\u5170\u83f2\u8fea\u51fa\u552e\u9ea6\u82bd\u5236\u9020\u8fc7\u7a0b\u4e2d\u5269\u4e0b\u7684\u8c37\u7269\uff0c\u7528\u4e8e\u9ad8\u86cb\u767d\u725b\u9972\u6599\u3002\u7136\u800c\uff0c\u901a\u8fc7\u538c\u6c27\u6d88\u5316\u2014\u2014\u7ec6\u83cc\u5206\u89e3\u6709\u673a\u7269\u8d28\uff0c\u4ea7\u751f\u6cbc\u6c14\u2014\u2014\u917f\u9152\u5382\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6db2\u4f53\u5e9f\u7269\u6765\u5236\u9020\u71c3\u6599\uff0c\u5e76\u6700\u7ec8\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u56de\u6536\u6240\u6709\u5e9f\u7269\u3002 \u201c\u8fd9\u80cc\u540e\u7684\u601d\u8003\u8fc7\u7a0b\u662f&#39;\u6211\u4eec\u80fd\u505a\u4e9b\u4ec0\u4e48\u5bf9\u6211\u4eec\u6240\u6709\u4eba\u90fd\u66f4\u597d\uff1f&#39;\uff0c\u201d\u74e6\u8328\u8bf4\u3002\u8fd9\u5bb6\u84b8\u998f\u5382\u6bcf\u5e74\u9500\u552e\u8d85\u8fc7 1400 \u4e07\u74f6\u5355\u4e00\u9ea6\u82bd\u5a01\u58eb\u5fcc\uff0c\u8868\u793a\u5176\u57fa\u4e8e\u5a01\u58eb\u5fcc\u5e9f\u6599\u7684\u6cbc\u6c14\u5df2\u7ecf\u4e3a\u4e09\u8f86\u7ecf\u8fc7\u7279\u6b8a\u6539\u88c5\u7684\u5361\u8f66\u63d0\u4f9b\u52a8\u529b\uff0c\u8fd9\u4e9b\u5361\u8f66\u5c06\u683c\u5170\u83f2\u8fea\u70c8\u9152\u4ece\u8fbe\u592b\u6566\u7684\u751f\u4ea7\u8fd0\u8f93\u5230\u88c5\u74f6\u548c\u5305\u88c5\uff0c\u8986\u76d6\u5a01\u5ec9\u683c\u5170\u7279\u7684\u56db\u200b\u200b\u4e2a\u5730\u70b9\u5728\u82cf\u683c\u5170\u4e2d\u90e8\u548c\u897f\u90e8\u3002 16 \u4e16\u7eaa\u7684\u82f1\u56fd\u7f16\u5e74\u53f2\u5bb6\u62c9\u6590\u5c14\u00b7\u970d\u6797\u8c22\u5fb7 (Raphael Holinshed) \u5199\u9053\uff0c\u9002\u5ea6\u996e\u7528\u5a01\u58eb\u5fcc\u7684\u8bb8\u591a\u836f\u7528\u76ca\u5904\u5305\u62ec\u9632\u6b62\u201c\u5934\u90e8\u65cb\u8f6c\u3001\u820c\u5934\u6253\u55dd\u2026\u2026\u624b\u98a4\u6296\uff0c\u9aa8\u9abc\u75bc\u75db\u201d\u3002\n\u4e13\u5bb6\u73b0\u5728\u8865\u5145\u8bf4\uff0c\u5b83\u7684\u5e9f\u54c1\u4e5f\u6709\u5229\u4e8e\u73af\u5883\u3002\u683c\u5170\u83f2\u8fea\u8868\u793a\uff0c\u4e0e\u67f4\u6cb9\u548c\u5176\u4ed6\u5316\u77f3\u71c3\u6599\u76f8\u6bd4\uff0c\u5a01\u58eb\u5fcc\u751f\u4ea7\u8fc7\u7a0b\u4e2d\u6392\u653e\u7684\u6cbc\u6c14\u53ef\u5c06\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\u51cf\u5c11 95% \u4ee5\u4e0a\uff0c\u5e76\u5c06\u5176\u4ed6\u6709\u5bb3\u9897\u7c92\u7269\u548c\u6e29\u5ba4\u6c14\u4f53\u6392\u653e\u91cf\u51cf\u5c11\u591a\u8fbe 99%\u3002 Glenfiddich \u4f7f\u7528\u7684\u5361\u8f66\u662f\u5361\u8f66\u5236\u9020\u5546\u4f9d\u7ef4\u67ef\u7684\u6539\u88c5\u8f66\u8f86\uff0c\u901a\u5e38\u4f7f\u7528\u6db2\u5316\u5929\u7136\u6c14\u3002\u636e\u84b8\u998f\u5382\u79f0\uff0c\u6bcf\u8f86\u6cbc\u6c14\u5361\u8f66\u6bcf\u5e74\u5c06\u6392\u653e\u591a\u8fbe 250 \u5428\u7684\u4e8c\u6c27\u5316\u78b3\u3002 Glenfiddich \u62e5\u6709\u5927\u7ea6 20 \u8f86\u5361\u8f66\u7684\u8f66\u961f\uff0cWatts \u76f8\u4fe1\u8be5\u6280\u672f\u53ef\u4ee5\u5e94\u7528\u4e8e William Grant and Sons \u5a01\u58eb\u5fcc\u54c1\u724c\u7684\u6574\u4e2a\u9001\u8d27\u8f66\u961f\u3002\u5b83\u8fd8\u53ef\u4ee5\u6269\u5927\u89c4\u6a21\uff0c\u4e3a\u5176\u4ed6\u516c\u53f8\u7684\u5361\u8f66\u63d0\u4f9b\u71c3\u6599\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0cNova Innovation \u5728\u82cf\u683c\u5170\u897f\u6d77\u5cb8\u5b89\u88c5\u4e86\u4e00\u7cfb\u5217\u6c34\u4e0b\u6da1\u8f6e\u673a\uff0c\u5176\u6da1\u8f6e\u673a\u4ea7\u751f\u53ef\u518d\u751f\u80fd\u6e90\uff0c\u4e3a\u5f53\u5730\u7684\u82cf\u683c\u5170\u5a01\u58eb\u5fcc\u9152\u5382\u4f9b\u7535\u3002\u683c\u5170\u83f2\u8fea\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u5bb6\u4f7f\u7528\u5176\u5e9f\u54c1\u4e3a\u6c7d\u8f66\u63d0\u4f9b\u71c3\u6599\u7684\u516c\u53f8\u3002 2012 \u5e74\uff0c\u72ec\u7acb\u5a01\u58eb\u5fcc\u5236\u9020\u5546\u56fe\u5229\u5df4\u4e01 (Tullibardine) \u6210\u4e3a\u4e16\u754c\u4e0a\u7b2c\u4e00\u5bb6\u4e3a\u6c7d\u8f66\u63d0\u4f9b\u751f\u7269\u71c3\u6599\u539f\u6599\u7684\u917f\u9152\u5382\u3002\u6ce8\u518c E&amp;T \u65b0\u95fb\u7535\u5b50\u90ae\u4ef6\uff0c\u6bcf\u5929\u5c06\u8fd9\u6837\u7684\u7cbe\u5f69\u6545\u4e8b\u53d1\u9001\u5230\u60a8\u7684\u6536\u4ef6\u7bb1\u3002", "note_en": "Scotch whisky maker Glenfiddich has announced that it will convert its delivery trucks to run on low-emission biogas made from waste products from its own whisky distilling process.\n    The company said it has installed fuelling stations at its Dufftown distillery in north-eastern Scotland which use technology developed by its parent company William Grant and Sons. It will convert its production waste and residues into an Ultra-Low Carbon Fuel (ULCF) gas that produces minimal carbon dioxide and other harmful emissions.\n Glenfiddich said the transition to using fuel made from the distillery\u2019s waste product is part of a \u201cclosed-loop\u201d sustainability initiative. Stuart Watts, distillery director at William Grant, said traditionally Glenfiddich has sold off spent grains left over from the malting process to be used for a high-protein cattle feed.\n However, through  anaerobic digestion \u2013 where bacteria break down organic matter, producing biogas \u2013 the distillery can also use the liquid waste from the process to make fuel and eventually recycle all of its waste products this way.\n \u201cThe thought process behind this was \u2018What can we do that\u2019s better for us all?\u2019,\u201d Watts said.\n  The distiller, which sells over 14 million bottles of single-malt whisky a year, said its whisky waste-based biogas is already powering three specially converted trucks that transport Glenfiddich spirit from production at Dufftown through to bottling and packaging, covering four William Grant sites in central and western Scotland.\n Sixteenth-century English chronicler Raphael Holinshed wrote that, when consumed moderately, whisky\u2019s many medicinal benefits include preventing the \u201chead from whirling, the tongue from lisping... the hands from shivering, the bones from aching.\u201d\n Experts now\u00a0add\u00a0that\u00a0its waste products could also benefit the environment. The biogas emitted by whisky&#39;s production process cuts CO2 emissions by over 95 per cent compared to diesel and other fossil fuels and reduces other harmful particulates and greenhouse gas emissions by up to 99 per cent, Glenfiddich said.\n The trucks Glenfiddich is using are converted vehicles from truck maker Iveco that normally run on liquefied natural gas.\u00a0Each biogas truck will displace up to 250 tonnes of CO2 annually, according to the distiller.\n Glenfiddich has a fleet of around 20 trucks and Watts believes the technology could be applied throughout the delivery fleets of William Grant\u00a0and Sons\u2019 whisky brands. It could also be scaled up to fuel other company\u2019s trucks.\n   Earlier this year,  Nova Innovation installed a series of underwater turbines off the west coast of Scotland, with its turbines generating renewable energy to power local Scotch whisky distilleries.\n  Glenfiddich is not the only one using its waste products to fuel its vehicles. In 2012,  independent whisky maker Tullibardine became the world\u2019s first distillery to supply ingredients to make biofuel for vehicles from its waste products.\n        Sign up to the  E&amp;T News e-mail to get great stories like this delivered to your inbox every day.", "posttime": "2021-08-09 02:57:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "whisky,\u5a01\u58eb\u5fcc", "title": "Glenfiddich \u4f7f\u7528\u81ea\u5df1\u7684\u5a01\u58eb\u5fcc\u5e9f\u6599\u4e3a\u5176\u5361\u8f66\u63d0\u4f9b\u71c3\u6599", "title_en": "Glenfiddich uses its own whisky waste to fuel its trucks", "transed": 1, "url": "https://eandt.theiet.org/content/articles/2021/07/glenfiddich-uses-own-whisky-waste-to-fuel-trucks/", "via": "", "real_tags": ["whisky", "\u5a01\u58eb\u5fcc"]}, {"category": "", "categoryclass": "", "imagename": "a65b2560390a4870bdf837f90f62f7d8.jpg", "infoid": 1072157, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7814\u7a76\u4eba\u5458\u8868\u793a\uff0cmacOS \u4e0a Telegram \u7684\u9ad8\u7ea7\u9690\u79c1\u529f\u80fd\u5b58\u5728\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u8be5\u6f0f\u6d1e\u4e3a\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u7684\u8bbe\u5907\u4e0a\u7684\u6d88\u606f\u8bbe\u7f6e\u4e86\u201c\u81ea\u6bc1\u201d\u8ba1\u65f6\u5668\uff0c\u5373\u4f7f\u8fd9\u4e9b\u6d88\u606f\u5df2\u88ab\u5220\u9664\uff0c\u67d0\u4eba\u4e5f\u53ef\u4ee5\u68c0\u7d22\u8fd9\u4e9b\u6d88\u606f\u3002\u6210\u7acb\u3002 Trustwave SpiderLabs \u9996\u5e2d\u5a01\u80c1\u67b6\u6784\u5e08 Reegun Richard Jayapaul \u53d1\u73b0\u4e86 Telegram MacOS \u7684\u81ea\u6bc1\u529f\u80fd\u4e2d\u7684\u7f3a\u9677\uff0c\u8be5\u529f\u80fd\u662f\u4f7f\u7528\u7aef\u5230\u7aef\u52a0\u5bc6\u7684\u6d88\u606f\u5e94\u7528\u7a0b\u5e8f\u7684 Secret-Chat \u65b9\u9762\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u79cd\u52a0\u5bc6\u2014\u2014\u5373\u4f7f\u662f Telegram \u7ba1\u7406\u5458\u4e5f\u6ca1\u6709\u7684\u5bc6\u94a5\u2014\u2014\u201c\u9002\u7528\u4e8e\u90a3\u4e9b\u5173\u5fc3\u804a\u5929\u8bb0\u5f55\u5b89\u5168\u6027\u548c\u9690\u79c1\u7684\u4eba\uff0c\u201d\u4ed6\u5728\u5468\u56db\u53d1\u8868\u7684\u4e00\u7bc7\u5173\u4e8e\u4ed6\u7684\u53d1\u73b0\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u8bf4\u3002\u4e8b\u5b9e\u4e0a\uff0cTelegram \u4e00\u822c\u88ab\u5e7f\u6cdb\u8ba4\u4e3a\u662f\u66f4\u5b89\u5168\u7684\u6d88\u606f\u4f20\u9012\u5e94\u7528\u7a0b\u5e8f\u4e4b\u4e00\u3002\u8bb8\u591a\u7528\u6237\u9009\u62e9\u4ece Facebook \u7684 WhatsApp \u5207\u6362\u5230 Telegram\uff0c\u56e0\u4e3a\u4ed6\u4eec\u62c5\u5fc3\u81ea\u5df1\u7684\u9690\u79c1\u3002 Jayapaul \u4e0e Telegram \u5408\u4f5c\u4fee\u8865\u4e86\u8be5\u6f0f\u6d1e\uff0c\u8be5\u6f0f\u6d1e\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u60c5\u51b5\u4fb5\u72af\u7528\u6237\u7684\u9690\u79c1\u3002\u5728\u8fd9\u6837\u505a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4ed6\u8bf4\u4ed6\u4e86\u89e3\u5230\u516c\u53f8\u6f0f\u6d1e\u62ab\u9732\u8ba1\u5212\u7684\u4e00\u4e2a\u8b66\u544a\uff0c\u8be5\u8ba1\u5212\u963b\u6b62\u7814\u7a76\u4eba\u5458\u5728\u540c\u610f\u63a5\u53d7\u6f0f\u6d1e\u8d4f\u91d1\u7684\u60c5\u51b5\u4e0b\u62ab\u9732\u6f0f\u6d1e\u2014\u2014Jayapaul \u8bf4\u4ed6\u4e0d\u540c\u610f\u8fd9\u4e00\u70b9\u3002\u4ed6\u5199\u9053\uff0c\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5171\u4eab\u4f4d\u7f6e\u3001\u89c6\u9891\u548c\u97f3\u9891\u6d88\u606f\u53ef\u80fd\u4f1a\u6cc4\u6f0f\uff0c\u5373\u4f7f\u6d88\u606f\u5728\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u7684\u8bbe\u5907\u4e0a\u90fd\u88ab\u5b9a\u65f6\u81ea\u6bc1\u3002\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u6ca1\u6709\u6536\u4ef6\u4eba\u6253\u5f00\u6216\u5220\u9664\u90ae\u4ef6\uff0c\u8fd9\u4e9b\u76f8\u540c\u7684\u90ae\u4ef6\u4e5f\u53ef\u80fd\u6cc4\u6f0f\u3002\u7136\u800c\uff0c\u867d\u7136 Telegram \u89e3\u51b3\u4e86\u521b\u5efa\u7b2c\u4e00\u4e2a\u573a\u666f\u7684\u95ee\u9898\uff0c\u4f46\u8be5\u516c\u53f8\u62d2\u7edd\u4fee\u590d\u7b2c\u4e8c\u4e2a\u573a\u666f\u3002\u56e0\u6b64\uff0cTrustwave \u7814\u7a76\u4eba\u5458\u62d2\u7edd\u4e86 Telegram \u7684\u6f0f\u6d1e\u8d4f\u91d1\uff0c\u56e0\u4e3a\u5b83\u201c\u4f1a\u963b\u6b62\u6211\u4eec\u5411\u793e\u533a\u62ab\u9732\u8fd9\u9879\u7814\u7a76\uff0c\u201dJayapaul \u5199\u9053\u3002\n\u201c\u6211\u4eec\u8ba4\u4e3a\u9700\u8981\u5bf9\u6f0f\u6d1e\u6c38\u4e45\u4fdd\u6301\u6c89\u9ed8\u7684\u6f0f\u6d1e\u8d4f\u91d1\u65e0\u52a9\u4e8e\u66f4\u5e7f\u6cdb\u7684\u793e\u533a\u6539\u5584\u4ed6\u4eec\u7684\u5b89\u5168\u5b9e\u8df5\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u6765\u63d0\u51fa\u95ee\u9898\uff0c\u5373\u6f0f\u6d1e\u8d4f\u91d1\u7a76\u7adf\u5728\u8865\u507f\u4e2a\u4eba\u4ec0\u4e48\u2014\u2014\u5411\u8d4f\u91d1\u652f\u4ed8\u8005\u6216\u5176\u5bf9\u66f4\u5e7f\u6cdb\u7684\u793e\u533a\u4fdd\u6301\u6c89\u9ed8\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u8fd9\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c24\u5176\u4e25\u91cd\uff0c\u5176\u4e2d\u4e00\u4e2a\u62a5\u544a\u7684\u95ee\u9898\u6ca1\u6709\u5f97\u5230\u89e3\u51b3\u3002\u201d Jayapaul \u53d1\u73b0\u4e86 macOS Telegram 7.5 \u7248\u4e2d\u7684\u6f0f\u6d1e\uff0c\u5176\u4e2d\u901a\u8fc7\u8be5\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7684\u4efb\u4f55\u5171\u4eab\u4f4d\u7f6e\u3001\u97f3\u9891\u3001\u89c6\u9891\u6216\u6587\u6863\u90fd\u5b58\u50a8\u5728\u4ee5\u4e0b\u8def\u5f84\u7684 Telegram \u7f13\u5b58\u4e2d\uff1a\u201c/Users/Admin/Library/Group Containers/XXXXXXX.ru\u3002 keepcoder.Telegram/appstore/account-1271742300XXXXXX/postbox/media\u201d\u3002 Telegram \u5c06 Secret-Chat \u5b58\u50a8\u5728\u6b64\u76ee\u5f55\u4e2d\uff0c\u524d\u7f00\u4e3a\u201csecret-file-xxxxxx\u201d\u3002 \u201c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d1\u9001\u5230 Telegram \u7684\u4efb\u4f55\u5a92\u4f53\u6587\u4ef6\uff08\u9644\u4ef6\u9664\u5916\uff09\u90fd\u4f1a\u4e0b\u8f7d\u5230\u4e0a\u8ff0\u7f13\u5b58\u6587\u4ef6\u5939\u4e2d\uff0c\u201d\u4ed6\u5728\u5e16\u5b50\u4e2d\u89e3\u91ca\u9053\u3002 \u201c\u5171\u4eab\u4f4d\u7f6e\u5b58\u50a8\u4e3a\u56fe\u7247\u3002\u201d\u5728\u4ed6\u7684\u62ab\u9732\u4e2d\uff0cJayapaul \u8be6\u7ec6\u6982\u8ff0\u4e86\u5982\u4f55\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u5229\u7528\u8be5\u6f0f\u6d1e - \u4e00\u79cd\u4fb5\u72af\u6d88\u606f\u6216\u4f4d\u7f6e\u7684\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u7684\u9690\u79c1\uff0c\u53e6\u4e00\u79cd\u4ec5\u5f71\u54cd\u53d1\u9001\u8005\u3002\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u67d0\u4eba\u53d1\u9001\u5f55\u97f3\u3001\u89c6\u9891\u6d88\u606f\u6216\u56fe\u50cf\uff0c\u6216\u5206\u4eab\u4ed6\u6216\u5979\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u542f\u7528\u201c\u81ea\u6bc1\u201d\u529f\u80fd\u3002\u6536\u4ef6\u4eba\u9605\u8bfb\u90ae\u4ef6\u540e\uff0c\u786e\u5b9e\u4f1a\u6839\u636e\u8be5\u529f\u80fd\u7684\u5de5\u4f5c\u65b9\u5f0f\u5c06\u5176\u5220\u9664\u3002 \u201c\u4f46\u662f\uff0c\u8fd9\u4e9b\u6587\u4ef6\u4ecd\u672c\u5730\u5b58\u50a8\u5728\u53ef\u7528\u4e8e\u6062\u590d\u7684\u7f13\u5b58\u6587\u4ef6\u5939\u4e2d\uff0c\u201dJayapaul \u8bf4\u3002\u7b2c\u4e8c\u79cd\u60c5\u51b5\u53d6\u51b3\u4e8e\u6d88\u606f\u7684\u63a5\u6536\u8005\u8fdb\u5165\u7f13\u5b58\u6587\u4ef6\u5939\u4ee5\u83b7\u53d6\u8bbe\u7f6e\u4e3a\u81ea\u6bc1\u7684\u6587\u4ef6\uff0c\u6216\u8005\u5220\u9664\u6d88\u606f\u800c\u4e0d\u5728 Telegram \u5e94\u7528\u7a0b\u5e8f\u4e2d\u8bfb\u53d6\u5b83\u4eec\u3002\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u53d1\u4ef6\u4eba\u90fd\u4e0d\u4f1a\u77e5\u9053\u6d88\u606f\u662f\u5426\u5df2\u88ab\u9605\u8bfb\uff0c\u800c\u6536\u4ef6\u4eba\u201c\u5c06\u4fdd\u7559\u4e00\u4efd\u6c38\u4e45\u7684\u5a92\u4f53\u526f\u672c\u201d\uff0c\u636e\u8be5\u5e16\u5b50\u79f0\u3002\u5f53 Jayapaul \u8054\u7cfb Telegram \u65f6\uff0c\u8be5\u516c\u53f8\u8fc5\u901f\u505a\u51fa\u56de\u5e94\uff0c\u4fee\u590d\u4e86\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\u7684\u6f0f\u6d1e\uff0c\u5176\u4e2d\u201c\u4efb\u4f55\u804a\u5929/\u5a92\u4f53\u90fd\u53ef\u4ee5\u4ece\u7f13\u5b58\u4e2d\u6062\u590d\uff0c\u5373\u4f7f\u5b83\u4eec\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6253\u5f00\u6d88\u606f\u540e\u636e\u79f0\u5df2\u81ea\u884c\u5220\u9664\uff0c\u201d\u4ed6\u5199\u9053\u3002 .\u4ed6\u8bf4\uff0c\u867d\u7136\u6700\u521d\u7684\u4fee\u590d\u6700\u521d\u5e76\u4e0d\u9002\u7528\u4e8e\u5171\u4eab\u4f4d\u7f6e\uff0c\u4f46\u8be5\u516c\u53f8\u6700\u7ec8\u4e5f\u4e3a\u6b64\u53d1\u5e03\u4e86\u4fee\u590d\u3002\nJayapaul \u5199\u9053\uff0c\u8be5\u516c\u53f8\u62d2\u7edd\u4fee\u8865\u9002\u7528\u4e8e\u5a92\u4f53\u6587\u4ef6\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\u7684\u7f13\u5b58\u95ee\u9898\uff0c\u4f46\u5f15\u7528\u4e86\u201c\u4e00\u4e9b\u65b9\u6cd5\u6765\u89e3\u51b3\u201d\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u81ea\u6bc1\u8ba1\u65f6\u5668\u201c\u8d85\u51fa\u201d\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u3002 Telegram \u627f\u8ba4\uff0c\u5b83\u5728\u5176\u7f51\u7ad9\u7684\u201c\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\u201d\u9875\u9762\u4e0a\u8b66\u544a\u7528\u6237\u201c\u6b64\u7c7b\u60c5\u51b5\u201d\u3002\u8d3e\u4e9a\u4fdd\u5c14\u8868\u793a\uff0c\u4ed6\u8ba4\u4e3a\u4fee\u590d\u201c\u5c06\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4fee\u590d\u201d\uff0c\u53ea\u9700\u8981\u5e94\u7528\u4e0e\u81ea\u6bc1\u804a\u5929\u7528\u4e8e\u9644\u4ef6\u7684\u76f8\u540c\u7f13\u5b58\u65b9\u6cd5\u3002 \u201c\u5982\u679c\u60a8\u5c06\u5a92\u4f53\u6587\u4ef6\u9644\u52a0\u5230\u6d88\u606f\u4e2d\uff0c\u5219\u5728\u5355\u51fb\u6d88\u606f\u4e4b\u524d\u65e0\u6cd5\u5728\u7f13\u5b58\u4e2d\u8bbf\u95ee\u9644\u4ef6\uff0c\u201dJayapaul \u89e3\u91ca\u8bf4\u3002 \u201c\u53ea\u6709\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6253\u5f00\u6d88\u606f\u540e\uff0c\u624d\u4f1a\u4e0b\u8f7d\u9644\u4ef6\uff0c\u7136\u540e\u5728\u8ba1\u65f6\u5668\u540e\u5220\u9664\u3002\u201d Telegram \u4e3a\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6f0f\u6d1e\u8d4f\u91d1\uff0c\u4ed6\u201c\u5f88\u9ad8\u5174\u201d\u6536\u5230\uff0c\u4f46\u4ed6\u6700\u7ec8\u62d2\u7edd\u4e86\uff0c\u56e0\u4e3a\u4ed6\u9009\u62e9\u53d1\u8868\u4ed6\u7684\u53d1\u73b0\u3002 \u201c\u516c\u5f00\u62ab\u9732\u662f\u6f0f\u6d1e\u53d1\u73b0\u548c\u4fee\u590d\u8fc7\u7a0b\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u201dJayapaul \u8bf4\u3002 \u201c\u5b83\u4ee5\u591a\u79cd\u65b9\u5f0f\u5bf9\u516c\u4f17\u81f3\u5173\u91cd\u8981\u3002\u7531\u4e8e\u8fd9\u4e9b\u62c5\u5fe7\u4ee5\u53ca\u6211\u5bf9\u4fe1\u606f\u5b89\u5168\u7684\u627f\u8bfa\uff0c\u6211\u62d2\u7edd\u4e86\u6f0f\u6d1e\u8d4f\u91d1\u4ee5\u6362\u53d6\u62ab\u9732\u3002\u201d\u62c5\u5fc3\u4e0b\u4e00\u6b21\u653b\u51fb\u6765\u81ea\u54ea\u91cc\uff1f\u6211\u4eec\u652f\u6301\u4f60\u3002\u7acb\u5373\u6ce8\u518c\u6211\u4eec\u5373\u5c06\u4e8e\u7f8e\u56fd\u4e1c\u90e8\u6807\u51c6\u65f6\u95f4 8 \u6708 17 \u65e5\u4e0a\u5348 11 \u70b9\u4e0e Uptycs \u5408\u4f5c\u4e3e\u529e\u7684\u76f4\u64ad\u7f51\u7edc\u7814\u8ba8\u4f1a\u201c\u5982\u4f55\u50cf\u5a01\u80c1\u6f14\u5458\u4e00\u6837\u601d\u8003\u201d\uff0c\u5e76\u51c6\u786e\u627e\u51fa\u653b\u51fb\u8005\u7784\u51c6\u60a8\u7684\u4f4d\u7f6e\u4ee5\u53ca\u5982\u4f55\u9996\u5148\u5230\u8fbe\u90a3\u91cc\u3002\u4e0e\u4e3b\u6301\u4eba Becky Bracken \u548c Uptycs \u7814\u7a76\u4eba\u5458 Amit Malik \u548c Ashwin Vamshi \u4e8e\u7f8e\u56fd\u4e1c\u90e8\u65f6\u95f4 8 \u6708 17 \u65e5\u4e0a\u5348 11 \u70b9\u4e00\u8d77\u8fdb\u884c\u73b0\u573a\u8ba8\u8bba\u3002", "note_en": "A vulnerability in a high-level privacy feature of  Telegram on macOS that sets up a \u201cself-destruct\u201d timer for messages on both the sender\u2019s and recipient\u2019s devices can allow someone to retrieve these messages even after they\u2019ve been deleted, a researcher has found.\n Reegun Richard Jayapaul,  Trustwave SpiderLabs Lead Threat Architect, discovered the flaw in the Self-Destruct feature of Telegram MacOS, which is part of the Secret-Chats aspect of the messaging app that uses end-to-end encryption.\n This encryption \u2013 the key to which even Telegram administrators do not have \u2013 \u201cis meant for people who are concerned about the security and privacy of their chat history,\u201d he said in a  blog post about his findings published Thursday.\n  Indeed,  Telegram in general is widely viewed as one of the more secure messaging apps; many users have opted to switch from Facebook\u2019s WhatsApp to Telegram because they are concerned about their privacy.\n Jayapaul worked with Telegram to patch the flaw, which can allow the privacy of users to be violated via two scenarios. In doing so, he said he learned of a caveat of the company\u2019s vulnerability disclosure program that prevents researchers from disclosing a flaw if they agree to accept a bug bounty \u2013 something Jayapaul said he was not on board with.\n In the first scenario, Shared Location, video and audio messages can leak even after the messages have been timed to self-destruct on both the sender\u2019s and recipient\u2019s device, he wrote. In the second scenario, these same messages can leak without a recipient even opening or deleting the message.\n However, while Telegram fixed the issue creating the first scenario, the company declined to fix the second. Because of this, the Trustwave researcher declined the bug bounty from Telegram, as it \u201cwould have kept us from disclosing this research to the community,\u201d Jayapaul wrote.\n \u201cWe feel bug bounties that require permanent silence about a vulnerability do not help the broader community to improve their security practices and can serve to raise questions about what exactly the bug bounty is compensating the individual for \u2013 reporting a vulnerability to the bounty payer or their silence to the broader community,\u201d he said. \u201cThis is especially serious in this case, where one of the issues reported went unaddressed.\u201d\n  Jayapaul discovered the flaw in macOS Telegram version 7.5, where any shared location, audio, video or documents sent via the app are stored in the Telegram cache in the following path: \u201c/Users/Admin/Library/Group Containers/XXXXXXX.ru.keepcoder.Telegram/appstore/account-1271742300XXXXXX/postbox/media\u201d.\n Telegram stores the Secret-Chat in this directory with the prefix \u201csecret-file-xxxxxx\u201d. \u201cBy default, any media files, except attachments, sent to Telegram are downloaded to the above cache folder,\u201d he explained in the post. \u201cShared locations are stored as a picture.\u201d\n In his disclosure, Jayapaul outlined in detail how the flaw can be exploited in the two scenarios \u2013 one that violates the privacy of both the sender and recipient of the messages or locations, the other in which just the sender is affected.\n In the first scenario, someone sends a voice recording, video message or image, or shares his or her location, and then enables the \u201cself-destruct\u201d feature. Once the recipient reads the message, it does indeed get deleted according to how the feature works. \u201cHowever, the files are still stored locally inside the cache folder available for recovery,\u201d Jayapaul said.\n The second scenario depends upon the recipient of the message going into the cache folder to grab the file that\u2019s set to self-destruct, or deletes the messages without reading them within the Telegram app. Either way, the sender won\u2019t know whether the message was read, and the recipient \u201cwill retain a permanent copy of the media,\u201d according to the post.\n  When Jayapaul contacted Telegram, the company quickly responded to fix the vulnerability in the first scenario, in which \u201cany chats/media can be recovered from the cache even after they are supposedly self-deleted after opening the message in the app,\u201d he wrote. While the initial fix didn\u2019t apply to Shared Locations initially, the company eventually published a fix for this as well, he said.\n The company declined to patch the caching issue in the second scenario as applied to media files, however, citing \u201csome ways to work around\u201d the self-destruct timer in the app \u201cthat are outside\u201d what the app can control, Jayapaul wrote. Telegram acknowledged that it warns users about \u201csuch circumstances\u201d on a  \u201cFAQ\u201d page on its website.\n For his part, Jayapaul said he thinks the fix \u201cwould be a simple one\u201d that needs only to apply the same caching method that the self-destruct chats use for attachments.\n \u201cIf you attach media files to a message, the attachments cannot be accessed in the cache prior to clicking the message,\u201d Jayapaul explained. \u201cOnly after the message is opened in the app are the attachments downloaded and then deleted after the timer.\u201d\n Telegram offered the researcher a bug bounty that he was \u201cdelighted\u201d to receive, but he ultimately declined it because he chose to publish his findings.\n \u201cPublic disclosure is an important part of the vulnerability discovery and remediation process,\u201d Jayapaul said. \u201cIt is essential for the public in a variety of ways. Because of these concerns and my commitment to information security, I have declined the bug bounty in exchange for disclosure.\u201d\n Worried about where the next attack is coming from? We\u2019ve got your back.   REGISTER NOW for our upcoming live webinar, How to  Think Like a Threat Actor, in partnership with Uptycs on Aug. 17 at 11 AM EST and find out precisely where attackers are targeting you and how to get there first. Join host Becky Bracken and Uptycs researchers Amit Malik and Ashwin Vamshi on   Aug. 17 at 11AM EST for this LIVE discussion.", "posttime": "2021-08-09 02:55:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f3a\u9677,flaw,telegram", "title": "\u7535\u62a5\u4e2d\u7684 macOS \u7f3a\u9677\u53ef\u68c0\u7d22\u5df2\u5220\u9664\u7684\u90ae\u4ef6", "title_en": "macOS Flaw in Telegram Retrieves Deleted Messages", "transed": 1, "url": "https://threatpost.com/macos-flaw-in-telegram-retrieves-deleted-messages/168412/", "via": "", "real_tags": ["\u7f3a\u9677", "flaw", "telegram"]}, {"category": "", "categoryclass": "", "imagename": "0597edfbe199869eb9c25ec2baefe95a.jpeg", "infoid": 1072156, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u660e\u5c3c\u963f\u6ce2\u5229\u65af\uff08WCCO\uff09\u2014\u2014\u660e\u5c3c\u82cf\u8fbe\u5dde\u4f17\u8bae\u5458\u4f0a\u5c14\u6c57\u00b7\u5965\u9a6c\u5c14\u5468\u4e94\u63d0\u51fa\u4e86\u4e24\u9879\u200b\u200b\u6cd5\u6848\uff0c\u65e8\u5728\u521b\u5efa\u4e00\u9879\u8d44\u52a9\u8ba1\u5212\uff0c\u4e3a\u5730\u65b9\u6536\u5165\u8bd5\u70b9\u3001\u56fd\u5bb6\u4fdd\u969c\u6536\u5165\u8ba1\u5212\u63d0\u4f9b\u8d44\u91d1\uff0c\u5e76\u5efa\u7acb\u4e00\u79cd\u8861\u91cf\u5e78\u798f\u611f\u7684\u65b0\u7ecf\u6d4e\u6a21\u5f0f\u3002\u5965\u9a6c\u5c14\u6b63\u5f0f\u5f15\u5165\u4e86\u201c\u5411\u514b\u670d\u5bf9\u80dc\u5229\u7684\u62b5\u6297\uff08SUPPORT\uff09\u6cd5\u6848\u201d\u548c\u201c\u771f\u6b63\u8fdb\u5c55\u6307\u6807\uff08GPI\uff09\u6cd5\u6848\u201d\u7684\u4eba\u4eec\u53d1\u9001\u65e0\u6761\u4ef6\u4ed8\u6b3e\u3002 \u201c\u8d2b\u56f0\u662f\u4e00\u79cd\u653f\u7b56\u9009\u62e9\u3002\u957f\u671f\u4ee5\u6765\uff0c\u5f53\u6570\u767e\u4e07\u4eba\u65e0\u5bb6\u53ef\u5f52\u3001\u9965\u997f\u6216\u6ca1\u6709\u533b\u7597\u4fdd\u5065\u65f6\uff0c\u6211\u4eec\u4e00\u76f4\u4f18\u5148\u8003\u8651\u65e0\u4f11\u6b62\u7684\u589e\u957f\uff0c\u201d\u5965\u9a6c\u5c14\u8bf4\u3002 \u201c\u5927\u6d41\u884c\u66b4\u9732\u4e86\u8fd9\u4e9b\u4e0d\u5e73\u7b49\u3002\u4f5c\u4e3a\u4e00\u4e2a\u56fd\u5bb6\uff0c\u6211\u4eec\u6709\u80fd\u529b\u786e\u4fdd\u6bcf\u4e2a\u4eba\u7684\u57fa\u672c\u9700\u6c42\u5982\u98df\u7269\u3001\u4f4f\u623f\u548c\u533b\u7597\u4fdd\u5065\u5f97\u5230\u6ee1\u8db3\u3002\u201d\u6839\u636e\u5168\u56fd\u8bd5\u70b9\u8ba1\u5212\uff0c\u300a\u652f\u6301\u6cd5\u6848\u300b\u5c06\u91cd\u70b9\u5173\u6ce8\u6210\u4eba\u6bcf\u6708\u6700\u9ad8 1,200 \u7f8e\u5143\u548c\u513f\u7ae5\u6bcf\u6708 600 \u7f8e\u5143\u7684\u4fdd\u8bc1\u6536\u5165\u8ba1\u5212\u3002 GPI \u6cd5\u6848\u5c06\u63d0\u4f9b\u4e00\u79cd\u66ff\u4ee3\u7ecf\u6d4e\u6307\u6807\uff0c\u4ee5\u901a\u8fc7\u7eb3\u5165\u793e\u4f1a\u7ecf\u6d4e\u548c\u73af\u5883\u56e0\u7d20\u6765\u8865\u5145 GDP \u8ba1\u7b97\u5e76\u6539\u8fdb\u7ecf\u6d4e\u653f\u7b56\u3002 GPI \u6cd5\u6848\u7531\u4f17\u8bae\u5458 Jamaal Bowman\u3001Cori Bush\u3001Dwight Evans\u3001Pramila Jayapal \u548c Marie Newman \u5171\u540c\u53d1\u8d77\u3002\u652f\u6301\u6cd5\u6848\u7531\u540c\u4e00\u56e2\u4f53\u5171\u540c\u53d1\u8d77\uff0c\u5e76\u52a0\u5165\u4e86 Pramila Jayapal\u3002\u5982\u679c\u60a8\u901a\u8fc7\u672c\u6587\u4e2d\u7684\u63a8\u8350\u94fe\u63a5\u8d2d\u4e70\u5546\u54c1\uff0cMicrosoft \u548c\u5408\u4f5c\u4f19\u4f34\u53ef\u80fd\u4f1a\u83b7\u5f97\u8865\u507f\u3002\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00 \u6253\u5f00\u5916\u90e8\u7ad9\u70b9 \u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00\u5916\u90e8\u7ad9\u70b9", "note_en": "MINNEAPOLIS (WCCO) \u2013 Minnesota\u00a0Rep. Ilhan Omar introduced two bills Friday that are intended to create a grant program to fund local income pilots, a national guaranteed income program, and to establish a new economic model that measures well-being.\n     Omar formally introduced the Sending Unconditional Payments to People Overcoming Resistances to Triumph (SUPPORT) Act and the Genuine Progress Indicator (GPI) Act.\n  \u201cPoverty is a policy choice. For too long we have prioritized endless growth while millions are homeless, hungry or without healthcare,\u201d said Omar.\u00a0\u201cThe pandemic has laid bare these inequalities. We as a nation have the ability to make sure everyone has their basic needs like food, housing and healthcare met.\u201d\n  The SUPPORT Act will focus on the guaranteed income program of up to $1,200 per month for adults, and $600 for kids, following pilot programs across the nation.\u00a0 The GPI Act will provide an alternative economic metric to supplement GDP calculations and revamp economic policies by including socio-economic and environmental factors.\n  The GPI Act is cosponsored by Reps. Jamaal Bowman, Cori Bush, Dwight Evans, Pramila Jayapal, and Marie Newman. The SUPPORT Act is cosponsored by the same group with the addition of Pramila Jayapal.\n  Microsoft and partners may be compensated if you purchase something through recommended links in this article.\n                Opens in a new window  Opens an external site  Opens an external site in a new window", "posttime": "2021-08-09 01:58:34", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u7acb\u6cd5\u8005,pilot,\u6cd5\u6848", "title": "\u7f8e\u56fd\u7acb\u6cd5\u8005\u63d0\u8bae\u4e00\u9879 25 \u4ebf\u7f8e\u5143\u7684\u8bd5\u70b9\u4fdd\u8bc1\u6536\u5165\u8ba1\u5212", "title_en": "US Lawmakers Propose a $2.5 Billion Pilot Guaranteed Income Program", "transed": 1, "url": "https://www.msn.com/en-us/money/news/rep-ilhan-omar-introduces-bills-that-aim-for-guaranteed-income/ar-AAMLboB", "via": "", "real_tags": ["\u7f8e\u56fd", "\u7acb\u6cd5\u8005", "pilot", "\u6cd5\u6848"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072154, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6700\u559c\u6b22\u7684\u521b\u59cb\u539f\u5219\u4e4b\u4e00 \u9274\u4e8e Unix \u5bf9\u5927\u91cf\u53a8\u623f\u6c34\u69fd\u7a0b\u5e8f\u5e76\u4e0d\u964c\u751f\uff0c\u6211\u4eec\u4e2d\u95f4\u7684\u6124\u4e16\u5ac9\u4fd7\u8005\u53ef\u80fd\u4f1a\u5c06\u5176\u79f0\u4e3a\u795e\u8bdd\u800c\u4e0d\u662f\u539f\u5219\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u6b63\u5728\u8fd9\u6837\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u5199\u8fd9\u7bc7\u6587\u7ae0\u3002 Unix \u7684\u7279\u70b9\u662f\u5b57\u8282\u6d41\u7684\u666e\u904d\u6027\u3002 Unix shell \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e00\u5143\u7ba1\u9053\u8fd0\u7b97\u7b26 |\uff0c\u5373\uff0c\u7ed9\u5b9a\u4e00\u4e9b\u8ba1\u7b97 a | b, \u6267\u884c a \u4f7f\u5176\u8f93\u51fa\u5f62\u6210 b \u7684\u8f93\u5165\u3002\u8fd9\u4e00\u539f\u5219\u4e3a\u6807\u51c6\u7684 Unix \u547d\u4ee4\u63d0\u4f9b\u4e86\u7b80\u6d01\u7684\u7ec4\u5408\uff0c\u5141\u8bb8\u6267\u884c shell\uff0c\u800c\u4e0d\u662f\u7a0b\u5e8f\u672c\u8eab\uff0c\u901a\u8fc7\u4e00\u4e2a\u7ec4\u5408\u7684 shell \u547d\u4ee4\u5e8f\u5217\u6765\u63a7\u5236\u6570\u636e\u6d41\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b57\u8282\u6d41\u64cd\u4f5c\u7684\u539f\u7406\u662f\u6574\u4e2a\u7f16\u7a0b\u8bed\u8a00\uff08\u5982 sed \u548c awk\uff09\u7684\u57fa\u7840\u3002 xargs \u548c tee \u548c parallel \u7b49\u5de5\u5177\u63d0\u4f9b\u4e86\u9ad8\u9636\u7ec4\u5408\u5668\uff0c\u4ee5\u8d85\u51fa\u7ba1\u9053\u64cd\u4f5c\u5458\u672c\u8eab\u80fd\u529b\u7684\u65b9\u5f0f\u4ece\u66f4\u591a\u7ba1\u9053\u6784\u5efa\u7ba1\u9053\u3002\u8ba9\u6211\u4eec\u8003\u8651\u5728\u8bf8\u5982\u6b64\u7c7b\u7684\u6d41\u6c34\u7ebf\u8ba1\u7b97\u4e2d\u8fd0\u884c\u826f\u597d\u7684\u7a0b\u5e8f\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u4f7f\u7528 grep \u4f5c\u4e3a\u6b64\u7c7b\u7a0b\u5e8f\u7684\u539f\u578b\u3002\u5f53\u7136\uff0cgrep \u662f\u4e00\u79cd\u5177\u6709\u8fd1\u4e4e\u65e0\u4e0e\u4f26\u6bd4\u7684\u91cd\u8981\u6027\u7684\u5de5\u5177\uff0c\u5b83\u88ab\u8f7d\u5165 POSIX \u6807\u51c6\uff0c\u5e76\u4e14\u5b83\u7684\u4f18\u5316\u53ef\u80fd\u4e0e\u4efb\u4f55\u5176\u4ed6\u7a0b\u5e8f\u4e00\u6837\u5f7b\u5e95\u3002\u6211\u4eec\u7684\u7a0b\u5e8f\u53ef\u80fd\u4e0d\u662f grep\uff0c\u4f46\u5b83\u4eec\u53ef\u80fd\u9700\u8981\u6a21\u62df grep \u5982\u4f55\u7ba1\u7406\u5176\u8f93\u5165\u6d41\uff1a\u5b83\u9690\u85cf\u4e86\u8d44\u6e90\u64cd\u4f5c\u7684\u7ec6\u8282\u3002\u64cd\u4f5c\u7cfb\u7edf\u3001\u5176\u7cfb\u7edf\u5e93\u3001\u5f53\u524d\u4f7f\u7528\u7684\u5916\u58f3\u53ca\u5176\u5b9e\u73b0 |\u64cd\u4f5c\u5458\u9690\u85cf\u4e86\u8f93\u5165\u5982\u4f55\u5728\u6587\u4ef6\u4e4b\u95f4\u8fdb\u884c\u6279\u5904\u7406\u548c\u9988\u9001\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u9274\u4e8e\u8fd9\u4e9b\u7ec6\u8282\u662f\u4ece\u6211\u4eec\u8fd9\u91cc\u62bd\u8c61\u51fa\u6765\u7684\uff0c\u6211\u4eec\u5e94\u8be5\u5047\u8bbe\u8f93\u5165\u5728\u5fc5\u8981\u65f6\u88ab\u7f13\u51b2\u548c\u5206\u5757\uff0c\u5e76\u4e14\u8fd9\u4e9b\u7f13\u51b2\u533a\u548c\u5757\u7684\u5904\u7406\u5f00\u9500\u5c3d\u53ef\u80fd\u5c0f\u3002\u7279\u522b\u662f\uff0c\u4ece\u8f93\u5165\u6d41\u8bfb\u53d6\u7684\u5b57\u8282\u7f13\u51b2\u533a\u5e94\u8be5\u53ea\u5728\u7a0b\u5e8f\u660e\u786e\u8bf7\u6c42\u65f6\u624d\u88ab\u590d\u5236\u548c\u4fdd\u7559\uff1a\u65e7\u7684\u8f93\u5165\u4e0d\u5e94\u8be5\u5728\u5185\u5b58\u4e2d\u5f98\u5f8a\uff0c\u56e0\u4e3a\u8be5\u8f93\u5165\u7684\u5927\u5c0f\u7406\u8bba\u4e0a\u662f\u65e0\u754c\u7684\u3002\u5b83\u61d2\u60f0\u5730\u6d88\u8017\u5176\u8f93\u5165\u3002\u5982\u679c\u6211\u544a\u8bc9 grep \u5728\u4e00\u4e2a 10 GB \u7684\u6587\u4ef6\u4e2d\u641c\u7d22\u4e00\u4e2a\u4e14\u4ec5\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u5e94\u8be5\u53ea\u6d88\u8017\u6ee1\u8db3\u6211\u7684\u8bf7\u6c42\u6240\u9700\u7684\u8f93\u5165\u91cf\u3002\u5982\u679c\u4ece\u6d41\u4e2d\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u6240\u9700\u7684\u5b57\u8282\u6570\uff0c\u5219\u5728\u6027\u80fd\u65b9\u9762\u5e94\u8be5\u4e0e\u8bfb\u53d6\u5c3d\u53ef\u80fd\u5c11\u7684\u8f93\u5165\u6ca1\u6709\u533a\u522b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5bf9\u53ef\u89c2\u5bdf\u5230\u7684\u7a0b\u5e8f\u884c\u4e3a\u4ea7\u751f\u4efb\u4f55\u53d8\u5316\u3002\u5b83\u6e05\u7406\u5b83\u7684\u8d44\u6e90\u3002\u5982\u679c grep \u5411\u64cd\u4f5c\u7cfb\u7edf\u8bf7\u6c42\u8d44\u6e90\uff0c\u6216\u8005\u4ea7\u751f\u4e00\u4e9b\u5176\u4ed6\u8f85\u52a9\u8fdb\u7a0b\uff0c\u8fd9\u4e9b\u8d44\u6e90\u548c\u5b50\u8fdb\u7a0b\u5e94\u8be5\u88ab\u5feb\u901f\u53ef\u9760\u5730\u56de\u6536\uff0c\u5373\u4f7f\u9762\u5bf9\u4e0a\u6e38\u6216\u4e0b\u6e38\u7ba1\u9053\u6545\u969c\uff0c\u751a\u81f3\u53ea\u662f\u4e00\u4e2a\u7528\u6237\u4e0d\u8010\u70e6\u5730\u6572\u51fb Ctrl+C \u5e76\u53d1\u9001\u6570\u5341\u4e2aSIGKILL \u4fe1\u53f7\u3002 C \u7a0b\u5e8f\u64c5\u957f\u6ee1\u8db3\u8fd9\u4e9b\u6807\u51c6\u3002\u54c8\uff01\u53ea\u662f\u5728\u5f00\u73a9\u7b11\u3002 C\u7a0b\u5e8f\u53ef\u4ee5\u64c5\u957f\u6d41\u5f0f\u6570\u636e\u64cd\u4f5c\uff0c\u56e0\u4e3aC\u7f16\u7a0b\u5c06\u5176\u7ec6\u8282\u6258\u4ed8\u7ed9\u60a8\uff0c\u60a8\u53ef\u80fd\u662f\u64c5\u957f\u6d41\u5f0f\u6570\u636e\u64cd\u4f5c\u7684\u4eba\u3002\u5c3d\u7ba1 POSIX \u6807\u51c6\u63d0\u4f9b\u4e86\u67d0\u4e9b\u4fdd\u8bc1 POSIX \u6807\u51c6\u6307\u5b9a\u67d0\u4e9b\u8d44\u6e90\u2014\u2014\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u76ee\u5f55\u6d41\u3001\u6765\u81ea iconv() \u7684\u6d41\u8f6c\u6362\u5668\u548c\u6765\u81ea catopen \u7684\u6d88\u606f\u76ee\u5f55\u2014\u2014\u5728\u7a0b\u5e8f\u9000\u51fa\u65f6\u88ab\u653e\u5f03\u3002\u4f7f\u7528 exec \u7cfb\u5217\u51fd\u6570\u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\u901a\u5e38\u4e0d\u4f1a\u7ec8\u6b62\uff08\u9664\u975e\u7236\u8fdb\u7a0b\u6216\u76f8\u5173\u8fdb\u7a0b\u7ec4\u7279\u522b\u8bf7\u6c42\uff09\u3002\u5171\u4eab\u5185\u5b58\u53ef\u80fd\u4f1a\u6216\u53ef\u80fd\u4e0d\u4f1a\u88ab\u653e\u5f03\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5176\u4ed6\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u5f15\u7528\u5b83\u3002\u8fd9\u79cd\u79bb\u9898\u5df2\u7ecf\u8db3\u591f\u957f\u4e86\uff1b\u5982\u679c\u60a8\u771f\u7684\u5f88\u597d\u5947\uff0c\u8bf7\u9605\u8bfb\u6807\u51c6\u3002\u5173\u4e8e\u7a0b\u5e8f\u9000\u51fa\u65f6\u8d44\u6e90\u56de\u6536\u7684\u65b9\u5f0f\uff0c\u60a8\u4ecd\u7136\u8d1f\u8d23\u5728\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u7ba1\u7406\u8d44\u6e90\u3002\u4f60\u3001\u6807\u51c6\u8f93\u5165\u548c\u6807\u51c6\u8f93\u51fa\u4e4b\u95f4\u6ca1\u6709\u592a\u591a\u7684\u62bd\u8c61\u5c42\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u7684\u5e95\u5c42 FILE* \u7ed3\u6784\u53ef\u4ee5\u4e3a\u4f60\u505a\u4e00\u4e9b\u7f13\u5b58\uff0c\u5b83\u53ef\u80fd\u4f1a\uff0c\u4f46\u4f60\u603b\u662f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 read(2) \u6216\u4e00\u4e9b\u4f4e\u7ea7\u522b\u7684\u4ee5\u6548\u7387\u4e3a\u91cd\u70b9\u7684\u6846\u67b6\uff0c\u5982 kqueue\u3001epoll\u3001libdispatch \u6216 io_uring\u3002\u4f7f\u7528\u66f4\u9ad8\u7ea7\u522b\u7684\u5783\u573e\u6536\u96c6\u8bed\u8a00\uff0c\u4e8b\u60c5\u53d8\u5f97\u6709\u70b9\u68d8\u624b\u3002\u9ad8\u7ea7\u8bed\u8a00\u6709\u8d23\u4efb\u5c06\u6211\u4eec\u4e0e C \u7684\u95ee\u9898\u9694\u79bb\u5f00\u6765\uff1a\u4e0e shell \u811a\u672c\u4e00\u6837\uff0c\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u7279\u522b\u4e86\u89e3\u5982\u4f55\u8bfb\u53d6\u6587\u4ef6\u3001\u5982\u4f55\u5206\u914d\u5185\u5b58\u6216\u5982\u4f55\u8f93\u5165\u88ab\u7f13\u51b2\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u7a0b\u5e8f\uff0c\u5c24\u5176\u662f\u5783\u573e\u6536\u96c6\u8bed\u8a00\u64c5\u957f\u7684\u5feb\u901f\u800c\u80ae\u810f\u7684\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u7ec6\u8282\u65e0\u5173\u7d27\u8981\u3002\u4f46\u662f\uff0c\u5f53\u60a8\u53d1\u73b0\u81ea\u5df1\u5904\u4e8e\u201c\u5927\u591a\u6570\u7a0b\u5e8f\u201d\u7684\u8303\u56f4\u4e4b\u5916\u65f6\uff0c\u60c5\u51b5\u53ef\u80fd\u4f1a\u4ee4\u4eba\u70e6\u607c\uff1a\u5f53\u60a8\u7684\u8f6f\u4ef6\u7684\u6b63\u786e\u6027\u53d6\u51b3\u4e8e\u7ec6\u8282\u65f6\uff0c\u9ad8\u7ea7\u8bed\u8a00\u7684\u6027\u8d28\u4f1a\u5c06\u60a8\u4e0e\u8d44\u6e90\u7ba1\u7406\u51b3\u7b56\u9694\u79bb\u5f00\u6765\u6240\u8bf4\u7684\u8d44\u6e90\u7ba1\u7406\u3002\u6211\u4eec\u53d1\u73b0\u81ea\u5df1\u9762\u4e34\u7740\u4e00\u4e2a\u7279\u522b\u68d8\u624b\u7684\u8fa9\u8bc1\u6cd5\uff1a\u9ad8\u7ea7\u8bed\u8a00\u901a\u8fc7\u62bd\u8c61\u7ec6\u8282\u6765\u5e2e\u52a9\u7a0b\u5e8f\u5f00\u53d1\uff0c\u4f46\u662f\u5f53\u7a0b\u5e8f\u6b63\u786e\u6027\u76f4\u63a5\u53d6\u51b3\u4e8e\u8fd9\u4e9b\u62bd\u8c61\u7ec6\u8282\u7684\u5c5e\u6027\u65f6\uff0c\u4f8b\u5982\u7f16\u5199\u5904\u7406\u9519\u8bef\u6761\u4ef6\u7684\u4ee3\u7801\u65f6\uff0c\u5c31\u4f1a\u963b\u788d\u7a0b\u5e8f\u7684\u5f00\u53d1\u5728\u5b58\u5728\u8d44\u6e90\u538b\u529b\u7684\u60c5\u51b5\u4e0b\u7a33\u5065\u6216\u4fdd\u6301\u53ef\u9760\u3002\u5728\u53ef\u79fb\u690d shell \u811a\u672c\u4e2d\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u65f6\u9047\u5230\u7684\u56f0\u96be\u53ea\u662f\u6211\u4eec\u4e0d\u5728 shell \u4e2d\u7f16\u5199\u6240\u6709\u5185\u5bb9\u7684\u4f17\u591a\u539f\u56e0\u4e4b\u4e00\u3002\n\u81f3\u5c11\u5728\u7406\u8bba\u4e0a\uff0cHaskell \u7684\u58f0\u660e\u6027\u3001\u975e\u4e25\u683c\u8bc4\u4f30\u548c\u6b63\u786e\u6784\u9020\u54f2\u5b66\u4f7f\u5176\u6210\u4e3a\u7f16\u5199\u5728\u6d41\u7ba1\u9053\u4e2d\u8fd0\u884c\u826f\u597d\u7684\u4ee3\u7801\u7684\u6709\u5438\u5f15\u529b\u7684\u89e3\u51b3\u65b9\u6848\u3002\u7136\u800c\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u9047\u5230\u4e86\u4e09\u4e2a\u76f8\u4e92\u5173\u8054\u4f46\u53c8\u622a\u7136\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u4e0e\u4e0a\u9762\u6982\u8ff0\u7684\u7ba1\u7406\u826f\u597d\u7684\u8f93\u5165\u6d41\u7684\u5c5e\u6027\u8868\u73b0\u51fa\u5f88\u597d\u7684\u5bf9\u79f0\u6027\uff1a \u6d41\u95ee\u9898\uff1a\u6211\u4eec\u5982\u4f55\u7f16\u5199 Haskell \u4ee3\u7801\u6765\u5904\u7406\u6f5c\u5728\u7684\u65e0\u9650\u6570\u636e\u6d41\u6709\u9650\u7684\u5185\u5b58\uff1f\u61d2\u60f0\u7684 I/O \u95ee\u9898\uff1a\u9274\u4e8e Haskell \u7684\u975e\u4e25\u683c\u8bed\u4e49\uff0c\u6211\u4eec\u5982\u4f55\u61d2\u60f0\u6709\u6548\u5730\u6d88\u8d39\u6765\u81ea\u5916\u90e8\u4e16\u754c\u7684\u8f93\u5165\uff1f\u8d44\u6e90\u64cd\u4f5c\u95ee\u9898\uff1a\u9274\u4e8e\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u63a7\u5236\u6570\u636e\u7684\u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u5982\u4f55\u786e\u4fdd\u6211\u4eec\u7684\u4ee3\u7801\u6b63\u786e\u7ba1\u7406\u548c\u653e\u5f03\u6602\u8d35\u7684\u8d44\u6e90\uff1f\u6211\u5c06\u8ba8\u8bba\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f7f\u7528\u6d41\u751f\u6001\u7cfb\u7edf\u6765\u89e3\u51b3\u7b2c\u4e00\u70b9\uff0c\u6d41\u5b57\u8282\u4e32\u5e93\u662f\u7b2c\u4e8c\u70b9\uff0c\u800c\u8d44\u6e90\u5e93\u662f\u7b2c\u4e09\u70b9\u3002\u9274\u4e8e Haskell \u7684\u4e0d\u6b62\u4e00\u79cd\u65b9\u6cd5\u6765\u505a\u7684\u54f2\u5b66\uff0c\u5b58\u5728\u8bb8\u591a\u66ff\u4ee3\u7684\u751f\u6001\u7cfb\u7edf\u2014\u2014\u50cf\u7ba1\u9053\u3001\u7ba1\u9053\u5b57\u8282\u4e32\u3001streamly \u548c io-streams \u8fd9\u6837\u7684\u5e93\u90fd\u63d0\u4f9b\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u5de5\u5177\u2014\u2014\u4f46\u6d41\u751f\u6001\u7cfb\u7edf\u662f\u6211\u6700\u719f\u6089\u7684\u4e00\u79cd\uff0c\u4e00\u79cd\u7528\u51fd\u6570\u7ec4\u5408\u6765\u8868\u8fbe\u7684\u666e\u904d\u53cb\u597d\u7684\u754c\u9762\u3002\u6d41\u548c\u6d41\u5b57\u8282\u4e32\u90fd\u7ecf\u8fc7\u5de7\u5999\u8bbe\u8ba1\u548c\u6df1\u601d\u719f\u8651\uff1b\u6211\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u53ef\u4ee5\u63a2\u7d22\u4ed6\u4eec\u76f8\u5173\u7684\u8bbe\u8ba1\u51b3\u7b56\u548c\u7531\u6b64\u4ea7\u751f\u7684\u4e60\u8bed\u3002\u4f46\u662f\u4e3a\u4e86\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u6df1\u5ea6\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u8ba8\u8bba Haskell \u5982\u4f55\u8868\u793a\u5b57\u8282\u7f13\u51b2\u533a\u548c\u6570\u636e\u6d41\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u6807\u51c6\u516c\u5f0f\u4e2d\u7684\u9519\u8bef\u5982\u4f55\u4e3a\u6d41\u5b57\u8282\u4e32\u63d0\u4f9b\u5176\u5b58\u5728\u7684\u7406\u7531\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u719f\u6089 Haskell \u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u60f0\u6027 I/O \u7684\u5371\u9669\uff0c\u8bf7\u968f\u610f\u8df3\u5230\u4e0b\u4e00\u8282\u3002 Haskell \u56e0\u5176\u8fc7\u591a\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u800c\u81ed\u540d\u662d\u8457\uff1aString\uff08\u56db\u5b57\u8282 Char \u503c\u7684\u60f0\u6027\u5217\u8868\uff09\uff1b\u4e25\u683c\u548c\u60f0\u6027\u6587\u672c\u503c\uff0c\u4ee5\u53ca\u4e25\u683c\u3001\u60f0\u6027\u548c\u77ed\u5b57\u8282\u4e32\u503c\u5b57\u8282\u4e32\u5305\u4e5f\u63d0\u4f9b\u4e86Data.ByteString.Char8\u548cData.ByteString.Char8.Lazy\uff0c\u4f46\u5b83\u4eec\u5b9e\u9645\u4e0a\u5728\u5185\u5b58\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u5e76\u63d0\u4f9b\u5904\u7406Char \u548c String \u503c\u800c\u4e0d\u662f Word8 \u548c [Word8]\uff0c\u524d\u8005\u53ef\u4ee5\u66f4\u81ea\u7136\uff0c\u53ea\u8981\u60a8\u77e5\u9053\u60a8\u7684\u8f93\u5165\u662f Latin-1 \u517c\u5bb9\u7684\u3002 .\u5c31\u672c\u6587\u800c\u8a00\uff0c\u6211\u4eec\u4e0d\u4f1a\u62c5\u5fc3 String \u6216 Text\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u5bf9\u5df2\u77e5\u4e3a\u6709\u6548 Unicode \u6570\u636e\u7684\u503c\u8fdb\u884c\u64cd\u4f5c\u3002\u6211\u4eec\u7684\u6d41\u7ba1\u9053\u5bf9\u5b57\u8282\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f Unicode \u5b57\u7b26\u2014\u2014\u5982\u679c\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728\u8fd9\u6837\u7684\u7ba1\u9053\u4e2d\u5bf9\u4e8c\u8fdb\u5236\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\uff0c\u90a3\u4e48\u8bd5\u56fe\u5c06\u8fd9\u4e9b\u6570\u636e\u8868\u793a\u4e3a Unicode \u6587\u672c\u672c\u8d28\u4e0a\u662f\u9519\u8bef\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u53ea\u5173\u6ce8 Haskell \u7684\u5b57\u8282\u7f13\u51b2\u533a\u7c7b\u578b ByteString\u3002 Strict ByteStrings \u5f88\u5bb9\u6613\u7406\u89e3\uff1a\nmodule Data.ByteString where data ByteString -- strict = BS {-# UNPACK #-} !( ForeignPtr Word8) -- payload {-# UNPACK #-} \uff01 int\u2014\u2014\u957f\u5ea6 ByteString \u8868\u793a\u4e00\u4e2a\u5b57\u8282\u7f13\u51b2\u533a\u53ca\u5176\u76f8\u5173\u957f\u5ea6\uff1b\u5728\u8fd9\u65b9\u9762\u5b83\u7c7b\u4f3c\u4e8e Go \u7684 []byte \u6216 Rust \u7684 &amp;[u8] \uff08\u5c3d\u7ba1\u5b83\u8981\u8ddf\u8e2a\u7684\u6570\u636e\u5c11\u4e86\u4e00\u4e2a\uff0c\u56e0\u4e3a Rust \u548c Go \u7c7b\u578b\u63d0\u4f9b\u5bf9\u76f8\u5173\u5b57\u8282\u7f13\u51b2\u533a\u7684\u53ef\u53d8\u8bbf\u95ee\uff0c\u56e0\u6b64\u5fc5\u987b\u8ddf\u8e2a\u5176\u603b\u5bb9\u91cf\uff09 . ByteString \u503c\u53ef\u4ee5\u5305\u542b NUL \u5b57\u8282\uff0c\u6216\u8005\u5b9e\u9645\u4e0a\u4efb\u4f55\u5176\u4ed6 Word8 \u503c\u3002\u5982\u679c\u7ed9\u5b9a\u7684 ByteString \u8868\u793a\u4eba\u7c7b\u53ef\u8bfb\u7684\u6587\u672c\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 Data.Text.Encoding\uff08\u5bf9\u4e8e UTF-8/16/32\uff09\u6216\u7f16\u7801\u5e93\u5c06\u5176\u663e\u5f0f\u8f6c\u6362\u4e3a Text \u503c\u6216 String \u503c\uff1b\u8f6c\u6362\u5931\u8d25\u5e94\u8be5\u5728\u8fd9\u4e9b\u8c03\u7528\u70b9\u5904\u7406\uff0c\u5c3d\u7ba1\u6b63\u786e\u7684\u884c\u4e3a\u901a\u5e38\u662f\u629b\u51fa\u5f02\u5e38\u3002\u901a\u8fc7\u63d0\u53d6\u8be5 ForeignPtr Word8 \u5e76\u5c06\u5176\u89c6\u4e3a\u5b83\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff0c\u6b64\u8868\u793a\u8fd8\u5141\u8bb8\u5feb\u901f\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e3a C char* \u503c\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7\u4ece\u53e6\u4e00\u4e2a\u6e90\uff08\u5982\u53e6\u4e00\u4e2a ByteString \u6216\u4ece\u5957\u63a5\u5b57\uff09\u590d\u5236\u6765\u521b\u5efa ForeignPtr Word8\uff0c\u6216\u8005\u901a\u8fc7\u4f7f\u7528\u4e0d\u5b89\u5168\u7684 ByteString \u64cd\u4f5c\uff08\u8fd9\u53ef\u80fd\u4f1a\u7834\u574f\u5f15\u7528\u900f\u660e\u6027\uff0c\u4f46\u6709\u65f6\u5728\u6781\u4f4e\u7ea7\u522b\u7684\u4ee3\u7801\u4e2d\u662f\u5fc5\u8981\u7684\uff09\u800c\u4e0d\u8fdb\u884c\u590d\u5236\uff09\u3002\u652f\u6301 O(1) \u957f\u5ea6\u548c\u7d22\u5f15\u4ee5\u53ca O(n) \u8fde\u63a5\u7684\u5185\u5b58\u548c\u957f\u5ea6\u5bf9\u975e\u5e38\u7b80\u5355\u3002\u66f4\u6709\u8da3\u7684\u662f\u8fd9\u79cd\u7c7b\u578b\uff0c\u61d2\u60f0\u7684 ByteString\u3002\u4e3a\u4e86\u793a\u4f8b\u7684\u6e05\u6670\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e0e bytestring \u4e0d\u540c\u7684\u7c7b\u578b\u540d\u79f0\uff0c\u5b83\u5bf9\u60f0\u6027\u548c\u4e25\u683c\u53d8\u4f53\u90fd\u4f7f\u7528 ByteString \u540d\u79f0\uff0c\u901a\u8fc7\u6a21\u5757\u540d\u79f0\u6d88\u9664\u6b67\u4e49\uff08Data.ByteString \u8868\u793a\u4e25\u683c\uff0cData.ByteString.Lazy\u56e0\u4e3a\u61d2\uff09\u3002 module Data.ByteString.Lazy where import Data.ByteString \u9650\u5b9a\u4e3a\u4e25\u683c\u6570\u636e ByteString = Empty |\u5927\u5757{-#\u89e3\u5305#-}\uff01 Strict.ByteString ByteString -- ^ head chunk -- ^ lazy tail \u8fd9\u4e0d\u662f\u4e00\u4e2a\u4e25\u683c\u8bc4\u4f30\u7684\u7f13\u51b2\u533a\u548c\u957f\u5ea6\u5bf9\uff0c\u800c\u662f\u4e00\u4e2a\u60f0\u6027\u5217\u8868\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u7528 [ByteString] \u8868\u793a\u5b83\u7684\u60c5\u51b5\uff1aEmpty \u662f\u50cf [] \u548c Chunk \u5c31\u50cf : \u64cd\u4f5c\u7b26\u3002\u552f\u4e00\u7684\u64cd\u4f5c\u533a\u522b\u662f\u7b2c\u4e00\u4e2a\u4e25\u683c\u7684 ByteString \u53c2\u6570\u88ab\u4e25\u683c\u8bc4\u4f30\uff0c\u8fd9\u7a0d\u5fae\u51cf\u5c11\u4e86\u5b83\u5728\u5185\u5b58\u4e2d\u7684\u5f00\u9500\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u60f0\u6027 ByteString \u8868\u793a\u5b57\u7b26\u4e32\u7684\u5176\u4f59\u90e8\u5206\uff0c\u5e76\u4e0d\u4e25\u683c\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4f01\u4e1a\u7684\u91cd\u70b9\u662f\u8ba9 Haskell \u8fd0\u884c\u65f6\u7ba1\u7406\u4e0e\u6211\u4eec\u7684\u5b57\u8282\u7f13\u51b2\u533a\u60f0\u6027\u5217\u8868\u76f8\u5173\u7684\u60f0\u6027\u3002\u8fd9\u542c\u8d77\u6765\u5f88\u91cd\u8981\uff1aGHC \u7684\u8bc4\u4f30\u5668\u662f\u4e00\u4e2a\u7ecf\u8fc7\u5fae\u8c03\u7684\u5de5\u5177\uff0c\u6211\u4eec\u4e0d\u592a\u53ef\u80fd\u56e0\u6b64\u800c\u6539\u8fdb\u3002\u8fd9\u8ba9\u6211\u4eec\u60f3\u8c61\u4e00\u4e0b ByteStream.Lazy.readFile \u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1a\u7ed9\u5b9a\u4e00\u4e9b\u5757\u5927\u5c0f N\uff0c\u8fd0\u884c\u65f6\u5c06\u4ece\u6e90\u8bfb\u53d6 N \u4e2a\u5b57\u8282\uff0c\u5c06\u5b83\u4eec\u653e\u5728 !ByteString \u53c2\u6570\u4e2d\u3002\u7136\u540e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c06\u662f\u4e00\u4e2a thunk\uff0c\u5982\u679c\u6c42\u503c\uff0c\u5c06\u8bfb\u53d6\u53e6\u4e00\u4e2a\u6700\u5927\u957f\u5ea6\u4e3a N \u7684\u5b57\u8282\u7f13\u51b2\u533a\u3002\u5982\u679c\u4ece\u4e0d\u6c42\u503c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u2014\u2014\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u7684\u8c03\u7528\u4ee3\u7801\u53ea\u5bf9\u524d N \u4e2a\u5b57\u8282\u8fdb\u884c\u64cd\u4f5c\uff0c\u5219 Lazy\u3002 ByteString \u53c2\u6570\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u8bc4\u4f30\uff0c\u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u4ea7\u751f\u8bfb\u53d6\u66f4\u591a\u5b57\u8282\u7684\u5f00\u9500\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u6216\u591a\u6216\u5c11\u662f\u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u7136\u800c\uff0c\u4ece\u78c1\u76d8\u61d2\u60f0\u5730\u8bfb\u53d6\u6587\u4ef6\u65f6\uff0c\u61d2\u60f0\u7684 ByteString \u503c\u4e0d\u80fd\u53ef\u9760\u5730\u5de5\u4f5c\u3002\u5b83\u8fdd\u53cd\u4e86\u786e\u5b9a\u6027\u8d44\u6e90\u6e05\u7406\u7684\u539f\u5219\uff1a\u4e00\u65e6\u8bfb\u53d6\u4e86\u4e00\u4e2a\u5757\uff0c\u8bfb\u53d6\u5176\u5d4c\u5165\u7684 ByteString \u9700\u8981\u8bc4\u4f30\u5b83\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd9\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u7cfb\u7edf\u8c03\u7528\u6765\u6267\u884c\u8fdb\u4e00\u6b65\u9700\u8981\u7684\u78c1\u76d8 I/O \u4ee5\u6784\u5efa\u53e6\u4e00\u4e2a\u5757\uff08\u6216\u8005\u4e00\u4e2a Empty\uff0c\u5982\u679c\u6211\u4eecre \u5728\u6587\u4ef6\u672b\u5c3e\uff09\u3002\u5982\u679c\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u5f15\u7528\u5df2\u5173\u95ed\u7684\u5957\u63a5\u5b57\u6216\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6211\u4eec\u5c06\u9047\u5230\u8fd0\u884c\u65f6\u5d29\u6e83\u3002\u5373\u4f7f openFile \u53d1\u751f\u5728 IO monad \u4e2d\uff0c\u751f\u6210\u7684 ByteString \u4e5f\u5c06 IO \u90aa\u6076\u5730\u9690\u85cf\u5728\u5176\u4e2d\uff0c\u5373\u4f7f\u4f20\u9012\u5230\u5b83\u5e94\u8be5\u662f\u7eaf\u7684\u4e0a\u4e0b\u6587\u65f6\u4e5f\u662f\u5982\u6b64\u3002\u6211\u5df2\u7ecf\u770b\u5230\u8fd9\u88ab\u79f0\u4e3a\u201c\u4f2a\u7eaf\u201d\uff1a\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u7eaf\u8ba1\u7b97\uff0c\u4f46\u5b83\u53ef\u80fd\u5bfc\u81f4 I/O \u53d1\u751f\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u5373\u4f7f\u5b83\u6709\u6548\uff0c\u4e5f\u4e0d\u662f Haskell \u65b9\u5f0f\u3002 I/O \u592a\u91cd\u8981\u4e86\uff0c\u4e0d\u80fd\u9690\u5f0f\uff01\n\u8fd9\u4e00\u76f4\u662f\u4e00\u79cd\u975e\u5e38\u5197\u957f\u7684\u65b9\u5f0f\u6765\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5728\u5b58\u5728\u60f0\u6027 I/O \u7684\u60c5\u51b5\u4e0b\u6ca1\u6709\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u6ee1\u8db3\u6211\u4eec\u7684\u6240\u6709\u6807\u51c6\uff1a\u4e25\u683c\u7684 ByteString \u88ab\u4e00\u6b21\u6027\u8bfb\u5165\u5185\u5b58\uff0c\u8fd9\u8fdd\u53cd\u4e86\u6211\u4eec\u5bf9\u60f0\u6027\u7684\u9700\u6c42\u548c\u6301\u7eed\u7684\u8d44\u6e90\u6d88\u8017\uff1b Lazy.ByteString \u8fdd\u53cd\u4e86\u786e\u5b9a\u6027\u8d44\u6e90\u6e05\u7406\u7684\u539f\u5219\uff0c\u9664\u975e\u60a8\u4f7f\u7528 Haskell \u5bf9\u7ebf\u6027\u7c7b\u578b\u7684\u5b9e\u9a8c\u6027\u652f\u6301\uff0c\u8fd9\u53ef\u4ee5\u9632\u6b62\u60f0\u6027\u5b57\u8282\u4e32\u8d85\u8fc7\u5176\u5173\u8054\u7684\u6587\u4ef6\u53e5\u67c4\uff08\u5c3d\u7ba1\u7ebf\u6027\u7c7b\u578b\u662f\u5c1a\u672a\u5e7f\u6cdb\u91c7\u7528\u7684\u524d\u6cbf\u7279\u6027\uff09\u3002\u73b0\u5728\uff0c\u8fd9\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u91cd\u8981\u7684\u3002\u60a8\u7684\u7a0b\u5e8f\u53ef\u80fd\u53ea\u5904\u7406\u5c0f\u6587\u4ef6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u6839\u672c\u4e0d\u9700\u8981\u60f0\u6027 I/O\uff1a\u60a8\u53ea\u9700\u5c06\u6587\u4ef6\u5185\u5bb9\u4f5c\u4e3a\u4e25\u683c\u7684 ByteString \u8bfb\u53d6\u5373\u53ef\u3002\u73b0\u5728\u7684\u8ba1\u7b97\u673a\u6709\u5f88\u591a\u5185\u5b58\u3002\u4f46\u662f Haskell \u662f\u4e00\u79cd\u61d2\u60f0\u7684\u8bed\u8a00\uff0c\u5b83\u64c5\u957f\u89e3\u51b3\u53ef\u4ee5\u61d2\u60f0\u5730\u63aa\u8f9e\u7684\u95ee\u9898\u3002\u5982\u679c\u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\u662f\u60f0\u6027\u6d41\u5904\u7406\u7684\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u67d0\u79cd\u62bd\u8c61\uff0c\u53ef\u4ee5\u4ece\u5177\u6709\u6052\u5b9a\u5185\u5b58\u6d88\u8017\u3001\u6700\u5c11\u590d\u5236\u548c\u5b89\u5168\u3001\u786e\u5b9a\u6027\u8d44\u6e90\u6e05\u7406\u7684\u6570\u636e\u6e90\u4e2d\u60f0\u6027\u5730\u6d41\u5f0f\u4f20\u8f93\u5b57\u8282\u7f13\u51b2\u533a\u3002\u6d41\u3001\u6d41\u5b57\u8282\u4e32\u548c\u8d44\u6e90\u7684\u4e09\u91cd\u594f\u5904\u7406\u4e86\u8fd9\u4e00\u70b9\uff1a\u8ba9\u6211\u4eec\u770b\u4e00\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 Stream \u7c7b\u578b Stream (Of a) mr \u8868\u793a\u80fd\u591f\u4ea7\u751f\u96f6\u4e2a\u6216\u591a\u4e2a a \u503c\u3001\u5728 m \u4e2d\u6267\u884c\u6548\u679c\u5e76\u8fd4\u56de\u6700\u7ec8 r \u7ed3\u679c\u7c7b\u578b\u7684\u6d41\u3002\u6211\u4eec\u53ef\u4ee5\u5728 Stream \u672c\u8eab\u7684\u5b9a\u4e49\u4e2d\u770b\u5230\u8fd9\u4e9b\u529f\u80fd\uff1a\u8fd9\u6837\u7684\u8ba1\u7b97\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8ba1\u7b97\u8fc7\u7684 Step\uff0c\u5d4c\u5165\u4e00\u4e2a monadic Effect\uff0c\u6216\u8005\u7b80\u5355\u5730\u8fd4\u56de\u4e00\u4e2a\u7eaf\u503c\u3002 module Streaming where data Stream fmr = Step !(f ( Stream fmr)) -- \u4ea7\u751f\u4e00\u4e2a\u9879\u76ee\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6d41\u7684\u5176\u4f59\u90e8\u5206\uff0c\u7531\u51fd\u5b50 f | \u5b9a\u4e49\u3002 Effect (m ( Stream fmr)) -- \u6267\u884c\u4e00\u4e9b\u5bfc\u81f4\u8fdb\u4e00\u6b65\u6d41\u7684\u4e00\u5143\u6548\u5e94 | return r -- \u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u8fd4\u56de\u4e00\u4e2a\u6700\u7ec8\u503c \u4f5c\u4e3a f \u7684\u503c\u6700\u5e38\u7528\u7684\u51fd\u5b50\u662f Of \u51fd\u5b50\uff0c\u5b83\u4e0e\u5143\u7ec4\u7c7b\u578b (,) \u76f8\u540c\uff0c\u4f46\u5b83\u7684\u5de6\u53c2\u6570\u662f\u4e25\u683c\u7684\uff0c\u518d\u6b21\u907f\u514d\u4e86\u5f53\u6211\u4eec\u77e5\u9053\u6240\u8ba8\u8bba\u7684\u503c\u5df2\u7ecf\u88ab\u8bc4\u4f30\u65f6\uff0c\u4e00\u4e2a\u60f0\u6027\u503c\u3002\n\u8fd0\u884c Stream \u7684\u5e38\u7528\u65b9\u6cd5\u662f\u8c03\u7528 Streaming.toList\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a Of-pair\uff0c\u5176\u4e2d\u5305\u542b\u751f\u6210\u7684 a \u503c\u548c\u6700\u7ec8 r \u7684\u5217\u8868\u3002\u8bf7\u6ce8\u610f\uff0cOf \u90e8\u5206\u5e94\u7528\u4e8e\u6d41\u4e2d\uff0c\u5176\u53c2\u6570 a \u662f\u6d41\u4ea7\u751f\u7684\u5143\u7d20\u7c7b\u578b\u3002 toList :: Monad m =&gt; Stream ( Of a) mr -&gt; m ( Of [a] r) \u8fd9\u91cc\u6ca1\u6709\u4efb\u4f55\u7279\u5b9a\u4e8e\u5b57\u8282\u4e32\u6216 I/O \u7684\u5185\u5bb9\uff0c\u8fd9\u610f\u5473\u7740 Stream \u9002\u7528\u4e8e\u5728\u4efb\u4f55 monad \u4e2d\u6784\u5efa\u6d41\u62bd\u8c61\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662fIO\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cByteStream \u5173\u200b\u200b\u5fc3\u7684\u662f\u4fdd\u5b58\u5206\u5757\u7684 ByteString \u503c\uff0c\u800c\u4e0d\u662f Stream\uff1a\u6a21\u5757 Streaming.ByteString \u6570\u636e ByteStream mr = Empty r |\u5927\u5757{-#\u89e3\u5305#-}\uff01 ByteString ( ByteStream \u5148\u751f) | Go (m ( ByteStream mr)) \u60a8\u4f1a\u6ce8\u610f\u5230 ByteStream \u4e0e Lazy.ByteString \u76f8\u4f3c\uff0c\u4f46\u6709\u4e00\u4e9b\u4e0d\u540c\u3002\u9996\u5148\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4e24\u4e2a\u7c7b\u578b\u53d8\u91cf m \u548c r\uff1am \u8868\u793a\u4e00\u4e2a monadic \u4e0a\u4e0b\u6587\uff0c\u4f7f\u7528 Go \u6784\u9020\u51fd\u6570\uff0c\u5206\u5757\u8bfb\u53d6\u53ef\u4ee5\u901a\u8fc7\u5b83\u6267\u884c\u526f\u4f5c\u7528\u3002\u8fd9\u4e2a Go \u6784\u9020\u51fd\u6570\u4e5f\u662f\u65b0\u7684\uff1b\u5b83\u660e\u786e\u8868\u793a\uff0c\u8bfb\u53d6\u66f4\u591a ByteString \u5757\u4f1a\u5bfc\u81f4\u526f\u4f5c\u7528\uff0c\u8fd9\u4e0e Lazy.ByteString \u4e0d\u540c\uff0c\u540e\u8005\u9690\u85cf\u4e86\u4ece\u78c1\u76d8\u8bfb\u53d6\u957f\u5b57\u7b26\u4e32\u65f6\u53ef\u80fd\u53d1\u751f\u6587\u4ef6 I/O \u7684\u4e8b\u5b9e\u3002\u901a\u8fc7\u4f7f\u7528 MonadResource \u6e05\u7406\u6587\u4ef6\u53e5\u67c4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u7cfb\u7edf\u6307\u793a\u4ece ByteString \u4e2d\u8bfb\u53d6 ByteString \u503c\u9700\u8981\u78c1\u76d8 I/O\uff0c\u5e76\u4e14\u5fc5\u987b\u6e05\u9664\u6587\u4ef6\u53e5\u67c4\u6216\u4e34\u65f6\u6570\u636e\u7684\u4efb\u4f55\u5730\u65b9\u7684 MonadResource \u7ea6\u675f\u7ebf\u7a0b\u3002\u6700\u540e\uff0cEmpty \u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a r \u53c2\u6570\uff0c\u8868\u793a\u7ed9\u5b9a ByteStream \u8ba1\u7b97\u7684\u6700\u7ec8\u503c\uff08\u5982\u679c\u6709\uff09\u3002 ByteStream \u548c\u61d2\u60f0\u7684 ByteString \u4e4b\u95f4\u7684\u533a\u522b\u53ef\u80fd\u770b\u8d77\u6765\u5e76\u4e0d\u5927\uff0c\u4f46\u5b83\u4ee3\u8868\u4e86 Haskell \u975e\u5e38\u6df1\u523b\u7684\u4e00\u4e9b\u4e1c\u897f\uff1a\u901a\u5e38\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u8ba1\u7b97\u89c6\u4e3a\u6570\u636e\u6765\u83b7\u5f97\u8868\u8fbe\u80fd\u529b\u3002 ByteStream \u6709\u4e00\u4e2a Go \u6784\u9020\u51fd\u6570\uff0c\u5b83\u5141\u8bb8\u5d4c\u5165\u4efb\u610f m-actions\uff0c\u53ea\u8981\u5b83\u4eec\u8fd4\u56de\u8fdb\u4e00\u6b65\u7684 ByteStream\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u4f7f ByteStream \u80fd\u591f\u8868\u793a\u4efb\u4f55\u7c7b\u578b\u7684\u8ba1\u7b97\u3002\u5728\u7cfb\u7edf\u4ea7\u751f\u7684 ByteStream \u503c\u7684\u60c5\u51b5\u4e0b\uff0cm \u53ef\u4ee5\u662f IO\uff0c\u6216\u5b9e\u73b0 MonadIO \u7684 monad \u8f6c\u6362\u5668\uff0c\u6216\u5b9e\u73b0 Lift IO \u7684\u6548\u679c\u5806\u6808\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u63d0\u524d\u5b9a\u4e49\u7684 ByteStream\uff0c\u90a3\u4e48 m \u53ef\u4ee5\u662f Identity\u3002\u4e00\u4e2a\u6709\u8da3\u7684\u7ed3\u679c\u662f ByteStream \u7684 Show \u5b9e\u4f8b\uff0c\u5b83\u8981\u6c42 m \u53c2\u6570\u4e3a Identity \u5e76\u4e14 r \u8fd4\u56de\u7c7b\u578b\u4e3a ()\uff0c\u56e0\u4e3a Show \u7c7b\u578b\u7c7b\u65e0\u6cd5\u8bbf\u95ee\u6253\u5370\u8f93\u51fa\u6240\u9700\u7684 monadic \u4e0a\u4e0b\u6587\uff0c\u4f8b\u5982\uff0c\u9700\u8981 IO \u6765\u6267\u884c\u5176\u6548\u679c\u7684 ByteStream\u3002 \uff08\u8981\u6253\u5370\u8fd9\u6837\u7684 ByteStream\uff0c\u60a8\u9700\u8981\u5c06\u5b83\u4f20\u9012\u7ed9\u7c7b\u578b\u4e3a MonadIO m =&gt; ByteStream mr -&gt; mr \u7684 stdout \u6d88\u9664\u5668\uff0c\u5b83\u4f1a\u8bc4\u4f30\u8be5\u6d41\u7684\u6548\u679c\u5e76\u5c06\u5728\u6b64\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4efb\u4f55\u5757\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002\uff09\u6b64\u5916, ByteStream \u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u8ba1\u7b97\uff0c\u5b83\u662f\u4e00\u4e2a monad \u8f6c\u6362\u5668\uff0c\u6839\u636e\u4e00\u4e9b\u7236 monad m \u8fdb\u884c\u53c2\u6570\u5316\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4ee5\u610f\u60f3\u4e0d\u5230\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\uff0c\u4f8b\u5982\u6211\u4eec\u5feb\u901f\u800c\u80ae\u810f\u7684 Web \u670d\u52a1\u5668\u4e2d\u7684\u57fa\u672c monad\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u6211\u4eec\u7684\u6548\u679c\u5806\u6808\u4e2d\u5fc3\u6709\u4e00\u4e2a ByteStream IO monad \u4f7f\u6211\u4eec\u80fd\u591f\u53d1\u9001\u5b57\u8282\u6d41\u4f7f\u7528 sendM \u51fd\u6570\u65ad\u5f00\u7f51\u7edc\u8fde\u63a5\u3002\u6211\u4eec\u5c06\u8bf7\u6c42\u503c\u7684\u5904\u7406\u5de5\u4f5c\u4ea4\u7ed9 Reader \u6548\u679c\uff0c\u72b6\u6001\u6548\u679c\u8d1f\u8d23\u5904\u7406 Response \u503c\uff0c\u4f46\u662f HTTP \u5904\u7406\u7a0b\u5e8f\u8981\u6267\u884c\u4efb\u4f55\u6709\u7528\u7684\u64cd\u4f5c\uff0c\u5b83\u5fc5\u987b\u80fd\u591f\u8bbf\u95ee\u5b57\u8282\u63a5\u6536\u5668\u3002\u4f7f\u7528 Lift (ByteStream IO) \u5141\u8bb8\u6211\u4eec\u8bbf\u95ee\u6b64\u7c7b\u529f\u80fd\uff0c\u800c\u65e0\u9700\u900f\u9732\u8fd9\u4e9b\u5b57\u8282\u6700\u7ec8\u4f20\u8f93\u7ed9\u7528\u6237\u7684\u65b9\u5f0f\uff08\u6211\u4eec\u53ea\u77e5\u9053\u5b83\u53d1\u751f\u5728 IO \u4e2d\uff0c\u5b9e\u9645\u4e0a\u6240\u6709\u7f51\u7edc\u6d3b\u52a8\u90fd\u5fc5\u987b\u8fd9\u6837\u505a\uff09\u3002\n\u68c0\u67e5\u6784\u9020 ByteStream \u503c\u7684\u65b9\u6cd5\u4f7f ByteString\u3001Stream \u548c ByteStream \u4e4b\u95f4\u7684\u5173\u7cfb\u66f4\u52a0\u6e05\u6670\uff1a -- \u7a7a ByteString \u53ef\u6cdb\u5316\u4e3a\u4efb\u4f55 m\uff0c\u4f46\u4e0d\u643a\u5e26\u4efb\u4f55\u503c -- \u5728\u5176\u8fd4\u56de\u7c7b\u578b\u4e2d\u3002 empty :: ByteStream m() -- \u5f53\u524d\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u5165\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5b57\u8282\u6d41\uff0c -- \u4f7f\u7528&#39;MonadIO&#39;\u4ece\u8f93\u5165\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e2d\u5b9e\u9645\u8bfb\u53d6\u3002 stdin :: MonadIO m =&gt; ByteStream m () -- \u5982\u679c\u6211\u4eec\u5df2\u7ecf\u6709\u4e00\u4e2a\u4e25\u683c\u7684 ByteString\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 -- &#39;Chunk&#39;\uff08\u548c\u4e00\u4e2a &#39;Empty&#39; \u5c3e\u90e8\uff09\u6253\u5305\u5b83\u3002 fromStrict :: Strict.ByteString -&gt; ByteStream m () -- \u4ece\u61d2\u60f0\u7684 ByteStream \u8f6c\u6362\u4e3a ByteString \u662f -- \u6298\u53e0\u524d\u8005\uff0c\u66ff\u6362 &#39;Empty&#39; \u548c &#39;Chunk&#39; -- \u6784\u9020\u51fd\u6570\u4e0e ByteStream \u63d0\u4f9b\u7684\u6784\u9020\u51fd\u6570. fromLazy :: Lazy.ByteString -&gt; ByteStream m () -- \u4e00\u822c\u800c\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 ByteStream \u89c6\u4e3a\u4e00\u79cd\u66f4\u6709\u6548\u7684 -- \u8868\u793a\u672a\u5206\u5757\u7684 Word8 \u503c\u7684\u6d41\uff0c\u6216\u5206\u5757\u7684\u4e25\u683c ByteString \u503c\u7684\u6d41\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u4fdd\u7559\u4e86\u8f93\u5165\u6d41\u7684 -- \u8fd4\u56de\u503c\u3002 pack :: Stream (Of Word8) mr -&gt; ByteStream mr fromStream :: Stream (Of Strict.ByteString) mr -&gt; ByteStream mr \u66f4\u6709\u8da3\u7684\u662f\u57fa\u672c\u7684\u6587\u4ef6\u8bfb\u53d6\u65b9\u6cd5\uff0creadFile\u3002\u6709\u8da3\u7684\u662f\uff0c\u8fd9\u662f\u6211\u4eec\u7b2c\u4e00\u6b21\u770b\u5230 MonadResource\uff0c\u4e00\u4e2a\u7531 resourcet \u5305\u63d0\u4f9b\u7684\u7c7b\u578b\u7c7b\u3002 MonadResource \u7c7b\u578b\u7c7b\u8868\u793a\u80fd\u591f\u7ba1\u7406\u5173\u952e\u8d44\u6e90\u751f\u547d\u5468\u671f\u7684 monad\uff0c\u5373\u4f7f\u5728......", "note_en": "One of my favorite founding principles    The cynics among us might refer to it as a myth rather than a principle, given that Unix is no stranger to massive, kitchen-sink programs. Indeed, I\u2019m writing this post in  such a program.   of Unix is the universality of streams of bytes. Unix shells give us a  monadic  pipeline operator  |, that, given some computation  a | b, executes  a so that its output forms the input to  b. This principle affords the  standard Unix commands succinct composition, allowing the executing shell, rather than the programs themselves, to control the flow of data through a composed sequence of shell commands. Indeed, the principle of byte stream manipulation serves as the foundation for entire entire programming languages like  sed and  awk. Tools like  xargs and  tee and  parallel provide higher-order combinators to construct pipelines from further pipelines in ways beyond the capabilities of the pipeline operator itself.\n Let\u2019s consider some properties of programs that work well in pipelined computations such as these, using  grep as the archetypal such program.  grep is, of course, a tool of near-unparalleled importance, being enshrined in the POSIX standard, and it\u2019s been optimized probably as  thoroughly as any other program. Our programs are probably not  grep, but they may need to emulate how  grep manages its input streams:\n It hides the details of resource manipulation. The operating system, its system libraries, the shell in current use, and the implementation of its  | operator hide the details of how input is batched and fed between files. Given that these details are abstracted from us, we should assume that input is buffered and chunked as necessary, and that these buffers and chunks are handled with as little overhead as possible. In particular, byte buffers read from an input stream should only be copied and retained if the program explicitly requests it: old input should never hang around in memory, given that the size of that input is theoretically unbounded.\n It consumes its input lazily. If I tell  grep to search a ten-gigabyte file for one and only one occurrence of a string, it should consume only as much input as is required to fulfill my request. If more bytes are read from a stream than needed, it should be indistinguishable, performance-wise, from reading as little input as is possible, and should produce no change in observable program behavior.\n It cleans up its resources. Should  grep request resources from the OS, or spawn some other helper process, these resources and subprocesses should be reclaimed quickly and reliably, even in the face of upstream or downstream pipeline failures, or even just a user impatiently hammering  Ctrl+C and sending dozens of  SIGKILL signals.\n C programs excel at fulfilling these criteria. Ha! Just kidding. C programs  can excel at streaming data manipulation, because C programming entrusts  you with its details, and you  might be someone who excels at streaming data manipulation. Though the POSIX standard provides certain guarantees    The POSIX standard  specifies that certain resources\u2014file descriptors, directory streams, stream converters from  iconv(), and message catalogs from  catopen\u2014are relinquished upon program exit. Child processes spawned with the  exec family of functions are usually not terminated (unless specifically requested by the parent process or an associated process group). Shared memory may or may not be relinquished, depending on whether other processes are referring to it. This digression is getting long enough as is; read the standard if you\u2019re really curious.   about the manner in which resources are reclaimed upon program exit, you are still responsible for managing resources during program execution. There aren\u2019t too many layers of abstraction between you,  stdin, and  stdout. Sure, if your underlying  FILE* struct can do some caching for you, it probably does, but you can always read directly with  read(2) or with some lower-level efficiency-focused framework like  kqueue,  epoll,  libdispatch, or  io_uring.\n With higher-level, garbage-collected languages, things become a good bit trickier. It is the responsibility of a higher-level language to insulate us from the concerns of C: as with shell scripts, we should have, in the common case, no particular knowledge of how files are read, how memory is allocated, or how input is buffered. For most programs, especially the quick-and-dirty ones at which garbage-collected languages excel, such details won\u2019t matter. But when you find yourself outside the realm of \u201cmost programs\u201d, the situation can prove vexing: the nature of a high-level language to isolate you from decisions made about resource management becomes a problem when the correctness of your software depends on the details of said resource management. We find ourselves confronted with a particularly tricky dialectic: high-level languages aid in the development of programs by abstracting away details, but hinder said development when program correctness depends directly on properties of these abstracted details, such as when writing code that handles error conditions robustly or remains reliable in the presence of resource pressure.    The difficulties encountered when addressing these concerns in portable shell scripts are just one of the many reasons we don\u2019t write everything in shell.\n Haskell\u2019s declarative nature, non-strict evaluation, and correct-by-construction philosophy makes it, at least in theory, an attractive solution for writing code that works well in streaming pipelines. In practice, however, we run into three interrelated but distinct problems, ones that display a nice symmetry with the properties of well-managed input streams outlined above:\n the  streaming problem: how do we write Haskell code that processes potentially-infinite data streams in a finite amount of memory?\n the  lazy I/O problem: given Haskell\u2019s non-strict semantics, how do we consume input from the outside world lazily and efficiently?\n the  resource manipulation problem: given that we have no direct control over the lifetime of data, how do we ensure that our code manages and relinquishes expensive resources correctly?\n I\u2019m going to discuss how to address these problems, using the  streaming ecosystem to address the first point, the  streaming-bytestring library the second, and the  resourcet library the third. Given Haskell\u2019s more-than-one-way-to-do-it philosophy, there exist many alternative ecosystems\u2014libraries like   conduit,   pipes-bytestring,   streamly, and   io-streams all provide tools to address these problems\u2014but the  streaming ecosystem is the one with which I am most familiar, and one with a generally friendly interface expressed with function composition. Both  streaming and  streaming-bytestring are cleverly designed and carefully thought through; I hope that this post serves as an exploration of their associated design decisions and resulting idioms. But to appreciate the depth of the problem, we have to start by discussing how Haskell represents byte buffers and streams of data, and how infelicities in their standard formulation provide  streaming-bytestring its raison d\u2019\u00eatre.\n  Feel free to skip to the next section if you\u2019re already familiar with Haskell string types and the perils of lazy I/O.\n Haskell is notorious for its plethora of string types:  String (a lazy list of four-byte  Char values); strict and lazy  Text values, and strict, lazy, and short  ByteString values    The  bytestring package also provides  Data.ByteString.Char8 and  Data.ByteString.Char8.Lazy, but these actually use the same type in-memory, and provide  APIs dealing in  Char and  String values rather than  Word8 and  [Word8], the former of which can be more natural as long as you know that your input is Latin-1 compatible.  . For the purposes of this article, we\u2019re not going to worry about  String or  Text, because both operate on values known to be valid Unicode data. Our streaming pipelines operate on bytes, not Unicode characters\u2014if, say, we want to be able to operate on binary data in such a pipeline, attempting to represent that data as Unicode text is inherently wrong. As such, we\u2019ll focus only on Haskell\u2019s byte buffer type,  ByteString. Strict  ByteStrings are pretty easy to understand:\n module  Data.ByteString  where     data  ByteString  -- strict    =  BS    {-# UNPACK #-}  !( ForeignPtr  Word8)  -- payload    {-# UNPACK #-}  ! Int  -- length\n ByteString represents a byte buffer and its associated length; in this it is similar to Go\u2019s  []byte or Rust\u2019s  &amp;[u8] (though it has one fewer datum to track, as the Rust and Go types offer mutable access to the associated byte buffer and thus must keep track of its total capacity).  ByteString values can contain  NUL bytes, or indeed any other  Word8 value. If a given  ByteString represents human-readable text, it must be converted to  Text values explicitly with  Data.Text.Encoding (for UTF-8/16/32) or  String values with the   encoding library; conversion failures should be handled at those callsites, though the correct behavior is often to throw an exception. This representation also allows for quick serialization and deserialization to C  char* values, by extracting that  ForeignPtr Word8 and treating it as the memory address that it is. Similarly, we can choose to create that  ForeignPtr Word8 by copying from another source (like another  ByteString or from a socket), or without copying by using unsafe  ByteString operations (which can break referential transparency, but are sometimes necessary in extremely low-level code).\n A memory and length pair, supporting O(1) length and indexing and O(n) concatenation, is pretty straightforward. More interesting is this type, the lazy  ByteString. For the sake of clarity of examples, we\u2019ll use a different type name than does  bytestring, which uses the  ByteString name for both lazy and strict variants, disambiguating via the module name ( Data.ByteString for strict, and  Data.ByteString.Lazy for lazy).\n module  Data.ByteString.Lazy  where     import  Data.ByteString  qualified  as  Strict     data  ByteString    =  Empty    |  Chunk  {-# UNPACK #-}  ! Strict.ByteString  ByteString    -- ^ head chunk -- ^ lazy tail\n Rather than being a strictly evaluated pair of buffer and length, this is a lazy list, similar to what we would have were we to represent it with  [ByteString]:  Empty is like  [] and  Chunk is like the  : operator. The only operative difference is that the first strict  ByteString parameter is evaluated strictly, which slightly reduces its overhead in memory. The second parameter, a lazy  ByteString representing the rest of the string, is  not strict, since the whole point of this enterprise is to let the Haskell runtime manage the laziness associated with our lazy list of byte buffers. This sounds like a great deal: GHC\u2019s evaluator is a finely-tuned instrument, and it\u2019s unlikely that we can improve thereupon.\n This lets us imagine how  ByteStream.Lazy.readFile would work: given some chunk size N, the runtime would read  N bytes from a source, placing them in the  !ByteString parameter. The second parameter would then be a thunk that, if evaluated, would read another byte buffer of maximum length  N. If that second parameter is never evaluated\u2014in other words, if our calling code operates only on the first  N bytes, the  Lazy.ByteString parameter will never be evaluated, and the overhead of reading further bytes is never incurred. This, indeed, is more-or-less how that function  is implemented.\n Yet lazy  ByteString values  don\u2019t work reliably when reading files lazily from disk. It violates the principle of deterministic resource cleanup: once a  Chunk is read, reading beyond its embedded  ByteString requires evaluating its second parameter, which entails further system calls to perform further needed disk I/O to build another  Chunk (or an  Empty if we\u2019re at the end of the file). Should those system calls reference a socket or file descriptor that has since been closed, we\u2019ll encounter a runtime crash. Even though  openFile takes place in the  IO monad, the resulting  ByteString has  IO hidden nefariously within, even when passed to contexts where it should be pure. I\u2019ve seen this referred to as \u201cpseudo-pure\u201d: it may look like a pure computation, but it can incur I/O happening somewhere else, which, even if it works, is not the Haskell way. I/O is too important to be left implicit!\n This has all been an exceptionally long-winded way to explain why no basic string type fulfills all our criteria in the presence of lazy I/O:\n A strict  ByteString is read all-at-once into memory, which violates both our need for laziness and constant resource consumption;\n Lazy.ByteString violates the princple of deterministic resource cleanup, unless you use Haskell\u2019s experimental support for linear types, which prevent lazy bytestrings from outliving their associated file handle (though linear types are a bleeding-edge feature that have yet to see widespread adoption).\n Now, this may not always matter. Your program may deal only in small files, in which case you don\u2019t need lazy I/O at all: you can just read file contents in as a strict  ByteString and you\u2019ll be okay. Computers have a  lot of memory nowadays. But Haskell is a lazy language, and it excels at problems that can be phrased lazily. Should our business logic be a matter of lazy stream processing, we need some sort of abstraction that can lazily stream byte buffers from a source of data with constant memory consumption, minimal copying, and safe, deterministic resource cleanup. The trifecta of  streaming,  streaming-bytestring, and  resourcet take care of this: let\u2019s take a look and see how it works.\n   The  Stream type  Stream (Of a) m r represents a stream capable of yielding zero or more  a values, performing effects in  m, and returning a final  r result type. We can see these capabilities in the definition of  Stream itself: such a computation can yield a computed  Step, embed a monadic  Effect, or simply  Return a pure value.\n module  Streaming  where     data  Stream f m r    =  Step  !(f ( Stream f m r))  -- yield an item, and the rest of a stream, defined by the functor f    |  Effect (m ( Stream f m r))  -- perform some monadic effect resulting in a further stream    |  Return r  -- do nothing and return a final value\n The most common functor used as the value of  f is the  Of functor, which is identical to the tuple type  (,), but strict in its left argument, again to avoid the overhead of a lazy value when we know that the value in question has already been evaluated.\n  The usual way to run a  Stream is to call  Streaming.toList, which returns an  Of-pair containing a list of yielded  a values and a final  r. Note that  Of is partially applied within the  Stream, with its parameter  a being the type of elements a stream yields.\n toList ::  Monad m  =&gt;  Stream ( Of a) m r  -&gt; m ( Of [a] r)\n There\u2019s nothing here specific to bytestrings or I/O, which means that  Stream is suitable for building streaming abstractions in any monad, not just  IO. In contrast,  ByteStream is concerned with holding chunked  ByteString values, not with  Stream:\n module  Streaming.ByteString     data  ByteStream m r    =  Empty r    |  Chunk  {-# UNPACK #-}  ! ByteString ( ByteStream m r)    |  Go (m ( ByteStream m r))\n You\u2019ll notice that  ByteStream is similar to  Lazy.ByteString, with a few differences. Firstly, it has access to two type variables  m and  r:  m represents a monadic context, with which chunked reads can perform side effects, using the  Go constructor. This  Go constructor is also new; it makes it explicit that reading further  ByteString chunks can cause side effects, unlike  Lazy.ByteString, which hid the fact that file I/O may occur when reading long strings from disk. By using  MonadResource to clean up file handles, we can indicate, with the type system, that reading  ByteString values out of a  ByteString entails disk I/O, and thread that  MonadResource constraint anywhere that file handles or ephemeral data must be cleaned up. Lastly, the  Empty constructor takes an  r argument, representing the final value, if any, of a given  ByteStream computation.\n The difference between  ByteStream and the lazy  ByteString might not seem seismic, but it represents something very profound about Haskell: often, we gain expressive power by treating  computations as data. The fact that  ByteStream has a  Go constructor, which allows embedding arbitrary  m-actions as long as they return a further  ByteStream, gives  ByteStream the ability to represent any kind of computation. In the case of  ByteStream values yielded from the system, that  m can be  IO, or a monad transformer implementing  MonadIO, or an effect stack implementing  Lift IO. But if we were dealing with a  ByteStream defined ahead of time, that  m can be  Identity.    An interesting consequence of this is the  Show instance for  ByteStream, which requires the  m parameter to be  Identity and the  r return type to be  (), because the  Show typeclass does not have access to the monadic context required to print out, say, a  ByteStream that needs  IO to perform its effects. (To print such a  ByteStream, you\u2019d pass it to the  stdout eliminator, of type  MonadIO m =&gt; ByteStream m r -&gt; m r, which evaluates that stream for its effects and prints to the console any chunks encountered while doing so.)\n Furthermore,  ByteStream isn\u2019t just a computation, it\u2019s a monad transformer, parameterized in terms of some parent monad  m. This means we can use it in unexpected ways, such as the base monad in our  quick-and-dirty web server: in that case, having a  ByteStream IO monad at the center of our effect stack gave us the capability to send streams of bytes down a network connection, using the  sendM function. We farmed out the handling of  Request values to the  Reader effect, and a  State effect took care of handling  Response values, but for an HTTP handler to do anything useful, it must have access to a sink of bytes. Using  Lift (ByteStream IO) allowed us access to such capabilities, without divulging the way in which these bytes are ultimately transmitted to the user (all we know is that it happens in  IO, as indeed all network activity must).\n  Examining the ways to construct  ByteStream values makes the relationship between  ByteString,  Stream, and  ByteStream clearer:\n -- An empty ByteString is generalizable to any m, but carries no value   -- in its return type.   empty ::  ByteStream m ()     -- The current program&#39;s standard input is itself a stream of bytes,   -- using &#39;MonadIO&#39; to actually read from the input&#39;s file descriptor.   stdin ::  MonadIO m  =&gt;  ByteStream m ()     -- If we already have a strict ByteString, we can package it up with   -- &#39;Chunk&#39; (and an &#39;Empty&#39; tail).   fromStrict ::  Strict.ByteString  -&gt;  ByteStream m ()     -- Converting from a lazy ByteStream to a ByteString is a matter of   -- folding over the former, replacing the &#39;Empty&#39; and &#39;Chunk&#39;   -- constructors with those provided by ByteStream.   fromLazy ::  Lazy.ByteString  -&gt;  ByteStream m ()     -- In general, we can see ByteStream as a more efficient   -- representation of a Stream of unchunked Word8 values, or a stream   -- of chunked, strict ByteString values. Note that these preserve the   -- return value of the input Stream.   pack  ::  Stream ( Of  Word8) m r  -&gt;  ByteStream m r   fromStream ::  Stream ( Of  Strict.ByteString) m r  -&gt;  ByteStream m r\n More interesting is the fundamental file-reading method,  readFile. It is interesting in that it is the first time we see  MonadResource, a typeclass provided by the  resourcet package.\n  The  MonadResource typeclass represents monads that are capable of managing the lifetime of critical resources, even in the\n......", "posttime": "2021-08-09 01:52:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "bytestring,streaming", "title": "\u5bf9\u6d41\u5f0f ByteString \u7684\u9882\u6b4c", "title_en": "Ode to a Streaming ByteString", "transed": 1, "url": "https://blog.sumtypeofway.com/posts/ode-to-a-streaming-bytestream.html", "via": "", "real_tags": ["streaming"]}]