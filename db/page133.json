[{"category": "", "categoryclass": "", "imagename": "f66716aef55b147a42c26023a572e44f.png", "infoid": 1070504, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8981\u7533\u8bf7\uff0c\u8bf7\u5c06\u60a8\u7684\u7b80\u5386\uff08\u6216 LinkedIn \u4e2a\u4eba\u8d44\u6599\uff09\u53d1\u9001\u7ed9\u6211\u4eec\uff0c\u5e76\u5728\u7535\u5b50\u90ae\u4ef6\u4e2d\u6dfb\u52a0\u51e0\u884c\u5185\u5bb9\uff0c\u89e3\u91ca\u4e3a\u4ec0\u4e48\u60a8\u4f1a\u6210\u4e3a\u8fd9\u4e2a\u804c\u4f4d\u7684\u5408\u9002\u4eba\u9009\uff0c\u8bf7\u53d1\u9001\u81f3careers@up.codes\u3002\u4ea7\u54c1\u7ecf\u7406 Fullstack \u5de5\u7a0b\u5e08 \u5185\u5bb9\u7ecf\u7406 \u6ce8\u610f\uff1a\u6211\u4eec\u7684\u8fdc\u7a0b\u804c\u4f4d\u4ec5\u9650\u4e8e UTC-8 \u5230 UTC-3\uff08\u57fa\u672c\u4e0a\u662f\u5317\u7f8e\u548c\u5357\u7f8e\uff09\u3002 UpCodes \u6b63\u5728\u5bfb\u627e\u6211\u4eec\u7684\u7b2c\u4e00\u4f4d\u4ea7\u54c1\u7ecf\u7406\u6765\u5b9a\u4e49\u548c\u5b9e\u65bd\u6211\u4eec\u7684\u4ea7\u54c1\u6d41\u7a0b\u3002\u6b64\u4eba\u5c06\u4e0e CEO \u5bc6\u5207\u5408\u4f5c\uff0c\u5236\u5b9a\u5177\u4f53\u7684\u8def\u7ebf\u56fe\uff0c\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u613f\u666f\u3002\u7531\u4e8e\u6211\u4eec\u7684\u7a7a\u95f4\u4e2d\u4e0d\u5b58\u5728\u7c7b\u4f3c\u7684\u5de5\u5177\uff0c\u56e0\u6b64\u4e00\u4e2a\u5173\u952e\u7684\u6311\u6218\u662f\u51b3\u5b9a\u6784\u5efa\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u6784\u5efa\u3002\u6211\u4eec\u5728\u4e00\u4e2a\u4e0d\u65ad\u53d1\u5c55\u7684\u9ad8\u5ea6\u590d\u6742\u7684\u884c\u4e1a\u4e2d\u8fd0\u8425\uff0c\u56e0\u6b64\u7406\u60f3\u7684\u5019\u9009\u4eba\u559c\u6b22\u638c\u63e1\u65b0\u9886\u57df\u3001\u4e0e\u7528\u6237\u4ea4\u8c08\u4ee5\u53ca\u5c06\u590d\u6742\u7684\u60f3\u6cd5\u8f6c\u5316\u4e3a\u7b80\u5355\u3001\u660e\u667a\u7684\u89e3\u51b3\u65b9\u6848\u3002 UpCodes \u6700\u5177\u6311\u6218\u6027\u7684\u4efb\u52a1\u4e4b\u4e00\u662f\u51b3\u5b9a\u6784\u5efa\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u6784\u5efa\u3002\u6211\u4eec\u5728\u4e00\u4e2a\u9ad8\u5ea6\u590d\u6742\u4e14\u4e0d\u900f\u660e\u7684\u9886\u57df\uff083D \u4e2d\u7684\u89c4\u5219\u4f1a\u968f\u7740\u65f6\u95f4\u548c\u5730\u70b9\u7684\u53d8\u5316\u800c\u53d8\u5316\uff09\u4e2d\u8fd0\u4f5c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u89e3\u51b3\u590d\u6742\u6027\u3001\u4e0e\u7528\u6237\u4ea4\u8c08\u5e76\u63d0\u51fa\u660e\u667a\u3001\u7b80\u5355\u7684\u60f3\u6cd5\u7684\u4eba\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u7ecf\u7406\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u8fdb\u884c\u6218\u7565\u6027\u601d\u8003\u5e76\u4e14\u4e0d\u6015\u5f04\u810f\u81ea\u5df1\u7684\u624b\u7684\u4eba\u3002\u60a8\u5c06\u4e0e\u6211\u4eec\u7684\u7528\u6237\u548c\u5de5\u7a0b\u56e2\u961f\u5bc6\u5207\u5408\u4f5c\uff0c\u521b\u5efa\u5047\u8bbe\u3001\u6d4b\u8bd5\u60a8\u7684\u5047\u8bbe\u5e76\u5236\u5b9a\u89c4\u8303\u3002\u9274\u4e8e\u51b3\u5b9a\u6784\u5efa\u4ec0\u4e48\u548c\u89e3\u51b3\u7ec6\u8282\u662f\u6211\u4eec\u6700\u8270\u5de8\u7684\u6311\u6218\u4e4b\u4e00\uff0c\u60a8\u4f1a\u53d1\u73b0\u6211\u4eec\u6709\u4e00\u4e2a\u975e\u5e38\u5f00\u653e\u7684\u73af\u5883\uff0c\u6211\u4eec\u9f13\u52b1\u8bb8\u591a\u5229\u76ca\u76f8\u5173\u8005\u8fdb\u884c\u8fa9\u8bba\u548c\u6295\u5165\u3002\u901a\u8fc7\u5927\u91cf\u7528\u6237\u8bbf\u8c08\u548c\u7814\u7a76\u6df1\u5165\u4e86\u89e3\u6211\u4eec\u7684\u884c\u4e1a\uff0c\u5e76\u4ee5\u6b64\u4e3a\u57fa\u7840\u63d0\u4f9b\u9ad8\u7ea7\u89c1\u89e3\u4ee5\u53ca\u78e8\u7ec3\u65b0\u529f\u80fd\u7684\u7ec6\u8282\u4e0e\u8bbe\u8ba1\u5e08\u548c\u4e3b\u9898\u4e13\u5bb6\u5408\u4f5c\uff0c\u4e3a\u65b0\u529f\u80fd\uff0c\u6536\u96c6\u6709\u5173\u5b83\u4eec\u7684\u5185\u90e8/\u5916\u90e8\u53cd\u9988\u5e76\u8fdb\u884c\u8fed\u4ee3 \u4ee5\u5408\u4e4e\u903b\u8f91\u3001\u7ed3\u6784\u826f\u597d\u7684\u65b9\u5f0f\u4e0e\u6211\u4eec\u7684\u56e2\u961f\u6c9f\u901a\u548c\u8c03\u6574\u65b0\u529f\u80fd\u7684\u6218\u7565\u548c\u57fa\u672c\u539f\u7406 \u7ba1\u7406\u590d\u6742\u4ea7\u54c1\u7684\u7ecf\u9a8c\uff0c\u4ee5\u7ed3\u6784\u5316\u7684\u65b9\u5f0f\u63d0\u51fa\u89e3\u51b3\u65b9\u6848\uff0c\u4f7f\u7528\u7528\u6237\u53cd\u9988\u548c\u6570\u636e \u4f5c\u4e3a\u6211\u4eec\u5de5\u7a0b\u56e2\u961f\u7684\u57fa\u7840\u6210\u5458\uff0c\u60a8\u5c06\u53c2\u4e0e\u6211\u4eec\u7f51\u7edc\u4ea7\u54c1\u529f\u80fd\u7684\u7aef\u5230\u7aef\u5f00\u53d1\uff0c\u4ece\u67b6\u6784\u4e00\u76f4\u5230\u652f\u6301\u3002\u6211\u4eec\u7ecf\u5e38\u53d1\u5e03\u65b0\u529f\u80fd\uff0c\u5e76\u4e0e\u6211\u4eec\u7684\u5e02\u573a\u4fdd\u6301\u5bc6\u5207\u8054\u7cfb\u3002\u60a8\u5fc5\u987b\u613f\u610f\u4eb2\u81ea\u52a8\u624b\uff08\u5e76\u5b66\u4e60\uff09\u6574\u4e2a\u5806\u6808\u4e2d\u7684\u6240\u6709\u5185\u5bb9\uff1aAPI \u8bbe\u8ba1\u3001\u524d\u7aef\u3001\u540e\u7aef\u3001\u6570\u636e\u5de5\u7a0b\u3001\u7b97\u6cd5\u3001\u542f\u52a8\u5de5\u7a0b\u3001\u5206\u6790\u3001\u9519\u8bef\u62a5\u544a\u7b49\u3002\u521b\u5efa\u4e00\u4e2a\u5de5\u5177\uff0c\u8ba9\u4e13\u5bb6\u7f16\u5199\u516c\u5f0f\u6765\u8bc6\u522b\u5efa\u7b51\u89c4\u8303\u90e8\u5206\u4f55\u65f6\u9002\u7528\u4e8e\u7528\u6237\u7684\u5efa\u7b51\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u627e\u5230\u76f8\u5173\u4fe1\u606f \u5728\u5efa\u7b51\u89c4\u8303\u90e8\u5206\u521b\u5efa Rap Genius \u98ce\u683c\u7684\u6ce8\u91ca\uff0c\u4ee5\u521b\u5efa\u66f4\u5177\u4ea4\u4e92\u6027\u7684\u7528\u6237\u4f53\u9a8c\n\u7f16\u5199\u7b97\u6cd5\u6765\u68c0\u6d4b\u548c\u663e\u200b\u200b\u793a\u4ee3\u7801\u7248\u672c\u5982\u4f55\u968f\u65f6\u95f4\u53d8\u5316\uff0c\u4ee5\u4fbf\u7528\u6237\u4e86\u89e3\u6cd5\u89c4\u5982\u4f55\u6f14\u53d8", "note_en": "To apply, send us your resume (or LinkedIn profile) with a couple lines in the email that explain why you\u2019d be the right person for the opportunity at careers@up.codes.     Product Manager   Fullstack Engineer   Content Manager     Note: our remote positions are limited to UTC-8 to UTC-3 (basically North and South America).\n  UpCodes is looking for our first product manager to define and operationalize our Product process. This person will partner closely with the CEO to build a concrete roadmap to help us achieve our vision.     Since no similar tools exist in our space, a key challenge is deciding what to build and how to do it. We operate in a highly complex industry that\u2019s constantly evolving, so the ideal candidate enjoys mastering new domains, talking with users, and translating complex ideas into simple, sensible solutions.     One of the most challenging tasks at UpCodes is deciding what to build and exactly how to do it. We operate in a highly complex and opaque domain (regulations that are in 3D and change across time and location), so we need someone who can wrangle complexity, talk with users, and come up with sensible, simple ideas. For our first product manager, we need someone who can think strategically and isn&#39;t afraid to get their hands dirty.     You will work closely with our users and engineering team to create hypotheses, test your assumptions, and develop specs. Given that deciding what to build and ironing out the details is one of our toughest challenges, you&#39;ll find that we have a very open environment where we encourage debate and input from lots of stakeholders.    Gain a deep understanding of our industry through lots of user interviews and research, and use this to inform both high-level insights as well as honing the nitty-gritty details of new features\n  Work with designers and subject matter experts to create specs/mocks for new features, gather internal/external feedback on them and iterate\n        Communicate and align our team with the strategy and rationale for new features in a logical, well-structured way\n    Experience with managing a complex product, coming up with solutions in a structured way, using user feedback and data\n  As a foundational member of our engineering team, you&#39;ll be involved in end-to-end development on features across our web product, from architecture all the way to support. We have a frequent cadence of shipping new features and a close connection to our market.    You&#39;ll have to be willing to get your hands dirty with (and learn) everything across the stack: API design, frontend, backend, data engineering, algorithms, startup engineering, analytics, bug reporting, etc.            Create a tool that allows experts to write formulas to identify when a building code section applies for a user&#39;s building, so we can help them find relevant information\n  Create Rap Genius-style annotations on sections of building code, to create a more interactive user experience\n  Write algorithms to detect and display how versions of a code have changed through time, so users understand how regulations how evolved", "posttime": "2021-07-30 05:16:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "hiring", "title": "UpCodes \u6b63\u5728\u8058\u8bf7\u6211\u4eec\u7684\u7b2c\u4e00\u4f4d PM \u6765\u4e3a\u67b6\u6784\u5e08\u81ea\u52a8\u5316\u5408\u89c4\u6027", "title_en": "UpCodes is hiring our first PM to automate compliance for architects", "transed": 1, "url": "https://up.codes/careers#product_manager", "via": "", "real_tags": ["hiring"]}, {"category": "", "categoryclass": "", "imagename": "3d438c1f6954aa586516b67d6787e757.png", "infoid": 1070503, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e NSO \u5728\u4e00\u9879\u6b63\u5728\u8fdb\u884c\u7684\u8bc9\u8bbc\u4e2d\u63d0\u4ea4\u7684\u7279\u522b\u6cd5\u5ead\u6587\u4ef6\uff0cFacebook \u4ee3\u8868\u4e0e\u6709\u4e89\u8bae\u7684\u76d1\u63a7\u4f9b\u5e94\u5546 NSO Group \u63a5\u6d3d\uff0c\u8bd5\u56fe\u8d2d\u4e70\u4e00\u79cd\u53ef\u4ee5\u5e2e\u52a9 Facebook \u66f4\u597d\u5730\u76d1\u63a7\u5176\u90e8\u5206\u7528\u6237\u7684\u5de5\u5177\u3002 Facebook \u76ee\u524d\u6b63\u5728\u8d77\u8bc9 NSO\uff0c\u56e0\u4e3a\u8fd9\u5bb6\u9ed1\u5ba2\u516c\u53f8\u5982\u4f55\u5229\u7528 WhatsApp \u4e2d\u7684\u6f0f\u6d1e\u5e2e\u52a9\u653f\u5e9c\u9ed1\u5ba2\u5165\u4fb5\u7528\u6237\u3002 NSO \u9500\u552e\u4e00\u79cd\u540d\u4e3a Pegasus \u7684\u4ea7\u54c1\uff0c\u5b83\u5141\u8bb8\u64cd\u4f5c\u5458\u8fdc\u7a0b\u611f\u67d3\u624b\u673a\u5e76\u4ece\u4e2d\u63d0\u53d6\u6570\u636e\u3002\u6839\u636e NSO \u9996\u5e2d\u6267\u884c\u5b98 Shalev Hulio \u7684\u58f0\u660e\uff0c\u4e24\u540d Facebook \u4ee3\u8868\u4e8e 2017 \u5e74 10 \u6708\u4e0e NSO \u63a5\u6d3d\uff0c\u8981\u6c42\u8d2d\u4e70 Pegasus \u67d0\u4e9b\u529f\u80fd\u7684\u4f7f\u7528\u6743\u3002\u5f53\u65f6\uff0cFacebook \u6b63\u5904\u4e8e\u90e8\u7f72\u540d\u4e3a Onavo Protect \u7684 VPN \u4ea7\u54c1\u7684\u65e9\u671f\u9636\u6bb5\uff0c\u5728\u67d0\u4e9b\u7528\u6237\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u4ea7\u54c1\u4f1a\u5206\u6790\u4e0b\u8f7d\u8be5\u4ea7\u54c1\u7684\u7528\u6237\u7684\u7f51\u7edc\u6d41\u91cf\uff0c\u4ee5\u67e5\u770b\u4ed6\u4eec\u4f7f\u7528\u7684\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u3002\u6839\u636e\u6cd5\u5ead\u6587\u4ef6\uff0cFacebook \u7684\u4ee3\u8868\u4f3c\u4e4e\u5bf9\u8d2d\u4e70 Pegasus \u7684\u4e00\u90e8\u5206\u4f5c\u4e3a\u8fdc\u7a0b\u5165\u4fb5\u624b\u673a\u7684\u9ed1\u5ba2\u5de5\u5177\u4e0d\u611f\u5174\u8da3\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u79cd\u66f4\u6709\u6548\u5730\u76d1\u63a7\u5df2\u7ecf\u5b89\u88c5\u4e86 Onavo \u7684\u7528\u6237\u7684\u624b\u673a\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u4f60\u4e3a NSO \u6216 Facebook \u5de5\u4f5c\uff0c\u8fd8\u662f\u66fe\u7ecf\uff1f\u6211\u4eec\u5f88\u4e50\u610f\u542c\u53d6\u60a8\u7684\u610f\u89c1\u3002\u4f7f\u7528\u975e\u5de5\u4f5c\u7535\u8bdd\u6216\u8ba1\u7b97\u673a\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7 +44 20 8133 5190 \u7684 Signal \u5b89\u5168\u8054\u7cfb Joseph Cox\uff0cjosephcox \u7684 Wickr\uff0cjfcox@jabber.ccc.de \u7684 OTR \u804a\u5929", "note_en": "Facebook representatives approached  controversial surveillance vendor NSO Group to try and buy a tool that could help Facebook better monitor a subset of its users, according to an extraordinary court filing from NSO in an ongoing lawsuit.\n  Facebook is currently suing NSO for how the hacking firm leveraged a vulnerability in WhatsApp to help governments hack users. NSO sells a product called Pegasus, which allows operators to remotely infect cell phones and lift data from them.\n    According to  a declaration from NSO CEO Shalev Hulio, two Facebook representatives approached NSO in October 2017 and asked to purchase the right to use certain capabilities of Pegasus.\n  At the time, Facebook was in the early stages of deploying a VPN product called Onavo Protect, which, unbeknownst to some users,  analyzed the web traffic of users who downloaded it to see what other apps they were using. According to the court documents, it seems the Facebook representatives were not interested in buying parts of Pegasus as a hacking tool to remotely break into phones, but more as a way to more effectively monitor phones of users who had already installed Onavo.\n Do you work for NSO or Facebook, or used to? We\u2019d love to hear from you. Using a non-work phone or computer, you can contact Joseph Cox securely on Signal on  +44 20 8133 5190   , Wickr on josephcox, OTR chat on    jfcox@jabber.ccc.de", "posttime": "2021-07-30 05:16:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u8f6f\u4ef6,facebook,nso", "title": "Facebook \u5e0c\u671b NSO \u95f4\u8c0d\u8f6f\u4ef6\u76d1\u89c6\u7528\u6237\uff0cNSO \u9996\u5e2d\u6267\u884c\u5b98\u58f0\u79f0\uff082020 \u5e74\uff09", "title_en": "Facebook Wanted NSO Spyware to Monitor Users, NSO CEO Claims (2020)", "transed": 1, "url": "https://www.vice.com/en/article/pke9k9/facebook-wanted-nso-spyware-to-monitor-users", "via": "", "real_tags": ["2020", "\u8f6f\u4ef6", "facebook", "nso"]}, {"category": "", "categoryclass": "", "imagename": "7775927f9ad4a7cb1cfccbb40660ef29.jpg", "infoid": 1070502, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fc8\u514b\u5c14\u6469\u5c14\u5c55\u793a\u4e86\u4eba\u7c7b\u661f\u7403\uff0c\u4e00\u90e8\u6562\u4e8e\u8bf4\u51fa\u5176\u4ed6\u4eba\u4e0d\u4f1a\u8bf4\u7684\u8bdd\u7684\u7eaa\u5f55\u7247\u2014\u2014\u6211\u4eec\u6b63\u5728\u5931\u53bb\u963b\u6b62\u6c14\u5019\u53d8\u5316\u7684\u6218\u6597\u2026\u2026", "note_en": "Michael Moore presents Planet of the Humans, a documentary that dares to say what no one else will  \u2014 that we are losing the battle to stop climate change on...", "posttime": "2021-07-30 05:13:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u7c7b,planet,\u5c55\u793a", "title": "\u7eaa\u5f55\u7247\uff1a\u4eba\u7c7b\u661f\u7403", "title_en": "Documentary: Planet of the Humans", "transed": 1, "url": "https://www.youtube.com/watch?v=Zk11vI-7czE", "via": "", "real_tags": ["\u4eba\u7c7b", "planet", "\u5c55\u793a"]}, {"category": "", "categoryclass": "", "imagename": "d1c92a9dcec06bd8fa48558d10a45df1.png", "infoid": 1070501, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Kubernetes 1.22 \u5373\u5c06\u53d1\u5e03\uff0c\u65b0\u9c9c\u51fa\u7089\uff01\u6211\u4eec\u4ece\u54ea\u91cc\u5f00\u59cb\uff1f\u6b64\u7248\u672c\u5e26\u6765\u4e86 56 \u9879\u589e\u5f3a\u529f\u80fd\uff0c\u6bd4 Kubernetes 1.21 \u4e2d\u7684 50 \u9879\u548c Kubernetes 1.20 \u4e2d\u7684 43 \u9879\u6709\u6240\u589e\u52a0\u3002\u5728\u8fd9 56 \u9879\u589e\u5f3a\u529f\u80fd\u4e2d\uff0c13 \u9879\u5df2\u5347\u7ea7\u4e3a\u7a33\u5b9a\u7248\uff0c\u591a\u8fbe 24 \u9879\u662f\u4e0d\u65ad\u6539\u8fdb\u7684\u73b0\u6709\u529f\u80fd\uff0c\u8fd8\u6709 16 \u9879\u662f\u5168\u65b0\u7684\u3002\u5f88\u9ad8\u5174\u770b\u5230\u8fd9\u4e48\u591a\u4e13\u6ce8\u4e8e\u5b89\u5168\u6027\u7684\u65b0\u529f\u80fd\uff0c\u4f8b\u5982\u66ff\u6362 Pod \u5b89\u5168\u7b56\u7565\u3001\u65e0\u6839\u6a21\u5f0f\u4ee5\u53ca\u9ed8\u8ba4\u542f\u7528 Seccomp\u3002\u6709\u5f88\u591a\u8981\u8c08\u7684\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u5f00\u59cb\u4e86\u89e3 Kubernetes 1.22 \u4e2d\u7684\u65b0\u529f\u80fd\u3002\u5728 Kubernetes 1.21 \u4e2d\u88ab\u5f03\u7528\u540e\uff0c\u6211\u4eec\u77e5\u9053 Pod \u5b89\u5168\u7b56\u7565\u7684\u66ff\u4ee3\u54c1\u5373\u5c06\u63a8\u51fa\uff0c\u4f46\u6211\u4eec\u4e0d\u77e5\u9053\u5b83\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u3002\u73b0\u5728\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u5f97\u77e5\u5b83\u5c06\u6210\u4e3a\u4e00\u4e2a\u51c6\u5165\u63a7\u5236\u5668\uff0c\u91cd\u7528\u73b0\u6709\u57fa\u7840\u8bbe\u65bd\u7684\u4e00\u90e8\u5206\u3002\u4e0d\u4ee5 root \u8eab\u4efd\u8fd0\u884c\u5bb9\u5668\u662f\u6392\u540d\u7b2c\u4e00\u7684\u5bb9\u5668\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\u3002\u4ee4\u4eba\u6b23\u6170\u7684\u662f\uff0c\u8fd9\u9879\u63aa\u65bd\u6b63\u5728\u53d1\u6325\u5230\u6781\u81f4\uff0c\u8ba9\u6211\u4eec\u80fd\u591f\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u8fd0\u884c\u6574\u4e2a Kubernetes \u5806\u6808\u3002\u8fd9\u771f\u7684\u4f1a\u8ba9 Kubernetes \u66f4\u52a0\u5b89\u5168\u3002\u5982\u679c\u5728\u6b64 Kubernetes \u7248\u672c\u4e4b\u540e\u6709\u4e00\u4ef6\u4e8b\u60c5\u5f88\u6e05\u695a\uff0c\u90a3\u5c31\u662f\u5411\u5b89\u5168\u6027\u7684\u8f6c\u53d8\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6dfb\u52a0\u8fd9\u4e00\u989d\u5916\u7684\u5b89\u5168\u5c42\u5c06\u4f7f\u8bb8\u591a\u6f5c\u5728\u7684\u6f0f\u6d1e\u5229\u7528\u53d8\u5f97\u6beb\u65e0\u610f\u4e49\u3002\u50cf\u8fd9\u6837\u7684\u6b65\u9aa4\u7edd\u5bf9\u4f1a\u6539\u53d8\u4eba\u4eec\u5bf9 Kubernetes \u7684\u770b\u6cd5\u3002\u6211\u4eec\u5e0c\u671b\u5728\u6bcf\u4e2a Kubernetes \u7248\u672c\u4e2d\u770b\u5230\u7684\u90a3\u4e9b\u5c0f\u7ec6\u8282\u4e4b\u4e00\uff0c\u5b83\u4e0d\u4f1a\u6210\u4e3a\u5934\u6761\u65b0\u95fb\uff0c\u4f46\u4f1a\u8ba9\u751f\u6d3b\u53d8\u5f97\u66f4\u8f7b\u677e\u3002 Swap \u662f\u6bcf\u4e2a\u5f00\u53d1\u4eba\u5458\u90fd\u5e94\u8be5\u62e5\u6709\u7684\u3002\u901a\u8fc7\u652f\u6301\uff0c\u5728\u4f7f\u7528 Kubernetes \u65f6\u53ef\u4ee5\u5c11\u62c5\u5fc3\u4e00\u4ef6\u4e8b\u3002\n\u4e0e\u4ea4\u6362\u4e00\u6837\uff0c\u5f88\u9ad8\u5174\u770b\u5230\u5bf9\u66f4\u591a\u539f\u751f Linux \u529f\u80fd\u7684\u652f\u6301\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cCgroupsv2 \u4e3a\u5185\u5b58 QoS \u542f\u7528\u4e86\u66f4\u591a\u9009\u9879\uff0c\u8fd9\uff08\u5728 Kubernetes 1.22 \u4e2d\uff09\u5c06\u6709\u52a9\u4e8e\u907f\u514d\u5728 Kubernetes \u4e2d\u8fd0\u884c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6027\u80fd\u9650\u5236\u3002\u6b63\u5982 Kat Cosgrove \u8b66\u544a\u6211\u4eec\u7684\u90a3\u6837\uff0cKubernetes 1.22 \u4e2d\u5220\u9664\u4e86\u4e00\u4e9b\u6d4b\u8bd5\u7248 API \u548c\u529f\u80fd\uff0c\u5305\u62ec\uff1a \u672a\u5f03\u7528\uff0c\u4f46\u5df2\u5220\u9664\u3002\u8fd9\u610f\u5473\u7740\u60a8\u5c06\u65e0\u6cd5\u4f7f\u7528\u529f\u80fd\u6807\u5fd7\u91cd\u65b0\u542f\u7528\u5b83\u4eec\u3002\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u5b83\u4eec\uff0c\u5219\u5fc5\u987b\u8fc1\u79fb\u5230\u5b83\u4eec\u7684\u7a33\u5b9a\u7248\u672c\u3002\u5728 Kubernetes \u535a\u5ba2\u4e2d\u67e5\u770b\u5b8c\u6574\u7684\u79fb\u9664\u548c\u8fc1\u79fb\u6b65\u9aa4\u5217\u8868\u3002\u5e76\u4fdd\u7559\u5df2\u5f03\u7528\u7684 API \u8fc1\u79fb\u6307\u5357\u4ee5\u5907\u5c06\u6765\u4f7f\u7528\u3002 StreamingProxyRedirects \u529f\u80fd\u6700\u521d\u662f\u4e3a\u4e86\u51cf\u8f7b\u7531\u5bb9\u5668\u8fd0\u884c\u65f6\u63a5\u53e3\u7684\u5b9e\u73b0\u9a71\u52a8\u7684\u8bf7\u6c42\u5f00\u9500\u800c\u5f00\u53d1\u7684\u3002\u7406\u7531\u662f\u7ed5\u8fc7 kubelet\uff0c\u6027\u80fd\u4e0d\u4f1a\u53d7\u5230\u592a\u5927\u5f71\u54cd\u3002\u7136\u800c\uff0c\u7531\u4e8e\u6240\u6709\u8bf7\u6c42\u90fd\u96c6\u4e2d\u5728 apiserver \u4e2d\uff0c\u8fd9\u4e9b\u7406\u8bba\u4e0a\u7684\u6539\u8fdb\u5e76\u4e0d\u90a3\u4e48\u91cd\u8981\u3002\u6b64\u5916\uff0c\u4e00\u4e9b\u5b89\u5168\u95ee\u9898\u9700\u8981\u5b9e\u73b0 ValidateProxyRedirects \u529f\u80fd\u3002\u5728 1.20 \u4e2d\u6700\u521d\u88ab\u5f03\u7528\u540e\uff0c\u529f\u80fd\u95e8\u5728 1.22 \u4e2d\u5df2\u88ab\u7981\u7528\u3002\u5728 Kubernetes 1.24 \u4e2d\uff0c\u8fd9\u4e9b\u529f\u80fd\u5c06\u88ab\u5220\u9664\uff0c\u914d\u7f6e\u5bb9\u5668\u6d41\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u4f7f\u7528\u5e26\u6709 Kubelet \u4ee3\u7406\u65b9\u6cd5\u7684\u672c\u5730\u91cd\u5b9a\u5411\u3002\u68c0\u67e5 KEP \u4e2d\u7684\u5b8c\u6574\u8be6\u7ec6\u4fe1\u606f\u3002\n\u6b63\u5982\u6211\u4eec\u5728\u4e0a\u4e00\u4e2a\u7248\u672c\u4e2d\u63d0\u5230\u7684\uff0c#2433 Topology Aware Hints \u589e\u5f3a\u5c06\u53d6\u4ee3 Kubernetes 1.17 \u4e2d\u5f15\u5165\u7684 ServiceTopology \u529f\u80fd\u95e8\u3002\u81ea Kubernetes 1.11 \u5f00\u59cb\u6d4b\u8bd5\u540e\uff0cKubernetes \u56e2\u961f\u51b3\u5b9a\u5f03\u7528 DynamicKubeletConfig \u800c\u4e0d\u662f\u7ee7\u7eed\u5176\u5f00\u53d1\u3002\u6b64\u529f\u80fd\u65e8\u5728\u5c06\u903b\u8f91\u4ece kubectl apply \u79fb\u5230 apiserver\uff0c\u4fee\u590d\u5f53\u524d\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u6d41\u7a0b\u9677\u9631\uff0c\u5e76\u4f7f\u64cd\u4f5c\u53ef\u76f4\u63a5\u4ece API \u8bbf\u95ee\uff08\u4f8b\u5982\u4f7f\u7528 curl\uff09\uff0c\u800c\u65e0\u9700\u4e25\u683c\u8981\u6c42 kubectl \u6216 Golang \u5b9e\u73b0\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0cAPI \u670d\u52a1\u5668\u5c06\u5305\u542b\u4e00\u4e2a\u5e26\u6709\u5f03\u7528\u4fe1\u606f\u7684\u8b66\u544a\u6807\u5934\u3002\u8fd9\u5305\u62ec\u4f55\u65f6\u5f15\u5165 API\u3001\u4f55\u65f6\u5f03\u7528\u4ee5\u53ca\u4f55\u65f6\u5220\u9664\u3002\u6240\u6709\u547d\u540d\u7a7a\u95f4\u90fd\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u4e0d\u53ef\u53d8\u6807\u7b7e kubernetes.io/metadata.name\uff0c\u5176\u503c\u4e3a\u547d\u540d\u7a7a\u95f4\u540d\u79f0\u3002\u8fd9\u4e2a\u6807\u7b7e\u53ef\u4ee5\u4e0e\u4efb\u4f55\u547d\u540d\u7a7a\u95f4\u9009\u62e9\u5668\u4e00\u8d77\u4f7f\u7528\uff0c\u5c31\u50cf\u524d\u9762\u63d0\u5230\u7684 NetworkPolicy \u5bf9\u8c61\u4e00\u6837\u3002 APIPriorityAndFairness \u529f\u80fd\u95e8\u5728 API \u670d\u52a1\u5668\u4e2d\u542f\u7528\u4e86\u65b0\u7684 max-in-flight \u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u3002\u901a\u8fc7\u4f7f\u7528 FlowSchema \u5bf9\u8c61\u5b9a\u4e49\u4e0d\u540c\u7c7b\u578b\u7684\u8bf7\u6c42\u5e76\u4f7f\u7528 RequestPriority \u5bf9\u8c61\u4e3a\u5176\u5206\u914d\u8d44\u6e90\uff0c\u60a8\u53ef\u4ee5\u786e\u4fdd Kubernetes API \u670d\u52a1\u5668\u80fd\u591f\u5728\u9ad8\u8d1f\u8f7d\u671f\u95f4\u54cd\u5e94\u7ba1\u7406\u548c\u7ef4\u62a4\u4efb\u52a1\u3002\u901a\u8fc7\u6b64\u589e\u5f3a\u529f\u80fd\uff0c\u4f5c\u4e1a\u5c06\u80fd\u591f\u66f4\u65e9\u5730\u5220\u9664\u5df2\u5b8c\u6210\u7684 pod\uff0c\u4ece\u800c\u91ca\u653e\u96c6\u7fa4\u4e2d\u7684\u8d44\u6e90\u3002\n\u5f53\u524d\u7684 Job \u63a7\u5236\u5668\u901a\u8fc7\u5728\u5b8c\u6210\u540e\u5c06 Pod \u4fdd\u6301\u5728\u5ef6\u8fdf\u72b6\u6001\u6765\u8ddf\u8e2a\u5df2\u5b8c\u6210\u7684 Job\u3002\u53ea\u6709\u5f53 Job \u5b8c\u6210\u65f6\u624d\u4f1a\u79fb\u9664 Pod\uff0c\u5e76\u91ca\u653e\u8d44\u6e90\u3002\u4f7f\u7528\u65b0\u65b9\u6cd5\uff0c\u4f5c\u4e1a\u63a7\u5236\u5668\u5c06\u8ddf\u8e2a\u5df2\u5b8c\u6210\u7684\u4f5c\u4e1a\uff0c\u540c\u65f6\u5141\u8bb8\u5220\u9664\u5df2\u5b8c\u6210\u7684 Pod\u3002\u6b64\u589e\u5f3a\u4e3a StatefulSets \u5e26\u6765\u4e86\u53ef\u9009\u7684 minReadySeconds \u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u5df2\u5728 Deployments\u3001DaemonSets\u3001ReplicasSets \u548c Replication Controllers \u4e0a\u53ef\u7528\u3002\u5982\u679c\u58f0\u660e\uff0c\u65b0\u521b\u5efa\u7684 Pod \u5c06\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u53ef\u7528\uff0c\u76f4\u5230\u5b83\u4eec\u7684\u5bb9\u5668\u5728\u6307\u5b9a\u7684\u79d2\u6570\u5185\u4fdd\u6301\u5c31\u7eea\u72b6\u6001\u800c\u4e0d\u4f1a\u5d29\u6e83\u3002\u5728 Kubernetes 1.4 \u548c 1.8 \u4e4b\u540e\u7684\u6d4b\u8bd5\u7248\u4e2d\u5f15\u5165\uff0cCronJobs \u7ec8\u4e8e\u8d70\u4e0a\u4e86\u7a33\u5b9a\u7684\u9053\u8def\u3002\u4f7f\u7528\u6b64 API\uff0c\u60a8\u53ef\u4ee5\u4e3a Pod \u5b9a\u4e49 minAvailable \u526f\u672c\u6570\u3002\u5982\u679c\u60a8\u5c1d\u8bd5\u4ee5\u8fdd\u53cd minAvailable \u503c\u7684\u65b9\u5f0f\u81ea\u613f\u4e2d\u65ad Pod\uff0c\u5b83\u5c06\u4e0d\u4f1a\u88ab\u5220\u9664\u3002\u5728 Kubernetes 1.21 \u4e2d\uff0c\u6211\u4eec\u770b\u5230\u4e86 PodDisruptionBudget \u5347\u7ea7\u5230 GA\uff0c\u800c\u5728 Kubernetes 1.22 \u4e2d\uff0c\u6211\u4eec\u770b\u5230\u4e86 Eviction \u5b50\u8d44\u6e90\u7684\u5347\u7ea7\uff1a\n\u5728\u6267\u884c\u6eda\u52a8\u66f4\u65b0\u65f6\uff0c\u6b64\u589e\u5f3a\u529f\u80fd\u5141\u8bb8\u6307\u5b9a\u5c06\u521b\u5efa\u591a\u5c11\u4e2a\u65b0 Pod \u6765\u66ff\u6362\u65e7 Pod\u3002\u8fd9\u662f\u901a\u8fc7\u53ef\u9009\u7684 spec.strategy.rollingUpdate.maxSurge \u5b57\u6bb5\u5b8c\u6210\u7684\u3002\u901a\u8fc7\u5206\u914d\u4e00\u4e2a\u7edd\u5bf9\u6570\u91cf\uff0c\u60a8\u53ef\u4ee5\u544a\u8bc9\u5728\u6240\u9700\u7684 Pod \u6570\u91cf\u4e0a\u53ef\u4ee5\u521b\u5efa\u7684\u6700\u5927 Pod \u6570\u91cf\u3002\u8be5\u503c\u4e5f\u53ef\u4ee5\u662f\u6240\u9700 Pod \u7684\u767e\u5206\u6bd4\u3002\u4e0e\u4e4b\u524d\u7684\u884c\u4e3a\u76f8\u5339\u914d\u7684\u9ed8\u8ba4\u503c\u4e3a 25%\u3002\u5f53\u542f\u7528 LogarithmicScaleDown \u529f\u80fd\u95e8\u65f6\uff0c\u5c06\u4f7f\u7528\u534a\u968f\u673a\u9009\u62e9\u7684 Pod \u6765\u6839\u636e Pod \u65f6\u95f4\u6233\u7684\u5bf9\u6570\u5206\u6876\u7f29\u5c0f ReplicaSet\u3002\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 controller.kubernetes.io/pod-deletion-cost=10 \u6ce8\u91ca Pod\uff0c\u5176\u4e2d 0 \u662f\u9ed8\u8ba4\u503c\u3002\u5728\u7f29\u5c0f\u89c4\u6a21\u65f6\uff0c\u5c06\u5c3d\u6700\u5927\u52aa\u529b\u4ee5\u8f83\u4f4e\u7684\u5220\u9664\u6210\u672c\u5220\u9664 Pod\u3002 Kubernetes 1.21 \u4e2d\u5f15\u5165\u4e86\u7d22\u5f15\u4f5c\u4e1a\uff0c\u4ee5\u4fbf\u66f4\u8f7b\u677e\u5730\u8c03\u5ea6\u9ad8\u5ea6\u5e76\u884c\u5316\u7684\u4f5c\u4e1a\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u5c06\u5b8c\u6210\u7d22\u5f15\u6dfb\u52a0\u5230\u5177\u6709\u56fa\u5b9a\u5b8c\u6210\u8ba1\u6570\u7684\u4f5c\u4e1a\u7684 Pod \u4e2d\uff0c\u4ee5\u652f\u6301\u8fd0\u884c\u4ee4\u4eba\u5c34\u5c2c\u7684\u5e76\u884c\u7a0b\u5e8f\u3002\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u5c06\u4f5c\u4e1a\u7d22\u5f15\u4f20\u9012\u7ed9 Pod\uff0c\u751a\u81f3\u53ef\u4ee5\u521b\u5efa\u7d22\u5f15\u4f5c\u4e1a\uff0c\u5176\u4e2d Pod \u53ef\u4ee5\u901a\u8fc7\u4ece\u7d22\u5f15\u6784\u5efa\u7684\u4e3b\u673a\u540d\u76f8\u4e92\u5bfb\u5740\uff1a\n[...] \u89c4\u8303\uff1a\u5b50\u57df\uff1amy-job-svc \u5bb9\u5668\uff1a-\u540d\u79f0\uff1a\u4efb\u52a1\u56fe\u50cf\uff1aregistry.example.com/processing-image \u547d\u4ee4\uff1a[\u201c./process\u201d\u3001\u201c--index\u201d\u3001\u201c$JOB_COMPLETION_INDEX\u201d , &quot;--hosts-pattern&quot;, &quot;my-job-{{.id}}.my-job-svc&quot;] \u4ece Kubernetes 1.21 \u5f00\u59cb\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u4f5c\u4e1a\u7684 .spec.suspend \u5b57\u6bb5\u8bbe\u7f6e\u4e3a true \u6765\u4e34\u65f6\u6682\u505c\u4f5c\u4e1a\uff0c\u7a0d\u540e\u901a\u8fc7\u5c06\u5176\u8bbe\u7f6e\u56de false \u6765\u6062\u590d\u3002\u8fd9\u4e2a\u65b0\u7684\u51c6\u5165\u63a7\u5236\u5668\u5c06\u80fd\u591f\u6309\u547d\u540d\u7a7a\u95f4\u5b9e\u65bd Pod \u5b89\u5168\u6807\u51c6\u3002\u53ef\u4ee5\u5728\u4e09\u4e2a\u7ea7\u522b\u6267\u884c\u5f3a\u5236\u6267\u884c\uff1a \u5ba1\u8ba1\uff1a\u7b56\u7565\u8fdd\u89c4\u5c06\u89e6\u53d1\u6dfb\u52a0\u5ba1\u8ba1\u6ce8\u91ca\uff0c\u4f46\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u662f\u5141\u8bb8\u7684\u3002 apiVersion: apiserver.config.k8s.io/v1 kind: AdmissionConfiguration plugins: - name: PodSecurity configuration: defaults: # \u672a\u8bbe\u7f6e\u6a21\u5f0f\u6807\u7b7e\u65f6\u5e94\u7528\u7684\u9ed8\u8ba4\u503c\u3002\u5f3a\u5236\uff1a&lt;\u9ed8\u8ba4\u5f3a\u5236\u7b56\u7565\u7ea7\u522b&gt;\u5f3a\u5236\u7248\u672c\uff1a&lt;\u9ed8\u8ba4\u5f3a\u5236\u7b56\u7565\u7248\u672c&gt;\u5ba1\u8ba1\uff1a&lt;\u9ed8\u8ba4\u5ba1\u8ba1\u7b56\u7565\u7ea7\u522b&gt;\u5ba1\u8ba1\u7248\u672c\uff1a&lt;\u9ed8\u8ba4\u5ba1\u8ba1\u7b56\u7565\u7248\u672c&gt;\u8b66\u544a\uff1a&lt;\u9ed8\u8ba4\u8b66\u544a\u7b56\u7565\u7ea7\u522b&gt;\u8b66\u544a\u7248\u672c\uff1a&lt;\u9ed8\u8ba4\u503c\u8b66\u544a\u7b56\u7565\u7248\u672c&gt; \u8c41\u514d\uff1a\u7528\u6237\u540d\uff1a[ &lt;\u8981\u8c41\u514d\u7684\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u540d\u6570\u7ec4&gt; ] runtimeClassNames\uff1a[ &lt;\u8981\u8c41\u514d\u7684\u8fd0\u884c\u65f6\u7c7b\u540d\u6570\u7ec4&gt; ] \u547d\u540d\u7a7a\u95f4\uff1a[ &lt;\u8981\u8c41\u514d\u7684\u547d\u540d\u7a7a\u95f4\u6570\u7ec4&gt; ] \u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8fd9\u80cc\u540e\u7684\u57fa\u672c\u539f\u7406\u589e\u5f3a\u548c\u53ef\u80fd\u7684\u65b0\u53d1\u5c55\uff0c\u8bf7\u68c0\u67e5 KEP\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u5141\u8bb8 Go \u5ba2\u6237\u7aef\u4f7f\u7528\u5916\u90e8\u51ed\u636e\u63d0\u4f9b\u7a0b\u5e8f\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f8b\u5982\u5bc6\u94a5\u7ba1\u7406\u7cfb\u7edf (KMS)\u3001\u53ef\u4fe1\u5e73\u53f0\u6a21\u5757 (TPM) \u6216\u786c\u4ef6\u5b89\u5168\u6a21\u5757 (HSM)\u3002\n\u8fd9\u4e9b\u8bbe\u5907\u5df2\u7ecf\u7528\u4e8e\u9488\u5bf9\u5176\u4ed6\u670d\u52a1\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u66f4\u5bb9\u6613\u8f6e\u6362\u5e76\u4e14\u66f4\u5b89\u5168\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4f5c\u4e3a\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u5b58\u5728\u3002\u8be5\u7279\u6027\u6700\u521d\u662f\u5728 Kubernetes 1.10 \u4e0a\u5f15\u5165\u7684\uff0c\u5b83\u603b\u7ed3\u4e86 1.20 \u548c 1.21 \u4e2d\u5b8c\u6210\u7684\u5de5\u4f5c\u3002\u5de5\u4f5c\u8d1f\u8f7d\u7528\u4e8e\u9488\u5bf9 API \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u5f53\u524d JSON Web \u4ee4\u724c (JWT) \u5b58\u5728\u4e00\u4e9b\u5b89\u5168\u95ee\u9898\u3002\u6b64\u589e\u5f3a\u5305\u62ec\u4e3a JWT \u521b\u5efa\u66f4\u5b89\u5168\u7684 API \u7684\u5de5\u4f5c\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0cCertificates API \u7684\u5ba2\u6237\u7aef\u65e0\u6cd5\u4e3a\u5df2\u9881\u53d1\u7684\u8bc1\u4e66\u8bf7\u6c42\u7279\u5b9a\u7684\u6301\u7eed\u65f6\u95f4\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u8bc1\u4e66\uff0c\u6b64\u6301\u7eed\u65f6\u95f4\u9ed8\u8ba4\u4e3a\u4e00\u5e74\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u7528\u4f8b\u6765\u8bf4\u53ef\u80fd\u592a\u957f\u4e86\u3002 CertificateSigningRequestSpec \u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684 ExpirationSeconds \u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u63a5\u53d7\u7684\u6700\u5c0f\u503c\u4e3a 600 \u79d2\uff0810 \u5206\u949f\uff09\u3002\u6b64\u589e\u5f3a\u63a5\u8fd1\u8fb9\u7f18\u60c5\u51b5\uff0c\u5982\u679c\u7aef\u70b9\u6570\u91cf\u66f4\u6539\u4e3a 0\uff0c\u5219\u5177\u6709 externalTrafficPolicy=Local \u7684\u670d\u52a1\u5c06\u4e22\u5f03\u6765\u81ea\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u6240\u6709\u6d41\u91cf\u3002\u6b64\u884c\u4e3a\u4f7f\u6b64\u7c7b\u670d\u52a1\u4e0d\u53ef\u80fd\u5b9e\u73b0\u96f6\u505c\u673a\u6eda\u52a8\u66f4\u65b0\u3002\n\u5b9e\u65bd\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u53d7\u5f71\u54cd\u8282\u70b9\u4e0a\u7684\u6240\u6709\u5916\u90e8\u6d41\u91cf\u53d1\u9001\u5230\u5c31\u7eea\u548c\u672a\u5c31\u7eea\u7ec8\u6b62\u7aef\u70b9\uff08\u9996\u9009\u5c31\u7eea\u7aef\u70b9\uff09\u3002\u901a\u8fc7\u6b64\u589e\u5f3a\u529f\u80fd\uff0cKubernetes \u5141\u8bb8\u66f4\u591a DNS \u641c\u7d22\u8def\u5f84\u548c\u66f4\u957f\u7684 DNS \u641c\u7d22\u8def\u5f84\u5217\u8868\uff0c\u4ee5\u8ddf\u4e0a\u6700\u8fd1\u7684 DNS \u89e3\u6790\u5668\u3002\u65b0\u7684 EndpointSlice API \u5c06\u7aef\u70b9\u62c6\u5206\u4e3a\u591a\u4e2a Endpoint Slice \u8d44\u6e90\u3002\u8fd9\u89e3\u51b3\u4e86\u5f53\u524d API \u4e2d\u4e0e\u5927\u578b Endpoints \u5bf9\u8c61\u76f8\u5173\u7684\u8bb8\u591a\u95ee\u9898\u3002\u8fd9\u4e2a\u65b0 API \u8fd8\u65e8\u5728\u652f\u6301\u5176\u4ed6\u672a\u6765\u529f\u80fd\uff0c\u4f8b\u5982\u6bcf\u4e2a pod \u591a\u4e2a IP\u3002\u5728 Kubernetes 1.22 \u4e2d\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e00\u4e2a Endpoints \u8d44\u6e90\u6709\u8d85\u8fc7 1000 \u4e2a\u7aef\u70b9\uff0c\u96c6\u7fa4\u4f1a\u7528 endpoints.kubernetes.io/over-capacity: truncated \u5bf9\u5b83\u4eec\u8fdb\u884c\u6ce8\u91ca\uff0c\u4e4b\u524d\u7528 endpoints.kubernetes.io/over-capacity: warning \u6ce8\u91ca\u3002 . LoadBalancer API \u7684\u4e00\u4e9b\u5b9e\u73b0\u4e0d\u4f7f\u7528 Kubernetes \u81ea\u52a8\u5206\u914d\u7684\u8282\u70b9\u7aef\u53e3\uff0c\u5982 MetalLB \u6216 kube-router\u3002\u4f46\u662f\uff0cAPI \u9700\u8981\u5b9a\u4e49\u548c\u5206\u914d\u4e00\u4e2a\u7aef\u53e3\uff0c\u5373\u4f7f\u5b83\u6ca1\u6709\u88ab\u4f7f\u7528\u3002\u5f53Service.Spec\u4e2d\u7684allocateLoadBalancerNodePort\u5b57\u6bb5\u8bbe\u7f6e\u4e3afalse\u65f6\uff0c\u5c06\u505c\u6b62\u5206\u914d\u65b0\u7684\u8282\u70b9\u7aef\u53e3\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u5c06\u5141\u8bb8\u60a8\u5c06 NetworkPolicy \u4e2d\u7684\u6240\u6709\u7aef\u53e3\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u8303\u56f4\uff1a\n\u60a8\u73b0\u5728\u53ef\u4ee5\u5728 Service \u5bf9\u8c61\u4e0a\u8bbe\u7f6e spec.trafficPolicy \u5b57\u6bb5\u4ee5\u4f18\u5316\u96c6\u7fa4\u6d41\u91cf\uff1a\u901a\u8fc7\u6b64\u589e\u5f3a\u529f\u80fd\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u4e3a\u5177\u6709\u547d\u540d\u7a7a\u95f4\u8303\u56f4\u7684 IngressClass \u6307\u5b9a\u53c2\u6570\u3002\u901a\u8fc7\u6b64\u589e\u5f3a\u529f\u80fd\uff0cKubernetes \u66f4\u8fdb\u4e86\u4e00\u6b65\uff0c\u5141\u8bb8\u60a8\u4ee5\u975e root \u7528\u6237\u8eab\u4efd\u8fd0\u884c\u6574\u4e2a Kubernetes \u5806\u6808\u3002\u8fd9\u6837\uff0c\u5982\u679c\u60a8\u7684\u96c6\u7fa4\u906d\u5230\u5165\u4fb5\uff0c\u653b\u51fb\u8005\u5c06\u5f88\u96be\u8bbf\u95ee\u60a8\u7684\u57fa\u7840\u8bbe\u65bd\u7684\u5176\u4f59\u90e8\u5206\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u542f\u7528 KubeletInUserNamespace \u529f\u80fd\u95e8\u5e76\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u5728\u65e0\u6839\u6a21\u5f0f\u4e0b\u8fd0\u884c Kubernetes\u3002\u4f46\u662f\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u60a8\u5fc5\u987b\u89e3\u51b3\u5f88\u591a\u6ce8\u610f\u4e8b\u9879\u3002 Cgroups \u662f Linux \u5185\u6838\u529f\u80fd\uff0c\u5b83\u9650\u5236\u3001\u8bf4\u660e\u548c\u9694\u79bb\u8fdb\u7a0b\u96c6\u5408\u7684\u8d44\u6e90\u4f7f\u7528\uff08CPU\u3001\u5185\u5b58\u3001\u78c1\u76d8 I/O\u3001\u7f51\u7edc\u7b49\uff09\u3002\u4e24\u5e74\u591a\u524d\uff0c\u5b83\u7684 v2 API \u88ab\u5ba3\u5e03\u4e3a\u7a33\u5b9a\u7248\u672c\uff0c\u5e76\u4e14\u8bb8\u591a Linux \u53d1\u884c\u7248\u5df2\u7ecf\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b83\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u6db5\u76d6\u4e86\u4f7f Kubernetes \u4e0e Cgroups v2 \u517c\u5bb9\u6240\u505a\u7684\u5de5\u4f5c\uff0c\u4ece\u914d\u7f6e\u6587\u4ef6\u5f00\u59cb\u3002\n\u68c0\u67e5\u65b0\u7684\u914d\u7f6e\u503c\uff0c\u56e0\u4e3a\u503c\u7684\u8303\u56f4\u4f1a\u6709\u4e00\u4e9b\u53d8\u5316\u3002\u4f8b\u5982 cpu.weight \u503c\u5c06\u4ece [2-262144] \u66f4\u6539\u4e3a [1-10000]\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u4e0d\u5305\u62ec\u542f\u7528 v2 \u4e2d v1 \u4e2d\u4e0d\u53ef\u7528\u7684\u65b0\u529f\u80fd\u3002\u5b83\u4e5f\u4e0d\u5305\u62ec v1 \u7684\u5f03\u7528\u3002 Swap\uff08Linux \u4e2d\u7684\u78c1\u76d8\u5185\u5b58\uff09\u5e76\u4e0d\u662f\u6700\u5feb\u7684\u3002\u4f46\u662f\uff0c\u6709\u591a\u79cd\u5de5\u4f5c\u8d1f\u8f7d\uff08\u4f8b\u5982 Java \u548c Node \u5e94\u7528\u7a0b\u5e8f\uff09\u53ef\u4ee5\u4ece\u4e2d\u53d7\u76ca\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u4f7f Kubernetes \u5de5\u4f5c\u8d1f\u8f7d\u80fd\u591f\u4f7f\u7528\u4ea4\u6362\u3002\u76ee\u524d\uff0c\u8be5\u914d\u7f6e\u662f\u6574\u4e2a\u8282\u70b9\u7684\u5168\u5c40\u914d\u7f6e\uff0c\u4e0d\u80fd\u9488\u5bf9\u6bcf\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u914d\u7f6e\u3002\u4f7f\u7528\u65b9\u6cd5\uff1aKubernetes \u76ee\u524d\u5141\u8bb8\u60a8\u63d0\u9ad8\u5bb9\u5668\u7684\u5b89\u5168\u6027\uff0c\u4f7f\u7528 Seccomp \u914d\u7f6e\u6587\u4ef6\u6267\u884c\u5b83\u4eec\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u5c06\u9ed8\u8ba4\u542f\u7528\u6b64\u9009\u9879\uff0c\u6709\u52a9\u4e8e\u9632\u6b62 CVE \u548c\u96f6\u65e5\u6f0f\u6d1e\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 SeccompDefault \u542f\u7528\u6b64\u884c\u4e3a\uff0c\u8fd9\u4f1a\u5c06\u73b0\u6709\u7684 RuntimeDefault \u914d\u7f6e\u6587\u4ef6\u8f6c\u6362\u4e3a\u4efb\u4f55\u5bb9\u5668\u7684\u9ed8\u8ba4\u914d\u7f6e\u3002 memory.low\uff1a\u5c3d\u529b\u800c\u4e3a\u7684\u5185\u5b58\u4fdd\u62a4\uff0c\u4e00\u79cd\u201c\u8f6f\u4fdd\u8bc1\u201d\uff0c\u5373\u5982\u679c cgroup \u53ca\u5176\u6240\u6709\u540e\u4ee3\u90fd\u4f4e\u4e8e\u6b64\u9608\u503c\uff0c\u5219\u4e0d\u4f1a\u56de\u6536 cgroup \u7684\u5185\u5b58\uff0c\u9664\u975e\u65e0\u6cd5\u4ece\u4efb\u4f55\u672a\u53d7\u4fdd\u62a4\u7684 cgroup \u4e2d\u56de\u6536\u5185\u5b58\u3002\u6682\u65f6\u8fd8\u6ca1\u8003\u8651\u3002\nmemory.high\uff1a\u5982\u679c cgroup \u7684\u5185\u5b58\u4f7f\u7528\u8d85\u8fc7\u4e86\u6b64\u5904\u6307\u5b9a\u7684\u4e0a\u9650\uff0c\u5219 cgroup \u7684\u8fdb\u7a0b\u5c06\u53d7\u5230\u9650\u5236\u5e76\u627f\u53d7\u6c89\u91cd\u7684\u56de\u6536\u538b\u529b\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u5141\u8bb8 CPU \u7ba1\u7406\u5668\u5c06\u72ec\u5360\u5de5\u4f5c\u8d1f\u8f7d\u5206\u914d\u7ed9\u7279\u5b9a\u7684 CPU \u5185\u6838\u3002\u9694\u79bb\u6bcf\u4e2a CPU \u5185\u6838\u7684\u5de5\u4f5c\u8d1f\u8f7d\u53ef\u907f\u514d\u4e0a\u4e0b\u6587\u548c\u7f13\u5b58\u5207\u6362\uff0c\u8fd9\u5bf9\u4e8e\u5ef6\u8fdf\u654f\u611f\u7684\u5e94\u7528\u7a0b\u5e8f\u81f3\u5173\u91cd\u8981\u3002 CPU \u7ba1\u7406\u5668\u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u7684 --cpu-manager-policy-options \u9009\u9879\u3002\u5f53\u8bbe\u7f6e\u4e3a full-pcups-only=true \u65f6\uff0c\u8282\u70b9\u5c06\u9694\u79bb\u6bcf\u4e2a\u7269\u7406 CPU \u5185\u6838\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\u8bf7\u6ce8\u610f\uff0c\u5b83\u53ea\u4f1a\u63a5\u53d7\u4f7f\u7528\u6574\u4e2a CPU \u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\u5176\u6b21\uff0cHugePages \u7684\u5bb9\u5668\u9694\u79bb\u5df2\u7ecf\u5230\u4f4d\uff0c\u4ee5\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff0c\u5373 pod \u53ef\u80fd\u4f7f\u7528\u6bd4\u8bf7\u6c42\u66f4\u591a\u7684\u5185\u5b58\uff0c\u6700\u7ec8\u5bfc\u81f4\u8d44\u6e90\u532e\u4e4f\u3002\u73b0\u5728\uff0c\u53ef\u4ee5\u5c06 pod \u7684\u4e3b\u673a\u540d\u8bbe\u7f6e\u4e3a\u5176\u5b8c\u5168\u9650\u5b9a\u57df\u540d (FQDN)\uff0c\u4ece\u800c\u63d0\u9ad8 Kubernetes \u4e0e\u9057\u7559\u5e94\u7528\u7a0b\u5e8f\u7684\u4e92\u64cd\u4f5c\u6027\u3002\u8bbe\u7f6e hostnameFQDN: true \u540e\uff0c\u5728 Pod \u5185\u8fd0\u884c uname -n \u4f1a\u8fd4\u56de foo.test.bar.svc.cluster.local \u800c\u4e0d\u4ec5\u4ec5\u662f foo\u3002\u8be5\u7279\u6027\u662f\u5728 Kubernetes 1.19 \u4e0a\u5f15\u5165\u7684\uff0c\u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u5728\u589e\u5f3a\u63d0\u6848\u4e2d\u9605\u8bfb\u3002\n\u4e34\u65f6\u5bb9\u5668\u662f\u8c03\u8bd5\u6b63\u5728\u8fd0\u884c\u7684 Pod \u7684\u597d\u65b9\u6cd5\u3002\u5c3d\u7ba1\u60a8\u65e0\u6cd5\u5728\u521b\u5efa\u540e\u5c06\u5e38\u89c4\u5bb9\u5668\u6dfb\u52a0\u5230 pod\uff0c\u4f46\u60a8\u53ef\u4ee5\u4f7f\u7528 kubectl debug \u8fd0\u884c\u4e34\u65f6\u5bb9\u5668\u3002 kubelet \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7ba1\u7406\u5668\u7ec4\u4ef6\uff0c\u4ee5\u4fdd\u8bc1\u4e3a pod \u5206\u914d\u5185\u5b58\u548c\u5927\u9875\u9762\u3002\u5b83\u53ea\u4f1a\u4f5c\u7528\u4e8e\u6709\u4fdd\u8bc1\u7684 QoS \u7c7b\u4e2d\u7684 Pod\u3002\u5f53 Pod \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5185\u5b58\u652f\u6301\u7684\u7a7a\u76ee\u5f55\u5377\uff08\u4f8b\u5982\uff0ctmpfs\uff09\u65f6\uff0c\u5e76\u975e\u6240\u6709\u4e3b\u673a\u90fd\u5c06\u8be5\u5377\u7684\u5927\u5c0f\u76f8\u540c\u3002\u4f8b\u5982\uff0cLinux \u4e3b\u673a\u5c06\u5176\u5927\u5c0f\u8c03\u6574\u4e3a\u4e3b\u673a\u5185\u5b58\u7684 50%\u3002\u8fd9\u79cd\u65b0\u7684\u589e\u5f3a\u529f\u80fd\u4e0d\u4ec5\u4f1a\u8003\u8651\u8282\u70b9\u53ef\u5206\u914d\u5185\u5b58\uff0c\u8fd8\u4f1a\u8003\u8651 pod \u53ef\u5206\u914d\u5185\u5b58\u548c emptyDir.sizeLimit \u5b57\u6bb5\u6765\u8c03\u6574\u5377\u5927\u5c0f\u3002\u8fd9\u4e2a\u589e\u5f3a\u5728 livenessProbe \u5bf9\u8c61\u4e2d\u5f15\u5165\u4e86\u7b2c\u4e8c\u4e2a terminateGracePeriodSeconds \u5b57\u6bb5\uff0c\u4ee5\u533a\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b Kubernetes \u5e94\u8be5\u7b49\u5f85\u591a\u957f\u65f6\u95f4\u6765\u6740\u6b7b\u5bb9\u5668\uff0c\u4ee5\u53ca\u7531\u4e8e livenessProbe \u5931\u8d25\u800c\u4f55\u65f6\u7ec8\u6b62\uff1f ComponentConfig \u6b63\u5728\u4e0d\u65ad\u52aa\u529b\uff0c\u4f7f\u7ec4\u4ef6\u914d\u7f6e\u66f4\u52a0\u52a8\u6001\u4e14\u53ef\u901a\u8fc7 Kubernetes API \u76f4\u63a5\u8bbf\u95ee\u3002\u6b64\u529f\u80fd\u5141\u8bb8\u60a8\u4f7f\u7528 Pod \u5185\u7684 .status.nominatedNodeName \u5b57\u6bb5\u5b9a\u4e49\u9996\u9009\u8282\u70b9\uff0c\u4ee5\u52a0\u5feb\u5927\u578b\u96c6\u7fa4\u4e2d\u7684\u8c03\u5ea6\u8fc7\u7a0b\u3002\u901a\u8fc7\u5728\u90e8\u7f72\u4e2d\u5b9a\u4e49\u8282\u70b9\u4eb2\u548c\u6027\uff0c\u60a8\u53ef\u4ee5\u9650\u5236\u60a8\u7684 pod \u5c06\u88ab\u5b89\u6392\u5728\u54ea\u4e9b\u8282\u70b9\u4e0a\u3002\u4f8b\u5982\uff0c\u5728\u5df2\u7ecf\u8fd0\u884c Pod \u7684\u8282\u70b9\u4e0a\u90e8\u7f72\u793a\u4f8b\u6807\u7b7e\u7684\u6807\u7b7e\u503c\u3002\n\u6b64\u589e\u5f3a\u529f\u80fd\u6dfb\u52a0\u4e86 namespaceSelector \u5b57\u6bb5\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u901a\u8fc7\u6807\u7b7e\u800c\u4e0d\u662f\u540d\u79f0\u6765\u6307\u5b9a\u540d\u79f0\u7a7a\u95f4\u3002\u4f7f\u7528\u6b64\u5b57\u6bb5\uff0c\u60a8\u53ef\u4ee5\u52a8\u6001\u5b9a\u4e49\u547d\u540d\u7a7a\u95f4\u96c6\u3002\u9ed8\u8ba4\u8c03\u5ea6\u5668\u7684\u4e09\u4e2a\u5206\u6570\u63d2\u4ef6\uff08NodeResourcesLeastAllocated\u3001NodeResourcesMostAllocated \u548c RequestedToCapacityRatio\uff09\u5b9e\u73b0\u4e86\u9996\u9009\u8d44\u6e90\u5206\u914d\u7684\u4e92\u65a5\u7b56\u7565\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u901a\u8fc7\u5f03\u7528\u8fd9\u4e9b\u63d2\u4ef6\u5e76\u5c06\u5b83\u4eec\u7ec4\u5408\u5230\u5355\u4e2a NodeResourcesFit \u63d2\u4ef6\u4e0b\uff0c\u4f7f\u7528\u53ef\u8bbe\u7f6e\u4e3a LeastAllocated\uff08\u9ed8\u8ba4\u503c\uff09\u3001MostAllocated \u548c RequestedToCapacityRatio \u7684 ScoringStrategy \u5c5e\u6027\u6765\u7b80\u5316\u8c03\u5ea6\u7a0b\u5e8f\u3002\u5728\u5bb9\u5668\u5185\u7ed1\u5b9a\u6302\u8f7d CSI \u5377\u4e4b\u524d\uff0cKubernetes \u901a\u8fc7 fsGroup \u4fee\u6539\u5377\u6240\u6709\u6743\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u5377\u63d2\u4ef6\uff0ckubelet \u901a\u8fc7\u9012\u5f52 chowning \u548c chmoding \u5377\u5185\u7684\u6587\u4ef6\u548c\u76ee\u5f55\u6765\u5b9e\u73b0\u3002\u4f46\u662f\uff0cchown \u548c chmod \u662f unix \u539f\u8bed\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0d\u53ef\u7528\u4e8e\u67d0\u4e9b CSI \u9a71\u52a8\u7a0b\u5e8f\uff0c\u4f8b\u5982 AzureFile\u3002\u6b64\u589e\u5f3a\u5efa\u8bae\u4e3a CSI \u9a71\u52a8\u7a0b\u5e8f\u63d0\u4f9b pod \u7684 fsgroup \u4f5c\u4e3a\u663e\u5f0f\u5b57\u6bb5\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u662f CSI \u9a71\u52a8\u7a0b\u5e8f\u5728\u6302\u8f7d\u65f6\u672c\u673a\u5e94\u7528\u5b83\u3002\u5bf9\u4e8e\u652f\u6301 VOLUME_MOUNT_GROUP NodeServiceCapability \u7684\u9a71\u52a8\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 DelegateFSGroupToCSIDriver \u529f\u80fd\u95e8\u542f\u7528\u6b64\u884c\u4e3a\u3002 fsGroup \u5e94\u8be5\u5728 securityContext \u4e2d\u6307\u5b9a\u3002\u901a\u8fc7\u6b64\u589e\u5f3a\u529f\u80fd\uff0c\u53ef\u4ee5\u4ee5 ReadWriteOncePod \u6a21\u5f0f\u8bbf\u95ee PersistenVolumes\uff0c\u4ece\u800c\u9650\u5236\u5bf9\u5355\u4e2a\u8282\u70b9\u4e0a\u7684\u5355\u4e2a Pod \u7684\u8bbf\u95ee\u3002\n\u867d\u7136\u73b0\u6709\u7684 ReadWriteOnce \u8bbf\u95ee\u6a21\u5f0f\u9650\u5236\u5bf9\u5355\u4e2a\u8282\u70b9\u7684\u8bbf\u95ee\uff0c\u4f46\u5141\u8bb8\u4ece\u8be5\u8282\u70b9\u4e0a\u7684\u591a\u4e2a Pod \u540c\u65f6\u8bbf\u95ee\u3002\u901a\u8fc7\u6b64\u589e\u5f3a\u529f\u80fd\uff0cCSI \u9a71\u52a8\u7a0b\u5e8f\u5c06\u80fd\u591f\u4ece Kubelet \u5411 NodePublishVolume \u51fd\u6570\u8bf7\u6c42\u670d\u52a1\u5e10\u6237\u4ee4\u724c\u3002 Kubelet \u8fd8\u5c06\u80fd\u591f\u9650\u5236\u54ea\u4e9b\u4ee4\u724c\u53ef\u4f9b\u54ea\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u4f7f\u7528\u3002\u6700\u540e\uff0c\u9a71\u52a8\u7a0b\u5e8f\u5c06\u80fd\u591f\u901a\u8fc7\u5c06 RequiresRepublish \u8bbe\u7f6e\u4e3a true \u6765\u91cd\u65b0\u6267\u884c NodePublishVolume \u4ee5\u91cd\u65b0\u5b89\u88c5\u5377\u3002\u5f53\u5b89\u88c5\u7684\u5377\u53ef\u80fd\u8fc7\u671f\u5e76\u9700\u8981\u91cd\u65b0\u767b\u5f55\u65f6\uff0c\u6700\u540e\u4e00\u4e2a\u529f\u80fd\u5c06\u6d3e\u4e0a\u7528\u573a\u3002\u4f8b\u5982\uff0c\u79d8\u5bc6\u4fdd\u9669\u5e93\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u5728 Kubernetes 1.18 \u4e2d\u5f15\u5165\uff0c\u4e3a\u7528\u6237\u521b\u5efa\u9884\u586b\u5145\u5377\u5960\u5b9a\u4e86\u57fa\u7840\u3002\u4f8b\u5982\uff0c\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u6620\u50cf\u4e3a\u865a\u62df\u673a\u9884\u586b\u5145\u78c1\u76d8\uff0c\u6216\u542f\u7528\u6570\u636e\u5907\u4efd\u548c\u8fd8\u539f\u3002\u4e3a\u6b64\uff0c\u5c06\u53d6\u6d88\u5bf9\u6301\u4e45\u5377\u7684 DataSource \u5b57\u6bb5\u7684\u5f53\u524d\u9a8c\u8bc1\uff0c\u5141\u8bb8\u5c06\u4efb\u610f\u5bf9\u8c61\u8bbe\u7f6e\u4e3a\u503c\u3002\u5173\u4e8e\u5982\u4f55\u586b\u5145\u5377\u7684\u5b9e\u73b0\u7ec6\u8282\u59d4\u6258\u7ed9\u4e13\u95e8\u6784\u5efa\u7684\u63a7\u5236\u5668\u3002\u7279\u6743\u5bb9\u5668\u53ef\u4ee5\u8bbf\u95ee\u4e3b\u673a\uff0c\u5c31\u597d\u50cf\u5b83\u4eec\u76f4\u63a5\u5728\u4e3b\u673a\u4e0a\u8fd0\u884c\u4e00\u6837\u3002\u5c3d\u7ba1\u4e0d\u5efa\u8bae\u5c06\u5b83\u4eec\u7528\u4e8e\u5927\u591a\u6570\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u4f46\u5b83\u4eec\u5bf9\u4e8e\u7ba1\u7406\u3001\u5b89\u5168\u548c\u76d1\u89c6\u76ee\u7684\u975e\u5e38\u6709\u7528\u3002\u5982\u679c\u60a8\u7684\u96c6\u7fa4\u542f\u7528\u4e86 WindowsHostProcessContainers \u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728 pod \u89c4\u8303\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u4e2d\u8bbe\u7f6e windowsOptions.hostProcess \u6807\u5fd7\u6765\u521b\u5efa Windows HostProcess pod\u3002\u8fd9\u4e9b Pod \u4e2d\u7684\u6240\u6709\u5bb9\u5668\u90fd\u5fc5\u987b\u4f5c\u4e3a Windows HostProcess \u5bb9\u5668\u8fd0\u884c\u3002\n\u5bb9\u5668\u5b58\u50a8\u63a5\u53e3\u63d2\u4ef6\u7684\u521b\u5efa\u662f\u4e3a\u4e86\u5141\u8bb8\u7b2c\u4e09\u65b9\u5b58\u50a8\u5377\u7cfb\u7edf\u7684\u5f00\u53d1\u3002\u4ece Kubernetes 1.16 \u5f00\u59cb\uff0cWindows \u8282\u70b9\u53ef\u4ee5\u4f7f\u7528\u73b0\u6709\u7684 CSI \u63d2\u4ef6\u3002\u73b0\u5728\u8fd9\u4e2a\u529f\u80fd\u662f\u7a33\u5b9a\u7684\u3002\u6b64\u589e\u5f3a\u529f\u80fd\u6539\u8fdb\u4e86 API \u670d\u52a1\u5668\uff0c\u4ee5\u5141\u8bb8\u4f7f\u7528 OpenTelemetry \u5e93\u548c OpenTelemetry \u683c\u5f0f\u8ddf\u8e2a\u8bf7\u6c42\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7 APIServerTracing \u529f\u80fd\u95e8\u542f\u7528\u8ddf\u8e2a\uff0c\u5e76\u4f7f\u7528 --tracing-config-file=&lt;path-to-config&gt; \u542f\u52a8 apiserver\uff0c\u5176\u4e2d\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a\u4e0e#2033 Rootless \u6a21\u5f0f\u5bb9\u5668\u76f8\u5173\uff0c\u8fd9\u4e2a enh ......", "note_en": "Kubernetes 1.22 is about to be released, and it comes packed with novelties! Where do we begin?\r\r This release brings 56 enhancements, an increase from  50 in Kubernetes 1.21 and  43 in Kubernetes 1.20. Of those 56 enhancements, 13 are graduating to Stable, a whopping 24 are existing features that keep improving, and 16 are completely new.\n  It\u2019s great to see so many new features focusing on security, like the replacement for the  Pod Security Policies, a  rootless mode, and  enabling Seccomp by default.\n    There is plenty to talk about, so let\u2019s get started with what\u2019s new in Kubernetes 1.22.\n        After being  deprecated in Kubernetes 1.21, we knew a replacement for Pod Security Policies was on the way, but we didn\u2019t know what it would look like. Now, we are happy to learn that it will be an Admission Controller, reusing part of the existing infrastructure.\n       Not running containers as root is the  No. 1 container security best practice. It\u2019s reassuring that this measure is being taken to the extreme, allowing us to run the entire Kubernetes stack in the user space. This is really gonna make Kubernetes more secure.\n       If one thing is clear after this Kubernetes release, it\u2019s the shift to security first. Adding this extra layer of security by default will render many potential exploits pointless. Steps like this will absolutely change how people see Kubernetes.\n       One of those tiny details we like to see on every Kubernetes release, it won\u2019t make headlines, but will make lives much easier. Swap was a given for every developer. By being supported, there\u2019s one thing less to worry about when using Kubernetes.\n       Same as with swap, it\u2019s great to see support for more native Linux features. In this case, Cgroupsv2 is enabling more options for Memory QoS, which (in Kubernetes 1.22) will help avoid performance throttling of workloads running in Kubernetes.\n         As  Kat Cosgrove warned us, a few beta APIs and features have been removed in Kubernetes 1.22, including:\n   Not deprecated, but  removed. That means that you won\u2019t be able to re-enable them with a feature flag. If you are using them, you\u2019ll have to migrate to their stable versions.\n  Check in the Kubernetes blog for the  full list of removals and steps to migrate. And keep the  deprecated API migration guide close for the future.\n      The  StreamingProxyRedirects feature was initially developed to alleviate request overhead driven by the implementation of the Container Runtime Interface. The rationale was that by bypassing the  kubelet, performance wouldn\u2019t take a big hit.\n  However, with all requests centralized in the  apiserver, those theoretical improvements weren\u2019t as important. Also, some security concerns required the implementation of the  ValidateProxyRedirects feature.\n  After being  initially deprecated in 1.20, the feature gates have been disabled in 1.22. In Kubernetes 1.24, these features will be removed and the only way to configure container streaming will be by using the local redirect with Kubelet proxy approach. Check the  full details in the KEP.\n      As we mentioned in the last release, the  #2433 Topology Aware Hints enhancement will replace the  ServiceTopology feature gate that  was introduced in Kubernetes 1.17.\n      After being in beta since Kubernetes 1.11, the Kubernetes team  has decided to deprecate  DynamicKubeletConfig instead of continuing its development.\n        This feature aims to move the logic away from  kubectl apply to the apiserver, fixing most of the current workflow pitfalls and also making the operation accessible directly from the API (for example using  curl), without strictly requiring  kubectl or a Golang implementation.\n        From now on, the API server will include a warning header with deprecation information. This includes when an API was introduced, when it will be deprecated, and when it will be removed.\n        A new immutable label  kubernetes.io/metadata.name has been added to all namespaces, where its value is the namespace name. This label can be used with any namespace selector, like in the previously mentioned  NetworkPolicy objects.\n        The  APIPriorityAndFairness feature gate enables a new max-in-flight request handler in the API server. By defining different types of requests with  FlowSchema objects and assigning them resources with  RequestPriority objects, you can ensure the Kubernetes API server will be responsive for admin and maintenance tasks during high loads.\n          With this enhancement, Jobs will be able to remove completed pods earlier, freeing resources in the cluster.\n  The current Job controller tracks completed Jobs by keeping Pods in a lingering state after they finish. Only when the Job is finished are the Pods removed, and the resources freed.\n  With the new approach, the Job controller will keep track of the completed jobs while allowing the completed Pods to be removed.\n        This enhancement brings to  StatefulSets the optional  minReadySeconds field that is already available on  Deployments,  DaemonSets,  ReplicasSets, and Replication Controllers.\n  If declared, a newly created Pod won\u2019t be considered available until their containers stay ready without crashing for the specified number of seconds.\n      Introduced in Kubernetes 1.4 and in beta since 1.8, CronJobs are finally on the road to becoming Stable.\n            With  this API, you can define a  minAvailable number of replicas for a Pod. If you try to voluntarily disrupt a Pod in a way that violates  minAvailable value, it won\u2019t be deleted.\n  While in  Kubernetes 1.21 we saw the graduation of PodDisruptionBudget to GA, in Kubernetes 1.22 we see the graduation of the  Eviction subresource:\n        When performing a  rolling update, this enhancement allows specifying how many new Pods will be created to replace the old ones.\n  This is done via the optional  spec.strategy.rollingUpdate.maxSurge field. By assigning an absolute number, you can tell the maximum number of Pods that can be created over the desired number of Pods. The value can also be a percentage of the desired Pods. The default value, to match the previous behavior, is 25 percent.\n      When the  LogarithmicScaleDown feature gate is enabled, a semi-random selection of Pods will be used to downscale ReplicaSets based on logarithmic bucketing of pod timestamps.\n        You can now annotate Pods with  controller.kubernetes.io/pod-deletion-cost=10, with  0 being the default value. When scaling down, a best effort will be made to remove Pods with a lower deletion cost.\n        Indexed jobs were introduced in  Kubernetes 1.21 to make it easier to schedule highly parallelizable Jobs.\n  This enhancement adds  completion indexes into the Pods of a Job with fixed completion count, to support running embarrassingly parallel programs.\n  This way, it is possible to pass the job index to the Pods via environment variables, or even create indexed jobs where pods can address each other by a hostname built from the index:\n  [...]\r spec:\r subdomain: my-job-svc\r containers:\r - name: task\r image: registry.example.com/processing-image\r command: [&#34;./process&#34;, &#34;--index&#34;, &#34;$JOB_COMPLETION_INDEX&#34;, &#34;--hosts-pattern&#34;, &#34;my-job-{{.id}}.my-job-svc&#34;]\n      Since  Kubernetes 1.21, Jobs can be temporarily suspended by setting the  .spec.suspend field of the job to  true, and resumed later by setting it back to  false.\n          This new admission controller will be able to enforce  Pod Security Standards by namespace. The enforcement can be done at three levels:\n  audit: Policy violations will trigger the addition of an audit annotation, but are otherwise allowed.\n   apiVersion: apiserver.config.k8s.io/v1\rkind: AdmissionConfiguration\rplugins:\r- name: PodSecurity\r configuration:\r defaults: # Defaults applied when a mode label is not set.\r enforce: &lt;default enforce policy level&gt;\r enforce-version: &lt;default enforce policy version&gt;\r audit: &lt;default audit policy level&gt;\r audit-version: &lt;default audit policy version&gt;\r warn: &lt;default warn policy level&gt;\r warn-version: &lt;default warn policy version&gt;\r exemptions:\r usernames: [ &lt;array of authenticated usernames to exempt&gt; ]\r runtimeClassNames: [ &lt;array of runtime class names to exempt&gt; ]\r namespaces: [ &lt;array of namespaces to exempt&gt; ]\n  To learn more about the rationale behind this enhancement, and possible new developments,  check the KEP.\n      This enhancement allows Go clients to authenticate using external credential providers, like Key Management Systems (KMS), Trusted Platform Modules (TPM), or Hardware Security Modules (HSM).\n  Those devices are already used to authenticate against other services, are easier to rotate, and are more secure, as they don\u2019t exist as files on the disk.\n  Initially introduced on Kubernetes 1.10, this feature concludes  the work done in 1.20 and 1.21.\n      The current JSON Web Tokens (JWT) that workloads use to authenticate against the API have some security issues. This enhancement comprises the work to create a more secure API for JWT.\n        Up until now, clients of the Certificates API weren\u2019t able to request a specific duration for an issued certificate.\n  This duration defaulted to one year for every new certificate, which may be too long for some use cases.\n  A new  ExpirationSeconds field has been added to  CertificateSigningRequestSpec, which accepts a minimum value of 600 seconds (10 minutes).\n        This enhancement approaches the edge case where Services with  externalTrafficPolicy=Local will drop all traffic from a load balancer if the number of endpoints changes to 0. This behavior makes zero downtime rolling updates impossible for such services.\n  The implemented solution is to send all external traffic on the affected nodes to both ready and not ready terminating endpoints (preferring the ready ones).\n        With this enhancement, Kubernetes allows more DNS search paths, and a longer list of DNS search paths, to keep up with recent DNS resolvers.\n         The new  EndpointSlice API will split endpoints into several Endpoint Slice resources. This solves many problems in the current API that are related to big  Endpoints objects. This new API is also designed to support other future features, like multiple IPs per pod.\n  Noteworthy in Kubernetes 1.22 is that if an  Endpoints resource has more than 1000 endpoints, the cluster annotates them with  endpoints.kubernetes.io/over-capacity: truncated, where before it was annotated with  endpoints.kubernetes.io/over-capacity: warning.\n                Some implementations of the LoadBalancer API do not consume the node ports automatically allocated by Kubernetes, like MetalLB or kube-router. However, the API requires a port to be defined and allocated, even if it\u2019s not being used.\n  When the field  allocateLoadBalancerNodePort in  Service.Spec is set to  false, it will stop allocating new node ports.\n                This enhancement will allow you to define all ports in a NetworkPolicy as a range:\n          You can now set the  spec.trafficPolicy field on  Service objects to optimize your cluster traffic:\n         With this enhancement, you can now specify  parameters for an  IngressClass with a  Namespace scope.\n            With this enhancement, Kubernetes goes a step further, allowing you to run the whole Kubernetes stack as a non-root user. This way, if your cluster is compromised, attackers will have a bad time accessing the rest of your infrastructure.\n  You can run Kubernetes in rootless mode by enabling the  KubeletInUserNamespace feature gate and following  these instructions.\n  However, keep in mind that there are  plenty of caveats you\u2019ll have to address.\n      Cgroups is a Linux kernel feature that limits, accounts for, and isolates the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes. It\u2019s v2 API was declared stable more than two years ago, and many Linux distributions are already using it by default.\n  This enhancement covers the work done to make Kubernetes compatible with Cgroups v2, starting with the configuration files.\n  Check  the new configuration values, as there will be some changes in the ranges of the values. For example  cpu.weight values will change from [2-262144] to [1-10000].\n  This enhancement doesn\u2019t cover enabling the new features in v2 that aren\u2019t available in v1. It also doesn\u2019t cover the deprecation of v1.\n      Swap (disk memory in Linux) is not the fastest. However, there are several workloads like Java and Node applications that benefit from it.\n  This enhancement enables Kubernetes workloads to use swap. For now, the configuration is global for the whole node, and cannot be configured per workload. To use it:\n         Kubernetes currently allows you to increase the security of your containers, executing them using a  Seccomp profile.\n  This enhancement will enable this option by default, helping prevent CVEs and zero-day vulnerabilities. You can enable this behavior with the  SeccompDefault, which will turn the existing  RuntimeDefault profile into the default for any container.\n          memory.low: The best-effort memory protection, a \u201csoft guarantee\u201d that if the cgroup and all its descendants are below this threshold, the cgroup\u2019s memory won\u2019t be reclaimed unless memory can\u2019t be reclaimed from any unprotected cgroups. Not yet considered for now.\n memory.high: If a cgroup\u2019s memory use goes over the high boundary specified here, the cgroup\u2019s processes are throttled and put under heavy reclaim pressure.\n     This enhancement allows the CPU Manager to assign exclusive workloads to specific CPU cores. Isolating workloads per CPU core avoids context and cache switching, which is crucial for latency-sensitive applications.\n  A new  --cpu-manager-policy-options option is available on the CPU Manager. When set to  full-pcups-only=true, the node will isolate the workloads per physical CPU cores. Note that it will only accept workloads that use entire CPUs.\n          And second, container isolation of HugePages has been put in place to solve an issue where a pod could use more memory than requested, ending up in resource starvation.\n        Now, it\u2019s possible to set a pod\u2019s hostname to its Fully Qualified Domain Name (FQDN), increasing the interoperability of Kubernetes with legacy applications.\n  After setting  hostnameFQDN: true, running  uname -n inside a Pod returns  foo.test.bar.svc.cluster.local instead of just  foo.\n  This feature was introduced on  Kubernetes 1.19, and you can read more details  in the enhancement proposal.\n      Ephemeral containers are a great way to debug running pods. Although you can\u2019t add regular containers to a pod after creation, you can run ephemeral containers with  kubectl debug.\n        A new  Memory Manager component is available in  kubelet to guarantee memory and hugepages allocation for pods. It will only act on  Pods in the guaranteed QoS class.\n        When a Pod defines a memory-backed empty dir volume (e.g., tmpfs), not all hosts size this volume equally. For example, a Linux host sizes it to 50 percent of the memory on the host. This new enhancement will size volumes not only with the node allocatable memory in mind, but also with the pod allocatable memory and the  emptyDir.sizeLimit field.\n        This enhancement introduces a second  terminationGracePeriodSeconds field, inside the  livenessProbe object, to differentiate two situations: How much should Kubernetes wait to kill a container under regular circumstances, and when is the kill due to a failed livenessProbe?\n          ComponentConfig is an ongoing effort to make component configuration more dynamic and directly reachable through the Kubernetes API.\n        This feature lets you define a preferred node with the  .status.nominatedNodeName field inside a Pod to speed up the scheduling process in large clusters.\n        By defining  node affinity in a deployment, you can constrain which nodes your pod will be scheduled on. For example, deploy on nodes that are already running Pods with a  label-value for an  example-label.\n  This enhancement adds a  namespaceSelector field so you can specify the namespaces by their labels, rather than their names. With this field, you can dynamically define the set of namespaces.\n        Three score plugins of the default scheduler ( NodeResourcesLeastAllocated,  NodeResourcesMostAllocated and  RequestedToCapacityRatio) implement mutually exclusive strategies for preferred resource allocation.\n  This enhancement simplifies the scheduler by deprecating those plugins and combining them under a single  NodeResourcesFit plugin, using a  ScoringStrategy property that can be set to  LeastAllocated (default),  MostAllocated, and  RequestedToCapacityRatio.\n        Before a CSI volume is bind mounted inside a container, Kubernetes modifies the volume ownership via  fsGroup. For most volume plugins,  kubelet does so by recursively  chowning and  chmoding the files and directories inside a volume. However,  chown and  chmod are unix primitives, so they are not available to some CSI drivers, like AzureFile.\n  This enhancement proposes providing the CSI driver with the  fsgroup of the pods as an explicit field, so it can be the CSI driver applying this natively on mount time.\n  This behavior can be enabled with the  DelegateFSGroupToCSIDriver feature gate, for drivers supporting the  VOLUME_MOUNT_GROUP  NodeServiceCapability. The  fsGroup should be specified in the  securityContext.\n      With this enhancement, it\u2019s possible to access  PersistenVolumes in a  ReadWriteOncePod mode, restricting access to a single pod on a single node.\n  While the existing  ReadWriteOnce, access mode restricts access to a single node, but allows simultaneous access from many pods on that node.\n        With this enhancement, CSI drivers will be able to request the service account tokens from Kubelet to the  NodePublishVolume function. Kubelet will also be able to limit what tokens are available to which driver. And finally, the driver will be able to re-execute  NodePublishVolume to remount the volume by setting  RequiresRepublish to  true.\n  This last feature will come in handy when the mounted volumes can expire and need a re-login. For example, a secrets vault.\n        Introduced in  Kubernetes 1.18, this enhancement establishes the foundations that will allow users to create pre-populated volumes. For example, pre-populating a disk for a virtual machine with an OS image, or enabling data backup and restore.\n  To accomplish this, the current validations on the  DataSource field of persistent volumes  will be lifted, allowing it to set arbitrary objects as values. Implementation details on how to populate volumes are delegated to purpose-built controllers.\n          Privileged containers have access to the host, as if they were running directly on it. Although they are not recommended for most of the workloads, they are quite useful for administration, security, and monitoring purposes.\n  If your cluster has the  WindowsHostProcessContainers feature enabled, you can create a  Windows HostProcess pod by setting the  windowsOptions.hostProcess flag on the security context of the pod spec. All containers in these pods must run as Windows HostProcess containers.\n      Container Storage Interface plugins were created to allow the development of third-party storage volume systems.\n  Since  Kubernetes 1.16, Windows nodes are able to use the existing CSI plugins. Now this feature is  Stable.\n        This enhancement improves the API Server to allow tracing requests using  OpenTelemetry libraries, and the OpenTelemetry format.\n  You can enable the tracing via the  APIServerTracing feature gate and by launching the apiserver with  --tracing-config-file=&lt;path-to-config&gt;, where the config file would look like:\n        Related to  #2033 Rootless mode containers, this enh\n......", "posttime": "2021-07-30 05:12:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65b0\u589e,kubernetes,pod", "title": "Kubernetes 1.22 \u2013 \u65b0\u589e\u529f\u80fd", "title_en": "Kubernetes 1.22 \u2013 What's New", "transed": 1, "url": "https://sysdig.com/blog/kubernetes-1-22-whats-new/", "via": "", "real_tags": ["\u65b0\u589e", "pod"]}, {"category": "", "categoryclass": "", "imagename": "9e088de85b2bba24e391b231b49555e3.jpg", "infoid": 1070500, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e09\uff0c\u7f8e\u56fd\u519c\u4e1a\u90e8\u53d1\u5e03\u4e86\u4e00\u4e9b\u76f8\u5f53\u4ee4\u4eba\u4e0d\u5b89\u7684\u6d88\u606f\uff1a\u4e00\u9879\u5bf9\u91ce\u9e7f\u79cd\u7fa4\u7684\u8c03\u67e5\u53d1\u73b0\uff0c\u5927\u91cf\u7684\u52a8\u7269\u4f3c\u4e4e\u5df2\u7ecf\u66b4\u9732\u4e8e SARS-CoV-2\uff0c\u8fd9\u79cd\u75c5\u6bd2\u4f1a\u5bfc\u81f4 COVID-19\u3002\u8fd9\u4e00\u53d1\u73b0\u8868\u660e\uff0c\u5317\u7f8e\u6709\u5927\u91cf\u91ce\u751f\u52a8\u7269\u53ef\u4ee5\u4f5c\u4e3a\u75c5\u6bd2\u7684\u50a8\u5b58\u5e93\uff0c\u5373\u4f7f\u6211\u4eec\u8981\u63a7\u5236\u5b83\u5728\u4eba\u7fa4\u4e2d\u7684\u4f20\u64ad\u3002\u4e3a\u4ec0\u4e48\u9996\u5148\u8981\u68c0\u67e5\u9e7f\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u7f8e\u56fd\u519c\u4e1a\u90e8\u52a8\u690d\u7269\u536b\u751f\u68c0\u9a8c\u5c40\u6b63\u5728\u7814\u7a76\u5404\u79cd\u7269\u79cd\uff0c\u201c\u4ee5\u786e\u5b9a\u53ef\u80fd\u4f5c\u4e3a\u75c5\u6bd2\u5bbf\u4e3b\u6216\u5bbf\u4e3b\u7684\u7269\u79cd\uff0c\u4ee5\u53ca\u4e86\u89e3\u75c5\u6bd2\u7684\u6765\u6e90\uff0c\u5e76\u9884\u6d4b\u5176\u5bf9\u91ce\u751f\u52a8\u7269\u548c\u52a8\u7269\u7684\u5f71\u54cd\u3002\u8de8\u7269\u79cd\u4f20\u64ad\u7684\u98ce\u9669\u3002\u201d\u8fd9\u662f 2020 \u5e74\u53d1\u73b0\u75c5\u6bd2\u4f20\u64ad\u5230\u91ce\u751f\u6c34\u8c82\u7684\u540c\u4e00\u7ec4\u3002\u7f8e\u56fd\u519c\u4e1a\u90e8\u4f7f\u7528\u5708\u517b\u9e7f\u79cd\u7fa4\uff0c\u5df2\u7ecf\u786e\u5b9a\u9e7f\u53ef\u80fd\u88ab\u75c5\u6bd2\u611f\u67d3\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u52a8\u7269\u6ca1\u6709\u8868\u73b0\u51fa\u4efb\u4f55\u75c7\u72b6\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u9e7f\u4e0e\u4eba\u7c7b\u4e4b\u95f4\u7684\u76f4\u63a5\u4e92\u52a8\u76f8\u5bf9\u6709\u9650\uff0c\u4f46\u68c0\u67e5\u91ce\u751f\u79cd\u7fa4\u662f\u6709\u9053\u7406\u7684\u3002\u7f8e\u56fd\u519c\u4e1a\u90e8\u68c0\u67e5\u4e86\u56db\u4e2a\u4e0d\u540c\u5dde\u5171 32 \u4e2a\u53bf\u7684\u4eba\u53e3\uff0c\u83b7\u53d6\u8840\u6db2\u6837\u672c\u4ee5\u5bfb\u627e\u9488\u5bf9 SARS-CoV-2 \u7684\u6297\u4f53\u3002\u8fd9\u4e9b\u6297\u4f53\u975e\u5e38\u666e\u904d\uff0c\u4ece\u4f0a\u5229\u8bfa\u4f0a\u5dde\u6837\u672c\u7684 7% \u5230\u5bc6\u6b47\u6839\u5dde\u7684 60% \u4e0d\u7b49\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u63a5\u53d7\u6d4b\u8bd5\u7684\u9e7f\u4e2d\u6709\u4e09\u5206\u4e4b\u4e00\u5177\u6709\u9488\u5bf9 SARS-CoV-2 \u7684\u6297\u4f53\u3002\u7f8e\u56fd\u519c\u4e1a\u90e8\u8fd8\u91c7\u53d6\u4e86\u5408\u7406\u7684\u9884\u9632\u63aa\u65bd\u4ee5\u786e\u4fdd\u6570\u636e\u51c6\u786e\u3002\u673a\u6784\u79d1\u5b66\u5bb6\u6d4b\u8bd5\u4e86\u5927\u6d41\u884c\u4e4b\u524d\u7684\u6837\u672c\uff0c\u4ee5\u786e\u8ba4\u8bef\u62a5\u7387\u5f88\u4f4e\uff08\u786e\u5b9e\u5982\u6b64\uff09\u3002\u7814\u7a76\u4eba\u5458\u8fd8\u4f7f\u7528\u4e24\u53f0\u4e0d\u540c\u7684\u673a\u5668\u8fdb\u884c\u6297\u4f53\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u7ed3\u8bba\u4e0d\u662f\u7531\u4e8e\u67d0\u79cd\u786c\u4ef6\u95ee\u9898\uff08\u4e0d\u662f\uff09\u3002\u56e0\u6b64\uff0c\u5f88\u53ef\u80fd\u5927\u91cf\u7684\u9e7f\u5df2\u7ecf\u63a5\u89e6\u5230\u4e86\u75c5\u6bd2\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u7814\u7a76 SARS-CoV-2 \u7684\u4f20\u64ad\u65b9\u5f0f\uff0c\u957f\u65f6\u95f4\u63a5\u89e6\u547c\u5438\u9053\u98de\u6cab\u662f\u6700\u6709\u6548\u7684\u65b9\u6cd5\u3002\u4eba\u7c7b\u548c\u91ce\u9e7f\u4e4b\u95f4\u53ef\u80fd\u53d1\u751f\u8fd9\u79cd\u63a5\u89e6\u7684\u60c5\u51b5\u5e76\u4e0d\u591a\u3002\u8fd9\u4e9b\u6570\u5b57\u53ef\u80fd\u662f\u7531\u4e00\u79cd\u7f55\u89c1\u7684\u4f20\u64ad\u7ed9\u9e7f\uff0c\u7136\u540e\u5728\u79cd\u7fa4\u4e2d\u5e7f\u6cdb\u4f20\u64ad\u800c\u4ea7\u751f\u7684\u3002\u6216\u8005\u53e6\u4e00\u4e2a\u7269\u79cd\uff0c\u53ef\u80fd\u662f\u9a6f\u5316\u7684\u7269\u79cd\uff0c\u5728\u4eba\u548c\u9e7f\u4e4b\u95f4\u643a\u5e26\u75c5\u6bd2\u3002\u4e86\u89e3\u4f20\u64ad\u5982\u4f55\u53d1\u751f\u5bf9\u4e8e\u786e\u5b9a\u9e7f\u4f53\u5185\u662f\u5426\u5b58\u5728\u5927\u578b\u75c5\u6bd2\u5e93\u5bf9\u4eba\u7c7b\u6784\u6210\u5a01\u80c1\u81f3\u5173\u91cd\u8981\u3002\u867d\u7136\u6ca1\u6709\u8ff9\u8c61\u8868\u660e\u4eba\u7c7b\u4ece\u9e7f\u8eab\u4e0a\u611f\u67d3\u4e86\u75c5\u6bd2\uff0c\u4f46\u8fd9\u79cd\u75c5\u6bd2\u5728\u7f8e\u56fd\u4eba\u53e3\u4e2d\u975e\u5e38\u666e\u904d\uff0c\u56e0\u6b64\u5f88\u96be\u6392\u9664\u4eba\u4e0e\u4eba\u4e4b\u95f4\u7684\u4f20\u64ad\u4f5c\u4e3a\u5bf9\u4efb\u4f55\u75c5\u4f8b\u7684\u66ff\u4ee3\u89e3\u91ca\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5982\u679c\u7f8e\u56fd\u786e\u5b9e\u8bbe\u6cd5\u63a7\u5236\u4e86\u75c5\u6bd2\u7684\u4f20\u64ad\uff0c\u90a3\u4e48\u4e86\u89e3\u4efb\u4f55\u5176\u4ed6\u611f\u67d3\u9014\u5f84\u5c06\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\n\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u75c5\u6bd2\u53ef\u4ee5\u6355\u6349\u7a81\u53d8\uff0c\u5e2e\u52a9\u5b83\u9002\u5e94\u4f5c\u4e3a\u5bbf\u4e3b\u7684\u9e7f\uff0c\u5982\u679c\u75c5\u6bd2\u8df3\u56de\u5230\u4eba\u7c7b\u8eab\u4e0a\uff0c\u5219\u8bc1\u660e\u5bf9\u4eba\u7c7b\u662f\u5371\u9669\u7684\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u7528 SARS-CoV-2 \u5bf9\u6b64\u8fdb\u884c\u7814\u7a76\u7684\u4e00\u4e2a\u6848\u4f8b\u662f\u4e00\u79cd\u9002\u5e94\u6c34\u8c82\u7684\u83cc\u682a\u3002\u8fd9\u79cd\u75c5\u6bd2\u611f\u67d3\u4eba\u7c7b\u7ec6\u80de\u7684\u6548\u7387\u8d8a\u6765\u8d8a\u4f4e\uff0c\u4f46\u5b83\u4e5f\u5728\u53d1\u751f\u53d8\u5316\uff0c\u4f7f\u5176\u4e0d\u6613\u53d7\u5230\u75ab\u82d7\u6216\u5148\u524d\u611f\u67d3\u4ea7\u751f\u7684\u514d\u75ab\u53cd\u5e94\u7684\u5f71\u54cd\u3002\u5f53\u7136\uff0c\u6ca1\u6709\u7406\u7531\u8ba4\u4e3a\u9002\u5e94\u9e7f\u7684 SARS-CoV-2 \u4f1a\u9075\u5faa\u7c7b\u4f3c\u7684\u8f68\u8ff9\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u4e24\u4e2a\u95ee\u9898\u2014\u2014\u96be\u4ee5\u63a7\u5236\u7684\u5bbf\u4e3b\u7684\u5b58\u5728\u548c\u75c5\u6bd2\u8fdb\u4e00\u6b65\u8fdb\u5316\u7684\u524d\u666f\u2014\u2014\u610f\u5473\u7740\u4e86\u89e3\u75c5\u6bd2\u5982\u4f55\u5230\u8fbe\u9e7f\u7fa4\u4ee5\u53ca\u5b83\u662f\u5426\u5728\u9e7f\u7fa4\u4e4b\u95f4\u4f20\u64ad\u975e\u5e38\u91cd\u8981\u3002\u9e7f\u3002", "note_en": "On Wednesday, the US Department of Agriculture released some  rather disturbing news: a survey of wild deer populations has found that large numbers of the animals seem to have been exposed to SARS-CoV-2, the virus that causes COVID-19. The finding indicates that there&#39;s a very large population of wild animals in North America that could serve as a reservoir for the virus, even if we were to get its circulation within the human population under control.\n  Why check deer in the first place? It turns out that the USDA&#39;s Animal and Plant Health Inspection Service is studying a variety of species &#34;to identify species that may serve as reservoirs or hosts for the virus, as well as understand the origin of the virus, and predict its impacts on wildlife and the risks of cross-species transmission.&#34; This is the same group that identified the spread of the virus to  a wild mink in 2020.\n Using a captive deer population, the USDA had already determined that deer can be infected by the virus, although the animals display no symptoms. So although direct interactions between deer and humans are relatively limited, checking the wild populations made sense. The USDA checked populations in a total of 32 counties in four different states, obtaining blood samples to look for antibodies specific to SARS-CoV-2.\n The antibodies were quite common, ranging from a low of 7 percent of the samples in Illinois to a high of 60 percent in Michigan. All told, a third of the deer tested had antibodies against SARS-CoV-2.\n The USDA also took reasonable precautions to make sure the data was accurate. Agency scientists tested samples that were around prior to the pandemic to confirm that the rate of false positives was low (it was). The researchers also ran antibody tests using two different machines to make sure the conclusion wasn&#39;t due to some sort of hardware problem (it wasn&#39;t). So in all likelihood, a large number of deer have been exposed to the virus.\n     By now, we&#39;ve spent a lot of time studying how SARS-CoV-2 spreads, and prolonged exposure to respiratory droplets is the most efficient method. There aren&#39;t many contexts in which this kind of exposure is likely to be happening between humans and wild deer. It&#39;s possible that these numbers are generated by a rare transmission to deer that is followed by extensive spread within the population. Or another species, possibly a domesticated one, is carrying the virus between humans and deer.\n Understanding how the transmission takes place will be critical to determining whether the existence of a large viral reservoir in deer poses a threat to humans. While there&#39;s been no indication of a human picking up an infection from deer, the virus is so common in the US population that it would be difficult to rule out human-to-human transmission as an alternative explanation for any cases. Still, if the US ever does manage to control the spread of the virus, being aware of any alternative routes of infection would be a good idea.\n Another issue is that the virus can pick up mutations that help it adapt to deer as a host and prove dangerous to humans if the virus jumps back to humans. So far, the one case where this has been studied with SARS-CoV-2 is a strain  that is adapting to mink. That virus is becoming less efficient at infecting human cells, but it&#39;s also changing in ways that make it less susceptible to the immune response generated by vaccines or prior infections. There is, of course, no reason to think that a deer-adapted SARS-CoV-2 would follow a similar trajectory.\n In any case, both of these issues\u2014the presence of a difficult-to-control reservoir and the prospect for further evolution of the virus\u2014means that it will be important to understand how the virus is reaching the deer population and whether it&#39;s spreading between deer.", "posttime": "2021-07-30 04:34:26", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "sars,michigan,\u75c5\u6bd2", "title": "\u5bc6\u6b47\u6839\u5dde\u4e00\u534a\u4ee5\u4e0a\u7684\u9e7f\u4f3c\u4e4e\u90fd\u63a5\u89e6\u8fc7 SARS-CoV-2", "title_en": "Over half the deer in Michigan seem to have been exposed to SARS-CoV-2", "transed": 1, "url": "https://arstechnica.com/science/2021/07/over-half-the-deer-in-michigan-seem-to-have-been-exposed-to-sars-cov-2/", "via": "", "real_tags": ["sars", "michigan", "\u75c5\u6bd2"]}]