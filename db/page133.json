[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1069735, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "*** 7 \u6708 23 \u65e5\u661f\u671f\u4e94 *** \u5728 2020 \u5e74\u4e1c\u4eac\u5965\u8fd0\u4f1a\u671f\u95f4\uff0c\u82f1\u56fd\u4ee5\u5916\u7684\u542c\u4f17\u5c06\u65e0\u6cd5\u5728\u7ebf\u6536\u542c\u5f53\u5730\u7684 BBC \u5e7f\u64ad\u7535\u53f0\u3002\u56fd\u5bb6\u7535\u53f0\u5c06\u53ef\u7528\uff0c\u4f46\u5728\u6b64\u671f\u95f4\u53ef\u80fd\u65e0\u6cd5\u4f7f\u7528\u67d0\u4e9b\u8282\u76ee\u6216\u8282\u76ee\u7247\u6bb5\u3002\u8fd9\u662f\u7531\u4e8e\u6743\u5229\u539f\u56e0\u3002\u5982\u679c\u8bbf\u95ee\u6d41\u7684\u8bbe\u5907\u4f7f\u7528 Shoutcast\uff0c\u8fd9\u4e5f\u53ef\u80fd\u4f1a\u5f71\u54cd\u4e00\u4e9b\u82f1\u56fd\u542c\u4f17\u3002 Shoutcast \u6709\u4e00\u4e2a\u6d41\u8986\u76d6\u82f1\u56fd\u548c\u6d77\u5916\uff0c\u56e0\u6b64\u76ee\u524d\u65e0\u6cd5\u4f7f\u7528\u8fd9\u4e9b\u6d41\u3002\u5982\u679c\u60a8\u7684\u8bbe\u5907\u53d7\u5230\u5f71\u54cd\uff0c\u60a8\u4f1a\u542c\u5230\u4e00\u6761\u5faa\u73af\u6d88\u606f\uff0c\u544a\u77e5\u76ee\u524d\u65e0\u6cd5\u4f7f\u7528\u8be5\u6d41\u3002\u5982\u679c\u60a8\u5728\u82f1\u56fd\u5883\u5185\u4e14\u65e0\u6cd5\u6536\u542c\uff0c\u8bf7\u67e5\u770b\u4ee5\u4e0b\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\u4ee5\u83b7\u53d6\u6709\u5173\u5982\u4f55\u540c\u65f6\u5728\u5176\u4ed6\u8bbe\u5907\u4e0a\u6536\u542c\u7684\u4fe1\u606f\uff1a\u6211\u5982\u4f55\u73b0\u573a\u6536\u542c\uff1f 2020 \u5e74\u4e1c\u4eac\u5965\u8fd0\u4f1a\u4e8e 7 \u6708 23 \u65e5\u661f\u671f\u4e94\u5f00\u59cb\uff0c8 \u6708 8 \u65e5\u661f\u671f\u65e5\u7ed3\u675f\u3002\u5728\u6b64\u65e5\u671f\u4e4b\u540e\uff0cBBC \u5e7f\u64ad\u7535\u53f0\u5c06\u5728\u53d7\u5f71\u54cd\u7684\u8bbe\u5907\u4e0a\u4e3a\u56fd\u9645\u542c\u4f17\u548c\u82f1\u56fd\u542c\u4f17\u7167\u5e38\u64ad\u653e\u3002", "note_en": "*** Friday 23 July ***  During the  Tokyo 2020 Olympics, local BBC radio stations will not be available online to listeners located  outside the UK. National stations will be available, however some programmes, or segments of programmes, may unavailable during this time. This is due to rights reasons.    This may also impact some UK listeners if the device accessing the stream uses Shoutcast.\u00a0Shoutcast has one stream covering both the UK and overseas, so these will be unavailable at this time. If your device is affected, you&#39;ll hear a looping message advising that the stream isn&#39;t available at the moment.\n If you&#39;re within the UK and unable to listen, please check the following FAQ for info on how to listen on a different device in the meantime:   How do I listen live?  The Tokyo 2020 Olympics started on  Friday 23 July and finish\u00a0on  Sunday 8 August. After this date, BBC\u00a0radio stations will stream as normal for both international listeners, and UK listeners on affected devices.", "posttime": "2021-07-26 07:29:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e1c\u4eac,bbc,\u8bbe\u5907", "title": "\u4e1c\u4eac\u5965\u8fd0\u4f1a\u671f\u95f4\u82f1\u56fd\u4ee5\u5916\u7684\u82f1\u56fd\u672c\u5730\u5e7f\u64ad\u7535\u53f0\u65e0\u6cd5\u5728\u7ebf\u64ad\u653e", "title_en": "Local BBC radio not available online outside UK during Tokyo Olympics", "transed": 1, "url": "https://www.bbc.co.uk/sounds/help/issues/bbc-sounds/local-radio-olympics-2020", "via": "", "real_tags": ["\u4e1c\u4eac", "bbc", "\u8bbe\u5907"]}, {"category": "", "categoryclass": "", "imagename": "ea08a8bb2e20cf7933f24f81bd86a060.png", "infoid": 1069734, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Dlib \u662f\u4e00\u4e2a\u73b0\u4ee3 C++ \u5de5\u5177\u5305\uff0c\u5305\u542b\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u548c\u5de5\u5177\uff0c\u7528\u4e8e\u5728 C++ \u4e2d\u521b\u5efa\u590d\u6742\u7684\u8f6f\u4ef6\u4ee5\u89e3\u51b3\u73b0\u5b9e\u4e16\u754c\u7684\u95ee\u9898\u3002\u5b83\u88ab\u5de5\u4e1a\u754c\u548c\u5b66\u672f\u754c\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5305\u62ec\u673a\u5668\u4eba\u3001\u5d4c\u5165\u5f0f\u8bbe\u5907\u3001\u79fb\u52a8\u7535\u8bdd\u548c\u5927\u578b\u9ad8\u6027\u80fd\u8ba1\u7b97\u73af\u5883\u3002 Dlib \u7684\u5f00\u6e90\u8bb8\u53ef\u5141\u8bb8\u60a8\u5728\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u4e2d\u514d\u8d39\u4f7f\u7528\u5b83\u3002\u5173\u6ce8\u6216\u53c2\u4e0edlib\u7684\u5f00\u53d1\u8bf7\u5728github\u4e0a\u8ba2\u9605dlib\u3002\u5982\u679c\u60a8\u6253\u7b97\u5411\u9879\u76ee\u63d0\u4ea4\u4ee3\u7801\uff0c\u8bf7\u52a1\u5fc5\u9605\u8bfb\u5982\u4f55\u8d21\u732e\u9875\u9762\u3002\u6587\u6863 \u4e0e\u8bb8\u591a\u5f00\u6e90\u9879\u76ee\u4e0d\u540c\uff0c\u8fd9\u4e2a\u9879\u76ee\u4e3a\u6bcf\u4e2a\u7c7b\u548c\u51fd\u6570\u63d0\u4f9b\u4e86\u5b8c\u6574\u800c\u7cbe\u786e\u7684\u6587\u6863\u3002\u8fd8\u6709\u4e00\u4e9b\u8c03\u8bd5\u6a21\u5f0f\u53ef\u4ee5\u68c0\u67e5\u8bb0\u5f55\u7684\u51fd\u6570\u524d\u63d0\u6761\u4ef6\u3002\u542f\u7528\u6b64\u529f\u80fd\u540e\uff0c\u5b83\u5c06\u6355\u83b7\u7531\u4e0d\u6b63\u786e\u8c03\u7528\u51fd\u6570\u6216\u4ee5\u4e0d\u6b63\u786e\u65b9\u5f0f\u4f7f\u7528\u5bf9\u8c61\u5f15\u8d77\u7684\u7edd\u5927\u591a\u6570\u9519\u8bef\u3002\u6211\u8ba4\u4e3a\u6587\u6863\u662f\u56fe\u4e66\u9986\u6700\u91cd\u8981\u7684\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u53d1\u73b0\u4efb\u4f55\u672a\u8bb0\u5f55\u7684\u3001\u4e0d\u6e05\u695a\u7684\u6216\u8fc7\u65f6\u7684\u6587\u4ef6\uff0c\u8bf7\u544a\u8bc9\u6211\uff0c\u6211\u4f1a\u4fee\u590d\u5b83\u3002\u9ad8\u8d28\u91cf\u7684\u53ef\u79fb\u690d\u4ee3\u7801 \u826f\u597d\u7684\u5355\u5143\u6d4b\u8bd5\u8986\u76d6\u7387\u3002\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\u884c\u6570\u4e0e\u5e93\u4ee3\u7801\u884c\u6570\u4e4b\u6bd4\u7ea6\u4e3a 1 \u6bd4 4\u3002\u8be5\u5e93\u5b9a\u671f\u5728 MS Windows\u3001Linux \u548c Mac OS X \u7cfb\u7edf\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u3002\u4f46\u662f\uff0c\u5b83\u5e94\u8be5\u9002\u7528\u4e8e\u4efb\u4f55 POSIX \u7cfb\u7edf\uff0c\u5e76\u4e14\u5df2\u7ecf\u5728 Solaris\u3001HPUX \u548c BSD \u4e0a\u4f7f\u7528\u8fc7\u3002\u4f7f\u7528\u8be5\u5e93\u4e0d\u9700\u8981\u5176\u4ed6\u5305\u3002\u53ea\u9700\u8981\u5f00\u7bb1\u5373\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684 API\u3002\n\u5728\u60a8\u53ef\u4ee5\u4f7f\u7528\u5e93\u4e4b\u524d\uff0c\u4e0d\u9700\u8981\u5b89\u88c5\u6216\u914d\u7f6e\u6b65\u9aa4\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u5982\u4f55\u7f16\u8bd1\u9875\u9762\u3002\u6240\u6709\u7279\u5b9a\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u4ee3\u7801\u90fd\u5728 OS \u62bd\u8c61\u5c42\u5185\u9694\u79bb\uff0c\u8fd9\u4e9b\u5c42\u4fdd\u6301\u5c3d\u53ef\u80fd\u5c0f\u3002\u5e93\u7684\u5176\u4f59\u90e8\u5206\u8981\u4e48\u4f4d\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u62bd\u8c61\u5c42\u4e4b\u4e0a\uff0c\u8981\u4e48\u662f\u7eaf ISO \u6807\u51c6 C++\u3002\u673a\u5668\u5b66\u4e60\u7b97\u6cd5 \u7528\u4e8e\u56fe\u50cf\u4e2d\u5bf9\u8c61\u68c0\u6d4b\u7684\u7ed3\u6784 SVM \u5de5\u5177\u4ee5\u53ca\u7528\u4e8e\u5bf9\u8c61\u68c0\u6d4b\u7684\u66f4\u5f3a\u5927\uff08\u4f46\u901f\u5ea6\u8f83\u6162\uff09\u7684\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u3002\u6570\u503c\u7b97\u6cd5 \u4f7f\u7528\u8868\u8fbe\u5f0f\u6a21\u677f\u6280\u672f\u5b9e\u73b0\u7684\u5feb\u901f\u77e9\u9635\u5bf9\u8c61\uff0c\u5e76\u4e14\u80fd\u591f\u5728\u53ef\u7528\u65f6\u4f7f\u7528 BLAS \u548c LAPACK \u5e93\u3002\u4e3a\u77e9\u9635\u5bf9\u8c61\u5b9a\u4e49\u4e86\u8bb8\u591a\u7ebf\u6027\u4ee3\u6570\u548c\u6570\u5b66\u8fd0\u7b97\uff0c\u4f8b\u5982\u5947\u5f02\u503c\u5206\u89e3\u3001\u8f6c\u7f6e\u3001\u4e09\u89d2\u51fd\u6570\u7b49\u3002 \u7528\u4e8e\u89e3\u51b3\u6700\u4f18\u5206\u914d\u548c\u6700\u5c0f\u5272/\u6700\u5927\u6d41\u95ee\u9898\u7684\u7ec4\u5408\u4f18\u5316\u5de5\u5177\u4ee5\u53ca\u7528\u4e8e\u5bfb\u627e\u6700\u5927\u6d41\u7684 CKY \u7b97\u6cd5\u53ef\u80fd\u7684\u89e3\u6790\u6811 \u7f51\u7edc iostream \u548c streambuf \u5bf9\u8c61\uff0c\u4f7f TCP \u5957\u63a5\u5b57\u80fd\u591f\u4e0e C++ iostreams \u5e93\u4e92\u64cd\u4f5c\n\u4e00\u4e2a\u7b80\u5355\u7684 HTTP \u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u53ef\u7528\u4e8e\u5c06 Web \u670d\u52a1\u5668\u5d4c\u5165\u5230\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d \u6570\u636e\u538b\u7f29\u548c\u5b8c\u6574\u6027\u7b97\u6cd5 \u4ee3\u8868\u6570\u636e\u538b\u7f29\u7b97\u6cd5\u90e8\u5206\u7684\u5404\u79cd\u62bd\u8c61\u5bf9\u8c61\u3002\u5305\u62ec\u591a\u79cd\u5f62\u5f0f\u7684 PPM \u7b97\u6cd5\u3002\u901a\u7528\u5b9e\u7528\u7a0b\u5e8f \u4e00\u4e2a\u547d\u4ee4\u884c\u89e3\u6790\u5668\uff0c\u80fd\u591f\u89e3\u6790\u548c\u9a8c\u8bc1\u5177\u6709\u5404\u79cd\u7c7b\u578b\u53c2\u6570\u548c\u9009\u9879\u7684\u547d\u4ee4\u884c", "note_en": "Dlib is a modern C++ toolkit containing machine learning algorithms and tools for creating complex software in C++ to solve real world problems. It is used in both industry and academia in a wide range of domains including robotics, embedded devices, mobile phones, and large high performance computing environments. Dlib&#39;s  open source licensing allows you to use it in any application, free of charge.\n To follow or participate in the development of dlib subscribe to  dlib on github. Also be sure to read the  how to contribute page if you intend to submit code to the project.\n   Documentation Unlike a lot of open source projects, this one provides complete and precise documentation for every class and function. There are also debugging modes that check the documented preconditions for functions. When this is enabled it will catch the vast majority of bugs caused by calling functions incorrectly or using objects in an incorrect manner.\n  I consider the documentation to be the most important part of the library. So if you find anything that isn&#39;t documented, isn&#39;t clear, or has out of date documentation, tell me and I will fix it.\n High Quality Portable Code Good unit test coverage. The ratio of unit test lines of code to library lines of code is about 1 to 4.\n The library is tested regularly on MS Windows, Linux, and Mac OS X systems. However, it should work on any POSIX system and has been used on Solaris, HPUX, and the BSDs.\n No other packages are required to use the library. Only APIs that are provided by an out of the box OS are needed.\n There is no installation or configure step needed before you can use the library. See the  How to compile page for details.\n All operating system specific code is isolated inside the OS abstraction layers which are kept as small as possible. The rest of the library is either layered on top of the OS abstraction layers or is pure ISO standard C++.\n Machine Learning Algorithms Structural SVM tools for  object detection in images as well as more powerful (but slower)  deep learning tools for object detection.\n Numerical Algorithms A fast  matrix object implemented using the expression templates technique and capable of using BLAS and LAPACK libraries when available.\n Numerous linear algebra and mathematical operations are defined for the matrix object such as the  singular value decomposition,  transpose,  trig functions, etc.\n      Combinatorial optimization tools for solving  optimal assignment and  min cut/max flow problems as well as the  CKY algorithm for finding the most probable parse tree\n    Networking iostream and  streambuf objects that enables TCP sockets to interoperate with the C++ iostreams library\n A simple  HTTP server object you can use to embed a web server into your applications\n  Data Compression and Integrity Algorithms Various abstracted objects representing parts of  data compression algorithms. Many forms of the PPM algorithm are included.\n  General Utilities A  command line parser with the ability to parse and validate command lines with various types of arguments and options", "posttime": "2021-07-26 07:28:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,c++,\u7528\u4e8e,modern,\u5bf9\u8c61", "title": "Dlib\uff1a\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u73b0\u4ee3 C++/Python \u5de5\u5177\u5305", "title_en": "Dlib: Modern C++/Python Toolkit for Machine Learning", "transed": 1, "url": "http://dlib.net/", "via": "", "real_tags": ["python", "c++", "\u7528\u4e8e", "modern", "\u5bf9\u8c61"]}, {"category": "", "categoryclass": "", "imagename": "99194f67e5542018f2c1c325832cade0.png", "infoid": 1069733, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6240\u4ee5\uff01\u94c1\u9508\u671f\u8d27\uff01\u7b80\u5355\u7684\u8c4c\u8c46\u67e0\u6aac\u6c41\u3002\u76f4\u5230\u5b83\u4e0d\u662f\u3002\u6240\u4ee5\u8ba9\u6211\u4eec\u505a\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u7136\u540e\u4e0e\u5176\u7b49\u5f85\u56f0\u96be\u7684\u4e8b\u60c5\u5077\u88ad\u6211\u4eec\uff0c\u6211\u4eec\u4f1a\u6545\u610f\u53bb\u505a\u3002\u6211\u4eec\u5b89\u88c5cargo-edit\uff0c\u4ee5\u9632\u4e07\u4e00\u6211\u4eec\u8fd8\u6ca1\u6709\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u7528cargo addlater\uff1a $ cargo install cargo-edit \u66f4\u65b0 crates.io index \u4e0b\u8f7d\u7684cart-edit v0.7.0 0.47 \u79d2\u5185\u4e0b\u8f7d 1 \u4e2a\u677f\u6761\u7bb1 (57.6 KB)\u5ffd\u7565\u5305`cargo-edit v0.7.0`\u5df2\u7ecf\u5b89\u88c5\u4e86\uff0c\u7528--force\u8986\u76d6\u5440\uff0c\u56e0\u4e3a\u771f\u7684\u5f88\u65b9\u4fbf\u3002\u8bfb\u8005\u53ea\u4f1a\u611f\u5230\u56f0\u60d1\uff0c\u56e0\u4e3acargo new\u3001cargo build\u3001cargo test\u3001cargo run \u7b49\u5b50\u547d\u4ee4\u5185\u7f6e\u5728cargo \u4e2d\uff0c\u4f46cargo add \u4e0d\u662f\u3002\u554a\u5bf9\u4e86\uff01\u4e8b\u5b9e\u4e0a\uff0c\u6211\u770b\u5230\u6709\u5f88\u591a\u8fd9\u6837\u7684\uff0c\u6bd4\u5982cargo-hack\u3001cargo-udeps\u3001cargo-expand\u2026\u2026\u4e0d\u80dc\u679a\u4e3e\u3002\u7136\u540e\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u5f02\u6b65\u8fd0\u884c\u65f6\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u671f\u8d27\u4e0d\u4f1a\u8f6e\u8be2\u5b83\u4eec\u81ea\u5df1......\u6211\u4eec\u5c06\u6beb\u65e0\u7406\u7531\u5730\u9009\u62e9 tokio\uff0c\u9664\u4e86\uff1a\u8fd9\u5c31\u662f\u6211\u8fc7\u53bb\u51e0\u4e2a\u6708\u4e00\u76f4\u5728\u4f7f\u7528\u7684\u4e00\u5806\u4e1c\u897f\u3002 $ cargo add tokio@1.9.0 --features full \u66f4\u65b0&#39;https://github.com/rust-lang/crates.io-index&#39; index \u5c06 tokio v1.9.0 \u6dfb\u52a0\u5230\u5177\u6709\u4ee5\u4e0b\u7279\u6027\u7684\u4f9d\u8d56\u9879\uff1a[&quot;full&quot;]\n\u7136\u540e\u6211\u4eec\u66f4\u6539\u6211\u4eec\u7684 main \u4ee5\u4fbf\u5b83\u4f7f\u7528\u9ed8\u8ba4\u7684 tokio \u6267\u884c\u5668\uff08cargo newgenerated \u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u4e00\u4e2a\uff0c\u4f46\u5728\u8fd9\u91cc\u8fd8\u4e0d\u591f\uff09\uff1a // \u5728 `src/main.rs` # [tokio ::main ]async fn main ( ) {\u6253\u5370\uff01 ( &quot;Hello from a (so far\u5b8c\u5168\u4e0d\u5fc5\u8981) async runtime&quot;) ;} $cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.01s Running `target/debug/waytoodeep`Hello from a\uff08\u5230\u76ee\u524d\u4e3a\u6b62\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\uff09 ) async runtime \u4f46\u662f\u8ba9\u6211\u4eec\u5728\u6211\u7684\u9879\u76ee\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u6211\u559c\u6b22\u7684\u5176\u4ed6\u597d\u4e1c\u897f\u3002\u9996\u5148\uff0c\u5bf9\u4e8e\u9519\u8bef\u5904\u7406\u2014\u2014\u6211\u4eec\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c06\u4ece\u4e0d\u540c\u7684\u5e93\u4e2d\u83b7\u5f97\u4e00\u5806\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u7c7b\u578b\u6765\u7edf\u4e00\u5b83\u4eec\uff0c\u90a3\u5c31\u592a\u597d\u4e86\u3002\u73b0\u5728\u6211\u4eec\u9700\u8981\u5b89\u88c5 color-eyre \u4f5c\u4e3a\u9ed8\u8ba4\u7684\u6050\u614c\u5904\u7406\u7a0b\u5e8f\uff0c\u6211\u5077\u5077\u5730\u4fee\u6539\u4e86\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u9ed8\u8ba4\u5f97\u5230\u56de\u6eaf\u3002\u4f7f\u7528 color_eyre ::Report ; # [tokio ::main ]async fn main ( ) -&gt; \u7ed3\u679c &lt; ( ), Report &gt; { setup ( )? ;\u6253\u5370\uff01 \uff08\u201c\u4f60\u597d\uff0c\u6765\u81ea\uff08\u5230\u76ee\u524d\u4e3a\u6b62\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u7684\uff09\u5f02\u6b65\u8fd0\u884c\u65f6\u201d\uff09\uff1b Ok ( ( ) )} fn setup ( ) -&gt; Result &lt; ( ), Report &gt; { if std ::env :: var (&quot;RUST_LIB_BACKTRACE&quot; ) \u3002 is_err ( ) { std ::env :: set_var ( &quot;RUST_LIB_BACKTRACE&quot;, &quot;1&quot; ) } color_eyre :: install ( )? ;\u884c \uff08 \uff08 \uff09 \uff09}\n$cargo run \u5728 0.02 \u79d2\u5185\u5b8c\u6210\u4e86 dev [unoptimized + debuginfo] target(s) \u8fd0\u884c `target/debug/waytoodeep`Hello \u4ece\uff08\u5230\u76ee\u524d\u4e3a\u6b62\u5b8c\u5168\u4e0d\u5fc5\u8981\u7684\uff09\u5f02\u6b65\u8fd0\u884c\u65f6\u597d\u7684\u597d\uff01\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u5728\u67d0\u4e2a\u5730\u65b9\u51fa\u73b0\u9519\u8bef\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5b8c\u6574\u7684\u5806\u6808\u8ddf\u8e2a\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u6700\u540e\uff0c\u56e0\u4e3a\u6211\u559c\u6b22\u6211\u7684\u65e5\u5fd7\u7ed3\u6784\u5316\uff0c\u8ba9\u6211\u4eec\u6dfb\u52a0\u8ddf\u8e2a\u5e76\u5728\u7ec8\u7aef\u4e2d\u7528\u6f02\u4eae\u7684\u989c\u8272\u6253\u5370\u5b83\u4eec\uff0c\u8ba9\u6211\u4eec\u6dfb\u52a0\u8ddf\u8e2a\u8ba2\u9605\u8005. $ cargo add tracking@0.1.26 trailing-subscriber@0.2.19 \u66f4\u65b0\u201chttps://github.com/rust-lang/crates.io-index\u201d\u7d22\u5f15 \u5c06tracing v0.1.26 \u6dfb\u52a0\u5230\u4f9d\u8d56\u9879 \u6dfb\u52a0tracing-subscriber v0.2.19\u5230\u4f9d\u8d56\u9879\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u8bbe\u7f6e\u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u90a3\u91cc\u5b89\u88c5\u8ddf\u8e2a\u8ba2\u9605\u8005......\u6211\u4eec\u5c06\u6539\u53d8\u90a3\u4e2a println!\u5230\u4e00\u4e2a\u4fe1\u606f\uff01\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\u64cd\u4f5c\uff0c\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\uff0c\u6211\u4eec\u9ed8\u8ba4\u4e3a\u6240\u6709\u677f\u6761\u7bb1\u7684\u4fe1\u606f\u65e5\u5fd7\u7ea7\u522b\u3002\u4f7f\u7528 color_eyre ::Report ;\u4f7f\u7528\u8ffd\u8e2a::\u4fe1\u606f\uff1b # [tokio ::main ]async fn main ( ) -&gt; \u7ed3\u679c &lt; ( ), Report &gt; { setup ( )? ;\u4fe1\u606f\uff01 \uff08\u201c\u4f60\u597d\uff0c\u6765\u81ea\u6211\u4eec\u4e3a\u81ea\u5df1\u505a\u7684\u8212\u9002\u7684\u5de2\u7a74\u201d\uff09\uff1b Ok ( ( ) )} fn setup ( ) -&gt; Result &lt; ( ), Report &gt; { if std ::env :: var (&quot;RUST_LIB_BACKTRACE&quot; ) \u3002 is_err ( ) { std ::env :: set_var ( &quot;RUST_LIB_BACKTRACE&quot;, &quot;1&quot; ) } color_eyre :: install ( )? ;\u5982\u679c std ::env :: var (&quot;RUST_LOG&quot;) \u3002 is_err ( ) { std ::env :: set_var ( &quot;RUST_LOG&quot;, &quot;info&quot; ) } tracking_subscriber ::fmt :: fmt () \u3002 with_env_filter(EnvFilter::from_default_env())\u3002\u5728\u91cc\u9762 \uff08 \uff09 ; Ok ( ( ) )} $ cargo run \u5728 0.02 \u79d2\u5185\u5b8c\u6210\u5f00\u53d1 [\u672a\u4f18\u5316 + \u8c03\u8bd5\u4fe1\u606f] \u76ee\u6807\u8fd0\u884c `target/debug/waytoodeep`Jul 25 17:03:46.993 INFO waytoodeep\uff1a\u4f60\u597d\u6765\u81ea\u6211\u4eec\u5236\u4f5c\u7684\u8212\u9002\u5de2\u7a74\u4e3a\u6211\u4eec\u81ea\u5df1\n\u5728\u51b3\u5b9a\u5728\u559d\u5496\u5561\u4f11\u606f\u65f6\u9605\u8bfb\u54ea\u7bc7\u6587\u7ae0\u65f6\uff0c\u4eba\u4eec\u901a\u5e38\u4f1a\u540c\u65f6\u6253\u5f00\u51e0\u4e2a\u7f51\u7ad9\uff0c\u7136\u540e\u9605\u8bfb\u6700\u5148\u52a0\u8f7d\u7684\u6587\u7ae0\u3002\u8fd9\u662f\u4e8b\u5b9e\u3002\u4f60\u53ef\u4ee5\u5f15\u7528\u6211\u7684\u8bdd\uff0c\u56e0\u4e3a\uff0c\u8c01\u4f1a\u53bb\u9a8c\u8bc1\u5462\uff1f\u8fd9\u542c\u8d77\u6765\u50cf\u5f88\u591a\u5de5\u4f5c\u3002\u8bf7\u76f8\u4fe1\u6211\u3002\u4f60\u731c\u5230\u4e86\uff01\u8ba9\u6211\u4eec\u5f15\u5165 reqwest - \u5c3d\u7ba1\u6211\u4e0d\u559c\u6b22\u5b83\u7684 API\uff0c\u4f46\u5b83\u53ef\u4ee5\u5f88\u597d\u5730\u4e0e\u6211\u4eec\u5806\u6808\u4e2d\u7684\u5176\u4f59\u90e8\u5206\u4e00\u8d77\u4f7f\u7528\u3002 $ cargo add reqwest@0.11.4 --no-default-features --features rustls-tls \u66f4\u65b0\u201chttps://github.com/rust-lang/crates.io-index\u201d\u7d22\u5f15 \u5c06 reqwest v0.11.4 \u6dfb\u52a0\u5230\u4f9d\u8d56\u9879\u4e2d\u7279\u5f81\uff1a [&quot;rustls-tls&quot;] # [tokio ::main ]async fn main ( ) -&gt; \u7ed3\u679c &lt; ( ), Report &gt; { setup ( )? ;\u4fe1\u606f\uff01 \uff08\u201c\u4f60\u597d\uff0c\u6765\u81ea\u6211\u4eec\u4e3a\u81ea\u5df1\u505a\u7684\u8212\u9002\u7684\u5de2\u7a74\u201d\uff09\uff1b\u8ba9\u5ba2\u6237=\u5ba2\u6237::\u65b0();\u8ba9 url = &quot;https://fasterthanli.me&quot; ; // \u8fd9\u4f1a\u5c06\u975e 200 HTTP \u72b6\u6001\u4ee3\u7801\u8f6c\u6362\u4e3a rust \u9519\u8bef\uff0c // \u6240\u4ee5\u7b2c\u4e00\u4e2a `?` \u4f20\u64ad\u201c\u6211\u4eec\u6709\u4e00\u4e2a\u8fde\u63a5\u95ee\u9898\u201d\uff0c // \u7b2c\u4e8c\u4e2a `?` \u4f20\u64ad\u201c\u6211\u4eec\u4e0e\u670d\u52a1\u5668\u804a\u5929\uff0c\u4ed6\u4eec// \u4e0d\u9ad8\u5174&quot; let res = client .\u83b7\u53d6\uff08\u7f51\u5740\uff09\u3002\u53d1\u9001 ( ) .await\uff1f . error_for_status ()\uff1f ;\u4fe1\u606f\uff01 (%url, content_type = ?res.headers ().get (&quot;content-type&quot;), &quot;\u5f97\u5230\u56de\u590d\uff01&quot;); Ok ( ( ) )} $cargo run \u7f16\u8bd1 waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) \u5728 3.05 \u79d2\u5185\u5b8c\u6210 dev [unoptimized + debuginfo] target(s) Running `target/debug/waytoodeep`Jul 25 17: 12:32.276 INFO waytoodeep\uff1a\u60a8\u597d\uff0c\u6765\u81ea\u6211\u4eec\u4e3a\u81ea\u5df1\u5236\u4f5c\u7684\u8212\u9002\u5de2\u7a747 \u6708 25 \u65e5 17:12:32.409 INFO waytoodeep\uff1a\u6536\u5230\u56de\u590d\uff01 url=https://fasterthanli.me content_type=Some(&quot;text/html; charset=utf-8&quot;) \u8fd9\u5c31\u662f\u6211\u6240\u8bf4\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\u7684\u610f\u601d\u3002\u597d\u5427\uff0c\u65e0\u8bba\u5982\u4f55\u90fd\u662f\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u3002\u5728\u8be5\u884c\u4e2d\uff1a\n\u6211\u4eec\u6709\u4e00\u6761\u6d88\u606f Got a response!\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u540d\u4e3a url \u7684\u6807\u8bb0\uff0c\u5176\u503c\u4e3a\u540d\u4e3a url \u7684\u7ed1\u5b9a\u7684 Display-formatting\uff0c\u4ee5\u53ca\u540d\u4e3a content_type \u7684\u6807\u8bb0\uff0c\u5176\u503c\u4e3a\u8868\u8fbe\u5f0f res.headers().get().get( \u201c\u5185\u5bb9\u7c7b\u578b\u201d\uff09\u3002\u5341\u5206\u7b80\u5355\uff01 name = %value \u7528\u4e8e Display\uff0cname = ?value\uff0c\u7528\u4e8e Debug\uff0c\u5e76\u4e14\u5982\u679c name \u548c value \u5177\u6709\u76f8\u540c\u7684...\u540d\u79f0\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7f29\u5199\u5f62\u5f0f %value \u548c ?value\u3002\u5f53\u7136\u8fd8\u6709\u8de8\u5ea6\uff0c\u5b83\u4eec\u5f88\u68d2\uff0c\u5bf9\u6211\u6765\u8bf4\uff0c\u91cd\u70b9\u662f\u4f60\u53ef\u4ee5\u5c06\u5b83\u4eec\u53d1\u9001\u5230 APM \u5e73\u53f0\uff0c\u5982 Datadog \u6216 Honeycomb \u6216\u5176\u4ed6\u4efb\u4f55\u4eba\uff0c\u4f46\u8fd9\u4e0d\u662f\u4e00\u7bc7\u5173\u4e8e\u8ddf\u8e2a\u7684\u6587\u7ae0\u3002\u53ea\u662f\u4e3a\u4e86\u8bf4\u660e\uff0c\u5982\u679c\u6211\u4eec\u5b89\u88c5\u4e00\u4e2a JSON \u8ddf\u8e2a\u8ba2\u9605\u8005\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5f97\u5230\u7684\uff1a $cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) \u5728 3.09 \u4e2d\u5b8c\u6210\u4e86 dev [unoptimized + debuginfo] \u76ee\u6807s \u8fd0\u884c `target/debug/waytoodeep`{&quot;timestamp&quot;:&quot;Jul 25 17:17:21.531&quot;,&quot;level&quot;:&quot;INFO&quot;,&quot;fields&quot;:{&quot;message&quot;:&quot;Hello from a comfy nest we&#39;ve\u4e3a\u6211\u4eec\u81ea\u5df1\u5236\u4f5c&quot;},&quot;target&quot;:&quot;waytoodeep&quot;}{&quot;timestamp&quot;:&quot;Jul 25 17:17:21.709&quot;,&quot;level&quot;:&quot;INFO&quot;,&quot;fields&quot;:{&quot;message&quot;:&quot;\u5f97\u5230\u56de\u590d!&quot;,&quot;url&quot;:&quot;https://fasterthanli.me&quot;,&quot;content_type&quot;:&quot;Some(\\&quot;text/html; charset=utf-8\\&quot;)&quot;},&quot;target&quot;:&quot;waytoodeep&quot;} \u3002 ..\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u516c\u5e73\u7684\u6bd4\u8f83\u3002\u8fd9\u4e24\u7bc7\u6587\u7ae0\u90fd\u6258\u7ba1\u5728\u6211\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\uff0c\u8fd9\u7edd\u5bf9\u4e0d\u662f\u8425\u9500\u8ba1\u5212\uff0c\u800c\u662f\u4e3a\u4e86\u4f7f\u83b7\u53d6\u65f6\u95f4\u5177\u6709\u53ef\u6bd4\u6027\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u4e00\u4e2a\u4eba\u5148\u5b8c\u6210\u53e6\u4e00\u4e2a\u83b7\u53d6\uff08\u5e76\u4e14\u4f1a\u968f\u65f6\u95f4\u968f\u673a\u53d8\u5316\uff09\u3002 async fn fetch_thing ( client: &amp; Client, url: &amp; str ) -&gt; Result &lt; ( ), Report &gt; { let res = client .\u83b7\u53d6\uff08\u7f51\u5740\uff09\u3002\u53d1\u9001 ( ) .await\uff1f . error_for_status ()\uff1f ;\u4fe1\u606f\uff01 (%url, content_type = ?res.headers ().get (&quot;content-type&quot;), &quot;\u5f97\u5230\u56de\u590d\uff01&quot;);\u884c \uff08 \uff08 \uff09 \uff09}\n# [tokio ::main ]async fn main ( ) -&gt; \u7ed3\u679c &lt; ( ), Report &gt; { setup ( )? ;\u4fe1\u606f\uff01 \uff08\u201c\u4f60\u597d\uff0c\u6765\u81ea\u6211\u4eec\u4e3a\u81ea\u5df1\u505a\u7684\u8212\u9002\u7684\u5de2\u7a74\u201d\uff09\uff1b\u8ba9\u5ba2\u6237=\u5ba2\u6237::\u65b0(); fetch_thing ( &amp;client, URL_1 ) ; fetch_thing ( &amp;client, URL_2 ) ; Ok ( ( ) )} $cargo run \u7f16\u8bd1 waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)warning: \u672a\u4f7f\u7528\u7684`Future`\u5b9e\u73b0\u8005\u5fc5\u987b\u4f7f\u7528 --&gt; src/main.rs:15:5 |15 | fetch_thing(&amp;client, URL_1); | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ | = \u6ce8\u610f\uff1a`#[warn(unused_must_use)]` \u9ed8\u8ba4\u5f00\u542f = \u6ce8\u610f\uff1a\u671f\u8d27\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u9664\u975e\u4f60\u4f7f\u7528 `.await` \u6216\u8f6e\u8be2\u5b83\u4eec\u8b66\u544a\uff1a\u5fc5\u987b\u4f7f\u7528\u7684 `Future` \u7684\u672a\u4f7f\u7528\u5b9e\u73b0\u8005 --&gt; src/main.rs: 16:5 |16 | fetch_thing(&amp;client, URL_2); | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ | = \u6ce8\u610f\uff1a\u671f\u8d27\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u9664\u975e\u4f60`.await` \u6216\u8f6e\u8be2\u4ed6\u4eec\u8b66\u544a\uff1a\u53d1\u51fa 2 \u4e2a\u8b66\u544a \u5728 3.01 \u79d2\u5185\u5b8c\u6210\u5f00\u53d1 [\u672a\u4f18\u5316 + \u8c03\u8bd5\u4fe1\u606f] \u76ee\u6807\u8fd0\u884c `target/debug/waytoodeep`Jul 25 17:26:31.571 INFO waytoodeep \uff1a\u4f60\u597d\uff0c\u6765\u81ea\u6211\u4eec\u4e3a\u81ea\u5df1\u5236\u4f5c\u7684\u8212\u9002\u7684\u5de2\u7a74\uff0c\u957f\u957f\u7684\u53f9\u606f amos ffs \u4f60\u5ffd\u7565\u4e86\u9ec4\u8272\u7684\u6ce2\u6d6a\u7ebf\u548c\u975e\u5e38\u5608\u6742\u7684\u5173\u4e8e\u90a3\u4e9b\u671f\u8d27\u7684 Rustwarnings \u6ca1\u6709\u88ab\u8c03\u67e5\u53ea\u662f\u4e3a\u4e86\u8bc1\u660e\u4e00\u4e2a\u89c2\u70b9\uff0c\u6211\u660e\u767d\u4e86\uff0c\u6211\u660e\u767d\u4e86\uff0c\u73b0\u5728\u53bb\u4fee\u7406\u5b83\u3002 $cargo run \u7f16\u8bd1 waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) \u5728 3.17 \u79d2\u5185\u5b8c\u6210 dev [unoptimized + debuginfo] \u76ee\u6807\u8fd0\u884c `target/debug/waytoodeep`Jul 25 17:27:29.768 INFO waytoodeep\uff1a\u60a8\u597d\uff0c\u6765\u81ea\u6211\u4eec\u4e3a\u81ea\u5df1\u5236\u4f5c\u7684\u8212\u9002\u5de2\u7a74 7 \u6708 25 \u65e5 17:27:29.891 \u4fe1\u606f waytoodeep\uff1a\u6536\u5230\u56de\u590d\uff01 url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&quot;text/html; charset=utf-8&quot;)Jul 25 17:27:29.974 INFO waytoodeep\uff1a\u5f97\u5230\u56de\u590d\uff01 url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&quot;text/html; charset=utf-8&quot;) // \u5728 `src/dumb.rs` \u4e2d\u4f7f\u7528std ::{ future ::Future, pin ::Pin, task ::{Context, Poll},} ;\u4f7f\u7528\u8ffd\u8e2a::\u4fe1\u606f\uff1b pub struct DumbFuture {} impl Future for DumbFuture { type Output = ( ) ; fn poll ( self: Pin &lt; &amp; mut Self &gt;, _cx: &amp; mut Context &lt; &#39; _ &gt; ) -&gt; Poll &lt;Self :: Output &gt; { info ! (\u201c\u4f60\u597d\u6765\u81ea\u611a\u8822\u7684\u672a\u6765\uff01\u201d); Poll ::Ready ( ( ) ) }} // \u56de\u5230`src/main.rs` # [tokio ::main ]async fn main ( ) -&gt; Result &lt; ( ), Report &gt; { setup ( )? ;\u8ba9 fut = \u54d1 :: DumbFuture {} ; Ok ( ( ) )} $cargo run \u7f16\u8bd1 waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)warning: \u672a\u4f7f\u7528\u7684\u53d8\u91cf\uff1a`fut` --&gt; src/main.rs:14:9 |14 | let fut = \u7b28\u86cb::DumbFuture {}; | ^^^ \u5e2e\u52a9\uff1a\u5982\u679c\u8fd9\u662f\u6545\u610f\u7684\uff0c\u8bf7\u5728\u5176\u524d\u9762\u52a0\u4e0a\u4e0b\u5212\u7ebf\uff1a`_fut` | = \u6ce8\u610f\uff1a`#[warn(unused_variables)]` \u9ed8\u8ba4\u5f00\u542f\u8b66\u544a\uff1a\u53d1\u51fa 1 \u4e2a\u8b66\u544a 2.11 \u79d2\u5185\u5b8c\u6210\u7684\u5f00\u53d1 [\u672a\u4f18\u5316 + \u8c03\u8bd5\u4fe1\u606f] \u76ee\u6807\u6b63\u5728\u8fd0\u884c `target/debug/waytoodeep`\n\u5982\u679c\u6211\u4eec .await \u5b83... \u90a3\u4e48\u6211\u4eec\u8981\u6c42\u8fd0\u884c\u65f6\u8fd0\u884c\u5b83\u7684\u4e8b\u4ef6\u5faa\u73af\u76f4\u5230\u8f6e\u8be2\u672a\u6765\u5e76\u4e14\u5b83\u6700\u7ec8\u8fd4\u56de Poll::Ready\uff0c\u6211\u4eec\u7684\u7acb\u5373\u6267\u884c\uff1a# [tokio ::main ]async fn main ( ) -&gt; \u7ed3\u679c &lt; ( ), Report &gt; { setup ( )? ;\u4fe1\u606f\uff01 (\u201c\u6784\u5efa\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765\u2026\u2026\u201d);\u8ba9 fut = \u54d1 :: DumbFuture {} ;\u4fe1\u606f\uff01 (\u201c\u7b49\u5f85\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765\u2026\u2026\u201d);\u672a\u6765 .await ;\u4fe1\u606f\uff01 \uff08\u201c\u5b8c\u6210\u7b49\u5f85\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765\u201d\uff09\uff1b Ok ( ( ) )} $cargo run \u7f16\u8bd1 waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) \u5728 2.34 \u79d2\u5185\u5b8c\u6210 dev [unoptimized + debuginfo] target(s) Running `target/debug/waytoodeep`Jul 25 17: 37:09.261 INFO waytoodeep\uff1a\u5efa\u7acb\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765...... 7 \u6708 25 \u65e5 17:37:09.261 INFO waytoodeep\uff1a\u7b49\u5f85\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765...... 7 \u6708 25 \u65e5 17:37:09.261 INFO waytoodeep::dumb\uff1a\u6765\u81ea\u611a\u8822\u7684\u672a\u6765\u4f60\u597d\uff01 25 17:37:09.262 INFO waytoodeep\uff1a\u5b8c\u6210\u7b49\u5f85\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765 \u8fd9\u4e0e ECMAScript \u627f\u8bfa\u6709\u70b9\u4e0d\u540c\uff0c\u5b83\u53ef\u4ee5\u505a\u4e00\u4e9b\u5de5\u4f5c\uff0c\u5373\u4f7f\u4ed6\u4eec\u6839\u672c\u6ca1\u6709\u7b49\u5f85\u3002\u4f46\u662f\u4e0d\uff0cRust \u671f\u8d27\u53ea\u662f\u65e0\u804a\u7684\u72b6\u6001\u673a\uff0c\u5982\u679c\u4f60\u6545\u610f\u5236\u9020\u9ebb\u70e6\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u673a\u5668\uff1a // \u5728 `src/dumb.rs` impl Future for DumbFuture { type Output = ( ) ; fn poll ( self: Pin &lt; &amp; mut Self &gt;, _cx: &amp; mut Context &lt; &#39; _ &gt; ) -&gt; Poll &lt;Self :: Output &gt; { panic ! \uff08\u201c\u54e6\u4e0d\u201d\uff09\uff1b }} $ RUST_BACKTRACE=1 cargo run \u7f16\u8bd1waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) 2.28s \u5185\u5b8c\u6210 dev [unoptimized + debuginfo] target(s) Running `target/debug/waytoodeep`Jul 25 17:41 :18.956 INFO waytoodeep: \u6784\u5efa\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765... 7 \u6708 25 \u65e5 17:41:18.956 INFO waytoodeep: \u7b49\u5f85\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765...\u5e94\u7528\u7a0b\u5e8f\u60ca\u614c\u5931\u63aa\uff08\u5d29\u6e83\uff09\u3002\u6d88\u606f\uff1a\u54e6\uff0c\u54ce\u5440 noLocation: src/dumb.rs:14 \u2501 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u22ee\u9690\u85cf6\u5e27\u22ee 7: &lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&gt;::poll: :h4a44780628f4c5f0 \u5728 /home/amos/ftl/waytoodeep/src/dumb.rs:14 8:waytoodeep::main::{{closure}}::h36de5a1f1f2a5c5b \u5728 /home/amos/ftl/waytoodeep/src/main.rs :17 9: &lt;core::future::from_generator::GenFuture&lt;T&gt; \u4f5c\u4e3a core::future::future::Future&gt;::poll::h20a96e082c7a581e \u5728 /home/amos/.rustup/toolchains/stable-x86_64 -unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:80 10: tokio::park::thread::CachedParkThread::block_on::{{\u5173\u95ed}}::hdf98cb3c7fdf3de4 \u5728/home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263 11\uff1atokio::coop::with_budget\uff1a :{{closure}}::h6a86a24a246e220f \u5728 /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106 12: std::thread::local ::LocalKey&lt;T&gt;::try_with::h2ce0ac27c85965b6 \u5728 /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local .rs:376 13: std::thread::local::LocalKey&lt;T&gt;::with::hc449f38c9f65fb53 \u5728 /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/ src/rust/library/std/src/thread/local.rs:352 14: tokio::coop::with_budget::h5db157bd1e95e0e8 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio- 1.9.0/src/coop.rs:99 15\uff1atokio::coop::budget::h7b57383f1255ac24 \u5728/home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/ coop.rs:76 16: tokio::park::thread::CachedParkThread::block_on::hece399485213b91c \u5728 /home/amos /.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263 17: tokio::runtime::enter::Enter::block_on::h89e9882e539e82d3 at /home /amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/enter.rs:151 18: tokio::runtime::thread_pool::ThreadPool::block_on::h1a0186470c00ba70 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/thread_pool/mod.rs:71 19: tokio::runtime::Runtime::block_on::h7c21d6989b86d606\u5728 /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/mod.rs:452 20\uff1awaytoodeep::main::hb4dd5ffd46a5c032 \u5728 /home/amos/ftl /waytoodeep/src/main.rs:20 21: core::ops::function::FnOnce::call_once::hc1fcc87431f77d25 at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib /rustlib/src/rust/library/core/src/ops/function.rs:227 \u22ee 11 \u5e27\u9690\u85cf \u22ee \u4f7f\u7528 COLORBT_SHOW_HIDDEN=1 \u73af\u5883\u53d8\u91cf\u8fd0\u884c\u4ee5\u7981\u7528\u5e27\u8fc7\u6ee4\u3002\u4f7f\u7528 RUST_BACKTRACE=full \u8fd0\u884c\u4ee5\u5305\u542b\u6e90\u4ee3\u7801\u7247\u6bb5\u5ba0\u7269\u3002\n\u8fd9\u5bf9\u989c\u8272\u66f4\u597d\uff0c\u6240\u4ee5\u6211\u5e0c\u671b\u4f60\u5728\u5bb6\u91cc\u8ddf\u7740\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c 20 \u5e27\u770b\u5230\u6211\u4eec\u5b9e\u9645\u7684\u4e3b\u51fd\u6570\uff0c\u7136\u540e\u5411\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Runtime::block_on\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u6c60\uff0c\u4e00\u4e9b\u505c\u653e\u7684\u7ebf\u7a0b\uff0c\u7ebf\u7a0b-localstuff\uff08\u53e6\u4e00\u4e2a TLS\uff09\uff0c\u4e00\u4e2a\u751f\u6210\u7684 future\uff08\u7b2c 9 \u5e27\u548c\u7b2c 8 \u5e27\uff0c\u57fa\u672c\u4e0a\u5c31\u662f\u6211\u4eec\u7684 async fn main \u6700\u7ec8\u7684\u7ed3\u679c\uff09\uff0c\u6700\u540e\u662f\u6211\u4eec\u7684 DumbFuture \u7684 pollmethod\uff08\u7b2c 7 \u5e27\uff09\u3002\u4f46\u662f\u8bf7\u7ad9\u51fa\u6765\uff0c\u4eb2\u7231\u7684\u89c2\u4f17\uff0c\u5e76\u7528\u4f60\u7684\u624b\u81c2\u7ed5\u8fc7\u8fd9\u4e2a\u88c5\u7f6e\uff0c\u4ee5\u786e\u4fdd\u6ca1\u6709\u8be1\u8ba1\uff0c\u6ca1\u6709\u9690\u85cf\u7684\u7535\u7ebf\uff0c\u4e0d\u2026\u2026\u6211\u8981\u8bf4\u7684\u662f\u5f02\u6b65\u5806\u6808\u8ddf\u8e2a\u6ca1\u6709\u201c\u7279\u6b8a\u5904\u7406\u201d\u3002\u5728\u8fd9\u91cc\uff0c\u5f53\u7136\uff0c\u6211\u4eec\u5f88\u6050\u614c\uff0c\u8fd9\u53ea\u662f Rust \u7684\u4e8b\u60c5\uff0c\u64cd\u4f5c\u7cfb\u7edf\u751a\u81f3\u4ece\u6765\u4e0d\u77e5\u9053\u51e0\u4e4e\u907f\u514d\u4e86\u4e00\u573a\u707e\u96be\u3002 DumbFuture \u7684 impl Future { type Output = ( ) ; fn poll ( self: Pin &lt; &amp; mut Self &gt;, _cx: &amp; mut Context &lt; &#39; _ &gt; ) -&gt; Poll &lt;Self :: Output &gt; { unsafe { * ( 0xF00D as * mut u64 ) = 0x0 ;\u65e0\u6cd5\u5230\u8fbe\uff01 ( ) ; // \u5c0f\u6307\u627f\u8bfa }} $ RUST_BACKTRACE=1 cargo run \u7f16\u8bd1 waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) \u5728 2.18 \u79d2\u5185\u5b8c\u6210 dev [unoptimized + debuginfo] target(s) Running `target/debug/waytoodeep`Jul 25 17:46:53.926 INFO waytoodeep\uff1a\u6784\u5efa\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765\u2026\u20267 \u6708 25 \u65e5 17:46:53.926 INFO waytoodeep\uff1a\u7b49\u5f85\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765\u2026\u2026zsh\uff1a\u5206\u6bb5\u9519\u8bef\uff08\u6838\u5fc3\u8f6c\u50a8\uff09 RUST_BACKTRACE=1 \u8d27\u7269\u8fd0\u884c $cargo build &amp;&amp; gdb --quiet --args ./target/debug/waytoodeep \u5728 0.04s \u4e2d\u5b8c\u6210 dev [unoptimized + debuginfo] \u76ee\u6807\u4ece ./target/debug/waytoodeep \u8bfb\u53d6\u7b26\u53f7...\u8b66\u544a\uff1a\u5728\u504f\u79fb\u91cf 0 \u5904\u7f3a\u5c11\u81ea\u52a8\u52a0\u8f7d\u811a\u672c\u5728 .debug_gdb_scriptsof \u6587\u4ef6 /home/amos/ftl/waytoodeep/target/debug/waytoodeep \u90e8\u5206\u4e2d\u3002\u4f7f\u7528 `info auto-load python-scripts [REGEXP]&#39; \u5217\u51fa\u5b83\u4eec\u3002(gdb) rStarting program: /home/amos/ftl/ waytoodeep/target/debug/waytoodeep [\u542f\u7528\u4f7f\u7528 libthread_db \u7684\u7ebf\u7a0b\u8c03\u8bd5]\u4f7f\u7528\u4e3b\u673a libthread_db \u5e93\u201c/lib/x86_64-linux-gnu/libthread_db.so.1\u201d\u3002[\u65b0\u7ebf\u7a0b 0x7ffff7c28700 (LWP 129418)][\u65b0\u7ebf\u7a0b 0x7f fff7a27700\uff08LWP 129419\uff09] [\u65b0\u4e3b\u98980x7ffff7826700\uff08LWP 129420\uff09] [\u65b0\u4e3b\u98980x7ffff7625700\uff08LWP 129421\uff09] [\u65b0\u4e3b\u98980x7ffff7424700\uff08LWP 129422\uff09] [\u65b0\u4e3b\u98980x7ffff7223700\uff08LWP 129423\uff09] [\u65b0\u4e3b\u98980x7ffff7022700\uff08LWP 129424\uff09 ] [\u65b0\u4e3b\u98980x7ffff6e1e700\uff08LWP 129425\uff09] [\u65b0\u4e3b\u98980x7ffff6c1a700\uff08LWP 129426\uff09] [\u65b0\u4e3b\u98980x7ffff6a16700\uff08LWP 129427\uff09] [\u65b0\u4e3b\u98980x7ffff6812700\uff08LWP 129428\uff09] [\u65b0\u4e3b\u98980x7ffff660e700\uff08LWP 129429\uff09] [\u65b0\u4e3b\u98980x7ffff640a700 (LWP 129430)][\u65b0\u7ebf\u7a0b 0x7ffff6206700 (LWP 129431)][\u65b0\u7ebf\u7a0b 0x7ffff6002700 (LWP 129432)]7 \u6708 25 \u65e5 17:47:13.278 INFO waytoodeep...J17todup:J17todeep57137 \u6784\u5efa\u90a3\u4e2a\u7b49\u5f85\u90a3\u4e2a\u611a\u8822\u7684\u672a\u6765...\u7ebf\u7a0b 1\u201cwaytoodeep\u201d\u6536\u5230\u4fe1\u53f7 SIGSEGV\uff0c\u5206\u6bb5\u9519\u8bef\u3002&lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&gt;::poll (self=..., _cx =0x7fffffffd690) at src/dumb.rs:1515 *(0xF00D as *mut u64) = 0x0;(gdb) bt#0 &lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&gt;::\u6c11\u610f\u8c03\u67e5 (self=..., _cx=0x7fffffffd690) a t src/dumb.rs:15#1 0x0000555555ab3a3 in waytoodeep::main::{{closure}} () at src/main.rs:17#2 0x00005555555adb29 in &lt;core::future::from_generator::GenFuture&lt;T &gt; \u4f5c\u4e3a core::future::future::Future&gt;::poll (self=..., cx=0x7fffffffd690) \u5728 /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/ rustlib/src/rust/library/core/src/future/mod.rs:80#3 0x00005555555adaa0 in tokio::park::thread::CachedParkThread::block_on::{{closure}} () at /home/amos /.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263#4 0x00005555555b1742 in tokio::coop::with_budget::{{closure}}\uff08\u5355\u5143\u683c= 0x7ffff7c2c412) \u5728 /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106#5 0x00005555555a9f58 \u5728 std::&lt;thread::Tlocal \u4e2d&gt;::try_with (self=0x555555925fc0, f=...) \u5728 /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/\u7ebf\u7a0b/local.rs:376#6 0x00005555555a9e3d in std::thread::local::LocalKey&lt;T&gt;::with (self=0x55555 5925fc0, f=...) \u5728 /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:352 #7 0x00005555555ad7c8 in tokio::coop::with_budget (budget=..., f=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src /coop.rs:99#8 tokio::coop::budget (f=...) \u5728 /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop .rs:76#9 tokio::park::thread::CachedParkThread::block_on (self=0x7fffff ......", "note_en": "So! Rust futures! Easy peasy lemon squeezy. Until it&#39;s not. So let&#39;s do the easything, and then instead of waiting for the hard thing to  sneak up on us, we&#39;llgo for it intentionally.\n     We install  cargo-edit in case we don&#39;t have it yet, so we can just  cargo addlater:\n $ cargo install cargo-edit Updating crates.io index Downloaded cargo-edit v0.7.0 Downloaded 1 crate (57.6 KB) in 0.47s Ignored package `cargo-edit v0.7.0` is already installed, use --force to override\n  Yeah, because it&#39;s  really convenient. Readers just get confused becausesubcommands like  cargo new,  cargo build,  cargo test,  cargo run etc.are built into cargo, but  cargo add isn&#39;t.\n Ah right! In fact I see there&#39;s a bunch of these, like  cargo-hack, cargo-udeps,  cargo-expand...  the list goes on.\n Then we pick an async runtime, because those futures won&#39;t pollthemselves... and we&#39;ll pick tokio for no reason other than: that&#39;s what I&#39;vebeen using a bunch these past few months.\n $ cargo add tokio@1.9.0 --features full Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index Adding tokio v1.9.0 to dependencies with features: [&#34;full&#34;]\n Then we change up our main so it uses a default tokio executor ( cargo newgenerated one for us, but it&#39;s not adequate here):\n // in `src/main.rs` # [tokio ::main ]async  fn  main ( ) {  println ! ( &#34;Hello from a (so far completely unnecessary) async runtime&#34; ) ;}\n $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.01s Running `target/debug/waytoodeep`Hello from a (so far completely unnecessary) async runtime\n  But let&#39;s add some other nice things I just like to have in my projects.\n First, for error handling - we&#39;re writing an app, we&#39;re going to get a bunch ofdifferent types from different libraries, it&#39;d be neat if we could have one typeto unify them all.\n    Now we need to install  color-eyre as the default panic handler, and I snuck insome environment variable modification so we get backtraces by default.\n use color_eyre ::Report ; # [tokio ::main ]async  fn  main ( ) -&gt;  Result &lt; ( ),  Report &gt; {  setup ( )? ;  println ! ( &#34;Hello from a (so far completely unnecessary) async runtime&#34; ) ; Ok ( ( ) )} fn  setup ( ) -&gt;  Result &lt; ( ),  Report &gt; {  if std ::env :: var ( &#34;RUST_LIB_BACKTRACE&#34; ) . is_err ( ) { std ::env :: set_var ( &#34;RUST_LIB_BACKTRACE&#34;,  &#34;1&#34; ) } color_eyre :: install ( )? ; Ok ( ( ) )}\n $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.02s Running `target/debug/waytoodeep`Hello from a (so far completely unnecessary) async runtime\n Okay good! Now if we have an error from somewhere, we&#39;ll see the full stacktrace, like so:\n           And finally, because I like my logs to be structured, let&#39;s add tracing and to print them with nice colors inthe terminal, let&#39;s add tracing-subscriber.\n $ cargo add tracing@0.1.26 tracing-subscriber@0.2.19 Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index Adding tracing v0.1.26 to dependencies Adding tracing-subscriber v0.2.19 to dependencies\n We already have a  setup function so we&#39;ll just install  tracing-subscriber inthere.. and we&#39;ll change that  println! to an  info!. Also, again, someenvironment variable manipulation so that if nothing is set, we default to the info log level for all crates.\n use color_eyre ::Report ; use tracing ::info ; # [tokio ::main ]async  fn  main ( ) -&gt;  Result &lt; ( ),  Report &gt; {  setup ( )? ;  info ! ( &#34;Hello from a comfy nest we&#39;ve made for ourselves&#34; ) ; Ok ( ( ) )} fn  setup ( ) -&gt;  Result &lt; ( ),  Report &gt; {  if std ::env :: var ( &#34;RUST_LIB_BACKTRACE&#34; ) . is_err ( ) { std ::env :: set_var ( &#34;RUST_LIB_BACKTRACE&#34;,  &#34;1&#34; ) } color_eyre :: install ( )? ;  if std ::env :: var ( &#34;RUST_LOG&#34; ) . is_err ( ) { std ::env :: set_var ( &#34;RUST_LOG&#34;,  &#34;info&#34; ) } tracing_subscriber ::fmt :: fmt ( )  . with_env_filter ( EnvFilter :: from_default_env ( ) )  . init ( ) ; Ok ( ( ) )}\n $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.02s Running `target/debug/waytoodeep`Jul 25 17:03:46.993 INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselves\n   When deciding which article to read during their coffee break, people usuallyopen several websites at the exact same moment, and read whichever article loadsfirst.\n And that&#39;s a fact. You can quote me on that because, well, who&#39;s going to go andverify that? That sounds like a lot of work. Just trust me on this.\n   You guessed it! Let&#39;s bring in  reqwest -although I don&#39;t  love its API, it&#39;ll work nicely with the rest of our stackhere.\n  $ cargo add reqwest@0.11.4 --no-default-features --features rustls-tls Updating &#39;https://github.com/rust-lang/crates.io-index&#39; index Adding reqwest v0.11.4 to dependencies with features: [&#34;rustls-tls&#34;]\n  # [tokio ::main ]async  fn  main ( ) -&gt;  Result &lt; ( ),  Report &gt; {  setup ( )? ;  info ! ( &#34;Hello from a comfy nest we&#39;ve made for ourselves&#34; ) ;  let client =  Client :: new ( ) ;  let url =  &#34;https://fasterthanli.me&#34; ;  // this will turn non-200 HTTP status codes into rust errors,  // so the first `?` propagates &#34;we had a connection problem&#34; and  // the second `?` propagates &#34;we had a chat with the server and they  // were not pleased&#34;  let res = client . get (url ) . send ( ) .await? . error_for_status ( )? ;  info ! (%url, content_type = ?res.headers ( ).get ( &#34;content-type&#34; ),  &#34;Got a response!&#34; ) ; Ok ( ( ) )}\n  $ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 3.05s Running `target/debug/waytoodeep`Jul 25 17:12:32.276 INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselvesJul 25 17:12:32.409 INFO waytoodeep: Got a response! url=https://fasterthanli.me content_type=Some(&#34;text/html; charset=utf-8&#34;)\n And this is what I mean by structured logging. Well, part of it anyway. In thatline here:\n  We have a message,  Got a response!, then a tag named  url whose value is the Display-formattingof the binding named  url, and a tag named  content_type, whose value is the Debug-formatting ofthe expression  res.headers().get(&#34;content-type&#34;).\n Easy peasy!  name = %value for  Display,  name = ?value, for  Debug, and ifboth  name and  value have the same... name, we can use the short forms %value and  ?value.\n Of course there&#39;s also spans, which are great, and to me the whole point of thisis you can then send them to APM platforms like Datadog or Honeycomb or whoever,but this isn&#39;t an article about tracing.\n Just to illustrate though, if we install a JSON tracing subscriber instead, thisis what we get:\n $ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 3.09s Running `target/debug/waytoodeep`{&#34;timestamp&#34;:&#34;Jul 25 17:17:21.531&#34;,&#34;level&#34;:&#34;INFO&#34;,&#34;fields&#34;:{&#34;message&#34;:&#34;Hello from a comfy nest we&#39;ve made for ourselves&#34;},&#34;target&#34;:&#34;waytoodeep&#34;}{&#34;timestamp&#34;:&#34;Jul 25 17:17:21.709&#34;,&#34;level&#34;:&#34;INFO&#34;,&#34;fields&#34;:{&#34;message&#34;:&#34;Got a response!&#34;,&#34;url&#34;:&#34;https://fasterthanli.me&#34;,&#34;content_type&#34;:&#34;Some(\\&#34;text/html; charset=utf-8\\&#34;)&#34;},&#34;target&#34;:&#34;waytoodeep&#34;}\n        ...so that it&#39;s a fair comparison. Both these articles are hosted on my ownwebsite, and it&#39;s  definitely not a marketing scheme, instead it&#39;s so that thefetch time is comparable and there&#39;s a chance one will finish fetching beforethe other (and that will change randomly over time).\n   async  fn  fetch_thing ( client:  &amp; Client,  url:  &amp; str ) -&gt;  Result &lt; ( ),  Report &gt; {  let res = client . get (url ) . send ( ) .await? . error_for_status ( )? ;  info ! (%url, content_type = ?res.headers ( ).get ( &#34;content-type&#34; ),  &#34;Got a response!&#34; ) ; Ok ( ( ) )}\n  # [tokio ::main ]async  fn  main ( ) -&gt;  Result &lt; ( ),  Report &gt; {  setup ( )? ;  info ! ( &#34;Hello from a comfy nest we&#39;ve made for ourselves&#34; ) ;  let client =  Client :: new ( ) ;  fetch_thing ( &amp;client, URL_1 ) ;  fetch_thing ( &amp;client, URL_2 ) ; Ok ( ( ) )}\n  $ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)warning: unused implementer of `Future` that must be used --&gt; src/main.rs:15:5 |15 | fetch_thing(&amp;client, URL_1); | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ | = note: `#[warn(unused_must_use)]` on by default = note: futures do nothing unless you `.await` or poll themwarning: unused implementer of `Future` that must be used --&gt; src/main.rs:16:5 |16 | fetch_thing(&amp;client, URL_2); | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ | = note: futures do nothing unless you `.await` or poll themwarning: 2 warnings emitted Finished dev [unoptimized + debuginfo] target(s) in 3.01s Running `target/debug/waytoodeep`Jul 25 17:26:31.571 INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselves\n  long sigh amos ffs you ignored the yellow squigglies  and the very noisy Rustwarnings about those futures not being polled just to prove a point, I get itI get it now go fix it.\n   $ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 3.17s Running `target/debug/waytoodeep`Jul 25 17:27:29.768 INFO waytoodeep: Hello from a comfy nest we&#39;ve made for ourselvesJul 25 17:27:29.891 INFO waytoodeep: Got a response! url=https://fasterthanli.me/articles/whats-in-the-box content_type=Some(&#34;text/html; charset=utf-8&#34;)Jul 25 17:27:29.974 INFO waytoodeep: Got a response! url=https://fasterthanli.me/series/advent-of-code-2020/part-13 content_type=Some(&#34;text/html; charset=utf-8&#34;)\n    // in `src/dumb.rs` use std ::{ future ::Future, pin ::Pin, task ::{Context, Poll},} ; use tracing ::info ; pub  struct  DumbFuture {} impl  Future  for  DumbFuture {  type  Output =  ( ) ;  fn  poll ( self:  Pin &lt; &amp; mut  Self &gt;,  _cx:  &amp; mut  Context &lt; &#39; _ &gt; ) -&gt;  Poll &lt;Self :: Output &gt; {  info ! ( &#34;Hello from a dumb future!&#34; ) ;  Poll ::Ready ( ( ) ) }}\n // back in `src/main.rs` # [tokio ::main ]async  fn  main ( ) -&gt;  Result &lt; ( ),  Report &gt; {  setup ( )? ;  let fut = dumb :: DumbFuture {} ; Ok ( ( ) )}\n   $ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep)warning: unused variable: `fut` --&gt; src/main.rs:14:9 |14 | let fut = dumb::DumbFuture {}; | ^^^ help: if this is intentional, prefix it with an underscore: `_fut` | = note: `#[warn(unused_variables)]` on by defaultwarning: 1 warning emitted Finished dev [unoptimized + debuginfo] target(s) in 2.11s Running `target/debug/waytoodeep`\n  If we  .await it though... then we&#39;re asking the runtime to run its event loopuntil such time as the future is polled and it finally returns  Poll::Ready,which ours does immediately:\n # [tokio ::main ]async  fn  main ( ) -&gt;  Result &lt; ( ),  Report &gt; {  setup ( )? ;  info ! ( &#34;Building that dumb future...&#34; ) ;  let fut = dumb :: DumbFuture {} ;  info ! ( &#34;Awaiting that dumb future...&#34; ) ; fut .await ;  info ! ( &#34;Done awaiting that dumb future&#34; ) ; Ok ( ( ) )}\n $ cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 2.34s Running `target/debug/waytoodeep`Jul 25 17:37:09.261 INFO waytoodeep: Building that dumb future...Jul 25 17:37:09.261 INFO waytoodeep: Awaiting that dumb future...Jul 25 17:37:09.261 INFO waytoodeep::dumb: Hello from a dumb future!Jul 25 17:37:09.262 INFO waytoodeep: Done awaiting that dumb future\n And that&#39;s a bit different from, say, ECMAScript promises, which can do someamount of work even if they&#39;re not awaited at all.\n But nope, Rust futures are just dumb boring state machines, and you can see themachinery if you cause trouble on purpose:\n // in `src/dumb.rs` impl  Future  for  DumbFuture {  type  Output =  ( ) ;  fn  poll ( self:  Pin &lt; &amp; mut  Self &gt;,  _cx:  &amp; mut  Context &lt; &#39; _ &gt; ) -&gt;  Poll &lt;Self :: Output &gt; {  panic ! ( &#34;Oh heck no&#34; ) ; }}\n $ RUST_BACKTRACE=1 cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 2.28s Running `target/debug/waytoodeep`Jul 25 17:41:18.956 INFO waytoodeep: Building that dumb future...Jul 25 17:41:18.956 INFO waytoodeep: Awaiting that dumb future...The application panicked (crashed).Message: Oh heck noLocation: src/dumb.rs:14 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u22ee 6 frames hidden \u22ee 7: &lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&gt;::poll::h4a44780628f4c5f0 at /home/amos/ftl/waytoodeep/src/dumb.rs:14 8: waytoodeep::main::{{closure}}::h36de5a1f1f2a5c5b at /home/amos/ftl/waytoodeep/src/main.rs:17 9: &lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll::h20a96e082c7a581e at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:80 10: tokio::park::thread::CachedParkThread::block_on::{{closure}}::hdf98cb3c7fdf3de4 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263 11: tokio::coop::with_budget::{{closure}}::h6a86a24a246e220f at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106 12: std::thread::local::LocalKey&lt;T&gt;::try_with::h2ce0ac27c85965b6 at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:376 13: std::thread::local::LocalKey&lt;T&gt;::with::hc449f38c9f65fb53 at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:352 14: tokio::coop::with_budget::h5db157bd1e95e0e8 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:99 15: tokio::coop::budget::h7b57383f1255ac24 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:76 16: tokio::park::thread::CachedParkThread::block_on::hece399485213b91c at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263 17: tokio::runtime::enter::Enter::block_on::h89e9882e539e82d3 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/enter.rs:151 18: tokio::runtime::thread_pool::ThreadPool::block_on::h1a0186470c00ba70 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/thread_pool/mod.rs:71 19: tokio::runtime::Runtime::block_on::h7c21d6989b86d606 at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/runtime/mod.rs:452 20: waytoodeep::main::hb4dd5ffd46a5c032 at /home/amos/ftl/waytoodeep/src/main.rs:20 21: core::ops::function::FnOnce::call_once::hc1fcc87431f77d25 at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:227 \u22ee 11 frames hidden \u22ee Run with COLORBT_SHOW_HIDDEN=1 environment variable to disable frame filtering.Run with RUST_BACKTRACE=full to include source snippets.\n This is much nicer with colors so I hope you&#39;re following along at home, but wecan see our actual main function at frame 20, then going up, we can see Runtime::block_on, a thread pool thingy, some parked threads, thread-localstuff (the  other TLS), a  generated future (frame 9 and 8, which is basicallywhat our  async fn main ended up being), and finally our  DumbFuture&#39;s pollmethod (frame 7).\n  But please step up, dear spectator, and move your arms around the contraption tomake sure that there&#39;s not trickery going on, no hidden wires, no..\n  ...there&#39;s no &#34;special handling&#34; for async stacktraces is what I&#39;m saying. Here,sure, we&#39;re panicking, that&#39;s a Rust-only thing, the OS never even knows wenearly avoided a catastrophe.\n  impl  Future  for  DumbFuture {  type  Output =  ( ) ;  fn  poll ( self:  Pin &lt; &amp; mut  Self &gt;,  _cx:  &amp; mut  Context &lt; &#39; _ &gt; ) -&gt;  Poll &lt;Self :: Output &gt; {  unsafe {  * ( 0xF00D  as  * mut  u64 ) =  0x0 ; }  unreachable ! ( ) ;  // pinky promise }}\n  $ RUST_BACKTRACE=1 cargo run Compiling waytoodeep v0.1.0 (/home/amos/ftl/waytoodeep) Finished dev [unoptimized + debuginfo] target(s) in 2.18s Running `target/debug/waytoodeep`Jul 25 17:46:53.926 INFO waytoodeep: Building that dumb future...Jul 25 17:46:53.926 INFO waytoodeep: Awaiting that dumb future...zsh: segmentation fault (core dumped) RUST_BACKTRACE=1 cargo run\n  $ cargo build &amp;&amp; gdb --quiet --args ./target/debug/waytoodeep Finished dev [unoptimized + debuginfo] target(s) in 0.04sReading symbols from ./target/debug/waytoodeep...warning: Missing auto-load script at offset 0 in section .debug_gdb_scriptsof file /home/amos/ftl/waytoodeep/target/debug/waytoodeep.Use `info auto-load python-scripts [REGEXP]&#39; to list them.(gdb) rStarting program: /home/amos/ftl/waytoodeep/target/debug/waytoodeep [Thread debugging using libthread_db enabled]Using host libthread_db library &#34;/lib/x86_64-linux-gnu/libthread_db.so.1&#34;.[New Thread 0x7ffff7c28700 (LWP 129418)][New Thread 0x7ffff7a27700 (LWP 129419)][New Thread 0x7ffff7826700 (LWP 129420)][New Thread 0x7ffff7625700 (LWP 129421)][New Thread 0x7ffff7424700 (LWP 129422)][New Thread 0x7ffff7223700 (LWP 129423)][New Thread 0x7ffff7022700 (LWP 129424)][New Thread 0x7ffff6e1e700 (LWP 129425)][New Thread 0x7ffff6c1a700 (LWP 129426)][New Thread 0x7ffff6a16700 (LWP 129427)][New Thread 0x7ffff6812700 (LWP 129428)][New Thread 0x7ffff660e700 (LWP 129429)][New Thread 0x7ffff640a700 (LWP 129430)][New Thread 0x7ffff6206700 (LWP 129431)][New Thread 0x7ffff6002700 (LWP 129432)]Jul 25 17:47:13.278 INFO waytoodeep: Building that dumb future...Jul 25 17:47:13.279 INFO waytoodeep: Awaiting that dumb future...Thread 1 &#34;waytoodeep&#34; received signal SIGSEGV, Segmentation fault.&lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&gt;::poll (self=..., _cx=0x7fffffffd690) at src/dumb.rs:1515 *(0xF00D as *mut u64) = 0x0;(gdb) bt#0 &lt;waytoodeep::dumb::DumbFuture as core::future::future::Future&gt;::poll (self=..., _cx=0x7fffffffd690) at src/dumb.rs:15#1 0x00005555555ab3a3 in waytoodeep::main::{{closure}} () at src/main.rs:17#2 0x00005555555adb29 in &lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (self=..., cx=0x7fffffffd690) at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/mod.rs:80#3 0x00005555555adaa0 in tokio::park::thread::CachedParkThread::block_on::{{closure}} () at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/park/thread.rs:263#4 0x00005555555b1742 in tokio::coop::with_budget::{{closure}} (cell=0x7ffff7c2c412) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:106#5 0x00005555555a9f58 in std::thread::local::LocalKey&lt;T&gt;::try_with (self=0x555555925fc0, f=...) at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:376#6 0x00005555555a9e3d in std::thread::local::LocalKey&lt;T&gt;::with (self=0x555555925fc0, f=...) at /home/amos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:352#7 0x00005555555ad7c8 in tokio::coop::with_budget (budget=..., f=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:99#8 tokio::coop::budget (f=...) at /home/amos/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.9.0/src/coop.rs:76#9 tokio::park::thread::CachedParkThread::block_on (self=0x7fffff\n......", "posttime": "2021-07-26 07:28:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u4e86\u89e3,waytoodeep", "title": "\u901a\u8fc7\u6df1\u5165\u4e86\u89e3 Rust \u7684\u672a\u6765", "title_en": "Understanding Rust futures by going way too deep", "transed": 1, "url": "https://fasterthanli.me/articles/understanding-rust-futures-by-going-way-too-deep", "via": "", "real_tags": ["rust", "\u4e86\u89e3"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069732, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u662f\u5f00\u53d1\u4eba\u5458\uff0c\u5f88\u53ef\u80fd\u60a8\u4f1a\u5904\u7406\u79c1\u6709\u4ee3\u7801\u6216\u751f\u4ea7\u673a\u5bc6\u3002\u5982\u679c\u6709\u4eba\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u5185\u5bb9\uff0c\u60a8\u53ef\u80fd\u4f1a\u4e0e\u60a8\u7684\u8001\u677f\u548c\u5ba2\u6237\u53d1\u751f\u4e25\u91cd\u95ee\u9898\u3002\u6211\u5c06\u4e0e\u60a8\u5206\u4eab\u4e00\u4e9b\u6709\u5173\u5982\u4f55\u4fdd\u62a4\u60a8\u7684\u5f00\u53d1\u7684\u6280\u5de7\u73af\u5883\u4ece\u60a8\u7684\u8ba1\u7b97\u673a\u5230\u60a8\u7684\u7ec8\u7aef\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4f1a\u63a8\u8350\u4e00\u4e9b\u5de5\u5177\uff0c\u5bf9\u4e8e\u5b83\u4eec\u7684\u4f7f\u7528\uff0c\u8bf7\u67e5\u770b\u5b83\u4eec\u5404\u81ea\u7684\u6587\u6863\uff0c\u6216\u8005\u4e3a\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u641c\u7d22\u66ff\u4ee3\u54c1\u3002\u5bf9\u4e8e\u4e00\u4e9b\u5de5\u5177\uff0c\u6211\u53ef\u4ee5\u5728 https://github.com/stsewd/dotfiles \u4e0a\u627e\u5230\u6211\u7684\u914d\u7f6e\u3002\u4f7f\u7528\u5f3a\u5bc6\u7801\u662f\u597d\u7684\uff0c\u4f46\u6bcf\u6b21\u767b\u5f55\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\u662f\u4e0d\u597d\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u7cfb\u7edf\u88ab\u653b\u7834\uff0c\u4f60\u6240\u6709\u7684\u5e10\u6237\u90fd\u53ef\u80fd\u88ab\u653b\u7834\u3002\u6700\u597d\u7684\u5bc6\u7801\u662f\u4f60\u4e0d\u77e5\u9053\u7684\u5bc6\u7801\uff0c\u5bc6\u7801\u7ba1\u7406\u5668\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\u60a8\u4e3a\u6bcf\u6b21\u767b\u5f55\u751f\u6210\u5f3a\u5927\u4e14\u552f\u4e00\u7684\u5bc6\u7801\u3002\u4f7f\u7528\u5bc6\u7801\u7ba1\u7406\u5668\u9700\u8981\u4f60\u6709\u4e00\u4e2a\u4e3b\u5bc6\u7801\uff0c\u4f60\u9700\u8981\u8bb0\u4f4f\u8fd9\u4e2a\u5bc6\u7801\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u9009\u62e9\u4e00\u4e2a\u5f3a\u5bc6\u7801\uff0c\u5e76\u4e14\u6bcf\u5e74\u5de6\u53f3\u8f6e\u6362\u4e00\u6b21\u5bc6\u7801\u3002\u6211\u63a8\u8350 Bitwarden \u4f5c\u4e3a\u5bc6\u7801\u7ba1\u7406\u5668\uff0c\u5b83\u662f\u5f00\u6e90\u7684\u3002\u514d\u8d39\u7248\u672c\u4e3a\u60a8\u63d0\u4f9b\u4e86\u8bb8\u591a\u5728\u5176\u4ed6\u670d\u52a1\u4e2d\u901a\u5e38\u9700\u8981\u9ad8\u7ea7\u5e10\u6237\u7684\u529f\u80fd\uff0c\u751a\u81f3\u9ad8\u7ea7\u7248\u672c\u4e5f\u5f88\u4fbf\u5b9c\u3002\u4f46\u5373\u4f7f\u4f7f\u7528\u5bc6\u7801\u7ba1\u7406\u5668\u8fd8\u4e0d\u8db3\u4ee5\u4fdd\u62a4\u60a8\u7684\u5e10\u6237\uff0c\u751f\u6210\u7684\u5bc6\u7801\u53ef\u80fd\u4f1a\u5728\u60a8\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u66b4\u9732\uff0c\u6216\u8005\u60a8\u7684\u4e3b\u5bc6\u7801\u53ef\u80fd\u4f1a\u88ab\u6cc4\u9732\u3002\u591a\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1 (MFA) \u6765\u6551\u63f4\uff01 MFA \u662f\u5173\u4e8e\u5728\u8eab\u4efd\u9a8c\u8bc1\u4e2d\u4f7f\u7528\u4e24\u4e2a\u6216\u591a\u4e2a\u8bc1\u636e\uff08\u56e0\u7d20\uff09\u4ee5\u80fd\u591f\u8bbf\u95ee\u7f51\u7ad9\u6216\u5e94\u7528\u7a0b\u5e8f 1.\u56e0\u7d20\u662f\uff1a\u60a8\u77e5\u9053\u7684\u4e1c\u897f\uff08\u4f8b\u5982\u5bc6\u7801\uff09\u3001\u60a8\u62e5\u6709\u7684\u4e1c\u897f\uff08\u4f8b\u5982\u7535\u8bdd\uff09\u4ee5\u53ca\u60a8\u6240\u62e5\u6709\u7684\u4e1c\u897f\u662f\uff08\u5c31\u50cf\u60a8\u7684\u6307\u7eb9\uff09\u3002 MFA \u7684\u4e00\u79cd\u5e38\u89c1\u65b9\u6cd5\u662f\u5c06\u5bc6\u7801\uff08\u60a8\u77e5\u9053\u7684\u4e1c\u897f\uff09\u4e0e\u60a8\u62e5\u6709\u7684\u4e1c\u897f\u76f8\u7ed3\u5408\uff0c\u4f8b\u5982\uff1a\n\u8fd9\u662f\u4f7f\u7528\u60a8\u7684\u7535\u8bdd\u53f7\u7801\u901a\u8fc7\u77ed\u4fe1\u63a5\u6536\u4ee3\u7801\u4ee5\u8fdb\u884c\u8eab\u4efd\u200b\u200b\u9a8c\u8bc1\u3002\u8bf7\u4e0d\u8981\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u653b\u51fb\u8005\u5f88\u5bb9\u6613\u52ab\u6301\u60a8\u7684\u7535\u8bdd\u53f7\u78012\uff0c\u5982\u679c\u60a8\u5728\u65c5\u884c\u4e2d\uff0c\u60a8\u5c06\u65e0\u6cd5\u6536\u5230\u4ee3\u7801\u3002\u8fd9\u662f\u5728\u60a8\u7684\u624b\u673a\u4e2d\u4f7f\u7528\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u4e3a\u6bcf\u6b21\u767b\u5f55\u751f\u6210\u4e00\u4e2a\u6709\u6548\u671f\u4e3a 30 \u79d2\u7684 OTP 3\u3002\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u662f\u4e00\u79cd\u6781\u597d\u7684 MFA \u65b9\u5f0f\uff0c\u60a8\u4e0d\u9700\u8981\u5728\u624b\u673a\u4e0a\u8fde\u63a5\u4e92\u8054\u7f51\u5373\u53ef\u8bbf\u95ee\u4ee4\u724c\u3002\u6211\u63a8\u8350\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f andOTP\uff0c\u5b83\u662f\u5f00\u6e90\u7684\uff0c\u5e76\u4e14\u5177\u6709\u591a\u79cd\u529f\u80fd\uff0c\u4f8b\u5982\u4f7f\u7528 PIN \u89e3\u9501\u4ee3\u7801\u4ee5\u53ca\u8fdb\u884c\u52a0\u5bc6\u7684\u79bb\u7ebf\u5907\u4efd\u3002\u5728\u9009\u62e9\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u4e0d\u8981\u4f7f\u7528\u90a3\u4e9b\u5c06\u4ee3\u7801\u540c\u6b65\u5230\u4e91\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u90a3\u6837\u4f1a\u7834\u574f\u60a8\uff08\u5e76\u4e14\u53ea\u6709\u60a8\uff09\u62e5\u6709\u7684\u4e1c\u897f\u7684\u89c4\u5219\u3002\u5b83\u4eec\u7c7b\u4f3c\u4e8e\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4eec\u53ef\u4ee5\u63d0\u4f9b OTP\uff0c\u4f46\u597d\u5904\u662f\u5b83\u4eec\u4e0d\u8fde\u63a5\u5230\u60a8\u7684\u624b\u673a\u3002\u6d41\u884c\u7684\u786c\u4ef6\u5bc6\u94a5\u662f YubiKey\u3002\u5982\u679c\u60a8\u51b3\u5b9a\u8d2d\u4e70\u4e00\u628a\uff0c\u8bf7\u4e70\u4e24\u628a\uff01\u7b2c\u4e8c\u628a\u94a5\u5319\u5c06\u4f5c\u4e3a\u60a8\u7684\u5907\u7528\u94a5\u5319\uff0c\u4ee5\u9632\u60a8\u4e22\u5931\u6216\u635f\u574f\u53e6\u4e00\u628a\u94a5\u5319\u3002\u5e76\u975e\u6240\u6709\u670d\u52a1\u90fd\u652f\u6301 MFA\uff0c\u4f46\u8bf7\u786e\u4fdd\u82b1\u4e00\u4e9b\u65f6\u95f4\u4e3a\u652f\u6301 MFA \u7684\u670d\u52a1\u8fdb\u884c\u8bbe\u7f6e\u3002\u5927\u591a\u6570\u670d\u52a1\u90fd\u4f1a\u4e3a\u60a8\u63d0\u4f9b\u6062\u590d\u4ee3\u7801\uff0c\u4ee5\u9632\u60a8\u65e0\u6cd5\u8bbf\u95ee MFA \u8bbe\u5907\uff0c\u5c06\u5b83\u4eec\u79bb\u7ebf\u4fdd\u5b58\u5e76\u4fdd\u5b58\u5728\u5b89\u5168\u4f4d\u7f6e\uff01\u5982\u679c\u6709\u4eba\u7a83\u53d6\u4e86\u60a8\u7684\u8ba1\u7b97\u673a\uff0c\u4ed6\u4eec\u65e0\u9700\u77e5\u9053\u60a8\u7684\u7528\u6237\u5bc6\u7801\u5373\u53ef\u8bbf\u95ee\u60a8\u7684\u6240\u6709\u6587\u4ef6\u3002\u4e3a\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u8bf7\u5728\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u4f7f\u7528\u5168\u76d8\u52a0\u5bc6\u3002\n\u5728 Linux \u7cfb\u7edf\u4e0a\uff0c\u8fd9\u901a\u5e38\u662f\u5b89\u88c5\u65f6\u7684\u4e00\u4e2a\u9009\u9879\uff0c\u60a8\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528 YubiKey \u6765\u4fdd\u62a4\u60a8\u7684\u78c1\u76d8\uff08\u60a8\u7684\u5bc6\u7801 + YubiKey \u4e2d\u7684\u9759\u6001\u5bc6\u7801\uff09\u3002\u5373\u4f7f\u60a8\u4f7f\u7528\u5168\u76d8\u52a0\u5bc6\uff0c\u5982\u679c\u6709\u4eba\u5728\u60a8\u767b\u5f55\u65f6\u7a83\u53d6\u60a8\u7684\u8ba1\u7b97\u673a\uff0c\u4ed6\u4eec\u5c06\u53ef\u4ee5\u8bbf\u95ee\u60a8\u7684\u6240\u6709\u6587\u4ef6\u548c\u6d3b\u52a8\u4f1a\u8bdd\u3002\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u64a4\u9500\u60a8\u7684\u6d3b\u52a8\u4f1a\u8bdd\uff0c\u4f46\u8fd9\u6837\u505a\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff0c\u5e76\u4e14\u65e0\u6cd5\u64a4\u9500\u5bf9\u60a8\u6587\u4ef6\u7684\u8bbf\u95ee\u6743\u9650\u3002\u9664\u4e86\u5168\u76d8\u52a0\u5bc6\u4e4b\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u52a0\u5bc6\u5355\u4e2a\u76ee\u5f55\uff0c\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u751f\u547d\u5468\u671f\u3002\u8fd9\u6837\u5373\u4f7f\u6709\u4eba\u53ef\u4ee5\u8bbf\u95ee\u60a8\u672a\u9501\u5b9a\u7684\u8ba1\u7b97\u673a\uff0c\u60a8\u7684\u6587\u4ef6\u4e5f\u5c06\u662f\u5b89\u5168\u7684\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u5f52\u6863\u5de5\u5177\u662f encFS\uff08\u68c0\u67e5 -i\u9009\u9879\uff09\u3002\u4e0e\u60a8\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf (VCS) \u63d0\u4f9b\u5546\u4e00\u8d77\u4f7f\u7528 SSH \u8eab\u4efd\u9a8c\u8bc1\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u4ee5\u907f\u514d\u6bcf\u6b21\u90fd\u8f93\u5165\u60a8\u7684\u5bc6\u7801\uff0c\u4f46\u8fd9\u4e3a\u4efb\u4f55\u53ef\u4ee5\u8bbf\u95ee\u60a8\u8ba1\u7b97\u673a\u7684\u4eba\u655e\u5f00\u4e86\u5927\u95e8\u3002\u4f7f\u7528\u5bc6\u7801\u4fdd\u62a4\u60a8\u7684\u79c1\u94a5\uff0c\u5e76\u4e3a\u60a8\u7684 SSH \u4ee3\u7406\u8bbe\u7f6e\u751f\u547d\u5468\u671f\uff08-t \u9009\u9879\uff0c\u8bf7\u53c2\u9605 man ssh-agent\uff09\uff0c\u8fd9\u6837\u60a8\u5c31\u9700\u8981\u6bcf\u9694 t \u5206\u949f/\u5c0f\u65f6\u91cd\u65b0\u8f93\u5165\u5bc6\u7801\u3002\u4e3a\u60a8\u7684\u4ee3\u7801\u4f7f\u7528\u50cf Git \u8fd9\u6837\u7684 VCS \u5f88\u68d2\uff08\u60a8\u7684\u4ee3\u7801\u786e\u5b9e\u5728 VCS \u4e0b\uff0c\u5bf9\u5417\uff1f\uff09\uff0c\u5b83\u5141\u8bb8\u60a8\u8ddf\u8e2a\u60a8\u7684\u66f4\u6539\u3001\u8fd8\u539f\u66f4\u6539\u7b49\u7b49\uff01\u4e86\u89e3\u8c01\u66f4\u6539\u4e86\u7279\u5b9a\u7684\u4ee3\u7801\u4e5f\u5f88\u6709\u7528\u4e00\u6bb5\u4ee3\u7801\u548c\u65f6\u95f4\uff0c\u8fd9\u5728\u5bf9\u4ee3\u7801\u5e93\u8fdb\u884c\u5ba1\u8ba1\u65f6\u975e\u5e38\u6709\u7528\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u4efb\u4f55\u4eba\u5728\u63d0\u4ea4\u66f4\u6539\u65f6\u90fd\u53ef\u4ee5\u8bf4\u662f\u60a8\uff0c\u4f8b\u5982 Git \u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u6765\u8bbe\u7f6e\u60a8\u7684\u59d3\u540d\u548c\u7535\u5b50\u90ae\u4ef6\uff0c\u60a8\u4e0d\u9700\u8981\u63d0\u4f9b\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9\u6765\u8bf4\u660e\u60a8\u662f\u90a3\u4e2a\u4eba\uff01\u8fd9\u610f\u5473\u7740\u60a8\u7684\u4efb\u4f55\u540c\u4e8b\u90fd\u53ef\u4ee5\u5192\u5145\u60a8\uff0c\u6216\u8005\u53ef\u4ee5\u8bbf\u95ee\u60a8\u7684 VCS \u63d0\u4f9b\u5546\u7684\u653b\u51fb\u8005\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\u3002\u60a8\u4e0d\u60f3\u4e3a\u81ea\u5df1\u6ca1\u6709\u8fdb\u884c\u7684\u66f4\u6539\u8d1f\u8d23\uff01\n\u5e78\u8fd0\u7684\u662f\uff0cGit \u5141\u8bb8\u60a8\u4f7f\u7528 GPG \u5bc6\u94a5\u7b7e\u7f72\u60a8\u7684\u63d0\u4ea4\u3002\u6709\u4eba\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u60a8\u7684\u7535\u5b50\u90ae\u4ef6\u8fdb\u884c\u63d0\u4ea4\uff0c\u4f46\u4ed6\u4eec\u5c06\u65e0\u6cd5\u4f7f\u7528\u60a8\u7684\u79c1\u4eba GPG \u5bc6\u94a5\u7b7e\u7f72\u8fd9\u4e9b\u63d0\u4ea4\u3002GitLab \u6709\u4e00\u4e2a\u5173\u4e8e\u5982\u4f55\u7b7e\u540d\u7684\u5f88\u597d\u7684\u6307\u5357\u60a8\u5bf9 GPG \u7684\u63d0\u4ea4 https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/\u3002\u4e0e SSH \u76f8\u540c\uff0c\u4f7f\u7528\u5bc6\u7801\u4fdd\u62a4\u60a8\u7684\u79c1\u4eba GPG \u5bc6\u94a5\uff0c\u5e76\u4e3a\u60a8\u7684 GPG \u4ee3\u7406\u8bbe\u7f6e\u751f\u547d\u5468\u671f\uff08default-cache-ttl \u548c max-cache-ttl \u9009\u9879\uff0c\u8bf7\u53c2\u9605 man gpg-agent\uff09\u3002\u7ec8\u7aef\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u670b\u53cb\uff0c\u4f7f\u7528 \u2191 \u2193 \u6d4f\u89c8\u5386\u53f2\u8bb0\u5f55\u53ef\u4ee5\u8282\u7701\u4e00\u4e9b\u8f93\u5165\uff0c\u4f46\u8be5\u5386\u53f2\u8bb0\u5f55\u4e5f\u53ef\u80fd\u5305\u542b\u654f\u611f\u4fe1\u606f\u3002\u9ed8\u8ba4\u7684\u5386\u53f2\u6761\u76ee\u6570\u901a\u5e38\u5f88\u9ad8\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5feb\u901f\u5b9e\u9a8c\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u60a8\u6709\u591a\u5c11\u6761\u76ee\uff1a\u6839\u636e\u60a8\u4f7f\u7528\u7684 Shell\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u63a7\u5236\u6700\u5927\u6761\u76ee\u6570\uff0c\u5bf9\u4e8e zsh\uff0c\u8fd9\u662f\u5b8c\u6210\u7684\u4e0e\uff1a\u6839\u636e\u60a8\u7684\u610f\u613f\u9009\u62e9\u6761\u76ee\u7684\u6570\u91cf\uff0c\u4e0d\u8981\u5927\u5230\u53ef\u4ee5\u4fdd\u5b58\u5f88\u957f\u65f6\u95f4\uff0c\u4e5f\u4e0d\u8981\u5c0f\u5230\u4e0d\u8282\u7701\u60a8\u7684\u6253\u5b57\u65f6\u95f4\u3002\u6709\u65f6\u60a8\u9700\u8981\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165\u673a\u5bc6\uff0c\u4f46\u53c8\u4e0d\u60f3\u5c06\u5b83\u4eec\u4fdd\u5b58\u5728\u5386\u53f2\u8bb0\u5f55\u4e2d\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u547d\u4ee4\u524d\u52a0\u4e0a\u7a7a\u683c\u6765\u907f\u514d\u5c06\u547d\u4ee4\u6dfb\u52a0\u5230\u5386\u53f2\u8bb0\u5f55\u4e2d\u3002\n\u8fdb\u5165\u9690\u8eab\u6a21\u5f0f\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u53d6\u6d88\u8bbe\u7f6e $HISTFILE \u73af\u5883\u53d8\u91cf\uff08\u611f\u8c22 @WhiteHatTux \u63d0\u4f9b\u6b64\u63d0\u793a\uff01\uff09\u3002\u5982\u679c\u60a8\u7684\u6587\u4ef6\u5305\u542b\u654f\u611f\u4fe1\u606f\u800c\u65e0\u6cd5\u52a0\u5bc6\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u53ef\u8bfb\uff08\u5982\u914d\u7f6e\u6587\u4ef6\uff09\uff0c\u81f3\u5c11\u53ea\u6388\u4e88\u9002\u5f53\u7684\u7528\u6237/\u8fdb\u7a0b\u8bbf\u95ee\u6743\u9650\u3002\u5982\u679c\u60a8\u9700\u8981\u5c06\u4e00\u4e9b\u5e26\u6709\u79d8\u5bc6\u7684\u73af\u5883\u53d8\u91cf\u66b4\u9732\u7ed9\u60a8\u7684\u547d\u4ee4\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u5e26\u6709\u52a0\u5bc6\u76ee\u5f55\u7684 direnv\u3002\u8fd9\u6837\uff0c\u53ea\u6709\u5f53\u60a8\u5728\u8be5\u76ee\u5f55\u4e2d\u65f6\u624d\u4f1a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u60a8\u65e0\u6cd5\u63a7\u5236\u7684\u7f51\u7edc\uff0c\u8bf7\u4f7f\u7528 VPN \u8fde\u63a5\u5230 Internet\u3002 ProtonVPN \u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u514d\u8d39\u9009\u62e9\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u8981\u52a0\u8f7d\u5916\u90e8\u5185\u5bb9\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u8fdb\u884c\u65e0\u5bb3\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u8ddf\u8e2a\u60a8\uff0c\u6216\u8005\u8fdb\u884c\u66f4\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u5229\u7528 CSRF \u6613\u53d7\u653b\u51fb\u7684\u7ad9\u70b9\u3002\u8fd9\u901a\u5e38\u662f\u60a8\u7535\u5b50\u90ae\u4ef6\u5ba2\u6237\u7aef\u4e2d\u7684\u4e00\u4e2a\u9009\u9879\uff0cProtonmail \u9ed8\u8ba4\u542f\u7528\u6b64\u9009\u9879\u3002\u6709\u65f6\u60a8\u9700\u8981\u4e0e\u5176\u4ed6\u540c\u4e8b\u5171\u4eab\u5bc6\u7801\u6216\u79c1\u4eba\u4fe1\u606f\u3002\u4f7f\u7528\u7aef\u5230\u7aef\u52a0\u5bc6\u7684\u5b89\u5168\u901a\u9053\u8fd9\u6837\u505a\uff08\u5e76\u5728\u5b8c\u6210\u540e\u5220\u9664\u6d88\u606f\uff09\uff0c\u6216\u4e3a\u60a8\u7684\u56e2\u961f\u4f7f\u7528\u5bc6\u7801\u7ba1\u7406\u5668\uff0c\u6216\u52a0\u5bc6\u4f7f\u7528\u4ed6\u4eec\u7684\u516c\u5171 GPG \u5bc6\u94a5\u83b7\u53d6\u79d8\u5bc6\u3002\u5728\u5b8c\u7f8e\u7684\u6761\u4ef6\u4e0b\uff0c\u60a8\u5e94\u8be5\u6709\u4e00\u53f0\u4e13\u7528\u7684\u5de5\u4f5c\u8ba1\u7b97\u673a\uff0c\u5e76\u4f7f\u7528\u5b89\u5168\u7f51\u7edc\u8fde\u63a5\u5230 Internet\uff0c\u4f46\u8fd9\u5e76\u4e0d\u603b\u662f\u53ef\u884c\u6216\u7531\u60a8\u7684\u96c7\u4e3b\u63d0\u4f9b\u3002\u4e0d\u8fc7\uff0c\u5728\u5904\u7406\u654f\u611f\u95ee\u9898\u65f6\uff0c\u62e5\u6709\u591a\u5c42\u4fdd\u62a4\u603b\u662f\u597d\u7684\u4fe1\u606f\u3002\n\u4f60\u5df2\u7ecf\u77e5\u9053\u5176\u4e2d\u7684\u4e00\u4e9b\u6280\u5de7\u4e86\u5417\uff1f\u6216\u8005\u4f60\u6709\u66f4\u591a\u8981\u5206\u4eab\u7684\u5417\uff1f\u8bf7\u5728\u8bc4\u8bba\u4e2d\u544a\u8bc9\u6211\uff01", "note_en": "If you are a developer, chances are that you handle private code or production secrets.If someone has access to those, you may be in serious problems with your bosses and clients.I&#39;ll share with you some tips on how to secure your development environment  from your computer to your terminal.\n In this post I&#39;d recommend some tools,for their usage please check their respective documentation,or search for alternatives for your Operating System.For some tools I have my configuration available at  https://github.com/stsewd/dotfiles.\n  Using an strong password is good, but using the same password for each login isn&#39;t good,if one system is compromised,  all your accounts could be compromised.The best password is the one that not even you know,a password manager can help you to generate strong and unique passwords for each login.\n Using a password manager requires you to have one master password,this one you do need to remember,so make sure to choose a strong one, and rotate that password every year or so.\n  I recommend  Bitwarden as password manager, it&#39;s Open Source.The free version gives you a lot of features that usually requirea premium account in other services, and even the premium version is cheap.\n But even using a password manager isn&#39;t enough to protect your accounts,the generated password could be exposed without you knowing it,or your master password could be compromised.Multi factor authentication (MFA) to the rescue!\n MFA is about using two or more pieces of evidence (factors) on authentication to be able to access a website or application  1.Factors are: something you know (like a password), something you have (like a phone), and something you are (like your fingerprints).A common way of MFA is combining a password (something you know) with something you have, like:\n This is using your phone number to receive a code via SMS to be able to authenticate. Please don&#39;t use this method, it&#39;s easy for an attacker to hijack your phone number  2,and if you are traveling, you won&#39;t be able to receive the codes.\n  This is using an application in your phone that generates an OTP  3valid for 30 seconds for each login.Using an app is an excellent way of MFA,and you don&#39;t need Internet connection on your phone to be able to access the tokens.\n An app that I recommend is  andOTP,it&#39;s Open Source, and has several features like using a PIN to unlock the codes,and making encrypted offline backups.\n When choosing an app,  don&#39;t use those that sync your codes to the cloud,that kind of breaks the rule about something you (and only you) have.\n  They are similar to an app, they can provide an OTP,but the good thing is that they aren&#39;t attached to your phone.Popular hardware keys are  YubiKeys. If you decide to get one, buy two!,the second key will act as your backup in case you lose or damage the other one.\n Not all services support MFA, but make sure to take some minutes to set it for those that do.Most services will give you recovery codes in case you lose access to your MFA device, save them offline and in a secure location!\n If someone steals your computer,they can access all your files without having to know your user&#39;s password.To prevent this, make use of full disk encryption on your computer.\n On Linux systems, this is usually an option on installationYou could even make use of your YubiKey to protect your disk(your password + an static password from your YubiKey).\n Even if you use full disk encryption,if someone steals your computer while you are logged in,they will have access to all your files and active sessions.Sure, you can revoke your active sessions,but doing so could take some time, and isn&#39;t possible to revoke access to your files.\n In addition to full disk encryption you can encrypt individual directories, and set a lifetime.This way your files will be secure even if someone has access to your un-locked computer.A simple tool to archive this is  encFS (check for the   -i option).\n Is common to use SSH authentication with your version control system (VCS) providerto avoid entering your password every time,but this leaves the door open for anyone with access to your computer. Protect your private key with a passphrase,and set a lifetime to your SSH agent (  -t option, see  man  ssh-agent),this way you&#39;ll need to re-enter your passphrase every  t minutes/hours.\n Using a VCS like Git for your code is great(you do have your code under a VCS, right?),it allows you to keep track of your changes, revert changes, and more!It is also useful to know who changed a particular piece of code and when,which is great when doing audits over your code base.\n But in fact, anyone can say to be you when committing changes,Git for example makes use of a configuration file to set your name and email,you don&#39;t need to provide anything else to say that you are that person!\n This means that any of your coworkers could impersonate you,or an attacker with access to your VCS provider could do so as well.You don&#39;t want to be responsible for changes that you didn&#39;t make!\n Luckily, Git allows you to sign your commits with a GPG key.Someone could still use your email for their commits,but they won&#39;t be able to sign those commits with your private GPG key.GitLab has a great guide on how to sign your commits with GPG https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/.\n  Same as SSH, protect your private GPG key with a passphrase,and set a lifetime to your GPG agent (  default-cache-ttl and   max-cache-ttl options, see  man  gpg-agent).\n The terminal is a great friend,and navigating the history with  \u2191  \u2193 save you some typing,but that history can also contain sensitive information.\n The default number of history entries is usually high,as a quick experiment, you can check how many entries you have with:\n    Depending on the Shell you are using,you can control the max number of entries with environment variables,for zsh this is done with:\n  Choose the number of entries at your discretion,not big enough that will keep things for a long period of time,and not so small to not save you some typing.\n Some times you need to enter secrets in your terminal,but you don&#39;t want to save them in your history.You can avoid adding your commands to the historyby prefixing them with a space.\n Another way to enter into  incognito mode is by un-setting the  $HISTFILE environment variable(thanks  @WhiteHatTux for this tip!).\n If you have files with sensitive informationthat you can&#39;t encrypt because it needs to be readable (like configuration files),at least give access only the appropriate users/processes.\n    If you need to expose some environment variables with secrets to your commands.You can use  direnv with an encrypted directory.This way the environment variables will be set only when you are on that directory.\n If you are using a network that you don&#39;t have control over,use a VPN to connect to the Internet. ProtonVPN is a good free option.\n Don&#39;t load external content by default,an attacker can use this for something  harmless like tracking you,to something more sophisticated like exploiting a  CSRF vulnerable site.This is usually an option in your email client, Protonmail has this option enabled by default.\n Sometimes you&#39;ll need to share passwords or private information with other coworkers.Use a secure channel with end to end encryption to do so (and delete the messages after you are done),or use a password manager for your team,or encrypt the secrets with their public GPG key.\n  In perfect conditions, you should have a dedicated computer for work,and connect to the Internet using a secure network,but this isn&#39;t always possible or provided by your employer.Still, it&#39;s always good to have several layers of protection when handling sensitive information.\n Did you already knew some of these tips?Or do you have more to share?Let me know in the comments!", "posttime": "2021-07-26 07:27:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,development", "title": "\u4fdd\u62a4\u60a8\u7684\u5f00\u53d1\u73af\u5883", "title_en": "Securing Your Development Environment", "transed": 1, "url": "https://stsewd.dev/posts/securing-your-dev-environment/", "via": "", "real_tags": ["\u5f00\u53d1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069731, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9762\u5bf9\u51e0\u5343\u4e2a\u5b57\u7b26\uff0c\u5728\u6570\u5b57\u6280\u672f\u51fa\u73b0\u4e4b\u524d\uff0c\u65e5\u672c\u4eba\u662f\u5982\u4f55\u4f7f\u7528\u6253\u5b57\u673a\u7684\uff1f\u7b54\u6848\u662f\u6c49\u5b57\u6253\u5b57\u673a\uff08\u548c\u6587\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc\u6216\u90a6\u6587\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc\uff09\uff0c\u5b83\u662f\u7531\u6749\u672c\u4eac\u592a\u4e8e1915\u5e74\u53d1\u660e\u7684\u3002\u8fd9\u9879\u53d1\u660e\u88ab\u8ba4\u4e3a\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u6b64\u88ab\u65e5\u672c\u4e13\u5229\u5c40\u9009\u4e3a\u65e5\u672c\u5341\u5927\u53d1\u660e\u4e4b\u4e00\u3002 1985 \u5e74\u7684 100 \u5468\u5e74\u5e86\u5178\u3002\u8fd9\u662f\u7b2c\u4e00\u4e2a\u6a21\u578b\u7684\u4e00\u4e9b\u7167\u7247\u3002 \uff08\u7167\u7247\u7531\u4f73\u80fd\u534a\u5bfc\u4f53\u8bbe\u5907\u516c\u53f8\u63d0\u4f9b\u3002\uff09\u8981\u4e86\u89e3\u6253\u5b57\u673a\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u66f4\u65b0\u7684\u6a21\u578b\uff08\u6765\u81ea\u7ef4\u57fa\u767e\u79d1 \u2013 \u5355\u51fb\u9ad8\u5206\u8fa8\u7387\u56fe\u50cf\uff09\uff1a\u5b9e\u9645\u751f\u4ea7\u6253\u5b57\u673a\u7684\u6253\u5b57\u673a\u90fd\u662f\u72ec\u7acb\u7684\u91d1\u5c5e\u4ef6\uff0c\u6709\u70b9\u50cf\u6d3b\u5b57\uff0c\u6392\u5217\u5728\u6253\u5b57\u673a\u4e0b\u65b9\u7684\u6258\u76d8 (1) \u4e2d\u3002\u4f7f\u7528\u6253\u5b57\u673a\u4e0a\u7684\u624b\u67c4 (2) \u4ece\u6253\u5b57\u673a\u6b63\u9762\u663e\u793a\u7684\u5b57\u7b26\u5217\u8868 (3) \u4e2d\u9009\u62e9\u8981\u952e\u5165\u7684\u5b57\u7b26\u3002\u8be5\u624b\u67c4\u76f4\u63a5\u4e0e\u6258\u76d8\u76f8\u8fde\uff0c\u4f7f\u6258\u76d8\u76f8\u5bf9\u4e8e\u6253\u5b57\u673a\u5185\u7684\u56fa\u5b9a\u6572\u51fb\u673a\u6784\u79fb\u52a8\u3002\u5728\u6b64\u7279\u5b9a\u578b\u53f7\u4e0a\uff0c\u6709\u4e24\u4e2a\u5355\u72ec\u7684\u624b\u67c4\uff084 \u548c 5\uff09\u7528\u4e8e\u6253\u5370\u5b57\u7b26\u3002\u4e00\u4e2a\u624b\u67c4\u64cd\u4f5c\u5c06\u649e\u9488\u62c9\u51fa\u6258\u76d8\u5e76\u5c06\u5176\u8fde\u63a5\u5230\u9524\u5b50\u7684\u673a\u6784\uff0c\u800c\u53e6\u4e00\u4e2a\u624b\u67c4\u88ab\u6572\u51fb\u4ee5\u5c06\u649e\u9488\u63a8\u5230\u8272\u5e26\u3001\u7eb8\u5f20\u548c\u6eda\u7b52\u4e0a\u3002 \uff08\u6211\u4e0d\u786e\u5b9a\u54ea\u4e2a\u624b\u67c4\u662f\u54ea\u4e2a\u3002\uff09\u4ee5\u4e0b\u6765\u81ea 1915 \u5e74\u539f\u59cb\u6a21\u578b\u4e13\u5229\u7684\u56fe\u8868\u663e\u793a\u4e86\u539f\u59cb\u673a\u5236\u3002\u8fd9\u4f7f\u7528\u5355\u4e2a\u624b\u67c4\u6765\u62fe\u53d6\u524d\u950b\uff0c\u7136\u540e\u5728\u4e00\u4e2a\u52a8\u4f5c\u4e2d\u8f93\u5165\u89d2\u8272\u3002 \uff08\u70b9\u51fb\u653e\u5927\uff09\u53f3\u4fa7\u6807\u6709 13 \u53f7\u7684\u90e8\u5206\u662f\u649e\u9488\u624b\u67c4\uff0c\u5b83\u4e00\u76f4\u8fde\u63a5\u5230\u5de6\u4fa7\u7684\u6eda\u8f6e\uff0819 \u53f7\uff09\u3002\u968f\u7740 13 \u88ab\u63a8\u4e0b\uff0c19 \u4e0a\u5347\uff0c\u65cb\u8f6c\u6253\u5b57\u673a\u4e0b\u65b9\u7684\u957f\u6746 (20) \u5e76\u5c06\u649e\u9488 (32) \u63a8\u51fa\u5230\u9524\u5b50\u4e2d\u3002\n\u968f\u7740 13 \u88ab\u8fdb\u4e00\u6b65\u63a8\u52a8\uff0c19 \u7ee7\u7eed\u4e0a\u5347\uff0c\u63a8\u5165\u90e8\u4ef6 24\uff0c\u8fd9\u5c06\u649e\u9488\u9501\u5b9a\u5728\u9524\u5b50\u4e2d\uff0c\u7136\u540e\u5c06\u9524\u5b50\u649e\u51fb\u5230\u538b\u677f\u4e0a\u3002\u4f7f\u6253\u5b57\u673a\u96be\u4ee5\u4f7f\u7528\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u4f7f\u6572\u51fb\u6746\u529b\u6b63\u786e\u3002\u5982\u679c\u7528\u666e\u901a\u7684\u529b\u91cf\u6572\u51fb\uff0c\u5c0f\u6570\u70b9\u6216\u6807\u70b9\u7b26\u53f7\u7b49\u5b57\u7b26\u4f1a\u523a\u7a7f\u8272\u5e26\u548c\u7eb8\u5f20\uff0c\u5361\u5728\u6a61\u80f6\u538b\u677f\u4e0a\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u975e\u5e38\u590d\u6742\u7684\u5b57\u7b26\uff08\u5982\u6619\u6216\u60ca\uff09\u9700\u8981\u7528\u989d\u5916\u7684\u529b\u91cf\u6572\u51fb\u4ee5\u8865\u507f\u5b57\u4f53\u7684\u5927\u8868\u9762\u79ef\u3002\u518d\u52a0\u4e0a\u5927\u91cf\u7684\u5b57\u7b26\uff08\u8fd9\u4f7f\u5f97\u5728 QWERTY \u952e\u76d8\u4e0a\u6253\u5b57\u663e\u5f97\u5fae\u4e0d\u8db3\u9053\uff09\u610f\u5473\u7740\u53ea\u6709\u7ecf\u9a8c\u4e30\u5bcc\u7684\u64cd\u4f5c\u5458\u624d\u80fd\u4f7f\u7528\u8fd9\u4e9b\u6253\u5b57\u673a\u3002\u5728\u8fd9\u4e2a 1928 \u5e74\u7684\u6a21\u578b\u4e2d\uff0c\u89d2\u8272\u9009\u62e9\u65b9\u6cd5\u4f7f\u7528\u4e86\u7c7b\u4f3c\u62d6\u62c9\u673a\u7684\u673a\u5236\u3002\u5de6\u524d\u65b9\u7684\u8868\u76d8\u6eda\u52a8\u663e\u793a\u5b57\u7b26\uff0c\u5c31\u50cf\u63a8\u571f\u673a\u4e0a\u7684\u5c65\u5e26\u4e00\u6837\u3002\u8fd9\u4e2a\u578b\u53f7\u7684\u4ef7\u683c\u662f 190 \u65e5\u5143\uff0c\u5927\u7ea6\u76f8\u5f53\u4e8e 190 \u65e5\u5143\u3002 6000 \u7f8e\u5143\u7684\u73b0\u4ee3\u8d27\u5e01\u3002 \uff08\u6ce8\uff1a\u5176\u4f59\u7167\u7247\u7ecf\u548c\u6587\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc\u65e5\u672c\u8bed\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc\uff08\u4ec5\u9650\u65e5\u8bed\uff09\u8bb8\u53ef\u8f6c\u8f7d\uff09\u3002\u4ee5\u4e0b 1942 \u5e74\u578b\u53f7\u4f7f\u7528\u6bdb\u6be1\u6eda\u7b52\u4ee3\u66ff\u8272\u5e26\u6d82\u62b9\u58a8\u6c34\u3002\u7d27\u51d1\u7684\u62a5\u65f6\u673a\u5236\u4ecd\u7136\u4fdd\u7559\u4e86 1915 \u5e74\u7684\u5927\u90e8\u5206\u539f\u59cb\u8bbe\u8ba1\u3002\u53e6\u4e00\u4e2a\u8fdb\u6b65\u662f\u9f13\u9009\u62e9\u673a\u5236\uff0c\u4ece\u4e1c\u829d 1955 \u5e74\u7684\u6a21\u578b\u4e2d\u53ef\u4ee5\u770b\u51fa\u3002\u6700\u540e\u662f 1981 \u5e74\u7684\u4e1c\u829d\u578b\u53f7\u3002\u8fd9\u91cc\u7684\u649e\u9488\u901a\u8fc7\u5f39\u7c27\u8fde\u63a5\u5230\u9009\u62e9\u6761\u4e0a\u3002\u4e00\u65e6\u4ece\u9f13\u4e2d\u9009\u62e9\u4e86\u7279\u5b9a\u7684\u6761\u5e26\uff0c\u9524\u5b50\u5c31\u4f1a\u4ece\u540e\u9762\u6446\u52a8\uff0c\u8feb\u4f7f\u649e\u9488\u8fdb\u5165\u8272\u5e26\u548c\u7eb8\u5f20\u3002\u6700\u7ec8\uff0c\u5f00\u53d1\u4e86\u4f7f\u7528\u7535\u51fb\u673a\u5236\u7684\u6a21\u578b\u3002\u8fd9\u9700\u8981\u56de\u5230\u524d\u950b\u8bbe\u8ba1\u7684\u6258\u76d8\u3002\u4ee5\u4e0b\u578b\u53f7\u6765\u81ea 1980 \u5e74\u4ee3\u3002\n1984 \u5e74\u4ef7\u683c\u4f4e\u5ec9\u7684\u6570\u5b57\u6587\u5b57\u5904\u7406\u5668\u7684\u51fa\u73b0\u9884\u793a\u7740\u6c49\u5b57\u6253\u5b57\u673a\u7684\u7ec8\u7ed3\u3002\u5230\u4e86 90 \u5e74\u4ee3\u4e2d\u671f\uff0c\u4e2a\u4eba\u7535\u8111\u4e5f\u5f00\u59cb\u5728\u65e5\u672c\u5bb6\u5ead\u4e2d\u6d41\u884c\u8d77\u6765\uff0c\u6c49\u5b57\u6253\u5b57\u673a\u7684\u65f6\u4ee3\u7ed3\u675f\u4e86\u3002\u5c3d\u7ba1\u5927\u591a\u6570\u5df2\u88ab\u4e22\u5f03\u6216\u95f2\u7f6e\u5728\u4ed3\u5e93\u4e2d\u79ef\u7070\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\u627e\u5230\u51fa\u552e\u7684\u4e8c\u624b\u6a21\u578b\u3002 \uff08Yahoo Auction Japan \u6709\u4e00\u4e9b\u7535\u52a8\u578b\u53f7\u3002\uff09\u867d\u7136\u4e0d\u518d\u751f\u4ea7\u65e5\u672c\u6253\u5b57\u673a\uff0c\u4f46\u6749\u672c Kyoka \u4e3a\u5236\u9020\u4ed6\u7684\u53d1\u660e\u800c\u521b\u7acb\u7684\u516c\u53f8\uff0c\u65e5\u672c\u6253\u5b57\u673a\u516c\u53f8\uff08 \u65e5\u672c\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc\u682a\u5f0f\u4f1a\u793e\uff09\uff0c\u7ee7\u7eed\u4ee5\u4f73\u80fd\u534a\u5bfc\u4f53\u7684\u5f62\u5f0f\u5b58\u5728\u8bbe\u5907\u3002\u6211\u627e\u4e0d\u5230\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u4efb\u4f55\u82f1\u8bed\u4e66\u7c4d\uff0c\u4f46\u6280\u672f\u7231\u597d\u8005\u53ef\u80fd\u5bf9\u6211\u5728\u4e9a\u9a6c\u900a\u4e0a\u627e\u5230\u7684\u8fd9\u5f20\u65e5\u672c\u6253\u5b57\u673a\u7684\u6d77\u62a5\u611f\u5174\u8da3\uff1a", "note_en": "With several thousand characters to contend with, how were the Japanese able to use typewriters before the advent of digital technology? The answer is the kanji typewriter ( \u548c\u6587\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc or  \u90a6\u6587\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc ), which was invented by Kyota Sugimoto in 1915. This invention was deemed so important that it was selected as one of the ten greatest Japanese inventions by the Japanese Patent Office during their 100th anniversary celebrations in 1985. Here are some photos of that first model.  (Photos courtesy Canon Semiconductor Equipment.)\n    To understand how the typewriter works, let\u2019s take a look at a more recent model (from  Wikipedia  \u2013  Click for a hi-res image):\n  The actual strikers that produce the type are all separate metal pieces, somewhat like movable type, arranged in a grid in the tray (1) beneath the typewriter.\n A handle (2) on the typewriter is used select the character to type from the list (3) of characters shown at the front of the typewriter. This handle is directly connected to the tray, and moves the tray relative to the fixed striking mechanism within the typewriter.\n On this particular model, there are two separate handles (4 and 5) for printing the character. One handle operates the mechanism that pulls the striker out of the tray and attaches it to the hammer, and the other handle is struck to propel the striker onto the ink ribbon, paper and platen. (I\u2019m not sure which handle is which.)\n  The following diagrams from the patent of the original 1915 model show the original mechanism. This uses a single handle to pickup the striker and then type the character in one action. (Click to enlarge)\n  The part labeled number 13 on the right side is the striker handle, and connects all the way through to the roller (number 19) on the left side. As 13 is pushed down, 19 lifts up, pivoting the long bar (20) under the typewriter and pushing the striker (32) out into the hammer.\n  As 13 is pushed further, 19 continues rising, pushing into part 24, which locks the striker into the hammer, and then strikes the hammer onto the platen.\n One of the things that made the typewriter difficult to use was getting the strike lever force correct. If struck with even just regular force, characters such as decimal points or punctuation would pierce the ribbon and paper, becoming stuck in the rubber platen. On the other hand, very complex characters (such as  \u66c7 or  \u9a5a) required striking with additional force to compensate for the large surface area of the typeface. This combined with the huge number of characters (which makes hunt and peck typing on a QWERTY keyboard seem trivial) meant that only experienced operators could use these typewriters.\n  In this 1928 model, a tractor-like mechanism is used in the character selection method. The dial at the front-left scrolled through the characters much like the caterpillar tread on a bulldozer. The price of this model was 190 yen, equivalent to approx. $US6000 in modern currency. (Note: Remaining photos reproduced with permission from  \u548c\u6587\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc\u3000\u65e5\u672c\u8a9e\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc (Japanese only)).\n       The following 1942 model uses a felt roller to apply ink instead of an ink ribbon. The compact striking mechanism still retains much of the original 1915 design.\n   Another advance was the drum selection mechanism, as can be seen in this 1955 model by Toshiba.\n    And finally, a Toshiba model from 1981. Here the strikers are attached to the selection strips by springs. Once a particular strip has been selected out of the drum, the hammer swings around from behind to force the striker into the ink ribbon and paper.\n     Eventually, models were developed that used electrical striking mechanisms. This required a return to the tray of strikers design. The following models are from the 1980s.\n     The beginning of the end for Kanji typewriters was heralded by the arrival of affordable digital word processors in 1984. By the mid 90s, personal computers also began to become popular in Japanese homes, and the age of kanji typewriters came to an end. Although most have been discarded or lie idle gathering dust in storage, you can still find second-hand models for sale. ( Yahoo Auction Japan has some electric models.)\n Although Japanese typewriters are no longer manufactured, the company founded by Kyoka Sugimoto to manufacture his invention, the Nippon Typewriter Company ( \u65e5\u672c\u30bf\u30a4\u30d7\u30e9\u30a4\u30bf\u30fc\u682a\u5f0f\u4f1a\u793e), continues to exist in the form of Canon Semiconductor Equipment.\n I couldn\u2019t find any English language books on the subject, but technophiles may be interested in this  poster of a Japanese typewriter in action that I found on Amazon:", "posttime": "2021-07-26 06:41:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e5\u672c,japanese,\u6253\u5b57\u673a", "title": "\u65e5\u672c\u6253\u5b57\u673a", "title_en": "Japanese Typewriters", "transed": 1, "url": "https://blog.gatunka.com/2009/09/30/japanese-typewriters/", "via": "", "real_tags": ["\u65e5\u672c", "japanese", "\u6253\u5b57\u673a"]}]