[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1068409, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "www.electronicdesign.com\u6b63\u5728\u4f7f\u7528\u5b89\u5168\u670d\u52a1\u6765\u4fdd\u62a4\u5728\u7ebf\u653b\u51fb\u3002 \u8be5\u670d\u52a1\u9700\u8981\u5b8c\u6574\u7684cookie\u652f\u6301\u4ee5\u67e5\u770b\u672c\u7f51\u7ad9\u3002 ", "note_en": "www.electronicdesign.com is using a security service for protection against online attacks. The service requires full cookie support in order to view this website.", "posttime": "2021-06-26 17:32:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u786c\u4ef6,\u8f6f\u4ef6,ada,insulate,\u670d\u52a1", "title": "\u5982\u4f55\u4f7f\u7528ADA\u4ece\u786c\u4ef6\u66f4\u65b0\u4e2d\u7edd\u7f18\u8f6f\u4ef6 ", "title_en": "How to Use Ada to Insulate Software from Hardware Updates", "transed": 1, "url": "https://www.electronicdesign.com/technologies/embedded-revolution/article/21167036/adacore-how-to-use-ada-to-insulate-software-from-hardware-updates", "via": "", "real_tags": ["\u786c\u4ef6", "\u8f6f\u4ef6", "ada", "insulate", "\u670d\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "b995e6b8711098d47d50e81ab49789dd.png", "infoid": 1068408, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "CloudProxy\u7684\u76ee\u7684\u662f\u9690\u85cf\u4e91\u5c42\u540e\u9762\u7684\u522e\u5200IP\u3002\u5b83\u5141\u8bb8\u60a8\u4f7f\u7528\u6d41\u884c\u7684\u4e91\u63d0\u4f9b\u5546\u65cb\u8f6c\u4e00\u4e2a\u4ee3\u7406\u6c60\uff0c\u53ea\u9700\u4e00\u4e2aAPI\u4ee4\u724c\u3002\u65e0\u9700\u914d\u7f6e\u3002\n        CloudProxy\u8fc7\u5ea6\u514b\u62c9\u5e15\u6bd2\u7684\u4e3b\u8981\u4f18\u70b9\u662fCloudProxy\u53ea\u9700\u8981\u6765\u81ea\u4e91\u63d0\u4f9b\u5546\u7684API\u4ee4\u724c\u3002 CloudProxy\u81ea\u52a8\u90e8\u7f72\u5e76\u5728\u4e91\u5b9e\u4f8b\u4e0a\u914d\u7f6e\u4ee3\u7406\uff0c\u800c\u65e0\u9700\u7528\u6237\u9700\u8981\u9884\u914d\u7f6e\u6216\u590d\u5236\u56fe\u50cf\u3002\n            age_limit  - \u4ee5\u79d2\u4e3a\u5355\u4f4d\u8bbe\u7f6e\u524d\u5411\u4ee3\u7406\u7684\u5e74\u9f84\u9650\u5236\u3002\u8fbe\u5230\u5e74\u9f84\u9650\u5236\u540e\uff0c\u4ee3\u7406\u88ab\u66ff\u6362\u3002\u503c0\u7981\u7528\u8be5\u529f\u80fd\u3002\u9ed8\u8ba4\u503c\uff1a0\u3002\n    docker\u8fd0\u884c-e username =\uff06\uff0339; change_this_username\uff06\uff0339; \\ -e password =\uff06\uff0339; change_this_password\uff06\uff0339; \\ -e digitalocean_enabled = true \\ -e digitalocean_access_token =\uff06\uff0339;\u60a8\u7684\u79d8\u5bc6\u8bbf\u95ee\u952e\uff06\uff0339; \\ -IT -P 8000\uff1a8000\u8089\u7c7b/ CloudProxy\uff1a\u6700\u65b0\n \u5efa\u8bae\u4f7f\u7528\u7801\u5934\u56fe\u50cf\u6807\u8bb0\u4e3av\u7248\u672c\u3002 Laffin / CloudProxy\uff1a0.3.0-Beta\uff0c\u8bf7\u53c2\u9605\u6700\u65b0\u7248\u672c\u3002\n  CloudProxy\u5728localhost\u4e0a\u516c\u5f00API\uff1a8000\u3002\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0bAPI\u68c0\u7d22\u5e26\u6709\u90e8\u7f72\u4ee3\u7406\u670d\u52a1\u5668\u7684Auth\u7684IP\u3002\u7136\u540e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9bIP\u6765\u4ee3\u7406\u3002\n \u4f8b\u5982\uff0c\u5faa\u73af\u901a\u8fc7IPS\u8fdb\u884c\u66ff\u4ee3\u7684\u903b\u8f91\u5c06\u9700\u8981\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f8b\u5982\uff1a \n\u5c06\u968f\u673a\u5bfc\u5165\u8bf7\u6c42\u4f5c\u4e3aRequests\uff03\u4eceCloudProxy Def Randum_Proxy\uff08\uff09\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u4ee3\u7406\u7a0b\u5e8f\uff1aIPS =\u8bf7\u6c42\u3002\u5f97\u5230\uff08\uff06\uff0334; http\uff1a// localhost\uff1a8000\uff06\uff0334;\uff09\u3002 json\uff08\uff09\u968f\u673a\u8fd4\u56de\u3002\u9009\u62e9\uff08IPS [\uff06\uff0339; IPS\uff06\uff0339;]\uff09\u4ee3\u7406= {\uff06\uff0334; http\uff06\uff0334 ;: randum_proxy\uff08\uff09\uff0c\uff06\uff0334; https\uff06\uff0334 ;: random_proxy\uff08\uff09} my_request =\u8bf7\u6c42\u3002\u83b7\u5f97\uff08\uff06\uff0334; https\uff1a//api.ipify.org&#34;\uff0c\u4ee3\u7406=\u4ee3\u7406\uff09\n   \u60a8\u53ef\u4ee5\u901a\u8fc7API\u548cUI\u7ba1\u7406CloudProxy\u3002\u60a8\u53ef\u4ee5\u8bbf\u95eehttp\uff1a// localhost / ui\u7684UI\u3002\n \u60a8\u53ef\u4ee5\u901a\u8fc7UI\u5411\u4e0a\u548c\u5411\u4e0b\u7f29\u653e\u4ee3\u7406\u5e76\u5c06\u5176\u5220\u9664\u6bcf\u4e2a\u63d0\u4f9b\u5546\u3002\n                                CloudProxy\u5728\u6bcf30\u79d2\u7684\u65f6\u95f4\u8868\u4e2d\u8fd0\u884c\uff0c\u5b83\u5c06\u68c0\u67e5\u6700\u5c0f\u7f29\u653e\u662f\u5426\u5df2\u6ee1\u8db3\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5b83\u5c06\u90e8\u7f72\u6240\u9700\u6570\u91cf\u7684\u4ee3\u7406\u3002\u65b0\u7684\u4ee3\u7406\u4fe1\u606f\u5c06\u5728\u90e8\u7f72\u5e76\u51c6\u5907\u4f7f\u7528\u540e\u663e\u793a\u5728IP\u4e2d\u3002\n  \u8be5\u9879\u76ee\u5904\u4e8e\u65e9\u671f\u7684Alpha\uff0c\u5177\u6709\u6709\u9650\u7684\u529f\u80fd\u3002\u5c06\u6765\uff0c\u5c06\u652f\u6301\u66f4\u591a\u63d0\u4f9b\u5546\uff0c\u5c06\u5b9e\u65bd\u81ea\u52a8\u9636\u6bb5\uff0c\u5e76\u81f4\u5bcc\u4e3a\u5bcc\u6709\u7684API\uff0c\u4ee5\u5141\u8bb8\u5bf9\u4ee3\u7406\u5546\u7684\u9ed1\u540d\u5355\u548c\u56de\u6536\u3002\n   \u8d21\u732e\u662f\u4f7f\u5f00\u6e90\u793e\u533a\u6210\u4e3a\u4e00\u4e2a\u4ee4\u4eba\u60ca\u53f9\uff0c\u6fc0\u52b1\u548c\u521b\u9020\u7684\u4ee4\u4eba\u60ca\u53f9\u3002\u60a8\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e\u90fd\u975e\u5e38\u611f\u8c22\u3002 ", "note_en": "The purpose of CloudProxy is to hide your scrapers IP behind the cloud. It allows you to spin up a pool of proxies using popular cloud providers with just an API token. No configuration needed.\n        The primary advantage of CloudProxy over Scrapoxy is that CloudProxy only requires an API token from a cloud provider. CloudProxy automatically deploys and configures the proxy on the cloud instances without the user needing to preconfigure or copy an image.\n            AGE_LIMIT - set the age limit for your forward proxies in seconds. Once the age limit is reached, the proxy is replaced. A value of 0 disables the feature. Default value: 0.\n    docker run -e USERNAME=  &#39;CHANGE_THIS_USERNAME &#39; \\ -e PASSWORD=  &#39;CHANGE_THIS_PASSWORD &#39; \\ -e DIGITALOCEAN_ENABLED=True \\ -e DIGITALOCEAN_ACCESS_TOKEN=  &#39;YOUR SECRET ACCESS KEY &#39; \\ -it -p 8000:8000 laffin/cloudproxy:latest\n It is recommended to use a Docker image tagged to a version e.g.  laffin/cloudproxy:0.3.0-beta, see  releases for latest version.\n  CloudProxy exposes an API on localhost:8000. Your application can use the below API to retrieve the IPs with auth for the proxy servers deployed. Then your application can use those IPs to proxy.\n The logic to cycle through IPs for proxying will need to be in your application, for example:\n import  random import  requests  as  requests # Returns a random proxy from CloudProxy def  random_proxy():  ips  =  requests. get( &#34;http://localhost:8000&#34;). json()  return  random. choice( ips[ &#39;ips&#39;]) proxies  = { &#34;http&#34;:  random_proxy(),  &#34;https&#34;:  random_proxy()} my_request  =  requests. get( &#34;https://api.ipify.org&#34;,  proxies = proxies)\n   You can manage CloudProxy via an API and UI. You can access the UI at  http://localhost/ui.\n You can scale up and down your proxies and remove them for each provider via the UI.\n                                CloudProxy runs on a schedule of every 30 seconds, it will check if the minimum scaling has been met, if not then it will deploy the required number of proxies. The new proxy info will appear in IPs once they are deployed and ready to be used.\n  The project is at early alpha with limited features. In the future more providers will be supported, autoscaling will be implemented and a rich API to allow for blacklisting and recycling of proxies.\n   Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are  greatly appreciated.", "posttime": "2021-06-26 17:32:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9690\u85cf,hide,\u4ee3\u7406", "title": "CloudProxy  - \u9690\u85cf\u4e91\u80cc\u540e\u7684\u522e\u5200IP ", "title_en": "Cloudproxy \u2013 hide your scrapers IP behind the cloud", "transed": 1, "url": "https://github.com/claffin/cloudproxy", "via": "", "real_tags": ["\u9690\u85cf", "hide", "\u4ee3\u7406"]}, {"category": "", "categoryclass": "", "imagename": "b87673dd3d9f33462ab823fcad449b7c.jpg", "infoid": 1068407, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1999\u5e74\uff0c\u5f53\u957f\u671f\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7f57\u6069\u91cc\u7ef4\u65af\u7279\u6559\u6388\u521b\u9020\u4e86\u4e00\u4e2a\u52a0\u5bc6\u62fc\u56fe\uff0c\u4ee5\u5e86\u795d\u5b66\u6821\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5b9e\u9a8c\u5ba435\u5468\u5e74\uff0c\u4ed6\u8868\u793a\u5c06\u5728\u4efb\u4f55\u4eba\u53ef\u80fd\u89e3\u51b3\u4e4b\u524d\u518d\u8fc735\u5e74\u3002  RIVEST\u8868\u793a\uff0c\u62fc\u56fe\u9700\u898135\u5e74\u7684\u8fde\u7eed\u8ba1\u7b97\uff0c\u4ee5\u53ca\u6bcf\u5e74\u7528\u4e0b\u4e00\u4e2a\u6700\u5feb\u7684\u6a21\u578b\u5207\u6362\u6267\u884c\u5b83\u7684\u8ba1\u7b97\u673a\u3002 \u4ed6\u8bf4\u5b83\u9700\u8981\u51e0\u4e4e\u4e0d\u53ef\u60f3\u8c61\u7684\u6b65\u9aa4\u3002  \u201c\u5927\u591a\u6570\u5de5\u4f5c\u5c06\u5728\u8fc7\u53bb\u51e0\u5e74\u4e2d\u771f\u6b63\u5b8c\u6210\uff0c\u4f46\u662f\uff0c\u201d\u6700\u8fd1\u51e0\u5e74\u6765\u7684\u662f\uff0c\u201c\u5f53\u65f6\u6700\u8fd1\u3002  \u4ed6\u6ca1\u60f3\u5230\u7684\u662f\u5728\u51e0\u5e74\u5185\u5b8c\u6210\u7684\u6240\u6709\u5de5\u4f5c - \u4ee5\u53ca\u5341\u5e74\u548c\u5341\u5e74\u7684\u65f6\u95f4\u8868\u3002 ", "note_en": "In 1999, when longtime MIT professor Ron Rivest created a cryptographic puzzle to celebrate the 35th anniversary of the school\u2019s Laboratory for Computer Science, he said it would be another 35 years before anyone could possibly solve it.\n Rivest said the puzzle would take 35 years of continuous computing, along with switching out the computer performing it with the next fastest model each year. He said it would require a virtually unimaginable number of steps.\n \u201cMost of the work will really be done in the last few years, however,\u201d Rivest\u00a0said at the time.\n What he didn\u2019t expect was for\u00a0 all of the work to be finished in a few years \u2014 and a decade and a half ahead of schedule.", "posttime": "2021-06-26 17:28:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u89e3\u51b3,solve,\u62fc\u56fe", "title": "\u7a0b\u5e8f\u5458\u89e3\u51b3\u4e86MIT\u768420\u5c81\u52a0\u5bc6\u62fc\u56fe ", "title_en": "Programmers solve MIT\u2019s 20-year-old cryptographic puzzle", "transed": 1, "url": "https://www.boston.com/news/local-news/2019/05/21/bernard-fabrot-mit-puzzle/", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u89e3\u51b3", "solve", "\u62fc\u56fe"]}, {"category": "", "categoryclass": "", "imagename": "c381752bccaec104ff585f4c4e1fb98d.png", "infoid": 1068406, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u5bf9\u4efb\u4f55\u89c2\u770b\u4e86\u8bb8\u591a\u52a8\u4f5c\u7535\u5f71\u6216\u626e\u6f14\u804c\u8d23\u7684\u4eba\u6765\u8bf4\u662f\u4e00\u4e2a\u719f\u6089\u7684\u613f\u666f\uff1a\u4e00\u4e2a\u4f7f\u4e0d\u53ef\u89c1\u7269\u4f53\u53ef\u89c1\u7684\u5e7d\u7075\u822c\u7684\u7eff\u8272\u56fe\u50cf\u3002\u81ea20\u4e16\u7eaa60\u5e74\u4ee3\u4e2d\u671f\u5f00\u53d1\u7b2c\u4e00\u591c\u89c6\u8bbe\u5907\u4ee5\u6765\uff0c\u8be5\u6280\u672f\u5df2\u6355\u83b7\u4e86\u6d41\u884c\u7684\u60f3\u8c61\u529b\u3002\n \u591c\u89c6\u62a4\u76ee\u955c\uff0c\u7ea2\u5916\u6444\u50cf\u673a\u548c\u5176\u4ed6\u7c7b\u4f3c\u7684\u8bbe\u5907\u68c0\u6d4b\u4ece\u7269\u4f53\u53cd\u5c04\u7684\u7ea2\u5916\u5149\u6216\u8005\u4ee5\u70ed\u91cf\u7684\u5f62\u5f0f\u68c0\u6d4b\u4ece\u7269\u4f53\u53d1\u51fa\u7684\u7ea2\u5916\u5149\u3002\u4eca\u5929\uff0c\u8fd9\u4e9b\u8bbe\u5907\u4e0d\u4ec5\u7531\u519b\u961f\u800c\u5e7f\u6cdb\u4f7f\u7528\uff0c\u4e5f\u662f\u7531\u6267\u6cd5\u548c\u7d27\u6025\u670d\u52a1\uff0c\u5b89\u5168\u548c\u76d1\u7763\u884c\u4e1a\uff0c\u91ce\u751f\u52a8\u7269\u730e\u4eba\u548c\u9732\u8425\u7231\u597d\u8005\u7684\u7231\u597d\u8005\u3002\n \u4f46\u76ee\u524d\u7684\u6280\u672f\u5e76\u975e\u6ca1\u6709\u95ee\u9898\u3002\u5546\u7528\u7ea2\u5916\u76f8\u673a\u963b\u6321\u53ef\u89c1\u5149\uff0c\u6270\u4e71\u6b63\u5e38\u89c6\u89c9\u3002\u9f7f\u8f6e\u5e9e\u5927\u548c\u91cd\uff0c\u9700\u8981\u4f4e\u6e29 - \u5e76\u4e14\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u662f\u4f4e\u6e29\u51b7\u5374 - \u5de5\u4f5c\u3002\n  \u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u6280\u672f\uff0c\u8be5\u6280\u672f\u91c7\u7528\u8d85\u8584\u5c42\u7684\u7eb3\u7c73\u6676\u4f53\u6765\u4f7f\u7ea2\u5916\u5149\u53ef\u89c1\uff0c\u89e3\u51b3\u4e86\u5f53\u524d\u8bbe\u5907\u7684\u8bb8\u591a\u957f\u671f\u5b58\u5728\u7684\u95ee\u9898\u3002\u6211\u4eec\u7684\u7814\u7a76\u53d1\u8868\u4e8e\u5148\u8fdb\u7684\u5149\u5b50\u5b66\u3002\n  \u6211\u4eec\u7684\u6700\u7ec8\u76ee\u6807\u662f\u751f\u4ea7\u4e00\u79cd\u706f\uff0c\u53ef\u4ee5\u5750\u5728\u773c\u955c\u6216\u5176\u4ed6\u955c\u7247\u4e0a\uff0c\u7531\u5fae\u5c0f\u7684\u5185\u7f6e\u6fc0\u5149\u5668\u63d0\u4f9b\u52a8\u529b\uff0c\u8ba9\u4eba\u4eec\u5728\u9ed1\u6697\u4e2d\u770b\u5230\u3002\n  \u5546\u7528\u7ea2\u5916\u6444\u50cf\u673a\u5c06\u7ea2\u5916\u5149\u8f6c\u6362\u4e3a\u7535\u4fe1\u53f7\uff0c\u7136\u540e\u5728\u663e\u793a\u5c4f\u4e0a\u663e\u793a\u3002\u7531\u4e8e\u7ea2\u5916\u5149\u7684\u80fd\u91cf\u548c\u9891\u7387\u4f4e\uff0c\u5b83\u4eec\u9700\u8981\u4f4e\u6e29\u3002\u8fd9\u4f7f\u5f97\u4f20\u7edf\u7684\u7ea2\u5916\u63a2\u6d4b\u5668\u5e9e\u5927\u548c\u91cd\u6c89\u91cd - \u4e00\u4e9b\u5b89\u5168\u4eba\u5458\u7531\u4e8e\u7ecf\u5e38\u4f7f\u7528\u591c\u89c6\u62a4\u76ee\u955c\u800c\u5bfc\u81f4\u6162\u6027\u9888\u90e8\u635f\u4f24\u3002\n \u76ee\u524d\u6280\u672f\u7684\u53e6\u4e00\u4e2a\u7f3a\u70b9\u662f\u5b83\u963b\u65ad\u4e86\u53ef\u89c1\u5149\u7684\u4f20\u8f93\uff0c\u4ece\u800c\u6270\u4e71\u6b63\u5e38\u89c6\u89c9\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c06\u7ea2\u5916\u56fe\u50cf\u53d1\u9001\u5230\u663e\u793a\u76d1\u89c6\u5668\uff0c\u7559\u4e0b\u6b63\u5e38\u7684\u89c6\u89c9\u3002\u4f46\u662f\uff0c\u5f53\u7528\u6237\u6b63\u5728\u79fb\u52a8\u65f6\uff0c\u6b64\u89e3\u51b3\u65b9\u6848\u662f\u4e0d\u53ef\u884c\u7684\u3002 \n\u8fd8\u6709\u4e00\u4e9b\u5168\u5149\u5b66\u66ff\u4ee3\u54c1\uff0c\u4e0d\u6d89\u53ca\u7535\u4fe1\u53f7\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u76f4\u63a5\u5c06\u7ea2\u5916\u5149\u8f6c\u6362\u6210\u53ef\u89c1\u5149\u3002\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u773c\u775b\u6216\u76f8\u673a\u6355\u83b7\u53ef\u89c1\u5149\u3002\n \u8fd9\u4e9b\u6280\u672f\u901a\u8fc7\u5c06\u8fdb\u5165\u7684\u7ea2\u5916\u5149\u4e0e\u5f3a\u5149\u6e90\u7ec4\u5408 - \u4e00\u79cd\u6fc0\u5149\u675f - \u5728\u79f0\u4e3a\u201c\u975e\u7ebf\u6027\u6676\u4f53\u201d\u7684\u6750\u6599\u5185\u3002\u7136\u540e\u6676\u4f53\u5728\u53ef\u89c1\u5149\u8c31\u4e2d\u53d1\u5149\u3002\n \u7136\u800c\uff0c\u975e\u7ebf\u6027\u6676\u4f53\u5e9e\u5927\u4e14\u6602\u8d35\uff0c\u5e76\u4e14\u53ea\u80fd\u68c0\u6d4b\u5728\u7ea2\u5916\u9891\u7387\u7a84\u5e26\u4e2d\u7684\u5149\u3002\n  \u6211\u4eec\u7684\u5de5\u4f5c\u63a8\u8fdb\u4e86\u8fd9\u79cd\u5168\u5149\u5b66\u65b9\u6cd5\u3002\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u88ab\u79f0\u4e3a\u201cMetasurfaces\u201d\u7684\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u7eb3\u7c73\u6676\u4f53\u5c42\uff0c\u800c\u4e0d\u662f\u975e\u7ebf\u6027\u6676\u4f53\u3002 Metasurfaces\u662f\u8d85\u8584\u548c\u8d85\u5149\u7ebf\uff0c\u53ef\u4ee5\u8c03\u6574\u4ee5\u64cd\u7eb5\u7a7f\u8fc7\u5b83\u4eec\u7684\u5149\u7684\u989c\u8272\u6216\u9891\u7387\u3002\n \u8fd9\u4f7f\u5f97Metasurfaces\u6210\u4e3a\u5c06\u7ea2\u5916\u5149\u5b50\u8f6c\u6362\u4e3a\u53ef\u89c1\u7684\u6709\u5438\u5f15\u529b\u7684\u5e73\u53f0\u3002\u91cd\u8981\u7684\u662f\uff0c\u900f\u660e\u5143\u4ef6\u53ef\u4ee5\u4f7f\u7ea2\u5916\u6210\u50cf\u80fd\u591f\u540c\u65f6\u8fdb\u884c\u6b63\u5e38\u89c6\u89c9\u3002\n \u6211\u4eec\u7684\u5c0f\u7ec4\u65e8\u5728\u5c55\u793a\u4e0eMetasurfaces\u7684\u7ea2\u5916\u6210\u50cf\u3002\u6211\u4eec\u8bbe\u8ba1\u4e86\u7531\u6570\u767e\u4e2a\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5fae\u5c0f\u6676\u4f53\u5929\u7ebf\u7ec4\u6210\u7684\u5143\u8868\u9762\uff0c\u7531\u7837\u5316\u9553\u5236\u6210\u3002\n \u8fd9\u79cd\u5143\u8868\u9762\u8bbe\u8ba1\u7528\u4e8e\u901a\u8fc7\u67d0\u4e9b\u7ea2\u5916\u9891\u7387\u7684\u5171\u632f\u653e\u5927\u5149\uff0c\u4ee5\u53ca\u6fc0\u5149\u5668\u7684\u9891\u7387\u548c\u53ef\u89c1\u5149\u8f93\u51fa\u3002\u7136\u540e\u6211\u4eec\u5236\u9020\u4e86\u91d1\u5c5e\u8868\u9762\u5e76\u5c06\u5176\u8f6c\u79fb\u5230\u900f\u660e\u73bb\u7483\u4e0a\uff0c\u5728\u73bb\u7483\u8868\u9762\u4e0a\u5f62\u6210\u4e00\u5c42\u7eb3\u7c73\u6676\u4f53\u3002 \n\u4e3a\u4e86\u6d4b\u8bd5\u6211\u4eec\u7684\u5143\u66f2\u9762\uff0c\u6211\u4eec\u7528\u76ee\u6807\u7684\u7ea2\u5916\u56fe\u50cf\u7167\u4eae\u5b83\uff0c\u5e76\u770b\u5230\u7ea2\u5916\u56fe\u50cf\u88ab\u8f6c\u6362\u4e3a\u200b\u200b\u53ef\u89c1\u7684\u7eff\u8272\u56fe\u50cf\u3002\u6211\u4eec\u7528\u76ee\u6807\u7684\u5404\u79cd\u4f4d\u7f6e\u6d4b\u8bd5\u4e86\u8fd9\u4e00\u70b9\uff0c\u4e5f\u6ca1\u6709\u76ee\u6807 - \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u770b\u5230Metasurface\u672c\u8eab\u7684\u7eff\u8272\u6392\u653e\u3002\u5728\u83b7\u5f97\u7684\u56fe\u50cf\u4e2d\uff0c\u6697\u6761\u7eb9\u5bf9\u5e94\u4e8e\u7ea2\u5916\u76ee\u6807\uff0c\u88ab\u7eff\u8272\u53ef\u89c1\u53d1\u5c04\u5305\u56f4\u3002\n \u5c3d\u7ba1\u901a\u8fc7\u7ec4\u5408\u5143\u8868\u9762\u7684\u72ec\u7acb\u7eb3\u7c73\u6676\u4f53\u4e0a\u5347\u7684\u7ea2\u5916\u56fe\u50cf\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u4f46\u662f\u5728\u53ef\u89c1\u5149\u4e2d\u518d\u73b0\u56fe\u50cf\u3002\n  \u867d\u7136\u6211\u4eec\u7684\u5b9e\u9a8c\u53ea\u662f\u4e00\u4e2a\u6982\u5ff5\u8bc1\u660e\uff0c\u4f46\u8be5\u6280\u672f\u539f\u5219\u4e0a\u53ef\u4ee5\u505a\u5f88\u591a\u4e0d\u53ef\u80fd\u4e0e\u4f20\u7edf\u7cfb\u7edf\u4e0d\u53ef\u80fd\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\u66f4\u5e7f\u6cdb\u7684\u89c6\u89d2\u548c\u591a\u8272\u7ea2\u5916\u6210\u50cf\u3002\n  \u7531\u4e8e\u591c\u89c6\u4e4b\u5916\u7684\u5404\u79cd\u5e94\u7528\uff0c\u5bf9\u4eba\u773c\u4e0d\u53ef\u89c1\u7684\u7ea2\u5916\u5149\u7684\u9700\u6c42\u4e0d\u65ad\u589e\u957f\u3002\u8be5\u6280\u672f\u53ef\u7528\u4e8e\u519c\u4e1a\u4ea7\u4e1a\uff0c\u4ee5\u5e2e\u52a9\u76d1\u63a7\u548c\u7ef4\u6301\u98df\u54c1\u8d28\u91cf\u63a7\u5236\uff0c\u4ee5\u53caLIDAR\u7684\u9065\u611f\u6280\u672f - \u4e00\u79cd\u6709\u52a9\u4e8e\u6620\u5c04\u81ea\u7136\u548c\u4eba\u9020\u73af\u5883\u7684\u6280\u672f\u3002\n \u5728\u66f4\u5e7f\u6cdb\u7684\u80cc\u666f\u4e0b\uff0c\u4f7f\u7528Metasurfaces\u6765\u68c0\u6d4b\uff0c\u4ea7\u751f\u548c\u64cd\u7eb5\u5149\u7ebf\u84ec\u52c3\u53d1\u5c55\u3002\u5229\u7528Metasurfaces\u7684\u529b\u91cf\u5c06\u4f7f\u6211\u4eec\u66f4\u63a5\u8fd1\u5b9e\u65f6\u5168\u606f\u663e\u793a\u5668\uff0c\u81ea\u4e3b\u7cfb\u7edf\u7684\u4eba\u5de5\u89c6\u89c9\uff0c\u4ee5\u53ca\u8d85\u5feb\u901f\u7684\u57fa\u4e8eWiFi\u7684\u6280\u672f\u3002 ", "note_en": "It\u2019s a familiar vision to anyone who has watched a lot of action movies or played Call of Duty: a ghostly green image that makes invisible objects visible. Since the development of the first night-vision devices in the mid-1960s, the technology has captured the popular imagination.\n Night vision goggles, infrared cameras and other similar devices detect infrared light reflected from objects or rather detect infrared light emitted from objects in the form of heat. Today these devices are widely used not only by the military, but also by law enforcement and emergency services, the security and surveillance industries, wildlife hunters, and camping enthusiasts.\n But current technology is not without its problems. Commercial infrared cameras block visible light, disrupting normal vision. The gear is bulky and heavy, and requires low temperatures \u2014 and, in some cases, even cryogenic cooling \u2014 to work.\n  We have proposed a new technology that uses ultra-thin layers of nanocrystals to make infrared light visible, addressing many of the longstanding problems with current devices. Our research is published in  Advanced Photonics.\n  Our eventual goal is to produce a light, film-like layer that can sit on glasses or other lenses, powered by a tiny built-in laser, allowing people to see in the dark.\n  Commercial infrared cameras convert infrared light to an electric signal, which is then shown on a display screen. They require low temperatures, because of the low energy and frequency of infrared light. This makes conventional infrared detectors bulky and heavy \u2013 some security personnel have reported chronic neck injury due to  regular use of night vision goggles .\n Another drawback of the current technology is that it blocks the transmission of visible light, thereby disrupting normal vision. In some cases, infrared images could be sent to a display monitor, leaving normal vision intact. However, this solution is not feasible when users are on the move.\n     There are also some all-optical  alternatives, which do not involve electrical signals. Instead, they directly convert infrared light into visible light. The visible light can then be captured by the eye or a camera.\n These technologies work by combining incoming infrared light with a strong light source \u2013 a laser beam \u2013 inside a material known as \u201cnonlinear crystal\u201d. The crystal then emits light in the visible spectrum.\n However, nonlinear crystals are bulky and expensive, and can only detect light in a narrow band of infrared frequencies.\n  Our work advances this all-optical approach. Instead of a non-linear crystal, we set out to use carefully designed layers of nanocrystal called \u201cmetasurfaces\u201d. Metasurfaces are ultra-thin and ultra-light, and can be tweaked to manipulate the color or frequency of the light that passes through them.\n This makes metasurfaces an attractive platform to convert infrared photons to the visible. Importantly, transparent metasurfaces could enable infrared imaging and allow for normal vision at the same time.\n Our group set out to demonstrate infrared imaging with metasurfaces. We designed a metasurface composed of hundreds of incredibly tiny crystal antennas made of the semiconductor gallium arsenide.\n This metasurface was designed to amplify light by resonance at certain infrared frequencies, as well as the frequency of the laser and the visible light output. We then fabricated the metasurface and transferred it to a transparent glass, forming a layer of nanocrystals on a glass surface.\n  To test our metasurface, we illuminated it with infrared images of a target and saw that the infrared images were converted to visible green images. We tested this with various positions of the target, and also with no target at all \u2014 so we could see the green emission of the metasurface itself. In the images obtained, the dark stripes correspond to the infrared target, surrounded by the green visible emission.\n Despite different parts of the infrared images being up-converted by independent nanocrystals composing the metasurface, the images were well reproduced in visible light.\n  While our experiment is only a proof of concept, this technology can in principle do many things that are not possible with conventional systems, such as a broader angle of view and multi-colour infrared imaging.\n  The demand for detecting infrared light, invisible to human eyes, is constantly growing, due to a wide variety of applications beyond night vision. The technology could be used in the agricultural industry to help monitor and maintain food quality control, and in remote sensing techniques such as LIDAR \u2013 a technology that is helping to map natural and manmade environments.\n In a wider context, the use of metasurfaces to detect, generate and manipulate light is booming. Harnessing the power of metasurfaces will bring us closer to technologies such as real-time holographic displays, artificial vision for autonomous systems, and ultra-fast light-based wifi.", "posttime": "2021-06-26 16:41:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8584\u819c,crystal,\u7ea2\u5916", "title": "\u5fae\u578b\u6676\u4f53\u8584\u819c\u53ef\u4ee5\u8ba9\u591c\u89c6\u6210\u4e3a\u65e5\u5e38\u7684\u73b0\u5b9e ", "title_en": "Tiny crystal films could make night vision an everyday reality", "transed": 1, "url": "https://theconversation.com/seeing-the-invisible-tiny-crystal-films-could-make-night-vision-an-everyday-reality-162615", "via": "", "real_tags": ["\u8584\u819c", "crystal", "\u7ea2\u5916"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068405, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\n\u53d1\u8868\u4e8e3\u670822\u65e5\uff0c2021 20:52 UTC\uff08Mon\uff09\u7531Cyber\u200b\u200bax\uff08\u272d\u652f\u6301\u8005\u272d\uff0c\uff0352523\uff09[\u94fe\u63a5]\n  \u591a\u5e74\u6765\u6211\u53d1\u73b0\u5976\u725b\u5f88\u7cdf\u7cd5\uff0c\u6700\u597d\u907f\u514d\u5b83\u4eec\u3002\n \u5982\u679c\u4f60\uff06\uff0339;\u91cd\u65b0\u6253\u7834API\u517c\u5bb9\u6027\uff0c*\u7136\u540e\u4f60\u53ef\u80fd\u53ea\u662f\u544a\u8bc9\u4eba\u4eec\u4f7f\u7528vfork\uff08\uff09\u6216posix_spawn\uff08\uff09\uff0c\u56e0\u4e3a\u90a3\u4e9b\u5df2\u7ecf\u6210\u719f\u5e76\u4e14\u5f88\u597d\u5730\u7406\u89e3\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u540e\u8005\u751a\u81f3\u662f\u4fbf\u643a\u5f0f\u7684\u3002\u987a\u4fbf\u63d0\u4e00\u4e0b\uff0c\u5728\u7814\u7a76\u8fd9\u4e00\u8bc4\u8bba\u65f6\uff0c\u6211\u5076\u7136\u53d1\u73b0\u4e86\u6765\u81ea\u514b\u9686\uff082\uff09\uff1a\uff06gt\u7684TIDBIT;\u4e0eGlibc\u5305\u88c5\u5668\u76f8\u6bd4\uff0c\u539f\u59cb\u514b\u9686\uff08\uff09\u7cfb\u7edf\u8c03\u7528\uff06gt;\u63a5\u53d7\u7a7a\u503c\u4f5c\u4e3a\u5806\u6808\u53c2\u6570\uff08\u514b\u96863\uff08\uff09\u540c\u6837\u5141\u8bb8\uff06gt; cl_args.stack\u4e3anull\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b69\u5b50\u4f7f\u7528A\uff06gt;\u7236\u6bcd\uff06\uff0339; s\u5806\u6808\u7684\u526f\u672c\u3002 \uff08\u7f16\u5199\u7f16\u5199\u7684\u8bed\u4e49\u4fdd\u8bc1\uff06gt;\u5f53\u5b69\u5b50\uff06gt\u65f6\uff0c\u5b69\u5b50\u4f1a\u5728\uff06gt;\u8fc7\u7a0b\u4fee\u6539\u5806\u6808\u65f6\u5355\u72ec\u7684\u5806\u53e0\u526f\u672c\u3002\uff09\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u6b63\u786e\u800cGT;\u64cd\u4f5c\uff0c\u4e0d\u5e94\u6307\u5b9aCLONE_VM\u9009\u9879\u3002 \uff08\u5982\u679c\u662f\uff06gt;\u5b69\u5b50\u56e0\u4f7f\u7528\uff06gt; clone_vm\u6807\u5fd7\u800c\u5206\u4eab\u7236\u7ea7\uff06\uff0339; s\u5185\u5b58\uff0c\u90a3\u4e48\u6ca1\u6709\u53d1\u751f\u7f16\u5199\u7684\u590d\u5236\u590d\u5236\u548c\u6df7\u4e71\u548cgt;\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u3002\uff09\u542c\u8d77\u6765\u50cf\u662f\u8fd9\u6837\u7684\u58f0\u97f3\u6253\u7535\u8bdd\u7684\u4e50\u8da3\u3002\u73b0\u5728\u6211\u60f3\u77e5\u9053\u662f\u5426\u6709\u4efb\u4f55\u5f00\u53d1\u8005\u5df2\u7ecf\u51b3\u5b9a\u4ed6\u4eec\uff06\uff0334;\u9700\u8981\uff06\uff0334;\u7ed5\u8fc7Glibc\u5e76\u5728\u6211\u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u62c9\u8fd9\u7c7b\u6697\u793a......\uff08\u6211\u662f\u4e00\u4e2aSRE\uff0c\u6240\u4ee5\u5982\u679c\u5b83\u5728\u751f\u4ea7\u4e2d\u95ef\u5165\uff0c\u90a3\u4e48\u6211\u7684\u95ee\u9898\u662f\u6211\u7684\u95ee\u9898\u3002 \uff06\uff0334;\u5e78\u8fd0\u7684\u662f\uff0c\uff06\uff0334;\u5927\u591a\u6570\u866b\u5b50I\uff06\uff0339;\u5df2\u7ecf\u770b\u5230\u7684\u5f80\u5f80\u6bd4\u8fd9\u66f4\u9ad8\uff0c\u4f46\u5b83\u4ecd\u7136\u6709\u70b9\u53ef\u6015\uff0c\u5373\u5185\u6838\u5c06\u8ba9\u4f60\u505a\u90a3\u6837\u7684\u4e8b\u60c5\u3002 *\u8fd9\u663e\u7136\u4e0d\u4f1a\u5728\u5185\u6838\u548c\uff0339;\u4e0d\u6253\u7834\u7528\u6237\u7a7a\u95f4\u7684\u7c89\u4e1d\u5949\u732e\uff0c\u4f46\u662f\u5047\u88c5\u4e00\u4f1a\u513f\u3002\n \u53d1\u8868\u4e8e3\u670823\u65e5\uff0c2021\u5e7410:08 UTC\uff08Tue\uff09\u7531Pbonzini\uff08\u272d\u652f\u6301\u8005\u272d\uff0c\uff0360935\uff09[\u94fe\u63a5]\n  posix_spawn\uff08\uff09\u4e0d\u662f\u5355\u4e2a\u7cfb\u7edf\u8c03\u7528\uff08\u6280\u672f\u4e0a\uff0cFork\uff08\uff09\u548cvfork\uff08\uff09\u662f\u514b\u9686\uff082\uff09\u5468\u56f4\u7684\u5305\u88c5\u5668\uff0c\u4f46\u81f3\u5c11\u540e\u8005\u662f\u5355\u4e2a\u7cfb\u7edf\u8c03\u7528\uff09\u3002\n \u80af\u5b9a\uff0c\u4f46\u5728\uff08\u8352\u8c2c\uff09\u5047\u8bbe\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u6d88\u9664\u725b\u7684\u5047\u8bbe\uff0c\u5185\u6838\u53ef\u80fd\u9700\u8981\u5ef6\u4f38\u4e0e\u7c7b\u4f3c\u4e8eFork + Exec\u7684\u80fd\u529b\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u8be5\u63a5\u53e3\u7684POSIX\u6807\u51c6\u540d\u79f0\u662fposix_spawn\u3002\n \u53d1\u8868\u4e8e3\u670823\u65e5\uff0c2021 23:00 UTC\uff08Tue\uff09\u7531Cyber\u200b\u200bax\uff08\u272d\u652f\u6301\u8005\u272d\uff0c\uff0352523\uff09[\u94fe\u63a5] \n\u663e\u7136\uff0c\u4eba\u4eec\u4e0d\u559c\u6b22posix_spawn\u3002\u4e5f\u8bb8\u6211\u4eec\u4f1a\u5c55\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684\u66f4\u6362\uff0c\u5141\u8bb8\u521b\u5efa\u6682\u505c\u7684\u8fc7\u7a0b\uff0c\u8c03\u6574\u5176\u5c5e\u6027\uff08\u4f7f\u7528\u57fa\u4e8e\u6587\u4ef6\u53e5\u67c4\u7684API\uff09\uff0c\u7136\u540e\u6062\u590d\u5b83\u3002\u4f46\u6211\u89c9\u5f97\u6211\u4eec\u5b9e\u9645\u4e0a\u7684\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u57fa\u4e8eIO_URE\u7684API\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528BPF\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n \u6211\u4eec_almost_\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2aAPI\uff1aPtrace\u3002\u8f7b\u5fae\u7684\u95ee\u9898\u662fptrace\u771f\u7684\u5f88\u7cdf\u7cd5\u3002\u5b83\u7684\u5efa\u8bae\u4e5f\u592a\u7cdf\u7cd5\u4e86\uff0c\u6dfb\u52a0\u4e86\u57fa\u4e8eSaner\u5904\u7406\u7684\u7248\u672c\u3002\n  \u51e0\u5e74\u524d\u6211\u4eec\u8ba8\u8bba\u4e86\u8fd9\u7bc7\u8bba\u6587\uff0c\u8fd9\u4e89\u8fa9\u8bf4\uff0cFork\uff08\uff09\u57fa\u672c\u4e0a\u662f\u9519\u8bef\u7684\u539f\u59cb\u539f\u59cb\uff0c\u53ef\u4ee5\u6784\u5efaOS\u6d41\u7a0b\u7ba1\u7406\uff1ahttps://lwn.net/arlicle/785430/\n  \u53d1\u8868\u4e8e3\u670823\u65e5\uff0c2021\u5e7414:17 UTC\uff08TUE\uff09\u901a\u8fc7ABATTERS\uff08\u272d\u652f\u6301\u8005\u272d\uff0c\uff036932\uff09[\u94fe\u63a5]\n  \u6211\u6700\u8fd1\u8003\u8651\u8fc7vfork\uff08\uff09\uff0c\u4f46\u5728\u9047\u5230\u6709\u5173\u5b83\u7684\u8b66\u544a\u592a\u591a\u65f6\u6700\u7ec8\u4f1a\u53cd\u5bf9\u5b83\u3002\u4f8b\u5982\uff0c\u8bf7\u53c2\u9605Posix_spawn\uff08\uff09\u7684Vfork\uff08\uff09\u7684glibc\u5386\u53f2\uff1aglibc\uff06lt; = 2.23\uff1aposix_spawn\uff08\uff09\u4f7f\u7528vfork\uff08\uff09\u5982\u679c\u8bbe\u7f6e\u4e86posix_spawn_usevfork\uff0c\u6216\u8005\u5982\u679c\u5728IT Exec\uff083\uff09\u4e4b\u524d\u6ca1\u6709\u9884\u671f\u7684\u6e05\u9664\uff0c\u5219S\u8bf7\u6c42\u7684\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u8fd9\u79cdvfork\uff08\uff09\u7684\u5b9e\u73b0\u662f\u8bb8\u591a\u9519\u8bef\u7684\u6765\u6e90\u3002 Linux Glibc\uff06gt; = 2.24\uff1aglibc\u63d0\u4ea49ff72da471a509a8c19791fe4697910469791046979105C19791046979110POSIX_SPAWN\uff08\uff09\u4ecevfork\uff08\uff09\u4ea4\u6362\u5230\u514b\u9686\uff08\u514b\u9686_vm | clone_vfork\uff09\uff0c\u5b83\u4f7f\u7528\u5355\u72ec\u7684\u5806\u6808\u4e3a\u5b69\u5b50\u3002\u8fd9\u4fee\u590d\u4e86\u8bb8\u591avfork\uff08\uff09 - \u76f8\u5173\u7684\u9519\u8bef\uff08\uff06\uff0334;\u53ef\u80fd\u7684\u7236clobber\u5230\u671f\u5806\u6808\u6ea2\u51fa\uff06\uff0334;\uff09\uff0c\u4f7f\u5176\u53ef\u4ee5\u901a\u8fc7\u9ed8\u8ba4\u548c\u5ffd\u7565posix_spawn_usevfork\u6765\u5b9e\u73b0\u3002\u6700\u8fd1\u7684\u975eLinux Glibc Glibc\u63d0\u4ea4CCFB2964726512F6669FEA99A43AFA714E2E6A80 POSIX_SPAWN_USEVFORK\u88ab\u5ffd\u7565\uff0c\u59cb\u7ec8\u4f7f\u7528\u5e38\u89c4\u53c9\uff08\uff09\uff0c\u7531\u4e8e\u96be\u70b9vfork\uff08\uff09\u5728\u6ca1\u6709Linux\u7279\u5b9a\u7684\u514b\u9686\uff08\uff09\u8bed\u4e49\u7684\u60c5\u51b5\u4e0b\u5de5\u4f5c\u3002\u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528CLONE\uff08CLONE_VM | CLONE_VFORK\uff09\u5b89\u5168\u5730\u9700\u8981\u963b\u6b62\u6240\u6709\u4fe1\u53f7\uff0c\u5305\u62ecNPTL\u5185\u90e8\u4fe1\u53f7\u3002\u4f46\u662fGlibc\u5305\u88c5\u5668Don\uff06\uff0339; t\u8ba9\u60a8\u963b\u6b62NPTL-Internal Signal\uff0c\u4f7f\u5f97\u5728Glibc\u4e4b\u5916\u66f4\u96be\u4ee5\u505a\u5230\u3002\u67e5\u770b\u6240\u6709\u8840\u8165\u7ec6\u8282\u7684Glibc\u5b9e\u73b0\u3002\n  Na\u00efve\u975e\u5185\u6838\u5f00\u53d1\u4eba\u5458\u89c6\u89d2\uff1a\u8fd9\u4f3c\u4e4e_intually_\u5c31\u50cf\u95ee\u9898\u7684\u9519\u8bef\u89e3\u51b3\u65b9\u6848\u4e00\u6837\u3002\u5b69\u5b50\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u8be5\u9875\u9762\uff0c\u6240\u4ee5\u80af\u5b9a\u5e94\u8be5\u88ab\u6807\u8bb0\u4e3a\u8bbf\u95ee\u8be5\u9875\u9762\uff0c\u53ea\u8981\u5b83\u786e\u5b9e\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u5047\u88c5\u5b83\u5e76\u6ca1\u6709\u8bbf\u95ee\u8be5\u9875\u9762\u53ea\u662f\u56e0\u4e3a\u5b83\u662fmunmap\uff06\uff0339; d\u3002\u53ea\u662f\u56e0\u4e3a\u9875\u9762\u5df2\u7ecf\u662fMunmap\uff06\uff0339; d\u5e76\u4e0d\u610f\u5473\u7740\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\uff06\uff0339; t\u4ece\u4e2d\u8bfb\u53d6\uff0c\u4e3a\u4ec0\u4e48\u9875\u8868\u8868\u5220\u9664\u4e86\uff1f\u4f46\u662f\uff0c\u6211\u5047\u8bbe\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u539f\u56e0\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u4e86\u3002\u6709\u4eba\u53ef\u4ee5\u6e05\u7406\u6211\u7684\u8bef\u89e3\u5417\uff1f\n \uff06gt;\u5b69\u5b50\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u8be5\u9875\u9762\uff0c\u6240\u4ee5\u80af\u5b9a\u5e94\u8be5\u88ab\u6807\u8bb0\u4e3a\u8bbf\u95ee\u8be5\u9875\u9762\uff0c\u53ea\u8981\u5b83\u786e\u5b9e\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u5047\u88c5\u5b83\u5e76\u6ca1\u6709\u8bbf\u95ee\u8be5\u9875\u9762\u53ea\u662f\u56e0\u4e3a\u5b83\u662fmunmap\uff06\uff0339; d\u3002\u6211\u4e0d\u786e\u5b9a\u6211\u7406\u89e3\u4f60\u7684\u89c2\u70b9\uff0c\u4f46\u662f\u901a\u8fc7\u63d0\u4ea4\u6765\u963b\u6b62\u8fd9\u4e2a\u95ee\u9898\u3002\u5f53\u5b69\u5b50\u60f3\u8981\u91c7\u53d6\u989d\u5916\u7684\u53c2\u8003\uff08\u5bf9\u4e8eVMSPLICE\uff08\uff09\uff09\uff0c\u5b83\u4f1a\u83b7\u5f97\u526f\u672c\u800c\u4e0d\u662f\u4e0e\u7236\u7ea7\u5171\u4eab\u7684\u9875\u9762\u3002\u4e4b\u540e\uff0c\u5b69\u5b50\u7684\u9875\u9762\u8868\u548c\u7ba1\u9053\u70b9\u6301\u6709\u7684\u5f15\u7528\u70b9\u5bf9\u6b64\u65b0\u526f\u672c\uff0c\u4ee5\u53ca\u5bf9\u7236\u7ea7\u7684\u8bbf\u95ee\u4e22\u5931\u3002 \uff06gt;\u53ea\u662f\u56e0\u4e3a\u9875\u9762\u5df2\u7ecf\u662fMunmap\uff06\uff0339; d\u5e76\u4e0d\u610f\u5473\u7740\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\uff06\uff0339; t\u4ece\u4e2d\u8bfb\u53d6\uff0c\u4e3a\u4ec0\u4e48\u9875\u8868\u8868\u5220\u9664\u4e86\uff1f\u8fd9\u53ea\u662fMunmap\uff08\uff09\u7684\u8bed\u4e49 - \u5b83 - \u5b83\u5fc5\u987b\u8c03\u6574VMA\u6811\u548cZAP Page\u8868\u6761\u76ee\uff0c\u4ee5\u4fbf\u5728\u90a3\u91cc\u4e0d\u518d\u8868\u793aMunmapped Range\u3002\u7136\u540e\uff0c\u5982\u679c\u8be5\u8fc7\u7a0b\u5c1d\u8bd5\u8bfb\u53d6/\u5199\u5165\u8be5\u533a\u57df\u5185\u7684\u5730\u5740\uff0cIT SEGFAULTS\u3002\u6211\u4eec\u53ef\u4ee5\uff06\uff0339; t\u7559\u4e0b\u9875\u8868\u6761\u76ee\uff0c\u4ec5\u662f\u56e0\u4e3a\u53e6\u4e00\u4e2a\u5f15\u7528\u5b58\u5728\u3002\u4ece\u7ba1\u9053\u8bfb\u53d6\u5e76\u901a\u8fc7\u8fd9\u4e9b\u9875\u9762\u8868\u3002 \n\u4f5c\u4e3a\u975e\u5185\u6838\u5f00\u53d1\u4eba\u5458\uff0c\u6211\uff06\uff0339;\u597d\u5947\uff1a\u56de\u60f3\u8d77\u6765\uff0c\u8fd9\u5934\u725b\u662f\u6839\u672c\u9519\u8bef\u7684\u5417\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u6cbb\u7597VMSplice\u53c2\u8003\uff06\uff0334;\u53c2\u8003\u8d44\u6599\uff06\uff0334;\u5728Munmap\u4e4b\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u6237\u7a7a\u95f4\u8fc7\u7a0b\u65e0\u6cd5\u8fdb\u5165\u7684\u9875\u9762\uff0c\u540c\u65f6\u4ecd\u7136\u4fdd\u6301\u5185\u6838\uff06\uff0339; s\u5f15\u7528\uff1f\n \u539f\u5219\u662f\uff0c\u4f46\u662f\u4f60\u6709\u5176\u4ed6\u95ee\u9898\u3002\u4f8b\u5982\uff0cMMAP\u53ef\u7528\u4e8e\u5728\u56fa\u5b9a\u5730\u5740\u5904\u5206\u914d\u5185\u5b58\u3002\u96be\u4ee5\u5224\u65ad\u4efb\u4f55\u7ed9\u5b9a\u7684\u5730\u5740\u662f\u5426\u5408\u9002\uff08\u56e0\u4e3a\u5176\u4ed6\u9875\u9762\u7b49\u53ef\u80fd\u662f\u5728\u8def\u4e0a\uff09\uff0c\u4f46\u5982\u679c\u60a8\u53ea\u662f\u521a\u521a\u6620\u5c04\u5b83\uff0c\u90a3\u4e48\u5728\u540c\u4e00\u5730\u5740\u548c\u5927\u5c0f\u7684\u540e\u7eedMMAP\u4e2d\uff0c\u5b83\u5c06\u771f\u7684\u5f88\u5947\u602a\u3002\u7528\u6237\u4f69\u52e4\u53ef\u80fd\u4f1a\u5047\u8bbe\u5b83\u4e0d\u9700\u8981\u68c0\u67e5\u8be5\u6848\u4f8b\u4e2dmmap\u7684\u9519\u8bef\u4ee3\u7801\uff08\u6216\u8005\u5b83\u53ef\u80fd\u6ca1\u6709\u5408\u9002\u7684\u6062\u590d\u4ee3\u7801\uff0c\u5e76\u4e14\u53ea\u9700\u547c\u53eb\u4e2d\u6b62\uff083\uff09\uff09\u3002\u56e0\u6b64\uff0c\u73b0\u5728\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u9700\u8981\u5728\u9690\u85cf\u9875\u9762\u9876\u90e8\u5806\u53e0\u5806\u53e0\u65b0\u9875\u9762\uff0c\u6216\u91cd\u65b0\u5b9a\u4f4d\u9690\u85cf\u9875\u9762\uff0c\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u90fd\u662f\u4e0d\u52a8\u7684\u3002\u751a\u81f3\u6ca1\u6709\u63d0\u5230\u60a8\u9700\u8981\u6559\u5bfcVMSplice\u4ee5\u4e0ePages Do\u76f8\u540c\u7684\u65b9\u5f0f\u8ddf\u8e2aVMSplice\u4ee5\u8ddf\u8e2a\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5f15\u7528\uff0c\u800c\u6ca1\u6709\u7528\u6237\u7a7a\u95f4\u9875\u9762\u6620\u5c04\u4e2d\u5b9e\u9645\u5b58\u5728\u7684\u9875\u9762\u3002\u8fd9\u4e9b\u90fd\u662f\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b89\u5168\u95ee\u9898\uff0c\u56e0\u6b64\u89e3\u51b3\u4e86\u96be\u9898\u4e0d\u662f\u4fee\u590d\u7684\u7406\u60f3\u5f62\u5f0f\u3002\u5728\u7b80\u5355\u7684\u725b\u4f11\u606f\u4e2d\u6295\u63b7\u662f\u4e00\u79cd\u66f4\u76f4\u63a5\u7684\u89e3\u51b3\u65b9\u6848\uff08\u4f46\u662f\uff0c\u4f5c\u4e3a\u6545\u4e8b\u6697\u793a\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u5e76\u53d1\u75c7\uff0c\u4ed6\u4eec\u672a\u80fd\u89e3\u91ca\uff09\u3002\n \uff06gt;\u5982\u679c\u60a8\u53ea\u662f\u521a\u521aMunmapped\u5b83\uff0c\u5bf9\u4e8e\u540c\u4e00\u5730\u5740\u548c\u5927\u5c0f\u7684\u540e\u7eedMMAP\uff0c\u5b83\u5c06\u975e\u5e38\u5947\u602a\u3002\u7528\u6237\u4f69\u52e4\u53ef\u80fd\u4f1a\u5047\u8bbe\u5b83\u4e0d\u9700\u8981\u68c0\u67e5\u8be5\u6848\u4f8b\u4e2dmmap\u7684\u9519\u8bef\u4ee3\u7801\uff08\u6216\u8005\u5b83\u53ef\u80fd\u6ca1\u6709\u5408\u9002\u7684\u6062\u590d\u4ee3\u7801\uff0c\u5e76\u4e14\u53ea\u9700\u547c\u53eb\u4e2d\u6b62\uff083\uff09\uff09\u3002\u8fd9\u8ba9\u6211\u60f3\u8d77\u4e86\u4e00\u4e2a\u53e4\u8001\u7684\u9519\u8bef\uff1a\u5927\u7ea6\u5341\u5e74\u524d\uff0cFirefox\uff08\u4f7f\u7528Jemalloc\u7684\u4ee3\u7801\uff09\u4f1a\u5c1d\u8bd5\u505a\u4e00\u4e2a\u5927\u7684\u5bf9\u9f50\u5206\u914d\uff0c\u5982\uff06\uff0334; p = mmap\uff08null\uff0csize * 2\uff09; Munmap\uff08P\uff09; p = mmap\uff08round_up\uff08p\uff0c\u5bf9\u9f50\uff09\uff0c\u5927\u5c0f\uff09;\uff06\uff0334;\u5373\uff0c\u4f7f\u7528\u7b2c\u4e00\u4e2aMMAP + MUNMAP\u5728\u5730\u5740\u7a7a\u95f4\u4e2d\u53d1\u73b0\u8db3\u591f\u5927\u7684\u5b54\uff0c\u7136\u540e\u5728\u8be5\u5b54\u4e2d\u7684\u6b63\u786e\u5bf9\u9f50\u5730\u5740\u5904\u5206\u914d\u3002\u5982\u679c\u7b2c\u4e8c\u4e2aMMAP and\uff0339; t\u8fd4\u56de\u8bf7\u6c42\u7684\u5730\u5740\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u7ade\u4e89\u6761\u4ef6\u4e0e\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5206\u914d\u5728\u540c\u4e00\u4e2a\u5b54\u4e2d\uff0c\u56e0\u6b64\u5b83\u4f1a\u5faa\u73af\u5e76\u518d\u6b21\u5c1d\u8bd5\uff0c\u5e76\u5e0c\u671b\u4e0b\u6b21\u66f4\u597d\u8fd0\u6c14\u3002\u8fd9\u6b63\u5e38\u5de5\u4f5c\u597d\uff0c\u76f4\u5230\u5b83\u5728\u5185\u6838\u4e0a\u8fd0\u884c\u4e86\u968f\u673aMMAP\u7684\u5b89\u5168\u529f\u80fd\uff0c\u5e76\u5b8c\u5168\u5ffd\u7565\u4e86\u5730\u5740\u53c2\u6570\uff08\u4ece\u6280\u672f\u4e0a\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u5b83\u88ab\u5b9a\u4e49\u4e3a\u53ea\u662f\u4e00\u4e2a\u63d0\u793a\uff0c\u800c\u4e0d\u662f\u8981\u6c42\uff09\uff0c\u56e0\u6b64\u4ee3\u7801\u88ab\u56f0\u5728\u65e0\u9650\u5faa\u73af\u3002\u8fd9\u662f\u56fa\u5b9a\u7684\u5e74\u9f84\uff0c\u4f46\u5b83\u786e\u5b9e\u53ef\u4ee5\u5408\u7406\u4e8e\u67d0\u4e9b\u7528\u6237\u7a7a\u95f4\u4ee3\u7801\u53ef\u80fd\u4ecd\u7136\u540c\u6837\u4e0d\u660e\u667a\u7684\u5047\u8bbe\u3002\n  PTE\u5fc5\u987b\u6d88\u5931\uff0c\u56e0\u4e3a\u90a3\u4e2a\uff06\uff0339; s\u88ab\u6307\u5b9a\u4e3adummap\uff08\uff09\u662f\u4ec0\u4e48\u3002\u6b64\u5916\uff0c\u5b83\u7684\u4e8b\u5b9e\uff06\uff0339; s t\n...... ", "note_en": "Please consider subscribing to LWN Subscriptions are the lifeblood of LWN.net. If you appreciate this content and would like to see more of it, your subscription will help to ensure that LWN continues to thrive. Please visit  this page to join up and keep LWN on the net.\n   The kernel&#39;s memory-management subsystem is built upon many concepts, oneof which is called &#34;copy on write&#34;, or &#34;COW&#34;.The idea behind COW is conceptually simple, but itsdetails are tricky and its past is troublesome. Any change to itsimplementation can have unexpected consequences and cause subtle breakagefor existing workloads. So it is somewhat surprising that last year we sawtwo major changes the kernel&#39;s COW code; less surprising is the fact that,both times, these changes had unexpected consequences and broke things. Some of the resulting problems are still not fixedtoday, almost ten months after the first change, while the original reasonfor the changes \u2014 a security vulnerability \u2014 is also not fully fixed. Readon for a description of COW, the vulnerability, and the initial fix; theconcluding article in the series will describe the complications that arosethereafter.  Copy on write is a standard mechanism for sharing a single instance of anobject between processes in a situation where each process has the illusionof an independent, private copy of that object. Examples include memorypages shared between processes or data extents shared between files. Tosee how COW is used in the memory-management subsystem, consider whathappens when a process calls  fork(): the pages in that process&#39;sprivate memory areas should no longer be shared between the parent andchild. But, instead of creating new copies of those pages for the childprocess during the  fork() call, the kernel will simply map theparent&#39;s pages in the child&#39;s page tables. Importantly, the page-tableentries in both parent and child are set as read-only (write-protected). If either process attempts to write to one of thesepages, a page fault will occur, and the kernel&#39;s page-fault handler willcreate a new copy of the page, replacing the page-table entry (PTE) in thefaulting process with a PTE that references the new page, but which allowsthe write to proceed. This action is often referred to as &#34;breakingCOW&#34;. If the other process then tries to write to that same page, anotherpage fault will occur, as that process&#39;s PTE is still marked read-only. But now thepage-fault handler will recognize that the page is no longer shared, sothe PTE can just be made writable and the process can resume. The benefits of this scheme are lower memory consumption and a reduction ofCPU time spent copying pages during  fork() calls. Often the priceof copying is never paid for many of the pages because the childmight call  exit() or  exec() before either the parent orthe child writes to those pages. While the COW mechanism looks simple, the devil is in the details, as hasbeen  shown already in the past. The recenttrouble in this area started in 2020; it resulted in two major changes whileattempting to fix a vulnerability \u2014 which is actually still not fixed in allscenarios \u2014 and resulted in many corner cases, some of which are still notfully ironed out. The first public sign of issues with the COW mechanism appeared in the form of commit 17839856fd58(&#34;gup: document and work around &#39;COW can break either way&#39;issue&#34;) at the end of May 2020. The changelog doesn&#39;t fully describe theproblem scenario, but what is there is ominous enough: End result: the get_user_pages() call might result in a page pointer that is no longer associated with the original VM, and is associated with - and controlled by - another VM having taken it over instead.\n Any doubts about whether the commit fixed a security vulnerability vanishwhen one notices the Reported-by tag mentioning Jann Horn; presumablyHorn&#39;s report went through the appropriate non-public securitychannels. The practice of making fixes to some vulnerabilities immediatelypublic without explicitly marking them as such is not new, especially inthe COW area. Nevertheless, the related  ProjectZero issue was made public in August, and CVE-2020-29374 was assignedin December; both point to the above-mentioned commit as the fix. As the Project Zero issue includes proof-of-concept (PoC) code, we can look atthe fix with that code in mind and not rely on the incomplete commit log. Themost important parts of the PoC are the following: static void *data; posix_memalign(&amp;data, 0x1000, 0x1000); strcpy(data, &#34;BORING DATA&#34;); if (fork() == 0) {\t// child\tint pipe_fds[2];\tstruct iovec iov = {.iov_base = data, .iov_len = 0x1000 };\tchar buf[0x1000];\tpipe(pipe_fds);\tvmsplice(pipe_fds[1], &amp;iov, 1, 0);\tmunmap(data, 0x1000);\tsleep(2);\tread(pipe_fds[0], buf, 0x1000);\tprintf(&#34;read string from child: %s\\n&#34;, buf); } else {\t// parent\tsleep(1);\tstrcpy(data, &#34;THIS IS SECRET&#34;); }\n The code starts by allocating an anonymous, private page and writing somedata there; it then calls  fork(). At that point, the page becomesa COW page \u2014 it is write-protected for the parent process by making thecorresponding page-table entry read-only, and for the child process anidentical PTE is created. Then, while the parent is blocked inside sleep(), the child creates a pipe and passes the page to that pipewith  vmsplice(), a system call that is similar to  write()but which allows a zero-copy data transfer of the page&#39;s contents. In orderto achieve that, the kernel takes a reference on the source page (by increasing itsreference count) through  get_user_page() or one of its variants;the set of these functions is often referred to as &#34;GUP&#34;. The child thenunmaps the page from its own page tables (but retains the reference in thepipe) and goes to sleep. The parent wakes up from its sleep and writes new data to the page. Thepage table entry is write-protected, so the write causes a page fault. Thepage-fault handler can tell that this is fault on a COW page because thethe mapping allows write access while the PTE is write protected. If therewere more processes mapping the page then the content would have to becopied (breaking COW), but if there is a single mapping, the page canbe just made writeable. The kernel relies on the value returned by  page_mapcount()to determine how many mappings exist. Here is the problem:  page_mapcount() at this point in the PoC&#39;sexecution includes only the parent&#39;s mapping, because the child has alreadycalled  munmap() on that page. This function does not take intoaccount the fact that the child can still access the parent&#39;s page throughthe pipe; it ignores the elevated page reference count. Thus, the kernel allowsthe parent process to write new data into the page, which is no longerconsidered to be a COW page. Finally, the child wakes up and reads that newdata from the pipe, which might include sensitive information that theparent did not expect the child to see. One might rightfully ask why this potential of leaking data from parent tochild can matter in practice, as both processes are normally executing thecode from the same binary and the  fork() only acts as a branch inthe code. So we can assume that, either the binary is trusted and thus thechild process is too, or it is not and then we probably should not let theparent access any sensitive data in the first place. And, in the scenariowhere  fork() from a trusted binary is followed by an exec() of a potentially malicious binary,  exec() removesall shared pages from the address space of the child process before loadingthe new binary. But, as the Project Zero issue mentions, there areenvironments, such as Android, where each process is forked from a zygoteprocess without a subsequent  exec(), for performance reasons.That could lead to a situation that looks a lot like the PoC exploit forthis bug. Moreover, the  vmsplice() syscall might just be a symptom of abroader issue, since there are many other callers of the GUP functions inthe kernel. So it is a good idea in general not to let a child processhold on to a page shared through the COW mechanism with the parent whileletting the parent write new contents to the page. To prevent exploits of this behavior,commit 17839856fd58 made it impossible to get areference (even a read-only reference) via GUP to a COW-shared page. Allsuch attempts now result in breaking COW and returning a reference to the new copy instead. Thus,in the PoC code above, calling  vmsplice() now causes the childprocess to replace the shared COW page in the corresponding page tableentry with a new page, which is then passed to the pipe. Afterward, thechild no longer has any way to access the parent&#39;s page and the newcontents written there. The commit notes the possibility of worse performance for some GUP users,especially those that rely on a lockless variant of the interface like get_user_pages_fast(). The changelog continues that finer-grainedrules could be added later for situations where it is clear that it is safe tokeep sharing the COW page because it can never be overwritten with new,potentially sensitive contents. The system-wide zero-page would be oneexample of this sort of situation. But otherwise, Linus Torvalds (theauthor of the change) expectedno fundamental issues with this aggressively COW-breaking approach forGUP. Linux 5.8 was duly released with this commit. And this, one might think, was the end of the problem. But, as wasmentioned at the outset, COW is a complicated and subtle beast. In truth,the problems were just beginning. The second half of this article willdelve into how the COW fix led to a stampede of new problems that stillhave yet to be completely solved.     ( Log in to post comments)\n  What a cliffhanger!  I certainly am glad that project zero is there to root out these bugs (pun intended).\n &#34;But, as the Project Zero issue mentions, there are environments, such as Android, where each process is forked from a zygote process without a subsequent exec(), for performance reasons. That could lead to a situation that looks a lot like the PoC exploit for this bug.&#34;\n  It&#39;s definitely a problem because it doesn&#39;t match the user&#39;s mental model of how fork() is supposed to work. It&#39;s clear that either COW must be broken in this case or a mapping must be retained (or the refcounts split into per-mm versions, which seems likely to be far more expensive). The conceptually ideal approach would have everything act just like normal data, i.e. recognise things like vmsplice references *as* references so you don&#39;t need to specially break COW early for them -- but this seems likely to be viciously complex and of only minor benefit. Of course, hunting down every single way a reference can be taken by a child and arranging to COW-break on all of them seems likely to be a nightmarish game of whack-a-mole too...\n  Posted Mar 22, 2021 20:52 UTC (Mon) by  Cyberax ( \u272d supporter \u272d, #52523) [ Link]\n  Over the years I found that COWs are just bad and it&#39;s best to avoid them altogether.\n If you&#39;re going to break API compatibility anyway,* then you might as well just tell people to use vfork() or posix_spawn(), as those are already mature and well-understood interfaces, and the latter is even portable.  Incidentally, while researching this comment, I stumbled across this tidbit from clone(2):  &gt; In contrast to the glibc wrapper, the raw clone() system call  &gt; accepts NULL as a stack argument (and clone3() likewise allows  &gt; cl_args.stack to be NULL). In this case, the child uses a  &gt; duplicate of the parent&#39;s stack. (Copy-on-write semantics ensure  &gt; that the child gets separate copies of stack pages when either  &gt; process modifies the stack.) In this case, for correct  &gt; operation, the CLONE_VM option should not be specified. (If the  &gt; child shares the parent&#39;s memory because of the use of the  &gt; CLONE_VM flag, then no copy-on-write duplication occurs and chaos  &gt; is likely to result.)  That sounds like it would be fun to debug. Now I&#39;m wondering if any developers have decided that they &#34;need to&#34; bypass glibc and pull this sort of chicanery on any of my systems... (I&#39;m an SRE, so if it broke in production, it would be my problem to fix it). &#34;Fortunately,&#34; most of the bugs I&#39;ve seen have tended to be higher-level than this, but it&#39;s still a bit frightening that the kernel will just let you do something like that.  * Which is obviously not going to happen given the kernel&#39;s fanatical devotion to not breaking userspace, but let&#39;s pretend for a moment.\n Posted Mar 23, 2021 10:08 UTC (Tue) by  pbonzini ( \u272d supporter \u272d, #60935) [ Link]\n  posix_spawn() is not a single system call (technically both fork() and vfork() are wrappers around clone(2), but at least the latter is a single system call).\n Well sure, but in the (absurd) hypothetical where we&#39;re eliminating COW, the kernel would presumably need to grow an interface with capabilities similar to fork+exec, and the POSIX standard name for that interface is posix_spawn.\n Posted Mar 23, 2021 23:00 UTC (Tue) by  Cyberax ( \u272d supporter \u272d, #52523) [ Link]\n  Apparently, people dislike posix_spawn. Perhaps we would grow a full replacement that would allow to create a suspended process, tweak its attributes (using file handle-based API) and then resume it.  But I feel what we might actually get is a io_uring-based API that does this using BPF.\n We _almost_ have that api already: ptrace.  Minor problem being that ptrace is really awful. It&#39;s too bad the proposals to add a saner handle based version have all died off.\n  A couple of years ago we discussed this paper, which argues that fork() is fundamentally the wrong primitive to build OS process management around:  https://lwn.net/Articles/785430/\n  Posted Mar 23, 2021 14:17 UTC (Tue) by  abatters ( \u272d supporter \u272d, #6932) [ Link]\n  I considered using vfork() recently, but ultimately decided against it after encountering too many warnings about it. For example, see the history of glibc using vfork() for posix_spawn():  glibc &lt;= 2.23: posix_spawn() uses vfork() if POSIX_SPAWN_USEVFORK is set or if there is no cleanup expected in the child before it exec(3)s the requested file. However, this implementation of vfork() was the source of a number of bugs.  Linux glibc &gt;= 2.24: glibc commit 9ff72da471a509a8c19791efe469f47fa6977410 posix_spawn() switches from vfork() to clone(CLONE_VM | CLONE_VFORK) which uses a separate stack for the child. This fixes a number of vfork()-related bugs (&#34;possible parent clobber due stack spilling&#34;), making it possible to enable by default and ignore POSIX_SPAWN_USEVFORK.  recent non-Linux glibc glibc commit ccfb2964726512f6669fea99a43afa714e2e6a80 POSIX_SPAWN_USEVFORK is ignored and regular fork() is always used, due to difficulties getting vfork() to work without the Linux-specific clone() semantics.  Note that using clone(CLONE_VM | CLONE_VFORK) safely requires blocking all signals, including NPTL-internal signals. But the glibc wrappers don&#39;t let you block NPTL-internal signals, making it much more difficult to do outside of glibc. See the glibc implementation for all the gory details.\n  Na\u00efve non-kernel-developer perspective: this seems _intuitively_ like the wrong solution to the problem. The child still has access to the page, so surely it should still be marked as having access to that page as long as it does indeed have a reference to it, rather than pretending it doesn&#39;t have access to the page just because it&#39;s been munmap&#39;d. Just because the page has been munmap&#39;d doesn&#39;t mean that the process can&#39;t read from it, so why is the page table entry removed? I assume there&#39;s a very good reason why it&#39;s done this way, though. Could someone clear up my misunderstanding?\n &gt; The child still has access to the page, so surely it should still be marked as having access to that page as long as it does indeed have a reference to it, rather than pretending it doesn&#39;t have access to the page just because it&#39;s been munmap&#39;d.  I&#39;m not sure I understand your point, but that problem is prevented by the commit. When the child wants to take that extra reference (for vmsplice()) it gets a copy instead of the page shared with the parent. Afterwards both the page tables of the child and the reference held by the pipe point to this new copy, and the access to parent&#39;s page is lost.  &gt; Just because the page has been munmap&#39;d doesn&#39;t mean that the process can&#39;t read from it, so why is the page table entry removed?  That&#39;s simply the semantic of munmap() - it has to adjust the VMA tree and zap page table entries so that the munmapped range is no longer represented there. Then if the process tries to read/write to an address within the area, it segfaults. We can&#39;t leave the page table entry there just because another reference exists. The read from the pipe doesn&#39;t go through these page tables.\n As a non-kernel developer, I&#39;m curious:  In retrospect, is this COW breaking fundamentally wrong? Why not treat vmsplice reference &#34;as references&#34;? Is is possible to make the page inaccessible to the userspace process after munmap while still keep the kernel&#39;s reference?\n In principle yes, but then you have other problems.  For example, mmap can be used to allocate memory at a fixed address. It can be difficult to tell whether any given address is suitable (because other pages etc. might be in the way), but if you had just munmapped it, it would be really weird for a subsequent mmap of the same address and size to fail. Userspace might assume that it doesn&#39;t need to check the error code for mmap in that case (or it might not have suitable recovery code, and just call abort(3)).  So now your solution needs to accommodate stacking a new page on top of the hidden page, or relocating the hidden page, either of which is nontrivial. That&#39;s not even mentioning the fact that you need to teach vmsplice to track per-process references in the same way as pages do, without that page actually existing in the userspace page map. These are all rather difficult problems to solve, and this is a security issue, so solving hard problems is not the ideal form of a fix. Throwing in a simple COW break is a much more straightforward solution (but, as the story alludes, there was presumably some complication which they failed to account for).\n &gt; if you had just munmapped it, it would be really weird for a subsequent mmap of the same address and size to fail. Userspace might assume that it doesn&#39;t need to check the error code for mmap in that case (or it might not have suitable recovery code, and just call abort(3)).  That reminds me of an old bug: About a decade ago, Firefox (using code from jemalloc) would try to do a large aligned allocation like &#34;p = mmap(NULL, size*2); munmap(p); p = mmap(round_up(p, alignment), size);&#34; i.e. using the first mmap+munmap to discover a large-enough hole in the address space, then allocating at a correctly-aligned address within that hole. If the second mmap didn&#39;t return the address that was requested, there must have been a race condition with another thread that allocated in the same hole, so it would loop around and try again and hope for better luck next time.  That worked okay until it ran on kernels with a security feature that randomised mmap and entirely ignored the address parameter (which is technically okay since it&#39;s defined as just a hint, not a requirement), so the code got stuck in an infinite loop.  That was fixed ages ago, but it does seem plausible that some userspace code may still make similarly unwise assumptions.\n  The PTE has to go away because that&#39;s what munmap() is specified to do. Furthermore, the fact that it&#39;s t\n......", "posttime": "2021-06-26 16:41:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u76f4\u5230,cows,vfork", "title": "\u4fee\u8865\uff0c\u76f4\u5230\u5976\u725b\u56de\u5bb6 ", "title_en": "Patching until the COWs come home", "transed": 1, "url": "https://lwn.net/Articles/849638/", "via": "", "real_tags": ["\u76f4\u5230", "cows", "vfork"]}, {"category": "", "categoryclass": "", "imagename": "f2f261ee9b23f9cbef78336888cc285f.jpg", "infoid": 1068404, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ecf\u8fc7\u8bb8\u591a\u8d8a\u6765\u8d8a\u591a\u7684\u94f2\u5b50\u5728\u70e7\u7126\u7684\u6fb3\u5927\u5229\u4e9a\u9633\u5149\u4e0b\u7684\u6c61\u57a2\u65f6\uff0c\u8096\u6069\u5076\u50cf\u5f00\u59cb\u8ba4\u4e3a\u4ed6\u5df2\u7ecf\u4ee4\u4eba\u5c34\u5c2c\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u662f - \u975e\u5e38\u5b57\u9762\u4e0a\u6316\u6398\u81ea\u5df1\u7684\u6d1e\u3002\n Doody\u662f\u5357\u4f5b\u7f57\u91cc\u8fbe\u5927\u5b66\u7684\u722c\u866b\u5b66\u5bb6\uff0c\u4ed6\u4eec\u5171\u5ea6\u7814\u7a76\u4e86\u6fb3\u5927\u5229\u4e9a\u9ec4\u8272\u6591\u70b9\u7684Goanna-A\u6355\u98df\u8005\u76d1\u89c6\u5668\u8725\u8734\uff0c\u957f\u722a\uff0c\u4e00\u4e2a\u97ad\u72b6\u7684\u5c3e\u5df4\u548c\u873f\u8712\u7684\u808c\u8089\u673a\u8eab\uff0c\u53ef\u4ee5\u8fbe\u52305\u82f1\u5c3a\u7684\u957f\u5ea6\u3002\u5b83\u7684\u8303\u56f4\u4e0e\u6b27\u6d32\u4e00\u6837\u5927\uff0c\u4f46\u542b\u6709300\u4e07\u4eba\uff0c\u6240\u4ee5\u5c3d\u7ba1\u5927\u5c0f\uff0c\u5f88\u5c11\u89c1\uff0c\u4ecd\u7136\u662f\u795e\u79d8\u7684\u3002\u76f4\u5230\u6700\u8fd1\uff0c\u4f8b\u5982\uff0c\u6ca1\u6709\u4eba\u77e5\u9053\u5b83\u5728\u54ea\u91cc\u5960\u5b9a\u4e86\u9e21\u86cb\u3002 Doody\u8c08\u5230\u4e86\u539f\u59cb\u7684\u6fb3\u5927\u5229\u4e9a\u4eba\uff0c\u4ed6\u4eec\u7ecf\u5e38\u6355\u6349\u6000\u5b55\u7684\u5973\u6027\uff0c\u9644\u8fd1\u770b\u8d77\u6765\u50cf\u6d1e\u7a74\u5165\u53e3\u3002 \u201c\u4f46\u6bcf\u6b21\u6709\u4eba\u8bd5\u56fe\u5230\u8fbe\u65f6\uff0c\u4ed6\u4eec\u90fd\u4f1a\u9760\u8fd1\u4ed6\u4eec\u7684\u80a9\u8180\u5e76\u51fb\u4e2d\u6b7b\u53bb\u7684\u7ec8\u70b9\uff0c\u201d\u4ed6\u544a\u8bc9\u6211\u3002\n \u4ed6\u57282012\u5e74\u53d1\u73b0\u4e86\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u5f53\u4ed6\u548c\u56db\u4e2a\u540c\u4e8b\u6316\u5230\u4e86\u4e00\u4e2a\u52a0\u5165\u52c7\u6562\u7684\u6d1e\u7a74\u3002\u4ece\u8868\u9762\uff0c\u5728\u7a81\u7136\u505c\u6b62\u4e4b\u524d\uff0c\u96a7\u9053\u4ec5\u7565\u5fae\u5bbd\u8f83\u5bbd\u7684\u808c\u8089\u4e0b\u964d\u7ea6\u4e24\u82f1\u5c3a\u3002\u4f46\u662f\uff0c\u5f53Doody\u4ea4\u6613\u4ed6\u7684\u94f2\u5b50\u52fa\u5b50\u65f6\uff0c\u8f7b\u8f7b\u5730\u63a8\u52a8\u66b4\u9732\u7684\u6c61\u57a2\uff0c\u4ed6\u610f\u8bc6\u5230\u96a7\u9053\u7684\u672b\u7aef\u6bd4\u5176\u5899\u58c1\u7565\u5fae\u67d4\u8f6f\u3002\u8fd9\u610f\u5473\u7740\u6d1e\u7a74\u6bd4\u4f3c\u4e4e\u66f4\u6df1;\u521b\u9020\u5b83\u7684\u52a0\u6cd5\u8005\u5df2\u7ecf\u7528\u571f\u58e4\u56de\u586b\u3002\u6709\u8da3\u7684\uff0c\u505a\u7684\uff0c\u4ed6\u7684\u56e2\u961f\u6316\u5f97\u66f4\u6df1\u3002\n \u5f53\u4ed6\u4eec\u4e09\u82f1\u5c3a\u4e0b\u6765\u65f6\uff0c\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u53ef\u4ee5\u5c55\u793a\u4ed6\u4eec\u7684\u52aa\u529b\uff0cDoody\u5f88\u56f0\u60d1\u3002\u5f53\u5927\u591a\u6570\u722c\u884c\u52a8\u7269\u57cb\u5165\u5375\u5b50\u65f6\uff0c\u5b83\u4eec\u5728\u8868\u9762\u4e0b\u9762\u5c11\u4e8e\u4e00\u82f1\u5c3a\u3002\u751a\u81f3\u5927\u6d77\u9f9f\u6316\u6398\u6d45\u5de2\u3002\u4f46\u662f\u56de\u586b\u7684Goanna Burrow\u4e00\u76f4\u5f85\u547d\u3002\u964c\u751f\u4eba\u4ecd\u7136\uff0c\u5b83\u7684\u9053\u8def\u5f00\u59cb\u626d\u66f2\uff0c\u5f00\u74f6\u5668\u4e0b\u964d\u3002 \u201c\u6211\u7684\u4f34\u4fa3\uff0c\u4e5f\u662f\u722c\u866b\u533b\u751f\uff0c\u5728\u7535\u8bdd\u4e0a\uff0c\u8bf4\uff0c\u201d\u4f60\u77e5\u9053\uff0c\u8096\u6069\uff0c\u722c\u884c\u52a8\u7269\u4e0d\u4f1a\u6df1\u6df1\u5730\u6316\u6398\uff0c\u201c\u4ed6\u544a\u8bc9\u6211\u3002 \u201c\u6211\u5f00\u59cb\u6000\u7591\u81ea\u5df1\u3002\u201d\n \u5728\u4e94\u82f1\u5c3a\u7684\u4e0b\u6765\uff0c\u5728\u6316\u6398\u7684\u7b2c\u4e8c\u5929\uff0cDoody\u5728\u4ed6\u4eec\u4e2d\u7684\u4e00\u4e2a\u4eba\u7684\u65f6\u5019\u5bf9\u4ed6\u7684\u540c\u4e8b\u4eec\u7cbe\u795e\u4e0a\u64b0\u5199\u9053\u6b49\uff0c\u4ed6\u7684\u5934\u4e0a\u8eba\u5728\u5730\u4e0a\uff0c\u4ed6\u7684\u624b\u81c2\u8737\u7f29\u5728\u87ba\u65cb\u6d1e\u7a74\uff0c\u5c16\u53eb\u7740\uff0c\u201c\u86cb\uff01\u201d Doodod\u548c\u4ed6\u7684\u56e2\u961f\u7ec8\u4e8e\u627e\u5230\u4e86\u4e00\u4e2a\u5de2\u7a74;\u4ece\u4e2d\uff0c\u4ed6\u4eec\u62d4\u51fa\u4e8610\u4e2a\u9e21\u86cb\uff0c\u5b8c\u6574\u3002\n \u4ece\u90a3\u4ee5\u540e\uff0c\u8be5\u56e2\u961f\u5206\u6790\u4e86\u51e0\u5341\u4e2aGOANNA BOUROWS\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u6709\u76f8\u540c\u7684\u7cbe\u5fc3\u5236\u4f5c\u7ed3\u6784\u3002\u51e0\u53ea\u52a8\u7269\u4e5f\u6316\u6398\uff08\u6216\u6316\u6398\uff09\u87ba\u65cb\u6316\u6d1e\uff0c\u5305\u62ec\u874e\u5b50\uff0c\u53e3\u888b\u8e29\u8e0f\u8005\uff0c\u4e00\u4e2a\u540d\u4e3a\u53e4\u4ee3\u622a\u6b62\u8005\u7684\u706d\u7edd\u6d77\u85fb\uff0c\u4ee5\u53ca\u53eb\u505a\u526f\u722c\u884c\u52a8\u7269\u7684\u54fa\u4e73\u52a8\u7269\uff0c\u79f0\u4e3aDiictodon\uff0c\u8fd9\u4e9b\u722c\u884c\u52a8\u7269\u88ab\u79f0\u4e3aDiictodon\uff0c\u8fd9\u4e9b\u722c\u884c\u52a8\u7269\u88ab\u79f0\u4e3aDiictodon\uff0c\u8fd9\u4e9b\u722c\u884c\u52a8\u7269\u662fDiictodon\uff0c\u8fd9\u4e9b\u722c\u884c\u52a8\u7269\u662fDiictodon\uff0c\u8fd9\u662f25500\u4e07\u5e74\u524d\u7684Diictodon\u3002\u4f46\u9ec4\u8272\u6591\u70b9\u7684Goanna\u7684\u5de2\u7a74\u6bd4\u6240\u6709\u8fd9\u4e9b\u751f\u7269\u7684\u5de2\u7a74\u66f4\u6df1\u5165\u5230\u5ef6\u4f38\u5230\u8868\u9762\u4e0b\u65b9\u768413\u82f1\u5c3a\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u8352\u8c2c\u7684\u6df1\u5ea6\uff0c\u201dDoody\u544a\u8bc9\u6211\u3002\u4ed6\u8ba4\u4e3a\u9ec4\u8272\u6591\u70b9\u7684\u52a0\u6cd5\u8005\u9762\u4e34\u7740\u72ec\u7279\u7684\u6311\u6218\u3002\u5b83\u7684\u5927\u9e21\u86cb\u9700\u8981\u5728\u5b75\u5316\u524d8\u4e2a\u6708\u5b75\u80b2 - \u4e00\u4e2a\u65f6\u671f\uff0c\u901a\u8fc7\u6fb3\u5927\u5229\u4e9a\u7684\u6b8b\u9177\u65f1\u5b63\uff0c\u5f53\u65f6\u51e0\u4e2a\u6708\u53ef\u80fd\u5728\u6ca1\u6709\u4efb\u4f55\u96e8\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u3002\u5728\u6d45\u5c42\u6df1\u5ea6\uff0c\u9e21\u86cb\u4f1a\u716e\u719f\u548c\u5e72\u71e5\u3002\u53ea\u6709\u5728\u66f4\u6df1\u7684\u571f\u58e4\u4e2d\uff0c\u5b83\u4eec\u5374\u8f83\u51b7\uff0c\u6e7f\u6da6\uff0c\u5b83\u4eec\u662f\u5426\u53ef\u4ee5\u5b58\u6d3b\u3002\n  \u4e3a\u4e86\u521b\u9020\u5979\u7cbe\u5fc3\u5236\u4f5c\u7684\u6d1e\u7a74\uff0c\u4e00\u4e2a\u9884\u671f\u7684\u5973\u6027\u6b4c\u963f\u9996\u5148\u6316\u51fa\u4e24\u82f1\u5c3a\u7684\u571f\u58e4\uff0c\u5e76\u5728\u9644\u8fd1\u7684\u571f\u58a9\u4e2d\u5806\u79ef\u3002\u7136\u540e\u5979\u6709\u6548\u5730\u5411\u4e0b\u6e38\u6cf3\uff0c\u7528\u6b63\u9762\u817f\u6316\u6398\uff0c\u540c\u65f6\u5c06\u677e\u6563\u7684\u6c99\u5b50\u79fb\u52a8\u5230\u5979\u8eab\u540e\u7684\u677e\u6563\u6c99\u5b50\u4ee5\u56de\u586b\u5979\u521b\u9020\u7684\u96a7\u9053\u3002\u8fd9\u9700\u8981\u51e0\u5929\uff0c\u5728\u6b64\u671f\u95f4\uff0c\u5979\u88ab\u5305\u88f9\u5728\u571f\u58e4\u4e2d\u5e76\u88ab\u8db3\u591f\u7684\u7a7a\u6c14\u5305\u56f4\u3002 \u201c\u6211\u4eec\u5728\u8fd9\u4e2a\u884c\u4e3a\u4e2d\u627e\u5230\u4e86\u4e00\u4e2a\uff0c\u5979\u5728\u90a3\u91cc\u7559\u4e0b\u4e86\u4e00\u4e2a\u571f\u8c46\uff0c\u201dDoofy\u544a\u8bc9\u6211\u3002\u8fd9\u53ef\u80fd\u662f\u5979\u5728\u5f00\u74f6\u5668\u4e2d\u79fb\u52a8\u7684\u539f\u56e0\uff0c\u4ed6\u8865\u5145\u8bf4\uff1a\u201c\u4efb\u4f55\u6454\u5012\u7684\u6c99\u5b50\u88ab\u5979\u7684\u8eab\u4f53\u963b\u6321\u4e86\uff0c\u4e8b\u5b9e\u662f\u5979\u8f6c\u5411\u7684\u4e8b\u5b9e\u3002\u201d\u4e00\u65e6\u5979\u5230\u8fbe\u6b63\u786e\u7684\u6df1\u5ea6\uff0c\u5979\u5c31\u6316\u4e86\u4e00\u4e2a\u5f00\u653e\u5f0f\u95ed\u5408\u62f3\u7684\u5c3a\u5bf8\u3002\u5979\u6492\u4e0a\u5979\u7684\u9e21\u86cb\uff0c\u7136\u540e\u6316\u51fa\u5979\u7684\u65b9\u5f0f\uff0c\u5728\u5979\u9996\u6b21\u6df9\u6ca1\u540e\u4e03\u523010\u5929\u3002 \n\u51e0\u4e2a\u6708\u540e\uff0c\u5f53\u5a74\u513f\u9175\u6bcd\u5b75\u5316\u65f6\uff0c\u4ed6\u4eec\u5ffd\u7565\u4e86\u4ed6\u4eec\u6bcd\u4eb2\u7684\u87ba\u65cb\u6d1e\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u81ea\u5df1\u51fa\u53bb\u4e86\uff0c\u76f4\u884c\u5411\u4e0a\u522e\u4f24\u3002 \u201c\u6d77\u9f9f\u4e0d\u5f97\u4e0d\u6316\u6398\u6f02\u4eae\uff0c\u677e\u6563\u7684\u6c99\u5b50\uff0c\u6709100\u4e2a\uff0c\u201dDoofy\u8bf4\u3002 \u201c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u80fd\u6709\u516b\u4e2a\u5b75\u5316\u8725\u8734\u7ecf\u8fc7\u7c73\u7684\u6297\u6027\u571f\u58e4\u3002\u201d\n Goanna Burrows\u4e0d\u4f1a\u7a00\u758f\u5206\u5e03\u3002\u8bb8\u591a\u8fd9\u4e9b\u8725\u8734\u7b51\u5de2\uff0c\u521b\u9020\u4e86\u5927\u578b\u516c\u5171\u6c83\u6717\u3002\u8be5\u56e2\u961f\u66fe\u7ecf\u53d1\u73b0\u8fc7100\u591a\u4e2a\u5355\u72ec\u7684\u79bb\u5408\u5668\uff0c\u5c0f\u578b\u5ba2\u5385\u7684\u5927\u5c0f\u3002\u7814\u7a76\u4eba\u5458\u7684\u91cd\u5efa\u662f\u4e00\u4e2a\u5145\u6ee1\u7d27\u5bc6\u5305\u88c5\u7684\u7ebf\u5708\u7684\u5f39\u7c27\u5e8a\u57ab\u3002 Goannas\u5728\u5e74\u590d\u4e00\u5e74\u540e\u91cd\u590d\u4f7f\u7528\u4e86\u8fd9\u4e9b\u7f51\u7ad9\uff0c\u5e76\u4e14\u968f\u7740\u5355\u72ec\u7684\u6d1e\u7a74\u5408\u5e76\uff0c\u6298\u53e0\u548c\u4fb5\u8680\uff0c\u6c83\u4f26\u6210\u4e3a\u5145\u6ee1\u5f00\u653e\u7a7a\u95f4\u7684\u590d\u6742\u8ff7\u5bab\u3002\n \u8fd9\u4e9b\u804c\u4f4d\u7a7a\u7f3a\u957f\u671f\u4ee5\u6765\u4e0d\u4f1a\u7559\u7a7a\u3002 Doody\u7684\u56e2\u961f\u53d1\u73b0\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u52a8\u7269\u52a8\u7269\u5e87\u62a4\u548c\u7b51\u5de2\u5728Goanna Bourrows\u4e2d\u3002\u8fd9\u4e9b\u5305\u62ec\u5176\u4ed6\u8725\u8734\uff0c\u86c7\uff0c\u874e\u5b50\uff0c\u8708\u86a3\uff0c\u7532\u58f3\u866b\uff0c\u8682\u8681\u548c\u79f0\u4e3a\u8102\u80aa\u5c3e\u7684\u5047\u7532\u7d20\u7684\u9f20\u674e\u6ce5\u6d46\u3002\u8bb8\u591a\u9752\u86d9\u901a\u8fc7\u5c06\u81ea\u5df1\u57cb\u5728\u56de\u586b\u7684\u6d1e\u7a74\u7684\u677e\u6563\u571f\u58e4\u4e2d\u5fcd\u53d7\u4e86\u65f1\u5b63\u3002 \u201c\u5f53\u6211\u4eec\u62d4\u51fa\u56de\u586b\u65f6\uff0c\u6211\u4eec\u4e00\u904d\u53c8\u4e00\u904d\u5730\u62d4\u51fa\u51e0\u4e2a\u9752\u86d9\uff0c\u201dDoody\u544a\u8bc9\u6211\u3002\u5728\u4e00\u4e2a\u6c83\u4f26\uff0c\u4ed6\u548c\u4ed6\u7684\u540c\u4e8b\u53d1\u73b0\u4e86418\u86d9\u3002 \u201c\u4f9d\u6258\u8fd9\u4e9b\u6d1e\u7a74\u7684\u5176\u4ed6\u52a8\u7269\u7684\u7eaf\u7cb9\u6570\u91cf\u548c\u5404\u79cd\u5404\u6837\u7684\u4eba\u7269\u662f\u4ee4\u4eba\u60ca\u8bb6\u7684\uff0c\u201d\u535a\u7269\u9986\u7ef4\u591a\u5229\u4e9a\u5dde\u7ef4\u591a\u5229\u4e9a\u5dde\u7684\u7b56\u5c55\u4ebaJane Melville\u544a\u8bc9\u6211\u3002\n  Goannas\u901a\u5e38\u88ab\u79f0\u4e3a\u9876\u7ea7\u6355\u98df\u8005\uff0c\u8fd9\u4e9b\u6355\u98df\u8005\u5c06\u5403\u4efb\u4f55\u4e1c\u897f\uff0c\u4ee5\u53ca\u4ed6\u4eec\u53ef\u4ee5\u7ba1\u7406\u7684\u4e00\u5207\u3002\u4f46\u662fDoodod\u7684\u5de5\u4f5c\u8868\u660e\uff0c\u4ed6\u4eec\u521b\u9020\u4e86\u548c\u200b\u200b\u6bc1\u706d\u3002\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u89c6\u4e3a\u751f\u6001\u7cfb\u7edf\u5de5\u7a0b\u5e08 - \u4ee5\u65e8\u5728\u4e3a\u4ed6\u4eec\u7684\u751f\u7269\u521b\u9020\u673a\u4f1a\u7684\u65b9\u5f0f\u6765\u4fee\u6539\u4ed6\u4eec\u7684\u73af\u5883\u3002\u6d77\u72f8\uff08\u5927\u575d\u6cb3\uff09\uff0c\u73ca\u745a\uff08\u521b\u9020\u7901\u77f3\uff09\u548c\u5544\u6728\u9e1f\uff08\u6811\u6728\u7684\u94bb\u5b54\uff09\u90fd\u662f\u751f\u6001\u7cfb\u7edf\u5de5\u7a0b\u5e08\u3002\u4f46\u9664\u4e86\u51e0\u79cd\u4e4c\u9f9f\u548c\u9f9f\uff0c\u722c\u884c\u52a8\u7269\u5f88\u5c11\u88ab\u8ba4\u4e3a\u662f\u4ed6\u4eec\u7684\u961f\u4f0d\u3002 \u201c\u6211\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4ed6\u4eec\u7684\u7ecf\u5e38\u6d88\u6781\u7684\u516c\u4f17\u611f\u77e5\uff0c\u201dCurtin\u5927\u5b66\u7684\u722c\u866b\u5b66\u5bb6Sophie Cross\u544a\u8bc9\u6211\u3002 \u201c\u722c\u884c\u52a8\u7269\u4e0d\u88ab\u89c6\u4e3a\u9b45\u529b\u3002\u4ed6\u4eec\u53d1\u6325\u7740\u91cd\u8981\u7684\u751f\u6001\u89d2\u8272\uff0c\u4f46\u8fd9\u4e9b\u5e76\u4e0d\u5e7f\u6cdb\u522b\u540d\u3002\u201c\n \u4f8b\u5982\uff0c\u9ec4\u8272\u5bdf\u89c9\u7684\u52a0\u5170\u65af\u5728\u5317\u5317\u90e8\u5927\u90e8\u5206\u5730\u533a\u53d1\u73b0\uff0c\u8fd9\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u201c\u5de8\u5927\u7684\u91cd\u8981\u6027\u201d\u7684\u5de5\u7a0b\u5e08\uff0c\u201c\u6885\u5c14\u7ef4\u5c14\u8bf4\u3002 Doody\u8ba4\u4e3a\u5176\u4ed6Goan\u200b\u200bna\u79cd\u4e5f\u91cd\u5851\u6fb3\u5927\u5229\u4e9a\u7684\u666f\u89c2\uff0c\u5305\u62ec\u8be5\u56fd\u6700\u5927\u7684\u8725\u8734 - \u516b\u82f1\u5c3a\u957f\u7684\u53d7\u9650\u3002\u4ed6\u7684\u5b66\u751fKari Soennichsen\u4e00\u76f4\u5728\u653e\u5c04\u7ebf\u8ddf\u8e2a\u8fd9\u4e9b\u52a8\u7269\uff0c\u4ee5\u4e86\u89e3\u4ed6\u4eec\u7684\u5375\u5b50\u5728\u54ea\u91cc\u4ee5\u53ca\u5982\u4f55\u541e\u566c\u4ed6\u4eec\u7684\u9e21\u86cb\u3002 \u201c\u8fd9\u4e00\u76f4\u5f88\u60b2\u60e8\uff0c\u8bd5\u56fe\u627e\u5230\u8fd9\u4e9b\u5bb6\u4f19\u7684\u5de2\u7a74\uff0c\u201dDoody\u8bf4\u3002 \u201c\u4ed6\u4eec\u662f\u79d8\u5bc6\u7684\uff0c\u4f60\u5fc5\u987b\u4e00\u76f4\u90fd\u5728\u4ed6\u4eec\u8eab\u8fb9\u3002\u201d\u53bb\u5e74\uff0c\u968f\u7740\u56e2\u961f\u6b63\u51c6\u5907\u53e6\u4e00\u4e2a\u91ce\u5916\u5b63\u8282\uff0c\u201cCovid\u771f\u7684\u8e22\u4e86\u6211\u4eec\u5728\u5c41\u80a1\u4e0a\u3002\u201d\n \u4ed6\u4eec\u4e0d\u80fd\u6c38\u8fdc\u7b49\u5f85\u3002 1935\u5e74\uff0c\u7518\u8517\u87fe\u870d\u88ab\u6beb\u4e0d\u7f9e\u4e8e\u4ecb\u7ecd\u7ed9\u6fb3\u5927\u5229\u4e9a\uff0c\u4e00\u76f4\u6162\u6162\u5730\u4f20\u64ad\u4e86\u8be5\u56fd\u7684\u5317\u90e8\u5730\u533a\uff0c\u4ed6\u4eec\u7684\u6bd2\u6027\u5206\u6ccc\u7269\u662f\u9057\u5631\u7684\u9057\u5631\uff0c\u5305\u62ec\u9ec4\u8272\u6591\u70b9\u7684\u96f7\u7eb3\u65af\u3002\u5728\u67d0\u4e9b\u5730\u533a\uff0c\u8725\u8734\u7684\u6570\u91cf\u5df2\u4e0b\u964d\u4e8690\uff05\u3002 Doody\u5f00\u59cb\u5b66\u4e60\u8fd9\u4e9b\u7269\u79cd\u6765\u5b66\u4e60\u5176\u5931\u8e2a\u7684\u540e\u679c\uff0c\u800c\u4ed6\u7684\u7b54\u6848\u6bd4\u4ed6\u9884\u671f\u7684\u66f4\u4ee4\u4eba\u60ca\u8bb6\u548c\u9677\u5165\u56f0\u5883\u3002\u968f\u7740Goannas\u6d88\u5931\uff0c\u4ed6\u4eec\u521b\u9020\u7684\u5730\u4e0b\u4e16\u754c\u4e5f\u662f\u5982\u6b64\u3002 ", "note_en": "After many futile hours of shoveling dirt under the scorching Australian sun, Sean Doody began to think that he had made an embarrassing mistake and was\u2014quite literally\u2014digging himself into a hole.\n Doody is a herpetologist from the University of South Florida who has spent years studying Australia\u2019s yellow-spotted goanna\u2014a predatory monitor lizard with long claws, a whiplike tail, and a sinuous, muscular body that can reach five feet in length. Its range is as large as Europe but contains just 3 million people, so despite the goanna\u2019s size, it is seldom seen and remains mysterious. Until recently, for example, no one knew where it laid its eggs. Doody spoke to Aboriginal Australians who would often catch pregnant females near what looked like burrow entrances. \u201cBut every time someone tried to reach in, they\u2019d get up to their shoulder and hit a dead end,\u201d he told me.\n He found the same thing in 2012, when he and four colleagues dug into a goanna burrow themselves. From the surface, a tunnel that was only slightly wider than a muscular arm descended for about two feet before abruptly stopping. But when Doody traded his shovel for a spoon and gently pushed against the exposed dirt, he realized that the tunnel\u2019s end was slightly softer than its walls. That meant the burrow was deeper than it seemed; the goanna that had created it had backfilled it with soil. Intrigued, Doody and his team dug deeper.\n By the time they were three feet down, with nothing to show for their efforts, Doody was confused. When most reptiles bury their eggs, they do so less than a foot beneath the surface. Even big sea turtles dig shallow nests. But the backfilled goanna burrow kept going. Stranger still, its path began to twist, corkscrewing as it descended. \u201cMy partner, who is also a herpetologist, was on the phone, saying, \u2018You know, Sean, reptiles don\u2019t dig that deep,\u2019\u201d he told me. \u201cI was starting to doubt myself.\u201d\n At five feet down, on the second day of digging, Doody was mentally composing an apology to his colleagues when one of them, lying flat on the ground with his head out of sight and his arm curled down the spiraling burrow, screamed out, \u201cEGGS!\u201d Doody and his team had finally found a nest; from it, they  pulled out 10 eggs, all intact.\n Since then, the team  has analyzed dozens of goanna burrows, all of which had the same elaborate structure. A few animals also dig (or dug) helical burrows, including scorpions, pocket gophers, an extinct beaver called  Palaeocastor, and a mammal-like reptile called  Diictodon that lived 255 million years ago. But the yellow-spotted goanna\u2019s nests are deeper than those of all these creatures\u2014extending as far as 13 feet below the surface. \u201cThat\u2019s a ridiculous depth,\u201d Doody told me. He thinks that the yellow-spotted goanna faces a unique challenge. Its large eggs need to incubate for 8 months before hatching\u2014a period that takes them through Australia\u2019s brutal dry season, when several months might go by without any rain. At shallow depths, the eggs would cook and desiccate. Only in deeper soil, which is cooler and wetter, can they survive.\n  To create her elaborate burrow, an expectant female goanna first digs out about two feet of soil and piles it in a nearby mound. Then she effectively swims downward, digging with her front legs while moving the loose sand behind her to backfill the tunnel she creates. This takes days, during which she is encased in soil and surrounded by just enough air to breathe. \u201cWe found one in the act, and she was lodged in there like a potato,\u201d Doody told me. This might be why she moves in a corkscrew, he added: \u201cAny sand that falls back down gets blocked by her body and the fact that she\u2019s turning.\u201d Once she reaches the right depth, she digs an open chamber the size of two clenched fists. She lays her eggs and digs her way back out, emerging seven to 10 days after she first submerged.\n  Several months later, when the baby goannas hatch, they ignore their mother\u2019s helical burrow. Instead, they punch their own way out, scratching straight upward. \u201cSea turtles have to dig through nice, loose sand, and there\u2019s 100 of them,\u201d Doody said. \u201cHere we have maybe eight hatchling lizards going through meters of resistant soil.\u201d\n The goanna burrows are not sparsely distributed. Many of these lizards nest together, creating large communal warrens.  The team once found more than 100 separate clutches in an area the size of a small living room. The researchers\u2019 reconstruction of the site looks like a spring mattress full of tightly packed coils. The goannas reuse these sites year after year, and as the separate burrows merge, collapse, and erode, the warrens become complex labyrinths full of open spaces.\n These vacancies don\u2019t stay empty for long. Doody\u2019s team has found a diverse menagerie of animals sheltering and nesting within the goanna burrows. These include other lizards, snakes, scorpions, centipedes, beetles, ants, and a mouselike marsupial called the fat-tailed false antechinus. Many frogs endure the dry season by burying themselves in the backfilled burrows\u2019 loose soil. \u201cWhen we pulled out backfill, we\u2019d pull out handfuls of frogs, over and over,\u201d Doody told me. In one warren, he and his colleagues found 418 frogs. \u201cThe sheer number and variety of other animals relying on these burrows is astounding,\u201d Jane Melville, a curator at Museums Victoria who studies reptiles and amphibians, told me.\n  Goannas are typically characterized as top predators that will eat anything and everything they can manage. But Doody\u2019s work shows that they create as well as destroy. They easily count as ecosystem engineers\u2014animals that modify their environment in ways that create opportunities for the creatures around them. Beavers (which dam rivers), corals (which create reefs), and woodpeckers (which drill holes in trees) are all ecosystem engineers. But  other than a few species of tortoise and turtle, reptiles are rarely considered among their ranks. \u201cI think this may be due to their often-negative public perception,\u201d Sophie Cross, a herpetologist at Curtin University told me. \u201cReptiles are not considered charismatic. They play important ecological roles, but these aren\u2019t widely known.\u201d\n The yellow-spotted goanna, for example, is found across much of northern Australia, which makes it an engineer with \u201ccontinent-wide importance,\u201d Melville said. Doody thinks that other goanna species also reshape Australia\u2019s landscape, including the country\u2019s largest lizard\u2014the eight-foot-long perentie. His student Kari Soennichsen has been radio-tracking these animals to find out where and how they lay their eggs. \u201cIt\u2019s been miserable trying to find nests for these guys,\u201d Doody said. \u201cThey\u2019re secretive, and you have to be on them all the time.\u201d And last year, as the team was gearing up for another field season, \u201cCOVID really kicked us in the butt.\u201d\n They can\u2019t wait forever.  Cane toads, which were ill-advisedly introduced to Australia in 1935, have been slowly spreading through the country\u2019s northern region, and their poisonous secretions are lethal to would-be predators, including yellow-spotted goannas. In some areas, the lizards\u2019 numbers have fallen by 90 percent. Doody started studying the species to learn the consequences of its disappearance, and his answer is more surprising and more galling than he could have anticipated. As the goannas vanish, so do the underground worlds they create.", "posttime": "2021-06-26 16:36:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "giant,\u521b\u9020", "title": "\u6ca1\u6709\u4eba\u60f3\u8c61\u7684\u5de8\u578b\u8725\u8734\u5de2\u4f1a\u662f\u8fd9\u79cd\u5947\u602a\u7684 ", "title_en": "No One Imagined Giant Lizard Nests Would Be This Weird", "transed": 1, "url": "https://www.theatlantic.com/science/archive/2021/06/monitor-lizards-australia-dig-incredible-corkscrew-nests/619294/", "via": "", "real_tags": ["giant", "\u521b\u9020"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068402, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6709\u4e00\u70b9\u662f\u6210\u4e3a\u4e00\u4e2a\u975e\u5e38\u7cbe\u660e\u7684\u4eba\u7684\u58f0\u8a89\u3002\u4eba\u4eec\u6563\u6253\u4e86\u6211\u62e5\u6709\u67d0\u79cd\u8d85\u7ea7\u7535\u529b\u7684\u624b\u5de5\u5236\u4f5c\u7cfb\u7edf\u7684\u5047\u8bbe\uff0c\u8be5\u7cfb\u7edf\u7ade\u4e89\u4e8e\u6240\u6709\u5176\u4ed6\u7cfb\u7edf\uff0c\u5e76\u5728\u6211\u7684\u684c\u9762\u4e0a\u5b8c\u5168\u96c6\u6210\u3002\u6211\u4e0d\u548c\uff0339; t\u3002\u6211\u7528\u7eb8\u5f20\u6765\u8ddf\u8e2a\u6211\u7684\u65e5\u5b50\u3002\u79bb\u7ebf\u624b\u5199\u7eb8\u3002\u6211\u6bcf\u4e2a\u6708\u90fd\u6709\u4e00\u5927\u5806\u6808\u7684\u5c0f\u7b14\u8bb0\u672c\u548cIGO\u3002\u4eca\u5929\u6211\u5c06\u8ba8\u8bbaMyTask\u7ba1\u7406\u5de5\u5177\u94fe\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5e76\u643a\u5e26\u5982\u4f55\u4f7f\u7528\u7eb8\u5f20\u6765\u5e2e\u52a9\u6211\u5b8c\u6210Getthings\u3002\n \u5728\u6211\u5230\u8fbe\u8fd9\u4e00\u70b9\u4e4b\u524d\uff0c\u6211\u5df2\u7ecf\u5c1d\u8bd5\u8fc7\u5f88\u591a\u4e8b\u60c5\u3002\u6211\uff06\uff0339; ve\u6ca1\u6709\u4efb\u4f55\u7528\u8fc7\uff0cemacs\uff06\uff0339; ORG\u6a21\u5f0f\uff0cJIRA\uff0cGitHub\u95ee\u9898\u548c\u4e00\u4e9b\u63d0\u9192\u5e94\u7528\u7a0b\u5e8f\u3002\u4ed6\u4eec\u90fd\u907f\u98ce\u6e2f\u548c\uff0339;\u7279\u6b8a\u4e3a\u6211\u5207\u5272\u5b83\u3002\n \u4ece\u81ea\u7136\u7684\u5730\u65b9\u5f00\u59cb\uff0c\u65e0\u9700\u8ddf\u8e2a\u6211\u7684\u4efb\u52a1\u548c\u52a0\u76df\u3002\u8fd9\u53ef\u4ee5\u5728\u77ed\u671f\u5185\u5de5\u4f5c\u3002\u901a\u5e38\uff0c\u91cd\u8981\u7684\u4e1c\u897f\u4f1a\u56de\u5230\u4f60\u8eab\u8fb9\uff0c\u4f60\u6700\u7ec8\u4f1a\u8ba9\u4ed6\u4eec\u5b8c\u6210\u3002\u7136\u800c\uff0c\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a\u53ef\u9760\u7684\u7cfb\u7edf\u3002\n \uff06lt; cadey\uff06gt;\u91cd\u70b9\u5f88\u96be\u3002\u8bb0\u5fc6\u662f\u77ed\u6682\u7684\u3002\u6570\u636e\u88ab\u5220\u9664\u3002\u5bf9\u8c61\u6c38\u4e45\u6027\u662fAmyth\u3002\u7eb8\u5f20\u5750\u5728\u4fa7\u9762\u548c\u7b11\u3002\n \u867d\u7136\u5b83\u786e\u5b9e\u4e3a\u67d0\u4eba\u5de5\u4f5c\u4e86\u3002\u6211\u53ea\u662f\u4e0d\u8981\uff06\uff0339; t\u4f3c\u4e4e\u662f\u5176\u4e2d\u4e4b\u4e00\u3002\u5f53\u5468\u56f4\u6709\u5916\u90e8\u7ed3\u6784\u6765\u5e2e\u52a9\u6211\u8ddf\u8e2a\u4e8b\u7269\u65f6\uff0c\u4e0d\u8981\u8ffd\u8e2a\u6211\u7684\u4efb\u52a1\u3002 Histupe\u4f1a\u8bae\u6216\u67d0\u4e9b\u65e5\u5e38\u529e\u7406\u5165\u4f4f\u5bf9\u6b64\u81f3\u5173\u91cd\u8981\uff0c\u800c\u4e14\u4ed6\u4eec\u7684\u5de5\u4f5c\u662f\u52aa\u529b\uff0c\u56e0\u4e3a\u6211\u7684\u56e2\u961fIshelping\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u5bf9\u83b7\u5f97\u5de5\u4f5c\u6240\u8d23\u4efb\u3002\u8fd9\u662f\u975e\u5e38\u4f9d\u8d56\u7684\u56e2\u961f\u6587\u5316\u5065\u5eb7\uff0c\u5728\u6211\u8eab\u8fb9\uff0c\u5728\u6211\u611f\u5230\u6ee1\u8db3\u7684\u5730\u65b9\uff0c\u5728\u6211\u72af\u9519\u8bef\u65f6\u8db3\u591f\u5b89\u5168\u5730\u627f\u8ba4\uff08\u6211\u552f\u4e00\u5730\u89c9\u5f97\u5728\u5c3e\u90e8\u5de5\u4f5c\uff09\u3002\u5b83\u4e5f\u6ca1\u6709\u8ddf\u6211\u4ece\u5de5\u4f5c\u5230\u5de5\u4f5c\uff0c\u54e5\u4f26\u5355\u96c7\u4e3b\u4e5f\u610f\u5473\u7740\u6211\u53ef\u4ee5\uff06\uff0339; t\u5e26\u6211\u7684\u7ec4\u7ec7\u7cfb\u7edf\u3002\u6240\u4ee5\uff0c\u8fd9\u4e2a\u9009\u9879\u5df2\u7ecf\u51fa\u73b0\u3002\n EMACS\u662f\u4e00\u4e2a\u975e\u5e38\u53ef\u6269\u5c55\u7684\u6587\u672c\u7f16\u8f91\u5668\u3002\u5b83\u6709\u4e00\u4e2a\u63d0\u51fa\u7684\u5b8c\u6574\u811a\u672c\u8bed\u8a00\uff0c\u79f0\u4e3aEmacs Lisp\u7684\u6838\u5fc3\uff0c\u60a8\u53ef\u4ee5\u5728\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u5185\u5bb9\u4e2d\u5efa\u7acb\u4efb\u4f55\u5185\u5bb9\u3002\u56e0\u6b64\uff0c\u8bb8\u591a\u5305\u88c5\u5df2\u7ecf\u5f00\u53d1\u51fa\u6765\u3002\u5176\u4e2d\u4e00\u4e2a\u66f4\u5927\uff0c\u66f4\u5e38\u89c1\u7684\u5305\u662fOrgMode\u3002\u5b83\u662f\u4e00\u4e2aEmacs\u7684\u4e3b\u8981\u6a21\u5f0f\uff0c\u53ef\u5e2e\u52a9\u60a8\u4fdd\u6301\u8ffd\u8e2aNotes\uff0cTodo\u5217\u8868\uff0c\u8ba1\u65f6\uff0c\u8bc6\u5b57\u7f16\u7a0b\uff0c\u8ba1\u7b97\u7b14\u8bb0\u672c\u548c\u66f4\u591a\u3002\u6211\u8fc7\u53bb\u591a\u5e74\u8fc7\u4f7f\u7528\u4e86\u7ec4\u7ec7\u6a21\u5f0f\uff0c\u6211\u6ca1\u6709\u6000\u7591\u6ca1\u6709\u5b83\uff0c\u6211\u53ef\u80fd\u5df2\u7ecf\u88ab\u89e3\u96c7\u4e86\u4e24\u6b21\u3002\n \u4e3b\u8981\u54f2\u5b66\u4e4b\u4e00\u662fOrg\u6a21\u5f0f\u662f\u5176\u6838\u5fc3\u7684\u6587\u672c\u3002\u6574\u4e2a\u7528\u6237\u4f53\u9a8c\u662f\u5728\u6587\u672c\u5468\u56f4\u6784\u5efa\u7684\uff0c\u5e76\u4f7f\u7528Emacs\u547d\u4ee4\u6765\u5e2e\u52a9\u60a8\u7684\u6587\u672c\u3002\u8fd9\u91cc\uff06\uff0339; s\u50cf\u6211\u66fe\u7ecf\u7528\u4e8e\u4efb\u52a1\u7ba1\u7406\u5668\u7684\u793a\u4f8borg\u6a21\u5f0f\u6587\u4ef6\uff1a \n\uff03+\u6807\u9898\uff1a6\u67082021 * 6\u670810\u65e5\uff0c2021\u5e746\u670810\u65e5** SRE *** TODO\u5728\u987e\u5ba2Tongnoh\u4e0a\u5e1d\uff0cIT\uff06\uff0339; Doody\u4e4b\u524d\u628a\u706b\u6254\u5230\u4e86\u523a\u6fc0\u3002\u6570\u636e\u5e93\u670d\u52a1\u5668\u5728\u5468\u56db\u4ec5\u8fd0\u884c\u67e5\u8be2\u65f6\u624d\u8fd0\u884c\u67e5\u8be2\u3002\u4e3a\u4ec0\u4e48\u661f\u671f\u56db\uff1f\u4e0d\u77e5\u9053\u3002\u5b83\u53ea\u662f\u53d1\u751f\u4e86\u3002\u975e\u5e38\u4e50\u9519\u3002\u6211\u60f3\u77e5\u9053\u4e0a\u5e1d\u662f\u5426\u6b63\u5728\u8bc5\u5492\u6211\u3002** Devel ***\u5b8c\u6210\u4e86Flopnax\u7684\u6838\u5fc3\uff0c\u7528\u4e8e\u62bd\u8c61Rilkefs\u5173\u95ed\uff1a[2021-06-10\u661f\u671f\u516d16:20] ***\u5728\u5b83\u53d1\u8d27\u524d\u4e3aflopnax\u5199\u4e0b\u6587\u6863** overhead ***\u5b8c\u6210ENG\u4f1a\u8bae\u5173\u95ed\uff1a[2021-06-10\u661f\u671f\u56db15:00] *** TODO\u534f\u52a9Jessie\u4e0e\u6885\u96f7\u7684FILE ****\u5f15\u7528\u4e0e\u4ef7\u503c\u89c2****\u5bff\u547d\u5206\u6790\u4e3a\u9508\u75c5\u662f\u5192\u9669\u4e00\u751f\uff01**\u4e2a\u4eba***\u5b8c\u6210\u65e9\u6668Meds\u5173\u95ed\uff1a[2021-06-10 thu 09:04] *** todo\u665a\u4e0ameds *** todo\u6742\u8d27\u8dd1\n ORG\u6a21\u5f0f\u7528\u4e8e\u6210\u4e3a\u6211\u5de5\u4f5c\u6d41\u7a0b\u548c\u751f\u6d3b\u7684\u6838\u5fc3\u90e8\u5206\u3002\u5b83\u662f\u5e38\u89c1\u7684\uff0c\u5e76\u7528\u6765\u8ddf\u8e2a\u4e00\u5207\u3002\u6211\u751a\u81f3\u4f1a\u5728ORG\u6a21\u5f0f\u4e0b\u8ddf\u8e2a\u67d0\u4e9b\u7269\u8d28\u7684\u7528\u91cf\u4e0eEMACS LISP\u7247\u6bb5\u8fdb\u884c\u4f7f\u7528\uff0c\u4ee5\u8fdb\u884c\u4f7f\u7528\u9891\u7387\u7684\u4e00\u4e9b\u5206\u6790\u3002 org\u6a21\u5f0f\u53ef\u4ee5\u548c\u6211\u4e00\u8d77\u751f\u6d3b\uff0c\u6211\u4e0d\uff06\uff0339;\u5f53\u6211\u6539\u53d8\u5de5\u4f5c\u65f6\uff0c\u5b83\u4f1a\u653e\u5f03\u5b83\u3002\n \u6211\u521a\u521a\u5728\u6cb3\u8fb9\u8d70\u51fa\u4e86\u4e60\u60ef\uff0c\u5b83\u4e00\u76f4\u5f88\u96be\u56de\u5230\u54c8\u6bd4\u7279\u3002\u6211\u4ecd\u7136\u5411\u4eba\u4eec\u5efa\u8baeORG\u6a21\u5f0f\uff0c\u4f46\u5b83\u4e0d\u518d\u662f\u4e00\u5929\u7684\u4e8b\u60c5\u3002\u5b83\u4e5f\u5f88\u96be\u4ece\u6211\u7684\u5e73\u677f\u7535\u8111\uff08iPad\uff09\u548c\u624b\u673a\uff08iPhone\uff09\u4f7f\u7528\u3002\u5f53\u60a8\u5173\u95ed\u7a97\u53e3\u65f6\uff0c\u5b83\u8fd8\u5f80\u5f80\u4f1a\u6d88\u5931\uff0c\u5e76\u4e14\u5f53\u60a8\u503e\u5411\u4e8e\u4f7f\u4e8b\u60c5\u96be\u4ee5\u4f7f\u7528\u7684\u6301\u4e45\u6027\u95ee\u9898\u65f6\u3002\n \uff06lt; cadey\uff06gt;\u6211\u53ef\u80fd\u4f1a\u7528\u4e00\u4e2a\u5728HTTP\u4e0a\u7684\u90a3\u4e9b\u5e7b\u60f3org-Mode\u4e2d\u7684\u4e00\u4e2a\u5e7b\u60f3\u6a21\u5f0f\u8bbe\u7f6e\u7684\u4e1c\u897f\uff0c\u4f46\u8fd9\u53ef\u80fd\u6700\u7ec8\u6bd4\u5b83\u66f4\u52a0\u52aa\u529b\uff06\uff0339;\u4e3a\u6211\u6c42\u7231\n \u53e6\u4e00\u4e2a\u5de5\u5177I\uff06\uff0339; VE\u7528\u4e8e\u8fd9\u662f\u6211\u7684\u96c7\u4e3b\uff06\uff0339;\u9996\u9009\u4efb\u52a1\u7ba1\u7406\u5de5\u5177\u3002\u8fc7\u53bb\u7684\u5de5\u4f5c\u4eceGithub\u5230Jira\u3002\u8fd9\u662f\u4e00\u4e2a\u575a\u5b9e\u7684\u9009\u62e9\u3002 ITKeepss\u4e0e\u5176\u4ed6\u4eba\u7ec4\u7ec7\u5e76\u5f15\u7528\u3002\u6211\u4e0d\u5fc5\u5c06\u4fe1\u606f\u7684\u591a\u79cd\u591a\u8bf4\u6216\u81ea\u52a8\u540c\u6b65\uff0c\u4ee5\u786e\u4fdd\u5176\u4ed6\u4eba\u66f4\u65b0\u3002\u4f46\u662f\uff0c\u60a8\u7ee7\u627f\u4e86\u8bb8\u591a\u4eba\u5982\u4f55\u4f7f\u7528\u7968\u52a1\u8ddf\u8e2a\u7cfb\u7edf\u7684\u9009\u62e9\u3002\u5728\u8fc7\u53bb\u7684\u5de5\u4f5c\u4e2d\uff0c\u65e0\u9650\u5236\u768417\u4e2a\u4e0d\u540c\u7684\u7f5a\u5355\u3002\u5927\u591a\u6570\u4eba\u4ece\u6765\u6ca1\u6709\u4f7f\u7528\u8fc7\uff0c\u4f46\u4ed6\u4eec\u4e0d\u80fd\u88ab\u5220\u9664\uff0c\u4f46\u4ed6\u4eec\u4e0d\u80fd\u5220\u9664\u5b83\u4f1a\u7834\u574f\u4ea7\u54c1\u56e2\u961f\u8fc7\u53bb\u5e38\u5e38\u8ddf\u8e2a\u4e8b\u7269\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002\n \u8fd9\u6837\u505a\u5c31\u50cf\u4f60\u7684\u610f\u89c1\u662f\u5173\u4e8e\u95ee\u9898\u7684\u610f\u89c1\uff0c\u56e0\u4e3a\u4f60\u7684\u96c7\u4e3b\u5982\u4f55\u540c\u610f\u4f60\u7684\u96c7\u4e3b\uff06\uff0339;\u8fd9\u4e2a\u8fc7\u7a0b\uff08\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u4f60\u4f1a\u5f25\u8865\u95ee\u9898\u8ddf\u8e2a\u7cfb\u7edf\uff09\u3002\u6b63\u5982\u6211\u4e4b\u524d\u63d0\u5230\u7684\u90a3\u6837\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5f53\u4f60\u6539\u53d8\u5de5\u4f5c\u65f6\uff0c\u4f60\u5fc5\u987b\u79bb\u5f00\u90a3\u4e2a\u7cfb\u7edf\u3002\u5982\u679c\u4f60\u662f\u67d0\u79cd\u4eba\u4ece\u6765\u6ca1\u6709\u6539\u53d8\u5de5\u4f5c\uff0c\u90a3\u5c31\u53ef\u4ee5\u4ee4\u4eba\u60ca\u8bb6\u5730\u5de5\u4f5c\u3002\u6211\u4e0d\u662f\u90a3\u4e9b\u4eba\u4e2d\u7684\u4e00\u4e2a\u3002\n \u522b\u7684\u6211\uff06\uff0339; ve\u5c1d\u8bd5\u4e86\u6211\u81ea\u5df1\u7684\u79c1\u4ebagithub / gitea\u9879\u76ee\uff0c\u6ce8\u610f\u4e8b\u7269\u3002\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u7528\u4e8e\u7ec4\u7ec7\u6211\u4eec\u5230\u6e25\u592a\u534e\u7684\u642c\u8fc1\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u4f4e\u6469\u64e6\u7684\u7cfb\u7edf\u3002\u5f88\u5bb9\u6613\u5efa\u7acb\uff0c\u95ee\u9898\u5c06\u4f1a\u5728\u60a8\u7684\u65b0\u95fb\u9972\u6599\u4e2d\u6253\u6270\uff0c\u6240\u4ee5\u4ed6\u4eec\u662feverpresent\u3002\u5b83\uff06\uff0339;\u4e5f\u5f88\u5bb9\u6613\u5173\u95ed\u7a97\u6237\uff0c\u5fd8\u8bb0\u4e86\u56de\u8d2d\u3002 \n\u4ece\u7ed3\u675f\u95ee\u9898\u65f6\u4e5f\u6709\u70b9\u51fb\u4e2d\u5185\u5561\u80bd\u3002 Littlerush\u53ef\u4ee5\u5e2e\u52a9\u4fc3\u8fdb\u4f7f\u7528\u8be5\u5de5\u5177\u8ddf\u8e2a\u4e8b\u7269\u7684\u4e60\u60ef\uff0c\u4f46\u662f\u5728\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u7684\u5306\u5fd9\u51fa\u73b0\u4e86\u3002\n \uff06lt; Mara\uff06gt;\u7b49\u7b49\uff0c\u5982\u679c\u60a8\u6709\u95ee\u9898\uff0c\u8bf7\u8bb0\u4f4f\u67e5\u770b\u60a8\u7684ORG\u6a21\u5f0f\u6587\u4ef6\u6216\u8ddf\u8e2a\u5668\u6216\u5176\u4ed6\u7c7b\u578b\uff0c\u4e3a\u4ec0\u4e48\u53ef\u4ee5\uff06\uff0339; T\u60a8\u521a\u521a\u8bbe\u7f6e\u63d0\u9192\u66f4\u65b0\u5b83\uff1f\u80af\u7279\uff06\uff0339; t\u662f\u96be\u5f97\u505a\u7684\u5417\uff1f\n \uff06lt; cadey\uff06gt;\u4f60\u8ba4\u4e3a\u5982\u679c\u5b83\u5f88\u5bb9\u6613\uff0c\u6211\u5df2\u7ecf\u8fd9\u6837\u505a\u4e86\uff1f\u4f60\u559c\u6b22\u8fd9\u4e48\u96be\u5417\uff1f\u5f53\u6211\u7ecf\u5e38\u770b\u5230\u5b83\u4eec\u65f6\uff0c\u91cd\u590d\u6de1\u5316\u7684\u901a\u77e5\u6de1\u5316\u3002\u6211\u6f5c\u610f\u8bc6\u5730\u8fc7\u6ee4\u51fa\u6765\u3002\u4ed6\u4eec\u4e0d\u5b58\u5728\u4e8e\u6211\u8eab\u4e0a\u3002\u5373\u4f7f\u5b83\u662f\u4e00\u4e2a\u6309\u952e\u6563\u5f00\u7684\u8463\u4e8b\u4f1a\u6216\u9611\u5c3e\uff0c\u6211\u4ecd\u7136\u4f1a\u5fd8\u8bb0\u8fd9\u6837\u505a\uff0c\u5373\u4f7f\u5b83\uff06\uff0339; simportant\u3002\n \u6240\u4ee5\uff0c\u6211\uff06\uff0339; ve\u62b5\u8fbe\u7eb8\u4ee5\u8ddf\u8e2a\u8fd9\u4e9b\u4e1c\u897f\u3002\u7eb8\u5f88\u4fbf\u5b9c\u3002 Paperis Universal\u3002\u7eb8\u5f20\uff06\uff0339; t\u8017\u5c3d\u7535\u6c60\u3002\u5f53\u6211\u5173\u95ed\u7a97\u53e3\u65f6\uff0c\u7eb8\u5f20\u5e76\u4e0d\u6d88\u5931\u5728\u4e00\u4e2a\u5c0f\u62c7\u4f4d\u3002\u7eb8\u53ef\u4ee5\u505a\u4efb\u4f55\u6211\u53ef\u4ee5\u7528Apencil\u505a\u7684\u4e8b\u60c5\u3002\u7eb8\u5f20\u8ba9\u6211\u7ffb\u56de\u7b14\u8bb0\u672c\u4e2d\u7684\u9875\u9762\uff0c\u5e76\u626b\u63cfThingSthat\u5c1a\u672a\u5b8c\u6210\u3002\u8001\u5b9e\u8bf4\uff0c\u6211\u5e0c\u671b\u6211\u5df2\u7ecf\u5f00\u59cb\u4f7f\u7528\u7eb8\u5f20\u4e3a\u6b64\u3002\u8fd9\u91cc\uff06\uff0339;\u6211\u5982\u4f55\u4f7f\u7528\u7eb8\u5f20\uff1a\n \u83b7\u5f97\u4fbf\u5b9c\u7684\u7b14\u8bb0\u672c\u6216\u7b14\u8bb0\u672c\u7535\u8111\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u5e94\u8be5\u662f\u5c0f\u578b\uff0c\u8896\u73cd\u7684\u7b14\u8bb0\u672c\u7535\u8111\u3002\u50cf\u6bcf\u8f86\u7b14\u8bb0\u672c30\u5f20\u7eb8\u5f20\u7684\u4e1c\u897f\u3002\u6211\u53ef\u4ee5\uff06\uff0339; tfind\u662f\u6211\u5728\u4e9a\u9a6c\u900a\u4e0a\u4e70\u7684\u4fbf\u5b9c\u7b14\u8bb0\u672c\uff0c\u4f46\u6211\u53d1\u73b0\u4e86\u4e00\u4e9b\u68a6\u5e7b\u822c\u7684\u68a6\u60f3\u3002\uff06\uff0339; t\u5bb3\u6015\u8d2d\u4e70\u6bd4\u4f60\u9700\u8981\u7684\u66f4\u591a\u3002\u8fd9\u4e1c\u897f\u771f\u7684\u5f88\u4fbf\u5b9c\u3002\u5728\u7f50\u5934\u4e0a\u73a9\u7eb8\uff06\uff0339; t\u4f24\u5bb3\u3002\u73b0\u573a\u5939\u7d27\u7684\u7eb8\u5f20\u4f5c\u4e1a\uff0c\u4f46\u4ed6\u4eec\u7684\u7b14\u8bb0\u672c\u7535\u8111\u53ef\u80fd\u6709\u70b9\u6602\u8d35\u3002\u8fd9\u4e00\u70b9\u662f\u4f60\u6709\u5f88\u591a\u9009\u62e9\u3002\n \u5c06\u5176\u6807\u8bb0\u5728\u5f53\u6708\uff08\u5b83\uff06\uff0339;\u6700\u597d\u5728\u4e00\u4e2a\u6708\u5f00\u5934\u5f00\u59cb\u8fd9\u4e2a\uff0c\u5982\u679c\u53ef\u4ee5\uff09\u3002\u5c06\u8054\u7cfb\u4eba\u4fe1\u606f\u653e\u5728\u5185\u90e8\u76d6\u4e0a\uff0c\u4ee5\u4fbf\u60a8\u63d0\u4f9b\u3002\n \u6bcf\u5929\u5f00\u59cb\u4e00\u4e2a\u65b0\u9875\u9762\u3002\u5c06\u65e5\u671f\u653e\u5728\u9875\u9762\u9876\u90e8\u3002 \n\u5173\u4e8e\u5f53\u5929\u7684\u5143\u6570\u636e\u8fdb\u5165\u8fb9\u7f18\u3002 \u6211\u7528\u5b83\u6765\u4fdd\u6301WHOIS\u524d\u9762\u7684\u65e5\u5fd7\u4ee5\u53ca\u670d\u836f\u3002  Todo\u9879\u76ee\u4ee5 - \u3002 \u90a3\u4e9b\u4ee3\u8868\u4f60\u9700\u8981\u505a\u7684\u4e8b\u60c5\uff06\uff0339; t\u5c1a\u672a\u5b8c\u6210\u3002  \u5b8c\u6210\u7269\u54c1\u540e\uff0c\u901a\u8fc7 - \u4f7f\u5176\u5782\u76f4\u7ebf - \u4f7f\u5176\u6210\u4e3a+\u3002  \u5982\u679c\u7269\u54c1\u53ef\u4ee5\uff06\uff0339; t\u6216won\uff06\uff0339; t\u5b8c\u6210\uff0c\u4ea4\u53c9 - \u4f7f\u5b83\u53d8\u6210*\u3002  \u5982\u679c\u60a8\u5fc5\u987b\u5c06\u4efb\u52a1\u63a8\u8fdf\u5230\u4ee5\u540e\u7684\u65e5\u671f\uff0c\u8bf7\u5c06 - \u8fdb\u5165A  - \uff06gt ;. \u5982\u679c\u662f\u623f\u95f4\uff0c\u8bf7\u7b80\u8981\u63cf\u8ff0\u4e3a\u4ec0\u4e48\u9700\u8981\u79fb\u52a8\u6216\u5f53ITIS\u79fb\u52a8\u5230\u65f6\u3002 \u5982\u679c\u6709\u6ca1\u6709\u7a7a\u95f4\u5728\u9875\u9762\u672b\u5c3e\u4ee5\u6563\u6587\u5f62\u5f0f\u5199\u51fa\u6765\u3002  \u6ce8\u91ca\u4ee5middot\uff08\u00b7\uff09\u5f00\u5934\u3002 \u5b83\u4eec\u4e0e\u6563\u6587\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u662f\u6982\u5ff5\u7684\u53e5\u5b50\u3002 \u5982\u679c\u60a8\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u59cb\u7ec8\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3aTodo Itemslater\u3002  \u7528\u94c5\u7b14\u5199\u4f5c\uff0c\u8ba9\u4f60\u53ef\u4ee5\u62b9\u53bb\u9519\u8bef\u3002 \u4ed4\u7ec6\u64e6\u9664\u4ee5\u907f\u514d\u6495\u88c2\u7eb8\u5f20\uff0c\u4f60\u51e0\u4e4e\u4e0d\u9700\u8981\u4f7f\u7528\u4efb\u4f55\u529b\u6765\u62b9\u53bb\u4e1c\u897f\u3002 \n\u53ea\u6709\u4e00\u4e2a\u52a8\u4f5c\uff0c\u9644\u52a0\u3002 Don\uff06\uff0339; t\u8bd5\u56fe\u6309\u7167\u8ba1\u7b97\u673a\u4e0a\u7684\u4e3b\u9898\u7ec4\u7ec7\u4e8b\u7269\u3002\u8fd9\u4e0d\u662f\u8ba1\u7b97\u673a\uff0c\u8fd9\u662f\u7eb8\u5f20\u3002\u4ec5\u5728\u9644\u52a0\u65f6\u6700\u597d\u7684\u6587\u4e66\u5de5\u4f5c\u3002\u53ea\u6709\u4e00\u4e2a\u65b9\u5411\uff0c\u524d\u8fdb\u3002\n \u5982\u679c\u60a8\u9700\u8981\u5c06\u4e00\u5806\u97f3\u7b26\u6216Todo\u9879\u76ee\u4e0e\u4e3b\u9898\u8054\u7cfb\u8d77\u6765\uff0c\u8bf7\u8df3\u8fc7aline\u5e76\u5199\u51fa\u4ee5\u5192\u53f7\u7ed3\u5c3e\u7684\u4e3b\u9898\u3002\u7ed3\u675f\u5916\u90e8\u6ce8\u518c\u65f6\uff0c\u8df3\u8fc7\u53e6\u4e00\u6761\u7ebf\u3002\n \u4e0d\u8981\u5bb3\u6015\u5199\u5b83\u3002\u5982\u679c\u4f60\u6700\u7ec8\u4f7f\u7528\u4e00\u4e2a\u6574\u4e2a\u7b14\u8bb0\u672c\u624d\u80fd\u52aa\u529b\uff0c\u90a3\u662f\u6210\u529f\u7684\u3002\u8bb0\u5f55\u6d1e\u5bdf\u529b\uff0c\u601d\u60f3\uff0c\u611f\u60c5\u548c\u601d\u60f3\u3002\u4f60\u6c38\u8fdc\u4e0d\u77e5\u9053\u5c06\u6700\u7ec8\u6210\u4e3a\u6709\u7528\u7684\u4e1c\u897f\u3002\n \u5728\u672c\u6708\u5e95\uff0c\u56de\u987e\u60a8\u5728\u5269\u4f59\u7684\u9875\u9762\u4e2d\u6240\u505a\u5e76\u6c47\u603b/ indexthem\u7684\u4e8b\u9879\u3002\u53d1\u73b0\u4efb\u4f55\u5269\u4f59\u7684\u7269\u54c1\uff0c\uff06\uff0339; tcompleted\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5c06\u5b83\u4eec\u8f6c\u79fb\u5230\u4e0b\u4e2a\u6708\u6216\u4e22\u5f03\u3002\u5b83\uff06\uff0339;\u597d\u7684\uff0c\u6ca1\u6709\u5b8c\u6210\u4e00\u5207\u3002\u60a8\u53ef\u80fd\u8fd8\u60f3\u5c06\u5176\u626b\u63cf\u5230\u4e91\u4e2d\u3002\u4f60\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5f15\u7528\u8fd9\u4e9b\u626b\u63cf\uff0c\u4f46\u5907\u53d7\u4f24\u5bb3\u3002\n \u7136\u540e\u53ea\u662f\u5728\u53d1\u751f\u65f6\u5199\u4e0b\u4e1c\u897f\u3002\u4e0d\u8981\u75db\u82e6\u5730\u75db\u82e6\u5730\u83b7\u5f97\u4e3b\u9898\u3002\u4f60\u4e0d\u4f1a\u3002\u76ee\u7684\u662f\u5f97\u5230\u91cd\u8981\u7684\u90e8\u5206\u3002\u5982\u679c\u4f60\u771f\u7684\u8bda\u5b9e\u5730\u60f3\u5ff5\u4e00\u4e9b\u91cd\u8981\u7684\u4e1c\u897f\uff0c\u5b83\u4f1a\u56de\u6765\u3002\n \u6211\u6240\u505a\u7684\u5176\u4ed6\u4e8b\u60c5\u662f\u6211\u4fdd\u7559\u4e00\u4e2a\u6211\u79f0\u4e4b\u4e3a\u77e5\u8bc6\u7684\u6b21\u8981\u7b14\u8bb0\u672c\u3002\u5b83\u4f5c\u4e3a\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u6211\u66fe\u7ecf\u7528\u8fc7\u6211\u7684\u4e3b\u9875\u7684\u52d8\u8bef\u8868\uff0coboverall\uff06\uff0339;\u5b83\u53d8\u6210\u4e86\u4e00\u79cd\u6b21\u8981\u7684\u5730\u65b9\uff0c\u4ee5\u8bb0\u5f55\u5176\u4ed6\u4fe1\u606f\u4ee5\u53ca\u6a2a\u8de8\u7b14\u8bb0\u672c\u7684\u5176\u4ed6\u7ec6\u8282\u3002\u8fd9\u5f00\u59cb\u4e86\u4e00\u4e2a\u7b26\u5408\u7b26\u5408\u4e8b\u4ef6\u3002\u6765\u81ea\u6211\u7684\u5927\u8ba2\u5355\u7684\u4e00\u4e2a\u7b14\u8bb0\u672c\u7535\u8111\u7565\u5fae\u7834\u788e\u3002\u51e0\u9875\u6389\u4e86\u51fa\u6765\uff0c\u7136\u540e\u6211\u624b\u91cc\u6709\u4e00\u4e2a\u8f83\u5c0f\u7684\u7b14\u8bb0\u672c\u3002\u6211\u5728\u8fd9\u4e2a\u7b14\u8bb0\u672c\u4e2d\u504f\u79bb\u4e86TheStrict\u98ce\u683c\u3002\u5b83\uff06\uff0339;\u6839\u636e\u6211\u7684\u9700\u6c42\uff0c\u66f4\u591a\u7684\u81ea\u7531\u6d41\u52a8\uff0c\u800c\u4e14\uff0339;\u597d\u5427\u3002\u6211\u4ecd\u7136\u5c1d\u8bd5\u5c06\u4e8b\u7269\u5206\u5f00\u5230\u5355\u72ec\u7684\u9875\u9762\u4e0a\uff0c\u5f53\u65f6\u6211\u77e5\u9053\u6574\u6d01\u3002\n \u6211\u4e5f\u4e00\u76f4\u5728\u7528\u5b83\u4ee5\u5b50\u5f39\u6811\u7684\u5f62\u5f0f\u6982\u8ff0Blogposts.normally\u6211\u5c06\u8fd9\u4e9b\u6587\u7ae0\u4f5c\u4e3a\u4e00\u4e2a\u5de8\u5927\u7684\u65e0\u5e8f\u5217\u8868\uff0c\u5176\u7236\u6bcd\u7684\u5b50\u7ea7\u522b\u4ee4\u4eba\u9057\u61be\u7684\u662f\u3002\u6bcf\u4e2a\u9876\u7ea7\u7684\u4e1c\u897f\u90fd\u53d8\u6210\u4e86\u4e00\u4e2a\uff06\uff0334;\u90e8\u5206\uff06\uff0334;\u57fa\u4e8eMainessense\u7684\u6bb5\u843d\u6216\u53e5\u5b50\u6cb8\u817e\u3002 \n\u8fd9\u79cd\u6d41\u52a8\u7684\u610f\u5916\u4fbf\u5229\u662f\u7b14\u8bb0\u672c\u7535\u8111i\uff06\uff0339; m\u4f7f\u7528\u7684\u662f\u5c11\u91cf\u7684\uff0c\u4ee5\u9002\u5e94\u952e\u76d8\u7684\u4e00\u534a\uff1a\n    \u8fd9\u8ba9\u6211\u5728\u6613\u4e8e\u6293\u4f4f\u7684\u5730\u65b9\u7559\u4e0b\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u540c\u65f6\u4e5f\u4f1a\u7565\u5fae\u8d70\u51fa\u6765\uff0c\u76f4\u5230\u4ed6\u4eec\u9700\u8981\u3002\u6211\u8fd8\u4fdd\u7559\u4e86\u6211\u7684\u94c5\u7b14\u548c\u670d\u52a1\u5668\u3002\u5f53\u6211\u8d70\u51fa\u623f\u5b50\u65f6\uff0c\u6211\u8fd9\u4e2a\u6708\u7684\u5305\u88c5\uff06\uff0339; s journal\uff0capencil\u548c\u6a61\u76ae\u64e6\u3002\n \u7eb8\u5bf9\u6211\u6765\u8bf4\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u4e3e\u52a8\u3002\u6ca1\u6709\u6052\u5b9a\u7684\u63d0\u9192\u3002\u5728\u90a3\u91cc\u7684Noproduct\u56e2\u961f\u8bd5\u56fe\u5728\u5fc3\u7406\u4e0a\u64cd\u7eb5\u6211\u7684\u7eb8\u5f20\uff08\u5c3d\u7ba1\u8bda\u5b9e\u5730\uff0c\u53ef\u80fd\u6709\u52a9\u4e8e\u5efa\u7acb\u6bcf\u5929\u4f7f\u7528\u5b83\u7684\u4e60\u60ef\uff09\u3002\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u5e73\u9759\u7684\u6280\u672f\uff0c\u6211\u90fd\u662f\u4e3a\u4e86\u5b83\u3002\n \uff06lt; Mara\uff06gt;\u8fd9\u9879\u6280\u672f\u662f\u5417\uff1f\u8fd9\u53ea\u662f\u4e00\u4e2a\u534a\u7ed3\u6784\u5316\u7684\u5199\u4f5c\u7eb8\u5f20\u7684\u65b9\u5f0f\u3002\u8fd9\u662f\u5426\u7b97\u4f5c\u6280\u672f\uff1f\n \uff06lt; cadey\uff06gt;\u8bf4\u5b9e\u8bdd\uff0c\u6211\u4e0d\u77e5\u9053\u3002\u5728\u6700\u4f73\u6848\u4f8b\u4e2d\uff0c\u4ec0\u4e48\u662f\u4e0d\u662f\u6280\u672f\u4e0d\u5065\u5eb7\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u6280\u672f\uff0c\u987d\u56fa\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u5b83\u4f9d\u8d56\u2122\u3002\u4f60\u53ef\u80fd\u4e0d\u8ba4\u4e3a\u8fd9\u662f\uff06\uff0334;\u771f\u5b9e\u7684\uff06\uff0334;\u6280\u672f\u88ab\u91ca\u653e\u5230\u5b83\u6ca1\u6709\u771f\u6b63\u7684\u7535\u5b50\u5143\u4ef6\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684\u610f\u89c1\uff0c\u4f46\u662f\u6211\u5e0c\u671b\u8fd9\u662f\u6280\u672f\u7684\uff0c\u5c31\u50cf\u7ecf\u5e38\u5243\u987b\u5200\u662f\u6280\u672f\u4e00\u6837\u7684\u3002\u5b83\u662f\u8bbe\u8ba1\u548c\u5efa\u9020\u7684\u3002\u5982\u679c\u662fConisn\uff06\uff0339; T\u6280\u672f\uff0c\u662f\u4ec0\u4e48\uff1f\u53e6\u5916\uff0c\u8fd9\u6837\u5c31\u6ca1\u6709\u98ce\u9669\uff0c\u6ca1\u6709\u670d\u52a1\u5668\u8131\u79bb\u6211\u7684\u7eb8\u5f20\uff01\n \u54e6\uff0c\u4e5f\u662f\uff0c\u5982\u679c\u4f60\u611f\u5230\u65e0\u804a\uff0c\u5e76\u4e14\u60f3\u5230\u8bbe\u8ba1\uff0c\u8bf7\u4e0d\u8981\u5bb3\u6015\u76d6\u5b50\u4e0a\u7684\u8863\u670d\u3002\u5236\u4f5c\u4f60\u7684\u7eb8\u5f20\u3002\u4e0d\u8981\u62c5\u5fc3\u5b83\u662f\u5b8c\u7f8e\u7684\u3002\u5b83\uff06\uff0339;\u8bf7\u5e2e\u52a9\u60a8\u5728areagomple\u540e\u5c06\u672a\u6765\u5206\u5f00\u7684\u7b14\u8bb0\u672c\u7535\u8111\u5206\u5f00\u3002\n \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e0a\u4e2a\u6708\u6211\uff06\uff0339;\u572849\u9875\u4e0a\u505a\u4e86\u7b14\u8bb0\u3002\u5927\u591a\u6570todo\u9879\u76ee\u90fd\u5b8c\u6210\u4e86\u3002\u5c11\u4e8e10\uff05\u7684\u5931\u8d25/\u88ab\u53d6\u6d88\u4e86\u3002\u4e0d\u5230\u7b2c\u4e8c\u5929\u6eda\u52a8\u5230\u7b2c\u4e8c\u5929\u768410\uff05\u3002\u6211\u57fa\u4e8eiddn\uff06\uff0339; t\u5b8c\u6210\u524d\u4e00\u5929\u5b8c\u6210\u6211\u7684Todo\u5217\u8868\u3002\u6211\u7528\u624b\u5199\u4e0b\u6bcf\u4ef6\u4e8b\uff0c\u4ee5\u5e2e\u52a9Meremember\u4f18\u5148\u8003\u8651\u5b83\u4eec\u3002\u5f53\u6211\u9700\u8981\u505a\u7684\u4e8b\u60c5\u65f6\uff0c\u6211\u77a7\u4e0d\u8d77MyNotebook\u7684\u4e0d\u5b8c\u6574\u7269\u54c1\u3002\u6211\u4f7f\u7528\u6a61\u76ae\u7b4b\u6765\u4fdd\u6301\u7b14\u8bb0\u672c\u5c01\u95ed\u3002\u6211\u4e00\u76f4\u5728\u8003\u8651\u5c06\u76ee\u524d\u5728KnowledGenotebook\u4e2d\u7684\u4e1c\u897f\u6ed1\u5165\u4e3b\u8981\u6bcf\u6708\u4e00\u4e2a\u3002\u5b83\u548c\uff0339;\u597d\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u7eb8\u5f20\u3002 Asuccess\u548c\uff0339; \n\u8fd9\u4e2a\u7cfb\u7edf\u9002\u7528\u4e8e\u6211\u3002 \u6211\u4e0d\u77e5\u9053\u5b83\u662f\u5426\u4f1a\u4e3a\u4f60\u5de5\u4f5c\uff0c\u4f46\u5982\u679c\u4f60\u6709\u4eba\u5728\u52aa\u529b\u4e0b\u594b\u6597\uff0c\u6211\u771f\u7684\u5efa\u8bae\u5c1d\u8bd5\u5b83\u3002\u4f60\u53ef\u80fd\u6709\u51e0\u4e2a\u7eb8\u7b14\u8bb0\u672c\u4ece\u521d\u521b\u516c\u53f8\u7559\u4e0b\u4e86\u4e00\u4e2a\u8d43\u7269\u5305\u3002 \u81ea\u4ece\u4f60\u5f97\u5230\u5b83\u4eec\u4ee5\u6765\uff0c\u4f60\u53ef\u80fd\u4e5f\u4ece\u672a\u78b0\u8fc7\u4ed6\u4eec\u3002\u8fd9\u5f88\u597d\u3002 \u6211\u771f\u7684\u771f\u7684\u4f7f\u7528\u5c0f\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u56e0\u4e3a\u6211\u53d1\u73b0\u66f4\u591a\u7684\u4f59\u989d\u7ed1\u5b9a\u7684\u7b14\u8bb0\u672c\u7535\u8111\u6bd4\u6743\u9650\u53c2\u8003\u8d44\u6599\u66f4\u96be\u5730\u5199\u5728\u5de6\u4fa7\u3002 \u4f60\u7684\u65c5\u8d39\u53ef\u80fd\u4f1a\u6539\u53d8\u3002  \uff06lt; cadey\uff06gt; \u6211\u4f1a\u5728\u8fd9\u91cc\u5305\u62ec\u4e00\u4e2a\u7b14\u8bb0\u672c\u9875\u9762\u7684\u626b\u63cf\uff0c\u4f46\u8fd9\u4f1a\u63ed\u793a\u6211\u7684\u4e2a\u4eba\u4fe1\u606f\uff0c\u5373\u6211\u6ca1\u6709\u771f\u6b63\u60f3\u8981\u628a\u8fd9\u4e2a\u535a\u5ba2\u653e\u5728\u8fd9\u4e2a\u535a\u5ba2\u4e0a\uff0c\u56e0\u4e3a\u5fcd\u51ac\u53ef\u80fd\u4f1a\u6253\u7834NDA\u7684\u5de5\u4f5c\u6761\u6b3e\uff0c\u6240\u4ee5\u6211\u4e0d\u60f3 \u5982\u679c\u4f60\u5360\u7528\uff0c\u90a3\u5c31\u5192\u9669\u3002  \u672c\u6587\u53d1\u5e03\u4e8eM06 13 2021.\u4e8b\u5b9e\u548c\u60c5\u51b5\u81ea\u53d1\u8868\u4ee5\u6765\u53ef\u80fd\u53d1\u751f\u53d8\u5316\u3002 \u5982\u679c\u51fa\u73b0\u9519\u8bef\u6216\u4e0d\u6e05\u695a\uff0c\u8bf7\u5728\u7ed3\u8bba\u4e4b\u524d\u4e0e\u6211\u8054\u7cfb\u3002 ", "note_en": "I have a bit of a reputation of being a very techno-savvy person. People havehad the assumption that I have some kind of superpowerful handcrafted taskmanagement system that rivals all other systems and fully integrates witheverything on my desktop. I don&#39;t. I use paper to keep track of my day to daytasks. Offline, handwritten paper. I have a big stack of little notebooks and Igo through them one each month. Today I&#39;m going to discuss the core ideas of mytask management toolchain and walk you through how I use paper to help me getthings done.\n I have tried a lot of things before I got to this point. I&#39;ve used nothing,Emacs&#39; Org mode, Jira, GitHub issues and a few reminder apps. They all haven&#39;tquite cut it for me.\n The natural place to start from is doing nothing to keep track of my tasks andgoals. This can work in the short term. Usually the things that are importantwill come back to you and you will eventually get them done. However it can behard for it to be a reliable system.\n &lt; Cadey&gt; Focus is hard. Memory is fleeting. Data gets erased. Object permanence is amyth. Paper sits by the side and laughs.\n It does work for some people though. I just don&#39;t seem to be one of them. Doingnothing to keep track of my tasks only really works when there are externalstructures around to help me keep track of things. Standup meetings or some kindof daily check-in are vital to this, and they sort of work because my team ishelping keep everyone accountable for getting work done. This is very dependenton the team culture being healthy and on me being somewhere that I feelpsychologically safe enough to admit when I make a mistake (which I have onlyreally felt working at Tailscale). It also doesn&#39;t follow me from job to job, sochanging employers would also mean I can&#39;t take my organization system with me.So that option is out.\n Emacs is a very extensible text editor.It has a turing-complete scripting language called Emacs Lisp at its core andyou can build out just about anything you want with it. As such, many packageshave been developed. One of the bigger and more common packages is  OrgMode. It is an Emacs major mode that helps you keep trackof notes, todo lists, timekeeping, literate programming, computational notebooksand more. I have used Org Mode for many years in the past and I have no doubtthat without it I would probably have been fired at least twice.\n One of the main philosophies is that Org Mode is text at its core. The wholeuser experience is built around text and uses Emacs commands to help youmanipulate text. Here&#39;s an example Org Mode file like I used to use for taskmanagement:\n #+TITLE: June 2021* June 10, 2021** SRE*** TODO put out the fire in prod before customers noticeOh god, it&#39;s a doozy. The database server takes too long to run queries onlysometimes on Thursdays. Why thursday? No idea. It just happens. Veryfrustrating. I wonder if God is cursing me.** Devel*** DONE Implement the core of flopnax for abstract rilkefs CLOSED: [2021-06-10 Thu 16:20]*** TODO write documentation for flopnax before it is shipped** Overhead*** DONE ENG meeting CLOSED: [2021-06-10 Thu 15:00]*** TODO Assist Jessie with the finer points of Rust**** References vs Values**** LifetimesProgramming in Rust is the adventure of a lifetime!** Personal*** DONE Morning meds CLOSED: [2021-06-10 Thu 09:04]*** TODO Evening meds*** TODO grocery run\n Org Mode used to be a core part of my workflow and life. It was everpresent andused to keep track of everything. I would even track usage of certainrecreational substances in Org Mode with a snippet of Emacs Lisp to do somebasic analytics on usage frequency. Org Mode can live with me and I don&#39;t haveto give it up when I change jobs.\n I got out of the habit a while ago and it&#39;s been really hard to go back into thehabit. I still suggest Org Mode to people, but it&#39;s no longer the thing that Iuse day to day. It also is hard to use from my tablet (iPad) and my phone(iPhone). It also tends to vanish when you close the window, and when you haveobject permanence issues that tends to make things hard.\n &lt; Cadey&gt; I could probably set up something with one of those fancy org-mode frontendsserved over HTTP, but that would probably end up being more effort than it&#39;sworth for me\n Another tool I&#39;ve used for this is my employer&#39;s task management tool of choice.At past jobs this has ranged from GitHub to Jira. This is a solid choice. Itkeeps everything organized and referenced with other people. I don&#39;t have to domanual or automated synchronization of information into that ticket trackingsystem to be sure other people are updated. However, you inherit a lot of theinertia of how the ticket tracking system of choice is used. At a past job therewere unironically 17 different states that a ticket could be in. Most of themwere never used and didn&#39;t matter, yet they could not be removed lest it breakthe entire process that the product team used to keep track of things.\n Doing it like this works great if your opinions about how issues should betracked agree with your employer&#39;s process (if this is the case, you probablyset up the issue tracking system). As I mentioned before, this also means thatyou have to leave that system behind when you change jobs. If you are someonethat never really changes jobs, this can work amazingly. I am not one of thosepeople.\n Something else I&#39;ve tried is to set up my own private GitHub/Gitea project tokeep track of things. We used one for organizing our move to Ottawa even. Thisis a very low-friction system. It is easy to set up and the issues will botheryou in your news feed, so they are everpresent. It&#39;s also easy to close thewindow and forget about the repo.\n There is also that little hit of endorphins from closing an issue. That littlerush can help fuel a habit for using the tool to track things, but the rush goesaway after a while.\n &lt; Mara&gt; Wait, if you have issues remembering to look at your org mode file or trackerboard or whatever, why can&#39;t you just set up a reminder to update it? Surelythat can&#39;t be that hard to do?\n &lt; Cadey&gt; Don&#39;t you think that if it was that easy, I would already be doing that? Do youthink I like having this be so hard? Notifications that are repetitive fade intothe background when I see them too often. I subconsciously filter them out. Theydo not exist to me. Even if it is one keypress away to open the board or appendto my task list, I will still forget to do it, even if it&#39;simportant.\n So, I&#39;ve arrived on paper to keep track on these things. Paper is cheap. Paperis universal. Paper doesn&#39;t run out of battery. Paper doesn&#39;t vanish into theshadow realm when I close the window. Paper can do anything I can do with apencil. Paper lets me turn back pages in the notebook and scan over for thingsthat have yet to be done. Honestly I wish I had started using paper for thissooner. Here&#39;s how I use paper:\n Get a cheap notebook or set of notebooks. They should ideally be small,pocketable notebooks. Something like 30 sheets of paper per notebook. I can&#39;tfind the cheap notebooks that I bought on Amazon, but I found somethingsimilar here.Don&#39;t be afraid to buy more than you need. This stuff is really cheap. Havingmore paper around can&#39;t hurt.  Field Notesworks in a pinch, but their notebooks can be a bit expensive. The point isyou have many options.\n Label it with the current month (it&#39;s best to start this at the beginning ofa month if you can). Put contact information on the inside cover in case youlose it.\n Start a new page every day. Put the date at the top of the page.\n Metadata about the day goes in the margins. I use this to keep a log of whois front as well as taking medicine.\n  TODO items start with a  -. Those represent things you need to do buthaven&#39;t done yet.\n When the item is finished, put a vertical line through the  - to make it a +.\n If the item either can&#39;t or won&#39;t be done, cross out the  - to make it intoa  *.\n If you have to put off a task to a later date, turn the  - into a  -&gt;. Ifthere is room, put a brief description of why it needs to be moved or when itis moved to. If there&#39;s no room feel free to write it out in prose form atthe end of your page.\n Notes start with a middot ( \u00b7). They differ from prose as they are notcomplete sentences. If you need to, you can always turn them into TODO itemslater.\n Write in pencil so you can erase mistakes. Erase carefully to avoid rippingthe paper, You hardly need to use any force to erase things.\n There is only one action, appending. Don&#39;t try and organize things by topicas you would on a computer. This is not a computer, this is paper. Paperworks best when you append only. There is only one direction, forward.\n If you need to relate a bunch of notes or todo items with a topic, skip aline and write out the topic ending with a colon. When ending the topicalnotes, skip another line.\n Don&#39;t be afraid to write in it. If you end up using a whole notebook beforethe month is up, that is a success. Record insights, thoughts, feelings andthings that come to your mind. You never know what will end up being usefullater.\n At the end of the month, look back at the things you did and summarize/indexthem in the remaining pages. Discover any leftover items that you haven&#39;tcompleted yet so you can either transfer them over to next month or discardthem. It&#39;s okay to not get everything done. You may also want to scan it toback it up into the cloud. You may never reference these scans, but backupsnever hurt.\n And then just write things in as they happen. Don&#39;t agonize over getting themall. You will not. The aim is to get the important parts. If you really honestlydo miss something that is important, it will come back.\n Something else I do is I keep a secondary notebook I call  Knowledge. Itstarted out as the notebook that I used to document errata for my homelab, butoverall it&#39;s turned into a sort of secondary place to record other informationas well as indexing other details across notebooks. This started a bit onaccident. One of the notebooks from my big order came slightly broken. A fewpages fell out and then I had a smaller notebook in my hands. I stray from thestrict style in this notebook. It&#39;s a lot more free flowing based on my needs,and that&#39;s okay. I still try to separate things onto separate pages when I canto help keep things tidy.\n I&#39;ve also been using it to outline blogposts in the form of bullet trees.Normally I start these articles as a giant unordered list with sub-levels forvarious details on its parent thing. Each top-level thing becomes a &#34;section&#34;and things boil down into either paragraphs or sentences based on what makessense.\n An unexpected convenience of this flow is that the notebooks I&#39;m using are smallenough to fit under the halves of my keyboard:\n    This lets me leave the notebooks in an easy to grab place while also puttingthem slightly out of the way until they are needed. I also keep my pencil anderaser closeby. When I go out of the house, I pack this month&#39;s journal, apencil and an eraser.\n Paper has been a great move for me. There&#39;s no constant reminders. There&#39;s noproduct team trying to psychologically manipulate me into using paper more(though honestly that might have helped to build the habit of using it daily).It is a very calm technology and I am all for it.\n &lt; Mara&gt; Is this technology though? This is just a semi-structured way of writing thingson paper. Does that count as technology?\n &lt; Cadey&gt; To be honest, I don&#39;t know. The line of what is and what is not technology isvery thin in the best case. I think that this counts as a technology, butoverall this is a huge It Depends\u2122. You may not think this is &#34;real&#34; technologybecause there&#39;s no real electronic component to it. That is a valid opinion,however I would like to posit that this is technology in the same way that amanual shaving razor is technology. It was designed and built to purpose. If thatisn&#39;t technology, what is? Plus, this way there&#39;s no risk of server downtimepreventing me from using paper!\n Oh, also, if you feel bored and a design comes to mind, don&#39;t be afraid todoodle on the cover. Make paper yours. Don&#39;t worry about it being perfect. It&#39;sthere to help you tell the notebooks apart in the future after they arecomplete.\n So far over the last month I&#39;ve made notes on 49 pages. Most of the TODO itemsare complete. Less than 10% of them failed/were cancelled. Less than 10% of themhad to roll over to the next day. I assemble my TODO lists based on what Ididn&#39;t get done the previous day. I write each thing out by hand to help meremember to prioritize them. When I need something to do, I look down at mynotebook for incomplete items. I use a rubber band to keep the notebook closed.I&#39;ve been considering slipstreaming the stuff currently in the  Knowledgenotebook into the main monthly one. It&#39;s okay to go through paper. That&#39;s asuccess.\n This system works for me. I don&#39;t know if it will work for you, but if you havebeen struggling with remembering to do things I would really suggest trying it.You probably have a few paper notebooks left over from startups handing them outin a swag pack. You probably also have never touched them since you got them.This is good. I only really use the small notebooks because I found the morefancy bound notebooks were harder to write on the left sides more than the rightsides. Your mileage may vary.\n &lt; Cadey&gt; I would include a scan of one of my notebook pages here, but that would revealsome personal information that I don&#39;t really want to put on this blog as wellas potentially break NDA terms for work, so I don&#39;t want to risk that if you canunderstand.\n   This article was posted on M06 13 2021. Facts and circumstances may have changed since publication. Please  contact me before jumping to conclusions if something seems wrong or unclear.", "posttime": "2021-06-26 15:54:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "everyday", "title": "\u4e3a\u65e5\u5e38\u4efb\u52a1\u4f7f\u7528\u7eb8\u5f20 ", "title_en": "Using Paper for Everyday Tasks", "transed": 1, "url": "https://christine.website/blog/gtd-on-paper-2021-06-13", "via": "", "real_tags": ["everyday"]}, {"category": "", "categoryclass": "", "imagename": "e48fa8f2eda383a191cec63e087cd7f3.jpg", "infoid": 1068401, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u8368\u9ebb\u75b9\u7684\u975e\u6d32\u4f4e\u5730\u871c\u8702\uff08Apis Mellifera scutella\uff09\u5d29\u6e83\u65f6\uff0c\u7531\u4e8e\u5185\u5fc3\u7684\u5a01\u80c1\uff0c\u4ed6\u4eec\u8fd9\u6837\u505a\uff1a\u751f\u957f\uff0c\u4e0d\u673d\u7684\u514b\u9686\u519b\u961f\u7684\u7ade\u4e89\u5bf9\u624b\u8702\u7a9d\u3002\n  \u90a3\u652f\u519b\u961f\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u7ade\u4e89\u5bf9\u624b\u4e9a\u79cd\u7684\u5973\u6027\u5de5\u4eba - \u5357\u975e\u5df1\u871c\u8702\uff08Apis Mellifera Capensis\uff09 - \u53ef\u4ee5\u521b\u9020\u81ea\u5df1\u7684\u5b8c\u7f8e\u526f\u672c\uff0c\u4e00\u4e2a\u4eba\u53d1\u73b0\u8fc7\u53bb\u4e09\u5341\u5e74\u6765\u5b8c\u6210\u4e86\u8fd9\u4e48\u767e\u4e07\u6b21\u3002\u51ed\u501f\u8fd9\u79cd\u6c38\u4e45\u514b\u9686\u80fd\u529b\uff0c\u8702\u7a9d\u8702\u7a9d\u6f5c\u5165\u4ed6\u4eec\u7684\u4f4e\u5730\u871c\u8702\u7ade\u4e89\u5bf9\u624b\u7684\u8368\u9ebb\u75b9\uff0c\u5e76\u5728\u590d\u5236\u540e\u5012\u51fa\u526f\u672c\uff08\u4e0d\u9700\u8981\u5973\u738b\uff09\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9\u4e9b\u514b\u9686\u662f\u8d2a\u5a6a\u7684\u4eba\uff0c\u62d2\u7edd\u505a\u4efb\u4f55\u5de5\u4f5c\u3002\n  \u73b0\u5728\uff0c\u4e00\u9879\u65b0\u7684\u7814\u7a76\u63ed\u793a\u4e86\u5947\u602a\u548c\u5f3a\u5927\u7684\u9002\u5e94\u7684\u9057\u4f20\u57fa\u7840\u3002\u4e0e\u5927\u591a\u6570\u52a8\u7269\u4e0d\u540c\uff0c\u751a\u81f3\u662f\u4ed6\u4eec\u81ea\u5df1\u7684\u5973\u738b\uff0c\u5973\u6027\u5de5\u4eba\u4e0d\u4f1a\u91cd\u65b0\u6d17\u53d1\u4ed6\u4eec\u6240\u5728\u7684\u9e21\u86cb\u7684DNA\u3002\u8fd9\u4f7f\u5de5\u4eba\u80fd\u591f\u59cb\u7ec8\u5982\u4e00\u5730\u91cd\u65b0\u521b\u5efa\u81ea\u5df1\u7684\u5b8c\u7f8e\u526f\u672c - \u514b\u9686 - \u6bcf\u6b21\u4ed6\u4eec\u91cd\u73b0\u3002\u6839\u636e\u7814\u7a76\u4eba\u5458\uff0c\u8fd9\u79cdDNA\u91cd\u65b0\u6d17\u8131\u8fc7\u7a0b\u7684\u504f\u89c1\u662f\u4e0e\u4ed6\u4eec\u89c1\u8fc7\u7684\u4efb\u4f55\u4e1c\u897f\u4e0d\u540c\u3002\n   \uff06\uff0334;\u5b83\uff06\uff0339;\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u3002\u5b83\uff06\uff0339; s\u4e5f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u529f\u80fd\u5931\u8c03\uff0c\uff06\uff0334;\u6089\u5c3c\u5927\u5b66\u884c\u4e3a\u9057\u4f20\u5b66\u6559\u6388\u7684\u9886\u5bfc\u4f5c\u8005Benjamin Oldroyd\u544a\u8bc9Live Science\uff0c\u6307\u7684\u662f\uff0c\u5728\u9e21\u86cb\u5236\u9020\u8fc7\u7a0b\u4e2d\u901a\u5e38\u9700\u8981\u91cd\u65b0\u6d17\u8131\u3002 \uff06\uff0334;\u7136\u800c\uff0c\u4e0d\u77e5\u4f55\u6545\uff0c\u4ed6\u4eec\u8bbe\u6cd5\u505a\u5230\u4e86[\u4ecd\u7136\u4ea7\u5375]\u3002\u5b83\uff06\uff0339; s\u75af\u4e86;\u5728\u4efb\u4f55\u5730\u65b9\u4e4b\u524d\uff0c\u6211\u6ca1\u6709\u542c\u8bf4\u8fc7\u8fd9\u6837\u7684\u4e1c\u897f\u3002\uff06\uff0334;\n  \u871c\u8702\u5de5\u4eba\u548c\u5176\u4ed6\u793e\u4f1a\u6606\u866b\u7684\u80fd\u529b\u901a\u8fc7\u4e00\u79cd\u53eb\u505a\u585e\u6258\u6240\u8425\u517b\u7684\u5b55\u4ea7\u6027\u7e41\u6b96\u5f62\u5f0f\u6765\u7e41\u6b96\uff0c\u5176\u4e2d\u5973\u6027\u4ea7\u751f\u672a\u53d7\u7cbe\u5375\u7684\u5973\u6027\u540e\u4ee3\u3002\u6bcf\u6b21\u5979\u521b\u9020\u540e\u4ee3\u65f6\uff0c\u5355\u4eb2\u5de5\u4f5c\u8005\u8702\u90fd\u4f1a\u590d\u5236\u5979\u4ece\u7236\u6bcd\uff08\u5973\u738b\u548c\u7537\u6027\u65e0\u4eba\u673a\uff09\u6536\u5230\u7684\u67d3\u8272\u4f53\u5206\u4e3a\u56db\u4e2a\u3002\u63a5\u4e0b\u6765\uff0c\u5979\u91c7\u7528\u4e86\u6240\u6709\u56db\u79cd\u67d3\u8272\u4f53\u7684\u9057\u4f20\u7269\u8d28\uff0c\u7528\u4e00\u79cd\u79f0\u4e3a\u91cd\u7ec4\u7684\u8fc7\u7a0b\uff0c\u5c06\u5176\u91cd\u65b0\u6d17\u724c\u5e76\u7528\u8be5\u6df7\u5408DNA\u4ea7\u751f\u56db\u79cd\u67d3\u8272\u4f53\u3002\u8fd9\u79cd\u91cd\u65b0\u6d17\u724c\u4fdd\u8bc1\uff0c\u5373\u4f7f\u53ea\u6709\u4e00\u4e2a\u7236\u6bcd\uff0c\u672a\u6765\u7684\u540e\u4ee3\u4e5f\u5c06\u662f\u57fa\u56e0\u4e0a\u7684\u3002\n \u7136\u800c\uff0c\u53ea\u6709\u56db\u79cd\u67d3\u8272\u4f53\u88ab\u6311\u9009\u51fa\u6765\uff0c\u5e76\u4e14\u6ca1\u6709\u901a\u8fc7\u6027\u4f34\u4fa3\u5f15\u5165\u65b0\u7684\u9057\u4f20\u7269\u8d28\uff0c\u8fd9\u5bfc\u81f4\u6bcf\u6b21\u8fdb\u884c\u6d17\u724c\u6216\u6bcf\u4e00\u4ee3Oldroyd\u65f6\uff0c\u8fd9\u5bfc\u81f4\u5e73\u5747\u9057\u4f20\u591a\u6837\u6027\u7684\u9057\u4f20\u591a\u6837\u6027\u7684\u5e73\u5747\u635f\u5931\u3002\u5728\u51e0\u4ee3\u5355\u4f4d\u751f\u6b96\u7684\u51e0\u4ee3\u540e\uff0c\u9057\u4f20\u7269\u8d28\u7684\u7d2f\u79ef\u635f\u5931\u5bfc\u81f4\u9057\u4f20\u591a\u6837\u6027\u7684\u6c34\u5e73\uff0c\u8fd9\u8db3\u4ee5\u81f4\u6b7b\u3002\n \u56e0\u6b64\uff0c\u5927\u591a\u6570\u793e\u4ea4\u6606\u866b\u4f9d\u8d56\u4e8e\u4ee3\u8868\u4ed6\u4eec\u6027\u884c\u4e3a\u7684\u5973\u738b\u3002\u4f5c\u4e3a\u56de\u62a5\uff0c\u9057\u4f20\u591a\u6837\u5316\u7684\u5de5\u4eba\u4fdd\u6301\u6b96\u6c11\u5730\u7684\u5065\u5eb7\uff0c\u5e76\u4fdd\u62a4\u4ed6\u4eec\u5bc6\u5207\u76f8\u5173\u7684\u5144\u5f1f\u59d0\u59b9\u548c\u8868\u5144\u5f1f\u7684\u80b2\u96cf\u3002 \n\uff06\uff0334;\u5b83\u548c\uff0339;\u6211\u4eec\u5728\u4e00\u4e2a\u4eba\u7c7b\u793e\u4f1a\u4e2d\uff0c\u6211\u4eec\u4e4b\u95f4\u7684\u7d27\u5f20\u7387\u4e0e\u4e2a\u4eba\u4e4b\u95f4\u6709\u597d\u5904\uff0c\u4ec0\u4e48\u5bf9\u793e\u4f1a\u6709\u5229\u4e8e\uff06\uff0339;\u6211\u4eec\u63d0\u51fa\u4e86\u6240\u6709\u8fd9\u4e9b\u793e\u4f1a\u89c4\u8303\u5141\u8bb8\u6211\u4eec\u8fd0\u4f5c\uff0c\uff06\uff0334; Oldroyd\u8bf4\u3002 \uff06\uff0334;\u5728\u871c\u8702\u793e\u4f1a\u4e2d\uff0c\u6f14\u53d8\u4e3a\u6291\u5236\u81ea\u79c1\u884c\u4e3a\u7684\u4e8b\u60c5\u4e4b\u4e00\u662f[\u90a3\u4e2a]\u5de5\u4eba\u4e00\u822c\u53ef\u4ee5\uff06\uff0339; t\u4ea7\u5375\u3002\uff06\uff0334;\n \u6839\u636e\u5965\u5c14\u535a\u7f57\u4f0a\u5fb7\u7684\u8bf4\u6cd5\uff0c\u8fd9\u4e3b\u8981\u662f\u871c\u8702\u7684\u871c\u8702\uff0c\u8fd9\u5728\u6574\u4e2a\u793e\u4f1a\u6606\u866b\u7e41\u6b96\u4e2d\u9075\u5b88\u3002\u4f46\u871c\u8702\u5de5\u4eba\u7684\u9057\u4f20\u7a81\u53d8\u4f7f\u5b83\u4eec\u80fd\u591f\u7528\u6765\u81ea\u56db\u6761\u67d3\u8272\u4f53\u4e2d\u7684\u6240\u6709\u9057\u4f20\u7269\u8d28\u8fdb\u884c\u5355\u6027\u539f\u4ea7\u5730\u4ea7\u5375\uff08\u6240\u4ee5\u5b83\u4eec\u4e0d\u67d0\u79cd\u67d3\u8272\u4f53\u4e22\u6389\u4efb\u4f55\u67d3\u8272\u4f53\uff09\u3002\u901a\u8fc7\u8fd9\u79cd\u80fd\u529b\uff0c\u4ed6\u4eec\u53ef\u4ee5\u9632\u6b62\u7531\u91cd\u7ec4\u8fc7\u7a0b\u5f15\u8d77\u7684\u9057\u4f20\u591a\u6837\u6027\u7684\u7acb\u5373\u635f\u5931\u3002\u8fd9\u5141\u8bb8\u4ed6\u4eec\u5728\u51e0\u5341\u5e74\u4e2d\u514b\u9686\u81ea\u5df1\uff0c\u5373\u4f7f\u5728\u957f\u671f\u514b\u9686\u5230\u603b\u4f53\u4e0a\u7684\u4eba\u53e3\u6ca1\u6709\u9057\u4f20\u591a\u6837\u6027\u3002\n \u8fd9\u514b\u9686\u8d85\u7ea7\u5927\u56fd\u5c06\u6b96\u6c11\u5730\u653e\u5728\u4e2a\u4eba\u4e3b\u4e49\u548c\u793e\u4f1a\u6027\u4e4b\u95f4\u66f4\u7cbe\u7ec6\u7684\u5e73\u8861\u70b9\u4e0a\u3002\u6839\u636e\u7814\u7a76\u4eba\u5458\uff0c\u5982\u679c\u4ed6\u4eec\u63d0\u793a\u8fc7\u6765\uff0c\u4ed6\u4eec\u53ef\u80fd\u9762\u4e34\u706d\u7edd\u7684\u98ce\u9669\u3002\n \u8981\u4e86\u89e3\u514b\u9686\u5982\u4f55\u521b\u9020\u6570\u767e\u4e07\u4efd\u81ea\u5df1\u7684\u526f\u672c\uff0c\u4f46\u5386\u53f2\u4ecd\u7136\u662f\u5386\u53f2\uff0c\u4ed6\u7684\u56e2\u961f\u4e0e\u4ed6\u4eec\u7684\u5973\u738b\u548c\u5979\u7684\u540e\u4ee3\u7684\u871c\u8702\u5de5\u4eba\u7684\u57fa\u56e0\u7ec4\u6bd4\u8f83\u4e86\u3002\n \u5728\u8feb\u4f7f\u6597\u7bf7\u5973\u738b\u7e41\u6b96\u540e\u901a\u8fc7\u7528\u624b\u672f\u80f6\u5e26\u6765\u7e41\u6b96\uff0c\u9632\u6b62\u200b\u200b\u5979\u4ece\u4ea4\u914d\uff0c\u8be5\u56e2\u961f\u68c0\u67e5\u4e86\u5979\u4eec\u751f\u4ea7\u7684\u62ab\u80a9\u548c25\u53ea\u5e7c\u866b\u7684\u67d0\u4e9bDNA\u5e8f\u5217\u3002\u7136\u540e\uff0c\u4ed6\u4eec\u4e3a\u56db\u5f20\u871c\u8702\u5de5\u4eba\u53ca\u517663\u4e2a\u5e7c\u866b\u505a\u4e86\u540c\u6837\u7684\u4e8b\u60c5\u3002\n \u8be5\u56e2\u961f\u53d1\u73b0\uff0c\u5973\u738b\u7684\u65e0\u6027\u590d\u5236\u540e\u4ee3\u5177\u6709\u91cd\u7ec4\u6c34\u5e73\uff08DNA\u6df7\u5408\uff09\u6bd4\u5de5\u4eba\u7684\u9057\u4f20\u76f8\u540c\u514b\u9686\u7684\u540e\u4ee3\u5927100\u500d - \u8fd9\u8868\u660e\u6597\u7bf7\u5de5\u4eba\u871c\u8702\u5df2\u7ecf\u8fdb\u5316\u4e86\u9884\u9632\u91cd\u7ec4\u7684\u7a81\u53d8\u3002\u5982\u679c\u6ca1\u6709\u65e0\u5f62\u7684\u91cd\u5851\u8fc7\u7a0b\u5f15\u8d77\u7684\u9057\u4f20\u7269\u8d28\u7684\u4e09\u5206\u4e4b\u4e00\u5931\u53bb\u7684\u98ce\u9669\uff0c\u5de5\u4eba\u53ef\u4ee5\u81ea\u7531\u5730\u4e0d\u65ad\u521b\u9020\u81ea\u5df1\u7684\u5b8c\u7f8e\u526f\u672c\u3002\n \u5de5\u4eba\u514b\u9686\u7684\u80fd\u529b\u5c06\u4f7f\u4ed6\u4eec\u7684\u6b96\u6c11\u5730\u653e\u5728\u66f4\u9ad8\u7684\u4e0d\u7a33\u5b9a\u4f4d\u7f6e\uff0c\u7279\u522b\u662f\u4e00\u65e6\u5973\u738b\u53f6\u5b50\u6216\u6b7b\u4ea1\u548c\u65e7\u7684\u793e\u4f1a\u79e9\u5e8f\u5d29\u6e83\u4e86\u3002\u5de5\u4eba\u5c06\u628a\u81ea\u5df1\u5949\u732e\u7ed9\u81ea\u79c1\u7684\u8ba1\u5212 - \u4f8b\u5982\u53d1\u73b0\u5c06\u514b\u9686\u653e\u5165\u6743\u529b\u4f4d\u7f6e\u7684\u65b9\u6cd5\u81f4\u529b\u4e8e\u81ea\u79c1\u7684\u8ba1\u5212\u3002 \n\uff06\uff0334;\u5982\u679c\u4f60\u62ff\u8d70\u4e86\u5973\u738b\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u53ef\u4ee5\u50cf\u5176\u4ed6\u871c\u8702\u79cd\u7c7b\u4e00\u6837\u629a\u517b\u4e00\u4e2a\u65b0\u7684\u5973\u738b\uff0c\u8fd9\u4e9b\u871c\u8702\u5c31\u4f1a\u5f00\u59cb\u94fa\u8bbe\u86cb\uff0c\uff06\uff0334; Oldroyd\u8bf4\u3002 \uff06\uff0334;\u8fd8\u6709\u53eb\u505a\u5973\u738b\u7ec6\u80de\u7684\u7ec6\u80de\uff0c\u5973\u738b\u5c06\u542b\u6709\u672a\u6765\u5973\u738b\u7684\u9e21\u86cb\u6492\u3002\u5b83\u5b8c\u5168\u53ef\u4ee5\u4ece\u53e6\u4e00\u4e2a\u6b96\u6c11\u5730\u98de\u884c\u5230\u53e6\u4e00\u4e2a\u6b96\u6c11\u5730\u7684\u5de5\u4eba\uff0c\u6216\u8005\u5728\u90a3\u4e2a\u6b96\u6c11\u5730\u4e2d\u7684\u4e00\u4e2a\u4eba\u6765\u66ff\u6362\u90a3\u4e2a\u86cb\u86cb\u4e0e\u4ed6\u4eec\u7684\u514b\u9686\u86cb\u3002\u8fd9\u6837\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f5c\u4e3a\u5973\u738b\u8f6c\u57fa\u56e0\u3002\uff06\uff0334;\n \u4f46\u662f\uff0c\u6d77\u89d2\u5de5\u4eba\u7684\u4e00\u4e2a\u8840\u7edf\u751a\u81f3\u91c7\u53d6\u4e86\u8fd9\u9879\u793e\u4f1a\u5bc4\u751f\u884c\u4e3a\uff0c\u751a\u81f3\u8fdb\u4e00\u6b65\u5730\u8d70\u5230\u4e86\u4ed6\u4eec\u4e0d\u518d\u9700\u8981\u5973\u738b\u7684\u5730\u6b65\uff0c\u4ed6\u4eec\u5b8c\u5168\u901a\u8fc7\u63a5\u7ba1\u975e\u6d32\u4f4e\u5730\u871c\u8702\u7684\u8368\u9ebb\u75b9\u3002\u5c5e\u4e8e\u7f57\u4f0a\u514b\u9686\u62ab\u80a9\u871c\u8702\u5de5\u4eba\u7684\u5355\u4e00\u5206\u652f\u7684\u6210\u5458\u6f5c\u5165\u975e\u6d32\u4f4e\u5730\u871c\u8702\u8368\u9ebb\u75b9\uff0c\u8fd9\u5e38\u7528\u4e8e\u519c\u4e1a\u76ee\u7684\uff0c\u5e76\u5c3d\u53ef\u80fd\u591a\u5730\u5851\u9020\u9e21\u86cb\uff0c\u8fd9\u662f\u975e\u6d32\u4f4e\u5730\u4e3a\u81ea\u5df1\u548c\u540e\u65b9\u7684\u9519\u8bef\u800c\u8bef\u8ba4\u4e3a\u662f\u9519\u8bef\u7684\u3002\n \u5bc4\u751f\u514b\u9686\u8fa3\u6912\u8702\u5de2\u5e7c\u866b\u5728\u8fd9\u4e2a\u8be1\u8ba1\u4e2d\uff0c\u751a\u81f3\u5411\u4ed6\u4eec\u7684\u4e0d\u5e78\u4e3b\u673a\u53d1\u9001\u4fe1\u53f7\u4ee5\u5c3d\u53ef\u80fd\u5730\u5582\u5b83\u4eec\u3002\u8fd9\u79cd\u7c7b\u4f3c\u5495\u5495\u5495\u7684\u884c\u4e3a\u4f7f\u4ed6\u4eec\u80fd\u591f\u957f\u5927\u5730\u517b\u6210\u8eab\u4f53\uff0c\u5375\u5de2\u51e0\u4e4e\u5230\u4e86\u5973\u738b\u7684\u5927\u5c0f\u548c\uff0339; s\u3002\n  \uff06\uff0334;\u6597\u725b\u871c\u8702\u514b\u9686\u4e0d\u8981\u5728\u90a3\u4e9b\u8368\u9ebb\u75b9\u5185\u505a\u4efb\u4f55\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4eec\uff06\uff0339; ve\u6210\u4e3a\u751f\u6b96\u7684\uff0c\uff06\uff0334; Oldroyd\u8bf4\u3002 \uff06\uff0334;\u4ed6\u4eec\u53ea\u662f\u7528\u8fd9\u79cd\u6001\u5ea6\u652f\u6491\u50cf\u8fd9\u6837\u7684\u6001\u5ea6\uff0c\uff06\uff0339;\u662f\u7684\uff0c\u4f60\u548c\uff0339;\uff06\uff0339;\u5b83\u5f88\u5feb\u5c31\u4f1a\u5bfc\u81f4\u8702\u5de2\u7684\u5d29\u6e83\u3002\u4f5c\u4e3a\u4e2a\u4f53\uff0c\u8fd9\u4e9b\u514b\u9686\u975e\u5e38\u6709\u529f\u80fd\u5931\u8c03\uff0c\u6240\u4ee5\u4f60\uff06\uff0339; D\u671f\u5f85\u4ed6\u4eec\u5f7c\u5f97\u3002\u4f46\u662f\u5b83\u4eec\uff06\uff0339;\u5728\u8fd9\u65b9\u9762\u7684\u80bf\u7624\u4e2d\u5f88\u591a\u5f88\u591a\u50cf\u7ec6\u80de - \u5b83\u5c31\u5728\u8fd9\u65b9\u9762\uff06\uff0339;\u5982\u679c\u6bcf\u4e2a\u514b\u9686\u90fd\u662f\u5065\u5eb7\u7684\uff0c\u90a3\u4e48\u53ea\u8981\u8db3\u591f\u7684\u4eba\u5728\u653b\u51fb\u4e3b\u6301\u4eba\u5373\u53ef\u3002\uff06\uff0334;\n \u6839\u636eOrdroyd\u7684\u8bf4\u6cd5\uff0c\u53c2\u52a0\u8fd9\u79cd\u5bc4\u751f\u884c\u4e3a\u7684\u8702\u871c\u8702\u7684\u5de5\u4eba\u662f1990\u5e74\u751f\u6d3b\u7684\u4e00\u540d\u5de5\u4eba\u7684\u57fa\u56e0\u4e0a\u76f8\u540c\u7684\u540e\u4ee3\u3002\u8fd9\u79cd\u514b\u9686\u7684\u5355\u4e2a\u8840\u7edf\u8d1f\u8d23\u6bcf\u5e74\u5360\u975e\u6d32\u4f4e\u5730\u871c\u8702\u6b96\u6c11\u5730\u768410\uff05\u3002\n \u73b0\u5728\uff0c\u7814\u7a76\u4eba\u5458\u5bf9\u5de5\u4eba\u5982\u4f55\u5b8c\u6210\u4ed6\u4eec\u7684\u5947\u602a\u514b\u9686\u4f0e\u4fe9\uff0c\u4ed6\u4eec\u5e0c\u671b\u5f04\u6e05\u695aQueens\u5982\u4f55\u6253\u5f00\u80fd\u591f\u6539\u7ec4\u7684\u57fa\u56e0\u4ee5\u53ca\u5de5\u4eba\u5982\u4f55\u5173\u95ed\u3002\u4ed6\u4eec\u8fd8\u60f3\u8c03\u67e5\u8702\u871c\u8702\u5de5\u4eba\u5bc4\u751f\u7684\u975e\u6d32\u4f4e\u5730\u8368\u9ebb\u75b9\uff0c\u4e86\u89e3\u89e6\u53d1\u8702\u5de2\u5d29\u6e83\u7684\u4e1c\u897f\u3002\n \u7814\u7a76\u4eba\u5458\u5728\u7687\u5bb6\u793e\u4f1aB\u7684\u671f\u520a\u8bc9\u8bbc\u4e2d\u53d1\u8868\u4e866\u67089\u65e5\u7684\u8c03\u67e5\u7ed3\u679c\u3002 ", "note_en": "When hives of the African lowland   honeybee ( Apis mellifera scutella) collapse, they do so because of an invisible inner threat: the growing, immortal   clone army of a rival bee subspecies.\n  That army is possible because the female workers of the rival subspecies \u2014 the South African Cape honeybee ( Apis mellifera capensis) \u2014 can create perfect copies of themselves, with one individual found to have done so millions of times in the past three decades. With this perpetual-cloning ability, the Cape honeybees sneak into the hives of their lowland honeybee rivals and churn out copy after copy (no need for a queen). Even worse, these clones are freeloaders, refusing to do any work.\n  Now, a new study has revealed the genetic foundations of the strange and formidable adaptation. Unlike most animals, and even their own queen, the female workers do not reshuffle the   DNA of the eggs they lay. This enables the workers to consistently recreate a perfect copy of themselves \u2014 a clone \u2014 each time they reproduce. According to the researchers, the sidestepping of this DNA-reshuffling process is unlike anything they&#39;ve ever seen.\n   &#34;It&#39;s incredible. It&#39;s also incredibly dysfunctional,&#34; lead author Benjamin Oldroyd, a professor of behavioral genetics at the University of Sydney, told Live Science, referring to the fact that reshuffling is normally required to hold chromosomes together during the egg-making process. &#34;Yet, somehow they&#39;ve managed to do it [still lay eggs]. It&#39;s insane; I&#39;ve not heard of anything like this before, anywhere.&#34;\n  Honeybee workers and other social insects have the ability to reproduce via a form of asexual reproduction called thelytokous parthenogenesis, in which females produce female offspring from unfertilized eggs. Each time she creates offspring, the single-parent worker bee will replicate the chromosomes she received from her parents (a queen and a male drone) into four. Next, she takes the genetic material from all four chromosomes, reshuffles it and creates four chromosomes with that mixed-up DNA through a process called recombination. This reshuffling guarantees that, even with just one parent, future offspring will be genetically distinct.\n However, as only two chromosomes out of the four are picked and no new genetic material is introduced by a sexual partner, this leads to an average loss of one-third of genetic diversity every time the shuffling is performed, or every generation, Oldroyd said. After just a few generations of parthenogenetic reproduction, the accumulated loss of genetic material leads to levels of genetic diversity that are low enough to be lethal.\n Most social insects, therefore, rely on a queen that reproduces sexually on their behalf. In return, the genetically diverse workers maintain the health of the colony and protect the brood of their closely related siblings and cousins.\n  &#34;It&#39;s like in a human society, we have this tension between what&#39;s good for the individual and what&#39;s good for society, and we come up with all of these social norms that allow us to function,&#34; Oldroyd said. &#34;In honeybee societies, one of the things that evolved to suppress selfish behavior is [that] the workers generally can&#39;t lay eggs.&#34;\n This is mostly true of the Cape honeybee, which on the whole abides by the usual rules of social insect reproduction, according to Oldroyd. But Cape honeybee workers have a genetic mutation that enables them to lay eggs parthenogenetically with all of the genetic material from the four chromosomes (so they don\u2019t throw out any of those chromosomes somehow). With that ability, they can prevent the immediate loss of genetic diversity caused by the reshuffling process. This allows them to clone themselves whenever they like for decades, even if cloning in the much longer term leads to a population that, on the whole, has no genetic diversity.\n This cloning superpower places colonies on a much finer balancing point between individualism and sociality. And if they tip over, they may be at risk of extinction, according to the researchers.\n To understand how the clones can create millions of copies of themselves and yet remain functional, Oldroyd and his team compared the genomes of Cape honeybee workers with those of their queen and her offspring.\n After forcing the Cape queen to reproduce asexually by fitting her with surgical tape that prevented her from mating, the team examined certain DNA sequences of both the Cape queen and the 25 larvae she produced. Then, they did the same for four Cape honeybee workers and their 63 larvae.\n The team discovered that the asexually reproduced offspring of the queen had levels of recombination (DNA mixing) 100 times greater than the genetically identical cloned offspring of the workers \u2014 a finding that suggests the Cape worker bees have evolved a mutation that prevents recombination. Without the risk of a one-third loss of genetic material caused by the asexual reshuffling process, the workers are free to continually create perfect copies of themselves.\n The workers\u2019 ability to clone at will places their colonies in a much more precarious position, especially once the queen leaves or dies and the old social order collapses. Instead of expending energy to get the colony back on its feet, workers will dedicate themselves to selfish schemes \u2014 such as finding ways to place their clones into positions of power.\n &#34;If you take the queen away, for instance, instead of raising a new queen like other bee species might, these bees will just start laying eggs themselves,&#34; Oldroyd said. &#34;There are also cells, called queen cells, where the queen lays the eggs containing future queens. It&#39;s perfectly possible for a worker to fly in from another colony, or one of the existing workers in that colony to come and replace that queen egg with one of their clone eggs. That way, they can be genetically reincarnated as a queen.&#34;\n But one lineage of Cape bee workers has taken this socially parasitic behavior even further, to the point where they no longer need a queen, and they solely exist by taking over the hives of the African lowland honeybee. Members belonging to a single branch of rogue clone Cape bee workers sneak into African lowland honeybee hives, which are commonly used for agricultural purposes, and lay as many eggs as they can, which the African lowland bees mistake for their own and rear.\n The parasitic clone Cape bee larvae are in on this ruse, even sending signals to their unfortunate hosts to feed them as much as possible. This cuckoo-like behavior allows them to grow their bodies and their ovaries almost to the size of a queen&#39;s.\n  &#34;The Cape bee clones don&#39;t do any work inside those hives because they&#39;ve become reproductive,&#34; Oldroyd said. &#34;They just strut around with this attitude like, &#39;Yeah, you&#39;re going to work for me.&#39; It very quickly leads to the collapse of the hive. As individuals, these clones are quite dysfunctional, so you&#39;d expect them to peter out. But they&#39;re a lot like the cells in a tumor in this regard \u2014 it doesn&#39;t matter if every clone is healthy, so long as enough of them are around to exploit the host.&#34;\n The Cape bee workers that take part in this parasitic behavior are the genetically identical descendants of a single worker that lived in 1990, according to Oldroyd. This single lineage of clones is responsible for the collapse of 10% of African lowland honeybee colonies every year.\n Now that the researchers have a handle on how the workers can accomplish their bizarre cloning trick, they want to figure out how queens can switch on the gene that enables recombination and how the workers can switch it off. They also want to investigate the African lowland hives parasitized by Cape bee workers, to figure out what triggers the hive collapse.\n The researchers published their findings June 9 in the journal  Proceedings of the Royal Society B.", "posttime": "2021-06-26 15:54:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u871c\u8702,cloned,\u5de5\u4eba", "title": "\u4e00\u53ea\u871c\u8702\u5728\u8fc7\u53bb\u7684\u4e09\u5341\u5e74\u91cc\u514b\u9686\u4e86\u6570\u767e\u4e07\u6b21 ", "title_en": "One bee has cloned itself millions of times over the past three decades", "transed": 1, "url": "https://www.livescience.com/bee-creates-perfect-clone-army.html", "via": "", "real_tags": ["\u871c\u8702", "cloned", "\u5de5\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068400, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u6211\u5df2\u7ecf\u52aa\u529b\u627e\u5230\u4e00\u4e2a\u7b80\u6d01\u7684\uff0c\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u89e3\u91ca\u7ec3\u4e60\u7c7b\u578b\u9a71\u52a8\u7684\u8bbe\u8ba1\u610f\u5473\u7740\u4ec0\u4e48\u3002\u592a\u591a\uff0c\u5f53\u6709\u4eba\u95ee\u6211\u201c\u4f60\u662f\u600e\u4e48\u60f3\u8d77\u8fd9\u79cd\u65b9\u6cd5\u7684\uff1f\u201d\u6211\u53d1\u73b0\u6211\u4e0d\u80fd\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u4ee4\u4eba\u6ee1\u610f\u7684\u7b54\u6848\u3002\u6211\u77e5\u9053\u5b83\u4e0d\u4ec5\u4ec5\u662f\u5728\u613f\u666f\u4e2d\u6765\u627e\u6211 - \u6211\u6709\u4e00\u4e2a\u8fed\u4ee3\u7684\u8bbe\u8ba1\u8fc7\u7a0b\uff0c\u4e0d\u9700\u8981\u91c7\u53d6\u8584\u8584\u7684\u7a7a\u6c14\u4e2d\u7684\u201c\u6b63\u786e\u201d\u7684\u65b9\u6cd5\uff0c\u4f46\u6211\u5e76\u6ca1\u6709\u6210\u529f\u5730\u5411\u4ed6\u4eba\u6c9f\u901a\u8be5\u8fc7\u7a0b\u3002\n \u7136\u800c\uff0c\u5927\u7ea6\u4e00\u4e2a\u6708\u524d\uff0c\u6211\u5728\u9759\u6001\u548c\u52a8\u6001\u7c7b\u578b\u7684\u8bed\u8a00\u4e2d\u7ecf\u5386\u4e86\u89e3\u6790json\u7684\u5dee\u5f02\uff0c\u6211\u53cd\u6620\u4e86Twitter\uff0c\u6700\u540e\uff0c\u6211\u610f\u8bc6\u5230\u4e86\u6211\u6b63\u5728\u5bfb\u627e\u7684\u4e1c\u897f\u3002\u73b0\u5728\u6211\u6709\u4e00\u4e2a\u5355\u8eab\uff0cSnappy\u53e3\u53f7\uff0c\u5c01\u88c5\u4e86\u4ec0\u4e48\u7c7b\u578b\u7684\u9a71\u52a8\u8bbe\u8ba1\u5bf9\u6211\u6765\u8bf4\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u66f4\u597d\uff0c\u4f46\u5b83\u53ea\u6709\u4e09\u4e2a\u5b57\u957f\uff1a\n   \u597d\u5427\uff0c\u6211\u4f1a\u627f\u8ba4\uff1a\u9664\u975e\u4f60\u5df2\u7ecf\u77e5\u9053\u4ec0\u4e48\u7c7b\u578b\u7684\u9a71\u52a8\u8bbe\u8ba1\uff0c\u5426\u5219\u6211\u7684\u5438\u5f15\u4eba\u7684\u53e3\u53f7\u53ef\u80fd\u5bf9\u4f60\u6765\u8bf4\u5e76\u4e0d\u610f\u5473\u7740\u8fd9\u4e00\u5207\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u5c31\u662f\u8fd9\u4e2a\u535a\u5ba2\u5e16\u5b50\u7684\u5176\u4f59\u90e8\u5206\u3002\u6211\u5c06\u6b63\u662f\u5728\u8840\u8165\u7ec6\u8282\u4e2d\u7684\u610f\u601d\u89e3\u91ca - \u4f46\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u7ec3\u4e60\u4e00\u4e0b\u4e00\u822c\u7684\u4e00\u53a2\u60c5\u613f\u3002\n  \u5173\u4e8e\u9759\u6001\u7cfb\u7edf\u7684\u4e00\u4e2a\u7f8e\u5999\u7684\u4e8b\u60c5\u662f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u4ed6\u4eec\u80fd\u591f\u5b9e\u73b0\uff0c\u6709\u65f6\u751a\u81f3\u5bb9\u6613\uff0c\u4ee5\u56de\u7b54\u201c\u5b83\u53ef\u4ee5\u5199\u8fd9\u4e2a\u529f\u80fd\u662f\u53ef\u80fd\u7684\uff1f\u201d\u5bf9\u4e8e\u4e00\u4e2a\u6781\u7aef\u7684\u4f8b\u5b50\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0bHaskell\u7c7b\u578b\u7b7e\u540d\uff1a\n  \u662f\u5426\u6709\u53ef\u80fd\u5b9e\u73b0foo\uff1f\u6eaf\u6e90\uff0c\u7b54\u6848\u662f\u5426\uff0c\u56e0\u4e3avoid\u662f\u4e00\u4e2a\u4e0d\u5305\u542b\u503c\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u4efb\u4f55\u529f\u80fd\u90fd\u4e0d\u53ef\u80fd\u4ea7\u751f\u7c7b\u578bvoid\u7684\u503c\u3002 1\u793a\u4f8b\u975e\u5e38\u65e0\u804a\uff0c\u4f46\u5982\u679c\u6211\u4eec\u9009\u62e9\u66f4\u73b0\u5b9e\u7684\u4f8b\u5b50\uff0c\u95ee\u9898\u4f1a\u66f4\u6709\u8da3\uff1a\n  \u6b64\u51fd\u6570\u4ece\u5217\u8868\u4e2d\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u662f\u5426\u6709\u53ef\u80fd\u5b9e\u65bd\uff1f\u5b83\u80af\u5b9a\u6ca1\u6709\u542c\u8d77\u6765\u5b83\u505a\u4e86\u4ec0\u4e48\u975e\u5e38\u590d\u6742\u7684\uff0c\u4f46\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u5b9e\u73b0\u5b83\uff0c\u7f16\u8bd1\u5668\u5c06\u4e0d\u4f1a\u6ee1\u8db3\uff1a\n  \u8b66\u544a\uff1a[-wincomplete-patterns]\u6a21\u5f0f\u5339\u914d\u5728\u201c\u5934\u201d\u7684\u7b49\u5f0f\u4e2d\u662f\u975e\u8be6\u5c3d\u65e0\u9057\u7684\uff1a\u6a21\u5f0f\u4e0d\u5339\u914d\uff1a[] \n\u6b64\u6d88\u606f\u6709\u52a9\u4e8e\u6307\u51fa\uff0c\u6211\u4eec\u7684\u529f\u80fd\u662f\u90e8\u5206\u7684\uff0c\u8fd9\u5c31\u662f\u8bf4\u5b83\u6ca1\u6709\u4e3a\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5b9a\u4e49\u3002\u5177\u4f53\u5730\uff0c\u5f53\u8f93\u5165\u662f[]\uff0c\u7a7a\u5217\u8868\u65f6\u672a\u5b9a\u4e49\u3002\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u5217\u8868\u662f\u7a7a\u7684\uff0c\u5219\u65e0\u6cd5\u8fd4\u56de\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 - \u6ca1\u6709\u5143\u7d20\u8981\u8fd4\u56de\uff01\u56e0\u6b64\uff0c\u663e\u7740\u7684\uff0c\u6211\u4eec\u5b66\u4e60\u8be5\u529f\u80fd\u4e5f\u65e0\u6cd5\u5b9e\u73b0\u3002\n  \u5bf9\u4e8e\u6765\u81ea\u52a8\u6001\u952e\u5165\u7684\u80cc\u666f\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u4ee4\u4eba\u56f0\u60d1\u3002\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u5217\u8868\uff0c\u6211\u4eec\u53ef\u80fd\u975e\u5e38\u5e0c\u671b\u5f97\u5230\u5b83\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u4e8b\u5b9e\u4e0a\uff0cHaskell\u7684\u201c\u83b7\u53d6\u540d\u5355\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u201d\u7684\u64cd\u4f5c\u5e76\u975e\u4e0d\u53ef\u80fd\uff0c\u5b83\u53ea\u662f\u9700\u8981\u4e00\u70b9\u989d\u5916\u7684\u4eea\u5f0f\u3002\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u4fee\u590d\u5934\u90e8\u529f\u80fd\uff0c\u6211\u4eec\u5c06\u4ece\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5f00\u59cb\u3002\n  \u6b63\u5982\u6240\u5efa\u7acb\u7684\u90a3\u6837\uff0c\u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff0c\u5219\u5934\u90e8\u662f\u90e8\u5206\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u5217\u8868\u662f\u7a7a\u7684\uff0c\u5219\u6ca1\u6709\u5143\u7d20\uff1a\u6211\u4eec\u5df2\u7ecf\u63d0\u51fa\u4e86\u4e00\u4e2a\u6211\u4eec\u4e0d\u53ef\u80fd\u5b9e\u73b0\u7684\u627f\u8bfa\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5bf9\u8be5\u56f0\u5883\u6709\u4e00\u79cd\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u6211\u4eec\u53ef\u4ee5\u524a\u5f31\u6211\u4eec\u7684\u627f\u8bfa\u3002\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u6765\u7535\u8005\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5fc5\u987b\u7ec3\u4e60\u4e00\u70b9\u671f\u671b\u7ba1\u7406\uff1a\u5982\u679c\u6211\u4eec\u53ef\u4ee5\uff0c\u6211\u4eec\u4f1a\u5c3d\u529b\u56de\u5f52\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u6211\u4eec\u4fdd\u7559\u4e86\u4efb\u4f55\u8fd4\u56de\u7684\u6743\u5229\u3002\u5728Haskell\uff0c\u6211\u4eec\u4f7f\u7528\u53ef\u80fd\u7c7b\u578b\u7684\u53ef\u80fd\u6027\u8868\u793a\uff1a\n  \u8fd9\u4e3a\u6211\u4eec\u63d0\u51fa\u4e86\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5934\u90e8\u7684\u81ea\u7531 - \u5b83\u5141\u8bb8\u6211\u4eec\u5728\u53d1\u73b0\u6211\u4eec\u65e0\u6cd5\u751f\u6210\u6bd5\u7adf\u6ca1\u6709\u4ea7\u751f\u7c7b\u578b\u7684\u503c\u65f6\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff1a\n  \u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u5bf9\u5427\uff1f\u6682\u65f6\uff0c\u662f\u7684...\u4f46\u662f\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u6709\u9690\u85cf\u7684\u6210\u672c\u3002\n \u5f53\u6211\u4eec\u5b9e\u65bd\u5934\u65f6\uff0c\u8fd4\u56de\u53ef\u80fd\u662f\u65e0\u7591\u7684\u65b9\u4fbf\u3002\u4f46\u662f\uff0c\u5f53\u6211\u4eec\u60f3\u8981\u5b9e\u9645\u4f7f\u7528\u5b83\u65f6\uff0c\u5b83\u53d8\u5f97\u660e\u663e\u4e0d\u592a\u65b9\u4fbf\uff01\u7531\u4e8e\u5934\u90e8\u603b\u662f\u6709\u53ef\u80fd\u8fd4\u56de\u4efb\u4f55\u4e1c\u897f\uff0c\u56e0\u6b64\u8d1f\u62c5\u843d\u5728\u547c\u53eb\u8005\u8eab\u4e0a\uff0c\u4ee5\u5904\u7406\u8fd9\u79cd\u53ef\u80fd\u6027\uff0c\u6709\u65f6\uff0c\u964d\u538b\u7684\u4f20\u9012\u53ef\u80fd\u4f1a\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u4ee4\u4eba\u6cae\u4e27\u3002\u8981\u67e5\u770b\u4e3a\u4ec0\u4e48\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\uff1a\n getconfigurationDirectories :: io [filepath] getconfigurationdirectories = do configdirsstring\uff06lt;  -  getenv\uff06\uff0334; config_dirs\uff06\uff0334;\u8ba9configdirslist = split\uff06\uff0339;\uff0c\uff06\uff0339; configdirsstring\u4f55\u65f6\uff08null configdirslist\uff09$ throwe $ usererror\uff06\uff0334; config_dirs\u4e0d\u80fd\u4e3a\u7a7a\uff06\uff0334; pure configdirslist main :: io\uff08\uff09main = do configdirs\uff06lt;  -  getconfigurationDirectories\u6848\u4f8bHead CommendIns\u7684\u53ea\u662fCachedir  - \uff06gt; InitializeCache Cachedir\u4ec0\u4e48\u90fd\u6ca1\u6709 - \uff06gt;\u9519\u8bef\uff06\uff0334;\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f;\u5df2\u7ecf\u68c0\u67e5\u7684configdirs\u662f\u975e\u7a7a\u7684\uff06\uff0334; \n\u5f53getConfigurationDirectories\u4ece\u73af\u5883\u4e2d\u68c0\u7d22\u6587\u4ef6\u8def\u5f84\u5217\u8868\u65f6\uff0c\u5b83\u4e3b\u52a8\u68c0\u67e5\u5217\u8868\u662f\u975e\u7a7a\u7684\u3002\u4f46\u662f\uff0c\u5f53\u6211\u4eec\u7528\u5934\u90e8\u4f7f\u7528\u5934\u90e8\u83b7\u53d6\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u53ef\u80fd\u4ecd\u7136\u9700\u8981\u6211\u4eec\u5904\u7406\u6211\u4eec\u6240\u77e5\u9053\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u4e8b\u60c5\uff01\u8fd9\u6709\u51e0\u4e2a\u539f\u56e0\u975e\u5e38\u7cdf\u7cd5\uff1a\n \u9996\u5148\uff0c\u8fd9\u53ea\u662f\u70e6\u4eba\u3002\u6211\u4eec\u5df2\u7ecf\u68c0\u67e5\u4e86\u8be5\u5217\u8868\u662f\u975e\u7a7a\u7684\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u5fc5\u987b\u5c06\u4ee3\u7801\u4e0e\u53e6\u4e00\u4e2a\u5197\u4f59\u652f\u7968\u6df7\u4e71\uff1f\n  \u5176\u6b21\uff0c\u5b83\u5177\u6709\u6f5c\u5728\u7684\u6027\u80fd\u6210\u672c\u3002\u867d\u7136\u5728\u8be5\u7279\u5b9a\u793a\u4f8b\u4e2d\u5197\u4f59\u68c0\u67e5\u7684\u6210\u672c\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u573a\u666f\uff0c\u5176\u4e2d\u5197\u4f59\u68c0\u67e5\u53ef\u4ee5\u52a0\u8d77\u6765\uff0c\u4f8b\u5982\u5b83\u4eec\u5728\u7d27\u5bc6\u7684\u5faa\u73af\u4e2d\u53d1\u751f\u3002\n  \u6700\u540e\uff0c\u6700\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u7b49\u5f85\u53d1\u751f\u7684\u9519\u8bef\uff01\u5982\u679c\u4fee\u6539\u4e86GetConfigurationDirectories\u4ee5\u505c\u6b62\u68c0\u67e5\u5217\u8868\u662f\u5426\u4e3a\u7a7a\uff0c\u6545\u610f\u6216\u65e0\u610f\u4e2d\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u7a0b\u5e8f\u5458\u53ef\u80fd\u4e0d\u8bb0\u5f97\u66f4\u65b0\u4e3b\u8981\uff0c\u7a81\u7136\u95f4\u201c\u4e0d\u53ef\u80fd\u201d\u7684\u9519\u8bef\u53d8\u5f97\u4e0d\u4ec5\u53ef\u80fd\uff0c\u800c\u4e14\u53ef\u80fd\u3002\n \u5bf9\u6b64\u5197\u4f59\u68c0\u67e5\u7684\u9700\u6c42\u57fa\u672c\u4e0a\u8feb\u4f7f\u6211\u4eec\u5728\u6211\u4eec\u7684\u7c7b\u578b\u7cfb\u7edf\u4e2d\u6253\u5b54\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u9759\u6001\u8bc1\u660e\u65e0\u6240\u4e8b\u4e8b\uff0c\u90a3\u4e48\u4fee\u6539\u5230GetConfigurationDirectories\uff0c\u505c\u6b62\u68c0\u67e5\u5217\u8868\u662f\u5426\u4e3a\u7a7a\uff0c\u65e0\u6548\uff0c\u9a8c\u8bc1\u5e76\u89e6\u53d1\u7f16\u8bd1\u65f6\u5931\u8d25\u3002\u4f46\u662f\uff0c\u6309\u7167\u5199\u4f5c\uff0c\u6211\u4eec\u88ab\u8feb\u4f9d\u9760\u6d4b\u8bd5\u5957\u4ef6\u6216\u624b\u52a8\u68c0\u67e5\u6765\u6355\u83b7\u9519\u8bef\u3002\n  \u663e\u7136\uff0c\u6211\u4eec\u7684\u4fee\u6539\u7248\u672c\u7684\u5934\u90e8\u7559\u4e0b\u4e86\u4e00\u4e9b\u9700\u8981\u7684\u4e1c\u897f\u3002\u4e0d\u77e5\u4f55\u6545\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u66f4\u667a\u80fd\uff1a\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u68c0\u67e5\u4e86\u8be5\u5217\u8868\u662f\u975e\u7a7a\u7684\uff0c\u5219\u5e94\u65e0\u6761\u4ef6\u5730\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u800c\u4e0d\u5f3a\u8feb\u6211\u4eec\u5904\u7406\u6211\u4eec\u6240\u77e5\u9053\u7684\u60c5\u51b5\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u6211\u4eec\u600e\u6837\u624d\u80fd\u8fd9\u6837\u505a\uff1f\n   \u4e0a\u4e00\u8282\u8bf4\u660e\u4e86\uff0c\u901a\u8fc7\u524a\u5f31\u8fd4\u56de\u7c7b\u578b\u6240\u505a\u7684\u627f\u8bfa\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u90e8\u5206\u7c7b\u578b\u7b7e\u540d\u8f6c\u6362\u4e3a\u603b\u4f53\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u60f3\u8fd9\u6837\u505a\uff0c\u53ea\u5269\u4e0b\u4e00\u4ef6\u4e8b\u53ef\u4ee5\u66f4\u6539\uff1a\u53c2\u6570\u7c7b\u578b\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c[a]\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u52a0\u5f3a\u53c2\u6570\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u524a\u5f31\u8fd4\u56de\u7c7b\u578b\uff0c\u800c\u662f\u6d88\u9664\u9996\u5148\u5728\u7a7a\u540d\u5355\u4e0a\u8c03\u7528\u5934\u90e8\u7684\u53ef\u80fd\u6027\u3002 \n\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u8868\u793a\u975e\u7a7a\u5217\u8868\u7684\u7c7b\u578b\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6765\u81eadata.list.nonuspty\u7684\u73b0\u6709\u7684\u975e\u7a7a\u7c7b\u578b\u6b63\u597d\u3002\u5b83\u5177\u6709\u4ee5\u4e0b\u5b9a\u4e49\uff1a\n  \u8bf7\u6ce8\u610f\uff0c\u975e\u7a7aA\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\uff0c\u53ef\u80fd\u662f\u7a7a\u7684[a]\u7684\u5143\u7ec4\u3002\u8fd9\u901a\u8fc7\u5c06\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0e\u5217\u8868\u7684\u5c3e\u90e8\u5206\u5f00\u5b58\u50a8\u6765\u65b9\u4fbf\u5730\u7ed8\u5236\u975e\u7a7a\u5217\u8868\uff1a\u5373\u4f7f[A]\u7ec4\u4ef6\u662f[]\uff0c\u5fc5\u987b\u59cb\u7ec8\u5b58\u5728\u7ec4\u4ef6\u3002\u8fd9\u4f7f\u5f97\u5934\u90e8\u5b8c\u5168\u5fae\u4e0d\u8db3\u9053\u5b9e\u73b0\uff1a2\n  \u4e0e\u4e4b\u524d\u4e0d\u540c\uff0cGHC\u63a5\u53d7\u6b64\u5b9a\u4e49\u800c\u65e0\u9700\u6295\u8bc9 - \u6b64\u5b9a\u4e49\u662f\u5b8c\u5168\u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u3002\u6211\u4eec\u53ef\u4ee5\u66f4\u65b0\u6211\u4eec\u7684\u7a0b\u5e8f\u4ee5\u4f7f\u7528\u65b0\u7684\u5b9e\u73b0\uff1a\n getconfigurationDirectories :: IO\uff08nonempty filepath\uff09getconfigurationDirectories = do configdirsstring\uff06lt;  -  getenv\uff06\uff0334; config_dirs\uff06\uff0334;\u8ba9configdirslist = split\uff06\uff0339;\uff0c\uff06\uff0339; configdirsstring case nonempty configdirslist\u53ea\u662fnonemptyconfigdirslist  - \uff06gt;\u7eaf\u7cb9\u7684nonemptyconfigdirslist nother  - \uff06gt; Throwio $ userError\uff06\uff0334; config_dirs\u4e0d\u80fd\u4e3a\u7a7a\uff06\uff0334; main :: io\uff08\uff09main = do configdirs\uff06lt;  -  getconfigurationDirectories initializecache\uff08head configdirs\uff09\n \u8bf7\u6ce8\u610f\uff0c\u4e3b\u8981\u7684\u5197\u4f59\u652f\u7968\u73b0\u5728\u5b8c\u5168\u6d88\u5931\u4e86\uff01\u76f8\u53cd\uff0c\u6211\u4eec\u5728GetConfigurationDirectories\u4e2d\u5b8c\u6210\u4e00\u6b21\u68c0\u67e5\u4e00\u6b21\u3002\u5b83\u4f7f\u7528\u6765\u81eadata.list.nonusemy\u7684\u975e\u7a7a\u51fd\u6570\u6765\u6784\u9020\u6765\u81ea[a]\u7684\u975e\u7a7a\u7684A.NONEMPTY\uff0c\u5176\u5177\u6709\u4ee5\u4e0b\u7c7b\u578b\uff1a\n  \u4e5f\u8bb8\u4ecd\u5728\u90a3\u91cc\uff0c\u4f46\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5728\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u5f88\u65e9\u5c31\u5904\u7406\u4e86\u4ec0\u4e48\u610f\u601d\uff1a\u5728\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u8f93\u5165\u9a8c\u8bc1\u7684\u540c\u4e00\u4e2a\u5730\u65b9\u5c31\u5728\u540c\u4e00\u4e2a\u5730\u65b9\u3002\u4e00\u65e6\u68c0\u67e5\u5df2\u901a\u8fc7\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u975e\u7a7a\u7684\u6587\u4ef6\u7b26\u503c\uff0c\u5b83\u4fdd\u7559\uff08\u5728\u7c7b\u578b\u7cfb\u7edf\u4e2d\uff01\uff09\u5217\u8868\u786e\u5b9e\u662f\u975e\u7a7a\u7684\u77e5\u8bc6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u53ef\u4ee5\u8003\u8651\u7c7b\u578b\u7684\u975e\u7a7a\u95f2A\u503c\uff0c\u5c31\u50cf[a]\u7c7b\u578b\u7684\u503c\uff0c\u52a0\u4e0a\u5217\u8868\u975e\u7a7a\u7684\u8bc1\u660e\u3002\n \u901a\u8fc7\u52a0\u5f3a\u5934\u90e8\u53c2\u6570\u7684\u7c7b\u578b\u800c\u4e0d\u662f\u524a\u5f31\u5176\u7ed3\u679c\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u5b8c\u5168\u4ece\u4e0a\u4e00\u8282\u4e2d\u5220\u9664\u4e86\u6240\u6709\u95ee\u9898\uff1a \n\u4ee3\u7801\u6ca1\u6709\u5197\u4f59\u68c0\u67e5\uff0c\u56e0\u6b64\u4e0d\u80fd\u6709\u4efb\u4f55\u6027\u80fd\u5f00\u9500\u3002\n  \u6b64\u5916\uff0c\u5982\u679cGetConfigurationDirectories\u66f4\u6539\u4ee5\u505c\u6b62\u68c0\u67e5\u5217\u8868\u662f\u975e\u7a7a\u7684\uff0c\u5219\u5176\u8fd4\u56de\u7c7b\u578b\u4e5f\u5fc5\u987b\u66f4\u6539\u3002\u56e0\u6b64\uff0c\u4e3b\u8981\u5c06\u65e0\u6cd5\u8fdb\u884cTypeCreck\uff0c\u5728\u6211\u4eec\u8fd0\u884c\u8be5\u8ba1\u5212\u4e4b\u524d\u63d0\u9192\u6211\u4eec\u89e3\u51b3\u95ee\u9898\uff01\n \u66f4\u91cd\u8981\u7684\u662f\uff0c\u901a\u8fc7\u7528nonempty\u64b0\u5199\u5934\u90e8\u4ece\u65b0\u7684\u884c\u4e3a\u6062\u590d\u5934\u8111\u7684\u65e7\u884c\u4e3a\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff1a\n  \u8bf7\u6ce8\u610f\uff0c\u9006\u4e0d\u6b63\u786e\uff1a\u65e0\u6cd5\u4ece\u65e7\u7248\u672c\u83b7\u53d6\u65b0\u7248\u672c\u7684\u5934\u90e8\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u6240\u6709\u8f74\u4e0a\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u90fd\u662f\u4f18\u8d8a\u7684\u3002\n  \u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u4e0a\u9762\u7684\u793a\u4f8b\u4e0e\u6b64\u535a\u5ba2\u6587\u7ae0\u7684\u6807\u9898\u6709\u5173\u3002\u6bd5\u7adf\uff0c\u6211\u4eec\u53ea\u68c0\u67e5\u4e86\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u9a8c\u8bc1\u5217\u8868\u662f\u975e\u7a7a\u7684 - \u6ca1\u6709\u89e3\u6790\u89c6\u7ebf\u3002\u8fd9\u79cd\u89e3\u91ca\u6ca1\u6709\u9519\uff0c\u4f46\u6211\u60f3\u63d0\u51fa\u53e6\u4e00\u4e2a\u89c6\u89d2\uff1a\u5728\u6211\u7684\u8111\u6d77\u4e2d\uff0c\u9a8c\u8bc1\u548c\u89e3\u6790\u4e4b\u95f4\u7684\u533a\u522b\u51e0\u4e4e\u5b8c\u5168\u662f\u5982\u4f55\u4fdd\u7559\u7684\u4fe1\u606f\u3002\u8003\u8651\u4ee5\u4e0b\u529f\u80fd\uff1a\n ValidatenOnusempty :: [a]  - \uff06gt; io\uff08\uff09validatenonempty\uff08_\uff1a_\uff09= pure\uff08\uff09validatenonempty [] = throwio $ userError\uff06\uff0334;\u5217\u8868\u4e0d\u80fd\u4e3a\u7a7a\uff06\uff0334; Parsenonempty :: [a]  - \uff06gt; io\uff08nonempty a\uff09parsenonempty\uff08x\uff1axs\uff09= pure\uff08x\uff1a| xs\uff09parsenonempty [] = throwio $ usererror\uff06\uff0334;\u5217\u8868\u4e0d\u80fd\u4e3a\u7a7a\uff06\uff0334;\n \u8fd9\u4e24\u4e2a\u51fd\u6570\u51e0\u4e4e\u76f8\u540c\uff1a\u68c0\u67e5\u6240\u63d0\u4f9b\u7684\u5217\u8868\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u662f\uff0c\u5219\u5b83\u4eec\u4e2d\u6b62\u4e86\u5177\u6709\u9519\u8bef\u6d88\u606f\u7684\u7a0b\u5e8f\u3002\u5dee\u5f02\u5b8c\u5168\u5728\u8fd4\u56de\u7c7b\u578b\u4e2d\uff1aValidAtenOnempty\u59cb\u7ec8\u8fd4\u56de\uff08\uff09\uff0c\u4e0d\u5305\u542b\u4fe1\u606f\u7684\u7c7b\u578b\uff0c\u4f46\u5e15\u7d22\u7eb3\u7ebd\u74e6\u65af\u8fd4\u56deNonempty A\u7684\u8f93\u5165\u7c7b\u578b\uff0c\u8fd9\u4e9b\u8f93\u5165\u7c7b\u578b\u4fdd\u7559\u4e86\u7c7b\u578b\u7cfb\u7edf\u4e2d\u6240\u83b7\u5f97\u7684\u77e5\u8bc6\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u68c0\u67e5\u4e86\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u4f46\u5e15\u7d22\u7eb3\u7ebd\u9a6c\u514b\u62e8\u5907\u4e86\u6765\u7535\u8005\u8bbf\u95ee\u5b83\u6240\u5b66\u5230\u7684\u4fe1\u606f\uff0c\u800cValidAtenHempty\u521a\u521a\u629b\u5f03\u5b83\u3002 \n\u8fd9\u4e24\u4e2a\u529f\u80fd\u4f18\u96c5\u5730\u8bf4\u660e\u4e86\u9759\u6001\u7cfb\u7edf\u7684\u4f5c\u7528\u7684\u4e24\u79cd\u4e0d\u540c\u7684\u89c6\u89d2\uff1aValidatenOnempty obeys\u8db3\u591f\u7684TypeChecker\uff0c\u4f46\u53ea\u6709Parsenempley\u5145\u5206\u5229\u7528\u5b83\u3002\u5982\u679c\u4f60\u770b\u5230\u4e3a\u4ec0\u4e48ParsenAnempty\u662f\u4f18\u9009\u7684\uff0c\u4f60\u660e\u767dMantra\u201c\u89e3\u6790\uff0c\u4e0d\u8981\u9a8c\u8bc1\u7684\u610f\u601d\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4f60\u4ecd\u7136\u662f\u5bf9\u5e15\u7d22\u7eb3\u514b\u7684\u540d\u5b57\u6301\u6000\u7591\u6001\u5ea6\u3002\u5b83\u771f\u7684\u89e3\u6790\u4e86\u4ec0\u4e48\uff0c\u8fd8\u662f\u5b83\u53ea\u662f\u9a8c\u8bc1\u5b83\u7684\u8f93\u5165\u5e76\u8fd4\u56de\u7ed3\u679c\uff1f\u867d\u7136\u5bf9\u89e3\u6790\u6216\u9a8c\u8bc1\u67d0\u4e9b\u4e1c\u897f\u7684\u7cbe\u786e\u5b9a\u4e49\u662f\u503c\u5f97\u7b80\u8a00\u7684\uff0c\u4f46\u6211\u8ba4\u4e3aParsennempty\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u89e3\u6790\u5668\uff08\u5c3d\u7ba1\u662f\u4e00\u4e2a\u7279\u522b\u7b80\u5355\u7684\u89e3\u6790\u5668\uff09\u3002\n \u8003\u8651\uff1a\u4ec0\u4e48\u662f\u89e3\u6790\u5668\uff1f\u5b9e\u9645\u4e0a\uff0c\u89e3\u6790\u5668\u53ea\u662f\u6d88\u8017\u8f83\u5c11\u7ed3\u6784\u8f93\u5165\u7684\u529f\u80fd\uff0c\u5e76\u4ea7\u751f\u66f4\u591a\u7ed3\u6784\u5316\u8f93\u51fa\u3002\u901a\u8fc7\u5176\u672c\u8d28\uff0c\u89e3\u6790\u5668\u662f\u4e00\u4e2a\u90e8\u5206\u51fd\u6570 - \u57df\u4e2d\u7684\u67d0\u4e9b\u503c\u4e0e\u8303\u56f4\u4e2d\u7684\u4efb\u4f55\u503c\u90fd\u4e0d\u5bf9\u5e94 - \u56e0\u6b64\u6240\u6709\u89e3\u6790\u5668\u5fc5\u987b\u5177\u6709\u4e00\u4e9b\u6545\u969c\u6982\u5ff5\u3002\u901a\u5e38\uff0c\u5bf9\u89e3\u6790\u5668\u7684\u8f93\u5165\u662f\u6587\u672c\uff0c\u4f46\u8fd9\u7edd\u4e0d\u662f\u4e00\u4e2a\u8981\u6c42\uff0c\u5e15\u7d22\u7eb3\u59c6\u7a7a\u8d28\u91cf\u662f\u4e00\u4e2a\u5b8c\u7f8e\u7684\u54fc\u5531\u8005\u89e3\u6790\u5668\uff1a\u5b83\u5c06\u5217\u8868\u89e3\u6790\u4e3a\u975e\u7a7a\u5217\u8868\uff0c\u901a\u8fc7\u7528\u9519\u8bef\u6d88\u606f\u7ec8\u6b62\u7a0b\u5e8f\u6765\u89e3\u6790\u4e3a\u975e\u7a7a\u5217\u8868\u3002\n \u5728\u8fd9\u79cd\u7075\u6d3b\u7684\u5b9a\u4e49\u4e0b\uff0c\u89e3\u6790\u5668\u662f\u4e00\u4e2a\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5f3a\u5927\u5de5\u5177\uff1a\u5b83\u4eec\u5141\u8bb8\u5728\u7a0b\u5e8f\u548c\u5916\u90e8\u4e16\u754c\u4e4b\u95f4\u7684\u8fb9\u754c\u4e0a\u5bf9\u8f93\u5165\u8fdb\u884c\u62e8\u51fa\u68c0\u67e5\uff0c\u5e76\u4e14\u4e00\u65e6\u6267\u884c\u8fd9\u4e9b\u68c0\u67e5\uff0c\u4ed6\u4eec\u4ece\u4e0d\u9700\u8981\u518d\u6b21\u68c0\u67e5\uff01 Haskellers\u5f88\u6e05\u695a\u8fd9\u4e00\u7535\u6e90\uff0c\u4ed6\u4eec\u5b9a\u671f\u4f7f\u7528\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u89e3\u6790\u5668\uff1a\n AESON\u5e93\u63d0\u4f9b\u4e86\u4e00\u79cd\u89e3\u6790\u5668\u7c7b\u578b\uff0c\u53ef\u7528\u4e8e\u5c06JSON\u6570\u636e\u89e3\u6790\u4e3a\u57df\u7c7b\u578b\u3002\n    \u50cf\u6301\u4e45\u6027\u548cpostgreSQL-Simply\u7684\u6570\u636e\u5e93\u5e93\u6709\u4e00\u4e2a\u673a\u5236\uff0c\u7528\u4e8e\u89e3\u6790\u5728\u5916\u90e8\u6570\u636e\u5b58\u50a8\u4e2d\u7684\u89e3\u6790\u503c\u3002\n  \u4ec6\u4eba\u751f\u6001\u7cfb\u7edf\u56f4\u7ed5Parsing Haskell\u6570\u636e\u7c7b\u578b\u4ece\u8def\u5f84\u7ec4\u4ef6\uff0c\u67e5\u8be2\u53c2\u6570\uff0cHTTP\u6807\u5934\u7b49\u5185\u6784\u5efa\u3002\n \u6240\u6709\u8fd9\u4e9b\u5e93\u4e4b\u95f4\u7684\u5171\u540c\u4e3b\u9898\u662f\u5b83\u4eec\u5750\u5728Haskell\u5e94\u7528\u7a0b\u5e8f\u548c\u5916\u90e8\u4e16\u754c\u4e4b\u95f4\u7684\u8fb9\u754c\u4e0a\u3002\u8fd9\u4e2a\u4e16\u754c\u5728\u4ea7\u54c1\u548c\u603b\u548c\u4e2d\u6ca1\u6709\u8bf4\u8bdd\uff0c\u4f46\u5728\u5b57\u8282\u7684\u6eaa\u6d41\u4e2d\uff0c\u56e0\u6b64\u6ca1\u6709\u5fc5\u8981\u8fdb\u884c\u4e00\u4e9b\u89e3\u6790\u3002\u5728\u5bf9\u6570\u636e\u884c\u4e8b\u4e4b\u524d\uff0c\u5bf9\u524d\u9762\u8fdb\u884c\u89e3\u6790\uff0c\u53ef\u4ee5\u8d70\u5f88\u957f\u7684\u8def\u8981\u907f\u514d\u8bb8\u591a\u7c7b\u522b\u7684\u9519\u8bef\uff0c\u5176\u4e2d\u4e00\u4e9b\u751a\u81f3\u53ef\u80fd\u662f\u5b89\u5168\u6f0f\u6d1e\u3002 \n\u5bf9\u524d\u9762\u89e3\u6790\u6240\u6709\u5185\u5bb9\u7684\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u7f3a\u70b9\u662f\u5b83\u6709\u65f6\u9700\u8981\u5728\u5b9e\u9645\u4f7f\u7528\u4e4b\u524d\u957f\u65f6\u95f4\u89e3\u6790\u503c\u3002\u4ee5\u4e00\u79cd\u52a8\u6001\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u89e3\u6790\u548c\u5904\u7406\u903b\u8f91\u540c\u6b65\u4e00\u70b9\u68d8\u624b\u800c\u6ca1\u6709\u5e7f\u6cdb\u7684\u6d4b\u8bd5\u8986\u76d6\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u53ef\u80fd\u662f\u8d39\u529b\u7684\u7ef4\u62a4\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\uff0c\u95ee\u9898\u53d8\u5f97\u975e\u5e38\u7b80\u5355\uff0c\u5982\u4e0a\u9762\u7684\u975e\u7a7a\u767d\u793a\u4f8b\u6240\u793a\uff1a\u5982\u679c\u89e3\u6790\u548c\u5904\u7406\u903b\u8f91\u8d85\u51fa\u540c\u6b65\uff0c\u5219\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u7f16\u8bd1\u3002\n  \u5e0c\u671b\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u60a8\u81f3\u5c11\u9500\u552e\u4e86\u89e3\u6790\u4f18\u4e8e\u9a8c\u8bc1\u7684\u60f3\u6cd5\uff0c\u4f46\u60a8\u53ef\u80fd\u4f1a\u6325\u4e4b\u4e0d\u53bb\u7684\u7591\u8651\u3002\u9a8c\u8bc1\u662f\u5426\u771f\u7684\u5982\u6b64\u7cdf\u7cd5\uff0c\u5982\u679c\u7c7b\u578b\u7cfb\u7edf\u5c06\u5f3a\u8feb\u60a8\u8feb\u4f7f\u60a8\u6700\u7ec8\u8fdb\u884c\u5fc5\u8981\u7684\u68c0\u67e5\uff1f\u4e5f\u8bb8\u9519\u8bef\u62a5\u544a\u5c06\u6709\u70b9\u5dee\uff0c\u4f46\u6709\u70b9\u5197\u4f59\u68c0\u67e5\u4e0d\u80fd\u4f24\u5bb3\uff0c\u5bf9\u5427\uff1f\n \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u5e76\u4e0d\u662f\u90a3\u4e48\u7b80\u5355\u3002 ad-hoc\u9a8c\u8bc1\u5bfc\u81f4\u8bed\u8a00 - \u7406\u8bba\u5b89\u5168\u573a\u547c\u53eb\u730e\u67aa\u89e3\u6790\u7684\u73b0\u8c61\u3002\u57282016\u5e74\u7684\u8bba\u6587\u4e2d\uff0c\u5b9d\u8d1d\u4e03\u70ae\u5854\uff1aLangsec\u9519\u8bef\u7684\u5206\u7c7b\u4ee5\u53ca\u5982\u4f55\u5f00\u9664\u5b83\u4eec\uff0c\u5176\u4f5c\u8005\u63d0\u4f9b\u4ee5\u4e0b\u5b9a\u4e49\uff1a\n Shotgun\u89e3\u6790\u662f\u4e00\u4e2a\u7f16\u7a0b\u53cd\u56fe\u6848\uff0c\u89e3\u6790\u548c\u8f93\u5165\u9a8c\u8bc1\u4ee3\u7801\u4e0e\u5728\u8f93\u5165\u65f6\u7684\u5904\u7406\u4ee3\u7801\u629b\u51fa\u4e91\u7684\u5904\u7406\u4ee3\u7801\u548c\u4f20\u64ad\uff0c\u5e76\u5e0c\u671b\u6ca1\u6709\u4efb\u4f55\u7cfb\u7edf\u7684\u7406\u7531\uff0c\u5176\u4e2d\u4e00\u4e2a\u6216\u53e6\u4e00\u4e2a\u4eba\u4f1a\u6355\u83b7\u6240\u6709\u7684\u201c\u574f\u201d\u6848\u4f8b\u3002\n  Shotgun\u89e3\u6790\u5fc5\u7136\u5265\u593a\u4e86\u62d2\u7edd\u65e0\u6548\u8f93\u5165\u800c\u4e0d\u662f\u5904\u7406\u5b83\u7684\u80fd\u529b\u7684\u7a0b\u5e8f\u3002\u8f93\u5165\u6d41\u4e2d\u7684\u665a\u671f\u9519\u8bef\u5c06\u5bfc\u81f4\u5df2\u5904\u7406\u7684\u67d0\u4e9b\u90e8\u5206\u65e0\u6548\u8f93\u5165\uff0c\u7ed3\u679c\u662f\u7a0b\u5e8f\u72b6\u6001\u96be\u4ee5\u51c6\u786e\u9884\u6d4b\u3002\n \u6362\u53e5\u8bdd\u8bf4\uff0c\u4e0d\u89e3\u6790\u5176\u6240\u6709\u8f93\u5165\u524d\u9762\u7684\u7a0b\u5e8f\u8fd0\u884c\u4e86\u5728\u8f93\u5165\u7684\u6709\u6548\u90e8\u5206\u4f5c\u7528\u7684\u98ce\u9669\uff0c\u53d1\u73b0\u4e0d\u540c\u7684\u90e8\u5206\u662f\u65e0\u6548\u7684\uff0c\u5e76\u4e14\u7a81\u7136\u9700\u8981\u56de\u6eda\u5b83\u5df2\u7ecf\u6267\u884c\u7684\u4efb\u4f55\u4fee\u6539\u4ee5\u4fbf\u4fdd\u6301\u4e00\u81f4\u6027\u3002\u6709\u65f6\u8fd9\u662f\u53ef\u80fd\u7684 - \u4f8b\u5982\u5728RDBMS\u4e2d\u56de\u6eda\u4e8b\u52a1 - \u4f46\u901a\u5e38\u5b83\u53ef\u80fd\u4e0d\u662f\u3002\n \u5b83\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u663e\u800c\u6613\u89c1\u7684\u662f\u9730\u5f39\u67aa\u89e3\u6790\u4e0e\u9a8c\u8bc1 - \u6bd5\u7adf\uff0c\u5982\u679c\u60a8\u5b8c\u6210\u6240\u6709\u9a8c\u8bc1\uff0c\u8bf7\u51cf\u8f7b\u9730\u5f39\u67aa\u89e3\u6790\u7684\u98ce\u9669\u3002\u95ee\u9898\u662f\u57fa\u4e8e\u9a8c\u8bc1\u7684\u65b9\u6cd5\u4f7f\u5f97\u975e\u5e38\u56f0\u96be\u6216\u65e0\u6cd5\u786e\u5b9a\u4e00\u5207\u662f\u5426\u5b9e\u9645\u9a8c\u8bc1\uff0c\u5982\u679c\u53ef\u80fd\u5b9e\u9645\u4e0a\u53d1\u751f\u4e86\u4e00\u4e9b\u6240\u8c13\u7684\u201c\u4e0d\u53ef\u80fd\u201d\u7684\u60c5\u51b5\u3002\u6574\u4e2a\u7a0b\u5e8f\u5fc5\u987b\u5047\u8bbe\u5728\u4efb\u4f55\u5730\u65b9\u63d0\u51fa\u5f02\u5e38\uff0c\u8fd9\u4e0d\u4ec5\u53ef\u80fd\u662f\u5fc5\u8981\u7684\u3002 \n\u89e3\u6790\u901a\u8fc7\u5c06\u7a0b\u5e8f\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u89e3\u6790\u548c\u6267\u884c\u6765\u907f\u514d\u6b64\u95ee\u9898 - \u4ec5\u5728\u7b2c\u4e00\u4e2a\u9636\u6bb5\u53d1\u751f\u65e0\u6548\u8f93\u5165\u5bfc\u81f4\u7684\u6545\u969c\u3002\u6267\u884c\u671f\u95f4\u7684\u5269\u4f59\u6545\u969c\u6a21\u5f0f\u7684\u96c6\u5408\u6700\u5c0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u6240\u9700\u7684\u6e29\u67d4\u7167\u987e\u6765\u5904\u7406\u3002\n  \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4e2a\u535a\u5ba2\u5e16\u5b50\u4e00\u76f4\u662f\u9500\u552e\u64ad\u653e\u7684\u4e1c\u897f\u3002 \u201c\u4f60\uff0c\u4eb2\u7231\u7684\u8bfb\u8005\uff0c\u5e94\u8be5\u662f\u89e3\u6790\uff01\u201d\u5b83\u8bf4\uff0c\u5982\u679c\u6211\u59a5\u5584\u5b8c\u6210\u4e86\u6211\u7684\u5de5\u4f5c\uff0c\u81f3\u5c11\u6709\u4e9b\u4eba\u5356\u6389\u4e86\u3002\u7136\u800c\uff0c\u5373\u4f7f\u4f60\u4e86\u89e3\u201c\u4ec0\u4e48\u201d\u548c\u201c\u4e3a\u4ec0\u4e48\u201d\uff0c\u4f60\u4e5f\u53ef\u80fd\u5bf9\u201c\u5982\u4f55\u201d\u89c9\u5f97\u7279\u522b\u6709\u4fe1\u5fc3\u3002\n  \u5047\u8bbe\u60a8\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u63a5\u53d7\u4ee3\u8868\u952e\u503c\u5bf9\u7684\u5143\u7ec4\u5217\u8868\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u60a8\u7a81\u7136\u610f\u8bc6\u5230\u5982\u679c\u5217\u8868\u5177\u6709\u91cd\u590d\u952e\uff0c\u5219\u4e0d\u786e\u5b9a\u60a8\u8be5\u600e\u4e48\u529e\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u662f\u5217\u8868\u4e2d\u6ca1\u6709\u4efb\u4f55\u91cd\u590d\u9879\uff1a\n  \u4f46\u662f\uff0c\u8fd9\u4e2a\u68c0\u67e5\u5f88\u8106\u5f31\uff1a\u5b83\u5f88\u5bb9\u6613\u5fd8\u8bb0\u3002\u56e0\u4e3a\u5b83\u7684\u8fd4\u56de\u503c\u672a\u4f7f\u7528\uff0c\u56e0\u6b64\u53ef\u4ee5\u59cb\u7ec8\u7701\u7565\u5b83\uff0c\u5e76\u4e14\u9700\u8981\u5b83\u4ecd\u7136\u53ef\u4ee5typecheck\u7684\u4ee3\u7801\u3002\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u9009\u62e9\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u8be5\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u901a\u8fc7\u65bd\u5de5\u7981\u6b62\u91cd\u590d\u952e\uff0c\u4f8b\u5982\u5730\u56fe\u3002\u8c03\u6574\u51fd\u6570\u7684\u7c7b\u578b\u7b7e\u540d\u4ee5\u63a5\u53d7\u5730\u56fe\u800c\u4e0d\u662f\u5143\u7ec4\u5217\u8868\uff0c\u5e76\u6839\u636e\u60a8\u7684\u6b63\u5e38\u5b9e\u73b0\u5b83\u3002\n \u5b8c\u6210\u540e\uff0c\u60a8\u7684\u65b0\u529f\u80fd\u7684\u547c\u53eb\u7ad9\u70b9\u53ef\u80fd\u4f1a\u65e0\u6cd5\u8fdb\u884cTypeCreck\uff0c\u56e0\u4e3a\u5b83\u4ecd\u7136\u88ab\u4f20\u9012\u4e86\u5143\u7ec4\u5217\u8868\u3002\u5982\u679c\u547c\u53eb\u8005\u901a\u8fc7\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570\u7ed9\u51fa\u4e86\u503c\uff0c\u6216\u8005\u4ece\u5176\u4ed6\u51fd\u6570\u7684\u7ed3\u679c\u6536\u5230\u5b83\uff0c\u60a8\u53ef\u4ee5\u7ee7\u7eed\u5c06\u7c7b\u578b\u4ece\u5217\u8868\u66f4\u65b0\u5230\u6620\u5c04\uff0c\u4e00\u76f4\u547c\u53eb\u94fe\u3002\u6700\u7ec8\uff0c\u60a8\u5c06\u8fbe\u5230\u521b\u5efa\u503c\u7684\u4f4d\u7f6e\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u627e\u5230\u5b9e\u9645\u5e94\u5141\u8bb8\u91cd\u590d\u7684\u5730\u65b9\u3002\u6b64\u65f6\uff0c\u60a8\u53ef\u4ee5\u63d2\u5165\u8c03\u7528CheckNoduplignKeys\u7684\u4fee\u6539\u7248\u672c\uff1a\n CheckNoduplicateKeys ::\uff08MonadError Apperror M\uff0cEQ K\uff09=\uff06gt; [\uff08k\uff0cv\uff09]  - \uff06gt; m\uff08map k v\uff09\n \u73b0\u5728\uff0c\u65e0\u6cd5\u7701\u7565\u68c0\u67e5\uff0c\u56e0\u4e3a\u5b83\u7684\u7ed3\u679c\u5b9e\u9645\u4e0a\u662f\u8be5\u7a0b\u5e8f\u6240\u5fc5\u9700\u7684\uff01 \n\u4f7f\u7528\u4f7f\u975e\u6cd5\u72b6\u6001\u4e0d\u8db3\u7684\u6570\u636e\u7ed3\u6784\u3002\u4f7f\u7528\u60a8\u5408\u7406\u7684\u6700\u7cbe\u786e\u7684\u6570\u636e\u7ed3\u6784\u6765\u6a21\u62df\u60a8\u7684\u6570\u636e\u3002\u5982\u679c\u4f7f\u7528\u5f53\u524d\u4f7f\u7528\u7684\u7f16\u7801\u6765\u89e3\u9664\u7279\u5b9a\u53ef\u80fd\u6027\u592a\u96be\u8fc7\uff0c\u8bf7\u8003\u8651\u5907\u7528\u7f16\u7801\uff0c\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u8868\u8fbe\u60a8\u8981\u5173\u5fc3\u7684\u5c5e\u6027\u3002\u4e0d\u8981\u5bb3\u6015\u91cd\u6784\u3002\n  \u5c3d\u53ef\u80fd\u5c06\u8bc1\u660e\u7684\u8d1f\u62c5\u63a8\u52a8\uff0c\u4f46\u6ca1\u6709\u8fdb\u4e00\u6b65\u3002\u5c06\u60a8\u7684\u6570\u636e\u8fbe\u5230\u60a8\u5c3d\u5feb\u6240\u9700\u7684\u6700\u7cbe\u786e\u7684\u8868\u793a\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5e94\u8be5\u53d1\u751f\u5728\u7cfb\u7edf\u7684\u8fb9\u754c\uff0c\u5728\u4efb\u4f55\u6570\u636e\u91c7\u53d6\u884c\u52a8\u4e4b\u524d\u3002 3.\n  \u5982\u679c\u4e00\u4e2a\u7279\u5b9a\u7684\u4ee3\u7801\u5206\u652f\u6700\u7ec8\u9700\u8981\u4e00\u6761\u6570\u636e\u7684\u66f4\u7cbe\u786e\u8868\u793a\uff0c\u5219\u4e00\u65e6\u9009\u62e9\u5206\u652f\uff0c\u5c31\u4f1a\u5c06\u6570\u636e\u89e3\u6790\u4e3a\u66f4\u7cbe\u786e\u7684\u8868\u793a\u3002\u660e\u667a\u5730\u4f7f\u7528\u548c\u7c7b\u578b\u5141\u8bb8\u60a8\u7684\u6570\u636e\u7c7b\u578b\u53cd\u6620\u548c\u9002\u5e94\u63a7\u5236\u6d41\u7a0b\u3002\n \u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u60a8\u5e0c\u671b\u62e5\u6709\u7684\u6570\u636e\u8868\u793a\u4e0a\u5199\u5165\u529f\u80fd\uff0c\u800c\u4e0d\u662f\u60a8\u7ed9\u51fa\u7684\u6570\u636e\u8868\u793a\u3002\u7136\u540e\u8bbe\u8ba1\u8fc7\u7a0b\u6210\u4e3a\u6865\u63a5\u95f4\u9699\u7684\u8fd0\u52a8\uff0c\u901a\u5e38\u901a\u8fc7\u4ece\u4e24\u7aef\u5de5\u4f5c\uff0c\u76f4\u5230\u5b83\u4eec\u5728\u4e2d\u95f4\u7684\u67d0\u4e2a\u5730\u65b9\u9047\u5230\u3002\u4e0d\u8981\u5bb3\u6015\u5728\u4f60\u53bb\u7684\u65f6\u5019\u8fed\u4ee3\u8c03\u6574\u8bbe\u8ba1\u7684\u90e8\u4ef6\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u5728\u91cd\u6784\u8fc7\u7a0b\u4e2d\u5b66\u4e60\u65b0\u7684\u4e1c\u897f\uff01\n  \u8ba9\u60a8\u7684\u6570\u636e\u7c7b\u578b\u901a\u77e5\u60a8\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u8ba9\u60a8\u7684\u4ee3\u7801\u63a7\u5236\u6570\u636e\u7c7b\u578b\u3002\u907f\u514d\u8bf1\u60d1\u53ea\u9700\u5728\u67d0\u5904\u7c98\u5728\u4e00\u4e2a\u5531\u7247\u4e2d\uff0c\u56e0\u4e3a\u60a8\u76ee\u524d\u6b63\u5728\u7f16\u5199\u7684\u529f\u80fd\u662f\u5fc5\u9700\u7684\u3002\u4e0d\u8981\u5bb3\u6015\u91cd\u6784\u4ee3\u7801\u4f7f\u7528\u6b63\u786e\u7684\u6570\u636e\u8868\u793a - \u7c7b\u578b\u7cfb\u7edf\u5c06\u786e\u4fdd\u60a8\u5df2\u4ecb\u7ecd\u4e86\u9700\u8981\u66f4\u6539\u7684\u6240\u6709\u4f4d\u7f6e\uff0c\u5e76\u4e14\u7a0d\u540e\u53ef\u80fd\u4f1a\u8282\u7701\u5934\u75bc\u3002\n  \u5904\u7406\u8fd4\u56dem\uff08\uff09\u7684\u51fd\u6570\uff0c\u6df1\u5ea6\u6000\u7591\u3002\u6709\u65f6\u8fd9\u4e9b\u662f\u771f\u6b63\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u8868\u73b0\u51fa\u6ca1\u6709\u6709\u610f\u4e49\u7684\u7ed3\u679c\u7684\u547d\u4ee4\u6548\u679c\uff0c\u4f46\u5982\u679c\u8be5\u6548\u679c\u7684\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u9ad8\u9519\u8bef\uff0c\u90a3\u5c31\u53ef\u80fd\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u3002\n  \u4e0d\u8981\u5bb3\u6015\u5728\u591a\u6b21\u901a\u8fc7\u4e2d\u89e3\u6790\u6570\u636e\u3002\u907f\u514d\u9730\u5f39\u67aa\u89e3\u6790\u53ea\u610f\u5473\u7740\u60a8\u5728\u5b8c\u5168\u89e3\u6790\u4e4b\u524d\u4e0d\u5e94\u8be5\u5728\u8f93\u5165\u6570\u636e\u4e0a\u884c\u4e8b\uff0c\u800c\u4e0d\u662f\u60a8\u4e0d\u80fd\u4f7f\u7528\u4e00\u4e9bINP \n...... ", "note_en": "Historically, I\u2019ve struggled to find a concise, simple way to explain what it means to practice type-driven design. Too often, when someone asks me \u201cHow did you come up with this approach?\u201d I find I can\u2019t give them a satisfying answer. I know it didn\u2019t just come to me in a vision\u2014I have an iterative design process that doesn\u2019t require plucking the \u201cright\u201d approach out of thin air\u2014yet I haven\u2019t been very successful in communicating that process to others.\n However, about a month ago,  I was reflecting on Twitter about the differences I experienced parsing JSON in statically- and dynamically-typed languages, and finally, I realized what I was looking for. Now I have a single, snappy slogan that encapsulates what type-driven design means to me, and better yet, it\u2019s only three words long:\n   Alright, I\u2019ll confess: unless you already know what type-driven design is, my catchy slogan probably doesn\u2019t mean all that much to you. Fortunately, that\u2019s what the remainder of this blog post is for. I\u2019m going to explain precisely what I mean in gory detail\u2014but first, we need to practice a little wishful thinking.\n  One of the wonderful things about static type systems is that they can make it possible, and sometimes even easy, to answer questions like \u201cis it possible to write this function?\u201d For an extreme example, consider the following Haskell type signature:\n  Is it possible to implement  foo? Trivially, the answer is  no, as  Void is a type that contains no values, so it\u2019s impossible for  any function to produce a value of type  Void.  1 That example is pretty boring, but the question gets much more interesting if we choose a more realistic example:\n  This function returns the first element from a list. Is it possible to implement? It certainly doesn\u2019t sound like it does anything very complicated, but if we attempt to implement it, the compiler won\u2019t be satisfied:\n  warning: [-Wincomplete-patterns] Pattern match(es) are non-exhaustive In an equation for \u2018head\u2019: Patterns not matched: []\n This message is helpfully pointing out that our function is  partial, which is to say it is not defined for all possible inputs. Specifically, it is not defined when the input is  [], the empty list. This makes sense, as it isn\u2019t possible to return the first element of a list if the list is empty\u2014there\u2019s no element to return! So, remarkably, we learn this function isn\u2019t possible to implement, either.\n  To someone coming from a dynamically-typed background, this might seem perplexing. If we have a list, we might very well want to get the first element in it. And indeed, the operation of \u201cgetting the first element of a list\u201d isn\u2019t impossible in Haskell, it just requires a little extra ceremony. There are two different ways to fix the  head function, and we\u2019ll start with the simplest one.\n  As established,  head is partial because there is no element to return if the list is empty: we\u2019ve made a promise we cannot possibly fulfill. Fortunately, there\u2019s an easy solution to that dilemma: we can weaken our promise. Since we cannot guarantee the caller an element of the list, we\u2019ll have to practice a little expectation management: we\u2019ll do our best return an element if we can, but we reserve the right to return nothing at all. In Haskell, we express this possibility using the  Maybe type:\n  This buys us the freedom we need to implement  head\u2014it allows us to return  Nothing when we discover we can\u2019t produce a value of type  a after all:\n  Problem solved, right? For the moment, yes\u2026 but this solution has a hidden cost.\n Returning  Maybe is undoubtably convenient when we\u2019re  implementing  head. However, it becomes significantly less convenient when we want to actually use it! Since  head always has the potential to return  Nothing, the burden falls upon its callers to handle that possibility, and sometimes that passing of the buck can be incredibly frustrating. To see why, consider the following code:\n getConfigurationDirectories  ::  IO  [ FilePath ] getConfigurationDirectories  =  do  configDirsString  &lt;-  getEnv  &#34;CONFIG_DIRS&#34;  let  configDirsList  =  split  &#39;,&#39;  configDirsString  when  ( null  configDirsList )  $  throwIO  $  userError  &#34;CONFIG_DIRS cannot be empty&#34;  pure  configDirsList main  ::  IO  () main  =  do  configDirs  &lt;-  getConfigurationDirectories  case  head  configDirs  of  Just  cacheDir  -&gt;  initializeCache  cacheDir  Nothing  -&gt;  error  &#34;should never happen; already checked configDirs is non-empty&#34;\n When  getConfigurationDirectories retrieves a list of file paths from the environment, it proactively checks that the list is non-empty. However, when we use  head in  main to get the first element of the list, the  Maybe FilePath result still requires us to handle a  Nothing case that we know will never happen! This is terribly bad for several reasons:\n First, it\u2019s just annoying. We already checked that the list is non-empty, why do we have to clutter our code with another redundant check?\n  Second, it has a potential performance cost. Although the cost of the redundant check is trivial in this particular example, one could imagine a more complex scenario where the redundant checks could add up, such as if they were happening in a tight loop.\n  Finally, and worst of all, this code is a bug waiting to happen! What if  getConfigurationDirectories were modified to stop checking that the list is empty, intentionally or unintentionally? The programmer might not remember to update  main, and suddenly the \u201cimpossible\u201d error becomes not only possible, but probable.\n The need for this redundant check has essentially forced us to punch a hole in our type system. If we could statically  prove the  Nothing case impossible, then a modification to  getConfigurationDirectories that stopped checking if the list was empty would invalidate the proof and trigger a compile-time failure. However, as-written, we\u2019re forced to rely on a test suite or manual inspection to catch the bug.\n  Clearly, our modified version of  head leaves some things to be desired. Somehow, we\u2019d like it to be smarter: if we already checked that the list was non-empty,  head should unconditionally return the first element without forcing us to handle the case we know is impossible. How can we do that?\n   The previous section illustrated that we can turn that partial type signature into a total one by weakening the promise made in the return type. However, since we don\u2019t want to do that, there\u2019s only one thing left that can be changed: the argument type (in this case,  [a]). Instead of weakening the return type, we can  strengthen the argument type, eliminating the possibility of  head ever being called on an empty list in the first place.\n To do this, we need a type that represents non-empty lists. Fortunately, the existing  NonEmpty type from  Data.List.NonEmpty is exactly that. It has the following definition:\n  Note that  NonEmpty a is really just a tuple of an  a and an ordinary, possibly-empty  [a]. This conveniently models a non-empty list by storing the first element of the list separately from the list\u2019s tail: even if the  [a] component is  [], the  a component must always be present. This makes  head completely trivial to implement:  2\n  Unlike before, GHC accepts this definition without complaint\u2014this definition is  total, not partial. We can update our program to use the new implementation:\n getConfigurationDirectories  ::  IO  ( NonEmpty  FilePath ) getConfigurationDirectories  =  do  configDirsString  &lt;-  getEnv  &#34;CONFIG_DIRS&#34;  let  configDirsList  =  split  &#39;,&#39;  configDirsString  case  nonEmpty  configDirsList  of  Just  nonEmptyConfigDirsList  -&gt;  pure  nonEmptyConfigDirsList  Nothing  -&gt;  throwIO  $  userError  &#34;CONFIG_DIRS cannot be empty&#34; main  ::  IO  () main  =  do  configDirs  &lt;-  getConfigurationDirectories  initializeCache  ( head  configDirs )\n Note that the redundant check in  main is now completely gone! Instead, we perform the check exactly once, in  getConfigurationDirectories. It constructs a  NonEmpty a from a  [a] using the  nonEmpty function from  Data.List.NonEmpty, which has the following type:\n  The  Maybe is still there, but this time, we handle the  Nothing case very early in our program: right in the same place we were already doing the input validation. Once that check has passed, we now have a  NonEmpty FilePath value, which preserves (in the type system!) the knowledge that the list really is non-empty. Put another way, you can think of a value of type  NonEmpty a as being like a value of type  [a], plus a  proof that the list is non-empty.\n By strengthening the type of the argument to  head instead of weakening the type of its result, we\u2019ve completely eliminated all the problems from the previous section:\n The code has no redundant checks, so there can\u2019t be any performance overhead.\n  Furthermore, if  getConfigurationDirectories changes to stop checking that the list is non-empty, its return type must change, too. Consequently,  main will fail to typecheck, alerting us to the problem before we even run the program!\n What\u2019s more, it\u2019s trivial to recover the old behavior of  head from the new one by composing  head with  nonEmpty:\n  Note that the inverse is  not true: there is no way to obtain the new version of  head from the old one. All in all, the second approach is superior on all axes.\n  You may be wondering what the above example has to do with the title of this blog post. After all, we only examined two different ways to validate that a list was non-empty\u2014no parsing in sight. That interpretation isn\u2019t wrong, but I\u2019d like to propose another perspective: in my mind, the difference between validation and parsing lies almost entirely in how information is preserved. Consider the following pair of functions:\n validateNonEmpty  ::  [ a ]  -&gt;  IO  () validateNonEmpty  ( _ : _ )  =  pure  () validateNonEmpty  []  =  throwIO  $  userError  &#34;list cannot be empty&#34; parseNonEmpty  ::  [ a ]  -&gt;  IO  ( NonEmpty  a ) parseNonEmpty  ( x : xs )  =  pure  ( x :| xs ) parseNonEmpty  []  =  throwIO  $  userError  &#34;list cannot be empty&#34;\n These two functions are nearly identical: they check if the provided list is empty, and if it is, they abort the program with an error message. The difference lies entirely in the return type:  validateNonEmpty always returns  (), the type that contains no information, but  parseNonEmpty returns  NonEmpty a, a refinement of the input type that preserves the knowledge gained in the type system. Both of these functions check the same thing, but  parseNonEmpty gives the caller access to the information it learned, while  validateNonEmpty just throws it away.\n These two functions elegantly illustrate two different perspectives on the role of a static type system:  validateNonEmpty obeys the typechecker well enough, but only  parseNonEmpty takes full advantage of it. If you see why  parseNonEmpty is preferable, you understand what I mean by the mantra \u201cparse, don\u2019t validate.\u201d Still, perhaps you are skeptical of  parseNonEmpty\u2019s name. Is it really  parsing anything, or is it merely validating its input and returning a result? While the precise definition of what it means to parse or validate something is debatable, I believe  parseNonEmpty is a bona-fide parser (albeit a particularly simple one).\n Consider: what is a parser? Really, a parser is just a function that consumes less-structured input and produces more-structured output. By its very nature, a parser is a partial function\u2014some values in the domain do not correspond to any value in the range\u2014so all parsers must have some notion of failure. Often, the input to a parser is text, but this is by no means a requirement, and  parseNonEmpty is a perfectly cromulent parser: it parses lists into non-empty lists, signaling failure by terminating the program with an error message.\n Under this flexible definition, parsers are an incredibly powerful tool: they allow discharging checks on input up-front, right on the boundary between a program and the outside world, and once those checks have been performed, they never need to be checked again! Haskellers are well-aware of this power, and they use many different types of parsers on a regular basis:\n The  aeson library provides a  Parser type that can be used to parse JSON data into domain types.\n    Database libraries like  persistent and  postgresql-simple have a mechanism for parsing values held in an external data store.\n  The  servant ecosystem is built around parsing Haskell datatypes from path components, query parameters, HTTP headers, and more.\n The common theme between all these libraries is that they sit on the boundary between your Haskell application and the external world. That world doesn\u2019t speak in product and sum types, but in streams of bytes, so there\u2019s no getting around a need to do some parsing. Doing that parsing up front, before acting on the data, can go a long way toward avoiding many classes of bugs, some of which might even be security vulnerabilities.\n One drawback to this approach of parsing everything up front is that it sometimes requires values be parsed long before they are actually used. In a dynamically-typed language, this can make keeping the parsing and processing logic in sync a little tricky without extensive test coverage, much of which can be laborious to maintain. However, with a static type system, the problem becomes marvelously simple, as demonstrated by the  NonEmpty example above: if the parsing and processing logic go out of sync, the program will fail to even compile.\n  Hopefully, by this point, you are at least somewhat sold on the idea that parsing is preferable to validation, but you may have lingering doubts. Is validation really so bad if the type system is going to force you to do the necessary checks eventually anyway? Maybe the error reporting will be a little bit worse, but a bit of redundant checking can\u2019t hurt, right?\n Unfortunately, it isn\u2019t so simple. Ad-hoc validation leads to a phenomenon that the  language-theoretic security field calls  shotgun parsing. In the 2016 paper,  The Seven Turrets of Babel: A Taxonomy of LangSec Errors and How to Expunge Them, its authors provide the following definition:\n Shotgun parsing is a programming antipattern whereby parsing and input-validating code is mixed with and spread across processing code\u2014throwing a cloud of checks at the input, and hoping, without any systematic justification, that one or another would catch all the \u201cbad\u201d cases.\n  Shotgun parsing necessarily deprives the program of the ability to reject invalid input instead of processing it. Late-discovered errors in an input stream will result in some portion of invalid input having been processed, with the consequence that program state is difficult to accurately predict.\n In other words, a program that does not parse all of its input up front runs the risk of acting upon a valid portion of the input, discovering a different portion is invalid, and suddenly needing to roll back whatever modifications it already executed in order to maintain consistency. Sometimes this is possible\u2014such as rolling back a transaction in an RDBMS\u2014but in general it may not be.\n It may not be immediately apparent what shotgun parsing has to do with validation\u2014after all, if you do all your validation up front, you mitigate the risk of shotgun parsing. The problem is that validation-based approaches make it extremely difficult or impossible to determine if everything was actually validated up front or if some of those so-called \u201cimpossible\u201d cases might actually happen. The entire program must assume that raising an exception anywhere is not only possible, it\u2019s regularly necessary.\n Parsing avoids this problem by stratifying the program into two phases\u2014parsing and execution\u2014where failure due to invalid input can only happen in the first phase. The set of remaining failure modes during execution is minimal by comparison, and they can be handled with the tender care they require.\n  So far, this blog post has been something of a sales pitch. \u201cYou, dear reader, ought to be parsing!\u201d it says, and if I\u2019ve done my job properly, at least some of you are sold. However, even if you understand the \u201cwhat\u201d and the \u201cwhy,\u201d you might not feel especially confident about the \u201chow.\u201d\n  Suppose you are writing a function that accepts a list of tuples representing key-value pairs, and you suddenly realize you aren\u2019t sure what to do if the list has duplicate keys. One solution would be to write a function that asserts there aren\u2019t any duplicates in the list:\n  However, this check is fragile: it\u2019s extremely easy to forget. Because its return value is unused, it can always be omitted, and the code that needs it would still typecheck. A better solution is to choose a data structure that disallows duplicate keys by construction, such as a  Map. Adjust your function\u2019s type signature to accept a  Map instead of a list of tuples, and implement it as you normally would.\n Once you\u2019ve done that, the call site of your new function will likely fail to typecheck, since it is still being passed a list of tuples. If the caller was given the value via one of its arguments, or if it received it from the result of some other function, you can continue updating the type from list to  Map, all the way up the call chain. Eventually, you will either reach the location the value is created, or you\u2019ll find a place where duplicates actually ought to be allowed. At that point, you can insert a call to a modified version of  checkNoDuplicateKeys:\n checkNoDuplicateKeys  ::  ( MonadError  AppError  m ,  Eq  k )  =&gt;  [( k ,  v )]  -&gt;  m  ( Map  k  v )\n Now the check  cannot be omitted, since its result is actually necessary for the program to proceed!\n  Use a data structure that makes illegal states unrepresentable. Model your data using the most precise data structure you reasonably can. If ruling out a particular possibility is too hard using the encoding you are currently using, consider alternate encodings that can express the property you care about more easily. Don\u2019t be afraid to refactor.\n  Push the burden of proof upward as far as possible, but no further. Get your data into the most precise representation you need as quickly as you can. Ideally, this should happen at the boundary of your system, before  any of the data is acted upon.  3\n  If one particular code branch eventually requires a more precise representation of a piece of data, parse the data into the more precise representation as soon as the branch is selected. Use sum types judiciously to allow your datatypes to reflect and adapt to control flow.\n In other words, write functions on the data representation you  wish you had, not the data representation you are given. The design process then becomes an exercise in bridging the gap, often by working from both ends until they meet somewhere in the middle. Don\u2019t be afraid to iteratively adjust parts of the design as you go, since you may learn something new during the refactoring process!\n  Let your datatypes inform your code, don\u2019t let your code control your datatypes. Avoid the temptation to just stick a  Bool in a record somewhere because it\u2019s needed by the function you\u2019re currently writing. Don\u2019t be afraid to refactor code to use the right data representation\u2014the type system will ensure you\u2019ve covered all the places that need changing, and it will likely save you a headache later.\n  Treat functions that return  m () with deep suspicion. Sometimes these are genuinely necessary, as they may perform an imperative effect with no meaningful result, but if the primary purpose of that effect is raising an error, it\u2019s likely there\u2019s a better way.\n  Don\u2019t be afraid to parse data in multiple passes. Avoiding shotgun parsing just means you shouldn\u2019t act on the input data before it\u2019s fully parsed, not that you can\u2019t use some of the inp\n......", "posttime": "2021-06-26 15:53:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u89e3\u6790,don,\u7c7b\u578b", "title": "\u89e3\u6790\uff0c\u4e0d\u8981\u9a8c\u8bc1\uff082019\uff09 ", "title_en": "Parse, Don't Validate (2019)", "transed": 1, "url": "https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/", "via": "", "real_tags": ["\u89e3\u6790", "don", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "37d4db356ff47f5020924c319f26a3fa.jpg", "infoid": 1068398, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e03\u91cc\u65af\u6258\u5c14\u5728\u53bb\u5e74\u7684\u6280\u672f\u6295\u8d44\u8005\u4e2d\u7279\u522b\u53d7\u6b22\u8fce - \u57282020\u5e74\u768441400\u4e07\u7f8e\u5143\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u5730\u65b9\uff0c\u8fd9\u662f\u7b2c\u4e09\u5927U.K.\u7684\u79d1\u6280\u6295\u8d44\u3002\u6839\u636eWhiteCap\u76842019-2020\u751f\u6001\u7cfb\u7edf\u62a5\u544a\uff0c\u8be5\u5e02\u5728\u4f26\u6566\u5916\uff0c\u4f26\u6566\u5883\u5916\u4e5f\u62e5\u6709\u4f26\u6566\u5883\u5916\u6700\u5177\u91d1\u516c\u53f8\u521d\u521b\u516c\u53f8\u3002\n \u8be5\u5e02\u79c1\u8425\u548c\u516c\u5171\u90e8\u95e8\u5b9e\u73b0\u73b0\u4ee3\u5316\u57ce\u5e02\u7684\u52aa\u529b\u5df2\u7ecf\u5e2e\u52a9\u5b83\u5728U.K\u7684\u9876\u7ea7\u667a\u80fd\u57ce\u5e02\u4e2d\u6392\u540d\u3002\uff0c\u5438\u5f15\u4e86\u4e00\u79cd\u6280\u672f\u4f01\u4e1a\u5bb6\u3002\u5b83\u9760\u8fd1\u4f26\u6566\u7684\u610f\u601d\u662f\uff0c\u521b\u59cb\u4eba\u5bfb\u6c42\u66f4\u5b9e\u60e0\u7684\u4f4f\u5bbf\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\uff0c\u540c\u65f6\u8ba9\u4ed6\u4eec\u6316\u6398\u8d44\u672c\u7684\u8d22\u52a1\u8d44\u6e90\u3002\u5e03\u91cc\u65af\u6258\u5c14\u5927\u5b66\u4e5f\u62e5\u6709\u6b27\u6d32\u6700\u5927\u7684\u673a\u5668\u4eba\u90e8\u95e8\u3002\n   \u4f7f\u7528\u6298\u6263\u7801\u54c8\u535a\u5fb7\uff0c\u6bcf\u5e74\u6216\u4e24\u5e74\u989d\u5916\u7684\u7d27\u7f29\u6210\u5458\u8282\u770125\uff05\u3002\u6b64\u4f18\u60e0\u4ec5\u9002\u7528\u4e8eU.K.\u548c\u6b27\u6d32\u7684\u8bfb\u8005\uff0c\u5e76\u4e8e2021\u5e748\u670831\u65e5\u5230\u671f\u3002\n  \u5e03\u91cc\u65af\u6258\u5c14\u4e5f\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u542f\u52a8\u52a0\u901f\u5668\uff0c\u5957\u623f\u3002\u52a0\u901f\u5668\u652f\u6301\u4e94\u6240\u6c90\u6d74\u5927\u5b66\uff0c\u5e03\u91cc\u65af\u6258\u5c14\uff0c\u57c3\u514b\u585e\u7279\uff0c\u5357\u5b89\u666e\u987f\u548c\u8428\u91cc\u7684\u5408\u4f5c\u52aa\u529b\u652f\u6301\u8d85\u8fc74,000\u540d\u4f01\u4e1a\u5bb6\uff0c\u5e76\u5e2e\u52a9\u4ed6\u4eec\u7684\u521d\u521b\u516c\u53f8\u7b79\u96c6\u4e8618\u4ebf\u82f1\u9551\u3002\u5176\u4ed6\u542f\u52a8\u652f\u6301\u5458\u5305\u62ec\u65b0\u7684\u79d1\u5b66\u521b\u5efaVC\u57fa\u91d1\uff0c\u7531\u4f01\u4e1a\u5bb6\u54c8\u5229\u65af\u7279\u514b\u5fb7\u514b\u7f57\u514b\uff08Techspark Engine Shed\uff09\u8bbe\u7f6e\u3002\n \u6765\u81ea\u5e03\u91cc\u65af\u6258\u5c14\u7684\u5173\u952e\u65b0\u5174\u521d\u521b\u516c\u53f8\u5305\u62ecGraphCore\uff0c\u5f00\u653e\u4eff\u751f\u5b66\uff0cUltraLeap\uff0c\u6c89\u6d78\u5f0f\u5b9e\u9a8c\u5ba4\u548c\u4e94\u4e2aAI\u3002\n \u4e3a\u4e86\u66f4\u597d\u5730\u4e86\u89e3\u6280\u672f\u751f\u6001\u7cfb\u7edf\u548c\u8be5\u57ce\u5e02\u7684\u6295\u8d44\u8005\u524d\u666f\uff0c\u6211\u4eec\u8c03\u67e5\u4e86\u57f9\u80b2\u5e03\u91cc\u65af\u6258\u5c14\u521d\u521b\u751f\u6001\u7cfb\u7edf\u7684\u521b\u59cb\u4eba\uff0c\u9886\u5bfc\u548c\u9ad8\u7ba1\u3002\n \u8be5\u8c03\u67e5\u663e\u793a\uff0c\u8be5\u5e02\u62e5\u6709\u5f3a\u5927\u7684\u53ef\u518d\u751f\uff0c\u96f6\u78b3\u548cFintech\u542f\u52a8\u666f\u89c2\u3002\u673a\u5668\u4eba\uff0cVR\uff0cBIO\uff0c\u91cf\u5b50\uff0c\u6570\u5b57\u548c\u6df1\u5ea6\u6280\u672f\u4e5f\u662f\u663e\u793a\u627f\u8bfa\u7684\u9886\u57df\u3002\u81f3\u4e8e\u6295\u8d44\u73b0\u573a\uff0c\u867d\u7136\u5e03\u91cc\u65af\u6258\u5c14\u6709\u4e00\u4e2a\u5065\u5eb7\u7684\u5929\u4f7f\u7f51\u7edc\uff0c\u4f46\u8fd9\u5ea7\u57ce\u5e02\u7f3a\u4e4f\u673a\u6784VC\uff0c\u4f46\u4e0e\u4f26\u6566\u53ea\u6709\u4e00\u4e2a\u9a7e\u9a76\u6216\u706b\u8f66\u9a91\u884c\uff0c\u8fd9\u5e76\u6ca1\u6709\u8bc1\u660e\u662f\u4e00\u4e2a\u91cd\u5927\u95ee\u9898\u3002 \n\u54ea\u4e2a\u90e8\u95e8\u662f\u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u751f\u6001\u7cfb\u7edf\u5f3a\u52b2\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u7f3a\u4e4f\u4ec0\u4e48\uff1f Bristol\u5728\u53ef\u518d\u751f\u548c\u96f6\u78b3\u521b\u65b0\uff0cFintech\u548c\u673a\u5668\u4eba\u65b9\u9762\u90fd\u662f\u5f3a\u5927\u7684\u3002\u5b83\u5728\u5de5\u4e1a4.0\u4e2d\u75b2\u8f6f\u3002\n \u8fd9\u662f\u5e03\u91cc\u65af\u6258\u5c14\u6700\u6709\u8da3\u7684\u521d\u521b\u516c\u53f8\uff1f Graphcore\uff0cLettus\u6210\u957f\uff0c\u5f00\u653e\u4eff\u751f\u5b66\uff0cUltraLeap\u548cYellowDog\u3002\n \u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u7684\u7126\u70b9\u662f\u4ec0\u4e48\uff1f\u6211\u8ba4\u4e3a\u5f88\u591a\u5173\u4e8e\u91d1\u878d\u6c14\u7684\u4e13\u6ce8\u3002\n \u968f\u7740\u9065\u63a7\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4f60\u8ba4\u4e3a\u4eba\u4eec\u4f1a\u7559\u5728\u5e03\u91cc\u65af\u6258\u5c14\u6216\u4ed6\u4eec\u4f1a\u642c\u51fa\u53bb\u5417\uff1f\u5176\u4ed6\u4eba\u4f1a\u642c\u8fdb\u53bb\u5417\uff1f\u5e03\u91cc\u65af\u6258\u5c14\u662f\u4e00\u4e2a\u5927\u578b\u52a8\u6001\u57ce\u5e02\u4e4b\u95f4\u7684\u4e00\u4e2a\u4f1f\u5927\u7684\u4e2d\u95f4\u5730\u9762\uff08\u52a0\u4e0a\u5b83\u79bb\u4f26\u6566\u4e0d\u8fdc\uff09\u548c\u6f02\u4eae\u7684\u4e61\u6751\u5730\u533a\u3002\u901a\u8fc7\u9065\u63a7\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u671f\u5b83\u5c06\u5728\u672a\u6765\u51e0\u5e74\u5185\u5438\u5f15\u65b0\u5c45\u6c11\u3002\n \u8c01\u662f\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u58eb\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\uff0c\u521b\u59cb\u4eba\uff0c\u5f8b\u5e08\uff0c\u8bbe\u8ba1\u5e08\uff09\uff1f Aimee Skinner\uff0cAbigail Frear\u548cStuart Harrison\u3002\n \u60a8\u8ba4\u4e3a\u8fd9\u5ea7\u57ce\u5e02\u7684\u6280\u672f\u573a\u666f\u5c06\u5728\u4e94\u5e74\u5185\uff1f U.K.\u521b\u65b0\u7684\u7b2c\u4e8c\u5927\u57ce\u5e02\u3002\n  \u54ea\u4e2a\u90e8\u95e8\u662f\u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u751f\u6001\u7cfb\u7edf\u5f3a\u52b2\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u7f3a\u4e4f\u4ec0\u4e48\uff1f Bristol\u5728\u5a92\u4f53/\u52a8\u753b\uff0cEdtech\uff0c\u793e\u4f1a\u5f71\u54cd\uff0c\u5065\u5eb7\u548c\u79d1\u5b66\u65b9\u9762\u90fd\u5f88\u5f3a\u5927\u3002\u6211\u6700\u5174\u594b\u7684\u662fEdtech\uff0c\u5e76\u901a\u8fc7\u5728\u7ebf\u5b66\u4e60\u6765\u5b9e\u73b0\u6570\u767e\u4e07\u5b66\u751f\u7684\u53ef\u80fd\u6027\u3002\u5b83\u5728\u786c\u4ef6\u548c\u91d1\u878d\u6c14\u4e2d\u8f83\u5f31\u3002 \n\u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u7684\u7126\u70b9\u662f\u4ec0\u4e48\uff1f\u6709\u51e0\u79cd\u975e\u5e38\u6d3b\u8dc3\u7684\u6280\u672f\u6295\u8d44\u7f51\u7edc\u6765\u81ea\u51e0\u4e2a\u89d2\u5ea6\uff0c\u4f8b\u5982\uff0c\u5927\u5b66\u9886\u5bfc\uff0c\u79c1\u4eba\u5929\u4f7f\u7ec4\u548c\u6280\u672f\u5b75\u5316\u5668\u3002\u4f1f\u5927\u7684\u4e8b\u60c5\u662f\u4ed6\u4eec\u90fd\u5728\u53d1\u52a8\u673a\u68da\u548c\u7845\u5ce1\u8c37\u7b49\u4e3e\u63aa\u4e2d\u5408\u4f5c\u548c\u5206\u4eab\u8d44\u6e90\uff0c\u60f3\u6cd5\u548c\u4e13\u4e1a\u77e5\u8bc6\u3002\n \u968f\u7740\u9065\u63a7\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4f60\u8ba4\u4e3a\u4eba\u4eec\u4f1a\u7559\u5728\u5e03\u91cc\u65af\u6258\u5c14\u6216\u4ed6\u4eec\u4f1a\u642c\u51fa\u53bb\u5417\uff1f\u5176\u4ed6\u4eba\u4f1a\u642c\u8fdb\u53bb\u5417\uff1f\u8ddd\u79bb\u5e03\u91cc\u65af\u6258\u5c14\u6709\u5de8\u5927\u7684\u57ce\u5e02\u751f\u6d3b\u65b9\u5f0f\uff0c\u8ddd\u79bb\u4e61\u6751\u548c\u897f\u5357/\u5a01\u5c14\u58eb/\u5a01\u5c14\u58eb\u5ea6\u5047\u80dc\u5730\u6709\u7740\u5de8\u5927\u7684\u57ce\u5e02\u751f\u6d3b\u65b9\u5f0f\uff0c\u8ddd\u79bb\u5e02\u4e2d\u5fc3\u670920\u5206\u949f\u8def\u7a0b\u3002\n \u8c01\u662f\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u58eb\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\uff0c\u521b\u59cb\u4eba\uff0c\u5f8b\u5e08\uff0c\u8bbe\u8ba1\u5e08\uff09\uff1f\u5e03\u91cc\u65af\u6258\u5c14PE\u4ff1\u4e50\u90e8\u7684Jerry Barnes;\u5728TechSpark\u7684Abby Frear;\u5728\u7f57\u514b\u9a6c\u514b\u65af\u5dde\u7684Briony Phillips; Jack Jordan-Connelly\u5728Setsquared\u3002\n \u60a8\u8ba4\u4e3a\u8fd9\u5ea7\u57ce\u5e02\u7684\u6280\u672f\u573a\u666f\u5c06\u5728\u4e94\u5e74\u5185\uff1f\u5b83\u6b63\u5728\u8fc5\u901f\u53d1\u5c55\uff0c\u6709\u5f88\u591a\u652f\u6301\uff0c\u56e0\u6b64\u5b83\u5c06\u66f4\u5927\uff0c\u5438\u5f15\u66f4\u591a\u7684\u6295\u8d44\uff0c\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u56fd\u9645\u821e\u53f0\u4e0a\u6709\u4e94\u5e74\u3002\n  \u54ea\u4e2a\u90e8\u95e8\u662f\u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u751f\u6001\u7cfb\u7edf\u5f3a\u52b2\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u7f3a\u4e4f\u4ec0\u4e48\uff1f\u6211\u4eec\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u822a\u7a7a\u822a\u5929\u548c\u56fd\u9632\u90e8\u95e8\u7684\u5f3a\u52b2\u3002\u6211\u4eec\u5174\u594b\u4e8e\u8be5\u90e8\u95e8\u53ef\u7528\u7684\u6570\u5b57\u8f6c\u578b\u673a\u4f1a\u7684\u8303\u56f4\u548c\u89c4\u6a21\u3002\u8fd9\u4e00\u90e8\u95e8\u7684\u4e3b\u8981\u5f31\u70b9\u662f\u8f6c\u578b\u901f\u5ea6\u7f13\u6162\uff0c\u7279\u522b\u662f\u7531\u4e8e\u6d41\u884c\u75c5\u3002\n  \u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u7684\u7126\u70b9\u662f\u4ec0\u4e48\uff1f\u4e0e\u82f1\u56fd\u79d1\u6280\u90e8\u95e8\u7684\u5e73\u5747\u6c34\u5e73\u76f8\u6bd4\uff0c\u5e03\u91cc\u65af\u6258\u5c14\u6709\u4e00\u4e2a\u975e\u5e38\u4f4e\u7684\u6210\u7acb\u516c\u53f8\uff084\uff05\u5bf98\uff05\uff09\uff0c\u79cd\u5b50\u9636\u6bb5\u516c\u53f8\u6bd4\u4f8b\u8f83\u9ad8\uff0842\uff05\u5bf937\uff05\uff09\uff0c\u6b7b\u4ea1\u7387\u8f83\u9ad8\uff0821\uff05\u4e0e17\uff05 \uff05\uff09\u3002\u8fd9\u662f\u4e00\u4e2a\u7279\u522b\u5e74\u8f7b\u7684\u751f\u6001\u7cfb\u7edf\u3002\n \u968f\u7740\u9065\u63a7\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4f60\u8ba4\u4e3a\u4eba\u4eec\u4f1a\u7559\u5728\u5e03\u91cc\u65af\u6258\u5c14\u6216\u4ed6\u4eec\u4f1a\u642c\u51fa\u53bb\u5417\uff1f\u5176\u4ed6\u4eba\u4f1a\u642c\u8fdb\u53bb\u5417\uff1f\u7531\u4e8e\u8fd0\u8f93\u73af\u8282\uff0c\u5f3a\u5927\u7684\u751f\u6001\u7cfb\u7edf\u548c\u57ce\u5e02\u7f8e\u4e3d\u7684\u7f8e\u4e3d\uff0c\u4eba\u4eec\u642c\u51fa\u4f26\u6566\u7684\u4eba\u4eec\u5c06\u8fdb\u5165\u5e03\u91cc\u65af\u6258\u5c14\u3002 \n\u60a8\u8ba4\u4e3a\u8fd9\u5ea7\u57ce\u5e02\u7684\u6280\u672f\u573a\u666f\u5c06\u5728\u4e94\u5e74\u5185\uff1f\u5982\u679c\u5e03\u91cc\u65af\u6258\u5c14\u51fa\u6765\u662f\u6b27\u6d32\u65e7\u91d1\u5c71\u7684\u8bdd\uff0c\u6211\u4e0d\u4f1a\u611f\u5230\u60ca\u8bb6\uff01\n  \u54ea\u4e2a\u90e8\u95e8\u662f\u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u751f\u6001\u7cfb\u7edf\u5f3a\u52b2\uff1f\u5b83\u7f3a\u4e4f\u4ec0\u4e48\uff1f Bristol\u5728Medtech\uff0c\u517d\u533b\uff0c\u5de5\u4e1a\u9886\u57df\u662f\u5f3a\u5927\u7684\u3002\n \u968f\u7740\u9065\u63a7\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4f60\u8ba4\u4e3a\u4eba\u4eec\u4f1a\u7559\u5728\u5e03\u91cc\u65af\u6258\u5c14\u6216\u4ed6\u4eec\u4f1a\u642c\u51fa\u53bb\u5417\uff1f\u5176\u4ed6\u4eba\u4f1a\u642c\u8fdb\u53bb\u5417\uff1f\u5176\u4ed6\u4eba\u5df2\u7ecf\u642c\u8fdb\u53bb\u4e86\u3002\n  \u60a8\u8ba4\u4e3a\u8fd9\u5ea7\u57ce\u5e02\u7684\u6280\u672f\u573a\u666f\u5c06\u5728\u4e94\u5e74\u5185\uff1f\u6211\u4eec\u5c06\u5728\u4e94\u5e74\u5185\u770b\u5230\u5927\u89c4\u6a21\u589e\u957f\u3002\n  \u54ea\u4e2a\u90e8\u95e8\u662f\u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u751f\u6001\u7cfb\u7edf\u5f3a\u52b2\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u7f3a\u4e4f\u4ec0\u4e48\uff1f\u6211\u4eec\u7684\u90e8\u95e8\u5728\u7814\u7a76\u4eba\u5458\u4e4b\u95f4\u7684\u521b\u4e1a\u6c1b\u56f4\u4e2d\u662f\u8584\u5f31\u7684\uff0c\u56e0\u6b64\u6765\u81ea\u9886\u5148\u7684\u5927\u5b66\u7684\u6df1\u5ea6\u79d1\u6280\u7eba\u573a\u6d3b\u52a8\u7684\u4f4e\u5229\u7387\u3002\u6211\u4eec\u6700\u5174\u594b\u7684\u662f\uff0c\u6211\u4eec\u5728\u8fc7\u53bb\u4e24\u5e74\u4e2d\u770b\u5230\u7684\u6d3b\u52a8\u53d8\u5316\u548c\u6587\u5316\u8f6c\u5411\u521b\u65b0\u3002\n  \u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u7684\u7126\u70b9\u662f\u4ec0\u4e48\uff1f\u6d45\u5c42\u79d1\u6280\u4e2d\u7b49\u5f3a\u5ea6;\u76ee\u524d\u6df1\u5165\u5f31\u6280\u672f\u3002\n \u968f\u7740\u9065\u63a7\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4f60\u8ba4\u4e3a\u4eba\u4eec\u4f1a\u7559\u5728\u5e03\u91cc\u65af\u6258\u5c14\u6216\u4ed6\u4eec\u4f1a\u642c\u51fa\u53bb\u5417\uff1f\u5176\u4ed6\u4eba\u4f1a\u642c\u8fdb\u53bb\u5417\uff1f\u4eba\u4eec\u6b63\u5728\u642c\u8fdb\u53bb\u3002 \n\u8c01\u662f\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u58eb\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\uff0c\u521b\u59cb\u4eba\uff0c\u5f8b\u5e08\uff0c\u8bbe\u8ba1\u5e08\uff09\uff1f\u65cb\u8f6c\u79d1\u5b66\uff0c\u79d1\u5b66\u521b\u9020\u548c\u79d1\u5b66\u5929\u4f7f\u7efc\u5408\u3002\n \u60a8\u8ba4\u4e3a\u8fd9\u5ea7\u57ce\u5e02\u7684\u6280\u672f\u573a\u666f\u5c06\u5728\u4e94\u5e74\u5185\uff1f\u6df1\u5ea6\u6280\u672f\u4e0e\u6295\u8d44\u7684\u5f53\u5730\u4f01\u4e1a\u5bb6\uff0c\u5b75\u5316\u5668\u548c\u6295\u8d44\u8005\u7fa4\u4f53\u975e\u5e38\u5f3a\u5927\u3002\n  \u54ea\u4e2a\u90e8\u95e8\u662f\u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u751f\u6001\u7cfb\u7edf\u5f3a\u52b2\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u7f3a\u4e4f\u4ec0\u4e48\uff1f Bristol\u5728\u65e0\u7ebf\uff085G\uff0c60 GHz\u7b49\uff09\u4e2d\u5f3a\u5927\uff0c\u534a\u5bfc\u4f53\uff08\u7279\u522b\u662f\u5904\u7406\u5668\uff0cAI / ML\u548c\u5e76\u884c\u67b6\u6784\uff09\uff0c\u673a\u5668\u4eba\u548c\u5176\u4ed6\u786c\u6280\u672f/\u6df1\u5ea6\u6280\u672f\u3002\n  \u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u7684\u7126\u70b9\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u9650\u3002\u6709\u4e00\u4e9b\u5929\u4f7f\uff0c\u4f46\u5f88\u5c11\u6709\u96c6\u4e2d\u7684\u8d44\u91d1\u3002\n \u968f\u7740\u9065\u63a7\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4f60\u8ba4\u4e3a\u4eba\u4eec\u4f1a\u7559\u5728\u5e03\u91cc\u65af\u6258\u5c14\u6216\u4ed6\u4eec\u4f1a\u642c\u51fa\u53bb\u5417\uff1f\u5176\u4ed6\u4eba\u4f1a\u642c\u8fdb\u53bb\u5417\uff1f\u975e\u5e38\u76f8\u4f3c\uff1a\u4eba\u4eec\u9009\u62e9\u751f\u6d3b\u5728\u5e03\u91cc\u65af\u6258\u5c14/\u6d74\u5ba4\u4ee5\u83b7\u5f97\u751f\u6d3b\u8d28\u91cf\u3002\u5927\u90e8\u5206\u5de5\u4f5c\u5df2\u7ecf\u662f\u5916\u90e8 - \u901a\u52e4\u5230\u4f26\u6566\u3002\n \u8c01\u662f\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u58eb\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\uff0c\u521b\u59cb\u4eba\uff0c\u5f8b\u5e08\uff0c\u8bbe\u8ba1\u5e08\uff09\uff1f Nigel Toon\uff0cSimon Knowles\uff0cStan Boland\uff0cDavid May\u548cNick Sturge\u3002\n \u60a8\u8ba4\u4e3a\u8fd9\u5ea7\u57ce\u5e02\u7684\u6280\u672f\u573a\u666f\u5c06\u5728\u4e94\u5e74\u5185\uff1f\u66f4\u5f3a\u5927\uff0c\u5177\u6709\u66f4\u591a\u5904\u7406\u5668\u548c\u786c\u4ef6\u6d3b\u52a8\u3002 \n\u54ea\u4e2a\u90e8\u95e8\u662f\u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u751f\u6001\u7cfb\u7edf\u5f3a\u52b2\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u7f3a\u4e4f\u4ec0\u4e48\uff1f\u5e03\u91cc\u65af\u6258\u5c14\u6709\u4e00\u4e2a\u5f3a\u5927\u7684\u673a\u5668\u4eba\uff0c\u822a\u7a7a\u822a\u5929\u548c\u53ef\u518d\u751f\u80fd\u6e90\u3002\u6211\u6700\u5174\u594b\u5730\u4e86\u89e3\u5e03\u91cc\u65af\u6258\u5c14\u822a\u7a7a\u822a\u5929\u7684\u9057\u4ea7\u5982\u4f55\u8f6c\u5316\u4e3a\u672a\u6765\u7684\u884c\u4e1a\u754c\u5b9a\u516c\u53f8\u3002\u751f\u6001\u7cfb\u7edf\u5728\u6295\u8d44\u8005\u65b9\u9762\u8584\u5f31\uff0c\u867d\u7136\u4f26\u6566VCS\u8ddd\u79bb\u4f26\u6566VCS\u5c11\u4e8e\u4e24\u5c0f\u65f6\u7684\u706b\u8f66\u4e4b\u65c5\u3002\n  \u968f\u7740\u9065\u63a7\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4f60\u8ba4\u4e3a\u4eba\u4eec\u4f1a\u7559\u5728\u5e03\u91cc\u65af\u6258\u5c14\u6216\u4ed6\u4eec\u4f1a\u642c\u51fa\u53bb\u5417\uff1f\u5176\u4ed6\u4eba\u4f1a\u642c\u8fdb\u53bb\u5417\uff1f\u6211\u76f8\u4fe1\u5e03\u91cc\u65af\u6258\u5c14\u5c06\u53d8\u5f97\u66f4\u6709\u5438\u5f15\u529b\u3002\n \u8c01\u662f\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u58eb\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\uff0c\u521b\u59cb\u4eba\uff0c\u5f8b\u5e08\uff0c\u8bbe\u8ba1\u5e08\uff09\uff1f\u5728UltraLeap\u7684Tom Carter\uff0c\u4ee5\u53ca\u5728\u5f00\u653e\u4eff\u751f\u7684\u4e54\u5c14\u5409\u5e03\u5fb7\u3002\n \u60a8\u8ba4\u4e3a\u8fd9\u5ea7\u57ce\u5e02\u7684\u6280\u672f\u573a\u666f\u5c06\u5728\u4e94\u5e74\u5185\uff1f\u9760\u8fd1\u4f26\u6566\u548c\u5251\u6865\u3002\n  \u54ea\u4e2a\u90e8\u95e8\u662f\u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u751f\u6001\u7cfb\u7edf\u5f3a\u52b2\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u7f3a\u4e4f\u4ec0\u4e48\uff1f\u5e03\u91cc\u65af\u6258\u5c14\u62e5\u6709\u5f3a\u5927\u7684\u751f\u7269\u6280\u672f\uff0c\u91cf\u5b50\uff0c\u6570\u5b57\uff0c\u79d1\u5b66/\u6df1\u5ea6\u79d1\u6280\u751f\u6001\u7cfb\u7edf\u3002\u6211\u662f\u8fd9\u4e2a\u6298\u8877\u7684\u57ce\u5e02\u5174\u594b\uff0c\u6709\u4ee4\u4eba\u5174\u594b\u7684\u4eba\uff0c\u601d\u8003\u4e0d\u540c\u7684\u4eba\u3002\n \u8fd9\u662f\u5e03\u91cc\u65af\u6258\u5c14\u6700\u6709\u8da3\u7684\u521d\u521b\u516c\u53f8\uff1f\u4efb\u4f55qtec\uff0csetsquared\u6216Unitdx\u6210\u5458\u548c\u6821\u53cb\u3002\n \u5e03\u91cc\u65af\u6258\u5c14\u7684\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\uff1f\u4ed6\u4eec\u7684\u7126\u70b9\u662f\u4ec0\u4e48\uff1f\u975e\u5e38\u65e9\u8d77/\u65b0\u751f\uff0c\u5927\u591a\u662f\u5929\u4f7f\u3002 \n\u968f\u7740\u9065\u63a7\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4f60\u8ba4\u4e3a\u4eba\u4eec\u4f1a\u7559\u5728\u5e03\u91cc\u65af\u6258\u5c14\u6216\u4ed6\u4eec\u4f1a\u642c\u51fa\u53bb\u5417\uff1f \u5176\u4ed6\u4eba\u4f1a\u642c\u8fdb\u53bb\u5417\uff1f \u53ef\u80fd\u642c\u8fdb\u6765\uff01 \u7f8e\u4e3d\u7684\u7eff\u8272\u7a7a\u95f4\uff0c\u5f88\u591a\u6709\u8da3\uff0c\u72ec\u7acb\u7684\u5546\u5e97\u3002 \uff08\u6070\u597d\uff09\u4ece\u4f26\u6566\u901a\u52e4\u3002  \u8c01\u662f\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u58eb\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\uff0c\u521b\u59cb\u4eba\uff0c\u5f8b\u5e08\uff0c\u8bbe\u8ba1\u5e08\uff09\uff1f \u5b75\u5316\u5668 -  QTEC\uff0cQTIC\uff0cSetsquared\u548cUnitDX; \u5e03\u91cc\u65af\u6258\u5c14\u79c1\u52df\u80a1\u6743\u4ff1\u4e50\u90e8; Harry DesteCroix\u3002  \u60a8\u8ba4\u4e3a\u8fd9\u5ea7\u57ce\u5e02\u7684\u6280\u672f\u573a\u666f\u5c06\u5728\u4e94\u5e74\u5185\uff1f \u55e1\u55e1\u58f0\u3002 \u66f4\u4f1f\u5927\u7684\u521d\u521b\u516c\u53f8\u548cvcs\u642c\u8fdb\u6765\u3002 ", "note_en": "Bristol proved especially popular among tech investors last year \u2014 local businesses raked in an impressive $414 million in 2020, making it the third-largest U.K. city for tech investment. The city also has the most fintech startups per head in the U.K. outside London, according to  Whitecap\u2019s 2019-2020 Ecosystem Report.\n Efforts by the city\u2019s private and public sectors to modernize the city have helped it rank among the  top smart cities in the U.K., attracting a bevy of tech entrepreneurs. Its proximity to London has meant that it is a good alternative for founders looking for a more affordable stay while letting them tap the capital\u2019s financial resources. The University of Bristol also has the largest robotics department in Europe.\n   Use discount code  HARBOURSIDE to  save 25% off an annual or two-year Extra Crunch membership. This offer is only available to readers in the U.K. and Europe, and expires on August 31, 2021.\n  Bristol is also home to an important startup accelerator,  SETsquared. A collaborative effort by the five universities of Bath, Bristol, Exeter, Southampton and Surrey, the accelerator has supported over 4,000 entrepreneurs and helped their startups raise a total of \u00a31.8 billion. Other startup support players include the new  Science Creates VC fund, set up by entrepreneur  Harry Destecroix,\u00a0and  TechSPARK  Engine Shed.\n Key emerging startups from Bristol include Graphcore, Open Bionics, Ultraleap, Immersive Labs and Five AI.\n To get a better idea of the state of the tech ecosystem and the investor outlook for this city, we surveyed founders, leaders and executives involved in nurturing Bristol\u2019s startup ecosystem.\n The survey revealed that the city has a robust renewable, zero-carbon and fintech startup landscape. Robotics, VR, bio, quantum, digital and deep tech are also areas showing promise. As for the investing scene, although Bristol has a healthy angel network, the city lacks institutional VC, but with London only a drive or train ride away, this has not proved a significant problem.\n     Which sectors is Bristol\u2019s tech ecosystem strong in? What are you most excited by? What does it lack? Bristol is strong in renewable and zero-carbon innovation, fintech and robotics. It\u2019s weak in industry 4.0.\n Which are the most interesting startups in Bristol? Graphcore, LettUs Grow, Open Bionics, Ultraleap and YellowDog.\n What are the tech investors like in Bristol? What\u2019s their focus? A lot of focus on fintech, I think.\n With the shift to remote working, do you think people will stay in Bristol or will they move out? Will others move in? Bristol is a great middle ground between a large dynamic city (plus it\u2019s not far from London) and access to nice countryside area. With remote working we can expect it will attract new residents in the next few years.\n Who are the key startup people in the city (e.g., investors, founders, lawyers, designers)? Aimee Skinner, Abigail Frear and Stuart Harrison.\n Where do you think the city\u2019s tech scene will be in five years? Second major city in U.K. innovation.\n  Which sectors is Bristol\u2019s tech ecosystem strong in? What are you most excited by? What does it lack? Bristol is strong in media/animation, edtech, social impact, health and science. I\u2019m most excited by edtech and the possibility to reach and positively impact millions of students via online learning. It\u2019s weaker in hardware and fintech.\n  What are the tech investors like in Bristol? What\u2019s their focus? There are several very active tech investment networks coming from several angles, e.g., university-led, groups of private angels and tech incubators. The great thing is they all collaborate and share resources, ideas and expertise in initiatives such as The Engine Shed and Silicon Gorge.\n With the shift to remote working, do you think people will stay in Bristol or will they move out? Will others move in? More people are moving in, as Bristol has a great urban lifestyle with easy access to the countryside and Southwest/Wales holiday spots, and an international airport 20 minutes from the center.\n Who are the key startup people in the city (e.g., investors, founders, lawyers, designers)? Jerry Barnes at Bristol PE Club; Abby Frear at TechSPARK; Briony Phillips at Rocketmakers; Jack Jordan-Connelly at SETsquared.\n Where do you think the city\u2019s tech scene will be in five years? It\u2019s developing rapidly with lots of support, so it will be bigger, attracting more investment and definitely more on the international scene five years from now.\n  Which sectors is Bristol\u2019s tech ecosystem strong in? What are you most excited by? What does it lack? Our tech ecosystem is strong in the aerospace and defense sector. We are excited by the scope and scale of digital transformation opportunities with AI available in this sector. The main weakness in this sector is the slow pace of transformation, especially now due to the pandemic.\n  What are the tech investors like in Bristol? What\u2019s their focus? Compared to the U.K. tech sector average, Bristol has a  very low proportion of established companies (4% versus 8%), a higher proportion of seed stage companies (42% versus 37%), and a higher death rate (21% versus 17%). It\u2019s a particularly young ecosystem.\n With the shift to remote working, do you think people will stay in Bristol or will they move out? Will others move in? It is possible that people moving out of London will come into Bristol due to the transport links, strong ecosystem and beautiful nature of the city.\n Where do you think the city\u2019s tech scene will be in five years? I wouldn\u2019t be surprised if Bristol turns out to be San Francisco of Europe!\n  Which sectors is Bristol\u2019s tech ecosystem strong in? What does it lack? Bristol is strong in the medtech, veterinary, industrial sectors.\n With the shift to remote working, do you think people will stay in Bristol or will they move out? Will others move in? Others have moved in.\n  Where do you think the city\u2019s tech scene will be in five years? We will see massive growth in five years.\n  Which sectors is Bristol\u2019s tech ecosystem strong in? What are you most excited by? What does it lack? Our sector is weak in entrepreneurial ambition among researchers, and so suffers from low rates of deep tech spinout activity from leading universities. We are most excited by the step change in activity we have seen in the past two years and culture shift towards innovation.\n  What are the tech investors like in Bristol? What\u2019s their focus? Medium strength in shallow tech; currently weak in deep tech.\n With the shift to remote working, do you think people will stay in Bristol or will they move out? Will others move in? People are moving in.\n Who are the key startup people in the city (e.g., investors, founders, lawyers, designers)? Spin Up Science, Science Creates and Science Angel Syndicate.\n Where do you think the city\u2019s tech scene will be in five years? Very strong in deep tech with an invested local community of entrepreneurs, incubators and investors.\n  Which sectors is Bristol\u2019s tech ecosystem strong in? What are you most excited by? What does it lack? Bristol is strong in wireless (5G, 60 GHz, etc.), semiconductors (especially processors, AI/ML and parallel architectures), robotics and other hard tech/deep tech.\n  What are the tech investors like in Bristol? What\u2019s their focus? It\u2019s limited. There are some angels, but few locally focused funds.\n With the shift to remote working, do you think people will stay in Bristol or will they move out? Will others move in? Much the same: People choose to live in Bristol/Bath for quality of life. Much of the work is already external \u2014 commuting to London.\n Who are the key startup people in the city (e.g., investors, founders, lawyers, designers)? Nigel Toon, Simon Knowles, Stan Boland, David May and Nick Sturge.\n Where do you think the city\u2019s tech scene will be in five years? Much stronger, with more processor and hardware activity.\n  Which sectors is Bristol\u2019s tech ecosystem strong in? What are you most excited by? What does it lack? Bristol has a strong robotics, aerospace and renewables scene. I\u2019m most excited to see how the legacy in aerospace in Bristol will translate to future industry-defining companies. The ecosystem is weak on the investor side, though London VCs are less than a two-hour train journey away.\n  With the shift to remote working, do you think people will stay in Bristol or will they move out? Will others move in? I believe Bristol will become more attractive.\n Who are the key startup people in the city (e.g., investors, founders, lawyers, designers)? Tom Carter at Ultraleap, and Joel Gibbard at Open Bionics.\n Where do you think the city\u2019s tech scene will be in five years? Getting closer to London and Cambridge.\n  Which sectors is Bristol\u2019s tech ecosystem strong in? What are you most excited by? What does it lack? Bristol has a strong biotech, quantum, digital, science-based/deep tech ecosystem. I\u2019m excited by this eclectic city with exciting people that think differently.\n Which are the most interesting startups in Bristol? Any QTEC, SETsquared, or UnitDX members and alumni.\n What are the tech investors like in Bristol? What\u2019s their focus? Very early/nascent, mostly angels.\n With the shift to remote working, do you think people will stay in Bristol or will they move out? Will others move in? Probably move in! Beautiful green spaces around, lots of interesting, independent shops. And (just about) commutable from London.\n Who are the key startup people in the city (e.g., investors, founders, lawyers, designers)? The incubators \u2014 QTEC, QTIC, SETsquared and UnitDX; Bristol Private Equity Club; Harry Destecroix.\n Where do you think the city\u2019s tech scene will be in five years? Buzzing. More great startups and VCs moving in.", "posttime": "2021-06-26 15:17:32", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6df1\u5ea6,leaders,\u6280\u672f", "title": "8\u4e2a\u521b\u59cb\u4eba\uff0c\u9886\u5bfc\u8005\u5f3a\u8c03\u91d1\u878d\u6c14\u548c\u6df1\u5ea6\u6280\u672f\u4f5c\u4e3a\u5e03\u91cc\u65af\u6258\u5c14\u7684\u6700\u9ad8\u9886\u57df ", "title_en": "\n\t\t\t\t8 founders, leaders highlight fintech and deep tech as Bristol\u2019s top sectors\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/06/25/8-founders-leaders-highlight-fintech-and-deep-tech-as-bristols-top-sectors/", "via": "", "real_tags": ["\u6df1\u5ea6", "leaders", "\u6280\u672f"]}, {"category": "", "categoryclass": "", "imagename": "cee1f3a3eb558739b3986835f4ad6078.jpg", "infoid": 1068397, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\n\u7ed3\u6784\u5316\u6c89\u79ef\u7269\u7684\u5178\u578b\u4f8b\u5b50\u7531\u5927Auk\u7684\u8089\u5934\uff08\u9885\u9aa8\u548c\u5599\uff09\u8868\u793a\uff0c\u4ee5\u53ca\u94f0\u63a5\u5f0f\u725b\u690e\u9aa8\u548c\u5b8c\u6574\u7684\u9676\u5668\uff08\u53ef\u80fd\u662f\u5176\u5185\u5bb9\uff09\u7684\u5b8c\u6574\u9676\u5668\uff0c\u6c89\u79ef\u5728Cnip\u7684\u9a7e\u9a76\u5ba4\u5899\u58c1\u540e\u9762\uff0c\u5728\u5218\u6613\u65af\uff08\u82cf\u683c\u5170\uff09\uff0c\u5728BC\u7b2c\u4e09\u4e16\u7eaa\uff08ARMIT Referenc ARMIT2006\uff1a198\uff06AMP\uff09\u7684\u5efa\u7b51\u8fc7\u7a0b\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u201c\u57fa\u91d1\u4f1a\u5b58\u6b3e\u201d\u53ef\u80fd\u5728\u65b0\u5efa\u7b51\u53ca\u5176\u5c45\u6c11\u7684\u5949\u732e\u4e2d\u63d0\u4f9b\u4e86\u4fc3\u8fdb\u4f5c\u7528\u3002 Webley\uff06\uff0339; s\uff08\u53c2\u8003Webley2007\uff09\u5728\u82f1\u56fd\u5357\u90e8\u540e\u671f\u9752\u94dc\u65f6\u4ee3\u5faa\u73af\u9662\u7684\u7814\u7a76\u8868\u660e\uff0c\u5236\u5b9a\u4e86\u7c7b\u4f3c\u7684\u5b58\u6b3e\uff0c\u4ee5\u8868\u793a\u5efa\u7b51\u7269\u7684\u7ec8\u7ed3\uff06\uff0339\u3002\u5706\u5f62\u697c\u5c42\u4f3c\u4e4e\u5df2\u7ecf\u88ab\u5bb6\u5ead\u788e\u7247\u7cbe\u5fc3\u626b\u8fc7\u4e86\uff0c\u63d0\u4f9b\u4e86\u8fdb\u4e00\u6b65\u8bc1\u660e\u67d0\u4e9b\u7269\u54c1\u6545\u610f\u7559\u4e0b\u7684\u3002\u5728\u897f\u5357\u82cf\u683c\u5170\u7684Broxmouth\u7684\u540e\u671f\u94a2\u94c1\u65f6\u4ee3\u6c89\u964d\uff0c\u4f8b\u5982\uff0c\u789f\u5f62\u578b\u6750\u548c\u5185\u58c1\u9762\u7684\u5e95\u5c42\u8bc1\u660e\u4e86\u9891\u7e41\u7684\u626b\u9664\u9020\u6210\u7684\u4fb5\u8680\uff08B\u00fcster\uff06amp; armit\u53c2\u8003b\u00fcster\uff0carmit\uff0carmit\u548cMcKenzie2013;\u56fe1\uff09-A\u4f3c\u4e4e\u5df2\u7ecf\u63d0\u793a\u540e\u7eed\u94fa\u8bbe\u94fa\u780c\u7684\u5730\u677f\u8868\u9762\u3002\n  \u9057\u61be\u7684\u662f\uff0c\u5c06\u8fd9\u79cd\u8bc1\u636e\u6807\u8bb0\u4e3a\u7ed3\u6784\u5316\u5b58\u6b3e\uff0c\u8fd9\u53cd\u8fc7\u6765\u88ab\u7528\u4f5c\u4eea\u5f0f\u884c\u4e3a\u7684\u4ee3\u7406\uff0c\u901a\u5e38\u662f\u89e3\u91ca\u8fc7\u7a0b\u7ed3\u675f\u7684\u5730\u65b9\uff0c\u5e76\u4f7f\u6211\u4eec\u66f4\u63a5\u8fd1\u7406\u89e3\u8fd9\u79cd\u6750\u6599\u6c89\u79ef\u80cc\u540e\u7684\u52a8\u673a\u3002\u8003\u8651\u5230\u66f4\u5e7f\u6cdb\u7684\u201c\u7f13\u5b58\u7269\u4f53\u201d\u8303\u56f4\u5185\u7684\u8fd9\u4e9b\u6c47\u7f16\uff0c\u5e76\u5c06\u81ea\u5df1\u7684\u60c5\u7eea\u4f9d\u604b\u8bc6\u522b\u4e3a\u201c\u4e8b\u7269\u201d\uff08\u4f8b\u5982Bell\uff06amp; Spikins\u53c2\u8003\u94c3\u58f0\u548c\u5c16\u5cf02018\uff09\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u524d\u8fdb\u3002\n \u201c\u7ee7\u7eed\u503a\u5238\u201d\u7406\u8bba\u662f\u7531\u73b0\u4ee3\u4e27\u4eb2\u7814\u7a76\uff08\u4f8b\u5982Klass\u7b49\u4eba\uff09\u5236\u5b9a\u7684\u60b2\u4f24\u7684\u672c\u8d28\u3002\u4f20\u7edf\u65b9\u6cd5\u5f3a\u8c03\u4e86\u5bf9\u6b7b\u8005\u7684\u8131\u79bb\uff08\u5f17\u6d1b\u4f0a\u5fb7\u00b7\u5f17\u6d1b\u4f0a\u5fb7\u3002\u53c2\u8003\u5f17\u6d1b\u4f0a\u5fb7\uff0cStrachey\u548cStrachey1957\uff09\uff0c\u6216\u8005\u65ad\u8a00\u60b2\u4f24\u8fdb\u7a0b\u901a\u8fc7\u4e00\u7cfb\u5217\u5355\u4e00\u7684\u4e00\u7cfb\u5217\u9636\u6bb5\u6765\u6062\u590d\u4e27\u4eb2\u524d\u7684\u5730\u4f4d\uff08Kubler-Ross\u53c2\u8003Kubler-Ross1969; Bownby\u53c2\u8003BowBy1973\uff0c\u53c2\u8003BowBy1980; Worden\u53c2\u8003Worden1991\uff09\u3002\u7136\u800c\uff0c\u60b2\u4f24\u6bd4\u201c\u6062\u590d\u201d\u7684\u7ebf\u6027\u8f68\u8ff9\u66f4\u590d\u6742\uff0c\uff08\u6709\u610f\u8bc6\u6216\u65e0\u610f\u8bc6\u5730\uff09\u4e2a\u4eba\u7ecf\u5e38\u5f62\u6210\u201c\u6301\u7eed\u503a\u5238\u201d\uff0c\u8fd9\u4e9b\u7c7b\u578b\u7684\u7ec8\u8eab\u5173\u7cfb\u6301\u7eed\u5230\u4ed6\u4eec\u7684\u751f\u6d3b\u4e2d\u66f4\u5927\u6216\u66f4\u5c0f\u7684\u5173\u7cfb\uff08 Shuchter\uff06amp; Zisook\u53c2\u8003Shuchter\uff0cZisook\uff0cStroebe\uff0cStroebe\u548cHansson1993\uff1a34;\u4e3a\u4e86\u5728\u8003\u53e4\u80cc\u666f\u4e0b\u5728\u6301\u7eed\u503a\u5238\u7406\u8bba\u4e2d\u7684\u5e94\u7528\uff0c\u8bf7\u53c2\u9605Croucher Reference Croucher2017\uff09\u3002\n \u6700\u8fd1\u7684\u4e00\u9879\u7814\u7a76\u63a2\u8ba8\u4e86\u8003\u53e4\u5b66\u5728\u8ba8\u8bba\u6b7b\u4ea1\uff0c\u6b7b\u4ea1\u548c\u4e27\u4eb2\u7684\u9002\u7528\u6027\uff0c\u533b\u7597\u4fdd\u5065\u4e13\u4e1a\u4eba\u58eb\uff08B\u00fcster\u7b49\u4eba\u53c2\u8003B\u00fcster\uff0c\u559d\u5496\u5561\uff0c\u65e5\u5185\uff0c\u7eff\u8272\u548cFaull2018; Croucher\u7b49\u4eba\u3002\u53c2\u8003\u514b\u529b\uff0cB\u00fcster\uff0c\u65e5\uff0c\u7eff\u8272\uff0cRaynsford\uff0c\u7537\u5b69\u548cFaull2020\uff09\u63ed\u793a\u4e86\u7269\u4f53\u662f\u7ef4\u6301\u6301\u7eed\u503a\u5238\u7684\u6838\u5fc3\uff1a\n \u5f53\u621125\u5c81\u7684\u65f6\u5019\uff0c\u6211\u7684\u5988\u5988\u7a81\u7136\u6b7b\u4e86\uff0c\u5c31\u5728\u5979\u53bb\u4e16\u4e4b\u524d\uff0c\u5979\u4e70\u4e86\u4e00\u5927\u6d74\u7f38[\u9ea6\u82bd\u725b\u5976\u996e\u6599]\uff0c\u5979\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u7ed9\u6211\uff0c\u56e0\u4e3a\u5979\u4e70\u4e86\u4e24\u4e2a\u63d0\u4f9b\u6216\u5176\u4ed6\u4e1c\u897f\uff0c\u6211\u4e0d\u80fd\u6254\u6389\u5b83\u3002\u5b83\u5728\u6a71\u67dc\u91cc\u4e94\u5e74\u4e86\uff01\u5b83\u662f\u575a\u5b9e\u7684\u3002\u4f46\u662f\u56e0\u4e3a\u5979\u4e70\u4e86\u5b83\uff0c\u5b83\u53d8\u5f97\u50cf\u4e00\u4e2a\u4eba\u5de5\u5236\u54c1[...... ......\u6211\u786e\u5b9e\u6254\u6389\u4e86\u5b83\uff0c\u6211\u60f3\u8fd9\u662f\u6211\u901a\u8fc7\u60b2\u4f24\u7684\u8c61\u5f81\uff08\u53c2\u4e0e\u800520\uff0c\u5728B\u00fcster\u7b49\u4eba\u53c2\u8003\u6587\u732eb\u00fcster \uff0c\u8e72\u4f0f\uff0c\u65e5\uff0c\u7eff\u8272\u548cfaull2018\uff1a269\uff09\u3002\n Horlicks-A\u6279\u91cf\u751f\u4ea7\u548c\u5ec9\u4ef7\u7684\u7269\u54c1\uff0c\u7531\u6b7b\u4ea1\u524d\u51e0\u5929\u6536\u8d2d\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u65e5\u5e38\u8d2d\u7269\u65c5\u884c\u7684\u4e00\u90e8\u5206\u662f\u901a\u8fc7\u201c\u793c\u7269\u7ed9\u4e88\u201d\u7684\u884c\u4e3a\uff08\u548c\u65f6\u5e8f\uff09\u8f6c\u53d8\u4e3a\u4e00\u4e2a\u60c5\u7eea\u4e0a\u5145\u7535\u7684\u884c\u4e3a\u4eba\u5de5\u5236\u54c1'\uff1a\u4e24\u4e2a\u751f\u7269\u4e4b\u95f4\u7684\u6700\u540e\u4e00\u4e2a\u7269\u7406\u76f8\u4e92\u4f5c\u7528\u7684\u6750\u6599\u4f53\u73b0\u3002\u5931\u53bb\u7684\u53c2\u4e0e\u8005\u89e3\u91ca\u8bf4\uff0c\u867d\u7136\u4ed6\u4eec\u4e0d\u559c\u6b22Horlicks\uff08\u4e5f\u8bb8\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u6709\u4e0d\u6070\u5f53\u7684\u98df\u7269\uff09\uff0c\u4f46\u4ed6\u4eec\u4e0d\u80fd\u968f\u4fbf\u5730\u5904\u7406\u8fd9\u4e2a\u201c\u4eba\u5de5\u5236\u54c1\u201d\u3002\u8fd9\u4e0d\u518d\u53ea\u662f\u4e00\u7f50\u970d\u6d1b\u514b\u65af\uff1a\u5b83\u5df2\u88ab\u8f6c\u5316\u4e3a\u6df1\u523b\u6709\u95ee\u9898\u7684\u4e1c\u897f\u3002\n \u540c\u6837\u7684\u60c5\u7eea\u4ee5J.Brammer\uff08\u53c2\u8003Brammer2017\uff09\u7684\u8bdd\u6765\u56de\u5e94\uff0c\u5199\u4e0b\u4e86\u6e05\u9664\u5979\u5df2\u6545\u7684\u6bcd\u4eb2\u7684\u8270\u5de8\u4efb\u52a1\uff06\uff0339; \nWarning: Can only detect less than 5000 characters\n\u5728\u4efb\u4f55\u5730\u533a\u6216\u5730\u533a\u7684\u5730\u533a\uff0c\u6d89\u53ca\u575f\u5893\u6316\u6398\u7684\u5730\u533a\u4f20\u7edf\uff0c\u6709\u95ee\u9898\u7684\u4e1c\u897f\u7684\u5904\u7f6e\u53ef\u80fd\u76f8\u5f53\u76f4\u622a\u4e86\u5f53\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4f34\u968f\u7740\u8eab\u4f53\uff08\u6216\u5176\u6b8b\u4f59\u7269\uff09\u7684\u6c89\u79ef\u3002\u4f46\u662f\u5f53\u6ca1\u6709\u575f\u5893\u5b58\u5165\u5b83\u4eec\u65f6\uff0c\u8fd9\u4e9b\u7269\u4f53\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u4f8b\u5982\uff0c\u53f2\u524d\u82f1\u56fd\u7684\u793e\u533a\u4e2d\u6709\u95ee\u9898\u7684\u4e1c\u897f\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u5176\u4e3b\u8981\u7684\u6b7b\u4ea1\u65b9\u5f0f\u6d89\u53ca\u8eab\u4f53\u7684\u5b8c\u5168\u5206\u6563\u901a\u8fc7\u5f39\u6027\uff1f\u4eba\u7c7b\u4ecd\u7136\u662f\u6709\u65f6\u7eb3\u5165\u7ed3\u6784\u6027\u6c89\u79ef\u7269\u3002\u5728\u5c11\u5e74\u57ce\u5821\u7684\u5751\u4e2d\u88ab\u5207\u5272\u7684\u80a1\u9aa8\u7c98\u5408\u5728\u51f9\u5751\u4e2d\uff0c\u591a\u585e\u7279\uff08\u80a1\u7968\u53c2\u8003\u80a1\u4efd2010\uff1a239\uff09\uff0c\u53ea\u63d0\u4f9b\u4e00\u4e2a\u4f8b\u5b50\u3002\u8fd9\u4e9b\u9aa8\u9abc\u80af\u5b9a\u4ee3\u8868\u6b7b\u8005\u7684\u4ee4\u724c\u6b8b\u4f59\uff0c\u4ece\u6563\u843d\u7684\u9057\u9ab8\u4e2d\u6536\u96c6\uff0c\u8fd9\u4e9b\u5c38\u4f53\u7684\u5c38\u4f53\u4ecd\u7136\u662f\u901a\u8fc7\u5f39\u6027\u7684\u5c38\u4f53\uff0c\u4f5c\u4e3a\u9ea6\u80af\u5229\uff08\u53c2\u8003\u9ea6\u80af\u5229\uff0cTarlow\u548cStutz2013\uff1a154\uff09\u7c7b\u4f3c\u5730\u4e89\u8bba\u8fd9\u4e00\u65f6\u671f\u7684\u706b\u846c\u5893\u846c\u3002\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u719f\u6089\u7684\uff0c\u53731500\u5e74BC\u5728\u6b27\u6d32\u5927\u90e8\u5206\u6b27\u6d32\u5728\u6b27\u6d32\u7684\u6b27\u6d32\u8de8\u8d8a\u6b27\u6d32\u7684\u8270\u5de8\u7684\u8fdf\u5230\u4ee4\u4eba\u6cae\u4e27\uff0c\u968f\u7740\u6b66\u5668\u56e4\u79ef\u7684\u589e\u52a0\uff0c\u5f80\u5f80\u662f\u7ecf\u5e38\u76f8\u5173\u7684\u6b66\u5668\u56e4\u79ef\u7684\u589e\u52a0\u4e0e\u5b64\u7acb\u7684\u4eba\u4f53\u9aa8\u9abc\u5e76\u653e\u7f6e\u5728\u6c34\u6027\u4e0a\u4e0b\u6587\u4e2d\uff08Fitzpatrick\u53c2\u8003Fitzpatrick\uff0cCunliffe\u548cMiles1984; Bradley\u53c2\u8003Bradley\u548cFagan1996\uff1a306; Barrett\uff06amp; Createrham\u53c2\u8003Barrett\uff0cCenterham\uff0cBarrett\u548cKinnes1988\uff09\u3002\u76f8\u53cd\uff0c\u6b27\u6d32\u5927\u9646\u6b27\u6d32\u5927\u9646\u4e4c\u5c14\u6d85\u83f2\u5c14\u5fb7\uff08\u5e73\u5893\uff09\u5893\u5730\u7684\u51fa\u73b0\uff08C.1050 BC\uff09\u5728\u6cb3\u6d41\u4e2d\u6c89\u79ef\u7269\u4f53\u7684\u6c89\u79ef\u65f6\u6070\u9022\u4ee4\u4eba\u6cae\u4e27\uff08FO\n...... ", "note_en": "Deliberately deposited (or cached) objects are ubiquitous in the archaeological record, yet they are often classified under different categories, such as hoards, structured deposits, grave goods and cenotaph burials, and interpreted according to different criteria. Drawing on contemporary attitudes to death, dying and bereavement, and using later prehistoric Britain as a case study, this article brings the analysis of these objects together within a single interpretive framework, which asserts that much of this material represents the \u2018problematic stuff\u2019 left behind by the dead. This approach forces us to reconsider the traditional boundaries drawn between different aspects of the archaeological record and demonstrates the value that emotion has in our interpretations of past societies.\n    Copyright \u00a9 The Author(s), 2021. Published by Cambridge University Press on behalf of Antiquity Publications Ltd.\n  Various labels are assigned to the deliberately deposited objects recognised in the archaeological record, including hoards, structured deposits and grave goods. Hoards, often comprising metal objects, are usually defined on the basis of their isolated contexts and the perceived quality or quantity of their contents (e.g. Bradley  et al.   Reference Bradley, Haselgrove, Linden and Webley2013: 209). They are traditionally given over to finds specialists. In contrast, grave goods accompanying the dead, inhumed or cremated, lie within the realm of funerary archaeology. Finally, \u2018structured deposition\u2019 is a catch-all term given to objects cached in other contexts, often found on settlement sites, for example, in pits, ditches and buildings (cf. Hill   Reference Hill1995). Although these categories of objects are interpreted as the residue of ritual activity, the nature of such ritual behaviour is understood to be distinct in each case. The high material value of hoards leads to the interpretation of their deposition either for safe keeping or, more often, as propitiatory offerings (Bradley   Reference Bradley and Fagan1996: 305). Meanwhile, our tendency to focus on the human body relegates grave goods to the role of  accompanying the dead, either for use in the afterlife or as dedications by mourners (e.g. Parker Pearson   Reference Parker Pearson1999: 7). Structured deposits\u2014by nature a generic category\u2014have been interpreted in more varied and less specific ways (for an overview, see Garrow   Reference Garrow2012). The addition of descriptive terms to highlight differences in composition and depositional context\u2014for example, deliberate, formal, placed, ritual, selected, special, token (Brudenell &amp; Cooper   Reference Brudenell and Cooper2008: 15\u201316)\u2014adds yet more categories.\n The classification of assemblages described above, based on non-mutually exclusive characteristics, has created unhelpful divisions that hinder our understanding. Structured deposits that include disarticulated human bone, but which are found in settlements, for example, fall outside the focus of mainstream funerary archaeology, while groups of \u2018bodiless objects\u2019 within cemeteries\u2014that is, those objects which appear never to have accompanied the deposition of a body\u2014are frequently categorised as \u2018cenotaphs\u2019 (e.g. Nilsson Stutz &amp; Tarlow   Reference Nilsson Stutz, Tarlow, Tarlow and Nilsson Stutz2013: 6) in recognition of their probable mortuary associations. Such distinctions have served to elevate the presence of the physical remains of the human body over other types of material, and have thus limited the scope of our interpretations (Brudenell &amp; Cooper   Reference Brudenell and Cooper2008: 25\u201329). With this in mind, I discuss these various assemblage classes under the umbrella term \u2018cached object\u2019 (see Archaeological Institute of America  2020).\n Using later prehistoric Britain as a case study, I use contemporary theories of death, dying and bereavement to suggest that cached objects frequently represent the careful deposition of \u2018problematic stuff\u2019 left behind by the dead. This recognition is not intended to identify new types of deposit, nor necessarily to replace existing interpretations, but rather to unite previously divided materials under a common interpretive lens. The objective is to demonstrate that \u2018emotional value\u2019 is a legitimate consideration in our understanding of \u2018cached\u2019 objects in the archaeological record.\n In contrast to the monumental ritual landscapes of the preceding periods, the archaeological record of later prehistoric Britain, from around 1800 BC, is predominantly \u2018domestic\u2019 in character (Br\u00fcck   Reference Br\u00fcck1995: 245). With rare regional exceptions (e.g. the Arras Culture in East Yorkshire and the Aylesford-Swarling Culture in south-east England; Stead   Reference Stead1991; Fitzpatrick   Reference Fitzpatrick2007), visible normative burial rites and dedicated funerary monuments are rare (see Harding   Reference Harding2016). There are few formal cemeteries from this period and human remains are elusive. If recovered at all, bones are usually isolated and frequently deposited in settlement contexts (Br\u00fcck   Reference Br\u00fcck1995; Armit   Reference Armit, Bradbury and Scarre2017). Indeed, it seems likely that most of the dead were excarnated\u2014defleshed and disarticulated by natural or artificial means (Carr &amp; Kn\u00fcsel   Reference Carr, Kn\u00fcsel, Gwilt and Haselgrove1997)\u2014rather than interred in graves. At this time settlements became the focus of ritual activity, and the artefacts we find on such sites probably represent selective deposition, rather than the product of casual loss and discard (e.g. Hill   Reference Hill1995; Bradley   Reference Bradley2005: 33 &amp; 208\u2013209).\n This selectivity is indicated by the unusual distributions of artefacts on later prehistoric settlements in Britain, and the frequent occurrence of \u2018structured deposits\u2019: a catch-all term for caches of objects and animal bones (and occasionally human remains; Br\u00fcck   Reference Br\u00fcck1995; Armit   Reference Armit, Bradbury and Scarre2017) that were carefully selected and deposited in specific places (e.g. in ditch terminals, roundhouse entrance postholes, pits) at specific times. The term was originally coined in reference to an apparent patterning in the deposition of objects (such as pottery, bone and flint) at Neolithic ritual monuments (Richards &amp; Thomas   Reference Richards, Thomas, Bradley and Gardiner1984), but has since been adopted more widely to describe a variety of cached objects on domestic sites (e.g. Hill   Reference Hill1995).\n A typical example of a structured deposit is represented by the fleshed head (cranium and beak) of a great auk, along with articulated cattle vertebrae and a complete pottery vessel (possibly with its contents), deposited behind the wall of a wheelhouse at Cnip, on Lewis (Scotland), during its construction in the third century BC (Armit   Reference Armit2006: 198 &amp; 220\u201321). In this instance, this \u2018foundation deposit\u2019 presumably served a propitiatory role in the dedication of the new building and its inhabitants. Webley&#39;s (  Reference Webley2007) study of Late Bronze Age roundhouses in southern England demonstrates that similar deposits were made to signify the end of a building&#39;s life. Roundhouse floors appear to have been meticulously swept clean of domestic debris, providing further evidence that certain objects were deliberately left behind. At the Late Iron Age settlement at Broxmouth in south-east Scotland, for example, dished floor profiles and the undercutting of inner wall-faces attest to the erosion caused by frequent sweeping-out (B\u00fcster &amp; Armit   Reference B\u00fcster, Armit, Armit and McKenzie2013;  Figure 1)\u2014a process that appears to have prompted the subsequent laying of paved floor surfaces.\n  Unfortunately, the labelling of such evidence as structured deposits, which in turn is used as a proxy for ritual behaviour, is often where the interpretive process ends, and brings us no closer to understanding the motives behind the deposition of this material. Considering these assemblages within a broader spectrum of \u2018cached objects\u2019 and recognising our own emotional attachment to \u2018things\u2019 (e.g. Bell &amp; Spikins   Reference Bell and Spikins2018) may, however, help us to move forward.\n \u2018Continuing bonds\u2019 theory was developed by modern bereavement studies (e.g. Klass  et al.   Reference Klass, Silverman and Nickman1996; Walter   Reference Walter1996; Stroebe  et al.   Reference Stroebe, Abakoumkin, Stroebe and Schut2012), growing out of a dissatisfaction with common perceptions of the nature of grief. Traditional approaches emphasised the need for detachment from the deceased (Freud trans.   Reference Freud, Strachey and Strachey1957), or asserted that the grieving process progressed through a unilinear series of stages towards the restoration of a pre-bereavement status quo (Kubler-Ross   Reference Kubler-Ross1969; Bowlby   Reference Bowlby1973,   Reference Bowlby1980; Worden   Reference Worden1991). Grief, however, is far more complex than a linear trajectory of \u2018recovery\u2019, and (consciously or unconsciously) individuals often form \u2018continuing bonds\u2019 with the dead\u2014new types of relationships that endure to a greater or lesser extent throughout their lives (Shuchter &amp; Zisook   Reference Shuchter, Zisook, Stroebe, Stroebe and Hansson1993: 34; for the application of continuing bonds theory in an archaeological context, see Croucher   Reference Croucher2017).\n A recent study exploring the applicability of archaeology in discussions of death, dying and bereavement with healthcare professionals (B\u00fcster  et al.   Reference B\u00fcster, Croucher, Dayes, Green and Faull2018; Croucher  et al.   Reference Croucher, B\u00fcster, Dayes, Green, Raynsford, Boyes and Faull2020) reveals that objects are central to the maintenance of continuing bonds:\n my mum died very suddenly when I was 25 [\u2026] and just before she died, she&#39;d bought a big tub of Horlicks [a malted-milk drink powder] which she gave to me for some reason, because she bought two on offer or something, and I could not throw this away. It was in the cupboard for five years! And it was solid. But because she&#39;d bought it, it became like an artefact [\u2026] I did throw it away in the end, I suppose it was a symbol of my getting through the grief (participant 20, in B\u00fcster  et al.   Reference B\u00fcster, Croucher, Dayes, Green and Faull2018: 269).\n The jar of Horlicks\u2014a mass-produced and inexpensive item, acquired by the deceased only days before their death as part of a routine shopping trip\u2014was transformed through the act (and timing) of \u2018gift-giving\u2019 into an emotionally charged \u2018artefact\u2019: the material embodiment of the last physical interaction between two living individuals. The bereaved participant explained that, although they did not like Horlicks (and perhaps it would have felt inappropriate to consume it in any case), they could not casually dispose of this \u2018artefact\u2019. This was no longer  just a jar of Horlicks: it had been transformed into something deeply problematic.\n The same sentiments are echoed in the words of J. Brammer (  Reference Brammer2017), writing about the difficult task of clearing out her late mother&#39;s house:\n So, when is a doily not a doily? When it goes from being one of my mother&#39;s kitsch furniture accessories when she was alive, into a sacred reminder of her homeliness now that she&#39;s gone [\u2026] The significance of the doilies and anything she had touched, grew overnight [\u2026] I decided to honour her by framing and hanging them so her story could be woven into the walls of my home.\n Here we see previously old-fashioned and \u2018unnecessary\u2019 ephemera taking on new meanings and becoming problematic, not because of their material or aesthetic value, but because of their mnemonic power. If we accept the possibility for emotional attachment to even the most mundane objects, then, as Brudenell and Cooper (  Reference Brudenell and Cooper2008: 24) point out, \u201c any attempt to define rigid criteria for identifying \u2018special\u2019 deposits may ultimately miss the point\u201d.\n There are many examples in the archaeological record of attempts to maintain continuing bonds with the dead, not least in the erection of large funerary monuments that served as mnemonic devices for the living. Equally visible, particularly as structured deposits, but perhaps as yet unrecognised, is the disposal of the problematic stuff that bound the living and the dead together: material that was too entwined with the social identity of the dead to be reused by the living, yet too symbolically charged for casual discard as part of normal processes of waste management.\n The material value of certain artefacts has long been recognised, as signified, for example, through cultural preferences for particular raw materials, the time and skill involved in the manufacture of certain objects, or their rare and exotic nature. It is this form of value that is often prioritised in our understanding and categorisation of hoards. Increasingly, however, materiality (e.g. Meskell   Reference Meskell2005) and biographical (e.g. Gosden &amp; Marshall   Reference Gosden and Marshall1999; Joy   Reference Joy2009) approaches to the study of artefacts have also championed the symbolic value that certain objects may have possessed as material manifestations of distant lands, the product of technological transformations or their embodiment of other (intangible) properties. Interpretations of this nature often influence our understandings of grave goods. But recognition of problematic stuff as a legitimate and powerful response to even the most mundane objects, such as the aforementioned jar of Horlicks, dictates that we include another important value category in our discussion and interpretation: emotion ( Figure 2). It is through this lens that we might better understand the ritual behaviours that led to the caching of objects in the archaeological record. It is, of course, not necessarily the case that any object chosen for or warranting deposition in a controlled and structured way embodies a single value category. Indeed, once such artefacts are brought together, the resulting assemblages will themselves take on new meanings. But it is important to recognise the raw emotional power that everyday objects can acquire at certain times and places.\n In the few areas of Iron Age Britain where a normative visible burial rite exists, bodies are often associated with artefacts (grave goods). The inhumations and chariot burials of the Arras Culture of East Yorkshire, for example, contain some of the most spectacular objects known from this period, including brooches featuring enamel and coral inlay, and elaborate necklaces of glass and amber (Giles   Reference Giles2012). Many of these items presumably belonged to the deceased, or were sufficiently entwined with their social identity to necessitate removal from circulation upon their death.\n Yet, it is not just those items worn on the body that can assume problematic status. We must also consider other categories of artefact ( Figure 3). Objects also become problematic through their association  with the dead body, via, for example, their use in post-mortem care and mortuary rites. This category of object may well be represented by the toilet instruments (e.g. tweezers, nail cleaners and ear scoops) found in graves at Mill Hill (Deal), King Harry Lane (St Albans) and Biddenham Loop (near Bedford) in southern England, and at Arras and Wetwang Slack in East Yorkshire (Harding   Reference Harding2016: 179\u201380), as well as in later prehistoric graves on the Continent (Fontijn   Reference Fontijn2002: 200\u2013201). Notably, these objects have also been recovered from structured deposits in regions in which formal graves are absent: the nail-cleaner built into the wall of \u2018Hut II\u2019 at Hownam Rings in the Scottish Borders (Piggott   Reference Piggott1948: 211) represents one such example. Then come the items owned by the deceased: objects such as those represented in the modern-day quotations presented above. Analogies for these different categories of object have precedence elsewhere. In the medieval Christian church, for example, relics could comprise the physical remains of a saint&#39;s body (\u2018first class\u2019), objects owned or used by a saint (\u2018second class\u2019), or objects that had touched a first- or second-class relic (\u2018third-class\u2019) (Jestice   Reference Jestice and Jestice2004: 887).\n  We could also add an additional tier of problematic stuff: the artefacts associated with the past lives of those still living, such as previous social states transcended through certain rites of passage, or objects that represent \u201cthe paraphernalia of a specific kind of personhood\u201d (Fontijn   Reference Fontijn2002: 217). In a modern context, this might manifest itself in the reluctance of parents, for example, to dispose of the infant clothes of grown-up children, with one social media user lamenting that \u201cI have a bag for charity and a bag called \u2018I&#39;m not ready to let go yet\u2019\u201d. Other examples might include the retention by adults of teenage clothes that no longer fit or are no longer fashionable, or of cassette tapes that can no longer be played. While such phenomena will be difficult to recognise in the archaeological record, they might be glimpsed, for example, in the inclusion of worn-out objects or miniatures in (adult) graves. Miniature items are often interpreted as \u2018votives\u2019 (e.g. Green   Reference Green1987). Using a different interpretive lens, however, there is no reason to discount the possibility that such objects might represent a cherished childhood toy, such as the diminutive sword in its wooden scabbard found in the grave of two adults at the Roman cemetery of Cranmer House, Canterbury (Bennett   Reference Bennett, Frere, Bennett, Rady and Stow1987: 66). Problematic stuff might also be evidenced by the inclusion of adult-sized objects in children&#39;s graves; that is, objects\u2014such as the three copper rings interred with a child at Barrow Hills in Oxfordshire (Br\u00fcck   Reference Br\u00fcck2004: 314)\u2014that were destined for individuals who did not live long enough to wear them.\n In any region or period with mortuary traditions that involved the digging of graves, the disposal of problematic stuff would potentially have been fairly straightforward, as it could have accompanied the deposition of the body (or its remnants). But what happened to these objects when there was no grave in which to deposit them? What happened to problematic stuff in the communities of later prehistoric Britain, for example, whose predominant mode of disposal of the dead involved the complete dispersal of the body through excarnation? Human remains are themselves sometimes incorporated into structured deposits. The femur interred with a weaving comb and copper alloy fibula in a pit at Maiden Castle, Dorset (Sharples   Reference Sharples2010: 239), provides just one example. These bones surely represent \u2018token\u2019 remnants of the deceased, collected from the scattered remains of bodies that had been defleshed and disarticulated through excarnation, as McKinley (  Reference McKinley, Tarlow and Stutz2013: 154) similarly argues for cremation graves of this period. With this in mind, it is perhaps unsurprising that a downturn in the construction of barrows, and the associated interment of bodies and grave goods, across much of Europe after 1500 BC coincides with an increase in the deposition of weapon hoards, which are frequently associated with isolated human bones and placed in watery contexts (Fitzpatrick   Reference Fitzpatrick, Cunliffe and Miles1984; Bradley   Reference Bradley and Fagan1996: 306; Barrett &amp; Needham   Reference Barrett, Needham, Barrett and Kinnes1988). Conversely, the emergence of large Urnfield (flat grave) cemeteries across continental Europe in the Late Bronze Age ( c. 1050 BC) coincides with a downturn in the deposition of objects in rivers (Fo\n......", "posttime": "2021-06-26 15:10:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f13\u5b58,stuff,\u53c2\u8003", "title": "'\u6709\u95ee\u9898\u7684\u4e1c\u897f'\uff1a\u6b7b\u4ea1\uff0c\u8bb0\u5fc6\u548c\u7f13\u5b58\u5bf9\u8c61\u7684\u89e3\u91ca ", "title_en": "\u2018Problematic stuff\u2019: death, memory and the interpretation of cached objects", "transed": 1, "url": "https://www.cambridge.org/core/journals/antiquity/article/problematic-stuff-death-memory-and-the-interpretation-of-cached-objects/FEFB14E4C357F336710BA78CF27048AF", "via": "", "real_tags": ["\u7f13\u5b58", "stuff", "\u53c2\u8003"]}, {"category": "", "categoryclass": "", "imagename": "75a9cc1b6393d9a1e22cbfa337298e13.png", "infoid": 1068396, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f7f\u7528\u903b\u8f91\u65f6\u95f4\u6233\u4f5c\u4e3a\u503c\u7684\u7248\u672c\uff0c\u4ee5\u5141\u8bb8\u8de8\u670d\u52a1\u5668\u6392\u5e8f\u503c\n  \u5f53\u5b58\u50a8\u5728\u591a\u4e2a\u670d\u52a1\u5668\u4e0a\u7684\u503c\u65f6\uff0c\u9700\u8981\u4e00\u79cd\u4e86\u89e3\u5728\u53e6\u4e00\u4e2a\u4e4b\u524d\u5b58\u50a8\u7684\u503c\u5b58\u50a8\u7684\u65b9\u5f0f\u3002\u65e0\u6cd5\u4f7f\u7528\u7cfb\u7edf\u65f6\u95f4\u6233\uff0c\u56e0\u4e3a\u58c1\u65f6\u949f\u4e0d\u662f\u4e24\u4e2a\u4e0d\u540c\u670d\u52a1\u5668\u7684\u5355\u8c03\u548c\u65f6\u949f\u503c\u4e0d\u5e94\u8fdb\u884c\u6bd4\u8f83\u3002\n \u8868\u793a\u5f53\u5929\u65f6\u95f4\u7684\u7cfb\u7edf\u65f6\u95f4\u6233\u7531\u901a\u5e38\u7528\u6676\u4f53\u632f\u8361\u5668\u6784\u5efa\u7684\u65f6\u949f\u673a\u68b0\u6d4b\u91cf\u3002\u8fd9\u79cd\u673a\u5236\u7684\u5df2\u77e5\u95ee\u9898\u662f\uff0c\u57fa\u4e8e\u6676\u4f53\u632f\u8361\u7684\u5feb\u901f\u6216\u6162\u901f\uff0c\u5b83\u53ef\u4ee5\u8fdc\u79bb\u5f53\u5929\u7684\u5b9e\u9645\u65f6\u95f4\u3002\u4e3a\u4e86\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u8ba1\u7b97\u673a\u901a\u5e38\u5177\u6709\u50cfNTP\u8fd9\u6837\u7684\u670d\u52a1\uff0c\u5b83\u540c\u6b65\u4e92\u8054\u7f51\u4e0a\u5177\u6709\u4f17\u6240\u5468\u77e5\u7684\u65f6\u95f4\u6e90\u7684\u8ba1\u7b97\u673a\u65f6\u949f\u3002\u56e0\u6b64\uff0c\u7ed9\u5b9a\u670d\u52a1\u5668\u4e0a\u7cfb\u7edf\u65f6\u95f4\u7684\u4e24\u4e2a\u8fde\u7eed\u8bfb\u6570\u53ef\u4ee5\u6709\u65f6\u95f4\u5012\u9000\u3002\n \u7531\u4e8e\u8de8\u670d\u52a1\u5668\u7684\u65f6\u949f\u6f02\u79fb\u6ca1\u6709\u4e0a\u9650\uff0c\u56e0\u6b64\u65e0\u6cd5\u6bd4\u8f83\u4e24\u4e2a\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4e0a\u7684\u65f6\u95f4\u6233\n mvccstore mvccstore; Lamportclock\u65f6\u949f;\u516c\u5171\u670d\u52a1\u5668\uff08mvccstore mvccstore\uff09{this.clock =\u65b0\u7684Lamportclock\uff081\uff09;\u8fd9\u4e2a.mvccstore = mvccstore; }\n \u6bcf\u5f53\u670d\u52a1\u5668\u6267\u884c\u4efb\u4f55\u5199\u5165\u64cd\u4f5c\u65f6\uff0c\u5b83\u5e94\u8be5\u4f7f\u7528`tick\uff08\uff09`\u65b9\u6cd5\u524d\u8fdbLAMPORT\u65f6\u949f\n   \u8fd9\u6837\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u786e\u5b9a\u5728\u8bf7\u6c42\u4e4b\u540e\u6309\u4e0b\u5199\u5165\uff0c\u5e76\u4e14\u5728\u4efb\u4f55\u5176\u4ed6\u64cd\u4f5c\u4e4b\u540e\u670d\u52a1\u5668\u5df2\u7ecf\u6267\u884c\u4e86\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u7531\u5ba2\u6237\u542f\u52a8\u3002\u670d\u52a1\u5668\u8fd4\u56de\u7528\u4e8e\u5c06\u503c\u5199\u5165\u5ba2\u6237\u7aef\u7684\u65f6\u95f4\u6233\u3002\u7136\u540e\uff0c\u8bf7\u6c42\u5ba2\u6237\u7aef\u4f7f\u7528\u6b64\u65f6\u95f4\u6233\u5bf9\u5176\u4ed6\u670d\u52a1\u5668\u8fdb\u884c\u4efb\u4f55\u8fdb\u4e00\u6b65\u5199\u5165\u3002\u8fd9\u6837\uff0c\u7ef4\u6301\u8bf7\u6c42\u7684\u56e0\u679c\u94fe\u3002 \n\u8003\u8651\u4f7f\u7528\u591a\u4e2a\u670d\u52a1\u5668\u8282\u70b9\u7684\u7b80\u5355\u952e\u503c\u5b58\u50a8\u7684\u793a\u4f8b\u3002\u6709\u4e24\u4e2a\u670d\u52a1\u5668\uff0c\u84dd\u8272\u548c\u7eff\u8272\u3002\u6bcf\u4e2a\u670d\u52a1\u5668\u90fd\u8d1f\u8d23\u5b58\u50a8\u7279\u5b9a\u7684\u952e\u7ec4\u3002\u5f53\u6570\u636e\u5728\u4e00\u7ec4\u670d\u52a1\u5668\u4e0a\u5212\u5206\u6570\u636e\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u65b9\u6848\u3002\u4f7f\u7528LAMPORT\u65f6\u95f4\u6233\u4f5c\u4e3a\u7248\u672c\u53f7\u5b58\u50a8\u4e3a\u7248\u672c\u503c\u7684\u503c\u3002\n   \u63a5\u6536\u670d\u52a1\u5668\u5bf9\u5176\u81ea\u5df1\u7684\u65f6\u95f4\u6233\u8fdb\u884c\u6bd4\u8f83\u548c\u66f4\u65b0\u5e76\u4f7f\u7528\u5b83\u6765\u7f16\u5199\u7248\u672c\u5316\u7684\u952e\u503c\u3002 public int write\uff08string key\uff0cstring\u503c\uff0cint equestimestamp\uff09{//\u66f4\u65b0\u81ea\u5df1\u7684\u65f6\u949f\u6765\u53cd\u6620\u56e0\u679c\u5173\u7cfbint writeattimestamp = clock.tick\uff08equestTimestamp\uff09; mvccstore.put\uff08\u65b0\u7248\u672c\u7684key\uff08key\uff0cwriteattimestamp\uff09\uff0c\u503c\uff09;\u8fd4\u56dewriteattimestamp; }\n \u7528\u4e8e\u5199\u5165\u8be5\u503c\u7684\u65f6\u95f4\u6233\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u5ba2\u6237\u7aef\u901a\u8fc7\u66f4\u65b0\u81ea\u5df1\u7684\u65f6\u95f4\u6233\u6765\u8ddf\u8e2a\u6700\u5927\u65f6\u95f4\u6233\u3002\u5b83\u4f7f\u7528\u6b64\u65f6\u95f4\u6233\u6765\u53d1\u51fa\u4efb\u4f55\u8fdb\u4e00\u6b65\u7684\u5199\u5165\u3002\n  Lamportclock\u65f6\u949f=\u65b0\u7684Lamportclock\uff081\uff09; public void write\uff08\uff09{int server1writtenat = server1.write\uff08\uff06\uff0334;\u59d3\u540d\uff06\uff0334;\uff06\uff0334; alice\uff06\uff0334;\uff0cclock.getlatesttime\uff08\uff09\uff09; clock.updateto\uff08server1writtenat\uff09; int server2writtenat = server2.write\uff08\uff06\uff0334;\u6807\u9898\uff06\uff0334; servervices\uff06\uff0334;\uff0cclock.getlatesttime\uff08\uff09\uff09; clock.updateto\uff08server2writtenat\uff09; asserttrue\uff08server2writtenat\uff06gt; server1writtenat\uff09; }\n    \u5373\u4f7f\u5ba2\u6237\u7aef\u4e0e\u5e26\u6709\u9886\u5bfc\u8005\u548c\u8ffd\u968f\u8005\u7ec4\u7684\u9886\u5bfc\u8005\u901a\u4fe1\u7684\u5f53\u5ba2\u6237\u7aef\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u6709\u76f8\u540c\u7684\u6280\u672f\u4e5f\u9002\u7528\u4e8e\u7279\u5b9a\u952e\u3002\u5ba2\u6237\u5411\u672c\u96c6\u56e2\u7684\u9886\u5bfc\u8005\u53d1\u9001\u8bf7\u6c42\uff0c\u5982\u4e0a\u6240\u8ff0\u3002 LAMPORT\u65f6\u949f\u5b9e\u4f8b\u7531\u8be5\u7ec4\u7684\u9886\u5bfc\u8005\u7ef4\u62a4\uff0c\u5e76\u4e14\u53ef\u4ee5\u66f4\u65b0\u4e0e\u4e0a\u4e00\u8282\u4e2d\u8ba8\u8bba\u7684\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u3002\n Lamport\u65f6\u949f\u5b58\u50a8\u7684\u503c\u4ec5\u90e8\u5206\u6392\u5e8f\u3002\u5982\u679c\u4e24\u4e2a\u5ba2\u6237\u7aef\u5b58\u50a8\u4e24\u4e2a\u5355\u72ec\u7684\u670d\u52a1\u5668\u4e2d\u7684\u503c\uff0c\u5219\u65f6\u95f4\u6233\u503c\u4e0d\u80fd\u7528\u4e8e\u5728\u670d\u52a1\u5668\u4e0a\u6392\u5e8f\u3002\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0cBob\u4e0a\u7684Bob\u5b58\u50a8\u7684\u6807\u9898\u5728\u65f6\u95f4\u62332\u5904\u3002\u4f46\u662f\u5982\u679cBob\u5b58\u50a8\u5728Alice\u4e0a\u6216\u5728Server Blue\u4e0a\u7684\u540d\u79f0\u4e2d\u5b58\u50a8\u4e86\u540d\u79f0\u4e4b\u540e\uff0c\u5219\u65e0\u6cd5\u786e\u5b9a\u3002\n \u5bf9\u4e8e\u5355\u4e2a\u9886\u5bfc\u8005 - \u8ddf\u968f\u670d\u52a1\u5668\u7ec4\uff0c\u5176\u4e2d\u4e00\u4e2a\u9886\u5bfc\u8005\u603b\u662f\u8d1f\u8d23\u5b58\u50a8\u503c\uff0c\u7248\u672c\u5316\u503c\u4e2d\u8ba8\u8bba\u7684\u57fa\u672c\u5b9e\u73b0\u8db3\u4ee5\u7ef4\u62a4\u56e0\u679c\u5173\u7cfb\u3002 \n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u952e\u503c\u5b58\u50a8\u53ef\u4ee5\u4fdd\u7559\u6574\u6570\u7b26\u53f7\u3002 \u6bcf\u6b21\u4ece\u5199\u5bfc\u5411\u65e5\u5fd7\u5e94\u7528\u952e\u503c\u5199\u547d\u4ee4\u65f6\uff0c\u5b83\u4f1a\u9012\u589e\u7248\u672c\u8ba1\u6570\u5668\u3002 \u7136\u540e\u5b83\u7528\u9012\u589e\u7248\u672c\u8ba1\u6570\u5668\u6784\u9020\u65b0\u5bc6\u94a5\u3002 \u53ea\u6709\u9886\u5bfc\u8005\u8d1f\u8d23\u9012\u589e\u7248\u672c\u8ba1\u6570\u5668\uff0c\u8ffd\u968f\u8005\u4f7f\u7528\u76f8\u540c\u7684\u7248\u672c\u53f7\u3002  int\u7248\u672c= 0; mvccstore mvccstore = new mvccstore\uff08\uff09; @Override\u516c\u5171\u5b8c\u6210\u80a5\u6599\uff06lt;\u54cd\u5e94\uff06gt; \u653e\uff08\u5b57\u7b26\u4e32\u952e\uff0c\u5b57\u7b26\u4e32\u503c\uff09{return server.propose\uff08new setvalueCommand\uff08key\uff0cvalue\uff09\uff09; \u79c1\u4eba\u54cd\u5e94applysetvaluecommand\uff08setvaluecommand setvaluecommand\uff09{getlogger\uff08\uff09\u3002\u4fe1\u606f\uff08\uff06\uff0334;\u8bbe\u7f6e\u952e\u503c\uff06\uff0334; + setvalueCommand\uff09; \u7248\u672c=\u7248\u672c+ 1; mvccstore.put\uff08\u65b0\u7248\u672c\u7684key\uff08setvaluecommand.getkey\uff08\uff09\uff0c\u7248\u672c\uff09\uff0csetvaluecommand.getValue\uff08\uff09\uff09; \u54cd\u5e94\u54cd\u5e94= response.success\uff08\u7248\u672c\uff09; \u56de\u590d\u54cd\u5e94; }  \u6570\u636e\u5e93\u5982[MongoDB]\u548c[\u87d1\u8782]\u4f7f\u7528Lamport\u65f6\u949f\u7684\u53d8\u578b\u6765\u5b9e\u73b0[MVCC]\u5b58\u50a8 ", "note_en": "Use logical timestamps as a version for a value to allow ordering of values across servers\n  When values are stored across multiple servers, there needs to be a way to know which values were stored before the other. The system timestamp can not be used, because  wall clocks are not monotonic and clock values from two different servers should not be compared.\n The system timestamp, which represents the time of the day, is measured by a clock machinery generally built with an crystal oscillator. The known problem with this mechanism is that it can drift away from the actual time of the day, based on how fast or slow the crystals oscillate. To fix this, computers typically have a service like  NTP which synchronizes computer clocks with well known time sources on the internet. Because of this, two consecutive readings of the system time on a given server can have time going backwards.\n As there is no upper bound on clock drift across servers, it is impossible to compare timestamps on two different servers\n MVCCStore mvccStore; LamportClock clock; public Server(MVCCStore mvccStore) { this.clock = new LamportClock(1); this.mvccStore = mvccStore; }\n Whenever a server carries out any write operation, it should advance the Lamport Clock, using the `tick()` method\n   This way, the server can be sure that the write is sequenced after the request and after any other action the server has carried out since the request was initiated by the client. The server returns the timestamp that was used for writing the value to the client. The requesting client then uses this timestamp to issue any further writes to other set of servers. This way, the causal chain of requests is maintained.\n  Consider an example of a simple key value store with multiple server nodes. There are two servers, Blue and Green. Each server is responsible for storing a specific set of keys. This is a typical scenario when data is partitioned across a set of servers. Values are stored as  Versioned Value with the Lamport Timestamp as a version number.\n   The receiving server compares and updates its own timestamp and uses it to write a versioned key value.   public int write(String key, String value, int requestTimestamp) { //update own clock to reflect causality  int writeAtTimestamp = clock.tick(requestTimestamp); mvccStore.put(new VersionedKey(key, writeAtTimestamp), value); return writeAtTimestamp; }\n The timestamp used for writing the value is returned to the client. The client keeps track of the maximum timestamp, by updating its own timestamp. It uses this timestamp to issue any further writes.\n  LamportClock clock = new LamportClock(1); public void write() { int server1WrittenAt = server1.write(&#34;name&#34;, &#34;Alice&#34;, clock.getLatestTime()); clock.updateTo(server1WrittenAt); int server2WrittenAt = server2.write(&#34;title&#34;, &#34;Microservices&#34;, clock.getLatestTime()); clock.updateTo(server2WrittenAt); assertTrue(server2WrittenAt &gt; server1WrittenAt); }\n    The same technique works even when the client is communicating with a leader with  Leader and Followers groups, with each group responsible for specific keys. The client sends requests to the leader of the group as detailed above. The Lamport Clock instance is maintained by the leader of the group, and is updated exactly the same way as discussed in the previous section.\n The values stored by Lamport Clock are only  partially ordered. If two clients store values in two separate servers, the timestamp values cannot be used to order the values across servers. In the following example, the title stored by Bob on server Green is at timestamp 2. But it can not be determined if Bob stored the title before or after Alice stored the name on server Blue.\n For a single leader-follower group of servers, where a leader is always responsible for storing values, the basic implementation discussed in  Versioned Value is enough to maintain causality.\n   In this case, the key value store keeps an integer version counter. It increments the version counter every time the key value write command is applied from the Write Ahead Log. It then constructs the new key with the incremented version counter. Only the leader is responsible for incrementing the version counter, and followers use the same version number.\n  int version = 0; MVCCStore mvccStore = new MVCCStore(); @Override public CompletableFuture&lt;Response&gt; put(String key, String value) { return server.propose(new SetValueCommand(key, value)); } private Response applySetValueCommand(SetValueCommand setValueCommand) { getLogger().info(&#34;Setting key value &#34; + setValueCommand);  version = version + 1; mvccStore.put(new VersionedKey(setValueCommand.getKey(), version), setValueCommand.getValue()); Response response = Response.success(version); return response; }\n Databases like  [mongodb] and  [cockroachdb] use variants of the Lamport Clock to implement  [mvcc] storage", "posttime": "2021-06-26 15:10:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "lamport,\u5b58\u50a8", "title": "Lamport\u65f6\u949f ", "title_en": "Lamport Clock", "transed": 1, "url": "https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html", "via": "", "real_tags": ["lamport", "\u5b58\u50a8"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068395, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u514b\u91cc\u65af\u6258\u5f17\u00b7\u8bfa\u5170\u7684\u6bcf\u4e00\u4e2a\u7c89\u4e1d\u90fd\u77e5\u9053\u4efb\u4f55\u597d\u7684\u9b54\u672f\u4f0e\u4fe9\u90fd\u6709\u4e09\u4e2a\u884c\u4e3a\u3002\u7b2c\u4e00\u4e2a\u884c\u4e3a\u662f\u627f\u8bfa\uff0c\u9b54\u672f\u5e08\u505a\u4e00\u4e9b\u666e\u901a\u7684\u4e8b\u60c5\u3002\u7136\u540e\u8f6c\u5f2f\uff0c\u666e\u901a\u53d8\u5f97\u975e\u51e1\u3002\u7b2c\u4e09\u7ae0\u662f\u5a01\u671b\uff0c\u56de\u5f52\u975e\u51e1\u7684\u666e\u901a\u3002\n \u4e3a\u4e86\u907f\u514d\u4f7f\u7528\u8d2d\u4e70\uff0c\u501f\u7528\uff0c\u501f\u7528\uff0c\u6b7b\uff0c\u7f8e\u56fd\u5fc5\u987b\u6709\u8db3\u591f\u7684\u94b1\u6295\u8d44\u5347\u503c\u8d44\u4ea7\u3002\u5e7f\u6cdb\u6295\u8d44\u7684\u8d44\u4ea7\u901a\u5e38\u5728\u901a\u8d27\u81a8\u80c0\u540e\u6bcf\u5e74\u7684\u589e\u957f\u81f3\u5c11\u4e3a3\uff05\uff0c\u8fd9\u610f\u5473\u7740\u6295\u8d44200\u4e07\u7f8e\u5143\uff0c\u4e3a\u7f8e\u56fd\u5bb6\u5ead\u85aa\u6c34\u4e2d\u4f4d\u6570\u63d0\u4f9b\u7ea660,000\u7f8e\u5143\u7684\u5e74\u5ea6\u88ab\u52a8\u6536\u5165\u3002 1000\u4e07\u7f8e\u5143\u6295\u8d44\u89c4\u5b9a\u4e86300,000\u7f8e\u5143\u7684\u5e74\u5ea6\u88ab\u52a8\u6536\u5165\uff0c\u8fd9\u8fdb\u5165\u4e8690\u767e\u5206\u4f4d\u6570\u7684\u6536\u5165\u8005\u3002\u8fd9\u662f\u901a\u8fc7\u6295\u8d44\u8005\u7684\u52aa\u529b\u83b7\u5f97\u7684\u3002\u5982\u679c\u7eb3\u7a0e\u4eba\u5728\u6536\u5230\u5b83\u4eec\u65f6\u9500\u552e\u8fd9\u4e9b\u6536\u76ca\uff0c\u90a3\u4e48\u5979\u5c06\u652f\u4ed8\u8d44\u672c\u83b7\u5f97\u7a0e\u3002 \uff08\u5df2\u7ecf\u6bd4\u6b63\u5e38\u6536\u5165\u7387\u8f83\u4f4e\uff09\n \u901a\u8fc7\u4f7f\u7528\u8fd9\u4e00\u6218\u7565\uff0c\u6211\u4eec\u7684\u7231\u56fd\u7f8e\u56fd\u516c\u6c11\u751a\u81f3\u4e0d\u9700\u8981\u652f\u4ed8\u8f83\u4f4e\u7684\u8d44\u672c\u6536\u76ca\u7a0e\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u53ef\u4ee5\u548c\u5e73\u5730\u6297\u8bae\u7f8e\u56fd\u653f\u5e9c\u7684\u538b\u8feb\u7a0e\u5236\uff0c\u5c06\u9053\u8def\u548c\u533b\u9662\u548c\u516c\u5171\u6559\u80b2\u7684\u8d39\u7528\u727a\u7272\u5230\u5176\u8f83\u4f4e\u7684\u4e0a\u884c\u7684\u540c\u884c\uff0c\u800c\u662f\u5728\u8270\u82e6\u7684\u4f11\u5047\u548c\u6e38\u8247\u4e0a\u5ea6\u8fc7\u8d22\u5bcc\u3002\n  \u8fd9\u4e2a\u795e\u5947\u4f0e\u4fe9\u7684\u7b2c\u4e00\u4e2a\u884c\u4e3a\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u7684\u7231\u56fd\u7f8e\u56fd\u516c\u6c11\u5360\u636e\u4e86\u4ed6\u4eec\u7684\u9057\u4f20\u8d22\u5bcc\uff0c\u5e76\u8d2d\u4e70\u4e86\u5347\u503c\u8d44\u4ea7\u3002 100 000,000\u7f8e\u5143\u7684\u9057\u4f20\u901a\u5e38\u4f1a\u63d0\u4f9b\u81f3\u5c11600,000\u7f8e\u5143\u7684\u6536\u76ca\uff0c\u5176\u4e2d\u5927\u7ea6300,000\u7f8e\u5143\u5c06\u88ab\u633d\u6551\uff0c\u4ee5\u4fbf\u57fa\u91d1\u968f\u7740\u901a\u8d27\u81a8\u80c0\u800c\u589e\u957f\uff0c\u7559\u4e0b30\u4e07\u7f8e\u5143\u7684\u6536\u5165\uff08\u4ee5\u901a\u8d27\u81a8\u80c0\u589e\u957f\uff0c\u800c\u7701\u53bb\u4e86300,000\u7f8e\u5143\uff09\u3002\u4f46\u90a3\u6ca1\u6709\u51fa\u552e;\u7b2c\u4e00\u6b65\u662f\u4e70\uff0c\u4e0d\u5356\u3002\n  \u7b2c\u4e8c\u5e55\u4e5f\u5f88\u7b80\u5355\u3002\u6211\u4eec\u7684\u7231\u56fd\u7f8e\u56fd\u516c\u6c11\u73b0\u5728\u5e0c\u671b\u4ece\u4e0a\u9762\u7684\u6536\u5165\u4e2d\u82b1\u8d39300,000\u7f8e\u5143\uff0c\u903b\u8f91\u4e0a\u7684\u610f\u601d\u662f\u9500\u552e\u6536\u76ca\u5e76\u652f\u4ed815\uff05\u7684\u8d44\u672c\u6536\u76ca\u7684\u6536\u5165\u7a0e\u3002\n \u901a\u8fc7\u64a4\u56de300,000\u7f8e\u5143\u7684\u503a\u52a1\uff0c\u7231\u56fd\u7f8e\u56fd\u516c\u6c11\u5728\u6b64\u8f6c\u53d8\u4e3a\u975e\u51e1\u7684\u666e\u901a\u4eba\uff08\u8d44\u672c\u6536\u76ca300,000\u7f8e\u5143\uff09\u3002\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u5979\u5df2\u7ecf\u907f\u514d\u4e86\u4eca\u5e74\u7684\u8d44\u672c\u6536\u76ca\u7a0e\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5c1a\u672a\u88ab\u9500\u552e\uff0c\u56e0\u6b64\u672a\u7ecf\u9500\u552e\uff0c\u5e76\u4e14\u5979\u907f\u514d\u5411\u503a\u52a1\u7f34\u7eb3\u7a0e\u6b3e\uff0c\u56e0\u4e3a\u503a\u52a1\u4e0d\u5f81\u7a0e\u3002\u5c3d\u7ba1\u5728\u5979\u7684\u8d44\u4ea7\u5347\u503c\u4e2d\u652f\u4ed8\u4e8630\u4e07\u7f8e\u5143\uff0c\u4f46\u5979\u4eca\u5e74\u6ca1\u6709\u7a0e\u6536\u3002\n \u8fd9\u90e8\u5206\u4f0e\u4fe9\u6bcf\u5e74\u90fd\u91cd\u590d\uff0c\u76f4\u5230\u662f\u6700\u7ec8\u884c\u4e3a\u7684\u65f6\u5019\u3002 \n\u6211\u4eec\u7684\u7231\u56fd\u7f8e\u56fd\u516c\u6c11\u5141\u8bb8\u5979\u672a\u5b9e\u73b0\u7684\u6536\u76ca\u79ef\u7d2f\u5728\u5979\u751f\u547d\u7684\u8fc7\u7a0b\u4e2d\u3002\u8fd9\u5e94\u8be5\u610f\u5473\u7740\u4ed6\u4eec\u7ec8\u4e8e\u5356\u51fa\u7684\u65f6\u5019\u90fd\u5f81\u7a0e\uff0c\u4f46\u5176\u4e2d\u8c0e\u8a00\u7684\u6700\u540e\u4e00\u4f4d\u624b;\u4ed6\u4eec\u4ece\u672a\u51fa\u552e\u8fc7\u3002\u76f8\u53cd\uff0c\u7231\u56fd\u7f8e\u56fd\u516c\u6c11\u6b7b\u4ea1\uff0c\u4ecd\u7136\u62e5\u6709\u8d44\u4ea7\u3002\n \u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u975e\u5e38\u91cd\u8981\u7684\u53d8\u5f97\u666e\u901a\u3002\u6b23\u8d4f\u7684\u8d44\u4ea7\u73b0\u5728\u59cb\u7ec8\u5904\u4e8e\u52a0\u5927\uff0c\u6e05\u6d17\u672a\u5b9e\u73b0\u7684\u6536\u76ca\u3002\u7136\u540e\uff0c\u4ed6\u4eec\u6ca1\u6709\u4efb\u4f55\u5185\u7f6e\u7a0e\u6536\uff0c\u6240\u4ee5\u9057\u4ea7\u5c31\u603b\u91d1\u989d\u6ca1\u6709\u7a0e\u6536\uff0c\u5305\u62ec\u521d\u59cb\u6295\u8d44\uff0c\u4e5f\u4e0d\u662f\u8d44\u4ea7\u7684\u5347\u503c\u3002\u7136\u540e\uff0c\u5e84\u56ed\u5229\u7528\u8d44\u4ea7\u7684\u8d5e\u8d4f\u507f\u8fd8\u503a\u52a1\u3002\u6821\u957f\u4ecd\u7136\u5b58\u5728\u3002\n \u56e0\u6b64\uff0c\u7ed3\u679c\u662f\u6ca1\u6709\u7a0e\u6536\u7684\u751f\u547d\u3002\u901a\u8fc7\u5347\u503c\uff0c\u989d\u5916\u8d22\u5bcc\u63d0\u4f9b\u4e86\u4e3b\u8981\u6295\u8d44\uff0c\u8fd9\u662f\u503a\u52a1\u7231\u56fd\u7f8e\u56fd\u516c\u6c11\u7684\u989d\u5916\u8d22\u5bcc\u3002\u5f53\u7231\u56fd\u7f8e\u56fd\u516c\u6c11\u6b7b\u4ea1\u65f6\uff0c\u6574\u4e2a\u8d22\u5bcc\u90fd\u9500\u552e\uff0c\u514d\u7a0e\uff0c\u503a\u52a1\u662f\u901a\u8fc7\u514d\u7a0e\u6536\u76ca\u652f\u4ed8\u7684\u3002\u6821\u957f\u4ecd\u7136\u662f\u6211\u4eec\u7684\u7231\u56fd\u7f8e\u56fd\u516c\u6c11\u7684\u540e\u4ee3\uff0c\u4ed6\u4eec\u5c06\u9075\u5faa\u4e70/\u501f\u7528/\u6b7b\u4ea1\uff0c\u4ee5\u907f\u514d\u7f34\u7eb3\u8fd9\u4e9b\u6295\u8d44\u7684\u6536\u5165\u7a0e\u3002 ", "note_en": "Every fan of Christopher Nolan knows that any good magic trick contains three acts. The first act is the pledge, where the magician does something ordinary. Then comes the turn, where the ordinary becomes extraordinary. The third act is the prestige, returning the extraordinary to the ordinary.\n In order to avoid taxation using Buy, Borrow, Die, an American must first have enough money to invest in appreciating assets.  Broadly invested assets often provide at least 3% growth every year after inflation, which means that $2 Million invested provides an annual passive income of about $60,000, the median American household salary. $10 Million invested provides approximately an annual passive income of $300,000, which is well into the 90th percentile of earners.  This is gained through no effort of the investor. If the taxpayer sells these gains as she receives them, then she will pay capital gains taxes. (already a lower rate than the normal income rates)\n By using this strategy, our Patriotic American Citizens don\u2019t even need to pay the lower capital gains taxes. Instead, they can peacefully protest the American government\u2019s oppressive taxation regime, leaving the expense of roads and hospitals and public education to their less-propertied counterparts, instead spending their wealth on hard-earned vacations and yachts.\n  The first act of this magic trick is very simple. Our Patriotic American Citizen takes their hard-inherited wealth and buys appreciating assets. $10,000,000 inherited will usually provide at least $600,000 in gains, approximately $300,000 of which will be saved so that the fund grows with inflation, leaving $300,000 of income (which grows with inflation, because the other $300,000 is saved). But that is not sold; the first step is  buy, not  sell.\n  The second act is also very simple. Our Patriotic American Citizen now wants to spend her $300,000 in income from above, which logically would mean selling the gains and paying 15% capital gains taxes on their income.\n The Patriotic American Citizen here turns the ordinary ( spending $300,000 in capital gains) into the extraordinary by withdrawing $300,000 in debt. By doing so, she has avoided paying taxes this year on her capital gains, because they have not been sold and are therefore unrealized, and she has avoided paying taxes on the debt because debt is not taxed.  She has paid no taxes this year, despite spending the $300,000 in appreciation of her assets.\n This part of the trick is repeated every year, until it is time for the final act.\n  Our Patriotic American Citizen has allowed her unrealized gains to accumulated over the course of her life. This should mean that they are all taxed when they are finally sold, but therein lies the final sleight of hand; they are never sold. Instead, the Patriotic American Citizen dies, still owning the assets.\n At this point, the extraordinary again becomes the ordinary. The appreciated assets are now at a stepped-up basis, washing away the unrealized gains. They are then sold, without any built-in taxes, so the estate pays  no taxes on the total amount, including not only the initial investment but also the appreciation of the asset. The estate then uses the appreciation of the assets to pay off the debt. The principal remains.\n The result, therefore, is a life without taxes. The principal investment provides, through appreciation, additional wealth, which the Patriotic American Citizen then matches in debt. When the Patriotic American Citizen dies, the whole wealth is sold, tax-free, and the debt is paid with the tax-free proceeds. The principal remains and is invested for the descendants of our Patriotic American Citizen, who will follow  Buy/Borrow/Die in order to avoid paying taxes on their income from these investments.", "posttime": "2021-06-26 15:10:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u501f\u6765,borrow,\u6295\u8d44", "title": "\u4e70\uff0c\u501f\u6765\uff0c\u6b7b ", "title_en": "Buy, Borrow, Die", "transed": 1, "url": "https://www.peoplestaxpage.org/buy-borrow-die", "via": "", "real_tags": ["\u501f\u6765", "borrow", "\u6295\u8d44"]}, {"category": "", "categoryclass": "", "imagename": "09a2785173e2a3d8fd72b13f8c104b98.jpg", "infoid": 1068394, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5341\u5e74\u524d\uff0c\u4eba\u7c7b\u5b66\u5bb6\u5728\u897f\u4f2f\u5229\u4e9a\u7684Denisova\u6d1e\u7a74\u4e2d\u53d1\u73b0\u4e86\u4e00\u7fa4\u672a\u77e5\u7684\u4e00\u7fa4\u672a\u77e5\u706d\u7edd\u7684\u4eba\u7c7b\u7684\u5316\u77f3\u7c89\u7ea2\u8272\u3002\u672c\u96c6\u56e2\u7684\u8363\u8a89\u88ab\u547d\u540d\u4e3a\u201cDenisovans\u201d\u3002\u73b0\u5728\uff0c\u5bf9\u6d1e\u7a74\u571f\u58e4\u4e2d\u7684DNA\u8fdb\u884c\u4e86\u5e7f\u6cdb\u7684\u5206\u6790\uff0c\u63ed\u793a\u4e86\u5b83\u4e5f\u4e3e\u529e\u4e86\u73b0\u4ee3\u4eba\u7c7b - \u8c01\u65e9\u65e9\u5230\u8fbe\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u4eec\u53ef\u80fd\u66fe\u7ecf\u5728\u90a3\u91cc\u4f4f\u5728\u90a3\u91cc\uff0c\u5728\u90a3\u91cc\u53f8\u6cd5\u548c\u5c3c\u5b89\u5fb7\u7279\u4eba\u3002\n \u65b0\u7684\u7814\u7a76\u201c\u7ed9\u4e88\u4e86[\u7814\u7a76\u5458]\u524d\u6240\u672a\u6709\u7684\u6d1e\u5bdf\u529b\uff0c\u201d\u54e5\u672c\u54c8\u6839\u5927\u5b66\u5206\u5b50\u53e4\u751f\u5b66\u5bb6Mikkel Winther Pedersen\u8bf4\uff0c\u54e5\u672c\u54c8\u6839\u5927\u5b66\u7684\u5206\u5b50\u53e4\u751f\u5b66\u5bb6\u90fd\u6ca1\u6709\u53c2\u4e0e\u8fd9\u9879\u5de5\u4f5c\u3002 \u201c\u5b83\u5b57\u9762\u4e0a\u8868\u660e\u4e86\u4ed6\u4eec\u53ea\u80fd\u5728\u5047\u8bbe\u4e2d\u8fdb\u884c\u4e86\u4ec0\u4e48\u3002\u201d\n \u4f17\u6240\u5468\u77e5\uff0c\u4eba\u7c7b - \u5305\u62ec\u5c3c\u5b89\u5fb7\u7279\u4eba\u548c\u4e39\u5c3c\u65af\u74e6\u5c14\u65af\u81f3\u5c11\u5360\u636e\u4e86Denisova Cave\u81f3\u5c11300\u4e07\u5e74\u3002\u5728\u516b\u4e2a\u4eba\u4f53\u5316\u77f3\u4e2d\u51fa\u571f\u7684\u662f\u6709\u5c0f\u6307\uff0c\u6765\u81ea\u5c3c\u5b89\u5fb7\u7279\u4eba\u7684\u4e09\u4e2a\u9aa8\u5934\uff0c\u751a\u81f3\u4e00\u4e2a\u6765\u81ea\u4e00\u4e2a\u5c3c\u5b89\u5fb7\u7279\u4eba\u548c\u4e00\u4e2adenisovan\u7236\u6bcd\u7684\u5b69\u5b50\u3002\u6d1e\u7a74\u8fd8\u542b\u6709\u7cbe\u81f4\u7684\u77f3\u6750\u5de5\u5177\u548c\u73e0\u5b9d\uff0c\u8f83\u9ad8\u6c34\u5e73\u3002\u4f46\u6ca1\u6709\u53d1\u73b0\u73b0\u4ee3\u4eba\u4f53\u5316\u77f3\u3002\u90a3\u4e9b\u6587\u7269\uff0c\u5bf9\u6765\u81ea\u8fd9\u4e9b\u9aa8\u9abc\u7684DNA\u7684\u5e7f\u6cdb\u7814\u7a76\uff0c\u751a\u81f3\u4ece\u571f\u58e4\u4e2d\u7684DNA\u65e9\u671f\u7814\u7a76\u90fd\u5de9\u56fa\u4e86\u6d1e\u7a74\u5bf9\u62fc\u51d1\u4eba\u7c7b\u6f14\u53d8\u7684\u91cd\u8981\u6027\u3002\n \u4f46\u662f\uff0c\u516b\u4e2a\u5316\u77f3\u4e0d\u591a\u7ee7\u7eed\uff0c\u6240\u4ee5\u57c3\u7433\u5a1c\u624e\u74e6\u62c9\u662fMax Planck\u8fdb\u5316\u4eba\u7c7b\u5b66\u7814\u7a76\u6240\u7684\u7814\u7a76\u751f\uff0c\u4ee5\u53ca\u4e0e\u4fc4\u7f57\u65af\u7814\u7a76\u4eba\u5458\u5408\u4f5c\u7684\u540c\u4e8b\uff0c\u770b\u770b\u4e09\u8154\u6d1e\u7684\u571f\u58e4\u4e2d\u5b58\u5728\u4ec0\u4e48\u6837\u7684DNA \uff08\u89c1\u4e0b\u9762\u7684\u89c6\u9891\uff09\u3002\n \u7814\u7a76\u4eba\u5458\u4e00\u76f4\u5728\u7814\u7a76\u4ece\u571f\u58e4\u4e2d\u5206\u79bb\u7684DNA\u8d85\u8fc740\u5c81\uff0c\u5305\u62ec\u6765\u81eaPermafrost\u7684DNA\uff0c\u4f46\u53ea\u6709\u5728\u8fc7\u53bb4\u5e74\u4e2d\u53ea\u6709\u4efb\u4f55\u4eba\u53d1\u73b0\u53e4\u4ee3\u571f\u58e4\u4e2d\u706d\u7edd\u7684\u4eba\u7c7b\u7684DNA\u3002\n \u7814\u7a76\u4eba\u5458\u4e0e\u6b64\u524d\u5df2\u7ecf\u8fc7\u6d1e\u7a74\u7684\u53e6\u4e00\u4e2a\u4e13\u5bb6\u56e2\u961f\u5408\u4f5c\uff0c\u7814\u7a76\u4eba\u5458\u6316\u51fa\u4e86728\u79cd\u571f\u58e4\u6837\u54c1\u3002\u7ecf\u8fc72\u5e74\u7684\u5206\u6790\uff0c\u5176\u4e2d\u5b83\u4eec\u5206\u79bb\u5e76\u6d4b\u5e8f\u6837\u54c1\uff0c\u7814\u7a76\u4eba\u5458\u5728\u5176\u4e2d175\u4e2d\u53d1\u73b0\u4e86\u4eba\u7c7bDNA\u3002\u8fd9\u4f7f\u5f97\u7814\u7a76\u201c\u6700\u5927\uff0c\u6700\u5177\u7cfb\u7edf\u6027\uff0c\u6700\u5177\u7cfb\u7edf\u6027\uff0c\u201dMax Planck\u79d1\u5b66\u5bb6\u7684\u8003\u53e4\u79d1\u5b66\u5bb6Katerina Douka\u8868\u793a\uff0c\u8fd9\u662f\u4eba\u7c7b\u5386\u53f2\u79d1\u5b66\u5bb6\u7684\u8003\u53e4\u79d1\u5b66\u5bb6\uff0c\u4ed6\u6ca1\u6709\u53c2\u4e0e\u5de5\u4f5c\u3002\n    \u8fd9\u4e9b\u6570\u636e\u63ed\u793a\u4e86\u4e00\u79cd\u590d\u6742\u7684\u4eba\u7c7b\u548c\u52a8\u7269\u5c45\u6240\u7684\u5386\u53f2\uff0c\u4e0d\u540c\u7684\u7fa4\u4f53\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0cZavala\u548c\u5979\u7684\u540c\u4e8b\u5728\u81ea\u7136\u754c\u4e2d\u642c\u5230\u4e86\u6d1e\u7a74\u3002\u4ed6\u4eec\u7684\u5de5\u4f5c\u8bc1\u5b9e\uff0cDenisovans\u662f\u6d1e\u7a74\u7684\u7b2c\u4e00\u4e2a\u4eba\u7c7b\u5c45\u6c11\uff0c\u5927\u7ea6300\u4e07\u5e74\u524d\u3002\u4ed6\u4eec\u572813\u4e07\u5e74\u524d\u6d88\u5931\u4e86\uff0c\u53ea\u6709\u4e00\u4e2a\u4e0d\u540c\u7684Denisovans\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u5236\u9020\u8bb8\u591a\u77f3\u5de5\u5177\uff0c\u5927\u7ea630,000\u5e74\u540e\u3002 Neanderthals\u5728\u5927\u7ea617\u4e07\u5e74\u524d\u51fa\u73b0\u5728\u73b0\u573a\uff0c\u5728\u5404\u79cd\u5404\u6837\u7684\u65f6\u95f4\u70b9\u4f7f\u7528\u4e0d\u540c\u7684\u7fa4\u4f53\uff0c\u4e0eDenisovans\u6709\u4e9b\u91cd\u53e0\u3002 \n\u6700\u540e\u4e00\u4e2a\u5230\u8fbe\u7684\u662f\u73b0\u4ee3\u4eba\u7c7b\uff0c\u4ed6\u5728\u5927\u7ea645,000\u5e74\u524d\u51fa\u73b0\u3002\u7814\u7a76\u4eba\u5458\u62a5\u544a\u4e86\u4e0e\u6765\u81ea\u6240\u6709\u4e09\u4e2a\u4eba\u7c7b\u7fa4\u4f53\u7684DNA\u5bf9\u5e94\u7684\u571f\u58e4\u5c42\u3002 \u201c\u6bcf\u5c42\u7684\u65f6\u95f4\u6bb5\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u5177\u4f53\u8bf4\u4ed6\u4eec\u91cd\u53e0\u662f\u5426\u4e0e\u5426\uff0c\u201d\u624e\u74e6\u62c9\u8bf4\u3002\u4f46\u662f\uff0cDouka\u8865\u5145\u9053\uff0c\u201c\u6211\u65e0\u6cd5\u60f3\u5230\u53e6\u4e00\u4e2a\u5730\u65b9\uff0c\u5176\u4e2d\u4e09\u79cd\u4eba\u7c7b\u8fc7\u4e8e\u65f6\u95f4\u3002\u201d\n \u9274\u4e8e\u73e0\u5b9d\u548c\u590d\u6742\u7684\u6587\u7269\u5728\u540e\u6765\u7684\u5c42\u91cc\uff0c\u4e00\u4e9b\u7814\u7a76\u4eba\u5458\u6d89\u5acc\u73b0\u4ee3\u3002\u4f46\u6ca1\u6709\u4eba\u77e5\u9053\u4ed6\u4eec\u65e9\u572845,000\u5e74\u524d\u5c31\u5230\u8fbe\u4e86 - \u6211\u4eec\u90fd\u4e0e\u6211\u4eec\u7684\u4e24\u79cd\u53e4\u8001\u7684\u8868\u5144\u5f1f\u91cd\u53e0\u4e86\u3002 \u201c\u5b83\u5efa\u8bae\u5728\u7ef4\u4e5f\u7eb3\u5927\u5b66\u7684\u8fdb\u5316\u4eba\u7c7b\u5b66\u5bb6\u4e4b\u95f4\u5efa\u8bae\u53e4\u8001\u548c\u73b0\u4ee3\u4eba\u7c7b\u4e4b\u95f4\u66f4\u52a0\u590d\u6742\u7684\u76f8\u4e92\u4f5c\u7528\u3002\u201d\u7ef4\u4e5f\u7eb3\u5927\u5b66\u7684\u8fdb\u5316\u4eba\u7c7b\u5b66\u5bb6\u7f57\u6069\u00b7\u5e15\u8428\u65af\u8bf4\u3002\n \u571f\u58e4\u6837\u54c1\u8fd8\u4ea7\u751f\u6765\u81ea\u8bb8\u591a\u52a8\u7269\u7684DNA\u3002\u5927\u7ea617\u4e07\u5e74\u524d\uff0c\u6c14\u5019\u4ece\u66f4\u6e29\u6696\u5230\u5bd2\u51b7\uff0c\u5c3c\u5b89\u5fb7\u7279\u4eba\u642c\u8fdb\u53bb\uff0c\u6240\u4ee5\u4e0d\u540c\u7684\u9b23\u72d7\u548c\u718a\u3002\n Pinhasi\u8bf4\uff0c\u8fd9\u662f\u6765\u81ea\u5316\u77f3\u548c\u571f\u58e4\u6837\u672c\u7684\u57fa\u56e0\u7ec4\u6570\u636e\u7684\u7ec4\u5408\uff0c\u771f\u6b63\u4f7f\u65b0\u5de5\u4f5c\u8131\u9896\u800c\u51fa\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u8d85\u7ea7\u5316\u7684\u65b9\u5411[\u672a\u6765\u7684\u5de5\u4f5c]\u3002\u201d Douka\u540c\u610f\uff0c\u5e76\u8bf4\u65b0\u7684\u7814\u7a76\u5e94\u8be5\u5e2e\u52a9\u53e4\u4ee3\u571f\u58e4DNA\u6210\u4e3a\u201c\u4e3b\u6d41\u8003\u53e4\u5de5\u5177\u201d\u3002\u5979\u5df2\u7ecf\u60ca\u8bb6\u4e8e\u5b83\u7684\u8fdb\u5c55\uff0c\u5373\u4e0e\u5176\u4ed6\u7814\u7a76\u76f8\u7ed3\u5408\uff0c\u4f7f\u5f97\u6210\u4e3a\u53ef\u80fd\u3002 \u201c\u8ba9\u6211\u4eec\u4e0d\u8981\u5fd8\u8bb0\uff0c\u5c3d\u7ba1\u5982\u6b64\uff0c\u57282010\u5e74\u6211\u4eec\u7edd\u5bf9\u6ca1\u6709\u8bc1\u636e\u8868\u660eDenisovans\u5b58\u5728\uff0c\u800c\u8fd9\u4e9b\u5404\u79cd\u6bcd\u4eb2\u89c1\u8fc7\uff0c\u66f4\u4e0d\u7528\u8bf4\u4ed6\u4eec\u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u64b0\u5199\u4e86\u53cd\u590d\u548c\u5171\u5b58\u3002\u201d ", "note_en": "A decade ago, anthropologists shocked the world when they discovered a  fossil pinkie bone from a then-unknown group of extinct humans in Siberia\u2019s Denisova Cave. The group was named \u201cDenisovans\u201d in its honor. Now, an extensive analysis of DNA in the cave\u2019s soils reveals it also hosted modern humans\u2014who arrived early enough that they may have once lived there alongside Denisovans and Neanderthals.\n The new study \u201cgives [researchers] unprecedented insight into the past,\u201d says Mikkel Winther Pedersen, a molecular paleoecologist at the University of Copenhagen who was not involved with the work. \u201cIt literally shows what [before] they have only been able hypothesize.\u201d\n Humans\u2014including Neanderthals and Denisovans\u2014are known to have occupied Denisova Cave for at least 300,000 years. Among the eight human fossils unearthed there are the pinkie, three bones from Neanderthals, and even one from a child  with one Neanderthal and one Denisovan parent. The cave also contains sophisticated stone tools and jewelry at higher, later levels. But no modern human fossils have been found there. Those artifacts,  extensive studies of DNA from these bones, and even  one early study of DNA from soils have cemented the cave\u2019s importance for piecing together human evolution.\n But eight fossils are not much to go on, so Elena Zavala, a graduate student at the Max Planck Institute for Evolutionary Anthropology, and colleagues teamed up with Russian researchers to see what kind of DNA was present in the soils of the three-chamber cave (see video, below).\n Researchers have been studying DNA isolated from soils for more than 40 years, including  sequencing DNA from permafrost, but only in the past 4 years has anyone  found DNA from extinct humans in ancient soils.\n Working with another team of experts who had previously  dated the layers of the cave, the researchers dug out 728 soil samples. After 2 years of analysis, in which they isolated and sequenced the samples, the researchers found human DNA in 175 of them. That makes the study \u201cthe largest and most systematic of its kind,\u201d says Katerina Douka, an archaeological scientist at the Max Planck Institute for the Science of Human History who was not involved in the work.\n    The data reveal\u00a0 a complex history of human and animal habitation, with different groups moving in and out of the cave over time, Zavala and her colleagues report today in\u00a0 Nature. Their work confirms that Denisovans were the cave\u2019s first human inhabitants, about 300,000 years ago. They disappeared 130,000 years ago, only to be followed by a different group of Denisovans, who likely made many of the stone tools, some 30,000 years later. Neanderthals appeared on the scene about 170,000 years ago, with different groups using the cave at various points in time, some overlapping with the Denisovans.\n The last to arrive were modern humans, who showed up about 45,000 years ago. The soil layer that corresponds with that period contained DNA from all three human groups, the researchers report. \u201cThe time periods [of each layer] are quite large, so we can\u2019t concretely say if they overlapped or not,\u201d Zavala says. But, Douka adds, \u201cI cannot think of another site where three human species lived through time.\u201d\n Given the jewelry and sophisticated artifacts in later layers, some researchers had\u00a0 suspected moderns\u00a0had been there. But no one knew they had arrived as early as 45,000 years ago\u2014and overlapped with both of our archaic cousins. \u201cIt suggests a more complicated interplay between archaic and modern humans,\u201d says Ron Pinhasi, an evolutionary anthropologist at the University of Vienna who was not involved with the work.\n The soil samples also yielded DNA from many species of animals. About 170,000 years ago, the climate went from warmer to colder, and Neanderthals moved in, so did different species of hyenas and bears.\n It\u2019s the combination of genomic data from both the fossils and the soil samples that really makes the new work stand out, Pinhasi says. \u201cIt\u2019s a superpromising direction [for future work].\u201d Douka agrees, and says the new study should help ancient soil DNA become \u201ca mainstream archaeological tool.\u201d She is already amazed at the progress that it, combined with other studies, has made possible. \u201cLet\u2019s not forget that as recently as in 2010 we had\u00a0absolutely no evidence that Denisovans existed, and that these various hominins ever met, let alone that they interbred\u00a0repeatedly\u00a0and co-existed for millennia,\u201d she wrote in an email.", "posttime": "2021-06-26 15:09:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d1e\u7a74,cave,\u4eba\u7c7b", "title": "\u897f\u4f2f\u5229\u4e9a\u6d1e\u7a74\u4e3b\u6301\u4e86Neanderthals\uff0cDenisovans\u548c\u73b0\u4ee3\u4eba\u7c7b ", "title_en": "Siberian cave hosted Neanderthals, Denisovans, and modern humans", "transed": 1, "url": "https://www.sciencemag.org/news/2021/06/ancient-siberian-cave-hosted-neanderthals-denisovans-and-modern-humans-possibly-same", "via": "", "real_tags": ["\u6d1e\u7a74", "cave", "\u4eba\u7c7b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068393, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters", "note_en": "{ &#34;tiddlers&#34;: { &#34;$:/Acknowledgements&#34;: { &#34;title&#34;: &#34;$:/Acknowledgements&#34;, &#34;text&#34;: &#34;TiddlyWiki incorporates code from these fine OpenSource projects:\\n\\n* [[The Stanford Javascript Crypto Library|http://bitwiseshiftleft.github.io/sjcl/]]\\n* [[The Jasmine JavaScript Test Framework|http://pivotal.github.io/jasmine/]]\\n* [[Normalize.css by Nicolas Gallagher|http://necolas.github.io/normalize.css/]]\\n\\nAnd media from these projects:\\n\\n* World flag icons from [[Wikipedia|http://commons.wikimedia.org/wiki/Category:SVG_flags_by_country]]\\n&#34; }, &#34;$:/core/copyright.txt&#34;: { &#34;title&#34;: &#34;$:/core/copyright.txt&#34;, &#34;type&#34;: &#34;text/plain&#34;, &#34;text&#34;: &#34;TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n\\nCopyright (c) 2004-2007, Jeremy Ruston\\nCopyright (c) 2007-2020, UnaMesa Association\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n* Redistributions of source code must retain the above copyright notice, this\\n list of conditions and the following disclaimer.\\n\\n* Redistributions in binary form must reproduce the above copyright notice,\\n this list of conditions and the following disclaimer in the documentation\\n and/or other materials provided with the distribution.\\n\\n* Neither the name of the copyright holder nor the names of its\\n contributors may be used to endorse or promote products derived from\\n this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#39;AS IS&#39;\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#34; }, &#34;$:/core/icon&#34;: { &#34;title&#34;: &#34;$:/core/icon&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;path d=\\&#34;M64 0l54.56 32v64L64 128 9.44 96V32L64 0zm21.127 95.408c-3.578-.103-5.15-.094-6.974-3.152l-1.42.042c-1.653-.075-.964-.04-2.067-.097-1.844-.07-1.548-1.86-1.873-2.8-.52-3.202.687-6.43.65-9.632-.014-1.14-1.593-5.17-2.157-6.61-1.768.34-3.546.406-5.34.497-4.134-.01-8.24-.527-12.317-1.183-.8 3.35-3.16 8.036-1.21 11.44 2.37 3.52 4.03 4.495 6.61 4.707 2.572.212 3.16 3.18 2.53 4.242-.55.73-1.52.864-2.346 1.04l-1.65.08c-1.296-.046-2.455-.404-3.61-.955-1.93-1.097-3.925-3.383-5.406-5.024.345.658.55 1.938.24 2.53-.878 1.27-4.665 1.26-6.4.47-1.97-.89-6.73-7.162-7.468-11.86 1.96-3.78 4.812-7.07 6.255-11.186-3.146-2.05-4.83-5.384-4.61-9.16l.08-.44c-3.097.59-1.49.37-4.82.628-10.608-.032-19.935-7.37-14.68-18.774.34-.673.664-1.287 1.243-.994.466.237.4 1.18.166 2.227-3.005 13.627 11.67 13.732 20.69 11.21.89-.25 2.67-1.936 3.905-2.495 2.016-.91 4.205-1.282 6.376-1.55 5.4-.63 11.893 2.276 15.19 2.37 3.3.096 7.99-.805 10.87-.615 2.09.098 4.143.483 6.16 1.03 1.306-6.49 1.4-11.27 4.492-12.38 1.814.293 3.213 2.818 4.25 4.167 2.112-.086 4.12.46 6.115 1.066 3.61-.522 6.642-2.593 9.833-4.203-3.234 2.69-3.673 7.075-3.303 11.127.138 2.103-.444 4.386-1.164 6.54-1.348 3.507-3.95 7.204-6.97 7.014-1.14-.036-1.805-.695-2.653-1.4-.164 1.427-.81 2.7-1.434 3.96-1.44 2.797-5.203 4.03-8.687 7.016-3.484 2.985 1.114 13.65 2.23 15.594 1.114 1.94 4.226 2.652 3.02 4.406-.37.58-.936.785-1.54 1.01l-.82.11zm-40.097-8.85l.553.14c.694-.27 2.09.15 2.83.353-1.363-1.31-3.417-3.24-4.897-4.46-.485-1.47-.278-2.96-.174-4.46l.02-.123c-.582 1.205-1.322 2.376-1.72 3.645-.465 1.71 2.07 3.557 3.052 4.615l.336.3z\\&#34; fill-rule=\\&#34;evenodd\\&#34;/&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/add-comment&#34;: { &#34;title&#34;: &#34;$:/core/images/add-comment&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-add-comment tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;path fill-rule=\\&#34;evenodd\\&#34; d=\\&#34;M56 56H36a8 8 0 100 16h20v20a8 8 0 1016 0V72h20a8 8 0 100-16H72V36a8 8 0 10-16 0v20zm-12.595 58.362c-6.683 7.659-20.297 12.903-36.006 12.903-2.196 0-4.35-.102-6.451-.3 9.652-3.836 17.356-12.24 21.01-22.874C8.516 94.28 0 79.734 0 63.5 0 33.953 28.206 10 63 10s63 23.953 63 53.5S97.794 117 63 117c-6.841 0-13.428-.926-19.595-2.638z\\&#34;/&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/advanced-search-button&#34;: { &#34;title&#34;: &#34;$:/core/images/advanced-search-button&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-advanced-search-button tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;g fill-rule=\\&#34;evenodd\\&#34;&gt;&lt;path d=\\&#34;M74.565 87.985A47.776 47.776 0 0148 96C21.49 96 0 74.51 0 48S21.49 0 48 0s48 21.49 48 48c0 9.854-2.97 19.015-8.062 26.636l34.347 34.347a9.443 9.443 0 010 13.36 9.446 9.446 0 01-13.36 0l-34.36-34.358zM48 80c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32-17.673 0-32 14.327-32 32 0 17.673 14.327 32 32 32z\\&#34;/&gt;&lt;circle cx=\\&#34;48\\&#34; cy=\\&#34;48\\&#34; r=\\&#34;8\\&#34;/&gt;&lt;circle cx=\\&#34;28\\&#34; cy=\\&#34;48\\&#34; r=\\&#34;8\\&#34;/&gt;&lt;circle cx=\\&#34;68\\&#34; cy=\\&#34;48\\&#34; r=\\&#34;8\\&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/auto-height&#34;: { &#34;title&#34;: &#34;$:/core/images/auto-height&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-auto-height tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;path d=\\&#34;M67.987 114.356l-.029-14.477a4 4 0 00-2.067-3.494l-15.966-8.813-1.933 7.502H79.9c4.222 0 5.564-5.693 1.786-7.58L49.797 71.572 48.01 79.15h31.982c4.217 0 5.564-5.682 1.795-7.575L49.805 55.517l-1.795 7.575h31.982c4.212 0 5.563-5.67 1.805-7.57l-16.034-8.105 2.195 3.57V35.614l9.214 9.213a4 4 0 105.656-5.656l-16-16a4 4 0 00-5.656 0l-16 16a4 4 0 105.656 5.656l9.13-9.13v15.288a4 4 0 002.195 3.57l16.035 8.106 1.804-7.57H48.01c-4.217 0-5.564 5.682-1.795 7.574l31.982 16.059 1.795-7.575H48.01c-4.222 0-5.564 5.693-1.787 7.579l31.89 15.923 1.787-7.578H47.992c-4.133 0-5.552 5.504-1.933 7.501l15.966 8.813-2.067-3.494.029 14.436-9.159-9.158a4 4 0 00-5.656 5.656l16 16a4 4 0 005.656 0l16-16a4 4 0 10-5.656-5.656l-9.185 9.184zM16 20h96a4 4 0 100-8H16a4 4 0 100 8z\\&#34;/&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/blank&#34;: { &#34;title&#34;: &#34;$:/core/images/blank&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-blank tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;/&gt;&#34; }, &#34;$:/core/images/bold&#34;: { &#34;title&#34;: &#34;$:/core/images/bold&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-bold tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;path fill-rule=\\&#34;evenodd\\&#34; d=\\&#34;M41.146 51.81V21.87h26.353c2.51 0 4.93.21 7.26.628 2.33.418 4.392 1.165 6.185 2.24 1.793 1.076 3.227 2.57 4.302 4.482 1.076 1.913 1.614 4.363 1.614 7.35 0 5.379-1.613 9.263-4.84 11.653-3.227 2.39-7.35 3.586-12.37 3.586H41.146zM13 0v128h62.028a65.45 65.45 0 0016.762-2.151c5.438-1.434 10.278-3.645 14.52-6.633 4.244-2.988 7.62-6.842 10.13-11.563 2.51-4.721 3.764-10.308 3.764-16.762 0-8.008-1.942-14.85-5.826-20.527-3.884-5.677-9.77-9.65-17.658-11.921 5.737-2.75 10.069-6.275 12.997-10.577 2.928-4.303 4.392-9.681 4.392-16.135 0-5.976-.986-10.995-2.958-15.059-1.972-4.063-4.75-7.32-8.336-9.77-3.585-2.45-7.888-4.213-12.907-5.289C84.888.538 79.33 0 73.235 0H13zm28.146 106.129V70.992H71.8c6.095 0 10.995 1.404 14.7 4.212 3.705 2.81 5.558 7.5 5.558 14.073 0 3.347-.568 6.096-1.703 8.247-1.136 2.151-2.66 3.854-4.572 5.11-1.912 1.254-4.123 2.15-6.633 2.688-2.51.538-5.139.807-7.888.807H41.146z\\&#34;/&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/cancel-button&#34;: { &#34;title&#34;: &#34;$:/core/images/cancel-button&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-cancel-button tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;path fill-rule=\\&#34;evenodd\\&#34; d=\\&#34;M64 76.314l-16.97 16.97a7.999 7.999 0 01-11.314 0c-3.118-3.118-3.124-8.19 0-11.313L52.686 65l-16.97-16.97a7.999 7.999 0 010-11.314c3.118-3.118 8.19-3.124 11.313 0L64 53.686l16.97-16.97a7.999 7.999 0 0111.314 0c3.118 3.118 3.124 8.19 0 11.313L75.314 65l16.97 16.97a7.999 7.999 0 010 11.314c-3.118 3.118-8.19 3.124-11.313 0L64 76.314zM64 129c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64C28.654 1 0 29.654 0 65c0 35.346 28.654 64 64 64zm0-16c26.51 0 48-21.49 48-48S90.51 17 64 17 16 38.49 16 65s21.49 48 48 48z\\&#34;/&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/chevron-down&#34;: { &#34;title&#34;: &#34;$:/core/images/chevron-down&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-chevron-down tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;g fill-rule=\\&#34;evenodd\\&#34;&gt;&lt;path d=\\&#34;M64.053 85.456a7.889 7.889 0 01-5.6-2.316L2.473 27.16a7.92 7.92 0 010-11.196c3.086-3.085 8.105-3.092 11.196 0L64.05 66.344l50.382-50.382a7.92 7.92 0 0111.195 0c3.085 3.086 3.092 8.105 0 11.196l-55.98 55.98a7.892 7.892 0 01-5.595 2.317z\\&#34;/&gt;&lt;path d=\\&#34;M64.053 124.069a7.889 7.889 0 01-5.6-2.316l-55.98-55.98a7.92 7.92 0 010-11.196c3.086-3.085 8.105-3.092 11.196 0l50.382 50.382 50.382-50.382a7.92 7.92 0 0111.195 0c3.085 3.086 3.092 8.104 0 11.196l-55.98 55.98a7.892 7.892 0 01-5.595 2.316z\\&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/chevron-left&#34;: { &#34;title&#34;: &#34;$:/core/images/chevron-left&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-chevron-left tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;g fill-rule=\\&#34;evenodd\\&#34;&gt;&lt;path d=\\&#34;M47.544 64.053c0-2.027.77-4.054 2.316-5.6l55.98-55.98a7.92 7.92 0 0111.196 0c3.085 3.086 3.092 8.105 0 11.196L66.656 64.05l50.382 50.382a7.92 7.92 0 010 11.195c-3.086 3.085-8.105 3.092-11.196 0l-55.98-55.98a7.892 7.892 0 01-2.317-5.595z\\&#34;/&gt;&lt;path d=\\&#34;M8.931 64.053c0-2.027.77-4.054 2.316-5.6l55.98-55.98a7.92 7.92 0 0111.196 0c3.085 3.086 3.092 8.105 0 11.196L28.041 64.05l50.382 50.382a7.92 7.92 0 010 11.195c-3.086 3.085-8.104 3.092-11.196 0l-55.98-55.98a7.892 7.892 0 01-2.316-5.595z\\&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/chevron-right&#34;: { &#34;title&#34;: &#34;$:/core/images/chevron-right&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-chevron-right tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;g fill-rule=\\&#34;evenodd\\&#34;&gt;&lt;path d=\\&#34;M83.456 63.947c0 2.027-.77 4.054-2.316 5.6l-55.98 55.98a7.92 7.92 0 01-11.196 0c-3.085-3.086-3.092-8.105 0-11.196L64.344 63.95 13.963 13.567a7.92 7.92 0 010-11.195c3.086-3.085 8.105-3.092 11.196 0l55.98 55.98a7.892 7.892 0 012.317 5.595z\\&#34;/&gt;&lt;path d=\\&#34;M122.069 63.947c0 2.027-.77 4.054-2.316 5.6l-55.98 55.98a7.92 7.92 0 01-11.196 0c-3.085-3.086-3.092-8.105 0-11.196l50.382-50.382-50.382-50.382a7.92 7.92 0 010-11.195c3.086-3.085 8.104-3.092 11.196 0l55.98 55.98a7.892 7.892 0 012.316 5.595z\\&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/chevron-up&#34;: { &#34;title&#34;: &#34;$:/core/images/chevron-up&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-chevron-up tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;g fill-rule=\\&#34;evenodd\\&#34;&gt;&lt;path d=\\&#34;M63.947 44.544c2.027 0 4.054.77 5.6 2.316l55.98 55.98a7.92 7.92 0 010 11.196c-3.086 3.085-8.105 3.092-11.196 0L63.95 63.656l-50.382 50.382a7.92 7.92 0 01-11.195 0c-3.085-3.086-3.092-8.105 0-11.196l55.98-55.98a7.892 7.892 0 015.595-2.317z\\&#34;/&gt;&lt;path d=\\&#34;M63.947 5.931c2.027 0 4.054.77 5.6 2.316l55.98 55.98a7.92 7.92 0 010 11.196c-3.086 3.085-8.105 3.092-11.196 0L63.95 25.041 13.567 75.423a7.92 7.92 0 01-11.195 0c-3.085-3.086-3.092-8.104 0-11.196l55.98-55.98a7.892 7.892 0 015.595-2.316z\\&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/clone-button&#34;: { &#34;title&#34;: &#34;$:/core/images/clone-button&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-clone-button tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;g fill-rule=\\&#34;evenodd\\&#34;&gt;&lt;path d=\\&#34;M32.265 96v24.002A7.996 7.996 0 0040.263 128h79.74a7.996 7.996 0 007.997-7.998v-79.74a7.996 7.996 0 00-7.998-7.997H96V48h12.859a2.99 2.99 0 012.994 2.994v57.865a2.99 2.99 0 01-2.994 2.994H50.994A2.99 2.99 0 0148 108.859V96H32.265z\\&#34;/&gt;&lt;path d=\\&#34;M40 56h-7.993C27.588 56 24 52.418 24 48c0-4.41 3.585-8 8.007-8H40v-7.993C40 27.588 43.582 24 48 24c4.41 0 8 3.585 8 8.007V40h7.993C68.412 40 72 43.582 72 48c0 4.41-3.585 8-8.007 8H56v7.993C56 68.412 52.418 72 48 72c-4.41 0-8-3.585-8-8.007V56zM8 0C3.58 0 0 3.588 0 8v80c0 4.419 3.588 8 8 8h80c4.419 0 8-3.588 8-8V8c0-4.419-3.588-8-8-8H8zM19 16A2.997 2.997 0 0016 19.001v57.998A2.997 2.997 0 0019.001 80h57.998A2.997 2.997 0 0080 76.999V19.001A2.997 2.997 0 0076.999 16H19.001z\\&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/close-all-button&#34;: { &#34;title&#34;: &#34;$:/core/images/close-all-button&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-close-all-button tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;g fill-rule=\\&#34;evenodd\\&#34;&gt;&lt;path d=\\&#34;M28 111.314l-14.144 14.143a8 8 0 01-11.313-11.313L16.686 100 2.543 85.856a8 8 0 0111.313-11.313L28 88.686l14.144-14.143a8 8 0 0111.313 11.313L39.314 100l14.143 14.144a8 8 0 01-11.313 11.313L28 111.314zM28 39.314L13.856 53.457A8 8 0 012.543 42.144L16.686 28 2.543 13.856A8 8 0 0113.856 2.543L28 16.686 42.144 2.543a8 8 0 0111.313 11.313L39.314 28l14.143 14.144a8 8 0 01-11.313 11.313L28 39.314zM100 39.314L85.856 53.457a8 8 0 01-11.313-11.313L88.686 28 74.543 13.856A8 8 0 0185.856 2.543L100 16.686l14.144-14.143a8 8 0 0111.313 11.313L111.314 28l14.143 14.144a8 8 0 01-11.313 11.313L100 39.314zM100 111.314l-14.144 14.143a8 8 0 01-11.313-11.313L88.686 100 74.543 85.856a8 8 0 0111.313-11.313L100 88.686l14.144-14.143a8 8 0 0111.313 11.313L111.314 100l14.143 14.144a8 8 0 01-11.313 11.313L100 111.314z\\&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/close-button&#34;: { &#34;title&#34;: &#34;$:/core/images/close-button&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-close-button tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;path fill-rule=\\&#34;evenodd\\&#34; d=\\&#34;M65.086 75.41l-50.113 50.113c-3.121 3.121-8.192 3.126-11.316.002-3.118-3.118-3.123-8.19.002-11.316l50.114-50.114L3.659 13.982C.538 10.86.533 5.79 3.657 2.666c3.118-3.118 8.19-3.123 11.316.002l50.113 50.114L115.2 2.668c3.121-3.121 8.192-3.126 11.316-.002 3.118 3.118 3.123 8.19-.002 11.316L76.4 64.095l50.114 50.114c3.121 3.121 3.126 8.192.002 11.316-3.118 3.118-8.19 3.123-11.316-.002L65.086 75.409z\\&#34;/&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/close-others-button&#34;: { &#34;title&#34;: &#34;$:/core/images/close-others-button&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-close-others-button tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;path fill-rule=\\&#34;evenodd\\&#34; d=\\&#34;M64 128c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64C28.654 0 0 28.654 0 64c0 35.346 28.654 64 64 64zm0-16c26.51 0 48-21.49 48-48S90.51 16 64 16 16 37.49 16 64s21.49 48 48 48zm0-16c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32-17.673 0-32 14.327-32 32 0 17.673 14.327 32 32 32zm0-16c8.837 0 16-7.163 16-16s-7.163-16-16-16-16 7.163-16 16 7.163 16 16 16z\\&#34;/&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/copy-clipboard&#34;: { &#34;title&#34;: &#34;$:/core/images/copy-clipboard&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-copy-clipboard tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;g fill-rule=\\&#34;evenodd\\&#34;&gt;&lt;rect width=\\&#34;33\\&#34; height=\\&#34;8\\&#34; x=\\&#34;40\\&#34; y=\\&#34;40\\&#34; rx=\\&#34;4\\&#34;/&gt;&lt;rect width=\\&#34;17\\&#34; height=\\&#34;8\\&#34; x=\\&#34;40\\&#34; y=\\&#34;82\\&#34; rx=\\&#34;4\\&#34;/&gt;&lt;rect width=\\&#34;17\\&#34; height=\\&#34;8\\&#34; x=\\&#34;40\\&#34; y=\\&#34;54\\&#34; rx=\\&#34;4\\&#34;/&gt;&lt;rect width=\\&#34;33\\&#34; height=\\&#34;8\\&#34; x=\\&#34;40\\&#34; y=\\&#34;96\\&#34; rx=\\&#34;4\\&#34;/&gt;&lt;rect width=\\&#34;12\\&#34; height=\\&#34;8\\&#34; x=\\&#34;40\\&#34; y=\\&#34;68\\&#34; rx=\\&#34;4\\&#34;/&gt;&lt;path d=\\&#34;M40 16H24c-4.419 0-8 3.59-8 8a8.031 8.031 0 000 .01v95.98a8.03 8.03 0 000 .01c0 4.41 3.581 8 8 8h80a7.975 7.975 0 005.652-2.34 7.958 7.958 0 002.348-5.652v-16.016c0-4.414-3.582-7.992-8-7.992-4.41 0-8 3.578-8 7.992V112H32V32h64v8.008C96 44.422 99.582 48 104 48c4.41 0 8-3.578 8-7.992V23.992a7.963 7.963 0 00-2.343-5.651A7.995 7.995 0 00104.001 16H88c0-4.41-3.585-8-8.007-8H48.007C43.588 8 40 11.582 40 16zm4-1.004A4.001 4.001 0 0148 11h32c2.21 0 4 1.797 4 3.996v4.008A4.001 4.001 0 0180 23H48c-2.21 0-4-1.797-4-3.996v-4.008z\\&#34;/&gt;&lt;rect width=\\&#34;66\\&#34; height=\\&#34;16\\&#34; x=\\&#34;62\\&#34; y=\\&#34;64\\&#34; rx=\\&#34;8\\&#34;/&gt;&lt;path d=\\&#34;M84.657 82.343l-16-16v11.314l16-16a8 8 0 10-11.314-11.314l-16 16a8 8 0 000 11.314l16 16a8 8 0 1011.314-11.314z\\&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/delete-button&#34;: { &#34;title&#34;: &#34;$:/core/images/delete-button&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22pt\\&#34; class=\\&#34;tc-image-delete-button tc-image-button\\&#34; viewBox=\\&#34;0 0 128 128\\&#34;&gt;&lt;g fill-rule=\\&#34;evenodd\\&#34; transform=\\&#34;translate(12)\\&#34;&gt;&lt;rect width=\\&#34;105\\&#34; height=\\&#34;16\\&#34; y=\\&#34;11\\&#34; rx=\\&#34;8\\&#34;/&gt;&lt;rect width=\\&#34;48\\&#34; height=\\&#34;16\\&#34; x=\\&#34;28\\&#34; rx=\\&#34;8\\&#34;/&gt;&lt;rect width=\\&#34;16\\&#34; height=\\&#34;112\\&#34; x=\\&#34;8\\&#34; y=\\&#34;16\\&#34; rx=\\&#34;8\\&#34;/&gt;&lt;rect width=\\&#34;88\\&#34; height=\\&#34;16\\&#34; x=\\&#34;8\\&#34; y=\\&#34;112\\&#34; rx=\\&#34;8\\&#34;/&gt;&lt;rect width=\\&#34;16\\&#34; height=\\&#34;112\\&#34; x=\\&#34;80\\&#34; y=\\&#34;16\\&#34; rx=\\&#34;8\\&#34;/&gt;&lt;rect width=\\&#34;16\\&#34; height=\\&#34;112\\&#34; x=\\&#34;56\\&#34; y=\\&#34;16\\&#34; rx=\\&#34;8\\&#34;/&gt;&lt;rect width=\\&#34;16\\&#34; height=\\&#34;112\\&#34; x=\\&#34;32\\&#34; y=\\&#34;16\\&#34; rx=\\&#34;8\\&#34;/&gt;&lt;/g&gt;&lt;/svg&gt;&#34; }, &#34;$:/core/images/done-button&#34;: { &#34;title&#34;: &#34;$:/core/images/done-button&#34;, &#34;tags&#34;: &#34;$:/tags/Image&#34;, &#34;text&#34;: &#34;&lt;svg width=\\&#34;22pt\\&#34; height=\\&#34;22\n......", "posttime": "2021-06-26 15:09:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u97f3\u9891,case,warning", "title": "\u4e00\u4e2a\u793e\u4ea4\u97f3\u9891\u7684\u718a\u6848\u4f8b ", "title_en": "A Bear Case for Social Audio", "transed": 1, "url": "https://elevis.io", "via": "", "real_tags": ["\u97f3\u9891", "case", "warning"]}]