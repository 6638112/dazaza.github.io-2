[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073820, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "ABE Quantum\u662f\u4e0a\u4e0b\u6587\u7b56\u7565\u7684\u7ec4\u5408\uff0c\u662fNoScript&#39\u4e2d\u6700\u53d7\u6b22\u8fce\u7684\u529f\u80fd\u4e4b\u4e00\uff1b\u7684\u5386\u53f2\uff0c\u4ee5\u53ca\u5c40\u57df\u7f51\u4fdd\u62a4\uff0c\u4e00\u4e2a\u91cd\u8981\u7684#34\uff1b\u7ecf\u5178&#34\uff1b2017\u5e74\u91cf\u5b50\u8fc1\u79fb\u4e2d\u5931\u53bb\u4e86\u9632\u5fa1\u3002\n\u7ecf\u8fc7\u591a\u5e74\u7684\u7b49\u5f85\u548c\u6570\u6708\u7684\u8f9b\u52e4\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u597d\u4e1c\u897f\uff08\u6211\u4e2a\u4eba\u4e5f\u9519\u8fc7\u4e86\u5f88\u591a\uff09\u6700\u7ec8\u638c\u63e1\u5728\u6240\u6709NoScript 11.3\u7528\u6237\u624b\u4e2d\uff0c\u8fd9\u5f97\u76ca\u4e8eNLNET\u57fa\u91d1\u4f1a\u548c\u4e0b\u4e00\u4ee3\u4e92\u8054\u7f51\u8ba1\u5212\uff08\u66f4\u5177\u4f53\u5730\u8bf4\u662fNGI0 PET\u57fa\u91d1\uff09\u7684\u5b9d\u8d35\u652f\u6301\u3002\n34\u5c81\uff1bABE Quantum&#34\uff1b\u5f53\u7136\uff0c\u6635\u79f0\u6765\u81eaNoScript Classic\u7684\u5e94\u7528\u7a0b\u5e8f\u8fb9\u754c\u6267\u884c\u5668\u6a21\u5757\uff0c\u5b83\u7684\u4e0a\u4e0b\u6587\u7b56\u7565\u548cLAN\u4fdd\u62a4\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u90fd\u662fa&#34\uff1b\u73b0\u4ee3\u5316&#34\uff1b\u540e\u4ee3\uff0c\u727a\u7272\u4e86\u539f\u4f5c\u7684\u4e00\u4e9b\u6781\u7aef\u7075\u6d3b\u6027&#39\uff1b\u4ee5\u9632\u706b\u5899\u4e3a\u7075\u611f\u7684\u7b56\u7565\u5b9a\u4e49\u8bed\u8a00\uff0c\u4ee5\u63d0\u4f9b\u66f4\u7b80\u5355\u3001\u66f4\u6613\u8bbf\u95ee\u548c\u66f4\u76f4\u89c2\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u76f4\u63a5\u96c6\u6210\u5230NoScript&#39\uff1b\u5b83\u7684\u4e3b\u8981\u81ea\u5b9a\u4e49\u7528\u6237\u754c\u9762\u3002\n\u8bf4\u5230ABE\uff0c\u6211\u8981\u611f\u8c22NoScript\u7684\u652f\u67f1barbaz&#39\uff1bs\u793e\u533a\u5c06ABE\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684WebExtension\u6062\u590d\u6d3b\u529b\u7684\u52aa\u529b\u4e5f\u5728\uff08\u91cd\u65b0\uff09\u5f00\u53d1WAN\u5230LAN\u8de8\u533a\u57df\u4fdd\u62a4\u65b9\u9762\u8d77\u5230\u4e86\u5f88\u5927\u7684\u5e2e\u52a9\uff0c\u8be5\u4fdd\u62a4\u5229\u7528\u4e86\u4ed6\u4e3aNoScript Commons\u5e93\u8d21\u732e\u7684\u4fee\u6539\u540e\u7684iputil\u3001DNS\u548cAddressMatcher\u6a21\u5757\u3002\n\u4e0a\u4e0b\u6587\u7b56\u7565\u5141\u8bb8\u60a8\u6839\u636e\u7279\u5b9a\u7ad9\u70b9\u7684\u4e0a\u4e0b\u6587\uff0c\u5373\u9876\u5c42\u7ad9\u70b9\uff08\u5bfc\u822a\u680f\u4e2d\u5f53\u524d\u663e\u793a\u7684\u5730\u5740\uff09\uff0c\u4e3a\u8be5\u7ad9\u70b9\u5206\u914d\u4e0d\u540c\u7684\u6743\u9650\uff08\u6216\u7528NoScript\u7684\u8bf4\u6cd5\uff0c\u542f\u7528\u4e0d\u540c\u7684\u529f\u80fd\uff09\u3002\n\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4ecetwitter\u542f\u7528\u811a\u672c\u3002\u53ea\u6709\u5f53\u4f60&#39\uff1b\u6211\u4eec\u8981\u53bbmaone\u3002net\u2014\u2014\u88abMaone\u548c#39\u5438\u5f15\uff1b\u8fd9\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u5d4c\u5165\u5f0f\u63a8\u6587\u63d0\u8981\uff1b\uff09-\u4f46\u5176\u4ed6\u5730\u65b9\u4e0d\u884c\uff0c\u56e0\u4e3a\u4f60\u6ca1\u6709&#39\uff1bI don\u2019\u6211\u4e0d\u559c\u6b22Twitter\u5728\u4f60\u53bb\u7684\u4efb\u4f55\u5730\u65b9\u8ddf\u8e2a\u4f60\uff1a\n\u5728maone\u7684\u65f6\u5019\u3002net\uff0c\u6253\u5f00NoScript&#39\uff1bs\u5f39\u51fa\u7a97\u53e3\u5e76\u9009\u62e9\u81ea\u5b9a\u4e49\u4f5c\u4e3atwitter\u7684\u7b56\u7565\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002\u4f60&#39\uff1b\u6211\u5c06\u770b\u5230\u4e00\u4e2a\u65b0\u7684\u4e0b\u62c9\u6846\uff0c\u6700\u521d\u8bbe\u7f6e\u4e3a\u4efb\u4f55\u7ad9\u70b9\u3002\u5220\u9664\u6240\u6709\u4e0d\u9700\u8981\u7684\u529f\u80fd\uff08\u4f8b\u5982\u811a\u672c\uff09&#39\uff1b\u6211\u4e0d\u60f3\u8ba9Twitter\u5728\u4efb\u4f55\u7f51\u7ad9\u4e0a\u4f7f\u7528\uff08\u8bf7\u6ce8\u610f\uff0c\u5f53\u7b2c\u4e00\u6b21\u9009\u62e9CUSTOM\u65f6\uff0c\u4e4b\u524d\u9009\u62e9\u7684\u9884\u7f6e\u529f\u80fd\u4f1a\u88ab\u590d\u5236\uff0c\u56e0\u6b64\u5982\u679c\u662f\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u60a8\u53ef\u80fd\u53ef\u4ee5\u8fd9\u6837\u79bb\u5f00\uff09\u3002\u7136\u540e\u9009\u62e9\u3002\u3002\u3002\u9a6c\u6069\u3002net\uff0c\u5e76\u5728\u4e0a\u5207\u6362\u811a\u672c\u548c\u6846\u67b6\uff08\u60a8\u770b\u5230\u7684\u7ea2\u8272\u529f\u80fd\uff0c\u610f\u5473\u7740twitter.com\u9700\u8981\u5b83\u4eec\uff09\u3002\n\u4f60&#39\uff1b\u91cd\u505a\uff1a\u6765\u81eatwitter\u7684\u811a\u672c\u3002\u4ec5\u5f53\u663e\u793a\u7684\u4e3b\u7ad9\u70b9\u4e3amaone\u65f6\uff0c\u624d\u4f1a\u6267\u884ccom\u3002\u7f51\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u5e0c\u671btwitter\u811a\u672c\u548c\u5b50\u6587\u6863\u6b63\u5e38\u5de5\u4f5c\u7684\u7f51\u7ad9\uff08\u5305\u62ectwitter.com\u672c\u8eab\uff09\u4e0a\u91cd\u590d\u8fd9\u4e00\u70b9\u3002\u5982\u679c\u60a8\u6539\u53d8\u4e3b\u610f\uff0c\u53ef\u4ee5\u4ece\u5f39\u51fa\u7a97\u53e3\uff08\u4ec5\u9002\u7528\u4e8e\u5f53\u524d\u4e0a\u4e0b\u6587\uff09\u6216\u9009\u9879&gt\uff1b\u201c\u6bcf\u4e2a\u7ad9\u70b9\u6743\u9650\u201d\u9762\u677f\uff0c\u5176\u4e2d\u6240\u6709\u4e0a\u4e0b\u6587\u52a0\u5728\u201c\u5f53\u9996\u9875\u5339\u914d\u65f6\u542f\u7528\u8fd9\u4e9b\u529f\u80fd\u201d\u4e2d\u5217\u51fa\u3002\u3002\u3002\u4e0b\u62c9\u5217\u8868\u3002\n\u7b80\u5355\u5730\u8bf4\uff0cLAN\u529f\u80fd\u5141\u8bb8\u6765\u81ea\u516c\u5171\u4e92\u8054\u7f51\uff08\u53c8\u540d\u4e16\u754c\u5c40\u57df\u7f51/WAN\uff09\u7684\u6587\u6863\u94fe\u63a5/\u53d1\u9001\u8bf7\u6c42\u5230\u5c40\u57df\u7f51\uff08LAN\uff09\u5185\u7684\u4e3b\u673a\uff0c\u8fd9\u662f\u4ed6\u4eec\u73b0\u5728\u53ef\u4ee5\u505a\u7684\u4e8b\u60c5\uff0c\u5141\u8bb8\u6240\u8c13\u7684\u8de8\u533a\u57dfCSRF/XSS\u653b\u51fb\u3002\u901a\u8fc7\u5c06\u5176\u7981\u7528\uff08\u9ed8\u8ba4\u548c\u4e0d\u53d7\u4fe1\u4efb\u9884\u8bbe\u4e2d\u7684\u51fa\u5382\u8bbe\u7f6e\uff09\uff0c\u60a8&#39\uff1b\u4ece&#34\u91cd\u65b0\u590d\u5236\u6b64\u529f\u80fd\uff1b\u7ecf\u5178&#34\uff1bNoScript\uff0c\u65e0\u9700\u7ecf\u8fc7ABE&#39\uff1b\u5f53\u4f60\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u4f8b\u5916\u65f6\uff0c\u5b83\u4f1a\u50cf\u9632\u706b\u5899\u4e00\u6837\u8bbe\u7f6e\u89c4\u5219\uff0c\u73b0\u5728\u53ea\u9700\u5728LAN\u529f\u80fd\u6846\u4e2d\u52fe\u9009\u4e00\u4e2a\u9009\u9879\u5373\u53ef\u3002\n\u76f8\u5173\u653f\u7b56\u548c\u653f\u7b56\uff1b\u5c40\u57df\u7f51\u4fdd\u62a4\uff08ABE Quantum\uff09\u9879\u76ee\u7531NGI0 PET\u57fa\u91d1\u8d44\u52a9\uff0c\u8be5\u57fa\u91d1\u7531NLnet\u8bbe\u7acb\uff0c\u7531\u6b27\u76df\u59d4\u5458\u4f1a\u63d0\u4f9b\u8d22\u653f\u652f\u6301\uff1bDG Communications Networks\u65d7\u4e0b\u7684\u4e0b\u4e00\u4ee3\u4e92\u8054\u7f51\u8ba1\u5212\uff0c\u5185\u5bb9\u548c\u6280\u672f\u6839\u636e\u7b2c825310\u53f7\u8d60\u6b3e\u534f\u8bae\u3002\n*\u5df2\u7ecf\u5728AMO\u7684\u81ea\u52a8\u66f4\u65b0\u4e2d\u63d0\u4f9b\uff0c\u5728\u5199\u8fd9\u7bc7\u6587\u7ae0\u65f6\u4ecd\u5728Chrome\u5546\u5e97\u7b49\u5f85\u8bc4\u8bba\u3002", "note_en": "ABE Quantum is the combination of  Contextual Policies, one of the most requested features in NoScript&#39;s history, and  LAN protection, an important &#34;Classic&#34; defense lost in  the 2017 Quantum migration.\n After years of waiting and months of hard work, this good stuff (which I personally missed a lot, too) is finally in the hands of all NoScript 11.3 users *, thanks to the precious support by the   NLNet Foundation and the  Next Generation Internet programme (more specifically the  NGI0 PET fund).\n The &#34;ABE Quantum&#34; nickname comes, of course, from the  Application Boundary Enforcer module of NoScript Classic, which both Contextual Policies and LAN protection are in a sense a &#34;modernized&#34; descendant, sacrificing some of the extreme flexibility of the original&#39;s firewall-inspired policy definition language, in order to provide a simpler, more accessible and more intuitive user experience directly integrated in NoScript&#39;s main CUSTOM UI.\n Speaking of ABE, I want to thank  barbaz, a pillar of NoScript&#39;s community whose efforts to  bring back to life ABE as a stand-alone WebExtension helped a lot also in (re)developing the WAN-to-LAN cross-zone protection, which leverages the modified iputil, DNS and AddressMatcher modules  he contributed back to the NoScript Commons Library.\n   Contextual policies let you assign different permissions (or &#34;enable different capabilities&#34;, in NoScript&#39;s parlance) to a certain site  depending on its context, i.e. which is the top level site (the address currently shown in the navigation bar).\n For instance, you might want to enable scripts from twitter.com  only if you&#39;re visiting maone.net - intrigued by Maone&#39;s awesome embedded tweet feed ;) - but not elsewhere, because you don&#39;t like Twitter to track you everywhere you go:\n While on maone.net, open NoScript&#39;s popup and select CUSTOM as the policy for twitter.com. You&#39;ll see a new drop down box, initially set to  ANY SITE. Remove all the capabilities (e.g.  script) you don&#39;t want Twitter to use on  ANY SITE (notice that when CUSTOM is selected first time, the capabilities from the previously selected preset get copied, so if it was DEFAULT you can probably leave that way). Then select  ...maone.net from the drop down, and switch  script and  frame (the capabilities you see in red, meaning they&#39;re are needed by twitter.com) on.\n You&#39;re done: scripts from  twitter.com will be executed only when the main site displayed is  maone.net. You can repeat this on any website (including twitter.com itself) where you want Twitter scripts and subdocuments to work normally. If you change your mind, you can reset some or all the contextual policies you previously set in the CUSTOM permissions deck, either on from the popup (only for the current context) or from the  Options&gt;Per-site permissions panel, where all the contexts plus are listed in the  Enable these capabilities when top page matches... dropdown.\n  Simply put, the LAN capability lets documents coming from the public Internet (AKA World Area Network / WAN) to link / send requests to hosts inside your Local Area Network (LAN), which is pretty what they can do now and allows so called cross-zone CSRF/XSS attacks. By keeping it disabled (the factory setting in the DEFAULT and UNTRUSTED presets), you&#39;re replicating  this feature from &#34;Classic&#34; NoScript, without the hassle of going through ABE&#39;s firewall-like rules when you need to set an exception, which now is just a matter of checking a the LAN capability box.\n  The  Contextual Policies &amp; LAN Protection (ABE Quantum) project was funded through the  NGI0 PET Fund, a fund established by NLnet with financial support from the European Commission&#39;s  Next Generation Internet programme, under the aegis of DG Communications Networks, Content and Technology under grant agreement N o 825310.\n * already available in auto-update  from AMO, still waiting for review  at the Chrome Store while writing this post.", "posttime": "2022-02-17 12:33:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b56\u7565,policies,noscript", "title": "NoScript 11.3\u4e2d\u7684\u4e0a\u4e0b\u6587\u7b56\u7565\u548cLAN\u4fdd\u62a4\uff08Abe Quantum\uff09", "title_en": "Contextual Policies and LAN Protection (Abe Quantum) in NoScript 11.3", "transed": 1, "url": "https://hackademix.net/2022/02/17/contextual-policies-lan-protection-abe-quantum-in-noscript-113/", "via": "", "real_tags": ["\u7b56\u7565", "policies", "noscript"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073819, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u52a0\u6cf0\u7f57\u5c3c\u4e9a\u8bed\u5fb7\u8bed\u897f\u73ed\u7259\u8bed\u6cd5\u8bed\u62c9\u4e01\u8bed\u610f\u5927\u5229\u8bed\u8461\u8404\u7259\u8bed\u8461\u8404\u7259\u8bed\u5370\u5ea6\u5c3c\u897f\u4e9a\u8bed\u7b80\u4f53\u4e2d\u6587   \u6b63\u9ad4\u4e2d\u6587   \u65e5\u672c\u8a9e   \u6ce2\u5c14\u65af\u57fa\ud55c\uad6d\uc5b4   \u8377\u5170\u7f57\u9a6c\u52a0\u5c14\nT\u6064\u00bb\n2021\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u9879\u8c03\u67e5\u4e00\u76f4\u63a8\u8fdf\u52302022\u5e74\uff01\n\u5728\u4e00\u7cfb\u5217\u66f4\u5feb\u7684\u6784\u5efa\u5de5\u5177\u548c\u4e00\u6279\u65b0\u7684\u540e\u7aef\u6846\u67b6\u4e4b\u95f4\uff0cJavaScript\u4e16\u754c\u4e0d\u65ad\u53d1\u5c55\u3002\u6211\u4eec\u5c3d\u4e86\u6700\u5927\u52aa\u529b\uff0c\u7ed9\u8fd9\u9879\u8c03\u67e5\u589e\u52a0\u4e86\u4e00\u4e9b\u65b0\u7684\u52a8\u529b\uff08\u9605\u8bfb\u66f4\u591a\u5173\u4e8e&#39\uff1b\u7684\u65b0\u5185\u5bb9\uff09\uff0c\u6bd4\u5982\u65b0\u7684\u95ee\u9898\u7c7b\u578b\uff0c\u4ea4\u53c9\u5f15\u7528\u4e24\u4e2a\u6570\u636e\u70b9\u7684\u80fd\u529b\uff08\u6bd4\u5982\u6309\u7ecf\u9a8c\u7ea7\u522b\u5212\u5206\u7684\u5e74\u85aa\uff09\uff0c\u751a\u81f3\u8fd8\u6709\u4e00\u79cd\u5b9a\u5236\u56fe\u8868\u4ee5\u5c55\u793a\u81ea\u5df1\u89c1\u89e3\u7684\u65b9\u6cd5\uff01\u9605\u8bfb\u66f4\u591a\u5173\u4e8e&#39\uff1bIt\u2019\u4eca\u5e74\u662f\u65b0\u7684\u4e00\u5e74\uff08\u82f1\u8bed\uff09\u3002\n\u5b83\u4e0d\u662f&#39\uff1b\u4e0d\u8fc7\uff0c\u8fd9\u5e76\u975e\u4e00\u5e06\u98ce\u987a\u3002\u8c22\u5929\u8c22\u5730\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u5904\u7406\u4e00\u4e2a\u6570\u636e\u6cc4\u9732\u4e8b\u4ef6&#39\uff1b\u770b\u6765\u4e0d\u4f1a\u6709\u4ec0\u4e48\u574f\u540e\u679c\u3002\u800c\u6211\u4eec&#39\uff1bWe\u2019\u6211\u4eec\u4e0d\u65ad\u52aa\u529b\u4f7f\u8c03\u67e5\u66f4\u5177\u5305\u5bb9\u6027\u3001\u66f4\u5bb9\u6613\u83b7\u53d6\u548c\u66f4\u516c\u5e73\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u5c3d\u7ba1\u8fd9\u9879\u8c03\u67e5\u53ea\u80fd\u4ee3\u8868JavaScript\u751f\u6001\u7cfb\u7edf\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u4f60&#39\uff1b\u6211\u4f1a\u53d1\u73b0\u7ed3\u679c\u6570\u636e\u5f88\u6709\u8da3\uff01\n\u5982\u679c\u4f60&#39\uff1bI\u2019\u6211\u60f3\u77e5\u9053\u6211\u4eec\u4ec0\u4e48\u65f6\u5019\u53d1\u5e03\u66f4\u591a\u7684\u7ed3\u679c\u6216\u5ba3\u5e03\u660e\u5e74&#39\uff1bs\u7248\uff0c\u8bf7\u5728\u4e0b\u9762\u7ed9\u6211\u4eec\u7559\u4e0b\u60a8\u7684\u7535\u5b50\u90ae\u4ef6\uff1a\n\u7528Nivo\u5236\u4f5c\u7684\u56fe\u8868\u3002\u7531Netlify\u4e3b\u6301\u3002\u95ee\u9898\uff1f\u53d1\u73b0\u4e00\u53ea\u866b\u5b50\u4e86\u5417\uff1f\u7559\u4e0b\u4e00\u4e2a\u95ee\u9898\u3002\u52a0\u5165\u6211\u4eec\u7684\u4e0d\u548c\u8c10\u3002", "note_en": "Catal\u00e0   \u010cesky   Deutsch   English  Espa\u00f1ol   \u0641\u0627\u0631\u0633\u06cc   Fran\u00e7ais   Galego   Hindi   Italiano   Portugu\u00eas   \u0420\u0443\u0441\u0441\u043a\u0438\u0439   \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430   Svenska   T\u00fcrk\u00e7e   Indonesia   \u7b80\u4f53\u4e2d\u6587   \u6b63\u9ad4\u4e2d\u6587   \u65e5\u672c\u8a9e   Polski   \ud55c\uad6d\uc5b4   Nederlands   Rom\u00e2n\u0103   Magyar\n   T-shirt\u00a0\u00bb\n A lot happened in 2021. So much in fact that the survey was pushed back all the way to 2022!\n Between a slew of faster build tools and a new crop of back-end frameworks, the JavaScript world kept evolving. And we did our best to keep up, giving this survey a couple new power-ups ( read more about what&#39;s new) such as new question types, the ability to cross-reference two datapoints (such as yearly salaries by experience level), and even a way to customize the charts to surface your own insights! Read more about  what&#39;s new this year (English).\n It wasn&#39;t all smooth sailing, though. We had to deal with a  data leak that thankfully didn&#39;t seem to have any bad consequences. And we&#39;re constantly making efforts to make the survey more inclusive, more accessible, and more fair.\n Still, even though the survey can ever only represents a tiny, tiny part of the JavaScript ecosystem, we hope you&#39;ll find the resulting data interesting!\n  If you&#39;d like to know when we release additional results or announce next year&#39;s edition,just leave us your email below:\n   Charts built with  Nivo.  Hosted by  Netlify.  Questions? Found a bug?  Leave an issue.  Join us on  Discord.", "posttime": "2022-02-17 12:31:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,javascript,state,\u8c03\u67e5", "title": "JavaScript 2021\u7684\u72b6\u6001", "title_en": "State of JavaScript 2021", "transed": 1, "url": "https://2021.stateofjs.com/", "via": "", "real_tags": ["java", "state", "\u8c03\u67e5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073818, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u957f\u65f6\u95f4\u7684\u5267\u70c8\u8ba4\u77e5\u6d3b\u52a8\u4f1a\u5bfc\u81f4\u7cbe\u795e\u75b2\u60eb\u3002\u867d\u7136\u4ece\u7cbe\u795e\u75b2\u60eb\u4e2d\u6062\u590d\u7684\u666e\u904d\u7b56\u7565\uff08\u6bd4\u5982\u770b\u7535\u89c6\uff09\u662f\u65e0\u6548\u7684\uff0c\u4f46\u6709\u6c27\u8fd0\u52a8\u4f3c\u4e4e\u662f\u4e00\u79cd\u5f88\u6709\u524d\u9014\u7684\u65b9\u6cd5\u3002\u8fd9\u53ef\u4ee5\u7528\u6025\u6027\u548c\u6162\u6027\u6709\u6c27\u8fd0\u52a8\u5bf9\u4e2d\u67a2\u795e\u7ecf\u7cfb\u7edf\u7684\u76ca\u5904\u6765\u89e3\u91ca\u3002\n\u8fd9\u9879\u7814\u7a76\u8c03\u67e5\u4e86\u4e00\u6b21\u4e2d\u5ea6\u6709\u6c27\u8fd0\u52a8\uff0865-75%\u7684\u53c2\u4e0e\u8005\u548c#39\uff1b\u4e2a\u4ebaV\u02d9O2peak\uff09\u4ece\u5b9e\u9a8c\u6027\u7cbe\u795e\u8870\u7aed\u4e2d\u6062\u590d\u7684\u53ef\u80fd\u6027\u3002\u5bf9\u5065\u5eb7\u6210\u4eba\uff08N=99\uff09\u8fdb\u884c\u4e86\u968f\u673a\u5bf9\u7167\u8bd5\u9a8c\u3002\u4ed6\u4eec\u8fdb\u884c\u4e8660\u5206\u949f\u7684\u8ba4\u77e5\u8981\u6c42\u6d4b\u8bd5\uff0c\u4ee5\u8bf1\u53d1\u7cbe\u795e\u8870\u7aed\u3002\u968f\u540e\uff0c\u4ed6\u4eec\u88ab\u968f\u673a\u5206\u4e3a\u4e09\u79cd\u6cbb\u7597\u65b9\u6cd5\u4e4b\u4e00\uff1a\u5728\u81ea\u884c\u8f66\u6d4b\u529b\u8ba1\u4e0a\u8fdb\u884c30\u5206\u949f\u7684\u4e2d\u5ea6\u6709\u6c27\u8fd0\u52a8\uff0c30\u5206\u949f\u7684\u7b80\u5355\u4e0b\u534a\u8eab\u4f38\u5c55\u8fd0\u52a8\uff08=\u4e3b\u52a8\u63a7\u5236\u6cbb\u7597\uff09\u6216\u89c2\u770b\u6d41\u884c\u60c5\u666f\u559c\u5267\uff08=\u88ab\u52a8\u63a7\u5236\u6cbb\u7597\uff09\u3002\u5728\u6cbb\u7597\u524d\u540e\u8bc4\u4f30\u8ba4\u77e5\u7075\u6d3b\u6027\u8868\u73b0\u3001\u60c5\u7eea\u3001\u75b2\u52b3\u3001\u8e81\u52a8\u3001\u81ea\u6211\u8ba4\u77e5\u80fd\u529b\u548c\u52a8\u673a\u3002\n\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0c\u4e0e\u4e3b\u52a8\u63a7\u5236\u6cbb\u7597\u76f8\u6bd4\uff0c\u9002\u5ea6\u6709\u6c27\u8fd0\u52a8\u80fd\u66f4\u597d\u5730\u6062\u590d\u8ba4\u77e5\u7075\u6d3b\u6027\uff08\u5e73\u5747\u5dee\u9664\u4ee5\u5408\u5e76\u6807\u51c6\u5dee\uff0cCohen#39\uff1bSD=0.737\uff09\u3001\u60c5\u7eea\uff08d=0.405\uff09\u3001\u75b2\u52b3\uff08d=0.480\uff09\u3001\u81ea\u6211\u8ba4\u77e5\u80fd\u529b\uff08d=0.214\uff09\u548c\u52a8\u673a\uff08d=0.524\uff09\u3002\u9002\u5ea6\u7684\u6709\u6c27\u8fd0\u52a8\u4e5f\u6bd4\u88ab\u52a8\u63a7\u5236\u6cbb\u7597\uff08d=0.102-0.286\uff09\u66f4\u6709\u6548\uff0c\u540c\u65f6\u6392\u9664\u4e86\u75b2\u52b3\uff08d=0.015\uff09\u548c\u8e81\u52a8\uff08d=0.473\uff09\u3002\n\u603b\u4e4b\uff0c\u8fd9\u9879\u7814\u7a76\u8868\u660e\uff0c\u4e00\u6b21\u6025\u6027\u6709\u6c27\u8fd0\u52a8\u6709\u52a9\u4e8e\u8ba4\u77e5\u7075\u6d3b\u6027\u548c\u4e3b\u89c2\u5e78\u798f\u611f\u7684\u6062\u590d\u3002\u8fd9\u4e0d\u4ec5\u9002\u7528\u4e8e\u4eba\u5de5\u4e3b\u52a8\u63a7\u5236\u6cbb\u7597\uff0c\u4e5f\u9002\u7528\u4e8e\u5e7f\u6cdb\u7684\u4f11\u95f2\u6d3b\u52a8\uff0c\u5373\u770b\u7535\u89c6\u3002\n\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022017\u5e744\u670825\u65e5\uff1b4\uff084\uff09\uff1aCD003200\u3002\u5185\u653f\u90e8\uff1a10.1002/14651858\u3002CD003200\u3002pub7\u3002\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022017.PMID:28444695\u514d\u8d39PMC\u6587\u7ae0\u3002\u66f4\u65b0\u3002\u56de\u987e\n\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022016\u5e7412\u670820\u65e5\uff1b12\uff0812\uff09\uff1aCD003200\u3002\u5185\u653f\u90e8\uff1a10.1002/14651858\u3002CD003200\u3002pub6\u3002\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022016.PMID:27995604\u514d\u8d39PMC\u6587\u7ae0\u3002\u66f4\u65b0\u3002\u56de\u987e\n\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022016\u5e746\u670824\u65e5\uff1b\uff086\uff09 \uff1aCD003200\u3002\u5185\u653f\u90e8\uff1a10.1002/14651858\u3002CD003200\u3002pub5\u3002\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022016\u5e74PMID:27339435\u66f4\u65b0\u3002\u56de\u987e\n\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022016\u5e742\u67087\u65e5\uff1b2:CD003200\u3002\u5185\u653f\u90e8\uff1a10.1002/14651858\u3002CD003200\u3002pub4\u3002\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022016\u5e74PMID:26852189\u66f4\u65b0\u3002\u56de\u987e\n\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022015\u5e742\u670810\u65e5\uff1b\uff082\uff09 \uff1aCD003200\u3002\u5185\u653f\u90e8\uff1a10.1002/14651858\u3002CD003200\u3002pub3\u3002\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022015\u5e74\uff0cPMID:25674924\u66f4\u65b0\u3002\u56de\u987e", "note_en": "Prolonged periods of intense cognitive activity lead to a state of mental exhaustion. While widespread strategies to recover from mental exhaustion (i.e., watching TV) are non-effective, aerobic exercise seems to be a promising approach. This can be explained by the acute and chronic aerobic exercise-induced benefits on the central nervous system.\n  This study investigated the potential of a single bout of moderate aerobic exercise (65-75% of each participants&#39; individual V\u02d9O2peak) to recover from experimentally induced mental exhaustion. A randomized controlled trial on healthy adults (N = 99) was conducted. They performed 60 min of a cognitively demanding test battery, in order to induce mental exhaustion. Subsequently, they were randomized to one of three treatments: 30 min of moderate aerobic exercise on a cycle ergometer, 30 min of a simple lower body stretching routine (= active control treatment) or watching a popular sitcom (= passive control treatment). Cognitive flexibility performance, mood, tiredness, restlessness, self-perceived cognitive capacity, and motivation were assessed before and after treatment.\n  The empirical results showed that moderate aerobic exercise led to a better recovery for cognitive flexibility (mean difference divided by pooled standard deviation, Cohen&#39;s d= 0.737), mood (d= 0.405), tiredness (d= 0.480), self-perceived cognitive capacity (d= 0.214), and motivation (d= 0.524) compared to active control treatment. Moderate aerobic exercise was also more effective than passive control treatment (d= 0.102 - 0.286) with the exemption of tiredness (d= 0.015) and restlessness (d = -0.473).\n  In conclusion, this study suggests that a single bout of acute aerobic exercise supports regeneration of cognitive flexibility performance and of subjective well-being. This holds true not just compared to artificial active control treatment but also compared to widespread leisure time activity, namely watching TV.\n    Cochrane Database Syst Rev. 2017 Apr 25;4(4):CD003200. doi: 10.1002/14651858.CD003200.pub7.  Cochrane Database Syst Rev. 2017.  PMID:  28444695  Free PMC article.  Updated.  Review.\n  Cochrane Database Syst Rev. 2016 Dec 20;12(12):CD003200. doi: 10.1002/14651858.CD003200.pub6.  Cochrane Database Syst Rev. 2016.  PMID:  27995604  Free PMC article.  Updated.  Review.\n  Cochrane Database Syst Rev. 2016 Jun 24;(6):CD003200. doi: 10.1002/14651858.CD003200.pub5.  Cochrane Database Syst Rev. 2016.  PMID:  27339435  Updated.  Review.\n  Cochrane Database Syst Rev. 2016 Feb 7;2:CD003200. doi: 10.1002/14651858.CD003200.pub4.  Cochrane Database Syst Rev. 2016.  PMID:  26852189  Updated.  Review.\n  Cochrane Database Syst Rev. 2015 Feb 10;(2):CD003200. doi: 10.1002/14651858.CD003200.pub3.  Cochrane Database Syst Rev. 2015.  PMID:  25674924  Updated.  Review.", "posttime": "2022-02-17 12:29:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6709\u6c27,aerobic,\u8ba4\u77e5", "title": "\u6025\u6027\u6709\u6c27\u8fd0\u52a8\u4ee5\u4ece\u7cbe\u795e\u75b2\u60eb\u4e2d\u6062\u590d", "title_en": "Acute aerobic exercise to recover from mental exhaustion", "transed": 1, "url": "https://pubmed.ncbi.nlm.nih.gov/34516957/", "via": "", "real_tags": ["\u6709\u6c27", "aerobic", "\u8ba4\u77e5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073817, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7528\u4e8eWebAssembly\u7684Qt\uff1asoffice", "note_en": "Qt for WebAssembly: soffice", "posttime": "2022-02-17 12:28:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "webassembly,running", "title": "LibreOffice\u901a\u8fc7WebAssembly\u5728\u6d4f\u89c8\u5668\u4e2d\u672c\u673a\u8fd0\u884c", "title_en": "LibreOffice running natively in the browser via WebAssembly", "transed": 1, "url": "https://lab.allotropia.de/wasm/", "via": "", "real_tags": ["running"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073816, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5c06\u5982\u4f55\u62e5\u6709\u4e00\u4e2a\u5141\u8bb8\u66f4\u65b0\u548c\u540c\u6b65\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5b58\u50a8\u7f51\u7edc\uff1f\n\u8fd9\u4e9b\u95ee\u9898\u5b9e\u9645\u4e0a\u662fweb3\u5206\u5e03\u5f0f\u90e8\u5206\u7684\u6838\u5fc3\u3002Web3\u8fd8\u6709\u5176\u4ed6\u90e8\u5206\uff1a\u4e0d\u53d8\u6027\u3001\u52a0\u5bc6\u5b89\u5168\u6027\u7b49\u3002\u4f46\u8fd9\u4e9b\u5176\u4ed6\u5143\u7d20\u4e0d\u56de\u7b54\u5982\u4f55\u5728\u5206\u5e03\u5f0f\u6570\u636e\u5b58\u50a8\u4e0a\u6267\u884c\u66f4\u65b0*\n\u5728\u5bfb\u627e\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u65f6\uff0c\u6211\u770b\u5230\u4e86\u4e00\u4e2a\u76f8\u5f53\u7b80\u5355\u7684\u5de5\u5177\u4f5c\u4e3a\u57fa\u7840\uff1aJSON diff\u548cpatch\u3002\nJSON\uff0c\u56e0\u4e3aJSON\u662fweb\u7684\u7ed3\u6784\u5316\u6570\u636e\u683c\u5f0f\u3002\u5bf9\u4e8eWeb3\u6765\u8bf4\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c06\u7ee7\u7eed\u5b58\u5728\u3002\u5728\u6211\u4eec\u7684web\u67b6\u6784\u4e2d\uff0c\u51e0\u4e4e\u6240\u6709\u4eba\u90fd\u4f7f\u7528JSON\u3002\u5176\u4ed6\u683c\u5f0f\u5c06\u8d8a\u6765\u8d8a\u591a\u5730\u88ab\u7528\u4f5cJSON\u7684\u4f18\u5316\u3002\u5173\u8054\u6570\u7ec4\u5177\u6709\uff08\u5408\u7406\u7684\uff09\u4eba\u7c7b\u53ef\u8bfb\u6027\u4e4b\u7f8e\uff0c\u52a0\u4e0a\u73b0\u4ee3\u8ba1\u7b97\u673a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5e7f\u6cdb\u7684\u672c\u673a\u652f\u6301\u3002\u7535\u8111\u548c\u4eba\u7c7b\u90fd\u80fd\u8bfb\uff0c\u8fd9\u4e0d\u662f\u7231\uff01\ngit\u5206\u5e03\u5f0f\u7ba1\u7406\u6e90\u4ee3\u7801\u7b56\u7565\u4e2d\u7684\u4e00\u4e2a\u57fa\u672c\u5de5\u5177\u662fdiff\u548c\u8865\u4e01\u7684\u6982\u5ff5\u3002\u8fd9\u4e9b\u57fa\u672c\u64cd\u4f5c\u4f7fgit\u6210\u4e3a\u53ef\u80fd\u3002Diff\u7528\u4e8e\u6784\u9020\u53ef\u5e94\u7528\u4e8e\u5bf9\u8c61\u7684\u9762\u7247\uff0c\u4ece\u800c\u4f7f\u6700\u7ec8\u72b6\u6001\u5bf9\u67d0\u4e9b\u503c\u6709\u610f\u4e49\u3002\n\u5e94\u7528\u8865\u4e01\u662f\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u5c06\u67d0\u4e2a\u524d\u72b6\u6001\u63d0\u5347\u5230\u67d0\u4e2a\u540e\u72b6\u6001\u3002\u8865\u4e01\u5e76\u6ca1\u6709\u6307\u5b9a\u6240\u6709\u5185\u5bb9\u3002\u53ea\u6709\u6e90\u4ee3\u7801\u7684\u9884\u671f\u6b63\u786e\uff0c\u4ee5\u53ca\u66f4\u65b0\u540e\u7684\u9884\u671f\u6b63\u786e\u3002\n\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5bf9\u6e90\u6587\u672c\u7684\u4e0d\u540c\u90e8\u5206\u6267\u884c\u5206\u5e03\u5f0f\u66f4\u65b0\u3002\u51b2\u7a81\u4f1a\u5bfc\u81f4\u9700\u8981\u91c7\u53d6\u4e00\u4e9b\u8865\u6551\u63aa\u65bd\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u51b2\u7a81\uff0c\u5219\u53ef\u4ee5\u5408\u5e76\u6240\u6709\u5185\u5bb9\u4ee5\u83b7\u5f97\u6700\u7ec8\u72b6\u6001\uff0c\u8be5\u72b6\u6001\u5c0a\u91cd\u6240\u6709\u66f4\u65b0\uff0c\u65e0\u8bba\u5b83\u4eec\u6765\u81ea\u4f55\u65f6\u4f55\u5730\u3002\n\u8fd9\u4f7f\u5f97git\u53ef\u4ee5\u5b8c\u5168\u591a\u4e3b\uff0c\u800c\u4e0d\u9700\u8981\u6216\u5f3a\u5236\u4f7f\u7528\u4efb\u4f55\u590d\u6742\u7684\u534f\u8bae\uff08\u5982RAFT\uff09\u8fdb\u884c\u540c\u6b65\u3002\n\u9006\u5305\u5668Mark 2&#34\uff1bid&#34\uff1b\uff1a13234\uff0c&#34\uff1b\u540d\u79f0&#34\uff1b&#34\uff1b&#\u63cf\u8ff0&#34\uff1b&#34\uff1b&#34\uff1b\u63cf\u8ff0&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u9006\u5305\u5668Mark II\u662f\u9006\u5305\u5668\u7684\u6700\u65b0\u53d1\u5c55\uff0c\u7528\u4e8e\u4e3a\u5355\u4fa7\u76f8\u4f4d\u5206\u914d\u5668\u4ea7\u751f\u53cd\u5411\u65e0\u529f\u7535\u6d41\u3002&#\uff0c  &#34;\u4ef7\u683c&#34\uff1b\uff1a{&#34\uff1b\u4ef7\u503c&#34\uff1b&#34\uff1b3430.23&#34\uff1b&#34\uff1b\u8d27\u5e01&#34\uff1b&#34\uff1b\u6b27\u5143&#34\uff1b}&#34;\u80a1\u7968&#34\uff1b\uff1a32 ,  &#34;\u4f9b\u5e94\u5546&#34\uff1b\uff1a[&#34\uff1b\u4f9b\u5e94\u5546/123&#34\uff1b\uff0c&#34\uff1b\u4f9b\u5e94\u5546/4332&#34\uff1b]\n\u5982\u679cAlice\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6253\u5f00\u5bf9\u8c61\u5e76\u5c06\u9879\u76ee\u540d\u79f0\u66f4\u6539\u4e3a&#34\uff1b\u590d\u53e4\u5efa\u7b51\u6807\u5fd7II&#34\uff1b\uff0cBOB\u5e94\u8be5\u53ef\u4ee5\u540c\u65f6\u66f4\u65b0\u4f9b\u5e94\u5546\u540d\u5355\uff0c\u800c\u65e0\u9700\u76f8\u4e92\u5e72\u6d89&#39\uff1b\u811a\u8dbe\u3002\n\u5728\u5e94\u7528\u4e2d\uff0c\u8fd9\u79cd\u7b56\u5c55\u64cd\u4f5c\u901a\u5e38\u901a\u8fc7\u9501\u5b9a\u5bf9\u8c61\u6765\u5b9e\u73b0\u3002\u8fd9\u610f\u5473\u7740\u53ea\u6709\u4e00\u4e2a\u4eba\u80fd\u8d62\u3002\u9501\u662f\u5de8\u5927\u7684\u75db\u82e6\u6765\u6e90\uff0c\u4e0d\u4ec5\u56e0\u4e3a\u4f60\u53ef\u4ee5&#39\uff1b\u65e0\u6cd5\u5b9e\u73b0\u5176\u4ed6\u5b8c\u5168\u5408\u7406\u7684\u5e76\u53d1\u64cd\u4f5c\uff0c\u4f46\u56e0\u4e3a\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u8fc7\u65f6\u7684\u9501\uff0c\u5e76\u4e14\u5fc5\u987b\u786e\u5b9a\u4f55\u65f6\u91ca\u653e\u5b83\u4eec\u3002\n\u4f46\u5982\u679c\u8428\u8389\u6ca1\u6709&#39\uff1bDon\u2019\u6211\u4e0d\u80fd\u63d0\u4ea4\u5979\u7684\u6574\u4e2a\u5bf9\u8c61\u8fdb\u884c\u66f4\u65b0\uff0c\u4f46\u53ea\u63d0\u4ea4\u5979\u60f3\u66f4\u6539\u7684\u90e8\u5206\uff1f\u9c8d\u52c3\u4e5f\u8fd9\u4e48\u505a\u4e86\uff1f\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u6267\u884c\u66f4\u65b0\uff0c\u672c\u5730\u4e3aLice\uff0c\u672c\u5730\u4e3aBob\uff0c\u6700\u540e\u5728\u5171\u4eab\u670d\u52a1\u5668\u8d44\u6e90\u4e0a\u6267\u884c\u3002\n\u7ed3\u6784\u5316\u8865\u4e01\u53ef\u4ee5\u901a\u8fc7\u5728Alice\u63d0\u4ea4\u4e4b\u524d\u67e5\u770b\u5bf9\u8c61\u6765\u786e\u5b9a\uff0c\u7136\u540e\u4f7f\u7528diff\u4eceAlice&#39\u6784\u5efa\u8865\u4e01\uff1bs diff\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\n{&#34\uff1b\u59d3\u540d&#34\uff1b\uff1a{&#34\uff1b\u524d&#34\uff1b&#34\uff1b\u590d\u53e4\u88c5\u6f62\u5e08\u6807\u5fd72&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u590d\u53e4\u88c5\u6f62\u5e08\u6807\u5fd7II&#34\uff1b}\n\u73b0\u5728\uff0c\u4e24\u8005\u90fd\u53ef\u4ee5\u6e05\u6670\u5730\u5e94\u7528\u4e8e\u4e0a\u9762\u5217\u51fa\u7684\u539f\u59cb\u6587\u6863\u3002\u6211\u4eec\u53ef\u4ee5\u6beb\u65e0\u56f0\u96be\u5730\u6309\u4efb\u4f55\u987a\u5e8f\u5806\u53e0\u4efb\u4f55\u4e00\u4e2a\u8865\u4e01\u3002\u4e5f\u8bb8\u6211\u4eec\u8981\u6c42KBOB\u548cAlice\u5c31\u5e94\u7528\u7a0b\u5e8f\u987a\u5e8f\u8fbe\u6210\u4e00\u81f4\uff08\u4f7f\u7528git\u5b8c\u6210\u62c9/\u63a8\u64cd\u4f5c\uff09\u3002\u4f46\u4e5f\u8bb8\u6211\u4eec\u53ea\u662f\u5141\u8bb8\u4ed6\u4eec\u5728\u4ed6\u4eec\u6765\u7684\u65f6\u5019\u7533\u8bf7\u3002\u7b54\u6848\u53d6\u51b3\u4e8e\u5de5\u4f5c\u6d41\u7a0b\u3002\n{&#34\uff1b\u59d3\u540d&#34\uff1b\uff1a{&#34\uff1b\u524d&#34\uff1b&#34\uff1b\u590d\u53e4\u88c5\u6f62\u5e08\u6807\u5fd72&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b\u590d\u53e4\u88c5\u6f62\u5e08\u6807\u5fd72&#34\uff1b&#\n\u6211\u4eec\u6709\u4e2a\u95ee\u9898\u3002\u4f46\u6211\u4eec\u7acb\u5373\u53d1\u73b0\uff0c\u8fd9\u4e24\u8005\u5b58\u5728\u51b2\u7a81\uff0c\u7231\u4e3d\u4e1d\u53ef\u4ee5\u88ab\u8981\u6c42\u901a\u8fc7\u6d6e\u51fa\u6c34\u9762\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5728\u6570\u636e\u6574\u7406\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u5408\u7406\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002\u6211\u4eec\u53ef\u4ee5\u7528JSON diff\u6700\u7b80\u5355\u7684\u7248\u672c\u6765\u89e3\u51b3\u8fd9\u4e2a\u6570\u636e\u6574\u7406\u95ee\u9898\u3002\n\u8fd9\u79cd\u51b2\u7a81\u53ef\u4ee5\u5411\u7231\u4e3d\u4e1d\u6d6e\u51fa\u6c34\u9762\uff0c\u9c8d\u52c3\u53ef\u4ee5\u88ab\u5141\u8bb8\u7ee7\u7eed\u4ed6\u7684\u751f\u610f\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u95ee\u9898\u80fd\u7528CRDT\u81ea\u52a8\u89e3\u51b3\u5417\uff1f\u5f53\u7136\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u4f1a\u4ea7\u751f\u4f60\u60f3\u8981\u7684\u7ed3\u679c\u3002\u6700\u540e\u4e00\u6b65\u5f53\u7136\u4f1a\u594f\u6548\uff0c\u4f46\u63a5\u4e0b\u6765\u54ea\u4e00\u6b65\u66f4\u6b63\u786e\u53ef\u80fd\u9700\u8981\u4eba\u5de5\u5ba1\u67e5\uff0c\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e24\u79cd\u7ed3\u679c\u4ea4\u9519\uff08\u4e00\u79cd\u53ef\u80fd\u7684\u7ed3\u679c\uff01\uff09\u3002\n\u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6587\u672c\u5dee\u5f02\u5c06\u524d\u540e\u7684\u5185\u5bb9\u5236\u4f5c\u6210\u57fa\u4e8e\u6587\u672c\u7684\u8865\u4e01\u3002\u53ef\u80fdgits\u57fa\u4e8e\u884c\u7684\u65b9\u6cd5\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u800c\u662f\u5c06\u5355\u8bcd\u4f5c\u4e3a\u539f\u5b50\u7684\u65b9\u6cd5\u3002\u5b83\u4e0d\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u7279\u5b9a\u7684\u51b2\u7a81\uff0c\u4f46\u5b83\u53ef\u4ee5\u4f7f\u6587\u672c\u5b57\u6bb5\u66f4\u52a0\u7075\u6d3b\u3002\n\u7136\u800c\uff0c\u60a8\u60f3\u8981\u54ea\u4e00\u4e2a\uff0c\u9700\u8981DIFF\u7b97\u6cd5\u7684\u8bed\u4e49\u65b9\u5411\u3002\u867d\u7136\u8bb8\u591a\u7ed3\u6784\u5316\u7684\u5dee\u5f02\u95ee\u9898\u5c06\u901a\u8fc7\u6700\u7b80\u5355\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\uff0c\u4f46\u6700\u7ec8\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6709\u52a9\u4e8e\u6307\u5bfc\u5dee\u5f02\u542b\u4e49\u7684\u6a21\u5f0f\u3002\u5b57\u7b26\u4e32\u5b57\u6bb5\u53ef\u4ee5\u662f\u57fa\u4e8e\u6700\u4f73\u884c\u7684\u3001\u57fa\u4e8e\u5355\u8bcd\u7684\uff0c\u6216\u8005\u5b83\u4eec\u5fc5\u987b\u59cb\u7ec8\u662f\u539f\u5b50\u7684\uff08\u5c31\u50cf\u6807\u8bc6\u7b26\u4e00\u6837\uff09\u3002\n\u8865\u4e01\u5b9e\u9645\u4e0a\u662f\u66f4\u7b80\u5355\u7684\u64cd\u4f5c\u3002\u8865\u4e01\u5e94\u7528\u7a0b\u5e8f\u57fa\u672c\u4e0a\u53ea\u662f\u68c0\u67e5\u8bfb\u53d6\u72b6\u6001\u662f\u5426\u5339\u914d\uff0c\u7136\u540e\u66ff\u6362\u5199\u5165\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0cDiff\u5fc5\u987b\u8fdb\u884c\u8ba1\u7b97\uff0c\u800c\u4e14\u5728\u5b9e\u8df5\u4e2d\u7ecf\u5e38\u9700\u8981\u731c\u6d4b\u4ece\u8bfb\u72b6\u6001\u5230\u5199\u72b6\u6001\u7684\u826f\u597d\u8f6c\u6362\u3002diff\u63d0\u4f9b\u7684\u8865\u4e01\u7684\u5177\u4f53\u8c03\u6574\u53d6\u51b3\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u9700\u8981\u3002\u6709\u4e00\u4e9b\u901a\u7528\u7b97\u6cd5\u53ef\u4ee5\u5728\u4e00\u7cfb\u5217\u5e94\u7528\u4e2d\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u6ca1\u6709\u4e00\u79cd\u901a\u7528\u7b97\u6cd5\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u6a21\u5f0f\u63d0\u4f9b\u7684\u8bed\u4e49\u65b9\u5411\u3002\nDiff\u5728\u8ba1\u7b97\u4e0a\u4e5f\u8981\u6602\u8d35\u5f97\u591a\u3002\u627e\u5230\u6700\u5c0f\u7684\u53d8\u5316\u610f\u5473\u7740\u627e\u5230\u6700\u5927\u7684\u76f8\u4f3c\u6027\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u5bf9\u4e8eJSON\u5b57\u5178\u7684\u6846\u67b6\u6765\u8bf4\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u5bf9\u4e8e\u5217\u8868\u548c\u5b57\u7b26\u4e32\u6765\u8bf4\u5374\u975e\u5e38\u56f0\u96be\u3002\u5bf9\u4e8e\u5217\u8868\u5217\u8868\u3002\u3002\u3002\u55ef\uff0c\u6211&#39\uff1b\u6211\u5f85\u4f1a\u513f\u518d\u8c08\u3002\n\u8ba9&#39\uff1b\u5c31\u8fd9\u4e48\u8bf4\u5427&#39\uff1b\u6beb\u4e0d\u5938\u5f20\u5730\u8bf4\uff0c\u4f60\u53ef\u4ee5\u8f7b\u6613\u5730\u9677\u5165\u5b87\u5b99\u7684\u70ed\u5bc2\u4e4b\u4e2d\u3002\u56e0\u6b64\uff0c\u542f\u53d1\u5f0f\u5fc5\u987b\u662f\u4efb\u4f55\u5168\u81ea\u52a8\u5dee\u5f02\u7684\u4e00\u90e8\u5206\u3002\n\u4f46\u4e5f\u6709\u5176\u4ed6\u5de5\u4f5c\u6d41\u53ef\u80fd\u9700\u8981\u66f4\u7075\u6d3b\u7684\u65b9\u6cd5\u6765\u786e\u4fdd\u6570\u636e\u5b8c\u6574\u6027\u3002before\u72b6\u6001\u6b63\u5728\u91cd\u65b0\u8bbe\u7f6e\u4ee5\u6307\u5b9a\u8bfb\u53d6\u5bf9\u8c61\u6a21\u578b\u3002\u5b83\u544a\u8bc9\u6211\u4eec\uff0c\u5f53\u6211\u4eec\u5e94\u7528\u8865\u4e01\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u4ec0\u4e48\u662f\u771f\u5b9e\u7684\u3002\n\u5bf9\u4e8egit\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u884c\u884c\u6587\u672c\u3002\u4f8b\u5982\uff0c\u66f4\u6539\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u81ea\u8ff0\u6587\u4ef6\u3002txt\u6700\u521d\u662f\u5411\u4e00\u4e2a\u5411\u677e\u9f20\u95ee\u597d\u7684\u4eba\u95ee\u597d\uff0cgit\u5c06\u751f\u6210\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684\u8865\u4e01\uff1a\n\u8fd9\u4e0d\u662f&#39\uff1b\u5b83\u4e0d\u662f\u6700\u7d27\u51d1\u7684\u8865\u4e01\uff0c\u5982\u679chello\u88ab\u6539\u6210\u5176\u4ed6\u5355\u8bcd\uff0c\u6bd4\u5982\u201c\u95ee\u5019\u8bed\u201d\uff0c\u5b83\u5c31\u4f1a\u53d1\u751f\u51b2\u7a81\u3002\u5b83\u5bf9git\u5f88\u6709\u6548\u7684\u539f\u56e0\u662f\uff0c\u5bf9\u4e8e\u7f16\u7a0b\u8bed\u8a00\u6765\u8bf4\uff0c\u6587\u672c\u884c\u662f\u4e00\u79cd\u5408\u7406\u7684\u7c92\u5ea6\u3002\n\u4f46\u662f\u5510\u7684\u524d\u540e&#39\uff1b\u4e0d\u5fc5\u662f\u53f0\u8bcd\u6216\u6587\u5b57\u3002before\u53ef\u4ee5\u662f\u8bfb\u53d6\u72b6\u6001\u7684\u4efb\u4f55\u89c4\u8303\u3002\u5bf9\u4e8e\u94f6\u884c\u8d26\u6237\u63d0\u6b3e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u8981\u6c42\u524d\u72b6\u6001\u5927\u4e8e\u540e\u72b6\u6001\uff0c\u6216\u4e0e\u540e\u72b6\u6001\u76f8\u7b49\u3002\u8fd9\u5c06\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5c0f\u4ea4\u6613\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u4e0d&#39\uff1b\u4e0d\u8981\u900f\u652f\u3002\n\u6216\u8005\u6211\u4eec\u5e0c\u671b\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6307\u5b9abefore\u72b6\u6001\uff1f\u6216\u8005\uff0c\u6211\u4eec\u8bfb\u53d6\u4e86\u5f88\u591a\u503c\uff0c\u4ee5\u4fbf\u8ba1\u7b97\u5bf9\u8c61\u4e2d\u7684\u8fdb\u4e00\u6b65\u503c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u77e5\u9053\u8fd9\u4e9b\u503c\u90fd\u4e0d\u4f1a\u6539\u53d8\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u8bfb\u9694\u79bb\uff0c\u5b83\u6839\u636e\u6211\u4eec\u4f7f\u7528\u7684\u7528\u4f8b\u8fdb\u884c\u8c03\u6574&#39\uff1b\u6211\u4eec\u771f\u7684\u5728\u4e00\u8d77\u5de5\u4f5c\u3002\u5c06\u8865\u4e01\u4f5c\u4e3a\u66f4\u65b0\u7684\u5355\u4f4d\uff0c\u4e3a\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6070\u5230\u597d\u5904\u7684\u7c92\u5ea6\uff0c\u8fd9\u5b9e\u9645\u4e0a\u53ef\u4ee5&#39\uff1b\u6211\u4eec\u4e0d\u80fd\u63d0\u524d\u77e5\u9053\u3002\n\u8fd9\u662f\u4e00\u4e2a\u8d85\u8d8a\u4e86\u901a\u5e38\u7531\u6570\u636e\u5e93\u63d0\u4f9b\u7684\u9694\u79bb\u9009\u9879\u7684\u8fdb\u6b65\uff0c\u5e76\u4e14\u81ea\u7136\u5730\u6269\u5c55\u5230\u4e86\u5bf9\u8c61\u6216\u4e92\u8fde\u5bf9\u8c61\u7684\u7ec4\u7ec7\u56fe\uff08\u5982USDB\u4e2d\u5b58\u5728\u7684\uff09\u3002\n\u6211&#39\uff1b\u6211\u4eec\u5728TerminusX\u4e2d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684JSON\u5dee\u5f02\u548c\u8865\u4e01\u3002\u4f46\u6211\u4eec&#39\uff1brealso\u6b63\u5728\u5c06\u5176\u6269\u5c55\u5230aschema\u6307\u5b9a\u7684\u7248\u672c\u3002\u5b83&#39\uff1b\u5b83\u4e5f\u5f88\u5bb9\u6613\u5b9e\u73b0\uff0c\u800c\u4e14\u60f3\u8c61\u4e00\u4e2a\u5b8c\u6574\u7684\u8865\u4e01\u7a7a\u95f4\u975e\u5e38\u6709\u8da3\uff0c\u5176\u4e2d\u8bb8\u591a\u8865\u4e01\u6c38\u8fdc\u65e0\u6cd5\u7531adiff\u786e\u5b9a\uff0c\u4f46\u5bf9\u4e8e\u901a\u8fc7\u6587\u6863\u5b58\u50a8\u8fdb\u884c\u5206\u5e03\u5f0f\u4f20\u8f93\u6765\u8bf4\uff0c\u8fd9\u5c06\u975e\u5e38\u65b9\u4fbf\u3002\u6211\u4eec\u5c06\u5728\u5b9e\u8df5\u4e2d\u9047\u5230\u7528\u4f8b\u65f6\u6dfb\u52a0\u8fd9\u4e9b\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u4f46\u6211\u4eec&#39\uff1b\u6211\u4eec\u4e5f\u5f88\u9ad8\u5174\u542c\u5230\u4eba\u4eec\u5728\u91ce\u5916\u5df2\u7ecf\u9047\u5230\u7684\u7528\u4f8b\u3002\u4e00\u5b9a\u8981\u544a\u8bc9\u6211\uff01\n*CRDT\u9488\u5bf9\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\u56de\u7b54\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u4e0d\u662f\u9488\u5bf9\u6240\u6709\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u4e9b\u65b9\u6cd5\u53ea\u80fd\u66f4\u65b0\u67d0\u4e9b\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\u3002\u6b64\u5916\uff0c\u8bb8\u591a\u66f4\u65b0\u9700\u8981\u4eba\u5de5\u8f85\u52a9\u5ba1\u67e5\uff0c\u5e76\u4e14\u6c38\u8fdc\u4e0d\u9700\u8981aCRDT\u3002\u8fd8\u6709\u4e00\u4e9b\u5c06\u5177\u6709\u65e0\u6cd5\u5728CRDT\u4e2d\u6307\u5b9a\u7684\u5bf9\u8c61\u8bfb\u53d6\u6a21\u578b\u6761\u4ef6\u3002\u6700\u7ec8\uff0c\u6211\u4eec\u7684\u6570\u636e\u5e93\u5e94\u8be5\u652f\u6301\u4e00\u7cfb\u5217\u5206\u5e03\u5f0f\u6570\u636e\u7c7b\u578b\uff0c\u5305\u62ecCRDT\u3002\n\u5982\u679c\u60a8\u5bf9JSON diff&amp\uff1b\u611f\u5174\u8da3\uff1b\u5e15\u5947\uff0c\u6211\u4eec&#39\uff1b\u5c06\u4e8e2\u670817\u65e5\u683c\u6797\u5a01\u6cbb\u6807\u51c6\u65f6\u95f4\u4e0b\u53483\u70b9\u5728Twitch\u4e0a\u64ad\u653e\u3002", "note_en": "How will we have a distributed network of data stores which allow updates and synchronizations?\n    These questions are really at the heart of the distributed part of web3. Web3 has other parts: immutability, cryptographic security, etc. But these other elements do not answer how to perform updates on distributed data stores.*\n In seeking the answer to these questions I was led to see a rather simple tool as foundational: JSON diff and patch.\n JSON, because JSON is the structured data format for the web. This will continue to be true for Web3. Everyone uses JSON for just about everything in our web architecture. Other formats are going to be increasingly used as mere optimizations of JSON. Associative arrays have the beauty of (reasonable) human readability, combined with widespread native support in modern computer programming languages. Both computers and humans can read it, what\u2019s not to love!\n   A fundamental tool in git\u2019s strategy for distributed management of source code is the concept of the diff and the patch. These foundational operations are what make git possible. Diff is used to construct a patch that can be applied to an object such that the final state makes sense for some value of makes sense.\n The application of patches happens because we want a certain before state to be lifted to a certain after state. The patch doesn\u2019t specify everything. Only what it expects to be true of the source, and what it expects to be true after the update.\n With this, it\u2019s possible to have distributed updates performed on different parts of source text. Collisions result in some remedial action being required, but if there are no collisions everything can be merged to obtain a final state which respects all updates, no matter when or where they came from.\n This is what allows git to be fully multi-master, without requiring or forcing synchronization using any complex protocols (like RAFT).\n     {  &#34;id&#34; :  13234 ,  &#34;name&#34; :  &#34;Retro Encabulator Mark 2&#34; ,  &#34;description&#34; :  &#34;The Retro Encabulator Mark II is the lastest   development of the Retro Encabulator used to   generate inverse reactive current for unilateral   phase detractors.&#34; &#34; category&#34; :  &#34;Cardinal Grammeter Synchronisers&#34; ,  &#34;price&#34; :  {  &#34;value&#34; :  &#34;3430.23&#34; ,  &#34;currency&#34; :  &#34;Euro&#34;  } } ,  &#34;stock&#34; :  32 ,  &#34;suppliers&#34; :  [ &#34;Supplier/123&#34; , &#34;Supplier/4332&#34; ]  }\n If Alice opens the object in an application and changes the name ofthe item to &#34;Retro Encabulator Mark II&#34;, it should be possible for Bobto update the suppliers list simultaneously without either steppingon each other&#39;s toes.\n In applications, this sort of curation operation is often achieved witha  lock on the object. Which means only one person can win. And locksare a massive source of pain, not only because you can&#39;t achieveotherwise perfectly reasonable concurrent operations, but because yourisk getting stale locks and having to figure out when to release them.\n But what if Sally didn&#39;t submit her whole object for update, but onlythe part she wanted to be changed? And Bob did the same?\n Now we can perform the updates in three different places, locally forAlice, locally for Bob, and then finally at a shared server resource.\n The structured patch could be determined by looking at the object before Alice submitted it, and after, using  diff. The patchconstructed from Alice&#39;s diff might look like this:\n {  &#34;name&#34; :  {  &#34;@before&#34; :  &#34;Retro Encabulator Mark 2&#34; ,  &#34;@after&#34; :  &#34;Retro Encabulator Mark II&#34; } }\n   Now both can apply cleanly to the original document listed above. Wecan stack either patch in any order without difficulty. Perhaps we askBob and Alice to agree on the application order (using pull / push asis done with git). But maybe we just allow them to apply when theyarrive. The answer depends on the workflow.\n   {  &#34;name&#34; :  {  &#34;@before&#34; :  &#34;Retro Encabulator Mark 2&#34; ,  &#34;@after&#34; :  &#34;Retro Encabulator Mark two&#34; } }\n We have a problem. But we see immediately that the two are in conflictand Alice can be asked to resolve the question by surfacing it. In thecase of data curation, this is a perfectly reasonable workflow. And itis this problem of data curation that we can solve with the simplestversion of JSON diff.\n This conflict can be surfaced to Alice, and Bob can be allowed to goabout his business. Could this particular problem be resolved in apurely automatic way with a CRDT? Definitely, but it probably will notresult in what you want. Last first will work of course, but thenwhich is  more right might need human review, and even worse it mightresult in both results being interleaved (a likely outcome!).\n We  could make the before and after, however, be a text-based patchusing a textual diff. Probably gits line-based approach is  not whatwe want here, but rather one that takes words as atoms. It will notsolve this particular conflict, but it could make text fields muchmore flexible.\n Which of these you want, however, requires  semantic direction of thediff algorithm. While lots of structured diff problems will be solvedby the simplest algorithm, ultimately we need to have a schema thathelps to direct the meaning of our diffs. String fields might be bestline-based, word-based, or perhaps they must always be atomic (as withidentifiers).\n  Patch is actually the simpler operation. Patch application basicallyjust checks that the read state matches, and then substitutes thewrites.\n Diff, by contrast, has to calculate, and often in practice  guess agood transition from the read state to the write state. The specifictuning of the patch provided by a diff is dependent on the needs ofthe application. There are  generic algorithms that can work decentlyfor a range of applications, but there is no one size fits all. Thisis why we will need the  semantic direction which can be provided bya schema.\n Diff is also computationally  much more expensive. Finding theminimal change means finding the maximal similarity. As it turns out,this is pretty easy for the skeleton of a JSON dictionary, but rathera pain for lists, and strings. And for lists of lists... Well, I&#39;llget into that later.\n Let&#39;s just say it&#39;s no exaggeration that you can easily wander intothe heat-death of the universe. Hence heuristics have to be part ofany fully automatic diff.\n  But there are other workflows that might want a slightly more flexibleapproach to ensuring data integrity. The  before state is reallysitting there to specify the  read object model. It tells us what wewant to be true when we apply the patch.\n With git, this might be lines of text. For instance, to change a verysimple  README.txt which initially says  hello world to one thatsays  hello squirrels, git will produce a patch that looks somethinglike the following:\n  This isn&#39;t the most compact patch, and it will conflict if hello werechanged to some other word, for instance  greetings perhaps. Thereason that it works well for git is that lines of text are a somewhatreasonable granularity for programming languages.\n But the before and after don&#39;t have to be lines or words. The beforecould be any specification of the read state. For a bank accountwithdrawal, we might ask for the before state to be larger than, orequal to the after state. This would be a nice little transaction forensuring we don&#39;t overdraw.\n Or perhaps we want the before state to be specified with a regex? Ormaybe we read a  lot of values in order to calculate a further valuein the object, in which case we want to know that  none of thesevalues change.\n This approach gives us a kind of read isolation that is  tuned tothe use-case we&#39;re actually working with. Making patch the unit ofupdate gives us just the right granularity for our application, whichreally can&#39;t be known in advance.\n This is an advancement beyond the sort of isolation options usuallyprovided by a database, and one that extends naturally to objects orgraphs of interconnected objects (as exists in TerminusDB).\n  I&#39;ve implemented a simple JSON diff and patch in TerminusX. But we&#39;realso working on the extensions of this to those specified by aschema. It&#39;s also easy to implement and very interesting to imagine afull space of patches, many of which could never be determined by adiff, but which would be extremely handy to have for distributedtransactions over document stores. We will be adding these variousoperations as we run into use-cases in practice, but we&#39;re also verykeen to hear about use cases that people have already encountered inthe wild. Do let me know!\n * CRDTs answer this question for certain types ofdata structures - but not for all. Only certain  types ofdata structures can be updated with these approaches. In addition, manyupdates require human aided review and will never require aCRDT. Still others will have  object read model conditions that cannot be specified in a CRDT. Ultimately our databases should support arange of distributed datatypes including CRDT.\n  If you are interesed in JSON diff &amp; patch, we&#39;ll be streaming on Twitch on 17 Feb at 3pm GMT.", "posttime": "2022-02-17 12:22:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "json,\u5bf9\u8c61", "title": "\u533a\u522b\u662f\u4ec0\u4e48\uff1aJSON\u5dee\u5f02\u548c\u8865\u4e01", "title_en": "What's the Difference: JSON diff and patch", "transed": 1, "url": "https://github.com/terminusdb/technical-blogs/blob/main/blogs/json_diff_and_patch.md", "via": "", "real_tags": ["json", "\u5bf9\u8c61"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073815, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u67e5\u627e\u6bcf\u4e2aCVE\u7684PoC\uff1a\u68c0\u67e5\u662f\u5426\u6709\u4efb\u4f55\u4e00\u79cd\u65b9\u6cd5\u6307\u5411\u4f7f\u7528ffuf\u548c\u5173\u952e\u5b57\u5217\u8868\u7684PoC\n\u5982\u4e0a\u6240\u8ff0\uff0c\u8be5\u5b58\u50a8\u5e93\u4e2d\u7684\u51e0\u4e4e\u6240\u6709\u5185\u5bb9\u90fd\u662f\u81ea\u52a8\u751f\u6210\u7684\u3002\u6211\u4eec\u4ed4\u7ec6\u8bbe\u8ba1\u4e86\u5de5\u4f5c\u6d41\u7a0b\uff08\u5e76\u7ee7\u7eed\u5f00\u53d1\uff09\uff0c\u4ee5\u786e\u4fdd\u7ed3\u679c\u5c3d\u53ef\u80fd\u51c6\u786e\u3002\n\u89c2\u5bdf\u5b58\u50a8\u5e93\uff0c\u4ee5\u4fbf\u5728\u65b0POC\u4e0a\u5e02\u540e\u7acb\u5373\u6536\u5230\u901a\u77e5\u3002\n\u641c\u7d22\u7279\u5b9a\u4ea7\u54c1\uff08\u53ef\u80fd\u8fd8\u6709\u7248\u672c\uff09\u4ee5\u67e5\u627e\u4e0e\u4e4b\u76f8\u5173\u7684\u6240\u6709\u516c\u5f00\u6f0f\u6d1e\u3002\n\u6b22\u8fce\u6240\u6709\u7684\u8d21\u732e/\u60f3\u6cd5/\u5efa\u8bae\uff01\u901a\u8fc7GitHub issues\u6216\u5728us@trick3st\u4e0a\u63a8\u7279\u521b\u5efa\u4e00\u5f20\u65b0\u7968\u3002\n\u6211\u4eec\u76f8\u4fe1\u4fee\u8865\u7684\u4ef7\u503c\uff1b\u5343\u7bc7\u4e00\u5f8b\u7684\u89e3\u51b3\u65b9\u6848\u5f88\u5c11\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5728trickest\u4e0a\u6ce8\u518c\u6f14\u793a\u3002com\u6765\u6839\u636e\u60a8\u7684\u7528\u4f8b\u81ea\u5b9a\u4e49\u6b64\u5de5\u4f5c\u6d41\uff0c\u8bbf\u95ee\u66f4\u591a\u5de5\u4f5c\u6d41\uff0c\u6216\u8005\u4ece\u5934\u5f00\u59cb\u6784\u5efa\u81ea\u5df1\u7684\u5de5\u4f5c\u6d41\uff01", "note_en": "Find PoCs for each CVE using 2 techniques: Check if any of them points to a PoC using  ffuf and a list of keywords\n As described, almost everything in this repository is generated automatically. We carefully designed the workflow (and continue to develop it) to ensure the results are as accurate as possible.\n  Watch the repository to receive notifications about new PoCs as soon as they go public.\n Search for a specific product(s) (and possibly version) to find all public exploits related to it.\n  All contribtutions/ideas/suggestions are welcome! Create a new ticket via  GitHub issues or tweet at us  @trick3st.\n  We believe in the value of tinkering; cookie-cutter solutions rarely cut it. Sign up for a demo on  trickest.com to customize this workflow to your use case, get access to many more workflows, or build your own from scratch!", "posttime": "2022-02-17 12:20:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "cve", "title": "\u51e0\u4e4e\u6240\u6709\u516c\u5f00\u7684CVE PoC", "title_en": "Almost every publicly available CVE PoC", "transed": 1, "url": "https://github.com/trickest/cve", "via": "", "real_tags": ["cve"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073814, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b63\u5982\u6211\u4e4b\u524d\u6240\u8bf4\uff0cPyFL\u662f\u6211\u4eec\u5176\u4ed6\u4eba\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u3002\uff08\u53ef\u5728pyflang.com\u4e0a\u627e\u5230\u3002\uff09\nPyFL\u73b0\u5728\u6709\u7c7b\u578b\u68c0\u67e5\u529f\u80fd\u2014\u2014\u6ca1\u6709\u7c7b\u578b\u58f0\u660e\u3002\u76f8\u53cd\uff0c\u7c7b\u578b\u662f\u901a\u8fc7\u5728\u7c7b\u578b\u57df\u4e0a\u8bc4\u4f30\u7a0b\u5e8f\u800c\u751f\u6210\u7684\u3002\n\u5728PyFL\u4e2d\uff0c\u6240\u6709\u666e\u901a\u4eba\u89c9\u5f97\u56f0\u96be\u6216\u5b8c\u5168\u5947\u602a\u7684\u4e8b\u60c5\u90fd\u6d88\u5931\u4e86\uff1a\u5355\u5b50\u3001\u5f3a\u5236\u5496\u55b1\u3001\u540e\u7f6e\u6216\u524d\u7f00\u7b26\u53f7\u3001\u6a21\u5f0f\u5339\u914d\u7b49\uff0c\u800c\u4e0d\u662f\u51fd\u6570\u5e94\u7528\u7684\u4e2d\u7f00\u7b26\u53f7\u548cf\uff08x\uff0cy\uff0cz\uff09\u8bed\u6cd5\u3002\u8fd9\u79cd\u5947\u602a\u7684\u4e1c\u897f\u6709\u5b83\u7684\u652f\u6301\u8005\uff0c\u4f46PyFL\u8bc1\u660e\u5b83\u5e76\u4e0d\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u56fa\u6709\u7ec4\u6210\u90e8\u5206\u3002\n\u5c24\u5176\u662f\u7e41\u7410\u3001\u5197\u957f\u7684\u7c7b\u578b\u58f0\u660e\u3002\u5728Haskell\u7684\u5927\u591a\u6570\u7f16\u7a0b\u793a\u4f8b\u4e2d\uff0c\u90fd\u662f\u4ece\u8fd9\u4e9b\u58f0\u660e\u5f00\u59cb\u7684\u3002\u5728PyFL\u4e2d\uff0c\u4f60\u8df3\u8fc7\u4e86\u8fd9\u4e2a\u9636\u6bb5\u3002\n\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u6ca1\u6709\u542c\u8bf4\u7684\u60c5\u51b5\u4e0b\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u4e58\u6cd5\u3002PyFL\u662f\u52a8\u6001\u7c7b\u578b\u7684\uff0c\u5e76\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u8ba1\u7b97\u662f\u5426\u5408\u7406\u3002\n\u7136\u800c\uff0c\u8fd0\u884c\u65f6\u8ba1\u7b97\u610f\u5473\u7740\u60a8\u5fc5\u987b\u5b9e\u9645\u8fd0\u884c\u7a0b\u5e8f\u624d\u80fd\u627e\u5230\u8fd9\u4e9b\u7c7b\u578b\u7684\u9519\u8bef\u2014\u2014\u5e76\u4e14\u5e78\u8fd0\u5730\u9047\u5230\u5b83\u4eec\u3002\u4ed6\u4eec\u4e0d\u4e00\u5b9a\u6bcf\u6b21\u90fd\u4f1a\u66b4\u9732\u81ea\u5df1\u3002\n\u6b63\u5982\u4e00\u4f4d\u9000\u4f11\u7684\u4e13\u4e1a\u4eba\u58eb\u6240\u6307\u51fa\u7684\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d1\u5e03\u8be5\u8f6f\u4ef6\uff0c\u7136\u540e\u4f1a\u6709\u6210\u5343\u4e0a\u4e07\u7684\u7528\u6237\u4e0e\u52a8\u6001\u7c7b\u578b\u68c0\u67e5\u5668\u53d1\u751f\u51b2\u7a81\u3002\n\u56e0\u6b64\uff0c\u4ecd\u7136\u9700\u8981\u8fdb\u884c\u9759\u6001\u5206\u6790\u4ee5\u907f\u514d\u8fd0\u884c\u65f6\u9519\u8bef\u3002\u9700\u8981\u7f16\u8bd1\u65f6\u7c7b\u578b\u68c0\u67e5\u3002\n\u4f46\u662f\u5982\u4f55\u5728\u6ca1\u6709\u7c7b\u578b\u58f0\u660e\u7684\u8bed\u8a00\u4e2d\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u5462\uff1f\u6211\u771f\u7684\u4e0d\u60f3\u518d\u52a0\u4e0a\u5b83\u4eec\u2014\u2014\u90a3\u5c06\u662f\u5bf9\u201c\u4e3a\u6211\u4eec\u5176\u4f59\u4eba\u201d\u539f\u5219\u7684\u4e00\u6b21\u5927\u5012\u9000\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u2014\u2014\u7c7b\u578b\u63a8\u65ad\u3002\u8fd9\u610f\u5473\u7740\u5728\u4e0d\u6253\u6270\u7a0b\u5e8f\u5458\u7684\u60c5\u51b5\u4e0b\uff0c\u5206\u6790\u7a0b\u5e8f\u5e76\u63a8\u65ad\u51fa\u81f3\u5c11\u4e00\u4e9b\u7c7b\u578b\u3002\na+f\uff08b\uff09\uff0c\u5176\u4e2da=4\uff1bb=a+9\uff1bf\uff08n\uff09=\u5982\u679cn&lt\uff1b2\u7136\u540e1\u5176\u4ed63*f\uff08n-1\uff09+1 fi\uff1b\u7ec8\u6b62\n\u5f88\u660e\u663e\uff0ca\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u56e0\u6b64b\u4e5f\u662f\u3002\u8fd9\u4e9b\u4e8b\u5b9e\u6e90\u4e8e\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\u662f\u6574\u6570\u7684\u57fa\u672c\u7c7b\u578b\u89c4\u5219\u3002\u4e0d\u9700\u8981\u58f0\u660eb:int\u3002\nf\uff08b\uff09\u4f3c\u4e4e\u4e5f\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5c3d\u7ba1\u5728\u8fd9\u4e2a\u9636\u6bb5\u8fd8\u4e0d\u6e05\u695a\u4f60\u5c06\u5982\u4f55\u6b63\u5f0f\u8bc1\u660e\u5b83\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\n\u63a8\u65ad\u7c7b\u578b\u4e0e\u8ba1\u7b97\u7c7b\u4f3c\uff0c\u53ea\u662f\u653e\u5f03\u4e86\u5b9e\u9645\u6570\u636e\uff0c\u800c\u662f\u5408\u5e76\u4e86\u7c7b\u578b\u3002\u4f7f\u7528\u8fd9\u6837\u7684\u89c4\u5219\nint+int=intnum+int=numint*int=intint/int=numnum&lt\uff1bnum=boolif bool\u7136\u540eint else int fi=int\n\u5f53\u7136\u4f60\u4f1a\u5931\u53bb\u4fe1\u606f\uff1b\u7279\u522b\u662f\uff0c\u60a8\u4e0d\u77e5\u9053\u5c06\u9009\u62e9\u6761\u4ef6\u7684\u54ea\u4e00\u4e2a\u5206\u652f\u3002\u8fd9\u610f\u5473\u7740\u8ba1\u7b97\u9012\u5f52\u7a0b\u5e8f\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f7f\u7528\u6761\u4ef6\u6765\u89e6\u53d1\u7ec8\u6b62\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6b64\u7c7b\u578b\u65b9\u6848\u540c\u65f6\u5305\u542bint\uff08\u6574\u6570\uff09\u548cnum\uff08\u6570\u5b57\uff09\u3002\u6ce8\u610fint\u4e5f\u662f\u6570\u5b57\uff0c\u4f8b\u5982\u3002\u3002g\u3001 num+int=num\u3002\u8fd9\u91ccint\u662fnum\u7684\u5b50\u7c7b\u578b\u3002\u8fd8\u6709\u4e24\u4e2a\u5176\u4ed6\u5b50\u7c7b\u578b\uff1aintlist\u662fnumlist\u7684\u5b50\u7c7b\u578b\uff0c\u800cnumlist\u53c8\u662flist\u7684\u5b50\u7c7b\u578b\u3002intlist\u7684\u5934\u662fint\uff0cnumlist\u7684\u5c3e\u662fnumlist\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\n\u5b9e\u73b0\u8fd9\u79cd\u504f\u5e8f\u9700\u8981\u5927\u91cf\u7684\u7f16\u7801\uff0c\u6211\u6ca1\u6709\u4f7f\u7528\u5355\u72ec\u7684stringlist\u548cwordlist\u7c7b\u578b\uff0c\u66f4\u4e0d\u7528\u8bf4listlist\u4e86\u3002\u6211\u5199\u4e86\u4e00\u4e2a\u51fd\u6570sb\uff08p\uff0cq\uff09\u6765\u6d4b\u8bd5p\u662f\u5426\u662fq\u7684\u4e00\u4e2a\u5b50\u7c7b\u578b\uff0c\u4ee5\u53ca\u4e00\u4e2a\u51fd\u6570lub\uff08p\uff0cq\uff09\u6765\u7ed9\u51fap\u548cq\u7684\u6700\u5c0f\u4e0a\u754c\u3002\n\u663e\u7136\uff0c\u6211\u7684\u9886\u57df\u8fdc\u8fdc\u6ca1\u6709\u8fbe\u5230\u6a21\u4effHaskell\u7c7b\u578b\u58f0\u660e\u7684\u7ec6\u5fae\u5dee\u522b\u6240\u5fc5\u9700\u7684\u6c34\u5e73\u3002\u4f8b\u5982\uff0c\u5728Haskell\u4e2d\uff0c\u53ef\u4ee5\u5c06\u53d8\u91cf\u58f0\u660e\u4e3a\u6574\u6570\u5217\u8868\u3002\u6211\u9700\u8981\u4e00\u4e2a\u65e0\u9650\u504f\u5e8f\u3002\u4f46\u5b83\u9002\u7528\u4e8e\u8303\u56f4\u5e7f\u6cdb\u7684\u7a0b\u5e8f\uff0c\u5e76\u6355\u6349\u5230\u8303\u56f4\u5e7f\u6cdb\u7684\u9519\u8bef\u3002\n\u56e0\u6b64\uff0c\u6211\u63d0\u51fa\u7684\u8ba1\u5212\u662f\u4f7f\u7528PyFL\u8ba1\u7b97\u5668\u5e76\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u6837\u5b83\u5c31\u4e0d\u4f1a\u4ea7\u751f\u7a0b\u5e8f\u8f93\u51fa\u7684\u5b9e\u9645\u6570\u636e\uff0c\u800c\u662f\u8f93\u51fa\u901a\u8fc7\u5728\u62bd\u8c61\u7c7b\u578b\u57df\u4e0a\u201c\u8fd0\u884c\u201d\u7a0b\u5e8f\u800c\u4ea7\u751f\u7684\u7c7b\u578b\u3002\u8fd9\u662f\u62bd\u8c61\u89e3\u91ca\u7684\u57fa\u672c\u601d\u60f3\uff0c\u5bf9\u6211\u6765\u8bf4\u5f88\u96be\u6709\u72ec\u521b\u6027\u3002\n\u8be5\u65b9\u6848\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\uff0c\u5b83\u4e0d\u4ec5\u907f\u514d\u4e86\u7a0b\u5e8f\u5458\u7c7b\u578b\u58f0\u660e\uff0c\u8fd8\u907f\u514d\u4e86\u51fd\u6570\u7c7b\u578b\u3002\u8fd9\u662f\u4e0a\u9762\u7ed9\u51fa\u7684\u7a0b\u5e8f\u7684\u9ad8\u9636\u53d8\u4f53\na+f\uff08b\uff09\uff0c\u5176\u4e2ddb\uff08g\uff09=\u03bb\uff08x\uff09g\uff08g\uff08x\uff09\uff09\u7ed3\u675f\uff1binc\uff08u\uff09=u+2\uff1bf=db\uff08\u516c\u53f8\uff09\uff1ba=4\uff1bb=5\uff1b\u7ec8\u6b62\n\u5b83\u7684\u8ba1\u7b97\u7ed3\u679c\u4e3aint\uff0c\u5c3d\u7ba1\u6d89\u53ca\u4e8c\u9636\u51fd\u6570db\u3002\n\u9012\u5f52\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u8ba1\u7b97\u4e0d\u4f1a\u7ec8\u6b62\u3002\u8fd9\u8ba9\u6211\u6709\u4e00\u6bb5\u65f6\u95f4\u611f\u5230\u56f0\u60d1\u3002\n\u5f53\u4f7f\u7528\u901a\u5e38\u7684\u8ba1\u7b97\u5668\u8fd0\u884c\u65f6\uff0c\u5b83\u4f1a\u8fc5\u901f\u7ed9\u51fa\u6b63\u786e\u7684\u7b54\u68485040\u3002\u5f53if-then-else fi\u6700\u7ec8\u9009\u62e9\u7b2c\u4e00\u4e2a\u5907\u9009\u65b9\u6848\u65f6\uff0c\u9012\u5f52\u7ec8\u6b62\u3002\u4f46\u662f\u5f53\u4f7f\u7528\u7c7b\u578b\u8ba1\u7b97\u5668\u8fd0\u884c\u65f6\uff0cif\u6761\u4ef6\u4ec5\u4ec5\u662fbool\uff0c\u5fc5\u987b\u63a2\u7d22\u8fd9\u4e24\u79cd\u9009\u62e9\u3002\u8fd9\u5bfc\u81f4\u65e0\u9650\u9012\u5f52\uff0cpython\u8fd0\u884c\u65f6\u5806\u6808\u6ea2\u51fa\uff0c\u51fa\u73b0\u5206\u6bb5\u9519\u8bef\uff0cpython\u5d29\u6e83\u3002\u4e0d\u7528\u8bf4\uff0c\u6ca1\u6709\u751f\u6210\u7c7b\u578b\u4fe1\u606f\n\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u5411evaluator\u6dfb\u52a0\u4e86\u5ea6\u91cf\uff0c\u4ee5\u67e5\u770b\u751f\u6210\u4e86\u591a\u5c11\u8ba1\u7b97\u3002\u5176\u4e2d\u4e00\u4e2a\u6307\u6807\u662f\u8c03\u7528\u8bc4\u4f30\u51fd\u6570\u7684\u6b21\u6570\u3002\u8fd9\u4e9b\u6dfb\u52a0\u5185\u5bb9\u88ab\u8f6c\u79fb\u5230\u4ec5\u9002\u7528\u4e8e\u66ff\u4ee3\u7c7b\u578b\u7684\u8bc4\u4f30\u5668\u4e2d\u3002\n\u6700\u540e\uff0c\u6211\u610f\u8bc6\u5230\uff0c\u6211\u53ef\u4ee5\u901a\u8fc7\u5728\u8fd9\u4e2a\u6307\u6807\u4e0a\u8bbe\u7f6e\u4e00\u4e2a\u4e0a\u9650\u6765\u5f3a\u5236\u7ec8\u6b62\u2014\u2014\u6bd4\u598230\u3002\u6211\u53ef\u4ee5\u770b\u5230\u7ed3\u679c\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u589e\u52a0\u4e0a\u9650\uff0c\u770b\u770b\u65b0\u7684\u7ed3\u679c\uff0c\u518d\u6b21\u589e\u52a0\u4e0a\u9650\uff0c\u76f4\u5230\u4e00\u5207\u90fd\u5b89\u5b9a\u4e0b\u6765\u3002\n\u8fd9\u6bd4\u6211\u9884\u60f3\u7684\u8fd8\u8981\u597d\u3002\u6211\u5728pylucid\u4e2d\u8ba1\u7b97\u7ef4\u5ea6\u7684\u7c7b\u4f3c\u65b9\u6848\u4e0a\u8fdb\u884c\u4e86\u5c1d\u8bd5\uff0c\u7ed3\u679c\u53d1\u73b0\u5373\u4f7f\u662fcap\u7684\u5c0f\u503c\u4e5f\u7ed9\u51fa\u4e86\u6b63\u786e\u7684\u7b54\u6848\u3002\n\u8fd9\u91cc\u7684\u96be\u9898\u662f\uff0c\u8fd9\u4e2a\u65b9\u6848\u4f3c\u4e4e\u663e\u800c\u6613\u89c1\uff0c\u4f46\u6211\u4ece\u672a\u5728\u5370\u5237\u54c1\u4e2d\u89c1\u8fc7\u3002\u6216\u8005\u4efb\u4f55\u5173\u4e8e\u5982\u4f55\u5728\u66ff\u4ee3\u57df\u4e0a\u6c42\u503c\u65f6\u907f\u514d\u975e\u7ec8\u6b62\u7684\u8ba8\u8bba\u3002\u7136\u800c\uff0c\u5728\u53e6\u4e00\u4e2a\u9886\u57df\u8fdb\u884c\u8bc4\u4f30\u662f\u62bd\u8c61\u89e3\u91ca\u7684\u57fa\u672c\u601d\u60f3\u3002\u5982\u679c\u6709\u4eba\u6709\u4efb\u4f55\u89c1\u89e3\uff0c\u8bf7\u4e0e\u6211\u5206\u4eab\u3002\n\u6240\u4ee5\u6211\u628aevaluate\u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570\u8bbe\u4e3a30\u6b21\u3002\u7ed3\u679c\u8bc1\u660e30\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u5b57\uff0c\u6211\u672c\u6765\u53ef\u4ee5\u7528\u4e00\u4e2a\u5c0f\u5f97\u591a\u7684\u5e3d\u5b50\u9003\u8131\uff0c\u4f46\u90a3\u53c8\u600e\u6837\uff1f\n\u73b0\u5728\uff0c\u5f53\u6211\u8fd0\u884c\u7c7b\u578b\u8ba1\u7b97\u5668\u65f6\uff0c\u5b83\u4f1a\u5feb\u901f\u505c\u6b62\u5e76\u751f\u6210\u2026int\uff0c\u6b63\u786e\u3002\u5b83\u6210\u529f\u5730\u63a8\u65ad\u51fa\u6574\u6570\u7684\u9636\u4e58\u662f\u6574\u6570\u3002\u6ca1\u6709\u7a0b\u5e8f\u5458\u7684\u8f93\u5165\u3002\n\u95ee\u9898\u662f\uff0c\u5f53\u4e00\u4e2a\u8bc4\u4f30\u88ab\u9650\u5236\u65f6\uff0c\u5b83\u4f1a\u8fd4\u56de\u4ec0\u4e48\uff1f\u6211\u731c\u5b83\u5e94\u8be5\u8fd4\u56de\u7c7b\u578b\u57df\u7684\u5e95\u90e8\u5143\u7d20\u3002\u7531\u4e8e\u8fd8\u6ca1\u6709\u4e00\u4e2a\u5e95\u5c42\u5143\u7d20\uff0c\u6211\u6dfb\u52a0\u4e86\u4e00\u4e2a\uff1a\u7c7b\u578bnone\u3002\u7c7b\u578bnone\u4e0d\u662f\u4efb\u4f55\u6570\u636e\u5bf9\u8c61\u7684\u7c7b\u578b\u3002\u5982\u679c\u5c06\u4e00\u4e2a\u7c7b\u578b\u89c6\u4e3a\u4e00\u4e2a\u96c6\u5408\uff08\u8be5\u7c7b\u578b\u7684\u6240\u6709\u5bf9\u8c61\u7684\u96c6\u5408\uff09\uff0c\u5219\u201c\u65e0\u201d\u662f\u7a7a\u96c6\u3002\n\u6211\u5fc5\u987b\u5236\u5b9a\u51fa\u65e0\u6761\u4ef6\u8ba1\u7b97\u7684\u89c4\u5219\u3002\u7531\u4e8enone\u662fnum\u7684\u5b50\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3anum\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u89c4\u5219none+num=num\uff08\u4ee5\u53canone+none=none\uff09\n\u540c\u6837\uff0c\u5982\u679c\u6211\u4eec\u8ba1\u7b97f\uff08x\uff0cy\uff09\u5e76\u4e14f\u8ba1\u7b97\u4e3a\u65e0\uff0c\u7ed3\u679c\u5e94\u8be5\u662f\u65e0\u3002\u6211\u627f\u8ba4\u8fd9\u662f\u731c\u6d4b\uff0c\u4f46\u5b83\u7ed9\u51fa\u4e86\u6b63\u786e\u7684\u7b54\u6848\u3002\n\u8fd9\u9700\u8981\u91cd\u5199sb\u548club\uff0c\u8fd9\u53d8\u5f97\u76f8\u5f53\u590d\u6742\u3002\u5982\u679c\u6211\u60f3\u6269\u5c55\u6211\u7684\u9886\u57df\uff0c\u6211\u5fc5\u987b\u60f3\u51fa\u66f4\u7cfb\u7edf\u7684\u65b9\u6cd5\u3002\n\u9636\u4e58\u7a0b\u5e8f\u4e4b\u6240\u4ee5\u6709\u6548\uff0c\u662f\u56e0\u4e3aPyFL\uff08\u548cHaskell\uff09\u5185\u7f6e\u4e86\u9012\u5f52\uff0c\u8ba1\u7b97\u5668\u5728\u5b9a\u4e49fac\u7684\u76f8\u540c\u73af\u5883\u4e2d\u8bc4\u4f30fac\u7684\u5b9a\u4e49\u3002\u4f46\u5982\u679c\u9012\u5f52\u4e0d\u662f\u5185\u7f6e\u7684\u5462\uff1f\u6211\u4eec\u8fd8\u80fd\u5b9a\u4e49\u9636\u4e58\u5417\uff1f\u8fd9\u5c31\u662flambda\u6f14\u7b97\uff08\u6ca1\u6709\u5185\u7f6e\u9012\u5f52\uff09\u5f00\u53d1\u4eba\u5458\u9762\u4e34\u7684\u95ee\u9898\u3002\n\u8d77\u521d\uff0c\u8fd9\u4f3c\u4e4e\u4e0d\u592a\u53ef\u80fd\u3002\u4f46\u540e\u6765\u5e93\u91cc\u53d1\u660e\u4e86Y\u7ec4\u5408\u5668\u3002\u7ed9\u4f60\n\u5b83\u53ea\u662f\u4e00\u4e2a\u5c0f\u7684\u8868\u8fbe\u5f0f\uff0c\u5177\u6709\u795e\u5947\u7684\u6027\u8d28\uff0cYf\u51cf\u5c11\u5230f\uff08Yf\uff09\u3002\u5b83\u5728PyFL\u7b26\u53f7\u4e2d\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u5b9a\u4e49\uff0c\u5373\n\u5728\u8fd9\u79cd\u5f62\u5f0f\u4e0b\uff0c\u5f88\u5bb9\u6613\u770b\u51fa\u5b83\u662f\u6709\u6548\u7684\u3002\u6211\u4eec\u7528g\u4ee3\u66ff\u65b9\u7a0b\u4e2d\u7684x\uff0c\u5f97\u5230g\uff08g\uff09=f\uff08g\uff08g\uff09\uff09\u3002\n\u5f0f\u4e2dY\uff08f\uff09=g\uff08g\uff09\uff0c\u5176\u4e2dg\uff08x\uff09=f\uff08x\uff08x\uff09\uff09\u7ed3\u675f\uff1ba\uff08f\uff09=\u03bb\uff08n\uff09\u5982\u679cn&lt\uff1b2\u7136\u540e1\u5426\u5219n*f\uff08n-1\uff09fi\u7ed3\u675f\uff1bfac=Y\uff08a\uff09\uff1b\u7ec8\u6b62\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u975e\u9012\u5f52\u7684\uff1a\u6ca1\u6709\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u5b9a\u4e49\u53d8\u91cf\u672c\u8eab\u3002\n\u8fd9\u4e2a\u7a0b\u5e8f\u4e0d\u80fd\u7528Haskell\u7f16\u5199\u3002\u5b83\u4f7f\u7528\u65e0\u6cd5\u952e\u5165\u7684\u81ea\u6211\u5e94\u7528\u7a0b\u5e8f\u3002\u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u7528Haskell\u7f16\u5199\u9636\u4e58\uff0c\u4f46\u4e0d\u662f\u8fd9\u6837\u3002\u6211\u4eec\u5fc5\u987b\u6c42\u52a9\u4e8eHaskell\u7684\u5185\u7f6e\u9012\u5f52\uff0c\u6bd4\u5982\u5b9a\u4e49Y\uff08f\uff09=f\uff08Y\uff08f\uff09\uff09\u3002\n\u7136\u540e\u95ee\u9898\u51fa\u73b0\u4e86\uff0cPyFL\u7684\u7c7b\u578b\u68c0\u67e5\u5462\uff1f\u5f53\u6211\u4eec\u8bc4\u4f30\u8fd9\u4e2a\u9879\u76ee\u7684\u7c7b\u578b\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\n\u8bf4\u5b9e\u8bdd\uff0c\u6211\u4e0d\u786e\u5b9a\u8fd9\u662f\u5426\u7ba1\u7528\u3002\u4f46\u662f\u73b0\u5728\u56de\u60f3\u8d77\u6765\uff0c\u5982\u679cPyFL\u53ef\u4ee5\u5904\u7406Y\u5728\u6574\u6570\u4e0a\u7684\u5b9a\u4e49\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5728\u7c7b\u578b\u4e0a\u5462\uff1f", "note_en": "As I\u2019ve said before, PyFL is functional programming for the rest of us. (It\u2019s available at  pyflang.com.)\n PyFL now has type checking \u2013 without type declarations. Instead the type is produced by evaluating the program over the domain of types.\n   In PyFL gone are all the things that ordinary people find difficult or downright weird: monads, mandatory currying, post- or prefix notation, pattern matching, etc. Instead infix notation and  f(x,y,z) syntax for function application. The weird stuff has it\u2019s proponents but PyFL proves it\u2019s not inherently part of functional programming.\n Gone in particular are cumbersome, verbose type declarations. In most examples of programming in Haskell it all begins with these declarations. In PyFL you skip this stage.\n That doesn\u2019t mean you can e.g. multiply strings without hearing about it. PyFL is dynamically typed and checks at runtime if calculations make sense.\n However runtime calculations mean you have to actually run the program to find these type errors \u2013 and be lucky enough to encounter them. They won\u2019t necessarily reveal themselves every time out.\n As one retired professional pointed out, you may release the software and then have tens of thousands of users running afoul of the dynamic type checker.\n So there\u2019s still a need for static analysis to avoid runtime errors. A need for compile time type checking.\n But how do you type check a language with no type declarations? I really don\u2019t want to add them \u2013 that would be a big retreat from the \u201cfor the rest of us\u201d principle.\n Fortunately there\u2019s a solution \u2013 type inference. That means analyzing the program and deducing at least some of the types, without bothering the programmer.\n  a + f(b) where a = 4; b = a+9; f(n) = if n&lt;2 then 1 else 3*f(n-1)+1 fi; end\n it\u2019s obvious that  a is an integer, and from that that  b is as well. These facts follow from the basic type rule that the sum of two integers is an integer. There is no need for a declaration  b:int.\n It also appears that  f(b) is an integer although at this stage it\u2019s not clear how you would formally justify it. That\u2019s the problem we\u2019ll solve.\n Inferring a type is like calculation except you discard the actual data and combine types instead. Using rules like\n int + int = intnum + int = numint * int = intint / int = numnum &lt; num = boolif bool then int else int fi = int\n Of course you lose information; in particular, you don\u2019t know which arm of a conditional will be selected. This means evaluating recursive programs is problematic because they use conditionals to trigger termination.\n  Notice that this type scheme has both  int (integer) and  num (numeric). And notice that  int is also numeric, e..g.  num+int=num. Here  int is a subtype of  num. There are two other subtypes:  intlist is a subtype of  numlist which in turn is a subtype of  list. The head of an  intlist is an  int, the tail of a  numlist is a  numlist, and so on.\n Implementing this partial order required a lot of coding and I skipped having separate  stringlist and  wordlist types, not to mention  listlist. I wrote a function  sb(p,q) which tests if  p is a subtype of  q, and a function  lub(p,q) which gives the least upper bound of  p and  q.\n Clearly my domain falls far short of that necessary to imitate the fine distinctions of Haskell type declarations. For example, in Haskell you can declare a variable to be a list of lists of integers. I\u2019d need an infinite partial order. But it works on a broad range of programs and catches a broad range of errors.\n  So the plan I came up with is to take the PyFL evaluator and modify it so that instead of producing the actual data output by a program, it outputs the types produced by \u2018running\u2019 the program over the abstract domain of types. This is the basic idea of abstract interpretation and is hardly original with me.\n One of the advantages of this scheme is that not only does it avoid programmer type declarations, it avoids function types. Here is a higher order variant of the program given above\n a + f(b)where db(g) = lambda (x) g(g(x)) end; inc(u) = u+2; f = db(inc); a = 4; b = 5;end\n It evaluates to  int, in spite of the involvement of the second order function  db.\n  The problem with recursion is that the evaluation doesn\u2019t terminate. This stumped me for a while.\n   When run with the usual evaluator, it quickly gives the correct answer, 5040. The recursion terminated when the  if-then-else-fi finally selected the first alternative. But when running with the type evaluator, the  if condition was merely  bool and both alternatives had to be explored. This resulted in an infinite recursion, the python runtime stack overflowed, there was a segmentation fault and python crashed. Needless to say, no type information was produced\n In the meantime I\u2019d added metrics to the evaluator, to see how much computation was generated. One of these metrics was the number of calls to the evaluation function. These additions were carried over to the alternate types-only evaluator.\n Finally it dawned on me that I could force termination by putting a cap on this metric \u2013 say, 30. I could see what the result was, then increase the cap, look at the new result, increase the cap again, until everything settled down.\n This worked even better than I expected. I tried it on a similar scheme for  computing dimensionalities in pylucid and it turned out even small values of the cap gave correct answers.\n The puzzle here is that this scheme seems obvious yet I\u2019ve never seen it in print. Or any discussion of how you avoid nontermination while evaluating over an alternate domain. Yet evaluating over an alternate domain is the basic idea of abstract interpretation. If anyone has any insight, please share with me.\n So what I did was set a cap of 30 on the number of calls to the evaluate function. It turned out that 30 is a lot and I could have gotten away with a much smaller cap, but so what?\n Now, when I run the type evaluator, it quickly halts and produces \u2026  int, correct. It has succeeded in deducing that the factorial of an integer is an integer. Without programmer input.\n  The question arose, what does an evaluation return when it\u2019s throttled? I guessed that it should return the bottom element of the type domain. Since there wasn\u2019t a bottom element (yet) I added one: the type  none. The type  none is not the type of any data object. If you think of a type as a set (the set of all objects of that type), then  none is the empty set.\n I had to work out the rules for calculating with  none. Since  none is a subtype of, say,  num, it can function as a  num, so we have the rule  none+num=num. (And  none+none=none.)\n Also if we are evaluating  f(x,y) and  f evaluates to  none, the result should be  none. I admit this was guesswork but it gives the right answers.\n This required rewriting  sb and  lub, which got fairly complex. If I want to expand my domain I\u2019ll have to come up with something more systematic.\n  The factorial program works because recursion is built in to PyFL (and Haskell), the evaluator evaluates the definition of  fac in the same environment that it\u2019s defined. But what if recursion wasn\u2019t built in?Could we still define factorial? This was the problem facing the developers of the lambda calculus (which doesn\u2019t have built-in recursion).\n At first it seemed unlikely. But then Curry invented the Y combinator. Here it is\n  It\u2019s just a small \\-expression with the magic property that Yf reduces to f(Yf). It has a rather nice definition in PyFL notation, namely\n  In this form it\u2019s easy to see that it works. We substitute g for x in the equation and get g(g) = f(g(g)).\n  fac(7) where Y(f) = g(g) where g(x) = f(x(x)) end; a(f) = lambda (n) if n&lt;2 then 1 else n*f(n-1) fi end; fac = Y(a); end\n  Note that this program is nonrecursive: no variable is defined directly or indirectly in terms of itself.\n This program cannot be written in Haskell. It uses self application which can\u2019t be typed. Obviously we can write factorial in Haskell, but not this way. We have to resort to Haskell\u2019s built-in recursion, say with the definition  Y(f) = f(Y(f)).\n Then the question arises, what about PyFL\u2019s type checking? What happens when we evaluate the type of this program?\n  To be honest, I wasn\u2019t sure this would work. But in retrospect, if PyFL can handle the definition of Y over the integers, why not over types?", "posttime": "2022-02-17 12:12:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7c7b\u578b,checking", "title": "\u4f5c\u4e3a\u8ba1\u7b97\u7684\u7c7b\u578b\u68c0\u67e5", "title_en": "Type Checking as Calculation", "transed": 1, "url": "https://billwadge.com/2022/02/16/type-checking-as-calculation/", "via": "", "real_tags": ["\u7c7b\u578b", "checking"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073813, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ecb\u7ecd", "note_en": "Introduction", "posttime": "2022-02-17 12:12:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "microsoft,security,\u4ecb\u7ecd", "title": "\u589e\u5f3a\u4e86Microsoft Edge\u7684\u5b89\u5168\u6027", "title_en": "Enhanced Security for Microsoft Edge", "transed": 1, "url": "https://microsoftedge.github.io/edgevr/posts/Introducing-Enhanced-Security-for-Microsoft-Edge/", "via": "", "real_tags": ["microsoft", "security", "\u4ecb\u7ecd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073812, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5927\u591a\u6570\u5b9e\u65f6\u4eba\u4f53\u59ff\u52bf\u4f30\u8ba1\u65b9\u6cd5\u90fd\u57fa\u4e8e\u68c0\u6d4b\u5173\u8282\u4f4d\u7f6e\u3002\u4f7f\u7528\u68c0\u6d4b\u5230\u7684\u5173\u8282\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u8ba1\u7b97\u80a2\u4f53\u7684\u504f\u822a\u548c\u4fef\u4ef0\u3002\u7136\u800c\uff0c\u7531\u4e8e\u65e0\u6cd5\u89c2\u5bdf\u5230\u65cb\u8f6c\u8f74\uff0c\u56e0\u6b64\u65e0\u6cd5\u8ba1\u7b97\u6cbf\u80a2\u4f53\u7684\u6eda\u52a8\uff0c\u8fd9\u5bf9\u4e8e\u8fd0\u52a8\u5206\u6790\u548c\u8ba1\u7b97\u673a\u52a8\u753b\u7b49\u5e94\u7528\u81f3\u5173\u91cd\u8981\u3002\u56e0\u6b64\uff0c\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u65b9\u5411\u5173\u952e\u70b9\uff0c\u8fd9\u662f\u4e00\u79cd\u4ec5\u4f7f\u7528\u5355\u5e27RGB\u56fe\u50cf\u4f30\u8ba1\u9aa8\u9abc\u5173\u8282\u5b8c\u6574\u4f4d\u7f6e\u548c\u65cb\u8f6c\u7684\u65b0\u65b9\u6cd5\u3002\u53d7\u8fd0\u52a8\u6355\u6349\u7cfb\u7edf\u5982\u4f55\u4f7f\u7528\u4e00\u7ec4\u70b9\u6807\u8bb0\u6765\u4f30\u8ba1\u6574\u4e2a\u9aa8\u9abc\u65cb\u8f6c\u7684\u542f\u53d1\uff0c\u6211\u4eec\u7684\u65b9\u6cd5\u4f7f\u7528\u865a\u62df\u6807\u8bb0\u751f\u6210\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u540e\u5904\u7406\u7cbe\u786e\u63a8\u65ad\u65cb\u8f6c\u3002\u65cb\u8f6c\u9884\u6d4b\u5c06\u5173\u8282\u89d2\u5ea6\u7684\u6700\u4f73\u62a5\u544a\u5e73\u5747\u8bef\u5dee\u63d0\u9ad848%\uff0c\u5e76\u572815\u6b21\u9aa8\u9abc\u65cb\u8f6c\u4e2d\u8fbe\u523093%\u7684\u51c6\u786e\u6027\u3002\u8be5\u65b9\u6cd5\u8fd8\u5c06MPJPE\u5728principle\u6570\u636e\u96c6\u4e0a\u6d4b\u91cf\u7684\u5173\u8282\u4f4d\u7f6e\u7684\u6700\u65b0\u7ed3\u679c\u63d0\u9ad8\u4e8614%\uff0c\u5e76\u5728\u91ce\u5916\u6570\u636e\u96c6\u4e2d\u5f88\u597d\u5730\u63a8\u5e7f\u5230\u4e86\u3002\n@\u6587\u7ae0{Fisch2021OKPS\uff0c\u4f5c\u8005{Martin Fisch and Ronald Clark}\uff0c\u671f\u520a{IEEE\u6a21\u5f0f\u5206\u6790\u4e0e\u673a\u5668\u667a\u80fd\u4ea4\u6613}\uff0c\u6807\u9898{6D\u4eba\u4f53\u59ff\u52bf\u4f30\u8ba1\u7684\u65b9\u5411\u5173\u952e\u70b9}\uff0c\u5e74\u4efd{2021}\uff0c\u6708\u4efd{12\u6708}", "note_en": "Most realtime human pose estimation approaches are based on detecting joint positions. Using the detected joint positions, the yaw and pitch of the limbs can be computed. However, the roll along the limb, which is critical for application such as sports analysis and computer animation, cannot be computed as this axis of rotation remains unobserved. In this paper we therefore introduce orientation keypoints, a novel approach for estimating the full position and rotation of skeletal joints, using only single-frame RGB images. Inspired by how motion-capture systems use a set of point markers to estimate full bone rotations, our method uses virtual markers to generate sufficient information to accurately infer rotations with simple post processing. The rotation predictions improve upon the best reported mean error for joint angles by 48% and achieves 93% accuracy across 15 bone rotations. The method also improves the current state-of-the-art results for joint positions by 14% as measured by MPJPE on the principle dataset, and generalizes well to in-the-wild datasets.\n    @article{Fisch2021OKPS, author = {Martin Fisch and Ronald Clark}, journal = {IEEE Transactions on Pattern Analysis &amp; Machine Intelligence}, title = {Orientation Keypoints for 6D Human Pose Estimation}, year = {2021}, month = {dec}}", "posttime": "2022-02-17 12:11:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u59ff\u52bf,pose,\u4f30\u8ba1", "title": "\u7528\u4e8e6D\u4eba\u4f53\u59ff\u52bf\u4f30\u8ba1\u7684\u65b9\u5411\u5173\u952e\u70b9", "title_en": "Orientation Keypoints for 6D Human Pose Estimation", "transed": 1, "url": "https://r0nn13.github.io/okps-project/", "via": "", "real_tags": ["\u59ff\u52bf", "pose", "\u4f30\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073811, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u6765\u8ddf\u8e2a\u81ea\u5df1\u7f51\u7ad9\u7684\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u8fc7\u7a0b\uff0cSeoCheklist\u662f\u4e3a\u4f60\u51c6\u5907\u7684\u3002\u53ea\u9700\u521b\u5efa\u68c0\u67e5\u8868\u5e76\u6309\u7167\u4efb\u52a1\u8fdb\u884c\u64cd\u4f5c\u3002\u4f60\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u9700\u8981\u6210\u4e3a\u8fd9\u65b9\u9762\u7684\u4e13\u5bb6\u3002SeoChecklist\u4f1a\u544a\u8bc9\u4f60\u8be5\u505a\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u505a\u3002\n\u8ba9\u4f60\u7684\u5ba2\u6237\u8f7b\u677e\u9075\u5faaSEO\u6d41\u7a0b\uff01\u5411\u4f60\u7684\u5ba2\u6237\u63d0\u4f9b\u5b9e\u65f6\u62a5\u544a\uff0c\u770b\u7740\u4ed6\u4eec\u5bf9\u4f60\u7684\u5de5\u4f5c\u611f\u5230\u6ee1\u610f\uff01\u8fd9\u5c06\u589e\u52a0\u4ed6\u4eec\u5bf9\u4f60\u7684\u4fe1\u4efb\uff0c\u8ba9\u4f60\u4ee5\u95ea\u7535\u822c\u7684\u901f\u5ea6\u7ecf\u8425\u4e1a\u52a1\u3002\n\u4e0e\u60a8\u7684\u56e2\u961f\u8f7b\u677e\u7ba1\u7406SEO\u6d41\u7a0b\uff01\u786e\u4fdd\u4f60\u7684\u5ba2\u6237\u5bf9\u4f60\u7684\u4f5c\u54c1\u5370\u8c61\u6df1\u523b\uff01\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u8c08\u8bba\u4f60\u662f\u4ec0\u4e48\u6837\u7684\u56e2\u961f\uff01", "note_en": "If you need a tool to track the SEO process of your own site, SeoCheklist is for you. Just create the checklist and follow the tasks. You don&#39;t need to be an expert for this. SeoChecklist will tell you what to do and how.\n Let your customers follow the SEO process easily! Provide real-time reports to your clients and watch them be satisfied with your work! This will increase their trust in you and enable you to run your business at lightning speed.\n Easily manage SEO processes with your team! And make sure your customers are impressed with the work you have created! Everyone will be talking about what kind of team you are!", "posttime": "2022-02-17 12:10:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4f18\u5316,seo", "title": "\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u6e05\u5355\u2014\u2014300\u4e2a\u9884\u5148\u6dfb\u52a0\u7684\u8be6\u7ec6\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u4efb\u52a1", "title_en": "SEO Checklist \u2013 300 Pre-added detailed SEO tasks", "transed": 1, "url": "https://seochecklist.dev/", "via": "", "real_tags": ["\u4f18\u5316", "seo"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073809, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u5bb6\u4e3aNetflix\u3001Snap\u548cHashicorp\u7b49\u516c\u53f8\u63d0\u4f9b\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u7ba1\u7406\u7cfb\u7edf\u7684\u521d\u521b\u516c\u53f8\u5df2\u7ecf\u7b79\u96c6\u4e861.03\u4ebf\u7f8e\u5143\u7684B\u7cfb\u5217\u8d44\u91d1\uff0c\u4ee5\u5e2e\u52a9\u8be5\u516c\u53f8\u6269\u5f20\u3002\n\u8be5\u516c\u53f8\u58f0\u79f0\uff0c\u5bf9\u5176\u5e2e\u52a9\u5927\u89c4\u6a21\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u5de5\u4f5c\u6d41\u7684\u5e73\u53f0\u7684\u9700\u6c42\u5f3a\u52b2\u3002\n\u6700\u8fd1\u4e00\u8f6e\u878d\u8d44\u7531Index Ventures\u7275\u5934\uff0c\u5176\u4ed6\u6295\u8d44\u8005\u4e5f\u53c2\u4e0e\u4e86\u79cd\u5b50\u57fa\u91d1\u548cA\u7cfb\u5217\u57fa\u91d1\uff0c\u5206\u522b\u7531Amplify Partners\u548c\u7ea2\u6749\u8d44\u672c\u7275\u5934\u3002\u8fd9\u5e26\u6765\u4e86\u6682\u65f6\u7684&#39\uff1b\u81ea2019\u5e74\u6210\u7acb\u4ee5\u6765\uff0c\u8be5\u516c\u53f8\u7684\u8d44\u91d1\u603b\u989d\u5df2\u8fbe\u52301.28\u4ebf\u7f8e\u5143\uff0c\u5e76\u5c06\u8be5\u516c\u53f8\u7684\u540e\u671f\u4f30\u503c\u5b9a\u4e3a15\u4ebf\u7f8e\u5143\u3002\n\u65f6\u95f4\u548c#39\uff1bs\u6280\u672f\u88ab\u63cf\u8ff0\u4e3a\u5fae\u670d\u52a1\u7f16\u6392\u5e73\u53f0\uff0c\u4f7f\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u5728\u4e0d\u727a\u7272\u751f\u4ea7\u529b\u6216\u53ef\u9760\u6027\u7684\u60c5\u51b5\u4e0b\u6784\u5efa\u53ef\u6269\u5c55\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u5df2\u7ecf\u88ab\u7528\u4e8e\u89e3\u51b3Netflix\u3001Snap\u3001Box\u3001Hashicorp\u3001Coinbase\u7b49\u516c\u53f8\u7684\u72b6\u6001\u7ba1\u7406\u96be\u9898\u3002Netflix\u663e\u7136\u9009\u62e9\u4e86Temporal\u4f5c\u4e3a\u5176\u4e0b\u4e00\u4ee3\u6301\u7eed\u96c6\u6210\u548c\u6301\u7eed\u4ea4\u4ed8\uff08CI/CD\uff09\u5f00\u53d1\u8005\u670d\u52a1\u7684\u57fa\u7840\u5e73\u53f0\u3002\n\u81eaA\u7cfb\u5217\u878d\u8d44\u4ee5\u6765\uff0cTemporal\u4e5f\u4ece\u5f00\u53d1\u5f00\u653e\u6e90\u4ee3\u7801\u5e73\u53f0\u8f6c\u5411\u6dfb\u52a0\u57fa\u4e8eTemporal Cloud\u7684\u5546\u4e1a\u6a21\u578b\uff0c\u8fd9\u662f\u4e00\u79cd\u5f00\u653e\u6e90\u4ee3\u7801Temporal\u670d\u52a1\u5668\u7684\u5b8c\u5168\u7ba1\u7406\u4e91\u4ea7\u54c1\u3002\n\u636eTemporal\u9996\u5e2d\u4ea7\u54c1\u5b98Charles Zedlewski\u79f0\uff0c\u5f00\u53d1\u8be5\u5e73\u53f0\u7684\u76ee\u7684\u662f\u89e3\u51b3\u5f00\u53d1\u4eba\u5458\u5728\u6784\u5efa\u53ef\u4f38\u7f29\u7684\u4e91\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u65f6\u9762\u4e34\u7684\u6311\u6218\u3002\n&#34;\u4eba\u4eec\u53d1\u73b0&#39\uff1b\u8fd9\u662f\u4e3a\u8fd9\u79cd\u5e94\u7528\u7a0b\u5e8f\u4ed8\u51fa\u7684\u4ee3\u4ef7\uff1b\u6cfd\u5fb7\u83b1\u592b\u65af\u57fa\u544a\u8bc9\u8bb0\u8005\u3002\n&#34;\u8981\u4ed8\u51fa\u7684\u4ee3\u4ef7\u662f\u590d\u6742\u7684\u7ec4\u5408\uff0c\u56e0\u4e3a\u6211\u6709\u66f4\u591a\u7684\u79fb\u52a8\u90e8\u5206\u8981\u8003\u8651\u548c\u56e0\u7d20\u5f53\u6211\u548c39\uff1b\u6211\u5728\u5199\u6211\u7684\u7533\u8bf7\uff0c\u800c\u4e14\u4e0d\u53ef\u9760\u3002\u56e0\u4e3a\u6211\u6709\u66f4\u591a\u7684\u6d3b\u52a8\u90e8\u4ef6\uff0c\u4efb\u4f55\u4e00\u4ef6\u4e8b\u60c5\u53ef\u80fd\u51fa\u9519\u6216\u884c\u4e3a\u4e0d\u4e00\u81f4\u7684\u53ef\u80fd\u6027\u90fd\u4f1a\u4e0d\u65ad\u589e\u52a0\u3002\u6240\u4ee5\u6bcf\u4e2a\u4eba\u90fd\u60f3\u8981\u6240\u6709\u8fd9\u4e9b\u597d\u5904\uff0c\u4f46\u5982\u679c\u4ed6\u4eec\u80fd\u5e2e\u52a9\u7684\u8bdd\uff0c\u4ed6\u4eec\u5b81\u613f\u4e0d\u652f\u4ed8\u8fd9\u4e9b\u8d39\u7528\uff0c&#34\uff1b\u4ed6\u8bf4\u3002\n\u6839\u636eTemporal\uff0c\u5176\u7cfb\u7edf\u7684\u4e00\u4e2a\u65b9\u9762\u662f\u62bd\u8c61\u4e86\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u590d\u6742\u6027\u3002\u8fd9\u4e9b\u901a\u5e38\u662f\u65e0\u72b6\u6001\u670d\u52a1\u3001\u6570\u636e\u5e93\u3001cron\u4f5c\u4e1a\u548c\u961f\u5217\u7684\u6df7\u5408\u4f53\uff0c\u968f\u7740\u5b83\u4eec\u7684\u6269\u5c55\uff0c\u54cd\u5e94\u591a\u4e2a\u5f02\u6b65\u4e8b\u4ef6\u548c\u8ddf\u8e2a\u6240\u6709\u4e8b\u7269\u7684\u72b6\u6001\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\u3002Temporal\u6709\u6548\u5730\u5c06\u6240\u6709\u8fd9\u4e9b\u90fd\u4f5c\u4e3a\u5e73\u53f0\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u81ea\u884c\u5904\u7406\u3002\nZedlewski\u58f0\u79f0\uff0c\u901a\u8fc7\u5728\u65f6\u6001\u4e2d\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u5e76\u4f7f\u7528\u65f6\u6001\u8fd0\u884c\uff0c\u5f00\u53d1\u4eba\u5458\u6700\u7ec8\u5f97\u5230\u4e86\u4e00\u4e2a\u4e91\u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u5b83\u6bd4\u4ee5\u524d\u53ef\u9760\u5f97\u591a\u3002\n\u5728\u65f6\u6001\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u7531\u4e00\u7ec4\u65f6\u6001\u5de5\u4f5c\u6d41\u6267\u884c\u7ec4\u6210\u3002\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u6267\u884c\u5bf9\u5176\u672c\u5730\u72b6\u6001\u5177\u6709\u72ec\u5360\u8bbf\u95ee\u6743\u9650\uff0c\u5e76\u4e0e\u6240\u6709\u5176\u4ed6\u5de5\u4f5c\u6d41\u6267\u884c\u5e76\u53d1\u6267\u884c\uff0c\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u4e0e\u5b83\u4eec\u548c\u5916\u90e8\u4e16\u754c\u73af\u5883\u901a\u4fe1\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u8fd9\u4e9b\u5de5\u4f5c\u6d41\u6267\u884c\u65e8\u5728\u5b9e\u73b0\u8f7b\u91cf\u7ea7\uff0c\u6d88\u8017\u5f88\u5c11\u7684\u8d44\u6e90\uff0c\u56e0\u6b64\u4e00\u4e2a\u4e34\u65f6\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u5305\u542b\u6570\u767e\u4e07\u6216\u6570\u5341\u4ebf\u4e2a\u5de5\u4f5c\u6d41\u6267\u884c\u3002\n\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u4e34\u65f6SDK\u4ee5\u4ed6\u4eec\u9009\u62e9\u7684\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\uff0c\u800c\u4e34\u65f6\u5e73\u53f0\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u7684\u6301\u4e45\u6027\u3001\u53ef\u7528\u6027\u548c\u53ef\u4f38\u7f29\u6027\u3002\u5f53\u524d\u7684SDK\u7528\u4e8eTypeScript\u3001Go\u3001Java\u548cPHP\u3002\nTemporal\u7531Maxim Fateev\u548cSamar Abbas\u521b\u7acb\uff0c\u4ed6\u4eec\u5728AWS\u9886\u5bfc\u7b80\u5355\u5de5\u4f5c\u6d41\u7684\u8bbe\u8ba1\u548c\u5f00\u53d1\uff0c\u5e76\u8bbe\u8ba1\u4e86\u5176\u4ed6\u5173\u952e\u4e1a\u52a1\u9879\u76ee\u3002\n&#34;\u8428\u9a6c\u5c14\u548c\u621115\u5e74\u524d\u5728\u4e9a\u9a6c\u900a\u770b\u5230\u7684\u6311\u6218\u4e0e\u4eca\u5929\u51e0\u4e4e\u6240\u6709\u516c\u53f8\u9762\u4e34\u7684\u6311\u6218\u662f\u4e00\u6837\u7684\uff1b\u6cd5\u8482\u8036\u592b\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4&#34;\u73b0\u5728\uff0c\u666e\u901a\u7684\u4e1a\u52a1\u5e94\u7528\u7a0b\u5e8f\u8de8\u8d8a\u6570\u5341\u4e2a\u6709\u72b6\u6001\u7684\u670d\u52a1\u5668\u548c\u670d\u52a1\uff0c\u8fd9\u5bf9\u4e8e\u7075\u6d3b\u6027\u548c\u53ef\u6269\u5c55\u6027\u975e\u5e38\u597d\uff0c\u4f46\u5b83&#39\uff1bs\u8fd8\u4f7f\u5e94\u7528\u7a0b\u5e8f\u53d8\u5f97\u8d8a\u6765\u8d8a\u8106\u5f31\uff0c\u96be\u4ee5\u8fdb\u884c\u6545\u969c\u6392\u9664\u6216\u589e\u5f3a&#34;\n\u6cfd\u5fb7\u83b1\u592b\u65af\u57fa\u58f0\u79f0\uff0c\u6cf0\u6664\u58eb\u62a5\u5df2\u7ecf\u770b\u5230&#34\uff1b\u6307\u6570\u589e\u957f#34\uff1b\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8be5\u5e73\u53f0\u91c7\u7528\u4e86\u5f00\u6e90\u7248\u672c&#34;\u6211\u4eec&#39\uff1b\u5728\u516c\u53f8\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\uff0c\u6211\u4eec\u7684\u5e73\u5747\u6708\u590d\u5408\u589e\u957f\u7387\u7ea6\u4e3a25%\u3002\u8fd9\u5c06\u6301\u7eed\u5230\u4eca\u5e74\uff0c&#34\uff1b\u4ed6\u8bf4\u3002\u00ae", "note_en": "A startup that provides application state management systems for Netflix, Snap, and Hashicorp, among others, has raised $103m in Series B funding to help the company expand.\n The firm claims to be seeing strong demand for its platform that helps to manage application workflows at scale.\n The latest bout of funding has been led by Index Ventures, joined by other investors that took part in the seed funding and Series A funding, which were led by Amplify Partners and Sequoia Capital respectively. This brings Temporal&#39;s total funding since incorporation in 2019 to $128m and puts the firm on a post-money valuation of $1.5bn.\n   Temporal&#39;s technology is described as microservice orchestration platform that enables developers to build scalable applications without sacrificing productivity or reliability. It is already in use to solve state management challenges at companies such as Netflix, Snap, Box, Hashicorp, Coinbase, and others. Netflix has apparently chosen Temporal as the platform upon which to base its next-generation continuous integration and continuous delivery (CI/CD) developer service.\n     Since the Series A funding, Temporal has also moved from developing an open-source platform to adding a commercial model based on Temporal Cloud, a fully managed cloud offering of the open-source Temporal Server.\n According to Temporal chief product officer Charles Zedlewski, the challenges that the platform was developed to solve are the same developers face when building scalable, cloud-native applications.\n   &#34;What people find is that there&#39;s a price to pay for that kind of application,&#34; Zedlewski told  The Register.\n &#34;The price to pay is a combination of complexity, as I have many more moving parts to consider and factor in when I&#39;m writing my application, and unreliability. Because I have many more moving parts, the chances that any one thing could be going wrong or behaving inconsistently keep going up and up and up and up. So everybody wants all these benefits, but would rather not pay that cost if they can help it,&#34; he said.\n According to Temporal, one of the aspects of its system is that it abstracts the complexity of a distributed system. These are often a mixture of stateless services, databases, cron jobs, and queues, and as they scale, responding to multiple asynchronous events and tracking the state of everything becomes more and more challenging. Temporal effectively makes all these part of the platform and takes care of them itself.\n   By developing an application in Temporal and running it with Temporal, developers end up with a cloud-architected application, but one that is much more reliable than before, Zedlewski claimed.\n  In Temporal, an application is comprised of a set of Temporal Workflow Executions. Each Workflow Execution has exclusive access to its local state and executes concurrently to all other Workflow Executions, communicating with them and the external world environment via message passing. These Workflow Executions are intended to be lightweight, consuming few resources, and so a Temporal Application may consist of millions or billions of Workflow Executions, the firm said.\n Developers use a Temporal SDK to write application code in their chosen programming language, while the Temporal Platform handles the durability, availability, and scalability of the application, the firm said. Current SDKs are for TypeScript, Go, Java, and PHP.\n Temporal was founded by Maxim Fateev and Samar Abbas, who led the design and development of Simple Workflow at AWS and have since architected other business-critical projects.\n &#34;The challenges Samar and I saw at Amazon 15 years ago are the same challenges in front of almost every company today,&#34; Fateev said in a statement. &#34;The average business application now lives across dozens of stateful servers and services, which has been great for flexibility and scale, but it&#39;s also made applications increasingly brittle and difficult to troubleshoot or enhance.&#34;\n Zedlewski claimed that Temporal has seen &#34;exponential growth&#34; so far in the adoption of the open-source version of the platform. &#34;We&#39;ve averaged about 25 per cent month-on-month compounded growth, through the life of the company. And that continues into this year,&#34; he said. \u00ae", "posttime": "2022-02-17 12:04:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "temporal,\u5e94\u7528\u7a0b\u5e8f", "title": "Temporal\u5728B\u7cfb\u5217\u878d\u8d44\u4e2d\u7b79\u96c61.03\u4ebf\u7f8e\u5143", "title_en": "Temporal raises $103M in Series B funding", "transed": 1, "url": "https://www.theregister.com/2022/02/16/temporal_103m_funding/", "via": "", "real_tags": ["temporal", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073808, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8868\u89c2\u9057\u4f20\u949f\u5df2\u88ab\u89c6\u4e3a\u8bc4\u4f30\u8870\u8001\u7684\u6709\u529b\u5de5\u5177\u3002\u7136\u800c\uff0c\u5b83\u4eec\u5e94\u7528\u4e2d\u7684\u4e00\u4e2a\u4e3b\u8981\u7f3a\u70b9\u662f\u6211\u4eec\u7f3a\u4e4f\u5bf9\u673a\u68b0\u539f\u7406\u7684\u7406\u89e3\u3002\u6211\u4eec\u5047\u8bbe\uff0c\u7531\u4e8e\u8868\u89c2\u9057\u4f20\u65f6\u949f\u662f\u591a\u56e0\u7d20\u7684\u590d\u5408\u7269\uff0c\u56e0\u6b64\u5f88\u96be\u63ed\u793a\u6f5c\u5728\u7684\u751f\u7269\u5b66\u7279\u6027\uff1a\u5b83\u4eec\u7531\u4e0d\u540c\u7684\u90e8\u5206\u7ec4\u6210\uff0c\u6bcf\u4e2a\u90e8\u5206\u90fd\u6709\u81ea\u5df1\u7684\u56e0\u679c\u673a\u5236\u548c\u529f\u80fd\u540e\u679c\u3002\u56e0\u6b64\uff0c\u53ea\u6709\u901a\u8fc7\u89e3\u6784\u8868\u89c2\u9057\u4f20\u65f6\u949f\u4fe1\u53f7\uff0c\u624d\u6709\u53ef\u80fd\u6536\u96c6\u751f\u7269\u5b66\u89c1\u89e3\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u591a\u7ec4\u7ec7\u548c\u4f53\u5916\u6570\u636e\u96c6\u5c065717\u4e2a\u65f6\u949fCpG\u805a\u96c6\u621012\u4e2a\u4e0d\u540c\u7684\u6a21\u5757\u3002\u6211\u4eec\u8868\u660e\uff0c\u8868\u89c2\u9057\u4f20\u65f6\u949f\u7531\u4e0d\u540c\u6bd4\u4f8b\u7684\u6a21\u5757\u7ec4\u6210\uff0c\u8fd9\u53ef\u80fd\u89e3\u91ca\u4e86\u5728\u7ed9\u5b9a\u7814\u7a76\u4e2d\u540c\u65f6\u5e94\u7528\u65f6\u5b83\u4eec\u7684\u4e0d\u4e00\u81f4\u6027\u3002\u6211\u4eec\u8fd8\u89c2\u5bdf\u5230\uff0c\u8868\u89c2\u9057\u4f20\u91cd\u7f16\u7a0b\u4e0d\u4f1a\u91cd\u7f6e\u6574\u4e2a\u65f6\u949f\uff0c\u76f8\u53cd\uff0c\u89c2\u5bdf\u5230\u7684\u518d\u751f\u662f\u7531\u4e00\u90e8\u5206\u6a21\u5757\u9a71\u52a8\u7684\u3002\u603b\u7684\u6765\u8bf4\uff0c\u4e24\u4e2a\u6a21\u5757\u4ee5\u5176\u72ec\u7279\u7684\u529f\u80fd\u800c\u8131\u9896\u800c\u51fa\u3002\u7b2c\u4e00\u79cd\u662f\u5bf9\u8868\u89c2\u9057\u4f20\u91cd\u7f16\u7a0b\u6700\u654f\u611f\u7684\u57fa\u56e0\u4e4b\u4e00\uff1b\u662f\u5168\u56e0\u6b7b\u4ea1\u7387\u7684\u6700\u5f3a\u9884\u6d4b\u56e0\u5b50\uff1b\u968f\u7740\u79bb\u4f53\u4f20\u4ee3\u65f6\u95f4\u7684\u5ef6\u957f\uff0c\u8870\u8001\u8d1f\u62c5\u5f00\u59cb\u663e\u73b0\u3002\u7b2c\u4e8c\u5149\u6a21\u5757\u5bf9\u91cd\u65b0\u7f16\u7a0b\u6709\u9002\u5ea6\u7684\u54cd\u5e94\uff1b\u4e0e\u6b63\u5e38\u7ec4\u7ec7\u76f8\u6bd4\uff0c\u5728\u80bf\u7624\u4e2d\u901f\u5ea6\u975e\u5e38\u5feb\uff1b\u5373\u4f7f\u5728\u79cd\u7fa4\u500d\u589e\u901f\u5ea6\u51cf\u6162\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u4f1a\u5728\u4f53\u5916\u8fdb\u884c\u4f20\u4ee3\u3002\u603b\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u8868\u660e\u65f6\u949f\u89e3\u6784\u53ef\u4ee5\u8bc6\u522b\u72ec\u7279\u7684DNAm\u6539\u53d8\uff0c\u5e76\u4fc3\u8fdb\u6211\u4eec\u5bf9\u8868\u89c2\u9057\u4f20\u65f6\u949f\u7684\u673a\u68b0\u7406\u89e3\u3002", "note_en": "Epigenetic clocks have come to be regarded as powerful tools for estimating aging. However, a major drawback in their application is our lack of mechanistic understanding. We hypothesize that uncovering the underlying biology is difficult due to the fact that epigenetic clocks are multifactorial composites: They are comprised of disparate parts, each with their own causal mechanism and functional consequences. Thus, only by deconstructing epigenetic clock signals will it be possible to glean biological insight. Here we clustered 5,717 clock CpGs into twelve distinct modules using multi-tissue and in-vitro datasets. We show that epigenetic clocks are comprised of different proportions of modules, which may explain their discordance when simultaneously applied in a given study. We also observe that epigenetic reprogramming does not reset the entire clock and instead the observed rejuvenation is driven by a subset of modules. Overall, two modules stand-out in terms of their unique features. The first is one of the most responsive to epigenetic reprogramming; is the strongest predictor of all-cause mortality; and shows increases with in vitro passaging up until senescence burden begins to emerge. The light-second module is moderately responsive to reprogramming; is very accelerated in tumor vs. normal tissues; and tracks with passaging in vitro even as population doublings decelerate. Overall, we show that clock deconstruction can identify unique DNAm alterations and facilitate our mechanistic understanding of epigenetic clocks.", "posttime": "2022-02-17 11:41:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u7f16\u7a0b,\u9057\u4f20,epigenetic,\u65f6\u949f", "title": "\u89e3\u6784\u8870\u8001\u3001\u75be\u75c5\u548c\u91cd\u7f16\u7a0b\u4e2d\u7684\u8868\u89c2\u9057\u4f20\u65f6\u949f\u4fe1\u53f7", "title_en": "Deconstructing the Epigenetic Clock Signals in Aging, Disease, and Reprogramming", "transed": 1, "url": "https://www.biorxiv.org/content/10.1101/2022.02.13.480245v1", "via": "", "real_tags": ["\u7f16\u7a0b", "\u9057\u4f20", "\u65f6\u949f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073807, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u5de6\u53f3\uff0c\u6211&#39\uff1b\u6211\u4e00\u76f4\u5728\u8003\u8651\u5728Bash\u4e2d\u7f16\u5199\u4e00\u4e2aMinecraft\u670d\u52a1\u5668\u4f5c\u4e3a\u4e00\u79cd\u601d\u7ef4\u7ec3\u4e60\u3002\u6211\u66fe\u7ecf\u7528\u7ecf\u5178\u7684\u534f\u8bae\uff082009\u5e74\u7684\u534f\u8bae\uff09\u5c1d\u8bd5\u8fc7\uff0c\u4f46\u6211\u5f88\u5feb\u610f\u8bc6\u5230\u6ca1\u6709&#39\uff1b\u8fd9\u5e76\u4e0d\u662f\u5728bash\u4e2d\u6b63\u786e\u89e3\u6790\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e3a\u4f8b\uff1a\n\u51fd\u6570a\uff08\uff09{read-n2 uwu echo&#34\uff1b$uwu&#34\uff1b|xxd}\u8fd9\u5c06\u628a\u4e24\u4e2a\u5b57\u8282\u8bfb\u5165\u4e00\u4e2a\u53d8\u91cf\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9`xxd'\uff0c\u540e\u8005\u5c06\u663e\u793a\u6570\u636e\u7684\u5341\u516d\u8fdb\u5236\u8f6c\u50a8\u3002\n\u4e00\u5207&#39\uff1b\u5f88\u597d\uff0c\u76f4\u5230\u6211\u4eec\u4f20\u9012\u4e00\u4e2a\u7a7a\u5b57\u8282\uff080x00\uff09\u3002Bash\u4e0d\u4ec5\u5ffd\u7565\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u5b57\u8282\uff0c\u8fd8\u4e0d\u5ffd\u7565&#39\uff1b\u4e0d\u63d0\u4f9b\u4efb\u4f55\u65b9\u6cd5\u6765\u68c0\u6d4b\u662f\u5426\u53d1\u751f\u4e86\u7a7a\u5b57\u8282\u3002\u8003\u8651\u5230\u7b2c\u4e00\u53f7\u8bae\u5b9a\u4e66&#39\uff1b\u6211\u8bd5\u56fe\u5b9e\u73b0\u7684\u662f\u4e25\u683c\u7684\u4e8c\u8fdb\u5236\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4e25\u91cd\u635f\u574f\u6570\u636e\u3002\n\u4e00\u6708\u5e95\u7684\u4e00\u4e2a\u96e8\u591c\uff0c\u6211&#39\uff1b\u6211\u6709\u4e00\u4e2a\u542f\u793a\u3002\u5982\u679c\u6211\u98a0\u5012\u4e86\u51fd\u6570\u7684\u987a\u5e8f\u5462\uff1f\u5982\u679c\u4e8c\u8fdb\u5236\u6570\u636e\u4ece\u672a\u5230\u8fbe\u4e00\u4e2a\u53d8\u91cf\uff08\u6216\u8005\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u662f\u4e00\u4e2a\u66ff\u6362\uff09\uff0c\u53ea\u662f\u505c\u7559\u5728\u7ba1\u9053\u4e2d\uff0c\u5b83\u80fd\u4f20\u9012\u7a7a\u5b57\u8282\u5417\uff1f\n\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff01\u7ecf\u8fc7\u4e00\u4e9b\u8fed\u4ee3\u4e4b\u540e\uff0c\u6211\u51b3\u5b9a\u4f7f\u7528'dd'\u4f20\u9012\u7ed9'xxd'\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f'xxd'\uff0c\u56e0\u4e3a\u8fd9\u6837\u6211\u53ef\u4ee5\u5fae\u8c03\u8981\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\n#$len\u53d8\u91cf\u5728\u524d\u9762\u88ab\u8d4b\u503c\uff0c\u57fa\u4e8e\u4e00\u4e2a\u7c7b\u4f3c\u7684read function a=$\uff08dd count=$len bs=1 status=none | xxd-p\uff09\u8fd9\u7ed9\u4e86\u6211\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u6211\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e0a\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u3001\u6a21\u5f0f\u66ff\u6362\u3001\u6570\u636e\u63d0\u53d6\u3002\u3002\u3002\u8fd8\u6709\u66f4\u591a\u3002\u53d1\u9001\u56de\u590d\u53ef\u4ee5\u7c7b\u4f3c\u5730\u8fdb\u884c\uff0c\u4f7f\u7528xxd\u548c#39\uff1bs\u5012\u8f66\u5f00\u5173\u3002\n`ncat`\u7528\u4e8e\u6536\u542cMinecraft&#39\uff1b\u9ed8\u8ba4\u7684TCP\u7aef\u53e3\u3002\u5b83\u5728\u6536\u5230\u4f20\u5165\u8fde\u63a5\u540e\u542f\u52a8\u4e3bshell\u811a\u672c\uff08`mc.sh`\uff09\u3002\n\u6ce8\u610f\uff1a\u4ee5\u4e0b\u90e8\u5206\u4e3b\u8981\u662f\u6211\u5728Bash\u4e2d\u5b9e\u73b0\u6570\u5b57\u8f6c\u6362\u4f8b\u7a0b\u7684\u6f2b\u8c08\uff1b\u5982\u679c\u4f60\u5bf9\u6b64\u4e0d\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8df3\u8fc7\u5b83\u3002\nMinecraft\u670d\u52a1\u5668\u8981\u8fd0\u884c\uff0c\u9996\u5148\u5e94\u8be5\u5b9e\u73b0\u7684\u662f\u670d\u52a1\u5668\u5217\u8868Ping\u6570\u636e\u5305\uff0c\u800c\u4e0d\u662f\u56e0\u4e3a\u5b83&#39\uff1b\u8fd9\u662f\u5fc5\u9700\u7684\uff08\u89c1\u9b3c\uff0c\u4f60\u7684\u670d\u52a1\u5668\u65e0\u6cd5\u6b63\u786e\u56de\u590d\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u52a0\u5165\u6e38\u620f\uff09\uff0c\u4f46\u56e0\u4e3a\u5b83&#39\uff1b\u8fd9\u662f\u6700\u5bb9\u6613\u89e3\u51b3\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\u3002\u5b83\u6709\u52a9\u4e8e\u60a8\u719f\u6089\u6838\u5fc3\u534f\u8bae\u6982\u5ff5\uff0c\u4f8b\u5982\u6570\u636e\u7c7b\u578b\uff1a\n\u5927\u591a\u6570\u6570\u636e\u7c7b\u578b\u7684\u5b9e\u73b0\u90fd\u5f88\u7b80\u5355\uff0c\u4f46\u6709\u4e9b\u6570\u636e\u7c7b\u578b\u6bd4\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u66f4\u8ba9\u6211\u5934\u75bc\u2014\u2014\u5c24\u5176\u662fIEEE754\u6d6e\u70b9\u6570\uff08\u7a0d\u540e\u4f1a\u6709\u66f4\u591a\u4ecb\u7ecd\uff09\uff0c\u4ee5\u53ca\u6240\u8c13\u7684VarInt/VarLong\u6570\u3002\u90a3\u4e9b\u4eba\u53ef\u80fd\u719f\u6089MQTT\u534f\u8bae\uff0c\u56e0\u4e3a\u4ed6\u4eec&#39\uff1b\u6211\u4eec\u53ea\u662fLEB128\u7f16\u7801\u7684\u4e00\u4e2a\u4fee\u6539\u7248\u672c\u3002\nLEB128\u662f\u4e00\u79cd\u6574\u6570\u538b\u7f29\u65b9\u6848\u3002\u901a\u8fc7\u5c06\u4e00\u4e2a\u5b57\u8282\u62c6\u5206\u4e3a1\u4e2a\u4fe1\u53f7\u4f4d\u548c7\u4e2a\u6570\u636e\u4f4d\uff0c\u8be5\u65b9\u6848\u5b58\u50a8\u6570\u5b57\u957f\u5ea6\u3002\u5982\u679c\u7b2c\u4e00\u4f4d\u4e3a0\uff0c\u5219\u8be5\u5b57\u8282\u4e3a\u6700\u540e\u4e00\u4f4d\uff1b\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709&#39\uff1b\u5728\u8fd9\u4e2a\u5b57\u8282\u4e4b\u540e\u662f\u53e6\u4e00\u4e2a\u5b57\u8282\u3002\u5982\u679c\u4f60\u7684\u5927\u591a\u6570\u6570\u5b57\u57280\u5230127\u4e4b\u95f4\u6216256\u523016383\u4e4b\u95f4\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6848\uff0c\u5426\u5219\u5c31\u662f&#39\uff1b\u201c\u4e70\u4e00\u4e2a\u5b57\u8282\uff0c\u5f97\u5230\u4e00\u4e2a\u81ea\u7531\u201d\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u672c\u6765\u53ef\u4ee5\u653e\u5728\u4e00\u4e2a\u5b57\u8282\u4e2d\u7684\u6570\u5b57\u4f1a\u88ab\u4e00\u4f4d\u63a8\u5230\u4e0b\u4e00\u4e2a\u5b57\u8282\u3002\n#\u4ecesrc/int.sh#int2varint\uff08int\uff09\u51fd\u6570int2varint\uff08\uff09{local a local b local c local out=$\uff08printf&#39\uff1b%02x&#39\uff1b&#34\uff1b$1&#34\uff1b\uff09\u5982\u679c[$1-lt 128]]\uff1b\u7136\u540e\uff1a\u4ee5\u5229\u592b[$1-lt 16384]\uff1b\u7136\u540ea=$\uff08$1%128\uff09\uff09b=$\uff08$1/128\uff09\uff09out=$\uff08printf&#34\uff1b%02x&#34\uff1b$\uff08a+128\uff09\uff09$\uff08printf&#34\uff1b%02x&#34\uff1b$b\uff09elif[$1-lt$\uff08128*128*128\uff09\uff09\uff1b\u7136\u540ea=$\uff08$1%128\uff09\uff09c=$\uff08$1/128\uff09%128\uff09\uff09b=$\uff08$1/16384\uff09\uff09out=$\uff08printf&#34\uff1b%02x&#34\uff1b$\uff08a+128\uff09\uff09$\uff08printf&#34\uff1b%02x&#34\uff1b$\uff08c+128\uff09\uff09$\uff08printf&#34\uff1b%02x&#34\uff1b$b\uff09fi echo-n&#34$\u51fa\u53bb&#34\uff1b}\u6211&#39\uff1b\u6211\u5728\u5c06\u53c2\u8003\u5b9e\u73b0\u8f6c\u6362\u4e3aBash\u65f6\u9047\u5230\u4e86\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u8db3\u591f\u591a\u7684\u534f\u8bae\uff0c\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u81ea\u5df1\u7684\u534f\u8bae\u3002\u6211\u53d1\u73b0\u5b83\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u6316\u6c9f\u673a\u4e2d\u7684\u6a21\u548c\u9664\u6cd5\uff0c\u6211\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\u5229\u7528\u4e86\u8fd9\u4e00\u70b9\u3002\n\u6211\u5bf9\u89e3\u7801\u5668\u91c7\u53d6\u4e86\u4e00\u79cd\u66f4\u73b0\u4ee3\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528AND\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u76f8\u4e58\u2014\u2014\u7c7b\u4f3c\u4e8e\u5f15\u7528\u7684\u65b9\u6cd5\u3002\nLEB128\u80af\u5b9a\u4e0d\u662f&#39\uff1b\u5b83\u4e0d\u662f\u6700\u96be\u5b9e\u73b0\u6216\u6700\u70e6\u4eba\u7684\uff08\u8fd9\u4e00\u4e2a\u662fIEEE754\u6d6e\u70b9\uff09\uff1b\u6211\u4ecd\u7136\u4e0d\u77e5\u9053&#39\uff1bI don\u2019\u6211\u4e0d\u559c\u6b22\u5b83\u88ab\u6563\u5e03\u5728\u534f\u8bae\u5185\u90e8\u7684\u968f\u673a\u4f4d\u7f6e\uff0c\u4e0e\u5e38\u89c4\u6574\u6570\uff08\u548c\u957f\u6574\u6570\uff09\u4ea4\u7ec7\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u751a\u81f3\u662f\u6709\u7b26\u53f7\u7684\u77ed\u6574\u6570\u3002\n\u6211&#39\uff1b\u6211\u4e0d\u662f\u6570\u5b66\u7231\u597d\u8005\u3002\u5f53\u6211\u770b\u5230Python\u53d1\u51fa\u7684\u6307\u6570\u7b26\u53f7\u65f6\uff0c\u6211\u5c16\u53eb\u7740\u8dd1\u5f00\u4e86\u3002\u8fd9\u53ef\u80fd\u662f\u6211\u8ba8\u538c\u5b9e\u73b0\u8fd9\u4e9b\u6d6e\u70b9\u8f6c\u6362\u5668\u7684\u4e3b\u8981\u539f\u56e0\u3002\u6211\u8d62\u4e86&#39\uff1b\u4e0d\u8981\u6df1\u5165\u63a2\u8ba8\u8fd9\u79cd\u683c\u5f0f\u7684\u5177\u4f53\u5de5\u4f5c\u539f\u7406\u2014\u2014\u76f8\u53cd\uff0c\u6211\u5efa\u8bae\u4f60\u67e5\u770b\u8fd9\u4e2a\u7ef4\u57fa\u767e\u79d1\u9875\u9762\u3002\n\u57fa\u672c\u5b9e\u73b0\u9700\u8981\u4e00\u4e2a\u5faa\u73af\uff0c\u5176\u4e2d\u6709&#39\uff1b\u5bf9\u7ed3\u679c\u65bd\u52a0\u8d1f\u5e42\uff1bBash\u6ca1\u6709&#39\uff1b\u6211\u5929\u751f\u5c31\u4e0d\u652f\u6301\u6d88\u6781\u529b\u91cf\uff0c\u8fd9\u8ba9\u6211\u4e0d\u5f97\u4e0d\u53bb\u5bfb\u627e\u4e00\u4e2a\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u5de5\u5177\u3002\n\u6211\u5728DukDukEk\u4e2d\u53d1\u73b0\u7684\u4e00\u4e2a\u5efa\u8bae\u662f\u4f7f\u7528Perl\uff0c\u4f46\u6211\u8ba4\u4e3a\u8fd9\u662f\u4f5c\u5f0a\u3002\u6216\u8005\uff0c\u5c1d\u8bd5\u4f7f\u7528\u201cbc\u201d\uff0c\u4f46\u4f3c\u4e4e\u8981\u4e48\u6ca1\u6709&#39\uff1b\u6839\u672c\u4e0d\u652f\u6301\u7535\u6e90\uff0c\u6216\u8005busybox\u7248\u672c\u4e0d\u652f\u6301\u3002\u771f\u5012\u9709\n\u5f53\u6211\u51c6\u5907\u653e\u5f03\u7684\u65f6\u5019\uff0c\u6211\u88ab\u63d0\u9192\u51ef\u7279\u66fe\u7ecf\u5728awk\u505a\u8fc7\u4e00\u4e2a\u60c5\u8282\u89c4\u5212\u3002\u5f53\u7136\uff0cawk\u6709\u80fd\u529b\u5417~~\u751a\u81f3\u53ef\u80fd\u662f\u8d85\u7ea7\u725b\u7684\u529b\u91cf\u4e8b\u5b9e\u8bc1\u660e\u786e\u5b9e\u5982\u6b64\uff01\n$echo\u548c#39&#39; | awk\u548c#39\uff1b{print\uff082**-1\uff09}&#39\uff1b0.5\u6709\u4e86\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u6211\u8349\u8349\u753b\u51fa\u4e86\u4e00\u4e2a\u5de5\u4f5c\u5b9e\u73b0\uff0c\u5e76\u5c06\u5176\u9644\u52a0\u5230\u4ece\u64ad\u653e\u5668\u79fb\u52a8\u6570\u636e\u5305\u89e3\u7801\u7684\u6570\u636e\u4e2d\u3002\u5728\u4e00\u6b21\u8bd5\u8fd0\u884c\u4e2d\uff0c\u5ba2\u6237\u673a\u53d1\u9001\u4e86\u5927\u7ea650-100\u4e2a\u8fd9\u6837\u7684\u6570\u636e\u5305\uff0c\u6bcf\u4e2a\u6570\u636e\u5305\u6709\u4e09\u4e2a\u53cc\u500d\uff08X\u3001Y\u3001Z\uff09\u3002\u7ed3\u679c\u662f\u8f6c\u6362\u529f\u80fd\u592a\u6162\u4e86\uff0c\u670d\u52a1\u5668\u6ca1\u6709&#39\uff1b\u5728\u51e0\u5206\u949f\u540e\uff0c\u6211\u65e0\u6cd5\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u2014\u2014\u8fd9\u5bf9\u4e8e\u5b9e\u65f6\u6e38\u620f\u6765\u8bf4\u662f\u76f8\u5f53\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\n\u964d\u4f4e\u54cd\u5e94\u65f6\u95f4\u7684\u6700\u7b80\u5355\u89e3\u51b3\u65b9\u6848\u662f\u51cf\u5c11\u5bf9\u5916\u90e8\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u5982awk\uff09\u7684\u8c03\u7528\u91cf\u3002\u7531\u4e8e\u6211\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u8d1f\u8f7d\u5df2\u7ecf\u5728bash`for`\u5faa\u73af\u4e2d\uff0c\u6240\u4ee5\u6211\u5c06\u5faa\u73af\u79fb\u5230\u4e86`awk`\u4e2d\uff0c\u8fd9\u6837\u5c31\u8282\u7701\u4e86\u5bf9awk\u7684\u6570\u5341\u6b21\u8c03\u7528\u3002\n# (...)asdf=$\uff08cut-c 13-&lt\uff1b&lt\uff1b&lt\uff1b$val | sed-E&#39\uff1bs/\uff0c&amp\uff1b/g\uff1bs/\uff0c//&#tr-d&#39\uff1bn&#awk-F\uff0c&#39+{power u count 1x=0\uff1b\u5bf9\u4e8e\uff08i=1\uff1bi&lt\uff1b=NF i\uff09{x=\uff08x+\uff08$i*\uff082**power u count u\uff09\uff09power\u6253\u5370\uff08x+1\uff09&#39\uff1b#(...) \u8f6c\u6362\u4ecd\u7136\u5f88\u6162\uff08\u5728\u6211\u7684Xeon E5-2680v2\u4e0a\u9700\u8981\u7ea610\u6beb\u79d2\uff09\uff0c\u4f46\u8fd9\u5728bash\u811a\u672c\u4e2d\u662f\u610f\u6599\u4e4b\u4e2d\u7684\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u65e7\u7248\u672c\u5927\u7ea6\u9700\u8981350\u6beb\u79d2\uff0c\u4f46\u6211\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u6709\u53ef\u9760\u7684\u6d4b\u91cf\u6570\u636e\u6765\u8bc1\u660e\u8fd9\u4e00\u70b9~~\u8fd8\u662f\u5feb\u4e8635\u500d\uff0c\u54c7~~\n\u6700\u540e\uff0c\u83ab\u5f3a\u81ea\u5df1\u7f16\u7684\u4e1c\u897f\uff01Position\u662f\u4e00\u4e2a64\u4f4d\u957f\u7684\u503c\uff0c\u5176\u4e2d\u4e09\u4e2a\u5750\u6807\u5e76\u6392\u5b58\u50a8\uff1aX\u83b7\u5f9726\u4e2a\u6700\u9ad8\u6709\u6548\u4f4d\uff0cZ\u83b7\u5f9726\u4e2a\u4e2d\u95f4\u4f4d\uff0cY\u83b7\u5f9712\u4e2a\u6700\u4f4e\u6709\u6548\u4f4d\u3002\u6211&#39\uff1b\u6211\u4e0d\u592a\u559c\u6b22\u8fd9\u79cd\u5947\u602a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u5728Bash\u4e2d\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u6709\u6240\u6709\u9700\u8981\u7684\u4f4d\u79fb\u4f4d\u8fd0\u7b97\u7b26\u3002\n\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u6700\u7cdf\u7cd5\u7684\u5730\u65b9\u5728\u4e8e\u5b83\u6ca1\u6709&#39\uff1b\u6211\u5176\u5b9e\u6ca1\u600e\u4e48\u4e60\u60ef\u3002\u5927\u7ea6\u4e00\u534a\u7684\u6570\u636e\u5305\u5c06X\u3001Y\u548cZ\u5750\u6807\u5b58\u50a8\u4e3a\u5355\u72ec\u7684\u53cc\u53d8\u91cf\u3002\u8fd9\u610f\u5473\u7740\uff1a\n\u5982\u679c\u5047\u8bbe\u6211\u4eec&#39\uff1bWe\u2019\u6211\u4eec\u53ea\u9700\u8981\u4e0d\u8d85\u8fc73000000\u7684\u6570\u5b57\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e16\u754c\u8fb9\u754c\u5728\u54ea\u91cc\uff09\n\u6211\u6709\u70b9\u660e\u767d\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837&#39\uff1b\u662f\u8fd9\u6837\u7684\uff0c\u4f46\u6211\u8fd8\u662f\u4e0d&#39\uff1b\u6211\u4e0d\u559c\u6b22\u73b0\u5728\u7684\u72b6\u6001\u3002\u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u6b63\u5e38\u7684\u670d\u52a1\u5668\u901a\u4fe1\u90fd\u4f7f\u7528zlib\uff0c\u800c\u60a8\u5b9e\u9645\u4e0a\u8d62\u4e86&#39\uff1bI don\u2019\u63cf\u8ff0\u4e00\u4e2a\u5757\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\u6c38\u8fdc\u4e0d\u9700\u8981\u8d85\u8fc7\u4e24\u4f4d\uff08\u6700\u591a\u4e09\u4f4d\uff09\u7684\u5341\u8fdb\u5236\u7cbe\u5ea6\u3002\n\u6700\u540e\u662f&#39\uff1b\u8fd9\u662fNBT\u683c\u5f0f\uff0c\u4e5f\u662fMojang Hatsune Miku\u81ea\u5df1\u5236\u4f5c\u7684\u5185\u90e8\u4ea7\u54c1\u3002NBT\u7c7b\u4f3c\u4e8eJSON\uff0c\u4f46\u7528\u4e8e\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u4e0eJSON\u4e0d\u540c\uff0c\u5b83\u88ab\u6ee5\u7528\u6765\u5b58\u50a8\u8d85\u51fa\u89c4\u8303\u7684\u4efb\u610f\u6570\u636e\u2014\u2014\u4f8b\u5982\uff0cMojang\u5c06\u53ef\u53d8\u957f\u5ea6\u7684\u6bd4\u7279\u6d41\u5b58\u50a8\u4e3a\u4e00\u4e2a\u957f\u6570\u7ec4\uff1b\u5982\u679c\u8fd9\u6837\u7684\u6570\u7ec4\u4e0d\u662f&#39\uff1bt long-aligned\uff0c\u751a\u81f3\u5b57\u8282\u5bf9\u9f50\uff0c\u6700\u540e\u4e00\u4e2along\u7528\u96f6\u586b\u5145\u3002\n\u6709\u4e00\u6b21\u6211&#39\uff1b\u6211\u51e0\u4e4e\u5b8c\u5168\u5b9e\u73b0\u4e86\u4e00\u4e2aNBT\u89e3\u6790\u5668\u5b9e\u73b0\uff0c\u4f46\u6211\u89c9\u5f97\u4e0d\u503c\u5f97\u8d39\u5fc3\u53bb\u5b8c\u6210\u5b83\u3002\u7531\u4e8e\u6211\u5e7f\u6cdb\u4f7f\u7528tmpfs\u4f5c\u4e3a\u9879\u76ee\u76ee\u5f55\uff0c\u4ee5\u53ca\u7cfb\u7edf\u5d29\u6e83\uff0c\u4ee3\u7801\u76ee\u524d\u5df2\u4e22\u5931\u3002\n\u6240\u6709\u7684\u6570\u5b66\u95ee\u9898\u90fd\u89e3\u51b3\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u201c\u771f\u6b63\u6709\u8da3\u201d\u7684\u90e8\u5206\u3002\u6211\u5728Twitter\u4e0a\u8bb0\u5f55\u4e86\u6211\u7684\u4e00\u4e9b\u5192\u9669\u7ecf\u5386\uff0c\u4f46\u90a3\u6761\u7ebf\u7d22\u53ea\u662f\u5bf9\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u7684\u4e00\u4e2a\u7c97\u7565\u4e86\u89e3\u3002\u8fd8\u6709\uff0c\u8ba9&#39\uff1b\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u670d\u52a1\u5668Ping\u6570\u636e\u5305\uff0c\u5b83&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u8ba9\u6e38\u620f\u53ef\u4ee5\u52a0\u5165\u7684\u95ee\u9898\u3002\n\u4e3a\u4e86\u8ba9\u5ba2\u6237\u7aef\u52a0\u5165\u60a8\u7684\u670d\u52a1\u5668\uff0c\u5b83\u5fc5\u987b\u5b8c\u6210\u63e1\u624b\u8fc7\u7a0b\u5e76\u53d1\u9001\u4e00\u4e9b\u989d\u5916\u7684\u6570\u636e\u5305\uff08\u533a\u5757\u3001\u73a9\u5bb6\u4f4d\u7f6e\u3001\u5e93\u5b58\u3001\u52a0\u5165\u6e38\u620f\uff09\u3002\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\u6700\u5927\u7684\u4e24\u4e2a\u969c\u788d\u662fJoin Game\u6570\u636e\u5305\u548cChunk\u6570\u636e\u5305\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u3002\njoin\u6e38\u620f\u4f1a\u53d1\u9001\u4e00\u4e9b\u521d\u59cb\u5143\u6570\u636e\uff1aplayer&#39\uff1bs\u5b9e\u4f53ID\u3001\u6e38\u620f\u6a21\u5f0f\u3001\u4e00\u4e9b\u5173\u4e8e\u4e16\u754c\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u81ea~1.16\u4ee5\u6765\u7684a&#34\uff1bDimension\u7f16\u89e3\u7801\u5668&#34\uff1b\u3002\u8fd9\u662f\u4e00\u79cdNBT\u5316\u5408\u7269\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a\nDimension\u7f16\u89e3\u7801\u5668\u90e8\u5206\u662f\u5b9e\u73b0\u7684\u4e00\u5927\u96be\u9898\u3002\u51fa\u4e8e\u6211\u7684\u76ee\u7684\uff0c\u6211\u51b3\u5b9a\u4ece\u4e00\u4e2a\u666e\u901a\u670d\u52a1\u5668\u68c0\u7d22NBT\u5b57\u6bb5\u3002\u5b83&#39\uff1b\u5b83\u662f\u8fd9\u4e2a\u5b9e\u73b0\u4e2d\u552f\u4e00\u7684\u4e8c\u8fdb\u5236blob\uff0c\u867d\u7136\u5b83\u53ef\u4ee5\u91cd\u65b0\u5b9e\u73b0\uff0c\u4f46\u6211\u4e0d&#39\uff1b\u6211\u770b\u4e0d\u51fa\u6709\u4efb\u4f55\u7406\u7531\u91cd\u65b0\u5b9e\u65bd\u6211\u4e0d\u77e5\u9053\u7684\u4e8b\u60c5&#39\uff1b\u4e0d\u4e00\u5b9a\u9700\u8981\uff08\u6216\u60f3\u8981\uff09\u5b9a\u5236\u3002\n\u4e4d\u4e00\u770b\uff0c\u8fd9\u4e2a\u5305\u88f9\u770b\u8d77\u6765\u53c8\u5927\u53c8\u5413\u4eba\uff01\u5982\u679c\u4e0a\u9762\u94fe\u63a5\u4e2d\u7684\u8868\u4e0e\u672c\u6587\u5e76\u6392\u6253\u5f00\uff0c\u6211\u8bf7\u60a8\u60f3\u8c61\u4e00\u4e0b\uff0c\u8fd9\u4e9b\u5de8\u5927\u7684\u4f4d\u96c6\u5b57\u6bb5\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b9e\u9645\u4e0a\u90fd\u662f\u201c0x00\u201d\uff0c\u800c\u60a8\u6ca1\u6709&#39\uff1b\u6839\u672c\u4e0d\u9700\u8981\u53d1\u9001\u5757\u5b9e\u4f53\u5b57\u6bb5\u3002\u8fd9\u5c31\u7ed9\u6211\u4eec\u7559\u4e0b\u4e86X\u3001Y\u3001\u9ad8\u5ea6\u56fe\uff08\u5b83\u4eec\u662f\u201cb000000010\u201d\u7684\u5947\u7279\u7f16\u7801\u91cd\u590d\uff0c\u51e0\u4e4e\u53ef\u4ee5\u662f\u4efb\u4f55\u4e1c\u897f\uff09\uff0c\u4ee5\u53ca\u4e0d\u7965\u7684\u6570\u636e\u5b57\u6bb5\u3002\u6ca1\u90a3\u4e48\u53ef\u6015\u5427\uff1f\n\u6570\u636e\u5b57\u6bb5\u5b9e\u9645\u4e0a\u662f\u5757\u6bb5\u7684\u6570\u7ec4\u3002\u4e00\u4e2a\u5757\u6bb5\u662f16\u00d716\u00d716\u5757\uff0c\u591a\u4e2a\u5757\u6bb5\u53ef\u4ee5\u5806\u53e0\u5728\u4e00\u8d77\u521b\u5efa\u4e00\u4e2a\u5757\u3002\u51fa\u4e8e\u6211\u4eec\u7684\u76ee\u7684\uff0c\u8fd9\u4e2a\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u53ea\u662f\u4e3a\u4e86\u7b80\u5316\u4ee3\u7801\u3002\n\u5757\u6bb5\u5305\u542b\u5757\u8ba1\u6570\u3001\u5757\u72b6\u6001\u5bb9\u5668\u548cbiome\u5bb9\u5668\u3002\u8fd9\u4e24\u4e2a\u5bb9\u5668\u90fd\u4f7f\u7528\u8c03\u8272\u677f\u7ed3\u6784\u5bf9\u53ef\u80fd\u7684\u5757\u503c\u8fdb\u884c\u7f16\u7801\u2014\u2014\u8fd9\u610f\u5473\u7740\u5728\u751f\u6210\u771f\u6b63\u7684\u5757\u6570\u636e\u4e4b\u524d\uff0c\u670d\u52a1\u5668\u5fc5\u987b\u4ece&#34\uff1b\u672c\u5730\u548c#34\uff1b\u533a\u5757ID\uff0c\u81f3&#34\uff1b\u5168\u7403\u548c#34\uff1b\u963b\u6b62ID\u3002\u5176\u76ee\u7684\u662f\u5728\u4e00\u4e2a\u5c0f\u7a7a\u95f4\u5185\u6324\u538b\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u636e\u2014\u2014\u4e00\u4e2a\u5757\u5b9a\u4e49\u53ef\u4ee5\u5c0f\u52304\u4f4d\u3002\n\u5728\u6211\u770b\u6765\uff0c\u7ef4\u57fa\u9875\u9762\u6ca1\u6709&#39\uff1b\u6211\u89e3\u91ca\u5f97\u4e0d\u591f\u597d\uff0c\u4e0d\u80fd\u5f88\u5feb\u7406\u89e3\uff1b\u8fd9\u662f\u53e6\u4e00\u5e45\u753b\uff1a\n\u5bf9\u6211\u6765\u8bf4\uff0c\u6211\u53d1\u73b0\u53d1\u9001\u8fd9\u4e9b\u5b57\u6bb5\u6570\u636e\u7ba1\u7406\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u75288\u4f4d\uff08\u800c\u4e0d\u662f\u6700\u5c0f\u76844\u4f4d\uff09\u5757\u5b9a\u4e49\u957f\u5ea6\u3002\u8fd9\u5c06\u7ed9\u6211\u4e00\u4e2a\u60ca\u4eba\u7684256\u4e2a\u53ef\u80fd\u7684\u8c03\u8272\u677f\u6761\u76ee\uff0c\u4ece\u6240\u6709\u53ef\u7528\u7684\u5757\u4e2d\u9009\u62e9\u3002\u7136\u540e\uff0c\u7f16\u5199\u5b9e\u9645\u7684\u533a\u5757\u6570\u636e\u5c31\u50cf\u53d1\u9001\u5f15\u7528\u8fd9\u4e9b\u8c03\u8272\u677f\u6761\u76ee\u7684\u5341\u516d\u8fdb\u5236\u6570\u4e00\u6837\u7b80\u5355\u30024\u4f4d\u8c03\u8272\u677f\u4e5f\u540c\u6837\u7b80\u5355\uff08\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a\u7684\u5b57\u8282\u662f\u4e24\u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5b57\u7b26\u8868\u793a4\u4f4d\uff0c\u6240\u4ee5\u201c0x01\u201d\u5c06\u8868\u793a\u4e24\u4e2a\u5757\u2014\u2014\u4e00\u4e2aid\u4e3a0\uff0c\u53e6\u4e00\u4e2aid\u4e3a1\uff09\uff0c\u4f46\u5b83\u4f1a\u5c06\u6211\u9650\u5236\u4e3a\u6bcf\u4e2a\u575716\u4e2a\u5757\u3002\n\u8be5\u6807\u51c6\u5b9e\u9645\u4e0a\u5141\u8bb8\u4ece\u6bcf\u4e2a\u57574\u4f4d\u52309bpb\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u5426\u5219\u5b83\u5047\u8bbe\u4e00\u4e2a15bpb\u7684\u76f4\u63a5\u8c03\u8272\u677f\u6620\u5c04\u2014\u2014\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5b83\u4e0d\u662f&#39\uff1bt\u5b57\u8282\u5bf9\u9f50\u3002\n\u5728\u6211\u7684\u5b9e\u73b0\u4e2d\uff0cbiome\u8c03\u8272\u677f\u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u70b9\u4e0d\u540c\u2014\u2014\u5b83\u53ea\u53d1\u9001\u4e00\u4e2a\u7a7a\u8c03\u8272\u677f\uff0c\u7136\u540e\u5c06biome ID 0x01\uff08minecraft:plains\uff09\u76f4\u63a5\u6620\u5c04\u5230\u533a\u5757\u5185\u7684\u6240\u6709\u533a\u57df\u3002\u8fd9\u662f\u57fa\u4e8e\u6211\u5bf9\u9999\u8349\u5982\u4f55\u5de5\u4f5c\u7684\u9006\u5411\u5de5\u7a0b\u2014\u2014\u6211\u6000\u7591\u5305\u4e2d\u8fd9\u90e8\u5206\u7684\u73b0\u6709\u6587\u6863\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u6211&#39\uff1b\u6211\u8981\u4e48\u5f97\u5230\u592a\u591a\u6570\u636e\uff0c\u8981\u4e48\u6bcf\u6b21\u90fd\u4e22\u5931\u51e0\u4e2a\u5b57\u8282\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u5757\u666e\u901a\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u7279\u522b\u7684\u4e1c\u897f\u3002\u6211\u5f53\u7136\u60f3\u505a\u4e00\u4e9b\u6f14\u793a\uff0c\u5c55\u793a\u670d\u52a1\u5668\u53ef\u4ee5\u505a\u7684*\u66f4\u591a*\u800c\u4e0d\u4ec5\u4ec5\u662f\u52a0\u8f7d\u548c\u663e\u793a\u5757\uff0c\u4f46\u6211\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u60f3\u4e3a\u6211\u7684\u6bcf\u4e2a\u6f14\u793a\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u6e90\u4ee3\u7801\u6811\u3002\u6211\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4e00\u7cfb\u5217\u6211\u79f0\u4e4b\u4e3a\u201chooks\u201d\u7684\u53ef\u91cd\u5199\u51fd\u6570\uff0c\u4ee5\u53ca\u670d\u52a1\u5668\u52a0\u8f7d\u81ea\u5df1\u4ee3\u7801\u7684\u9009\u9879\u3002\u8fd9\u5141\u8bb8\u4efb\u4f55\u4e8b\u60c5\uff0c\u4ece\u6539\u53d8\u4e16\u754c\u7684\u5916\u89c2\uff0c\u5230\u8fde\u63a5pkt_\u6548\u679c\uff0c\u8ba9\u73a9\u5bb6\u5728\u79fb\u52a8\u9f20\u6807\u65f6\u53d1\u51fa\u6ef4\u7b54\u58f0\u3002\u4e0b\u9762\u6211\u9644\u4e0a\u4e00\u4e2a\u7b80\u5355\u7684\uff08\u672a\u4f18\u5316\u7684\uff09&#34\uff1b\u63d2\u4ef6&#34\uff1b\u8fd9\u4f1a\u4ece\u9ed8\u8ba4\u8c03\u8272\u677f\u4e2d\u751f\u6210\u4e00\u4e2a\u5305\u542b\u968f\u673a\u5757\u7684\u5757\uff0c\u8fd9\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5947\u602a\u7684\u7ed3\u679c&#39\uff1b\u8fd9\u5728\u89c6\u89c9\u4e0a\u6709\u70b9\u6709\u8da3\u3002\n#!/usr/bin/env bash#\u5730\u56fe\u3002sh-\u7b80\u5355\u5730\u56fe\u4fee\u6539\u5c55\u793a\u51fd\u6570hook_chunks\uff08\uff09{chunk_headerfor\uff08\uff08i=0\uff1bi&lt\uff1b4096\uff1bi++\uff09\uff1bdochunk+=&#34\uff1b$\uff08printf&#39\uff1b%02x&#39\uff1b$\uff08\u968f\u673a%30\uff09))&#34;donechunk#u footeecho\u548c#34$\u5757\u548c#34&gt$TEMP/world/0000000000000000 pkt_chunk FFFFFFFFFFFFFF00pkt_chunk FFFFFFFF00000000pkt_chunk 00000000 FFFFFF00pkt_chunk 00000000 pkt_chunk 00000000000000000000 pkt_chunk 00000000000000 pkt_chunk 00000001 FFFFFF00pkt_chunk 00000001 00000000 pkt_chunk 00000001\u5b83&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u9ad8\u5206\u6e38\u620f\uff0c\u5b83\u628a\u4f60\u6254\u5230\u4e00\u5757\u968f\u673a\u653e\u7f6e\u7684\u77f3\u5934\u548c\u77ff\u77f3\u4e0a\u3002\u6316\u51fa\u6700\u6709\u4ef7\u503c\u7684\u77ff\u77f3\uff0c\u76f4\u5230\u8ba1\u65f6\u5668\u8017\u5c3d\uff01\n\u4f17\u6240\u5468\u77e5\uff0cBash\u4e0d\u64c5\u957f\u5904\u7406\u5341\u8fdb\u5236\u6570\u3002\u5b83&#39\uff1b\u5bf9\u4e8e\u6574\u6570\uff0cs*ok*\uff08\u53ea\u8981\u4f60\u4e0d&#39\uff1b\u5bf9\u5b83\u4eec\u505a\u592a\u591a\u9ad8\u7b49\u6570\u5b66\u8fd0\u7b97\uff09\uff0c\u4f46\u5904\u7406\u5341\u8fdb\u5236\u6570\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5728\u8f93\u5165\u65f6\u5c06\u5176\u76f8\u4e58\uff0c\u7136\u540e\u5728\u6b63\u786e\u7684\u8f93\u51fa\u4f4d\u7f6e\u653e\u7f6e\u4e00\u4e2a\u70b9\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u5927\u591a\u6570\uff08\u5982\u679c\u4e0d\u662f\u5168\u90e8\u7684\u8bdd\uff1f\uff09\u5deb\u672f\u5904\u7406\u7684\u6570\u5b57\u662f\u6574\u6570\u3002\n\u591a\u4eba\u6e38\u620f\u6ca1\u6709&#39\uff1b\u771f\u7684\u4e0d\u884c\u5417\uff1f\u6211\u7684\u610f\u601d\u662f\uff0c\u6709\u70b9\u50cf\uff0c\u4f46\u6211\u4ece\u6765\u6ca1\u6709\u771f\u6b63\u82b1\u65f6\u95f4\u6765\u5b8c\u6210\u5b83\u548c\u64e6\u4eae\u5b83\u3002\n... \u8fd9\u610f\u5473\u7740\u5b83\u5fc5\u987b\u4f7f\u7528\u53ef\u6015\u7684\u9ed1\u5ba2\u5728\u7ebf\u7a0b\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u3002\u76ee\u524d\uff0c\u5927\u591a\u6570\u5168\u5c40\u6570\u636e\u5b58\u50a8\u5728\u201c/dev/shm/witchcraft\u201d\u4e0b\uff0c\u5185\u90e8\u79f0\u4e3a\u201c$TEMP\u201d\u3002\n\u5deb\u672f\u5f88\u6162\uff0c\u5c24\u5176\u662f\u5728\u591a\u7ebf\u7a0b\u4e4b\u95f4\u7684\u6570\u636e\u4ea4\u6362\u65b9\u9762\u3002\u5510&#39\uff1bI don\u2019\u6211\u4e0d\u5e0c\u671b\u80fd\u591f\u53d1\u9001\u5927\u91cf\u6570\u636e\uff0c\u751f\u6210\u548c\u53d1\u900116\u4e2a\u5b9e\u4f53\u5757\u53ef\u80fd\u9700\u8981\u4e00\u79d2\u949f\u7684\u65f6\u95f4\u3002\n\u5deb\u672f\u76ee\u524d\u53ea\u6709\u5728\u5b89\u88c5\u4e86\u6700\u65b0\u7684BusyBox\uff081.35.0\uff09\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u8fd0\u884c\u3002\u6211\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u6709\u7528GNU coreutils\u6d4b\u8bd5\u5b83\uff0c\u4f46\u6211\u9884\u8ba1\u5b83\u4f1a\u8d62&#39\uff1b\u4e0d\u884c\u3002\n\u7b54\uff1a\u5deb\u672f\u5185\u90e8ID\u5728src/palette\u4e2d\u5b9a\u4e49\u3002sh\uff0c\u53ef\u4ee5\u5728&#34\u4e2d\u91cd\u65b0\u5b9a\u4e49\uff1b\u63d2\u4ef6&#34\uff1b\u3002\u53ef\u4ee5\u4ece\u670d\u52a1\u5668\u83b7\u53d6\u5185\u90e8ID\u6620\u5c04\u5230\u7684\u5916\u90e8ID\u3002\u67e5\u770b\u6709\u5173\u6570\u636e\u751f\u6210\u5668\u7684\u53c2\u8003\u9875\u3002\n\u7b54\uff1aselfisekai\u63d0\u51fa\u4e86\u8fd9\u4e2a\u540d\u5b57\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u6211&#39\uff1b\u6211\u662f\u4e2a\u5973\u5deb\uff0c\u6211\u89c9\u5f97\u5f88\u68d2*\n\u5927\u5bb6\u57282022\u5e742\u670815\u65e516:40:40\u4e50\u4e8e\u52a9\u4eba\u57282022\u5e742\u670815\u65e516:59:22\u8fd9\u4e2a\u9879\u76ee\u975e\u5e38\u9177\uff0c\u4f46\u4f60\u7684\u5b57\u4f53\u9009\u62e9\u8ba9\u5b83\u975e\u5e38\u96be\u4ee5\u9605\u8bfb\u3002\u8fd9\u4e2a\u9ed1\u5e95\u7070\u7684\u8bc4\u8bba\u6846\u7b80\u76f4\u662f\u75af\u4e86\uff01\uff1aD\n\u8428\u83f2\u5c142022\u5e742\u670815\u65e517:10:48\u54e6\uff0c\u5929\u54ea\uff0c\u8fd9\u662f\u8bc5\u5492\u3002\u6bd4\u6211\u5728bash\u4e2d\u770b\u5230\u7684HTTP\uff08s\uff09\u670d\u52a1\u5668\u66f4\u91cd\u8981\u3002\u3002\u3002\u6211\u559c\u6b22~\uff01\u3002\u3002\u3002\u7b49\u7b49\uff0c\u8fd9\u662fminecraft\u5b57\u4f53\u3002\u4e0e\u4e4b\u524d\u7684\u8bc4\u8bba\u4e00\u81f4\uff0c\u7070\u8272\u4e0a\u7684\u9ed1\u8272\u5f88\u96be\u7406\u89e3\n\u300a\u65b0\u8bfb\u8005\u300b\u4e8e2022\u5e742\u670815\u65e517:48:56\u4f5c\u4e3a\u4e00\u4e2a\u5bf9bash\u77e5\u4e4b\u751a\u5c11\u7684\u4eba\uff0c\u8fd9\u672c\u4e66\u8bfb\u8d77\u6765\u975e\u5e38\u6709\u8da3\u3002\u6211\u4e5f\u559c\u6b22\u8fd9\u4e2a\u7f51\u7ad9\uff01\uff1a\uff09\n2022\u5e742\u670815\u65e517:49:01 jos\u00e92022\u5e742\u670815\u65e518:06:37 I&#39\uff1b\u6211\u51e0\u4e2a\u6708\u524d\u5c31\u6709\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u4f46\u6211\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u662f\u53ef\u80fd\u7684\u3002\u8fd9\u592a\u68d2\u4e86\uff01\u5e72\u5f97\u597d\u3002\n2022\u5e742\u670815\u65e5\u963f\u56fe\u5c14\uff0c2022\u5e742\u670815\u65e518:15:27\u8389\u8389\uff0c2022\u5e742\u670815\u65e518:17:05\u9884\u53d6\uff0c2022\u5e742\u670815\u65e518:22:08\u62c9\u6590\u5c14\uff0c2022\u5e742\u670815\u65e518:49:27\u4e39\u5c3c\u5c14\uff0c2022\u5e742\u670815\u65e518:49:40\u51ef\u5c14\u675c\uff0c2022\u5e742\u670815\u65e519:20:46\u90a3&#39\uff1b\u8fd9\u592a\u75af\u72c2\u4e86\u3002\u6211\u5728C++\u4e2d\u7f16\u5199\u4e86\u4e00\u4e2a\u5c0f\u578bMC\u7f51\u7edc\u5b9e\u73b0\uff0c\u5728\u6211\u5f00\u59cb\u770b\u5230\u5b83\u4eec\u5982\u4f55\u968f\u673a\u5730\u6539\u53d8\u4e0d\u540c\u7248\u672c\u7684\u6570\u636e\u5305\u540e\uff0c\u653e\u5f03\u4e86\u3002\u6211\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u60f3\u8ddf\u4e0a\u3002\u4f46\u5728bash for MC\u4e2d\u8fd9\u6837\u505a\u592a\u75af\u72c2\u4e86\u3002\u6211\u56de\u53bb\u4e3aMC\u7f16\u5199\u4e86\u4e00\u4e2a\u5c0f\u578b\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\u3002\n\u897f\u5965\uff1a2022\u5e742\u670815\u65e519:36:33\u4f60\u7684\u7f51\u7ad9\u5f88\u68d2\u3002\u4f60\u7684\u5e16\u5b50\u5f88\u68d2\u3002\u4f60\u7684\u4e00\u5207\u90fd\u5f88\u597d\u3002\u7ee7\u7eed\u5de5\u4f5c\uff0c\u5b83&#39\uff1b\u8fd9\u7edd\u5bf9\u503c\u5f97\u3002\u3002\u3002\n\u6bd4\u91d12022\u5e742\u670815\u65e519:39:06\u6211\u559c\u6b22\u8fd9\u4e2a\u3002\u5982\u679c\u6211\u80fd\u505a\u70b9\u6709\u4ef7\u503c\u7684\u4e8b\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\u7684\u3002\u611f\u8c22\u8fd9\u4e2a\u6709\u8da3\u7684\u975e\u4f20\u7edf\u9879\u76ee\u3002\n2022\u5e742\u670815\u65e5\uff0c20:03:07\u7c73\u51ef\u5c14\u7684\u8282\u76ee\u5f88\u9177\uff01\u8bf7\u95ee\u82b1\u4e86\u591a\u5c11\u65f6\u95f4\uff1f\u6211\u4e0d&#39\uff1b\u6211\u771f\u7684\u4e0d\u77e5\u9053\u534f\u8bae\u6709\u591a\u590d\u6742\uff0c\u6216\u8005\u6bcf\u4e2a\u6d4b\u8bd5\u9700\u8981\u591a\u957f\u65f6\u95f4\uff0c\u6bd4\u5982\u4f60\u662f\u5426\u9700\u8981\u91cd\u542f\u5ba2\u6237\u7aef\u7b49\u7b49\u3002\n2022\u5e742\u670815\u65e5\u7684anon\uff0c2022\u5e742\u670815\u65e5\u768420:53:12\uff0c2022\u5e742\u670821\u65e5\u768421:16:27\u8fd9\u662f\u4e00\u7bc7\u5173\u4e8e\u8fd9\u4e00\u8fc7\u7a0b\u7684\u7cbe\u5f69\u6587\u7ae0\u3002\u5b66\u4e60\u7f16\u7801\u7684\u6700\u4f73\u65b9\u6cd5\u4e4b\u4e00\u662f\u505a\u6216\u770b&#34\uff1b\u5982\u679c\u6211\u505a\u4e86\u8fd9\u4ef6\u611a\u8822\u65e0\u610f\u4e49\u7684\u4e8b&#34\uff1b\u7136\u540e\u770b\u5230\u6240\u6709\u7684\u9677\u9631\n2022\u5e742\u670815\u65e5\u7684eggmtf\uff0c2022\u5e742\u670815\u65e521:19:43\u7684hyperupcall\uff0c2022\u5e742\u670815\u65e521:25:36\u6211\u505a\u4e86\u5f88\u591aBash\u548clemmie\u544a\u8bc9\u4f60\uff0c\u8fd9\u771f\u662f\u592a\u7cdf\u7cd5\u4e86\uff01\u6709\u4eba\u4f1a\u8bf4&#39\uff1b\u5b83\u88ab\u8bc5\u5492\u4e86\uff0c\u4f46\u6211\u89c9\u5f97\u5b83\u5f88\u9177\u2014\u2014\u8c22\u8c22\u5206\u4eab^w^\n2022\u5e742\u670815\u65e5\uff0c22:03:16\uff0c\u4e3a&#34\u7684\u9ed1\u5ba2\u4eec\u6b22\u547c\uff1b\u5728Bash&#34\uff1b\uff0c\u6f02\u4eae\u7684\u5b57\u4f53\u8ba9\u6211\u60f3\u8d77\u4e00\u4e9bVGA\u7684\u4e1c\u897f\u3002\n2022\u5e742\u670815\u65e5\uff0c22:17:18\uff0c2022\u5e742\u670816\u65e5\uff0c01:34:09\uff0ca nat you don&#39\uff1b\u6211\u4e0d\u77e5\u90532022\u5e742\u670816\u65e502:19:17 chip at 16.02.2022\uff0c2022\u5e742\u670816\u65e502:49:23 ayo\uff0c2022\u5e742\u670816\u65e506:12:39 trekkie1701c\uff0c2022\u5e742\u670816\u65e506:16:55\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7BCMath\u5c06\u65b9\u7a0b\u4f20\u8f93\u5230bash\u811a\u672c\u4e2d\uff0c\u5728\u5176\u4e2d\u5de7\u5999\u5730\u5904\u7406\u6d6e\u70b9\u6570\u3002\u5982\u679c\u6211&#39\uff1b\u6211\u4e0d\u5f97\u4e0d\u8fd9\u4e48\u505a\uff0c\u5b83&#39\uff1bs\u76f8\u5f53\u4e8e\uff1avar=$\uff08echo&#34\uff1bscale=9\uff1b$num1/$num2&#34\uff1b|bc\uff09\uff0c\u5176\u4e2d9\u662f\u5c0f\u6570\u4f4d\u6570\u548c/\u662f\u64cd\u4f5c\u6570\uff0c\u53ef\u4ee5\u7528\u4efb\u4f55\u6570\u5b57\u66ff\u6362\u3002\u8fd9\u53ef\u80fd\u6548\u7387\u5f88\u4f4e\uff0c\u4f46\u5b83\u786e\u5b9e\u6709\u6548\u3002\n2022\u5e742\u670816\u65e508:19:20\u5b89\u8bfa2022\u5e742\u670816\u65e511:11:57\u7c732022\u5e742\u670816\u65e511:21:37\u8fd9\u6b63\u662f\u6211\u559c\u6b22\u8bfb\u7684\u90a3\u79cd\u75af\u72c2\u7684\u4e1c\u897f\uff01\u671f\u5f85\u66f4\u591a\u8fd9\u6837\u7684\u4e8b\u60c5\uff01\uff1a3.\nCharles Duffy\u4e8e2022\u5e742\u670816\u65e513:13:19\u5728bash\u4e2d\u5b8c\u5168\u53ef\u4ee5\u8bfb\u5199\u5305\u542bNUL\u7684\u6d41\u2014\u2014\u8bc0\u7a8d\u662f\u5c06\u5b83\u4eec\u5b58\u50a8\u4e3a\u6570\u7ec4\uff08\u7ec8\u7aef\u5143\u7d20\u5305\u542b\u6700\u540e\u4e00\u4e2aNUL\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\uff09\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u3002\u800c\u4e14\uff0cecho\u603b\u4f53\u4e0a\u662f\u4e00\u4e2a\u4ee4\u4eba\u618e\u6076\u7684\u4e1c\u897f\uff0c\u751a\u81f3\u63cf\u8ff0\u5b83\u7684POSIX\u89c4\u8303\u4e5f\u8bf4\u5e94\u8be5\u4f7f\u7528printf\u2014\u2014\u5bfb\u627eSt\u00e9phane Chazelas\u5bf9&#34\uff1b\u4e3a\u4ec0\u4e48printf\u6bd4echo\u66f4\u597d&#34; \u5728unix\u4e0a\u3002\u65af\u5854\u514b\u4ea4\u6362\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\n2022\u5e742\u670816\u65e5\u7684RJM\u30012022\u5e742\u670816\u65e5\u768419:12:40 RSEA\u30012022\u5e742\u670816\u65e5\u768420:00:24 Leiger Gaming\u30012022\u5e742\u670816\u65e5\u768422:23:12 Wensz\u30012022\u5e742\u670816\u65e5\u768422:42:09\u901a\u8fc7\u8bc4\u8bba\uff0c\u60a8\u540c\u610f\u5c06\u4f1a\u8bddcookie\u5b58\u50a8\u5728\u60a8\u7684\u8bbe\u5907\u4e0a\uff1bP", "note_en": "For the past year or so, I&#39;ve been thinking about writing a Minecraft server in Bash as a thought excercise. I once tried that before with the Classic protocol (the one from 2009), but I quickly realized there wasn&#39;t really a way to properly parse binary data in bash. Take the following code sample:\n function a() {\tread -n 2 uwu\techo &#34;$uwu&#34; | xxd} This would read two bytes into a variable, and then pass them to `xxd`, which should show the hexdump of the data.\n   Everything&#39;s great, until we pass a nullbyte (0x00). Not only does Bash ignore nullbytes in strings, it also doesn&#39;t present any way to detect that a nullbyte has occured. Considering that the protocol I&#39;m trying to implement is strictly binary, this can severely mangle the data.\n    One rainy evening in late January, I&#39;ve had a revelation. What if I reversed the order of that function? If the binary data never reaches a variable (or, more precisely, a substitution), and just stays inside a pipe, can it pass nullbytes around?\n   The answer is yes! After some iterations, I decided to use `dd` passed to `xxd` instead of just `xxd`, because this way I can finetune how many bytes to read.\n # the $len variable is assigned earlier, basing on a similar read functiona=$(dd count=$len bs=1 status=none | xxd -p) This gave me a hex string, on which I could do pattern matching, pattern replace, data extraction... and more. Sending out responses could be done analogically, using xxd&#39;s Reverse switch.\n `ncat` is used for listening on Minecraft&#39;s default TCP port. It launches the main shell script (`mc.sh`) after it receives an incoming connection.\n  Note: the following section contains mostly my ramblings about implementing number conversion routines in Bash; If this does not interest you, feel free to  skip it.\n The first thing one should implement for a Minecraft server to function would be the  Server List Ping packet - not because it&#39;s required (heck, your server can just not reply to it properly, and you&#39;d still be able to join the game), but because it&#39;s the easiest to tackle first. It helps to familiarize yourself with core protocol concepts, such as  data types types:\n  Most data types were trivial to implement, but some gave me more of a fight than others - notably the IEEE754 floating point numbers (more on them later), and so-called VarInt/VarLong numbers. Those may be familar to those acquainted with the MQTT protocol, as they&#39;re just a modified version of the  LEB128 encoding.\n LEB128 is a compression scheme for integers. By splitting a byte into 1 signalling bit and 7 data bits, the scheme stores the number length. If the 1st bit is 0, then this byte is the last one; else, then there&#39;s another byte after this one. Great scheme if most of your numbers are either between 0 and 127 or 256 and 16383, otherwise it&#39;s `buy one byte, get one free` situation, because numbers that would otherwise fit in a byte get pushed out to the next one by a single bit.\n   # from  src/int.sh# int2varint(int)function int2varint() {\tlocal a\tlocal b\tlocal c\tlocal out\tout=$(printf &#39;%02x&#39; &#34;$1&#34;)\tif [[ $1 -lt 128 ]]; then\t\t:\telif [[ $1 -lt 16384 ]]; then\t\ta=$(($1%128))\t\tb=$(($1/128))\t\tout=$(printf &#34;%02x&#34; $((a+128)))$(printf &#34;%02x&#34; $b)\telif [[ $1 -lt $((128*128*128)) ]]; then\t\ta=$(($1%128))\t\tc=$((($1/128)%128))\t\tb=$(($1/16384))\t\tout=$(printf &#34;%02x&#34; $((a+128)))$(printf &#34;%02x&#34; $((c+128)))$(printf &#34;%02x&#34; $b)\tfi\techo -n &#34;$out&#34;} I&#39;ve had problems translating the reference implementation to Bash, so instead I played with the protocol enough to write my own from scratch. I figured out that it was basically a modulo and a division in a trenchcoat, which I used to my advantage in the code snippet above.\n I took a more contemporary approach on  the decoder, using an AND, and then multiplying the result - similarly to how the reference did it.\n LEB128 definitely wasn&#39;t the hardest or the most annoying to implement (that one goes to IEEE754 floating point); I still don&#39;t like how it is sprinkled in random places inside the protocol, interleaved with regular ints (and longs), and in some cases even signed shorts.\n  I&#39;m not a math person. When I see the exponential notation spewed out by Python, I scream and run. This may be the main cause of why I hated implementing these floating point converters. I won&#39;t be going too deep into specifics of how this format works - instead, I recommend you check out  this wikipedia page.\n The basic implementation requires a loop, inside of which there&#39;s a negative power applied to the result; Bash doesn&#39;t natively support negative powers, which sent me on a trip to find a utility that does.\n A suggestion I found while duckduckgoing was to use perl, but I consider that cheating. Alternatively, tried using `bc`, but it seems that either it doesn&#39;t support powers at all, or the busybox version does not. Bummer.\n When I was about to give up, I got reminded that  Kate once made a  plot program in awk. Surely, awk has powers? ~~Maybe even super cow powers?~~ It turns out that it does!\n $ echo &#39;&#39; | awk &#39;{print (2**-1)}&#39;0.5 With this knowledge, I scribbled a working implementation and attached it to data decoded from the Player Move packet. In a trial run, the client sent around 50-100 packets like that, each one with three doubles (X, Y, Z). It turned out that the conversion function was so slow, that the server wasn&#39;t done with that workload after multiple minutes - something rather unacceptable for a real-time game.\n The easiest solution to lowering the response time would be lowering the amount of calls to external binaries, such as awk. As most of my workload was already inside a bash `for` loop, I just  moved the loop inside `awk`, which has saved me literally tens of calls to awk.\n # (...)asdf=$(cut -c 13- &lt;&lt;&lt; $val | sed -E &#39;s/./,&amp;/g;s/,//&#39; | tr -d &#39;n&#39; | awk -F , &#39;{power_count=-1x=0;for(i=1; i&lt;=NF; i++) {x=(x + ($i * (2 ** power_count)))power_count=power_count-1;}print(x+1)}&#39;)# (...) The conversion is still quite slow (it takes ~10ms on my Xeon E5-2680v2), but this is to be expected with bash scripts. For a cheap comparsion, the old version took around 350ms, but I don&#39;t have solid measurements to prove that. ~~still, 35x faster, woo!~~\n  Finally, something made up by Mojang themselves!  Position is a 64-bit Long value, where three coordinates are stored alongside each other: X gets 26 most significant bits, Z gets 26 middle bits, Y gets 12 least significant bits. I&#39;m not the biggest fan of weird data types like this one, but it was  crazy easy to implement in Bash, because it has all the needed bitshift operators.\n The worst part about this data type is that it doesn&#39;t actually get used much. Around half of the packets store X, Y and Z coordinates as separate Double vaules. This means that:\n we get 9 digits of floating point accuracy, if we assume that we&#39;re only ever going to need numbers up to 30 000 000 (where the world border is at by default)\n I kinda see the reasoning as to why it&#39;s like that, but I still don&#39;t like the current state. Normal server communication uses zlib anyways, and you realistically won&#39;t ever need more than two (or maybe three max) digits of decimal precision to describe a position within a block.\n  Lastly, there&#39;s the  NBT format, also an internal thing made by  Mojang  Hatsune Miku herself. NBT is like JSON, but for binary data. Not unlike JSON, it gets abused to store arbitrary data beyond spec - for example, Mojang stores bitstreams of variable length as an array of Longs; if such array isn&#39;t long-aligned, or even byte-aligned, the last Long is padded with zeroes.\n At one point I&#39;ve had a NBT parser implementation implemented almost fully, but I decided it was not worth the hassle to finish it. The code is currently lost, due to my extensive use of tmpfs as a project directory, and a system crash.\n  With all the math out of the way, here comes the *actually fun* part. I documented some of my adventures  on Twitter, but that thread was merely a glimpse on the actual development process. Also, let&#39;s assume that we already have the Server Ping packet out of our way, and it&#39;s a matter of actually making the game joinable now.\n To allow a client to join your server, it has to complete the handshake process and send a few extra packets (chunks, player position, inventory, join game). Two biggest obstacles on that course were the Join Game packet, and the data structure within the Chunk packets.\n  The join game sends some initial metadata: player&#39;s entity ID, gamemode, some information about the world and, since ~1.16, a &#34;Dimension codec&#34;. This is a NBT Compound, containing the following fields:\n   The Dimension codec part was a major pain to implement. For my purposes, I decided to retrieve that NBT field from a vanilla server. It&#39;s the only binary blob in this implementation, and while it could be reimplemented, I don&#39;t see any reason to reimplement something that I don&#39;t necessarily need (or want) to customize.\n  At first glance, this packet looks huge and scary! If you have the table from the link above open side by side with this article, I invite you to imagine that every one of those huge BitSet fields is actually just `0x00`, and that you don&#39;t need to send the Block Entity field at all. This leaves us with X, Y, heightmaps (which are fancily encoded repetitions of `b000000010`, and could be virtually anything), and the ominous Data field. Less scary, right?\n  The Data field is actually an array of Chunk Section. A Chunk Section is 16 by 16 by 16 blocks, and multiple sections can be stacked together to create a Chunk. For our purposes, this array only has a single element, just to simplify the code a bit.\n A Chunk Section contains a block count, a block states container, and a biome container. Both of these containers use palette structure to encode possible block values - this means that before the real block data, server has to define a mapping from the &#34;local&#34; block IDs, to &#34;global&#34; block IDs. This aims to squish as much data as possible inside a small space - a block definition can be as small as 4 bits.\n As in my opinion the wiki page doesn&#39;t explain it well enough to quickly comprehend, here&#39;s another drawing:\n   For me, the easiest way I found to send those fields data management-wise was to use an 8 bit (instead of a minimal 4 bit) block definition length. This would give me a whopping 256 possible palette entries, out of all available blocks to choose from. Then, writing actual chunk data would be as easy as sending hex numbers referencing those palette entries. A 4-bit palette would be equally easy (a byte represented as a hex string is two characters, representing 4 bits each, so `0x01` would represent two blocks - one with id 0, and another with id 1), but it would limit me to 16 blocks per chunk.\n The standard actually allows for anything from 4 bits per block to 9bpb, otherwise it assumes a direct palette mapping with 15bpb - I too have no idea why it isn&#39;t byte-aligned.\n The biome palette works a bit differently in my implementation - it just sends an empty palette, and then maps biome ID 0x01 (minecraft:plains) directly to all regions inside the chunk. This was based on my reverse engineering of how vanilla works - I suspect that the existing documentation of this part of the packet is incorrect, as I&#39;m either getting too much data, or missing a few bytes every time.\n    By now, we only have a plain chunk, not anything special by any means. I definitely wanted to make a few demos to show that the server can do *more* than just load and show a chunk, but I didn&#39;t want to create a separate source tree for every demo I spewed out. My solution is a series of overridable functions I called `hooks`, and an option for the server to load your own code. This allows for anything from changing how the world looks, to hooking up a pkt_effect so your player makes ticking noises while you move the mouse. Below I attach a simple (unoptimized) &#34;plugin&#34; that generates a chunk with random blocks from the default palette, which makes for an oddity that&#39;s kinda interesting visually.\n #!/usr/bin/env bash# map.sh - simple map modification showcasefunction hook_chunks() {chunk_headerfor (( i=0; i&lt;4096; i++ )); dochunk+=&#34;$(printf &#39;%02x&#39; $((RANDOM%30)))&#34;donechunk_footerecho &#34;$chunk&#34; &gt; $TEMP/world/0000000000000000pkt_chunk FFFFFFFF FFFFFFFF 00pkt_chunk FFFFFFFF 00000000 00pkt_chunk FFFFFFFF 00000001 00pkt_chunk 00000000 FFFFFFFF 00pkt_chunk 00000000 00000000pkt_chunk 00000000 00000001 00pkt_chunk 00000001 FFFFFFFF 00pkt_chunk 00000001 00000000 00pkt_chunk 00000001 00000001 00}   Another demo worth taking a look at is digmeout - it&#39;s a simple highscore based game, which throws you onto a chunk with randomly placed stone and ores. Dig out the most valuable ores until the timer runs out!\n     Bash is notoriously bad at handling decimal numbers. It&#39;s *ok* with Integers (as long as you don&#39;t do too advanced maths on them), but the only way to handle a decimal number is by multiplying it on input, and somehow placing a dot in the correct place for output. Because of this, most (if not all?) numbers handled by Witchcraft are ints.\n The multiplayer doesn&#39;t really work? I mean, it kinda does, but I never really took time to finish it and polish it up.\n  ... which means that it has to use terrible hacks to communicate between threads. Currently, most global data is stored under `/dev/shm/witchcraft`, internally referenced to as `$TEMP`.\n Witchcraft is slow, especially in terms of data exchange between multiple threads. Don&#39;t expect to be able to send massive amounts of data, generating and sending 16 solid chunks can take as long as a second.\n Witchcraft currently runs *only* if you have the latest BusyBox (1.35.0) installed. I haven&#39;t tested it with GNU coreutils, but I expect it won&#39;t work.\n      A: Witchcraft-internal IDs are defined in  src/palette.sh, and can be redefined in &#34;plugins&#34;. The external IDs to which the internal ones are mapped can be acquired from the vanilla server. Check out this reference page on  Data Generators.\n   A: selfisekai came up with that name, possibly because I&#39;m a (bash) witch, and I thought it was *great*\n Everyone at 15.02.2022, 16:40:40  helpful person at 15.02.2022, 16:59:22 This project is wicked cool but your font choices make it super hard to read. And this black-on-dark-gray comment box is insane! :D\n  Saphire at 15.02.2022, 17:10:48 Oh dear, that is cursed. Much more so than the HTTP(s) server in bash that I have seen around... I love it~!...wait is the font for this the minecraft font. And agree with previous comment, the black-on-gray is hard to read q-q\n new reader at 15.02.2022, 17:48:56 as someone that knows very little bash, this was extremely fun to read. love the website too! :)\n awesome stuff at 15.02.2022, 17:49:01  jos\u00e9 at 15.02.2022, 18:06:37 I&#39;ve had this idea a few months ago and I didn&#39;t think it was possible. This is awesome! good work.\n  Artur at 15.02.2022, 18:15:27   lily at 15.02.2022, 18:17:05   prefetcher at 15.02.2022, 18:22:08  Rafael at 15.02.2022, 18:49:27   Daniel at 15.02.2022, 18:49:40  keldu at 15.02.2022, 19:20:46 That&#39;s crazy. I wrote a small MC network implementation in C++ and gave up after I started to see how they randomly change packets in different versions.I didn&#39;t want to keep up with that. But do this in bash for MC is crazy.I went back and wrote a small reverse proxy server for MC though.\n  Theo at 15.02.2022, 19:36:33 Your website is great. Your posts are great. Your everything is great. Keep up the work, It&#39;s definitely worth it...\n bigking at 15.02.2022, 19:39:06 ilove this. gonna play with it, if i manage to make something worthwhile i let you know. thanks for this interesting unconventional project.\n Mikael at 15.02.2022, 20:03:07 Cool project! May I ask how much time went into it? I don&#39;t really know how complex the protocol is or how long time each test takes, like if you need to restart the client and stuff.\n anon at 15.02.2022, 20:53:12  Triggernometry at 15.02.2022, 21:16:27 this is a glorious write-up of the process tho.one of the best ways to learn coding is to do or see &#34;what if i did this stupid pointless thing&#34; then seeing aaaaaall the pitfalls\n eggmtf at 15.02.2022, 21:19:43   hyperupcall at 15.02.2022, 21:25:36 I do a lot of Bash and lemmie tell you, this is pretty badass! Some people would say it&#39;s cursed, but I think its just cool - Thanks for sharing ^w^\n egg at 15.02.2022, 22:03:16 Wow for the hackery of the &#34;in Bash&#34;, and nice font reminds me of some VGA stuff.\n anon at 15.02.2022, 22:17:18   j3s at 16.02.2022, 01:34:09  a nat you don&#39;t know at 16.02.2022, 02:19:17   chip at 16.02.2022, 02:49:23  ayo at 16.02.2022, 06:12:39  trekkie1701c at 16.02.2022, 06:16:55 You can hackily handle floating point numbers in a bash script by piping the equation through BCMath.In the case that I&#39;ve had to do it, it&#39;s pretty much:var=$(echo &#34;scale=9;$num1/$num2&#34; | bc)Where the 9 is the number of decimal places and / is the operand and can be replaced by whatever.This is probably highly inefficient but hey it works.\n punk xfce at 16.02.2022, 08:19:20  annow at 16.02.2022, 11:11:57  M at 16.02.2022, 11:21:37 This is exactly the kind of insane (in a good way) stuff I love to read about! Looking forward to more of this! :3\n Charles Duffy at 16.02.2022, 13:13:19 You can absolutely read and write streams containing NULs in bash -- the trick is to store them as arrays (with the terminal element containing everything after the last NUL) instead of as strings. Also, echo is an abomination in general, and even the POSIX spec describing it says that printf should be used instead -- search for the excellent answer by St\u00e9phane Chazelas to &#34;Why is printf better than echo?&#34; on unix.stackexchange.com\n RJM at 16.02.2022, 19:12:40  RSEA at 16.02.2022, 20:00:24   LeigerGaming at 16.02.2022, 22:23:12  Wensz at 16.02.2022, 22:42:09    By commenting, you agree for the session cookie to be stored on your device ;p", "posttime": "2022-02-17 11:30:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u670d\u52a1\u5668,writing,\u6570\u636e", "title": "\u5173\u4e8e\u5728Bash\u4e2d\u4ece\u5934\u5f00\u59cb\u7f16\u5199Minecraft\u670d\u52a1\u5668\u7684\u601d\u8003", "title_en": "My thoughts on writing a Minecraft server from scratch in Bash", "transed": 1, "url": "https://sdomi.pl/weblog/15-witchcraft-minecraft-server-in-bash/", "via": "", "real_tags": ["\u670d\u52a1\u5668", "writing", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073806, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u859b\u5b9a\u8c14\u5355\u5143\u6d4b\u8bd5\uff1a\u4e00\u79cd\u901a\u8fc7\u4f46\u672a\u80fd\u6d4b\u8bd5\u6211\u4eec\u60f3\u8981\u6d4b\u8bd5\u7684\u4e1c\u897f\u7684\u5355\u5143\u6d4b\u8bd5\u3002\n\u672c\u6587\u91cd\u70b9\u4ecb\u7ecd\u6211\u4eec\u5bf9666\u4e2aPython\u4ee3\u7801\u5e93\u7684\u4ee3\u7801\u626b\u63cf\uff0c\u4ee5\u68c0\u6d4b\u8fd9\u6837\u4e00\u4e2a\u859b\u5b9a\u8c14\u5355\u5143\u6d4b\u8bd5\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u4e2a\u95ee\u9898\uff08\u6211\u4eec\u572820\u4e2a\u4ee3\u7801\u5e93\u4e2d\u627e\u5230\u4e86\u5b83\uff0c\u540e\u6765\u63a8\u51fa\u4e86\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u4fee\u590d\u7a0b\u5e8f\uff09\uff1a\n\u4f60\u770b\u5230\u9519\u8bef\u4e86\u5417\uff1f\u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u5e38\u89c1\u7684\u9519\u8bef\u3002assertEqual\u548cassertTrue\u88ab\u641e\u7cca\u6d82\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u6211\u4eec\u68c0\u67e5\u7684666\u4e2a\u4ee3\u7801\u57fa\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u67093%\u7684\u4ee3\u7801\u57fa\u5c06\u4e24\u8005\u6df7\u6dc6\u4e86\u3002\u8fd9\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u95ee\u9898\uff0c\u5b83\u4f1a\u5f71\u54cd\u771f\u6b63\u7684\u4ee3\u7801\u5e93\uff0c\u751a\u81f3\u662f\u5177\u6709\u5de8\u5927\u793e\u533a\u548c\u5f3a\u5927\u6d4b\u8bd5\u548c\u4ee3\u7801\u5ba1\u67e5\u5b9e\u8df5\u7684\u6d3b\u8dc3\u5927\u578b\u4ee3\u7801\u5e93\uff1a\n\u8bf7\u53c2\u9605\u672c\u8981\u70b9\u4e2d\u7684\u5b8c\u6574\u5217\u8868\u3002\u8fd9\u4e2a\u95ee\u9898\u5982\u6b64\u666e\u904d\u7684\u4e8b\u5b9e\u8868\u660e\uff0c\u8fd9\u4e2a\u9519\u8bef\u7684\u4e00\u4e2a\u5173\u952e\u539f\u56e0\u662f\uff0c\u5728\u4ee3\u7801\u5ba1\u67e5\u671f\u95f4\u5f88\u5bb9\u6613\u6f0f\u6389\u5b83\u3002\u5feb\u901f\u6d4f\u89c8\u4ee3\u7801\u4e0d\u4f1a\u5f15\u8d77\u4efb\u4f55\u5371\u9669\u3002\u5b83\u201c\u770b\u8d77\u6765\u4e0d\u9519\uff01\u201d\u3002\n\u572819\u4e16\u7eaa\u672b\uff0c\u9a6c\u514b\u00b7\u5410\u6e29\u663e\u7136\u8bf4\u8fc7\uff0c\u4e0d\u662f\u4f60\u6240\u77e5\u9053\u7684\u8ba9\u4f60\u7740\u8ff7\u3002\u572819\u4e16\u7eaa\u672b\u7684\u6587\u732e\u4e2d\u662f\u6b63\u786e\u7684\uff0c\u572821\u4e16\u7eaa\u521d\u7684Python\u5355\u5143\u6d4b\u8bd5\u4e2d\u4e5f\u662f\u6b63\u786e\u7684\uff1a\u6ca1\u6709\u771f\u6b63\u6d4b\u8bd5\u6211\u4eec\u60f3\u8981\u6d4b\u8bd5\u7684\u4e1c\u897f\u7684\u6d4b\u8bd5\u6bd4\u6839\u672c\u6ca1\u6709\u6d4b\u8bd5\u66f4\u7cdf\u7cd5\uff0c\u56e0\u4e3a\u859b\u5b9a\u8c14\u7684\u6d4b\u8bd5\u4f1a\u8ba9\u4eba\u6beb\u65e0\u6839\u636e\u5730\u76f8\u4fe1\u8be5\u7279\u6027\u662f\u5b89\u5168\u7684\u3002\n\u5728\u4ee3\u7801\u8bc4\u5ba1\u671f\u95f4\uff0c\u8be5\u53d8\u66f4\u5df2\u88ab\u540c\u884c\u8bc4\u5ba1\u5e76\u63a5\u53d7\u3002\uff08\u201cLGTM\uff01\u201d\uff09\n\u7136\u540e\u5c06\u66f4\u6539\u90e8\u7f72\u5230prod\u2026\u4f46\u5728\u7b2c\u4e00\u6b21\u9047\u5230\u7528\u6237\u65f6\uff0c\u5b83\u5c31\u5931\u8d25\u4e86\n\u5728\u91cd\u65b0\u5ba1\u89c6\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5728\u8f6f\u4ef6\u5f00\u53d1\u751f\u547d\u5468\u671f\u4e2d\u7ed9\u4e88\u5982\u6b64\u5927\u4fe1\u5fc3\u7684\u5355\u5143\u6d4b\u8bd5\u5b9e\u9645\u4e0a\u6839\u672c\u6ca1\u6709\u6d4b\u8bd5\u529f\u80fd\u3002\u5982\u679c\u60a8\u9047\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u60a8\u5c31\u9047\u5230\u4e86\u8fd9\u7c7b\u5355\u5143\u6d4b\u8bd5\uff0c\u8fd9\u4e9b\u5355\u5143\u6d4b\u8bd5\u662f\u9488\u5bf9\u8fd9\u4e2a\u7279\u5b9a\u7684\u6d4b\u8bd5\u7528\u4f8b\u7684\u3002assertTrue\u662f\u5176\u4e2d\u4e4b\u4e00\u3002\n\u867d\u7136pytest\u975e\u5e38\u6d41\u884c\uff0c\u4f4628%\u7684\u4ee3\u7801\u5e93\u4ecd\u7136\u4f7f\u7528\u5185\u7f6e\u7684unittest\u5305\u3002\u4f7f\u7528\u5185\u7f6eunittest\u5305\u7684\u4ee3\u7801\u5e93\u5b58\u5728assertTrue gotcha\u7684\u98ce\u9669\uff1a\nassertTrue\u7684\u6587\u6863\u58f0\u660e\u6d4b\u8bd5expr\u4e3a\u771f\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u4e0d\u5b8c\u6574\u7684\u89e3\u91ca\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u6d4b\u8bd5expr\u662f\u5426\u771f\u5b9e\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u5c06\u4ee5\u4e0b\u4efb\u4f55\u503c\u7528\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u6d4b\u8bd5\u5c06\u901a\u8fc7\uff1a\nassertTrue\u8fd8\u63a5\u53d7\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd9\u662f\u663e\u793a\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5426\u4e3atruthy\u7684\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u8fd9\u4e2a\u8c03\u7528\u7b7e\u540d\u5141\u8bb8\u72af\u9519\u8bef\uff0c\u6d4b\u8bd5\u901a\u8fc7\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u65e0\u58f0\u5730\u5931\u8d25\u3002\n\u4f8b\u5982\uff0c\u5728\u5236\u4f5c20\u4e2aPRs\u4fee\u590d\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u4e00\u65e6\u6d4b\u8bd5\u4e0d\u518d\u662f\u859b\u5b9a\u8c14\u5355\u5143\u6d4b\u8bd5\uff0c\u5176\u4e2d\u4e00\u4e2a\u6d4b\u8bd5\u7531\u4e8e\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u9519\u8bef\u800c\u5f00\u59cb\u5931\u8d25\uff1a\n\u6211\u4eec\u8fd8\u53d1\u73b0\uff0c\u81f3\u5c11\u6709\u4e24\u4e2a\u6d4b\u8bd5\u5931\u8d25\uff0c\u56e0\u4e3a\u6d4b\u8bd5\u4e2d\u7684\u903b\u8f91\u662f\u9519\u8bef\u7684\u3002\u5982\u679c\u6211\u4eec\u628a\u5355\u5143\u6d4b\u8bd5\u770b\u4f5c\u662f\u63cf\u8ff0\u4ea7\u54c1\u5982\u4f55\u5de5\u4f5c\u7684\u4e00\u79cd\u6587\u6863\u5f62\u5f0f\uff0c\u8fd9\u4e5f\u662f\u4e0d\u597d\u7684\u3002\u4ece\u5f00\u53d1\u4eba\u5458\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5355\u5143\u6d4b\u8bd5\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u6bd4\u6ce8\u91ca\u548c\u6587\u6863\u5b57\u7b26\u4e32\u66f4\u53ef\u4fe1\uff0c\u56e0\u4e3a\u6ce8\u91ca\u548c\u6587\u6863\u5b57\u7b26\u4e32\u662f\u7f16\u5199\u7684\u58f0\u660e\uff08\u53ef\u80fd\u5f88\u4e45\u4ee5\u524d\uff0c\u4e5f\u53ef\u80fd\u73b0\u5728\u5df2\u7ecf\u8fc7\u65f6\u6216\u4e0d\u5b8c\u6574\uff09\uff0c\u800c\u901a\u8fc7\u7684\u5355\u5143\u6d4b\u8bd5\u8868\u660e\u903b\u8f91\u5951\u7ea6\u5f97\u5230\u4e86\u7ef4\u62a4\u2026\u2026\u53ea\u8981\u6d4b\u8bd5\u4e0d\u662f\u859b\u5b9a\u8c14\u6d4b\u8bd5\uff01\n\u4e5f\u8bb8\u9700\u8981\u66f4\u591a\u7684\u6570\u636e\uff0c\u4f46\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u859b\u5b9a\u8c14\u7684\u5355\u5143\u6d4b\u8bd5\u4e2d\u670915%\uff0820\u5206\u4e4b3\uff09\u9690\u85cf\u4e86\u635f\u574f\u7684\u529f\u80fd\u3002\n\u5f53\u4ee3\u7801\u5ba1\u67e5\u65f6\u3002doctor github bot\u5728github pull\u8bf7\u6c42\u4e2d\u68c0\u6d4b\u5230\u6b64\u9519\u8bef\uff0c\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u89e3\u51b3\u65b9\u6848\uff1a", "note_en": "Schr\u00f6dinger\u2019s unit-test : a unit test that passes but fails to test the thing we want to test.\n  This article focuses on our code scanning of 666 Python codebases to detect one such Schr\u00f6dinger\u2019s unit tests. Specifically, this gotcha (which we found in 20 codebases and later pushed an auto-generated fix for):\n Do you see the mistake? It\u2019s a relatively common mistake for a developer to make.  assertEqual and  assertTrue were muddled up. In fact of the 666 codebases we checked, we found 3% of them mixed the two up. This is a real problem that affects real codebases, even active large ones with a huge community and strong testing and code review practices:\n  See the full lists in  this gist. The fact the problem is so widespread suggests a key cause of this mistake is because it\u2019s so easy to miss during code review. A quick glance at the code does not raise any red flags. It \u201cLooks Good To Me!\u201d.\n  In the late 19th century Mark Twain apparently said  It\u2019s not what you know that gets you. it\u2019s what you think you know but ain\u2019t. What was true in late 19th century literature is also true in early 21st Python unit testing: tests that don\u2019t really test the thing we want to test is worse than no tests at all because a Schr\u00f6dinger\u2019s test gives unwarranted confidence that the feature is safe.\n  The change was peer reviewed and accepted during code review. (\u201cLGTM!\u201d)\n The change was then deployed to prod\u2026 only for it to fail upon first encounter with the user\n Upon revisiting the unit test it\u2019s then noted that the unit test that gave such great confidence during the software development life cycle was in fact not testing the feature at all. If you encountered this problem then you encountered this class of unit tests which this specific TestCase.assertTrue is one of.\n  While pytest is very popular, 28% of codebases  still use the built-in unittest package. The codebases that do use the built-in unittest package are at risk of the assertTrue gotcha:\n  The docs for  assertTrue state that  test that expr is True, but this is an incomplete explanation. Really it tests that the expr is  truthy, meaning if any of the following values are used in as the first argument the test will pass:\n    assertTrue also accepts a second argument, which is the custom error message to show if the first argument is not truthy. This call signature allows the mistake to be made and the test to pass and therefore possibly fail silently.\n For example when making 20 PRs fixing the problems we found one of the tests started to fail due to faulty application logic once the test was no longer a Schr\u00f6dinger\u2019s unit test:\n  We also found that at least two of the tests failed because the logic in the test was wrong. This is also bad if we consider unit tests to be a form of documentation describing how the product works. From a developer\u2019s point of view, unit tests can be considered more trustworthy that comments and doc strings because comments and doc strings are  claims written (perhaps long ago and perhaps now obsolete or incomplete), while a passing unit test shows a logic  contract is being upheld\u2026as long as the test is not a Schr\u00f6dinger\u2019s test!\n Perhaps more data is needed, but this could mean 15% (3 in 20) of Schr\u00f6dinger\u2019s unit tests are hiding broken functionality.\n  When the  CodeReview.doctor github bot detects this mistake in a GitHub pull request the following solution is suggested:", "posttime": "2022-02-17 11:27:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,\u4ee3\u7801", "title": "\u6211\u4eec\u68c0\u67e5\u7684Python\u4ee3\u7801\u5e93\u4e2d\u67093%\u7684\u5355\u5143\u6d4b\u8bd5\u5931\u8d25", "title_en": "3 percent of Python codebases we checked had silently failing unit tests", "transed": 1, "url": "https://richardtier.com/2022/02/16/3-of-666-python-codebases-we-checked-had-silently-failing-unit-tests-and-we-fixed-them-all%ef%bf%bc/", "via": "", "real_tags": ["python", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073805, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c03\u8c10\u4e50\u5668\u7684\u5f53\u524d\u53c2\u8003\u9891\u7387\u4e3a440 Hz\u3002\u4e00\u4e9b\u7406\u8bba\u5bb6\u548c\u97f3\u4e50\u5bb6\u58f0\u79f0432\u8d6b\u5179\u7684\u8c03\u8c10\u5bf9\u4eba\u4f53\u6709\u66f4\u597d\u7684\u6548\u679c\uff0c\u4f46\u6ca1\u6709\u79d1\u5b66\u7814\u7a76\u652f\u6301\u8fd9\u4e00\u5047\u8bbe\u3002\n\u5728\u4e0d\u540c\u9891\u7387\uff08440 Hz\u548c432 Hz\uff09\u4e0b\u542c\u97f3\u4e50\u540e\uff0c\u786e\u5b9a\u751f\u547d\u53c2\u6570\u548c\u611f\u77e5\u7684\u5dee\u5f02\u3002\n\u5728\u4e0d\u540c\u7684\u65e5\u5b50\u542c\u4e24\u6b21\u97f3\u4e50\u3002\u4e24\u6b21\u4f1a\u8bae\u4f7f\u7528\u76f8\u540c\u7684\u97f3\u4e50\uff08\u7535\u5f71\u914d\u4e50\uff09\uff0c\u4f46\u4e00\u5929\u8c03\u5230440\u8d6b\u5179\uff0c\u53e6\u4e00\u5929\u8c03\u5230432\u8d6b\u5179\u3002\u6bcf\u8282\u8bfe\u5305\u62ec20\u5206\u949f\u548c39\u5206\u949f\uff1b\u542c\u3002\n\u91cd\u8981\u53c2\u6570\uff08\u8840\u538b\u3001\u5fc3\u7387\u3001\u547c\u5438\u9891\u7387\u3001\u8840\u6c27\u9971\u548c\u5ea6\uff09\u3001\u611f\u77e5\uff08\u8eab\u4f53\u548c\u60c5\u7eea\u611f\u53d7\uff0c\u4f8b\u5982\u75b2\u52b3\u548c\u538b\u529b\uff09\u3001\u542c\u529b\u8fc7\u7a0b\u4e2d\u7684\u6ce8\u610f\u529b\u6c34\u5e73\u4ee5\u53ca\u5bf9\u4f53\u9a8c\u7684\u603b\u4f53\u6ee1\u610f\u5ea6\u3002\n\u4e0e440 Hz\u76f8\u6bd4\uff0c432 Hz\u8c03\u8c10\u97f3\u4e50\u4e0e\u5e73\u5747\uff08\u6536\u7f29\u538b\u548c\u8212\u5f20\u538b\uff09\u8840\u538b\u503c\u8f7b\u5fae\u4e0b\u964d\uff08\u867d\u7136\u4e0d\u663e\u8457\uff09\u3001\u5e73\u5747\u5fc3\u7387\u663e\u8457\u4e0b\u964d\uff08-4.79 bpm\uff0cp=0.05\uff09\u548c\u5e73\u5747\u547c\u5438\u9891\u7387\u503c\u8f7b\u5fae\u4e0b\u964d\uff081 r.a.\uff0cp=0.06\uff09\u6709\u5173\u3002\u53d7\u8bd5\u8005\u66f4\u4e13\u6ce8\u4e8e\u542c\u97f3\u4e50\uff0c\u5728\u542c\u4e86432\u8d6b\u5179\u7684\u8c03\u8c10\u97f3\u4e50\u540e\uff0c\u603b\u4f53\u4e0a\u66f4\u6ee1\u610f\u3002\n\u6570\u636e\u8868\u660e\uff0c432\u8d6b\u5179\u8c03\u8c10\u97f3\u4e50\u6bd4440\u8d6b\u5179\u8c03\u8c10\u97f3\u4e50\u80fd\u964d\u4f4e\u5fc3\u7387\u3002\u7814\u7a76\u7ed3\u679c\u5efa\u8bae\u7528\u66f4\u5927\u7684\u6837\u672c\u5e93\u91cd\u590d\u8be5\u5b9e\u9a8c\uff0c\u5e76\u5f15\u5165\u6db5\u76d6\u66f4\u591a\u4e34\u5e8a\u53c2\u6570\u7684\u968f\u673a\u5bf9\u7167\u8bd5\u9a8c\u3002\n\u751f\u7269\u5b66\u62a5\u30022020\u5e7411\u670830\u65e5\uff1b91\uff0812-S\uff09\uff1ae2020008\u3002\u5185\u653f\u90e8\uff1a10.23750/abm\u3002v91i12-S.10755\u3002\u751f\u7269\u5b66\u62a5\u30022020.PMID:33263352\u514d\u8d39PMC\u6587\u7ae0\u3002\u4e34\u5e8a\u8bd5\u9a8c\u3002\n\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022014;2014\uff0812\uff09\uff1aCD006902\u3002\u5185\u653f\u90e8\uff1a10.1002/14651858\u3002CD006902\u3002pub3\u3002Epub 2014\u5e7412\u67089\u65e5\u3002\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022014.PMID:25490233\u514d\u8d39PMC\u6587\u7ae0\u3002\u56de\u987e\n\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022010\u5e7412\u67088\u65e5\uff1b\uff0812\uff09 \uff1aCD006902\u3002\u5185\u653f\u90e8\uff1a10.1002/14651858\u3002CD006902\u3002pub2\u3002\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022010\u5e74\uff0cPMID:21154376\u66f4\u65b0\u3002\u56de\u987e\n\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022016\u5e748\u670815\u65e5\uff1b\uff088\uff09 \uff1aCD006911\u3002\u5185\u653f\u90e8\uff1a10.1002/14651858\u3002CD006911\u3002pub3\u3002\u79d1\u514b\u4f26\u6570\u636e\u5e93\u7cfb\u7edf\u4fee\u8ba2\u7248\u30022016\u5e74PMID:27524661\u66f4\u65b0\u3002\u56de\u987e\n\u52a8\u7269\uff08\u5df4\u585e\u5c14\uff09\u30022021 12\u670816\u65e5\uff1b11(12):3572. \u5185\u653f\u90e8\uff1a10.3390/ani11123572\u3002\u52a8\u7269\uff08\u5df4\u585e\u5c14\uff09\u30022021\u3002PMID\uff1a34944347\u514d\u8d39PMC\u6587\u7ae0\u3002\u56de\u987e\n\u751f\u7269\u5b66\u62a5\u30022020\u5e7411\u670830\u65e5\uff1b91\uff0812-S\uff09\uff1ae2020008\u3002\u5185\u653f\u90e8\uff1a10.23750/abm\u3002v91i12-S.10755\u3002\u751f\u7269\u5b66\u62a5\u30022020.PMID:33263352\u514d\u8d39PMC\u6587\u7ae0\u3002\u4e34\u5e8a\u8bd5\u9a8c\u3002\n\u5e94\u7528\u53e3\u8154\u79d1\u5b66\u6742\u5fd7\u30022020;28:e20190601\u3002\u5185\u653f\u90e8\uff1a10.1590/1678-7757-2019-0601\u3002Epub 2020\u5e745\u670811\u65e5\u3002\u5e94\u7528\u53e3\u8154\u79d1\u5b66\u6742\u5fd7\u30022020.PMID:32401941\u514d\u8d39PMC\u6587\u7ae0\u3002\u4e34\u5e8a\u8bd5\u9a8c\u3002", "note_en": "The current reference frequency for tuning musical instruments is 440 Hz. Some theorists and musicians claim that the 432 Hz tuning has better effects on the human body, but there are no scientific studies that support this hypothesis.\n  To identify differences in vital parameters and perceptions after listening to music at different frequencies, 440 Hz versus 432 Hz.\n        Two sessions of music listening on different days. Both sessions used the same music (movie soundtracks) but tuned to 440 Hz on one day and 432 Hz on the other. Each session consisted of 20 min&#39; listening.\n  Vital parameters (blood pressure, heart rate, respiratory rate, oxygen saturation), perceptions (physical and emotional sensations, for example fatigue and stress), levels of concentration during the listening session, and general satisfaction with the experience.\n  432 Hz tuned music was associated with a slight decrease of mean (systolic and diastolic) blood pressure values (although not significant), a marked decrease in the mean of heart rate (-4.79 bpm, p = 0.05) and a slight decrease of the mean respiratory rate values (1 r.a., p = 0.06), compared to 440 Hz. The subjects were more focused about listening to music and more generally satisfied after the sessions in which they listened to 432 Hz tuned music.\n  The data suggests that 432 Hz tuned music can decrease heart rate more than 440 Hz tuned music. The study results suggest repeating the experiment with a larger sample pool and introducing randomized controlled trials covering more clinical parameters.\n    Acta Biomed. 2020 Nov 30;91(12-S):e2020008. doi: 10.23750/abm.v91i12-S.10755.  Acta Biomed. 2020.  PMID:  33263352  Free PMC article.  Clinical Trial.\n  Cochrane Database Syst Rev. 2014;2014(12):CD006902. doi: 10.1002/14651858.CD006902.pub3. Epub 2014 Dec 9.  Cochrane Database Syst Rev. 2014.  PMID:  25490233  Free PMC article.  Review.\n    Cochrane Database Syst Rev. 2010 Dec 8;(12):CD006902. doi: 10.1002/14651858.CD006902.pub2.  Cochrane Database Syst Rev. 2010.  PMID:  21154376  Updated.  Review.\n  Cochrane Database Syst Rev. 2016 Aug 15;(8):CD006911. doi: 10.1002/14651858.CD006911.pub3.  Cochrane Database Syst Rev. 2016.  PMID:  27524661  Updated.  Review.\n  Animals (Basel). 2021 Dec 16;11(12):3572. doi: 10.3390/ani11123572.  Animals (Basel). 2021.  PMID:  34944347  Free PMC article.  Review.\n  Acta Biomed. 2020 Nov 30;91(12-S):e2020008. doi: 10.23750/abm.v91i12-S.10755.  Acta Biomed. 2020.  PMID:  33263352  Free PMC article.  Clinical Trial.\n  J Appl Oral Sci. 2020;28:e20190601. doi: 10.1590/1678-7757-2019-0601. Epub 2020 May 11.  J Appl Oral Sci. 2020.  PMID:  32401941  Free PMC article.  Clinical Trial.", "posttime": "2022-02-17 11:25:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8d6b\u5179,health,\u53c2\u6570", "title": "\u8c03\u5230440\u8d6b\u5179\u4e0e432\u8d6b\u5179\u7684\u97f3\u4e50\u5bf9\u5065\u5eb7\u7684\u5f71\u54cd\uff082019\u5e74\uff09", "title_en": "Music Tuned to 440 Hz versus 432 Hz and Health Effects (2019)", "transed": 1, "url": "https://pubmed.ncbi.nlm.nih.gov/31031095/", "via": "", "real_tags": ["\u8d6b\u5179", "health", "\u53c2\u6570"]}]