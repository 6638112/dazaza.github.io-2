[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1066924, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0e\u5b83\u4eec\u4e00\u6837\uff0c\u7ec8\u6b62\u7ec8\u6b62\u5b57\u7b26\u4e32\u5bf9\u4e8eC\u81f3\u5173\u91cd\u8981\uff0c\u5e76\u4e14\u5728\u6240\u6709\u7410\u788e\u7684\u7a0b\u5e8f\u4e2d\u90fd\u5fc5\u987b\u4e0e\u5b83\u4eec\u4e00\u8d77\u5de5\u4f5c\u3002\u867d\u7136C\u578b\u5b57\u7b26\u4e32\u662f\u4f7f\u7528\u8bed\u8a00\u7684\u57fa\u672c\u90e8\u5206\uff0c\u4f46\u64cd\u4f5c\u5b83\u4eec\u662f\u5b89\u5168\u9519\u8bef\u548c\u6027\u80fd\u4e22\u5931\u7684\u5171\u540c\u6765\u6e90\u3002\u5176\u4e2d\u4e00\u4e2a\u6700\u5e38\u89c1\u7684\u64cd\u4f5c\u662f\u5c06\u5b57\u7b26\u4e32\u4ece\u4e00\u4e2a\u7f13\u51b2\u533a\u590d\u5236\u5230\u53e6\u4e00\u4e2a\uff0c\u5e76\u4e14\u6709\u5404\u79cd\u5b57\u7b26\u4e32\u51fd\u6570\u58f0\u79f0\u5728C.\u8f76\u4e8b\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u4f46\u662f\uff0c\u5bf9\u4ed6\u4eec\u5b9e\u9645\u505a\u7684\u4e8b\u60c5\u6709\u5f88\u5927\u7684\u56f0\u60d1\uff0c\u800c\u4e14\u8bb8\u591a\u4eba\u6e34\u671b\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027\u7684\u5b57\u7b26\u4e32\u590d\u5236\u529f\u80fd\uff1a\n \u8be5\u51fd\u6570\u5e94\u63a5\u53d7\u4e00\u4e2a\u8fd4\u56de\u7684\u6e90\u5b57\u7b26\u4e32\uff0c\u76ee\u6807\u7f13\u51b2\u533a\u548c\u8868\u793a\u76ee\u6807\u7f13\u51b2\u533a\u5927\u5c0f\u7684\u6574\u6570\u3002\n  \u8fd4\u56de\u540e\uff0c\u51fd\u6570\u5e94\u786e\u4fdd\u76ee\u7684\u5730\u7f13\u51b2\u533a\u5728\u53ef\u80fd\u65f6\uff08\u5177\u4f53\u5730\uff0c\u5f53\u76ee\u7684\u5730\u7f13\u51b2\u5668\u5177\u6709\u975e\u96f6\u5927\u5c0f\u65f6\uff09\u4ee5\u907f\u514d\u672a\u7ecf\u672a\u52ff\u7ed2\u7684\u5b57\u7b26\u4e32\u7684\u95ee\u9898\uff0c\u4ee5\u786e\u4fdd\u76ee\u6807\u7f13\u51b2\u533a\u6307\u5411\u5305\u542b\u6e90\u6781\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002 \uff08\u867d\u7136\u5b57\u7b26\u4e32\u622a\u65ad\u6709\u81ea\u5df1\u7684\u95ee\u9898\uff0c\u4f46\u901a\u5e38\u662f\u4e00\u4e2a\u76f8\u5f53\u5408\u7406\u7684\u56de\u529b\u3002\uff09\n  \u8be5\u51fd\u6570\u5e94\u6307\u793a\u5b83\u4ece\u6e90\u590d\u5236\u7684\u5b57\u7b26\u6570\u91cf\uff0c\u4ee5\u53ca\u6307\u793a\u662f\u5426\u53d1\u751f\u4e86\u6ea2\u51fa\u3002 \uff08\u5982\u679c\u9700\u8981\uff0c\u8fd9\u5141\u8bb8\u5904\u7406\u6ea2\u51fa\u3002\uff09\n  \u8be5\u51fd\u6570\u5e94\u8be5\u662f\u6709\u6548\u7684\uff0c\u5b83\u4e0d\u5e94\u8be5\u8bfb\u53d6\u6216\u5199\u5165\u5b83\u4e0d\u5fc5\u7684\u5185\u5b58\u3002\u8fd9\u4e9b\u90e8\u5206\u643a\u624b\u5408\u4f5c\uff1a\u51fd\u6570\u5e94\u8be5\u5728\u5355\u4e2a\u901a\u884c\u8bc1\u4e2d\u8fd0\u884c\uff0c\u800c\u4e0d\u662f\u5c06\u76ee\u6807\u7f13\u51b2\u533a\u5199\u5165NUL\u5b57\u8282IT\u4f4d\u7f6e\uff0c\u6216\u8005\u4ece\u6e90\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u5b57\u7b26\uff0c\u4e00\u65e6\u786e\u5b9a\u5b83\u5df2\u586b\u5145\u76ee\u6807\u7f13\u51b2\u533a\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5b9e\u73b0\u5c06\u662f\u77e2\u91cf\u56fe\uff08\u653e\u5bbd\u4e00\u4e9b\u5148\u524d\u7684\u7ea6\u675f\uff0c\u4ee5\u4fbf\u5728\u5e73\u53f0\u5bf9\u9f50\u4fdd\u8bc1\u4e2d\uff09\u3002\n  \u8be5\u529f\u80fd\u5e94\u8be5\u662f\u6807\u51c6\u5316\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u8de8\u7cfb\u7edf\u4f7f\u7528\u5b83\u3002\u7b26\u5408ISO C\u6216POSIX.1\u901a\u5e38\u662f\u6700\u7406\u60f3\u7684\u3002\n \u4e5f\u5c31\u662f\u8bf4\uff0c\u901a\u5e38\u9700\u8981\u7684\u662f\u4e0b\u9762\u7684\u529f\u80fd\uff0c\u6211\u4eec\u5c06\u8c03\u7528strxcpy\uff1a \nchar * strxcpy\uff08char *\u9650\u5236dst\uff0cconst char *\u9650\u5236src\uff0csize_t len\uff09{if\uff08\uff01len\uff09{return null; } whiled\uff08 -  len\uff06amp;\uff06amp;\uff08* dst ++ = * src ++\uff09\uff09;\u5982\u679c\uff08\uff01len\uff09{* dst ++ =\uff06\uff0339; \\ 0\uff06\uff0339; ;\u8fd4\u56de* src\uff1f null\uff1adst; }\u5426\u5219{\u8fd4\u56dedst; }}\n \u9664\u4e86\u6807\u51c6\u5316\u4e4b\u5916\uff0c\u6b64\u51fd\u6570\u5c06\u4eceSRC\u5230DST\u548cCUP\u526f\u672c\u590d\u5236STRLEN\uff08SRC\uff09\u6216LEN  -  1\u5b57\u8282\u7684\u8f83\u5c0f\u51fd\u6570\u3002\u5728SRC\u5728DST\u4e2d\u914d\u5408\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c\u5b83\u653e\u7f6e\u4e86NUL\u5b57\u8282;\u5426\u5219\uff0c\u5b83\u8fd4\u56denull\u4ee5\u6307\u793a\u622a\u65ad\u3002\u867d\u7136\u76ee\u524d\u7684\u7f16\u8bd1\u5668\u4f3c\u4e4e\u5728\u5176\u63a7\u5236\u6d41\u7a0b\u65f6\u9047\u5230\u56f0\u96be\uff0c\u4f46\u5b83\u4e5f\u5e94\u8be5\u76f8\u5f53\u76f4\u63a5\u5411\u77e2\u91cf\u5316\uff0c\u56e0\u4e3a\u6838\u5fc3\u73af\u8def\u6709\u70b9\u7c7b\u4f3c\u4e8eStrncpy\u548cStrlen\u7684\u7ec4\u5408\u3002\n \u901a\u8fc7\u6307\u5bfc\u56de\u987e\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5404\u79cd\u590d\u5236\u4f8b\u7a0b\uff0c\u770b\u770b\u5b83\u4eec\u662f\u5426\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u3002\n \u8981\u8fdc\u79bb\u901a\u5e38\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c06\u5047\u8bbe\u6211\u4eec\u5fc5\u987b\u4f7f\u7528C\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u907f\u514d\u4f7f\u7528\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u5e93\u53ef\u7528\u7684\u5404\u79cd\u957f\u5ea6\u524d\u7f00\u6216\u805a\u5408\u5b57\u7b26\u4e32\u7ed3\u6784\u3002\u9664\u4e86\u4f7f\u7528\u4e0d\u540c\u7684\u8bed\u8a00\u65f6\u53ef\u4ee5\u89e3\u51b3\u6b64\u5904\u63d0\u5230\u7684\u8bed\u8a00\u4e2d\u7684\u8bb8\u591a\u95ee\u9898;\u5b83\u5e76\u4e0d\u603b\u662f\u53ef\u53d6\u7684\u751a\u81f3\u53ef\u80fd\u5229\u7528\u5b83\u4eec\u3002\u9664\u4e86\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u7684\u901a\u5e38\u7f3a\u70b9\u5916\uff0c\u66ff\u6362\u7a7a\u7ec8\u6b62\u5b57\u7b26\u4e32\u901a\u5e38\u4f1a\u5bfc\u81f4\u6dfb\u52a0\u53e5\u6cd5\u5f00\u9500\u548c\u4e0d\u517c\u5bb9\u6027\uff0c\u8fd9\u4e9b\u4ee3\u7801\u65e8\u5728\u4e0e\u5b83\u4eec\u4e00\u8d77\u4f7f\u7528\u3002\n   \u6807\u51c6strcpy\u51fd\u6570\uff0c\u5c06\u5b57\u7b26\u4ecesrc\u526f\u672c\u590d\u5236\u5230dst\uff0c\u6700\u591a\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2aNUL\u5b57\u8282\u3002\u5982\u679cDST\u5c0f\u4e8e\u6216\u522b\u540dSRC\uff0c\u5219\u7a0b\u5e8f\u7684\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\u3002 DST\u88ab\u5f52\u8fd8\u3002\n Strcpy\u80af\u5b9a\u4f1a\u6ee1\u8db3\u8981\u6c422\u548c4\u7684\u90e8\u5206\uff1a\u5b83\u5c06\u59cb\u7ec8\u5199\u51fa\u7a7a\u7ec8\u6b62\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u4f1a\u5f88\u5feb\u3002\u4f46\u662f\uff0c\u5b83\u6839\u672c\u65e0\u6cd5\u6267\u884c\u754c\u9650\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u4f7f\u7528\u5b83\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u7684\u76ee\u6807\u7f13\u51b2\u533a\u5c0f\u4e8e\u6211\u4eec\u7684\u6e90\u7f13\u51b2\u533a - \u5b83\u5931\u8d25\u8981\u6c421.\u6b64\u5916\uff0c\u5b83\u5e76\u4e0d\u544a\u8bc9\u6211\u4eec\u5b83\u5199\u4e86\u591a\u5c11\u4e2a\u5b57\u7b26\uff0c\u5373\u5b83\u8981\u6c423.\u8fd9\u662fC\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u5b83\u786e\u5b9e\u6ee1\u8db3\u8981\u6c425\u3002\n  STRNCPY\u5c06\u4eceSRC\u5230DST\u7684LEN\u5b57\u7b26\u590d\u5236\u5230LEN\u5b57\u7b26\u3002\u5982\u679cSRC\u77ed\u4e8eLEN\uff0c\u5219DST\u4e3aNUL-PADDED\u5230LEN\u5b57\u7b26\u3002 DST\u88ab\u5f52\u8fd8\u3002 \nStrncpy\u91c7\u7528\u6211\u4eec\u60f3\u8981\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u5b83\u6ee1\u8db3\u8981\u6c421;\u5373\u4f7f\u5728\u4e00\u4e2a\u4efb\u610f\u6e90\u5b57\u7b26\u4e32\u7684\u9762\u4e0a\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u8868\u73b0\u51fa\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\uff0c\u53ea\u8981\u6211\u4eec\u5c06\u5176\u63d0\u4f9b\u6b63\u786e\u7684\u76ee\u7684\u5730\u7f13\u51b2\u533a\u957f\u5ea6\u3002\u4f46\u662f\uff0c\u5982\u679c\u6e90\u66f4\u957f\u7684\u662f\u76ee\u6807\uff0c\u5219\u7f13\u51b2\u533a\u4e0d\u4f1a\u7ec8\u6b62\uff0c\u5982\u679c\u5b83\u7f29\u77edstrncpy\u5c06\u7ee7\u7eed\u5c06NUL\u5b57\u8282\u5199\u5165\u76ee\u7684\u5730\u3002\u6b64\u5916\uff0c\u5b83\u5e76\u4e0d\u6307\u793a\u5199\u5165\u6e90\u4e2d\u7684\u8bb8\u591a\u5b57\u7b26\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u5c06NUL\u5b57\u8282\u5199\u5165\u76ee\u6807\u7f13\u51b2\u533a\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5e76\u5728\u547c\u53eb\u540e\u68c0\u67e5\u6765\u68c0\u6d4b\u6ea2\u51fa\u3002\u8fd9\u610f\u5473\u7740\u5b83\u5931\u8d25\u4e862,3\u548c4\u7684\u8981\u6c42\uff0c\u4f46\u7531\u4e8e\u5b83\u5df2\u7ecf\u5b58\u5728\uff0c\u53ea\u8981\u5b83\u786e\u5b9e\u6ee1\u8db3\u8981\u6c425\u3002\n   Memcpy\u6839\u672c\u4e0d\u5173\u5fc3NUL\u89d2\u8272;\u5b83\u751a\u81f3\u4e0d\u9700\u8981\u6e90\u662f\u7a7a\u7ec8\u6b62\u7684\u5b57\u7b26\u4e32\u3002\u5b83\u5931\u8d25\u4e86\u8759\u8760\u7684\u524d\u4e09\u4e2a\u8981\u6c42\uff0c\u4f46\u5b83\u662fC\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u80af\u5b9a\u4f1a\u8fbe\u5230\u8981\u6c424\u548c5\u3002\n  strcpy_s\u7b26\u5408ISO C11\uff0c\u5982\u679c\u5728\u5305\u62ec\u5b57\u7b26\u4e32\u4e4b\u524d\u5b9a\u4e49__stdc_want_lib_ext1__\u5e76\u4e14\u5b9a\u4e49__stdc_lib_ext1__\uff0c\u5219\u53ef\u7528\u3002\n    \u6267\u884c\u76f8\u540c\u64cd\u4f5c\u7684strcpy\u7684\u754c\u9650\u7248\u672c\uff0c\u9664\u4e86\u5b83\u53ef\u4ee5\u5c06\u672a\u6307\u5b9a\u7684\u503c\u5199\u5165DST\u7684\u5269\u4f59\u90e8\u5206\uff0c\u5982\u679csrc == null\uff0cdst == null\uff0c\u5982\u679c\u53d1\u751f\u622a\u65ad\uff0c\u5219Len\u4e3a\u96f6\u6216\u5927\u4e8eRSIZE_MAX\u6216SRC\u548cDST\u91cd\u53e0\uff0c\u5982\u679c\u53ef\u80fd\uff0c\u5b83\u5c06\u5c06NUL\u5b57\u8282\u5199\u5165* DST\uff0c\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u5e76\u8c03\u7528\u7ea6\u675f\u5904\u7406\u7a0b\u5e8f\u51fd\u6570\u3002\n \u5728\u8868\u9762\u4e0a\uff0c\u8fd9\u79cd\u529f\u80fd\u4f3c\u4e4e\u6709\u7528 - \u4f46\u4ed4\u7ec6\u89c2\u5bdf\u663e\u793a\u5b83\u6709\u8bb8\u591a\u4e0d\u5e78\u7684\u95ee\u9898\u3002\u6700\u5927\u7684\u662f\uff0c\u4efb\u4f55\u622a\u65ad\u90fd\u4f1a\u8c03\u7528\u7ea6\u675f\u5904\u7406\u7a0b\u5e8f\u529f\u80fd\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u6267\u884c\u8bb8\u591a\u4e8b\u60c5\uff0c\u4f8b\u5982\u4e2d\u6b62\u7a0b\u5e8f\u3002\u6b64\u5916\uff0c\u5b83\u5e76\u6ca1\u6709\u544a\u8bc9\u6211\u4eec\u5b83\u5199\u4e86\u591a\u5c11\uff0c\u53ef\u4ee5\u6d82\u9e26\u76ee\u7684\u5730\uff0c\u5e76\u4e14\u662f\u6807\u51c6\u5316\u7684\uff0c\u4f46\u4ec5\u4f5c\u4e3aC11\u7684\u53ef\u9009\u6269\u5c55\u540d\u3002\u603b\u7684\u6765\u8bf4\uff0c\u5b83\u53ea\u6ee1\u8db3\u8981\u6c421\u3002\n  strncpy_s\u7b26\u5408ISO C11\uff0c\u5982\u679c\u5728\u5305\u62ec\u5b57\u7b26\u4e32\u4e4b\u524d\u5b9a\u4e49__stdc_want_lib_ext1__\u548c\u5b9a\u4e49__stdc_lib_ext1__\uff0c\u5219\u53ef\u7528\u3002\n    strncpy\u7684\u754c\u9650\u7248\u672c\uff0c\u5982\u679csrc == null\uff0cdst == null\uff0c\u5219\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u5982\u679c\u53d1\u751f\u622a\u65ad\uff0c\u5219Len\u4e3a\u96f6\u6216\u5927\u4e8eRSize_max\uff0c\u6216SRC\u548cDST\u91cd\u53e0\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06NUL\u5b57\u8282\u5199\u5165* DST\uff0c\u5982\u679c\u53ef\u80fd\uff0c\u672a\u6307\u5b9a\u7684\u503c\u4e3aDST\u7684\u5269\u4f59\u90e8\u5206\uff0c\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u5e76\u8c03\u7528\u7ea6\u675f\u5904\u7406\u7a0b\u5e8f\u51fd\u6570\u3002\u5426\u5219\uff0c\u5c06\u4eceSRC\u590d\u5236LEN\u5b57\u8282\u4eceSRC\u5230DST\uff0c\u7136\u540e\u5728DST [LEN-1]\u4e2d\u6dfb\u52a0NUL\u7ec8\u7aef\u5b57\u8282\uff0c\u8fd4\u56de\u96f6\u3002 \n\u6b64\u51fd\u6570\u5177\u6709\u4e0estrcpy_s\u76f8\u540c\u7684\u7ea6\u675f\u5904\u7406\u7a0b\u5e8f\u95ee\u9898\uff0c\u4e5f\u662f\u6807\u51c6\u5316\u4f46\u901a\u5e38\u4e0d\u53ef\u7528\u3002\u867d\u7136\u5f53\u5b57\u7b26\u4e32\u9002\u5408\u5e76\u4ec5\u5728\u9519\u8bef\u65f6\u5220\u9664\u76ee\u7684\u5730\u65f6\uff0c\u5b83\u5c06\u7ec8\u6b62\uff0c\u4f46\u5b83\u4ecd\u7136\u53ea\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u8981\u6c42\u3002\n  \u4e0estrncpy\u76f8\u540c\uff0c\u9664\u4e86\u8fd4\u56de\u6307\u5411\u5199\u5165NUL\u5b57\u8282\u7684\u6307\u9488\uff0c\u5982\u679c\u6709\u7684\u8bdd;\u5426\u5219\u8fd4\u56deDST + LEN\u3002\n stpncpy\u662f\u5bf9strncpy\u7684\u6539\u8fdb\uff0c\u4f46\u5b83\u53ea\u4fee\u590d\u4e86\u68c0\u6d4b\u7ec8\u6b62\u6216\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u8981\u6c423.\u5b83\u4ecd\u7136\u5931\u8d25\u7684\u8981\u6c422\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4e00\u5b9a\u662f\u7a7a\u7ec8\u6b62\uff0c\u5b83\u5931\u8d25\u8981\u6c424\u56e0\u4e3a\u5b83\u5c06nuls\u5199\u5165\u7ed3\u675f\u76ee\u7684\u5730\u7f13\u51b2\u533a\u3002\u4e0e\u5b83\u662fPOSIX\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u9664\u4e86\u8981\u6c421\u4e4b\u5916\uff0c\u5b83\u4ecd\u7136\u7b26\u5408\u8981\u6c425\u3002\n  \u5f53\u4e0e\uff05s\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u5c06\u7b2c\u4e00\u4e2aVariadic\u53c2\u6570\uff08\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\u590d\u5236\u5230DST\uff0c\u6216\u8005\u7b2c\u4e00LEN  -  1\u5b57\u8282\u540e\u8ddfNUL\u5b57\u8282\u3002\u8fd4\u56de\u7b2c\u4e00\u4e2aVariadic\u53c2\u6570\u7684\u957f\u5ea6\u3002\n SnPrintf\u662f\u4e00\u79cd\u5947\u602a\u7684\u5305\u542b\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u6807\u51c6\u51fd\u6570\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u201c\uff05s\u201d\u4f5c\u4e3a\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5219\u5360\u636e\u5c3a\u5bf8\u548c\u7ec8\u6b62\u5176\u76ee\u7684\u5730\u3002\u5b83\u7b26\u5408\u8981\u6c421,2\u548c5\uff0c\u4f46\u57283\u548c4\u4e0b\u964d\uff1a\u5176\u8fd4\u56de\u503c\u57fa\u672c\u4e0a\u662f\u201cSprintf\u5c06\u8fd4\u56de\u7684\u662f\u4ec0\u4e48\u201d\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5fc5\u987b\u81f3\u5c11\u6267\u884c\u76f8\u540c\u7684Strlen\u3002\u8fd9\u5f88\u6162\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u4ee5\u53ca\u4e00\u4e2aint\uff08\u4e0d\u662fsize_t\uff09\u3002\n  \u8bed\u4e49\u4e0a\u7b49\u540c\u4e8eSprintf\uff08DST\uff0cLen\uff0c\uff06\uff0334;\uff05s\uff06\uff0334; src\uff09\u4fdd\u5b58\u8fd4\u56de\u503c\uff0c\u8fd9\u662f\u4e00\u4e2asize_t\u3002\n strlcpy\u4e0e\u4e4b\u524d\u7684Sprintf\u8c03\u7528\u76f8\u540c\uff0c\u9664\u4e86\u5b83\u4f7f\u7528\u6b63\u786e\u7684size_t return\u7c7b\u578b\u3002\u8fd9\u4ecd\u7136\u610f\u5473\u7740\u5b83\u65e0\u6cd5\u6ee1\u8db33\u548c4\u7684\u6027\u80fd\u8981\u6c42\uff0c\u800c\u4e0d\u662f\u6807\u51c6\uff0c\u56e0\u6b64\u5b83\u4e0d\u6ee1\u8db35\u3002\u7531\u4e8e\u5b83\u6267\u884c\u526f\u672c\u5e76\u5c06\u60a8\u5e26\u6709\u96f6\u7ec8\u6b62\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u586b\u5145\u4e86\u524d\u4e24\u4e2a\u8981\u6c42\u3002 \nstrscpy\u590d\u5236src\u5230dst\u5982\u679c\u5b83\u9002\u5408\u7f13\u51b2\u533a\u5e76\u8fd4\u56de\u590d\u5236\u7684\u5b57\u7b26\u6570\uff0c\u5219\u4e0d\u5305\u62ec\u5c3e\u968fNUL\u5b57\u8282;\u5426\u5219\u5b83\u5c06\u590d\u5236\u7b2c\u4e00\u4e2aLEN  -  1\u4e2a\u5b57\u7b26\u5e76\u5c06DST [LEN-1]\u8bbe\u7f6e\u4e3aNUL\u5b57\u8282\uff0c\u8fd4\u56de-e2big\u3002\n strscpy\u662f\u6211\u4eec\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u529f\u80fd\uff0c\u5b83\u6ee1\u8db3\u4e86\u56db\u4e2a\u529f\u80fd\u8981\u6c42\uff1a\u5b83\u53ef\u4ee5\u8ffd\u6eaf\u5230\u5c3d\u53ef\u80fd\u5927\u7684\u6e90\u5b57\u7b26\u4e32\uff0cnull\u7ec8\u6b62\u76ee\u6807\u7f13\u51b2\u533a\uff0c\u8fd4\u56de\u590d\u5236\u7684\u5b57\u7b26\u6570\uff0c\u5e76\u4e14\u4e0d\u6267\u884c\u8fc7\u591a\u7684\u8bfb\u53d6\u6216\u5199\u5165\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5b9e\u73b0\u6211\u4eec\u7684strxcpy\u51fd\u6570\uff1a\n char * strxcpy\uff08char *\u9650\u5236dst\uff0cconst char *\u9650\u5236src\uff0csize_t len\uff09{ssize_t\u590d\u5236= strscpy\uff08dst\uff0csrc\uff0clen\uff09;\u590d\u5236\u8fd4\u56de\uff01=  -  e2big\uff1asrc +\u590d\u5236+ 1\uff1anull; }\n \u5b83\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5b83\u662f\u5b83\u8fd4\u56de\u4e00\u4e2assize_t\u800c\u4e0d\u662fsize_t\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e0d\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u7b2c\u4e8c\u4e2a\u662f\uff0c\u4e0d\u5e78\u7684\u662f\u975e\u6807\u51c6 - \u8fd9\u662fLinux\u5185\u6838\u4e3a\u81ea\u5df1\u5199\u7684\u4e1c\u897f - \u8fd9\u610f\u5473\u7740\u5b83\u8fdd\u53cd\u4e86\u8981\u6c425\u3002\n  Memccpy\u4e0eMemcpy\u76f8\u540c\uff0c\u4f46\u5982\u679cSRC\u5728DST\u4e2d\u7684\u4f4d\u7f6e\u540e\uff0cSRC\u5305\u542bCHR\uff0c\u590d\u5236CHR\u548c\u8fd4\u56de\u6307\u9488\uff0c\u5219\u53ef\u80fd\u4f1a\u8fc7\u65e9\u505c\u6b62\u3002\u5982\u679c\u5728\u4e0d\u9047\u5230CHR\u7684\u60c5\u51b5\u4e0b\u590d\u5236LEN\u5b57\u7b26\uff0c\u5219\u8fd4\u56deNULL\u3002\n Memccpy\uff0c\u5f53\u4e0eNUL\u5b57\u7b26\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u6ee1\u8db3\u9664\u4e86\u7b2c\u4e8c\u4e2a\u4e4b\u5916\u7684\u6240\u6709\u8981\u6c42\uff0c\u4f46\u8fd9\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u4fee\u590d\uff1a\n char * strxcpy\uff08char *\u9650\u5236dst\uff0cconst char *\u9650\u5236src\uff0csize_t len\uff09{char * end = memccpy\uff08dst\uff0csrc\uff0c\uff06\uff0339; \\ 0\uff06\uff0339;\uff0clen\uff09;\u5982\u679c\uff08\uff01\u7ed3\u675f\uff09{dst [len-1] =\uff06\uff0339; \\ 0\uff06\uff0339; ;\u8fd4\u56de\u7ed3\u675f; } \n\u867d\u7136\u5b83\u5c06\u5728\u5373\u5c06\u63a8\u51fa\u7684C\u6807\u51c6\u4e2d\u53d1\u8d27\uff0c\u4f46\u5b83\u5df2\u7ecf\u5e7f\u6cdb\u4f7f\u7528\u4f5c\u4e3a\u6d41\u884c\u7684\u53ef\u9009POSIX\u6269\u5c55\u3002\n  \u5bf9\u4e8e\u7b80\u6d01\u8d77\u89c1\uff0c\u5b58\u5728\u4e00\u4e9b\u5176\u4ed6\u529f\u80fd -  Stpcpy\uff0cMempcpy\uff0cSprintf\uff0cSprintf_s\u548cSnPrintf_s  - \u56e0\u4e3a\u5b83\u4eec\u7684\u884c\u4e3a\uff08\u548c\u95ee\u9898\uff09\u662f\u57fa\u4e8e\u5176\u4ed6\u529f\u80fd\u7684\u76f8\u5f53\u81ea\u6211\u89e3\u91ca\u3002 \uff08Mempcpy\u662f\u4e00\u4e2aGNU\u6269\u5c55\u3002\uff09\n  \u590d\u5236C\u5b57\u7b26\u4e32\u5728C\u4e2d\u662f\u4e00\u4e2a\u6781\u5176\u5e38\u89c1\u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u5982\u6b64\u5b89\u5168\u6709\u6548\u5730\u8fdb\u884c\u4e86\u975e\u7410\u788e\u3002\u51e0\u4e4e\u6240\u6709\u76ee\u524d\u53ef\u7528\u7684\u5b57\u7b26\u4e32\u4f8b\u7a0b\uff0c\u6807\u51c6\u5316\u4e0e\u5426\uff0c\u5177\u6709\u5fae\u5999\u7684\u602a\u7656\uff0c\u901a\u5e38\u963b\u6b62\u5b83\u4eec\u5339\u914d\u8fbe\u5230\u5b83\u4eec\u7684\u7a0b\u5e8f\u5458\u7684\u671f\u671b\u3002\u8fd9\u4e2a\u95ee\u9898\u662f\u901a\u8fc7\u8bb8\u591a\u6837\u5f0f\u6307\u5357\u6216\u6797\u7279\u5c06\u5efa\u8bae\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a\uff08\u6216\u6709\u65f6\u8d85\u8fc7\u4e00\u4e2a\uff01\uff09\u8fd9\u4e9b\u51fd\u6570\u6765\u66ff\u6362Strcpy\u800c\u4e0d\u8ba8\u8bba\u5176\u9650\u5236\u3002\u6700\u540e\uff0c\u6b63\u5982\u6211\u4eec\u5728\u4e0a\u9762\u6240\u770b\u5230\u7684\u90a3\u6837\uff0c\u804c\u80fd\u76f8\u5f53\u5dee\uff1a\u6211\u4eec\u7684StrxCPY\uff0c\u5b66\u672f\u800c\u4e0d\u662f\u4e0d\u53ef\u80fd\u7684\u573a\u666f\uff0c\u65e0\u6cd5\u5728\u5176\u5b9e\u65bd\u4e2d\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a;\u4eba\u4eec\u53ea\u80fd\u60f3\u8c61\u90a3\u4e9b\u4e3a\u5176\u7f16\u5199ad-hoc\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e24\u4e2a\u9519\u8bef\u90fd\u53ef\u80fd\u4ea7\u751f\u9519\u8bef\u3002\n \u76f8\u6bd4\u4e4b\u4e0b\uff0cMemccpy\u7684\u6807\u51c6\u5316\u662f\u4e00\u4e2a\u975e\u5e38\u6b22\u8fce\u7684\u6539\u8fdb\uff0c\u56e0\u4e3a\u5b83\u4fc3\u8fdb\u4e86\u66f4\u5b89\u5168\u548c\u66f4\u9ad8\u6548\u7684\u5b57\u7b26\u4e32\u7b97\u6cd5\u7684\u6784\u5efa - \u9664\u4e86Strxcpy\u4e4b\u5916\uff0c\u8ba8\u8bba\u7684\u8bb8\u591a\u529f\u80fd\u4e5f\u5f88\u5bb9\u6613\u6784\u5efa\u5b83\u3002\u7531\u4e8e\u5b83\u53d8\u5f97\u66f4\u5e7f\u6cdb\uff0c\u5927\u591a\u6570\u4f9d\u8d56\u4e8eStrxCPY\u7684\u4e00\u4e9b\u8bed\u4e49\u7684\u4ee3\u7801\uff0c\u4f46\u4f7f\u7528\u5176\u4ed6\u529f\u80fd\u7684\u4ee3\u7801\u5e94\u8be5\u8fc1\u79fb\u5230Memccpy\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u63a8\u52a8\u9010\u6b65\u6dd8\u6c70\u5b83\u4eec\u5c06\u63a8\u52a8\u6807\u51c6\u5316\u548c\u91c7\u7528\u3002\u8bb8\u591a\u5e7f\u6cdb\u9002\u7528\u7684\u5b57\u7b26\u4e32\u51fd\u6570\u3002\n \u95ee\u9898\uff1f\u6ce8\u91ca\uff1f\u66f4\u6b63\uff1f\u968f\u610f\u5728saagar@saagarjha.com\u4e0e\u6211\u8054\u7cfb;\u6211\u559c\u6b22\u542c\u5230\u4f60\u7684\u60f3\u6cd5\uff01 ", "note_en": "Like them or not,  null-terminated strings are essential to C, and working with them is necessary in all but the most trivial programs. While C-style strings are a fundamental part of using the language, manipulating them is a common source of security bugs and lost performance. One of the most common operations is copying a string from one buffer to another, and there are a variety of string functions that claim to do this in C. Anecdotally, however, there is much confusion about what they actually do, and many people desire a string copying function with the following properties:\n The function should accept a null-terminated source string, a destination buffer, and an integer representing the size of the destination buffer.\n  Upon return the function should ensure that the destination buffer points to a null-terminated string containing a prefix of the source string when possible (specifically, when the destination buffer has a non-zero size) to avoid issues in the future with unterminated strings. (While string truncation has its own issues, it is often a fairly reasonable fallback.)\n  The function should indicate how many characters it copied from the source, as well as indicate if an overflow occurred. (This allows for dealing with the overflow, if desired.)\n  The function should be efficient, and it should not read or write memory that it does not have to. These go partially hand-in-hand: the function should run in a single pass, not write to the destination buffer past the NUL byte it places, or read characters from the source string once it\u2019s determined that it has filled the destination buffer. Ideally, the implementation would be vectorizable (relaxing some of the previous constraints slightly to within platform alignment guarantees).\n  The function should be standardized, so that it may be used portably across systems. Conformance to  ISO C or  POSIX.1 are generally the most desirable.\n That is, what is often necessary is the function below, which we\u2019ll call  strxcpy:\n char  * strxcpy ( char  * restrict  dst ,  const  char  * restrict  src ,  size_t  len )  {\t if  ( ! len )  {\t\t return  NULL ;\t }\t while  ( -- len  &amp;&amp;  ( * dst ++  =  * src ++ ))\t\t ;\t if  ( ! len )  {\t\t * dst ++  =  &#39;\\0&#39; ;\t\t return  * src  ?  NULL  :  dst ;\t }  else  {\t\t return  dst ;\t } }\n Other than standardization, this function will copy the smaller of  strlen(src) or  len - 1 bytes from  src to  dst and cap the copy with a NUL character. In the case where  src fits in  dst, it will return a pointer past the NUL byte it placed; otherwise it returns  NULL to indicate a truncation. While  current  compilers seem to have trouble with its control flow, it should also be fairly straightforwards to vectorize, as the core loop is somewhat similar to a combination of  strncpy and  strlen.\n With guidance to look back to, let\u2019s take a look at a variety of copying routines and see if they can help us.\n To head off the usual concerns, we\u2019ll assume that we must use C, and that we will be eschewing the various length-prefixed or aggregate string constructions available as third-party libraries. While using a different language can solve many of the issues in C besides the one mentioned here; it\u2019s not always desirable or even possible to utilize them. In addition to the usual drawbacks to using third-party libraries, replacing null-terminated strings often causes added syntactical overhead and incompatibilities with other code that has been designed to work with them.\n   The standard  strcpy function, which copies characters from  src to  dst, up to and including the first NUL byte encountered. If  dst is smaller than or aliases  src, then the behavior of the program is undefined.  dst is returned.\n strcpy certainly fulfills requirement 2 and parts of 4: it will always write out a null-terminated string and it\u2019ll do so quickly. However, it cannot perform bounds checks at all, so we can only use it if we know our destination buffer is smaller than our source buffer\u2013it fails requirement 1. Plus it doesn\u2019t tell us how many characters it wrote, either\u2013that\u2019s requirement 3. It\u2019s been part of C forever, so it does meet requirement 5.\n  strncpy copies up to  len characters from  src to  dst. If  src is shorter than  len, then  dst is NUL-padded to  len characters.  dst is returned.\n strncpy takes the parameters we want, so it satisfies requirement 1; even in the face of an arbitrary source string it won\u2019t exhibit undefined behavior, provided that we supply it with the correct destination buffer length. However, if the source is longer that the destination, the buffer will not be null-terminated, and if it is shorter  strncpy will continue writing NUL bytes to the destination up to its size. In addition, it doesn\u2019t indicate how many characters from the source were written, though it is possible to detect overflow by writing a NUL byte to the last character of the destination buffer and checking it after the call. That means it fails requirements 2, 3, and 4, but as it\u2019s been around in C for as long as  strcpy it does meet requirement 5.\n   memcpy doesn\u2019t care about NUL characters at all; it doesn\u2019t even require the source to be a null-terminated string. It fails the first three requirements right off the bat, but it\u2019s part of C and it sure is fast so it meets requirements 4 and 5.\n  strcpy_s conforms to  ISO C11, and is available if  __STDC_WANT_LIB_EXT1__ is defined prior to including string.h and  __STDC_LIB_EXT1__ is defined.\n    A bounds-checked version of  strcpy that performs the same operation and returns zero except it can write unspecified values to the remainder of  dst, and if  src == NULL,  dst == NULL, if truncation would occur,  len is zero or greater than  RSIZE_MAX, or  src and  dst overlap, it will write a NUL byte to  *dst if possible, return a nonzero value, and call a constraint handler function.\n On the surface, this function  seems useful\u2013but a closer look shows that it has a number of unfortunate issues. The largest is that any truncation will call a constraint handler function which can do many things,  like abort the program. In addition, it doesn\u2019t tell us how much it wrote, can scribble over the destination, and is standardized but only available as an optional extension to C11. Overall, it only satisfies requirement 1.\n  strncpy_s conforms to  ISO C11, and is available if  __STDC_WANT_LIB_EXT1__ is defined prior to including string.h and  __STDC_LIB_EXT1__ is defined.\n    A bounds-checked version of  strncpy, that returns a non-zero value if  src == NULL,  dst == NULL, if truncation would occur,  len is zero or greater than  RSIZE_MAX, or  src and  dst overlap, in which case it will write the NUL byte to  *dst if possible, unspecified values to the remainder of  dst, return a nonzero value, and call a constraint handler function. Otherwise is will copy  len bytes from  src to  dst and then add a NUL terminating byte at  dst[len - 1], returning zero.\n This function has the same constraint handler issue as  strcpy_s, and is also standardized but often not available. While it will null-terminate when the string fits and only clobber the destination on an error, it still only satisfies the first requirement.\n  Identical to  strncpy, except that a pointer to the written NUL byte is returned, if any; otherwise  dst + len is returned.\n stpncpy is an improvement on  strncpy, but it only fixes the issue of detecting termination or overflow, which is requirement 3. It still fails requirement 2 because it doesn\u2019t necessarily null-terminate and it fails requirement 4 because it writes NULs to the end of the destination buffer. Unlike  strncpy it\u2019s part of POSIX, but it still meets requirement 5 in addition to requirement 1.\n  When used with  %s as  fmt, copies the first variadic parameter (a string) to  dst, or the first  len - 1 bytes followed by the NUL byte. Returns the length of the first variadic parameter.\n snprintf is a somewhat strange inclusion, but it\u2019s a standard function that can help us if we use \u201c%s\u201d as the format string, taking a size and null-terminating its destination. It fulfills requirements 1, 2, and 5, but falls short on 3 and 4: its return value is essentially \u201cwhat  sprintf would have returned\u201d, which means it must perform an equivalent of a  strlen at the very least. This is slow, not what we want, and an  int (not a  size_t).\n  Semantically equivalent to  sprintf(dst, len, &#34;%s&#34;, src) save for the return value, which is a  size_t.\n strlcpy is identical to the  sprintf invocation from before, except it uses the correct  size_t return type. This still means it fails to satisfy the performance requirements of 3 and 4, and it\u2019s not standard so it doesn\u2019t satisfy 5 either. Since it does the copy and leaves you with a null-terminated string it fills the first two requirements.\n  strscpy copies  src to  dst if it fits in the buffer and return the number of characters copied excluding the trailing NUL byte; otherwise it will copy the first  len - 1 characters and set  dst[len - 1] to a NUL byte, returning  -E2BIG.\n strscpy is the first function we\u2019ve seen that satisfies the four functional requirements: it copies the as much of the source string as possible, null terminates the destination buffer, returns the number of characters copied, and does not perform excessive reads or writes. In fact, we can implement our  strxcpy function using it:\n char  * strxcpy ( char  * restrict  dst ,  const  char  * restrict  src ,  size_t  len )  {\t ssize_t  copied  =  strscpy ( dst ,  src ,  len );\t return  copied  !=  - E2BIG  :  src  +  copied  +  1  :  NULL ; }\n It has two issues: the first, is that it returns an  ssize_t rather than a  size_t, but in practice this isn\u2019t really a problem. The second is that it\u2019s unfortunately non-standard\u2013it\u2019s something the Linux kernel wrote for itself\u2013which means it violates requirement 5.\n  memccpy is identical to  memcpy, but may stop prematurely if  src contains  chr, copying  chr and returning pointer after its location in  dst. If  len characters are copied without encountering  chr, then  NULL is returned.\n memccpy, when used with the NUL character, satisfies all the requirements except for the second one, but this is trivial to fix:\n char  * strxcpy ( char  * restrict  dst ,  const  char  * restrict  src ,  size_t  len )  {\t char  * end  =  memccpy ( dst ,  src ,  &#39;\\0&#39; ,  len );\t if  ( ! end )  {\t\t dst [ len  -  1 ]  =  &#39;\\0&#39; ;\t }\t return  end ; }\n While it\u2019ll ship in an upcoming C standard, it\u2019s already widely available as a popular, optional POSIX extension.\n  There\u2019s a couple of other functions\u2013 stpcpy,  mempcpy,  sprintf,  sprintf_s, and  snprintf_s\u2013that have been omitted for brevity, as their behavior (and issues) are fairly self-explanatory based on the other functions. ( mempcpy is a GNU extension.)\n  Copying strings in C is an extremely common operation, but doing so safely and efficiently is non-trivial. Almost all currently available string routines, standardized or not, have subtle quirks that often prevent them from matching the expectations of the programmer who reaches for them. This issue is compounded by the fact that many style guides or linters will recommend the use of one (or sometimes more than one!) of these functions to replace  strcpy without discussing their limitations. Finally, as we saw above the functions compose quite poorly: our  strxcpy, an academic but not improbable scenario, could not use any of them in its implementation; one can only imagine that those writing an ad-hoc replacement for it may make both errors in doing so.\n In contrast, the standardization of  memccpy is a very welcome improvement, as it facilitates the construction of safer and more efficient string algorithms\u2013in addition to  strxcpy, a number of the functions discussed are  also easy to construct with it. As it becomes more widespread, most code that relies on some of the semantics of  strxcpy but uses one of the other functions to achieve it should probably migrate to  memccpy, and ideally the push to phase out the use of them will drive the standardization and adoption of many more widely applicable string functions.\n Questions? Comments? Corrections? Feel free to reach out to me at  saagar@saagarjha.com; I&#39;d love to hear your thoughts!", "posttime": "2021-06-20 02:47:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,designing,\u5b57\u7b26\u4e32", "title": "\u8bbe\u8ba1\u4e00\u4e2a\u66f4\u597d\u7684strcpy ", "title_en": "Designing a Better Strcpy", "transed": 1, "url": "https://saagarjha.com/blog/2020/04/12/designing-a-better-strcpy/", "via": "", "real_tags": ["\u8bbe\u8ba1", "designing", "\u5b57\u7b26\u4e32"]}, {"category": "", "categoryclass": "", "imagename": "6e598e2013f754bd1703399af43148e9.jpeg", "infoid": 1066923, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5730\u5740\uff1a\u901a\u8baf\u5458\u5730\u5740\uff1a\u4eba\u53e3\u536b\u751f\u79d1\u5b66\u7814\u7a76\u6240\uff0c\u7ebd\u5361\u65af\u5c14\u5927\u5b66\uff0cBaddiley-Clark\u5927\u53a6\uff0cRichardson Road\uff0c\u7ebd\u5361\u65af\u5c14\u5728\u6cf0\u6069NE2 4AX\uff0c\u82f1\u56fd\u3002\u7535\u5b50\u90ae\u4ef6\uff1a[\u7535\u5b50\u90ae\u4ef6\u53d7\u4fdd\u62a4]\n  \u6b64\u5ba1\u67e5\u7684\u9884\u5148\u6253\u5370\u672a\u6536\u5230\u4efb\u4f55\u8d44\u91d1\u3002\u6b64\u66f4\u65b0\u7248\u672c\u7531Crowdfunding Initiative Https://www.gofundme.com/f/help-us-get-lifesaving-drug- aggreved-for-covid19\u8d44\u52a9\n    T. A. Lawrie\u548cA. Bryant CowRote\u5ba1\u67e5;\u4ed6\u4eec\u8fd8\u7b5b\u9009\u4e86\u641c\u7d22\u548c\u5206\u7c7b\u7814\u7a76\u4ee5\u5305\u542b\u548c\u8f93\u5165\u5e76\u68c0\u67e5\u4e86Revman\u4e2d\u7684\u6570\u636e\u5e76\u8fdb\u884c\u4e86\u5206\u6790\u3002\u6570\u636e\u63d0\u53d6\u5728T. A. Lawrie\uff0cA. Bryant\u548cT. Dowswell\u4e4b\u95f4\u5206\u5f00\u3002 Dowswell\u548cA. Bryant\u8bc4\u7ea7\u4e86\u8bc1\u636e\u3002 E. J. Fordham\u5728\u4f0a\u7ef4\u83cc\u7d20\u673a\u5236\u4e0a\u5236\u5907\u4e86\u6587\u672c\uff0c\u5728\u6000\u5b55\u4e2d\u4f7f\u7528\uff0c\u4ee5\u53ca\u8001\u5e74\u4eba\u3002 S. R. Hill\u7f16\u5199\u4e86\u7b80\u77ed\u7684\u7ecf\u6d4e\u8bc4\u8bba\u3002\u4e34\u5e8a\u533b\u751fS. Mitchell\u548cT. C. Tham\u81f4\u529b\u4e8e\u89e3\u91ca\u8ba8\u8bba\u548c\u7ed3\u8bba\u4e2d\u7684\u8bc1\u636e\u3002\u6240\u6709\u4f5c\u8005\u5ba1\u67e5\u5e76\u6279\u51c6\u4e86\u7a3f\u4ef6\u7684\u6700\u7ec8\u7248\u672c\u3002\n    \u8fd9\u662f\u5728Creative Commons\u5f52\u56e0\u5f52\u56e0 - \u975e\u5546\u4e1a\u5e7f\u544a\u884d\u751f\u7269\u8bb8\u53ef\u8bc14.0\uff08CCBY-NC-ND\uff09\u7684\u6761\u6b3e\u4e0b\u5206\u53d1\u7684\u5f00\u653e\u5f0f\u6587\u7ae0\uff0c\u5728\u90a3\u91cc\u5141\u8bb8\u4e0b\u8f7d\u5e76\u5206\u4eab\u8be5\u5de5\u4f5c\uff0c\u63d0\u4f9b\u5b83\u88ab\u6b63\u786e\u5f15\u7528\u3002\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u4ee5\u4efb\u4f55\u65b9\u5f0f\u6539\u53d8\u5de5\u4f5c\uff0c\u800c\u65e0\u9700\u5141\u8bb8\u7684\u6742\u5fd7\u3002\n   \u91cd\u65b0\u704c\u6ce8\u7684\u836f\u7269\u53ef\u80fd\u5bf9SARS-COV-2\u75c5\u6bd2\u4f5c\u7528\u3002\u6297\u75c5\u6bd2\u548c\u6297\u708e\u6027\u8d28\u7684\u6297\u5bc4\u751f\u866b\u4f0a\u7ef4\u83cc\u7d20\u73b0\u5df2\u5728\u8bb8\u591a\u4e34\u5e8a\u8bd5\u9a8c\u4e2d\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002\n    \u6211\u4eec\u8bc4\u4f30\u4e86\u4f0a\u7ef4\u83cc\u7d20\u6cbb\u7597\u5728\u964d\u4f4e\u6b7b\u4ea1\u7387\uff0c\u4e2d\u55dc\u60a3\u8005\u548c\u5316\u5b66\u7f3a\u53e3\u7684\u7597\u6548\uff0c\u60a3\u6709\u60a3\u8005\u6216\u9ad8\u98ce\u9669\u7684Covid-19\u611f\u67d3\u7684\u7597\u6548\u3002\n    \u6211\u4eec\u641c\u7d22\u4e862021\u5e744\u670825\u65e5\u7684\u4e66\u76ee\u6570\u636e\u5e93\u3002\u4e24\u6b21\u5ba1\u67e5\u4f5c\u8005\u4e3a\u7814\u7a76\uff0c\u63d0\u53d6\u6570\u636e\u63d0\u53d6\u548c\u8bc4\u4f30\u504f\u501a\u98ce\u9669\u3002\u8fdb\u884c\u4e86\u835f\u8403\u5206\u6790\uff0c\u5e76\u786e\u5b9a\u4e86\u4f7f\u7528\u7ea7\u522b\u65b9\u6cd5\u8bc4\u4f30\u8bc1\u636e\u7684\u786e\u5b9a\u6027\uff0c\u53e6\u5916\u5728\u8bd5\u9a8c\u987a\u5e8f\u5206\u6790\u4e2d\u8fdb\u884c\u6b7b\u4ea1\u7387\u3002\u6d89\u53ca3406\u540d\u53c2\u4e0e\u8005\u7684\u4e8c\u5341\u56db\u9879\u968f\u673a\u5bf9\u7167\u8bd5\u9a8c\u5ba1\u67e5\u5305\u5bb9\u3002 \n\u7b2c15\u9879\u8bd5\u9a8c\u7684Meta\u5206\u6790\u53d1\u73b0\uff0c\u4f0a\u7ef4\u83cc\u7d20\u4e0e\u65e0\u4f0a\u7ef4\u83cc\u7d20\uff08\u5e73\u5747\u98ce\u9669\u6bd40.38,95\uff05\u7f6e\u4fe1\u533a\u95f40.19-0.73; n = 2438; I 2 = 49\uff05;\u4e2d\u7b49\u786e\u5b9a\u6027\u8bc1\u636e\uff09\u51cf\u5c11\u4e86\u6b7b\u4ea1\u98ce\u9669\u4f7f\u7528\u76f8\u540c\u7684Dersimonian-Laird\u65b9\u6cd5\uff0c\u5728\u8bd5\u9a8c\u987a\u5e8f\u5206\u6790\u4e2d\u786e\u8ba4\u4e86\u8be5\u7ed3\u679c\uff0c\u8be5\u65b9\u6cd5\u662f\u672a\u7ecf\u8c03\u6574\u7684\u5206\u6790\u3002\u8fd9\u5bf9\u4f7f\u7528BigGerstaff-Tweedie\u65b9\u6cd5\u7684\u8bd5\u9a8c\u987a\u5e8f\u5206\u6790\u6765\u8bf4\u4e5f\u662f\u5f3a\u5927\u7684\u3002\u4f4e\u786e\u5b9a\u6027\u8bc1\u636e\u53d1\u73b0\uff0c\u4f0a\u7ef4\u83cc\u7d20\u9884\u9632\u6027\u964d\u4f4e\u4e86Covid-19\u611f\u67d3\u5e73\u574786\uff05\uff0895\uff05\u7f6e\u4fe1\u533a\u95f479\uff05-91\uff05\uff09\u3002\u4e8c\u6b21\u7ed3\u679c\u63d0\u4f9b\u4e86\u4e0d\u592a\u67d0\u4e9b\u8bc1\u636e\u3002\u4f4e\u786e\u5b9a\u6027\u8bc1\u636e\u8868\u660e\uff0c\u4f0a\u7ef4\u83cc\u7d20\u53ef\u80fd\u6ca1\u6709\u76ca\u5904\u201c\u9700\u8981\u673a\u68b0\u901a\u98ce\u201d\uff0c\u800c\u201c\u6539\u5584\u201d\u7684\u4f30\u8ba1\u548c\u201c\u53d8\u8d28\u201d\u7684\u4f30\u8ba1\u660e\u663e\u6709\u5229\u4e8e\u4f0a\u7ef4\u83cc\u7d20\u4f7f\u7528\u3002\u6cbb\u7597\u8bd5\u9a8c\u4e2d\u4e25\u91cd\u4e0d\u826f\u4e8b\u4ef6\u7f55\u89c1\uff0c\u5e76\u4e14\u6ca1\u6709\u5dee\u5f02\u7684\u8bc1\u636e\u88ab\u8bc4\u4f30\u4e3a\u4f4e\u786e\u5b9a\u6027\u3002\u5173\u4e8e\u5176\u4ed6\u4e8c\u7ea7\u7ed3\u679c\u7684\u8bc1\u636e\u975e\u5e38\u4f4e\u3002\n    \u9002\u5ea6\u786e\u5b9a\u7684\u8bc1\u636e\u53d1\u73b0\u4f7f\u7528\u4f0a\u7ef4\u83cc\u7d20\u53ef\u4ee5\u8fdb\u884cCovid-19\u6b7b\u4ea1\u7684\u8f83\u5927\u51cf\u5c11\u3002\u65e9\u671f\u5728\u4e34\u5e8a\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4f0a\u7ef4\u83cc\u7d20\u53ef\u4ee5\u51cf\u5c11\u5bf9\u4e25\u91cd\u75be\u75c5\u7684\u6570\u91cf\u3002\u8868\u89c2\u5b89\u5168\u6027\u548c\u4f4e\u6210\u672c\u8868\u660e\uff0cIvermectin\u53ef\u80fd\u5bf9\u5168\u7403SARS-COV-2\u5927\u6d41\u884c\u4ea7\u751f\u91cd\u5927\u5f71\u54cd\u3002 ", "note_en": "Address for correspondence: Population Health Sciences Institute, Newcastle University, Baddiley-Clark Building, Richardson Road, Newcastle Upon Tyne NE2 4AX, United Kingdom. E-mail:    [email\u00a0protected]\n  The preprint of this review received no funding. This updated version was funded by the crowdfunding initiative   https://www.gofundme.com/f/help-us-get-lifesaving-drug-approved-for-covid19\n    T. A. Lawrie and A. Bryant cowrote the review; they also sifted the search and classified studies for inclusion and entered and checked the data in RevMan and performed analyses. Data extraction was divided among T. A. Lawrie, A. Bryant, and T. Dowswell. T. Dowswell and A. Bryant graded the evidence. E. J. Fordham prepared the text on ivermectin mechanisms, use in pregnancy, and among the elderly. S. R. Hill prepared the brief economic commentary. Clinicians S. Mitchell and T. C. Tham contributed to the interpretation of the evidence in the discussion and conclusions. All authors reviewed and approved the final version of the manuscript.\n    This is an open-access article distributed under the terms of the Creative Commons Attribution-Non Commercial-No Derivatives License 4.0 (CCBY-NC-ND), where it is permissible to download and share the work provided it is properly cited. The work cannot be changed in any way or used commercially without permission from the journal.\n   Repurposed medicines may have a role against the  SARS-CoV-2 virus. The antiparasitic ivermectin, with antiviral and anti-inflammatory properties, has now been tested in numerous clinical trials.\n    We assessed the efficacy of ivermectin treatment in reducing mortality, in secondary outcomes, and in chemoprophylaxis, among people with, or at high risk of, COVID-19 infection.\n    We searched bibliographic databases up to April 25, 2021. Two review authors sifted for studies, extracted data, and assessed risk of bias. Meta-analyses were conducted and certainty of the evidence was assessed using the GRADE approach and additionally in trial sequential analyses for mortality. Twenty-four randomized controlled trials involving 3406 participants met review inclusion.\n    Meta-analysis of 15 trials found that ivermectin reduced risk of death compared with no ivermectin (average risk ratio 0.38, 95% confidence interval 0.19\u20130.73; n = 2438; I 2 = 49%; moderate-certainty evidence). This result was confirmed in a trial sequential analysis using the same DerSimonian\u2013Laird method that underpinned the unadjusted analysis. This was also robust against a trial sequential analysis using the Biggerstaff\u2013Tweedie method. Low-certainty evidence found that ivermectin prophylaxis reduced COVID-19 infection by an average 86% (95% confidence interval 79%\u201391%). Secondary outcomes provided less certain evidence. Low-certainty evidence suggested that there may be no benefit with ivermectin for \u201cneed for mechanical ventilation,\u201d whereas effect estimates for \u201cimprovement\u201d and \u201cdeterioration\u201d clearly favored ivermectin use. Severe adverse events were rare among treatment trials and evidence of no difference was assessed as low certainty. Evidence on other secondary outcomes was very low certainty.\n    Moderate-certainty evidence finds that large reductions in COVID-19 deaths are possible using ivermectin. Using ivermectin early in the clinical course may reduce numbers progressing to severe disease. The apparent safety and low cost suggest that ivermectin is likely to have a significant impact on the  SARS-CoV-2 pandemic globally.", "posttime": "2021-06-20 02:47:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u83cc\u7d20,prevention", "title": "\u4f0a\u7ef4\u83cc\u7d20\u9884\u9632\u548c\u6cbb\u7597Covid-19\u611f\u67d3 ", "title_en": "Ivermectin for Prevention and Treatment of Covid-19 Infection", "transed": 1, "url": "https://journals.lww.com/americantherapeutics/Abstract/9000/Ivermectin_for_Prevention_and_Treatment_of.98040.aspx", "via": "", "real_tags": ["\u83cc\u7d20"]}, {"category": "", "categoryclass": "", "imagename": "ea0e14e0f94d101f8228b15e8abbe0a4.jpg", "infoid": 1066922, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136\u6709\u4e9b\u4eba\u4ecd\u7136\u6000\u7591\u7535\u52a8\u9769\u547d\u5df2\u7ecf\u5f00\u59cb\uff0c\u4f46\u53e6\u4e00\u4e2a\u6c7d\u8f66\u5236\u9020\u5546\u5df2\u7ecf\u8bbe\u5b9a\u4e86\u4e00\u4e2a\u65e5\u671f\uff0c\u4ee5\u4fbf\u505c\u6b62\u5c06\u65b0\u7684\u6c14\u4f53\u548c\u67f4\u6cb9\u8f66\u5e26\u5230\u5e02\u573a\u4e0a\u3002\n \u8463\u4e8b\u4f1a\u4e3b\u5e2dMarkus Deesmann\u5728\u4e0e\u516c\u53f8\u9ad8\u7ba1\u548c\u52b3\u5de5\u4ee3\u8868\u7684\u4f1a\u6664\u4e2d\u8868\u793a\uff0c\u5965\u8fea\u5c06\u505c\u6b62\u5c06\u65b0\u7684\u5316\u77f3\u71c3\u6599\u71c3\u70e7\u6c7d\u8f66\u5f15\u51652026\u5e74\u3002\u6b64\u5916\uff0c\u4ed6\u4eec\u7684\u9635\u5bb9\u4ec5\u5305\u62ec2028\u5e74\u7684\u201c\u7535\u5b50\u201d\u54c1\u724c\u6c7d\u8f66\u3002\n  \u8fd9\u4e0d\u662f\u5fb7\u56fd\u6c7d\u8f66\u5236\u9020\u5546\u5c06\u8f6c\u5411\u7535\u52a8\u7684\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019Deesmann\u8868\u793a\uff0c\u6b27\u6d32\u8054\u76df\u4e25\u683c\u7684\u6392\u653e\u6307\u5357\u6709\u52a9\u4e8e\u63a8\u52a8\u4ed6\u4eec\u7ed3\u675f\u65b0\u578b\u5185\u71c3\u673a\uff08ICE\uff09\u7684\u5f00\u53d1\u3002\n \u5965\u8fea\u6700\u8fd1\u63a8\u51fa\u4e862022\u5e74\u5965\u8feaQ4 E-Tron\u3002\u7535\u52a8\u4ea4\u53c9\u5c06\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u4fee\u526a\u9009\u9879\uff0c\u63d0\u4f9b\u4ece200\u82f1\u91cc\uff08321km\uff09\u7684\u8303\u56f4\uff0c\u6700\u9ad8\u53ef\u8fbe323\u82f1\u91cc\uff08520\u516c\u91cc\uff09\u3002\n \u6c7d\u8f66\u5236\u9020\u5546\u8ba1\u5212\u5728\u672a\u6765\u4e94\u5e74\u5185\u63a8\u51fa\u591a\u8fbe20\u4e2aEV\u6a21\u578b\uff0c\u4f5c\u4e3a\u6bcd\u516c\u53f8\u5927\u4f17\u6c7d\u8f66\u63a8\u52a8\u7535\u6c14\u5316\u7684\u4e00\u90e8\u5206\u3002\n \u7f16\u8005\u6ce8\u610f\uff1a\u672c\u6587\u7684\u5148\u524d\u7248\u672c\u5965\u8fea\u5c06\u505c\u6b62\u5c06\u519b\u6c7d\u8f66\u8fbe\u52302026\u5e74\u3002\u76f8\u53cd\uff0c\u5965\u8fea\u5c06\u57282026\u5e74\u5c06\u65b0\u7684\u71c3\u6c14\u8f66\u5e26\u5230\u5e02\u573a\u3002\u8fd9\u5df2\u7ecf\u7ea0\u6b63\u3002 ", "note_en": "While some still doubt the electric revolution has begun, another automaker has set a date to stop bringing new gas and diesel cars to market.\n In a meeting with company executives and labour representatives, board chairman Markus Duesmann said Audi would stop introducing new fossil fuel burning cars by 2026. Additionally, their lineup will only consist of \u201ce-\u201d branded cars by 2028.\n  This isn\u2019t the first signal the German automaker would be shifting to electric. Earlier this year Duesmann said the European Union\u2019s strict emission guidelines helped push them to end development of new internal combustion engines (ICE).\n Audi recently unveiled the  2022 Audi Q4 e-tron. The electric crossover will come in three different trim options, and offer ranges varying from 200 miles (321km) up to 323 miles (520km) on a full charge.\n The automaker plans to introduce as many as 20 EV models in the next five years as part of parent company  Volkswagen\u2019s push to electrification.\n Editor\u2018s  note: A previous version of this article stated Audi would stop making gas cars by 2026. Instead, Audi will no longer bring new gas cars to market by 2026. This has been corrected.", "posttime": "2021-06-20 02:46:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7279\u65af\u62c9,\u67f4\u6cb9\u8f66,tesla,\u6c7d\u8f66", "title": "\u5965\u8fea\u5c06\u57282026\u5e74\u5c06\u65b0\u7684\u5929\u7136\u6c14\u548c\u67f4\u6cb9\u8f66\u505c\u6b62 - \u9a7e\u9a76\u7279\u65af\u62c9\u52a0\u62ff\u5927 ", "title_en": "Audi will halt new gas and diesel cars by 2026 \u2013 Drive Tesla Canada", "transed": 1, "url": "https://driveteslacanada.ca/news/audi-stop-gas-and-diesel-cars-2026/", "via": "", "real_tags": ["\u7279\u65af\u62c9", "\u67f4\u6cb9\u8f66", "tesla", "\u6c7d\u8f66"]}, {"category": "", "categoryclass": "", "imagename": "9628a3dffb922bdb9dace93a44260955.jpg", "infoid": 1066921, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8f6c\u4ee5\u641c\u7d22OpenCola\u662f\u4e00\u4e2a\u5f00\u6e90\u53ef\u4e50\u7684\u54c1\u724c\uff0c\u5728\u90a3\u91cc\u5236\u4f5c\u5b83\u7684\u8bf4\u660e\u662f\u514d\u8d39\u63d0\u4f9b\u7684\u548c\u53ef\u4fee\u6539\u7684\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u559d\u9152\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4fee\u6539\u548c\u6539\u8fdb\u98df\u8c31\u3002\u5b83\u4e8e2001\u5e74\u7531\u81ea\u7531\u8f6f\u4ef6P2P\u516c\u53f8Opencola\u63a8\u51fa\uff0c\u63a8\u5e7f\u5176\u516c\u53f8\u3002 [1]\n   \u539f\u59cb\u7248\u672c1.0\u7531Grad Conn\uff0cCory Doctorow\u548cJohn Henson\u53d1\u5e03\u4e8e2001\u5e741\u670827\u65e5\u3002\u5f53\u524d\u7248\u672c\u4e3a1.1.3\u3002\u867d\u7136\u6700\u521d\u662f\u4f5c\u4e3a\u89e3\u91ca\u81ea\u7531\u548c\u5f00\u6e90\u8f6f\u4ef6\u7684\u4fc3\u9500\u5de5\u5177\uff0c\u4f46\u996e\u6599\u5360\u636e\u4e86\u81ea\u5df1\u7684\u5bff\u547d\uff0c\u9500\u552e\u4e86150,000\u7f50\u3002 [2]\u57fa\u4e8e\u591a\u4f26\u591a\u7684\u516c\u53f8Opencola\u5bf9\u996e\u6599\u66f4\u597d\u5730\u4e86\u89e3\uff0c\u800c\u4e0d\u662f\u5b83\u5e94\u8be5\u63a8\u5e7f\u7684\u8f6f\u4ef6\u3002\u83b1\u5fb7\u5e03\u6717\uff0c\u516c\u53f8\uff06\uff0339;\u9ad8\u7ea7\u7b56\u7565\u5e08\uff0c\u5c06\u5176\u6210\u529f\u5f52\u529f\u4e8e\u5bf9\u5927\u516c\u53f8\u548c\uff06\uff0334\u7684\u5e7f\u6cdb\u4e0d\u4fe1\u4efb;\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u7684\u4e13\u6709\u6027\u8d28\uff06\uff0334; [3]\n        \u5c06\u6d53\u7f29\u7269\u6df7\u5408\u5230\u89c4\u5b9a\u7684\u914d\u65b9\uff08\u5305\u62ec\u6240\u6709\u63a8\u8350\u7684\u5b89\u5168\u9884\u9632\u63aa\u65bd\uff09\u540e\uff0c\u7528\uff08\uff06\uff0334;\u4f18\u9009\u65e0\u94a0\uff06\uff0334;\uff09\u82cf\u6253\u6c34\u7a00\u91ca5\uff1a1\uff0c\u4f7f\u6210\u54c1\u996e\u7528;\u5728\u8be5\u7a00\u91ca\u4e2d\uff0c\u4e0a\u8ff0\u6210\u5206\u7ec4\u5408\u5c06\u4ea7\u751f\u7ea624\u5347\u7684Opencola\u3002\n \u5168\u98df\u54c1\u8fd8\u5305\u62ec\u7531\u8bf8\u5982\u9175\u6bcd\u548c\u7cd6\u7b49\u57fa\u672c\u6210\u5206\u751f\u4ea7\u7684\u81ea\u5236\u82cf\u6253\u6c34\u7684\u8bf4\u660e\u4e66\uff0c\u4ee5\u4f7f\u6574\u4e2a\u8fc7\u7a0b\u5f00\u6e90;\u5426\u5219\u9700\u8981\u4f7f\u7528\u5546\u4e1a\u751f\u4ea7\u7684\u74f6\u88c5\u6216\u7f50\u88c5\u82cf\u6253\u6c34\uff0c\u6216\u5177\u6709\u5546\u4e1a\u5236\u9020\u7684\u4e8c\u6c27\u5316\u78b3\u7f50\u7684\u6d88\u8d39\u78b3\u5316\u673a\u3002 [4] [5]\n     ^ Paul Heltzel\uff082001\u5e744\u67089\u65e5\uff09\u3002 \uff06\uff0334; Opencola  - \u6709\u4e00\u4e9b\u4ee3\u7801\u548c\u5fae\u7b11\uff06\uff0334;\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u6280\u672f\u5ba1\u67e5\u3002 OpenCola\u6070\u597d\u4ea7\u751f\u82cf\u6253\u6c34\u7684\u8f6f\u4ef6\u516c\u53f8\u4f7f\u7528\u70b9\u5bf9\u70b9\u641c\u7d22\u6765\u67e5\u627e\u7f51\u7edc\u4e0a\u7684\u4fe1\u606f\u3002\u5b83\u7684\u8f6f\u996e\u6599\uff0cOpencola\uff0c\u6709\u52a9\u4e8e\u63a8\u5e7f\u516c\u53f8\u3002\n ^ Malyn\uff082007\u5e742\u670818\u65e5\uff09\u3002 \uff06\uff0334; Opencola  - \u5f00\u6e90\u53ef\u53e3\u53ef\u4e50\uff06\uff0334;\u6570\u5b57\u671f\u520a\u3002\u8f6f\u996e\u6599\u6700\u521d\u662f\u65e8\u5728\u5e2e\u52a9\u89e3\u91ca\u5f00\u6e90\u8f6f\u4ef6\u7684\u4fc3\u9500\u5de5\u5177\uff0c\u4f46\u81ea\u63a8\u51fa\u5b83\u4ee5\u6765\uff06\uff0339;\u5728\u81ea\u5df1\u7684\u751f\u6d3b\u4e2d\u62cd\u6444\u3002\u63a8\u51fa\u5b83\u7684\u516c\u53f8\u5df2\u7ecf\u4e3a\u996e\u6599\u8d8a\u6765\u8d8a\u95fb\u540d\u4e8e\u4ed6\u4eec\u63d0\u4f9b\u7684\u8f6f\u4ef6......\u9500\u552e\u996e\u54c1\u7684\u7f51\u7ad9\u5df2\u552e\u51fa\u8d85\u8fc7150,000\u7f50\uff01\n ^ ian Steadman\uff082013\u5e744\u670813\u65e5\uff09\u3002 \uff06\uff0334;\u5f00\u6e90\u53ef\u4e50\u548c\uff06\uff0339; Napster\u65f6\u523b\uff06\uff0339;\u4e3a\u98df\u54c1\u5546\u4e1a\uff06\uff0334;\u6709\u7ebf \u3002\u5b83\uff06\uff0339; S\u79f0\u4e3aOpen Cola\uff0c\u8be5\u4ea7\u54c1\u9996\u5148\u7531\u73b0\u5728\u7f3a\u52e4\u591a\u4f26\u591a\u8f6f\u4ef6\u516c\u53f8Opencola\u4f5c\u4e3a\u4e00\u4e2a\u7b11\u8bdd\u3002\u4eceRichard Stallman\uff06\uff0339;\u81ea\u7531\u8f6f\u4ef6\u662f\uff06\uff0334\u7684\u7740\u540d\u00b7\u683c\u5c14\u66fc\u7684\u7075\u611f\u6765\u81ea\u8a00\u8bba\u81ea\u7531\uff0c\u4e0d\u50cf\u5564\u9152\uff06\uff0334;\u90a3\u6837\u662f\u4e00\u79cd\u4fc3\u9500\u5de5\u5177\u3002\u98df\u8c31\u5728\u7ebf\u53d1\u5e03\uff0c\u4f9b\u4efb\u4f55\u4eba\u91c7\u53d6\u548c\u9002\u5e94\u3002\u7248\u672c1.0\u4e8e2001\u5e741\u670827\u65e5\u53d1\u5e03 - \u6700\u65b0\u7248\u672c\u4e3a1.1.3\u3002 Opencola\u4e8e2003\u5e74\u5173\u95ed\uff0c\u4f46\u5f00\u653e\u53ef\u4e50\uff06\uff0339;\u4ecd\u7136\u5b58\u5728\u3002 \n^ a b c\uff06\uff0334; opencola.com  - \u8f6f\u996e\u6599\u914d\u65b9 - \u4e92\u8054\u7f51\u6863\u6848\uff06\uff0334; 2001.\u4ece2001-02-18\u5f52\u6863\u539f\u4ef6\u3002 ", "note_en": "Jump to navigation  Jump to search  OpenCola is a brand of  open-source cola, where the instructions for making it are freely available and modifiable. Anybody can make the drink, and anyone can modify and improve on the recipe. It was launched in 2001 by free software P2P company Opencola, to promote their company.  [1]\n   The original version 1.0 was released on 27 January 2001 by Grad Conn,  Cory Doctorow, and John Henson. The current version is 1.1.3. Although originally intended as a promotional tool to explain  free and open source software, the drink took on a life of its own and 150,000 cans were sold.  [2] The Toronto-based company Opencola became better known for the drink than the software it was supposed to promote. Laird Brown, the company&#39;s senior strategist, attributes its success to a widespread mistrust of big corporations and the &#34;proprietary nature of almost everything&#34;.  [3]\n        After mixing up the concentrate to the prescribed recipe (including all recommended safety precautions), the syrup is diluted 5:1 with (&#34;preferably  sodium-free&#34;)  soda water to make the finished drink; at this dilution, the above combination of ingredients will yield approximately 24 litres of OpenCola.\n The full recipe also includes instructions for home-made soda water produced from basic ingredients such as  yeast and  sugar in order to make the entire process open source; otherwise there would be a need to use commercially produced bottled or canned soda, or consumer  carbonation machines with commercially manufactured  carbon dioxide canisters.  [4]  [5]\n     ^   Paul Heltzel (9 April 2001).  &#34;OpenCola-Have Some Code and a Smile&#34;.  MIT Technology Review .  A software company that happens to produce a soda, OpenCola uses peer-to-peer searching to find information on the Web. Its soft drink, OpenCola, helps to promote the company.\n ^    Malyn (18 February 2007).  &#34;OpenCola - Open Source Coca Cola&#34;. Digital Journal .  The soft drink was originally intended to be a promotional tool to help explain open source software but since its launch it&#39;s taken on a life of its own. The company that launched it has become more well known for the drink than the software they offer... the website selling the drink has sold over 150,000 cans!\n ^    Ian Steadman (13 April 2013).  &#34;Open source cola and the &#39;Napster moment&#39; for the food business&#34;.  Wired .  It&#39;s called Open Cola, a product first produced by now-defunct Toronto software company Opencola as something of a joke. Taking inspiration from Richard Stallman&#39;s famous dictum that free software was &#34;free as in speech, not as in beer&#34;, it was meant as a kind of promotional tool. The recipe was published online for anyone to take and adapt. Version 1.0 was published on 27 January 2001 -- the latest version is 1.1.3. Opencola closed in 2003, but Open Cola&#39;s recipe is still around.\n ^     a     b     c     &#34;OpenCola.com - Soft Drink Formula - Internet Archive&#34;. 2001. Archived from  the original on 2001-02-18 .", "posttime": "2021-06-20 02:46:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "opencola", "title": "Opencola\uff08\u996e\u6599\uff09 ", "title_en": "OpenCola (Drink)", "transed": 1, "url": "https://en.wikipedia.org/wiki/OpenCola_(drink)", "via": "", "real_tags": ["opencola"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066920, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u6bcf\u4e2a\u5de5\u7a0b\u5e08\u90fd\u5fc5\u987b\u51b3\u5b9a\u662f\u5426\u4e3a\u67d0\u4e9b\u4e1c\u897f\u5199\u6d4b\u8bd5\u6216\u53ea\u662f\u8fd0\u9001\u529f\u80fd\u5e76\u7ee7\u7eed\u524d\u8fdb\u3002\n \u5728\u4e00\u6bb5\u65f6\u95f4\u560e\u5431\u560e\u5431\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u5c06\u7ecf\u5e38\u4e3a\u7b80\u5355\u7684\u4e1c\u897f\u5199\u6d4b\u8bd5\uff08\u4f8b\u5982\u7eaf\u51fd\u6570\uff09\u6216\u5199\u4e0b\u4e3a\u4ed6\u4eec\u7684\u964d\u538b\u63d0\u4f9b\u6700\u5927\u7684\u7206\u70b8\u7684\u6d4b\u8bd5\uff08\u4f8b\u5982\uff0c\u670d\u52a1\u7684\u7aef\u5230\u7aef\u96c6\u6210\u6d4b\u8bd5\uff09\u3002\n \u6d4b\u8bd5\u4ee3\u7801\u4e0e\u5916\u90e8\u7cfb\u7edf\u76f8\u4e92\u4f5c\u7528\uff0c\u5982\u6570\u636e\u5e93\u6216S3\uff0c\u9700\u8981\u66f4\u591a\u7684\u52aa\u529b\u3002\u4f46\u662f\uff0c\u91cd\u8981\u7684\u4e1a\u52a1\u903b\u8f91\u7ecf\u5e38\u53d1\u751f\u5728\u6b64\u4ee3\u7801\u4e2d\uff0c\u6700\u8fd1\u6211\u5bf9\u6d4b\u8bd5\u5b83\u66f4\u611f\u5174\u8da3\u3002\n    \u6765\u81eaDataclasses Import DataClass Import Json Import Boto3 S3_Bucket =\uff06\uff0334;\u98df\u8c31\uff06\uff0334; def get_s3\uff08\uff09\uff1a\u8fd4\u56deboto3\u3002\u5ba2\u6237\u7aef\uff08\uff06\uff0334; s3\uff06\uff0334;\uff09@ dataclass\u7c7b\u914d\u65b9\uff1a\u540d\u79f0\uff1astr\u8bf4\u660e\uff1astr @ classmethod def get_by_name\uff08cls\uff0cname\uff1astr\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u62ac\u8d77\u98df\u8c31\u6309\u540d\u79f0args\uff1aname\uff08str\uff09\uff1a\u98df\u8c31\u540d\u79f0\u8fd4\u56de\u98df\u8c31\u5bf9\u8c61\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; response = get_s3\uff08\uff09\u3002 get_object\uff08bucket = s3_bucket\uff0ckey = name\uff09\u54cd\u5e94= json\u3002\u52a0\u8f7d\uff08\u54cd\u5e94[\uff06\uff0334;\u8eab\u4f53\uff06\uff0334;]\u3002read\uff08\uff09\uff09\u8fd4\u56decls\uff08\u54cd\u5e94[\uff06\uff0334;\u540d\u79f0\uff06\uff0334;]\uff0c\u54cd\u5e94[\uff06\uff0334;\u6307\u4ee4\uff06\uff0334;]\uff09@ classMethod def update_instructions\uff08 CLS\uff0c\u540d\u79f0\uff1astr\uff0cnew_instructions\uff1astr\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u66f4\u65b0\u98df\u8c31args\u7684\u8bf4\u660e\uff1aname\uff08str\uff09\uff1a\u8981\u66f4\u65b0new_instructions\uff08str\uff09\u7684\u914d\u65b9\u7684\u540d\u79f0\uff1a\u65b0\u7684\u6307\u4ee4\u548c\uff0334;\uff06\uff0334;\uff06\uff0334;\u98df\u8c31= CLS\u3002 get_by_name\uff08name\uff09\u914d\u65b9\u3002\u8bf4\u660e= new_instructions\u8fd4\u56de\u914d\u65b9@ classmethod def delete\uff08cls\uff0cname\uff1astr\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u5220\u9664\u98df\u8c31args\uff1aname\uff08str\uff09\uff1a\u5220\u9664\u914d\u65b9\u7684\u540d\u79f0\u548c\uff0334;\uff06 \uff0334;\uff06\uff0334; get_s3\uff08\uff09\u3002 delete_object\uff08bucket = s3_bucket\uff0ckey = name\uff09def to_json\uff08self\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u5e8f\u5217\u5316json returns\uff1astr\uff1ajson\u8868\u793a\u914d\u65b9\uff06\uff0334;\uff06\uff0334; \uff06\uff0334;\u8fd4\u56dejson\u3002\u8f6c\u50a8\uff08{\uff06\uff0334;\u540d\u79f0\uff06\uff0334; self\u3002\u540d\u5b57\uff0c\uff06\uff0334;\u6307\u793a\uff06\uff0334; self\u3002\u8bf4\u660e}\uff09def save\uff08self\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u6301\u7eed\u5b58\u5728FEREAPE\u5230S3\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; serialized_recipe = self\u3002 to_json\uff08\uff09\u3002\u7f16\u7801\uff08\uff06\uff0334; UTF-8\uff06\uff0334;\uff09get_s3\uff08\uff09\u3002 put_object\uff08bucket = s3_bucket\uff0ckey = self\u3002\u540d\u79f0\uff0cbody = serialized_recipe\uff09\n   Moto\u662f\u4e00\u4e2aPython\u5e93\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u6a21\u62dfAWS\u5728\u6d4b\u8bd5\u4e2d\u7684\u670d\u52a1\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u5b83\u6765\u6d4b\u8bd5\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u521b\u5efa\u6211\u4eecS3\u5b58\u50a8\u6876\u7684PyTest\u3002 Mock_s3\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e2d\u7684\u6240\u6709S3\u4ea4\u4e92\u5c06\u5728Moto\u7684Virtual AWS\u5e10\u6237\u4e2d\u5b9a\u5411\u3002\n \u4eceMoto Import Mock_s3\u5bfc\u5165Boto3\u4ece\u98df\u8c31\u5bfc\u5165\u914d\u65b9\uff0cS3_Bucket @ PyTest\u8fdb\u53e3Pytest\u3002\u5939\u5177def s3\uff08\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u5728\u5047moto aws\u5e10\u6237\u4e2d\u521b\u5efa\u98df\u8c31\u6876\u7684Pytest\u5939\u5177\u4ea7\u751f\u5047\u7684Boto3 S3\u5ba2\u6237\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; Mock_s3\uff08\uff09\uff1as3 = boto3\u3002\u5ba2\u6237\uff08\uff06\uff0334; s3\uff06\uff0334;\uff09s3\u3002 CREATE_BUCKET\uff08BUCKET = S3_BUCKET\uff09\u4ea7\u91cfS3 \ndef test_create_and_get\uff08s3\uff09\uff1a\u914d\u65b9\uff08name =\uff06\uff0334;\u7389\u7c73\u866b\uff06\uff0334;\uff0c\u6307\u793a=\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5408\u5976\u916a\uff06\uff0334;\uff09\u3002\u4fdd\u5b58\uff08\uff09\u914d\u65b9=\u914d\u65b9\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002 name ==\uff06\uff0334;\u7389\u7c73\u7247\uff06\uff0334;\u65ad\u8a00\u98df\u8c31\u3002\u8bf4\u660e==\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5316\u5976\u916a\uff06\uff0334;\n \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u83b7\u53d6\u4e0d\u5b58\u5728\u7684\u914d\u65b9\uff0c\u5219\u5e94\u63d0\u51fa\u5f02\u5e38\u3002\u6b64\u6d4b\u8bd5\u6db5\u76d6\u4e86\u8fd9\u79cd\u60c5\u51b5\u3002\n  \u6211\u4eec\u8fd8\u53ef\u4ee5\u66f4\u65b0\u914d\u65b9\u3002\u6b64\u6d4b\u8bd5\u786e\u8ba4\u5728\u8c03\u7528Save\uff08\uff09\u540e\u66f4\u65b0\u6570\u636e\u3002\n def test_update\uff08s3\uff09\uff1aold_instructions =\uff06\uff0334;\u82af\u7247\u4e0a\u7684\u7194\u4f53\u5976\u916a\uff06\uff0334; new_instructions =\uff06\uff0334;\u5fae\u6ce2\u4e00\u76d8\u88c5\u6ee1\u7389\u7c73\u7247\u548c\u5976\u916a\uff06\uff0334;\u98df\u8c31\uff08\u540d\u79f0=\uff06\uff0334; Nachos\uff06\uff0334;\uff0c\u6307\u4ee4= Old_Instructions\uff09\u3002\u4fdd\u5b58\uff08\uff09new_recipe =\u914d\u65b9\u3002 update_instructions\uff08name =\uff06\uff0334; nachos\uff06\uff0334;\uff0cnew_instructions = new_instructions\uff09\uff03\u5728\u8c03\u7528save\uff08\uff09\u914d\u65b9=\u914d\u65b9\u4e4b\u524d\u6ca1\u6709\u66f4\u6539\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002\u6307\u4ee4== old_instructions new_recipe\u3002\u4fdd\u5b58\uff08\uff09\uff03\u4fdd\u5b58\u914d\u65b9=\u914d\u65b9\u540e\u7684\u914d\u65b9\u66f4\u65b0\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002\u6307\u4ee4== new_instructions.\n  def test_delete\uff08s3\uff09\uff1a\u98df\u8c31\uff08\u540d\u79f0=\uff06\uff0334;\u7389\u7c73\u866b\uff06\uff0334;\uff0c\u6307\u793a=\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5408\u5976\u916a\uff06\uff0334;\uff09\u3002\u4fdd\u5b58\uff08\uff09\u54cd\u5e94= S3\u3002 list_objects_v2\uff08\u6876= s3_bucket\uff09\u65ad\u8a00Len\uff08\u54cd\u5e94[\uff06\uff0334;\u5185\u5bb9\uff06\uff0334;]\uff09== 1\u65ad\u8a00\u54cd\u5e94[\uff06\uff0334;\u5185\u5bb9\uff06\uff0334; ] [0] [\uff06\uff0334; key\uff06\uff0334; ] ==\uff06\uff0334; Nachos\uff06\uff0334;\u98df\u8c31 \u3002\u5220\u9664\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\uff03\u5220\u9664\u914d\u65b9\u54cd\u5e94= S3\u540e\uff0cS3\u4e2d\u7684\u6570\u636e\u6d88\u5931\u4e86\u3002 list_objects_v2\uff08\u6876= s3_bucket\uff09\u65ad\u8a00\uff06\uff0334;\u5185\u5bb9\uff06\uff0334;\u4e0d\u662f\u56de\u5e94\u3002\u952e\uff08\uff09\n \u603b\u7684\u6765\u8bf4\uff0cMoto\u5728\u5b9e\u65bdS3 API\u65f6\u505a\u5f97\u5f88\u597d\u3002\u5b89\u88c5\u6613\u4e8e\u5b89\u88c5\uff0c\u611f\u89c9\u5c31\u50cf\u771f\u5b9e\u7684S3\u4e00\u6837\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u4ee3\u7801\u66f4\u6539\u3002\n   \u4ee5\u4e0b\u662f\u521b\u5efaS3\u5b58\u6839\u7684PyTest\u5939\u5177\u3002\u7531\u4e8e\u5176\u4ed6S3\u5ba2\u6237\u7aef\u4e0d\u4f1a\u4f7f\u7528\u6b64\u5b58\u6839\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4fee\u8865get_s3\u5e76\u7528\u5b58\u6839\u66ff\u6362\u5176\u8fd4\u56de\u503c - \u4ece\u800c\u5f3a\u5236\u5728\u914d\u65b9\u7c7b\u4e2d\u7684\u6240\u6709S3\u5ba2\u6237\u7aef\u6765\u4f7f\u7528\u6211\u4eec\u7684\u5b58\u6839\u3002 \n\u5bfc\u5165DateTime Import JSON\u6765\u81eaDateutil.tz\u5bfc\u5165Tzutc\u4eceIo Import Bytesio\u4eceunittest.stub\u5bfc\u5165\u8865\u4e01\u5bfc\u5165boto3\u4ecebotocore.stub\u5bfc\u5165stubber\uff0c\u4efb\u4f55\u6765\u81eabotocore.response\u5bfc\u5165\u6d41\u5a92\u4f53\u5bfc\u5165pytest\u4ece\u914d\u65b9\u5bfc\u5165\u914d\u65b9\uff0cs3_bucket @ pytest\u3002\u5939\u5177def s3_stub\uff08\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u7528s3\u5ba2\u6237\u7aef\u5b58\u6839\u6a21\u62dfget_s3\u51fd\u6570\u7684pytest\u706f\u5177\u4f1a\u4ea7\u751fs3\u5ba2\u6237\u7aef\uff06\uff0334\u7684\u8131\u832c;\uff06\uff0334;\uff06\uff0334; s3 = boto3\u3002\u5ba2\u6237\u7aef\uff08\uff06\uff0334; s3\uff06\uff0334;\uff09stubber = stuber\uff08s3\uff09\u4e0e\u8865\u4e01\uff08\uff06\uff0334; recipe.get_s3\uff06\uff0334;\uff0creturn_value = s3\uff09\uff1a\u4ea7\u91cf\u8131\u832c\n \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06put_object\u548cget_object s3 apis\u505c\u7559\u54cd\u5e94\u3002\u4f7f\u7528\u90a3\u4e9b\u5b58\u6839\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u521b\u5efa\u5e76\u968f\u540e\u83b7\u53d6\u914d\u65b9\u7684\u6d4b\u8bd5\u3002\n def test_create_and_get\uff08s3_stub\uff09\uff1a\uff03stup out put_object\u54cd\u5e94\uff03\u6ce8\u610f\uff1a\u8fd9\u4e9b\u5b58\u6839\u662f\u4e0d\u5b8c\u6574\u7684 - \u6211\u7701\u7565\u4e86\u8bf8\u5982#brevity pured_object_response = {\uff06\uff0334; respectemetadata\uff06\uff0334\u7b49\u4e8b\u60c5\u3002 \uff1a{\uff06\uff0334; quequentId\uff06\uff0334; \uff1a\uff06\uff0334; 5994D680BF127CE3\uff06\uff0334; \uff0c\uff06\uff0334; httpstatuscode\uff06\uff0334; \uff1a200\uff0c\uff06\uff0334; retryattempts\uff06\uff0334; \uff1a1\uff0c}\uff0c\uff06\uff0334; Etag\uff06\uff0334; \uff1a\uff06\uff0339;\uff06\uff0334; 6299528715bad0e3510d1e4c4952ee7e\uff06\uff0334;\uff06\uff0334; \uff0c} put_object_expected_pa\u200b\u200brams = {\uff06\uff0334;\u94f2\u6597\uff06\uff0334; \uff1a\u4efb\u4f55\uff0c\uff06\uff0334; key\uff06\uff0334; \uff1a\u4efb\u4f55\uff0c\uff06\uff0334;\u8eab\u4f53\uff06\uff0334; \uff1a\u4efb\u4f55} s3_stub\u3002 add_response\uff08\uff06\uff0334; put_object\uff06\uff0334; put_object_response\uff0cput_object_expecty_params\uff09\uff03\u521b\u5efaGet_Object Encoded_Message = JSON\u8fd4\u56de\u7684\u6d41\u4f53\u3002\u8f6c\u50a8\uff08{\uff06\uff0334;\u59d3\u540d\uff06\uff0334;\uff1a\uff06\uff0334;\u7389\u7c73\u866b\uff06\uff0334;\uff0c\uff06\uff0334;\u6307\u793a\uff06\uff0334;\uff1a\uff06\uff0334;\u788e\u7247\u4e0a\u7684\u7194\u4f53\u5976\u916a\uff06\uff0334;}\uff09\u3002\u7f16\u7801\uff08\uff06\uff0334; utf-8\uff06\uff0334;\uff09raw_stream = streamingbody\uff08bytesio\uff08encoded_message\uff09\uff0clen\uff08encoded_message\uff09\uff09\uff03stup out get_object\u54cd\u5e94get_object_response = {\uff06\uff0334; respectemetadata\uff06\uff0334; \uff1a{\uff06\uff0334; quequentId\uff06\uff0334; \uff1a\uff06\uff0334; 6BFC00970E62BC8F\uff06\uff0334; \uff0c\uff06\uff0334; httpstatuscode\uff06\uff0334; \uff1a200\uff0c\uff06\uff0334; retryattempts\uff06\uff0334; \uff1a1\uff0c}\uff0c\uff06\uff0334; LastModified\uff06\uff0334; \uff1a  \u7ea6\u4f1a\u65f6\u95f4 \u3002 DateTime\uff082020,4,6,5,39,29\uff0cTzinfo = Tzutc\uff08\uff09\uff09\uff0c\uff06\uff0334; contentLength\uff06\uff0334; \uff1a58\uff0c\uff06\uff0334; Etag\uff06\uff0334; \uff1a\uff06\uff0339;\uff06\uff0334; 6299528715bad0e3510d1e4c4952ee7e\uff06\uff0334;\uff06\uff0334; \uff0c\uff06\uff0334; contenttype\uff06\uff0334; \uff1a\uff06\uff0334;\u4e8c\u5143/\u516b\u5143\u95e8\u6d41\uff06\uff0334; \uff0c\uff06\uff0334;\u5143\u6570\u636e\uff06\uff0334; \uff1a{}\uff0c\uff06\uff0334;\u8eab\u4f53\uff06\uff0334; \uff1araw_stream\uff0c} get_object_expected_pa\u200b\u200brams = {\uff06\uff0334;\u94f2\u6597\uff06\uff0334; \uff1a\u4efb\u4f55\uff0c\uff06\uff0334; key\uff06\uff0334; \uff1a\u4efb\u4f55} s3_stub\u3002 add_response\uff08\uff06\uff0334; get_object_response\uff0cget_object_eppect_params\uff09\uff03\u7528s3_stub\u6fc0\u6d3bstuber\uff1acrecipe = crecipe\uff08name =\uff06\uff0334;\u7389\u7c73\u866b\uff06\uff0334;\uff0c\u6307\u793a=\uff06\uff0334;\u788e\u7247\u6405\u62cc\u5976\u916a\uff06\uff0334; \uff09  \u98df\u8c31 \u3002\u4fdd\u5b58\uff08\uff09\u914d\u65b9=\u914d\u65b9\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002 name ==\uff06\uff0334;\u7389\u7c73\u7247\uff06\uff0334;\u65ad\u8a00\u98df\u8c31\u3002\u8bf4\u660e==\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5316\u5976\u916a\uff06\uff0334;\n \u867d\u7136Botocore Stubs\u662f\u529f\u80fd\u7684\uff0c\u4f46\u6211\u4e0d\u559c\u6b22\u7528\u5b83\u4eec\u5de5\u4f5c\u6709\u51e0\u4e2a\u539f\u56e0\uff1a\n \u4ed6\u4eec\u9700\u8981\u66f4\u591a\u7684\u51c6\u5907\u3002\u521b\u5efa\u5b58\u6839\u662f\u8017\u65f6\u7684\u3002\u5373\u4f7f\u60a8\u4ea4\u4e92\u65b9\u5f0f\u8fd0\u884c\u771f\u5b9e\u4ee3\u7801\u5e76\u590d\u5236\u54cd\u5e94\uff0c\u4e5f\u9700\u8981\u66ff\u6362\u4e00\u4e9b\u4e8b\u60c5 - \u4f8b\u5982\u4e0a\u9762\u7684\u6d41\u4f53\u3002\n  \u4ed6\u4eec\u662f\u8106\u5f31\u800c\u5047\u7684\u3002\u9996\u5148\u8fd4\u56de\u54cd\u5e94\uff0c\u9996\u5148\u51fa\u5c40 - \u56e0\u6b64\uff0c\u5982\u679c\u60a8\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u8c03\u7528S3 API\uff0c\u5219\u5b83\u5c06\u629b\u51fa\u9519\u8bef\u3002\u5982\u679c\u60a8\u5728\u5982\u4f55\u8c03\u7528API\u4e2d\u6709\u4e00\u4e2a\u9519\u8bef\uff0c\u53ef\u80fd\u4e0d\u4f1a\u88ab\u6355\u83b7\u3002\n  \u8981\u4f7f\u5b58\u6839\u770b\u8d77\u6765\u6709\u70b9\u903c\u771f\uff0c\u4f60\u5fc5\u987b\u5632\u7b11\u4f60\u7684\u4ee3\u7801\u4e0d\u5173\u5fc3\u7684\u5f88\u591a\u9886\u57df\uff0c\u5e76\u5c06\u60a8\u7684\u6d4b\u8bd5\u4e0e\u5047\u54cd\u5e94\u878d\u4e3a\u4e00\u4f53\u3002 \n\u5b83\u4eec\u4ece\u6b63\u5728\u6d4b\u8bd5\u7684\u6a21\u5757\u4e2d\u6cc4\u6f0f\u5b9e\u73b0\u8be6\u7ec6\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6a21\u5757\u4ece\u4f7f\u7528s3.list_objects\u5207\u6362\u5230s3.list_objects_v2\uff0c\u5219\u6d4b\u8bd5\u5c06\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u53d6\u51b3\u4e8e\u88ab\u8c03\u7528\u7684\u7279\u5b9aAPI\u3002\u8fd9\u4f1a\u521b\u5efa\u5bf9\u6a21\u5757\u7684\u79c1\u6709API\u7684\u4e0d\u5fc5\u8981\u4f9d\u8d56\uff0c\u800c\u4e0d\u662f\u6d4b\u8bd5\u516c\u5171API\u3002\n  \u7b2c\u4e09\u4e2a\u9009\u9879\u662fLocalStack\uff0c\u5b83\u5141\u8bb8\u60a8\u5728\u672c\u5730\u63d0\u51fa\u6574\u4e2aAWS\u4e91\u5806\u6808\u3002\n  \u7248\u672c\uff1a\uff06\uff0334; 3.7\uff06\uff0334;\u670d\u52a1\uff1a\u6d4b\u8bd5\uff1a\u56fe\u7247\uff1aS3_TESTING\uff1a\u6700\u65b0\u7f51\u7edc\uff1a - \u5e94\u7528\u7a0b\u5e8f\u8f93\u5165\u70b9\uff1a -  /pp/wait-for-it.sh--t  - \uff06\uff0334; 30\uff06\uff0334; -  localstack\uff1a4572  -   -   -   -  pytest  - \u6d4b\u8bd5/\u73af\u5883\uff1a -  aws_access_key_id = fake  -  aws_default_region = fake  -  aws_secret_access_key = fake localstack\uff1a\u56fe\u7247\uff1alocalstack / localstack\u7aef\u53e3\uff1a - \uff06\uff0334; 4566-4599\uff1a4566-4599\uff06\uff0334;\u7f51\u7edc\uff1a - \u5e94\u7528\u73af\u5883\uff1a -  Services = S3\u7f51\u7edc\uff1a\u5e94\u7528\u7a0b\u5e8f\uff1a\u9a71\u52a8\u7a0b\u5e8f\uff1a\u6865\u63a5\u5668\uff1a\u6865\n \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u518d\u6b21\u6a21\u62dfget_s3\uff0c\u6b64\u65f6\u95f4\u7528\u8fde\u63a5\u5230localstack\u7684s3\u5ba2\u6237\u7aef\u66ff\u6362\u5b83\u3002\n \u6765\u81eaunittest.mock import\u8865\u4e01\u5bfc\u5165boto3\u4ece\u98df\u8c31\u5bfc\u5165\u914d\u65b9\uff0cs3_bucket @ pytest\u5bfc\u5165pytest\u3002\u5939\u5177DEF S3_LOCALSTACK\uff08\uff09\uff1aS3 = BOTO3\u3002\u5ba2\u6237\uff08\uff06\uff0334; s3\uff06\uff0334;\uff0cendpoint_url =\uff06\uff0334; http\uff1a// localstack\uff1a4572\uff06\uff0334;\uff09s3\u3002 CREATE_BUCKET\uff08BUCKET = S3_BUCKET\uff09\u5e26\u8865\u4e01\uff08\uff06\uff0334; recipe.get_s3\uff06\uff0334;\uff0creturn_value = s3\uff09\uff1a\u4ea7\u91cfs3\n \u901a\u8fc7\u8fd9\u79cd\u6a21\u62df\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Moto\u8fd0\u884c\u7684\u76f8\u540c\u6d4b\u8bd5\u3002\n def test_create_and_get\uff08s3_localstack\uff09\uff1a\u98df\u8c31\uff08name =\uff06\uff0334; Nachos\uff06\uff0334;\uff0c\u6307\u793a=\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5408\u5976\u916a\uff06\uff0334;\uff09\u3002\u4fdd\u5b58\uff08\uff09\u914d\u65b9=\u914d\u65b9\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002 name ==\uff06\uff0334;\u7389\u7c73\u7247\uff06\uff0334;\u65ad\u8a00\u98df\u8c31\u3002\u8bf4\u660e==\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5316\u5976\u916a\uff06\uff0334; def test_get_does_not_exist\uff08s3_localstack\uff09\uff1a\u4f7f\u7528pytest\u3002\u63d0\u5347\uff08S3_Localstack\u3002\u4f8b\u5916\u3002Nosuchkey\uff09\uff1a\u98df\u8c31=\u914d\u65b9\u3002 get_by_name\uff08\uff06\uff0334;\u4e09\u660e\u6cbb\uff06\uff0334;\uff09 \nLopalStack\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\uff0c\u4f46\u5728\u6211\u7684\u673a\u5668\u4e0a\u65cb\u8f6c\u9700\u8981\u8fd130\u79d2\u3002  Moto\u548cLocalStack\u90fd\u975e\u5e38\u5f3a\u5927\uff0c\u6613\u4e8e\u4f7f\u7528\u3002 \u4e24\u4e2a\u89e3\u51b3\u65b9\u6848\u90fd\u505a\u597d\u5b9e\u73b0S3 API\uff0c\u5e76\u4e14\u5b83\u4eec\u8fd8\u652f\u6301\u5176\u4ed6AWS\u670d\u52a1\uff0c\u5305\u62ecEC2\uff0cRDS\uff0cLambda\u7b49\u3002 \u9664\u4e86Python\u4e4b\u5916\uff0c\u5b83\u4eec\u8fd8\u53ef\u4ee5\u7528\u4e8e\u6d4b\u8bd5\u4ee3\u7801\u4ee5\u5176\u4ed6\u8bed\u8a00\u3002  lopalstack\u53ef\u80fd\u662f\u5b9e\u9645\u8fde\u63a5\u5230aws\u7684\u6700\u63a5\u8fd1\u7684\u4e8b\u60c5\uff0c\u4f46\u5bf9\u4e8e\u4e0a\u9762\u63d0\u51fa\u7684\u7b80\u5355\u7528\u4f8b\uff0c\u6211\u65e0\u6cd5\u8bc1\u660e\u65cb\u8f6c\u5806\u6808\u6240\u9700\u7684\u989d\u5916\u5f00\u9500\u548c\u65f6\u95f4\u3002 \u56e0\u6b64\uff0c\u6211\u63a8\u8350Moto\uff0c\u56e0\u4e3a\u5b83\u662f\u6b63\u786e\u5b9e\u73b0S3 API\u7684\u6700\u8f7b\u91cf\u7ea7\u7684\u89e3\u51b3\u65b9\u6848\u3002  \u5bf9\u4e8e\u6d4b\u8bd5S3\u6027\u80fd\u7684\u66f4\u590d\u6742\u7684\u9879\u76ee\uff0cLocalStack\u53ef\u80fd\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 Botocore Stubs\u4e0d\u4f1a\u524a\u51cf\u3002  \u8c22\u8c22\u9605\u8bfb\uff01 \u5982\u679c\u60a8\u6709\u4efb\u4f55\u53cd\u9988\uff0c\u6211\u5f88\u4e50\u610f\u6536\u5230\u60a8\u7684\u6d88\u606f - \u5728Twitter\u4e0a\u5173\u6ce8\u6211\u6216\u5728LinkedIn\u4e0a\u7559\u8a00\u3002 ", "note_en": "At some point, every engineer has to decide whether to write tests for something or just ship the feature and move on.\n Under a time crunch, I\u2019ll often write tests for the easy things (e.g. pure functions) or write the tests that provide the biggest bang for their buck (e.g. an end-to-end integration test for the service).\n Testing code that interacts with external systems, like a database or S3, requires a bit more effort. However, important business logic often happens in this code and recently I\u2019ve become more interested in testing it.\n    from  dataclasses  import  dataclass import  json import  boto3 S3_BUCKET  =  &#34;recipes&#34; def  get_s3 ():  return  boto3 . client ( &#34;s3&#34; ) @ dataclass class  Recipe :  name :  str  instructions :  str  @ classmethod  def  get_by_name ( cls ,  name :  str ):  &#34;&#34;&#34;Looks up a Recipe by name Args: name (str): Recipe name Returns a Recipe object &#34;&#34;&#34;  response  =  get_s3 (). get_object ( Bucket = S3_BUCKET ,  Key = name )  response  =  json . loads ( response [ &#34;Body&#34; ]. read ())  return  cls ( response [ &#34;name&#34; ],  response [ &#34;instructions&#34; ])  @ classmethod  def  update_instructions ( cls ,  name :  str ,  new_instructions :  str ):  &#34;&#34;&#34;Updates the instructions for a recipe Args: name (str): Name of the recipe to update new_instructions (str): New instructions &#34;&#34;&#34;  recipe  =  cls . get_by_name ( name )  recipe . instructions  =  new_instructions  return  recipe  @ classmethod  def  delete ( cls ,  name :  str ):  &#34;&#34;&#34;Deletes a recipe Args: name (str): Name of the recipe to delete &#34;&#34;&#34;  get_s3 (). delete_object ( Bucket = S3_BUCKET ,  Key = name )  def  to_json ( self ):  &#34;&#34;&#34;Serialize the recipe to json Returns: str: JSON representation of the Recipe &#34;&#34;&#34;  return  json . dumps ({ &#34;name&#34; :  self . name ,  &#34;instructions&#34; :  self . instructions })  def  save ( self ):  &#34;&#34;&#34;Persists a recipe to S3 &#34;&#34;&#34;  serialized_recipe  =  self . to_json (). encode ( &#34;utf-8&#34; )  get_s3 (). put_object ( Bucket = S3_BUCKET ,  Key = self . name ,  Body = serialized_recipe )\n   Moto is a Python library that makes it easy to mock out AWS services in tests. Let\u2019s use it to test our app.\n First, create a pytest a fixture that creates our S3 bucket. All S3 interactions within the  mock_s3 context manager will be directed at moto\u2019s virtual AWS account.\n import  boto3 from  moto  import  mock_s3 import  pytest from  recipe  import  Recipe ,  S3_BUCKET @ pytest . fixture def  s3 ():  &#34;&#34;&#34;Pytest fixture that creates the recipes bucket in the fake moto AWS account Yields a fake boto3 s3 client &#34;&#34;&#34;  with  mock_s3 ():  s3  =  boto3 . client ( &#34;s3&#34; )  s3 . create_bucket ( Bucket = S3_BUCKET )  yield  s3\n  def  test_create_and_get ( s3 ):  Recipe ( name = &#34;nachos&#34; ,  instructions = &#34;Melt cheese on chips&#34; ). save ()  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . name  ==  &#34;nachos&#34;  assert  recipe . instructions  ==  &#34;Melt cheese on chips&#34;\n If we try to fetch a Recipe that doesn\u2019t exist, an exception should be raised. This test covers that scenario.\n  We can also update a Recipe. This test confirms that the data is updated after  save() is called.\n def  test_update ( s3 ):  old_instructions  =  &#34;Melt cheese on chips&#34;  new_instructions  =  &#34;Microwave a plate full of tortilla chips and cheese&#34;  Recipe ( name = &#34;nachos&#34; ,  instructions = old_instructions ). save ()  new_recipe  =  Recipe . update_instructions (  name = &#34;nachos&#34; ,  new_instructions = new_instructions  )  # Nothing changes until you call save()  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . instructions  ==  old_instructions  new_recipe . save ()  # Recipe updates after saving  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . instructions  ==  new_instructions\n  def  test_delete ( s3 ):  Recipe ( name = &#34;nachos&#34; ,  instructions = &#34;Melt cheese on chips&#34; ). save ()  response  =  s3 . list_objects_v2 ( Bucket = S3_BUCKET )  assert  len ( response [ &#34;Contents&#34; ])  ==  1  assert  response [ &#34;Contents&#34; ][ 0 ][ &#34;Key&#34; ]  ==  &#34;nachos&#34;  Recipe . delete ( &#34;nachos&#34; )  # Data in S3 is gone after deleting the recipe  response  =  s3 . list_objects_v2 ( Bucket = S3_BUCKET )  assert  &#34;Contents&#34;  not  in  response . keys ()\n Overall, moto does a great job of implementing the S3 API. It\u2019s easy to install, feels just like the real S3, and doesn\u2019t require any code changes.\n   Below is a pytest fixture that creates an S3 stub. Since other S3 clients won\u2019t use this stub, we also need to patch  get_s3 and replace its return value with the stub - thereby forcing all S3 clients in the Recipe class to use our stub.\n import  datetime import  json from  dateutil.tz  import  tzutc from  io  import  BytesIO from  unittest.mock  import  patch import  boto3 from  botocore.stub  import  Stubber ,  ANY from  botocore.response  import  StreamingBody import  pytest from  recipe  import  Recipe ,  S3_BUCKET @ pytest . fixture def  s3_stub ():  &#34;&#34;&#34;Pytest fixture that mocks the get_s3 function with a S3 client stub Yields a Stubber for the S3 client &#34;&#34;&#34;  s3  =  boto3 . client ( &#34;s3&#34; )  stubber  =  Stubber ( s3 )  with  patch ( &#34;recipe.get_s3&#34; ,  return_value = s3 ):  yield  stubber\n Then, we can stub out responses for the  put_object and  get_object S3 APIs. With those stubs in place, we can run the test that creates and subsequently fetches a Recipe.\n def  test_create_and_get ( s3_stub ):  # Stub out the put_object response  # Note: These stubs are incomplete - I omitted things such as  # HTTP headers for brevity  put_object_response  =  {  &#34;ResponseMetadata&#34; :  {  &#34;RequestId&#34; :  &#34;5994D680BF127CE3&#34; ,  &#34;HTTPStatusCode&#34; :  200 ,  &#34;RetryAttempts&#34; :  1 ,  },  &#34;ETag&#34; :  &#39;&#34;6299528715bad0e3510d1e4c4952ee7e&#34;&#39; ,  }  put_object_expected_params  =  { &#34;Bucket&#34; :  ANY ,  &#34;Key&#34; :  ANY ,  &#34;Body&#34; :  ANY }  s3_stub . add_response ( &#34;put_object&#34; ,  put_object_response ,  put_object_expected_params )  # Create the StreamingBody that will be returned by get_object  encoded_message  =  json . dumps (  { &#34;name&#34; :  &#34;nachos&#34; ,  &#34;instructions&#34; :  &#34;Melt cheese on chips&#34; }  ). encode ( &#34;utf-8&#34; )  raw_stream  =  StreamingBody ( BytesIO ( encoded_message ),  len ( encoded_message ))  # Stub out the get_object response  get_object_response  =  {  &#34;ResponseMetadata&#34; :  {  &#34;RequestId&#34; :  &#34;6BFC00970E62BC8F&#34; ,  &#34;HTTPStatusCode&#34; :  200 ,  &#34;RetryAttempts&#34; :  1 ,  },  &#34;LastModified&#34; :  datetime . datetime ( 2020 ,  4 ,  6 ,  5 ,  39 ,  29 ,  tzinfo = tzutc ()),  &#34;ContentLength&#34; :  58 ,  &#34;ETag&#34; :  &#39;&#34;6299528715bad0e3510d1e4c4952ee7e&#34;&#39; ,  &#34;ContentType&#34; :  &#34;binary/octet-stream&#34; ,  &#34;Metadata&#34; :  {},  &#34;Body&#34; :  raw_stream ,  }  get_object_expected_params  =  { &#34;Bucket&#34; :  ANY ,  &#34;Key&#34; :  ANY }  s3_stub . add_response ( &#34;get_object&#34; ,  get_object_response ,  get_object_expected_params )  # Activate the stubber  with  s3_stub :  recipe  =  Recipe ( name = &#34;nachos&#34; ,  instructions = &#34;Melt cheese on chips&#34; )  recipe . save ()  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . name  ==  &#34;nachos&#34;  assert  recipe . instructions  ==  &#34;Melt cheese on chips&#34;\n While botocore stubs are functional, I don\u2019t like working with them for several reasons:\n They require a lot more prep. Creating stubs is time-consuming. Even if you run the real code interactively and copy the response, some things need to be replaced - such as the StreamingBody above.\n  They\u2019re fragile and fake. Responses are returned first in, first out - so if you call the S3 APIs in a different order than you added the responses, it will throw an error. If you have a bug in how you call the API, it might not be caught.\n  To make the stubs look somewhat realistic, you have to mock many fields that your code doesn\u2019t care about and bloat your tests with fake responses.\n  They leak implementation details from the module being tested. For example, if a module switched from using  s3.list_objects to  s3.list_objects_v2, the test would fail because it depends on a specific API being called. This creates an unnecessary dependency on the private API of the module, instead of testing the public API.\n  A third option is  localstack, which allows you to bring up an entire AWS cloud stack locally.\n  version :  &#34; 3.7&#34; services :  tests :  image :  s3_testing:latest  networks :  -  app  entrypoint :  -  /app/wait-for-it.sh  -  -t  -  &#34; 30&#34;  -  localstack:4572  -  --  -  pytest  -  test/  environment :  -  AWS_ACCESS_KEY_ID=fake  -  AWS_DEFAULT_REGION=fake  -  AWS_SECRET_ACCESS_KEY=fake  localstack :  image :  localstack/localstack  ports :  -  &#34; 4566-4599:4566-4599&#34;  networks :  -  app  environment :  -  SERVICES=s3 networks :  app :  driver :  bridge\n Next, we mock  get_s3 again and this time replace it with an S3 client that is connected to localstack.\n from  unittest.mock  import  patch import  boto3 import  pytest from  recipe  import  Recipe ,  S3_BUCKET @ pytest . fixture def  s3_localstack ():  s3  =  boto3 . client ( &#34;s3&#34; ,  endpoint_url = &#34;http://localstack:4572&#34; )  s3 . create_bucket ( Bucket = S3_BUCKET )  with  patch ( &#34;recipe.get_s3&#34; ,  return_value = s3 ):  yield  s3\n With this mock in place, we can run the same tests that we ran with moto.\n def  test_create_and_get ( s3_localstack ):  Recipe ( name = &#34;nachos&#34; ,  instructions = &#34;Melt cheese on chips&#34; ). save ()  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . name  ==  &#34;nachos&#34;  assert  recipe . instructions  ==  &#34;Melt cheese on chips&#34; def  test_get_does_not_exist ( s3_localstack ):  with  pytest . raises ( s3_localstack . exceptions . NoSuchKey ):  recipe  =  Recipe . get_by_name ( &#34;sandwich&#34; )\n Localstack is extremely easy to use, but it takes almost 30 seconds to spin up on my machine.\n  Both moto and localstack are very powerful and easy to work with. Both solutions do a good job of implementing the S3 API, and they also support other AWS services including EC2, RDS, Lambda, and more. They can both be used to test code in other languages in addition to Python.\n Localstack is probably the closest thing to actually connecting to AWS, but for my simple use case presented above, I can\u2019t justify the extra overhead and time required to spin up the stack. Therefore, I recommend moto as it\u2019s the most lightweight solution that properly implements the S3 API.\n For more complicated projects that are testing S3 performance, localstack could be a good choice. Botocore stubs don\u2019t make the cut.\n  Thanks for reading! If you have any feedback, I\u2019d love to hear from you - follow me on  Twitter or message me on  LinkedIn.", "posttime": "2021-06-20 02:46:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,\u6d4b\u8bd5,s3", "title": "\u5982\u4f55\u5728Python\u4e2d\u6d4b\u8bd5S3 ", "title_en": "How to Test S3 in Python", "transed": 1, "url": "https://www.sanjaysiddhanti.com/2020/04/08/s3testing/", "via": "", "real_tags": ["python", "\u6d4b\u8bd5", "s3"]}]