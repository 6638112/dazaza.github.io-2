[{"category": "", "categoryclass": "", "imagename": "675890cdbf25a3727f733990442b7b50.jpg", "infoid": 1070678, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u88ab\u544a\u77e5\uff0c\u5927\u6d41\u884c\u6b63\u5728\u6076\u5316\uff0cdelta \u53d8\u4f53\u5177\u6709\u5f88\u5f3a\u7684\u4f20\u67d3\u6027\uff0c\u6211\u4eec\u9700\u8981\u6062\u590d\u5bf9 covid-19 \u7684\u9650\u5236\u2014\u2014\u5373\u4f7f\u662f\u5bf9\u5b8c\u5168\u63a5\u79cd\u75ab\u82d7\u7684\u7f8e\u56fd\u4eba\u4e5f\u662f\u5982\u6b64\u3002\u6d1b\u6749\u77f6\u5df2\u7ecf\u6062\u590d\u4e86\u5ba4\u5185\u6234\u53e3\u7f69\u7684\u89c4\u5b9a\uff0c\u5468\u4e8c\uff0c\u75be\u75c5\u63a7\u5236\u4e0e\u9884\u9632\u4e2d\u5fc3\u64a4\u9500\u4e86\u4e4b\u524d\u7684\u6307\u5bfc\uff0c\u5efa\u8bae\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5728\u5ba4\u5185\u6234\u53e3\u7f69\u3002\u5bb6\u957f\u4eec\u6b63\u51c6\u5907\u8fce\u63a5\u6559\u5e08\u5de5\u4f1a\u7684\u65b0\u4e3e\u63aa\uff0c\u4ee5\u63a8\u8fdf\u79cb\u5b63\u5b66\u6821\u7684\u91cd\u65b0\u5f00\u653e\u3002\u8fd9\u662f\u8352\u8c2c\u7684\u3002\u867d\u7136\u4e00\u4e9b\u672a\u63a5\u79cd\u75ab\u82d7\u7684\u7f8e\u56fd\u4eba\u6b63\u5728\u906d\u53d7\u75db\u82e6\u662f\u53ef\u60b2\u7684\uff0c\u4f46\u5bf9\u4e8e\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u6765\u8bf4\uff0c\u5927\u6d41\u884c\u5df2\u7ecf\u7ed3\u675f\u3002\u672a\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u4e2d covid-19 \u75c5\u4f8b\u7684\u589e\u52a0\u5bf9\u5df2\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u6ca1\u6709\u6784\u6210\u4e25\u91cd\u5a01\u80c1\u3002\u6570\u636e\u5f88\u6e05\u695a\uff1a\u6839\u636e CDC \u7684\u6570\u636e\uff0c\u622a\u81f3 7 \u6708 19 \u65e5\uff0c\u5171\u6709 4,072 \u540d\u63a5\u79cd\u75ab\u82d7\u7684\u7f8e\u56fd\u4eba\u56e0\u6709\u75c7\u72b6\u7684\u7a81\u7834\u6027\u611f\u67d3\u4f4f\u9662\uff0c\u5176\u4e2d\u8d85\u8fc7 1.61 \u4ebf\u4eba\u5df2\u5b8c\u5168\u63a5\u79cd\u75ab\u82d7\u3002\u8fd9\u662f\u4f4e\u4e8e 0.003% \u7684\u7a81\u7834\u6027\u4f4f\u9662\u7387\u3002\u66f4\u597d\u7684\u662f\uff0c\u5728\u4f4f\u9662\u7684\u4eba\u4e2d\uff0c\u53ea\u6709 849 \u4eba\u6b7b\u4e8e covid-19\u3002\u8fd9\u610f\u5473\u7740\u90a3\u4e9b\u7a81\u7834\u6027\u611f\u67d3\u7684\u6b7b\u4ea1\u7387\u4e3a 0.0005%\u3002\u6362\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u4f60\u6b7b\u4e8e\u96f7\u51fb\u7684\u51e0\u7387\u662f 0.0007%\uff0c\u4f60\u6b7b\u4e8e\u5b63\u8282\u6027\u6d41\u611f\u7684\u51e0\u7387\u662f 0.1%\u3002\u5982\u679c\u60a8\u63a5\u79cd\u4e86\u75ab\u82d7\uff0c\u4e0e\u6b7b\u4e8e Covid-19 \u76f8\u6bd4\uff0c\u60a8\u6b7b\u4e8e\u5927\u9ec4\u8702\u3001\u9ec4\u8702\u6216\u871c\u8702\u7ebf\u3001\u72d7\u88ad\u51fb\u3001\u8f66\u7978\u3001\u6eba\u6c34\u3001\u4e2d\u6691\u6216\u98df\u7269\u7a92\u606f\u7684\u53ef\u80fd\u6027\u8981\u5927\u5f97\u591a\u3002\u7edd\u5927\u591a\u6570\u56e0\u7a81\u7834\u6027\u611f\u67d3\u800c\u91cd\u75c5\u7684\u4eba\u5e74\u9f84\u8f83\u5927\u6216\u6709\u6f5c\u5728\u75be\u75c5\u3002\u6839\u636e\u660e\u5c3c\u82cf\u8fbe\u5dde\u536b\u751f\u90e8\u7684\u6570\u636e\uff0c\u7206\u53d1\u6027\u611f\u67d3\u4f4f\u9662\u60a3\u8005\u7684\u4e2d\u4f4d\u5e74\u9f84\u4e3a 74 \u5c81\u3002\u4ee5\u8272\u5217\u5bf9\u7206\u53d1\u6027\u611f\u67d3\u4f4f\u9662\u60a3\u8005\u7684\u7814\u7a76\u53d1\u73b0\uff0c\u53ea\u6709 4% \u7684\u4eba\u6ca1\u6709\u5408\u5e76\u75c7\u3002\u5176\u4f59\u7684\u4eba\u60a3\u6709\u764c\u75c7\u6216\u5145\u8840\u6027\u5fc3\u529b\u8870\u7aed\u7b49\u9884\u5148\u5b58\u5728\u7684\u75be\u75c5\uff0c\u4f7f\u4ed6\u4eec\u5bb9\u6613\u60a3\u4e0a\u4e25\u91cd\u7684 covid-19\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5bf9\u4e8e\u5176\u4ed6\u5065\u5eb7\u7684\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u2014\u2014\u4ee5\u53ca\u90a3\u4e9b\u5bf9\u5148\u524d\u611f\u67d3\u5177\u6709\u5929\u7136\u514d\u75ab\u529b\u7684\u4eba\u2014\u2014\u6b7b\u4e8e covid-19 \u7684\u51e0\u7387\u63a5\u8fd1\u4e8e\u96f6\u3002\u672a\u63a5\u79cd\u75ab\u82d7\u7684\u513f\u7ae5\u4e5f\u662f\u5982\u6b64\u3002\u6b63\u5982\u7ea6\u7ff0\u970d\u666e\u91d1\u65af\u5927\u5b66\u6559\u6388 Marty Makary \u5728\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u4e0a\u6307\u51fa\u7684\u90a3\u6837\uff0cCDC \u6570\u636e\u663e\u793a\uff0c\u5728\u8d85\u8fc7 60 \u4e07\u7f8e\u56fd\u4eba\u6b7b\u4e8e\u65b0\u51a0\u75c5\u6bd2\u8bca\u65ad\u4ee3\u7801\u7684\u8bb0\u5f55\u4e2d\uff0c\u53ea\u6709 335 \u540d\u662f 18 \u5c81\u4ee5\u4e0b\u7684\u513f\u7ae5\u2014\u2014\u800c CDC \u4e0d\u77e5\u9053\u662f\u5426\u4ed6\u4eec\u6709\u4e00\u4e2a\u9884\u5148\u5b58\u5728\u7684\u6761\u4ef6\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u65b0\u51a0\u75c5\u6bd2\u8bca\u65ad\u662f\u5076\u7136\u7684\u8fd8\u662f\u56e0\u679c\u5173\u7cfb\u3002\u7531 Makary \u9886\u5bfc\u7684\u7ea6\u7ff0\u970d\u666e\u91d1\u65af\u5927\u5b66\u7684\u4e00\u4e2a\u7814\u7a76\u5c0f\u7ec4\u5bf9 48,000 \u540d\u88ab\u8bca\u65ad\u51fa\u60a3\u6709 covid-19 \u7684 18 \u5c81\u4ee5\u4e0b\u513f\u7ae5\u8fdb\u884c\u4e86\u7814\u7a76\uff0c\u53d1\u73b0\u6ca1\u6709\u9884\u5148\u5b58\u5728\u75be\u75c5\uff08\u4f8b\u5982\u513f\u79d1\u764c\u75c7\uff09\u7684\u513f\u7ae5\u7684\u6b7b\u4ea1\u7387\u4e3a\u96f6\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6ca1\u6709\u5b98\u65b9\u7684\u653f\u5e9c\u6570\u636e\u663e\u793a\u662f\u5426\u6709\u4efb\u4f55\u5065\u5eb7\u513f\u7ae5\u56e0 covid-19 \u800c\u6b7b\u4ea1\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u513f\u7ae5\u611f\u67d3 COVID-19 \u7684\u98ce\u9669\u6781\u4f4e\u3002\u8fd9\u4e00\u70b9\u662f\u80af\u5b9a\u7684\uff1a\u63a5\u79cd\u8fc7\u75ab\u82d7\u4e14\u8eab\u4f53\u5065\u5eb7\u7684\u6559\u5e08\u4e0d\u4f1a\u9762\u4e34\u672a\u63a5\u79cd\u75ab\u82d7\u7684\u5b66\u751f\u5e26\u6765\u7684\u4e25\u91cd\u98ce\u9669\u3002\u4f46\u662f\uff0c\u7531\u4e8e delta \u53d8\u79cd\u5f15\u8d77\u7684\u6fc0\u589e\u9884\u8ba1\u5c06\u5728 8 \u6708\u5e95\u6216 9 \u6708\u521d\u8fbe\u5230\u9876\u5cf0\u2014\u2014\u6b63\u597d\u662f\u5b66\u6821\u5373\u5c06\u5f00\u5b66\u7684\u65f6\u5019\u2014\u2014\u9884\u8ba1\u6559\u5e08\u5de5\u4f1a\u5c06\u5229\u7528 delta \u8981\u6c42\u5b66\u6821\u4fdd\u6301\u5173\u95ed\uff0c\u76f4\u5230\u5e7c\u513f\u63a5\u79cd\u75ab\u82d7\u4e3a\u6b62\u3002\u62b1\u6b49\uff0c\u6ca1\u6709\u4efb\u4f55\u7406\u7531\u4e0d\u5f00\u5b66\uff0c\u6216\u8981\u6c42\u5b69\u5b50\u4eec\u6234\u53e3\u7f69\u6216\u63a5\u79cd\u75ab\u82d7\u624d\u80fd\u8fd4\u56de\u6559\u5ba4\u3002\u5e76\u4e14\u6ca1\u6709\u7406\u7531\u5f3a\u5236\u8981\u6c42\u63a5\u79cd\u75ab\u82d7\u7684\u7f8e\u56fd\u4eba\u6234\u53e3\u7f69\uff0c\u6216\u5bf9\u5177\u6709\u81ea\u7136\u514d\u75ab\u529b\u6216\u63a5\u79cd\u75ab\u82d7\u7684\u516c\u6c11\u7684\u65e5\u5e38\u6d3b\u52a8\u91cd\u65b0\u65bd\u52a0\u4efb\u4f55\u9650\u5236\u3002\u6211\u4eec\u5e94\u8be5\u9f13\u52b1\u672a\u63a5\u79cd\u75ab\u82d7\u7684\u7f8e\u56fd\u4eba\u4e3a\u81ea\u5df1\u63a5\u79cd\u75ab\u82d7\u3002\u4eca\u5929\uff0c\u8d85\u8fc7 99% \u7684\u6b7b\u4ea1\u53d1\u751f\u5728\u672a\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u7fa4\u4e2d\u3002\u8fd9\u4e9b\u6b7b\u4ea1\u662f\u60b2\u60e8\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u51e0\u4e4e\u662f\u5b8c\u5168\u53ef\u4ee5\u9884\u9632\u7684\u3002\u5728\u7f8e\u56fd\uff0c\u4efb\u4f55\u60f3\u8981\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u73b0\u5728\u90fd\u53ef\u4ee5\u63a5\u79cd\u3002\u4f46\u5bf9\u4e8e\u6211\u4eec\u5176\u4ed6\u4eba\u6765\u8bf4\uff0c\u75ab\u82d7\u5df2\u7ecf\u5c06 covid-19 \u4ece\u81f4\u547d\u5a01\u80c1\u53d8\u6210\u4e86\u6bd4\u666e\u901a\u611f\u5192\u66f4\u5371\u9669\u7684\u4e1c\u897f\u3002 Makary \u544a\u8bc9\u6211\uff0c\u201c\u5982\u679c\u60a8\u63a5\u79cd\u4e86\u75ab\u82d7\uff0c\u90a3\u4e48\u60a8\u73b0\u5728\u751f\u6d3b\u5728\u4e00\u4e2a\u5b63\u8282\u6027\u75c5\u6bd2\u7684\u4e16\u754c\u4e2d\uff0c\u8fd9\u79cd\u75c5\u6bd2\u975e\u5e38\u6e29\u548c\uff0c\u79f0\u4e3a covid-19\uff0c\u5b83\u53ef\u4ee5\u8ba9\u60a8\u5b63\u8282\u6027\u5730\u51fa\u73b0\u8f7b\u5fae\u75c7\u72b6\uff0c\u8fd9\u6ca1\u5173\u7cfb\u3002\u201d\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u6307\u51fa\u6709\u56db\u79cd\u5b63\u8282\u6027\u51a0\u72b6\u75c5\u6bd2\u5728\u7f8e\u56fd\u4f20\u64ad\u4e86\u51e0\u5341\u5e74\uff0c\u7ea6\u5360\u6240\u6709\u666e\u901a\u611f\u5192\u75c5\u4f8b\u7684 25%\u3002 Covid-19 \u53ef\u80fd\u4f1a\u6210\u4e3a\u7b2c\u4e94\u4e2a\u3002 \u201c\u6211\u4eec\u7684\u6218\u6597\u4ece\u6765\u90fd\u4e0d\u662f\u9488\u5bf9\u666e\u901a\u611f\u5192\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u5b83\u4e00\u76f4\u5728\u53cd\u5bf9\u6b7b\u4ea1\u3002\u201d\u90a3\u573a\u6218\u6597\u5df2\u7ecf\u8d62\u4e86\u3002\u6211\u4eec\u53ef\u80fd\u9700\u8981\u52a9\u63a8\u5668\u3002\u5982\u679c\u51fa\u73b0\u65b0\u7684\u53d8\u4f53\uff0cmRNA \u6280\u672f\u53ef\u4ee5\u8fc5\u901f\u9002\u5e94\u4ee5\u9776\u5411\u5e76\u51fb\u8d25\u5b83\u4eec\u3002\u6211\u4eec\u5bf9\u75c5\u6bd2\u6beb\u65e0\u9632\u5907\u7684\u65f6\u4ee3\u5df2\u7ecf\u7ed3\u675f\u3002\u662f\u65f6\u5019\u91cd\u65b0\u5f00\u59cb\u6211\u4eec\u7684\u751f\u6d3b\u4e86\u3002\u5f53\u5929\u6700\u91cd\u8981\u7684\u65b0\u95fb\u62a5\u9053\uff0c\u7531\u90ae\u653f\u7f16\u8f91\u7b56\u5212\uff0c\u6bcf\u5929\u65e9\u4e0a\u53d1\u5e03\u3002", "note_en": "The pandemic is worsening and the delta variant is so infectious, we are  told, that we need to return to covid-19 restrictions \u2014 even for fully vaccinated Americans. Los Angeles has already reinstated indoor mask mandates, and on Tuesday the Centers for Disease Control and Prevention reversed its previous guidance and  recommended that vaccinated people wear masks indoors in certain circumstances. Parents are bracing for a new push from teachers\u2019 unions to  delay school reopenings in the fall.\n This is absurd. While it is tragic that some unvaccinated Americans are suffering, for the vaccinated, the pandemic is over. The rise in covid-19 cases among the unvaccinated poses no serious threat to those who have been immunized.\n The data is clear: According to the  CDC, as of July 19, a grand total of 4,072 vaccinated Americans had been hospitalized with symptomatic breakthrough infections, out of more than 161 million who have been fully vaccinated. That is a breakthrough hospitalization rate of less than 0.003 percent. Better still, of those hospitalized, only 849 have died of covid-19. That means the death rate from those breakthrough infections is 0.0005 percent.\n   To put that in perspective, your chance of dying  from a lightning strike is .0007 percent, and your chance of dying from a  seasonal flu is 0.1 percent. If you\u2019re vaccinated, you have a much greater chance of  dying from a hornet, wasp or bee string, a dog attack, a car crash, drowning, sunstroke, or choking on food than you do of dying from covid-19.\n  The vast majority of those who do become seriously ill from breakthrough infections are older or have underlying conditions. According to the Minnesota Department of Health, the  median age of those hospitalized with breakthrough infections is 74. An  Israeli study of patients hospitalized with breakthrough infections found that only 4 percent had no co-morbidities. The rest had preexisting illnesses such as cancer or congestive heart failure that predisposed them to severe covid-19.\n What this means is that for otherwise healthy vaccinated people \u2014 and those who have natural immunity from previous infection \u2014 the chance of dying of covid-19 is close to zero.\n   The same is true for unvaccinated children. As Johns Hopkins University professor Marty Makary  points out in the Wall Street Journal, CDC data show that of the more than 600,000 Americans who died with a covid diagnosis code in their record, just 335 were children under 18 \u2014 and the CDC has no idea whether they had a preexisting condition and whether their covid diagnosis was incidental or causal. A research team at Johns Hopkins led by Makary looked at 48,000 children under 18 diagnosed with covid-19, and found a mortality rate of zero among children without a preexisting medical condition, such as pediatric cancer. Indeed, there is no official government data to show whether  any healthy children have died as a result of covid-19.\n The fact is children are at extremely low risk from covid-19. And this much is certain: Teachers who are vaccinated and otherwise healthy face no serious risk from their unvaccinated students. But with the surge caused by the delta variant  expected to peak in late August or early September \u2014 right when schools are set to open \u2014 expect the teacher unions to use delta to demand that schools stay closed until young children are vaccinated.\n Sorry, but there is no justification whatsoever not to open schools, or to  require that children wear masks or be vaccinated to return to the classroom. And there is no justification to mandate that vaccinated Americans wear masks, or to reimpose any restrictions on the everyday activities of citizens who have either natural or vaccinated immunity.\n   We should encourage unvaccinated Americans to get immunized for their own sakes. Over  99 percent of deaths occur today in unvaccinated people. These deaths are tragic because they are almost entirely preventable. Anyone in the United States who wants a vaccination can now get it.\n But for the rest of us, the vaccines have turned covid-19 from a mortal threat into something little more dangerous than the  common cold. Makary tells me, \u201cIf you\u2019re vaccinated, you now are living in a world where there\u2019s a seasonal virus that is very mild called covid-19 that could give you mild symptoms season to season, and that\u2019s okay.\u201d Indeed, he points out that there are four seasonal coronaviruses that have circulated in the United States for decades, and that make up about 25 percent of all cases of the common cold. Covid-19 is probably going to become the fifth. \u201cOur battle has never been against the common cold,\u201d he says. \u201cIt\u2019s been against death.\u201d\n That battle has been won. We may need boosters down the line. And if new variants emerge, mRNA technology can quickly be adapted to target and defeat them. The period when we were defenseless against the virus is over. It\u2019s time to live our lives again.\n      The most important news stories of the day, curated by Post editors and delivered every morning.", "posttime": "2021-07-31 01:26:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u75ab\u82d7,americans", "title": "\u63a5\u79cd\u75ab\u82d7\u7684\u7f8e\u56fd\u4eba\u6bd4 Covid \u66f4\u6709\u53ef\u80fd\u6b7b\u4e8e\u96f7\u51fb", "title_en": "Vaccinated Americans more likely to die from a lightning strike than Covid", "transed": 1, "url": "https://www.washingtonpost.com/opinions/2021/07/27/vaccinated-americans-are-more-likely-die-lightning-strike-than-covid-dont-bring-back-restrictions/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u75ab\u82d7", "americans"]}, {"category": "", "categoryclass": "", "imagename": "89c8b04933308b7bf57b9a130b733d81.jpg", "infoid": 1070676, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Valve \u5bf9 Wolfire 4 \u6708\u4efd\u7684\u8bc9\u8bbc\u53d1\u51fa\u4e86\u4e25\u5389\u7684\u56de\u5e94\uff0c\u8be5\u8bc9\u8bbc\u6307\u63a7 Steam \u5e97\u9762\u5b58\u5728\u53cd\u7ade\u4e89\u5784\u65ad\u505a\u6cd5\u3002\u5728\u56de\u5e94\u4e2d\uff0cValve \u8ba4\u4e3a\u8be5\u8bc9\u8bbc\u5e94\u8be5\u88ab\u9a73\u56de\uff0c\u56e0\u4e3a\u5b83\u201c\u672a\u80fd\u6307\u63a7\u53cd\u5784\u65ad\u6848\u4ef6\u7684\u6700\u57fa\u672c\u8981\u7d20\u201d\u3002 Wolfire \u7684\u6848\u4f8b\u90e8\u5206\u662f\u56e0\u4e3a Valve \u8981\u6c42\u4f7f\u7528 Valve \u5e73\u53f0\u7684\u5f00\u53d1\u4eba\u5458\u751f\u6210\u7684\u514d\u8d39 Steam \u5bc6\u94a5\u5728\u5176\u4ed6\u5e73\u53f0\u4e0a\u4ee5\u4e0d\u4f4e\u4e8e Steam \u4e0a\u63d0\u4f9b\u7684\u4ef7\u683c\u51fa\u552e\u3002\u4f46 Valve \u5728\u5176\u63d0\u4ea4\u7684\u6587\u4ef6\u4e2d\u591a\u6b21\u8fa9\u79f0\uff0c\u5b83\u201c\u6ca1\u6709\u4e49\u52a1\u5206\u53d1 Steam \u5bc6\u94a5\uff0c\u66f4\u4e0d\u7528\u8bf4\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u4f7f\u7528 Steam \u5bc6\u94a5\u6765\u964d\u4f4e\u4ed6\u4eec\u5728\u5176\u4ed6\u5546\u5e97\u7684 Steam \u4ef7\u683c\u4e86\u3002\u201d Valve \u8868\u793a\uff0c\u514d\u8d39\u5bc6\u94a5\u7cfb\u7edf\u65e8\u5728\u201c[\u7ed9\u4e88] \u5f00\u53d1\u5546\u4e00\u79cd\u514d\u8d39\u65b9\u5f0f\u6765\u9500\u552e\uff08\u6216\u8d60\u9001\uff09\u5408\u7406\u6570\u91cf\u7684 Steam \u6e38\u620f\u526f\u672c\u3002\u201d\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u5bf9\u8fd9\u4e9b\u5bc6\u94a5\u7684\u975e Steam \u5b9a\u4ef7\u7684\u9650\u5236\u201c\u963b\u6b62\u4e86\u5f00\u53d1\u8005\u642d\u4fbf\u8f66\u4f7f\u7528 Valve \u5bf9 Steam \u7684\u6295\u8d44\u201d\u3002\u5b9a\u4ef7\u548c\u6570\u91cf\u6307\u5357\u201c\u9632\u6b62\u5f00\u53d1\u5546\u4fb5\u8680 Steam \u4e0a\u7684\u5927\u91cf\u9500\u552e\uff0cValve \u627f\u62c5 100% \u7684\u521b\u5efa\u548c\u7ef4\u62a4\u8d39\u7528\uff0c\u4f46\u514d\u8d39\u63d0\u4f9b\u7ed9\u7528\u6237\u3002\u201d Valve \u7ee7\u7eed\u8868\u793a\uff0c\u53cd\u5784\u65ad\u6cd5\u201c\u6ca1\u6709\u7ed9 Valve \u65bd\u52a0\u4fc3\u8fdb\u4e0e\u81ea\u8eab\u7ade\u4e89\u7684\u4e49\u52a1\u201d\uff0c\u5e76\u6307\u51fa\u652f\u6301\u5224\u4f8b\u6cd5\u3002 \u201cValve \u4e5f\u6ca1\u6709\u4e49\u52a1\u7ee7\u7eed\u63d0\u4f9b [\u514d\u8d39\u5bc6\u94a5]\u3001\u65e0\u9650\u6570\u91cf\u5730\u6388\u4e88\u5b83\u4eec\uff0c\u6216\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u5b83\u4eec\u5728\u6bd4 Steam \u66f4\u4fbf\u5b9c\u7684\u5176\u4ed6\u5546\u5e97\u9500\u552e\u652f\u6301 Steam \u7684\u6e38\u620f\uff0c\u201dValve \u4e89\u8fa9\u9053\u3002 Wolfire \u7684\u8bc9\u8bbc\u8fd8\u79f0\uff0cValve \u4e0d\u4ec5\u8bd5\u56fe\u5bf9\u751f\u6210\u7684 Steam \u5bc6\u94a5\u6267\u884c\u5b9a\u4ef7\u5e73\u4ef7\uff0c\u800c\u4e14\u8fd8\u5bf9\u5728\u5176\u4ed6\u5e73\u53f0\u4e0a\u9500\u552e\u7684\u975e Steam \u7248\u672c\u6267\u884c\u5b9a\u4ef7\u3002\u5728\u56de\u5e94\u4e2d\uff0cValve \u5bf9\u8fd9\u4e00\u6307\u63a7\u7684\u4e8b\u5b9e\u4f9d\u636e\u5e76\u6ca1\u6709\u7559\u4e0b\u6df1\u523b\u5370\u8c61\uff0c\u5b83\u8bf4\u8fd9\u4e0e\u201cValve \u7684\u4e00\u4e2a\u8f76\u4e8b\u6709\u5173\uff0c\u636e\u79f0\u4ed6\u544a\u8bc9\u4e00\u4f4d\u672a\u5177\u540d\u7684\u5f00\u53d1\u8005\uff0c\u4e0d\u5e94\u8be5\u5728 Discord \u7684\u7ade\u4e89\u4e2d\u514d\u8d39\u63d0\u4f9b\u975e Steam \u652f\u6301\u7684\u6e38\u620f\u3002\u5e73\u53f0\uff0c\u5982\u679c\u5b83\u5411 Steam \u7528\u6237\u6536\u53d6 5 \u7f8e\u5143\u7528\u4e8e Steam \u4e0a\u8be5\u6e38\u620f\u7684 Steam \u7248\u672c\u3002\u201d Valve \u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u72ed\u9698\u7684\u8f76\u4e8b\u201c\u672a\u80fd\u58f0\u79f0\u5728\u6574\u4e2a\u5e02\u573a\u8303\u56f4\u5185\u6267\u884c\u6216\u53ef\u80fd\u5bf9\u7ade\u4e89\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002\u201d Wolfire \u7684\u8bc9\u8bbc\u786e\u5b9e\u8bc1\u660e\u4e86\u8bb8\u591a\u6e38\u620f\u5728 Steam \u548c\u5176\u4ed6\u6536\u8d39\u8f83\u4f4e\u7684\u5e97\u9762\u4e0a\u7684\u5b9a\u4ef7\u76f8\u540c\u3002\u4f46 Valve \u8ba4\u4e3a\uff0c\u8fd9\u79cd\u8de8\u5e97\u9762\u7684\u5b9a\u4ef7\u5e73\u4ef7\u662f\u53f8\u7a7a\u89c1\u60ef\u7684\u3002\u5373\u4f7f\u4e0d\u662f\u8fd9\u6837\uff0cValve \u8bf4\uff0c\u8bc9\u8bbc\u4e5f\u6ca1\u6709\u201c\u4efb\u4f55\u4e8b\u5b9e\u6307\u63a7\uff0cValve ......\u505a\u4e86\u4efb\u4f55\u4e8b\u60c5\u6765\u5f71\u54cd\uff0c\u66f4\u4e0d\u7528\u8bf4\u80c1\u8feb\u4e86\uff0c\u5f00\u53d1\u5546\u5728\u4e24\u5bb6\u5546\u5e97\u4ee5\u76f8\u540c\u7684\u4ef7\u683c\u51fa\u552e\u3002\u201d Valve \u8fd8\u6307\u8d23 Wolfire \u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u4e8b\u5b9e\u6765\u652f\u6301\u5176\u65ad\u8a00\uff0c\u5373 Steam 30% \u7684\u6e38\u620f\u9500\u552e\u57fa\u6570\u524a\u51cf\u9ad8\u4e8e\u5728\u66f4\u5177\u201c\u7ade\u4e89\u6027\u201d\u7684\u5e02\u573a\u4e2d\u53ef\u7528\u7684\u57fa\u6570\u3002\u76f8\u53cd\uff0cValve \u8bf4\uff0c\u201c\u539f\u544a\u53ea\u80fd\u5f97\u51fa\u4e00\u4e2a\u6982\u62ec\uff0c\u5373\u7ecf\u6d4e\u5b66\u9884\u6d4b Valve \u7684 30% \u4f63\u91d1\u5e94\u8be5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u51cf\u5c11\u3002\u201d Valve \u6307\u51fa\uff0c\u81ea\u4ece\u201cSteam \u5f00\u59cb\u65f6\u5b83\u7684\u5e02\u573a\u4efd\u989d\u4e3a\u96f6\uff0c\u56e0\u6b64\u9664\u4e86\u5177\u6709\u7ade\u4e89\u529b\u7684\u4ef7\u683c\u4e4b\u5916\uff0c\u6ca1\u6709\u6743\u529b\u6536\u53d6\u4efb\u4f55\u8d39\u7528\u201d\u4ee5\u6765\uff0c\u5b83\u6ca1\u6709\u589e\u52a0\u57fa\u672c\u8d39\u7528\u3002\u76f8\u53cd\uff0c\u5728 2018 \u5e74\uff0cSteam \u964d\u4f4e\u4e86\u9ad8\u6536\u5165\u6e38\u620f\u7684\u8d39\u7528\uff0c\u8be5\u516c\u53f8\u8868\u793a\u6b64\u4e3e\u201c\u4e0e\u8d85\u7ade\u4e89\u4f63\u91d1\u76f8\u53cd\u201d\u3002\u5728\u8fd9\u91cc\uff0cValve \u63d0\u5230\u4e86 2008 \u5e74\u9488\u5bf9 Apple \u53ca\u5176 iPod/iTunes \u97f3\u4e50\u5e02\u573a\u7684\u53cd\u5784\u65ad\u6848\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u82f9\u679c\u6210\u529f\u5730\u6307\u51fa\uff0c\u5b83\u201c\u5728\u83b7\u5f97\u5784\u65ad\u6743\u4e4b\u524d\u548c\u4e4b\u540e\u90fd\u4fdd\u6301\u7740\u6bcf\u9996\u6b4c\u66f2 99 \u7f8e\u5206\u7684\u6210\u672c\u2014\u2014\u5e76\u4e14\u4ece\u672a\u6539\u53d8\u8fc7\u8fd9\u4e2a\u4ef7\u683c\uff0c\u5373\u4f7f\u662f\u5728\u5927\u5356\u5bb6\uff08\u4e9a\u9a6c\u900a\uff09\u8fdb\u5165\u5e02\u573a\u4e4b\u540e\u201d\u3002\nSteam \u7684 30% \u8d39\u7528\u9ad8\u4e8e Epic Games Store \u7b49\u7ade\u4e89\u5bf9\u624b\u7684\u8d39\u7528\u8fd9\u4e00\u4e8b\u5b9e\u53cd\u6620\u4e86\u201c\u636e\u79f0\u5e02\u573a\u8ba4\u4e3a Steam \u66f4\u80dc\u4e00\u7b79\u2026\u2026\u8fd9\u4e0e Valve \u80fd\u591f\u516c\u5e73\u5730\u8981\u6c42\u66f4\u9ad8\u4ef7\u683c\u7684\u80fd\u529b\u662f\u4e00\u81f4\u7684\uff0c\u201dValve \u8bf4\u3002\u4e3a\u4e86\u652f\u6301\u8fd9\u4e00\u70b9\uff0cValve \u5f15\u7528\u4e86 Wolfire \u81ea\u5df1\u8bc9\u8bbc\u4e2d\u7684\u53f0\u8bcd\uff0c\u63cf\u8ff0\u4e86\u5f53\u300a\u65e0\u4e3b\u4e4b\u5730 3\u300b\u5728 Steam \u4e0a\u4e0d\u53ef\u7528\u65f6\u6d88\u8d39\u8005\u7684\u5f3a\u70c8\u53cd\u5e94\u3002 \u201cSteam \u5e73\u53f0\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u4e2d\u95f4\u4eba\uff0c\u800c\u662f\u4e3a\u6e38\u620f\u73a9\u5bb6\u548c\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u771f\u6b63\u7684\u4ef7\u503c\uff0c\u201dValve \u5199\u9053\u3002 \u201c\u4e8b\u5b9e\u4e0a\uff0c\u636e\u79f0\u6e38\u620f\u73a9\u5bb6\u975e\u5e38\u770b\u91cd Steam\uff0c\u4ee5\u81f3\u4e8e Epic \u4e13\u95e8\u5728\u5176 Epic Games Store \u5e73\u53f0\u4e0a\u63d0\u4f9b\u6d41\u884c\u6e38\u620f\u2018\u5f15\u8d77\u4e86\u5f3a\u70c8\u53cd\u5bf9\u2019\u548c\u88ab\u8feb\u2018\u7b49\u5f85\u652f\u6301 Steam \u7684\u53d1\u884c\u7248\u6216\u4f7f\u7528 PC \u684c\u9762\u6e38\u620f\u5e73\u53f0\u2019\u7684\u6e38\u620f\u73a9\u5bb6\u2018\u547c\u5401\u62b5\u5236\u2019\u4ed6\u4eec\u4e0d\u559c\u6b22\u3002&#39;\u201d", "note_en": "Valve has issued a scathing response to  Wolfire&#39;s April lawsuit alleging anticompetitive monopoly practices on the Steam storefront. In that response, Valve argues that the suit should be dismissed because it &#34;fails to allege the most basic elements of an antitrust case.&#34;  Wolfire&#39;s case centers in part on the fact that Valve requires  free Steam Keys generated by developers using Valve&#39;s platform to be sold on other platforms at prices no lower than those offered on Steam. But Valve argues multiple times  in its filing that it has &#34;no obligation to distribute Steam Keys, let alone to allow developers to use Steam Keys to undercut their Steam prices in other stores.&#34;\n The free key system, Valve says, is intended as a way to &#34;[give] developers a free way to sell (or give away) a reasonable number of copies of their Steam-enabled games.&#34; With that in mind, restrictions on off-Steam pricing for those keys &#34;prevents developers from free-riding on Valve\u2019s investment in Steam.&#34; The pricing and quantity guidelines &#34;prevent developers from eroding large quantities of sales on Steam, which Valve bears 100% of the expense of creating and maintaining, yet provides to users for free.&#34;\n Valve goes on to say that the antitrust laws impose &#34;no obligation on Valve to facilitate competition with itself&#34; and points to supporting case-law to that effect. &#34;Nor does Valve have a duty to continue offering [free keys], to grant them in unlimited numbers, or allow developers to use them to sell Steam-enabled games in other stores cheaper than on Steam,&#34; Valve argues.\n Wolfire&#39;s lawsuit also alleges that Valve tries to enforce pricing parity not just for generated Steam keys but for non-Steam versions sold on other platforms. Valve, in its response, is not impressed with the factual basis for this allegation, which it says is tied to &#34;a single anecdote of Valve allegedly telling one unnamed developer it shouldn\u2019t give a non-Steam-enabled game free on Discord\u2019s competing platform if it charges Steam users $5 for the Steam-enabled version of that game on Steam.&#34; That narrow anecdote, Valve argues, &#34;fails to allege market-wide enforcement or plausibly lead to any effect on competition.&#34;\n     Wolfire&#39;s suit does present evidence that many games are priced at the same level on Steam and other storefronts that charge lower fees. But Valve argues that  this kind of pricing parity across storefronts is commonplace. Even if it wasn&#39;t, Valve says, the lawsuit is missing &#34;any factual allegation that Valve... did anything at all to affect, let alone coerce, the developers to sell at the same prices in two stores.&#34;  Valve also takes Wolfire to task for not presenting any facts to back up its assertion that Steam&#39;s 30 percent base cut for game sales is higher than what would be available in a more &#34;competitive&#34; market. Instead, Valve says, &#34;Plaintiffs can muster only a generalization that economics predicts Valve\u2019s 30 percent commission should have decreased over time.&#34;\n  Valve points out that it hasn&#39;t increased its base fee since &#34;Steam\u2019s beginning when it had zero market share, and hence no power to charge anything but a competitive price.&#34; On the contrary, in 2018, Steam  reduced its fees for high-earning games, a move the company suggests &#34;lay[s] out the opposite of a supracompetitive commission.&#34;\n Here, Valve points to  a 2008 antitrust case against Apple and its iPod/iTunes markets for music. In that case, Apple successfully pointed out that it had maintained the same 99 cent cost per song &#34;both before and after it obtained a monopoly\u2014and never changed that price, even after a large seller (Amazon) entered the market.&#34;\n The fact that Steam&#39;s 30 percent fee is higher than that of competitors like the Epic Games Store is a reflection that &#34;the market allegedly regards Steam as superior... which is consistent with Valve\u2019s ability to fairly command higher prices,&#34; Valve says. In support of this, Valve cites lines from Wolfire&#39;s own suit describing  consumer backlash when  Borderlands 3 was not available on Steam.\n &#34;The Steam platform is far more than a middleman but offers real value to gamers and developers,&#34; Valve writes. &#34;Indeed, gamers allegedly prize Steam so much that Epic\u2019s offering popular games exclusively on its Epic Games Store platform &#39;caused backlash&#39; and &#39;calls for boycotts&#39; from gamers forced to &#39;wait for a Steam-enabled release or use a PC Desktop Gaming Platform they do not prefer.&#39;&#34;", "posttime": "2021-07-31 00:42:56", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "rust,valve,issues,steam", "title": "Valve \u5c31 Steam \u53cd\u5784\u65ad\u6848\u80cc\u540e\u7684\u4e8b\u5b9e\u53d1\u51fa\u4e25\u5389\u7b54\u590d", "title_en": "Valve issues scathing reply over the facts behind a Steam antitrust case", "transed": 1, "url": "https://arstechnica.com/gaming/2021/07/valve-issues-scathing-reply-over-the-facts-behind-a-steam-antitrust-case/", "via": "", "real_tags": ["rust", "valve", "issues", "steam"]}, {"category": "", "categoryclass": "", "imagename": "2063a8b8ab441c056ef512db64933e8a.jpg", "infoid": 1070675, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u968f\u7740\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u5458\u5de5\u4e0d\u5f97\u4e0d\u4e3a\u4e92\u8054\u7f51\u8d26\u5355\u4e70\u5355\uff0c\u8bb8\u591a\u5458\u5de5\u8ba4\u4e3a\u9700\u8981\u505a\u51fa\u4e00\u4e9b\u6539\u53d8\u3002\u5728\u4f20\u7edf\u529e\u516c\u5ba4\u4e2d\uff0c\u5458\u5de5\u901a\u8fc7\u516c\u53f8\u63d0\u4f9b\u7684\u4e92\u8054\u7f51\u8fde\u63a5\u767b\u5f55\u5de5\u4f5c\u65e5\u3002\u7531\u4e8e COVID-19 \u800c\u8f6c\u5411\u8fdc\u7a0b\u5de5\u4f5c\uff0c\u8bb8\u591a\u5458\u5de5\u4e0d\u5f97\u4e0d\u4e3a\u5c65\u884c\u5176\u804c\u4e1a\u804c\u8d23\u6240\u9700\u7684\u4e92\u8054\u7f51\u63a5\u5165\u4e70\u5355\u3002\u5468\u4e09\uff0cAppNeta \u53d1\u5e03\u4e86\u5173\u4e8e WFH \u76f8\u5173\u4e92\u8054\u7f51\u201c\u75db\u70b9\u201d\u7684\u201c\u4e92\u8054\u7f51\u672a\u6765\u5c55\u671b\u201d\u62a5\u544a\uff0c\u4ee5\u53ca\u5173\u4e8e\u8c01\u5e94\u8be5\u4e3a\u4e0e\u5de5\u4f5c\u76f8\u5173\u7684\u8fde\u63a5\u4e70\u5355\u7684\u770b\u6cd5\u7b49\u7b49\u3002\u8be5\u62a5\u544a\u7684\u4e00\u90e8\u5206\u4e13\u95e8\u9488\u5bf9\u201c\u8fde\u63a5\u707e\u96be\u201d\uff0c\u5e76\u9610\u660e\u4e86\u81ea\u53bb\u5e74 3 \u6708\u8f6c\u5411\u8fdc\u7a0b\u5de5\u4f5c\u4ee5\u6765\uff0c\u7531\u4e8e\u4e92\u8054\u7f51\u670d\u52a1\u6b20\u4f73\u800c\u5bfc\u81f4\u4eba\u4eec\u7ecf\u5386\u7684\u4e2d\u65ad\u3002\u5728\u6b64\u671f\u95f4\uff0c\u7f51\u7ad9\u52a0\u8f7d\u901f\u5ea6\u7f13\u6162\u662f\u8fde\u63a5\u6295\u8bc9\u6700\u591a\u7684\u95ee\u9898 (49%)\uff0c\u5176\u6b21\u662f\u201c\u89c6\u9891\u901a\u8bdd\u51bb\u7ed3\u201d(34%) \u548c\u670d\u52a1\u4e2d\u65ad (33%)\u3002\u6d89\u53ca\u4e92\u8054\u7f51\u63d0\u4f9b\u5546 (29%) \u548c\u6d41\u5a92\u4f53\u5185\u5bb9 (25%) \u7684\u95ee\u9898\u6309\u987a\u5e8f\u6392\u5728\u524d\u4e94\u540d\u3002 \u201c\u5f53\u534f\u4f5c\u662f\u5f02\u6b65\u7684\uff08\u7535\u5b50\u90ae\u4ef6\u3001\u8bed\u97f3\u90ae\u4ef6\u7b49\uff09\u65f6\uff0c\u8fde\u63a5\u7684\u8d28\u91cf\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u95ee\u9898\u2014\u2014\u5373\u4f7f\u662f\u96f6\u661f\u7684\u4e2d\u65ad\uff0c\u867d\u7136\u4ee4\u4eba\u8ba8\u538c\uff0c\u4f46\u4e5f\u4e0d\u662f\u5b9e\u8d28\u6027\u7684\u969c\u788d\u3002\u8fd9\u5b8c\u5168\u6539\u53d8\u4e86\u2014\u2014\u5f53\u6d89\u53ca\u5230\u865a\u62df\u534f\u4f5c\u65f6\uff0c\u5b83\u8981\u4e48\u662f\u5b9e\u65f6\u7684\uff0c\u8981\u4e48\u5df2\u7ecf\u8fc7\u65f6\uff0c\u201dAppNeta \u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u7279\u00b7\u53f2\u8482\u6587\u65af (Matt Stevens) \u8bf4\u3002\u8be5\u8c03\u67e5\u8981\u6c42\u53d7\u8bbf\u8005\u786e\u5b9a\u7531\u4e8e\u4e92\u8054\u7f51\u8fde\u63a5\u6311\u6218\u800c\u4e0d\u5f97\u4e0d\u8fdb\u884c\u7684\u7279\u5b9a\u573a\u666f\u6216\u66f4\u65b0\u3002\u5927\u7ea6\u4e09\u5206\u4e4b\u4e00\u7684\u53d7\u8bbf\u8005 (37%) \u8868\u793a\u4ed6\u4eec\u201c\u7531\u4e8e\u51bb\u7ed3\u6216\u97f3\u9891\u4e0d\u4f73\u800c\u4e0d\u5f97\u4e0d\u5173\u95ed\u89c6\u9891\u901a\u8bdd\u201d\uff0c28% \u7684\u4eba\u8868\u793a\u4ed6\u4eec\u5df2\u7ecf\u66f4\u65b0\u4e86\u4ed6\u4eec\u7684\u201c\u4e92\u8054\u7f51\u76f8\u5173\u8bbe\u5907\u201d\uff0c20% \u7684\u4eba\u66f4\u65b0\u4e86\u4ed6\u4eec\u7684\u63d0\u4f9b\u5546\u8ba1\u5212\u6216\u4e92\u8054\u7f51\u5305\u3002\u62a5\u544a\u79f0\uff0c\u7edd\u5927\u591a\u6570\u53d7\u8bbf\u8005 (79%) \u8868\u793a\u4ed6\u4eec\u4e3a\u4e92\u8054\u7f51\u4ed8\u8d39\uff0c\u800c\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u4f1a\u4e3a\u4f34\u4fa3 (10%) \u6216\u7236\u6bcd (5%) \u4e70\u5355\u3002\u653f\u5e9c\u4e3a 2% \u7684\u53d7\u8bbf\u8005\u63d0\u4f9b\u4e92\u8054\u7f51\u63a5\u5165\u670d\u52a1\uff0c\u8fd9\u4f7f\u8868\u793a\u5176\u516c\u53f8\u6216\u96c7\u4e3b\u9009\u62e9\u4e92\u8054\u7f51\u9009\u9879\u5361\u7684\u53d7\u8bbf\u8005\u6570\u91cf (1%) \u7ffb\u4e86\u4e00\u756a\u3002\u6709\u8da3\u7684\u662f\uff0c38% \u7684\u53d7\u8bbf\u8005\u8868\u793a\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u201c\u5728\u5bb6\u4e2d\u51fa\u4e8e\u5de5\u4f5c\u76ee\u7684\u4f7f\u7528\u4e92\u8054\u7f51\u201d\uff0c\u4ed6\u4eec\u7684\u96c7\u4e3b\u5e94\u8be5\u5bf9\u8fde\u63a5\u627f\u62c5\u91d1\u94b1\u8d23\u4efb\u3002\u4e09\u5206\u4e4b\u4e00\u7684\u53d7\u8bbf\u8005 (33%) \u8ba4\u4e3a\u4ed6\u4eec\u5e94\u8be5\u4eb2\u81ea\u4e70\u5355\uff0c24% \u7684\u4eba\u8868\u793a\u4ed6\u4eec\u5728\u5bb6\u5de5\u4f5c\u65f6\u4e0d\u9700\u8981\u4e0a\u7f51\uff0c\u540c\u6837\u6570\u91cf\u7684\u53d7\u8bbf\u8005\u8ba4\u4e3a\u653f\u5e9c (3%) \u6216\u4e1a\u4e3b/\u623f\u4e1c ( 3%) \u5e94\u652f\u4ed8\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u7684\u4e92\u8054\u7f51\u8d39\u7528\u3002\n\u6709\u8da3\u7684\u662f\uff0c\u5927\u591a\u6570\u53d7\u8bbf\u8005 (61%) \u8868\u793a\uff0c\u7531\u4e8e COVID-19 \u548c\u8f6c\u5411\u8fdc\u7a0b\u5de5\u4f5c\uff0c\u4ed6\u4eec\u5bf9\u201c\u8c01\u5e94\u8be5\u8d1f\u8d23\u652f\u4ed8\u4e92\u8054\u7f51\u8d39\u7528\u201d\u7684\u770b\u6cd5\u6ca1\u6709\u6539\u53d8\u3002\u5728\u8ba4\u4e3a\u96c7\u4e3b\u5e94\u8be5\u652f\u4ed8\u5bb6\u5ead\u4e92\u8054\u7f51\u8d39\u7528\u7684\u4eba\u4e2d\uff0c26% \u7684\u4eba\u8ba4\u4e3a\u96c7\u4e3b\u5e94\u8be5\u76f4\u63a5\u652f\u4ed8\u90e8\u5206\u8d26\u5355\uff0c40% \u7684\u4eba\u8ba4\u4e3a\u96c7\u4e3b\u5e94\u8be5\u76f4\u63a5\u652f\u4ed8\u5168\u90e8\u8d26\u5355\uff0c34% \u7684\u4eba\u8ba4\u4e3a\u8fd9\u5e94\u8be5\u901a\u8fc7\u5e38\u89c4\u6d25\u8d34\u6765\u652f\u4ed8\u3002\u53f2\u8482\u6587\u65af\u8868\u793a\uff0c\u4ed6\u76f8\u4fe1\u672a\u6765\u4f1a\u6709\u66f4\u591a\u96c7\u4e3b\u4e3a\u5458\u5de5\u652f\u4ed8\u4e92\u8054\u7f51\u4fdd\u9669\u4f5c\u4e3a\u5c31\u4e1a\u6d25\u8d34\uff0c\u5e76\u8865\u5145\u8bf4\uff0c\u6709\u8bb8\u591a\u201c\u96c7\u4e3b\u53ef\u4ee5\u5728\u8bb8\u591a\u65b9\u9762\u505a\u51fa\u8d21\u732e\uff0c\u8ba9\u5458\u5de5\u66f4\u8f7b\u677e\u5730\u5de5\u4f5c\u201d\uff0c\u4f8b\u5982\u534f\u52a9\u652f\u4ed8\u80b2\u513f\u8d39\u7528\uff0c\u201c\u62b5\u6d88\u901a\u52e4\u6210\u672c\u201d\u6216\u4e0e\u5176\u4ed6\u5bb6\u5ead\u529e\u516c\u5ba4\u652f\u51fa\u76f8\u5173\u7684\u8d21\u732e\u3002\u4ed6\u8bf4\uff1a\u201c\u5b83\u4eec\u90fd\u6709\u4f18\u70b9\uff0c\u9700\u8981\u5728\u7279\u5b9a\u516c\u53f8\u7684\u80cc\u666f\u4e0b\u4ee5\u53ca\u5458\u5de5\u7684\u7ec4\u5408\u53ca\u5176\u4e2a\u4eba\u60c5\u51b5\u4e0b\u8fdb\u884c\u5ba1\u67e5\u3002\u201d\u901a\u8fc7\u8fd9\u4e9b\u6709\u5173\u9879\u76ee\u7ba1\u7406\u3001\u9884\u7b97\u548c\u5e94\u5bf9\u65e5\u5e38\u6311\u6218\u7684\u6280\u5de7\uff0c\u53d1\u73b0 IT \u9886\u5bfc\u529b\u6210\u529f\u7684\u79d8\u8bc0\u3002\u5468\u4e8c\u548c\u5468\u56db\u4ea4\u4ed8 \u4eca\u5929\u6ce8\u518c", "note_en": "With the switch to remote work, employees have been left to foot the internet bill and many workers believe some changes are in order.\n  In the traditional office, employees log on for the workday via company-provided internet connectivity. With the switch to remote work due to COVID-19, many employees have been left to foot the bill for the internet access necessary to fulfill their occupational duties. On Wednesday, AppNeta published its &#34; Future of the Internet Outlook&#34; report about WFH-related internet &#34;pain points,&#34; sentiments regarding who should foot the bill for work-related connectivity and more.\n A portion of the report is dedicated to the &#34;connectivity catastrophe&#34; and sheds light on the disruptions people have experienced due to less-than-optimal internet service since the switch to remote work last March. During this time period, slow website loading times is the top connectivity complaint (49%) followed by &#34;video calls freezing&#34; (34%) and service outages (33%). Issues involving internet providers (29%) and streaming content (25%) round out the top five, in order.\n &#34;When collaboration was asynchronous (email, voice mail, etc.), the quality of the connectivity wasn&#39;t really an issue\u2014even sporadic outages, while annoying, were not material blockers.\u00a0 That&#39;s completely changed\u2014when it comes to virtual collaboration, it&#39;s either real-time or it&#39;s obsolescence,&#34; said Matt Stevens, AppNeta CEO.\n   The survey asked respondents to identify specific scenarios or updates they&#39;ve had to make due to internet connectivity challenges. About one-third of respondents (37%) said they &#34;had to go off of video on calls due to freezing or poor audio,&#34; 28% said they&#39;d updated their &#34;internet-related equipment&#34; and 20% updated their provider plan or internet package.\n  The vast majority of respondents (79%) said they pay for their internet, according to the report, while a partner (10%) or parents (5%) are footing the bill in other instances. The government covers internet access for 2% of respondents, doubling the number of respondents who said their company or employer picks up their internet tab (1%).\n Interestingly, 38% of respondents said their employer should be monetarily responsible for connectivity if a person uses &#34;the internet at home for work purposes.&#34; One-third of respondents (33%) believed they personally should foot the bill, 24% said they did not require internet access while working at home, and the same number of respondents believed the government (3%) or building owners/landlords (3%) should cover internet costs in these situations.\n  Interestingly, the majority of respondents (61%) said their opinion about &#34;who should be responsible for paying for the internet&#34; has not changed due to COVID-19 and the switch to remote work. Among people who believe employers should cover home internet costs, 26% believed employers should pay some of the bill directly, 40% believed employers should pay the full bill directly and 34% felt this should be covered via a routine stipend.\n In the future, Stevens said he believes more employers will pay for employees&#39; internet coverage as an employment perk, adding that there are many &#34;dimensions where employers can contribute to make it easier for their employees to work,&#34; such as assisting with childcare costs, &#34;offsetting commuting costs&#34; or making contributions related to other home office expenditures.\n &#34;They all have merit and need to be examined within the context of a given firm and the mix of employees and their individual circumstances,&#34; he said.\n Discover the secrets to IT leadership success with these tips on project management, budgets, and dealing with day-to-day challenges. Delivered Tuesdays and Thursdays\n        Sign up today", "posttime": "2021-07-31 00:42:29", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8fdc\u7a0b\u5de5\u4f5c,\u5e94\u8be5,pay,\u4e92\u8054\u7f51", "title": "\u96c7\u4e3b\u5e94\u8be5\u5728\u8fdc\u7a0b\u5de5\u4f5c\u671f\u95f4\u652f\u4ed8\u5bb6\u5ead\u4e92\u8054\u7f51\u8d39\u7528\u5417\uff1f", "title_en": "Should employers pay for home internet during remote work?", "transed": 1, "url": "https://www.techrepublic.com/article/should-employers-pay-for-home-internet-during-remote-work/", "via": "", "real_tags": ["\u8fdc\u7a0b\u5de5\u4f5c", "\u5e94\u8be5", "pay", "\u4e92\u8054\u7f51"]}, {"category": "", "categoryclass": "", "imagename": "3e7d3dcddf12c7215c845d537e72dd20.jpg", "infoid": 1070674, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u5468\u56db\u665a\u4e0a\u5728\u7ebf\u53d1\u5e03\u7684\u9884\u5370\u672c\u4e2d\uff0c\u8c37\u6b4c\u7684\u7814\u7a76\u4eba\u5458\u4e0e\u65af\u5766\u798f\u5927\u5b66\u3001\u666e\u6797\u65af\u987f\u5927\u5b66\u548c\u5176\u4ed6\u5927\u5b66\u7684\u7269\u7406\u5b66\u5bb6\u5408\u4f5c\u8868\u793a\uff0c\u4ed6\u4eec\u9996\u6b21\u4f7f\u7528\u8c37\u6b4c\u7684\u91cf\u5b50\u8ba1\u7b97\u673a\u5c55\u793a\u4e86\u771f\u6b63\u7684\u201c\u65f6\u95f4\u6676\u4f53\u201d\u3002\u7269\u7406\u5b66\u5bb6\u591a\u5e74\u6765\u4e00\u76f4\u52aa\u529b\u5b9e\u73b0\u7684\u4e00\u4e2a\u65b0\u7684\u7269\u8d28\u9636\u6bb5\uff0c\u65f6\u95f4\u6676\u4f53\u662f\u4e00\u79cd\u7269\u4f53\uff0c\u5b83\u7684\u90e8\u5206\u4ee5\u6709\u89c4\u5f8b\u7684\u3001\u91cd\u590d\u7684\u5faa\u73af\u8fd0\u52a8\uff0c\u5728\u4e0d\u71c3\u70e7\u4efb\u4f55\u80fd\u91cf\u7684\u60c5\u51b5\u4e0b\u7ef4\u6301\u8fd9\u79cd\u4e0d\u65ad\u53d8\u5316\u3002 \u201c\u7ed3\u679c\u662f\u60ca\u4eba\u7684\uff1a\u4f60\u9003\u907f\u4e86\u70ed\u529b\u5b66\u7b2c\u4e8c\u5b9a\u5f8b\uff0c\u201d\u5408\u8457\u8005\u3001\u5fb7\u56fd\u5fb7\u7d2f\u65af\u987f\u9a6c\u514b\u65af\u666e\u6717\u514b\u590d\u6742\u7cfb\u7edf\u7269\u7406\u7814\u7a76\u6240\u6240\u957f Roderich Moessner \u8bf4\u3002\u8fd9\u5c31\u662f\u8bf4\u65e0\u5e8f\u603b\u662f\u4f1a\u589e\u52a0\u7684\u5b9a\u5f8b\u3002\u65f6\u95f4\u6676\u4f53\u4e5f\u662f\u7b2c\u4e00\u4e2a\u81ea\u53d1\u6253\u7834\u201c\u65f6\u95f4\u5e73\u79fb\u5bf9\u79f0\u6027\u201d\u7684\u7269\u4f53\uff0c\u8fd9\u662f\u4e00\u4e2a\u7a33\u5b9a\u7684\u7269\u4f53\u5728\u6574\u4e2a\u65f6\u95f4\u91cc\u4fdd\u6301\u4e0d\u53d8\u7684\u901a\u5e38\u89c4\u5219\u3002\u65f6\u95f4\u6c34\u6676\u65e2\u7a33\u5b9a\u53c8\u4e0d\u65ad\u53d8\u5316\uff0c\u7279\u6b8a\u65f6\u523b\u4ee5\u5468\u671f\u6027\u7684\u65f6\u95f4\u95f4\u9694\u51fa\u73b0\u3002\u65f6\u95f4\u6676\u4f53\u662f\u7269\u8d28\u76f8\u7684\u65b0\u7c7b\u522b\uff0c\u6269\u5c55\u4e86\u76f8\u7684\u5b9a\u4e49\u3002\u6240\u6709\u5176\u4ed6\u5df2\u77e5\u76f8\uff0c\u5982\u6c34\u6216\u51b0\uff0c\u90fd\u5904\u4e8e\u70ed\u5e73\u8861\u72b6\u6001\uff1a\u5b83\u4eec\u7684\u7ec4\u6210\u539f\u5b50\u5df2\u7ecf\u8fdb\u5165\u73af\u5883\u6e29\u5ea6\u5141\u8bb8\u7684\u6700\u4f4e\u80fd\u91cf\u72b6\u6001\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u7279\u6027\u4e0d\u968f\u65f6\u95f4\u53d8\u5316\u3002\u65f6\u95f4\u6676\u4f53\u662f\u7b2c\u4e00\u4e2a\u201c\u5931\u8861\u201d\u76f8\uff1a\u5c3d\u7ba1\u5904\u4e8e\u6fc0\u53d1\u548c\u6f14\u5316\u72b6\u6001\uff0c\u4f46\u5b83\u5177\u6709\u6709\u5e8f\u548c\u5b8c\u7f8e\u7684\u7a33\u5b9a\u6027\u3002 \u201c\u8fd9\u5c31\u662f\u6211\u4eec\u73b0\u5728\u6b63\u5728\u7814\u7a76\u7684\u4e00\u4e2a\u5168\u65b0\u4e14\u4ee4\u4eba\u5174\u594b\u7684\u7a7a\u95f4\uff0c\u201d\u73b0\u4efb\u804c\u65af\u5766\u798f\u5927\u5b66\u7684\u51dd\u805a\u6001\u7269\u7406\u5b66\u5bb6 Vedika Khemani \u8bf4\uff0c\u5979\u5728\u7814\u7a76\u751f\u671f\u95f4\u5171\u540c\u53d1\u73b0\u4e86\u65b0\u76f8\uff0c\u5e76\u4e0e\u4ed6\u4eba\u5408\u7740\u4e86\u8fd9\u7bc7\u65b0\u8bba\u6587\u3002 .\u666e\u6797\u65af\u987f\u5927\u5b66\u7684 Khemani\u3001Moessner\u3001Shivaji Sondhi \u548c\u82f1\u56fd\u62c9\u592b\u5821\u5927\u5b66\u7684 Achilleas Lazarides \u4e8e 2015 \u5e74\u53d1\u73b0\u4e86\u8be5\u76f8\u7684\u53ef\u80fd\u6027\u5e76\u63cf\u8ff0\u4e86\u5176\u5173\u952e\u7279\u6027\uff1b\u4e0d\u4e45\u4e4b\u540e\uff0c\u7531\u5fae\u8f6f Q \u7ad9\u7684 Chetan Nayak \u548c\u52a0\u5dde\u5927\u5b66\u5723\u5df4\u5df4\u62c9\u5206\u6821\u9886\u5bfc\u7684\u4e00\u7ec4\u7ade\u4e89\u7269\u7406\u5b66\u5bb6\u5c06\u5176\u786e\u5b9a\u4e3a\u65f6\u95f4\u6676\u4f53\u3002\n\u5728\u8fc7\u53bb\u7684\u4e94\u5e74\u91cc\uff0c\u7814\u7a76\u4eba\u5458\u7ade\u76f8\u521b\u9020\u65f6\u95f4\u6c34\u6676\uff0c\u4f46\u4e4b\u524d\u7684\u6f14\u793a\u867d\u7136\u6309\u4ed6\u4eec\u81ea\u5df1\u7684\u6761\u4ef6\u53d6\u5f97\u4e86\u6210\u529f\uff0c\u4f46\u672a\u80fd\u6ee1\u8db3\u786e\u5b9a\u65f6\u95f4\u6c34\u6676\u5b58\u5728\u6240\u9700\u7684\u6240\u6709\u6807\u51c6\u3002 \u201c\u6709\u5145\u5206\u7684\u7406\u7531\u8ba4\u4e3a\uff0c\u8fd9\u4e9b\u5b9e\u9a8c\u90fd\u6ca1\u6709\u5b8c\u5168\u6210\u529f\uff0c\u50cf [Google \u7684] \u8fd9\u6837\u7684\u91cf\u5b50\u8ba1\u7b97\u673a\u5c06\u7279\u522b\u9002\u5408\u6bd4\u90a3\u4e9b\u65e9\u671f\u7684\u5b9e\u9a8c\u505a\u5f97\u66f4\u597d\uff0c\u201d\u7f8e\u56fd\u5927\u5b66\u51dd\u805a\u6001\u7269\u7406\u5b66\u5bb6\u7ea6\u7ff0\u67e5\u5c14\u514b\u8bf4\u3002\u6ca1\u6709\u53c2\u4e0e\u8fd9\u9879\u65b0\u5de5\u4f5c\u7684\u725b\u6d25\u3002\u8c37\u6b4c\u7684\u91cf\u5b50\u8ba1\u7b97\u56e2\u961f\u5728 2019 \u5e74\u9996\u6b21\u8fdb\u884c\u4e86\u666e\u901a\u8ba1\u7b97\u673a\u5728\u5b9e\u9645\u65f6\u95f4\u5185\u65e0\u6cd5\u5b8c\u6210\u7684\u8ba1\u7b97\uff0c\u4ece\u800c\u6210\u4e3a\u5934\u6761\u65b0\u95fb\u3002\u7136\u800c\uff0c\u8be5\u4efb\u52a1\u662f\u4e3a\u4e86\u663e\u793a\u52a0\u901f\u800c\u8bbe\u8ba1\u7684\uff0c\u5e76\u6ca1\u6709\u5185\u5728\u7684\u5174\u8da3\u3002\u65b0\u7684\u65f6\u95f4\u6676\u4f53\u6f14\u793a\u6807\u5fd7\u7740\u91cf\u5b50\u8ba1\u7b97\u673a\u7b2c\u4e00\u6b21\u627e\u5230\u4e86\u6709\u62a5\u916c\u7684\u5de5\u4f5c\u3002 \u201c\u8fd9\u662f\u5bf9 [Google] \u5904\u7406\u5668\u7684\u7edd\u5999\u4f7f\u7528\uff0c\u201dNayak \u8bf4\u3002\u51ed\u501f\u4eca\u5929\u5df2\u63d0\u4ea4\u51fa\u7248\u7684\u9884\u5370\u672c\u548c\u5176\u4ed6\u8fd1\u671f\u6210\u679c\uff0c\u7814\u7a76\u4eba\u5458\u5b9e\u73b0\u4e86\u5bf9\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u6700\u521d\u5e0c\u671b\u3002\u7269\u7406\u5b66\u5bb6\u7406\u67e5\u5fb7\u00b7\u8d39\u66fc (Richard Feynman) \u5728 1982 \u5e74\u63d0\u51fa\u8fd9\u4e9b\u8bbe\u5907\u7684\u8bba\u6587\u4e2d\u8ba4\u4e3a\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u6765\u6a21\u62df\u4efb\u4f55\u53ef\u4ee5\u60f3\u8c61\u7684\u91cf\u5b50\u7cfb\u7edf\u7684\u7c92\u5b50\u3002\u65f6\u95f4\u6c34\u6676\u4f53\u73b0\u4e86\u8fd9\u4e00\u613f\u666f\u3002\u9274\u4e8e\u5176\u5fae\u5999\u6210\u5206\u7684\u590d\u6742\u7ec4\u5408\uff0c\u5b83\u662f\u4e00\u79cd\u81ea\u7136\u672c\u8eab\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u521b\u9020\u7684\u91cf\u5b50\u7269\u4f53\u3002\u5927\u81ea\u7136\u6700\u4ee4\u4eba\u8d39\u89e3\u7684\u6cd5\u5219\u6fc0\u53d1\u4e86\u60f3\u8c61\u529b\uff0c\u521b\u9020\u4e86\u914d\u65b9\u3002\u8bfa\u8d1d\u5c14\u5956\u83b7\u5f97\u8005\u7269\u7406\u5b66\u5bb6\u5f17\u5170\u514b\u00b7\u7ef4\u5c14\u5207\u514b (Frank Wilczek) \u4e8e 2012 \u5e74\u6784\u601d\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u5f53\u65f6\u4ed6\u6b63\u5728\u6559\u6388\u4e00\u95e8\u5173\u4e8e\u666e\u901a\uff08\u7a7a\u95f4\uff09\u6676\u4f53\u7684\u8bfe\u7a0b\u3002 \u201c\u5982\u679c\u4f60\u8003\u8651\u592a\u7a7a\u4e2d\u7684\u6676\u4f53\uff0c\u90a3\u4e48\u8003\u8651\u6676\u4f53\u884c\u4e3a\u7684\u65f6\u95f4\u5206\u7c7b\u4e5f\u662f\u5f88\u81ea\u7136\u7684\uff0c\u201d\u4e0d\u4e45\u4e4b\u540e\u4ed6\u544a\u8bc9\u672c\u6742\u5fd7\u3002\u8003\u8651\u94bb\u77f3\uff0c\u4e00\u56e2\u78b3\u539f\u5b50\u7684\u7ed3\u6676\u76f8\u3002\u56e2\u5757\u5728\u7a7a\u95f4\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u7531\u76f8\u540c\u7684\u65b9\u7a0b\u63a7\u5236\uff0c\u4f46\u5b83\u91c7\u7528\u5177\u6709\u5468\u671f\u6027\u7a7a\u95f4\u53d8\u5316\u7684\u5f62\u5f0f\uff0c\u539f\u5b50\u4f4d\u4e8e\u6676\u683c\u70b9\u3002\u7269\u7406\u5b66\u5bb6\u8bf4\u5b83\u201c\u81ea\u53d1\u5730\u6253\u7834\u4e86\u7a7a\u95f4\u5e73\u79fb\u5bf9\u79f0\u6027\u201d\u3002\u53ea\u6709\u6700\u5c0f\u80fd\u91cf\u5e73\u8861\u72b6\u6001\u624d\u4f1a\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u81ea\u53d1\u5730\u6253\u7834\u7a7a\u95f4\u5bf9\u79f0\u6027\u3002\nWilczek \u8bbe\u60f3\u4e86\u4e00\u4e2a\u5e73\u8861\u7684\u591a\u90e8\u5206\u7269\u4f53\uff0c\u5f88\u50cf\u94bb\u77f3\u3002\u4f46\u662f\u8fd9\u4e2a\u7269\u4f53\u6253\u7834\u4e86\u65f6\u95f4\u5e73\u79fb\u5bf9\u79f0\u6027\uff1a\u5b83\u7ecf\u5386\u4e86\u5468\u671f\u6027\u8fd0\u52a8\uff0c\u4ee5\u89c4\u5219\u7684\u95f4\u9694\u8fd4\u56de\u5230\u5b83\u7684\u521d\u59cb\u914d\u7f6e\u3002 Wilczek \u63d0\u51fa\u7684\u65f6\u95f4\u6676\u4f53\u4e0e\u6302\u949f\u7b49\u4e5f\u6709\u5f88\u5927\u7684\u4e0d\u540c\u2014\u2014\u6302\u949f\u662f\u4e00\u4e2a\u4e5f\u7ecf\u5386\u5468\u671f\u6027\u8fd0\u52a8\u7684\u7269\u4f53\u3002\u65f6\u949f\u6307\u9488\u6d88\u8017\u80fd\u91cf\u5e76\u5728\u7535\u6c60\u8017\u5c3d\u65f6\u505c\u6b62\u3002 Wilczekian \u65f6\u95f4\u6676\u4f53\u4e0d\u9700\u8981\u8f93\u5165\u5e76\u65e0\u9650\u671f\u5730\u7ee7\u7eed\uff0c\u56e0\u4e3a\u7cfb\u7edf\u5904\u4e8e\u8d85\u7a33\u5b9a\u5e73\u8861\u72b6\u6001\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u96be\u4ee5\u7f6e\u4fe1\uff0c\u90a3\u5c31\u662f\uff1a\u5728\u7ecf\u5386\u4e86\u5f88\u591a\u6fc0\u52a8\u548c\u4e89\u8bae\u4e4b\u540e\uff0c2014 \u5e74\u7684\u4e00\u9879\u8bc1\u660e\u8868\u660e\uff0c\u5a01\u5c14\u5207\u514b\u7684\u5904\u65b9\u5931\u8d25\u4e86\uff0c\u5c31\u50cf\u5386\u53f2\u4e0a\u8bbe\u60f3\u7684\u6240\u6709\u5176\u4ed6\u6c38\u52a8\u673a\u4e00\u6837\u3002\u90a3\u4e00\u5e74\uff0c\u666e\u6797\u65af\u987f\u7684\u7814\u7a76\u4eba\u5458\u6b63\u5728\u8003\u8651\u5176\u4ed6\u4e8b\u60c5\u3002 Khemani \u548c\u5979\u7684\u535a\u58eb\u5bfc\u5e08 Sondhi \u6b63\u5728\u7814\u7a76\u591a\u4f53\u5b9a\u4f4d\uff0c\u8fd9\u662f\u5b89\u5fb7\u68ee\u5b9a\u4f4d\u7684\u5ef6\u4f38\uff0c\u8fd9\u662f 1958 \u5e74\u8bfa\u8d1d\u5c14\u5956\u83b7\u5f97\u8005\u53d1\u73b0\u7535\u5b50\u53ef\u4ee5\u5361\u5728\u539f\u5730\uff0c\u5c31\u50cf\u5728\u5d0e\u5c96\u666f\u89c2\u7684\u7f1d\u9699\u4e2d\u4e00\u6837\u3002\u4e00\u4e2a\u7535\u5b50\u6700\u597d\u88ab\u63cf\u7ed8\u6210\u4e00\u4e2a\u6ce2\uff0c\u5b83\u5728\u4e0d\u540c\u5730\u65b9\u7684\u9ad8\u5ea6\u7ed9\u51fa\u4e86\u5728\u90a3\u91cc\u68c0\u6d4b\u5230\u7c92\u5b50\u7684\u53ef\u80fd\u6027\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6ce2\u6d6a\u81ea\u7136\u5730\u6269\u6563\u5f00\u6765\u3002\u4f46\u662f\u83f2\u5229\u666e\u00b7\u5b89\u5fb7\u68ee\u53d1\u73b0\u968f\u673a\u6027\u2014\u2014\u4f8b\u5982\u6676\u683c\u4e2d\u968f\u673a\u7f3a\u9677\u7684\u5b58\u5728\u2014\u2014\u4f1a\u5bfc\u81f4\u7535\u5b50\u6ce2\u5206\u88c2\uff0c\u7834\u574f\u6027\u5730\u5e72\u6270\u81ea\u8eab\uff0c\u5e76\u5728\u9664\u5c0f\u533a\u57df\u4e4b\u5916\u7684\u4efb\u4f55\u5730\u65b9\u62b5\u6d88\u3002\u7c92\u5b50\u5b9a\u4f4d\u3002\u51e0\u5341\u5e74\u6765\uff0c\u4eba\u4eec\u4e00\u76f4\u8ba4\u4e3a\u591a\u4e2a\u7c92\u5b50\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u4f1a\u7834\u574f\u5e72\u6270\u6548\u5e94\u3002\u4f46\u5728 2005 \u5e74\uff0c\u666e\u6797\u65af\u987f\u5927\u5b66\u548c\u54e5\u4f26\u6bd4\u4e9a\u5927\u5b66\u7684\u4e09\u4f4d\u7269\u7406\u5b66\u5bb6\u8868\u660e\uff0c\u4e00\u7ef4\u91cf\u5b50\u7c92\u5b50\u94fe\u53ef\u4ee5\u7ecf\u5386\u591a\u4f53\u5c40\u57df\u5316\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ed6\u4eec\u90fd\u9677\u5165\u4e86\u4e00\u4e2a\u56fa\u5b9a\u7684\u72b6\u6001\u3002\u8fd9\u79cd\u73b0\u8c61\u5c06\u6210\u4e3a\u65f6\u95f4\u6676\u4f53\u7684\u7b2c\u4e00\u4e2a\u6210\u5206\u3002\u60f3\u8c61\u4e00\u6392\u7c92\u5b50\uff0c\u6bcf\u4e2a\u7c92\u5b50\u90fd\u6709\u4e00\u4e2a\u5411\u4e0a\u3001\u5411\u4e0b\u6216\u4e24\u4e2a\u65b9\u5411\u90fd\u6709\u53ef\u80fd\u6307\u5411\u7684\u78c1\u6027\u65b9\u5411\uff08\u6216\u201c\u81ea\u65cb\u201d\uff09\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u6700\u521d\u7684\u56db\u6b21\u65cb\u8f6c\u6700\u521d\u6307\u5411\u4e0a\u3001\u4e0b\u3001\u4e0b\u548c\u4e0a\u3002\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u81ea\u65cb\u5c06\u5728\u91cf\u5b50\u529b\u5b66\u4e0a\u6ce2\u52a8\u5e76\u5feb\u901f\u5bf9\u9f50\u3002\u4f46\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u968f\u673a\u5e72\u6270\u4f1a\u5bfc\u81f4\u8fd9\u6392\u7c92\u5b50\u5361\u5728\u5b83\u4eec\u7684\u7279\u5b9a\u914d\u7f6e\u4e2d\uff0c\u65e0\u6cd5\u91cd\u65b0\u6392\u5217\u6216\u8fdb\u5165\u70ed\u5e73\u8861\u3002\u4ed6\u4eec\u4f1a\u65e0\u9650\u671f\u5730\u5411\u4e0a\u3001\u5411\u4e0b\u3001\u5411\u4e0b\u548c\u5411\u4e0a\u3002\nSondhi \u548c\u4e00\u4f4d\u5408\u4f5c\u8005\u53d1\u73b0\u591a\u4f53\u5c40\u57df\u5316\u7cfb\u7edf\u53ef\u4ee5\u8868\u73b0\u51fa\u4e00\u79cd\u7279\u6b8a\u7684\u79e9\u5e8f\uff0c\u8fd9\u5c06\u6210\u4e3a\u65f6\u95f4\u6676\u4f53\u7684\u7b2c\u4e8c\u4e2a\u5173\u952e\u8981\u7d20\uff1a\u5982\u679c\u4f60\u7ffb\u8f6c\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u81ea\u65cb\uff08\u5411\u4e0b\u3001\u5411\u4e0a\u3001\u5411\u4e0a\u548c\u5411\u4e0b\uff09\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff09\uff0c\u60a8\u5c06\u83b7\u5f97\u53e6\u4e00\u4e2a\u7a33\u5b9a\u7684\u591a\u4f53\u672c\u5730\u5316\u72b6\u6001\u3002 2014 \u5e74\u79cb\u5b63\uff0cKhemani \u5728\u5fb7\u7d2f\u65af\u987f\u9a6c\u514b\u65af\u666e\u6717\u514b\u7814\u7a76\u6240\u4f11\u5047\u52a0\u5165 Sondhi\u3002\u5728\u90a3\u91cc\uff0cMoessner \u548c Lazarides \u4e13\u95e8\u7814\u7a76\u6240\u8c13\u7684 Floquet \u7cfb\u7edf\uff1a\u5468\u671f\u6027\u9a71\u52a8\u7684\u7cfb\u7edf\uff0c\u4f8b\u5982\u7528\u7279\u5b9a\u9891\u7387\u7684\u6fc0\u5149\u523a\u6fc0\u6676\u4f53\u3002\u6fc0\u5149\u7684\u5f3a\u5ea6\u4ee5\u53ca\u5176\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u5f3a\u5ea6\u4f1a\u5468\u671f\u6027\u5730\u53d8\u5316\u3002 Moessner\u3001Lazarides\u3001Sondhi \u548c Khemani \u7814\u7a76\u4e86\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5468\u671f\u6027\u9a71\u52a8\u591a\u4f53\u5c40\u90e8\u7cfb\u7edf\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u4ed6\u4eec\u5728\u8ba1\u7b97\u548c\u6a21\u62df\u4e2d\u53d1\u73b0\uff0c\u5f53\u4f60\u7528\u6fc0\u5149\u4ee5\u7279\u5b9a\u65b9\u5f0f\u523a\u6fc0\u5c40\u90e8\u81ea\u65cb\u94fe\u65f6\uff0c\u5b83\u4eec\u4f1a\u6765\u56de\u7ffb\u8f6c\uff0c\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u591a\u4f53\u5c40\u90e8\u72b6\u6001\u4e4b\u95f4\u6c38\u8fdc\u91cd\u590d\u5faa\u73af\uff0c\u800c\u4e0d\u4f1a\u5438\u6536\u4efb\u4f55\u51c0\u80fd\u91cf\u4ece\u6fc0\u5149\u3002\u4ed6\u4eec\u5c06\u4ed6\u4eec\u7684\u53d1\u73b0\u79f0\u4e3a pi \u81ea\u65cb\u73bb\u7483\u76f8\uff08\u5176\u4e2d\u89d2\u5ea6 pi \u8868\u793a 180 \u5ea6\u7ffb\u8f6c\uff09\u3002\u8be5\u5c0f\u7ec4\u5728 2015 \u5e74\u7684\u9884\u5370\u672c\u4e2d\u62a5\u544a\u4e86\u8fd9\u4e00\u65b0\u7269\u8d28\u76f8\u7684\u6982\u5ff5\u2014\u2014\u6709\u53f2\u4ee5\u6765\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u591a\u4f53\u3001\u975e\u5e73\u8861\u76f8\uff0c\u4f46\u201c\u65f6\u95f4\u6676\u4f53\u201d\u4e00\u8bcd\u5e76\u672a\u51fa\u73b0\u5728\u5176\u4e2d\u3002\u4f5c\u8005\u5728 2016 \u5e74 6 \u6708\u53d1\u8868\u5728\u300a\u7269\u7406\u8bc4\u8bba\u5feb\u62a5\u300b\u4e0a\u7684\u66f4\u65b0\u7248\u672c\u4e2d\u6dfb\u52a0\u4e86\u8be5\u672f\u8bed\uff0c\u611f\u8c22\u5ba1\u7a3f\u4eba\u5728\u81f4\u8c22\u4e2d\u5efa\u7acb\u4e86\u4ed6\u4eec\u7684 pi \u81ea\u65cb\u73bb\u7483\u76f8\u548c\u65f6\u95f4\u6676\u4f53\u4e4b\u95f4\u7684\u8054\u7cfb\u3002\u5728\u9884\u5370\u672c\u7684\u51fa\u73b0\u548c\u51fa\u7248\u4e4b\u95f4\u8fd8\u53d1\u751f\u4e86\u5176\u4ed6\u4e8b\u60c5\uff1aNayak \u662f Wilczek \u7684\u524d\u7814\u7a76\u751f\uff0c\u4ed6\u7684\u5408\u4f5c\u8005 Dominic Else \u548c Bela Bauer \u5728 2016 \u5e74 3 \u6708\u53d1\u5e03\u4e86\u4e00\u4efd\u9884\u5370\u672c\uff0c\u63d0\u8bae\u5b58\u5728\u79f0\u4e3a Floquet \u65f6\u95f4\u6676\u4f53\u7684\u7269\u4f53\u3002\u4ed6\u4eec\u4ee5 Khemani \u548c\u516c\u53f8\u7684 pi \u81ea\u65cb\u73bb\u7483\u76f8\u4e3a\u4f8b\u3002 Floquet \u65f6\u95f4\u6676\u4f53\u8868\u73b0\u51fa Wilczek \u8bbe\u60f3\u7684\u90a3\u79cd\u884c\u4e3a\uff0c\u4f46\u4ec5\u9650\u4e8e\u7531\u5916\u90e8\u80fd\u6e90\u5b9a\u671f\u9a71\u52a8\u3002\u8fd9\u79cd\u65f6\u95f4\u6676\u4f53\u4ece\u4e0d\u58f0\u79f0\u5904\u4e8e\u70ed\u5e73\u8861\u72b6\u6001\uff0c\u4ece\u800c\u907f\u514d\u4e86 Wilczek \u6700\u521d\u60f3\u6cd5\u7684\u5931\u8d25\u3002\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u591a\u4f53\u5c40\u57df\u7cfb\u7edf\uff0c\u5b83\u7684\u81ea\u65cb\u6216\u5176\u4ed6\u90e8\u5206\u65e0\u6cd5\u8fbe\u5230\u5e73\u8861\uff1b\u4ed6\u4eec\u88ab\u56f0\u5728\u539f\u5730\u3002\u4f46\u8be5\u7cfb\u7edf\u4e5f\u4e0d\u4f1a\u5347\u6e29\uff0c\u5c3d\u7ba1\u88ab\u6fc0\u5149\u6216\u5176\u4ed6\u9a71\u52a8\u5668\u6cf5\u6d66\u3002\u76f8\u53cd\uff0c\u5b83\u5728\u5c40\u90e8\u72b6\u6001\u4e4b\u95f4\u65e0\u9650\u671f\u5730\u6765\u56de\u5faa\u73af\u3002\u6fc0\u5149\u5df2\u7ecf\u6253\u7834\u4e86\u81ea\u65cb\u884c\u6240\u6709\u65f6\u523b\u4e4b\u95f4\u7684\u5bf9\u79f0\u6027\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u201c\u79bb\u6563\u65f6\u95f4\u5e73\u79fb\u5bf9\u79f0\u6027\u201d\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5728\u6fc0\u5149\u7684\u6bcf\u4e2a\u5468\u671f\u5faa\u73af\u4e4b\u540e\u624d\u6709\u76f8\u540c\u200b\u200b\u7684\u6761\u4ef6\u3002\u4f46\u662f\uff0c\u901a\u8fc7\u5b83\u7684\u6765\u56de\u7ffb\u8f6c\uff0c\u81ea\u65cb\u884c\u8fdb\u4e00\u6b65\u6253\u7834\u4e86\u6fc0\u5149\u5f3a\u52a0\u7684\u79bb\u6563\u65f6\u95f4\u5e73\u79fb\u5bf9\u79f0\u6027\uff0c\u56e0\u4e3a\u5b83\u81ea\u5df1\u7684\u5468\u671f\u662f\u6fc0\u5149\u7684\u500d\u6570\u3002\nKhemani \u548c\u5408\u8457\u8005\u8be6\u7ec6\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u9636\u6bb5\uff0c\u4f46 Nayak \u7684\u56e2\u961f\u7528\u65f6\u95f4\u3001\u5bf9\u79f0\u6027\u548c\u81ea\u53d1\u5bf9\u79f0\u6027\u7834\u574f\u7684\u8bed\u8a00\u6765\u63cf\u8ff0\u5b83\u2014\u2014\u6240\u6709\u7269\u7406\u5b66\u4e2d\u7684\u57fa\u672c\u6982\u5ff5\u3002\u9664\u4e86\u63d0\u4f9b\u66f4\u6027\u611f\u7684\u672f\u8bed\u5916\uff0c\u4ed6\u4eec\u8fd8\u63d0\u4f9b\u4e86\u65b0\u7684\u7406\u89e3\u65b9\u9762\uff0c\u5e76\u4e14\u4ed6\u4eec\u7a0d\u5fae\u6982\u62ec\u4e86 pi \u81ea\u65cb\u73bb\u7483\u76f8\u4e4b\u5916\u7684 Floquet \u65f6\u95f4\u6676\u4f53\u7684\u6982\u5ff5\uff08\u6ce8\u610f\u5b83\u4e0d\u9700\u8981\u4e00\u5b9a\u7684\u5bf9\u79f0\u6027\uff09\u3002\u4ed6\u4eec\u7684\u8bba\u6587\u4e8e 2016 \u5e74 8 \u6708\u53d1\u8868\u5728\u300a\u7269\u7406\u8bc4\u8bba\u5feb\u62a5\u300b\u4e0a\uff0c\u4e24\u4e2a\u6708\u540e Khemani \u548c\u516c\u53f8\u53d1\u8868\u4e86\u8be5\u9636\u6bb5\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u7684\u7406\u8bba\u53d1\u73b0\u3002\u4e24\u4e2a\u56e2\u4f53\u90fd\u58f0\u79f0\u5df2\u7ecf\u53d1\u73b0\u4e86\u8fd9\u4e2a\u60f3\u6cd5\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u7ade\u4e89\u5bf9\u624b\u7684\u7814\u7a76\u4eba\u5458\u548c\u5176\u4ed6\u4eba\u5f00\u59cb\u7ade\u76f8\u521b\u9020\u73b0\u5b9e\u4e2d\u7684\u65f6\u95f4\u6c34\u6676\u3002 Nayak \u7684\u56e2\u961f\u4e0e\u9a6c\u91cc\u5170\u5927\u5b66\u7684 Chris Monroe \u5408\u4f5c\uff0c\u540e\u8005\u4f7f\u7528\u7535\u78c1\u573a\u6765\u6355\u83b7\u548c\u63a7\u5236\u79bb\u5b50\u3002\u4e0a\u4e2a\u6708\uff0c\u8be5\u5c0f\u7ec4\u5728\u300a\u79d1\u5b66\u300b\u6742\u5fd7\u4e0a\u62a5\u9053\u8bf4\uff0c\u4ed6\u4eec\u5c06\u88ab\u6355\u83b7\u7684\u79bb\u5b50\u53d8\u6210\u4e86\u8fd1\u4f3c\u7684\u6216\u201c\u9884\u70ed\u201d\u65f6\u95f4\u6676\u4f53\u3002\u5b83\u7684\u5468\u671f\u6027\u53d8\u5316\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u79bb\u5b50\u5728\u4e24\u79cd\u72b6\u6001\u4e4b\u95f4\u8df3\u8dc3\uff09\u5b9e\u9645\u4e0a\u4e0e\u771f\u6b63\u7684\u65f6\u95f4\u6676\u4f53\u65e0\u6cd5\u533a\u5206\u3002\u4f46\u4e0e\u94bb\u77f3\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u79cd\u9884\u70ed\u65f6\u95f4\u6676\u4f53\u4e0d\u662f\u6c38\u8fdc\u7684\u3002\u5982\u679c\u5b9e\u9a8c\u8fd0\u884c\u7684\u65f6\u95f4\u8db3\u591f\u957f\uff0c\u7cfb\u7edf\u4f1a\u9010\u6e10\u5e73\u8861\uff0c\u5faa\u73af\u884c\u4e3a\u5c31\u4f1a\u5d29\u6e83\u3002 Khemani\u3001Sondhi\u3001Moessner \u548c\u5408\u4f5c\u8005\u5728\u522b\u5904\u642d\u4e0a\u4e86\u4ed6\u4eec\u7684\u9a6c\u8f66\u3002 2019 \u5e74\uff0c\u8c37\u6b4c\u5ba3\u5e03\u5176 Sycamore \u91cf\u5b50\u8ba1\u7b97\u673a\u5728 200 \u79d2\u5185\u5b8c\u6210\u4e86\u4e00\u9879\u4efb\u52a1\uff0c\u800c\u4f20\u7edf\u8ba1\u7b97\u673a\u9700\u8981 10,000 \u5e74\u3002 \uff08\u5176\u4ed6\u7814\u7a76\u4eba\u5458\u540e\u6765\u63cf\u8ff0\u4e86\u4e00\u79cd\u5927\u5927\u52a0\u5feb\u666e\u901a\u8ba1\u7b97\u673a\u8ba1\u7b97\u901f\u5ea6\u7684\u65b9\u6cd5\u3002\uff09\u5728\u9605\u8bfb\u516c\u544a\u6587\u4ef6\u65f6\uff0cMoessner \u8bf4\uff0c\u4ed6\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u610f\u8bc6\u5230\u201cSycamore \u5904\u7406\u5668\u5305\u542b\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u7684\u57fa\u672c\u6784\u5efa\u5757\u4f5c\u4e3a\u5176\u57fa\u672c\u6784\u5efa\u5757\u3002 Floquet\u65f6\u95f4\u6c34\u6676\u3002\u201d\u5076\u7136\u5730\uff0cSycamore \u7684\u5f00\u53d1\u4eba\u5458\u4e5f\u5728\u5bfb\u627e\u4e0e\u4ed6\u4eec\u7684\u673a\u5668\u6709\u5173\u7684\u4e1c\u897f\uff0c\u8fd9\u53f0\u673a\u5668\u592a\u5bb9\u6613\u51fa\u9519\uff0c\u65e0\u6cd5\u8fd0\u884c\u4e13\u4e3a\u6210\u719f\u7684\u91cf\u5b50\u8ba1\u7b97\u673a\u8bbe\u8ba1\u7684\u5bc6\u7801\u5b66\u548c\u641c\u7d22\u7b97\u6cd5\u3002\u5f53 Khemani \u548c\u540c\u4e8b\u8054\u7cfb\u5230 Google \u7684\u7406\u8bba\u5bb6 Kostya Kechedzhi \u65f6\uff0c\u4ed6\u548c\u4ed6\u7684\u56e2\u961f\u5f88\u5feb\u540c\u610f\u5728\u65f6\u95f4\u6c34\u6676\u9879\u76ee\u4e0a\u8fdb\u884c\u5408\u4f5c\u3002 \u201c\u6211\u7684\u5de5\u4f5c\uff0c\u4e0d\u4ec5\u662f\u79bb\u6563\u65f6\u95f4\u6676\u4f53\uff0c\u8fd8\u6709\u5176\u4ed6\u9879\u76ee\uff0c\u662f\u5c1d\u8bd5\u5c06\u6211\u4eec\u7684\u5904\u7406\u5668\u7528\u4f5c\u7814\u7a76\u65b0\u7269\u7406\u6216\u5316\u5b66\u7684\u79d1\u5b66\u5de5\u5177\uff0c\u201dKechedzhi \u8bf4\u3002", "note_en": "In  a preprint posted online Thursday night, researchers at Google in collaboration with physicists at Stanford, Princeton and other universities say that they have used Google\u2019s quantum computer to demonstrate a genuine \u201ctime crystal\u201d for the first time.\n A novel phase of matter that physicists have strived to realize for many years, a time crystal is an object whose parts move in a regular, repeating cycle, sustaining this constant change without burning any energy.\n \u201cThe consequence is amazing: You evade the second law of thermodynamics,\u201d said co-author  Roderich Moessner, director of the Max Planck Institute for the Physics of Complex Systems in Dresden, Germany. That\u2019s the law that says disorder always increases.\n Time crystals are also the first objects to spontaneously break \u201ctime-translation symmetry,\u201d the usual rule that a stable object will remain the same throughout time. A time crystal is both stable and ever-changing, with special moments that come at periodic intervals in time.\n The time crystal is a new category of phases of matter, expanding the definition of what a phase is. All other known phases, like water or ice, are in thermal equilibrium: Their constituent atoms have settled into the state with the lowest energy permitted by the ambient temperature, and their properties don\u2019t change with time. The time crystal is the first \u201cout-of-equilibrium\u201d phase: It has order and perfect stability despite being in an excited and evolving state.\n \u201cThis is just this completely new and exciting space that we\u2019re working in now,\u201d said  Vedika Khemani, a condensed matter physicist now at Stanford who co-discovered the novel phase while she was a graduate student and co-authored the new paper.\n Khemani, Moessner,  Shivaji Sondhi of Princeton and  Achilleas Lazarides of Loughborough University in the United Kingdom discovered the possibility of the phase and described its key properties in 2015; a rival group of physicists led by  Chetan Nayak of Microsoft Station Q and the University of California, Santa Barbara identified it as a time crystal soon after.\n Researchers have raced to create a time crystal over the past five years, but previous demos, though successful on their own terms,  have failed to satisfy all the criteria needed to establish the time crystal\u2019s existence. \u201cThere are good reasons to think that none of those experiments completely succeeded, and a quantum computer like [Google\u2019s] would be particularly well placed to do much better than those earlier experiments,\u201d said  John Chalker, a condensed matter physicist at the University of Oxford who wasn\u2019t involved in the new work.\n  Google\u2019s quantum computing team  made headlines in 2019 when they  performed the first-ever computation that ordinary computers weren\u2019t thought to be able to do in a practical amount of time. Yet that task was contrived to show a speedup and was of no inherent interest. The new time crystal demo marks one of the first times a quantum computer has found gainful employment.\n \u201cIt\u2019s a fantastic use of [Google\u2019s] processor,\u201d Nayak said.\n With today\u2019s preprint, which has been submitted for publication, and other  recent results, researchers have fulfilled the original hope for quantum computers. In his  1982 paper proposing the devices, the physicist Richard Feynman argued that they could be used to simulate the particles of any imaginable quantum system.\n A time crystal exemplifies that vision. It\u2019s a quantum object that nature itself probably never creates, given its complex combination of delicate ingredients. Imaginations conjured the recipe, stirred by nature\u2019s most baffling laws.\n   The Nobel Prize\u00ad-winning physicist Frank Wilczek conceived the idea in 2012, while teaching a class about ordinary (spatial) crystals. \u201cIf you think about crystals in space, it\u2019s very natural also to think about the classification of crystalline behavior in time,\u201d he  told this magazine not long after.\n Consider a diamond, a crystalline phase of a clump of carbon atoms. The clump is governed by the same equations everywhere in space, yet it takes a form that has periodic spatial variations, with atoms positioned at lattice points. Physicists say that it \u201cspontaneously breaks space-translation symmetry.\u201d Only minimum-energy equilibrium states spontaneously break spatial symmetries in this way.\n Wilczek envisioned a multi-part object in equilibrium, much like a diamond. But this object breaks time-translation symmetry: It undergoes periodic motion, returning to its initial configuration at regular intervals.\n  Wilczek\u2019s proposed time crystal was profoundly different from, say, a wall clock \u2014 an object that also undergoes periodic motion. Clock hands burn energy and stop when the battery runs out. A Wilczekian time crystal requires no input and continues indefinitely, since the system is in its ultra-stable equilibrium state.\n If it sounds implausible, it is: After much thrill and controversy,  a 2014 proof showed that Wilczek\u2019s prescription fails, like all other perpetual-motion machines conceived throughout history.\n That year, researchers at Princeton were thinking about something else. Khemani and her doctoral adviser, Sondhi, were studying many-body localization, an extension of Anderson localization, the Nobel Prize-winning 1958 discovery that an electron can get stuck in place, as if in a crevice in a rugged landscape.\n An electron is best pictured as a wave, whose height in different places gives the probability of detecting the particle there. The wave naturally spreads out over time. But Philip Anderson discovered that randomness \u2014 such as the presence of random defects in a crystal lattice \u2014 can cause the electron\u2019s wave to break up, destructively interfere with itself, and cancel out everywhere except in a small region. The particle localizes.\n People thought for decades that interactions between multiple particles would destroy the interference effect. But in 2005, three physicists at Princeton and Columbia universities  showed that a one-dimensional chain of quantum particles can experience many-body localization; that is, they all get stuck in a fixed state. This phenomenon would become the first ingredient of the time crystal.\n Imagine a row of particles, each with a magnetic orientation (or \u201cspin\u201d) that points up, down, or some probability of both directions. Imagine that the first four spins initially point up, down, down and up. The spins will quantum mechanically fluctuate and quickly align, if they can. But random interference between them can cause the row of particles to get stuck in their particular configuration, unable to rearrange or settle into thermal equilibrium. They\u2019ll point up, down, down and up indefinitely.\n Sondhi and a collaborator had discovered that many-body localized systems can exhibit a special kind of order, which would become the second key ingredient of a time crystal: If you flip all the spins in the system (yielding down, up, up and down in our example), you get another stable, many-body localized state.\n  In the fall of 2014, Khemani joined Sondhi on sabbatical at the Max Planck Institute in Dresden. There, Moessner and Lazarides specialized in so-called Floquet systems: periodically driven systems, such as a crystal that\u2019s being stimulated with a laser of a certain frequency. The laser\u2019s intensity, and thus the strength of its effect on the system, periodically varies.\n Moessner, Lazarides, Sondhi and Khemani studied what happens when a many-body localized system is periodically driven in this way. They found in calculations and simulations that when you tickle a localized chain of spins with a laser in a particular way, they\u2019ll flip back and forth, moving between two different many-body localized states in a repeating cycle forever without absorbing any net energy from the laser.\n They called their discovery a pi spin-glass phase (where the angle pi signifies a 180-degree flip). The group reported the concept of this new phase of matter \u2014 the first many-body, out-of-equilibrium phase ever identified \u2014 in  a 2015 preprint, but the words \u201ctime crystal\u201d didn\u2019t appear anywhere in it. The authors added the term in  an updated version, published in  Physical Review Letters in June 2016, thanking a reviewer in the acknowledgments for making the connection between their pi spin-glass phase and time crystals.\n Something else happened between the preprint\u2019s appearance and its publication: Nayak, who is a former graduate student of Wilczek\u2019s, and collaborators Dominic Else and Bela Bauer put out  a preprint in March 2016 proposing the existence of objects called Floquet time crystals. They pointed to Khemani and company\u2019s pi spin-glass phase as an example.\n A Floquet time crystal exhibits the kind of behavior envisioned by Wilczek, but only while being periodically driven by an external energy source. This kind of time crystal circumvents the failure of Wilczek\u2019s original idea by never professing to be in thermal equilibrium. Because it\u2019s a many-body localized system, its spins or other parts are unable to settle into equilibrium; they\u2019re stuck where they are. But the system doesn\u2019t heat up either, despite being pumped by a laser or other driver. Instead, it cycles back and forth indefinitely between localized states.\n  Already, the laser will have broken the symmetry between all moments in time for the row of spins, imposing instead \u201cdiscrete time-translation symmetry\u201d \u2014 that is, identical conditions only after each periodic cycle of the laser. But then, through its back-and-forth flips, the row of spins further breaks the discrete time-translation symmetry imposed by the laser, since its own periodic cycles are multiples of the laser\u2019s.\n Khemani and co-authors had characterized this phase in detail, but Nayak\u2019s group couched it in the language of time, symmetry and spontaneous symmetry-breaking \u2014 all fundamental concepts in physics. As well as offering sexier terminology, they provided new facets of understanding, and they slightly generalized the notion of a Floquet time crystal beyond the pi spin-glass phase (noting that a certain symmetry it has isn\u2019t needed). Their paper was  published in  Physical Review Letters in August 2016, two months after Khemani and company published the theoretical discovery of the first example of the phase.\n Both groups claim to have discovered the idea. Since then, the rival researchers and others have raced to create a time crystal in reality.\n  Nayak\u2019s crew teamed up with  Chris Monroe at the University of Maryland, who uses electromagnetic fields to trap and control ions. Last month, the group  reported in  Science that they\u2019d turned the trapped ions into an approximate, or \u201cprethermal,\u201d time crystal. Its cyclical variations (in this case, ions jumping between two states) are practically indistinguishable from those of a genuine time crystal. But unlike a diamond, this prethermal time crystal is not forever; if the experiment ran for long enough, the system would gradually equilibrate and the cyclical behavior would break down.\n Khemani, Sondhi, Moessner and collaborators hitched their wagon elsewhere. In 2019, Google  announced that its Sycamore quantum computer had completed a task in 200 seconds that would take a conventional computer 10,000 years. (Other researchers would later  describe a way to greatly speed up the ordinary computer\u2019s calculation.) In reading the announcement paper, Moessner said, he and his colleagues realized that \u201cthe Sycamore processor contains as its fundamental building blocks exactly the things we need to realize the Floquet time crystal.\u201d\n Serendipitously, Sycamore\u2019s developers were also looking for something to do with their machine, which is too error-prone to run the cryptography and search algorithms designed for full-fledged quantum computers. When Khemani and colleagues reached out to  Kostya Kechedzhi, a theorist at Google, he and his team quickly agreed to collaborate on the time crystal project. \u201cMy work, not only with discrete time crystals but other projects, is to try and use our processor as a scientific tool to study new physics or chemistry,\u201d Kechedzhi said.", "posttime": "2021-07-31 00:32:48", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8c37\u6b4c,google,\u6676\u4f53,\u65f6\u95f4", "title": "\u7269\u7406\u5b66\u5bb6\u8bf4\uff0c\u4ed6\u4eec\u7b2c\u4e00\u6b21\u4f7f\u7528\u8c37\u6b4c\u7684\u91cf\u5b50\u8ba1\u7b97\u673a\u6f14\u793a\u4e86\u4e00\u79cd\u65f6\u95f4\u6676\u4f53\uff0c\u5b83\u53ef\u4ee5\u5728\u72b6\u6001\u4e4b\u95f4\u6c38\u8fdc\u5faa\u73af\u800c\u4e0d\u6d88\u8017\u80fd\u91cf", "title_en": "Physicists say they used Google's quantum computer to demo a time crystal, which forever cycles between states without consuming energy, for the first time", "transed": 1, "url": "https://www.quantamagazine.org/first-time-crystal-built-using-googles-quantum-computer-20210730/", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "\u6676\u4f53", "\u65f6\u95f4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1070673, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2021 \u5e74 7 \u6708 28 \u65e5 RabbitMQ Streams \u6982\u8ff0\u4ecb\u7ecd\u4e86\u6d41\uff0c\u8fd9\u662f RabbitMQ 3.9 \u4e2d\u7684\u4e00\u9879\u65b0\u529f\u80fd\uff0cRabbitMQ Streams First Application \u63d0\u4f9b\u4e86\u6d41 Java \u5ba2\u6237\u7aef\u7684\u7f16\u7a0b\u6a21\u578b\u7684\u6982\u8ff0\u3002\u8fd9\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u5728 RabbitMQ Streams \u4e2d\u5bf9\u5df2\u53d1\u5e03\u7684\u6d88\u606f\u8fdb\u884c\u91cd\u590d\u6570\u636e\u5220\u9664\u3002\u7531\u4e8e\u91cd\u590d\u6570\u636e\u5220\u9664\u662f\u4e00\u4e2a\u5173\u952e\u4e14\u590d\u6742\u7684\u6982\u5ff5\uff0c\u672c\u6587\u5c06\u9010\u6b65\u5f15\u5bfc\u60a8\u4e86\u89e3\u6b64\u673a\u5236\uff0c\u4ece\u4e00\u4e2a\u5e7c\u7a1a\u4e14\u6709\u4e9b\u635f\u574f\u7684\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u5230\u4f18\u5316\u4e14\u53ef\u9760\u7684\u5b9e\u73b0\u3002\u5e94\u7528\u7a0b\u5e8f\u5f88\u5bb9\u6613\u591a\u6b21\u53d1\u5e03\u76f8\u540c\u7684\u6d88\u606f\uff1a\u5e94\u7528\u7a0b\u5e8f\u4ee5\u9519\u8bef\u7684\u65b9\u5f0f\u91cd\u65b0\u542f\u52a8\u5e76\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u53d1\u5e03\u6240\u6709\u6570\u636e\uff0c\u7f51\u7edc\u6545\u969c\u4f7f\u5e94\u7528\u7a0b\u5e8f\u91cd\u65b0\u8fde\u63a5\u5e76\u91cd\u65b0\u53d1\u9001\u51e0\u6761\u6d88\u606f\uff0c\u7b49\u7b49\u3002\u5c3d\u7ba1\u6d88\u8d39\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u4f7f\u5b83\u4eec\u7684\u5904\u7406\u5177\u6709\u5e42\u7b49\u6027\uff0c\u4f46\u5e94\u5c3d\u53ef\u80fd\u907f\u514d\u91cd\u590d\u53d1\u5e03\u7684\u6d88\u606f\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u51cf\u6162\u5904\u7406\u901f\u5ea6\u5e76\u5360\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002\u8fd9\u7bc7\u6587\u7ae0\u5c06\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u59cb\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u4f1a\u751f\u6210\u5927\u91cf\u91cd\u590d\u7684\u6d88\u606f\uff08\u4ee5\u5e2e\u52a9\u638c\u63e1\u95ee\u9898\uff09\uff0c\u5e76\u5c06\u4e00\u70b9\u4e00\u70b9\u5730\u6539\u8fdb\u5b83\uff0c\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u5f3a\u5927\u7684\u89e3\u51b3\u65b9\u6848\u3002\u53d1\u5e03\u7a0b\u5e8f\u6a21\u62df\u4e00\u4e2a\u4ece\u6570\u636e\u6e90\u8bfb\u53d6\u8bb0\u5f55\u5e76\u4e3a\u8fd9\u4e9b\u8bb0\u5f55\u4e2d\u7684\u6bcf\u4e00\u4e2a\u53d1\u5e03\u6d88\u606f\u7684\u5e94\u7528\u7a0b\u5e8f\uff1aProducer producer = environment\u3002\u751f\u4ea7\u8005\u5efa\u9020\u8005 () \u3002\u6d41\uff08\u201c\u91cd\u590d\u6570\u636e\u5220\u9664\u6d41\u201d\uff09\u3002\u5efa\u9020 \uff08\uff09; int messageCount = 10 ;\u8bb0\u5f55\uff08 0 \uff0c messageCount \uff09\u3002 forEach(record-&gt;{Message message=producer.messageBuilder().addData(record.content().getBytes(StandardCharsets.UTF_8)).build();producer.send(message,confirmationStatus-&gt;latch.countDown()) ; });\n\u6211\u4eec\u5047\u8bbe\u5e94\u7528\u7a0b\u5e8f\u8bfb\u53d6\u4e86\u6240\u6709\u53ef\u7528\u7684\u8bb0\u5f55\uff0c\u5e76\u4e14\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\u8be5\u6570\u5b57\u662f 10\u3002\u5982\u679c\u60a8\u60f3\u8981\u6709\u5173\u6d41 Java \u5ba2\u6237\u7aef API \u7684\u63d0\u9192\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb RabbitMQ Streams First Application\u3002\u5982\u679c\u4f60\u60f3\u5728\u9605\u8bfb\u65f6\u8fd0\u884c\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u7ee7\u7eed\u4e0b\u4e00\u8282\u3002\u6ce8\u610f\u4f60\u53ef\u4ee5\u6309\u7167\u5e16\u5b50\u7684\u5176\u4f59\u90e8\u5206\u4e0d\u8fd0\u884c\u4efb\u4f55\u4e1c\u897f\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u4e0d\u60f3\u5c1d\u8bd5\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u4e0b\u4e00\u8282\u4ee3\u7801\u3002\u8fd0\u884c\u793a\u4f8b\u9700\u8981\u5b89\u88c5 Docker\u3001Git \u548c Java 8 \u6216\u66f4\u9ad8\u7248\u672c\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u4ee3\u7406\uff1a docker run -it --rm --name rabbitmq -p 5552:5552 \\ -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS = &#39;-rabbitmq_stream Adverted_host localhost&#39; \\ rabbitmq:3.9 \u4ee3\u7801\u6258\u7ba1\u5728 GitHub \u4e0a\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u514b\u9686\u5b58\u50a8\u5e93\u5e76\u521b\u5efa\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u6d41\uff1a \u5728\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u4ece\u6570\u636e\u6e90\u8bfb\u53d6\u6240\u6709\u8bb0\u5f55\uff08\u603b\u5171 10 \u6761\u8bb0\u5f55\uff09\u5bf9\u4e8e\u8fd9\u6b21\u8fd0\u884c\uff09\u5e76\u4e3a\u6bcf\u4e2a\u4eba\u53d1\u9001\u4e00\u6761\u6d88\u606f\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u68c0\u67e5\u6d41\u7684\u5185\u5bb9\uff1a./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$Consume &#39; \u6b63\u5728\u8fde\u63a5...\u5df2\u8fde\u63a5\u3002\u5f00\u59cb\u6d88\u8d39\uff0c\u6309\u56de\u8f66\u9000\u51fa...message 0message 1message 2message 3message 4message 5message 6message 7message 8message 9\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e00\u5207\u90fd\u5f88\u597d\uff0c\u6211\u4eec\u53d1\u5e03\u4e86 10 \u6761\u6d88\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6d41\u4e2d\u770b\u5230 10 \u6761\u6d88\u606f\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u53ef\u884c\u5e76\u5728\u7b2c\u4e8c\u6b21\u8fd0\u884c\u65f6\u4fdd\u6301\u6b63\u5e38\u5de5\u4f5c\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\uff0c\u6211\u4eec\u5728\u7b2c\u4e8c\u5929\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\uff0c\u6570\u636e\u6e90\u5305\u542b 10 \u6761\u989d\u5916\u8bb0\u5f55\uff0c\u6240\u4ee5\u603b\u5171\u6709 20 \u6761\u8bb0\u5f55\u3002\u6211\u4eec\u7684\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u662f\u611a\u8822\u7684\uff1a\u5b83\u4f1a\u4ece\u6570\u636e\u6e90\u8bfb\u53d6\u6240\u6709\u5185\u5bb9\u5e76\u53d1\u5e03\u6d88\u606f\u3002\u8ba9\u6211\u4eec\u5c1d\u8bd5\uff1a./ mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$Consume&#39;Connecting...Connected.Starting\u6d88\u8017\uff0c\u6309\u56de\u8f66\u9000\u51fa...message 0message 1message 2...message 9message 0message 1message 2...message 9message 10message 11...message 19 \u6211\u4eec\u770b\u5230 30 \u6761\u6d88\u606f\uff1a\u7b2c\u4e00\u6b21\u8fd0\u884c\u7684 10 \u6761\u6d88\u606f\u548c\u7b2c\u4e8c\u6b21\u8fd0\u884c\u7684 20 \u6761\u6d88\u606f\u3002\u524d 10 \u6761\u51fa\u73b0\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u6d41\u5305\u542b\u91cd\u590d\u3002\u6309\u7167\u6211\u4eec\u5b9e\u73b0\u7684\u65b9\u5f0f\u5e94\u7528\u7a0b\u5e8f\u8fd9\u662f\u9884\u671f\u7684\uff0c\u4f46\u6211\u4eec\u5fc5\u987b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u60f3\u5728\u7b2c\u4e8c\u6b21\u8fd0\u884c\u65f6\u53d1\u5e03\u65b0\u8bb0\u5f55\u3002\u6d41 Java \u5ba2\u6237\u7aef\u6587\u6863\u63d0\u4f9b\u4e86\u6709\u5173\u751f\u4ea7\u8005\u540d\u79f0\u548c\u53d1\u5e03 ID \u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002\u6ce8\u610f\u6d88\u606f\u91cd\u590d\u6570\u636e\u5220\u9664\u5e76\u975e\u7279\u5b9a\u4e8e\u6d41 Java \u5ba2\u6237\u7aef\uff0c\u53ea\u8981\u7b26\u5408\u8bed\u4e49\uff0c\u4efb\u4f55\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u5b9e\u73b0\u3002\u6211\u4eec\u53ea\u9700\u8981\u4e3a\u6211\u4eec\u7684\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u9009\u62e9\u4e00\u4e2a\u540d\u79f0\uff0c\u5e76\u5728\u4e0d\u540c\u7684\u8fd0\u884c\u4e2d\u4fdd\u7559\u8fd9\u4e2a\u540d\u79f0\u3002\u5bf9\u4e8e\u53d1\u5e03 ID\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8bb0\u5f55\u7684 ID\uff1a\u5b83\u6070\u597d\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u8bb0\u5f55\u6309 ID \u6392\u5e8f\u8fd4\u56de\uff08\u4f8b\u5982\u53ea\u662f\u50cf\u6570\u636e\u5e93\u4e2d\u5e26\u6709\u6570\u5b57\u4e3b\u952e\u548c\u9002\u5f53\u67e5\u8be2\u7684\u8bb0\u5f55\uff09\u3002\u751f\u4ea7\u8005\u751f\u4ea7\u8005 = \u73af\u5883\u3002\u751f\u4ea7\u8005\u5efa\u9020\u8005 () \u3002\u6d41\uff08\u201c\u91cd\u590d\u6570\u636e\u5220\u9664\u6d41\u201d\uff09\u3002 name (&quot;app-1&quot;) // \u4e3a\u751f\u4ea7\u8005\u63d0\u4f9b\u4e00\u4e2a\u540d\u5b57\u3002 ConfirmTimeout ( Duration . ZERO ) // \u6c38\u4e0d\u505c\u6b62\u91cd\u8bd5\u3002\u5efa\u9020 \uff08\uff09; int messageCount = 10 ;\u8bb0\u5f55\uff08 0 \uff0c messageCount \uff09\u3002 forEach ( record -&gt; { Message message = producer .messageBuilder ().publishId ( record . id ()) // \u8bbe\u7f6e\u53d1\u5e03ID . addData ( record . content ( ). getBytes ( StandardCharsets . UTF_8 )) .build();\u751f\u4ea7\u8005.\u53d1\u9001(\u6d88\u606f,confirmationStatus-&gt;\u95e9\u9501.countDown());});\n\u4ee3\u7406\u5c06\u8ddf\u8e2a\u6b64\u751f\u4ea7\u8005\u7684\u6700\u540e\u4e00\u4e2a\u53d1\u5e03 ID\u3002\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u5982\u4f55\u5141\u8bb8\u5bf9\u6d88\u606f\u8fdb\u884c\u91cd\u590d\u6570\u636e\u5220\u9664\u3002 ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$CreateEmptyStream&#39;Connection...\u8fde\u63a5\u3002\u5c1d\u8bd5\u5220\u9664\u6d41\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\u5df2\u5220\u9664\u6d41\u3002\u521b\u5efa\u201c\u91cd\u590d\u6570\u636e\u5220\u9664\u6d41\u201d\u6d41\u3002\u5df2\u521b\u5efa\u6d41\u3002\u73b0\u5728\u6211\u4eec\u5728\u7b2c\u4e8c\u5929\u8fd0\u884c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6709\u989d\u5916\u7684 10 \u6761\u8bb0\u5f55\u3002\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u7b2c\u4e00\u6b21\u90a3\u4e48\u611a\u8822\uff1a\u5b83\u4f7f\u7528\u751f\u4ea7\u8005\u540d\u79f0\u548c\u53d1\u5e03 ID \u8fdb\u884c\u91cd\u590d\u6570\u636e\u5220\u9664\u3002\u4f46\u5b83\u4ecd\u7136\u4ece\u6570\u636e\u6e90\u8bfb\u53d6\u6240\u6709\u8bb0\u5f55\uff1a ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$Consume&#39;Connecting...Connected.Starting \u6b63\u5728\u6d88\u8d39\uff0c\u6309\u56de\u8f66\u9000\u51fa...message 0message 1message 2...message 9message 10message 11message 12...message 19 \u8fd9\u6b21\u6ca1\u6709\u91cd\u590d\uff0c\u5f88\u597d\uff01\u5373\u4f7f\u6211\u4eec\u91cd\u65b0\u53d1\u5e03\u4e86\u524d 10 \u6761\u6d88\u606f\uff0cbroker \u8fd8\u662f\u8bbe\u6cd5\u8fc7\u6ee4\u6389\u4e86\u5b83\u4eec\u3002\u5b83\u77e5\u9053\u5b83\u5e94\u8be5\u5ffd\u7565\u53d1\u5e03 ID \u5c0f\u4e8e 9\uff08\u7b2c\u4e00\u6b21\u8fd0\u884c\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u503c\uff09\u7684\u6240\u6709\u6d88\u606f\u3002\u6ce8\u610f\uff0c\u5373\u4f7f\u5b83\u8fc7\u6ee4\u6389\u4e86\u8fd9\u4e9b\u91cd\u590d\u9879\uff0c\u5b83\u4ecd\u7136\u5411\u5ba2\u6237\u7aef\u786e\u8ba4\u4e86\u5b83\u4eec\u3002\u8fd9\u6bd4\u6211\u4eec\u7b2c\u4e00\u4e2a\u6700\u7ec8\u51fa\u73b0\u91cd\u590d\u7684\u5e94\u7528\u7a0b\u5e8f\u8981\u597d\u5f97\u591a\uff0c\u4f46\u4ecd\u7136\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u5e94\u7528\u7a0b\u5e8f\u6bcf\u6b21\u90fd\u91cd\u65b0\u53d1\u9001\u6240\u6709\u6d88\u606f\u3002\u5982\u679c\u6570\u636e\u4e0d\u65ad\u589e\u957f\uff0c\u5e94\u7528\u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u5c06\u82b1\u8d39\u8d8a\u6765\u8d8a\u591a\u7684\u65f6\u95f4\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u53ef\u4ee5\u627e\u51fa\u5e94\u7528\u7a0b\u5e8f\u5728\u4e0a\u6b21\u8fd0\u884c\u4e2d\u505c\u6b62\u7684\u4f4d\u7f6e\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u901a\u8fc7\u4e0d\u4ec5\u4f7f\u7528\u91cd\u590d\u6570\u636e\u5220\u9664\uff0c\u800c\u4e14\u8fd8\u67e5\u8be2\u4ee3\u7406\u4ee5\u83b7\u53d6\u5b83\u53d1\u9001\u7684\u6700\u540e\u4e00\u4e2a\u53d1\u5e03 ID\uff0c\u4ece\u800c\u4f7f\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u66f4\u52a0\u667a\u80fd\u3002\n./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$CreateEmptyStream&#39;Connection...\u8fde\u63a5\u3002\u5c1d\u8bd5\u5220\u9664\u6d41\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\u5df2\u5220\u9664\u6d41\u3002\u521b\u5efa\u201c\u91cd\u590d\u6570\u636e\u5220\u9664\u6d41\u201d\u6d41\u3002\u5df2\u521b\u5efa\u6d41\u3002\u8fd9\u4e2a\u7248\u672c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u662f\u6700\u806a\u660e\u7684\uff0c\u4f46\u5bf9\u4e8e\u201c\u7b2c\u4e00\u5929\u201d\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5728\u7b2c\u4e8c\u5929\u505a\u5f97\u66f4\u597d\uff0c\u5176\u4e2d\u6570\u636e\u6e90\u73b0\u5728\u5305\u542b 20 \u6761\u6d88\u606f\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528 Producer#getLastPublishingId \u65b9\u6cd5\u5411\u4ee3\u7406\u67e5\u8be2\u6b64\u751f\u4ea7\u8005\u7684\u6700\u540e\u4e00\u4e2a\u53d1\u5e03 ID \u4e3a\u8be5\u6d41\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u6dfb\u52a0 1\u5230\u8fd9\u4e2a\u503c\uff0c\u5b83\u4f1a\u5f97\u5230\u5b83\u7684\u8d77\u70b9\u3002\u7136\u540e\u5b83\u53ea\u9700\u8981\u4ece\u8fd9\u4e00\u70b9\u9009\u62e9\u8bb0\u5f55\uff0c\u76f4\u5230\u6700\u540e\u4e00\u6761\u53ef\u7528\u8bb0\u5f55\u3002\u8fd9\u6837\u5b83\u5c31\u4e0d\u4f1a\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u53d1\u5e03\u3002\u4ee5\u4e0b\u4ee3\u7801\u663e\u793a\u4e86\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff1a\u751f\u4ea7\u8005\u751f\u4ea7\u8005 = \u73af\u5883\u3002\u751f\u4ea7\u8005\u5efa\u9020\u8005 () \u3002\u6d41\uff08\u201c\u91cd\u590d\u6570\u636e\u5220\u9664\u6d41\u201d\uff09\u3002 name (&quot;app-1&quot;) // \u4e3a\u751f\u4ea7\u8005\u63d0\u4f9b\u4e00\u4e2a\u540d\u5b57\u3002 ConfirmTimeout ( Duration . ZERO ) // \u6c38\u4e0d\u505c\u6b62\u91cd\u8bd5\u3002\u5efa\u9020 \uff08\uff09;\u957f\u5f00\u59cb=\u751f\u4ea7\u8005\u3002 getLastPublishingId () + 1 ; // \u83b7\u53d6\u6700\u540e\u7684\u53d1\u5e03 ID \u5e76\u6dfb\u52a0 1 int messageCount = 20 ;\u8bb0\u5f55\uff08 start \uff0c messageCount \uff09\u3002 forEach ( record -&gt; { Message message = producer .messageBuilder ().publishId ( record . id ()) // \u8bbe\u7f6e\u53d1\u5e03ID . addData ( record . content ( ). getBytes ( StandardCharsets . UTF_8 )) .build();\u751f\u4ea7\u8005.\u53d1\u9001(\u6d88\u606f,confirmationStatus-&gt;\u95e9\u9501.countDown());}); ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$PublishSmartDedupSecondDay&#39;Connecting...Connected.Starting at 10Publishing Publishing 10 message with deduplication enabled.Messages\u786e\u8ba4\uff1f\u662f \u6240\u4ee5\u53d1\u5e03\u8005\u4ece 10\uff089\uff0c\u7b2c\u4e00\u6b21\u8fd0\u884c\u7684\u6700\u540e\u4e00\u4e2a\u53d1\u5e03 ID\uff0c+1\uff09\u5f00\u59cb\uff0c\u53d1\u5e03 10\uff0820\uff0c\u603b\u5171\uff0c- 10 \u4e2a\u5df2\u7ecf\u53d1\u5e03\uff09\u65b0\u6d88\u606f\u3002\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u6d41\u7684\u5185\u5bb9\uff1a./ mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$Consume&#39;Connecting...Connected.Starting\u6d88\u8017\uff0c\u6309\u56de\u8f66\u9000\u51fa...message 0message 1message 2...message 9message 10message 11message 12...\u6d88\u606f 19\n\u6211\u4eec\u5728\u6d41\u4e2d\u83b7\u5f97\u4e86\u9884\u671f\u7684\u6d88\u606f\u6570\u91cf\uff0c\u4f46\u8fd9\u6b21\u4f7f\u7528\u4e86\u4f18\u5316\u7684\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u3002\u9700\u8981\u751f\u6210\u5e94\u7528\u7a0b\u5e8f\u7684\u540d\u79f0\u548c\u53d1\u5e03 ID \u624d\u80fd\u542f\u7528\u91cd\u590d\u6570\u636e\u5220\u9664 \u53d1\u5e03 ID \u662f\u4e00\u4e2a\u4e25\u683c\u9012\u589e\u7684\u5e8f\u5217\uff0c\u5b83\u901a\u5e38\u662f\u7ed9\u5b9a\u6d88\u606f\u7684\u6807\u8bc6\u7b26\uff08\u4f8b\u5982\u6570\u636e\u5e93\u8bb0\u5f55\u7684\u4e3b\u952e\u3001\u6587\u4ef6\u4e2d\u7684\u884c\uff09\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u67e5\u8be2\u4ed6\u4eec\u7528\u6765\u4ece\u4e2d\u65ad\u5904\u91cd\u65b0\u542f\u52a8\u7684\u6700\u540e\u4e00\u4e2a\u53d1\u5e03 ID \u7684\u4ee3\u7406", "note_en": "July 28, 2021 RabbitMQ Streams Overview introduced streams, a new feature in RabbitMQ 3.9 and  RabbitMQ Streams First Application provided an overview of the programming model with the stream Java client. This post covers how to deduplicate published messages in RabbitMQ Streams.\n As deduplication is a critical and intricate concept, the post will walk you through this mechanism step by step, from a naive and somewhat broken publishing application to an optimized and reliable implementation.\n  It is quite easy for an application to publish the same message several times: the application is restarted in the wrong way and re-publishes all the data from the beginning, a network glitch makes the application reconnect and re-send a couple of messages, etc.\n Even though consuming applications should make their processing idempotent, duplicated published messages should be avoided as much as possible, as they can slow down processing and use extra space.\n This post will start from a simple application that generates lots of duplicate messages (to help grasp the problem) and will improve it little by little to get a robust solution at the end.\n  The publishing program mimics an application that reads records from a data source and publish a message for each a of these records:\n Producer  producer  =  environment . producerBuilder ()  . stream ( &#34;deduplication-stream&#34; )  . build (); int  messageCount  =  10 ; records ( 0 ,  messageCount ). forEach ( record  -&gt;  {  Message  message  =  producer . messageBuilder ()  . addData ( record . content (). getBytes ( StandardCharsets . UTF_8 ))  . build ();  producer . send ( message ,  confirmationStatus  -&gt;  latch . countDown ()); });\n We suppose the application reads  all the records available, and that number is 10 for the first run.In case you want a reminder on the stream Java client API, you can read  RabbitMQ Streams First Application.\n If you want to run the code as you are reading, you can move on to the next section.Note you can follow the remaining of the post without running anything, so you can skip the next section if you don\u2019t want to try out the code.\n  Running the samples requires Docker, Git, and Java 8 or higher installed.You can start the broker with the following command:\n docker run -it --rm --name rabbitmq -p 5552:5552  \\  -e  RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS = &#39;-rabbitmq_stream advertised_host localhost&#39;  \\  rabbitmq:3.9\n   The  code is hosted on GitHub.Here is how to clone the repository and create the stream used in the samples:\n      With this first run, the application read all the records from the data source (that is 10 records overall for this run) and send a message for each of them.We can check the content of the stream with the following command:\n ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$Consume&#39; Connecting...Connected.Starting consuming, press Enter to exit...message  0message  1message  2message  3message  4message  5message  6message  7message  8message  9\n So far, so good, we published 10 messages and we can see 10 messages in the stream.Let\u2019s now if our application is viable and keeps working correctly for a second run.\n  We can imagine now that we run the application on the next day and the data source contains 10 additional records, so 20 records overall.Our publishing application is dumb: it will read everything from the data source and publishing messages.Let\u2019s try:\n   ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$Consume&#39;Connecting...Connected.Starting consuming, press Enter to exit...message  0message  1message  2...message  9message  0message  1message  2...message  9message  10message  11...message  19\n We see 30 messages: the 10 from the first run and the 20 from the second run.The first 10 appears twice, so our stream contains duplicate.With the way we implemented the application this is expected, but we have to fix this, because we just want to the new records to be published on the second run.\n     The  stream Java client documentation provides more details about the producer name and the publishing ID.Note message deduplication is not specific to the stream Java client, it can be implemented by any client as long as it complies to the semantics.\n We just have to pick a name for our publishing application and keep this name along the different runs.For the publishing ID, we can use the ID of a record: it happens to be unique and the records are returned sorted by ID (e.g. just like records from a database with a numeric primary key and the appropriate query).\n  Producer  producer  =  environment . producerBuilder ()  . stream ( &#34;deduplication-stream&#34; )  . name ( &#34;app-1&#34; )  // provide a name for the producer   . confirmTimeout ( Duration . ZERO )  // to never stop retrying   . build (); int  messageCount  =  10 ; records ( 0 ,  messageCount ). forEach ( record  -&gt;  {  Message  message  =  producer . messageBuilder ()  . publishingId ( record . id ())  // set the publishing ID   . addData ( record . content (). getBytes ( StandardCharsets . UTF_8 ))  . build ();  producer . send ( message ,  confirmationStatus  -&gt;  latch . countDown ()); });\n The broker will keep track of the last publishing ID for this producer.We\u2019ll see how this allows to deduplicate messages.\n   ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$CreateEmptyStream&#39;Connection...Connected. Trying to delete stream  if it exists.Stream deleted.Creating  &#39;deduplication-stream&#39; stream.Stream created.\n     We run now our application on the second day, with the extra 10 records.Our application is less dumb that the first time: it uses the producer name and the publishing ID for deduplication. But it still reads  all the records from the data source:\n   ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$Consume&#39;Connecting...Connected.Starting consuming, press Enter to exit...message  0message  1message  2...message  9message  10message  11message  12...message  19\n No duplicates this time, nice!Even though we re-published the first 10 messages, the broker managed to filter them out.It knew that it should ignore all the messages with a publishing ID lesser than 9 (the last value in the first run).Note even though it filtered out these duplicates, it nevertheless confirmed them to the client.\n This is much better that our first application where we ended up with duplicates, but there\u2019s still a problem: the application re-sends  all the messages every time.If the data keeps growing, the application will take more and more time for each run.Fortunately it is possible to find out where the application left off in the last run.\n  We\u2019ll see in this section how to make the publishing application even smarter by using not only deduplication but also querying the broker to for the last publishing ID it sent.\n   ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$CreateEmptyStream&#39;Connection...Connected. Trying to delete stream  if it exists.Stream deleted.Creating  &#39;deduplication-stream&#39; stream.Stream created.\n   This version of the application is not the smartest, but it is enough for \u201cthe first day\u201d.\n  The publishing application needs to do better for the second day, where the data source contains now 20 messages.It can use the  Producer#getLastPublishingId method which queries the broker for the last publishing ID of this producer for this stream.The application can add 1 to this value and it will get its starting point.Then it just has to select the records from this point until the last record available.This way it does not re-publish from the beginning.The following code shows how to do this:\n Producer  producer  =  environment . producerBuilder ()  . stream ( &#34;deduplication-stream&#34; )  . name ( &#34;app-1&#34; )  // provide a name for the producer   . confirmTimeout ( Duration . ZERO )  // to never stop retrying   . build (); long  start  =  producer . getLastPublishingId ()  +  1 ;  // get last publishing ID and add 1  int  messageCount  =  20 ; records ( start ,  messageCount ). forEach ( record  -&gt;  {  Message  message  =  producer . messageBuilder ()  . publishingId ( record . id ())  // set the publishing ID   . addData ( record . content (). getBytes ( StandardCharsets . UTF_8 ))  . build ();  producer . send ( message ,  confirmationStatus  -&gt;  latch . countDown ()); });\n  ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$PublishSmartDedupSecondDay&#39;Connecting...Connected.Starting publishing at  10Publishing  10 message with deduplication enabled.Messages confirmed? yes\n So the publisher starts at 10 (9, the last publishing ID of the first run, + 1) and publishes the 10 (20, total, - 10 already published) new messages.We can check the content of the stream:\n ./mvnw -q compile exec:java -Dexec.mainClass = &#39;com.rabbitmq.stream.Deduplication$Consume&#39;Connecting...Connected.Starting consuming, press Enter to exit...message  0message  1message  2...message  9message  10message  11message  12...message  19\n We get the expected number of messages in the stream, but this time with an optimized publishing application.\n   a name for the producing application and a publishing ID are required to enable deduplication\n  the publishing ID is a strictly increasing sequence, it is usually the identifier of a given message (e.g. primary key for a database record, line in a file)\n applications should query the broker for the last publishing ID they used to restart where they left off", "posttime": "2021-07-31 00:32:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rabbitmq,deduplication,\u5e94\u7528\u7a0b\u5e8f", "title": "\u4f7f\u7528 RabbitMQ Streams \u8fdb\u884c\u6d88\u606f\u91cd\u590d\u6570\u636e\u5220\u9664", "title_en": "Message Deduplication with RabbitMQ Streams", "transed": 1, "url": "https://blog.rabbitmq.com/posts/2021/07/rabbitmq-streams-message-deduplication", "via": "", "real_tags": ["rabbitmq", "\u5e94\u7528\u7a0b\u5e8f"]}]