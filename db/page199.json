[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1034229, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1998\u5e74\uff0c\u6211\u5728\u5176\u4ed6\u4eba\u51c6\u5907\u9ad8\u4e2d\u671f\u672b\u8003\u8bd5\u7684\u65f6\u5019\u6709\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u65f6\u95f4\uff0c\u8fdb\u5165\u4e86\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u9886\u57df\u3002\u6211\u662f\u6309\u7167\u6211\u6240\u5b66\u7684\u65b9\u5f0f\u5199\u7684\uff0c\u7ed3\u679c\u662f\u8fd9\u6837\u7684\u3002\u5b83\u5728\u67d0\u4e9b\u65b9\u9762\u5e76\u4e0d\u5b8c\u5168\u51c6\u786e\uff0c\u4f46\u53ef\u4ee5\u4f5c\u4e3a\u4e86\u89e3\u97f3\u9891DSP\u4e16\u754c\u7684\u5f88\u597d\u7684\u6559\u7a0b\u3002\u4ee5\u524d\u8fd9\u4efd\u6587\u4ef6\u88ab\u79f0\u4e3a\u8036\u54c8\u5c14\u7684\u6570\u5b57\u58f0\u97f3\u5904\u7406\u6559\u7a0b\u7684\u8111\u7b4b\u6025\u8f6c\u5f2f\uff0c\u4f46\u6211\u5df2\u7ecf\u957f\u5927\u4e86\u51e0\u5e74\uff0c\u6211\u7684\u573a\u666f\u8eab\u4efd\u3002\u4eab\u53d7ASCII\u827a\u672f\uff01\n\u8fd9\u662f\u4e3a\u97f3\u9891\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u53d1\u70e7\u53cb(\u5982\u6807\u9898\u6240\u793a)\u548c\u5176\u4ed6\u9700\u8981\u8be5\u4e3b\u9898\u5b9e\u7528\u4fe1\u606f\u7684\u4eba\u7f16\u5199\u7684\u3002\u5982\u679c\u4f60\u6ca1\u6709\u8fd9\u65b9\u9762\u7684\u7ebf\u6027\u9605\u8bfb\u7ecf\u9a8c\uff0c\u5e76\u4e14\u9047\u5230\u4e86\u56f0\u96be\uff0c\u770b\u770b\u524d\u9762\u51e0\u7ae0\u6709\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u5e2e\u4f60\u7684\u3002\n\u5728\u6ee4\u6ce2\u5668\u9891\u7387\u54cd\u5e94\u56fe\u4e2d\uff0c\u4f7f\u7528\u7ebf\u6027\u9891\u7387\u548c\u5e45\u5ea6\u5c3a\u5ea6\u3002\u6362\u9875\u529f\u80fd\u4e13\u4e3a60\u591a\u884c/\u9875\u6253\u5370\u673a\u8bbe\u8ba1\u3002\n\u300a\u6d17\u724c\u65b9\u7a0b\u5f0f\u300b\u4e00\u7ae0\u662f\u6211\u54e5\u54e5\u5361\u52d2\u5199\u7684\u3002\u540c\u65f6\uff0c\u611f\u8c22\u8482\u83ab\u00b7\u6258\u8428\u74e6\u5b81\u5206\u4eab\u4ed6\u7684\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668\u77e5\u8bc6\uff01\n\u91c7\u6837\u7684\u58f0\u97f3\u6570\u636e\u662f\u4e00\u5806\u6837\u672c\uff0c\u5373\u53d6\u81ea\u5b9e\u9645\u58f0\u6ce2\u7684\u5e45\u503c\u3002\u91c7\u6837\u7387\u662f\u62cd\u6444\u955c\u5934\u7684\u9891\u7387\u3002\u4f8b\u5982\uff0c\u5982\u679c\u9891\u7387\u4e3a44100\uff0c\u5219\u57281\u79d2\u5185\u5df2\u91c7\u96c6\u4e8644100\u4e2a\u6837\u672c\u3002\n_0-0_\r_/--0__\r0_0-0__0-0-0_\r\\__-0--0--0-__\r+---0==-+--=0---+---0==-+-\u3002--+\r-0-0_\r--0\r&lt\uff1b-&gt\uff1b\r1/\u91c7\u6837\u7387\u3002\n\u539f\u59cb\u58f0\u97f3\u662f\u66f2\u7ebf\uff0c\u800c\u2018s\u2019\u662f\u91c7\u6837\u70b9\u3002\u6c34\u5e73\u76f4\u7ebf\u662f\u96f6\u6c34\u51c6\u3002\n\u91c7\u6837\u58f0\u97f3\u53ea\u80fd\u8868\u793a\u91c7\u6837\u7387\u7684\u4e00\u534a\u4ee5\u4e0b\u7684\u9891\u7387\u3002\u8fd9\u5c31\u662f\u5948\u594e\u65af\u7279\u9891\u7387\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u8bc1\u660e\u662f\uff1a\u6bcf\u4e2a\u6ce2\u6d6a\u5468\u671f\u9700\u8981\u81f3\u5c11\u5b58\u50a8\u4e24\u4e2a\u91c7\u6837\u70b9\uff0c\u5373\u6ce2\u6d6a\u7684\u9876\u90e8\u548c\u5e95\u90e8\uff0c\u4ee5\u4fbf\u7a0d\u540e\u80fd\u591f\u91cd\u5efa\u5b83\uff1a\n0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\/0\\\r|\r+-|-\u3002+\r|\r\\0/\\0/\\0/\\0/\\0/\\0/\\0/\\0/\\0\u3002\n\u5982\u679c\u60a8\u5c1d\u8bd5\u5728\u91c7\u6837\u58f0\u97f3\u4e2d\u5305\u542b\u9ad8\u4e8e\u5948\u594e\u65af\u7279\u9891\u7387\u7684\u9891\u7387\uff0c\u60a8\u5f97\u5230\u7684\u53ea\u662f\u989d\u5916\u7684\u5931\u771f\uff0c\u56e0\u4e3a\u5b83\u4eec\u663e\u793a\u4e3a\u8f83\u4f4e\u7684\u9891\u7387\u3002\n\u58f0\u97f3\u7531\u9891\u7387\u6210\u5206\u7ec4\u6210\u3002\u5b83\u4eec\u770b\u8d77\u6765\u90fd\u548c\u6b63\u5f26\u6ce2\u4e00\u6a21\u4e00\u6837\uff0c\u4f46\u5b83\u4eec\u7684\u9891\u7387\u3001\u76f8\u4f4d\u548c\u632f\u5e45\u4e0d\u540c\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e2a\u9891\u7387\uff1a\n_\r/\\/\\\r/-\\\r\\__/\\__/\r\u6211\u60f3\u8bf4\u7684\u662f\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u4ece\u53e6\u4e00\u4e2a\u58f0\u97f3\u4e2d\u63d0\u53d6\u76f8\u540c\u7684\u9891\u7387\uff0c\u5e76\u6ce8\u610f\u5230\u5b83\u5177\u6709\u76f8\u540c\u7684\u632f\u5e45\uff0c\u4f46\u76f8\u4f4d\u76f8\u53cd(\u65cb\u8f6c180\u5ea6)\u3002\n_\r/\\/\\\r\\-/\r\\__/\\__/\r\u6211\u60f3\u8bf4\u7684\u662f\u3002\n\u5408\u5e76\u4e24\u4e2a\u4fe1\u53f7\u53ea\u9700\u5c06\u5b83\u4eec\u76f8\u52a0\u5373\u53ef\u3002\u5982\u679c\u6211\u4eec\u5bf9\u8fd9\u4e24\u4e2a\u6b63\u5f26\u6ce2\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u7ed3\u679c\u5c06\u662f\uff1a\n\u5b83\u5c31\u4f1a\u5b89\u9759\u4e0b\u6765\u3002\u5982\u679c\u6211\u4eec\u8003\u8651\u5176\u4ed6\u60c5\u51b5\uff0c\u5728\u76f8\u4f4d\u5dee\u5c0f\u4e8e180\u5ea6\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5f97\u5230\u7684\u6b63\u5f26\u6ce2\u90fd\u5177\u6709\u4e0d\u540c\u7684\u5e45\u5ea6\u548c\u76f8\u4f4d\uff0c\u4f46\u9891\u7387\u76f8\u540c\u3002\n\u4e0b\u9762\u662f\u8ba1\u7b97\u4ea7\u751f\u7684\u6b63\u5f26\u6ce2\u7684\u76f8\u4f4d\u548c\u632f\u5e45\u7684\u65b9\u6cd5\u3002\u5c06\u632f\u5e45\u548c\u76f8\u4f4d\u8f6c\u6362\u4e3a\u4e00\u4e2a\u590d\u6570\uff0c\u5176\u4e2d\u89d2\u5ea6\u662f\u76f8\u4f4d\uff0c\u7edd\u5bf9\u503c\u662f\u632f\u5e45\u3002\n\u5982\u679c\u4f60\u5bf9\u8fd9\u4e24\u4e2a\u5f26\u6ce2\u90fd\u8fd9\u6837\u505a\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u4eec\u52a0\u5728\u4e00\u8d77\u4f5c\u4e3a\u590d\u6570\u3002\n(A\u6ce2)\u5e45\u5ea61\uff0c\u76f8\u4f4d0\uff0c(B\u6ce2)\u5e45\u5ea61\uff0c90\u5ea6\u9636\u6bb5\r\r_-|-__-0-__-|-0\r/|\\/|\\/|\\\r|\r-|-+-0-+-|-|--=--|\r|\r\\_|_/\\_|\u3002_/\\_|_/\r-|\u3002\n\u5982\u60a8\u6240\u89c1\uff0c\u65b0\u6b63\u5f26\u6ce2\u7684\u76f8\u4f4d\u4e3a45\u5ea6\uff0c\u632f\u5e45SQRT(1^2+1^2)=SQRT(2)=\u7ea61.4\u3002\n\u7406\u89e3\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5c06\u9891\u7387\u7684\u632f\u5e45\u548c\u76f8\u4f4d\u8868\u793a\u4e3a\u590d\u6570\u66f4\u4e3a\u5b9e\u7528\u3002\n\u5f53\u628a\u4e24\u4e2a\u91c7\u6837\u7684\u58f0\u97f3\u52a0\u5728\u4e00\u8d77\u65f6\uff0c\u4f60\u5b9e\u9645\u4e0a\u53ef\u80fd\u4f1a\u62b9\u53bb\u4e00\u4e9b\u9891\u7387\uff0c\u90a3\u4e9b\u5177\u6709\u76f8\u53cd\u76f8\u4f4d\u548c\u76f8\u7b49\u5e45\u5ea6\u7684\u9891\u7387\u3002\u4ea7\u751f\u7684\u58f0\u97f3\u7684\u5e73\u5747\u632f\u5e45\u662f(\u5bf9\u4e8e\u72ec\u7acb\u7684\u539f\u58f0)SQRT(a^2+b^2)\uff0c\u5176\u4e2da\u548cb\u662f\u539f\u59cb\u4fe1\u53f7\u7684\u632f\u5e45\u3002\n\u6ee4\u6ce2\u5668\u7684\u4e3b\u8981\u7528\u9014\u662f\u7f29\u653e\u58f0\u97f3\u4e2d\u9891\u7387\u5206\u91cf\u7684\u5e45\u5ea6\u3002\u4f8b\u5982\uff0c\u4f4e\u901a\u6ee4\u6ce2\u5668\u4f1a\u5c06\u622a\u6b62\u9891\u7387\u4ee5\u4e0a\u7684\u6240\u6709\u9891\u7387\u5206\u91cf\u9759\u97f3\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5c06\u5e45\u5ea6\u4e58\u4ee50\u3002\u5b83\u8ba9\u6240\u6709\u4f4e\u4e8e\u622a\u6b62\u9891\u7387\u7684\u9891\u7387\u4e0d\u53d7\u8870\u51cf\u5730\u901a\u8fc7\u3002\n\u5982\u679c\u4f60\u901a\u8fc7\u9a71\u52a8\u4e0d\u540c\u9891\u7387\u7684\u6b63\u5f26\u6ce2\u6765\u7814\u7a76\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u6027\u80fd\uff0c\u5e76\u6d4b\u91cf\u653e\u5927\u5668\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u5e45\u503c\u9891\u7387\u54cd\u5e94\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u5e45\u9891\u54cd\u5e94\u66f2\u7ebf\u66f2\u7ebf\u56fe\uff1a\n1-+\r\\\\\rAudible|\u542c\u4e0d\u5230\r||\r||\r\\_\r0-+--==\r||\r0 HZ\u6700\u5927\u622a\u6b62\u9891\u7387\u3002\n\u9891\u7387\u5728\u8f74\u4e0a\uff0c\u653e\u5927\u5728\u8f74\u4e0a\u3002\u5982\u4f60\u6240\u89c1\uff0c\u4f4e\u4e8e\u622a\u6b62\u9891\u7387\u7684\u9891\u7387\u7684\u653e\u5927\u500d\u6570\u662f1\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u7684\u5e45\u5ea6\u4e0d\u4f1a\u53d7\u5230\u4efb\u4f55\u5f71\u54cd\u3002\u4f46\u662f\u9ad8\u4e8e\u622a\u6b62\u9891\u7387\u7684\u9891\u7387\u7684\u5e45\u5ea6\u88ab\u4e58\u4ee5\u96f6\uff0c\u6240\u4ee5\u5b83\u4eec\u5c31\u6d88\u5931\u4e86\u3002\n\u8fc7\u6ee4\u5668\u4ece\u6765\u4e0d\u4f1a\u7ed9\u58f0\u97f3\u6dfb\u52a0\u4efb\u4f55\u65b0\u7684\u9891\u7387\u6210\u5206\u3002\u4ed6\u4eec\u53ea\u80fd\u8c03\u6574\u5df2\u7ecf\u5b58\u5728\u7684\u9891\u7387\u7684\u5e45\u5ea6\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5b8c\u5168\u5b89\u9759\u7684\u6837\u54c1\uff0c\u4f60\u4e0d\u80fd\u901a\u8fc7\u8fc7\u6ee4\u5f97\u5230\u4efb\u4f55\u58f0\u97f3\u3002\u6b64\u5916\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u6b63\u5f26\u6ce2\u6837\u672c\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u6ee4\u6ce2\uff0c\u7ed3\u679c\u4ecd\u7136\u662f\u76f8\u540c\u7684\u6b63\u5f26\u6ce2\uff0c\u53ea\u662f\u5e45\u5ea6\u548c\u76f8\u4f4d\u53ef\u80fd\u4e0d\u540c--\u4e0d\u4f1a\u51fa\u73b0\u5176\u4ed6\u9891\u7387\u3002\n\u4e13\u4e1a\u4eba\u58eb\u4e0d\u538c\u5176\u70e6\u5730\u63d0\u9192\u6211\u4eec\uff0c\u4e0d\u8981\u5fd8\u8bb0\u9636\u6bb5\u662f\u591a\u4e48\u91cd\u8981\u3002\u58f0\u97f3\u4e2d\u7684\u9891\u7387\u5206\u91cf\u6709\u5b83\u4eec\u7684\u632f\u5e45\u548c\u2026\u2026\u3002\u9636\u6bb5\u3002\u5982\u679c\u6211\u4eec\u53d6\u4e00\u4e2a\u6b63\u5f26\u6ce2\u548c\u4e00\u4e2a\u4f59\u5f26\u6ce2\uff0c\u6211\u4eec\u770b\u5230\u5b83\u4eec\u770b\u8d77\u6765\u5f88\u76f8\u4f3c\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u76f8\u4f4d\u5dee\u662f\u03c0/2\uff0c\u4e00\u4e2a\u5b8c\u6574\u5468\u671f\u7684\u56db\u5206\u4e4b\u4e00\u3002\u800c\u4e14\uff0c\u5f53\u4f60\u64ad\u653e\u5b83\u4eec\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u542c\u8d77\u6765\u5f88\u50cf\u3002\u4f46\u662f\uff0c\u8bd5\u7740\u6234\u4e0a\u8033\u673a\uff0c\u5728\u5de6\u58f0\u9053\u64ad\u653e\u6b63\u5f26\u6ce2\uff0c\u5728\u53f3\u58f0\u9053\u64ad\u653e\u4f59\u5f26\u6ce2\u3002\u73b0\u5728\u4f60\u542c\u5230\u533a\u522b\u4e86\u5427\uff01\n\u76f8\u4f4d\u672c\u8eab\u5e76\u4e0d\u5305\u542b\u91cd\u8981\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u4eec\u542c\u4e0d\u5230\u5b83\uff0c\u4f46\u662f\u4e24\u53ea\u8033\u6735\u4e4b\u95f4\u7684\u9891\u7387\u7684\u76f8\u4f4d\u5dee\u53ef\u4ee5\u7528\u6765\u4f30\u8ba1\u58f0\u97f3\u6765\u6e90\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u88ab\u542c\u5230\u4e86\u3002\n\u6ee4\u6ce2\u5668\u6709\u5e45\u5ea6\u9891\u7387\u54cd\u5e94\uff0c\u4f46\u4e5f\u6709\u76f8\u4f4d\u9891\u7387\u54cd\u5e94\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u80fd\u6765\u81ea\u4f4e\u901a\u6ee4\u6ce2\u5668\u7684\u66f2\u7ebf\u793a\u4f8b\uff1a\n+pi-+---+\r_\r_-\\\r0-+=-|-=\r|\\_--\u3002--|\r\u6211\u60f3\u8bf4\u7684\u662f\r-pi-+---+\r||\r0 HZ\u6700\u5927\u622a\u6b62\u9891\u7387\u3002\n\u5982\u679c\u8fc7\u6ee4\u58f0\u97f3\uff0c\u6765\u81ea\u76f8\u4f4d\u9891\u7387\u54cd\u5e94\u7684\u503c\u5c06\u88ab\u52a0\u5230\u539f\u59cb\u58f0\u97f3\u7684\u9891\u7387\u7684\u76f8\u4f4d\u4e0a\u3002\n\u7ebf\u6027(\u76f4\u7ebf)\u76f8\u4f4d\u4e0e\u666e\u901a\u5ef6\u8fdf\u662f\u4e00\u6837\u7684\uff0c\u5c3d\u7ba1\u5b83\u5728\u60c5\u8282\u4e2d\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u75af\u72c2\uff0c\u5982\u679c\u5b83\u7ed5\u51e0\u5708\u7684\u8bdd\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u4f4e\u901a\u6ee4\u6ce2\u5668\u6ca1\u6709\u7ebf\u6027\u76f8\u4f4d\u9891\u7387\u54cd\u5e94\uff0c\u4f60\u4e0d\u80fd\u901a\u8fc7\u7b80\u5355\u5730\u4ee5\u76f8\u7b49\u7684\u5ef6\u8fdf\u4ece\u539f\u59cb\u8f93\u51fa\u4e2d\u51cf\u53bb\u5b83\u7684\u8f93\u51fa\u6765\u5c06\u5176\u53d8\u6210\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\n\u6ee4\u6ce2\u5668\u5bf9\u5355\u4e2a\u9891\u7387\u7684\u54cd\u5e94\u53ef\u4ee5\u8868\u793a\u4e3a\u590d\u6570\uff0c\u5176\u4e2d\u89d2\u5ea6\u662f\u6ee4\u6ce2\u5668\u7684\u76f8\u4f4d\u54cd\u5e94\uff0c\u7edd\u5bf9\u503c\u662f\u5e45\u503c\u54cd\u5e94\u3002\u5f53\u60a8\u5c06\u8fc7\u6ee4\u5668\u5e94\u7528\u4e8e\u58f0\u97f3\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u5c06\u58f0\u97f3\u4e2d\u7684\u6240\u6709\u9891\u7387\u5206\u91cf\u4e0e\u76f8\u5e94\u7684\u8fc7\u6ee4\u5668\u54cd\u5e94\u503c\u8fdb\u884c\u590d\u6570\u4e58\u6cd5\u3002(\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u5f88\u96be\u7406\u89e3\uff0c\u8bf7\u9605\u8bfb\u300a\u628a\u4e24\u6761\u5f26\u6ce2\u52a0\u5728\u4e00\u8d77\u300b\u4e00\u7ae0\u3002)\u3002\u4f8b\u5982\uff1a\u57281000\u8d6b\u5179\u65f6\uff0c\u6ee4\u6ce2\u5668\u7684\u54cd\u5e94\u4e3a(0\uff0c1)\u3002\u60a8\u53ef\u4ee5\u8fc7\u6ee4\u4e00\u4e2a\u6b63\u5f26\u6ce2\uff0c\u5176\u76f8\u4f4d\u548c\u5e45\u503c\u4fe1\u606f\u663e\u793a\u4e3a\u4e0e\u5176\u9891\u7387\u76f8\u540c\u7684\u590d\u6570(0\uff0c1)\uff1a\n\u6b63\u5f26\u6ce2\uff1a\u8fc7\u6ee4\u5668\uff1a\u7ed3\u679c\uff1a\r_-0-__-0-_-|-_\r/|\\/|\\/|\\\r|\r-||-+-|--*-|-+-|--=-0\r|\r\\_\u3002|_/\\_|_/\\_|_/\r-|\u3002\n\u6b63\u5f26\u6ce2\u7684\u76f8\u4f4d\u65cb\u8f6c\u4e8690\u5ea6\u3002\u632f\u5e45\u6ca1\u6709\u53d8\u5316\u3002\n\u4e32\u8054\u7684\u8fd9\u4e24\u4e2a\u6ee4\u6ce2\u5668\u7684\u7ec4\u5408\u54cd\u5e94\u662fA\u7684\u54cd\u5e94\u4e58\u4ee5B\u7684\u54cd\u5e94(\u590d\u6570\u603b\u662f\uff01)\u3002\u5982\u679c\u4f60\u53ea\u9700\u8981\u77e5\u9053\u9707\u7ea7\u54cd\u5e94\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e58\u4ee5\u7edd\u5bf9\u503c\u3002\n\u5728\u56fe\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u8fc7\u6ee4\u5668\u7684\u8f93\u5165\u6765\u81ea\u76f8\u540c\u7684\u6765\u6e90\u3002\u7136\u540e\u5c06\u5b83\u4eec\u7684\u8f93\u51fa\u52a0\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u6700\u7ec8\u8f93\u51fa\u3002\u73b0\u5728\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u52a0\u6cd5\u6765\u6c42\u89e3\u7ec4\u5408\u54cd\u5e94\u3002\nFIR\u6ee4\u6ce2\u5668\u66f4\u76f4\u89c2\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u6709\u9650\u8109\u51b2\u54cd\u5e94\u662f\u6307\u5f53\u6ee4\u6ce2\u5668\u8f93\u5165\u4fdd\u6301\u4e3a\u96f6\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u6ee4\u6ce2\u5668\u8f93\u51fa\u4e5f\u53d8\u4e3a\u96f6\u3002\u65e0\u9650\u8109\u51b2\u54cd\u5e94\u6ee4\u6ce2\u5668\u5728\u5173\u95ed\u8f93\u5165\u540e\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u5168\u7a33\u5b9a\u4e0b\u6765\uff0c\u4f46\u5b83\u786e\u5b9e\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5b89\u9759\u3002\n\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u5bf9\u58f0\u97f3\u7684\u5f71\u54cd\u53d6\u51b3\u4e8e\u7cfb\u6570(a0\uff0ca1\uff0ca2)\u3002\u9009\u62e9\u7cfb\u6570\u503c\u662f\u6700\u56f0\u96be\u7684\u90e8\u5206\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u8ba8\u8bba\u8fd9\u4e00\u70b9\u3002\u8981\u8bbe\u8ba1\u81ea\u5df1\u7684\u8fc7\u6ee4\u5668\uff0c\u60a8\u9700\u8981\u4e86\u89e3\u80cc\u540e\u7684\u4e00\u4e9b\u6570\u5b66\u77e5\u8bc6\uff0c\u5e76\u77e5\u9053\u6b63\u786e\u7684\u65b9\u6cd5\u3002\n\u5728\u4e0a\u9762\u7684\u7b5b\u9009\u5668\u793a\u4f8b\u4e2d\uff0c\u53ea\u4f7f\u7528\u8fc7\u53bb\u7684\u8f93\u5165\u503c\u3002\u5728\u5b9e\u65f6\u8fc7\u6ee4\u5668\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u8981\u6c42\uff0c\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u672a\u6765\u7684\u8f93\u5165\u3002\u5728\u6837\u4f8b\u7f16\u8f91\u5668\u4e4b\u7c7b\u7684\u5730\u65b9\uff0c\u60a8\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u56e0\u4e3a\u60a8\u5728\u5f00\u59cb\u65f6\u5c31\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u5168\u90e8\u8f93\u5165\u6570\u636e\u3002\n\u4e0eFIR\u6ee4\u6ce2\u5668\u4e0d\u540c\uff0cIIR\u6ee4\u6ce2\u5668\u8fd8\u4f7f\u7528\u5176\u5148\u524d\u7684\u8f93\u51fa\u503c\u6765\u521b\u5efa\u5176\u5f53\u524d\u8f93\u51fa\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\n\u53ef\u4ee5\u6709\u591a\u79cd\u65b9\u6cd5\u6765\u5b9e\u73b0\u76f8\u540c\u7684IIR\u6ee4\u6ce2\u5668\u3002\u6709\u4e9b\u53ef\u80fd\u6bd4\u901a\u5e38\u7684\u8f93\u5165-\u8f93\u51fa-\u7cfb\u6570\u65b9\u5f0f\u66f4\u5feb\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u6bcf\u4e2aIIR\u6ee4\u6ce2\u5668\u90fd\u53ef\u4ee5\u7528\u8fd9\u79cd\u5f62\u5f0f\u7f16\u5199\uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u548c\u68c0\u67e5\u8ba1\u7b97\u4e2d\u4f7f\u7528\u3002\n\u5728\u6837\u672c\u6570\u636e\u4e2d\uff0cIIR\u6ee4\u6ce2\u5668\u7684\u8109\u51b2\u54cd\u5e94(=\u6ee4\u6ce2\u5668\u5bf9\u4e00\u4e2a\u91c7\u6837\u70b9\u8109\u51b2\u7684\u54cd\u5e94)\u901a\u5e38\u5927\u81f4\u5982\u4e0b\u6240\u793a\uff1a\n\u4e00\u4e9b\u8bbe\u8ba1\u7cdf\u7cd5\u7684IIR\u6ee4\u5149\u7247\u662f\u4e0d\u7a33\u5b9a\u7684\u3002\u8fd9\u4f1a\u5bfc\u81f4\u8f93\u51fa\u7684\u58f0\u97f3\u8d8a\u6765\u8d8a\u5927\uff0c\u800c\u4e0d\u662f\u8d8a\u6765\u8d8a\u5b89\u9759\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f\uff1aOutput(T)=Input(T)+2*Output(t-1)\u3002\u4e00\u65e6\u5b83\u83b7\u5f97\u8f93\u5165\u6570\u636e\uff0c\u5b83\u5c31\u4f1a\u53d8\u5f97\u75af\u72c2\u3002\n\u4e0a\u8ff0\u8fc7\u6ee4\u5668\u7c7b\u578b\u9010\u4e2a\u6837\u672c\u5730\u5904\u7406\u6570\u636e\u3002\u5982\u679c\u4f60\u4f7f\u7528\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362(FFT)\u6765\u5b9e\u73b0\u4f60\u7684\u6ee4\u6ce2\u5668\uff0c\u60c5\u51b5\u5c31\u4e0d\u662f\u8fd9\u6837\u4e86\u3002FFT\u901a\u5e38\u64cd\u4f5c\u957f\u5ea6\u4e3a2^n\u7684\u5757\u3002\u9996\u5148\uff0c\u4f60\u5e94\u8be5\u51c6\u5907\u597d\u4f60\u8ba1\u5212\u7684\u6ee4\u6ce2\u5668\u8109\u51b2\u54cd\u5e94\u3002\u7136\u540e\uff0c\u4f7f\u7528FFT\u5c06\u5176\u8f6c\u6362\u4e3a\u9891\u8c31\u4fe1\u606f\uff0c\u5373\u4ee3\u8868\u9891\u7387\u5206\u91cf\u7684\u76f8\u4f4d\u548c\u5e45\u5ea6\u7684\u590d\u6570\u3002\u8fd9\u4e9b\u5206\u91cf\u88ab\u79f0\u4e3a\u6876\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u9891\u7387\u662f\u56fa\u5b9a\u4e14\u5747\u5300\u5206\u5e03\u7684\uff0c\u5982\u679c\u539f\u59cb\u6570\u636e\u5305\u542b\u4efb\u4f55\u4e2d\u95f4\u9891\u7387\uff0c\u90a3\u4e48\u8fd9\u79cd\u9891\u7387\u7684\u5927\u90e8\u5206\u80fd\u91cf\u5c06\u5206\u5e03\u5728\u9644\u8fd1\u7684\u6876\u4e2d\u3002\u73b0\u5728\uff0c\u60a8\u8fd8\u9700\u8981\u5bf9\u8981\u8fc7\u6ee4\u7684\u6837\u672c\u6570\u636e\u8fdb\u884c\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362\uff0c\u5e76\u5c06\u5f97\u5230\u7684\u9891\u7387\u6bb5\u4e0e\u8fc7\u6ee4\u5668\u4e2d\u7684\u9891\u7387\u6bb5\u76f8\u4e58\u3002\u7136\u540e\u4f7f\u7528IFFT(\u9006FFT)\u5c06\u4fe1\u606f\u8f6c\u6362\u6210\u7ecf\u8fc7\u6ee4\u6ce2\u7684\u6837\u672c\u6570\u636e\u5757\u3002\n\u56e0\u6b64\uff0c\u4e24\u4e2a\u9891\u57df\u6570\u636e\u7684\u76f8\u4e58\u5bfc\u81f4\u4e86\u4e24\u4e2a\u65f6\u57df\u6570\u636e\u7684\u5377\u79ef\u3002\u7136\u800c\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff1aFFT\u5bf9\u5468\u671f\u4fe1\u53f7\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u4e0eFFT\u5757\u4e00\u6837\u957f\u7684\u6ee4\u6ce2\u5668\u8109\u51b2\u54cd\u5e94\uff0c\u90a3\u4e48FFT\u5757\u4e2d\u95f4\u7684\u4efb\u4f55\u975e\u96f6\u6837\u672c\u6570\u636e\u90fd\u5c06\u4ea7\u751f\u5377\u79ef\uff0c\u4f7f\u6ee4\u6ce2\u5668\u7684\u5c3e\u90e8\u7ed5\u8fc7FFT\u8fb9\u754c\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e24\u500d\u4e8e\u6ee4\u6ce2\u5668\u8109\u51b2\u54cd\u5e94\u65f6\u95f4\u7684FFT\uff0c\u5e76\u4e14\u5728\u5bf9\u91c7\u6837\u6570\u636e\u6267\u884cFFT\u65f6\uff0c\u53ea\u9700\u5c06FFT\u8f93\u5165\u7f13\u51b2\u5668\u586b\u6ee1\u4e00\u534a\uff0c\u5e76\u5c06\u5176\u4f59\u8f93\u5165\u8bbe\u7f6e\u4e3a\u96f6\u3002\u5bf9\u4e8e\u8f83\u957f\u7684\u8f93\u5165\uff0c\u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837\u5904\u7406\u5757\u4e2d\u7684\u6570\u636e\uff0c\u7136\u540e\u5c06\u5f97\u5230\u7684\u8fc7\u6ee4\u540e\u7684\u5757\u76f8\u52a0\u5728\u4e00\u8d77\u3002\u8fd9\u79f0\u4e3a\u91cd\u53e0\u6dfb\u52a0\u65b9\u6cd5\u3002\u53e6\u4e00\u4e2a\u9009\u9879\u662f\u91cd\u53e0\u4fdd\u5b58(\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\u53ef\u4ee5\u67e5\u4e00\u4e0b)\u3002\n\u65e0\u8bba\u51fa\u4e8e\u4f55\u79cd\u539f\u56e0\uff0cFFT\u4e5f\u53ef\u4ee5\u7528\u6765\u5206\u6790\u6837\u672c\u6570\u636e\u7684\u9891\u7387\u6210\u5206\u3002\u5982\u679c\u4f60\u53ea\u53d6\u4e00\u5927\u5757\u6837\u672c\u6570\u636e\uff0c\u5b83\u6709\u5c16\u9510\u7684\u8fb9\u7f18\uff0c\u8fd9\u5bf9FFT\u4e0d\u5229\u3002\u6211\u4eec\u4f7f\u7528\u7a97\u53e3\u51fd\u6570\u6765\u5e73\u6ed1\u8fd9\u4e9b\u8fb9\u7f18\u3002\u5347\u4f59\u5f26\uff0ccos(x pi/2)^2\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u7a97\u53e3\u51fd\u6570\u3002\u4e0b\u9762\u60a8\u5c06\u770b\u5230\u5f53\u60a8\u5c06\u7a97\u53e3\u51fd\u6570\u5e94\u7528\u4e8e\u4e00\u5927\u5757\u6837\u672c\u6570\u636e\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a\n\u793a\u4f8b\u6570\u636e\u5757\uff1a\u7a97\u53e3\u51fd\u6570\uff1a\u7ed3\u679c\uff1a\r(\u65b9\u6ce2)(\u5347\u4f59\u5f26)\r\r1-|-||_-_||_--|\r||/\\|\r||_/\\_||\\_\r0-||*|-|=|--_--|\r|\\\r|\\_/\r-1-|-|--\u3002\n\u6709\u65f6(\u91cd\u65b0\u91c7\u6837\uff0c\u7cbe\u786e\u5b9a\u4e49\u7684\u5ef6\u8fdf)\uff0c\u60a8\u9700\u8981\u4ece\u5df2\u77e5\u91c7\u6837\u70b9\u4e4b\u95f4\u83b7\u53d6\u91c7\u6837\u503c\u3002\u8fd9\u5c31\u662f\u4f60\u9700\u8981\u63d2\u8865\u7684\u65f6\u5019\u3002\u5982\u679c\u4f60\u4e0d\u63d2\u8865\uff0c\u53ea\u662f\u6254\u6389\u6837\u672c\u504f\u79fb\u91cf\u7684\u5c0f\u6570\u90e8\u5206\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u5f88\u591a\u9ad8\u9891\u5931\u771f\uff1a\n0-0-0-0\r|||\r0-0-0-0\r|||\r0-0-0-0\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u539f\u59cb\u91c7\u6837\u70b9\u5c1d\u8bd5\u8868\u793a\u6b63\u5f26\u6ce2\u3002\u63d2\u8865\u66f2\u7ebf\u8d8a\u63a5\u8fd1\u6b63\u5f26\u6ce2\uff0c\u63d2\u8865\u7b97\u6cd5\u8d8a\u597d\u3002\u6700\u7b80\u5355\u7684\u63d2\u8865\u65b9\u6cd5\u662f\u7ebf\u6027\u63d2\u8865\u3002\u5728\u4e24\u4e2a\u76f8\u90bb\u91c7\u6837\u70b9\u4e4b\u95f4\u7ed8\u5236\u76f4\u7ebf\uff1a\n0__0-0__0\r-__--__-\r0__0 0__0\r-__--__-\r0-0 0-0\u3002\n\u5b83\u770b\u8d77\u6765\u4ecd\u7136\u662f\u4e00\u4e2a\u975e\u5e38\u524d\u536b\u7684\u6b63\u5f26\u6ce2\u3002\u7136\u800c\uff0c\u5bf9\u975e\u63d2\u503c\u7684\u6539\u8fdb\u662f\u663e\u8457\u7684\u3002\u8fd9\u4e5f\u6709\u4e00\u4e2a\u7f3a\u70b9--\u7565\u4f4e\u4e8e\u5948\u594e\u65af\u7279\u9891\u7387\u7684\u9891\u7387\u4f1a\u53d7\u5230\u8870\u51cf\uff0c\u751a\u81f3\u6bd4\u6ca1\u6709\u63d2\u8865\u7684\u60c5\u51b5\u4e0b\u8fd8\u8981\u4e25\u91cd\u3002\u8fd9\u91cc\u662f\u7ebf\u6027\u63d2\u503c\u7684\u516c\u5f0f\uff1anew=old(Int)+(old(int+1)-old(Int))*FRACT\uff0c\u5176\u4e2dint\u8868\u793a\u6837\u672c\u504f\u79fb\u91cf\u7684\u6574\u6570\u90e8\u5206\uff0cFRACT\u8868\u793a\u5c0f\u6570\u90e8\u5206\u3002\n\u4e0b\u4e00\u6b65\u53ef\u80fd\u662fHermite\u66f2\u7ebf\uff0c\u5b83\u5728\u5404\u4e2a\u65b9\u9762\u90fd\u6bd4\u7ebf\u6027\u63d2\u503c\u63d0\u4f9b\u66f4\u597d\u7684\u8d28\u91cf\uff1a\n___\r0_-0 0-_0\r__\r0__0 0__0\r_\r-0_0--0__0-\n\u4f7f\u7528\u7ebf\u6027\u63d2\u503c\u6cd5\uff0c\u4f60\u9700\u8981\u4e00\u6b21\u77e5\u90532\u4e2a\u91c7\u6837\u70b9\u624d\u80fd\u753b\u51fa\u8fd9\u6761\u7ebf\u3002\u5bf9\u4e8eHermite\u66f2\u7ebf\uff0c\u5176\u6570\u503c\u4e3a4\u3002\u63d2\u503c\u66f2\u7ebf\u7a7f\u8fc7\u4e24\u4e2a\u4e2d\u95f4\u70b9\uff0c1\u70b9\u548c4\u70b9\u7528\u4e8e\u66f2\u7ebf\u7684\u6574\u5f62\u3002\u516c\u5f0f\u662f\u7acb\u65b9\u7684\uff1a\nNEW=a*FRACT^3+b*FRACT^2+c*FRACT+old(int+0)\uff0c\u5728\u54ea\u91cc\uff1a\r\r3(old(Int)-old(int+1))-old(int-1)+old(int+2)\rA=---\r2\u4e2a\r5\u65e7(\u6574\u578b)+\u65e7(\u6574\u578b+2)\rB=2\u65e7(int+1)+\u65e7(int-1)\u3002\r2\u4e2a\r\u65e7(int+1)-\u65e7(int-1)\rC=\r2\u4e2a\u3002\nF(X)=ax^3+bx^2+cx+d\r\r/f(0)=y(0)\r|\r|f(1)=y(1)\r&lt\uff1b\r|f&#39\uff1b(0)=(y(1)-y(-1))/2\r|\r\\F&#39\uff1b(1)=(y(2)-y(0))/2\u3002\n\u4e00\u4e2a\u5b8c\u7f8e\u7684\u63d2\u503c\u6cd5\u4e5f\u662f\u5b58\u5728\u7684\u3002\u901a\u8fc7\u7528\u6b63\u786e\u7f29\u653e\u7684sinc\u66f2\u7ebfsin(Pi X)/(Pi X)\u66ff\u6362\u6240\u6709\u91c7\u6837\u70b9\uff0c\u5e76\u5c06\u5b83\u4eec\u76f8\u52a0\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7cbe\u786e\u3001\u5b8c\u7f8e\u7684\u63d2\u503c\u3002\u4ee5\u4e0b\u662f\u7528\u7f29\u653e\u7684\u6b63\u5f26\u66f2\u7ebf\u66ff\u6362\u7684\u91c7\u6837\u70b9\u4e4b\u4e00\uff1a\n_--0--_0\r0_/\\_\r_/\\_\r_/\\_-__\r-/-+-\\-/-\\-/=\r\\_/\\_/\u3002--\r-0-0\r0\u3002\n\u6b63\u5f26\u66f2\u7ebf\u662f\u65e0\u9650\u957f\u7684\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u4f7f\u7528\u6240\u6709\u7684\u91c7\u6837\u70b9\u6765\u8ba1\u7b97\u4e00\u4e2a\u63d2\u503c\u503c\u3002\u4e00\u4e2a\u5b9e\u9645\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u6837\u672c\u6570\u91cf\u9650\u5236\u57281000\u4e2a\u4ee5\u5185\u3002\u5bf9\u4e8e\u5b9e\u65f6\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u5b83\u4ecd\u7136\u592a\u6162\u4e86\uff0c\u4f46\u5b83\u4f1a\u63d0\u4f9b\u5f88\u9ad8\u7684\u7cbe\u786e\u5ea6\u3002\u5982\u679c\u60a8\u575a\u6301\u5728\u5b9e\u65f6\u63d2\u503c\u7b97\u6cd5\u4e2d\u4f7f\u7528sinc\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528\u7a97\u53e3\u51fd\u6570\u548c\u8f83\u5c11\u7684sinc\u66f2\u7ebf(\u81f3\u5c116\u6761)\u3002\n\u5982\u679c\u8981\u4e0b\u91c7\u6837(\u964d\u4f4e\u91c7\u6837\u7387)\uff0c\u5fc5\u987b\u9996\u5148\u8fc7\u6ee4\u6389\u4e0a\u8ff0\u5948\u594e\u65af\u7279\u9891\u7387\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u5728\u4e0b\u91c7\u6837\u7684\u6837\u672c\u4e2d\u663e\u793a\u4e3a\u5931\u771f\u3002\n\u5728\u6ee4\u6ce2\u5668\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\uff0c\u5f80\u5f80\u9700\u8981\u505a\u51fa\u59a5\u534f\u3002\u8981\u5728\u5e45\u503c\u54cd\u5e94\u4e2d\u5177\u6709\u9510\u5229\u7684\u8fb9\u7f18\u6216\u9661\u5ced\u7684\u659c\u5761\uff0c\u60a8\u5c06\u9700\u8981\u4e00\u4e2a\u5927\u7684\u3001\u56e0\u6b64\u901f\u5ea6\u8f83\u6162\u7684\u6ee4\u955c\u3002\u6362\u8a00\u4e4b\uff0c\u62bd\u5934\u6570\u8f83\u5c11\u7684\u6ee4\u5149\u5668\u5b9e\u9645\u4e0a\u603b\u662f\u5177\u6709\u5e73\u7f13\u503e\u659c\u7684\u5e45\u5ea6\u54cd\u5e94\u3002\n\u5728IIR\u6ee4\u6ce2\u5668\u7684\u60c5\u51b5\u4e0b\uff0c\u5e45\u5ea6\u7684\u5c16\u9510\u8fb9\u7f18\u901a\u5e38\u610f\u5473\u7740\u4e11\u964b(\u975e\u5e38\u975e\u7ebf\u6027)\u7684\u76f8\u4f4d\u9891\u7387\u54cd\u5e94\uff0c\u800c\u63a5\u8fd1\u7ebf\u6027\u7684\u76f8\u4f4d\u54cd\u5e94\u610f\u5473\u7740\u5e45\u5ea6\u54cd\u5e94\u7684\u5e73\u7f13\u503e\u659c\u3002\u4f7f\u7528FIR\u6ee4\u6ce2\u5668\uff0c\u8bd5\u56fe\u521b\u5efa\u975e\u5e38\u9510\u5229\u7684\u8fb9\u7f18\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9644\u8fd1\u9891\u7387\u7684\u5e45\u5ea6\u6ce2\u52a8\u3002\nIIR\u6ee4\u6ce2\u5668\u975e\u5e38\u9002\u5408\u5b9e\u65f6\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5b83\u4eec\u901f\u5ea6\u5feb\uff0c\u5b83\u4eec\u7684\u7279\u6027(\u4f8b\u5982\u622a\u6b62\u9891\u7387)\u53ef\u4ee5\u5728\u52a8\u4f5c\u8fc7\u7a0b\u4e2d\u5feb\u901f\u6539\u53d8\uff0c\u800c\u4e14\u5b83\u4eec\u542c\u8d77\u6765\u50cf\u771f\u6b63\u7684\u6a21\u62df\u6ee4\u6ce2\u5668\u3002\uff1a)IIR\u6ee4\u5149\u7247\u7684\u975e\u7ebf\u6027\u76f8\u4f4d\u54cd\u5e94\u901a\u5e38\u65e0\u5173\u7d27\u8981\u3002\nFIR\u6ee4\u6ce2\u5668\u53ef\u4ee5\u5728\u8d28\u91cf\u548c\u7ebf\u6027\u76f8\u4f4d\u5f88\u91cd\u8981\u7684\u5730\u65b9\u4f7f\u7528\uff0c\u4f8b\u5982\uff0c\u5728\u6837\u672c\u7f16\u8f91\u5668\u4e2d\u3002\u5bf9\u58f0\u97f3\u4ee5\u5916\u7684\u5176\u4ed6\u4fe1\u53f7\u8fdb\u884c\u6ee4\u6ce2\u7684\u4eba\u5f80\u5f80\u5e0c\u671b\u83b7\u5f97\u7ebf\u6027\u76f8\u9891\u54cd\u5e94\u3002\n\u5bf9\u4e8e\u7acb\u4f53\u58f0\u4fe1\u53f7\uff0c\u5728\u5de6\u58f0\u9053\u548c\u53f3\u58f0\u9053\u4e0a\u5177\u6709\u76f8\u540c\u7684\u76f8\u4f4d\u53d8\u5316\u662f\u5f88\u91cd\u8981\u7684\u3002\n\u4f4e\u901a\u884c\u8bc1\uff1a\r__________________\r|_\r\u6d77\u5e15\u65af\uff1a\r__________________\r_\r\u5e26\u901a\u6216\u5cf0\u503c\uff1a\r_\r_||_\r\u5f00\u69fd\uff0c\u5e26\u963b\u6216\u5e26\u963b\uff1a\r_\r_\r\u6240\u6709\u901a\u884c\u8bc1\uff1a\r_(\u4ec5\u9650\u76f8\u53d8)\u3002\n\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u7b26\u53f7\u8ba1\u7b97\u7a0b\u5e8f\uff0c\u6211\u5f3a\u70c8\u5efa\u8bae\u4f60\u5728\u673a\u68b0\u8ba1\u7b97\u4e2d\u4f7f\u7528\u5b83\uff0c\u53ea\u662f\u4e3a\u4e86\u8ba9\u4f60\u7684\u751f\u6d3b\u66f4\u5bb9\u6613\u3002\u6d3e\u751f\u662f\u4e00\u4e2a\u65e7\u7684DOS\u7a0b\u5e8f\uff0c\u4f46\u4ecd\u7136\u975e\u5e38\u6709\u7528\u3002\n\u767d\u566a\u58f0\u6307\u7684\u662f\u9891\u8c31\u5e73\u5766\u7684\u90a3\u79cd\u566a\u58f0\u3002\u901a\u8fc7\u4f7f\u7528\u968f\u673a\u6570\u4f5c\u4e3a\u6837\u672c\u503c\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u521b\u5efa\u5b83\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\u6ee4\u6ce2\u5668\u7684\u5e45\u9891\u54cd\u5e94\uff0c\u628a\u5b83\u5e94\u7528\u5230\u767d\u566a\u58f0\u7684\u957f\u6837\u672c\u4e0a\uff0c\u7136\u540e\u5bf9\u8f93\u51fa\u8fdb\u884c\u9891\u8c31\u5206\u6790\u3002\u4f60\u770b\u5230\u7684\u662f\u6ee4\u6ce2\u5668\u7684\u5e45\u9891\u54cd\u5e94\u3002\n\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u53d1\u9001\u4e00\u4e2a\u6837\u672c\u8109\u51b2\uff0c\u8be5\u8109\u51b2\u6700\u521d\u5177\u6709\u5e73\u5766\u7684\u9891\u8c31\u3002\u5728\u6837\u672c\u6570\u636e\u4e2d\uff0c\u8109\u51b2\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a0\uff0c0\uff0c0\uff0c0\uff0c1\uff0c0\uff0c0\uff0c0\uff0c0-\u5176\u4e2d\u8109\u51b2\u662f\u4e2d\u95f4\u7684&#34\uff1b1&#34\uff1b\u3002\n\u4e24\u8005\u76f8\u6bd4\uff0c\u8109\u51b2\u5904\u7406\u901f\u5ea6\u66f4\u5feb\uff0c\u4f46\u4f7f\u7528\u767d\u566a\u58f0\u53ef\u4ee5\u5f97\u5230\u770b\u8d77\u6765\u66f4\u5e72\u51c0\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u9519\u8bef\u5c06\u4e0d\u90a3\u4e48\u660e\u663e\u3002\u51fa\u4e8e\u5927\u81f4\u76f8\u540c\u7684\u539f\u56e0\uff0c\u5f53\u4f60\u5728\u770b\u89c6\u9891\u65f6\uff0c\u9759\u6b62\u7684\u56fe\u7247\u770b\u8d77\u6765\u4f1a\u6bd4\u8fd0\u884c\u7684\u56fe\u7247\u770b\u8d77\u6765\u66f4\u591a\u7684\u96ea\u3002\u5bf9\u957f\u6837\u672c\u8fdb\u884c\u5149\u8c31\u5206\u6790\u901a\u5e38\u662f\u5c06\u5176\u5206\u6210\u5c0f\u5757\uff0c\u5206\u522b\u8fdb\u884c\u5206\u6790\uff0c\u7136\u540e\u53d6\u6240\u6709\u5206\u6790\u7684\u5e73\u5747\u503c\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4e2a\u4eba\u9009\u62e9\u7684\u662fWindows\u7248\u7684Cool Edited96\u3002\n\u96f6\u6781\u70b9\u65b9\u6cd5\u662f\u8bbe\u8ba1\u5feb\u901f\u3001\u7b80\u5355\u7684IIR\u6ee4\u6ce2\u5668\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002\u5f53\u4f60\u5b66\u4f1a\u4e86\u5b83\uff0c\u4f60\u5c31\u80fd\u81ea\u5df1\u8bbe\u8ba1\u8fc7\u6ee4\u5668\u4e86\u3002\nPI/2&#34\uff1b|&#34\uff1b\u8f74\uff1a\u865a\u6570\r__-|-_&#34\uff1b-&#34\uff1b\u8f74\uff1a\u5b9e\u6570\r_/|\\_(\u4e00\u5982\u65e2\u5f80\uff01)\r/|\\\r||\rPI-|-+-|-0\r||\r\\_|_/\r\\__|__/\r-|\r3/2\u5706\u5468\u3002\n\u60f3\u8c61\u4e00\u4e0b\u56f4\u7ed5\u5355\u4f4d\u5706\u5305\u88f9\u7684\u9891\u7387\u3002\u5728\u89d2\u5ea60\uff0c\u6211\u4eec\u67090\u8d6b\u5179\uff0c\u5728pi/2\u6211\u4eec\u6709\u91c7\u6837\u7387/4\uff0c\u5728pi\u6211\u4eec\u6709\u91c7\u6837\u7387/2\uff0c\u5948\u594e\u65af\u7279\u9891\u7387\u3002\u4f60\u4e0d\u5e94\u8be5\u5173\u5fc3\u66f4\u9ad8\u7684\u9891\u7387\uff0c\u56e0\u4e3a\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u5728\u4fe1\u53f7\u4e2d\uff0c\u4f46\u4e0d\u7ba1\u600e\u6837\uff0c\u57282pi(\u5b8c\u6574\u5468\u671f)\uff0c\u6211\u4eec\u6709\u91c7\u6837\u9891\u7387\u3002\n\u56e0\u6b64\uff0c\u5982\u679c\u4f7f\u752844100\u8d6b\u5179\u7684\u91c7\u6837\u9891\u7387\uff0c0\u8d6b\u5179\u5c06\u5728(1\uff0c0)\u5904\uff0c11025\u8d6b\u5179\u5728(0\uff0c1)\u5904\uff0c22050\u8d6b\u5179\u5728(-1\uff0c0)\u5904\u3002\n__-|-__o x=\u6781\r_/o|\\_o=\u96f6\r/|x\\\r|x\r-|-o-+-|--\r|x\r\\_|x_/\r\\__o|__/\r-|-o\u3002\n\u6709\u4e9b\u89c4\u5219\u4f60\u5fc5\u987b\u8bb0\u4f4f\u3002\u6746\u5b50\u5fc5\u987b\u59cb\u7ec8\u5728\u5355\u4f4d\u5706\u7684\u5185\u90e8\uff0c\u4e0d\u80fd\u5728\u5355\u4f4d\u5706\u7684\u5916\u9762\u6216\u4e0a\u9762\u3002\u96f6\u53ef\u4ee5\u653e\u5728\u4efb\u4f55\u5730\u65b9\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u6570\u91cf\u7684\u6781\u70b9\u548c\u96f6\u70b9\uff0c\u4f46\u5982\u679c\u5b83\u4eec\u4e0d\u4f4d\u4e8e&#34\uff1b-&#34\uff1b\u8f74\u4e0a\uff0c\u5219\u5b83\u4eec\u5fc5\u987b\u90fd\u6709\u5171\u8f6d\u5bf9\u3002\u5171\u8f6d\u5bf9\u610f\u5473\u7740\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5c06\u4e00\u4e2a\u96f6\u8bbe\u7f6e\u4e3a(0.6\uff0c0.3)\uff0c\u5219\u5fc5\u987b\u5c06\u53e6\u4e00\u4e2a\u96f6\u8bbe\u7f6e\u4e3a\u5171\u8f6d\u5750\u6807(0.6\uff0c-0.3)\u3002\u6746\u5b50\u4e5f\u662f\u5982\u6b64\u3002\n\u6781\u70b9\u653e\u5927\u9891\u7387\uff0c\u96f6\u70b9\u8870\u51cf\u3002\n.", "note_en": "In 1998, I had some extra time while others were reading for final exams of the senior high school, and got into digital signal processing. I wrote as I learned, and here is the result. It is not entirely accurate in places but may serve as a nice tutorial into the world of audio DSP. Previously this document was called Yehar&#39;s digital sound processing tutorial for the braindead, but I have kinda grown out of my scene identity over the years. Enjoy the ASCII art!\n      This is written for the audio digital signal processing enthusiasts (as the title suggests ;) and others who need practical information on the subject. If you don&#39;t have this as a &#34;linear reading experience&#34; and encounter difficulties, check if there&#39;s something to help you out in the previous chapters.\n In filter frequency response plots, linear frequency and magnitude scales are used. Page changes are designed for 60+ lines/page printers.\n Chapter &#34;Shuffling IIR equations&#34; is written by my big brother Kalle. And, thanks to Timo Tossavainen for sharing his DSP knowledge!\n     Sampled sound data is a pile of samples, amplitude values taken from the actual sound wave. Sampling rate is the frequency of the &#34;shots&#34;. For example, if the frequency is 44100, 44100 samples have been taken in one second.\n  _0---0_\r _/ --0__\r 0_ __0---0__ _0 -0---0___\r \\_ _-0- -0-- 0-__\r +---0==-+--=0---+---+---+---+---+---+---+---+---+---+---+---0==-+---+\r -0-- -0_\r --0\r &lt;---&gt;\r 1/Samplerate\n The original sound is the curve, and &#34;0&#34;s are the sampled points. The horizontal straight line is the zero level.\n A sampled sound can only represent frequencies up to half the samplerate. This is called the Nyquist frequency. An easy proof: You need to have stored at least two samplepoints per wave cycle, the top and the bottom of the wave to be able to reconstruct it later on:\n 0\\ /0\\ /0\\ /0\\ /0\\ /0\\ /0\\ /0\\ /0\\\r | | | | | | | | | | | | | | | | |\r +-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+-|-+\r | | | | | | | | | | | | | | | | |\r \\0/ \\0/ \\0/ \\0/ \\0/ \\0/ \\0/ \\0/ \\0\n If you try to include above Nyquist frequencies in your sampled sound, all you get is extra distortion as they appear as lower frequencies.\n  A Sound consists of frequency components. They all look exactly like sine waves, but they have different frequencies, phases and amplitudes. Let&#39;s look at a single frequency:\n | __ __ __ __ |\r |/ \\ / \\ / \\ / \\ |\r /----\\----/----\\----/----\\----/----\\----/\r | \\__/ \\__/ \\__/ \\__/|\r | |\n Now, we take the same frequency from another sound and notice that it has the same amplitude, but the opposite (rotated 180 degrees) phase.\n | __ __ __ __ |\r | / \\ / \\ / \\ / \\|\r \\----/----\\----/----\\----/----\\----/----\\\r |\\__/ \\__/ \\__/ \\__/ |\r | |\n Merging two signals is done simply by adding them together. If we do the same with these two sine waves, the result will be:\n  It gets silent. If we think of other cases, where the phase difference is less than 180 degrees, we get sine waves that all have different amplitudes and phases, but the same frequency.\n Here&#39;s the way to calculate the phase and the amplitude of the resulting sinewave... Convert the amplitude and phase into one complex number, where angle is the phase, and absolute value the amplitude.\n  If you do this to both of the sinewaves, you can add them together as complex numbers.\n  (Wave A) amplitude 1, phase 0, (Wave B) amplitude 1, phase 90 degrees\r\r _---|---_ _---0---_ _---|---_ 0\r / | \\ / | \\ / | \\\r | | | | | | | | |\r -|-----+-----0- + -|-----+-----|- = -|-----+-----|-\r | | | | | | | | |\r \\_ | _/ \\_ | _/ \\_ | _/\r ---|--- ---|--- ---|---\n As you see, the phase of the new sine wave is 45 degrees and the amplitude sqrt(1^2+1^2) = sqrt(2) = about 1.4\n It is very important that you understand this, because in many cases, it is more practical to present the amplitude and the phase of a frequency as a complex number.\n When adding two sampled sounds together, you may actually wipe out some frequencies, those that had opposite phases and equal amplitudes. The average amplitude of the resulting sound is (for independent originals) sqrt(a^2+b^2) where a and b are the amplitudes of the original signals.\n  The main use of a filter is to scale the amplitudes of the frequency components in a sound. For example, a &#34;lowpass filter&#34; mutes all frequency components above the &#34;cutoff frequency&#34;, in other words, multiplies the amplitudes by 0. It lets through all the frequencies below the cutoff frequency unattenuated.\n  If you investigate the behaviour of a lowpass filter by driving various sinewaves of different frequencies through it, and measure the amplifications, you get the &#34;magnitude frequency response&#34;. Here&#39;s a plot of the magnitude frequency response curve of a lowpass filter:\n 1-+----------------------_ |\r | \\ |\r | Audible | Inaudible |\r | | |\r | | |\r | \\_ |\r 0-+---------------------------===========================\r | | |\r 0Hz Cutoff frequency max\n Frequency is on the &#34;-&#34; axis and amplification on the &#34;|&#34; axis. As you see, the amplification (= scaling) of the frequencies below the cutoff frequency is 1. So, their amplitudes are not affected in any way. But the amplitudes of frequencies above the cutoff frequency get multiplied by zero so they vanish.\n Filters never add any new frequency components to the sound. They can only scale the amplitudes of already existing frequencies. For example, if you have a completely quiet sample, you can&#39;t get any sound out of it by filtering. Also, if you have a sine wave sample and filter it, the result will still be the same sine wave, only maybe with different amplitude and phase - no other frequencies can appear.\n  Professionals never get tired of reminding us how important it is not to forget the phase. The frequency components in a sound have their amplitudes and... phases. If we take a sine wave and a cosine wave, we see that they look alike, but they have a phase difference of pi/2, one fourth of a full cycle. Also, when you play them, they sound alike. But, try wearing a headset and play the sinewave on the left channel and the cosine wave on the right channel. Now you hear the difference!\n Phase itself doesn&#39;t contain important information for us so it&#39;s not heard, but the phase difference, of a frequency, between the two ears can be used in estimating the position of the origin of the sound so it&#39;s heard.\n Filters have a magnitude frequency response, but they also have a phase frequency response. Here&#39;s an example curve that could be from a lowpass filter:\n +pi-+-----------------------------------------------------+\r | ___ |\r | _________----- \\ |\r 0-+======------------------|---------====================\r | \\___----- |\r | |\r -pi-+-----------------------------------------------------+\r | | |\r 0Hz Cutoff frequency max\n If you filter a sound, the values from the phase frequency response are added to the phases of the frequencies of the original sound.\n Linear (straight line) phase is the same thing as a plain delay, although it may look wild in the plot if it goes around several times. If your, for example, lowpass filter doesn&#39;t have a linear phase frequency response, you can&#39;t turn it into a highpass filter by simply subtracting its output from the original with equal delay.\n  The response of a filter for a single frequency can be expressed as a complex number, where the angle is the phase response of the filter and the absolute value the magnitude response. When you apply the filter to a sound, you actually do a complex multiplication of all the frequency components in the sound by the corresponding filter response values. (Read chapter &#34;Adding two sinewaves together&#34; if you find this hard to understand.) Example: The response of a filter is (0,1) at 1000Hz. You filter a sine wave, with the phase &amp; amplitude information presented as the complex number (0,1), of the same frequency with it:\n Sine wave: Filter: Result:\r _---0---_ _---0---_ _---|---_\r / | \\ / | \\ / | \\\r | | | | | | | | |\r -|-----+-----|- * -|-----+-----|- = -0-----+-----|-\r | | | | | | | | |\r \\_ | _/ \\_ | _/ \\_ | _/\r ---|--- ---|--- ---|---\n The phase of the sine wave got rotated 90 degrees. No change in the amplitude.\n   The combined response of these two filters put in serial is the response of A multiplied by the response of B (Complex numbers as always!). If you only need to know the magnitude response, you could as well multiply the absolute values.\n  In the figure, both filters get their inputs from the same source. Their outputs are then added back together, forming the final output. Now you need to use addition in solving the combined response.\n   FIR filter is more straightforward, and easier to understand. Finite impulse response means that when the filter input has remained zero for a certain time, the filter output also becomes zero. An Infinite impulse response filter never fully &#34;settles down&#34; after turning off the input, but it does get quieter and quieter though.\n      It&#39;s up to the coefficients (a0, a1, a2) what this filter will do to the sound. Choosing the coefficient values is the hardest part, and we&#39;ll get to that later. To design your own filters, you need to understand some of the math behind and know the right methods.\n In the above filter example, only past input values are used. In realtime filters, this is a requirement, because you don&#39;t know the future inputs. In sample editors and such, you don&#39;t have this limitation, because you have the whole input data ready when you begin.\n       Unlike FIR filters, IIR filters also use their previous output values in creating their present output. Here&#39;s a simple example:\n    There can be several ways of implementing the same IIR filter. Some may be faster than the usual input-output-and-coefficients way. Anyhow, every IIR filter can be written in this form, and it must be used in filter design and examining calculations.\n An impulse response (= What the filter will do to a one samplepoint impulse) of an IIR filter often looks more or less like this in the sampledata:\n  Some badly designed IIR filters are unstable. This results in ouput getting louder and louder instead of quieter and quieter. A simple example of this is: output(t) = input(t) + 2*output(t-1). As soon as it gets input data, it gets crazy.\n  The above described filter types process the data sample by sample. Not so, if you implement your filter using FFT, Fast Fourier Transformation. FFT usually operates on chunks of length 2^n. First, you should have your planned filter impulse response ready. Then convert it, using FFT, to spectral information\u00a0 - complex numbers representing the phases and amplitudes of the frequency components. These components are called bins, because their frequencies are fixed and evenly distributed, and if the original data contained any in-between frequencies, then most of the &#34;energy&#34; of such a frequency will be distributed amongst the nearby bins. Now, you FFT also the sample data you want to filter, and multiply the resulting frequency bins with those from the filter. Then IFFT (Inverse FFT) is used to convert the information into a chunk of filtered sample data.\n So, multiplication of the two frequency domain data resulted in convolution of the two time domain data. However, there&#39;s a catch: FFT operates on periodic signals, that is, if you have a filter impulse response as long as the FFT chunk then any non-zero sample data in the middle of the FFT chunk will result with the convolution wrapping the tail of the filter around the FFT boundary. In order to avoid this problem, you can use FFT twice as long as the filter impulse response, and when doing FFT on the sample data, only fill up the FFT input buffer to half way and set rest of the input to zero. For longer inputs, you would process the data in chunks like that and then add the resulting filtered chunks together. This is called the overlap-add method. Another option is overlap-save (look it up if you like).\n FFT can also be used to analyze the frequency content of sample data, for whatever reason. If you just take a chunk of sample data, it has sharp edges, which is bad for FFT.\u00a0 Windowing functions are used to smoothen these edges. &#34;Raised cosine&#34;, cos(x pi/2)^2, is one possible windowing function. Here you see what happens when you apply that windowing function to a chunk of sample data:\n Sample data chunk: Windowing function: Result:\r (square wave) (raised cosine)\r\r 1 -|-- --- --- | | _---_ | | _-- |\r | | | / \\ | | |\r | | | _/ \\_ | | \\_ |\r 0 -| | * |-- --| = |--_ --|\r | | | | | \\ |\r | | | | | \\ _/ |\r -1 -| --- --- -| | | | - |\n  Sometimes (resampling, precisely defined delay) you need to get samplevalues from between the known samplepoints. That&#39;s when you need interpolation. If you don&#39;t interpolate, and just throw away the fractional part of your sampleoffset, you get a lot of high frequency distortion:\n 0--- 0---0--- 0---\r | | | |\r 0--- 0--- 0--- 0---\r | | | |\r 0---0--- 0---0---\n In the example, the original samplepoints try to represent a sine wave. The closer the interpolated curve is to a sine wave, the better the interpolation algorithm is. The simpliest interpolation method is linear interpolation. Straight lines are drawn between two adjacent samplepoints:\n 0_ _0---0_ _0\r -_ _- -_ _-\r 0_ _0 0_ _0\r -_ _- -_ _-\r 0---0 0---0\n Still looks quite &#34;edgy&#34; to be a sine wave. However, the improvement to uninterpolated is significant. There&#39;s also a drawback - the frequencies just below the Nyquist frequency get attenuated, even more than without interpolation. Here&#39;s the formula for linear interpolation: new = old(int)+(old(int+1)-old(int))*fract, where int means the integer part of sample offset and fract the fractional part.\n Next step could be Hermite curve, which gives in every way better quality than linear interpolation:\n ___\r 0 _-0 0-_ 0\r _ _\r 0_ _0 0_ _0\r _ _ _ _\r -0___0- -0___0-\n With linear interpolation, you needed to know 2 samplepoints at time to be able to draw the line. With Hermite curve, the number is 4. The interpolation curve goes through the two middle points, and the points 1 and 4 are used in shaping the curve. The formula is a cubic:\n new = a*fract^3 + b*fract^2 + c*fract + old(int+0), where:\r\r 3 ( old(int) - old(int+1) ) - old(int-1) + old(int+2)\r a = -----------------------------------------------------\r 2\r 5 old(int) + old(int+2)\r b = 2 old(int+1) + old(int-1) - -----------------------\r 2\r old(int+1) - old(int-1)\r c = -----------------------\r 2\n  f(x) = ax^3 + bx^2 + cx + d\r\r / f(0) = y(0)\r |\r | f(1) = y(1)\r &lt;\r | f&#39;(0) = (y(1) - y(-1)) / 2\r |\r \\ f&#39;(1) = (y(2) - y(0)) / 2\n A perfect interpolation also exists. By replacing all the sample points with correctly scaled sinc curves, sin(pi x)/(pi x), and by adding them together, you get exact, perfect interpolation. Here is one of the samplepoints replaced with a scaled sinc curve:\n _--0--_ 0\r 0 _/ \\_\r _/ \\_\r _/ \\_ __-----__\r ---------/---------+---------\\---------/---------\\---------/=========\r \\__ __/ \\__ __/ ---------\r --- 0 --- 0\r 0\n Sinc curve is endlessly long, so you&#39;d have to use all the samplepoints in calculation of one interpolated value. A practical solution would be to limit the number of samples to say 1000. It will still be too slow for a realtime application, but it&#39;ll give great accuracy. If you insist to use sinc in a realtime interpolation algorithm, try using a windowing function and a low number (at least 6) of sinc curves.\n  If you want to downsample (decrease the samplerate), you must first filter away the above Nyquist frequencies, or they will appear as distortion in the downsampled sample.\n  In the process of filter design, you often need to make compromises. To have sharp edges or steep slopes in the magnitude response, you will need a big, and therefore slow filter. In other words, filters with low number of taps practically always have gently sloping magnitude responses.\n In the case of IIR filters, sharp edges in magnitude often mean an ugly (very nonlinear) phase frequency response, and close-to-linear phase response a gently sloping magnitude response. With FIR filters, an attempt to create very sharp edges may cause waving in the magnitudes of nearby frequencies.\n IIR filters are great for a realtime routine, because they are fast, their properties (for example cutoff frequency) can be quickly changed in the middle of action, and, they sound like real analog filters. :) The nonlinear phase response of IIR filters usually doesn&#39;t matter.\n FIR filters could be used where the quality and linear phase are important, for example, in a sample editor. People who filter other signals than sound, often desire linear phase frequency response.\n With stereo signal, it is important to have identical phase changes on left and right channels.\n  Lowpass:\r __________________\r |__________________\r Highpass:\r __________________\r __________________|\r Bandpass or peak:\r _\r _________________| |_________________\r Notch, bandreject or bandstop:\r _________________ _________________\r |_|\r Allpass:\r _____________________________________ (Changes in phase only)\n If you have a symbolic calculation program, i strongly recommend you to use it in the mechanical calculations, just to make your life easier. &#34;Derive&#34; is an old DOS program, but still very useful.\n  White noise means the sort of noise that has flat spectrum. You can easily create it by using random numbers as samplevalues. If you want to know the magnitude frequency response of a filter, apply it on a long sample of white noise and then run a spectrum analysis on the output. What you see is the magnitude frequency response of the filter.\n Another way is to send a one-sample impulse, which originally has a flat spectrum. An impulse looks like this in the sampledata: 0, 0, 0, 0, 1, 0, 0, 0, 0 - where the impulse is the &#34;1&#34; in the middle.\n From the two, the impulse thingy is faster, but using white noise can give cleaner-looking results, because errors will be less visible. For much the same reasons, when you are watching videos, a still picture will look more snowy than the running picture. Taking a spectrum analysis on a long sample is usually done by dividing it to smaller pieces, analyzing them separately and then taking the average of all the analyses. My personal choice here would be the program &#34;Cool Edit 96&#34;, which is for Windows.\n  Pole-zero method is the easiest way of designing fast and simple IIR filters. When you have learned it, you will be able to design filters by yourself.\n  pi/2 &#34;|&#34; axis: imaginary\r __---|---__ &#34;-&#34; axis: real\r _/ | \\_ (as always!)\r / | \\\r | | |\r pi -|--------+--------|- 0\r | | |\r \\_ | _/\r \\__ | __/\r ---|---\r 3/2 pi\n Imagine the frequencies to be wrapped around the unit circle. At angle 0 we have 0Hz, at pi/2 we have samplerate/4, at pi we have samplerate/2, the Nyquist frequency. You shouldn&#39;t care about higher frequencies, since they will never appear in the signal, but anyway, at 2pi (full cycle) we have the sampling frequency.\n So if you used sampling frequency 44100 Hz, 0 Hz would be at (1,0), 11025 Hz at (0,1) and 22050 Hz at (-1,0).\n   __---|---__ o x = pole\r _/ o | \\_ o = zero\r / | x \\\r | | x |\r -|-o------+--------|-\r | | x |\r \\_ | x _/\r \\__o | __/\r ---|--- o\n There are some rules you have to remember. Poles must always be inside the unit circle, never outside or on it. Zeros can be put anywhere. You can use any number of poles and zeros, but they must all have &#34;conjugate pairs&#34;, if they are not positioned on the &#34;-&#34; axis. Conjugate pairs means that if you put for example a zero to (0.6, 0.3), you must put another zero to the conjugate coordinate, (0.6,-0.3). And the same thing with poles.\n  Poles amplify frequencies, zeros attenuate.\n......", "posttime": "2020-11-10 18:23:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6559\u7a0b,\u58f0\u97f3,sound,\u6ee4\u6ce2\u5668", "title": "\u6570\u5b57\u58f0\u97f3\u5904\u7406\u6559\u7a0b", "title_en": "Digital sound processing tutorial", "transed": 1, "url": "http://yehar.com/blog/?p=121", "via": "", "real_tags": ["\u6559\u7a0b", "\u58f0\u97f3", "sound", "\u6ee4\u6ce2\u5668"]}, {"category": "", "categoryclass": "", "imagename": "c697d6f4622acf1f126692bb33d9e0f6.jpg", "infoid": 1034227, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(CNN)\u8377\u5170\u4e00\u6240\u5927\u5b66\u7684\u4e00\u7ec4\u7269\u7406\u5b66\u5bb6\u75283D\u6253\u5370\u4e86\u7f8e\u56fd\u822a\u6d77\u5bb6\u53f7\u822a\u7a7a\u6bcd\u8230\u7684\u663e\u5fae\u7248\u672c\u3002\u822a\u884c\u8005\u53f7\u662f\u4e00\u8258\u6765\u81ea\u300a\u661f\u9645\u8ff7\u822a\u300b\u7684\u65e0\u754f\u7ea7\u661f\u9645\u98de\u8239\u3002\n\u5fae\u578b\u65c5\u884c\u8005\u53f7\u957f15\u5fae\u7c73(0.015\u6beb\u7c73)\uff0c\u662f\u83b1\u987f\u5927\u5b66\u7814\u7a76\u4eba\u5458\u5f00\u5c55\u7684\u4e00\u4e2a\u9879\u76ee\u7684\u4e00\u90e8\u5206\uff0c\u76ee\u7684\u662f\u4e86\u89e3\u4f53\u578b\u5982\u4f55\u5f71\u54cd\u5fae\u6cf3\u8005\u7684\u8fd0\u52a8\u548c\u4e92\u52a8\u3002\n\u5fae\u578b\u6e38\u6cf3\u8005\u662f\u4e00\u79cd\u5c0f\u9897\u7c92\uff0c\u53ef\u4ee5\u901a\u8fc7\u5316\u5b66\u53cd\u5e94\u4e0e\u5468\u56f4\u73af\u5883\u76f8\u4e92\u4f5c\u7528\uff0c\u81ea\u884c\u5728\u6db2\u4f53\u4e2d\u79fb\u52a8\u3002\u5fae\u6cf3\u8005\u8eab\u4e0a\u7684\u94c2\u6d82\u5c42\u4e0e\u4ed6\u4eec\u7f6e\u5165\u7684\u8fc7\u6c27\u5316\u6c22\u6eb6\u6db2\u53d1\u751f\u53cd\u5e94\uff0c\u4ece\u800c\u63a8\u52a8\u4ed6\u4eec\u901a\u8fc7\u6db2\u4f53\u3002\n\u8fd9\u9879\u7814\u7a76\u7684\u4f5c\u8005\u4e4b\u4e00\u8428\u7c73\u4e9a\u00b7\u6b27\u54c8\u5409\u544a\u8bc9CNN\uff0c\u901a\u8fc7\u7814\u7a76\u4eba\u9020\u5fae\u6cf3\u8005\uff0c\u6211\u4eec\u5e0c\u671b\u4e86\u89e3\u751f\u7269\u5b66\u4e0a\u7684\u5fae\u6e38\u8005\u3002\u8fd9\u4e00\u7406\u89e3\u6709\u52a9\u4e8e\u5f00\u53d1\u65b0\u7684\u836f\u7269\u8f93\u9001\u5de5\u5177\uff1b\u4f8b\u5982\uff0c\u5fae\u578b\u673a\u5668\u4eba\u53ef\u4ee5\u81ea\u4e3b\u6e38\u6cf3\uff0c\u5e76\u5728\u4eba\u4f53\u6240\u9700\u7684\u4f4d\u7f6e\u8f93\u9001\u836f\u7269\u3002\n\u901a\u8fc7\u4f7f\u75283D\u6253\u5370\u673a\uff0c\u79d1\u5b66\u5bb6\u4eec\u53d1\u73b0\u4ed6\u4eec\u53ef\u4ee5\u6253\u5370\u51fa\u4efb\u4f55\u5f62\u72b6\u7684\u5fae\u6cf3\u8005\uff0c\u5305\u62ec\u8239\u53ea\u548c\u661f\u9645\u98de\u8239\u3002\u8fd9\u6709\u52a9\u4e8e\u4ed6\u4eec\u627e\u51fa\u6bcf\u79cd\u5f62\u72b6\u5bf9\u6e38\u6cf3\u7c92\u5b50\u8fd0\u52a8\u7684\u5f71\u54cd\u3002\n\u867d\u7136\u5927\u591a\u6570\u4eba\u4e0d\u4f1a\u7406\u89e3\u822a\u6d77\u5bb6\u53f7\u822a\u7a7a\u6bcd\u8230\u4e0e\u79d1\u5b66\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u4f46\u8fd9\u9879\u7814\u7a76\u7684\u5408\u8457\u8005\u4e4b\u4e00\u4e54\u7eb3\u65af\u00b7\u8d6b\u514b\u7279(Jonas Hoecht)\u6709\u81ea\u5df1\u7684\u7406\u7531\u6765\u590d\u5236\u8fd9\u8258\u8239\u3002\n\u5728\u4ed6\u9879\u76ee\u7684\u6700\u540e\u4e00\u5468\uff0c\u6211\u5411\u4ed6\u627f\u8bfa\uff0c\u6211\u4eec\u53ef\u4ee5\u6253\u5370\u4ed6\u559c\u6b22\u7684\u4efb\u4f55\u5f62\u72b6\uff0c\u4e4c\u54c8\u5409\u8bf4\u3002\u4f5c\u4e3a\u300a\u661f\u9645\u8ff7\u822a\u300b\u7684\u94c1\u6746\u7c89\u4e1d\uff0c\u4ed6\u9009\u62e9\u4e86\u822a\u884c\u8005\u53f7\u822a\u7a7a\u6bcd\u8230\u3002\u6b64\u5916\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4e86\u8868\u660e\u6211\u4eec\u53ef\u4ee5\u6253\u5370\u7684\u5f62\u72b6\u7c7b\u578b\u51e0\u4e4e\u662f\u65e0\u9650\u7684\u3002\n\u5728\u4ed6\u4eec\u7684\u9879\u76ee\u4e2d\uff0c\u7269\u7406\u5b66\u5bb6\u8fd8\u6253\u5370\u4e86\u8239\u3001\u4e09\u89d2\u8239\u548c\u87ba\u65cb\u7ebf\u7b49\u5f62\u72b6\uff0c\u6bcf\u4e2a\u7269\u4f53\u7684\u5f62\u72b6\u90fd\u4f1a\u5f71\u54cd\u5b83\u4eec\u7684\u6e38\u6cf3\u884c\u4e3a\u3002\n\u9664\u4e86\u4e86\u89e3\u5fae\u6cf3\u8005\u5982\u4f55\u88ab\u7528\u6765\u6e05\u6d01\u5e9f\u6c34\u6216\u5411\u4f53\u5185\u8f93\u9001\u836f\u7269\u5916\uff0c\u8fd9\u9879\u5b9e\u9a8c\u8fd8\u5c06\u5e2e\u52a9\u79d1\u5b66\u5bb6\u66f4\u591a\u5730\u4e86\u89e3\u751f\u7269\u6e38\u6cf3\u8005\uff0c\u5982\u7cbe\u5b50\u548c\u7ec6\u83cc\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5982\u4f55\u5728\u4f53\u5185\u65c5\u884c\u3002", "note_en": "(CNN)A team of physicists at a university in the Netherlands have 3D-printed a microscopic version of the USS Voyager, an Intrepid-class starship from Star Trek.\n The miniature Voyager, which measures 15 micrometers (0.015 millimeters) long, is part of a  project researchers at Leiden University conducted to understand how shape affects the motion and interactions of microswimmers.\n Microswimmers are small particles that can move through liquid on their own by interacting with their environment through chemical reactions. The platinum coating on the microswimmers reacts to a hydrogen peroxide solution they are placed in, and that propels them through the liquid.\n   &#34;By studying synthetic microswimmers, we would like to understand biological microswimmers,&#34; Samia Ouhajji, one of the  study&#39;s authors, told CNN. &#34;This understanding could aid in developing new drug delivery vehicles; for example, microrobots that swim autonomously and deliver drugs at the desired location in the human body.&#34;\n  By using a 3D printer, the scientists have discovered that they can print any shape of microswimmers, including boats and starships. That helps them single out the effect each shape has on the motion of swimming particles.\n  While most people wouldn&#39;t understand what the USS Voyager has to do with science, Jonas Hoecht, one of the study&#39;s co-authors, had his own reason to replicate the ship.\n &#34;In the last week of his project, I promised him we could print any shape he liked,&#34; Ouhajji said. &#34;As a major Star Trek fan, he choose the USS Voyager. Additionally, it was also to show that the type of shapes we can print is almost limitless.&#34;\n   In their project, the physicists also printed shapes like boats, trimers and helices, with each object&#39;s shape affecting their swimming behaviors.\n Along with understanding how microswimmers can be used to clean wastewater or deliver drugs to the body, the experiment will help scientists learn more about biological swimmers, like sperm and bacteria, and how they travel through the body.", "posttime": "2020-11-10 18:06:09", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u79d1\u5b66\u5bb6,\u6253\u5370,\u81ea\u52a8,microscopic,\u5f62\u72b6", "title": "\u79d1\u5b66\u5bb63D\u6253\u5370\u81ea\u52a8\u79fb\u52a8\u7684\u5fae\u578b\u661f\u9645\u8ff7\u822a\u5b87\u5b99\u98de\u8239", "title_en": "Scientists 3D Print Microscopic Star Trek Spaceship That Moves On Its Own", "transed": 1, "url": "https://edition.cnn.com/2020/11/08/us/star-trek-3d-microscopic-spaceship-scn-trnd/index.html", "via": "", "real_tags": ["\u79d1\u5b66\u5bb6", "\u6253\u5370", "\u81ea\u52a8", "\u5f62\u72b6"]}, {"category": "", "categoryclass": "", "imagename": "a765d0b478e9077e1ff08940722fe9f4.png", "infoid": 1034226, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b64\u7a0b\u5e8f\u662f\u81ea\u7531\u8f6f\u4ef6\uff1a\u60a8\u53ef\u4ee5\u6839\u636e\u81ea\u7531\u8f6f\u4ef6\u57fa\u91d1\u4f1a\u53d1\u5e03\u7684GNU\u901a\u7528\u516c\u5171\u8bb8\u53ef\u8bc1\u7248\u672c3\u7684\u6761\u6b3e\u5bf9\u5176\u8fdb\u884c\u518d\u5206\u53d1\u548c/\u6216\u4fee\u6539\u3002\n\u5206\u53d1\u672c\u7a0b\u5e8f\u7684\u76ee\u7684\u662f\u5e0c\u671b\u5b83\u6709\u7528\uff0c\u4f46\u6ca1\u6709\u4efb\u4f55\u62c5\u4fdd\uff1b\u751a\u81f3\u6ca1\u6709\u5bf9\u9002\u9500\u6027\u6216\u662f\u5426\u9002\u7528\u4e8e\u7279\u5b9a\u76ee\u7684\u7684\u9ed8\u793a\u62c5\u4fdd\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605GNU\u901a\u7528\u516c\u5171\u8bb8\u53ef\u8bc1\u3002\n\u60a8\u5e94\u8be5\u5df2\u7ecf\u6536\u5230\u4e86GNU\u901a\u7528\u516c\u5171\u8bb8\u53ef\u8bc1\u7684\u526f\u672c\u4ee5\u53ca\u672c\u7a0b\u5e8f\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u53c2\u9605http://www.gnu.org/licenses/.", "note_en": "This program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License version 3 aspublished by the Free Software Foundation.\n This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See theGNU General Public License for more details.\n You should have received a copy of the GNU General Public Licensealong with this program. If not, see  http://www.gnu.org/licenses/.", "posttime": "2020-11-10 18:01:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,\u5a92\u4f53,source,gnu", "title": "\u5f00\u6e90\u5a92\u4f53\u670d\u52a1\u95ed\u8def\u7535\u89c6/\u5f55\u50cf/\u7269\u4f53\u68c0\u6d4b", "title_en": "Open Source Media Service CCTV/Video Recording/Object Detection", "transed": 1, "url": "https://github.com/fastogt/fastocloud_back", "via": "", "real_tags": ["\u5f00\u6e90", "\u5a92\u4f53", "source", "gnu"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1034225, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Valve\u8d1f\u8d23DXVK\u548cVKD3D-Proton\u7684\u5f00\u6e90\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684Vulkan\u6269\u5c55\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u5728Vulkan API\u4e4b\u4e0a\u79fb\u690d/\u5206\u5c42Direct3D\u3002\rVK_VALUE_MUTABLE_DESCRIPTOR\u6269\u5c55\u8fd8\u6ca1\u6709\u5408\u5e76\u5230Vulkan\u5b58\u50a8\u5e93\u4e2d\uff0c\u4f46\u5728\u5468\u4e00\u4f5c\u4e3a\u4e00\u4e2a\u770b\u4f3c\u5076\u7136\u7684PR\u51fa\u73b0\u4e86\u77ed\u6682\u7684\u516c\u5171\u8bf7\u6c42\uff0c\u7136\u540e\u5f88\u5feb\u5c31\u5173\u95ed\u4e86\u3002VK_VALUE_MUTABLE_DESCRIPTOR\u65e8\u5728\u51cf\u5c11\u63cf\u8ff0\u7b26\u7684\u5185\u5b58\u5360\u7528\uff0c\u5176\u65b0\u673a\u5236\u65e8\u5728\u66f4\u6709\u6548\u5730\u6a21\u62df\u5176\u4ed6\u56fe\u5f62API\u4e2d\u5b58\u5728\u7684\u7ed1\u5b9a\u6a21\u578b\uff0c\u7528\u4e8e\u5206\u5c42\u6216\u79fb\u690d\u76ee\u7684\u3002\rVK_VALUE_MUTABLE_DESCRIPTOR_TYPE\u662f\u8fc4\u4eca\u4e3a\u6b62\u7684\u7b2c\u4e09\u6b21\u8fed\u4ee3\uff0c\u7531Valve&#39\u9886\u8854\uff1b\u4e54\u8212\u4e9a\u00b7\u963f\u4ec0\u987f\u548c\u6c49\u65af-\u514b\u91cc\u65af\u8482\u5b89\u00b7\u963f\u6069\u5c91\u3002\r\u90a3\u4e9b\u5bf9\u63d0\u8bae\u7684VK_VALUE_MUTABLE_DESCRIPTOR_TYPE\u5f53\u524d\u5f62\u5f0f\u7684\u590d\u6742\u6280\u672f\u611f\u5174\u8da3\u7684\u4eba\u53ef\u4ee5\u67e5\u770b\u89c4\u8303\u6dfb\u52a0\u3002\r\u8fd9\u5c06\u662f\u7b2c\u4e00\u4e2a\u5408\u5e76\u7684VK_VALUE_*\u4f9b\u5e94\u5546\u6269\u5c55\uff0c\u4f46\u4ed6\u4eec\u5728\u524d\u51e0\u4e2a\u6708\u4e5f\u4e00\u76f4\u5728\u7814\u7a76\u53ef\u80fd\u7684VK_VALUE_GENERIC_DESCRIPTERS\u548cVK_VALUE_PARTIAL_PRENTIACTION\u6269\u5c55\uff0c\u800c\u8fd1\u5e74\u6765\u5df2\u7ecf\u51fa\u73b0\u4e86\u5176\u4ed6\u6269\u5c55\uff0c\u4ee5\u5e2e\u52a9Direct3D\u548c\u5176\u4ed6\u56fe\u5f62API\u66f4\u597d\u5730\u6574\u5408\u5728Vulkan\u4e4b\u4e0a\u3002", "note_en": "Valve&#39;s open-source developers responsible for DXVK and VKD3D-Proton are working on a new Vulkan extension to help in their porting/layering effort of Direct3D on top of the Vulkan API.\r   Not yet merged into the Vulkan repository but a short-lived public pull request on Monday as a seemingly accidental PR then quickly closed is the VK_VALVE_mutable_descriptor extension. VK_VALVE_mutable_descriptor aims to reduce the descriptor memory footprint and with its new mechanisms aims to make for &#34;more efficient emulation of the binding model present in other graphics APIs for layering or porting purposes.&#34;\r   VK_VALVE_mutable_descriptor_type is through its third iteration so far and led by Valve&#39;s Joshua Ashton and Hans-Kristian Arntzen.\r   Those interested in the proposed VK_VALVE_mutable_descriptor_type technical intricacies in their current form can see  the spec addition.\r   This would be the first VK_VALVE_* vendor extension merged but they in prior months have also been working on possible VK_VALVE_generic_descriptors and VK_VALVE_partial_presentation extensions too while other extensions have come in recent years for helping Direct3D and other graphics APIs better jive on top of Vulkan.", "posttime": "2020-11-10 17:22:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,\u5e2e\u52a9,working,vk", "title": "Value\u6b63\u5728\u5f00\u53d1\u53e6\u4e00\u4e2a\u6269\u5c55\uff0c\u4ee5\u5e2e\u52a9Vulkan\u4e0a\u7684Direct3D", "title_en": "Valve Is Working on Another Extension to Help in Direct3D-over-Vulkan", "transed": 1, "url": "https://www.phoronix.com/scan.php?page=news_item&px=VK_VALVE_mutable_descriptor", "via": "", "real_tags": ["\u5f00\u53d1", "\u5e2e\u52a9", "working", "vk"]}, {"category": "", "categoryclass": "", "imagename": "4019f7d7591073b3e4c30a5dc6adb043.png", "infoid": 1034224, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u65b0\u7684Firefox Quantum\u7248\u672c\u6709\u5f88\u591a\u53d8\u5316\u548c\u6539\u8fdb\uff0c\u6bd4\u5982\u65b0\u7684Photon\u7528\u6237\u754c\u9762\uff0c\u91cd\u65b0\u8bbe\u8ba1\u7684\u65b0\u6807\u7b7e\u9875\u548c\u9996\u9009\u9879\u9875\u9762\u7b49\u3002\u9664\u4e86\u8fd9\u4e9b\u53d8\u5316\uff0cFirefox Quantum\u8fd8\u5e26\u6765\u4e86\u9690\u79c1\u65b9\u9762\u7684\u53d8\u5316\u548c\u6539\u8fdb\u3002Mozilla\u5728\u9996\u9009\u9879\u9875\u9762\u4e0a\u63d0\u4f9b\u4e86\u5f88\u5c11\u7684\u9009\u9879\u6765\u9009\u62e9\u4f60\u60f3\u8981\u4e0eMozilla\u5171\u4eab\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ee5\u53ca\u60f3\u8981\u53d1\u9001\u5230Mozilla\u670d\u52a1\u5668\u7684\u6570\u636e\u7c7b\u578b\u3002\n\u4f60\u901a\u5e38\u53ef\u4ee5\u5173\u95ed\u6240\u6709\u7ed9\u5b9a\u7684\u9009\u9879\uff0c\u4f46\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898--\u5373\u4f7f\u4f60\u7981\u7528\u4e86\u8fd9\u4e9b\u9009\u9879\uff0cFirefox\u4ecd\u7136\u4f1a\u6536\u96c6\u6570\u636e\u5e76\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u5c06\u544a\u8bc9\u60a8\u5982\u4f55\u5728Mozilla Firefox Quantum\u7248\u672c\u4e2d\u5b8c\u5168\u7981\u7528\u9065\u6d4b\u548c\u6570\u636e\u6536\u96c6\u3002\n1.\u6253\u5f00Mozilla Firefox\uff0c\u5728\u5730\u5740\u680f\u4e2d\u952e\u5165\uff1aAbout\uff1aConfigo\uff0c\u7136\u540e\u6309Enter\u952e\u3002\u5b83\u5c06\u5411\u60a8\u663e\u793a\u4e00\u6761\u8b66\u544a\u6d88\u606f\uff0c\u5355\u51fb\u201c\u6211\u63a5\u53d7\u98ce\u9669\uff01\u201d\u7ebd\u6263\u3002\n2.\u73b0\u5728\u6211\u5728\u641c\u7d22\u8fc7\u6ee4\u5668\u680f\u4e2d\u8f93\u5165\u9065\u6d4b\u6570\u636e\uff0c\u5e76\u5728\u7ed3\u679c\u4e2d\u67e5\u627e\u4ee5\u4e0b\u9996\u9009\u9879\uff1a\n\u53cc\u51fb\u4e0a\u9762\u63d0\u5230\u7684\u9664\u201ctoolkit.telemetry.server\u201d\u4e4b\u5916\u7684\u6bcf\u4e2a\u9996\u9009\u9879\uff0c\u5e76\u5c06\u5b83\u4eec\u7684\u503c\u66f4\u6539\u4e3aFalse\u3002\u6216\u8005\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728\u9996\u9009\u9879\u4e0a\u5355\u51fb\u9f20\u6807\u53f3\u952e\u5e76\u9009\u62e9\u5207\u6362\u9009\u9879\u3002\n\u4e00\u4e9b\u9879\u76ee\uff0c\u5982Ghacks-user.ks\u9879\u76ee\uff0c\u4e5f\u5220\u9664\u4e86URL\uff0c\u8fd9\u7b80\u76f4\u662f\u80e1\u8bf4\u516b\u9053\uff0c\u56e0\u4e3a\u4e00\u65e6\u4f60\u7981\u7528\u4e86Main\u529f\u80fd\uff0cURL/Domain\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u6536\u5230\u4efb\u4f55ping\u6216\u8c03\u7528\uff0c\u56e0\u4e3a-\u6b63\u5982\u6240\u8bf4\u7684\uff0cMain\u529f\u80fd\u5df2\u7ecf\u88ab\u7981\u7528\u4e86\u3002\u9664\u975e\u4f60\u771f\u7684\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\uff0c\u5426\u5219\u89e6\u6478\u6bcf\u4e2a\u6761\u76ee\u90fd\u6ca1\u6709\u597d\u5904\u3002\n3.\u73b0\u5728\u53cc\u51fbtoolkit.telemetry.server\u9996\u9009\u9879\u5e76\u6e05\u7a7a\u5176\u503c\uff0c\u5373\u4eceValue\u6587\u672c\u6846\u4e2d\u5220\u9664\u6240\u6709\u5185\u5bb9\u3002\n\u5c31\u8fd9\u6837\u3002\u73b0\u5728\u4f60\u4e0d\u7528\u9065\u6d4b\u5c31\u53ef\u4ee5\u5728\u706b\u72d0\u4e2d\u6d4f\u89c8\u4f60\u6700\u559c\u6b22\u7684\u7f51\u7ad9\u4e86\uff01\n\u5982\u679c\u4f60\u60f3\u8d21\u732e\u548c\u652f\u6301\u8fd9\u4e2a\u9879\u76ee\uff0c\u9065\u6d4b\u6280\u672f\u53ef\u80fd\u4f1a\u5f88\u6709\u7528\uff0c\u5b83\u5e76\u4e0d\u50cf\u5404\u5730\u9519\u8bef\u5730\u5ba3\u4f20\u7684\u90a3\u6837\u53ea\u6536\u96c6\u4f60\u7684\u79c1\u4eba\u6570\u636e\uff0c\u800c\u4e14\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5c31\u50cfMozilla\u7684\u4f8b\u5b50\u4e00\u6837\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u89e3\u51b3\u5d29\u6e83\u95ee\u9898\uff0c\u6d4b\u8bd5\u65b0\u529f\u80fd\uff0c\u5e76\u5411Mozilla\u63d0\u4f9b\u4fe1\u606f\u6765\u6539\u8fdb\u4ed6\u4eec\u7684\u4ea7\u54c1\u3002\n\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u8ba4\u4e3a\u9065\u6d4b\u5e76\u4e0d\u662f\u4e00\u4ef6\u574f\u4e8b\uff0c\u5b83\u53ef\u4ee5\u6709\u6240\u5e2e\u52a9\uff0c\u7279\u522b\u662f\u4f5c\u4e3a\u4e00\u540d\u5f00\u53d1\u4eba\u5458\uff0c\u6211\u77e5\u9053\u5f88\u96be\u5411\u7528\u6237\u89e3\u91ca\u4ed6\u4eec\u5e94\u8be5\u63d0\u4f9b\u54ea\u4e9b\u6570\u636e\u6765\u5e2e\u52a9\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u4e14\u6ca1\u6709\u4eba\u559c\u6b22\u624b\u52a8\u586b\u5199\u65e0\u7a77\u65e0\u5c3d\u7684\u8868\u683c\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u6211\u4eec\u63a8\u51fa\u9065\u6d4b\u7684\u539f\u56e0\u3002\u95ee\u9898\u662f\u8fd9\u91cc\u7684\u6570\u636e\u900f\u660e\u5ea6\uff0c\u9065\u6d4b\u5fc5\u987b\u5c3d\u53ef\u80fd\u8be6\u7ec6\u5730\u89e3\u91ca\uff0c\u5e76\u4e14\u5fc5\u987b\u63d0\u4f9b\u5207\u6362\uff0c\u8fd9\u662fMozilla\u4ece\u7b2c\u4e00\u5929\u8d77\u5c31\u63d0\u4f9b\u7684\u3002\u6211\u76ee\u524d\u552f\u4e00\u7684\u95ee\u9898\u662f\uff0c\u5927\u591a\u6570\u4ea7\u54c1\u9ed8\u8ba4\u542f\u7528\u9065\u6d4b\u529f\u80fd(\u706b\u72d0\u4e5f\u662f\u5982\u6b64)\uff0c\u8fd9\u662f\u6211\u4e0d\u559c\u6b22\u4e5f\u4e0d\u7406\u89e3\u7684\uff0c\u56e0\u4e3a\u9664\u975e\u51fa\u73b0\u5d29\u6e83\u6216\u95ee\u9898\uff0c\u5426\u5219\u6ca1\u6709\u592a\u591a\u7406\u7531\u63d0\u4ea4\u4efb\u4f55\u4e1c\u897f\uff0c\u9664\u975e\u4f60\u771f\u7684\u662f\u4e00\u540d\u6d4b\u8bd5\u8005\u3002", "note_en": "The latest Firefox Quantum version comes with lots of changes and improvements such as new Photon UI, redesigned new tab page and preferences page, etc. Apart from these changes, Firefox Quantum also comes with privacy changes and improvements. Mozilla has provided few options on Preferences page to select what kind of data do you want to share with Mozilla and want to send to Mozilla servers.\n   You usually can turn off all the given options but there is a small problem doing it \u2013\u00a0 even after you disable these options, Firefox still collects and sends data to servers. In this tutorial, I\u2019ll tell you how to completely disable telemetry and data collection in Mozilla Firefox Quantum version.\n 1.\u00a0Open Mozilla Firefox and type\u00a0 about:config\u00a0in the addressbar and press Enter. It\u2019ll show you a warning message, click on \u201c I accept the risk!\u201d button.\n 2.\u00a0Now type\u00a0 telemetry\u00a0in\u00a0 Search filter\u00a0box and look for following preferences in the result:\n  Double-click on each above mentioned preference except \u201ctoolkit.telemetry.server\u201d and change their values to false. Alternatively, you can right-click on the preference and select Toggle option.\n  Some projects like the ghacks-user.ks project also removing the URL\u2019s which is nothing but nonsense because once you disable the main function, the URL/Domain never gets any ping or call because \u2013 as said the main function was already disabled. There is no benefit touching each entry unless you really know what you\u2019re doing.\n 3.\u00a0Now double-click on toolkit.telemetry.server preference and empty its value i.e. remove everything from the value text box.\n  That\u2019s it. Now you can browse your favorite websites in Firefox without telemetry!\n  Telemetry can be useful  in case you want to contribute &amp; support the project, it\u2019s not as all over the place wrongly advertised to collect  only your private data, moreover in most cases, like in the Mozilla case, it\u2019s to help solving crashes, testing new functions and to provide information to Mozilla to improve their product.\n Personally I see telemetry not as a  bad thing, it can help, especially I as a developer know that it\u2019s hard to explain the user what data they should provide to help solving the problem and no one likes to fill out endless papers manually, so this is why we got Telemetry. The problem is the data transparency here, telemetry must be explained in as much as possible details and there must be toggles given, which Mozilla provides since the day one. The only problem I currently have is that most products by default enabling the telemetry by default (so is Firefox) which I not like or understand because unless there is a crash or issue there is not much reason to submit anything unless you\u2019re really a opt-in beta-tester.", "posttime": "2020-11-10 17:22:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "firefox,\u6570\u636e,telemetry,mozilla", "title": "\u7981\u7528Mozilla Firefox Quantum\u4e2d\u7684\u6240\u6709\u9065\u6d4b\u548c\u6570\u636e\u6536\u96c6", "title_en": "Disable All Telemetry and Data Collection in Mozilla Firefox Quantum", "transed": 1, "url": "https://chefkochblog.wordpress.com/2018/01/08/disable-all-telemetry-and-data-collection-in-mozilla-firefox-quantum/", "via": "", "real_tags": ["firefox", "\u6570\u636e", "telemetry", "mozilla"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1034223, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c1d\u8bd5\u5168\u6570\u5b57\u8bbf\u95ee\uff0c\u4e86\u89e3\u4e3a\u4ec0\u4e48\u6709100\u591a\u4e07\u8bfb\u8005\u8ba2\u9605\u82f1\u56fd\u201c\u91d1\u878d\u65f6\u62a5\u201d\n\u9009\u62e9\u8d2d\u4e70\u8bd5\u7528\u8ba2\u9605\uff0c\u4e3a\u671f4\u5468\uff0c\u8bd5\u7528\u7ed3\u675f\u540e\u6bcf\u6708\u652f\u4ed889.00\u7f8e\u5143\u3002\n4\u5468\u5185\u53ef\u65e0\u9650\u91cf\u83b7\u5f97\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u503c\u5f97\u4fe1\u8d56\u3001\u5c61\u83b7\u6b8a\u8363\u7684\u5546\u4e1a\u65b0\u95fb\u7684\u9ad8\u7ea7\u6570\u5b57\u8bbf\u95ee\u6743\u9650\u3002\n\u793c\u54c1-\u6bcf\u6708\u4e0e\u5bb6\u4eba\u3001\u670b\u53cb\u548c\u540c\u4e8b\u5206\u4eab\u591a\u8fbe10\u7bc7\u6587\u7ae0\u3002\n\u9009\u62e9\u8d2d\u4e70\u6253\u5370\u8ba2\u9605\uff0c\u6bcf\u546810.15\u7f8e\u5143\uff0c\u8bd5\u7528\u7ed3\u675f\u540e\u6bcf\u6708\u652f\u4ed890\u7f8e\u5143", "note_en": "Try full digital access and see why over 1 million readers subscribe to the FT\n  Select  Purchase a Trial subscription for $1.00 for 4 weeks   You will be billed $89.00 per month after the trial ends\n  For 4 weeks receive unlimited Premium digital access to the FT&#39;s trusted, award-winning business news\n  Gift Article \u2013 share up to 10 articles a month with family, friends and colleagues\n  Select  Purchase a Print subscription for $10.15 per week   You will be billed $90.00 per month after the trial ends", "posttime": "2020-11-10 17:22:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u4e9a\u9a6c\u900a,amazon,\u5546\u5bb6,hits", "title": "\u6b27\u76df\u5bf9\u4e9a\u9a6c\u900a\u63d0\u51fa\u5546\u5bb6\u6570\u636e\u53cd\u5784\u65ad\u6307\u63a7", "title_en": "EU hits Amazon with antitrust charges over merchant data", "transed": 1, "url": "https://www.ft.com/content/4908995d-5ba4-4e14-a863-bcb8858e8bd2", "via": "", "real_tags": ["rust", "\u4e9a\u9a6c\u900a", "amazon", "\u5546\u5bb6", "hits"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1034222, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u5de5\u667a\u80fd\u6b63\u5728\u88ab\u7528\u6765\u521b\u4f5c\u65b0\u6b4c\uff0c\u770b\u8d77\u6765\u4f3c\u4e4e\u662f\u5f17\u5170\u514b\u00b7\u897f\u7eb3\u7279\u62c9(Frank Sinatra)\u548c\u5176\u4ed6\u5df2\u6545\u660e\u661f\u6f14\u5531\u7684\u3002\u201cDeepfake\u201d\u662f\u4e2a\u53ef\u7231\u7684\u5c0f\u628a\u620f--\u4f46\u5b83\u4eec\u53ef\u80fd\u6c38\u8fdc\u6539\u53d8\u6d41\u884c\u97f3\u4e50\u3002\n\u201c\u5723\u8bde\u8282\u5230\u4e86\uff01\u201d\u70ed\u6c34\u6d74\u7f38\u65f6\u95f4\u5230\u4e86\uff01\u201c\u3002\u5f17\u5170\u514b\u00b7\u8f9b\u7eb3\u7279\u62c9\u5531\u9053\u3002\u81f3\u5c11\uff0c\u542c\u8d77\u6765\u50cf\u4ed6\u3002\u8f7b\u677e\u7684\u6325\u6746\uff0c\u6b22\u5feb\u7684\u53cb\u5584\uff0c\u4ee5\u53ca\u4f4e\u8c03\u7684\u94dc\u7ba1\u548c\u5f26\u4e50\u7684\u7e41\u8363\uff0c\u8fd9\u51e0\u4e4e\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u67d0\u79cd\u4e22\u5931\u5df2\u4e45\u7684\u897f\u7eb3\u7279\u62c9(Sinatra)\u7684\u6f14\u793a\u3002\u5c31\u8fde\u5b83\u7684\u58f0\u97f3--\u66fe\u7ecf\u88ab\u63cf\u8ff0\u4e3a\u201c\u5145\u6ee1\u4f20\u5947\u548c\u9057\u61be\u201d\u7684\u4e30\u5bcc\u97f3\u8c03--\u4e5f\u51fa\u5947\u5730\u719f\u6089\uff0c\u5c3d\u7ba1\u5b83\u786e\u5b9e\u5728\u97f3\u8c03\u4e4b\u95f4\u6447\u6447\u6643\u6643\uff0c\u6709\u65f6\u542c\u8d77\u6765\u5c31\u50cf\u662f\u5728\u6e38\u6cf3\u6c60\u5e95\u90e8\u5f55\u5236\u7684\u4e00\u6837\u3002\n\u8fd9\u9996\u6b4c\u5e76\u4e0d\u662f\u4e00\u9996\u771f\u6b63\u7684\u66f2\u76ee\uff0c\u800c\u662f\u4e00\u9996\u4ee4\u4eba\u4fe1\u670d\u7684\u8d5d\u54c1\uff0c\u7531\u201c\u7814\u7a76\u548c\u90e8\u7f72\u516c\u53f8\u201dOpenAI\u521b\u9020\uff0c\u8be5\u516c\u53f8\u7684Jukebox\u9879\u76ee\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u6765\u751f\u6210\u5404\u79cd\u6d41\u6d3e\u548c\u827a\u672f\u5bb6\u98ce\u683c\u7684\u5e26\u6709\u6b4c\u8bcd\u7684\u97f3\u4e50\u3002\u9664\u4e86\u8f9b\u7eb3\u7279\u62c9\uff0c\u4ed6\u4eec\u8fd8\u6a21\u4eff\u4e86\u51ef\u8482\u00b7\u4f69\u91cc\u3001\u732b\u738b\u3001\u897f\u8499\u548c\u52a0\u82ac\u514b\u5c14\u30012Pac\u3001\u585e\u7433\u00b7\u8fea\u7fc1\u7b49\u7b49\u3002\u901a\u8fc7\u4f7f\u7528\u4ece\u7f51\u7edc\u4e0a\u6293\u53d6\u7684120\u4e07\u9996\u6b4c\u66f2\u4ee5\u53ca\u76f8\u5e94\u7684\u6b4c\u8bcd\u548c\u5143\u6570\u636e\u5bf9\u8be5\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u5b83\u53ef\u4ee5\u6839\u636e\u4f60\u8f93\u5165\u7684\u5185\u5bb9\u8f93\u51fa\u51e0\u5206\u949f\u957f\u7684\u539f\u59cb\u97f3\u9891\u3002\u6bd4\u5982\u8bf4\uff0c\u8f93\u5165Queen\u6216Dolly Parton\u6216Mozart\uff0c\u4f60\u4f1a\u5f97\u5230\u53e6\u4e00\u7aef\u7684\u8fd1\u4f3c\u503c\u3002\n\u201c\u4f5c\u4e3a\u4e00\u9879\u5de5\u7a0b\uff0c\u5b83\u771f\u7684\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u201d\u7535\u5b50\u97f3\u4e50\u5bb6\u3001\u91d1\u5320\u5b66\u9662\u7684\u7814\u7a76\u5458\u517c\u5b66\u8005\u9a6c\u4fee\u00b7\u6613-\u91d1\u535a\u58eb(Dr.Matthew Yee-King)\u8bf4\u3002(OpenAI\u62d2\u7edd\u63a5\u53d7\u91c7\u8bbf\u3002)\u3002\u201c\u5b83\u4eec\u5c06\u97f3\u9891\u4fe1\u53f7\u5206\u89e3\u6210\u4e09\u4e2a\u4e0d\u540c\u5c42\u6b21\u7684\u97f3\u4e50\u8bcd\u6761--\u5982\u679c\u4f60\u613f\u610f\uff0c\u8fd8\u53ef\u4ee5\u662f\u4e00\u672c\u8bcd\u5178--\u7ed9\u4f60\u4e00\u7ec4\u8db3\u4ee5\u91cd\u5efa\u8f93\u5165\u7684\u97f3\u4e50\u7684\u6838\u5fc3\u7247\u6bb5\u3002\u201d\u7136\u540e\uff0c\u7b97\u6cd5\u53ef\u4ee5\u6839\u636e\u4f60\u8f93\u5165\u7684\u523a\u6fc0\u91cd\u65b0\u6392\u5217\u8fd9\u4e9b\u7247\u6bb5\u3002\u6bd4\u5982\uff0c\u7ed9\u5b83\u4e00\u4e9b\u57c3\u62c9\u00b7\u83f2\u8328\u6770\u62c9\u5fb7(Ella Fitzgerald)\u7684\u4f5c\u54c1\uff0c\u5b83\u5c31\u4f1a\u627e\u5230\u5e76\u62fc\u51d1\u51fa\u300a\u5b57\u5178\u300b\u4e2d\u7684\u76f8\u5173\u7247\u6bb5\uff0c\u5728\u5979\u7684\u97f3\u4e50\u7a7a\u95f4\u91cc\u521b\u9020\u4e00\u4e9b\u4e1c\u897f\u3002\n\u5c3d\u7ba1\u6280\u672f\u6210\u5c31\u4ee4\u4eba\u94a6\u4f69\uff0c\u4f46\u4e00\u4e9b\u6837\u54c1\u6709\u4e00\u4e9b\u53ef\u6015\u7684\u4e1c\u897f\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u65e9\u5df2\u53bb\u4e16\u7684\u827a\u672f\u5bb6\u7684\u6837\u54c1--\u60b2\u4f24\u7684\u5e7d\u7075\u8ff7\u5931\u5728\u673a\u5668\u91cc\uff0c\u5583\u5583\u5730\u8bf4\u7740\u9648\u8bcd\u6ee5\u8c03\u3002\u897f\u7eb3\u7279\u62c9\u6837\u672c\u4e0b\u9762\u7684\u4e00\u6761\u8bc4\u8bba\u5199\u9053\uff1a\u201c\u8be5\u6b7b\u7684\u5c16\u53eb\u58f0\u201d\uff1b\u53e6\u4e00\u6761\u8bc4\u8bba\u5199\u9053\uff1a\u201c\u542c\u8d77\u6765\u771f\u4ed6\u5988\u7684\u90aa\u6076\u3002\u201d\u6211\u4eec\u73b0\u5728\u5728\u795e\u79d8\u8c37\u3002\n\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u516c\u53f8\u5c06\u7b97\u6cd5\u5e94\u7528\u4e8e\u97f3\u4e50\uff0cDeepfac\u97f3\u4e50\u5c06\u5bf9\u97f3\u4e50\u4ea7\u4e1a\u4ea7\u751f\u5e7f\u6cdb\u7684\u5f71\u54cd\u3002\u8c37\u6b4c\u7684Magenta\u9879\u76ee--\u6807\u699c\u4e3a\u201c\u63a2\u7d22\u673a\u5668\u5b66\u4e60\u4f5c\u4e3a\u521b\u9020\u8fc7\u7a0b\u4e2d\u7684\u4e00\u79cd\u5de5\u5177\u201d--\u5df2\u7ecf\u5f00\u53d1\u4e86\u51e0\u4e2a\u5f00\u6e90API\uff0c\u5141\u8bb8\u4f7f\u7528\u5168\u65b0\u7684\u673a\u5668\u4ea7\u751f\u7684\u58f0\u97f3\u6216\u4eba\u7c7b\u4e0e\u4eba\u5de5\u667a\u80fd\u7684\u5171\u540c\u521b\u9020\u8fdb\u884c\u5408\u6210\u3002\u5b89\u73c0\u97f3\u4e50(Amper Music)\u7b49\u4f17\u591a\u521d\u521b\u516c\u53f8\u4e3a\u5a92\u4f53\u5185\u5bb9\u5236\u4f5c\u5b9a\u5236\u7684\u3001\u4eba\u5de5\u667a\u80fd\u751f\u6210\u7684\u97f3\u4e50\uff0c\u5e76\u62e5\u6709\u5168\u7403\u7248\u6743\u3002\u5c31\u8fdeSpotify\u4e5f\u5728\u6d89\u8db3\uff1b\u5176\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u5c0f\u7ec4\u7531\u7d22\u5c3c\u97f3\u4e50(Sony Music)\u8ba1\u7b97\u673a\u79d1\u5b66\u5b9e\u9a8c\u5ba4\u524d\u8d1f\u8d23\u4eba\u5f17\u6717\u7d22\u74e6\u00b7\u5e15\u5207\u7279(Fran\u00e7ois Pachet)\u9886\u5bfc\u3002\n\u7136\u800c\uff0c\u4e0d\u96be\u9884\u89c1\uff0c\u8fd9\u79cd\u6df1\u5ea6\u9020\u5047\u4f1a\u5982\u4f55\u5bfc\u81f4\u4f26\u7406\u548c\u77e5\u8bc6\u4ea7\u6743\u95ee\u9898\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u4e3a\u5728\u7535\u5f71\u3001\u7535\u89c6\u8282\u76ee\u6216\u5546\u4e1a\u5e7f\u544a\u4e2d\u4f7f\u7528\u67d0\u4f4d\u77e5\u540d\u827a\u672f\u5bb6\u7684\u97f3\u4e50\u800c\u652f\u4ed8\u5e02\u573a\u4ef7\uff0c\u4f60\u53ef\u4ee5\u521b\u9020\u81ea\u5df1\u7684\u4eff\u5236\u54c1\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6d41\u5a92\u4f53\u670d\u52a1\u53ef\u4ee5\u7528\u542c\u8d77\u6765\u76f8\u4f3c\u7684\u4e0d\u8d5a\u53d6\u7248\u7a0e\u7684\u4eba\u5de5\u667a\u80fd\u827a\u672f\u5bb6\u6765\u586b\u5145\u6d41\u6d3e\u64ad\u653e\u5217\u8868\uff0c\u4ece\u800c\u589e\u52a0\u5229\u6da6\u3002\u6700\u7ec8\uff0c\u6d41\u5a92\u4f53\u670d\u52a1\u3001\u5e7f\u64ad\u7535\u53f0\u548c\u5176\u4ed6\u673a\u6784\u4f1a\u8d8a\u6765\u8d8a\u591a\u5730\u907f\u514d\u4e3a\u97f3\u4e50\u4ed8\u8d39\u5417\uff1f\n\u97f3\u4e50\u884c\u4e1a\u7684\u6cd5\u5f8b\u90e8\u95e8\u6b63\u5728\u5bc6\u5207\u5173\u6ce8\u4e8b\u6001\u7684\u53d1\u5c55\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0cRoc Nation\u5411\u4e00\u540d\u533f\u540dYouTube\u7528\u6237\u63d0\u4ea4\u4e86DMCA\u4e0b\u7ebf\u8bf7\u6c42\uff0c\u539f\u56e0\u662f\u8be5\u7528\u6237\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u6a21\u4effJay-Z\u7684\u58f0\u97f3\u548c\u8282\u594f\u6765\u8bf4\u5531\u838e\u58eb\u6bd4\u4e9a\u548c\u6bd4\u5229\u00b7\u4e54\u5c14\u3002(\u4e24\u8005\u90fd\u975e\u5e38\u903c\u771f\u3002)\u3002\u5907\u6848\u6587\u4ef6\u79f0\uff1a\u201c\u8be5\u5185\u5bb9\u975e\u6cd5\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u6765\u6a21\u4eff\u6211\u4eec\u5ba2\u6237\u7684\u58f0\u97f3\u3002\u201d\u867d\u7136\u8fd9\u4e9b\u89c6\u9891\u6700\u7ec8\u88ab\u6062\u590d\uff0c\u201c\u7b49\u5f85\u539f\u544a\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\u201d\uff0c\u4f46\u8fd9\u7c7b\u6848\u4ef6--\u7b2c\u4e00\u8d77--\u4ecd\u5728\u9686\u9686\u4f5c\u54cd\u3002\nRoc Nation\u62d2\u7edd\u5c31\u4eba\u5de5\u667a\u80fd\u6a21\u4eff\u7684\u6cd5\u5f8b\u542b\u4e49\u7f6e\u8bc4\uff0c\u82f1\u56fd\u300a\u536b\u62a5\u300b\u8054\u7cfb\u7684\u5176\u4ed6\u51e0\u5bb6\u4e3b\u8981\u5531\u7247\u516c\u53f8\u4e5f\u62d2\u7edd\u7f6e\u8bc4\u3002\u4e00\u4f4d\u533f\u540d\u4eba\u58eb\u8868\u793a\uff1a\u201c\u4f5c\u4e3a\u4e00\u5bb6\u4e0a\u5e02\u516c\u53f8\uff0c\u6211\u4eec\u5728\u8ba8\u8bba\u672a\u6765\u9762\u4e34\u7684\u8bdd\u9898\u65f6\u5fc5\u987b\u8c28\u614e\u3002\u201d\u5c31\u8fde\u82f1\u56fd\u884c\u4e1a\u7ec4\u7ec7\u82f1\u56fd\u516c\u4f17\u5ba3\u4f20\u5c40(BPI)\u4e5f\u62d2\u7edd\u516c\u5f00\u8c08\u8bba\u8be5\u884c\u4e1a\u5c06\u5982\u4f55\u5e94\u5bf9\u8fd9\u4e2a\u7f8e\u4e3d\u7684\u65b0\u4e16\u754c\uff0c\u4ee5\u53ca\u53ef\u80fd\u91c7\u53d6\u54ea\u4e9b\u63aa\u65bd\u6765\u4fdd\u62a4\u827a\u672f\u5bb6\u53ca\u5176\u4f5c\u54c1\u7684\u5b8c\u6574\u6027\u3002\u56fd\u9645\u97f3\u4e50\u8d38\u6613\u673a\u6784IFPI\u6ca1\u6709\u56de\u590d\u7535\u5b50\u90ae\u4ef6\u3002\n\u6216\u8bb8\u539f\u56e0\u662f\uff0c\u81f3\u5c11\u5728\u82f1\u56fd\uff0c\u4eba\u4eec\u62c5\u5fc3\u5b9e\u9645\u4e0a\u6ca1\u6709\u6cd5\u5f8b\u4fdd\u62a4\u7684\u57fa\u7840\u3002Beggars Group\u7684\u6cd5\u5f8b\u90e8\u4e3b\u7ba1\u9c81\u73c0\u7279\u00b7\u65af\u51ef\u5229\u7279(Rupert Skellett)\u8bf4\uff1a\u201c\u97f3\u4e50\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u7248\u6743\u3002\u201dBeggars Group\u65d7\u4e0b\u6709\u72ec\u7acb\u5531\u7247\u516c\u53f84AD\u3001XL\u3001Rough Trade\u7b49\u3002\u201c\u4e00\u4e2a\u5728\u4e50\u8c31\u548c\u6b4c\u8bcd\u4e2d--\u5373\u6b4c\u66f2--\u53e6\u4e00\u4e2a\u5728\u5f55\u97f3\u4e2d\uff0c\u8fd9\u6b63\u662f\u5531\u7247\u516c\u53f8\u6240\u5173\u5fc3\u7684\u3002\u201d\u5982\u679c\u6709\u4eba\u6ca1\u6709\u4f7f\u7528\u8fc7\u771f\u5b9e\u7684\u5f55\u97f3\u201c--\u5982\u679c\u4ed6\u4eec\u7528\u4eba\u5de5\u667a\u80fd\u5236\u4f5c\u4e86\u4e00\u4e2a\u6a21\u62df\u6a21\u578b--\u201d\u4f60\u5c31\u4e0d\u4f1a\u56e0\u4e3a\u5f55\u97f3\u7684\u7248\u6743\u800c\u5bf9\u4ed6\u4eec\u63d0\u8d77\u6cd5\u5f8b\u8bc9\u8bbc\u3002\u201c\u3002\n\u65af\u51ef\u5229\u7279\u8bf4\uff0c\u201c\u5047\u5192\u201d\u5f55\u97f3\u6709\u6f5c\u5728\u7684\u8bc9\u8bbc\u7406\u7531\uff0c\u4f46\u4e3e\u8bc1\u8d23\u4efb\u7e41\u91cd\uff0c\u8fd9\u6837\u7684\u8bc9\u8bbc\u5728\u7f8e\u56fd\u66f4\u6709\u53ef\u80fd\u6210\u529f\uff0c\u56e0\u4e3a\u7f8e\u56fd\u6709\u6cd5\u5f8b\u4fdd\u62a4\uff0c\u7981\u6b62\u51fa\u4e8e\u5546\u4e1a\u76ee\u7684\u5192\u5145\u540d\u4eba\uff0c\u800c\u4e14\u5728\u7f8e\u56fd\uff0c\u9a6c\u6587\u00b7\u76d6\u4f0a(Marvin Gaye)\u7684\u9057\u4ea7\u6536\u8d2d\u6a21\u7cca\u7ebf(Blurred Lines)\u7b49\u6284\u88ad\u6848\u4ef6\u5df2\u7ecf\u6210\u529f\u3002\u82f1\u56fd\u6cd5\u5f8b\u6ca1\u6709\u8fd9\u6837\u7684\u89c4\u5b9a\u6216\u5148\u4f8b\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u521b\u9020\u8005\u660e\u786e\u8bf4\u660e\u6df1\u4f2a\u7684\u6027\u8d28\uff0c\u5373\u4f7f\u662f\u5546\u4e1a\u5f00\u91c7\u6df1\u4f2a\u4e5f\u53ef\u80fd\u65e0\u6cd5\u8d77\u8bc9\u3002\u201c\u8fd9\u5c06\u53d6\u51b3\u4e8e\u6bcf\u4e2a\u6848\u4f8b\u7684\u4e8b\u5b9e\uff0c\u201d\u65af\u51ef\u5229\u7279\u8bf4\u3002\n\u7136\u800c\uff0c\u4e00\u4e9b\u4eba\u5bf9\u8fd9\u79cd\u521b\u9020\u6027\u7684\u53ef\u80fd\u6027\u611f\u5230\u5174\u594b\u3002\u201c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u6570\u767e\u4e07\u9996\u6b4c\u66f2\u7684\u7edf\u8ba1\u6a21\u578b\uff0c\u4f60\u53ef\u4ee5\u95ee\u8fd9\u4e2a\u7b97\u6cd5\uff1a\u4f60\u6ca1\u770b\u8fc7\u7684\u662f\u4ec0\u4e48\uff1f\u201d\u6021\u666f\u8bf4\u3002\u201c\u4f60\u53ef\u4ee5\u627e\u5230\u90a3\u4e2a\u7a7a\u767d\uff0c\u7136\u540e\u521b\u9020\u4e00\u4e9b\u65b0\u7684\u4e1c\u897f\u3002\u201d\u9a6c\u7279\u00b7\u5fb7\u83b1\u8d6b\u65af\u7279(Mat Dryhurst)\u662f\u4e00\u4f4d\u827a\u672f\u5bb6\u548c\u64ad\u5ba2\uff0c\u4ed6\u591a\u5e74\u6765\u4e00\u76f4\u5728\u7814\u7a76\u548c\u7814\u7a76\u4eba\u5de5\u667a\u80fd\u53ca\u5176\u76f8\u5173\u6280\u672f\uff0c\u4ed6\u8bf4\uff1a\u201c\u6211\u4eec\u770b\u5230\u7684\u6700\u63a5\u8fd1\u91c7\u6837\u7684\u7c7b\u6bd4\u3002\u8fd9\u4e9b\u6a21\u578b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u7684\u7ef4\u5ea6\uff0c\u4ee3\u8868\u4e86\u91c7\u6837\u9c8d\u4f0a\u7684\u56fa\u5b9a\u58f0\u97f3\u5f55\u97f3\u548c\u8ba9\u9c8d\u4f0a\u968f\u5fc3\u6240\u6b32\u5730\u6f14\u5531\u4e4b\u95f4\u7684\u533a\u522b--\u8fd9\u662f\u4e00\u79cd\u975e\u51e1\u7684\u529b\u91cf\u548c\u8d23\u4efb\u3002\u201c\u3002\n\u6df1\u5047\u4e5f\u63d0\u51fa\u4e86\u66f4\u6df1\u5c42\u6b21\u7684\u95ee\u9898\uff1a\u662f\u4ec0\u4e48\u8ba9\u67d0\u4e2a\u7279\u5b9a\u7684\u827a\u672f\u5bb6\u53d8\u5f97\u7279\u522b\uff1f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4f1a\u5bf9\u67d0\u4e9b\u98ce\u683c\u6216\u7c7b\u578b\u7684\u97f3\u4e50\u505a\u51fa\u56de\u5e94\uff0c\u5f53\u8fd9\u79cd\u98ce\u683c\u6216\u7c7b\u578b\u53ef\u4ee5\u6309\u9700\u521b\u4f5c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1fYee-King\u8bbe\u60f3\u673a\u5668\u80fd\u591f\u6839\u636e\u4f60\u9009\u62e9\u7684\u8bbe\u7f6e\u968f\u65f6\u4e3a\u4f60\u751f\u6210\u5b8c\u7f8e\u7684\u97f3\u4e50-\u8fd9\u662f\u521d\u521b\u516c\u53f8Endel\u5df2\u7ecf\u5f00\u521b\u7684-\u4ee5\u53ca\u6d41\u884c\u6b4c\u661f\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u6536\u542c\u6a21\u578b\u6765\u9884\u6d4b\u54ea\u4e9b\u6b4c\u66f2\u4f1a\u6d41\u884c\uff0c\u6216\u8005\u4e0d\u540c\u7684\u4eba\u53e3\u7ed3\u6784\u4f1a\u505a\u51fa\u4ec0\u4e48\u53cd\u5e94\u3002\u201c\u53ea\u662f\u7ed9\u4eba\u4eec\u63d0\u4f9b\u4e00\u4e2a\u4f18\u5316\u7684\u58f0\u97f3\u6d41\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u827a\u672f\u5bb6\u4eec\u5b8c\u5168\u88ab\u6392\u9664\u5728\u5708\u5b50\u4e4b\u5916\u3002\u201d\n\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5931\u53bb\u4e86\u5bf9\u827a\u672f\u5bb6\u6240\u505a\u7684\u4e00\u5207--\u4ee5\u53ca\u5bf9\u521b\u4f5c\u7684\u4eba\u6027\u65b9\u9762--\u7684\u60c5\u611f\u6295\u8d44\uff0c\u6211\u4eec\u5c31\u4f1a\u5931\u53bb\u4e00\u4e9b\u97f3\u4e50\u7684\u6839\u672c\u610f\u4e49\u4e0a\u7684\u4e1c\u897f\u3002\u5fb7\u83b1\u8d6b\u65af\u7279\u8bf4\uff1a\u201c\u8fd9\u4e9b\u7cfb\u7edf\u662f\u9488\u5bf9\u4eba\u7c7b\u7684\u8868\u8fbe\u8fdb\u884c\u8bad\u7ec3\u7684\uff0c\u5e76\u5c06\u589e\u5f3a\u4eba\u7c7b\u7684\u8868\u8fbe\u80fd\u529b\u3002\u201d\u201c\u4f46\u7f3a\u5931\u7684\u4e00\u5757\u62fc\u56fe\u662f\u627e\u5230\u8865\u507f\u4eba\u4eec\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u53d6\u4ee3\u4ed6\u4eec\u3002\u201d", "note_en": "Artificial intelligence is being used to create new songs seemingly performed by Frank Sinatra and other dead stars. \u2018Deepfakes\u2019 are cute tricks \u2013 but they could change pop for ever\n   \u2018It\u2019s Christmas time! It\u2019s hot tub time!\u201d sings  Frank Sinatra. At least, it sounds like him. With an easy swing, cheery bonhomie, and understated brass and string flourishes, this could just about pass as some long lost Sinatra demo. Even the voice \u2013 that rich tone once described as \u201call  legato and regrets\u201d \u2013 is eerily familiar, even if it does lurch between keys and, at times, sounds as if it was recorded at the bottom of a swimming pool.\n The song in question not a genuine track, but a convincing fake created by \u201cresearch and deployment company\u201d OpenAI, whose Jukebox project uses artificial intelligence to generate music, complete with lyrics, in a variety of genres and artist styles. Along with Sinatra, they\u2019ve done what are known as \u201cdeepfakes\u201d of Katy Perry, Elvis, Simon and Garfunkel, 2Pac, C\u00e9line Dion and more. Having trained the model using 1.2m songs scraped from the web, complete with the corresponding lyrics and metadata, it can output raw audio several minutes long based on whatever you feed it. Input, say, Queen or Dolly Parton or Mozart, and you\u2019ll get an approximation out the other end.\n  \u201cAs a piece of engineering, it\u2019s really impressive,\u201d says Dr Matthew Yee-King, an electronic musician, researcher and academic at Goldsmiths. (OpenAI declined to be interviewed.) \u201cThey break down an audio signal into a set of  lexemes of music \u2013 a dictionary if you like \u2013 at three different layers of time, giving you a set of core fragments that is sufficient to reconstruct the music that was fed in. The algorithm can then rearrange these fragments, based on the stimulus you input. So, give it some Ella Fitzgerald for example, and it will find and piece together the relevant bits of the \u2018dictionary\u2019 to create something in her musical space.\u201d\n  Admirable as the technical achievement is, there\u2019s something horrifying about some of the samples, particularly those of artists who have long since died \u2013 sad ghosts lost in the machine, mumbling banal cliches. \u201cThe screams of the damned\u201d reads one comment below that Sinatra sample; \u201cSOUNDS FUCKING DEMONIC\u201d reads another. We\u2019re down in the  Uncanny Valley.\n Deepfake music is set to have wide-ranging ramifications for the music industry as more companies apply algorithms to music. Google\u2019s Magenta Project \u2013 billed as \u201cexploring machine learning as a tool in the creative process\u201d \u2013 has developed several open source APIs that allow composition using entirely new, machine-generated sounds, or human-AI co-creations. Numerous startups, such as Amper Music, produce custom, AI-generated music for media content, complete with global copyright. Even Spotify is dabbling; its AI research group is led by Fran\u00e7ois Pachet, former head of Sony Music\u2019s computer science lab.\n It\u2019s not hard to foresee, though, how such deepfakes could lead to ethical and intellectual property issues. If you didn\u2019t want to pay the market rate for using an established artist\u2019s music in a film, TV show or commercial, you could create your own imitation. Streaming services could, meanwhile, pad out genre playlists with similar sounding AI artists who don\u2019t earn royalties, thereby increasing profits. Ultimately, will streaming services, radio stations and others increasingly avoid paying humans for music?\n Legal departments in the music industry are following developments closely. Earlier this year, Roc Nation filed DMCA takedown requests against an anonymous YouTube user for using AI to mimic Jay-Z\u2019s voice and cadence to rap Shakespeare and Billy Joel. (Both are incredibly realistic.) \u201cThis content unlawfully uses an AI to impersonate our client\u2019s voice,\u201d said the filing. And while the videos were eventually reinstated \u201cpending more information from the claimant\u201d, the case \u2013 the first of its kind \u2013 rumbles on.\n  Roc Nation declined to comment on the legal implications of AI impersonation, as did several other major labels contacted by the Guardian: \u201cAs a public company, we have to exercise caution when discussing future facing topics,\u201d said one anonymously. Even UK industry body the BPI refused to go on the record with regard to how the industry will deal with this brave new world and what steps might be taken to protect artists and the integrity of their work. The IFPI, an international music trade body, did not respond to emails.\n Perhaps the reason is, in the UK at least, there\u2019s a worry that there\u2019s not actually a basis for legal protection. \u201cWith music there are two separate copyrights,\u201d says Rupert Skellett, head of legal for Beggars Group, which encompasses indie labels 4AD, XL, Rough Trade and more. \u201cOne in the music notation and the lyrics \u2013 ie the song \u2013 and a separate one in the sound recording, which is what labels are concerned with. And if someone hasn\u2019t used the actual recording\u201d \u2013 if they\u2019ve created a simulacrum using AI \u2013 \u201cyou\u2019d have no legal action against them in terms of copyright with regards to the sound recording.\u201d\n There\u2019d be a potential cause of action with regards to \u201cpassing off\u201d the recording, but, says Skellett, the burden of proof is onerous, and such action would be more likely to succeed in the US, where legal protections exist against impersonating famous people for commercial purposes, and where plagiarism cases like Marvin Gaye\u2019s estate taking on Blurred Lines have succeeded. UK law has no such provisions or precedents, so even the commercial exploitation of deepfakes, if the creator was explicit about their nature, might not be actionable. \u201cIt would depend on the facts of each case,\u201d Skellett says.\n  Some, however, are excited by the creative possibilities. \u201cIf you\u2019ve got a statistical model of millions of songs, you can ask the algorithm: what haven\u2019t you seen?\u201d says Yee-King. \u201cYou can find that blank space, and then create something new.\u201d Mat Dryhurst, an artist and podcaster who has spent years researching and working with AI and associated technology, says: \u201cThe closest analogy we see is to sampling. These models allow a new dimension of that, and represent the difference between sampling a fixed recording of Bowie\u2019s voice and having Bowie sing whatever you like \u2013 an extraordinary power and responsibility.\u201d\n Deepfakes also pose deeper questions: what makes a particular artist special? Why do we respond to certain styles or types of music, and what happens when that can be created on demand? Yee-King imagines machines able to generate the perfect piece of music for you at any time, based on settings that you select \u2013 something already being pioneered by the startup Endel \u2013 as well as pop stars using an AI listening model to predict which songs will be popular or what different demographics respond to. \u201cJust feeding people an optimised stream of sound,\u201d he says, \u201cwith artists taken out of the loop completely.\u201d\n But if we lose all sense of emotional investment in what artists do \u2013 and in the human side of creation \u2013 we will lose something fundamental to music. \u201cThese systems are trained on human expression and will augment it,\u201d says Dryhurst. \u201cBut the missing piece of the puzzle is finding ways to compensate people, not replace them.\u201d", "posttime": "2020-11-10 17:05:36", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4eba\u5de5\u667a\u80fd,\u77e5\u8bc6\u4ea7\u6743,powered,\u97f3\u4e50", "title": "\u50cfOpenAI\u7684Jukebox\u8fd9\u6837\u7684\u4eba\u5de5\u667a\u80fd\u5de5\u5177\u662f\u5982\u4f55\u88ab\u7528\u6765\u521b\u4f5c\u6df1\u5ea6\u5047\u97f3\u4e50\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u7cfb\u5217\u9053\u5fb7\u548c\u77e5\u8bc6\u4ea7\u6743\u95ee\u9898", "title_en": "How AI-powered tools like OpenAI's Jukebox are being used to create deepfake music, which could lead to a host of ethical and intellectual property issues", "transed": 1, "url": "https://www.theguardian.com/music/2020/nov/09/deepfake-pop-music-artificial-intelligence-ai-frank-sinatra", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "\u77e5\u8bc6\u4ea7\u6743", "powered", "\u97f3\u4e50"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1034221, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u514d\u8d39\u5c06\u6700\u4f73SaaS\u521b\u610f\u76f4\u63a5\u53d1\u9001\u5230\u60a8\u7684\u6536\u4ef6\u7bb1", "note_en": "Free best SaaS ideas delivered straight to your inbox", "posttime": "2020-11-10 17:01:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u521b\u610f,saas,ideas", "title": "\u6700\u597d\u7684SaaS\u521b\u610f\u76f4\u63a5\u53d1\u9001\u5230\u60a8\u7684\u6536\u4ef6\u7bb1", "title_en": "Best SaaS ideas delivered straight to your inbox", "transed": 1, "url": "http://saasideas.net/", "via": "", "real_tags": ["\u521b\u610f", "saas", "ideas"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1034220, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65f6\u4e0d\u65f6\u5730\uff0c\u6211\u4f1a\u88ab\u95ee\u5230\u5982\u4f55\u5728\u5f00\u53d1\u3001\u4fee\u590d\u9519\u8bef\u6216\u6269\u5c55curl\u65f6\u987a\u5229\u5730\u4f7f\u7528git\uff0c\u6216\u8005\u6211\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\u6bd5\u7adf\uff0c\u6211\u5168\u804c\u4ece\u4e8b\u5f00\u6e90\u5de5\u4f5c\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4e0eGit(\u548cGitHub)\u7684\u4e92\u52a8\u975e\u5e38\u9891\u7e41\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u6574\u5929\u90fd\u5728\u548cGit\u6253\u4ea4\u9053\u3002\u5e73\u65f6\uff0c\u6211\u4f1a\u53d1\u51fa\u51e0\u767e\u6b21git\u547d\u4ee4\u3002\n\u6211\u6709\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728curl\u4e2d\u4f7f\u7528git\u3002\u8fd9\u5c31\u662f\u5b83\u7684\u8fd0\u4f5c\u65b9\u5f0f\u3002\n\u6211\u51e0\u4e4e\u53ea\u5728\u7ec8\u7aef\u7684\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528git\u3002\u4e3a\u4e86\u5e2e\u52a9\u6211\u4e86\u89e3\u6211\u5728\u54ea\u4e2a\u5206\u652f\u673a\u6784\u5de5\u4f5c\uff0c\u6211\u6709\u8fd9\u4e2a\u5c0f\u5c0f\u7684bash\u52a9\u624b\u811a\u672c\u3002\nBrname(){a=$(git rev-parse--abbrev-ref head 2&gt\uff1b/dev/null)\u5982\u679c[-n&#34\uff1b$a&#34\uff1b]\uff1b\u5219ECHO&#34\uff1b[$a]&#34\uff1bELSE ECHO&#34\uff1b&#34\uff1bFI}PS1=&#34\uff1b\\u@\\h\uff1a\\W\\$(Brname)$&#34\uff1b\n\u8fd9\u4f1a\u7ed9\u6211\u4e00\u4e2a\u63d0\u793a\u7b26\uff0c\u663e\u793a\u7528\u6237\u540d\u3001\u4e3b\u673a\u540d\u3001\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u548c\u5f53\u524d\u7b7e\u51fa\u7684git\u5206\u652f\u3002\n\u6b64\u5916\uff0c\u6211\u5bf9git\u4f7f\u7528Debian\u7684bash\u547d\u4ee4\u884c\u8865\u5168\uff0c\u8fd9\u4e5f\u975e\u5e38\u65b9\u4fbf\u3002\u5b83\u5141\u8bb8\u6211\u4f7f\u7528Tab\u952e\u5b8c\u6210git\u547d\u4ee4\u548c\u5206\u652f\u673a\u6784\u540d\u79f0\u7b49\u64cd\u4f5c\u3002\n\u5f53\u7136\uff0c\u6211\u4e5f\u6709\u81ea\u5df1\u5b9a\u5236\u7684~/.gitconfig\u6587\u4ef6\uff0c\u53ef\u4ee5\u4e3a\u6211\u63d0\u4f9b\u4e00\u4e9b\u65b9\u4fbf\u7684\u522b\u540d\u548c\u8bbe\u7f6e\u3002\u6211\u6700\u5e38\u7528\u7684git\u522b\u540d\u662f\uff1a\n\u6700\u65b0\u7684\u4e00\u4e2a\u662f\u5217\u51fa\u81ea\u6700\u65b0\u7248\u672c\u4ee5\u6765\u5bf9curl\u6240\u505a\u7684\u6240\u6709\u66f4\u6539-\u6ce8\u91ca\u201c\u540c\u6b65\u201d\u3002\u5176\u4ed6\u7684\u5e94\u8be5\u662f\u4e0d\u8a00\u800c\u55bb\u7684\u3002\n\u4e3b\u8981\u7684curl\u5f00\u53d1\u662f\u5728\u5355\u4e00\u7684curl/curl git\u5e93\u4e2d\u5b8c\u6210\u7684(\u4e3b\u8981\u6258\u7ba1\u5728GitHub\u4e0a)\u3002\u6211\u4eec\u4fdd\u7559\u4e86\u4e3b\u5206\u652f\uff0c\u5373\u524d\u6cbf\u5f00\u53d1\u6811\uff0c\u5e76\u4e14\u6211\u4eec\u52aa\u529b\u5de5\u4f5c\uff0c\u4ee5\u59cb\u7ec8\u4fdd\u6301\u5b83\u7684\u5de5\u4f5c\u548c\u529f\u80fd\u3002\u5f53\u8fd9\u4e00\u5929\u5230\u6765\u7684\u65f6\u5019(\u6bcf\u516b\u5468)\uff0c\u6211\u4eec\u5c31\u4f1a\u5728\u4e3b\u5206\u652f\u4e0a\u53d1\u5e03\uff0c\u6211\u4eec\u4f1a\u63d0\u4f9b\u8be5\u5206\u652f\u7684\u201c\u6bcf\u65e5\u5feb\u7167\u201d\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5feb\u7167\u653e\u5728\u4e00\u8d77--\u5bf9--\u6bcf\u5929\u3002\n\u5728\u5c06\u4fee\u590d\u548c\u529f\u80fd\u5408\u5e76\u5230master\u4e2d\u65f6\uff0c\u6211\u4eec\u907f\u514d\u5408\u5e76\u63d0\u4ea4\uff0c\u5e76\u5c3d\u53ef\u80fd\u591a\u5730\u4f7f\u7528rebase\u548c\u5feb\u8fdb\u3002\u8fd9\u4f7f\u5f97\u8be5\u5206\u652f\u975e\u5e38\u6613\u4e8e\u6d4f\u89c8\u3001\u7406\u89e3\u548c\u4f7f\u7528-\u56e0\u4e3a\u5b83\u662f100%\u7ebf\u6027\u7684\u3002\n\u5f53\u6211\u5f00\u59cb\u505a\u4e00\u4e9b\u65b0\u7684\u4e8b\u60c5\u65f6\uff0c\u6bd4\u5982\u4fee\u590d\u4e00\u4e2abug\uff0c\u6216\u8005\u5c1d\u8bd5\u522b\u4eba\u7684\u8865\u4e01\u6216\u7c7b\u4f3c\u7684\u8865\u4e01\uff0c\u6211\u4f1a\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u672c\u5730\u5206\u652f\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u5206\u652f\u4e0a\u5de5\u4f5c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4e0d\u662f\u76f4\u63a5\u5728\u603b\u516c\u53f8\u5de5\u4f5c\u3002\u5206\u679d\u65e2\u5bb9\u6613\u53c8\u5feb\u6377\uff0c\u6ca1\u6709\u7406\u7531\u56de\u907f\u5927\u91cf\u7684\u5206\u679d\uff01\n\u6211\u901a\u5e38\u4f7f\u7528GitHub\u7528\u6237\u540d\u4f5c\u4e3a\u5206\u652f\u547d\u540d\u7684\u524d\u7f00\uff0c\u8fd9\u6837\u5f53\u6211\u5c06\u5b83\u4eec\u63a8\u9001\u5230\u670d\u52a1\u5668\u65f6\uff0c\u5c31\u4f1a\u6ce8\u610f\u5230\u8c01\u662f\u521b\u5efa\u8005(\u800c\u4e14\u6211\u53ef\u4ee5\u5728\u672c\u5730\u548c\u8fdc\u7a0b\u4f7f\u7528\u76f8\u540c\u7684\u5206\u652f\u540d\u79f0)\u3002\n\u4e00\u65e6\u6211\u5230\u4e86\u67d0\u4e2a\u5730\u65b9\uff0c\u6211\u5c31\u4f1a\u53bb\u6811\u679d\u3002\u7136\u540e\uff0c\u5728\u6211\u8ba4\u4e3a\u81ea\u5df1\u201c\u6682\u65f6\u5b8c\u6210\u201d\u4e4b\u524d\uff0c\u5b83\u53ef\u80fd\u4f1a\u4ee5\u4e00\u6b21\u6216\u591a\u6b21\u63d0\u4ea4\u800c\u544a\u7ec8\uff0c\u800c\u6211\u672c\u6765\u6253\u7b97\u505a\u7684\u4e8b\u60c5\u5c31\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002\n\u6211\u5c3d\u91cf\u4e0d\u5e26\u7740\u4efb\u4f55\u672a\u5b8c\u6210\u7684\u6539\u53d8\u79bb\u5f00\u8fd9\u68f5\u6811--\u6bd4\u5982\uff0c\u5982\u679c\u6211\u79bb\u5f00\u4e00\u5929\uff0c\u751a\u81f3\u53ea\u662f\u53bb\u5403\u4e1c\u897f\u6216\u5ef6\u957f\u4f11\u606f\u65f6\u95f4\u3002\u8fd9\u4f7f\u5b58\u50a8\u5e93\u5904\u4e8e\u8fd9\u6837\u4e00\u79cd\u72b6\u6001\uff0c\u5373\u5f53\u6211\u8fd4\u56de\u65f6\uff0c\u6211\u53ef\u4ee5\u8f7b\u677e\u5730\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u5206\u652f--\u5982\u679c\u6211\u89c9\u5f97\u9700\u8981\u8fd9\u6837\u505a\u7684\u8bdd\u3002\u6b64\u5916\uff0c\u6700\u597d\u5728\u4f11\u606f\u524d\u627f\u8bfa\u5e76\u89e3\u91ca\u66f4\u6539\uff0c\u800c\u4e0d\u662f\u56de\u6765\u65f6\u4e0d\u5f97\u4e0d\u518d\u6b21\u56de\u5fc6\u7ec6\u8282\u3002\n\u56e0\u6b64\uff0c\u201cgit stash\u201d\u4e0d\u662f\u6211\u4f7f\u7528\u8fc7\u7684\u547d\u4ee4\u3002\u6211\u5b81\u613f\u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\u5e76\u63d0\u4ea4(\u4e34\u65f6\uff1f)\u3002\u5728\u90a3\u91cc\u5de5\u4f5c\uff0c\u4f5c\u4e3a\u4e00\u79cd\u6f5c\u5728\u7684\u65b0\u5de5\u4f5c\u65b9\u5f0f\u3002\n\u662f\u7684\uff0c\u6211\u662f\u8fd9\u4e2a\u9879\u76ee\u7684\u9996\u5e2d\u5f00\u53d1\u4eba\u5458\uff0c\u4f46\u6211\u4ecd\u7136\u50cf\u5176\u4ed6\u4eba\u4e00\u6837\u4fdd\u6301\u7740\u76f8\u540c\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002\u9664\u6700\u5fae\u5c0f\u7684\u66f4\u6539\u5916\uff0c\u6240\u6709\u66f4\u6539\u90fd\u662f\u901a\u8fc7GitHub\u4e0a\u7684\u62c9\u53d6\u8bf7\u6c42\u5b8c\u6210\u7684\u3002\n\u5f53\u6211\u5bf9\u6211\u5f53\u5730\u5206\u5e97\u7684\u529f\u80fd\u611f\u5230\u6ee1\u610f\u7684\u65f6\u5019\u3002\u5f53\u9519\u8bef\u4f3c\u4e4e\u88ab\u4fee\u590d\uff0c\u6216\u8005\u529f\u80fd\u4f3c\u4e4e\u5728\u505a\u5b83\u5e94\u8be5\u505a\u7684\u4e8b\u60c5\uff0c\u5e76\u4e14\u6d4b\u8bd5\u5957\u4ef6\u5728\u672c\u5730\u8fd0\u884c\u826f\u597d\u65f6\u3002\n\u7136\u540e\uff0c\u6211\u4f7f\u7528\u201cgit rebase-i\u201d\u6e05\u7406\u63d0\u4ea4\u5e8f\u5217(\u6216\u8005\uff0c\u5982\u679c\u662f\u5355\u6b21\u63d0\u4ea4\uff0c\u6211\u53ef\u4ee5\u53ea\u4f7f\u7528\u201cgit Commit--amendate\u201d)\u3002\n\u63d0\u4ea4\u7cfb\u5217\u5e94\u8be5\u662f\u4e00\u7ec4\u4e0e\u6b64\u66f4\u6539\u76f8\u5173\u7684\u903b\u8f91\u66f4\u6539\uff0c\u5e76\u4e14\u4e0d\u4f1a\u8d85\u8fc7\u5fc5\u8981\u7684\u66f4\u6539\uff0c\u4f46\u5982\u679c\u5b83\u4eec\u662f\u5206\u5f00\u7684\uff0c\u5219\u5e94\u4fdd\u6301\u72ec\u7acb\u3002\u6bcf\u4e2a\u63d0\u4ea4\u8fd8\u83b7\u5f97\u5176\u81ea\u5df1\u7684\u6b63\u786e\u63d0\u4ea4\u6d88\u606f\u3002\u4e0d\u76f8\u5173\u7684\u66f4\u6539\u5e94\u5206\u4e3a\u72ec\u7acb\u7684\u5206\u652f\u548c\u540e\u7eed\u7684\u5355\u72ec\u62c9\u5165\u8bf7\u6c42\u3002\n\u7136\u540e\uff0c\u5728GitHub\u4e0a\uff0c\u6211\u5c06\u65b0\u63a8\u9001\u7684\u5206\u652f\u8f6c\u6362\u4e3aPull\u8bf7\u6c42(\u4e5f\u79f0\u4e3a\u201cPR\u201d)\u3002\u7136\u540e\uff0c\u5b83\u5c06\u51fa\u73b0\u5728\u7ad9\u70b9\u4e0a\u5bf9curl\u6e90\u5e93\u7684\u8bf7\u6c42\u5217\u8868\u4e2d\uff0c\u5b83\u5c06\u5728#curl IRC\u9891\u9053\u4e2d\u516c\u5e03\uff0c\u6240\u6709\u5728GitHub\u4e0a\u5173\u6ce8\u8be5\u5e93\u7684\u4eba\u90fd\u4f1a\u6536\u5230\u76f8\u5e94\u7684\u901a\u77e5\u3002\n\u4e5f\u8bb8\u6700\u91cd\u8981\u7684\u662f\uff0c\u62c9\u8bf7\u6c42\u4f1a\u5f15\u53d1\u5927\u91cf\u7684CI\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u5de5\u4f5c\u5c06\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u7ec4\u5408\u548c\u51e0\u4e2a\u5e73\u53f0\u4e0a\u6784\u5efa\u548c\u6d4b\u8bd5\u4ee3\u7801\uff0c\u8fd9\u4e9b\u6d4b\u8bd5\u7684\u7ed3\u679c\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u5c0f\u65f6\u5185\u9646\u7eed\u516c\u5e03\u3002\u5f53\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6709\u5927\u7ea690\u4e2a\u4e0d\u540c\u7684CI\u4efb\u52a1-\u6bcf\u4e2a\u62c9\u53d6\u8bf7\u6c42-\u5927\u7ea68\u4e2a\u4e0d\u540c\u7684\u4ee3\u7801\u5206\u6790\u5668\u5c06\u4ed4\u7ec6\u68c0\u67e5\u8fd9\u4e2a\u53d8\u5316\uff0c\u770b\u770b\u5176\u4e2d\u662f\u5426\u6709\u4efb\u4f55\u660e\u663e\u7684\u7f3a\u9677\u3002\n\u5927\u591a\u6570\u4f7f\u7528cURL\u7684\u8d21\u732e\u8005\u4e0d\u4f1a\u50cf\u6211\u8fd9\u6837\u5728curl\u5e93\u4e2d\u521b\u5efa\u5206\u652f\uff0c\u800c\u662f\u66f4\u613f\u610f\u5728\u4ed6\u4eec\u81ea\u5df1\u7684\u6d3e\u751f\u7248\u672c\u4e2d\u521b\u5efa\u5206\u652f\u3002\u5dee\u522b\u4e0d\u662f\u5f88\u5927\uff0c\u6211\u5f53\u7136\u4e5f\u53ef\u4ee5\u90a3\u6837\u505a\u3002\n\u7531\u4e8e\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u624d\u80fd\u4ece\u516c\u5173\u5904\u83b7\u5f97\u5b8c\u6574\u7684CI\u7ed3\u679c(\u901a\u5e38\u9700\u8981\u51e0\u4e2a\u5c0f\u65f6)\uff0c\u6240\u4ee5\u6211\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u5206\u652f\u673a\u6784\u5904\u7406\u6211\u7684\u8bae\u7a0b\u4e0a\u7684\u5de5\u4f5c\u3002\u5728\u6b63\u5e38\u7684\u5de5\u4f5c\u65e5\uff0c\u6211\u53ef\u4ee5\u8f7b\u677e\u5730\u79fb\u52a8\u523010\u4e2a\u4e0d\u540c\u7684\u5206\u652f\u673a\u6784\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u6da6\u8272\uff0c\u5e76\u5728\u5b83\u4eec\u5404\u81ea\u7684\u62c9\u53d6\u8bf7\u6c42\u4e2d\u63d0\u4ea4\u66f4\u65b0\u3002\n\u6211\u53ef\u4ee5\u518d\u6b21\u56de\u5230Git Check Master\u5206\u652f\u673a\u6784\uff0c\u5728\u90a3\u91cc\u6211\u53ef\u4ee5\u201cGit Pull\u201d\u4ece\u4e0a\u6e38\u83b7\u53d6\u6240\u6709\u4e1c\u897f-\u5c31\u50cf\u6211\u7684\u5f00\u53d1\u4f19\u4f34\u5728\u540c\u4e00\u65f6\u95f4\u63a8\u4e1c\u897f\u7684\u65f6\u5019\u4e00\u6837\u3002\n\u5982\u679c\u5ba1\u67e5\u5458\u6216CI\u5de5\u4f5c\u4eba\u5458\u5728\u6211\u7684\u516c\u5173\u4e2d\u53d1\u73b0\u4e86\u9519\u8bef\uff0cGitHub\u4e0a\u5c31\u4f1a\u663e\u793a\u51fa\u6765\uff0c\u6211\u5c31\u4f1a\u5f00\u59cb\u5904\u7406\u3002\u8981\u4e48\u4fee\u590d\u9519\u8bef\uff0c\u8981\u4e48\u4e0e\u8bc4\u5ba1\u8005\u8ba8\u8bba\u4ec0\u4e48\u662f\u66f4\u597d\u7684\u65b9\u6cd5\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u4e0d\u7a33\u5b9a\u7684CI\u4f5c\u4e1a\u662f\u751f\u6d3b\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5728CI\u4f5c\u4e1a\u5217\u8868\u4e2d\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u4e24\u4e2a\u7ea2\u8272\u6807\u8bb0\uff0c\u53ef\u4ee5\u5ffd\u7565\uff0c\u56e0\u4e3a\u5176\u4e2d\u7684\u6d4b\u8bd5\u5931\u8d25\u662f\u7531\u4e8e\u8bbe\u7f6e\u4e2d\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u662fPR\u2026\u4e2d\u7684\u5b9e\u9645\u9519\u8bef\u3002\n\u4e3a\u4e86\u518d\u6b21\u56de\u5230\u6211\u7684\u5206\u652f\u673a\u6784\u8fdb\u884c\u516c\u5173\uff0c\u6211\u201cgit check out bagder/my-new-thing-or-bugfix\u201d\uff0c\u5e76\u4fee\u590d\u4e86\u8fd9\u4e9b\u95ee\u9898\u3002\n\u6211\u901a\u5e38\u4ece\u540e\u7eed\u63d0\u4ea4\u5f00\u59cb\uff0c\u4fee\u590d\u76f4\u63a5\u7684\u9519\u8bef\uff0c\u5e76\u5c06\u5b83\u4eec\u63a8\u5230\u5206\u652f\u4e0a\uff1a\n\u5982\u679c\u4fee\u590d\u63d0\u4ea4\u7684\u6570\u91cf\u53d8\u5927\uff0c\u6216\u8005\u5982\u679c\u540e\u7eed\u7684\u4fee\u590d\u4e0d\u662f\u5f88\u5c11\uff0c\u6211\u901a\u5e38\u4f1a\u8fdb\u884c\u6324\u538b\u4ee5\u5c06\u63d0\u4ea4\u7684\u6570\u91cf\u51cf\u5c11\u5230\u4e00\u4e2a\u66f4\u5c0f\u3001\u66f4\u7b80\u5355\u7684\u96c6\u5408\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u5f3a\u5236\u63a8\u5230\u5206\u652f\u3002\n\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u4f7f\u8865\u4e01\u7cfb\u5217\u6613\u4e8e\u67e5\u770b\u3001\u9605\u8bfb\u548c\u7406\u89e3\u3002\u5982\u679c\u63d0\u4ea4\u5e8f\u5217\u4e2d\u7684\u63d0\u4ea4\u592a\u591a\uff0c\u4ece\u800c\u66f4\u6539\u4e86\u4ee5\u524d\u7684\u63d0\u4ea4\uff0c\u5219\u5f88\u96be\u5bf9\u5176\u8fdb\u884c\u5ba1\u67e5\u3002\n\u5f53Pull\u8bf7\u6c42\u7684\u5408\u5e76\u65f6\u673a\u6210\u719f\u65f6(\u4e0e\u4f5c\u8005\u65e0\u5173)\uff0c\u6211\u518d\u6b21\u5207\u6362\u5230\u4e3b\u5206\u652f\uff0c\u5e76\u5c06Pull\u8bf7\u6c42\u7684\u63d0\u4ea4\u5408\u5e76\u5230\u5176\u4e2d\u3002\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u6211\u4f1a\u4ece\u5206\u652f\u4e2d\u6311\u9009\u7279\u5b9a\u7684\u63d0\u4ea4\u3002\u5f53\u6240\u6709\u5e94\u8be5\u653e\u5728\u90a3\u91cc\u7684\u4e1c\u897f\u90fd\u88ab\u6b63\u786e\u5730\u62c9\u5165\u4e3b\u673a\u65f6\uff0c\u6211\u5c31\u628a\u96f6\u94b1\u63a8\u5230\u9065\u63a7\u5668\u4e0a\u3002\n\u901a\u5e38\uff0c\u7279\u522b\u662f\u5982\u679c\u62c9\u8bf7\u6c42\u4e0d\u662f\u7531\u6211\u5b8c\u6210\u7684\uff0c\u6211\u8fd8\u4f1a\u5728\u63a8\u9001\u6240\u6709\u5185\u5bb9\u4e4b\u524d\u68c0\u67e5\u63d0\u4ea4\u6d88\u606f\u5e76\u5bf9\u5176\u8fdb\u884c\u4e00\u4e9b\u6da6\u8272\u3002\u63d0\u4ea4\u6d88\u606f\u5e94\u8be5\u9075\u5faa\u6211\u4eec\u7684\u98ce\u683c\uff0c\u4e0d\u4ec5\u63d0\u5230\u5b83\u5173\u95ed\u4e86\u54ea\u4e2aPR\uff0c\u800c\u4e14\u8fd8\u63d0\u5230\u5b83\u4fee\u590d\u4e86\u54ea\u4e2a\u95ee\u9898\uff0c\u5e76\u9002\u5f53\u5730\u7ed9\u4e88\u9519\u8bef\u62a5\u544a\u8005\u548c\u6240\u6709\u5e2e\u52a9\u8005\u4fe1\u4efb-\u4f7f\u7528\u6b63\u786e\u7684\u8bed\u6cd5\uff0c\u4ee5\u4fbf\u6211\u4eec\u7684\u81ea\u52a8\u5de5\u5177\u53ef\u4ee5\u6b63\u786e\u5730\u63d0\u53d6\u5b83\u4eec\uff01\nGitHub\u4e0a\u6709\u4e00\u4e2a\u6309\u94ae\uff0c\u4e0a\u9762\u5199\u7740\u201cRebase and Merge\u201d\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u7528\u6765\u5408\u5e76Pull\u8bf7\u6c42\u3002\u6211\u4ece\u4e0d\u4f7f\u7528\u5b83(\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u6211\u4f1a\u7981\u7528/\u9690\u85cf\u5b83)\u3002\u539f\u56e0\u5f88\u7b80\u5355\uff1a\n\u6211\u89c9\u5f97\u6211\u65e0\u6cd5\u6b63\u786e\u63a7\u5236\u63d0\u4ea4\u6d88\u606f\u3002\n\u6211\u4e0d\u80fd\u9009\u62e9\u538b\u7f29\u63d0\u4ea4\u7684\u5b50\u96c6\uff0c\u53ea\u80fd\u5168\u90e8\u538b\u7f29\u6216\u4e0d\u538b\u7f29\u3002\n\u6211\u7ecf\u5e38\u60f3\u5728\u63a8\u9001\u4e4b\u524d\u6e05\u7406\u4f5c\u8005\u90e8\u5206\uff0c\u8fd9\u662f\u7528\u6237\u754c\u9762\u4e0d\u5141\u8bb8\u7684\u3002\n\u4e0d\u4f7f\u7528\u5408\u5e76\u6309\u94ae\u7684\u7f3a\u70b9\u662f\uff0cPR\u4e2d\u7684\u6d88\u606f\u663e\u793a\u4e3a\u201cClosed by[Hash]\u201d\uff0c\u800c\u4e0d\u662f\u201cMerge in\u2026\u201d\u8fd9\u4f1a\u8ba9\u76f8\u5f53\u591a\u7684\u7528\u6237\u611f\u5230\u56f0\u60d1\uff0c\u4ed6\u4eec\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u610f\u5473\u7740\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u56de\u4e8b\uff01\u6211\u8ba4\u4e3a\u8fd9\u662f(\u957f\u671f)GitHub UX\u7684\u4e00\u4e2a\u7f3a\u9677\u3002\n\u5982\u679c\u5206\u652f\u6ca1\u6709\u66f4\u591a\u9700\u8981\u4fdd\u7559\u7684\u5185\u5bb9\uff0c\u6211\u4f1a\u4f7f\u7528\u201cgit Branch-d[name]\u201d\u518d\u6b21\u5220\u9664\u672c\u5730\u5206\u652f\uff0c\u5e76\u8fdc\u7a0b\u5220\u9664\u5b83\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u5b8c\u5168\u5408\u5e76\uff0c\u6ca1\u6709\u7406\u7531\u4fdd\u7559\u5de5\u4f5c\u7248\u672c\u3002\n\u5728\u4efb\u4f55\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\uff0c\u6211\u90fd\u6709\u5927\u7ea620-30\u4e2a\u4e0d\u540c\u7684\u672c\u5730\u5206\u652f\u673a\u6784\u5728\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u6240\u4ee5\u6211\u957f\u671f\u4ece\u4e8b\u7684\u5de5\u4f5c\u90fd\u5728\u5b83\u4eec\u81ea\u5df1\u7684\u5206\u652f\u673a\u6784\u4e2d\u8fdb\u884c\uff0c\u4e5f\u6709\u6765\u81ea\u4e0d\u540c\u4eba\u7684\u63d0\u4ea4\uff0c\u8fd9\u4e9b\u63d0\u4ea4\u8fd8\u6ca1\u6709\u5408\u5e76\u5230Master\u4e2d\uff0c\u4f46\u5b58\u5728\u4e8e\u4e0d\u540c\u6210\u719f\u5ea6\u7ea7\u522b\u7684\u5206\u652f\u673a\u6784\u4e2d\u3002\u5728\u8fd9\u4e9b\u672c\u5730\u5206\u652f\u4e2d\uff0c\u6211\u6b63\u5728\u5904\u7406\u7684\u5e76\u53d1\u62c9\u8bf7\u6c42\u7684\u6570\u91cf\u53ef\u80fd\u5728\u51e0\u5230\u5341\u5230\u5341\u4e8c\u4e2a\u4e4b\u95f4\u3002\n\u6ca1\u6709\u4e25\u683c\u7684\u5173\u7cfb\uff0c\u4f46\u4e3a\u4e86\u8ba9\u611f\u5174\u8da3\u7684\u4eba\u4e86\u89e3\u6811\u4e2d\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u5076\u5c14\u540c\u6b65\u53d1\u5e03\u8bf4\u660e\u6587\u4ef6\u3002\u53ef\u80fd\u6bcf\u96945-7\u5929\u5de6\u53f3\u3002\u56e0\u6b64\uff0c\u5b83\u53d8\u6210\u4e86\u4e00\u4e2a\u6587\u4ef6\uff0c\u89e3\u91ca\u4e86\u81ea\u4e0a\u4e00\u7248\u672c\u4ee5\u6765\u6211\u4eec\u6240\u505a\u7684\u5de5\u4f5c\uff0c\u5e76\u4f7f\u5176\u5728\u53d1\u5e03\u65e5\u5230\u6765\u65f6\u5f97\u5230\u4e86\u826f\u597d\u7684\u7ef4\u62a4\u548c\u51c6\u5907\u3002\n\u8fd9\u4f7f\u5f97\u811a\u672c\u5411\u5176\u6dfb\u52a0\u5efa\u8bae\u7684\u66f4\u65b0\uff0c\u56e0\u6b64\u6211\u968f\u540e\u5c06\u8be5\u6587\u4ef6\u52a0\u8f7d\u5230\u6211\u7684\u7f16\u8f91\u5668\u4e2d\uff0c\u5220\u9664\u5206\u9694\u6807\u8bb0\u548c\u5b9e\u9645\u4e0a\u4e0d\u5c5e\u4e8e\u90a3\u91cc\u7684\u6240\u6709\u6761\u76ee(\u56e0\u4e3a\u811a\u672c\u5c06\u6240\u6709\u63d0\u4ea4\u4f5c\u4e3a\u6761\u76ee\u6dfb\u52a0\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u5224\u65ad\u91cd\u8981\u6027)\u3002\n\u5f53\u5b83\u770b\u8d77\u6765\u6ca1\u95ee\u9898\u65f6\uff0c\u6211\u8fd0\u884c\u4e00\u6b21\u6e05\u7406\u5faa\u73af\uff0c\u8ba9\u5b83\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u4ece\u6587\u4ef6\u2026\u4e2d\u5220\u9664\u672a\u4f7f\u7528\u7684\u5f15\u7528\u3002\n\u2026\u3002\u5e76\u5c06\u66f4\u65b0\u540e\u7684\u5217\u8868\u7c98\u8d34\u5230\u53d1\u884c\u8bf4\u660e\u4e2d\u3002\u6700\u540e\uff0c\u6211\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u83b7\u5f97\u6587\u4ef6\u9876\u90e8\u6570\u5b57\u7684\u5237\u65b0\u8ba1\u6570\u5668\u3002\n\u7136\u540e\uff0c\u6211\u63d0\u4ea4\u66f4\u65b0(\u9700\u8981\u6709\u63d0\u4ea4\u6d88\u606fRelease-NOTES\uff1aSYNCED\u201c)\u5e76\u5c06\u5176\u63a8\u9001\u5230master\u3002\u641e\u5b9a\u4e86\uff01", "note_en": "Every now and then I get questions on how to work with git in a smooth way when developing, bug-fixing or extending curl \u2013 or how I do it. After all, I  work on open source full time which means I have very frequent interactions with git (and GitHub). Simply put, I work with git all day long. Ordinary days, I issue git commands several hundred times.\n I have a very simple approach and way of working with git in curl. This is how it works.\n  I use git almost exclusively from the command line in a terminal. To help me see which branch I\u2019m working in, I have this little bash helper script.\n brname () { a=$( git rev-parse --abbrev-ref HEAD 2&gt;/dev/null) if [ -n &#34;$a&#34; ]; then echo &#34; [$a]&#34; else echo &#34;&#34; fi}PS1=&#34;\\u@\\h:\\w\\$(brname)$ &#34;\n That gives me a prompt that shows username, host name, the current working directory and the current checked out git branch.\n In addition: I use Debian\u2019s  bash command line completion for git which is also really handy. It allows me to use tab to complete things like git commands and branch names.\n  I of course also have my customized  ~/.gitconfig file to provide me with some convenient aliases and settings. My most commonly used git aliases are:\n  The \u2018latest\u2019 one is for listing all changes done to curl since the most recent RELEASE-NOTES \u201csync\u201d. The others should hopefully be rather self-explanatory.\n   The main curl development is done in the single  curl/curl git repository (primarily hosted on GitHub). We keep the master branch the bleeding edge development tree and we work hard to always keep that working and functional. We do our releases off the master branch when that day comes (every eight weeks) and we provide \u201c daily snapshots\u201d from that branch, put together \u2013 yeah \u2013 daily.\n When merging fixes and features into master, we avoid merge commits and use rebases and fast-forward as much as possible. This makes the branch very easy to browse, understand and work with \u2013 as it is 100% linear.\n  When I start something new, like work on a bug or trying out someone\u2019s patch or similar, I first create a local branch off master and work in that. That is, I don\u2019t work directly in the master branch. Branches are easy and quick to do and there\u2019s no reason to shy away from having loads of them!\n I typically name the branch prefixed with my GitHub user name, so that when I push them to the server it is noticeable who is the creator (and I can use the same branch name locally as I do remotely).\n  Once I\u2019ve reached somewhere, I commit to the branch. It can then end up one or more commits before I consider myself \u201cdone for now\u201d with what I was set out to do.\n I try not to leave the tree with any uncommitted changes \u2013 like if I take off for the day or even just leave for food or an extended break. This puts the repository in a state that allows me to easily switch over to another branch when I get back \u2013 should I feel the need to. Plus, it\u2019s better to commit and explain the change  before the break rather than having to recall the details again when coming back.\n  \u201cgit stash\u201d is therefore not a command I ever use. I rather create a new branch and commit the (temporary?) work in there as a potential new line of work.\n  Yes I am the lead developer of the project but I still maintain the same work flow as everyone else. All changes, except the most minuscule ones, are done as pull requests on GitHub.\n When I\u2019m happy with the functionality in my local branch. When the bug seems to be fixed or the feature seems to be doing what it\u2019s supposed to do and the test suite runs fine locally.\n I then clean up the commit series with \u201c git rebase -i\u201d (or if it is a single commit I can instead use just \u201c git commit --amend\u201c).\n The commit series should be a set of logical changes that are related to this change and not any more than necessary, but kept separate if they are separate. Each commit also gets its own proper commit message. Unrelated changes should be split out into its own separate branch and subsequent separate pull request.\n   On GitHub, I then make the newly pushed branch into a  pull request (aka \u201ca PR\u201d). It will then become visible in the list of pull requests on the site for the curl source repository, it will be announced in the #curl IRC channel and everyone who follows the repository on GitHub will be notified accordingly.\n Perhaps most importantly, a pull request kicks of a flood of CI jobs that will build and test the code in numerous different combinations and on several platforms, and the results of those tests will trickle in over the coming hours. When I write this, we have around 90 different CI jobs \u2013 per pull request \u2013 and something like 8 different code analyzers will scrutinize the change to see if there\u2019s any obvious flaws in there.\n   Most contributors who would work on curl would not do like me and make the branch in the curl repository itself, but would rather do them in their own forked version instead. The difference isn\u2019t that big and I  could of course also do it that way.\n  As it will take some time to get the full CI results from the PR to come in (generally a few hours), I switch over to the next branch with work on my agenda. On a normal work-day I can easily move over ten different branches, polish them and submit updates in their respective pull-requests.\n I can go back to the\u00a0master branch again with \u2018 git checkout master\u2018 and there I can \u201c git pull\u201d to get everything from upstream \u2013 like when my fellow developers have pushed stuff in the mean time.\n  If a reviewer or a CI job find a mistake in one of my PRs, that becomes visible on GitHub and I get to work to handle it. To either fix the bug or discuss with the reviewer what the better approach might be.\n Unfortunately, flaky CI jobs is a part of life so very often there ends up one or two red markers in the list of CI jobs that can be ignored as the test failures in them are there due to problems in the setup and not because of actual mistakes in the PR\u2026\n To get back to my branch for that PR again, I \u201c git checkout bagder/my-new-stuff-or-bugfix\u201c, and fix the issues.\n I normally start out by doing follow-up commits that repair the immediate mistake and push them on the branch:\n  If the number of fixup commits gets large, or if the follow-up fixes aren\u2019t small, I usually end up doing a squash to reduce the number of commits into a smaller, simpler set, and then force-push them to the branch.\n The reason for that is to make the patch series easy to review, read and understand. When a commit series has too many commits that changes the previous commits, it becomes hard to review.\n  When the pull request is ripe for merging (independently of who authored it), I switch over to the master branch again and I merge the pull request\u2019s commits into it. In special cases I cherry-pick specific commits from the branch instead. When all the stuff has been yanked into master properly that should be there, I push the changes to the remote.\n Usually, and especially if the pull request wasn\u2019t done by me, I also go over the commit messages and polish them somewhat before I push everything. Commit messages should follow our style and mention not only which PR that it closes but also which issue it fixes and properly give credit to the bug reporter and all the helpers \u2013 using the right syntax so that our automatic tools can pick them up correctly!\n   There\u2019s a button GitHub that says \u201crebase and merge\u201d that could theoretically be used for merging pull requests. I  never use that (and if I could, I\u2019d disable/hide it). The reasons are simply:\n I don\u2019t feel that I have the proper control of the commit message(s)\n I can\u2019t select to squash a subset of the commits, only all or nothing\n I often want to cleanup the author parts too before push, which the UI doesn\u2019t allow\n The downside with not using the merge button is that the message in the PR says \u201cclosed by [hash]\u201d instead of \u201cmerged in\u2026\u201d which causes confusion to a fair amount of users who don\u2019t realize it means that it actually means the same thing! I consider this is a (long-standing) GitHub UX flaw.\n  If the branch has nothing to be kept around more, I delete the local branch again with \u201c git branch -d [name]\u201d and I remove it remotely too since it was completely merged there\u2019s no reason to keep the work version left.\n At any given point in time, I have some 20-30 different local branches alive using this approach so things I work on over time all live in their own branches and also submissions from various people that haven\u2019t been merged into master yet exist in branches of various maturity levels. Out of those local branches, the number of concurrent pull requests I have in progress can be somewhere between just a few up to ten, twelve something.\n  Not strictly related, but in order to keep interested people informed about what\u2019s happening in the tree, we sync the  RELEASE-NOTES file every once in a while. Maybe every 5-7 days or so. It thus becomes a file that explains what we\u2019ve worked on since the previous release and it makes it well-maintained and ready by the time the release day comes.\n   Which makes the script add suggested updates to it, so I then load the file into my editor, remove the separation marker and all entries that don\u2019t actually belong there (as the script adds all commits as entries as it can\u2019t judge the importance).\n When it looks okay, I run a cleanup round to make it sort it and remove unused references from the file\u2026\n    \u2026 and paste that updated list into the RELEASE-NOTES. Finally, I get refreshed counters for the numbers at the top of the file by running\n  Then I commit the update (which needs to have the commit message  RELEASE-NOTES: synced\u201c) and push it to master. Done!", "posttime": "2020-11-10 16:42:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "git", "title": "\u6211\u5c31\u662f\u8fd9\u4e48\u8bf4\u7684", "title_en": "This is how I git", "transed": 1, "url": "https://daniel.haxx.se/blog/2020/11/09/this-is-how-i-git/", "via": "", "real_tags": ["git"]}, {"category": "", "categoryclass": "", "imagename": "da1eb5d742f92028341a48f2120db281.gif", "infoid": 1034219, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u00b7\u793e\u4ea4\u662f\u75db\u82e6\u7684\uff0c\u6211\u5bf9\u4efb\u4f55\u58f0\u79f0\u4eab\u53d7\u793e\u4ea4\u7684\u4eba\u90fd\u6301\u6000\u7591\u6001\u5ea6\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5bf9\u6211\u6765\u8bf4\uff0c\u4eba\u8109\u662f\u6709\u6548\u7684\uff1a\u5927\u591a\u6570\u597d\u673a\u4f1a\u6765\u81ea\u4e2a\u4eba\u5173\u7cfb\u201c--\u4f2f\u6069\u00b7\u970d\u5df4\u7279(Byrne Hobart)\u3002\n\u793e\u4ea4\u7f51\u7edc\u5f88\u7ba1\u7528\uff0c\u4f46\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u5584\u4e8e\u4e0e\u964c\u751f\u4eba\u642d\u8baa\u548c\u4fdd\u6301\u5bf9\u8bdd\u7684\u4eba\u6765\u8bf4\uff0c\u5b83\u5c31\u4e0d\u592a\u7ba1\u7528\u4e86\u3002\n\u201c\u6709\u4e00\u4e2a\u89e3\u51b3\u529e\u6cd5\uff1a\u51fa\u540d\u3002\u4f60\u5931\u53bb\u4e86\u8fc7\u6ee4\u6389\u4f60\u60f3\u548c\u8c01\u4ea4\u8c08\u7684\u80fd\u529b\uff0c\u4f46\u81f3\u5c11\u6bcf\u4e2a\u4eba\u90fd\u662f\u5728\u4e00\u4e9b\u80cc\u666f\u4e0b\u5f00\u59cb\u5bf9\u8bdd\uff1b\u4f60\u628a\u5916\u5411\u7684\u6027\u683c\u5916\u5305\u7ed9\u4e86\u4ed6\u4eec\u3002\u201c--\u4f2f\u6069\u00b7\u970d\u5df4\u7279\u540d\u6c14\u4e0d\u53ea\u662f\u4ece\u6811\u4e0a\u957f\u51fa\u6765\u7684\u3002\u4f2f\u6069\u8bf4\uff0c\u4e0d\u8fc7\uff0c\u8fd8\u6709\u53e6\u4e00\u79cd\u9009\u62e9\uff0c\u90a3\u5c31\u662f\u5c0f\u6709\u540d\u6c14\u3002\u201c\u5fae\u540d\u662f\u6700\u597d\u7684\u540d\u58f0\uff0c\u56e0\u4e3a\u5b83\u7ed3\u5408\u4e86\u66f4\u7b80\u5355\u7684\u4efb\u52a1(\u4e3a\u66f4\u5c11\u7684\u4eba\u51fa\u540d)\u548c\u66f4\u597d\u7684\u7ed3\u679c(\u4e3a\u5408\u9002\u7684\u4eba\u51fa\u540d)\u3002\u201d\n\u201c\u5982\u679c\u4f60\u60f3\u8861\u91cf\u83b7\u5f97\u5fae\u540d\u6709\u591a\u96be\uff0c\u90a3\u5c31\u628a\u91cd\u70b9\u653e\u5728\u5fae\u540d\u4e0a\uff0c\u800c\u4e0d\u662f\u540d\u6c14\u4e0a\u3002\u201d\u5fae\u540d\u53ea\u662f\u610f\u5473\u7740\u4f60\u7684\u670b\u53cb\u7684\u670b\u53cb\u6709\u975e\u96f6\u7684\u673a\u4f1a\u77e5\u9053\u4f60\u662f\u8c01\uff0c\u5e76\u4e0e\u4f60\u8c08\u8bba\u4e00\u4e9b\u53cc\u65b9\u90fd\u611f\u5174\u8da3\u7684\u4e8b\u60c5\u3002\u201c-\u4f2f\u6069\u00b7\u970d\u5df4\u7279(Byrne Hobart)\u3002\n\u4f2f\u6069\u8ba4\u4e3a\uff0c\u8981\u60f3\u8ba9\u6027\u683c\u5185\u5411\u7684\u4eba\u83b7\u5f97\u5fae\u540d\uff0c\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u5199\u4f5c\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u201c\u5199\u4f5c\u5373\u793e\u4ea4\u7684\u7b56\u7565\u662f\u5199\u4e0b\u4f60\u7684\u5176\u4ed6\u5174\u8da3\uff0c\u8ba9\u522b\u4eba\u611f\u5174\u8da3\u3002\u201d\u4f60\u4e0d\u53ea\u662f\u8bc6\u522b\u4f60\u7684\u667a\u529b\u805a\u5c45\u533a\u7684\u90bb\u5c45\uff1b\u4f60\u8fd8\u5728\u62db\u52df\u66f4\u591a\u7684\u4eba\u3002\u5982\u679c\u4f60\u6709\u66f4\u591a\u7684\u670b\u53cb\u8fd9\u4e48\u505a\uff0c\u4f60\u5c31\u4f1a\u63a5\u89e6\u5230\u66f4\u591a\u7684\u60f3\u6cd5\u3002\n\u4ed6\u8bf4\uff1a\u201c\u8fd9\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u9002\u5408\u7684\u3002\u6709\u4e9b\u4eba\u771f\u7684\u5f88\u559c\u6b22\u8d70\u8fdb\u4e00\u4e2a\u6ee1\u662f\u964c\u751f\u4eba\u7684\u623f\u95f4\uff0c\u624b\u91cc\u62ff\u7740\u4e00\u53e0\u539a\u539a\u7684\u540d\u7247\uff0c\u5efa\u7acb\u4e86\u4e00\u5806\u6709\u4ef7\u503c\u7684\u5173\u7cfb\u3002\u4f46\u5bf9\u4e8e\u6211\u4eec\u8fd9\u4e9b\u5bf9\u524d\u666f\u7565\u5e26\u6050\u60e7\u7684\u4eba\u6765\u8bf4\uff0c\u5199\u4f5c\u662f\u53e6\u4e00\u79cd\u9009\u62e9\u3002\u5982\u679c\u4f60\u52aa\u529b\u4e86\uff0c\u4f60\u53ef\u4ee5\u7528\u793e\u4ea4\u4e2d\u6700\u7cdf\u7cd5\u7684\u90e8\u5206\u6765\u4ee3\u66ff\u72ec\u5904\u7535\u8111\u7684\u65f6\u95f4\u3002\u201c--\u4f2f\u6069\u00b7\u970d\u5df4\u7279(Byrne Hobart)\u3002\n\u6211\u5f53\u7136\u8ba4\u4e3a\u81ea\u5df1\u662f\u4e00\u4e2a\u5185\u5411\u7684\u4eba\uff0c\u6211\u8fc7\u53bb\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u5f31\u70b9(\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u662f\u5982\u6b64)\uff0c\u4f46\u5b83\u4e5f\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4e00\u79cd\u8d85\u7ea7\u5927\u56fd\u3002\u4f60\u6709\u80fd\u529b\u66f4\u4e13\u5fc3\u5730\u503e\u542c\uff0c\u4e86\u89e3\u522b\u4eba\u53ef\u80fd\u4e0d\u4f1a\u505a\u7684\u4e8b\u60c5\uff0c\u5e76\u5c06\u4f60\u7684\u540c\u7406\u5fc3\u6c38\u8fdc\u6b66\u5668\u5316\u3002\u5bf9\u4e8e\u5176\u4ed6\u5bf9\u4f60\u611f\u5174\u8da3\u7684\u4e1c\u897f\u611f\u5174\u8da3\u7684\u4eba\u6765\u8bf4\uff0c\u5199\u4f5c\u53ef\u4ee5\u8d77\u5230\u8759\u8760\u4fe1\u53f7\u7684\u4f5c\u7528\u3002\n\u5206\u4eab(\u5982\u679c\u4f60\u662fOG\u7684\u8bdd)", "note_en": "\u2022\u00a0      \u00a0\u2022\u00a0       \u201cNetworking is painful, and I\u2019m suspicious of anyone who claims to enjoy it. Unfortunately for me, networking is effective: most good opportunities come from personal connections\u201d \u2014 Byrne Hobart\n Networking works, but it doesn\u2019t work very well for people who are bad at striking up and maintaining conversations with strangers.\n \u201cThere is a solution: be famous. You lose the ability to filter out who you want to talk to, but at least everyone starts the conversation with some context; you\u2019re outsourcing the extroversion to them.\u201d \u2014 Byrne Hobart Fame doesn\u2019t just grow on trees. Byrne says there\u2019s a second alternative called being   microfamous , though. \u201cMicrofame is the best kind of fame because it combines an easier task (be famous to fewer people) with a better outcome (be famous to the right people).\u201d\n \u201cIf you\u2019re trying to calibrate how hard it is to achieve micro-fame, focus on the micro, not the fame. Micro-fame just means your friends-of-friends have a nonzero chance of knowing who you are, and striking up a conversation with you about something mutually interesting.\u201d \u2014 Byrne Hobart\n To achieve microfame for introverts, Byrne believes one way is to write. Specifically, \u201cwriting-as-networking strategy is that writing about your other interests gets other people interested. You\u2019re not just identifying neighbors in your intellectual ghetto; you\u2019re recruiting more. If more of your friends do it, you get exposed to more ideas.\u201d\n \u201cThis is not for everyone. There are some people who really love the idea of walking into a room full of strangers with a fat stack of business cards and making a bunch of valuable connections. But for those of us who faintly dread the prospect, writing is an alternative. If you put in the effort, you can substitute the worst parts of socializing for time spent alone with your computer.\u201d \u2014 Byrne Hobart\n    I certainly identify as an introvert and I used to think it was a weakness (and it somewhat is to a certain extent), but it\u2019s also somewhat of a superpower too. You have the ability to listen more intently, pick up on things others probably wouldn\u2019t, and weaponize your empathy for good. Writing can act as a bat signal for others interested in what you\u2019re interested in.\n     Share (if you&#39;re an OG)", "posttime": "2020-11-10 16:21:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u5411,networking,\u793e\u4ea4", "title": "\u9762\u5411\u5185\u5411\u8005\u7684\u793e\u4ea4\u7f51\u7edc", "title_en": "Networking for Introverts", "transed": 1, "url": "https://gradually.co/how-to-network-as-an-introvert/", "via": "", "real_tags": ["\u5185\u5411", "\u793e\u4ea4"]}, {"category": "", "categoryclass": "", "imagename": "17e0886fbf12eab8cdacfbe9816a0e86.jpg", "infoid": 1034218, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u82f9\u679c\u5df2\u7ecf\u5728\u5176\u5f00\u53d1\u8005\u5927\u4f1a\u4e0a\u5ba3\u5e03\uff0c\u4eca\u5e74\u5c06\u63a8\u51fa\u4e00\u6b3e\u642d\u8f7dARM\u5904\u7406\u5668\u7684\u65b0Mac\u3002\u56e0\u6b64\uff0c\u4eca\u5929\u7684\u6d3b\u52a8\u4f3c\u4e4e\u662f\u63a8\u51fa\u642d\u8f7d\u82f9\u679c\u81ea\u5df1\u5904\u7406\u5668\u7684\u65b0\u7535\u8111\u7684\u7edd\u4f73\u673a\u4f1a\u3002\n\u540c\u6837\uff0c\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u77e5\u9053MacOS Big Sur\u4ec0\u4e48\u65f6\u5019\u53d1\u5e03\u3002\u65b0\u7684\u91cd\u5927\u66f4\u65b0\u53ef\u80fd\u4f1a\u4e0e\u65b0\u7684\u82f9\u679c\u7535\u8111\u4e00\u8d77\u53d1\u5e03\u3002\u82f9\u679c\u8fd8\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u673a\u4f1a\u53d1\u5e03\u5176\u4ed6\u89c4\u6a21\u8f83\u5c0f\u7684\u4ea7\u54c1\u3002\u8ba9\u6211\u4eec\u770b\u770b\u8be5\u516c\u53f8\u662f\u5426\u6709\u65b0\u7684\u914d\u4ef6\u53ef\u4ee5\u70ab\u8000\u3002\n\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u4e2a\u9875\u9762\u4e0a\u89c2\u770b\u76f4\u64ad\uff0c\u56e0\u4e3a\u82f9\u679c\u6b63\u5728YouTube\u4e0a\u76f4\u64ad\u4f1a\u8bae\u3002\n\u5982\u679c\u4f60\u6709\u4e00\u53f0\u82f9\u679c\u7535\u89c6\uff0c\u4f60\u4e0d\u9700\u8981\u4e0b\u8f7d\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u4f60\u53ef\u4ee5\u6253\u5f00Apple TV\u5e94\u7528\u7a0b\u5e8f\uff0c\u627e\u5230Apple Events\u90e8\u5206\u3002\u5b83\u53ef\u4ee5\u8ba9\u4f60\u5728\u6d41\u5a92\u4f53\u4e0a\u89c2\u770b\u4eca\u5929\u7684\u6d3b\u52a8\uff0c\u5e76\u91cd\u64ad\u8fc7\u53bb\u7684\u6d3b\u52a8\u3002\n\u5982\u679c\u4f60\u6ca1\u6709Apple TV\uff0c\u4e5f\u4e0d\u60f3\u4f7f\u7528YouTube\uff0c\u8be5\u516c\u53f8\u8fd8\u5141\u8bb8\u4f60\u4ece\u5176\u7f51\u7ad9\u4e0a\u7684Apple Events\u680f\u76ee\u76f4\u64ad\u6d3b\u52a8\u3002\u8fd9\u4e2a\u89c6\u9891\u6e90\u73b0\u5728\u53ef\u4ee5\u5728\u6240\u6709\u4e3b\u6d41\u6d4f\u89c8\u5668\u4e0a\u4f7f\u7528--Safari\u3001Firefox\u3001Microsoft Edge\u548cGoogle Chrome\u3002", "note_en": "Apple has already announced at its developer conference that there would be a  new Mac with an ARM-based processor this year. So today\u2019s event seems like the perfect opportunity to introduce a new computer with Apple\u2019s own processor.\n  Similarly, we\u2019ll likely find out when macOS Big Sur is going to be released. The new major update is likely to ship with the new Apple computer. Apple could also use this opportunity for other, smaller announcements. Let\u2019s see if the company has some new accessories to show off.\n You can watch the live stream directly on this page, as Apple is streaming its conference on YouTube.\n If you have an Apple TV, you don\u2019t need to download a new app. You can open the Apple TV app and find the Apple Events section. It lets you stream today\u2019s event and rewatch old ones.\n And if you don\u2019t have an Apple TV and don\u2019t want to use YouTube, the company also lets you live stream the event from the  Apple Events section on its website. This video feed now works in all major browsers \u2014 Safari, Firefox, Microsoft Edge and Google Chrome.", "posttime": "2020-11-10 16:05:17", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "apple,\u53d1\u5e03,\u82f9\u679c,mac", "title": "\n\u89c2\u770b\u82f9\u679c\u53d1\u5e03\u9996\u6b3e\u57fa\u4e8eARM\u7684Mac LIVE", "title_en": "\n\t\t\t\tWatch Apple unveil the first ARM-based Mac live right here\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/11/10/apple-mac-macbook-arm-keynote-live-stream-livestream/", "via": "", "real_tags": ["apple", "\u53d1\u5e03", "\u82f9\u679c", "mac"]}, {"category": "", "categoryclass": "", "imagename": "84e9ef6db136f3fbdf494272e186a3fb.png", "infoid": 1034217, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bf9\u4e8e\u91c7\u7528Scala3\u7684\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u6700\u663e\u8457\u7684\u53d8\u5316\u4e4b\u4e00\u662f\u5f15\u5165\u4e86\u65b0\u7684\u8bed\u6cd5\u6765\u53d6\u4ee3\u4ee5\u524dScala\u7248\u672c\u4e2d\u4f7f\u7528\u7684\u9690\u5f0f\u673a\u5236\u3002\n\u65b0\u8bed\u6cd5\u80cc\u540e\u7684\u52a8\u673a\u662f\uff0c\u76f8\u540c\u7684\u9690\u5f0f\u5173\u952e\u5b57\u7528\u4e8e\u4e0d\u540c\u7684\u76ee\u7684\u548c\u6a21\u5f0f\uff0c\u56e0\u6b64\u5b83\u6210\u4e3a\u8868\u8fbe\u5982\u4f55\u5b9e\u73b0\u6a21\u5f0f\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5f53\u7528\u6237\u9047\u5230\u8fd9\u4e2a\u6a21\u68f1\u4e24\u53ef\u7684\u5492\u8bed\u65f6\uff0c\u9700\u8981\u7834\u8bd1\u5f00\u53d1\u8005\u7684\u610f\u56fe\uff1a\u8fd9\u662f\u4e00\u79cd\u8f6c\u6362\u5417\uff1f\u8fd9\u662f\u5426\u907f\u514d\u4e86\u53c2\u6570\u91cd\u590d\uff1f\u8fd9\u662f\u7c7b\u578b\u7684\u6269\u5c55\u5417\uff1f\u8fd9\u662f\u6253\u5b57\u673a\u5417\uff1f\u6211\u600e\u4e48\u5bfc\u5165\u8fd9\u4e2a\uff1f\n\u770b\u5230\u9690\u542b\u542b\u4e49\u5728\u5e93\u548c\u9879\u76ee\u4e2d\u53d8\u5f97\u5982\u6b64\u666e\u904d\uff0cScala3\u7684\u76ee\u6807\u662f\u901a\u8fc7\u4f7f\u7528\u4f20\u8fbe\u5f00\u53d1\u4eba\u5458\u610f\u56fe\u7684\u65b0\u5173\u952e\u5b57\u6765\u51cf\u5c11\u56f0\u60d1\u548c\u8ba4\u77e5\u8d1f\u62c5\u3002\n\u672c\u6587\u901a\u8fc7\u5206\u6790\u6700\u5e38\u89c1\u7684\u7528\u4f8b\u548c\u6a21\u5f0f\uff1a\u6269\u5c55\u65b9\u6cd5\u3001\u9690\u5f0f\u53c2\u6570\u3001\u9690\u5f0f\u8f6c\u6362\u548c\u7c7b\u578b\u7c7b\uff0c\u7b80\u8981\u4ecb\u7ecd\u4e86Scala3\u7a0b\u5e8f\u5458\u53ef\u4ee5\u4f7f\u7528\u7684\u65b0\u8bed\u6cd5\u548c\u8bed\u4e49\u3002\n\u867d\u7136\u6211\u4eec\u8ba4\u4e3a\u65b0\u7684\u8bed\u6cd5\u4ee3\u8868\u4e86\u4e00\u79cd\u6539\u8fdb\uff0c\u4f46\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u4f7f\u7528\u9690\u5f0f\u7684\u65e7\u4ee3\u7801\u5728Scala 3.0\u7f16\u8bd1\u5668\u4e2d\u4ecd\u7136\u5b8c\u5168\u6709\u6548\uff0c\u5373\u4f7f\u5b83\u5c06\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u88ab\u5f03\u7528\u3002\u60a8\u4e0d\u9700\u8981\u7acb\u5373\u79fb\u690d\u4ee3\u7801\u5e93\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u6e10\u8fdb\u7684\u8fc7\u7a0b\u3002\n\u5f53\u60a8\u65e0\u6cd5\u63a7\u5236\u67d0\u4e2a\u7c7b\u578b\uff0c\u4f46\u9700\u8981\u4f7f\u7528\u65b0\u65b9\u6cd5\u6269\u5c55\u5176\u529f\u80fd\u65f6\uff0cScala3\u5141\u8bb8\u60a8\u5b9a\u4e49\u6269\u5c55\u65b9\u6cd5\u3002\n\u5047\u8bbe\u60a8\u6b63\u5728\u4f7f\u7528List[try[String]]\uff0c\u5e76\u4e14\u7ecf\u5e38\u9700\u8981\u68c0\u7d22\u8ba1\u7b97\u6210\u529f\u7684\u5143\u7d20\u3002\n//ListTryOps.scala\u5bfc\u5165scala.util\u3002{try\uff0cuccess}\u6269\u5c55\u540d(ls\uff1alist[try[string]])def Collect\u6210\u529f\uff1alist[string]=ls\u3002\u6536\u96c6{\u6848\u4f8b\u6210\u529f(X)=&gt\uff1bx}\n\u8981\u8bb0\u4f4f\u8bed\u6cd5\uff0c\u8bf7\u6ce8\u610f\u96c6\u5408\u6210\u529f\u662f\u5982\u4f55\u8ddf\u5728\u5b83\u5c06\u5728\u5176\u4e0a\u53ef\u7528\u7684\u5bf9\u8c61\u4e4b\u540e\u7684\uff1als.Collection tSucceede.Extension\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u6709\u7c7b\u578b\u53c2\u6570\uff1a\n\u6269\u5c55\u540d[A](ls\uff1aList[Try[A]])\uff1adef\u96c6\u5408\u6210\u529f\uff1aList[A]=ls\u3002\u6536\u96c6{Case Success(X)=&gt\uff1bx}def getIndexOfFirstFailure\uff1aOption[Int]=ls\u3002ZipWithIndex\u3002\u627e\u5230((t\uff0c_)=&gt\uff1bt.\u3002IsFailure)\u3002\u5730\u56fe(_.\u3002(2)\u3002\n//Main.scala\u5bfc\u5165scala.util.Try//\u5bfc\u5165ListTryOps\u3002_//\u4f7f\u7528\u901a\u914d\u7b26\u5bfc\u5165ListTryOps.ColltSucccessdef getLastTweet(\u7528\u6237\u540d\uff1a\u5b57\u7b26\u4e32)\uff1atry[String]=\uff1f@main def main=val niceTwets=list(getLastTweet(&#34\uff1bScala_lang&34\uff1b)\uff0cgetLastTweet(&#34\uff1bodersky\u3002\u96c6\u5408\u6210\u529f\u6253\u5370(NiceTwets)\u3002\n\u5728Scala3\u4e4b\u524d\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u7684\u5b9e\u73b0\u7279\u522b\u9ebb\u70e6\u3002\u5178\u578b\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a\n\u9690\u5f0f\u7c7bListTryExtension[A](\u79c1\u6709Val in\uff1aList[Try[A]])\u6269\u5c55AnyVal{def Collect Succcessed\uff1aList[A]=ls\u3002\u6536\u96c6{\u6848\u4f8b\u6210\u529f(A)=&gt\uff1ba}\u5b9a\u4e49getIndexOfFirstFailure\uff1aOPTION[Int]=in\u3002ZipWithIndex\u3002\u67e5\u627e{case(t\uff0c_)=&gt\uff1bt.\u3002IsFailure}\u3002MAP{case(_\uff0cindex)=&gt\uff1bindex}}\u3002\n\u8bf7\u6ce8\u610f\uff0c\u60a8\u9700\u8981\u4e3a\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u540d\u79f0\uff0c\u5373\u4f7f\u9664\u4e86IMPORT\u8bed\u53e5\u4e4b\u5916\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u3002\u60a8\u8fd8\u9700\u8981\u4e86\u89e3AnyVal\u662f\u4ec0\u4e48\uff0c\u4e3a\u4ec0\u4e48\u6269\u5c55\u5b83\u662f\u4e00\u79cd\u597d\u7684\u505a\u6cd5\uff0c\u4ee5\u53ca\u5b83\u7684\u9650\u5236\u662f\u4ec0\u4e48\u3002\n\u9605\u8bfb\u8fd9\u6bb5\u4ee3\u7801\u65f6\u9700\u8981\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u624d\u80fd\u7406\u89e3\u5b83\u7684\u552f\u4e00\u76ee\u6807\u662f\u6dfb\u52a0\u51e0\u4e2a\u65b9\u6cd5\u6765\u5217\u51fa[try[A]]\u3002\n\u60a8\u53ef\u4ee5\u5728\u4e13\u95e8\u7684\u6587\u6863\u9875\u9762\u4e0a\u627e\u5230\u66f4\u591a\u5173\u4e8e\u6269\u5c55\u65b9\u6cd5\u7684\u4fe1\u606f\u3002\u6211\u4eec\u8fd8\u5efa\u8bae\u60a8\u9605\u8bfb\u5b83\u4eec\u5982\u4f55\u8865\u5145Scala 3\u7684\u53e6\u4e00\u4e2a\u65b0\u7279\u6027\uff1a\u4e0d\u900f\u660e\u7c7b\u578b\u3002\u5728\u672c\u6587\u7684\u540e\u9762\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5b83\u4eec\u5982\u4f55\u7b80\u5316\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u6a21\u5f0f\uff1a\u7c7b\u578b\u7c7b\u3002\n\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7c7b\u4f3c\uff0cScala\u5141\u8bb8\u60a8\u7701\u7565\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u53ef\u4ee5\u6267\u884c\u7c7b\u578b\u63a8\u65ad\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u58f0\u660e\u4e86\u503c\uff0c\u7136\u540e\u7f16\u8bd1\u5668\u63a8\u65ad\u51fa\u76f8\u5e94\u7684\u7c7b\u578b\u3002Scala\u7684\u4e00\u4e2a\u72ec\u7279\u7279\u6027\u662f\uff0c\u5f53\u6307\u5b9a\u7c7b\u578b\u65f6\u80fd\u591f\u63a8\u65ad\u51fa\u503c\u3002\n\u8003\u8651\u4e00\u4e0b\u6807\u51c6\u5e93\u4e2d\u7684\u672a\u6765\u62bd\u8c61\u3002\u6bcf\u6b21\u901a\u8fc7\u63d0\u4f9b\u8ba1\u7b97\u6765\u521b\u5efaFuture\u65f6\uff0c\u90fd\u9700\u8981\u6307\u5b9a\u8ba1\u7b97\u5c06\u5728\u54ea\u4e2aExecutionContext\u4e0a\u6c42\u503c\uff1a\n\u5bfc\u5165scala.conflic._def\u9636\u4e58(n\uff1aint)\uff1aint=\uff1fDef Fibonacci(n\uff1aint)\uff1aint=\uff1f@main def main=val Executor\uff1aExecutionContext=ExecutionContext\u3002\u5168\u5c40Val fact100=Future(\u9636\u4e58(100))(\u6267\u884c\u8005)Val fibo100=Future(\u6590\u6ce2\u7eb3\u5947(100))(\u6267\u884c\u8005)//...\u3002\n\u5982\u60a8\u6240\u89c1\uff0cExecutor\u7684\u91cd\u590d\u5f88\u5feb\u5c31\u53d8\u6210\u4e86\u4e00\u9879\u4e4f\u5473\u7684\u4efb\u52a1\u3002\u6211\u4eec\u53ef\u4ee5\u58f0\u660e\u6b64\u53c2\u6570\u662f\u5f53\u524d\u4e0a\u4e0b\u6587\u901a\u7528\u7684\uff0c\u5e76\u907f\u514d\u5176\u91cd\u590d\uff1a\n@main def main=\u7ed9\u5b9a\u7684\u6267\u884c\u7a0b\u5e8f\u4e3aExecutionContext=ExecutionContext\u3002\u5168\u5c40Val fact100=\u672a\u6765(\u9636\u4e58(100))Val fibo100=\u672a\u6765(Fibonacci(100))\u3002\n//scala.concurrent.Future.scala\u5bf9\u8c61\u672a\u6765{//.\u3002Def Apply[T](Body\uff1a=&gt\uff1bT)(\u4f7f\u7528Executor\uff1aExecutionContext)\uff1aFuture[T]=//...}\u3002\n\u6211\u4eec\u5728\u8fd9\u91cc\u770b\u5230\u4e86\u8bed\u6cd5\u7684\u53e6\u4e00\u534a\uff1a\u5982\u679c\u6211\u4eec\u5c06\u4e00\u4e2a\u53c2\u6570\u58f0\u660e\u4e3aUSING\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c06\u5728\u8c03\u7528\u70b9\u7684\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u641c\u7d22\u5177\u6709\u517c\u5bb9\u7c7b\u578b\u7684\u7ed9\u5b9a\u503c\u3002\n\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u65b9\u9762\u662f\u6211\u4eec\u5982\u4f55\u5bfc\u5165\u8fd9\u4e9b\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6709\u591a\u4e2a\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684ExecutionContext\u7684\u66f4\u591a\u76f8\u5173\u5b9a\u4e49\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u91cd\u6784\u4e3a\u4e0d\u540c\u7684\u6587\u4ef6\uff1a\n\u60a8\u53ef\u4ee5\u5728\u6587\u6863\u4e2d\u4e86\u89e3\u6709\u5173\u4f7f\u7528/\u7ed9\u5b9a\u4ee5\u53ca\u89e3\u6790\u89c4\u5219\u7684\u66f4\u591a\u4fe1\u606f\u3002\n\u5728Scala2\u4e2d\uff0c\u8fd9\u79cd\u6a21\u5f0f\u662f\u901a\u8fc7\u7528IMPLICIT\u5173\u952e\u5b57\u6807\u8bb0\u503c\u548c\u53c2\u6570\u6765\u5b9e\u73b0\u7684\u3002\u4e0a\u4e00\u4e2a\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a\n//Main.scala\u5bfc\u5165scala.consist._Object Main\u6269\u5c55App\u9690\u5f0fVal EC\uff1aExecutionContext=ExecutionContext\u3002Global Future(println(&#34\uff1bHello World&34\uff1b))}//scala.concurrent.Future.scala\u5bf9\u8c61\u672a\u6765{//.\u3002Def Apply[T](Body\uff1a=&gt\uff1bT)(\u9690\u5f0fExecutor\uff1aExecutionContext)\uff1aFuture[T]=//...}\u3002\n\u6211\u4eec\u518d\u6b21\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a\u53ef\u80fd\u4e0d\u4f1a\u7528\u4e8e\u53d8\u91cf\u7684\u540d\u79f0\u3002Scala 2\u4e2d\u7684\u9690\u5f0f\u51fd\u6570\u5728Scala 3\u4e2d\u88ab\u91cd\u547d\u540d\u4e3acall\u3002\n\u6700\u540e\uff0c\u7279\u6b8a\u7684\u5bfc\u5165\u8bed\u6cd5\u5141\u8bb8\u7528\u6237\u6309\u7c7b\u578b\u800c\u4e0d\u662f\u6309\u540d\u79f0\u663e\u5f0f\u5bfc\u5165\u7ed9\u5b9a\u7684\u5b9e\u4f8b\u3002\u8fd9\u66f4\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4e5f\u7528\u7c7b\u578b\u6765\u6307\u4ee3\u5b83\u4eec\u3002\n\u9690\u5f0f\u8f6c\u6362\u529f\u80fd\u5f88\u5371\u9669\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u5728Scala3\u4e2d\uff0c\u6bcf\u6b21\u4f7f\u7528\u7f16\u8bd1\u5668\u65f6\u90fd\u4f1a\u53d1\u51fa\u8b66\u544a\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u529f\u80fd\u663e\u5f0f\u5bfc\u5165\u5f53\u524d\u8303\u56f4\u6765\u7981\u7528\u8b66\u544a\uff0c\u98ce\u9669\u81ea\u8d1f\u3002\nJava\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0eOptions\u975e\u5e38\u76f8\u4f3c\u7684\u53ef\u9009\u7c7b\u578b\u3002\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u7684Java\u5e93\u751f\u6210\u4e86\u5927\u91cf\u5177\u6709\u6b64\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4f46\u60a8\u4e5f\u6709\u5f88\u591a\u9009\u9879\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u5e0c\u671b\u5b9a\u4e49\u4e00\u4e2a\u81ea\u52a8\u8f6c\u6362\u3002\n//OptionalConversion.scala\u5bfc\u5165java.util.OptionalConversion\uff1a\u7ed9\u5b9a[A]\u4f5c\u4e3a\u8f6c\u6362[Optional[A]\uff0cOption[A]]\uff1adef Apply(in\uff1aOptional[A])\uff1aOption[A]=if in\u3002\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u6709\u4e00\u4e9b(\u5728\u2026\u2026\u4e2d)\u3002Get())\u5426\u5219\u65e0\u3002\n\u5e94\u901a\u8fc7\u6dfb\u52a0IMPORT\u5b50\u53e5\u6216\u901a\u8fc7\u8bbe\u7f6e\u7f16\u8bd1\u5668\u9009\u9879-LANGUAGE\uff1aIMPLICTICT CONVERSIONS\u6765\u542f\u7528\u5bf9\u8c61OptionalConversion\u4e2d\u7ed9\u5b9a\u7684_CONVERSION_OPTIONAL_OPTION\u9690\u5f0f\u8f6c\u6362\u7c7b\u3002\u6709\u5173\u4e3a\u4f55\u5e94\u663e\u5f0f\u542f\u7528\u8be5\u529f\u80fd\u7684\u8ba8\u8bba\uff0c\u8bf7\u53c2\u9605Scala\u6587\u6863\u4e2d\u7684\u503cscala.language.implitConversions\u3002\nIMPORT java.util.Optional Object OptionalConversion{IMPLICIT def optionalToOption[A](in\uff1a\u53ef\u9009[A])\uff1aOption[A]=if(in.\u3002\u5b58\u5728\u7684)\u4e00\u4e9b(\u5728.)\u3002Get())\u5426\u5219\u65e0}\u3002\n\u8bf7\u6ce8\u610f\uff0c\u4e4d\u4e00\u770b\uff0c\u5e76\u4e0d\u6e05\u695a\u8be5\u5b9a\u4e49\u662f\u5426\u65e8\u5728\u81ea\u52a8\u8f6c\u6362\u4e3a\u9884\u671f\u7c7b\u578b\uff1a\n\u8be5\u65b9\u6cd5\u7684\u540d\u79f0\u53ef\u80fd\u662f\u4e00\u4e2a\u63d0\u793a\uff0c\u4f46\u8fd9\u53ea\u662f\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u4e0d\u540c\u610f\u7684\u7ea6\u5b9a\u3002\n\u9690\u5f0fdef\u53ef\u80fd\u610f\u5728\u4e3a\u60a8\u63d0\u4f9b\u5176\u53c2\u6570\u7c7b\u578b\u7684\u6269\u5c55\u65b9\u6cd5\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5176\u7ed3\u679c\u3002\n\u6ca1\u6709\u76f4\u63a5\u7684\u65b9\u6cd5\u6765\u9a8c\u8bc1\u6b64\u51fd\u6570\u662f\u5426\u4e0d\u4f1a\u7528\u4f5c\u5177\u6709\u9690\u5f0f\u53c2\u6570\u5217\u8868\u7684\u51fd\u6570\u7684\u9690\u542b\u53c2\u6570\u3002\n\u8be5\u6a21\u5f0f\u662fCats\u7b49Scala\u51fd\u6570\u5f0f\u7f16\u7a0b\u5e93\u7684\u57fa\u7840\u3002\u5728Scala2\u4e2d\uff0c\u6211\u4eec\u8fc7\u53bb\u4e25\u91cd\u4f9d\u8d56\u9690\u5f0f\u8f6c\u6362\u6765\u6dfb\u52a0\u65b9\u6cd5\uff0c\u4f9d\u8d56\u9690\u5f0f\u53c2\u6570\u6765\u4f20\u64ad\u5b9e\u4f8b\uff0c\u8fd9\u5bf9\u4e8e\u53ef\u80fd\u5df2\u7ecf\u5728\u51fd\u6570\u7f16\u7a0b\u4e2d\u7ea0\u7ed3\u4e8e\u65b0\u6982\u5ff5\u7684\u521d\u5b66\u8005\u6765\u8bf4\u6709\u70b9\u795e\u79d8\u3002\n\u5728Scala3\u4e2d\uff0c\u7531\u4e8e\u6709\u4e86\u65b0\u7684\u8bed\u6cd5\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u3002\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\u578b\u7c7b\uff0c\u6bd4\u5982Show\uff0c\u5b83\u63cf\u8ff0\u4e86\u7c7b\u578b\u5177\u6709\u5b57\u7b26\u4e32\u8868\u793a\u7684\u80fd\u529b\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u914d\u5957\u5bf9\u8c61\u6765\u63d0\u4f9b\u4e24\u4e2a\u8f85\u52a9\u65b9\u6cd5\u548c\u5b9e\u4f8b\uff0c\u4ee5\u51cf\u5c11\u521b\u5efa\u5b9e\u4f8b\u7684\u7e41\u7410\uff1a\n//Show.scala\u5bf9\u8c61Show\uff1adef from[A](f\uff1aA=&gt\uff1bstring)\uff1ashow[A]=new Show[A]\uff1aExtension(a\uff1aA)def show\uff1aString=f(A)\u7ed9\u5b9a[A\uff1aShow]as Show[List[A]]\uff1aExtension(ls\uff1aList[A])def show\uff1aString=ls\u3002\u5730\u56fe(_.\u3002\u663e\u793a)\u3002MkString(&#34\uff1b\uff0c&#34\uff1b)\u3002\n//Main.scala\u5bfc\u5165\u663e\u793a\u3002{_\uff0c\u7ed9\u5b9a}\u6848\u4f8b\u7c7bMountain(\u540d\u79f0\uff1a\u5b57\u7b26\u4e32\uff0c\u9ad8\u5ea6\uff1aint)\u7ed9\u5b9aShow[Mountain]=Show\u3002\u4ece((m\uff1aMountain)=&gt\uff1bs&34\uff1b${m.name}\u4e3a${m.Height}\u7c73\u9ad8&34\uff1b)@main def main=Val Mountain=list(Mountain(&#34\uff1bMont Blanc&#34\uff1b\uff0c4808)\uff0cMountain(&#34\uff1bMatterhorn&#34\uff1b\uff0c4478))println(Mountain\u3002(\u79c0\u573a)\u3002\n\u56e0\u4e3a\u6269\u5c55\u65b9\u6cd5\u662f\u5728\u7279\u5f81\u4e2d\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u989d\u5916\u7684\u5bfc\u5165\u8bed\u53e5\uff0c\u8fd9\u4e0eScala 2\u4e2d\u8fc7\u53bb\u53d1\u751f\u7684\u60c5\u51b5\u76f8\u53cd\uff0c\u60a8\u5c06\u5728\u4e0b\u9762\u7684\u5c0f\u8282\u4e2d\u770b\u5230\u8fd9\u4e00\u70b9\u3002\n\u5728Scala2\u4e2d\uff0c\u6d89\u53ca\u5230\u66f4\u591a\u7684\u6837\u677f\u4ee3\u7801\u3002\u8fd9\u4e00\u5207\u90fd\u8981\u4ece\u5b9a\u4e49\u63a5\u53e3\u5f00\u59cb\uff1a\n//ShowOps.scala\u5bf9\u8c61ShowOps{IMPLICIT\u7c7bshowOps[A](in\uff1aA)\u6269\u5c55AnyVal{def show(IMPLICIT INSTANCE\uff1aSHOW[A])\uff1aString=Instance\u3002\u663e\u793a(\u8f93\u5165)}}\u3002\n//Show.scala Object Show{def from[A](f\uff1aA=&gt\uff1bstring)\uff1ashow[A]=new Show[A]{def show(a\uff1aa)\uff1astring=f(A)}//\u6b64\u9009\u9879\u6216\u5bfc\u5165ShowOps\u5e76\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ed1\u5b9a\u7684\u9690\u5f0fdef showList[A](ls\uff1alist[A])(\u9690\u5f0f\u5b9e\u4f8b\uff1ashow[A])=ls\u3002\u8d34\u56fe(\u5b9e\u4f8b\u3002\u663e\u793a)\u3002MkList(&#34\uff1b\uff0c&#34\uff1b)}\n//Main.scala\u5bfc\u5165Show._import ShowOps._Case\u7c7bMountain(Name\uff1aString\uff0cHeight\uff1aint)Object Main\u6269\u5c55App{\u9690\u5f0fVal Mountain Show\uff1aShow[Mountain]=Show\u3002FromFunction((m\uff1aMountain)=&gt\uff1bs&#34\uff1b${m.name}\u662f${m.Height}\u7c73\u9ad8&34\uff1b)Val Mountain=list(Mountain(&#34\uff1bMont Blanc&#34\uff1b\uff0c4808)\uff0cMountain(&#34\uff1bMatterhon&#34\uff1b\uff0c4478))println(Mountain\u3002\u663e\u793a)}\u3002\n\u6211\u4eec\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u9690\u542b\u5982\u4f55\u88ab\u7528\u6765\u5b9e\u73b0\u4e0d\u540c\u7684\u76ee\u6807\uff0c\u800c\u5728\u8fd9\u6837\u505a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f80\u5f80\u66f4\u4ee4\u4eba\u56f0\u60d1\uff1a\n\u5982\u679c\u8981\u63d0\u4f9b\u9690\u5f0f\u5b9e\u4f8b\uff0c\u8bf7\u4f7f\u7528GISTEN\u58f0\u660e\u8be5\u503c\u73b0\u5728\u53ef\u7528\u3002\n\u5982\u679c\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u6309\u540d\u79f0\u6307\u5b9a\u503c\uff0c\u8bf7\u4e0d\u8981\u63d0\u4f9b\u8be5\u503c\u3002\nScala3\u4e2d\u4e0e\u4e0a\u4e0b\u6587\u62bd\u8c61\u76f8\u5173\u7684\u53e6\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u4f46\u66f4\u9ad8\u7ea7\u7684\u7279\u6027\u662f\u4e0a\u4e0b\u6587\u51fd\u6570\u3002\n\u6211\u4eec\u56de\u987e\u4e86Scala 2\u4e2d\u9690\u5f0f\u7684\u4e3b\u8981\u7528\u4f8b\uff0c\u5e76\u63d0\u4f9b\u4e86\u5b83\u4eec\u5728Scala 3\u4e2d\u7684\u5916\u89c2\u3002\u867d\u7136\u6700\u7ec8\u7ed3\u679c\u51e0\u4e4e\u76f8\u540c\uff0c\u4f46\u4ee3\u7801\u66f4\u52a0\u660e\u786e\u548c\u53ef\u8bfb\u6027\u66f4\u597d\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u89e3\u51b3\u4e1a\u52a1\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u8bed\u6cd5\u3002\n\u8fd9\u662fScala 3\u7684\u4e00\u7cfb\u5217\u66f4\u5927\u7684\u53ef\u7528\u6027\u548c\u4eba\u4f53\u5de5\u7a0b\u5b66\u6539\u8fdb\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u76f8\u4fe1\u8fd9\u4e9b\u6539\u8fdb\u5c06\u4f7fScala 3\u4f7f\u7528\u8d77\u6765\u66f4\u5bb9\u6613\u3001\u66f4\u6709\u8da3\uff0c\u6211\u4eec\u975e\u5e38\u5174\u594b\u5730\u770b\u5230\u793e\u533a\u5c06\u7528\u5b83\u4eec\u521b\u9020\u4ec0\u4e48\u3002", "note_en": "One of the most striking changes for developers adopting Scala 3 is the introductionof a new syntax to replace the implicit mechanism used in previous Scala versions.\n The motivation behind the new syntax is that the same  implicit keyword wasused for different purposes and patterns and thus it became a way to express  how to implementpatterns. This means that when encountering this ambiguous incantation, users need to decipher whatthe intent of the developer was: is this a conversion? Does this avoid parameter repetition?Is this an extension of a type? Is this a typeclass? How do I import this?\n Seeing how pervasive implicits became in libraries and projects, Scala 3 aims at reducing confusion and cognitive load by using new keywords that convey the intent of the developer.\n This post briefly introduces the new syntax and semantics available to Scala 3 programmers by analysing themost common use cases and patterns: extension methods, implicit parameters, implicit conversions and typeclasses.\n  While we believe that the new syntax represents an improvement, it is very important to highlightthat older code using  implicit is still perfectly valid for the Scala 3.0 compiler, even if it will be deprecated in future releases.You do not need to port your codebase right away, it can be an incremental and gradual process.\n  When you do not have control over a type but you need to extend its capabilities with a new method,Scala 3 allows you to define an  extension method.\n Assume that you are working with  List[Try[String]] and that you often need to retrievethe elements for which the computation succeeded.\n  // ListTryOps.scala import  scala.util. { Try ,  Success } extension  ( ls :  List [ Try [ String ]])  def  collectSucceeded :  List [ String ]  =  ls . collect  {  case  Success ( x )  =&gt;  x  }\n To remember the syntax, notice how  collectSucceeded follows the object on which it will be available:  ls.collectSucceeded.Extension methods can have type parameters as well:\n   extension [ A ]  ( ls :  List [ Try [ A ]]) :  def  collectSucceeded:  List [ A ]  =  ls . collect  {  case  Success ( x )  =&gt;  x  }  def  getIndexOfFirstFailure :  Option [ Int ]  =  ls . zipWithIndex . find (( t ,  _ )  =&gt;  t . isFailure )  . map ( _ . _2 )\n  // Main.scala import  scala.util.Try // import ListTryOps._ // Using wildcard import  ListTryOps.collectSucceeded def  getLastTweet ( username :  String ) :  Try [ String ]  =  ??? @main  def  main  =  val  niceTweets  =  List ( getLastTweet ( &#34;scala_lang&#34; ),  getLastTweet ( &#34;odersky&#34; )). collectSucceeded  println ( niceTweets )\n  This pattern was particularly cumbersome to implement prior to Scala 3.A typical approach would be the following:\n implicit  class  ListTryExtension [ A ]( private  val  in :  List [ Try [ A ]])  extends  AnyVal  {  def  collectSucceeded :  List [ A ]  =  ls . collect  {  case  Success ( a )  =&gt;  a  }  def  getIndexOfFirstFailure :  Option [ Int ]  =  in . zipWithIndex . find  {  case  ( t ,  _ )  =&gt;  t . isFailure  }  . map  {  case  ( _ ,  index )  =&gt;  index  } }\n Note that you need to define a name for the class, even if this is probably never going to be used besides the import statement.You also need to understand what  AnyVal is, why it is good practice to extend it andwhat its limitations are.\n Some experience is required when reading this code to understand that its only goal is toadd a couple of methods to  List[Try[A]].\n  You can find more information about extension methods on  the dedicated documentation page.We also suggest that you read how they complement another new Scala 3 feature:  opaque types.Later in this post we will see how they simplify a very common pattern: typeclasses.\n  Similarly to other programming languages, Scala allows you to omit the type of a variable as thecompiler can perform  type inference. For example we can write\n    In this case we declared the value and the compiler inferred the corresponding type.One of the distinctive features of Scala is being able to infer values when the type is specified.\n Consider the  Future abstraction in the standard library. Each time you create a  Future byproviding a computation, you need to specify on which  ExecutionContext the computation willbe evaluated:\n import  scala.concurrent._ def  factorial ( n :  Int ) :  Int  =  ??? def  fibonacci ( n :  Int ) :  Int  =  ??? @main  def  main  =  val  executor :  ExecutionContext  =  ExecutionContext . global  val  fact100  =  Future ( factorial ( 100 ))( executor )  val  fibo100  =  Future ( fibonacci ( 100 ))( executor )  // ...\n As you can see, the repetition of  executor quickly becomes a tedious task.We can declare that this parameter is common to the current context and avoid its repetition:\n @main  def  main  =  given  executor  as  ExecutionContext  =  ExecutionContext . global  val  fact100  =  Future ( factorial ( 100 ))  val  fibo100  =  Future ( fibonacci ( 100 ))\n  // scala.concurrent.Future.scala object  Future  {  // ..  def  apply [ T ]( body :  =&gt;  T )( using  executor :  ExecutionContext ) :  Future [ T ]  =  // ... }\n We see here the other half of the syntax: if we declare a parameter as  using, the compilerwill search the current scope at call sites for  given values with a compatible type.\n      Another important aspect is how we import these values. For example, if you had amore involved definition for the  ExecutionContext that is used in multiplefiles, you could refactor it into a different file:\n        You can learn more about  using /  given and about the rules of resolution in the documentation.\n  In Scala 2 this pattern was achieved by marking both the value and the parameter with the implicit keyword. The previous example would look like this:\n // Main.scala import  scala.concurrent._ object  Main  extends  App  implicit  val  ec :  ExecutionContext  =  ExecutionContext . global  Future ( println ( &#34;Hello World&#34; )) } // scala.concurrent.Future.scala object  Future  {  // ..  def  apply [ T ]( body :  =&gt;  T )( implicit  executor :  ExecutionContext ) :  Future [ T ]  =  // ... }\n We note again that we had to provide a name which might not be used for the variable. The  implicitly function from Scala 2 is renamed to  summon in Scala 3.\n Finally the special import syntax allows users to explicitly import  given instances by type rather than by name. This makes more sense since we usually refer to them by type as well.\n   The implicit conversion feature is dangerous. For this reason, in Scala 3, the compilerwill warn you every time it is used. You can disable the warning at your own risk byexplicitly importing the feature into the current scope.\n The Java standard library provides an  Optional type which is very similar to  Option.If you are working with a Java library which produces a lot of objects with this type,but you also have many  Options around, you might want to define an automatic conversion.\n    // OptionalConversion.scala import  java.util.Optional object  OptionalConversion :  given  [ A ]  as  Conversion [ Optional [ A ],  Option [ A ]] :  def  apply ( in:  Optional [ A ]) :  Option [ A ]  =  if  in . isPresent  then  Some ( in . get ())  else  None\n    Use of implicit conversion class given_Conversion_Optional_Option in object OptionalConversion should be enabledby adding the import clause &#39;import scala.language.implicitConversions&#39;or by setting the compiler option -language:implicitConversions.See the Scala docs for value scala.language.implicitConversions for a discussionwhy the feature should be explicitly enabled.\n      import  java.util.Optional object  OptionalConversion  {  implicit  def  optionalToOption [ A ]( in :  Optional [ A ]) :  Option [ A ]  =  if  ( in . isPresent )  Some ( in . get ())  else  None }\n   Note that at a glance, it is not clear that the definition is intended as an automatic conversion to an expected type:\n the name of the method can be a hint, but this is merely a convention thatother developers might not share\n  the implicit def may be intended give you extension methods on its parameter type, depending on its result\n  there is not straightforward way to verify that this function will not be used as implicitargument for a function with an implicit parameter list\n   This pattern is fundamental to Scala functional programming libraries such as  Cats. In Scala 2 we used to heavily rely on  implicit conversions to add methodsand on  implicit parameters to propagate instances, which was a bit cryptic to beginners who were maybe already struggling with new concepts in functional programming.\n In Scala 3, this pattern becomes simpler thanks to the new syntax.Let\u2019s consider a simple typeclass such as  Show which describes the capability of types to have a  String representation.\n   We can then add a companion object to provide a couple of auxiliary methods and instancesthat make instance creation less tedious:\n // Show.scala object  Show :  def  from [ A ]( f :  A  =&gt;  String ) :  Show [ A ]  =  new  Show [ A ] :  extension  ( a:  A )  def  show:  String  =  f ( a )  given [ A:  Show ]  as  Show [ List [ A ]] :  extension  ( ls:  List [ A ])  def  show :  String  =  ls . map ( _ . show ). mkString ( &#34;,&#34; )\n  // Main.scala import  Show. { _ ,  given } case  class  Mountain ( name :  String ,  height :  Int ) given  Show [ Mountain ]  =  Show . from (( m :  Mountain )  =&gt;  s &#34;${m.name} is ${m.height} meters high&#34; ) @main  def  main  =  val  mountains  =  List ( Mountain ( &#34;Mont Blanc&#34; ,  4808 ),  Mountain ( &#34;Matterhorn&#34; ,  4478 ))  println ( mountains . show )\n As the extension method is defined inside the trait, there is no additional import statement required contrarily to what used to happen in Scala 2, as you will see in the following section.\n  In Scala 2 there was more boilerplate code involved. It all starts with defining the interface:\n   // ShowOps.scala object  ShowOps  {  implicit  class  showOps [ A ]( in :  A )  extends  AnyVal  {  def  show ( implicit  instance :  Show [ A ]) :  String  =  instance . show ( in )  } }\n  // Show.scala object  Show  {  def  from [ A ]( f :  A  =&gt;  String ) :  Show [ A ]  =  new  Show [ A ]  {  def  show ( a :  A ) :  String  =  f ( a )  }  // Either this or import ShowOps and use context bound  implicit  def  showList [ A ]( ls :  List [ A ])( implicit  instance :  Show [ A ])  =  ls . map ( instance . show ). mkList ( &#34;,&#34; ) }\n  // Main.scala import  Show._ import  ShowOps._ case  class  Mountain ( name :  String ,  height :  Int ) object  Main  extends  App  {  implicit  val  mountainShow :  Show [ Mountain ]  =  Show . fromFunction (( m :  Mountain )  =&gt;  s &#34;The ${m.name} is ${m.height} meters high&#34; )  val  mountains  =  List ( Mountain ( &#34;Mont Blanc&#34; ,  4808 ),  Mountain ( &#34;Matterhon&#34; ,  4478 ))  println ( mountains . show ) }\n We believe that this example shows how  implicit was used to achieve different goalsand, in doing so, used to be more confusing:\n If you are providing an implicit instance, use  given to declare that the value is now available\n    If you are never going to refer to a value by its name, do not provide one\n   Another extremely interesting, yet more advanced, feature in Scala 3 related to contextual abstractions are  Context Functions.\n  We went over the main use cases of  implicit in Scala 2 and offered a quick glance of whatthey would look like in Scala 3. While the final result is almost the same, code is moreexplicit and readable so that you can focus on solving your business problems rather than onsyntax.\n This is part of a larger set of usability and ergonomy improvements for Scala 3 that we believewill make the language easier and more fun to use and we are very excited to see what thecommunity will create with them.", "posttime": "2020-11-10 15:24:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "scala,term,\u7c7b\u578b", "title": "\u4f7f\u7528Scala 3\u8fdb\u884c\u663e\u5f0f\u9879\u63a8\u7406", "title_en": "Explicit term inference with Scala 3", "transed": 1, "url": "https://www.scala-lang.org/2020/11/06/explicit-term-inference-in-scala-3.html", "via": "", "real_tags": ["scala", "term", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "0fb09a3364f3c3e6c1e3c974e5e6d186.jpg", "infoid": 1034216, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u6563\u6587\u5bb6\u3001\u5b66\u8005\u548c\u524d\u4ea4\u6613\u5458\u7eb3\u897f\u59c6\u00b7\u5c3c\u53e4\u62c9\u65af\u00b7\u5854\u52d2\u5e03(Nassim Nicholas Taleb)\u7684\u5de5\u4f5c\u91cd\u70b9\u662f\u968f\u673a\u6027\u3001\u6982\u7387\u548c\u4e0d\u786e\u5b9a\u6027\u95ee\u9898\uff0c\u4ed6\u8ba8\u8bba\u4e86\u4ed6\u7684\u2026\u2026", "note_en": "American essayist, scholar and former trader Nassim Nicholas Taleb, whose work focuses on problems of randomness, probability, and uncertainty, discusses his...", "posttime": "2020-11-10 15:24:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u8c37\u6b4c,\u6e38\u620f,nassim,game", "title": "\u6e38\u620f\u4e2d\u7684\u76ae\u80a4-\u7eb3\u897f\u59c6\u00b7\u5c3c\u53e4\u62c9\u65af\u00b7\u5854\u52d2\u5e03(Nassim Nicholas Taleb)-\u5728\u8c37\u6b4c(Google)\u4ea4\u8c08(2018\u5e74)", "title_en": "Skin in the Game \u2013 Nassim Nicholas Taleb \u2013 Talks at Google (2018)", "transed": 1, "url": "https://www.youtube.com/watch?v=uv6KLbkvua8", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "\u6e38\u620f", "nassim", "game"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1034215, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7dPDF\u6458\u8981\uff1a\u57fa\u4e8e\u53d8\u538b\u5668\u7684\u6a21\u578b\u5df2\u7ecf\u5728NLP\u7684\u8bb8\u591a\u9886\u57df\u63a8\u52a8\u4e86\u6700\u5148\u8fdb\u7684\u6280\u672f\uff0c\u4f46\u6211\u4eec\u5bf9\u5b83\u4eec\u6210\u529f\u80cc\u540e\u7684\u539f\u56e0\u7684\u4e86\u89e3\u4ecd\u7136\u6709\u9650\u3002\u8fd9\u662f\u5bf9\u6d41\u884c\u7684\u4f2f\u7279\u6a21\u578b\u7684150\u591a\u9879\u7814\u7a76\u7684\u9996\u6b21\u8c03\u67e5\u3002\u6211\u4eec\u5c06\u56de\u987e\u5173\u4e8eBERT\u5982\u4f55\u5de5\u4f5c\u7684\u77e5\u8bc6\u73b0\u72b6\uff0c\u5b83\u5b66\u4e60\u4e86\u4ec0\u4e48\u7c7b\u578b\u7684\u4fe1\u606f\uff0c\u5b83\u662f\u5982\u4f55\u8868\u793a\u7684\uff0c\u5bf9\u5b83\u7684\u7ea6\u675f\u76ee\u6807\u548c\u4f53\u7cfb\u7ed3\u6784\u7684\u5e38\u89c1\u4fee\u6539\uff0c\u8fc7\u5ea6\u53c2\u6570\u5316\u95ee\u9898\u548c\u538b\u7f29\u65b9\u6cd5\u3002\u7136\u540e\uff0c\u6211\u4eec\u52fe\u52d2\u51fa\u672a\u6765\u7814\u7a76\u7684\u65b9\u5411\u3002\n\u51fa\u53d1\u5730\uff1aOlga Kovaleva[\u67e5\u770b\u7535\u5b50\u90ae\u4ef6][v1]\u6e05\u534e\uff0c2020\u5e742\u670827\u65e518\uff1a46\uff1a42 UTC(923 KB)[v2]\u661f\u671f\u4e00\uff0c2020\u5e7411\u67082\u65e522\uff1a01\uff1a57 UTC(1,394KB)[v3]\u661f\u671f\u4e00\uff0c2020 11\u67089\u65e515\uff1a33\uff1a50 UTC(1,394KB)\u3002\nArXivLabs\u662f\u4e00\u4e2a\u6846\u67b6\uff0c\u5141\u8bb8\u5408\u4f5c\u8005\u76f4\u63a5\u5728\u6211\u4eec\u7684\u7f51\u7ad9\u4e0a\u5f00\u53d1\u548c\u5206\u4eab\u65b0\u7684arxiv\u529f\u80fd\u3002\n\u4e0earxivLabs\u5408\u4f5c\u7684\u4e2a\u4eba\u548c\u7ec4\u7ec7\u90fd\u63a5\u53d7\u5e76\u63a5\u53d7\u4e86\u6211\u4eec\u5f00\u653e\u3001\u793e\u533a\u3001\u5353\u8d8a\u548c\u7528\u6237\u6570\u636e\u9690\u79c1\u7684\u4ef7\u503c\u89c2\u3002Arxiv\u81f4\u529b\u4e8e\u8fd9\u4e9b\u4ef7\u503c\u89c2\uff0c\u53ea\u4e0e\u575a\u6301\u8fd9\u4e9b\u4ef7\u503c\u89c2\u7684\u5408\u4f5c\u4f19\u4f34\u5408\u4f5c\u3002\n\u4f60\u6709\u4e00\u4e2a\u4e3aarxiv\uff1b\u793e\u533a\u589e\u52a0\u4ef7\u503c\u7684\u9879\u76ee\u7684\u60f3\u6cd5\u5417\uff1f\u4e86\u89e3\u6709\u5173arXivLabs\u7684\u66f4\u591a\u4fe1\u606f\u4ee5\u53ca\u5982\u4f55\u53c2\u4e0e\u5176\u4e2d\u3002\n\u4e66\u76ee\u5de5\u5177\u4ee3\u7801\u63a8\u8350\u5668", "note_en": "Download PDF  Abstract: Transformer-based models have pushed state of the art in many areas of NLP,but our understanding of what is behind their success is still limited. Thispaper is the first survey of over 150 studies of the popular BERT model. Wereview the current state of knowledge about how BERT works, what kind ofinformation it learns and how it is represented, common modifications to itstraining objectives and architecture, the overparameterization issue andapproaches to compression. We then outline directions for future research.\n  From: Olga Kovaleva [ view email]     [v1] Thu, 27 Feb 2020 18:46:42 UTC (923 KB)    [v2] Mon, 2 Nov 2020 22:01:57 UTC (1,394 KB)  [v3]Mon, 9 Nov 2020 15:33:50 UTC (1,394 KB)\n      About arXivLabs   arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.\n  Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.\n  Have an idea for a project that will add value for arXiv&#39;s community?   Learn more about arXivLabs and   how to get involved.\n    Bibliographic Tools      Code      Recommenders", "posttime": "2020-11-10 15:04:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5165\u95e8,bertology,\u4ef7\u503c\u89c2", "title": "BERTology\u5165\u95e8\uff1a\u6211\u4eec\u5bf9Bert\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u4e86\u89e3", "title_en": "A Primer in BERTology: What We Know About How Bert Works", "transed": 1, "url": "https://arxiv.org/abs/2002.12327", "via": "", "real_tags": ["\u5165\u95e8", "bertology", "\u4ef7\u503c\u89c2"]}, {"category": "", "categoryclass": "", "imagename": "fb160e84b1ca6316a02e2596c28aa473.jpg", "infoid": 1034214, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u540d\u524d\u5fae\u8f6f\u5de5\u7a0b\u5e08\u88ab\u5224\u59049\u5e74\u76d1\u7981\uff0c\u7f6a\u540d\u662f18\u9879\u8054\u90a6\u91cd\u7f6a\uff0c\u4ed6\u4ece\u524d\u96c7\u4e3b\u90a3\u91cc\u7a83\u53d6\u4e86\u4ef7\u503c1000\u591a\u4e07\u7f8e\u5143\u7684\u6570\u5b57\u8d27\u5e01\uff0c\u5e76\u7528\u8fd9\u4e9b\u94b1\u8d2d\u4e70\u4e86\u4ef7\u503c160\u4e07\u7f8e\u5143\u7684\u6e56\u8fb9\u4f4f\u5b85\u548c\u4ef7\u503c16\u4e07\u7f8e\u5143\u7684\u7279\u65af\u62c9\u6c7d\u8f66\u3002\n26\u5c81\u7684\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u30012016\u5e74\u81f32018\u5e74\u5728\u5fae\u8f6f\u5de5\u4f5c\u7684\u4e4c\u514b\u5170\u516c\u6c11Volodymyr Kvashuk\u5229\u7528\u4e86\u5fae\u8f6f\u5728\u7ebf\u96f6\u552e\u5e73\u53f0\u7684\u4e00\u9879\u6d4b\u8bd5\u8ba1\u5212\u3002\u534e\u76db\u987f\u5dde\u4f26\u987f\u7684\u5c45\u6c11\u514b\u74e6\u8212\u514b\u5077\u8d70\u4e86\u5fae\u8f6f\u793c\u54c1\u5361\u7b49\u201c\u8d27\u5e01\u50a8\u503c\u201d\uff0c\u7136\u540e\u5728\u7f51\u4e0a\u8f6c\u5356\u3002\n\u514b\u74e6\u8212\u514b\u4f7f\u7528\u4e86\u4e00\u79cd\u201c\u6bd4\u7279\u5e01\u6df7\u5408\u670d\u52a1\u201d\uff0c\u8bd5\u56fe\u9690\u85cf\u4ed6\u8f6c\u5165\u94f6\u884c\u8d26\u6237\u7684\u8d44\u91d1\u6765\u6e90\u3002\u4ed6\u8fd8\u4f7f\u7528\u4e86\u4e0e\u5176\u4ed6\u5458\u5de5\u76f8\u5173\u7684\u6d4b\u8bd5\u7535\u5b50\u90ae\u4ef6\u8d26\u6237\u3002\n\u7ecf\u8fc7\u4e03\u4e2a\u6708\u7684\u975e\u6cd5\u6d3b\u52a8\uff0c\u514b\u74e6\u8212\u514b\u5411\u4ed6\u7684\u94f6\u884c\u548c\u6295\u8d44\u8d26\u6237\u8f6c\u79fb\u4e86\u5927\u7ea6280\u4e07\u7f8e\u5143\u7684\u6bd4\u7279\u5e01\u3002\u4ed6\u63d0\u4ea4\u4e86\u865a\u5047\u7684\u7eb3\u7a0e\u7533\u62a5\u8868\uff0c\u5e76\u8868\u793a\u6bd4\u7279\u5e01\u662f\u4eb2\u621a\u9001\u7684\u793c\u7269\u3002\n\u5fae\u8f6f\u8c03\u67e5\u4eba\u5458\u6210\u529f\u7834\u6848\uff0c\u5e76\u4e8e2018\u5e745\u6708\u4e0e\u514b\u74e6\u8212\u514b\u5bf9\u8d28\u3002\u4e00\u4e2a\u6708\u540e\uff0c\u4ed6\u88ab\u89e3\u96c7\u4e86\u3002\n\u6839\u636e\u7f8e\u56fd\u68c0\u5bdf\u5b98\u529e\u516c\u5ba4\u7684\u8bf4\u6cd5\uff0c\u5728\u4e3a\u671f\u4e94\u5929\u7684\u5ba1\u5224\u4e2d\uff0c\u514b\u74e6\u8212\u514b\u8868\u793a\uff0c\u4ed6\u5e76\u4e0d\u6253\u7b97\u6b3a\u9a97\u5fae\u8f6f\uff0c\u5e76\u58f0\u79f0\u81ea\u5df1\u6b63\u5728\u8fdb\u884c\u4e00\u4e2a\u201c\u4f7f\u516c\u53f8\u53d7\u76ca\u7684\u7279\u6b8a\u9879\u76ee\u201d\u3002\n\u7f8e\u56fd\u68c0\u5bdf\u5b98\u5e03\u83b1\u6069\u00b7\u83ab\u5170(Brian Moran)\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\uff1a\u201c\u4ece\u96c7\u4e3b\u90a3\u91cc\u5077\u4e1c\u897f\u5df2\u7ecf\u591f\u7cdf\u7cd5\u7684\u4e86\uff0c\u4f46\u5077\u7a83\u548c\u8ba9\u4eba\u89c9\u5f97\u4f60\u7684\u540c\u4e8b\u6709\u8d23\u4efb\u4f1a\u6269\u5927\u635f\u5bb3\u8303\u56f4\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u91d1\u94b1\u548c\u7f8e\u5206\u3002\u201d\u8fd9\u8d77\u6848\u4ef6\u9700\u8981\u590d\u6742\u7684\u6280\u672f\u6280\u80fd\u6765\u8c03\u67e5\u548c\u8d77\u8bc9\uff0c\u6211\u5f88\u9ad8\u5174\u6211\u4eec\u7684\u6267\u6cd5\u4f19\u4f34\u548c\u7f8e\u56fd\u68c0\u5bdf\u5b98\u529e\u516c\u5ba4\u62e5\u6709\u5c06\u8fd9\u7c7b\u7f6a\u72af\u7ef3\u4e4b\u4ee5\u6cd5\u6240\u9700\u7684\u6280\u80fd\u3002\u201c\u3002\n\u514b\u74e6\u8212\u514b\u4e8e\u4eca\u5e742\u6708\u88ab\u5224\u6709\u7f6a\u3002\u4ed6\u88ab\u52d2\u4ee4\u652f\u4ed8830\u4e07\u7f8e\u5143\u7684\u8d54\u507f\uff0c\u5e76\u53ef\u80fd\u5728\u670d\u5211\u540e\u88ab\u9a71\u9010\u51fa\u5883\u3002\u8fd9\u662f\u7f8e\u56fd\u7b2c\u4e00\u4e2a\u5e26\u6709\u7a0e\u6536\u6210\u5206\u7684\u6bd4\u7279\u5e01\u6848\u4ef6\u3002\n\u7f8e\u56fd\u56fd\u7a0e\u5c40\u7279\u522b\u63a2\u5458\u745e\u6069\u00b7\u79d1\u7eb3\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\uff1a\u201c\u7b80\u5355\u5730\u8bf4\uff0c\u4eca\u5929\u7684\u5224\u51b3\u8bc1\u660e\u4e86\u4f60\u4e0d\u80fd\u901a\u8fc7\u4e92\u8054\u7f51\u5077\u94b1\uff0c\u4e5f\u4e0d\u80fd\u8ba4\u4e3a\u6bd4\u7279\u5e01\u4f1a\u63a9\u76d6\u4f60\u7684\u72af\u7f6a\u884c\u4e3a\u3002\u201d\u201c\u5728\u7f8e\u56fd\u56fd\u7a0e\u5c40(IRS-CI)\u7f51\u7edc\u72af\u7f6a\u90e8\u95e8\u7684\u534f\u52a9\u4e0b\uff0c\u6211\u4eec\u590d\u6742\u7684\u7f51\u7edc\u72af\u7f6a\u4e13\u5bb6\u56e2\u961f\u5c06\u8ffd\u6355\u4f60\uff0c\u5e76\u8ba9\u4f60\u4e3a\u81ea\u5df1\u7684\u4e0d\u5f53\u884c\u4e3a\u8d1f\u8d23\u3002\u201d\n\u514b\u74e6\u8212\u514b\u88ab\u5224\u4e94\u9879\u7535\u4fe1\u6b3a\u8bc8\u3001\u516d\u9879\u6d17\u94b1\u3001\u4e24\u9879\u4e25\u91cd\u8eab\u4efd\u76d7\u7a83\u3001\u4e24\u9879\u63d0\u4ea4\u865a\u5047\u7eb3\u7a0e\u7533\u62a5\u8868\u3001\u4e00\u9879\u90ae\u4ef6\u6b3a\u8bc8\u3001\u4e00\u9879\u8bbf\u95ee\u8bbe\u5907\u6b3a\u8bc8\u548c\u4e00\u9879\u8bbf\u95ee\u53d7\u4fdd\u62a4\u8ba1\u7b97\u673a\u4ee5\u8fdb\u4e00\u6b65\u6b3a\u8bc8\u7684\u7f6a\u540d\u6210\u7acb\u3002", "note_en": "An ex-Microsoft engineer was  sentenced to nine years in prison for 18 federal felonies after he stole more than $10 million worth of digital currency from his ex-employer and used the funds to finance purchases including a $1.6 million lakefront home and $160,000 Tesla vehicle.\n Volodymyr Kvashuk, a 26-year-old software developer and Ukrainian citizen who worked for Microsoft from 2016 to 2018, took advantage of a testing program for Microsoft\u2019s online retail sales platform. Kvashuk, a resident of Renton, Wash., stole \u201ccurrency stored value\u201d such as Microsoft gift cards and then resold them online.\n Kvashuk used a \u201cbitcoin mixing service\u201d to try and conceal the source of the funds he was moving into his bank account. He also used test email accounts associated with other employees.\n  After seven months of illegal activity, Kvashuk transferred about $2.8 million in bitcoin to his bank and investment accounts. He filed fake tax forms and said the bitcoin was a gift from a relative.\n Microsoft investigators were able to crack the case and confronted Kvashuk in May 2018. He was fired a month later.\n During the five-day trial, Kvashuk said he did not intend to defraud Microsoft and claimed to be working on a \u201cspecial project to benefit the company,\u201d according to the U.S. Attorney\u2019s Office.\n \u201cStealing from your employer is bad enough, but stealing and making it appear that your colleagues are to blame widens the damage beyond dollars and cents,\u201d U.S. Attorney Brian Moran said in a  statement. \u201cThis case required sophisticated, technological skills to investigate and prosecute, and I am pleased that our law enforcement partners and the U.S. Attorney\u2019s Office have the skill sets needed to bring such offenders to justice.\u201d\n  Kvashuk was convicted in February. He was ordered to pay $8.3 million in restitution and may be deported following his prison term. It\u2019s the nation\u2019s first Bitcoin case with a tax component.\n \u201cSimply put, today\u2019s sentencing proves you cannot steal money via the Internet and think that Bitcoin is going to hide your criminal behaviors,\u201d IRS-CI Special Agent in Charge Ryan Korner said in a statement. \u201cOur complex team of cybercrimes experts with the assistance of IRS-CI\u2019s Cyber Crimes Unit will hunt you down and hold you accountable for your wrongdoings.\u201d\n Kvashuk was convicted of five counts of wire fraud; six counts of money laundering; two counts of aggravated identity theft; two counts of filing false tax returns; one count of mail fraud; one count of access device fraud; and one count of access to a protected computer in furtherance of fraud.", "posttime": "2020-11-10 14:45:43", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "microsoft,\u5fae\u8f6f,\u7f8e\u56fd,\u6bd4\u7279\u5e01,\u8d27\u5e01", "title": "\u7f8e\u56fd\u9996\u4f8b\u6d89\u53ca\u7a0e\u52a1\u6b3a\u8bc8\u7684\u6bd4\u7279\u5e01\u6848\u4e2d\uff0c\u4e00\u540d\u524d\u5fae\u8f6f\u5de5\u7a0b\u5e08\u56e0\u7a83\u53d6\u5fae\u8f6f1000\u4e07\u7f8e\u5143\u6570\u5b57\u8d27\u5e01\u800c\u88ab\u5224\u59049\u5e74\u76d1\u7981\u3002", "title_en": "An ex-Microsoft engineer is sentenced to 9 years in prison for stealing $10M in digital currency from Microsoft, in US' first Bitcoin case involving tax fraud", "transed": 1, "url": "https://www.geekwire.com/2020/ex-microsoft-engineer-gets-9-years-prison-using-digital-currency-scheme-buy-1-6m-lakefront-home-160k-tesla/", "via": "", "real_tags": ["microsoft", "\u5fae\u8f6f", "\u7f8e\u56fd", "\u6bd4\u7279\u5e01", "\u8d27\u5e01"]}]