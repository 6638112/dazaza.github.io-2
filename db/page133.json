[{"category": "", "categoryclass": "", "imagename": "1070e862442bc006d3b1a3dccf5c6825.jpg", "infoid": 1072101, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u5468\uff0c\u6211\u4e00\u76f4\u8bd5\u56fe\u638c\u63e1\u4e24\u79cd\u4f7f\u5e94\u7528\u7a0b\u5e8f\u5728 Apple \u65b0 M1 \u82af\u7247\u4e0a\u8fd0\u884c\u5f97\u66f4\u5feb\u7684\u6280\u672f\uff1a\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u7684\u5e76\u884c\u5904\u7406\uff0c\u4ee5\u53ca Apple \u4e30\u5bcc\u800c\u5e7f\u6cdb\u7684 Accelerate \u5e93\u4e2d\u7684\u529f\u80fd\u3002\u4e24\u8005\u90fd\u4e0d\u662f\u76f4\u622a\u4e86\u5f53\u7684\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u6587\u6863\u3002 Arm \u63d0\u4f9b\u4e86\u5927\u91cf\u5173\u4e8e\u5176\u5904\u7406\u5668\u8bbe\u8ba1\u7279\u6027\u7684\u6587\u6863\uff0c\u5176\u4e2d\u5305\u62ec\u5bf9\u5176\u6307\u4ee4\u96c6\u548c\u67b6\u6784\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u901a\u5e38\u4ee5 50 MB \u6216\u66f4\u591a\u7684 PDF \u683c\u5f0f\u8fd0\u884c\u6570\u5343\u9875\u3002\u9664\u4e86\u5e9e\u5927\u7684\u4f53\u79ef\u4e4b\u5916\uff0c\u8fd9\u4e9b\u7684\u6700\u5927\u969c\u788d\u5728\u4e8e\u5b83\u4eec\u5728\u6bcf\u4e2a\u5904\u7406\u5668\u67b6\u6784\u4e2d\u90fd\u662f\u901a\u7528\u7684\uff0c\u800c\u4e14\u6ca1\u6709\u4e00\u4e2a\u7279\u5b9a\u4e8e Apple \u5185\u7f6e\u4e8e\u5176 M1 \u82af\u7247\u4e2d\u7684\u5185\u6838\u3002\u56e0\u6b64\uff0c\u786e\u5207\u5730\u627e\u51fa\u54ea\u4e9b\u6709\u6548\uff0c\u54ea\u4e9b\u65e0\u6548\u662f\u4e00\u6b21\u63a2\u7d22\u4e4b\u65c5\u3002\u5c3d\u7ba1\u5b83\u5f88\u5438\u5f15\u4eba\uff0c\u4f46\u5b83\u4e5f\u9700\u8981\u65f6\u95f4\u3001\u5927\u91cf\u7684 PDF \u6d4f\u89c8\u548c\u5b9e\u9a8c\u3002\u5982\u679c\u60a8\u4e0d\u76f8\u4fe1\u6211\uff0c\u90a3\u4e48\u8bf7\u9605\u8bfb Apple \u7684\u7b80\u6d01\u6587\u7ae0\uff0c\u5e76\u51c6\u786e\u544a\u8bc9\u6211 Arm \u7684\u54ea\u4e9b\u53c2\u8003\u624b\u518c\u9002\u7528\u4e8e M1 \u4e2d\u7684\u5185\u6838\u3002\u751a\u81f3 Apple \u4e5f\u56de\u907f\u8fd9\u4e00\u70b9\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6307\u5411 Arm \u5f00\u53d1\u8005\u7f51\u7ad9\u9876\u7ea7\u7684\u94fe\u63a5\u3002\u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u5c1d\u8bd5\u76f4\u63a5\u8bbf\u95ee M1 \u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u6b64\u4ed6\u4eec\u5e0c\u671b Apple \u80fd\u591f\u4fc3\u8fdb\u8fd9\u4e00\u70b9\uff1b\u5728\u8bb8\u591a\u6570\u5b57\u548c\u76f8\u5173\u529f\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u90fd\u5305\u542b\u5728 Accelerate \u548c\u76f8\u5173\u5e93\u4e2d\u3002\u8fd1\u5e74\u6765\uff0cApple \u4e00\u76f4\u5728\u4e0d\u9057\u4f59\u529b\u5730\u89e3\u91ca\u8fd9\u4e9b\u5e7f\u6cdb\u7684\u7cfb\u5217\uff0c\u8fd9\u4e9b\u7cfb\u5217\u4e3b\u8981\u7531\u5176 Vector &amp; Numerics \u56e2\u961f\u8bbe\u8ba1\u3002\u8be5\u56e2\u961f\u7684\u6210\u5458\u4e8e 2018 \u5e74\u5728 WWDC \u4e0a\u53d1\u8868\u8bb2\u8bdd\u8bf4\uff1a\u201cAccelerate \u6613\u4e8e\u4f7f\u7528\u3002\u5927\u591a\u6570\u65f6\u5019\u5b83\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u5de5\u4f5c\u5c31\u5b8c\u6210\u4e86\u3002\u201d\u7b2c\u4e8c\u5e74\uff0c\u4ed6\u4eec\u53c8\u6536\u5230\u4e86\u4e00\u4e2a\u597d\u6d88\u606f\uff1a\u201cAccelerate \u7684\u5e93\u975e\u5e38\u5f3a\u5927\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b83\u4eec\u7684\u754c\u9762\u5bf9 Swift \u5f00\u53d1\u4eba\u5458\u6765\u8bf4\u5e76\u4e0d\u662f\u90a3\u4e48\u53cb\u597d\u3002\u6211\u4eec\u7814\u7a76\u4e86\u56db\u4e2a\u5e93\u5e76\u521b\u5efa\u4e86\u65b0\u7684 Swift \u53cb\u597d\u7684 API\uff0c\u4f7f\u5728 Swift \u9879\u76ee\u4e2d\u4f7f\u7528 Accelerate \u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u3002\u8bf7\u8bbf\u95ee\u6211\u4eec\u7684\u7f51\u7ad9\uff0c\u6211\u4eec\u63d0\u4f9b\u6db5\u76d6\u6574\u4e2a Accelerate \u6846\u67b6\u7684\u793a\u4f8b\u3001\u6587\u7ae0\u548c\u5927\u91cf\u53c2\u8003\u8d44\u6599\u3002\u201d\u4ed6\u4eec\u4eca\u5e74\u518d\u6b21\u51fa\u73b0\uff0c\u5c3d\u7ba1\u8fd9\u6b21\u7b80\u77ed\u7684\u4ecb\u7ecd\u4e3b\u8981\u9488\u5bf9\u90a3\u4e9b\u4f7f\u7528 C++ \u7684\u4eba\u3002\u6240\u4ee5\u6211\u9996\u5148\u5f00\u59cb\u63a2\u7d22\u6587\u6863\uff0c\u5c31\u50cf\u4efb\u4f55\u4eba\u4e00\u6837\u3002\u4ece\u4e00\u4e9b\u5f15\u4eba\u5165\u80dc\u7684\u4f18\u79c0\u4ecb\u7ecd\u6027\u6587\u7ae0\u4e2d\uff0c\u6211\u51b3\u5b9a\u66f4\u8be6\u7ec6\u5730\u7814\u7a76\u51e0\u4e2a\u51fd\u6570\uff0c\u5305\u62ec\u4e00\u4e2a\u8ba1\u7b97\u4e24\u4e2a\u77ed\u5411\u91cf\u7684\u70b9\u79ef\u7684\u51fd\u6570\u3002\u5728\u4f60\u60ca\u6050\u5730\u4e3e\u8d77\u53cc\u624b\u5e76\u70b9\u51fb\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u4e1c\u897f\u4e4b\u524d\uff0c\u8ba9\u6211\u89e3\u91ca\u4e00\u4e0b\uff0c\u8fd9\u53ea\u4e0d\u8fc7\u662f\u57fa\u672c\u7684\u7b97\u672f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6709\u4e24\u4e2a\u957f\u5ea6\u4e3a 4 \u7684\u5411\u91cf\uff0c\u5176\u4e2d\u5305\u542b\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u8981\u8ba1\u7b97\u5b83\u4eec\u7684\u70b9\u79ef\uff0c\u60a8\u53ea\u9700\u5c06\u56db\u5bf9\u5bf9\u5e94\u7684\u6570\u5b57\uff08\u6bcf\u4e2a\u5411\u91cf\u4e2d\u7684\u4e00\u4e2a\uff09\u76f8\u4e58\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u4e58\u79ef\u76f8\u52a0\u5230\u4e00\u5171\u3002\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u4e4f\u5473\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u666e\u904d\u7684\u8981\u6c42\uff0c\u5e76\u4e14\u975e\u5e38\u9002\u5408\u5e76\u884c\u5904\u7406\u3002\n\u56e0\u6b64\uff0c\u6211\u6253\u5f00\u4e86 Xcode \u7684\u6587\u6863\uff0c\u627e\u5230\u4e86 simd \u90e8\u5206\uff0c\u5e76\u9009\u62e9\u4e86\u6211\u611f\u5174\u8da3\u7684\u6570\u636e\u7c7b\u578b\uff0cSingle-Precision Floating-Point Vectors\uff0c\u8fd9\u5c31\u662f\u6211\u6240\u770b\u5230\u7684\u3002\u6211\u5f88\u9ad8\u5174\u5730\u62a5\u544a\uff0c\u5f53\u524d\u7684 Xcode \u6d4b\u8bd5\u7248\u786e\u5b9e\u5bf9\u6b64\u8fdb\u884c\u4e86\u6982\u8ff0\uff0c\u5c3d\u7ba1\u8fd9\u66f4\u4ee4\u4eba\u56f0\u60d1\uff0c\u56e0\u4e3a\u5b83\u6307\u51fa\u8bb8\u591a\u529f\u80fd\u4ee5\u4e09\u79cd\u53d8\u4f53\u63d0\u4f9b\uff1a\u9ed8\u8ba4\u53d8\u4f53\u3001\u7cbe\u786e\u53d8\u4f53\u548c\u5feb\u901f\u53d8\u4f53.\u7136\u540e\u5b83\u5c31\u505c\u6b62\u4e86\uff0c\u6839\u672c\u6ca1\u6709\u5217\u51fa\u6216\u8be6\u7ec6\u8bf4\u660e\u4efb\u4f55\u529f\u80fd\u3002\u4e5f\u8bb8\uff0c\u6709\u65f6\u4f1a\u53d1\u751f\uff0c\u51fd\u6570\u5217\u8868\u5728\u6587\u6863\u7684\u5176\u4ed6\u5730\u65b9\u3002\u6240\u4ee5\u6211\u641c\u7d22\u4e86\u81f3\u5c11\u51fa\u73b0\u5728\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u7684\u70b9\u5411\u91cf\u8c03\u7528\u3002\u4f46\u662f Xcode \u7684\u6587\u6863\u62a5\u544a\u6ca1\u6709\u7ed3\u679c\u3002\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u8f93\u5165\u4e00\u4e9b\u4ee3\u7801\u5e76\u4f7f\u7528 Xcode \u7684\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\u548c\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u6765\u53d1\u73b0\u54ea\u4e9b\u51fd\u6570\u77e5\u9053\u3002\u8fd9\u5f88\u4e4f\u5473\uff0c\u4f46\u73b0\u5728\u5f88\u591a\u65f6\u5019\u8ba9\u6211\u6446\u8131\u56f0\u5883\u3002\u76f8\u53cd\uff0c\u6211\u8f6c\u5411\u4e86\u51fa\u8272\u7684\u7b2c\u4e09\u65b9\u4ea7\u54c1 Dash\uff0c\u51e0\u5e74\u524d\u82f9\u679c\u516c\u53f8\u60ca\u4eba\u5730\u5c06\u5176\u8e22\u51fa\u4e86\u5176 App Store\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u5b83\u592a\u6709\u7528\u4e86\u3002 Dash\u4e5f\u4e0d\u4f8b\u5916\uff0c\u5b83\u7684\u641c\u7d22\u4e5f\u662f\u4e00\u7247\u7a7a\u767d\u3002\u6240\u4ee5\u6211\u771f\u7684\u5728\u60f3\u8c61\u8fd9\u4e00\u5207\u3002\u5c31\u5728\u90a3\u65f6\uff0c\u6211\u56de\u53bb\u91cd\u8bfb\u4e86\u5176\u4e2d\u4e00\u4f4d\u5de5\u7a0b\u5e08\u7684\u8bdd\uff0c\u4ed6\u63d0\u5230\u201c\u8bf7\u8bbf\u95ee\u6211\u4eec\u6709\u6837\u54c1\u7684\u7f51\u7ad9\u201d\u2026\u2026\u6211\u5728\u8fd9\u91cc\u627e\u5230\u4e86\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u8fd8\u6709\u90a3\u7bc7\u4ecb\u7ecd\u6027\u6587\u7ae0\uff0c\u8fd9\u8ba9\u6211\u627e\u5230\u4e86 Apple \u7684\u771f\u5b9e\u7684\u6587\u6863\u3002\u5ffd\u7565\u663e\u800c\u6613\u89c1\u7684\u4e8b\u5b9e\uff0c\u5373 Apple \u8ba4\u4e3a\u4f20\u9012\u7ed9\u6587\u6863\u7684\u5185\u5bb9\u5982\u6b64\u4e4b\u5c11\u4ee5\u81f3\u4e8e\u4ee4\u4eba\u5c34\u5c2c\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u90fd\u6ca1\u6709\u88ab\u7eb3\u5165 Xcode\uff1f\u5982\u679c\u672c\u5730\u5b58\u50a8\u7a7a\u95f4\u592a\u5927\uff0c\u4e3a\u4ec0\u4e48 Xcode \u4e0d\u94fe\u63a5\u5230\u8fd9\u4e9b\u5728\u7ebf\u9875\u9762\uff1f\n\u5728\u6700\u8fd1\u7684 WWDC \u4e0a\u4e13\u95e8\u9488\u5bf9 Accelerate \u53ca\u5176\u76f8\u5173\u4ea7\u54c1\uff08\u5982 simd\uff09\u8fdb\u884c\u4e86\u4e09\u573a\u4f1a\u8bae\uff0c\u5e76\u627f\u8bfa\u63d0\u4f9b\u201c\u5e7f\u6cdb\u7684\u53c2\u8003\u8d44\u6599\u201d\uff0c\u4e3a\u4ec0\u4e48 Apple \u4e0d\u4ec5\u5c06\u8fd9\u79cd\u5149\u9690\u85cf\u5728\u84b2\u5f0f\u8033\u4e0b\uff0c\u800c\u4e14\u8fd8\u9690\u85cf\u4e86\u84b2\u5f0f\u8033\uff1f Posted in Macs, Technology and tagged Accelerate, Apple, ARM, developer, documentation, SIMD, Xcode\u3002\u4e3a\u6c38\u4e45\u94fe\u63a5\u6dfb\u52a0\u4e66\u7b7e\u3002", "note_en": "Last week I\u2019ve been trying to get to grips with two techniques of making apps go faster on Apple\u2019s new M1 chips: using parallel processing from assembly language, and with features in Apple\u2019s rich and extensive Accelerate libraries. Neither has been straightforward, largely because of documentation.\n Arm provides copious documentation on features of its processor designs which include detailed accounts of their instruction sets and architecture, often running to thousands of pages in PDFs of 50 MB and more. The big snag with these, other than their sheer volume, is that they are generic across each processor architecture, and none is specific to the cores which Apple has built into its M1 chip.\n So finding out exactly what works and what doesn\u2019t is a journey of exploration. Fascinating though it is, it also takes time, a great deal of browsing of PDFs, and experimentation. If you don\u2019t believe me, then read  Apple\u2019s terse article and please tell me exactly which of Arm\u2019s reference manuals apply to the cores in the M1. Even Apple shies away from that, providing a link to the top level of Arm\u2019s developer site.\n For the vast majority of developers, trying to access the M1 directly is a non-starter, so they look to Apple to facilitate that; in the case of many numeric and related features, those are included in the Accelerate and related libraries. In recent years, Apple has been going out of its way to explain these extensive collections, largely engineered by its Vector &amp; Numerics team.\n Members of that team spoke at WWDC in 2018, saying: \u201cAccelerate is easy to use. Most of the time it\u2019s just one function call and the job is done.\u201d The following year they had additional good news: \u201cAccelerate\u2019s libraries are immensely powerful but up until now, their interfaces weren\u2019t that friendly to Swift developers. We\u2019ve looked at four libraries and created new Swift-friendly APIs to make using Accelerate in Swift projects really easy. Please visit our site where we have samples, articles, and extensive reference material that covers the entire Accelerate framework.\u201d They appeared again this year, although their shorter presentation was primarily aimed this time at those using C++.\n So I first set off to explore the documentation, as anyone would. From some excellent introductory articles, which whetted my appetite, I decided to look in more detail at several functions, including one which calculates the dot-product of two short vectors. Before you throw your hands up in horror and click on to something more understandable, let me explain that this is little more than basic arithmetic.\n For example, if you have two vectors of length 4, containing single-precision floating-point numbers, to calculate their dot-product all you do is multiply the four corresponding pairs of numbers, one from each vector, and add those products together to a total. This may seem dull stuff, but it\u2019s a commonplace requirement, and is highly amenable to processing in parallel.\n I therefore opened Xcode\u2019s documentation, found the simd section, and selected the data type I was interested in, Single-Precision Floating-Point Vectors, and this is what I saw.\n  I\u2019m pleased to report that the current beta version of Xcode does expand on this with an overview, although that is more confusing still as it states that many functions are provided in three variants, the default, a precise variant, and a fast variant. Then it stops dead without listing or detailing any functions at all.\n Maybe, as sometimes happens, the function listing was elsewhere in the documentation. So I searched for the dot-vector call which at least appears in an example. But Xcode\u2019s documentation reported No Results.\n  At this stage, one approach is to type in some code and use Xcode\u2019s autocomplete feature with the letters of the alphabet in order to discover which functions that knows about. It\u2019s tedious, but has got me out of a hole on many occasions now. Instead, I turned to that excellent third-party product Dash, which Apple amazingly kicked out of its App Store a couple of years ago, presumably because it was far too useful.\n  Dash was no different, and its search also drew a blank. So I really was imagining all this after all.\n It was then that I went back and re-read the words of one of those engineers, when he referred to \u201cPlease visit our site where we have samples\u201d \u2026 I found this site  here, and that  introductory article, which led me to Apple\u2019s real documentation.\n  Overlooking the obvious, that what Apple thinks passes for documentation is so minimal as to be embarrassing, why has none of this been incorporated into Xcode? If it\u2019s too expansive to store locally, why doesn\u2019t Xcode link to these online pages?\n Having devoted three sessions in recent WWDCs to Accelerate and its relatives like simd, and promised \u201cextensive reference material\u201d, why is Apple not just hiding this light under a bushel, but hiding the bushel too?\n  Posted in  Macs,  Technology and tagged  Accelerate,  Apple,  ARM,  developer,  documentation,  SIMD,  Xcode. Bookmark the  permalink.", "posttime": "2021-08-08 19:53:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u52a0\u901f\u5668,accelerator,apple", "title": "\u52a0\u901f\u5668\u5728\u54ea\u91cc\uff1f", "title_en": "Where\u2019s the Accelerator?", "transed": 1, "url": "https://eclecticlight.co/2021/08/08/last-week-on-my-mac-wheres-the-accelerator/", "via": "", "real_tags": ["\u52a0\u901f\u5668", "apple"]}, {"category": "", "categoryclass": "", "imagename": "c1edfab45795f1bcfc233ed37254796b.png", "infoid": 1072099, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u975e\u5e38\u611f\u8c22\u4ece Docker \u6620\u50cf\u4e2d\u8bbf\u95ee Nexus \u6216 GitHub \u5b58\u50a8\u5e93\u7b49\u79c1\u6709\u8d44\u6e90\uff0c\u5e76\u4e14\u4e0d\u6cc4\u9732\u4efb\u4f55\u4e0e\u5b89\u5168\u76f8\u5173\u7684\u4fe1\u606f\u3002\u9996\u5148\uff0c\u6211\u4eec\u7edd\u4e0d\u4f1a\u76f4\u63a5\u5728 Dockerfile \u4e2d\u5305\u542b\u51ed\u636e\u6216\u4efb\u4f55\u5176\u4ed6\u5b89\u5168\u4fe1\u606f\u3002\u5176\u6b21\uff0c\u53ef\u4ee5\u521b\u5efa\u591a\u9636\u6bb5\u00b9\u6784\u5efa\u5e76\u4ece\u4efb\u4f55\u79c1\u4eba\u4fe1\u606f\u4e2d\u6e05\u9664\u6700\u7ec8\u56fe\u50cf\u548c\u56fe\u5c42\u3002\u7136\u800c\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u8c01\u5728\u5f00\u53d1\u3002\u6700\u540e\uff0c\u6211\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u53ef\u4ee5\u4f9d\u9760\u4f7f\u7528\u53c2\u6570\u2014\u2014ARG\u2014\u2014\u5e76\u5728 docker build\u00b2 \u547d\u4ee4\u4e2d\u4f20\u9012\u4fe1\u606f\u3002\u7136\u800c\uff0c\u4ec5\u6b64\u800c\u5df2\uff0c\u56fe\u50cf\u5c42\u4e2d\u7684\u79d8\u5bc6\u4fe1\u606f\u53ef\u7528\u3002\u63a5\u4e0b\u6765\u6211\u5c06\u5c55\u793a\u4e00\u4e2a\u4f8b\u5b50\u3002\u4ece ubuntu ARG USERNAME ARG PASSWORD RUN apt-get update &amp;&amp; \\ apt-get upgrade &amp;&amp; \\ apt-get install -y curl RUN curl -o nginx_policy.yaml -u $USERNAME:$PASSWORD http://nexus:8081/repository/ raw/policy/nginx-policy.yaml docker build -t secret:args --build-arg USERNAME=$user --build-arg PASSWORD=$pass \u3002\u5c06\u6784\u5efa\u4e0a\u4e0b\u6587\u53d1\u9001\u5230 Docker \u5b88\u62a4\u8fdb\u7a0b 3.072kB \u6b65\u9aa4 1/5\uff1a\u4ece ubuntu ---&gt; c29284518f49 \u6b65\u9aa4 2/5\uff1aARG \u7528\u6237\u540d ---&gt; \u4f7f\u7528\u7f13\u5b58 ---&gt; 720c9732f5db \u6b65\u9aa4 3/5\uff1aARG \u5bc6\u7801 ---&gt; \u4f7f\u7528\u7f13\u5b58 ---&gt; 193f8044461b \u7b2c 4/5 \u6b65\uff1a\u8fd0\u884c apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get install -y curl ---&gt; \u4f7f\u7528\u7f13\u5b58 ---&gt; 894b791e5ec3 \u7b2c 5/5 \u6b65\uff1a\u8fd0\u884c curl -o nginx_policy .yaml -u $USERNAME:$PASSWORD http://172.17.0.2:8081/repository/raw/policy/nginx-policy.yaml ---&gt; Using cache ---&gt; e4050d5c1743 \u6210\u529f\u6784\u5efa e4050d5c1743 \u6210\u529f\u6807\u8bb0 secret:args I\u5728 build-arg \u9009\u9879\u4e2d\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u6765\u4e0d\u5b58\u50a8\u51ed\u636e\u64cd\u4f5c\u7cfb\u7edf\u5386\u53f2\u8bb0\u5f55\u3002\u6b64\u5916\uff0c\u5728\u56fe\u50cf\u4e2d\uff0c\u6211\u6ca1\u6709\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4fdd\u5b58\u5728\u4efb\u4f55\u5730\u65b9\u3002\n\u5f53\u60a8\u9488\u5bf9\u6b64\u56fe\u50cf\u8fd0\u884c docker history \u547d\u4ee4\u65f6\uff0c\u4f1a\u51fa\u73b0\u8fd9\u79cd\u65b9\u6cd5\u7684\u95ee\u9898\uff1a \u279c docker history secret:args_env IMAGE CREATED CREATED BY SIZE COMMENT f11cb0b139f3 2 \u5206\u949f\u524d |2 PASSWORD=admin123 USERNAME=admin /bin/sh ... 0B 6ca5f3fc074a |2 PASSWORD=admin123 USERNAME=admin /bin/sh \u2026 0B 193f8044461b 43 \u5206\u949f\u524d /bin/sh -c #(nop) ARG \u5bc6\u7801 0B 720c9732f5db 43 \u5206\u949f\u524d /bin/sh -c #(nop) ARG USERNAME284f51b\u51e0\u5929\u524d /bin/sh -c #(nop) CMD [&quot;bash&quot;] 0B &lt;missing&gt; 3 \u5929\u524d /bin/sh -c #(nop) ADD file:5c3d9d2597e01d1ce... 72.8MB \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u51ed\u636e\u5b58\u50a8\u5728\u56fe\u50cf\u7684\u5143\u6570\u636e\u4e2d\u3002\u5c3d\u7ba1\u6211\u4eec\u5c3d\u4e86\u6700\u5927\u7684\u52aa\u529b\uff0c\u6211\u4eec\u4ecd\u7136\u5728\u6cc4\u9732\u673a\u5bc6\u4fe1\u606f\u3002 Buildkit\u00b3 \u4e0e Docker \u7cbe\u786e\u96c6\u6210\u2074\uff0c\u4ee5\u5e2e\u52a9\u6211\u4eec\u4fdd\u6301\u5b89\u5168\u3002\u81ea 18.06 \u7248\u672c\u4ee5\u6765\uff0cBuildkit \u51fa\u73b0\u5728 Docker \u4e2d\uff0c\u76ee\u524d\u4ec5\u652f\u6301 Linux \u5bb9\u5668\u3002\u8981\u542f\u7528 Buildkit \u6784\u5efa\uff0c\u8bf7\u5728\u8c03\u7528 docker build \u547d\u4ee4\u65f6\u8bbe\u7f6e DOCKER_BUILDKIT=1 \u73af\u5883\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a docker build \u7684\u65b0 --secret \u6807\u5fd7\u5141\u8bb8\u7528\u6237\u4f20\u9012\u8981\u5728 Dockerfile \u4e2d\u4f7f\u7528\u7684\u673a\u5bc6\u4fe1\u606f\uff0c\u4ee5\u5728\u4e00\u4e2a\u4e0d\u4f1a\u6700\u7ec8\u5b58\u50a8\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u7684\u5b89\u5168\u65b9\u5f0f\u3002\u8981\u4f7f\u7528\u6b64\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u8986\u76d6 Dockerfile \u4e2d\u7684\u9ed8\u8ba4\u524d\u7aef\u2076\u3002\u5728 Dockerfile \u7684\u7b2c\u4e00\u884c\u8f93\u5165\uff1a RUN \u547d\u4ee4\u4e2d\u6dfb\u52a0\u4e86 --mount \u6807\u5fd7\uff0c\u4ee5\u5141\u8bb8\u6784\u5efa\u5bb9\u5668\u8bbf\u95ee\u5b89\u5168\u6587\u4ef6\uff0c\u4f8b\u5982\u79c1\u94a5\uff0c\u800c\u65e0\u9700\u5c06\u5b83\u4eec\u70d8\u7119\u5230\u6620\u50cf\u4e2d\u3002\n\u5e76\u4e14\u4f7f\u7528\u6307\u5b9a\u4f7f\u7528 BuildKit \u524d\u7aef docker/dockerfile:1.2 \u7684 Dockerfile\uff0c\u5728\u6267\u884c RUN \u65f6\u53ef\u4ee5\u8bbf\u95ee\u673a\u5bc6\uff1a\u6b64 Dockerfile \u4ec5\u7528\u4e8e\u8bc1\u660e\u53ef\u4ee5\u8bbf\u95ee\u673a\u5bc6\u3002\u5982\u60a8\u6240\u89c1\uff0c\u6784\u5efa\u8f93\u51fa\u4e2d\u6253\u5370\u7684\u79d8\u5bc6\u3002\u6700\u7ec8\u6784\u5efa\u7684\u955c\u50cf\u5c06\u6ca1\u6709\u79d8\u5bc6\u6587\u4ef6\uff1a $ DOCKER_BUILDKIT=1 docker build --no-cache --progress=plain -t secret:buildkit --secret id=mysecret,src=mysecret.txt \u3002 5c65425f6fc0d6c65a5ddd6784812097b4eff778b9bcbf39bc708aacbad59abd\uff031\u8f6c\u79fbdockerfile\uff1a\u4eceDockerfile\uff031 SHA256\uff031 [\u5185\u90e8]\u8d1f\u8f7d\u751f\u6210\u5b9a\u4e49196B\u5b8c\u6210\uff031 DONE 0.0S\uff032\u5185\u90e8]\u8d1f\u8f7d.dockerignore\uff032 SHA256\uff1a35c8e51716823a06d8dbd04a2594a31a90f3d02bb55a0b8c3e9f2c1b44f901c7\uff032\u4f20\u9001\u4e0a\u4e0b\u6587\uff1a2B\u5b8c\u6210\uff032 DONE\u5bf9\u4e8edocker.io/docker/dockerfile:1.2\uff033 SHA256 0.0S\uff033\u89e3\u6790\u56fe\u50cf\u914d\u7f6e\uff1ab239a20f31d7f1e5744984df3d652780f1a82c37554dd73e1ad47c8eb05b0d69\uff033 DONE 2.5S\uff034\u642c\u8fd0\u5de5\u56fe\u50cf\uff1a//docker.io/docker/dockerfile\uff1a1.2@sha256\uff1ae2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc\uff034 SHA256\uff1a37e0c519b0431ef5446f4dd0a4588ba695f961e9b0e800cd8c7f5ba6165af727\uff034\u51b3\u5fc3docker.io/docker/dockerfile:1.2@sha256:e2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc\u5b8c\u6210\uff034\uff03CACHED 5\u5185\u90e8]\u8d1f\u8f7d\u5143\u6570\u636edocker.io/library/alpine:latest\uff035 SHA256\uff1ad4fb25f5b5c00defc20ce26f2efc4e288de8834ed5aa59dff877b495ba88fda6\uff035 DONE 0.0S #6 [1/2] \u6765\u81ea docker.io/library/alpine #6 SHA256\uff1a665ba8b2cdc0cb0200e2a42a6b3c0f8f684089f4cd1b81494fbb9805879120f7\uff036\uff03CACHED 7 [2/2] RUN --mount =\u7c7b\u578b=\u79d8\u5bc6\uff0cID = mysecret\u732b/\u8fd0\u884c/\u79d8\u5bc6/ mysecret\uff037 SHA256\uff1a75601a522ebe80ada66dedd9dd86772ca932d30d7e1b11bba94c04aa55c237de\uff037 0.494 SUPER_SECRET_PASSWORD\uff037 DONE 0.5\u79d2\uff038\u5bfc\u51fa\u5230\u56fe\u50cf\uff038 SHA256\uff1ae8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00\uff038\u5c42\u5bfc\u51fa0.0S\u505a\u8fc7\uff038\u523b\u5199\u7684\u56fe\u50cfSHA256\uff1a8df0fe20ceab547858702c32456d962b99d66fd40ab29f4e191ac0b52e383039\u505a\u8fc7\uff038 DONE 0.0S $\u642c\u8fd0\u5de5\u5386\u53f2\u79d8\u5bc6\uff1abuildkit\u7684\u5f62\u8c61\u521b\u9020\u7684\u521bSIZE\u6761\u8bc4\u8bba7da5afe4875316\u79d2\u524dRUN / bin / sh\u7684-c\u732b/run/secrets/mysecret # b... 0B buildkit.dockerfile.v0 &lt;missing&gt; 4 \u5468\u524d /bin/sh -c #(nop) CMD [&quot;/bin/sh&quot;] 0B &lt;missing&gt; 4 \u5468\u524d /bin/ sh -c #(nop) ADD file:f278386b0cef68136... 5.6MB \u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u2077\u6765\u4f20\u9012\u79d8\u5bc6\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u79d8\u5bc6\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a\u672c\u6587\u89e3\u91ca\u4e86\u4f7f\u7528\u53d7\u9650\u4fe1\u606f\u6240\u9700\u7684\u6b65\u9aa4\u5728 Docker \u5bb9\u5668\u4e2d\u66f4\u5b89\u5168\u3002\u901a\u8fc7\u5728\u201cdocker build\u201d\u4e4b\u524d\u8bbe\u7f6e\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u5e76\u5728 Dockerfile \u4e2d\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\uff0c\u60a8\u53ef\u4ee5\u9632\u6b62\u7528\u4e8e\u914d\u7f6e Docker \u5bb9\u5668\u7684\u51ed\u636e\u6cc4\u9732\u3002\nDocker Buildkit \u4e0d\u4ec5\u652f\u6301\u79d8\u5bc6\uff0c\u8fd8\u652f\u6301\u5176\u4ed6\u6784\u5efa\u6302\u8f7d\u2078\uff0c\u4f8b\u5982\u7f13\u5b58\u548c ssh\u3002\u5f00\u59cb\u6216\u7ee7\u7eed\u63a2\u7d22 Buildkit \u5e76\u4e86\u89e3\u5b83\u5982\u4f55\u5e2e\u52a9\u60a8\u63d0\u9ad8\u73af\u5883\u7684\u5b89\u5168\u6027\u3002", "note_en": "Accessing private resources like a Nexus or a GitHub repository from within a Docker image and not leaking any security-related information it\u2019s greatly appreciated.\n Firstly, we will never include credentials or any other secure information directly in the Dockerfile.\n Secondly, one can create a multi-stage\u00b9 build and clear the final image and layers from any private information. However, this is not a straightforward solution and heavily depends on who is developing.\n Finally, some of us can rely on using arguments \u2014  ARG\u2014 and pass the information in the  docker build\u00b2 command. However, this alone leaves the secret information available in the image layers. I will show an example of it next.\n   FROM ubuntu ARG USERNAME ARG PASSWORD RUN apt-get update &amp;&amp; \\ apt-get upgrade &amp;&amp; \\ apt-get install -y curl RUN curl -o nginx_policy.yaml -u $USERNAME:$PASSWORD http://nexus:8081/repository/raw/policy/nginx-policy.yaml\n  docker build -t secret:args --build-arg USERNAME=$user --build-arg PASSWORD=$pass . Sending build context to Docker daemon 3.072kB Step 1/5 : FROM ubuntu  ---&gt; c29284518f49 Step 2/5 : ARG USERNAME  ---&gt; Using cache  ---&gt; 720c9732f5db Step 3/5 : ARG PASSWORD  ---&gt; Using cache  ---&gt; 193f8044461b Step 4/5 : RUN apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get install -y curl  ---&gt; Using cache  ---&gt; 894b791e5ec3 Step 5/5 : RUN curl -o nginx_policy.yaml -u $USERNAME:$PASSWORD  http://172.17.0.2:8081/repository/raw/policy/nginx-policy.yaml  ---&gt; Using cache  ---&gt; e4050d5c1743 Successfully built e4050d5c1743 Successfully tagged secret:args\n I use environment variables in the  build-arg option to not store the credentials operating system history. Also, in the image, I am not saving this information anywhere.\n The issue with this approach appears when you run  docker history command against this image:\n \u279c docker history secret:args_env  IMAGE CREATED CREATED BY SIZE COMMENT f11cb0b139f3 2 minutes ago |2 PASSWORD=admin123 USERNAME=admin /bin/sh \u2026 0B  6ca5f3fc074a 2 minutes ago |2 PASSWORD=admin123 USERNAME=admin /bin/sh \u2026 0B  193f8044461b 43 minutes ago /bin/sh -c #(nop) ARG PASSWORD 0B  720c9732f5db 43 minutes ago /bin/sh -c #(nop) ARG USERNAME 0B  c29284518f49 3 days ago /bin/sh -c #(nop) CMD [&#34;bash&#34;] 0B  &lt;missing&gt; 3 days ago /bin/sh -c #(nop) ADD file:5c3d9d2597e01d1ce\u2026 72.8MB\n Clearly, we can see that the credentials are stored in the metadata of the image. Despite our best efforts, we are still leaking confidential information. Buildkit\u00b3 was integrated\u2074 with Docker precisely to help us to stay secure.\n  Buildkit is present in Docker since the 18.06 release and currently only supports Linux containers. To enable Buildkit builds, set the  DOCKER_BUILDKIT=1 environment variable when invoking the docker build command, such as:\n     The new  --secret flag for docker build allows the user to pass secret information to be used in the Dockerfile for building docker images in a safe way that will not end up stored in the final image.\n To use this feature we need to override the default frontend\u2076 in our Dockerfile. In the very first line of the Dockerfile enter:\n  A  --mount flag was added to the  RUN command to allow the build container to access secure files such as private keys without baking them into the image.\n     And with a Dockerfile that specifies the use of a BuildKit frontend  docker/dockerfile:1.2, the secret can be accessed when performing a  RUN:\n  This Dockerfile is only to demonstrate that the secret can be accessed. As you can see the secret printed in the build output. The final image built will not have the secret file:\n $ DOCKER_BUILDKIT=1 docker build --no-cache --progress=plain -t secret:buildkit --secret id=mysecret,src=mysecret.txt . #1 [internal] load build definition from Dockerfile #1 sha256:5c65425f6fc0d6c65a5ddd6784812097b4eff778b9bcbf39bc708aacbad59abd #1 transferring dockerfile: 196B done #1 DONE 0.0s #2 [internal] load .dockerignore #2 sha256:35c8e51716823a06d8dbd04a2594a31a90f3d02bb55a0b8c3e9f2c1b44f901c7 #2 transferring context: 2B done #2 DONE 0.0s #3 resolve image config for docker.io/docker/dockerfile:1.2 #3 sha256:b239a20f31d7f1e5744984df3d652780f1a82c37554dd73e1ad47c8eb05b0d69 #3 DONE 2.5s #4 docker-image://docker.io/docker/dockerfile:1.2@sha256:e2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc #4 sha256:37e0c519b0431ef5446f4dd0a4588ba695f961e9b0e800cd8c7f5ba6165af727 #4 resolve docker.io/docker/dockerfile:1.2@sha256:e2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc done #4 CACHED #5 [internal] load metadata for docker.io/library/alpine:latest #5 sha256:d4fb25f5b5c00defc20ce26f2efc4e288de8834ed5aa59dff877b495ba88fda6 #5 DONE 0.0s #6 [1/2] FROM docker.io/library/alpine #6 sha256:665ba8b2cdc0cb0200e2a42a6b3c0f8f684089f4cd1b81494fbb9805879120f7 #6 CACHED #7 [2/2] RUN --mount=type=secret,id=mysecret cat /run/secrets/mysecret #7 sha256:75601a522ebe80ada66dedd9dd86772ca932d30d7e1b11bba94c04aa55c237de #7 0.494 SUPER_SECRET_PASSWORD#7 DONE 0.5s #8 exporting to image #8 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00 #8 exporting layers 0.0s done #8 writing image sha256:8df0fe20ceab547858702c32456d962b99d66fd40ab29f4e191ac0b52e383039 done #8 DONE 0.0s\n  $ docker history secret:buildkit IMAGE CREATED CREATED BY SIZE COMMENT 7da5afe48753 16 seconds ago RUN /bin/sh -c cat /run/secrets/mysecret # b\u2026 0B buildkit.dockerfile.v0 &lt;missing&gt; 4 weeks ago /bin/sh -c #(nop) CMD [&#34;/bin/sh&#34;] 0B  &lt;missing&gt; 4 weeks ago /bin/sh -c #(nop) ADD file:f278386b0cef68136\u2026 5.6MB\n Instead of using a secret file, one can pass the secret information using an environment variable\u2077, like:\n   This article explained the steps necessary to make the use of restricted information safer within Docker containers.\n By setting one environment variable before your \u201cdocker build\u201d and a few changes in your Dockerfile, you can prevent the leaking of credentials used to configure your Docker containers.\n Docker Buildkit not only supports  secrets but also other build mounts\u2078 such as  cache and  ssh. Start or continue to explore Buildkit and understand how it can help you improve the security of your environments.", "posttime": "2021-08-08 19:52:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "docker,\u7528\u4e8e,secure", "title": "\u4f20\u9012\u7528\u4e8e\u6784\u5efa Docker \u955c\u50cf\u7684\u5b89\u5168\u4fe1\u606f", "title_en": "Pass secure information for building Docker images", "transed": 1, "url": "https://medium.com/marionete/pass-secure-information-for-building-docker-images-8adeafe08355", "via": "", "real_tags": ["docker", "\u7528\u4e8e", "secure"]}, {"category": "", "categoryclass": "", "imagename": "e10abcc3480c72cb1e1a210835b28b54.jpg", "infoid": 1072098, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u81ea\u5927\u6d41\u884c\u4e4b\u524d\u5c31\u6ca1\u6709\u8981\u6c42\u4e58\u8f66\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230\u76f8\u540c\u4e58\u8f66\u7684\u4ef7\u683c\u8981\u9ad8\u5f97\u591a\u3002\u6839\u636e\u5206\u6790\u516c\u53f8\u4e50\u5929\u6536\u96c6\u7684\u6570\u636e\uff0c2021 \u5e74 7 \u6708\u7f8e\u56fd\u7f51\u7ea6\u8f66\u7968\u4ef7\u6bd4 COVID \u9650\u5236\u751f\u6548\u4e4b\u524d\u7684 2020 \u5e74 1 \u6708\u9ad8 50%\u3002 \u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u7684\u4e00\u9879\u5206\u6790\u663e\u793a\uff0c\u4ece 2021 \u5e74\u521d\u5f00\u59cb\uff0c\u4e58\u8f66\u4ef7\u683c\u6bcf\u4e2a\u6708\u90fd\u5728\u5c0f\u5e45\u4e0a\u6da8\uff0c\u5373\u4f7f\u6709\u66f4\u591a\u4eba\u63a5\u79cd\u4e86\u75ab\u82d7\u3002\u4e00\u4efd\u5173\u4e8e\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u9ad8\u4e8e\u6b63\u5e38\u7968\u4ef7\u7684\u7c7b\u4f3c\u62a5\u544a\uff084 \u6708\u4efd\u4e58\u5ba2\u6210\u672c\u4e0a\u6da8\u4e86 40%\uff09\u4e3b\u8981\u5c06\u8fd9\u4e2a\u95ee\u9898\u5f52\u548e\u4e8e\u53f8\u673a\u77ed\u7f3a\u3002\u4f46\u73b0\u5728\uff0c\u51e0\u4e2a\u6708\u540e\uff0c\u4f18\u6b65\u9996\u5e2d\u6267\u884c\u5b98\u8fbe\u62c9\u00b7\u79d1\u65af\u7f57\u8428\u897f\uff08Dara Khosrowshahi\uff09\u5728\u5176\u516c\u53f8 7 \u6708\u7684\u8d22\u62a5\u7535\u8bdd\u4f1a\u8bae\u4e0a\u8868\u793a\uff0c\u4e0e 6 \u6708\u4efd\u76f8\u6bd4\uff0c7 \u6708\u4efd\u4f18\u6b65\u7684\u53f8\u673a\u589e\u52a0\u4e86 30%\u3002\u5728\u53e6\u4e00\u6b21\u8d22\u62a5\u7535\u8bdd\u4f1a\u8bae\u4e2d\uff0cLyft \u9ad8\u7ba1\u8868\u793a\uff0c\u8fd9\u5bb6\u603b\u90e8\u4f4d\u4e8e\u65e7\u91d1\u5c71\u7684\u516c\u53f8\u770b\u5230\u4e86\u540c\u6837\u7684\u8d8b\u52bf\uff0c\u4e0e 6 \u6708\u4efd\u76f8\u6bd4\uff0c7 \u6708\u4efd\u7684\u53f8\u673a\u4eba\u6570\u66f4\u591a\u3002\u8fd9\u4e0d\u591f\u3002\u5bf9\u4e58\u8f66\u7684\u9700\u6c42\u4e00\u76f4\u8d85\u8fc7\u53ef\u4f9b\u4e58\u8f66\u7684\u53f8\u673a\u7684\u4f9b\u5e94\u3002\u7968\u4ef7\u4ecd\u5728\u4e0a\u6da8\uff0c\u56e0\u4e3a\u53f8\u673a\u4eec\u4ecd\u7136\u72b9\u8c6b\u662f\u5426\u8981\u6062\u590d\u62fc\u8f66\u3002\u60c5\u51b5\u53ef\u80fd\u9010\u6708\u6539\u5584\uff0c\u4f46\u8fd8\u6ca1\u6709\u56de\u5230\u5927\u6d41\u884c\u524d\u7684\u6c34\u5e73\uff0c\u56e0\u6b64\u4e58\u5ba2\u5c06\u7ee7\u7eed\u652f\u4ed8\u66f4\u591a\u8d39\u7528\uff0c\u56e0\u4e3a Uber \u548c Lyft \u63d0\u4f9b\u4e86\u7528\u6237\u6240\u89c1\u8fc7\u7684\u6700\u9ad8\u8d39\u7387\u3002\u53f8\u673a\u4e0d\u53ea\u662f\u5750\u5728\u5bb6\u91cc\u7b49\u5f85\u5927\u6d41\u884c\u7ed3\u675f\u3002\u8bb8\u591a\u4eba\u5df2\u7ecf\u8df3\u69fd\u5230\u5916\u5356\uff0c\u5c24\u5176\u662f\u5728 Uber Eats \u7684 Uber \u5e73\u53f0\u4e0a\u3002\u5373\u4f7f\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u5f00\u59cb\u79bb\u5f00\u5bb6\u53bb\u9910\u9986\u548c\u9152\u5427\uff0c\u9001\u9910\u4e5f\u7ee7\u7eed\u4fdd\u6301\u826f\u597d\u72b6\u6001\u3002\u7ecf\u8fc7\u6570\u6708\u7684\u9650\u5236\uff0c\u4eba\u4eec\u5df2\u7ecf\u4e60\u60ef\u4e86\u5c06\u98df\u7269\u76f4\u63a5\u9001\u5230\u4ed6\u4eec\u5bb6\u95e8\u53e3\u3002 Khosrowshahi \u8bf4\uff0c\u968f\u7740\u4f20\u67d3\u6027\u75c5\u6bd2\u7684\u4f20\u64ad\uff0c\u51fa\u4e8e\u201c\u5b89\u5168\u8003\u8651\u201d\uff0c\u5927\u591a\u6570\u524d\u4f18\u6b65\u53f8\u673a\u90fd\u6ca1\u6709\u56de\u6765\u5f00\u8f66\u3002\u4f46\u662f\u5728\u540e\u5ea7\u4e0a\u6709\u6c49\u5821\u548c\u85af\u6761\u800c\u4e0d\u662f\u547c\u5438\uff0c\u6d3b\u7740\u7684\u987e\u5ba2\u611f\u89c9\u98ce\u9669\u8f83\u5c0f\u3002\u4f18\u6b65\u9996\u5e2d\u6267\u884c\u5b98\u8fd8\u6307\u51fa\uff0c\u5bf9\u4e8e Eats \u53f8\u673a\u6765\u8bf4\uff0c\u80cc\u666f\u8c03\u67e5\u66f4\u5feb\u3001\u66f4\u7b80\u5355\uff0c\u56e0\u6b64\u4e0e\u4f20\u7edf\u53f8\u673a\u76f8\u6bd4\uff0c\u5728\u5e73\u53f0\u4e0a\u66f4\u5bb9\u6613\u83b7\u5f97\u65b0\u7684\u5feb\u9012\u5458\u3002\n\u5728\u5927\u6d41\u884c\u7684\u7b2c\u4e00\u90e8\u5206\u957f\u65f6\u95f4\u5e73\u9759\u4e4b\u540e\uff1a\u8f66\u624b\u4eec\u53c8\u56de\u6765\u4e86\u3002\u5728\u5468\u4e09\u7684\u7535\u8bdd\u4f1a\u8bae\u4e0a\uff0c\u79d1\u65af\u7f57\u8428\u897f\u8868\u793a\uff0c\u8bb8\u591a\u7f8e\u56fd\u57ce\u5e02\u90fd\u6062\u590d\u4e86\u201c\u6b63\u5e38\u201d\u7684\u4e58\u8f66\u8bf7\u6c42\u6c34\u5e73\uff0c\u4e58\u5ba2\u6570\u91cf\u5728\u5927\u6d41\u884c\u524d\uff0c\u4f8b\u5982\u8fc8\u963f\u5bc6\u3001\u4e9a\u7279\u5170\u5927\u3001\u8fbe\u62c9\u65af\u3001\u4f11\u65af\u987f\u548c\u51e4\u51f0\u57ce\u3002\u4f46\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7684\u53f8\u673a\uff0c\u4ef7\u683c\u548c\u7b49\u5f85\u65f6\u95f4\u5c06\u7ee7\u7eed\u6500\u5347\u3002 Khosrowshahi \u786e\u5b9e\u6307\u51fa\uff0c\u968f\u7740\u75ab\u82d7\u63a5\u79cd\u7387\u7684\u4e0a\u5347\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u524d\u4f18\u6b65\u53f8\u673a\u91cd\u8fd4\u5de5\u4f5c\u5c97\u4f4d\u3002\u4f18\u6b65\u4e0d\u4f1a\u8981\u6c42\u5176\u53f8\u673a\u63a5\u79cd\u75ab\u82d7\uff0c\u4f46\u53f8\u673a\u548c\u4e58\u5ba2\u5fc5\u987b\u7ee7\u7eed\u6234\u53e3\u7f69\u3002", "note_en": "If you haven&#39;t requested a ride since before the pandemic, you&#39;ll notice much higher prices for the same rides. Based on data collected by analytics firm Rakuten, U.S. ride-hailing fares were 50 percent higher in July 2021 than they were in Jan. 2020, before COVID restrictions went into effect.\n A   Wall Street Journal  analysis shows that ride prices from the beginning of 2021 have been inching up each month, even as  more people are vaccinated. A similar report on higher-than-usual fares from earlier in the year (passenger costs were  up 40 percent in April) mostly blamed the issue on a driver shortage.\n But now, a few months later, Uber CEO Dara Khosrowshahi said during his company&#39;s July earnings call that there was a 30 percent increase of drivers on Uber in July compared to June. In a separate earnings call, Lyft execs said the San Francisco-based company saw  the same trend, with more drivers in July compared to June. It&#39;s not enough.\n Demand for rides keeps outpacing the supply of drivers available to give rides. Fares are still going up because drivers are still hesitant to return to ride-sharing. Things may be improving month over month, but it&#39;s not back to pre-pandemic levels, so passengers will keep paying more as Uber and Lyft offer the highest rates users have ever seen.\n Drivers aren&#39;t just sitting at home waiting for the pandemic to end. Many have jumped ship to food delivery, especially on the Uber platform with Uber Eats. Food delivery continues to do well even as more people start to leave the house to restaurants and bars. After months of restrictions, people got accustomed to food being brought right to their door.\n Khosrowshahi said the majority of former Uber drivers haven&#39;t come back to drive people because of &#34;safety concerns&#34; as the contagious virus spreads. But with a burger and fries in the backseat instead of a breathing, living customer it feels less risky.\n The Uber CEO also noted that background checks are faster and simpler for Eats drivers, so it&#39;s easier to get new couriers on the platform compared to traditional drivers.\n After long lull during the first part of the pandemic: riders are coming back. During Wednesday&#39;s call, Khosrowshahi said many American cities are back to &#34;normal&#34; ride request levels with pre-pandemic passenger numbers, like in Miami, Atlanta, Dallas, Houston, and Phoenix. But without enough drivers, prices and wait times will continue to climb.\n  Khosrowshahi did note that as vaccination rates go up, ex-Uber drivers are coming back to work more and more. Uber will  not be requiring its drivers to be vaccinated, but drivers and passengers have to  continue to mask up.", "posttime": "2021-08-08 19:08:23", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u53d1\u73b0,lyft,\u53f8\u673a", "title": "\u62a5\u544a\u53d1\u73b0\u4f18\u6b65\u3001Lyft \u7684\u4ef7\u683c\u4e0d\u65ad\u6500\u5347\u81f3\u65b0\u9ad8", "title_en": "Uber, Lyft prices keep climbing to new highs, report finds", "transed": 1, "url": "https://mashable.com/article/lyft-uber-ride-hailing-prices-record-high", "via": "", "real_tags": ["\u53d1\u73b0", "lyft", "\u53f8\u673a"]}, {"category": "", "categoryclass": "", "imagename": "bedd093666e27d87ac5b96b117c45d1a.jpg", "infoid": 1072097, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8003\u53e4\u51b6\u91d1\u5b66\uff08\u5bf9\u53e4\u4ee3\u91d1\u5c5e\u7684\u7814\u7a76\uff09\u4e2d\uff0c\u8003\u53e4\u5b66\u5bb6\u5386\u6765\u91c7\u53d6\u81ea\u4e0a\u800c\u4e0b\u7684\u65b9\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u53d1\u73b0\u7684\u73e0\u5b9d\u3001\u5de5\u5177\u3001\u6b66\u5668\u548c\u5176\u4ed6\u6587\u7269\u5df2\u7ecf\u6210\u4e3a\u4e00\u4e2a\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u7edf\u6cbb\u96c6\u56e2\uff0c\u8be5\u96c6\u56e2\u5bf9\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u4ea7\u54c1\u65bd\u52a0\u4e86\u603b\u4f53\u63a7\u5236\u3002\u8d44\u6e90\u3002\u5728\u4e9a\u6d32\u8003\u53e4\u7814\u7a76\u7684\u4e00\u7bc7\u5f00\u653e\u83b7\u53d6\u6587\u7ae0\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\uff0c\u5728\u4ed6\u4eec\u5f00\u5c55\u5927\u90e8\u5206\u5de5\u4f5c\u7684\u4e1c\u5357\u4e9a\uff0c\u793e\u533a\u5b9e\u9645\u4e0a\u91c7\u53d6\u4e86\u81ea\u4e0b\u800c\u4e0a\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u793e\u533a\u90fd\u51b3\u5b9a\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u5b9d\u8d35\u7684\u8d44\u6e90\uff0c\u800c\u4e0d\u662f\u544a\u8bc9\u4ed6\u4eec\u8be5\u600e\u4e48\u529e\u3002\u8fd9\u7bc7\u6587\u7ae0\u91cd\u70b9\u4ecb\u7ecd\u4e86 Penn Press \u51fa\u7248\u7684\u56db\u5377\u4e13\u7740\u5957\u4ef6\u7684\u4e3b\u8981\u53d1\u73b0\u3002 \u201c\u6e90\u4e8e 19 \u4e16\u7eaa\u5bf9\u6587\u5316\u8fdb\u5316\u7684\u770b\u6cd5\u7684\u4eba\u7c7b\u53d1\u5c55\u7684\u8fdb\u6b65\u89c2\u70b9\u88ab\u4e00\u904d\u53c8\u4e00\u904d\u5730\u8bb2\u8ff0\u3002\u4f46\u662f\uff0c\u5f53\u60a8\u66f4\u4ed4\u7ec6\u3001\u66f4\u7ec6\u81f4\u5730\u89c2\u5bdf\u533a\u57df\u65f6\uff0c\u6548\u679c\u4e0d\u4f73\uff0c\u201d\u535a\u7269\u9986 Ban Chiang \u9879\u76ee\u7684\u8d1f\u8d23\u4eba\u3001\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u4eba\u7c7b\u5b66\u7cfb\u7684\u517c\u804c\u6559\u6388\u6000\u7279\u8bf4\u3002 \u201c\u6211\u4eec\u5e94\u8be5\u4ee5\u7c7b\u4f3c\u4e8e\u9057\u4f20\u5b66\u3001\u81ea\u7136\u9009\u62e9\u3001\u6587\u5316\u8fdb\u5316\u7684\u672c\u8d28\u673a\u5236\u7684\u7ec6\u7c92\u5ea6\u65b9\u5f0f\u6765\u770b\u5f85\u6587\u5316\u53d1\u5c55\u3002\u201d\u6c49\u5bc6\u5c14\u987f\u8bf4\uff0c\u867d\u7136\u8fd9\u79cd\u601d\u8def\u5e76\u4e0d\u662f\u5168\u65b0\u7684\uff0c\u4f46\u5b83\u4ee5\u524d\u4ece\u672a\u5e94\u7528\u4e8e\u4e1c\u5357\u4e9a\u3002 \u201c\u4f8b\u5982\uff0c\u5728\u6b27\u6d32\u8003\u53e4\u5b66\u548c\u5176\u4ed6\u5730\u65b9\uff0c\u8fd9\u79cd\u91cd\u65b0\u8003\u8651\u4e00\u76f4\u5728\u8fdb\u884c\uff0c\u201d\u5979\u8bf4\u3002 \u201c\u4f46\u5728\u6211\u4eec\u5de5\u4f5c\u7684\u5730\u65b9\uff0c\u65e7\u7684\u601d\u7ef4\u65b9\u5f0f\u5f80\u5f80\u5360\u4e3b\u5bfc\u5730\u4f4d\u3002\u201d Penn Today \u4e0e\u6000\u7279\u548c\u6c49\u5bc6\u5c14\u987f\u8c08\u8bba\u4e86\u4ed6\u4eec\u5e0c\u671b\u901a\u8fc7\u8fd9\u9879\u7814\u7a76\u5f15\u53d1\u7684\u8003\u53e4\u5b66\u8303\u5f0f\u8f6c\u53d8\uff0c\u4ee5\u53ca\u4ed6\u4eec\u8ba4\u4e3a\u8be5\u9886\u57df\u8d70\u5411\u4f55\u65b9\u7684\u60f3\u6cd5\u3002\u6c49\u5bc6\u5c14\u987f\uff1a\u5728\u53e4\u4ee3\u4e1c\u5357\u4e9a\u53d1\u73b0\u7684\u91d1\u5c5e\u5f80\u5f80\u662f\u94dc/\u9752\u94dc\u548c\u94c1\u3002\u9752\u94dc\u662f\u94dc\u548c\u9521\u7684\u5408\u91d1\u3002\u5728\u4e16\u754c\u5927\u90e8\u5206\u5730\u533a\uff0c\u9752\u94dc\u7684\u51fa\u73b0\u5f80\u5f80\u4e0e\u793e\u4f1a\u7b49\u7ea7\u7684\u4e0a\u5347\u5927\u81f4\u76f8\u5173\uff0c\u90e8\u5206\u5047\u8bbe\u662f\u56e0\u4e3a\u9752\u94dc\u662f\u4e00\u79cd\u7f8e\u4e3d\u800c\u575a\u786c\u7684\u91d1\u5c5e\uff0c\u53ef\u7528\u4e8e\u5236\u4f5c\u6b66\u5668\u6216\u5de5\u5177\u3002\u5728\u5927\u591a\u6570\u5730\u65b9\uff0c\u9521\u662f\u6bd4\u8f83\u5c11\u89c1\u7684\uff0c\u6240\u4ee5\u4f60\u901a\u5e38\u5fc5\u987b\u4ece\u5f88\u8fdc\u7684\u5730\u65b9\u8fdb\u53e3\u3002\u6709\u4e00\u79cd\u7406\u8bba\u8ba4\u4e3a\uff0c\u4f8b\u5982\u53e4\u4ee3\u8fd1\u4e1c\u7684\u7cbe\u82f1\u4eec\u8bd5\u56fe\u63a7\u5236\u9521\u8d38\u6613\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u79cd\u58f0\u671b\u5546\u54c1\u3002\u4f46\u4e1c\u5357\u4e9a\u662f\u4e3a\u6570\u4e0d\u591a\u7684\u94dc\u548c\u9521\u90fd\u5bb9\u6613\u83b7\u5f97\u7684\u5730\u65b9\u4e4b\u4e00\u3002\u6ca1\u6709\u4eba\u9700\u8981\u63a7\u5236\u5b83\uff1b\u6ca1\u6709\u4eba\u80fd\u591f\u63a7\u5236\u5b83\u3002\n\u767d\u8272\uff1a\u8981\u751f\u4ea7\u91d1\u5c5e\uff0c\u4f60\u5fc5\u987b\u627e\u5230\u77ff\u77f3\uff0c\u7136\u540e\u521b\u9020\u5408\u9002\u7684\u7269\u7406\u6761\u4ef6\uff0c\u8fd9\u662f\u5927\u6c14\u548c\u6e29\u5ea6\u7684\u7ed3\u5408\u3002\u5bf9\u4e8e\u9752\u94dc\uff0c\u60a8\u5fc5\u987b\u540c\u65f6\u4f7f\u7528\u9521\u548c\u94dc\uff0c\u7136\u540e\u5c06\u4e24\u79cd\u77ff\u77f3\u6309\u4e00\u5b9a\u6bd4\u4f8b\u5728\u7194\u7089\u4e2d\u6216\u5769\u57da\u4e2d\u7684\u4e24\u79cd\u91d1\u5c5e\u6df7\u5408\u3002\u6000\u7279\uff1a\u751f\u4ea7\u91d1\u5c5e\u7684\u80fd\u529b\u65e0\u7591\u662f\u4eba\u7c7b\u793e\u4f1a\u7684\u4e00\u9879\u91cd\u5927\u6280\u672f\u53d1\u5c55\u3002\u6c49\u5bc6\u5c14\u987f\uff1a\u4f60\u53ef\u4ee5\u81ea\u5df1\u5236\u4f5c\u77f3\u5668\u6216\u9505\u3002\u4f46\u662f\u521b\u9020\u4e00\u4e2a\u91d1\u5c5e\u5de5\u5177\uff0c\u4e00\u4e2a\u91d1\u5c5e\u5236\u54c1\u662f\u4e00\u4e2a\u56e2\u961f\u7684\u52aa\u529b\uff0c\u4e5f\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8fc7\u7a0b\u3002\u6000\u7279\uff1a\u590d\u6742\uff0c\u8fd8\u9700\u8981\u5927\u91cf\u7684\u77e5\u8bc6\u3001\u4e13\u4e1a\u77e5\u8bc6\u548c\u8bc0\u7a8d\u3002\u6765\u81ea\u6b27\u6d32\u80cc\u666f\u7684\u5b66\u8005\u5bf9\u6cf0\u56fd\u51b6\u91d1\u4e1a\u7684\u6700\u5927\u4e0d\u5b89\u5728\u4e8e\uff0c\u6240\u6709\u8fd9\u4e9b\u590d\u6742\u6027\u90fd\u662f\u7531\u975e\u57ce\u5e02\u3001\u975e\u6218\u4e89\u3001\u975e\u7b49\u7ea7\u793e\u4f1a\u9020\u6210\u7684\u3002\u6211\u4eec\u6587\u7ae0\u7684\u90e8\u5206\u91cd\u70b9\u662f\u63d0\u4f9b\u4e00\u4e2a\u53ef\u9760\u7684\u53cd\u9762\u53d9\u8ff0\uff0c\u8bf4\u660e\u5982\u4f55\u4e0d\u4f9d\u8d56\u81ea\u4e0a\u800c\u4e0b\u7684\u6a21\u578b\u800c\u662f\u4f7f\u7528\u8003\u53e4\u5b66\u4e2d\u672a\u5145\u5206\u5229\u7528\u7684\u7ecf\u6d4e\u6a21\u578b\u6765\u5f00\u53d1\u548c\u4ea4\u6362\u8fd9\u79cd\u91d1\u5c5e\u6280\u672f\uff0c\u8be5\u6a21\u578b\u57fa\u4e8e\u793e\u533a\u51b3\u7b56\u5173\u4e8e\u5982\u4f55\u53c2\u4e0e\u533a\u57df\u4ea4\u6d41\u7cfb\u7edf\u3002\u767d\u8272\uff1a\u5728\u6cf0\u56fd\u4e1c\u5317\u90e8\u7684\u73ed\u6e05\uff0c\u624b\u956f\u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u53d7\u6b22\u8fce\u7684\u91d1\u5c5e\u5236\u54c1\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u624b\u956f\u90fd\u662f\u7528\u9521\u9752\u94dc\u5408\u91d1\u5236\u6210\u7684\u3002\u5982\u679c\u6211\u4eec\u5411\u5357\u8d70\u51e0\u767e\u516c\u91cc\u5230\u53e6\u4e00\u4e2a\u53f2\u524d\u9057\u5740\uff0c\u624b\u956f\u5c31\u4e0d\u662f\u90a3\u4e48\u7a81\u51fa\u4e86\u3002\u90a3\u4e2a\u793e\u533a\u5e76\u6ca1\u6709\u90a3\u4e48\u4e13\u6ce8\u4e8e\u73e0\u5b9d\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u6709\u8fd9\u4e9b\u5947\u602a\u5f62\u72b6\u7684\u951b\uff0c\u6211\u5728\u5176\u4ed6\u4efb\u4f55\u7f51\u7ad9\u90fd\u6ca1\u6709\u770b\u5230\u8fc7\uff0c\u8fd9\u4e9b\u5c0f\u6868\u5f62\u72b6\u3002\u5176\u4e2d\u81f3\u5c11\u6709\u4e24\u4e2a\u4e0d\u662f\u7531\u9521\u9752\u94dc\u5236\u6210\uff0c\u800c\u662f\u7531\u94dc\u5236\u6210\u3002\u4ece\u94c5\u540c\u4f4d\u7d20\u7684\u5c11\u91cf\u8bc1\u636e\u53ef\u4ee5\u770b\u51fa\uff0c\u5317\u90e8\u7ad9\u70b9\u4ece\u8001\u631d\u83b7\u53d6\u94dc\uff0c\u5357\u90e8\u7ad9\u70b9\u4ece\u6cf0\u56fd\u4e2d\u90e8\u83b7\u53d6\u94dc\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u662f\u8fc4\u4eca\u4e3a\u6b62\u6211\u4eec\u53d1\u73b0\u7684\u6700\u9177\u3001\u6700\u91cd\u8981\u7684\u4e8b\u60c5\u4e4b\u4e00\u3002\u5728\u65e9\u671f\u9636\u6bb5\uff0c\u6751\u5e84\u8fde\u63a5\u5230\u4e0d\u540c\u7684\u91d1\u5c5e\u4f9b\u5e94\u7ebf\u3002\u4ed6\u4eec\u6b63\u5728\u4f7f\u7528\u672c\u5730\u7279\u5b9a\u7684\u6280\u672f\uff0c\u5e76\u4e14\u6b63\u5728\u5236\u9020\u672c\u5730\u7279\u5b9a\u7684\u7269\u54c1\u3002\u751f\u4ea7\u4e0d\u7edf\u4e00\u3002\u6c49\u5bc6\u5c14\u987f\uff1a\u8fd8\u6709\u8bc1\u636e\u8868\u660e\uff0c\u5f88\u591a\u8fd9\u4e9b\u5c0f\u6751\u5e84\u90fd\u5728\u5236\u9020\u81ea\u5df1\u7684\u91d1\u5c5e\u5236\u54c1\u3002\u6211\u4eec\u5728\u5927\u591a\u6570\u6751\u5e84\u90fd\u53d1\u73b0\u4e86\u5769\u57da\uff0c\u4ee5\u53ca\u94f8\u9020\u6700\u7ec8\u4ea7\u54c1\uff08\u5305\u62ec\u6a21\u5177\uff09\u7684\u5176\u4ed6\u8bc1\u636e\u3002\u4ed6\u4eec\u4e0d\u662f\u4ece\u4e00\u4e9b\u751f\u4ea7\u91d1\u5c5e\u548c\u91d1\u5c5e\u4ea7\u54c1\u7684\u5927\u578b\u4e2d\u592e\u5546\u573a\u8fdb\u53e3\u5b83\u4eec\u3002\n\u6c49\u5bc6\u5c14\u987f\uff1a\u5927\u591a\u6570\u5173\u4e8e\u53e4\u4ee3\u91d1\u5c5e\u7684\u5b9e\u9a8c\u5ba4\u5de5\u4f5c\u4ecd\u7136\u662f\u5bf9\u901a\u5e38\u4ece\u575f\u5893\u4e2d\u6316\u6398\u51fa\u6765\u7684\u677e\u6563\u7684\u91d1\u5c5e\u6587\u7269\u96c6\u5408\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u5b83\u4eec\u4fdd\u5b58\u5b8c\u597d\uff0c\u6216\u8005\u5b83\u4eec\u6070\u597d\u662f\u6316\u6398\u673a\u5141\u8bb8\u5206\u6790\u4eba\u5458\u53d6\u6837\u7684\u4e1c\u897f\u3002\u8fd9\u4e9b\u7814\u7a76\u901a\u5e38\u4e0d\u4f1a\u5bf9\u6240\u6709\u5de5\u4ef6\u7c7b\u578b\u3001\u65f6\u671f\u548c\u4e0a\u4e0b\u6587\u8fdb\u884c\u91c7\u6837\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ee5\u524d\u7684\u5927\u591a\u6570\u6280\u672f\u7814\u7a76\u90fd\u662f\u7cbe\u5fc3\u6311\u9009\u7684\u6837\u672c\u3002\u901a\u8fc7\u6211\u4eec\u4ece\u6240\u6709\u6316\u6398\u51fa\u7684\u91d1\u5c5e\u7269\u4f53\u4e2d\u53d6\u6837\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6709\u5173\u53e4\u4ee3\u793e\u4f1a\u4e2d\u5b58\u653e\u91d1\u5c5e\u7684\u5b8c\u6574\u8bc1\u636e\u7684\u56fe\u7247\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u65f6\u95f4\u3001\u4e0a\u4e0b\u6587\u548c\u5de5\u4ef6\u7c7b\u578b\u6765\u67e5\u770b\u7279\u5b9a\u7684\u53d8\u5316\u3002\u7edd\u5927\u591a\u6570\u8003\u53e4\u51b6\u91d1\u8c03\u67e5\u65e0\u6cd5\u53ef\u9760\u5730\u611f\u77e5\u8fd9\u79cd\u7ec6\u7c92\u5ea6\u7684\u7ec6\u8282\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5f88\u5e78\u8fd0\uff0c\u6211\u4eec\u6709\u4fdd\u5b58\u5b8c\u597d\u7684\u91d1\u5c5e\u5236\u54c1\u3002\u6000\u7279\uff1a\u9664\u6b64\u4e4b\u5916\uff0c\u5177\u6709\u4f20\u7edf\u503e\u5411\u7684\u8003\u53e4\u5b66\u5bb6\u5f80\u5f80\u6709\u4e00\u79cd\u79f0\u4e3a\u672c\u8d28\u4e3b\u4e49\u7684\u7279\u6b8a\u601d\u60f3\u7ed3\u6784\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4f1a\u6839\u636e\u793e\u4f1a\u53d8\u9769\u7684\u6e10\u8fdb\u89c2\u70b9\u7aed\u5c3d\u5168\u529b\u60f3\u51fa\u4e00\u4e2a\u8fde\u8d2f\u7684\u6545\u4e8b\u3002\u4ed6\u4eec\u4e0d\u65ad\u5bfb\u627e\u5e76\u5938\u5927\u5177\u4f53\u8bc1\u636e\u4ee5\u9002\u5e94\u8fd9\u79cd\u6e10\u8fdb\u5f0f\u6a21\u578b\u3002\u4e1c\u5357\u4e9a\u5219\u4e0d\u540c\u3002\u5b83\u63d0\u4f9b\u4e86\u81ea\u4e0b\u800c\u4e0a\u7684\u793e\u4f1a\u53d8\u9769\u548c\u793e\u533a\u5c42\u9762\u51b3\u7b56\u7684\u6770\u51fa\u8303\u4f8b\u3002\u8fd9\u662f\u4e00\u4e2a\u4ee5\u66f4\u7cbe\u7ec6\u7684\u65b9\u5f0f\u7814\u7a76\u53f2\u524d\u793e\u4f1a\u7684\u673a\u4f1a\uff0c\u4e5f\u662f\u8003\u53e4\u5b66\u5bb6\u7684\u6839\u672c\u8f6c\u53d8\u3002\u5728\u5c1d\u8bd5\u63a8\u5e7f\u8fd9\u79cd\u4e0d\u540c\u7684\u89c2\u70b9\u4ee5\u53ca\u4f7f\u7528\u91d1\u5c5e\u4f5c\u4e3a\u83b7\u5f97\u8fd9\u79cd\u89c2\u70b9\u7684\u5de5\u5177\u65b9\u9762\uff0c\u6211\u4eec\u4ecd\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\u3002\u6000\u7279\uff1a\u6211\u771f\u7684\u547c\u5401\u4e0b\u4e00\u4ee3\u6709\u524d\u9014\u7684\u4e1c\u5357\u4e9a\u8003\u53e4\u5b66\u5bb6\u8fdb\u4e00\u6b65\u6d4b\u8bd5\u3001\u586b\u5145\u548c\u53d1\u5c55\u65b0\u7684\u8303\u5f0f\u3002\u6211\u8fd8\u8ba4\u4e3a\uff0c\u4f5c\u4e3a\u8003\u53e4\u5b66\u5bb6\uff0c\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7814\u7a76\u53f2\u524d\u6cf0\u56fd\u7b49\u7ecf\u4e45\u4e0d\u8870\u7684\u53e4\u4ee3\u793e\u4f1a\uff0c\u4e3a\u66f4\u5e7f\u6cdb\u7684\u8ba8\u8bba\u505a\u51fa\u8d21\u732e\uff0c\u5373\u6211\u4eec\u5982\u4f55\u5728\u8fd9\u4e2a\u4e16\u754c\u4e0a\u751f\u6d3b\uff0c\u4ee5\u4fbf\u5728\u5730\u7403\u4e0a\u66f4\u6210\u529f\u5730\u751f\u5b58\uff0c\u6709\u5f39\u6027\uff0c\u548c\u548c\u5e73\u3002\u4e54\u4f0a\u65af\u00b7\u6000\u7279\uff08Joyce White\uff09\u662f\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u8003\u53e4\u4e0e\u4eba\u7c7b\u5b66\u535a\u7269\u9986\u4e2d\u6e44\u516c\u6cb3\u8003\u53e4\u9879\u76ee\u7684\u54a8\u8be2\u5b66\u8005\u548c\u9996\u5e2d\u7814\u7a76\u5458\uff0c\u535a\u7269\u9986 Ban Chiang \u9879\u76ee\u7684\u8d1f\u8d23\u4eba\uff0c\u4e1c\u5357\u4e9a\u8003\u53e4\u7814\u7a76\u6240\u7684\u6267\u884c\u4e3b\u4efb\uff0c\u4ee5\u53ca\u8be5\u9879\u76ee\u7684\u517c\u804c\u6559\u6388\u3002\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u827a\u672f\u4e0e\u79d1\u5b66\u5b66\u9662\u4eba\u7c7b\u5b66\u7cfb\u3002\u4f0a\u4e3d\u838e\u767d\u00b7\u6c49\u5bc6\u5c14\u987f (Elizabeth Hamilton) \u662f\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u535a\u7269\u9986 Ban Chiang \u9879\u76ee\u7684\u54a8\u8be2\u5b66\u8005\u548c\u7814\u7a76\u534f\u8c03\u5458\u3002", "note_en": "In archaeometallurgy, the study of ancient metal, archaeologists have historically taken a top-down approach, meaning that the jewelry, tools, weapons, and other artifacts they discover have come to signify a dominant ruling group that exerted overarching control over how to use such resources.\n  In an open-access article in   Archaeological Research in Asia, the researchers argue that in Southeast Asia, where they have conducted the bulk of their work, communities actually took a bottom-up approach, each deciding how to use these precious resources rather than being told what to do with them. The article highlights key findings from a  four-volume monograph suite being published by Penn Press.\n \u201cA progressive view of human development originating in 19th-century perceptions of cultural evolution gets told over and over again. But it doesn\u2019t work well when you look at areas in closer and finer detail,\u201d says White, director of the Museum\u2019s  Ban Chiang Project and an adjunct professor in Penn\u2019s  Department of Anthropology. \u201cWe should be looking at cultural development in fine-grained ways analogous to genetics, natural selection, the nitty gritty mechanisms by which cultures evolved.\u201d\n  Though this line of thinking isn\u2019t entirely new, it\u2019s never before been applied to Southeast Asia, Hamilton says. \u201cSuch a reconsideration has been taking place, for example, in European archaeology and other places,\u201d she says. \u201cBut where we work, the old ways of thinking tend to dominate.\u201d\n Penn Today spoke to White and Hamilton about the paradigm shift in archaeology they hope to spark with this research, plus thoughts on where they see the field heading.\n Hamilton: Metals found in ancient Southeast Asia tend to be copper/bronze and iron. Bronze is an alloy of copper and tin. In much of the world, the appearance of bronze tends to roughly correlate with the rise of social hierarchy, partly, it\u2019s assumed, because bronze is a beautiful, hard metal you can use for weapons or tools.\n In most places, tin is relatively rare, so you usually must import it from a long way away. There\u2019s this theory that elites, in the ancient Near East for example, were trying to control the tin trade because it\u2019s a prestige good. But Southeast Asia is one of the few places where both copper and tin are readily available. No one needs to control it; no one can control it.\n    White: For metal to be produced,  you must find the ores and then create the right physical conditions, which is a combination of atmosphere and temperature. In the case of bronze, you must do this with both tin and copper and then combine either the two ores in a furnace or the two metals in a crucible in certain proportions.\n  White: The ability to produce metals was undoubtedly a significant technological development in human societies.\n Hamilton: You can create a stone tool or a pot by yourself. But creating a metal tool, a metal artifact is a group endeavor and a complex one.\n White: Complex and also requiring a great deal of knowledge, expertise, know-how. The big discomfort scholars from a European background have with metallurgy in Thailand is that all this complexity was done by non-urban, non-warring, non-hierarchical societies. Part of the point of our article is to offer a solid counternarrative to how this metal technology could be developed and exchanged not reliant on a top-down model but using an economic model that has been way underutilized in archaeology, one based on communities making decisions about how to participate in regional exchange systems.\n    White: In northern northeast Thailand, at Ban Chiang, bracelets were by far the most popular metal object made, and almost all of them were made of a tin-bronze alloy. If we go a few hundred kilometers south to another prehistoric site, bangles weren\u2019t all that prominent. That community wasn\u2019t so focused on jewelry. Instead, they had these odd-shaped adzes, which I haven\u2019t seen from any other site, these little paddle shapes. At least two of them were made not of tin-bronze but of copper.\n Looking at a small amount of evidence from lead isotopes, we can see that the northern site is getting its copper from Laos, and the southern site is getting its copper from central Thailand. To me, this is one of the coolest and most significant things we have found so far. In very early stages, villages are linking to different metal supply lines. They\u2019re using locally specific technologies, and they\u2019re making locally specific items. Production was not uniform.\n Hamilton: There\u2019s also evidence that a lot of these small villages were manufacturing their own metal artifacts. We\u2019ve found crucibles in most villages, along with other evidence for casting final products including molds. They were not importing them from some big central emporium that was churning out metal and metal products.\n    Hamilton: Most laboratory work on ancient metals is still performed on a loose collection of metal artifacts that were commonly excavated from graves, so they\u2019re well-preserved, or they happen to be what the excavator allows the analyst to sample. Those studies often don\u2019t sample all artifact types, periods, and contexts. In other words, most previous technical studies cherry-picked their samples.\n Through our work, which sampled from entire  populations of excavated metal objects, we can get a picture of the full evidence for the place metals held in an ancient society. We can look at specific changes through time, in context, in artifact type. The vast majority of archaeometallurgical investigations cannot reliably perceive such fine-grained details. We were lucky, of course, that we had pretty well-preserved metal artifacts.\n White: Beyond that,  archaeologists of a traditional bent tend to have a particular thought structure called essentialism, which means that they do everything they can to come up with a coherent story according to a progressive view of social change. They keep looking for and exaggerate specific evidence to fit that progressive model. Southeast Asia is different. It offers an outstanding example of bottom-up social change, of community-level decision making. It\u2019s a chance to study prehistoric societies in a more granular way, and it\u2019s a fundamental shift for archaeologists. We\u2019re still early on in trying to promote this different point of view and in using metals as a vehicle to gain this perspective.\n    White: I really call on the next generation of up-and-coming Southeast Asian archaeologists to test, fill in, and develop the new paradigm further. I also think that as archaeologists, broadly, we can contribute to a larger discussion of how we all live in this world going forward, to have a more successful existence on this Earth, by studying ancient societies like those in prehistoric Thailand that were enduring, resilient, and peaceful.\n Joyce White  is a consulting scholar and principal investigator of the   Middle Mekong Archaeological Project  at the   University of Pennsylvania Museum of Archaeology and Anthropology , director of the Museum\u2019s   Ban Chiang Project ,\u00a0executive director of the Institute for Southeast Asian Archaeology, and an adjunct professor in the   Department of Anthropology  in the   School of Arts &amp; Sciences  at the   University of Pennsylvania .\n Elizabeth Hamilton is a consulting scholar and research coordinator of the   Ban Chiang Project  at the   Penn Museum .", "posttime": "2021-08-08 18:50:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91d1\u5c5e,artifacts", "title": "\u4e1c\u5357\u4e9a\u7684\u91d1\u5c5e\u6587\u7269\u6311\u6218\u957f\u671f\u5b58\u5728\u7684\u8003\u53e4\u7406\u8bba", "title_en": "Metal artifacts in Southeast Asia challenge long-held archaeological theory", "transed": 1, "url": "https://penntoday.upenn.edu/news/Penn-Museum-metal-artifacts-Thailand-challenge-archaeological-theory", "via": "", "real_tags": ["\u91d1\u5c5e", "artifacts"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072096, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f Napkin Math \u65f6\u4e8b\u901a\u8baf\u7684\u4e00\u4e2a\u7248\u672c\uff0c\u662f\u5173\u4e8e\u4f7f\u7528\u9910\u5dfe\u5f0f\u6570\u5b66\u548c\u7b2c\u4e00\u6027\u539f\u7406\u601d\u7ef4\u6765\u4f30\u8ba1\u7cfb\u7edf\u6027\u80fd\u7684\u65f6\u4e8b\u901a\u8baf\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u8ba2\u9605\u3002\u60a8\u662f\u5426\u77e5\u9053\uff0c\u5982\u679c\u60a8\u7684\u7f51\u7ad9\u4f4e\u4e8e 12kb\uff0c\u7b2c\u4e00\u9875\u7684\u52a0\u8f7d\u901f\u5ea6\u4f1a\u660e\u663e\u52a0\u5feb\uff1f\u5f53 TCP \u6b63\u5728\u9884\u70ed\uff08\u79f0\u4e3a TCP \u6162\u542f\u52a8\uff09\u65f6\uff0c\u670d\u52a1\u5668\u5728\u521d\u59cb\u5f80\u8fd4\u4e2d\u4ec5\u53d1\u9001\u51e0\u4e2a\u6570\u636e\u5305\uff08\u901a\u5e38\u4e3a 10 \u4e2a\uff09\u3002\u53d1\u9001\u5b8c\u7b2c\u4e00\u7ec4\u6570\u636e\u5305\u540e\uff0c\u9700\u8981\u7b49\u5f85\u5ba2\u6237\u7aef\u786e\u8ba4\u6536\u5230\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u5305\u3002\u4f7f\u7528 10 \u4e0e 30 \u7684\u521d\u59cb TCP \u6162\u542f\u52a8\u7a97\u53e3\uff08\u4e5f\u79f0\u4e3a\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u6216 initcwnd\uff09\u4f20\u8f93\u7ea6 15kb \u7684\u5feb\u901f\u8bf4\u660e\uff1a\u521d\u59cb\u7a97\u53e3\u8d8a\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c\u4e00\u6b21\u5f80\u8fd4\u4e2d\u4f20\u8f93\u7684\u8d8a\u591a\uff0c\u60a8\u7684\u7ad9\u70b9\u8d8a\u5feb\u5728\u521d\u59cb\u9875\u9762\u52a0\u8f7d\u65f6\u3002\u5bf9\u4e8e\u8f83\u957f\u7684\u5f80\u8fd4\u65f6\u95f4\uff08\u4f8b\u5982\u7a7f\u8d8a\u6d77\u6d0b\uff09\uff0c\u8fd9\u5c06\u5f00\u59cb\u53d8\u5f97\u5f88\u91cd\u8981\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u6258\u7ba1\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u521d\u59cb\u7a97\u53e3\u7684\u5927\u81f4\u5927\u5c0f\uff1a \u4e3a\u4e86\u751f\u6210\u8fd9\u4e2a\uff0c\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u811a\u672c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 sirupsen/initcwnd \u6765\u5206\u6790\u60a8\u81ea\u5df1\u7684\u7ad9\u70b9\u3002\u6839\u636e\u62a5\u544a\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u8c03\u6574\u9875\u9762\u5927\u5c0f\uff0c\u6216\u8c03\u6574\u670d\u52a1\u5668\u7684\u521d\u59cb\u6162\u542f\u52a8\u7a97\u53e3\u5927\u5c0f (initcwnd)\uff08\u53c2\u89c1\u6587\u7ae0\u5e95\u90e8\uff09\u3002\u8bf7\u7ee7\u7eed\u9605\u8bfb\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\uff01\u4eb2\u7231\u7684\u9910\u5dfe\u9a6c\u745f\u65af\uff0c\u592a\u4e45\u4e86\u3002\u81ea\u4e0a\u6b21\u4ee5\u6765\uff0c\u6211\u5728\u4ee4\u4eba\u60ca\u53f9\u7684 8 \u5e74\u4e4b\u540e\u79bb\u5f00\u4e86 Shopify\u3002\u4e00\u751f\u7684\u9a91\u884c\u3002\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u6211\u6b63\u5728\u901a\u8fc7\u8010\u529b\u51b2\u6d6a\uff08\u5728\u6211\u79bb\u5f00\u540e\u7684\u4e00\u5468\u8fdb\u884c 125K \u4e3a\u671f 3 \u5929\u7684\u65c5\u884c\uff09\u3001\u4f11\u95f2\u7f16\u7a0b\uff08\u5176\u4e2d\u9910\u5dfe\u7eb8\u6570\u5b66\u80af\u5b9a\u662f\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff09\u548c\u5b66\u4e60\u4e00\u4e9b\u975e\u8ba1\u7b97\u673a\u7684\u4e1c\u897f\u3002\u5728\u672c\u671f\u4e2d\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u4e86\u89e3\u5f53\u6211\u4eec\u901a\u8fc7 HTTP \u5bf9\u7f51\u7ad9\u8fdb\u884c\u521d\u59cb\u9875\u9762\u52a0\u8f7d\u65f6\uff0c\u5728\u7ebf\u8def\u4e0a\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u6b63\u5982\u6211\u5df2\u7ecf\u6697\u793a\u7684\u90a3\u6837\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5728\u4f18\u5316\u77ed\u671f\u3001\u7a81\u53d1 TCP \u4f20\u8f93\u65f6\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u795e\u5947\u7684\u5b57\u8282\u9608\u503c\u3002\u5982\u679c\u4f60\u4f4e\u4e8e\u8fd9\u4e2a\u9608\u503c\uff0c\u6216\u8005\u589e\u52a0\u5b83\uff0c\u5b83\u53ef\u80fd\u4f1a\u4f7f\u5ba2\u6237\u7aef\u514d\u4e8e\u591a\u6b21\u5f80\u8fd4\u3002\u7279\u522b\u662f\u5bf9\u4e8e\u7ecf\u5e38\u4ece\u9065\u8fdc\u7684\u5730\u65b9\uff08\u5373\u9ad8\u5f80\u8fd4\u65f6\u95f4\uff09\u8bf7\u6c42\u7684\u5177\u6709\u5355\u4e00\u4f4d\u7f6e\u7684\u7ad9\u70b9\uff0c\u4f8b\u5982\u7f8e\u56fd - &gt; \u6fb3\u5927\u5229\u4e9a\uff0c\u8fd9\u53ef\u4ee5\u4ea7\u751f\u5de8\u5927\u7684\u5dee\u5f02\u3002\u5982\u679c\u60a8\u6b63\u5728\u8fd0\u8425 SaaS \u98ce\u683c\u7684\u670d\u52a1\uff0c\u8fd9\u5f88\u53ef\u80fd\u5c31\u662f\u60a8\u6240\u5904\u7684\u60c5\u51b5\u3002\u867d\u7136\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u516c\u5171\u4e92\u8054\u7f51\u4e0a\u7684 HTTP\uff0c\u4f46 TCP \u6162\u542f\u52a8\u5bf9\u6570\u636e\u4e2d\u5fc3\u5185\u7684 RPC \u4e5f\u5f88\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u5b83\u4eec\u4e4b\u95f4\u3002\n\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u9996\u5148\u5c55\u793a\u5173\u4e8e\u6211\u4eec\u5728\u7b2c 4 \u5c42\u601d\u8003\u52a0\u8f7d\u7f51\u7ad9\u5982\u4f55\u5de5\u4f5c\u7684\u6734\u7d20\u5fc3\u7406\u6a21\u578b\u3002\u7136\u540e\u6211\u4eec\u5c06\u5bf9\u9884\u671f\u6027\u80fd\u8fdb\u884c\u9910\u5dfe\u7eb8\u6570\u5b66\u8ba1\u7b97\uff0c\u5e76\u5c06\u6211\u4eec\u8106\u5f31\u3001\u6734\u7d20\u7684\u6a21\u578b\u4e0e\u73b0\u5b9e\u9762\u5bf9\u9762\uff0c\u770b\u770b\u5b83\u662f\u5426\u7b26\u5408\u8981\u6c42.\u90a3\u4e48\u5f53\u6211\u4eec\u8bf7\u6c42\u4e00\u4e2a\u7ad9\u70b9\u65f6\uff0c\u6211\u4eec\u8ba4\u4e3a\u5728 TCP \u7ea7\u522b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u6392\u9664\u538b\u7f29\u3001DOM \u6e32\u67d3\u3001Javascript \u7b49\uff0c\u5e76\u4ec5\u9650\u4e8e\u4e0b\u8f7d HTML\u3002\u6362\u53e5\u8bdd\u8bf4\uff1a curl --http1.1 https://sirupsen.com &gt; /dev/null \uff08\u6ce8\u610f sirupsen/initcwnduses -- \u7528 curl \u538b\u7f29\u4ee5\u53cd\u6620\u73b0\u5b9e\uff09\u3002\u4e3a\u4e86\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u6709\u8da3\uff0c\u6211\u4eec\u5c06\u9009\u62e9\u4e00\u4e2a\u5728\u5730\u7406\u4e0a\u79bb\u6211\u66f4\u8fdc\u4f46\u6ca1\u6709\u8fc7\u5ea6\u4f18\u5316\u7684\u7ad9\u70b9\uff1ainformation.dk\uff0c\u4e00\u5bb6\u4e39\u9ea6\u62a5\u7eb8\u3002\u901a\u8fc7\u4ece\u4e0d\u540c\u5730\u7406\u533a\u57df\u7684\u670d\u52a1\u5668\u8fdb\u884c\u7684\u4e00\u4e9b DNS \u67e5\u627e\u5e76\u4f7f\u7528\u89c2\u5bdf\u955c\uff0c\u6211\u53ef\u4ee5\u786e\u5b9a\u5b83\u4eec\u7684\u6240\u6709 HTML \u6d41\u91cf\u59cb\u7ec8\u8def\u7531\u5230\u54e5\u672c\u54c8\u6839\u7684\u6570\u636e\u4e2d\u5fc3\u3002\u5982\u4eca\uff0c\u8bb8\u591a\u7ad9\u70b9\u90fd\u901a\u8fc7 Cloudflare POP \u8def\u7531\uff0c\u8fd9\u4e9b\u7ad9\u70b9\u9644\u8fd1\u6709\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3\uff0c\u4e3a\u4e86\u7b80\u5316\u6211\u4eec\u7684\u5206\u6790\uff0c\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002\u6211\u76ee\u524d\u5750\u5728\u9b41\u5317\u514b\u897f\u5357\u90e8\uff0c\u4f7f\u7528 LTE \u8fde\u63a5\u3002\u6211\u53ef\u4ee5\u901a\u8fc7 traceroute(1) \u786e\u5b9a\u6211\u7684\u6d41\u91cf\u6b63\u5728\u901a\u8fc7\u8def\u5f84\u8499\u7279\u5229\u5c14 -&gt; \u7ebd\u7ea6 -&gt; \u963f\u59c6\u65af\u7279\u4e39 -&gt; \u54e5\u672c\u54c8\u6839\u524d\u5f80\u54e5\u672c\u54c8\u6839\u3002\u5f80\u8fd4\u65f6\u95f4\u7ea6\u4e3a 140 \u6beb\u79d2\u3002\u5982\u679c\u6211\u4eec\u5c06\u4e0a\u8ff0\u9910\u5dfe\u7eb8\u6a21\u578b\u7684\u5f80\u8fd4\u6b21\u6570\u76f8\u52a0\uff08\u4e0d\u5305\u62ec DNS\uff09\uff0c\u6211\u4eec\u9884\u8ba1\u52a0\u8f7d\u4e39\u9ea6\u7ad9\u70b9\u9700\u8981 4 * 140 \u6beb\u79d2 = 560 \u6beb\u79d2\u3002\u56e0\u4e3a\u6211\u4f7f\u7528\u7684\u662f LTE \u8fde\u63a5\uff0c\u4f46\u6211\u6ca1\u6709\u5f97\u5230\u8fdc\u9ad8\u4e8e 15 mbit/s\uff0c\u6211\u4eec\u5fc5\u987b\u8003\u8651\u5230\u9664\u4e86 4 \u6b21\u5f80\u8fd4\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u5927\u7ea6 100 \u6beb\u79d2\u6765\u4f20\u8f93\u6570\u636e\u3002\u56e0\u6b64\uff0c\u6839\u636e\u6211\u4eec\u7684\u9910\u5dfe\u7eb8\u6570\u5b66\uff0c\u6211\u4eec\u671f\u671b\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u5927\u7ea6 660 \u6beb\u79d2\u7684\u65f6\u95f4\u5185\u4ece\u54e5\u672c\u54c8\u6839\u7684\u670d\u52a1\u5668\u4e0b\u8f7d 160kb \u7684 HTML\u3002\u7136\u800c\uff0c\u73b0\u5b9e\u8fd8\u6709\u5176\u4ed6\u8ba1\u5212\u3002\u5f53\u6211\u8fd0\u884c\u65f6 curl --http1.1 https://www.information.dk \u9700\u8981 1.3 \u79d2\uff01\u901a\u5e38\u6211\u4eec\u4f1a\u8bf4\uff0c\u5982\u679c\u9910\u5dfe\u6570\u5b66\u5728 ~10 \u500d\u4ee5\u5185\uff0c\u9910\u5dfe\u6570\u5b66\u53ef\u80fd\u4e0e\u73b0\u5b9e\u76f8\u7b26\uff0c\u4f46\u8fd9\u901a\u5e38\u662f\u6211\u4eec\u5904\u7406\u7eb3\u79d2\u548c\u5fae\u79d2\u7684\u60c5\u51b5\u3002\u672a\u5173\u95ed~ 640ms\uff01\u90a3\u4e48\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u5f53\u9910\u5dfe\u7eb8\u6570\u5b66\u548c\u73b0\u5b9e\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\u65f6\uff0c\u8fd9\u662f\u56e0\u4e3a\uff081\uff09\u4e16\u754c\u7684\u9910\u5dfe\u7eb8\u6a21\u578b\u4e0d\u6b63\u786e\uff0c\u6216\u8005\uff082\uff09\u7cfb\u7edf\u4e2d\u6709\u4f18\u5316\u7a7a\u95f4\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u6709\u70b9\u4e24\u8005\u517c\u800c\u6709\u4e4b\u3002\u8ba9\u6211\u4eec\u8ffd\u6355\u90a3 640 \u6beb\u79d2\u3002 \ud83d\udc40\n\u4e3a\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 Wireshark \u5206\u6790\u539f\u59cb\u7f51\u7edc\u6d41\u91cf\u3002 Wireshark \u5e26\u56de\u4e86\u8bb8\u591a\u56de\u5fc6\u2026\u2026\u6709\u4e9b\u559c\u6b22\uff0c\u4f46\u4e3b\u8981\u662f\u2026\u2026\u5728\u8bd5\u56fe\u627e\u51fa\u95f4\u6b47\u6027\u7f51\u7edc\u95ee\u9898\u7684\u539f\u56e0\u65f6\u611f\u5230\u6cae\u4e27\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e00\u6b21\u662f\u4e3a\u4e86\u597d\u73a9\u548c\u6e38\u620f\uff01\u6211\u4eec\u5c06\u5728 Wireshark \u4e2d\u8f93\u5165 host www.information.dk \u4ee5\u4f7f\u5176\u6355\u83b7\u5230\u7ad9\u70b9\u7684\u6d41\u91cf\u3002\u5728\u6211\u4eec\u7684\u7ec8\u7aef\u4e2d\uff0c\u6211\u4eec\u8fd0\u884c\u4e0a\u9762\u7684 curl \u547d\u4ee4\u8ba9 Wireshark \u6709\u4e00\u4e9b\u4e1c\u897f\u8981\u6355\u83b7\u3002 Wireshark \u7136\u540e\u4f1a\u7ed9\u6211\u4eec\u4e00\u4e2a\u5f88\u597d\u7684 GUI \u6765\u5e2e\u52a9\u6211\u4eec\u8ffd\u6355\u6211\u4eec\u6ca1\u6709\u8003\u8651\u7684\u5927\u7ea6\u534a\u79d2\u3002\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u4e3a\u4e86\u8ba9 Wireshark \u4e86\u89e3\u4f1a\u8bdd\u7684 TLS/SSL \u5185\u5bb9\uff0c\u5b83\u9700\u8981\u77e5\u9053\u4e0e\u670d\u52a1\u5668\u534f\u5546\u7684\u79d8\u5bc6\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u6307\u5357\uff0c\u4f46\u7b80\u800c\u8a00\u4e4b\uff0c\u60a8\u5c06 SSLKEYLOGFILE=log.log \u4f20\u9012\u7ed9 curl \u547d\u4ee4\uff0c\u7136\u540e\u5728 TLS \u914d\u7f6e\u4e2d\u7684 Wireshark \u4e2d\u6307\u5411\u8be5\u6587\u4ef6\u3002\u6211\u4eec\u770b\u5230\u4e86\u9884\u671f\u7684 TCP \u5f80\u8fd4\uff0c\u6765\u81ea\u5ba2\u6237\u7aef\u7684 SYN\uff0c\u7136\u540e\u6765\u81ea\u670d\u52a1\u5668\u7684 SYN+ACK\u3002\u5e03\u57c3\u8bfa\u3002\u4f46\u5728\u90a3\u4e4b\u540e\u5b83\u770b\u8d77\u6765\u5f88\u53ef\u7591\u3002\u6211\u4eec\u770b\u5230\u4e86 3 \u6b21 TLS/SSL \u5f80\u8fd4\uff0c\u800c\u4e0d\u662f\u4e0a\u9762\u56fe\u4e2d\u9884\u671f\u7684 2 \u6b21\uff01\u4e3a\u4e86\u786e\u4fdd\u6211\u6ca1\u6709\u8bef\u4f1a\uff0c\u6211\u518d\u6b21\u68c0\u67e5\u4e86 sirupsen.com\uff0c\u679c\u7136\uff0c\u5b83\u663e\u793a Wireshark \u4e2d\u7684\u4e24\u6b21\u5f80\u8fd4\u90fd\u7b26\u5408\u9884\u671f\uff1a\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u7814\u7a76\u4e0a\u9762\u4e3a\u4e39\u9ea6\u62a5\u7eb8\u5e26\u6ce8\u91ca\u7684 Wireshark \u8f6c\u50a8\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u95ee\u9898\u662f\uff0c\u65e0\u8bba\u51fa\u4e8e\u4f55\u79cd\u539f\u56e0\uff0c\u670d\u52a1\u5668\u5728\u4f20\u8f93\u8bc1\u4e66\uff08\u6570\u636e\u5305 9\uff09\u7684\u8fc7\u7a0b\u4e2d\u90fd\u5728\u7b49\u5f85 TCP \u786e\u8ba4\u3002\u4e3a\u4ec0\u4e48\u670d\u52a1\u5668\u5728\u4f20\u8f93\u7ea6 4398 \u5b57\u8282\u7684\u8bc1\u4e66\u540e\u7b49\u5f85\u6765\u81ea\u5ba2\u6237\u7aef\u7684 TCP ACK\uff1f\u4e3a\u4ec0\u4e48\u670d\u52a1\u5668\u4e0d\u4e00\u6b21\u53d1\u9001\u6574\u4e2a\u8bc1\u4e66\uff1f\u5728 TCP \u4e2d\uff0c\u670d\u52a1\u5668\u4f1a\u4ed4\u7ec6\u76d1\u63a7\u5b83\u5728\u4f20\u8f93\u4e2d\u7684\u6570\u636e\u5305/\u5b57\u8282\u6570\u3002\u901a\u5e38\uff0c\u6bcf\u4e2a\u6570\u636e\u5305\u662f\u5927\u7ea6 1460 \u5b57\u8282\u7684\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u3002\u670d\u52a1\u5668\u4e0d\u5fc5\u4e00\u6b21\u53d1\u9001\u5b83\u62e5\u6709\u7684\u6240\u6709\u6570\u636e\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u4e0d\u77e5\u9053\u7ba1\u9053\u5bf9\u5ba2\u6237\u7aef\u7684\u201c\u80d6\u201d\u7a0b\u5ea6\u3002\u5982\u679c\u5ba2\u6237\u7aef\u53ea\u80fd\u63a5\u6536 64 kbit/scurrent\uff0c\u90a3\u4e48\u53d1\u9001\u4f8b\u5982 100 \u4e2a\u6570\u636e\u5305\u53ef\u80fd\u4f1a\u5b8c\u5168\u963b\u585e\u7f51\u7edc\u3002\u7f51\u7edc\u5f88\u53ef\u80fd\u4f1a\u4e22\u5f03\u4e00\u4e9b\u968f\u673a\u6570\u636e\u5305\uff0c\u4e0e\u4ee5\u66f4\u53ef\u6301\u7eed\u7684\u901f\u5ea6\u4e3a\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\u5305\u76f8\u6bd4\uff0c\u8fd9\u4e9b\u6570\u636e\u5305\u7684\u8865\u507f\u901f\u5ea6\u751a\u81f3\u66f4\u6162\u3002\nTCP \u534f\u8bae\u7684\u4e00\u4e2a\u4e3b\u8981\u90e8\u5206\u662f\u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\u5c1d\u8bd5\u53d1\u9001\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u636e\u7684\u5e73\u8861\u884c\u4e3a\uff0c\u540c\u65f6\u786e\u4fdd\u670d\u52a1\u5668\u4e0d\u4f1a\u4f7f\u5230\u5ba2\u6237\u7aef\u7684\u8def\u5f84\u8fc7\u5ea6\u9971\u548c\u5e76\u4e22\u5931\u6570\u636e\u5305\u3002\u4e22\u5305\u5bf9 TCP \u4e2d\u7684\u5e26\u5bbd\u975e\u5e38\u4e0d\u5229\u3002\u670d\u52a1\u5668\u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\u53ea\u4fdd\u7559\u4e00\u5b9a\u6570\u91cf\u7684\u6570\u636e\u5305\u3002 TCP \u672f\u8bed\u4e2d\u7684\u201c\u4f20\u8f93\u4e2d\u201d\u610f\u5473\u7740\u201c\u672a\u786e\u8ba4\u201d\u7684\u6570\u636e\u5305\uff0c\u5373\u670d\u52a1\u5668\u5df2\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u4f46\u5ba2\u6237\u7aef\u5c1a\u672a\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u786e\u8ba4\u7684\u6570\u636e\u5305\u5b83\u6536\u5230\u7684\u670d\u52a1\u5668\u3002\u901a\u5e38\u5bf9\u4e8e\u6bcf\u4e2a\u6210\u529f\u786e\u8ba4\u7684\u6570\u636e\u5305\uff0c\u670d\u52a1\u5668\u7684 TCP \u5b9e\u73b0\u5c06\u51b3\u5b9a\u5c06\u5141\u8bb8\u7684\u4f20\u8f93\u4e2d\u6570\u636e\u5305\u7684\u6570\u91cf\u589e\u52a0 1\u3002\u60a8\u53ef\u80fd\u542c\u8bf4\u8fc7\u8fd9\u79cd\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u79f0\u4e3a\u201cTCP \u6162\u542f\u52a8\u201d\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6570\u636e\u5305\u5df2\u88ab\u4e22\u5f03\uff0c\u5219\u670d\u52a1\u5668\u5c06\u51b3\u5b9a\u4f20\u8f93\u4e2d\u7684\u5b57\u8282\u6570\u7565\u5c11\u3002\u5728 TCP \u8fde\u63a5\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\uff0c\u8fd9\u79cd\u821e\u8e48\u5c06\u4e0d\u77e5\u75b2\u5026\u5730\u8fdb\u884c\u3002\u5728 TCP \u672f\u8bed\u4e2d\uff0c\u6211\u4eec\u6240\u8bf4\u7684\u201c\u98de\u884c\u4e2d\u201d\u88ab\u79f0\u4e3a\u201c\u62e5\u585e\u7a97\u53e3\u201d\uff08\u6216\u7b80\u79f0 cwnd\uff09\u3002\u901a\u5e38\u5728\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\u4e22\u5931\u540e\uff0cTCP \u5b9e\u73b0\u4ece\u7b80\u5355\u7684 TCP \u6162\u542f\u52a8\u7b97\u6cd5\u5207\u6362\u5230\u66f4\u590d\u6742\u7684\u201c\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u201d\uff0c\u5176\u4e2d\u6709\u51e0\u5341\u4e2a\u3002\u4ed6\u4eec\u7684\u5de5\u4f5c\u662f\uff1a\u6839\u636e\u6211\u4eec\u5bf9\u7f51\u7edc\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u5e94\u8be5\u6709\u591a\u5c11\u6d41\u91cf\u624d\u80fd\u6700\u5927\u5316\u5e26\u5bbd\uff1f\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u56de\u8fc7\u5934\u6765\u7406\u89e3\u4e3a\u4ec0\u4e48 TLS \u63e1\u624b\u9700\u8981 3 \u6b21\u5f80\u8fd4\u800c\u4e0d\u662f 2 \u6b21\u3002\u5728\u5ba2\u6237\u7aef\u5f00\u59cb\u4e0e TLS HELLO \u7684 TLS \u63e1\u624b\u540e\uff0c\u4e39\u9ea6\u670d\u52a1\u5668\u771f\u7684\u3001\u771f\u7684\u60f3\u8981\u4f20\u8f93\u8fd9\u4e2a ~6908 \u5b57\u8282\u7684\u8bc1\u4e66\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5c3d\u7ba1\u670d\u52a1\u5668\u7684\u62e5\u585e\u7a97\u53e3\uff08\u5141\u8bb8\u98de\u884c\u4e2d\u7684\u6570\u636e\u5305\uff09\u5f53\u65f6\u53ea\u662f\u4e0d\u591f\u5927\uff0c\u65e0\u6cd5\u5bb9\u7eb3\u6574\u4e2a\u8bc1\u4e66\uff01\u6362\u53e5\u8bdd\u8bf4\uff0c\u670d\u52a1\u5668\u7684 TCP \u5b9e\u73b0\u5df2\u7ecf\u51b3\u5b9a\u5b83\u4e0d\u76f8\u4fe1\u53ef\u601c\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u4e00\u6b21\u63a5\u6536\u90a3\u4e48\u591a\u7f8e\u5473\u7684\u5b57\u8282\u2014\u2014\u6240\u4ee5\u5b83\u53d1\u9001\u4e86\u4e00\u4e2a 4398 \u5b57\u8282\u7684\u8bc1\u4e66\u3002\u5f53\u7136\uff0c63% \u7684\u8bc1\u4e66\u4e0d\u8db3\u4ee5\u7ee7\u7eed\u8fdb\u884c TLS \u63e1\u624b\u2026\u2026\u6240\u4ee5\u5ba2\u6237\u7aef\u53f9\u4e86\u53e3\u6c14\uff0c\u5c06 TCP ACK \u53d1\u9001\u56de\u670d\u52a1\u5668\uff0c\u7136\u540e\u670d\u52a1\u5668\u53d1\u9001\u8bc1\u4e66\u5269\u4f59\u7684 2510\uff0c\u4ee5\u4fbf\u5ba2\u6237\u7aef\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u5176TLShandshake \u7684\u4e00\u90e8\u5206\u3002\u5f53\u7136\uff0c\u8fd9\u4e00\u5207\u770b\u8d77\u6765\u6709\u70b9\u50bb\u2026\u2026\u9996\u5148\uff0c\u4e3a\u4ec0\u4e48\u8bc1\u4e66\u662f6908\u5b57\u8282\uff1f\uff01\u4e3a\u4e86\u6bd4\u8f83\uff0c\u6211\u7684\u7f51\u7ad9\u662f 2635\u3002\u867d\u7136\u8fd9\u5bf9\u6211\u6765\u8bf4\u4e0d\u662f\u592a\u6709\u8da3\u3002\u66f4\u6709\u8da3\u7684\u662f\u4e3a\u4ec0\u4e48\u670d\u52a1\u5668\u53ea\u53d1\u90016908\u4e2a\u5b57\u8282\uff1f\u5bf9\u4e8e\u73b0\u4ee3 Web \u670d\u52a1\u5668\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u5f88\u5c11\uff01\u5728 TCP \u4e2d\uff0c\u5728\u6211\u4eec\u5bf9\u5ba2\u6237\u7aef\u4e00\u65e0\u6240\u77e5\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5168\u65b0\u8fde\u63a5\u4e0a\u53d1\u9001\u591a\u5c11\u6570\u636e\u5305\u79f0\u4e3a\u201c\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u201d\u3002\u5728\u914d\u7f6e\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd9\u79f0\u4e3a initcwnd\u3002\u5982\u679c\u60a8\u5728\u98de\u884c\u4e2d\u7684\u6570\u636e\u5305\u4e2d\u5f15\u7528\u4e86\u4e0a\u9762\u7684\u9ec4\u8272\u56fe\u8868\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u7b2c\u4e00\u6b21\u5f80\u8fd4\u65f6\u7684\u503c\u3002\n\u73b0\u5728\uff0cLinux \u670d\u52a1\u5668\u7684\u9ed8\u8ba4\u503c\u662f 10 \u4e2a\u6570\u636e\u5305\uff0c\u6216 10 * 1460 = 14600 \u5b57\u8282\uff0c\u5176\u4e2d 1460 \u5927\u81f4\u662f\u6bcf\u4e2a\u6570\u636e\u5305\u7684\u6570\u636e\u8d1f\u8f7d\u3002\u90a3\u5c06\u7b26\u5408\u4e39\u9ea6\u62a5\u7eb8\u7684\u602a\u7269\u8bc1\u4e66\u3002\u5f88\u660e\u663e\uff0c\u8fd9\u4e0d\u662f\u4ed6\u4eec\u7684 initcwd\uff0c\u4ece\u90a3\u65f6\u8d77\u670d\u52a1\u5668\u5c31\u4e0d\u4f1a\u8010\u5fc3\u7b49\u5f85\u6211\u7684 ACK\u3002\u901a\u8fc7\u4e00\u4e9b\u6316\u6398\uff0c\u4f3c\u4e4e\u5728 Linux 3.0.0 \u4e4b\u524d initcwnd \u662f 3\uff0c\u6216 ~ 3 * 1460 = 4380 \u5b57\u8282\uff01\u5927\u81f4\u5bf9\u9f50\uff0c\u6240\u4ee5\u4e39\u9ea6\u62a5\u7eb8\u7684 initcwnd \u4f3c\u4e4e\u662f 3\u3002\u6211\u4eec\u4e0d\u786e\u5b9a\u5b83\u662f Linux\uff0c\u4f46\u6211\u4eec\u77e5\u9053 initcwnd \u662f 3\u3002\u7531\u4e8e\u98de\u884c\u4e2d\u7684\u6570\u636e\u5305\u5448\u6307\u6570\u589e\u957f\uff0c\u56e0\u6b64 initcwnd \u7684\u91cd\u8981\u6027\u6211\u4eec\u53ef\u4ee5\u5728\u524d\u51e0\u6b21\u5b9d\u8d35\u7684\u5f80\u8fd4\u4e2d\u53d1\u9001\u5f88\u591a\u6570\u636e\uff1a\u6b63\u5982\u6211\u4eec\u5728\u4ecb\u7ecd\u4e2d\u770b\u5230\u7684\uff0c\u5728 CDN \u4e2d\u5c06\u503c\u4ece\u9ed8\u8ba4\u503c\u63d0\u9ad8\u5230\u4f8b\u5982 32 (~46kb) \u662f\u5f88\u5e38\u89c1\u7684\u3002\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u60a8\u53ef\u80fd\u6b63\u5728\u4f20\u8f93\u8bb8\u591a\u5146\u5b57\u8282\u7684\u56fe\u50cf\u3002\u7b49\u5f85 TCP \u6162\u542f\u52a8\u5230\u8fd9\u4e00\u70b9\u53ef\u80fd\u9700\u8981\u51e0\u6b21\u5f80\u8fd4\u3002\u53e6\u4e00\u4e2a\u5176\u4ed6\u539f\u56e0\uff0c\u8fd9\u4e5f\u662f HTTP2/HTTP3 \u671d\u7740\u901a\u8fc7\u76f8\u540c\u8fde\u63a5\u79fb\u52a8\u66f4\u591a\u6570\u636e\u7684\u65b9\u5411\u53d1\u5c55\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u6709\u4e00\u4e2a\u201c\u70ed\u201d\u7684 TCP \u4f1a\u8bdd\u3002 \u201c\u6e29\u6696\u201d\u610f\u5473\u7740\u4f20\u8f93\u4e2d\u7684\u62e5\u585e\u7a97\u53e3/\u5b57\u8282\u5df2\u7ecf\u4ece\u6700\u521d\u88ab\u670d\u52a1\u5668\u6177\u6168\u5730\u589e\u52a0\u4e86\u3002 TCP \u6162\u542f\u52a8\u7a97\u53e3\u4e5f\u662f\u5b58\u5728\u70b9 (POP) \u6709\u7528\u7684\u90e8\u5206\u539f\u56e0\u3002\u5982\u679c\u60a8\u8fde\u63a5\u5230\u8ddd\u79bb\u60a8\u7f51\u7ad9\u524d 10 \u6beb\u79d2\u7684 POP\uff0c\u8bf7\u4e0e POP \u534f\u5546 TLS\uff0c\u5e76\u4e14 POP \u5df2\u7ecf\u4e0e 100 \u6beb\u79d2\u4e4b\u5916\u7684\u540e\u7aef\u670d\u52a1\u5668\u5efa\u7acb\u4e86\u70ed\u8fde\u63a5\u2014\u2014\u8fd9\u4f1a\u663e\u7740\u63d0\u9ad8\u6027\u80fd\uff0c\u6ca1\u6709\u5176\u4ed6\u53d8\u5316\u3002\u4ece 4 * 100ms = 400ms \u5230 3 * 10ms + 100ms = 130ms\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4e3a\u4ec0\u4e48\u6211\u4eec\u6709 3 \u6b21 TLS \u5f80\u8fd4\u800c\u4e0d\u662f\u9884\u671f\u7684 2 \u6b21\uff1a\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u5f88\u5c0f\u3002\u62e5\u585e\u7a97\u53e3\uff08\u670d\u52a1\u5668\u5141\u8bb8\u4f20\u8f93\u7684\u5b57\u8282\u6570\uff09\u540c\u6837\u9002\u7528\u4e8e\u670d\u52a1\u5668\u53d1\u56de\u7ed9\u6211\u4eec\u7684 HTTP \u6709\u6548\u8d1f\u8f7d\u3002\u5982\u679c\u5b83\u4e0d\u9002\u5408\u62e5\u585e\u7a97\u53e3\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u591a\u6b21\u5f80\u8fd4\u6765\u63a5\u6536\u6240\u6709 HTML\u3002\u5728 Wireshark \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u62c9\u51fa\u4e00\u4e2a TCP \u89c6\u56fe\uff0c\u5b83\u53ef\u4ee5\u8ba9\u6211\u4eec\u4e86\u89e3\u5b8c\u6210\u8bf7\u6c42\u9700\u8981\u591a\u5c11\u6b21\u5f80\u8fd4\uff08sirupsen/initcwnd \u5c1d\u8bd5\u7528\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7b97\u6cd5\u4e3a\u4f60\u731c\u6d4b\uff09\uff1a\n\u6211\u4eec\u770b\u5230 TCP \u5f80\u8fd4\u30013 \u6b21 TLS \u5f80\u8fd4\uff0c\u7136\u540e\u662f 5-6 \u4e2a HTTP \u5f80\u8fd4\u4ee5\u83b7\u53d6 ~160kb \u9875\u9762\uff01\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5c0f\u70b9\u90fd\u8868\u793a\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u56e0\u6b64\u60a8\u4f1a\u6ce8\u610f\u5230\u62e5\u585e\u7a97\u53e3\uff08\u5141\u8bb8\u4f20\u8f93\u7684\u5b57\u8282\u6570\uff09\u5728\u6bcf\u6b21\u5f80\u8fd4\u65f6\u5927\u81f4\u52a0\u500d\u3002\u670d\u52a1\u5668\u4e3a\u6bcf\u6b21\u6210\u529f\u7684\u5f80\u8fd4\u589e\u52a0\u7a97\u53e3\u7684\u5927\u5c0f\u3002 \u201c\u6210\u529f\u7684\u5f80\u8fd4\u201d\u662f\u6307\u6ca1\u6709\u4e22\u5305\u7684\u5f80\u8fd4\uff0c\u5728\u4e00\u4e9b\u8f83\u65b0\u7684\u7b97\u6cd5\u4e2d\uff0c\u662f\u6307\u4e0d\u9700\u8981\u592a\u591a\u65f6\u95f4\u7684\u5f80\u8fd4\u3002\u901a\u5e38\uff0c\u670d\u52a1\u5668\u5c06\u7ee7\u7eed\u4e3a\u6bcf\u6b21\u6210\u529f\u7684\u5f80\u8fd4\u5c06\u6570\u636e\u5305\u6570\u91cf\u52a0\u500d\uff08\u6bcf\u4e2a\u7ea6 1460 \u5b57\u8282\uff09\uff0c\u76f4\u5230\u53d1\u751f\u4e0d\u6210\u529f\u7684\u5f80\u8fd4\uff08\u6162\u901f\u6216\u4e22\u5931\u6570\u636e\u5305\uff09\uff0c\u6216\u8005\u4f20\u8f93\u4e2d\u7684\u5b57\u8282\u5c06\u8d85\u8fc7\u5ba2\u6237\u7aef\u7684\u63a5\u6536\u7a97\u53e3\u3002\u5f53 TCP \u4f1a\u8bdd\u5f00\u59cb\u65f6\uff0c\u5ba2\u6237\u7aef\u5c06\u901a\u544a\u5b83\u5141\u8bb8\u4f20\u8f93\u7684\u5b57\u8282\u6570\u3002\u8fd9\u901a\u5e38\u6bd4\u670d\u52a1\u5668\u613f\u610f\u7acb\u5373\u53d1\u9001\u7684\u8981\u5927\u5f97\u591a\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u521d\u59cb SYN \u5305\u4e2d\u63d0\u53d6\u5b83\uff0c\u5e76\u770b\u5230\u5b83\u5927\u7ea6\u4e3a 65kb\uff1a\u5982\u679c\u4f1a\u8bdd\u66f4\u957f\u5e76\u4e14\u6211\u4eec\u5c06\u5176\u63a8\u5411\u8be5\u7a97\u53e3\uff0c\u5ba2\u6237\u7aef\u5c06\u53d1\u9001\u4e00\u4e2a TCP \u5305\u66f4\u65b0\u63a5\u6536\u7684\u5927\u5c0f\u7a97\u6237\u3002\u6240\u4ee5\u6709\u4e24\u4e2a\u7a97\u53e3\u5728\u8d77\u4f5c\u7528\uff1a\u670d\u52a1\u5668\u7ba1\u7406\u4f20\u8f93\u4e2d\u7684\u6570\u636e\u5305\u6570\u91cf\uff1a\u62e5\u585e\u7a97\u53e3\u3002\u62e5\u585e\u7a97\u53e3\u7531\u670d\u52a1\u5668\u7684\u62e5\u585e\u7b97\u6cd5\u63a7\u5236\uff0c\u8be5\u7b97\u6cd5\u6839\u636e\u6210\u529f\u7684\u5f80\u8fd4\u6b21\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u4f46\u59cb\u7ec8\u4ee5\u5ba2\u6237\u7aef\u7684\u63a5\u6536\u7a97\u53e3\u4e3a\u4e0a\u9650\u3002\u6211\u4eec\u6765\u770b\u770b\u670d\u52a1\u5668\u6bcf\u6b21\u5f80\u8fd4\u4f20\u8f93\u7684\u6570\u636e\u5305\u6570\u91cf\uff1a HTTP \u5f80\u8fd4 5: 48 (~69kb\uff0c\u8fd9\u5728\u7406\u8bba\u4e0a\u4f1a\u8d85\u8fc7 64kb \u5f53\u524d\u63a5\u6536\u7a97\u53e3\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u6ca1\u6709\u653e\u5927\u5b83\u3002\u670d\u52a1\u5668\u53ea\u4f20\u8f93~ 64kb) \u62e5\u585e\u7a97\u53e3\u7684\u589e\u957f\u662f\u6559\u79d1\u4e66\u7684\u4e09\u6b21\u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a\u5b8c\u7f8e\u7684\u62df\u5408\uff1a\n\u6211\u4e0d\u5b8c\u5168\u786e\u5b9a\u4e3a\u4ec0\u4e48\u5b83\u9075\u5faa\u4e09\u6b21\u51fd\u6570\u3002\u6211\u9884\u8ba1 TCP \u6162\u542f\u52a8\u6bcf\u6b21\u5f80\u8fd4\u90fd\u4f1a\u52a0\u500d\u3002 \ud83e\udd37 \u636e\u6211\u6240\u77e5\uff0c\u5728\u73b0\u4ee3 TCP \u5b9e\u73b0\u4e2d\uff0c\u62e5\u585e\u7a97\u53e3\u6bcf\u6b21\u5f80\u8fd4\u90fd\u4f1a\u52a0\u500d\uff0c\u76f4\u5230\u6570\u636e\u5305\u4e22\u5931\uff08\u5c31\u50cf\u6211\u5206\u6790\u8fc7\u7684\u5927\u591a\u6570\u5176\u4ed6\u7ad9\u70b9\u4e00\u6837\uff0c\u4f8b\u5982\u4e0b\u9762\u5c4f\u5e55\u622a\u56fe\u4e2d\u7684\u4f1a\u8bdd\uff09\u3002\u5728\u90a3\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u8f6c\u5411\u4e09\u6b21\u589e\u957f\u3002\u8fd9\u53ef\u80fd\u540e\u6765\u6539\u53d8\u4e86\uff1f\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8e TCP \u5b9e\u73b0\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u5199\u4e86 sirupsen/initcwnd \u6765\u5410\u51fa windows \u7684\u5927\u5c0f\u7684\u90e8\u5206\u539f\u56e0\uff0c\u6240\u4ee5\u4f60\u4e0d\u5fc5\u505a\u4efb\u4f55\u6570\u5b66\u6216\u731c\u6d4b\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a Github \u5b58\u50a8\u5e93\uff08\u672a\u538b\u7f29\uff09\uff1a\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u89e3\u91ca\u6211\u4eec\u7684\u7b80\u5355\u5316\u4e4b\u95f4\u7684\u5dee\u5f02\u9910\u5dfe\u7eb8\u6570\u5b66\u6a21\u578b\u548c\u73b0\u5b9e\u3002\u6211\u4eec\u5047\u8bbe\u6709 2 \u6b21 TLS \u5f80\u8fd4\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709 3 \u6b21\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u7684\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u8f83\u4f4e\u3002\u6211\u4eec\u8fd8\u5047\u8bbe\u4e86 1 \u4e2a HTTProundtrip\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709 6 \u4e2a\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u7684\u62e5\u585e\u7a97\u53e3\u548c\u5ba2\u6237\u7aef\u7684\u63a5\u6536\u7a97\u53e3\u4e0d\u5141\u8bb8\u4e00\u6b21\u53d1\u9001\u6240\u6709\u5185\u5bb9\u3002\u8fd9\u4f7f\u6211\u4eec\u7684\u603b\u5f80\u8fd4\u6b21\u6570\u8fbe\u5230 1 + 3 + 6 = 10 \u6b21\u5f80\u8fd4\u3002\u6211\u4eec\u7684\u5f80\u8fd4\u65f6\u95f4\u4e3a 130 \u6beb\u79d2\uff0c\u8fd9\u4e0e\u6211\u4eec\u5728\u5e16\u5b50\u9876\u90e8\u89c2\u5bdf\u5230\u7684 1.3 \u79d2\u7684\u603b\u65f6\u95f4\u5b8c\u5168\u4e00\u81f4\uff01\u8fd9\u8868\u660e\u6211\u4eec\u65b0\u7684\u3001\u66f4\u65b0\u7684\u7cfb\u7edf\u5fc3\u667a\u6a21\u578b\u5f88\u597d\u5730\u53cd\u6620\u4e86\u73b0\u5b9e\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e00\u8d77\u5206\u6790\u4e86\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5206\u6790\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u5e76\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5bf9\u60a8\u7684\u7f51\u7ad9\u8fd0\u884c sirupsen/initcwnd \u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u5b83\u4f7f\u7528\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u6765\u731c\u6d4b\u7a97\u53e3\u53ca\u5176\u5927\u5c0f\u3002\u5b83\u4eec\u5e76\u4e0d\u603b\u662f\u6709\u6548\uff0c\u7279\u522b\u662f\u5982\u679c\u60a8\u7684\u8fde\u63a5\u901f\u5ea6\u8f83\u6162\u6216\u7f51\u7ad9\u5c06\u54cd\u5e94\u6d41\u5f0f\u4f20\u8f93\u56de\u5ba2\u6237\u7aef\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u53d1\u9001\u6240\u6709\u54cd\u5e94\u3002\u9700\u8981\u6ce8\u610f\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f Linux \u5185\u6838\uff08\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u5185\u6838\uff09\u901a\u8fc7\u8def\u7531\u7f13\u5b58\u4e0e\u5ba2\u6237\u7aef\u7f13\u5b58\u62e5\u585e\u7a97\u53e3\u5927\u5c0f\uff08\u9664\u5176\u4ed6\u5916\uff09\u3002\u8fd9\u5f88\u68d2\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u5f53\u5ba2\u6237\u7aef\u91cd\u65b0\u8fde\u63a5\u65f6\uff0c\u6211\u4eec\u4e0d\u5fc5\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u534f\u5546\u3002\u4f46\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u9488\u5bf9\u540c\u4e00\u4e2a\u7f51\u7ad9\u7684\u540e\u7eed\u8fd0\u884c\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u66f4\u5927\u7684 initcwnd\u3002\u6700\u4f4e\u7684youencounter\u5c06\u662f\u6b63\u786e\u7684\u3002\u8fd8\u8981\u6ce8\u610f\uff0c\u4e00\u4e2a\u7ad9\u70b9\u53ef\u80fd\u6709\u4e00\u4e2a\u961f\u5217\uff0c\u5176\u4e2d\u7684\u670d\u52a1\u5668\u5177\u6709\u4e0d\u540c\u7684 initcwnd \u503c\uff01\u5728\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 TCP \u7a97\u53e3\u7684\u5927\u5c0f\u3002 Github.com \u7684\u521d\u59cb\u7a97\u53e3\u662f 10 \u4e2a\u6570\u636e\u5305\uff0c\u7136\u540e\u6bcf\u6b21\u5f80\u8fd4\u589e\u52a0\u4e00\u500d\u3002\u6700\u540e\u4e00\u4e2a\u7a97\u53e3\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 80 \u4e2a\u6570\u636e\u5305\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u6ca1\u6709\u8db3\u591f\u7684\u5b57\u8282\u6570\u3002\u6709\u4e86\u8fd9\u4e2a\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u51b3\u5b9a\u5c06 initcwnd \u66f4\u6539\u4e3a\u66f4\u9ad8\u7684\u503c\uff0c\u4ee5\u5c1d\u8bd5\u5728\u66f4\u5c11\u7684\u5f80\u8fd4\u4e2d\u5c06\u5176\u53d1\u56de\u3002\u4f46\u662f\uff0c\u8fd9\u5bf9\u4e8e\u8fde\u63a5\u901f\u5ea6\u8f83\u6162\u7684\u5ba2\u6237\u7aef\u53ef\u80fd\u6709\u7f3a\u70b9\uff0c\u5e94\u8c28\u614e\u64cd\u4f5c\u3002 CDN \u5728 30 \u5e74\u4ee3\u5c31\u5177\u6709\u4ef7\u503c\uff0c\u8fd9\u786e\u5b9e\u8868\u660e\u4e86\u4e00\u4e9b\u627f\u8bfa\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u6ca1\u6709\u8db3\u591f\u7684\u6d41\u91cf\u6765\u4eb2\u81ea\u67e5\u770b\u6765\u7814\u7a76\u8fd9\u4e00\u70b9\uff0c\u5c31\u50cf\u8c37\u6b4c\u652f\u6301\u5c06\u9ed8\u8ba4\u503c\u4ece 3 \u66f4\u6539\u4e3a 10 \u65f6\u6240\u505a\u7684\u90a3\u6837\u3002\u8be5\u6587\u6863\u8fd8\u66f4\u8be6\u7ec6\u5730\u89e3\u91ca\u4e86\u6f5c\u5728\u7684\u7f3a\u70b9\u3002\n\u6700\u5b9e\u7528\u7684\u65e5\u5e38\u5916\u5356\u53ef\u80fd\u662f\u4f8b\u5982 base64 \u5185\u8054\u56fe\u50cf\u548c CSS\uff0c\u5982\u679c\u5b83\u4f7f\u60a8\u7684\u7ad9\u70b9\u8d85\u8fc7\u62e5\u585e\u7a97\u53e3\u9608\u503c\uff0c\u5219\u5b83\u53ef\u80fd\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u7f3a\u70b9\u3002\u60a8\u53ef\u4ee5\u5728 Linux \u4e0a\u4f7f\u7528 ip(1) \u547d\u4ee4\u66f4\u6539 initcwnd\uff0c\u4ece\u8fd9\u91cc\u5230\u9ed8\u8ba4\u7684 10 \u5230 32\uff1a simon@netherlands:~$ ip route showdefault via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric 10010.164.0. dhcp scope link src 10.164.0.2 metric 100simon@netherlands:~$ sudo ip route change default via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric 100 initcwnd 32 initrwnd 32 initrwnd 32 initrwnd.1032 initrwnd@10332 initrwnd@1000.10 dev ens4 proto dhcp src ens4 proto dhcp src 10.164.0.2 metric 100 initcwnd 32 initrwnd 3210.164.0.1 dev ens4 proto dhcp scope link src 10.164.0.2 metric 100 \u53e6\u4e00\u4e2a\u91cd\u8981\u7684 TCP \u8bbe\u7f6e\uff0c\u5b83\u503c\u5f97\u5728 .tcpslow \u4e4b\u540e\u5f00\u59cb\u8c03\u6574 TCP _ cpslow \u662f .tcpslow \u7684\u5f00\u59cb\u8fd9\u662f\u4e00\u4e2a\u597d\u540d\u5b57\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u8bbe\u7f6e\u4e3a 1 \u65f6\uff0c\u5b83\u4f1a\u5728\u51e0\u79d2\u949f\u6ca1\u6709\u6d3b\u52a8\uff08\u5f53\u60a8\u5728\u7f51\u7ad9\u4e0a\u9605\u8bfb\u65f6\uff09\u540e\u91cd\u65b0\u534f\u5546\u62e5\u585e\u7a97\u53e3\u3002\u60a8\u53ef\u80fd\u5e0c\u671b\u5728 /proc/sys/net/ipv4/tcp_slow_start_after_idle \u4e2d\u5c06\u5176\u8bbe\u7f6e\u4e3a 0\uff0c\u4ee5\u4fbf\u5b83\u8bb0\u4f4f\u4e0b\u4e00\u4e2a\u9875\u9762\u52a0\u8f7d\u7684\u62e5\u585e\u7a97\u53e3\u3002", "note_en": "This is an edition of the  Napkin Math newsletter,a newsletter about using napkin math and first-principle thinking toestimate the performance of systems.You can  subscribe through email.\n Did you know that if your site\u2019s under ~12kb the first page will loadsignificantly faster? Servers only send a few packets (typically 10)in the initial round-trip while TCP is warming up (referred to as TCP slowstart). After sending the first set of packets, it needs to wait forthe client to acknowledge it received all those packets.\n Quick illustration of transferring ~15kb with an initial TCP slow start window(also referred to as initial congestion window or  initcwnd) of 10 versus 30:\n  The larger the initial window, the more we can transfer in the first roundtrip,the faster your site is on the initial page load. For a large roundtrip time(e.g. across an ocean), this will start to matter a lot. Here is the approximatesize of the initial window for a number of common hosting providers:\n  To generate this, I wrote a script that you can use   sirupsen/initcwnd toanalyze your own site. Based on the report, you can attempt to tune your pagesize, or tune your server\u2019s initial slow start window size ( initcwnd) (seebottom of article). Read on, and we\u2019ll go into far more detail!\n   Dear Napkin Mathers, it\u2019s been too long. Since last, I\u2019ve left Shopify after 8amazing years. Ride of a lifetime. For the time being, I\u2019m passing the time withstandup paddleboarding (did a 125K 3-day trip the week after I left),recreational programming (of which napkin math surely is a part), and learningsome non-computer things.\n In this issue, we\u2019ll dig into the details of exactly what happens on the wirewhen we do the initial page load of a website over HTTP. As I\u2019ve already hintedat, we\u2019ll show that there\u2019s a magical byte threshold to be aware of whenoptimizing for short-lived, bursty TCP transfers. If you\u2019re under this threshold,or increase it, it\u2019ll potentially save the client from several roundtrips.Especially for sites with a single location that are often requested from faraway (i.e. high roundtrip times), e.g. US -&gt; Australia, this can make a  hugedifference. That\u2019s likely the situation you\u2019re in if you\u2019re operating aSaaS-style service. While we\u2019ll focus on HTTP over the public internet, TCP slowstart can also matter to RPC inside of your data-centre, and especially acrossthem.\n As always, we\u2019ll start by laying out our naive mental model about how we  thinkloading a site works at layer 4. Then we\u2019ll do the napkin math on expectedperformance, and confront our fragile, naive model with reality to see if itlines up.\n So what do we think happens at the TCP-level when we request a site? Forsimplicity, we will exclude compression, DOM rendering, Javascript, etc., andlimit ourselves exclusively to downloading the HTML. In other words:  curl --http1.1 https://sirupsen.com &gt; /dev/null (note that   sirupsen/initcwnduses  --compressed with  curl to reflect reality).\n    To make things a little more interesting, we\u2019ll choose a site that isgeographically further from me that isn\u2019t overly optimized:  information.dk, aDanish newspaper. Through some DNS lookups from servers in different geographiesand by using  a looking glass, I can determine that all their HTML trafficis always routed to a datacenter in Copenhagen. These days, many sites arerouted through e.g. Cloudflare POPs which will have a nearby data-centre, tosimplify our analysis, we want to make sure that\u2019s not the case.\n I\u2019m currently sitting in South-Western Quebec on an LTE connection. I candetermine  through  traceroute(1) that my traffic is travelling toCopenhagen through the path Montreal -&gt; New York -&gt; Amsterdam -&gt; Copenhagen. Round-trip time is ~140ms.\n  If we add up the number of round-trips from our napkin model above (excludingDNS), we\u2019d expect loading the Danish site would take us  4 * 140ms = 560ms.Since I\u2019m on an LTE connection where I\u2019m not getting much above 15 mbit/s, wehave to factor in that it takes another  ~100ms to transfer the data,in addition to the 4 round-trips. So with our napkin math, we\u2019re expecting thatwe should be able to download the 160kb of HTML from a server in Copenhagenwithin a ballpark of  ~660ms.\n Reality, however, has other plans. When I run time  curl --http1.1 https://www.information.dk it takes 1.3s! Normally we say that if the napkinmath is within ~10x, the napkin math is likely in line with reality, butthat\u2019s typically when we deal with nano and microseconds. Not off by~ 640ms!\n So what\u2019s going on here? When there\u2019s a discrepancy between the napkin math andreality, it\u2019s because either (1) the napkin model of the world is incorrect, or(2) there\u2019s room for optimization in the system. In this case, it\u2019s a bit ofboth. Let\u2019s hunt down those 640ms. \ud83d\udc40\n To do that, we have to analyze the raw network traffic with Wireshark. Wiresharkbrings back many memories.. some fond, but mostly\u2026 frustration trying tofigure out causes of intermittent network problems. In this case, for once it\u2019sfor fun and games! We\u2019ll type  host www.information.dk into Wireshark to makeit capture traffic to the site. In our terminal we run the  curl command abovefor Wireshark to have something to capture.\n Wireshark will then give us a nice GUI to help us hunt down the roughly half asecond we haven\u2019t accounted for. One thing to note is that in order to getWireshark to understand the TLS/SSL contents of the session it needs to know thesecret negotiated with the server. There\u2019s a complete guide  here, butin short you pass  SSLKEYLOGFILE=log.log to your  curl command and then pointto that file in Wireshark in the TLS configuration.\n   We see the TCP roundtrip as expected,  SYN from the client, then  SYN+ACK fromthe server. Bueno. But after that it looks fishy. We\u2019re seeing  3 round-tripsfor TLS/SSL instead of the expected 2 from our drawing above!\n  To make sure I wasn\u2019t misunderstanding something, I double-checked with sirupsen.com, and sure enough, it\u2019s showing the two roundtrips in Wireshark asanticipated:\n  If we carefully study the annotated Wireshark dump above for the Danishnewspaper, we can see that the problem is that for whatever reason the server iswaiting for a TCP ack in the middle of transmitting the certificate (packet 9).\n   Why is the server waiting for a TCP ACK from the client after transmitting ~4398bytes of the certificate? Why doesn\u2019t the server just send the whole certificateat once?\n  In TCP, the server carefully monitors how many packets/bytes it has in flight.Typically, each packet is ~1460 bytes of application data. The server doesn\u2019tnecessarily send  all the data it has at once, because the server doesn\u2019t knowhow \u201cfat\u201d the pipes are to the client. If the client can only receive 64 kbit/scurrently, then sending e.g. 100 packets could completely clog the network. Thenetwork most likely will drop some random packets which would be even slower tocompensate from than sending the packets at a more sustainable pace for theclient.\n A  major part of the TCP protocol is the balancing act of trying to send asmuch data as possible at any given time, while ensuring the server doesn\u2019tover-saturate the path to the client and lose packets. Losing packets is verybad for bandwidth in TCP.\n The server only keeps a certain amount of packets in flight at any given time.\u201cIn flight\u201d in TCP terms means \u201cunacknowledged\u201d packets, i.e. packets of datathe server has sent to the client that the client hasn\u2019t yet sent anacknowledgement to the server that it has received. Typically for everysuccessfully acknowledged packet the server\u2019s TCP implementation will decide toincrease the number of allowed in-flight packets by 1. You may have heard thissimple algorithm referred to as \u201cTCP slow start.\u201d On the flip-side, if a packethas been dropped then the server will decide to have slightly less bytes inflight. Throughout the existence of the TCP connection\u2019s lifetime this dancewill be tirelessly performed. In TCP terms what we\u2019ve called \u201cin-flight\u201d isreferred to as the \u201ccongestion window\u201d (or  cwnd in short-form).\n  Typically after the first packet has been lost the TCP implementation switchesfrom the simple TCP slow start algorithm to a more complicated  \u201cCongestionControl Algorithm\u201d of which there are dozens. Their job is: Based on whatwe\u2019ve observed about the network, how much should we have in flight to maximizebandwidth?\n Now we can go back and understand why the TLS handshake is taking 3 roundtripsinstead of 2. After the client\u2019s starts the TLS handshake with  TLS HELLO, theDanish server really, really wants to transfer this ~6908 byte certificate.Unfortunately though the server\u2019s congestion window (packets in flight allowed) atthe time just isn\u2019t large enough to accommodate the whole certificate!\n Put another way, the server\u2019s TCP implementation has decided it\u2019s  notconfident the poor client can receive that many tasty bytes all at once yet \u2013so it sends a petty 4398 bytes of the certificate. Of course, 63% of acertificate isn\u2019t enough to move on with the TLS handshake\u2026 so the clientsighs, sends a TCP ACK back to the server, which then sends the meager 2510 leftof the certificate so the client can move on to perform its part of the TLShandshake.\n Of course, this all seems a little silly\u2026 first of all, why is the certificate6908 bytes?! For comparison, it\u2019s 2635 for my site. Although that\u2019s not toointeresting to me. What\u2019s more interesting is why is the server only sending6908 bytes? That seems scanty for a modern web server!\n In TCP how many packets we can send on a brand new connection before we know anything about the client is called the \u201cinitial congestion window.\u201d In aconfiguration context, this is called  initcwnd. If you reference the yellowgraph above with the packets in flight, that\u2019s the value at the first roundtrip.\n These days, the default for a Linux server is 10 packets, or  10 * 1460 = 14600 bytes, where 1460 is roughly the data payload of each packet. That would\u2019ve fitthat monster certificate of the Danish newspaper. Clearly that\u2019s not their initcwd since then the server wouldn\u2019t have patiently waited for my ACK.Through some digging it appears that prior to  Linux 3.0.0  initcwnd was3, or ~ 3 * 1460 = 4380 bytes! That approximately lines up, so it seemsthat the Danish newspaper\u2019s  initcwnd is 3. We don\u2019t know for sure it\u2019s Linux,but we know the  initcwnd is 3.\n Because of the exponential growth of the packets in flight,  initcwnd mattersquite a bit for how much data we can send in those first few preciousroundtrips:\n  As we saw in the intro, it\u2019s common among CDNs to raise the values from thedefault to e.g. 32 (~46kb). This makes sense, as you might be transmittingimages of many megabytes. Waiting for TCP slow start to get to this point cantake a few roundtrips.\n Another other reasons, this is also why HTTP2/HTTP3 moved in the direction ofmoving more data through the same connection as it has an already \u201cwarm\u201d TCPsession. \u201cWarm\u201d meaning that the congestion window / bytes in flight has alreadybeen increased generously from the initial by the server.\n The TCP slow start window is also part of why points of presence (POPs) areuseful. If you connect to a POP in front of your website that\u2019s 10msaway, negotiate TLS with the POP, and the POP already has a warm connectionwith the backend server 100ms away \u2013 this improves performance dramatically,with no other changes. From  4 * 100ms = 400ms to  3 * 10ms + 100ms = 130ms.\n  Now we\u2019ve gotten to the bottom of why we have 3 TLS roundtrips rather than theexpected 2: the initial congestion window is small. The congestion window(allowed bytes in flight by the server) applies equally to the HTTP payloadthat the server sends back to us. If it doesn\u2019t fit inside the congestionwindow, then we need multiple round-trips to receive all the HTML.\n In Wireshark, we can pull up a TCP view that\u2019ll give us an idea of how manyroundtrips was required to complete the request (  sirupsen/initcwnd tries toguess this for you with an embarrassingly simple algorithm):\n  We see the TCP roundtrip, 3 TLS roundtrips, and then 5-6 HTTP roundtrips to getthe ~160kb page! Each little dot in the picture shows a packet, so you\u2019ll noticethat the congestion window (allowed bytes in flight) is roughly doubling everyroundtrip. The server is increasing the size of the window for every successfulroundtrip. A \u2018successful roundtrip\u2019 means a roundtrip that didn\u2019t drop packets, andin some  newer algorithms, a roundtrip that didn\u2019t take too much time.\n Typically, the server will continue to double the number of packets (~1460 bytes each) for each successful roundtrip until either an unsuccessful roundtrip happens (slow or dropped packets),  or the bytes in flight would exceed the  client\u2019s receive window.\n When a TCP session starts, the client will advertise how many bytes  it allows in flight. This typically is much larger than the server is wiling to send off the bat. We can pull this up in the initial  SYN package from the client and see that it\u2019s ~65kb:\n  If the session had been much longer and we pushed up against that window, the client would\u2019ve sent a TCP package updating the size of the receive window. So there\u2019s two windows at play: the server manages the number of packets in flight: the  congestion window. The congestion window is controlled by the server\u2019s  congestion algorithm which is adjusted based on the number of successful roundtrips, but always capped by the client\u2019s  receive window.\n Let\u2019s look at the amount of packets transmitted by the server in each roundtrip:\n HTTP roundtrip 5: 48 (~69kb, this in theory would have exceeded the 64kb currentreceive window since the client didn\u2019t enlarge it for some reason. The serveronly transmitted ~64kb)\n The growth of the congestion window is a  textbook cubic function, it has a perfect fit:\n  I\u2019m not entirely sure why it follows a cubic function. I expected TCP slow startto just double every roundtrip. \ud83e\udd37 As far as I can gather, on modern TCPimplementation the congestion window is doubled every roundtrip until a packetis lost (as is the case for most other sites I\u2019ve analyzed, e.g. the session inthe screenshot below). After  that we might move to a cubic growth. Thismight\u2019ve changed later on? It\u2019s completely up to the TCP implementation.\n This is part of why I wrote  sirupsen/initcwnd to spit out the size of thewindows, so you don\u2019t have to do any math or guesswork, here for a Github repo(uncompressed):\n   So now we can explain the discrepancy between our simplistic napkin math modeland reality. We assumed 2 TLS roundtrips, but in fact there was 3, because ofthe low initial congestion window by the server. We also assumed 1 HTTProundtrip, but in fact there was 6, because the server\u2019s congestion window andclient\u2019s receive window didn\u2019t allow sending everything at once. This brings ourtotal roundtrips to  1 + 3 + 6 = 10 roundtrips. With our roundtrip time at130ms, this lines up perfectly with the 1.3s total time we observed at the topof the post! This suggests our new, updated mental model of the system reflectsreality well.\n  Now that we\u2019ve analyzed this website together, you can use this to analyze yourown website and optimize it. You can do this by running  sirupsen/initcwnd against your website. It uses some very simpleheuristics to guess the windows and their size. They don\u2019t work always,especially not if you\u2019re on a slow connection or the website streams theresponse back to the client, rather than sending it all at once.\n Another thing to be aware of is that the Linux kernel (and likely other kernels)caches the congestion window size (among other things) with clients via theroute cache. This is great, because it means that we don\u2019t have to renegotiateit from scratch when a client reconnects. But it might mean that subsequent runsagainst the same website will give you a far larger  initcwnd. The lowest youencounter will be the right one. Note also that a site might have a fleet withservers that have different  initcwnd values!\n   Here we can see the size of the TCP windows. The initial window was 10 packetsfor Github.com, and then doubles every roundtrip. The last window isn\u2019t a full80 packets, because there wasn\u2019t enough bytes left from the server.\n With this result, we could decide to change the  initcwnd to a higher value totry to send it back in fewer roundtrips. This might, however, have drawbacksfor clients on slower connections and should be done with care. It does showsome promise that CDNs have values in the 30s. Unfortunately I don\u2019t have accessto enough traffic to see for myself to study this, as  Google did whenthey championed the change from a default of 3 to 10. That document alsoexplains potential drawbacks in more detail.\n The most practical day-to-day takeaway might be that e.g. base64 inlining imagesand CSS may come with serious drawbacks if it throws your site over a congestionwindow threshold.\n You can change  initcwnd with the  ip(1) command on Linux, from here to thedefault 10 to 32:\n simon@netherlands:~$ ip route showdefault via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric  10010.164.0.1 dev ens4 proto dhcp scope link src 10.164.0.2 metric  100simon@netherlands:~$ sudo ip route change default via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric  100 initcwnd  32 initrwnd  32simon@netherlands:~$ ip route showdefault via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric  100 initcwnd  32 initrwnd  3210.164.0.1 dev ens4 proto dhcp scope link src 10.164.0.2 metric  100\n Another key TCP setting it\u2019s worth tuning for TCP is tcp_slow_start_after_idle. It\u2019s a good name: by default when set to 1, it\u2019llrenegotiate the congestion window after a few seconds of no activity (while youread on the site). You probably want to set this to 0 in /proc/sys/net/ipv4/tcp_slow_start_after_idle so it remembers the congestionwindow for the next page load.", "posttime": "2021-08-08 17:50:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,\u521d\u59cb,http,\u670d\u52a1\u5668", "title": "\u901a\u8fc7\u9002\u5e94\u521d\u59cb TCP \u6162\u542f\u52a8\u7a97\u53e3\u6765\u63d0\u9ad8 HTTP \u6027\u80fd", "title_en": "Increase HTTP performance by fitting in the initial TCP slow start window", "transed": 1, "url": "https://sirupsen.com/napkin/problem-15/", "via": "", "real_tags": ["\u6027\u80fd", "\u521d\u59cb", "http", "\u670d\u52a1\u5668"]}]