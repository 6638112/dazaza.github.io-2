[{"category": "", "categoryclass": "", "imagename": "19667bfa80d03dec118342ad8ed947ac.jpg", "infoid": 1066991, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Lingokids\u4e3a\u5176\u6559\u80b2\u6bd4\u8d5b\u5e73\u53f0\u7b79\u96c6\u4e864000\u4e07\u7f8e\u5143\u7684\u8d44\u91d1\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5b83\u73b0\u5728\u4e0e\u5176\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u8fbe\u5230\u4e86\u8d85\u8fc73000\u4e07\u4e2a\u5bb6\u5ead\u3002\n \u8be5\u516c\u53f8\u9488\u5bf92-8\u540d\u513f\u7ae5\u7684\u201cPlayLearning\u201d\u5e94\u7528\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5b83\u8bd5\u56fe\u6269\u5927\u4ed6\u4eec\u7684\u8bcd\u6c47\uff0c\u63d0\u9ad8\u8bc6\u5b57\u6280\u80fd\uff0c\u5e76\u5728\u4e00\u4e2a\u6709\u8da3\u7684\u5b89\u5168\u73af\u5883\u4e2d\u5f00\u53d1\u91cd\u8981\u768421\u4e16\u7eaa\u6280\u80fd\u3002\n  Lingokids\u8fd8\u9080\u8bf7\u5bb6\u5ead\u53c2\u4e0e\u4ed6\u4eec\u7684\u5b69\u5b50\u4eec\u901a\u8fc7\u4ee4\u4eba\u5174\u594b\u7684\u6e38\u620f\u6d3b\u52a8\u6765\u53c2\u4e0e\u4ed6\u4eec\u7684\u5b69\u5b50\u4eec\u7684\u4e50\u5f92\u5b66\u4e60\u4e4b\u65c5\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u8be5\u516c\u53f8\u7684\u5e94\u7528\u7a0b\u5e8f\u6709\u8d85\u8fc7600\u540d\u5b66\u4e60\u6d3b\u52a8\u548c\u6b4c\u66f2\u3002\u8fd9\u573a\u6bd4\u8d5b\u6559\u6388\u4e00\u7cfb\u5217\u4e3b\u9898\u548c\u65e5\u5e38\u8bed\u8a00\uff0c\u4ee5\u53ca21\u4e16\u7eaa\u7684\u6280\u80fd\uff0c\u5982\u521b\u9020\u529b\uff0c\u6c9f\u901a\uff0c\u534f\u4f5c\u548c\u6279\u5224\u6027\u601d\u7ef4\u7b49\u3002\n \u8be5\u5e94\u7528\u7a0b\u5e8f\u5177\u6709\u6709\u8da3\uff0c\u72ec\u7279\u7684\u4eba\u7269\uff0c\u7531GuillermoGarc\u00eda-Cars\u00ed\uff08\u7740\u540d\u7684\u5361\u901aPocoy\u00f3\uff09\u548c\u4ed6\u7684\u56e2\u961f\u5f00\u53d1\u3002 Lingokids\u8bfe\u7a0b\u4ee5\u539f\u6765\u548c\u725b\u6d25\u5927\u5b66\u7684\u65b0\u95fb\u5185\u5bb9\u4e3a\u7279\u8272\uff0c\u7531\u516c\u53f8\u7684\u6559\u80b2\u59d4\u5458\u4f1a\u4e13\u95e8\u5236\u4f5c\uff0c\u4e0eLeapfrog\uff0cHasbro\uff0cDisney\u548cNickelode\u7b49\u516c\u53f8\u7684\u65e9\u671f\u8bed\u8a00\u5b66\u4e60\u7684\u4e13\u5bb6\u3002\n Lingokids\u5df2\u7ecf\u4ecePTPA\uff0c\u5988\u5988\u7684\u9009\u62e9\u5956\uff0c\u4ea7\u54c1\u9ed1\u5ba2\u5956\u9879\uff0ceNlighted\u548c\u6559\u80b2\u5e94\u7528\u5546\u5e97\u7b49\u65b9\u6848\u83b7\u5f97\u4e86\u8d5e\u8a89\u3002 Lingokids\u4e5f\u88abLinkedIn\u547d\u540d\u4e3a2020\u5e74\u7684\u9876\u7ea7\u521d\u521b\u516c\u53f8\u4e4b\u4e00\u3002\u8be5\u5e73\u53f0\u7531Kidsafe Seal Program\u8ba4\u8bc1\uff0c\u5e76\u63d0\u4f9b\u53ef\u5e7f\u544a\u7684\u513f\u7ae5\u5b89\u5168\u73af\u5883\u3002\n   \u4ee52016\u5e74\u63a8\u51fa\uff0c\u4ee5\u65e7\u91d1\u5c71\u4e3a\u57fa\u7840\u7684Lingokids\u521b\u5efa\u4e86\u201cPlayLearning\u201d\u5e94\u7528\u7a0b\u5e8f\uff0c\u5176\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u90fd\u5728\u897f\u73ed\u7259\u9a6c\u5fb7\u91cc\u3002 Lingokids\u81f4\u529b\u4e8e\u652f\u6301\u5b69\u5b50\u7684\u5b66\u4e60\u4e4b\u65c5\uff0c\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u7236\u6bcd\u95e8\u6237\u7f51\u7ad9\uff0c\u6bcf\u5468\u62a5\u544a\uff0c\u8bfe\u7a0b\u6982\u8ff0\uff0c\u6d3b\u52a8\u65f6\u95f4\u8868\u4ee5\u53ca\u7236\u6bcd\u65e5\u5e38\u751f\u6d3b\u7684\u54a8\u8be2\u548c\u63d0\u793a\uff0c\u6bcf\u5929\u90fd\u4f1a\u901a\u8fc7\u5176\u7236\u6bcd\u7684\u793e\u533a\u3002\n \u201c\u6211\u521a\u4ece\u51fa\u53e3\u51fa\u6765\uff0c\u6211\u7684\u59b9\u59b9\u8ba9\u6211\u5e2e\u52a9\u6211\u7684\u4f84\u5973\u5b66\u4e60\u82f1\u8bed\uff0c\u201dViedma\u8bf4\u3002 \u201c\u6211\u662f\u4e00\u4e2a\u5e26\u6709\u8ba1\u7b97\u673a\u79d1\u5b66\u80cc\u666f\u7684\u6e38\u620f\u73a9\u5bb6\u3002\u6211\u4e00\u76f4\u60f3\u5728\u6211\u751f\u547d\u4e2d\u7684\u67d0\u4e9b\u65f6\u5019\u505a\u6e38\u620f\u3002\u6240\u4ee5\u6211\u5f00\u59cb\u4e3a\u6211\u76842\u5c81\u7684\u4f84\u5973\u5efa\u7acb\u4e00\u4e9b\u6e38\u620f\u3002\u201c \nViedma\u5e0c\u671b\u8fdc\u79bb\u88ab\u52a8\u89c6\u9891\u4f53\u9a8c\u3002\u4ed6\u7684\u6e38\u620f\u5de5\u4f5c\uff0c\u6eda\u96ea\u7403\u3002\u4ed6\u7ec4\u5efa\u4e86\u4e00\u5bb6\u516c\u53f8\uff0c\u5f00\u59cb\u5236\u4f5c\u4ed6\u8ba4\u4e3a\u6709\u8da3\u7684\u6e38\u620f\u3002\u4ed6\u4eec\u6709\u771f\u6b63\u7684\u6e38\u620f\u5143\u7d20\uff0c\u7136\u540e\u6dfb\u52a0\u4e86\u751f\u6001\u5143\u7d20\u3002\u4ed6\u4eec\u73b0\u5728\u4ece\u62fc\u56fe\u5230\u65e0\u5c3d\u7684\u8dd1\u6b65\u6e38\u620f\u3002\u4eca\u5929\u6700\u5927\u7684\u5e02\u573a\u662f\u7f8e\u56fd\uff0c\u5176\u4e2d60\uff05\u7684\u5bb6\u5ead\u662f\u57fa\u4e8e\u7684\u3002\u58a8\u897f\u54e5\u548c\u5df4\u897f\u4e5f\u662f\u5927\u578b\u5e02\u573a\u3002\n \u7b2c\u4e09\u6b21\u673a\u6784\u8d44\u52a9\u8f6c\u5411\u7531\u672a\u516c\u5f00\u7684\u6295\u8d44\u8005\u9886\u5bfc\uff0c\u53c2\u4e0eGP Bullhound\u548c\u73b0\u6709\u6295\u8d44\u8005HV\u9996\u90fd\u548cRavensburger\u7b49\u3002\u8be5\u8d44\u91d1\u5c06\u7528\u4e8e\u8fdb\u4e00\u6b65\u7684\u56fd\u9645\u6269\u5f20\uff0c\u4e3a\u513f\u7ae5\u7684\u65b0\u7684\u548c\u6295\u8d44\u5f62\u5f0f\u7684\u65b0\u589e\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5168\u7403\u62db\u8058\uff0c\u7279\u522b\u662f\u5e73\u53f0\u5de5\u7a0b\u548c\u5f00\u53d1\u56e2\u961f\u3002 Lingokids\u8fc4\u4eca\u4e3a\u6b62\u7b79\u96c6\u4e866500\u4e07\u7f8e\u5143\uff0c\u8fbe\u5230\u4e862020\u5e74\u5229\u606f\uff0c\u7a0e\u6536\uff0c\u6298\u65e7\u548c\u644a\u9500\uff08EBITDA\uff09\u7684\u79ef\u6781\u6536\u76ca\u3002\n Lingokids\u7684\u9996\u5e2d\u6267\u884c\u5b98\u548c\u521b\u59cb\u4ebaCrist\u00f3balviedma\u5728\u4e00\u6b21\u91c7\u8bbf\u65f6\u8868\u793a\uff0c\u5b83\u7684\u76ee\u6807\u662f\u5e2e\u52a9\u7236\u6bcd\u548c\u770b\u62a4\u4eba\u629a\u517b\u5b69\u5b50\u5e76\u5206\u89e3\u6559\u80b2\u969c\u788d\u3002\u4ed6\u8bf4\uff0c\u8be5\u516c\u53f8\u63d0\u4f9b\u4e86\u7236\u6bcd\u53ef\u4ee5\u4fe1\u4efb\u7684\u4f18\u8d28\u6559\u80b2\u9009\u62e9\uff0c\u800c\u4e14\u8fd9\u4e9b\u66f4\u91cd\u8981\u7684\u662f\u3002\n \u5728\u5927\u6d41\u884c\u671f\u95f4\uff0c\u8d85\u8fc765\uff05\u7684\u513f\u7ae5\u5bb6\u5ead\u62a5\u544a\u4f7f\u7528\u5728\u7ebf\u5b66\u4e60\uff0c68\uff05\u7684\u7236\u6bcd\u8868\u793a\uff0c\u6839\u636e\u7f8e\u56fd\u4eba\u53e3\u666e\u67e5\uff0c\u4ed6\u4eec\u73b0\u5728\u4f9d\u8d56\u65e9\u671f\u5b66\u4e60\u5e94\u7528\u7a0b\u5e8f\u6765\u8865\u5145\u5b69\u5b50\u7684\u6559\u80b2\u3002\u4f5c\u4e3a\u6559\u80b2\u548c\u4e92\u52a8\u5185\u5bb9\u7684\u53ef\u4fe1\u8d44\u6e90\uff0cLingokids\u81ea\u5927\u6d41\u884c\u5f00\u59cb\u4ee5\u6765\u7684\u7528\u6237\u6570\u76ee\uff0c\u5e76\u51c6\u5907\u6539\u53d8\u65e9\u671f\u6559\u80b2\u5e02\u573a\u3002\n   \u901a\u8fc7\u8fd9\u9879\u65b0\u8d44\u91d1\uff0cLingokids\u5c06\u8fc5\u901f\u63d0\u9ad8\u5176\u56fd\u9645\u589e\u957f\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u5c06\u6269\u5927\u5176\u4e0e\u79d1\u5b66\u6280\u672f\u5de5\u7a0b\u548c\u6570\u5b66\uff08Stew\uff09\u76f8\u5173\u7684\u4ea7\u54c1\uff0c\u4ee5\u53ca\u8bb8\u591a\u5b69\u5b50\u5728\u8fc7\u53bb\u7684\u5b66\u5e74\u4e2d\u9519\u8fc7\u7684\u6280\u80fd\u7684\u5b66\u4e60\u5c31\u50cf\u60c5\u7eea\u667a\u529b\uff0c\u540c\u60c5\u548c\u6279\u5224\u6027\u601d\u7ef4\u3002 Lingokids\u8fd8\u5c06\u5728AudioBooks\u548c\u97f3\u9891\u7ec3\u4e60\u4e2d\u5f00\u53d1\u65b0\u7684\u97f3\u9891\u5185\u5bb9\uff0c\u4e13\u6ce8\u4e8e\u4e0e\u5fc3\u7406\u5065\u5eb7\uff0c\u8c28\u614e\u548c\u51a5\u60f3\u6709\u5173\u7684\u4e3b\u9898\u3002\n \u201c\u6211\u4eec\u6b63\u5728\u4e3a2\u516b\u5c81\u7684\u5b69\u5b50\u4eec\u505a\u65e9\u671f\u7684\u513f\u7ae5\u6559\u80b2\uff0c\u6559\u5bfc\u4ed6\u4eec\u6240\u6709\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u8bc6\u5b57\uff0c\u9605\u8bfb\uff0c\u5199\u4f5c\uff0c\u6570\u5b66\uff0c\u903b\u8f91\u548c\u7f16\u7a0b\uff0c\u201dViedma\u8bf4\u3002 \u201c\u5341\u4ebf\u4e2a\u5b69\u5b50\u6b63\u5728\u8bbf\u95ee\u6570\u5b57\u5185\u5bb9\u3002\u4f46\u867d\u7136\u884c\u4e1a\u6709\u5f88\u591a\u516c\u53f8\uff0c\u4f46\u6211\u4eec\u662f\u4e0d\u540c\u7684\u3002\u201c\n \u8be5\u516c\u53f8\u9488\u5bf9\u5bb6\u5ead\uff0c\u5ba2\u6237\u662f\u7236\u6bcd\u800c\u4e0d\u662f\u5b66\u6821\u3002\u5b83\u521b\u9020\u4e86\u521b\u9020\u4e86\u5bf9\u5b69\u5b50\u4eec\u5b09\u620f\u7684\u4e92\u52a8\u4f53\u9a8c\u7684\u539f\u521b\u5185\u5bb9\u3002\u5b83\u901a\u8fc7\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u5230\u8fbe\u90a3\u4e9b\u5b69\u5b50\u3002 \n\u201c\u6211\u4eec\u662f\u4e00\u4e2a\u503c\u5f97\u4fe1\u8d56\u7684\u54c1\u724c\uff0c\u4eba\u4eec\u5728\u5bfb\u627e\u513f\u7ae5\u5b89\u5168\u5b66\u4e60\u65f6\u4e86\u89e3\u5230\uff0c\u201dViedma\u8bf4\u3002\n Lingokids\u8ba1\u5212\u4eca\u5e74\u96c7\u7528\u4e16\u754c\u5404\u5730\u768460\u4eba\uff0c\u4e3a\u5176\u56e2\u961f\u63a5\u8fd1100. Lingokids\u7684\u6700\u65b0\u8865\u5145\u5305\u62ecVladimir Klimov\uff0c\u62c5\u4efb\u5185\u5bb9\u6218\u7565\u548cTiago Prokeiro\uff0c\u524d\u4ea7\u54c1\u603b\u76d1\u526f\u603b\u88c1\u4ea7\u54c1\u3002\n   \u53bb\u5e74\u4ee5\u524d\u7684\u6295\u8d44\uff0cLingokids\u8fd8\u4e0e\u56fd\u9645\u73a9\u5177\u548c\u62fc\u56fe\u516c\u53f8\u52a0\u5165\u4e86Ravensburger\u3002 Lingokids\u548cRavensburger\u5c06\u5f00\u53d1\u9500\u552e\u548c\u65b0\u6e38\u620f\u548c\u73a9\u5177\u79bb\u7ebf\u4ee5\u8865\u5145Lingokids\u7684\u5728\u7ebf\u6d3b\u52a8\u3002\n \u8be5\u516c\u53f8\u7684\u5408\u4f5c\u4f19\u4f34\u5305\u62ec\u62ef\u6551\u513f\u7ae5\uff0c\u513f\u7ae5\u57fa\u91d1\u4f1a\uff0c\u96be\u6c11\u4e13\u5458\u529e\u4e8b\u5904\u548c\u7f8e\u56fd\u7ea2\u5341\u5b57\u4f1a\u3002\u8be5\u516c\u53f8\u5df2\u7531\u60f3\u8981\u8bb8\u53ef\u54c1\u724c\u7684\u516c\u53f8\u591a\u6b21\u63a5\u8fd1\u5b83\u6216\u8d2d\u4e70\u5b83\uff0c\u4f46Viedma\u8868\u793a\uff0c\u8be5\u516c\u53f8\u5e0c\u671b\u6295\u8d44\u81ea\u5df1\u7684\u5b66\u4e60\u6e38\u620f\u548c\u54c1\u724c\u3002\n \u201c\u516c\u53f8\u7684\u957f\u671f\u613f\u666f\u6b63\u5728\u4e3a\u5e7c\u513f\u6559\u80b2\u5efa\u7acb\u8fd9\u4e00\u6807\u5fd7\u6027\u54c1\u724c\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u4e00\u4e9b\u7ecf\u5386\u662f\u591a\u4eba\u6e38\u620f\uff0c\u56e0\u4e3a\u6211\u4eec\u8ba4\u4e3a\u5b66\u4e60\u53ef\u80fd\u662f\u4e00\u79cd\u793e\u4f1a\u4f53\u9a8c\u3002\u201d\n \u5728\u8986\u76d6\u6e38\u620f\u884c\u4e1a\u65f6\uff0cGamesbeat\uff06\uff0339; S\u4fe1\u6761\u662f\uff06\uff0334;\u70ed\u60c5\u7b26\u5408\u4e1a\u52a1\u7684\u5730\u65b9\u3002\uff06\uff0334;\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u6211\u4eec\u60f3\u544a\u8bc9\u60a8\u65b0\u95fb\u5982\u4f55\u5bf9\u60a8\u800c\u8a00 - \u4e0d\u4ec5\u662f\u5728\u6e38\u620f\u5de5\u4f5c\u5ba4\u7684\u51b3\u7b56\u8005\uff0c\u800c\u4e14\u4f5c\u4e3a\u6e38\u620f\u7684\u7c89\u4e1d\u3002\u65e0\u8bba\u60a8\u662f\u9605\u8bfb\u6211\u4eec\u7684\u6587\u7ae0\uff0c\u8046\u542c\u6211\u4eec\u7684\u64ad\u5ba2\uff0c\u8fd8\u662f\u89c2\u770b\u6211\u4eec\u7684\u89c6\u9891\uff0cGamesBeat\u5c06\u5e2e\u52a9\u60a8\u4e86\u89e3\u8be5\u884c\u4e1a\uff0c\u5e76\u4eab\u53d7\u4e0e\u4e4b\u4eab\u53d7\u3002\u4f60\u4f1a\u600e\u4e48\u505a\uff1f\u4f1a\u5458\u8d44\u683c\u5305\u62ec\u8bbf\u95ee\uff1a\u6210\u4e3a\u4f1a\u5458 ", "note_en": "Lingokids has raised $40 million in funding for its  educational games platform. And the company said it now reaches more than 30 million families worldwide with its mobile apps.\n The company targets its \u201cplaylearning\u201d app at children 2-8 as it tries to expand their vocabulary, improve their literacy skills, and develop important 21st-century skills in a fun, safe environment.\n  Lingokids also invites families to take part in their kids\u2019 playlearning journey through exciting play-together activities. All told, the company\u2019s apps have more than 600 learning activities and songs. The games teach an array of topics and everyday language, as well as 21st-century skills like creativity, communication, collaboration, and critical thinking.\n The apps feature fun, unique characters, developed by Guillermo Garc\u00eda-Cars\u00ed (creator of the famous cartoon  Pocoy\u00f3) and his team. Featuring both original and Oxford University Press content, the Lingokids curriculum has been specially crafted by the company\u2019s educational board with experts in early language learning from companies like LeapFrog, Hasbro, Disney, and Nickelodeon.\n Lingokids has received accolades from programs like PTPA, Mom\u2019s Choice Awards, Product Hackers Awards, enlightED, and Educational App Store. Lingokids was also named one of the Top Startups in 2020 by LinkedIn. The platform is certified by the KidSafe Seal Program and offers a kid-safe environment that is ad-free.\n   Launched in 2016, the San Francisco-based Lingokids has created its \u201cplaylearning\u201d app, and most of its developers are in Madrid, Spain. Lingokids is dedicated to supporting parents in their child\u2019s learning journey, giving them a parents portal featuring each child\u2019s progress with weekly reports, curriculum overviews, activity timeline, as well as advice and tips for parents\u2019 everyday lives through its Parents Community.\n \u201cI was just coming out from an exit, and my sister asked me to help my niece learn English,\u201d Viedma said. \u201cI was something of a gamer with a computer science background. I had always wanted to do games at some point in my life. So I started building some games for my 2-year-old niece.\u201d\n Viedma wanted to get away from passive video experiences. His games worked, and the business snowballed. He formed a company and started making games that he thought were fun. They had real gameplay elements, and then added ecuational elements. They now range from puzzles to endless runner games. The biggest market today is the U.S., where 60% of the families are based. Mexico and Brazil are also large markets.\n The third institutional funding round was led by an undisclosed investor, with participation from GP Bullhound and existing investors HV Capital and Ravensburger, among others. The funding will be used for further international expansion, development of new and engaging forms of content for kids, as well as global hiring, especially for the platform engineering and development teams. Lingokids has raised $65 million to date, reaching positive earnings before interest, taxes, depreciation, and amortization (EBITDA) in 2020.\n Crist\u00f3bal Viedma, the CEO and founder of Lingokids, said in an interview with GamesBeat that its goal is to help parents and caretakers raise their kids and break down educational barriers. He said the company provides quality education options that parents can trust and these are more important than ever.\n During the pandemic, more than  65% of households with children reported the use of online learning, and 68% of parents said they now rely on early learning apps to supplement their children\u2019s education, according to the U.S. Census. As a trusted resource for educational and interactive content, Lingokids tripled its number of users since the beginning of the pandemic, and is poised to transform the early education market.\n   With this new funding, Lingokids will rapidly increase its international growth. In addition, it will expand its offerings related to science technology engineering and math (STEM), and the learning of skills that many kids missed out on during the past school year like emotional intelligence, empathy, and critical thinking. Lingokids will also develop new audio content in audiobooks and audio-exercises, focusing on topics related to mental health, mindfulness, and meditation.\n \u201cWe\u2019re doing early childhood education for kids ages two to eight years old, teaching them all the basics like language, literacy, reading, writing, mathematics, logic, and programming,\u201d Viedma said. \u201cA billion kids are accessing digital content. But while there are lots of companies in the industry, we are different.\u201d\n The company targets families, with the customer being the parent rather than schools. It creates original content that creates playful interactive experiences for kids. And it reaches those kids through mobile apps.\n \u201cWe are a trusted brand that people learn about when they are looking for kids-safe learning,\u201d Viedma said.\n Lingokids plans to hire an additional 60 people around the world this year, adding to its team of close to 100. The latest additions to Lingokids include Vladimir Klimov as director of content strategy and Tiago Pregueiro, former product director at Cabify, as vice president of product.\n   With its previous investment last year, Lingokids also joined forces with the international toy and puzzles company, Ravensburger. Lingokids and Ravensburger will develop merchandising and new games and toys offline to complement Lingokids\u2019 online activities.\n The company\u2019s partners include Save the Children, UNICEF, UNHCR and American Red Cross.\u00a0The company has been approached multiple times by companies that want to license brands to it or buy it, but Viedma said the company wants to invest in its own learning games and brands.\n \u201cThe long-term vision of the company is building this iconic brand for early childhood education,\u201d he said. \u201cSome experiences are multiplayer, as we think learning can be a social experience.\u201d\n GamesBeat&#39;s creed when covering the game industry is &#34;where passion meets business.&#34; What does this mean? We want to tell you how the news matters to you -- not just as a decision-maker at a game studio, but also as a fan of games. Whether you read our articles, listen to our podcasts, or watch our videos, GamesBeat will help you learn about the industry and enjoy engaging with it.  How will you do that? Membership includes access to:    Become a member", "posttime": "2021-06-20 13:15:37", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6e38\u620f,\u7a0b\u5e8f,\u8fbe\u5230,claims", "title": "Lingokids\u901a\u8fc7\u51762-8\u5c81\u7684\u513f\u7ae5\u201cPlayLearning\u201d\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6559\u80b2\u6e38\u620f\uff0c\u63d0\u9ad8\u4e8640\u4e07\u7f8e\u5143\u7684C\u7cfb\u5217\uff0c\u5e76\u8981\u6c42\u8fbe\u5230\u5168\u740330\u7c73+\u5bb6\u5ead ", "title_en": "Lingokids, which offers educational games through its \u201cplaylearning\u201d app for kids aged 2-8, raises $40M Series C and claims to reach 30M+ families worldwide", "transed": 1, "url": "https://venturebeat.com/2021/06/15/lingokids-raises-40-million-for-playlearning-educational-games-platform/", "via": "", "real_tags": ["\u6e38\u620f", "\u7a0b\u5e8f", "\u8fbe\u5230", "claims"]}, {"category": "", "categoryclass": "", "imagename": "ecaa3eed2fc967ff1ee3a04f39b0aaa2.jpeg", "infoid": 1066990, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8be5\u516c\u53f8\u5468\u4e8c\u8868\u793a\uff0c\u8d22\u5bcc\u7ba1\u7406\u8f6f\u4ef6\u63d0\u4f9b\u5546Addepar Inc.\u4ece\u4e03\u4e2a\u6708\u524d\u589e\u52a0\u5230201.17\u4ebf\u7f8e\u5143\u7684\u4f30\u503c\u589e\u52a0\u523021.17\u4ebf\u7f8e\u5143\u3002\n  Addepar\u8868\u793a\uff0c\u5b83\u5df2\u4ece\u7ebd\u7ea6\u5bf9\u51b2\u57fa\u91d1\u516c\u53f8D1 Capital Partners\u7b79\u96c6\u4e861.5\u4ebf\u7f8e\u5143\u3002\u636e\u719f\u6089\u8be5\u4ea4\u6613\u7684\u4eba\u79f0\uff0c\u5b83\u4ee5\u524d\u5728\u8fd110\u4ebf\u7f8e\u5143\u7684\u8d44\u91d1\u56de\u5408\u540e\u91cd\u89c6\u3002\u65e9\u4e9b\u65f6\u5019\u5728Addepar\u4e2d\u7684\u6295\u8d44\u8005\u4e8e2009\u5e74\u7531Palantir Technologies Inc.\u7684\u8054\u5408\u521b\u59cb\u4eba\u548c\u4e32\u884c\u4f01\u4e1a\u5bb6Joe Lonsdale\u6210\u7acb\uff0c\u5305\u62ec\u98ce\u9669\u6295\u8d44\u516c\u53f8Valor\u80a1\u7968\u4f19\u4f34\u548cWestcap\u96c6\u56e2\u3002\n  \u9996\u5e2d\u6267\u884c\u5b98Eric Poirier\u8868\u793a\uff0c\u6e4d\u6d41\u987e\u95ee\u901a\u8fc7\u6295\u8d44\u987e\u95ee\u4e86\u89e3\u4ed6\u4eec\u7684\u5ba2\u6237\u6295\u8d44\u7ec4\u5408\u53ef\u80fd\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u8fd9\u662fAdadear\u6700\u8fd1\u7684\u589e\u957f\u3002\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684\u5c71\u666f\u666f\u8272\u4e3a\u6295\u8d44\u987e\u95ee\uff0c\u94f6\u884c\u548c\u5bb6\u5ead\u529e\u516c\u5ba4\u5236\u4f5c\u4e86\u65e8\u5728\u7b80\u5316\u6295\u8d44\u7ec4\u5408\u5728\u8d44\u4ea7\u7c7b\u522b\u7684\u6295\u8d44\u7ec4\u5408\u7684\u8ddf\u8e2a\u3002 Addepar\u76ee\u524d\u8ffd\u8e2a\u7ea62.7\u4e07\u4ebf\u7f8e\u5143\u7684\u8d44\u4ea7\uff0c\u81ea2020\u5e74\u4e2d\u671f\u81ea2020\u5e74\u4e2d\u671f\u6bcf\u5468\u589e\u52a0150\u4ebf\u7f8e\u5143\u7684\u8d44\u4ea7\u3002\n  \u201c\u8fd9\u662f\u81ea\u4ece\u4e00\u5f00\u59cb\u4ee5\u6765\u7684\u4eba\u7c7b\u4fe1\u4efb\u4e1a\u52a1\uff0c\u5e76\u62e5\u6709\u4e00\u4e2a\u4eba\u7684\u91d1\u878d\u4e13\u4e1a\u7528\u9014\u4e3a\u5ba2\u6237\u670d\u52a1\u7684\u6280\u672f\u662f\u6d77\u6d0b\u53d8\u9769\uff0c\u201dPoirier\u5148\u751f\u8bf4\u3002\n      \u4ed6\u62d2\u7edd\u8bf4\uff0c\u5982\u679c\u516c\u53f8\u6709\u5229\u53ef\u56fe\u6216\u62ab\u9732\u5176\u6536\u5165\uff0c\u4f46\u662f\uff0cAddep\u4e5f\u5728\u5c1a\u672a\u4ee5\u6700\u5feb\u7684\u6b65\u4f10\u63a8\u52a8\u5ba2\u6237\u548c\u8d44\u4ea7\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5b83\u8ba4\u4e3a\u5e02\u573a\u603b\u5e02\u573a\u9700\u6c42\u91cf\u8d85\u8fc7200\u4e07\u4ebf\u7f8e\u5143\u3002\u5ba2\u6237\u5305\u62ecAlliancebernstein\u6301\u6709LP\uff0cMorgan Stanley\u548cStifel Financial\uff0c\u5176\u6295\u8d44\u81c2\u4ee5\u524d\u6295\u5165Addepar\u3002\n  Lonsdale\u5148\u751f\uff0c\u4ed6\u662f\u524d\u4e09\u5e74\u7684Addepar\uff0c\u73b0\u5728\u662f\u5176\u8463\u4e8b\u4f1a\u4e3b\u5e2d\uff0c\u5c06\u5176\u63cf\u8ff0\u4e3a\u201c\u878d\u8d44\u7684\u64cd\u4f5c\u7cfb\u7edf\u201d\u3002\u4ed6\u8bf4\uff0c\u4ed6\u8ba4\u4e3a\u7528\u6237\u8f6c\u5230Adadear\uff0c\u56e0\u4e3a\u8f6f\u4ef6\u6c47\u603b\u4e86\u5e2e\u52a9\u4ed6\u4eec\u505a\u51fa\u5173\u4e8e\u91d1\u94b1\u51b3\u5b9a\u6240\u9700\u7684\u5927\u91cf\u4fe1\u606f\u3002\n  Lonsdale\u5148\u751f\u8fd8\u8868\u793a\uff0cAddepar\u53ef\u4ee5\u5728\u51e0\u5e74\u5185\u56f4\u7ed5\u5176\u8f6f\u4ef6\u5efa\u9020\u7684\u5e94\u7528\u7a0b\u5e8f\u751f\u6001\u7cfb\u7edf\u3002\u9664\u4e86\u7b80\u5316\u7684\u6027\u80fd\u62a5\u544a\u5916\uff0cAddepar\u8fd8\u53ef\u4ee5\u5728\u4e00\u89c8\u4e4b\u5185\uff0c\u53bb\u5e74\u63a8\u51fa\u4e00\u4e2a\u540d\u4e3aMarketplace\u7684\u7279\u5f81\uff0c\u63d0\u4f9b\u6709\u5173\u5bf9\u51b2\u57fa\u91d1\uff0c\u79c1\u52df\u80a1\u6743\u57fa\u91d1\u548c\u79c1\u8425\u4f01\u4e1a\u80a1\u7968\u7b49\u6295\u8d44\u4ea7\u54c1\u7684\u4fe1\u606f\u3002 \nLonsdale\u5148\u751f\u8bf4\uff0c\u5efa\u7acb\u4e86\u8be5\u516c\u53f8\u7684\u6280\u672f\u6bd4\u9884\u671f\u66f4\u957f\u3002  \u4ed6\u8bf4\uff1a\u201c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728\u8d22\u5bcc\u7ba1\u7406\u4e2d\u89e3\u51b3\u4e86\u5f88\u591a\u96be\u9898\u201d\u4f8b\u5982\uff0c\u5728\u6570\u5343\u540d\u76d1\u62a4\u4eba\u548c\u57fa\u91d1\u7ba1\u7406\u4eba\u5458\u4e2d\uff0c\u6570\u636e\u5206\u53d1\u6570\u636e\u3002  Addepar\u8ba1\u5212\u5229\u7528\u8d44\u91d1\u6269\u5927\u5176\u5168\u7403\u9500\u552e\u90e8\u961f\uff0c\u7279\u522b\u662f\u5728\u6b27\u6d32\uff0c\u5e76\u7ee7\u7eed\u6295\u8d44\u7814\u53d1\u3002 Poirier\u5148\u751f\u8bf4\uff0c\u5927\u7ea690\uff05\u7684\u5ba2\u6237\u7fa4\u662f\u7f8e\u56fd\u76ee\u524d\u7684\u3002  D1\u5c06\u91c7\u53d6\u8463\u4e8b\u4f1a\u89c2\u5bdf\u8005\u89d2\u8272\u3002 D1\u4e3b\u666e\u62c9\u7279\u514bBhide\u8868\u793a\uff0cAddepar\u6709\u673a\u4f1a\u8fc5\u901f\u589e\u957f\u3002 \u81ea2018\u5e74\u6210\u7acb\u4ee5\u6765\uff0c\u5bf9\u51b2\u57fa\u91d1\u516c\u53f8\u91c7\u7528\u4e86\u6742\u4ea4\u6295\u8d44\u7684\u6742\u4ea4\u6295\u8d44\u65b9\u6cd5\u548c\u79c1\u8425\u516c\u53f8\u3002  \u51fa\u73b0\u57282021\u5e746\u670816\u65e5\uff0c\u5370\u5237\u7248\u4f5c\u4e3a\uff06\uff0339;\u8f6f\u4ef6\u5236\u9020\u5546\u4ef7\u503c\u4e3a21.7\u4ebf\u7f8e\u5143\u3002\uff06\uff0339; ", "note_en": "Wealth-management software provider Addepar Inc. more than doubled its valuation to $2.17 billion from seven months ago in its latest funding round, the company said Tuesday.\n  Addepar said it had raised $150 million from New York hedge-fund firm D1 Capital Partners. It was previously valued at nearly $1 billion after its last funding round in November, according to a person familiar with the deal.  Earlier investors in Addepar, founded in 2009 by Palantir Technologies Inc. co-founder and serial entrepreneur Joe Lonsdale, include venture firms Valor Equity Partners and WestCap Group.\n  Turbulent markets and a desire by investment advisers to know what could happen to their clients\u2019 portfolios during the pandemic has spurred Addepar\u2019s recent growth, said Chief Executive Eric Poirier. The Mountain View, Calif.-based company makes software for investment advisers, banks and family offices that aims to simplify the tracking of how investment portfolios perform across asset classes. Addepar currently tracks about $2.7 trillion of assets and has added an average $15 billion in assets a week since mid-2020.\n  \u201cThis has been a human trust business since the beginning of time, and having a human who is the financial professional use technology to serve their clients is a sea change,\u201d said Mr. Poirier.\n      He declined to say if the company was profitable or to disclose its revenue but said Addepar was bringing on clients and assets at its fastest pace yet. The company says it thinks the total market demand for investible assets is more than $200 trillion globally. Clients include  AllianceBernstein Holding LP,  Morgan Stanley and  Stifel Financial  , whose investment arm previously invested in Addepar.\n  Mr. Lonsdale, who ran Addepar for its first three years and now is chairman of its board, described it as \u201can operating system for finance.\u201d He said he sees users turning to Addepar because the software aggregates large amounts of information needed to help them make decisions about money.\n  Mr. Lonsdale also said Addepar could have an ecosystem of applications built around its software in several years. In addition to simplified performance reporting, Addepar lets clients view net worth at a glance and last year rolled out a feature called Marketplace that provides information about investment products such as hedge funds, private-equity funds and shares in private companies.\n  Mr. Lonsdale said building out the technology of the firm had taken longer than expected.\n  \u201cIt turns out there are a lot of hard problems to solve in wealth management\u201d such as the distribution of data across thousands of custodians and fund administrators, he said.\n  Addepar plans to use the funding to scale up its sales force globally, particularly in Europe, and continue to invest in research and development. Roughly 90% of its client base is in the U.S. currently, Mr. Poirier said.\n  D1 will take a board observer role. D1 principal Prateek Bhide said Addepar has an opportunity to grow rapidly.\u00a0The hedge-fund firm has employed a hybrid approach of investing in both public and private companies since its founding in 2018.\n  Appeared in the June 16, 2021, print edition as &#39;Software Maker Valued at $2.17 Billion.&#39;", "posttime": "2021-06-20 13:15:21", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6f\u4ef6,partners,addepar,\u6295\u8d44", "title": "Addepar\u662f\u8d22\u5bcc\u7ba1\u7406\u8f6f\u4ef6\u7684\u63d0\u4f9b\u5546\uff0c\u4eceD1 Capital Partners\u8fbe\u52302.17\u4ebf\u7f8e\u5143\u7684\u4f30\u503c\u7b79\u96c6\u4e86150\u7c73; \u8d44\u6599\u6765\u6e90\uff1aAddepar\u4e8e11\u6708\u7684\u301c1\u4ebf\u7f8e\u5143\u4f30\u4ef7 ", "title_en": "Addepar, a provider of wealth management software, raises $150M from D1 Capital Partners at a $2.17B valuation; source: Addepar was valued at ~$1B in November", "transed": 1, "url": "https://www.wsj.com/articles/addepar-valued-at-2-17-billion-as-investors-bet-on-wealth-management-tech-11623756600?mod=djemalertNEWS", "via": "", "real_tags": ["\u8f6f\u4ef6", "partners", "addepar", "\u6295\u8d44"]}, {"category": "", "categoryclass": "", "imagename": "75a9cc1b6393d9a1e22cbfa337298e13.png", "infoid": 1066989, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f7f\u7528\u968f\u673a\u9009\u62e9\u8282\u70b9\u6765\u4f20\u9012\u4fe1\u606f\uff0c\u4ee5\u786e\u4fdd\u5b83\u5728\u4e0d\u6cdb\u6ee5\u7f51\u7edc\u7684\u60c5\u51b5\u4e0b\u8fbe\u5230\u7fa4\u96c6\u4e2d\u7684\u6240\u6709\u8282\u70b9\n  \u5728\u4e00\u7ec4\u8282\u70b9\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u5c06\u5143\u6570\u636e\u4fe1\u606f\u4f20\u9012\u7ed9\u7fa4\u96c6\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u8282\u70b9\uff0c\u800c\u65e0\u9700\u53d6\u51b3\u4e8e\u5171\u4eab\u5b58\u50a8\u3002\u5728\u4e00\u4e2a\u5927\u7fa4\u96c6\u4e2d\uff0c\u5982\u679c\u6240\u6709\u670d\u52a1\u5668\u4e0e\u6240\u6709\u5176\u4ed6\u670d\u52a1\u5668\u901a\u4fe1\uff0c\u5219\u53ef\u4ee5\u6d88\u8017\u5927\u91cf\u7684\u7f51\u7edc\u5e26\u5bbd\u3002\u5373\u4f7f\u67d0\u4e9b\u7f51\u7edc\u94fe\u63a5\u9047\u5230\u95ee\u9898\uff0c\u4fe1\u606f\u4e5f\u5e94\u8be5\u8fbe\u5230\u6240\u6709\u8282\u70b9\u3002\n \u7fa4\u96c6\u8282\u70b9\u4f7f\u7528Gossip\u6837\u5f0f\u901a\u4fe1\u6765\u4f20\u64ad\u72b6\u6001\u66f4\u65b0\u3002\u6bcf\u4e2a\u8282\u70b9\u9009\u62e9\u4e00\u4e2a\u968f\u673a\u8282\u70b9\u6765\u4f20\u9012\u5b83\u7684\u4fe1\u606f\u3002\u8fd9\u662f\u7ecf\u5e38\u95f4\u9694\u5b8c\u6210\u7684\uff0c\u6bcf1\u79d2\u949f\u8bf4\u3002\u6bcf\u6b21\uff0c\u9009\u62e9\u968f\u673a\u8282\u70b9\u4ee5\u4f20\u9012\u4fe1\u606f\u3002\n   \u6d88\u606f\u4e0d\u5e94\u6d88\u8017\u5927\u91cf\u7684\u7f51\u7edc\u5e26\u5bbd\u3002\u5e94\u8be5\u6709\u51e0\u767ekBs\u7684\u4e0a\u9650\uff0c\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\uff06\uff0339;\u6570\u636e\u4f20\u8f93\u4e0d\u4f1a\u53d7\u5230\u7fa4\u96c6\u4e2d\u8fc7\u591a\u7684\u6d88\u606f\u3002\n \u5143\u6570\u636e\u4f20\u64ad\u5e94\u8be5\u5bb9\u5fcd\u7f51\u7edc\u548c\u4e00\u4e9b\u670d\u52a1\u5668\u6545\u969c\u3002\u5373\u4f7f\u5c11\u91cf\u7f51\u7edc\u94fe\u8def\u5df2\u5173\u95ed\uff0c\u4e5f\u5e94\u8be5\u8fbe\u5230\u6240\u6709\u7fa4\u96c6\u8282\u70b9\uff0c\u6216\u8005\u4e00\u4e9b\u670d\u52a1\u5668\u5931\u8d25\u3002\n  \u6bcf\u4e2a\u7fa4\u96c6\u8282\u70b9\u5c06\u5143\u6570\u636e\u5b58\u50a8\u4e3a\u4e0e\u7fa4\u96c6\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u76f8\u5173\u8054\u7684\u952e\u503c\u5bf9\u5217\u8868\uff1a\n     \u5728\u542f\u52a8\u65f6\uff0c\u6bcf\u4e2a\u7fa4\u96c6\u8282\u70b9\u4f1a\u6dfb\u52a0\u5173\u4e8e\u81ea\u8eab\u7684\u5143\u6570\u636e\uff0c\u9700\u8981\u4f20\u64ad\u5230\u5176\u4ed6\u8282\u70b9\u3002\u5143\u6570\u636e\u7684\u4e00\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u662f\u8282\u70b9\u4fa6\u542c\u7684IP\u5730\u5740\u548c\u7aef\u53e3\uff0c\uff06\uff0339\u8d1f\u8d23\u7b49\u3002\u516b\u5366\u5b9e\u4f8b\u9700\u8981\u4e86\u89e3\u81f3\u5c11\u4e00\u4e2a\u5176\u4ed6\u8282\u70b9\u4ee5\u542f\u52a8\u516b\u5b57\u901a\u4fe1\u3002\u4f17\u6240\u5468\u77e5\u7684\u7fa4\u96c6\u8282\u70b9\u7528\u4e8e\u521d\u59cb\u5316\u516b\u8db3\u5b9e\u4f8b\u79f0\u4e3a\u79cd\u5b50\u8282\u70b9\u6216\u4ecb\u7ecd\u8005\u3002\u4efb\u4f55\u8282\u70b9\u90fd\u53ef\u4ee5\u5145\u5f53\u4ecb\u7ecd\u8005\u3002 \npublic gossip\uff08inetaddressandport listendaddress\uff0clist\uff06lt; inetaddressandport\uff06gt; seednodes\uff0cstring nodeid\uff09\u629b\u51faioException {this.listenaddress = listenaddress; //\u5728\u5176Seed\u8282\u70b9\u7684\u4e00\u90e8\u5206\u4e2d\u7b5b\u9009\u6b64\u8282\u70b9\u672c\u8eab.SeedNodes = RemoveSfaddress\uff08Seednodes\uff09; this.nodeId = new nodeid\uff08nodeid\uff09; addlocalstate\uff08gossipkeys.address\uff0clistendaddress.tostring\uff08\uff09\uff09; this..socketserver = new nioscoptlistener\uff08newgossiprequestconsumer\uff08\uff09\uff0clisisidaddress\uff09;\u79c1\u6709void addLocalstate\uff08String\u952e\uff0c\u5b57\u7b26\u4e32\u503c\uff09{nodestate nodeState = clustermetadata.get\uff08listenaddress\uff09; if\uff08nodestate == null\uff09{nodestate = new nodestate\uff08\uff09; clustermetadata.put\uff08nodeid\uff0cnodestate\uff09; nodeState.Add\uff08key\uff0cnew serveoryedvalue\uff08\u503c\uff0cIncremenetVersion\uff08\uff09\uff09\uff09; }\n \u6bcf\u4e2a\u7fa4\u96c6\u8282\u70b9\u8c03\u5ea6\u4f5c\u4e1a\u4ee5\u5b9a\u671f\u5c06\u5176\u4f20\u8f93\u5230\u5176\u4ed6\u8282\u70b9\u7684\u5143\u6570\u636e\u3002\n  Private ScheduledThreadPoolExecutor Gossipexecutor =\u65b0\u7684ScheduledThreadPoolExecutor\uff081\uff09;\u79c1\u4eba\u957fgossipintervalms = 1000;\u79c1\u4eba\u8c03\u5ea6\uff06lt;\uff1f\uff06gt;\u4efb\u52a1\u8d39; public void start\uff08\uff09{socketserver.start\uff08\uff09;\u4efb\u52a1\u6587\u4ef6= gossipexecutor.scheduleatfixedrate\uff08\uff08\uff09 - \uff06gt; dogossip\uff08\uff09\uff0cgossipintervalms\uff0cgossipintervalms\uff0ctimeunit.milliseconds\uff09; }\n \u8c03\u7528\u8ba1\u5212\u4efb\u52a1\u65f6\uff0c\u5b83\u4f1a\u4ece\u5143\u6570\u636e\u6620\u5c04\u7684\u670d\u52a1\u5668\u5217\u8868\u4e2d\u62fe\u53d6\u4e00\u5c0f\u7ec4\u968f\u673a\u8282\u70b9\u3002\u5b9a\u4e49\u4e3aGossip Fanout\u7684\u5c0f\u5e38\u91cf\u6570\uff0c\u786e\u5b9a\u8981\u4f5c\u4e3a\u516b\u5366\u76ee\u6807\u62fe\u53d6\u7684\u8282\u70b9\u3002\u5982\u679c\u5df2\u77e5\u4efb\u4f55\u5185\u5bb9\uff0c\u5b83\u4f1a\u62fe\u53d6\u4e00\u4e2a\u968f\u673a\u79cd\u5b50\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u5230\u8be5\u8282\u70b9\u7684\u5143\u6570\u636e\u6620\u5c04\u3002\n  public void dogossip\uff08\uff09{list\uff06lt; inetaddressandport\uff06gt; nextedclusternodes = liveodes\uff08\uff09; if\uff08nexinnclusterternode.isusptey\uff08\uff09\uff09{sendgossip\uff08Seednodes\uff0cGossipfanout\uff09; } else {sendgossip\uff08joadingclusternodes\uff0cgossipfanout\uff09;\u79c1\u4eba\u5217\u8868\uff06lt; inetaddressandport\uff06gt; liveodes\uff08\uff09{set\uff06lt; inetaddressandport\uff06gt; nodes = clustermetadata.values\uff08\uff09.stream\uff08\uff09.map\uff08n  - \uff06gt; inetaddressandport.parse\uff08n.get\uff08gossipkeys.address\uff09.getvalue\uff08\uff09\uff09\uff09.collect\uff08collectors.toset\uff08\uff09\uff09; return removeselfaddress\uff08\u8282\u70b9\uff09; }\n  \u79c1\u6709void sendgossip\uff08list\uff06lt; inetaddressandport\uff06gt; nearyClUsternodes\uff0cint gossipfanout\uff09{if\uff08nextedClusterternode.Isempty\uff08\uff09\uff09{return; for\uff08int i = 0; i\uff06lt; gossipfanout; i ++\uff09{inetaddressandport nodeaddress = pickrandomnode\uff08nearyClusternodes\uff09; sendgossipto\uff08nodeaddress\uff09;\u79c1\u6709void sendgossipto\uff08inetaddressandport nodeaddress\uff09{try {getlogger\uff08\uff09\u3002\u4fe1\u606f\uff08\uff06\uff0334;\u5411\uff06\uff0334\u53d1\u9001\u516b\u5366\u72b6\u6001\uff09; socketClient\uff06lt; RequestorResponse\uff06gt; socketClient =\u65b0\u7684\u4fa7\u9762\uff08Nodeaddress\uff09; gossipstatemessage gossipstatemessage = new gossipstatemessage\uff08this.clustermetadata\uff09; RequestorResponse Request = creategossipstateRequest\uff08gossipstatemessage\uff09; byte [] responseBytes = socketClient.Blocksend\uff08\u8bf7\u6c42\uff09; gossipstatemessage rendalestate = deserialize\uff08responseBytes\uff09;\u5408\u5e76\uff08ReplaceState.getNodeStates\uff08\uff09\uff09; catch\uff08ioException e\uff09{getlogger\uff08\uff09\u3002\u9519\u8bef\uff08\uff06\uff0334; io\u9519\u8bef\uff0c\u540c\u65f6\u5c06\u516b\u5366\u72b6\u6001\u53d1\u9001\u5230\uff06\uff0334; + nodeaddress\uff0ce\uff09; Private RequestorResponse CreateGossipstateRequest\uff08GossipStateMessage GossipStateMessage\uff09{return new RequestorResponse\uff08requestId.pushpullgossipstate.getId\uff08\uff09\uff0cjsonserdes.serialize\uff08gossipstatemessage\uff09\uff0ccorrelitationId ++\uff09;}\n \u63a5\u6536GOSSIP\u6d88\u606f\u7684\u7fa4\u96c6\u8282\u70b9\u68c0\u67e5\u5b83\u62e5\u6709\u7684\u5143\u6570\u636e\u5e76\u627e\u5230\u4e09\u4ef6\u4e8b\u3002 \n\u5728\u6b64\u8282\u70b9\u4e2d\u7684\u4f20\u5165\u6d88\u606f\u4e2d\u7684\u503c\uff06\uff0339; s\u72b6\u6001\u56fe\n  \u5f53\u8282\u70b9\u5177\u6709\u8f93\u5165\u6d88\u606f\u4e2d\u5b58\u5728\u7684\u503c\u65f6\uff0c\u9009\u62e9\u66f4\u9ad8\u7248\u672c\u503c\n \u7136\u540e\u5b83\u5c06\u7f3a\u5931\u503c\u6dfb\u52a0\u5230\u81ea\u5df1\u7684\u72b6\u6001\u6620\u5c04\u3002\u65e0\u8bba\u4ece\u4f20\u5165\u6d88\u606f\u4e2d\u7f3a\u5c11\u4ec0\u4e48\u503c\uff0c\u90fd\u5c06\u4f5c\u4e3a\u54cd\u5e94\u8fd4\u56de\u3002\n \u53d1\u9001Gossip\u6d88\u606f\u7684\u7fa4\u96c6\u8282\u70b9\u4f1a\u6dfb\u52a0\u5176\u4ece\u516b\u5366\u54cd\u5e94\u5230\u81ea\u5df1\u72b6\u6001\u7684\u503c\u3002\n  \u79c1\u6709void handlegossiprequest\uff08org.distrib.patterns.common.message\uff06lt; RequestorResponse\uff06gt;\u8bf7\u6c42\uff09{gossipstatemessage gossipstatemessage = deserialize\uff08request.getrequest\uff08\uff09\uff09;\u5730\u56fe\uff06lt; nodeid\uff0cnodestate\uff06gt; gossipedstate = gossipstatemessage.getnodeStates\uff08\uff09; getLogger\uff08\uff09\u3002\u4fe1\u606f\uff08\uff06\uff0334;\u6765\u81ea\uff06\uff0334\u7684\u5408\u5e76\u72b6\u6001; + Request.getClientsocket\uff08\uff09\uff09;\u5408\u5e76\uff08\u516b\u5366\u65af\u7279\u6cf0\u7279\uff09;\u5730\u56fe\uff06lt; nodeid\uff0cnodestate\uff06gt; diff = delta\uff08this.clustermetadata\uff0cgossedstate\uff09; gossipstatemessage diffresponse = new gossipstatemessage\uff08diff\uff09; getlogger\uff08\uff09\u3002\u4fe1\u606f\uff08\uff06\uff0334;\u53d1\u9001\u5dee\u5f02\u54cd\u5e94\uff06\uff0334; +\u5dee\u5f02\uff09; Request.getClientsocket\uff08\uff09\u3002\u5199\uff08new RequestorResponse\uff08requestId.pushpullgossipstate.getId\uff08\uff09\uff0cjsonserdes.serialize\uff08diffresponse\uff09\uff0cRequest.getRequest\uff08\uff09\u3002getcorrelationId\uff08\uff09\uff09\uff09; }\n \u516c\u5171\u56fe\uff06lt; nodeid\uff0cnodestate\uff06gt; delta\uff08map\uff06lt; nodeid\uff0cnodestate\uff06gt; frommap\uff0cmap\uff06lt; nodeid\uff0cnodestate\uff06gt; tomap\uff09{map\uff06lt; nodeid\uff0cnodestate\uff06gt; delta = new hashmap\uff06lt;\uff08\uff09; for\uff08nodeid\u5bc6\u94a5\uff1afrommap.keyset\uff08\uff09\uff09{if\uff08\uff01tomap.containskey\uff08key\uff09\uff09{delta.put\uff08key\uff0cfrommap.get\uff08key\uff09\uff09;\u7ee7\u7eed;\u4ecestates = frommap.get\uff08key\uff09; nodestate tostates = tomap.get\uff08key\uff09; nodestate\u5dee\u5f02= fromstates.diff\uff08tostates\uff09; if\uff08\uff01diffstates.isusemaly\uff08\uff09\uff09{delta.put\uff08key\uff0c\u5dee\u9519\uff09; }}\u8fd4\u56dedelta;}\n \u516c\u5171void\u5408\u5e76\uff08Map\uff06lt; nodeid\uff0cnodestate\uff06gt; Otherstate\uff09{map\uff06lt; nodeid\uff0cnodestate\uff06gt; diff = delta\uff08Otherstate\uff0cthis.clustermetadata\uff09; for\uff08nodeid diffkey\uff1adiff.keyset\uff08\uff09\uff09{if\uff08\uff01thice.clustermetadata.containskey\uff08diffkey\uff09\uff09{this.clustermetadata.put\uff08diffkey\uff0cdiff.get\uff08diffey\uff09\uff09; } else {nodestate statemap = this.clustermetadata.get\uff08diffkey\uff09; statemap.putlal\uff08diff.get\uff08diffkey\uff09\uff09; }}} \n\u6bcf\u4e2a\u7fa4\u96c6\u8282\u70b9\u5728\u6bcf\u4e2a\u7fa4\u96c6\u8282\u70b9\u5904\u6bcf\u9694\u4e00\u79d2\u4e00\u6b21\u53d1\u751f\u6b64\u8fc7\u7a0b\uff0c\u6bcf\u6b21\u9009\u62e9\u4e0d\u540c\u7684\u8282\u70b9\u4ee5\u4ea4\u6362\u72b6\u6001\u3002\n \u4e0a\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u663e\u793a\u4e86\u8282\u70b9\u7684\u5b8c\u6574\u72b6\u6001\u5728GOSSIP\u6d88\u606f\u4e2d\u53d1\u9001\u3002\u8fd9\u5bf9\u65b0\u52a0\u5165\u7684\u8282\u70b9\u5f88\u597d\uff0c\u4f46\u662f\u4e00\u65e6\u72b6\u6001\u662f\u6700\u65b0\u7684\uff0c\u5b83\u5c31\u4e0d\u5fc5\u53d1\u9001\u4e86\u5b8c\u6574\u72b6\u6001\u3002\u7fa4\u96c6\u8282\u70b9\u53ea\u9700\u8981\u81ea\u4e0a\u6b21\u516b\u5366\u4ee5\u6765\u53d1\u9001\u72b6\u6001\u66f4\u6539\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u7ef4\u62a4\u6bcf\u6b21\u5728\u672c\u5730\u6dfb\u52a0\u65b0\u7684\u5143\u6570\u636e\u6761\u76ee\u65f6\u9012\u589e\u7684\u7248\u672c\u53f7\u3002\n   \u7fa4\u96c6\u5143\u6570\u636e\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u4ee5\u7248\u672c\u53f7\u7ef4\u62a4\u3002\u8fd9\u662f\u6a21\u5f0f\u7248\u672c\u4e3a\u503c\u7684\u793a\u4f8b\u3002\n  int\u7248\u672c;\u5b57\u7b26\u4e32\u503c; public supmentedValue\uff08String\u503c\uff0cint\u7248\uff09{this.version =\u7248\u672c; this.value = value; public int getversion\uff08\uff09{\u8fd4\u56de\u7248\u672c; public string getValue\uff08\uff09{\u8fd4\u56de\u503c; }\n   \u79c1\u6709void sendknversions\uff08inetaddressandport gossipto\uff09\u629b\u51faIoException {Map\uff06lt; nodeId\uff0cInteger\uff06gt; maxknnownnodeversions = getmaxknownnodeversions\uff08\uff09; RequestorResponse mepardversionRequest = new RequestorResponse\uff08requestId.gossipversions.getId\uff08\uff09\uff0cjsonserdes.serialize\uff08\u65b0\u7684gossipstateversions\uff08maxknownnodeversionsions\uff09\uff0c0\uff09; socketClient\uff06lt; RequestorResponse\uff06gt; socketClient =\u65b0\u4fa7\u9762\u5957\u63a5\u5b57\uff08Gossipto\uff09; byte [] hypernversionResponseBytes = SocketClient.BlockingsEnd\uff08ketapversversionRequest\uff09;\u79c1\u4eba\u5730\u56fe\uff06lt; nodeid\uff0c\u6574\u6570\uff06gt; getmaxknnodeversions\uff08\uff09{return clustermetadata.entryset\uff08\uff09.stream\uff08\uff09.collect\uff08collectors.tomap\uff08e-\uff06gt; e.getkey\uff08\uff09\uff0ce-\uff06gt; e.getvalue\uff08\uff09\u3002maxversion\uff08\uff09\uff09; }\n   \u7136\u540e\uff0c\u5f53\u7248\u672c\u5927\u4e8e\u8bf7\u6c42\u4e2d\u7684\u7248\u672c\u65f6\uff0c\u63a5\u6536\u8282\u70b9\u53ea\u80fd\u53d1\u9001\u503c\u3002\n  \u5730\u56fe\uff06lt; nodeid\uff0cnodestate\uff06gt; getmissingandnodestateshigherthan\uff08map\uff06lt; nodeid\uff0c\u6574\u6570\uff06gt; nodemaxversions\uff09{map\uff06lt; nodeid\uff0cnodestate\uff06gt; delta = new hashmap\uff06lt;\uff08\uff09; delta.cputall\uff08legervacessednodeStates\uff08nodemaxversions\uff09\uff09; delta.putlal\uff08\u6f0f\u6d1e\uff08nodemaxversions\uff09\uff09;\u8fd4\u56de\u4e09\u89d2\u6d32;\u79c1\u4eba\u5730\u56fe\uff06lt; nodeid\uff0cnodestate\uff06gt;\u6f0f\u6d1e\uff08Map\uff06lt; nodeid\uff0c\u6574\u6570\uff06gt; nodemaxversions\uff09{map\uff06lt; nodeid\uff0cnodestate\uff06gt; delta = new hashmap\uff06lt;\uff08\uff09;\u5217\u8868\uff06lt; nodeid\uff06gt; missingkeys = clustermetadata.keyset\uff08\uff09\u3002stream\uff08\uff09\u3002\u8fc7\u6ee4\u5668\uff08key  - \uff06gt;\uff01nodemaxversions.containskey\uff08key\uff09\uff09\u3002\u6536\u96c6\uff08\u6536\u96c6\u5668.Tolist\uff08\uff09\uff09; for\uff08nodeid missingkey\uff1amissingkyys\uff09{delta.put\uff08lisskey\uff0cclustermetadata.get\uff08\u5fd8\u6389\uff09\uff09; }\u8fd4\u56de\u4e09\u89d2\u6d32;\u79c1\u4eba\u5730\u56fe\uff06lt; nodeid\uff0cnodestate\uff06gt;\u9ad8reserversedNodeStates\uff08Map\uff06lt; nodeid\uff0c\u6574\u6570\uff06gt; nodemaxversions\uff09{map\uff06lt; nodeid\uff0cnodestate\uff06gt; delta = new hashmap\uff06lt;\uff08\uff09;\u8bbe\u7f6e\uff06lt; nodeid\uff06gt; keyset = nodemaxversions.keyset\uff08\uff09; for\uff08nodeId\u8282\u70b9\uff1akeyset\uff09{\u6574\u6570maxversion = nodemaxversions.get\uff08\u8282\u70b9\uff09; nodestate nodestate = clustermetadata.get\uff08\u8282\u70b9\uff09; if\uff08nodestate == null\uff09{\u7ee7\u7eed; nodestate deltastate = nodestate.statesgreaterthan\uff08maxversion\uff09; if\uff08\uff01deltastate.isusemal\uff08\uff09\uff09{delta.put\uff08node\uff0cdeltastate\uff09; }}\u8fd4\u56dedelta; } \nGossip\u5728[Cassandra]\u4e2d\u7684\u5b9e\u73b0\u4f18\u5316\u4e86\u4e00\u79cd\u7528\u4e09\u65b9\u63e1\u624b\u4f18\u5316\u72b6\u6001\u4ea4\u6362\uff0c\u5176\u4e2d\u63a5\u6536Gossip\u6d88\u606f\u7684\u8282\u70b9\u4e5f\u5c06\u4ece\u53d1\u4ef6\u4eba\u63d0\u4f9b\u6240\u9700\u7684\u7248\u672c\u4ee5\u53ca\u5b83\u8fd4\u56de\u7684\u5143\u6570\u636e\u3002\u7136\u540e\uff0c\u53d1\u4ef6\u4eba\u53ef\u4ee5\u7acb\u5373\u4f7f\u7528\u6240\u8bf7\u6c42\u7684\u5143\u6570\u636e\u54cd\u5e94\u3002\u8fd9\u907f\u514d\u4e86\u989d\u5916\u7684\u6d88\u606f\uff0c\u5426\u5219\u662f\u5fc5\u9700\u7684\u3002\n [\u87d1\u8782]\u4e2d\u4f7f\u7528\u7684\u516b\u5366\u534f\u8bae\u4e3a\u6bcf\u4e2a\u8fde\u63a5\u7684\u8282\u70b9\u7ef4\u62a4\u72b6\u6001\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u63a5\uff0c\u5b83\u5c06\u53d1\u9001\u5230\u8be5\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u7248\u672c\uff0c\u5e76\u4ece\u8be5\u8282\u70b9\u63a5\u6536\u7684\u7248\u672c\u3002\u8fd9\u662f\u53ef\u4ee5\u53d1\u9001\uff06\uff0339;\u81ea\u4e0a\u6b21\u53d1\u9001\u7684\u7248\u672c\u4ee5\u6765\u7684\u72b6\u6001\u3002\u5e76\u8be2\u95ee\uff06\uff0339;\u6765\u81ea\u4e0a\u6b21\u6536\u5230\u7684\u7248\u672c\u548c\uff0339\u7684\u72b6\u6001;\n \u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5176\u4ed6\u6709\u6548\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u53d1\u9001\u6574\u4e2a\u5730\u56fe\u7684\u54c8\u5e0c\uff0c\u5982\u679c\u54c8\u5e0c\u76f8\u540c\uff0c\u5219\u65e0\u6548\u3002\n \u7fa4\u96c6\u8282\u70b9\u968f\u673a\u9009\u62e9\u8981\u53d1\u9001\u516b\u5366\u6d88\u606f\u7684\u8282\u70b9\u3002 Java\u4e2d\u7684\u793a\u4f8b\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528java.util.random\u5982\u4e0b\uff1a\n  \u79c1\u6709\u968f\u673a= new random\uff08\uff09;\u79c1\u6709inetaddressandport pickrandomnode\uff08list\uff06lt; inetaddressandport\uff06gt; nearyClusternodes\uff09{intrandnnodeindex = wandom.nextint\uff08nexindclusternodes.size\uff08\uff09\uff09; inetaddressandport gossipto = nugindclusterternode.get\uff08randomnodeindex\uff09;\u8fd4\u56degossipto; }\n \u53ef\u4ee5\u5b58\u5728\u5176\u4ed6\u8003\u8651\u56e0\u7d20\uff0c\u4f8b\u5982\u6700\u5c11\u8054\u7cfb\u7684\u8282\u70b9\u3002\u4f8b\u5982\uff0c\u87d1\u8782\u4e2d\u7684\u516b\u5366\u534f\u8bae\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u9009\u62e9\u8282\u70b9\u3002\n \u7ef4\u62a4\u7fa4\u96c6\u4e2d\u7684\u53ef\u7528\u8282\u70b9\u5217\u8868\u662fGossip\u534f\u8bae\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u4e4b\u4e00\u3002\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u3002 \n[Swim-Gossip]\u4f7f\u7528\u4e00\u4e2a\u5355\u72ec\u7684\u63a2\u6d4b\u7ec4\u4ef6\uff0c\u8be5\u7ec4\u4ef6\u5728\u7fa4\u96c6\u4e2d\u8fde\u7eed\u63a2\u6d4b\u7fa4\u96c6\u4e2d\u7684\u4e0d\u540c\u8282\u70b9\u4ee5\u68c0\u6d4b\u5b83\u4eec\u662f\u5426\u53ef\u7528\u3002\u5982\u679c\u68c0\u6d4b\u5230\u8282\u70b9\u662f\u6d3b\u7740\u7684\u6216\u6b7b\u4ea1\uff0c\u5219\u8be5\u7ed3\u679c\u4e0e\u516b\u5366\u901a\u4fe1\u4f20\u64ad\u5230\u6574\u4e2a\u7fa4\u96c6\u3002\u63a2\u6d4b\u5668\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u4ee5\u53d1\u9001\u516b\u5366\u6d88\u606f\u3002\u5982\u679c\u63a5\u6536\u8282\u70b9\u68c0\u6d4b\u5230\u8fd9\u662f\u65b0\u4fe1\u606f\uff0c\u5219\u4f1a\u7acb\u5373\u5c06\u6d88\u606f\u53d1\u9001\u5230\u968f\u673a\u9009\u62e9\u7684\u8282\u70b9\u3002\u8fd9\u6837\uff0c\u6574\u4e2a\u7fa4\u96c6\u5c06\u5728\u7fa4\u96c6\u4e2d\u5feb\u901f\u5df2\u77e5\u7fa4\u96c6\u4e2d\u7684\u8282\u70b9\u6216\u65b0\u8fde\u63a5\u7684\u8282\u70b9\u7684\u6545\u969c\u3002\n \u7fa4\u96c6\u8282\u70b9\u53ef\u4ee5\u5b9a\u671f\u66f4\u65b0\u81ea\u5df1\u7684\u72b6\u6001\u4ee5\u53cd\u6620\u5176\u5fc3\u8df3\u3002\u7136\u540e\u901a\u8fc7\u4ea4\u6362\u7684\u516b\u5b57\u6d88\u606f\u4f20\u64ad\u5230\u6574\u4e2a\u7fa4\u96c6\u3002\u7136\u540e\uff0c\u6bcf\u4e2a\u7fa4\u96c6\u8282\u70b9\u53ef\u4ee5\u68c0\u67e5\u5b83\u662f\u5426\u5df2\u5728\u56fa\u5b9a\u7684\u65f6\u95f4\u5185\u63a5\u6536\u5230\u7279\u5b9a\u7fa4\u96c6\u8282\u70b9\u7684\u4efb\u4f55\u66f4\u65b0\uff0c\u6216\u8005\u5c06\u8282\u70b9\u7684\u6807\u8bb0\u4e3a\u4e0b\u964d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u7fa4\u96c6\u8282\u70b9\u72ec\u7acb\u5730\u786e\u5b9a\u8282\u70b9\u662f\u5426\u4e0a\u6216\u5411\u4e0b\u3002\n \u5982\u679c\u8282\u70b9\u5d29\u6e83\u6216\u91cd\u65b0\u542f\u52a8\uff0c\u5219\u7248\u672c\u540e\u7684\u503c\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u6240\u6709\u5185\u5b58\u72b6\u6001\u90fd\u4e22\u5931\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8282\u70b9\u53ef\u4ee5\u5bf9\u76f8\u540c\u952e\u5177\u6709\u4e0d\u540c\u7684\u503c\u3002\u4f8b\u5982\uff0c\u7fa4\u96c6\u8282\u70b9\u53ef\u4ee5\u4ee5\u4e0d\u540c\u7684IP\u5730\u5740\u548c\u7aef\u53e3\u542f\u52a8\uff0c\u6216\u8005\u53ef\u4ee5\u4ee5\u4e0d\u540c\u7684\u914d\u7f6e\u5f00\u59cb\u3002\u751f\u6210\u65f6\u949f\u53ef\u7528\u4e8e\u6807\u8bb0\u6bcf\u4e2a\u503c\u7684\u751f\u6210\uff0c\u4ece\u800c\u5f53\u5143\u6570\u636e\u72b6\u6001\u88ab\u53d1\u9001\u5230\u968f\u673a\u7c07\u8282\u70b9\u65f6\uff0c\u63a5\u6536\u8282\u70b9\u53ef\u4ee5\u68c0\u6d4b\u4e0d\u4ec5\u4ec5\u662f\u7531\u7248\u672c\u53f7\u7684\u53d8\u5316\uff0c\u8fd8\u53ef\u4ee5\u4e0e\u751f\u6210\u4e00\u8d77\u68c0\u6d4b\u3002\n \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u79cd\u673a\u5236\u4e0d\u662f\u5fc5\u9700\u7684\u6838\u5fc3\u516b\u5366\u534f\u8bae\u5de5\u4f5c\u3002\u4f46\u5b83\u5728\u5b9e\u8df5\u4e2d\u5b9e\u65bd\u4e86\u5b83\uff06\uff0339\uff0c\u4ee5\u786e\u4fdd\u6b63\u786e\u8ddf\u8e2a\u72b6\u6001\u66f4\u6539\u3002\n [Cassandra]\u4f7f\u7528Gossip\u534f\u8bae\u8fdb\u884c\u7ec4\u6210\u5458\u8eab\u4efd\u548c\u7fa4\u96c6\u8282\u70b9\u7684\u6545\u969c\u68c0\u6d4b\u3002\u8fd8\u4f7f\u7528GOSSIP\u534f\u8bae\u53d1\u9001\u8bf8\u5982\u5206\u914d\u7ed9\u6bcf\u4e2a\u7fa4\u96c6\u8282\u70b9\u7684\u4ee4\u724c\u7684\u6bcf\u4e2a\u7fa4\u96c6\u8282\u70b9\u7684\u5143\u6570\u636e\u3002\n   BlockChain\u5b9e\u73b0\uff0c\u5982Hyperlowger Fabric\uff0c\u4f7f\u7528Gossip\u534f\u8bae\u8fdb\u884c\u7ec4\u6210\u5458\u8eab\u4efd\u548c\u53d1\u9001\u5206\u7c7b\u5e10\u5143\u6570\u636e\u3002 ", "note_en": "Use random selection of nodes to pass on information to ensure it reaches all the nodes in the cluster without flooding the network\n  In a cluster of nodes, each node needs to pass metadata information it has, to all the other nodes in the cluster, without depending on a shared storage. In a large cluster, if all servers communicate with all the other servers, a lot of network bandwidth can be consumed. Information should reach all the nodes even when some network links are experiencing issues.\n Cluster nodes use gossip style communication to propagate state updates. Each node selects a random node to pass the information it has. This is done at a regular interval, say every 1 second. Each time, a random node is selected to pass on the information.\n   The messages should not consume a lot of network bandwidth. There should be an upper bound of say a few hundred Kbs, making sure that the applications&#39; data transfer is not impacted by too many messages across the cluster.\n The metadata propagation should tolerate network and a few server failures. It should reach all the cluster nodes even if a few network links are down, or a few servers have failed.\n  Each cluster nodes stores the metadata as a list of key value pairs associated with each node in the cluster as following:\n     At startup, each cluster node adds the metadata about itself, which needs to be propagated to other nodes. An example of metadata can be the IP address and port the node listens on, the partitions it&#39;s responsible for, etc. The Gossip instance needs to know about at least one other node to start the gossip communication. The well known cluster node, which is used to initialize the Gossip instance is called as a seed node or an introducer. Any node can act as an introducer.\n  public Gossip(InetAddressAndPort listenAddress, List&lt;InetAddressAndPort&gt; seedNodes, String nodeId) throws IOException { this.listenAddress = listenAddress; //filter this node itself in case its part of the seed nodes this.seedNodes = removeSelfAddress(seedNodes); this.nodeId = new NodeId(nodeId);  addLocalState(GossipKeys.ADDRESS, listenAddress.toString()); this.socketServer = new NIOSocketListener(newGossipRequestConsumer(), listenAddress); } private void addLocalState(String key, String value) { NodeState nodeState = clusterMetadata.get(listenAddress); if (nodeState == null) { nodeState = new NodeState(); clusterMetadata.put(nodeId, nodeState); } nodeState.add(key, new VersionedValue(value, incremenetVersion())); }\n Each cluster node schedules a job to transmit the metadata it has to other nodes at regular intervals.\n  private ScheduledThreadPoolExecutor gossipExecutor = new ScheduledThreadPoolExecutor(1); private long gossipIntervalMs = 1000; private ScheduledFuture&lt;?&gt; taskFuture; public void start() { socketServer.start(); taskFuture = gossipExecutor.scheduleAtFixedRate(()-&gt; doGossip(), gossipIntervalMs, gossipIntervalMs, TimeUnit.MILLISECONDS); }\n When the scheduled task is invoked, it picks up a small set of random nodes from the list of servers from the metadata map. A small constant number, defined as Gossip fanout, determines how many nodes to pick up as gossip targets. If nothing is known yet, it picks up a random seed node and sends the metadata map it has to that node.\n  public void doGossip() { List&lt;InetAddressAndPort&gt; knownClusterNodes = liveNodes(); if (knownClusterNodes.isEmpty()) { sendGossip(seedNodes, gossipFanout); } else { sendGossip(knownClusterNodes, gossipFanout); } } private List&lt;InetAddressAndPort&gt; liveNodes() { Set&lt;InetAddressAndPort&gt; nodes = clusterMetadata.values() .stream() .map(n -&gt; InetAddressAndPort.parse(n.get(GossipKeys.ADDRESS).getValue())) .collect(Collectors.toSet()); return removeSelfAddress(nodes); }\n  private void sendGossip(List&lt;InetAddressAndPort&gt; knownClusterNodes, int gossipFanout) { if (knownClusterNodes.isEmpty()) { return; } for (int i = 0; i &lt; gossipFanout; i++) {  InetAddressAndPort nodeAddress = pickRandomNode(knownClusterNodes); sendGossipTo(nodeAddress); }}private void sendGossipTo(InetAddressAndPort nodeAddress) { try { getLogger().info(&#34;Sending gossip state to &#34; + nodeAddress); SocketClient&lt;RequestOrResponse&gt; socketClient = new SocketClient(nodeAddress); GossipStateMessage gossipStateMessage = new GossipStateMessage(this.clusterMetadata); RequestOrResponse request = createGossipStateRequest(gossipStateMessage); byte[] responseBytes = socketClient.blockingSend(request); GossipStateMessage responseState = deserialize(responseBytes); merge(responseState.getNodeStates()); } catch (IOException e) { getLogger().error(&#34;IO error while sending gossip state to &#34; + nodeAddress, e); }}private RequestOrResponse createGossipStateRequest(GossipStateMessage gossipStateMessage) { return new RequestOrResponse(RequestId.PushPullGossipState.getId(), JsonSerDes.serialize(gossipStateMessage), correlationId++);}\n The cluster node receiving the gossip message inspects the metadata it has and finds three things.\n The values which are in the incoming message but not available in this node&#39;s state map\n  The higher version value is chosen when the node has the values present in the incoming message\n It then adds the missing values to its own state map. Whatever values were missing from the incoming message, are returned as a response.\n The cluster node sending the Gossip message adds the values it gets from the gossip response to its own state.\n  private void handleGossipRequest(org.distrib.patterns.common.Message&lt;RequestOrResponse&gt; request) { GossipStateMessage gossipStateMessage = deserialize(request.getRequest()); Map&lt;NodeId, NodeState&gt; gossipedState = gossipStateMessage.getNodeStates(); getLogger().info(&#34;Merging state from &#34; + request.getClientSocket()); merge(gossipedState); Map&lt;NodeId, NodeState&gt; diff = delta(this.clusterMetadata, gossipedState); GossipStateMessage diffResponse = new GossipStateMessage(diff); getLogger().info(&#34;Sending diff response &#34; + diff); request.getClientSocket().write(new RequestOrResponse(RequestId.PushPullGossipState.getId(), JsonSerDes.serialize(diffResponse), request.getRequest().getCorrelationId())); }\n public Map&lt;NodeId, NodeState&gt; delta(Map&lt;NodeId, NodeState&gt; fromMap, Map&lt;NodeId, NodeState&gt; toMap) { Map&lt;NodeId, NodeState&gt; delta = new HashMap&lt;&gt;(); for (NodeId key : fromMap.keySet()) { if (!toMap.containsKey(key)) { delta.put(key, fromMap.get(key)); continue; } NodeState fromStates = fromMap.get(key); NodeState toStates = toMap.get(key); NodeState diffStates = fromStates.diff(toStates); if (!diffStates.isEmpty()) { delta.put(key, diffStates); } } return delta;}\n public void merge(Map&lt;NodeId, NodeState&gt; otherState) { Map&lt;NodeId, NodeState&gt; diff = delta(otherState, this.clusterMetadata); for (NodeId diffKey : diff.keySet()) { if(!this.clusterMetadata.containsKey(diffKey)) { this.clusterMetadata.put(diffKey, diff.get(diffKey)); } else { NodeState stateMap = this.clusterMetadata.get(diffKey); stateMap.putAll(diff.get(diffKey)); } }}\n This process happens every one second at each cluster node, each time selecting a different node to exchange the state.\n The above code example shows that the complete state of the node is sent in the Gossip message. This is fine for a newly joined node, but once the state is up to date, it&#39;s unnecessary to send the complete state. The cluster node just needs to send the state changes since the last gossip. For achieving this, each node maintains a version number which is incremented every time a new metadata entry is added locally.\n   Each value in the cluster metadata is maintained with a version number. This is an example of pattern  Versioned Value.\n  int version; String value; public VersionedValue(String value, int version) { this.version = version; this.value = value; } public int getVersion() { return version; } public String getValue() { return value; }\n   private void sendKnownVersions(InetAddressAndPort gossipTo) throws IOException { Map&lt;NodeId, Integer&gt; maxKnownNodeVersions = getMaxKnownNodeVersions(); RequestOrResponse knownVersionRequest = new RequestOrResponse(RequestId.GossipVersions.getId(), JsonSerDes.serialize(new GossipStateVersions(maxKnownNodeVersions)), 0); SocketClient&lt;RequestOrResponse&gt; socketClient = new SocketClient(gossipTo); byte[] knownVersionResponseBytes = socketClient.blockingSend(knownVersionRequest); } private Map&lt;NodeId, Integer&gt; getMaxKnownNodeVersions() { return clusterMetadata.entrySet() .stream() .collect(Collectors.toMap(e -&gt; e.getKey(), e -&gt; e.getValue().maxVersion())); }\n   The receiving node can then send the values only if the versions are greater than the ones in the request.\n  Map&lt;NodeId, NodeState&gt; getMissingAndNodeStatesHigherThan(Map&lt;NodeId, Integer&gt; nodeMaxVersions) { Map&lt;NodeId, NodeState&gt; delta = new HashMap&lt;&gt;(); delta.putAll(higherVersionedNodeStates(nodeMaxVersions)); delta.putAll(missingNodeStates(nodeMaxVersions)); return delta; } private Map&lt;NodeId, NodeState&gt; missingNodeStates(Map&lt;NodeId, Integer&gt; nodeMaxVersions) { Map&lt;NodeId, NodeState&gt; delta = new HashMap&lt;&gt;(); List&lt;NodeId&gt; missingKeys = clusterMetadata.keySet().stream().filter(key -&gt; !nodeMaxVersions.containsKey(key)).collect(Collectors.toList()); for (NodeId missingKey : missingKeys) { delta.put(missingKey, clusterMetadata.get(missingKey)); } return delta; } private Map&lt;NodeId, NodeState&gt; higherVersionedNodeStates(Map&lt;NodeId, Integer&gt; nodeMaxVersions) { Map&lt;NodeId, NodeState&gt; delta = new HashMap&lt;&gt;(); Set&lt;NodeId&gt; keySet = nodeMaxVersions.keySet(); for (NodeId node : keySet) { Integer maxVersion = nodeMaxVersions.get(node); NodeState nodeState = clusterMetadata.get(node); if (nodeState == null) { continue; } NodeState deltaState = nodeState.statesGreaterThan(maxVersion); if (!deltaState.isEmpty()) { delta.put(node, deltaState); } } return delta; }\n Gossip implementation in  [cassandra] optimizes state exchange with a three-way handshake, where the node receiving the gossip message also sends the versions it needs from the sender, along with the metadata it returns. The sender can then immediately respond with the requested metadata. This avoids an extra message that otherwise would have been required.\n Gossip protocol used in  [cockroachdb] maintains state for each connected node. For each connection, it maintains the last version sent to that node, and the version received from that node. This is so that it can send &#39;state since the last sent version&#39; and ask for &#39;state from the last received version&#39;.\n Some other efficient alternatives can be used as well, sending a hash of the entire Map and if the hash is the same, then doing nothing.\n Cluster nodes randomly select the node to send the Gossip message. An example implementation in Java can use java.util.Random as following:\n  private Random random = new Random(); private InetAddressAndPort pickRandomNode(List&lt;InetAddressAndPort&gt; knownClusterNodes) { int randomNodeIndex = random.nextInt(knownClusterNodes.size()); InetAddressAndPort gossipTo = knownClusterNodes.get(randomNodeIndex); return gossipTo; }\n There can be other considerations such as the node that is least contacted with. For example, Gossip protocol in  Cockroachdb selects nodes this way.\n Maintaining the list of available nodes in the cluster is one of the most common usage of Gossip protocols. There are two approaches in use.\n [swim-gossip] uses a separate probing component which continuously probes different nodes in the cluster to detect if they are available. If it detects that the node is alive or dead, that result is propagated to the entire cluster with Gossip communication. The prober randomly selects a node to send the Gossip message. If the receiving node detects that this is new information, it immediately sends the message to a randomly selected node. This way, the failure of a node or newly joined node in the cluster is quickly known to the entire cluster.\n The cluster node can periodically update its own state to reflect its heartbeat. This state is then propagated to the entire cluster through the gossip messages exchanged. Each cluster node can then check if it has received any update for a particular cluster node in a fixed amount of time or else mark that node as down. In this case, each cluster node independently determines if a node is up or down.\n The versioned values does not work well if the node crashes or restarts, as all the in-memory state is lost. More importantly, the node can have different values for the same key. For example, the cluster node can start with a different IP address and port, or can start with a different configuration.  Generation Clock can be used to mark generation with every value, so that when the metadata state is sent to a random cluster node, the receiving node can detect changes not just by the version number, but also with the generation.\n It is useful to note that this mechanism is not necessary for the core Gossip protocol to work. But it&#39;s implemented in practice to make sure that the state changes are tracked correctly.\n [cassandra] uses Gossip protocol for the group membership and failure detection of cluster nodes. Metadata for each cluster node such as the tokens assigned to each cluster node, is also transmitted using Gossip protocol.\n   Blockchain implementations such as  Hyperledger Fabric use Gossip protocol for group membership and sending ledger metadata.", "posttime": "2021-06-20 13:14:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u516b\u5366,gossip,\u8282\u70b9", "title": "\u516b\u5366\u4f20\u64ad ", "title_en": "Gossip Dissemination", "transed": 1, "url": "https://martinfowler.com/articles/patterns-of-distributed-systems/gossip-dissemination.html", "via": "", "real_tags": ["\u516b\u5366", "gossip", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "afab6ba73b70acbe35cb9d128ff6eea4.jpeg", "infoid": 1066988, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\n\u8fd9\u662f\u6709\u8da3\u7684\u4e8b\u60c5\uff0c\u540c\u6837\u7684\u4eba\u7edd\u5bf9\u575a\u6301\uff0c\u6559\u4f1a\u56fe\u7075\u8bba\u6587\u610f\u5473\u7740Muh\u7535\u8111\u662f\u4e00\u5207\u7684\u5168\u90e8\u5f3a\u5927\u7684\u6a21\u62df\u5668\uff0c\u6216\u8005\u91cd\u590dAI\u5c06\u53d6\u4ee3\u6bcf\u4e2a\u4eba\u7684\u5de5\u4f5c\u5c06\u63d0\u51fa\u7cbe\u5fc3\u5236\u4f5c\u7684\u539f\u56e0\uff0c\u4e3a\u4ec0\u4e48\u4e0a\u9762\u5217\u51fa\u7684\u8fd9\u4e9b\u4e1c\u897f\u4e5f\u662f\u5982\u6b64\u5c3d\u7ba1\u5927\u591a\u6570\u4eba\u5728\u8ba1\u7b97\u673a\u5de5\u7a0b\u4e2d\u7684VLSI\u65f6\u4ee3\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u4f46\u96be\u4ee5\u5b9e\u73b0\u3002\u73b0\u5b9e\u662f\u4ed6\u4eec\u90fd\u5f88\u6709\u53ef\u80fd\uff0c\u4f46\u6ca1\u6709\u4eba\u8d5a\u94b1\u3002\u5de5\u7a0b\u5e08\u662f\u4e00\u4e2a\u88ab\u51fb\u8d25\u7684\u90e8\u843d;\u8058\u8bf7\u4e00\u4e2a\u201cAI\u201d\uff08\u5916\u661f\u4eba\u6216\u79fb\u6c11\uff09\u5974\u96b6\u66f4\u4fbf\u5b9c\uff0c\u4ee5\u5199\u4e0bTerraform\u6216\u7535\u5b50\u524d\u7aef\uff0c\u800c\u4e0d\u662f\u652f\u4ed8\u5de7\u5999\u7684\u5de5\u7a0b\u5e08\uff0c\u8db3\u4ee5\u5efa\u7acb\u81ea\u5df1\u7684\u5de5\u5177\uff0c\u4f7f\u4ed6\u4eec\u66f4\u52a0\u5bcc\u6709\u6210\u6548\uff0c\u4e16\u754c\u66f4\u597d\u3002\u6d88\u8d39\u8005\u5c06\u5438\u6536\u5b83\u5e76\u968f\u7740\u8ba1\u5212\u8fc7\u65f6\u8d2d\u4e70\u66f4\u591a\u7684\u5185\u5b58\uff0c\u5e76\u4f7f\u786c\u4ef6\u884c\u4e1a\u5728\u5546\u4e1a\u4e2d\u3002\u8ba1\u7b97\u673a\u4e0d\u662f\u4e3a\u4e86\u8ba9\u4f60\u7684\u751f\u6d3b\u66f4\u8f7b\u677e;\u4ed6\u4eec\u662f\u4e3a\u4e86\u76d1\u7763\u548c\u8425\u9500\uff0c\u4e3a\u5236\u9020\u5546\u63d0\u4f9b\u6d88\u8d39\u8005\u7684\u597d\uff0c\u4ed6\u4eec\u5e0c\u671b\u60a8\u8d2d\u4e70\u5927\u91cf\u9644\u52a0\u7ec4\u4ef6\u548c\u5347\u7ea7\uff0c\u5e76\u5c3d\u5feb\u78e8\u635f\u3002 ", "note_en": "There are a number of things that people theoretically know how to do, but which aren\u2019t possible because of how software gets made. Some of these are almost forgotten, but there are at least examples of all of them in existence.\n Automated FFI parsers. In 2021 I should be able to point any interpreted language at a C include file and have all the functions described in it turned into reasonably safe FFIed function calls, complete with autogenerated documentation. For example, if I want javascript calls to libsodium, I shouldn\u2019t have to write anything; javascript knows about C APIs. I\u2019m not asking for runtimes to talk to each other, you can keep up the insipid RPC-serialization conga dance for that. I\u2019m just asking for a technology that encapsulates C (and Fortran and \u2026. maybe C++) function calls and makes them accessible to other runtimes without actually doing any work. Of course parsers that do useful things are hard; people would rather write new serialization protocols. There will always be exceptions where such things don\u2019t work, but you should be able to do 95% of the work using metaprogramming. Crap that runs on the JVM; same story -not only could you technically parse .h files and turn them into JNI, you should be able to have all your hooks into Clojure or Scala or whatever without writing anything. Clojure at least seems well equipped to do it, but I\u2019m pretty sure this hasn\u2019t happened yet. You see pieces of  this idea  here and  there, but like everything else about modernity, they suck.\n While I\u2019m talking about FFIs to high level languages, how about a VM that recognizes that it is not a unique snowflake, and that sometimes you have to call a function which may allocate memory outside its stack or something similarly routine but insane. Most VM designs I\u2019ve seen are basically just student exercises; why not assume the outside world exists and has useful things to say? I think Racket has some good  ideas in this domain, but I\u2019m pretty sure it could be done better and there should be a higher standard.\n Cloud providers should admit they\u2019re basically mainframes and write an operating system instead of the ad-hoc collection of horse shit they foist on developers. Imagine if the EC2 were as clean as, I dunno,  z/OS, which has more or less been around since the 1960s. That would be pretty cool. I could read a single book instead of 100 books on all the myriad tools and services and frameworks offered by Oligarch Bezos. He would be hailed as a Jobs-like technical innovator if he had some of his slaves do this, and he would be remembered with gratitude, rather than as the sperdo who dumped his wife for sexorz with lip filler  Cthulhu. There\u2019s no excuse for this from an engineering perspective; Bezos was smart enough to know he was going to do timesharing, he was also smart enough to constrain the spaghetti into something resembling an OS. Same story with all the other cloud services. Really, they should all run like Heroku and you\u2019d never notice they were there. You could also draw flowcharts for most of this shit and replace devops with something that looks like labview. Nobody will do that either, as innovation in core software engineering, or even learning from the past in core software engineering is basically dead.\n Front ends could be drag and drop native GUIs instead of electron apps. There are still examples of this around, but it seems to be a dying paradigm. It\u2019s fascinating to me that people find it easier to write a pile of React and HTML on top of electron rather than dragging and dropping native widgets for a framework like we did in the old days. Literally this was possible on a 286 PC/XT running DOS; it worked great, looked great, had fewer problems. You know why it doesn\u2019t get done? Because doing it is kind of hard, and electron apps are \u201ceasy\u201d in that there are tons of cheap, fungible engineers with those skills.\u00a0 In general  native GUI frameworks are shit and they almost never include a GUI to develop them in. Even if you made something not as shitty as electron; maybe something that took 10mb instead of 500mb and didn\u2019t gobble up all memory on your system that would be amazing. This is completely possible. People used to make GUI frameworks which did  more than electron apps, looked better and fit in the tens of kilobytes range.\n Compilers and interpreters should learn how modern computers work. Pretty much all compilers and interpreters think computers are a PDP-11 stack machine. There are consequences to this everyone knows about: security is fairly execrable. There\u2019s other consequences though! For example, the fact that memory is godawful slow and there are multiple cache speeds is a very serious performance problem unless you\u2019re dealing with trivial amounts of memory. There are no compilers which can help you with this, unless you count meta-compilers on limited problems like ATLAS-BLAS or FFTW. There are a few interpreted languages whose designers have awareness of this and at least don\u2019t fight the OS over these facts, or attempt to insist they\u2019re really running on a PDP-11.\n Operating systems don\u2019t have to look like your crazy hoarder aunt\u2019s house. I know it\u2019s hard to believe, but in my lifetime there were excellent multitasking operating systems with superior GUIs, networking, development toolchains, RTOS subsystems, cryptography that made the NSA nervous, and they all fit on a  70mb tape drive, and they would support something like 20 people checking their email and compiling Fortran for general relativity calculations from emacs terms. Meanwhile, my phone needs a constant diet of gigabyte upgrades to continue functioning reliably as a fucking telephone; telephones theoretically don\u2019t even need a single transistor. Even my linux machines are ridiculously bloated and seem to require daily updates and patches. Why does shit like DPDK exist? Because your OS is stuck in the 1990s when ethernet was 10mbps. There\u2019s zero reason or excuse for this, other than modern programmers are like your crazy hoarder aunt because storage is cheap and competent coder time is expensive. Clean OS design has a lot of follow on benefits, such as rare patching, higher security and lower maintenance in general. I have 4 objects in my house who require constant OS\u00a0 upgrades (used to be 5, but my macbook committed suicide after an \u201cOS upgrade\u201d so I now use it as a paperweight), not including my TV or my car; make a cleaner OS and life actually gets better instead of everyone being a sort of shitty IT slave to keep their refrigerator and telephone running.\u00a0Instead of a nice OS, current year innovation\u00a0 is the open source \u201c code of conduct\u201d -apparently hoping you\u2019ll attract enough people mentally ill enough to work for free, but sane enough to do useful work; arguably a narrow demographic.\n The funny thing is, the same people who absolutely insist that the Church Turing thesis means muh computer is all-powerful simulator of everything, or repeat the fantasy that AI will replace everyone\u2019s jobs will come up with elaborate reasons why these things listed above are too hard to achieve in the corporeal world, despite most of them being solved problems from the VLSI era of computer engineering. The reality is they\u2019re all quite possible, but nobody makes money doing them. Engineers are a defeated tribe; it\u2019s cheaper to hire an \u201cAI\u201d (Alien or Immigrant) slave to write the terraform or electron front end rather than paying clever engineers well enough to build themselves useful tooling to make them more productive and the world a better place. Consumers will suck it up and buy more memory, along with planned obsolescence, keeping the hardware industry in business. Computers aren\u2019t for making your life easier; they\u2019re for surveillance and marketing, and for manufacturers a consumer good they hope you buy lots of add-ons and\u00a0 upgrades for, and which wears out as soon as possible.", "posttime": "2021-06-20 13:14:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,software,\u8d2d\u4e70", "title": "\u660e\u663e\u548c\u53ef\u80fd\u7684\u8f6f\u4ef6\u521b\u65b0\u6ca1\u6709\u4eba ", "title_en": "Obvious and possible software innovations nobody does", "transed": 1, "url": "https://scottlocklin.wordpress.com/2021/04/01/obvious-and-possible-software-innovations-nobody-does/", "via": "", "real_tags": ["\u8f6f\u4ef6", "software", "\u8d2d\u4e70"]}, {"category": "", "categoryclass": "", "imagename": "672c80ec836afacf0491f39ecd8ee8f8.jpg", "infoid": 1066987, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "OpenZFS\u521b\u5efa\u5f00\u53d1\u4eba\u5458Matthew Ahrens\u5c06\u4e8e\u4e0a\u5468\u5c06ZFS History-Raidz\u6269\u5c55\u5927\u5e08\u7684\u6700\u8ffd\u6367\u7684\u7279\u5f81\u5408\u5e76\u5230\u8239\u8236\u4e2d\u3002\u65b0\u529f\u80fd\u5141\u8bb8ZFS\u7528\u6237\u6269\u5c55\u5355\u4e2aRAIDZ VDev\u7684\u5927\u5c0f\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u65b0\u529f\u80fd\u5c06\u4e09\u4e2a\u78c1\u76d8RAIDZ1\u8f6c\u6362\u4e3a\u56db\u4e2a\uff0c\u4e94\u4e2a\u6216\u516d\u4e2aRAIDZ1\u3002\n  OpenZFS\u662f\u4e00\u4e2a\u590d\u6742\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e8b\u7269\u5fc5\u7136\u4f1a\u6709\u70b9\u5480\u56bc\uff0c\u89e3\u91ca\u4e86\u8be5\u529f\u80fd\u7684\u5de5\u4f5c\u539f\u7406\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\uff06\uff0339; zfs newbie\uff0c\u4f60\u53ef\u80fd\u60f3\u56de\u5230\u6211\u4eec\u7684\u7efc\u5408zfs 101\u4ecb\u7ecd\u3002\u9664\u4e86\u4f5c\u4e3a\u6587\u4ef6\u7cfb\u7edf\u4e4b\u5916\uff0cZFS\u8fd8\u662f\u4e00\u4e2a\u5b58\u50a8\u9635\u5217\u548c\u5377\u7ba1\u7406\u5668\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5c06\u5176\u9001\u5230\u6574\u4e2a\u78c1\u76d8\u8bbe\u5907\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u78c1\u76d8\u8bbe\u5907\u3002 ZFS\u5b58\u50a8\u7cfb\u7edf\u7684\u6838\u5fc3\u662fZPool  - \u8fd9\u662fZFS\u5b58\u50a8\u6700\u57fa\u672c\u7684\u7ea7\u522b\u3002 ZPool\u53c8\u5305\u542bvdevs\uff0cVdevs\u5305\u542b\u5b83\u4eec\u4e2d\u7684\u5b9e\u9645\u78c1\u76d8\u3002\u5199\u5165\u62c6\u5206\u4e3a\u79f0\u4e3a\u8bb0\u5f55\u6216\u5757\u7684\u5355\u4f4d\uff0c\u7136\u540e\u5728VDEV\u4e2d\u534a\u5747\u5300\u5730\u5206\u53d1\u3002\n \u5b58\u50a8vdev\u53ef\u4ee5\u662f\u4e94\u79cd\u78c1\u76d8\uff0c\u955c\u50cf\uff0cRAIDZ1\uff0cRAIDZ2\u6216RAIDZ3\u4e2d\u7684\u4e94\u79cd\u7c7b\u578b\u4e4b\u4e00\u3002\u60a8\u53ef\u4ee5\u5c06\u66f4\u591aVDEV\u6dfb\u52a0\u5230ZPool\uff0c\u60a8\u53ef\u4ee5\u5c06\u66f4\u591a\u78c1\u76d8\u9644\u52a0\u5230\u5355\u4e2a\u6216\u955c\u50cfvdev\u3002\u4f46\u662f\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7ba1\u7406\u5b58\u50a8\u9700\u8981\u4e00\u4e9b\u8ba1\u5212\uff0c\u5e76\u9884\u7b97 - \u54ea\u4e9b\u4e1a\u4f59\u7231\u597d\u8005\u548c\u5bb6\u5ead\u4e3b\u5987\u7ecf\u5e38areN\uff06\uff0339; t\u592a\u70ed\u60c5\u3002\n \u4f20\u7edf\u7684RAID\uff0c\u4e0d\u5171\u4eab\uff06\uff0334;\u6c60\uff06\uff0334; ZFS\u7684\u6982\u5ff5\u901a\u5e38\u63d0\u4f9b\u6269\u5c55\u548c/\u6216\u91cd\u5851\u9635\u5217\u7684\u80fd\u529b\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06\u5355\u4e2a\u78c1\u76d8\u6dfb\u52a0\u5230\u516d\u4e2a\u78c1\u76d8RAID6\u6570\u7ec4\u4e2d\uff0c\u4ece\u800c\u5c06\u5176\u8f6c\u6362\u4e3a\u4e03\u78c1\u76d8RAID6\u9635\u5217\u3002\u6b63\u5728\u8fdb\u884c\u7684\u6d3b\u86cb\u767d\uff0c\u7279\u522b\u662f\u75db\u82e6\uff0c\u7279\u522b\u662f\u5728\u51e0\u4e4e\u5168\u9635\u5217\u4e0a;\u5b83\u5b8c\u5168\u53ef\u80fd\u9700\u8981\u8fd9\u6837\u7684\u4efb\u52a1\u53ef\u80fd\u9700\u8981\u4e00\u5468\u6216\u66f4\u957f\u65f6\u95f4\uff0c\u9635\u5217\u6027\u80fd\u9650\u5236\u5728\u6574\u4e2a\u65f6\u95f4\u7684\u6b63\u5e38\u5e38\u89c4\u6216\u66f4\u5c11\u3002\n \u4ece\u5386\u53f2\u4e0a\u770b\uff0cZFS\u5df2\u7ecf\u907f\u514d\u4e86\u8fd9\u79cd\u6269\u5c55\u3002 ZFS\u6700\u521d\u662f\u4e3a\u5546\u4e1a\u7528\u9014\u800c\u5f00\u53d1\u7684\uff0c\u800c\u5b9e\u65f6\u9635\u5217\u91cd\u65b0\u5851\u9020\u901a\u5e38\u662f\u5546\u4e1a\u4e16\u754c\u4e2d\u7684\u975e\u542f\u52a8\u5668\u3002\u5c06\u5b58\u50a8\uff06\uff0339;\u5728\u6700\u7ec8\u7684\u65e5\u5b50\u4e2d\u5bf9\u65e0\u6cd5\u4f7f\u7528\u7684\u6c34\u5e73\u4e22\u5f03\uff0c\u901a\u5e38\u5728\u5de5\u8d44\u5355\u548c\u5f00\u9500\u4e2d\u7684\u6210\u672c\u66f4\u591a\uff0c\u800c\u4e0d\u662f\u8d2d\u4e70\u5b8c\u5168\u65b0\u7684\u786c\u4ef6\u3002\u73b0\u573a\u6269\u5c55\u4e5f\u662f\u975e\u5e38\u5371\u9669\u7684\uff0c\u56e0\u4e3a\u5b83\u6d89\u53ca\u9605\u8bfb\u548c\u91cd\u5199\u6240\u6709\u6570\u636e\u5e76\u5c06\u9635\u5217\u653e\u5728\u4e34\u65f6\uff0c\u8fdc\u8fdc\u826f\u597d\u7684\u6d4b\u8bd5\u4e2d\uff0c\u800c\uff0334;\u4e00\u534a\uff0c\u4e00\u534a\uff0c\uff06\uff0334;\u6761\u4ef6\u76f4\u5230\u5b83\u5b8c\u6210\u3002\n \u5bf9\u4e8e\u5177\u6709\u8bb8\u591a\u78c1\u76d8\u7684\u7528\u6237\u6765\u8bf4\uff0c\u65b0\u7684RAIDZ\u6269\u5c55\u4e0d\u592a\u53ef\u80fd\u6539\u53d8\u5b83\u4eec\u4f7f\u7528ZFS\u7684\u65b9\u5f0f\u3002\u5c06VDEVS\u89c6\u4e3a\u5b8c\u6574\u7684\u5355\u4f4d\u800c\u4e0d\u662f\u5c1d\u8bd5\u5728\u5b83\u4eec\u5185\u90e8\u6363\u788e\uff0c\u5b83\u4ecd\u7136\u66f4\u5bb9\u6613\u4e14\u66f4\u52a0\u5b9e\u7528\u3002\u4f46\u662f\uff0c\u4f7f\u7528\u5355\u4e2avdev\u8fd0\u884cZFS\u7684\u4e1a\u4f59\u7231\u597d\u8005\uff0cHomeBerbers\u548c\u5c0f\u7528\u6237\u53ef\u80fd\u4f1a\u5728\u65b0\u529f\u80fd\u4e2d\u83b7\u5f97\u5927\u91cf\u4f7f\u7528\u3002\n   \u4ece\u5b9e\u9645\u7684\u89d2\u5ea6\u6765\u770b\uff0cAhrens\uff06\uff0339;\u65b0\u7684VDev\u6269\u5c55\u529f\u80fd\u4ec5\u4e3a\u73b0\u6709\u547d\u4ee4\u6dfb\u52a0\u65b0\u529f\u80fd\uff0c\u5373ZPool Attach\uff0c\u901a\u5e38\u7528\u4e8e\u5c06\u78c1\u76d8\u6dfb\u52a0\u5230\u5355\u4e2a\u78c1\u76d8VDEV\uff08\u5c06\u5176\u8f6c\u6362\u4e3a\u955c\u50cfVdev\uff09\u6216\u5c06\u989d\u5916\u78c1\u76d8\u6dfb\u52a0\u5230\u955c\u5b50\uff08for\u793a\u4f8b\uff0c\u5c06\u53cc\u78c1\u76d8\u955c\u50cf\u8f6c\u6362\u4e3a\u4e09\u4e2a\u78c1\u76d8\u955c\u50cf\uff09\u3002 \n\u4f7f\u7528\u65b0\u7684\u4ee3\u7801\uff0c\u60a8\u4e5f\u80fd\u5c06\u65b0\u78c1\u76d8\u9644\u52a0\u5230\u73b0\u6709\u7684RAIDZ VDEV\u3002\u8fd9\u6837\u505a\u6269\u5c55\u4e86\u5bbd\u5ea6\u7684vdev\uff0c\u4f46\u4e0d\u4f1a\u66f4\u6539vdev\u7c7b\u578b\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5c06\u4e00\u4e2a\u516d\u78c1\u76d8RAIDZ2 VDEV\u8f6c\u6362\u4e3a\u4e03\u78c1\u76d8RAIDZ2 VDEV\uff0c\u4f46\u60a8\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a\u4e03\u78c1\u76d8RAIDZ3\u3002\n \u5728\u53d1\u51faZPool\u9644\u4ef6\u547d\u4ee4\u540e\uff0c\u6269\u5c55\u5f00\u59cb\u3002\u5728\u6269\u5c55\u671f\u95f4\uff0c\u6bcf\u4e2a\u5757\u6216\u8bb0\u5f55\u4ecevdev\u8bfb\u53d6\u6b63\u5728\u6269\u5c55\uff0c\u7136\u540e\u91cd\u5199\u3002\u91cd\u5199\u5757\u7684\u6247\u533a\u5728VDev\u4e2d\u7684\u6240\u6709\u78c1\u76d8\u4e2d\u5206\u53d1\uff0c\u5305\u62ec\u65b0\u78c1\u76d8\uff0c\u4f46\u6761\u5e26\u672c\u8eab\u7684\u5bbd\u5ea6\u4e0d\u4f1a\u6539\u53d8\u3002\u56e0\u6b64\uff0c\u5728\u6269\u5c55\u5b8c\u6210\u540e\uff0cRAIDZ2 VDEV\u4ece\u516d\u4e2a\u78c1\u76d8\u6269\u5c55\u5230\u5341\u5757\u4ecd\u7136\u4ecd\u7136\u5145\u6ee1\u516d\u4e2a\u6761\u7eb9\u3002\n \u56e0\u6b64\uff0c\u867d\u7136\u7528\u6237\u5c06\u770b\u5230\u65b0\u78c1\u76d8\u63d0\u4f9b\u7684\u989d\u5916\u7a7a\u95f4\uff0c\u4f46\u7531\u4e8e\u65b0\u78c1\u76d8\uff0c\u6269\u5c55\u6570\u636e\u7684\u5b58\u50a8\u6548\u7387\u4e0d\u4f1a\u6539\u8fdb\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u4e00\u4e2a\u516d\u76d8RAIDZ2\u5f00\u59cb\uff0c\u6807\u79f0\u5b58\u50a8\u6548\u7387\u4e3a67\uff05\uff08\u6bcf\u516d\u4e2a\u6247\u533a\u4e2d\u7684\u56db\u4e2a\u662f\u6570\u636e\uff09\u5230\u4e00\u4e2a\u5341\u76d8RAIDZ2\u3002\u65b0\u5199\u5165\u5341\u76d8RAIDZ2\u7684\u6570\u636e\u5177\u670980\uff05-\u516b\u4e2a\u6247\u533a\u7684\u6807\u79f0\u5b58\u50a8\u6548\u7387\u662f\u6570\u636e - \u4f46\u65e7\u7684\u6269\u5c55\u6570\u636e\u4ecd\u7136\u7528\u516d\u4e2a\u6761\u7eb9\u5199\u5165\uff0c\u56e0\u6b64\u5b83\u4ecd\u7136\u5177\u6709\u65e7\u7684\u50a8\u5b58\u6548\u7387\u65e7\u768467\uff05 \u3002\n \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u662f\u4e00\u4e2avdev\u7684\u610f\u5916\u6216\u5947\u5f02\u7684\u72b6\u6001\uff0c\u56e0\u4e3avdev\u662fraidz\u5df2\u7ecf\u4f7f\u7528\u52a8\u6001\uff0c\u53d8\u91cf\u200b\u200b\u6761\u5e26\u5bbd\u5bbd\u5ea6\u6765\u5360\u5757\u6216\u8bb0\u5f55\u592a\u5c0f\uff0c\u4ee5\u5728\u6240\u6709\u78c1\u76d8\u4e0a\u6761\u7eb9\u3002\u4e00\u4e2avdev\u3002\n \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7f16\u5199\u5355\u4e2a\u5143\u6570\u636e\u5757 - \u5305\u542b\u6587\u4ef6\uff06\uff0339; s\u540d\u79f0\uff0c\u6743\u9650\u548c\u78c1\u76d8\u4e0a\u7684\u4f4d\u7f6e\u7684\u6570\u636e - \u5b83\u9002\u5408\u78c1\u76d8\u4e0a\u7684\u5355\u4e2a\u6247\u533a\u3002\u5982\u679c\u60a8\u5c06\u5143\u6570\u636e\u5757\u5199\u5165\u4e00\u4e2a\u5341\u5bbd\u7684RAIDZ2\uff0c\u5219\u60a8\u4e0d\u4f1a\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u5341\u5bbd\u6761\u7eb9\uff0c\u800c\u662f\u5199\u4e00\u4e2a\u5c3a\u5bf8\u7684\u5757\u5bbd\u7684\u5757;\u5355\u4e2a\u6570\u636e\u6247\u533a\u52a0\u4e0a\u4e24\u4e2a\u5947\u5076\u6821\u957f\u6247\u533a\u3002\u6240\u4ee5\uff06\uff0334;\u5c3a\u5bf8\uff06\uff0334;\u5728\u4e00\u4e2a\u65b0\u6269\u5c55\u7684RAIDZ VDEV aren\uff06\uff0339; t\u7684\u4e1c\u897f\u662fzfs\u56f0\u60d1\u7684\u4e1c\u897f\u3002\u4ed6\u4eec\uff06\uff0339;\u5728\u529e\u516c\u5ba4\u65c1\u8fb9\u53ea\u662f\u53e6\u4e00\u5929\u3002\n  \u6b63\u5982\u6211\u4eec\u4e0a\u9762\u6240\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u4e00\u4e2a\u65b0\u6269\u5c55\u7684RAIDZ VDev Won\uff06\uff0339; t\u770b\u8d77\u6765\u975e\u5e38\u50cf\u662f\u90a3\u79cd\u4ece\uff06\uff0334\u90a3\u6837\u8bbe\u8ba1\u7684\u90a3\u6837;\u8bde\u751f\uff06\uff0334;  - \u81f3\u5c11\uff0c\u4e0d\u662f\u8d77\u521d\u3002\u867d\u7136\u6df7\u5408\u4e2d\u6709\u66f4\u591a\u7684\u78c1\u76d8\uff0c\u4f46\u6570\u636e\u7684\u5185\u90e8\u7ed3\u6784\u662f\uff06\uff0339; t\u7684\u53d8\u5316\u3002\n \u5411VDEV\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u65b0\u78c1\u76d8\u610f\u5473\u7740\u5b83\u5e94\u8be5\u80fd\u591f\u7a0d\u9ad8\u7684\u541e\u5410\u91cf\u3002\u5373\u4f7f\u9057\u7559\u5757Don\uff06\uff0339; t\u8de8\u8d8aVdev\u7684\u6574\u4e2a\u5bbd\u5ea6\uff0c\u6240\u6dfb\u52a0\u7684\u78c1\u76d8\u610f\u5473\u7740\u66f4\u591a\u4e3b\u8f74\u4ee5\u5206\u914d\u5de5\u4f5c\u3002\u8fd9\u53ef\u80fd\u4f1a\u8d62\u5f97\uff06\uff0339; t\u5236\u4f5c\u4e86jaw\u6ef4\u52a0\u901f\u5ea6\uff0c\u4f46\u4e03\u789fvdev\u4e0a\u7684\u516d\u4e2a\u6761\u7eb9\u610f\u5473\u7740\u60a8\u4ecd\u7136\u53ef\u4ee5\u540c\u65f6\u8bfb\u53d6\u6216\u5199\u4e24\u4e2a\u5757\uff0c\u56e0\u6b64\u53ef\u80fd\u6709\u4efb\u4f55\u901f\u5ea6\u6539\u8fdb\u5f88\u5c0f\u3002 \n\u5bf9\u6027\u80fd\u7684\u51c0\u5f71\u54cd\u53ef\u80fd\u5f88\u96be\u9884\u6d4b\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4ece\u516d\u4e2a\u78c1\u76d8RAIDZ2\u6269\u5c55\u5230\u4e03\u78c1\u76d8RAIDZ2\uff0c\u4f8b\u5982\uff0c\u60a8\u7684\u539f\u59cb\u516d\u78c1\u76d8\u914d\u7f6e\u5e76\u6ca1\u6709\u4efb\u4f55\u586b\u5145\u3002\u53ef\u4ee5\u5c06128kib\u5757\u5747\u5300\u5730\u5207\u6210\u56db\u4e2a32kib\u6570\u636e\u7247\uff0c\u4e24\u4e2a32kib\u5947\u5076\u6821\u9a8c\u4ef6\u3002\u4e03\u4e2a\u78c1\u76d8\u4e4b\u95f4\u7684\u76f8\u540c\u8bb0\u5f55\u62c6\u5206\u9700\u8981\u586b\u5145\uff0c\u56e0\u4e3a128kib /\u4e94\u4e2a\u6570\u636e\u4ef6\u5e76\u672a\u51fa\u73b0\u5076\u6570\u6247\u533a\u3002\n    \u540c\u6837\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b - \u7279\u522b\u662f\u5c0f\u578b\u8bb0\u5f55\u6216volblocksize-vollblocksize  - \u6bcf\u4e2a\u78c1\u76d8\u7684\u5de5\u4f5c\u91cf\u53ef\u80fd\u5728\u8f83\u65e7\u7684\uff0c\u6bd4\u8f83\u66f4\u5e7f\u6cdb\u7684\u66f4\u5e7f\u6cdb\u7684\u8f83\u7a84\u7684\u5e03\u5c40\u4e2d\u53ef\u80fd\u4f1a\u663e\u7740\u964d\u4f4e\u3002\u5c06128kib\u5757\u5206\u621032kib\u5757\uff0c\u7528\u4e8e\u516d\u4e2aRAIDZ2\uff0c\u6bcf\u4e2a\u78c1\u76d8\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u8bfb\u53d6\u6216\u5199\u5165\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5206\u621016kib\u4ef6\u7684\u5341\u5bbdRAIDZ2\uff0c\u4f8b\u5982\u5b83\uff06\uff0339;\u65e0\u8bba\u662f\u66f4\u591a\u78c1\u76d8\u4f46\u8f83\u5c0f\u7684\u788e\u7247\u5c06\u63d0\u4f9b\u66f4\u591a\u541e\u5410\u91cf\uff0c\u800c\u4e0d\u662f\u66f4\u5c11\u7684\u78c1\u76d8\uff0c\u4f46\u8f83\u5927\u7684\u788e\u7247\u3002\n \u60a8\u53ef\u4ee5\u786e\u5b9a\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u65b0\u6269\u5c55\u7684\u914d\u7f6e\u901a\u5e38\u5e94\u6267\u884c\u4ee5\u53ca\u539f\u59cb\u7684\u975e\u6269\u5c55\u7248\u672c - \u4e00\u65e6\u5927\u591a\u6570\u6570\u636e\u662f\uff08\u91cd\u65b0\uff09\u4ee5\u65b0\u5bbd\u5ea6\u7f16\u5199\uff0c\u6269\u5c55VDev Won\uff06\uff0339 ; t\u6267\u884c\u4efb\u4f55\u4e0d\u540c\uff0c\u6216\u8005\u4e0e\u4ece\u4e00\u5f00\u59cb\u65f6\u90a3\u6837\u7684\u4efb\u4f55\u4e0d\u90a3\u4e48\u53ef\u9760\u3002\n  \u521d\u59cb\u6269\u5c55\u8fc7\u7a0b\u4f3c\u4e4e\u5947\u602a\u7684\u662f\uff0c\u521d\u59cb\u6269\u5c55\u8fc7\u7a0b\u5e76\u5728\u65b0\u7684\u5bbd\u5ea6\u4e0a\u91cd\u5199\u6240\u6709\u73b0\u6709\u5757\uff0c\u800catt\uff0339;\u6bd5\u7adf\uff0c\u5b83\uff06\uff0339;\u65e0\u8bba\u5982\u4f55\u9605\u8bfb\u548c\u91cd\u65b0\u7f16\u5199\u6570\u636e\uff0c\u5bf9\u5427\uff1f\u6211\u4eec\u8981\u6c42Ahrens\u4e3a\u4ec0\u4e48\u539f\u59cb\u5bbd\u5ea6\u7559\u4e0b\uff0c\u5e76\u4e14\u7b54\u6848\u5f52\u7ed3\u4e3a\uff06\uff0334;\u5b83\u66f4\u5bb9\u6613\uff0c\u66f4\u5b89\u5168\u3002\uff06\uff0334;\n \u8bc6\u522b\u7684\u4e00\u4e2a\u5173\u952e\u56e0\u7d20\u662f\u5728\u6280\u672f\u4e0a\uff0c\u6269\u5c55ISN\uff06\uff0339; T\u79fb\u52a8\u5757;\u5b83\uff06\uff0339;\u53ea\u662f\u79fb\u52a8\u6247\u533a\u3002\u5b83\u7684\u65b9\u5f0f\uff06\uff0339;\u7f16\u5199\u7684\uff0c\u6269\u5c55\u4ee3\u7801\u6ca1\u6709\u5fc5\u8981\u77e5\u9053ZFS\uff06\uff0339;\u903b\u8f91\u5757\u8fb9\u754c\u662f - \u6269\u5c55\u4f8b\u7a0b\u4e0d\u77e5\u9053\u5355\u4e2a\u6247\u533a\u662f\u5426\u662f\u5947\u5076\u6821\u9a8c\u6216\u6570\u636e\uff0c\u66f4\u4e0d\u7528\u8bf4\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u963b\u6b62\u5b83\u3002\n \u6269\u5c55\u53ef\u4ee5\u904d\u5386\u6240\u6709\u5757\u6307\u9488\u6765\u5b9a\u4f4d\u5757\u8fb9\u754c\uff0c\u7136\u540e\u5b83\u5c06\u77e5\u9053\u54ea\u4e2a\u6247\u533a\u5c5e\u4e8e\u54ea\u4e2a\u5757\u4ee5\u53ca\u5982\u4f55\u91cd\u5851\u5757\uff0c\u800c\u662f\u6839\u636eAhrens\uff0c\u505a\u4efb\u4f55\u65b9\u5f0f\u5bf9ZFS\uff06\uff0339\u7684\u65b9\u5f0f\u975e\u5e38\u4fb5\u5165\u3002\u78c1\u76d8\u683c\u5f0f\u3002\u6269\u5c55\u9700\u8981\u5728MetasLabs\u4e0a\u4e0d\u65ad\u66f4\u65b0SpaceMaps\uff0c\u4ee5\u89e3\u91ca\u6bcf\u4e2a\u5757\u7684\u78c1\u76d8\u5927\u5c0f\u7684\u53d8\u5316 - \u5982\u679c\u5757\u662f\u6570\u636e\u96c6\u7684\u4e00\u90e8\u5206\uff0c\u800c\u4e0d\u662fzvol\uff0c\u66f4\u65b0\u6bcf\u4f4d\u6570\u636e\u96c6\u548c\u6bcf\u6587\u4ef6\u7a7a\u95f4\u4f1a\u8ba1\u51fa\u8272\u5730\u3002\n \u5982\u679c\u5b83\u771f\u7684\u8ba9\u4f60\u7684\u7259\u9f7f\u75d2\u75d2\u5730\u77e5\u9053\u4f60\u5728\u65b0\u9c9c\u4e94\u4e2aVdev\u4e0a\u6709\u56db\u4e2a\u6761\u7eb9\uff0c\u4f60\u53ef\u4ee5\u5728\u6269\u5c55\u5b8c\u6210\u540e\u7acb\u5373\u9605\u8bfb\u5e76\u91cd\u65b0\u7f16\u5199\u6570\u636e\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528ZFS\u5feb\u7167\uff0cZFS\u53d1\u9001\uff0cZFS\u63a5\u6536\u4ee5\u590d\u5236\u6574\u4e2a\u6570\u636e\u96c6\u548cZVols\u3002\u5982\u679c\u60a8\uff06\uff0339;\u91cd\u65b0\u62c5\u5fc3ZFS\u5c5e\u6027\uff0c\u7b80\u5355\u7684MV\u64cd\u4f5c\u5c06\u5b8c\u6210\u6280\u5de7\u3002 \n\u7136\u800c\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u63a8\u8350\u6211\u4eec\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u63a8\u8350\u653e\u677e\u548c\u8ba9ZFS\u505a\u5b83\u7684\u4e8b\u60c5\u3002\u6765\u81ea\u65e7\u6570\u636e\u7684overmed\u5757areN\uff06\uff0339; t\u771f\u6b63\u4f24\u5bb3\u4e86\u4efb\u4f55\u4e1c\u897f\uff0c\u5f53\u60a8\u81ea\u7136\u5220\u9664\u548c/\u6216\u6539\u53d8Vdev\u7684\u4f7f\u7528\u5bff\u547d\u65f6\uff0c\u5927\u591a\u6570\u90fd\u5c06\u6839\u636e\u9700\u8981\u81ea\u7136\u5730\u91cd\u65b0\u7f16\u5199\uff0c\u800c\u65e0\u9700\u7ba1\u7406\u5458\u5e72\u9884\u6216\u8005\u7531\u4e8e\u75f4\u8ff7\u9605\u8bfb\u548c\u91cd\u65b0\u7f16\u5199\u6240\u6709\u5185\u5bb9\uff0c\u957f\u671f\u9ad8\u5b58\u50a8\u8d1f\u8377\u3002\n  Ahrens\uff06\uff0339;\u65b0\u7684\u4ee3\u7801\u5728OpenZFS Master\u4e2d\uff0c\u4f46\u5c1a\u672a\u6210\u4e3a\u4efb\u4f55OpenZFS\u53d1\u5e03\u7684\u4e00\u90e8\u5206\uff0c\u66f4\u4e0d\u7528\u8bf4\u522b\u7684\u4eba\u6dfb\u52a0\u5230\u5176\u4ed6\u4eba\u548c\uff0339;\u6211\u7684\u5b58\u50a8\u5e93\u4e2d\u3002\u5f53\u6211\u4eec\u671f\u671b\u5728\u751f\u4ea7\u4e2d\u770b\u5230\u4ee3\u7801\u65f6\uff0c\u6211\u4eec\u95ee\u4e86Ahrens\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u5c06\u662f\u4e00\u6bb5\u65f6\u95f4\u3002\n RAIDZ\u6269\u5c55\u547d\u4e2d\u7855\u58eb\u592a\u665a\u4e86\uff0c\u5373\u5373\u5c06\u5230\u6765\u7684OpenZFS 2.1\u53d1\u5e03\uff0c\u9884\u8ba1\u5f88\u5feb\uff08\u73b0\u5728\u53ef\u4ee5\u4f7f\u75282.1\u53d1\u5e03\u5019\u9009\u4eba7\uff09\u3002\u5b83\u5e94\u8be5\u5305\u542b\u5728\u4e0b\u4e00\u4e2a\u4e3b\u8981\u7684OpenZFS\u91ca\u653e\u4e2d;\u5b83\uff06\uff0339\u4e3a\u6df7\u51dd\u571f\u65e5\u671f\u592a\u65e9\uff0c\u4f46\u4e3b\u8981\u53d1\u5e03\u901a\u5e38\u6bcf\u5e74\u53d1\u751f\u4e00\u6b21\u3002\n \u5e7f\u6cdb\u5730\u8bf4\uff0c\u6211\u4eec\u9884\u8ba1RAIDZ\u6269\u5f20\u57282022\u5e748\u67082022\u5e748\u6708\u7684\u67d0\u4e2a\u5730\u65b9\u7684ubuntu\u548cfreebsd\u7684\u5e94\u7528\u4e2d\u51fb\u4e2d\u4e86\u751f\u4ea7\uff0c\u4f46\u662f\u731c\u6d4b\u3002 Truenas\u53ef\u80fd\u4f1a\u5f88\u597d\u5730\u5c06\u5176\u8fdb\u5165\u751f\u4ea7\u4e2d\u7684\u751f\u4ea7\uff0c\u56e0\u4e3a\u5728\u5b98\u65b9\u547d\u4e2d\u91ca\u653e\u72b6\u6001\u4e4b\u524d\uff0cIxSystems\u503e\u5411\u4e8e\u4eceMaster\u4e2d\u63d0\u53d6ZFS\u529f\u80fd\u3002 ", "note_en": "OpenZFS founding developer Matthew Ahrens merged one of the most sought-after features in ZFS history\u2014RAIDz expansion\u2014into master last week. The new feature allows a ZFS user to expand the size of a single RAIDz vdev. For example, you can use the new feature to turn a three-disk RAIDz1 into a four, five, or six RAIDz1.\n  OpenZFS is a complex filesystem, and things are necessarily going to get a bit chewy explaining how the feature works. So if you&#39;re a ZFS newbie, you may want to refer back to our comprehensive ZFS 101  introduction.  In addition to being a filesystem, ZFS is a storage array and volume manager, meaning that you can feed it a whole pile of disk devices, not just one. The heart of a ZFS storage system is the zpool\u2014this is the most fundamental level of ZFS storage. The  zpool\u00a0in turn contains  vdevs, and  vdevs\u00a0contain actual disks within them. Writes are split into units called  records\u00a0or  blocks, which are then distributed semi-evenly among the  vdevs.\n A storage  vdev\u00a0can be one of five types\u2014a single disk, mirror,\u00a0 RAIDz1,  RAIDz2, or  RAIDz3. You can add more  vdevs\u00a0to a  zpool, and you can  attach\u00a0more disks to a single or mirror  vdev. But managing storage this way requires some planning ahead and budgeting\u2014which hobbyists and homelabbers frequently aren&#39;t too enthusiastic about.\n Conventional\u00a0 RAID, which does not share the &#34;pool&#34; concept with ZFS, generally offers the ability to expand and/or reshape an array in place. For example, you might add a single disk to a six-disk  RAID6\u00a0array, thereby turning it into a seven-disk  RAID6\u00a0array. Undergoing a live reshaping can be pretty painful, especially on nearly full arrays; it&#39;s entirely possible that such a task might require a week or more, with array performance limited to a quarter or less of normal the entire time.\n Historically, ZFS has eschewed this sort of expansion. ZFS was originally developed for business use, and live array re-shaping is generally a non-starter in the business world. Dropping your storage&#39;s performance to unusable levels for days on end generally costs more in payroll and overhead than buying an entirely new set of hardware would. Live expansion is also potentially very dangerous since it involves reading and re-writing all data and puts the array in a temporary and far less well-tested &#34;half this, half that&#34; condition until it completes.\n For users with many disks, the new  RAIDz\u00a0expansion is unlikely to materially change how they use ZFS. It will still be both easier and more practical to manage  vdevs\u00a0as complete units rather than trying to muck about inside them. But hobbyists, homelabbers, and small users who run ZFS with a single  vdev\u00a0will likely get a lot of use out of the new feature.\n   From a practical perspective, Ahrens&#39; new  vdev\u00a0expansion feature merely adds new capabilities to an existing command, namely,  zpool attach, which is normally used to add a disk to a single-disk  vdev\u00a0(turning it into a  mirror vdev) or add an extra disk to a  mirror\u00a0(for example, turning a two-disk  mirror\u00a0into a three-disk  mirror).\n    With the new code, you&#39;ll be able to  attach\u00a0new disks to an existing  RAIDz\u00a0vdev as well. Doing so expands the vdev in width but does not change the  vdev\u00a0type, so you can turn a six-disk  RAIDz2\u00a0vdev into a seven-disk  RAIDz2\u00a0vdev, but you\u00a0 can&#39;t turn it into a seven-disk  RAIDz3.\n Upon issuing your  zpool attach\u00a0command, the expansion begins. During expansion, each  block\u00a0or  record\u00a0is read from the  vdev\u00a0being expanded and is then rewritten. The sectors of the rewritten  block\u00a0are distributed among all disks in the  vdev, including the new disk(s), but the width of the stripe itself is not changed. So a  RAIDz2 vdev\u00a0expanded from six disks to ten will still be full of six-wide stripes after expansion completes.\n So while the user will see the extra space made available by the new disks, the storage efficiency of the expanded data will not have improved due to the new disks. In the example above, we went from a six-disk  RAIDz2\u00a0with a nominal storage efficiency of 67 percent (four of every six sectors are data) to a ten-disk  RAIDz2. Data\u00a0 newly written to the ten-disk RAIDz2 has a nominal storage efficiency of 80 percent\u2014eight of every ten sectors are data\u2014but the old expanded data is still written in six-wide stripes, so it still has the old 67 percent storage efficiency.\n It&#39;s worth noting that this isn&#39;t an unexpected or bizarre state for a vdev to be in\u2014 RAIDz\u00a0already uses a dynamic, variable stripe width to account for  blocks\u00a0or  records\u00a0too small to stripe across all the disks in a single  vdev.\n For example, if you write a single metadata block\u2014the data containing a file&#39;s name, permissions, and location on disk\u2014it fits within a single  sector\u00a0on disk. If you write that metadata block to a ten-wide  RAIDz2, you don&#39;t write a full ten-wide stripe\u2014instead, you write an undersized  block\u00a0only three disks wide; a single data  sector plus two parity  sectors. So the &#34;undersized&#34;  blocks\u00a0in a newly expanded  RAIDz\u00a0vdev aren&#39;t anything for ZFS to get confused about. They&#39;re just another day at the office.\n  As we discussed above, a newly expanded  RAIDz vdev won&#39;t look quite like one designed that way from &#34;birth&#34;\u2014at least, not at first. Although there are more disks in the mix, the internal structure of the data isn&#39;t changed.\n Adding one or more new disks to the  vdev\u00a0means that it should be capable of somewhat higher throughput. Even though the legacy  blocks\u00a0don&#39;t span the entire width of the  vdev, the added disks mean more spindles to distribute the work around. This probably won&#39;t make for a jaw-dropping speed increase, though\u2014six-wide stripes on a seven-disk  vdev\u00a0mean that you still can&#39;t read or write two  blocks\u00a0simultaneously, so any speed improvements are likely to be minor.\n The net impact to performance can be difficult to predict. If you are expanding from a six-disk  RAIDz2\u00a0to a seven-disk  RAIDz2, for example, your original six-disk configuration didn&#39;t need any padding. A 128KiB  block\u00a0can be cut evenly into four 32KiB data pieces, with two 32KiB parity pieces. The same record split among\u00a0 seven disks requires padding because 128KiB/five data pieces doesn&#39;t come out to an even number of sectors.\n    Similarly, in some cases\u2014particularly with a small  recordsize\u00a0or  volblocksize\u00a0set\u2014the workload per individual disk may be significantly less challenging in the older, narrower layout than in the newer, wider one. A 128KiB  block\u00a0split into 32KiB pieces for a six-wide  RAIDz2 can be read or written more efficiently\u00a0 per disk than one split into 16KiB pieces for a ten-wide  RAIDz2, for example\u2014so it&#39;s a bit of a crapshoot whether more disks but smaller pieces will provide more throughput than fewer disks but larger pieces did.\n The one thing you can be certain of is that the newly expanded configuration should typically perform\u00a0as well as the original non-expanded version\u2014and that once the majority of data is (re)written in the new width, the expanded  vdev\u00a0won&#39;t perform any differently, or be any less reliable, than one that was designed that way from the start.\n  It might seem odd that the initial expansion process doesn&#39;t rewrite all existing  blocks\u00a0to the new width while it&#39;s running\u2014after all, it&#39;s reading and re-writing the data anyway, right? We asked Ahrens why the original width was left as-is, and the answer boils down to &#34;it&#39;s easier and safer that way.&#34;\n One key factor to recognize is that technically, the expansion\u00a0 isn&#39;t moving  blocks; it&#39;s just moving  sectors. The way it&#39;s written, the expansion code doesn&#39;t need to know where ZFS&#39;\u00a0logical  block\u00a0boundaries are\u2014the expansion routine has no idea whether an individual  sector\u00a0is parity or data, let alone which  block\u00a0it belongs to.\n Expansion could traverse all the  block pointers to locate  block\u00a0boundaries, and\u00a0 then\u00a0it would know which  sector\u00a0belongs to what  block\u00a0and how to re-shape the  block, but according to Ahrens, doing things that way would be extremely invasive to ZFS&#39;\u00a0on-disk format. The expansion would need to continually update  spacemaps\u00a0on  metaslabs\u00a0to account for changes in the on-disk size of each  block\u2014and if the  block\u00a0is part of a  dataset\u00a0rather than a  zvol, update the per-dataset and per-file space accounting as well.\n If it really makes your teeth itch knowing you have four-wide stripes on a freshly five-wide vdev, you can just read and re-write your data yourself after expansion completes. The simplest way to do this is to use  zfs snapshot,  zfs send, and  zfs receive\u00a0to replicate entire  datasets and  zvols. If you&#39;re not worried about ZFS properties, a simple  mv\u00a0operation will do the trick.\n However, we&#39;d recommend in most cases just relaxing and letting ZFS do its thing. Your undersized  blocks\u00a0from older data aren&#39;t really hurting anything, and as you naturally delete and/or alter data over the life of the  vdev, most of them will get re-written naturally as necessary, without the need for admin intervention or long periods of high storage load due to obsessively reading and re-writing everything all at once.\n  Ahrens&#39; new code is in OpenZFS master but is not yet a part of any OpenZFS release, let alone added to anyone else&#39;s repositories. We asked Ahrens when we might expect to see the code in production, and unfortunately, it will be a while.\n RAIDz expansion hit master too late to be included in the upcoming OpenZFS 2.1 release, expected very soon (2.1 release candidate 7 is available now). It should be included in the next major OpenZFS release; it&#39;s too early for concrete dates, but major releases typically happen about once per year.\n Broadly speaking, we expect RAIDz expansion to hit production in the likes of Ubuntu and FreeBSD somewhere around August 2022, but that&#39;s just a guess. TrueNAS may very well put it into production sooner than that, since ixSystems tends to pull ZFS features from master before they officially hit release status.", "posttime": "2021-06-20 13:14:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7c89\u4e1d,fans,\u6269\u5c55", "title": "ZFS\u7c89\u4e1d\uff0cEnjoice  -  Raidz\u6269\u5f20\u5c06\u5f88\u5feb\u6210\u4e3a\u4e00\u4ef6\u4e8b ", "title_en": "ZFS fans, rejoice \u2013 RAIDz expansion will be a thing soon", "transed": 1, "url": "https://arstechnica.com/gadgets/2021/06/raidz-expansion-code-lands-in-openzfs-master/", "via": "", "real_tags": ["\u7c89\u4e1d", "fans", "\u6269\u5c55"]}]