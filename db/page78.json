[{"category": "", "categoryclass": "", "imagename": "4b7ac8904a410c94bee0c521137fad3c.jpg", "infoid": 1071187, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8046\u542c\u7531 XavierUniversityLibrary \u7b56\u5212\u7684\u64ad\u653e\u5217\u8868\u91cf\u5b50\u529b\u5b66\u57fa\u7840\u4f1a\u8bae (1962) |\u684c\u9762\u548c\u79fb\u52a8\u8bbe\u5907\u4e0a\u7684\u6cfd\u7ef4\u5c14\u5927\u5b66\u56fe\u4e66\u9986\u3002", "note_en": "Listen to Conference on the Foundations of Quantum Mechanics (1962), a playlist curated by XavierUniversityLibrary | Xavier University Library on desktop and mobile.", "posttime": "2021-08-02 23:16:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91cf\u5b50\u529b\u5b66,lecture,\u79fb\u52a8", "title": "\u72c4\u62c9\u514b\u91cf\u5b50\u529b\u5b66\u57fa\u7840\u8bb2\u5ea7\uff081962\uff09", "title_en": "Dirac Lecture on the Foundations of Quantum Mechanics (1962)", "transed": 1, "url": "https://soundcloud.com/xavieruniversitylibrary/sets/conference-on-the-foundations", "via": "", "real_tags": ["\u91cf\u5b50\u529b\u5b66", "lecture", "\u79fb\u52a8"]}, {"category": "", "categoryclass": "", "imagename": "9b7e038af936945950f6ef052a6f8a2b.jpg", "infoid": 1071185, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Zoombombing \u662f TechCrunch \u53bb\u5e74\u521b\u9020\u7684\u4e00\u4e2a\u672f\u8bed\uff0c\u56e0\u4e3a\u5b83\u7684\u4f7f\u7528\u91cf\u56e0\u5927\u6d41\u884c\u800c\u6fc0\u589e\uff0c\u5b83\u63cf\u8ff0\u4e86\u672a\u7ecf\u6279\u51c6\u7684\u4e0e\u4f1a\u8005\u901a\u8fc7\u5206\u4eab\u4ee4\u4eba\u53cd\u611f\u7684\u56fe\u50cf\u3001\u4f7f\u7528\u80cc\u666f\u4f20\u64ad\u4ec7\u6068\u4fe1\u606f\u6216\u53d1\u8868\u8bfd\u8c24\u548c\u4eb5\u6e0e\u8a00\u8bba\u6765\u8fdb\u5165\u548c\u6270\u4e71 Zoom \u901a\u8bdd\u3002\u8be5\u8bc9\u8bbc\u4e8e 2020 \u5e74 3 \u6708\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5317\u533a\u7684\u7f8e\u56fd\u5730\u65b9\u6cd5\u9662\u63d0\u8d77\uff0c\u8fd8\u6307\u63a7\u8be5\u516c\u53f8\u4e0e\u7b2c\u4e09\u65b9\u5171\u4eab\u4e2a\u4eba\u7528\u6237\u6570\u636e\uff0c\u5305\u62ec Facebook\u3001\u8c37\u6b4c\u548c LinkedIn\u3002\u9664\u4e86\u540c\u610f 8,500 \u4e07\u7f8e\u5143\u7684\u548c\u89e3\u534f\u8bae\uff0c\u5982\u679c\u8bc9\u8bbc\u8fbe\u5230\u96c6\u4f53\u8bc9\u8bbc\u72b6\u6001\uff0c\u5ba2\u6237\u53ef\u80fd\u4f1a\u6536\u5230 25 \u7f8e\u5143\u8ba2\u9605\u8d39\u7528\u7684 15% \u7684\u9000\u6b3e\uff0cZoom \u8fd8\u8868\u793a\u5c06\u91c7\u53d6\u989d\u5916\u63aa\u65bd\u9632\u6b62\u5165\u4fb5\u8005\u95ef\u5165\u4f1a\u8bae\u3002\u8fd9\u5c06\u5305\u62ec\u5728\u4f1a\u8bae\u4e3b\u6301\u4eba\u6216\u5176\u4ed6\u53c2\u4e0e\u8005\u5728\u4f1a\u8bae\u4e2d\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e94\u7528\u7a0b\u5e8f\u65f6\u63d0\u9192\u7528\u6237\uff0c\u5e76\u4e3a\u5458\u5de5\u63d0\u4f9b\u6709\u5173\u9690\u79c1\u548c\u6570\u636e\u5904\u7406\u7684\u4e13\u95e8\u57f9\u8bad\u3002 \u201c\u7528\u6237\u7684\u9690\u79c1\u548c\u5b89\u5168\u662f Zoom \u7684\u9996\u8981\u4efb\u52a1\uff0c\u6211\u4eec\u975e\u5e38\u91cd\u89c6\u7528\u6237\u5bf9\u6211\u4eec\u7684\u4fe1\u4efb\uff0c\u201dZoom \u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\u3002 \u201c\u6211\u4eec\u4e3a\u6211\u4eec\u5728\u5e73\u53f0\u4e0a\u53d6\u5f97\u7684\u8fdb\u6b65\u611f\u5230\u81ea\u8c6a\uff0c\u5e76\u671f\u5f85\u7ee7\u7eed\u4ee5\u9690\u79c1\u548c\u5b89\u5168\u4e3a\u5148\u8fdb\u884c\u521b\u65b0\u3002\u201d\u8be5\u548c\u89e3\u9700\u8981\u52a0\u5dde\u5723\u4f55\u585e\u7684\u7f8e\u56fd\u5730\u65b9\u6cd5\u5b98 Lucy Koh \u7684\u6279\u51c6\u624d\u80fd\u6700\u7ec8\u6572\u5b9a\u3002", "note_en": "Zoombombing,  a term coined by TechCrunch last year as its usage exploded because of the pandemic, describes unapproved attendees entering and disrupting Zoom calls by sharing offensive imagery, using backgrounds to spread hateful messages, or spouting slurs and profanities.\n The lawsuit, filed in March 2020 in the U.S. District Court in the Northern District of California, also accused the firm of  sharing personal user data with third parties, including Facebook, Google and LinkedIn.\n In addition to agreeing to an $85 million settlement, which could see customers receive a refund of either 15% of their subscription of $25 if the lawsuit achieves class-action status, Zoom has said it will take additional steps to prevent intruders from gatecrashing meetings. This will include alerting users when meeting hosts or other participants use third-party apps in meetings and offering specialized training to employees on privacy and data handling.\n \u201cThe privacy and security of our users are top priorities for Zoom, and we take seriously the trust our users place in us,\u201d Zoom said in a statement. \u201cWe are proud of the advancements we have made to our platform, and look forward to continuing to innovate with privacy and security at the forefront.\u201d\n The settlement requires approval from US District Judge Lucy Koh in San Jose, California, to be finalized.", "posttime": "2021-08-02 22:29:44", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "zoombombing,zoom", "title": "Zoom \u5728\u201cZoombombing\u201d\u8bc9\u8bbc\u4e2d\u8fbe\u6210 8500 \u4e07\u7f8e\u5143\u7684\u548c\u89e3", "title_en": "\n\t\t\t\tZoom reaches $85M settlement in \u2018Zoombombing\u2019 lawsuit\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/08/02/zoom-reaches-85m-settlement-in-zoombombing-lawsuit/", "via": "", "real_tags": ["zoom"]}, {"category": "", "categoryclass": "", "imagename": "402746d7a23b5576d7dcb99644654a6a.jpeg", "infoid": 1071183, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u5468\u65e9\u4e9b\u65f6\u5019\uff0c\u6210\u5343\u4e0a\u4e07\u7684 Robinhood Markets HOOD 2.92% \u5ba2\u6237\u8d2d\u4e70\u4e86\u8be5\u4ea4\u6613\u5e94\u7528\u7a0b\u5e8f\u8270\u96be\u7684\u9996\u6b21\u516c\u5f00\u52df\u80a1\u7684\u80a1\u7968\u3002 Robinhood \u5728\u5176\u5e94\u7528\u7a0b\u5e8f\u4e0a\u7684\u4e00\u7bc7\u5e16\u5b50\u4e2d\u8868\u793a\uff0c\u6709 301,573 \u540d\u7528\u6237\u53c2\u4e0e\u4e86 IPO\uff0c\u6b64\u6b21 IPO \u7b79\u96c6\u4e86\u7ea6 20 \u4ebf\u7f8e\u5143\uff0c\u5bf9\u8be5\u516c\u53f8\u7684\u4f30\u503c\u4e3a 320 \u4ebf\u7f8e\u5143\u3002\u622a\u81f3 6 \u6708 30 \u65e5\uff0c\u8fd9\u7ea6\u5360\u8be5\u516c\u53f8 2,250 \u4e07\u4e2a\u8d44\u91d1\u8d26\u6237\u7684 1.3%\u3002\u8be5\u516c\u53f8\u6253\u7834\u4e86\u534e\u5c14\u8857\u8fd1\u671f\u7684\u4f20\u7edf\uff0c\u5728\u5907\u53d7\u671f\u5f85\u7684\u9996\u6b21\u4eae\u76f8\u4e2d\u5411\u5728\u5176\u5e94\u7528\u7a0b\u5e8f\u4e0a\u8fdb\u884c\u4ea4\u6613\u7684\u5c0f\u578b\u6295\u8d44\u8005\u51fa\u552e\u4e86\u5927\u91cf\u80a1\u7968\u3002\u636e\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u65e9\u4e9b\u65f6\u5019\u62a5\u9053\uff0c\u591a\u8fbe 25% \u7684 IPO \u80a1\u7968\u6d41\u5411\u4e86 Robinhood \u5ba2\u6237\u3002\u5728\u5178\u578b\u7684 IPO \u4e2d\uff0c\u4e2a\u4eba\u6295\u8d44\u8005\u7684\u6536\u76ca\u8fdc\u4f4e\u4e8e 10%\u3002\u8fd9\u4e00\u51b3\u5b9a\u5bfc\u81f4 Robinhood \u80a1\u7968\u4ea4\u6613\u7684\u7b2c\u4e00\u5929\u51fa\u73b0\u6ce2\u52a8\u3002\u8be5\u80a1\u5468\u56db\u4ee5 38 \u7f8e\u5143\u7684 IPO \u4ef7\u683c\u5f00\u76d8\uff0c\u5e76\u8fc5\u901f\u4e0b\u8dcc\u8d85\u8fc7 10%\u3002\u6536\u76d8\u4e0b\u8dcc 8% \u81f3 34.82 \u7f8e\u5143\u3002\u8be5\u80a1\u5468\u4e94\u8868\u73b0\u7a0d\u597d\uff0c\u6536\u4e8e 35.15 \u7f8e\u5143\uff0c\u4e0a\u6da8\u7ea6 1%\u3002 25% \u7684\u5206\u914d\u610f\u5473\u7740\u53c2\u4e0e IPO \u7684 Robinhood \u5ba2\u6237\u5e73\u5747\u82b1\u8d39\u7ea6 1,600 \u7f8e\u5143\u8d2d\u4e70 41 \u80a1\u3002\u867d\u7136\u5728 Robinhood \u7684\u5ba2\u6237\u7fa4\u4e2d\u53ea\u5360\u4e00\u5c0f\u90e8\u5206\uff0c\u4f46\u5bf9\u4e8e\u4ea4\u6613\u5e94\u7528\u7a0b\u5e8f\u4e0a\u63d0\u4f9b\u7684\u5178\u578b IPO \u800c\u8a00\uff0c\u6295\u8d44\u4e8e\u8be5\u4ea4\u6613\u7684\u7528\u6237\u6570\u91cf\u5f88\u9ad8\u3002\u5927\u7ea6 78,250 \u540d Robinhood \u7528\u6237\u8d2d\u4e70\u4e86\u5065\u8eab\u516c\u53f8 F45 Training Holdings \u6700\u8fd1\u7684\u516c\u5f00\u52df\u80a1\u80a1\u7968\uff0c\u8fd9\u662f Robinhood \u5728\u4e0a\u5e02\u4e4b\u524d\u6700\u53d7\u6b22\u8fce\u7684 IPO\u3002", "note_en": "Hundreds of thousands of  Robinhood Markets    HOOD  2.92%  customers bought shares in the trading app\u2019s rocky initial public offering earlier this week.\n  In a post on its app, Robinhood said 301,573 users participated in the IPO, which raised about $2 billion and  valued the company at $32 billion. That represents about 1.3% of the company\u2019s 22.5 million funded accounts as of June 30.\n  Breaking with recent Wall Street tradition, the company sold a big chunk of the shares in its hotly anticipated debut to the small-time investors who trade on its app. As much of 25% of the IPO shares went to Robinhood customers,  The Wall Street Journal earlier reported. In a typical IPO, individual investors get well under 10%.\n  The decision helped make for a volatile first day of trading in Robinhood shares. The stock opened Thursday even with the $38 IPO price and quickly fell more than 10%. It closed down 8% at $34.82. The stock did a bit better on Friday, closing up about 1% at $35.15.\n    An allocation of 25% would mean the average Robinhood customer participating in the IPO spent about $1,600 to buy 41 shares.\n  While a small share of Robinhood\u2019s customer base, the number of users who invested in the deal is high for a typical IPO offered on the trading app. Some 78,250 Robinhood users bought shares in fitness company  F45 Training Holdings  recent public offering, the most popular IPO offered on Robinhood before its own.", "posttime": "2021-08-02 22:12:40", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8868\u793a,accounts,robinhood", "title": "Robinhood \u8868\u793a\uff0c\u622a\u81f3 6 \u6708 30 \u65e5\uff0c\u6709 301,573 \u540d\u7528\u6237\u53c2\u4e0e\u4e86\u5176 IPO\uff0c\u7ea6\u5360\u5176 2,250 \u4e07\u4e2a\u8d44\u91d1\u8d26\u6237\u7684 1.3%", "title_en": "Robinhood says 301,573 users participated in its IPO, representing about 1.3% of its 22.5M funded accounts as of June 30", "transed": 1, "url": "https://www.wsj.com/articles/robinhood-sold-ipo-shares-to-more-than-300-000-of-its-customers-11627767683?mod=djemalertNEWS", "via": "", "real_tags": ["\u8868\u793a", "accounts", "robinhood"]}, {"category": "", "categoryclass": "", "imagename": "316744aa3821505b318325791fa76e91.jpg", "infoid": 1071182, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7c73\u5170\uff0c8 \u6708 1 \u65e5\uff08\u8def\u900f\u793e\uff09- \u5f53\u5730\u653f\u5e9c\u5468\u65e5\u8868\u793a\uff0c\u9ed1\u5ba2\u653b\u51fb\u5e76\u5173\u95ed\u4e86\u4e3a\u7f57\u9a6c\u5468\u8fb9\u7684\u62c9\u9f50\u5965\u5730\u533a\u7ba1\u7406 COVID-19 \u75ab\u82d7\u63a5\u79cd\u9884\u7ea6\u7684\u516c\u53f8\u7684 IT \u7cfb\u7edf\u3002 \u201c\u5bf9\u8be5\u5730\u533a\u7684 CED\uff08\u6570\u636e\u5e93\uff09\u7684\u5f3a\u5927\u9ed1\u5ba2\u653b\u51fb\u6b63\u5728\u8fdb\u884c\u4e2d\uff0c\u201d\u8be5\u5730\u533a\u5728 Facebook \u5e16\u5b50\u4e2d\u8868\u793a\u3002\u5b83\u8bf4\u6240\u6709\u7cfb\u7edf\u90fd\u5df2\u505c\u7528\uff0c\u5305\u62ec\u8be5\u5730\u533a\u7684\u536b\u751f\u95e8\u6237\u548c\u75ab\u82d7\u63a5\u79cd\u7f51\u7edc\u7684\u7cfb\u7edf\uff0c\u5e76\u8b66\u544a\u63a5\u79cd\u8ba1\u5212\u53ef\u80fd\u4f1a\u5ef6\u8fdf\u3002 \u201c\u8fd9\u662f\u4e00\u6b21\u975e\u5e38\u5f3a\u5927\u7684\u9ed1\u5ba2\u653b\u51fb\uff0c\u975e\u5e38\u4e25\u91cd\u2026\u2026\u4e00\u5207\u90fd\u7ed3\u675f\u4e86\u3002\u6574\u4e2a\u5730\u533a\u7684 CED \u90fd\u53d7\u5230\u4e86\u653b\u51fb\uff0c\u201d\u62c9\u9f50\u5965\u5730\u533a\u7684\u5065\u5eb7\u7ecf\u7406 Alessio D&#39;Amato \u8bf4\u3002\u636e ANSA \u79f0\uff0c\u610f\u5927\u5229\u90ae\u653f\u8b66\u5bdf\u548c\u7f57\u9a6c\u68c0\u5bdf\u5b98\u6b63\u5728\u8c03\u67e5\u6b64\u4e8b\uff0c\u5e76\u53ef\u80fd\u5c55\u5f00\u8c03\u67e5\uff0c\u4ee5\u67e5\u660e\u88ad\u51fb\u7684\u5e55\u540e\u9ed1\u624b\u3002\u610f\u5927\u5229\u6700\u8fd1\u8ddf\u968f\u6cd5\u56fd\u5ba3\u5e03\uff0c\u4e00\u7cfb\u5217\u6d3b\u52a8\u5c06\u5f3a\u5236\u8981\u6c42\u63d0\u4f9b\u75ab\u82d7\u63a5\u79cd\u6216\u5bf9 COVID-19 \u514d\u75ab\u7684\u8bc1\u660e\u3002\u6b64\u4e3e\u5728\u5168\u56fd\u5f15\u53d1\u4e86\u4e00\u7cfb\u5217\u53cd\u5bf9\u5f15\u5165\u6240\u8c13\u7684\u7eff\u8272\u901a\u884c\u8bc1\u7684\u6297\u8bae\u6d3b\u52a8\uff0c\u8be5\u901a\u884c\u8bc1\u8868\u660e\u4eba\u4eec\u5df2\u63a5\u79cd\u75ab\u82d7\u3001\u68c0\u6d4b\u5448\u9634\u6027\u6216\u4ece COVID-19 \u4e2d\u5eb7\u590d\u3002", "note_en": "MILAN, Aug 1 (Reuters) - Hackers have attacked and shut down the IT systems of the company that manages COVID-19 vaccination appointments for the Lazio region surrounding Rome, the regional government said on Sunday.\n &#34;A powerful hacker attack on the region&#39;s CED (database) is under way,&#34; the region said in a Facebook posting.\n It said all systems had been deactivated, including those of the region&#39;s health portal and vaccination network, and warned the inoculation programme could suffer a delay.\n &#34;It is a very powerful hacker attack, very serious... everything is out. The whole regional CED is under attack,&#34; Lazio region&#39;s health manager Alessio D&#39;Amato said.\n According to ANSA, Italy&#39;s postal police and Rome prosecutors are looking into the matter and could open an investigation to find out who is behind the attack.\n Italy recently followed France in announcing that proof of vaccination or immunity from COVID-19 would become mandatory for an array of activities.\n The move triggered a series of protests across the country against introduction of the so-called Green Pass which shows people have been vaccinated, tested negative or recovered from COVID-19.", "posttime": "2021-08-02 22:12:23", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u9ed1\u5ba2,\u63a5\u79cd,lazio,\u5730\u533a", "title": "\u56f4\u7ed5\u7f57\u9a6c\u7684\u610f\u5927\u5229\u62c9\u9f50\u5965\u5730\u533a\u8868\u793a\uff0c\u9ed1\u5ba2\u5df2\u5173\u95ed\u5176\u7528\u4e8e\u7ba1\u7406 COVID-19 \u75ab\u82d7\u63a5\u79cd\u7684 IT \u7cfb\u7edf", "title_en": "Italy's Lazio region, which surrounds Rome, says hackers have shut down its IT systems used to manage COVID-19 vaccinations", "transed": 1, "url": "https://www.reuters.com/world/europe/hackers-shut-down-system-booking-covid-19-shots-italys-lazio-region-2021-08-01/", "via": "", "real_tags": ["\u9ed1\u5ba2", "\u63a5\u79cd", "lazio", "\u5730\u533a"]}, {"category": "", "categoryclass": "", "imagename": "c6d2f59a1592cbef7d5ee4a6242a18bc.jpeg", "infoid": 1071181, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ebd\u7ea6\u5e02\u8bae\u4f1a\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u5bf9\u98df\u54c1\u914d\u9001\u5e73\u53f0 Grubhub \u8fdb\u884c\u6311\u9009\u3002\u5728\u5927\u6d41\u884c\u671f\u95f4\uff0c\u968f\u7740\u5e02\u573a\u4efd\u989d\u8d8b\u4e8e\u5e73\u7a33\uff0c\u8fd9\u79cd\u654c\u610f\u4f3c\u4e4e\u6269\u5c55\u5230\u66f4\u5e7f\u6cdb\u7684\u9886\u57df\u3002\u8fd9\u5ea7\u57ce\u5e02\u62e5\u6709\u5927\u7ea6 10% \u7684\u7f8e\u56fd\u5e02\u573a\uff0c\u5e76\u4e14\u53ef\u80fd\u9884\u793a\u7740\u5176\u4ed6\u5730\u65b9\u7684\u5730\u65b9\u63aa\u65bd\uff0c\u8fd9\u5ea7\u57ce\u5e02\u7684\u6001\u5ea6\u975e\u5e38\u91cd\u8981\u3002\u4e0a\u5468\u51b2\u7a81\u5347\u6e29\u3002\u5468\u56db\uff0c\u8be5\u59d4\u5458\u4f1a\u8868\u793a\u5b83\u901a\u8fc7\u4e86\u4e94\u9879\u6cd5\u6848\uff0c\u65e8\u5728\u5c06\u90e8\u5206\u6743\u529b\u5e73\u8861\u4ece\u98df\u54c1\u914d\u9001\u5e73\u53f0\u8f6c\u79fb\u5230\u201c\u6323\u624e\u7684\u592b\u59bb\u5e97\u201d\u3002\u8fd9\u4e9b\u6cd5\u6848\u5305\u62ec\u4e00\u4e9b\u76f4\u622a\u4e86\u5f53\u7684\u7acb\u6cd5\uff0c\u4f8b\u5982\u5411\u98df\u5ba2\u63d0\u4f9b\u9910\u5385\u7684\u76f4\u63a5\u7535\u8bdd\u53f7\u7801\uff0c\u4ee5\u53ca\u7981\u6b62\u5e73\u53f0\u5411\u9910\u5385\u6536\u53d6\u4e0d\u4ea7\u751f\u4ea4\u6613\u7684\u7535\u8bdd\u8ba2\u5355\u8d39\u7528\u3002\u4f46\u5b83\u4eec\u4e5f\u5305\u62ec\u66f4\u5177\u4e89\u8bae\u6027\u548c\u53ef\u80fd\u66f4\u91cd\u8981\u7684\u89c4\u5219\u3002\u4e00\u4e2a\uff0c\u5982\u679c\u6309\u9884\u671f\u5b9e\u65bd\uff0c\u5c06\u5bf9\u98df\u54c1\u4ea4\u4ed8\u5e73\u53f0\u53ef\u4ee5\u5411\u9910\u5385\u6536\u8d39\u7684\u4f63\u91d1\u7684\u4e34\u65f6\u4e0a\u9650\u81f3\u5c11\u5ef6\u957f\u5230 2022 \u5e74 2 \u6708\u4e2d\u65ec\u3002 \u9664\u4e86\u4e0a\u5468\u7684\u51b3\u5b9a\u5916\uff0c\u5e02\u8bae\u4f1a\u8868\u793a\uff0c\u5b83\u8fd8\u8ba1\u5212\u5ba1\u67e5\u672c\u6708\u7684\u4e00\u9879\u6c38\u4e45\u6027\u4f63\u91d1\u4e0a\u9650\u6cd5\u6848\u3002\u5bf9\u4e8e\u98df\u54c1\u914d\u9001\u516c\u53f8\u6765\u8bf4\uff0c\u957f\u671f\u4e0a\u9650\u542c\u8d77\u6765\u4e0d\u7965\uff0c\u4f46\u5176\u5f71\u54cd\u7684\u771f\u5b9e\u7a0b\u5ea6\u5c1a\u4e0d\u5b8c\u5168\u6e05\u695a\u3002\u4f8b\u5982\uff0c\u7f8e\u56fd\u5e02\u573a\u9886\u5bfc\u8005 DoorDash DASH -0.49% \u62a5\u544a\u4e86\u8fc7\u53bb\u56db\u4e2a\u5b63\u5ea6\u8c03\u6574\u540e\u7684\u606f\u7a0e\u6298\u65e7\u548c\u644a\u9500\u524d\u6536\u76ca\u7684\u5229\u6da6\u2014\u2014\u51e0\u4e4e\u662f\u6574\u4e2a\u5927\u6d41\u884c\u75c5\u7684\u5168\u90e8\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u516c\u53f8\u5728 4 \u6708\u4efd\u7684\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u8868\u793a\uff0c\u7531\u4e8e\u5ba2\u6237\u652f\u4ed8\u7684\u4ef7\u683c\u4e0a\u6da8\u4ee5\u5f25\u8865\u635f\u5931\u7684\u7f8e\u5143\uff0c\u56e0\u6b64\u4f63\u91d1\u4e0a\u9650\u5bf9\u5176\u4e1a\u52a1\u9020\u6210\u4e86\u201c\u5207\u5b9e\u5f71\u54cd\u201d\uff0c\u51cf\u5c11\u4e86\u9700\u6c42\u3002\u5916\u5356\u516c\u53f8\u901a\u5e38\u4e0d\u4f1a\u6309\u57ce\u5e02\u5212\u5206\u4ed6\u4eec\u7684\u7ecf\u6d4e\u72b6\u51b5\uff0c\u4f46 Uber Eats \u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u786e\u5b9e\u8868\u793a\uff0c\u7531\u4e8e\u4e0e\u5927\u6d41\u884c\u76f8\u5173\u7684\u4f63\u91d1\u4e0a\u9650\uff0c\u4ec5\u5728\u7ebd\u7ea6\u5e02\u5c31\u635f\u5931\u4e86\u8d85\u8fc7 6000 \u4e07\u7f8e\u5143\u3002\u5bf9\u4e8e\u98df\u54c1\u914d\u9001\u516c\u53f8\u800c\u8a00\uff0c\u5927\u6d41\u884c\u540e\u6d88\u8d39\u8005\u7684\u4ef7\u683c\u654f\u611f\u5ea6\u53ef\u80fd\u4f1a\u589e\u52a0\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u83b7\u5f97\u9762\u5bf9\u9762\u7684\u7528\u9910\u673a\u4f1a\u5e76\u4e14\u66f4\u5c11\u4f9d\u8d56\u5916\u5356\u3002\u8fd8\u6709\u5176\u4ed6\u5a01\u80c1\u3002\u5e02\u8bae\u4f1a\u8fd8\u6295\u7968\u51b3\u5b9a\u8981\u6c42\u5916\u5356\u670d\u52a1\u5728\u9910\u5385\u8981\u6c42\u65f6\u4e0e\u9910\u5385\u5206\u4eab\u6bcf\u6708\u7684\u98df\u5ba2\u4fe1\u606f\u3002\u867d\u7136\u5c1a\u4e0d\u6e05\u695a\u8be5\u89c4\u5219\u5c06\u6db5\u76d6\u54ea\u4e9b\u6570\u636e\uff0c\u4f46\u8be5\u6cd5\u6848\u7684\u6458\u8981\u8868\u660e\uff0c\u5b83\u53ef\u80fd\u5305\u62ec\u98df\u5ba2\u7684\u59d3\u540d\u3001\u7535\u8bdd\u53f7\u7801\u3001\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3001\u5bb6\u5ead\u4f4f\u5740\u548c\u8ba2\u8d2d\u7684\u5185\u5bb9\u3002\n\u8fd9\u5c06\u4e3a\u9910\u5385\u63d0\u4f9b\u53ef\u7528\u4e8e\u786e\u5b9a\u8ba2\u5355\u6765\u6e90\u7684\u4fe1\u606f\uff0c\u5e2e\u52a9\u4ed6\u4eec\u8bc4\u4f30\u5916\u5356\u5e73\u53f0\u7684\u4e2a\u4eba\u4ef7\u503c\u3002\u5b83\u8fd8\u53ef\u4ee5\u663e\u7740\u964d\u4f4e\u5e73\u53f0\u4e4b\u95f4\u7684\u8f6c\u6362\u6210\u672c\uff0c\u5e76\u5e2e\u52a9\u9910\u5385\u66f4\u597d\u5730\u63a5\u89e6\u5ba2\u6237\u3002\u867d\u7136\u5173\u4e8e\u98df\u54c1\u914d\u9001\u4f63\u91d1\u4e0a\u9650\u7684\u8bf4\u6cd5\u5f88\u591a\uff0c\u4f46\u51b3\u5b9a\u8c01\u53ef\u4ee5\u8bbf\u95ee\u98df\u5ba2\u6570\u636e\u4e5f\u540c\u6837\u5b58\u5728\u4e89\u8bae\u3002\u5916\u5356\u5e73\u53f0\u8ba4\u4e3a\u8fd9\u6837\u7684\u6cd5\u5f8b\u4f1a\u4f7f\u98df\u5ba2\u7684\u4e2a\u4eba\u4fe1\u606f\u9762\u4e34\u98ce\u9669\uff0c\u5e76\u6307\u51fa\u6d88\u8d39\u8005\u5e94\u8be5\u80fd\u591f\u9009\u62e9\u52a0\u5165\u6570\u636e\u5171\u4eab\u800c\u4e0d\u662f\u9009\u62e9\u9000\u51fa\u3002\u5176\u4ed6\u4eba\u5c06\u7b2c\u4e09\u65b9\u4ea4\u4ed8\u63cf\u8ff0\u4e3a\u6570\u636e\u7684\u201c\u5b88\u95e8\u4eba\u201d\uff0c\u5176\u4e2d\u4e00\u4e2a\u6765\u6e90\u5c06\u5e73\u53f0\u6bd4\u4f5c\u6700\u7ec8\u88ab\u7834\u574f\u7684\u201c\u9910\u996e\u5361\u7279\u5c14\u201d\u3002\u7ebd\u7ea6\u7684\u4e3e\u52a8\u5bf9 Grubhub \u5c24\u4e3a\u91cd\u8981\uff0c\u56e0\u4e3a\u8be5\u5e02\u662f\u5176\u6700\u5927\u7684\u7f8e\u56fd\u5e02\u573a\u3002\u622a\u81f3 6 \u6708\uff0cBloomberg Second Measure \u6570\u636e\u663e\u793a\uff0cGrubhub \u548c DoorDash \u4e0e\u7ebd\u7ea6\u5e02\u7684\u5e02\u573a\u4efd\u989d\u9886\u5148\uff0c\u5206\u522b\u4e3a 35%\uff0c\u800c Uber Eats \u4e3a 29%\u3002\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u5168\u56fd\u8bb8\u591a\u57ce\u5e02\u548c\u90ca\u533a\u90fd\u8bbe\u7f6e\u4e86\u4e34\u65f6\u4e0a\u9650\u3002 6 \u6708\uff0c\u65e7\u91d1\u5c71\u6210\u4e3a\u7f8e\u56fd\u7b2c\u4e00\u4e2a\u901a\u8fc7\u6c38\u4e45\u8d39\u7528\u4e0a\u9650\u7684\u57ce\u5e02\u3002\u7ebd\u7ea6\u5728\u9001\u9910\u65b9\u9762\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u5982\u679c\u4f60\u4e0d\u80fd\u53bb\u90a3\u91cc\uff0c\u4f60\u80fd\u53bb\u4efb\u4f55\u5730\u65b9\u5417\uff1f", "note_en": "The New York City Council has long had a bone to pick with food delivery platform Grubhub.  During the pandemic, that animus seems to extend to reach the sector more broadly as market share has leveled. Home to about 10% of the U.S. market, and a possible harbinger of local measures elsewhere, the city\u2019s attitude matters a great deal.\n  The conflict heated up last week. On Thursday, the council said it passed five bills meant to shift some of the balance of power away from food delivery platforms toward \u201cstruggling mom and pop shops.\u201d The bills include some straightforward legislation like providing a restaurants\u2019 direct telephone number to eaters and prohibiting platforms from charging restaurants for phone orders that don\u2019t result in transactions.\n  But they also include more controversial and likely more consequential rules. One, if put into effect as anticipated, would  extend temporary caps placed on the commissions food-delivery platforms can charge restaurants at least until mid-February, 2022. Beyond what was decided last week, the city council says it is also scheduled to review a permanent commission cap bill this month.\n    Long-term caps sound ominous for food delivery companies, but the true extent of their effects isn\u2019t fully known. U.S. market leader  DoorDash    DASH  -0.49%  for example, has reported profits on the basis of adjusted earnings before interest, tax, depreciation and amortization for the last four quarters\u2014pretty much the entirety of the pandemic.\n      At the same time, the company said in an April blog post that commission caps have caused a \u201ctangible impact\u201d to its business in terms of lessening demand as prices paid by customers have risen to recoup lost dollars.\n  Food delivery companies don\u2019t typically break out their economics by city, but a spokesperson for Uber Eats did say it had lost more than $60 million in New York City alone due to pandemic-related commission caps. For food delivery companies, consumers\u2019 price sensitivity is likely to increase post-pandemic as they gain access to in-person dining and  rely less on delivery.\n  There are also other threats. The council also voted to require delivery services to share monthly eater information with restaurants if restaurants request it. While it remains unclear as to exactly what data this rule will cover, a summary of the bill suggests it could include eaters\u2019 names, phone numbers, email addresses, home addresses and what is ordered.\n    That would arm restaurants with information they could use to determine where their orders are coming from, helping them to assess delivery platforms\u2019 individual worth. It could also significantly lower switching costs between platforms and help enable restaurants to better access customers themselves.\n  While a lot has been said of commission caps in food delivery, deciding who has access to eaters\u2019 data is no less controversial. Food-delivery platforms have argued such a law would put eaters\u2019 personal information at risk, noting consumers should be able to opt-in to data sharing rather than opt-out. Others have described third-party delivery as a \u201cgatekeeper\u201d of data with one source likening platforms to a \u201cdiner cartel\u201d that is finally being busted.\n  New York\u2019s move is of particular importance to Grubhub since the city is its largest U.S. market. As of June, Bloomberg Second Measure data show Grubhub and DoorDash were tied with the market share lead in New York City with 35% a piece to Uber Eats\u2019 29%. Elsewhere, temporary caps have been put into place across many cities and suburbs nationwide. In June, San Francisco became the first city in the U.S. to pass a permanent fee cap.\n  New York looms large for food delivery. If you can\u2019t make it there, can you make it anywhere?", "posttime": "2021-08-02 22:12:02", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u964d\u4f4e,city,\u5e73\u53f0", "title": "\u7ebd\u7ea6\u5e02\u8bae\u4f1a\u901a\u8fc7\u4e86\u4e94\u9879\u65e8\u5728\u964d\u4f4e\u5916\u5356\u5e73\u53f0\u6743\u529b\u7684\u6cd5\u6848\uff0c\u5305\u62ec\u5c06\u9910\u5385\u4f63\u91d1\u4e0a\u9650\u5ef6\u957f\u81f3 2022 \u5e74 2 \u6708", "title_en": "New York City Council passes five bills aimed at reducing the power of food delivery platforms, including extending a cap on restaurant commissions to Feb. 2022", "transed": 1, "url": "https://www.wsj.com/articles/big-apple-takes-bite-out-of-food-delivery-11627910300?mod=djemalertNEWS", "via": "", "real_tags": ["\u964d\u4f4e", "city", "\u5e73\u53f0"]}, {"category": "", "categoryclass": "", "imagename": "9ce560ee58b9915ced435c04676bc0fe.jpg", "infoid": 1071180, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\u53d1\u5e03\u4e86\u5173\u4e8e\u4e5d\u4e2a\u88ab\u79f0\u4e3a PwnedPiper \u7684\u6f0f\u6d1e\u96c6\u5408\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8fd9\u4e9b\u6f0f\u6d1e\u5f71\u54cd\u4e86\u5317\u7f8e\u5927\u7ea6 80% \u7684\u4e3b\u8981\u533b\u9662\u5b89\u88c5\u7684\u4e00\u79cd\u5e38\u89c1\u7684\u533b\u7597\u8bbe\u5907\u3002\u6765\u81ea Swisslog Healthcare \u7684 TransLogic \u6c14\u52a8\u7ba1\u9053\u7cfb\u7edf (PTS) \u662f\u4e00\u4e2a\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u5b83\u4f7f\u7528\u538b\u7f29\u7a7a\u6c14\u901a\u8fc7\u8fde\u63a5\u5927\u578b\u533b\u9662\u5185\u4e0d\u540c\u90e8\u95e8\u7684\u7ba1\u9053\u79fb\u52a8\u533b\u7597\u7528\u54c1\uff08\u5b9e\u9a8c\u5ba4\u6837\u672c\u3001\u836f\u54c1\u3001\u8840\u6db2\u5236\u54c1\u7b49\uff09\u3002 TransLogic \u7cfb\u7edf\u5b89\u88c5\u5728 3,000 \u591a\u5bb6\u533b\u9662\u4e2d\uff0c\u6709\u6548\u5730\u5145\u5f53\u73b0\u4ee3\u533b\u9662\u7684\u8840\u7ba1\uff0c\u56e0\u4e3a\u5b83\u4eec\u5141\u8bb8\u654f\u611f\u533b\u7597\u6750\u6599\u7684\u79fb\u52a8\uff0c\u540c\u65f6\u8ba9\u62a4\u58eb\u53ef\u4ee5\u81ea\u7531\u5730\u4e3a\u60a3\u8005\u63d0\u4f9b\u62a4\u7406\u3002\u5728\u4eca\u5929\u53d1\u8868\u7684\u7814\u7a76\u4e2d\uff0c\u7269\u8054\u7f51\u5b89\u5168\u516c\u53f8 Armis \u8868\u793a\uff0c\u5b83\u5728 Nexus \u63a7\u5236\u9762\u677f\u4e2d\u53d1\u73b0\u4e86\u4e5d\u4e2a\u6f0f\u6d1e\uff0c\u8be5\u8f6f\u4ef6\u662f\u533b\u751f\u548c\u62a4\u58eb\u7528\u6765\u63a7\u5236\u533b\u7597\u6750\u6599\u5728\u533b\u9662\u5404\u90e8\u5206\u4e4b\u95f4\u79fb\u52a8\u65b9\u5f0f\u7684\u8f6f\u4ef6\u3002 Armis \u56e2\u961f\u4eca\u5929\u8868\u793a\uff1a\u201c\u8fd9\u4e9b\u6f0f\u6d1e\u53ef\u4ee5\u4f7f\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u653b\u51fb\u8005\u63a5\u7ba1 Translogic PTS \u7ad9\uff0c\u5e76\u57fa\u672c\u4e0a\u5b8c\u5168\u63a7\u5236\u76ee\u6807\u533b\u9662\u7684 PTS \u7f51\u7edc\u3002\u201d\u8be5\u516c\u53f8\u8865\u5145\u8bf4\uff1a\u201c\u8fd9\u79cd\u7c7b\u578b\u7684\u63a7\u5236\u53ef\u80fd\u4f1a\u5bfc\u81f4\u590d\u6742\u4e14\u4ee4\u4eba\u62c5\u5fe7\u7684\u52d2\u7d22\u8f6f\u4ef6\u653b\u51fb\uff0c\u5e76\u5141\u8bb8\u653b\u51fb\u8005\u6cc4\u9732\u654f\u611f\u7684\u533b\u9662\u4fe1\u606f\u3002\u201d\u867d\u7136\u53ea\u6709\u5f53\u653b\u51fb\u8005\u53ef\u4ee5\u8fde\u63a5\u6216\u5728\u533b\u9662\u7684\u5185\u90e8\u7f51\u7edc\u4e0a\u7acb\u8db3\u65f6\u624d\u80fd\u5229\u7528\u8fd9\u4e9b\u6f0f\u6d1e\uff0c\u4f46\u7531\u4e8e TransLogic \u8bbe\u5907\u5728\u5317\u7f8e\u7684\u6d41\u884c\u4ee5\u53ca\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u6b66\u5668\u5316\u4ee5\u5f71\u54cd\u533b\u9662\u7684\u5185\u90e8\u7f51\u7edc\uff0cPwndPiper \u95ee\u9898\u88ab\u8ba4\u4e3a\u6781\u5176\u4e25\u91cd\u3002\u63d0\u4f9b\u9002\u5f53\u533b\u7597\u670d\u52a1\u7684\u80fd\u529b\u3002\nArmis \u8bf4\uff0c\u8fd9\u4e9b\u95ee\u9898\uff08\u5217\u5728\u672c\u6587\u5e95\u90e8\uff09\u662f\u5728 5 \u6708\u4efd\u53d1\u73b0\u7684\uff0c\u5e76\u62a5\u544a\u7ed9 Swisslog Healthcare\u3002 Swisslog Healthcare \u53d1\u8a00\u4eba\u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u544a\u8bc9 The Record\uff1a\u201c\u9664\u4e86\u4e00\u4e2a\u6f0f\u6d1e\u4e4b\u5916\uff0c\u5176\u4ed6\u6240\u6709\u6f0f\u6d1e\u7684\u8f6f\u4ef6\u66f4\u65b0\u90fd\u5df2\u7ecf\u5f00\u53d1\u51fa\u6765\uff0c\u5176\u4f59\u6f0f\u6d1e\u7684\u5177\u4f53\u7f13\u89e3\u7b56\u7565\u53ef\u4f9b\u5ba2\u6237\u4f7f\u7528\u3002\u201d\u8be5\u516c\u53f8\u4eca\u5929\u53d1\u5e03\u4e86 Nexus \u63a7\u5236\u9762\u677f\u7684 7.2.5.7 \u7248\uff0c\u5e76\u53d1\u5e03\u4e86\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\uff0c\u4e3a\u5176\u5ba2\u6237\u63d0\u4f9b\u4e86\u66f4\u591a\u4fe1\u606f\u3002\u5b83\u8fd8\u8868\u793a\uff0c\u8be5\u95ee\u9898\u4e3b\u8981\u9650\u4e8e\u5317\u7f8e\u7684\u533b\u9662\uff0c\u90a3\u91cc\u5b89\u88c5\u4e86\u5927\u591a\u6570\u6b64\u7c7b\u7ba1\u9053\u7cfb\u7edf\uff0c\u9884\u8ba1\u4eca\u5e74\u665a\u4e9b\u65f6\u5019\u4f1a\u9488\u5bf9\u7b2c\u4e5d\u4e2a\u95ee\u9898\u8fdb\u884c\u4fee\u8865\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u6709\u5173\u4e5d\u4e2a PwndPiper \u6f0f\u6d1e\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 Armis \u56e2\u961f\u8fd8\u8ba1\u5212\u5728\u672c\u5468\uff08\u5468\u4e09\uff09\u4e3e\u884c\u7684 Black Hat \u5b89\u5168\u4f1a\u8bae\u4e0a\u5c55\u793a\u5176\u8c03\u67e5\u7ed3\u679c\u3002 CVE-2021-37163 \u2013 \u4e24\u4e2a\u53ef\u901a\u8fc7 Telnet \u670d\u52a1\u5668\u8bbf\u95ee\u7684\u786c\u7f16\u7801\u5bc6\u7801\uff1a\u4e24\u4e2a\u6f0f\u6d1e\u662f\u7528\u6237\u548c root \u5e10\u6237\u7684\u786c\u7f16\u7801\u5bc6\u7801\uff0c\u53ef\u4ee5\u901a\u8fc7\u767b\u5f55 Nexus \u63a7\u5236\u9762\u677f\u4e0a\u7684 Telnet \u670d\u52a1\u5668\u8fdb\u884c\u8bbf\u95ee \u2013 \u9ed8\u8ba4\u542f\u7528\uff0c\u4ee5\u53ca\u65e0\u6cd5\u901a\u8fc7\u7cfb\u7edf\u7684\u672c\u673a\u914d\u7f6e\u5173\u95ed\u3002 CVE-2021-37167 \u2013 \u7531 root \u8fd0\u884c\u7684\u7528\u6237\u811a\u672c\u53ef\u7528\u4e8e PE\uff1a\u7531\u4e8e\u7531 root \u8fd0\u884c\u7684\u7528\u6237\u811a\u672c\u5bfc\u81f4\u7684\u63d0\u6743\u6f0f\u6d1e\u3002\u901a\u8fc7\u4f7f\u7528\u7528\u6237\u5e10\u6237\u7684\u786c\u7f16\u7801\u51ed\u636e\uff0c\u901a\u8fc7 telnet \u670d\u52a1\u5668\uff0c\u7528\u6237\u53ef\u4ee5\u5229\u7528\u6b64 PE \u83b7\u5f97 root \u8bbf\u95ee\u6743\u9650\u3002 CVE-2021-37161 \u2013 udpRXThread \u4e2d\u7684\u4e0b\u6ea2\uff1b CVE-2021-37162 \u2013 sccProcessMsg \u6ea2\u51fa\uff1b CVE-2021-37165 \u2013 hmiProcessMsg \u6ea2\u51fa\uff1b CVE-2021-37164 \u2013 tcpTxThread \u4e2d\u7684\u4e09\u4e2a\u5806\u6808\u6ea2\u51fa\uff1aNexus \u63a7\u5236\u9762\u677f\u4e2d\u4f7f\u7528\u7684 TLP20 \u534f\u8bae\u5b9e\u73b0\u4e2d\u7684\u56db\u4e2a\u5185\u5b58\u635f\u574f\u9519\u8bef\uff0c\u53ef\u5bfc\u81f4\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u548c\u62d2\u7edd\u670d\u52a1. TLP20 \u534f\u8bae\u662f\u6240\u6709 Translogic \u7ad9\u7684\u63a7\u5236\u534f\u8bae\u3002\nCVE-2021-37166 \u2013 GUI \u5957\u63a5\u5b57\u62d2\u7edd\u670d\u52a1\uff1a\u62d2\u7edd\u670d\u52a1\u6f0f\u6d1e\u662f Nexus \u63a7\u5236\u9762\u677f\u4e0a\u7684 GUI \u8fdb\u7a0b\u5728\u6240\u6709\u63a5\u53e3\u4e0a\u7ed1\u5b9a\u672c\u5730\u670d\u52a1\u7684\u7ed3\u679c\uff0c\u5141\u8bb8\u5916\u90e8\u8fde\u63a5\u52ab\u6301\u5b83\u7684\u8fde\u63a5\u3002\u8fd9\u53ef\u80fd\u5141\u8bb8\u653b\u51fb\u8005\u6a21\u4eff GUI \u547d\u4ee4\u4e0e\u63a7\u5236 Nexus \u63a7\u5236\u9762\u677f\u7684\u4f4e\u7ea7\u8fdb\u7a0b\uff0c\u6709\u6548\u5730\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee\u6240\u6709 GUI \u547d\u4ee4\u3002 CVE-2021-37160 \u2013 \u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u3001\u672a\u52a0\u5bc6\u3001\u672a\u7b7e\u540d\u7684\u56fa\u4ef6\u5347\u7ea7\uff1aNexus \u63a7\u5236\u9762\u677f\u4e0a\u7684\u56fa\u4ef6\u5347\u7ea7\u672a\u52a0\u5bc6\u3001\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u52a0\u5bc6\u7b7e\u540d\u7684\u8bbe\u8ba1\u7f3a\u9677\u3002\u8fd9\u662f\u6700\u4e25\u91cd\u7684\u6f0f\u6d1e\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5141\u8bb8\u653b\u51fb\u8005\u901a\u8fc7\u542f\u52a8\u56fa\u4ef6\u66f4\u65b0\u7a0b\u5e8f\u540c\u65f6\u4fdd\u6301\u8bbe\u5907\u4e0a\u7684\u6301\u4e45\u6027\u6765\u83b7\u5f97\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u3002 [\u672a\u4fee\u8865]", "note_en": "Details have been published today about a collection of nine vulnerabilities known as\u00a0 PwnedPiper\u00a0that impact common a type of medical equipment that\u2019s installed in roughly 80% of all major hospitals in North America.\n The\u00a0 TransLogic Pneumatic Tube Systems (PTS), from Swisslog Healthcare, is a complex system that uses compressed air to move medical supplies (lab samples, medicine, blood products, etc.) using tubes that connect different departments inside large hospitals.\n Installed in more than 3,000 hospitals, TransLogic systems effectively work as the blood vessels of modern hospitals as they allow the movement of sensitive medical material while keeping nurses free to provide patient care.\n In\u00a0 research\u00a0published today, IoT security firm Armis said it discovered nine vulnerabilities in the Nexus Control Panel, the software that doctors and nurses use to control how medical material moves between hospital sections.\n \u201cThese vulnerabilities can enable an unauthenticated attacker to take over Translogic PTS stations and essentially gain complete control over the PTS network of a target hospital,\u201d the Armis team said today.\n \u201cThis type of control could enable sophisticated and worrisome ransomware attacks, as well as allow attackers to leak sensitive hospital information,\u201d the company added.\n While the vulnerabilities can be exploited only if an attacker can connect or has a foothold on the hospital\u2019s internal network, the PwndPiper issues were deemed extremely severe due to the prevalence of TransLogic devices across North America and how easy they could be weaponized to impact a hospital\u2019s ability to provide proper medical care.\n The issues \u2014listed at the bottom of this article\u2014 were discovered in May and reported to Swisslog Healthcare, Armis said.\n \u201cA software update for all but one of the vulnerabilities has been developed, and specific mitigation strategies for the remaining vulnerability are available for customers,\u201d a Swisslog Healthcare spokesperson told\u00a0 The Record\u00a0in an email.\n The company has released today version 7.2.5.7 of the Nexus Control Panel, along with a\u00a0 blog post\u00a0with additional information for its customers. It also said the issue is primarily restricted to hospitals in North America, where most of these tube systems are installed, and that a patch for the ninth issue is expected later this year.\n  Details about the nine PwndPiper vulnerabilities are listed below. The Armis team is also scheduled to present its findings at the\u00a0 Black Hat security conference\u00a0this week, on Wednesday.\n CVE-2021-37163 \u2013 Two hardcoded passwords accessible through the Telnet server:\u00a0Two vulnerabilities that are hardcoded passwords of user and root accounts, that can be accessed by login to the Telnet server on the Nexus Control Panel \u2013 that is enabled by default, and can not be turned off by native configuration of the system.\n CVE-2021-37167 \u2013 User script run by root can be used for PE:\u00a0A privilege escalation vulnerability due to a user script being run by root. By using the hardcoded credentials of the user account, through the telnet server, the user can leverage this PE to gain root access.\n CVE-2021-37161 \u2013 Underflow in udpRXThread; CVE-2021-37162 \u2013 Overflow in sccProcessMsg; CVE-2021-37165 \u2013 Overflow in hmiProcessMsg; CVE-2021-37164 \u2013 Off-by-three stack overflow in tcpTxThread:\u00a0Four memory corruption bugs in the implementation of the TLP20 protocol as used in the Nexus Control Panel, that can lead to remote-code-execution and denial-of-service. The TLP20 protocol is the control protocol for all Translogic stations.\n CVE-2021-37166 \u2013 GUI socket Denial Of Service:\u00a0A denial-of-service vulnerability that is a result of the GUI process on the Nexus Control Panel binding a local service on all interfaces, allowing external connections to hijack it\u2019s connection. This can allow an attacker to mimic the GUI commands versus the low-level process that controls the Nexus Control Panel, effectively accessing all GUI commands through the network.\n CVE-2021-37160 \u2013 Unauthenticated, unencrypted, unsigned firmware upgrade:\u00a0A design flaw in which firmware upgrades on the Nexus Control Panel are unencrypted, unauthenticated and do not require any cryptographic signature. This is the most severe vulnerability, since it can allow an attacker to gain unauthenticated remote-code-execution by initiating a firmware update procedure while also maintaining persistence on the device.\u00a0   [Unpatched]", "posttime": "2021-08-02 22:11:38", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6f0f\u6d1e,\u7f8e\u56fd,\u7ba1\u9053,collection", "title": "\u7814\u7a76\u4eba\u5458\u8868\u793a\uff0c\u5171\u6709\u4e5d\u4e2a\u6f0f\u6d1e\u5f71\u54cd\u5b89\u88c5\u5728\u7f8e\u56fd\u7ea6 80% \u7684\u4e3b\u8981\u533b\u9662\u4e2d\u7684\u6c14\u52a8\u7ba1\u9053\u7cfb\u7edf", "title_en": "Researchers say a collection of nine vulnerabilities impact pneumatic tube systems installed in ~80% of all major US hospitals", "transed": 1, "url": "https://therecord.media/pwnedpiper-vulnerabilities-impact-80-of-major-hospitals-in-north-america/", "via": "", "real_tags": ["\u6f0f\u6d1e", "\u7f8e\u56fd", "\u7ba1\u9053"]}, {"category": "", "categoryclass": "", "imagename": "06c2a61fdbf5d695c28d9a6e248ebf05.jpg", "infoid": 1071179, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7a81\u663e\u4e86\u7279\u6717\u666e\u53ca\u5176\u8ffd\u968f\u8005\u5728 1 \u6708 6 \u65e5\u56fd\u4f1a\u5c71\u9a9a\u4e71\u540e\u88ab\u7981\u6b62\u8fdb\u5165\u4e3b\u6d41\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u540e\u9762\u4e34\u7684\u6311\u6218\u3002\u4f0a\u65af\u5170\u56fd\u201c\u975e\u5e38\u8fc5\u901f\u5730\u5229\u7528 GETTR\uff0c\u201d\u6218\u7565\u5bf9\u8bdd\u7814\u7a76\u6240\u975e\u6d32\u3001\u4e2d\u4e1c\u548c\u4e9a\u6d32\u6267\u884c\u8463\u4e8b\u7a46\u65af\u5854\u6cd5\u00b7\u963f\u4e9a\u5fb7\u8bf4\uff0c\u8be5\u7814\u7a76\u6240\u662f\u4e00\u4e2a\u8ffd\u8e2a\u7f51\u7edc\u6781\u7aef\u4e3b\u4e49\u7684\u667a\u56ca\u56e2\uff0c\u4ed6\u9996\u5148\u53d1\u73b0\u4e86\u5723\u6218\u8d26\u6237\u5e76\u5206\u4eab\u4e86\u4ed6\u7684POLITICO \u7684\u8c03\u67e5\u7ed3\u679c\u3002 \u201c\u5728 Facebook \u4e0a\uff0c\u6211\u5173\u6ce8\u7684\u5176\u4e2d\u4e00\u4e2a\u8d26\u6237\u4e0a\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a\u4f0a\u65af\u5170\u56fd\u7684\u8d26\u6237\uff0c\u4e0a\u9762\u5199\u7740\u2018\u54e6\uff0c\u7279\u6717\u666e\u5ba3\u5e03\u4e86\u4ed6\u7684\u65b0\u5e73\u53f0\u3002 Inshallah\uff0c\u6240\u6709\u5723\u6218\u8005\u90fd\u5c06\u5229\u7528\u8be5\u5e73\u53f0\uff0c&#39;\u201d\u4ed6\u8865\u5145\u9053\u3002 \u201c\u7b2c\u4e8c\u5929\uff0cGETTR \u4e0a\u81f3\u5c11\u6709 15 \u4e2a\u8d26\u6237\u662f\u4f0a\u65af\u5170\u56fd\u3002\u201d\u867d\u7136 GETTR \u4e0d\u63d0\u4f9b\u5bf9\u5176\u6570\u636e\u7684\u8bbf\u95ee\u4ee5\u8ddf\u8e2a\u6b64\u7c7b\u6781\u7aef\u4e3b\u4e49\u6750\u6599\u5728\u5176\u5e73\u53f0\u4e0a\u7684\u4f20\u64ad\u6216\u75c5\u6bd2\u5f0f\u4f20\u64ad\uff0c\u4f46 POLITICO \u53d1\u73b0\u81ea 7 \u6708\u521d\u4ee5\u6765\u81f3\u5c11\u6709 250 \u4e2a\u5e10\u6237\u5b9a\u671f\u5728\u8be5\u5e73\u53f0\u4e0a\u53d1\u5e03\u3002\u8bb8\u591a\u4eba\u4e92\u76f8\u5173\u6ce8\uff0c\u5e76\u4f7f\u7528\u6807\u7b7e\u5c06\u5723\u6218\u6750\u6599\u63a8\u5e7f\u5230\u8fd9\u4e2a\u65b0\u5174\u7684\u5728\u7ebf\u793e\u533a\u3002\u5728\u4ed6\u88ab\u63a8\u7279\u548c Facebook \u505c\u804c\u540e\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u7279\u6717\u666e\u4e00\u76f4\u5728\u5bfb\u627e\u5176\u4ed6\u65b9\u5f0f\u4e0e\u4ed6\u7684\u5728\u7ebf\u57fa\u5730\u4e92\u52a8\u3002\u867d\u7136\u4ed6\u7684\u652f\u6301\u8005\u8f6c\u5411\u5176\u4ed6\u5728\u7ebf\u573a\u6240\u2014\u2014\u5305\u62ec\u793e\u4ea4\u7f51\u7edc Parler\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5728\u90a3\u91cc\u8868\u8fbe\u81ea\u5df1\u800c\u4e0d\u4f1a\u9762\u4e34\u66f4\u591a\u5ba1\u67e5\u2014\u2014\u4f46\u7279\u6717\u666e\u81ea\u5df1\u521b\u5efa\u4e92\u8054\u7f51\u6269\u97f3\u5668\u7684\u52aa\u529b\u5374\u505c\u6ede\u4e0d\u524d\u3002 5 \u6708\uff0c\u4ed6\u63a8\u51fa\u4e86\u4e00\u4e2a\u535a\u5ba2\u2014\u2014\u6807\u9898\u4e3a\u201c\u6765\u81ea\u5510\u7eb3\u5fb7\u00b7J\u00b7\u7279\u6717\u666e\u7684\u529e\u516c\u684c\u201d\u2014\u2014\u4f46\u51e0\u5468\u540e\uff0c\u7531\u4e8e\u5e7f\u6cdb\u7684\u5632\u7b11\u548c\u7cdf\u7cd5\u7684\u8bfb\u8005\u7fa4\uff0c\u8be5\u535a\u5ba2\u88ab\u64a4\u4e0b\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0cGETTR \u4e00\u76f4\u662f\u6700\u5f15\u4eba\u6ce8\u76ee\u7684\u4eb2\u7279\u6717\u666e\u5e73\u53f0\u53d1\u5e03\uff0c\u56e0\u4e3a\u5b83\u80cc\u540e\u7684\u540d\u5b57\u662f\uff1a\u524d\u7279\u6717\u666e\u53d1\u8a00\u4eba\u8d3e\u68ee\u7c73\u52d2\u662f\u5176\u9996\u5e2d\u6267\u884c\u5b98\uff0c\u8be5\u7f51\u7ad9\u90e8\u5206\u7531\u524d\u7279\u6717\u666e\u7684\u5546\u4e1a\u4f19\u4f34\u8fc8\u5c14\u65af\u90ed\u63d0\u4f9b\u8d44\u91d1\u987e\u95ee\u53f2\u8482\u592b\u73ed\u519c\u3002\u7279\u6717\u666e\u672c\u4eba\u5e76\u672a\u76f4\u63a5\u53c2\u4e0e\u8be5\u884c\u52a8\uff0c\u4e5f\u672a\u6b63\u5f0f\u7b7e\u7f72\u8be5\u5e73\u53f0\u3002\u8be5\u793e\u4ea4\u7f51\u7edc\u5439\u6367\u4e86\u4e00\u9879\u201c\u8a00\u8bba\u81ea\u7531\u201d\u653f\u7b56\uff0c\u636e\u79f0\u8be5\u653f\u7b56\u5c06\u5141\u8bb8\u7528\u6237\u5728\u4e0d\u53d7\u79d1\u6280\u5de8\u5934\u5ba1\u67e5\u7684\u60c5\u51b5\u4e0b\u5145\u5206\u8868\u8fbe\u81ea\u5df1\u3002\n\u7136\u800c\uff0c\u636e\u6781\u7aef\u4e3b\u4e49\u4e13\u5bb6\u79f0\uff0c\u8fd9\u79cd MAGA \u6d41\u5411\u652f\u6301\u4e0d\u53d7\u7ea6\u675f\u7684\u8a00\u8bba\u7684\u8fb9\u7f18\u793e\u4ea4\u7f51\u7edc\u4e5f\u5f15\u8d77\u4e86\u4f0a\u65af\u5170\u56fd\u548c\u5176\u4ed6\u5723\u6218\u7ec4\u7ec7\u652f\u6301\u8005\u7684\u6ce8\u610f\u3002\u5728\u56de\u7b54\u6709\u5173\u5728 GETTR \u4e0a\u5206\u4eab\u5723\u6218\u6750\u6599\u7684\u95ee\u9898\u65f6\uff0c\u7c73\u52d2\u544a\u8bc9 POLITICO\uff0cISIS \u6b63\u5728\u653b\u51fb MAGA \u8fd0\u52a8\uff0c\u56e0\u4e3a\u7279\u6717\u666e\u5df2\u7ecf\u5728\u519b\u4e8b\u4e0a\u6467\u6bc1\u4e86\u8be5\u7ec4\u7ec7\u3002\u4ed6\u5728\u4e00\u6761\u77ed\u4fe1\u4e2d\u8bf4\uff1a\u201c\u552f\u4e00\u8fd8\u6d3b\u7740\u7684 ISIS \u6210\u5458\u662f\u8eb2\u5728\u5c71\u6d1e\u91cc\u5403\u571f\u997c\u5e72\u7684\u952e\u76d8\u4fa0\u3002\u201d\u8fd9\u4e9b\u6050\u6016\u793e\u533a\u540c\u6837\u9762\u4e34\u7740\u4ece\u6700\u5927\u7684\u793e\u4ea4\u7f51\u7edc\u4e2d\u88ab\u5e7f\u6cdb\u5220\u9664\u7684\u60c5\u51b5\uff0c\u8fd9\u4e9b\u7f51\u7edc\u7ecf\u5e38\u4fc3\u8fdb\u4ed6\u4eec\u5bf9\u4f0a\u65af\u5170\u6781\u7aef\u5206\u5b50\u7684\u9547\u538b\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u79d1\u6280\u516c\u53f8\u5982\u4f55\u76d1\u7ba1\u5176\u5168\u7403\u5e73\u53f0\u4ee5\u67e5\u627e\u6709\u5bb3\u5185\u5bb9\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u4f5c\u4e3a\u56de\u5e94\uff0c\u4f0a\u65af\u5170\u56fd\u7684\u652f\u6301\u8005\u8fc5\u901f\u6539\u53d8\u4e86\u65b9\u5411\uff0c\u5728\u7f51\u4e0a\u5bfb\u627e\u53ef\u4ee5\u4f20\u64ad\u4ec7\u6068\u6750\u6599\u7684\u65b0\u7a7a\u95f4\uff0c\u5e76\u5229\u7528\u7f8e\u56fd\u9996\u6b21\u4f7f\u7528\u7684\u7b56\u7565\u548c\u5e73\u53f0\u3002 \u201c\u8fbe\u4f0a\u6c99\u5728\u5417\uff1f\u201d\u95ee\u4e00\u4e2a\u5e10\u6237\uff0c\u5176\u4e2a\u4eba\u8d44\u6599\u7167\u7247\u662f\u4f0a\u65af\u5170\u56fd\u56fd\u65d7\u5e10\u6237\uff0c\u4f7f\u7528\u963f\u62c9\u4f2f\u8bed\u5723\u6218\u8fd0\u52a8\u7684\u9996\u5b57\u6bcd\u7f29\u5199\u8bcd\u3002\u7b54\u590d\u662f\u80af\u5b9a\u7684\uff0c\u6709\u4e9b\u4eba\u79f0\u8d5e\u793e\u4ea4\u7f51\u7edc\u613f\u610f\u6258\u7ba1\u6b64\u7c7b\u5185\u5bb9\u3002\u5728 GETTR \u4e8e 7 \u6708 1 \u65e5\u542f\u52a8\u51e0\u5929\u540e\uff0c\u4f0a\u65af\u5170\u56fd\u7684\u652f\u6301\u8005\u5f00\u59cb\u6566\u4fc3\u4ed6\u4eec\u5728\u5176\u4ed6\u793e\u4ea4\u7f51\u7edc\u4e0a\u7684\u8ffd\u968f\u8005\u6ce8\u518c\u652f\u6301\u7279\u6717\u666e\u7684\u7f51\u7edc\uff0c\u90e8\u5206\u539f\u56e0\u662f\u4e3a\u4e86\u5c06\u5723\u6218\u6597\u4e89\u76f4\u63a5\u5e26\u5230 MAGA \u56fd\u5bb6\u3002 7 \u6708 6 \u65e5\uff0c\u4f0a\u65af\u5170\u56fd\u5728 Facebook \u4e0a\u7684\u4e00\u4e2a\u8d26\u6237\u5199\u9053\uff1a\u201c\u5982\u679c\u8fd9\u6b3e\u5e94\u7528\u8fbe\u5230\u9884\u671f\u7684\u6210\u529f\uff0c\u8fd9\u5f88\u6709\u53ef\u80fd\uff0c\u5b83\u5e94\u8be5\u88ab\u8ffd\u968f\u8005\u91c7\u7528\u5e76\u5360\u9886\uff0c\u4ee5\u91cd\u65b0\u83b7\u5f97 Twitter \u7684\u8363\u8000\uff0c\u613f\u4e0a\u5e1d\u83b7\u80dc\u3002\u201d\n\u4ece 7 \u6708\u521d\u5f00\u59cb\uff0cGETTR \u4e0a\u7684\u4e00\u4e9b\u5723\u6218\u5e16\u5b50\u6700\u7ec8\u88ab\u5220\u9664\uff0c\u8fd9\u8868\u660e\u4eb2\u7279\u6717\u666e\u5e73\u53f0\u81f3\u5c11\u5df2\u91c7\u53d6\u4e00\u4e9b\u63aa\u65bd\u6765\u5220\u9664\u6709\u5bb3\u6750\u6599\u3002 Facebook \u548c Twitter \u7b49\u66f4\u5927\u7684\u5e73\u53f0\u73b0\u5728\u901a\u8fc7\u5168\u7403\u4e92\u8054\u7f51\u53cd\u6050\u8bba\u575b\u8fd0\u4f5c\uff0c\u8fd9\u662f\u4e00\u4e2a\u7531\u884c\u4e1a\u8d44\u52a9\u7684\u975e\u8425\u5229\u7ec4\u7ec7\uff0c\u901a\u8fc7\u5176\u6210\u5458\u53ef\u4ee5\u8bbf\u95ee\u7684\u6781\u7aef\u4e3b\u4e49\u6750\u6599\u6570\u636e\u5e93\uff0c\u5728\u516c\u53f8\u4e4b\u95f4\u5171\u4eab\u6050\u6016\u4e3b\u4e49\u5185\u5bb9\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5c3d\u5feb\u5220\u9664\u8fd9\u4e9b\u6750\u6599\u5c3d\u53ef\u80fd\u3002\u5728\u5e73\u53f0\u7684\u670d\u52a1\u6761\u6b3e\u4e2d\uff0c\u5b83\u6982\u8ff0\u4e86\u5982\u4f55\u4ece GETTR \u4e2d\u5220\u9664\u653b\u51fb\u6027\u6216\u975e\u6cd5\u5185\u5bb9\uff0c\u5305\u62ec\u4e0e\u6050\u6016\u4e3b\u4e49\u6709\u5173\u7684\u5185\u5bb9\u3002 \u201c\u8fd9\u53ef\u80fd\u5305\u62ec\u88ab\u8ba4\u5b9a\u4e3a\u4e2a\u4eba\u6b3a\u51cc\u3001\u5bf9\u513f\u7ae5\u7684\u6027\u8650\u5f85\u3001\u653b\u51fb\u4efb\u4f55\u5b97\u6559\u6216\u79cd\u65cf\u7684\u5185\u5bb9\uff0c\u6216\u8005\u5305\u542b\u89c6\u9891\u6216\u65a9\u9996\u63cf\u8ff0\u7684\u5185\u5bb9\uff0c\u201d\u4e00\u4e2a\u6761\u6b3e\u5199\u9053\u3002\u5c3d\u7ba1\u8be5\u7f51\u7ad9\u5728\u7ba1\u7406\u5e73\u53f0\u4e0a\u7684\u7528\u6237\u65b9\u9762\u8fd0\u6c14\u4e0d\u4f73\u2014\u2014\u5728\u65e9\u671f\uff0c\u5b83\u5145\u65a5\u7740\u5404\u79cd\u5404\u6837\u7684\u8272\u60c5\u5185\u5bb9\u2014\u2014\u4f46\u7c73\u52d2\u5df2\u7ecf\u5728\u4eba\u8089\u641c\u7d22\u3001\u5206\u4eab\u5176\u4ed6\u4eba\u7684\u5730\u5740\u6216\u9f13\u5439\u8eab\u4f53\u4f24\u5bb3\u65b9\u9762\u5212\u6e05\u754c\u9650\u3002\u5728\u91c7\u8bbf\u4e2d\uff0cGETTR \u7684\u9996\u5e2d\u6267\u884c\u5b98\u5439\u6367\u4e86\u8be5\u7f51\u7ad9\u7684\u5185\u5bb9\u5ba1\u6838\u653f\u7b56\uff0c\u4e3b\u8981\u57fa\u4e8e\u4eba\u5de5\u76d1\u63a7\u548c\u7b97\u6cd5\u7684\u7ed3\u5408\u3002\u5728 POLITICO \u5411 GETTR \u63d0\u4ea4\u4e86\u51e0\u9879\u8bc4\u8bba\u8bf7\u6c42\u56db\u5929\u540e\uff0c\u5176\u4e2d\u8bb8\u591a\u5e10\u6237\u548c\u89c6\u9891\u4ecd\u7136\u5b58\u5728\u3002 POLITICO \u5728 GETTR \u4e0a\u53d1\u73b0\u7684\u6050\u6016\u4e3b\u4e49\u5ba3\u4f20\u603b\u91cf\u4ec5\u5360\u5927\u90e8\u5206\u53f3\u7ffc\u5185\u5bb9\u7684\u4e00\u5c0f\u90e8\u5206\u2014\u2014\u5176\u4e2d\u8fd8\u5305\u62ec\u5ba3\u4f20 Proud Boys \u767d\u4eba\u81f3\u4e0a\u4e3b\u4e49\u8fd0\u52a8\u3002\u66f4\u591a\u4e3b\u6d41\u4fdd\u5b88\u6d3e\u5f71\u54cd\u8005\u548c\u653f\u7b56\u5236\u5b9a\u8005\uff0c\u5982 Sean Hannity \u548c Mike Pompeo\uff0c\u4e5f\u5b9a\u671f\u5728\u8be5\u5e73\u53f0\u4e0a\u53d1\u5e16\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u79cd\u5723\u6218\u6750\u6599\u5728\u793e\u4ea4\u7f51\u7edc\u4e0a\u5f88\u5bb9\u6613\u83b7\u5f97\u7684\u4e8b\u5b9e\uff0c\u4ee5\u53ca GETTR \u672a\u80fd\u6253\u51fb\u8fd9\u79cd\u6781\u7aef\u4e3b\u4e49\uff0c\u7a81\u663e\u4e86\u8be5\u516c\u53f8\u5728\u5e73\u8861\u5176\u8a00\u8bba\u81ea\u7531\u7cbe\u795e\u4e0e\u963b\u6b62\u6050\u6016\u4e3b\u4e49\u76f8\u5173\u6750\u6599\u88ab\u53d1\u73b0\u7684\u65e5\u76ca\u589e\u957f\u7684\u9700\u6c42\u65b9\u9762\u9762\u4e34\u7684\u56f0\u96be\u3002\u5728\u7ebf\u89c2\u4f17\u3002 \u201c\u6211\u4eec\u5728\u5c0f\u578b\u5e73\u53f0\u4e0a\u9047\u5230\u7684\u5185\u5bb9\u57fa\u672c\u4e0a\u7c7b\u4f3c\u4e8e\u4ece Facebook \u548c Twitter \u81ea\u52a8\u5220\u9664\u7684\u5185\u5bb9\uff0c\u201d\u4e0e\u8f83\u5c0f\u793e\u4ea4\u7f51\u7edc\u5408\u4f5c\u7684\u975e\u8425\u5229\u7ec4\u7ec7 Tech Against Terrorism \u7684\u4e3b\u7ba1 Adam Hadley \u8bf4\uff0c\u4f46\u5e76\u975e\u5982\u6b64\u3002 GETTR\uff0c\u6253\u51fb\u7f51\u4e0a\u6781\u7aef\u4e3b\u4e49\u5185\u5bb9\u7684\u5174\u8d77\u3002 \u201c\u8bb8\u591a\u8f83\u5c0f\u7684\u5e73\u53f0\u6ca1\u6709\u8d44\u6e90\u6765\u81ea\u52a8\u5220\u9664\u6b64\u7c7b\u5185\u5bb9\uff0c\u201d\u4ed6\u8865\u5145\u9053\u3002\u4ed6\u7684\u7ec4\u7ec7\u7684\u6210\u5458\u5305\u62ec Tumblr \u548c\u535a\u5ba2\u5e73\u53f0 Wordpress\u3002\u5ba1\u67e5 POLITICO \u8c03\u67e5\u7ed3\u679c\u7684\u6781\u7aef\u4e3b\u4e49\u5206\u6790\u5e08\u8868\u793a\uff0c\u4f0a\u65af\u5170\u56fd\u652f\u6301\u8005\u5bf9 GETTR \u7684\u4f7f\u7528\u4f3c\u4e4e\u662f\u521d\u6b65\u6d4b\u8bd5\uff0c\u4ee5\u786e\u5b9a\u4ed6\u4eec\u7684\u5185\u5bb9\u662f\u5426\u4f1a\u9003\u8131\u68c0\u6d4b\u6216\u53d7\u5230\u5185\u5bb9\u5ba1\u6838\u3002\u5728\u4ed6\u4eec\u4e0e\u897f\u65b9\u56fd\u5bb6\u5b89\u5168\u673a\u6784\u548c\u7845\u8c37\u5e73\u53f0\u7684\u6301\u7eed\u732b\u6349\u8001\u9f20\u4e4b\u6218\u4e2d\uff0c\u5723\u6218\u7ec4\u7ec7\u6b63\u5728\u8fc5\u901f\u6539\u53d8\u4ed6\u4eec\u7684\u7b56\u7565\uff0c\u4ee5\u5728\u5728\u7ebf\u6e05\u9664\u4e4b\u524d\u9886\u5148\u4e00\u6b65\u3002\u6570\u5b57\u53d6\u8bc1\u7814\u7a76\u5b9e\u9a8c\u5ba4\u9ad8\u7ea7\u7814\u7a76\u5458\u3001\u300aLikeWar\uff1a\u793e\u4ea4\u5a92\u4f53\u7684\u6b66\u5668\u5316\u3002\u201d\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4f0a\u65af\u5170\u56fd\u7684\u652f\u6301\u8005\u6b63\u5728\u4eab\u53d7\u4ed6\u4eec\u5bf9 GETTR \u7684\u5165\u4fb5\u4ee5\u53ca\u4ed6\u4eec\u53ef\u80fd\u63a5\u89e6\u5230\u7684\u65b0\u53d7\u4f17\u3002 \u201c\u6211\u4eec\u5c06\u7528\u6740\u622e\u548c\u7206\u70b8\u6765\u653b\u51fb\u4f60\u4eec\uff0c\u4f60\u4eec\u8fd9\u4e9b\u5341\u5b57\u67b6\u7684\u5d07\u62dc\u8005\uff0c\u201d\u4e00\u4e2a\u540d\u5b57\u63d0\u5230\u4e86\u6781\u7aef\u7ec4\u7ec7\u7684\u8d26\u6237\u5199\u9053\uff0c\u5e76\u8865\u5145\u8bf4\uff1a\u201c\u8a00\u8bba\u81ea\u7531\u662f\u591a\u4e48\u4f1f\u5927\u3002\u201d\n\u201cISIS \u6b63\u8bd5\u56fe\u653b\u51fb MAGA \u8fd0\u52a8\uff0c\u56e0\u4e3a\u7279\u6717\u666e\u603b\u7edf\u5c06\u4ed6\u4eec\u4ece\u5730\u7403\u8868\u9762\u62b9\u53bb\uff0c\u5728\u4e0d\u5230 18 \u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u6467\u6bc1\u4e86\u54c8\u91cc\u53d1\u56fd\uff0c\u800c\u552f\u4e00\u8fd8\u6d3b\u7740\u7684 ISIS \u6210\u5458\u662f\u8eb2\u5728\u6d1e\u7a74\u91cc\u5403\u6ce5\u997c\u7684\u952e\u76d8\u4fa0\uff0c\u201d\u6770\u68eeGETTR \u9996\u5e2d\u6267\u884c\u5b98\u7c73\u52d2\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\u3002 \u201cGETTR \u62e5\u6709\u5f3a\u5927\u4e14\u4e3b\u52a8\u7684\u5ba1\u6838\u7cfb\u7edf\uff0c\u53ef\u4ee5\u5220\u9664\u88ab\u7981\u6b62\u7684\u5185\u5bb9\uff0c\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528\u5c16\u7aef AI \u6280\u672f\u548c\u4eba\u5de5\u5ba1\u6838\u3002\u201d", "note_en": "It underscores the challenges facing Trump and his followers in the wake of his ban from the mainstream social media platforms following the Jan. 6 Capitol Hill riots.\n Islamic State \u201chas been very quick to exploit GETTR,\u201d said Moustafa Ayad, executive director for Africa, the Middle East and Asia at the Institute for Strategic Dialogue, a think tank that tracks online extremism, who first discovered the jihadi accounts and shared his findings with POLITICO.\n \u201cOn Facebook, there was on one of these accounts that I follow that is known to be Islamic State, which said \u2018Oh, Trump announced his new platform. Inshallah, all the mujahideen will exploit that platform,\u2019\u201d he added. \u201cThe next day, there were at least 15 accounts on GETTR that were Islamic State.\u201d\n While GETTR does not provide access to its data to track the spread, or virality, of such extremist material on its platform, POLITICO found at least 250 accounts that had posted regularly on the platform since early July. Many followed each other, and used hashtags to promote the jihadi material to this burgeoning online community.\n In the months since he was kicked off Twitter and suspended from Facebook, Trump has sought alternative ways to engage with his base online. While his supporters decamped to other online venues \u2014 including the social network Parler, where they could express themselves without facing increased scrutiny \u2014 Trump\u2019s own effort to create an internet bullhorn has stalled.\n In May, he launched a blog \u2014 titled \u201cFrom the Desk of Donald J. Trump\u201d \u2014 but it was taken down just weeks later amid widespread ridicule and poor readership.\n So far, GETTR has been the highest-profile pro-Trump platform launch, given the names behind it: Jason Miller, former Trump spokesperson, is its chief executive, and the site is partially funded by Miles Guo, the business partner of former Trump advisor Steve Bannon. Trump, himself, is not directly involved in the operation, nor has he officially signed up to the platform. The social network has touted a \u201cfree speech\u201d policy that, purportedly, would allow users to fully express themselves without the censorship of tech giants.\n  Yet this MAGA exodus to fringe social networks that champion unfettered speech has also caught the attention of supporters of Islamic State and other jihadist groups, according to extremism experts.\n In response to questions about jihadi material being shared on GETTR, Miller told POLITICO that ISIS was attacking the MAGA movement because Trump had destroyed the group militarily. \u201cThe only ISIS members still alive are keyboard warriors hiding in caves and eating dirt cookies,\u201d he said in a text message.\n These terrorist communities have similarly faced widespread removals from the largest social networks, which have often promoted their clampdown on Islamic extremists as an example of how the tech companies are policing their global platforms for harmful content.\n In response, Islamic State supporters have quickly shifted gears, looking for new spaces online where they can spread their hateful material, as well as piggybacking on tactics and platforms first used in the United States.\n \u201cIs  Daesh here?\u201d asked an account whose profile photo was of the Islamic State flag account, using the Arabic acronym for jihadi movement. The replies were in the affirmative, with some praising the social network for its willingness to host such content.\n Days after GETTR was launched on July 1, Islamic State supporters began urging their followers on other social networks to sign up to the pro-Trump network, in part to take the jihadi fight directly to MAGA nation.\n \u201cIf this app reaches the expected success, which is mostly probable, it should be adopted by followers and occupied in order to regain the glory of Twitter, may God prevail,\u201d one Islamic State account on Facebook wrote on July 6.\n Some of the jihadi posts on GETTR from early July were eventually taken down, highlighting that the pro-Trump platform had taken at least some steps to remove the harmful material.\n Larger platforms like Facebook and Twitter now work via the Global Internet Forum to Counter Terrorism, an industry-funded nonprofit which shares terrorist content between companies \u2014 via a database of extremist material accessible to its members \u2014 so that the material can be taken down as quickly as possible.\n  In the  platform\u2019s terms of service, it outlines how offensive or illegal content, including that related to terrorism, may be removed from GETTR. \u201cThis may include content identified as personal bullying, sexual abuse of a child, attacking any religion or race, or content containing video or depictions of beheading,\u201d a clause reads.\n Though the site has had notoriously spotty luck in moderating users on the platform \u2014 in its early days, it was flooded with a wide spectrum of pornography \u2014 Miller has drawn the line at doxxing, or sharing other people\u2019s addresses, or advocating physical harm.\n In  interviews, GETTR\u2019s chief executive has touted the site\u2019s content moderation policy, primarily based on a combination of human monitoring and algorithms.\n Four days after POLITICO submitted several requests for comment to GETTR, many of these accounts and videos are still up.\n The overall amount of terrorist propaganda that POLITICO found on GETTR represented a mere fraction of the mostly right-wing content \u2014 which also includes the promotion of the Proud Boys white supremacist movement. More mainstream conservative influencers and policymakers like Sean Hannity and Mike Pompeo also regularly post on the platform.\n Still, the fact that such jihadi material was readily available on the social network, and GETTR\u2019s failure to clamp down on such extremism, underlined the difficulties that the company faces in balancing its free speech ethos with growing demands to stop terrorist-related material from finding an audience online.\n \u201cThe content we\u2019re coming across on small platforms is basically similar to the content that is being automatically removed from Facebook and Twitter,\u201d said Adam Hadley, director of Tech Against Terrorism, a nonprofit organization that works with smaller social networks, but not GETTR, in combating the rise of extremist content online.\n \u201cMany of the smaller platforms do not have the resources to automatically remove this type of content,\u201d he added. His organization\u2019s membership includes Tumblr and Wordpress, the blogging platform.\n Extremism analysts who reviewed POLITICO\u2019s findings said that Islamic State supporters\u2019 use of GETTR appeared to be an initial test to see if their content would escape detection or be subject to content moderation.\n In their ongoing cat-and-mouse fight with Western national security agencies and Silicon Valley platforms, jihadi groups are quickly evolving their tactics to stay one step ahead of online removals.\n \u201cThe terrorist organizations are always experimenting, because they&#39;re fighting a real battle to continue to have access to public spaces to spread their propaganda,\u201d said Emerson Brooking, a senior fellow at the Digital Forensic Research Lab and the author of \u201cLikeWar: The Weaponization of Social Media.\u201d\n So far, Islamic State supporters are enjoying their incursion into GETTR and the possible new audience they could reach. \u201cWe will come at you with slaying and explosions you worshippers of the cross,\u201d wrote an account whose name referenced the extremist group, adding: \u201cHow great is freedom of expression.\u201d\n \u201cISIS is trying to attack the MAGA movement because President Trump wiped them off the face of the earth, destroying the Caliphate in less than 18 months, and the only ISIS members still alive are keyboard warriors hiding in caves and eating dirt cookies,\u201d Jason Miller, CEO of GETTR, said in a statement. \u201cGETTR has a robust and proactive moderation system that removes prohibited content, maximizing both cutting-edge A.I. technology and human moderation.\u201d", "posttime": "2021-08-02 22:11:13", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7279\u6717\u666e,trump,\u5e73\u53f0", "title": "\u652f\u6301\u7279\u6717\u666e\u7684\u793e\u4ea4\u7f51\u7edc GETTR \u5145\u65a5\u7740\u4f0a\u65af\u5170\u56fd\u7684\u5ba3\u4f20\uff0c\u5305\u62ec\u65a9\u9996\u7684\u56fe\u50cf\u89c6\u9891\u548c\u6267\u884c\u7279\u6717\u666e\u7684\u6fc0\u8fdb\u5206\u5b50\u7684\u6a21\u56e0", "title_en": "Pro-Trump social network GETTR is awash with Islamic State propaganda, including graphic videos of beheadings and memes of a militant executing Trump", "transed": 1, "url": "https://www.politico.com/news/2021/08/02/trump-gettr-social-media-isis-502078", "via": "", "real_tags": ["\u7279\u6717\u666e", "trump", "\u5e73\u53f0"]}, {"category": "", "categoryclass": "", "imagename": "d0e68050e89736da61fcae184c303d5e.jpg", "infoid": 1071178, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fbe\u62c9\u65af\uff0c2021 \u5e74 7 \u6708 27 \u65e5/\u7f8e\u901a\u793e/ -- \u6700\u503c\u5f97\u4fe1\u8d56\u3001\u6700\u53d7\u63a8\u8350\u7684\u56fe\u5f62\u8ba1\u7b97\u5668\u54c1\u724c\u5fb7\u5dde\u4eea\u5668 (TI) \u5ba3\u5e03\u63a8\u51fa\u4e0b\u4e00\u4ee3 TI-84 Plus \u7cfb\u5217\u2014\u2014TI-84 Plus CE Python \u56fe\u5f62\u8ba1\u7b97\u5668\u3002 TI-84 Plus CE Python \u56fe\u5f62\u8ba1\u7b97\u5668\u53ef\u53ca\u65f6\u7528\u4e8e\u8fd4\u6821\uff0c\u53ef\u5e2e\u52a9\u5b66\u751f\u63a2\u7d22\u3001\u53ef\u89c6\u5316\u548c\u66f4\u597d\u5730\u7406\u89e3\u6570\u5b66\u548c\u79d1\u5b66\uff0c\u540c\u65f6\u8fd8\u5411\u4ed6\u4eec\u4ecb\u7ecd Python\uff0cPython \u662f\u4e16\u754c\u4e0a\u53d1\u5c55\u6700\u5feb\u3001\u6700\u53d7\u6b22\u8fce\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002 \u201c\u5728\u5fb7\u5dde\u4eea\u5668\uff0c\u6211\u4eec\u5173\u5fc3\u786e\u4fdd\u4e0b\u4e00\u4ee3\u5b66\u4e60\u6280\u80fd\u4ee5\u5728\u672a\u6765\u7684\u52b3\u52a8\u529b\u4e2d\u53d6\u5f97\u6210\u529f\uff0c\u201dTI \u6559\u80b2\u6280\u672f\u603b\u88c1 Peter Balyta \u8bf4\u3002 \u201cPython \u662f\u4e00\u79cd\u6613\u4e8e\u4e0a\u624b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5bf9\u521d\u5b66\u8005\u548c\u9ad8\u7ea7\u7a0b\u5e8f\u5458\u90fd\u6709\u597d\u5904\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u548c\u4eba\u5de5\u667a\u80fd\u7b49\u9886\u57df\u88ab\u8bb8\u591a\u4e16\u754c\u9886\u5148\u7684\u6280\u672f\u516c\u53f8\u5e7f\u6cdb\u4f7f\u7528\u3002\u201d\u65b0\u7684 TI-84 Plus CE Python \u56fe\u5f62\u8ba1\u7b97\u5668\u5305\u62ec\u719f\u6089\u7684\u529f\u80fd\uff0c\u5982\u5168\u5f69\u5c4f\u5e55\u3001\u8f7b\u5de7\u7684\u8bbe\u8ba1\u548c\u4e00\u6b21\u5145\u7535\u53ef\u4f7f\u7528\u957f\u8fbe\u4e00\u4e2a\u6708\u7684\u53ef\u5145\u7535\u7535\u6c60\u3002\u4e0e\u7b14\u8bb0\u672c\u7535\u8111\u548c\u5e73\u677f\u7535\u8111\u4e0d\u540c\uff0cTI-84 Plus CE Python \u56fe\u5f62\u8ba1\u7b97\u5668\u6ca1\u6709 Wi-Fi\u3001\u84dd\u7259\u6216\u76f8\u673a\u7b49\u4efb\u4f55\u5e72\u6270\uff0c\u8ba9\u5b69\u5b50\u4eec\u4e13\u6ce8\u4e8e\u5b66\u4e60\u3002\u5bb6\u957f\u4eec\u4e5f\u4f1a\u6b23\u8d4f\u5230\uff0c\u8fd9\u6b3e\u8ba1\u7b97\u5668\u7684\u8bbe\u8ba1\u53ef\u4ee5\u6ee1\u8db3\u5e74\u590d\u4e00\u5e74\u7684\u8bfe\u5802\u9700\u6c42\uff0c\u5e76\u4e14\u5b83\u5c06\u8ba9\u4e2d\u5b66\u6570\u5b66\u548c\u79d1\u5b66\u8bfe\u7a0b\u7684\u5b66\u751f\u4e00\u76f4\u5230\u5927\u5b66\u3002 \u201c\u901a\u8fc7\u5c06 Python \u6dfb\u52a0\u5230\u8bb8\u591a\u5b66\u751f\u5df2\u7ecf\u719f\u6089\u5e76\u5728\u8bfe\u5802\u4e0a\u4f7f\u7528\u7684\u8ba1\u7b97\u5668\uff0c\u6211\u4eec\u8ba9\u6240\u6709\u5b66\u751f\u90fd\u66f4\u5bb9\u6613\u548c\u5e73\u6613\u8fd1\u4eba\u5730\u4f7f\u7528\u7f16\u7a0b\uff0c\u65e0\u9700\u6559\u5e08\u4fdd\u7559\u5355\u72ec\u7684\u8ba1\u7b97\u673a\u5b9e\u9a8c\u5ba4\u6765\u6559\u6388\u8fd9\u4e9b\u91cd\u8981\u6280\u80fd\uff0c\u201dBalyta \u8bf4\u3002 \u201c\u4f7f\u7528 Python\uff0c\u5b66\u751f\u4e0d\u4ec5\u5728\u5b66\u4e60\u7f16\u7a0b\uff1b\u4ed6\u4eec\u8fd8\u5728\u5b66\u4e60\u5173\u4e8e\u6279\u5224\u6027\u548c\u521b\u9020\u6027\u601d\u8003\u4ee5\u89e3\u51b3\u73b0\u5b9e\u4e16\u754c\u95ee\u9898\u7684\u7ec8\u751f\u8bfe\u7a0b\u3002\u201d\u91cd\u8981\u7684\u662f\uff0cTI-84 Plus CE Python \u56fe\u5f62\u8ba1\u7b97\u5668\u5df2\u83b7\u51c6\u7528\u4e8e\u9ad8\u98ce\u9669\u8003\u8bd5\uff0c\u5305\u62ec PSAT/NMSQT*\u3001SAT* \u548c ACT\u00ae \u5927\u5b66\u5165\u5b66\u8003\u8bd5\u4ee5\u53ca\u5141\u8bb8\u6216\u9700\u8981\u56fe\u5f62\u7684 Advanced Placement* \u548c IB\u00ae \u8003\u8bd5\u8ba1\u7b97\u5668\u3002\u5b66\u751f\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5f69\u8679\u822c\u5927\u80c6\u7684\u6570\u5b66\u548c\u79d1\u5b66\u4e3b\u9898\u989c\u8272\u6765\u8868\u8fbe\u81ea\u5df1\u7684\u4e2a\u6027\uff0c\u4f8b\u5982\u65e0\u9650\u8679\u819c\u3001\u5b8c\u5168\u84dd\u7eff\u8272\u6216\u6b63\u73ca\u745a\u8272\u3002 SAT* \u548c AP* \u662f\u7f8e\u56fd\u5927\u5b66\u5165\u5b66\u8003\u8bd5\u59d4\u5458\u4f1a\u7684\u6ce8\u518c\u5546\u6807 PSAT/NMSQT* \u662f\u7f8e\u56fd\u5927\u5b66\u59d4\u5458\u4f1a\u548c\u56fd\u5bb6\u4f18\u5f02\u5956\u5b66\u91d1\u516c\u53f8\u7684\u6ce8\u518c\u5546\u6807\u3001\u8010\u7528\u4e14\u65e0\u5e72\u6270\u7684\u5de5\u5177\uff0c\u5c06\u8bfe\u5802\u4e0e\u73b0\u5b9e\u4e16\u754c\u8054\u7cfb\u8d77\u6765\uff0c\u5e2e\u52a9\u6559\u5e08\u548c\u5b66\u751f\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u63a2\u7d22\u6570\u5b66\u548c\u79d1\u5b66\u3002 TI \u7684\u4ea7\u54c1\u548c\u670d\u52a1\u7ecf\u8fc7\u4e86\u516c\u8ba4\u7684\u7b2c\u4e09\u65b9\u7814\u7a76\u7684\u4e25\u683c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u8868\u660e\u56fe\u5f62\u8ba1\u7b97\u5668\u7684\u6709\u6548\u4f7f\u7528\u53ef\u4ee5\u63d0\u9ad8\u5b66\u751f\u7684\u6570\u5b66\u6280\u80fd\u548c\u4ed6\u4eec\u5bf9\u6570\u5b66\u7684\u6001\u5ea6\u3002\u5982\u9700\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95eeeducation.ti.com\u3002\n\u5fb7\u5dde\u4eea\u5668\u516c\u53f8\uff08\u7eb3\u65af\u8fbe\u514b\u80a1\u7968\u4ee3\u7801\uff1aTXN\uff09\u662f\u4e00\u5bb6\u5168\u7403\u534a\u5bfc\u4f53\u516c\u53f8\uff0c\u4e3a\u5de5\u4e1a\u3001\u6c7d\u8f66\u3001\u4e2a\u4eba\u7535\u5b50\u4ea7\u54c1\u3001\u901a\u4fe1\u8bbe\u5907\u548c\u4f01\u4e1a\u7cfb\u7edf\u7b49\u5e02\u573a\u8bbe\u8ba1\u3001\u5236\u9020\u3001\u6d4b\u8bd5\u548c\u9500\u552e\u6a21\u62df\u548c\u5d4c\u5165\u5f0f\u5904\u7406\u82af\u7247\u3002\u6211\u4eec\u901a\u8fc7\u534a\u5bfc\u4f53\u4f7f\u7535\u5b50\u4ea7\u54c1\u53d8\u5f97\u66f4\u5b9e\u60e0\u6765\u521b\u9020\u4e00\u4e2a\u66f4\u7f8e\u597d\u7684\u4e16\u754c\u7684\u70ed\u60c5\u5728\u4eca\u5929\u4ecd\u7136\u5b58\u5728\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4ee3\u521b\u65b0\u90fd\u5efa\u7acb\u5728\u6700\u540e\u4e00\u4ee3\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u6211\u4eec\u7684\u6280\u672f\u66f4\u5c0f\u3001\u66f4\u9ad8\u6548\u3001\u66f4\u53ef\u9760\u548c\u66f4\u5b9e\u60e0\u2014\u2014\u4f7f\u534a\u5bfc\u4f53\u6709\u53ef\u80fd\u8fdb\u5165\u65e0\u5904\u4e0d\u5728\u7684\u7535\u5b50\u4ea7\u54c1\u3002\u6211\u4eec\u8ba4\u4e3a\u8fd9\u662f\u5de5\u7a0b\u8fdb\u5c55\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u5728\u505a\u7684\u4e8b\u60c5\u3002\u5728 TI.com \u4e0a\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002", "note_en": "DALLAS,  July 27, 2021  /PRNewswire/ --\u00a0Texas Instruments (TI), the most trusted, most recommended brand of graphing calculator, announced the next generation of the TI-84 Plus family \u2013 the TI-84 Plus CE Python graphing calculator. Available in time for back to school, the TI-84 Plus CE Python graphing calculator helps students explore, visualize and better understand math and science, while also introducing them to Python, one of the fastest growing, most popular programming languages in the world.\n  &#34;At Texas Instruments, we care about making sure the next generation is learning the skills to be successful in the future workforce,&#34; said  Peter Balyta, president of TI Education Technology. &#34;Python is a programming language that is easy to get started with, good for beginners and advanced programmers alike and is widely used by many of the world\u2019s leading technology companies in areas such as app development and artificial intelligence.&#34;\n The new TI-84 Plus CE Python graphing calculator includes familiar features like a full-color screen, lightweight design and a rechargeable battery that can last up to a month on a single charge. Unlike laptops and tablets, the TI-84 Plus CE Python graphing calculator does not have any distractions like Wi-Fi, Bluetooth or a camera, keeping kids focused on learning. Parents will also appreciate that the calculator is built to withstand the demands of the classroom year after year, and it will take students from middle school math and science classes all the way through college.\n &#34;By adding Python to the calculators many students are already familiar with and use in class, we are making programming more accessible and approachable for all students, eliminating the need for teachers to reserve separate computer labs to teach these important skills,&#34; said Balyta. &#34;With Python, students aren\u2019t just learning to program; they are learning life-long lessons about thinking critically and creatively to solve real-world problems.&#34;\n Importantly, the TI-84 Plus CE Python graphing calculator is approved for high-stakes exams, including the PSAT/NMSQT*, SAT* and ACT\u00ae college entrance exams as well as Advanced Placement* and IB\u00ae exams that allow or require a graphing calculator. Students can express their personality by choosing from a rainbow of bold math and science-themed colors like Infinitely Iris, Totally Teal or Positive Coral-ation.\n  SAT* and AP*are registered trademarks of the College Entrance Examination Board  PSAT/NMSQT* is a registered trademark of the College Board and the National Merit Scholarship Corporation\n About Texas Instruments Education Technology, a business of Texas Instruments, provides a wide range of dedicated, durable and distraction-free tools that connect the classroom to the real world, helping teachers and students explore math and science interactively. TI\u2019s products and services are tested vigorously against recognized third-party research, which shows that the effective use of graphing calculators improves the mathematical skills of students and their attitudes toward math. For more information, visit  education.ti.com.\n Texas Instruments Incorporated (Nasdaq: TXN) is a global semiconductor company that designs, manufactures, tests and sells analog and embedded processing chips for\u00a0markets such as industrial, automotive, personal electronics, communications equipment and enterprise systems. Our passion to create a better world by making electronics more affordable through semiconductors is alive today, as each generation of innovation builds upon the last to make our technology smaller, more efficient, more reliable and more affordable \u2013\u00a0making it possible for semiconductors to go into electronics everywhere. We think of this as Engineering Progress. It\u2019s what we do and have been doing for decades. Learn more at\u00a0 TI.com.", "posttime": "2021-08-02 22:10:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,instruments,\u5b66\u751f", "title": "\u5fb7\u5dde\u4eea\u5668\u5168\u65b0 TI-84 Plus CE Python \u56fe\u5f62\u8ba1\u7b97\u5668", "title_en": "Texas Instruments new TI-84 Plus CE Python graphing calculator", "transed": 1, "url": "https://news.ti.com/texas-instruments-new-ti-84-plus-ce-python-graphing-calculator-introduces-students-to-programming", "via": "", "real_tags": ["python", "\u5b66\u751f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071177, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5982\u4f55\u5c1d\u8bd5\u5c06 Lisp \u4ee3\u7801\u79fb\u690d\u5230 Rust \u5e76\u8bbe\u6cd5\u5f97\u5230\u4e00\u4e2a\u6162\u5f97\u591a\u7684\u7a0b\u5e8f\u2026\u2026\u4ee5\u53ca\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff01\u6211\u6700\u8fd1\u53d1\u8868\u4e86\u4e00\u7bc7\u535a\u6587\uff0c\u6b63\u5982\u6211\u6240\u6599\uff08\u5b9e\u9645\u4e0a\uff0c\u5e0c\u671b\u5982\u6b64\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5438\u5f15\u4eba\u4eec\u4e3a\u201c\u7814\u7a76\u201d\u505a\u51fa\u8d21\u732e\uff09\uff0c\u5728\u4e92\u8054\u7f51\u4e0a\u5f15\u8d77\u4e86\u76f8\u5f53\u5927\u7684\u4e89\u8bba\uff01\u8fd9\u7bc7\u6587\u7ae0\u662f\u5173\u4e8e Lutz Prechelt \u5c06 Java \u4e0e C/C++ \u8fdb\u884c\u6bd4\u8f83\u7684\u4e00\u9879\u65e7\u7814\u7a76\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5c06\u5176\u4ed6\u8bed\u8a00\u6dfb\u52a0\u5230\u6bd4\u8f83\u4e2d\u7684\u540e\u7eed\u8bba\u6587\uff0c\u5305\u62ec Common Lisp \u548c\u4e00\u4e9b\u811a\u672c\u8bed\u8a00\u3002\u6211\u51b3\u5b9a\u5c1d\u8bd5\u770b\u770b\u90a3\u4e9b 21 \u5e74\u524d\u8fdb\u884c\u7814\u7a76\u7684\u8bba\u6587\u7684\u7ed3\u679c\u662f\u5426\u4ecd\u7136\u6709\u6548\uff0c\u6216\u8005\u4ece\u90a3\u65f6\u8d77\u60c5\u51b5\u662f\u5426\u5b8c\u5168\u6539\u53d8\u3002\u6211\u65e0\u6cd5\u8ba9\u4e00\u7fa4\u5b66\u751f\uff0c\u66f4\u4e0d\u7528\u8bf4\u4e13\u4e1a\u7a0b\u5e8f\u5458\uff0c\u7528\u591a\u79cd\u8bed\u8a00\u4e3a\u6211\u7684\u201c\u5b66\u4e60\u201d\u7f16\u5199\u7a0b\u5e8f\uff0c\u6240\u4ee5\u6211\u505a\u4e86\u7b2c\u4e8c\u4ef6\u6700\u597d\u7684\u4e8b\u60c5\uff0c\u5e76\u79fb\u690d\u4e86\u53ef\u4ee5\u8bf4\u662f\u6700\u5e38\u89c1\u7684\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\uff08\u57fa\u4e8e Peter Norvig \u7684\u4ee3\u7801\uff09 \uff0c\u4e0d\u5c11\u4e8e\uff09\u5176\u4ed6\u8bed\u8a00\uff1aJava\u3001Rust\uff0c\u4ee5\u53ca\u540e\u6765\u7684 Julia \u548c Dart\u3002\u7ed3\u679c\u4ee4\u4eba\u9707\u60ca\uff1aRust \u662f\u6700\u6162\u7684\u8bed\u8a00\u4e4b\u4e00\uff01\u5982\u679c\u6211\u53ea\u5305\u542b\u76f8\u540c\u7b97\u6cd5\u7684\u5b9e\u73b0\uff0c\u5b83\u7684\u5185\u5b58\u4f7f\u7528\u7387\u6700\u4f4e\uff0c\u4f46\u4e5f\u662f\u6700\u9ad8\u7684LOC\uff08\u4ee3\u7801\u884c\uff09\u3002\u4eca\u5929\uff0c\u6211\u60f3\u901a\u8fc7\u5c55\u793a\u6211\u7684 Rust \u4ee3\u7801\u4e3a\u4f55\u5982\u6b64\u7f13\u6162\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u4e00\u4e9b\u5c0f\u7684\u4fee\u590d\uff0c\u81f3\u5c11\u5728\u6027\u80fd\uff08\u548c\u6b63\u5982\u6211\u53d1\u73b0\u7684\u90a3\u6837\uff0c\u4ec5\u9002\u7528\u4e8e\u67d0\u4e9b\u7c7b\u578b\u7684\u8f93\u5165\uff09\u3002\n\u611f\u8c22 Rust \u7684\u7c89\u4e1d\u4eec\uff0c\u4ed6\u4eec\u82b1\u4e86\u5f88\u591a\u7a7a\u95f2\u65f6\u95f4\u5411\u6211\u5c55\u793a\u4e86\u4e3a\u4ec0\u4e48\u6211\u7684 Rust \u4ee3\u7801\u5982\u6b64\u7f13\u6162\u4ee5\u53ca\u5982\u4f55\u4fee\u590d\u5b83\uff01\u5728\u5f00\u59cb\u7814\u7a76\u6162\u901f Rust \u4ee3\u7801\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u770b\u770b\u539f\u59cb\u7684 Common Lisp \u4ee3\u7801\u3002\u8fd9\u662f Peter Norvig \u5bf9 Prechelt \u7535\u8bdd\u7f16\u7801\u95ee\u9898\u7684 Lisp \u89e3\u51b3\u65b9\u6848\u7684\u672c\u8d28\uff08\u4e3a\u7b80\u6d01\u8d77\u89c1\u5df2\u5220\u9664\u6ce8\u91ca\uff09\uff1a\uff08 defun \u6253\u5370\u7ffb\u8bd1\uff08 num \u6570\u5b57\u548c\u53ef\u9009\uff08\u5f00\u59cb 0\uff09\uff08\u5355\u8bcd nil\uff09\uff09\uff08\u5982\u679c\uff08 &gt;= \u5f00\u59cb\uff08\u957f\u5ea6\u6570\u5b57\uff09\uff09 ( format t &quot;~a:~{ ~a~}~%&quot; num ( reverse words)) ( let (( found-word nil) ( n 1)) ; \u524d\u5bfc\u96f6\u95ee\u9898\uff08\u5faa\u73af\u4ece\u4e0b\u9762\u5f00\u59cb\uff08\u957f\u5ea6\u6570\u5b57\uff09 ) do ( setf n ( + ( * 10 n) ( nth-digit digits i))) ( \u5faa\u73af\u8bcd in ( gethash n *dict*) do ( setf found-word t) ( print-translations num numbers ( + 1 i) ( cons word words)))) ( when ( and ( not found-word) ( not ( numberp ( first words)))) ( print-translations num numbers ( + start 1) ( cons ( nth-digit numbers start ) words)))))) \u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u800c\u7b80\u77ed\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u81ea\u5df1\u4e5f\u4e0d\u4f1a\u60f3\u51fa\u6765\u7684\u3002\u7b2c\u4e00\u4e2a Java \u5b9e\u73b0\uff0c\u800c\u4e0d\u662f JDK 1.0\uff09\uff0c\u4f46\u90a3\u662f\u53e6\u4e00\u56de\u4e8b\u4e86\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u5c06\u5176\u79fb\u690d\u5230\u5176\u4ed6\u8bed\u8a00\u4f3c\u4e4e\u975e\u5e38\u5bb9\u6613\u548c\u6709\u8da3\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u6211\u6240\u505a\u7684\u3002\u6211\u7684\u76ee\u7684\u662f\u68c0\u67e5\u4e00\u79cd\u8bed\u8a00\u5230\u5e95\u6709\u591a\u5927\u7684\u4e0d\u540c\uff0c\u5047\u8bbe\u60a8\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u3002\u8bba\u6587\uff08\u6211\u53ef\u80fd\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u6ca1\u6709\u8bf4\u6e05\u695a\uff09\u662f\uff0c\u4e00\u65e6\u60a8\u5bf9\u7b97\u6cd5\u7684\u9009\u62e9\uff08\u6709\u65f6\u53ef\u80fd\u662f\u56f0\u96be\u7684\u90e8\u5206\uff09\u6253\u6298\u6263\uff0c\u8bed\u8a00\u5dee\u5f02\u5c31\u4e0d\u4f1a\u50cf\u60a8\u5728\u8003\u8651\u7a0b\u5e8f\u505a\u5b8c\u5168\u4e0d\u540c\u7684\u4e8b\u60c5\u4ee5\u8fbe\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002\u6700\u521d\u7684\u7814\u7a76\u5b9e\u9645\u4e0a\u6709\u4ee4\u4eba\u4fe1\u670d\u7684\u8bc1\u636e\u8868\u660e\u7a0b\u5e8f\u5458\u503e\u5411\u4e8e\u6839\u636e\u8bed\u8a00\u63d0\u51fa\u4e0d\u540c\u7684\u7b97\u6cd5\uff1a\u4f4e\u7ea7\u8bed\u8a00\u7a0b\u5e8f\u5458\u503e\u5411\u4e8e\u4f7f\u7528\u4f4e\u7ea7\u7ed3\u6784\uff0c\u5373\u4f7f\u4ed6\u4eec\u7684\u8bed\u8a00\u5141\u8bb8\u66f4\u9ad8\u7ea7\u522b\u7684\u7ed3\u6784\u3002\u6211\u7684\u7406\u8bba\u662f\uff0c\u8fd9\u786e\u5b9e\u5bfc\u81f4\u4f4e\u7ea7\u8bed\u8a00\u5177\u6709\u66f4\u9ad8\u7684 LOC \u8ba1\u6570\u548c\u66f4\u597d\u7684\u6027\u80fd\u3002\u4e00\u65e6\u4f60\u63a7\u5236\u4e86\u8fd9\u4e00\u70b9\uff0cLOC \u548c\u6027\u80fd\u5e94\u8be5\u4f1a\u66f4\u63a5\u8fd1\uff0c\u4f60\u4f7f\u7528\u54ea\u79cd\u8bed\u8a00\u7684\u610f\u4e49\u5c31\u5c0f\u5f97\u591a\uff08\u597d\u5427\uff0c\u53ea\u8981\u4f60\u53ef\u4ee5\u8ba9\u81ea\u5df1\u5728\u4f60\u9009\u62e9\u7684\u8bed\u8a00\u4e2d\u4f7f\u7528\u6b63\u786e\u7684\u62bd\u8c61\u7ea7\u522b\u6765\u89e3\u51b3\u95ee\u9898\uff09\u3002\n\u56de\u5230 Rust \u4ee3\u7801\u2026\u2026\u6211\u8bd5\u56fe\u8ba9\u5b83\u5c3d\u53ef\u80fd\u63a5\u8fd1\u539f\u59cb Lisp \u4ee3\u7801\uff0c\u4ee5\u4fbf\u8fdb\u884c\u82f9\u679c\u5bf9\u82f9\u679c\u7684\u6bd4\u8f83\u3002\u6240\u4ee5\u6211\u8ba4\u4e3a\u4f7f\u7528\u5927\u6570\u5b57\u6765\u201c\u5173\u952e\u201d\u73b0\u6709\u5355\u8bcd\u975e\u5e38\u91cd\u8981\u3002\u5f88\u591a\u4eba\u6279\u8bc4\u8fd9\u4e2a\u51b3\u5b9a\uff0c\u56e0\u4e3a\u4ed6\u4eec\u201c\u77e5\u9053\u201dBigInt \u5728\u8bb8\u591a\u8bed\u8a00\u4e2d\u90fd\u5f88\u6162\uff0c\u800c Lisp \u771f\u7684\u5f88\u64c5\u957f\u3002\u597d\u5427\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\uff0c\u8fd9\u4e0d\u662f Rust \u4ee3\u7801\u8fd0\u884c\u7f13\u6162\u7684\u539f\u56e0\u3002\u8fd9\u662f\u6211\u7f16\u5199\u7684 Rust \u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff0c\u5305\u62ec\u6211\u4f7f\u7528\u7684\u4ece word \u5230 BigUInt \u7684\u8f6c\u6362\uff1a use lazy_static::lazy_static;\u4f7f\u7528 num_bigint::{BigUint, ToBigUint}; type Dictionary = HashMap &lt;BigUint, Vec &lt; String &gt; &gt;;lazy_static \uff01 { \u9759\u6001\u5f15\u7528\u4e00\uff1aBigUint = 1.to_biguint().unwrap();\u9759\u6001\u53c2\u8003\u5341\uff1aBigUint = 10.to_biguint().unwrap();} fn word_to_number(word: &amp; str) -&gt; BigUint { let mut n = ONE.clone(); for ch in word.chars() { if ch.is_alphabetic() { n = &amp;n * ( &amp; *TEN) + &amp;char_to_digit(ch); } } n} \u6211\u4f7f\u7528\u4e86lazy_static\uff0c\u56e0\u4e3a\u6211\u60f3\u8981\u4e00\u4e2aONE \u548cTEN \u7684\u5168\u5c40\u5e38\u91cf\uff0c\u4ee5\u907f\u514d\u4e3aword_to_number \u4e2d\u663e\u793a\u7684\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u5206\u914d\u4e00\u4e2aBigUint \u5b9e\u4f8b\u3002\u8fd9\u4e0d\u4ec5\u975e\u5e38\u4e11\u964b\uff0c\u800c\u4e14\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u548c\u5f92\u52b3\u3002\u6211\u5f53\u65f6\u5f53\u7136\u4e0d\u77e5\u9053\u3002\u6839\u636e\u6211\u4ee5\u524d\u5728 Rust \u4e2d\u7684\u7ecf\u9a8c\uff0c\u8fd9\u4f3c\u4e4e\u662f\u8fd9\u6837\u505a\u7684\u65b9\u5f0f\uff08\u5373\u9700\u8981\u975e\u5e38\u91cf\u7684\u5168\u5c40\u72b6\u6001\uff0c\u4f7f\u7528lazy_static\uff09\u3002\nfn word_to_number(word: &amp; str) -&gt; BigUint { let mut n = 1 u8.into();\u5bf9\u4e8e word.chars().filter_map(char_to_digit) { n * = 10 u8; \u4e2d\u7684\u6570\u5b57n + = \u6570\u5b57\uff1b } n} \u770b\u5230\u8fd9\u8ba9\u6211\u5927\u5403\u4e00\u60ca\u3002\u8bf7\u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u6240\u6709\u64cd\u4f5c\u4ecd\u7136\u4f7f\u7528 BigUint\uff0c\u4e0e\u539f\u59cb\u64cd\u4f5c\u4e00\u6837\uff01\u8ba9 mut n = ONE.clone();\u8ba9 mut found_word = false;\u5bf9\u4e8e i \u5728 start..digits.len() { n = &amp;n * ( &amp; *TEN) + &amp;nth_digit(digits, i); ...\u8ba9 mut n = 1 u8.into();\u8ba9 mut found_word = false;\u5bf9\u4e8e i \u5728 start..digits.len() { n * = 10 u8; n + = nth_digit(digits, i); ...\u8fd9\u4e5f\u9700\u8981\u5bf9 char_to_digit&#39; \u505a\u4e00\u4e9b\u5c0f\u6539\u52a8\uff0c\u5982\u679c\u60a8\u6709\u5174\u8da3\uff0c\u8bf7\u67e5\u770b\u5b8c\u6574\u7684\u5dee\u5f02\u3002\u4ec5\u4ec5\u901a\u8fc7\u8fd9\u79cd\u53ef\u8bfb\u6027\u7684\u6539\u8fdb\uff0c\u4ee3\u7801\u5b9e\u9645\u4e0a\u5df2\u7ecf\u8fd0\u884c\u5f97\u66f4\u5feb\u4e86\uff08\u4f46\u4e0d\u5982 CL \u5feb\uff09\uff01\uff01\u4e0b\u4e00\u6b65\u662f\u4e3a\u6bcf\u4e2a\u90e8\u5206\u89e3\u51b3\u65b9\u6848\u907f\u514d\u4f4e\u6548\u7684\u5217\u8868\u526f\u672c\uff08\u6216 Rust Vec\uff09\uff0c\u6211\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4fdd\u6301\u4ee3\u7801\u7b80\u5355\u3002\n\u6bcf\u6b21\u7b97\u6cd5\u4e3a\u6f5c\u5728\u89e3\u51b3\u65b9\u6848\u627e\u5230\u4e00\u4e2a\u65b0\u8bcd\u65f6\uff0c\u5b83\u90fd\u9700\u8981\u5c06\u8be5\u8bcd\u7d2f\u79ef\u5230\u5f53\u524d\u90e8\u5206\u89e3\u51b3\u65b9\u6848\u4e2d\u8fdb\u884c\u9012\u5f52\u3002\u5b83\u9700\u8981\u5bf9\u53ef\u80fd\u5904\u4e8e\u540c\u4e00\u7ea7\u522b\u7684\u591a\u4e2a\u5355\u8bcd\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u53ea\u662f\u6539\u53d8\u5217\u8868\u5e76\u5fd8\u8bb0\u5b83\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4f7f\u7528 Common Lisp \u7684\u65b9\u6cd5\uff0c\u5927\u7ea6\uff1a\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a\u65b0\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u5355\u8bcd\u7684\u6240\u6709\u5143\u7d20\uff0c\u52a0\u4e0a\u5355\u8bcd\uff0c\u6ca1\u6709\u6539\u53d8\u5355\u8bcd\u3002\u60a8\u53ef\u80fd\u77e5\u9053\uff0cLisp \u662f\u56f4\u7ed5\u5217\u8868\u6784\u5efa\u7684\uff0c\u56e0\u6b64\u5728 Lisp \u4e2d\u8fd9\u6837\u505a\u975e\u5e38\u9ad8\u6548\u3002\u4f46\u7b49\u6548\u7684 Rust \u4e0d\u662f\u3002\u8fd9\u4f1a\u590d\u5236\u5217\u8868\uff0c\u7136\u540e\u5728\u9012\u5f52\u4e4b\u524d\u9644\u52a0\u65b0\u5355\u8bcd\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u5355\u8bcd\u91cd\u590d\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u56e0\u4e3a\u539f\u59cb\u7684 partial_solution \u88ab\u4fdd\u7559\u4e86\u4e0b\u6765\u3002\u6b64\u5916\uff0c\u5355\u8bcd\u53ef\u4ee5\u4fdd\u6301\u4e0d\u53d8\uff0c\u4f5c\u4e3a\u51fd\u6570\u5f0f\u7a0b\u5e8f\u5458\uff0c\u4e0d\u53d8\u6027\u5f88\u597d\uff01\u6b63\u5982\u8bb8\u591a\u8bc4\u8bba\u8005\u6307\u51fa\u7684\u90a3\u6837\uff0c\u4ece\u6027\u80fd\u7684\u89d2\u5ea6\u6765\u770b\u8fd9\u662f\u611a\u8822\u7684\u3002\u4f60\u77e5\u9053\u4e00\u65e6\u4f60\u9012\u5f52\uff0c\u8fd9\u4e2a\u76f8\u540c\u7684\u4ee3\u7801\u5c06\u518d\u6b21\u8fd0\u884c\uff08\u6216\u4e0d\uff09\uff0c\u5e76\u4e14\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u4eec\u53ef\u4ee5\u5f39\u51fa\u9012\u5f52\u5b8c\u6210\u540e\u539f\u59cb\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u4ee5\u8fbe\u5230\u5b8c\u5168\u76f8\u540c\u7684\u7ed3\u679c\uff01\u5177\u6709\u4e0d\u53ef\u53d8\u7ed3\u6784\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u53ef\u80fd\u5f88\u68d2\uff0c\u4f46\u5b83\u9700\u8981\u4e0d\u53ef\u53d8\u6570\u636e\u7ed3\u6784\u7684\u201c\u667a\u80fd\u201d\u5b9e\u73b0\uff0c\u800c\u4ec5\u4ec5\u514b\u9686 Vec \u4e0d\u662f\u8fd9\u6837\uff01\u5b8c\u6210\u4e86\uff0c\u5bf9\u5427\uff1f\u9519\u4e86\u2026\u2026\u6211\u4eec\u73b0\u5728\u5fc5\u987b\u5904\u7406\u501f\u7528\u68c0\u67e5\u5668\u544a\u8bc9\u6211\u4eec\u6211\u4eec\u4e0d\u80fd\u4ec5\u4ec5\u83b7\u5f97\u4e00\u4e2a\u5168\u65b0\u7684 String \u5b9e\u4f8b\u5e76\u5c06\u5176\u653e\u5165\u6211\u4eec\u7684 Vec&lt;&amp;String&gt; \u4e2d\uff0c\u56e0\u4e3a Vec \u4e0d\u662f\u5176\u4efb\u4f55\u5b57\u7b26\u4e32\u7684\u6240\u6709\u8005\u3002\n\u6211\u5728 Rust \u4e2d\u89c1\u8fc7\u5f88\u591a\u6b21\uff1a\u6211\u5199\u4e86\u4e00\u5927\u6bb5\u4ee3\u7801\uff0c\u5bf9\u751f\u547d\u5468\u671f\u6709\u70b9\u7c97\u5fc3\uff0c\u7136\u540e\u4e0d\u5f97\u4e0d\u5728\u6211\u7684\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u66f4\u6539\u6211\u7684\u53d8\u91cf\u548c\u51fd\u6570\u7684\u7c7b\u578b\uff0c\u4ee5\u907f\u514d\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u5fc5\u987b clone() \u4e1c\u897f\u4f7f\u5176\u5de5\u4f5c\u3002\u8fd9\u610f\u5473\u7740\uff0c\u662f\u7684\uff0c\u5728 Rust \u4e2d\u7f16\u5199\u9ad8\u6548\u7684\u4ee3\u7801\u9700\u8981\u5f88\u591a\u6df1\u8c0b\u8fdc\u8651\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528\u53ef\u53d8 Vec \u7684\u5fae\u5c0f\u4fee\u6539\u5b9e\u9645\u4e0a\u8981\u6c42\u6211\u4eec\u53ea\u5904\u7406\u751f\u547d\u5468\u671f\u5339\u914d\u6216\u8d85\u8fc7\u6211\u4eec\u7684 Vec \u7684\u5b57\u7b26\u4e32\u3002 fn print_translations &lt; &#39;dict &gt;( num: &amp; str, numbers: &amp; Vec &lt;char &gt;, start: usize, words: &amp; mut Vec &lt; &amp; &#39;dict str&gt;, dict: &amp; &#39;dict Dictionary,) -\u200b\u200b&gt; io::Result &lt;()&gt; \u73b0\u5728\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5e76\u4e0d\u662f\u6211\u4eec\u63d2\u5165\u5230 words \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u6765\u81ea dict\uff1a\u6709\u4e9b\u5355\u8bcd\u5c06\u662f\u95ee\u9898\u5141\u8bb8\u6211\u4eec\u5728\u627e\u4e0d\u5230\u5355\u8bcd\u65f6\u4f7f\u7528\u7684\u66ff\u6362\u6570\u5b57\u3002 ...62 | word.push(&amp;digit); | -----------^^^^^^^- | | | | |\u501f\u6765\u7684\u4ef7\u503c\u6d3b\u5f97\u4e0d\u591f\u957f|\u53c2\u6570\u8981\u6c42\u4e3a `&#39;dict` \u501f\u7528 `digit` \u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5fc5\u987b\u66f4\u6539 nth_digit \u4ee5\u7ed9\u6211\u4eec\u4e00\u4e2a\u5bff\u547d\u8db3\u591f\u957f\u7684\u5b57\u7b26\u4e32\uff01\u4f46\u662f\u6211\u4eec\u600e\u4e48\u505a\u5462\uff1f\u55ef\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5b9e\u9645\u4e0a\u975e\u5e38\u7b80\u5355\uff1a\u53ea\u6709 10 \u4e2a\u53ef\u80fd\u7684\u6570\u5b57\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u5305\u542b\u6240\u6709\u6570\u5b57\u7684\u9759\u6001\u5217\u8868\uff01\u7136\u540e nth_digit \u5c06\u59cb\u7ec8\u8fd4\u56de\u5e26\u6709 &#39;static \u751f\u547d\u5468\u671f\u7684\u4e1c\u897f\uff0c\u8fd9\u5e94\u8be5\u53ef\u4ee5\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5b83\u80af\u5b9a\u4f1a\u6bd4 &#39;dict.\nfn nth_digit(digits: &amp; Vec &lt;char &gt;, i: usize) -&gt; BigUint { let ch = digits.get(i).expect( &quot;index out of bounds&quot;); (( *ch as usize) - ( &#39;0&#39; as usize)).to_biguint().unwrap()} \u8fd9\u4ecd\u7136\u6709\u6548\uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u505a n += nth_digit(digits, i); \u65f6\uff0c\u5373\u4f7f n \u662f\u4e00\u4e2a\u5927Uint\uff01\u9759\u6001\u6570\u5b57\uff1a[ &amp; str; 10] = [ &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;];...\u8ba9\u6570\u5b57= nth_digit(digits, start); words.push(DIGITS[usize::from(digit)]);\u5728\u8fd9\u91cc\uff0c\u50cf\u6211\u8fd9\u6837\u7684 Rust \u65b0\u624b\uff08\u6211\u5df2\u7ecf\u65ad\u65ad\u7eed\u7eed\u5730\u4f7f\u7528 Rust \u4e24\u5e74\u591a\u4e86\uff0c\u4f46\u505c\u6b62\u6210\u4e3a Rust \u7684\u65b0\u624b\u786e\u5b9e\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u6216\u5927\u91cf\u7684\u5949\u732e\uff09\u53ef\u80fd\u4f1a\u8bf4\u8fd9\u53d8\u5f97\u6709\u70b9\u592a\u590d\u6742\u4e86\u4e0e Java \u6216 Lisp \u76f8\u6bd4\u3002\u4e00\u751f\u4f1a\u53d8\u5f97\u975e\u5e38\u68d8\u624b\u3002\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f3c\u4e4e\u62e5\u6709\u826f\u597d Rustexpertise \u7684\u4eba\u4f1a\u770b\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e14\u4f1a\u4ece\u4e00\u5f00\u59cb\u5c31\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f\uff01\u597d\u5427\uff0c\u6211\u5f88\u60f3\u4e0e\u8bb8\u591a Rust \u7a0b\u5e8f\u5458\u4e00\u8d77\u8fdb\u884c\u4e00\u9879\u7814\u7a76\uff0c\u770b\u770b\u5b83\u5728\u5b9e\u8df5\u4e2d\u7684\u5b9e\u9645\u60c5\u51b5:)\u3002\u6216\u8bb8\u6709\u4e00\u5929\u3002\u8fd9\u662f\u6b63\u786e\u7684\uff01 Rust \u4ee3\u7801\u73b0\u5728\u5728\u6027\u80fd\u4e0a\u51e0\u4e4e\u5b8c\u5168\u5339\u914d Common Lisp \u4ee3\u7801\uff01\u6709\u65f6\u4f7f\u7528 if let Ok() \u53ef\u80fd\u5f88\u8bf1\u4eba\uff0c\u4f46\u4e0d\u8981\u8fd9\u6837\u505a\uff1a\n\u5f88\u82b1\u54e8\u5427\uff1f\uff01\u8fd9\u662f\u5176\u4e2d\u4e00\u79cd\u4e60\u60ef\u7528\u6cd5\uff0c\u5982\u679c\u60a8\u8fd8\u4e0d\u77e5\u9053\u5b83\uff0c\u60a8\u4f1a\u89c9\u5f97\u81ea\u5df1\u4ee5\u524d\u5199\u8fc7\u90a3\u6bb5\u53ef\u6015\u7684\u4ee3\u7801\u662f\u4e2a\u767d\u75f4\u3002\u6211\u7cdf\u7cd5\u7684\u65b9\u6cd5\uff08\u5b9e\u9645\u4e0a\u6211\u82b1\u4e86\u534a\u4e2a\u5c0f\u65f6\u624d\u51b3\u5b9a\u5982\u4f55\u505a\uff09\uff1a let mut args: Vec &lt;_ &gt; = args().skip( 1).collect(); let words_file: String = if !args.is_empty() { args.remove( 0) } else { &quot;tests/words.txt&quot;.into() };\u8ba9 input_file: String = if !args.is_empty() { args.remove( 0) } else { &quot;tests/numbers.txt&quot;.into() };\u663e\u7136\uff0c\u60a8\u4e0d\u9700\u8981\u5c06 args \u6536\u96c6\u5230 Vec \u4e2d\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u5220\u9664\u4ee5\u83b7\u5f97\u6240\u6709\u6743\uff01\u5728\u8fed\u4ee3\u5668\u4e0a\u4f7f\u7528 next() \u60a8\u5b9e\u9645\u4e0a\u6b63\u5728\u6d88\u8017\u8fd9\u4e9b\u9879\u76ee\u3002\u56e0\u4e3a std::env::Args \u5b9e\u73b0\u4e86 Iterator&lt;String&gt;\uff0c\u800c\u4e0d\u662f Iterator&lt;&amp;str&gt; \u6216\u5176\u4ed6\u4e1c\u897f\uff0c\u6240\u4ee5\u4f7f\u7528\u5b83\u4f1a\u7ed9\u4f60 args \u7684\u6240\u6709\u6743\uff08\u5b83\u662f\u5426\u514b\u9686\u4e86 args\uff1f\u795e\u5947\u5730\u652f\u6301\u5b83\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e0e\u5355\u4e2a &amp;&#39;static str\u4e0d\u77e5\u4f55\u6545\uff1f\u4e0d\u77e5\u9053......\uff09\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e9b\u98ce\u683c\u4e0a\u7684\u6539\u8fdb\u5e76\u6ca1\u6709\u7ed9\u6211\u4eec\u5e26\u6765\u592a\u591a\u989d\u5916\u7684\u6027\u80fd\uff0c\u4e4b\u524d\u7684\u56fe\u8868\u4ecd\u7136\u5f88\u597d\u5730\u53cd\u6620\u4e86\u4ee3\u7801\u7684\u5f53\u524d\u6027\u80fd\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0cRust \u4ee3\u7801\u57fa\u672c\u4e0a\u662f @phillipc \u7684\uff0c\u800c\u4e0d\u662f\u6211\u7684\u3002\u8bf7\u53c2\u9605\u4ed6\u7684 fork \u4ee5\u83b7\u53d6\u5176\u4ed6\u4e00\u4e9b\u7c7b\u4f3c\u7248\u672c\u7684\u4ee3\u7801\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0cRust \u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u4f1a\u62cd\u62cd\u81ea\u5df1\u7684\u540e\u80cc\u56de\u5bb6\u4e0e\u5bb6\u4eba\u5171\u5ea6\u7f8e\u597d\u65f6\u5149\uff0c\u5728\u5185\u90e8\u5e86\u795d\u4ed6\u4eec\u5934\u8111\u4e2d\u7684\u5c0f\u80dc\u5229\u3002 @bugaevc \u63d0\u51fa\u4e86\u4e00\u4e2a\u6446\u8131 BigUint \u5e76\u4f7f\u7528 Vec&lt;u8&gt; \u4ee3\u66ff\uff08\u5b8c\u6574\u5dee\u5f02\uff09\u7684\u5b9e\u73b0\u3002\u4f5c\u4e3a\u4ed6\u5b9e\u73b0\u7684\u4e00\u4e2a\u5c0f\u4f8b\u5b50\uff0c\u8fd9\u91cc\u662f word_to_number \u51fd\u6570\uff0c\u5b83\u770b\u8d77\u6765\u4ecd\u7136\u5f88\u6574\u6d01\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6b64\u66f4\u6539\u4f7f Rust \u53ef\u4ee5\u66f4\u5feb\u5730\u67e5\u770b\u7535\u8bdd\u53f7\u7801\uff01\u4ee5\u4e0b\u662f\u6700\u7ec8\u7ed3\u679c\uff0c\u5305\u62ec\u6539\u8fdb\u7684 Java \u7248\u672c\uff08\u4ee5\u4e0b\u79f0\u4e3a Java3\uff09\uff0c\u5b83\u4f7f\u7528\u4e86\u4e0e\u6539\u8fdb\u7684 Rust \u4ee3\u7801\u51e0\u4e4e\u76f8\u540c\u7684\u6027\u80fd\u6539\u8fdb\uff1a \u8bf7\u6ce8\u610f\uff0c\u6b64\u56fe\u8868\u4ec5\u5305\u542b\u4e0a\u4e00\u8282\u4e2d\u7684\u6700\u7ec8 BigUInt \u7248\u672c\u548c\u65b0\u7248\u672c\u3002I\u7531\u60a8\u6765\u8003\u8651@bugaevc \u7684\u89e3\u51b3\u65b9\u6848\u662f\u5426\u4ecd\u7136\u53ef\u4ee5\u4e0e\u539f\u59cb\u7684 Common Lisp \u76f8\u5ab2\u7f8e\uff0c\u800c\u6211\u4eec\u4e5f\u6ca1\u6709\u6324\u538b Common Lisp \u53ef\u80fd\u5fc5\u987b\u63d0\u4f9b\u7684\u6700\u540e\u4e00\u70b9\u6c41\u6db2\u3002\u5982\u60a8\u6240\u89c1\uff0c\u5982\u679c\u60a8\u771f\u7684\u9700\u8981\u6700\u540e\u4e00\u6beb\u79d2\u7684\u6027\u80fd\uff0cRust \u53ef\u4ee5\u4e3a\u60a8\u63d0\u4f9b\uff01\nJava \u73b0\u5728\u4f3c\u4e4e\u5df2\u7ecf\u8fdc\u8fdc\u843d\u540e\u4e86\uff08\u81f3\u5c11\u5b83\u7684\u6027\u80fd\u6bd4\u539f\u6765\u7684\u3001\u6027\u80fd\u9519\u8bef\u7f20\u8eab\u7684 Rust \u5b9e\u73b0\u8981\u597d\u5f97\u591a\uff09\u3002\u4f5c\u4e3a\u5956\u52b1\uff0c\u6211\u8ba4\u4e3a\u4f7f\u7528\u66f4\u5927\u7684\u5b57\u5178\u662f\u4e2a\u597d\u4e3b\u610f\uff0c\u56e0\u4e3a\u968f\u7740\u89e3\u51b3\u65b9\u6848\u7684\u7ec4\u5408\u7a7a\u95f4\u7206\u70b8\uff0c\u8fd9\u4f7f\u5f97\u8fd0\u884c\u65f6\u53d8\u5f97\u975e\u5e38\u56f0\u96be\uff01\u8fd9\u53ef\u80fd\u4f1a\u8ba9 Java \u81f3\u5c11\u90e8\u5206\u5730\u81ea\u6211\u6551\u8d4e\uff0c\u5e76\u5c55\u793a\u5b83\u7684 JIT \u662f\u5426\u53ef\u4ee5\u521b\u9020 Java \u4eba\uff08\u50cf\u6211\u4e00\u6837\uff01\uff09\u6240\u8bf4\u7684\u5947\u8ff9\uff0c\u5982\u679c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u548c\u6709\u5173\u70ed\u4ee3\u7801\u8def\u5f84\u7684\u4fe1\u606f\u3002\u975e\u5e38\u9002\u5408\u8ba9\u6211\u4eec\u7684\u7a0b\u5e8f\u51fa\u6c57\u3002\u6211\u7f16\u8f91\u4e86 benchmarkconfig \u4ee5\u5728\u989d\u5916\u8fd0\u884c\u4e2d\u4f7f\u7528\u5b83\u3002\u7ecf\u8fc7\u4e00\u4e9b\u5b9e\u9a8c\uff0c\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u592a\u8fc7\u5206\u4e86\uff0c\u56e0\u4e3a\u5373\u4f7f\u627e\u5230\u51e0\u4e2a\u7535\u8bdd\u53f7\u7801\u4e5f\u9700\u8981\u51e0\u5206\u949f......\u6240\u4ee5\u6211\u4e0d\u5f97\u4e0d\u8c03\u6574\u8bbe\u7f6e\u76f4\u5230\u7a0b\u5e8f\u8fd0\u884c\u4e86\u5408\u7406\u7684\u65f6\u95f4\uff0c\u4f46\u4e0d\u8981\u592a\u957f\uff08\u6211\u89e3\u51b3\u4e86\u5927\u7ea6\u4e00\u5206\u949f\u6700\u5feb\u7684\u5b9e\u73b0\uff09\u3002\u4f7f\u7528\u975e\u5e38\u5c11\u91cf\u7684\u7535\u8bdd\u53f7\u7801\uff0c\u4f46\u5141\u8bb8\u6bcf\u4e2a\u53f7\u7801\u7684\u6700\u5927\u957f\u5ea6\u4e3a 50\uff0c\u5bfc\u81f4\u8fd0\u884c\u4e4b\u95f4\u7684\u53ef\u53d8\u6027\u53d8\u5f97\u6781\u7aef\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u53f7\u7801\u662f\u5728\u6bcf\u6b21\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u968f\u673a\u751f\u6210\u7684\uff08\u5982\u679c\u7279\u5b9a\u8fd0\u884c\u78b0\u5de7\u5305\u542b\u51e0\u4e2a\u957f\u6570\u5b57\uff0c\u627e\u5230\u6240\u6709\u89e3\u51b3\u65b9\u6848\u9700\u8981\u5f88\u957f\u65f6\u95f4\uff09\u3002\u6211\u901a\u8fc7\u5c06\u7535\u8bdd\u53f7\u7801\u7684\u957f\u5ea6\u9650\u5236\u4e3a\u8f83\u4f4e\u7684\u4e0a\u9650\u5e76\u589e\u52a0\u7535\u8bdd\u53f7\u7801\u7684\u6570\u91cf\u6765\u5bf9\u6b64\u8fdb\u884c\u8c03\u6574\uff0c\u8fd9\u4f7f\u8fd0\u884c\u66f4\u52a0\u7a33\u5b9a\uff0c\u4f7f\u57fa\u51c6\u6d4b\u8bd5\u53ef\u91cd\u73b0\u3002\n\u591a\u6b21\u8fd0\u884c\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\u5b58\u5728\u5dee\u5f02\uff0c\u4f46\u5728\u8bed\u8a00\u4e4b\u95f4\u7684\u76f8\u5bf9\u6027\u80fd\u4e0a\u6ca1\u6709\u5dee\u5f02\u3002\u5de6\u8fb9\u7684\u7ec4\u662f\u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u53f3\u8fb9\u662f\u7b2c\u4e8c\u6b21\u8fd0\u884c\uff08\u4f7f\u7528\u76f8\u540c\u7684\u8bbe\u7f6e\uff09\u3002\u6211\u8fd8\u4f7f\u7528@phillipc \u7684 BigInt \u6700\u7ec8\u89e3\u51b3\u65b9\u6848\u8fd0\u884c\u4e86\u6700\u540e\u4e00\u4e2a\u57fa\u51c6\u6d4b\u8bd5\uff0c\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5b83\u51e0\u4e4e\u4e0e\u6700\u7ec8\u7684 Rust \u5b9e\u73b0\u4e00\u6837\u957f\uff08\u524d\u8005\u4e3a 32.93 \u79d2\uff0c\u540e\u8005\u4e3a 32.42 \u79d2\uff09\u3002\u8c01\u8ba4\u4e3a Rust \u7684 num crate \u5f88\u6162\uff1f\u8fd9\u4e9b\u5b9e\u73b0\u90fd\u5bf9\u57fa\u51c6\u8bbe\u7f6e\u975e\u5e38\u654f\u611f\uff1a\u589e\u52a0\u6700\u5927\u7535\u8bdd\u53f7\u7801\u957f\u5ea6\uff0c\u4f8b\u5982\uff0c\u4ece 12 \u5230 16\uff0c\u5bf9\u8fd0\u884c\u65f6\u95f4\u6709\u5de8\u5927\u5f71\u54cd\uff08\u4ece\u5927\u7ea6 20 \u79d2\u5230\u51e0\u5206\u949f\uff09\u3002\u7136\u800c\uff0c\u7535\u8bdd\u53f7\u7801\u7684\u6570\u91cf\u4f3c\u4e4e\u8db3\u591f\u5927\uff0c\u4ee5\u81f3\u4e8e\u6bcf\u6b21\u6211\u8fd0\u884c\u57fa\u51c6\u6d4b\u8bd5\u65f6\uff0c\u8bed\u8a00\u4e4b\u95f4\u7684\u76f8\u5bf9\u6027\u80fd\u5dee\u5f02\u5927\u81f4\u76f8\u540c\u3002\u8bdd\u867d\u5982\u6b64\uff0cJava \u4f3c\u4e4e\u5728\u4efb\u4f55\u81f3\u5c11\u9700\u8981 20 \u79d2\u7684\u8fd0\u884c\u4e2d\u9886\u5148\uff08\u4f7f\u7528\u7528 ByteBuffer \u66ff\u6362 BigInt \u7684\u5b9e\u73b0\uff0c\u5c31\u50cf Rust \u7248\u672c\u6240\u505a\u7684\u90a3\u6837\uff0c\u800c\u4e0d\u662f Trie\uff01\uff09\uff0c\u5e76\u4e14\u5728\u6b64\u4e4b\u540e\u5b83\u7684\u9886\u5148\u4f18\u52bf\u4e0d\u65ad\u589e\u52a0\u3002\u6b63\u5982\u9884\u6d4b\u7684\u90a3\u6837\uff0cJIT \u5f00\u59cb\u53d1\u6325\u4f5c\u7528\uff0c\u4f7f Java \u8d85\u8d8a\u4e86\u5176\u4ed6\u8bed\u8a00\uff0c\u5373\u4f7f\u662f\u6211\u7684\u4f01\u4e1a\u7ea7\u4ee3\u7801\u4e5f\u662f\u5982\u6b64\u3002 Rust \u7684\u4eba\u63a8\u6d4b\uff0c\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u53ef\u80fd\u4f1a\u5728\u67d0\u4e2a\u65f6\u5019\u6210\u4e3a\u74f6\u9888\u2026\u2026\u4ee5\u6211\u4eec\u73b0\u5728\u83b7\u5f97\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6570\u91cf\u6765\u770b\uff0c\u8fd9\u80af\u5b9a\u662f\u771f\u7684\uff01\n\u6240\u4ee5\u6211\u91c7\u7528\u4e86@bugaevc \u7684\u5efa\u8bae\u4e4b\u4e00\u6765\u7f13\u51b2\u5bf9\u6807\u51c6\u8f93\u51fa\u7684\u5199\u5165\u3002\u5f53\u7136\uff0c\u6211\u5728 Java \u4e2d\u4e5f\u505a\u4e86\u540c\u6837\u7684\u4e8b\u60c5\uff01\u4e0d\u77e5\u4f55\u6545\uff0c\u8fd9\u73b0\u5728\u5df2\u7ecf\u6210\u4e3a\u4e00\u573a\u4e25\u8083\u7684 Java VS Rust \u7ade\u8d5b\u3002\u5728\u6211\u770b\u6765\uff0c\u5220\u9664\u5bf9\u6807\u51c6\u8f93\u51fa\u7684\u5199\u5165\u4f1a\u4f7f\u7ec3\u4e60\u53d8\u5f97\u6beb\u65e0\u610f\u4e49\uff0c\u56e0\u4e3a\u76ee\u6807\u663e\u7136\u662f\u80fd\u591f\u5411\u7528\u6237\u663e\u793a\u7ed3\u679c\u3002\u6b64\u5916\uff0c benchmark_runner \u4f1a\u4e22\u5f03\u8fdb\u7a0b\u7684\u6807\u51c6\u8f93\u51fa\uff0c\u56e0\u6b64\u4e0d\u4f1a\u56e0\u6807\u51c6\u8f93\u51fa\u6d88\u8d39\u8005\u963b\u585e\u592a\u957f\u65f6\u95f4\u800c\u5bfc\u81f4\u5ef6\u8fdf\uff0c\u6211\u8ba4\u4e3a\u8fd9\u8db3\u4ee5\u4f7f\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u5728\u4f7f\u7528\u7f13\u51b2\u533a\u65f6\u6709\u6548\u3002\u8fd0\u884c\u6700\u540e\u4e00\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\uff0cRust \u548c Java \u73b0\u5728\u90fd\u53ef\u4ee5\u5728\u5341\u51e0\u79d2\u5de6\u53f3\u7684\u65f6\u95f4\u5185\u8fd0\u884c\uff01\u60ca\u4eba\u7684\uff01\uff01\uff01\u8fd9\u662f\u5426\u4f1a\u4f7f\u6211\u5f53\u524d\u7684\u7ed3\u679c\u65e0\u6548\uff1f\u597d\u5427\uff0c\u4e0d\u2026\u2026\u91cd\u65b0\u8fd0\u884c\u6240\u6709\u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u7ed3\u679c\uff0c\u6240\u6709\u4e4b\u524d\u7684\u8fd0\u884c\u4ecd\u7136\u663e\u793a\u5927\u81f4\u76f8\u540c\u7684\u4e1c\u897f\uff08\u5373\u6807\u51c6\u8f93\u51fa\u76f4\u5230\u73b0\u5728\u8fd8\u4e0d\u662f\u74f6\u9888\uff09\uff0c\u7ed3\u679c\u968f\u7740\u66f4\u5927\u7684\u8f93\u5165\u53d8\u5f97\u8d8a\u6765\u8d8a\u4e0d\u5e73\u8861\uff08\u4e0d\u8db3\u4ee5\u5927\u5e45\u6539\u53d8\u7ed3\u679c\uff09\u3002\u5728\u6211\u7f13\u51b2\u6807\u51c6\u8f93\u51fa\u5199\u5165\u540e\u7684\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\uff0cRust \u4f3c\u4e4e\u518d\u6b21\u53d8\u5f97\u6bd4 Java \u5feb\u5f97\u591a\u3002\u7136\u800c\uff0c\u7531\u4e8e\u6253\u5370\u8f93\u51fa\u53d8\u5f97\u66f4\u5feb\uff0c\u7a0b\u5e8f\u53ea\u8fd0\u884c\u4e86\u51e0\u79d2\u949f\uff0c\u4e0d\u8db3\u4ee5\u8ba9 JVM \u4f18\u5316\u6389\u4e00\u4e9b\u4e1c\u897f\u3002\u679c\u7136\uff0c\u518d\u6b21\u589e\u52a0\u8f93\u5165\u5927\u5c0f\u4ee5\u4f7f\u7a0b\u5e8f\u8fd0\u884c\u81f3\u5c11\u4e00\u5206\u949f\uff08\u8fd9\u662f\u6211\u8010\u5fc3\u7b49\u5f85\u7ed3\u679c\u7684\u65f6\u95f4\uff09\u8868\u660e JVM \u6700\u7ec8\u8d76\u4e0a\u4e86\u3002\u4f7f\u7528\u4e86\u4e24\u79cd\u8bed\u8a00\u7684\u9ed8\u8ba4\u7f13\u51b2\u533a\u5927\u5c0f\u3002\u4f3c\u4e4e\u90fd\u9009\u62e9\u4e86 8 KB \u7f13\u51b2\u533a\u3002\u6211\u51b3\u5b9a\u6709\u5fc5\u8981\u770b\u770b\u8fd9\u91cc\u662f\u5426\u6709\u8d8b\u52bf\uff0c\u6240\u4ee5\u6211\u4e0d\u5f97\u4e0d\u56de\u5230\u6298\u7ebf\u56fe\uff0c\u4f46\u66f4\u957f\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u662f\u8f93\u5165\u7684\u6570\u91cf\uff0c\u800c\u662f\u7528\u4f5c\u8f93\u5165\u7684\u5355\u4e2a\u7535\u8bdd\u53f7\u7801\u7684\u957f\u5ea6\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u627e\u5230\u6240\u6709\u89e3\u51b3\u65b9\u6848\u7684\u65f6\u95f4\uff08\u89e3\u51b3\u65b9\u6848\u7684\u6570\u91cf\u968f\u7740\u7535\u8bdd\u53f7\u7801\u7684\u957f\u5ea6\u589e\u957f\u975e\u5e38\u5feb\uff09\u3002\n\u8fd9\u8868\u660e Rust \u542f\u52a8\u5f97\u66f4\u5feb\uff0c\u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u5e76\u4e14 JVM \u6700\u7ec8\u8d76\u4e0a\u4e86\uff01\u6211\u5728\u7535\u8bdd\u957f\u5ea6\u4e3a 29 \u65f6\u505c\u4e86\u4e0b\u6765\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8fd0\u884c\u5df2\u7ecf\u8d85\u8fc7\u4e86\u6211\u6bcf\u6b21\u8fd0\u884c 1 \u5206\u949f\u7684\u9650\u5236\u2026\u2026\u4f46\u662f\u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c\u6700\u540e\u8fd8\u4e0d\u6e05\u695a Java \u662f\u5426\u6700\u7ec8\u80fd\u591f\u8d85\u8fc7 Rust\uff08\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u662f\u7531\u4e00\u4e2a\u6700\u540e\u4e24\u6b21\u8fd0\u884c\u7684\u5229\u6da6\u7387\u975e\u5e38\u5c0f\uff09\uff01\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u8ba4\u4e3a\u786e\u5b9e\u9700\u8981\u6700\u540e\u4e00\u6b21\u957f\u5ea6\u4e3a 30 \u7684\u8fd0\u884c\u6765\u51b3\u5b9a\u5224\u51b3\uff0c\u5373\u4f7f\u8fd9\u9700\u8981\u66f4\u957f\u7684\u65f6\u95f4\uff1aD\uff01\u5982\u679c\u6211\u4eec\u4ea4\u6362 Rust HashMap \u5b9e\u73b0\uff0c\u6b63\u5982\u4ed6\u4eec\u6240\u8bf4\uff0c\u6211\u4f7f\u7528\u7684\u6807\u51c6\u5b9e\u73b0\u5e94\u7528\u4e86 JVM \u6ca1\u6709\u7684\u52a0\u5bc6\u5b89\u5168\u54c8\u5e0c\uff1f\uff01\u6211\u4eec\u662f\u5426\u8fd8\u5141\u8bb8\u5c06 Java \u7684 HashMap \u4e0e\u8fd9\u6837\u6216\u8fd9\u6837\u7684\u66f4\u5feb\u7684\u5b9e\u73b0\u4ea4\u6362\uff1f\u5982\u679c\u6211\u4eec\u53ea\u662f\u6254\u6389\u89e3\u51b3\u65b9\u6848\u800c\u4e0d\u662f\u6253\u5370\u5b83\u4eec\u4f1a\u600e\u6837\uff1f\u5982\u679c\u6211\u4eec\u5c06\u89e3\u51b3\u65b9\u6848\u5e76\u884c\u5316\u600e\u4e48\u529e\uff1f\u4eba\u4eec\u63d0\u51fa\u4e86\u5404\u79cd\u5404\u6837\u7684\u5efa\u8bae\uff0c\u4f46\u6211\u5fc5\u987b\u5728\u67d0\u5904\u5212\u6e05\u754c\u9650\u3002\n\u6211\u53ef\u80fd\u4f1a\u8ba9\u4e00\u4e9b\u4eba\u751f\u6c14\uff0c\u56e0\u4e3a\u6211\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u6216\u90a3\u4e2a\u5e93\uff0c\u4f46\u6211\u5728\u8fd9\u91cc\u7684\u6b66\u65ad\u8def\u7ebf\u662f\u4e0d\u5141\u8bb8\u5c06\u5e93\u6dfb\u52a0\u5230\u6df7\u5408\u4e2d\uff0c\u56e0\u4e3a\u5b83\u4f7f\u8bed\u8a00\u6bd4\u8f83\u6bd4\u73b0\u5728\u66f4\u96be\uff0c\u800c\u4e14\uff0c\u8bf4\u5b9e\u8bdd\uff0c\u6211\u5df2\u7ecf\u7b4b\u75b2\u529b\u5c3d\u4e86\u8bd5\u56fe\u8fbe\u6210\u5171\u8bc6\u3002\u7528 Rust \u7f16\u5199\u4ee3\u7801\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u7684\u4ee3\u7801\u4f1a\u5f88\u5feb\u3002\u5f88\u5bb9\u6613\u72af\u9519\u8bef\u5e76\u4e14\u6027\u80fd\u5f88\u6162\u3002\u6b63\u5982\u8fd9\u7bc7\u535a\u6587\u6240\u663e\u793a\u7684\u90a3\u6837\uff0c\u60a8\u751a\u81f3\u53ef\u80fd\u9700\u8981\u51fa\u5f88\u591a\u6c57\u624d\u80fd\u51fb\u8d25 Common Lisp \u548c Java\u3002\u8fd9\u7bc7\u535a\u6587\u9677\u5165\u4e86 Java \u548c Rust \u4e4b\u95f4\u7684\u4e00\u573a\u75af\u72c2\u7ade\u8d5b\uff0c\u770b\u770b\u54ea\u4e2a\u80fd\u8dd1\u5f97\u66f4\u5feb\u2026\u2026\u8fd9\u4e0d\u662f\u6211\u7684\u672c\u610f\uff0c\u6211\u53ea\u60f3\u5c55\u793a\u5982\u4f55\u4fee\u590d\u6211\u7cdf\u7cd5\u7684 Rust \u4ee3\u7801\uff0c\u4f46\u8981\u77e5\u9053\u6027\u80fd\u8db3\u591f\u597d\uff0c\u6211\u4e0d\u5f97\u4e0d\u4f7f\u7528\u5176\u4ed6\u8bed\u8a00\u8fdb\u884c\u6bd4\u8f83\uff0c\u4e8b\u60c5\u5f88\u5feb\u5c31\u9677\u5165\u4e86\u4e00\u573a\u6beb\u65e0\u610f\u4e49\u7684\u7ade\u8d5b\u6765\u89e3\u51b3\u4e00\u4e2a\u6ca1\u4eba\u5173\u5fc3\u7684\u95ee\u9898\uff0c\u53ea\u662f\u4e3a\u4e86\u627e\u51fa\u54ea\u79cd\u8bed\u8a00\u662f\u6700\u5feb\u7684\u3002\u597d\u6d88\u606f\u662f\uff0c\u6700\u540e\uff0c\u6700\u53d7\u5173\u6ce8\u7684\u8bed\u8a00 Java \u548c Rust \u7684\u6027\u80fd\u975e\u5e38\u63a5\u8fd1\uff0c\u4ee5\u81f3\u4e8e\u6211\u8ba4\u4e3a\u8bed\u8a00\u9009\u62e9\u5e76\u4e0d\u50cf\u4eba\u4eec\u8ba4\u4e3a\u7684\u90a3\u4e48\u91cd\u8981\u7684\u89c2\u70b9\u5f97\u5230\u4e86\u663e\u7740\u52a0\u5f3a\uff0c\u6211\u8ba4\u4e3a\u3002\u6709\u65f6\uff0c\u65e0\u8bba\u60a8\u4f7f\u7528\u54ea\u79cd\u8bed\u8a00\u6216\u60a8\u7684\u7a0b\u5e8f\u5458\u6709\u591a\u806a\u660e\uff0c\u60a8\u7684\u4ee3\u7801\u90fd\u4f1a\u8fd0\u884c\u5f97\u5982\u6b64\u4e4b\u5feb\uff0c\u4ee5\u81f3\u4e8e\u60a8\u751a\u81f3\u4e0d\u4f1a\u8003\u8651\u5176\u4ed6\u8bed\u8a00\u800c\u4e0d\u662f\u60a8\u719f\u6089\u7684\u8bed\u8a00\u3002\u5176\u4ed6\u65f6\u5019\uff0c\u6211\u51e0\u4e4e\u603b\u662f\u4f1a\u8bf4\uff0c\u4f60\u9700\u8981......", "note_en": "How I tried to port Lisp code to Rust and managed to get a much slower program... and how to fix that!\n   I have recently published  a blog postthat, as I had expected (actually, hoped for, as that would attract people tocontribute to the \u201cstudy\u201d), generated quite some polemic on the Internet!\n The post was about an old study by Lutz Prechelt comparing Java to C/C++, as well as a few follow-up papers that addedother languages to the comparison, including Common Lisp and a few scripting languages.\n I decided to try and see if the results in those papers, which ran their studies 21 years ago, still stand or if thingschanged completely since then.\n I couldn\u2019t get a bunch of students, let alone professional programmers, to write programs for my \u201cstudy\u201d in multiplelanguages, so I did the next best thing and ported the arguably most common approach to the problem(based on code by  Peter Norvig, no less) to other languages:Java, Rust, and later also Julia and Dart.\n The resultswere shocking: Rust was one of the slowest languages! It had the lowest memory usage, but also the highestLOC (lines-of-code) if I included only the implementations of the same algorithm.\n Today, I want to appease angry Rust fans and other concerned parties by showing exactly why my Rust code was so slow,and how with a few small fixes, it can outperform the other languages in the \u201ccompetition\u201d, at least in performance(and as I found out, for certain kinds of inputs only).\n Thanks to  the Rust fans who took a lot oftheir free time to show me just why my Rust code was so slow and how to fix it!\n  Let\u2019s look at the original Common Lisp code before we start looking at the slow Rust code.\n Here\u2019s the essence of Peter Norvig\u2019s Lisp solution to the Prechelt\u2019s phone encoding problem (comments removed for brevity):\n ( defun  print-translations ( num  digits  &amp;optional ( start  0) ( words nil)) ( if ( &gt;=  start ( length  digits)) ( format t  &#34;~a:~{ ~a~}~%&#34;  num ( reverse  words)) ( let (( found-word nil) ( n  1))  ; leading zero problem ( loop  for  i  from  start  below ( length  digits)  do ( setf  n ( + ( *  10  n) ( nth-digit  digits  i))) ( loop  for  word  in ( gethash  n  *dict*)  do ( setf  found-word t) ( print-translations  num  digits ( +  1  i) ( cons  word  words)))) ( when ( and ( not  found-word) ( not ( numberp ( first  words)))) ( print-translations  num  digits ( +  start  1) ( cons ( nth-digit  digits  start)  words))))))\n  It is an interesting and brief solution, and one that I wouldn\u2019t come up with myself.What  I did come up withwas based on a   Trie data structure (referred to as  Java1 throughout this article,meaning  First Java implementation, not JDK 1.0), but that\u2019s another story.\n Anyway, porting this to other languages seems pretty easy and fun, so that\u2019s what I did. My purpose was to check howmuch difference a language really makes, assuming you can solve the problem using the same algorithm.\n  The thesis (that I perhaps didn\u2019t make very clear in my previous article) was that once you discount choice of algorithm(which sometimes can be the hard part), language differences wouldn\u2019t be as large as they appear to be when you considerprograms doing widely different things to achieve the same result. The original study actually had convincing evidence thatprogrammers tend to come up with different algorithms depending on the language: lower level languages programmers tendto use lower level constructs even when their language would allow a higher level one. This, my theory went, was whatreally caused lower level languages to have higher LOC count and better performance. Once you control for that,both LOC and performance should get closer, making which language you use mean much less (well, as long as you can getyourself to use the  right level of abstraction for the problem in your chosen language).\n  Going back to the Rust code\u2026 I tried to keep it as close as possible to the original Lisp code in order to have anapples-to-apples comparison. So I considered using big numbers to \u201ckey\u201d existing words was very important.\n A lot of people criticized that decision because they \u201cknew\u201d that  BigInt is slow in many languages, and Lisp is justreally good at that.\n Well, as we\u2019ll see soon, that\u2019s NOT the reason the Rust code was slow.\n Here\u2019s part of the Rust code that I wrote, including the conversion from word to  BigUInt that I used:\n use lazy_static::lazy_static; use num_bigint::{BigUint, ToBigUint}; type  Dictionary  = HashMap &lt;BigUint,  Vec &lt; String &gt; &gt;;lazy_static ! {  static  ref ONE:  BigUint  =  1.to_biguint().unwrap();  static  ref TEN:  BigUint  =  10.to_biguint().unwrap();} fn  word_to_number(word:  &amp; str) -&gt;  BigUint {  let  mut n  = ONE.clone();  for ch  in word.chars() {  if ch.is_alphabetic() { n  =  &amp;n  * ( &amp; *TEN)  +  &amp;char_to_digit(ch); } } n}\n I used  lazy_static because I wanted a global constant for  ONE and  TEN in order to avoid allocating an instance of BigUint for every single iteration of the loop shown in  word_to_number.\n Not only is that horribly ugly, it\u2019s completely unnecessary and futile. I didn\u2019t know that at the time, of course.This seemed like the way to do this from my previous experience in Rust (i.e. need non-constant global state,use  lazy_static).\n  fn  word_to_number(word:  &amp; str) -&gt;  BigUint {  let  mut n  =  1 u8.into();  for digit  in word.chars().filter_map(char_to_digit) { n  * =  10 u8; n  + = digit; } n}\n Seeing this blew my mind. Notice that all operations above are still using  BigUint, as the original!\n  let  mut n  = ONE.clone();  let  mut found_word  =  false;  for i  in start..digits.len() { n  =  &amp;n  * ( &amp; *TEN)  +  &amp;nth_digit(digits, i); ...\n  let  mut n  =  1 u8.into();  let  mut found_word  =  false;  for i  in start..digits.len() { n  * =  10 u8; n  + = nth_digit(digits, i); ...\n This also requires a small change to  char_to_digit\u2019, check the  full diffif you\u2019re interested.\n With just this readability improvement, the code actually runs faster already (but not as fast as CL)!!\n   The next step is to avoid inefficient copies of lists (or Rust  Vec) for each partial solution, which I had done in amisguided attempt to keep the code simple.\n Every time the algorithm finds a new word for a potential solution, it needs to recurse with that word  accumulatedinto the current partial solution. It needs to do that for potentially several words at the same level, so we can\u2019tjust mutate the list and forget about it. That\u2019s why I used the Common Lisp\u2019s approach, approximately:\n  This will return a new list that contains all elements of  words, plus  word, without mutating  words.\n As you might know, Lisp is built around Lists, so doing this is highly efficient in Lisp. But the equivalent Rust is not.\n   This copies the list, then appends the new  word before recursing. That means we can repeat this operation for eachword as the original  partial_solution is preserved. Also,  words can stay immutable, and as functional programmersknow, immutability is good!\n As many commenters pointed out, this is silly from a performance point-of-view.You know that once you recurse, this very same code is going to run again(or not) and that, in any case, we can just pop the  word from the original list once the recursion completes to achievethe exact same result!\n Functional programming with immutable structures may be great, but it requires \u201csmart\u201d implementations of immutable datastructures, and just cloning a  Vec is not that!\n   Done, right? Wrong\u2026 we now have to deal with the borrow checker telling us that we can\u2019t just get a brand-newinstance of  String and put it into our  Vec&lt;&amp;String&gt; because the  Vec is not the owner of any of its strings.\n I\u2019ve seen this many times in Rust: I write a large chunk of code being a little careless about lifetimes,just to then have to change the types of my variables and functions everywhere in my program to avoid having to clone() things everywhere to make it work.\n This means that, yes, writing efficient code in Rust requires a lot of forethought. In this case, our tiny modificationto use a mutable  Vec actually requires us to only deal with strings whose life times match or exceed that of our  Vec.\n     fn  print_translations &lt; &#39;dict &gt;( num:  &amp; str, digits:  &amp; Vec &lt;char &gt;, start:  usize, words:  &amp; mut  Vec &lt; &amp; &#39;dict  str &gt;, dict:  &amp; &#39;dict Dictionary,) -&gt;  io:: Result &lt;() &gt;\n Now, we have the problem that not all words we insert into  words come from  dict: some words will be the replacementdigits that the problem allows us to use when a word can\u2019t be found.\n    ...62 | words.push(&amp;digit); | -----------^^^^^^- | | | | | borrowed value does not live long enough | argument requires that `digit` is borrowed for `&#39;dict`\n To fix that, we must change  nth_digit to give us a  String that  lives long enough!\n But how can we do that? Well, in this case it\u2019s actually very simple: there are only 10 possible digits, so we can havea static list containing them all!  nth_digit will then always return something with  &#39;static lifetime, which shouldwork as that\u2019s definitely going to live longer than  &#39;dict.\n  fn  nth_digit(digits:  &amp; Vec &lt;char &gt;, i:  usize) -&gt;  BigUint {  let ch  = digits.get(i).expect( &#34;index out of bounds&#34;); (( *ch  as  usize)  - ( &#39;0&#39;  as  usize)).to_biguint().unwrap()}\n   That still works because when we do  n += nth_digit(digits, i);, it works even when  n is a  BigUint!\n  static DIGITS: [ &amp; str;  10]  = [ &#34;0&#34;,  &#34;1&#34;,  &#34;2&#34;,  &#34;3&#34;,  &#34;4&#34;,  &#34;5&#34;,  &#34;6&#34;,  &#34;7&#34;,  &#34;8&#34;,  &#34;9&#34;];...  let digit  = nth_digit(digits, start); words.push(DIGITS[ usize::from(digit)]);\n Here, the Rust novice like me (I have been using Rust on and off for over two years now, but it really takes some timeor a lot of dedication to stop being a novice in Rust) might say that this is getting a bit too complicated comparedwith either Java or Lisp. Lifetimes can get really tricky. However, in this case, it seems that someone with good Rustexpertise would\u2019ve seen that coming and would\u2019ve taken care of that from the beginning?!\n Well, I would love to run a study with lots of Rust programmers to see how that actually goes in practice :). Maybe one day.\n    That\u2019s right! The Rust code now matches the Common Lisp code in performance almost exactly!\n       It might be tempting to use  if let Ok() sometimes, but don\u2019t do it:\n     Fancy, right?! This is one of those idioms that if you don\u2019t know it yet, you feel like an idiot for having writtenthat horrible code before.\n   My terrible approach (it actually took me half an hour to decide how to do this):\n let  mut args:  Vec &lt;_ &gt;  = args().skip( 1).collect(); let words_file:  String  =  if  !args.is_empty() { args.remove( 0) }  else {  &#34;tests/words.txt&#34;.into() }; let input_file:  String  =  if  !args.is_empty() { args.remove( 0) }  else {  &#34;tests/numbers.txt&#34;.into() };\n   Apparently, you don\u2019t need to collect the args into a  Vec, then remove them to take ownership!Using  next() on an iterator you\u2019re actually  consuming the items.\n Because   std::env::Args implements  Iterator&lt;String&gt;,not  Iterator&lt;&amp;str&gt; or something, consuming it gives you ownership of the args(does it clone the args? magically backs the  Strings it returns with a single  &amp;&#39;static str somehow? don\u2019t know\u2026).\n  Unfortunately, these stylistic improvements don\u2019t give us much extra performance, the previous chart still reflectswell the current performance of the code.\n  At this point, the Rust code is basically @phillipc \u2019s, not mine.See  his forkfor a few other similar versions of the code.\n  At this point, the Rust developers might have pat themselves on the back and gone home to have a nice time with thefamily, internally celebrating the small victory in their head.\n  @bugaevc came up with  an implementationthat gets rid of  BigUint and uses a  Vec&lt;u8&gt; instead ( full diff).\n As a small sample of his implementation, here\u2019s the  word_to_number function, which still looks quite neat.\n  It turns out that this change allows Rust to go through the phone numbers even faster!\n Here are the final results, including  a improved Java version (henceforth Java3)that uses almost the same exact performance improvements used in the improved Rust code:\n Notice that this chart includes only the final  BigUInt version from the previous section and the new version.I leave it up to you to consider whether @bugaevc \u2019s solution is still comparable with the original Common Lispwithout us also squeezing the last juice Common Lisp might have to give.\n  As you can see, if you really need that last millisecond of performance, Rust can give you that!\n Java seems to have fallen far behind now (at least it performs a lot better than the original, performance-bug-ridden Rustimplementation).\n  As a bonus, I thought it would be a good idea to use a much larger dictionary, because that makes the runtimesreally struggle as the combinatorial space of solutions explodes!\n This might allow Java to redeem itself, at least partly, and show whether its JIT can make the miracles Java people(like me!) say it can, given enough time and information about hot code paths.\n  Perfect to make our programs sweat.  I edited the benchmarkconfig to use that in an extra run.\n After some experimentation, that proved to be too much as even finding a couple of phone numbers would take minutes\u2026so I had to adjust the settings until the programs ran for a reasonable amount of time, but not too long (I settled foraround one minute for the fastest implementation).\n Using a very small amount of phone numbers, but allowing maximum 50-length for each number, caused the variability betweenruns to become extreme due to the fact that the numbers were generated randomly on each benchmark run (if a particularrun happened to contain a few long numbers, it would take forever to find all solutions).\n I adjusted for that by  limiting the lengthof the phone numbers to a lower higher bound and increasing the amount ofphone numbers, which made runs a little more stable, making the benchmark reproducible.\n   Running the benchmarks a few times showed that there was variance, but not in the relative performance between thelanguages.\n   The group on the left is the first run, and on the right, the second run (using the same settings).\n I also ran this last benchmark with the  BigInt final solution from @phillipc, and surprisingly, it took almost exactlyas long as the final Rust implementation (32.93s for the former, 32.42s for the latter).Whoever thought Rust\u2019s  num crate was slow?\n The implementations are all very sensitive to the benchmark settings: increasing the max phone number length, for example, from12 to 16, has a huge impact on runtime (from around 20 seconds to several minutes).\n However, the amount of phone numbers seems large enough that every time I ran the benchmarks, I got approximately the samerelative performance difference between the languages.\n With that said, Java seems to take the lead (using the implementation that replaces  BigInt with a  ByteBuffer, likethe Rust version did, not the  Trie!) on any runs that take at least 20 seconds, and its lead keeps increasingafter that. As predicted, the JIT kicks in and makes Java fly past other languages, even with my enterprisey-looking code.\n   Rust people speculated that printing to stdout might become the bottleneck at some point\u2026 with the number of solutionswe\u2019re now getting, that could certainly be true!\n So I took  one of the suggestionsby @bugaevc to  buffer writes to stdout. I did  the same in Java,of course! This has now become a serious Java VS Rust race, somehow.\n Removing writes to stdout would, in my opinion, make the exercise pointless, as the objective is clearly to be ableto show the user the results. Also, the benchmark_runner throws away the process\u2019 stdout, so there is no delay dueto the stdout consumer blocking for too long, which I think is enough to make the benchmark results valid when usinga buffer.\n Running this last benchmark showed that both Rust and Java now can run in just a dozen seconds or so! Amazing!!!\n Does that invalidate my current results? Well, no\u2026 re-running all benchmarks shows that, with the exception of thislast result, all previous runs still show roughly the same thing (i.e. stdout was not a bottleneck until now), withresults becoming more and more skewed with the larger inputs (not quite enough to change results substantially).\n On my first run after buffering stdout writes, Rust again seemed to become much faster than Java.However, the programs were running for only a few seconds now that printouts became faster, not enough for the JVM tooptimise away stuff. Sure enough, increasing the input sizes once again to make programsrun for at least a minute (which is how long I was patient enough to wait for results) shows that the JVM catches up,eventually.\n Both language\u2019s default buffer sizes were used. It seems both chose an 8 KB buffer.\n I decided it was necessary to see if there was a trend here, so I had to go back to line charts, but with longer runsvarying not the number of inputs, but the length of the single phone number used as input. This way, we know how longeach program can find all solutions for just one phone number (the number of solutions grows very quickly with thelength of the phone number).\n   This shows that Rust starts a lot faster, as expected, and that the JVM eventually catches up!\n I stopped at a phone length of 29 because each run was already exceeding my limit of 1-minute per run\u2026 but as you cansee, at the end it\u2019s unclear if Java is finally able to overtake Rust or not (technically, it did by a very small marginin the last two runs)!\n For that reason, I thought one final run with a length 30 was really needed to decide the verdict, even if that took amuch longer time :D!\n      What if we swap the Rust  HashMap implementation, as they say the standard one I was using applies a cryptographically-safe hash thatthe JVM doesn\u2019t?!\n Are we also allowed to swap the Java\u2019s  HashMap with a much faster implementation  like thisor  this?\n What if we just throw away the solutions instead of printing them? What if we parallelize the solutions?\n  People have suggested all sorts of things, but I have to draw the line somewhere.\n I might make some people angry that I didn\u2019t use this or that library, but my arbitrary line here will be that addinglibraries to the mix won\u2019t be allowed because it makes language comparisons even harder than it already is and, to bequite honest, I am already exhausted trying to reach a consensus.\n    Writing code in Rust doesn\u2019t mean your code will be blazing fast. It\u2019s easy to make mistakes and get quite slowperformance. As this blog post has shown, you might even have to sweat quite a lot to beat Common Lisp and Java.\n This blog post descended into a crazy race between Java and Rust to see which one could go faster\u2026 that was nevermy intention, all I wanted was to show how to fix my bad Rust code, but to know the performance was good enough, I hadto use the other languages for comparison, and things quickly descended into a pointless race to solve a problemno one cares about just so we could figure out which language is really the fastest.\n The nice thing is that, at the end, the performance of the languages that received the most attention,Java and Rust, was so close that my point that language choice doesn\u2019t matter as much as people think has beensignificantly strengthened, I think.\n Sometimes, it doesn\u2019t matter which language you use or how smart your programmers are, your code will run so fast thatyou won\u2019t ever even think about other languages than what you\u2019re comfortable with.\n Other times, almost always I would say, you need to \n......", "posttime": "2021-08-02 22:09:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,rust,slow", "title": "\u5982\u4f55\u7f16\u5199\u6162\u901f Rust \u4ee3\u7801", "title_en": "How to write slow Rust code", "transed": 1, "url": "https://renato.athaydes.com/posts/how-to-write-slow-rust-code.html", "via": "", "real_tags": ["\u4ee3\u7801", "rust", "slow"]}, {"category": "", "categoryclass": "", "imagename": "9d0aca1bd81f85f3babcf4481a8a7072.jpg", "infoid": 1071176, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u5efa\u4e8e\u7f57\u9a6c\u5c3c\u4e9a Tirgu Mures \u7684 Sapientia \u5927\u5b66\u3002\u7531\u4f50\u5c14\u5766\u00b7\u5361\u6cf0 (Zolt\u00e1n K\u00e1tai) \u548c\u62c9\u65af\u6d1b\u00b7\u6258\u65af (L\u00e1szl\u00f3 T\u00f3th) \u6267\u5bfc\u3002\u4e0e\u201cMaros M\u0171v\u00e9szegy\u00fcttes\u201d\u5408\u4f5c\uff0c...", "note_en": "Created at Sapientia University, Tirgu Mures (Marosv\u00e1s\u00e1rhely), Romania. Directed by K\u00e1tai Zolt\u00e1n and T\u00f3th L\u00e1szl\u00f3. In cooperation with \"Maros M\u0171v\u00e9szegy\u00fcttes\",...", "posttime": "2021-08-02 22:09:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5408\u5e76,sort,szegy", "title": "\u4e0e\u7279\u5170\u897f\u74e6\u5c3c\u4e9a-\u6492\u514b\u900a\u6c11\u95f4\u821e\u8e48\u5408\u5e76\u6392\u5e8f", "title_en": "Merge-sort with Transylvanian-saxon folk dance", "transed": 1, "url": "https://www.youtube.com/watch?v=XaqR3G_NVoo", "via": "", "real_tags": ["\u5408\u5e76", "sort", "szegy"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071175, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2012 \u5e74 8 \u6708 15 \u65e5\uff0c\u7b2c 10 \u5377\uff0c\u7b2c 8 \u671f \u5341\u4e09\u5e74\u524d\uff0cEric Raymond \u7684\u4e66 The Cathedral and the Bazaar\uff08O&#39;Reilly Media\uff0c2001\uff09\u91cd\u65b0\u5b9a\u4e49\u4e86\u6211\u4eec\u7684\u8bcd\u6c47\uff0c\u51e0\u4e4e\u627f\u8bfa\u7ed3\u675f\u7011\u5e03\u6a21\u578b\u548c\u5927\u578b\u8f6f\u4ef6\u516c\u53f8\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u65b0\u7684\u8349\u6839\u5f00\u6e90\u8f6f\u4ef6\u5f00\u53d1\u8fd0\u52a8\u3002\u6211\u53d1\u73b0\u8fd9\u672c\u4e66\u53d1\u4eba\u6df1\u7701\uff0c\u4f46\u5b83\u5e76\u6ca1\u6709\u8bf4\u670d\u6211\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6df1\u5165\u53c2\u4e0e\u5f00\u6e90\uff0c\u6211\u4e0d\u7981\u60f3\u5230\u5982\u679c\u4ed6\u662f\u5bf9\u7684\u5c31\u597d\u4e86\u3002\u4eca\u5e74\u590f\u5929\u6211\u5e26\u5230\u6d77\u6ee8\u522b\u5885\u7684\u90a3\u672c\u4e66\u4e5f\u53d1\u4eba\u6df1\u7701\uff0c\u6bd4\u96f7\u8499\u5fb7\u7684\uff08\u5b83\u751a\u81f3\u76f8\u5f53\u80af\u5b9a\u5730\u63d0\u5230\uff09\u66f4\u53d1\u4eba\u6df1\u7701\uff1a\u5f17\u96f7\u5fb7\u91cc\u514b\u00b7P\u00b7\u5e03\u9c81\u514b\u65af\u7684\u8bbe\u8ba1\u8bbe\u8ba1\uff08Addison-Wesley Professional\uff0c2010 \u5e74\uff09\u3002\u5c3d\u7ba1\u6211\u53d1\u73b0\u81ea\u5df1\u70b9\u5934\u8868\u793a\u540c\u610f\uff0c\u800c\u4e14\u6211\u5f88\u559c\u6b22\u5e03\u9c81\u514b\u65af\u5bf9\u8bed\u8a00\u548c\u4e3b\u9898\u7684\u638c\u63e1\uff0c\u4f46\u8fd9\u672c\u4e66\u4e5f\u8ba9\u6211\u611f\u5230\u60b2\u4f24\u548c\u5931\u671b\u3002 13 \u5e74\u524d\u4e5f\u6807\u5fd7\u7740 dot-com \u72c2\u70ed\u7684\u9876\u5cf0\uff0c\u6bcf\u4e2a\u9752\u5c11\u5e74\u90fd\u662f\u7f51\u7edc\u7a0b\u5e8f\u5458\uff0c\u6bcf\u4e2a\u5927\u5b66\u8f8d\u5b66\u8005\u90fd\u6709\u4e00\u4e2a\u7f51\u7edc\u521b\u4e1a\u516c\u53f8\u3002\u6211\u5728\u5c1d\u8bd5\u5411\u8fd9\u4e9b\u65b0\u624b\u6559\u6388\u4e00\u4e9b\u8001\u5f0f\u7684\u6280\u5de7\u2014\u2014\u6d4b\u8bd5\u6062\u590d\u5907\u4efd\u3001\u64cd\u4f5c\u7cfb\u7edf\u5b89\u88c5\u811a\u672c\u3001\u7248\u672c\u63a7\u5236\u7b49\u65b9\u9762\u975e\u5e38\u6709\u8da3\u3002\u5f53\u7136\uff0c\u4e8b\u540e\u770b\u6765\u662f 20/20\uff08\u5373\uff0c\u4e8b\u4ef6\u53ef\u80fd\u6ca1\u6709\u60a8\u8bb0\u5f97\u7684\u90a3\u4e48\u6709\u8da3\uff09\uff0c\u5e76\u4e14\u65e0\u6cd5\u9003\u907f\u6574\u4e2a dot-com \u65f6\u4ee3\u5bf9\u4e8e IT/CS\uff0c\u5c24\u5176\u662f\u8f6f\u4ef6\u8d28\u91cf\u548c Unix \u6765\u8bf4\u90fd\u662f\u4e00\u573a\u707e\u96be\u3002\u6211\u8fd8\u6ca1\u6709\u770b\u5230\u4efb\u4f55\u5173\u4e8e IT \u884c\u4e1a\u5728\u4e92\u8054\u7f51\u65f6\u4ee3\u53d8\u5f97\u66f4\u5927\u7684\u6709\u529b\u5206\u6790\u3002\u6211\u81ea\u5df1\u7684\u4f30\u8ba1\u662f\u2014\u2014\u5c06\u5728\u6b64\u4e4b\u524d\u7684 IT \u90e8\u95e8\u9501\u7740\u7684\u94a2\u95e8\u540e\u9762\u7684\u5de5\u4f5c\u79cd\u7c7b\u8ba1\u7b97\u5728\u5185\u2014\u2014\u6211\u4eec\u7684\u8d38\u6613\u589e\u957f\u4e86\u4e24\u4e2a\u6570\u91cf\u7ea7\uff0c\u6216\u8005\u5982\u679c\u4f60\u613f\u610f\uff0c\u589e\u957f\u8d85\u8fc7 10,000%\u3002\u8ff7\u4e0a\u8ba1\u7b97\u673a\u5f88\u5bb9\u6613\u2014\u2014\u51e0\u4e4e\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u5de5\u4f5c\uff0c\u5c31\u50cf\u51e0\u4e4e\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5728\u51e0\u6b21\u5c1d\u8bd5\u4e2d\u5c06\u4e24\u5757\u6728\u5934\u9489\u5728\u4e00\u8d77\u4e00\u6837\u3002\u95ee\u9898\u5728\u4e8e\uff0c\u5728\u201c\u9a84\u50b2\u7684\u7956\u7236\u201d\u90e8\u5206\u4e4b\u5916\uff0c\u5c06\u4e24\u5757\u6728\u5934\u9489\u5728\u4e00\u8d77\u7684\u5e02\u573a\u2014\u2014\u4e0d\u719f\u7ec3\u2014\u2014\u76f8\u5f53\u5c0f\uff0c\u4ece\u90a3\u91cc\u83b7\u5f97\u4e00\u5957\u50cf\u6837\u7684\u6905\u5b50\u6216\u5408\u9002\u7684\u6a71\u67dc\u9700\u8981\u5929\u8d4b\u3001\u5b9e\u8df5\u548c\u6559\u80b2\u3002\u989d\u5916\u7684 9,900% \u7684\u4eba\u5728\u8fdb\u5165\u6211\u4eec\u7684\u884c\u4e1a\u65f6\u65e2\u6ca1\u6709\u5b9e\u8df5\u4e5f\u6ca1\u6709\u53d7\u8fc7\u6559\u80b2\uff0c\u5728\u4ed6\u4eec\u6709\u673a\u4f1a\u83b7\u5f97\u5b83\u4e4b\u524d\uff0c\u805a\u4f1a\u5c31\u7ed3\u675f\u4e86\uff0c\u4ed6\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u90fd\u5931\u4e1a\u4e86\u3002\u6211\u4f1a\u4ec1\u6148\u5730\u5047\u8bbe\u90a3\u4e9b\u8bbe\u6cd5\u575a\u6301\u4e0b\u6765\u7684\u4eba\u662f\u6700\u6709\u624d\u534e\u548c\u6700\u719f\u7ec3\u7684\uff0c\u4f46\u5373\u4fbf\u5982\u6b64\uff0c\u4f5c\u4e3a IT \u4e13\u4e1a\u4eba\u58eb\uff0c\u4ed6\u4eec\u4e5f\u65e0\u6cd5\u9003\u907f\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7f3a\u4e4f\u9547\u6d41\u5668\u3002 Raymond \u6240\u63d0\u5021\u7684\u96c6\u5e02\u6a21\u56e0\uff0c\u201cJust hack it\u201d\uff0c\u4e0e\u524d\u4e92\u8054\u7f51\u65f6\u4ee3\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u5927\u6559\u5802\u76f8\u53cd\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u5e76\u6ca1\u6709\u968f\u7740\u4e92\u8054\u7f51\u7684\u75af\u72c2\u800c\u6d88\u4ea1\uff0c\u4eca\u5929 Unix \u5728\u5b83\u7684\u91cd\u538b\u4e0b\u8fc5\u901f\u4e0b\u6c89.\u6211\u66f4\u65b0\u4e86\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u3002\u6211\u5df2\u7ecf\u8fde\u7eed\u8fd0\u884c FreeBSD \u7684\u5f00\u53d1\u7248\u672c 18 \u5e74\u4e86\uff0c\u751a\u81f3\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1\u6211\u7684 Spartan \u5de5\u4f5c\u73af\u5883\u4e5f\u9700\u8981\u4e00\u6574\u5929\uff0c\u56e0\u4e3a\u5b83\u6d89\u53ca\u8bd5\u56fe\u4ece Raymond \u7684\u65e0\u653f\u5e9c\u4e3b\u4e49\u8f6f\u4ef6\u96c6\u5e02\u4e2d\u7406\u89e3\u548c\u67b6\u6784\u3002\n\u5728\u9876\u5c42\uff0cFreeBSD \u7aef\u53e3\u96c6\u5408\u8bd5\u56fe\u521b\u5efa\u4e00\u4e2a\u96c6\u5e02\u5730\u56fe\uff0c\u4f7f FreeBSD \u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u627e\u5230\u4ed6\u4eec\u9700\u8981\u7684\u4e1c\u897f\u3002\u5b9e\u9645\u4e0a\uff0c\u76ee\u524d\u8fd9\u5f20\u5730\u56fe\u7531 22,198 \u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5bf9\u96c6\u5e02\u4e2d\u7684\u6bcf\u4e2a\u644a\u4f4d\u8fdb\u884c\u4e86\u7b80\u8981\u63cf\u8ff0\u2014\u2014\u51e0\u884c\u5185\u5bb9\u5927\u81f4\u544a\u8bc9\u60a8\u8be5\u644a\u4f4d\u63d0\u4f9b\u4ec0\u4e48\u4ee5\u53ca\u60a8\u53ef\u4ee5\u5728\u54ea\u91cc\u9605\u8bfb\u66f4\u591a\u76f8\u5173\u4fe1\u606f\u3002\u8fd8\u5305\u62ec 23,214 \u4e2a Makefile\uff0c\u5b83\u4eec\u544a\u8bc9\u60a8\u5982\u4f55\u5904\u7406\u5728\u6bcf\u4e2a\u644a\u4f4d\u4e2d\u627e\u5230\u7684\u8f6f\u4ef6\u3002\u8fd9\u4e9b Makefile \u8fd8\u8bd5\u56fe\u544a\u77e5\u60a8\u5e94\u8be5\u8003\u8651\u7684\u9009\u62e9\u3001\u9009\u62e9\u54ea\u4e9b\u9009\u9879\u4ee5\u53ca\u5bf9\u5b83\u4eec\u6765\u8bf4\u4ec0\u4e48\u662f\u5408\u7406\u7684\u9ed8\u8ba4\u503c\u3002\u8be5\u5730\u56fe\u8fd8\u65b9\u4fbf\u5730\u9644\u5e26\u4e86 24,400 \u4e2a\u8865\u4e01\u6587\u4ef6\uff0c\u4ee5\u5f25\u8865\u6240\u63d0\u4f9b\u7684\u8bb8\u591a\u5546\u54c1\u7f3a\u4e4f\u5de5\u827a\u7684\u95ee\u9898\uff0c\u4f46\u662f\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7f3a\u4e4f\u4fbf\u643a\u6027\u5bfc\u81f4\u9700\u8981\u8fd9\u4e9b\u8865\u4e01\u6587\u4ef6\u3002\u6700\u540e\uff0c\u5730\u56fe\u6709\u7528\u5730\u544a\u8bc9\u60a8\uff0c\u5982\u679c\u60a8\u60f3\u8981\u62e5\u6709 www/firefox\uff0c\u60a8\u9996\u5148\u9700\u8981\u83b7\u5f97 devel/nspr\u3001security/nss\u3001databases/sqlite3 \u7b49\u3002\u4e00\u65e6\u60a8\u5728\u5730\u56fe\u4e2d\u67e5\u627e\u5e76\u627e\u5230\u5b83\u4eec\u7684\u4f9d\u8d56\u9879\uff0c\u5e76\u9012\u5f52\u67e5\u627e\u5b83\u4eec\u7684\u4f9d\u8d56\u9879\uff0c\u60a8\u5c06\u62e5\u6709\u4e00\u4e2a\u5305\u542b 122 \u4e2a\u8f6f\u4ef6\u5305\u7684\u8d2d\u7269\u6e05\u5355\uff0c\u7136\u540e\u624d\u80fd\u8bbf\u95ee www/firefox\u3002\u6a21\u5757\u5316\u548c\u4ee3\u7801\u91cd\u7528\u5f53\u7136\u662f\u4e00\u4ef6\u597d\u4e8b\u3002\u7136\u800c\uff0c\u5373\u4f7f\u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7801\u91cd\u7528\u7684 CS/IT \u6559\u6761\u5728\u96c6\u5e02\u4e0a\u4e5f\u662f\u5b8c\u5168\u964c\u751f\u7684\uff1aFreeBSD \u7aef\u53e3\u96c6\u5408\u4e2d\u7684\u8f6f\u4ef6\u5305\u542b\u81f3\u5c11 1,342 \u79cd\u590d\u5236\u548c\u7c98\u8d34\u7684\u52a0\u5bc6\u7b97\u6cd5\u3002\u5982\u679c\u5bf9\u4ee3\u7801\u91cd\u7528\u7684\u62b5\u5236/\u65e0\u77e5\u5bfc\u81f4\u4e86\u81ea\u5305\u542b\u548c\u72ec\u7acb\u7684\u8f6f\u4ef6\u5305\uff0c\u90a3\u4e48\u4ee3\u7801\u91cd\u590d\u7684\u4ef7\u683c\u5b9e\u9645\u4e0a\u53ef\u80fd\u662f\u4e3a\u4e86\u65b9\u4fbf\u5305\u7ba1\u7406\u800c\u8fdb\u884c\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u6743\u8861\u3002\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff1a\u8fd9\u4e9b\u5305\u5f62\u6210\u4e86\u4e00\u4e2a\u6742\u4e71\u65e0\u7ae0\u7684\u4f9d\u8d56\u5173\u7cfb\u7f51\u7edc\uff0c\u5bfc\u81f4\u5927\u91cf\u4ee3\u7801\u91cd\u590d\u548c\u6d6a\u8d39\u3002\u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u8bbd\u523a\u610f\u5473\u7684\u6d6a\u8d39\u7684\u4f8b\u5b50\uff1aSam Leffler \u7684 graphics/libtiff \u662f\u901a\u5f80 www/firefox \u7684 122 \u4e2a\u5305\u4e4b\u4e00\uff0c\u4f46\u7531\u6b64\u4ea7\u751f\u7684 Firefox \u6d4f\u89c8\u5668\u4e0d\u5448\u73b0 TIFF \u56fe\u50cf\u3002\u51fa\u4e8e\u6211\u6ca1\u6709\u5c1d\u8bd5\u53d1\u73b0\u7684\u539f\u56e0\uff0c122 \u4e2a\u5305\u4e2d\u6709 10 \u4e2a\u9700\u8981 Perl\uff0c7 \u4e2a\u9700\u8981 Python\uff1b\u5176\u4e2d\u4e4b\u4e00\uff0cdevel/glib20\uff0c\u51fa\u4e8e\u6211\u65e0\u6cd5\u60f3\u8c61\u7684\u539f\u56e0\u9700\u8981\u4e24\u79cd\u8bed\u8a00\u3002\u518d\u5f80\u4e0b\u662f\u5f7c\u5f97\u539f\u7406\u7684\u91cd\u590d\u5e94\u7528\uff0c\u5373\u5728\u664b\u5347\u57fa\u4e8e\u6210\u5c31\u3001\u6210\u529f\u548c\u529f\u7ee9\u7684\u7ec4\u7ec7\u4e2d\uff0c\u8be5\u7ec4\u7ec7\u7684\u6210\u5458\u6700\u7ec8\u5c06\u88ab\u63d0\u5347\u5230\u8d85\u51fa\u5176\u80fd\u529b\u6c34\u5e73\u7684\u664b\u5347\u3002\u8be5\u539f\u5219\u901a\u5e38\u88ab\u8868\u8ff0\u4e3a\u201c\u5458\u5de5\u5f80\u5f80\u4f1a\u4e0a\u5347\u5230\u4ed6\u4eec\u65e0\u80fd\u7684\u7a0b\u5ea6\u201d\u3002\u5c06\u8be5\u539f\u7406\u5e94\u7528\u4e8e\u8f6f\u4ef6\uff0c\u60a8\u4f1a\u53d1\u73b0\u60a8\u9700\u8981\u4e09\u4e2a\u4e0d\u540c\u7248\u672c\u7684 make \u7a0b\u5e8f\u3001\u4e00\u4e2a\u5b8f\u5904\u7406\u5668\u3001\u4e00\u4e2a\u6c47\u7f16\u7a0b\u5e8f\u548c\u8bb8\u591a\u5176\u4ed6\u6709\u8da3\u7684\u5305\u3002\u5728\u98df\u7269\u94fe\u7684\u6700\u5e95\u5c42\uff0c\u53ef\u4ee5\u8bf4\u662f libtool\uff0c\u5b83\u8bd5\u56fe\u9690\u85cf\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5728 Unix \u4e2d\u6ca1\u6709\u6807\u51c6\u5316\u7684\u65b9\u6cd5\u6765\u6784\u5efa\u5171\u4eab\u5e93\u3002\u4e0e\u6807\u51c6\u5316\u5982\u4f55\u5728\u6240\u6709 Unixen \u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u4e0d\u540c\u2014\u2014\u8fd9\u5bf9 ld(1) \u547d\u4ee4\u53ea\u9700\u8981\u4e00\u4e2a\u6807\u5fd7\u2014\u2014\u800c\u662f\u5e94\u7528\u4e86\u5f7c\u5f97\u539f\u5219\uff0c\u5e76\u4f7f\u5176\u6210\u4e3a libtool \u7684\u5de5\u4f5c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f7c\u5f97\u539f\u7406\u786e\u5b9e\u5f88\u5f3a\u5927\u2014\u2014devel/libtool \u7684\u6e90\u4ee3\u7801\u6709 414,740 \u884c\u3002\u4e00\u534a\u7684\u884c\u6570\u662f\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8fd9\u5728\u539f\u5219\u4e0a\u662f\u503c\u5f97\u79f0\u8d5e\u7684\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u5b83\u53ea\u662f\u5f7c\u5f97\u539f\u5219\u5728\u8d77\u4f5c\u7528\uff1a\u6d4b\u8bd5\u7cbe\u5fc3\u63a2\u7d22\u590d\u6742\u89e3\u51b3\u65b9\u6848\u7684\u529f\u80fd\uff0c\u7528\u4e8e\u89e3\u51b3\u6700\u521d\u4e0d\u5e94\u8be5\u5b58\u5728\u7684\u95ee\u9898\u3002\u66f4\u4ee4\u4eba\u6293\u72c2\u7684\u662f\uff0c\u8fd9\u4e9b\u884c\u4e2d\u6709 31,085 \u884c\u5728\u4e00\u4e2a\u540d\u4e3a configure \u7684\u96be\u4ee5\u9605\u8bfb\u7684\u4e11\u964b shell \u811a\u672c\u4e2d\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\u914d\u7f6e\u811a\u672c\u6267\u884c\u5927\u7ea6 200 \u6b21\u81ea\u52a8\u5316\u6d4b\u8bd5\uff0c\u56e0\u6b64\u7528\u6237\u65e0\u9700\u624b\u52a8\u914d\u7f6e libtool\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u7684\u4e3b\u610f\uff0c\u65e9\u5728 1980 \u5e74\u4ee3\u5b83\u51fa\u73b0\u65f6\u5c31\u5df2\u7ecf\u53d7\u5230\u5f88\u591a\u6279\u8bc4\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u6e90\u4ee3\u7801\u5728\u914d\u7f6e\u811a\u672c\u7684\u8d34\u9762\u540e\u9762\u5047\u88c5\u53ef\u79fb\u690d\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u5177\u6709\u53ef\u79fb\u690d\u6027\u7684\u8d28\u91cf\u3002\u914d\u7f6e\u601d\u60f3\u5e78\u5b58\u4e0b\u6765\u662f\u4e00\u79cd\u8bbd\u523a\u3002 1980 \u5e74\u4ee3\u770b\u5230\u4e86\u975e\u5e38\u4e0d\u540c\u7684 Unix \u5b9e\u73b0\uff1a\u5e26\u6709 24 \u4f4d\u6307\u9488\u7684 Cray-1\u3001Amdahl UTS \u5927\u578b\u673a Unix\u3001\u6765\u81ea\u5c0f\u578b\u673a\u5236\u9020\u5546\u7684\u8bb8\u591a\u6216\u591a\u6216\u5c11\u80fd\u80dc\u4efb\u5730\u6267\u884c\u7684 SysV+BSD \u6df7\u642d\uff0c\u51e0\u4e4e\uff08\u4f46\u4e0d\u5b8c\u5168\uff09\u6765\u81ea\u50cf Data General \u8fd9\u6837\u7684\u4f9b\u5e94\u5546\uff0c\u751a\u81f3\u662f\u6765\u81ea\u6cb9\u6f06\u516c\u53f8 Mark Williams \u7684\u771f\u6b63\u7684 Unix \u514b\u9686 Coherent\u3002\n\u90a3\u65f6\u7684\u914d\u7f6e\u811a\u672c\u662f\u624b\u5de5\u7f16\u5199\u7684\uff0c\u5e76\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u4f8b\u5982\u5f04\u6e05\u695a\u8fd9\u662f\u5426\u6700\u50cf BSD \u6216 SysV \u98ce\u683c\u7684 Unix\uff0c\u7136\u540e\u590d\u5236\u4e00\u4e2a\u6216\u53e6\u4e00\u4e2a Makefile\uff0c\u4e5f\u8bb8\u8fd8\u6709\u4e00\u4e2a .h \u6587\u4ef6\u5230\u4f4d\u3002\u540e\u6765\u914d\u7f6e\u811a\u672c\u53d8\u5f97\u66f4\u52a0\u96c4\u5fc3\u52c3\u52c3\uff0c\u4f5c\u4e3a\u5f7c\u5f97\u539f\u7406\u7684\u51e0\u4e4e\u53ef\u9884\u6d4b\u7684\u5e94\u7528\uff0c\u6709\u4eba\u7f16\u5199\u4e86\u4e00\u4e2a\u7a0b\u5e8f autoconf \u6765\u7f16\u5199\u914d\u7f6e\u811a\u672c\uff0c\u800c\u4e0d\u662f\u6807\u51c6\u5316 Unix \u4ee5\u6d88\u9664\u5bf9\u5b83\u4eec\u7684\u9700\u6c42\u3002\u4eca\u5929\u7684\u7c7b Unix/Posix \u64cd\u4f5c\u7cfb\u7edf\uff0c\u751a\u81f3\u5305\u62ec IBM \u7684 z/OS \u5927\u578b\u673a\u7248\u672c\uff0c\u7528 1980 \u5e74\u7684\u773c\u775b\u6765\u770b\u90fd\u662f\u76f8\u540c\u7684\uff1b\u7136\u800c\uff0clibtool \u7684 31,085 \u884c\u914d\u7f6e\u4ecd\u7136\u68c0\u67e5 &lt;sys/stat.h&gt; \u548c &lt;stdlib.h&gt; \u662f\u5426\u5b58\u5728\uff0c\u5373\u4f7f\u7f3a\u5c11\u5b83\u4eec\u7684 Unixen \u65e2\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u6765\u6267\u884c libtool\uff0c\u4e5f\u6ca1\u6709\u8db3\u591f\u5927\u7684\u78c1\u76d8\u4f9b\u5176 16- MB\u6e90\u4ee3\u7801\u3002\u597d\u5427\uff0c\u51fa\u4e8e\u4e00\u4e9b\u4ece\u672a\u6709\u8fc7\u7684\u539f\u56e0\uff0cautoconf \u662f\u7528\u6666\u6da9\u7684 M4 \u5b8f\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b9e\u9645\u6d4b\u8bd5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a ## `make&#39; \u662f\u5426\u652f\u6301\u4ec5\u8ba2\u5355\u5148\u51b3\u6761\u4ef6\u3002 AC_CACHE_CHECK([${MAKE-make} \u662f\u5426\u652f\u6301 order-only \u5148\u51b3\u6761\u4ef6], [lt_cv_make_order_only], [mkdir conftest.dir cd conftest.dir touch b touch a cat &gt;confmk &lt;&lt; &#39;END&#39; a: b | cabc: touch $ []@ END touch c if ${MAKE-make} -s -q -f confmk &gt;/dev/null 2&gt;&amp;1; then lt_cv_make_order_only=yes else lt_cv_make_order_only=no fi cd .. rm -rf conftest.dir ]) if\u6d4b\u8bd5 $lt_cv_make_order_only = yes;\u7136\u540e\u8ba2\u5355=&#39;|&#39; else ORDER=&#39;&#39; fi AC_SUBST([ORDER]) \u4e0d\u7528\u8bf4\uff0c\u5373\u4f7f\u4ed6\u4eec\u6709\u6280\u80fd\uff0c\u8fd9\u4e5f\u662f\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u90fd\u4e0d\u613f\u610f\u5fcd\u53d7\u7684\uff0c\u6240\u4ee5 autoconf \u7684\u8f93\u5165\u6587\u4ef6\u901a\u5e38\u662f\u901a\u8fc7\u590d\u5236\u548c\u7c98\u8d34\u6765\u53d1\u751f\u7684\u9690\u85cf\u5728\u8d8a\u6765\u8d8a\u81c3\u80bf\u7684\u6807\u51c6\u5b8f\u540e\u9762\uff0c\u6db5\u76d6\u201c\u6807\u51c6\u6d4b\u8bd5\u201d\uff0c\u4f8b\u5982\u524d\u9762\u63d0\u5230\u7684\u90a3\u4e9b\uff0c\u5bfb\u627e\u8fc7\u53bb 20 \u5e74\u672a\u89c1\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8fd9\u53ef\u80fd\u4e5f\u662f\u4e3a\u4ec0\u4e48 libtool \u7684 configure \u63a2\u6d4b\u4e0d\u5c11\u4e8e 26 \u4e2a\u4e0d\u540c\u540d\u79f0\u7684 Fortran \u7f16\u8bd1\u5668\u6211\u7684\u7cfb\u7edf\u6ca1\u6709\uff0c\u7136\u540e\u518d\u82b1\u8d39 26 \u6b21\u6d4b\u8bd5\u6765\u786e\u5b9a\u8fd9\u4e9b\u4e0d\u5b58\u5728\u7684 Fortran \u7f16\u8bd1\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u662f\u5426\u652f\u6301 -g \u9009\u9879\u3002\u8fd9\u5c31\u662f\u96f7\u8499\u5fb7\u5728\u4ed6\u7684\u4e66\u4e2d\u6240\u79f0\u8d5e\u7684\u96c6\u5e02\u7684\u53ef\u60b2\u73b0\u5b9e\uff1a\u4e00\u5806\u9648\u65e7\u7684\u7834\u7efd\uff0c\u88ab\u65e0\u77e5\u7684\u4e00\u4ee3 IT\u201c\u4e13\u4e1a\u4eba\u58eb\u201d\u65e0\u4f11\u6b62\u5730\u590d\u5236\u548c\u7c98\u8d34\u5b83\u3002\u4eca\u5929\u5f88\u96be\u76f8\u4fe1\uff0c\u4f46\u5728\u8fd9\u79cd\u4ee4\u4eba\u5c34\u5c2c\u7684\u6df7\u4e71\u4e4b\u4e0b\uff0c\u9690\u85cf\u7740\u7f8e\u4e3d\u7684 Unix \u5927\u6559\u5802\u7684\u5e9f\u589f\uff0c\u8be5\u5927\u6559\u5802\u4ee5\u5176\u7b80\u5355\u7684\u8bbe\u8ba1\u3001\u7ecf\u6d4e\u7684\u529f\u80fd\u548c\u4f18\u96c5\u7684\u6267\u884c\u800c\u95fb\u540d\u3002 \uff08\u539f\u6587\u5982\u6b64\uff0cgloria mundi \u7b49\uff09\n\u5e03\u9c81\u514b\u65af\u7684\u4f17\u591a\u4f18\u70b9\u4e4b\u4e00\u662f\u8d28\u91cf\u53ea\u6709\u5728\u6709\u4eba\u5bf9\u5176\u8d1f\u8d23\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u53d1\u751f\uff0c\u800c\u201c\u67d0\u4eba\u201d\u53ea\u80fd\u662f\u4e00\u4e2a\u4eba\u2014\u2014\u4e00\u4e2a\u5145\u6ee1\u6d3b\u529b\u7684\u4e8c\u4eba\u7ec4\u9664\u5916\u3002\u6211\u5f88\u60ca\u8bb6\u5e03\u9c81\u514b\u65af\u6ca1\u6709\u5f15\u7528 Unix \u4f5c\u4e3a\u8fd9\u79cd\u8bf4\u6cd5\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u56e0\u4e3a\u6211\u4eec\u51e0\u4e4e\u53ef\u4ee5\u7cbe\u786e\u5730\u6307\u51fa Unix \u5f00\u59cb\u5206\u88c2\u7684\u90a3\u4e00\u523b\uff1a\u5728 1990 \u5e74\u4ee3\u521d\uff0cAT&amp;T \u5c06 Unix \u5265\u79bb\u51fa\u6765\u5c06\u5176\u5546\u4e1a\u5316\uff0c\u4ece\u800c\u62a2\u8d70\u4e86\u5b83\u7684\u5efa\u7b51\u5e08\u3002\u8fd1\u5e74\u6765\uff0c\u5176\u4ed6\u4eba\u4e0d\u6b62\u4e00\u6b21\u5f97\u51fa\u4e0e\u5e03\u9c81\u514b\u65af\u76f8\u540c\u7684\u7ed3\u8bba\u3002\u6709\u4e9b\u4eba\u8bd5\u56fe\u5f3a\u52a0\u4e00\u79cd\u7406\u667a\uff0c\u751a\u81f3\u4ee5\u6280\u672f\u6807\u51c6\u7684\u5f62\u5f0f\u6b63\u5f0f\u5236\u5b9a\u6cd5\u5f8b\uff0c\u5e0c\u671b\u4e3a\u96c6\u5e02\u5e26\u6765\u79e9\u5e8f\u548c\u7ed3\u6784\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4ed6\u4eec\u90fd\u4ee5\u60ca\u4eba\u7684\u5931\u8d25\u544a\u7ec8\uff0c\u56e0\u4e3a\u5728\u96c6\u5e02\u4e0a\u8ff7\u8def\u7684\u4e92\u8054\u7f51\u7f51\u7edc\u795e\u7ae5\u8fd9\u4e00\u4ee3\u4ece\u672a\u89c1\u8fc7\u5927\u6559\u5802\uff0c\u56e0\u6b64\u751a\u81f3\u65e0\u6cd5\u60f3\u8c61\u4f60\u4e3a\u4ec0\u4e48\u60f3\u8981\u4e00\u4e2a\u5927\u6559\u5802\uff0c\u66f4\u4e0d\u7528\u8bf4\u5b83\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u4e86\u3002\u5177\u6709\u8bbd\u523a\u610f\u5473\u7684\u662f\uff0c\u90a3\u4e9b\u6700\u9700\u8981\u9605\u8bfb\u5b83\u7684\u4eba\u53ef\u80fd\u4f1a\u53d1\u73b0\u300a\u8bbe\u8ba1\u7684\u8bbe\u8ba1\u300b\u5b8c\u5168\u65e0\u6cd5\u7406\u89e3\u3002\u4f46\u662f\u5bf9\u4e8e\u4efb\u4f55\u66fe\u7ecf\u60f3\u8fc7\u4f7f\u7528 m4 \u5b8f\u6765\u914d\u7f6e autoconf \u6765\u7f16\u5199 shell \u811a\u672c\u6765\u5bfb\u627e 26 \u4e2a Fortran \u7f16\u8bd1\u5668\u4ee5\u6784\u5efa Web \u6d4f\u89c8\u5668\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u6709\u70b9\u7ed5\u9053\u800c\u884c\uff0cBrooks \u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u5145\u5206\u7406\u7531\u7684\u5e0c\u671b\u66f4\u597d\u7684\u65b9\u6cd5\u3002 Poul-Henning Kamp ([email protected]) \u5df2\u4e3a\u8ba1\u7b97\u673a\u7f16\u7a0b 26 \u5e74\uff0c\u662fbikeshed.org \u80cc\u540e\u7684\u7075\u611f\u6765\u6e90\u3002\u4ed6\u7684\u8f6f\u4ef6\u5df2\u88ab\u5e7f\u6cdb\u7528\u4f5c\u5f00\u6e90\u548c\u5546\u4e1a\u4ea7\u54c1\u4e2d\u7684\u5e95\u5c42\u6784\u5efa\u5757\u3002\u4ed6\u6700\u8fd1\u7684\u9879\u76ee\u662f Varnish HTTP \u52a0\u901f\u5668\uff0c\u7528\u4e8e\u52a0\u901f\u5927\u578b\u7f51\u7ad9\uff0c\u5982 Facebook\u3002\u6700\u521d\u53d1\u8868\u5728\u961f\u5217\u5377\u3002 10\uff0c\u6ca1\u6709\u3002 8 \u2014 \u5728 ACM \u6570\u5b57\u56fe\u4e66\u9986\u4e2d\u67e5\u770b\u6b64\u9879\u76ee \u76f8\u5173\uff1aJo\u00e3o Varaj\u00e3o - \u7834\u574f\u6027\u65f6\u671f\u7684\u8f6f\u4ef6\u5f00\u53d1 \u5728\u8be5\u9879\u76ee\u4e2d\uff0c\u6311\u6218\u662f\u201c\u4ee5\u6bd4\u51a0\u72b6\u75c5\u6bd2\u4f20\u64ad\u66f4\u5feb\u7684\u901f\u5ea6\u90e8\u7f72\u8f6f\u4ef6\u201d\u3002\u5728\u5177\u6709\u5982\u6b64\u7279\u6b8a\u7279\u5f81\u7684\u9879\u76ee\u4e2d\uff0c\u6709\u51e0\u4e2a\u56e0\u7d20\u4f1a\u5f71\u54cd\u6210\u529f\uff0c\u4f46\u6709\u4e9b\u56e0\u7d20\u5f88\u660e\u663e\uff1a\u9ad8\u5c42\u7ba1\u7406\u4eba\u5458\u7684\u652f\u6301\u3001\u654f\u6377\u6027\u3001\u9879\u76ee\u56e2\u961f\u7684\u7406\u89e3\u548c\u627f\u8bfa\uff0c\u4ee5\u53ca\u6240\u4f7f\u7528\u7684\u6280\u672f\u3002\u4f20\u7edf\u7684\u5f00\u53d1\u65b9\u6cd5\u548c\u6280\u672f\u6839\u672c\u65e0\u6cd5\u53ca\u65f6\u6ee1\u8db3\u8981\u6c42\u3002 Nicole Forsgren\u3001Margaret-Anne Storey\u3001Chandra Maddila\u3001Thomas Zimmermann\u3001Brian Houck\u3001Jenna Butler - \u5f00\u53d1\u4eba\u5458\u751f\u4ea7\u529b\u7684\u7a7a\u95f4 \u5f00\u53d1\u4eba\u5458\u751f\u4ea7\u529b\u4e0d\u4ec5\u4ec5\u662f\u4e2a\u4eba\u7684\u6d3b\u52a8\u6c34\u5e73\u6216\u4f9d\u8d56\u4e8e\u4ea4\u4ed8\u8f6f\u4ef6\u7684\u5de5\u7a0b\u7cfb\u7edf\u7684\u6548\u7387\uff0c\u800c\u4e14\u4e0d\u80fd\u7528\u5355\u4e00\u7684\u6307\u6807\u6216\u7ef4\u5ea6\u6765\u8861\u91cf\u3002 SPACE \u6846\u67b6\u6355\u6349\u4e86\u751f\u4ea7\u529b\u7684\u4e0d\u540c\u7ef4\u5ea6\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u8be5\u6846\u67b6\u6765\u7406\u89e3\u5b9e\u8df5\u4e2d\u7684\u751f\u4ea7\u529b\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5b83\u53ef\u4ee5\u5e2e\u52a9\u56e2\u961f\u66f4\u597d\u5730\u4e86\u89e3\u5f00\u53d1\u4eba\u5458\u7684\u751f\u4ea7\u529b\uff0c\u5e76\u521b\u5efa\u66f4\u597d\u7684\u8861\u91cf\u6807\u51c6\u6765\u4e3a\u4ed6\u4eec\u7684\u5de5\u4f5c\u548c\u56e2\u961f\u63d0\u4f9b\u4fe1\u606f\u3002 Chris Nokleberg\u3001Brad Hawkes - \u6700\u4f73\u5b9e\u8df5\uff1a\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6 \u867d\u7136\u6846\u67b6\u662f\u4e00\u79cd\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u4f46\u5b83\u4eec\u4e5f\u6709\u4e00\u4e9b\u7f3a\u70b9\uff0c\u53ef\u80fd\u5e76\u975e\u5bf9\u6240\u6709\u7ec4\u7ec7\u90fd\u6709\u610f\u4e49\u3002\u6846\u67b6\u7ef4\u62a4\u8005\u9700\u8981\u63d0\u4f9b\u6807\u51c6\u5316\u548c\u660e\u786e\u5b9a\u4e49\u7684\u884c\u4e3a\uff0c\u540c\u65f6\u53c8\u4e0d\u80fd\u8fc7\u4e8e\u89c4\u8303\u3002\u7136\u800c\uff0c\u5f53\u6846\u67b6\u8fbe\u5230\u6b63\u786e\u7684\u5e73\u8861\u65f6\uff0c\u5b83\u4eec\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u5927\u91cf\u7684\u751f\u4ea7\u529b\u63d0\u5347\u3002\u6846\u67b6\u7684\u5e7f\u6cdb\u4f7f\u7528\u63d0\u4f9b\u7684\u4e00\u81f4\u6027\u5bf9\u5176\u4ed6\u56e2\u961f\uff08\u5982 SRE \u548c\u5b89\u5168\u6027\uff09\u6765\u8bf4\u662f\u4e00\u4e2a\u798f\u97f3\uff0c\u8fd9\u4e9b\u56e2\u961f\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u8d28\u91cf\u6709\u65e2\u5f97\u5229\u76ca\u3002\u6b64\u5916\uff0c\u6846\u67b6\u7684\u7ed3\u6784\u4e3a\u6784\u5efa\u66f4\u9ad8\u7ea7\u522b\u7684\u62bd\u8c61\uff08\u4f8b\u5982\u5fae\u670d\u52a1\u5e73\u53f0\uff09\u63d0\u4f9b\u4e86\u57fa\u7840\uff0c\u8fd9\u4e3a\u7cfb\u7edf\u67b6\u6784\u548c\u81ea\u52a8\u5316\u5e26\u6765\u4e86\u65b0\u7684\u673a\u4f1a\u3002\nJ. Paul Reed - \u8d85\u8d8a Fix-it \u8dd1\u6b65\u673a \u9274\u4e8e\u4eba\u7c7b\u5bf9\u5b89\u5168\u793e\u4f1a\u5b66\u56e0\u7d20\u7684\u7814\u7a76\u5df2\u6709\u8fd1\u4e00\u4e2a\u4e16\u7eaa\u7684\u5386\u53f2\uff0c\u6280\u672f\u884c\u4e1a\u7684\u4e8b\u6545\u540e\u5206\u6790\u5b9e\u8df5\u4ee5\u53ca\u6211\u4eec\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528\u8fd9\u4e9b\u5b9e\u8df5\u4ea7\u751f\u7684\u4eba\u5de5\u5236\u54c1\u4ecd\u7136\u5904\u4e8e\u4ed6\u4eec\u7684\u5e7c\u5e74\u3002\u56e0\u6b64\uff0c\u4e0d\u8981\u5bf9\u8fd9\u4e9b\u5b9e\u8df5\u4e2d\u7684\u8bb8\u591a\u5982\u6b64\u76f8\u4f3c\u611f\u5230\u60ca\u8bb6\uff0c\u7528\u4e8e\u89e3\u6790\u548c\u7406\u89e3\u4e8b\u4ef6\u548c\u4e2d\u65ad\u7684\u8ba4\u77e5\u548c\u793e\u4f1a\u6a21\u578b\u5f88\u5c11\u5e76\u4e14\u5728\u8fd0\u8425\u7cbe\u795e\u4e2d\u5f97\u5230\u5de9\u56fa\uff0c\u5e76\u4e14\u4ece\u4e8b\u4ef6\u540e\u5206\u6790\u4e2d\u5bfb\u6c42\u7684\u526f\u4ea7\u54c1\u662f\u8fdc\u8fdc\u4e13\u6ce8\u4e8e\u8865\u6551\u9879\u76ee\u548c\u9884\u9632\u3002", "note_en": "August 15, 2012   Volume 10, issue 8        Thirteen years ago, Eric Raymond&#39;s book  The Cathedral and the Bazaar (O&#39;Reilly Media, 2001) redefined our vocabulary and all but promised an end to the waterfall model and big software companies, thanks to the new grass-roots open source software development movement. I found the book thought provoking, but it did not convince me. On the other hand, being deeply involved in open source, I couldn&#39;t help but think that it would be nice if he was right.\n The book I brought to the beach house this summer is also thought provoking, much more so than Raymond&#39;s (which it even mentions rather positively): Frederick P. Brooks&#39;s  The Design of Design (Addison-Wesley Professional, 2010). As much as I find myself nodding in agreement and as much as I enjoy Brooks&#39;s command of language and subject matter, the book also makes me sad and disappointed.\n Thirteen years ago also marks the apogee of the dot-com euphoria, where every teenager was a Web programmer and every college dropout had a Web startup. I had genuine fun trying to teach some of those greenhorns about the good old-fashioned tricks of the trade\u2014test-restoring backups, scripting operating-system installs, version control, etc. Hindsight, of course, is 20/20 (i.e., events may have been less fun than you remember), and there is no escaping that the entire dot-com era was a disaster for IT/CS in general and for software quality and Unix in particular.\n I have not seen any competent analysis of how much bigger the IT industry became during the dot-com years. My own estimate is that\u2014counted in the kinds of jobs that would until then have been behind the locked steel doors of the IT department\u2014our trade grew by two orders of magnitude, or if you prefer, by more than 10,000 percent.\n Getting hooked on computers is easy\u2014almost anybody can make a program work, just as almost anybody can nail two pieces of wood together in a few tries. The trouble is that the market for two pieces of wood nailed together\u2014inexpertly\u2014is fairly small outside of the &#34;proud grandfather&#34; segment, and getting from there to a decent set of chairs or fitted cupboards takes talent, practice, and education. The extra 9,900 percent had neither practice nor education when they arrived in our trade, and before they ever had the chance to acquire it, the party was over and most of them were out of a job. I will charitably assume that those who managed to hang on were the most talented and most skilled, but even then there is no escaping that as IT professionals they mostly sucked because of their lack of ballast.\n The bazaar meme advocated by Raymond, &#34;Just hack it,&#34; as opposed to the carefully designed cathedrals of the pre-dot-com years, unfortunately did, not die with the dot-com madness, and today Unix is rapidly sinking under its weight.\n I updated my laptop. I have been running the development version of FreeBSD for 18 years straight now, and compiling even my Spartan work environment from source code takes a full day, because it involves trying to make sense and architecture out of Raymond&#39;s anarchistic software bazaar.\n At the top level, the FreeBSD ports collection is an attempt to create a map of the bazaar that makes it easy for FreeBSD users to find what they need. In practice this map consists, right now, of 22,198 files that give a summary description of each stall in the bazaar\u2014a couple of lines telling you roughly what that stall offers and where you can read more about it. Also included are 23,214 Makefiles that tell you what to do with the software you find in each stall. These Makefiles also try to inform you of the choices you should consider, which options to choose, and what would be sensible defaults for them. The map also conveniently comes with 24,400 patch files to smooth over the lack of craftsmanship of many of the wares offered, but, generally, it is lack of portability that creates a need for these patch files.\n Finally, the map helpfully tells you that if you want to have www/firefox, you will first need to get devel/nspr, security/nss, databases/sqlite3, and so on. Once you look up those in the map and find their dependencies, and recursively look up their dependencies, you will have a shopping list of the 122 packages you will need before you can get to www/firefox.\n Modularity and code reuse are, of course, A Good Thing. Even in the most trivially simple case, however, the CS/IT dogma of code reuse is totally foreign in the bazaar: the software in the FreeBSD ports collection contains at least 1,342 copied and pasted cryptographic algorithms.\n If that resistance/ignorance of code reuse had resulted in self-contained and independent packages of software, the price of the code duplication might actually have been a good tradeoff for ease of package management. But that was not the case: the packages form a tangled web of haphazard dependencies that results in much code duplication and waste.\n Here is one example of an ironic piece of waste: Sam Leffler&#39;s graphics/libtiff is one of the 122 packages on the road to www/firefox, yet the resulting Firefox browser does not render TIFF images. For reasons I have not tried to uncover, 10 of the 122 packages need Perl and seven need Python; one of them, devel/glib20, needs both languages for reasons I cannot even imagine.\n Further down the shopping list are repeated applications of the Peter Principle, the idea that in an organization where promotion is based on achievement, success, and merit, that organization&#39;s members will eventually be promoted beyond their level of ability. The principle is commonly phrased, &#34;Employees tend to rise to their level of incompetence.&#34; Applying the principle to software, you will find that you need three different versions of the make program, a macroprocessor, an assembler, and many other interesting packages. At the bottom of the food chain, so to speak, is libtool, which tries to hide the fact that there is no standardized way to build a shared library in Unix. Instead of standardizing how to do that across all Unixen\u2014something that would take just a single flag to the  ld(1) command\u2014the Peter Principle was applied and made it libtool&#39;s job instead. The Peter Principle is indeed strong in this case\u2014the source code for devel/libtool weighs in at 414,740 lines. Half that line count is test cases, which in principle is commendable, but in practice it is just the Peter Principle at work: the tests elaborately explore the functionality of the complex solution for a problem that should not exist in the first place. Even more maddening is that 31,085 of those lines are in a single unreadably ugly shell script called configure. The idea is that the configure script performs approximately 200 automated tests, so that the user is not burdened with configuring libtool manually. This is a horribly bad idea, already much criticized back in the 1980s when it appeared, as it allows source code to pretend to be portable behind the veneer of the configure script, rather than actually having the quality of portability to begin with. It is a travesty that the configure idea survived.\n The 1980s saw very different Unix implementations: Cray-1s with their 24-bit pointers, Amdahl UTS mainframe Unix, a multitude of more or less competently executed SysV+BSD mashups from the minicomputer makers, the almost\u2014but not quite\u2014Unix shims from vendors such as Data General, and even the genuine Unix clone Coherent from the paint company Mark Williams.\n The configure scripts back then were written by hand and did things like figure out if this was most like a BSD- or a SysV-style Unix, and then copied one or the other Makefile and maybe also a .h file into place. Later the configure scripts became more ambitious, and as an almost predictable application of the Peter Principle, rather than standardize Unix to eliminate the need for them, somebody wrote a program, autoconf, to write the configure scripts.\n Today&#39;s Unix/Posix-like operating systems, even including IBM&#39;s z/OS mainframe version, as seen with 1980 eyes are identical; yet the 31,085 lines of configure for libtool still check if  &lt;sys/stat.h&gt; and  &lt;stdlib.h&gt; exist, even though the Unixen, which lacked them, had neither sufficient memory to execute libtool nor disks big enough for its 16-MB source code.\n  Well, autoconf, for reasons that have never made sense, was written in the obscure M4 macro language, which means that the actual tests look like this:\n ## Whether `make&#39; supports order-only prerequisites.  AC_CACHE_CHECK([whether ${MAKE-make} supports order-only prerequisites],  \u00a0 [lt_cv_make_order_only],  \u00a0 [mkdir conftest.dir  \u00a0 \u00a0cd conftest.dir  \u00a0 \u00a0touch b  \u00a0 \u00a0touch a  cat &gt;confmk &lt;&lt; &#39;END&#39;  a: b | c  a b c:  \u00a0 \u00a0 \u00a0 \u00a0touch $[]@  END  \u00a0 touch c  \u00a0 if ${MAKE-make} -s -q -f confmk &gt;/dev/null 2&gt;&amp;1; then  \u00a0 \u00a0 lt_cv_make_order_only=yes  \u00a0 else  \u00a0 \u00a0 lt_cv_make_order_only=no  \u00a0 fi  \u00a0 cd ..  \u00a0 rm -rf conftest.dir  ])  if test $lt_cv_make_order_only = yes; then  \u00a0 ORDER=&#39;|&#39;  else  \u00a0 ORDER=&#39;&#39;  fi  AC_SUBST([ORDER])\n Needless to say, this is more than most programmers would ever want to put up with, even if they had the skill, so the input files for autoconf happen by copy and paste, often hiding behind increasingly bloated standard macros covering &#34;standard tests&#34; such as those mentioned earlier, which look for compatibility problems not seen in the past 20 years.\n This is probably also why libtool&#39;s configure probes no fewer than 26 different names for the Fortran compiler my system does not have, and then spends another 26 tests to find out if each of these nonexistent Fortran compilers supports the -g option.\n That is the sorry reality of the bazaar Raymond praised in his book: a pile of old festering hacks, endlessly copied and pasted by a clueless generation of IT &#34;professionals&#34; who wouldn&#39;t recognize sound IT architecture if you hit them over the head with it. It is hard to believe today, but under this embarrassing mess lies the ruins of the beautiful cathedral of Unix, deservedly famous for its simplicity of design, its economy of features, and its elegance of execution. ( Sic transit gloria mundi, etc.)\n One of Brooks&#39;s many excellent points is that quality happens only if somebody has the responsibility for it, and that &#34;somebody&#34; can be no more than one single person\u2014with an exception for a dynamic duo. I am surprised that Brooks does not cite Unix as an example of this claim, since we can pinpoint with almost surgical precision the moment that Unix started to fragment: in the early 1990s when AT&amp;T spun off Unix to commercialize it, thereby robbing it of its architects.\n More than once in recent years, others have reached the same conclusion as Brooks. Some have tried to impose a kind of sanity, or even to lay down the law formally in the form of technical standards, hoping to bring order and structure to the bazaar. So far they have all failed spectacularly, because the generation of lost dot-com  wunderkinder in the bazaar has never seen a cathedral and therefore cannot even imagine why you would want one in the first place, much less what it should look like. It is a sad irony, indeed, that those who most need to read it may find  The Design of Design entirely incomprehensible. But to anyone who has ever wondered whether using m4 macros to configure autoconf to write a shell script to look for 26 Fortran compilers in order to build a Web browser was a bit of a detour, Brooks offers well-reasoned hope that there can be a better way.\n   Poul-Henning Kamp (  [email\u00a0protected]) has programmed computers for 26 years and is the inspiration behind  bikeshed.org. His software has been widely adopted as under-the-hood building blocks in both open source and commercial products. His most recent project is the Varnish HTTP accelerator, which is used to speed up large Web sites such as Facebook.\n  Originally published in Queue vol. 10, no. 8\u2014 see this item in the  ACM Digital Library\n Related: Jo\u00e3o Varaj\u00e3o -   Software Development in Disruptive Times In this project, the challenge was to &#34;deploy software faster than the coronavirus spread.&#34; In a project with such peculiar characteristics, several factors can influence success, but some clearly stand out: top management support, agility, understanding and commitment of the project team, and the technology used. Conventional development approaches and technologies would simply not be able to meet the requirements promptly.\n  Nicole Forsgren, Margaret-Anne Storey, Chandra Maddila, Thomas Zimmermann, Brian Houck, Jenna Butler -   The SPACE of Developer Productivity Developer productivity is about more than an individual&#39;s activity levels or the efficiency of the engineering systems relied on to ship software, and it cannot be measured by a single metric or dimension. The SPACE framework captures different dimensions of productivity, and here we demonstrate how this framework can be used to understand productivity in practice and why using it will help teams better understand developer productivity and create better measures to inform their work and teams.\n  Chris Nokleberg, Brad Hawkes -   Best Practice: Application Frameworks While frameworks can be a powerful tool, they have some disadvantages and may not make sense for all organizations. Framework maintainers need to provide standardization and well-defined behavior while not being overly prescriptive. When frameworks strike the right balance, however, they can offer large developer productivity gains. The consistency provided by widespread use of frameworks is a boon for other teams such as SRE and security that have a vested interest in the quality of applications. Additionally, the structure of frameworks provides a foundation for building higher-level abstractions such as microservices platforms, which unlock new opportunities for system architecture and automation.\n  J. Paul Reed -   Beyond the Fix-it Treadmill Given that humanity\u2019s study of the sociological factors in safety is almost a century old, the technology industry\u2019s post-incident analysis practices and how we create and use the artifacts those practices produce are all still in their infancy. So don\u2019t be surprised that many of these practices are so similar, that the cognitive and social models used to parse apart and understand incidents and outages are few and cemented in the operational ethos, and that the byproducts sought from post-incident analyses are far-and-away focused on remediation items and prevention.", "posttime": "2021-08-02 22:09:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ff7\u5931,lost,unix", "title": "\u8ff7\u5931\u5728\u96c6\u5e02\u4e0a\u7684\u4e00\u4ee3\u4eba (2012)", "title_en": "A Generation Lost in the Bazaar (2012)", "transed": 1, "url": "https://queue.acm.org/detail.cfm?id=2349257", "via": "", "real_tags": ["\u8ff7\u5931", "lost", "unix"]}, {"category": "", "categoryclass": "", "imagename": "d446379b69c326ebf99306a05773432d.jpeg", "infoid": 1071174, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u60f3\u6cd5\u662f\uff1a\u5982\u679c\u60a8\u6b63\u5728\u6784\u5efa\u7f51\u7ad9\uff0c\u5219\u4e0d\u9700\u8981 React\uff08\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff09\u3002\u6211\u5df2\u7ecf\u5efa\u7acb\u7f51\u7ad9\u8d85\u8fc7\u4e5d\u5e74\u4e86\u3002\u968f\u7740\u6211\u7684\u7ecf\u9a8c\u8d8a\u6765\u8d8a\u4e30\u5bcc\uff0c\u6211\u4f7f\u7528\u7684\u5e93\u548c\u6846\u67b6\u8d8a\u6765\u8d8a\u5c11\uff0c\u5e76\u4f9d\u8d56\u4e8e\u65e7\u7684 HTML\u3001CSS \u548c vanilla JavaScript\u3002\u6211\u8ba4\u4e3a\u4f60\u5e94\u8be5\u8003\u8651\u8fd9\u6837\u505a\u3002\u81ea\u4ece React \u767b\u4e0a\u821e\u53f0\u4ee5\u6765\uff0c\u6211\u4e00\u76f4\u5728\u542c\u3001\u8bfb\u3001\u770b\u5b83\u6709\u591a\u68d2\u3002\u6211\u66fe\u51e0\u6b21\u5c1d\u8bd5\u5b66\u4e60\u5b83\uff0c\u4f46\u6bcf\u6b21\u90fd\u5931\u8d25\u4e86\u3002\u516c\u5e73\u5730\u8bf4\uff0c\u6211\u4e0d\u4e86\u89e3\u5b83\uff0c\u6240\u4ee5\u6211\u4ec0\u81f3\u65e0\u6cd5\u5410\u69fd\u5b83\u7684\u529f\u80fd\u3001\u7f3a\u70b9\u6216\u7f3a\u9677\u3002\u6211\u53ef\u4ee5\u5486\u54ee\u7684\u662f\u7092\u4f5c\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u7ecf\u8fc7\u8fd9\u4e48\u591a\u5e74\uff0c\u5b83\u751a\u81f3\u90fd\u4e0d\u662f\u7092\u4f5c\u3002\u8fd9\u662f\u4e00\u79cd\u5fc5\u8981\u7684\u90aa\u6076\u3002\u5f53\u7136\uff0c\u6211\u5728\u8fd9\u91cc\u5938\u5927\u5176\u8bcd\uff0c\u4f46\u4e5f\u8bb8\u4e0d\u662f\u3002\u6211\u89c9\u5f97\u524d\u7aef\u5f00\u53d1\u4eba\u5458\u7684 10 \u4e2a\u62db\u8058\u5e7f\u544a\u4e2d\u6709 9 \u4e2a\u63d0\u5230\u4e86 React\u3002\u6211\u4e0d\u660e\u767d\u3002\u5982\u679c\u6211\u5e94\u8be5\u4ece\u4e8b\u6784\u5efa\u7f51\u7ad9\u7684\u5de5\u4f5c\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u9700\u8981\u4f7f\u7528 React\uff1f\u96c7\u4e3b\u662f\u5426\u62c5\u5fc3\u5982\u679c\u60a8\u4e0d\u4e86\u89e3 React\uff0c\u60a8\u5c06\u65e0\u6cd5\u5236\u4f5c\u7740\u9646\u9875\uff1f\u5728\u521b\u5efa\u65b0\u5e03\u5c40\u6216\u6a21\u677f\u65f6\uff0c\u4e86\u89e3 React \u4f1a\u5e2e\u52a9\u60a8\u89e3\u51b3\u4efb\u4f55\u95ee\u9898\u5417\uff1f\u6211\u60f3\u4e0d\u51fa\u7f51\u7ad9\u7684\u4efb\u4f55\u90e8\u5206\u9700\u8981 React\u3002\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u8ba9\u6211\u610f\u8bc6\u5230\u6211\u7684\u65e5\u5e38\u5de5\u4f5c\u4e0d\u9700\u8981\u6846\u67b6\u3002\n\u96c7\u4e3b\u4e0d\u5e94\u5c06 React \u6dfb\u52a0\u5230\u6bcf\u4e2a\u524d\u7aef\u62db\u8058\u5e7f\u544a\u4e2d\uff0c\u800c\u5e94\u5f3a\u8c03 HTML\u3001CSS\u3001JavaScript \u548c\u53ef\u8bbf\u95ee\u6027\u6280\u80fd\u3002\u8fd9\u56db\u4e2a\u670b\u53cb\u662f\u60a8\u4f7f\u7f51\u7ad9\u8868\u73b0\u826f\u597d\u3001\u83b7\u5f97\u53ef\u9760\u7684 SEO \u5206\u6570\u5e76\u5141\u8bb8\u6bcf\u4e2a\u7528\u6237\u6d88\u8d39\u5185\u5bb9\u7684\u552f\u4e00\u6761\u4ef6\u3002 Brad Frost \u5199\u4e86\u5173\u4e8e\u524d\u7aef\u7684\u6587\u7ae0\u3002 Chris Coyier \u5199\u4e86\u5173\u4e8e\u5de8\u5927\u9e3f\u6c9f\u7684\u6587\u7ae0\u3002\u6211\u540c\u610f\u4ed6\u4eec\u4e24\u4e2a\uff0c\u4f46\u6211\u4f1a\u505a\u51fa\u4ee5\u4e0b\u533a\u522b\uff1a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u548c\u7f51\u7ad9\u5f00\u53d1\u4eba\u5458\u3002\u6211\u5904\u4e8e\u4e0d\u9700\u8981\u7533\u8bf7\u65b0\u804c\u4f4d\u548c\u7ecf\u5e38\u9009\u62e9\u96c7\u4e3b\u7684\u60c5\u51b5\uff0c\u4f46\u6211\u7ecf\u5e38\u5173\u6ce8\u62db\u8058\u5e7f\u544a\u3002\u6211\u540c\u60c5\u90a3\u4e9b\u80fd\u591f\u6784\u5efa\u53ef\u9760\u7f51\u7ad9\u4f46\u7531\u4e8e\u7f3a\u4e4f React \u6280\u80fd\u800c\u96be\u4ee5\u627e\u5230\u5de5\u4f5c\u7684\u5f00\u53d1\u4eba\u5458\u3002\u6211\u77e5\u9053\u81f3\u5c11\u6709\u4e00\u4e2a\u4eba\u5982\u679c\u4e0d\u7ecf\u5e38\u5217\u51fa React \u6280\u80fd\u4f1a\u5f88\u611f\u6fc0\u2014\u2014\u6211\u7684\u4e00\u4e2a\u670b\u53cb\uff08\u548c\u6211\u7684\u5b66\u5458\uff09\uff0c\u8fd9\u4e9b\u5929\u6211\u548c\u4ed6\u5171\u7528\u4e00\u4e2a\u529e\u516c\u5ba4\u3002\u6211\u63d0\u51fa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5982\u679c\u5de5\u4f5c\u662f\u5173\u4e8e\u6784\u5efa\u7f51\u7ad9\uff0c\u9664\u975e\u7edd\u5bf9\u5fc5\u8981\uff0c\u5426\u5219\u8bf7\u505c\u6b62\u5c06 React \u4f5c\u4e3a\u5fc5\u9700\u6280\u80fd\u3002\u4f7f\u7528\u7f51\u7ad9\u5f00\u53d1\u4eba\u5458\u672f\u8bed\u4e5f\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u4e86\u89e3 React \u53ea\u4f1a\u8ba9\u4f60\u6210\u4e3a\u66f4\u597d\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u4f60\u4e0d\u5e94\u8be5\u5b66\u4e60\u5b83\u3002\u4f46\u662f\uff0c\u6211\u662f\u8bf4\uff0c\u5982\u679c\u60a8\u7684\u76ee\u6807\u662f\u6784\u5efa\u7f51\u7ad9\uff0c\u5219\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u5b83\u3002\u6211\u5e0c\u671b\u66f4\u591a\u7684\u4eba\u80fd\u591f\u610f\u8bc6\u5230 HTML\u3001CSS \u548c JavaScript \u7684\u5f3a\u5927\u529f\u80fd\uff0c\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u6784\u5efa\u7f51\u7ad9\u6240\u9700\u7684\u6700\u591a\u529f\u80fd\u3002\u901a\u5e38\u8d8a\u7b80\u5355\u8d8a\u597d\u3002", "note_en": "Here\u2019s what I think: if you are building websites, you don\u2019t need React (in most cases).\n I have been building websites for over nine years now. As I get more experienced, I use fewer libraries and frameworks and rely on good old HTML, CSS, and vanilla JavaScript. I think you should consider doing the same.\n  Ever since React came to the stage, I\u2019ve been hearing, reading, and watching how great it is. I had a few attempts to learn it, but I failed every time. It is fair to say that I don\u2019t understand it, so I cannot even rant about its features, shortcomings, or flaws.\n What I can rant about is the hype. I mean, it\u2019s not even hype after all these years. It is a necessary evil. Of course, I am exaggerating here, but maybe not.\n I feel like 9 out of 10 job ads for a frontend developer mention React.\n I don\u2019t get it. Why would I need to use React if I am supposed to work on building websites? Are employers afraid that if you don\u2019t know React that you wouldn\u2019t be able to make a landing page? Would knowing React help you solve any problems when creating a new layout or template? I cannot think of any part of the website that would require React.\n All these questions made me realize that I don\u2019t need frameworks for my everyday work.\n  Instead of adding React to every frontend job ad, employers should emphasize HTML, CSS, JavaScript, and accessibility skills. These four amigos are the only thing you need to make websites perform well, achieve a solid SEO score, and allow every user to consume the content.\n Brad Frost wrote about  front-of-the-frontend. Chris Coyier wrote about  the great divide. I agree with both of them, but I would make the following distinction: web app developer and website developer.\n    I am in a situation where I don\u2019t need to apply to new positions and choose my employer often, but I keep my eye on job ads frequently. I sympathize with developers who are capable of building solid websites but struggle to find a job because of the lack of React skills. I know at least one person who would be thankful if React skill wouldn\u2019t be listed so often \u2014 a friend of mine (and my mentee) with whom I share the office these days.\n I propose a simple solution: if the job is about building sites, please stop adding React as a required skill unless absolutely necessary. It might be helpful to use the  website developer term, too.\n  Knowing React could only make you a better developer, and I am not saying you shouldn\u2019t learn it. However, I am saying that it is not needed in most cases if your goal is to build websites.\n I hope more people would realize how powerful HTML, CSS, and JavaScript are and that these come with the most features that you\u2019ll ever need for building a website. Simpler is usually better.", "posttime": "2021-08-02 22:09:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "react,\u7f51\u7ad9", "title": "\u4f60\u4e0d\u9700\u8981 React \u6765\u6784\u5efa\u7f51\u7ad9", "title_en": "You don\u2019t need React for building websites", "transed": 1, "url": "https://www.silvestar.codes/articles/you-don-t-need-react-for-building-websites/", "via": "", "real_tags": ["react", "\u7f51\u7ad9"]}, {"category": "", "categoryclass": "", "imagename": "ed799a95626171f670537afca2f5caeb.png", "infoid": 1071173, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Clojure \u662f\u4e00\u79cd\u51fa\u8272\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u56e0\u4e3a\u5b83\u5177\u6709\u529f\u80fd\u6027\u3001\u7f3a\u4e4f\u5bf9\u8c61/\u5bf9\u539f\u59cb\u503c\u7684\u5173\u6ce8\u4ee5\u53ca\u901a\u8fc7\u5176\u65e0\u7f1d Java \u4e92\u64cd\u4f5c\u63d0\u4f9b\u7684\u5e9e\u5927 JVM \u751f\u6001\u7cfb\u7edf \u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u76f8\u6bd4\uff0cClojure \u5de5\u7a0b\u5e08\u7684\u62db\u8058\u548c\u6784\u5efa\u5de5\u7a0b\u56e2\u961f\u5177\u6709\u6311\u6218\u6027\u7f3a\u4e4f\u77e5\u540d\u5ea6\uff0c\u4e5f\u7f3a\u4e4f\u5927\u91cf\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5de5\u7a0b\u5e08 \u5728\u4e3b\u8981\u4e0e Ruby \u5408\u4f5c\u591a\u5e74\u540e\uff0c\u6211\u6765\u5230\u4e86 Nanit\u3002\u90a3\u65f6\u6211\u5e76\u4e0d\u771f\u6b63\u4e86\u89e3 Clojure\uff0c\u6240\u4ee5\u5728\u6211\u7684\u7b2c\u4e00\u9636\u6bb5\uff0c\u6211\u4e3b\u8981\u505a Ruby \u5de5\u4f5c\u4ee5\u63d0\u4f9b\u5feb\u901f\u4ef7\u503c\u3002 Nanit \u7684\u7814\u53d1\u9ad8\u7ea7\u526f\u603b\u88c1 Chen \u5df2\u7ecf\u5728 Clojure \u4e2d\u5b9e\u73b0\u4e86\u4e00\u4e9b\u670d\u52a1\uff0c\u8fd9\u5c31\u662f\u6211\u5982\u4f55\u5c06 Clojure \u4f5c\u4e3a\u4e00\u79cd\u8bed\u8a00\u5f15\u5165\u7684\u3002\u4ece\u90a3\u4ee5\u540e 6 \u5e74\u591a\u8fc7\u53bb\u4e86\uff0c\u4eca\u5929 Clojure \u662f\u6211\u5de5\u5177\u7bb1\u4e2d\u6700\u5f3a\u5927\u7684\u5de5\u5177\u4e4b\u4e00\uff0c\u4e5f\u662f\u6211\u89c9\u5f97\u6700\u9ad8\u6548\u7684\u8bed\u8a00\u3002\u5728\u8fd9\u4e9b\u5e74\u91cc\uff0cNanit \u7684\u540e\u7aef\u56e2\u961f\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff0c\u5173\u4e8e\u9009\u62e9 Clojure \u4f5c\u4e3a\u6211\u4eec\u4e3b\u8981\u7f16\u7a0b\u8bed\u8a00\u7684\u95ee\u9898\u4e00\u518d\u51fa\u73b0\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u7f3a\u4e4f\u7ecf\u9a8c\u4e30\u5bcc\u7684 Clojure \u5de5\u7a0b\u5e08\uff0c\u8fd9\u5f71\u54cd\u4e86\u62db\u8058\u5e76\u5f15\u5165\u4e86\u66f4\u957f\u7684\u5165\u804c\u6d41\u7a0b\uff0c\u76f4\u5230\u65b0\u5de5\u7a0b\u5e08\u80fd\u591f\u5de5\u4f5c\u4e3a\u6b62\u3002\u5f53\u6211\u8bd5\u56fe\u4e3a\u8fd9\u4e2a\u95ee\u9898\u63d0\u4f9b\u7b54\u6848\u65f6\uff0c\u6211\u603b\u662f\u89c9\u5f97\u6211\u5fc5\u987b\u56de\u5fc6\u6211\u7684\u60f3\u6cd5\u5e76\u5c06\u5b83\u4eec\u7ec4\u7ec7\u6210\u8fde\u8d2f\u7684\u8bba\u70b9\uff0c\u5c3d\u7ba1\u6211\u4e00\u76f4\u5f88\u6e05\u695a Clojure \u7684\u4f18\u52bf\u3002\u6211\u51b3\u5b9a\u6709\u4e00\u5929\u6211\u4f1a\u5728\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u8868\u8fbe\u6211\u5bf9 Clojure \u7684\u770b\u6cd5\u3002\u8fd9\u4e00\u5929\u5df2\u7ecf\u5230\u6765:) \u6211\u603b\u662f\u559c\u6b22\u8bf4\uff0c\u5c3d\u7ba1\u6211\u5df2\u7ecf\u4f7f\u7528 Clojure \u5de5\u4f5c\u4e86\u4e94\u5e74\u591a\uff0c\u4f46\u6211\u7edd\u4e0d\u662f\u201cClojure \u4e13\u5bb6\u201d\u3002\u56e0\u4e3a\u6211\u8ba4\u4e3a\u81ea\u5df1\u662f\u4e00\u4e2a\u503e\u5411\u4e8e\u6df1\u5165\u7814\u7a76\u4e3b\u9898\u7684\u4eba\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u8fd9\u66f4\u591a\u5730\u53cd\u6620\u4e86 Clojure \u4f5c\u4e3a\u4e00\u79cd\u8bed\u8a00\u800c\u4e0d\u662f\u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u7684\u6211\u3002\u53ea\u662f\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u76f8\u6bd4\uff0cClojure \u76f8\u5f53\u7b80\u5355\uff0c\u7b80\u5316\u4e00\u4e2a\u4e3b\u9898\uff0c\u4f7f\u4e13\u4e1a\u77e5\u8bc6\u53d8\u5f97\u6df1\u5965\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cClojure \u5141\u8bb8\u60a8\u4ee5\u5f88\u5c11\u7684\u77e5\u8bc6\u5b9e\u73b0\u5f88\u591a\uff0c\u56e0\u4e3a\u8981\u77e5\u9053\u7684\u5e76\u4e0d\u591a\uff0c\u8fd9\u771f\u7684\u5f88\u68d2\u3002\u4e0d\u5e94\u5c06\u7b80\u5355\u4e0e\u8f6f\u5f31\u6df7\u6dc6\u3002\u76f8\u53cd\uff0cClojure \u7684\u7b80\u5355\u6027\u662f\u5b83\u7684\u4e3b\u8981\u4f18\u52bf\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u5b9e\u73b0\u4f7f\u7528\u5176\u4ed6\u8bed\u8a00\uff08\u5982 Ruby\u3001Java \u6216 Python\uff09\u6240\u80fd\u5b9e\u73b0\u7684\u4e00\u5207\uff0c\u800c\u4ee3\u7801\u4e2d\u7684\u5f00\u9500\u548c\u610f\u5916\u590d\u6742\u6027\u66f4\u5c11\u3002\u6211\u60f3\u5c3d\u91cf\u907f\u514d\u201c\u8bed\u8a00\u6218\u4e89\u201d\uff0c\u5f97\u51fa\u4e00\u4e2a\u7edd\u5bf9\u7684\u7ed3\u8bba\uff0c\u5373 Clojure \u662f\u5730\u7403\u4e0a\u6700\u597d\u7684\u8bed\u8a00\u3002 Clojure \u662f\u6211\u5de5\u5177\u7bb1\u4e2d\u7684\u53e6\u4e00\u4e2a\u5de5\u5177\uff0c\u53ef\u80fd\u6bd4\u5176\u4ed6\u7528\u4f8b\u66f4\u9002\u5408\u67d0\u4e9b\u7528\u4f8b\u3002\u76f8\u53cd\uff0c\u6211\u5c06\u5c1d\u8bd5\u5217\u51fa\u4f7f\u6211\u5728\u4f7f\u7528 Clojure \u65f6\u66f4\u8f7b\u677e\u7684\u5ba2\u89c2\u53c2\u6570\u4ee5\u53ca\u4e00\u4e9b\u6211\u5728\u4f7f\u7528 Clojure \u4f5c\u4e3a\u8bed\u8a00\u5728\u6280\u672f\u4e0a\u9047\u5230\u56f0\u96be\u7684\u4e3b\u9898\uff0c\u4ee5\u53ca\u6784\u5efa\u4e00\u4e2a\u4e3b\u8981\u5c06 Clojure \u4f5c\u4e3a\u4ed6\u4eec\u7684\u5de5\u5177\u5b9e\u8df5\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u56e2\u961f\u3002\nClojure \u662f\u4e00\u79cd\u51fd\u6570\u5f0f\u7f16\u7a0b (FP) \u8bed\u8a00\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u8f6f\u4ef6\u5f00\u53d1\u8005\uff0cFP \u6700\u5927\u7684\u4f18\u52bf\u662f\u5927\u90e8\u5206\u4ee3\u7801\u5e93\u90fd\u662f\u7531\u201c\u7eaf\u51fd\u6570\u201d\u7ec4\u6210\u7684\u3002\u7eaf\u51fd\u6570\u6709\u4e24\u4e2a\u7279\u6027\uff0c\u4f7f\u5b83\u4eec\u66f4\u5bb9\u6613\u6d4b\u8bd5\u3001\u91cd\u6784\u548c\u7ec4\u5408\u6210\u66f4\u590d\u6742\u7684\u51fd\u6570\uff1a\u5b83\u4eec\u6ca1\u6709\u526f\u4f5c\u7528\u3002\u526f\u4f5c\u7528\u5305\u62ec\u7f51\u7edc IO\u3001\u78c1\u76d8\u4ea4\u4e92\u6216\u6539\u53d8\u7cfb\u7edf\u72b6\u6001\u3002\u4ed6\u4eec\u7684\u8f93\u51fa\u5b8c\u5168\u4f9d\u8d56\u4e8e\u4ed6\u4eec\u7684\u8bba\u70b9\u3002\u5b83\u4eec\u4e0d\u4f9d\u8d56\u4e8e\u5916\u90e8\u72b6\u6001\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u8fd4\u56de\u503c\u3002\u5f53\u6211\u60f3\u5230\u6211\u5982\u4f55\u82b1\u65f6\u95f4\u521b\u5efa\u8f6f\u4ef6\u65f6\uff0c\u6211\u53ef\u4ee5\u5c06\u5176\u5206\u4e3a 4 \u4e2a\u4e3b\u8981\u6d3b\u52a8\uff1a \u6211\u9605\u8bfb\u73b0\u6709\u4ee3\u7801\u5e76\u5c1d\u8bd5\u7406\u89e3\u5b83 \u6211\u91cd\u6784\u9700\u8981\u91cd\u6784\u7684\u4ee3\u7801 \u6211\u5728\u7f16\u5199\u65b0\u4ee3\u7801\u4e4b\u524d\u8bbe\u8ba1\u65b0\u4ee3\u7801 \u6211\u7528\u6d4b\u8bd5\u7f16\u5199\u65b0\u4ee3\u7801\u2014 \u6b64\u4ee3\u7801\u53ef\u80fd\u91cd\u7528\u4e86\u73b0\u6709\u4ee3\u7801 \u4e0a\u8ff0\u4e24\u4e2a\u7279\u5f81\u7684\u7ec4\u5408\u4f7f\u6211\u66f4\u8f7b\u677e\u5730\u6267\u884c\u4efb\u4f55\u5217\u51fa\u7684\u6d3b\u52a8\uff1a \u7eaf\u51fd\u6570\u4f7f\u4ee3\u7801\u8bbe\u8ba1\u66f4\u5bb9\u6613\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u5f53\u60a8\u7684\u4ee3\u7801\u5e93\u4e3b\u8981\u7531\u7eaf\u51fd\u6570\u7ec4\u6210\u65f6\uff0c\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u8bbe\u8ba1\u8981\u505a\u529f\u80fd\u3002\u60a8\u4e0d\u5fc5\u4f7f\u7528\u63a5\u53e3\u3001\u6269\u5c55\u548c\u5b9e\u73b0\u6765\u6784\u5efa\u7c7b\u5c42\u6b21\u7ed3\u6784\u3002\u4e0d\u9700\u8981\u50cf\u7ee7\u627f\u4e0a\u7684\u7ec4\u5408\u6216\u8bbf\u95ee\u8005\u6a21\u5f0f\u8fd9\u6837\u7684\u9ad8\u7ea7\u8bbe\u8ba1\u6280\u5de7\u3002\u60a8\u4e0d\u5fc5\u4e3a\u591a\u91cd\u7ee7\u627f\u95ee\u9898\u6216\u53ef\u6015\u7684\u83f1\u5f62\u56fe\u627e\u5230\u521b\u9020\u6027\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5728\u8fc7\u53bb\u7684 6 \u5e74\u91cc\uff0c\u6211\u6ca1\u6709\u5904\u7406\u8fc7\u4efb\u4f55\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f46\u6211\u7f16\u5199\u4e86\u7cbe\u5fc3\u5236\u4f5c\u3001\u7ecf\u8fc7\u6d4b\u8bd5\u3001\u53ef\u7ef4\u62a4\u3001\u53ef\u8bfb\u3001\u53ef\u6269\u5c55\u7684\u751f\u4ea7\u7ea7\u4ee3\u7801\uff08\u6216\u8005\u81f3\u5c11\u8fd9\u662f\u6211\u613f\u610f\u76f8\u4fe1\u7684 :)\uff09\u3002\u7eaf\u51fd\u6570\u66f4\u5bb9\u6613\u91cd\u7528\uff1a\u6211\u53ef\u4ee5\u6839\u636e\u9700\u8981\u591a\u6b21\u4f7f\u7528\u7eaf\u51fd\u6570\uff0c\u800c\u4e0d\u5fc5\u8003\u8651\u5b83\u5982\u4f55\u5f71\u54cd\u7cfb\u7edf\uff0c\u56e0\u4e3a\u6ca1\u6709\u4efb\u4f55\u526f\u4f5c\u7528\u3002\u8fd9\u5c31\u50cf\u8ba1\u7b97\u673a\u7f16\u7a0b\u7684 WYSIWYG\u2014\u2014\u51fd\u6570\u9075\u5faa\u5b83\u7684\u4e3b\u4f53\u800c\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u3002\u65e0\u9700\u8003\u8651\u4efb\u4f55\u9690\u85cf\u7684\u8003\u8651\u56e0\u7d20\u3002\u7eaf\u51fd\u6570\u901a\u8fc7\u6d88\u9664\u5fc5\u987b\u8c03\u67e5\u6211\u8981\u91cd\u7528\u7684\u4ee3\u7801\u662f\u5426\u4f1a\u5f71\u54cd\u7cfb\u7edf\u4ee5\u53ca\u5982\u679c\u662f\u7684\u8bdd\u4f1a\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd\u7684\u989d\u5916\u5f00\u9500\u6765\u9f13\u52b1\u4ee3\u7801\u91cd\u7528\u3002\n\u7eaf\u51fd\u6570\u66f4\u6613\u4e8e\u9605\u8bfb\u548c\u7406\u89e3\uff1a\u6bcf\u4e2a\u7eaf\u51fd\u6570\u90fd\u662f\u4e00\u6bb5\u5b64\u7acb\u7684\u3001\u4e00\u81f4\u7684\u548c\u53ef\u9884\u6d4b\u7684\u4ee3\u7801\uff0c\u4ec5\u4f9d\u8d56\u4e8e\u5176\u53c2\u6570\u3002\u60a8\u4e0d\u9700\u8981\u719f\u6089\u6570\u636e\u5e93\u67b6\u6784\u6216 RabbitMQ \u67b6\u6784\u6765\u63a8\u7406\u4ee3\u7801\u2014\u2014\u8fd9\u5b8c\u5168\u662f\u5173\u4e8e\u5728\u51fd\u6570\u4f53\u4e2d\u5b8c\u6210\u7684\u53c2\u6570\u548c\u6570\u636e\u8f6c\u6362\u3002\u7eaf\u51fd\u6570\u66f4\u5bb9\u6613\u6d4b\u8bd5\uff1a\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4f9d\u8d56\u4e8e\u5916\u90e8\u72b6\u6001\uff0c\u6240\u4ee5\u4f60\u6d4b\u8bd5\u51fd\u6570\u6240\u8981\u505a\u7684\u5c31\u662f\u5c06\u5b83\u5e94\u7528\u5230\u5b83\u7684\u53c2\u6570\u4e0a\u3002\u65e0\u9700\u5728\u6570\u636e\u5e93\u4e0a\u521b\u5efa\u5939\u5177\u6216\u6a21\u62df HTTP \u8bf7\u6c42\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u7eaf\u51fd\u6570\u4e0d\u4f1a\u5bf9\u7cfb\u7edf\u5e94\u7528\u4efb\u4f55\u66f4\u6539\uff0c\u56e0\u6b64\u60a8\u53ea\u9700\u6d4b\u8bd5\u8fd4\u56de\u503c\u3002\u7eaf\u51fd\u6570\u66f4\u5bb9\u6613\u91cd\u6784\uff1a\u5b83\u4eec\u7f3a\u4e4f\u5916\u90e8\u4f9d\u8d56\u548c\u65e0\u72b6\u6001\uff0c\u5c06\u5b83\u4eec\u53d8\u6210\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u6784\u5efa\u5757\uff0c\u6613\u4e8e\u66ff\u6362\u548c\u7ec4\u5408\u3002 Clojure \u6ca1\u6709\u201c\u5bf9\u8c61\u201d\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u786e\u5b9e\u5982\u6b64\uff0c\u4f46\u5927\u591a\u6570\u65f6\u5019\u4f60\u4e0d\u4f1a\u89c9\u5f97\u9700\u8981\u8fd9\u4e9b\u3002\u76f8\u53cd\uff0cClojure \u4f9d\u8d56\u4e8e\u539f\u59cb\u503c\u548c\u5b83\u4eec\u7684\u96c6\u5408\uff08\u6570\u7ec4\u3001\u5b57\u5178\u3001\u96c6\u5408\u7b49\uff09\u3002\u6211\u5728 Clojure \u4e2d\u6240\u505a\u7684 99% \u90fd\u662f\u4f7f\u7528\u5305\u542b\u539f\u59cb\u503c\u7684\u6570\u7ec4\u548c\u5b57\u5178\u3002\u6211\u7684\u4ee3\u7801\u4fa7\u91cd\u4e8e\u4e1a\u52a1\u903b\u8f91\u548c\u6570\u636e\u8f6c\u6362\uff0c\u800c\u4e0d\u662f\u63cf\u8ff0\u57df\u53ca\u5176\u5173\u7cfb\u3002\u6bcf\u884c\u4ee3\u7801\u90fd\u5728\u6267\u884c\u4e1a\u52a1\u903b\u8f91\uff0c\u56e0\u6b64\u4e1a\u52a1\u903b\u8f91\u5728\u6574\u4e2a\u4ee3\u7801\u5e93\u4e2d\u975e\u5e38\u7a81\u51fa\u3002\u6211\u4e0d\u5fc5\u719f\u6089\u6570\u767e\u4e2a\u72ec\u7279\u7684\u5bf9\u8c61\u548c\u7f16\u7801\u5230\u5b83\u4eec\u4e2d\u7684\u884c\u4e3a\u624d\u80fd\u6709\u6548\uff1a\u4f20\u5165\u7684 HTTP \u8bf7\u6c42\uff1f\u5b83\u662f\u4e00\u4e2a\u666e\u901a\u7684 Clojure \u5b57\u5178\u3002\u4f60\u60f3\u5f62\u6210\u4e00\u4e2a SQL \u67e5\u8be2\uff1f\u6784\u5efa\u4e00\u4e2a\u5b57\u5178\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 SQL \u5e93\u8fdb\u884c\u683c\u5f0f\u5316\u3002\u60a8\u60f3\u8fd4\u56de HTTP \u54cd\u5e94\u5417\uff1f\u60a8\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u7801\u3001\u6807\u9898\u548c\u6b63\u6587\u952e\u7684\u5b57\u5178\u3002\u60f3\u8981\u4ece RabbitMQ \u961f\u5217\u4e2d\u8bfb\u53d6\u6d88\u606f\uff1f\u662f\u7684\uff0c\u4f60\u731c\u5bf9\u4e86\u2014\u2014\u4f60\u5f97\u5230\u4e86\u4e00\u672c\u5b57\u5178\u3002\u5982\u679c\u60a8\u719f\u6089 Clojure \u5bf9\u5176\u57fa\u672c\u6570\u636e\u7ed3\u6784\uff08\u5982\u5b57\u5178\uff09\u7684\u64cd\u4f5c\uff0c\u60a8\u5c06\u5728 HTTP\u3001SQL\u3001RabbitMQ \u548c\u7cfb\u7edf\u7684\u6bcf\u4e2a\u5176\u4ed6\u7279\u5b9a\u9886\u57df\u90e8\u5206\u4e2d\u53d8\u5f97\u6709\u6548\u3002\u5b83\u5c06\u57df\u4e2d\u6240\u9700\u7684\u590d\u6742\u6027\u548c\u719f\u6089\u7a0b\u5ea6\u964d\u4f4e\u5230\u6700\u4f4e\u8981\u6c42\uff0c\u56e0\u4e3a\u4ece\u8f6f\u4ef6\u65b9\u9762\u6765\u770b\uff0c\u60a8\u6240\u505a\u7684\u53ea\u662f\u91cd\u590d\u6784\u5efa\u3001\u8f6c\u6362\u548c\u79fb\u52a8\u5b57\u5178\u4ece\u4e00\u4e2a\u529f\u80fd\u5230\u53e6\u4e00\u4e2a\u529f\u80fd\u3002 Clojure \u7684\u8bed\u6cd5\u5efa\u7acb\u5728\u5b83\u81ea\u5df1\u7684\u6570\u636e\u7c7b\u578b\u4e4b\u5916\u3002\u8fd9\u79cd\u7279\u6027\u79f0\u4e3a\u540c\u8d28\u6027\u3002\u8d77\u521d\u542c\u8d77\u6765\u5f88\u5947\u602a\uff0c\u4f46\u6211\u4f1a\u5c1d\u8bd5\u8bc1\u660e\uff1a\nClojure \u5411\u91cf\uff08\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\uff09\u770b\u8d77\u6765\u50cf\u8fd9\u6837 [1 2 3 4] Clojure \u5217\u8868\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a (1 2 3 4) \u5982\u60a8\u6240\u89c1\uff0c\u4ee3\u7801\u662f\u4e00\u4e2a Clojure \u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u7b26\u53f7 defn\u3001\u51fd\u6570\u540d\u79f0\uff0c\u7136\u540e\u662f\u53c2\u6570\u5411\u91cf\u3002\u4e3b\u4f53\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u51fd\u6570\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6210\u5458 (+)\uff0c\u540e\u9762\u662f\u53c2\u6570\u3002\u901a\u8fc7\u5b8f\u751f\u6210\u4ee3\u7801\u611f\u89c9\u5f88\u81ea\u7136\u3002\u7531\u4e8e\u6211\u4eec\u5728 Clojure \u4e2d\u6240\u505a\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u662f\u8f6c\u6362\u548c\u751f\u6210\u6709\u5229\u4e8e\u4e1a\u52a1\u903b\u8f91\u7684\u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64\u4f7f\u7528\u76f8\u540c\u7684\u6570\u636e\u7ed3\u6784\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u6765\u751f\u6210\u4ee3\u7801\u51e0\u4e4e\u4e0d\u4f1a\u5f15\u8d77\u6ce8\u610f\u3002\u5b83\u5c06\u60a8\u5fc5\u987b\u719f\u6089\u7684\u7279\u6b8a\u7b26\u53f7\u548c\u5b57\u7b26\u7684\u6570\u91cf\u51cf\u5c11\u5230\u6700\u5c11\u3002\u4ee3\u7801\u548c\u6570\u636e\u5408\u4e8c\u4e3a\u4e00\uff0c\u56e0\u4e3a\u5b83\u4eec\u5171\u4eab\u76f8\u540c\u7684\u6570\u636e\u7ed3\u6784\u3001\u884c\u4e3a\u548c\u8bed\u6cd5\u3002 Clojure \u7684\u5927\u591a\u6570\u503c\u90fd\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u53ef\u4ee5\u9632\u6b62\u7ade\u4e89\u6761\u4ef6\u5e76\u5141\u8bb8\u4ee3\u7801\u4e0d\u53d7\u4e92\u65a5\u9501\u548c\u9501\u7b49\u5171\u4eab\u8bbf\u95ee\u63a7\u5236\u7684\u5f71\u54cd\u3002\u90a3\u4e9b\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u7684\uff08\u4f8b\u5982\u539f\u5b50\uff09\u63d0\u4f9b\u4e86\u64cd\u4f5c\u5b83\u4eec\u5b58\u50a8\u7684\u6570\u636e\u7684\u5b89\u5168\u65b9\u6cd5\u3002 Clojure \u6709\u5927\u91cf\u7528\u4e8e\u5e76\u53d1\u7f16\u7a0b\u7684\u5de5\u5177\uff0c\u79f0\u4e3a clojure.async\u3002\u81f3\u5c11\u4ece\u6211\u7684\u7ecf\u9a8c\u6765\u770b\uff0c\u8fd9\u4e9b\u5de5\u5177\u7684\u4eae\u70b9\u662f Channels\uff0c\u5b83\u5141\u8bb8\u5728\u4e00\u7ec4\u901a\u9053\u4e0a\u8fdb\u884c\u5b89\u5168\u7684\u7ebf\u7a0b\u95f4\u901a\u4fe1\u548c\u9009\u62e9\uff0c\u5c31\u50cf Golang \u7684 select \u6307\u4ee4\u4e00\u6837\u3002 Clojure \u4e0d\u662f\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u56e0\u6b64\uff0c\u5e38\u89c1\u7528\u4f8b\u7f3a\u5c11\u8bb8\u591a\u5e93\u3002\u5e78\u8fd0\u7684\u662f\uff0cClojure \u4e0e Java \u7684\u4e92\u64cd\u4f5c\u662f\u65e0\u7f1d\u7684\uff0c\u56e0\u6b64\u5728\u5b9e\u8df5\u4e2d\uff0cJava \u7684\u5e9e\u5927\u751f\u6001\u7cfb\u7edf\u89e6\u624b\u53ef\u53ca\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u4eab\u53d7\u4f7f\u7528 Clojure \u7684\u4e50\u8da3\uff0c\u4f46\u4e0d\u4f1a\u53d7\u5230\u5176\u7f3a\u4e4f\u6d41\u884c\u5ea6\u548c\u5e93\u7684\u5f71\u54cd\u3002\n\u662f\u7684\uff0cClojure \u5f88\u68d2\uff0c\u4f46\u5c31\u50cf\u6211\u4eec\u5728\u751f\u6d3b\u4e2d\u505a\u51fa\u7684\u5927\u591a\u6570\u51b3\u5b9a\u4e00\u6837\uff0c\u4f7f\u7528 Clojure \u505a\u51fa\u7684\u51b3\u5b9a\u4e5f\u662f\u6743\u8861\u53d6\u820d\u3002 Clojure \u7684\u7b2c\u4e00\u4e2a\u65b9\u9762\u662f JVM\uff0c\u8fd9\u6709 3 \u4e2a\u539f\u56e0\uff1a JVM \u662f\u4e00\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u5185\u5b58\u541e\u566c\u8005\uff0c\u5f88\u96be\u9884\u6d4b\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5185\u5b58\u9700\u6c42\u3002\u6b64\u5916\uff0c\u5b83\u4f3c\u4e4e\u603b\u662f\u9700\u8981\u6bd4\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u66f4\u591a\u7684\u5185\u5b58\u3002\u6211\u786e\u4fe1\u76f8\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u5176\u4ed6\u8fd0\u884c\u65f6\u4f1a\u5360\u7528\u66f4\u5c11\u7684\u5185\u5b58\uff08\u5c3d\u7ba1\u6211\u4ece\u672a\u82b1\u65f6\u95f4\u8bc1\u660e\u8fd9\u4e00\u70b9\uff09\u3002\u8c03\u8bd5\u8fdc\u7a0b\u670d\u52a1\u5668\u4e2d\u7684\u5185\u5b58\u6cc4\u6f0f\u548c\u5806\u5927\u5c0f\u975e\u5e38\u56f0\u96be\u3002\u6211\u4eec\u5c1d\u8bd5\u4e86 VisualVM\uff0c\u4f46\u7531\u4e8e Clojure \u5185\u5b58\u4e3b\u8981\u7531\u539f\u8bed\uff08\u5b57\u7b26\u4e32\u3001\u6574\u6570\u7b49\uff09\u7ec4\u6210\uff0c\u56e0\u6b64\u5f88\u96be\u7406\u89e3\u6b63\u5728\u7d2f\u79ef\u5e94\u7528\u7a0b\u5e8f\u7684\u54ea\u4e9b\u6570\u636e\u4ee5\u53ca\u539f\u56e0\u3002\u6211\u5047\u8bbe\u5728\u57fa\u4e8e Java \u7684\u5e38\u89c1\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5927\u90e8\u5206\u5185\u5b58\u7531 Java \u5bf9\u8c61\u7ec4\u6210\uff0c\u56e0\u6b64\u5185\u5b58\u5206\u6790\u4f1a\u66f4\u5bb9\u6613\u3002\u968f\u7740\u9879\u76ee\u89c4\u6a21\u7684\u589e\u957f\uff0cClojure \u9879\u76ee\u7684\u542f\u52a8\u65f6\u95f4\u53ef\u80fd\u4f1a\u53d8\u5f97\u5f88\u957f\u3002\u5c3d\u7ba1\u6709 GraalVM \u4e4b\u7c7b\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u673a\u4f1a\u5728\u751f\u4ea7\u4e2d\u4f53\u9a8c\u5b83\u4eec\u4ee5\u8bc1\u660e\u5b83\u4eec\u7684\u6210\u719f\u5ea6\u548c\u5065\u58ee\u6027\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4e0d\u662f JVM \u7684\u7c89\u4e1d\uff0c\u4f46\u6211\u786e\u5b9e\u7406\u89e3\u5c06 Clojure \u7684\u8fd0\u884c\u65f6\u5b9a\u4f4d\u5230 JVM \u7684\u51b3\u5b9a\u80cc\u540e\u7684\u539f\u56e0\u3002\u5728\u5927\u578b\u7684\u3001\u4e0d\u719f\u6089\u7684 Clojure \u4ee3\u7801\u5e93\u4e2d\u5de5\u4f5c\u65f6\uff0c\u6211\u53d1\u73b0\u56f0\u96be\u7684\u7b2c\u4e8c\u4e2a\u4e3b\u9898\u662f\u6253\u5b57\u3002 Clojure \u662f\u4e00\u79cd\u52a8\u6001\u8bed\u8a00\uff0c\u5b83\u6709\u5b83\u7684\u4f18\u70b9\uff0c\u4f46\u5f53\u6211\u5076\u7136\u53d1\u73b0\u4e00\u4e2a\u63a5\u6536\u5b57\u5178\u53c2\u6570\u7684\u51fd\u6570\u65f6\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u6765\u627e\u51fa\u5b83\u62e5\u6709\u54ea\u4e9b\u952e\u3002\u6709\u65f6\u6211\u4e0d\u5f97\u4e0d\u5728\u6211\u4eec\u7684\u96c6\u6210\u73af\u5883\u4e2d\u653e\u7f6e\u4e00\u4e2a\u65e5\u5fd7\uff0c\u4ee5\u67e5\u770b\u5b83\u63a5\u6536\u5230\u4ec0\u4e48\u6d88\u606f\u4ee5\u53ca\u8be5\u6d88\u606f\u4e2d\u6709\u54ea\u4e9b\u5b57\u6bb5\u53ef\u4f9b\u6211\u4f7f\u7528\u3002\u6709\u65f6\u6211\u4f1a\u53bb\u6d4b\u8bd5\u8be5\u51fd\u6570\u5e76\u67e5\u627e\u6211\u4eec\u5728\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u7684\u793a\u4f8b\u53c2\u6570\u503c\uff0c\u4f46\u8fd9\u53ef\u80fd\u8fd8\u4e0d\u591f\uff0c\u56e0\u4e3a\u8be5\u5b57\u5178\u4e2d\u53ef\u80fd\u5b58\u5728\u5176\u4ed6\u5b57\u6bb5\u5e76\u4e14\u53ea\u662f\u672a\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u65f6\u523b\uff0c\u56e0\u6b64\u5b83\u4eec\u4e5f\u53ef\u80fd\u4ece\u6d4b\u8bd5\u503c\u4e2d\u4e22\u5931\u3002\u6709\u65f6\u6211\u4f1a\u67e5\u770b\u51fd\u6570\u7684\u8c03\u7528\u7ad9\u70b9\u4ee5\u4e86\u89e3\u4f20\u9012\u4e86\u4ec0\u4e48\u53c2\u6570\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u6784\u5efa\u7684\u3002\u4e5f\u6709\u89e3\u51b3\u65b9\u6848\uff0c\u4f8b\u5982 core.typed\uff0c\u4f46\u6211\u81ea\u5df1\u4ece\u672a\u4f53\u9a8c\u8fc7\u5b83\u4eec\uff0c\u6211\u4e0d\u786e\u5b9a\u5b83\u4eec\u7684\u5168\u9762\u6027\u548c\u53ef\u7528\u6027\u3002\n\u4f7f\u7528 Clojure \u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u662f\u62db\u8058\u548c\u5165\u804c\uff0c\u6211\u5df2\u7ecf\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u524d\u9762\u63d0\u5230\u8fc7\u3002\u62db\u8058\u5f88\u96be\uff0c\u56e0\u4e3a\u73b0\u6709\u7684 Clojure \u5de5\u7a0b\u5e08\u4eba\u6570\u5f88\u5c11\uff0c\u800c\u4e14\u4e00\u4e9b\u5de5\u7a0b\u5e08\u51fa\u4e8e\u804c\u4e1a\u53d1\u5c55\u7684\u8003\u8651\u6545\u610f\u907f\u514d\u4f7f\u7528\u4e0d\u53d7\u6b22\u8fce\u7684\u8bed\u8a00\u3002\u5176\u4ed6\u5de5\u7a0b\u5e08\u83b7\u5f97\u4e86\u7279\u5b9a\u8bed\u8a00\u7684\u4e13\u4e1a\u77e5\u8bc6\uff0c\u5e76\u5e0c\u671b\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e9b\u8bed\u8a00\uff0c\u56e0\u6b64 Clojure \u4e0d\u662f\u4ed6\u4eec\u7684\u9009\u62e9\u3002\u5165\u804c\u8fd8\u9700\u8981\u66f4\u591a\u7684\u5173\u6ce8\u548c\u6307\u5bfc\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u5de5\u7a0b\u5e08\u5bf9 Clojure \u53ca\u5176\u751f\u6001\u7cfb\u7edf\u51e0\u4e4e\u4e00\u65e0\u6240\u77e5\u3002\u5f53 NodeJS \u5de5\u7a0b\u5e08\u52a0\u5165\u516c\u53f8\u65f6\uff0c\u4ed6\u4eec\u5df2\u7ecf\u77e5\u9053 javascript\uff0c\u4ed6\u4eec\u719f\u6089\u751f\u6001\u7cfb\u7edf\uff0c\u4ed6\u4eec\u6709\u81ea\u5df1\u559c\u6b22\u7684 IDE \u548c\u63d2\u4ef6\uff0c\u4ed6\u4eec\u77e5\u9053\u54ea\u4e9b\u5de5\u5177\u53ef\u4ee5\u4f7f\u4ed6\u4eec\u7684\u672c\u5730\u5f00\u53d1\u73af\u5883\u5c3d\u53ef\u80fd\u9ad8\u6548\u3002\u5f53\u5de5\u7a0b\u5e08\u5728\u6ca1\u6709\u5148\u9a8c\u77e5\u8bc6\u7684\u60c5\u51b5\u4e0b\u52a0\u5165\u4f7f\u7528 Clojure \u7684\u7ec4\u7ec7\u65f6\uff0c\u4ed6\u4eec\u5fc5\u987b\u5b66\u4e60\u8be5\u8bed\u8a00\uff0c\u627e\u5230\u4ed6\u4eec\u719f\u6089\u7684 IDE\uff0c\u9002\u5e94\u65b0\u7684\u5f00\u53d1\u6d41\u7a0b\u5e76\u914d\u7f6e\u4ed6\u4eec\u7684\u5f00\u53d1\u73af\u5883\u4ee5\u63d0\u9ad8\u751f\u4ea7\u529b\u3002\u8fd9\u51e0\u4e4e\u5c31\u50cf\u91cd\u65b0\u5b66\u4e60\u7cfb\u978b\u5e26\u4e00\u6837\uff0c\u5e76\u4e14\u5fc5\u987b\u4ece\u73b0\u6709\u5de5\u7a0b\u5e08\u90a3\u91cc\u83b7\u5f97\u9002\u5f53\u7684\u6307\u5bfc\u548c\u53ef\u7528\u6027\u3002 Clojure \u7f3a\u4e4f\u666e\u53ca\u5f15\u5165\u7684\u53e6\u4e00\u4e2a\u6709\u8da3\u95ee\u9898\u662f\uff0c\u65b0\u5de5\u7a0b\u5e08\u5f88\u96be\u5c06 Clojure \u7279\u5b9a\u77e5\u8bc6\u4ece\u5916\u90e8\u5f15\u5165\u516c\u53f8\u5e76\u4e30\u5bcc\u73b0\u6709\u56e2\u961f\u3002\u518d\u6b21\u56de\u5230 NodeJS \u793a\u4f8b\uff0c\u52a0\u5165\u65b0\u56e2\u961f\u7684\u5177\u6709\u4e30\u5bcc\u7ecf\u9a8c\u7684\u5de5\u7a0b\u5e08\u53ef\u80fd\u4f1a\u5f15\u5165\u65b0\u7684\u5de5\u5177/\u5e93/\u5de5\u4f5c\u65b9\u6cd5/\u5f00\u53d1\u6d41\u7a0b\uff0c\u4ed6\u4eec\u5728\u4e4b\u524d\u7684\u516c\u53f8\u4e2d\u83b7\u5f97\u4e86\u4e13\u4e1a\u77e5\u8bc6\u3002\u6ca1\u6709\u7279\u5b9a\u9886\u57df\u7ecf\u9a8c\u7684\u5de5\u7a0b\u5e08\u65e0\u6cd5\u771f\u6b63\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u4e30\u5bcc\u56e2\u961f\uff0c\u56e0\u6b64\u56e2\u961f\u5fc5\u987b\u4f9d\u9760\u81ea\u6211\u5b66\u4e60\u548c\u6539\u8fdb\uff0c\u800c\u4e0d\u662f\u4ece\u5916\u90e8\u5e26\u6765\u77e5\u8bc6\u3002\u6211\u8ba4\u4e3a\u6bcf\u4e2a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u81f3\u5c11\u9700\u8981\u8ba9\u4ed6\u4eec\u81ea\u5df1\u719f\u6089\u4e00\u79cd\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\uff0c\u624d\u80fd\u655e\u5f00\u5fc3\u6249\uff0c\u770b\u5230 OOP \u8303\u5f0f\u4e4b\u5916\u7684\u4e1c\u897f\u3002\u5b66\u4e60 Clojure \u8ba9\u6211\u6000\u7591\u6211\u4ee5\u524d\u4f5c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u5b9e\u8df5\u8fc7\u7684\u4e00\u5207\uff0c\u5e76\u5c31\u6211\u5982\u4f55\u5728\u6b63\u786e\u7684\u65b9\u5411\u4e0a\u82b1\u8d39\u7cbe\u529b\u6765\u4e3a\u6211\u5de5\u4f5c\u7684\u516c\u53f8\u63d0\u4f9b\u4ef7\u503c\u7684\u57fa\u672c\u77e5\u8bc6\u63d0\u51fa\u95ee\u9898\u3002\u6211\u8ba4\u4e3a Clojure \u4f5c\u4e3a\u4e00\u79cd\u6210\u719f\u7684\u3001\u53ef\u7528\u4e8e\u751f\u4ea7\u7684\u3001\u7b80\u5355\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u975e\u5e38\u9002\u5408\u8fdb\u884c\u8fd9\u79cd\u63a2\u7d22\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u4e13\u4e1a\u5730\u4f7f\u7528\u5b83\uff0c\u7528\u4e8e\u4e1a\u4f59\u9879\u76ee\u6216\u6839\u672c\u4e0d\u4f7f\u7528\u5b83\uff0c\u4f46\u662f\u8ba9\u81ea\u5df1\u63a5\u89e6\u8fd9\u79cd\u8bed\u8a00\u7684\u7ecf\u9a8c\u80af\u5b9a\u4f1a\u4e30\u5bcc\u60a8\u5bf9\u7f16\u7a0b\u7684\u770b\u6cd5\u5e76\u4f7f\u60a8\u6210\u4e3a\u66f4\u597d\u7684\u5f00\u53d1\u4eba\u5458\u3002", "note_en": "Clojure is a great programming languages due to its functional nature, lack of objects / concentration on primitive values and the vast JVM eco system available via its seamless Java interop\n Recruiting and building engineering teams of Clojure engineers is challenging compared to other programming languages due to the lack of its popularity and the absence of a large pool of experienced engineers\n  After years of working mainly with Ruby I arrived to Nanit. I didn\u2019t really know Clojure back then, so in my first stages I did mostly Ruby work to provide quick value. Chen, Nanit\u2019s SVP R&amp;D, had already implemented some services in Clojure and that\u2019s how I was introduced to Clojure as a language. More than 6 years have passed since and today Clojure is one of the strongest tools in my toolbox and the language I feel most productive with.\n During these years Nanit\u2019s backend group became larger and the question regarding choosing Clojure as our main programming language rose over and over again mainly due to the lack of experienced Clojure engineers which affected recruiting and introduced a longer onboarding process until a new engineer could be productive. When I tried to provide an answer to this question I always felt like I have to recollect my thoughts and organize them into coherent arguments even though Clojure\u2019s strengths were very clear to me all along. I came to a decision that one day I\u2019ll pour my thoughts about Clojure out on a blog post.  This day has arrived :)\n I always like to say that even though I\u2019ve been working with Clojure for more than half a decade now, I\u2019m in no way a \u201cClojure expert\u201d. Since I consider myself someone that tends to dive deep into topics I think this reflects more on Clojure as a language rather than on me as a software engineer. It\u2019s just that compared to other programming languages, Clojure is quite simple, and simplifying a topic turns expertise to esoteric. In other words, Clojure allows you to achieve a lot with little knowledge since there is not a lot to know, which is really great.\n Simplicity should not be confused with weakness. On the contrary, Clojure\u2019s simplicity is its main strength, as you can achieve everything you could have achieved with other languages like Ruby, Java or Python with less overhead and  accidental complexity in your code.\n I want to try and avoid the \u201clanguage wars\u201d with an absolute conclusion that Clojure is the best language on earth. Clojure is another tool in my toolbox and might fit better to certain use cases than others. Instead I will try to list the objective parameters that made my life easier working with Clojure along with some topics that I\u2019ve had difficulties with both technically with Clojure as a language and building a team of software engineers practicing mainly Clojure as their tool.\n  Clojure is a functional programming (FP) language. For me, as a software developer, FPs biggest advantage is that most of the codebase is composed out of \u201c pure functions\u201d. Pure functions have two traits that make them easier to test, refactor and compose together into more complex functions:\n They are free of side effects. Side effects include network IO, disk interaction or mutating the system state.\n Their output relies solely on their arguments. They are not dependent in external state to compute their return value.\n When I think of how I spend my time creating software I can divide it to 4 main activities:  I  read the existing code and try to  understand it I  refactor code that requires refactoring  I  design new code before I write it I write new code with  tests \u2014 this code probably re-uses existing code\n The combination of the two traits above makes any of the listed activities easier for me:\n Pure functions make code  design easier: In fact, there\u2019s very little design to be done when your codebase consists mostly of pure functions. You don\u2019t have to build class hierarchy with interfaces, extensions and implementations. There\u2019s no need for advanced design tricks like composition over inheritances or the visitor pattern. You don\u2019t have to find creative solutions to the  multiple inheritance problem or the dreaded diamond diagram. I haven\u2019t dealt with any of these for the last 6 years and yet I produced well crafted, tested, maintainable, readable, extensible production-grade code (or at least that\u2019s what I would like to believe :) ).\n Pure functions are easier to  re-use: I can use a pure function as many times as I\u2019d like without having to take how it affects the system into consideration since there aren\u2019t any side effects. It\u2019s like the WYSIWYG of computer programming \u2014 the function follows its body and nothing else. No hidden considerations to be accounted for. Pure functions encourage code re-use by removing the extra overhead of having to investigate whether the code I\u2019m going to re-use affects the system and if so what are the implications of that.\n Pure functions are easier to  read  and  understand: Each pure function is an isolated, consistent and predictable piece of code that only relies on its arguments. You don\u2019t need to be familiar with the database schema or the RabbitMQ architecture to reason about the code \u2014 it\u2019s all about the arguments and the data transformations done in the function body.\n Pure functions are easier to  test: Since they don\u2019t rely on external state all you have to do to test the function is to apply it on its arguments. There\u2019s no need to create fixtures on the database or mock an HTTP request. Also, since pure functions don\u2019t apply any changes on the system all you have to test is the return value.\n Pure functions are easier to  refactor: Their lack of external dependencies and their statelessness turns them into an isolated building blocks that are easily replaceable and composable.\n  Clojure does not have \u201cobjects\u201d. I mean, it does, but most of the time you won\u2019t feel any need for those. Instead, Clojure relies on primitive values and collections of those (arrays, dictionaries, sets etc). 99% of what I do in Clojure is working with arrays and dictionaries that contain primitive values.\n  My code focuses on business logic and data transformations rather than describing the domain and its relations. Every line of code is executing business logic and by this the business logic is very prominent across the codebase.\n I don\u2019t have to be familiar with hundreds of unique objects and the behaviors coded into them to be effective: An incoming HTTP request? it is a plain Clojure dictionary. You want to form an SQL query? build a dictionary and pass it on to the SQL library for formatting. You want to return an HTTP response? You return a dictionary with the keys of status code, header and body. Want to read a message from a RabbitMQ queue? Yep, you guessed it \u2014 you get a dictionary. If you\u2019re familiar with Clojure operations on its basic data structures like dictionaries you become effective in HTTP, SQL, RabbitMQ and every other domain specific part of your system. It reduces the complexity and the level of familiarity you need to have in a domain to the minimum required since from the software side, all you do is repeatedly building, transforming and moving dictionaries from one function to the other.\n  Clojure\u2019s syntax is built out of its own data types. This property is called  homoiconicity. It sounds strange at first but I\u2019ll try to demonstrate:\n Clojure vectors (arrays in other languages) look like this  [1 2 3 4] Clojure lists look like this:  (1 2 3 4)\n   As you see, the code is a Clojure list with the symbol  defn, the function name and then comes a vector of arguments. The body is a list with the function as the first member (+) and the arguments follow.\n  Generating code via macros feels very natural. Since most of what we do in Clojure is transforming and generating data structures in favor of business logic, doing the same, with the same data structures, to generate code is mostly unnoticeable.\n It reduces the number of special symbols and characters you have to be familiar with to minimum. Code and data become one as they share the same data structures, behaviors and syntax.\n   The majority of Clojure\u2019s values are immutable which prevents race conditions and allows code that is free from shared access controls like mutexes and locks. Those who are not immutable ( atoms for example) provide safe ways to manipulate the data they store.\n Clojure has a great collection of tools for concurrent programming called  clojure.async. The highlights of these tools, at least from my experience, is Channels, which allow safe inter-thread communication and selection over a set of channels much like  Golang\u2019s select directive.\n  Clojure is not a widespread programming language, and as a such, many libraries are missing for common use cases. Fortunately, Clojure\u2019s interop with Java is seamless so in practice the vast eco system of Java is at your fingertips. This way you can enjoy working with Clojure but do not suffer from its lack of popularity and libraries.\n  Yes, Clojure is great, but like most decisions we make in life, the decisions that were made with Clojure are also tradeoffs.\n The first aspect of Clojure that made my hard life is the JVM and for 3 reasons:\n The JVM is a known memory eater and it is very hard to predict your application memory requirements. Also, it always seems to require more memory than needed to run the application. I am sure that the same applications would take significantly less memory on other runtimes (although I never took the time to prove it).\n Debugging memory leaks and heap size in remote servers is very hard. We tried  VisualVM but since Clojure memory consists mostly of primitives (Strings, Integers etc) it was very hard to understand which data of the application is being accumulated and why. I assume that in common Java based application most of the memory consists of Java objects so the memory profiling would be easier.\n The boot time for Clojure projects might become very long as the project is growing in size. Although there are solutions like  GraalVM I haven\u2019t had the chance to experience them in production to testify on their matureness and robustness.\n To sum it up, I\u2019m not a fan of the JVM, but I do understand the reasoning behind the decision of targeting Clojure\u2019s runtime to the JVM.\n The second topic I find difficulty with when working in large, unfamiliar Clojure codebases is  Typing. Clojure is a dynamic language which has its advantages but not once I stumbled upon a function that received a dictionary argument and I found myself spending a lot of time to find out what keys it holds. Sometimes I had to put a log in our integration environment to see what message it receives and what are the fields that are available for me in that message. Sometimes I would go to the tests for that function and look for the example argument value we used in the tests but that might not be enough because there might be other fields that exists in that dictionary and are just not being used in the function at the moment so they might be missing from the test value as well. Sometime I would look at the function\u2019s call site to understand what argument has been passed and how it was built. There are solutions to that as well, like  core.typed but I never experienced them myself and I am not sure of how comprehensive and usable they are.\n The last thing that feels hard with Clojure, and I\u2019ve already touched it earlier in this post, is recruiting and onboarding. Recruiting is hard because the pool of existing Clojure engineers is very small and some engineers deliberately refrain from working with unpopular languages due to career advancement considerations. Other engineers gain expertise with specific languages and would like to continue and work with these languages so Clojure is not an option for them. Onboarding also requires more attention and guidance since most engineers arrive with little to no knowledge of Clojure and its eco system. When a NodeJS engineer joins a company, they already know javascript, they\u2019re familiar with the eco system, they have a favorite IDE and plugins and they know what tools makes their local development environment as productive as it can be. When engineers join an organization that works with Clojure without prior knowledge, they have to learn the language, find an IDE they\u2019re comfortable with, adapt a new development flow and configure their development environment to be able to be productive. It\u2019s almost like learning to tie your shoes all over again and it has to come with the right amount of guidance and availability from existing engineers.\n Another interesting issue that the lack of Clojure popularity introduces is that it is hard for new engineers to bring Clojure specific knowledge from outside into the company and enrich the existing team. Going to the NodeJS example again, an engineer with vast experience that joins a new team may introduce new tools / libraries / work methodologies / development flows they gained expertise with in prior companies. Engineers that come with no prior experience with a specific domain cannot really enrich the team in the same way so the team has to rely on self learning and improvement rather than bringing knowledge from the outside.\n  I think that every software engineer needs to at least get theirselves familiar with one functional programming language just to open their mind and see outside the OOP paradigm. Learning Clojure made me doubt everything I practiced before as a software engineer and ask questions on the very basics of how I spend my energy on the right direction to provide the company I\u2019m working at value.\n I think that Clojure, being a mature, production ready and a simple programming language, is a great candidate for that exploration. You may choose to use it professionally, for side projects or not at all, but the experience of exposing yourself to this language will surely enrich the way you think of programming and make you a better developer.", "posttime": "2021-08-02 22:08:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e13\u4e1a,professional,clojure", "title": "\u516d\u5e74\u7684\u4e13\u4e1a Clojure", "title_en": "Six Years of Professional Clojure", "transed": 1, "url": "https://engineering.nanit.com/6-years-of-professional-clojure-2b61cb6c1983", "via": "", "real_tags": ["\u4e13\u4e1a", "clojure"]}, {"category": "", "categoryclass": "", "imagename": "4b7a178114bae8591962888ecc1b10fc.jpg", "infoid": 1071172, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "YouTube \u6b63\u5728\u6b27\u6d32\u8bd5\u884c\u4e00\u79cd\u540d\u4e3a\u201cPremium Lite\u201d\u7684\u65b0\u7684\u66f4\u4fbf\u5b9c\u7684\u8ba2\u9605\u5c42\uff0c\u5b83\u63d0\u4f9b\u65e0\u5e7f\u544a\u89c2\u770b\uff0c\u4f46\u6ca1\u6709 YouTube Premium \u7684\u5176\u4ed6\u529f\u80fd\u3002\u6700\u521d\u7531 ResetEra \u4e0a\u7684\u7528\u6237\u53d1\u73b0\uff0c\u968f\u540e\u88ab Google \u786e\u8ba4\uff0c\u201c\u7cbe\u7b80\u7248\u201d\u8ba1\u5212\u610f\u5473\u7740\u5bf9\u79bb\u7ebf\u4e0b\u8f7d\u6216\u540e\u53f0\u64ad\u653e\u4e0d\u611f\u5174\u8da3\u7684\u7528\u6237\u4ecd\u7136\u53ef\u4ee5\u5728\u7f51\u7edc\u548c\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u4e0a\u6b23\u8d4f YouTube \u89c6\u9891\uff0c\u800c\u4e0d\u4f1a\u88ab\u5e7f\u544a\u6253\u65ad\u3002 \u201c\u5728\u5317\u6b27\u548c\u6bd4\u8377\u5362\u7ecf\u6d4e\u8054\u76df\uff08\u51b0\u5c9b\u9664\u5916\uff09\uff0c\u6211\u4eec\u6b63\u5728\u6d4b\u8bd5\u4e00\u79cd\u65b0\u4ea7\u54c1\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u66f4\u591a\u9009\u62e9\uff1aPremium Lite \u6bcf\u6708\u6536\u8d39 6.99 \u6b27\u5143\uff08\u6216\u5f53\u5730\u7b49\u4ef7\u7269\uff09\uff0c\u5305\u62ec YouTube \u4e0a\u7684\u65e0\u5e7f\u544a\u89c6\u9891\u3002\u201d\u6807\u51c6\u7684 YouTube Premium \u8ba1\u5212\u5728\u6b27\u6d32\u6bcf\u6708\u82b1\u8d39\u7ea6 11.99 \u6b27\u5143/11.99 \u82f1\u9551\uff0c\u5728\u7f8e\u56fd\u82b1\u8d39 11.99 \u7f8e\u5143\uff0c\u5305\u62ec\u5728\u7f51\u7edc\u3001\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u3001\u667a\u80fd\u7535\u89c6\u548c\u6e38\u620f\u673a\u4e0a\u7684\u65e0\u5e7f\u544a\u89c2\u770b\uff0c\u4ee5\u53ca\u65e0\u5e7f\u544a\u7684 YouTube \u97f3\u4e50\u6536\u542c\uff0c\u540e\u53f0\u64ad\u653e\u548c\u79bb\u7ebf\u4e0b\u8f7d\u3002\u6b63\u5982 The Verge \u6307\u51fa\u7684\u90a3\u6837\uff0c\u201c\u7cbe\u7b80\u7248\u201d\u9009\u9879\u7684\u6210\u672c\u7ea6\u4e3a\u9ad8\u7ea7\u8ba1\u5212\u4ef7\u683c\u7684 60%\uff0c\u4f46\u4ec5\u63d0\u4f9b\u56db\u5206\u4e4b\u4e00\u7684\u529f\u80fd\u3002\u4f46\u662f\uff0cYouTube \u8868\u793a\u8ba2\u9605\u8ba1\u5212\u4ecd\u5904\u4e8e\u8bd5\u9a8c\u9636\u6bb5\uff0c\u5b83\u4ecd\u53ef\u80fd\u63a8\u51fa\u66f4\u591a\u8ba1\u5212\u6765\u8861\u91cf\u7528\u6237\u53cd\u9988\u3002\u53ea\u9700\u8ba9 YouTube Premium \u66f4\u4fbf\u5b9c\u3002\u6216\u8005\u4f7f\u79bb\u7ebf\u4e0b\u8f7d\u989d\u5916\u6536\u8d39\u3002\u6211\u4e0d\u60f3\u8981\u5e7f\u544a\uff0c\u6211\u60f3\u8981\u540e\u53f0\u64ad\u653e\u3002\u6839\u672c\u4e0d\u8981\u4f7f\u7528\u79bb\u7ebf\u4e0b\u8f7d\u3002\u6216\u8005\u60a8\u53ea\u662f\u201c\u98de\u201d\u5230\u571f\u8033\u5176\u5e76\u652f\u4ed8\u4e0d\u5230\u4e00\u4e2a\u829d\u58eb\u6c49\u5821\u7684\u9ad8\u7ea7\u8ba2\u9605\u8d39\u7528\uff1f\u3002\u9ad8\u7ea7\u7cbe\u7b80\u7248\u3002\u591a\u4e48\u611a\u8822\u7684\u540d\u5b57\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u8c37\u6b4c\u5982\u4f55\u4ecd\u7136\u901a\u8fc7Apple IAP\u83b7\u5f97\u66f4\u6602\u8d35\u7684\u8ba2\u9605\u4ef7\u683c\uff1f\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u8fd9\u5c31\u662f Netflix \u5b8c\u5168\u505c\u6b62\u4ece iOS \u6ce8\u518c\u7684\u539f\u56e0\n\u8fd9\u5f88\u6709\u8da3\u3002\u6211\u611f\u5174\u8da3\u7684\u662f\u65e0\u5e7f\u544a\u89c2\u770b\u89c6\u9891\uff0c\u4f46\u201c\u6b63\u5e38\u201d\u4ef7\u683c\u5305\u62ec Youtube \u97f3\u4e50\u3002\u6211\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u6709\u97f3\u4e50\u6d41\u5a92\u4f53\uff0c\u6211\u4e0d\u9700\u8981\u6765\u81ea Youtube \u7684\u97f3\u4e50 - \u6240\u4ee5\u6446\u8131\u5b83\u4ee5\u964d\u4f4e\u4ef7\u683c\u5c06\u662f\u6211\u7684\u7b2c\u4e00\u9009\u62e9\u3002\u4ed6\u4eec\u5e94\u8be5\u505c\u6b62\u6bcf\u9694\u51e0\u5206\u949f\u5c31\u8981\u6c42\u4ed8\u8d39\u3002\u90a3\u5c06\u662f\u4e2a\u597d\u6d88\u606f\u3002\u96be\u9053\u53ea\u6709\u6211\u771f\u7684\u5bf9 YouTube \u4e3a\u540e\u53f0\u64ad\u653e\u6536\u53d6\u989d\u5916\u8d39\u7528\u6709\u95ee\u9898\uff0c\u8fd9\u672c\u8d28\u4e0a\u662f\u64cd\u4f5c\u7cfb\u7edf\u529f\u80fd\uff0c\u800c\u4e0d\u662f\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\uff1f\u6bcf\u6708 12 \u82f1\u9551\uff0c\u6ca1\u6709\u5e7f\u544a\u592a\u9ad8\u3002\u6211\u8bd5\u4e86\u4e00\u4e0b\uff0c\u7136\u540e\u53d6\u6d88\u4e86\u3002\u6211\u4f1a\u652f\u4ed8 6 pm\uff0c\u4f46\u524d\u63d0\u662f\u8fd8\u6dfb\u52a0\u4e86\u540e\u53f0\u64ad\u653e\u3002\u6216\u8005\uff0c\u60a8\u53ea\u9700\u4e0b\u8f7d Brave Browser\uff0c\u5c31\u518d\u4e5f\u4e0d\u4f1a\u514d\u8d39\u770b\u5230\u5e7f\u544a\u4e86\uff01\u7ecf\u8fc7\u6f2b\u957f\u7684\u7b49\u5f85\uff0ciOS \u7248 YouTube \u6b63\u5f0f\u83b7\u5f97\u753b\u4e2d\u753b\u652f\u6301\uff0c\u5141\u8bb8\u6240\u6709\u7528\u6237\uff08\u975e\u9ad8\u7ea7\u548c\u9ad8\u7ea7\u8ba2\u9605\u8005\uff09\u5173\u95ed YouTube \u5e94\u7528\u5e76\u7ee7\u7eed\u5728\u4e00\u4e2a\u5c0f\u5f39\u51fa\u7a97\u53e3\u4e2d\u89c2\u770b\u4ed6\u4eec\u7684\u89c6\u9891\u3002\u5728\u7ed9 MacRumors \u7684\u4e00\u4efd\u58f0\u660e\u4e2d\uff0cYouTube \u8868\u793a\u753b\u4e2d\u753b\u76ee\u524d\u6b63\u5728\u5411 iOS \u4e0a\u7684\u6240\u6709\u9ad8\u7ea7\u8ba2\u9605\u8005\u63a8\u51fa\uff0c\u5e76\u4e14\u66f4\u5927\u89c4\u6a21\u5730\u5411\u6240\u6709\u7f8e\u56fd iOS \u63a8\u51fa......\u8c37\u6b4c\u4eca\u5929\u5ba3\u5e03\u63a8\u51fa\u4e00\u9879\u65b0\u7684\u201c4K Plus\u201d\u8ba1\u5212YouTube \u7535\u89c6\u8ba2\u9605\u8005\uff0c\u8fd9\u5c06\u5141\u8bb8\u5728\u517c\u5bb9\u7684\u7535\u89c6\u548c\u673a\u9876\u76d2\u4e0a\u4ee5 4K \u6d41\u5f0f\u4f20\u8f93\u3002\u9664\u4e86 4K \u6d41\u5a92\u4f53\uff0c4K Plus \u9009\u9879\u8fd8\u5305\u62ec\u4e0b\u8f7d\u8282\u76ee\u4ee5\u4f9b\u79bb\u7ebf\u89c2\u770b\u548c\u8fde\u63a5\u5230\u5bb6\u5ead WiFi \u65f6\u65e0\u9650\u6d41\u5a92\u4f53\u64ad\u653e\u7684\u9009\u9879\u3002\u636e CNET \u62a5\u9053\uff0c4K Plus \u7684\u4ef7\u683c\u5728\u6807\u51c6\u57fa\u7840\u4e0a\u6bcf\u6708\u989d\u5916\u589e\u52a0 19.99 \u7f8e\u5143\u2026\u2026Apple \u4eca\u5929\u5ba3\u5e03\u5176\u514d\u8d39\u7684\u201cToday at Apple\u201d\u521b\u610f\u4f1a\u8bae\u6b63\u5728\u6269\u5c55\u5230 YouTube\u3002\u4eca\u5929\u5728 YouTube \u4e0a\u4e0a\u4f20\u4e86\u7b2c\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u63a2\u7d22\u5982\u4f55\u5728 Apple TV+ \u7cfb\u5217\u201c\u53f2\u52aa\u6bd4\u79c0\u201d\u6545\u4e8b\u677f\u827a\u672f\u5bb6 Krista Porter \u548c Apple \u96f6\u552e\u5458\u5de5\u7684\u5e2e\u52a9\u4e0b\uff0c\u4f7f\u7528 iPad \u548c Apple Pencil \u5728 Pages \u5e94\u7528\u7a0b\u5e8f\u4e2d\u5c06\u81ea\u5df1\u7ed8\u5236\u4e3a\u201c\u82b1\u751f\u201d\u89d2\u8272\u5b89\u4e1c\u5c3c....\n\u5e02\u9762\u4e0a\u6709\u5404\u79cd\u602a\u5f02\u3001\u72ec\u7279\u4e14\u6709\u8da3\u7684 Apple \u76f8\u5173\u914d\u4ef6\uff0c\u5728\u6211\u4eec\u6700\u65b0\u7684 YouTube \u89c6\u9891\u4e2d\uff0c\u6211\u4eec\u6c47\u603b\u4e86\u8fc7\u53bb\u51e0\u4e2a\u6708\u4e2d\u9047\u5230\u7684\u4e00\u4e9b\u6700\u8457\u540d\u7684\u4ea7\u54c1\u3002\u8ba2\u9605 MacRumors YouTube \u9891\u9053\u4ee5\u83b7\u53d6\u66f4\u591a\u89c6\u9891\u3002\u4ece\u5e26\u6444\u50cf\u5934\u7684 Apple Watch \u8868\u5e26\u5230\u8d85\u7ea7\u7cbe\u7f8e\u7684\u624b\u673a\u6d88\u6bd2\u5242\uff0c\u8fd9\u4e9b\u914d\u4ef6\u53ef\u80fd\u5e76\u4e0d\u9002\u5408\u6240\u6709\u4eba\uff0c...... \u66f4\u65b0\uff1aApple \u73b0\u5728\u5ba3\u5e03 Apple Podcast \u8ba2\u9605\u8282\u76ee\u548c\u9891\u9053\u6b63\u5728\u5168\u7403\u8303\u56f4\u5185\u63a8\u51fa\uff0c\u5c55\u793a\u4e86\u5927\u91cf\u65b0\u8282\u76ee\u3001\u64ad\u5ba2\u7ec4\u548c\u9891\u9053\u3002\u5f53\u542c\u4f17\u8d2d\u4e70\u8282\u76ee\u8ba2\u9605\u65f6\uff0c\u4ed6\u4eec\u4f1a\u81ea\u52a8\u5173\u6ce8\u8282\u76ee\uff0c\u5e76\u4e14\u9875\u9762\u4f1a\u66f4\u65b0\u4e3a\u8ba2\u9605\u8005\u7248\u672c\u6807\u7b7e\uff0c\u56e0\u6b64\u5f88\u660e\u663e\u4ed6\u4eec\u53ef\u4ee5\u8bbf\u95ee\u9ad8\u7ea7\u4f53\u9a8c\u3002\u7531\u4e8e... T-Mobile \u8ba9\u8003\u8651\u66f4\u6362\u8fd0\u8425\u5546\u4ee5\u6d4b\u8bd5\u5176\u7f51\u7edc\u7684 iPhone \u7528\u6237\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u5bb9\u6613\uff0c\u5c06 eSIM \u652f\u6301\u6dfb\u52a0\u5230\u5176\u73b0\u6709\u7684\u6d4b\u8bd5\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u3002\u6b63\u5982 Light Reading\uff08\u901a\u8fc7 The Verge\uff09\u6307\u51fa\u7684\u90a3\u6837\uff0c\u62e5\u6709\u652f\u6301 eSIM \u7684 iPhone \u7684\u4eba\u53ef\u4ee5\u4e0b\u8f7d T-Mobile \u7f51\u7edc\u8bd5\u9a7e\u5e94\u7528\u7a0b\u5e8f\u6765\u8bd5\u7528 T-Mobile \u7f51\u7edc\uff0c\u8fd9\u662f T-Mobile \u4e0a\u5468\u63a8\u51fa\u7684\u4e00\u9879\u529f\u80fd\u3002 T-Mobile ... \u5728\u529f\u80fd\u66f4\u5f3a\u5927\u7684\u5168\u65b0 Apple TV 4K \u7684\u652f\u6301\u4e0b\uff0cYouTube \u4e3a\u5176 Apple TV \u5e94\u7528\u7a0b\u5e8f\u542f\u7528\u4e86\u6bcf\u79d2 60 \u5e27\u7684 4K \u89c6\u9891\u64ad\u653e\uff0c\u800c\u4e0d\u662f\u4e4b\u524d\u7684\u6bcf\u79d2 30 \u5e27\u3002 YouTube \u5728 10 \u6708\u4efd\u4e3a\u5176 Apple TV \u5e94\u7528\u63a8\u51fa\u4e86 4K \u652f\u6301\uff1b\u7136\u800c\uff0c\u4ee4\u7528\u6237\u975e\u5e38\u5931\u671b\u7684\u662f\uff0c\u64ad\u653e\u901f\u5ea6\u4ec5\u9650\u4e8e\u6bcf\u79d2 30 \u5e27\u3002\u591a\u4e8f\u4e86\u65b0\u7684\u5f3a\u5927\u7684 A12 \u4eff\u751f...\u82f9\u679c\u516c\u53f8\u4eca\u5929\u5ba3\u5e03\uff0c\u5b83\u5c06\u4e3a\u5728 6 \u6708 30 \u65e5\u4e4b\u524d\u5728 Apple TV \u5e94\u7528\u7a0b\u5e8f\u4e2d\u8ba2\u9605\u7684\u65b0\u7528\u6237\u63d0\u4f9b\u6d3e\u62c9\u8499 + \u6d41\u5a92\u4f53\u670d\u52a1\u4e3a\u671f\u4e00\u4e2a\u6708\u7684\u514d\u8d39\u8bd5\u7528\uff0c\u6b63\u5982 Mac \u89c2\u5bdf\u5bb6\u53d1\u73b0\u7684\u90a3\u6837\u3002\u6b64\u4f18\u60e0\u4ec5\u5728\u7f8e\u56fd\u6709\u6548\u3002 Paramount+ \u4ee5\u524d\u79f0\u4e3a CBS All Access\uff0c\u63d0\u4f9b\u6765\u81ea ViacomCBS \u53ca\u5176\u5404\u4e2a\u5b50\u516c\u53f8\uff08\u5305\u62ec CBS\uff09\u7684\u7535\u89c6\u8282\u76ee\u548c\u7535\u5f71\u7684\u8bbf\u95ee\u6743\u9650\u2026\u2026\u672c\u6708\u521d\uff0cWarnerMedia \u5ba3\u5e03\u5373\u5c06\u63a8\u51fa\u65b0\u7684 HBO Max \u5e7f\u544a\u652f\u6301\u5c42\uff0c\u8be5\u5c42\u5df2\u7ecf\u4eca\u5929\u9996\u6b21\u4eae\u76f8\u3002\u5e7f\u544a\u652f\u6301\u5c42\u7684\u4ef7\u683c\u4e3a\u6bcf\u6708 9.99 \u7f8e\u5143\uff0c\u6bd4\u6807\u51c6 HBO Max \u8ba2\u9605\u7684\u6bcf\u6708 14.99 \u7f8e\u5143\u4f4e 5 \u7f8e\u5143\u3002 HBO Max \u65e8\u5728\u4e3a\u5176\u5e7f\u544a\u652f\u6301\u5c42\u63d0\u4f9b\u201c\u6d41\u5a92\u4f53\u884c\u4e1a\u4e2d\u6700\u8f7b\u7684\u5e7f\u544a\u8d1f\u8f7d\u201d\uff0c\u5b83\u5c06\u5305\u62ec\u5bf9\u6240\u6709\u5185\u5bb9\u7684\u8bbf\u95ee......\u5728 WWDC \u4e4b\u524d\uff0c\u4e3b\u8981\u7531\u6cc4\u5bc6\u8005 Jon Prosser \u63a8\u52a8\u7684\u8c23\u8a00\u6697\u793a\u82f9\u679c\u5c06\u5ba3\u5e03\u91cd\u65b0\u8bbe\u8ba1\u7684 14 - \u82f1\u5bf8\u548c 16 \u82f1\u5bf8 MacBook Pro \u4f1a\u8bae\u671f\u95f4\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u4f20\u8a00\u5e76\u6ca1\u6709\u6210\u771f\u3002\u4e0d\u8fc7\uff0c\u6709\u8da3\u7684\u662f\uff0cApple \u5c06\u201cm1x MacBook Pro\u201d\u5217\u4e3a\u4e0a\u4f20\u5230 YouTube \u7684 WWDC \u4e3b\u9898\u6f14\u8bb2\u7684\u6807\u7b7e\u3002\u8fd9\u4e2a\u6807\u7b7e\u6700\u521d\u662f\u7531 Apple YouTuber Max Balzer \u5728 Twitter \u4e0a\u53d1\u73b0\u7684\uff0c\u5176\u4e2d\u5305\u62ec...", "note_en": "YouTube is piloting a new cheaper subscription tier in Europe called &#34;Premium Lite,&#34; which offers ad-free viewing minus YouTube Premium&#39;s other features.\n First spotted by a user on   ResetEra and subsequently confirmed by Google, the &#34;Lite&#34; plan means users who aren&#39;t interested in offline downloads or background playback can still enjoy YouTube videos on web and mobile app without being interrupted by ads.\n  &#34;In Nordics and Benelux (except for Iceland), we&#39;re testing a new offering to give users even more choice: Premium Lite costs \u20ac6.99/month (or local equivalent per month) and it includes ad-free videos on YouTube.&#34;\n A standard YouTube Premium plan costs around \u20ac11.99/\u00a311.99 a month in Europe and $11.99 in the United States, and includes ad-free viewing on web, mobile app, smart TVs and consoles, as well as ad-free YouTube Music listening, background playback, and offline downloads.\n As  The Verge notes, the &#34;Lite&#34; option costs around 60% of the price of a Premium plan but only offers a quarter of the features. However, YouTube says that the subscription plan is still in an experimental phase, and that it could still roll out more plans to gauge user feedback.\n Just make YouTube premium cheaper. Or make offline downloads cost additional. I don\u2019t want ads and i want background playback. Don\u2019t use offline downloads at all.\n Or you just \u201efly\u201c to Turkey and pay less than a cheese burger for the premium subscription ?. Premium Lite. What a stupid name.  by the way, how does Google still get away with a more expensive subscription price via Apple IAP? I thought this wasn\u2019t allowed and that\u2019s why Netflix stopped signing up from iOS all together\n This is interesting.  Ad-free viewing of videos is what I&#39;m interested in, but the &#34;normal&#34; price includes Youtube Music. I also have music streaming elsewhere, I have no need for that from Youtube - so getting rid of that to reduce the price would be my first pick.\n They should stop asking to go premium every few minutes. That would be good news.\n Is it just me that really has an issue with YouTube charging extra for background playback, which is essentially an operating system feature, not an app feature?  \u00a312 per month for this and no ads is too high. I trialled it and then cancelled. I would pay \u00a36 pm, but only if background playback was also added.\n Or you can just download Brave Browser and never see an ad again for free!\n  After a long wait, YouTube for iOS is officially gaining picture-in-picture support, allowing all users, non-premium and premium subscribers, to close the YouTube app and continue watching their video in a small pop-up window.\rIn a statement to MacRumors, YouTube says that picture-in-picture is currently rolling out to all premium subscribers on iOS and that a larger rollout to all US iOS...\n Google today announced the launch of a new &#34;4K Plus&#34; plan for YouTube TV subscribers, which will allow for streaming in 4K on a compatible TV and set-top box.\rAlong with 4K streaming, the 4K Plus option includes an option to download shows for watching offline and unlimited streaming when connected to home WiFi.\r4K Plus is priced at an additional $19.99 per month on top of the standard...\n Apple today announced that its free &#34;Today at Apple&#34; creative sessions are expanding to YouTube, as reported by CNET.\rThe first session on YouTube was uploaded today and explores how to draw yourself as a &#34;Peanuts&#34; character in the Pages app using an iPad and Apple Pencil with the help of Apple TV+ series &#34;The Snoopy Show&#34; storyboard artist Krista Porter and Apple retail employee Anthony....\n There are all kinds of weird, unique, and interesting Apple-related accessories out there, and in our latest YouTube video, we&#39;ve rounded up some of the most notable products we&#39;ve come across in the last few months.\rSubscribe to the MacRumors YouTube channel for more videos. From an Apple Watch band with a camera to an ultra fancy phone sanitizer, these accessories may not be for everyone,...\n Update: Apple has now announced that Apple Podcast Subscriptions for shows and channels is rolling out worldwide, showcasing a large number of new shows, groups of podcasts, and channels.\rWhen listeners purchase a subscription to a show, they automatically follow the show and the page is updated with a Subscriber Edition label so it is clear that they have access to the premium experience. As...\n T-Mobile has made it easier than ever for iPhone owners contemplating a carrier switch to test out its network, adding eSIM support to its existing Test Drive Program.\rAs noted by Light Reading (via The Verge), those who have an iPhone that supports eSIM can download the T-Mobile Network Test Drive app to try out the T-Mobile network, a feature that T-Mobile rolled out last week.\rT-Mobile ...\n Enabled by the new and more powerful Apple TV 4K, YouTube has enabled 4K video playback at 60 frames per second for its Apple TV app, rather than the previously capped 30 frames per second. YouTube rolled out 4K support for its Apple TV app in October; however, to much disappointment to users, playback was limited to only 30 frames per second. Thanks to the new powerful A12 Bionic...\n Apple today announced it is offering an extended one-month free trial for the Paramount+ streaming service to new users who subscribe within the Apple TV app through June 30, as spotted by The Mac Observer. The offer is valid in the U.S. only.\rPreviously known as CBS All Access, Paramount+ provides access to TV shows and movies from ViacomCBS and its various subsidiaries, including CBS,...\n Earlier this month, WarnerMedia announced the upcoming launch of a new ad-supported tier for HBO Max, which has debuted today. Priced at $9.99 per month, the ad-supported tier is $5 less than the $14.99 monthly cost of the standard HBO Max subscription.\rHBO Max is designed to feature the &#34;lightest ad load in the streaming industry&#34; for its ad-supported tier, and it will include access to all ...\n Before WWDC, rumors largely driven by leaker Jon Prosser suggested that Apple would announce redesigned 14-inch and 16-inch MacBook Pros during the conference. Those rumors, however, did not come to fruition. Interestingly, though, Apple lists &#34;m1x MacBook Pro&#34; as a tag for the WWDC keynote uploaded on YouTube.\rThe tag, first spotted by Apple YouTuber Max Balzer on Twitter, is among other...", "posttime": "2021-08-02 22:08:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e7f\u544a,youtube,lite,tests", "title": "YouTube \u4e3a\u65e0\u5e7f\u544a\u89c2\u770b\u6d4b\u8bd5\u66f4\u4fbf\u5b9c\u7684\u201cPremium Lite\u201d\u8ba2\u9605", "title_en": "YouTube Tests Cheaper 'Premium Lite' Subscription for Ad-Free Viewing", "transed": 1, "url": "https://www.macrumors.com/2021/08/02/youtube-premium-lite-subscription-ad-free/", "via": "", "real_tags": ["\u5e7f\u544a", "youtube", "lite", "tests"]}, {"category": "", "categoryclass": "", "imagename": "eebd3451535c62ea7342662608b01786.jpg", "infoid": 1071171, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e54\u6cbb\u00b7\u7f57\u5179 (George Rhoads) \u662f\u4e00\u4f4d\u5f02\u60f3\u5929\u5f00\u7684\u827a\u672f\u5bb6\uff0c\u4ed6\u521b\u4f5c\u4e86\u7cbe\u7f8e\u7684\u96d5\u5851\uff0c\u5176\u4e2d\u7403\u770b\u4f3c\u968f\u673a\u5730\u6cbf\u7740\u8ff7\u5bab\u822c\u7684\u5c0f\u5f84\u884c\u8fdb\uff0c\u5e76\u5f15\u53d1\u4e86\u949f\u58f0\u3001\u949f\u58f0\u548c\u6728\u7434\u7434\u952e\u7684\u632f\u52a8\u97f3\u8c03\uff0c\u4e8e 7 \u6708 9 \u65e5\u5728\u6cd5\u56fd\u897f\u90e8\u7684\u52b3\u767b\u53bb\u4e16.\u4ed6\u4eab\u5e74 95 \u5c81\u3002\u4ed6\u7684\u5b59\u5b50 Chip Chapin \u8bf4\u4ed6\u6b7b\u5728\u770b\u62a4\u4eba Laura Dupuis \u7684\u5bb6\u4e2d\u3002 Rhoads \u5148\u751f\u7684\u5f69\u8272\u201c\u97f3\u9891\u52a8\u529b\u7403\u673a\u201d\u8ba9\u4eba\u8054\u60f3\u5230\u624b\u8868\u548c\u8fc7\u5c71\u8f66\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7531\u8bbe\u8ba1\u6ed1\u7a3d\u7684\u8f68\u9053\u548c\u8bbe\u5907\uff08\u5982\u73af\u5f62\u8f68\u9053\u548c\u87ba\u65cb\u5761\u9053\uff09\u5236\u6210\uff0c\u901a\u5e38\u6709 6 \u5230 10 \u82f1\u5c3a\u9ad8.\u8bb8\u591a\u673a\u5668\u5df2\u7ecf\u5b89\u88c5\u5728\u5341\u51e0\u4e2a\u56fd\u5bb6\u7684\u513f\u7ae5\u533b\u9662\u3001\u5546\u573a\u3001\u79d1\u5b66\u535a\u7269\u9986\u548c\u673a\u573a\u4ee5\u53ca\u5176\u4ed6\u5730\u65b9\uff0c\u4f46\u4e3b\u8981\u662f\u5728\u7f8e\u56fd\u548c\u65e5\u672c\u3002\u4ed6\u5728 2014 \u5e74\u63a5\u53d7 Creative Machines \u91c7\u8bbf\u65f6\u8bf4\uff1a\u201c\u6b63\u5982\u6211\u6240\u8bf4\uff0c\u7403\u7684\u6bcf\u6761\u8def\u5f84\u90fd\u662f\u4e0d\u540c\u7684\u620f\u5267\uff0c\u56e0\u4e3a\u4e8b\u4ef6\u4ee5\u7279\u5b9a\u7684\u987a\u5e8f\u53d1\u751f\uff0c\u7c7b\u4f3c\u4e8e\u620f\u5267\u3002\u201d\u901a\u8fc7\u4ed6\u7684\u8bbe\u8ba1\u3002 \u201c\u7403\u9047\u5230\u4e86\u67d0\u4e9b\u56f0\u96be\u3002\u5b83\u505a\u4e86\u51e0\u4ef6\u4e8b\u3002\u53ef\u80fd\u6709\u4e9b\u51b2\u7a81\u5427\u3002\u4ed6\u4eec\u51fb\u4e2d\u6216\u5f98\u5f8a\uff0c\u65e0\u8bba\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u90fd\u6709\u67d0\u79cd\u620f\u5267\u6027\u7684\u7ed3\u8bba\u3002\u201d\u4ed6\u6700\u5e38\u770b\u5230\u7684\u673a\u5668\u4e4b\u4e00\uff0c\u201c\u7b2c 42 \u8857\u821e\u5385\u201d\uff0c\u4e8e 1983 \u5e74\u5b89\u88c5\u5728\u66fc\u54c8\u987f\u6e2f\u52a1\u5c40\u5df4\u58eb\u603b\u7ad9\u7684\u5927\u5802\uff0c\u5e76\u4e00\u76f4\u4fdd\u7559\u5728\u90a3\u91cc\u3002\u516b\u82f1\u5c3a\u9ad8\uff0c\u516b\u82f1\u5c3a\u5bbd\uff0c\u96d5\u5851\u5c55\u793a\u4e86\u5b83\u7684\u76d8\u5b50\u65cb\u8f6c\u3001\u6760\u6746\u7ffb\u8f6c\u548c 24 \u4e2a\u53f0\u7403\u6eda\u4e0b\u5761\u9053\u3002\u6b63\u5982\u4ed6\u7684\u673a\u5668\u4e00\u6837\uff0c\u8bb8\u591a\u7403\u72ec\u7acb\u79fb\u52a8\uff0c\u8ba9\u91cd\u529b\u5f15\u5bfc\u5b83\u4eec\uff0c\u5f53\u5b83\u4eec\u5230\u8fbe\u5e95\u90e8\u65f6\uff0c\u5b83\u4eec\u4f1a\u88ab\u7535\u52a8\u846b\u82a6\u8fd4\u56de\u9876\u90e8\u3002 Rhoads \u5148\u751f\u6210\u5e74\u540e\u4e00\u76f4\u662f\u4e00\u540d\u753b\u5bb6\uff0c\u5bf9\u7535\u5b50\u5b66\u77e5\u4e4b\u751a\u5c11\uff0c\u4e5f\u4e0d\u662f\u5de5\u7a0b\u5e08\uff0c\u5c3d\u7ba1\u4ed6\u5728\u519b\u961f\u670d\u5f79\u671f\u95f4\u66fe\u5728\u5a01\u65af\u5eb7\u661f\u5927\u5b66\u5b66\u4e60\u5de5\u7a0b\u8bfe\u7a0b\u3002\u5728\u4ed6\u4e0e\u827a\u672f\u710a\u5de5\u9c8d\u52c3\u9ea6\u594e\u5c14\u5efa\u7acb\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u4e4b\u524d\uff0c\u4ed6\u5728\u81ea\u5df1\u7684\u91d1\u5c5e\u52a0\u5de5\u8f66\u95f4\u5236\u9020\u4e86\u7403\u673a\u3002\n\u201c\u4e54\u6cbb\u6709\u5de5\u7a0b\u5934\u8111\uff0c\u201d\u9ea6\u594e\u5c14\u5148\u751f\u8bf4\u3002 \u201c\u6211\u4eec\u8bd5\u56fe\u5bf9\u6bcf\u4ef6\u65b0\u4f5c\u54c1\u505a\u7684\u662f\u60f3\u51fa\u4e00\u4e9b\u4e0d\u540c\u7684\u4e1c\u897f\uff0c\u4e5f\u8bb8\u662f\u65b0\u8bbe\u5907\u6216\u5bf9\u6211\u4eec\u4ee5\u524d\u505a\u8fc7\u7684\u4e8b\u60c5\u7684\u4fee\u6539\u3002\u4e54\u6cbb\u4f1a\u6000\u4e0a\u4ed6\u4eec\u3002\u201d\u4ed6\u8865\u5145\u8bf4\uff0c\u201c\u4e54\u6cbb\u4f1a\u8bf4\uff0c\u2018\u6211\u5e0c\u671b\u5728\u8fd9\u53f0\u673a\u5668\u4e0a\u770b\u5230\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u2019\uff0c\u6211\u4eec\u4f1a\u8bf4\uff0c\u2018\u7ed9\u6211\u4eec\u505a\u4e00\u4e2a\u6a21\u578b\u2019\uff0c\u7136\u540e\u4ed6\u4f1a\u7528\u710a\u4e1d\u3001\u6728\u5934\u6216\u7eb8\u677f\u505a\u4e00\u4e9b\u4e1c\u897f\u4ed6\u4f1a\u8bf4\uff0c&#39;\u8fd9\u5c31\u662f\u6982\u5ff5\u3002&#39;\u201d \u6700\u540e\u7684\u4f5c\u54c1\u662f\u7531\u4e00\u540d\u5de5\u4f5c\u4eba\u5458\u6839\u636e Rhoads \u5148\u751f\u7684\u8bbe\u8ba1\u5236\u4f5c\u7684\uff0c\u5176\u4e2d\u5305\u62ec\u7ebd\u7ea6\u4f0a\u8428\u5361 McGuire \u5148\u751f\u7684 Rock Stream \u5de5\u4f5c\u5ba4\u7684\u5de5\u7a0b\u5e08\u3002\u4ed6\u4eec\u603b\u5171\u5236\u9020\u4e86 300 \u53f0\u7403\u673a\uff0c\u6709\u4e9b\u662f\u666e\u901a\u7684\u58c1\u6302\uff0c\u6709\u4e9b\u662f\u5927\u7684\uff0c\u6709\u4e9b\u662f\u5de8\u5927\u7684\uff0c\u8fd8\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u540d\u5b57\uff0c\u6bd4\u5982\u201cBippity Boppity Balls\u201d\uff08\u5728\u6ce2\u58eb\u987f\u513f\u7ae5\u533b\u9662\uff09\uff1b \u201c\u963f\u57fa\u7c73\u5fb7Excogitation\u201d\uff08\u79d1\u5b66\u535a\u7269\u9986\uff0c\u4e5f\u5728\u6ce2\u58eb\u987f\uff09\uff1b \u201cGizmonasium\uff08\u8d39\u57ce\u513f\u7ae5\u533b\u9662\uff09\uff1b \u201c\u9003\u4ea1\u8fd0\u52a8\u201d\uff08\u6d1b\u6839\u673a\u573a\uff09\uff1b\u548c\u201cLoopy Links\u201d\uff08\u5728\u201c\u6d77\u6d0b\u5192\u9669\u53f7\u201d\u6e38\u8f6e\u4e0a\uff09\u3002 \u201cChockablock Clock\u201d\uff08\u4f4d\u4e8e\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u54c8\u91cc\u65af\u5821\u7684\u8349\u8393\u5e7f\u573a\u96f6\u552e\u7efc\u5408\u4f53\uff09\u9ad8\u8fbe 46 \u82f1\u5c3a\u3002 \u201c\u57fa\u4e8e\u7403\u201d\u4e8e 1998 \u5e74\u5728\u51e4\u51f0\u57ce\u7b2c\u4e00\u94f6\u884c\u68d2\u7403\u573a\uff08\u73b0\u5927\u901a\u7403\u573a\uff09\u5916\u5b89\u88c5\uff0c\u8fd9\u662f\u4e9a\u5229\u6851\u90a3\u54cd\u5c3e\u86c7\u961f\u7684\u4e3b\u573a\u3002\u5b83\u7684\u529f\u80fd\u5305\u62ec\u4e00\u4e2a\u5f39\u594f\u201cTake Me Out to the Ballgame\u201d\u7684\u524d\u4e03\u4e2a\u97f3\u7b26\u7684\u7403\u4ece\u6728\u7434\u53f0\u9636\u4e0a\u5f39\u8d77\uff0c\u53e6\u4e00\u4e2a\u7403\u6cbf\u7740\u8f68\u9053\u884c\u9a76\u5e76\u8ba9\u89c2\u4f17\u505a\u201c\u6ce2\u6d6a\u201d\uff0c\u7136\u540e\u653e\u5927\u5230\u86c7\u7684\u5634\u91cc\u3002 Rhoads \u5148\u751f\u76f8\u4fe1\u4ed6\u7684\u4f5c\u54c1\u7684\u5438\u5f15\u529b\u5728\u4e8e\u5b83\u4eec\u7684\u5f00\u653e\u6027\u2014\u2014\u597d\u50cf\u6bcf\u4e2a\u89c2\u4f17\u90fd\u6234\u7740\u653e\u5927\u955c\uff0c\u6b63\u5728\u68c0\u67e5 1900 \u5e74\u4ee3 Waltham \u6000\u8868\u7684\u5185\u90e8\u3002 \u201c\u673a\u5668\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u5f88\u6709\u8da3\uff0c\u4f46\u4eba\u4eec\u901a\u5e38\u4e0d\u7406\u89e3\u5b83\u4eec\uff0c\u56e0\u4e3a\u5c31\u50cf\u5728\u6c7d\u6cb9\u53d1\u52a8\u673a\u4e2d\u4e00\u6837\uff0c\u6709\u8da3\u7684\u90e8\u5206\u53d1\u751f\u5728\u6c14\u7f38\u5185\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u6240\u4ee5\u6211\u628a\u81ea\u5df1\u9650\u5236\u5728\u4f60\u53ef\u4ee5\u5feb\u901f\u770b\u5230\u548c\u7406\u89e3\u7684\u673a\u5236\u4e0a\u3002\n\u4e54\u6cbb\u00b7\u76ae\u7279\u5c3c\u00b7\u7f57\u5179 (George Pitney Rhoads) \u4e8e 1926 \u5e74 1 \u6708 27 \u65e5\u51fa\u751f\u4e8e\u4f0a\u5229\u8bfa\u4f0a\u5dde\u57c3\u6587\u65af\u987f\u3002\u4ed6\u7684\u7236\u4eb2\u4fdd\u7f57\u662f\u4e00\u540d\u533b\u751f\uff0c\u4ed6\u7684\u6bcd\u4eb2\u6d77\u4e1d\u7279 (\u67e5\u5bbe) \u7f57\u5179\u662f\u4e00\u540d\u5bb6\u5ead\u4e3b\u5987\u3002\u4e54\u6cbb\u4ece\u5c0f\u5c31\u5f00\u59cb\u753b\u753b\uff0c\u4ed6\u4f1a\u62c6\u949f\u8868\uff0c\u7136\u540e\u81ea\u5df1\u5236\u4f5c\u4e00\u4e2a\u3002\u53d7\u5230\u53c2\u89c2 1939 \u5e74\u7ebd\u7ea6\u4e16\u754c\u535a\u89c8\u4f1a\u7684\u542f\u53d1\uff0c\u4ed6\u5efa\u9020\u4e86\u4e00\u4e2a\u5fae\u578b\u6469\u5929\u8f6e\u3002 Rhoads \u5148\u751f\u4e8e 1946 \u5e74\u6bd5\u4e1a\u4e8e\u829d\u52a0\u54e5\u5927\u5b66\uff0c\u83b7\u5f97\u5b66\u58eb\u5b66\u4f4d\u3002\u4ed6\u8fd8\u66fe\u5c31\u8bfb\u4e8e\u829d\u52a0\u54e5\u827a\u672f\u5b66\u9662\u548c\u5df4\u9ece\u7684 L&#39;Academie de La Grande Chaumi\u00e8re\u3002\u5728\u5f00\u59cb\u521b\u9020\u7403\u673a\u4e4b\u524d\uff0cRhoads \u5148\u751f\u7684\u7ed8\u753b\u98ce\u683c\u591a\u79cd\u591a\u6837\uff0c\u5305\u62ec\u9519\u89c6\u753b\u3001\u8d85\u73b0\u5b9e\u4e3b\u4e49\u3001\u8868\u73b0\u4e3b\u4e49\u548c\u98ce\u666f\u753b\u3002\u4ed6\u8fd8\u4ece\u4e8b\u6298\u7eb8\u5de5\u4f5c\u3002\u4e3a\u4e86\u8c0b\u751f\uff0c\u4ed6\u505a\u8fc7\u5404\u79cd\u5de5\u4f5c\uff0c\u5305\u62ec\u62c5\u4efb\u533b\u5b66\u63d2\u753b\u5e08\u3002\u4ed6\u8bbe\u8ba1\u73a9\u5177\u5e76\u5411\u7c73\u5c14\u987f\u5e03\u62c9\u5fb7\u5229\u51fa\u552e\u4e86\u81f3\u5c11\u4e00\u4e2a\u6e38\u620f\u521b\u610f\u3002\u4ed6\u7684\u513f\u5b50\u4fdd\u7f57\u5728\u7535\u8bdd\u91c7\u8bbf\u4e2d\u8bf4\uff1a\u201c\u4ed6\u4e00\u76f4\u5728\u5de5\u4f5c\uff0c\u4f46\u4ed6\u52c9\u5f3a\u8fc7\u65e5\u5b50\uff0c\u5f97\u5230\u4e86\u7236\u4eb2\u7684\u5e2e\u52a9\uff0c\u201d\u4ed6\u66fe\u5b89\u6392\u4e86\u4e00\u573a\u4ed6\u7684\u753b\u5c55\uff0c\u4e3a\u5728\u58a8\u897f\u54e5\u751f\u6d3b\u4e24\u5e74\u63d0\u4f9b\u4e86\u8db3\u591f\u7684\u6536\u5165\u3002 \u201c\u4e3b\u8981\u662f\u4ed6\u7236\u4eb2\u7684\u75c5\u4eba\u4e70\u7684\u3002\u201d\u5728 1950 \u5e74\u4ee3\u540e\u671f\uff0cRhoads \u5148\u751f\u5f00\u59cb\u5728\u7ebd\u7ea6\u5e02\u4e0e\u8377\u5170\u827a\u672f\u5bb6 Hans Van de Bovenkamp \u5408\u4f5c\u8bbe\u8ba1\u52a8\u529b\u55b7\u6cc9\uff0c\u8be5\u55b7\u6cc9\u901a\u8fc7\u57fa\u4e8e\u91cd\u529b\u7684\u7cfb\u7edf\u56de\u6536\u6c34\u2014\u2014\u8fd9\u662f\u4ed6\u5f00\u59cb\u5728\u7ebd\u7ea6\u5e02\u81ea\u884c\u5efa\u9020\u7684\u7403\u673a\u7684\u94fe\u63a51965. 1972 \u5e74\u51fa\u73b0\u5728\u5927\u536b\u5f17\u7f57\u65af\u7279\u7684\u7535\u89c6\u8282\u76ee\u4e2d\uff0c\u4e3a\u4ed6\u5e26\u6765\u4e86\u7403\u673a\u7684\u4f63\u91d1\u3002\u8d2d\u7269\u5546\u573a\u5f00\u53d1\u5546\u5927\u536b\u4f2f\u66fc\u7279\u7684\u8d5e\u52a9\u4eba\u6536\u8d2d\u4e86\u5341\u51e0\u5bb6\u3002 1985 \u5e74\uff0cRhoads \u5148\u751f\u6b63\u5f0f\u5f00\u59cb\u4e0e McGuire \u5148\u751f\u5408\u4f5c\u3002\u4ed6\u4eec\u7684\u5408\u4f5c\u4e00\u76f4\u6301\u7eed\u5230 2007 \u5e74\uff0cMcGuire \u5148\u751f\u5c06\u4ed6\u7684\u4e1a\u52a1\u5356\u7ed9\u4e86 Creative Machines\uff0c\u540e\u8005\u5728\u63a5\u4e0b\u6765\u7684\u4e94\u516d\u5e74\u91cc\u4e0e Rhoads \u5148\u751f\u5bc6\u5207\u5408\u4f5c\uff0c\u76f4\u5230\u4ed6\u4fe1\u4efb\u8fd9\u5bb6\u516c\u53f8Creative \u603b\u88c1 Joe O&#39;Connell \u8bf4\uff0c\u8db3\u4ee5\u4ea4\u51fa\u66f4\u591a\u7684\u8bbe\u8ba1\u5de5\u4f5c\u3002\n\u5965\u5eb7\u5948\u5c14\u5148\u751f\u5728\u7535\u8bdd\u4e2d\u8bf4\uff0c\u7f57\u5179\u5148\u751f\u5c06\u4ed6\u7684\u96d5\u5851\u89c6\u4e3a\u4eba\u4eec\u53ef\u4ee5\u559c\u7231\u7684\u673a\u5668\uff0c\u8fd9\u4e0e\u5de5\u5382\u4e0d\u540c\u3002 \u201c\u4ed6\u8bf4\u5b83\u4eec\u662f\u81ea\u7ed9\u81ea\u8db3\u7684\u673a\u5668\uff0c\u4e0d\u4f1a\u9020\u6210\u6c61\u67d3\u2014\u2014\u7f8e\u4e3d\u7684\u673a\u5668\uff0c\u53ef\u4ee5\u5f25\u8865\u6211\u4eec\u5bf9\u571f\u5730\u6240\u505a\u7684\u4e00\u5207\uff0c\u201d\u4ed6\u8bf4\u3002\u9664\u4e86\u4ed6\u7684\u5b59\u5b50\u548c\u513f\u5b50\u4e4b\u5916\uff0c\u7f57\u5179\u5148\u751f\u7684\u5973\u513f\u9edb\u897f\u00b7\u827e\u739b\u00b7\u7f57\u5179\u548c\u4ed6\u7684\u59d0\u59b9\u827e\u7c73\u4e3d\u00b7\u7f57\u5179\u00b7\u7ea6\u7ff0\u900a\u548c\u4fdd\u62c9\u00b7\u6885\u7eb3\u91cc\u8fd8\u6d3b\u7740\u3002\u4ed6\u7ed3\u8fc7\u4e94\u6b21\u5a5a\uff0c\u79bb\u8fc7\u56db\u6b21\u3002\u4ed6\u7684\u7b2c\u4e09\u4efb\u59bb\u5b50\u96ea\u8389\u00b7\u52a0\u6bd4\u65af (Shirley Gabis) \u662f\u4ed6\u5b69\u5b50\u7684\u6bcd\u4eb2\u3002\u4ed6\u7684\u7b2c\u4e94\u4efb\u59bb\u5b50 Marcelle Toor \u4e8e 2009 \u5e74\u53bb\u4e16\u3002Rhoads \u5148\u751f\u627f\u8ba4\uff0c\u4ed6\u7684\u673a\u5668\u7684\u90e8\u5206\u7075\u611f\u6765\u81ea Alexander Calder \u7684\u62bd\u8c61\u7ed3\u6784\u3001Jean Tinguely \u7684\u52a8\u6001\u81ea\u6bc1\u96d5\u5851\u548c Rube Goldberg \u63cf\u7ed8\u590d\u6742\u88c5\u7f6e\u7684\u5361\u901a\u3002 \u201c\u4f46\u4f60\u5b9e\u9645\u4e0a\u65e0\u6cd5\u505a\u51fa\u6208\u5fb7\u5821\u753b\u7684\u4e1c\u897f\uff0c\u201d\u7f57\u5179\u5148\u751f\u544a\u8bc9\u65f6\u4ee3\u6742\u5fd7\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u9650\u5236\u3002\u201d", "note_en": "George Rhoads, a whimsical artist who created elaborate sculptures in which balls traveled seemingly random voyages along labyrinthine paths and set off the ringing of bells, the tinkling of chimes and the vibrating tones of xylophone keys, died on July 9 in Loudun, in western France. He was 95.\n His grandchild, Chip Chapin, said he died in the home of his caretaker, Laura Dupuis.\n Mr. Rhoads\u2019s colorful \u201caudio-kinetic ball machines,\u201d which evoked the workings of watches and roller coasters, were built of comically designed tracks and devices like loop-the-loops and helical ramps, and were usually six- to 10-feet high. Scores of the machines have been installed in children\u2019s hospitals, malls, science museums and airports and elsewhere in a dozen countries, but mostly in the United States and Japan.\n \u201cEach pathway that the ball takes is a different drama, as I call it, because the events happen in a certain sequence, analogous to drama,\u201d  he said in an interview in 2014 with Creative Machines, which makes ball machines based on and inspired by his designs. \u201cThe ball gets into certain difficulties. It does a few things. Maybe there\u2019s some conflict. They hit or they wander, whatever it is and then there\u2019s some kind of dramatic conclusion.\u201d\n  One of his most frequently viewed machines,  \u201c42nd Street Ballroom,\u201d was installed in 1983 in the lobby of Manhattan\u2019s Port Authority Bus Terminal, where it remained. Eight feet tall and eight feet wide, the sculpture shows its plates spin, its levers flip and its 24 billiard balls roll down ramps. As was typical of his machines, numerous balls move independently, letting gravity guide them and, when they reach the bottom, they are returned to the top by a motorized hoist.\n A painter all his adult life, Mr. Rhoads knew little about electronics and was not an engineer, although he took engineering courses at the University of Wisconsin while he was in the Army.\n He built the ball machines in his own metalworking shop until he entered into a partnership with Bob McGuire, an artistic welder.\n \u201cGeorge had  an engineering mind,\u201d Mr. McGuire said. \u201cWhat we tried to do with every new piece was to come up with something different, maybe a new device or a modification of something we\u2019d done before. And George would conceive them.\u201d\n He added, \u201cGeorge would say, \u2018I\u2019d like to see this happen in this machine,\u2019 and we\u2019d say, \u2018Make us a model,\u2019 and he\u2019d cook up something out of welded wire or wood or cardboard and he\u2019d say, \u2018This is the concept.\u2019\u201d\n The final work was built by a staff that included engineers at Mr. McGuire\u2019s Rock Stream Studios in Ithaca, N.Y., based on Mr. Rhoads\u2019s designs.\n  In all, they created 300 ball machines, some modest wall hangings, others large and some colossal, with amusing names like \u201cBippity Boppity Balls\u201d (at Boston Children\u2019s Hospital); \u201cArchimedean Excogitation\u201d (the Museum of Science, also in Boston); \u201cGizmonasium (Children\u2019s Hospital of Philadelphia); \u201cExercise in Fugality\u201d (Logan Airport); and \u201cLoopy Links\u201d (aboard the Adventure of the Seas cruise ship).  \u201cChockablock Clock\u201d (the Strawberry Square retail complex in Harrisburg, Pa.) soars 46 feet high.\n \u201cBased on Balls\u201d was installed in Phoenix in 1998 outside Bank One Ballpark (now Chase Field), the home of the Arizona Diamondbacks. Its features include a ball that bounces down xylophone steps playing the first seven notes of \u201cTake Me Out to the Ballgame\u201d and another ball that rides along a track and causes the crowd to do \u201cthe Wave,\u201d then zooms into a snake\u2019s mouth.\n Mr. Rhoads believed the appeal of his creations was their openness \u2014 as if each viewer were wearing a loupe and were examining the insides of a 1900s Waltham pocket watch.\n \u201cMachines are interesting to everybody but people usually don\u2019t understand them because, as in a gasoline engine, the fun part goes on inside the cylinder,\u201d he said. \u201cSo I\u2019ve restricted myself to mechanisms you can see and understand quickly.\n  George Pitney Rhoads was born on Jan. 27, 1926, in Evanston, Ill. His father, Paul, was a physician, and his mother, Hester (Chapin) Rhoads, was a homemaker. George started drawing as a young boy, and would take apart clocks, then built one himself. Inspired by a visit to the 1939 World\u2019s Fair in New York, he built a miniature Ferris wheel.\n Mr. Rhoads graduated with a bachelor\u2019s degree from the University of Chicago in 1946. He also studied at the Art Institute of Chicago and at the L\u2019Academie de La Grande Chaumi\u00e8re in Paris. Until he began creating the ball machines, Mr. Rhoads painted in various styles, including trompe l\u2019oeil, Surrealism, Expressionism and landscapes. He also worked in origami.\n To earn a living he held various jobs, including working as a medical illustrator. He designed toys and sold at least one game idea to Milton Bradley.\n \u201cHe was always working but he scraped by and got help from his father,\u201d who at one point arranged a show of his paintings that provided enough income to live in Mexico for two years, his son, Paul, said in a phone interview. \u201cMostly, his father\u2019s patients bought them.\u201d\n  In the late 1950s, Mr. Rhoads began working in New York City with the Dutch artist Hans Van de Bovenkamp on the design of kinetic fountains that recycled water through gravity-based systems \u2014 a link to the ball machines he started building on his own in 1965.\n An appearance on David Frost\u2019s television show in 1972 brought him commissions for ball machines. A patron,  David Bermant, a shopping mall developer, acquired more than a dozen. And Mr. Rhoads formally began his partnership with Mr. McGuire in 1985.\n Their collaboration continued until 2007 when Mr. McGuire sold his business to  Creative Machines, which worked closely with Mr. Rhoads for the next five or six years until he trusted the company enough to hand over more of the design work, said Joe O\u2019Connell, president of Creative.\n Mr. O\u2019Connell said by phone that Mr. Rhoads  viewed his sculptures as machines that people could love, unlike factories.\n \u201cHe said they were self-contained machines that don\u2019t pollute \u2014 beautiful machines that redeem what we\u2019ve done to our land,\u201d he said.\n  In addition to his grandchild and son, Mr. Rhoads is survived by his daughter, Daisy Emma Rhoads, and his sisters, Emily Rhoads Johnson and Paula Menary. He was married five times and divorced four times. His third wife, Shirley Gabis, is the mother of his children; his fifth wife, Marcelle Toor, died in 2009.\n Mr. Rhoads acknowledged that his machines were inspired, in part, by  Alexander Calder\u2019s abstract constructions,  Jean Tinguely\u2019s kinetic, self-destructing sculptures and  Rube Goldberg\u2019s cartoons depicting convoluted contraptions.\n \u201cBut you can\u2019t actually make things that Goldberg drew,\u201d Mr. Rhoads told The Times Magazine. \u201cThat\u2019s a severe limitation.\u201d", "posttime": "2021-08-02 22:07:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u8bbe\u8ba1\u5e08,rhoads,\u5148\u751f", "title": "\u201c\u7403\u673a\u201d\u8bbe\u8ba1\u5e08\u4e54\u6cbb\u00b7\u7f57\u5179\u53bb\u4e16", "title_en": "George Rhoads, Designer of \u201cball machines\u201d dies", "transed": 1, "url": "https://www.nytimes.com/2021/07/28/arts/design/george-rhoads-dead.html", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u8bbe\u8ba1\u5e08", "rhoads", "\u5148\u751f"]}]