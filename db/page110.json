[{"category": "", "categoryclass": "", "imagename": "cbb2a3c393b6c35891c233ac03571b01.png", "infoid": 1072066, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u2013 Smile CDR Inc. (Smile CDR) \u662f\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u591a\u4f26\u591a\u7684\u5065\u5eb7\u6570\u636e\u5b58\u50a8\u548c\u96c6\u6210\u516c\u53f8\uff0c\u5b83\u5ba3\u5e03\u5df2\u5728\u7531\u4f4d\u4e8e\u897f\u96c5\u56fe\u7684\u5bb6\u65cf\u529e\u516c\u5ba4 30 North Group \u548c UPMC Enterprises \u7275\u5934\u7684 A \u8f6e\u878d\u8d44\u4e2d\u7b79\u96c6\u4e86 2000 \u4e07\u7f8e\u5143\u3002 \u2013 Smile CDR \u6210\u7acb\u4e8e 2016 \u5e74\uff0c\u63d0\u4f9b\u4e00\u5957\u670d\u52a1\uff0c\u4f7f\u536b\u751f\u7cfb\u7edf\u3001\u4ed8\u6b3e\u4eba\u548c\u533b\u9662\u80fd\u591f\u5feb\u901f\u3001\u5b89\u5168\u5730\u6ee1\u8db3\u7f8e\u56fd\u536b\u751f\u4fe1\u606f\u4e92\u64cd\u4f5c\u6027\u6807\u51c6\u3002 Smile CDR \u7684\u6570\u636e\u548c\u96c6\u6210\u5e73\u53f0\u5305\u62ec\u4e00\u4e2a\u5b8c\u6574\u7684\u4e34\u5e8a\u6570\u636e\u5b58\u50a8\u5e93 (CDR)\uff0c\u5b83\u56f4\u7ed5\u5065\u5eb7\u4e03\u7ea7 (HL7\u00ae) \u5feb\u901f\u533b\u7597\u4e92\u64cd\u4f5c\u6027\u8d44\u6e90 (FHIR\u00ae) \u6807\u51c6\u6784\u5efa\uff0c\u7528\u4e8e\u5b58\u50a8\u5065\u5eb7\u8bb0\u5f55\u5e76\u652f\u6301\u6240\u6709 FHIR \u8d44\u6e90\u3002\u81ea 2019 \u5e74\u4ee5\u6765\uff0cSmile CDR \u5b9e\u73b0\u4e86\u5feb\u901f\u589e\u957f\uff0c\u5458\u5de5\u5e74\u589e\u957f\u7387\u4e3a 400%\uff0c\u7531\u516c\u53f8\u6838\u5fc3 FHIR \u4ea7\u54c1\u7684\u6536\u5165\u6709\u673a\u63a8\u52a8\u3002\u9664\u4e86\u7f8e\u6d32\u3001\u6b27\u6d32\u3001\u4e2d\u4e1c\u548c\u975e\u6d32\u548c\u4e9a\u592a\u5730\u533a\u8d85\u8fc7 15 \u4e2a\u56fd\u5bb6/\u5730\u533a\u7684\u5ba2\u6237\u4e4b\u5916\uff0c\u8be5\u516c\u53f8\u8fd8\u4e0e\u7f8e\u56fd\u8d85\u8fc7 23 \u5bb6\u652f\u4ed8\u65b9\u5408\u4f5c\uff0c\u5176\u4e2d\u5305\u62ec 10 \u5bb6\u6700\u5927\u7684\u4fdd\u9669\u516c\u53f8\u548c\u5065\u5eb7\u8ba1\u5212\u4e2d\u7684\u4e09\u5bb6\u3002", "note_en": "\u2013  Smile CDR Inc. (Smile CDR), a Toronto-based health data storage and integration company, announced it has raised $20 million in Series A funding led by 30 North Group, a Seattle-based family office, and UPMC Enterprises.\n \u2013 Founded in 2016, Smile CDR offers a suite of services that allow health systems, payers and hospitals to meet U.S. health information interoperability standards rapidly and securely. Smile CDR\u2019s data and integration platform includes a complete clinical data repository (CDR) built around the Health Level Seven (HL7\u00ae) Fast Healthcare Interoperability Resources (FHIR\u00ae) standard used for storing health records and supports all FHIR Resources.\n            Since 2019, Smile CDR has seen rapid growth with a 400% year-over-year employee growth rate fueled organically by revenues from the company\u2019s core FHIR offering. The company partners with more than 23 payers across the U.S., including three of the 10 largest insurers and health plans, in addition to customers in more than 15 countries across the Americas, EMEA and APAC.", "posttime": "2021-08-08 12:51:40", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6f\u4ef6,cdr,group", "title": "\u603b\u90e8\u4f4d\u4e8e\u591a\u4f26\u591a\u7684 Smile CDR \u63d0\u4f9b\u5065\u5eb7\u548c\u4e34\u5e8a\u6570\u636e\u4e92\u64cd\u4f5c\u6027\u8f6f\u4ef6\uff0c\u5728 A \u8f6e\u878d\u8d44\u4e2d\u7b79\u96c6\u4e86 2000 \u4e07\u7f8e\u5143\uff0c\u7531 30 North Group \u548c UPMC Enterprises \u9886\u6295", "title_en": "Toronto-based Smile CDR, which offers software for health and clinical data interoperability, raises $20M Series A led by 30 North Group and UPMC Enterprises", "transed": 1, "url": "https://hitconsultant.net/2021/08/06/smile-cdr-fhir-data-platform-funding/", "via": "", "real_tags": ["\u8f6f\u4ef6", "cdr", "group"]}, {"category": "", "categoryclass": "", "imagename": "7cf484ceeae6bc7fc2161eddc603cd15.jpg", "infoid": 1072065, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u672c\u7cfb\u5217\u7684\u7b2c 2 \u96c6\u4e2d\uff0c\u6211\u6ce8\u610f\u5230\u6211\u7528\u6765\u7f16\u5199 Postgres \u51fd\u6570\u7684\u8bed\u8a00\u5171\u4eab\u4e00\u4e2a\u516c\u5171\u7c7b\u578b\u7cfb\u7edf\u3002\u6211\u82b1\u4e86\u4e00\u6bb5\u65f6\u95f4\u624d\u7406\u89e3\u7c7b\u578b\u5728 Postgres \u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u8bb0\u5f55\u96c6\u5e76\u53ef\u4ee5\u4e0e\u8868\u548c\u7269\u5316\u89c6\u56fe\u4ea4\u4e92\u3002\u521b\u5efa\u51fd\u6570 notes_for_user_in_group( _userid text, _groupid text) \u8fd4\u56de setof \u6ce8\u91ca\u4f5c\u4e3a $$ begin return query select * from annotation where userid = concat(&#39;acct:&#39;, _userid) and groupid = _groupid;\u7ed3\u5c3e; $$ \u8bed\u8a00 plpgsql;\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5df2\u7ecf\u5b9a\u4e49\u4e86\u7ba1\u7406\u8fd4\u56de\u96c6\u7684\u7c7b\u578b\uff1a\u5b83\u662f\u6ce8\u91ca\u8868\u7684\u6a21\u5f0f\u3002\u8be5\u51fd\u6570\u8fd4\u56de\u5339\u914d\u7528\u6237 ID \u548c\u7ec4 ID \u7684\u8bb0\u5f55\u3002\u6211\u73b0\u5728\u53ef\u4ee5\u627e\u5230\u6211\u6700\u8fd1\u6ce8\u91ca\u7684\u6587\u6863\u7684 URL\u3002\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u51fd\u6570\u7684\u53c2\u6570\u4ee5\u4e0b\u5212\u7ebf\u4e3a\u524d\u7f00\u3002\u8fd9\u662f\u56e0\u4e3a\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u53d8\u91cf\u53ef\u80fd\u4e0e\u8868\u4e2d\u7684\u5217\u540d\u51b2\u7a81\u3002\u7531\u4e8e\u6211\u4eec\u7684\u5217\u540d\u90fd\u6ca1\u6709\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u533a\u5206\u7b26\u3002\u5047\u8bbe\u51fd\u6570\u7684\u7b7e\u540d\u6539\u4e3a\uff1a \u9519\u8bef\uff1a\u5217\u5f15\u7528\u201cuserid\u201d\u4e0d\u660e\u786e\u7b2c 2 \u884c\uff1a\u5176\u4e2d userid = concat(&#39;acct:&#39;, userid) ^ DETAIL\uff1a\u5b83\u53ef\u4ee5\u5f15\u7528 PL/pgSQL \u53d8\u91cf\u6216\u8868\u5217\u3002\u8be5\u8868\u5177\u6709\u4e0e\u5176\u540c\u540d\u53d8\u91cf\u51b2\u7a81\u7684 userid \u548c groupid \u5217\u3002\u6240\u4ee5\u5bf9\u4e8e\u7ed3\u5408\u53d8\u91cf\u548c\u6570\u636e\u5e93\u503c\u7684\u51fd\u6570\uff0c\u6211\u7528\u4e0b\u5212\u7ebf\u4f5c\u4e3a\u53d8\u91cf\u540d\u7684\u524d\u7f00\u3002\n\u53ef\u4ee5\u5728\u4efb\u4f55 SQL SELECT \u4e0a\u4e0b\u6587\u4e2d\u8c03\u7528\u8fd4\u56de\u96c6\u5408\u7684\u51fd\u6570\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e0a\u4e0b\u6587\u662f psql\uff0cPostgres \u5f3a\u5927\u4e14\u591a\u624d\u591a\u827a\u7684 REPL\uff08\u8bfb\u53d6-\u8bc4\u4f30-\u6253\u5370\u5faa\u73af\uff09\u3002\u5bf9\u4e8e\u4e0d\u540c\u4e0a\u4e0b\u6587\u7684\u793a\u4f8b\uff0c\u8ba9\u6211\u4eec\u5728\u7269\u5316\u89c6\u56fe\u4e2d\u7f13\u5b58\u51fd\u6570\u7684\u7ed3\u679c\u96c6\u3002\u4f7f\u7528\u6570\u636e\u521b\u5efa\u7269\u5316\u89c6\u56fe public_notes_for_judell as ( select * from notes_for_user_in_group(&#39;judell@hypothes.is&#39;, &#39;__world__&#39;) order by created desc )\uff1b\u89c6\u56fe\u7684\u7c7b\u578b\u662f\u9690\u5f0f\u6ce8\u89e3\uff1b\u5b83\u7684\u6a21\u5f0f\u4e0e\u4e0a\u9762\u663e\u793a\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff1b\u4ece\u89c6\u56fe\u4e2d\u9009\u62e9 target_uri \u76f8\u5f53\u4e8e\u4ece\u51fd\u6570 notes_for_user_in_group \u8fd4\u56de\u7684 setof \u6ce8\u91ca\u4e2d\u9009\u62e9 target_uri\u3002\u867d\u7136\u5b83\u663e\u793a\u5f97\u66f4\u5feb\uff01\u6bcf\u6b21\u9009\u62e9\u51fd\u6570\u7684\u7ed3\u679c\u96c6\u65f6\uff0c\u90fd\u5fc5\u987b\u8fd0\u884c\u5305\u88c5\u67e5\u8be2\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u53ef\u80fd\u9700\u8981\u51e0\u79d2\u949f\u7684\u7279\u5b9a\u793a\u4f8b\u3002\u521b\u5efa\u89c6\u56fe\u6240\u9700\u7684\u65f6\u95f4\u76f8\u540c\u3002\u4f46\u662f\u4e00\u65e6\u5b8c\u6210\uff0c\u60a8\u5c31\u53ef\u4ee5\u5728\u51e0\u6beb\u79d2\u5185\u9009\u62e9\u5176\u5185\u5bb9\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u901a\u8fc7\u62a5\u544a\u6bcf\u4e2a\u6ce8\u91ca\u6587\u6863\u7684\u6ce8\u91ca\u8ba1\u6570\u6765\u4f18\u5316 notes_for_user_in_group\u3002\u521b\u5efa\u51fd\u6570 annotated_docs_for_user_in_group( _userid text, _groupid text) \u8fd4\u56de\u8868 ( count bigint, userid text, groupid text, url text ) as $$ begin return query select count(n.*) as anno_count, n.userid, n.groupid, n .target_uri from notes_for_user_in_group(_userid, _groupid) n group by n.userid, n.groupid, n.target_uri order by anno_count desc;\u7ed3\u5c3e; $$ \u8bed\u8a00 plpgsql;\u8be5\u51fd\u6570\u4e0d\u8fd4\u56de\u67d0\u4e2a\u547d\u540d\u7c7b\u578b\u7684\u96c6\u5408\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a\u533f\u540d\u8868\u3002\u6211\u5c06\u96c6\u5408\u8fd4\u56de\u51fd\u6570\u8c03\u7528 notes_for_user_in_group \u522b\u540d\u4e3a n \u5e76\u4f7f\u7528\u522b\u540d\u6765\u9650\u5b9a\u6240\u9009\u5217\u7684\u540d\u79f0\u3002\u8fd9\u907f\u514d\u4e86\u53e6\u4e00\u4e2a\u547d\u540d\u51b2\u7a81\u3002\u5982\u679c\u5728\u51fd\u6570\u4f53\u4e2d\u5199\u5165 userid \u800c\u4e0d\u662f n.userid \u7136\u540e\u8c03\u7528\u5b83\uff0cPostgres \u518d\u6b21\u62b1\u6028\u51b2\u7a81\u3002\n\u9519\u8bef\uff1a\u5217\u5f15\u7528\u201cuserid\u201d\u4e0d\u660e\u786e\u7b2c 3 \u884c\uff1auserid\uff0c^ \u8be6\u7ec6\u4fe1\u606f\uff1a\u5b83\u53ef\u4ee5\u5f15\u7528 PL/pgSQL \u53d8\u91cf\u6216\u8868\u5217\u3002\u8ba1\u6570 |\u7528\u6237\u540d |\u7ec4\u540d | target_uri -------+---------------------------------------- ---- 516 | jdell@hypothes.is | __\u4e16\u754c__ | http://shakespeare.mit.edu/macbeth/full.html 73 | jdell@hypothes.is | __\u4e16\u754c__ | https://www.independent.co.uk/news/world/asia/india-floods-bangladesh-nepal-deaths-millions-homeless-latest-news-updates-a7919006.html 51 | jdell@hypothes.is | __\u4e16\u754c__ | https://www.usatoday.com/story/news/nation-now/2017/06/16/coconut-oil-isnt-healthy-its-never-been-healthy/402719001/ \u521b\u5efa\u7269\u5316\u89c6\u56fe url_counts_for_public_notes_by_judell as ( select *\u6765\u81ea annotated_docs_for_user_in_group( &#39;judell@hypothes.is&#39;, &#39;__world__&#39; ) ) \u548c\u6570\u636e\uff1b\u5f53\u60a8\u5728 psql \u4e2d\u4f7f\u7528 \\d \u547d\u4ee4\u8be2\u95ee\u8be5\u89c6\u56fe\u7684\u5b9a\u4e49\u65f6\uff1a Column |\u7c7b\u578b ---------+-------- \u8ba1\u6570 | bigint \u7528\u6237\u540d |\u6587\u672c\u7ec4ID |\u6587\u5b57\u7f51\u5740 | text \u5e55\u540e Postgres \u4ece\u51fd\u6570\u8fd4\u56de\u7684\u533f\u540d\u8868\u4e2d\u521b\u5efa\u4e86\u8fd9\u4e2a\u5b9a\u4e49\u3002\u8981\u4fee\u6539\u51fd\u6570\u4ee5\u4f7f\u5176\u4f7f\u7528\u547d\u540d\u7c7b\u578b\uff0c\u8bf7\u9996\u5148\u521b\u5efa\u7c7b\u578b\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u8be5\u547d\u540d\u7c7b\u578b\u3002\u7531\u4e8e\u6211\u4eec\u6b63\u5728\u91cd\u65b0\u5b9a\u4e49\u51fd\u6570\uff0c\u56e0\u6b64\u9996\u5148\u5c06\u5176\u5220\u9664\u3002\u9519\u8bef\uff1a\u65e0\u6cd5\u5220\u9664\u51fd\u6570 annotated_docs_for_user_in_group(text,text) \u56e0\u4e3a\u5176\u4ed6\u5bf9\u8c61\u4f9d\u8d56\u4e8e\u5b83\u8be6\u7ec6\u4fe1\u606f\uff1a\u7269\u5316\u89c6\u56fe url_counts_for_public_notes_by_judell \u4f9d\u8d56\u4e8e\u51fd\u6570 annotated_docs_for_user_in_group(text,text) \u63d0\u793a\uff1a\u4f7f\u7528 DROP ... CASCADE \u4e5f\u5220\u9664\u4f9d\u8d56\u5bf9\u8c61\u3002\u5f53\u51fd\u6570\u7684\u7b7e\u540d\u66f4\u6539\u65f6\uff0c\u5fc5\u987b\u91cd\u65b0\u521b\u5efa\u4f9d\u8d56\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u6211\u5c06\u5728\u4ee5\u540e\u7684\u5173\u4e8e\u96c6\u5408\u8fd4\u56de\u51fd\u6570\u7684\u4e00\u96c6\u4e2d\u8be6\u7ec6\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u8fd9\u4e9b\u51fd\u6570\u5c06\u5176\u7ed3\u679c\u52a8\u6001\u7f13\u5b58\u5728\u7269\u5316\u89c6\u56fe\u4e2d\u3002\u73b0\u5728\uff0c\u7531\u4e8e\u6211\u4eec\u521a\u521a\u521b\u5efa\u7684\u89c6\u56fe\u662f\u4e00\u4e2a\u4eba\u4e3a\u7684\u4e00\u6b21\u6027\u89c6\u56fe\uff0c\u53ea\u9700\u6309\u7167 Postgres \u7684\u5efa\u8bae\u4f7f\u7528 CASCADE \u5c06\u5176\u4e0e\u51fd\u6570\u4e00\u8d77\u5220\u9664\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u8fd4\u56de setof annotated_docs_for_user_in_group \u800c\u4e0d\u662f\u533f\u540d\u8868\u7684\u51fd\u6570\u7248\u672c(...) create function annotated_docs_for_user_in_group( _userid text, _groupid text) \u8fd4\u56de setof annotated_docs_for_user_in_group as $$ begin return query select count(n.*) as anno_count, n.userid, n.groupid, n.target_uri from notes_for_user_in_group(_userid, _groupid) n group by n.userid, n.groupid, n.target_uri order by anno_count desc;\u7ed3\u5c3e; $$ \u8bed\u8a00 plpgsql;\u7ed3\u679c\u4e0e\u4e0a\u8ff0\u76f8\u540c\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\u5462\uff1f\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4e0d\u4f1a\u3002\u58f0\u660e\u7c7b\u578b\u662f\u989d\u5916\u7684\u5f00\u9500\u3002\u5c31\u50cf\u89c6\u56fe\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u51fd\u6570\u4e00\u6837\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u7c7b\u578b\u3002\u8981\u4e86\u89e3\u4e3a\u4ec0\u4e48\u60a8\u53ef\u80fd\u4e0d\u60f3\u8981\u8fd9\u6837\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u5047\u8bbe\u6211\u4eec\u8fd8\u60f3\u8ddf\u8e2a\u6bcf\u4e2a URL \u7684\u6700\u65b0\u6ce8\u91ca\u3002\u521b\u5efa\u7c7b\u578b annotated_docs_for_user_in_group as ( count bigint, userid text, groupid text, url text, most_recent_note timestamp );\n\u9519\u8bef\uff1a\u65e0\u6cd5\u5220\u9664\u7c7b\u578b annotated_docs_for_user_in_group \u56e0\u4e3a\u5176\u4ed6\u5bf9\u8c61\u4f9d\u8d56\u4e8e\u5b83\u8be6\u7ec6\u4fe1\u606f\uff1a\u51fd\u6570 annotated_docs_for_user_in_group(text,text,text) \u4f9d\u8d56\u4e8e\u7c7b\u578b annotated_docs_for_user_in_group \u63d0\u793a\uff1a\u4f7f\u7528 DROP ... CASCADE \u4e5f\u5220\u9664\u4f9d\u8d56\u5bf9\u8c61\u3002\u8981\u91cd\u65b0\u5b9a\u4e49\u7c7b\u578b\uff0c\u60a8\u5fc5\u987b\u8fdb\u884c\u7ea7\u8054\u5220\u9664\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efa\u4f9d\u8d56\u4e8e\u7c7b\u578b\u7684\u51fd\u6570\u3002\u5982\u679c\u8fd9\u4e9b\u89c6\u56fe\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u5220\u9664\u7684\u51fd\u6570\uff0c\u5219\u5220\u9664\u4e5f\u4f1a\u7ea7\u8054\u5230\u5b83\u4eec\uff0c\u5e76\u4e14\u5b83\u4eec\u4e5f\u5fc5\u987b\u91cd\u65b0\u521b\u5efa\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u7ecf\u5e38\u7f16\u5199\u8fd4\u56de table(...) \u800c\u4e0d\u662f setof TYPE \u7684\u51fd\u6570\u3002\u5728\u52a8\u6001\u8bed\u8a00\u4e2d\uff0c\u4f7f\u7528\u65e0\u7c7b\u578b\u7684\u503c\u5305\u5f88\u65b9\u4fbf\uff1b\u6211\u53d1\u73b0\u5728 Postgres \u4e2d\u7f16\u5199\u51fd\u6570\u65f6\u4e5f\u662f\u5982\u6b64\u3002\u4f46\u662f\uff0c\u6709\u65f6\u58f0\u660e\u548c\u4f7f\u7528\u7c7b\u578b\u5f88\u6709\u7528\u3002\u6839\u636e\u6211\u76ee\u524d\u7684\u7ecf\u9a8c\uff0c\u5f53\u60a8\u53d1\u73b0\u81ea\u5df1\u5728\u51e0\u4e2a\u76f8\u5173\u51fd\u6570\u4e2d\u7f16\u5199\u76f8\u540c\u7684\u8fd4\u56de\u8868\uff08...\uff09\u8bed\u53e5\u65f6\uff0c\u5728 Postgres \u4e2d\u8fd9\u6837\u505a\u662f\u6700\u6709\u610f\u4e49\u7684\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06 annotated_docs_for_user_in_group \u7684\u7ed3\u679c\u7ec4\u5408\u5230\u4e00\u7ec4\u7528\u6237\u4e2d\u3002\u521b\u5efa\u51fd\u6570 annotated_docs_for_users_in_group(_userids text[], _groupid text) \u8fd4\u56de setof annotated_docs_for_user_in_group as $$ begin return query with userids as ( select unnest(_userids) as userid ) select a.* from userids u join annotated_docs_for_user_group) a.userid = concat(&#39;acct:&#39;, u.userid);\u7ed3\u5c3e; $$ \u8bed\u8a00 plpgsql;\u8fd9\u4e2a\u65b0\u51fd\u6570\u4f7f\u7528 SQL WITH \u5b50\u53e5\u521b\u5efa\u4e00\u4e2a\u516c\u7528\u8868\u8868\u8fbe\u5f0f (CTE)\uff0c\u8be5\u8868\u8fbe\u5f0f\u5c06\u5165\u7ad9\u7684 userid \u6570\u7ec4\u8f6c\u6362\u4e3a\u4e00\u4e2a\u4e34\u65f6\u7684\u7c7b\u4f3c\u8868\u7684\u5bf9\u8c61\uff0c\u540d\u4e3a userids\uff0c\u6bcf\u884c\u4e00\u4e2a userid\u3002\u65b0\u51fd\u6570\u7684\u5305\u88c5 SQL \u7136\u540e\u5c06\u8be5 CTE \u8fde\u63a5\u5230\u4ece annotated_docs_for_user_in_group \u8fd4\u56de\u7684\u96c6\u5408\u5e76\u8fd4\u56de\u8fde\u63a5\u7ed3\u679c\u3002 \uff08\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5faa\u73af\u53d8\u91cf\u5e76\u904d\u5386\u6570\u7ec4\u4ee5\u7d2f\u79ef\u7ed3\u679c\uff0c\u4ee5\u66f4\u7a0b\u5e8f\u5316\u7684\u65b9\u5f0f\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u65e9\u5148\u6211\u4f7f\u7528\u4e86\u8fd9\u79cd\u65b9\u6cd5\uff0c\u4f46\u5728 Postgres \u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u5f00\u59cb\u66f4\u559c\u6b22\u66f4\u7eaf\u7cb9\u7684\u7c7b\u4f3c SQL \u7684\u65b9\u6cd5\u9762\u5411\u96c6\u5408\u7684\u98ce\u683c\u3002\uff09\u5728\u4e24\u4e2a\u51fd\u6570\u4e4b\u95f4\u5171\u4eab\u4e00\u4e2a\u516c\u5171\u7c7b\u578b\u4f7f\u5b83\u4eec\u66f4\u6613\u4e8e\u7f16\u5199\u548c\u9605\u8bfb\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u5c06\u5b83\u4eec\u5f7c\u6b64\u8054\u7cfb\u8d77\u6765\uff0c\u5e76\u4e0e\u4ece\u5b83\u4eec\u884d\u751f\u7684\u6240\u6709\u89c2\u70b9\u8054\u7cfb\u8d77\u6765\u3002\u5982\u679c\u6211\u51b3\u5b9a\u5c06 most_recent_note \u6dfb\u52a0\u5230\u7c7b\u578b\u4e2d\uff0cPostgres \u5c06\u8981\u6c42\u6211\u8c03\u6574\u6240\u6709\u4f9d\u8d56\u7684\u51fd\u6570\u548c\u89c6\u56fe\uff0c\u4ee5\u4fbf\u4fdd\u6301\u4e00\u81f4\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u81f3\u5173\u91cd\u8981\u7684\u4fdd\u8bc1\uff0c\u6b63\u5982\u6211\u4eec\u5c06\u5728\u672a\u6765\u7684\u4e00\u96c6\u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0c\u5b83\u662f\u9ad8\u7ea7\u7f13\u5b58\u673a\u5236\u7684\u5173\u952e\u63a8\u52a8\u8005\u3002", "note_en": "In  episode 2 of this series I noted that the languages in which I\u2019m writing Postgres functions share a common type system. It took me a while to understand how types work in the context of Postgres functions that can return sets of records and can interact with tables and materialized views.\n  create function notes_for_user_in_group(\r _userid text, \r _groupid text)\rreturns setof annotation as $$\r begin\r return query \r select * from annotation\r where userid = concat(&#39;acct:&#39;, _userid)\r and groupid = _groupid;\r end;\r$$ language plpgsql;\n In this case the type that governs the returned set has already been defined: it\u2019s the schema for the  annotation table.\n  The function returns records matching a  userid and  groupid. I can now find the URLs of documents most recently annotated by me.\n    You might wonder why the function\u2019s parameters are prefixed with underscores. That\u2019s because variables used in functions can conflict with names of columns in tables. Since none of our column names begin with underscore, it\u2019s a handy differentiator. Suppose the function\u2019s signature were instead:\n   ERROR: column reference &#34;userid&#34; is ambiguous\rLINE 2: where userid = concat(&#39;acct:&#39;, userid)\r ^\rDETAIL: It could refer to either a PL/pgSQL variable or a table column.\n The table has  userid and  groupid columns that conflict with their eponymous variables. So for functions that combine variables and database values I prefix variable names with underscore.\n Set-returning functions can be called in any SQL SELECT context. In the example above that context is  psql, Postgres\u2019 powerful and multi-talented REPL (read-eval-print loop). For an example of a different context, let\u2019s cache the function\u2019s result set in a materialized view.\n create materialized view public_notes_for_judell as (\r select\r *\r from notes_for_user_in_group(&#39;judell@hypothes.is&#39;, &#39;__world__&#39;)\r order by created desc\r) with data;\n   The view\u2019s type is implicitly  annotation; its schema matches the one shown above; selecting  target_uri from the view is equivalent to selecting  target_uri from the  setof annotation returned from the function  notes_for_user_in_group.\n    It shows up a lot faster though! Every time you select the function\u2019s result set, the wrapped query has to run. For this particular example that can take a few seconds. It costs the same amount of time to create the view. But once that\u2019s done you can select its contents in milliseconds.\n Now let\u2019s define a function that refines  notes_for_user_in_group by reporting the count of notes for each annotated document.\n create function annotated_docs_for_user_in_group(\r _userid text, \r _groupid text)\rreturns table (\r count bigint,\r userid text,\r groupid text,\r url text\r) as $$\r begin\r return query\r select\r count(n.*) as anno_count,\r n.userid,\r n.groupid,\r n.target_uri\r from notes_for_user_in_group(_userid, _groupid) n\r group by n.userid, n.groupid, n.target_uri \r order by anno_count desc;\r end;\r$$ language plpgsql;\n Instead of returning a  setof some named type, this function returns an anonymous table. I\u2019ve aliased the set-returning function call  notes_for_user_in_group as  n and used the alias to qualify the names of selected columns. That avoids another naming conflict. If you write  userid instead of  n.userid in the body of the function and then call it, Postgres again complains about a conflict.\n ERROR: column reference &#34;userid&#34; is ambiguous\rLINE 3: userid,\r ^\rDETAIL: It could refer to either a PL/pgSQL variable or a table column.\n    count | userid | groupid | target_uri\r-------+---------------------------------------------\r 516 | judell@hypothes.is | __world__ | http://shakespeare.mit.edu/macbeth/full.html\r 73 | judell@hypothes.is | __world__ | https://www.independent.co.uk/news/world/asia/india-floods-bangladesh-nepal-deaths-millions-homeless-latest-news-updates-a7919006.html\r 51 | judell@hypothes.is | __world__ | https://www.usatoday.com/story/news/nation-now/2017/06/16/coconut-oil-isnt-healthy-its-never-been-healthy/402719001/\n  create materialized view url_counts_for_public_notes_by_judell as (\r select \r *\r from annotated_docs_for_user_in_group(\r &#39;judell@hypothes.is&#39;,\r &#39;__world__&#39;\r )\r) with data;\n   When you ask for the definition of that view using the  \\d command in  psql:\n   Column | Type \r---------+--------\r count | bigint\r userid | text\r groupid | text\r url | text\n Behind the scenes Postgres has created this definition from the anonymous table returned by the function.\n To revise the function so that it uses a named type, first create the type.\n    Now we can use that named type in the function. Since we\u2019re redefining the function, first drop it.\n   ERROR: cannot drop function annotated_docs_for_user_in_group(text,text) because other objects depend on it\rDETAIL: materialized view url_counts_for_public_notes_by_judell depends on function annotated_docs_for_user_in_group(text,text)\rHINT: Use DROP ... CASCADE to drop the dependent objects too.\n A view that depends on a function must be recreated when the function\u2019s signature changes. I\u2019ll say more about this in a future episode on set-returning functions that dynamically cache their results in materialized views. For now, since the view we just created is a contrived throwaway, just drop it along with the function by using  CASCADE as Postgres recommends.\n    Now we can recreate a version of the function that returns  setof annotated_docs_for_user_in_group instead of an anonymous  table(...)\n create function annotated_docs_for_user_in_group(\r _userid text, \r _groupid text)\rreturns setof annotated_docs_for_user_in_group as $$\r begin\r return query\r select\r count(n.*) as anno_count,\r n.userid,\r n.groupid,\r n.target_uri\r from notes_for_user_in_group(_userid, _groupid) n\r group by n.userid, n.groupid, n.target_uri \r order by anno_count desc;\r end;\r$$ language plpgsql;\n The results are the same as above. So why do it this way? In many cases I don\u2019t. It\u2019s extra overhead to declare a type. And just as a view can depend on a function, a function can depend on a type. To see why you might not want such dependencies, suppose we want to also track the most recent note for each URL.\n create type annotated_docs_for_user_in_group as (\r count bigint,\r userid text,\r groupid text,\r url text,\r most_recent_note timestamp\r);\n    ERROR: cannot drop type annotated_docs_for_user_in_group because other objects depend on it \rDETAIL: function annotated_docs_for_user_in_group(text,text,text) depends on type annotated_docs_for_user_in_group \rHINT: Use DROP ... CASCADE to drop the dependent objects too.\n To redefine the type you have to do a cascading drop and then recreate functions that depend on the type. If any of those views depend on dropped functions, the drop cascades to them as well and they also must be recreated. That\u2019s why I often write functions that return  table(...) rather than  setof TYPE. In dynamic languages it\u2019s convenient to work with untyped bags of values; I find the same to be true when writing functions in Postgres.\n Sometimes, though, it\u2019s useful to declare and use types. In my experience so far it makes most sense to do that in Postgres when you find yourself writing the same  returns table(...) statement in several related functions. Let\u2019s say we want a function that combines the results of  annotated_docs_for_user_in_group for some set of users.\n create function annotated_docs_for_users_in_group(_userids text[], _groupid text)\r returns setof annotated_docs_for_user_in_group as $$\r begin\r return query \r with userids as (\r select unnest(_userids) as userid\r )\r select \r a.*\r from userids u\r join annotated_docs_for_user_in_group(u.userid, _groupid) a\r on a.userid = concat(&#39;acct:&#39;, u.userid);\r end;\r$$ language plpgsql;\n This new function uses the SQL WITH clause to create a common table expression (CTE) that converts an inbound array of userids into a transient table-like object, named  userids, with one userid per row. The new function\u2019s wrapped SQL then joins that CTE to the set returned from  annotated_docs_for_user_in_group and returns the joined result.\n (You can alternatively do this in a more procedural way by creating a loop variable and marching through the array to accumulate results. Early on I used that approach but in the context of Postgres functions I\u2019ve come to prefer the more purely SQL-like set-oriented style.)\n Sharing a common type between the two functions makes them simpler to write and easier to read. More importantly it connects them to one another and to all views derived from them. If I do decide to add  most_recent_note to the type, Postgres will require me to adjust all depending functions and views so things remain consistent. That can be a crucial guarantee, and as we\u2019ll see in a future episode it\u2019s a key enabler of an advanced caching mechanism.", "posttime": "2021-08-08 12:50:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "postgres,\u51fd\u6570", "title": "\u4f7f\u7528 Postgres \u7c7b\u578b", "title_en": "Working with Postgres Types", "transed": 1, "url": "https://blog.jonudell.net/2021/07/27/working-with-postgres-types/", "via": "", "real_tags": ["postgres", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "3d929c57c8191d10d1ec3ea9db2c62ca.png", "infoid": 1072064, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eca\u5929\u8bfb\u4e86\u4e00\u4e9b\u5173\u4e8e\u4e00\u5bb6\u5927\u578b\u79d1\u6280\u516c\u53f8\u8ba1\u5212\u5b9e\u65bd\u4e00\u4e2a\u65b0\u7cfb\u7edf\u6765\u81ea\u52a8\u68c0\u6d4b\u548c\u62a5\u544a\u7528\u6237\u7167\u7247\u4e2d\u7684 CSAM \u7684\u6587\u7ae0\u3002\u603b\u7684\u6765\u8bf4\uff0c\u4ed6\u4eec\u5728 12 \u9875\u6280\u672f\u6458\u8981\u4e2d\u63cf\u8ff0\u7684\u7cfb\u7edf\u4f3c\u4e4e\u8bbe\u8ba1\u5f97\u5f88\u597d\uff0c\u5e76\u4e14\u53ef\u80fd\u5c3d\u53ef\u80fd\u63a5\u8fd1\u771f\u6b63\u7684\u9690\u79c1\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u5185\u5bb9\u76d1\u89c6\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u5f53\u6211\u542c\u5230\u5173\u4e8e\u7aef\u5230\u7aef\u52a0\u5bc6\u7684\u4f8b\u5916\u60c5\u51b5\u65f6\uff0c\u6211\u5fc3\u4e2d\u7684\u9ed1\u5ba2\u4e0d\u7981\u611f\u5230\u6709\u70b9\u60ca\u614c\uff08\u5e76\u4e0d\u662f\u8bf4\u4ed6\u4eec\u7684\u7167\u7247\u5b58\u50a8\u88ab\u5ba3\u4f20\u4e3a\u7aef\u5230\u7aef\u52a0\u5bc6\u5f00\u59cb\uff09\u4e0e\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u6280\u672f\u6982\u8ff0\u786e\u5b9e\u8bf4\u6240\u6709\u7167\u7247\u90fd\u4f7f\u7528\u7528\u6237\u8bbe\u5907\u968f\u673a\u751f\u6210\u7684 - \u9608\u503c\u53ef\u7834\u89e3 - \u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\uff09\u3002\u56e0\u6b64\uff0c\u6211\u6765\u200b\u200b\u5230\u8fd9\u91cc\u6982\u8ff0\u6211\u8ba4\u4e3a\u5bf9\u8be5\u7cfb\u7edf\u7684\u5bc6\u7801\u5f3a\u5ea6/\u9690\u79c1\u4fdd\u8bc1\u6700\u73b0\u5b9e\u7684\u653b\u51fb\uff0c\u5e76\uff08\u5e0c\u671b\uff09\u4e86\u89e3\u6211\u4e3a\u4ec0\u4e48\u9519\u4e86\u6216\u6211\u5ffd\u7565\u4e86\u4ec0\u4e48\u3002\u5047\u8bbe\u8fd9\u5bb6\u516c\u53f8\u66fe\u7ecf\u906d\u53d7\u8fc7\u6570\u636e\u6cc4\u9732\uff1a\u8fd9\u79cd\u60c5\u51b5\u5f00\u59cb\u65f6\u4e0d\u592a\u53ef\u80fd\u53d1\u751f\uff0c\u4f46\u5e76\u975e\u95fb\u6240\u672a\u95fb\u3002\u7531\u4e8e\u8fd9\u6b21\u6570\u636e\u6cc4\u9732\uff0c\u8bb8\u591a\u7528\u6237\u7684\u7167\u7247\uff08\u52a0\u5bc6\u683c\u5f0f\uff09\u88ab\u6cc4\u9732\u3002\u5982\u679c\u771f\u6b63\u7684\u7aef\u5230\u7aef\u52a0\u5bc6\u5230\u4f4d\uff0c\u8fd9\u4e0d\u4f1a\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u9690\u79c1\u95ee\u9898\uff0c\u56e0\u4e3a\u6240\u6709\u7167\u7247\u90fd\u5c06\u4f7f\u7528\u53ea\u6709\u6700\u7ec8\u7528\u6237\u8bbe\u5907\u77e5\u9053\u7684\u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u89e3\u5bc6\u4e92\u8054\u7f51\u3002\u7136\u800c\uff0c\u5728\u8fd9\u4e2a\u65b0\u7cfb\u7edf\u4e2d\uff0c\u6211\u7684\u7406\u89e3\u662f\u7167\u7247\uff0c\u6216\u8005\u81f3\u5c11\u662f\u5b83\u4eec\u7684\u89c6\u89c9\u884d\u751f\u7269\uff08\u6211\u627e\u4e0d\u5230\u5b9a\u4e49\uff0c\u867d\u7136\u6211\u5047\u8bbe\u5b83\u7c7b\u4f3c\u4e8e\u7f29\u7565\u56fe\uff09\u88ab\u52a0\u5bc6\u4e24\u6b21\uff0c\u5916\u5c42\u88ab\u52a0\u5bc6\u901a\u8fc7\u4ece\u7167\u7247\u7684 NeuralHash \u6d3e\u751f\u7684\u5bc6\u94a5\u3002 NeuralHash \u88ab\u63cf\u8ff0\u4e3a\u4e00\u79cd\u6563\u5217\u7b97\u6cd5\uff0c\u80fd\u591f\u4e3a\u540c\u4e00\u56fe\u50cf\u63d0\u4f9b\u76f8\u540c\u7684\u6563\u5217\uff0c\u5373\u4f7f\u8be5\u56fe\u50cf\u7ecf\u8fc7\u88c1\u526a\u3001\u8c03\u6574\u5927\u5c0f\u3001\u989c\u8272\u8c03\u6574\u3001\u538b\u7f29\u7b49\u3002\u6563\u5217\u7684\u4e3b\u8981\u76ee\u7684\u662f\u786e\u4fdd\u76f8\u540c\u548c\u89c6\u89c9\u4e0a\u76f8\u4f3c\u7684\u56fe\u50cf\u4ea7\u751f\u76f8\u540c\u7684\u54c8\u5e0c\u503c\uff0c\u800c\u5f7c\u6b64\u4e0d\u540c\u7684\u56fe\u50cf\u4ea7\u751f\u4e0d\u540c\u7684\u54c8\u5e0c\u503c\u3002\u4f8b\u5982\uff0c\u7ecf\u8fc7\u8f7b\u5fae\u88c1\u526a\u6216\u8c03\u6574\u5927\u5c0f\u7684\u56fe\u50cf\u5e94\u88ab\u89c6\u4e3a\u4e0e\u5176\u539f\u59cb\u56fe\u50cf\u76f8\u540c\u5e76\u5177\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u3002\u8fd9\u5728\u7406\u8bba\u4e0a\u5f88\u68d2\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u7528\u6237\u62cd\u6444\u7684\u6240\u6709\uff08\u53ef\u80fd\u662f\u552f\u4e00\u7684\uff09\u7167\u7247\u90fd\u5c06\u4f7f\u7528\u5f3a\u5927\u7684\u3001\u72ec\u7279\u7684\u79d8\u5bc6\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ee5\u786e\u4fdd\u5b83\u4eec\u7684\u79c1\u5bc6\u6027\u548c\u5b89\u5168\u6027\u3002\n\u4f46\u662f\uff0c\u5f53\u7528\u6237\u5b58\u50a8\u4e0d\u552f\u4e00\u7684\u7167\u7247\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u4f8b\u5982\u4e00\u4e2a\u6d41\u884c\u7f51\u7ad9\u7684\u622a\u56fe\uff0c\u4e00\u4e2a\u5728\u4e92\u8054\u7f51\u4e0a\u6d41\u4f20\u7684\u6a21\u56e0\u7b49\u7b49\uff1f\u5982\u4f55\u963b\u6b62\u653b\u51fb\u8005\u751f\u6210\u6d41\u884c\u6a21\u56e0\u7684 NeuralHash\uff0c\u5bfc\u51fa\u5bc6\u94a5\uff0c\u7136\u540e\u66b4\u529b\u7834\u89e3\u6cc4\u9732\u7684\u6570\u636e\u76f4\u5230\u6210\u529f\u89e3\u5bc6\u6761\u76ee\uff0c\u4ece\u800c\u9a8c\u8bc1\u7279\u5b9a\u7528\u6237\u4e91\u7167\u7247\u5e93\u4e2d\u7684\u5185\u5bb9\uff0c\u5e76\u964d\u4f4e\u4ed6\u4eec\u7684\u9690\u79c1\u7ea7\u522b\uff1f\u6216\u8005\uff0c\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u653b\u51fb\u8005\u559c\u6b22\u82f9\u679c\uff0c\u5e76\u4e14\u771f\u7684\u975e\u5e38\u60f3\u627e\u5230\u82f9\u679c\u7684\u7167\u7247\u3002\u662f\u4ec0\u4e48\u963b\u6b62\u4ed6\u4eec\u8ba9 AI \u751f\u6210\u51e0\u767e\u4e07\u5f20\u82f9\u679c\u7167\u7247\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u54c8\u5e0c\u5904\u7406\uff0c\u83b7\u53d6\u5bc6\u94a5\uff0c\u7136\u540e\u66b4\u529b\u7834\u89e3\u53ef\u80fd\u5f88\u5927\u7684\u6cc4\u6f0f\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u9879\uff1f\u4e00\u4e2a\u82f9\u679c\u4e0d\u53ef\u80fd\u6709\u90a3\u4e48\u591a\u6392\u5217\uff0c\u5bf9\u5427\uff1f\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u60a8\u4e0d\u4f1a\u627e\u5230\u6240\u6709\u7684\u82f9\u679c\u7167\u7247\uff0c\u4f46\u6211\u8ba4\u4e3a\u60a8\u81f3\u5c11\u80fd\u591f\u83b7\u5f97\u4e00\u4e9b\u53ef\u89e3\u5bc6\u7684\u5339\u914d\u9879\u3002\u8be5\u516c\u53f8\u672c\u8eab\u751a\u81f3\u5728\u5176\u4e00\u7bc7\u8bba\u6587\u4e2d\u900f\u9732\uff0c\u5728\u5339\u914d\u65f6\u51fa\u73b0\u8bef\u62a5\u7684\u53ef\u80fd\u6027\u975e\u96f6\uff0c\u56e0\u6b64\u4ed6\u4eec\u5f15\u5165\u4e86\u9608\u503c\u79d8\u5bc6\u5171\u4eab\uff08\u5373\u9700\u8981\u5bf9\u5176\u201c\u5df2\u77e5\u9519\u8bef\u201d\u8fdb\u884c\u591a\u6b21\u5339\u914d\u201c\u5728\u5176\u5185\u90e8\u52a0\u5bc6\u7ea7\u522b\u88ab\u7834\u574f\u4e4b\u524d\u6570\u636e\u5e93......\u63a5\u4e0b\u6765\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\uff0c\u4ee5\u5c06\u8bef\u62a5\u7684\u53ef\u80fd\u6027\u964d\u4f4e\u5230\u4e07\u4ebf\u5206\u4e4b\u4e00\u3002\u5bf9\u6211\u800c\u8a00\uff0c\u7ed9\u5b9a\u7684\u7167\u7247\u58f0\u97f3\u5728\u53ef\u66b4\u529b\u7834\u89e3\u8303\u56f4\u5185\uff0c\u4efb\u4f55\u51fa\u73b0\u8bef\u62a5\u5339\u914d\u7684\u53ef\u80fd\u6027\u90fd\u5927\u5927\u4f4e\u4e8e\u4e07\u5206\u4e4b\u4e00\uff0c\u5c24\u5176\u662f\u5982\u679c\u60a8\u5df2\u7ecf\u77e5\u9053\u8981\u67e5\u627e\u7684\u7167\u7247\u7c7b\u578b\u3002\u6700\u540e\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u9608\u503c\u52a0\u5bc6\u7684\u5185\u5c42\uff0c\u5b83\u57fa\u672c\u4e0a\u8981\u6c42\u5728\u6784\u5efa\u89e3\u5bc6\u5185\u5c42\u7684\u5bc6\u94a5\u4e4b\u524d\u5148\u89e3\u5bc6\u591a\u5f20\u7167\u7247\u7684\u5916\u5c42\u3002\u4f46\u662f\u518d\u4e00\u6b21\uff0c\u6839\u636e\u9608\u503c\u5927\u5c0f\uff08\u5fc5\u987b\u975e\u5e38\u4f4e\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5c0f\u4e8e\u67d0\u4eba\u53ef\u80fd\u62e5\u6709\u7684\u5b9e\u9645 CSAM \u6570\u91cf\uff09\uff0c\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u4e00\u4e2a\u5927\u969c\u788d\uff1a\u60a8\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u4f8b\u5982\uff0c\u5728\u6574\u4e2a\u4e91\u7167\u7247\u5b58\u50a8\u5e93\u4e2d\u5b58\u50a8\u4e86 10 \u4e2a\u5e38\u89c1\u6a21\u56e0\u7684\u7528\u6237\uff0c\u73b0\u5728\u60a8\u5df2\u7ecf\u6784\u5efa\u4e86\u8be5\u5bc6\u94a5\u3002\u6839\u636e\u8be5\u8bba\u6587\uff0c\u5728\u7b2c\u4e00\u5c42\u52a0\u5bc6\u4e2d\uff0c\u7528\u6237\u7684\u6240\u6709\u7167\u7247\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u94a5\u3002\u5f52\u6839\u7ed3\u5e95\uff0c\u6211\u770b\u5230\u4e86\u8be5\u7cfb\u7edf\u5728\u53d1\u751f\u6570\u636e\u6cc4\u9732\u4e8b\u4ef6\u65f6\u7684\u5b89\u5168\u548c\u9690\u79c1\u4fdd\u8bc1\uff0c\u4e3b\u8981\u95ee\u9898\u662f\uff1aNeuralHash\u3002\u5982\u679c NeuralHash \u5177\u6709\u8db3\u591f\u9ad8\u7684\u8bef\u62a5\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fdb\u884c\u9006\u5411\u5de5\u7a0b\u6216\u6cc4\u9732\u6216\u516c\u5f00\uff08\u5982\u679c\u5c1a\u672a\u516c\u5f00\uff09\uff0c\u90a3\u4e48\u8fd9\u5bb6\u5927\u578b\u79d1\u6280\u516c\u53f8\u80fd\u5426\u771f\u6b63\u4fdd\u8bc1\u5176\u7528\u6237\u7684\u79c1\u4eba\u7167\u7247\u5c06\u65e0\u6761\u4ef6\u4fdd\u7559\u79c1\u4eba\u7684\uff0c\u53ea\u8981\u4ed6\u4eec\u4e0d\u662f CSAM\uff1f\u6211\u5ffd\u7565\u4e86\u54ea\u4e9b\u52a0\u5bc6\u4fdd\u62a4\uff0c\u4f7f\u6211\u4e0a\u9762\u63cf\u8ff0\u7684\u653b\u51fb\u53d8\u5f97\u4e0d\u53ef\u80fd\uff1f\u6211\u9519\u8fc7\u4e86\u4ec0\u4e48\uff1f\u4f60\u770b\u5230\u4efb\u4f55\u5176\u4ed6\u6f5c\u5728\u7684\u7f3a\u9677\u5417\uff1f\u66f4\u65b0\uff1a\u6211\u4e0d\u786e\u5b9a\u662f\u5426\u53ef\u4ee5\u63a5\u53d7\u6216\u4e0d\u5177\u4f53\u547d\u540d\u516c\u53f8\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u8c28\u614e\u884c\u4e8b\uff0c\u4e0d\u8fd9\u6837\u505a\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u6211\u786e\u5b9e\u770b\u5230\u4e00\u4e9b\u8bc4\u8bba\u8981\u6c42\u63d0\u4f9b\u6765\u6e90\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u3002\u6211\u5e0c\u671b\u8fd9\u6709\u5e2e\u52a9\uff01", "note_en": "I was doing some reading today about a major tech company planning to implement a new system for automatically detecting and reporting CSAM in users&#39; photos. Overall, the system as described in their 12-page technical summary seems to be designed quite well, and may be as close as you can get to true privacy, while still allowing for content surveillance.\n That being said, the hacker in me can&#39;t help but feel a little alarmed when it hears about exceptions to what could otherwise be end-to-end encryption (not that their photo storage is advertised as end-to-end encrypted to begin with, however their technical overview does say that all of the photos are encrypted with a\u2014 threshold breakable\u2014key randomly generated by the user&#39;s device). Therefore, I came here to outline what I see as the most realistic attack on the cryptographic strength/privacy guarantees of this system, and to (hopefully) learn why I am wrong or what I have overlooked.\n  Let&#39;s say that this company ever suffers a data breach: an unlikely situation to begin with, but not unheard of. As a result of this data breach, many users&#39; photos (in encrypted format) are leaked. If true end-to-end encryption were in place, this would not be a major privacy concern, as all photos would be encrypted with a key known only to the end users&#39; devices, and therefore would not be realistically decryptable by anyone on the internet.\n In this new system, however, it is my understanding that photos, or at least their  visual derivatives (which I could not find a definition for though  I&#39;m assuming is similar to thumbnails), are encrypted twice, with the outer layer being encrypted by a key derived from the NeuralHash of the photo.\n NeuralHash is described as a hashing algorithm capable of providing the same hash for the same image, even after that image has undergone cropping, resizing, color adjustments, compression, etc.\n  The main purpose of the hash is to ensure that identical and visually similar images result in the same hash, and images that are different from one another result in different hashes. For example, an image that has been slightly cropped or resized should be considered identical to its original and have the same hash.\n This is great in theory, because it means that all (presumably unique) photos taken by users will be encrypted with strong, unique secrets, keeping them private and secure.\n But, what happens when a user stores a photo that isn&#39;t unique? For example a screenshot from a popular website, a meme circulating the internet, etc.? What&#39;s to stop an attacker from generating a NeuralHash of popular memes, deriving a key, then bruteforcing the leaked data until it successfully decrypts an entry, thus verifying the contents within a specific user&#39;s cloud photo library, and degrading their level of privacy?\n Or, for another example, let&#39;s say the attacker  loves apples, and really, really wants to find photos of apples. What&#39;s to stop them from having an AI generate a few million photos of an apple, hashing them, deriving keys, and then bruteforcing the presumably large leak until it finds a match? There can&#39;t be  that many permutations of an apple, can there? Like sure, you&#39;re not going to find all of the apple photos, but I would think that you&#39;d be able to at least get  some decryptable matches.\n This company itself even reveals in one of its papers that there is a non-zero chance of false positives when it comes to matches, and that they&#39;ve therefore introduced threshold secret sharing (i.e. needing to have multiple matches to their &#34;known-bad&#34; database before their inner level of encryption can be broken... more on that next), to reduce the chance of false positives down to one in a trillion. A significantly less than a one in a trillion chance of having a false positive match on any, given photo sounds within bruteforceable range to me, especially if you already know what type of photo you&#39;re looking for.\n On a final note, there is an inner layer of threshold encryption which basically requires that the outer layers of multiple photos be decrypted before the key to decrypt the inner layer can be constructed. But once again, depending on the threshold size (which must be quite low, as it needs to be less than a realistic amount of CSAM that someone could have), it doesn&#39;t seem like a large obstacle: you just need to find a user who has, say, ten common memes stored in their entire cloud photo storage library, and you&#39;ve now constructed that key. According to the paper, that same key is used across  all of a user&#39;s photos for that first layer of encryption.\n At the end of the day, I see the security and privacy guarantees of this system in the event of a data breach hanging onto one, main thing: the NeuralHash.\n If the NeuralHash has a high-enough false positive rate, and can be reverse engineered or gets leaked or is made public (if it isn&#39;t already), then can this major tech company truly guarantee its users that their private photos will unconditionally remain private, as long as they&#39;re not CSAM? What cryptographic protections have I overlooked, that make an attack like the one I described above impossible? What am I missing? Do you see any other potential flaws?\n  Update: I was not sure if it were considered acceptable or not to specifically name the company, so I decided to err on the side of caution and not do so. That being said, I did see a few comments asking for the source, so  here it is. I hope this helps!", "posttime": "2021-08-08 12:50:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u89e3,apple,csam,\u7167\u7247", "title": "Apple \u7684\u65b0 CSAM \u4fdd\u62a4\u63aa\u65bd\u53ef\u80fd\u4f1a\u4f7f iCloud \u7167\u7247\u53d8\u5f97\u53ef\u66b4\u529b\u7834\u89e3", "title_en": "Apple's New CSAM Protections May Make iCloud Photos Bruteforceable", "transed": 1, "url": "https://crypto.stackexchange.com/questions/93423/how-unique-is-a-neuralhash", "via": "", "real_tags": ["\u7834\u89e3", "apple", "csam", "\u7167\u7247"]}, {"category": "", "categoryclass": "", "imagename": "3091a8bc82c4b4fe5de7d661c8e1aabc.png", "infoid": 1072063, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bb8\u591a\u6700\u8fd1\u7684\u534f\u8bae\uff08\u4f8b\u5982\u52a0\u5bc6 DNS \u548c HTTPS\uff09\u5bf9 Web \u67b6\u6784\u7684\u5173\u952e\u90e8\u5206\u8fdb\u884c\u52a0\u5bc6\uff0c\u5426\u5219\u7a83\u542c\u8005\u53ef\u80fd\u4f1a\u5229\u7528\u8fd9\u4e9b\u90e8\u5206\u6765\u63a8\u65ad\u7528\u6237\u7684\u6570\u636e\u3002\u4f46\u52a0\u5bc6\u4e0d\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u9690\u79c1\uff0c\u5c24\u5176\u662f\u5728\u5143\u6570\u636e\u65b9\u9762\u3002 DNS-over-HTTPS (DoH) \u6216\u52a0\u5bc6\u670d\u52a1\u5668\u540d\u79f0\u6307\u793a (ESNI) \u7b49\u65b0\u5174\u6807\u51c6\u53ef\u4ee5\u4fdd\u62a4 DNS \u67e5\u8be2\u548c TLS SNI \u6269\u5c55\u7684\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u67e5\u770b\u6e90\u81ea\u7528\u6237\u8bbe\u5907\u7684\u6d41\u91cf\u4e0a\u7684\u76ee\u6807 IP \u5730\u5740\u6765\u786e\u5b9a\u7528\u6237\u6b63\u5728\u8bbf\u95ee\u54ea\u4e9b\u7f51\u7ad9\uff0c\u8fd9\u4e9b IP \u5730\u5740\u4f5c\u4e3a TLS \u63e1\u624b\u7684 ClientHello \u7684\u4e00\u90e8\u5206\u53ef\u89c1\u3002\u8be5\u5143\u6570\u636e\u53ef\u4ee5\u88ab\u591a\u4e2a\u4ee3\u7406\u5229\u7528\u548c\u8d27\u5e01\u5316\uff0c\u4ee5\u5206\u6790\u548c\u5b9a\u4f4d\u7528\u6237\u8fdb\u884c\u5e7f\u544a\u3002\u6211\u4eec\u5728\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u8fdb\u884c\u4e86\u4e00\u9879\u6d4b\u91cf\u7814\u7a76\uff0c\u4ee5\u4e86\u89e3\u653b\u51fb\u8005\u662f\u5426\u53ef\u4ee5\u4ec5\u4f7f\u7528\u6765\u81ea\u7528\u6237\u8bbe\u5907\u7684\u4e00\u7ec4 IP \u5730\u5740\u63a8\u65ad\u51fa\u7528\u6237\u5c1d\u8bd5\u8fde\u63a5\u7684\u7f51\u7ad9\u3002\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e Chromium \u6784\u5efa\u7684\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684\u7f51\u7edc\u722c\u866b MIDA\uff0c\u5bf9\u53c2\u4e0e\u5448\u73b0 Alexa \u524d 100 \u4e07\u4e2d\u6700\u53d7\u6b22\u8fce\u7f51\u7ad9\u7684\u6240\u6709\u57df\u6267\u884c DNS \u89e3\u6790\u3002\u7531\u4e8e\u5728\u8bf7\u6c42\u7f51\u7ad9\u65f6\u6267\u884c\u7684\u5b50\u67e5\u8be2\uff0c\u6211\u4eec\u8fd8\u8003\u8651\u4e86\u4ece\u4e0d\u540c Web \u670d\u52a1\u5668\u52a0\u8f7d\u7684\u51e0\u4e2a\u8d44\u6e90\u3002\u8054\u7cfb\u7684\u6240\u6709\u8fd9\u4e9b IP \u7684\u96c6\u5408\u79f0\u4e3a\u7f51\u7ad9\u7684\u9875\u9762\u52a0\u8f7d\u6307\u7eb9 (PLF)\u3002\u6211\u4eec\u91c7\u7528\u4e86\u4e00\u4e2a\u5bf9\u624b\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u65e8\u5728\u901a\u8fc7\u6536\u96c6\u5404\u79cd\u5019\u9009\u57df\u7684\u6b63\u5411\u6620\u5c04\u6765\u6062\u590d\u57df\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528\u7b54\u6848\u6765\u63a8\u65ad\u7ed9\u5b9a IP \u7684\u53cd\u5411\u6620\u5c04\u3002\n\u56fe 2 \u2014 PLF \u5982\u4f55\u89e3\u91ca\u5728 Web \u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u4e0a\u52a0\u8f7d\u7684\u591a\u4e2a\u8d44\u6e90\u7684\u56fe\u5f62\u8868\u793a\u3002\u514d\u8d23\u58f0\u660e\uff1a\u4ee5\u4e0a\u7f51\u7ad9\u4ec5\u7528\u4f5c\u793a\u4f8b\u3002\u5bf9\u4e8e\u6211\u4eec\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a IP \u5730\u5740\uff0c\u6211\u4eec\u8ba1\u7b97\u4e86\u6620\u5c04\u5230\u5b83\u7684\u57df\u6570\u91cf\u4f5c\u4e3a\u5176\u533f\u540d\u96c6\u3002\u6211\u4eec\u6570\u636e\u96c6\u4e2d\u7684\u4e00\u5c0f\u90e8\u5206 IP \u5730\u5740 (47.6%) \u5bf9\u5e94\u4e8e\u5355\u4e2a\u57df\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u57df\uff0c\u653b\u51fb\u8005\u77e5\u9053\u7528\u6237\u53ef\u80fd\u67e5\u627e\u7684\u6f5c\u5728\u5730\u5740\u96c6\u5e76\u80fd\u591f\u5bf9\u5176\u6267\u884c\u524d\u5411\u67e5\u627e\uff0c\u52a0\u5bc6 DNS \u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u597d\u5904\u3002\u5927\u7ea6 20% \u7684\u8bf7\u6c42\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u552f\u4e00\u6807\u8bc6\uff1b\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cs (XHR) \u4e0d\u592a\u53ef\u80fd\u6620\u5c04\u5230\u7ad9\u70b9\u552f\u4e00\u7684 IP \u5730\u5740\uff0c\u800c\u6837\u5f0f\u8868\u548c\u56fe\u50cf\u66f4\u6709\u53ef\u80fd\u3002\u56fe 3 \u2014 \u6b64\u56fe\u5c06\u751f\u6210\u7684\u533f\u540d\u96c6\u7684\u6570\u91cf\u6620\u5c04\u5230\u5b83\u4eec\u7684\u5927\u5c0f\uff0c\u8868\u660e\u51e0\u4e4e\u4e00\u534a\u7684\u533f\u540d\u96c6\u7684\u5927\u5c0f\u4e3a 1\uff0c\u56e0\u6b64\u53ef\u4ee5\u552f\u4e00\u5730\u6620\u5c04\u5230\u7f51\u7ad9\u3002\u6211\u4eec\u6570\u636e\u96c6\u4e2d\u5927\u7ea6 68% \u7684 IP \u662f\u5355\u4e2a\u7ad9\u70b9\u72ec\u6709\u7684\uff0c\u603b\u5171\u6709 402,524 (42.6%) \u4e2a\u7ad9\u70b9\u4f7f\u7528\u81f3\u5c11\u4e00\u79cd\u8d44\u6e90\uff0c\u5176\u57df\u6620\u5c04\u5230\u7ad9\u70b9\u552f\u4e00 IP \u5730\u5740\u3002\u5927\u591a\u6570\u7f51\u7ad9 (95.7%) \u90fd\u6709\u552f\u4e00\u7684 PLF\uff0c\u8fd9\u8868\u660e\u5b58\u5728\u4ec5\u4ece\u6240\u8054\u7cfb\u7684 IP \u5730\u5740\u5217\u8868\u4e2d\u8bc6\u522b\u51fa\u7528\u6237\u6b63\u5728\u8bbf\u95ee\u8be5\u7f51\u7ad9\u7684\u98ce\u9669\u3002\u56fe 4 - \u5982\u4f55\u5c06\u9875\u9762\u52a0\u8f7d\u6307\u7eb9\u7528\u4f5c\u7b7e\u540d\uff0c\u901a\u8fc7\u7b80\u5355\u5730\u67e5\u770b IP \u5730\u5740\u6765\u8bc6\u522b\u8bf7\u6c42\u7684\u7f51\u9875\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff0c\u5728 Web \u6d4f\u89c8\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0cDNS \u548c SNI \u9690\u79c1\u5bf9\u77e5\u9053\u7528\u6237\u53ef\u80fd\u8bbf\u95ee\u7684\u4e00\u7ec4\u5408\u7406\u7ad9\u70b9\uff08\u5373\u4f7f\u8be5\u7ec4\u975e\u5e38\u5927\uff09\u5e76\u4e14\u6267\u884c\u524d\u5411\u67e5\u627e\u4ee5\u63a8\u65ad\u7684\u5bf9\u624b\u63d0\u4f9b\u4e86\u6709\u9650\u7684\u4fdd\u62a4\u4e0e\u7ed9\u5b9a IP \u5730\u5740\u5173\u8054\u7684\u57df\u540d\u548c\u7ad9\u70b9\u3002\n\u771f\u5b9e\u4e16\u754c\u7684\u63a8\u7406\u4e0e\u6211\u4eec\u7684\u5c01\u95ed\u4e16\u754c\u5047\u8bbe\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u5bf9\u624b\u53ef\u4ee5\u4f7f\u7528\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u96c6\u3002\u5728\u6211\u4eec\u7684\u7814\u7a76\u4e2d\u53ef\u80fd\u770b\u8d77\u6765\u72ec\u4e00\u65e0\u4e8c\u7684 PLF \u7b7e\u540d\u5b9e\u9645\u4e0a\u53ef\u80fd\u5c5e\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u7f51\u7ad9\uff1b\u8fd9\u662f\u4e50\u89c2\u7684\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\u6620\u5c04\u5230\u552f\u4e00\u57df\u7684 IP \u5730\u5740\uff0c\u8fd9\u4e9b IP \u5730\u5740\u53ef\u80fd\u7528\u4e8e\u552f\u4e00\u5730\u914d\u7f6e\u7f51\u7ad9\u3002\u6211\u4eec\u786e\u5b9e\u53d1\u73b0\u5185\u5bb9\u5206\u53d1\u7f51\u7edc (CDN) \u901a\u8fc7\u5c06\u66f4\u591a\u57df\u5408\u5e76\u5230\u540c\u4e00 IP \u5730\u5740\u6765\u63d0\u4f9b\u989d\u5916\u4fdd\u62a4\u7684\u91cd\u8981\u673a\u4f1a\u3002 HTTP/2 \u8fde\u63a5\u5408\u5e76\u53ef\u4ee5\u6291\u5236\u6765\u81ea\u9875\u9762\u52a0\u8f7d\u8ddf\u8e2a\u7684\u8fde\u63a5\u5e76\u6709\u52a9\u4e8e\u6539\u5584\u7528\u6237\u9690\u79c1\u3002\u8981\u4e86\u89e3\u6709\u5173\u6211\u4eec\u5de5\u4f5c\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u89c2\u770b\u6211\u4eec\u5728 2019 \u5e74\u5e94\u7528\u7f51\u7edc\u7814\u7a76\u7814\u8ba8\u4f1a\u4e0a\u7684\u6f14\u8bb2\u3002 Simran Patil \u662f\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u5384\u5df4\u7eb3\u9999\u69df\u5206\u6821\u8ba1\u7b97\u673a\u5de5\u7a0b\u4e13\u4e1a\u7684\u7855\u58eb\u751f\u3002\u5979\u662f\u7531\u4f0a\u5229\u8bfa\u4f0a\u5dde\u5b89\u5168\u548c\u9690\u79c1\u7814\u7a76\u4e2d\u5fc3\u7684\u987e\u95ee Nikita Borisov \u6559\u6388\u9886\u5bfc\u7684 Hatswitch \u7814\u7a76\u5c0f\u7ec4\u7684\u6210\u5458\u3002", "note_en": "A number of recent protocols such as Encrypted DNS and HTTPS encrypt critical parts of the web architecture, which can otherwise be exploited by eavesdroppers to infer users\u2019 data. But encryption may not necessarily guarantee privacy, especially when it comes to metadata.\n Emerging standards such as DNS-over-HTTPS (DoH) or Encrypted Server Name Indication (ESNI) can protect the content of both DNS queries and the TLS SNI extensions. However, it might still be possible to determine which websites users are visiting by simply looking at the destination IP addresses on the traffic originating from users\u2019 devices, which are visible as a part of the ClientHello of the TLS Handshake.\n This metadata can be exploited and monetized by several agents to profile and target the user for advertising.\n   We, at the University of Illinois, did a measurement study to understand whether an adversary can deduce the websites a user is trying to connect to, using a set of IP addresses originating from the user\u2019s device alone.\n Using a highly configurable web crawler built on top of Chromium called MIDA, we performed DNS resolution on all domains involved in rendering the most popular websites listed in the Alexa Top 1 Million.\n   We also accounted for several resources that get loaded from different web servers due to the sub-queries performed when a website is requested. The set of all these IPs contacted is referred to as the Page Load Fingerprint (PLF) of the website.\n We adopted the model of an adversary who aims to recover domain information by collecting forward mappings of various candidate domains, and then using the answers to infer the reverse mapping of a given IP.\n  Figure 2 \u2014 A graphical representation of how a PLF accounts for the several resources loaded on part of a web request. Disclaimer: The above website is used just as an example.\n  For each IP address in our dataset we calculated the number of domains that map to it as its anonymity set.\n A slight minority of the IP addresses in our data set (47.6%) correspond to a single domain. For these domains, where the adversary knows the set of potential addresses a user may look up and is able to perform forward lookups on them, encrypted DNS provides little to no benefit. About 20% of the requests are uniquely identifying in this way; notably,  s (XHRs) are less likely to map to site-unique IP addresses whereas stylesheets and images are more likely.\n  Figure 3 \u2014 This graph maps the number of anonymity sets generated to their sizes indicating that almost half the anonymity sets are of size 1 and thus, can be uniquely mapped to a website.\n Around 68% of the IPs in our data set are unique to a single site, and a total of 402,524 (42.6%) sites use at least one resource whose domain maps to a site-unique IP address. The majority of websites (95.7%) have a unique PLF, suggesting there is a risk of identifying that a user is visiting the site solely from a list of contacted IP addresses.\n  Figure 4 \u2014\u00a0How a page load fingerprint can be used as a signature to identify the webpage that was requested by simply looking at the IP addresses.\n We thus conclude that, in the context of web browsing, DNS and SNI privacy offers limited protection against an adversary who knows a plausible set of sites a user might visit (even if the set is quite large), and who performs forward lookups to infer the domain names and sites associated with given IP addresses.\n The real-world inference will be slightly different from our closed-world assumption because a wider dataset will be available to the adversary. It can happen that a PLF signature that might seem unique in our study can actually belong to two different websites; it\u2019s optimistic but we have identified IP addresses that have mappings to unique domains and these can potentially be used to uniquely profile websites.\n We do identify a significant opportunity for content distribution networks (CDNs) to offer additional protection by coalescing more domains onto the same IP address. HTTP/2 connection coalescing can suppress connections from the page load trace and contribute to improved user privacy.\n To learn more about our work watch our presentation at the  Applied Networking Research Workshop 2019.\n  Simran Patil is a Masters student in Computer Engineering at the University of Illinois at Urbana-Champaign. She is a part of the Hatswitch research group led by her advisor, Prof. Nikita Borisov, at Security and Privacy Research at Illinois.", "posttime": "2021-08-08 12:50:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5730\u5740,ip", "title": "\u60a8\u53ef\u4ee5\u4ece IP \u5730\u5740\u4e2d\u5b66\u5230\u4ec0\u4e48\uff1f (2019)", "title_en": "What can you learn from an IP address? (2019)", "transed": 1, "url": "https://blog.apnic.net/2019/08/23/what-can-you-learn-from-an-ip-address/", "via": "", "real_tags": ["\u5730\u5740", "ip"]}, {"category": "", "categoryclass": "", "imagename": "f9f0713c799355395bc5d34844997c72.jpg", "infoid": 1072062, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd1\u5e74\u6765\uff0cSqills \u4ece\u94c1\u8def\u8fd0\u8425\u5546\u90a3\u91cc\u8d62\u5f97\u4e86\u6bd4\u4efb\u4f55\u5176\u4ed6\u6280\u672f\u4f9b\u5e94\u5546\u90fd\u591a\u7684\u5347\u7ea7\u5e93\u5b58\u3001\u9884\u8ba2\u548c\u7968\u52a1\u8f6f\u4ef6\u7684\u5408\u540c\u3002\u6240\u4ee5\u8fd9\u6b21\u6536\u8d2d\u662f\u6709\u9053\u7406\u7684\u3002\u897f\u95e8\u5b50\u4ea4\u901a\u5468\u56db\u8868\u793a\uff0c\u5df2\u7b7e\u7f72\u534f\u8bae\uff0c\u4ee5 6.5 \u4ebf\u7f8e\u5143\uff085.5 \u4ebf\u6b27\u5143\uff09\u6536\u8d2d\u8377\u5170\u94c1\u8def\u8f6f\u4ef6\u516c\u53f8 Sqills\u3002\u968f\u7740\u6c14\u5019\u53d8\u5316\u7684\u5f71\u54cd\u53d8\u5f97\u66f4\u52a0\u660e\u663e\uff0c\u4ee5\u53ca\u65b0\u4e00\u6ce2\u6280\u672f\u7684\u51fa\u73b0\uff0c\u8be5\u4ea4\u6613\u51f8\u663e\u4e86\u5168\u7403\u5bf9\u57ce\u9645\u94c1\u8def\u7684\u5174\u8da3\u65e5\u76ca\u6d53\u539a\u3002 Sqills \u662f\u4e00\u5bb6\u9762\u5411\u5168\u7403\u94c1\u8def\u8fd0\u8f93\u8fd0\u8425\u5546\u7684\u57fa\u4e8e\u4e91\u7684\u5e93\u5b58\u7ba1\u7406\u3001\u9884\u8ba2\u548c\u7968\u52a1\u8f6f\u4ef6\u7684\u9500\u552e\u5546\u3002\u8be5\u516c\u53f8\u6210\u7acb\u4e8e 2002 \u5e74\uff0c\u5c1a\u672a\u7b79\u96c6\u5916\u90e8\u6295\u8d44\u3002\u591a\u5e74\u6765\uff0c\u897f\u95e8\u5b50\u7684 HaCon \u90e8\u95e8\u548c Sqills \u4e00\u76f4\u5728\u4e0e Amadeus\u3001IBM \u548c SilverRail \u7b49\u5176\u4ed6\u4f9b\u5e94\u5546\u7ade\u4e89\uff0c\u4e3a\u94c1\u8def\u516c\u53f8\u63d0\u4f9b\u8fd0\u8425\u5de5\u5177\u3002\u4f46\u662f\uff0c\u5728\u5927\u6d41\u884c\u6765\u88ad\u4e4b\u524d\uff0cSqills \u5728\u6b27\u6d32\u53d6\u5f97\u4e86\u8fde\u80dc\u7684\u4e1a\u52a1\u3002\u5982\u4eca\uff0cSNCF\u3001\u7231\u5c14\u5170\u94c1\u8def\u3001Rail Delivery Group\u3001SJ\u3001Via Rail \u548c Eurostar \u7b49 33 \u5bb6\u8fd0\u8425\u5546\u4f7f\u7528\u5176\u670d\u52a1\u3002\u8be5\u516c\u53f8\u62e5\u6709 160 \u540d\u5458\u5de5\uff0c\u9884\u8ba1 2022 \u5e74\u7684\u6536\u5165\u7ea6\u4e3a 4700 \u4e07\u7f8e\u5143\uff084000 \u4e07\u6b27\u5143\uff09\u3002\u8fd9\u4ee3\u8868\u4e86 2019 \u5e74\u5927\u6d41\u884c\u524d\u7684\u589e\u957f\uff0c\u5f53\u65f6 Sqills \u4ea7\u751f\u4e86\u5927\u7ea6 2500 \u4e07\u7f8e\u5143\u7684\u6536\u5165\u3002 \u201c\u5bf9 Sqills \u7684\u6536\u8d2d\u662f\u897f\u95e8\u5b50\u5982\u4f55\u7ed3\u5408\u73b0\u5b9e\u4e16\u754c\u548c\u6570\u5b57\u4e16\u754c\u4ee5\u5e2e\u52a9\u5176\u5ba2\u6237\u5b9e\u73b0\u8f6c\u578b\u7684\u4e00\u4e2a\u5b8c\u7f8e\u4f8b\u5b50\uff0c\u201d\u897f\u95e8\u5b50\u80a1\u4efd\u516c\u53f8\u603b\u88c1\u517c\u9996\u5e2d\u6267\u884c\u5b98 Roland Busch \u8868\u793a\uff0c\u8be5\u516c\u53f8\u5468\u56db\u5ba3\u5e03\u4e86\u8be5\u4ea4\u6613\u3002 \u201c\u4e0e\u6b64\u540c\u65f6\uff0cSqills \u652f\u6301\u6211\u4eec\u7684\u6570\u5b57\u670d\u52a1\u589e\u957f\u8def\u5f84\uff0c\u662f\u901a\u8fc7\u6709\u9488\u5bf9\u6027\u7684\u6536\u8d2d\u5e94\u7528\u6211\u4eec\u7684\u8d44\u672c\u5206\u914d\u6807\u51c6\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u201d Squills \u7684\u7b2c\u4e00\u4e2a\u5ba2\u6237\u662f 2010 \u5e74\u7684\u4e00\u5bb6\u5c0f\u578b\u5fb7\u56fd\u94c1\u8def\u8fd0\u8425\u5546\u3002Squills \u6309\u7167\u6570\u91cf\u4e58\u4ee5\u4ef7\u683c\u6ed1\u52a8\u6bd4\u4f8b\u6a21\u578b\u6536\u8d39\u3002\n\u8fd9\u7b14\u4ea4\u6613\u662f\u5728\u6b27\u6d32\u94c1\u8def\u5e02\u573a\u52a8\u6001\u53d8\u5316\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u7684\u3002\u6700\u8fd1\u5bf9\u6b27\u6d32\u94c1\u8def\u5e02\u573a\u7684\u653e\u677e\u7ba1\u5236\u4ee5\u53ca\u5bf9\u94c1\u8def\u4f5c\u4e3a\u6bd4\u822a\u73ed\u66f4\u73af\u4fdd\u7684\u57ce\u9645\u65c5\u884c\u9009\u62e9\u7684\u5174\u8da3\u589e\u52a0\uff0c\u53ef\u80fd\u4f1a\u52a0\u5927\u94c1\u8def\u8fd0\u8425\u5546\u5347\u7ea7\u9884\u8ba2\u548c\u5e93\u5b58\u7ba1\u7406\u8f6f\u4ef6\u7684\u538b\u529b\u3002\u8bb8\u591a\u8fd0\u8425\u5546\u4ecd\u5728\u5f00\u53d1\u53ef\u8ffd\u6eaf\u5230 1980 \u5e74\u4ee3\u548c 1990 \u5e74\u4ee3\u7684\u9884\u8ba2\u7cfb\u7edf\u3002\u66f4\u65b0\u7684\u57fa\u4e8e\u4e91\u7684\u7cfb\u7edf\u4f7f\u8fd0\u8425\u5546\u80fd\u591f\u66f4\u5feb\u5730\u6d4b\u8bd5\u5176\u5546\u4e1a\u6a21\u5f0f\u7684\u53d8\u5316\uff0c\u540c\u65f6\u4ee5\u66f4\u4f4e\u7684\u5355\u4f4d\u6210\u672c\u8fd0\u8425\u3002\u8fd9\u53ef\u4ee5\u5141\u8bb8\u8bd5\u9a8c\u7968\u4ef7\u7ed3\u6784\u3001\u59cb\u53d1\u5730\u548c\u76ee\u7684\u5730\u5b9a\u4ef7\u3001\u57fa\u4e8e\u533a\u57df\u7684\u5b9a\u4ef7\u548c\u57fa\u4e8e\u8ddd\u79bb\u7684\u5b9a\u4ef7\u3002\u8fd0\u8425\u5546\u4f7f\u7528 Sqills \u7684\u5e93\u5b58\u7cfb\u7edf\uff0c\u7136\u540e\u4e0e Trainline\u3001SilverRail \u548c Amadeus \u7b49\u516c\u53f8\u8054\u7cfb\uff0c\u5c06\u4ed6\u4eec\u7684\u8f66\u7968\u5206\u53d1\u7ed9\u4ee3\u7406\u5546\u3002 Siemens Mobility \u5728\u4e9a\u592a\u5730\u533a\u548c\u7f8e\u6d32\u6709\u5f88\u591a\u5ba2\u6237\uff0c\u53ef\u4ee5\u901a\u8fc7 Sqills \u7684\u4ea7\u54c1\u8fdb\u884c\u4ea4\u53c9\u9500\u552e\u3002\u8fd9\u5bb6\u5fb7\u56fd\u79d1\u6280\u5de8\u5934\u8ba1\u5212\u5c06 Sqills \u7684 S3 \u4e58\u5ba2\u5e73\u53f0\u4e0e\u5176\u5176\u4ed6\u4ea7\u54c1\u6574\u5408\uff0c\u5305\u62ec Hacon\u3001eos.uptrade\u3001Bytemark \u548c Padam Mobility\u3002 Sqills \u6ca1\u6709\u505a\u592a\u591a\u7684\u5b9a\u5236\u5de5\u4f5c\u3002\u5927\u7ea6 95% \u7684\u8fd0\u8425\u5546\u8981\u6c42\u5df2\u7ecf\u662f\u5176\u7cfb\u7edf\u4e2d\u7684\u6807\u51c6\u529f\u80fd\u548c\u9009\u9879\u3002\u6bcf\u4e2a\u8fd0\u8425\u5546\u5728\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u4e0a\u90fd\u6709\u81ea\u5df1\u7684\u8f6f\u4ef6\u7248\u672c\uff0c\u8fd0\u8425\u5546\u7684\u5185\u90e8\u56e2\u961f\u8fd0\u884c\u5b83\u3002\u8fd9\u4e0e\u57fa\u4e8e\u4e91\u7684\u7edf\u4e00\u6a21\u578b\u4e0d\u540c\uff0c\u540e\u8005\u5728\u4e00\u4e2a\u5730\u65b9\u53d1\u751f\u6545\u969c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6240\u6709\u5ba2\u6237\u5b95\u673a\u3002\u7136\u800c\uff0c\u4e00\u4e9b\u5b9a\u5236\u662f\u5178\u578b\u7684\uff0c\u4ee5\u94fe\u63a5\u6765\u81ea\u4e0d\u540c\u4f9b\u5e94\u5546\u7684\u4e0d\u540c\u7cfb\u7edf\uff0c\u4f8b\u5982\u81ea\u52a8\u552e\u7968\u673a\u4e0e\u94c1\u8def\u4f1a\u8ba1\u8f6f\u4ef6\u3002 \u201c\u4e3a\u4e86\u663e\u7740\u589e\u52a0\u8f68\u9053\u4e0a\u7684\u4e58\u5ba2\u6570\u91cf\u5e76\u5728 2030 \u5e74\u5b9e\u73b0\u6211\u4eec\u7684\u6c14\u5019\u76ee\u6807\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u4e58\u5ba2\u63d0\u4f9b\u66f4\u4f18\u5316\u7684\u6d41\u7a0b\uff0c\u4f7f\u4ed6\u4eec\u80fd\u591f\u65e0\u7f1d\u8bc6\u522b\u548c\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684\u6240\u6709\u94c1\u8def\u670d\u52a1\uff0c\u201d\u9996\u5e2d\u6267\u884c\u5b98\u8fc8\u514b\u5c14\u5f7c\u5f97\u8bf4\u897f\u95e8\u5b50\u4ea4\u901a\u3002", "note_en": "Sqills has won more contracts from railway operators to upgrade their inventory, booking, and ticketing software than any other tech vendor in recent years. So this acquisition makes sense.\n Siemens Mobility said on Thursday it had signed a deal to  acquire  Sqills, a Netherlands-based rail software company, for $650 million (\u20ac550 million). The deal highlights an amplified interest in intercity rail worldwide as the impacts of climate change become more apparent and a new wave of technologies become available.\n Sqills is a seller of cloud-based inventory management, reservation, and ticketing software for rail transport operators worldwide. Founded in 2002, it hasn\u2019t raised outside investment.\n For years, Siemens\u2019  HaCon unit and Sqills have competed against other vendors, such as Amadeus, IBM, and SilverRail, to offer operational tools to railway companies. But Sqills enjoyed a streak of business wins in Europe before the pandemic struck. Today 33 operators, such as SNCF, Irish Rail, Rail Delivery Group, SJ, Via Rail, and Eurostar, use its services.\n The company employs 160 people and forecasts its 2022 revenue of approximately $47 million (\u20ac40 million). That represented growth from the pre-pandemic year of 2019, when Sqills generated roughly $25 million in revenue.\n \u201cThe acquisition of Sqills is a perfect example of how Siemens combines the real and digital worlds to empower its customers in their transformation,\u201d said Roland Busch, president and CEO of Siemens AG, which announced the deal Thursday. \u201cAt the same time, Sqills supports our growth path for digital services and is a great example of applying our capital allocation criteria through targeted acquisitions.\u201d\n Sqills\u2019 first customer was a small German rail operator, in 2010. Squills charges on a volume-times-price, sliding scale model.\n The deal comes against a backdrop of  changing dynamics in Europe\u2019s rail market. Recent deregulation of Europe\u2019s rail markets and an increased interest in rail as a greener option for intercity travel than flights could ramp up pressure on railway operators to upgrade their software for reservations and inventory management. Many operators are still working on reservation systems dating from the 1980s and 1990s.\n Newer cloud-based systems enable operators to test changes in their commercial models more quickly while also operating at a lower cost per unit. This can allow experimentation infare structure, origin-and-destination pricing, zone-based pricing, and distance-based pricing.\n Operators use Sqills\u2019 inventory system and then connect with companies like Trainline, SilverRail, and Amadeus to distribute their tickets to agencies.\n Siemens Mobility has many customers in Asia Pacific and the Americas that could be cross-sold on Sqills\u2019 products. The German tech giant plans to integrate Sqills\u2019 S3 Passenger platform with its other offerings, including Hacon, eos.uptrade, Bytemark, and Padam Mobility.\n Sqills isn\u2019t doing much custom work. About 95 percent of the operators\u2019 requirements are already standard capabilities and options in its system. Each operator gets its own version of the software on Amazon Web Services, and in-house teams at the operator run it. That\u2019s different from a unified cloud-based model, where an outage in one place could bring all customers down.\n Some customization is typical, however, to link disparate systems from different vendors, such as a ticket vending machine with the railway\u2019s accounting software.\n  \u201cTo significantly increase the number of passengers on the tracks and achieve our climate goals by 2030, we need to provide passengers with a more optimized process that enables them to seamlessly identify and use all the rail services we offer,\u201d said Michael Peter, CEO of Siemens Mobility.", "posttime": "2021-08-08 11:50:54", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6f\u4ef6,based,\u94c1\u8def", "title": "\u897f\u95e8\u5b50\u8868\u793a\u5df2\u540c\u610f\u4ee5\u7ea6 6.5 \u4ebf\u7f8e\u5143\u7684\u4ef7\u683c\u6536\u8d2d\u603b\u90e8\u4f4d\u4e8e\u8377\u5170\u7684 Sqills\uff0c\u8fd9\u662f\u4e00\u6b3e\u9762\u5411\u5168\u7403\u94c1\u8def\u8fd0\u8f93\u8fd0\u8425\u5546\u7684\u57fa\u4e8e\u4e91\u7684\u8f6f\u4ef6\u5957\u4ef6", "title_en": "Siemens says that it has agreed to buy Netherlands-based Sqills, a cloud-based software suite for rail transport operators worldwide, for ~$650M", "transed": 1, "url": "https://skift.com/2021/08/05/siemens-to-buy-rail-software-company-sqills-for-650-million/", "via": "", "real_tags": ["\u8f6f\u4ef6", "based", "\u94c1\u8def"]}, {"category": "", "categoryclass": "", "imagename": "4a0b2e5b054d00671a5405186042d55c.jpg", "infoid": 1072061, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5e74\u590f\u5929\uff0cTU Delft \u7684 Flying V \u55b7\u6c14\u5ba2\u673a\u7684\u6bd4\u4f8b\u6a21\u578b\u5f00\u59cb\u98de\u884c\u3002\u65b0\u98de\u673a\u7684\u673a\u7ffc\u8f7d\u5ba2\uff0c\u636e\u62a5\u9053\u5176\u71c3\u6cb9\u6548\u7387\u63d0\u9ad8\u4e86 20%\u3002\u9879\u76ee\u8d1f\u8d23\u4eba Roelof Vos \u535a\u58eb\u548c\u4ed6\u7684\u56e2\u961f\u5c06 22.5 \u516c\u65a4\u30013 \u7c73\u5bbd\u7684\u6a21\u578b\u5e26\u5230\u4e86\u5fb7\u56fd\u7684\u4e00\u4e2a\u7a7a\u519b\u57fa\u5730\u3002\u5728\u90a3\u91cc\uff0c\u4ed6\u4eec\u4e0e\u7a7a\u4e2d\u5ba2\u8f66\u516c\u53f8\u7684\u4e00\u4e2a\u56e2\u961f\u5408\u4f5c\uff0c\u8ba9\u98de\u673a\u8d77\u98de\uff0c\u8fdb\u884c\u4e86\u591a\u6b21\u8bd5\u98de\uff0c\u76f4\u5230\u7535\u6c60\u51e0\u4e4e\u8017\u5c3d\u5e76\u7740\u9646\u3002 \u201c\u6211\u4eec\u62c5\u5fc3\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u7531\u4e8e\u5148\u524d\u7684\u8ba1\u7b97\u8868\u660e\u2018\u65cb\u8f6c\u2019\u53ef\u80fd\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u6b64\u98de\u673a\u8d77\u98de\u53ef\u80fd\u4f1a\u6709\u4e9b\u56f0\u96be\u3002\u8be5\u56e2\u961f\u4f18\u5316\u4e86\u7f29\u653e\u98de\u884c\u6a21\u578b\u4ee5\u9632\u6b62\u51fa\u73b0\u6b64\u95ee\u9898\uff0c\u4f46\u5e03\u4e01\u7684\u8bc1\u636e\u5728\u4e8e\u8fdb\u98df\u3002\u4f60\u9700\u8981\u98de\u884c\u624d\u80fd\u786e\u5b9a\uff0c\u201d\u6c83\u65af\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\u3002\u8fd9\u6b21\u8bd5\u9a8c\u88ab\u8ba4\u4e3a\u662f\u6210\u529f\u7684\uff0c\u56e0\u4e3a\u8d77\u98de\u65f6\u7684\u65cb\u8f6c\u5f88\u5bb9\u6613\u4ee5 50 \u82f1\u91cc/\u5c0f\u65f6\uff0880 \u516c\u91cc/\u5c0f\u65f6\uff09\u7684\u901f\u5ea6\u8fdb\u884c\u3002\u7136\u800c\uff0c\u56e0\u4e3a\u5b83\u662f\u53ea\u662f\u4e00\u4e2a\u5b9e\u9a8c\u6a21\u578b\uff0c\u771f\u6b63\u7684\u55b7\u6c14\u5ba2\u673a\u5728\u5b9e\u9645\u98de\u884c\u4e2d\u7684\u8868\u73b0\u4ecd\u7136\u4e0d\u786e\u5b9a\u3002\u4ece\u8fd9\u4e2a\u6bd4\u4f8b\u6a21\u578b\u8bd5\u9a8c\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u5f97\u51fa\u7ed3\u8bba\uff0c\u4ed6\u4eec\u5fc5\u987b\u6539\u53d8\u98de\u673a\u7684\u91cd\u5fc3\u5e76\u56fa\u5b9a\u5929\u7ebf\u4ee5\u6539\u5584\u9065\u6d4b\u3002\u8be5\u56e2\u961f\u7684\u4e0b\u4e00\u6b65\u662f\u4f7f\u7528\u98de\u884c\u671f\u95f4\u83b7\u5f97\u7684\u6570\u636e\u6765\u6784\u5efa\u98de\u673a\u7684\u7a7a\u6c14\u52a8\u529b\u5b66\u8f6f\u4ef6\u6a21\u578b\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u53ef\u4ee5\u5728\u98de\u884c\u6a21\u62df\u5668\u4e2d\u6d4b\u8bd5\u55b7\u6c14\u5f0f\u5ba2\u673a\u5e76\u5c06\u7ed3\u679c\u7528\u4e8e\u7814\u53d1\u3002Flying-V \u5177\u6709\u6253\u9020\u9ad8\u80fd\u6548\u957f\u9014\u98de\u673a\uff0c\u5ba2\u8231\u3001\u8d27\u8231\u3001\u6cb9\u7bb1\u5747\u7f6e\u4e8e\u673a\u7ffc\u5185\uff0c\u5f15\u5165\u4e86\u98de\u673a\u547d\u540d\u7684V\u5b57\u578b\u3002\n\u4ee3\u5c14\u592b\u7279\u7406\u5de5\u5927\u5b66\u7814\u7a76\u4eba\u5458\u7684\u8ba1\u7b97\u673a\u8ba1\u7b97\u4f30\u8ba1\uff0c\u4e0e\u5f53\u4eca\u6700\u5148\u8fdb\u7684\u98de\u673a\u76f8\u6bd4\uff0c\u8be5\u98de\u673a\u4f18\u8d8a\u7684\u7a7a\u6c14\u52a8\u529b\u5b66\u5916\u5f62\u548c\u51cf\u8f7b\u7684\u91cd\u91cf\u53ef\u4ee5\u5c06\u6cb9\u8017\u964d\u4f4e 20%\u3002", "note_en": "This summer, a scale model of TU Delft&#39;s Flying V jetliner took flight. The new aircraft carries passengers in its wings and reports being 20% more fuel-efficient.\n  Project leader Dr. Roelof Vos and his team took the  22.5 kg and  3-meter\u00a0wide-scale model to an airbase in Germany. There they worked together with a team from Airbus to get the  aircraft to take-off, fly a number of test maneuvers until the batteries were nearly empty and landed.\n \u201cOne of our worries was that the aircraft might have some difficulty lifting-off since previous calculations had shown that \u2018rotation\u2019 could be an issue. The team optimized the scaled flight model to prevent the issue, but the proof of the pudding is in the eating. You need to fly to know for sure,&#34; said in a  statement Vos.\n  The trial was deemed a successful one as rotation on take-off was performed easily at the speed of  50 mph (80 km/h). However, as it was just an experimental model, how the real jetliner would perform in an actual flight is still uncertain.\n From this scale model trial, the researchers already concluded that they had to\u00a0change the center of gravity of the aircraft and fix the antenna to improve telemetry.\n The next steps for the team are to\u00a0use the data acquired during the flight to build an aerodynamic software model of the aircraft. This will mean they can test the jetliner in a flight simulator and use the outcomes for research and development.\n The Flying-V has been created to be a highly energy-efficient long-distance  airplane. The passenger cabin, the cargo hold, and the fuel tanks have all been placed in the wings, introducing the V-shape that the plane is named after.\n  TU Delft researchers&#39; computer calculations estimate that the aircraft\u2019s superior aerodynamic shape and decreased weight can  reduce fuel consumption by 20% compared to today\u2019s  most advanced aircraft.", "posttime": "2021-08-08 11:50:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u55b7\u6c14,ride,\u98de\u673a", "title": "V\u578b\u673a\u7ffc\u5f0f\u55b7\u6c14\u5ba2\u673a\u6210\u529f\u8d77\u98de\u2014\u2014IE", "title_en": "V-Shaped Ride-in-the-Wings Jetliner Successfully Took Off \u00e2\u20ac\u201c IE", "transed": 1, "url": "https://interestingengineering.com/the-energy-efficient-v-shaped-ride-in-the-wings-jetliner-successfully-took-off", "via": "", "real_tags": ["\u55b7\u6c14", "ride", "\u98de\u673a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072060, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u6211\u6b63\u5728\u5bf9\u51e0\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u5e93\u8fdb\u884c\u6d88\u606f\u4f20\u9012\u5de5\u4f5c\u8d1f\u8f7d\u7684\u8bc4\u4f30\u3002\u5728\u5bf9 Apache Cassandra \u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u6027\u80fd\u6307\u6807\u4e2d\u7684\u5f02\u5e38\u6a21\u5f0f\u3002\u6211\u9075\u5faa\u4e86\u8fd9\u4e9b\u7ebf\u7d22\uff0c\u6700\u7ec8\u53d1\u73b0\u4e86\u4e00\u4e9b\u4e3b\u8981\u7684\u7ebf\u7a0b\u6c60\u8bbe\u8ba1\u95ee\u9898\uff0c\u5e76\u5728 Windows \u4e0a\u5b9e\u73b0\u4e86\u6f5c\u5728\u7684 18 \u500d\u6027\u80fd\u63d0\u5347\u3002\u6211\u4e00\u76f4\u5728\u7814\u7a76\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u6570\u636e\u5e93\u4f5c\u4e3a\u91cd\u65b0\u8bbe\u8ba1\u6d88\u606f\u4ea7\u54c1\u7684\u6f5c\u5728\u540e\u7aef\u3002\u867d\u7136\u6211\u5df2\u7ecf\u60f3\u5230\u4e86\u4e00\u4e9b\u5019\u9009\u4eba\uff0c\u4f46\u6211\u5e0c\u671b\u80fd\u591f\u5c55\u793a\u5bf9\u6570\u636e\u5e93\u9009\u9879\u7684\u5f3a\u5927\u63a2\u7d22\u3002\u867d\u7136 PostgreSQL \u662f SQL \u6570\u636e\u5e93\u4e2d\u7684\u6709\u529b\u7ade\u4e89\u8005\uff0c\u5e76\u4e14\u5728\u65e9\u671f\u5b9e\u9a8c\u4e2d\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u7ed3\u679c\uff0c\u4f46\u6211\u4e00\u76f4\u5728\u5bfb\u627e\u7406\u60f3\u7684 NoSQL \u5019\u9009\u8005\u3002 Apache Cassandra \u6bd4\u6700\u65b0\u7684 NewSQL \u548c\u952e\u503c\u6570\u636e\u5e93\u8981\u8001\u4e00\u4e9b\uff0c\u4f46\u5b83\u5728\u5f88\u591a\u65b9\u9762\u4f3c\u4e4e\u5728\u67b6\u6784\u4e0a\u90fd\u5f88\u7406\u60f3\uff1a\u6211\u7684\u76ee\u6807\u662f\u5c06\u6570\u636e\u5e93\u51e0\u4e4e\u5b8c\u5168\u7528\u4f5c\u201c\u53ea\u5199\u6570\u636e\u5b58\u50a8\u201d\u3002\u6d88\u606f\u4f20\u9012\u6709\u4e24\u4e2a\u4e3b\u8981\u8981\u6c42\uff1a\u6301\u4e45\u8bb0\u5f55\u5df2\u5b8c\u6210\u7684\u5de5\u4f5c\uff08\u63a5\u6536\u548c\u53d1\u9001\u7684\u6d88\u606f\uff09\u4ee5\u5141\u8bb8\u5d29\u6e83\u6062\u590d\uff0c\u4ee5\u53ca\u8bb0\u5f55\u66f4\u957f\u671f\u7684\u53ef\u641c\u7d22\u65e5\u5fd7\u3002 Cassandra \u5df2\u7ecf\u88ab\u6211\u4eec\u7684\u5de5\u7a0b\u5e08\u786e\u5b9a\u4e3a\u9996\u9009\u6570\u636e\u5e93\uff0c\u7406\u8bba\u4e0a\u5e94\u8be5\u975e\u5e38\u7b26\u5408\u8fd9\u4e9b\u8981\u6c42\u3002\u51ed\u501f\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u5206\u533a\u5199\u5165\u6027\u80fd\u53ca\u5176 LSMT \u6570\u636e\u7ed3\u6784\u80fd\u591f\u81ea\u52a8\u4ece\u8868\u4e2d\u538b\u7f29\u5df2\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5b83\u4f3c\u4e4e\u662f\u4e00\u4e2a\u660e\u786e\u7684\u9886\u5bfc\u8005\u3002\u6211\u5728\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u4e2d\u8bc4\u4f30\u7684\u4e3b\u8981\u5de5\u4f5c\u8d1f\u8f7d\u6d89\u53ca\u63a5\u6536\u6d88\u606f\u3001\u6355\u83b7\u5c5e\u6027\u3001\u8f6c\u6362\u6d88\u606f\u5e76\u53d1\u9001\u5b83\u4eec\u3002\n\u5728\u8bb8\u591a\u5ba2\u6237\u7cfb\u7edf\u4e2d\uff0c\u5c06\u6709\u4e00\u4e2a\u4e3b\u8981\u8def\u7531\u6309\u987a\u5e8f\u5904\u7406\u5927\u591a\u6570\u3002\u9700\u8981\u6301\u4e45\u5730\u8bb0\u5f55\u8fd9\u4e9b\u6d88\u606f\u7684\u63a5\u6536\u60c5\u51b5\uff0c\u8fd9\u4f7f\u5f97\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5355\u7ebf\u7a0b\u7528\u4f8b\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u57fa\u51c6\u6d4b\u8bd5\u3002\u8fd8\u6709\u591a\u7ebf\u7a0b\u57fa\u51c6\u6d4b\u8bd5\u53ef\u4ee5\u4e3a\u5728\u591a\u6761\u8def\u7ebf\u4e0a\u66f4\u5747\u5300\u5730\u5206\u914d\u5de5\u4f5c\u7684\u5ba2\u6237\u8868\u5f81\u6027\u80fd\u3002 PostgreSQL \u5728\u5355\u7ebf\u7a0b\u548c\u591a\u7ebf\u7a0b\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u90fd\u53d6\u5f97\u4e86\u4f18\u5f02\u7684\u6210\u7ee9\uff0c\u4f46\u6211\u5e0c\u671b Cassandra\u2014\u2014\u51ed\u501f\u5176\u66f4\u7b80\u5355\u7684\u6a21\u578b\u548c\u6781\u81f4\u7684\u6027\u80fd\u2014\u2014\u80fd\u591f\u63d0\u4f9b\u66f4\u9ad8\u7684\u6027\u80fd\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u8868\u660e\u5355\u7ebf\u7a0b\u5199\u5165\u6027\u80fd\u5b58\u5728\u4e00\u4e9b\u76f8\u5173\u5f02\u5e38\u3002\u5b58\u5728\u51e0\u4e2a\u5173\u952e\u95ee\u9898\uff1a \u5355\u7ebf\u7a0b Cassandra \u57fa\u51c6\u6d4b\u8bd5\u5728\u786c\u4ef6\u4e0a\u8868\u73b0\u51fa\u6781\u5dee\u7684\u6027\u80fd\uff0c\u4e0e PostgreSQL \u663e\u793a\u7684\u7269\u7406\u6027\u80fd\u76f8\u6bd4\u3002\u5ef6\u8fdf\u4e0e\u6392\u961f\u7406\u8bba\u8868\u660e\u7684\u901a\u5e38\u6a21\u5f0f\u76f8\u53cd\uff1b\u5728\u591a\u7ebf\u7a0b\u7cfb\u7edf\u4e2d\uff0c\u66f4\u591a\u7684\u7ebf\u7a0b\u5e94\u8be5\u63d0\u4f9b\u66f4\u9ad8\u7684\u541e\u5410\u91cf\uff0c\u4f46\u4ee5\u589e\u52a0\u5ef6\u8fdf\u4e3a\u4ee3\u4ef7\u3002 Cassandra \u5c55\u793a\u4e86\u8fd9\u79cd\u6a21\u5f0f\u7684\u53cd\u8f6c\u3002\u541e\u5410\u91cf\u589e\u52a0\u8d85\u8fc7\u7ebf\u7a0b\u6570\u2014\u201410 \u500d\u7684\u7ebf\u7a0b\u63d0\u4f9b\u8fdc\u8fdc\u8d85\u8fc7 10 \u500d\u7684\u541e\u5410\u91cf\u8fd9\u4e00\u4e8b\u5b9e\u4e5f\u662f\u53ef\u7591\u7684\u3002\u7efc\u4e0a\u6240\u8ff0\uff0c\u8fd9\u4e9b\u75c7\u72b6\u8ba9\u6211\u6000\u7591 Cassandra \u4e0a\u7684\u5355\u7ebf\u7a0b\u5de5\u4f5c\u8d1f\u8f7d\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u6548\u7387\u4f4e\u4e0b\u7684\u95ee\u9898\u3002\n\u5bf9\u4e8e\u50cf\u6211\u8fd9\u6837\u4e0d\u719f\u6089\u7684\u5de5\u7a0b\u5e08\u6765\u8bf4\uff0c\u4e86\u89e3 Cassandra \u7684\u5185\u90e8\u6267\u884c\u8fc7\u7a0b\u5177\u6709\u5f88\u5927\u7684\u590d\u6742\u6027\u3002\u5177\u6709\u5f88\u5f3a\u7684\u5e76\u53d1\u6027\uff0c\u901a\u8fc7\u591a\u4e2a\u5de5\u4f5c\u6c60\u8de8\u591a\u4e2a\u7ebf\u7a0b\u5904\u7406\u6570\u636e\u5e93\u64cd\u4f5c\u3002\u9274\u4e8e\u8fd9\u79cd\u590d\u6742\u6027\uff0c\u68c0\u6d4b\u548c\u8ddf\u8e2a\u8bf7\u6c42\u5904\u7406\u4f3c\u4e4e\u662f\u7406\u89e3\u95ee\u9898\u7684\u552f\u4e00\u53ef\u884c\u9014\u5f84\u3002\u6240\u4ee5\u6211\u83b7\u53d6\u4e86\u6e90\u4ee3\u7801\uff0c\u6784\u5efa\u4e86 Cassandra \u5e76\u5f00\u59cb\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65e5\u5fd7\u6765\u68c0\u6d4b\u95ee\u9898\u3002\u6211\u7684\u65e5\u5fd7\u8bb0\u5f55\u96c6\u4e2d\u5728\u8bb0\u5f55\u6574\u4e2a\u8bf7\u6c42\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u4ee5\u53ca\u8f6c\u79fb\u5230\u5de5\u4f5c\u6c60\u7684\u7ec4\u4ef6\u4efb\u52a1\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u3002\u8fd9\u91cc\u7684\u76ee\u6807\u662f\u80fd\u591f\u5728\u5fae\u79d2\u7ea7\u522b\u8ddf\u8e2a\u4efb\u52a1\u5b9e\u9645\u6267\u884c\u7684\u65f6\u95f4\uff0c\u4ee5\u5bfb\u627e\u5ef6\u8fdf\u3002\u8ddf\u8e2a\u663e\u793a\u5728\u8c03\u7528 StorageProxy.performLocally() \u548c\u5b9e\u9645\u6267\u884c LocalMutationRunnable \u4e4b\u95f4\u7684\u5e73\u5747\u5ef6\u8fdf\u4e3a 1.52 \u6beb\u79d2\u3002\u603b\u64cd\u4f5c\u65f6\u95f4\u5e73\u5747\u4e3a 2.06 \u6beb\u79d2\uff08\u5728 Message.Dispatcher processRequest() \u5904\u6d4b\u91cf\uff09\u3002\u8fd9\u8868\u660e\u5728 SEPExecutor \u4e2d\u7b49\u5f85\u7ebf\u7a0b\u8c03\u5ea6\u6240\u635f\u5931\u7684\u603b\u64cd\u4f5c\u65f6\u95f4\u7684\u7ea6 72%\u3002\u9274\u4e8e\u6211\u53d1\u73b0\u7684\u5ef6\u8fdf\uff0cSEPExecutor \u7ebf\u7a0b\u6c60\u6210\u4e3a\u8c03\u67e5\u7684\u7126\u70b9\u3002\u8fd9\u662f\u4e00\u4e2a Cassandra \u7279\u5b9a\u7684\u81ea\u5b9a\u4e49\u7ebf\u7a0b\u6c60\uff0c\u5177\u6709\u663e\u7740\u7684\u5185\u90e8\u590d\u6742\u6027\u3002\u6211\u7528 SEPExecutor \u5c1d\u8bd5\u4e86\u8bb8\u591a\u7b28\u62d9\u7684\u5e72\u9884\u63aa\u65bd\uff0c\u4f46\u6ca1\u6709\u4e00\u6b21\u5b8c\u5168\u6210\u529f\u3002\n\u6211\u5f00\u59cb\u8be2\u95ee\u6709\u5173 SEPWorker.assign() \u5728\u4ece SPINNING \u8f6c\u6362\u5230\u201c\u5de5\u4f5c\u201d\u72b6\u6001\u65f6\u5982\u4f55\u4e0d\u89e3\u9664\u7ebf\u7a0b\u7684\u95ee\u9898\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u5df2\u7ecf\u8bb0\u5f55\u4e86\u6211\u7684\u8c03\u67e5\u548c\u7ed3\u679c\uff0c\u6211\u5728 Cassandra JIRA \u9519\u8bef\u8ddf\u8e2a\u5668\u4e0a\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\u3002\u6700\u521d\u5b83\u9047\u5230\u4e86\u4e00\u4e9b\u516c\u5e73\u7684\u95ee\u9898\uff0c\u4f46\u8001\u5b9e\u8bf4\u6709\u4e00\u5b9a\u7a0b\u5ea6\u7684\u6000\u7591\u3002 \uff08\u8001\u5b9e\u8bf4\uff0c\u8fd9\u5bf9\u4e8e\u4efb\u4f55\u9879\u76ee\u90fd\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u56e0\u4e3a\u9879\u76ee\u62e5\u6709\u7684\u8d44\u6e90\u6709\u9650\uff0c\u800c\u4e14\u4ed6\u4eec\u53ef\u80fd\u4f1a\u6536\u5230\u5927\u91cf\u611a\u8822\u7684\u95ee\u9898\u548c\u8bef\u62a5\u3002\uff09\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u6b63\u5728\u5bfb\u627e\u548c\u8ba8\u8bba\u5173\u4e8e JIRA \u95ee\u9898\u7684\u8fdb\u4e00\u6b65\u7ebf\u7d22\u3002 Cassandra \u7684\u4e00\u4f4d\u8d1f\u8d23\u4eba\u52a0\u5165\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u6b63\u5728\u8ba8\u8bba\u5178\u578b\u7684\u73af\u5883\u548c\u7528\u4f8b\u3002\u6211\u613f\u610f\u542c\u5230\u4e00\u4e9b\u89c1\u89e3\u6216\u89e3\u91ca\uff0c\u4f46\u6211\u81ea\u5df1\u575a\u4fe1\u8fd9\u91cc\u5f88\u53ef\u80fd\u4f1a\u627e\u5230\u4e00\u4e9b\u4e1c\u897f\u3002\u5bf9\u4efb\u52a1\u8c03\u5ea6\u884c\u4e3a\u548c\u7531\u6b64\u4ea7\u751f\u7684\u8c03\u5ea6\u5ef6\u8fdf\u7684\u8be6\u7ec6\u8ddf\u8e2a\u8868\u660e\uff0c\u5f53\u5de5\u4f5c\u4eba\u5458\u5df2\u7ecf\u53ef\u7528\u4f46\u505c\u5728\u201c\u65cb\u8f6c\u201d\u72b6\u6001\u65f6\u4f1a\u53d1\u751f\u5ef6\u8fdf\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cCassandra \u7684 SEPExecutor \u7ebf\u7a0b\u6c60\u65e2\u6ca1\u6709\u542f\u52a8\u989d\u5916\u7684 worker\uff0c\u4e5f\u6ca1\u6709\u5524\u9192\uff08unpark\uff09\u6b63\u5728\u4f11\u7720\u7684 worker\u3002\u5728\u5355\u7ebf\u7a0b\u6761\u4ef6\u4e0b\uff0cworker \u4f1a\u5728\u6bcf\u6b21\u8bf7\u6c42\u540e\u7acb\u5373\u8fdb\u5165\u7761\u7720\u72b6\u6001\uff1b\u6700\u591a\u9700\u8981 1.5 \u6beb\u79d2\u624d\u80fd\u5524\u9192\u4e0b\u4e00\u4e2a\uff01\u867d\u7136\u8fd9\u5bf9\u6211\u6765\u8bf4\u4f3c\u4e4e\u662f\u5f3a\u6709\u529b\u7684\u8bc1\u636e\uff0c\u4f46 Cassandra \u793e\u533a\u6307\u51fa\u7ebf\u7a0b\u6c60\u662f\u4e3a Linux \u8bbe\u8ba1\u7684\uff0c\u5e76\u4e14\uff08\u4ece\u65b0\u7248\u672c 4 \u5f00\u59cb\uff09\u4ed6\u4eec\u5df2\u7ecf\u653e\u5f03\u4e86\u5bf9 Windows \u4f5c\u4e3a\u5e73\u53f0\u7684\u652f\u6301\u3002\n\u6240\u4ee5\uff0c\u6211\u53bb\u62ff\u4e86\u4e00\u4e2a EC2 \u5b9e\u4f8b\u5e76\u8fdb\u884c\u4e86\u4e00\u4e9b Linux \u6d4b\u8bd5\u3002\u5728\u5355\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0c\u6211\u80fd\u591f\u5728 Linux \u4e0a\u53d1\u73b0 +30.9% \u7684\u6027\u80fd\u6539\u8fdb\uff0c\u5728 10\u300150 \u548c 200 \u4e2a\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0c\u6539\u8fdb\u4ece\u5c0f\u5230\u5927\u4e0d\u7b49\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u89c9\u5f97\u6211\u5df2\u7ecf\u62a5\u544a\u4e86\u4e00\u4e2a\u660e\u663e\u7684\u9519\u8bef (CASSANDRA-16499)\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8865\u4e01\uff0c\u5e76\u663e\u793a\u4e86\u6027\u80fd\u6539\u8fdb\u548c\u975e\u56de\u5f52\u7684\u826f\u597d\u8bc1\u636e\u3002\u7136\u800c\uff0c\u63d0\u51fa\u4e86\u67b6\u6784\u95ee\u9898\uff0c\u8fd9\u662f\u6267\u884c\u5668\u7684\u9884\u671f\u8bbe\u8ba1\u2014\u2014\u5de5\u4f5c\u7ebf\u7a0b\u81ea\u7ec4\u7ec7\uff0c\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u4ea4\u4e92\u6709\u9650\u3002\u6dfb\u52a0\u4e3b\u52a8\u5524\u9192\u884c\u4e3a\u5c06\u6d88\u9664\u6b64\u8bbe\u8ba1\u529f\u80fd\u3002 Cassandra \u9886\u5bfc\u5e76\u6ca1\u6709\u63a5\u53d7\u8865\u4e01\uff0c\u800c\u662f\u8981\u6c42\u5bf9\u53ef\u80fd\u7684\u7ebf\u7a0b\u6c60\u9009\u9879\u8fdb\u884c\u5168\u9762\u7684\u67b6\u6784\u91cd\u65b0\u8bc4\u4f30\u3002\u867d\u7136\u8fd9\u662f\u4e00\u6b21\u6709\u4ef7\u503c\u7684\u63a2\u7d22\uff0c\u4f46\u6211\u5728\u57fa\u51c6\u6d4b\u8bd5\u548c\u8bc4\u4f30\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86 Cassandra \u7684\u5176\u4ed6\u7f3a\u70b9\uff1a\u5e76\u884c\u63d0\u4ea4/fsync \u53ef\u80fd\u6548\u7387\u4f4e\u4e0b\u2014\u2014PostgreSQL \u80fd\u591f\u5728\u5355\u4e2a fsync() \u4e2d\u63d0\u4ea4\u591a\u4e2a\u7b49\u5f85\u4e8b\u52a1\uff0cCassandra \u53ef\u80fd\u5728\u8fd9\u65b9\u9762\u6709\u5c40\u9650\u6027\u6211\u4eec\u8ba8\u8bba\u4e86\u6211\u4eec\u7684\u6570\u636e\u5e93\u9009\u9879\uff0c\u4ee5\u53ca\u8fdb\u4e00\u6b65\u6295\u8d44 Cassandra \u4ee5\u53d1\u73b0\u548c\u4fee\u590d\u8fd9\u4e9b\u5176\u4ed6\u53ef\u80fd\u7684\u7f3a\u9677\u7684\u6f5c\u529b\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u5e73\u53f0\uff0c\u6211\u4eec\u5f88\u611f\u5174\u8da3\uff0c\u4f46\u6211\u4eec\u5f88\u96be\u505a\u51fa\u5546\u4e1a\u6848\u4f8b\u3002\n\u6240\u4ee5\u611f\u8c22\u9605\u8bfb\uff0c\u6211\u5e0c\u671b\u4f60\u89c9\u5f97\u8fd9\u5f88\u6709\u8da3\uff01\u5982\u679c\u6709\u4eba\u5e0c\u671b\u7ee7\u7eed\u8fd9\u9879\u5de5\u4f5c\uff0c\u6211\u5f88\u4e50\u610f\u8ba8\u8bba\u3002", "note_en": "Recently I was conducting an evaluation of several different databases for a messaging workload. While benchmarking Apache Cassandra, I noticed unusual patterns in performance metrics. I followed these clues and eventually found some major thread-pool design questions and a potential 18x performance gain realizable on Windows.\n  I had been investigating a range of different databases as potential backends to re-engineer a messaging product. While I had some candidates in mind already, I wanted to be able to show a robust exploration of database options.\n  While PostgreSQL was a strong contender among SQL databases and had given good results in early experiments, I was looking for the ideal NoSQL candidate.\n Apache Cassandra was a little older than the latest NewSQL &amp; key-value databases, but it seemed in in many ways architecturally ideal:\n  The paradigm I was aiming for was to use the database almost entirely as a \u2018write-only datastore\u2019. Messaging has two major requirements: durable recording of work done (messages received &amp; sent) to allow crash recovery, and recording a longer-term searchable log.\n Cassandra had already been identified by our engineers as a preferred database, and should theoretically have aligned very well with these requirements. With highly scalable partitioned write performance and its LSMT datastructure able to automatically compact completed work from the table, it seemed like a clear leader.\n  Key workloads I was assessing in the messaging system involved receiving messages, capturing properties, transforming the messages, and sending them on.\n In many customer systems there would be one major route processing a large majority in sequential order. The requirement to durably record receipt of these messages made this essentially a single-threaded usecase, so this was a major benchmark. There were also multi-threaded benchmarks to characterize performance for customers running a more even distribution of work across multiple routes.\n PostgreSQL had given excellent results across single- and multi-threaded benchmarks, but I had hopes that Cassandra \u2014 with its simpler model and extreme performance focus \u2014 would be able to deliver even higher.\n      However these results suggested some concerning anomalies in single-threaded write performance.\u00a0Several key concerns existed:\n The single-threaded Cassandra benchmark showed abysmally poor performance on the hardware, compared to what PostgreSQL had shown was physically possible.\n Latencies were inverted from the usual pattern that queueing theory indicates; in a multi-threaded system, more threads should give higher throughput but at the cost of increased latency. Cassandra showed an inversion of this pattern.\n Throughput increasing beyond the number of threads \u2014 the fact that 10x the threads gave far more than 10x the throughput was also suspicious.\n Taken together, these symptoms made me suspicious there might be some inefficiencies in single-thread workloads on Cassandra.\n  Understanding Cassandra\u2019s internal execution processes, to an unfamiliar engineer like myself, posed a significant degree of complexity. There is a strong degree of concurrency, with database operations processed across multiple threads via a number of worker pools.\n Given this complexity, instrumenting &amp; tracing the request processing seemed the only plausible route to understand the problem. So I fetched the source, built Cassandra &amp; started added custom logging to instrument the problem.\n My logging focused on recording the start &amp; end times of the overall request and of the component tasks devolved to worker pools. The aim here was to be able to track, at a microsecond level, when tasks were actually executing in order to look for delays.\n  Tracing showed an average delay of 1.52 ms between StorageProxy.performLocally() being called, and the LocalMutationRunnable actually executing.\n Total operation time averaged 2.06 ms (measured at Message.Dispatcher processRequest()). This suggested ~72% of the\u00a0 total operation time\u00a0being lost waiting for thread scheduling in SEPExecutor.\n Given the delays I found, the SEPExecutor thread pool became a focus of investigation. This is a Cassandra-specific custom thread pool with significant internal complexity.\n I tried a number of clumsy interventions with SEPExecutor, none of which were fully successful.\n I started asking questions about how SEPWorker.assign() doesn\u2019t unpark threads when transitioning from SPINNING to \u2018working\u2019 state.\n Having documented my investigation &amp; results so far, I raised an issue on the Cassandra JIRA bug-tracker. Initially it was met with some fair questions but to be honest a certain amount of skepticism. (To be honest this is very understandable for any project, given the limited resources projects have and the numbers of stupid questions &amp; false positives they likely receive.)\n   In the meantime I was finding &amp; discussing further clues on the JIRA issue. One of the Cassandra leads had joined the issue and was discussing typical environments &amp; usecases. I was open to hearing some insight or explanation, but believed strongly myself that there was likely something to be found here.\n  A detailed trace of task scheduling behavior and resultant scheduling delays, showed that delays occurred when a worker was already available but parked in a \u2018SPINNING\u2019 state.\n In this case, Cassandra\u2019s SEPExecutor thread pool neither started an extra worker, nor did it wake (unpark) the sleeping one.\n Under single-threaded conditions, workers would go to sleep immediately after each request; and take up to 1.5 milliseconds to wake up for the next one!\n    While this seemed like strong evidence to me, the Cassandra community noted that the thread-pool is designed for Linux and that (as of the new version 4) they had dropped support for Windows as a platform.\n So, I went and got an EC2 instance and undertook some Linux testing. I was able to find a +30.9% performance improvement on Linux \u00a0in the single-thread case, with improvements varying from small to marginal over 10, 50 and 200 thread cases.\n  At this point I felt that I\u2019d reported a clear bug ( CASSANDRA-16499), provided a patch, and shown good evidence of performance improvement and non-regression.\n However there were architectural questions raised, that this was the intended design of the executor \u2014 that worker threads self-organize with limited interaction between producers and consumers. And that adding a proactive wakeup behavior, would obviate this design feature.\n Rather than accepting the patch, the Cassandra lead asked for a comprehensive architectural reassessment of possible thread-pooling options.\n While it was a valuable exploration, the course of my benchmarking &amp; assessment had identified other drawbacks of Cassandra:\n possible inefficiency in parallel commit/ fsync \u2014 PostgreSQL is able to commit multiple waiting transactions in a single fsync(), Cassandra may have limitations here\n We discussed our database options, and potential of investing further in Cassandra to find &amp; fix these other likely deficits. It\u2019s a great platform, and we were interested, but it was hard for us to make a business case.\n So thanks for reading, and I hope you found this interesting! Should anyone wish to continue this work, I\u2019d be very happy to discuss.", "posttime": "2021-08-08 11:49:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,apache,deficits,cassandra", "title": "Apache Cassandra \u4e2d\u7684\u6027\u80fd\u7f3a\u9677", "title_en": "Performance Deficits in Apache Cassandra", "transed": 1, "url": "http://literatejava.com/database/performance-deficits-in-apache-cassandra/", "via": "", "real_tags": ["\u6027\u80fd", "apache", "deficits", "cassandra"]}, {"category": "", "categoryclass": "", "imagename": "408b4047570c242de9e82dda5d86deb0.jpg", "infoid": 1072057, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9996\u5148\uff0c\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u8ddf\u4e0a Amazon Web Services \u548c Elastic \u7684\u4f20\u5947\uff0c\u8fd9\u91cc\u662f\u6700\u7b80\u77ed\u7684\u56de\u987e\u3002\u51e0\u5e74\u524d\uff0cAWS \u57fa\u672c\u4e0a\u5206\u53c9\u4e86 ElasticSearch\uff0c\u5c06\u5176\u4f5c\u4e3a\u670d\u52a1\u63d0\u4f9b\uff0c\u8fd9\u8ba9\u5f00\u6e90\u793e\u533a\u975e\u5e38\u6cae\u4e27\u3002\u4f5c\u4e3a\u56de\u5e94\uff0c\u4e00\u6bb5\u65f6\u95f4\u540e\uff0cElastic \u51b3\u5b9a\u5728\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u66f4\u6539 ElasticSearch \u7684\u8bb8\u53ef\u4ee5\u9650\u5236\u5176\u4e0b\u6e38\u4f7f\u7528\uff0c\u8fd9\u518d\u6b21\u4ee4\u5f00\u6e90\u793e\u533a\u611f\u5230\u6cae\u4e27\u3002 AWS \u968f\u540e\u5ba3\u5e03\u5c06\u5206\u53c9\u8be5\u9879\u76ee\u4ee5\u4fdd\u6301\u5176\u5b8c\u5168\u5f00\u6e90\uff0c\u7a81\u7136\u6210\u4e3a\u8be5\u573a\u666f\u4e2d\u660e\u663e\u7684\u597d\u4eba\u3002\u6700\u540e\uff0c\u5c31\u5728\u51e0\u4e2a\u6708\u524d\uff0cAWS \u5728 Apache \u8bb8\u53ef\u4e0b\u53d1\u5e03\u4e86 OpenSearch\uff0c\u7248\u672c 2.0 (ALv2)\uff0c\u57fa\u672c\u4e0a\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5faa\u73af\u3002 ElasticSearch \u548c AWS \u4e4b\u95f4\u7684\u6765\u56de\u5728\u672c\u5468\u7ee7\u7eed\u8fdb\u884c\uff0c\u8fd9\u4e00\u6b21 Elastic \u8fdb\u4e00\u6b65\u5c1d\u8bd5\u5173\u95ed\u5bf9 ElasticSearch \u7684\u8bbf\u95ee\u5e76\u5173\u95ed AWS\u3002\u4f5c\u4e3a\u56de\u5e94\uff0cAWS \u8868\u793a\u6b63\u5728\u52aa\u529b\u4f7f OpenSearch \u548c Elasticsearch \u7684\u5ba2\u6237\u7aef\u4e0e\u5f00\u6e90\u517c\u5bb9\u3002 AWS \u8868\u793a\uff0c\u201cOpenSearch \u65e8\u5728\u63d0\u4f9b\u4e0e Elasticsearch 7.10.2 \u7684\u5f00\u6e90\u53d1\u884c\u7248\uff08\u5373\u5b83\u7684\u884d\u751f\u8f6f\u4ef6\uff09\u7684\u8fde\u7ebf\u517c\u5bb9\u6027\u201d\uff0c\u4ece\u800c\u53ef\u4ee5\u8f7b\u677e\u8fc1\u79fb\u5230 OpenSearch\u3002\u867d\u7136 Elastic \u5bf9\u6b64\u65e0\u80fd\u4e3a\u529b\uff0c\u4f46\u4ed6\u4eec\u53ef\u4ee5\u5bf9\u4e00\u4e9b\u5e38\u7528\u7684\u5f00\u6e90\u5ba2\u6237\u7aef\u5e93\u8fdb\u884c\u66f4\u6539\u3002 \u201c\u5728\u8fc7\u53bb\u7684\u51e0\u5468\u91cc\uff0cElastic \u5411\u5176\u4e2d\u51e0\u4e2a\u5ba2\u6237\u7aef\u6dfb\u52a0\u4e86\u65b0\u903b\u8f91\uff0c\u8fd9\u4e9b\u5ba2\u6237\u7aef\u62d2\u7edd\u8fde\u63a5\u5230 OpenSearch \u96c6\u7fa4\u6216\u8fd0\u884c Elasticsearch 7 \u5f00\u6e90\u53d1\u884c\u7248\u7684\u96c6\u7fa4\uff0c\u751a\u81f3\u90a3\u4e9b\u7531 Elastic \u81ea\u5df1\u63d0\u4f9b\u7684\u96c6\u7fa4\u3002\u867d\u7136\u5ba2\u6237\u7aef\u5e93\u4ecd\u7136\u662f\u5f00\u6e90\u7684\uff0c\u4f46\u5b83\u4eec\u73b0\u5728\u53ea\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230 Elastic \u7684\u5546\u4e1a\u4ea7\u54c1\uff0c\u201dAWS \u5199\u9053\u3002\u5982\u679c Elastic \u60f3\u8981\u91cd\u56de\u5f00\u6e90\u793e\u533a\u7684\u9752\u7750\uff0c\u8fd9\u80af\u5b9a\u4e0d\u662f\u8fd9\u6837\u7684\u65b9\u5f0f\u3002\u611f\u8c22@elastic \u5728\u4e0e@awscloud \u7684\u6218\u4e89\u4e2d\u8ba9\u6211\u4eec\u6240\u6709\u4eba\u90fd\u53d7\u5230\u4e86\u9644\u5e26\u635f\u5bb3\u3002\u5c06\u4f9d\u8d56\u9879\u56fa\u5b9a\u4e3a &gt;=7.0.0,&lt;8.0.0 \u5e76\u5728\u90e8\u7f72\u65f6\u81ea\u52a8\u83b7\u53d6\u6b64\u66f4\u65b0\u662f\u6211\u7684\u574f\u5904\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u4f7f\u7528 AWS \u7684\u4efb\u4f55\u4eba\u6765\u8bf4\uff0c\u7834\u574f ES python \u5305\u4ecd\u7136\u975e\u5e38\u7cdf\u7cd5\u3002 #elasticsearch pic.twitter.com/Vb5VatOXdl \u76f8\u53cd\uff0cAWS \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u6b21\u6210\u4e3a\u5f00\u6e90\u7684\u6551\u4e16\u4e3b\uff0c\u8fd9\u4e00\u6b21\u4f3c\u4e4e\u627f\u8bfa\u63d0\u4f9b\u201c\u4e00\u7ec4\u65b0\u7684\u5f00\u6e90\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u8f7b\u677e\u8fde\u63a5\u5e94\u7528\u7a0b\u5e8f\u5230\u4efb\u4f55 OpenSearch \u6216 Elasticsearch \u96c6\u7fa4\u201d\uff0c\u8fd9\u4e9b\u96c6\u7fa4\u201c\u5c06\u5728\u6dfb\u52a0\u4ea7\u54c1\u68c0\u67e5\u4e4b\u524d\u4ece\u76f8\u5e94\u7684 Elastic \u7ef4\u62a4\u5ba2\u6237\u7aef\u7684\u6700\u65b0\u517c\u5bb9\u7248\u672c\u4e2d\u6d3e\u751f\u51fa\u6765\u3002\u201d\n\u4ed6\u4eec\u5199\u9053\uff1a\u201c\u672c\u7740\u5f00\u653e\u6027\u548c\u4e92\u64cd\u4f5c\u6027\u7684\u7cbe\u795e\uff0c\u6211\u4eec\u5c06\u5c3d\u5408\u7406\u52aa\u529b\u4fdd\u6301\u4e0e\u6240\u6709 Elasticsearch \u53d1\u884c\u7248\u7684\u517c\u5bb9\u6027\uff0c\u5373\u4f7f\u662f\u90a3\u4e9b\u7531 Elastic \u751f\u4ea7\u7684\u53d1\u884c\u7248\u3002\u201d\u4e0e\u6b64\u540c\u65f6\uff0c\u867d\u7136 OpenSearch \u793e\u533a\u81f4\u529b\u4e8e\u521b\u5efa\u66ff\u4ee3\u5e93\uff0c\u4f46 AWS \u5efa\u8bae\u7528\u6237\u4e0d\u8981\u66f4\u65b0\u5230\u4efb\u4f55\u7531 Elastic \u7ef4\u62a4\u7684\u5ba2\u6237\u7aef\u7684\u6700\u65b0\u7248\u672c\uff0c\u4ee5\u514d\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u505c\u6b62\u8fd0\u884c\u3002\u4ee5\u5584\u610f\u5408\u6cd5\u5730\u6740\u6b7b\u4ed6\u4eec\u3002\u8fd9\u662f elasticsearch \u5e94\u8be5\u91c7\u53d6\u7684\u884c\u52a8\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u7b26\u5408\u793e\u533a\u7684\u6700\u4f73\u5229\u76ca\u3002\u4e0d\u8fc7\uff0c\u4ed6\u4eec\u5df2\u7ecf\u8868\u660e\u4e86\u81ea\u5df1\u7684\u7acb\u573a\u3002\u8fd9\u662f\u5173\u4e8e\u94b1\u7684\u3002 Facebook \u5f00\u6e90\u8ba1\u7b97\u5b8c\u6574\u6027\u5de5\u5177\uff1a\u300a\u6743\u529b\u7684\u6e38\u620f\u300b\u7c89\u4e1d\u6700\u7ec8\u5e94\u8be5\u5bf9 Facebook \u6700\u65b0\u7684\u5f00\u6e90\u9879\u76ee Winterfell \u611f\u5230\u6ee1\u610f\uff0c\u8fd9\u662f\u4e00\u4e2a STARK \u7684\u8bc1\u660e\u8005\u548c\u9a8c\u8bc1\u8005\u3002\u9664\u4e86\u6587\u5316\u53c2\u8003\u4e4b\u5916\uff0cWinterfell \u662f\u53ef\u6269\u5c55\u7684\u900f\u660e\u77e5\u8bc6\u8bba\u8bc1 (STARK) \u8bc1\u660e\u8005\u548c\u9a8c\u8bc1\u8005\u7684\u5b9e\u73b0\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5b83\u4f7f\u666e\u901a\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u201c\u4ece\u901a\u5e38\u9700\u8981\u8f93\u5165\u6570\u636e\u7684\u8ba1\u7b97\u5b8c\u6574\u6027\u8bc1\u660e (CI) \u4e2d\u53d7\u76ca\u201d\u3002 - \u8981\u5b9e\u65bd\u7684\u5bc6\u7801\u5b66\u7684\u6df1\u5165\u77e5\u8bc6\u3002\u201d CI \u8bc1\u660e\u5141\u8bb8\u7528\u6237\u8fd0\u884c\u8ba1\u7b97\uff0c\u83b7\u5f97\u7ed3\u679c\uff0c\u7136\u540e\u201c\u8ba9\u4efb\u4f55\u4eba\u76f8\u4fe1\u4f60\u6b63\u786e\u5730\u8fdb\u884c\u4e86\u8ba1\u7b97\uff0c\u800c\u65e0\u9700\u4ed6\u4eec\u81ea\u5df1\u91cd\u65b0\u8fd0\u884c\u8ba1\u7b97\u3002\u201d\u5176\u4e2d\u7684\u4e00\u4e2a\u5b50\u96c6\u662f\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09\uff0c\u5b83\u5141\u8bb8\u76f8\u540c\u7684\u529f\u80fd\uff0c\u540c\u65f6\u4e5f\u63a9\u76d6\u4e86\u8f93\u5165\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4e0e\u6700\u8fd1\u7684\u533a\u5757\u94fe\u8d8b\u52bf\u8d8a\u6765\u8d8a\u76f8\u5173\uff0c\u4f46 Facebook \u5199\u9053\u201cZKP \u5728\u533a\u5757\u94fe\u9886\u57df\u4e4b\u5916\u4e5f\u6709\u8bb8\u591a\u6f5c\u5728\u7684\u5e94\u7528\u201d\uff0c\u4f46\u7531\u4e8e\u6240\u9700\u7684\u4e13\u4e1a\u77e5\u8bc6\u548c\u8ba1\u7b97\uff0c\u5b83\u4eec\u5e76\u6ca1\u6709\u771f\u6b63\u8d77\u98de\u3002 Facebook \u5728\u5176\u535a\u5ba2\u6587\u7ae0\u4e2d\u5199\u9053\uff1a\u201c\u6211\u4eec\u5f00\u53d1\u4e86 Winterfell \u6765\u5f25\u5408\u8fd9\u4e9b\u5dee\u8ddd\uff0c\u5e76\u4f7f\u5e38\u89c4\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528 ZKP\u3002\u201d Winterfell \u7528 Rust \u7f16\u5199\uff0c\u5df2\u53d1\u5e03\u5230 Crates.io\uff0c\u5e76\u9644\u5e26\u4e00\u4e2a\u7aef\u5230\u7aef\u6559\u7a0b\u548c\u4e00\u4e2a\u793a\u4f8b crate\u3002 Rust \u63a8\u52a8 GAT \u7a33\u5b9a\uff1a\u5728\u672c\u5468\u4e00\u7bc7\u5173\u4e8e\u63a8\u52a8 GAT \u7a33\u5b9a\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u7279\u5f81\u5de5\u4f5c\u7ec4\u7684\u6210\u5458 Jack Huey \u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u5411\u4ed6\u4eec\u7684\u8bfb\u8005\u4fdd\u8bc1\uff0c\u65e0\u8bba\u4ed6\u4eec\u662f\u5426\u77e5\u9053\uff0c\u7406\u89e3\u5b83\uff0c\u6216\u8005\u4e0d\u77e5\u9053\uff0c\u6dfb\u52a0\u6cdb\u578b\u5173\u8054\u7c7b\u578b (GAT) \u7684\u4e3e\u63aa\u201c\u975e\u5e38\u4ee4\u4eba\u5174\u594b\u201d\uff0c\u786e\u5b9e\u662f\u201c\u4e00\u4ef6\u5927\u4e8b\u201d\u3002\u663e\u7136\uff0cRust \u5c1d\u8bd5\u6dfb\u52a0 GAT \u5df2\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\u2014\u2014RFC \u4e8e 2016 \u5e74 4 \u6708\u9996\u6b21\u5f00\u653e\uff0c\u751a\u81f3\u65e9\u4e8e\u5bf9 const \u6cdb\u578b\u7684\u63a8\u52a8\u3002\u5982\u679c\u4f60\u4ecd\u7136\u6000\u7591\u5b83\u7684\u91cd\u8981\u6027\uff0c\u4ed6\u4f1a\u6307\u51fa GitHub \u4e0a\u7684\u8ddf\u8e2a\u95ee\u9898\uff0c\u5e76\u6307\u51fa\u8fd9\u662f\u201cRust \u5b58\u50a8\u5e93\u4e0a\u6295\u7968\u6700\u591a\u7684\u95ee\u9898\u201d\u3002\u8fd9\u91cc\u7684\u4e3b\u8981\u6d88\u606f\u662f generic_related_types \u529f\u80fd\u4e0d\u518d\u201c\u4e0d\u5b8c\u6574\u201d\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8\u5c1d\u8bd5\u5728\u6bcf\u665a\u6784\u5efa\u4e2d\u4f7f\u7528\u5b83\uff0c\u60a8\u5c06\u4e0d\u518d\u6536\u5230\u8b66\u544a\u3002\u6709\u5173\u4e3a\u4ec0\u4e48\u8fd9\u5f88\u91cd\u8981\u4ee5\u53ca GAT \u7a76\u7adf\u662f\u4ec0\u4e48\u7684\u5b8c\u6574\u63a8\u7406\uff0c\u8bf7\u524d\u5f80\u535a\u5ba2\u6587\u7ae0\u9605\u8bfb\u5bf9\u7f16\u8bd1\u5668\u6240\u505a\u7684\u6240\u6709\u66f4\u6539\u4ee5\u4f7f GAT \u5de5\u4f5c\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u56e2\u961f\u6b63\u5728\u5bfb\u627e\u60a8\u4ee5\u5e2e\u52a9\u7a33\u5b9a\u65b0\u529f\u80fd\u3002 \u201c\u6211\u4eec\u9700\u8981\u60a8\u6d4b\u8bd5\u6b64\u529f\u80fd\uff0c\u4e3a\u60a8\u53d1\u73b0\u7684\u4efb\u4f55\u9519\u8bef\u6216\u6f5c\u5728\u7684\u8bca\u65ad\u6539\u8fdb\u63d0\u4ea4\u95ee\u9898\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5e0c\u671b\u60a8\u80fd\u544a\u8bc9\u6211\u4eec GAT \u5728 Zulip \u4e0a\u542f\u7528\u7684\u4e00\u4e9b\u6709\u8da3\u6a21\u5f0f\uff0c\u201d\u4ed6\u4eec\u5199\u9053\u3002 FSF \u60f3\u4e86\u89e3\u60a8\u5bf9 GitHub Copilot \u7684\u770b\u6cd5\uff1a\u867d\u7136\u6709\u4e9b\u4eba\u53ef\u80fd\u8ba4\u4e3a GitHub Copilot \u4f5c\u4e3a GitHub \u65b0\u7684\u201cAI \u914d\u5bf9\u7a0b\u5e8f\u5458\u201d\uff0c\u5728\u516c\u5f00\u53ef\u7528\u7684\u6e90\u4ee3\u7801\u4e0a\u63a5\u53d7\u57f9\u8bad\uff0c\u4f46\u901a\u5e38\u4e0d\u4f1a\u4fb5\u72af\u7248\u6743\uff0c\u4f46\u81ea\u7531\u8f6f\u4ef6\u57fa\u91d1\u4f1a (FSF) \u4e0d\u592a\u786e\u5b9a\u65b0\u7684\u201c\u670d\u52a1\u5373\u8f6f\u4ef6\u66ff\u4ee3\u54c1\u201d\u3002 FSF \u5728\u5176\u5173\u4e8e Copilot \u7684\u54f2\u5b66\u548c\u6cd5\u5f8b\u95ee\u9898\u7684\u767d\u76ae\u4e66\u547c\u5401\u4e2d\u5199\u9053\uff0c\u201cCopilot \u63d0\u51fa\u4e86\u8bb8\u591a\u5176\u4ed6\u9700\u8981\u66f4\u6df1\u5165\u7814\u7a76\u7684\u95ee\u9898\u201d\uff0c\u4f8b\u5982\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8bad\u7ec3\u7684\u795e\u7ecf\u7f51\u7edc\u662f\u5426\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5408\u7406\u4f7f\u7528\uff0c\u4ee5\u53ca\u4ee3\u7801\u662f\u5426\u521b\u5efa\u901a\u8fc7\u8be5\u5de5\u5177\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4fb5\u72af\u7248\u6743\u3002\u4ed6\u4eec\u5199\u9053\uff1a\u201c\u5373\u4f7f\u4e00\u5207\u90fd\u53ef\u80fd\u5728\u6cd5\u5f8b\u4e0a\u6709\u95ee\u9898\uff0c\u4f46\u6fc0\u8fdb\u4e3b\u4e49\u8005\u60f3\u77e5\u9053\uff0c\u4e00\u5bb6\u4e13\u6709\u8f6f\u4ef6\u516c\u53f8\u5728\u4ed6\u4eec\u7684\u5de5\u4f5c\u4e2d\u6784\u5efa\u670d\u52a1\u662f\u5426\u5b58\u5728\u6839\u672c\u4e0d\u516c\u5e73\u7684\u95ee\u9898\u3002\u201d\u56e0\u6b64\uff0cFSF \u6b63\u5728\u5f81\u96c6\u6709\u5173\u8be5\u4e3b\u9898\u7684\u767d\u76ae\u4e66\u2014\u2014\u6709\u5173\u7279\u5b9a\u5174\u8da3\u9886\u57df\u7684\u9879\u76ee\u7b26\u53f7\u5217\u8868\uff0c\u8bf7\u53c2\u9605\u535a\u5ba2\u6587\u7ae0\u2014\u2014\u5e76\u5c06\u4e3a\u5df2\u53d1\u8868\u7684\u8bba\u6587\u652f\u4ed8 500 \u7f8e\u5143\u3002\u5220\u9664\u6240\u6709\u4ee3\u7801\u5e76\u91cd\u65b0\u5f00\u59cb\u7684\u5927 O \u8868\u793a\u6cd5\u662f\u4ec0\u4e48\uff1f\n\u7edf\u8ba1\u6570\u636e\uff1a\u5982\u679c\u6df1\u5165\u4e86\u89e3\u8fd9\u4e9b\u6570\u5b57\u8ba9\u60a8\u5174\u594b\u4e0d\u5df2\uff0c\u6211\u4eec\u6700\u8fd1\u53d1\u5e03\u4e86\u4e24\u4e2a\u7248\u672c\u6765\u6ee1\u8db3\u60a8\u7684\u7edf\u8ba1\u9700\u6c42\u3002\u9996\u5148\uff0c2021 \u5e74 Stack Overflow \u5f00\u53d1\u4eba\u5458\u8c03\u67e5\u5c31\u5728\u8fd9\u91cc\uff0c\u5168\u7403\u8d85\u8fc7 80,000 \u540d\u53d7\u8bbf\u8005\u63d0\u4f9b\u4e86\u7b54\u6848\uff0c\u4ece\u5f00\u53d1\u4eba\u5458\u7684\u5b66\u4e60\u65b9\u5f0f\u5230\u4ed6\u4eec\u4f7f\u7528\u6700\u591a\u7684\u8bed\u8a00\u548c\u6846\u67b6\uff0c\u4ee5\u53ca\u63d0\u4f9b\u6700\u9ad8\u85aa\u6c34\u7684\u8bed\u8a00\u548c\u6846\u67b6\u7b49\u65b9\u65b9\u9762\u9762\u3002\u5267\u900f\u8b66\u544a\uff1aRust \u8fde\u7eed\u7b2c\u516d\u5e74\u518d\u6b21\u5360\u636e\u201c\u6700\u53d7\u6b22\u8fce\u201d\u7684\u8bed\u8a00\u4f4d\u7f6e\u3002\u70b9\u51fb\u67e5\u770b\u5b8c\u6574\u7ed3\u679c\u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\u5c31\u5728\u6211\u4eec\u5728\u6b64\u671f\u95f4\uff0c\u672c\u5468 RedMonk \u7f16\u7a0b\u8bed\u8a00\u6392\u540d\u4e5f\u51fa\u6765\u4e86\uff0c\u5728\u8ba1\u7b97\u65b9\u9762\u663e\u793a\u51fa\u4e00\u4e2a\u57fa\u672c\u7a33\u5b9a\u7684\u9886\u57df\uff0cJavaScript \u4ecd\u7136\u6392\u540d\u7b2c\u4e00\uff0cJava \u4e0e Python \u4e00\u8d77\u56de\u5230\u4e86\u7b2c\u4e8c\u4f4d\u3002\u66f4\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u636e RedMonk \u79f0\uff0cGo\u3001Kotlin \u548c Rust \u7684\u76f8\u5bf9\u505c\u6ede\u4e0d\u524d\uff0c\u5b83\u8bf4\u201c\u53ef\u80fd\u53cd\u6620\u4e86\u7cfb\u7edf\u8bed\u8a00\u7684\u65b0\u51fa\u73b0\u7684\u73b0\u5b9e\u3002\u201d\u8fd9\u4e09\u8005\u88ab\u5f52\u4e3a\u201c\u9996\u9009\u4f01\u4e1a\u5e94\u7528\u7a0b\u5e8f\u8bed\u8a00\u7684\u6311\u6218\u8005\u201d\uff0cRedMonk \u6307\u51fa Java \u4f3c\u4e4e\u6ca1\u6709\u4efb\u4f55\u8fdb\u5c55\u3002 \u201c\u56e0\u6b64\uff0c\u901a\u8fc7\u7ed3\u5408\u81ea\u8eab\u7684\u9002\u5e94\u6027\u548c\u4f01\u4e1a\u7684\u60ef\u6027\uff0cJava \u4fdd\u7559\u4e86\u4f01\u4e1a\u5e94\u7528\u7a0b\u5e8f\u5e02\u573a\u7684\u5f88\u5927\u4efd\u989d\uff0c\u8fd9\u4f3c\u4e4e\u662f\u6709\u9053\u7406\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u7684\u6f5c\u5728\u6311\u6218\u8005\u2014\u2014Go\u3001Rust \u548c\u7531\u4e8e\u5171\u4eab JVM \u5e73\u53f0\uff0cKotlin \u5728\u8f83\u5c0f\u7a0b\u5ea6\u4e0a\u4e0e Java \u7684\u7ade\u4e89\u6bd4\u5f7c\u6b64\u4e4b\u95f4\u7684\u7ade\u4e89\u8981\u5c11\uff0c\u201d\u4ed6\u4eec\u5199\u9053\u3002 \u201c\u5982\u679c\u8fd9\u4e2a\u5047\u8bbe\u662f\u6b63\u786e\u7684\uff0c\u6211\u4eec\u5e94\u8be5\u671f\u671b Java \u80fd\u591f\u4fdd\u6301\u5176\u6027\u80fd\u548c\u672a\u6765\u4ece Go\u3001Kotlin \u548c Rust \u4e2d\u83b7\u5f97\u7684\u6536\u76ca\u2014\u2014\u5982\u679c\u6709\u7684\u8bdd\u2014\u2014\u5c06\u66f4\u96be\u83b7\u5f97\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e89\u593a\u8f83\u5c0f\u7684\u5de5\u4f5c\u8d1f\u8f7d\u6c60\u7684\u4efd\u989d\u3002\u201d\u5728\u5bb6\u5de5\u4f5c\u7684\u6700\u5927\u597d\u5904\u662f\uff0c\u60a8\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u5bf9\u4ee3\u7801\u5927\u558a\u5927\u53eb\u3002", "note_en": "First off, if you haven\u2019t kept up with the saga of  Amazon Web Services and  Elastic, here\u2019s the briefest of recaps. A few years ago,  AWS basically forked ElasticSearch to offer it as a service, much to the open source community\u2019s dismay. In response, and after some time, Elastic decided to  change the licensing on ElasticSearch earlier this year to restrict its downstream use, again, much to the open source community\u2019s dismay. AWS then announced it would  fork the project to keep it fully open source, suddenly  becoming the apparent good guy\u00a0in the scenario. Finally, just a few months ago,  AWS released OpenSearch under the Apache License, Version 2.0 (ALv2), essentially completing the circle.\n  The  back and forth between ElasticSearch and AWS continues this week, this time with Elastic making further attempts at closing off access to ElasticSearch and shutting out AWS. AWS, in response, has said that it is working on  keeping clients of OpenSearch and Elasticsearch compatible with open source.\n AWS says that \u201cOpenSearch aims to provide wire compatibility with open source distributions of Elasticsearch 7.10.2, the software from which it was derived,\u201d making it easy to migrate to OpenSearch. While Elastic can\u2019t do anything about that, they can make changes to some  open source client libraries that are commonly used.\n \u201cOver the past few weeks, Elastic added  new logic to several of these clients that rejects connections to OpenSearch clusters or to clusters running open source distributions of Elasticsearch 7, even those provided by Elastic themselves. While the client libraries remain open source, they now only let applications connect to Elastic\u2019s commercial offerings,\u201d AWS writes.\n If Elastic were looking to get back into the good graces of the open source community, this surely does not seem like the way.\n Kudos to  @elastic for making us all collateral damage in its war with  @awscloud. It\u2019s my bad for pinning dependencies as &gt;=7.0.0,&lt;8.0.0 and getting this update automatically on a deploy. But still, pretty crappy to break the ES python package for anyone using AWS.  #elasticsearch  pic.twitter.com/Vb5VatOXdl\n  Instead, AWS is again coming out as the savior of open source in this scenario, it would seem, this time promising to offer \u201ca set of new open source clients that make it easy to connect applications to any OpenSearch or Elasticsearch cluster\u201d that \u201cwill be derived from the last compatible versions of corresponding Elastic-maintained clients before product checks were added.\u201d\n \u201cIn the spirit of openness and interoperability, we will make reasonable efforts to maintain compatibility with all Elasticsearch distributions, even those produced by Elastic,\u201d they write.\n In the meantime, while the OpenSearch community works on creating the replacement libraries, AWS recommends that users do not update to the latest version of any Elastic-maintained clients, lest their applications potentially cease functioning.\n Legitimately killing them with kindness. This is the type of moves that elasticsearch should be making because it\u2019s in the best interest of the community. They have made their stance clear though. It\u2019s about the money.\n   Facebook Open Sources Computational Integrity Tool: You Game of Thrones fans should be ultimately pleased with Facebook\u2019s latest open source project  Winterfell, a STARK prover and verifier. Beyond the cultural reference,  Winterfell is an implementation of the  Scalable Transparent Arguments of Knowledge (STARK) prover and verifier, and more specifically makes it possible for the average developer to \u201cbenefit from proofs of computational integrity (CI) that would normally require an in-depth knowledge of cryptography to implement.\u201d CI proofs allow users to run a computation, get a result, and then \u201cconvince anyone that you did the computation correctly without their having to rerun the computation themselves.\u201d A subset of this is the zero-knowledge proof (ZKP), which allows the same functionality, while also obscuring the inputs. All of this becomes increasingly pertinent with the recent trend of blockchain, but Facebook writes that \u201cZKPs have numerous potential applications outside of the blockchain space as well\u201d but they haven\u2019t really taken off because of the expertise and computation required. \u201cWe developed Winterfell to bridge these gaps and to bring ZKPs within reach of regular developers,\u201d Facebook writes in its blog post. Written in Rust, Winterfell has been released to  Crates.io and comes with an end-to-end  tutorial as well as an  examples crate.\n   Rust Pushes for GATs Stabilization: In a blog post this week about  the push for GATs stabilization, Jack Huey, a member of the  Traits Working Group, assures their readers again and again that, whether they know it, understand it, or not, the move to add generic associated types (GATs) is \u201cvery exciting\u201d and a \u201cbig deal,\u201d indeed. Apparently, Rust has been trying to add GATs for quite some time now \u2014 the  RFC was first opened in April of 2016, predating even the push for const generics. And if you still doubt its importance, he points to the tracking issue on GitHub, noting it is the \u201cmost upvoted issue on the Rust repository.\u201d The main news here is that the generic_associated_types feature is no longer \u201cincomplete,\u201d which means you will no longer get a warning if you\u2019re trying to use it on the nightly build. For the full reasoning as to why this is important, and what exactly GATs are, head on over to the blog post to read about all the changes made to the compiler to get GATs to work, but beyond that, the team is looking to you to help stabilize the new feature. \u201cWe need you to test this feature, to file issues for any bugs you find or for potential diagnostic improvements. Also, we\u2019d love for you to just tell us about some interesting patterns that GATs enable over on  Zulip,\u201d they write.\n FSF Wants Your Thoughts on GitHub Copilot: While some may feel that  GitHub Copilot, the new \u201cAI pair programmer\u201d from GitHub trained on publicly available source code, is  generally not infringing copyright, the Free Software Foundation (FSF) is not so sure about the new \u201c Service as a Software Substitute.\u201d In its  call for white papers on philosophical and legal questions around Copilot, the FSF writes that \u201cCopilot raises many other questions which require deeper examination,\u201d such as whether a neural network trained in this manner can be considered fair use and if the code created by the tool can be considered to be infringing on copyrights. \u201cEven if everything might be legally copacetic,\u201d they write, \u201cactivists wonder if there isn\u2019t something fundamentally unfair about a proprietary software company building a service off their work.\u201d As such, the FSF is calling for white papers on the topic \u2014 see the blog post for a bulleted list of specific areas of interest \u2014 and will pay out $500 for published papers.\n What\u2019s the Big O Notation of deleting all of your code and starting over again?\n  The Stats Are In: If digging through the numbers excites you, we have two recent releases to satisfy your statistical desires. First,  the 2021 Stack Overflow Developer Survey is here, with answers from more than 80,000 respondents worldwide, offering insights into everything from how developers learn, to what languages and frameworks they use the most, to which ones offer the best pay. Spoiler alert: Rust once again takes the \u201cmost loved\u201d language spot, for the sixth year in a row. Click on through to the  full results to find out more. And while we\u2019re at it,  the RedMonk Programming Language Rankings also came out this week, showing a mostly stable field when it comes to their calculations, with JavaScript remaining number one, and Java moving back up to number two, alongside Python. More notably, according to RedMonk, is the relative stagnation of Go, Kotlin, and Rust, which it says \u201cmay reflect a new emerging reality of systems languages.\u201d The three are grouped together as \u201cwould-be challengers for the title of enterprise application language of choice,\u201d and RedMonk notes that Java does not seem to be going anywhere. \u201cIt seems plausible, therefore, that Java is retaining \u2014 through a combination of adaptability on its part and inertia on the enterprise\u2019s \u2014 a large share of the enterprise applications market, meaning that its would-be challengers \u2014 languages like Go, Rust and to a lesser extent Kotlin because of the shared JVM platform \u2014 are competing less with Java than with each other,\u201d they write. \u201cIf that hypothesis is correct, we should expect Java to sustain its performance and future gains from Go, Kotlin and Rust \u2014 if any \u2014 will be harder to come by as they compete for shares of a smaller pool of workloads.\u201d\n The best part of working from home is you can scream at your code as loud as you want.", "posttime": "2021-08-08 10:54:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "elasticsearch,saga,\u5f00\u6e90", "title": "Elasticsearch \u4f20\u5947\u4ecd\u5728\u7ee7\u7eed", "title_en": "The Elasticsearch Saga Continues", "transed": 1, "url": "https://thenewstack.io/this-week-in-programming-the-elasticsearch-saga-continues/", "via": "", "real_tags": ["saga", "\u5f00\u6e90"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072056, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u529e\u516c\u684c\u4e0a\u7684\u7535\u8111\u901f\u5ea6\u5feb\u5f97\u4ee4\u4eba\u65e0\u6cd5\u7406\u89e3\u3002\u5b83\u4eec\u5728\u4e00\u79d2\u949f\u5185\u6267\u884c\u7684\u64cd\u4f5c\u6bd4\u4eba\u7c7b\u4e00\u767e\u5e74\u6267\u884c\u7684\u64cd\u4f5c\u8fd8\u591a\u3002\u6211\u4eec\u751f\u6d3b\u5728\u4e00\u4e2a CPU \u6bcf\u79d2\u53ef\u4ee5\u6267\u884c\u6570\u5341\u4ebf\u6761\u6307\u4ee4\u7684\u65f6\u4ee3\uff0c\u5982\u679c\u8003\u8651\u5230\u591a\u6838\uff0c\u5219\u53ef\u4ee5\u6267\u884c\u6570\u767e\u4ebf\u6761\u6307\u4ee4\uff0c\u53ef\u4ee5\u4ee5\u6bcf\u79d2\u6570\u767e GB \u7684\u901f\u5ea6\u5c06\u6570\u636e\u4f20\u8f93\u5230 CPU \u7684\u5185\u5b58\uff0c\u4ee5\u53ca\u652f\u6301\u6d41\u5f0f\u8bfb\u53d6\u7684\u78c1\u76d8\u6bcf\u79d2\u5343\u5146\u5b57\u8282\u3002\u8fd9\u4e2a\u786c\u4ef6\u901f\u5ea6\u6781\u5feb\u7684\u65f6\u4ee3\uff0c\u4e5f\u662f\u7a0b\u5e8f\u4ece SSD \u6216 NVMe \u78c1\u76d8\u542f\u52a8\u9700\u8981\u51e0\u5341\u79d2\u7684\u65f6\u4ee3\uff1b\u81c3\u80bf\u7684 Web \u5e94\u7528\u7a0b\u5e8f\uff0c\u5373\u4f7f\u5728\u5bbd\u5e26\u8fde\u63a5\u4e0a\uff0c\u4e5f\u9700\u8981\u51e0\u79d2\u949f\u624d\u80fd\u663e\u793a\u4e00\u4e2a\u7b80\u5355\u7684\u5217\u8868\uff1b\u4ee5\u6211\u4eec\u671f\u671b\u7684\u5343\u5206\u4e4b\u4e00\u901f\u5ea6\u5904\u7406\u6570\u636e\u7684\u7a0b\u5e8f\u3002\u8f6f\u4ef6\u6ede\u540e\u4e14\u7f13\u6162\u2014\u2014\u800c\u4e14\u60c5\u51b5\u51e0\u4e4e\u6ca1\u6709\u6539\u5584\u7684\u8ff9\u8c61\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\u6211\u76f8\u4fe1\u4e3b\u8981\u539f\u56e0\u662f\u6211\u4eec\u5927\u591a\u6570\u5728 2000 \u5e74\u4e4b\u540e\u5f00\u59cb\u7f16\u7a0b\u7684\u4eba\u4ece\u672a\u5b66\u4f1a\u5982\u4f55\u5408\u7406\u4f7f\u7528\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u8ba1\u7b97\u8d44\u6e90\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u7684\u5927\u90e8\u5206\u57f9\u8bad\u90fd\u6559\u4f1a\u4e86\u6211\u4eec\u5ffd\u89c6\u7535\u8111\uff01\u5c3d\u7ba1\u6211\u4eec\u7684\u5de5\u4f5c\u8868\u9762\u4e0a\u662f\u521b\u5efa\u7a0b\u5e8f\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7528\u4ed6\u4eec\u7684\u8ba1\u7b97\u673a\u505a\u4e8b\uff0c\u4f46\u6211\u4eec\u66f4\u5f3a\u8c03\u5f00\u53d1\u8fc7\u7a0b\u548c\u9762\u5411\u5f00\u53d1\u7684\u5173\u6ce8\u70b9\uff0c\u800c\u4e0d\u662f\u6700\u7ec8\u7684\u7528\u6237\u4ea7\u54c1\u3002 SICP \u4e2d\u6709\u4e00\u53e5\u6211\u8ba4\u4e3a\u662f\u5bf9\u95ee\u9898\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u603b\u7ed3\uff1a\u201c\u7a0b\u5e8f\u5fc5\u987b\u662f\u4e3a\u4e86\u4eba\u4eec\u9605\u8bfb\u800c\u7f16\u5199\u7684\uff0c\u800c\u53ea\u662f\u987a\u4fbf\u8ba9\u673a\u5668\u6267\u884c\u3002\u201d\u8bb8\u591a\u7a0b\u5e8f\u5458\u53d1\u73b0\u8fd9\u53e5\u8bdd\u5f88\u660e\u667a\u4e14\u9f13\u821e\u4eba\u5fc3\uff0c\u4f46\u7528\u6237\u5bf9\u9605\u8bfb\u7a0b\u5e8f\u4e0d\u611f\u5174\u8da3\uff0c\u4ed6\u4eec\u5bf9\u5feb\u901f\u6267\u884c\u7a0b\u5e8f\u611f\u5174\u8da3\u3002\u5982\u679c\u6211\u4eec\u4ee5\u4e00\u79cd\u201c\u5076\u7136\u201d\u53ef\u6267\u884c\u7684\u65b9\u5f0f\u7f16\u5199\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u4f7f\u7a0b\u5e8f\u8fd0\u884c\u5f97\u5f88\u5feb\u3002\u8ba1\u7b97\u673a\u4e0d\u662f\u4e00\u4e2a\u53ef\u4ee5\u62bd\u8c61\u5316\u548c\u5ffd\u7565\u7684\u5b9e\u73b0\u7ec6\u8282\u2014\u2014\u5b83\u662f\u89e3\u51b3\u65b9\u6848\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u3002\u4e00\u4e2a\u5728\u8bbe\u8ba1\u4e2d\u6ca1\u6709\u4e3a\u76ee\u6807\u673a\u5668\u7559\u51fa\u7a7a\u95f4\u7684\u7a0b\u5e8f\u5c06\u4e0d\u53ef\u907f\u514d\u5730\u6bd4\u4e00\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u5f97\u6162\u3002\u4eba\u4eec\u8fc1\u79fb\u5230\u66f4\u5feb\u7684\u7a0b\u5e8f\u662f\u56e0\u4e3a\u66f4\u5feb\u7684\u7a0b\u5e8f\u5141\u8bb8\u7528\u6237\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002\u770b\u770b\u8fc7\u53bb\u7684\u4f8b\u5b50\uff1a\u6700\u521d\u7684\u57fa\u4e8e Python \u7684 bittorrent \u5ba2\u6237\u7aef\u5f88\u5feb\u88ab\u901f\u5ea6\u66f4\u5feb\u7684 uTorrent \u53d6\u4ee3\uff1b Subversion \u5931\u53bb\u4e86\u4f5c\u4e3a\u4e3b\u8981 VCS \u7684\u5730\u4f4d\uff0c\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a Git \u4e2d\u7684\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u5feb\u5f97\u591a\uff1b\u6539\u8fdb\u7684 grep \u5b9e\u7528\u7a0b\u5e8f ack \u662f\u7528 Perl \u7f16\u5199\u7684\uff0c\u4f46\u968f\u7740\u901f\u5ea6\u66f4\u5feb\u7684 silversurfer \u548c ripgrep \u7684\u6d41\u884c\u5ea6\u8d8a\u6765\u8d8a\u4f4e\uff1b\u57fa\u4e8e Electron \u7684\u7f16\u8f91\u5668 Atom \u51e0\u4e4e\u88ab VSCode \u53d6\u4ee3\uff0cVSCode \u4e5f\u662f\u57fa\u4e8e Electron \u7684\uff0c\u4f46\u901f\u5ea6\u66f4\u5feb\uff1b Chrome \u4e4b\u6240\u4ee5\u6210\u4e3a\u6d4f\u89c8\u5668\u4e4b\u738b\uff0c\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\u5b83\u6bd4 Firefox \u548c Internet Explorer \u5feb\u5f97\u591a\u3002\u6700\u5feb\u7684\u9009\u62e9\u6700\u7ec8\u83b7\u80dc\u3002\u5982\u679c\u7ade\u4e89\u5bf9\u624b\u51fa\u73b0\u5e76\u4e14\u901f\u5ea6\u63d0\u9ad8\u4e86\u5341\u500d\uff0c\u60a8\u7684\u9879\u76ee\u4f1a\u5b58\u6d3b\u4e0b\u6765\u5417\uff1f\u53cd\u5bf9\u5728\u7a0b\u5e8f\u8bbe\u8ba1\u9636\u6bb5\u8003\u8651\u8ba1\u7b97\u673a\u7684\u4e00\u4e2a\u5e38\u89c1\u8bba\u70b9\u662f\u201c\u8fc7\u65e9\u4f18\u5316\u662f\u4e07\u6076\u4e4b\u6e90\u201d\u3002\u7f13\u5b58\u53cb\u597d\u6027\u3001\u5206\u652f\u9884\u6d4b\u548c\u5e76\u884c\u6027\u7b49\u4e3b\u9898\u88ab\u6807\u8bb0\u4e3a\u201c\u4f18\u5316\u201d\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u4eec\u5e94\u8be5\u88ab\u6807\u8bb0\u4e3a\u201c\u5408\u7406\u4f7f\u7528\u201d\u3002\u6211\u4eec\u7528\u6237\u7684\u8ba1\u7b97\u673a\u6709\u8d44\u6e90\uff0c\u6211\u4eec\u5e94\u8be5\u4ee5\u4ed6\u4eec\u4f7f\u7528\u8fd9\u4e9b\u8d44\u6e90\u7684\u65b9\u5f0f\u8bbe\u8ba1\u6211\u4eec\u7684\u7a0b\u5e8f\u3002\u4ee5 CPU \u7f13\u5b58\u4e3a\u4f8b\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u663e\u793a\u4e86\u826f\u597d\u7684\u7f13\u5b58\u4f7f\u7528\u5bf9\u6027\u80fd\u7684\u5de8\u5927\u5f71\u54cd\u662f\u5bf9\u77e9\u9635\u7684\u5143\u7d20\u9010\u884c\u548c\u9010\u5217\u6c42\u548c\uff08\u8fd9\u662f\u4e00\u4e2a Rust Playground \u94fe\u63a5\uff0c\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff09\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9010\u884c\u6bd4\u9010\u5217\u5feb 12-16 \u500d\uff0c\u5373\u4f7f\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684 Big-O \u590d\u6742\u5ea6\u3002\u6027\u80fd\u7684\u5dee\u5f02\u4e0d\u662f\u7531\u4e8e\u62bd\u8c61\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u56e0\u7d20\uff0c\u800c\u662f\u7531\u4e8e\u4e00\u4e2a\u975e\u5e38\u5177\u4f53\u7684\u56e0\u7d20\uff1a\u66f4\u597d\u5730\u5229\u7528 CPU \u7f13\u5b58\u3002\u9010\u884c\u65b9\u6cd5\u5728\u7f13\u5b58\u4e2d\u5e26\u6765 16 \u4e2a\u6d6e\u70b9\u6570\uff0c\u5e76\u5728\u8fd4\u56de\u5185\u5b58\u4e4b\u524d\u4f7f\u7528\u5b83\u4eec\uff1b\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u9010\u5217\u65b9\u6cd5\u4e5f\u5e26\u6765\u4e86 16 \u4e2a\u6d6e\u70b9\u6570\uff0c\u4f46\u5728\u8fd4\u56de RAM \u4e4b\u524d\u53ea\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a\uff0c\u7559\u4e0b 15 \u4e2a\u672a\u4f7f\u7528\u7684\u503c\u2014\u2014\u8fd9\u662f 94% \u7684\u6d6a\u8d39\u3002\u5173\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5e94\u8be5\u6ce8\u610f\u4e00\u4e9b\u4e8b\u60c5\u3002\u9996\u5148\uff0c\u7f16\u8bd1\u5668\u6ca1\u6709\u4e3a\u6211\u4eec\u4f18\u5316\u4ee3\u7801\u3002\u6211\u4eec\u7ecf\u5e38\u542c\u5230\u7a0b\u5e8f\u5458\u65e0\u6cd5\u51fb\u8d25\u4f18\u5316\u7f16\u8bd1\u5668\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u505a\u5230\u4e86\u3002\u6211\u4eec\u53ea\u9700\u8981\u66f4\u6539\u5faa\u73af\u7684\u987a\u5e8f\uff0c\u4f46\u662f\u4f7f\u7528 LLVM \u540e\u7aef\u7684 Rust \u7f16\u8bd1\u5668\u6ca1\u6709\u8fd9\u6837\u505a\u3002\u4e5f\u8bb8\u8457\u540d\u7684\u8db3\u591f\u806a\u660e\u7684\u7f16\u8bd1\u5668\u4f1a\uff0c\u4f46\u5728\u53ef\u9884\u89c1\u7684\u672a\u6765\uff0c\u4ee5\u4e00\u79cd\u53ef\u4ee5\u6709\u6548\u5904\u7406\u7684\u65b9\u5f0f\u6392\u5217\u6570\u636e\u5c06\u4e0d\u662f\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u2014\u2014\u800c\u662f\u6211\u4eec\u7684\u5de5\u4f5c\u3002\u5176\u6b21\uff0c\u5982\u679c\u5728\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u4e2d\u4e0d\u8003\u8651\u5b9e\u9645\u786c\u4ef6\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u83b7\u5f97\u8fd9\u79cd\u52a0\u901f\u3002\u6211\u4eec\u4e0d\u4f1a\u4e3a\u62bd\u8c61\u7684\u3001\u7406\u60f3\u5316\u7684\u6216\u865a\u6784\u7684\u673a\u5668\u7f16\u5199\u4ee3\u7801\uff1a\u6211\u4eec\u7f16\u5199\u5728\u6211\u4eec\u7528\u6237\u7684 CPU \u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u2014\u2014Intel\u3001AMD\u3001Apple \u7b49\u3002\u8fd9\u4e9b CPU \u6709\u7f13\u5b58\uff0c\u7f16\u5199\u4e0e\u786c\u4ef6\u800c\u4e0d\u662f\u53cd\u5bf9\u5b83\u3002\u7b2c\u4e09\uff0c16 \u500d\u7684\u52a0\u901f\u53ef\u80fd\u53ea\u662f\u590d\u6742\u6027\u7406\u8bba\u4e2d\u7684\u4e00\u4e2a\u5e38\u6570\u56e0\u7d20\uff0c\u4f46\u5bf9\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u7a0b\u5e8f\u4f7f\u7528\u6109\u5feb\u548c\u6781\u5ea6\u4ee4\u4eba\u6cae\u4e27\u4e4b\u95f4\u7684\u533a\u522b\u3002\u6216\u8005\u5c0f\u989d AWS \u8d26\u5355\u548c\u5927\u989d AWS \u8d26\u5355\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u6700\u540e\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u4f18\u5316\uff1a\u6211\u4eec\u6b63\u5728\u5229\u7528\u90a3\u91cc\u7684\u8d44\u6e90\u3002\u7528\u6237\u652f\u4ed8\u4e86\u4ed6\u4eec CPU \u7684\u5168\u4ef7\uff0c\u8ba9\u6211\u4eec\u5c1d\u8bd5\u7ed9\u4ed6\u4eec\u7269\u6709\u6240\u503c\u3002\n\u5728\u6211\u770b\u6765\uff0c\u4f18\u5316\u5c06\u5c1d\u8bd5\u5728\u53ef\u4ee5\u5bb9\u7eb3 16 \u4e2a\u7684\u7f13\u5b58\u884c\u4e2d\u6253\u5305 17 \u4e2a\u6d6e\u70b9\u6570\u3002\u5728\u9879\u76ee\u5f00\u59cb\u65f6\u8fd9\u6837\u505a\u786e\u5b9e\u4e3a\u65f6\u8fc7\u65e9\u3002\u6211\u5e0c\u671b\u5f88\u591a\u4eba\u4f1a\u60f3\u5230\u90a3\u53e5\u53e4\u8001\u7684\u683c\u8a00\u201c\u8ba9\u5b83\u5de5\u4f5c\uff0c\u8ba9\u5b83\u6b63\u786e\uff0c\u8ba9\u5b83\u5feb\u901f\u201d\uff0c\u5e76\u8ba4\u4e3a\u5728\u6211\u4eec\u7b2c\u4e00\u6b21\u7f16\u5199\u7a0b\u5e8f\u65f6\u5c06\u673a\u5668\u8003\u8651\u5728\u5185\u662f\u4e13\u6ce8\u4e8e\u201c\u8ba9\u5b83\u5feb\u901f\u201d\uff0c\u7136\u540e\u6211\u4eec\u624d\u5f00\u59cb\u201c\u8ba9\u5b83\u8d77\u4f5c\u7528\u201d\u3002\u6211\u660e\u767d\u8fd9\u4e00\u70b9\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u6309\u987a\u5e8f\u505a\u4e8b\u60c5\uff0c\u8ba9\u6211\u4eec\u7684\u7a0b\u5e8f\u5de5\u4f5c\u7136\u540e\u4f7f\u5b83\u6b63\u786e\uff0c\u5f53\u9700\u8981\u52a0\u5feb\u901f\u5ea6\u65f6\uff0c\u6211\u4eec\u7ecf\u5e38\u610f\u8bc6\u5230\u6211\u4eec\u7684\u8bbe\u8ba1\u5bf9\u6211\u4eec\u4e0d\u5229\uff0c\u6211\u4eec\u5fc5\u987b\u64a4\u6d88/\u91cd\u505a\u5f88\u591a\u6211\u4eec\u6240\u505a\u7684\u5de5\u4f5c\u662f\u4e3a\u4e86\u4f7f\u7a0b\u5e8f\u6709\u6548\u5e76\u4f7f\u5176\u6b63\u786e\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u4ee5\u9762\u5411\u884c\u7684\u65b9\u5f0f\u6392\u5217\u6211\u4eec\u7684\u6570\u636e\uff0c\u5373\u7ed3\u6784\u6570\u7ec4\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u4e3a\u4e86\u52a0\u901f\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u9762\u5411\u5217\u7684\u5b58\u50a8\uff0c\u5373\u6570\u7ec4\u7ed3\u6784\u3002\u5c06\u7a0b\u5e8f\u4ece\u4e00\u79cd\u5f62\u5f0f\u66f4\u6539\u4e3a\u53e6\u4e00\u79cd\u5f62\u5f0f\u662f\u4e00\u9879\u91cd\u5927\u7684\u91cd\u65b0\u67b6\u6784\u9879\u76ee\uff0c\u5982\u679c\u622a\u6b62\u65e5\u671f\u4e34\u8fd1\uff0c\u5e76\u4e14\u5e02\u573a\u4e0a\u7684\u8f6f\u4ef6\u66f4\u6162\uff0c\u683c\u8a00\u53d8\u6210\u201c\u8ba9\u5b83\u5de5\u4f5c\uff0c\u8ba9\u5b83\u6b63\u786e\uff0c\u68a6\u60f3\u8ba9\u5b83\u53d8\u5f97\u66f4\u5feb\u201d\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u7f16\u5199\u5728\u73b0\u4ee3\u673a\u5668\u4e0a\u8fd0\u884c\u5f97\u76f8\u5f53\u5feb\u7684\u4ee3\u7801\u5462\uff1f\u6211\u4eec\u5f00\u59cb\u517b\u6210\u4e60\u60ef\uff0c\u4e0d\u4ec5\u8981\u8003\u8651\u6211\u4eec\u7f16\u5199\u7684\u6a21\u578b\uff0c\u8fd8\u8981\u8003\u8651\u673a\u5236\uff1a\u8868\u793a\u6570\u636e\u7ed3\u6784\u9700\u8981\u591a\u5c11\u5b57\u8282\uff1f\u662f\u5426\u6709\u5f88\u591a\u6307\u9488\u4f1a\u5bfc\u81f4\u7f13\u5b58\u672a\u547d\u4e2d\uff1f\u6570\u636e\u7684\u7ec4\u7ec7\u65b9\u5f0f\u662f\u5426\u4f7f\u5206\u652f\u9884\u6d4b\u7ecf\u5e38\u6b63\u786e\uff1f\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u5206\u5272\u5de5\u4f5c\u4f1a\u5f88\u5bb9\u6613\u5417\uff1f\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4ece\u6279\u6b21\u548c\u7cfb\u7edf\u7684\u89d2\u5ea6\u5f00\u59cb\u601d\u8003\u3002\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u4e3a\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u4e00\u4e2a\u5206\u8bcd\u5668\uff1b\u5982\u679c\u6211\u4eec\u5c06\u4ee4\u724c\u89c6\u4e3a\u5b8c\u5168\u72ec\u7acb\u7684\u6570\u636e\u7247\u6bb5\uff0c\u5219\u6bcf\u4e2a\u4ee4\u724c\u90fd\u9700\u8981\u643a\u5e26\u4e0e\u4ee4\u724c\u5173\u8054\u7684\u5b57\u7b26\u4e32\uff08\u4f8b\u5982\uff0cstruct Token { tag: Tag, text: String, ... }\uff09\u3002\u76f8\u53cd\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6807\u8bb0\u5316\u89c6\u4e3a\u4e00\u4e2a\u7cfb\u7edf\u5e76\u5c06\u6807\u8bb0\u89c6\u4e3a\u8be5\u7cfb\u7edf\u7684\u4f9d\u8d56\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6807\u8bb0\u751f\u6210\u5668\u4e2d\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6c60\uff0c\u5e76\u4e14\u6807\u8bb0\u53ef\u4ee5\u5728\u6c60\u4e2d\u4e3a\u5176\u5173\u8054\u7684\u6587\u672c\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\u3002\u8fd9\u901a\u8fc7\u4e0d\u5fc5\u590d\u5236\u5b57\u7b26\u4e32\u6765\u8282\u7701\u5185\u5b58\u5e76\u4f7f\u4ee4\u724c\u66f4\u5c0f\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u5728\u4e00\u4e2a\u7f13\u5b58\u884c\u4e2d\u5bb9\u7eb3\u66f4\u591a\u3002\u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\u662f\u4e00\u79cd\u5173\u6ce8\u8fd9\u4e9b\u95ee\u9898\u7684\u7f16\u7a0b\u65b9\u6cd5\u3002\u76ee\u524d\uff0c\u5927\u591a\u6570\u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\u4ece\u4e1a\u8005\u90fd\u5728\u6e38\u620f\u884c\u4e1a\u5de5\u4f5c\uff0c\u4f46\u8fd9\u4e9b\u89c1\u89e3\u5728\u5404\u4e2a\u9886\u57df\u90fd\u5f88\u6709\u4ef7\u503c\u3002 \uff08\u4f8b\u5982\uff0cAndy Kelly \u5728 Zig 0.8.0 \u53d1\u884c\u8bf4\u660e\u4e2d\u9ad8\u5ea6\u8bc4\u4ef7\u4e86\u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\u3002\uff09\u5982\u679c\u60a8\u4ece\u672a\u63a5\u89e6\u8fc7\u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\uff0c\u90a3\u53ef\u80fd\u4f1a\u6709\u70b9\u9707\u60ca\u2014\u2014\u5f88\u591a\u5e38\u89c1\u7684\u7f16\u7a0b\u7684\u667a\u6167\uff08\u4f8b\u5982\uff0c\u9c8d\u52c3\u53d4\u53d4\u7684 SOLID \u539f\u5219\uff09\u88ab\u51b7\u9177\u800c\u8270\u96be\u7684\u5de5\u7a0b\u6240\u56de\u907f\u548c\u53d6\u4ee3\u3002\u5b83\u770b\u8d77\u6765\u5f88\u53ef\u6015\u800c\u4e14\u4e0e\u4f17\u4e0d\u540c\uff0c\u4f46\u5982\u679c\u6211\u4eec\u8981\u4ea4\u4ed8\u7684\u8f6f\u4ef6\u901f\u5ea6\u4e0d\u4f1a\u6bd4\u5b83\u6162\u51e0\u4e2a\u6570\u91cf\u7ea7\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u9700\u8981\u505a\u7684\u3002", "note_en": "The computers sitting on our desks are incomprehensibly fast. They can perform more operations in one second than a human could in one hundred years. We live in an era of CPUs that can perform billions of instructions per second, tens of billions if we take multi-cores into account, of memory that can transfer data to the CPU at hundreds of gigabytes per second, of disks that support streaming reads of gigabytes per second. This era of incredibly fast hardware is also the era of programs that take tens of seconds to start from an SSD or NVMe disk; of bloated web applications that take many seconds to show a simple list, even on a broadband connection; of programs that process data at a thousandth of the speed we should expect. Software is laggy and sluggish \u2014 and the situation shows little signs of improvement. Why is that?\n I believe that the main reason is that most of us who started programming after, say the year 2000, have never learned how to make  reasonable use of the computational resources at our disposal. In fact, most of our training has taught us to ignore the computer!\n Although our job is ostensibly to create programs that let users  do stuff with their computers, we place a greater emphasis on the development process and dev-oriented concerns than on the final user product. SICP contains a quote that I find to be a good summarization of the problem: \u201cprograms must be written for people to read, and only incidentally for machines to execute.\u201d Many programmers find that quote wise and inspiring, but users are not interested in reading programs, they\u2019re interested in executing them, fast. We can\u2019t make programs that run fast if we write them in a way that is only \u201cincidentally\u201d executable. The computer is not an implementation detail that can be abstracted away and ignored \u2014 it\u2019s an integral part of the solution. A program that makes no room for the target machine in its design will inevitably run slower than one that does.\n People migrate to faster programs because faster programs allow users to do more. Look at examples from the past: the original Python-based bittorrent client was quickly overtaken by the much faster uTorrent; Subversion lost its status as the premier VCS to Git in large part because every operation was so much faster in Git; the improved grep utility, ack, is written in Perl and waning in popularity to the faster silversurfer and ripgrep; the Electron-based editor Atom has been all but replaced by VSCode, also Electron-based, but which is faster; Chrome became the king of browsers largely because it was much faster than Firefox and Internet Explorer. The fastest option eventually wins. Would your project survive if a competitor came along and was ten times faster?\n A common argument against taking the computer into account during the design phase of a program is \u201cpremature optimzation is the root of all evil.\u201d Topics such as cache-friendliness, branch prediction, and parallelism are labeled as \u201coptimization\u201d, but really they should be labeled as \u201creasonable use\u201d. Our users&#39; computers have resources and we should design our programs in a way that they use those resources.\n Take the CPU cache for example. A simple program that shows what a massive impact good cache usage can have on performance is to sum the elements of a matrix row-by-row vs. column-by-column (here\u2019s a  Rust Playground link that demonstrates this). In this example, the row-by-row is about 12\u201316 times faster than the column-by-column, even though they have same Big-O complexity. The difference in performance is not due to an abstract, computer science factor, but due to a very concrete one: better use of the CPU cache. The row-by-row approach brings 16 floats in cache and uses them all before going back to memory; by contrast the column-by-column approach also brings 16 floats, but only uses one of them before going back to RAM, leaving 15 values unused \u2014 that\u2019s 94% waste.\n   There are a few things we should note about this example. First, the compiler did not optimize the code for us. We often hear that programmers can\u2019t beat an optimizing compiler, but in this case we did. We only needed to change the order of the loops, but the Rust compiler which uses the LLVM backend, did not do it. Maybe the famed sufficiently smart compiler would, but for the foreseeable future, arranging data in a way that it can be processed efficiently will not be the compiler\u2019s job \u2014 it\u2019ll be ours. Second, we can\u2019t get that speed-up without taking the actual hardware into account in our solution. We do not write code for abstract, idealized, or fictitious machines: we write code that runs on the CPUs of our users \u2014 Intel, AMD, Apple, etc. These CPUs have caches and it\u2019s perfectly reasonable to write code that works well with the hardware rather than against it. Third, a 16x speed-up may only be a constant factor in complexity theory, but to a user it can be the difference between a program being pleasant to use and being extremely frustrating. Or the difference between a small and large AWS bill. And finally, we should not consider this to be an optimization: we\u2019re making use of a resource that\u2019s there. The users paid the full price of their CPU, let\u2019s try and give them their money\u2019s worth.\n In my mind, an optimization would be trying to pack 17 floats in a cache line that can fit 16. Doing this at the beginning of the project would indeed be premature.\n I expect that many will think of the old aphorism \u201cmake it work, make it right, make it fast\u201d and argue that taking the machine into account when first writing the program is focusing on \u201cmake it fast\u201d before we even got to \u201cmake it work\u201d. I get that, but if we do things in order and make our program work and then make it right, when it\u2019s time to make it fast, we often realize that our design works against us and we have to undo/redo a lot of the work we did to make the program work and to make it right.\n For example, we may have arranged our data in a row-oriented fashion aka array of structs and we realize that in order to speed up our program we would need column-oriented storage, aka struct of arrays. Changing a program from one form to the other is a major re-architecture project, and one that may not be feasible if there\u2019s a deadline approaching and that\u2019s more slow software on the market and the aphorism becomes \u201cmake it work, make it right, dream of making it fast\u201d.\n So how do we write code that runs reasonably quickly on modern machines? We start by getting into the habit of not just thinking about the model of what we write, but also the mechanics: how many bytes are needed to represent a data structure? Are there many pointers that will cause cache misses? Is the data organized in a way that the branch prediction will be right often? Would it be easy to slice the work among multiple threads?\n Another way is to start thinking in terms of batches and systems. Suppose we are writing a tokenizer for a programming language; if we think about tokens as completely independent pieces of data, each one needs to carry the string associated with the token (e.g.,  struct Token { tag: Tag, text: String, ... }). If instead we think of tokenization as a system and of tokens as dependents of this system, we can create a string pool in the tokenizer and tokens can have an index into the pool for their associated text. This saves memory by not having to duplicate strings and makes the tokens smaller, which means more can fit in one cache line.\n Data-orienteddesign is anapproach to programming that concerns itself with such questions. At the moment, most data-oriented design practitioners work in the game industry, but the insights are valuable in every field. (For example, Andy Kelly spoke highly of data-oriented design in the  Zig 0.8.0 release notes.) If you\u2019ve never been exposed to data-oriented design, it can be a bit of a shock \u2014 a lot of the common  wisdom of programming (e.g., Uncle Bob\u2019s SOLID principles) is eschewed and replaced with cold, hard engineering. It looks scary and different, but it\u2019s what we need to do if we are to deliver software that is not orders of magnitude slower than it can be.", "posttime": "2021-08-08 10:54:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5229\u7528\u8ba1\u7b97\u673a,reasonable,\u7a0b\u5e8f", "title": "\u5408\u7406\u5229\u7528\u8ba1\u7b97\u673a\u8d44\u6e90", "title_en": "Making Reasonable Use of Computer Resources", "transed": 1, "url": "https://vfoley.xyz/reasonable-use/", "via": "", "real_tags": ["\u5229\u7528\u8ba1\u7b97\u673a", "\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "a33eace70f80a409cee7f47989938014.jpg", "infoid": 1072055, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u72ec\u7acb\u524d\u4e00\u5e74\uff0c\u5927\u9646\u4f1a\u8bae\u521b\u5efa\u4e86\u90ae\u653f\u670d\u52a1\u2014\u2014\u4e0d\u662f\u4f5c\u4e3a\u4e00\u4e2a\u653f\u5e9c\u673a\u6784\uff0c\u800c\u662f\u4f5c\u4e3a\u82f1\u56fd\u90ae\u653f\u7cfb\u7edf\u7684\u51e0\u4e2a\u65b0\u7684\u72ec\u7acb\u66ff\u4ee3\u65b9\u6848\u4e4b\u4e00\u3002\u4e00\u4e2a\u4f18\u52bf\uff1a\u8fd9\u5141\u8bb8\u7f8e\u56fd\u6301\u4e0d\u540c\u653f\u89c1\u8005\u5728\u6ca1\u6709\u5f53\u5c40\u62e6\u622a\u4ed6\u4eec\u7684\u4fe1\u4ef6\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u4ea4\u6d41\u3002\u5357\u65b9\u66b4\u6c11\u6ca1\u6536\u5e76\u70e7\u6bc1\u901a\u8fc7\u90ae\u4ef6\u53d1\u9001\u7684\u5e9f\u5974\u4e3b\u4e49\u6750\u6599\u3002\u90ae\u653f\u5c40\u957f\u62d2\u7edd\u5e72\u9884\uff0c\u5236\u5b9a\u4e86\u4e00\u9879\u4e8b\u5b9e\u4e0a\u7684\u653f\u7b56\uff0c\u5141\u8bb8\u5728\u5974\u96b6\u5dde\u5ba1\u67e5\u6b64\u7c7b\u6587\u732e\u3002\u81ea\u7531\u4e3b\u4e49\u5e9f\u5974\u4e3b\u4e49\u8005 Lysander Spooner \u5efa\u7acb\u4e86\u79c1\u4eba\u7684 American Letter Mail Co.\u3002\u653f\u5e9c\u7684\u53cd\u5e94\u662f\u53d6\u7f14\u5b83\uff0c\u5e76\u5728 1851 \u5e74\u5b9e\u9a8c\u7ed3\u675f\u3002\u5185\u6218\u5f00\u59cb\uff0c\u8054\u90a6\u548c\u90a6\u8054\u90fd\u91c7\u7528\u4e86\u81ea\u5df1\u7684\u90ae\u653f\u5ba1\u67e5\u5f62\u5f0f\u3002\u90ae\u653f\u5c40\u957f\u82b1\u4e86\u4e00\u5e74\u65f6\u95f4\u62d2\u7edd\u6295\u9012\u88ab\u8ba4\u4e3a\u4e0d\u5fe0\u4e8e\u5de5\u4f1a\u4e8b\u4e1a\u7684\u6587\u4ef6\u3002\u5eb7\u65af\u6258\u514b\u6cd5\u6848\u89c4\u5b9a\uff0c\u6545\u610f\u90ae\u5bc4\u6216\u63a5\u6536\u4efb\u4f55\u201c\u80ae\u810f\u7684\u4e66\u7c4d\u3001\u5c0f\u518c\u5b50\u3001\u56fe\u7247\u3001\u7eb8\u5f20\u3001\u4fe1\u4ef6\u3001\u6587\u5b57\u3001\u5370\u5237\u54c1\u6216\u5176\u4ed6\u4e0d\u96c5\u7684\u51fa\u7248\u7269\u201d\uff0c\u4ee5\u53ca\u4efb\u4f55\u907f\u5b55\u836f\u3001\u4efb\u4f55\u5815\u80ce\u836f\u6216\u4efb\u4f55\u6709\u5173\u83b7\u53d6\u6216\u4f7f\u7528\u907f\u5b55\u836f\u5177\u6216\u5815\u80ce\u836f\u3002\u6700\u9ad8\u6cd5\u9662\u652f\u6301\u653f\u5e9c\u7981\u6b62\u90ae\u5bc4\u201c\u5173\u4e8e\u5f69\u7968\u7684\u901a\u544a\u201d\u7684\u6743\u5229\u2014\u2014\u5e76\u4e14\uff0c\u53ea\u8981\u6709\u6388\u6743\uff0c\u5c31\u53ef\u4ee5\u6253\u5f00\u548c\u68c0\u67e5\u5305\u88f9\u4ee5\u627e\u5230\u6b64\u7c7b\u6750\u6599\u3002\u8b66\u5bdf\u902e\u6355\u4e86\u81ea\u7531\u4e3b\u4e49\u8bb0\u8005\u6469\u897f\u00b7\u54c8\u66fc\u3001\u57c3\u5fb7\u6e29\u00b7C\u00b7\u6c83\u514b\u548c\u4e54\u6cbb\u00b7\u54c8\u66fc\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53d1\u8868\u548c\u90ae\u5bc4\u53cd\u5bf9\u5a5a\u5185\u5f3a\u5978\u7684\u5973\u6743\u4e3b\u4e49\u8bba\u70b9\u3002\u6839\u636e\u5eb7\u65af\u6258\u514b\u6cd5\u6848\uff0c\u4f5c\u8005\u5bf9\u6b64\u7c7b\u653b\u51fb\u7684\u63cf\u8ff0\u88ab\u89c6\u4e3a\u6deb\u79fd\u3002\n\u7f8e\u56fd\u8fdb\u5165\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u540e\uff0c\u5a01\u5c14\u900a\u653f\u5e9c\u4e25\u5389\u6253\u51fb\u53cd\u6218\u3001\u53cd\u5f81\u6587\u3002\u5728\u65e0\u653f\u5e9c\u4e3b\u4e49\u6742\u5fd7\u300a\u5730\u7403\u6bcd\u4eb2\u300b\u7684\u6848\u4f8b\u4e2d\uff0c\u653f\u5e9c\u4e0d\u4ec5\u7981\u6b62\u90ae\u5bc4\u6750\u6599\u2014\u2014\u5b83\u8fd8\u902e\u6355\u4e86\u7f16\u8f91\u827e\u739b\u00b7\u6208\u5fb7\u66fc\uff0c\u7f6a\u540d\u662f\u201c\u9634\u8c0b\u8bf1\u4f7f\u4eba\u4eec\u4e0d\u6ce8\u518c\u201d\u53c2\u52a0\u9009\u79c0\uff0c\u76d1\u7981\u5979\uff0c\u5e76\u6700\u7ec8\u5c06\u5979\u9a71\u9010\u51fa\u5883\u3002\u653f\u5e9c\u62e6\u622a\u4e86\u7a0e\u52a1\u62b5\u6297\u8005 Vivien Kellems\uff08\u7f57\u65af\u798f\u653f\u5e9c\u7684\u8457\u540d\u6279\u8bc4\u8005\uff09\u7684\u56fd\u9645\u901a\u4fe1\uff0c\u5e76\u5c06\u5176\u6cc4\u9732\u7ed9\u4e13\u680f\u4f5c\u5bb6 Drew Pearson \u548c\u4f17\u8bae\u5458 John M. Coffee\uff08\u534e\u76db\u987f\u5dde\u6c11\u4e3b\u515a\uff09\u3002\u5496\u5561\u5728\u4f17\u8bae\u9662\u5730\u677f\u4e0a\u5f15\u7528\u4e86\u5b83\uff0c\u540c\u65f6\u6307\u8d23\u51ef\u52d2\u59c6\u65af\u98a0\u8986\u3002\u4e2d\u592e\u60c5\u62a5\u5c40\u5f00\u59cb\u9605\u8bfb\u7f8e\u56fd\u548c\u82cf\u8054\u4eba\u4e4b\u95f4\u7684\u4fe1\u4ef6\u3002\u79d8\u5bc6\u8ba1\u5212\u8fc5\u901f\u6269\u5c55\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u76d1\u89c6\u540d\u5355\uff0c\u8be5\u673a\u6784\u6bcf\u5e74\u975e\u6cd5\u6253\u5f00 13,000 \u591a\u5c01\u4fe1\u4ef6\uff0c\u76f4\u5230\u8be5\u884c\u52a8\u4e8e 1973 \u5e74\u7ed3\u675f\u3002\u5728\u95ee\u9898\u88ab\u8fd0\u9001\u5230\u5206\u9500\u5546\u4e4b\u524d\uff0c\u7528\u4e00\u79cd\u53eb\u505a Skatole \u7684\u5316\u5b66\u7269\u8d28\u9ed1\u8c79\uff0c\u4ece\u800c\u7ed9\u4ed6\u4eec\u201c\u4e00\u79cd\u6700\u96be\u95fb\u7684\u6c14\u5473\u201d\u3002\u8be5\u5c40\u653e\u5f03\u4e86\u8be5\u7279\u5b9a\u8ba1\u5212\uff0c\u4f46\u627e\u5230\u4e86\u5176\u4ed6\u65b9\u6cd5\u6765\u4f7f\u7528\u90ae\u4ef6\u9a9a\u6270\u66ff\u4ee3\u6587\u4ef6\u3002\u5728 9/11 \u540e\u70ad\u75bd\u88ad\u51fb\u4e4b\u540e\uff0c\u653f\u5e9c\u521b\u5efa\u4e86\u90ae\u4ef6\u9694\u79bb\u63a7\u5236\u548c\u8ddf\u8e2a\u7cfb\u7edf\uff0c\u4ee5\u6536\u96c6\u51e0\u4e4e\u6240\u6709\u5bc4\u5f80\u7f8e\u56fd\u7684\u90ae\u4ef6\u7684\u5916\u90e8\u4fe1\u606f\u3002\u4e00\u4f4d\u7f51\u7edc\u5b89\u5168\u4e13\u5bb6\u540e\u6765\u4e3a\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u603b\u7ed3\u4e86\u8be5\u8ba1\u5212\uff1a\u201c\u8ba9\u6211\u4eec\u8bb0\u5f55\u6bcf\u4e2a\u4eba\u7684\u90ae\u4ef6\uff0c\u4ee5\u4fbf\u5c06\u6765\u6211\u4eec\u53ef\u4ee5\u56de\u53bb\u770b\u770b\u4f60\u5728\u4e0e\u8c01\u4ea4\u6d41\u3002\u201d\u7f16\u8005\u6ce8\uff1a\u6211\u4eec\u9080\u8bf7\u8bc4\u8bba\u5e76\u8981\u6c42\u5b83\u4eec\u662f\u6587\u660e\u7684\u548c\u4e3b\u9898\u7684\u3002\u6211\u4eec\u4e0d\u5bf9\u8bc4\u8bba\u8fdb\u884c\u5ba1\u6838\u6216\u627f\u62c5\u4efb\u4f55\u8d23\u4efb\uff0c\u8fd9\u4e9b\u8bc4\u8bba\u5f52\u53d1\u8868\u8bc4\u8bba\u7684\u8bfb\u8005\u6240\u6709\u3002\u8bc4\u8bba\u4e0d\u4ee3\u8868 Reason.com \u6216 Reason Foundation \u7684\u89c2\u70b9\u3002\u6211\u4eec\u4fdd\u7559\u968f\u65f6\u4ee5\u4efb\u4f55\u7406\u7531\u5220\u9664\u4efb\u4f55\u8bc4\u8bba\u7684\u6743\u5229\u3002\u4e3e\u62a5\u6ee5\u7528\u884c\u4e3a\u3002 \u201c\u79d8\u5bc6\u8ba1\u5212\u8fc5\u901f\u6269\u5c55\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u76d1\u89c6\u540d\u5355\uff0c\u8be5\u673a\u6784\u6bcf\u5e74\u975e\u6cd5\u6253\u5f00 13,000 \u591a\u5c01\u4fe1\u4ef6\uff0c\u76f4\u5230\u8be5\u884c\u52a8\u4e8e 1973 \u5e74\u7ed3\u675f\u201d\n\u60a8\u5c06\u7a7a\u6c14\u5439\u5165\u5185\u90e8\uff0c\u5c06\u73bb\u7483\u7ea4\u7ef4\u6210\u50cf\u5de5\u5177\u63d2\u5165\u7f1d\u9699\u4e2d\uff0c\u6574\u4e2a\u5185\u5bb9\u5c31\u50cf\u5e73\u653e\u5728\u684c\u5b50\u4e0a\u4e00\u6837\u6613\u4e8e\u9605\u8bfb\u3002\u5982\u679c\u9876\u90e8\u88ab\u5de7\u5999\u5730\u5bc6\u5c01\uff0c\u5728\u4e24\u7aef\u7684\u6298\u53e0\u5904\u6233\u4e00\u4e2a\u7f29\u7565\u56fe\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5c0f\u6495\u88c2\u53e3\u63d2\u5165\u6210\u50cf\u7535\u7f06\u3002\u90a3\u662f\u5728 Bush/Bush Kreigswaffen \u63a2\u9669\u4e4b\u524d\u3002\u70ad\u75bd\u201c\u4e0d\u5e73\u7b49\u4f46\u9002\u5f53\u201d\u7684\u62a5\u590d\u53ef\u80fd\u4f7f X \u5c04\u7ebf\u548c\u4e2d\u5b50\u6fc0\u6d3b\u66f4\u5bb9\u6613\u83b7\u5f97\u8d44\u91d1\uff0c\u56e0\u4e3a\u53d1\u52a8\u6b66\u529b\u7684\u653f\u5ba2\u662f\u76f4\u63a5\u76ee\u6807\u3002\u4e0b\u6b21\u60a8\u6709\u673a\u4f1a\u6295\u7968\u53cd\u5bf9\u542f\u52a8\u6b66\u529b\u65f6\uff0c\u8bf7\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u3002\u4e0d\u8fc7\uff0c\u6211\u4ecd\u5728\u7b49\u5f85\u201c\u81ea\u7531\u4e3b\u4e49\u8005\u7684\u5267\u900f\u6295\u7968\u201d\u8ba9\u4e00\u5207\u53d8\u5f97\u66f4\u597d\u3002\u8fc7\u53bb\u7684\u9009\u4e3e\u6bd4\u4ee5\u524d\u7684\u9009\u4e3e\u5c11\u3002 50 \u5e74\u5bf9\u4e8e\u4e00\u4e2a\u653f\u515a\u53ca\u5176\u610f\u8bc6\u5f62\u6001\u6765\u8bf4\u8db3\u4ee5\u6539\u53d8\u4e00\u4e2a\u56fd\u5bb6\u548c\u4e00\u4e2a\u4e16\u754c\uff0c\u6240\u4ee5\u5f88\u660e\u663e\u6709\u4eba\u505a\u5f97\u4e0d\u5bf9\u3002\u6211\u4eec\u771f\u7684\u9700\u8981\u5148\u77e5\u9053\uff0c\u7279\u6717\u666e\u4eca\u5929\u662f\u8d5e\u6210\u8fd8\u662f\u53cd\u5bf9\uff1f\u56e0\u4e3a\u8fd9\u91cc\u7684\u5927\u91cf\u8bc4\u8bba\u8005\u4f1a\u6548\u4eff\u3002\u662f\u7684\uff0c\u5c31\u50cf\u7279\u6717\u666e\u7b2c\u4e00\u6b21\u9650\u5236\u8fdb\u51fa\u9ad8\u65b0\u51a0\u75c5\u6bd2\u5730\u533a\u7684\u65c5\u884c\u4e00\u6837\uff0cTDS \u4eba\u7fa4\u62a8\u51fb\u4ed6\u6392\u5916\u3002\u4e16\u754c\u4e0a\u54ea\u91cc\u4f1a\u6709\u4eba\u666e\u904d\u8ba4\u4e3a\u7279\u6717\u666e\u53ef\u80fd\u662f\u4ec7\u5916\u8005\uff1f\u8fd9\u771f\u7684\u662f\u4e00\u4e2a\u75af\u72c2\u7684\u8c1c...... Drumpf \u4e25\u5389\u7684\u79fb\u6c11\u9650\u5236\u65e0\u7591\u4fc3\u6210\u4e86\u8fd9\u4e2a\u56fd\u5bb6\uff08\u9664\u4e86\u50cf\u7ebd\u7ea6\u8fd9\u6837\u7684\u84dd\u8272\u5dde\uff09\u707e\u96be\u6027\u7684\u5927\u6d41\u884c\u53cd\u5e94\u3002\n\u60f3\u60f3\u6240\u6709\u60f3\u8981\u8de8\u8d8a\u8fb9\u754c\u5e76\u5e2e\u52a9\u6211\u4eec\u4e0d\u582a\u91cd\u8d1f\u7684\u533b\u9662\u7684\u9ad8\u6280\u80fd\u58a8\u897f\u54e5\u533b\u751f\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u88ab\u6254\u8fdb\u4e86\u771f\u6b63\u7684\u96c6\u4e2d\u8425\u3002\u597d\u5427\uff0c\u4f60\u6765\u8fd9\u91cc\u662f\u4e3a\u4e86\u628a\u5de6\u6d3e\u548c\u6c11\u4e3b\u515a\u4eba\u5f53\u4f5c\u4e00\u5f20\u4ed8\u8d39\u6d77\u62a5\u6216\u53ea\u662f\u4e00\u53ea\u53ef\u601c\u7684\u6258\u5c3c\u889c\u5b50\u3002\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u4f60\u90fd\u662f\u4e00\u4e2a\u7b11\u8bdd\u3002\u4ed6\u4eec\u9519\u8fc7\u4e86\u4e00\u4e2a\u91cd\u8981\u4e14\u4ee3\u4ef7\u9ad8\u6602\u7684\u8ba1\u5212\u3002\u5728\u70ad\u75bd\u6050\u614c\u4e4b\u540e\uff0c\u90ae\u5c40\u5f00\u59cb\u5c06\u6240\u6709\u653f\u5e9c\u4fe1\u4ef6\u53d1\u9001\u5230\u4fc4\u4ea5\u4fc4\u5dde\u7684\u4e00\u4e2a\u8bbe\u65bd\uff0c\u7528\u8f90\u5c04\u6765\u6740\u6b7b\u4efb\u4f55\u53ef\u80fd\u6f5c\u4f0f\u5728\u91cc\u9762\u7684\u70ad\u75bd\u5b62\u5b50\u3002\u5b83\u975e\u5e38\u6602\u8d35\uff0c\u800c\u4e14\u4f1a\u51cf\u6162\u901a\u4fe1\u548c\u5305\u88f9\u7684\u901f\u5ea6\u3002\u81ea 2001 \u5e74\u4ee5\u6765\uff0c\u70ad\u75bd\u75c5\u4e00\u76f4\u6ca1\u6709\u901a\u8fc7\u90ae\u4ef6\u53d1\u9001\uff0c\u4f46\u4ed6\u4eec\u5c06\u7ee7\u7eed\u82b1\u8d39\u6570\u5341\u4ebf\u7f8e\u5143\u6765\u4fdd\u62a4\u4e00\u4e24\u4e2a\u653f\u5e9c\u5de5\u4f5c\u4eba\u5458\u514d\u53d7\u4f24\u5bb3\u3002\u611f\u8c22\u4e0a\u5e1d\uff0c\u653f\u5e9c\u786e\u4fdd\u6211\u65e0\u6cd5\u83b7\u5f97\u6216\u53d1\u9001\u53ef\u80fd\u5bf9\u6211\u6216\u96c6\u4f53\u66f4\u5927\u5229\u76ca\u4e0d\u5229\u7684\u4e1c\u897f\uff0c\u8fd9\u4e9b\u66f4\u5927\u7684\u597d\u5904\u7531\u5f53\u524d\u638c\u6743\u7684\u4efb\u4f55\u6d3e\u7cfb\u6216\u653f\u5e9c\u672c\u8eab\u7684\u795e\u5723\u6027\u51b3\u5b9a\u3002\u6ca1\u6709\u63d0\u5230\u6240\u6709\u5728\u4e8c\u6218\u671f\u95f4\u79bb\u5f00\u7f8e\u56fd\u548c\u6765\u5230\u7f8e\u56fd\u7684\u90ae\u4ef6\u90fd\u88ab\u68c0\u67e5\u4e86\uff0c\u8fea\u514b\u548c\u963f\u7433\u00b7\u8d39\u66fc\u5728\u6d1b\u65af\u963f\u62c9\u83ab\u65af\u4e0e\u5ba1\u67e5\u5458\u73a9\u800d\u3002\u7136\u540e\u662f\u7ea6\u585e\u91cc\u5b89\u5728\u7b2c 22 \u6761\u4e16\u754c\u5927\u6218\u4e2d\u5bf9\u610f\u5927\u5229\u6d77\u5cb8\u9644\u8fd1\u7684\u90ae\u4ef6\u8fdb\u884c\u5ba1\u67e5\u3002 Butcha \u4e0d\u53ef\u80fd\u62e5\u6709\u4e00\u5207\u2026\u2026\u4f60\u4f1a\u628a\u5b83\u653e\u5728\u54ea\u91cc\uff1f\u95ee\u9898\u3002\u7531\u4e8e\u7b2c\u56db\u4fee\u6b63\u6848\u2014\u2014\u4f5c\u4e3a\u963b\u6b62\u8fd9\u4e9b\u6ee5\u7528\u7684\u4e00\u79cd\u624b\u6bb5\u2014\u2014\u4ec5\u9002\u7528\u4e8e\u6a61\u76ae\u7cd6\u800c\u4e0d\u9002\u7528\u4e8e\u79c1\u8425\u90e8\u95e8\uff0c\u79c1\u6709\u5316 PO \u5c06\u5982\u4f55\u6539\u5584\u8fd9\u4e00\u70b9\uff1f\n\u6770\u897f\u7684\u53e6\u4e00\u7bc7\u5f15\u4eba\u6ce8\u76ee\u7684\u7cbe\u5f69\u6587\u7ae0\u3002\u8bf7\u6ce8\u610f\u539a\u539a\u7684 A \u7ea7\u4e8b\u5b9e\u5185\u5bb9\u5728\u8089\u6c41\u4e2d\u6e38\u52a8\uff0c\u56e0\u4e3a\u53ea\u6709\u901a\u8fc7\u4ed4\u7ec6\u4fee\u526a\u624d\u80fd\u83b7\u5f97\u90a3\u79cd\u8f9b\u8fa3\u7684\u7b80\u6d01\u611f\u3002\u7f8e\u98df\u62a5\u9053\uff01\u90ae\u653f\u670d\u52a1\uff0c\u9664\u4e86\u4e00\u4e9b\u8d26\u5355\u548c\u5783\u573e\u90ae\u4ef6\u4e4b\u5916\uff0c\u5b83\u4eec\u8fd8\u6709\u522b\u7684\u7528\u9014\u5417\uff1f\u8fd9\u771f\u662f\u4ee4\u4eba\u9707\u60ca\u3002", "note_en": "A year before independence, the Continental Congress creates the Postal Service\u2014not as a government agency, but as one of several new independent alternatives to the British postal system. One advantage: This allows American dissidents to communicate without the authorities intercepting their letters.\n  Southern mobs seize and burn abolitionist material sent through the mail. The postmaster general refuses to intervene, establishing a de facto policy of permitting the censorship of such literature in the slave states.\n  The libertarian abolitionist Lysander Spooner establishes the private American Letter Mail Co. The government reacts by outlawing it, and in 1851 the experiment ends.\n  The Civil War begins, and both the Union and the Confederacy adopt their own forms of postal censorship. The postmaster general spends a year refusing to deliver papers deemed disloyal to the Union cause.\n  The Comstock Act makes it illegal to knowingly mail or receive any &#34;filthy book, pamphlet, picture, paper, letter, writing, print, or other publication of an indecent character,&#34; as well as any contraceptives, any abortifacients, or any information about acquiring or using contraceptives or abortifacients.\n  The Supreme Court upholds the government&#39;s right to bar &#34;circulars concerning lotteries&#34; from the mail\u2014and, provided it has a warrant, to open and inspect packages to find such material.\n  Police arrest the libertarian journalists Moses Harman, Edwin C. Walker, and George Harman for publishing and mailing a feminist argument against marital rape. The author&#39;s description of such an assault is deemed obscene under the Comstock Act.\n  After the U.S. enters World War I, the Wilson administration cracks down on anti-war and anti-draft literature. In the case of the anarchist magazine  Mother Earth, the government doesn&#39;t just bar the material from the mail\u2014it arrests editor Emma Goldman for &#34;conspiracy to induce persons not to register&#34; for the draft, imprisons her, and eventually deports her.\n  The government intercepts the international correspondence of tax resister Vivien Kellems\u2014a prominent critic of the Roosevelt administration\u2014and leaks it to columnist Drew Pearson and Rep. John M. Coffee (D\u2013Wash.). Coffee quotes from it on the House floor while accusing Kellems of subversion.\n  The CIA starts reading correspondence between people in the U.S. and the Soviet Union. The covert program quickly extends to a much larger watchlist, with the agency illegally opening more than 13,000 letters a year until the operation ends in 1973.\n  As part of its campaign against the underground press, the FBI considers a scheme to spray copies of\u00a0 The Black Panther\u00a0with a chemical called Skatole before the issues are shipped to distributors, thus giving them &#34;a most offensive odor.&#34; The bureau drops that particular plan but finds other ways to harass alternative papers using the mails.\n  In the wake of the post-9/11 anthrax attacks, the government creates the Mail Isolation Control and Tracking system to collect the information on the exterior of virtually everything mailed in the United States. One cybersecurity specialist later sums up the program for\u00a0 The New York Times: &#34;Let&#39;s record everyone&#39;s mail so in the future we might go back and see who you were communicating with.&#34;\n    Editor&#39;s Note: We invite comments and request that they be civil and on-topic. We do not moderate or assume any responsibility for comments, which are owned by the readers who post them. Comments do not represent the views of Reason.com or Reason Foundation. We reserve the right to delete any comment for any reason at any time.  Report abuses.\n  \u201cThe covert program quickly extends to a much larger watchlist, with the agency illegally opening more than 13,000 letters a year until the operation ends in 1973\u201d\n You blow air inside, insert fiberglass imaging tool in a gap and the entire content is as easily readable as if flat on a table. If the top is craftily sealed, poke a thumbnail into a fold at either end and insert imaging cable through a small tear. That was before Bush/Bush Kreigswaffen expeditions. The anthrax \u201cunequal but apposite\u201d retaliation may have made X-raying and neutron activation all the more easier to fund, since force-initiating politicians were directly targeted. Remember this when next you have a chance to vote against the initiation of force.\n  I\u2019m still waiting for \u201cLibertarian spoiler votes\u201d to make everything all better, though. There were less this past Election that even in previous Elections.\n  And 50 years is long enough for a political party and its ideology to change a nation and a world, so obviously somebody\u2019s not doing something right.\n  We really need to know first, is Trump for or against this today? Because a ton of commenters here will then follow suit.\n Yeah, like when Trump first restricted travel to and from high COVID areas and the TDS crowd lambasted him for being xenophobic.\n Where in the world would folks get the general idea that Trump might be xenophobic? It\u2019s truly a deranged mystery\u2026\n  Drumpf\u2019s draconian immigration restrictions certainly contributed to this country\u2019s (except for blue states like NY) disastrous pandemic response.\n  Just think of all the highly skilled Mexican doctors who wanted to cross the border and help our overwhelmed hospitals. Instead they were thrown into literal concentration camps.\n  Well you\u2019re here to fluff the left and democrats as a paid poster or just a pathetic Tony sock. Either way you\u2019re a joke.\n  They missed an important and costly program. After the Anthrax scares, the post office began sending all government correspondence to a facility in Ohio to be blasted with radiation to kill any anthrax spores that may lurk inside. It is outrageously expensive and slows correspondence and packages. Anthrax hasn\u2019t been sent through the mail since 2001, but they will continue to spend billions to protect one or two government workers from harm.\n    Thank god the government makes sure I can\u2019t get or send things that might be bad for me or the collective greater good, that greater good determined by whatever faction currently holds power, or the sanctity of the government itself.\n  failed to mention all mail leaving the U.S. and coming to the U.S. during WWII was inspected\n That and Dick and Arline Feynman toying with the censors at Los Alamos. And then there was Yossarian\u2019s censoring of mail off the coast of Italy in World War Catch-22. Butcha can\u2019t have everything\u2026 where would you put it?\n  Question. Since the 4th amendment \u2013 as a means of stopping those abuses \u2013 only applies to gummint not to private sector, how would privatizing the PO improve this?\n  Another conspicuously brilliant article by Jesse. Note the thick slices of Grade-A factual content swimming in gravy thickened by the kind of spicy terseness obtainable only through careful trimming. Gourmet reporting!\n  The postal service, are they still a thing for anything other than a few bills and junk mail? That\u2019s truly shocking.", "posttime": "2021-08-08 10:54:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u6c11\u4f17,long,\u653f\u5e9c", "title": "\u7f8e\u56fd\u653f\u5e9c\u957f\u671f\u622a\u83b7\u6c11\u4f17\u4fe1\u4ef6\u7684\u803b\u8fb1\u5386\u53f2", "title_en": "The U.S. government's long and shameful history of intercepting people's letters", "transed": 1, "url": "https://reason.com/2021/07/15/postal-censorship-and-surveillance-a-timeline/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u6c11\u4f17", "long", "\u653f\u5e9c"]}, {"category": "", "categoryclass": "", "imagename": "6f428d4e05342e8377b82174d6bdd5c7.jpg", "infoid": 1072053, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u5c0f\u8d29\u6b63\u5728\u4ed6\u7684\u624b\u63a8\u8f66\u4e0a\u5207\u4e0b\u770b\u8d77\u6765\u50cf\u6811\u5e72\u7684\u4e1c\u897f\u3002\u8fd9\u662f\u5728\u73ed\u52a0\u7f57\u5c14\uff0c\u6211\u5c45\u4f4f\u7684\u5370\u5ea6\u5357\u90e8\u5361\u7eb3\u5854\u514b\u90a6\u7684\u57ce\u5e02\u3002\u6838\u5fc3\u662f\u4e73\u767d\u8272\uff0c\u76ae\u80a4\u662f\u68d5\u6a59\u8272\u3002\u4ed6\u4ee5\u5916\u79d1\u533b\u751f\u7684\u7cbe\u786e\u5ea6\u6c34\u5e73\u5730\u3001\u6210\u5708\u5730\u5207\u5272\uff0c\u8584\u5f97\u6211\u53ef\u4ee5\u770b\u7a7f\u788e\u7247\u3002 \u201c\u8fd9\u662f\u6839\u3002\u5b83\u53ef\u4ee5\u957f\u5230 5 \u82f1\u5c3a\u6df1\uff0c\u91cd\u8fbe 300 \u516c\u65a4\uff0c\u201d\u4ed6\u5728\u56de\u5e94\u6211\u7684\u9707\u60ca\u65f6\u89e3\u91ca\u9053\u3002\u4ed6\u8bf4\uff0c\u5b83\u6765\u81ea\u90bb\u8fd1\u7684\u5580\u62c9\u62c9\u90a6\uff0c\u6765\u81ea\u201c\u4ece\u68ee\u6797\u4e2d\u83b7\u53d6\u5b83\u201d\u7684\u4eba\u3002\u4ed6\u6ca1\u6709\u770b\u5230\u4efb\u4f55\u4eba\u63d0\u53d6\u6839\uff0c\u4f46\u770b\u5230\u4e86\u5b83\u6765\u81ea\u7684\u6811\u3002 \u201c\u8fd9\u5c31\u50cf\u4e00\u4e2a\u767b\u5c71\u8005\u3002\u5b83\u9001\u82b1\u3002\u5b83\u751f\u957f\u5728\u6d77\u8fb9\u3002\u5b83\u5728\u5370\u5ea6\u5357\u90e8\u88ab\u79f0\u4e3a Bhoochakara Gadda\uff0c\u5728\u5317\u90e8\u88ab\u79f0\u4e3a Ram Kand Mool\u3002\u201d\u6839\u53ef\u4ee5\u8fd9\u4e48\u5927\u5417\uff1f\u5c24\u5176\u662f\u6500\u63f4\u8005\u6216\u85e4\u8513\u7684\u6839\uff1f\u6211\u8fd8\u6ca1\u6765\u5f97\u53ca\u95ee\u8c37\u6b4c\uff0c\u6211\u7684\u96f6\u98df\u5c31\u51c6\u5907\u597d\u4e86\u3002\u7528\u76d0\u3001\u8fa3\u6912\u7c89\u548c\u9178\u6a59\u8c03\u5473\uff1b\u6211\u4e08\u592b\u5403\u4e86\u7cd6\u548c\u9178\u6a59\u3002\u5b83\u677e\u8106\uff0c\u591a\u6c41\uff0c\u6e05\u723d\uff0c\u4f46\u6ca1\u6709\u81ea\u5df1\u7684\u5473\u9053\u3002\u90a3\u5929\u665a\u4e0a\uff0c\u6211\u7528\u8c37\u6b4c\u641c\u7d22\u4e86 Bhoochakara Gadda\u3002\u6ca1\u6709\u592a\u591a\u3002\u7ef4\u57fa\u767e\u79d1\u5c06\u8be5\u690d\u7269\u7684\u5b66\u540d\u786e\u5b9a\u4e3a Maerua oblongifolia\uff0c\u4f46\u6ca1\u6709\u5b83\u7684\u7167\u7247\u3002\u6211\u8bfb\u5230 Maerua oblongifolia \u662f\u4e00\u79cd\u4f4e\u77ee\u7684\u3001\u6728\u8d28\u7684\u3001\u4f4e\u77ee\u7684\u704c\u6728\uff0c\u89c1\u4e8e\u5370\u5ea6\u3001\u5df4\u57fa\u65af\u5766\u3001\u975e\u6d32\u90e8\u5206\u5730\u533a\u548c\u6c99\u7279\u963f\u62c9\u4f2f\uff0c\u5b83\u4eec\u7684\u5757\u830e\u4f5c\u4e3a\u96f6\u98df\u51fa\u552e\uff0c\u5e76\u5728 Siddha \u7684\u53e4\u8001\u533b\u5b66\u7cfb\u7edf\u4e2d\u7528\u4f5c\u5174\u594b\u5242\u3002\u7814\u7a76\u8bba\u6587\u663e\u793a\u4e86\u5b83\u7684\u53f6\u5b50\u548c\u82b1\u6735\uff0c\u4f46\u6ca1\u6709\u663e\u793a\u6839\u3002\u6240\u4ee5\u6211\u51b3\u5b9a\u6df1\u5165\u7814\u7a76\u3002\u6211\u8054\u7cfb\u4e86\u6211\u6240\u5728\u5dde\u7684\u4e00\u4f4d\u6728\u6750\u79d1\u5b66\u5bb6\u3001\u4e00\u4f4d\u98df\u54c1\u79d1\u5b66\u6559\u6388\u548c\u4e00\u4f4d\u6089\u8fbe (Siddha) \u5b9e\u8df5\u8005\u3002\u4ed6\u4eec\u6ca1\u6709\u770b\u5230\u90a3\u68f5\u6811\u3002\u6211\u5c06\u641c\u7d22\u8f6c\u5411\u5357\u90e8\u7684\u53e6\u4e00\u4e2a\u5dde\uff0c\u5b89\u5f97\u62c9\u90a6\u3002\u6211\u6253\u7535\u8bdd\u7ed9\u5b83\u7684\u90e8\u843d\u90e8\u95e8\uff0c\u4f46\u6ca1\u6709\u5f97\u5230\u4efb\u4f55\u7ebf\u7d22\u3002\u7136\u540e\u6211\u7ed9\u751f\u7269\u591a\u6837\u6027\u59d4\u5458\u4f1a\u4e3b\u5e2d\u7684\u4fe1\u606f\u906d\u5230\u4e86\u6c89\u9ed8\u3002\u6211\u4e0e\u4e00\u4f4d\u7814\u7a76\u8fc7\u8fd9\u68f5\u6811\u7684\u690d\u7269\u5b66\u7814\u7a76\u5458\u4ea4\u8c08\u8fc7\uff0c\u624d\u5f97\u77e5\u4ed6\u4ece\u672a\u4eb2\u773c\u89c1\u8fc7\u5b83\u3002\u5f88\u5feb\uff0c\u6211\u5c31\u4f1a\u77e5\u9053\uff0c\u6211\u65e0\u6240\u4e8b\u4e8b\u7684\u597d\u5947\u5fc3\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u8c1c\uff0c\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u56f0\u6270\u7740\uff0c\u6709\u65f6\u751a\u81f3\u6fc0\u6012\u4e86\u690d\u7269\u5b66\u5bb6\u3002\u51e0\u5341\u5e74\u6765\uff0c\u8fd9\u79cd\u5c0f\u5403\u4e00\u76f4\u5728\u8857\u5934\u5e7f\u6cdb\u51fa\u552e\u2014\u2014\u4ece\u5317\u90e8\u7684\u54c8\u91cc\u74e6\u5e02\u5230\u897f\u90e8\u7684\u6d66\u90a3\u548c\u5357\u90e8\u7684\u51e0\u4e2a\u5730\u65b9\u2014\u2014\u7136\u800c\uff0c\u4e0d\u77e5\u4f55\u6545\uff0c\u4f3c\u4e4e\u6ca1\u6709\u4eba\u77e5\u9053\u5b83\u662f\u4ec0\u4e48\u3002\u51e0\u4e2a\u6708\u540e\uff0c\u5f53\u6211\u770b\u5230 MS Rathore \u535a\u58eb\u7684\u8bba\u6587\u65f6\uff0c\u6211\u53d6\u5f97\u4e86\u7a81\u7834\uff0c\u4ed6\u4e8e 2011 \u5e74\u5728\u5b9e\u9a8c\u5ba4\u4e2d\u7e41\u6b96\u4e86 Maerua oblongifolia\u3002\u4ed6\u5728\u62c9\u8d3e\u65af\u5766\u90a6\u7684\u6c99\u6f20\u5dde\u591a\u6b21\u770b\u5230\u8fd9\u68f5\u6811\u3002 \u201c\u4f46\u6211\u6ca1\u6709\u542c\u8bf4\u6216\u770b\u5230\u6709\u4eba\u5403\u6839\uff0c\u201d\u79d1\u5b66\u5bb6\u5728\u7535\u8bdd\u4e2d\u8bf4\uff0c\u542c\u8d77\u6765\u5f88\u56f0\u60d1\u3002\n\u201c\u5b83\u7684\u6839\u7a00\u5c11\u4e14\u4e0d\u53ef\u98df\u7528\uff0c\u201d\u4ed6\u7684\u8bba\u6587\u5bfc\u5e08\u3001\u9000\u4f11\u7684\u690d\u7269\u5b66\u6559\u6388 NS Shekhawat \u535a\u58eb\u8865\u5145\u9053\u3002 \u201c\u751f\u957f\u5728\u5e72\u65f1\u5730\u533a\uff0c\u54ea\u6765\u90a3\u4e48\u591a\u6c34\u957f\u51fa\u5927\u6839\u80a5\u591a\u6c41\uff1f [\u5c0f\u5403] \u4e0d\u53ef\u80fd\u662f\u957f\u53f6\u6708\u6842\u3002\u201d\u4e24\u4eba\u7ed9\u6211\u53d1\u4e86\u8fd9\u68f5\u6811\u7684\u7167\u7247\uff0c\u8fd9\u4e0e\u7ef4\u57fa\u767e\u79d1\u4e0a\u7684\u63cf\u8ff0\u4e0d\u7b26\u3002\u7167\u7247\u4e2d\u7684\u6839\u6e90\u662f\u5728\u5b9e\u9a8c\u5ba4\u91cc\u751f\u957f\u7684\uff0c\u592a\u5c0f\u4e86\uff0c\u65e0\u6cd5\u5f97\u51fa\u4efb\u4f55\u7ed3\u8bba\u3002\u6211\u5728\u5370\u5ea6\u690d\u7269\u5b66\u4f1a\u524d\u4e3b\u5e2d T Pullaiah \u535a\u58eb\u65c1\u8fb9\u8bb2\u8bdd\u3002\u5728\u4ed6 2019 \u5e74\u7684\u300a\u4e16\u754c\u836f\u7528\u690d\u7269\u767e\u79d1\u5168\u4e66\u300b\u4e2d\uff0c\u4ed6\u5c06\u8fd9\u79cd\u5c0f\u5403\u4e0e Ipomoea d igitata \u8054\u7cfb\u8d77\u6765\uff0c\u8fd9\u662f\u4e00\u79cd\u6500\u7f18\u690d\u7269\uff0c\u957f\u51fa\u5e26\u6709\u9ec4\u68d5\u8272\u76ae\u6bdb\u7684\u5927\u5757\u6839\u3002\u4ed6\u4e00\u5b9a\u662f\u770b\u5230\u4e86\u6839\uff0c\u6211\u60f3\u3002 \u201c\u4e0d\u3002\u8fd9\u662f\u4e8c\u624b\u77e5\u8bc6\u3002\u6211\u4eec\u662f\u6559\u6388\uff0c\u5fd9\u4e8e\u6559\u5b66\u548c\u884c\u653f\u5de5\u4f5c\uff0c\u56e0\u6b64\u6211\u4eec\u4f9d\u9760\u73b0\u6709\u6587\u732e\u5f97\u51fa\u7ed3\u8bba\uff0c\u201d\u4ed6\u89e3\u91ca\u8bf4\u3002\u6240\u4ee5\u6211\u6253\u4e86\u66f4\u591a\u7684\u7535\u8bdd\uff0c\u5199\u4e86\u66f4\u591a\u7684\u7535\u5b50\u90ae\u4ef6\u3002\u4e00\u4e2a\u65b0\u540d\u5b57\u51fa\u73b0\u4e86\uff0c\u6211\u6240\u6709\u7684\u7814\u7a76\u90fd\u4f5c\u5e9f\u4e86\u3002\u90a3\u4e00\u5e74\u662f 1994 \u5e74\u3002\u6c11\u65cf\u690d\u7269\u5b66\u5bb6 Koppula Hemadri \u535a\u58eb\u6b63\u5728\u5370\u5ea6\u5404\u5730\u201c\u6316\u6839\u201d\u4ee5\u786e\u8ba4\u8fd9\u79cd\u5c0f\u5403\u7684\u8d77\u6e90\u3002\u4ed6\u7528\u9f99\u820c\u5170\u7ed3\u675f\u4e86\u4ed6\u7684\u641c\u7d22\u3002\u8fd9\u4e9b\u591a\u8089\u690d\u7269\u770b\u8d77\u6765\u50cf\u82a6\u835f\uff0c\u4f46\u53ef\u4ee5\u957f\u5230 10 \u82f1\u5c3a\u5bbd\u548c\u4e24\u500d\u9ad8\u3002\u6709\u4e9b\u6709\u4e00\u4e2a\u7c97\u58ee\u7684\u830e\uff0c\u4e0a\u9762\u6709\u5e26\u523a\u7684\u53f6\u5b50\uff0c\u6bd4\u5982\u83e0\u841d\u3002\u6709\u4e9b\u770b\u8d77\u6765\u6ca1\u6709\u830e\u3002 \u201c\u6211\u5c1d\u5230\u4e86\u9f99\u820c\u5170\u7684\u6839\u90e8\uff0c\u5b83\u4e0e\u6839\u90e8\u76f8\u8fde\uff0c\u201d\u73b0\u5df2\u9000\u4f11\u5e76\u4f4f\u5728\u5b89\u5f97\u62c9\u90a6\u7684\u8d6b\u9a6c\u5fb7\u91cc\u535a\u58eb\u8bf4\u3002 \u201c\u5b83\u662f\u6dc0\u7c89\u8d28\u7684\uff0c\u6709\u70b9\u50cf\u90a3\u79cd\u5c0f\u5403\u3002\u4f46\u5728\u90a3\u4e4b\u540e\u6211\u6ca1\u6709\u8ffd\u6c42[\u9886\u5148]\u3002\u201d\u540c\u5e74\uff0c\u5728\u540c\u4e00\u4e2a\u5dde\uff0c\u690d\u7269\u5b66\u5bb6 Ali Moulali \u535a\u58eb\u8d70\u5f97\u66f4\u8fd1\uff1a\u201c\u6211\u544a\u8bc9\u4e00\u4f4d\u4f9b\u5e94\u5546\uff0c\u5982\u679c\u4ed6\u900f\u9732\u690d\u7269\u7684\u8eab\u4efd\uff0c\u6211\u4f1a\u591a\u4ed8\u4ed6 1,000-2,000 \u5362\u6bd4\uff0813-27 \u7f8e\u5143\uff09\u3002 \u201d \u4ed6\u72b9\u8c6b\u4e86\u4e00\u4e0b\uff0c\u8bf4\u9053\uff1a\u201c\u8fd9\u662f\u5317\u5948\u826f\u7684\u57fa\u5730\u3002\u201d \u201c\u8fd9\u5c31\u662f\u5f53\u5730\u5bf9\u9f99\u820c\u5170\u5236\u6210\u7684\u7ea4\u7ef4\u7684\u79f0\u547c\u3002\u4f9b\u5e94\u5546\u8fd8\u900f\u9732\uff0c\u5b83\u4e0d\u662f\u6839\uff0c\u800c\u662f\u751f\u957f\u5728\u5730\u4e0a\u7684\u4e1c\u897f\u3002\n\u5728\u540c\u4e00\u65f6\u671f\uff0c\u5f00\u82b1\u690d\u7269\u5206\u7c7b\u5b66\u5bb6 SR Yadav \u535a\u58eb\u9f13\u52b1\u4ed6\u5728\u897f\u90e8\u9a6c\u54c8\u62c9\u65bd\u7279\u62c9\u90a6\u7684\u5b66\u751f\u4ed4\u7ec6\u7814\u7a76 Ram Kand\uff0c\u8fd9\u662f\u5f53\u5730\u5c0f\u5403\u7684\u540d\u79f0\u3002\u4ed6\u7684\u4e24\u4e2a\u5b66\u751f\u2014\u2014\u535a\u58eb\u3002\u6b63\u5728\u7814\u7a76\u5206\u5b50\u751f\u7269\u5b66\u548c\u5206\u7c7b\u5b66\u7684 Mansingraj S Nimbalkar \u548c Vinod B Shimpale \u535a\u58eb\u7ee7\u7eed\u4e3a\u8fd9\u4e2a\u8c1c\u56e2\u63d0\u4f9b\u4e86\u6700\u79d1\u5b66\u7684\u89c1\u89e3\u3002 2010 \u5e74\uff0c\u7ecf\u8fc7\u957f\u65f6\u95f4\u7684\u89e3\u5256\u5b66\u7814\u7a76\uff0c\u4ed6\u4eec\u5bf9\u4e00\u7247\u5c0f\u5403\u8fdb\u884c\u4e86 DNA \u6761\u5f62\u7801\u7f16\u7801\uff0c\u53d1\u73b0\u5b83\u4e0e\u9f99\u820c\u5170\u7684\u5339\u914d\u5ea6\u8fbe 89%\u3002\u9f99\u820c\u5170\u6709\u591a\u79cd\u79cd\u7c7b\uff0c\u4f46\u5b9e\u9a8c\u5ba4\u6d4b\u8bd5\u5c06\u5176\u8303\u56f4\u7f29\u5c0f\u5230\u9f99\u820c\u5170 Sisalana\uff0c\u4e00\u79cd\u6709\u65f6\u7528\u6765\u5236\u4f5c\u7c7b\u4f3c\u9f99\u820c\u5170\u9152\u7684\u690d\u7269\u3002\u4e0d\u4e45\u4e4b\u540e\uff0c\u4ed6\u4eec\u8fdb\u884c\u4e86\u5b9e\u5730\u8003\u5bdf\uff0c\u62d4\u51fa\u4e86\u5251\u9ebb\uff0c\u5374\u53d1\u73b0\u4e86\u7f51\u72b6\u7684\u6d45\u6839\u3002\u63a5\u4e0b\u6765\uff0c\u4ed6\u4eec\u5207\u6389\u4e86\u5b83\u7684\u53f6\u5b50\uff0c\u5b83\u5c31\u5728\u90a3\u91cc\uff1a\u6570\u767e\u4e07\u5370\u5ea6\u4eba\u4ece\u98df\u54c1\u8f66\u4e0a\u719f\u6089\u7684\u80a5\u539a\u3001\u767d\u8272\u3001\u6c34\u6c6a\u6c6a\u7684\u6811\u5e72\u3002\u4ed6\u4eec\u5403\u4e86\u4e00\u7247\uff0c\u5c31\u50cf\u62c9\u59c6\u5eb7\u5fb7\u4e00\u6837\u65e0\u5473\u548c\u677e\u8106\u3002\u7814\u7a76\u7ed3\u679c\u4e8e\u6b21\u5e74\u53d1\u8868\u5728\u300a\u5f53\u4ee3\u79d1\u5b66\u300b\u4e0a\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u5bf9\u8fd9\u79cd\u5c0f\u5403\u7684\u8eab\u4efd\u8fd8\u5b58\u5728\u7591\u95ee\u5462\uff1f \u201c\u5b83\u662f\u54ea\u79cd\u9f99\u820c\u5170\u2014\u2014\u897f\u8428\u62c9\u7eb3\u9f99\u820c\u5170\u3001\u7f8e\u6d32\u9f99\u820c\u5170\u8fd8\u662f\u5176\u4ed6\u9f99\u820c\u5170\uff1f\u201d Shimpale \u535a\u58eb\u8bf4\u3002 \u201c\u5728\u4f9b\u5e94\u5546\u5411\u6211\u4eec\u5c55\u793a\u5de5\u5382\u4e4b\u524d\uff0c\u6211\u4eec\u65e0\u6cd5\u5f97\u51fa\u7ed3\u8bba\u3002\u4ed6\u4eec\u5c06\u6b64\u4f5c\u4e3a\u5546\u4e1a\u79d8\u5bc6\uff0c\u4ee5\u6fc0\u53d1\u4eba\u4eec\u5bf9\u5b83\u7684\u597d\u5947\u5fc3\u3002\u201d\u662f\u7684\uff0c\u4f9b\u5e94\u5546\u6240\u8bf4\u7684\u6709\u4e00\u4e2a\u6a21\u5f0f\uff1a\u5b83\u662f\u6839\uff1b\u5b83\u662f\u836f\u7528\u7684\uff1b\u4ed6\u4eec\u4ece 200 \u516c\u91cc\u5916\u7684\u68ee\u6797\u6216\u975e\u6d32\u5f97\u5230\u5b83\u3002\u4ed6\u4eec\u8bf4\u5370\u5ea6\u6559\u795e\u62c9\u59c6\u548c\u4ed6\u7684\u59bb\u5b50\u548c\u5144\u5f1f\u5728\u4ed6\u4eec\u88ab\u6d41\u653e\u5230\u68ee\u6797\u671f\u95f4\u4ee5\u62c9\u59c6\u5eb7\u5fb7\u4e3a\u751f\uff0c\u800c Bhoochakara Gadda \u662f\u4e00\u79cd\u751f\u957f\u5728\u5730\u4e0b\u7684\u751c\u871c\u751f\u7269\u3002\u5c1d\u8bd5\u6279\u91cf\u8d2d\u4e70\u4ed6\u4eec\u7684\u80a1\u7968\uff0c\u4ed6\u4eec\u53ea\u4f1a\u7559\u4e0b\u51e0\u7247\u3002\u8bd5\u63a2\u4ed6\u4eec\uff0c\u4ed6\u4eec\u5c31\u4f1a\u63a8\u8f66\u79bb\u5f00\u3002 \u201c\u9a6c\u54c8\u62c9\u65bd\u7279\u62c9\u90a6\u7684\u68ee\u6797\u5b98\u5458\u66fe\u8bd5\u56fe\u76d1\u89c6\u4ed6\u4eec\uff0c\u4f46\u5f92\u52b3\u65e0\u529f\uff0c\u201d\u5b81\u5df4\u5c14\u5361\u535a\u58eb\u56de\u5fc6\u9053\u3002\u51fa\u4e8e\u4e00\u79cd\u9884\u611f\uff0c\u6211\u7ed9\u5361\u7eb3\u5854\u514b\u90a6 GS Yadav \u7684\u4e00\u4f4d\u9ad8\u7ea7\u68ee\u6797\u5b98\u5458\u6253\u7535\u8bdd\u3002 \u201c\u4f60\u9700\u8981\u83b7\u5f97\u8bb8\u53ef\u624d\u80fd\u4ece\u4efb\u4f55\u68ee\u6797\u4e2d\u79fb\u9664\u6216\u63d0\u53d6\u4efb\u4f55\u4e1c\u897f\uff0c\u201d\u4ed6\u660e\u786e\u5730\u8bf4\u3002\u4f46\u662f\u9f99\u820c\u5170\u5e76\u4e0d\u5b8c\u5168\u9002\u5408\u68ee\u6797\u652f\u67b6\u3002\u5b83\u5728\u5370\u5ea6\u5e7f\u6cdb\u751f\u957f\uff0c\u5728\u8def\u8fb9\uff0c\u94c1\u8def\u6cbf\u7ebf\uff0c\u4f5c\u4e3a\u56f4\u680f\u3002\u7136\u800c\uff0c\u5b83\u53ef\u80fd\u4e0d\u90a3\u4e48\u5065\u5eb7\u3002 \u201c\u9f99\u820c\u5170\u542b\u6709\u5927\u91cf\u751f\u7269\u78b1\u3002\u5982\u679c\u5927\u91cf\u98df\u7528\uff0c\u5b83\u53ef\u80fd\u4f1a\u4e2d\u6bd2\u3002\u4e5f\u8bb8\u8fd9\u5c31\u662f\u4ed6\u4eec\u51fa\u552e\u8584\u7247\u7684\u539f\u56e0\uff0c\u201d\u73b0\u5df2\u9000\u4f11\u7684 Yadav \u535a\u58eb\u8b66\u544a\u8bf4\u3002\u6211\u8d8a\u6765\u8d8a\u786e\u4fe1\u9f99\u820c\u5170\u662f\u7b54\u6848\uff0c\u76f4\u5230\u73ed\u52a0\u7f57\u5c14\u7684\u8425\u517b\u4e0e\u6280\u672f\u52a9\u7406\u6559\u6388 Chenna Kesava Reddy Sangati \u535a\u58eb\u5c06\u5176\u79f0\u4e3a\u201c\u4e0d\u53ef\u80fd\u201d\u3002\u4ed6\u5bf9\u9f99\u820c\u5170\u8fdb\u884c\u4e86\u5e7f\u6cdb\u7684\u7814\u7a76\uff0c\u4ee5\u4ece\u5176 Albomarginata \u54c1\u79cd\u4e2d\u751f\u4ea7\u9152\u7cbe\u996e\u6599\u3002 \u201c\u6211\u5403\u8fc7 Bhoochakara Gadda\u3002\u5b83\u7684\u53e3\u611f\u66f4\u987a\u6ed1\uff0c\u54ac\u8d77\u6765\u66f4\u67d4\u8f6f\uff0c\u800c\u4e14\u4e0d\u662f\u5f88\u751c\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u800c\u8fd9\u79cd\u9f99\u820c\u5170\u975e\u5e38\u751c\u3001\u6da9\u3001\u7ea4\u7ef4\u8d28\uff0c\u800c\u4e14\u5f88\u96be\u54ac\u3002\u201d\u56db\u6708\uff0c\u5370\u5ea6\u7684\u7b2c\u4e8c\u6ce2\u51a0\u72b6\u75c5\u6bd2\u7206\u53d1\u4e86\u3002\u8857\u4e0a\u7684\u4eba\u7fa4\u53d8\u5c11\u4e86\uff0c\u624b\u63a8\u8f66\u66f4\u5c11\u4e86\uff0c\u6211\u7b2c\u4e00\u6b21\u89c1\u5230\u7684\u5c0f\u8d29\u4e5f\u4e0d\u89c1\u4e86\u3002 \u201c\u4ed6\u53bb\u4e86\u4ed6\u7684\u6751\u5b50\uff0c\u201d\u5728\u540c\u4e00\u6761\u8857\u4e0a\u5356\u897f\u74dc\u7684\u4e00\u4e2a\u4eba\u544a\u8bc9\u6211\u3002\u4f46\u4ed6\u4f20\u9012\u4e86\u4f9b\u5e94\u5546\u7684\u8054\u7cfb\u7535\u8bdd\u3002\n\u7531\u4e8e\u62c5\u5fc3\u518d\u6b21\u5c01\u9501\uff0c\u8be5\u4f9b\u5e94\u5546\u5df2\u8fd4\u56de\u5317\u90e8\u8d3e\u574e\u5fb7\u90a6\u3002\u5927\u6d41\u884c\u6b63\u5728\u627c\u6740\u4ed6\u7684\u751f\u610f\uff0c\u4ed6\u60f3\u4ece\u6211\u8fd9\u91cc\u77e5\u9053\u4e8b\u60c5\u4ec0\u4e48\u65f6\u5019\u4f1a\u6062\u590d\u6b63\u5e38\u3002\u6211\u80fd\u8bf4\u4ec0\u4e48\uff1f\u6211\u4eec\u8f6c\u79fb\u4e86\u8bdd\u9898\uff0c\u4ed6\u8f7b\u677e\u5730\u8bf4\uff1a\u201c\u8fd9\u662f\u4e00\u4e2a\u830e\u2026\u2026\u6211\u5168\u5e74\u90fd\u5728\u5356\u2026\u2026\u6211\u53ea\u5728\u7167\u7247\u548c\u7535\u8bdd\u4e2d\u770b\u5230\u8fc7\u8fd9\u79cd\u690d\u7269\u3002\u201d\u54e6\uff01 \u201c\u4f60\u80fd\u544a\u8bc9\u6211\u4f60\u4ece\u54ea\u91cc\u627e\u5230 Bhoochakara Gadda \u7684\u4eba\u7684\u7535\u8bdd\u53f7\u7801\u5417\uff1f\u201d\u6211\u95ee\u3002\u4ed6\u6c89\u9ed8\u4e86\u3002 \u201c\u8bf7\u4e0d\u8981\u95ee\u8fd9\u4e2a\u3002\u6ca1\u6709\u4eba\u4f1a\u544a\u8bc9\u4f60\u4efb\u4f55\u4e8b\u60c5\u3002\u8fd9\u5c31\u662f\u8fd9\u9879\u4e1a\u52a1\u7684\u65b9\u5f0f\uff0c\u201d\u4ed6\u544a\u8bc9\u6211\uff0c\u4e00\u5206\u949f\u90fd\u88ab\u6fc0\u6012\u4e86\u3002\u7136\u540e\u4ed6\u51b7\u9759\u4e86\u4e0b\u6765\u3002 \u201c\u6211\u591a\u5e74\u6765\u4e00\u76f4\u5728\u5403\u8fd9\u4e2a\u3002\u5b83\u51b7\u5374\u8eab\u4f53\u3002\u987e\u5ba2\u8bf4\u8fd9\u5bf9\u7cd6\u5c3f\u75c5\u6709\u597d\u5904\u3002\u8fd9\u4e0d\u8fdd\u6cd5\uff0c\u6211\u77e5\u9053\u3002\u201d\u5728\u8d28\u7591\u6211\u7ed9\u4ed6\u6253\u7535\u8bdd\u7684\u52a8\u673a\u540e\uff0c\u4ed6\u540c\u610f\u770b\u4e13\u5bb6\u4eec\u4e89\u8bba\u7684\u690d\u7269\u7167\u7247\u3002 \u201c\u6ca1\u6709\uff0c\u201d\u4ed6\u56de\u7b54\u3002\u6211\u5f88\u4f24\u5fc3\uff0c\u4f46\u6253\u7535\u8bdd\u56de\u6765\u611f\u8c22\u4ed6\u3002\u4f46\u968f\u540e\u4ed6\u8bf4\uff0c\u201c\u7167\u7247 3\u3002\u90a3\u662f\u690d\u7269\u3002\u201d\u8fd9\u662f\u9f99\u820c\u5170Sisalana\u3002\u4ed6\u4e5f\u540c\u610f\u4e86\u7b2c\u4e8c\u5f20\u7167\u7247\uff0c\u90a3\u5c31\u662f\u7f8e\u56fd\u9f99\u820c\u5170\u3002 1\u53f7\u7167\u7247\u4e0a\u6ca1\u6709\u5b57\uff0cMaerua oblongifolia\u3002 \u201c\u4ed6\u4eec\u526a\u4e0b\u6811\u53f6\uff0c\u5728\u6811\u5e72\u4e0a\u6d82\u4e0a\u7ea2\u8272\uff0c\u4ee5\u4fdd\u6301\u5176\u767d\u8272\uff0c\u201d\u4ed6\u89e3\u91ca\u9053\u3002\u6bd5\u7adf\uff0c\u8fd9\u662f\u4e00\u79cd\u9f99\u820c\u5170\u5c0f\u5403\u5417\uff1f\u6211\u5c06\u7b49\u5f85\u6700\u540e\u7684\u51b3\u5b9a\uff0c\u56e0\u4e3a\u6765\u81ea\u62c9\u8d3e\u65af\u5766\u90a6\u7684\u53e6\u4e00\u4f4d\u690d\u7269\u5b66\u5bb6 MS Shekhawat \u535a\u58eb\u5411\u6211\u4fdd\u8bc1\uff0c\u5728\u5927\u6d41\u884c\u7ed3\u675f\u540e\uff0c\u4ed6\u5c06\u8fdb\u5165\u7530\u95f4\uff0c\u8fde\u6839\u62d4\u8d77\u3001\u5207\u7247\u548c\u54c1\u5c1d\u6bcf\u4e2a\u53ef\u80fd\u5019\u9009\u8005\u7684\u6837\u672c\uff0c\u5e76\u4e14\u4e00\u52b3\u6c38\u9038\u5730\u89e3\u5f00\u8c1c\u56e2\u3002 Gastro Obscura \u6db5\u76d6\u4e86\u4e16\u754c\u4e0a\u6700\u7f8e\u5999\u7684\u98df\u7269\u548c\u996e\u6599\u3002\u6ce8\u518c\u6211\u4eec\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u6bcf\u5468\u53d1\u9001\u4e24\u6b21\u3002", "note_en": "A vendor was cutting slices off what looked like the trunk of a tree on his push-cart. This was in Bengaluru, the city in the south Indian state of Karnataka where I live. The core was a creamy white and the skin a brownish-orange. He cut horizontally, in circles, with the precision of a surgeon, so thin that I could see through the pieces.\n \u201cIt\u2019s a root. It can grow five feet deep and 300kg,\u201d he explained, in response to my shock. He sources it, he said, from the neighbouring state of Kerala, from people who \u201cget it from the forests.\u201d He hasn\u2019t seen anybody extract the root, but has seen the tree it comes from. \u201cIt\u2019s like a climber. It gives flowers. It grows near the sea. It\u2019s called  Bhoochakara Gadda in south India and  Ram Kand Mool up north.\u201d\n Can a root be this massive? Especially the root of a climber or vine? Before I could ask Google, my snack was ready. It was seasoned with salt, chili powder, and lime; my husband\u2019s had sugar and lime. It was crunchy, juicy, and refreshing, but had no taste of its own.\n That night, I googled  Bhoochakara Gadda. There wasn\u2019t much. Wikipedia identified the scientific name of the plant as  Maerua oblongifolia, but had no photos of it.  Maerua oblongifolia is a low, woody, undershrub found in India, Pakistan, parts of Africa, and Saudi Arabia, whose tubers are sold as snacks and used as a stimulant in the ancient medicine system of Siddha, I read. Research papers showed its leaves and flowers but not the root. So I decided to dig in.\n  I contacted a wood scientist, a professor of food science, and a Siddha practitioner, each from my state. They hadn\u2019t seen the tree. I pivoted my search to another state in the south, Andhra Pradesh. I called up its tribal department, but got no leads. Then my messages to the head of the biodiversity board were met with silence. I spoke to a botany researcher who had studied the tree, only to learn he had never seen it in person.\n Soon enough, I\u2019d learn that my idle curiosity was, in fact, a mystery that has baffled and, at times, infuriated botanists for decades. This snack has been widely sold on the streets for decades\u2014from the city of Haridwar in the north to Pune in the west and in several places in the south\u2014and yet, somehow, no one seems to know what it is.\n  I had a breakthrough a few months later when I came across a thesis paper by Dr. MS Rathore, who had propagated  Maerua oblongifolia in the lab in 2011. He had seen the tree many times in the desert state of Rajasthan. \u201cBut I haven\u2019t heard or seen anybody eating the root,\u201d the scientist said over a call, sounding puzzled.\n \u201cIts roots are sparse and inedible,\u201d added Dr. NS Shekhawat, his thesis adviser and a retired professor of botany. \u201cGrowing in dry regions, where will it have so much water to develop big roots and be fat and juicy? [The snack] can\u2019t be  Maerua oblongifolia.\u201d\n The duo sent me photos of the tree, which did not match the description on Wikipedia. And the roots in the photos were grown in a lab and too tiny to conclude anything.\n I spoke next to Dr. T Pullaiah, former president of The Indian Botanical Society. In his 2019  Encyclopaedia of World Medicinal Plants, he links this snack to   Ipomoea  d  igitata , a climber that grows a large tuberous root with a yellowish-brown coat. He must have seen the root, I thought. \u201cNo. It was second-hand knowledge. We are professors, busy between teaching and administrative work, so we rely on existing literature to come to conclusions,\u201d he explained.\n So I made more calls, wrote more emails. And a new name came up that nullified all my research.\n  The year was 1994. Ethnobotanist Dr. Koppula Hemadri was going around India \u201cdigging out roots\u201d to confirm the origins of this snack. He ended his search with agave. These are succulents that look like aloe vera but can grow up to 10 feet wide and twice as tall. Some have a stout stem topped with spiny leaves, like pineapples. Some appear stemless.\n \u201cI tasted the base of agave , that\u2019s attached to roots,\u201d remarked Dr. Hemadri, who\u2019s now retired and lives in Andhra Pradesh. \u201cIt was starchy and a bit like that snack. But I did not pursue [the lead] after that.\u201d\n  In the same year, in the same state, botanist Dr. Ali Moulali got closer: \u201cI told a vendor I would pay him Rs1,000-2,000 ($13-27) more if he revealed the identity of the plant. He hesitated and said, \u2018It\u2019s the base of  Kitta Nara.\u2019 \u201c That\u2019s what the fibre made from agave is locally called. The vendor also revealed that it wasn\u2019t a root, but something that grew just above the ground.\n In the same period, flowering-plant taxonomist Dr. SR Yadav was encouraging his students in the western state of Maharashtra to scrutinise  Ram Kand, which is the snack\u2019s local name there. Two of his students\u2014Dr. Mansingraj S Nimbalkar and Dr. Vinod B Shimpale, who were studying molecular biology and taxonomy\u2014went on to provide the most scientific insight into this mystery.\n In 2010, after a long anatomical study, they performed DNA barcoding on a slice of the snack and found it to match that of agave\u2019s by 89 percent. There are several species of agave, but the lab test narrowed it down to  Agave Sisalana, a plant sometimes used to make a tequila-like drink . They did a field visit soon after and plucked out a  Sisalana only to find mesh-like, shallow roots. Next, they chopped off its leaves and there it was: the fat, white, watery trunk familiar to millions of Indians from food carts. They ate a slice from it, and it was tasteless and crunchy just like  Ram Kand. The findings were  published in Current Science the following year.\n  So why is there still doubt about the identity of this snack? \u201cWhich species of agave is it\u2014 Sisalana or  Americana or any other?\u201d Dr. Shimpale says. \u201cWe can\u2019t conclude until the vendors show the plant to us. They keep this as a business secret to create curiosity around it.\u201d\n Yes, there is a pattern to what the vendors say: It\u2019s a root; it\u2019s medicinal; they get it from a forest 200 kilometers away or in Africa. They say the Hindu god Ram, and his wife and brother, subsisted on  Ram Kand during their exile in the forests, and that  Bhoochakara Gadda is a sweet-something growing underground. Try to buy their stock in bulk and they\u2019ll spare no more than a few slices. Probe them and they\u2019ll cart away. \u201cForest officials in Maharashtra have tried to spy on them, but it was futile,\u201d Dr. Nimbalkar recalls.\n Going on a hunch, I rang up a senior forest official in Karnataka, GS Yadav. \u201cYou need permission to remove or extract anything from any forest,\u201d he says clearly. But agave doesn\u2019t fully fit into the forest bracket. It grows widely in India, on roadsides, along railway tracks, as fencing. However, it may not be so healthy. \u201cAgave has lots of alkaloids. It can be poisonous if eaten in large quantities. Maybe that\u2019s why they sell thin slices,\u201d Dr. Yadav, now retired, warns.\n I felt increasingly certain that agave was the answer until Dr. Chenna Kesava Reddy Sangati, an assistant professor of nutrition &amp; technology in Bengaluru, dubbed it \u201cimpossible.\u201d He has researched agave extensively in order to produce an alcoholic beverage from its  Albomarginata variety. \u201cI have eaten  Bhoochakara Gadda. It has a smoother mouthfeel, is softer to bite, and is not very sweet,\u201d he says. \u201cWhereas this agave is highly sweet, astringent, fibrous, and hard to bite.\u201d\n   In April, the second wave of coronavirus in India had set in. Crowds on the street had thinned, push-carts were fewer, and the vendor I had first met was gone. \u201cHe has gone to his village,\u201d a man who sells watermelons on the same street told me. But he passed on the vendor\u2019s contact number.\n Fearing another lockdown, the vendor had returned to the northern state of Jharkhand. The pandemic was killing his business and he wanted to know from me when things will be normal. What could I say?\n We shifted the topic and he came clean easily: \u201cIt\u2019s a stem \u2026 I sell it year-round \u2026 I have seen the plant only in photos, on the phone.\u201d Oh! \u201cWill you give me the phone number of the person you source  Bhoochakara Gadda from?\u201d I asked. He went silent.\n \u201cAsk anything but this, please. Nobody will tell you anything. This is how this business is,\u201d he told me, getting irritated by the minute. Then he calmed down. \u201cI\u2019ve been eating this for years. It cools the body. Customers say it\u2019s good for diabetes. It\u2019s not illegal, I know.\u201d\n  After questioning my motives for calling him, he agreed to look at photos of the plants that experts were debating. \u201cNone,\u201d he replied. I was gutted but called back to thank him. But then he said, \u201cPhoto number 3. That\u2019s the plant.\u201d It was  Agave Sisalana. He okayed Photo number 2 as well, which was  Agave Americana. There was no word on Photo No. 1,  Maerua oblongifolia.\n \u201cThey cut the leaves and rub red color on the trunk to preserve its white color,\u201d he explained.\n So is this an agave snack, after all? I will wait for the final word, as Dr. MS Shekhawat, another botanist from Rajasthan, has assured me that after the pandemic is over, he will go into the field, uproot, slice, and taste a sample of each likely candidate, and resolve the mystery once and for all.\n Gastro Obscura covers the world\u2019s most wondrous food and drink.  Sign up for our email, delivered twice a week.", "posttime": "2021-08-08 10:53:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56f0\u6270,street,\u535a\u58eb", "title": "\u56f0\u6270\u690d\u7269\u5b66\u5bb6\u6570\u5341\u5e74\u7684\u795e\u79d8\u8857\u5934\u5c0f\u5403", "title_en": "The Mysterious Street Snack That Has Baffled Botanists for Decades", "transed": 1, "url": "https://www.atlasobscura.com/articles/indian-street-snack-root", "via": "", "real_tags": ["\u56f0\u6270", "street", "\u535a\u58eb"]}, {"category": "", "categoryclass": "", "imagename": "00011562e2bc5e42079a253a9a5a85f0.jpg", "infoid": 1072052, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bd4\u7279\u5e01\u662f\u5f53\u4eca\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u52a0\u5bc6\u8d27\u5e01\u3002\u8fd9\u4e9b\u6d89\u53ca\u5927\u91cf\u8ba1\u7b97\u80fd\u529b\u7684\u6570\u5b57\u8d27\u5e01\u4e0d\u662f\u7531\u4e2d\u592e\u94f6\u884c\u53d1\u884c\uff0c\u800c\u662f\u7531\u8ba1\u7b97\u673a\u201c\u5f00\u91c7\u201d\uff0c\u8fd9\u4e9b\u8ba1\u7b97\u673a\u6267\u884c\u9a8c\u8bc1\u4ea4\u6613\u7684\u80fd\u6e90\u5bc6\u96c6\u578b\u5de5\u4f5c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u6570\u5b57\u5206\u7c7b\u8d26\u4e2d\uff0c\u79f0\u4e3a\u533a\u5757\u94fe.\u6b63\u5982\u5f00\u91c7\u7164\u70ad\u6216\u9ec4\u91d1\u53d6\u51b3\u4e8e\u8c01\u5148\u83b7\u5f97\u5546\u54c1\u4e00\u6837\uff0c\u6570\u5b57\u91c7\u77ff\u4e5f\u662f\u5982\u6b64\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u673a\u76f8\u4e92\u7ade\u4e89\uff0c\u6210\u4e3a\u7b2c\u4e00\u4e2a\u9a8c\u8bc1\u4ea4\u6613\u5757\u5e76\u8d62\u5f97\u5956\u52b1\u7684\u4eba\u3002\u968f\u7740\u6bcf\u53f0\u65b0\u8ba1\u7b97\u673a\u4e89\u593a\u5956\u54c1\uff0c\u7b97\u6cd5\u90fd\u4f1a\u8fdb\u884c\u8c03\u6574\u4ee5\u4f7f\u5176\u66f4\u96be\u83b7\u5f97\u3002\u5c31\u50cf\u7164\u70ad\u516c\u53f8\u96c7\u4f63\u66f4\u591a\u7164\u77ff\u5de5\u4eba\u4e00\u6837\uff0c\u52a0\u5bc6\u77ff\u5de5\u8d2d\u4e70\u66f4\u591a\u66f4\u5feb\u7684\u8ba1\u7b97\u673a\uff0c\u5f62\u6210\u4e00\u79cd\u519b\u5907\u7ade\u8d5b\uff0c\u63a8\u52a8\u4e86\u5bf9\u7535\u529b\u7684\u5de8\u5927\u9700\u6c42\u3002\u4e00\u4e9b\u53d1\u7535\u5546\u2014\u2014\u53d1\u73b0\u5411\u6bd4\u7279\u5e01\u91c7\u77ff\u4e1a\u52a1\u63d0\u4f9b\u7535\u529b\u6bd4\u5411\u7535\u7f51\u51fa\u552e\u7535\u529b\u53ef\u4ee5\u8d5a\u66f4\u591a\u7684\u94b1\u2014\u2014\u6b63\u5728\u8f6c\u79fb\u91cd\u70b9\u3002\u62e5\u6709\u6d77\u72f8\u53bf\u6d77\u72f8\u8c37\u6838\u7535\u7ad9\u7684\u80fd\u6e90\u6e2f\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u5ba3\u5e03\uff0c\u5b83\u5c06\u4e3a\u4fc4\u4ea5\u4fc4\u5dde\u7684\u6bd4\u7279\u5e01\u91c7\u77ff\u6570\u636e\u4e2d\u5fc3\u63d0\u4f9b\u6838\u7535\u3002\u5362\u585e\u6069\u53bf\u8428\u65af\u594e\u54c8\u7eb3\u84b8\u6c7d\u7535\u7ad9\u7684\u6240\u6709\u8005\u5854\u4f26\u80fd\u6e90\u516c\u53f8\u4e5f\u5728\u505a\u540c\u6837\u7684\u4e8b\u60c5\u3002\u8be5\u516c\u53f8\u4e0a\u4e2a\u6708\u8868\u793a\uff0c\u5c06\u5f00\u53d1\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3\u6765\u6316\u6398\u6570\u5b57\u8d27\u5e01\uff0c\u8be5\u6570\u636e\u4e2d\u5fc3\u6700\u591a\u53ef\u4f7f\u7528 300 \u5146\u74e6\uff0c\u5373\u6838\u7535\u7ad9\u5bb9\u91cf\u7684 12%\u3002\n\u4e00\u4e9b\u4eba\u5c06\u79fb\u52a8\u88c5\u7f6e\u5e26\u5165\u6cb9\u7530\uff0c\u8fde\u63a5\u4ed6\u4eec\u7684\u673a\u5668\u4ee5\u4f7f\u7528\u5929\u7136\u6c14\u8fd0\u884c\uff0c\u5929\u7136\u6c14\u662f\u77f3\u6cb9\u4ea7\u54c1\u7684\u526f\u4ea7\u54c1\uff0c\u5426\u5219\u4f1a\u88ab\u71c3\u70e7\u3002\u5176\u4ed6\u4eba\u62c5\u5fc3\u6240\u6709\u8fd9\u4e9b\u6570\u5b57\u91c7\u77ff\u7684\u5927\u91cf\u548c\u4e0d\u65ad\u589e\u957f\u7684\u78b3\u8db3\u8ff9 - \u6bd4\u7279\u5e01\u6700\u5f15\u4eba\u6ce8\u76ee\u7684\u52a9\u63a8\u5668\u57c3\u9686\u9a6c\u65af\u514b\u6700\u8fd1\u547c\u5401\u8be5\u884c\u4e1a\u89e3\u91ca\u5176\u5bf9\u6c14\u5019\u53d8\u5316\u7684\u8d21\u732e - \u6b63\u8bd5\u56fe\u5bfb\u627e\u53ef\u518d\u751f\u80fd\u6e90\u6765\u4e3a\u4ed6\u4eec\u7684\u673a\u5668\u63d0\u4f9b\u52a8\u529b\u3002\u4eca\u5929\uff0cScrubgrass \u662f\u4e00\u4e2a 85 \u5146\u74e6\u7684\u84dd\u8272\u76d2\u5b50\uff0c\u5728 Scrubgrass Township \u7684\u5c71\u4e0a\u6709\u4e00\u4e2a\u9ed1\u8272\u7684\u70df\u56f1\uff0c\u770b\u8d77\u6765\u5f88\u50cf\u5b83\u5728 1993 \u5e74\u9996\u6b21\u5f00\u653e\u65f6\u7684\u6837\u5b50\u2014\u2014\u9664\u4e86\u540e\u9762\u88c5\u6ee1\u6bd4\u7279\u5e01\u77ff\u5de5\u7684\u62d6\u8f66\u3002\u8be5\u884c\u52a8\u6700\u521d\u4e0e\u4e00\u6ce2\u6b64\u7c7b\u5de5\u5382\u4e00\u8d77\u4e0a\u7ebf\uff0c\u8fd9\u4e9b\u5de5\u5382\u65e8\u5728\u89e3\u51b3\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u5e9f\u5f03\u7164\u5806\u7684\u9057\u7559\u95ee\u9898\u3002\u8fd9\u4e9b\u5de5\u5382\u5229\u7528\u4e86 1990 \u5e74\u4ee3\u7684\u4e00\u9879\u65b0\u6280\u672f\u2014\u2014\u5faa\u73af\u6d41\u5316\u5e8a\uff0c\u53ef\u4ee5\u71c3\u70e7\u8fd9\u79cd\u4f4e\u54c1\u4f4d\u6750\u6599\u5e76\u63a7\u5236\u786b\u548c\u4e00\u6c27\u5316\u4e8c\u6c2e\u7684\u6392\u653e\u3002\u77f3\u7070\u77f3\u88ab\u6ce8\u5165\u5230\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6240\u4ea7\u751f\u7684\u7070\u70ec\u73b0\u5728\u5448\u78b1\u6027\uff0c\u901a\u5e38\u4f1a\u6563\u5e03\u5728\u5e9f\u7164\u6765\u6e90\u7684\u571f\u5730\u4e0a\u4ee5\u4e2d\u548c\u9178\u3002\u53bb\u5e74\uff0c\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u73af\u5883\u4fdd\u62a4\u90e8\u4f30\u8ba1\uff0c\u5728\u8fc7\u53bb\u7684 30 \u5e74\u91cc\uff0c\u5927\u7ea6 3,700 \u82f1\u4ea9\u7684\u571f\u5730\u88ab\u56de\u6536\u5229\u7528\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u662f\u5728\u5e9f\u7164\u53d1\u7535\u5382\u71c3\u70e7\u7684\u7164\u5806\u4e4b\u540e\uff0c\u8be5\u5dde\u8fd8\u5269\u4e0b\u5927\u7ea6 9,000 \u82f1\u4ea9\u7684\u5e9f\u7164\u5806\u3002\u6709\u4e9b\u6869\u6709\u6570\u767e\u82f1\u5c3a\u6df1\u3002 \u201c\u663e\u7136\u8fd8\u6709\u66f4\u591a\u5de5\u4f5c\u8981\u505a\uff0c\u201dDEP \u79d8\u4e66\u5e15\u7279\u91cc\u514b\u9ea6\u514b\u5510\u7eb3\u53bb\u5e74\u5728\u5173\u4e8e\u6b64\u7c7b\u53d1\u7535\u5382\u6e29\u5ba4\u6c14\u4f53\u5f71\u54cd\u7684\u542c\u8bc1\u4f1a\u4e0a\u5bf9\u5dde\u7acb\u6cd5\u59d4\u5458\u4f1a\u8bf4\u3002\u5b83\u4eec\u6bcf\u5355\u4f4d\u80fd\u6e90\u6392\u653e\u7684\u4e8c\u6c27\u5316\u78b3\u6bd4\u666e\u901a\u71c3\u7164\u7535\u5382\u591a\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u71c3\u6599\u8d28\u91cf\u8fdc\u4f4e\u4e8e\u7eaf\u7164\u3002\u8fd9\u4e00\u76f4\u662f\u4e00\u4e2a\u6743\u8861\u2014\u2014\u6e05\u7406\u5e9f\u7164\u5806\u53ef\u4ee5\u6e05\u7406\u5468\u56f4\u7684\u6c34\uff0c\u5e76\u4fee\u590d\u96be\u770b\u548c\u5371\u9669\u7684\u571f\u5730\u3002\u4f46\u662f\u4e8c\u6c27\u5316\u78b3\u4f1a\u8fdb\u5165\u7a7a\u6c14\u4e2d\u3002\n\u5728 2019 \u5e74\uff0c\u5373\u6709\u53ef\u7528\u8054\u90a6\u6570\u636e\u7684\u6700\u540e\u4e00\u5e74\uff0cScrubgrass \u6392\u653e\u4e86 371,000 \u5428\u4e8c\u6c27\u5316\u78b3\uff0c\u76f8\u5f53\u4e8e 80,000 \u8f86\u6c7d\u8f66\u884c\u9a76\u4e00\u5e74\u7684\u6e29\u5ba4\u6c14\u4f53\u8db3\u8ff9\u3002 2012 \u5e74\uff0c\u5f53\u5de5\u5382\u5168\u901f\u8fd0\u8f6c\u65f6\uff0c\u5b83\u7684\u6392\u653e\u91cf\u63a5\u8fd1 100 \u4e07\u5428\u3002\u9ea6\u514b\u5510\u7eb3\u5148\u751f\u53bb\u5e74\u8bf4\uff1a\u201c\u5728\u5269\u4e0b\u7684\u5783\u573e\u5806\u4e2d\uff0c\u5927\u7ea6\u6709 40 \u4e2a\u5df2\u7ecf\u70b9\u71c3\u5e76\u6301\u7eed\u71c3\u70e7\uff0c\u4e25\u91cd\u5f71\u54cd\u4e86\u5f53\u5730\u7684\u7a7a\u6c14\u8d28\u91cf\uff0c\u5e76\u91ca\u653e\u4e86\u5927\u91cf\u7684\u4e8c\u6c27\u5316\u78b3\u548c\u5176\u4ed6\u6c61\u67d3\u7269\u3002\u201d\u5176\u4ed6\u4f30\u8ba1\u8868\u660e\u71c3\u70e7\u5806\u7684\u6570\u91cf\u8d85\u8fc7 90\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 DEP \u57fa\u672c\u4e0a\u514d\u9664\u5e9f\u7164\u7535\u5382\u8d2d\u4e70\u78b3\u4fe1\u7528\u989d\u5ea6\u4f5c\u4e3a\u5176\u52a0\u5165\u533a\u57df\u6e29\u5ba4\u6c14\u4f53\u5021\u8bae\uff08\u4e00\u4e2a\u591a\u5dde\u78b3\u9650\u989d\u548c\u4ea4\u6613\u8ba1\u5212\uff09\u8ba1\u5212\u7684\u4e00\u90e8\u5206\u3002\u6700\u521d\u662f\u53e6\u4e00\u4e2a\u4eba\u7684\u75c5\uff0c\u4ed6\u7236\u4eb2\u7684\u75c5\uff0c\u8ba9\u65af\u5bbe\u585e\u5148\u751f\u6d89\u8db3\u5e9f\u7164\u884c\u4e1a\u3002\u4f5c\u4e3a\u4e00\u540d\u6765\u81ea Mon Valley \u7684\u91c7\u77ff\u5de5\u7a0b\u5e08\uff0c\u4ed6\u5728 1990 \u5e74\u4ee3\u521d\u671f\u4f4f\u5728\u5fb7\u514b\u8428\u65af\u5dde\uff0c\u5f53\u65f6\u4ed6\u7684\u7236\u4eb2\u751f\u75c5\u4e86\uff0cSpence \u5148\u751f\u5f00\u59cb\u957f\u9014\u65c5\u884c\u5230\u5339\u5179\u5821\u7167\u987e\u4ed6\u3002\u7a81\u7136\u95f4\uff0c\u4ed6\u5c0f\u65f6\u5019\u770b\u60ef\u7684\u5e9f\u7164\u5806\u770b\u8d77\u6765\u4e0d\u4e00\u6837\u4e86\u2014\u2014\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u673a\u4f1a\u3002 1994 \u5e74\uff0c\u65af\u5bbe\u585e\u5148\u751f\u5728 West Deer \u8d2d\u4e70\u4e86 500 \u4e07\u5428\u7684\u7164\u6e23\uff08\u5373\u6ca5\u9752\u5783\u573e\uff09\uff0c\u5e76\u4e0e\u7ef4\u5357\u6208\u53bf\u7684\u4e00\u5bb6\u5168\u65b0\u5de5\u5382\u7b7e\u8ba2\u4e86\u71c3\u70e7\u5e9f\u7164\u7684\u5408\u540c\u3002\u82b1\u4e86\u5341\u5e74\u7684\u65f6\u95f4\u5c06\u6240\u6709\u8fd9\u4e9b\u6750\u6599\u8fd0\u5f80\u5317 60 \u82f1\u91cc\u5230 Scrubgrass\u3002\u88ab\u70e7\u6bc1\u540e\uff0c\u4ea7\u751f\u7684\u7070\u70ec\u7528\u5361\u8f66\u8fd0\u56de\u897f\u9e7f\u5e76\u6563\u5e03\u5728\u571f\u5730\u4e0a\u3002\u5b83\u5728\u90a3\u91cc\u53c8\u538b\u5b9e\u4e86\u5341\u5e74\u3002\n\u672c\u6708\u65e9\u4e9b\u65f6\u5019\uff0c\u65af\u5bbe\u585e\u5148\u751f\u7ad9\u5728\u963f\u52d2\u683c\u5c3c\u53bf\u5317\u90e8\u90a3\u7247\u5e73\u5766\u7684\u571f\u5730\u4e0a\uff0c\u8fd9\u91cc\u73b0\u5728\u662f\u4e00\u5bf9\u8db3\u7403\u573a\u548c\u4e00\u4e2a\u5ba4\u5185\u8fd0\u52a8\u573a\u7684\u6240\u5728\u5730\uff0c\u4ed6\u8c08\u5230\u4e86\u6e05\u7406\u5e9f\u7164\u540e\u53ef\u80fd\u4f1a\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u7136\u540e\u4ed6\u6cbf\u7740\u8fd9\u6761\u8def\u5f00\u4e86\u56db\u5206\u4e4b\u4e00\u82f1\u91cc\uff0c\u5728\u90a3\u91cc\u4e00\u5806\u5e9f\u5f03\u7684\u7164\u5e9f\u6599\u8868\u660e\u8fd8\u6709\u591a\u5c11\u5de5\u4f5c\u8981\u505a\u3002\u73b0\u5728\u6bcf\u5929\u5411 Scrubgrass \u8fd0\u9001 50 \u8f86\u5361\u8f66\u7684\u53e6\u4e00\u4e2a\u200b\u200b West Deer \u5806\u4ee3\u8868\u4e86\u4e00\u4e2a\u7164\u77ff\u7684\u6b8b\u4f59\u7269\uff0c\u8be5\u7164\u77ff\u66fe\u7ecf\u5728\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u671f\u95f4\u4e3a\u5efa\u9020\u7f8e\u56fd\u6469\u5929\u5927\u697c\u548c\u751f\u4ea7\u6b66\u5668\u63d0\u4f9b\u94a2\u94c1\u3002\u8be5\u77ff\u4e8e 1904 \u5e74\u5f00\u5de5\uff0c\u516b\u5e74\u540e\u5173\u95ed\uff0c\u5730\u4e0a\u7559\u4e0b\u4e86\u6210\u5806\u7684\u5e9f\u7164\u3002\u6bcf\u6b21\u4e0b\u96e8\u65f6\uff0c\u6b8b\u7559\u7269\u90fd\u4f1a\u5c06\u9178\u6027\u91cd\u91d1\u5c5e\u6d78\u5165\u571f\u58e4\u4e2d\uff0c\u4f7f\u6eaa\u6d41\u53d8\u6210\u6a59\u8272\u3002\u4f46\u5728\u8fc7\u53bb\u51e0\u4e2a\u6708\u4e2d\uff0c\u5728\u4e24\u8f6e\u878d\u8d44\u4e2d\u5438\u5f15\u6295\u8d44\u8005\u7684\u5e76\u4e0d\u662f\u73af\u5883\u65b9\u9762\u7684\u5584\u4e3e\uff0c\u8fd9\u4e9b\u878d\u8d44\u7684\u6536\u76ca\u8d85\u8fc7 1 \u4ebf\u7f8e\u5143\u3002 Stronghold Digital Mining \u7684\u9996\u5e2d\u6267\u884c\u5b98\u517c\u603b\u88c1 Greg Beard \u8868\u793a\uff0c\u5438\u5f15\u529b\u5728\u4e8e\u6bd4\u7279\u5e01\u4e1a\u52a1\uff0c\u8be5\u516c\u53f8\u662f\u4ed6\u4e0e Spence \u5148\u751f\u521b\u7acb\u7684\uff0c\u65e8\u5728\u5c06 Scrubgrass \u548c\u5176\u4ed6\u51e0\u5bb6\u5e9f\u7164\u5382\u8f6c\u53d8\u4e3a\u52a0\u5bc6\u8d27\u5e01\u4e2d\u5fc3\u3002\u5468\u4e8c\uff0cStronghold \u5411\u7f8e\u56fd\u8bc1\u5238\u4ea4\u6613\u59d4\u5458\u4f1a\u63d0\u4ea4\u4e86\u6210\u4e3a\u4e0a\u5e02\u516c\u53f8\u7684\u6587\u4ef6\u3002\n2017 \u5e74\uff0c\u5de5\u5382\u5de5\u7a0b\u5e08\u6770\u592b\u00b7\u574e\u8d1d\u5c14\u4ece Spence \u5148\u751f\u5bb6\u56de\u5bb6\u540e\u5c31\u5f00\u59cb\u7814\u7a76\u6bd4\u7279\u5e01\u3002\u4ed6\u89c2\u770b\u4e86\u4e00\u6bb5 40 \u5206\u949f\u7684 YouTube \u89c6\u9891\uff0c\u5e76\u8bf4\u8fd9\u4e2a\u60f3\u6cd5\u4e00\u9488\u89c1\u8840\uff1a\u201c\u8fd9\u662f\u4e00\u79cd\u4ee5\u6743\u529b\u4e3a\u57fa\u7840\u7684\u8d27\u5e01\u3002\u201d\u5728\u4e9a\u9a6c\u900a\u4e0a\uff0c\u4ed6\u4e70\u4e86\u4e00\u4e2a 50 \u7f8e\u5143\u7684 U \u76d8\uff0c\u627f\u8bfa\u5f00\u91c7\u6bd4\u7279\u5e01\u3002\u4ed6\u5c06\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u5207\u6362\u5230\u4e00\u4e2a\u5b64\u7acb\u7684\u7f51\u7edc\u5e76\u63d2\u5165\u3002\u5f53\u65f6\uff0c\u6bd4\u7279\u5e01\u4ecd\u7136\u662f\u201c\u8fb9\u7f18\u201d\uff0c\u574e\u8d1d\u5c14\u5148\u751f\u8bf4\uff0c\u4ed6\u62c5\u5fc3\u4f1a\u56e0\u4e3a\u52a0\u5bc6\u8d27\u5e01\u7684\u58f0\u8a89\u800c\u611f\u67d3\u8ba1\u7b97\u673a\u75c5\u6bd2\u751a\u81f3\u88ab FBI \u5217\u5165\u76d1\u89c6\u540d\u5355\u3002\u4e3a\u6050\u6016\u4e3b\u4e49\u8f6c\u79fb\u8d44\u91d1\u3002 USB \u8bb0\u5fc6\u68d2\u5982\u5ba3\u4f20\u7684\u90a3\u6837\u53d1\u6325\u4f5c\u7528\uff0c\u51e0\u5468\u540e\uff0c\u574e\u8d1d\u5c14\u5148\u751f\u6295\u8d44 1,000 \u7f8e\u5143\u4e70\u4e86\u4e00\u53f0\u77ff\u673a\uff0c\u8fd9\u662f\u4e00\u53f0\u552f\u4e00\u7528\u4e8e\u8fd0\u884c\u8ba1\u7b97\u7684\u8ba1\u7b97\u673a\u3002\u5b83\u8fd0\u884c\u4e86\u4e00\u5468\uff0c\u4ea7\u751f\u4e86\u76f8\u5f53\u4e8e 6.65 \u7f8e\u5143\u7684\u6bd4\u7279\u5e01\u3002\u574e\u8d1d\u5c14\u5148\u751f\u7d27\u5f20\u5730\u5c06\u673a\u5668\u7684\u6570\u5b57\u94b1\u5305\u8fde\u63a5\u5230 Scrubgrass \u7684 PNC \u5e10\u6237\u4ee5\u8f6c\u79fb\u6218\u5229\u54c1\uff0c\u7136\u540e\u4ed6\u8d70\u8fdb\u529e\u516c\u5ba4\u68c0\u67e5\u5b83\u662f\u5426\u771f\u7684\u51fa\u73b0\u5728\u90a3\u91cc\u3002 \u201c\u6211\u7684\u5929\u554a\u3002\u6211\u4e0d\u6562\u76f8\u4fe1\u8fd9\u771f\u7684\u4f1a\u594f\u6548\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u653e\u5165\u5176\u4e2d\u7684 15,000 \u4e2a\uff0c\u201d\u4ed6\u544a\u8bc9\u65af\u5bbe\u585e\u5148\u751f\u3002\n\u6839\u636e\u574e\u8d1d\u5c14\u5148\u751f\u7684\u8ba1\u7b97\uff0c\u4ee5\u8fd9\u4e2a\u4ef7\u683c\uff0c\u7528 15,000 \u53f0\u673a\u5668\u5f00\u91c7\u6bd4\u7279\u5e01\u5c06\u4f7f\u5de5\u5382\u7684\u8425\u4e1a\u6536\u5165\u589e\u52a0\u7ea6 50%\u3002\u7b2c\u4e00\u53f0\u673a\u5668\u7684\u6536\u76ca\u7528\u4e8e\u8d2d\u4e70\u7b2c\u4e8c\u53f0\u673a\u5668\uff0c\u7136\u540e\u8fd9\u4e24\u53f0\u673a\u5668\u7528\u4e8e\u8d2d\u4e70\u7b2c\u4e09\u53f0\u673a\u5668\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u4eca\u5929\uff0c\u5927\u7ea6\u6709 3,000 \u540d\u52a0\u5bc6\u8d27\u5e01\u77ff\u5de5\u88c5\u5728\u53d1\u7535\u5382\u540e\u9762\u7684\u6539\u88c5\u96c6\u88c5\u7bb1\u4e2d\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u5f52 Stronghold \u6240\u6709\uff0c\u6709\u4e9b\u5c5e\u4e8e\u4ece\u53d1\u7535\u5382\u8d2d\u4e70\u7535\u529b\u7684\u5176\u4ed6\u77ff\u4e1a\u516c\u53f8\u3002\u53e6\u5916 5,000 \u53f0\u673a\u5668\u8ba1\u5212\u5728\u4e0b\u4e2a\u6708\u5230\u8fbe\u3002\u6839\u636e\u63d0\u4ea4\u7ed9\u7f8e\u56fd\u8bc1\u5238\u4ea4\u6613\u59d4\u5458\u4f1a\u7684\u6587\u4ef6\uff0cStronghold \u8ba1\u5212\u5728\u660e\u5e74\u5e74\u5e95\u524d\u8fd0\u8425 57,000 \u540d\u77ff\u5de5\u3002 2020 \u5e74\uff0c\u5f53\u53d1\u7535\u5382\u5f88\u5c11\u8fd0\u884c\u65f6\uff0cStronghold \u4ece\u5176\u6bd4\u7279\u5e01\u4e1a\u52a1\u4e2d\u8d5a\u5230\u7684\u94b1\u6bd4\u901a\u8fc7\u5c06 Scrubgrass \u7684\u80fd\u6e90\u51fa\u552e\u7ed9\u7535\u7f51\u8d5a\u7684\u94b1\u8fd8\u591a\u3002\u4eca\u5e74\u524d\u4e09\u4e2a\u6708\uff0c\u8fd9\u79cd\u8d8b\u52bf\u53d1\u751f\u4e86\u9006\u8f6c\u3002\u5b83\u4ece\u7535\u529b\u9500\u552e\u4e2d\u83b7\u5f97\u4e86\u8fd1 200 \u4e07\u7f8e\u5143\uff0c\u4ece\u5176\u52a0\u5bc6\u6570\u636e\u4e2d\u5fc3\u83b7\u5f97\u4e86\u8d85\u8fc7 100 \u4e07\u7f8e\u5143\u3002 Spence \u5148\u751f\u4e0e\u4ed6\u7684\u5b69\u5b50\u4eec\u8c08\u8bba\u533a\u5757\u94fe\u3001\u6d89\u53ca\u5b58\u50a8\u548c\u9a8c\u8bc1\u5927\u91cf\u6570\u636e\u7684\u5bc6\u7801\u5b66\u30011960 \u5e74\u4ee3\u4eba\u4eec\u8c08\u8bba\u5851\u6599\u7684\u65b9\u5f0f\uff0c\u5c31\u50cf\u7535\u5f71\u201c\u6bd5\u4e1a\u751f\u201d\u4e00\u6837\u3002\u5bf9\u4e8e\u574e\u8d1d\u5c14\u5148\u751f\u6765\u8bf4\uff0c\u611f\u89c9\u5c31\u50cf\u4e92\u8054\u7f51\u7684\u5f00\u59cb\u4e00\u6837\uff1a\u4ed6\u77e5\u9053\u5b83\u5c06\u662f\u9769\u547d\u6027\u7684\u548c\u65e0\u5904\u4e0d\u5728\u7684\uff0c\u4f46\u613f\u666f\u4ecd\u7136\u6a21\u7cca\u3002 \u201c\u9762\u90e8\u8bc6\u522b\uff1f\u4e09\u7ef4\u6e32\u67d3\uff1f\u81ea\u52a8\u9a7e\u9a76\uff1f\u4eba\u5de5\u667a\u80fd\uff1f\u201d\u4ed6\u968f\u5730\u5410\u75f0\u3002 Spence \u5148\u751f\u7684\u5546\u4e1a\u4f19\u4f34 Beard \u5148\u751f\u66fe\u5728 Apollo Global Management Inc. \u7ba1\u7406\u80fd\u6e90\u6295\u8d44\uff0c\u4f46\u4ed6\u5e76\u4e0d\u90a3\u4e48\u70ed\u60c5\u3002\n\u201c\u6211\u4e0d\u786e\u5b9a\u4f60\u662f\u5426\u9700\u8981\u6210\u4e3a\u4e00\u4e2a\u4fe1\u5f92\uff0c\u201d\u4ed6\u8bf4\u3002\u4ed6\u5c06\u8fd9\u4e9b\u6570\u5b57\u63d2\u5165\u5230 Excel \u7535\u5b50\u8868\u683c\u4e2d\uff0c\u53d1\u73b0\u6316\u6398\u5177\u6709\u7ecf\u6d4e\u610f\u4e49\u3002\u8fd9\u5bf9\u4ed6\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u4e86\u3002 Stronghold \u6b63\u5728\u8d2d\u4e70\u53e6\u4e00\u5bb6\u5e9f\u7164\u5382\uff0c\u5373\u4f4d\u4e8e\u78b3\u53bf\u7684 Panther Creek Energy Facility\uff0c\u5e76\u8ba1\u5212\u5728\u90a3\u91cc\u590d\u5236\u5176\u52a0\u5bc6\u8d27\u5e01\u6570\u636e\u4e2d\u5fc3\uff0c\u5e76\u6b63\u5728\u5bfb\u627e\u7b2c\u4e09\u5bb6\u3002\u867d\u7136\u6bd4\u7279\u5e01\u662f\u8be5\u64cd\u4f5c\u7684\u95ea\u4eae\u9970\u9762\uff0c\u4f46\u5b83\u5b9e\u9645\u4e0a\u662f\u8fbe\u5230\u76ee\u7684\u7684\u4e00\u79cd\u624b\u6bb5\u2014\u2014\u8ba9 Scrubgrass \u6709\u7406\u7531\u8fd0\u884c\u8d85\u8fc7\u7535\u7f51\u9700\u6c42\u7684\u8fd0\u884c\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u7ee7\u7eed\u71c3\u70e7\u5e9f\u7164\u3002\u5728\u6700\u521d\u7684 20 \u5e74\u91cc\uff0c\u8be5\u5de5\u5382\u51e0\u4e4e\u4e0d\u95f4\u65ad\u5730\u8fd0\u8f6c\u3002\u5b83\u4e0e\u5f53\u5730\u516c\u7528\u4e8b\u4e1a\u516c\u53f8\u7b7e\u8ba2\u4e86\u7535\u529b\u8d2d\u4e70\u534f\u8bae\uff0c\u8fd9\u610f\u5473\u7740\u5176\u8f93\u51fa\u6709\u4fdd\u8bc1\u7684\u9700\u6c42\u548c\u4fdd\u8bc1\u7684\u4ef7\u683c\u3002\u5f53\u8fd9\u4e00\u5207\u5728 2013 \u5e74\u7ed3\u675f\u65f6\uff0cScrubgrass \u52aa\u529b\u5728\u7ade\u4e89\u6fc0\u70c8\u7684\u7535\u529b\u5e02\u573a\u4e2d\u6323\u624e\uff0c\u7535\u529b\u4ef7\u683c\u4e0b\u964d\u7684\u90e8\u5206\u539f\u56e0\u662f\u9a6c\u585e\u52d2\u65af\u9875\u5ca9\u4f7f\u5929\u7136\u6c14\u6210\u4e3a\u6bd4\u7164\u70ad\u66f4\u4fbf\u5b9c\u7684\u7535\u529b\u71c3\u6599\uff0c\u66f4\u4e0d\u7528\u8bf4\u5e9f\u7164\u4e86\u3002\u690d\u7269\u2014\u2014\u5c24\u5176\u662f\u50cf Scrubgrass \u8fd9\u6837\u7684\u5c0f\u578b\u690d\u7269\uff0c\u5b83\u4eec\u53d1\u73b0\u81ea\u5df1\u5904\u4e8e\u8fb9\u7f18\u72b6\u6001\u2014\u2014\u901a\u5e38\u53ea\u5728\u7535\u7f51\u9700\u6c42\u63d0\u9ad8\u4ef7\u683c\u8db3\u4ee5\u4f7f\u5176\u503c\u5f97\u7684\u9ad8\u5cf0\u65f6\u95f4\u8fd0\u884c\u3002\n\u62e5\u6709\u6301\u7eed\u7684\u9700\u6c42\uff0c\u4f8b\u5982\u9644\u52a0\u7684\u6570\u636e\u4e2d\u5fc3\uff0c\u610f\u5473\u7740 Scrubgrass \u4e0d\u9700\u8981\u5728\u7535\u529b\u4ef7\u683c\u4e0b\u964d\u65f6\u5173\u95ed\u3002\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u5f53\u7535\u7f51\u9700\u8981\u65f6\uff0cScrubgrass \u53ef\u4ee5\u50cf\u7535\u6c60\u4e00\u6837\u5de5\u4f5c\u2014\u2014\u7acb\u5373\u5c06\u5176\u7535\u6e90\u5207\u6362\u5230\u7535\u7f51\u3002 \u201c\u6211\u8ba4\u4e3a 10 \u5e74\u540e\uff0c\u4eba\u4eec\u4f1a\u8bf4\uff0c&#39;\u6bd4\u7279\u5e01\u662f\u53d1\u7535\u5382\u7528\u6765\u8c03\u8282\u7535\u7f51\u7684\u4e1c\u897f\uff0c\u201d\u574e\u8d1d\u5c14\u5148\u751f\u8bf4\u3002\u4ed6\u5df2\u7ecf\u5728\u60f3\u529e\u6cd5\u5c06\u77ff\u5de5\u4ea7\u751f\u7684\u70ed\u91cf\u9001\u56de\u53d1\u7535\u5382\u3002 \uff08\u53bb\u5e74\u51ac\u5929\uff0c\u574e\u8d1d\u5c14\u5148\u751f\u7528\u6bd4\u7279\u5e01\u673a\u5668\u4e3a\u4ed6\u7684\u5bb6\u53d6\u6696\uff09\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u690d\u7269\u867d\u7136\u6ca1\u6709\u6625\u9e21\uff0c\u4f46\u611f\u89c9\u5b83\u4ecd\u5728\u8bd5\u56fe\u5f04\u6e05\u695a\u5b83\u662f\u4ec0\u4e48\u2014\u2014\u4e00\u4e2a\u4eba\u4eec\u4fee\u8865\u548c\u5b9e\u9a8c\u7684\u5730\u65b9\u3002 Shaffer \u5148\u751f\u7684\u5927\u90e8\u5206\u804c\u4e1a\u751f\u6daf\u90fd\u5728\u8be5\u5de5\u5382\u5ea6\u8fc7\uff0c\u4ed6\u81ea\u8c6a\u5730\u5ba3\u79f0\u4ed6\u7684\u540c\u4e8b\u4e0d\u662f\u201c\u5178\u578b\u7684\u7535\u5382\u4eba\u5458\u201d\u3002\u4e00\u4f4d\u524d\u9910\u5385\u7ecf\u7406\u8d1f\u8d23\u8fd0\u8425\u6570\u636e\u4e2d\u5fc3\u3002\u9664\u4e86\u591a\u5e74\u6765\u4ece\u4e8b\u5929\u7136\u6c14\u670d\u52a1\u548c\u5065\u5eb7\u6742\u5fd7\u7684\u4f01\u4e1a\u5bb6\u4e4b\u5916\uff0c\u65af\u5bbe\u585e\u5148\u751f\u5e76\u4e0d\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4eba\uff0c\u4ed6\u5728\u5bb6\u524d\u95e8\u5185\u6302\u4e86\u5e26\u6846\u7684 Scrubgrass \u7167\u7247\u3002 \u201c\u4ed6\u4eec\u5e94\u8be5\u5efa\u9020\u66f4\u591a\u8fd9\u6837\u7684\u5de5\u5382\uff0c\u800c\u4e0d\u662f\u66f4\u5c11\uff0c\u201d\u4ed6\u6700\u8fd1\u8bf4\u3002 \u201c\u8fd9\u5e76\u4e0d\u5b8c\u7f8e\u3002\u6211\u5411\u4f60\u627f\u8ba4\u8fd9\u4e00\u70b9\u3002\u4f46\u8fd9\u8be5\u6b7b\u7684\u597d\u3002\u201d\u66f4\u6b63\uff1a\u5728\u8fd9\u4e2a\u6545\u4e8b\u7684\u65e9\u671f\u7248\u672c\u4e2d\uff0c\u300a\u516c\u62a5\u300b\u9519\u8bef\u5730\u4f30\u8ba1\u4e86\u5de5\u5382\u6bd4\u7279\u5e01\u5f00\u91c7\u7684\u6f5c\u5728\u6536\u5165\u3002", "note_en": "Bitcoin is the most widespread of the cryptocurrencies in use today. These digital currencies, which involve a huge amount of computing power, aren\u2019t issued by a central bank but are instead \u201cmined\u201d by computers that perform the energy-intensive work of validating transactions and adding them to a digital ledger, called the blockchain.\n Just as mining coal or gold is a matter of who gets to the commodity first, so too is digital mining, where computers race against each other to be the first to validate a block of transactions and win their reward.\n With each new computer vying for the prize, the algorithm adjusts to make getting it more difficult.\n Rather like a coal company hiring more coal miners, crypto miners buy more and faster computers, creating a kind of arms race that\u2019s driving a huge demand for power.\n  Already, some power generators \u2014 finding they can make more money supplying electricity to Bitcoin-mining operations than selling it to the grid \u2014 are shifting focus.\n Energy Harbor, which owns the Beaver Valley Nuclear Plant in Beaver County, announced earlier this month that it will supply nuclear power to a Bitcoin-mining data center in Ohio.\n Talen Energy, owner of the Susquehanna Steam Electric Station in Luzerne County, is doing the same. The company said last month that it will develop a data center to mine digital currency that could use up to 300 megawatts, or 12% of the nuclear plant\u2019s capacity.\n  Some are taking mobile units into the oil fields, hooking up their machines to run on natural gas, a byproduct of oil product that would otherwise be flared. Others, worried about the substantial and growing carbon footprint of all this digital mining \u2014 Bitcoin\u2019s highest profile booster Elon Musk recently called the industry to account for its contribution to climate change \u2014 are trying to find renewable sources of energy to power their machines.\n            Today, Scrubgrass, an 85-megawatt blue box with a black smokestack in the hills of Scrubgrass Township, looks much like it did when it first opened in 1993 \u2014 except for the trailers filled with Bitcoin miners in the back.\n The operation originally came online along with a wave of such plants that were supposed to tackle Pennsylvania\u2019s legacy of abandoned coal piles.\n The plants took advantage of a new technology in the 1990s \u2014 a circulating fluidized bed that made it possible to burn such low-grade material and control emissions of sulfur and nitrous oxides. Limestone is injected into the process, and the resulting ash, now alkaline, is often spread on the land where the waste coal came from to neutralize the acid.\n  Last year, the Pennsylvania Department of Environmental Protection estimated there are about 9,000 acres filled with waste coal piles in the state remaining, after some 3,700 acres have been reclaimed over the past three decades, mostly by the piles being burned in waste coal power plants. Some piles are hundreds of feet deep.\n \u201cThere is clearly more work to be done,\u201d DEP Secretary Patrick McDonnell told a state legislative committee last year during a hearing on the greenhouse gas impacts of such power plants. They emit more carbon dioxide than regular coal plants per unit of energy because the quality of their fuel is much lower than pure coal.\n That has always been the trade-off \u2014 cleaning up the waste coal piles cleans up the water around them and remediates unsightly and dangerous land. But the CO2 goes in the air.\n In 2019, the last year with available federal data, Scrubgrass emitted the equivalent of 371,000 tons of CO2 \u2014 the greenhouse gas footprint of 80,000 cars driving for a year. In 2012, when the plant was running at full force, it emitted close to a million tons.\n  \u201cOf the piles that remain,\u201d Mr. McDonnell said last year, \u201capproximately 40 have ignited and continually burn, significantly impacting local air quality and releasing significant amounts of carbon dioxide and other pollutants.\u201d Other estimates put the number of burning piles at more than 90.\n That\u2019s why the DEP essentially excused waste coal plants from buying carbon credits as part of its plan to join the Regional Greenhouse Gas Initiative, a multistate carbon cap-and-trade program.\n            It was another man\u2019s illness, his father\u2019s, that brought Mr. Spence into the waste coal business in the first place. A mining engineer from the Mon Valley, he was living in Texas in the early 1990s when his father got sick and Mr. Spence began to take extended trips to Pittsburgh to care for him.\n Suddenly, the waste coal piles that he was used to seeing as a kid looked different \u2014 they looked like an opportunity.\n In 1994, Mr. Spence bought a 5 million-ton gob \u2014 that is, garbage of bituminous \u2014 pile in West Deer and secured a contract with a brand new plant in Venango County to burn the waste coal.\n It took a decade to truck all of that material 60 miles north to Scrubgrass. After it was burned, the resulting ash was trucked back to West Deer and spread on the land. There it sat compacting for another decade.\n  Earlier this month, Mr. Spence stood on that flattened ground in northern Allegheny County, now home to a pair of soccer fields and an indoor sports complex, and talked about what\u2019s possible when waste coal is cleaned up.\n Then he drove a quarter mile down the road, where a mountain range of abandoned coal waste showed how much is left to be done.\n The other West Deer pile that now sends 50 trucks to Scrubgrass every day represents the remnants of a coal mine that once supplied steel to build U.S. skyscrapers and produce weapons during World War II. The mine opened in 1904 and shuttered eight decades later, leaving heaps of waste coal on the ground.\n Every time it rains, the remnants leach an acidic brew of heavy metals into the earth, turning streams orange.\n But it\u2019s not the environmental good-doing that hooked investors during two funding rounds that yielded more than $100 million over the past several months.\n The appeal was the Bitcoin operation, said Greg Beard, CEO and president of Stronghold Digital Mining, a company that he founded with Mr. Spence to turn Scrubgrass and several other waste coal plants into a crypto hub.\n On Tuesday, Stronghold filed documents with the Securities &amp; Exchange Commission to become a public company.\n            Jeff Campbell, the plant engineer, started researching Bitcoin as soon as he got home from Mr. Spence\u2019s house in 2017. He watched a 40-minute YouTube video and said the idea clicked into place: \u201cThis is currency that\u2019s underpinned by power.\u201d\n On Amazon, he bought a $50 USB stick that promised to mine Bitcoin. He switched his computer to an isolated network and plugged it in.\n At that time, Bitcoin was still \u201cfringe,\u201d Mr. Campbell said, and he worried about getting a computer virus or even ending up on an FBI watchlist because of cryptocurrency\u2019s reputation in moving funds for terrorism.\n  The USB stick worked as advertised, and after a few weeks, Mr. Campbell invested $1,000 and bought a mining machine, a computer whose sole purpose is to run computations. It ran for a week and generated the equivalent of $6.65 in Bitcoin.\n Nervously, Mr. Campbell linked the machine\u2019s digital wallet to Scrubgrass\u2019 PNC account to transfer the spoils, then he went into the office to check if it really showed up there.\n \u201cOh, my God. I can\u2019t believe this is really going to work,\u201d he said\n \u201cAll we need to do is put 15,000 of these in,\u201d he told Mr. Spence.\n According to Mr. Campbell\u2019s calculations, at that price, mining for Bitcoin with 15,000 machines would add about 50% to the plant\u2019s operating revenue.\n The earnings from the first machine funded the purchase of the second, then those two funded the third and so on.\n Today, there are about 3,000 cryptocurrency miners packed into retrofitted shipping containers behind the power plant, most of them owned by Stronghold and some that belong to other mining companies that buy power from the plant. Another 5,000 machines are scheduled to arrive next month. According to documents filed with the SEC, Stronghold is planning to operate 57,000 miners by the end of next year.\n  In 2020, when the power plant seldom ran, Stronghold made more money from its Bitcoin operations than by selling Scrubgrass\u2019s energy to the grid. During the first three months of this year, the trend reversed. It received almost $2 million from power sales and more than $1 million from its crypto datacenter.\n Mr. Spence talks to his kids about blockchain, the cryptography involved in storing and verifying huge swaths of data, the way people in the 1960s talked about plastics, a la the movie \u201cThe Graduate.\u201d\n  For Mr. Campbell it feels like the beginning of the internet did: He knows it\u2019s going to be revolutionary and ubiquitous, but the vision is still fuzzy. \u201cFacial recognition? Three-dimensional rendering? Autonomous driving? Artificial intelligence?\u201d he spitballs.\n Mr. Spence\u2019s business partner, Mr. Beard, who used to manage energy investing at Apollo Global Management Inc., isn\u2019t as exuberant.\n \u201cI\u2019m not sure that you need to be a believer,\u201d he said.\n He plugged the numbers into an Excel spreadsheet and saw that it makes economic sense to mine. That was enough for him.\n Stronghold is buying another waste coal plant, Panther Creek Energy Facility in Carbon County, with plans to replicate its cryptomining data center there, and is eyeing a third.\n            While Bitcoin is the shiny veneer of the operation, it\u2019s actually a means to an end \u2014 giving Scrubgrass a reason to run more than the electric grid needs so it can continue to burn waste coal.\n For the first 20 years, the plant ran nearly constantly. It had a power purchase agreement with the local utility, which meant there was a guaranteed demand and a guaranteed price for its output.\n When that ended, in 2013, Scrubgrass struggled to navigate the competitive power market, where the price of power was falling in part because the Marcellus Shale was making natural gas a cheaper fuel for electricity than coal, let alone waste coal.\n Plants \u2014 especially smaller ones like Scrubgrass that find themselves on the margin \u2014 often run only at peak times when the demand on the grid raises prices enough to make it worth their while.\n Having a constant demand, like the attached data center, means Scrubgrass doesn\u2019t need to shut down when prices for power fall. It also means that when the grid needs it, Scrubgrass can act like a battery \u2014 instantly switching its power to the grid.\n  \u201cI think 10 years from now, people are going to say, \u2018Bitcoin is the thing that power plants do to regulate the grid,\u201d Mr. Campbell said.\n He\u2019s already thinking of ways to route the heat produced by the miners back into the power plant. (Last winter, Mr. Campbell heated his home with Bitcoin machines).\n Meanwhile, the plant, although no spring chicken, feels like it\u2019s still trying to figure out what it is \u2014 a place where people tinker and experiment. Mr. Shaffer, who spent most of his career at the plant, proudly proclaims that his colleagues aren\u2019t \u201ctypical power plant people.\u201d A former restaurant manager runs the data center.\n Mr. Spence, not a typical anything except an entrepreneur whose ventures over the years ranged from natural gas services to a health magazine, hung the framed photo of Scrubgrass just inside the front door of his home.\n \u201cThey should be building more plants like this, not less,\u201d he said recently. \u201cIt\u2019s not perfect. I acknowledge that to you. But it\u2019s damn good.\u201d\n  Correction: In an earlier version of this story, the Post-Gazette incorrectly estimated potential revenue from bitcoin mining at the plant.", "posttime": "2021-08-08 09:55:43", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6bd4\u7279\u5e01,\u53d1\u7535\u5382,coal,scrubgrass", "title": "\u4e3a\u4ec0\u4e48\u5e9f\u7164\u53d1\u7535\u5382\u6b63\u5728\u201c\u4e3a\u6bd4\u7279\u5e01\u71c3\u70e7\u201d", "title_en": "Why a Waste-Coal Power Plant is 'Burning for Bitcoin'", "transed": 1, "url": "https://newsinteractive.post-gazette.com/burning-for-bitcoin/", "via": "", "real_tags": ["\u6bd4\u7279\u5e01", "\u53d1\u7535\u5382", "coal"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072050, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u8ba8\u538c\u5904\u7406\u56fe\u50cf\u3002\u8fd9\u662f\u5236\u4f5c\u7f51\u7ad9\u548c\u64b0\u5199\u535a\u5ba2\u6587\u7ae0\u4e2d\u6700\u4e4f\u5473\u7684\u90e8\u5206\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u65f6\u6211\u975e\u5e38\u5bb3\u6015\u5b83\uff0c\u4ee5\u81f3\u4e8e\u6211\u4e0d\u53d1\u5e03\u5e16\u5b50\uff0c\u56e0\u4e3a\u6211\u5fc5\u987b\u4e3a\u4ed6\u4eec\u5236\u4f5c\u8d44\u4ea7\u3002\u5982\u679c\u4f60\u96c6\u4e2d\u7cbe\u529b\u5236\u4f5c\u5b83\u4eec\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u4e0a\u4f20\u548c\u91cd\u65b0\u4e0a\u4f20\u7684\u5faa\u73af\uff0c\u76f4\u5230\u4f60\u83b7\u5f97\u6b63\u786e\u7684\u5206\u8fa8\u7387\u3001\u5927\u5c0f\u548c\u989c\u8272\u3002 Figma \u662f\u4e00\u79cd\u7528\u4e8e\u5236\u4f5c\u6a21\u578b\u7684\u8bbe\u8ba1\u5de5\u5177\u3002\u5b83\u5185\u7f6e\u7684\u4e00\u9879\u529f\u80fd\u662f\u80fd\u591f\u5c06\u60a8\u7684\u8bbe\u8ba1\u5bfc\u51fa\u4e3a\u56fe\u50cf\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6211\u7684\u5927\u90e8\u5206\u6a2a\u5e45\u3001\u56fe\u5f62\u4ee5\u53ca\u51e0\u4e4e\u6240\u6709\u7528\u4e8e\u7f51\u7edc\u7684\u5185\u5bb9\uff0c\u6211\u90fd\u5c06\u5b83\u4eec\u5236\u4f5c\u4e3a Figma\u3002\u6bcf\u6b21\u6211\u8fdb\u884c\u66f4\u6539\u65f6\uff0c\u6211\u90fd\u5fc5\u987b\u5c06\u56fe\u7247\u5bfc\u51fa\u5e76\u4e0a\u4f20\u3002\u5982\u679c\u5c3a\u5bf8\u4e0d\u6b63\u786e\uff0c\u6216\u989c\u8272\u9519\u8bef\uff0c\u6211\u5fc5\u987b\u5c06\u5176\u62d6\u8fc7\u6765\u5e76\u4e0a\u4f20\u5230\u5176\u4ed6\u5730\u65b9\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u4f1a\u5f97\u5230\u4e00\u5806\u76f8\u540c\u7684\u8d44\u4ea7\uff0c\u79f0\u4e3a\u201cimage\u201d\u3001\u201cimage_copy_1\u201d\u3001\u201cimage_copy_2\u201d\u3002\n\u7701\u53bb\u8fd9\u6574\u4e2a\u9ebb\u70e6\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u76f4\u63a5\u5728 Figma \u4e2d\u83b7\u5f97\u6307\u5411\u60a8\u8bbe\u8ba1\u7684\u56fe\u50cf\u94fe\u63a5\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u7bc7\u535a\u6587\u4e2d\u7684\u6240\u6709\u56fe\u7247\u90fd\u4fdd\u5b58\u5728\u4e00\u4e2a Figma \u6587\u4ef6\u4e2d\uff0c\u5e76\u5df2\u4e0a\u4f20\u5230 Figmage\u3002\u5982\u679c\u5723\u8bde\u8282\u5feb\u5230\u4e86\uff0c\u6211\u5e0c\u671b\u6bcf\u5f20\u56fe\u7247\u90fd\u6709\u7ea2\u8272\u80cc\u666f\uff0c\u6211\u53ef\u4ee5\u5728\u4e0d\u89e6\u53ca\u6211\u7684\u7f51\u7ad9\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u548c\u53d1\u5e03\u66f4\u6539\u3002\u53d8\u5316\u662f\u77ac\u95f4\u53ef\u89c1\u7684\u3002\u6211\u4f7f\u7528 AWS Lambda \u548c S3 \u6784\u5efa\u4e86 Figmage \u7684\u56fe\u50cf\u6258\u7ba1\u3002\u4f5c\u4e3a\u4e00\u540d\u6280\u672f\u4eba\u5458\uff0c\u6211\u5fc5\u987b\u6743\u8861\u5229\u5f0a\uff1a \u6258\u7ba1\u5728 Figmage.com \u4e0a - \u56fe\u50cf\u6258\u7ba1\u5728 figmage \u57df\u800c\u4e0d\u662f\u60a8\u7684\u81ea\u5b9a\u4e49\u57df\u4e2d\u3002 Webflow \u505a\u4e86\u7c7b\u4f3c\u7684\u4e8b\u60c5\u3002\u8fd9\u53ef\u80fd\u9002\u7528\u4e8e\u56fe\u50cf\u7684 SEO\uff0c\u4e5f\u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u56fe\u50cf\u3002\u51b7\u542f\u52a8 - \u6211\u901a\u5e38\u53d1\u73b0\u56fe\u50cf\u9700\u8981 200 \u6beb\u79d2\u7684\u52a0\u8f7d\u65f6\u95f4\u3002\u8fd9\u662f AWS Lambda \u7684\u4e00\u822c\u54cd\u5e94\u65f6\u95f4\u3002\u4f46\u662f\uff0c\u5728\u51b7\u542f\u52a8\u60c5\u51b5\u4e0b\uff08\u4f8b\u5982\u6ca1\u6709\u4eba\u4f7f\u7528\u8be5\u670d\u52a1\uff09\uff0c\u53d1\u9001\u56fe\u50cf\u53ef\u80fd\u9700\u8981\u957f\u8fbe 2 \u79d2\u7684\u65f6\u95f4\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u52a0\u8f7d\u81f3\u5173\u91cd\u8981\u7684\u4e3b\u8981\u8d44\u4ea7\uff08\u4f8b\u5982\u80cc\u666f\uff09\uff0c\u6211\u53ef\u80fd\u4e0d\u4f1a\u4f7f\u7528 Figmage\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u59cb\u7ec8\u53ef\u4ee5\u5c06\u6700\u7ec8\u8d44\u4ea7\u4e0a\u4f20\u5230\u60a8\u9009\u62e9\u7684 Figma \u63d0\u4f9b\u5546\u3002\u5f53\u60a8\u4ecd\u5728\u5c1d\u8bd5\u6b63\u786e\u7684\u8d44\u4ea7\u65f6\uff0c\u60a8\u53ef\u4ee5\u5c06 figmage \u7528\u4f5c\u6e38\u4e50\u573a\u3002\n\u8fd9\u4e5f\u662f\u6211\u7b2c\u4e00\u4e2a\u76c8\u5229\u7684\u9879\u76ee\uff0c\u4f60\u53ef\u4ee5\u4ee5 20 \u7f8e\u5143\u7684\u4ef7\u683c\u83b7\u5f97 1000 \u5f20\u56fe\u50cf\u7684\u7ec8\u8eab\u6709\u9650\u4ea4\u6613\u3002", "note_en": "I hate working with images. It\u2019s the most tedious part of making websites and writing blog posts.\n In fact, sometimes I dread it so much, that I don\u2019t publish posts because I have to make the assets for them.\n  And if you muster up the energy to make them, it\u2019s a cycle of uploads and re-uploads till you get the right resolution, size and colors.\n  Figma is a design tool that\u2019s used to make mockups. One feature built-into it is the ability to export your designs as an image.\n So for most of my banners, and graphics and almost anything for the web, I make them Figma.\n  And everytime I make changes, I have to export the the picture out, and upload it.\n If a size is incorrect, or a color is wrong, I have to drag it over and upload it somewhere else. That also means you get a bunch of the same assets called \u201cimage\u201d, \u201cimage_copy_1\u201d, \u201cimage_copy_2\u201d.\n  Taking this entire hassle out, you can now just get an image link directly to your design in Figma.\n     In fact, all of the images in this blog post live in a Figma file and have been uploaded to Figmage.\n If Christmas rolls around, and I wanted every image to have a red background, I can make and publish the changes without even touching my website. The changes are seen in an instant.\n   I built Figmage\u2019s image hosting using AWS Lambda and S3. And as a technology person, I have to call out the trade-offs:\n Hosted on Figmage.com - The images are hosted with the figmage domain rather than your custom domain. Webflow does something similar. This may or may not work well with SEO for images.\n Cold-Start - I\u2019ve generally found that images take 200ms load. Which is the general response time for AWS Lambda. However, in a cold-start (e.g. nobody is using the service), it may take up-to 2 seconds to send an image. So for major assets that are critical to load (e.g. a background), I might not use Figmage.\n In any case, you can always upload your final assets to a provider of your choice from Figma. You can use figmage as a playground for when you\u2019re still experimenting with the right assets.\n It\u2019s also my first project that makes revenue, you can get a  limited lifetime deal for a 1000 images at $20.", "posttime": "2021-08-08 09:49:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u641e\u4e71,don,\u56fe\u50cf", "title": "Figmage\uff1a\u6211\u4e0d\u641e\u4e71\u56fe\u7247", "title_en": "Figmage: I don't mess with images", "transed": 1, "url": "https://heyraviteja.com/post/projects/figmage/", "via": "", "real_tags": ["\u641e\u4e71", "don", "\u56fe\u50cf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072048, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u6ca1\u6709\u4eba\u89c9\u5f97\u201c\u8fc7\u4f60\u6700\u597d\u7684\u5355\u8eab\u751f\u6d3b\u201d\u548c\u201c\u8ba9\u81ea\u5df1\u5feb\u4e50\u201d\u7684\u5efa\u8bae\u9002\u5f97\u5176\u53cd\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e 30 \u591a\u5c81\u7684\u5355\u8eab\u5973\u6027\uff1f\u6211\uff1a37\u4e2a\u5927\u57ce\u5e02\u7684\u5973\u804c\u4e1a\u3002\u4e00\u4e9b\u82b1\u54e8\u7684\u5b66\u4f4d\u3002\u4e00\u4efd\u7a33\u5b9a\u3001\u9ad8\u6536\u5165\u7684\u5de5\u4f5c\u3002\u62e5\u6709\u81ea\u5df1\u7684\u516c\u5bd3\u3002\u6709\u8da3/\u53e4\u602a\u7684\u7231\u597d\uff08\u767b\u5c71\u3001\u9a91\u81ea\u884c\u8f66\u3001\u6444\u5f71\uff09\u3002\u7ecf\u5e38\u53bb\u5947\u602a\u7684\u5730\u65b9\u65c5\u884c\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u4eba\uff08\u5927\u5b66\u6bd5\u4e1a\u540e\u53bb\u4e86Peace Corps\uff0c\u6240\u4ee5\u5728\u56fd\u5916\u72ec\u81ea\u4e00\u4eba\u5f88\u8212\u670d\uff09\u3002\u62e5\u6709\u4e0d\u540c\u4eba\u751f\u9636\u6bb5\u7684\u670b\u53cb\u3002\u505a\u4e86\u51e0\u5e74\u7684\u6cbb\u7597\uff0c\u6240\u4ee5\u6211\u60f3\u6211\u81f3\u5c11\u6709\u4e00\u4e9b\u81ea\u6211\u610f\u8bc6\u3002 \uff08\u56e0\u4e3a\u4eba\u4eec\u4f1a\u95ee\uff0c\u6211\u5728\u5339\u914d/\u7ea6\u4f1a\u65f6\u6ca1\u6709\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4e0d\u8ba4\u4e3a\u6211\u7684\u5916\u8868\u662f\u6211\u4ecd\u7136\u5355\u8eab\u7684\u552f\u4e00\u539f\u56e0\u3002\u800c\u4e14\u6211\u4f7f\u7528\u6700\u8fd1\u7684\u7167\u7247\u3002\uff09\u6211\u51e0\u4e4e\u62e5\u6709\u6211\u4e00\u76f4\u60f3\u8981\u7684\u751f\u6d3b\uff0c\u5408\u4f5c\u4f19\u4f34\u9664\u5916\u3002\u6211\u4e00\u76f4\u5728\u52aa\u529b\u6784\u5efa\u5b83\u3002\u4f46\u6211\u89c9\u5f97\u6211\u7684\u751f\u6d3b\u8d8a\u6210\u529f\u548c\u6709\u8da3\uff0c\u7537\u4eba\u5bf9\u6211\u4f5c\u4e3a\u957f\u671f\u5408\u4f5c\u4f19\u4f34\u7684\u5174\u8da3\u5c31\u8d8a\u5c11\u3002\u6211\u9047\u5230\u7684\u7537\u4eba\u8d8a\u5c11\uff0c\u5c31\u8d8a\u80fd\u4ee5\u6709\u610f\u4e49\u7684\u65b9\u5f0f\u4e3a\u6211\u7684\u751f\u6d3b\u589e\u6dfb\u5149\u5f69\u3002\u4f46\u4ec5\u4ec5\u56e0\u4e3a\u6211\u4e00\u4e2a\u4eba\u6bd4\u8f83\u5feb\u4e50\uff0c\u4e0d\u9700\u8981\u201c\u9700\u8981\u201d\u4f34\u4fa3/\u53bb\u505a\u6211\u60f3\u505a\u7684\u4e00\u5207\uff0c\u800c\u4e0d\u7528\u7b49\u5f85\u6709\u4eba\u966a\u6211\u53bb\uff08\u65c5\u884c\uff0c\u4e70\u623f\u7b49\uff09\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6211\u4e0d\u60f3\u7231\u4e0a\u4e0b\u4e00\u4e2a\u4eba\u3002\u6211\u5f88\u60f3\u6709\u4e2a\u4eba\u4e00\u8d77\u5206\u62c5\u8d77\u8d77\u843d\u843d\uff1b\u4e00\u8d77\u63a2\u7d22\u4e16\u754c\uff1b\u6210\u4e3a\u961f\u53cb\uff0c\u5171\u521b\u4eba\u751f\uff1b\u54e6\uff0c\u5b9a\u671f\u6ee1\u8db3\u6027\u884c\u4e3a\u4e5f\u975e\u5e38\u597d\u3002\u7136\u800c\uff0c\u4f3c\u4e4e\u6211\u8d8a\u662f\u201c\u4e3a\u81ea\u5df1\u52aa\u529b\u201d\u8ba9\u6211\u73b0\u5728\u7684\u751f\u6d3b\u53d8\u5f97\u7f8e\u597d\uff0c\u5b83\u5c31\u8d8a\u4f7f\u6211\u4e0e\u6f5c\u5728\u7684\u5408\u4f5c\u4f19\u4f34\u758f\u8fdc\u3002\u6211\u66fe\u8ba9\u7537\u4eba\u544a\u8bc9\u6211\uff0c\u6211\u5f88\u5bb9\u6613\u8d70\u5f00\uff0c\u56e0\u4e3a\u6211\u201c\u4e0d\u9700\u8981\u201d\u4ed6\u4eec\u3002\u6211\u66fe\u6709\u8fc7\u7537\u4eba\u8bf4\u6211\u7684\u751f\u6d3b\u592a\u5b8c\u6574/\u5145\u5b9e\u800c\u65e0\u6cd5\u62e5\u6709\u4f34\u4fa3\u2014\u2014\u5c31\u50cf\u4ed6\u4eec\u5728\u5176\u4e2d\u6ca1\u6709\u7acb\u8db3\u4e4b\u5730\u3002\u4f46\u5bf9\u6211\u6765\u8bf4\uff0c\u9700\u8981\u67d0\u4eba\u548c\u7b49\u5f85\u67d0\u4eba\u53ea\u662f\u4f60\u8fc7\u7740\u4e0d\u5feb\u4e50/\u5065\u5eb7\u7684\u5355\u8eab\u751f\u6d3b\u7684\u8ff9\u8c61\u3002\u6211\u89c9\u5f97\u6211\u6240\u505a\u7684\u6240\u6709\u4e8b\u60c5\u90fd\u662f\u4e3a\u4e86\u8ba9\u81ea\u5df1\u5feb\u4e50\u3001\u5065\u5eb7\u548c\u6210\u529f\uff08\u5728\u5de5\u4f5c\u4e2d\u83b7\u5f97\u664b\u5347\uff1b\u53bb\u58a8\u897f\u54e5\u722c\u4e00\u4e9b\u706b\u5c71\uff1b\u62dc\u8bbf\u6211\u4f4f\u5728\u4e0d\u540c\u57ce\u5e02\u7684\u5927\u5b66\u670b\u53cb\uff1b\u62a5\u540d\u53c2\u52a0 100 -\u82f1\u91cc\u81ea\u884c\u8f66\u9a91\u884c\uff09\u6b63\u5728\u79ef\u6781\u963b\u788d\u6211\u7684\u7ea6\u4f1a\u524d\u666f\uff0c\u56e0\u4e3a\u4e54\u3001\u5c71\u59c6\u6216\u5df4\u52c3\u7f57\u6839\u672c\u4e0d\u91cd\u89c6\u8fd9\u4e9b\u4e1c\u897f\u3002\u76f8\u53cd\uff0c\u6211\u770b\u5230\u90a3\u4e9b\u8bf4\u4ed6\u4eec\u60f3\u8981\u50cf\u6211\u8fd9\u6837\u7684\u5973\u4eba\u7684\u7537\u4eba\u5b9e\u9645\u4e0a\u9009\u62e9\u4e86\u90a3\u4e9b\u82b1\u66f4\u591a\u65f6\u95f4\u5728\u5916\u8868\u4e0a\uff08\u5934\u53d1\u3001\u6807\u8bb0\u3001\u65f6\u5c1a\uff09\u548c\u66f4\u591a\u65f6\u95f4\u89c2\u770b Bravo\u3001\u505a\u745c\u4f3d\u3001\u62e5\u62b1\u4ed6\u4eec\u7684\u91d1\u6bdb\u7684\u4eba\u3002\u8fd9\u4e9b\u5973\u4eba\u6b63\u5728\u7b49\u5f85\u4e00\u4e2a\u7537\u4eba\u72ec\u81ea\u65c5\u884c\u6216\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5e76\u4e14\u901a\u5e38\u5bf9\u6b64\u5f88\u8bda\u5b9e\u3002 \uff08\u5728\u4eba\u4eec\u544a\u8bc9\u6211\u4e4b\u524d\uff0c\u5982\u679c\u6211\u53ea\u662f\u8fc7\u6211\u7684\u751f\u6d3b\uff0c\u6211\u4f1a\u5728\u6211\u6700\u4e0d\u671f\u671b\u7684\u65f6\u5019\u9047\u5230\u67d0\u4e2a\u4eba\uff1a\u597d\u5427\uff0c\u6211\u505a\u5230\u4e86\uff0c\u4f46\u6211\u6ca1\u6709\u3002\u6211\u4e0d\u7ecf\u5e38\u901a\u8fc7\u65c5\u884c\u6216\u7231\u597d\u9047\u5230\u5355\u8eab\u3001\u6709\u9b45\u529b\u7684\u7537\u4eba\u3002\u5927\u591a\u6570\u7537\u4eba\u6211\u9047\u5230\u662f\u642d\u6863\u3002\u5355\u8eab\u7684\u4eba\u6700\u7ec8\u8ba4\u4e3a\u6211\u662f\u4e00\u4e2a\u80be\u4e0a\u817a\u7d20\u9ad8\u7684\u4f19\u4f34\uff0c\u5e76\u4f1a\u53bb\u5bfb\u627e\u6211\u4e0a\u9762\u63cf\u8ff0\u7684\u4e0d\u90a3\u4e48\u5192\u9669\u7684\u5973\u6027\u3002\uff09\n\u5973\uff1a\u5176\u4ed6\u4eba\u6709\u8fd9\u79cd\u611f\u89c9\u5417\uff1f\u7537\u4eba\uff1a\u5982\u679c\u4e00\u4e2a\u5973\u4eba\u770b\u8d77\u6765\u5f88\u5fd9/\u6ee1\u8db3\uff0c\u5c31\u50cf\u5979\u4e0d\u9700\u8981\u4f60\u4e00\u6837\uff0c\u4f60\u4f1a\u7ee7\u7eed\u524d\u8fdb\u5417\uff1f\u4f60\u5982\u4f55\u8fc7\u4f60\u6700\u597d\u7684\u5355\u8eab\u751f\u6d3b\uff08\u8fd9\u672c\u8d28\u4e0a\u6d89\u53ca\u6ee1\u8db3\u4f60\u81ea\u5df1\u7684\u9700\u6c42\uff0c\u8ba9\u81ea\u5df1\u5fd9\u788c\u548c\u5145\u5b9e\uff09\u5e76\u4e14\u4ecd\u7136\u4e3a\u4f34\u4fa3\u7559\u4e0b\u201c\u7a7a\u95f4\u201d\uff1f\u4efb\u4f55\u57fa\u4e8e\u7ecf\u9a8c\u7684\u5b9e\u7528\u6280\u5de7\u6216\u5efa\u8bae\u90fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u8fd8\u6709\u5176\u4ed6\u667a\u6167/\u9f13\u52b1\u7684\u8bdd\u5417\uff1f\u4f60\u4ec0\u4e48\u65f6\u5019\u653e\u5f03\u7ea6\u4f1a/\u5bfb\u627e\uff1f\u5728\u4ec0\u4e48\u65f6\u5019\u4f60\u4f1a\u8ba9\u81ea\u5df1\u53d8\u5f97\u66f4\u4f20\u7edf\uff0c\u4ee5\u6269\u5927\u5bf9\u4f34\u4fa3\u7684\u770b\u6cd5\uff0c\u5373\u4f7f\u8fd9\u4e0d\u662f\u4f60\u53ea\u4e3a\u81ea\u5df1\u800c\u751f\u6d3b\u65f6\u4f1a\u505a\u7684\u4e8b\u60c5\uff1f TL;DR\uff1a\u5728\u4e00\u6bb5\u5feb\u4e50\u3001\u975e\u5e38\u5065\u5eb7\u7684\u957f\u671f\u5173\u7cfb\u548c\u4e00\u6bb5\u65f6\u95f4\u7684\u4f11\u606f\u4e4b\u540e\uff0c\u6211\u91cd\u65b0\u8fdb\u5165\u7ea6\u4f1a\u573a\u666f\u3002\u6211\u89c9\u5f97\u6211\u771f\u7684\u5f88\u4e86\u89e3\u81ea\u5df1\uff0c\u5bf9\u81ea\u5df1\u5f88\u6ee1\u610f\uff0c\u5e76\u4e14\u77e5\u9053\u6211\u60f3\u8981\u4e00\u4e2a\u4f34\u4fa3\u505a\u4ec0\u4e48\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u7ea6\u4f1a\u4f1a\u66f4\u5bb9\u6613\u3002\u4f46\u8fd9\u4f3c\u4e4e\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff0c\u56e0\u4e3a\u6211\u770b\u7740\u7537\u4eba\u548c\u90a3\u4e9b\u4f3c\u4e4e\u81ea\u5df1\u5e76\u4e0d\u5feb\u4e50\u7684\u5973\u4eba\u7ed3\u5bf9\uff0c\u5e76\u544a\u8bc9\u6211\u8bf8\u5982\u201c\u6211\u94a6\u4f69\u4f60\uff0c\u4f46\u4f60\u4e0d\u9700\u8981\u6211\u201d\u6216\u201c\u4f60\u7684\u751f\u6d3b\u201d\u4e4b\u7c7b\u7684\u8bdd\u3002\u91cc\u9762\u6ca1\u6709\u5176\u4ed6\u4eba\u7684\u7a7a\u95f4\u3002\u201d\u5176\u4ed6\u4eba\u5b9e\u9645\u4e0a\u5982\u4f55\u5e73\u8861\u8fc7\u4ed6\u4eec\u60f3\u8981\u7684\u5355\u8eab\u751f\u6d3b\uff08\u4f8b\u5982\uff0c\u5fc5\u987b\u81ea\u7ed9\u81ea\u8db3\uff0c\u56e0\u4e3a\u4f60\u5fc5\u987b\u8fd9\u6837\u505a\uff09\u548c\u4e3a\u4f34\u4fa3\u7559\u51fa\u7a7a\u95f4\uff1f\u6dfb\u52a0\uff0c\u622a\u81f3 8/4\u30018/7 \u7f16\u8f91\uff1a\u54c7\uff01\u65e0\u6cd5\u76f8\u4fe1\u6709\u7528\u548c\u652f\u6301\u7684\u8bc4\u8bba\u3002\u6211\u73b0\u5728\u5df2\u7ecf\u9605\u8bfb\u4e86\u6240\u6709\u8fd9\u4e9b\u3002\u611f\u8c22\u6240\u6709\u5728\u7ebf\u7a0b\u88ab\u9501\u5b9a\u540e\u53d1\u8868\u8bc4\u8bba\u6216\u7ed9\u6211\u53d1\u6d88\u606f\u7684\u4eba\uff08\u4ee5\u53ca\u5956\u52b1\uff0c\u5929\u54ea\uff01\uff09\u3002\u6211\u5e0c\u671b\u5176\u4ed6\u4eba\u53d1\u73b0\u8fd9\u4e2a\u7ebf\u7a0b\u548c\u6211\u4e00\u6837\u6709\u7528\u3002\u6211\u5e0c\u671b\u6211\u6709\u65f6\u95f4\u5728\u7ebf\u7a0b\u88ab\u9501\u5b9a\u4e4b\u524d\u8fdb\u884c\u66f4\u591a\u4e92\u52a8\uff0c\u5355\u72ec\u56de\u590d\u3002\u77e5\u9053\u6211\u5e76\u4e0d\u5b64\u5355\uff0c\u8fd9\u611f\u89c9\u5f88\u68d2\u3002\u6211\u4e5f\u5f88\u6b23\u8d4f\u7537\u58eb\u5766\u7387\u5730\u56de\u5e94\u60f3\u8981\u611f\u5230\u88ab\u9700\u8981/\u9700\u8981/\u4f18\u5148\u8003\u8651\u7684\u53cd\u5e94\u3002\u6bcf\u4e2a\u4eba\u5bf9\u60c5\u611f\u8106\u5f31\u6027/\u8054\u7cfb\u7684\u8bc4\u8bba\u90fd\u975e\u5e38\u6709\u5e2e\u52a9\uff1b\u8fd9\u662f\u6211\u77e5\u9053\u6211\u9700\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u6709\u4e00\u5929\u6211\u53ef\u80fd\u4f1a\u5728\u6211\u6709\u65f6\u95f4\u8fdb\u4e00\u6b65\u6d88\u5316\u8fd9\u91cc\u6240\u6709\u6709\u7528\u7684\u8bc4\u8bba\u540e\u53d1\u8868\u4e00\u7bc7\u6587\u7ae0\u3002\u6709\u4e9b\u4eba\u8bc4\u8bba\u8bf4\u6211\u5217\u51fa\u4e86\u4e00\u5806\u4e0d\u4f1a\u4f7f\u6211\u6210\u4e3a\u5e16\u5b50\u4e2d\u6709\u4ef7\u503c\u7684\u5408\u4f5c\u4f19\u4f34\u7684\u4e1c\u897f\uff0c\u662f\u7684 - \u8fd9\u5c31\u662f\u5e16\u5b50\u7684\u5168\u90e8\u610f\u4e49\uff01\u6307\u51fa\u5f53\u4f60\u72ec\u81ea\u4e00\u4eba\u65f6\u5f88\u91cd\u8981\u7684\u4e8b\u60c5\uff08\u517b\u6d3b\u81ea\u5df1\u3001\u62e5\u6709\u793e\u533a\u3001\u72ec\u81ea\u5bfb\u627e\u5feb\u4e50\uff09\u4e0e\u6f5c\u5728\u5408\u4f5c\u4f19\u4f34\u6240\u770b\u91cd\u7684\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\uff08\u5c24\u5176\u662f\uff0c\u4e5f\u8bb8\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5973\u6027\u5bfb\u627e\u7537\u6027\uff09\uff01\u6700\u540e\uff0c\u8001\u5b9e\u8bf4\uff0c\u6211\u5e76\u4e0d\u662f\u8981\u8d2c\u4f4e\u5e16\u5b50\u4e2d\u7684\u67d0\u4e00\u884c\uff0c\u6211\u628a\u5b83\u7559\u5728\u8fd9\u91cc\uff0c\u6240\u4ee5\u8bc4\u8bba\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u6211\u4e0d\u60f3\u9690\u7792\u5b83\u3002\u6211\u7684\u8bb8\u591a\u6700\u4eb2\u5bc6\u7684\u670b\u53cb\u2014\u2014\u5176\u4e2d\u5927\u591a\u6570\u90fd\u53d7\u8fc7\u540c\u7b49\u6559\u80b2\u3001\u6210\u529f\u548c\u9ad8\u6536\u5165\u8005\u2014\u2014\u662f\u6211\u63cf\u8ff0\u7684\u90a3\u4e9b\u4e0d\u63a5\u53d7\u5355\u8eab\u751f\u6d3b\u7684\u5973\u6027\uff0c\u6211\u4ece\u672a\u8bf4\u8fc7\uff08\u5f53\u7136\u4e5f\u4e0d\u662f\u6697\u793a\uff09\u5973\u6027\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5ea6\u8fc7\u4ed6\u4eec\u7684\u7a7a\u95f2\u65f6\u95f4\u5e76\u4e0d\u806a\u660e\u6216\u5728\u4e13\u4e1a\u4e0a\u53d6\u5f97\u6210\u529f\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u6211\u8ba4\u8bc6\u7684\u8bb8\u591a\u76ee\u524d\u5904\u4e8e\u604b\u7231\u5173\u7cfb\u4e2d\u7684\u5973\u6027\u5e76\u6ca1\u6709\u4f18\u5148\u8003\u8651\u521b\u9020\u5979\u4eec\u81ea\u5df1\u6ee1\u610f\u7684\u7f8e\u597d\u751f\u6d3b\uff0c\u800c\u662f\u516c\u5f00\u8868\u793a\u5979\u4eec\u6b63\u5728\u7b49\u5f85\u4f34\u4fa3\u505a x\u3001y \u6216 z\u5e76\u5728\u6b64\u671f\u95f4\u82b1\u65f6\u95f4\u548c\u4ed6\u4eec\u7684\u7535\u89c6/\u5ba0\u7269\u4e00\u8d77\u51fa\u53bb\u73a9\u3002\u610f\u8bc6\u5230\u57fa\u4e8e\u67d0\u4eba\u9009\u62e9\u7684\u7535\u89c6\u53f0\u6216\u5065\u8eab\u8ba1\u5212\u7684\u5e7f\u6cdb\u6982\u62ec\u6ca1\u6709\u5e2e\u52a9\uff0c\u6211\u60f3\u76f4\u63a5\u5411\u6211\u5192\u72af\u7684\u6bcf\u4e2a\u4eba\u9053\u6b49\u3002", "note_en": "Does anyone else feel like the \u201clive your best single life\u201d and \u201cbe happy on your own\u201d advice backfires, especially for single women in their 30s?\n Me: 37 female professional in a big city. A few fancy degrees. A stable, high-earning job. Own my own condo. Interesting/quirky hobbies (mountaineering, cycling, photography). Travel a lot and to weird places, often alone (did Peace Corps after college, so I\u2019m very comfortable being solo in foreign countries). Have friends from different stages of life. Did several years of therapy and so I like to think I have at least have some self-awareness. (Because people will ask, I do not have trouble matching/getting dates, so I don\u2019t think my appearance is the sole reason I\u2019m still single. And I use recent pictures.)\n I have pretty much the life I always wanted, except for a partner. And I\u2019ve worked hard at building it. But I feel that the more successful and interesting my life is, the less men seem interested in me as a long-term partner. And the fewer men I meet could add to my life in a meaningful way.\n But just because I\u2019m relatively happy alone and do not \u201cneed\u201d a partner / go and do everything I want to do without waiting for someone to go with me (travel, buying a house, etc.), it doesn\u2019t mean I don\u2019t want to fall in love any less than the next person. I\u2019d love to have someone to share the ups and downs with; to explore the world with; to be a teammate and build a life with; oh and fulfilling sex on a regular basis is pretty darn nice too.\n However, it seems that the more I \u201cwork on myself\u201d to make my current life great, the more it estranges me from potential partners. I\u2019ve had men tell me that I\u2019m easy to walk away from because I don\u2019t \u201cneed\u201d them. I\u2019ve had men say that my life feels too complete/full to have a partner \u2014 like there\u2019s no place for them in it.\n But to me, needing someone and waiting on someone are just signs that you aren\u2019t living a happy/healthy single life. I feel like all the things I do to make myself happy, healthy, and successful on my own (get that promotion at work; go to Mexico to climb some volcanos; visit my college friends who live in different cities; sign up for a 100-mile bike ride) are actively hindering my dating prospects because Joe or Sam or Pablo doesn\u2019t value those things at all. Instead, I see the men that say that they want women like me actually picking the ones that spend more time on their appearance (hair, markup, fashion) and more time watching Bravo, doing yoga, cuddling with their goldendoodle. These women are waiting on a guy to travel or do anything by themselves, and are often honest about that.\n (And before people tell me I will meet someone when I least expect it if I just live my life: Well I do that but I haven\u2019t. I don\u2019t often met single, attractive men through travel or hobbies. Most men I come across are partnered. The single ones end up thinking of me as an adrenaline buddy and going for the less adventurous women I describe above.)\n Women: Does anyone else feel like this? Men: Is there truth to the fact that if a woman seems busy/content, like she doesn\u2019t need you, you\u2019ll move on?\n How do you live your best single life (which inherently involves meeting your own needs, keeping yourself busy and fulfilled) and still leave \u201cspace\u201d for a partner? Any practical tips or advice based on experience would be helpful.\n Any other words of wisdom/encouragement? At what point do you give up dating/looking? At what point do you make yourself more conventional to widen your shot at a partner, even if it\u2019s not what you\u2019d do if you were living your life just for yourself?\n TL;DR: I reentered the dating scene after a happy, pretty healthy long-term relationship and some time off. And I felt like I really know myself, am content with myself, and know what I want in a partner so I thought dating would be easier. But it\u2019s just seemed to make it more difficult as I watch men pair with women who don\u2019t seem to be as happy on their own and tell me things like \u201cI admire you, but you don\u2019t need me\u201d or \u201cyour life doesn\u2019t have space for anyone else in it.\u201d How do other people practically balance living the single life they would like to (eg, necessarily being self-sufficient because you have to be) and leaving space for a partner?\n  Addition, edited as of 8/4, 8/7: Wow! Cannot believe the helpful and supportive comments. I\u2019ve now read all of them. Thank you to everyone who\u2019s commented or who messaged me after the thread was locked (and for the awards, gosh!). I hope others find this thread as useful as I have. I wish I\u2019d had the time to interact more, respond individually, before the thread was locked.\n It feels amazing know I\u2019m not alone. I also appreciate the candidness of the men\u2019s responses about wanting to feel wanted/needed/prioritized. And everyone\u2019s comments on emotional vulnerability/connection were incredibly helpful; it\u2019s something I know I need to work on and I might do a post on that one day after I have time to further digest all the helpful comments here. Some people commented that I\u2019m listing a bunch of things that don\u2019t make me a valuable partner in the post, and well yes\u2014that was the whole point of the post! To point out that the things that are important when you\u2019re on your own (supporting yourself, having community, finding joy on your own) aren\u2019t really the same things that are valued by potential partners (especially, perhaps, in the case of women seeking men)!!\n Finally, I honestly didn\u2019t mean to be degrading with one of the lines in the post, which I\u2019ve left in here so the comments make sense and because I don\u2019t want to hide from it. Many of my closest friends \u2014 most of whom are equally educated, successful, and high earners \u2014 are the women I described as not embracing their single life and I didn\u2019t ever say (and certainly didn\u2019t mean to imply) that women that spend their free time differently aren\u2019t smart or professionally successful. The point I intended was that many of the women I know that are currently in relationships didn\u2019t prioritize creating an awesome life they were happy with on their own and instead openly said they were waiting for a partner to do x, y, or z and just spent time hanging out with their TV/pet in the meantime. Realize that broad generalizations based on someone\u2019s choice of tv station or fitness routine aren\u2019t helpful, and wanted to directly apologize to everyone I offended.", "posttime": "2021-08-08 09:48:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5355\u8eab\u751f\u6d3b,single,\u7ea6\u4f1a", "title": "\u4ec0\u4e48\u65f6\u5019\u8fc7\u201c\u6700\u597d\u7684\u5355\u8eab\u751f\u6d3b\u201d\u4f1a\u9002\u5f97\u5176\u53cd\uff1f", "title_en": "When does living your \u201cbest single life\u201d backfire?", "transed": 1, "url": "https://www.reddit.com/r/datingoverthirty/comments/ox15tw/when_does_living_your_best_single_life_backfire/", "via": "", "real_tags": ["\u5355\u8eab\u751f\u6d3b", "single", "\u7ea6\u4f1a"]}, {"category": "", "categoryclass": "", "imagename": "51aed8c1ce77e218e5d01841e519d78a.jpg", "infoid": 1072047, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea2007\u5e74\u4ee5\u6765\uff0c\u4e9a\u9a6c\u900a\u5df2\u552e\u51fa\u6570\u5343\u4e07\u53f0Kindle\uff0c\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\u4f46\u8fd9\u4e5f\u610f\u5473\u7740\u6570\u4ee5\u5343\u4e07\u8ba1\u7684\u4eba\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8fd9\u4e9b Kindle \u4e2d\u7684\u8f6f\u4ef6\u6f0f\u6d1e\u800c\u88ab\u9ed1\u5ba2\u5165\u4fb5\u3002\u4ed6\u4eec\u7684\u8bbe\u5907\u53ef\u80fd\u4f1a\u53d8\u6210\u673a\u5668\u4eba\uff0c\u6216\u8005\u4ed6\u4eec\u7684\u79c1\u4eba\u672c\u5730\u7f51\u7edc\u53ef\u80fd\u4f1a\u53d7\u5230\u635f\u5bb3\uff0c\u751a\u81f3\u4ed6\u4eec\u7684\u8d26\u5355\u5e10\u6237\u4e2d\u7684\u4fe1\u606f\u4e5f\u53ef\u80fd\u88ab\u76d7\u3002\u8fdc\u7a0b\u8bbf\u95ee\u7528\u6237 Kindle \u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u901a\u8fc7\u7535\u5b50\u4e66\u3002\u6076\u610f\u56fe\u4e66\u53ef\u4ee5\u901a\u8fc7\u201c\u81ea\u52a9\u51fa\u7248\u201d\u670d\u52a1\u53d1\u5e03\u5e76\u5728\u4efb\u4f55\u865a\u62df\u56fe\u4e66\u9986\uff08\u5305\u62ec Kindle \u5546\u5e97\uff09\u4e2d\u514d\u8d39\u8bbf\u95ee\uff0c\u6216\u901a\u8fc7\u4e9a\u9a6c\u900a\u201c\u53d1\u9001\u5230 Kindle\u201d\u670d\u52a1\u76f4\u63a5\u53d1\u9001\u5230\u6700\u7ec8\u7528\u6237\u8bbe\u5907\u3002\u867d\u7136\u60a8\u53ef\u80fd\u5bf9\u67d0\u672c\u4e66\u7684\u5199\u4f5c\u4e0d\u6ee1\u610f\uff0c\u4f46\u6ca1\u6709\u4eba\u5e0c\u671b\u4e0b\u8f7d\u6076\u610f\u7684\u3002\u6ca1\u6709\u516c\u5f00\u8fd9\u6837\u7684\u573a\u666f\u3002\u9632\u75c5\u6bd2\u8f6f\u4ef6\u6ca1\u6709\u7535\u5b50\u4e66\u7684\u7b7e\u540d\u3002\u4f46\u662f\u2026\u2026\u6211\u4eec\u6210\u529f\u5236\u4f5c\u4e86\u4e00\u672c\u6076\u610f\u7684\u4e66\u3002\u5982\u679c\u4f60\u5728 Kindle \u8bbe\u5907\u4e0a\u6253\u5f00\u8fd9\u672c\u4e66\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u6bb5\u9690\u85cf\u7684\u4ee3\u7801\u4ee5 root \u6743\u9650\u6267\u884c\u3002\u4ece\u8fd9\u4e00\u523b\u8d77\uff0c\u60a8\u53ef\u4ee5\u5047\u8bbe\u60a8\u5df2\u7ecf\u5931\u53bb\u4e86\u5bf9\u7535\u5b50\u9605\u8bfb\u5668\u7684\u63a7\u5236\u3002\u6211\u4eec\u53d1\u73b0\u7684\u95ee\u9898\u5df2\u4e8e 2021 \u5e74 2 \u6708\u62a5\u544a\u7ed9\u4e9a\u9a6c\u900a\uff0c\u5e76\u4e8e 2021 \u5e74 4 \u6708\u5728 5.13.5 \u7248\u672c\u7684 Kindle \u56fa\u4ef6\u4e2d\u4fee\u590d\u3002\u4fee\u8865\u540e\u7684\u56fa\u4ef6\u5c06\u81ea\u52a8\u5b89\u88c5\u5728\u8fde\u63a5\u5230\u4e92\u8054\u7f51\u7684\u8bbe\u5907\u4e0a\u3002\u57fa\u672c\u4e0a\uff0cKindle OS \u662f\u4e00\u4e2a Linux \u5185\u6838\uff0c\u5176\u4e2d\u5305\u542b\u4e3b\u8981\u7531 busybox \u63d0\u4f9b\u7684\u4e00\u7ec4\u672c\u673a\u7a0b\u5e8f\u3001\u7528\u4e8e\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684 LIPC \u5b50\u7cfb\u7edf\u4ee5\u53ca\u7528\u4e8e\u7528\u6237\u754c\u9762 (UI) \u548c\u670d\u52a1\u7684 Java \u548c Webkit \u5b50\u7cfb\u7edf\u3002 LIPC \u662f\u4e00\u4e2a\u57fa\u4e8e D-Bus \u7684 IPC \u5e93\u53ca\u5176\u5c06\u6240\u6709 Kindle \u7ec4\u4ef6\u94fe\u63a5\u5728\u4e00\u8d77\u7684\u73af\u5883\u3002 Kindle \u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u6b64\u5e93\u6765\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u3001\u516c\u5f00\u5e94\u7528\u7a0b\u5e8f\u5c5e\u6027/\u8bbe\u7f6e\u3001\u4fa6\u542c\u6216\u53d1\u51fa\u4e8b\u4ef6\u3002\u4f8b\u5982\uff0c\u7528 HTML \u548c Javascript \u7f16\u5199\u7684 Webkit \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 LIPC \u4e0e Java \u670d\u52a1\u6216\u672c\u673a\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\u3002\u5927\u591a\u6570 UI \u662f\u7528 Java \u7f16\u5199\u7684\u3002 Java \u5b50\u7cfb\u7edf\uff08\u6846\u67b6\uff09\u4e3a\u670d\u52a1\u548c UI\uff08\u6240\u8c13\u7684\u5c0f\u518c\u5b50\uff09\u63d0\u4f9b LIPC \u5904\u7406\u7a0b\u5e8f\u3002\u6bd4\u5982 Kindle \u4e3b\u9875 UI \u7a97\u53e3\u5c31\u662f\u6846\u67b6\u7ba1\u7406\u7684 com.lab126.booklet.home \u5c0f\u518c\u5b50\u3002 Webkit \u5b50\u7cfb\u7edf\uff08HTML5 \u548c Javascript\uff09\u662f\u53e6\u4e00\u79cd\u521b\u5efa UI \u5143\u7d20\u7684\u65b9\u6cd5\u3002\u5185\u7f6e\u7684\u5b9e\u9a8c\u6d4f\u89c8\u5668\u662f Webkit \u5b50\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002 Pillow \u662f\u4e00\u4e2a\u5141\u8bb8\u4ece Javascript \u8bbf\u95ee LIPC \u7684\u5e93\u3002\nKindle \u7535\u5b50\u9605\u8bfb\u5668\u56fa\u4ef6\u7684\u6700\u65b0\u7248\u672c\uff085.13.4\uff09\u5df2\u5728\u4e9a\u9a6c\u900a\u5b98\u65b9\u7f51\u7ad9\u516c\u5f00\u4e0b\u8f7d\u3002\u6e90\u4ee3\u7801\u4e5f\u90e8\u5206\u53ef\u7528\u3002\u4f46\u662f\u6e90\u4ee3\u7801\u5bf9\u6211\u4eec\u7684\u7814\u7a76\u6ca1\u6709\u5e2e\u52a9\uff0c\u56e0\u4e3a\u5b83\u4e3b\u8981\u7531\u7b2c\u4e09\u65b9\u5f00\u6e90\u9879\u76ee\u7ec4\u6210\uff0c\u5305\u62ec Linux \u5185\u6838\uff0c\u5e76\u5728\u4e9a\u9a6c\u900a\u4e0a\u8fdb\u884c\u4e86\u5c0f\u5e45\u8c03\u6574\u3002\u8d1f\u8d23\u89e3\u6790\u548c\u5448\u73b0\u7535\u5b50\u4e66\u7684\u7ec4\u4ef6\u6ca1\u6709\u6e90\u4ee3\u7801\u3002\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u76ee\u6807\u662f\u53d1\u73b0\u7535\u5b50\u4e66\u89e3\u6790\u6846\u67b6\u4e2d\u7684\u6f0f\u6d1e\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u6709\u8db3\u591f\u7684\u56fa\u4ef6\u6587\u4ef6\uff0c\u4e0d\u9700\u8981\u771f\u6b63\u7684 Kindle \u8bbe\u5907\u3002\u8ba9\u6211\u4eec\u770b\u770b\u8d1f\u8d23\u5904\u7406\u7535\u5b50\u4e66\u7684\u7ec4\u4ef6\u3002 /mnt/us/documents \u662f\u5e38\u89c4\u7535\u5b50\u4e66\u76ee\u5f55\uff0c\u5f53\u60a8\u5728 Kindle \u8bbe\u5907\u4e0a\u4e0b\u8f7d\u65b0\u4e66\u65f6\u3002\u8c01\u5c06\u9996\u5148\u5904\u7406\u6587\u4ef6\uff1f /usr/bin/scanner \u670d\u52a1\u4f1a\u5b9a\u671f\u626b\u63cf\u6587\u6863\u76ee\u5f55\u4e2d\u7684\u65b0\u6587\u4ef6\uff0c\u5e76\u6839\u636e\u6587\u4ef6\u6269\u5c55\u540d\u4f7f\u7528\u201c\u63d0\u53d6\u5668\u201d\u5e93\u4e4b\u4e00\u4ece\u7535\u5b50\u4e66\u4e2d\u63d0\u53d6\u5143\u6570\u636e\u3002\u6240\u6709\u63d0\u53d6\u5668\u90fd\u5217\u5728 /var/local/appreg.db sqlite \u6570\u636e\u5e93\u4e2d\u3002\u6bcf\u79cd\u652f\u6301\u7684 Kindle \u7535\u5b50\u4e66\u683c\u5f0f\u90fd\u6709\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\uff1a\u5982\u679c\u626b\u63cf\u4eea\u4e0e\u6587\u4ef6\u6269\u5c55\u540d\u4e0d\u5339\u914d\u6216\u51fa\u73b0\u89e3\u6790\u9519\u8bef\uff0c\u5219\u4e0d\u4f1a\u5411\u7528\u6237\u663e\u793a\u7535\u5b50\u4e66\u3002\u6211\u4eec\u6ca1\u6709\u6df1\u5165\u7814\u7a76\u626b\u63cf\u8fc7\u7a0b\uff0c\u56e0\u4e3a\u63d0\u53d6\u5143\u6570\u636e\u7684\u64cd\u4f5c\u8fc7\u4e8e\u7b80\u5355\uff0c\u65e0\u6cd5\u63d0\u793a\u89e3\u6790\u9519\u8bef\u3002\u626b\u63cf\u4eea\u5b8c\u6210\u5de5\u4f5c\u540e\uff0c\u4e3b\u5c4f\u5e55\u4e0a\u4f1a\u663e\u793a\u65b0\u4e66\u7684\u7f29\u7565\u56fe\u3002\u4ece\u8fd9\u4e00\u523b\u8d77\uff0cJava \u6846\u67b6\u8d1f\u8d23\u5728\u60a8\u5355\u51fb\u65f6\u6253\u5f00\u8fd9\u672c\u4e66\u3002\u53ef\u4ee5\u5728 /opt/amazon/ebook/lib \u56fa\u4ef6\u76ee\u5f55\u4e2d\u627e\u5230\u5b9e\u73b0\u6253\u5f00\u548c\u5448\u73b0\u7535\u5b50\u4e66\u903b\u8f91\u7684 Java \u5b58\u6863 (JAR) \u6587\u4ef6\u3002\u4e3b\u8981\u662f MobiReader-impl.jar\u3001YJReader-impl.jar\u3001PDFReader-impl.jar\u3001HTMLReader-impl.jar \u548c TopazReader-impl.jar \u6587\u4ef6\u3002\u4e3a\u4e86\u8fdb\u4e00\u6b65\u7814\u7a76\uff0c\u6211\u4eec\u51b3\u5b9a\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728 PDF \u6587\u4ef6\u683c\u5f0f\u4e0a\uff0c\u56e0\u4e3a\u5b83\u662f\u6700\u5e38\u89c1\u4f46\u540c\u65f6\u4e5f\u662f\u6700\u590d\u6742\u7684\u683c\u5f0f\u4e4b\u4e00\u3002\u6211\u4eec\u6765\u770b\u770bPDFReader-impl.jar\uff08com.amazon.ebook.booklet.pdfreader.impl.PDFModel\u7c7b\uff09\u4e2dPDF\u4e66\u7c4d\u6253\u5f00\u51fd\u6570\u7684\u5b9e\u73b0\uff1a\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ea\u662f\u5bf9nativeOpenPDFDocument \u539f\u751f\u51fd\u6570\uff0c\u5176\u4e3b\u4f53\u4f4d\u4e8e /usr/java/lib/libPDFClientJNI.so \u5e93\u4e2d\u3002\nnativeOpenPDFDocument\u51fd\u6570\u542f\u52a8PDF\u670d\u52a1\u5668/usr/bin/pdfreader\uff0cfork\u8fdb\u7a0b\uff0c\u5e76\u901a\u8fc7\u5f00\u6e90HTTP\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\u5e93/usr/lib/libsoup-2.4.so\u540c\u6b65\u5411\u5176\u53d1\u9001\u201copenBook\u201d\u6d88\u606f\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u4f1a\u5411 https://127.0.0.1:7667/command/openBook \u53d1\u9001 GET \u8bf7\u6c42\u3002 pdfreader \u670d\u52a1\u5668\u662f\u6211\u4eec\u7814\u7a76\u7684\u4e3b\u8981\u76ee\u6807\u3002\u6700\u7ec8\uff0c\u6211\u4eec\u5c06\u5728\u6b64\u8fc7\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u6211\u4eec\u7684\u6709\u6548\u8d1f\u8f7d\u3002\u5728\u542f\u52a8\u65f6\uff0cpdfreader \u670d\u52a1\u5668\u901a\u8fc7 setuid \u8c03\u7528\u5c06\u81ea\u8eab\u964d\u4f4e\u5230\u201c\u6846\u67b6\u201d\u7528\u6237\uff08uid 9000\uff09\u7684\u6743\u9650\u3002\u7136\u540e\u5b83\u542f\u52a8\u4e00\u4e2a\u4fa6\u542c\u7aef\u53e3 7667 \u7684\u6c64\u670d\u52a1\u5668\uff0c\u4e3a\u9ad8\u7ea7 PDF \u64cd\u4f5c\u5b9a\u4e49\u4e86\u51e0\u5341\u4e2a\u5904\u7406\u7a0b\u5e8f\uff0c\u5305\u62ec\u6211\u4eec\u611f\u5174\u8da3\u7684\u201copenBook\u201d\u548c\u201cstartRendering\u201d\u3002 /usr/lib/libFoxitWrapper.so \u5e93\uff0c\u7f16\u5199\u7531 Amazon \u63d0\u4f9b\uff0c\u63d0\u4f9b\u7528\u4e8e\u5904\u7406 PDF \u6587\u4ef6\u7684 API\u3002 pdfreader \u5728\u5b83\u7684\u6c64\u5904\u7406\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u5e93\u3002\u4f8b\u5982\uff0c\u201copenBook\u201d\u5904\u7406\u7a0b\u5e8f\u5982\u4e0b\u6240\u793a\uff1a renderPageFromLibrary(uint32_t handle, uint32_t page, uint32_t width, uint32_t height, float scale, uint8_t Landscape, uint8_t* out) \u2013 \u6e32\u67d3 PDF \u9875\u9762\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u56fe\u50cf\u3002\u5f53\u88ab\u8c03\u7528\u65f6\uff0c\u6d41\u8fc7\u6ee4\u5668\u5f00\u59cb\u88ab\u89e3\u6790\u3002\u987e\u540d\u601d\u4e49\uff0clibFoxitWrapper.so \u662f\u7531 /usr/lib/libfpdfemb.so \u5e93\u5728 Kindle \u8bbe\u5907\u4e0a\u63d0\u4f9b\u7684\u6d41\u884c Foxit PDF SDK \u7684\u5305\u88c5\u5668\u3002 libfpdfemb.so \u662f Foxit Software Inc. \u4e13\u6709\u7684\u95ed\u6e90\u5e93\u3002 Foxit Embedded PDF SDK \u624b\u518c\u53ef\u4ee5\u5728 Internet \u4e0a\u627e\u5230\u3002\u6211\u4eec\u8bd5\u56fe\u4ece libFoxitWrapper.so \u5e93\u4e2d\u5bf9\u4e0a\u8ff0\u51fd\u6570\u8fdb\u884c\u6a21\u7cca\u6d4b\u8bd5\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u6ca1\u6709\u5e26\u6765\u4efb\u4f55\u7ed3\u679c\uff0c\u9664\u4e86\u4e00\u7ec4\u7a7a\u6307\u9488\u5f02\u5e38\u3002\u4e00\u79cd\u66f4\u6709\u524d\u666f\u7684 PDF \u683c\u5f0f\u65b9\u6cd5\u662f\u9009\u62e9\u4e00\u4e2a\u7279\u5b9a\u5bf9\u8c61\u6216\u6d41\u8fc7\u6ee4\u5668\u4f5c\u4e3a\u6d4b\u8bd5\u76ee\u6807\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u51b3\u5b9a\u5bf9 libfpdfemb.so \u5e93\u8fdb\u884c\u6a21\u7cca\u6d4b\u8bd5\u3002\u4f46\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u7ecf\u5178\u7684\u6a21\u7cca\u6d4b\u8bd5\u6a21\u578b\u3002\u6a21\u7cca\u4efb\u4f55\u95ed\u6e90\u5e93\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u7f16\u5199\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5c06\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5e76\u8c03\u7528\u76ee\u6807\u51fd\u6570\u3002\u8fd9\u4e2a\u52a0\u8f7d\u5668\u5c06\u4e00\u4e2a\u5e26\u6709\u6392\u5217\u6570\u636e\u7684\u6587\u4ef6\u4f5c\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u8bfb\u5165\u5b83\uff0c\u5e76\u5c06\u6570\u636e\u4f20\u9012\u7ed9\u88ab\u6d4b\u51fd\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u52a0\u8f7d\u5668\u88ab\u68c0\u6d4b\u6216\u5728\u6a21\u62df\u5668\u4e0a\u8fd0\u884c\uff0c\u4ee5\u6536\u96c6\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u4ee3\u7801\u8986\u76d6\u77e9\u9635\u3002\u7b2c\u4e09\u65b9\u6a21\u7cca\u5668/\u7f6e\u6362\u5668\u4e4b\u4e00\u7528\u4e8e\u6839\u636e\u8986\u76d6\u77e9\u9635\u751f\u6210\u65b0\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002\u4e3a\u4e86\u5bf9 libfpdfemb.so \u5e93\u8fdb\u884c\u6a21\u7cca\u6d4b\u8bd5\uff0c\u6211\u4eec\u9009\u62e9\u4e86 American Fuzzy Lop (AFL) \u548c Quick emulator (Qemu) \u7684\u7ec4\u5408\u3002\u4e3b\u673a\u662fUbuntu\u3002\u6211\u4eec\u8fd8\u9700\u8981\u6ce8\u610f\u4e00\u4ef6\u4e8b\u3002 Kindle \u8bbe\u5907\u57fa\u4e8e ARM \u5904\u7406\u5668\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u52a0\u8f7d\u5668\u662f\u4f7f\u7528 arm-linux-gnueabi-g++ \u7f16\u8bd1\u7684\u3002 Qemu \u5f88\u5bb9\u6613\u5728 x86 \u4e0a\u6a21\u62df ARM\u3002\n\u5728 libfpdfemb.so \u5e93\u4e2d\u5bf9\u5355\u8bcd\u201cCPDF\u201d\u548c\u201cCodec\u201d\u7684\u7b80\u5355\u641c\u7d22\u4f7f\u6211\u4eec\u80fd\u591f\u627e\u5230\u6240\u6709\u53ef\u80fd\u7684\u6d41\u8fc7\u6ee4\u5668/\u7f16\u89e3\u7801\u5668\uff1aPredictor\u3001Decrypt\u3001Flate\u3001Fax\u3001Lzw\u3001AsciiHex\u3001RunLen\u3001Ascii85\u3001Jpeg\u3001Jbig2\u548cJP\u3002\u8ba9\u6211\u4eec\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u770b\u770b\u5176\u4e2d\u7684\u4e00\u4e2a\u3002 \ufffc\u5982\u60a8\u6240\u89c1\uff0c\u58f0\u660e\u4e86\u5e26\u6709 jbig2 \u8fc7\u6ee4\u5668\u7684\u56fe\u50cf Im1\u3002 Jbig2 \u662f\u4e00\u79cd\u7528\u4e8e\u53cc\u5c42\u56fe\u50cf\u7684\u56fe\u50cf\u538b\u7f29\u6807\u51c6\u3002 jbig2 \u7f16\u7801\u5668\u5c06\u8f93\u5165\u9875\u9762\u5206\u5272\u4e3a\u591a\u4e2a\u533a\u57df\uff1a\u6587\u672c\u3001\u534a\u8272\u8c03\u56fe\u50cf\u3001\u7ec6\u5316\u7b49\u3002\u8fd9\u4e9b\u533a\u57df\u4fdd\u5b58\u5728 JBIG2Globals \u6d41\u4e2d\u3002\u6e32\u67d3 PDF \u9875\u9762\u65f6\uff0clibfpdfemb.so \u4f1a\u89e3\u6790 JBIG2Globals \u6d41\u5e76\u91cd\u5efa\u56fe\u50cf\u3002\u5728 libfpdfemb.so \u5e93\u4e2d\u5b9a\u4e49\u7684 Jbig2Module \u5bf9\u8c61\u8d1f\u8d23\u89e3\u7801 jbig2 \u538b\u7f29\u56fe\u50cf\u3002\u5728\u5176\u4ed6\u8fc7\u6ee4\u5668\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 StartDecode \u51fd\u6570\u4f5c\u4e3a\u5165\u53e3\u70b9\u5bf9 jbig2 \u89e3\u7801\u7b97\u6cd5\u8fdb\u884c\u4e86\u6a21\u7cca\u6d4b\u8bd5\uff0c\u5e76\u6392\u5217\u4e86\u56fe\u50cf\u5927\u5c0f\uff08\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u53c2\u6570\uff09\u3001\u56fe\u50cf\u6d41\uff08src_buf\u3001src_size\uff09\u548c JBIG2Globals \u6d41\uff08global_data\u3001global_size\uff09\u3002\u60a8\u53ef\u4ee5\u5728\u4e0b\u65b9\u770b\u5230\u6211\u4eec\u7528\u6765\u8c03\u7528 StartDecode \u7684\u5de5\u5177\u3002\u57fa\u53d8\u91cf\u662f libfpdfemb.so \u5e93\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002\u7ed3\u679c\uff0c\u6211\u4eec\u5728 JBIG2Globals \u89e3\u7801\u7b97\u6cd5\u4e2d\u53d1\u73b0\u4e86\u4e00\u4e2a\u6709\u4ef7\u503c\u7684\u5806\u6ea2\u51fa\u6f0f\u6d1e\u3002\u56fe\u50cf\u4fe1\u606f\u533a\u57df\uff08\u524d 0x23 \u5b57\u8282\uff09\u3002\u56fe\u50cf\u5bbd\u5ea6\u4e3a 0x80\uff0c\u9ad8\u5ea6\u4e3a 1\uff0c\u6b65\u5e45\u4e3a 0x10\u3002\u6b65\u5e45\u8ba1\u7b97\u4e3a ((width + 31) &gt;&gt; 5) &lt;&lt; 2. \u201c\u7ec6\u5316\u201d\u533a\u57df\uff08\u4ece 0x23 \u5230 0x4D \u5b57\u8282\uff09\u3002\u8be5\u533a\u57df\u5305\u542b\u7528\u4e8e\u7ec6\u5316\u56fe\u50cf\u7684 jbig2 \u7f16\u7801\u4fe1\u606f\u3002\u7531\u4e8e\u53ea\u80fd\u7ec6\u5316\u56fe\u50cf\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u8fd8\u5305\u542b\u7ec6\u5316\u77e9\u5f62\u7684\u5750\u6807\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u63d0\u4f9b\u7684\u77e9\u5f62\u53c2\u6570\u662f\uff1awidth \u2013 0\uff0cheight \u2013 0x10\uff0cx \u2013 0\uff0cy \u2013 0x40000000\u3002\n\u8fd9\u662f\u4e00\u4e2a\u683c\u5f0f\u9519\u8bef\u7684\u6d41\u3002\u5728\u7ec6\u5316\u533a\u57df\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8d85\u5927\u7684\u77e9\u5f62\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u8be5\u7b97\u6cd5\u5c1d\u8bd5\u5c06\u57fa\u7840\u56fe\u50cf\u6269\u5c55\u5230\u65b0\u7684\u7ef4\u5ea6\u3002\u65b0\u56fe\u50cf\u7684\u9ad8\u5ea6\u91cd\u65b0\u8ba1\u7b97\u4e3a\u9ad8\u5ea6 + y\uff0c\u5e76\u4e3a\u8c03\u6574\u5927\u5c0f\u7684\u56fe\u50cf\u5206\u914d (height + y) * stride \u5806\u5185\u5b58\u3002\u4f46\u662f\u6269\u5c55\u51fd\u6570\u4e2d\u6709\u4e00\u4e2a\u9519\u8bef\u5bfc\u81f4\u5806\u6ea2\u51fa\uff1a\u8ba1\u7b97\u65b0\u56fe\u50cf\u5728\u5185\u5b58\u4e2d\u7684\u5927\u5c0f\u65f6\u9519\u8fc7\u4e86\u5bf9 INT_MAX \u7684\u68c0\u67e5\u3002 32 \u4f4d\u5bc4\u5b58\u5668\u6ea2\u51fa\uff0c\u4e3a\u56fe\u50cf\u5206\u914d 0x100 \u5b57\u8282\u800c\u4e0d\u662f 0x400000100\u3002\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u4f7f\u7528\u7ec6\u5316\u533a\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u201c\u7ec6\u5316\u201d\u56fe\u50cf\u4e4b\u5916\u7684\u6570\u636e\uff0c\u5e76\u83b7\u5f97\u4efb\u610f\u5199\u5165\u539f\u8bed\u3002\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u7ec6\u5316\u533a\u57df\u4ece\u5806\u4e2d\u7684\u56fe\u50cf\u5f00\u59cb\u5904\u4ee5 0x1234 * 0x10 \u5b57\u8282\u7684\u504f\u79fb\u91cf\u8986\u76d6 0x10\uff08\u8de8\u6b65\uff09\u5b57\u8282\u3002\u6570\u636e blob\uff080x71 \u5230 0x79 \u5b57\u8282\uff09\u7531 jbig2 \u7b97\u6cd5\u89e3\u538b\u7f29\uff0c\u7136\u540e\u4e0e\u5806\u5185\u5bb9\u8fdb\u884c\u5f02\u6216\u3002\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4efb\u610f\u6570\u91cf\u7684\u7ec6\u5316\u533a\u57df\u5e76\u8986\u76d6\u5f7c\u6b64\u76f8\u8ddd\u4e00\u5b9a\u8ddd\u79bb\u7684\u90e8\u5206\u5185\u5b58\u3002\u6b64\u5916\uff0c\u5199\u5165\u662f\u901a\u8fc7 XOR \u64cd\u4f5c\u5b8c\u6210\u7684\u8fd9\u4e00\u4e8b\u5b9e\u5141\u8bb8\u6211\u4eec\u4ec5\u4fee\u590d\u5185\u5b58\u7684\u7279\u5b9a\u4f4d\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u5b57\uff0c\u5e76\u5728\u9700\u8981\u65f6\u7ed5\u8fc7 ASLR \u4fdd\u62a4\u3002\u5982\u524d\u6240\u8ff0\uff0clibfpdfemb.so \u5e93\u662f pdfreader \u8fdb\u7a0b\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u6570\u636e\u6bb5\u548c\u5806\u6bb5\u662f\u8bfb/\u5199/\u6267\u884c\u7684\u3002 ASLR \u5185\u7f6e\u4e8e Linux \u5185\u6838\u4e2d\uff0c\u7531\u53c2\u6570 /proc/sys/kernel/randomize_va_space \u63a7\u5236\u3002\u5b83\u5728 Kindle \u8bbe\u5907\u4e0a\u7684\u9ed8\u8ba4\u503c\u4e3a 1\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u6bb5\u7684\u57fa\u5730\u5740\u7d27\u8ddf\u5728\u53ef\u6267\u884c\u4ee3\u7801\u6bb5\u7684\u672b\u5c3e\u4e4b\u540e\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6570\u636e\u6bb5\u548c\u5806\u6ca1\u6709\u968f\u673a\u5316\u3002\u8fd9\u4e24\u4e2a\u4e8b\u5b9e\u4f7f\u5f97\u5229\u7528\u53d1\u73b0\u7684 jbig2 \u6f0f\u6d1e\u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\u3002\u6211\u4eec\u73b0\u5728\u5728 pdfreader \u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u5b58\u5728 RCE \u6f0f\u6d1e\u3002\u7528\u6237\u5c06 PDF \u4e66\u4e0b\u8f7d\u5230\u4ed6\u7684 Kindle \u8bbe\u5907\u3002\u5f53\u8fd9\u672c\u4e66\u88ab\u6253\u5f00\u65f6\uff0c\u4f1a\u542f\u52a8\u4e00\u4e2a\u6076\u610f\u8d1f\u8f7d\u3002 pdfreader \u8fdb\u7a0b\u5177\u6709\u6846\u67b6\u7528\u6237\u6743\u9650\uff1auid=9000(framework) gid=150(javausers) groups=150(javausers)\u3002\u5b83\u53ef\u4ee5\u53d1\u9001 LIPC \u6d88\u606f\uff0c\u8bbf\u95ee\u7279\u6b8a\u7684\u5185\u90e8\u6587\u4ef6\uff0c\u4f46\u5b83\u4ecd\u7136\u662f\u6709\u9650\u7684\u3002\u6211\u4eec\u60f3\u6210\u4e3a root \u6765\u91cd\u7f6e\u6240\u6709\u9650\u5236\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u7684\u7b2c\u4e8c\u9636\u6bb5\u662f\u627e\u5230\u4e00\u4e2a LPE \u6f0f\u6d1e\uff0c\u8be5\u6f0f\u6d1e\u5141\u8bb8\u6846\u67b6\u7528\u6237\u5728 root \u7528\u6237\u4e0b\u8fd0\u884c\u4ee3\u7801\u3002\u9996\u5148\uff0c\u6211\u4eec\u8d8a\u72f1\u4e86\u6211\u4eec\u7684\u4e00\u4e2a Kindle\uff0c\u56e0\u4e3a\u4ec5\u4ec5\u4ece\u56fa\u4ef6\u4e2d\u83b7\u53d6\u6587\u4ef6\u6765\u641c\u7d22\u903b\u8f91 LPE \u662f\u4e0d\u591f\u7684\u3002\u6211\u4eec\u9700\u8981\u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u548c\u6253\u5f00\u7684\u7aef\u53e3\uff0c\u5e76\u80fd\u591f\u8c03\u8bd5 Kindle \u670d\u52a1\u3002\n\u53ef\u4ee5\u5728 Internet \u4e0a\u627e\u5230\u67d0\u4e9b\u7248\u672c\u7684 Kindle \u56fa\u4ef6\u7684\u8f6f\u4ef6\u8d8a\u72f1\u3002\u4f46\u6700\u901a\u7528\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u4e32\u53e3\u8d8a\u72f1\u3002\u867d\u7136\u8fd9\u9700\u8981\u62c6\u5378\u8bbe\u5907\uff0c\u4f46\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u505a\u7684\u3002\u6211\u4eec\u62ff\u5230\u4e86\u4e00\u4e2a\u8d8a\u200b\u200b\u72f1\u7684\u8bbe\u5907\uff0c\u7136\u540e\u5206\u6790\u4e86\u62e5\u6709root\u6743\u9650\u7684\u670d\u52a1\uff0c\u4ee5\u53ca\u5b83\u4eec\u8bbf\u95ee\u7684\u8d44\u6e90\u3002\u6700\u7ec8\uff0c\u6211\u4eec\u5728 Kindle \u670d\u52a1\u4e2d\u53d1\u73b0\u4e86\u4e00\u4e2a\u903b\u8f91\u9519\u8bef\uff0c\u6216\u8005\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u662f\u6743\u9650\u7ba1\u7406\u4e0d\u5f53\u3002\u592a\u597d\u4e86\uff0c\u65e0\u9700\u5bf9\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u8fdb\u884c\u6a21\u7cca\u6d4b\u8bd5\u3002\u6846\u67b6\u7528\u6237\u5bf9 /var/tmp/framework \u76ee\u5f55\u5177\u6709\u5b8c\u5168\u8bbf\u95ee\u6743\u9650\uff0c\u4ed6\u53ef\u4ee5\u5728\u5176\u4e2d\u521b\u5efa\u4efb\u4f55\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u662f\u7528\u6237\u7684\u5de5\u4f5c\u76ee\u5f55\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u8bb0\u5f55\u7528\u6237\u6743\u9650\u7684 bash \u811a\u672c\u6587\u4ef6 payload.sh\uff1a\u6846\u67b6\u7528\u6237\u5bf9 /var/local/appreg.db sqlite \u6570\u636e\u5e93\u5177\u6709\u8bfb/\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u8be5\u6570\u636e\u5e93\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6ce8\u518c\u8868\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 /usr/lib/libsqlite3.so \u5e93\u6216\u7b80\u5355\u5730\u7f16\u8f91\u6587\u4ef6\u6765\u4fee\u590d\u6570\u636e\u5e93\u6761\u76ee\u3002\u6211\u4eec\u60f3\u8981\u4fee\u8865\u5c5e\u6027\u8868\u4e2d\u7684\u201c\u547d\u4ee4\u201d\u6761\u76ee\u4e4b\u4e00\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u8865\u6761\u76ee com.lab126.browser\uff1a\u5c06\u503c\u5b57\u6bb5\u8bbe\u7f6e\u4e3a /var/tmp/framework/payload.sh \u800c\u4e0d\u662f /usr/bin/mesquite\u3002\u4ee5\u4e0b SQL \u8bf7\u6c42\u5b8c\u6210\u5de5\u4f5c\uff1a \u6846\u67b6\u53ef\u4ee5\u8bf7\u6c42\u7531 appmgrd \u670d\u52a1\u8868\u793a\u7684\u5e94\u7528\u7a0b\u5e8f\u7ba1\u7406\u5668\u542f\u52a8\u4efb\u610f\u5e94\u7528\u7a0b\u5e8f\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 /usr/lib/liblipc.so \u5e93\u53d1\u9001 LIPC \u6d88\u606f\u4ee5\u6253\u5f00\u6d4f\u89c8\u5668\u5e94\u7528\u7a0b\u5e8f\u3002\u6b64 shell \u547d\u4ee4\u7684\u4f5c\u7528\u76f8\u540c\uff1a\u5e94\u7528\u7a0b\u5e8f\u7ba1\u7406\u5668\u8d1f\u8d23\u542f\u52a8\u5185\u7f6e\u5e94\u7528\u7a0b\u5e8f\u3002\u4e3a\u6b64\uff0c\u5b83\u4f1a\u4fa6\u542c\u9002\u5f53\u7684 LIPC \u4e8b\u4ef6\u3002\u8981\u542f\u52a8\u6d4f\u89c8\u5668\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4f1a\u4ece appreg.db \u8bfb\u53d6\u6761\u76ee com.lab126.browser\uff0c\u5e76\u6267\u884c\u503c\u5b57\u6bb5\u4e2d\u6307\u5b9a\u7684\u547d\u4ee4\u3002\u5f53\u6211\u4eec\u4fee\u8865\u8fd9\u4e2a\u6570\u636e\u5e93\u6761\u76ee\u65f6\uff0c\u6211\u4eec\u7684 payload.sh \u811a\u672c\u88ab\u542f\u52a8\u3002\nappmgrd \u670d\u52a1\u5177\u6709 root \u6743\u9650\u3002 \u201croot: uid=0(root) gid=0(root)\u201d\u5b57\u7b26\u4e32\u7531payload.sh\u8bb0\u5f55\u3002\u53ef\u4ee5\u4ece\u6211\u4eec\u62e5\u6709\u7684 pdfreader \u8fdb\u7a0b\u4e2d\u8f7b\u677e\u5229\u7528\u6240\u63cf\u8ff0\u7684 LPE \u6f0f\u6d1e\u3002 libsqlite3.so \u548c liblipc.so \u5e93\u5df2\u7ecf\u52a0\u8f7d\u5230\u8fdb\u7a0b\u5185\u5b58\u4e2d\u3002\u901a\u8fc7\u7ed3\u5408\u53d1\u73b0\u7684\u4e24\u4e2a\u6f0f\u6d1e\uff0c\u4efb\u4f55\u6076\u610f\u8d1f\u8f7d\u90fd\u53ef\u4ee5\u4ee5 root \u8eab\u4efd\u8fd0\u884c\u3002\u6211\u4eec\u6f14\u793a\u4e86\u7535\u5b50\u4e66\u5982\u4f55\u5145\u5f53\u6076\u610f\u8f6f\u4ef6\u3002\u7531\u4e8e\u6076\u610f\u8f6f\u4ef6\u4ee3\u7801\u662f\u4ee5 root \u7528\u6237\u6743\u9650\u6267\u884c\u7684\uff0c\u6253\u5f00\u8fd9\u6837\u7684\u4e66\u53ef\u80fd\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u5f25\u8865\u7684\u635f\u5bb3\u3002\u653b\u51fb\u8005\u53ef\u80fd\u5220\u9664\u4e86\u60a8\u7684\u7535\u5b50\u4e66\uff0c\u53ef\u80fd\u83b7\u5f97\u5bf9\u60a8\u4e9a\u9a6c\u900a\u5e10\u6237\u7684\u5b8c\u5168\u8bbf\u95ee\u6743\u9650\uff0c\u53ef\u80fd\u5c06\u60a8\u7684 Kindle \u8f6c\u6362\u4e3a\u673a\u5668\u4eba\uff0c\u653b\u51fb\u60a8\u672c\u5730\u7f51\u7edc\u4e2d\u7684\u5176\u4ed6\u8bbe\u5907\uff0c\u7b49\u7b49\u3002\u6240\u63cf\u8ff0\u7684\u6f0f\u6d1e\u4e8e 2021 \u5e74 2 \u6708\u62a5\u544a\u7ed9\u4e9a\u9a6c\u900a\uff0c\u5e76\u4e8e 2021 \u5e74 4 \u6708\u5728 Kindle \u56fa\u4ef6\u7684 5.13.5 \u7248\u672c\u4e2d\u4fee\u590d\u3002", "note_en": "Since 2007, Amazon has sold tens of millions of Kindles, which is impressive. But this also means that tens of millions of people could have potentially been hacked through a software bug in those same Kindles. Their devices could be turned into bots or their private local networks could be compromised, and perhaps even information in their billing accounts can be stolen.\n  The easiest way to remotely reach a user\u2019s Kindle is through an e-book. A malicious book can be published and made available for free access in any virtual library, including the Kindle Store, via the \u201cself-publishing\u201d service, or sent directly to the end-user device via the Amazon \u201csend to kindle\u201d service. While you might not be happy with the writing in a particular book, nobody expects to download one that is malicious. No such scenarios have been publicized. Antiviruses do not have signatures for e-books. But\u2026 we succeeded in making a malicious book. If you were to open this book on a Kindle device, it could have caused a hidden piece of code to be executed with root rights. From this moment on, you can assume that you have lost control of your e-reader.\n  The issues we found were reported to Amazon in February 2021 and fixed in the 5.13.5 version of Kindle\u2019s firmware in April 2021. The patched firmware will be installed automatically on devices connected to the Internet.\n    Basically, the Kindle OS is a Linux kernel with a set of native programs mainly provided by busybox, the LIPC subsystem for inter-process communication, and the Java and Webkit subsystems for user interface (UI) and services.\n    The LIPC is a D-Bus-based IPC library and its environment that links all Kindle components together. A Kindle process can use this library to start apps, expose application properties/settings, listen for or emit events. For example, a Webkit application, written in HTML and Javascript, can use the LIPC to interact with a Java service or a native application.\n  Most of the UI is written in Java. The Java subsystem (the framework) provides LIPC handlers for both services and the UI (so-called Booklets). For example, the Kindle home UI window is the  com.lab126.booklet.home booklet managed by the framework.\n  The Webkit subsystem (HTML5 and Javascript) is another way to create UI elements. The built-in experimental browser is a part of the Webkit subsystem. The pillow is a library that allows access to the LIPC from Javascript.\n    The latest version (5.13.4) of the Kindle e-reader firmware is publicly available for download on the official Amazon website. The source code is also partially available there. But the source code did not help in our research because it mainly consists of third-party open-source projects, including the Linux kernel, with small Amazon tweaks. There is no source code for the components responsible for parsing and rendering e-books.\n  Our first goal was to discover a vulnerability in the e-book parsing framework. For this we have enough files from the firmware and there is no need for a real Kindle device.  Let\u2019s look at the components responsible for handling e-books.\n  The  /mnt/us/documents is the regular e-books\u2019 directory, when you download a new book on your Kindle device. Who is going to handle the file first? The  /usr/bin/scanner service periodically scans the document directory for new files and, depending on the file extension, uses one of the \u201cextractor\u201d libraries to extract metadata from the e-book. All extractors are listed in the  /var/local/appreg.db sqlite database. There is a handler for each of the supported Kindle e-book formats:\n    If the scanner does not match the file extension or a parsing error occurs, the e-book is not shown to the user.  We did not go deep into the scanning process because extracting metadata is too simple an operation to suggest parsing errors.\n  After the scanner does its job, a thumbnail of the new book is displayed on the home screen. From this moment on, the Java framework is responsible for opening the book when you click on it. Java archive (JAR) files that implement the logic for opening and rendering e-books can be found in the  /opt/amazon/ebook/lib firmware directory. Primarily, these are  MobiReader-impl.jar,  YJReader-impl.jar,  PDFReader-impl.jar,  HTMLReader-impl.jar and  TopazReader-impl.jar files. For further research, we decided to focus our attention on the PDF file format, as it\u2019s one of the most common, and yet at the same time, complex formats.\n  Let\u2019s take a look at the implementation of the PDF book opening function in the  PDFReader-impl.jar ( com.amazon.ebook.booklet.pdfreader.impl.PDFModel class):\n  As you can see, this function is only a wrapper over the  nativeOpenPDFDocument native function with the body in the  /usr/java/lib/libPDFClientJNI.so library.\n  The  nativeOpenPDFDocument function starts the PDF server  /usr/bin/pdfreader, forking the process, and synchronously sends it an \u201copenBook\u201d message via the open source HTTP client/server library  /usr/lib/libsoup-2.4.so. In fact, it sends a GET request to  https://127.0.0.1:7667/command/openBook.\n  The  pdfreader server is the main target of our research. Eventually, we will run our payload in the context of this process. At startup, the  pdfreader server lowers itself to the permissions of the \u201cframework\u201d user (uid 9000) with a  setuid call. Then it launches a soup server listening on port 7667, defining dozens of handlers for high-level PDF operations, including the \u201copenBook\u201d and \u201cstartRendering\u201d ones that we are interested in. The  /usr/lib/libFoxitWrapper.so library, written by Amazon, provides an API for working with PDF files. The  pdfreader uses this library in its soup handlers. For example, the \u201copenBook\u201d handler looks like this:\n    renderPageFromLibrary(uint32_t handle, uint32_t page, uint32_t width, uint32_t height, float scale, uint8_t landscape, uint8_t* out) \u2013 Renders the PDF page converting it to an image. When called, the stream filters begin to be parsed.\n    As the name implies,  libFoxitWrapper.so is a wrapper for a popular Foxit PDF SDK presented on Kindle devices by the  /usr/lib/libfpdfemb.so library. The  libfpdfemb.so is a closed-source library proprietary to Foxit Software Inc. The Foxit Embedded PDF SDK manual can be found on the Internet.\n    We tried to fuzz the mentioned functions from the  libFoxitWrapper.so library, but this approach did not bring any result, except for a set of null pointer exceptions. A more promising approach to the PDF format is to choose one specific object or stream filter as the target for the test. So, we decided to fuzz the  libfpdfemb.so library.\n  But first, let\u2019s take a look at the classic fuzzing model. The easiest way to fuzz any closed-source library is to write an executable file that loads the library into memory and calls the target functions. This loader takes a file with permuted data as a command line parameter, reads it in, and passes the data to the function under test. Next, the loader is instrumented or run on an emulator to collect the code coverage matrix for each test case. One of the third-party fuzzers/permutors is used to generate new test cases based on the coverage matrix.  To fuzz the  libfpdfemb.so library, we chose a combination of American Fuzzy Lop (AFL) and Quick emulator (Qemu). The host machine is Ubuntu.\n    We need to note one more thing. A Kindle device is based on an ARM processor. Therefore, our loader was compiled using  arm-linux-gnueabi-g++. The Qemu easily emulates ARM on x86.\n  A simple search for the words \u201cCPDF\u201d and \u201cCodec\u201d in the  libfpdfemb.so library allowed us to find all the possible stream filters/codecs:  Predictor,  Decrypt,  Flate,  Fax,  Lzw,  AsciiHex,  RunLen,  Ascii85,  Jpeg,  Jbig2 and  Jpx. Let\u2019s take a look at one of them with an example.\n      \ufffcAs you can see, an image  Im1 with jbig2 filter is declared. Jbig2 is an image compression standard for bi-level images. The jbig2 encoder segments the input page into regions: text, halftone images, refinement, and others. These regions are held in the  JBIG2Globals stream. When rendering a PDF page,  libfpdfemb.so parses the  JBIG2Globals stream and reconstructs the image.\n  The  Jbig2Module object, defined in the  libfpdfemb.so library, is responsible for decoding jbig2 compressed images.\n        Among other filters, we fuzzed the jbig2 decoding algorithm using the  StartDecode function as the entry point and permuted the image size ( width and  height arguments), the image stream ( src_buf,  src_size) and the  JBIG2Globals stream ( global_data,  global_size). Below you can see the harness we used to invoke the  StartDecode. The base variable is the address of the  libfpdfemb.so library in memory.\n  As a result, we discovered a valuable heap overflow vulnerability in the  JBIG2Globals decoding algorithm.\n          The image information region (first 0x23 bytes). The image width is 0x80, the height is 1 and the stride is 0x10. The stride is calculated as  ((width + 31) &gt;&gt; 5) &lt;&lt; 2.\n  The \u201crefinement\u201d region (from 0x23 to 0x4D bytes). This region contains jbig2 encoded information to refine the image. As only a part of the image can be refined, it also contains the coordinates of the refining rectangle. In our case, the provided rectangle parameters are: width \u2013 0, height \u2013 0x10, x \u2013 0, y \u2013 0x40000000.\n  This is a malformed stream. An oversized rectangle is defined in the refinement region.  What happens in this case? The algorithm tries to expand the base image to the new dimensions. The height of the new image is recalculated as  height + y, and  (height + y) * stride heap memory is allocated for the resized image. But there is a mistake in the expanding function that leads to a heap overflow: a missed check for  INT_MAX when calculating the size in memory of the new image. The 32-bit register overflows, and 0x100 bytes is allocated for the image instead of 0x400000100.\n    This means that by using refinement regions, we can \u201crefine\u201d the data outside of the image, and get the arbitrary write primitive. In the following example, the second refinement region overwrites 0x10 (stride) bytes at an offset 0x1234 * 0x10 bytes from the beginning of the image in the heap. The data blob (0x71 to 0x79 bytes) is decompressed by the jbig2 algorithm and then XORed with the heap content.\n    We can create any number of refinement regions and overwrite parts of memory that are at a distance from each another. In addition, the fact that the writing is done through a XOR operation allows us to fix only specific bits of memory, but not whole words, and bypass ASLR protection if required.\n  As mentioned previously, the  libfpdfemb.so library is part of the  pdfreader process. The data and heap segments of this process are read/write/execute. ASLR is built into the Linux kernel and is controlled by the parameter  /proc/sys/kernel/randomize_va_space. Its default value on Kindle devices is 1, which means the base address of the data segment is located immediately after the end of the executable code segment. In other words, there is no randomization for the data segment and the heap. These two facts make exploiting the discovered jbig2 vulnerability trivial.\n    We now have RCE vulnerability in the context of the  pdfreader process. A user downloads the PDF book to his Kindle device. When the book is opened, a malicious payload is launched.\n  The  pdfreader process has the framework user rights:  uid=9000(framework) gid=150(javausers) groups=150(javausers). It can send LIPC messages, access special internal files, but it is still limited. We want to be a root to reset all restrictions.  So, the second stage of the research is to find an LPE vulnerability that allows the framework user to run a code under the root user.\n  First, we jailbroke one of our Kindles because it is not enough just to have files from the firmware to search the logical LPE. We need to see running processes and opened ports, and to be able to debug Kindle services.\n  A software jailbreak for some versions of Kindle firmware can be found on the Internet. But the most general way is to jailbreak through the serial port. Although this requires disassembling the device, this is what we did.\n    We got a jailbroken device, and then analyzed the services that have root rights, as well as the resources they access. Eventually, we found a logical error, or more accurately, an improper privilege management, in one of the Kindle services. Great, there is no need to fuzz the device drivers.\n  The framework user has full access to  /var/tmp/framework directory, where he can create any executable file. Actually, this is the user\u2019s working directory. For example, we can create a bash script file  payload.sh that logs user privileges:\n  The framework user has read/write access to the  /var/local/appreg.db sqlite database that is essentially an application registry. This means that we can fix a database entry using the  /usr/lib/libsqlite3.so library or by simply editing the file. We want to patch one of the \u201ccommand\u201d entries in the  properties table.\n    For example, we can patch the entry  com.lab126.browser: set the  value field to  /var/tmp/framework/payload.sh instead of  /usr/bin/mesquite. The following SQL request does the work:\n  The framework can request the application manager, represented by the  appmgrd service, to start an arbitrary application. We can send an LIPC message to open the browser app using the  /usr/lib/liblipc.so library. This shell command does the same:\n  The application manager is responsible for launching built-in apps. To do this, it listens for the appropriate LIPC events. To start the browser app, it reads the entry  com.lab126.browser from the  appreg.db, and executes the command specified in the  value field. As we patched this database entry, our  payload.sh script is launched.\n  The  appmgrd service has root rights. The \u201croot: uid=0(root) gid=0(root)\u201d string is logged by the  payload.sh.\n  The described LPE vulnerability can be easily exploited from the  pdfreader process that we owned. The  libsqlite3.so and  liblipc.so libraries are already loaded into the process memory. By combining the two discovered vulnerabilities, any malicious payload can be run as root.\n    We demonstrated how an e-book can function as malware. As the malware code is executed with root user rights, just opening such a book could have led to irreparable damage. The attacker could have deleted your e-books, potentially gain full access to your Amazon account, could have converted your Kindle to a bot, attacked other devices in your local network, and more.\n  The described vulnerabilities were reported to Amazon in February 2021 and fixed in the 5.13.5 version of Kindle\u2019s firmware in April 2021.", "posttime": "2021-08-08 09:48:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u559c\u6b22,kindle", "title": "\u4f60\u559c\u6b22\u8bfb\u4e66\u5417\uff1f\u6211\u53ef\u4ee5\u7528\u7535\u5b50\u4e66\u63a5\u7ba1\u4f60\u7684 Kindle", "title_en": "Do you like to read? I can take over your Kindle with an e-book", "transed": 1, "url": "https://research.checkpoint.com/2021/i-can-take-over-your-kindle/", "via": "", "real_tags": ["\u559c\u6b22", "kindle"]}]