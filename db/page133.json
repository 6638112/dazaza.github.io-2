[{"category": "", "categoryclass": "", "imagename": "11c246f46cd3c3f0d0b5807e5581c410.jpg", "infoid": 1069747, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u521b\u5efa\u4e86\u4e00\u4e2a repo \u6765\u6293\u53d6\u548c\u5206\u6790\u5728 leetcode \u7684\u8865\u507f\u9875\u9762\u4e0a\u53d1\u5e03\u7684\u5e16\u5b50\u3002\u62a5\u544a\u662f\u6839\u636e\u622a\u81f3 7 \u6708 22 \u65e5\u6536\u96c6\u7684 1940 \u6761\u8bb0\u5f55\u751f\u6210\u7684\uff08\u6765\u81ea\u85aa\u916c\u9875\u9762\u4e0a\u7684 272 \u9875\uff09\u3002", "note_en": "I created a repo to scrape and analyse the posts made on the compensations page of leetcode.\n Reports are generated from 1940 records collected till Jul 22 (from the 272 pages available on the compensations page).", "posttime": "2021-07-26 08:20:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u85aa\u916c,compensation,\u6293\u53d6", "title": "Leetcode \u85aa\u916c\u62a5\u544a\uff08\u5370\u5ea6\uff092019 \u5e74 1 \u6708 \u2013 2021 \u5e74 7 \u6708", "title_en": "Leetcode Compensation report (India) Jan 2019 \u2013 Jul 2021", "transed": 1, "url": "https://www.reddit.com/r/developersIndia/comments/ors1zd/leetcode_compensation_report_india_jan_2019_jul/", "via": "", "real_tags": ["\u85aa\u916c", "\u6293\u53d6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069746, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c1d\u8bd5\u5b8c\u5168\u6570\u5b57\u8bbf\u95ee\uff0c\u770b\u770b\u4e3a\u4ec0\u4e48\u6709\u8d85\u8fc7 100 \u4e07\u8bfb\u8005\u8ba2\u9605\u4e86 FT \u9009\u62e9 \u8d2d\u4e70 1 \u7f8e\u5143\u7684\u8bd5\u7528\u8ba2\u9605 4 \u5468 \u8bd5\u7528\u671f\u7ed3\u675f\u540e\uff0c\u60a8\u5c06\u6bcf\u6708\u652f\u4ed8 91 \u7f8e\u5143 4 \u5468\u5185\u83b7\u5f97\u5bf9 FT \u503c\u5f97\u4fe1\u8d56\u7684\u5956\u52b1\u7684\u65e0\u9650\u5236\u9ad8\u7ea7\u6570\u5b57\u8bbf\u95ee- \u83b7\u5956\u5546\u4e1a\u65b0\u95fb\u793c\u54c1\u6587\u7ae0 \u2013 \u6bcf\u6708\u6700\u591a\u4e0e\u5bb6\u4eba\u3001\u670b\u53cb\u548c\u540c\u4e8b\u5206\u4eab 10 \u7bc7\u6587\u7ae0", "note_en": "Try full digital access and see why over 1 million readers subscribe to the FT\n  Select  Purchase a Trial subscription for $1 for 4 weeks   You will be billed $91 per month after the trial ends\n  For 4 weeks receive unlimited Premium digital access to the FT&#39;s trusted, award-winning business news\n  Gift Article \u2013 share up to 10 articles a month with family, friends and colleagues", "posttime": "2021-07-26 08:19:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bbd\u5e26,broadband,\u8ba2\u9605", "title": "\u5149\u7ea4\u5bbd\u5e26\u201c\u6dd8\u91d1\u70ed\u201d\uff1a\u82f1\u56fd\u7684\u66ff\u4ee3\u7f51\u7edc\u80fd\u5426\u6210\u529f\uff1f", "title_en": "Fibre broadband \u2018gold rush\u2019: can the UK\u2019s alt-nets pull it off?", "transed": 1, "url": "https://www.ft.com/content/0af3b0ea-a803-4b23-be18-a47717c095eb", "via": "", "real_tags": ["\u5bbd\u5e26", "broadband", "\u8ba2\u9605"]}, {"category": "", "categoryclass": "", "imagename": "55b07d20cf1174d0261ff81787f094a1.jpg", "infoid": 1069745, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf 5 \u5206\u949f\uff0cAEMO \u5c06\u5728\u5168\u56fd\u7535\u529b\u5e02\u573a (NEM) \u5185\u8c03\u5ea6\u53d1\u7535\u673a\u4ee5\u6ee1\u8db3\u9700\u6c42\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0cAEMO \u9700\u8981\u9884\u6d4b\u672a\u6765 5 \u5206\u949f\u5185\u7684\u9700\u6c42\u60c5\u51b5\u3002\u76ee\u524d\uff0cAEMO \u4f7f\u7528\u6070\u597d\u4e00\u5468\u524d\u7684 6 \u4e2a\u8c03\u5ea6\u95f4\u9694\u4e2d\u7684\u9700\u6c42\u53d8\u5316\uff0c\u4ee5\u53ca\u5f53\u524d\u8c03\u5ea6\u95f4\u9694\u4e4b\u524d\u7684 5 \u4e2a\u8c03\u5ea6\u95f4\u9694\u3002\u8fd9\u4e9b\u8ba1\u7b97\u7684\u7ed3\u679c\u662f 9 \u4e2a\u503c\uff0c\u4ee3\u8868\u4e86\u9700\u6c42\u968f\u65f6\u95f4\u7684\u53d8\u5316\u3002\u7136\u540e\u5c06\u8fd9 9 \u4e2a\u503c\u8f93\u5165\u5230\u79f0\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e2d\u3002\u6211\u5df2\u7ecf\u5728\u4e0b\u9762\u7ed8\u5236\u4e86\u8fd9\u4e2a\u7f51\u7edc\u7684\u7ed3\u6784\uff0c\u4f46\u60a8\u771f\u6b63\u9700\u8981\u62c5\u5fc3\u7684\u662f\u8f93\u5165\u5c42\uff08\u91c7\u7528\u4e0a\u9762\u8ba8\u8bba\u7684 9 \u4e2a\u503c\uff09\u548c\u9884\u6d4b\u9700\u6c42\u53d8\u5316\u7684\u8f93\u51fa\u5c42\u3002\u5982\u679c\u60a8\u5bf9\u8fd9\u4e2a\u795e\u7ecf\u7f51\u7edc\u7a76\u7adf\u5982\u4f55\u63a5\u53d7\u8fd9\u4e9b\u8f93\u5165\u5e76\u80fd\u591f\u8f93\u51fa\u9884\u6d4b\u611f\u5174\u8da3\uff0c\u6211\u5df2\u7ecf\u5728\u8fd9\u91cc\u7528 Python \u4ece\u5934\u5f00\u59cb\u200b\u200b\u5b9e\u73b0\u4e86\u5b83\u3002\u6700\u540e\uff0c\u6211\u8ba4\u4e3a\u8fd9\u4efd\u63a2\u7d22\u66ff\u4ee3\u9884\u6d4b\u5efa\u6a21\u6280\u672f\u7684\u62a5\u544a\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\u3002", "note_en": "Every 5 minutes, AEMO will dispatch generators across the National Electricity Market (NEM) in order to meet demand. To achieve this, AEMO needs to predict what demand will look like 5 minutes in the future.\n   Currently, AEMO uses the change in demand in the 6 dispatch intervals exactly a week before, and the 5 dispatch intervals immediately preceding the current dispatch interval. The outcome of these calculations is 9 values representing the change in demand over time.\n  These 9 values are then fed into a machine learning algorithm called a neural network. I\u2019ve drawn the structure of this network below, but all you really need to worry about is the input layer (that takes the 9 values discussed above) and the output layer that predicts the change in demand.\n  If you\u2019re interested in exactly how this neural network takes these inputs and is able to output a prediction, I\u2019ve  implemented it here from scratch in Python.\n Finally, I think this\u00a0 report\u00a0exploring alternative predictive modelling techniques is well worth a read.", "posttime": "2021-07-26 08:19:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9884\u6d4b,predict", "title": "AEMO \u5982\u4f55\u9884\u6d4b\u5168\u56fd\u7535\u529b\u5e02\u573a\u7684\u9700\u6c42\uff1f", "title_en": "How does AEMO predict demand in the National Electricity Market?", "transed": 1, "url": "https://jacksimpson.co/how-does-aemo-predict-demand-in-the-national-electricity-market/", "via": "", "real_tags": ["\u9884\u6d4b", "predict"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069743, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\u7684\u8bba\u6587\u662f Facebook \u7684 Tectonic Filesystem: Efficiency from Exascale from FaST &#39;21\u3002\u8fd9\u7bc7\u8bba\u6587\u6db5\u76d6\u4e86 Facebook \u7684 Tectonic \u6587\u4ef6\u7cfb\u7edf\u3001\u5b83\u7684\u5b9e\u73b0\u4ee5\u53ca\u4ed6\u4eec\u505a\u51fa\u7684\u5404\u79cd\u8bbe\u8ba1\u51b3\u7b56\u3002\u6211\u5c06\u603b\u7ed3\u8fd9\u7bc7\u8bba\u6587\uff0c\u5e76\u6df1\u5165\u63a2\u8ba8\u5176\u4e2d\u7684\u4e00\u4e9b\u4eae\u70b9\u3002\u867d\u7136\u6587\u4ef6\u7cfb\u7edf\u8bba\u6587\u548c\u7cfb\u7edf\u6709\u7740\u4e30\u5bcc\u7684\u5386\u53f2\uff0c\u4f46\u9605\u8bfb\u8fd9\u7bc7 Tectonic \u8bba\u6587\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\uff0c\u56e0\u4e3a\u8bb8\u591a\u7ecf\u5e38\u88ab\u5f15\u7528\u7684\u8bba\u6587\u5df2\u7ecf\u6709\u70b9\u957f\u4e86\u3002\u8c37\u6b4c\u6587\u4ef6\u7cfb\u7edf (2003) \u8bba\u6587\u5df2\u6709\u8fd1 20 \u5e74\u7684\u5386\u53f2\uff0c\u4f46\u5728\u91ce\u5916\u88ab\u5f15\u7528\u7684\u6b21\u6570\u8d85\u8fc7\u4e86 Bill Murray\u3002 1 \u8fd8\u6709\u4e00\u4e9b\u66f4\u73b0\u4ee3\u7684\u8bba\u6587\uff0c\u4e3b\u8981\u6765\u81ea Microsoft\uff0c\u5982 Windows Azure Storage (2011) \u548c Azure Data Lake Store (2017)\uff0c\u4f46\u5f88\u9ad8\u5174\u770b\u5230\u6765\u81ea\u4e0d\u540c\u516c\u53f8\u7684\u4e00\u4e9b\u4e1c\u897f\u3002 Tectonic \u4f7f\u7528\u80d6\u5ba2\u6237\u7aef\u67b6\u6784\uff0c\u652f\u6301\u76f4\u63a5\u4ece\u78c1\u76d8\u5230\u5ba2\u6237\u7aef\u7684\u6570\u636e\u6d41\uff0c\u5e76\u4f7f\u7528\u5206\u7247\u5143\u6570\u636e\u670d\u52a1\u4e3a\u6587\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u670d\u52a1\u3002 Tectonic \u5c06\u5143\u6570\u636e\u5c42\u5206\u6210\u4e09\u4e2a\u90e8\u5206\uff1a(1) \u540d\u79f0\u5c42\uff0c(2) \u6587\u4ef6\u5c42\uff0c\u548c (3) \u5757\u5c42\u3002\u6bcf\u4e2a\u5c42\u8d1f\u8d23\u4e00\u90e8\u5206\u5143\u6570\u636e\uff0c\u5e76\u4e14\u6240\u6709\u5c42\u90fd\u4f5c\u4e3a\u65e0\u72b6\u6001\u5fae\u670d\u52a1\u5b9e\u73b0\u5728 ZippyDB \u4e4b\u4e0a\uff0cZippyDB \u662f\u4e00\u4e2a\u6c34\u5e73\u53ef\u6269\u5c55\u7684\u952e\u503c\u5b58\u50a8\u3002\u7531\u4e8e\u5143\u6570\u636e\u5c42\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u6bcf\u4e2a\u5c42\u90fd\u53ef\u4ee5\u72ec\u7acb\u7f29\u653e\u4ee5\u5904\u7406\u5176\u8d1f\u8f7d\u3002 Name \u5c42\u63d0\u4f9b\u76ee\u5f55\u6811\u62bd\u8c61\uff0c\u5c06\u76ee\u5f55\u6620\u5c04\u5230\u5b83\u4eec\u5305\u542b\u7684\u6587\u4ef6\u548c\u76ee\u5f55\u3002\u6587\u4ef6\u5c42\u4ece\u6587\u4ef6\u6620\u5c04\u5230\u5b83\u4eec\u7684\u7ec4\u6210\u5757\u3002\u5757\u662f\u5bf9\u8fde\u7eed\u5b57\u8282\u4e32\u7684\u62bd\u8c61\uff0c\u9690\u85cf\u4e86\u5b83\u4eec\u7684\u5b58\u50a8\u6216\u7f16\u7801\u65b9\u5f0f\u3002\u6587\u4ef6\u53ea\u662f\u5757\u7684\u6709\u5e8f\u5217\u8868\u3002\u5728 Tectonic \u4e2d\uff0c\u5757\u4f7f\u7528\u590d\u5236\u7f16\u7801\uff0c\u5176\u4e2d \\(N\\) \u4e2a\u76f8\u540c\u7684\u5757\u6bcf\u4e2a\u5b58\u50a8\u5757\u7684\u5b8c\u6574\u526f\u672c\uff0c\u6216\u8005\u4f7f\u7528 Reed-Solomon \u7f16\u7801\uff0c\u5176\u4e2d\u5757\u88ab\u7f16\u7801\u4e3a \\(X\\) \u6570\u636e\u5757\u548c \\(Y\\ ) \u4ee3\u7801/\u5947\u5076\u6821\u9a8c\u5757\u3002\u5757\u5c42\u5305\u542b\u4ece\u5757\u5230\u5176\u7f16\u7801\u53ca\u5176\u7ec4\u5757\u96c6\u7684\u6620\u5c04\u3002 Tectonic \u7684\u6700\u540e\u4e00\u90e8\u5206\u662f Chunk Store\uff0c\u5b83\u662f\u5b83\u81ea\u5df1\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5b58\u50a8\uff0c\u5176\u4e2d\u8282\u70b9\u5b58\u50a8\u539f\u59cb\u5b57\u8282\u5757\u548c\u4e00\u4e9b\u6700\u5c0f\u5143\u6570\u636e\uff0c\u4ee5\u4ece\u5757 id \u6620\u5c04\u5230\u5b58\u50a8\u5728\u672c\u5730\u3001\u4fee\u6539\u8fc7\u7684 XFS \u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684\u5b57\u8282\u3002 Name \u5c42\u3001File \u5c42\u548c Block \u5c42\u7684\u6a21\u5f0f\u5728\u8bba\u6587\u4e2d\u7684\u8fd9\u5f20\u8868\u4e2d\uff1a\nName \u5c42\u7ef4\u62a4\u4ece\u76ee\u5f55\u5230\u5b50\u76ee\u5f55\u548c\u5176\u4e2d\u5305\u542b\u7684\u6587\u4ef6\u7684\u6620\u5c04\uff0c\u5e76\u7531\u76ee\u5f55\u7684 dir_id \u5206\u7247\u3002 File \u5c42\u4ece\u6587\u4ef6\u6620\u5c04\u5230\u5176\u903b\u8f91\u5757\u5217\u8868\uff0c\u5e76\u7531 file_id \u5206\u7247\u3002 Block \u5c42\u4ece\u5757\u6620\u5c04\u5230\u5b58\u50a8\u5b83\u7684\u5757/\u78c1\u76d8\u5217\u8868\uff0c\u5e76\u7531 blk_id \u5206\u7247\u3002\u5757\u5c42\u8fd8\u7ef4\u62a4\u4ece\u6bcf\u4e2a\u78c1\u76d8\u5230\u5b58\u50a8\u5728\u5176\u4e0a\u7684\u5757\u5217\u8868\u7684\u6620\u5c04\u3002\u8fd9\u79cd\u53cd\u5411\u6620\u5c04\u5bf9\u4e8e\u7ef4\u62a4\u5f88\u6709\u7528\uff0c\u4f8b\u5982\uff0c\u5f53\u78c1\u76d8\u4e22\u5931\u65f6\uff0c\u8fd9\u79cd\u6620\u5c04\u5141\u8bb8\u540e\u53f0\u7ef4\u62a4\u4efb\u52a1\u51c6\u786e\u679a\u4e3e\u54ea\u4e9b\u5757\u9700\u8981\u5411\u4e0a\u590d\u5236\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u91cd\u5efa\u3002 ZippyDB \u5c06\u952e\u7ec4\u5408\u6210\u5206\u7247\uff0c\u5e76\u4fdd\u8bc1\u5177\u6709\u76f8\u540c\u5206\u7247 id \u7684\u6240\u6709\u952e\u503c\u5bf9\u90fd\u653e\u7f6e\u5728\u540c\u4e00\u4e2a\u5206\u7247\u4e2d\u3002\u8fd9\u610f\u5473\u7740\u7531 dir_id \u5206\u7247\u7684 Tectonic \u7684 Name \u5c42\u53ef\u4ee5\u4ece\u5355\u4e2a\u5206\u7247\u5feb\u901f\u63d0\u4f9b\u4e00\u4e2a\u76ee\u5f55\u4e2d\u6240\u6709\u5b50\u76ee\u5f55\u548c\u6587\u4ef6\u7684\u5f3a\u4e00\u81f4\u6027\u5217\u8868\uff0c\u800c\u5b83\u7684 File \u5c42\uff0c\u7531 file_id \u5206\u7247\uff0c\u53ef\u4ee5\u4e3a\u6240\u6709\u7684\u5217\u8868\u505a\u540c\u6837\u7684\u4e8b\u60c5\u3002\u6587\u4ef6\u5757\u3002\u4f46\u662f\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u5b50\u76ee\u5f55\u4e0e\u7236\u76ee\u5f55\u4f4d\u4e8e\u540c\u4e00\u5206\u7247\u4e0a\uff0c\u5e76\u4e14 ZippyDB \u4e0d\u63d0\u4f9b\u4efb\u4f55\u8de8\u5206\u7247\u4e8b\u52a1\uff0c\u56e0\u6b64\u4e0d\u652f\u6301\u5927\u591a\u6570\u9012\u5f52\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\u3002 Tectonic \u7684 ZippyDB \u6a21\u5f0f\u8fd8\u5c06\u5217\u8868\u5b58\u50a8\u4e3a\uff08\u952e\uff0c\u503c\uff09\u5bf9\u7684\u5b8c\u5168\u201c\u6269\u5c55\u201d\u7ec4\u5408\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u5305\u542b\u5b50\u76ee\u5f55 bar \u548c quux \u7684\u76ee\u5f55 foo\uff0cTectonic \u5b58\u50a8\u4e24\u4e2a\u5355\u72ec\u7684\u952e (foo, bar) \u548c (foo, quux)\uff0c\u5e76\u4f7f\u7528\u524d\u7f00\u952e\u626b\u63cf foo, \u5904\u7406\u76ee\u5f55 foo \u7684\u5217\u8868\u8bf7\u6c42\u3002\u8fd9\u79cd\u6269\u5c55\u7684\u5217\u8868\u683c\u5f0f\u7528\u4e8e\u964d\u4f4e\u5411\u5df2\u7ecf\u62e5\u6709\u6570\u767e\u4e07\u4e2a\u6587\u4ef6\u7684\u5927\u578b\u76ee\u5f55\u6dfb\u52a0\u6216\u5220\u9664\u5355\u4e2a\u6761\u76ee\u7684\u6210\u672c\uff0c\u56e0\u4e3a Tectonic \u4e0d\u5fc5\u53cd\u5e8f\u5217\u5316\u3001\u7f16\u8f91\u3001\u5e8f\u5217\u5316\u548c\u5199\u56de\u4e00\u767e\u4e07\u4e2a\u6761\u76ee\u5217\u8868\u3002 Tectonic \u5177\u6709\u5355\u5199\u5165\u5668\u3001\u4ec5\u8ffd\u52a0\u8bed\u4e49\u2014\u2014\u8fd9\u610f\u5473\u7740 Tectonic \u7981\u6b62\u591a\u4e2a\u5e76\u53d1\u5199\u5165\u5668\u5199\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u5e76\u4e14\u6587\u4ef6\u53ea\u80fd\u8ffd\u52a0\u5230\u3002\u4e3a\u786e\u4fdd\u5355\u5199\u5165\u5668\u8bed\u4e49\uff0c\u6bcf\u5f53\u5ba2\u6237\u7aef\u6253\u5f00\u6587\u4ef6\u65f6\uff0c\u5b83\u90fd\u4f1a\u83b7\u5f97\u4e00\u4e2a\u5199\u5165\u4ee4\u724c\uff0c\u8be5\u4ee4\u724c\u4e0e\u6587\u4ef6\u4e00\u8d77\u5b58\u50a8\u5728\u5143\u6570\u636e\u5c42\u4e2d\u3002\u6bcf\u5f53\u5ba2\u6237\u7aef\u5e0c\u671b\u5199\u5165\u6587\u4ef6\u65f6\uff0c\u5b83\u5fc5\u987b\u5305\u542b\u5199\u5165\u4ee4\u724c\uff0c\u5e76\u4e14\u53ea\u6709\u6700\u65b0\u7684\u5199\u5165\u4ee4\u724c\u624d\u88ab\u5141\u8bb8\u6539\u53d8\u6587\u4ef6\u5143\u6570\u636e\u5e76\u5199\u5165\u5176\u5757\u3002\u5f53\u63a7\u5236\u8def\u5f84\u901a\u8fc7\u5143\u6570\u636e\u5c42\u548c ZippyDB \u65f6\uff0c\u6570\u636e\u8def\u5f84\u76f4\u63a5\u4ece\u5ba2\u6237\u7aef\u5230\u5757\u5b58\u50a8\u8282\u70b9\u3002\u8fd9\u51cf\u5c11\u4e86\u6574\u4e2a\u7cfb\u7edf\u6240\u9700\u7684\u7f51\u7edc\u5e26\u5bbd\uff0c\u4ee5\u53ca\u5728\u7f51\u7edc\u4e0a\u79fb\u52a8\u5b57\u8282\u6240\u9700\u7684\u8ba1\u7b97\u3002 Tectonic \u7684\u80d6\u5ba2\u6237\u7aef\u5bf9\u5176\u8bfb\u53d6\u548c\u5199\u5165\u5177\u6709\u975e\u5e38\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\uff0c\u56e0\u4e3a\u5b83\u76f4\u63a5\u8fdb\u5165\u5757\u5b58\u50a8\u8282\u70b9\u6765\u8bfb\u53d6\u548c\u5199\u5165\u5355\u4e2a\u5757\u3002\u8fd9\u5141\u8bb8\u5ba2\u6237\u7aef\u9488\u5bf9\u4e0d\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u8c03\u6574\uff0c\u4f8b\u5982\uff0c\u662f\u5426\u4f18\u5316\u5199\u5165\u7684\u6301\u4e45\u6027\u6216\u5ef6\u8fdf\u3002\u4e0e\u53ef\u80fd\u5728\u6574\u4e2a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5f3a\u5236\u6267\u884c\u5355\u4e2a\u914d\u7f6e\u7684\u5176\u4ed6\u7cfb\u7edf\u76f8\u53cd\uff0cTectonic \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u9488\u5bf9\u6bcf\u4e2a\u6587\u4ef6\u751a\u81f3\u6bcf\u4e2a\u5757\u8c03\u6574\u8fd9\u4e9b\u53c2\u6570\u3002 Tectonic \u4f7f\u7528\u5e38\u89c1\u7684\u4ef2\u88c1\u63d0\u4ea4\u6216\u4ef2\u88c1\u5199\u5165\u6280\u672f\u6765\u4f18\u5316\u5ba2\u6237\u7aef\u6267\u884c\u5168\u5757\u5199\u5165 - \u53ea\u9700\u8981\u5ba2\u6237\u7aef\u6301\u4e45\u5730\u5199\u5165\u5757\u7684\u6240\u6709\u5757\u526f\u672c\u4e2d\u7684\u5927\u591a\u6570\u4ee5\u63d0\u4ea4\u5757\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5177\u6709 3 \u4e2a\u526f\u672c\u7684 \\(R(3.2)\\) \u590d\u5236\u6587\u4ef6 2 Tectonic \u53ea\u9700\u8981\u5ba2\u6237\u7aef\u5728\u8003\u8651\u63d0\u4ea4\u7684\u5757\u4e4b\u524d\u5b8c\u6210\u5bf9\u5176\u4e2d 2 \u4e2a\u526f\u672c\u5757\u7684\u5199\u5165\u2014\u2014\u8fd9\u6709\u52a9\u4e8e\u5c3e\u5ef6\u8fdf 3\u3002\u5982\u679c\u6700\u540e\u7684\u7b2c\u4e09\u4e2a\u526f\u672c\u5757\u5199\u5165\u5931\u8d25\uff0cTectonic \u7684\u540e\u53f0\u7ef4\u62a4\u670d\u52a1\u5c06\u901a\u8fc7\u4fee\u590d\u7b2c 3 \u4e2a\u5757\u526f\u672c\u6765\u4fee\u590d\u5757\u3002\n\u9664\u4e86\u8fd9\u79cd\u5e38\u89c1\u7684\u4f18\u5316\u4e4b\u5916\uff0cTectonic \u8fd8\u4f7f\u7528\u4e86\u4e00\u79cd\u79f0\u4e3a Reservation Requests \u7684\u5de7\u5999\u6280\u672f\u6765\u4f18\u5316\u5168\u5757\u5199\u5165\uff0c\u8fd9\u7c7b\u4f3c\u4e8e The Tail At Scale \u4e2d\u8ba8\u8bba\u7684\u5bf9\u51b2\u8bf7\u6c42\u3002\u4e3a\u4e86\u6fc0\u53d1\u9884\u7559\u8bf7\u6c42\uff0c\u6211\u4eec\u5c06\u9996\u5148\u7ed5\u9053\u800c\u884c\uff0c\u770b\u770b\u5bf9\u51b2\u8bf7\u6c42\u3001\u5b83\u4eec\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u9884\u7559\u8bf7\u6c42\u53ef\u80fd\u66f4\u9002\u5408 Tectonic \u7684\u7528\u4f8b\u3002\u5bf9\u51b2\u8bf7\u6c42\u662f\u4e00\u79cd\u5ef6\u8fdf\u4f18\u5316\uff0c\u60a8\u53ef\u4ee5\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u53ef\u80fd\u7684\u591a\u53f0\u670d\u52a1\u5668\uff0c\u5e76\u63a5\u53d7\u6765\u81ea\u6700\u5feb\u670d\u52a1\u5668\u7684\u7b2c\u4e00\u4e2a\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e3a\u4e00\u9879\u5de5\u4f5c\u53d1\u9001\u5355\u4e2a\u8bf7\u6c42\u3002\u4e0d\u53ea\u662f\u91cd\u590d\u5927\u91cf\u5de5\u4f5c\u7684\u5173\u952e\u662f\uff0c\u4e0d\u662f\u7acb\u5373\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u800c\u662f\u7b49\u5f85\u4e00\u70b9\uff0c\u5176\u4e2d\u201c\u4e00\u70b9\u201d\u610f\u5473\u7740\u60a8\u671f\u671b\u6b63\u5e38\u8bf7\u6c42\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\u5982\u679c\u56de\u590d\u4ecd\u672a\u5230\u8fbe\uff0c\u90a3\u4e48\u60a8\u201c\u5bf9\u51b2\u201d\u60a8\u7684\u8d4c\u6ce8\uff0c\u5373\u8be5\u670d\u52a1\u5668\u5c06\u5728\u5408\u7406\u7684\u65f6\u95f4\u8303\u56f4\u5185\u54cd\u5e94\u5e76\u5c06\u76f8\u540c\u7684\u8bf7\u6c42\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u526f\u672c\u3002\u5bf9\u51b2\u8bf7\u6c42\u6709\u52a9\u4e8e\u6539\u5584\u957f\u5c3e\u5ef6\u8fdf\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u907f\u514d\u5ba2\u6237\u7aef\u5728\u53d6\u5f97\u4efb\u4f55\u8fdb\u5c55\u4e4b\u524d\u5fc5\u987b\u7b49\u5f85\u53ef\u80fd\u4e0d\u5065\u5eb7\u7684\u8282\u70b9\u54cd\u5e94\u5176\u8bf7\u6c42\u7684\u60c5\u51b5\u3002\u7136\u800c\uff0c\u5bf9\u51b2\u8bf7\u6c42\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u5bfc\u81f4\u63a5\u6536\u670d\u52a1\u5668\u5b8c\u6210\u7684\u5de5\u4f5c\u91cf\u6fc0\u589e\uff0c\u4ee5\u53ca\u989d\u5916\u8bf7\u6c42\u548c\u54cd\u5e94\u6240\u9700\u7684\u989d\u5916\u5e26\u5bbd\u2014\u2014\u8fd9\u662f\u5b58\u50a8\u7cfb\u7edf\u6240\u5173\u5fc3\u7684\u50cf\u6784\u9020\u3002\u6b64\u5916\uff0cTectonic \u5ba2\u6237\u7aef\u4e0d\u80fd\u771f\u7684\u53ea\u662f\u9009\u62e9\u53e6\u4e00\u4e2a\u968f\u673a\u5b58\u50a8\u8282\u70b9\u6765\u5199\u5165\u4ed6\u4eec\u7684\u6570\u636e\uff0c\u4ed6\u4eec\u5fc5\u987b\u4e0e\u5143\u6570\u636e\u5c42\u534f\u8c03\uff0c\u4ee5\u4fbf\u5143\u6570\u636e\u51c6\u786e\u53cd\u6620\u54ea\u4e9b\u8282\u70b9\u5b58\u50a8\u54ea\u4e9b\u5757\u3002\u76f8\u53cd\uff0cTectonic \u4f7f\u7528\u4fdd\u7559\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u5f88\u5c0f\uff0c\u7c7b\u4f3c\u4e8e ping \u8bf7\u6c42\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u5230\u591a\u4e2a\u5757\u5b58\u50a8\u8282\u70b9\u6765\u51b3\u5b9a\u5c06\u5176\u6570\u636e\u5b9e\u9645\u5199\u5165\u54ea\u4e9b\u8282\u70b9\u3002 Tectonic \u9009\u62e9\u6700\u5148\u54cd\u5e94\u7684\u5757\u5b58\u50a8\u8282\u70b9\u4f5c\u4e3a\u8fdb\u884c\u5b9e\u9645\u5199\u5165\u7684\u8282\u70b9\uff0c\u5047\u8bbe\u53ef\u4ee5\u5feb\u901f\u54cd\u5e94\u7684\u8282\u70b9\u5f53\u524d\u6ca1\u6709\u8fc7\u8f7d\u3002\u9884\u7559\u8bf7\u6c42\u4e0d\u643a\u5e26\u4efb\u4f55\u7528\u4e8e\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\uff0c\u56e0\u6b64\u5b83\u4eec\u4f7f\u7528\u7684\u5e26\u5bbd\u975e\u5e38\u5c11\uff0c\u5e76\u4e14\u5904\u7406\u6210\u672c\u975e\u5e38\u4f4e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u6b63\u5728\u5199\u5165 \\(R(3.2)\\) \u590d\u5236\u6587\u4ef6\uff0c\u5219\u5ba2\u6237\u7aef\u5c06\u9996\u5148\u5411 5 \u4e2a\u5757\u5b58\u50a8\u8282\u70b9\u53d1\u9001\u9884\u7559\u8bf7\u6c42\u3002\u5ba2\u6237\u7aef\u9009\u62e9\u6700\u5148\u54cd\u5e94\u7684 3 \u4e2a\u5b58\u50a8\u8282\u70b9\u6765\u5b9e\u9645\u53d1\u9001 3 \u4e2a\u5199\u5165\u8bf7\u6c42\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6570\u636e\u4ecd\u7136\u53ea\u5e7f\u64ad\u5230 3 \u4e2a\u8282\u70b9\uff0c\u4f46\u662f\u9996\u5148\u901a\u8fc7\u9884\u7559\u8bf7\u6c42\u8fdb\u884c\u7684\u5feb\u901f\u5065\u5eb7\u68c0\u67e5\u51cf\u5c11\u4e86\u5ba2\u6237\u7aef\u7b49\u5f85\u4e0d\u5065\u5eb7\u6216\u5361\u4f4f\u7684\u8282\u70b9\u7684\u53ef\u80fd\u6027\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u5c3e\u90e8\u5ef6\u8fdf\u3002\u9884\u7559\u8bf7\u6c42\u4e0d\u4f7f\u7528\u4efb\u4f55\u989d\u5916\u7684\u5e26\u5bbd\u6216\u5904\u7406\uff0c\u4f46\u4e0e\u5bf9\u51b2\u8bf7\u6c42\u76f8\u6bd4\u786e\u5b9e\u6709\u7f3a\u70b9\u3002\u7531\u4e8e\u5168\u5757\u5199\u5165\u5fc5\u987b\u9996\u5148\u6267\u884c\u8fd9\u4e9b\u9884\u7559\u8bf7\u6c42\uff0c\u56e0\u6b64\u5b83\u4eec\u4f1a\u4e3a\u6bcf\u4e2a\u5199\u5165\u589e\u52a0\u4e00\u70b9\u5ef6\u8fdf\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u9884\u7559\u8bf7\u6c42\u4ec5\u7528\u4e8e\u5168\u5757\u5199\u5165\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5199\u5165\u7684\u6570\u636e\u91cf\u8db3\u591f\u5927\uff0c\u8fd9\u79cd\u5ef6\u8fdf\u5f00\u9500\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u66f4\u597d\u7684\u5c3e\u90e8\u5ef6\u8fdf\u7684\u6298\u8877\u3002\u6211\u5047\u8bbe\u9884\u7559\u8bf7\u6c42\u5728\u5b9e\u8df5\u4e2d\u8fd0\u884c\u826f\u597d\uff0c\u4f46\u6211\u611f\u5174\u8da3\u7684\u662f\u9884\u7559\u8bf7\u6c42\u63d0\u4f9b\u7684\u5065\u5eb7\u68c0\u67e5\u548c\u8d1f\u8f7d\u5e73\u8861\u4fe1\u53f7\u5fc5\u987b\u662f\u591a\u8fd1\u7684\uff0c\u4ee5\u907f\u514d\u6700\u7cdf\u7cd5\u7684\u5c3e\u90e8\u5ef6\u8fdf\u3002\u6211\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u4f7f\u7528\u8f83\u5c11\u68c0\u67e5\u9891\u7387\u7684\u7cfb\u7edf\u53ef\u80fd\u4ecd\u7136\u80fd\u591f\u63d0\u4f9b\u9884\u8ba2\u8bf7\u6c42\u7684\u5927\u90e8\u5206\u597d\u5904\uff0c\u540c\u65f6\u8fd8\u51cf\u5c11\u4e86\u5b8c\u6210\u7684\u5de5\u4f5c\u91cf\u3002\nTectonic \u8fd8\u901a\u8fc7\u4ef2\u88c1\u8ffd\u52a0\u6765\u4f18\u5316\u5c0f\u4e8e\u5757\u5927\u5c0f\u7684\u8ffd\u52a0\uff0c\u7c7b\u4f3c\u4e8e\u5b8c\u6574\u5757\u5199\u5165\u3002\u4f18\u5316\u6709\u52a9\u4e8e\u51cf\u5c11\u5c3e\u90e8\u5ef6\u8fdf\uff0c\u4f46\u5bf9\u4e8e\u90e8\u5206\u5757\u8ffd\u52a0\u800c\u4e0d\u662f\u5b8c\u6574\u5757\u5199\u5165\uff0c\u4ef2\u88c1\u63d0\u4ea4\u8981\u6b63\u786e\u5b9e\u73b0\u6709\u70b9\u68d8\u624b\u3002\u5982\u679c\u60a8\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u5757\uff0c\u90a3\u4e48\u60a8\u4e0d\u5fc5\u62c5\u5fc3\u5e76\u53d1\u5199\u5165\u5668\u4e89\u76f8\u5199\u5165\u540c\u4e00\u4e2a\u5757\uff0c\u4f46\u662f\u5bf9\u4e8e\u8f83\u5c0f\u7684\u5199\u5165\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u4e3a\u4e86\u8bf4\u660e\u53ef\u80fd\u53d1\u751f\u7684\u53ef\u80fd\u9519\u8bef\uff0c\u8bf7\u8003\u8651\u4e00\u4e2a \\(R(3.2)\\) \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u7684\u5757\u5927\u5c0f\u4e3a 8MB\uff0c\u591a\u4e2a\u5ba2\u6237\u7aef\u9644\u52a0\u5230\u5355\u4e2a\u5757\u3002\u5ba2\u6237\u7aefA\u8ffd\u52a0512\u5b57\u8282\uff0c\u6210\u529f\u63d0\u4ea4\u8ffd\u52a0\u5230\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u5757\uff0c\u4f46\u5199\u5165\u7b2c\u4e09\u4e2a\u5757\u526f\u672c\u5931\u8d25\u3002\u7136\u540e\u5ba2\u6237\u7aef B \u63a7\u5236\u6587\u4ef6\u5e76\u9644\u52a0\u53e6\u5916 512 \u4e2a\u5b57\u8282\uff0c\u4f46\u7b2c\u4e8c\u4e2a\u5757\u526f\u672c\u5931\u8d25\uff0c\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a\u6210\u529f\u3002\u6700\u540e\uff0c\u5ba2\u6237\u7aef C \u63a7\u5236\u4e86\u6587\u4ef6\u5e76\u9644\u52a0\u4e86\u53e6\u5916 512 \u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u5757\u5199\u5165\u5931\u8d25\uff0c\u800c\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u6210\u529f\u3002\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u5757\u526f\u672c\u957f\u5ea6\u4e3a 1024 \u5b57\u8282\uff08\u7b2c\u4e00\u548c\u7b2c\u4e8c\u6b21\u8ffd\u52a0\uff09\uff0c\u7b2c\u4e8c\u4e2a\u526f\u672c\u957f\u5ea6\u4e3a 1024 \u5b57\u8282\uff08\u7b2c\u4e00\u548c\u7b2c\u4e09\u6b21\u8ffd\u52a0\uff09\uff0c\u7b2c\u4e09\u4e2a\u526f\u672c\u957f\u5ea6\u4e3a 1024 \u5b57\u8282\uff08\u7b2c\u4e8c\u548c\u7b2c\u4e09\u6b21\u8ffd\u52a0\uff09\u3002\u8bfb\u8005\u4f1a\u770b\u5230\u6587\u4ef6\u5143\u6570\u636e\u62a5\u544a\u7684\u5757\u957f\u5ea6\u4e3a 1536 \u5b57\u8282\uff0c\u4f46\u5b9e\u9645\u6570\u636e\u5757\u90fd\u4e0d\u662f\u90a3\u4e2a\u957f\u5ea6\uff01\u5e76\u4e14\u6ca1\u6709\u4e00\u4e2a\u5757\u5305\u542b\u76f8\u540c\u7684\u6570\u636e\uff01\u5e76\u4e14\u4e0d\u6e05\u695a\u5728\u5b8c\u6210\u8fd9\u4e9b\u5199\u5165\u65f6\u8bfb\u8005\u53ef\u80fd\u4f1a\u9605\u8bfb\u4ec0\u4e48\uff01\u6216\u8005\uff0c\u5982\u679c\u6240\u6709\u7684\u5757\u90fd\u4ee5\u76f8\u540c\u7684\u6570\u636e\u7ed3\u675f\uff01\u6216\u8005\uff0c\u5982\u679c\u8fd9\u7bc7\u535a\u6587\u4e2d\u7684\u5176\u4f59\u53e5\u5b50\u5c06\u4ee5\u611f\u53f9\u53f7\u7ed3\u5c3e\uff01 4 Tectonic \u5904\u7406\u8fd9\u4e9b\u6f5c\u5728\u95ee\u9898\u7684\u65b9\u5f0f\u662f\u5f3a\u5236\u6267\u884c\u4e24\u6761\u89c4\u5219\uff1a(1) \u53ea\u5141\u8bb8\u521b\u5efa\u5757\u7684\u5ba2\u6237\u7aef\u9644\u52a0\u5230\u5b83\uff0c\u4ee5\u53ca (2) \u5ba2\u6237\u7aef\u5411\u5143\u6570\u636e\u5c42\u63d0\u4ea4\u65b0\u7684\u5757\u957f\u5ea6\u548c\u6821\u9a8c\u548c\u4e4b\u524d\u786e\u8ba4\u4ef2\u88c1\u9644\u52a0\u5230\u5e94\u7528\u7a0b\u5e8f\u3002\u867d\u7136\u8bba\u6587\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u4f46\u6211\u8ba4\u4e3a\u5355\u4e2a\u5ba2\u6237\u7aef\u4f1a\u5c06\u5176\u8ffd\u52a0\u5e8f\u5217\u5316\u5230\u7ed9\u5b9a\u7684\u5757\u5b58\u50a8\u8282\u70b9\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5b83\u6267\u884c\u7b2c\u4e00\u6b21\u8ffd\u52a0\u548c\u7b2c\u4e8c\u6b21\u8ffd\u52a0\uff0c\u5b83\u5c06\u7b49\u5f85\u7b2c\u4e00\u6b21\u8ffd\u52a0\u5230\u5728\u5c06\u7b2c\u4e8c\u4e2a append \u5199\u5165\u5b58\u50a8\u8282\u70b9\u4e4b\u524d\u6210\u529f\u3002\u901a\u8fc7\u5ba2\u6237\u7aef\u5b8c\u6210\u8fd9\u79cd\u5e8f\u5217\u5316\uff0c\u5e76\u5f3a\u5236\u53ea\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u5199\u5165\u5757\uff0c\u6211\u4eec\u4e0a\u9762\u7684\u7ade\u4e89\u4e0d\u4f1a\u53d1\u751f\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u5c06\u5728\u5199\u5165\u7b2c\u4e8c\u4e2a\u8ffd\u52a0\u4e4b\u524d\u7b49\u5f85\u7b2c\u4e00\u4e2a\u8ffd\u52a0\u53d1\u751f\u5728\u5757\u5b58\u50a8\u8282\u70b9\u4e0a\u3002\u8fd9\u53ef\u4ee5\u786e\u4fdd\u591a\u4e2a\u4f5c\u8005\u4e0d\u4f1a\u4e92\u76f8\u8e29\u8e0f\u3002\u5728\u6bcf\u4e2a\u4ef2\u88c1\u8ffd\u52a0\u4e4b\u540e\u63d0\u4ea4\u5757\u957f\u5ea6\u548c\u6821\u9a8c\u548c\uff0c\u4f46\u5728\u5411\u5e94\u7528\u7a0b\u5e8f\u786e\u8ba4\u4e4b\u524d\u5411\u8bfb\u8005\u4fdd\u8bc1\u4ed6\u4eec\u53ef\u4ee5\u8bfb\u53d6\u7684\u5185\u5bb9\u3002\u8fd9\u610f\u5473\u7740\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5177\u6709\u5199\u540e\u8bfb\u4e00\u81f4\u6027\uff0c\u56e0\u4e3a Tectonic \u5411\u5e94\u7528\u7a0b\u5e8f\u786e\u8ba4\u7684\u4efb\u4f55\u6570\u636e\u90fd\u5df2\u6301\u4e45\u63d0\u4ea4\u5230\u4e24\u4e2a\u5757\u5b58\u50a8\u8282\u70b9\uff0c\u5e76\u5c06\u65b0\u957f\u5ea6\u63d0\u4ea4\u5230\u5143\u6570\u636e\u5c42\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c Tectonic \u62a5\u544a\u7684\u5757\u957f\u5ea6\u4e3a \\(B\\) \u5b57\u8282\uff0c\u90a3\u4e48\u81f3\u5c11 \\(B\\) \u5b57\u8282\u5df2\u7ecf\u88ab\u63d0\u4ea4\u5230\u4e24\u4e2a\u5757\u5b58\u50a8\u8282\u70b9\uff0c\u5e76\u4e14\u4efb\u4f55\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u8bfb\u53d6\u5230 \\(B\\)\u5b57\u8282\uff0c\u5e76\u4fdd\u8bc1\u5b83\u4eec\u662f\u6b63\u786e\u7684\u3002\u8bb8\u591a\u5de5\u4f5c\u8d1f\u8f7d\u662f\u201c\u4e00\u6b21\u5199\u5165\uff0c\u5f88\u5c11\u8bfb\u53d6\u201d\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u5e94\u8be5\u8fdb\u884c Reed-Solomon \u7f16\u7801\u800c\u4e0d\u662f\u590d\u5236\u4ee5\u51cf\u5c11\u5b58\u50a8\u5f00\u9500\u3002\u4f46\u662f\uff0c\u6570\u636e\u901a\u5e38\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u5199\u5165\uff0c\u5e76\u4e14\u5199\u5165\u5ef6\u8fdf\u5bf9\u5ba2\u6237\u7aef\u5f88\u91cd\u8981\uff0c\u56e0\u6b64\u4f7f\u7528\u590d\u5236\u7f16\u7801\u6765\u51cf\u5c11\u5c3e\u90e8\u5ef6\u8fdf 5 \u662f\u6709\u610f\u4e49\u7684\u3002\u5229\u7528\u590d\u5236\u5199\u5165\u6539\u8fdb\u7684\u5ef6\u8fdf\uff0c\u540c\u65f6\u8fd8\u5177\u6709\u63d0\u9ad8\u4e86 Reed-Solomon \u7f16\u7801\u7684\u5b57\u8282\u6548\u7387\u3002\n\u901a\u8fc7\u8ba9\u5ba2\u6237\u7aef\u4ee5\u590d\u5236\u7f16\u7801\u5199\u5165\u5757\uff0cTectonic \u53ef\u4ee5\u5403\u86cb\u7cd5\uff0c\u4e5f\u53ef\u4ee5\u5403\u5b83\uff0c\u4f46\u662f\u4e00\u65e6\u5757\u5df2\u6ee1\u5e76\u5bc6\u5c01\uff0c\u5ba2\u6237\u7aef\u5c06\u5728\u540e\u53f0\u5c06\u5757\u91cd\u65b0\u7f16\u7801\u4e3a Reed-Solomon\u3002\u901a\u8fc7\u6211\u4eec\u8ba8\u8bba\u7684\u6240\u6709\u4f18\u5316\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u83b7\u5f97\u4e86\u590d\u5236\u5199\u5165\u7684\u6539\u8fdb\u5ef6\u8fdf\uff0c\u4f46 Reed-Solomon \u5b58\u50a8\u7684\u7a7a\u95f4\u6548\u7387\u3002\u4ece\u8bba\u6587\u4e2d\u4e0d\u6e05\u695a\u5982\u679c\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u5d29\u6e83\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u4f46\u6211\u5047\u8bbe\u6709\u4e00\u4e2a\u540e\u53f0\u670d\u52a1\u53ef\u4ee5\u5c06\u5b8c\u5168\u5199\u5165\u7684\u5757\u91cd\u65b0\u7f16\u7801\u4e3a Reed-Solomon\u3002 Tectonic \u4f7f\u7528\u526f\u672c\u96c6\u590d\u5236\u6765\u6700\u5927\u7a0b\u5ea6\u5730\u51cf\u5c11\u5728\u9047\u5230\u534f\u8c03\u78c1\u76d8\u6545\u969c\u65f6\u6570\u636e\u4e22\u5931\u7684\u53ef\u80fd\u6027\u3002 Copyset \u590d\u5236\u771f\u7684\u5f88\u806a\u660e\uff0c\u4f46\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u7a0d\u5fae\u5907\u4efd\u4e00\u4e0b\uff0c\u4ee5\u8ba8\u8bba\u5728\u5c1d\u8bd5\u5c06\u6570\u636e\u653e\u7f6e\u5230\u78c1\u76d8\u4e0a\u65f6\u5b58\u5728\u7684\u56f0\u96be\u95ee\u9898\u548c\u6743\u8861\u3002\u5728\u9009\u62e9\u5c06\u6570\u636e\u5199\u5165\u54ea\u4e9b\u78c1\u76d8\u65f6\uff0c\u5728\u78c1\u76d8\u53ef\u80fd\u51fa\u73b0\u6545\u969c\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5728\u6570\u636e\u4e22\u5931\u7684\u53ef\u80fd\u6027\u4e0e\u6bcf\u4e2a\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u4e22\u5931\u7684\u6570\u636e\u91cf\u4e4b\u95f4\u8fdb\u884c\u6743\u8861\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5bf9\u4e8e\u6240\u6709 \\(R(3.2)\\) \u590d\u5236\u6587\u4ef6\uff0c\u60a8\u5c06\u6bcf\u4e2a\u5757\u526f\u672c\u5199\u5165\u968f\u673a\u9009\u62e9\u7684\u78c1\u76d8\uff0c\u5219\u4efb\u4f55 3 \u4e2a\u78c1\u76d8\u6545\u969c\u5c06\u5bfc\u81f4\u67d0\u4e9b\u590d\u5236\u6587\u4ef6\u7684\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u53ef\u80fd\u6027\u8d8a\u6765\u8d8a\u5927\u3002\u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u5757\uff0c\u6211\u4eec\u968f\u673a\u9009\u62e9\u4e00\u7ec4 3 \u4e2a\u78c1\u76d8\u6765\u5b58\u50a8\u5176\u5757\uff0c\u5e76\u4e14\u968f\u7740\u6211\u4eec\u5411\u7cfb\u7edf\u6dfb\u52a0\u66f4\u591a\u5757\uff0c\u6700\u7ec8\u6bcf\u7ec4 3 \u4e2a\u78c1\u76d8\u5c06\u5b58\u50a8\u67d0\u4e2a\u5757\u7684\u6240\u6709\u5757\u526f\u672c\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u968f\u673a\u78c1\u76d8\u9009\u62e9\uff0c\u5f53\u6211\u4eec\u7531\u4e8e\u6570\u636e\u4e2d\u5fc3\u6545\u969c\u800c\u4e22\u5931\u78c1\u76d8\u65f6\uff0c\u53d1\u751f\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u6982\u7387\u6700\u9ad8\u3002\u7136\u800c\uff0c\u6bcf\u4e2a\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u4e22\u5931\u7684\u6570\u636e\u91cf\u975e\u5e38\u4f4e\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5757\u7684\u5757\u526f\u672c\u6070\u597d\u4f4d\u4e8e\u4e00\u7ec4\u5931\u8d25\u7684\u78c1\u76d8\u4e0a\u7684\u53ef\u80fd\u6027\u5f88\u5c0f\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u968f\u673a\u9009\u62e9\u7684\u3002\u4e00\u79cd\u601d\u8003\u65b9\u5f0f\u662f\uff0c\u5982\u679c 3 \u4e2a\u78c1\u76d8\u53d1\u751f\u6545\u969c\uff0c\u5219\u4e22\u5931\u5757\u7684\u9884\u671f\u503c\u8f83\u4f4e\uff0c\u4f46\u81f3\u5c11\u4e22\u5931\u4e00\u4e2a\u5757\u7684\u6982\u7387\u5f88\u9ad8\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u60f3\u8c61\u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c06\u6240\u6709\u8282\u70b9\u5206\u6210 3 \u4e2a\u8282\u70b9\u7684\u96c6\u5408\uff0c\u79f0\u4e3a\u526f\u672c\u96c6\u3002\u5f53\u6211\u4eec\u60f3\u5c06\u4e00\u4e2a\u5757\u7684\u5757\u5206\u914d\u7ed9\u5b58\u50a8\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u9996\u5148\u4e3a\u8be5\u5757\u9009\u62e9\u4e00\u4e2a\u526f\u672c\u96c6\uff0c\u7136\u540e\u5c06\u5757\u526f\u672c\u5206\u914d\u7ed9\u8be5\u526f\u672c\u96c6\u7684 3 \u4e2a\u8282\u70b9\u3002\u5728\u5177\u6709 9 \u4e2a\u8282\u70b9\u7684\u6570\u636e\u4e2d\u5fc3\u4e2d\uff0c\u8282\u70b9 \\([1,2,3]\\) \u53ef\u80fd\u662f\u4e00\u4e2a\u526f\u672c\u96c6\uff0c\\([4,5,6]\\) \u5c06\u662f\u53e6\u4e00\u4e2a\u526f\u672c\u96c6\uff0c\u800c \\([7,8,9]\\ ) \u5c06\u662f\u6700\u540e\u4e00\u4e2a\u3002\u5728\u8be5\u65b9\u6848\u4e2d\uff0c\u53ea\u67093\u4e2a\u4e09\u8282\u70b9\u6545\u969c\u4f1a\u5bfc\u81f4\u6570\u636e\u4e22\u5931\uff0c\u5373\u53ea\u6709\u4e00\u4e2a\u526f\u672c\u96c6\u7684\u6240\u6709\u8282\u70b9\u4e22\u5931\u624d\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u5757\u7684\u6570\u636e\u4e22\u5931\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u4f4e\u6982\u7387\u7684\u4e8b\u4ef6\uff0c\u56e0\u4e3a\u5728\u53ef\u80fd\u7684 \\({9 \\choose 3} = 84\\) \u4e2a\u4e09\u8282\u70b9\u96c6\u5408\u4e2d\u53ea\u6709 3 \u4e2a\u96c6\u5408\u4f1a\u5bfc\u81f4\u6570\u636e\u4e22\u5931\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u968f\u673a\u8282\u70b9\u590d\u5236\u6700\u7ec8\u4f1a\u4f7f\u6240\u6709 84 \u4e2a\u4e09\u8282\u70b9\u96c6\u6210\u4e3a\u67d0\u4e2a\u5757\u7684\u526f\u672c\u96c6\uff0c\u56e0\u6b64\u526f\u672c\u96c6\u590d\u5236\u6bd4\u968f\u673a\u590d\u5236\u63d0\u9ad8\u4e86 28 \u500d\uff0c\u4ee5\u964d\u4f4e\u6570\u636e\u4e22\u5931\u7684\u6982\u7387\u3002\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5bf9\u4e8e\u526f\u672c\u96c6\u590d\u5236\uff0c\u6bcf\u4e2a\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u4e22\u5931\u7684\u6570\u636e\u91cf\u4f1a\u975e\u5e38\u9ad8\u2014\u2014\u5206\u914d\u7ed9\u526f\u672c\u96c6\u7684\u6240\u6709\u5757\u90fd\u5c06\u4e22\u5931\u3002\u867d\u7136\u4e22\u5931\u6240\u6709\u6570\u636e\u53ef\u80fd\u4e0d\u662f\u6b63\u786e\u7684\u6743\u8861\uff0c\u4f46\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u6bcf\u4e2a\u4e8b\u4ef6\u4e22\u5931\u66f4\u591a\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6743\u8861\uff0c\u4ee5\u51cf\u5c11\u4efb\u4f55\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u53ef\u80fd\u6027\u3002\u8fd9\u662f\u56e0\u4e3a\u4efb\u4f55\u6570\u91cf\u7684\u6570\u636e\u4e22\u5931\u90fd\u4f1a\u5bfc\u81f4\u5927\u91cf\u56fa\u5b9a\u7684\u6570\u636e\u6062\u590d\u5de5\u4f5c\u5f00\u9500\uff0c\u4f5c\u4e3a\u8fd0\u8425\u5546\uff0c\u6211\u4eec\u771f\u7684\u5e0c\u671b\u5c3d\u53ef\u80fd\u907f\u514d\u5b83\u3002\u8fd9\u662f\u6211\u4eec\u5bfb\u627e\u66f4\u597d\u7684\u65b9\u5f0f\u5c06\u5757\u5206\u914d\u5230\u78c1\u76d8\u7684\u52a8\u673a\u3002\n\u9664\u4e86\u5f71\u54cd\u6570\u636e\u4e22\u5931\u7684\u6982\u7387\u4e4b\u5916\uff0c\u6211\u4eec\u5982\u4f55\u5c06\u5757\u5206\u914d\u7ed9\u8282\u70b9\u4e5f\u4f1a\u5f71\u54cd\u6211\u4eec\u5047\u8bbe\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b\u5904\u7406\u7684\u7cfb\u7edf\u7684\u5176\u4ed6\u5c5e\u6027\u3002\u5728\u6211\u4eec\u7684 naive 3 copyset \u8bbe\u7f6e\u4e2d\uff0c\u5982\u679c\u8282\u70b9 1 \u53d1\u751f\u6545\u969c\uff0c\u6211\u4eec\u53ea\u80fd\u4ece\u8282\u70b9 2 \u548c 3 \u6062\u590d\u8be5\u6570\u636e\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5c06\u8fd9\u4e9b\u8282\u70b9\u4e0a\u7684\u8d1f\u8f7d\u589e\u52a0 50%\u3002\u5bf9\u4e8e\u968f\u673a\u78c1\u76d8\u9009\u62e9\u8bbe\u7f6e\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u51fa\u73b0\u6545\u969c\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u6240\u6709\u5269\u4f59\u8282\u70b9\u6062\u590d\u6570\u636e\uff0c\u56e0\u4e3a\u6570\u636e\u5df2\u5747\u5300\u5206\u5e03\u5728\u6240\u6709 84 \u4e2a\u526f\u672c\u96c6\u4e0a\u3002\u56e0\u6b64\uff0c\u968f\u673a\u78c1\u76d8\u9009\u62e9\u5728\u63d0\u4f9b\u6f5c\u5728\u6062\u590d\u5de5\u4f5c\u7684\u826f\u597d\u8d1f\u8f7d\u5e73\u8861\u65b9\u9762\u5177\u6709\u4f18\u52bf\u3002\u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u6253\u7834\u4e25\u683c\u7684\u526f\u672c\u96c6\u8bbe\u7f6e\uff0c\u5e76\u5141\u8bb8\u4e00\u4e2a\u8282\u70b9\u4e0a\u7684\u6570\u636e\u6f5c\u5728\u5730\u590d\u5236\u5230\u66f4\u591a\u7684\u5176\u4ed6\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u66f4\u5feb\u5730\u4ece\u5355\u4e2a\u8282\u70b9\u6545\u969c\u4e2d\u6062\u590d\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5728\u6240\u6709\u8282\u70b9\u4e0a\u65bd\u52a0\u592a\u591a\u8d1f\u8f7d\u3002\u5269\u4f59\u8282\u70b9\u3002\u8ba9\u6211\u4eec\u5c06\u5b58\u50a8\u5355\u4e2a\u8282\u70b9\u6570\u636e\u526f\u672c\u7684\u8282\u70b9\u6570\u79f0\u4e3a\u6563\u70b9\u5bbd\u5ea6\u3002\u5728\u4e0a\u9762 9 \u4e2a\u8282\u70b9\u548c 3 \u4e2a\u526f\u672c\u96c6\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684\u5206\u6563\u5bbd\u5ea6\u4e3a 2\uff0c\u56e0\u4e3a\u53ea\u6709 2 \u4e2a\u5176\u4ed6\u8282\u70b9\u62e5\u6709\u4efb\u4f55\u5176\u4ed6\u8282\u70b9\u6570\u636e\u7684\u526f\u672c\u2014\u2014\u8282\u70b9 1 \u7684\u6570\u636e\u4e5f\u5728\u8282\u70b9 2 \u548c\u8282\u70b9 3 \u4e0a\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5f15\u5165\u4e86 3 \\([1,4,7]\\)\u3001\\([2,5,8]\\) \u548c \\([3,6,9]\\) \u7684\u66f4\u591a\u526f\u672c\u96c6\u7136\u540e\u73b0\u5728\u8282\u70b9 1 \u4e0a\u7684\u6570\u636e\u53ef\u4ee5\u5728\u4efb\u4e00\u8282\u70b9 2\u30013\u30014 \u6216 7\uff0c\u56e0\u6b64\u5206\u6563\u5bbd\u5ea6\u73b0\u5728\u4e3a 4\u2014\u2014\u5141\u8bb8\u6211\u4eec\u66f4\u5feb\u5730\u4ece\u8282\u70b9\u6545\u969c\u4e2d\u6062\u590d\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u5e0c\u671b\u62e5\u6709\u8f83\u9ad8\u7684\u5206\u6563\u5bbd\u5ea6\u4ee5\u786e\u4fdd\u6211\u4eec\u53ef\u4ee5\u4ece\u5927\u91cf\u8282\u70b9\u6062\u590d\u6570\u636e\uff0c\u4f46\u6211\u4eec\u4e5f\u5e0c\u671b\u5c06\u526f\u672c\u96c6\u7684\u6570\u91cf\u4fdd\u6301\u5728\u8f83\u4f4e\u6c34\u5e73\u4ee5\u964d\u4f4e\u53d1\u751f\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u53ef\u80fd\u6027\u3002\u60f3\u51fa\u4e00\u4e2a\u65b9\u6848\u6765\u505a\u8fd9\u4e24\u4ef6\u4e8b\u662f\u4e00\u4e2a\u4e0d\u5e73\u51e1\u7684\u95ee\u9898\u3002 Copysets \u8bba\u6587\u4e3a\u8fd9\u4e2a\u95ee\u9898\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8fd1\u4e4e\u6700\u4f18\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u79f0\u4e3a\u590d\u5236\u96c6\u590d\u5236\uff0c\u65e8\u5728\u521b\u5efa\u7ed9\u5b9a\u6563\u5e03\u5bbd\u5ea6\u7684\u5c11\u6570\u526f\u672c\u96c6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u526f\u672c\u96c6\u590d\u5236\u964d\u4f4e\u4e86\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u53ef\u80fd\u6027\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u8282\u70b9\u4e4b\u95f4\u7684\u826f\u597d\u8d1f\u8f7d\u5e73\u8861\u3002\u8fd9\u7bc7\u8bba\u6587\u89e3\u91ca\u4e86\u4ed6\u4eec\u7684\u7b97\u6cd5\u5982\u4f55\u662f\u6700\u4f18\u7684\uff0c\u4f46\u6838\u5fc3\u601d\u60f3\u662f\u4f60\u521b\u5efa\u7cfb\u7edf\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6392\u5217\uff0c\u7136\u540e\u901a\u8fc7\u5c06\u6392\u5217\u7ec4\u5408\u6210\u8fde\u7eed\u8282\u70b9\u7684\u8fd0\u884c\u6765\u4ece\u6392\u5217\u4e2d\u5f62\u6210\u526f\u672c\u96c6\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u66f4\u591a\u6392\u5217\u6765\u589e\u52a0\u5206\u6563\u5bbd\u5ea6\uff0c\u4f46\u8fd9\u5c06\u521b\u5efa\u66f4\u591a\u526f\u672c\u96c6\uff0c\u56e0\u4e3a\u989d\u5916\u7684\u6392\u5217\u5c06\u5177\u6709\u4e0d\u540c\u7684\u8282\u70b9\u6539\u7ec4\uff0c\u4ece\u800c\u5bfc\u81f4\u4e0d\u540c\u548c\u66f4\u591a\u7684\u526f\u672c\u96c6\u3002\u4f46\u5173\u952e\u662f\u526f\u672c\u96c6\u6570\u91cf\u7684\u8fd9\u79cd\u589e\u52a0\u5c06\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4ece\u800c\u4f7f\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u6982\u7387\u5c3d\u53ef\u80fd\u4f4e\u3002\u5f53\u5ba2\u6237\u7aef\u9700\u8981\u5199\u5165\u5757\u65f6\uff0c\u9996\u5148\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4e3b\u8282\u70b9\uff0c\u8fd9\u5c06\u526f\u672c\u96c6\u96c6\u9650\u5236\u4e3a\u6bcf\u4e2a\u6392\u5217\u4e00\u4e2a\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u968f\u673a\u6392\u5217\u53ca\u5176\u526f\u672c\u96c6\uff0c\u6216\u8005\u5728 Tectonic \u7684\u60c5\u51b5\u4e0b\uff0c\u5757\u5c42\u4ece\u5bf9\u5e94\u4e8e\u8be5\u5757 ID \u7684\u6392\u5217\u4e2d\u9009\u62e9\u526f\u672c\u96c6\uff0c\u4ee5\u6392\u5217\u6570\u4e3a\u6a21\uff0c\u4ee5\u4f7f\u5176\u5177\u6709\u786e\u5b9a\u6027\u3002\n\u867d\u7136\u76f8\u5bf9\u4e8e\u526f\u672c\u96c6\u65b9\u6848\u521d\u59cb\u653e\u7f6e\u662f\u6700\u4f73\u7684\uff0c\u4f46\u78c1\u76d8\u4ecd\u7136\u4f1a\u51fa\u73b0\u6545\u969c\u6216\u88ab\u53d6\u51fa\u8fdb\u884c\u7ef4\u62a4\uff0c\u56e0\u6b64\u540e\u53f0\u91cd\u65b0\u5e73\u8861\u5668\u670d\u52a1\u4e5f\u5c1d\u8bd5\u5c06\u5757\u7684\u5757\u4fdd\u7559\u5728\u5176\u539f\u59cb\u526f\u672c\u96c6\u4e2d\u3002 Copyset \u590d\u5236\u548c Tectonic&#39; ......", "note_en": "Today\u2019s paper is  Facebook\u2019s Tectonic Filesystem: Efficiency from Exascale from  FaST \u201821. The paper covers the Tectonic Filesystem at Facebook, its implementation, and various design decisions they made. I\u2019ll summarize the paper and do a deeper dive on some of its highlights.\n While there is a rich history of filesystem papers and systems, it\u2019s nice to read this Tectonic paper, since many of the oft-quoted papers are getting a bit long in the tooth.  The Google File System (2003) paper is almost two decades old but is cited more than  Bill Murray in the wild.  1 There are some more modern papers, mostly from Microsoft like  Windows Azure Storage (2011) and  Azure Data Lake Store (2017), but it\u2019s nice to see something from a different company.\n  Tectonic uses a thick-client architecture, to enable streaming of data directly from disks to the client, and a sharded metadata service to serve the filesystem. Tectonic shards out the metadata layer into three components: (1) Name layer, (2) File layer, and (3) Block layer. Each of the layers are responsible for a part of the metadata, and all of them are implemented as stateless microservices on top of  ZippyDB, a horizontally scalable key-value store. Since the metadata layers are completely separate, each layer can be independently scaled to handle its load.\n  The Name layer provides the directory tree abstraction, mapping directories to the files and directories they contain. The File layer maps from files to their constituent  blocks. Blocks are an abstraction for a contiguous string of bytes that hide how they are stored or encoded. A file is just an ordered list of blocks.\n In Tectonic, blocks use either replicated encoding, where \\(N\\) identical chunks each store a complete copy of the block, or use  Reed-Solomon encoding where the block is encoded into \\(X\\) data chunks and \\(Y\\) code/parity chunks. The Block layer contains the mapping from a block to its encoding and its set of chunks.\n The final piece of Tectonic is the  Chunk Store which is its own distributed data-store where nodes store the raw byte chunks and some minimal metadata to map from chunk id to the bytes stored on a local, modified  XFS filesystem.\n  The schemas of the Name layer, File layer, and Block layer are in this table from the paper:\n    The Name layer maintains the mapping from directory to the subdirectories and files contained within it, and is sharded by the directory\u2019s  dir_id. The File layer maps from files to its list of logical blocks and is sharded by the  file_id. The Block layer maps from blocks to the list of chunks/disks that store it and is sharded by the  blk_id. The Block layer also maintains a mapping from every disk to the list of blocks that are stored on it. This reverse mapping is useful for maintenance, e.g., when a disk is lost this mapping allows background maintenance tasks to enumerate exactly which blocks need to be up-replicated or otherwise reconstructed.\n ZippyDB groups keys together into shards, and guarantees that all key, value pairs with the same sharding id, are placed into the same shard. This means that Tectonic\u2019s Name layer, which shards by  dir_id, can quickly serve from a single shard a strongly consistent list of all subdirectories and files in a directory, and its File layer, sharded by  file_id, can do the same for the list of all blocks for a file. However there\u2019s no guarantee that subdirectories are placed on the same shard as the parent directory, and ZippyDB does not provide any cross-shard transactions, so most recursive filesystem operations are not supported.\n Tectonic\u2019s ZippyDB schema also stores lists as fully \u201cexpanded\u201d combinations of (key,value) pairs. That is, for a directory  foo containing subdirectories  bar and  quux, Tectonic stores two separate keys  (foo, bar) and  (foo, quux), and handles list requests for directory  foo with a prefix-key scan of  foo,. This expanded list format is used to reduce the cost of adding or removing single entries to large directories that already have many millions of files, since Tectonic does not have to deserialize, edit, serialize, and write back a million entry list.\n  Tectonic has single-writer, append-only semantics \u2013 meaning Tectonic prohibits multiple concurrent writers to a file, and files can only be appended to. To ensure single-writer semantics, whenever a client opens a file it is given a write token that is stored with the file in the metadata layer. Any time a client wishes to write to the file, it must include the write token, and only the most up-to-date write token is allowed to mutate the file metadata and write to its chunks.\n  While the control path goes through the metadata layer and ZippyDB, the data path is direct from the client to the chunk storage nodes. This reduces the networking bandwidth required for the system as a whole, as well as the compute required to move the bytes over the network.\n Tectonic\u2019s thick-client has very fine-grained control over its reads and writes, since it goes directly to the chunk storage nodes to read and write individual chunks. This allows the client to be tuned for different workloads, e.g., whether to optimize for durability or latency of writes. The Tectonic client can also tune these parameters per file, and even per block, as opposed to other systems that may enforce a single configuration across the entire filesystem.\n  Tectonic uses the common  quorum commit, or quorum write technique, to optimize clients doing full-block writes \u2013 only requiring a client to durably write to a majority of all chunk replicas of a block in order to commit the block. To illustrate, for a \\(R(3.2)\\) replicated file with 3 replicas  2 Tectonic will only require the client to finish writing to 2 of the replica chunks before considering the block committed \u2013 which helps tail latency  3. If the final 3rd replica chunk write fails, Tectonic\u2019s background maintenance services will fix up the block by repairing the 3rd chunk replica.\n  In addition to this common optimization, Tectonic uses a neat technique called  Reservation Requests to optimize full-block writes, that are similar to hedged requests discussed in  The Tail At Scale. To motivate reservation requests, we\u2019ll first take a little detour and look at hedged requests, their benefits and drawbacks, and why reservation requests might be more suitable for Tectonic\u2019s use case.\n Hedged requests are a latency optimization where instead of sending a single request for a piece of work, you send the request to potentially multiple servers, and accept the first response from the fastest server. The key to not just duplicating a lot of work though is that instead of immediately sending the request to multiple servers, you wait for a bit, where \u201ca bit\u201d means how long you\u2019d expect a normal request to take. If the reply still hasn\u2019t arrived, then you \u201chedge\u201d your bet that this server will respond in a reasonable timeframe and send the same request to another replica.\n    Hedged requests help improve long-tail latency, since you avoid the situation where the client has to wait for a possibly unhealthy node to respond to its request before making any progress. However, a problem with hedged requests is that they can create a blow-up in the amount of work done by the receiving servers, as well as the additional bandwidth you need for the extra requests and responses \u2013 which is of concern for a storage system like Tectonic. In addition, Tectonic clients can\u2019t really just choose another random storage node to write their data to, they have to coordinate with the metadata layer so that the metadata accurately reflects which nodes store which chunks.\n Tectonic instead uses  reservation requests, which are small, ping-like, requests that a client sends to multiple chunk storage nodes to decide which nodes to actually write its data to. Tectonic chooses the chunk storage nodes that respond first as the nodes to do the actual writes to, with the hypothesis that nodes that can respond quickly are not currently overloaded. The reservation requests don\u2019t carry any of the data for actual writing, so they use very little bandwidth, and the processing can be super cheap.\n For example, if a client was writing to a \\(R(3.2)\\) replicated file, the client would first send reservation requests to 5 chunk storage nodes.\n  The 3 storage nodes that respond first are chosen by the client to actually send the 3 write requests to. In this way, the data is still only broadcast to 3 nodes, but the quick health-checking done first via the reservation requests reduces the likelihood that the client will wait on an unhealthy or stuck node, thereby reducing tail latency.\n  Reservation requests don\u2019t use any extra bandwidth or processing, but do have drawbacks compared to hedged requests. Since full-block writes have to first perform these reservation requests, they add a little bit of latency to each of the writes. This is why reservation requests are only used for full-block writes, where the amount of data being written is large enough that this latency overhead is an acceptable tradeoff for better tail latency. I would assume reservation requests work well in practice, but I\u2019d be interested how recent the health-checking and load-balancing signal provided by reservation requests has to be to avoid the worst of the tail latency. I could imagine a system using less frequent checks might still be able to provide the majority of the benefit of reservation requests, while also reducing the amount of work done.\n  Tectonic also optimizes smaller than block-size appends via quorum append, similar to full block writes. The optimization helps reduce tail latency, but for partial block appends instead of full block writes, quorum commit is a wee bit trickier to implement correctly. If you\u2019re writing a whole block, then you don\u2019t have to worry about concurrent writers racing to write to the same block, but with smaller writes this can be a problem.\n To illustrate the possible bugs that can happen, consider a \\(R(3.2)\\) file with a 8MB block size and multiple clients appending to a single block. Client A appends 512 bytes, and successfully commits the append to the first and second chunks, but the write to the third chunk replica fails. Then Client B takes control of the file and appends another 512 bytes, but the 2nd chunk replica fails, and the 1st and 3rd succeed. Finally, client C takes control of the file and appends another 512 bytes, but the 1st chunk write fails, while the 2nd and 3rd succeed. You\u2019re left with the 1st chunk replica at length 1024 bytes (1st &amp; 2nd appends), the 2nd replica at 1024 bytes (1st and 3rd appends), and the 3rd replica at 1024 bytes (2nd &amp; 3rd appends).\n  Readers would see file metadata reporting a block length of 1536 bytes, but none of the actual data chunks are that length! And none of the chunks contain the same data!  And it\u2019s unclear exactly what readers might read while these writes are being done! Or if all the chunks will end up with the same data! Or if the rest of the sentences in this blog post will end in exclamation points!   4\n The way Tectonic deals with these potential problems is to enforce two rules: (1) Only allow the client that created a block to append to it, and (2) The client commits to the metadata layer the new block-length and checksum before acknowledging the quorum append to the application.\n Although the paper doesn\u2019t spell this out explicitly, I presume that a single client will serialize its appends to a given chunk storage node \u2013 that is, if it\u2019s performing a first append and a second append, it will wait for the first append to succeed before writing the second append to the storage node. With this serialization done by a client, and enforcing only a single client can write to a block, our race above cannot happen as the client will wait for the 1st append to happen to a chunk storage node, before writing the 2nd append. This makes sure that multiple writers won\u2019t stomp over each other.\n  Committing the block-length and checksum after each quorum append, but before acknowledging to the application gives readers guarantees about what they can read. It means the application should have read-after-write consistency, since any data that\u2019s been acknowledged by Tectonic to the application, has been durably committed to two chunk storage nodes and the new length committed to the metadata layer. In general, this means that if Tectonic reports a block length of \\(B\\) bytes, then at least \\(B\\) bytes have been comitted to two chunk storage nodes, and any client can read up to \\(B\\) bytes and be guaranteed they\u2019re correct.\n  Many workloads are \u201cwrite once, read rarely\u201d which would imply that the data should be Reed-Solomon encoded rather than replicated to reduce the storage overhead. However, the data is often written interactively, and the write latency is important to the client so it makes sense to use replicated encoding to reduce tail latency  5. It would be nice to take advantage of the improved latency of replicated writes while also having the improved byte efficiency of Reed-Solomon encoding.\n Tectonic is able to have its cake and eat it too by having the client write the block in a replicated encoding, but then once the block is full and sealed, the client will re-encode the block to Reed-Solomon in the background. This way the application gets the improved latency of replicated writes, with all the optimizations we discussed, but the space-efficiency of Reed-Solomon storage. It\u2019s unclear from the paper what happens if the client application crashes, but I assume there is a background service that can re-encode fully written blocks to Reed-Solomon.\n  Tectonic uses   copyset replication to minimize its probability of data loss in the face of coordinated disk failures. Copyset replication is really smart, but we\u2019ll have to back up a bit to discuss the difficult problems and tradeoffs that exist when trying to place data onto disks.\n When choosing which disks to write data to, in a world where disks can fail, there is a tradeoff between the likelihood of data loss and how much data is lost per data loss event. For example, if for all \\(R(3.2)\\) replicated files, you write each chunk replica to a randomly selected disk, it becomes increasingly likely that any 3 disk failures will result in a data loss event for some replicated file. This is because for every block, we choose a random set of 3 disks to store its chunks on, and as we add more blocks to the system, eventually every set of 3 disks will store all the chunk replicas for  some block.\n This means that for random disk selection, when we lose disks due to failures in the datacenter, we have the highest probability of a data loss event. However, the  amount of data lost per data loss event is very low, because of the low probability that a block will have its chunk replicas on exactly the set of disks that fail since they were chosen randomly. One way to think about this is that if 3 disks fail then the  expected value of blocks lost is low, but the probability that at least one block will be lost is high.\n However you could imagine another approach where all the nodes are separated into sets of 3 nodes, called a  copyset. When we want to assign chunks of a block to storage nodes, we first choose a copyset for the block, and then the chunk replicas are assigned to the 3 nodes of the copyset. In a datacenter with 9 nodes, nodes \\([1,2,3]\\) might be one copyset, \\([4,5,6]\\) would be another, and \\([7,8,9]\\) would be the last.\n  In this scheme, there are only 3 three-node failures that would cause data loss, i.e., only a loss of all the nodes of a copyset would cause data loss for a block. This is a very low probability event given that only 3 sets out of a possible \\({9 \\choose 3} = 84\\) three-node sets cause data loss. In comparison, random node replication will eventually make all 84 three-node sets a copyset for  some block, so copyset replication is a 28x improvement over random replication for reducing the probability of data loss. Remember though, that for copyset replication the amount of data lost per data loss event would be quite high \u2013  all of the blocks assigned to the copyset would be lost.\n  While losing all of the data is probably not the right trade off, we\u2019d probably trade off a little bit more data lost per event in order to reduce the likelihood of any data loss event. This is because any amount of data loss incurs such a large fixed overhead of work to recover data that as operators we\u2019d really prefer to avoid it as much as possible. This is our motivation for finding a better way of allocating chunks to disks.\n Besides affecting the probability of data loss, how we assign chunks to nodes also affect other properties of the system that our hypothetical solution will have to deal with. In our naive 3 copyset setup, if node 1 failed, we could only recover that data from node 2 and 3, which could potentially increase the load on those nodes by 50%. For the random disk selection setup, if a node fails we can recover the data from all of the remaining nodes, since the data has been spread uniformly across all 84 copysets. So the random disk selection has the edge here in providing good load-balancing of potential recovery work.\n  However if we broke with our strict copyset setup, and allowed the data on a node to potentially be replicated to a larger number of other nodes, then we could recover from a single node failure faster, and not put as much load on all of the remaining nodes.\n Let\u2019s call the number of nodes that store copies for a single node\u2019s data our  scatter width. In our example above of 9 nodes, and 3 copysets, our scatter width is 2, as only 2 other nodes have copies of any other node\u2019s data \u2013 node 1 has its data also on node 2 and node 3. However, if we introduced 3 more copysets of \\([1,4,7]\\), \\([2,5,8]\\), and \\([3,6,9]\\) then now the data on node 1 could be on either node 2, 3, 4, or 7, so the scatter width would be 4 now \u2013 allowing us to recover from node failures faster.\n  So to summarize, we\u2019d like to have a high scatter width to ensure we can recover data from lots of nodes, but we also want to keep the number of copysets low in order to reduce the probability of a data loss event. Coming up with a scheme to do both of these things is a non-trivial problem.\n The  Copysets paper presents a near optimal solution to this problem called  copyset replication, that aims to create the fewset number of copysets given a scatter width. To put it another way, copyset replication reduces the probability of a data loss event while still allowing good load-balancing between nodes.\n The paper explains how their algorithm is optimal, but the core idea is that you create permutations of all nodes in the system, then form copysets from a permutation by chunking up the permutation into runs of consecutive nodes. You can increase scatter width by creating more permutations, but this will create more copysets since an additional permutation will have a different shuffling of nodes which results in different and more copysets. But the key is that this increase in the number of copysets will be as minimal as possible, keeping the probability of a data loss event as low as possible.\n  When a client needs to write a block, first a node is chosen randomly as the  primary, which constrains the set of copysets down to one per permutation. You could choose a random permutation and its copyset, or in Tectonic\u2019s case the Block layer chooses the copyset from the permutation corresponding to that block ID modulo the number of permutations so that it\u2019s deterministic.\n  While the initial placement is optimal with respect to the copyset scheme, disks will still fail or be taken out for maintenance, so the background rebalancer service also tries to keep a block\u2019s chunks in its original copyset.\n Copyset replication, and Tectonic\u2019\n......", "posttime": "2021-07-26 08:18:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "facebook,\u6784\u9020,tectonic,\u8282\u70b9", "title": "Facebook \u7684\u6784\u9020\u6587\u4ef6\u7cfb\u7edf\uff1aExascale \u7684\u6548\u7387", "title_en": "Facebook's Tectonic Filesystem:Efficiency from Exascale", "transed": 1, "url": "https://paulcavallaro.com/blog/facebook-tectonic-filesystem/", "via": "", "real_tags": ["facebook", "\u6784\u9020", "tectonic", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "128366848b2d1f4a1cb3f28584ca70ab.png", "infoid": 1069742, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Wasp\uff08Web \u5e94\u7528\u7a0b\u5e8f\u89c4\u8303\u8bed\u8a00\uff09\u662f\u4e00\u79cd\u58f0\u660e\u5f0f DSL\uff08\u57df\u7279\u5b9a\u8bed\u8a00\uff09\uff0c\u7528\u4e8e\u4ee5\u66f4\u5c11\u7684\u4ee3\u7801\u5f00\u53d1\u3001\u6784\u5efa\u548c\u90e8\u7f72\u73b0\u4ee3\u5168\u6808 Web \u5e94\u7528\u7a0b\u5e8f\u3002\u5e94\u7528\u7a0b\u5e8f\u3001\u9875\u9762\u3001\u7528\u6237\u3001\u767b\u5f55\u3001\u524d\u7aef\u3001\u751f\u4ea7\u7b49\u6982\u5ff5\u90fd\u878d\u5165\u5230\u8bed\u8a00\u4e2d\uff0c\u5e26\u6765\u4e86\u65b0\u7684\u8868\u8fbe\u6c34\u5e73\uff0c\u8ba9\u60a8\u53ef\u4ee5\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u884c\u5b8c\u6210\u66f4\u591a\u7684\u5de5\u4f5c\u3002\u5728\u4f7f\u7528 Wasp \u63cf\u8ff0\u9ad8\u7ea7\u529f\u80fd\u7684\u540c\u65f6\uff0c\u60a8\u4ecd\u7136\u4f7f\u7528\u81ea\u5df1\u559c\u6b22\u7684\u6280\u672f\uff08\u76ee\u524d\u662f React\u3001NodeJS\u3001Prisma\uff09\u7f16\u5199\u5176\u4f59\u903b\u8f91\u3002\u6ce8\u610f\uff1aWasp \u5904\u4e8e alpha \u9636\u6bb5\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u53d1\u751f\u5f88\u5927\u53d8\u5316\uff0c\u5b58\u5728\u9519\u8bef\u5e76\u9519\u8fc7\u91cd\u8981\u529f\u80fd\u3002 // file: main.wasp app TodoApp { title: &quot;Todo App&quot; } route &quot;/&quot; -&gt; page Main page Main { component: import Main from &quot;@ext/pages/Main.js&quot; // \u5bfc\u5165 React \u7ec4\u4ef6\u3002 } query getTasks { fn: import { getTasks } from &quot;@ext/queries.js&quot; , // \u5bfc\u5165 NodeJS \u4ee3\u7801\u3002\u5b9e\u4f53\uff1a[\u4efb\u52a1]}\u5b9e\u4f53\u4efb\u52a1{=psl id Int@id@default(autoincrement())\u63cf\u8ff0\u5b57\u7b26\u4e32isDone\u5e03\u5c14@default(false)psl=}\u6e90\u6587\u4ef6(.wasp,.js(x),.css,. ..) \u7531 waspc\uff08Wasp \u7f16\u8bd1\u5668\uff09\u7f16\u8bd1\u6210\u60a8\u9009\u62e9\u7684 Web \u6280\u672f\u5806\u6808\uff08\u76ee\u524d\u4e3a React + NodeJS/ExpressJS + Prisma\uff09\u3002\u5feb\u901f\u5165\u95e8\uff1a\u7531\u4e8e\u5b83\u7684\u8868\u73b0\u529b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5f88\u5c11\u7684\u51e0\u884c\u7b80\u6d01\u3001\u4e00\u81f4\u3001\u58f0\u660e\u6027\u7684\u4ee3\u7801\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u548c\u90e8\u7f72\u53ef\u7528\u4e8e\u751f\u4ea7\u7684 Web \u5e94\u7528\u7a0b\u5e8f\u3002\n\u7075\u6d3b\uff1a\u5f53\u60a8\u9700\u8981\u6bd4 Wasp \u63d0\u4f9b\u7684\u66f4\u591a\u63a7\u5236\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u73b0\u6709\u6280\u672f\uff08\u4f8b\u5982 js/html/css/...\uff09\u7f16\u5199\u4ee3\u7801\uff0c\u5e76\u5c06\u5176\u4e0e Wasp \u4ee3\u7801\u7ed3\u5408\u4f7f\u7528\uff01\u65e0\u9501\u5b9a\uff1a\u5982\u679c Wasp \u5bf9\u60a8\u6765\u8bf4\u9650\u5236\u592a\u591a\uff0c\u53ea\u9700\u5f39\u51fa\u5e76\u7ee7\u7eed\u751f\u6210\u4eba\u7c7b\u53ef\u8bfb\u7684\u6e90\u4ee3\u7801\u5373\u53ef\u3002\u5728 OSX/Linux \u4e0a\u5b89\u88c5 Wasp\u3002\u4ece\u90a3\u91cc\uff0c\u53ea\u9700\u6309\u7167\u8bf4\u660e\u5728\u4e0d\u5230\u4e00\u5206\u949f\u7684\u65f6\u95f4\u5185\u8fd0\u884c\u60a8\u7684\u7b2c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff01\u8fd9\u662f Wasp Universe \u7684\u4e3b\u8981\u5b58\u50a8\u5e93\uff0c\u5305\u542b\u6838\u5fc3\u4ee3\u7801\uff08\u4e3b\u8981\u662f waspc - Wasp \u7f16\u8bd1\u5668\uff09\u548c\u652f\u6301\u6750\u6599\u3002\u76ee\u524d\uff0cWasp \u5904\u4e8e alpha \u9636\u6bb5\u5e76\u5177\u6709\u8db3\u591f\u7684\u529f\u80fd\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u5f00\u53d1\u57fa\u672c\u7684 Web \u5e94\u7528\u7a0b\u5e8f\uff01\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u5b83\u5728\u67d0\u4e9b\u5730\u65b9\u7f3a\u5c11\u7075\u6d3b\u6027\u6216\u7f3a\u5c11\u4e00\u4e9b\u66f4\u5927\u7684\u529f\u80fd\uff0c\u4f46\u57fa\u7840\u5df2\u7ecf\u5b58\u5728\uff0c\u6211\u4eec\u73b0\u5728\u6b63\u5728\u6dfb\u52a0\u5728\u5b83\u4eec\u4e4b\u4e0a\u3002\u4e07\u4e00\u4f60\u5361\u4f4f\u4e86\uff0c\u4f60\u53ef\u4ee5\u83b7\u53d6\u751f\u6210\u7684\u4ee3\u7801\u5e76\u7ee7\u7eed\u5b83\u3002\u968f\u7740 Wasp \u7684\u8fdb\u4e00\u6b65\u53d1\u5c55\uff0c\u5b83\u5e94\u8be5\u5141\u8bb8\u5f00\u53d1\u8d8a\u6765\u8d8a\u590d\u6742\u7684 Web \u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u65e0\u9700\u5f39\u51fa\uff01\u867d\u7136\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u5728\u672a\u6765\u652f\u6301\u591a\u4e2a Web \u6280\u672f\u5806\u6808\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u4e13\u6ce8\u4e8e\u7279\u5b9a\u5806\u6808\uff1aReact + react-query\u3001NodeJS + ExpressJS\u3001Prisma\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8003\u8651\u5230\u8d8b\u52bf\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6539\u53d8\u8fd9\u4e00\u70b9\uff0c\u4f46\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u8fd9\u5bf9\u4e8e\u5f00\u53d1\u7f16\u8bd1\u5668\u548c\u8bed\u8a00\u7684\u76ee\u7684\u6765\u8bf4\u975e\u5e38\u6709\u7528\u3002\u6700\u597d\u7684\u8d77\u70b9\u662f\u67e5\u770b waspc/\uff0c\u5728\u90a3\u91cc\u4f60\u53ef\u4ee5\u627e\u5230\u7b2c\u4e00\u6b21\u8d21\u732e\u8005\u7684\u8be6\u7ec6\u6b65\u9aa4 + \u6709\u5173 Wasp \u7f16\u8bd1\u5668\u7684\u6280\u672f\u7ec6\u8282\u3002\n\u5373\u4f7f\u60a8\u4e0d\u6253\u7b97\u63d0\u4ea4\u4efb\u4f55\u4ee3\u7801\uff0c\u53ea\u8981\u52a0\u5165\u6709\u5173 discord \u7684\u8ba8\u8bba\u5e76\u63d0\u4f9b\u60a8\u7684\u53cd\u9988\u5c31\u5df2\u7ecf\u5f88\u68d2\u5e76\u4e14\u6709\u5f88\u5927\u5e2e\u52a9\uff08\u6fc0\u52b1\u6211\u4eec\u5e76\u5e2e\u52a9\u6211\u4eec\u5f04\u6e05\u695a\u5982\u4f55\u5851\u9020 Wasp\uff09\uff01", "note_en": "Wasp ( Web  Application  Specification Language) is a declarative DSL (domain-specific language) for developing, building and deploying modern full-stack web apps with less code.\n Concepts such as  app,  page,  user,  login,  frontend,  production, etc. are baked into the language, bringing a new level of expressiveness and allowing you to get more work done with fewer lines of code.\n While describing high-level features with Wasp, you still write the rest of your logic in your favorite technologies (currently React, NodeJS, Prisma).\n NOTE: Wasp is in alpha and is therefore likely to change a lot, have bugs and miss important features.\n // file: main.wasp app  TodoApp  {  title:  &#34;Todo App&#34; } route   &#34;/&#34;  - &gt;  page  Main page  Main  { component:  import  Main  from  &#34;@ext/pages/Main.js&#34;  // Importing React component. } query  getTasks  { fn:  import  {  getTasks  }  from  &#34;@ext/queries.js&#34; ,  // Importing NodeJS code. entities:  [ Task ] } entity  Task  { = psl  id  Int @ id @ default ( autoincrement ( ) )  description   String  isDone  Boolean @ default ( false ) psl = }\n Source files ( .wasp,  .js(x),  .css, ...) are compiled by  waspc (Wasp compiler) into the web technology stack of your choice (currently React + NodeJS/ExpressJS + Prisma).\n   Quick start: Due to its expressiveness, you can create and deploy a production-ready web app from scratch with very few lines of concise, consistent, declarative code.\n Flexible: When you need more control than Wasp offers, you can write code in existing technologies such as js/html/css/... and combine it with Wasp code!\n No lock-in: If Wasp becomes too limiting for you, simply eject and continue with the generated source code, which is human-readable.\n     to install Wasp on OSX/Linux. From there, just follow the instructions to run your first app in less then a minute!\n   This is the main repo of the Wasp universe, containing core code (mostly  waspc - Wasp compiler) and the supporting materials.\n  Currently, Wasp is in alpha and has enough features so that you can develop a basic web app in it!You might find that it misses flexibility in some places or that some bigger features are missing, but the basics are there and we are now adding on top of them.In the case you get stuck, you can take the generated code and continue with it.As Wasp grows further, it should allow the development of web apps of increasing complexity, without the need to eject!\n While the idea is to support multiple web tech stacks in the future, right now we are focusing on the specific stack: React + react-query, NodeJS + ExpressJS, Prisma. We might yet change that as time goes, taking trends into account, but for now, this is serving us well for the purpose of developing compiler and language.\n   The best place to start is to check out  waspc/, where you can find detailed steps for the first time contributors + technical details about the Wasp compiler.\n Even if you don&#39;t plan to submit any code, just joining the discussion on discord    and giving your feedback is already great and helps a lot (motivates us and helps us figure out how to shape Wasp)!", "posttime": "2021-07-26 08:18:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u7f16\u7a0b,programming,web,wasp", "title": "Wasp \u2013 \u4e00\u79cd\u4e86\u89e3 Web \u5e94\u7528\u7a0b\u5e8f\u662f\u4ec0\u4e48\u7684\u7f16\u7a0b\u8bed\u8a00", "title_en": "Wasp \u2013 A programming language that understands what a web app is", "transed": 1, "url": "https://github.com/wasp-lang/wasp", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u7f16\u7a0b", "web", "wasp"]}]