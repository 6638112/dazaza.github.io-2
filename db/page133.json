[{"category": "", "categoryclass": "", "imagename": "d880eda3cb54b0665953d495adb635b4.jpeg", "infoid": 1071559, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u60a8\u6240\u77e5\uff0c\u81ea 2018 \u5e74 5 \u6708 25 \u65e5\u8d77\uff0c\u6240\u6709\u5728\u6b27\u6d32\u4e0e\u7528\u6237\u5408\u4f5c\u7684\u516c\u53f8\u90fd\u53d7\u300a\u901a\u7528\u6570\u636e\u4fdd\u62a4\u6761\u4f8b\u300b\u7684\u7ea6\u675f\u3002\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u4e0d\u9075\u5b88\u5b83\u7684\u4eba\u53ef\u80fd\u4f1a\u88ab\u5904\u4ee5\u6700\u9ad82000\u4e07\u7f8e\u5143\u6216\u5360\u603b\u6536\u51654%\u7684\u7f5a\u6b3e\u3002 GDPR \u65e0\u9700\u5de5\u5177\u5373\u53ef\u751f\u6548\u3002 3 \u5e74\u540e\uff0c\u5e02\u573a\u4ecd\u672a\u51c6\u5907\u597d\u5b9e\u65bd\u5b83\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6839\u636e\u6211\u4eec\u6700\u65b0\u7684 GDPR \u62a5\u544a\uff0c\u7edd\u5927\u591a\u6570\u516c\u53f8\uff08\u5766\u7387\u5730\u8bf4\uff0c\u51e0\u4e4e\u6240\u6709\u516c\u53f8\uff09\u90fd\u4e0d\u5408\u89c4\u3002\u8fd9\u662f\u6709\u539f\u56e0\u7684\u3002\u8fd9\u662f\u56e0\u4e3a GDPR \u7684\u601d\u60f3\u548c\u521b\u5efa\u751a\u81f3\u6ca1\u6709\u5b9e\u65bd\u5b83\u7684\u5de5\u5177\u7684\u60f3\u6cd5\uff0c\u76d1\u7ba1\u673a\u6784\u76f8\u4fe1\u5e02\u573a\u4f1a\u9002\u5e94\u5e76\u627e\u5230\u89e3\u51b3\u65b9\u6848\u3002\u4f46\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u4eca\u5929\u7684\u516c\u53f8\u4e0d\u4ec5\u4ec5\u80fd\u591f\u6b63\u786e\u5b9e\u65bd GDPR\u3002\u4ed6\u4eec\u4ecd\u7136\u6ca1\u6709\u610f\u8bc6\u5230\u4ed6\u4eec\u7684\u6587\u5316\u6570\u5b57\u5316\u8f6c\u578b\uff0c\u4ecd\u5728\u52aa\u529b\u8fdb\u5165\u4e91\u7aef\uff0c\u60a8\u5e0c\u671b\u4ed6\u4eec\u6309\u7167 GDPR \u5c0a\u91cd\u9ad8\u6c34\u5e73\u7684\u9053\u5fb7\u548c\u6280\u672f\u5417\uff1f\u4e0d\u53ef\u80fd\u7684\u3002\u5373\u4f7f\u662f\u9500\u552e\u9690\u79c1\u89e3\u51b3\u65b9\u6848\u7684\u4e3b\u8981\u4f9b\u5e94\u5546\u4e5f\u65e0\u6cd5\u63d0\u4f9b\u771f\u6b63\u7684\u5408\u89c4\u6027\u3002\u5927\u591a\u6570\u65f6\u5019\uff0c\u4ed6\u4eec\u53ea\u662f\u51fa\u552e\u89e3\u51b3\u65b9\u6848\u6765\u58f0\u660e\u5ba2\u6237\u5728\u7406\u8bba\u4e0a\u5982\u4f55\u5408\u89c4\u3002\u5b83\u4eec\u4ee5\u9759\u6001\u65b9\u5f0f\u58f0\u660e\u6587\u6863\u548c\u5904\u7406\u6d3b\u52a8\uff0c\u4e0e\u7cfb\u7edf\u4e2d\u771f\u6b63\u53d1\u751f\u7684\u4e8b\u60c5\u65e0\u5173\u3002 88% \u7684\u516c\u53f8\u4ecd\u7136\u4f9d\u8d56 Word \u548c Excel \u6765\u5b9e\u73b0 GDPR \u5408\u89c4\u6027\u3002\u5269\u4e0b\u7684 12% \u4f9d\u8d56\u4e8e\u53ef\u4ee5\u88ab\u89c6\u4e3a Excel \u589e\u5f3a\u7248\u672c\u7684\u8f6f\u4ef6\uff0c\u5177\u6709\u201c\u7279\u5b9a\u201d\u6570\u636e\u6a21\u578b\u3002\u5728\u8fd9\u4e9b\u201cDPO \u5de5\u5177\u96c6\u201d\u4e2d\u65e0\u6cd5\u89c2\u5bdf\u5230\u4efb\u4f55\u667a\u80fd\u3002\u5f53\u524d\u7684\u5408\u89c4\u6027\u5e02\u573a\u548c\u6280\u672f\u5806\u6808\u5728\u8bbe\u8ba1\u4e0a\u5b58\u5728\u7f3a\u9677\u3002\u800c\u4e14\u6240\u6709\u516c\u53f8\u90fd\u9762\u4e34\u7f5a\u6b3e\u7684\u98ce\u9669\uff0c\u4ecd\u7136\u65e0\u6cd5\u5bf9\u7528\u6237\u4f7f\u7528\u4e2a\u4eba\u6570\u636e\u7684\u60c5\u51b5\u4fdd\u6301\u900f\u660e\uff0c\u4e5f\u65e0\u6cd5\u5c06\u826f\u597d\u7684\u6570\u636e\u6cbb\u7406\u8f6c\u5316\u4e3a\u8fd0\u8425\u6548\u7387\u3002\u5b83\u4e00\u76f4\u5728\u4e8f\u635f\u3002\u60a8\u77e5\u9053\u6709\u53f2\u4ee5\u6765\u6700\u5c0f\u7684 GDPR \u7f5a\u6b3e\u662f\u591a\u5c11\u5417\uff1f 28 \u6b27\u5143\uff0c\u7531\u5308\u7259\u5229\u6570\u636e\u4fdd\u62a4\u76d1\u7ba1\u673a\u6784\u63d0\u4f9b\u3002\u4f60\u77e5\u9053\u76ee\u6807\u662f\u8c01\u5417\uff1a\u8c37\u6b4c\u7231\u5c14\u5170\u3002\u6709\u4e86\u8fd9\u6837\u7684\u7f5a\u6b3e\uff0cGDPR \u5e76\u6ca1\u6709\u5413\u5230\u4efb\u4f55\u4eba\u3002\u5c3d\u7ba1\u6cd5\u56fd CNIL \u5411 Google \u5904\u4ee5 5000 \u4e07\u7f8e\u5143\u7684\u7f5a\u6b3e\uff0c\u4f46 GDPR \u7f5a\u6b3e\u4ecd\u88ab\u89c6\u4e3a\u4e00\u79cd\u63d0\u9192\uff0c\u800c\u4e0d\u662f\u60e9\u7f5a\u3002\u5728\u4e0a\u5468\u4e9a\u9a6c\u900a\u7f5a\u6b3e\u4e4b\u524d\uff0c\u6570\u636e\u76d1\u7ba1\u90e8\u95e8\u53d1\u51fa\u7684\u6240\u6709\u7f5a\u6b3e\u603b\u989d\u7ea6\u4e3a 3 \u4ebf\u7f8e\u5143\u3002\u5bf9\u4e8e\u67d0\u4e9b\u516c\u53f8\u6765\u8bf4\uff0c\u7531\u4e8e\u6570\u636e\u6cc4\u9732\u6216\u7531\u4e8e\u4fdd\u7559\u5ba2\u6237\u6570\u636e\u65f6\u95f4\u8fc7\u957f\u800c\u635f\u5931\u6570\u767e\u4e07\u7f8e\u5143\u53ef\u80fd\u662f\u53ef\u6015\u7684\u3002\u4f46\u662f\u60a8\u5fc5\u987b\u6bd4\u8f83\u5408\u89c4\u6210\u672c\u3002\u636e\u4f30\u8ba1\uff0c\u4ec5\u7f8e\u56fd\u5e02\u573a\u5408\u89c4 GDPR \u7684\u603b\u6210\u672c\u7ea6\u4e3a 1500 \u4ebf\u7f8e\u5143\u3002\u5982\u679c\u60a8\u5bf9\u6b27\u76df\u516c\u53f8\u548c\u5168\u7403\u7ecf\u6d4e\u8fdb\u884c\u63a8\u65ad\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u8fbe\u5230\u6570\u5343\u4ebf\u7f8e\u5143\uff08\u4e25\u91cd\uff09\u5408\u89c4\u3002\u56e0\u6b64\uff0c\u5f53\u60a8\u6bd4\u8f83 3 \u5e74\u5185\u6570\u4ebf\u7f8e\u5143\u7684\u7f5a\u6b3e\u4e0e\u5efa\u7acb GDPR \u5e76\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u7ef4\u62a4\u5b83\u7684\u6570\u5343\u4ebf\u7f8e\u5143\u7684\u7f5a\u6b3e\u65f6\uff0c\u60a8\u4f1a\u53d1\u73b0\u7f5a\u6b3e\u7edd\u5bf9\u4e0d\u53ef\u6015\u3002\u4f46\u4e0a\u5468\u4e94\uff0c\u5362\u68ee\u5821\u6570\u636e\u4fdd\u62a4\u673a\u6784\u51b3\u5b9a\u4ee5\u8fd1 10 \u4ebf\u7f8e\u5143\uff088.87 \u4ebf\u7f8e\u5143\uff09\u7f5a\u6b3e\u4e9a\u9a6c\u900a\uff0c\u8fd9\u5b8c\u5168\u6539\u53d8\u4e86\u6e38\u620f\u89c4\u5219\u3002\u5b83\u6539\u53d8\u4e86\u6e38\u620f\u89c4\u5219\uff0c\u56e0\u4e3a\u5b83\u4f7f\u201c\u56e0 GDPR \u88ab\u7f5a\u6b3e\u201d\u7684\u98ce\u9669\u4e8b\u4ef6\u6700\u7ec8\u6210\u4e3a\u4e0d\u503c\u5f97\u518d\u627f\u62c5\u7684\u98ce\u9669\u3002\u73b0\u5728\uff0c\u6bcf\u5bb6\u516c\u53f8\u90fd\u6536\u5230\u4e86\u201c\u4f60\u4e0d\u80fd\u4e71\u7528 GDPR\u201d\u7684\u4fe1\u606f\u3002\u5728\u6b64\u6d88\u606f\u4e4b\u524d\uff0c\u9690\u79c1\u8f6f\u4ef6\u5de5\u5177\u7ba1\u7406\u5e02\u573a\u9884\u8ba1\u5230 2023 \u5e74\u5c06\u8fbe\u5230 80 \u4ebf\u7f8e\u5143\u3002\u6211\u4eec\u5c06\u786e\u5207\u5730\u770b\u5230\u8fd9\u4e9b\u4f30\u8ba1\u4f1a\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd\uff0c\u4f46\u6709\u4e00\u4ef6\u4e8b\u662f\u80af\u5b9a\u7684\uff0c\u5e02\u573a\u6c38\u8fdc\u4e0d\u4f1a\u76f8\u540c\u3002 GDPR \u5927\u68d2\u5c31\u5728\u90a3\u91cc\uff0c\u5b83\u5f88\u5927\u800c\u4e14\u6253\u51fb\u5f88\u5927\u3002\u73b0\u5728\u662f\u516c\u53f8\u63d0\u9ad8\u4e2a\u4eba\u6570\u636e\u9053\u5fb7\u6c34\u5e73\u7684\u65f6\u5019\u4e86\uff0c\u76f4\u5230\u4ed6\u4eec\u88ab\u63d0\u9192\u4ee5\u8270\u96be\u7684\u65b9\u5f0f\u53bb\u505a\u3002\u8fd8\u6709\u53e6\u4e00\u79cd\u601d\u8003 GDPR \u7684\u65b9\u5f0f\u3002 GDPR \u53ef\u80fd\u4e0d\u662f\u5927\u68d2\uff0c\u800c\u662f\u8bb8\u591a\u4f01\u4e1a\u7684\u80e1\u841d\u535c\u548c\u4ef7\u503c\u7684\u63a8\u52a8\u8005\u3002\u8fd9\u5c31\u662f\u6700\u65b0\u7684 Cisco 2020 \u6570\u636e\u57fa\u51c6\u7814\u7a76\u663e\u793a\u7684\u5185\u5bb9\u3002\u5728\u53d7\u8bbf\u7684 2500 \u591a\u5bb6\u516c\u53f8\u4e2d\uff0c\u8d85\u8fc7 70% \u7684\u516c\u53f8\u53d1\u73b0\u66f4\u597d\u7684\u4e2a\u4eba\u6570\u636e\u7ba1\u7406\uff1a\u8fd9\u4e5f\u8868\u660e\u9690\u79c1\u6295\u8d44\u7684\u5e73\u5747\u6295\u8d44\u56de\u62a5\u7387\u4e3a 225%\uff0c\u5e73\u5747\u652f\u51fa 120 \u4e07\u7f8e\u5143\uff0c\u5e73\u5747\u56de\u62a5\u7387\u662f 270 \u4e07\u7f8e\u5143\u3002\u8fd9\u53ea\u662f\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u7684\u6295\u8d44\u56de\u62a5\u7387\uff0c\u4e0d\u5305\u62ec\u6240\u6709\u79ef\u6781\u7684\u5916\u90e8\u56e0\u7d20\uff0c\u5982\u5458\u5de5\u656c\u4e1a\u5ea6\u548c\u5fe0\u8bda\u5ea6\u3001\u751f\u6001\u7cfb\u7edf\u4fe1\u4efb\u7b49......\n\u5728\u5904\u7406 GDPR \u5408\u89c4\u6027\u548c\u9690\u79c1\u95ee\u9898\u65f6\uff0c\u611f\u77e5\u4e0d\u518d\u662f\u73b0\u5b9e\u3002\u60a8\u53ef\u4ee5\u5c06 GDPR \u89c6\u4e3a\u4e00\u6839\u68cd\u5b50\u6216\u4e00\u6839\u80e1\u841d\u535c\u3002\u4f46\u552f\u4e00\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u5982\u679c\u4f60\u4e0d\u5173\u5fc3\u5b83\uff0cGDPR \u4f1a\u5173\u5fc3\u4f60\u3002 \u201c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e09\u79cd\u65b9\u6cd5\u6765\u5b66\u4e60\u667a\u6167\uff1a\u4e00\u662f\u53cd\u7701\uff0c\u8fd9\u662f\u6700\u9ad8\u5c1a\u7684\uff1b\u4e8c\u662f\u6a21\u4eff\uff0c\u8fd9\u662f\u6700\u5bb9\u6613\u7684\uff1b\u4e09\u662f\u7ecf\u9a8c\uff0c\u8fd9\u662f\u6700\u75db\u82e6\u7684\u3002\u201d PS\uff1a\u5982\u679c\u60a8\u60f3\u6210\u4e3a\u4e00\u540d\u9690\u79c1\u5de5\u7a0b\u5e08\uff0c\u60f3\u52a0\u5165\u901a\u8fc7\u4e3a\u5f00\u53d1\u4eba\u5458\u6784\u5efa\u6613\u4e8e\u4f7f\u7528\u7684 API \u4f7f GDPR \u5408\u89c4\u6210\u4e3a\u73b0\u5b9e\u7684\u56e2\u961f\uff0c\u6211\u4eec\u6b63\u5728\u62db\u8058\u6765\u81ea\u4e16\u754c\u5404\u5730\u7684\u6240\u6709\u89d2\u8272\u3002\u7acb\u5373\u52a0\u5165 ALIAS.dev \u5e76\u901a\u8fc7 mehdi@gdpr.dev \u8054\u7cfb\u6211\u8fdb\u884c 15 \u5206\u949f\u7684\u5feb\u901f\u8ba8\u8bba", "note_en": "As you know, since 25th of May 2018, all companies operating with users in Europe are under the General Data Protection Regulation. Theoretically, the one not respecting it may have a fine up to the biggest amount between 20 million or up to 4% of total revenues.\n GDPR entered into force without tooling to make it happen. 3 years later the market is still not ready to implement it.\n So far, according to our  latest report of GDPR, the huge majority of companies (almost all of them to be frank) are not compliant. And there is a reason for that. It is because GDPR has been thought and created without even the idea of the tools to implement it, with regulators believing the market will adapt and find the solutions. But the reality is that companies are today not really just able to implement GDPR correctly. They still did not realize their cultural digital transformation, still struggling going into the cloud, and you want them to respect a high level of ethics and technology as per the GDPR? Impossible. Even major vendors selling Privacy solutions are not able to deliver real compliance. Most of the time, they just sell solutions to declare how a customer could be theoretically compliant. They declare documents and processing activities in a static manner, not linked to what really happens in the system. 88% of companies still rely on Word and Excel for their GDPR compliance. And the remaining 12% percent rely on softwares that could be considered as augmented versions of Excel, with \u201cspecific\u201d data models. No intelligence can be observed in these \u201cDPO toolsets\u201d. The current compliance market and technology stack is flawed by design. And all companies are at risk of fines, and still not able to neither be transparent about the use of personal data with their users, nor to transform good data governance into operational efficiency. It is losing all the way down.\n  Do you know how much is the smallest GDPR fine ever given? 28\u20ac, given by Hungarian Data Protection Regulator. Do you know who was targeted : Google Ireland. With fines like this, GDPR was not scaring anyone. Even despite the French CNIL who gave $50M of fine to Google on the other side of the spectrum, GDPR fines were seen just as a reminder, not a sentence of punishment. The total sum of all the fines delivered by data regulations authorities, before the Amazon fine of last week, was around 300 millions dollars. It could be scary for some companies to lose a few millions because of a data breach, or because of keeping customer data too long. But you have to compare the cost of compliance.  It has been estimated that the total cost of GDPR compliance, just for the US market to be around $150Bn. If you extrapolate for EU companies as well as for the global economy, we could reach a few hundreds billions of dollars to be (badly) compliant. So when you compare a few hundred millions of fines over 3 years, versus a few hundred of billions to set GDPR up and maintain it over time, you can see that the fines were definitely not scary.  But last Friday, the Luxembourg data protection authority decided to fine Amazon for almost $1Bn ($887M)\n   And this is totally a game changer. It is a game changer because it makes the risk event \u201cgetting fined for GDPR\u201d finally a risk that is not worth taking anymore. Now, every company has received the message that \u201cyou must not mess with GDPR\u201d.\n  Before this news, the privacy software tooling management market was expected to be worth $8Bn by 2023. We will see exactly what will be the impact of these estimates, but one thing is sure, the market will never be the same. The GDPR stick is there, it is big and hits hard. It is time for companies to raise their level of personal data ethics until they get reminded to do it the hard way. There is another way to think about GDPR. Instead of a stick, GDPR could be carrot for many businesses and an enabler of value.  This is what the latest Cisco 2020 Data Benchmark study shows. On 2500+ companies interviewed, more than 70% of them found that a better personal data management  :\n   It also demonstrates than the average Return on Investment of Privacy investment was 225%, and that for an average spending of $1,2M, the average return was $2,7M. And this is only the ROI we can calculate, not including all the positive externalities like employee engagement and loyalty, ecosystem trust, etc...\n  Perception is not the reality anymore, when it comes to deal with GDPR compliance and privacy concerns. You can see GDPR as a stick or a carrot. But the only thing that is sure is that if you don&#39;t care about it, GDPR will take care about you.\n  &#34;By three methods we may learn wisdom: First, by reflection, which is noblest; Second, by imitation, which is easiest; and third by experience, which is the bitterest.&#34;\n  PS : if you want to become a Privacy Engineer want to be part of the team who is making GDPR compliance a reality by building easy to use APIs for developers, we are hiring all roles from all over the world. Join ALIAS.dev today and reach me via mehdi@gdpr.dev for a quick 15min discussion", "posttime": "2021-08-06 00:48:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amazon,\u6e38\u620f,\u4e9a\u9a6c\u900a,\u521d\u521b,gdpr", "title": "\u4e9a\u9a6c\u900a GDPR \u7f5a\u6b3e\u662f\u9690\u79c1\u6280\u672f\u521d\u521b\u516c\u53f8\u7684\u6e38\u620f\u89c4\u5219\u6539\u53d8\u8005", "title_en": "Amazon GDPR fine is a game changer for privacy tech startups", "transed": 1, "url": "https://www.alias.dev/blog/why-the-amazon-gdpr-fine-will-be-a-game-changer", "via": "", "real_tags": ["amazon", "\u6e38\u620f", "\u4e9a\u9a6c\u900a", "\u521d\u521b", "gdpr"]}, {"category": "", "categoryclass": "", "imagename": "b35d49833aff44fa8cf4a0a8082fd929.jpg", "infoid": 1071558, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e86\u89e3 PostgreSQL \u805a\u5408\u5165\u95e8\uff0c\u4e86\u89e3 PostgreSQL \u7684\u5b9e\u73b0\u5982\u4f55\u5728\u6211\u4eec\u6784\u5efa TimescaleDB \u8d85\u51fd\u6570\u53ca\u5176\u4e0e\u9ad8\u7ea7 TimescaleDB \u529f\u80fd\u7684\u96c6\u6210\u65f6\u6fc0\u53d1\u6211\u4eec\u7684\u7075\u611f\u2014\u2014\u4ee5\u53ca\u8fd9\u5bf9\u5f00\u53d1\u4eba\u5458\u610f\u5473\u7740\u4ec0\u4e48\u3002\u5728 Timescale\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u59cb\u7ec8\u4e13\u6ce8\u4e8e\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\uff0c\u6211\u4eec\u975e\u5e38\u8c28\u614e\u5730\u8bbe\u8ba1\u6211\u4eec\u7684\u4ea7\u54c1\u548c API\uff0c\u4ee5\u4f7f\u5176\u5bf9\u5f00\u53d1\u4eba\u5458\u53cb\u597d\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u5f53\u6211\u4eec\u7684\u4ea7\u54c1\u6613\u4e8e\u4f7f\u7528\u4e14\u53ef\u4f9b\u5e7f\u5927\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u65f6\uff0c\u6211\u4eec\u5c06\u4f7f\u4ed6\u4eec\u80fd\u591f\u89e3\u51b3\u5404\u79cd\u4e0d\u540c\u7684\u95ee\u9898\u2014\u2014\u4ece\u800c\u6784\u5efa\u89e3\u51b3\u5927\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002\u8fd9\u79cd\u5bf9\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u7684\u5173\u6ce8\u662f\u6211\u4eec\u5728 TimescaleDB \u8bbe\u8ba1\u7684\u65e9\u671f\u5c31\u51b3\u5b9a\u5728 PostgreSQL \u4e4b\u4e0a\u6784\u5efa\u7684\u539f\u56e0\u3002\u6211\u4eec\u5f53\u65f6\u76f8\u4fe1\uff0c\u6b63\u5982\u6211\u4eec\u73b0\u5728\u6240\u505a\u7684\u90a3\u6837\uff0c\u5efa\u7acb\u5728\u4e16\u754c\u4e0a\u589e\u957f\u6700\u5feb\u7684\u6570\u636e\u5e93\u4e0a\u5c06\u4e3a\u6211\u4eec\u7684\u7528\u6237\u5e26\u6765\u8bb8\u591a\u597d\u5904\u3002\u6216\u8bb8\u8fd9\u4e9b\u4f18\u52bf\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u662f\u5f00\u53d1\u4eba\u5458\u7684\u751f\u4ea7\u529b\uff1a\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u719f\u6089\u548c\u559c\u7231\u7684\u5de5\u5177\u548c\u6846\u67b6\uff0c\u5e76\u5229\u7528\u4ed6\u4eec\u6240\u6709\u7684 SQL \u6280\u80fd\u548c\u4e13\u4e1a\u77e5\u8bc6\u3002\u4eca\u5929\uff0c\u6709\u8fd1 300 \u4e07\u4e2a\u6d3b\u8dc3\u7684 TimescaleDB \u6570\u636e\u5e93\u5728\u5404\u884c\u5404\u4e1a\u8fd0\u884c\u4efb\u52a1\u5173\u952e\u578b\u65f6\u95f4\u5e8f\u5217\u5de5\u4f5c\u8d1f\u8f7d\u3002\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5f88\u5feb\u5c31\u4f1a\u51fa\u73b0\uff0c\u6709\u65f6\u6bcf\u79d2\u751f\u6210\u6570\u767e\u4e07\u4e2a\u6570\u636e\u70b9\uff08\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u7684\u4fe1\u606f\uff09\u3002\u7531\u4e8e\u4fe1\u606f\u91cf\u548c\u901f\u5ea6\u5982\u6b64\u4e4b\u5feb\uff0c\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u7684\u67e5\u8be2\u548c\u5206\u6790\u5f88\u590d\u6742\u3002\u6211\u4eec\u5c06 TimescaleDB \u6784\u5efa\u4e3a\u4e13\u95e8\u4e3a\u65f6\u95f4\u5e8f\u5217\u6784\u5efa\u7684\u5173\u7cfb\u6570\u636e\u5e93\uff0c\u4ee5\u964d\u4f4e\u590d\u6742\u6027\uff0c\u4ee5\u4fbf\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4ee5\u5f00\u53d1\u4eba\u5458\u7684\u7ecf\u9a8c\u4e3a\u6838\u5fc3\u6784\u5efa\uff0c\u6211\u4eec\u4e0d\u65ad\u53d1\u5e03\u529f\u80fd\u4ee5\u8fdb\u4e00\u6b65\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u5305\u62ec\u8fde\u7eed\u805a\u5408\u3001\u7528\u6237\u5b9a\u4e49\u7684\u64cd\u4f5c\u3001\u4fe1\u606f\u89c6\u56fe\uff0c\u4ee5\u53ca\u6700\u8fd1\u7684 TimescaleDB \u8d85\u51fd\u6570\uff1a\u5176\u4e2d\u7684\u4e00\u7cfb\u5217 SQL \u51fd\u6570TimescaleDB \u4f7f\u5728 PostgreSQL \u4e2d\u64cd\u4f5c\u548c\u5206\u6790\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u66f4\u5bb9\u6613\uff0c\u4ee3\u7801\u884c\u66f4\u5c11\u3002\u4e3a\u4e86\u786e\u4fdd\u6211\u4eec\u5728\u89c4\u5212\u65b0\u7684\u8d85\u529f\u80fd\u7279\u6027\u65f6\u59cb\u7ec8\u4e13\u6ce8\u4e8e\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\uff0c\u6211\u4eec\u5efa\u7acb\u4e86\u4e00\u5957\u201c\u8bbe\u8ba1\u7ea6\u675f\u201d\u6765\u6307\u5bfc\u6211\u4eec\u7684\u5f00\u53d1\u51b3\u7b56\u3002\u9075\u5b88\u8fd9\u4e9b\u51c6\u5219\u53ef\u786e\u4fdd\u6211\u4eec\u7684 API\uff1a\n\u8fd9\u5728\u5b9e\u8df5\u4e2d\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff1f\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u89e3\u91ca\u4e86\u8fd9\u4e9b\u7ea6\u675f\u5982\u4f55\u5bfc\u81f4\u6211\u4eec\u5728 TimescaleDB \u8d85\u51fd\u6570\u4e2d\u91c7\u7528\u4e24\u6b65\u805a\u5408\uff0c\u4e24\u6b65\u805a\u5408\u5982\u4f55\u4e0e\u5176\u4ed6 TimescaleDB \u529f\u80fd\u4ea4\u4e92\uff0c\u4ee5\u53ca PostgreSQL \u7684\u5185\u90e8\u805a\u5408 API \u5982\u4f55\u5f71\u54cd\u6211\u4eec\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u9009\u62e9\u4e86\u8fd9\u79cd\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u800c\u4e0d\u662f\u66f4\u5e38\u89c1\u4e14\u770b\u4f3c\u66f4\u7b80\u5355\u7684\u4e00\u6b65\u805a\u5408\u65b9\u6cd5\uff0c\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u5355\u4e2a\u51fd\u6570\u5c01\u88c5\u4e86\u5185\u90e8\u805a\u5408\u548c\u5916\u90e8\u8bbf\u95ee\u5668\u7684\u884c\u4e3a\uff1a\u7ee7\u7eed\u9605\u8bfb\u6709\u5173\u4e3a\u4f55\u5feb\u901f\u805a\u5408\u65b9\u6cd5\u7684\u66f4\u591a\u4fe1\u606f\u5f53\u4f60\u5f00\u59cb\u505a\u66f4\u590d\u6742\u7684\u4e8b\u60c5\uff08\u6bd4\u5982\u5c06\u51fd\u6570\u7ec4\u5408\u6210\u66f4\u9ad8\u7ea7\u7684\u67e5\u8be2\uff09\u4ee5\u53ca\u5728\u5e55\u540e\uff0c\u51e0\u4e4e\u6240\u6709\u7684 PostgreSQL \u805a\u5408\u5982\u4f55\u505a\u4e00\u4e2a\u4e24\u6b65\u805a\u5408\u7684\u7248\u672c\u65f6\uff0c\u5b83\u5c31\u4f1a\u5d29\u6e83\u3002\u5728\u6211\u4eec\u6784\u5efa TimescaleDB \u8d85\u51fd\u6570\u3001\u8fde\u7eed\u805a\u5408\u548c\u5176\u4ed6\u9ad8\u7ea7\u529f\u80fd\u65f6\uff0c\u60a8\u5c06\u4e86\u89e3 PostgreSQL \u5b9e\u73b0\u5982\u4f55\u542f\u53d1\u6211\u4eec\u2014\u2014\u4ee5\u53ca\u8fd9\u5bf9\u5f00\u53d1\u4eba\u5458\u610f\u5473\u7740\u4ec0\u4e48\u3002\u5982\u679c\u60a8\u60f3\u7acb\u5373\u5f00\u59cb\u4f7f\u7528\u8d85\u529f\u80fd\uff0c\u8bf7\u521b\u5efa\u60a8\u7684\u514d\u8d39\u8bd5\u7528\u5e10\u6237\u5e76\u5f00\u59cb\u5206\u6790 \ud83d\udd25\u3002 \uff08TimescaleDB \u8d85\u51fd\u6570\u9884\u5b89\u88c5\u5728\u6211\u4eec\u6258\u7ba1\u7684\u4e91\u539f\u751f\u5173\u7cfb\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e73\u53f0 Timescale Forge \u5b9e\u4f8b\u4e0a\uff09\u3002 5 \u6216 6 \u5e74\u524d\uff0c\u5f53\u6211\u7b2c\u4e00\u6b21\u5f00\u59cb\u5b66\u4e60 PostgreSQL \u65f6\uff08\u6211\u662f\u4e00\u540d\u7535\u5316\u5b66\u5bb6\uff0c\u5904\u7406\u5927\u91cf\u7535\u6c60\u6570\u636e\uff0c\u6b63\u5982\u6211\u5728\u4e0a\u4e00\u7bc7\u5173\u4e8e\u65f6\u95f4\u52a0\u6743\u5e73\u5747\u503c\u7684\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\uff09\uff0c\u6211\u9047\u5230\u4e86\u4e00\u4e9b\u6027\u80fd\u95ee\u9898\u3002\u6211\u8bd5\u56fe\u66f4\u597d\u5730\u4e86\u89e3\u6570\u636e\u5e93\u5185\u90e8\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u4ee5\u63d0\u9ad8\u5176\u6027\u80fd\u2014\u2014\u90a3\u65f6\u6211\u53d1\u73b0\u4e86 Bruce Momjian \u5173\u4e8e PostgreSQL Internals Through Pictures \u7684\u6f14\u8bb2\u3002\u5e03\u9c81\u65af\u4ee5\u5176\u5bcc\u6709\u6d1e\u5bdf\u529b\u7684\u6f14\u8bb2\uff08\u4ee5\u53ca\u4ed6\u5bf9\u9886\u7ed3\u7684\u504f\u7231\uff09\u5728\u793e\u533a\u4e2d\u5e7f\u4e3a\u4eba\u77e5\uff0c\u4ed6\u7684\u4f1a\u8bae\u5bf9\u6211\u6765\u8bf4\u662f\u4e00\u4e2a\u542f\u793a\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u5b83\u4eec\u4e00\u76f4\u662f\u6211\u7406\u89e3 PostgreSQL \u5de5\u4f5c\u539f\u7406\u7684\u57fa\u7840\u3002\u4ed6\u628a\u4e8b\u60c5\u89e3\u91ca\u5f97\u5982\u6b64\u6e05\u695a\uff0c\u5f53\u6211\u80fd\u60f3\u8c61\u53d1\u751f\u7684\u4e8b\u60c5\u65f6\uff0c\u6211\u603b\u662f\u5b66\u5f97\u6700\u597d\uff0c\u6240\u4ee5\u201c\u901a\u8fc7\u56fe\u7247\u201d\u90e8\u5206\u771f\u7684\u5bf9\u6211\u6709\u5e2e\u52a9\u2014\u2014\u5e76\u4e14\u4e00\u76f4\u56f0\u6270\u7740\u6211\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u4e00\u70b9\u662f\u6211\u8bd5\u56fe\u901a\u8fc7\u56fe\u7247\u89e3\u91ca\u4e00\u4e9b PostgreSQL \u5185\u90e8\u7ed3\u6784\u6765\u5f15\u5bfc Bruce\u3002\u7cfb\u597d\u9886\u7ed3\uff0c\u51c6\u5907\u597d\u5b66\u4e60\n\u6211\u4eec\u5df2\u7ecf\u5199\u8fc7\u6211\u4eec\u5982\u4f55\u4f7f\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\u548c\u805a\u5408\u6765\u6269\u5c55 SQL\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u6ca1\u6709\u786e\u5207\u5730\u89e3\u91ca\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\u3002 SQL \u4e2d\u7684\u805a\u5408\u51fd\u6570\u548c\u201c\u5e38\u89c4\u201d\u51fd\u6570\u4e4b\u95f4\u7684\u6839\u672c\u533a\u522b\u5728\u4e8e\uff0c\u805a\u5408\u4ece\u4e00\u7ec4\u76f8\u5173\u884c\u4e2d\u751f\u6210\u5355\u4e2a\u7ed3\u679c\uff0c\u800c\u5e38\u89c4\u51fd\u6570\u4e3a\u6bcf\u4e00\u884c\u751f\u6210\u4e00\u4e2a\u7ed3\u679c\uff1a\u8fd9\u5e76\u4e0d\u662f\u8bf4\u51fd\u6570\u53ef\u4ee5&#39;\u6ca1\u6709\u6765\u81ea\u591a\u5217\u7684\u8f93\u5165\uff1b\u4ed6\u4eec\u53ea\u9700\u8981\u6765\u81ea\u540c\u4e00\u884c\u3002\u53e6\u4e00\u79cd\u601d\u8003\u65b9\u5f0f\u662f\u51fd\u6570\u901a\u5e38\u4f5c\u7528\u4e8e\u884c\uff0c\u800c\u805a\u5408\u4f5c\u7528\u4e8e\u5217\u3002\u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5305\u542b\u4e24\u5217\u7684\u7406\u8bba\u8868 `foo`\uff1a \u5e76\u4e14\u53ea\u6709\u51e0\u4e2a\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u770b\u5230\u53d1\u751f\u4e86\u4ec0\u4e48\uff1a\u51fd\u6570 best() \u5c06\u4e3a\u6bcf\u4e2a\u5217\u751f\u6210 bar \u548c baz \u5217\u4e2d\u7684\u6700\u5927\u503c\u884c\uff1aSELECT max(bar) as bar_max, max(baz) as baz_max FROM foo; bar_max | baz_max ---------+--------- 3 | 6\n\u4f7f\u7528\u4e0a\u8ff0\u6570\u636e\uff0c\u4e0b\u9762\u662f\u6211\u4eec\u805a\u5408\u67d0\u4e9b\u5185\u5bb9\u65f6\u53d1\u751f\u7684\u60c5\u51b5\u7684\u56fe\u7247\uff1a\u805a\u5408\u4ece\u591a\u884c\u83b7\u53d6\u8f93\u5165\u5e76\u751f\u6210\u5355\u4e2a\u7ed3\u679c\u3002\u8fd9\u662f\u5b83\u548c\u51fd\u6570\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\uff0c\u4f46\u5b83\u662f\u5982\u4f55\u505a\u5230\u7684\u5462\uff1f\u8ba9\u6211\u4eec\u770b\u770b\u5b83\u5728\u5e55\u540e\u505a\u4e86\u4ec0\u4e48\u3002\u5728\u5e55\u540e\uff0cPostgreSQL \u4e2d\u7684\u805a\u5408\u9010\u884c\u5de5\u4f5c\u3002\u4f46\u662f\uff0c\u90a3\u4e48\u805a\u5408\u5982\u4f55\u77e5\u9053\u524d\u51e0\u884c\u7684\u4efb\u4f55\u4fe1\u606f\u5462\uff1f\u597d\u5427\uff0c\u805a\u5408\u5b58\u50a8\u4e00\u4e9b\u5173\u4e8e\u5b83\u4e4b\u524d\u770b\u5230\u7684\u884c\u7684\u72b6\u6001\uff0c\u5f53\u6570\u636e\u5e93\u770b\u5230\u65b0\u884c\u65f6\uff0c\u5b83\u4f1a\u66f4\u65b0\u5185\u90e8\u72b6\u6001\u3002\u5bf9\u4e8e\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u7684 max() \u805a\u5408\uff0c\u5185\u90e8\u72b6\u6001\u53ea\u662f\u6211\u4eec\u8fc4\u4eca\u4e3a\u6b62\u6536\u96c6\u5230\u7684\u6700\u5927\u503c\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u7684\u5185\u90e8\u72b6\u6001\u662f NULL\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u770b\u5230\u4efb\u4f55\u884c\uff1a\u800c\u4e14\u6211\u4eec\u770b\u5230 bar (2.0) \u7684\u503c\u5927\u4e8e\u6211\u4eec\u5f53\u524d\u7684\u72b6\u6001 (1.0)\uff0c\u6240\u4ee5\u6211\u4eec\u66f4\u65b0\u72b6\u6001\uff1a\n\u6211\u4eec\u5c06\u5b83\u4e0e\u5f53\u524d\u72b6\u6001\u8fdb\u884c\u6bd4\u8f83\uff0c\u53d6\u6700\u5927\u503c\uff0c\u7136\u540e\u66f4\u65b0\u6211\u4eec\u7684\u72b6\u6001\uff1a\u6700\u540e\uff0c\u6211\u4eec\u6ca1\u6709\u66f4\u591a\u7684\u884c\u8981\u5904\u7406\uff0c\u6240\u4ee5\u6211\u4eec\u8f93\u51fa\u6211\u4eec\u7684\u7ed3\u679c\uff1a\u603b\u800c\u8a00\u4e4b\uff0c\u6bcf\u4e00\u884c\u8fdb\u6765\uff0c\u4e0e\u6211\u4eec\u5f53\u524d\u7684\u72b6\u6001\uff0c\u7136\u540e\u72b6\u6001\u4f1a\u66f4\u65b0\u4ee5\u53cd\u6620\u65b0\u7684\u6700\u5927\u503c\u3002\u7136\u540e\u4e0b\u4e00\u884c\u8fdb\u6765\uff0c\u6211\u4eec\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u6211\u4eec\u5904\u7406\u5b8c\u6240\u6709\u884c\u5e76\u8f93\u51fa\u7ed3\u679c\u3002\u5904\u7406\u6bcf\u4e00\u884c\u5e76\u66f4\u65b0\u5185\u90e8\u72b6\u6001\u7684\u51fd\u6570\u6709\u4e00\u4e2a\u540d\u79f0\uff1a\u72b6\u6001\u8f6c\u6362\u51fd\u6570\uff08\u6216\u7b80\u79f0\u4e3a\u201c\u8f6c\u6362\u51fd\u6570\u201d\uff09\u3002\u805a\u5408\u7684\u8f6c\u6362\u51fd\u6570\u5c06\u5f53\u524d\u72b6\u6001\u548c\u4f20\u5165\u884c\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\u5e76\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u3002\u5b83\u7684\u5b9a\u4e49\u662f\u8fd9\u6837\u7684\uff0c\u5176\u4e2d current_value \u8868\u793a\u6765\u81ea\u4f20\u5165\u884c\u7684\u503c\uff0ccurrent_state \u8868\u793a\u5728\u524d\u51e0\u884c\u4e0a\u5efa\u7acb\u7684\u5f53\u524d\u805a\u5408\u72b6\u6001\uff08\u5982\u679c\u6211\u4eec\u8fd8\u6ca1\u6709\u5f97\u5230\u4efb\u4f55\uff0c\u5219\u4e3a NULL\uff09\uff0c\u800c next_state \u8868\u793a\u5206\u6790\u4f20\u5165\u884c\u540e\u7684\u8f93\u51fa\uff1a\u6240\u4ee5\uff0cmax() \u805a\u5408\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u72b6\u6001\uff0c\u5b83\u53ea\u5305\u542b\u4e00\u4e2a\u503c\uff08\u6211\u4eec\u89c1\u8fc7\u7684\u6700\u5927\u7684\u503c\uff09\u3002\u4f46\u5e76\u975e PostgreSQL \u4e2d\u7684\u6240\u6709\u805a\u5408\u90fd\u5177\u6709\u5982\u6b64\u7b80\u5355\u7684\u72b6\u6001\u3002\u4e3a\u4e86\u8ba1\u7b97\u5b83\uff0c\u6211\u4eec\u5c06\u603b\u548c\u548c\u8ba1\u6570\u5b58\u50a8\u4e3a\u6211\u4eec\u7684\u5185\u90e8\u72b6\u6001\uff0c\u5e76\u5728\u5904\u7406\u884c\u65f6\u66f4\u65b0\u6211\u4eec\u7684\u72b6\u6001\uff1a\n\u4f46\u662f\uff0c\u5f53\u6211\u4eec\u51c6\u5907\u8f93\u51fa avg \u7684\u7ed3\u679c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06 sum \u9664\u4ee5\u8ba1\u6570\uff1a\u805a\u5408\u5185\u90e8\u8fd8\u6709\u53e6\u4e00\u4e2a\u51fd\u6570\u6267\u884c\u6b64\u8ba1\u7b97\uff1afinal \u51fd\u6570\u3002\u4e00\u65e6\u6211\u4eec\u5904\u7406\u4e86\u6240\u6709\u7684\u884c\uff0c\u6700\u7ec8\u7684\u51fd\u6570\u5c31\u4f1a\u83b7\u53d6\u72b6\u6001\u5e76\u6267\u884c\u5b83\u9700\u8981\u7684\u4efb\u4f55\u64cd\u4f5c\u6765\u4ea7\u751f\u7ed3\u679c\u3002\u5b83\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\uff0c\u5176\u4e2d final_state \u8868\u793a\u8f6c\u6362\u51fd\u6570\u5728\u5904\u7406\u5b8c\u6240\u6709\u884c\u540e\u7684\u8f93\u51fa\uff1a \u603b\u7ed3\u4e00\u4e0b\uff1a\u5f53\u805a\u5408\u626b\u63cf\u884c\u65f6\uff0c\u5b83\u7684\u8f6c\u6362\u51fd\u6570\u66f4\u65b0\u5176\u5185\u90e8\u72b6\u6001\u3002\u4e00\u65e6\u805a\u5408\u626b\u63cf\u4e86\u6240\u6709\u884c\uff0c\u5b83\u7684\u6700\u7ec8\u51fd\u6570\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7ed3\u679c\uff0c\u8be5\u7ed3\u679c\u8fd4\u56de\u7ed9\u7528\u6237\u3002\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4ef6\u6709\u8da3\u7684\u4e8b\u60c5\uff1a\u8f6c\u6362\u51fd\u6570\u88ab\u8c03\u7528\u7684\u6b21\u6570\u6bd4\u6700\u7ec8\u51fd\u6570\u591a\u5f88\u591a\uff1a\u6bcf\u884c\u8c03\u7528\u4e00\u6b21\uff0c\u800c\u6bcf\u7ec4\u884c\u8c03\u7528\u4e00\u6b21\u6700\u7ec8\u51fd\u6570\u3002\u73b0\u5728\uff0c\u5728\u6bcf\u6b21\u8c03\u7528\u7684\u57fa\u7840\u4e0a\uff0c\u8f6c\u6362\u51fd\u6570\u672c\u8d28\u4e0a\u5e76\u4e0d\u6bd4\u6700\u7ec8\u51fd\u6570\u66f4\u6602\u8d35\u2014\u2014\u4f46\u662f\u56e0\u4e3a\u901a\u5e38\u8fdb\u5165\u805a\u5408\u7684\u884c\u6bd4\u51fa\u6765\u7684\u884c\u591a\u51e0\u4e2a\u6570\u91cf\u7ea7\uff0c\u8f6c\u6362\u51fd\u6570\u6b65\u9aa4\u6210\u4e3a\u6700\u6602\u8d35\u7684\u90e8\u5206\u8fc5\u901f\u5730\u3002\u5f53\u60a8\u4ee5\u9ad8\u901f\u7387\u6444\u53d6\u5927\u91cf\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u65f6\u5c24\u5176\u5982\u6b64\uff1b\u4f18\u5316\u805a\u5408\u8f6c\u6362\u51fd\u6570\u8c03\u7528\u5bf9\u4e8e\u63d0\u9ad8\u6027\u80fd\u5f88\u91cd\u8981\u3002\u56e0\u4e3a\u8f6c\u6362\u51fd\u6570\u662f\u5728\u6bcf\u4e00\u884c\u4e0a\u8fd0\u884c\u7684\uff0c\u6240\u4ee5\u4e00\u4e9b\u6709\u8fdb\u53d6\u5fc3\u7684 PostgreSQL \u5f00\u53d1\u8005\u4f1a\u95ee\uff1a\u5982\u679c\u6211\u4eec\u5c06\u8f6c\u6362\u51fd\u6570\u7684\u8ba1\u7b97\u5e76\u884c\u5316\u5462\uff1f\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9e\u4f8b\u5316\u8f6c\u6362\u51fd\u6570\u7684\u591a\u4e2a\u526f\u672c\u5e76\u5c06\u884c\u7684\u5b50\u96c6\u4f20\u9012\u7ed9\u6bcf\u4e2a\u5b9e\u4f8b\u6765\u5e76\u884c\u8fd0\u884c\u5b83\u3002\u7136\u540e\uff0c\u6bcf\u4e2a\u5e76\u884c\u805a\u5408\u5c06\u5728\u5b83\u770b\u5230\u7684\u884c\u5b50\u96c6\u4e0a\u8fd0\u884c\u8f6c\u6362\u51fd\u6570\uff0c\u4ea7\u751f\u591a\u4e2a\uff08\u90e8\u5206\uff09\u72b6\u6001\uff0c\u6bcf\u4e2a\u5e76\u884c\u805a\u5408\u4e00\u4e2a\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6211\u4eec\u9700\u8981\u805a\u5408\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u6211\u4eec\u4e0d\u80fd\u5728\u6bcf\u4e2a\u5e76\u884c\u805a\u5408\u4e0a\u5355\u72ec\u8fd0\u884c\u6700\u7ec8\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u6709\u4e00\u4e9b\u884c\u3002\u6240\u4ee5\uff0c\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u70b9\u9ebb\u70e6\u4e86\uff1a\u6211\u4eec\u6709\u591a\u4e2a\u90e8\u5206\u805a\u5408\u72b6\u6001\uff0c\u6700\u7ec8\u51fd\u6570\u4ec5\u7528\u4e8e\u5904\u7406\u5355\u4e2a\u6700\u7ec8\u72b6\u6001 - \u5c31\u5728\u6211\u4eec\u5c06\u7ed3\u679c\u8f93\u51fa\u7ed9\u7528\u6237\u4e4b\u524d\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b0\u7684\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u90e8\u5206\u72b6\u6001\u5e76\u5c06\u5b83\u4eec\u7ec4\u5408\u6210\u4e00\u4e2a\uff0c\u8fd9\u6837\u6700\u7ec8\u7684\u51fd\u6570\u5c31\u53ef\u4ee5\u5b8c\u6210\u5b83\u7684\u5de5\u4f5c\u3002\u8fd9\uff08\u6070\u5f53\u5730\uff09\u79f0\u4e3a\u7ec4\u5408\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u5e76\u884c\u5316\u805a\u5408\u65f6\u521b\u5efa\u7684\u6240\u6709\u90e8\u5206\u72b6\u6001\u4e0a\u8fed\u4ee3\u8fd0\u884c\u7ec4\u5408\u51fd\u6570\u3002\u7136\u540e\uff0c\u5728\u6211\u4eec\u4ece\u6240\u6709\u5e76\u884c\u805a\u5408\u4e2d\u83b7\u5f97\u7ec4\u5408\u72b6\u6001\u540e\uff0c\u6211\u4eec\u8fd0\u884c\u6700\u7ec8\u51fd\u6570\u5e76\u5f97\u5230\u6211\u4eec\u7684\u7ed3\u679c\u3002\u5e76\u884c\u5316\u548c combine \u51fd\u6570\u662f\u964d\u4f4e\u8c03\u7528\u805a\u5408\u6210\u672c\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f46\u8fd9\u4e0d\u662f\u552f\u4e00\u7684\u65b9\u6cd5\u3002\u53e6\u4e00\u79cd\u964d\u4f4e\u805a\u5408\u6210\u672c\u7684\u5185\u7f6e PostgreSQL \u4f18\u5316\u51fa\u73b0\u5728\u5982\u4e0b\u8bed\u53e5\u4e2d\uff1a\nPostgreSQL \u5c06\u4f18\u5316\u6b64\u8bed\u53e5\u4ee5\u4ec5\u8bc4\u4f30\u4e00\u6b21 `avg(bar)` \u8ba1\u7b97\uff0c\u7136\u540e\u4f7f\u7528\u8be5\u7ed3\u679c\u4e24\u6b21\u3002\u800c\u4e14\uff0c\u5982\u679c\u6211\u4eec\u6709\u5177\u6709\u76f8\u540c\u8f6c\u6362\u51fd\u6570\u4f46\u4e0d\u540c\u6700\u7ec8\u51fd\u6570\u7684\u4e0d\u540c\u805a\u5408\uff1f PostgreSQL \u901a\u8fc7\u5728\u6240\u6709\u884c\u4e0a\u8c03\u7528\u8f6c\u6362\u51fd\u6570\uff08\u6602\u8d35\u7684\u90e8\u5206\uff09\u7136\u540e\u6267\u884c\u4e24\u4e2a\u6700\u7ec8\u51fd\u6570\u6765\u8fdb\u4e00\u6b65\u4f18\u5316\uff01\u6f02\u4eae\u6574\u9f50\uff01\u73b0\u5728\uff0c\u8fd9\u4e0d\u662f PostgreSQL \u805a\u5408\u6240\u80fd\u505a\u7684\u5168\u90e8\uff0c\u4f46\u8fd9\u662f\u4e00\u6b21\u975e\u5e38\u597d\u7684\u6e38\u89c8\uff0c\u8db3\u4ee5\u8ba9\u6211\u4eec\u5230\u8fbe\u4eca\u5929\u9700\u8981\u53bb\u7684\u5730\u65b9\u3002\u5728 TimescaleDB \u4e2d\uff0c\u6211\u4eec\u4e3a\u805a\u5408\u51fd\u6570\u5b9e\u73b0\u4e86\u4e24\u6b65\u805a\u5408\u8bbe\u8ba1\u6a21\u5f0f\u3002\u8fd9\u6982\u62ec\u4e86 PostgreSQL \u5185\u90e8\u805a\u5408 API\uff0c\u5e76\u901a\u8fc7\u6211\u4eec\u7684\u805a\u5408\u3001\u8bbf\u95ee\u5668\u548c\u6c47\u603b\u51fd\u6570\u5c06\u5176\u516c\u5f00\u7ed9\u7528\u6237\u3002 \uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u4e2a\u5185\u90e8 PostgreSQL \u51fd\u6570\u5728 TimescaleDB \u8d85\u51fd\u6570\u4e2d\u90fd\u6709\u4e00\u4e2a\u7b49\u6548\u7684\u51fd\u6570\u3002\uff09\u4f5c\u4e3a\u590d\u4e60\uff0c\u5f53\u6211\u4eec\u8c08\u8bba\u4e24\u6b65\u805a\u5408\u8bbe\u8ba1\u6a21\u5f0f\u65f6\uff0c\u6211\u4eec\u6307\u7684\u662f\u4ee5\u4e0b\u7ea6\u5b9a\uff0c\u5176\u4e2d\u6211\u4eec\u6709\u4e00\u4e2a\u5185\u90e8\u805a\u5408\u8c03\u7528\uff1a\u5185\u90e8\u805a\u5408\u8c03\u7528\u8fd4\u56de\u5185\u90e8\u72b6\u6001\uff0c\u5c31\u50cf PostgreSQL \u805a\u5408\u4e2d\u7684\u8f6c\u6362\u51fd\u6570\u4e00\u6837\u3002\u5916\u90e8\u8bbf\u95ee\u5668\u8c03\u7528\u83b7\u53d6\u5185\u90e8\u72b6\u6001\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5c31\u50cf PostgreSQL \u4e2d\u7684\u6700\u7ec8\u51fd\u6570\u4e00\u6837\u3002\n\u6211\u4eec\u8fd8\u4e3a\u6bcf\u4e2a\u805a\u5408\u5b9a\u4e49\u4e86\u7279\u6b8a\u7684\u6c47\u603b\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e PostgreSQL \u7ec4\u5408\u51fd\u6570\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u5411\u7528\u6237\u516c\u5f00\u4e24\u6b65\u805a\u5408\u8bbe\u8ba1\u6a21\u5f0f\u800c\u4e0d\u662f\u5c06\u5176\u4f5c\u4e3a\u5185\u90e8\u7ed3\u6784\u6709\u56db\u4e2a\u57fa\u672c\u539f\u56e0\uff1a \u660e\u786e\u533a\u5206\u5f71\u54cd\u805a\u5408\u548c\u8bbf\u95ee\u5668\u7684\u53c2\u6570\uff0c\u4f7f\u6027\u80fd\u5f71\u54cd\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u9884\u6d4b \u542f\u7528\u6613\u4e8e\u7406\u89e3\u7684\u6c47\u603b\uff0c\u5177\u6709\u903b\u8f91\u4e00\u81f4\u7684\u7ed3\u679c\uff0c\u5728\u8fde\u7eed\u805a\u5408\u548c\u7a97\u53e3\u51fd\u6570\u4e2d\uff08\u6211\u4eec\u5bf9\u8fde\u7eed\u805a\u5408\u6700\u5e38\u89c1\u7684\u8bf7\u6c42\u4e4b\u4e00\uff09\u968f\u7740\u9700\u6c42\u7684\u53d8\u5316\u5141\u8bb8\u5bf9\u8fde\u7eed\u805a\u5408\u4e2d\u7684\u4e0b\u91c7\u6837\u6570\u636e\u8fdb\u884c\u66f4\u5bb9\u6613\u7684\u56de\u987e\u6027\u5206\u6790\uff0c\u4f46\u6570\u636e\u5df2\u7ecf\u6d88\u5931\u4e86\u8fd9\u6709\u70b9\u7406\u8bba\u5316\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6df1\u5165\u7814\u7a76\u5e76\u89e3\u91ca\u6bcf\u4e00\u4e2a\u3002 PostgreSQL \u975e\u5e38\u64c5\u957f\u4f18\u5316\u8bed\u53e5\uff08\u6b63\u5982\u6211\u4eec\u5728\u672c\u6587\u524d\u9762\u770b\u5230\u7684\uff0c\u901a\u8fc7\u56fe\u7247\ud83d\ude4c\uff09\uff0c\u4f46\u662f\u4f60\u5fc5\u987b\u4ee5\u5b83\u53ef\u4ee5\u7406\u89e3\u7684\u65b9\u5f0f\u7ed9\u5b83\u4e00\u4e9b\u4e1c\u897f\u3002\n\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u8c08\u5230\u91cd\u590d\u6570\u636e\u5220\u9664\u65f6\uff0c\u6211\u4eec\u770b\u5230 PostgreSQL \u53ef\u4ee5\u201c\u627e\u51fa\u201d\u4e00\u4e2a\u8bed\u53e5\u5728\u67e5\u8be2\u4e2d\u4f55\u65f6\u51fa\u73b0\u4e0d\u6b62\u4e00\u6b21\uff08\u5373 avg(bar)\uff09\u5e76\u4e14\u53ea\u8fd0\u884c\u8be5\u8bed\u53e5\u4e00\u6b21\u4ee5\u907f\u514d\u5197\u4f59\u5de5\u4f5c\uff1a\u7136\u800c\uff0c\u5982\u679c\u6211\u4ee5\u7a0d\u5fae\u4e0d\u540c\u7684\u65b9\u5f0f\u7f16\u5199\u65b9\u7a0b\u5f0f\u5e76\u5c06\u9664\u6cd5\u79fb\u52a8\u5230\u62ec\u53f7\u5185\uff0c\u4ee5\u4fbf\u8868\u8fbe\u5f0f avg(bar) \u4e0d\u4f1a\u5982\u6b64\u6574\u9f50\u5730\u91cd\u590d\uff0c\u90a3\u4e48 PostgreSQL \u65e0\u6cd5\u5f04\u6e05\u695a\u5982\u4f55\u4f18\u5316\u5b83\uff1a\u5b83\u4e0d\u77e5\u9053\u9664\u6cd5\u662f\u53ef\u4ea4\u6362\u7684\uff0c\u6216\u8005\u8fd9\u4e24\u4e2a\u67e5\u8be2\u662f\u7b49\u4ef7\u7684\u3002\u8fd9\u662f\u6570\u636e\u5e93\u5f00\u53d1\u4eba\u5458\u8981\u89e3\u51b3\u7684\u590d\u6742\u95ee\u9898\uff0c\u56e0\u6b64\uff0c\u4f5c\u4e3a PostgreSQL \u7528\u6237\uff0c\u60a8\u9700\u8981\u786e\u4fdd\u4ee5\u6570\u636e\u5e93\u53ef\u4ee5\u7406\u89e3\u7684\u65b9\u5f0f\u7f16\u5199\u67e5\u8be2\u3002\u7531\u6570\u636e\u5e93\u4e0d\u7406\u89e3\u7684\u7b49\u6548\u8bed\u53e5\u5f15\u8d77\u7684\u6027\u80fd\u95ee\u9898\u662f\u76f8\u7b49\u7684\uff08\u6216\u8005\u5728\u60a8\u7f16\u5199\u7684\u7279\u5b9a\u60c5\u51b5\u4e0b\u662f\u76f8\u7b49\u7684\uff0c\u4f46\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u662f\uff09\u53ef\u80fd\u662f\u4e00\u4e9b\u6700\u68d8\u624b\u7684 SQL \u4f18\u5316\u95ee\u9898\uff0c\u9700\u8981\u7528\u6237\u5f04\u6e05\u695a\u3002\u56e0\u6b64\uff0c\u5728\u6211\u4eec\u8bbe\u8ba1 API \u65f6\uff0c\u6211\u4eec\u5c3d\u91cf\u8ba9\u7528\u6237\u96be\u4ee5\u65e0\u610f\u4e2d\u7f16\u5199\u4f4e\u6027\u80fd\u4ee3\u7801\uff1a\u6362\u53e5\u8bdd\u8bf4\uff0c\u9ed8\u8ba4\u9009\u9879\u5e94\u8be5\u662f\u9ad8\u6027\u80fd\u9009\u9879\u3002\u63a5\u4e0b\u6765\uff0c\u5c06\u4e00\u4e2a\u7b80\u5355\u7684\u8868\u5b9a\u4e49\u4e3a\uff1a\n\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bf4\u660e\u6211\u4eec\u5982\u4f55\u5728\u767e\u5206\u4f4d\u8fd1\u4f3c\u8d85\u51fd\u6570\u4e2d\u4f7f\u7528\u4e24\u6b65\u805a\u5408\u6765\u8ba9 PostgreSQL \u4f18\u5316\u6027\u80fd\u3002 SELECT approx_percentile(0.1, percentile_agg(val)) as p10, approx_percentile(0.5, percentile_agg(val)) as p50, approx_percentile(0.9, percentile_agg(val)) as p90 FROM foo; SELECT approx_percentile(0.1, pct_agg) as p10, approx_percentile(0.5, pct_agg) as p50, approx_percentile(0.9, pct_agg) as p90 FROM (SELECT percentile_agg(val) as pct_agg FROM foo) pct;\u8fd9\u79cd\u8c03\u7528\u7ea6\u5b9a\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u76f8\u540c\u7684\u805a\u5408\uff0c\u4ee5\u4fbf\u5728\u540e\u53f0\uff0cPostgreSQL \u53ef\u4ee5\u5bf9\u76f8\u540c\u805a\u5408\u7684\u8c03\u7528\u8fdb\u884c\u91cd\u590d\u6570\u636e\u5220\u9664\uff08\u56e0\u6b64\u901f\u5ea6\u66f4\u5feb\uff09\u3002 PostgreSQL \u4e0d\u80fd\u5728\u8fd9\u91cc\u5bf9\u805a\u5408\u8c03\u7528\u8fdb\u884c\u91cd\u590d\u6570\u636e\u5220\u9664\uff0c\u56e0\u4e3a approx_percentile \u805a\u5408\u4e2d\u7684\u989d\u5916\u53c2\u6570\u968f\u6bcf\u6b21\u8c03\u7528\u800c\u53d8\u5316\uff1a\u56e0\u6b64\uff0c\u5373\u4f7f\u6240\u6709\u8fd9\u4e9b\u51fd\u6570\u90fd\u53ef\u4ee5\u4f7f\u7528\u5728\u6240\u6709\u884c\u4e0a\u6784\u5efa\u7684\u76f8\u540c\u8fd1\u4f3c\u503c\uff0cPostgreSQL \u65e0\u6cd5\u77e5\u9053\u8fd9\u4e00\u70b9\u3002\u4e24\u6b65\u805a\u5408\u65b9\u6cd5\u4f7f\u6211\u4eec\u80fd\u591f\u6784\u5efa\u6211\u4eec\u7684\u8c03\u7528\uff0c\u4ee5\u4fbf PostgreSQL \u53ef\u4ee5\u4f18\u5316\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u5b83\u4f7f\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u4e86\u89e3\u4ec0\u4e48\u65f6\u5019\u4f1a\u66f4\u6602\u8d35\uff0c\u4ec0\u4e48\u65f6\u5019\u4e0d\u4f1a\u3002\u5177\u6709\u4e0d\u540c\u8f93\u5165\u7684\u591a\u4e2a\u4e0d\u540c\u805a\u5408\u5c06\u5f88\u6602\u8d35\uff0c\u800c\u540c\u4e00\u805a\u5408\u7684\u591a\u4e2a\u8bbf\u95ee\u5668\u5c06\u4fbf\u5b9c\u5f97\u591a\u3002\u6211\u4eec\u8fd8\u9009\u62e9\u4e86\u4e24\u6b65\u805a\u5408\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u4e00\u4e9b\u805a\u5408\u672c\u8eab\u53ef\u4ee5\u91c7\u7528\u591a\u4e2a\u53c2\u6570\u6216\u9009\u9879\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u8bbf\u95ee\u5668\u4e5f\u53ef\u4ee5\u91c7\u7528\u9009\u9879\uff1a\n\u9009\u62e9 approx_percentile(0.5, uddsketch(1000, 0.001, val)) \u4f5c\u4e3a\u4e2d\u503c\uff0c--1000 \u6876\uff0c0.001 \u76ee\u6807\u9519\u8bef approx_percentile(0.9, uddsketch(1000, 0.001, val)) \u4f5c\u4e3a p90,10udsketch(10udsketch(approx.5percentile,10dsketch) , val)) as less_accurate_median -- \u4fee\u6539\u805a\u5408\u7684\u9879\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u8fd1\u4f3c\u503cFROM foo;\u8fd9\u662f uddsketch \u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u662f\u4e00\u79cd\u9ad8\u7ea7\u805a\u5408\u65b9\u6cd5\uff0c\u53ef\u4ee5\u91c7\u7528\u81ea\u5df1\u7684\u53c2\u6570\u8fdb\u884c\u767e\u5206\u4f4d\u6570\u8fd1\u4f3c\u3002 -- \u6ce8\u610f\uff1a\u8fd9\u662f\u6211\u4eec\u51b3\u5b9a\u4e0d\u4f7f\u7528\u7684 API \u793a\u4f8b\uff0c\u5b83\u4e0d\u8d77\u4f5c\u7528 SELECT approx_percentile(0.5, 1000, 0.001, val) as mediumFROM foo;\u5f88\u96be\u7406\u89e3\u54ea\u4e2a\u53c2\u6570\u4e0e\u529f\u80fd\u7684\u54ea\u4e2a\u90e8\u5206\u76f8\u5173\u3002\u76f8\u53cd\uff0c\u4e24\u6b65\u65b9\u6cd5\u975e\u5e38\u5e72\u51c0\u5730\u5c06\u8bbf\u95ee\u5668\u548c\u805a\u5408\u7684\u53c2\u6570\u5206\u5f00\uff0c\u5176\u4e2d\u805a\u5408\u51fd\u6570\u5728\u6211\u4eec\u6700\u7ec8\u51fd\u6570\u7684\u8f93\u5165\u4e2d\u7684\u62ec\u53f7\u4e2d\u5b9a\u4e49\uff1a\u901a\u8fc7\u660e\u786e\u54ea\u4e2a\u662f\u54ea\u4e2a\uff0c\u7528\u6237\u53ef\u4ee5\u77e5\u9053\u5982\u679c\u4ed6\u4eec\u6539\u53d8\u805a\u5408\u7684\u8f93\u5165\uff0c\u4ed6\u4eec\u5c06\u83b7\u5f97\u66f4\u591a\uff08\u6602\u8d35\u7684\uff09\u805a\u5408\u8282\u70b9\uff0c=\u800c\u8bbf\u95ee\u5668\u7684\u8f93\u5165\u66f4\u6539\u6210\u672c\u66f4\u4f4e\u3002\u6240\u4ee5\uff0c\u8fd9\u4e9b\u662f\u6211\u4eec\u516c\u5f00 API \u7684\u524d\u4e24\u4e2a\u539f\u56e0\u2014\u2014\u4ee5\u53ca\u5b83\u5141\u8bb8\u200b\u200b\u5f00\u53d1\u4eba\u5458\u505a\u4ec0\u4e48\u3002\u6700\u540e\u4e24\u4e2a\u539f\u56e0\u6d89\u53ca\u8fde\u7eed\u805a\u5408\u4ee5\u53ca\u5b83\u4eec\u4e0e\u8d85\u51fd\u6570\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u9996\u5148\uff0c\u5feb\u901f\u56de\u987e\u4e00\u4e0b\u5b83\u4eec\u662f\u4ec0\u4e48\u3002\nTimescaleDB \u5305\u542b\u4e00\u4e2a\u79f0\u4e3a\u8fde\u7eed\u805a\u5408\u7684\u529f\u80fd\uff0c\u8be5\u529f\u80fd\u65e8\u5728\u4f7f\u5bf9\u975e\u5e38\u5927\u7684\u6570\u636e\u96c6\u7684\u67e5\u8be2\u8fd0\u884c\u5f97\u66f4\u5feb\u3002 TimescaleDB \u8fde\u7eed\u805a\u5408\u5728\u540e\u53f0\u8fde\u7eed\u589e\u91cf\u5730\u5b58\u50a8\u805a\u5408\u67e5\u8be2\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u5f53\u4f60\u8fd0\u884c\u67e5\u8be2\u65f6\uff0c\u53ea\u9700\u8981\u8ba1\u7b97\u53d1\u751f\u53d8\u5316\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u6570\u636e\u96c6\u3002\u5728\u6211\u4eec\u4e0a\u9762\u5bf9 combine \u51fd\u6570\u7684\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u5982\u4f55\u5728\u6bcf\u4e00\u884c\u4e0a\u8ba1\u7b97\u8f6c\u6362\u51fd\u6570\u7684\u6602\u8d35\u5de5\u4f5c\uff0c\u5e76\u5c06\u884c\u62c6\u5206\u5230\u591a\u4e2a\u5e76\u884c\u805a\u5408\u4e0a\u4ee5\u52a0\u5feb\u8ba1\u7b97\u901f\u5ea6\u3002 TimescaleDB \u8fde\u7eed\u805a\u5408\u505a\u4e00\u4e9b\u7c7b\u4f3c\u7684\u4e8b\u60c5\uff0c\u9664\u4e86\u5b83\u4eec\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u4e0d\u662f\u5728\u540c\u65f6\u8fd0\u884c\u7684\u5e76\u884c\u8fdb\u7a0b\u4e4b\u95f4\u5206\u6563\u8ba1\u7b97\u5de5\u4f5c\u3002\u8fde\u7eed\u805a\u5408\u8ba1\u7b97\u8fc7\u53bb\u67d0\u4e2a\u65f6\u95f4\u63d2\u5165\u7684\u884c\u5b50\u96c6\u7684\u8f6c\u6362\u51fd\u6570\uff0c\u5b58\u50a8\u7ed3\u679c\uff0c\u7136\u540e\u5728\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u6211\u4eec\u6ca1\u6709\u7684\u6700\u8fd1\u65f6\u95f4\u7684\u4e00\u5c0f\u90e8\u5206\u539f\u59cb\u6570\u636e&#39; t \u5c1a\u672a\u8ba1\u7b97\u3002\u5f53\u6211\u4eec\u8bbe\u8ba1 TimescaleDB \u8d85\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u4eec\u5728\u8fde\u7eed\u805a\u5408\u4e2d\u8fd0\u884c\u826f\u597d\uff0c\u751a\u81f3\u4e3a\u7528\u6237\u5f00\u8f9f\u65b0\u7684\u53ef\u80fd\u6027\u3002\u5047\u8bbe\u6211\u4ece\u4e0a\u9762\u7684\u7b80\u5355\u8868\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u8fde\u7eed\u805a\u5408\uff0c\u4ee5 15 \u5206\u949f\u4e3a\u589e\u91cf\u8ba1\u7b97\u603b\u548c\u3001\u5e73\u5747\u503c\u548c\u767e\u5206\u4f4d\u6570\uff08\u540e\u8005\u4f7f\u7528\u8d85\u51fd\u6570\uff09\uff1a CREATE MATERIALIZED VIEW foo_15_min_aggWITH (timescaledb.continuous)AS SELECT id, time_bucket(&#39; 15 min&#39;::interval, ts) \u4f5c\u4e3abucket, sum(val), avg(val), percentile_agg(val)FROM fooGROUP BY id, time_bucket(&#39;15 min&#39;::interval, ts);\u7136\u540e\uff0c\u5982\u679c\u6211\u56de\u6765\u5e76\u60f3\u5c06\u5176\u91cd\u65b0\u805a\u5408\u4e3a\u5c0f\u65f6\u6216\u5929\uff0c\u800c\u4e0d\u662f 15 \u5206\u949f\u7684\u5b58\u50a8\u6876 - \u6216\u8005\u9700\u8981\u8de8\u6240\u6709 ID \u805a\u5408\u6211\u7684\u6570\u636e\u600e\u4e48\u529e\uff1f\u6211\u53ef\u4ee5\u4e3a\u54ea\u4e9b\u805a\u5408\u4f53\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u54ea\u4e9b\u4e0d\u80fd\uff1f\n\u6211\u4eec\u60f3\u8981\u901a\u8fc7\u4e24\u6b65\u805a\u5408\u89e3\u51b3\u7684\u95ee\u9898\u4e4b\u4e00\u662f\u5982\u4f55\u5411\u7528\u6237\u4f20\u8fbe\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u91cd\u65b0\u805a\u5408\u201c\u53ef\u4ee5\u201d\uff0c\u4ec0\u4e48\u65f6\u5019\u4e0d\u80fd\u3002 \uff08\u901a\u8fc7\u201c\u597d\u7684\u201d\uff0c\u6211\u7684\u610f\u601d\u662f\u60a8\u5c06\u4ece\u91cd\u65b0\u805a\u5408\u7684\u6570\u636e\u4e2d\u83b7\u5f97\u4e0e\u76f4\u63a5\u5728\u539f\u59cb\u6570\u636e\u4e0a\u8fd0\u884c\u805a\u5408\u76f8\u540c\u7684\u7ed3\u679c\u3002\uff09 SELECT sum(val) FROM tab;-- \u7b49\u6548\u4e8e\uff1aSELECT sum( sum) FROM (SELECT id, sum(val) FROM tab GROUP BY id) s; SELECT avg(val) FROM tab;-- \u4e0d\u7b49\u540c\u4e8e\uff1aSELECT avg(avg) FROM (SELECT id, avg(val) FROM tab GROUP BY id) s;\u805a\u5408\u8fd4\u56de\u5185\u90e8\u805a\u5408\u72b6\u6001\u3002 sum \u7684\u5185\u90e8\u805a\u5408\u72b6\u6001\u662f (sum)\uff0c\u800caverage \u7684\u5185\u90e8\u805a\u5408\u72b6\u6001\u662f (sum, count)\u3002\u805a\u5408\u7684\u7ec4\u5408\u548c\u8f6c\u6362\u51fd\u6570\u662f\u7b49\u6548\u7684\u3002\u5bf9\u4e8e sum()\uff0c\u72b6\u6001\u548c\u64cd\u4f5c\u662f\u76f8\u540c\u7684\u3002\u5bf9\u4e8e count()\uff0c\u72b6\u6001\u662f\u76f8\u540c\u7684\uff0c\u4f46\u662f\u8f6c\u6362\u548c\u7ec4\u5408\u51fd\u6570\u5bf9\u5b83\u4eec\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002 sum() \u7684\u8f6c\u6362\u51fd\u6570\u5c06\u4f20\u5165\u503c\u6dfb\u52a0\u5230\u72b6\u6001\uff0c\u5176\u7ec4\u5408\u51fd\u6570\u5c06\u4e24\u4e2a\u72b6\u6001\u6216\u603b\u548c\u76f8\u52a0\u3002\u76f8\u53cd\uff0ccount() \u7684\u8f6c\u6362\u51fd\u6570\u4e3a\u6bcf\u4e2a\u4f20\u5165\u503c\u589e\u52a0\u72b6\u6001\uff0c\u4f46\u5b83\u7684\u7ec4\u5408\u51fd\u6570\u5c06\u4e24\u4e2a\u72b6\u6001\u6216\u8ba1\u6570\u603b\u548c\u76f8\u52a0\u3002\u4f46\u662f\uff0c\u60a8\u5fc5\u987b\u5bf9\u6bcf\u4e2a\u805a\u5408\u7684\u5185\u90e8\u7ed3\u6784\u6709\u6df1\u5165\u7684\uff08\u6709\u65f6\u751a\u81f3\u662f\u795e\u79d8\u7684\uff09\u77e5\u8bc6\uff0c\u624d\u80fd\u77e5\u9053\u54ea\u4e9b\u7b26\u5408\u4e0a\u8ff0\u6807\u51c6\u2014\u2014\u56e0\u6b64\uff0c\u54ea\u4e9b\u53ef\u4ee5\u91cd\u65b0\u805a\u5408\u3002\u4f7f\u7528\u4e24\u6b65\u805a\u5408\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u8fbe\u4f55\u65f6\u901a\u8fc7 e \u91cd\u65b0\u805a\u5408\u5728\u903b\u8f91\u4e0a\u662f\u4e00\u81f4\u7684\n......", "note_en": "Get a primer on PostgreSQL aggregation, how PostgreSQL\u2019s implementation inspired us as we built TimescaleDB hyperfunctions and its integrations with advanced TimescaleDB features \u2013 and what this means for developers.\n At Timescale, our goal is to always focus on the developer experience, and we take great care to design our products and APIs to be developer-friendly. We believe that when our products are easy to use and accessible to a wide range of developers, we enable them to solve a breadth of different problems \u2013 and thus build solutions that solve big problems.\n This focus on developer experience is why we made the decision  early in the design of TimescaleDB to build on top of PostgreSQL. We believed then, as we do now, that building on  the world\u2019s fastest-growing database would have numerous benefits for our users.\n Perhaps the biggest of these advantages is developer productivity: developers can use the tools and frameworks they know and love and bring all of their SQL skills and expertise.\n Today, there are nearly three million active TimescaleDB databases running mission-critical time-series workloads across industries. Time-series data comes at you fast, sometimes generating millions of data points per second ( read more about time-series data). Because of this volume and rate of information, time-series data is complex to query and analyze. We built TimescaleDB as a purpose-built relational database for time-series to reduce that complexity so that developers can focus on their applications.\n So, we\u2019re built with developer experience at our core, and we\u2019ve continually released functionality to further this aim, including  continuous aggregates, user-defined actions, informational views, and most recently,  TimescaleDB hyperfunctions: a series of SQL functions within TimescaleDB that make it easier to manipulate and analyze time-series data in PostgreSQL with fewer lines of code.\n To ensure we stay focused on developer experience as we plan new hyperfunctions features, we established a set of \u201cdesign constraints\u201d that guide our development decisions. Adhering to these guidelines ensures our APIs:\n  What does this look like in practice? In this post, I explain how these constraints led us to adopt two-step aggregation throughout TimescaleDB hyperfunctions, how two-step aggregates interact with other TimescaleDB features, and how PostgreSQL&#39;s internal aggregation API influenced our implementation.\n       We chose this design pattern over the more common - and seemingly simpler - one-step aggregation approach, in which a single function encapsulates the behavior of both the inner aggregate and outer accessor:\n  Read on for more on why the one-step aggregate approach quickly breaks down as you start doing more complex things (like composing  functions into more advanced queries) and how, under the hood, almost all PostgreSQL aggregates do a version of two-step aggregation. You\u2019ll learn how the PostgreSQL implementation inspired us as we built TimescaleDB hyperfunctions, continuous aggregates, and other advanced features \u2013 and what this means for developers.\n If you\u2019d like to get started with hyperfunctions right away,  create your free trial account and start analyzing \ud83d\udd25. (TimescaleDB hyperfunctions are pre-installed on every Timescale Forge instance, our hosted cloud-native relational time-series data platform).\n  When I first started learning about PostgreSQL 5 or 6 years ago (I was an electrochemist, and dealing with lots of battery data, as mentioned in  my last post on time-weighted averages), I ran into some performance issues. I was trying to better understand what was going on inside the database in order to improve its performance \u2013 and that\u2019s when I found  Bruce Momjian\u2019s talks on  PostgreSQL Internals Through Pictures. Bruce is well known in the community for his insightful talks (and his penchant for bow ties), and his sessions were a revelation for me.\n They\u2019ve served as a foundation for my understanding of how PostgreSQL works ever since. He explained things so clearly, and I\u2019ve always learned best when I can visualize what\u2019s going on, so the \u201cthrough pictures\u201d part really helped - and stuck with - me.\n So this next bit is my attempt to channel Bruce by explaining some PostgreSQL internals through pictures. Cinch up your bow ties and get ready for some learnin&#39;\n   We have written about  how we use custom functions and aggregates to extend SQL, but we haven\u2019t exactly explained the difference  between them.\n The fundamental difference between an aggregate function and a \u201cregular\u201d function in SQL is that an  aggregate produces a single result from a  group of related rows, while a regular  function produces a result for  each row:\n  This is not to say that a function can\u2019t have inputs from multiple columns; they just have to come from the same row.\n Another way to think about it is that functions often act on rows, whereas aggregates act on columns. To illustrate this, let\u2019s consider a theoretical table `foo` with two columns:\n  And just a few values, so we can easily see what\u2019s going on:\n  The function   greatest() will produce the largest of the values in columns  bar and  baz for each row:\n    SELECT max(bar) as bar_max, max(baz) as baz_max FROM foo; bar_max | baz_max ---------+--------- 3 | 6\n Using the above data, here\u2019s a picture of what happens when we aggregate something:\n  The aggregate takes inputs from multiple rows and produces a single result. That\u2019s the main difference between it and a function, but how does it do that? Let\u2019s look at what it\u2019s doing under the hood.\n  Under the hood, aggregates in PostgreSQL work row-by-row. But, then how does an aggregate know anything about the previous rows?\n Well, an aggregate stores some state about the rows it has previously seen, and as the database sees new rows, it updates that internal state.\n For the  max() aggregate we\u2019ve been discussing, the internal state is simply the largest value we\u2019ve collected so far.\n  When we start, our internal state is  NULL because we haven\u2019t seen any rows yet:\n        And we see that the value of bar (2.0) is greater than our current state (1.0), so we update the state:\n    We compare it to our current state, take the greatest value, and update our state:\n  Finally, we don\u2019t have any more rows to process, so we output our result:\n  So, to summarize, each row comes in, gets compared to our current state, and then the state gets updated to reflect the new greatest value. Then the next row comes in, and we repeat the process until we\u2019ve processed all our rows and output the result.\n      There\u2019s a name for the function that processes each row and updates the internal state: the   state transition function (or just \u201ctransition function\u201d for short.) The transition function for an aggregate takes the current state and the value from the incoming row as arguments and produces a new state.\n It\u2019s defined like this, where  current_value represents values from the incoming row,  current_state represents the current aggregate state built up over the previous rows (or NULL if we haven\u2019t yet gotten any), and  next_state represents the output after analyzing the incoming row:\n   So, the  max() aggregate has a straightforward state that contains just one value (the largest we\u2019ve seen). But not all aggregates in PostgreSQL have such a simple state.\n     To calculate it, we store the sum and the count as our internal state and update our state as we process rows:\n     But, when we\u2019re ready to output our result for  avg, we need to divide  sum by  count:\n  There\u2019s another function inside the aggregate that performs this calculation: the   final function. Once we\u2019ve processed all the rows, the final function takes the state and does whatever it needs to produce the result.\n It\u2019s defined like this, where  final_state represents the output of the transition function after it has processed all the rows:\n       To summarize: as an aggregate scans over rows, its  transition function updates its internal state. Once the aggregate has scanned all of the rows, its  final function produces a result, which is returned to the user.\n  One interesting thing to note here: the transition function is called many, many more times than the final function: once for each row, whereas the final function is called once per  group of rows.\n Now, the transition function isn\u2019t inherently more expensive than the final function on a per-call basis \u2013 but because there are usually orders of magnitude more rows going into the aggregate than coming out, the transition function step becomes the most expensive part very quickly. This is especially true when you have high volume time-series data being ingested at high rates; optimizing aggregate transition function calls is important for improving performance.\n   Because the transition function is run on each row,  some enterprising PostgreSQL developers asked:  what if we parallelized the transition function calculation?\n   We can run this in parallel by instantiating multiple copies of the transition function and handing a subset of rows to each instance. Then, each parallel aggregate will run the transition function over the subset of rows it sees, producing multiple (partial) states, one for each parallel aggregate. But, since we need to aggregate over the  entire data set, we can\u2019t run the final function on each parallel aggregate separately because they only have some of the rows.\n So, now we\u2019ve ended up in a bit of a pickle: we have multiple partial aggregate states, and the final function is only meant to work on the single, final state - right before we output the result to the user.\n To solve this problem, we need a new type of function that takes two partial states and combines them into one so that the final function can do its work. This is (aptly) called the   combine function.\n We can run the combine function iteratively over all of the partial states that are created when we parallelize the aggregate.\n       Then, after we have the combined state from all of our parallel aggregates, we run the final function and get our result.\n  Parallelization and the combine function are one way to reduce the cost of calling an aggregate, but it\u2019s not the only way.\n One other built-in PostgreSQL optimization that reduces an aggregate\u2019s cost occurs in a statement like this:\n  PostgreSQL will optimize this statement to evaluate the `avg(bar)` calculation only once and then use that result twice.\n And, if we have different aggregates with the same transition function but different final functions? PostgreSQL further optimizes by calling the transition function (the expensive part) on all the rows and then doing both final functions! Pretty neat!\n Now, that\u2019s not all that PostgreSQL aggregates can do, but it\u2019s a pretty good tour, and it\u2019s enough to get us where we need to go today.\n  In TimescaleDB, we\u2019ve implemented the two-step aggregation design pattern for our aggregate functions. This generalizes the PostgreSQL internal aggregation API and exposes it to the user via our aggregates, accessors, and rollup functions. (In other words, each of the internal PostgreSQL functions has an equivalent function in TimescaleDB hyperfunctions.)\n As a refresher, when we talk about the two-step aggregation design pattern, we mean the following convention, where we have an inner aggregate call:\n    The inner aggregate call returns the internal state, just like the transition function does in PostgreSQL aggregates.\n The outer accessor call takes the internal state and returns a result to the user, just like the final function does in PostgreSQL.\n We also have special   rollup functions  defined for each of our aggregates that work much like PostgreSQL combine functions.\n    There are four basic reasons we expose the two-step aggregate design pattern to users rather than leave it as an internal structure:\n Cleanly distinguish between parameters that affect aggregates vs. accessors, making performance implications easier to understand and predict\n Enable easy to understand rollups, with logically consistent results, in continuous aggregates and window functions (one of our most common requests on continuous aggregates)\n Allow easier  retrospective analysis of downsampled data in continuous aggregates as requirements change, but the data is already gone\n That\u2019s a little theoretical, so let\u2019s dive in and explain each one.\n  PostgreSQL is very good at optimizing statements (as we saw earlier in this post, through pictures \ud83d\ude4c), but you have to give it things in a way it can understand.\n For instance,  when we talked about deduplication, we saw that PostgreSQL could \u201cfigure out\u201d when a statement occurs more than once in a query (i.e.,  avg(bar)) and only run the statement a single time to avoid redundant work:\n   However, if I write the equation in a slightly different way and move the division  inside the parentheses so that the expression  avg(bar) doesn\u2019t repeat so neatly, PostgreSQL  can\u2019t figure out how to optimize it:\n  It doesn\u2019t know that the division is commutative, or that those two queries are equivalent.\n This is a complicated problem for database developers to solve, and thus, as a PostgreSQL user, you need to make sure to write your query in a way that the database can understand.\n Performance problems caused by equivalent statements that the database doesn\u2019t understand are equal (or that are equal in the specific case you wrote, but not in the general case) can be some of the trickiest SQL optimizations to figure out as a user.\n Therefore,  when we design our APIs, we try to make it hard for users to unintentionally write low-performance code: in other words, the default option should be the high-performance option.\n For the next bit, it\u2019ll be useful to have a simple table defined as:\n  Let\u2019s look at an example of how we use two-step aggregation in the  percentile approximation hyperfunction to allow PostgreSQL to optimize performance.\n SELECT approx_percentile(0.1, percentile_agg(val)) as p10, approx_percentile(0.5, percentile_agg(val)) as p50, approx_percentile(0.9, percentile_agg(val)) as p90 FROM foo;\n  SELECT approx_percentile(0.1, pct_agg) as p10, approx_percentile(0.5, pct_agg) as p50, approx_percentile(0.9, pct_agg) as p90 FROM (SELECT percentile_agg(val) as pct_agg FROM foo) pct;\n This calling convention allows us to use identical aggregates so that, under the hood, PostgreSQL can deduplicate calls to the identical aggregates (and is faster as a result).\n  PostgreSQL can\u2019t deduplicate aggregate calls here because the extra parameter in the  approx_percentile aggregate changes with each call:\n  So, even though all of those functions could use the same approximation built up over all the rows, PostgreSQL has no way of knowing that. The two-step aggregation approach enables us to structure our calls so that PostgreSQL can optimize our code, and it enables developers to understand when things will be more expensive and when they won&#39;t. Multiple different aggregates with different inputs will be expensive, whereas multiple accessors to the same aggregate will be much less expensive.\n  We also chose the two-step aggregate approach because some of our aggregates can take multiple parameters or options themselves, and their accessors can also take options:\n SELECT approx_percentile(0.5, uddsketch(1000, 0.001, val)) as median,--1000 buckets, 0.001 target err approx_percentile(0.9, uddsketch(1000, 0.001, val)) as p90, approx_percentile(0.5, uddsketch(100, 0.01, val)) as less_accurate_median -- modify the terms for the aggregate get a new approximationFROM foo;\n That\u2019s an example of   uddsketch, an  advanced aggregation method for percentile approximation that can take its own parameters.\n  -- NB: THIS IS AN EXAMPLE OF AN API WE DECIDED NOT TO USE, IT DOES NOT WORKSELECT approx_percentile(0.5, 1000, 0.001, val) as medianFROM foo;\n It\u2019d be pretty difficult to understand which argument is related to which part of the functionality.\n Conversely, the two-step approach separates the arguments to the accessor vs. aggregate very cleanly, where the aggregate function is defined in parenthesis within the inputs of our final function:\n  By making it clear which is which, users can know that if they change the inputs to the aggregate, they will get more (costly) aggregate nodes, =while inputs to the accessor are cheaper to change.\n So, those are the first two reasons we expose the API - and what it allows developers to do as a result. The last two reasons involve continuous aggregates and how they relate to hyperfunctions, so first, a quick refresher on what they are.\n  TimescaleDB includes a feature called  continuous aggregates, which are designed to make queries on very large datasets run faster. TimescaleDB continuous aggregates continuously and incrementally store the results of an aggregation query in the background, so when you run the query, only the data that has changed needs to be computed, not the entire dataset.\n In our discussion of the combine function  above, we covered how you could take the expensive work of computing the transition function over every row and split the rows over multiple parallel aggregates to speed up the calculation.\n TimescaleDB continuous aggregates do something similar, except they spread the computation work over  time rather than between parallel processes running simultaneously. The continuous aggregate computes the transition function over a subset of rows inserted some time in the past, stores the result, and then, at query time, we only need to compute over the raw data for a small section of recent time that we haven\u2019t yet calculated.\n When we designed TimescaleDB hyperfunctions, we wanted them to work well within continuous aggregates and even open new possibilities for users.\n Let\u2019s say I create a continuous aggregate from the simple table above to compute the sum, average, and percentile (the latter using a hyperfunction) in 15-minute increments:\n CREATE MATERIALIZED VIEW foo_15_min_aggWITH (timescaledb.continuous)AS SELECT id, time_bucket(&#39;15 min&#39;::interval, ts) as bucket, sum(val), avg(val), percentile_agg(val)FROM fooGROUP BY id, time_bucket(&#39;15 min&#39;::interval, ts);\n And then what if I come back and I want to re-aggregate it to hours or days, rather than 15-minute buckets \u2013 or need to aggregate my data across all ids? Which aggregates can I do that for, and which can\u2019t I?\n  One of the problems we wanted to solve with two-step aggregation was how to convey to the user when it is \u201cokay\u201d to re-aggregate and when it\u2019s not. (By \u201cokay,\u201d I mean you would get the same result from the re-aggregated data as you would running the aggregate on the raw data directly.)\n  SELECT sum(val) FROM tab;-- is equivalent to:SELECT sum(sum) FROM (SELECT id, sum(val) FROM tab GROUP BY id) s;\n  SELECT avg(val) FROM tab;-- is NOT equivalent to:SELECT avg(avg) FROM (SELECT id, avg(val) FROM tab GROUP BY id) s;\n   The aggregate returns the internal aggregate state. The internal aggregate state for sum is  (sum), whereas for average, it is  (sum, count).\n The aggregate\u2019s combine and transition functions are equivalent. For  sum(), the states and the operations are the same. For  count(), the  states are the same, but the transition and combine functions  perform different operations on them.  sum()\u2019s transition function adds the incoming value to the state, and its combine function adds two states together, or a sum of sums. \u00a0Conversely,  count()s transition function increments the state for each incoming value, but its combine function adds two states together, or a sum of counts.\n But, you have to have in-depth (and sometimes rather arcane) knowledge about each aggregate\u2019s internals to know which ones meet the above criteria \u2013 and therefore, which ones you can re-aggregate.\n With the two-step aggregate approach, we can convey when it is logically consistent to re-aggregate by e\n......", "posttime": "2021-08-06 00:47:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "postgresql,\u8bbe\u8ba1,\u805a\u5408,aggregation", "title": "PostgreSQL \u805a\u5408\u5982\u4f55\u5de5\u4f5c\u4ee5\u53ca\u5b83\u5982\u4f55\u542f\u53d1\u6211\u4eec\u7684\u8d85\u51fd\u6570\u8bbe\u8ba1", "title_en": "How PostgreSQL aggregation works and how it inspired our hyperfunctions\u2019 design", "transed": 1, "url": "https://blog.timescale.com/blog/how-postgresql-aggregation-works-and-how-it-inspired-our-hyperfunctions-design-2/", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u805a\u5408"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071557, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "EmacsConf 2021 \u5c06\u4e8e 2021 \u5e74 11 \u6708 27 \u65e5\u81f3 28 \u65e5\uff08\u5468\u516d\u81f3\u5468\u65e5\uff09\u4e3e\u884c\u865a\u62df\u4f1a\u8bae\u3002\u5982\u679c\u60a8\u60f3\u51fa\u5e2d\u4f1a\u8bae\uff0c\u8bf7\u5728 2021 \u5e74 9 \u6708 30 \u65e5\u4e4b\u524d\u63d0\u4ea4\u60a8\u7684\u63d0\u6848\u3002 EmacsConf 2021 \u662f\u5173\u4e8e Emacs \u548c Emacs Lisp \u7684\u4e50\u8da3\u3002\u5feb\u6765\u4e0e Emacs \u6587\u672c\u7f16\u8f91\u5668/\u64cd\u4f5c\u7cfb\u7edf/\u65b9\u5f0f\u5206\u4eab\u60a8\u7684\u5b9e\u9a8c\u548c\u5192\u9669\u751f\u6d3b\uff01\u6211\u4eec\u6b22\u8fce\u6240\u6709\u80cc\u666f\u548c\u5404\u79cd\u7ecf\u9a8c\u7684\u6f14\u8bb2\u8005\uff0c\u5305\u62ec\u65b0\u4eba\u7684\u7b2c\u4e00\u6b21\u6f14\u8bb2\u3002\u4f60\u89c9\u5f97 Emacslately \u6709\u4ec0\u4e48\u4ee4\u4eba\u5174\u594b\u7684\u5730\u65b9\uff1f\u5f53\u4f60\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u4f60\u5e0c\u671b\u6709\u4eba\u544a\u8bc9\u4f60\u4ec0\u4e48\uff1f\u60a8\u5de5\u4f5c\u6d41\u7a0b\u7684\u54ea\u4e00\u90e8\u5206\u53ef\u80fd\u4f1a\u6fc0\u53d1\u4eba\u4eec\u8fdb\u5165 Emacs \u6216\u6df1\u5165\u7814\u7a76\uff1f\u5f00\u59cb\u7f16\u5199\u63d0\u6848\u7684\u4e00\u4e2a\u597d\u65b9\u6cd5\u662f\u4ece\u63a2\u7d22\u524d\u51e0\u5e74\u7684\u8ba1\u5212\u5f00\u59cb\uff1a2020\u30012019\u30012015\u30012013\u3002\u60a8\u53ef\u80fd\u8fd8\u4f1a\u5728\u60f3\u6cd5\u9875\u9762\u4e0a\u627e\u5230\u4e00\u4e9b\u5de7\u5999\u7684\u60f3\u6cd5\u3002\u4e5f\u53ef\u4ee5\u968f\u610f\u6dfb\u52a0\u60a8\u7684\uff01\u5982\u679c\u60a8\u4ecd\u7136\u4e0d\u786e\u5b9a\uff0c\u8bf7\u8bbf\u95ee\u6211\u4eec\u5728 irc.libera.chat \u4e0a\u7684 IRCchannel #emacsconf \u5e76\u6253\u4e2a\u62db\u547c\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u60a8\u6700\u559c\u6b22\u7684 IRC \u5ba2\u6237\u7aef\u52a0\u5165\u804a\u5929\uff0c\u6216\u8005\u5728\u60a8\u7684 Web \u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee c\u200b\u200bhat.emacsconf.org\u3002\u5404\u79cd\u5404\u6837\u7684\u4eba\u4f7f\u7528 Emacs \u505a\u5404\u79cd\u5404\u6837\u7684\u4e8b\u60c5\u3002\u5982\u679c EmacsConf 2021 \u80fd\u591f\u7a81\u51fa\u6709\u8da3\u7684\u89c2\u70b9\u5e76\u53cd\u6620\u6211\u4eec\u793e\u533a\u7684\u591a\u6837\u6027\uff0c\u6211\u4eec\u4f1a\u5f88\u9ad8\u5174\u3002\u5982\u679c\u60a8\u8ba4\u8bc6\u7684\u4eba\u53ef\u80fd\u5bf9\u6f14\u8bb2\u6709\u597d\u4e3b\u610f\uff0c\u8bf7\u4e0e\u4ed6\u4eec\u8054\u7cfb\u5e76\u9f13\u52b1\u4ed6\u4eec\u63d0\u4ea4\u63d0\u6848\u3002\u8bb8\u591a\u4eba\uff08\u5c24\u5176\u662f\u6765\u81ea\u4ee3\u8868\u6027\u4e0d\u8db3\u7684\u7fa4\u4f53\uff0c\u5982\u5973\u6027\u3001\u6709\u8272\u4eba\u79cd\u3001\u975e\u5f00\u53d1\u4eba\u5458\u7b49\uff09\u53ef\u80fd\u8ba4\u4e3a\u81ea\u5df1\u4e0d\u591f\u4e13\u4e1a\uff0c\u65e0\u6cd5\u5206\u4eab\u4ed6\u4eec\u7684\u60f3\u6cd5\u3002\u5982\u679c\u60a8\u8ba9\u4ed6\u4eec\u77e5\u9053\u60a8\u91cd\u89c6\u4ed6\u4eec\u7684\u77e5\u8bc6\uff0c\u751a\u81f3\u53ef\u80fd\u63d0\u51fa\u4e00\u4e9b\u60a8\u8ba4\u4e3a\u5176\u4ed6\u4eba\u66f4\u60f3\u542c\u5230\u7684\u5efa\u8bae\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u610f\u8bc6\u5230\u4ed6\u4eec\u6709\u4e00\u4e9b\u503c\u5f97\u5206\u4eab\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u5f88\u4e50\u610f\u542c\u53d6\u4ed6\u4eec\u7684\u610f\u89c1\u3002\u5bf9\u4e8e EmacsConf 2021\uff0c\u6211\u4eec\u8ba1\u5212\u5728 11 \u6708 27 \u65e5\u548c 28 \u65e5\u591a\u4f26\u591a/\u4e1c\u90e8\u6807\u51c6\u65f6\u95f4\u4e0a\u5348 9 \u70b9\u81f3\u4e0b\u5348 5 \u70b9\uff08UTC \u4e0b\u5348 2 \u70b9\u81f3\u665a\u4e0a 10 \u70b9\uff09\u4e3e\u884c\u3002\u6839\u636e\u4eba\u4eec\u7684\u53ef\u7528\u6027\uff0c\u53ef\u80fd\u9700\u8981\u4e24\u4e2a\u534a\u5929\u3002\u5982\u679c\u60a8\u5728\u4f1a\u8bae\u671f\u95f4\u6ca1\u6709\u7a7a\uff0c\u4f46\u60a8\u6709\u4e00\u4e2a\u597d\u4e3b\u610f\u60f3\u8981\u5206\u4eab\uff0c\u8bf7\u65e0\u8bba\u5982\u4f55\u63d0\u51fa\uff01\u60a8\u53ef\u4ee5\u5728\u4f1a\u8bae\u7ed3\u675f\u540e\u968f\u65f6\u5904\u7406\u95ee\u9898\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u4e0e\u5176\u4ed6 Emacs \u805a\u4f1a\u8fdb\u884c\u533a\u57df\u6027\u6d3b\u52a8\u534f\u8c03\uff08\u5982\u679c\u60a8\u662f Emacs \u805a\u4f1a\u7684\u7ec4\u7ec7\u8005\u5e76\u5e0c\u671b\u4e0e\u6b64\u4e8b\u4ef6\u53d6\u5f97\u8054\u7cfb\uff01\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u5c3d\u7ba1\u6211\u4eec\u5c06\u5728\u672a\u6765\u51e0\u4e2a\u6708\u5185\u5c3d\u529b\u9075\u5b88\u4e0a\u8ff0\u65e5\u671f\uff0c\u4f46\u9274\u4e8e\u5f53\u524d\u7684\u4e16\u754c\u72b6\u51b5\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u7a0d\u5fae\u8c03\u6574\u4e00\u4e0b\u4ee5\u9632\u4e07\u4e00\u53d1\u751f\u610f\u5916\u3002\u611f\u8c22\u60a8\u7684\u8010\u5fc3\u548c\u7406\u89e3\u3002\n\u6211\u4eec\u5e0c\u671b EmacsConf 2021 \u80fd\u591f\u6fc0\u53d1\u8bb8\u591a\u4e0d\u540c\u7684\u4eba\u63a2\u7d22 Emacs \u4e2d\u7684\u8bb8\u591a\u4e0d\u540c\u4e8b\u7269\u3002\u6211\u4eec\u5e0c\u671b\u6c47\u96c6\u4e00\u7cfb\u5217\u5feb\u901f\u60f3\u6cd5\uff0c\u7136\u540e\u901a\u8fc7 IRC \u548c/\u6216\u95ee\u7b54\u73af\u8282\u8fdb\u884c\u5927\u91cf\u5bf9\u8bdd\uff0c\u5076\u5c14\u6df1\u5165\u63a2\u8ba8\u8bb8\u591a\u4eba\u53ef\u80fd\u89c9\u5f97\u6709\u8da3\u6216\u6709\u7528\u7684\u8bdd\u9898\u3002\u603b\u5171\u6700\u591a 10 \u5206\u949f\uff1a\u6838\u5fc3\u601d\u60f3\u662f\u4ec0\u4e48\uff1f\u4f60\u5e0c\u671b\u4eba\u4eec\u505a\u4ec0\u4e48\u6216\u8bb0\u4f4f\u4ec0\u4e48\uff1f\u60a8\u53ef\u4ee5\u5c55\u793a\u8db3\u591f\u591a\u7684\u5185\u5bb9\u6765\u5f15\u8d77\u4eba\u4eec\u7684\u5174\u8da3\uff0c\u7136\u540e\u5c06\u4ed6\u4eec\u6307\u5411\u4ed6\u4eec\u4ee5\u540e\u53ef\u4ee5\u5b66\u5230\u66f4\u591a\u4e1c\u897f\u7684\u5730\u65b9\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7 IRC\u3001pad \u6216 wiki \u56de\u7b54\u95ee\u9898\uff0c\u5e76\u4e14\u5bf9\u8bdd\u6301\u7eed\u591a\u957f\u65f6\u95f4\u6ca1\u6709\u9650\u5236\u3002\u603b\u5171\u6700\u591a 20 \u5206\u949f\uff1a\u60a8\u5c06\u5982\u4f55\u4ece 5-10 \u5206\u949f\u7684\u6f14\u8bb2\u4e2d\u5145\u5b9e\u4e00\u4e9b\u8981\u70b9\uff1f\u4f60\u600e\u4e48\u80fd\u5c55\u793a\u8fd9\u4e9b\u4f5c\u54c1\u4e00\u8d77\u5de5\u4f5c\uff1f\u603b\u5171\u6700\u591a 40 \u5206\u949f\uff1a\u6df1\u6f5c\u6709\u4ec0\u4e48\u597d\u5904\uff1f\u4f60\u5982\u4f55\u4fdd\u6301\u53c2\u4e0e\uff1f\u5728\u64b0\u5199\u60a8\u7684\u63d0\u6848\u65f6\uff0c\u5982\u679c\u60a8\u6709 5 \u5230 10 \u5206\u949f\u7684\u65f6\u95f4\uff0c\u8bf7\u5199\u4e0b\u60a8\u8981\u8c08\u8bba\u7684\u5185\u5bb9\u7684\u5927\u7eb2\u3002\u5982\u679c\u60a8\u60f3\u63d0\u8bae\u5ef6\u957f\u6f14\u8bb2\u65f6\u95f4\uff0c\u8bf7\u6982\u8ff0\u5982\u679c\u60a8\u6709\u66f4\u591a\u65f6\u95f4\u8fdb\u884c\u6f14\u8bb2\uff08\u6700\u591a 40 \u5206\u949f\uff0c\u5305\u62ec\u95ee\u7b54\uff09\uff0c\u60a8\u53ef\u80fd\u4f1a\u5305\u62ec\u54ea\u4e9b\u5185\u5bb9\u3002 40 \u5206\u949f\uff1a\u4ee5\u4e0a\u6240\u6709\u5185\u5bb9\uff0c\u5305\u62ec\u4fee\u6539\u5305\u7684\u884c\u4e3a\u4ee5\u6dfb\u52a0\u65b0\u5185\u5bb9\u3002\u8fd9\u79cd\u7075\u6d3b\u6027\u5c06\u5e2e\u52a9\u6211\u4eec\u8bbe\u8ba1\u4f1a\u8bae\u65e5\u7a0b\uff0c\u4ee5\u4fbf\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u6709\u673a\u4f1a\u5c55\u793a\u4ed6\u4eec\u7684\u60f3\u6cd5\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u8fdb\u884c\u66f4\u957f\u65f6\u95f4\u7684\u6df1\u5165\u8ba8\u8bba\u3002\n\u4e5f\u6b22\u8fce\u5176\u4ed6\u4f1a\u8bae\u5f62\u5f0f\uff0c\u4f8b\u5982\u6559\u7a0b\u3001\u7814\u8ba8\u4f1a\u548c\u73af\u804a\uff0c\u4ee5\u9632\u60a8\u53d1\u73b0\u8fd9\u4e9b\u5176\u4ed6\u5f62\u5f0f\u6bd4\u4f20\u7edf\u8c08\u8bdd\u5f62\u5f0f\u66f4\u53ef\u53d6\u3002\u5982\u679c\u60a8\u5bf9\u8fd9\u4e9b\u6216\u5176\u4ed6\u4f1a\u8bdd\u7c7b\u578b\u611f\u5174\u8da3\uff0c\u8bf7\u516c\u5f00\u6216\u79c1\u4e0b\u544a\u77e5\u6211\u4eec\u3002\u6211\u4eec\u5f88\u4e50\u610f\u4e0e\u60a8\u5408\u4f5c\u3002\u6211\u4eec\u77e5\u9053\u5411\u4f1a\u8bae\u63d0\u4ea4\u63d0\u6848\u53ef\u80fd\u4ee4\u4eba\u751f\u754f\uff0c\u56e0\u6b64\u6211\u4eec\u8ba4\u4e3a\u6211\u4eec\u4f1a\u5c3d\u529b\u63d0\u4f9b\u5e2e\u52a9\uff01\u4eca\u5e74\uff0c\u6211\u4eec\u5c06\u6253\u5f00\u865a\u62df\u529e\u516c\u5ba4\u7684\u5927\u95e8\uff0c\u8ba9\u60a8\u6765\u4e0e\u6211\u4eec\u8ba8\u8bba\u60a8\u7684\u63d0\u6848\uff0c\u5e0c\u671b\u80fd\u5e2e\u52a9\u60a8\u89e3\u51b3\u5728\u51c6\u5907\u63d0\u6848\u65f6\u53ef\u80fd\u9047\u5230\u7684\u4efb\u4f55\u969c\u788d\u3002\u6211\u4eec\u60f3\u53d1\u5e03\u4e00\u4efd\u5173\u4e8e\u6682\u505c\u529e\u516c\u65f6\u95f4\u7684\u5fd7\u613f\u8005\u7684\u53ef\u7528\u65f6\u95f4\u8868\u3002\u76ee\u524d\uff0c\u8fd9\u4e9b\u5fd7\u613f\u8005\u5305\u62ec\u4e00\u4e9b EmacsConf \u7ec4\u7ec7\u8005\uff0c\u4f46\u6211\u4eec\u4e5f\u5e0c\u671b\u5f97\u5230 Emacs \u793e\u533a\u5176\u4ed6\u6210\u5458\u7684\u5e2e\u52a9\u3002\u5982\u679c\u60a8\u662f\u66f4\u6709\u7ecf\u9a8c\u7684 Emacs \u7528\u6237\u5e76\u5e0c\u671b\u5bf9\u6b64\u63d0\u4f9b\u5e2e\u52a9\uff0c\u8bf7\u4e0e\u6211\u4eec\u8054\u7cfb\uff01\u6211\u4eec\u4eca\u5e74\u7684\u7b2c\u4e00\u4e2a\u529e\u516c\u65f6\u95f4\u8ba1\u5212\u5728 UTC \u65f6\u95f4 8 \u6708 14 \u65e5\u661f\u671f\u516d\u4e0b\u5348 3 \u70b9\u81f3\u4e0b\u5348 4 \u70b9\u4e0e zaeph (Leo Vivier) \u4e00\u8d77\u5728\u4ee5\u4e0b BigBlueButton \u623f\u95f4\uff1ahttps://bbb.emacsverse.org/b/ban-qye-fd1-5kw\u3002\u4e00\u65e6\u4f60\u51c6\u5907\u597d\u63d0\u4ea4\u4f60\u7684\u63d0\u6848\uff0c\u63d0\u4ea4\u9875\u9762\u5c31\u4f1a\u6709\u5173\u4e8e\u5982\u4f55\u63d0\u4ea4\u4f60\u7684\u6f14\u8bb2\u7684\u8bf4\u660e\u3002\u6211\u4eec\u4f7f\u7528\u533f\u540d\u63d0\u4ea4\u6d41\u7a0b\u6765\u51cf\u5c11\u504f\u89c1\u5e76\u9f13\u52b1\u8d21\u732e\u3002\u4e0d\u53c2\u4e0e\u8ba8\u8bba\u9009\u62e9\u7684\u4f1a\u8bae\u7ec4\u7ec7\u8005\u5c06\u4ece\u63d0\u4ea4\u7684\u6587\u4ef6\u4e2d\u5220\u9664\u8bc6\u522b\u4fe1\u606f\u3002\u533f\u540d\u63d0\u4ea4\u7684\u6750\u6599\u968f\u540e\u5c06\u7531\u9074\u9009\u59d4\u5458\u4f1a\u8fdb\u884c\u5ba1\u67e5\u3002\u5982\u679c\u60a8\u7684\u6f14\u8bb2\u83b7\u5f97\u6279\u51c6\uff0c\u5982\u679c\u60a8\u80fd\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u4f1a\u8bae\u987a\u5229\u8fdb\u884c\uff0c\u6211\u4eec\u5c06\u4e0d\u80dc\u611f\u6fc0\u3002\u5728\u6211\u4eec\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u5c06\u60a8\u7684\u6f14\u8bb2\u65f6\u95f4\u53d1\u9001\u7ed9\u60a8\u540e\uff0c\u6211\u4eec\u4f1a\u8981\u6c42\u60a8\n\u51c6\u5907\u4f60\u7684\u6f14\u8bb2\u7684\u9884\u5148\u5f55\u97f3\uff0c\u6216\u8005\u5728\u6211\u4eec\u7684\u5e2e\u52a9\u4e0b\u5f55\u5236\u5b83\uff0c\u5982\u679c\u8fd9\u5bf9\u4f60\u6765\u8bf4\u66f4\u5bb9\u6613\u7684\u8bdd\uff1b\u5982\u679c\u60a8\u5e0c\u671b\u80fd\u591f\u5728\u5b9e\u65f6\u4f1a\u8bdd\u4e2d\u56de\u7b54\u95ee\u9898\uff0c\u8bf7\u5b89\u6392\u4e00\u6b21\u7b80\u77ed\u7684\u6280\u672f\u68c0\u67e5\u3002\u4e0d\u8981\u5fd8\u8bb0\u8ba2\u9605\u6211\u4eec\u7684\u4e3b\u8981\u90ae\u4ef6\u5217\u8868 emacsconf-discuss\uff0c\u4ee5\u83b7\u53d6\u6709\u5173 EmacsConf \u4f1a\u8bae\u7684\u8ba8\u8bba\u548c\u516c\u544a\u3002\u5982\u679c\u60a8\u60f3\u4e3a\u4f1a\u8bae\u63d0\u4f9b\u5e2e\u52a9\uff08\u8ba1\u5212\u4f1a\u8bae\u3001\u5ba1\u67e5\u63d0\u6848\u3001\u5e2e\u52a9\u57fa\u7840\u8bbe\u65bd\u3001\u4f7f\u4f1a\u8bae\u66f4\u6613\u4e8e\u8bbf\u95ee\u3001\u7f16\u8f91\u89c6\u9891\u6284\u672c\u7b49\uff09\uff0c\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u8ba1\u5212\u9875\u9762\uff0c\u5e76\u5728 irc \u4e0a\u7684#emacsconf-org \u4e0a\u5411\u6211\u4eec\u6253\u62db\u547c\u3002 libera.chat\u3002\u9664\u4e86 emacsconf-discuss \u5217\u8868\uff0c\u60a8\u4e5f\u53ef\u4ee5\u8ba2\u9605 emacsconf-org\uff0c\u4ee5\u8ba8\u8bba\u4e0e EmacsConf \u7ec4\u7ec7\u8005\u548c\u5fd7\u613f\u8005\u7ec4\u7ec7\u7684\u4f1a\u8bae\u6709\u5173\u7684\u8ba8\u8bba\u3002\u6211\u4eec\u4ecd\u7136\u5b8c\u5168\u81f4\u529b\u4e8e\u81ea\u7531\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528\u5b8c\u5168\u7531\u514d\u8d39\u8f6f\u4ef6\u7ec4\u6210\u7684\u57fa\u7840\u8bbe\u65bd\u548c\u6d41\u5a92\u4f53\u8bbe\u7f6e\uff0c\u5c31\u50cf\u4ee5\u524d\u7684 EmacsConf \u4f1a\u8bae\u4e00\u6837\u3002\u4e00\u7bc7\u63cf\u8ff0\u6211\u4eec\u7684\u57fa\u7840\u8bbe\u65bd\u548c\u5de5\u5177\u7684\u6587\u7ae0\u6b63\u5728\u8fdb\u884c\u4e2d\uff0c\u53d1\u8868\u540e\u5c06\u5728 emacsconf-discuss \u5217\u8868\u4e2d\u516c\u5e03\u3002", "note_en": "EmacsConf 2021 will be a virtual conference on  November 27and 28, 2021 (Sat-Sun). If you&#39;d like to present at the conference,please  submit your proposal by  September 30, 2021.\n EmacsConf 2021 is about the joy of  Emacs and Emacs Lisp.Come share your experiments and adventures with the Emacs text editor/ operating system / way of life! We welcome speakers of  allbackgrounds and  all levels of experience, including newcomersgiving their first talk. What have you found exciting about Emacslately? What do you wish someone had told you when you were startingout? What part of your workflow might inspire someone to get intoEmacs or go deeper?\n A great way to get started with writing a proposal is to start byexploring the programs from previous years:  2020, 2019,  2015,  2013.You might also find some neat ideas on the  ideas page. Feel freeto add yours there too! If you&#39;re still not sure, come by our IRCchannel  #emacsconf on  irc.libera.chat and say hi. You can jointhe chat using  your favourite IRC client, or byvisiting  chat.emacsconf.org in your web browser.\n All kinds of people use Emacs for all kinds of things. We&#39;d love itif EmacsConf 2021 could highlight interesting perspectives and reflectthe diversity of our community. If you know someone who might have agood idea for a talk, please reach out to them and encourage them tosubmit a proposal. Many people (especially from underrepresentedgroups such as women, people of colour, non-developers, etc.) mightnot consider themselves expert enough to share their thoughts. If youlet them know that you value their knowledge and maybe even suggestsomething that you think others would like to hear more about, theymay realize that they have something worth sharing and that we wouldlove to hear from them.\n  For EmacsConf 2021, we are planning for 9am to 5pm Toronto/EST(2pm-10pm UTC) on November 27 and 28. Depending on people&#39;savailability, it might be two half-days.\n  If you are not available during the conference itself but you have aneat idea that you&#39;d like to share, please propose it anyway! You canalways handle questions after the conference, and we might even beable to coordinate with other Emacs meetups for regional events (ifyou&#39;re an Emacs meetup organizer and would like to make this happenlet&#39;s  get in touch!).\n Please note that although we will try our best to stick to the abovedates in the coming months, given the current state of the world, wemay have to move things around a bit in case of unforeseen events.Thank you for your patience and understanding.\n   We&#39;d like EmacsConf 2021 to inspire lots of different people toexplore lots of different things in Emacs. We hope to put together astream of quick ideas followed by lots of conversation over IRC and/orQ&amp;A sessions, with occasional deep dives into topics that many peoplemight find interesting or useful.\n  Up to 10 minutes total: What is the core idea? What do you wantpeople to do or remember? You can show just enough to get peopleinterested and then point them to where they can learn moreafterwards. You can answer questions over IRC, the pad, or thewiki, and there&#39;s no limit to how long that conversation can go.\n Up to 20 minutes total: How would you flesh out some of thepoints from your 5-10 minute presentation? How can you show thepieces working together?\n Up to 40 minutes total: What would benefit from a deep dive?How do you keep it engaging?\n When writing your proposal, please write an outline of what you planto talk about if you have 5-10 minutes. If you&#39;d like to propose alonger talk, outline what you might include if you had more time topresent (up to 40 minutes, including Q&amp;A).\n  40 minutes: all of the above, including modifying the behaviour ofthe package in order to add something new.\n This flexibility would help us in devising the conference schedule sothat as many people as possible could get a chance to present theirideas, while still allowing for featuring longer deep dive talks.\n Other session formats such as tutorials, workshops, and hangouts arewelcome as well, in case you would find those other formats preferableto a traditional talk format. If you&#39;re interested in these or othersession types, please let us know  publicly or privately. We&#39;ll be happy to work somethingout with you.\n  We&#39;re aware that it can be intimidating to submit a proposal to aconference, so we thought we&#39;d try to help! This year, we&#39;re openingup the doors of our virtual offices for you to come talk to us aboutyour proposals with hopes of helping you with any hurdles you may befacing with preparing your proposal.\n We&#39;d like to publish a schedule of availabilities of volunteers forholding office hours. Currently these volunteers consist of some ofthe EmacsConf organizers, but we&#39;d love to have the help of othermembers of the Emacs community as well. If you are a more experiencedEmacs user and would like to help with this,please  get in touch!\n Our first office hour this year is planned for Saturday, August 14,from 3pm to 4pm UTC with zaeph (Leo Vivier) at the followingBigBlueButton room:  https://bbb.emacsverse.org/b/ban-qye-fd1-5kw.\n  Once you&#39;re ready to submit your proposal, the  submit page has theinstructions on how to submit your talk.\n We use an anonymized submission process to reduce bias and encouragecontribution. Identifying information will be removed fromsubmissions by a conference organizer who will not participate intalk selection. The anonymized submissions will then be reviewed bya selection committee.\n If your talk is approved, we&#39;d love it if you could help us make surethe conference runs smoothly. After we email you with the timealloted for your talk, we&#39;ll ask you to\n prepare a prerecording of your talk, or record it with our help ifthat&#39;d be easier for you; and\n schedule a short tech-check if you&#39;d like to be able to answerquestions in a live session.\n Don&#39;t forget to subscribe to our main mailing list, emacsconf-discuss, for discussionand announcements about the EmacsConf conference.\n   If you would like to help with the conference (planning the sessions,reviewing proposals, helping with infrastructure, making sessions moreaccessible, editing video transcripts, etc.), see our  planningpage and come say hi to us at  #emacsconf-org on  irc.libera.chat.\n In addition to the  emacsconf-discuss list, feelfree to subscribe to  emacsconf-org as well, fordiscussions related to organizing the conference by the EmacsConforganizers and volunteers.\n   We remain fully committed to freedom, and we will continueusing our infrastructure and streaming setup consisting entirelyof  free software, much like previous EmacsConf conferences.An article describing our infrastructure and tools is underway,and will be announced on the emacsconf-discuss list when published.", "posttime": "2021-08-06 00:47:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "emacs,\u63d0\u6848,call,\u4f1a\u8bae", "title": "EmacsConf 2021 \u63d0\u6848\u5f81\u96c6", "title_en": "EmacsConf 2021 Call for Proposals", "transed": 1, "url": "https://emacsconf.org/2021/cfp/", "via": "", "real_tags": ["emacs", "\u63d0\u6848", "call", "\u4f1a\u8bae"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071556, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7814\u7a76\u4eba\u5458\u8868\u793a\uff0c\u5173\u95ed\u5c06\u4ea7\u751f\u6bc1\u706d\u6027\u7684\u5168\u7403\u5f71\u54cd\uff0c\u7edd\u4e0d\u80fd\u5141\u8bb8\u53d1\u751f\uff0c\u6c14\u5019\u79d1\u5b66\u5bb6\u5df2\u7ecf\u68c0\u6d4b\u5230\u58a8\u897f\u54e5\u6e7e\u6d41\u5d29\u6e83\u7684\u8b66\u544a\u4fe1\u53f7\uff0c\u58a8\u897f\u54e5\u6e7e\u6d41\u662f\u5730\u7403\u7684\u4e3b\u8981\u6f5c\u5728\u4e34\u754c\u70b9\u4e4b\u4e00\u3002\u8be5\u7814\u7a76\u53d1\u73b0\uff0c\u7814\u7a76\u4eba\u5458\u79f0\u4e4b\u4e3a\u5927\u897f\u6d0b\u7ecf\u5411\u7ffb\u8f6c\u73af\u6d41 (AMOC) \u7684\u6d0b\u6d41\u201c\u5728\u4e0a\u4e2a\u4e16\u7eaa\u51e0\u4e4e\u5b8c\u5168\u5931\u53bb\u7a33\u5b9a\u6027\u201d\u3002\u7535\u6d41\u5df2\u7ecf\u5904\u4e8e\u81f3\u5c11 1600 \u5e74\u6765\u7684\u6700\u4f4e\u70b9\uff0c\u4f46\u65b0\u7684\u5206\u6790\u8868\u660e\u5b83\u4eec\u53ef\u80fd\u63a5\u8fd1\u5173\u95ed\u3002\u6b64\u7c7b\u4e8b\u4ef6\u5c06\u5728\u4e16\u754c\u8303\u56f4\u5185\u4ea7\u751f\u707e\u96be\u6027\u540e\u679c\uff0c\u4e25\u91cd\u7834\u574f\u5370\u5ea6\u3001\u5357\u7f8e\u548c\u897f\u975e\u6570\u5341\u4ebf\u4eba\u8d56\u4ee5\u751f\u5b58\u7684\u964d\u96e8\uff1b\u6b27\u6d32\u98ce\u66b4\u589e\u52a0\u548c\u6c14\u6e29\u964d\u4f4e\uff1b\u5e76\u63a8\u9ad8\u7f8e\u56fd\u4e1c\u90e8\u7684\u6d77\u5e73\u9762\u3002\u5b83\u8fd8\u5c06\u8fdb\u4e00\u6b65\u5371\u53ca\u4e9a\u9a6c\u900a\u96e8\u6797\u548c\u5357\u6781\u51b0\u76d6\u3002 AMOC \u7cfb\u7edf\u7684\u590d\u6742\u6027\u548c\u672a\u6765\u5168\u7403\u4f9b\u6696\u6c34\u5e73\u7684\u4e0d\u786e\u5b9a\u6027\u4f7f\u5f97\u76ee\u524d\u65e0\u6cd5\u9884\u6d4b\u4efb\u4f55\u5d29\u6e83\u7684\u65e5\u671f\u3002\u5b83\u53ef\u80fd\u5728\u5341\u5e74\u6216\u4e24\u5e74\u5185\uff0c\u6216\u51e0\u4e2a\u4e16\u7eaa\u4e4b\u540e\u3002\u4f46\u79d1\u5b66\u5bb6\u4eec\u8bf4\uff0c\u5b83\u4f1a\u4ea7\u751f\u7684\u5de8\u5927\u5f71\u54cd\u610f\u5473\u7740\u7edd\u4e0d\u80fd\u5141\u8bb8\u5b83\u53d1\u751f\u3002\u4ece\u4e8b\u8fd9\u9879\u7814\u7a76\u7684\u5fb7\u56fd\u6ce2\u8328\u5766\u6c14\u5019\u5f71\u54cd\u7814\u7a76\u6240\u7684\u5c3c\u514b\u62c9\u65af\u00b7\u5e03\u5c14\u65af (Niklas Boers) \u8bf4\uff1a\u201c\u4e0d\u7a33\u5b9a\u7684\u8ff9\u8c61\u5df2\u7ecf\u51fa\u73b0\uff0c\u8fd9\u662f\u6211\u59cb\u6599\u672a\u53ca\u7684\uff0c\u800c\u4e14\u6211\u89c9\u5f97\u5f88\u53ef\u6015\u3002\u201d \u201c\u8fd9\u662f\u4f60\u4e0d\u80fd[\u5141\u8bb8]\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u201d\u4ed6\u8bf4\uff0c\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u4ec0\u4e48\u6c34\u5e73\u7684\u4e8c\u6c27\u5316\u78b3\u4f1a\u5f15\u53d1 AMOC \u5d29\u6e83\u3002 \u201c\u56e0\u6b64\uff0c\u552f\u4e00\u8981\u505a\u7684\u5c31\u662f\u5c3d\u53ef\u80fd\u964d\u4f4e\u6392\u653e\u91cf\u3002\u6211\u4eec\u5411\u5927\u6c14\u4e2d\u6392\u653e\u6bcf\u514b\u4e8c\u6c27\u5316\u78b3\uff0c\u8fd9\u79cd\u5f71\u54cd\u6781\u5927\u7684\u4e8b\u4ef6\u53d1\u751f\u7684\u53ef\u80fd\u6027\u5c31\u4f1a\u589e\u52a0\u3002\u201d\n\u79d1\u5b66\u5bb6\u4eec\u8d8a\u6765\u8d8a\u5173\u6ce8\u4e34\u754c\u70b9\u2014\u2014\u6c14\u5019\u7684\u5de8\u5927\u3001\u5feb\u901f\u548c\u4e0d\u53ef\u9006\u8f6c\u7684\u53d8\u5316\u3002 Boers \u548c\u4ed6\u7684\u540c\u4e8b\u5728 5 \u6708\u62a5\u544a\u8bf4\uff0c\u683c\u9675\u5170\u51b0\u76d6\u7684\u5f88\u5927\u4e00\u90e8\u5206\u5904\u4e8e\u8fb9\u7f18\uff0c\u5a01\u80c1\u7740\u5168\u7403\u6d77\u5e73\u9762\u7684\u5927\u5e45\u4e0a\u5347\u3002\u5176\u4ed6\u4eba\u6700\u8fd1\u8868\u660e\uff0c\u4e9a\u9a6c\u900a\u96e8\u6797\u73b0\u5728\u6392\u653e\u7684\u4e8c\u6c27\u5316\u78b3\u591a\u4e8e\u5438\u6536\u7684\u4e8c\u6c27\u5316\u78b3\uff0c2020 \u5e74\u897f\u4f2f\u5229\u4e9a\u70ed\u6d6a\u5bfc\u81f4\u4ee4\u4eba\u62c5\u5fe7\u7684\u7532\u70f7\u91ca\u653e\u3002\u6839\u636e 2019 \u5e74\u7684\u4e00\u9879\u5206\u6790\uff0c\u4e16\u754c\u53ef\u80fd\u5df2\u7ecf\u8de8\u8d8a\u4e86\u4e00\u7cfb\u5217\u4e34\u754c\u70b9\uff0c\u5bfc\u81f4\u201c\u5bf9\u6587\u660e\u7684\u751f\u5b58\u5a01\u80c1\u201d\u3002\u653f\u5e9c\u95f4\u6c14\u5019\u53d8\u5316\u4e13\u95e8\u59d4\u5458\u4f1a\u5c06\u4e8e\u5468\u4e00\u53d1\u5e03\u4e00\u4efd\u91cd\u8981\u62a5\u544a\uff0c\u9884\u8ba1\u5c06\u9610\u8ff0\u6c14\u5019\u5371\u673a\u7684\u6076\u5316\u72b6\u51b5\u3002 Boer \u7684\u7814\u7a76\u53d1\u8868\u5728\u300a\u81ea\u7136\u6c14\u5019\u53d8\u5316\u300b\u6742\u5fd7\u4e0a\uff0c\u9898\u4e3a\u201cAMOC \u5d29\u6e83\u7684\u57fa\u4e8e\u89c2\u6d4b\u7684\u65e9\u671f\u9884\u8b66\u4fe1\u53f7\u201d\u3002\u8fc7\u53bb 100,000 \u5e74\u7684\u51b0\u6838\u548c\u5176\u4ed6\u6570\u636e\u663e\u793a AMOC \u6709\u4e24\u79cd\u72b6\u6001\uff1a\u4e00\u79cd\u5feb\u901f\u800c\u5f3a\u5927\u7684\u72b6\u6001\uff0c\u5c31\u50cf\u6700\u8fd1\u51e0\u5343\u5e74\u6765\u6240\u89c1\u7684\u4e00\u6837\uff0c\u53e6\u4e00\u79cd\u662f\u7f13\u6162\u800c\u5fae\u5f31\u7684\u72b6\u6001\u3002\u6570\u636e\u663e\u793a\uff0c\u6c14\u6e29\u5347\u9ad8\u4f1a\u4f7f AMOC \u5728 1 \u5230 50 \u5e74\u5185\u5728\u72b6\u6001\u4e4b\u95f4\u7a81\u7136\u5207\u6362\u3002 AMOC \u662f\u7531\u6c89\u5165\u5317\u51b0\u6d0b\u7684\u6d53\u5bc6\u54b8\u6d77\u6c34\u9a71\u52a8\u7684\uff0c\u4f46\u683c\u9675\u5170\u51b0\u76d6\u6de1\u6c34\u7684\u878d\u5316\u6b63\u5728\u51cf\u7f13\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u8fd9\u6bd4\u6c14\u5019\u6a21\u578b\u5efa\u8bae\u7684\u8981\u65e9\u3002 Boers \u4f7f\u7528\u6905\u5b50\u7684\u7c7b\u6bd4\u6765\u89e3\u91ca\u6d77\u6d0b\u6e29\u5ea6\u548c\u76d0\u5ea6\u7684\u53d8\u5316\u5982\u4f55\u63ed\u793a AMOC \u7684\u4e0d\u7a33\u5b9a\u6027\u3002\u63a8\u52a8\u6905\u5b50\u4f1a\u6539\u53d8\u5176\u4f4d\u7f6e\uff0c\u4f46\u5982\u679c\u6240\u6709\u56db\u6761\u817f\u90fd\u7559\u5728\u5730\u677f\u4e0a\uff0c\u5219\u4e0d\u4f1a\u5f71\u54cd\u5176\u7a33\u5b9a\u6027\u3002\u503e\u659c\u6905\u5b50\u4f1a\u6539\u53d8\u5b83\u7684\u4f4d\u7f6e\u548c\u7a33\u5b9a\u6027\u3002\u516b\u4e2a\u72ec\u7acb\u6d4b\u91cf\u7684\u53ef\u8ffd\u6eaf\u5230 150 \u5e74\u524d\u7684\u6e29\u5ea6\u548c\u76d0\u5ea6\u6570\u636e\u96c6\u4f7f\u5e03\u5c14\u4eba\u80fd\u591f\u8bc1\u660e\u5168\u7403\u53d8\u6696\u786e\u5b9e\u589e\u52a0\u4e86\u6d0b\u6d41\u7684\u4e0d\u7a33\u5b9a\u6027\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6539\u53d8\u4e86\u5b83\u4eec\u7684\u6d41\u52a8\u6a21\u5f0f\u3002\u5206\u6790\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff1a\u201c\uff08\u8fd1\u51e0\u5341\u5e74\u6765 AMOC \u7684\uff09\u8fd9\u79cd\u4e0b\u964d\u53ef\u80fd\u4e0e\u4e0a\u4e2a\u4e16\u7eaa\u51e0\u4e4e\u5b8c\u5168\u5931\u53bb\u7a33\u5b9a\u6027\u6709\u5173\uff0c\u800c\u4e14 AMOC \u53ef\u80fd\u63a5\u8fd1\u5411\u5f31\u5faa\u73af\u6a21\u5f0f\u7684\u5173\u952e\u8fc7\u6e21\u3002\u201d\n\u7231\u5c14\u5170\u6885\u52aa\u65af\u5927\u5b66\u7684 Levke Caesar \u6ca1\u6709\u53c2\u4e0e\u8fd9\u9879\u7814\u7a76\uff0c\u4ed6\u8bf4\uff1a\u201c\u7814\u7a76\u65b9\u6cd5\u4e0d\u80fd\u7ed9\u6211\u4eec\u53ef\u80fd\u5d29\u6e83\u7684\u786e\u5207\u65f6\u95f4\uff0c\u4f46\u5206\u6790\u63d0\u4f9b\u7684\u8bc1\u636e\u8868\u660e AMOC \u5df2\u7ecf\u5931\u53bb\u7a33\u5b9a\u6027\uff0c\u6211\u8ba4\u4e3a\u4f5c\u4e3a\u8b66\u544a\uff0c\u6211\u4eec\u53ef\u80fd\u6bd4\u6211\u4eec\u60f3\u8c61\u7684\u66f4\u63a5\u8fd1 AMOC \u7684\u5c0f\u8d39\u3002\u201d\u82f1\u56fd\u4f26\u6566\u5927\u5b66\u5b66\u9662\u7684\u6234\u7ef4\u00b7\u7d22\u7eb3\u5229 (David Thornalley) \u7684\u7814\u7a76\u8868\u660e\uff0cAMOC \u5904\u4e8e 1600 \u5e74\u6765\u7684\u6700\u5f31\u70b9\uff0c\u4ed6\u8bf4\uff1a\u201c\u8fd9\u4e9b\u7a33\u5b9a\u6027\u4e0b\u964d\u7684\u8ff9\u8c61\u4ee4\u4eba\u62c5\u5fe7\u3002\u4f46\u6211\u4eec\u4ecd\u7136\u4e0d\u77e5\u9053\u5d29\u6e83\u662f\u5426\u4f1a\u53d1\u751f\uff0c\u6216\u8005\u6211\u4eec\u79bb\u5b83\u6709\u591a\u8fd1\u3002\u201d", "note_en": "A shutdown would have devastating global impacts and must not be allowed to happen, researchers say\n    Climate scientists have detected warning signs of the collapse of the Gulf Stream, one of the planet\u2019s main potential tipping points.\n The research found \u201can almost complete loss of stability over the last century\u201d of the currents that researchers call the Atlantic Meridional Overturning Circulation (AMOC). The currents are  already at their slowest point in at least 1,600 years, but the new analysis shows they may be nearing a shutdown.\n  Such an event would have catastrophic consequences around the world, severely disrupting the rains that billions of people depend on for food in India, South America and West Africa; increasing storms and lowering temperatures in Europe; and pushing up the sea level in the eastern US. It would also further endanger the Amazon rainforest and Antarctic ice sheets.\n The complexity of the AMOC system and uncertainty over levels of future global heating make it impossible to forecast the date of any collapse for now. It could be within a decade or two, or several centuries away. But the colossal impact it would have means it must never be allowed to happen, the scientists said.\n \u201cThe signs of destabilisation being visible already is something that I wouldn\u2019t have expected and that I find scary,\u201d said Niklas Boers, from the Potsdam Institute for Climate Impact Research in Germany, who did the research. \u201cIt\u2019s something you just can\u2019t [allow to] happen.\u201d\n It is not known what level of CO2 would trigger an AMOC collapse, he said. \u201cSo the only thing to do is keep emissions as low as possible. The likelihood of this extremely high-impact event happening increases with every gram of CO2 that we put into the atmosphere\u201d.\n Scientists are increasingly concerned about tipping points \u2013 large, fast and irreversible changes to the climate. Boers and his colleagues reported in May that a significant part of the Greenland ice sheet is  on the brink, threatening a big rise in global sea level. Others have shown recently that the Amazon rainforest is now  emitting more CO2 than it absorbs, and that the 2020 Siberian heatwave led to  worrying releases of methane.\n  The world may already have crossed a series of  tipping points, according to a 2019 analysis, resulting in \u201can existential threat to civilisation\u201d. A major report from the Intergovernmental Panel on Climate Change, due on Monday, is expected to set out the worsening state of the climate crisis.\n Boer\u2019s research, published in the journal Nature Climate Change, is titled \u201cObservation-based early-warning signals for a collapse of the AMOC\u201d. Ice-core and other data from the last 100,000 years show the AMOC has two states: a fast, strong one, as seen over recent millennia, and a slow, weak one. The data shows rising temperatures can make the AMOC switch abruptly between states over one to five decades.\n The AMOC is driven by dense, salty seawater sinking into the Arctic ocean, but the melting of freshwater from Greenland\u2019s ice sheet is slowing the process down earlier than climate models suggested.\n Boers used the analogy of a chair to explain how changes in ocean temperature and salinity can reveal the AMOC\u2019s instability. Pushing a chair alters its position, but does not affect its stability if all four legs remain on the floor. Tilting the chair changes both its position and stability.\n Eight independently measured datasets of temperature and salinity going back as far as 150 years enabled Boers to show that global heating is indeed increasing the instability of the currents, not just changing their flow pattern.\n The analysis concluded: \u201cThis decline [of the AMOC in recent decades] may be associated with an almost complete loss of stability over the course of the last century, and the AMOC could be close to a critical transition to its weak circulation mode.\u201d\n Levke Caesar, at Maynooth University in Ireland, who was not involved in the research, said: \u201cThe study method cannot give us an exact timing of a possible collapse, but the analysis presents evidence that the AMOC has already lost stability, which I take as a warning that we might be closer to an AMOC tipping than we think.\u201d\n David Thornalley, at University College London in the UK, whose work showed the AMOC is at its weakest point in 1,600 years, said: \u201cThese signs of decreasing stability are concerning. But we still don\u2019t know if a collapse will occur, or how close we might be to it.\u201d", "posttime": "2021-08-06 00:46:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u79d1\u5b66\u5bb6,\u5371\u673a,crisis,amoc", "title": "\u6c14\u5019\u5371\u673a\uff1a\u79d1\u5b66\u5bb6\u53d1\u73b0\u58a8\u897f\u54e5\u6e7e\u6d41\u5d29\u6e83\u7684\u8b66\u544a\u4fe1\u53f7", "title_en": "Climate crisis: Scientists spot warning signs of Gulf Stream collapse", "transed": 1, "url": "https://www.theguardian.com/environment/2021/aug/05/climate-crisis-scientists-spot-warning-signs-of-gulf-stream-collapse", "via": "", "real_tags": ["\u79d1\u5b66\u5bb6", "\u5371\u673a", "crisis", "amoc"]}, {"category": "", "categoryclass": "", "imagename": "fd12bc0b43640f43766d175efe1768a0.png", "infoid": 1071555, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2020 \u5e74 3 \u6708 16 \u65e5\uff0c\u7ebd\u7ea6\u5dde\u3001\u65b0\u6cfd\u897f\u5dde\u548c\u5eb7\u6d85\u72c4\u683c\u5dde\u7684\u5dde\u957f\u5ba3\u5e03\u4e86\u201c\u6253\u51fb COVID-19 \u7684\u533a\u57df\u6027\u65b9\u6cd5\u201d\uff0c\u7406\u7531\u662f\u7f3a\u4e4f\u8054\u90a6\u9886\u5bfc\u548c\u56fd\u5bb6\u6807\u51c6\u3002\u4e24\u5929\u540e\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u52a0\u5165\u3002\u5230 4 \u6708\u4e2d\u65ec\uff0c\u7279\u62c9\u534e\u5dde\u3001\u7f57\u5fb7\u5c9b\u5dde\u548c\u9a6c\u8428\u8bf8\u585e\u5dde\u6210\u4e3a\u8054\u76df\u7684\u4e00\u90e8\u5206\u3002\u7ebd\u7ea6\u5dde\u5dde\u957f\u5b89\u5fb7\u9c81\u00b7\u5e93\u83ab (Andrew Cuomo) \u8bf4\uff1a\u201c\u8fd9\u4e0d\u662f\u4e00\u573a\u53ef\u4ee5\u5355\u72ec\u83b7\u80dc\u7684\u6218\u4e89\u3002\u201d\u4e00\u9879\u65b0\u7814\u7a76\u8868\u660e\u8fd9\u79cd\u60c5\u7eea\u662f\u591a\u4e48\u6b63\u786e\u3002\u8fd9\u9879\u7531\u8036\u9c81\u5927\u5b66 SOM \u52a9\u7406\u6559\u6388 Paul Goldsmith-Pinkham \u5171\u540c\u64b0\u5199\u5e76\u53d1\u8868\u5728\u300a\u7f8e\u56fd\u56fd\u5bb6\u79d1\u5b66\u9662\u9662\u520a\u300b\u4e0a\u7684\u7814\u7a76\u8bc1\u660e\u4e86\u5728 COVID-19 \u7b49\u6d41\u884c\u75c5\u7684\u65e9\u671f\u9636\u6bb5\u534f\u8c03\u8de8\u5883\u904f\u5236\u653f\u7b56\u7684\u5de8\u5927\u597d\u5904\u3002\u901a\u8fc7\u5171\u4eab\u4fe1\u606f\u3001\u9884\u6d4b\u75c5\u4f8b\u4f20\u64ad\u4ee5\u53ca\u4e0e\u90bb\u8fd1\u53f8\u6cd5\u7ba1\u8f96\u533a\u3001\u5dde\u548c\u56fd\u5bb6\u540c\u6b65\u5c01\u9501\uff0c\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u4f20\u64ad\u3002 \u201c\u4e00\u65e6\u75be\u75c5\u5728\u7f51\u7edc\u4e2d\u8513\u5ef6\uff0c\u60a8\u5c31\u5df2\u7ecf\u843d\u540e\u4e86\uff0c\u8bd5\u56fe\u73a9\u5f04\u9f39\u9f20\uff0c\u201d\u6208\u5fb7\u53f2\u5bc6\u65af-\u5e73\u514b\u59c6\u8bf4\u3002 \u201c\u4f60\u8d8a\u80fd\u6839\u636e\u5916\u90e8\u4fe1\u606f\u5feb\u901f\u9501\u5b9a\u4e8b\u60c5\uff0c\u5c31\u8d8a\u80fd\u5728\u4f20\u64ad\u5f00\u59cb\u4e4b\u524d\u963b\u6b62\u5b83\u3002\u201d Goldsmith-Pinkham \u548c\u4ed6\u7684\u5408\u8457\u8005\uff0c\u54c8\u4f5b\u5927\u5b66\u7684 Samuel Tau \u4ee5\u53ca\u65af\u5766\u798f\u5927\u5b66\u7684 Arun Chandrasekhar \u548c Matthew Jackson\uff0c\u4f7f\u7528\u75be\u75c5\u4f20\u64ad\u6a21\u578b\u6765\u7814\u7a76\u7c7b\u4f3c COVID \u75c5\u6bd2\u7684\u4f20\u64ad\u3002\u8be5\u6a21\u578b\u6a21\u62df\u4e86 40 \u4e2a\u72ec\u7acb\u7684\u8f96\u533a\uff0c\u6bcf\u4e2a\u8f96\u533a\u7684\u4eba\u53e3\u4e3a 3,500 \u4eba\u2014\u2014\u76f8\u5f53\u4e8e\u533a\u57df\u7f51\u7edc\u4e2d\u7684\u5c0f\u57ce\u9547\u3002\u7814\u7a76\u4eba\u5458\u8fdb\u884c\u4e86\u6570\u5343\u6b21\u6a21\u62df\uff0c\u4ee5\u4e86\u89e3\u57fa\u4e8e\u4e24\u79cd\u4e00\u822c\u904f\u5236\u653f\u7b56\u7684\u4f20\u64ad\u6a21\u5f0f\u3002\u6839\u636e\u201c\u88ab\u52a8\u201d\u653f\u7b56\uff0c40 \u4e2a\u53f8\u6cd5\u7ba1\u8f96\u533a\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4ec5\u5728\u6848\u4ef6\u5230\u8fbe\u5176\u5883\u5185\u540e\u624d\u5bf9\u6848\u4ef6\u4f5c\u51fa\u56de\u5e94\u3002\u5728\u201c\u4e3b\u52a8\u201d\u653f\u7b56\u4e0b\uff0c\u76f8\u90bb\u8f96\u533a\u5171\u4eab\u4fe1\u606f\u5e76\u534f\u8c03\u653f\u7b56\uff0c\u4ee5\u6839\u636e\u533a\u57df\u524d\u666f\u9632\u6b62\u75c5\u6bd2\u4f20\u64ad\u3002\u4ed6\u4eec\u53d1\u73b0\uff0c\u9488\u5bf9 COVID-19 \u7b49\u75be\u75c5\u7684\u53cd\u5e94\u6027\u653f\u7b56\u5e73\u5747\u4f1a\u5bfc\u81f4\u7ea6 30% \u7684\u4eba\u53e3\u53d7\u5230\u611f\u67d3\u3002\u5982\u679c\u53f8\u6cd5\u7ba1\u8f96\u533a\u4e3b\u52a8\u91c7\u53d6\u904f\u5236\u63aa\u65bd\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u6839\u636e\u5883\u5916\u611f\u67d3\u7387\u505a\u51fa\u51b3\u5b9a\uff0c\u90a3\u4e48\u4e0d\u5230 2% \u7684\u4eba\u53e3\u4f1a\u53d7\u5230\u611f\u67d3\u3002 Goldsmith-Pinkham \u8bf4\uff1a\u201c\u4e00\u9879\u6709\u6548\u7684\u4e3b\u52a8\u653f\u7b56\u662f\u786e\u5b9a\u90bb\u8fd1\u53f8\u6cd5\u7ba1\u8f96\u533a\u4f55\u65f6\u6709\u6848\u4ef6\u5e76\u5728\u9884\u671f\u4e2d\u5173\u95ed\u3002\u201d \u201c\u56e0\u4e3a\u611f\u67d3\u53ef\u4ee5\u5448\u6307\u6570\u7ea7\u589e\u957f\uff0c\u6240\u4ee5\u5728\u5c01\u9501\u53d1\u751f\u65f6\u9632\u6b62\u6700\u521d\u7684\u4f20\u64ad\u548c\u534f\u8c03\u53ef\u4ee5\u83b7\u5f97\u5f88\u9ad8\u7684\u56de\u62a5\uff0c\u800c\u4e0d\u662f\u8ba9\u4e00\u4e2a\u4f4d\u7f6e\u88ab\u9501\u5b9a\uff0c\u75c5\u6bd2\u9003\u9038\uff0c\u7136\u540e\u968f\u540e\u7684\u4f4d\u7f6e\u88ab\u9501\u5b9a\u7b49\u7b49\u3002\u201d\n\u4e5f\u5c31\u662f\u8bf4\uff0cGoldsmith-Pinkham \u6307\u51fa\uff0c\u5373\u4f7f\u662f\u534f\u8c03\u7684\u533a\u57df\u653f\u7b56\u4e5f\u96be\u4ee5\u5f88\u597d\u5730\u6267\u884c\u3002\u968f\u7740\u611f\u67d3\u7387\u4e0b\u964d\uff0c\u611f\u67d3\u53d8\u5f97\u66f4\u52a0\u96be\u4ee5\u68c0\u6d4b\u3002\u9274\u4e8e\u5927\u7ea6\u4e00\u534a\u7684\u75c5\u4f8b\u662f\u65e0\u75c7\u72b6\u7684\uff0c\u50cf COVID-19 \u8fd9\u6837\u7684\u75be\u75c5\u63d0\u51fa\u4e86\u7279\u6b8a\u7684\u6311\u6218\u3002\u6b64\u5916\uff0c\u4eba\u4eec\u5728\u88ab\u544a\u77e5\u65f6\u5e76\u4e0d\u603b\u662f\u5446\u5728\u5bb6\u91cc\u3002\u7efc\u4e0a\u6240\u8ff0\uff0c\u8fd9\u4e9b\u53d8\u91cf\u4f7f\u611f\u67d3\u5f88\u5bb9\u6613\u6cc4\u6f0f\u5230\u9694\u79bb\u533a\u4e4b\u5916\uff0c\u5e76\u5728\u5730\u7406\u4e0a\u8f83\u8fdc\u7684\u5730\u533a\u5f15\u53d1\u95ee\u9898\u3002 \u201c\u9700\u8981\u5f3a\u8c03\u7684\u4e00\u70b9\u662f\uff0c\u4e0d\u80fd\u6709\u4efb\u4f55\u6cc4\u6f0f\u3002\u68c0\u6d4b\u771f\u7684\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u771f\u7684\u9700\u8981\u5f88\u597d\u7684\u6267\u6cd5\uff0c\u201d\u6208\u5fb7\u53f2\u5bc6\u65af-\u5e73\u514b\u59c6\u8bf4\u3002 \u201c\u5982\u679c\u6709\u4efb\u4f55\u6cc4\u6f0f\uff0c\u90a3\u4e48\u5c31\u4f1a\u7834\u574f\u533a\u57df\u5f0f\u653f\u7b56\u7684\u6709\u6548\u6027\uff0c\u56e0\u4e3a\u7a81\u7136\u4e4b\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7f51\u7edc\u4e0a\u8df3\u8dc3\uff0c\u5e76\u5728\u7ebf\u8def\u4e0a\u4ea7\u751f\u975e\u5e38\u5927\u7684\u975e\u7ebf\u6027\u6548\u5e94\u3002\u201d\u867d\u7136\u8be5\u6a21\u578b\u4e13\u6ce8\u4e8e\u6d41\u884c\u75c5\u7684\u521d\u59cb\u9636\u6bb5\uff0c\u4f46\u5b83\u4ecd\u7136\u53ef\u4ee5\u4e3a\u6301\u7eed\u5e94\u5bf9 COVID-19 \u63d0\u4f9b\u91cd\u8981\u7684\u7ecf\u9a8c\u6559\u8bad\uff0c\u5c24\u5176\u662f\u653f\u5e9c\u5e94\u8be5\u5982\u4f55\u8003\u8651\u8de8\u5883\u5408\u4f5c\u3002\u4f8b\u5982\uff0c\u6a21\u578b\u4e2d\u611f\u67d3\u7684\u5f39\u8df3\u5f0f\u4f20\u64ad\u4e3a\u56fd\u9645\u75ab\u82d7\u63a5\u79cd\u5de5\u4f5c\u63d0\u4f9b\u4e86\u652f\u6301\u3002\u6208\u5fb7\u53f2\u5bc6\u65af\u00b7\u5e73\u514b\u6c49\u59c6\u8bf4\uff0c\u9065\u8fdc\u56fd\u5bb6\u7684\u611f\u67d3\u5f88\u53ef\u80fd\u4f1a\u518d\u6b21\u56f0\u6270\u6211\u4eec\u3002 \u201c\u7b80\u5355\u5730\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u628a\u94b1\u82b1\u5728\u5176\u4ed6\u4eba\u8eab\u4e0a\uff0c\u6211\u4eec\u4f1a\u6bd4\u4e0d\u82b1\u94b1\u66f4\u597d\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u6bcf\u4e2a\u4eba\u90fd\u5728\u540c\u4e00\u6761\u8239\u4e0a\uff0c\u6ea2\u51fa\u6548\u5e94\u6700\u7ec8\u4f1a\u9020\u6210\u5168\u9762\u7684\u5de8\u5927\u6210\u672c\u3002\u201d", "note_en": "On March 16, 2020, the governors of New York, New Jersey, and Connecticut announced \u201ca regional approach to combatting COVID-19,\u201d citing an absence of federal leadership and national standards. Pennsylvania joined two days later. By mid-April, Delaware, Rhode Island, and Massachusetts were part of the coalition.\n \u201cThis is not a war that can be won alone,\u201d said New York Governor Andrew Cuomo.\n A new study shows just how right that sentiment was. The research, co-authored by Yale SOM assistant professor Paul Goldsmith-Pinkham and published in the Proceedings of the National Academy of Sciences, demonstrates the powerful benefit of coordinating containment policies across borders in the early stages of an epidemic like COVID-19. By sharing information, predicting the transmission of cases, and synchronizing lockdowns with neighboring jurisdictions, states and countries can dramatically decrease spread.\n \u201cOnce a disease gets going in a network, you\u2019re already behind, trying to play whack-a-mole,\u201d says Goldsmith-Pinkham. \u201cThe more you can lock things down quickly based on outside information, the more you can halt the spread before it\u2019s started.\u201d\n   Goldsmith-Pinkham and his co-authors, Samuel Thau of Harvard University and Arun Chandrasekhar and Matthew Jackson of Stanford University, used a model of disease transmission to study the spread of a COVID-like virus. The model simulates 40 independent jurisdictions, each with a population of 3,500 people\u2014the equivalent of small towns in a regional network. The researchers ran thousands of simulations to understand patterns of transmission based on two general containment policies. Under a \u201creactive\u201d policy, each of the 40 jurisdictions responds to cases only once they\u2019ve arrived within their borders. Under a \u201cproactive\u201d policy, neighboring jurisdictions share information and coordinate policies to prevent the spread of the virus based on the regional outlook.\n They find that reactive policies to a disease like COVID-19 result, on average, in about 30% of a population getting infected. If jurisdictions are instead proactive about containment, meaning that they make decisions based on infection rates beyond their borders, less than 2% of their population is infected.\n   \u201cAn effective proactive policy is one that identifies when neighboring jurisdictions have cases and shuts down in anticipation,\u201d Goldsmith-Pinkham says. \u201cBecause infections can grow exponentially, there are high returns to preventing initial spread and coordinating when lockdowns occur rather than having one location lock down and the virus escape and then subsequent locations lock down and so on.\u201d\n That said, Goldsmith-Pinkham notes that even coordinated regional policies are difficult to execute well. As rates of infection fall, infections become more difficult to detect. A disease like COVID-19 presents particular challenges, given that roughly half of cases are asymptomatic. Moreover, people don\u2019t always stay at home when they are told to. Taken together, these variables make it easy for infections to leak beyond containment zones and spark problems in geographically distant regions.\n \u201cThe point that needs to be emphasized is that there cannot be any leakage. Detection is a really big deal, and we really need good enforcement,\u201d Goldsmith-Pinkham says. \u201cIf there is any leakage, then that undermines the effectiveness of regional-style policies, as, all of a sudden, we can get hops along the network and very big nonlinear effects down the line.\u201d\n   While the model focused on the initial phase of an epidemic, it still has important lessons for the ongoing response to COVID-19\u2014and especially how governments should be thinking about cooperation across borders.\n For instance, the ricocheting spread of infection in the model bolsters the case for international vaccination efforts. Infections in far-flung countries, Goldsmith Pinkham says, will likely come back to haunt us.\n \u201cSimply put, if we spend money on other people, we will be better off than if we don\u2019t,\u201d he says. \u201cEveryone is in the same boat and spillovers end up imposing really big costs across the board.\u201d", "posttime": "2021-08-06 00:46:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8de8\u754c,pandemic,\u4f20\u64ad", "title": "\u904f\u5236\u5927\u6d41\u884c\uff0c\u8de8\u754c\u534f\u8c03", "title_en": "To Stop a Pandemic in Its Tracks, Coordinate Across Borders", "transed": 1, "url": "https://insights.som.yale.edu/insights/to-stop-pandemic-in-its-tracks-coordinate-across-borders", "via": "", "real_tags": ["\u8de8\u754c", "pandemic", "\u4f20\u64ad"]}]