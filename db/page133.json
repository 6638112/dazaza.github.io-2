[{"category": "", "categoryclass": "", "imagename": "0c83f00bfa02ff0e65a27e43ccd3423c.jpg", "infoid": 1069472, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6ce2\u54e5\u5927\uff0c7 \u6708 23 \u65e5\uff08\u8def\u900f\u793e\uff09 - \u54e5\u4f26\u6bd4\u4e9a\u5468\u4e94\u6279\u51c6\u4e86\u7528\u4e8e\u533b\u7597\u548c\u5176\u4ed6\u884c\u4e1a\u7684\u5e72\u5927\u9ebb\u51fa\u53e3\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5b89\u7b2c\u65af\u56fd\u5bb6\u53c8\u8fc8\u51fa\u4e86\u4e00\u6b65\u53d1\u5c55\u5176\u5927\u9ebb\u4ea7\u4e1a\uff0c\u5c3d\u7ba1\u6f5c\u529b\u5f88\u5927\uff0c\u4f46\u8fdb\u5c55\u7f13\u6162\u3002\u4f0a\u4e07\u00b7\u675c\u514b\u603b\u7edf\u7b7e\u7f72\u4e86\u4e00\u9879\u89e3\u9664\u5927\u9ebb\u5e72\u82b1\u51fa\u53e3\u7981\u4ee4\u7684\u6cd5\u4ee4\uff0c\u6295\u8d44\u8005\u8ba4\u4e3a\u6b64\u4e3e\u81f3\u5173\u91cd\u8981\u3002\u8be5\u6307\u4ee4\u8fd8\u5141\u8bb8\u6269\u5927\u57fa\u4e8e\u5927\u9ebb\u7684\u836f\u7269\u7684\u9500\u552e\u5e76\u7b80\u5316\u76d1\u7ba1\u7a0b\u5e8f\u3002\u867d\u7136\u54e5\u4f26\u6bd4\u4e9a\u88ab\u8a89\u4e3a\u76d1\u7ba1\u5927\u9ebb\u79cd\u5b50\u3001\u690d\u7269\u548c\u7269\u8d28\uff08\u5982\u836f\u7528\u6cb9\u3001\u4e73\u818f\u548c\u63d0\u53d6\u7269\uff09\u7684\u62e5\u6709\u3001\u751f\u4ea7\u3001\u5206\u9500\u3001\u5546\u4e1a\u5316\u548c\u51fa\u53e3\u7684\u5148\u9a71\uff0c\u4f46\u6295\u8d44\u8005\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u62b1\u6028\u4ed6\u4eec\u6240\u8bf4\u7684\u66f2\u6298\u7684\u51fa\u53e3\u5ba1\u6279\u7a0b\u5e8f\u3002 \u201c\u8fd9\u610f\u5473\u7740\u54e5\u4f26\u6bd4\u4e9a\u53ef\u4ee5\u8fdb\u5165\u5e76\u5728\u56fd\u9645\u5e02\u573a\u4e0a\u53d1\u6325\u91cd\u8981\u4f5c\u7528\uff0c\u201d\u675c\u514b\u5728\u7b7e\u7f72\u8be5\u6cd5\u4ee4\u540e\u8868\u793a\uff0c\u5e76\u8865\u5145\u8bf4\u65b0\u89c4\u5219\u5c06\u5141\u8bb8\u54e5\u4f26\u6bd4\u4e9a\u7684\u5927\u9ebb\u4ea7\u4e1a\u6269\u5c55\u5230\u98df\u54c1\u548c\u996e\u6599\u3001\u5316\u5986\u54c1\u7b49\u9886\u57df\u3002\u5927\u9ebb\u751f\u4ea7\u5546 Khiron \u8d1f\u8d23\u76d1\u7ba1\u95ee\u9898\u7684\u526f\u603b\u88c1\u80e1\u5b89\u00b7\u8fed\u6208\u00b7\u963f\u5c14\u74e6\u96f7\u65af (Juan Diego Alvarez) \u544a\u8bc9\u8def\u900f\u793e\uff1a\u201c\u53d6\u6d88\u5bf9\u5e72\u82b1\u51fa\u53e3\u7684\u7981\u4ee4\u5c06\u542f\u52a8\u4e00\u4e2a\u76d1\u7ba1\u7a0b\u5e8f\uff0c\u6211\u4eec\u5e0c\u671b\u8be5\u7a0b\u5e8f\u80fd\u591f\u975e\u5e38\u8be6\u7ec6\u5730\u6267\u884c\uff0c\u8fbe\u5230\u6700\u9ad8\u7684\u56fd\u9645\u6807\u51c6\u3002\u54e5\u4f26\u6bd4\u4e9a\u5927\u9ebb\u4ea7\u4e1a\u534f\u4f1a Asocolcanna \u6566\u4fc3\u8be5\u56fd\u6293\u4f4f\u673a\u9047\uff0c\u5145\u5206\u5229\u7528\u5176\u7ade\u4e89\u4f18\u52bf\u3002\nAsocolcanna \u5728\u5176\u7f51\u7ad9\u4e0a\u53d1\u8868\u7684\u4e00\u5c01\u4fe1\u4e2d\u8bf4\uff1a\u201c\u5728\u5168\u7403\u5927\u9ebb\u4ea7\u4e1a\u6b63\u5728\u5b8c\u5584\u4e4b\u9645\uff0c\u54e5\u4f26\u6bd4\u4e9a\u53d1\u6325\u5176\u6f5c\u529b\u81f3\u5173\u91cd\u8981\u3002\u201d\u5728\u836f\u7528\u5927\u9ebb\u884c\u4e1a\u76d1\u7ba1\u8f83\u4e3a\u6210\u719f\u7684\u56fd\u5bb6\uff0c\u5982\u7f8e\u56fd\u3001\u82f1\u56fd\u3001\u5fb7\u56fd\u548c\u4ee5\u8272\u5217\uff0c\u5e72\u5927\u9ebb\u662f\u5e02\u573a\u6700\u53d1\u8fbe\u7684\u90e8\u95e8\uff0c\u5360\u6240\u6709\u9500\u552e\u989d\u768450%\u4ee5\u4e0a\u3002", "note_en": "BOGOTA, July 23 (Reuters) - Colombia on Friday gave the green light for exports of dried cannabis for medical and other industries, as the Andean country took another step to develop its marijuana industry, where progress has been slow despite high potential.\n President Ivan Duque signed a decree lifting a prohibition on exporting dried cannabis flower, a move seen as crucial by investors.\n The directive also allows for the expansion of sales of cannabis-based medicines and streamlines regulatory procedures.\n While Colombia has been hailed as a pioneer in regulating the possession, production, distribution, commercialization and export of seeds, plants and substances derived from cannabis - like oils, creams and extracts for medicinal purposes - investors have long complained about what they say is a tortuous export-approval process.\n &#34;This means Colombia can enter to play a big role in the international market,&#34; Duque said after signing the decree, adding the new rules would allow Colombia&#39;s cannabis industry to expand into food and drinks, cosmetics and other sectors.\n  &#34;Lifting the prohibition on exporting the dry flower will start a regulatory process which we hope will be performed in great detail, to the highest international standards,&#34; Juan Diego Alvarez, vice president of regulatory issues for cannabis producer Khiron, told Reuters.\n Colombian cannabis industry association Asocolcanna urged the country to seize the opportunity to make the most of its competitive advantages.\n &#34;It&#39;s crucial for Colombia to achieve its potential at a time when the global cannabis industry is being refined,&#34; Asocolcanna said in a letter published on its website.\n In countries where the medicinal cannabis industry has more mature regulation, like the United States, the United Kingdom, Germany and Israel, dried cannabis is the most developed sector of the market, accounting for more than 50% of all sales.", "posttime": "2021-07-24 23:34:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d6\u6d88,boosts,\u5927\u9ebb", "title": "\u54e5\u4f26\u6bd4\u4e9a\u901a\u8fc7\u53d6\u6d88\u5e72\u82b1\u51fa\u53e3\u7981\u4ee4\u4fc3\u8fdb\u5927\u9ebb\u4ea7\u4e1a\u7684\u840c\u82bd", "title_en": "Colombia boosts budding cannabis industry by removing ban on dry flower exports", "transed": 1, "url": "https://www.reuters.com/world/americas/colombia-boosts-budding-cannabis-industry-by-removing-ban-dry-flower-exports-2021-07-23/", "via": "", "real_tags": ["\u53d6\u6d88", "boosts", "\u5927\u9ebb"]}, {"category": "", "categoryclass": "", "imagename": "34afa80e2a658d3608af0a50877a34f9.jpeg", "infoid": 1069471, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u5468\u5bf9 Datasette \u7684\u4e00\u4e2a\u5c0f\u6539\u8fdb\uff1a\u6211\u6dfb\u52a0\u4e86\u5bf9\u901a\u8fc7 Unix \u57df\u5957\u63a5\u5b57\u8fdb\u884c\u4ee3\u7406\u7684\u652f\u6301\u3002\u8fd9\u6700\u521d\u662f\u6765\u81ea Aslak Raanes \u7684\u529f\u80fd\u8bf7\u6c42\uff1a#1388\uff1a\u4f7f\u7528 UNIX \u57df\u5957\u63a5\u5b57\u63d0\u4f9b\u670d\u52a1\u3002\u6211\u4ee5\u524d\u6ca1\u6709\u63a5\u89e6\u8fc7\u8fd9\u4e9b\uff0c\u6240\u4ee5\u8fd9\u662f\u5b66\u4e60\u65b0\u4e1c\u897f\u7684\u597d\u673a\u4f1a\u3002 Unix \u57df\u5957\u63a5\u5b57\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u673a\u5668\u4e0a\u7684\u4e0d\u540c\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u4e8e TCP \u7684\u673a\u5236\u4e0e\u6bcf\u4e2a\u8fdb\u7a0b\u8fdb\u884c\u901a\u4fe1\uff0c\u4f46\u901a\u8fc7\u6587\u4ef6\u8def\u5f84\u4ee3\u66ff\u3002\u6211\u4e4b\u524d\u5728 Docker \u5b88\u62a4\u8fdb\u7a0b\u4e2d\u9047\u5230\u8fc7\u8fd9\u4e9b\uff0c\u5b83\u4fa6\u542c\u8def\u5f84 /var/run/docker.sock \u5e76\u4e14\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528 curl \u8fdb\u884c\u901a\u4fe1\uff1a\u5982\u679c\u5355\u51fb\u201cHTTP\u201d\u9009\u9879\u5361\uff0cDocker \u6587\u6863\u4e2d\u6709\u66f4\u591a\u793a\u4f8b\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0cnginx \u548c Apache \u90fd\u80fd\u591f\u5c06\u6d41\u91cf\u4ee3\u7406\u5230 Unix \u57df\u5957\u63a5\u5b57\u800c\u4e0d\u662f HTTP \u7aef\u53e3\uff0c\u8fd9\u4f7f\u5f97\u5b83\u6210\u4e3a\u8fd0\u884c\u540e\u7aef\u670d\u52a1\u5668\u800c\u4e0d\u5c06\u5b83\u4eec\u9644\u52a0\u5230 TCP \u7aef\u53e3\u7684\u6709\u7528\u673a\u5236\u3002 Datasette \u4f7f\u7528\u51fa\u8272\u7684 Uvicorn Python Web \u670d\u52a1\u5668\u6765\u63d0\u4f9b\u5f00\u7bb1\u5373\u7528\u7684\u6d41\u91cf\uff0c\u5e76\u4e14 Uvicorn \u5df2\u7ecf\u5305\u542b\u5bf9 UDS \u7684\u652f\u6301\u2014\u2014\u56e0\u6b64\u6dfb\u52a0\u5bf9 Datasette \u7684\u652f\u6301\u975e\u5e38\u5bb9\u6613\u2014\u2014\u8fd9\u662f\u5b8c\u6574\u7684\u5b9e\u73b0\u3002\u6211\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684 --uds \u9009\u9879\uff0c\u6240\u4ee5\u73b0\u5728\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u8fd0\u884c Datasette\uff1a\nDatasette \u5c06\u5728 /tmp/datasette.sock \u4e0a\u201c\u76d1\u542c\u201d\u2014\u2014\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837\u901a\u8fc7 curl \u8fd0\u884c\u8bf7\u6c42\uff1a\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837\u914d\u7f6e nginx \u6216 Apache \u6765\u4ee3\u7406\u5230 Datasette \u670d\u52a1\u5668\uff08nginx\uff09\uff1a daemon off;\u4e8b\u4ef6 { worker_connections 1024;} http { \u670d\u52a1\u5668 { \u76d1\u542c 80;\u4f4d\u7f6e / { proxy_pass http://datasette; proxy_set_header \u4e3b\u673a $host; } } \u4e0a\u6e38\u6570\u636e\u96c6 { \u670d\u52a1\u5668 unix:/tmp/datasette.sock; }} \u5b9e\u73b0\u53ea\u6709\u51e0\u884c\u4ee3\u7801\uff08\u5c06 uds \u9009\u9879\u4f20\u9012\u7ed9 Uvicorn\uff09\u4f46\u6dfb\u52a0\u6d4b\u8bd5\u8bc1\u660e\u66f4\u5177\u6311\u6218\u6027\u3002\u6211\u4f7f\u7528\u8fd9\u4e2a pytest \u56fa\u5b9a\u88c5\u7f6e\u6765\u542f\u52a8\u670d\u52a1\u5668\u8fdb\u7a0b\uff1a@ pytest\u3002\u5939\u5177\uff08\u8303\u56f4 =\u201c\u4f1a\u8bdd\u201d\uff09def ds_unix_domain_socket_server\uff08tmp_path_factory\uff09\uff1asocket_folder = tmp_path_factory\u3002 mktemp(&quot;uds&quot;) uds = str(socket_folder / &quot;datasette.sock&quot;) ds_proc = subprocess. Popen( [ &quot;datasette&quot;, &quot;--memory&quot;, &quot;--uds&quot;, uds], stdout = subprocess.PIPE, stderr = subprocess.STDOUT, cwd = tempfile.gettempdir(), ) #\u7ed9\u670d\u52a1\u5668\u65f6\u95f4\u542f\u52a8\u65f6\u95f4\u3002 sleep( 1.5) # \u68c0\u67e5\u662f\u5426\u6210\u529f\u542f\u52a8 assert not ds_proc.\u6c11\u610f\u8c03\u67e5\uff08\uff09\uff0cds_proc\u3002\u6807\u51c6\u8f93\u51fa\u3002\u8bfb\uff08\uff09\u3002 decode(&quot;utf-8&quot;) yield ds_proc, uds # \u5728 pytest \u4f1a\u8bdd\u7ed3\u675f\u65f6\u5173\u95ed\u5b83 ds_proc. terminate() \u6211\u5bf9\u5176\u4ed6\u4e00\u4e9b\u6d4b\u8bd5\u4f7f\u7528\u4e86\u7c7b\u4f3c\u7684\u6a21\u5f0f\uff0c\u4ee5\u7ec3\u4e60 #1221 \u4e2d\u6dfb\u52a0\u7684 --ssl-keyfile \u548c --ssl-certfile \u9009\u9879\u3002\u6d4b\u8bd5\u672c\u8eab\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff0c\u5229\u7528 HTTPX \u5bf9 Unix \u57df\u5957\u63a5\u5b57\u8fdb\u884c\u8c03\u7528\u7684\u80fd\u529b\uff1a\n@pytest\u3002\u6807\u8bb0\u3002\u4e32\u884c@pytest\u3002\u6807\u8bb0\u3002 skipif( not hasattr( socket, &quot;AF_UNIX&quot;), reason = &quot;Requires socket.AF_UNIX support&quot;) def test_serve_unix_domain_socket(ds_unix_domain_socket_server): _, uds = ds_unix_domain_socket_server transport = httpx. HTTPTransport(uds = uds) \u5ba2\u6237\u7aef = httpx.\u5ba2\u6237\u7aef\uff08\u4f20\u8f93 = \u4f20\u8f93\uff09\u54cd\u5e94 = \u5ba2\u6237\u7aef\u3002 get( &quot;http://localhost/_memory.json&quot;) assert { &quot;database&quot;: &quot;_memory&quot;, &quot;path&quot;: &quot;/_memory&quot;, &quot;tables&quot;: [], }. items() &lt;= \u54cd\u5e94\u3002 json()\u3002 items() skipif \u88c5\u9970\u5668\u907f\u514d\u5728\u4e0d\u652f\u6301 Unix \u57df\u5957\u63a5\u5b57\u7684\u5e73\u53f0\u4e0a\u8fd0\u884c\u6b64\u6d4b\u8bd5\uff08\u6211\u8ba4\u4e3a\u5305\u62ec Windows\uff0c\u8bf7\u53c2\u9605\u6b64\u8bc4\u8bba\uff09\u3002 @pytest.mark.serial \u88c5\u9970\u5668\u5e94\u7528\u4e86\u4e00\u4e2a\u201c\u6807\u8bb0\u201d\uff0c\u53ef\u7528\u4e8e\u6709\u9009\u62e9\u5730\u8fd0\u884c\u6d4b\u8bd5\u3002\u6211\u8fd9\u6837\u505a\u662f\u56e0\u4e3a Datasette \u7684\u6d4b\u8bd5\u4f7f\u7528 pytest-xdist \u5728 CI \u4e2d\u8fd0\u884c\uff0c\u4f46\u8fd9\u4e0e\u8fd9\u79cd\u542f\u52a8\u4e34\u65f6\u670d\u52a1\u5668\u7684\u65b9\u5f0f\u4e0d\u517c\u5bb9\u3002 Datasette \u5b9e\u9645\u4e0a\u5728 GitHub Actions \u4e2d\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a - name: Run tests run: | pytest -n auto -m &quot;not serial&quot; pytest -m &quot;serial&quot; pytest -n auto -m &quot;not serial&quot; \u884c\u4f7f\u7528 pytest-xdist \u5728\u81ea\u52a8\u9009\u62e9\u7684\u8fdb\u7a0b\u6570\u4e0a\u8fd0\u884c\u51e0\u4e4e\u6240\u6709\u6d4b\u8bd5\uff0c\u4f46\u8df3\u8fc7\u90a3\u4e9b\u7528@pytest.mark.serial \u6807\u8bb0\u3002\u7136\u540e\u7b2c\u4e8c\u884c\u5728\u6ca1\u6709\u4efb\u4f55\u989d\u5916\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u5269\u4f59\u7684\u4e32\u884c\u6d4b\u8bd5\u3002\u53ef\u4ee5\u5728\u4ee3\u7406\u6587\u6863\u540e\u9762\u7684\u8fd0\u884c\u6570\u636e\u96c6\u4e2d\u627e\u5230\u6b64\u529f\u80fd\u7684\u6587\u6863\u548c\u793a\u4f8b\u914d\u7f6e\u3002\u611f\u8c22 Aslak \u63d0\u4f9b\u6709\u5173 Apache \u914d\u7f6e\u7684\u6ce8\u91ca\u3002", "note_en": "A small enhancement to Datasette this week: I\u2019ve added support for proxying via Unix domain sockets.\n This started out as a feature request from Aslak Raanes:  #1388: Serve using UNIX domain socket.\n I\u2019ve not worked with these much before so it was a good opportunity to learn something new. Unix domain sockets provide a mechanism whereby different processes on a machine can communicate with each over over a mechanism similar to TCP, but via a file path instead.\n I\u2019ve encountered these before with the Docker daemon, which listens on path  /var/run/docker.sock and can be communicated with using  curl like so:\n  Plenty more examples  in the Docker documentation if you click the \u2019HTTP\u2019 tab.\n It turns out both nginx and Apache have the ability to proxy traffic to a Unix domain socket rather than to an HTTP port, which makes this a useful mechanism for running backend servers without attaching them to TCP ports.\n  Datasette uses the excellent  Uvicorn Python web server to serve traffic out of the box, and Uvicorn already  includes support for UDS\u2014so adding support to Datasette was pretty easy\u2014here\u2019s  the full implementation. I\u2019ve added a new  --uds option, so now you can run Datasette like this:\n  Datasette will \u201clisten\u201d on  /tmp/datasette.sock\u2014which means you can run requests via  curl like so:\n  More importantly, it means you can configure nginx or Apache to proxy to the Datasette server like this (nginx):\n daemon  off; events {  worker_connections  1024;} http {  server {  listen  80;  location  / {  proxy_pass http://datasette;  proxy_set_header Host  $host; } }  upstream  datasette {  server unix:/tmp/datasette.sock; }}\n    The implementation was only a few lines of code (to pass the  uds option to Uvicorn) but adding a test proved a little more challenging. I used this pytest fixture to spin up a server process:\n @ pytest. fixture( scope = &#34;session&#34;) def  ds_unix_domain_socket_server( tmp_path_factory):  socket_folder  =  tmp_path_factory. mktemp( &#34;uds&#34;)  uds  =  str( socket_folder  /  &#34;datasette.sock&#34;)  ds_proc  =  subprocess. Popen( [ &#34;datasette&#34;,  &#34;--memory&#34;,  &#34;--uds&#34;,  uds],  stdout = subprocess. PIPE,  stderr = subprocess. STDOUT,  cwd = tempfile. gettempdir(), )  # Give the server time to start  time. sleep( 1.5)  # Check it started successfully  assert  not  ds_proc. poll(),  ds_proc. stdout. read(). decode( &#34;utf-8&#34;)  yield  ds_proc,  uds  # Shut it down at the end of the pytest session  ds_proc. terminate()\n I use a similar pattern  for some other tests, to exercise the  --ssl-keyfile and  --ssl-certfile options added in  #1221.\n The test itself looks like this, taking advantage of HTTPX\u2019s ability to make calls against Unix domain sockets:\n @ pytest. mark. serial @ pytest. mark. skipif( not  hasattr( socket,  &#34;AF_UNIX&#34;),  reason = &#34;Requires socket.AF_UNIX support&#34;) def  test_serve_unix_domain_socket( ds_unix_domain_socket_server):  _,  uds  =  ds_unix_domain_socket_server  transport  =  httpx. HTTPTransport( uds = uds)  client  =  httpx. Client( transport = transport)  response  =  client. get( &#34;http://localhost/_memory.json&#34;)  assert {  &#34;database&#34;:  &#34;_memory&#34;,  &#34;path&#34;:  &#34;/_memory&#34;,  &#34;tables&#34;: [], }. items()  &lt;=  response. json(). items()\n The  skipif decorator avoids running this test on platforms which don\u2019t support Unix domain sockets (which I think includes Windows, see  this comment).\n The  @pytest.mark.serial decorator applies a \u201cmark\u201d that can be used to selectively run the test. I do this because Datasette\u2019s tests run in CI using  pytest-xdist, but that\u2019s not compatible with this way of spinning up a temporary server. Datasette actually runs the tests in GitHub Actions  like so:\n -  name:  Run tests  run:  |  pytest -n auto -m &#34;not serial&#34;  pytest -m &#34;serial&#34;\n The  pytest -n auto -m &#34;not serial&#34; line runs almost all of the tests using  pytest-xdist across an automatically selected number of processes, but skips the ones marked with  @pytest.mark.serial. Then the second line runs the remaining serial tests without any additional concurrency.\n Documenation and example configuration for this feature can be found in the  Running Datasette behind a proxy documentation. Thanks to Aslak for contributing the notes on Apache configuration.", "posttime": "2021-07-24 23:34:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "unix,quot", "title": "Unix \u57df\u5957\u63a5\u5b57\u7684\u4e50\u8da3", "title_en": "Fun with Unix domain sockets", "transed": 1, "url": "https://simonwillison.net/2021/Jul/13/unix-domain-sockets/", "via": "", "real_tags": ["unix", "quot"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069470, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u8ba9\u6211\u8bf4\u51fa Python \u6700\u5bb9\u6613\u88ab\u8bef\u89e3\u7684\u65b9\u9762\uff0c\u6211\u4f1a\u6beb\u4e0d\u72b9\u8c6b\u5730\u56de\u7b54\uff1aPython \u5bfc\u5165\u7cfb\u7edf\u3002\u53ea\u8981\u8bb0\u4f4f\u4f60\u4f7f\u7528\u4e86\u591a\u5c11\u6b21\u76f8\u5bf9\u5bfc\u5165\u5e76\u5f97\u5230\u7c7b\u4f3c ImportError \u7684\u4e1c\u897f\uff1a\u5c1d\u8bd5\u76f8\u5bf9\u5bfc\u5165\u800c\u6ca1\u6709\u5df2\u77e5\u7684\u7236\u5305\uff1b\u6216\u8005\u8bd5\u56fe\u5f04\u6e05\u695a\u5982\u4f55\u6784\u5efa\u4e00\u4e2a\u9879\u76ee\uff0c\u4ee5\u4fbf\u6240\u6709\u7684\u5bfc\u5165\u90fd\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1b\u6216\u8005\u5728\u627e\u4e0d\u5230\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u65f6\u5165\u4fb5 sys.path\u3002\u6bcf\u4e2a Python \u7a0b\u5e8f\u5458\u90fd\u7ecf\u5386\u8fc7\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u6d41\u884c\u7684 StackOverflow \u95ee\u9898\uff0c\u4f8b\u5982\u6211\u4eec\u4ece\u4e0d\u540c\u6587\u4ef6\u5939\u5bfc\u5165\u6587\u4ef6\uff081822 \u7968\uff09\u3001Python 3 \u4e2d\u7684\u76f8\u5bf9\u5bfc\u5165\uff081064 \u7968\uff09\u548c\u7b2c 10 \u4ebf\u6b21\u76f8\u5bf9\u5bfc\u5165\uff08993 \u7968\uff09\uff0c\u90fd\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6307\u6807\u5176\u4e2d\u3002 Python \u5bfc\u5165\u7cfb\u7edf\u4e0d\u4ec5\u770b\u8d77\u6765\u5f88\u590d\u6742\u2014\u2014\u5b83\u5f88\u590d\u6742\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u6587\u6863\u975e\u5e38\u597d\uff0c\u5b83\u4e5f\u4e0d\u80fd\u8ba9\u60a8\u5168\u9762\u4e86\u89e3\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u5f97\u5230\u8fd9\u6837\u4e00\u5f20\u56fe\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u7814\u7a76 Python \u6267\u884c import \u8bed\u53e5\u65f6\u5e55\u540e\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u4eca\u5929\u8981\u505a\u7684\u3002\u6ce8\u610f\uff1a\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u6307\u7684\u662f CPython 3.9\u3002\u968f\u7740 CPython \u7684\u53d1\u5c55\uff0c\u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\u80af\u5b9a\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u6211\u5c06\u5c1d\u8bd5\u8ddf\u8e2a\u91cd\u8981\u66f4\u6539\u5e76\u6dfb\u52a0\u66f4\u65b0\u8bf4\u660e\u3002\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u8ba9\u6211\u5411\u60a8\u5c55\u793a\u6211\u4eec\u8ba1\u5212\u7684\u66f4\u8be6\u7ec6\u7248\u672c\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u5bfc\u5165\u7cfb\u7edf\u7684\u6838\u5fc3\u6982\u5ff5\uff1a\u6a21\u5757\u3001\u5b50\u6a21\u5757\u3001\u5305\u3001from &lt;&gt; import &lt;&gt; \u8bed\u53e5\u3001\u76f8\u5bf9\u5bfc\u5165\u7b49\u3002\u7136\u540e\u6211\u4eec\u5c06\u5bf9\u4e0d\u540c\u7684\u5bfc\u5165\u8bed\u53e5\u8fdb\u884c\u8131\u7cd6\uff0c\u5e76\u770b\u5230\u5b83\u4eec\u6700\u7ec8\u90fd\u8c03\u7528\u4e86\u5185\u7f6e\u7684 __import__() \u51fd\u6570\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u7814\u7a76 __import__() \u7684\u9ed8\u8ba4\u5b9e\u73b0\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u6211\u4eec\u8d70\u5427\uff01\u4f60\u8ba4\u4e3a\u5b83\u6709\u4ec0\u4e48\u4f5c\u7528\uff1f\u60a8\u53ef\u80fd\u4f1a\u8bf4\u5b83\u5bfc\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a m \u7684\u6a21\u5757\u5e76\u5c06\u8be5\u6a21\u5757\u5206\u914d\u7ed9\u53d8\u91cf m\u3002\u4f60\u4f1a\u662f\u5bf9\u7684\u3002\u4f46\u7a76\u7adf\u4ec0\u4e48\u662f\u6a21\u5757\uff1f\u4ec0\u4e48\u88ab\u5206\u914d\u7ed9\u53d8\u91cf\uff1f\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u51fa\u66f4\u7cbe\u786e\u7684\u89e3\u91ca\uff1a\u8bed\u53e5 import m \u641c\u7d22\u540d\u4e3a m \u7684\u6a21\u5757\uff0c\u4e3a\u8be5\u6a21\u5757\u521b\u5efa\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\uff0c\u5e76\u5c06\u6a21\u5757\u5bf9\u8c61\u5206\u914d\u7ed9\u53d8\u91cf\u3002\u770b\u770b\u6211\u4eec\u5982\u4f55\u533a\u5206\u6a21\u5757\u548c\u6a21\u5757\u5bf9\u8c61\u3002\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5b9a\u4e49\u8fd9\u4e9b\u672f\u8bed\u3002\u6a21\u5757\u662f Python \u8ba4\u4e3a\u662f\u6a21\u5757\u5e76\u77e5\u9053\u5982\u4f55\u4e3a\u5176\u521b\u5efa\u6a21\u5757\u5bf9\u8c61\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u8fd9\u5305\u62ec Python \u6587\u4ef6\u3001\u76ee\u5f55\u548c\u7528 C \u7f16\u5199\u7684\u5185\u7f6e\u6a21\u5757\u7b49\u5185\u5bb9\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u67e5\u770b\u5b8c\u6574\u5217\u8868\u3002\u6211\u4eec\u5bfc\u5165\u4efb\u4f55\u6a21\u5757\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u8bbf\u95ee\u6a21\u5757\u5b9a\u4e49\u7684\u51fd\u6570\u3001\u7c7b\u3001\u5e38\u91cf\u548c\u5176\u4ed6\u540d\u79f0\u3002\u8fd9\u4e9b\u540d\u79f0\u5fc5\u987b\u5b58\u50a8\u5728\u67d0\u5904\uff0c\u8fd9\u5c31\u662f\u6a21\u5757\u5bf9\u8c61\u7684\u7528\u9014\u3002\u6a21\u5757\u5bf9\u8c61\u662f\u4e00\u4e2a Python \u5bf9\u8c61\uff0c\u5b83\u5145\u5f53\u6a21\u5757\u540d\u79f0\u7684\u547d\u540d\u7a7a\u95f4\u3002\u540d\u79f0\u5b58\u50a8\u5728\u6a21\u5757\u5bf9\u8c61\u7684\u5b57\u5178\u4e2d\uff08\u53ef\u7528\u4f5c m.__dict__\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u4f5c\u4e3a\u5c5e\u6027\u8bbf\u95ee\u3002\ntypedef struct { PyObject ob_base \uff1b PyObject * md_dict ; struct PyModuleDef * md_def ;\u65e0\u6548 * md_state ; PyObject * md_weaklist ; PyObject * md_name ; } PyModuleObject ; md_dict \u5b57\u6bb5\u5b58\u50a8\u6a21\u5757\u7684\u5b57\u5178\u3002\u5176\u4ed6\u9886\u57df\u5bf9\u6211\u4eec\u7684\u8ba8\u8bba\u5e76\u4e0d\u91cd\u8981\u3002 Python \u4e3a\u6211\u4eec\u9690\u5f0f\u5730\u521b\u5efa\u4e86\u6a21\u5757\u5bf9\u8c61\u3002\u4e3a\u4e86\u770b\u770b\u8fd9\u4e2a\u8fc7\u7a0b\u6ca1\u6709\u4ec0\u4e48\u795e\u5947\u4e4b\u5904\uff0c\u8ba9\u6211\u4eec\u81ea\u5df1\u521b\u5efa\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\u3002\u6211\u4eec\u901a\u5e38\u901a\u8fc7\u8c03\u7528\u5b83\u4eec\u7684\u7c7b\u578b\u6765\u521b\u5efa Python \u5bf9\u8c61\uff0c\u6bd4\u5982 MyClass() \u6216 set()\u3002\u6a21\u5757\u5bf9\u8c61\u7684\u7c7b\u578b\u5728 C \u4ee3\u7801\u4e2d\u662f PyModule_Type\uff0c\u4f46\u5b83\u5728 Python \u4e2d\u4e0d\u80fd\u4f5c\u4e3a\u5185\u7f6e\u5bf9\u8c61\u4f7f\u7528\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u79cd\u201c\u4e0d\u53ef\u7528\u201d\u7684\u7c7b\u578b\u53ef\u4ee5\u5728 types \u6807\u51c6\u6a21\u5757\u4e2d\u627e\u5230\uff1a types \u6a21\u5757\u5982\u4f55\u5b9a\u4e49 ModuleType\uff1f\u5b83\u53ea\u662f\u5bfc\u5165 sys \u6a21\u5757\uff08\u4efb\u4f55\u6a21\u5757\u90fd\u53ef\u4ee5\uff09\uff0c\u7136\u540e\u5728\u8fd4\u56de\u7684\u6a21\u5757\u5bf9\u8c61\u4e0a\u8c03\u7528 type() \u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a \u65e0\u8bba\u6211\u4eec\u5982\u4f55\u83b7\u53d6 ModuleType\uff0c\u4e00\u65e6\u83b7\u53d6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u677e\u521b\u5efa\u6a21\u5757\u5bf9\u8c61\uff1a \u65b0\u521b\u5efa\u7684\u6a21\u5757\u5bf9\u8c61\u4e0d\u662f\u5f88\u6709\u8da3\uff0c\u4f46\u9884\u521d\u59cb\u5316\u4e86\u4e00\u4e9b\u7279\u6b8a\u5c5e\u6027\uff1a \u8fd9\u4e9b\u7279\u6b8a\u5c5e\u6027\u4e3b\u8981\u662f\u7531\u5bfc\u5165\u7cfb\u7edf\u672c\u8eab\u4f7f\u7528\uff0c\u4f46\u6709\u4e9b\u4e5f\u5728\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002\u4f8b\u5982\uff0c__name__ \u5c5e\u6027\u901a\u5e38\u7528\u4e8e\u83b7\u53d6\u5f53\u524d\u6a21\u5757\u7684\u540d\u79f0\uff1a\n\u8bf7\u6ce8\u610f __name__ \u53ef\u7528\u4f5c\u5168\u5c40\u53d8\u91cf\u3002\u8fd9\u79cd\u89c2\u5bdf\u4f3c\u4e4e\u5f88\u660e\u663e\uff0c\u4f46\u5b83\u81f3\u5173\u91cd\u8981\u3002\u5b83\u6765\u81ea\u4e8e\u5168\u5c40\u53d8\u91cf\u5b57\u5178\u8bbe\u7f6e\u4e3a\u5f53\u524d\u6a21\u5757\u7684\u5b57\u5178\u7684\u4e8b\u5b9e\uff1a\u5f53\u524d\u6a21\u5757\u5145\u5f53 Python \u4ee3\u7801\u6267\u884c\u7684\u547d\u540d\u7a7a\u95f4\u3002\u5f53 Python \u5bfc\u5165\u4e00\u4e2a Python \u6587\u4ef6\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6a21\u5757\u5bf9\u8c61\uff0c\u7136\u540e\u4f7f\u7528\u6a21\u5757\u5bf9\u8c61\u7684\u5b57\u5178\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u7684\u5b57\u5178\u6765\u6267\u884c\u6587\u4ef6\u7684\u5185\u5bb9\u3002\u7c7b\u4f3c\u5730\uff0cPython \u5728\u76f4\u63a5\u6267\u884c Python \u6587\u4ef6\u65f6\uff0c\u9996\u5148\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a __main__ \u7684\u7279\u6b8a\u6a21\u5757\uff0c\u7136\u540e\u5c06\u5176\u5b57\u5178\u7528\u4f5c\u5168\u5c40\u53d8\u91cf\u7684\u5b57\u5178\u3002\u56e0\u6b64\uff0c\u5168\u5c40\u53d8\u91cf\u59cb\u7ec8\u662f\u67d0\u4e2a\u6a21\u5757\u7684\u5c5e\u6027\uff0c\u4ece\u6267\u884c\u4ee3\u7801\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8be5\u6a21\u5757\u88ab\u8ba4\u4e3a\u662f\u5f53\u524d\u6a21\u5757\u3002\u5185\u7f6e\u6a21\u5757\u662f\u7f16\u8bd1\u6210 python \u53ef\u6267\u884c\u6587\u4ef6\u7684 C \u6a21\u5757\u3002\u7531\u4e8e\u5b83\u4eec\u662f\u53ef\u6267\u884c\u6587\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u59cb\u7ec8\u53ef\u7528\u3002\u8fd9\u662f\u4ed6\u4eec\u7684\u4e3b\u8981\u7279\u70b9\u3002 sys.builtin_module_names \u5143\u7ec4\u5b58\u50a8\u5b83\u4eec\u7684\u540d\u79f0\uff1a $ python -q &gt;&gt;&gt; import sys &gt;&gt;&gt; sys \u3002\u5185\u7f6e\u6a21\u5757\u540d\u79f0\uff08&#39;_abc&#39;\u3001&#39;_ast&#39;\u3001&#39;_codecs&#39;\u3001&#39;_collections&#39;\u3001&#39;_functools&#39;\u3001&#39;_imp&#39;\u3001&#39;_io&#39;\u3001&#39;_locale&#39;\u3001&#39;_operator&#39;\u3001&#39;_peg_parser&#39;\u3001&#39;_signal&#39;\u3001&#39;_sre&#39;\u3001 &#39;_stat&#39;, &#39;_string&#39;, &#39;_symtable&#39;, &#39;_thread&#39;, &#39;_tracemalloc&#39;, &#39;_warnings&#39;, &#39;_weakref&#39;, &#39;atexit&#39;, &#39;builtins&#39;, &#39;errno&#39;, &#39;faulthandler&#39;, &#39;gc&#39;, &#39;itertools &#39;, &#39;marshal&#39;, &#39;posix&#39;, &#39;pwd&#39;, &#39;sys&#39;, &#39;time&#39;, &#39;xxsubtype&#39;) \u51bb\u7ed3\u6a21\u5757\u4e5f\u662f python \u53ef\u6267\u884c\u6587\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5b83\u4eec\u662f\u7528 Python \u7f16\u5199\u7684\u3002 Python \u4ee3\u7801\u88ab\u7f16\u8bd1\u4e3a\u4ee3\u7801\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u7f16\u7ec4\u540e\u7684\u4ee3\u7801\u5bf9\u8c61\u5408\u5e76\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u51bb\u7ed3\u6a21\u5757\u7684\u793a\u4f8b\u662f _frozen_importlib \u548c _frozen_importlib_external \u3002 Python \u51bb\u7ed3\u5b83\u4eec\u662f\u56e0\u4e3a\u5b83\u4eec\u5b9e\u73b0\u4e86\u5bfc\u5165\u7cfb\u7edf\u7684\u6838\u5fc3\uff0c\u56e0\u6b64\u4e0d\u80fd\u50cf\u5176\u4ed6 Python \u6587\u4ef6\u4e00\u6837\u5bfc\u5165\u3002 C \u6269\u5c55\u6709\u70b9\u50cf\u5185\u7f6e\u6a21\u5757\uff0c\u4e5f\u6709\u70b9\u50cf Python \u6587\u4ef6\u3002\u4e00\u65b9\u9762\uff0c\u5b83\u4eec\u662f\u7528 C \u6216 C++ \u7f16\u5199\u7684\uff0c\u5e76\u901a\u8fc7 Python/C API \u4e0e Python \u4ea4\u4e92\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u4eec\u4e0d\u662f\u53ef\u6267\u884c\u6587\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u5728\u5bfc\u5165\u671f\u95f4\u52a8\u6001\u52a0\u8f7d\u3002\u5305\u62ec\u6570\u7ec4\u3001\u6570\u5b66\u548c\u9009\u62e9\u5728\u5185\u7684\u4e00\u4e9b\u6807\u51c6\u6a21\u5757\u662f C \u6269\u5c55\u3002\u8bb8\u591a\u5176\u4ed6\u7684\uff0c\u5305\u62ec asyncio\u3001heapq \u548c json \u90fd\u662f\u7528 Python \u7f16\u5199\u7684\uff0c\u4f46\u5728\u5e55\u540e\u8c03\u7528\u4e86 C \u6269\u5c55\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0cC \u6269\u5c55\u662f\u516c\u5f00\u6240\u8c13\u7684\u521d\u59cb\u5316\u51fd\u6570\u7684\u5171\u4eab\u5e93\u3002\u5b83\u4eec\u901a\u5e38\u547d\u540d\u4e3a modname.so\uff0c\u4f46\u6587\u4ef6\u6269\u5c55\u540d\u53ef\u80fd\u56e0\u5e73\u53f0\u800c\u5f02\u3002\u4f8b\u5982\uff0c\u5728\u6211\u7684 macOS \u4e0a\uff0c\u8fd9\u4e9b\u6269\u5c55\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u4ee5\u4f7f\u7528\uff1a.cpython-39-darwin.so\u3001.abi3.so\u3001.so\u3002\u5728 Windows \u4e0a\uff0c\u60a8\u4f1a\u770b\u5230 .dll \u53ca\u5176\u53d8\u4f53\u3002 Python \u5b57\u8282\u7801\u6587\u4ef6\u901a\u5e38\u4e0e\u5e38\u89c4 Python \u6587\u4ef6\u4e00\u8d77\u4f4d\u4e8e __pycache__ \u76ee\u5f55\u4e2d\u3002\u5b83\u4eec\u662f\u5c06 Python \u4ee3\u7801\u7f16\u8bd1\u4e3a\u5b57\u8282\u7801\u7684\u7ed3\u679c\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c.pyc \u6587\u4ef6\u5305\u542b\u4e00\u4e9b\u5143\u6570\u636e\uff0c\u540e\u8ddf\u6a21\u5757\u7684\u7f16\u7ec4\u4ee3\u7801\u5bf9\u8c61\u3002\u5b83\u7684\u76ee\u7684\u662f\u901a\u8fc7\u8df3\u8fc7\u7f16\u8bd1\u9636\u6bb5\u6765\u51cf\u5c11\u6a21\u5757\u7684\u52a0\u8f7d\u65f6\u95f4\u3002 Python \u5bfc\u5165 .py \u6587\u4ef6\u65f6\uff0c\u9996\u5148\u4f1a\u5728 __pycache__ \u76ee\u5f55\u4e2d\u641c\u7d22\u5bf9\u5e94\u7684 .pyc \u6587\u4ef6\u5e76\u6267\u884c\u3002\u5982\u679c .pyc \u6587\u4ef6\u4e0d\u5b58\u5728\uff0cPython \u4f1a\u7f16\u8bd1\u4ee3\u7801\u5e76\u521b\u5efa\u6587\u4ef6\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u6267\u884c\u548c\u5bfc\u5165\u5b83\u4eec\uff0c\u6211\u4eec\u5c31\u4e0d\u4f1a\u8c03\u7528 .pyc \u6587\u4ef6\u6a21\u5757\u3002\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\uff1a $ ls module.pyc $ python module.pyc \u6211\u662f .pyc \u6587\u4ef6 $ python -c &quot;import module&quot; \u6211\u662f .pyc \u6587\u4ef6\u8981\u4e86\u89e3\u6709\u5173 .pyc \u6587\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b PEP 3147 - - PYC \u5b58\u50a8\u5e93\u76ee\u5f55\u548c PEP 552 - \u786e\u5b9a\u6027 pycs\u3002\u6b63\u5982\u6211\u4eec\u7a0d\u540e\u5c06\u770b\u5230\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5bfc\u5165\u7cfb\u7edf\u4ee5\u652f\u6301\u66f4\u591a\u7c7b\u578b\u7684\u6a21\u5757\u3002\u6240\u4ee5\u4efb\u4f55\u4e1c\u897f\u90fd\u53ef\u4ee5\u79f0\u4e3a\u6a21\u5757\uff0c\u53ea\u8981 Python \u53ef\u4ee5\u4e3a\u5b83\u521b\u5efa\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\u7ed9\u5b9a\u6a21\u5757\u540d\u79f0\u3002\u5982\u679c\u6a21\u5757\u540d\u79f0\u4ec5\u9650\u4e8e\u50cf mymodule \u6216 utils \u8fd9\u6837\u7684\u7b80\u5355\u6807\u8bc6\u7b26\uff0c\u90a3\u4e48\u5b83\u4eec\u90fd\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u6bcf\u6b21\u7ed9\u65b0\u6587\u4ef6\u547d\u540d\u65f6\uff0c\u6211\u4eec\u90fd\u5fc5\u987b\u975e\u5e38\u8ba4\u771f\u5730\u601d\u8003\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0cPython \u5141\u8bb8\u6a21\u5757\u6709\u5b50\u6a21\u5757\u548c\u6a21\u5757\u540d\u79f0\u5305\u542b\u70b9\u3002\u5b83\u9996\u5148\u5bfc\u5165\u6a21\u5757 a \u7136\u540e\u5bfc\u5165\u5b50\u6a21\u5757 ab \u5b83\u5c06\u5b50\u6a21\u5757\u6dfb\u52a0\u5230\u6a21\u5757\u7684\u5b57\u5178\u4e2d\u5e76\u5c06\u6a21\u5757\u5206\u914d\u7ed9\u53d8\u91cf a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b50\u6a21\u5757\u4f5c\u4e3a\u6a21\u5757\u7684\u5c5e\u6027\u8bbf\u95ee\u3002\u53ef\u4ee5\u6709\u5b50\u6a21\u5757\u7684\u6a21\u5757\u79f0\u4e3a\u5305\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5305\u662f\u5177\u6709 __path__ \u5c5e\u6027\u7684\u6a21\u5757\u3002\u8fd9\u4e2a\u5c5e\u6027\u544a\u8bc9 Python \u5728\u54ea\u91cc\u5bfb\u627e\u5b50\u6a21\u5757\u3002\u5f53 Python \u5bfc\u5165\u9876\u7ea7\u6a21\u5757\u65f6\uff0c\u5b83\u4f1a\u5728 sys.path \u4e2d\u5217\u51fa\u7684\u76ee\u5f55\u548c ZIP \u5b58\u6863\u4e2d\u641c\u7d22\u8be5\u6a21\u5757\u3002\u4f46\u662f\u5f53\u5b83\u5bfc\u5165\u4e00\u4e2a\u5b50\u6a21\u5757\u65f6\uff0c\u5b83\u4f7f\u7528\u7236\u6a21\u5757\u7684 __path__ \u5c5e\u6027\u800c\u4e0d\u662f sys.path\u3002\n\u76ee\u5f55\u662f\u5c06\u6a21\u5757\u7ec4\u7ec7\u6210\u5305\u7684\u6700\u5e38\u89c1\u65b9\u5f0f\u3002\u5982\u679c\u4e00\u4e2a\u76ee\u5f55\u5305\u542b\u4e00\u4e2a __init__.py \u6587\u4ef6\uff0c\u5b83\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5305\u3002\u5f53 Python \u5bfc\u5165\u8fd9\u6837\u4e00\u4e2a\u76ee\u5f55\u65f6\uff0c\u5b83\u4f1a\u6267\u884c __init__.py \u6587\u4ef6\uff0c\u56e0\u6b64\u5728\u90a3\u91cc\u5b9a\u4e49\u7684\u540d\u79f0\u6210\u4e3a\u6a21\u5757\u7684\u5c5e\u6027\u3002 __init__.py \u6587\u4ef6\u901a\u5e38\u4e3a\u7a7a\u6216\u5305\u542b\u4e0e\u5305\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u4f8b\u5982 __doc__ \u548c __version__\u3002\u5b83\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5c06\u5305\u7684\u516c\u5171 API \u4e0e\u5176\u5185\u90e8\u5b9e\u73b0\u5206\u79bb\u3002\u5047\u8bbe\u60a8\u5f00\u53d1\u4e86\u4e00\u4e2a\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784\u7684\u5e93\uff1a \u5e76\u4e14\u60a8\u60f3\u4e3a\u5e93\u7684\u7528\u6237\u63d0\u4f9b\u4e24\u4e2a\u51fd\u6570\uff1a\u5728 module1.py \u4e2d\u5b9a\u4e49\u7684 func1() \u548c\u5728 module2.py \u4e2d\u5b9a\u4e49\u7684 func2()\u3002\u5982\u679c\u60a8\u5c06 __init__.py \u7559\u7a7a\uff0c\u90a3\u4e48\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u5b50\u6a21\u5757\u6765\u5bfc\u5165\u51fd\u6570\uff1a \u8fd9\u53ef\u80fd\u662f\u60a8\u60f3\u8981\u7684\uff0c\u4f46\u60a8\u53ef\u80fd\u8fd8\u5e0c\u671b\u5141\u8bb8\u7528\u6237\u5bfc\u5165\u8fd9\u6837\u7684\u51fd\u6570\uff1a \u4e00\u4e2a\u540d\u4e3a C \u6269\u5c55\u540d\u7684\u76ee\u5f55__init__.so \u6216\u5e26\u6709\u540d\u4e3a __init__.pyc \u7684 .pyc \u6587\u4ef6\u4e5f\u662f\u4e00\u4e2a\u5e38\u89c4\u5305\u3002 Python \u53ef\u4ee5\u5b8c\u7f8e\u5730\u5bfc\u5165\u6b64\u7c7b\u5305\uff1a\u5728 3.3 \u7248\u672c\u4e4b\u524d\uff0cPython \u53ea\u6709\u5e38\u89c4\u5305\u3002\u6ca1\u6709 __init__.py \u7684\u76ee\u5f55\u6839\u672c\u4e0d\u88ab\u89c6\u4e3a\u5305\u3002\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u4eba\u4eec\u4e0d\u559c\u6b22\u521b\u5efa\u7a7a\u7684 __init__.py \u6587\u4ef6\u3002 PEP 420 \u901a\u8fc7\u5728 Python 3.3 \u4e2d\u5f15\u5165\u547d\u540d\u7a7a\u95f4\u5305\u4f7f\u8fd9\u4e9b\u6587\u4ef6\u53d8\u5f97\u4e0d\u5fc5\u8981\u3002\u547d\u540d\u7a7a\u95f4\u5305\u4e5f\u89e3\u51b3\u4e86\u53e6\u4e00\u4e2a\u95ee\u9898\u3002\u5b83\u4eec\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u5c06\u5305\u7684\u5185\u5bb9\u653e\u7f6e\u5728\u591a\u4e2a\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6709\u4ee5\u4e0b\u76ee\u5f55\u7ed3\u6784\uff1a\n\u800c\u4e14mylibs\u548cmorelibs\u90fd\u5728sys.path\u4e2d\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u5bfc\u5165package1\u548cpackage2\uff1a\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\u5f53 Python \u5728\u6a21\u5757\u641c\u7d22\u671f\u95f4\u904d\u5386\u8def\u5f84\u4e2d\u7684\u8def\u5f84\u6761\u76ee\uff08 sys.path \u6216 parent \u7684 __path__ \uff09\u65f6\uff0c\u5b83\u4f1a\u8bb0\u4f4f\u4e0e\u6a21\u5757\u540d\u79f0\u5339\u914d\u7684\u6ca1\u6709 __init__.py \u7684\u76ee\u5f55\u3002\u5982\u679c\u904d\u5386\u6240\u6709\u6761\u76ee\u540e\uff0c\u627e\u4e0d\u5230\u5e38\u89c4\u5305\u3001Python \u6587\u4ef6\u6216 C \u6269\u5c55\u540d\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\uff0c\u5176 __path__ \u5305\u542b\u5b58\u50a8\u7684\u76ee\u5f55\u3002\u8981\u6c42 __init__.py \u7684\u6700\u521d\u60f3\u6cd5\u662f\u9632\u6b62\u540d\u4e3a string \u6216 site \u4e4b\u7c7b\u7684\u76ee\u5f55\u906e\u853d\u6807\u51c6\u6a21\u5757\u3002\u547d\u540d\u7a7a\u95f4\u5305\u4e0d\u4f1a\u9690\u85cf\u5176\u4ed6\u6a21\u5757\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u6a21\u5757\u641c\u7d22\u671f\u95f4\u7684\u4f18\u5148\u7ea7\u8f83\u4f4e\u3002\u9664\u4e86\u5bfc\u5165\u6a21\u5757\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 from &lt;&gt; import &lt;&gt; \u8bed\u53e5\u5bfc\u5165\u6a21\u5757\u5c5e\u6027\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u8be5\u8bed\u53e5\u5bfc\u5165\u4e00\u4e2a\u540d\u4e3a module \u7684\u6a21\u5757\uff0c\u5e76\u5c06\u6307\u5b9a\u7684\u5c5e\u6027\u5206\u914d\u7ed9\u76f8\u5e94\u7684\u53d8\u91cf\uff1a \u6ce8\u610f module \u53d8\u91cf\u5728\u50cf\u88ab\u5220\u9664\u4e00\u6837\u5bfc\u5165\uff1a\u5f53 Python \u770b\u5230\u4e00\u4e2a\u6a21\u5757\u6ca1\u6709\u6307\u5b9a\u7684\u5c5e\u6027\u65f6\uff0c\u5b83\u8ba4\u4e3a\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u5b50\u6a21\u5757\u5e76\u5c1d\u8bd5\u5bfc\u5165\u5b83\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6a21\u5757\u5b9a\u4e49\u4e86 func \u548c Class \u4f46\u6ca1\u6709\u5b9a\u4e49\u5b50\u6a21\u5757\uff0cPython \u5c06\u5c1d\u8bd5\u5bfc\u5165 module.submodule\u3002\n\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u660e\u786e\u6307\u5b9a\u8981\u4ece\u6a21\u5757\u5bfc\u5165\u7684\u540d\u79f0\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5bfc\u5165\u7684\u901a\u914d\u7b26\u5f62\u5f0f\uff1a\u6b64\u8bed\u53e5\u7684\u5de5\u4f5c\u65b9\u5f0f\u5c31\u50cf\u5c06\u201c*\u201d\u66ff\u6362\u4e3a\u6a21\u5757\u7684\u6240\u6709\u516c\u5171\u540d\u79f0\u4e00\u6837\u3002\u8fd9\u4e9b\u662f\u6a21\u5757\u5b57\u5178\u4e2d\u4e0d\u4ee5\u4e0b\u5212\u7ebf\u201c_\u201d\u5f00\u5934\u7684\u540d\u79f0\u6216 __all__ \u5c5e\u6027\u4e2d\u5217\u51fa\u7684\u540d\u79f0\uff08\u5982\u679c\u5df2\u5b9a\u4e49\uff09\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u901a\u8fc7\u6307\u5b9a\u7edd\u5bf9\u6a21\u5757\u540d\u79f0\u6765\u544a\u8bc9 Python \u8981\u5bfc\u5165\u54ea\u4e9b\u6a21\u5757\u3002 from &lt;&gt; import &lt;&gt; \u8bed\u53e5\u4e5f\u5141\u8bb8\u6211\u4eec\u6307\u5b9a\u76f8\u5173\u7684\u6a21\u5757\u540d\u79f0\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u4f8b\u5b50\uff1a .. \u548c ..ab \u4e4b\u7c7b\u7684\u7ed3\u6784\u662f\u76f8\u5bf9\u7684\u6a21\u5757\u540d\u79f0\uff0c\u4f46\u5b83\u4eec\u76f8\u5bf9\u4e8e\u4ec0\u4e48\uff1f\u6b63\u5982\u6211\u4eec\u6240\u8bf4\uff0cPython \u6587\u4ef6\u5728\u5f53\u524d\u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\uff0c\u8be5\u6a21\u5757\u7684\u5b57\u5178\u5145\u5f53\u5168\u5c40\u53d8\u91cf\u7684\u5b57\u5178\u3002\u5f53\u524d\u6a21\u5757\u4e0e\u4efb\u4f55\u5176\u4ed6\u6a21\u5757\u4e00\u6837\uff0c\u53ef\u4ee5\u5c5e\u4e8e\u4e00\u4e2a\u5305\u3002\u8fd9\u4e2a\u5305\u88ab\u79f0\u4e3a\u5f53\u524d\u5305\uff0c\u8fd9\u5c31\u662f\u76f8\u5bf9\u6a21\u5757\u540d\u79f0\u7684\u76f8\u5bf9\u5173\u7cfb\u3002\u6a21\u5757\u7684 __package__ \u5c5e\u6027\u5b58\u50a8\u6a21\u5757\u6240\u5c5e\u7684\u5305\u7684\u540d\u79f0\u3002\u5982\u679c\u6a21\u5757\u662f\u4e00\u4e2a\u5305\uff0c\u90a3\u4e48\u8be5\u6a21\u5757\u5c5e\u4e8e\u5b83\u81ea\u5df1\uff0c\u800c __package__ \u53ea\u662f\u6a21\u5757\u7684\u540d\u79f0\uff08 __name__ \uff09\u3002\u5982\u679c\u6a21\u5757\u662f\u5b50\u6a21\u5757\uff0c\u5219\u5b83\u5c5e\u4e8e\u7236\u6a21\u5757\uff0c\u5e76\u4e14 __package__ \u8bbe\u7f6e\u4e3a\u7236\u6a21\u5757\u7684\u540d\u79f0\u3002\u6700\u540e\uff0c\u5982\u679c\u6a21\u5757\u65e2\u4e0d\u662f\u5305\u4e5f\u4e0d\u662f\u5b50\u6a21\u5757\uff0c\u90a3\u4e48\u5b83\u7684\u5305\u662f\u672a\u5b9a\u4e49\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c __package__ \u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff08\u4f8b\u5982\u6a21\u5757\u662f\u9876\u7ea7\u6a21\u5757\uff09\u6216\u65e0\uff08\u4f8b\u5982\u6a21\u5757\u4f5c\u4e3a\u811a\u672c\u8fd0\u884c\uff09\u3002\u76f8\u5bf9\u6a21\u5757\u540d\u79f0\u662f\u524d\u9762\u6709\u4e00\u4e9b\u70b9\u7684\u6a21\u5757\u540d\u79f0\u3002\u4e00\u4e2a\u524d\u5bfc\u70b9\u4ee3\u8868\u5f53\u524d\u5305\u3002\u6240\u4ee5\uff0c\u5f53 __package__ \u88ab\u5b9a\u4e49\u65f6\uff0c\u4e0b\u9762\u7684\u8bed\u53e5\uff1a\u6bcf\u4e2a\u989d\u5916\u7684\u70b9\u544a\u8bc9 Python \u4ece __package__ \u4e0a\u79fb\u4e00\u7ea7\u3002\u5982\u679c __package__ \u8bbe\u7f6e\u4e3a\u201cab\u201d\uff0c\u5219\u6b64\u8bed\u53e5\uff1a\n\u8fd9\u662f\u56e0\u4e3a Python \u4e0d\u4f1a\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u6765\u89e3\u6790\u76f8\u5bf9\u5bfc\u5165\u3002\u5b83\u53ea\u9700\u8981 __package__ \u7684\u503c\uff0c\u53bb\u6389\u4e00\u4e9b\u540e\u7f00\u5e76\u9644\u52a0\u4e00\u4e2a\u65b0\u540e\u7f00\u4ee5\u83b7\u5f97\u7edd\u5bf9\u6a21\u5757\u540d\u79f0\u3002\u663e\u7136\uff0c\u5f53 __package__ \u6839\u672c\u6ca1\u6709\u5b9a\u4e49\u65f6\uff0c\u76f8\u5bf9\u5bfc\u5165\u5c31\u4f1a\u4e2d\u65ad\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u4f1a\u6536\u5230\u4ee5\u4e0b\u9519\u8bef\uff1a\u5f53\u60a8\u5c06\u76f8\u5bf9\u5bfc\u5165\u4f5c\u4e3a\u811a\u672c\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u60a8\u6700\u5e38\u770b\u5230\u5b83\u3002\u7531\u4e8e\u60a8\u4f7f\u7528\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\u800c\u4e0d\u662f\u6a21\u5757\u540d\u79f0\u6307\u5b9a\u8981\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u5e76\u4e14\u7531\u4e8e Python \u9700\u8981\u6a21\u5757\u540d\u79f0\u6765\u8ba1\u7b97 __package__\uff0c\u56e0\u6b64\u4ee3\u7801\u5728 __main__ \u6a21\u5757\u4e2d\u6267\u884c\uff0c\u5176 __package__ \u5c5e\u6027\u8bbe\u7f6e\u4e3a None\u3002\u5728\u8fd0\u884c\u5177\u6709\u76f8\u5bf9\u5bfc\u5165\u7684\u7a0b\u5e8f\u65f6\u907f\u514d\u5bfc\u5165\u9519\u8bef\u7684\u6807\u51c6\u65b9\u6cd5\u662f\u4f7f\u7528 -m \u5f00\u5173\u5c06\u5176\u4f5c\u4e3a\u6a21\u5757\u8fd0\u884c\uff1a -m \u5f00\u5173\u544a\u8bc9 Python \u4f7f\u7528\u4e0e\u5bfc\u5165\u671f\u95f4\u76f8\u540c\u7684\u673a\u5236\u6765\u67e5\u627e\u6a21\u5757\u3002 Python \u83b7\u53d6\u6a21\u5757\u540d\u79f0\u5e76\u80fd\u591f\u8ba1\u7b97\u5f53\u524d\u5305\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c\u4e00\u4e2a\u540d\u4e3a package.module \u7684\u6a21\u5757\uff0c\u5176\u4e2d module \u6307\u7684\u662f\u4e00\u4e2a\u5e38\u89c4\u7684 .py \u6587\u4ef6\uff0c\u90a3\u4e48\u4ee3\u7801\u5c06\u5728 __main__ \u6a21\u5757\u4e2d\u6267\u884c\uff0c\u5176 __package__ \u5c5e\u6027\u8bbe\u7f6e\u4e3a\u201cpackage\u201d\u3002\u60a8\u53ef\u4ee5\u5728\u6587\u6863\u548c PEP 338 \u4e2d\u9605\u8bfb\u6709\u5173 -m \u5f00\u5173\u7684\u66f4\u591a\u4fe1\u606f\u3002\u597d\u5427\u3002\u8fd9\u662f\u4e00\u4e2a\u70ed\u8eab\u3002\u73b0\u5728\u6211\u4eec\u5c06\u770b\u770b\u5f53\u6211\u4eec\u5bfc\u5165\u4e00\u4e2a\u6a21\u5757\u65f6\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u5982\u679c\u6211\u4eec\u5bf9\u4efb\u4f55\u5bfc\u5165\u8bed\u53e5\u8fdb\u884c\u8131\u7cd6\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5b83\u6700\u7ec8\u8c03\u7528\u4e86\u5185\u7f6e\u7684 __import__() \u51fd\u6570\u3002\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u6a21\u5757\u540d\u79f0\u548c\u4e00\u5806\u5176\u4ed6\u53c2\u6570\uff0c\u627e\u5230\u8be5\u6a21\u5757\u5e76\u4e3a\u5176\u8fd4\u56de\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\u3002\u81f3\u5c11\uff0c\u8fd9\u662f\u5b83\u5e94\u8be5\u505a\u7684\u3002\nPython \u5141\u8bb8\u6211\u4eec\u5c06 __import__() \u8bbe\u7f6e\u4e3a\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5b8c\u5168\u6539\u53d8\u5bfc\u5165\u8fc7\u7a0b\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u7834\u574f\u4e00\u5207\u7684\u66f4\u6539\uff1a &gt;&gt;&gt; import builtins &gt;&gt;&gt;builtins \u3002 __import__ = None &gt;&gt;&gt; import math Traceback (\u6700\u8fd1\u4e00\u6b21\u8c03\u7528\u6700\u540e\u4e00\u6b21): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; TypeError: &#39;NoneType&#39; object is not callable \u4f60\u5f88\u5c11\u770b\u5230\u4eba\u4eec\u56e0\u4e3a\u5176\u4ed6\u539f\u56e0\u8986\u76d6 __import__()\u800c\u4e0d\u662f\u8bb0\u5f55\u6216\u8c03\u8bd5\u3002\u9ed8\u8ba4\u5b9e\u73b0\u5df2\u7ecf\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u81ea\u5b9a\u4e49\u673a\u5236\uff0c\u6211\u4eec\u5c06\u53ea\u5173\u6ce8\u5b83\u3002 __import__() \u7684\u9ed8\u8ba4\u5b9e\u73b0\u662f importlib.__import__()\u3002\u55ef\uff0c\u8fd9\u51e0\u4e4e\u662f\u771f\u7684\u3002 importlib \u6a21\u5757\u662f\u4e00\u4e2a\u6807\u51c6\u6a21\u5757\uff0c\u5b83\u5b9e\u73b0\u4e86\u5bfc\u5165\u7cfb\u7edf\u7684\u6838\u5fc3\u3002\u5b83\u662f\u7528 Python \u7f16\u5199\u7684\uff0c\u56e0\u4e3a\u5bfc\u5165\u8fc7\u7a0b\u6d89\u53ca\u8def\u5f84\u5904\u7406\u548c\u5176\u4ed6\u4f60\u66f4\u559c\u6b22\u7528 Python \u800c\u4e0d\u662f C \u6765\u505a\u7684\u4e8b\u60c5\u3002\u4f46\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\uff0cimportlib \u7684\u4e00\u4e9b\u51fd\u6570\u88ab\u79fb\u690d\u5230 C \u4e2d\u3002\u9ed8\u8ba4 __import__() \u5b9e\u9645\u4e0a\u8c03\u7528\u4e86 importlib.__import__() \u7684 C \u7aef\u53e3\u3002\u51fa\u4e8e\u6211\u4eec\u7684\u76ee\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u653e\u5fc3\u5730\u5ffd\u7565\u5dee\u5f02\u5e76\u53ea\u7814\u7a76 Python \u7248\u672c\u3002\u5728\u6211\u4eec\u8fd9\u6837\u505a\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u4e0d\u540c\u7684\u5bfc\u5165\u8bed\u53e5\u5982\u4f55\u8c03\u7528 __import__()\u3002\u8981\u4e86\u89e3 import \u8bed\u53e5\u7684\u4f5c\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u4e3a\u5b83\u751f\u6210\u7684\u5b57\u8282\u7801\uff0c\u7136\u540e\u901a\u8fc7\u67e5\u770b Python/ceval.c \u4e2d\u7684\u8bc4\u4f30\u5faa\u73af\u627e\u51fa\u6bcf\u4e2a\u5b57\u8282\u7801\u6307\u4ee4\u7684\u4f5c\u7528\u3002 $ echo &quot;import m&quot; | python -m dis 1 0 LOAD_CONST 0 (0) 2 LOAD_CONST 1 (None) 4 IMPORT_NAME 0 (m) 6 STORE_NAME 0 (m)... \u7b2c\u4e00\u4e2a LOAD_CONST \u6307\u4ee4\u5c06 0 \u538b\u5165\u503c\u5806\u6808\u3002\u7b2c\u4e8c\u4e2a LOAD_CONST \u63a8\u9001 None\u3002\u7136\u540e IMPORT_NAME \u6307\u4ee4\u505a\u4e86\u4e00\u4e9b\u6211\u4eec\u7a0d\u540e\u4f1a\u7814\u7a76\u7684\u4e8b\u60c5\u3002\u6700\u540e\uff0cSTORE_NAME \u5c06\u503c\u5806\u6808\u9876\u90e8\u7684\u503c\u5206\u914d\u7ed9\u53d8\u91cf m\u3002\ncase TARGET (IMPORT_NAME): { PyObject * name = GETITEM ( names , oparg ); PyObject * fromlist = POP(); PyObject * level = TOP(); PyObject * res ; res = import_name ( tstate , f , name , fromlist , level ); Py_DECREF\uff08\u7ea7\u522b\uff09\uff1b Py_DECREF ( fromlist ); SET_TOP ( res );\u5982\u679c\uff08res == NULL\uff09\u8f6c\u5230\u9519\u8bef\uff1b\u6d3e\u9063 \uff08\uff09;\u6240\u6709\u64cd\u4f5c\u90fd\u53d1\u751f\u5728 import_name() \u51fd\u6570\u4e2d\u3002\u5b83\u8c03\u7528 __import__() \u6765\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff0c\u4f46\u5982\u679c __import__() \u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u5b83\u4f1a\u4f7f\u7528\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\u5e76\u8c03\u7528 importlib.__import__() \u7684 C \u7aef\u53e3\uff0c\u79f0\u4e3a PyImport_ImportModuleLevelObject()\u3002\u4ee5\u4e0b\u662f\u4ee3\u7801\u4e2d\u5b9e\u73b0\u6b64\u903b\u8f91\u7684\u65b9\u5f0f\uff1a static PyObject * import_name ( PyThreadState * tstate , PyFrameObject * f , PyObject * name , PyObject * fromlist , PyObject * level ) { _Py_IDENTIFIER ( __import__ ); PyObject * import_func , * res ; PyObject * \u5806\u6808 [5]; import_func = _PyDict_GetItemIdWithError ( f -&gt; f_builtins , &amp; PyId___import__ ); if ( import_func == NULL ) { if ( !_PyErr_Occurred ( tstate )) { _PyErr_SetString ( tstate , PyExc_ImportError , &quot;__import__ not found&quot;);\u8fd4\u56de NULL \uff1b } /* \u672a\u91cd\u8f7d __import__ \u7684\u5feb\u901f\u8def\u5f84\u3002 */ if ( import_func == tstate -&gt; interp -&gt; import_func ) { int ilevel = _PyLong_AsInt ( level ); if ( ilevel == - 1 &amp;&amp; _PyErr_Occurred ( tstate )) { return NULL ; res = PyImport_ImportModuleLevelObject ( name , f -&gt; f_globals , f -&gt; f_locals == NULL ? Py_None : f -&gt; f_locals , fromlist , ilevel );\u8fd4\u56de\u8d44\u6e90\uff1b } Py_INCREF ( import_func );\u5806\u6808 [0] = \u540d\u79f0\uff1b\u5806\u6808 [1] = f -&gt; f_globals \uff1b\u5806\u6808 [2] = f -&gt; f_locals == NULL \uff1f Py_None : f -&gt; f_locals ;\u5806\u6808 [3] = \u6765\u81ea\u5217\u8868\uff1b\u5806\u6808 [4] = \u7ea7\u522b\uff1b res = _PyObject_FastCall ( import_func , stack , 5 ); Py_DECREF ( import_func );\u8fd4\u56de\u8d44\u6e90\uff1b\u5982\u679c\u60a8\u4ed4\u7ec6\u68c0\u67e5\u4ee5\u4e0a\u6240\u6709\u5185\u5bb9\uff0c\u60a8\u5c06\u80fd\u591f\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a def __import__ ( name , globals = None , locals = None , fromlist = (), level = 0 ): &quot;&quot;&quot;Import a module . &#39;globals&#39; \u53c2\u6570\u7528\u4e8e\u63a8\u65ad\u4ece\u54ea\u91cc\u53d1\u751f\u5bfc\u5165\u4ee5\u5904\u7406\u76f8\u5bf9\u5bfc\u5165\u3002&#39;locals&#39; \u53c2\u6570\u88ab\u5ffd\u7565\u3002&#39;fromlist&#39; \u53c2\u6570\u6307\u5b9a\u4ec0\u4e48 sho ......", "note_en": "If you ask me to name the most misunderstood aspect of Python, I will answer without a second thought: the Python import system. Just remember how many times you used relative imports and got something like  ImportError: attempted relative import with no known parent package; or tried to figure out how to structure a project so that all the imports work correctly; or hacked  sys.path when you couldn&#39;t find a better solution. Every Python programmer experienced something like this, and popular StackOverflow questions, such us  Importing files from different folder (1822 votes),  Relative imports in Python 3 (1064 votes) and  Relative imports for the billionth time (993 votes), are a good indicator of that.\n The Python import system doesn&#39;t just seem complicated \u2013 it is complicated. So even though the  documentation is really good, it doesn&#39;t give you the full picture of what&#39;s going on. The only way to get such a picture is to study what happens behind the scenes when Python executes an import statement. And that&#39;s what we&#39;re going to do today.\n Note: In this post I&#39;m referring to CPython 3.9. Some implementation details will certainly change as CPython evolves. I&#39;ll try to keep track of important changes and add update notes.\n  Before we begin, let me present you a more detailed version of our plan. First, we&#39;ll discuss the core concepts of the import system: modules, submodules, packages,  from &lt;&gt; import &lt;&gt; statements, relative imports, and so on. Then we&#39;ll desugar different import statements and see that they all eventually call the built-in  __import__() function. Finally, we&#39;ll study how the default implementation of  __import__() works. Let&#39;s go!\n    What do you think it does? You may say that it imports a module named  m and assigns the module to the variable  m. And you&#39;ll be right. But what is a module exactly? What gets assigned to the variable? In order to answer these questions, we need to give a bit more precise explanation: the statement  import m searches for a module named  m, creates a module object for that module, and assigns the module object to the variable. See how we differentiated between a module and a module object. We can now define these terms.\n A  module is anything that Python considers a module and knows how to create a module object for. This includes things like Python files, directories and built-in modules written in C. We&#39;ll look at the full list in the next section.\n The reason why we import any module is because we want to get an access to functions, classes, constants and other names that the module defines. These names must be stored somewhere, and this is what module objects are for. A  module object is a Python object that acts as a namespace for the module&#39;s names. The names are stored in the module object&#39;s dictionary (available as  m.__dict__), so we can access them as attributes.\n  typedef  struct  {  PyObject  ob_base ;  PyObject  * md_dict ;  struct  PyModuleDef  * md_def ;  void  * md_state ;  PyObject  * md_weaklist ;  PyObject  * md_name ; }  PyModuleObject ;\n The  md_dict field stores the module&#39;s dictionary. Other fields are not really important for our discussion.\n Python creates module objects implicitly for us. To see that there is nothing magical about this process, let&#39;s create a module object ourselves. We usually create Python objects by calling their types, like  MyClass() or  set(). The type of a module object is  PyModule_Type in the C code but it&#39;s not available in Python as a built-in. Fortunately, such &#34;unavailable&#34; types can be found in the   types standard module:\n  How does the  types module define  ModuleType? It just imports the  sys module (any module will do) and then calls  type() on the module object returned. We can do it as well:\n  No matter how we get  ModuleType, once we get it, we can easily create a module object:\n  A newly created module object is not very interesting but has some special attributes preinitialized:\n  Most of these special attributes are mainly used by the import system itself, but some are used in the application code as well. The  __name__ attribute, for example, is often used to get the name of the current module:\n  Notice that  __name__ is available as a global variable. This observation may seem evident, but it&#39;s crucial. It comes from the fact that the dictionary of global variables is set to the dictionary of the current module:\n  The current module acts as a namespace for the execution of Python code. When Python imports a Python file, it creates a new module object and then executes the contents of the file using the dictionary of the module object as the dictionary of global variables. Similarly, when Python executes a Python file directly, it first creates a special module called  __main__ and then uses its dictionary as the dictionary of global variables. Thus, global variables are always attributes of some module, and this module is considered to be the  current module from the perspective of the executing code.\n    Built-in modules are C modules compiled into the  python executable. Since they are part of the executable, they are always available. This is their key feature. The   sys.builtin_module_names tuple stores their names:\n $ python -q &gt;&gt;&gt;  import  sys &gt;&gt;&gt;  sys . builtin_module_names (&#39;_abc&#39;, &#39;_ast&#39;, &#39;_codecs&#39;, &#39;_collections&#39;, &#39;_functools&#39;, &#39;_imp&#39;, &#39;_io&#39;, &#39;_locale&#39;, &#39;_operator&#39;, &#39;_peg_parser&#39;, &#39;_signal&#39;, &#39;_sre&#39;, &#39;_stat&#39;, &#39;_string&#39;, &#39;_symtable&#39;, &#39;_thread&#39;, &#39;_tracemalloc&#39;, &#39;_warnings&#39;, &#39;_weakref&#39;, &#39;atexit&#39;, &#39;builtins&#39;, &#39;errno&#39;, &#39;faulthandler&#39;, &#39;gc&#39;, &#39;itertools&#39;, &#39;marshal&#39;, &#39;posix&#39;, &#39;pwd&#39;, &#39;sys&#39;, &#39;time&#39;, &#39;xxsubtype&#39;)\n Frozen modules are too a part of the  python executable, but they are written in Python. Python code is  compiled to a code object and then the  marshalled code object is incorporated into the executable. The examples of frozen modules are  _frozen_importlib and  _frozen_importlib_external . Python freezes them because they implement the core of the import system and, thus, cannot be imported like other Python files.\n C extensions are a bit like built-in modules and a bit like Python files. On one hand, they are written in C or C++ and interact with Python via the  Python/C API. On the other hand, they are not a part of the executable but loaded dynamically during the import. Some standard modules including  array,  math and  select are C extensions. Many others including  asyncio,  heapq and  json are written in Python but call C extensions under the hood. Technically, C extensions are shared libraries that expose a so called  initialization function. They are usually named like  modname.so, but the file extension may be different depending on the platform. On my macOS, for example, any of these extensions will work:  .cpython-39-darwin.so,  .abi3.so,  .so. And on Windows, you&#39;ll see  .dll and its variations.\n Python bytecode files are typically live in a  __pycache__ directory alongside regular Python files. They are the result of compiling Python code to bytecode. More specifically, a  .pyc file contains some metadata followed by a marshalled code object of a module. Its purpose is to reduce module&#39;s loading time by skipping the compilation stage. When Python imports a  .py file, it first searches for a corresponding  .pyc file in the  __pycache__ directory and executes it. If the  .pyc file does not exist, Python compiles the code and creates the file.\n However, we wouldn&#39;t call  .pyc files modules if we couldn&#39;t execute and import them directly. Surprisingly, we can:\n $ ls module.pyc $ python module.pyc  I&#39;m a .pyc file $ python -c &#34;import module&#34; I&#39;m a .pyc file\n To learn more about  .pyc files, check out  PEP 3147 -- PYC Repository Directories and  PEP 552 -- Deterministic pycs.\n As we&#39;ll later see, we can customize the import system to support even more kinds of modules. So anything can be called a module as long as Python can create a module object for it given a module name.\n  If module names were limited to simple identifiers like  mymodule or  utils, then they all must have been unique, and we would have to think very hard every time we give a new file a name. For this reason, Python allows modules to have submodules and module names to contain dots.\n   it first imports the module  a and then the submodule  a.b. It adds the submodule to the module&#39;s dictionary and assigns the module to the variable  a, so we can access the submodule as a module&#39;s attribute.\n A module that can have submodules is called a  package. Technically, a package is a module that has a  __path__ attribute. This attribute tells Python where to look for submodules. When Python imports a top-level module, it searches for the module in the directories and ZIP archives listed in   sys.path. But when it imports a submodule, it uses the  __path__ attribute of the parent module instead of  sys.path.\n  Directories are the most common way to organize modules into packages. If a directory contains a  __init__.py file, it&#39;s considered to be a  regular package. When Python imports such a directory, it executes the  __init__.py file, so the names defined there become the attributes of the module.\n The  __init__.py file is typically left empty or contains package-related attributes such as  __doc__ and  __version__. It can also be used to decouple the public API of a package from its internal implementation. Suppose you develop a library with the following structure:\n  And you want to provide the users of your library with two functions:  func1() defined in  module1.py and  func2() defined in  module2.py. If you leave  __init__.py empty, then the users must specify the submodules to import the functions:\n  It may be something you want, but you may also want to allow the users to import the functions like this:\n    A directory with a C extension named  __init__.so or with a  .pyc file named  __init__.pyc is also a regular package. Python can import such packages perfectly fine:\n   Before version 3.3, Python had only regular packages. Directories without  __init__.py were not considered packages at all. And this was a problem because  people didn&#39;t like to create empty  __init__.py files.  PEP 420 made these files unnecessary by introducing  namespace packages in Python 3.3.\n Namespace packages solved another problem as well. They allowed developers to place contents of a package across multiple locations. For example, if you have the following directory structure:\n  And both  mylibs and  morelibs are in  sys.path, then you can import both  package1 and  package2 like this:\n    How does it work? When Python traverses path entries in the path ( sys.path or parent&#39;s  __path__) during the module search, it remembers the directories without  __init__.py that match the module&#39;s name. If after traversing all the entries, it couldn&#39;t find a regular package, a Python file or a C extension, it creates a module object whose  __path__ contains the memorized directories.\n The initial idea of requiring  __init__.py was to prevent directories named like  string or  site from shadowing standard modules. Namespace package do not shadow other modules because they have lower precedence during the module search.\n  Besides importing modules, we can also import module attributes using a  from &lt;&gt; import &lt;&gt; statement, like so:\n  This statement imports a module named  module and assign the specified attributes to the corresponding variables:\n  Note that the  module variable is not available after the import as if it was deleted:\n  When Python sees that a module doesn&#39;t have a specified attribute, it considers the attribute to be a submodule and tries to import it. So if  module defines  func and  Class but not  submodule, Python will try to import  module.submodule.\n  If we don&#39;t want to specify explicitly the names to import from a module, we can use the wildcard form of import:\n  This statement works as if  &#34;*&#34; was replaced with all the module&#39;s public names. These are the names in the module&#39;s dictionary that do not start with an underscore  &#34;_&#34; or the names listed in the  __all__ attribute if it&#39;s defined.\n  Up until now we&#39;ve been telling Python what modules to import by specifying absolute module names. The  from &lt;&gt; import &lt;&gt; statement allows us to specify relative module names as well. Here are a few examples:\n  The constructions like  .. and  ..a.b are relative module names, but what are they relative to? As we said, a Python file is executed in the context of the current module whose dictionary acts as a dictionary of global variables. The current module, as any other module, can belong to a package. This package is called the  current package, and this is what relative module names are relative to.\n The  __package__ attribute of a module stores the name of the package to which the module belongs. If the module is a package, then the module belongs to itself, and  __package__ is just the module&#39;s name ( __name__). If the module is a submodule, then it belongs to the parent module, and  __package__ is set to the parent module&#39;s name. Finally, if the module is not a package nor a submodule, then its package is undefined. In this case,  __package__ can be set to an empty string (e.g. the module is a top-level module) or  None (e.g. the module runs as a script).\n A relative module name is a module name preceded by some number of dots. One leading dot represents the current package. So, when  __package__ is defined, the following statement:\n   Each extra dot tells Python to move one level up from  __package__ . If  __package__ is set to  &#34;a.b&#34;, then this statement:\n       This is because Python does not move through the file system to resolve relative imports. It just takes the value of  __package__, strips some suffix and appends a new one to get an absolute module name.\n Obviously, relative imports break when  __package__ is not defined at all. In this case, you get the following error:\n  You most commonly see it when you run a program with relative imports as a script. Since you specify which program to run with a filesystem path and not with a module name, and since Python needs a module name to calculate  __package__, the code is executed in the  __main__ module whose  __package__ attribute is set to  None.\n  The standard way to avoid import errors when running a program with relative imports is to run it as a module using the  -m switch:\n  The  -m switch tells Python to use the same mechanism to find the module as during the import. Python gets a module name and is able to calculate the current package. For example, if we run a module named  package.module, where  module refers to a regular  .py file, then the code will be executed in the  __main__ module whose  __package__ attribute is set to  &#34;package&#34;. You can read more about the  -m switch in  the docs and in  PEP 338.\n Alright. This was a warm-up. Now we&#39;re going to see what exactly happens when we import a module.\n  If we desugar any import statement, we&#39;ll see that it eventually calls the built-in   __import__() function. This function takes a module name and a bunch of other parameters, finds the module and returns a module object for it. At least, this is what it&#39;s supposed to do.\n Python allows us to set  __import__() to a custom function, so we can change the import process completely. Here&#39;s, for example, a change that just breaks everything:\n &gt;&gt;&gt;  import  builtins &gt;&gt;&gt;  builtins . __import__  =  None &gt;&gt;&gt;  import  math Traceback (most recent call last): File  &#34;&lt;stdin&gt;&#34;, line  1, in  &lt;module&gt; TypeError:  &#39;NoneType&#39; object is not callable\n You rarely see people overriding  __import__() for reasons other than logging or debugging. The default implementation already provides powerful mechanisms for customization, and we&#39;ll focus solely on it.\n The default implementation of  __import__() is  importlib.__import__(). Well, it&#39;s almost true. The   importlib module is a standard module that implements the core of the import system. It&#39;s written in Python because the import process involves path handling and other things that you would prefer to do in Python rather than in C. But some functions of  importlib are ported to C for performance reasons. And default  __import__() actually calls a C port of  importlib.__import__(). For our purposes, we can safely ingore the difference and just study the Python version. Before we do that, let&#39;s see how different import statements call  __import__().\n    To see what an import statement does, we can look at the bytecode produced for it and then find out what each bytecode instruction does by looking at the  evaluation loop in   Python/ceval.c.\n  $ echo &#34;import m&#34; | python -m dis 1 0 LOAD_CONST 0 (0) 2 LOAD_CONST 1 (None) 4 IMPORT_NAME 0 (m) 6 STORE_NAME 0 (m)...\n The first   LOAD_CONST instruction pushes  0 onto the value stack. The second  LOAD_CONST pushes  None. Then the   IMPORT_NAME instruction does something we&#39;ll look into in a moment. Finally,   STORE_NAME assigns the value on top of the value stack to the variable  m.\n  case  TARGET ( IMPORT_NAME ) :  {  PyObject  * name  =  GETITEM ( names ,  oparg );  PyObject  * fromlist  =  POP ();  PyObject  * level  =  TOP ();  PyObject  * res ;  res  =  import_name ( tstate ,  f ,  name ,  fromlist ,  level );  Py_DECREF ( level );  Py_DECREF ( fromlist );  SET_TOP ( res );  if  ( res  ==  NULL )  goto  error ;  DISPATCH (); }\n All the action happens in the  import_name() function. It calls  __import__() to do the work, but if  __import__() wasn&#39;t overridden, it takes a shortcut and calls the C port of  importlib.__import__() called  PyImport_ImportModuleLevelObject(). Here&#39;s how this logic is implemented in the code:\n static  PyObject  * import_name ( PyThreadState  * tstate ,  PyFrameObject  * f ,  PyObject  * name ,  PyObject  * fromlist ,  PyObject  * level ) {  _Py_IDENTIFIER ( __import__ );  PyObject  * import_func ,  * res ;  PyObject *  stack [ 5 ];  import_func  =  _PyDict_GetItemIdWithError ( f -&gt; f_builtins ,  &amp; PyId___import__ );  if  ( import_func  ==  NULL )  {  if  ( ! _PyErr_Occurred ( tstate ))  {  _PyErr_SetString ( tstate ,  PyExc_ImportError ,  &#34;__import__ not found&#34; );  }  return  NULL ;  }  /* Fast path for not overloaded __import__. */  if  ( import_func  ==  tstate -&gt; interp -&gt; import_func )  {  int  ilevel  =  _PyLong_AsInt ( level );  if  ( ilevel  ==  - 1  &amp;&amp;  _PyErr_Occurred ( tstate ))  {  return  NULL ;  }  res  =  PyImport_ImportModuleLevelObject (  name ,  f -&gt; f_globals ,  f -&gt; f_locals  ==  NULL  ?  Py_None  :  f -&gt; f_locals ,  fromlist ,  ilevel );  return  res ;  }  Py_INCREF ( import_func );  stack [ 0 ]  =  name ;  stack [ 1 ]  =  f -&gt; f_globals ;  stack [ 2 ]  =  f -&gt; f_locals  ==  NULL  ?  Py_None  :  f -&gt; f_locals ;  stack [ 3 ]  =  fromlist ;  stack [ 4 ]  =  level ;  res  =  _PyObject_FastCall ( import_func ,  stack ,  5 );  Py_DECREF ( import_func );  return  res ; }\n If you carefully examine all of the above, you&#39;ll be able to conclude that this statement:\n     def  __import__ ( name ,  globals = None ,  locals = None ,  fromlist = (),  level = 0 ):  &#34;&#34;&#34;Import a module.  The &#39;globals&#39; argument is used to infer where the import is occurring from  to handle relative imports. The &#39;locals&#39; argument is ignored. The  &#39;fromlist&#39; argument specifies what sho\n......", "posttime": "2021-07-24 23:34:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,\u5bfc\u5165,import,\u6a21\u5757", "title": "Python \u5bfc\u5165\u7cfb\u7edf\u7684\u5de5\u4f5c\u539f\u7406", "title_en": "How the Python import system works", "transed": 1, "url": "https://tenthousandmeters.com/blog/python-behind-the-scenes-11-how-the-python-import-system-works/", "via": "", "real_tags": ["python", "\u5bfc\u5165", "import", "\u6a21\u5757"]}, {"category": "", "categoryclass": "", "imagename": "71363094c0fab8eded7016e839ed39f4.jpeg", "infoid": 1069469, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u592a\u9633\u80fd\u5df2\u7ecf\u662f\u6700\u4fbf\u5b9c\u7684\u53d1\u7535\u5f62\u5f0f\uff0c\u968f\u7740\u6280\u672f\u548c\u5168\u7403\u751f\u4ea7\u7684\u66f4\u591a\u6539\u8fdb\uff0c\u5176\u6210\u672c\u5c06\u7ee7\u7eed\u4e0b\u964d\u3002\u73b0\u5728\uff0c\u65b0\u7684\u7814\u7a76\u6b63\u5728\u63a2\u7d22\u592a\u9633\u80fd\u7535\u6c60\u5236\u9020\u7684\u53e6\u4e00\u4e2a\u91cd\u5927\u8f6c\u6298\u70b9\u3002\u5728\u6fb3\u5927\u5229\u4e9a\uff0c\u8d85\u8fc7 200 \u4e07\u4e2a\u5c4b\u9876\u5b89\u88c5\u4e86\u592a\u9633\u80fd\u7535\u6c60\u677f\uff08\u4e16\u754c\u4e0a\u4eba\u5747\u6700\u591a\uff09\u3002\u9762\u677f\u4e2d\u4f7f\u7528\u7684\u4e3b\u8981\u6750\u6599\u662f\u7845\u3002\u7845\u6784\u6210\u4e86\u5c06\u9633\u5149\u8f6c\u5316\u4e3a\u7535\u80fd\u6240\u9700\u7684\u5355\u4e2a\u592a\u9633\u80fd\u7535\u6c60\u7ec4\u4ef6\u7684\u5927\u90e8\u5206\u3002\u4f46\u662f\u8fd8\u9700\u8981\u4e00\u4e9b\u5176\u4ed6\u5143\u7d20\u3002\u6211\u4eec\u5728\u65b0\u5357\u5a01\u5c14\u58eb\u5927\u5b66\u5149\u4f0f\u4e0e\u53ef\u518d\u751f\u80fd\u6e90\u5de5\u7a0b\u5b66\u9662\u7684\u7814\u7a76\u8868\u660e\uff0c\u5728\u7535\u6c60\u7684\u7845\u4e2d\u6dfb\u52a0\u9553\u53ef\u4ee5\u4ea7\u751f\u975e\u5e38\u7a33\u5b9a\u7684\u592a\u9633\u80fd\u7535\u6c60\u677f\uff0c\u8fd9\u4e9b\u7535\u6c60\u677f\u5728\u5176\u4f7f\u7528\u5bff\u547d\u671f\u95f4\u66f4\u4e0d\u5bb9\u6613\u964d\u89e3\u3002\u8fd9\u662f\u4e0b\u4e00\u4ee3\u592a\u9633\u80fd\u7535\u6c60\u677f\u7684\u957f\u671f\u76ee\u6807\uff1a\u8ba9\u5b83\u4eec\u5728\u5176\u751f\u547d\u5468\u671f\u5185\u4ea7\u751f\u66f4\u591a\u7684\u7535\u529b\uff0c\u8fd9\u610f\u5473\u7740\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u7cfb\u7edf\u4ea7\u751f\u7684\u7535\u529b\u4f1a\u66f4\u4fbf\u5b9c\u3002\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u5730\u4f7f\u7528\u9553\u6765\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u6211\u4eec\u7684\u7814\u7a76\u7ed3\u679c\u63d0\u4f9b\u4e86\u53ef\u9760\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u8ba9\u5236\u9020\u5546\u505a\u51fa\u6700\u7ec8\u4f1a\u5bf9\u5168\u7403\u4ea7\u751f\u5f71\u54cd\u7684\u51b3\u7b56\u3002\u592a\u9633\u80fd\u7535\u6c60\u901a\u8fc7\u4f7f\u7528\u6765\u81ea\u9633\u5149\u7684\u80fd\u91cf\u201c\u8131\u79bb\u201d\u7845\u4e2d\u7684\u8d1f\u7535\u8377\u6216\u7535\u5b50\uff0c\u5c06\u9633\u5149\u8f6c\u5316\u4e3a\u7535\u80fd\u3002\u7136\u540e\u5c06\u7535\u5b50\u4f5c\u4e3a\u7535\u6536\u96c6\u3002\u7136\u800c\uff0c\u5c06\u5149\u7167\u5c04\u5728\u4e00\u5757\u666e\u901a\u7684\u7845\u4e0a\u5e76\u4e0d\u4f1a\u4ea7\u751f\u7535\uff0c\u56e0\u4e3a\u4ece\u5149\u4e2d\u91ca\u653e\u7684\u7535\u5b50\u5e76\u4e0d\u90fd\u671d\u540c\u4e00\u65b9\u5411\u6d41\u52a8\u3002\u4e3a\u4e86\u4f7f\u7535\u6d41\u671d\u4e00\u4e2a\u65b9\u5411\u6d41\u52a8\uff0c\u6211\u4eec\u9700\u8981\u521b\u9020\u4e00\u4e2a\u7535\u573a\u3002\n\u5728\u7845\u592a\u9633\u80fd\u7535\u6c60\u4e2d\u2014\u2014\u76ee\u524d\u4e3a\u6570\u767e\u4e07\u6fb3\u5927\u5229\u4e9a\u5bb6\u5ead\u63d0\u4f9b\u7535\u529b\u2014\u2014\u8fd9\u662f\u901a\u8fc7\u5411\u7845\u4e2d\u6dfb\u52a0\u4e0d\u540c\u7684\u6742\u8d28\u539f\u5b50\u6765\u5b9e\u73b0\u7684\uff0c\u4ee5\u521b\u5efa\u4e00\u4e2a\u6bd4\u666e\u901a\u7845\uff08n \u578b\u7845\uff09\u5177\u6709\u66f4\u591a\u8d1f\u7535\u8377\u7684\u533a\u57df\u548c\u4e00\u4e2a\u5177\u6709\u66f4\u591a\u8d1f\u7535\u8377\u7684\u533a\u57df\u5177\u6709\u8f83\u5c11\u7684\u8d1f\u7535\u8377\uff08p \u578b\u7845\uff09\u3002\u5f53\u6211\u4eec\u5c06\u7845\u7684\u4e24\u90e8\u5206\u653e\u5728\u4e00\u8d77\u65f6\uff0c\u6211\u4eec\u5c31\u5f62\u6210\u4e86\u6240\u8c13\u7684\u201cpn \u7ed3\u201d\u3002\u8fd9\u5141\u8bb8\u592a\u9633\u80fd\u7535\u6c60\u8fd0\u884c\u3002\u800c\u5728\u7845\u4e2d\u52a0\u5165\u6742\u8d28\u539f\u5b50\u79f0\u4e3a\u201c\u63ba\u6742\u201d\u3002\u5f62\u6210\u7845 p \u578b\u90e8\u5206\u6700\u5e38\u7528\u7684\u539f\u5b50\u662f\u787c\uff0c\u8d1f\u7535\u8377\u6bd4\u666e\u901a\u7845\u5c11\u3002\u787c\u662f\u4e00\u79cd\u5f88\u597d\u7684\u539f\u5b50\uff0c\u56e0\u4e3a\u5b83\u5177\u6709\u5b8c\u6210\u4efb\u52a1\u6240\u9700\u7684\u786e\u5207\u7535\u5b50\u6570\u91cf\u3002\u5728\u592a\u9633\u80fd\u7535\u6c60\u6240\u9700\u7684\u9ad8\u7eaf\u5ea6\u6676\u4f53\u7684\u751f\u4ea7\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4e5f\u53ef\u4ee5\u975e\u5e38\u5747\u5300\u5730\u5206\u5e03\u5728\u7845\u4e2d\u3002\u4f46\u66f4\u6b8b\u9177\u7684\u662f\uff0c\u5c06\u5149\u7ebf\u7167\u5c04\u5728\u787c\u586b\u5145\u7684\u7845\u4e0a\u4f1a\u964d\u4f4e\u7845\u7684\u8d28\u91cf\u3002\u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u5149\u81f4\u9000\u5316\u201d\uff0c\u5728\u8fc7\u53bb\u5341\u5e74\u4e2d\u4e00\u76f4\u662f\u592a\u9633\u80fd\u7814\u7a76\u7684\u70ed\u95e8\u8bdd\u9898\u3002\u8fd9\u79cd\u9000\u5316\u7684\u539f\u56e0\u6bd4\u8f83\u597d\u7406\u89e3\uff1a\u6211\u4eec\u5728\u5236\u4f5c\u7eaf\u7845\u6750\u6599\u65f6\uff0c\u5fc5\u987b\u6709\u76ee\u7684\u5730\u52a0\u5165\u4e00\u4e9b\u787c\u7b49\u6742\u8d28\uff0c\u4ee5\u4ea7\u751f\u9a71\u52a8\u7535\u529b\u7684\u7535\u573a\u3002\u7136\u800c\uff0c\u5176\u4ed6\u4e0d\u9700\u8981\u7684\u539f\u5b50\u4e5f\u56e0\u6b64\u88ab\u7ed3\u5408\u5230\u7845\u4e2d\u3002\u5176\u4e2d\u4e00\u4e2a\u539f\u5b50\u662f\u6c27\uff0c\u5b83\u4ece\u5769\u57da\u4e2d\u878d\u5165\u7845\u4e2d\u2014\u2014\u5769\u57da\u662f\u63d0\u70bc\u7845\u7684\u5927\u706b\u9505\u3002\n\u5f53\u5149\u7ebf\u7167\u5c04\u5728\u540c\u65f6\u542b\u6709\u787c\u548c\u6c27\u7684\u7845\u4e0a\u65f6\uff0c\u5b83\u4eec\u4f1a\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4ece\u800c\u4ea7\u751f\u4e00\u4e2a\u7f3a\u9677\uff0c\u8be5\u7f3a\u9677\u53ef\u4ee5\u6355\u83b7\u7535\u529b\u5e76\u51cf\u5c11\u592a\u9633\u80fd\u7535\u6c60\u677f\u4ea7\u751f\u7684\u7535\u91cf\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740\u4e3a\u592a\u9633\u80fd\u7535\u6c60\u677f\u4f9b\u7535\u7684\u9633\u5149\u4e5f\u4f1a\u5728\u5b83\u4eec\u7684\u751f\u547d\u5468\u671f\u4e2d\u635f\u574f\u5b83\u4eec\u3002\u4e00\u79cd\u53eb\u505a\u9553\u7684\u5143\u7d20\u770b\u8d77\u6765\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u787c\u5e76\u4e0d\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u6765\u5236\u9020 p \u578b\u7845\u7684\u552f\u4e00\u5143\u7d20\u3002\u5feb\u901f\u9605\u8bfb\u5143\u7d20\u5468\u671f\u8868\u53ef\u4ee5\u770b\u5230\u4e00\u6574\u5217\u5143\u7d20\u7684\u8d1f\u7535\u8377\u6bd4\u7845\u5c11\u4e00\u4e2a\u3002\u5c06\u8fd9\u4e9b\u539f\u5b50\u4e2d\u7684\u4e00\u4e2a\u6dfb\u52a0\u5230\u7845\u4e2d\u4f1a\u7834\u574f\u6b63\u7535\u8377\u548c\u8d1f\u7535\u8377\u4e4b\u95f4\u7684\u5e73\u8861\uff0c\u8fd9\u662f\u4ea7\u751f\u7535\u573a\u6240\u5fc5\u9700\u7684\u3002\u5728\u8fd9\u4e9b\u539f\u5b50\u4e2d\uff0c\u6700\u5408\u9002\u7684\u662f\u9553\u3002\u9553\u662f\u4e00\u79cd\u975e\u5e38\u9002\u5408\u5236\u9020 p \u578b\u7845\u7684\u5143\u7d20\u3002\u4e8b\u5b9e\u4e0a\uff0c\u591a\u9879\u7814\u7a76\u8868\u660e\u5b83\u4e0d\u4f1a\u4e0e\u6c27\u6c14\u7ed3\u5408\u800c\u5bfc\u81f4\u964d\u89e3\u3002\u6240\u4ee5\uff0c\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e00\u76f4\u6ca1\u6709\u4f7f\u7528\u9553\uff1f\u55ef\uff0c\u8fc7\u53bb 20 \u5e74\u6765\u6211\u4eec\u4e00\u76f4\u575a\u6301\u4f7f\u7528\u787c\u800c\u4e0d\u662f\u9553\u7684\u539f\u56e0\u662f\u7528\u9553\u63ba\u6742\u7845\u7684\u8fc7\u7a0b\u88ab\u9501\u5b9a\u5728\u4e13\u5229\u4e4b\u4e0b\u3002\u8fd9\u963b\u6b62\u4e86\u5236\u9020\u5546\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002\u4f46\u8fd9\u4e9b\u4e13\u5229\u6700\u7ec8\u5728 2020 \u5e74 5 \u6708\u5230\u671f\u3002\u6b64\u540e\uff0c\u884c\u4e1a\u8fc5\u901f\u4ece\u787c\u8f6c\u5411\u9553\u5236\u9020 p \u578b\u7845\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u5728 2021 \u5e74\u521d\uff0c\u9886\u5148\u7684\u5149\u4f0f\u5236\u9020\u5546\u97e9\u534e Q Cells \u4f30\u8ba1\uff0c2021 \u5e74\u5236\u9020\u7684\u6240\u6709\u592a\u9633\u80fd\u7535\u6c60\u677f\u4e2d\u7ea6\u6709 80% \u4f7f\u7528\u4e86\u9553\u63ba\u6742\u800c\u4e0d\u662f\u787c\u2014\u2014\u8fd9\u662f\u5728\u5982\u6b64\u77ed\u7684\u65f6\u95f4\u5185\u53d1\u751f\u7684\u5de8\u5927\u8f6c\u53d8\uff01\u6211\u4eec\u7814\u7a76\u4e86\u7528\u63ba\u9553\u7845\u5236\u6210\u7684\u592a\u9633\u80fd\u7535\u6c60\u662f\u5426\u771f\u7684\u6bd4\u7528\u63ba\u787c\u7845\u5236\u6210\u7684\u592a\u9633\u80fd\u7535\u6c60\u66f4\u7a33\u5b9a\u3002\u4e3a\u4e86\u627e\u5230\u7b54\u6848\uff0c\u6211\u4eec\u4f7f\u7528\u201c\u7845\u5f02\u8d28\u7ed3\u201d\u8bbe\u8ba1\u5236\u9020\u592a\u9633\u80fd\u7535\u6c60\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5bfc\u81f4\u8fc4\u4eca\u4e3a\u6b62\u6548\u7387\u6700\u9ad8\u7684\u7845\u592a\u9633\u80fd\u7535\u6c60\u3002\u8fd9\u9879\u5de5\u4f5c\u662f\u4e0e\u4fc4\u7f57\u65af\u7684 Hevel Solar \u5408\u4f5c\u5b8c\u6210\u7684\u3002\u6211\u4eec\u5728 300,000 \u79d2\u7684\u5149\u6d78\u6ce1\u6d4b\u8bd5\u4e2d\u6d4b\u91cf\u4e86\u63ba\u787c\u548c\u63ba\u9553\u592a\u9633\u80fd\u7535\u6c60\u7684\u7535\u538b\u3002\u7531\u4e8e\u787c\u4e0e\u6c27\u7684\u7ed3\u5408\uff0c\u63ba\u787c\u592a\u9633\u80fd\u7535\u6c60\u7ecf\u5386\u4e86\u663e\u7740\u7684\u9000\u5316\u3002\u540c\u65f6\uff0c\u63ba\u9553\u592a\u9633\u80fd\u7535\u6c60\u7684\u7535\u538b\u8981\u9ad8\u5f97\u591a\u3002\u6211\u4eec\u7684\u7ed3\u679c\u8fd8\u8868\u660e\uff0c\u4f7f\u7528\u9553\u5236\u6210\u7684 p \u578b\u7845\u975e\u5e38\u7a33\u5b9a\uff0c\u6709\u52a9\u4e8e\u4e3a\u6b64\u7c7b\u592a\u9633\u80fd\u7535\u6c60\u8282\u7701\u6210\u672c\u3002\u8003\u8651\u5230\u5236\u9020\u5546\u6709\u53ef\u80fd\u5927\u89c4\u6a21\u4f7f\u7528\u9553\uff0c\u751f\u4ea7\u66f4\u7a33\u5b9a\u4e14\u53ef\u80fd\u66f4\u4fbf\u5b9c\u7684\u592a\u9633\u80fd\u7535\u6c60\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u4ee4\u4eba\u5174\u594b\u7684\u524d\u666f\u3002\u6700\u597d\u7684\u90e8\u5206\u662f\u6211\u4eec\u7684\u53d1\u73b0\u53ef\u80fd\u4f1a\u5bf9\u884c\u4e1a\u4ea7\u751f\u76f4\u63a5\u5f71\u54cd\u3002\u4e3a\u6211\u4eec\u7684\u5bb6\u5ead\u63d0\u4f9b\u66f4\u4fbf\u5b9c\u7684\u592a\u9633\u80fd\u7535\u529b\u4e5f\u610f\u5473\u7740\u6211\u4eec\u7684\u661f\u7403\u66f4\u7f8e\u597d\u7684\u672a\u6765\u3002", "note_en": "Solar power is already the  cheapest form of electricity generation, and its cost will continue to fall as more improvements emerge in the technology and its global production. Now, new  research is exploring what could be another major turning point in solar cell manufacturing.\n In Australia, more than two million rooftops have solar panels (the most per capita in the world). The main material used in panels is silicon. Silicon makes up most of an individual solar cell\u2019s components required to convert sunlight into power. But some other elements are also required.\n Research  from our group at the University of New South Wales\u2019s School of  Photovoltaics and Renewable Energy Engineering shows that adding  gallium to the cell\u2019s silicon can lead to very stable solar panels which are much less susceptible to degrading over their lifetime.\n This is the long-term goal for the next generation of solar panels: for them to produce more power over their lifespan, which means the electricity produced by the system will be cheaper in the long run.\n  As gallium is used more and more to achieve this, our findings provide robust data that could allow manufacturers to make decisions that will ultimately have a global impact.\n  A solar cell converts sunlight into electricity by using the energy from sunlight to \u201cbreak away\u201d negative charges, or electrons, in the silicon. The electrons are then collected  as electricity.\n However, shining light on a plain piece of silicon doesn\u2019t generate electricity, as the electrons that are released from the light do not all flow in the same direction. To make the electricity flow in one direction, we need to create an electric field.\n    In silicon solar cells \u2014 the kind currently producing power for millions of Australian homes \u2014 this is done by adding different impurity atoms to the silicon, to create a region that has more negative charges than normal silicon (n-type silicon) and a region that has fewer negative charges (p-type silicon).\n When we put the two parts of silicon together, we form what is called a \u201cp-n junction\u201d. This allows the solar cell to operate. And the adding of impurity atoms into silicon is called \u201cdoping\u201d.\n  The most commonly used atom to form the p-type part of the silicon, with less negative charge than plain silicon, is boron.\n Boron is a great atom to use as it has the exact number of electrons needed for the task. It can also be distributed very uniformly through the silicon during the production of the high-purity crystals required for solar cells.\n But in a cruel twist, shining light on boron-filled silicon can make the quality of the silicon degrade. This is often referred to as \u201clight-induced degradation\u201d and has been a hot topic in solar research over the past decade.\n The reason for this degradation is relatively well understood: when we make the pure silicon material, we have to purposefully add some impurities such as boron to generate the electric field that drives the electricity. However, other unwanted atoms are also incorporated into the silicon as a result.\n One of these atoms is oxygen, which is incorporated into the silicon from the crucible \u2014 the big hot pot in which the silicon is refined.\n When light shines on silicon that contains both boron and oxygen, they bond together, causing a defect that can trap electricity and reduce the amount of power generated by the solar panel.\n Unfortunately, this means the sunlight that powers solar panels also damages them over their lifetime. An element called gallium looks like it could be the solution to this problem.\n  Boron isn\u2019t the only element we can use to make p-type silicon. A quick perusal of the periodic table shows a whole column of elements that have one less negative charge than silicon.\n Adding one of these atoms to silicon upsets the balance between the negative and positive charge, which is needed to make our electric field. Of these atoms, the most suitable is gallium.\n Gallium is a very suitable element to make p-type silicon. In fact, multiple studies  have shown it doesn\u2019t bond together with oxygen to cause degradation. So, you may be wondering, why we haven\u2019t been using gallium all along?\n Well, the reason we have been stuck using boron instead of gallium over the past 20 years is that the process of doping silicon with gallium was locked under a  patent. This prevented manufacturers using this approach.\n  But these patents finally expired in May 2020. Since then, the industry has rapidly shifted from boron to gallium to make p-type silicon.\n In fact, at the start of 2021, leading photovoltaic manufacturer Hanwha Q Cells estimated about 80% of all solar panels manufactured in 2021 used gallium doping rather than boron \u2014 a massive transition in such a short time!\n  We investigated whether solar cells made with gallium-doped silicon really are more stable than solar cells made with boron-doped silicon.\n To find out, we made solar cells using a \u201c silicon heterojunction\u201d design, which is the approach that has led to the highest efficiency silicon solar cells to date. This work was done in collaboration with Hevel Solar in Russia.\n We measured the voltage of both boron-doped and gallium-doped solar cells during a light-soaking test for 300,000 seconds. The boron-doped solar cell underwent significant degradation due to the boron bonding with oxygen.\n Meanwhile, the gallium-doped solar cell had a much higher voltage. Our result also demonstrated that p-type silicon made using gallium is very stable and could help unlock savings for this type of solar cell.\n To think it might be possible for manufacturers to work at scale with gallium, producing solar cells that are both more stable and potentially cheaper, is a hugely exciting prospect.\n The best part is our findings could have a direct impact on industry. And cheaper solar electricity for our homes means a brighter future for our planet, too.", "posttime": "2021-07-24 23:33:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5149\u4f0f,excluded,\u592a\u9633\u80fd", "title": "\u4e00\u9879\u5173\u4e8e\u7845\u5149\u4f0f\u7535\u6c60\u7684\u5173\u952e\u60f3\u6cd5\u88ab\u4e00\u9879\u4e13\u5229\u6392\u9664\u4e86 20 \u5e74", "title_en": "A crucial idea for silicon PV cells was excluded by a patent for 20 years", "transed": 1, "url": "https://theconversation.com/the-sunlight-that-powers-solar-panels-also-damages-them-gallium-doping-is-providing-a-solution-164935", "via": "", "real_tags": ["\u5149\u4f0f", "excluded", "\u592a\u9633\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "f1e8311bde09611f2b5b60abcba46aa9.jpg", "infoid": 1069467, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5373\u4f7f\u60a8\u6839\u672c\u4e0d\u4f7f\u7528 Clubhouse \u5e94\u7528\u7a0b\u5e8f\uff0c\u60a8\u81ea\u5df1\u7684\u53f7\u7801\u4e5f\u53ef\u80fd\u5305\u542b\u5728\u6cc4\u6f0f\u4e2d\u3002\u6574\u4e2a\u4f1a\u6240\u6570\u636e\u5e93\u90fd\u53ef\u4ee5\u5728\u6697\u7f51\u4e0a\u627e\u5230\u3002\u81f3\u5c11\u6709\u4e00\u4f4d\u7528\u6237\u58f0\u79f0\uff0c\u4ed6\u5e0c\u671b\u5728 9 \u6708\u4efd\u7684\u79c1\u4eba\u62cd\u5356\u4f1a\u4e0a\u51fa\u552e\u8be5\u6570\u636e\u5e93\u3002\u63d0\u4f9b8300\u4e07\u4e2a\u7535\u8bdd\u53f7\u7801\u7684\u514d\u8d39\u6837\u672c\uff0c\u4ee5\u4fbf\u6709\u5174\u8da3\u7684\u4eba\u53ef\u4ee5\u68c0\u67e5\u6570\u636e\u7684\u771f\u5b9e\u6027\u3002\u636e\u63d0\u4f9b\u5546\u79f0\uff0c\u6574\u4e2a\u6570\u636e\u5e93\u6709 38 \u4ebf\u4e2a\u7535\u8bdd\u53f7\u7801\u3002\u8fd9\u5305\u62ec\u624b\u673a\u53f7\u7801\u3001\u56fa\u5b9a\u7535\u8bdd\u53f7\u7801\u3001\u79c1\u4eba\u53f7\u7801\u548c\u516c\u53f8\u7535\u8bdd\u53f7\u7801\u3002\u4e4b\u6240\u4ee5\u51fa\u73b0\u5982\u6b64\u5927\u7684\u6570\u5b57\uff0c\u662f\u56e0\u4e3a Clubhouse \u8ba8\u8bba\u5e94\u7528\u7a0b\u5e8f\u636e\u79f0\u4f1a\u79d8\u5bc6\u5730\u5b9e\u65f6\u540c\u6b65\u6240\u6709\u7528\u6237\u7684\u8054\u7cfb\u4eba\u3002\u4e00\u65e6\u5728\u667a\u80fd\u624b\u673a\u7684\u901a\u8baf\u5f55\u4e2d\u8f93\u5165\u4e86\u65b0\u7684\u7535\u8bdd\u53f7\u7801\uff0c\u5b83\u4e5f\u4f1a\u88ab\u6dfb\u52a0\u5230\u4f1a\u6240\u6570\u636e\u5e93\u4e2d\u3002\u56e0\u6b64\uff0cClubhouse \u6709\u8bb8\u591a\u4ece\u672a\u5b89\u88c5\u8fc7\u8be5\u5e94\u7528\u7a0b\u5e8f\u6216\u4ec0\u81f3\u4e0d\u77e5\u9053\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u4eba\u7684\u7535\u8bdd\u53f7\u7801\u3002 Clubhouse \u58f0\u79f0\u62e5\u6709\u8d85\u8fc7 1000 \u4e07\u7528\u6237\u2014\u2014\u8fdc\u5c11\u4e8e\u6cc4\u9732\u7684 38 \u4ebf\u7535\u8bdd\u53f7\u7801\u3002\u6839\u636e\u6570\u636e\u5e93\u5356\u5bb6\u7684\u8bf4\u6cd5\uff0cClubhouse \u4f7f\u7528\u8fd9\u4e9b\u6570\u5b57\u4f5c\u4e3a\u8bc4\u5206\u7cfb\u7edf\u3002\u6839\u636e\u5728\u7528\u6237\u667a\u80fd\u624b\u673a\u4e0a\u627e\u5230\u53f7\u7801\u7684\u9891\u7387\uff0c\u5f97\u5206\u8d8a\u9ad8\u3002 Clubhouse \u5e0c\u671b\u786e\u5b9a\u4e2a\u4eba\u548c\u516c\u53f8\u7684\u7f51\u7edc\u6c34\u5e73\u3002\u7136\u540e\uff0c\u8fd9\u4e9b\u4fe1\u606f\u53ef\u80fd\u4f1a\u8f6c\u552e\u7ed9\u5e7f\u544a\u548c\u5206\u6790\u516c\u53f8\u3002\n\u4ece\u751a\u81f3\u4e0d\u4f7f\u7528\u8be5\u670d\u52a1\u7684\u4eba\u90a3\u91cc\u6536\u96c6\u6570\u636e\u7684\u65b9\u6cd5\u5728\u67d0\u4e9b\u56fd\u5bb6/\u5730\u533a\u8fdd\u53cd\u4e86\u6570\u636e\u4fdd\u62a4\u6cd5\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e9b\u6570\u636e\u4e5f\u88ab\u7528\u4e8e\u53ef\u80fd\u51fa\u552e\u7ed9\u7b2c\u4e09\u65b9\u516c\u53f8\u7684\u8bc4\u8bba\uff0c\u8fd9\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7cdf\u3002\u5728\u6b27\u76df\uff0c\u901a\u7528\u6570\u636e\u4fdd\u62a4\u6761\u4f8b (GDPR) \u7981\u6b62\u6536\u96c6\u4e0d\u4f7f\u7528\u8be5\u670d\u52a1\u7684\u4e2a\u4eba\u6570\u636e\u3002\u5982\u679c\u6cc4\u6f0f\u4e2d\u7684\u6570\u636e\u662f\u771f\u5b9e\u7684\uff0c\u6b27\u76df\u5c06\u4e0d\u5f97\u4e0d\u8fdb\u884c\u5e72\u9884\u5e76\u8ffd\u7a76\u4f1a\u6240\u7684\u8d23\u4efb\u3002", "note_en": "Auch wenn man die Clubhouse-App gar nicht verwendet, kann die eigene Nummer im Leak enthalten sein.\n    Im  Darknet wird die gesamte Datenbank von  Clubhouse angeboten. Dies behauptet zumindest ein User, der die Datenbank im September bei einer privaten Auktion verkaufen will.\n  Damit Interessierte die Echtheit der Daten \u00fcberpr\u00fcfen k\u00f6nnen, wird eine  kostenlose Probe mit 83 Millionen Telefonnummern angeboten.\n  Laut dem Anbieter hat die gesamte Datenbank  3,8 Milliarden Telefonnummern. Dazu geh\u00f6ren Handynummern, Festnetznummer, Nummern von Privatpersonen und Firmentelefonnummer.\n    Die gro\u00dfe Anzahl kommt zustande, weil die Diskussions-App Clubhouse angeblich  heimlich die Kontakte aller seiner User*innen in Echtzeit synchronisiert. Sobald eine neue Telefonnummer in den Kontakten am Smartphone eingetragen wird, wird auch diese in die Clubhouse-Datenbank aufgenommen.\n  Dadurch hat Clubhouse viele Telefonnummern von Personen, die die App noch nie installiert haben oder diese nicht einmal kennen. Clubhouse hat nach eigenen Angaben \u00fcber  10 Millionen User*innen \u2013 also weit weniger als die geleakten 3,8 Milliarden Telefonnummern.\n    Laut dem Verk\u00e4ufer der Datenbank nutzt Clubhouse die Nummern f\u00fcr ein  Scoring-System. Je nachdem wie oft eine Nummer auf den Smartphones der User*innen gefunden wird, desto h\u00f6her das Scoring. So will Clubhouse das Level der Vernetzung f\u00fcr Privatpersonen und Unternehmen bestimmen. Diese Informationen sollen dann vermutlich Werbe- und Analysefirmen weiterverkauft werden.\n  Die Methode Daten von Personen zu sammeln, die den Service nicht mal nutzen, ist in einigen L\u00e4ndern eine  Verletzung der Datenschutzgesetze. Dass diese Daten dann auch noch f\u00fcr Bewertungen genutzt werden, die wom\u00f6glich Drittfirmen verkauft weren, macht die Sache noch schlimmer.\n  In der EU verbietet die Allgemeine Datenschutz-Verordnung \u2013  General Data Protection Regulation (GDPR) \u2013 das Sammeln von Personendaten, die nicht den Dienst oder Service nutzen. Sollten sich die Daten in dem Leak als echt herausstellen, m\u00fcsste die EU einschreiten und Clubhouse zur Rechenschaft ziehen.", "posttime": "2021-07-24 22:59:45", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "database,\u7535\u8bdd\u53f7\u7801,source,\u5e94\u7528\u7a0b\u5e8f", "title": "\uff08\u5916\u5a92\uff09\u6574\u4e2a\u4f1a\u6240\u7535\u8bdd\u53f7\u7801\u5e93\uff0838\u4ebf\u53f7\u7801\uff0c\u5305\u62ec\u8054\u7cfb\u4eba\uff09\u5728\u6697\u7f51\u4e0a\u51fa\u552e", "title_en": "(Foreign Source) The entire Clubhouse phonenumber database (3.8 billion numbers, including contacts) is up for sale on the darknet", "transed": 1, "url": "https://futurezone.at/apps/clubhouse-leakt-38-milliarden-telefonnummern-illegal/401453233", "via": "", "real_tags": ["database", "\u7535\u8bdd\u53f7\u7801", "source", "\u5e94\u7528\u7a0b\u5e8f"]}]