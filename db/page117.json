[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1068373, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u55e8\uff0c\u6211\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03\u91ca\u653eSquashfs-Tools-Ng 1.1.2\uff0c\u4ee5\u53ca\u5dee\u5f02\u91ca\u653e1.0.5\uff0c\u5176\u4e2d\u5305\u542b\u9519\u8bef\u4fee\u590d\u7684\u9519\u8bef\uff0c\u5176\u4e2d\u8fd4\u56de\u52301.0.4\u53d1\u884c\u6807\u7b7e\u7684\u5355\u72ec\u5206\u652f\u3002 1.1.2\u7248\u672c\u4e3b\u8981\u5305\u542b\u7528\u4e8etar2sqfs\u7684\u53e6\u4e00\u4e2a\u9519\u8bef\u4fee\u590d\uff0c\u5173\u4e8e\u5df2\u4f7f\u7528paralletCompression\u751f\u6210\u7684BZIP2\u538b\u7f29\u6863\u6848\uff0c\u5bfc\u81f4TAR\u5b58\u6863\u4e2d\u7684\u65e9\u671f\u6d41\u7ec8\u7aef\u3002\u6dfb\u52a0\u5230Libsquashfs\u7684\u5176\u4ed6\u4fee\u590d\uff0c\u5173\u4e8e\u8f93\u51fa\u5757\u5bf9\u9f50\u3002 inatiS\u5728\u5e93\u4e2d\u5b9e\u73b0\u7684\u529f\u80fd\uff0c\u4f46\u76ee\u524d\u672a\u66dd\u5149\u547d\u4ee4\u884c\u5de5\u5177\u3002\u6b64\u5916\uff0c\u6dfb\u52a0\u65b0\u7684\u7f16\u8bd1\u5668\u8b66\u544a\u6807\u5fd7\u5e76\u76f8\u5e94\u5730\u901a\u8fc7\u8fdb\u4e00\u6b65\u52a0\u5f3a\u6f5c\u5728\u6574\u6570\u6ea2\u51fa\uff0c\u5bf9\u9f50\u95ee\u9898\u548c\u67d0\u4e9bPrintf\u683c\u5f0f\u5b57\u7b26\u4e32\u6807\u5fd7\u89d2\u5339\u914d.As\u4e0a\u9762\u63d0\u5230\u7684\u4efb\u4f55\u9519\u8bef\u4fee\u590d\u76841.1.x\u5206\u652f\u4e5f\u4f1a\u5f71\u54cd\u8f83\u65e7\u76841.0.4\u7248\u672c\uff0c\u5df2\u6301\u7eed\u8fd4\u56de\u7ed9\u540d\u4e3a\uff06\uff0334;\u4fee\u590d-14.0\uff06\uff0334;\u56e0\u4e3a\u73b0\u5728\u90a3\u4e9b\u5df2\u7ecf\u53d8\u5f97\u5f88\u591a\uff0c\u6240\u4ee5\u4ea7\u751f\u4e86\u4e00\u4e2a\u65b0\u76841.0.5\u91ca\u653e\u7684tarball\u3002\u8fd9\u91cc\u8fd8\u63d0\u4f9b\u4e861.0.4\u7684Tarball\u7684\u5404\u79cd\u8865\u4e01\uff1ahttps://infraroot.at/pub/squashfs/patches-1.0.4/plase\u8bf7\u6ce8\u610f\uff0clibtool so-version\u4e3a1.0.5\u7684\u51b2\u7a81\u4e0e1.1 .1\u91ca\u653e\u3002\u5b83\u4eec\u5b9e\u73b0\u4e86\u5b8c\u5168\u76f8\u540c\u7684API\uff0c\u5e76\u5e94\u7406\u8bba\u4e0a\u517c\u5bb9Beaperfectly Abi\u517c\u5bb9\uff0c\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u540e\u8005\u5185\u90e8\u91cd\u7ec4\u548c\u7ee9\u6548\u6539\u8fdb\uff0c\u800c\u524d\u8005\u5305\u542b\u540e\u9000\u4fee\u590d.Tarball\uff1ahttps://infraroot.at/pub/squashfs / squashfs-tools-ng-1.2.tar.xz https://infraroot.at/pub/squashfs/squashfs-tools-ng-1.0.5.tar.xzsignature\uff1ahttps://infraroot.at/pub/ squashfs / scashfs-tools-ng-1.1.2.tar.xz.asc https://infraroot.at/pub/squashfs/squashfs-tools-ng-1.0.5.tar.xz.ascsigned\u6807\u7b7e\uff1ahttps\uff1a// github.com/agentd/squashfs-tools-ng.git v1.1.2 https\uff1a//github.com/agentd/squashfs-tools-ng.git v1.0.5 https://git.infraroot.at/squashfs-tools- ng.git v1.1.2 https://git.infraroot.at/squashfs-tools-ng.git v1.0.5pre-compiled windows\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4f7f\u7528Mingw Crosschain\u5efa\u9020\uff0c\u53ef\u5728\u6b64\u5904\u63d0\u4f9b\uff1ahttps://infraroot.at /pub/squashfs/windows/squashfs-tools-ng-1.1.2-mingw32.zip https\uff1a//infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.2- mimentw32 .zip.asc https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.0.5-mingw32.zip https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng. -1.0.5-mingw32.zip.asc https://infraroot.at/pub/quashfs/windows/squashfs-tools-ng-1.2-mingw64.zip https://infraroot.at/pub/squashfs/windows / squashfs-tools-ng-1.1.2-mingw64.zip.asc https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.0.5-mingw64.zip https://infraroot.at. /pub/squashfs/windows/squashfs-tools-nc.ascfixed\u4ece1.1.1\u52301.1.2\uff1a -  libsquashfs\uff1a\u5757\u5904\u7406\u5668\u4e2d\u7684\u4fdd\u7559\u5bf9\u9f50\u6807\u5fd7 -  libsquasqus\uff1a\u5757\u5199\u5165\u4e2d\u7684\u5757\u5757\u5bf9\u9f50\u5141\u8bb8\u8fde\u63a5\u7684Bzip2\u6d41 - \u4e00\u4e9b\u6587\u6863\u6f84\u6e05\uff0c\u5e76\u4e14\u62fc\u5199\u4fee\u590d - \u4f7f\u7528Automake\u6761\u4ef6\u7528\u4e8eZSTD\u6d41\u538b\u7f29\u652f\u6301 - \u989d\u5916\u7684\u7f16\u8bd1\u5668\u8b66\u544a\u5df2\u6253\u5f00\u548c\u5bfb\u5740 -  Libfstream\uff1a\u6dfb\u52a0Printf\u683c\u5f0f\u8bf4\u660e\u7b26\u5c5e\u6027 -  libfstream\uff1a\u9632\u6b62\u6f5c\u5728\u6574\u6570\u6ea2\u51fa -  libfstree\uff1a\u9632\u8303\u94fe\u63a5\u8ba1\u6570\u548cinode\u53f7\u6ea2\u51fa -  l IBFStree\uff1a\u9632\u6b62readlink\uff08\uff09\u4e2d\u53ef\u80fd\u7684\u6ea2\u51fa -  libcommon\uff1a\u6f5c\u5728\u7684Un-aligaled\u5728LZO Compressor-libsquashfs\u4e2d\u7684\u6570\u636e\u8bbf\u95ee\uff1a\u5728\u5143\u6570\u636e\u5904\u7406\u4e2d\u7684\u6f5c\u5728\u672a\u8ba1\u7b97\u7684\u6570\u636e\u8bbf\u95ee - \u67d0\u79cd\u683c\u5f0f\u5b57\u7b26\u4e32\u7c7b\u578b/\u7b7e\u540d\u4e0d\u5339\u914d\u57281.0.4\u52301.0.5\u4e2d\u53d1\u51fa\u7684\u4e00\u4e9b\u683c\u5f0f\u5b57\u7b26\u4e32\u7c7b\u578b/\u7b7e\u540d\u4e0d\u5339\u914d\u3002 \uff1a - \u4fee\u590d\u683c\u5f0f\u5b57\u7b26\u4e32\u7c7b\u578b/\u7b7e\u540d\u4e0d\u5339\u914d\u95ee\u9898 - \u6dfb\u52a0\u6bcf\u4e2a\u4ea4\u6362\u673a\u5757\u7684\u9ed8\u8ba4\u60c5\u51b5 - \u5728\u5404\u4e2a\u5730\u65b9\u5220\u9664\u4f11\u95f2\u8054\u5408\u56fd\u961f\u4f0d -  libsquashfs\uff1a\u6446\u8131\u6f5c\u5728\u7684\u672a\u5bf9\u51c6\u7684\u8bbf\u95ee\u548cvlas- libcommon\uff1a\u5220\u9664\u6f5c\u5728\u7684\u672a\u5bf9\u51c6\u8bbf\u95eelzo Compressor- Libfstree\uff1a\u9632\u8303\u94fe\u8def\u8ba1\u6570\u548cinode\u53f7\u6ea2\u51fa -  Backport\u6587\u6863\u6f84\u6e05\u548c\u62fc\u5199\u4fee\u590d -  FIX\uff1alibsquashfs\uff1a\u5141\u8bb8\u5728Windows\u4e0a\u9759\u6001\u94fe\u63a5 -  FIX\uff1alibsquashfs\uff1a\u6dfb\u52a0sqfs_free\uff08\uff09\u51fd\u6570 -  libsquashfs\uff1afign\uff1aset\uff1aset\u5904\u7406\u5668 -  libsquashfs\uff1a\u5982\u679c\u5728\u4f7f\u7528\u53ea\u8bfb\u6807\u5fd7\uff08Win32\uff09\u7684SQFS\u6620\u50cf\u6253\u5f00SQFS\u6620\u50cf\u65f6\u8bf7\u6c42 - \u6dfb\u52a0\u5171\u4eab\u8bfb\u53d6\u8bbf\u95ee\uff0c\u5219\u4fee\u590d\u5757\u5bf9\u9f50\uff08Win32\uff09\u95ee\u5019\uff0cDavid ", "note_en": "Hi,I am pleased to announce the release of squashfs-tools-ng 1.1.2, as well as asimultaneous release of 1.0.5 which contains bug-fixes that where back-portedto a separate branch off of the 1.0.4 release tag.The 1.1.2 release contains primarily another bug fix for tar2sqfs, regardingsupport for bzip2 compressed archives that have been generated with parallelcompression, resulting in premature stream terminations in the tar archive.Another fix for libsquashfs is added, regarding output block alignment. Thisis a feature that is implemented in the library, but currently not exposedthrough the command line tools.In addition, new compiler warning flags were added and addressed accordinglywith further hardening against potential integer overflows, alignment issues,and some printf format string signdness mismatches.As mentioned above, any bug-fixes on the 1.1.x branch that also affectthe older 1.0.4 release have been continuously back-ported to a separatebranch called &#34;fixes-1.0.0&#34;. Because those have become quite numerousby now, a new 1.0.5 release tarball was generated. Individual patches ontop of the 1.0.4 tarball are also available here:  https://infraroot.at/pub/squashfs/patches-1.0.4/Please note that the libtool so-version of 1.0.5 clashes with the one fromthe 1.1.1 release. They implement the exact same API and should in theory beperfectly ABI compatible, with the main difference being that the latercontains internal restructurings and performance improvements, while the formeronly contains back-ported fixes.Tarball:  https://infraroot.at/pub/squashfs/squashfs-tools-ng-1.1.2.tar.xz  https://infraroot.at/pub/squashfs/squashfs-tools-ng-1.0.5.tar.xzSignature:  https://infraroot.at/pub/squashfs/squashfs-tools-ng-1.1.2.tar.xz.asc  https://infraroot.at/pub/squashfs/squashfs-tools-ng-1.0.5.tar.xz.ascSigned tag:  https://github.com/AgentD/squashfs-tools-ng.git v1.1.2  https://github.com/AgentD/squashfs-tools-ng.git v1.0.5  https://git.infraroot.at/squashfs-tools-ng.git v1.1.2  https://git.infraroot.at/squashfs-tools-ng.git v1.0.5Pre-compiled Windows binaries, built using a MinGW cross toolchain,are available here: https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.1.2-mingw32.zip https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.1.2-mingw32.zip.asc https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.0.5-mingw32.zip https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.0.5-mingw32.zip.asc https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.1.2-mingw64.zip https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.1.2-mingw64.zip.asc https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.0.5-mingw64.zip https://infraroot.at/pub/squashfs/windows/squashfs-tools-ng-1.0.5-mingw64.zip.ascFixed from 1.1.1 to 1.1.2:- libsquashfs: preserve alignment flag in block processor- libsquashfs: broken block alignment in block write- allow concatenated Bzip2 streams- Some documentation clarifications and typo fixes- Use Automake conditional for zstd stream compression support- Additional compiler warnings were turned on and addressed- libfstream: Add printf format specifier attribute- libfstream: guard against potential integer overflows- libfstree: guard against link count and inode number overflow- libfstree: guard against possible overflow in readlink()- libcommon: potentially un-aligned data access in LZO compressor- libsquashfs: potentially unaligned data access in meta data handling- Some format string type/signedness mismatch issuesFixed from 1.0.4 to 1.0.5:- Fix format string type/signedness mismatch issues- Add default cases for every switch block- Remove casual un-const casting in various places- libsquashfs: get rid of potentially unaligned access and VLAs- libcommon: remove potentially un-aligned access in LZO compressor- libfstree: guard against link count and inode number overflow- Backport documentation clarifications and typo fixes- Fix: libsquashfs: allow static linking on Windows- Fix: libsquashfs: add sqfs_free() function- libsquashfs: fix: also preserve alignment flag in block processor- libsquashfs: fix block alignment if requested- added shared read access when opening sqfs image with read-only flags (win32)Regards,David", "posttime": "2021-06-26 10:54:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u5e03,tools,https", "title": "Squashfs-Tools-ng 1.1.2\u548c1.0.5\u53d1\u5e03 ", "title_en": "Squashfs-tools-ng 1.1.2 and 1.0.5 are released", "transed": 1, "url": "https://sourceforge.net/p/squashfs/mailman/message/37310325/", "via": "", "real_tags": ["\u53d1\u5e03", "tools", "https"]}, {"category": "", "categoryclass": "", "imagename": "5101d1cebd924355c69218fe3100f583.jpg", "infoid": 1068372, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u622a\u81f32021\u5e746\u670821\u65e5\uff0cIngenuity Mars Helicopter\u5df2\u6210\u529f\u98de\u884c8\u67b6\u98de\u884c\uff0c\u4ece\u673a\u573aD\u5230\u65b0\u673a\u573ae\u5357\u4e1c\u5357\u90e8\u7ea6525\u82f1\u5c3a\uff08160\u7c73\uff09\uff01\u8fd9\u6807\u5fd7\u7740\u806a\u660e\u624d\u667a\u7684\u8fd0\u8425\u793a\u8303\u9636\u6bb5\u7684\u7b2c\u4e09\u79cd\u98de\u884c\uff0c\u5176\u4e2d\u56e2\u961f\u5c06\u7ee7\u7eed\u63a8\u52a8\u98de\u673a\u7684\u98de\u884c\u4fe1\u5c01\uff0c\u540c\u65f6\u5b66\u4e60\u6709\u4ef7\u503c\u7684\u8fd0\u8425\u8bfe\u7a0b\u3002\u822a\u73ed8\u4e5f\u662f\u8f66\u8f86\u6267\u884c\u7684\u7b2c\u4e00\u6b21\u98de\u884c\uff0c\u56e0\u4e3a\u6267\u884c\u4e86\u98de\u884c\u63a7\u5236\u5668\u98de\u884c\u8f6f\u4ef6\u7684\u66f4\u65b0\uff0c\u5e76\u4e14\u6240\u6709\u9065\u6d4b\u90fd\u8868\u660e\u66f4\u65b0\u662f\u6210\u529f\uff01\n      \u57282021\u5e744\u67089\u65e5\uff0c\u5728Sol 49\u7684\u8c03\u8bd5\u671f\u95f4\u9996\u5148\u9047\u5230\u4e86\u5b83\u7684\u770b\u95e8\u72d7\u95ee\u9898\u3002\u95ee\u9898\u7684\u75c7\u72b6\u662f\u76f4\u5347\u673a\u65e0\u6cd5\u8fc7\u6e21\u8f6f\u4ef6\u5185\u7684\u201c\u98de\u884c\u72b6\u6001\u201d\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u79cd\u5185\u90e8\u72b6\u6001\u8fc7\u6e21\uff0c\u76f4\u5347\u673a\u4e0d\u80fd\u65cb\u8f6c\u5b83\u7684\u5200\u7247\u8fbe\u5230\u5168\u901f\uff0c\u56e0\u6b64\u4e0d\u80fd\u98de\u884c\u3002\u8be5\u95ee\u9898\u6e90\u4e8e\u6211\u4eec\u7684\u98de\u884c\u63a7\u5236\u5668\u5fae\u63a7\u5236\u5668\u548c\u6211\u4eec\u7684\u73b0\u573a\u53ef\u7f16\u7a0b\u95e8\u9635\u5217\uff08FPGA\uff09\u4e4b\u95f4\u7684\u8ba1\u7b97\u673a\u4fdd\u62a4\u548c\u53ef\u9760\u6027\u529f\u80fd\u3002\u5728\u8bd5\u56fe\u8fc7\u6e21\u5230\u201c\u98de\u884c\u72b6\u6001\u201d\u65f6\uff0cFPGA\u7684\u770b\u95e8\u72d7\u5c06\u8fdd\u53cd\u5176\u4e25\u683c\u7684\u65f6\u673a\u8981\u6c42\uff0c\u5e76\u9632\u6b62\u806a\u660e\u624d\u667a\u7ee7\u7eed\u8ba1\u5212\u7684\u65cb\u8f6c/\u98de\u884c\u3002\u8be5\u56e2\u961f\u786e\u5b9a\u4e86\u4e00\u4e2a\u5e8f\u5217\u89e3\u51b3\u65b9\u6cd5\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u7ee7\u7eed\u4f7f\u7528\u98de\u884c\u6d3b\u52a8\uff0c\u4f46\u5982\u679c\u770b\u95e8\u72d7\u518d\u6b21\u89e6\u53d1\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u5c1d\u8bd5\u768415\uff05\u6982\u7387\u3002\n   \u806a\u660e\u7684\u56e2\u961f\u5f88\u81ea\u8c6a\u5730\u8bf4\uff0c\u4e0a\u5468\u6211\u4eec\u5b8c\u6210\u4e86\u76f4\u5347\u673a\u4e0a\u7684\u98de\u884c\u63a7\u5236\u5668\u5fae\u63a7\u5236\u5668\u7684\u98de\u884c\u8f6f\u4ef6\u66f4\u65b0\uff0c\u610f\u56fe\u6c38\u4e45\u4fee\u590d\u4e86\u770b\u95e8\u72d7\u95ee\u9898\u3002\u6b64\u8865\u4e01\u5728\u8fd0\u8425\u793a\u8303\u4e2d\u63d0\u4f9b\u4e86\u5f88\u5927\u7684\u53ef\u9760\u6027\uff0c\u786e\u4fddHeli\u548cRover\u56e2\u961f\u53ef\u4ee5\u5728\u672a\u6765\u8ba1\u5212\u6210\u529f\u7684\u822a\u73ed\u3002\u57286\u670818\u65e5\uff0c2021\u5e746\u670818\u65e5\u6162\u901f\u65cb\u8f6c\u56de\u5f52\u6d4b\u8bd5\u4e4b\u540e\uff0c\u822a\u73ed8\u7684\u822a\u73ed\u8bc1\u5b9e\uff0cFC\u98de\u884c\u8f6f\u4ef6\u66f4\u65b0\u662f\u6210\u529f\u7684\uff0c\u800c\u4e14\u806a\u660e\u624d\u667a\u51c6\u5907\u5145\u6ee1\u4fe1\u5fc3\u5730\u8fdb\u5165OPS\u6f14\u793a\u7684\u4e0b\u4e00\u4e2a\u822a\u73ed\u3002\n  \u4e0b\u4e00\u6b65\u4e3a\u806a\u660e\u624d\u667a\u56e2\u961f\u662f\u89e3\u51b3\u552f\u4e00\u5269\u4e0b\u7684\u98de\u884c\u8f6f\u4ef6\u66f4\u65b0\uff0c\u5b83\u5c06\u66f4\u65b0\u8bc6\u522b\u7684\u5927\u90e8\u5206\u5bfc\u822a\u8ba1\u7b97\u673a\u8f6f\u4ef6\u3002\u6b64\u66f4\u65b0\u5c06\u89e3\u51b36\u4e2a\u5f02\u5e38\u7684\u98de\u884c\uff0c\u5176\u4e2d\u56fe\u50cf\u5b9a\u65f6\u5ef6\u8fdf\u8868\u73b0\u4e3a\u98de\u673a\u4f30\u8ba1\u548c\u63a7\u5236\u6311\u6218\u3002\n \u5728\u5206\u67906\u4e2a\u5f02\u5e38\u7684\u822a\u73ed\u671f\u95f4\uff0c\u8be5\u56e2\u961f\u786e\u5b9a\u6355\u83b7\u989c\u8272RTE\u76f8\u673a\u56fe\u50cf\u7684\u8fc7\u7a0b\u53ef\u80fd\u4e00\u76f4\u8bf1\u5bfc\u6210\u50cf\u7ba1\u9053\u6545\u969c\uff0c\u8fd9\u5bfc\u81f4\u98de\u884c\u671f\u95f4\u9047\u5230\u7684\u4e0d\u7a33\u5b9a\u3002\u7403\u961f\u7684\u5047\u8bbe\u662f\u5927\u578bCPU\u6355\u83b7RTE\u768413\u767e\u4e07\u50cf\u7d20\u5f69\u8272\u56fe\u50cf\u6240\u6d89\u53ca\u7684\u8d1f\u8f7d\u53ef\u80fd\u5bfc\u81f4\u7f55\u89c1\u7684\u5bfc\u822a\u6444\u50cf\u673a\u56fe\u50cf\u5728\u7ba1\u9053\u4e2d\u4e22\u5f03\u3002\u90a3\u4e9b\u8fdd\u89c4\u8005\u3002\u76f8\u673a\u56fe\u50cf\u6ef4\u662f\u5bfc\u81f4\u98de\u884c\uff036\u5f02\u5e38\u7684\u539f\u56e0\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e487\u548c8\u822a\u73ed\u6ca1\u6709\u6355\u83b7\u7684\u5f69\u8272\u56fe\u50cf\u3002\u5f53\u7ba1\u9053\u4e2d\u7684\u56fe\u50cf\u65f6\u95f4\u6233\u53d8\u4e3a\u5220\u9664/\u8df3\u8fc7/\u8df3\u8fc7/\u8df3\u8fc7/\u8df3\u8fc7\u65f6\uff0c\u6b64\u66f4\u65b0\u5c06\u63d0\u4f9b\u76f4\u5347\u673a\u68c0\u6d4b\u548c\u66f4\u6b63\u7684\u673a\u5236\uff0c\u540c\u65f6\u8fd8\u91cd\u65b0\u542f\u7528\u9ad8\u5206\u8fa8\u738713\u767e\u4e07\u50cf\u7d20\u5f69\u8272\u56fe\u50cf\u3002\u8ba1\u5212\u5728\u672a\u6765\u51e0\u5929\u5185\u8fdb\u884c\u6b64\u66f4\u65b0\uff0c\u5176\u6b21\u662fin Engenuity\u7684\u7b2c\u4e5d\u6b21\u5728\u706b\u661f\u4e0a\u98de\u884c\u3002 ", "note_en": "As of June 21, 2021, Ingenuity Mars Helicopter has successfully flown its 8 th flight, traveling about 525 feet (160 meters) south-southeast from Airfield D to the new Airfield E! This marks the third flight in the Operations Demonstration Phase of Ingenuity, in which the team will continue to push the flight envelope of the aircraft while learning valuable operational lessons. Flight 8 was also the first flight the vehicle executed since performing an update of its Flight-Controller flight software and all telemetry indicates that the update was a success!\n      Ingenuity first encountered its watchdog issue during commissioning on Sol 49, April 9, 2021. The symptom of the problem is that the helicopter cannot transition into the \u201cflight-state\u201d within the software. Without this internal state transition, the helicopter cannot spin its blades up to full speed, and, therefore, cannot fly. The issue stems from a computer protection and reliability feature between our Flight Controller microcontrollers and our Field Programmable Gate Array (FPGA). When attempting to transition to the \u201cflight-state,\u201d the watchdog on the FPGA would detect violations to its strict timing requirements and prevent Ingenuity from continuing with its planned spin/flight. The team identified a sequence workaround that would allow us to proceed with flight activities, but we have a 15% probability of needing re-attempts if the watchdog triggered again.\n   The Ingenuity team is proud to say that last week we completed a flight software update of the Flight Controller microcontrollers on the helicopter, with the intent of permanently fixing the watchdog issue. This patch provides much needed reliability in the operations demonstration, ensuring that the heli and rover teams can plan for successful flights in the future. Following a 50 rpm slow-speed spin regression test on June 18, 2021, or Sol 116, Flight 8 confirmed that the FC flight software update was a success and that Ingenuity is ready to proceed with confidence into the next flights of the ops demo.\n  Up next for the Ingenuity team is to tackle the only remaining flight software update, which will update a large portion of the Ingenuity\u2019s navigation-computer software. This update will address the  Flight 6 anomaly, where image timing delays manifested into aircraft estimation and control challenges.\n During the course of analyzing the Flight 6 anomaly, the team determined that the process of capturing color RTE camera images may have been inducing the imaging pipeline glitch, which resulted in the instability encountered during Flight # 6. The team\u2019s hypothesis is that the large CPU load involved in capturing the\u00a0RTE\u2019s\u00a013-megapixel color images, could result in rare instances of navigation camera images being dropped in the pipeline. Those nav. camera image drops are what caused the Flight #6 anomaly.\u00a0\u00a0That is why Flights 7 and 8 did not have any color images captured. This update will provide a mechanism for the Helicopter to detect and correct when image timestamps in the pipeline become out-of-synch/are dropped/skipped, while also re-enabling the capture of high-resolution 13-megapixel color images.\u00a0 This update is planned to occur in the coming days, followed by Ingenuity\u2019s ninth flight on Mars.", "posttime": "2021-06-26 10:53:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,\u706b\u661f,\u76f4\u5347\u673a,helicopter,\u98de\u884c", "title": "\u706b\u661f\u76f4\u5347\u673a\uff1a\u822a\u73ed8\u6210\u529f\uff0c\u8f6f\u4ef6\u66f4\u65b0\u548c\u4e0b\u4e00\u6b65 ", "title_en": "Mars Helicopter: Flight 8 Success, Software Updates, and Next Steps", "transed": 1, "url": "https://mars.nasa.gov/technology/helicopter/status/308/flight-8-success-software-updates-and-next-steps/", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u706b\u661f", "\u76f4\u5347\u673a", "\u98de\u884c"]}, {"category": "", "categoryclass": "", "imagename": "48986fe638f488f4f484b1ab1a5668b2.png", "infoid": 1068371, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f2f\u514b\u5229\u6587\u6863\u6458\u8981\u662f\u4e00\u79cd\u57fa\u4e8e\u5b66\u4e60\u7684\u5355\u4e00\u6587\u4ef6umileimarization\u7cfb\u7edf\u3002\u5b83\u57fa\u4e8eConstraintSfrom\u6784\u9020\u89e3\u6790\u548cRST\u8bdd\u8bed\u89e3\u6790\u538b\u7f29\u6e90\u6587\u6863\u6587\u672c\u3002\u6b64\u5916\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u91cd\u65b0\u8868\u5165\u4ee3\u8bcd\u6765\u63d0\u9ad8\u6f84\u6e05\uff0c\u5176\u5426\u5219\u5176\u5426\u5219\u8131\u9970\u6216\u4e0d\u6e05\u695a\u3002\n \u6ce8\u610f\uff1a\u5982\u679c\u60a8\u6240\u6709\u4eba\uff06\uff0339; revers in\u611f\u5174\u8da3\u7684\u662f\u7ebd\u7ea6\u65f6\u62a5dataSet\uff0c\u60a8\u65e0\u9700\u6267\u884c\u4ee5\u4e0b\u5927\u90e8\u5206\u8bbe\u7f6e\u548c\u9884\u5904\u7406\u3002\u76f8\u53cd\uff0c\u4f7f\u7528\u9884\u6784\u5efa\u7684.jar\u5e76\u5728\uff06\uff0334;\u7ebd\u7ea6\u65f6\u62a5\u6570\u636e\u96c6\uff06\uff0334\u4e2d\u8fd0\u884c\u547d\u4ee4; \uff06\uff0334\u4e0b\u7684\u90e8\u5206;\u57f9\u8bad\uff06\uff0334;\u4e0b\u9762\u3002\n   \uff06\uff0334;\u57fa\u4e8e\u5b66\u4e60\u7684\u5355\u4e00\u6587\u4ef6\u6458\u8981\uff0c\u538b\u7f29\u548c\u89c6\u529b\u5b50\u9650\u5236\uff06\uff0334; Greg Durritt\uff0cTaylor Berg-Kirkpatrick\u548cDan Klein\u3002 ACL 2016\u3002\n     \u8be5\u7a0b\u5e8f\u662f\u514d\u8d39\u8f6f\u4ef6\uff1a\u60a8\u53ef\u4ee5\u6839\u636e\u81ea\u7531\u8f6f\u4ef6\u57fa\u7840\uff0c\u200b\u200b\u8bb8\u53ef\u8bc1\u7248\u672c3\u7684\u7248\u672c\uff0c\u6216\uff08\u5728\u60a8\u7684\u9009\u9879\u4e2d\uff09\u7684\u4efb\u4f55\u66f4\u4ecb\u7ecd\u7248\u672c\u7684GNU\u901a\u7528\u516c\u5171\u8bb8\u53ef\u8bc1\u4e0b\u91cd\u65b0\u5206\u914d\u5b83\u548c/\u6216\u4fee\u6539\u3002\n \u8be5\u8ba1\u5212\u7684\u5206\u914d\u5e0c\u671b\u5b83\u5c06\u662f\u6709\u7528\u7684\uff0c\u4f46\u6ca1\u6709\u4efb\u4f55\u4fdd\u4fee;\u751a\u81f3\u6ca1\u6709\u9ed8\u793a\u7684\u5a01\u80c1\u6216\u9002\u5408\u7279\u5b9a\u76ee\u7684\u7684\u4fdd\u8bc1\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605GNU\u901a\u7528\u516c\u5171\u8bb8\u53ef\u8bc1\u3002\n \u60a8\u5e94\u8be5\u6536\u5230GNU\u901a\u7528\u516c\u5171Licensealong\u7684\u526f\u672c\uff0c\u5e76\u4f7f\u7528\u6b64\u7a0b\u5e8f\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u53c2\u9605http://www.gnu.org/licenses/\n   \u7531\u4e8e\u5176\u5c3a\u5bf8\u5927\uff0c\u6a21\u578b\u4e0d\u5305\u62ec\u5728Github\u4e2d\u3002\u4ecehttp://nlp.cs.berkeley.edu/projects/summarizer.shtml\u4e0b\u8f7dNothounmodels\u3002\u57f9\u8bad\u7cfb\u7edf\uff08\u60a8\u9700\u8981EDU\u5206\u6bb5\u5668\uff0c\u8bdd\u8bed\u7a0b\u5e8f\u548cCoreference Model\uff09\u4ee5\u53ca\u8fd0\u884c\u5b83\uff08\u60a8\u9700\u8981EDU\u5206\u6bb5\u5668\uff0c\u8bdd\u8bed\u89e3\u6790\u5668\u548c\u5305\u542bCoreference Model\u7684\u6458\u8981\u6a21\u578b\uff09\u3002\u5176\u4e2d\u7684\u6240\u6709\u662f\u9884\u671f\u5728\u6a21\u578b/\u5b50\u76ee\u5f55\u4e2d\u3002 \n\u6211\u4eec\u8fd8\u9700\u8981Shane Bergsma\u548cDekang Lin\u5728\uff06\uff0334\u4e2d\u7684\u6570\u91cf\u548c\u6027\u522b\u6570\u636e\u4f20\u9012;\u5f15\u5bfc\u8def\u5f84\u7684\u4ee3\u8bcd\u5206\u8fa8\u7387\uff06\uff0334; .dowload\u8fd9\uff0cUntar / gzip\u5b83\uff0c\u5e76\u5c06\u5176\u653e\u5728Data / gender.data\uff08\u9ed8\u8ba4\u8def\u5f84\uff09 systemexpects\u5b83\u5728\uff09\u3002\n  \u5bf9\u4e8e\u6c42\u89e3ILPS\uff0c\u6211\u4eec\u7684\u7cfb\u7edf\u4f9d\u8d56\u4e8eGLPK\uff0c\u7279\u522b\u662fGLPK for Java.\u5bf9\u4e8eOS X\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5b89\u88c5GLPK\u7684\u65b9\u6cd5\u3002\u5728Linux\u4e0a\uff0c\u60a8\u5e94\u8be5\u8fd0\u884csudo apt-get install glpk-utils libglpk-dev libglpk-java\u3002\n libglpk-java\u548cjava\u672c\u673a\u754c\u9762\uff08JNI\uff09\u5e93\u90fd\u9700\u8981\u5728inyour java library\u8def\u5f84\u4e2d\uff08\u89c1\u4e0b\u9762\u7684\u65b9\u6cd5\uff09;\u8fd9\u4e9b\u5e93allowjava\u4e0e\u672c\u673aGLPK\u4ee3\u7801\u4ea4\u4e92\u3002\u6b64\u5916\uff0c\u5728\u8fd0\u884c\u4e2d\u6587\u65f6\uff0c\u5fc5\u987b\u5728\u6784\u5efa\u8def\u5f84\u4e0a\u5177\u6709GLPK-Java-1.1.0.jar;\u8fd9\u662f\u5728lib\u76ee\u5f55\u4e2d\u5305\u542b\u7684\uff0c\u5e76\u4e0e\u5206\u5e03\u5f0fjar\u6346\u7ed1\u5728\u4e00\u8d77\uff0c\u5982\u679c\u4f7f\u7528SBT\u6784\u5efa\uff0c\u5c06\u81ea\u52a8\u5305\u542b\u3002\n \u60a8\u53ef\u4ee5\u6d4b\u8bd5\u7cfb\u7edf\u662f\u5426\u53ef\u4ee5\u4f7f\u7528Run -Glpk-test.sh\u6210\u529f\u8c03\u7528GLPK\uff0c\u8fd9\u8bd5\u56fe\u89e3\u51b3\u5728edu.berkeley.nlp.summ.glpktest\u4e2d\u5b9a\u4e49\u7684\u5c0fILP\u3002\u811a\u672c\u5c1d\u8bd5\u4f7f\u7528/ usr / local / lib / jni\u589e\u5f3a\u52a8\u8def\u5f84\uff0c\u5176\u4e2d\u6709\u65f6\u662fjnilibrary\u4f4d\u4e8eOS X\u4e0a\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u6b64\u811a\u672c\u62a5\u544a\u9519\u8bef\uff0c\u5219\u53ef\u80fd\u9700\u8981ToAugment java\u5e93\u8def\u5f84\u4e0e\u5176\u4e2d\u7684\u4f4d\u7f6eJNI\u6216Thelibglpk_java\u5e93\u5982\u4e0b\uff1a\n       \u60a8\u8fd8\u53ef\u4ee5\u5c06\u5176\u5bfc\u5165Eclipse\u5e76\u4f7f\u7528Scala IDE\u63d2\u4ef6\u7528\u4e8eEclipse http://scala-ide.org\n  \u4e24\u4e2a\u6700\u6709\u7528\u7684\u4e3b\u7c7b\u662fedu.berkeley.nlp.summ.main\u548cedu.berkeley.nlp.summ.summarizer\u3002\u524d\u8005\u662f\u4e00\u4e2a\u6d89\u53ca\u7684\u57f9\u8bad\u548c\u8bc4\u4f30\u7ebd\u7ea6\u65f6\u62a5\u8bed\u6599\u5e93\u7684\u7cfb\u7edf\uff08\u89c1Wepsfor\u5982\u4f55\u83b7\u53d6\u8fd9\u4e2a\u8bed\u6599\u5e93\uff09\uff0c\u540e\u8005\u53ea\u9700\u57f9\u8bad\u57f9\u8bad\u7684\u578b\u53f7\u800c\u4e14\u8fd0\u884c\u5b83\u3002\u8fd9\u4e24\u4e2a\u6587\u4ef6\u90fd\u5305\u542b\u5176\u529f\u80fd\u548c\u547d\u4ee4\u7ebf\u6027\u5316\u7684\u63cf\u8ff0\u3002\n \u5728Run -summarizer.sh\u4e2d\u5305\u542b\u5728\u65b0\u6570\u636e\u4e0a\u8fd0\u884c\u7684\u793a\u4f8b\u3002\u5728\u65b0\u6570\u636e\u4e0a\u8fd0\u884c\u6458\u8981\u7684\u4e3b\u8981\u6807\u51c6\u662f\u5c06\u6570\u636e\u9884\u5904\u7406\u4e0e\u9009\u533a\u89e3\u6790\uff0cner\u548ccoreference\u7684conll\u683c\u5f0f\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7cfb\u7edf\uff0c\u8bf7\u53c2\u9605\u4f2f\u514b\u5229\u5b9e\u4f53\u89e3\u6790\u7cfb\u7edf\u3002\u6d4b\u8bd5/\u76ee\u5f55\u5df2\u5305\u542b\u4e00\u4e9b\u6b64\u7c7b\u6587\u4ef6\u3002 \n\u7136\u540e\u6458\u8981\u4e0eEDU\u5206\u6bb5\u548c\u8bdd\u8bed\u89e3\u6790\u8fdb\u884c\u4e86\u989d\u5916\u7684\u5904\u7406\u3002\u8fd9\u4e9b\u4f7f\u7528\u9ed8\u8ba4\u9ed8\u8ba4\u7684\u6a21\u578b/ edusegmenter.ser.gz\u548cmodels / discoursedep.ser.gz\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u4ea4\u6362\u673a\u63a7\u5236\u8fd9\u4e9b\u3002\n  Summarizer-full.ser.gz\uff1a\u4e00\u79cd\u5e26\u6765\u7684\u538b\u7f29\u6458\u8981\uff0c\u5177\u6709\u91cd\u5199\u4ee3\u8bcd\u7684\u80fd\u529b\u548c\u9644\u52a0\u7684\u523b\u5f55\u529f\u80fd\u548c\u7ea6\u675f\n   \u6211\u4eec\u7528\u4e8e\u57f9\u8bad\u548c\u8bc4\u4f30\u7684\u4e3b\u8981\u8bed\u6599\u5e93\u662f\u7ebd\u7ea6\u65f6\u62a5\u6ce8\u91ca\u8bed\u6599\u5e93\uff08Sandhaus\uff0c2007\uff09\uff0cLDC2008T19\u3002\u6211\u4eec\u5c06\u9884\u5904\u7406\u4f5c\u4e3a\u5bbf\u820d\u6ce8\u91ca\u5206\u53d1\uff0c\u9664\u4e86\u7528\u4e8e\u624b\u52a8\u62d2\u7edd\u5355\u8bcd\u7684\u67d0\u4e9b\u60c5\u51b5\uff08\u4f8b\u5982\uff0c\u5f53\u6388\u6743\u4f7f\u6211\u4eec\u7684\u6570\u636e\u4e0d\u53ef\u6062\u590d\u7684\u5355\u8bcd\uff0c\u9664\u4e86\u67d0\u4e9b\u60c5\u51b5\u4e4b\u5916\uff0c\u9664\u4e86\u6709\uff08Line\uff0cChar Start\uff0cChar End End End End End\uff09Triples\u3002\u4e00\u4e9b\u5206\u6563\u7684\u4ee4\u724c\u662f\u660e\u786e\u7684\uff0c\u52a0\u4e0a\u5927\u7ea61\uff05\u7684\u6587\u4ef6\uff0c\u6211\u4eec\u7684\u7cfb\u7edf\u65e0\u6cd5\u627e\u5230\u5408\u9002\u7684\u5bf9\u9f50\u3002\n \u8981\u51c6\u5907\u6570\u636e\u96c6\uff0c\u8bf7\u9996\u5148\u9700\u8981\u4ece2003-2007\u7684\u6240\u6709XML\u6587\u4ef6\u4e2d\u63d0\u53d6\u5230\u4e00\u4e2a\u76ee\u5f55\u4e2d\u7684\u6240\u6709XML\u6587\u4ef6\u3002\u5e76\u975e\u6240\u6709\u6587\u4ef6\u90fd\u6709\u6458\u8981\uff0c\u6240\u4ee5\u5e76\u975e\u6240\u6709\u8fd9\u4e9b\u90fd\u5c06\u4f7f\u7528\u3002\u63a5\u4e0b\u6765\uff0c\u8fd0\u884c\n  \u8fd9\u5c06\u91c7\u7528\u5217\u8f66\u65c1\u8def\u6ce8\u91ca\u6587\u4ef6\u5e76\u4f7f\u7528XML\u6570\u636e\u91cd\u5efa\u771f\u5b9e\u6587\u4ef6\uff0c\u5199\u5165\u8f93\u51fa\u76ee\u5f55\u3002\u4f7f\u7528EVAL\u800c\u4e0d\u662fTRIAINTO\u91cd\u5efa\u6d4b\u8bd5\u96c6\u3002\n  java -xmx3g -cp\uff06lt; jarpath\uff06gt; edu.berkeley.nlp.summ.preprocess.standofOnotationHandler \\ -Inputdir train_abstracts_standoff / -rawxmldir\uff06lt; path_to_flattene_nyt_xmls\uff06gt; -outputdir train_abstracts / \\ \\ -tagname\uff06\uff0334;\u6458\u8981\uff06\uff0334;\n   \u6211\u4eec\u5c06\u7cfb\u7edf\u4e0e\u80ed\u8102\u53d1\u5c04\u5668\u7684\u7248\u672c\u6346\u7ed1\u5728\u4e00\u8d77\u3002 Rouge-gillick.sh Hardcodes\u5728\u6b64\u5de5\u4f5c\u4e2d\u4f7f\u7528\u7684\u547d\u4ee4\u884c\u53c2\u6570\u548cHirao\u7b49\u4eba\u3002 \uff082013\uff09\uff06\uff0339;\u5de5\u4f5c\u3002\u8be5\u7cfb\u7edf\u671f\u671b\u5728\u6267\u884c\u76ee\u5f55\u4e2d\u7684\u80ed\u8102/\u80ed\u8102/\u76ee\u5f55\u4e0b\uff0c\u4ee5\u53ca\u9002\u5f53\u7684\u6570\u636e\u6587\u4ef6\uff08\u6211\u4eec\u4e0e\u6b64\u7248\u672c\u4e2d\u7684ve Alsobundled\uff09\u3002 \n\u8bf7\u53c2\u9605edu.berkeley.nlp.summ.rougecomputer.evaluaterougenontok\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0e\u6211\u4eec\u7684\u8bc4\u4f30\u4e00\u81f4\u7684\u65b9\u5f0f\u8bc4\u4f30\u80ed\u8102\u7684\u65b9\u6cd5\u3002  java -xmx80g -cp\uff06lt; jarpath\uff06gt; -djava.library.path =\uff06lt;\u5e93\u8def\u5f84\uff06gt;\uff1a/ usr / local / lib / jni edu.berkeley.nlp.summ.main \\ -traindocspath\uff06lt; path_to_train_conll_docs\uff06gt; -trainabstractspath\uff06lt; path_to_train_summaries\uff06gt; \\ -evaldocspath\uff06lt; path_to_eval_conll_docs\uff06gt; -evalabstractspath\uff06lt; path_to_eval_summaries\uff06gt; -abstractsareconll \\ -modelpath\uff06\uff0334;\u6a21\u578b/\u8bad\u7ec3\u6a21\u578b.ser.gz\uff06\uff0334; -corefmodelpath\uff06\uff0334;\u6a21\u578b/ coref-to.ser.gz\uff06\uff0334; \\ -printSummaries -PrintSummariesFortk \\  \u5176\u4e2d\uff06lt; jarpath\uff06gt;\uff0c\uff06lt;\u5e93\u8def\u5f84\uff06gt;\uff0c\u5e76\u4e14\u76f8\u5e94\u5730\u5b9e\u4f8b\u5316\u6570\u636e\u8def\u5f84\u3002 \u7531\u4e8e\u901a\u8fc7\u6ce8\u91ca\u7f13\u5b5825,000\u6b21\u57f9\u8bad\u6587\u6863\uff0c\u7cfb\u7edf\u9700\u8981Lotof\u5185\u5b58\u3002  \uff08\u7531\u4e8e\u6b64\u91ca\u653e\u7684\u5fae\u5c0f\u53d8\u5316\uff0c\u7ed3\u679c\u4e0e\u672c\u6587\u4e2d\u7684\u7ed3\u679c\u7565\u6709\u4e0d\u540c\u3002\uff09 ", "note_en": "The Berkeley Document Summarizer is a learning-based single-documentsummarization system. It compresses source document text based on constraintsfrom constituency parses and RST discourse parses. Moreover, it can improvesummary clarity by reexpressing pronouns whose antecedents would otherwise bedeleted or unclear.\n NOTE: If all you&#39;re interested in is the New York Times dataset, you do  notneed to do most of the setup and preprocessing below. Instead, use the pre-built.jar and run the commands in the &#34;New York Times Dataset&#34; section under &#34;Training&#34;below.\n   &#34;Learning-Based Single-Document Summarization with Compression and Anaphoricity Constraints&#34;Greg Durrett, Taylor Berg-Kirkpatrick, and Dan Klein. ACL 2016.\n     This program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.\n This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See theGNU General Public License for more details.\n You should have received a copy of the GNU General Public Licensealong with this program. If not, see  http://www.gnu.org/licenses/\n   Models are not included in GitHub due to their large size. Download the latestmodels from  http://nlp.cs.berkeley.edu/projects/summarizer.shtml. Theseare necessary for both training the system (you need the EDU segmenter, discourseparser, and coreference model) as well as running it (you need the EDU segmenter,discourse parser, and summarization model, which contains the coreference model).All of these are expected in the models/ subdirectory.\n We also require  number and gender dataproduced by Shane Bergsma and Dekang Lin in in &#34;Bootstrapping Path-Based Pronoun Resolution&#34;.Download this, untar/gzip it, and put it at  data/gender.data (default path the systemexpects it to be at).\n  For solving ILPs, our system relies on GLPK, specifically  GLPK for Java.For OS X, the easiest way to install GLPK is with  homebrew. On Linux,you should run  sudo apt-get install glpk-utils libglpk-dev libglpk-java.\n Both the libglpk-java and Java Native Interface (JNI) libraries need to be inyour Java library path (see below for how to test this); these libraries allowJava to interact with the native GLPK code. Additionally, when running thesystem, you must have  glpk-java-1.1.0.jar on the build path; this isincluded in the lib directory and bundled with the distributed jar, and willcontinue to be included automatically if you build with sbt.\n You can test whether the system can call GLPK successfully with with run-glpk-test.sh, which tries to solve a small ILP defined in edu.berkeley.nlp.summ.GLPKTest. The script attempts to augment thelibrary path with  /usr/local/lib/jni, which is sometimes where the JNIlibrary is located on OS X. If this script reports an error, you may need toaugment the Java library path with the location of either the JNI or thelibglpk_java libraries as follows:\n       You can also import it into Eclipse and use the Scala IDE plug-in for Eclipse http://scala-ide.org\n  The two most useful main classes are  edu.berkeley.nlp.summ.Main and edu.berkeley.nlp.summ.Summarizer. The former is a more involved harnessfor training and evaluating the system on the New York Times corpus (see belowfor how to acquire this corpus), and the latter simply takes a trained modeland runs it. Both files contain descriptions of their functionality and command-linearguments.\n An example run on new data is included in  run-summarizer.sh. The mainprerequisite for running the summarizer on new data is having that data preprocessedin the CoNLL format with constituency parses, NER, and coreference. For a system thatdoes this, see the  Berkeley Entity Resolution System.The  test/ directory already contains a few such files.\n The summarizer then does additional processing with EDU segmentation and discourse parsing.These use the models that are by default located in  models/edusegmenter.ser.gz and models/discoursedep.ser.gz. You can control these with command-line switches.\n  summarizer-full.ser.gz: an extractive-compressive summarizer with the ability to rewrite pronounsand additional coreference features and constraints\n   The primary corpus we use for training and evaluation is the New York Times Annotated Corpus(Sandhaus, 2007), LDC2008T19. We distribute our preprocessing as standoff annotations whichreplace words with (line, char start, char end) triples, except for some cases where words areincluded manually (e.g. when tokenization makes our data non-recoverable from the originalfile). A few scattered tokens are included explicitly, plus roughly 1% of files that oursystem couldn&#39;t find a suitable alignment for.\n To prepare the dataset, first you need to extract all the XML files from 2003-2007 and flattenthem into a single directory. Not all files have summaries, so not all of these willbe used. Next, run\n  This will take the train standoff annotation files and reconstitutethe real files using the XML data, writing to the output directory. Use  eval instead of  trainto reconstitute the test set.\n  java -Xmx3g -cp &lt;jarpath&gt; edu.berkeley.nlp.summ.preprocess.StandoffAnnotationHandler \\ -inputDir train_abstracts_standoff/ -rawXMLDir &lt;path_to_flattened_NYT_XMLs&gt; -outputDir train_abstracts/ \\ -tagName &#34;abstract&#34;\n   We bundle the system with a version of the ROUGE scorer that will be called duringexecution.  rouge-gillick.sh hardcodes command-line arguments used in this work andin Hirao et al. (2013)&#39;s work. The system expects this in the  rouge/ROUGE/ directoryunder the execution directory, along with the appropriate data files (which we&#39;ve alsobundled with this release).\n See  edu.berkeley.nlp.summ.RougeComputer.evaluateRougeNonTok for a method you canuse to evaluate ROUGE in a manner consistent with our evaluation.\n   java -Xmx80g -cp &lt;jarpath&gt; -Djava.library.path=&lt;library path&gt;:/usr/local/lib/jni edu.berkeley.nlp.summ.Main \\ -trainDocsPath &lt;path_to_train_conll_docs&gt; -trainAbstractsPath &lt;path_to_train_summaries&gt; \\ -evalDocsPath &lt;path_to_eval_conll_docs&gt; -evalAbstractsPath &lt;path_to_eval_summaries&gt; -abstractsAreConll \\ -modelPath &#34;models/trained-model.ser.gz&#34; -corefModelPath &#34;models/coref-onto.ser.gz&#34; \\ -printSummaries -printSummariesForTurk \\\n where  &lt;jarpath&gt;,  &lt;library path&gt;, and the data paths are instantiated accordingly. The system requires a lotof memory due to caching 25,000 training documents with annotations.\n       (Results are slightly different from those in the paper due to minor changes for thisrelease.)", "posttime": "2021-06-26 10:11:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6587\u4ef6,document", "title": "\u4f2f\u514b\u5229\u6587\u4ef6\u6458\u8981 - \u57fa\u4e8e\u5b66\u4e60\u7684\u5355\u4e00\u6587\u4ef6\u6458\u8981 ", "title_en": "Berkeley Document Summarizer \u2013 learning-based, single-document summarization", "transed": 1, "url": "https://github.com/gregdurrett/berkeley-doc-summarizer", "via": "", "real_tags": ["\u6587\u4ef6", "document"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068370, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5927\u6d41\u884c\u671f\u95f4\u793e\u4f1a\u89c4\u8303\u6025\u5267\u53d1\u751f\u53d8\u5316\u3002\u516d\u82f1\u5c3a\u7684\u758f\u8fdc\u548c\u9762\u7f69\u7a7f\u7740\u5728\u67d0\u4e9b\u793e\u533a\u4e2d\u7684\u4e8b\u5b9e\u4e0a\u7684\u89c4\u5219\uff0c\u800c\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u6234\u7740\u9762\u5177\u88ab\u89c6\u4e3a\u9a9a\u6270\u9080\u8bf7\u3002\u5728\u7687\u5bb6\u5b66\u4f1aB\u7684\u8bc9\u8bbc\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u4e86\u4e00\u9879\u65b0\u7814\u7a76\uff0c\u8981\u6c42\u4eba\u4eec\u5982\u4f55\u5b66\u4e60\u65b0\u7684\u793e\u4f1a\u89c4\u8303\u4ee5\u53ca\u8fd9\u4e9b\u89c4\u8303\u7684\u7075\u6d3b\u6027\u3002\u4f7f\u7528\u4e00\u7cfb\u5217\u7b80\u5355\u7684\u89c6\u9891\u6e38\u620f\uff0c\u4f5c\u8005Uri Hertz\u8868\u660e\uff0c\u4e00\u4e9b\u89c4\u8303\u6bd4\u5176\u4ed6\u89c4\u8303\u66f4\u5bb9\u6613\u53d8\u5316\u3002\u6700\u4e0d\u7075\u6d3b\u7684\u884c\u4e3a\u6a21\u5f0f\u8bc1\u660e\u662f\u90a3\u4e9b\u79ef\u6781\u4f24\u5bb3\u4ed6\u4eba\u7684\u884c\u4e3a\u6a21\u5f0f\u3002\n \u4e3a\u4e86\u7814\u7a76\u4eba\u4eec\u5982\u4f55\u5b66\u4e60\u7fa4\u4f53\u671f\u671b\uff0c\u8d6b\u5179\u662f\u6d77\u6cd5\u5927\u5b66\u7684\u8ba4\u77e5\u795e\u7ecf\u79d1\u5b66\u5bb6\uff0c\u4ee5\u8272\u5217\uff0c\u62db\u8058\u4e86276\u540d\u53c2\u4e0e\u8005\u6765\u6f14\u594f\u7b80\u5355\u7684\u89c6\u9891\u6e38\u620f\u3002\u73a9\u5bb6\u56f4\u7ed5\u6570\u5b57\u7f51\u683c\u6536\u96c6\u661f\u661f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6309\u4e0b\u6309\u94ae\u6765\u4e92\u76f8\u4e92\u52a8\u3002\u5728\u6bcf\u573a\u6bd4\u8d5b\u4e2d\uff0c\u4e00\u4e2a\u53c2\u4e0e\u8005\u4e0e\u5176\u4ed6\u51e0\u4e2a\u201c\u73a9\u5bb6\u201d\u4e00\u8d77\u64ad\u653e\uff0c\u5b9e\u9645\u4e0a\u662f\u9884\u7f16\u7a0b\u7684\u673a\u5668\u4eba\u3002\u6709\u56db\u79cd\u53ef\u80fd\u7684\u793e\u4f1a\u73af\u5883\u3002\u7b2c\u4e00\u4e2a\u73af\u5883\u662f\u79ef\u6781\u4f24\u5bb3\u7684\u6587\u5316\uff0c\u5176\u4e2d\u673a\u5668\u4eba\u7ecf\u5e38\u88ab\u6467\u6bc1\u5176\u4ed6\u73a9\u5bb6\u4ece\u6e38\u620f\u4e2d\u5f39\u51fa\u3002\u7b2c\u4e8c\u4e2a\u662f\u79ef\u6781\u5e2e\u52a9\u7684\u6587\u5316\uff0c\u5176\u4e2d\u70e7\u7126\u9891\u7e41\u4f46\u6709\u76ca\uff0c\u8d4b\u4e88\u4e86\u7206\u7834\u7684\u73a9\u5bb6\u5956\u52b1\u3002\u7b2c\u4e09\u4e2a\u548c\u7b2c\u56db\u4e2a\u73af\u5883\u662f\u88ab\u52a8\u7684\u793e\u4f1a\u6587\u5316\uff0c\u5176\u4e2d\u5206\u522b\u662f\u6709\u5bb3\u6216\u6709\u76ca\u7684\uff0c\u4f46\u673a\u5668\u4eba\u907f\u514d\u4e86\u5176\u4ed6\u73a9\u5bb6\u3002\u6bcf\u4e2a\u53c2\u4e0e\u8005\u90fd\u4f7f\u7528\u4e0d\u540c\u7684\u793e\u4f1a\u73af\u5883\u626e\u6f14\u4e86\u4e24\u6b21\u6e38\u620f\u7684\u8bd5\u9a8c\u3002\n  \u65e0\u8bba\u54ea\u4e2a\u73af\u5883\u73a9\u5bb6\u90fd\u5f00\u59cb\uff0c\u4ed6\u4eec\u5f88\u5bb9\u6613\u9002\u5e94\u7b2c\u4e00\u6b21\u5ba1\u5224\u4e2d\u7684\u793e\u4f1a\u89c4\u8303\u3002\u7136\u540e\u5728\u7b2c\u4e8c\u6b21\u8bd5\u9a8c\u4e2d\uff0c\u5927\u591a\u6570\u53c2\u4e0e\u8005\u8f7b\u677e\u5207\u6362\u5230\u65b0\u7684\u793e\u4f1a\u89c4\u8303\uff0c\u4f8b\u5982\u4ece\u6709\u76ca\u7684ZPPAPPAPT\u5230ZAP\u907f\u514d\u8f6c\u6362\u3002 \u201c\u4f46\u662f\u4e00\u4e2a\u884c\u4e3a\u5bf9\u8fd9\u79cd\u53d8\u5316\u6709\u6240\u9002\u5e94\uff0c\u201d\u8d6b\u5179\u8bf4\u3002\u5728\u7b2c\u4e00\u6b21\u8bd5\u9a8c\u4e2d\u7ecf\u5386\u4e86\u79ef\u6781\u6709\u5bb3\u7684\u9cc4\u5c40\u7684\u4eba\u901a\u8fc7\u8bd5\u9a8c\uff0c\u5373\u4f7f\u793e\u4f1a\u89c4\u8303\u8f6c\u6362\u4e3aZAP\u907f\u514d\uff0c\u4e5f\u4f1a\u901a\u8fc7\u8bd5\u9a8c\u8fdb\u884c\u5206\u6790\u3002\u5927\u6d41\u884c\u4e2d\u7684\u4e00\u4e2a\u7c7b\u6bd4\u53ef\u80fd\u662f\u4f69\u65af\u4f69\u65af\u4f69\u6234\u9762\u5177\u7684\u4eba\uff0c\u5357\u52a0\u5dde\u5927\u5b66\uff08USC\uff09\u7684\u5fc3\u7406\u5b66\u5bb6\u5728\u6d1b\u6749\u77f6\u7684\u5fc3\u7406\u5b66\u5bb6Los Hackel\u8bf4\uff0c\u4ed6\u4eec\u6ca1\u6709\u53c2\u4e0e\u8fd9\u9879\u65b0\u5de5\u4f5c\u3002\u5728\u9762\u5bf9\u9762\u58c1\u677f\u73b0\u5728\u662f\u5e38\u6001\u7684\u793e\u533a\u4e2d\uff0c\u4ed6\u8bf4\uff0c\u5728\u9006\u5411\u573a\u666f\u4e2d\uff0c\u53ef\u80fd\u66f4\u96be\u5b66\u4e60\u5bbd\u5bb9\uff0c\u5728\u5176\u4e2d\u6ca1\u6709\u4eba\u53d7\u5230\u5f71\u54cd\u3002\n \u201c\u95ee\u9898\u662f\u8fd9\u79cd\u6548\u679c\u7684\u4e0b\u9762\u662f\u4ec0\u4e48\uff0c\u201d\u8d6b\u5179\u8bf4\u3002\u5728\u89c6\u9891\u6e38\u620f\u8bd5\u9a8c\u4e4b\u540e\uff0cHertz\u5c06\u591a\u79cd\u8ba4\u77e5\u6a21\u578b\u5e94\u7528\u4e8e\u6570\u636e\u3002\u6700\u80fd\u591f\u9884\u6d4b\u53c2\u4e0e\u8005\u8868\u73b0\u7684\u6a21\u578b\u662f\u5176\u4e2d\u73a9\u5bb6\u5b66\u4f1a\u6bd4\u4e0d\u540c\uff08ZAP\u907f\u514d\uff09\u6bd4\u6a21\u4eff\u52a8\u4f5c\uff08Zap\uff09\u7684\u73a9\u5bb6\uff08Zap\u907f\u514d\uff09\uff0c\u5e76\u4e14\u5176\u4e2d\u9633\u6027\u884c\u4e3a\u88ab\u5f52\u56e0\u4e8e\u4e2a\u4eba\uff0c\u800c\u8d1f\u884c\u4e3a\u5f52\u56e0\u4e8e\u8be5\u7ec4\u3002\u4f8b\u5982\uff0c\u5982\u679c\u73a9\u5bb6\u770b\u5230\u4e00\u4e2a\u84dd\u8272\u673a\u5668\u4eba\u7ed9\u53e6\u4e00\u4e2a\u673a\u5668\u4eba\u63d0\u4f9b\u6709\u76ca\u7684Zap\uff0c\u90a3\u4e48\u7403\u5458\u53ef\u80fd\u4f1a\u62c5\u5fc3\u84dd\u8272\u673a\u5668\u4eba\u4f5c\u4e3a\u4e2a\u4f53\u7684\u4e1c\u897f\u3002\u4f46\u5982\u679c\u540c\u4e00\u7403\u5458\u770b\u5230\u4e86\u84dd\u8272\u673a\u5668\u4eba\u6709\u5bb3\u5730\u70e7\u65ad\u53e6\u4e00\u4e2a\u673a\u5668\u4eba\uff0c\u90a3\u4e48\u7403\u5458\u5c06\u6210\u4e3a\u6574\u4e2a\u7ec4\u7684\u654c\u5bf9\u3002 \u201c\u6d88\u6781\u7684\u4e8b\u60c5\u5f80\u5f80\u4f1a\u8ba9\u4f60\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u66f4\u52a0\u6000\u7591\uff0c\u201d\u8d6b\u5179\u8bf4\u3002\u5408\u5e76\uff0c\u65e2\u6709\u6d3b\u8dc3\u548c\u8d1f\u9762\u7684\u884c\u4e3a\u90fd\u662f\u53cc\u91cd\u504f\u89c1\u7684\uff0c\u56e0\u6b64\u8d8a\u6765\u8d8a\u96be\u4ee5\u514b\u670d\uff0c\u8fd9\u4e5f\u8bb8\u662f\u4e3a\u4ec0\u4e48\u6709\u5bb3\u7684\u70e7\u7126\u662f\u6700\u96be\u4ee5\u6539\u53d8\u7684\u884c\u4e3a\u3002\u5728\u7b2c\u4e00\u6b21\u8bd5\u9a8c\u4e2d\u770b\u5230\u6709\u5bb3\u70e7\u70e4\u7684\u7403\u5458\u53ef\u80fd\u4f1a\u5047\u8bbe\u751a\u81f3\u5728\u7b2c\u4e8c\u6b21\u8bd5\u9a8c\u4e2d\u7684\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u80fd\u53d8\u5f97\u654c\u5bf9\u3002\n USC\u7684Hackel\u8bf4\uff0c\u4e86\u89e3\u4eba\u4eec\u52aa\u529b\u6539\u53d8\u7684\u4f55\u65f6\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u52aa\u529b\u6539\u53d8\u662f\u4e00\u79cd\u7d27\u8feb\u7684\u95ee\u9898\uff0c\u8fd9\u9879\u7814\u7a76\u63ed\u793a\u4e86\u4e00\u4e9b\u5149\u7ebf\u3002\u7f57\u5fb7\u5c9b\u5e03\u6717\u5927\u5b66\u7684\u795e\u7ecf\u79d1\u5b66\u5bb6orielfeldmelmhall\u6307\u51fa\uff0c\u6559\u5b66\u65b0\u7684\u548c\u73b0\u5b9e\u7684\u793e\u4f1a\u89c4\u8303\u5f80\u5f80\u5728\u5b9e\u9a8c\u5ba4\u6311\u6218\uff0c\u56e0\u4e3a\u53d7\u8bd5\u8005\u4e0e\u73b0\u6709\u7684\u4fe1\u4ef0\u8fbe\u6210\u3002\u8fd9\u4e9b\u65b9\u6cd5\u662f\u201c\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u6700\u806a\u660e\u7684\u90e8\u5206\uff0c\u201d\u5979\u8bf4\uff0c\u56e0\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u4e86\u89e3\u51b3\u65b9\u6cd5\uff1a\u4e00\u79cd\u89c6\u9891\u6e38\u620f\uff0c\u4ee5\u6d4b\u8bd5\u4ece\u4efb\u4f55\u719f\u6089\u7684\u793e\u4ea4\u73af\u5883\u4e2d\u5220\u9664\u7684\u793e\u4ea4\u884c\u4e3a\u3002\n \u63a5\u4e0b\u6765\uff0cHertz\u5e0c\u671b\u4f7f\u7528\u673a\u5668\u4eba\u7684\u6d3e\u7cfb\u8fd0\u884c\u7c7b\u4f3c\u7684\u5b9e\u9a8c\u6765\u6d4b\u8bd5\u53c2\u4e0e\u8005\u5982\u4f55\u5b66\u4f1a\u8bc6\u522b\u7fa4\u4f53\u3002 \u201c\u60f3\u60f3\u9ad8\u4e2d\u3002 \u201c\u4ed6\u8bf4\uff0c\u6709\u5f88\u9177\u7684\u5bb6\u4f19\u548c\u4e66\u5446\u5b50\u3002\u6ca1\u6709\u4eba\u53d1\u51fa\u4eba\u6c14\u624b\u518c\uff0c\u4f46\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u793e\u4f1a\u79e9\u5e8f\u3002 \u201c\u6211\u4eec\u5bf9\u4eba\u4eec\u5982\u4f55\u63a8\u65ad\u8fd9\u4e9b\u5f52\u56e0\u7684\u4eba\u7684\u4e8b\u60c5\uff0c\u201d\u8d6b\u5179\u8bf4\u3002\u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4f3c\u4e4e\u5f88\u6e05\u695a\u7684\u662f\u201c\u79ef\u6781\u7684\u4e1c\u897f\u201d\u9a71\u52a8\u884c\u4e3a\u53d8\u9769\u3002 ", "note_en": "Social norms changed dramatically during the pandemic. Six-foot distancing and mask wearing became de facto rules in some communities, while elsewhere, wearing a mask was seen as an invitation for harassment. A new  study in  Proceedings of the Royal Society B asks how people learn new social norms and how flexible those norms can be. Using a series of simple video games, author Uri Hertz showed that some norms are easier to change than others. The least flexible behavioral patterns turned out to be those that actively harm others.\n To study how people learn group expectations, Hertz, a cognitive neuroscientist at the University of Haifa, Israel, recruited 276 participants to play a simple video game. Players moved around a digital grid collecting stars and could zap each other by pressing a button. In each game, a single participant played with several other \u201cplayers\u201d that were actually preprogrammed bots. There were four possible social environments. The first environment was a culture of active harm, in which the bots frequently zapped other players to eject them from the game. The second was a culture of active helping, in which zapping was frequent but beneficial, conferring a bonus on the zapped player.\u00a0The third and fourth environments were passive social cultures, where zapping was harmful or beneficial, respectively, but bots avoided zapping other players. Every participant played two trials of the game with different social environments.\n  No matter which environment players started out in, they readily adapted to match the social norms in their first trial. Then in the second trial, most participants easily switched to a new social norm, for instance transitioning from beneficial zapping to zap avoidance. \u201cBut one behavior was resilient to this change,\u201d Hertz says. People who experienced an actively harmful zapping environment in the first trial kept zapping through trial two, even when the social norm switched to zap avoidance. An analogy in the pandemic might be heckling people who wear masks, a kind of active harm, says Leor Hackel, a psychologist at the University of Southern California (USC) in Los Angeles, who was not involved in this new work. In communities where confronting mask wearers is now the norm, it might be harder to learn tolerance than in the reverse scenario, he says, in which nobody is heckled.\n \u201cThe question is what underlies this effect,\u201d Hertz says. After the video game trials, Hertz applied several cognitive models to the data. The model that best predicted how the participants behaved was one in which players learned to mimic actions (zapping) more easily than nonactions (zap avoidance), and in which positive behaviors were attributed to individuals while negative behaviors were attributed to the group. For instance, if a player saw a blue bot giving a beneficial zap to another bot, the player was likely to assume something nice about the blue bot as an individual. But if that same player saw the blue bot harmfully zapping another bot, then the player would become hostile to the whole group. \u201cNegative things tend to make you more suspicious towards everyone,\u201d Hertz says. Combined, behaviors that are both active and negative are doubly biased and thus harder to overcome, which is perhaps why harmful zapping was the hardest behavior to change. Players who had seen harmful zapping in the first trial might assume that even avoidant bots could become hostile at any moment in the second trial.\n Understanding when and why people struggle to change is a pressing question in psychology, on which this study sheds some light, USC\u2019s Hackel says. Neuroscientist Oriel FeldmanHall at Brown University in Rhode Island notes that teaching new and realistic social norms is often challenging in the lab because subjects arrive with existing beliefs. The methods are \u201cthe cleverest part of this experiment,\u201d she says, because they offer a workaround: a video game to test social behavior removed from any familiar social context.\n Next up, Hertz hopes to run similar experiments using cliques of bots to test how participants learn to recognize in-groups. \u201cThink about high school. There are the cool guys and the nerds,\u201d he says. Nobody hands out a popularity manual, yet everyone knows the social order. \u201cWe don\u2019t know a lot about how people infer these things that are group attributed,\u201d Hertz says. So far, what does seem clear is that \u201cbig active things\u201d drive behavioral change.", "posttime": "2021-06-26 10:11:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u884c\u4e3a,social,\u73a9\u5bb6", "title": "\u6709\u5bb3\u7684\u793e\u4f1a\u884c\u4e3a\u662f\u8f6c\u53d8\u6700\u8270\u96be\u7684 ", "title_en": "Harmful social behaviors are the toughest to shift", "transed": 1, "url": "http://blog.pnas.org/2021/06/harmful-social-behaviors-are-the-toughest-to-shift/", "via": "", "real_tags": ["\u884c\u4e3a", "social", "\u73a9\u5bb6"]}, {"category": "", "categoryclass": "", "imagename": "9d84cb2f2341706cd032e956e1a3c28d.jpg", "infoid": 1068369, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u4e00\u5929\u4e8e1820\u5e7410\u6708\uff0c\u4e24\u540d\u5e74\u8f7b\u7537\u5b50\uff0c\u4ee5\u5229\u4e9a\u00b7\u54c8\u59c6\u6797\u548c\u4ee5\u897f\u7ed3\u970d\u5c14\u59c6\u65af\u5f92\u6b65\u65c5\u884c\u5728\u7f05\u56e0\u7f05\u56e0\u7684\u5c71\u4e18\u4e0a\uff0c\u5f53\u4ed6\u4eec\u5728\u5730\u4e0a\u53d1\u73b0\u4e86\u4e00\u4e2a\u53d1\u5149\u7684\u7eff\u8272\u77f3\u5934\u3002\u4ed6\u4eec\u62ff\u8d77\u5b83\u5f00\u59cb\u5bfb\u627e\u522b\u4eba\uff0c\u4f46\u9ed1\u6697\u6b63\u5728\u4e0b\u964d\u3002\u7b2c\u4e8c\u5929\u5b83\u4e0b\u96ea\u4e86\u3002\n \u5f53\u4ed6\u4eec\u7ec8\u4e8e\u56de\u6765\u4e86\uff0c\u5728\u6625\u5929\uff0c\u4ed6\u4eec\u53d1\u73b0\u5c71\u4e18\u4e0a\u9762\u6709\u8fd9\u6837\u7684\u77f3\u5934\uff0c\u56e0\u4e3a\u88ab\u786e\u5b9a\u4e3a\u9640\u87ba\u7d20\uff0c\u8fd9\u662f\u4e00\u79cd\u7528\u4e8e\u5b83\u7684\u989c\u8272\u8303\u56f4\u7684\u7cbe\u795e\u521b\u4e1a\u54c1\u3002\u8bcd\u4f20\u64ad\u3002 1879\u5e74\uff0c\u4e00\u4f4d\u540d\u53eb\u4e54\u6cbb\u00b7\u6606\u5179\u7684\u7ec5\u58eb\u5730\u8d28\u5b66\u5bb6\u548c\u4eba\u6c11\u3002\u4ed6\u7ed9\u4e00\u4e2a\u540d\u53eb\u67e5\u7406\u8482\u8299\u5c3c\u7684\u5546\u4eba\u7ed9\u4e86\u4e00\u4e9b\u788e\u7247\uff0c\u4ed6\u5f53\u573a\u96c7\u4e86\u4ed6\u3002\u8482\u8299\u5c3c\u7684\u8463\u4e8b\u4f1a\u6210\u5458\u4e4b\u4e00\u662fJ.P. Morgan\uff0c\u94f6\u884c\u5bb6\u548c\u5f3a\u76d7Baron\uff0c\u4ed6\u4eec\u5f00\u59cb\u901a\u8fc7Kunz\u8d2d\u4e70Tourmaline\u548c\u5176\u4ed6\u73e0\u5b9d\u3002\u5728\u7f8e\u56fd\u81ea\u7136\u5386\u53f2\u535a\u7269\u9986\u4e2d\u7684\u5927\u90e8\u5206\u6536\u96c6\u3002\n \u6211\u719f\u6089\u6469\u6839\u7684\u7535\u6c14\u77f3\uff0c\u4ee5\u53ca\u90a3\u4e9b\u5f92\u6b65\u65c5\u884c\u8005\u53d1\u73b0\u7684\u539f\u59cb\u9640\u87ba\u7d20\uff08\u7a7f\u4e0a\u94ed\u523bPrimus\u8fd9\u4e2a\u8bcd\u6216\u201c\u7b2c\u4e00\u201d\uff09\uff0c\u6700\u8fd1\u8bbf\u95ee\u65b0\u91cd\u65b0\u5f00\u653e\u7684Allison\u548cGems roberto Mignone Hall\u548c\u77ff\u7269\u8d28\u3002\n  \u9664\u4e86\u9640\u87ba\u66f2\u7ebf\u5916\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u5728\u4ee4\u4eba\u773c\u82b1\u7f2d\u4e71\u7684\u6676\u4f53\u6536\u96c6\u65f6\uff0c\u6709\u4e9b\u50cf\u6811\u6869\u4e00\u6837\u5927\uff0c\u5176\u4ed6\u4eba\u8db3\u4ee5\u8ba9\u5965\u65af\u5361\u88ab\u63d0\u540d\u4eba\u5728\u7ea2\u5730\u6bef\u4e0a\u7684\u9886\u53e3\u3002\n \u77ff\u7269\u8d28\uff0c\u4f5c\u4e3a\u5899\u4e0a\u7684\u6807\u5fd7\uff0c\u6709\u52a9\u4e8e\u4e86\u89e3\u6211\uff0c\u662f\u6709\u5e8f\u7684\u539f\u5b50\u548c\u5206\u5b50\u7684\u5b89\u6392\u3002 \u201c\u5b87\u5b99\u4e2d\u7684\u5927\u591a\u6570\u56fa\u4f53\u7269\u8d28\u90fd\u662f\u77ff\u7269\u8d28\uff0c\u201d\u4e54\u6cbb\u54c8\u6d1b\uff0c\u5730\u8d28\u5b66\u5bb6\u548c\u957f\u671f\u7b56\u5c55\u4eba\u8bf4\uff0c\u8010\u5fc3\u5730\u5f15\u5bfc\u6211\uff0c\u4f3c\u4e4e\u80fd\u591f\u50cf\u6211\u8bfb\u65e9\u4e0a\u4e00\u6837\u8f7b\u677e\u5730\u9605\u8bfb\u5ca9\u77f3\u3002\n \u201c\u4eba\u4eec\u4e0d\u77e5\u9053\u51b0\u662f\u4e00\u79cd\u77ff\u7269\u8d28\uff0c\u201d\u4ed6\u6307\u51fa\u3002\u548c\u96ea\uff0c\u4ed6\u8865\u5145\u8bf4\uff0c\u662f\u4e00\u4e2a\u6c89\u79ef\u7269\u3002\n \u5730\u7403\u4e0a\u6709\u7ea65,000\u79cd\u77ff\u7269\u8d28\uff0c\u867d\u7136\u5b83\u4eec\u5f62\u6210\u4e86\u6211\u4eec\u6240\u5728\u4e16\u754c\u7684\u5185\u5bb9\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u6709\u4e00\u5929\u7684\u9065\u8fdc\u4e16\u754c\u53d1\u73b0\u66f4\u591a\u7684\u4e16\u754c\u3002 \n\u4ed6\u4eec\u544a\u8bc9\u53e4\u8001\u7684\u6545\u4e8b\uff1a\u5c71\u8109\u7684\u5927\u9646\u78b0\u649e\uff0c\u6d77\u6d0b\u76c6\u5730\u6298\u53e0\u548c\u6447\u6447\u6b32\u5760\u7684\u5c71\u8109\u8986\u76d6\u548c\u788e\u7247\uff0c\u4f69\u6234\u7684\u54c8\u7c73\u4f2f\u59c6\u65af\u4ece\u6c14\u4f53\u548c\u6db2\u4f53\u7e41\u6b96\u3002\u8fd9\u4e9b\u77ff\u7269\u4e2d\u7684\u4e00\u4e9b\u51e0\u4e4e\u548c\u65f6\u95f4\u672c\u8eab\u4e00\u6837\u53e4\u8001\u3002\u54c8\u6d1b\u535a\u58eb\u8bf4\uff0c\u5728\u661f\u5c18\u7206\u70b8\u4e2d\u53d1\u73b0\u7684\u7eb3\u7c73\u94bb\u77f3\u53ef\u4ee5\u5728\u8d85\u65b0\u52a0\u8fbe\u7206\u70b8\u4e2d\u5f62\u6210\uff0c\u53ea\u53d1\u751f\u4e86\u5927\u7206\u70b8\u540e\u51e0\u4ebf\u5e74\u3002\n  \u6211\u89c9\u5f97\u4e00\u4e2a\u719f\u6089\u7684\u5b87\u5b99\u6c1b\u56f4\u53ea\u662f\u8d70\u8fdb\u5927\u5385\u3002\u5728\u6211\u9762\u524d\uff0c\u4e5d\u82f1\u5c3a\u9ad8\uff0c\u5c45\u4f4f\u5728\u4e00\u4e2a\u5ca9\u58f3\u4e0a\uff0c\u5c31\u50cf\u4e00\u4e2a\u7531\u795e\u5f00\u653e\u7684\u9e21\u86cb\uff0c\u662f\u7d2b\u8272\u7d2b\u6c34\u6676\u7684\u5de2\uff0c\u94f6\u6cb3\u7cfb\u7684\u5149\u660e\u3002\n \u4e00\u5ea7\u5409\u4e3e\uff0c\u5b83\u5728\u4e4c\u62c9\u572d\u7ec4\u6210\u4e861.35\u4ebf\u5e74\u524d\u7684\u5c3f\u6db2\u77ff\u7269\u6d78\u5165\u5730\u4e0b\u5ba4\uff0c\u4e5f\u8bb8\u662f\u5ca9\u6d46\u4e2d\u7684\u6ce1\u6cab\uff0c\u7136\u540e\u5728\u5899\u58c1\u4e0a\u7ed3\u6676\u3002\u5728\u5b83\u80cc\u540e\u662f\u53e6\u4e00\u4e2aGeode\uff0c\u53e6\u4e00\u4e2a\u7d2b\u8272\u661f\u7cfb\uff0c\u9762\u5411\u4e3b\u8981\u5c55\u89c8\uff0c\u5177\u4f53\u8868\u73b0\u51fa\u771f\u5b9e\u4e16\u754c\u7684\u5b87\u5b99\u5982\u4f55\u51cf\u5c11\u5230\u4ec5\u4ec5\u662f\u5929\u4f53\u7269\u7406\u6570\u636e\u7684\u70b9\u6216\u66f4\u5c11 - \u5b9e\u9645\u4e0a\u662f\u6709\u6548\u7684\u3002\n \u6240\u6709\u77ff\u7269\u8d28\u90fd\u662f\u7531\u76f8\u540c\u7684\u57fa\u672c\u9762\u5f62\u6210\uff1a\u6c34\uff0c\u70ed\u91cf\u548c\u538b\u529b\u3002\u4f46\u50cf\u6258\u5c14\u65af\u6cf0\u7684\u4e0d\u5f00\u5fc3\u7684\u5bb6\u5ead\u4e00\u6837\uff0c\u6bcf\u4e2a\u5ca9\u77f3\u90fd\u6709\u81ea\u5df1\u7684\u6545\u4e8b\u3002\u5730\u58f3\u88ab\u95ef\u5165\u79f0\u4e3a\u6784\u9020\u677f\u5757\u7684\u52a8\u6001\u677f\uff0c\u4e92\u76f8\u7206\u70b8\u8fdb\u5165\u5c71\u8109\uff0c\u5408\u5e76\u4e3a\u521b\u9020\u5927\u9646\u5e76\u5206\u5f00\u5f62\u6210\u6d77\u6d0b\u3002\n \u5730\u8d28\u662f\u751f\u7269\u547d\u8fd0\uff1a\u65e0\u8bba\u77ff\u7269\u571f\u5730\u8fd8\u662f\u5b58\u653e\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u786e\u5b9a\u53ef\u4ee5\u5728\u6570\u767e\u4e07\u5e74\u5185\u8c0b\u751f\u7684\u4e1c\u897f\u3002\u9cdf\u9c7c\u504f\u7231\u8499\u5927\u62ff\u5dde\uff0c\u6211\u88ab\u6211\u7684\u82cd\u8747\u961f\u544a\u8bc9\u6211\uff0c\u56e0\u4e3a\u6d41\u8fc7\u77f3\u7070\u77f3\u7684\u6d41\uff0c\u4e3a\u6211\u4eec\u7684\u6de1\u6c34\u91c7\u77f3\u573a\u521b\u9020\u4e86\u540c\u4e49\u6761\u4ef6\u3002\n \u6570\u767e\u4e07\u5e74\u524d\uff0c\u5bc6\u897f\u897f\u6bd4\u5dde\u5c71\u8c37\u662f\u5185\u9646\u6d77\u3002\u7531\u4e8e\u5730\u8d28\u529b\u5411\u4e0a\u6324\u538b\u4e86\u6d77\u5e95\uff0c\u7528\u950c\u7b49\u77ff\u77f3\u5bcc\u542b\u950c\u548c\u94c5 - \u6e17\u900f\u5230\u5305\u62ec\u6d77\u5e95\u7684\u591a\u5b54\u78b3\u9178\u76d0\u5ca9\u77f3\uff0c\u7559\u4e0b\u6c89\u79ef\u7269\u548c\u9759\u8109\u3002 1894\u5e74\uff0c\u4e00\u4f4d\u540d\u53ebJames Roach\u7684\u77ff\u5de5\u95ef\u5165\u4e86Joplin\uff0cMo.\u5899\u58c1\uff0c\u5929\u82b1\u677f\u548c\u5730\u677f\u4e0b\u9762\u7684\u6d1e\u7a7480\u82f1\u5c3a\uff0c\u9576\u5d4c\u7740\u65b9\u89e3\u77f3\u6676\u4f53\uff0c\u4e00\u79cd\u78b3\u9178\u76d0\u3002\u4ed6\u548c\u4ed6\u7684\u5bb6\u4eba\u628a\u5b83\u53d8\u6210\u4e86\u4e00\u4e2a\u5730\u4e0b\u821e\u5385\u548c\u65c5\u6e38\u666f\u70b9\uff0c\u6c34\u6676\u6d1e\u7a74\u3002\u5730\u4e0b\u6c34\u572820\u4e16\u7eaa40\u5e74\u4ee3\u56de\u6536\u4e86\u5b83\u3002\n  \u5728\u535a\u7269\u9986\u5c55\u51fa\u7684\u6700\u4f73\u77f3\u5934\u4e4b\u4e00\u662f\u4e00\u4e2a\u56db\u82f1\u5c3a\u9ad8\u7684\uff0c7,756\u82f1\u9551\u7684\u7070\u7eff\u8272\u5ca9\u77f3\uff0c\u79f0\u4e3aBeryl\uff0c\u4ece\u4e2d\u6765\u5230\u7956\u6bcd\u7eff\u548c\u94cd\u3002 \n1930\u5e74\uff0c\u8fd9\u5757\u77f3\u5934\u5728\u7f05\u56e0\u5dde\u574e\u666e\u52d2\u65af\u91c7\u77f3\u573a\u662f\u4e00\u4e2a14\u82f1\u5c3a\u7684\u80bf\u5757\uff0c\u963b\u6b62\u4e86\u91c7\u77f3\u4e1a\u4e3b\u6e34\u671b\u8fc8\u5c14\u65af\u7684\u5e7f\u9614\u7684\u4e3b\u8981\u957f\u77f3\u76d6\u3002\u4ed6\u5728Kunz\u5148\u751f\u5230\u8fbe\u4e3a\u81ea\u7136\u5386\u53f2\u535a\u7269\u9986\u8d2d\u4e70\u5b83\u4e4b\u524d\u7684\u62a5\u4ef7\u524d\u4e00\u5929\u5439\u4e86\u5b83\u3002\u535a\u7269\u9986\u4e70\u4e86\u51e0\u5c81\u7684\u51e0\u4e2a\u788e\u7247\u3002\n \u6b63\u5982\u5b83\u6240\u53d1\u751f\u7684\u90a3\u6837\uff0cBeryl\u672c\u8eab\u5c31\u662f\u9502\u548c\u94cd\u7684\u6765\u6e90\uff0c\u8fd9\u662f\u4e00\u4e2a\u5728\u661f\u661f\u548c\u5b87\u5b99\u5c04\u7ebf\u78b0\u649e\u4e2d\u51fa\u751f\u7684\u8f7b\u8d28\u5143\u7d20\u3002 NASA\u5373\u5c06\u63a8\u51fa\u7684James Webb\u592a\u7a7a\u671b\u8fdc\u955c\u7684\u955c\u5b50\u7531\u94cd\u5236\u6210\u3002\n  \u5728\u6211\u4eec\u7684\u65c5\u884c\u4e2d\uff0cHarlow\u535a\u58eb\u5728\u53e6\u4e00\u4e2a\u6b4c\u5229\u4e9a\u5ca9\u77f3\u4e2d\u7aa5\u63a2\u4e86\u66f4\u591a\u7684\u5386\u53f2\uff0c\u8fd9\u662f\u6765\u81ea\u7ebd\u7ea6\u5dde\u4e4c\u65af\u7279\u5c71\u7684\u6208\u5c14\u5c71\u7684Amphibolite\u677f\u5757\u3002\u5728\u677f\u576f\u4e2d\u53ef\u89c1\u662f\u53e4\u4ee3\u5730\u7403\u5316\u5b66\u6545\u969c\u7ebf\uff0c\u6cbf\u7740\u5b83\u4eec\u805a\u96c6\uff0c\u4e00\u4e2a\u88c5\u9970\u7684\u88c5\u9970\uff0c\u7ebd\u7ea6\u5dde\u7684\u7ea2\u5b9d\u77f3\u5b98\u65b9\u5b9d\u77f3\u3002\u4ed6\u4eec\u8ffd\u8e2a\u53e4\u8001\u7684\u5899\u58c1\uff0c\u73b0\u5728\u5931\u53bb\u4e86\u65f6\u95f4\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6210\u957f\uff0c\u54c8\u6d1b\u535a\u58eb\u5728\u53e4\u8001\u7684\u5927\u707e\u5bb3\u4e66\u4e2d\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u53e5\u5b50\u3002\n \u6211\u5f98\u5f8a\u5728Gem Alcove\u7684\u5b9d\u77f3\u4e0a\uff0c\u5728\u7403\u7684\u949f\u58f0\u4e0a\u6f2b\u6b65\uff0c\u5176\u4e2d\u5305\u62ec\u5370\u5ea6\u7684\u660e\u661f\uff0c\u53e6\u4e00\u4e2a\u53d1\u73b0\u7531\u5927\u91cf\u7684Kunz\u5148\u751f\uff0c\u8fd9\u6b21\u4ee3\u8868J.P. Morgan\u3002\u6700\u540e\uff0c\u6211\u56de\u5230\u4e86\u4e00\u5bf9\u7d2b\u8272\u7684\u5c4b\u6a90\uff0c\u5b83\u5728\u5c55\u89c8\u5165\u53e3\u5904\u50cf\u661f\u5f62\u3002\n \u5509\uff0c\u4ed6\u4eec\u7684\u58ee\u4e3d\u4e0d\u662f\u6c38\u4e45\u6027\u7684\u3002\u7d2b\u6c34\u6676\u662f\u4e00\u79cd\u77f3\u82f1\u7684\u5f62\u5f0f\uff0c\u901a\u5e38\u662f\u9ec4\u8272\u6216\u7070\u8272\uff0c\u54c8\u6d1b\u535a\u58eb\u544a\u8bc9\u6211\u3002\u7d2b\u8272\u662f\u8f90\u5c04\u635f\u4f24\u7684\u7ed3\u679c\uff0c\u53ef\u80fd\u6765\u81ea\u6240\u5f62\u6210\u7684\u7d2b\u6c34\u6676\u7684\u5468\u56f4\u5ca9\u77f3\uff0c\u5e76\u4e14\u6700\u7ec8\u53ef\u80fd\u4f1a\u6062\u590d\u5230\u539f\u59cb\u989c\u8272\u3002\u751a\u81f3\u4e0d\u662f\u77f3\u5934\u90fd\u662f\u4e0d\u673d\u7684\u3002\n  \u5728\u6574\u4e2a\u5927\u5385\uff0c\u76f4\u63a5\u9762\u5bf9\u661f\u5f62\uff0c\u53c8\u540d\u4e86\u53e6\u4e00\u4e2a\u6b7b\u4ea1\u7684\u6697\u793a\uff1a\u6765\u81ea\u53e4\u8001\u7684\u7ea2\u6749\u7684\u77f3\u5316\u6728\u6750\u5e73\u677f\u3002\u535a\u7269\u9986\u5b98\u5458\u8ba1\u7b97\u4e86884\u4e2a\u6212\u6307\uff0c\u5e76\u5c06\u6811\u6728\u65e5\u671f\u4e3a3300\u4e07\u81f33500\u4e07\u5e74\u524d\u3002\u5728\u4e2d\u95f4\u65f6\u95f4\uff0c\u5316\u5b66\u5de5\u4f5c\u7684\u9b54\u672f\u548c\u7845\u9178\u76d0\u77ff\u7269\u8d28\u5728\u6728\u6750\u4e2d\u53d6\u4ee3\u4e86\u7ea4\u7ef4\u7d20\uff0c\u540c\u65f6\u5de9\u56fa\u4e86\u751f\u957f\u7684\u8bb0\u5f55\u3002\n Harlow\u535a\u58eb\u6307\u51fa\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u7684\u7ea2\u6728\u5e73\u677f\uff0c1891\u5e74\u51cf\u5c11\uff0c\u5728\u7f8e\u56fd\u68ee\u6797\u5927\u5385\u9644\u8fd1\u3002\u852c\u83dc\u548c\u77ff\u7269\u8d28\u4e4b\u95f4\u7684\u7ebf\u6761\u4e0d\u50cf\u4eba\u4eec\u60f3\u8c61\u7684\u90a3\u4e48\u4e25\u683c\uff0c\u4ed6\u6c89\u601d\u4e86\uff1a\u201c\u6ca1\u6709\u77ff\u7269\u8d28\u5c31\u6ca1\u6709\u751f\u547d\u3002\u751f\u6d3b\u5b66\u4f1a\u4e86\u5982\u4f55\u5236\u4f5c\u77ff\u7269\u8d28\uff0c\u7259\u9f7f\uff0c\u9aa8\u9abc\u548c\u8d1d\u58f3\u3002\u201c\u6700\u7ec8\uff0c\u751f\u6d3b\u4ee5\u5316\u77f3\u548c\u77f3\u5316\u6728\u6750\u7684\u5f62\u5f0f\u56de\u5f52\u77ff\u7269\u8d28\u3002 \n\u201c\u4eba\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u662f\u5206\u5f00\u7684\uff0c\u201dHarlow\u535a\u58eb\u8bf4\u3002 \u201c\u8fd9\u90fd\u662f\u6574\u4f53\u7684\u4e00\u90e8\u5206\u3002\u201d ", "note_en": "One day in October 1820 two young men, Elijah Hamlin and Ezekiel Holmes, were hiking on a hill in Maine called Mount Mica when they spotted a glowing, green stone on the ground. They picked it up and started to look for others, but darkness was falling. The next day it snowed.\n When they finally returned, in the spring, they found the hill littered with such stones, since identified as tourmaline, a semiprecious gem prized for its range of colors. Word spread. In 1879 a gentleman geologist and man-about-the-world named George Kunz visited. He gave some pieces to a businessman named Charles Tiffany, who hired him on the spot. One of Tiffany\u2019s board members was J.P. Morgan, the banker and robber baron, who started buying tourmaline and other jewels through Kunz. Much of that collection wound up in the American Museum of Natural History.\n I made the acquaintance of Morgan\u2019s tourmaline, along with the original tourmaline found by those hikers (fashioned into a watch fob inscribed with the word Primus, or \u201cfirst\u201d), on a recent visit to the newly reopened Allison and Roberto Mignone Hall of Gems and Minerals.\n  In addition to the tourmaline, I found myself gawking at a dazzling collection of crystals, some as big as tree stumps, others dainty enough to grace an Oscar nominee\u2019s neckline on the red carpet.\n Minerals, as a sign on the wall helpfully informed me, are orderly arrangements of atoms and molecules. \u201cMost of the solid matter in the universe is minerals,\u201d said George Harlow, a geologist and longtime curator, who patiently guided me around and seemed able to read rocks as easily as I read the morning newspaper.\n \u201cPeople don\u2019t know ice is a mineral,\u201d he noted. And snow, he added, is a sediment.\n There are some 5,000 types of mineral on Earth, and I know the names of hardly any of them, although they form the substance of the world we evolved upon and presumably the distant worlds on which we hope to one day discover more life.\n They tell ancient tales: of continents colliding, of mountain ranges rising and being worn down, of ocean basins folding and crumbling, of Hadean chambers breeding crystals from gas and fluids. Some of these minerals are almost as old as time itself. The nano-diamonds found in stardust could have formed in supernova explosions that occurred only a couple of hundred million years after the Big Bang, Dr. Harlow said.\n  I felt a familiar cosmic vibe just walking into the hall. There in front of me, nine feet tall and inhabiting a rocky shell, like an egg cracked open by the gods, was a nest of purple amethysts, a galaxy\u2019s worth of light.\n A geode, it formed 135 million years ago in Uruguay when water bearing minerals leached into an underground chamber, perhaps a bubble in the magma, and then crystallized on the walls. Behind it was another geode, another purple galaxy, facing into the main exhibit, a concrete manifestation of how the real-world universe \u2014 reduced to mere dots or less in astrophysical data \u2014 actually works.\n All minerals are formed by the same fundamentals: water, heat and pressure. But like Tolstoy\u2019s unhappy families, every rock has its own story. Earth\u2019s crust is broken into dynamic slabs called tectonic plates that bang into one another, buckle into mountain ranges, merge to create continents and separate to form seas.\n Geology is biological destiny: Whatever minerals land or are deposited in a place determine what or who can make a living there millions of years later. Trout favor Montana, I am told by my fly-fishing buddies, because the streams flowing through limestone create congenial conditions for our freshwater quarry.\n Millions of years ago, the Mississippi Valley was an inland sea. As geological forces squeezed the seafloor upward, water \u2014 enriched with ores like zinc and lead \u2014 seeped through the porous carbonate rocks that comprised the ocean floor, leaving deposits in pockets and veins. In 1894 a miner named James Roach broke into a cavern 80 feet beneath Joplin, Mo. The walls, ceiling and floor were lined with crystals of calcite, a form of carbonate. He and his family turned it into an underground dance hall and tourist attraction, Crystal Cave. Groundwater reclaimed it in the 1940s.\n  One of the mightiest of the stones on display at the museum is a four-foot-tall, 7,756-pound hunk of grayish-green rock called beryl, from which come emeralds as well as beryllium.\n In 1930 this stone was a 14-foot lump in the Bumpus Quarry in Maine, blocking access to a vast lode of prime feldspar that the quarry owner was eager to mine. He blew it up the day before Mr. Kunz arrived with an offer to buy it for the Natural History Museum. The museum bought a couple of fragments, which sat for many years.\n As it happens, beryl itself is valuable as a source of lithium and beryllium, a lightweight element born in stars and cosmic-ray collisions. The mirrors of NASA\u2019s upcoming James Webb Space Telescope are made of beryllium.\n  On our tour, Dr. Harlow spied more history in another goliath rock, a slab of amphibolite from Gore Mountain in upstate New York. Visible in the slab were ancient geochemical fault lines and, clustered along them, an arrangement of garnets, the ruby-color official gemstone of New York State. They traced the ancient wall, now lost to time, on which they had grown, and to Dr. Harlow offered more sentences in the book of ancient cataclysms.\n I wandered across to the gem alcove to marvel at the belles of the ball, among them the Star of India, another find by the resourceful Mr. Kunz, this time on behalf of J.P. Morgan. Finally I returned to the pair of purple geodes that stood like stargates at the exhibit entrance.\n Alas, their magnificence is not permanent. Amethyst, which is a form of quartz, is typically yellow or gray, Dr. Harlow informed me. The purple was a result of radiation damage, probably from the surrounding rocks in which the amethysts formed, and would most likely revert to its original color eventually. Not even stones are immortal.\n  Across the hall, directly facing the stargates, stood another intimation of mortality: a slab of petrified wood from an ancient sequoia. Museum officials have counted 884 rings and dated the tree to 33 million to 35 million years ago. In the intervening time, chemistry worked its magic and silicate minerals replaced the cellulose in the wood, while solidifying the record of growth.\n Dr. Harlow pointed out a similar-size slab of redwood, cut down in 1891, around a few corners in the Hall of American Forests. The line between vegetable and mineral is not as strict as one might think, he mused: \u201cWithout minerals there is no life. Life learned how to make minerals, in teeth, bones and shells.\u201d Eventually, life returns to minerals in the form of fossils and petrified wood.\n \u201cPeople think these are separate,\u201d Dr. Harlow said. \u201cIt\u2019s all part of a whole.\u201d", "posttime": "2021-06-26 10:11:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5730\u8d28,geology,\u77ff\u7269\u8d28", "title": "\u4e3a\u4ec0\u4e48\u5730\u8d28\u662f\u6211\u4eec\u7684\u547d\u8fd0 ", "title_en": "Why Geology Is Our Destiny", "transed": 1, "url": "https://www.nytimes.com/2021/06/22/science/natural-history-museum-gems-minerals.html", "via": "", "real_tags": ["\u5730\u8d28", "geology", "\u77ff\u7269\u8d28"]}, {"category": "", "categoryclass": "", "imagename": "2d7b5c4fa4b570461b7b213cbf32dc41.jpg", "infoid": 1068366, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e7\u91d1\u5c71\uff0c6\u670825\u65e5\uff08\u8def\u900f\u793e\uff09 - \u5fae\u8f6f\uff08Msft.o\uff09\u5468\u4e94\u8868\u793a\uff0c\u653b\u51fb\u8005\u8d62\u5f97\u4e86\u4e00\u4e2a\u5ba2\u6237\u670d\u52a1\u4ee3\u7406\u5546\u7684\u8bbf\u95ee\u6743\uff0c\u7136\u540e\u4ece\u4e2d\u4f7f\u7528\u4e86\u4ece\u4e2d\u4f7f\u7528\u7684\u4fe1\u606f\u6765\u542f\u52a8\u9ed1\u5ba2\u653b\u51fb\u5ba2\u6237\u7684\u5c1d\u8bd5\u3002\n \u8be5\u516c\u53f8\u8868\u793a\uff0c\u5b83\u5728\u7b54\u590d\u671f\u95f4\u53d1\u73b0\u4e86\u59a5\u534f\u7684\u56e2\u961f\uff0c\u5b83\u8bc6\u522b\u5728Solarwinds\uff08Swi.n\uff09\u548c\u5fae\u8f6f\u7684\u65e9\u671f\u91cd\u5927\u8fdd\u89c4\u8d1f\u8d23\u3002\n \u5fae\u8f6f\u8868\u793a\u5df2\u8b66\u544a\u53d7\u5f71\u54cd\u7684\u5ba2\u6237\u3002\u8def\u900f\u793e\u770b\u5230\u7684\u4e00\u4e2a\u8b66\u544a\u7684\u526f\u672c\u8868\u793a\uff0c\u653b\u51fb\u8005\u5c5e\u4e8eMicrosoft\u547c\u53ebNobelium\uff0c\u5b83\u5728\u4e0b\u534a\u5e74\u53ef\u4ee5\u8bbf\u95ee\u3002\n \uff06\uff0334;\u4e00\u4e2a\u590d\u6742\u7684\u56fd\u5bb6\u76f8\u5173\u7684\u6f14\u5458\uff0c\u5fae\u8f6f\u8bc6\u522bNobelium\u8bbf\u95ee\u7684Microsoft\u5ba2\u6237\u652f\u6301\u5de5\u5177\uff0c\u4ee5\u5ba1\u67e5\u6709\u5173\u60a8\u7684Microsoft\u670d\u52a1\u8ba2\u9605\u7684\u4fe1\u606f\uff0c\uff06\uff0334;\u8b66\u544a\u90e8\u5206\u8bfb\u53d6\u3002\u7f8e\u56fd\u653f\u5e9c\u516c\u5f00\u5f52\u56e0\u4e8e\u4fc4\u7f57\u65af\u653f\u5e9c\u7684\u65e9\u671f\u88ad\u51fb\uff0c\u5426\u8ba4\u53c2\u4e0e\u3002\n  \u5728\u8bc4\u8bba\u66f4\u5e7f\u6cdb\u7684\u7f51\u7edc\u9493\u9c7c\u6d3b\u52a8\u4e4b\u540e\uff0c\u5b83\u8bf4\u7f3a\u4e4f\u5c11\u6570\u5b9e\u4f53\uff0c\u5fae\u8f6f\u8868\u793a\uff0c\u5b83\u8fd8\u53d1\u73b0\u5b83\u8fdd\u53cd\u4e86\u81ea\u5df1\u7684\u4ee3\u7406\u4eba\uff0c\u5b83\u8868\u793a\u6709\u9650\u7684\u6743\u529b\u3002\n \u4ee3\u7406\u4eba\u53ef\u4ee5\u770b\u5230\u8d26\u5355\u8054\u7cfb\u4fe1\u606f\u4ee5\u53ca\u5ba2\u6237\u5728\u5176\u4ed6\u4e8b\u9879\u4e2d\u652f\u4ed8\u7684\u670d\u52a1\u3002\n \uff06\uff0334;\u6f14\u5458\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e86\u8fd9\u4e9b\u4fe1\u606f\uff0c\u4ee5\u63a8\u51fa\u9ad8\u5ea6\u6709\u9488\u5bf9\u6027\u7684\u653b\u51fb\uff0c\u4f5c\u4e3a\u5176\u66f4\u5e7f\u6cdb\u7684\u5e7f\u544a\u7cfb\u5217\uff0c\uff06\uff0334;\u5fae\u8f6f\u8bf4\u3002 \nMicrosoft\u8b66\u544a\u53d7\u5f71\u54cd\u7684\u5ba2\u6237\u8981\u5c0f\u5fc3\u4f20\u64ad\u5230\u4ed6\u4eec\u7684\u7ed3\u7b97\u8054\u7cfb\u4eba\uff0c\u5e76\u8003\u8651\u66f4\u6539\u8fd9\u4e9b\u7528\u6237\u540d\u548c\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u4ee5\u53ca\u7981\u6b62\u767b\u5f55\u7684\u65e7\u7528\u6237\u540d\u3002\n \u5fae\u8f6f\u8868\u793a\uff0c\u5b83\u610f\u8bc6\u5230\u4e09\u4e2a\u5728\u7f51\u7edc\u9493\u9c7c\u6d3b\u52a8\u4e2d\u53d7\u5230\u635f\u5bb3\u7684\u5b9e\u4f53\u3002\n \u5b83\u6ca1\u6709\u7acb\u5373\u6f84\u6e05\u662f\u5426\u5df2\u901a\u8fc7\u652f\u6301\u4ee3\u7406\u4eba\u67e5\u770b\u7684\u6570\u636e\u4e2d\u7684\u90a3\u4e9b\uff0c\u6216\u8005\u4ee3\u7406\u4eba\u88ab\u66f4\u5e7f\u6cdb\u7684\u6d3b\u52a8\u6b3a\u9a97\u3002\n \u5fae\u8f6f\u6ca1\u6709\u8bf4\u7ecf\u7eaa\u4eba\u662f\u5426\u5728\u627f\u5305\u5546\u6216\u76f4\u63a5\u96c7\u5458\u3002\n \u53d1\u8a00\u4eba\u8868\u793a\uff0c\u5a01\u80c1\u6f14\u5458\u7684\u6700\u65b0\u8fdd\u7ea6\u4e0d\u662fNobelium\uff06\uff0339;\u4e4b\u524d\u7684Microsoft\u4e0a\u6b21\u6210\u529f\u653b\u51fb\u7684\u4e00\u90e8\u5206\uff0c\u5176\u4e2d\u5b83\u83b7\u5f97\u4e86\u4e00\u4e9b\u6e90\u4ee3\u7801\u3002\n \u5728Solarwinds\u653b\u51fb\u4e2d\uff0c\u8be5\u96c6\u56e2\u5728\u8be5\u516c\u53f8\u6539\u53d8\u4e86\u8be5\u516c\u53f8\u7684\u4ee3\u7801\uff0c\u4ee5\u8bbf\u95eeSolarwinds\u5ba2\u6237\uff0c\u5305\u62ec\u4e5d\u4e2a\u7f8e\u56fd\u8054\u90a6\u673a\u6784\u3002\n \u6839\u636eHomeland Security\u90e8\u95e8\uff0c\u653b\u51fb\u8005\u8fd8\u5229\u7528\u4e86Microsoft\u8ba1\u5212\u7684\u65b9\u5f0f\u5229\u7528\u4e86\u5fae\u8f6f\u8ba1\u5212\u7684\u5f31\u70b9\u3002 \n\u5fae\u8f6f\u540e\u6765\u8868\u793a\uff0c\u8be5\u5c0f\u7ec4\u635f\u5bb3\u4e86\u81ea\u5df1\u7684\u5458\u5de5\u5e10\u6237\uff0c\u5e76\u91c7\u53d6\u4e86\u7ba1\u7406Microsoft\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u7684\u8f6f\u4ef6\u6307\u4ee4\u3002 ", "note_en": "SAN FRANCISCO, June 25 (Reuters) - Microsoft  (MSFT.O) said on Friday an attacker had won access to one of its customer-service agents and then used information from that to launch hacking attempts against customers.\n The company said it had found the compromise during its response to hacks by a team it identifies as responsible for earlier major breaches at SolarWinds  (SWI.N) and Microsoft.\n Microsoft said it had warned the affected customers. A copy of one warning seen by Reuters said that the attacker belonged to the group Microsoft calls Nobelium and that it had access during the second half of May.\n &#34;A sophisticated Nation-State associated actor that Microsoft identifies as NOBELLIUM accessed Microsoft customer support tools to review information regarding your Microsoft Services subscriptions,&#34; the warning reads in part. The U.S. government has publicly attributed the earlier attacks to the Russian government, which denies involvement.\n  After commenting on a broader phishing campaign that it said had compromised a small number of entities, Microsoft said it had also found the breach of its own agent, who it said had limited powers.\n The agent could see billing contact information and what services the customers pay for, among other things.\n &#34;The actor used this information in some cases to launch highly-targeted attacks as part of their broader campaign,&#34; Microsoft said.\n Microsoft warned affected customers to be careful about communications to their billing contacts and consider changing those usernames and email addresses, as well as barring old usernames from logging in.\n Microsoft said it was aware of three entities that had been compromised in the phishing campaign.\n It did not immediately clarify whether any had been among those whose data was viewed through the support agent, or if the agent had been tricked by the broader campaign.\n Microsoft did not say whether the agent was at a contractor or a direct employee.\n A spokesman said the latest breach by the threat actor was not part of Nobelium&#39;s previous successful attack on Microsoft, in which it obtained some source code.\n In the SolarWinds attack, the group altered code at that company to access SolarWinds customers, including nine U.S. federal agencies.\n At the SolarWinds customers and others, the attackers also took advantage of weaknesses in the way Microsoft programs were configured, according to the Department of Homeland Security.\n Microsoft later said that the group had compromised its own employee accounts and taken software instructions governing how Microsoft verifies user identities.", "posttime": "2021-06-26 09:28:13", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u9ed1\u5ba2,\u5fae\u8f6f,microsoft,\u653b\u51fb\u8005,finds", "title": "\u5fae\u8f6f\u53d1\u73b0\u653b\u51fb\u8005\u8d62\u5f97\u4e86\u4e00\u4e2a\u5ba2\u6237\u670d\u52a1\u4ee3\u7406\u5546\uff0c\u5e76\u5728\u7591\u4f3c\u7684Solarwinds\u9ed1\u5ba2\u63a2\u7d22\u4e2d\u5411\u5ba2\u6237\u63a8\u51fa\u653b\u51fb ", "title_en": "Microsoft finds an attacker won access to one of its customer service agents and launched attacks against customers in a probe of suspected SolarWinds hackers", "transed": 1, "url": "https://www.reuters.com/technology/microsoft-says-new-breach-discovered-probe-suspected-solarwinds-hackers-2021-06-25/", "via": "", "real_tags": ["\u9ed1\u5ba2", "\u5fae\u8f6f", "microsoft", "\u653b\u51fb\u8005", "finds"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068365, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Gloss3D\u662f\u4e00\u4e2a\u5f00\u6e903D\u5efa\u6a21\u5668\u5de5\u5177\uff0c\u5177\u6709\u4e00\u4e9b\u7eb9\u7406\uff0c\u52a8\u753b\u548cLinux\u548cWindows\u7684\u6e32\u67d3\u80fd\u529b\u3002 \u751a\u81f3\u66f4\u597d\uff0c\u5b83\u662f\u514d\u8d39\u7684\uff01  \u591a\u7ebf\u7a0b\u7684\u96f7\u9053\u5177\u4e0e\u8fd0\u52a8\u6a21\u7cca\uff0c\u96fe\uff0c\u7ebf\u6846\u6e32\u67d3\u548c\u5176\u4ed6\u4e00\u4e9b\u4e1c\u897f\u3002 \u8fd9\u4ecd\u7136\u6b63\u5728\u5f00\u53d1\u548c\u9519\u8fc7\u8bb8\u591a\u529f\u80fd\uff0c\u4f46\u4ecd\u7136\u5448\u73b0\uff01 ", "note_en": "Gloss3D is an open-source 3D modeler tool with some texturing, animation and rendering capacities for both Linux and Windows. Even better, it\u2019s free !\n              Multithreaded Raytracer with motion blur, fog, wireframe rendering and a few other things. This is still under development and misses many features, but still renders !", "posttime": "2021-06-26 09:27:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "windows,\u5f00\u6e90,linux,\u7528\u4e8e,open", "title": "Gloss3D  - \u7528\u4e8eLinux\u548cWindows\u7684\u5f00\u6e903D\u5efa\u6a21\u5668 ", "title_en": "Gloss3D \u2013 an open source 3D Modeler for Linux and Windows", "transed": 1, "url": "http://www.gloss3d.net/", "via": "", "real_tags": ["windows", "\u5f00\u6e90", "linux", "\u7528\u4e8e", "open"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068364, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u7cfb\u5217\u5173\u4e8e\u6211\u7684\u73a9\u5177\u6e32\u67d3\u5668\u7684\u7b2c1\u90e8\u5206\u6db5\u76d6\u4e86\u6700\u57fa\u672c\u7684\u8bbe\u8ba1\u51b3\u7b56\u3002\u591a\u5e74\u6765\uff0c\u6211\u5df2\u7ecf\u5199\u4e86\u8bb8\u591a\u6e32\u67d3\u8005\uff0c\u5e76\u4e14\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u4ed6\u4eec\u7684\u590d\u6742\u6027\u4e00\u76f4\u5728\u589e\u957f\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u91c7\u53d6\u4e86\u76f8\u53cd\u7684\u8def\u7ebf\u3002\u6211\u60f3\u6700\u5927\u5316\u5b9e\u73b0\u81f3\u5173\u91cd\u8981\u529f\u80fd\u7684\u4ee3\u7801\u7684\u5206\u6570\uff0c\u800c\u4e0d\u662f\u6d6a\u8d39\u6211\u5728\u878d\u5408\u7684\u57fa\u7840\u67b6\u6784\u4e0a\u7684\u65f6\u95f4\u3002\u6211\u7f16\u5199\u7684\u4ee3\u7801\uff08\u4e0d\u5305\u62ec\u7740\u8272\u5668\uff09\u5728345 kB\u65f6\u67097575\u884c\u3002\u4e0d\u5b8c\u5168\u662f4K\u4ecb\u7ecd\uff0c\u4f46\u6bd4\u4ee5\u524d\u4f7f\u7528\u7684\u4efb\u4f55\u5176\u4ed6\u5b9e\u65f6\u6e32\u67d3\u5668\u5c0f\u5f97\u591a\u3002\u5b83\u9700\u8981\u52a0\u5229\u798f\u3002\u4e00\u4e2a\u79d2\u6765\u7f16\u8bd1\u548c\u94fe\u63a5\u548c\u542f\u52a8\u4e5f\u5f88\u5feb\u3002\n \u6211\u60f3\u6f84\u6e05\u4e00\u4ef6\u4e8b\uff1a\u6211\u5021\u5bfc\u8fd9\u91cc\u7684\u8bbe\u8ba1\u51b3\u5b9a\u662f\u9488\u5bf9\u7531\u4e00\u4e2a\u4eba\u5f00\u53d1\u7684\u7814\u7a76\u6e32\u67d3\u5668\u5236\u4f5c\u7684\u3002\u6211\u5e76\u6ca1\u6709\u4e89\u8fa9\u8bf4\uff0c\u540c\u6837\u7684\u8bbe\u8ba1\u5e94\u8be5\u53d7\u5230\u5927\u578b\u5546\u4e1a\u9879\u76ee\u7684\u9752\u7750\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u4e3a\u5927\u578b\u5546\u4e1a\u4ea7\u54c1\u5f00\u53d1\u65b0\u6280\u672f\uff0c\u5219\u53ef\u80fd\u6700\u597d\u6709\u4e00\u4e2a\u5c0f\u578b\u6d4b\u8bd5\u7528\u5e8a\uff0c\u4f8b\u5982\u6211\u5728\u8fd9\u91cc\u63cf\u8ff0\u7684\u90a3\u4e2a\u3002\u548c\u4e00\u4e9b\u60f3\u6cd5\uff0c\u4f8b\u5982\uff0c\u6211\u52a0\u8f7d\u573a\u666f\u7684\u65b9\u5f0f\u53ef\u80fd\u4f1a\u9f13\u821e\u4eba\u529b\u66f4\u5927\u7684\u9879\u76ee\u3002\n  \u957f\u671f\u6c47\u7f16\u65f6\u95f4\u662f\u5bf9\u751f\u4ea7\u529b\u7684\u5de8\u5927\u635f\u5bb3\u3002\u7f16\u8bd1\u548c\u94fe\u63a5\u5177\u6709\u5927\u91cf\u4f9d\u8d56\u6027\u7684\u5927C ++\u9879\u76ee\uff0c\u6709\u4e9b\u6a21\u677f\u9b54\u6cd5\u53ef\u4ee5\u8f7b\u677e\u82b1\u8d39\u51e0\u5206\u949f\u3002\u6211\u66fe\u7ecf\u6709\u4e00\u4e2aC ++\u9879\u76ee\uff0c\u53ea\u6709300\u884c\u4ee3\u7801\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u8fd8\u5177\u6709\u6807\u9898\uff0c\u4ee5\u6807\u9898\u4e3a\u4e2d\u5fc3\u7684\u5e93eIgen\u4f5c\u4e3a\u4f9d\u8d56\u6027\uff0c\u56e0\u6b64\u7f16\u8bd1\u65f6\u7acb\u5373\u5347\u81f3\u534a\u5206\u949f\uff08\u5bf9\u4e8e\u5355\u4e2a* .cpp\u6587\u4ef6\uff09\u3002\n \u8fd9\u5bf9\u7f16\u7a0b\u5de5\u4f5c\u6d41\u7a0b\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u5f53\u60a8\u5b9e\u73b0\u4e00\u5927\u5757\u65b0\u529f\u80fd\u65f6\uff0c\u7531\u4e8e\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u60a8\u53ef\u4ee5\u5ffd\u7565\u6d4b\u8bd5\u5b83\u7684\u5c0f\u4f4d\u3002\u4e00\u65e6\u5b8c\u6210\uff0c\u60a8\u5c06\u7f16\u8bd1\u3002\u4e5f\u8bb8\u5728\u6c47\u7f16\u4e2d\u95f4\u7684\u67d0\u4e9b\u65f6\u5019\uff0c\u4f60\u5c06\u629b\u51fa\u9519\u8bef\u3002\u4e00\u65e6\u4fee\u590d\uff0c\u60a8\u518d\u6b21\u7f16\u8bd1\uff0c\u53ef\u80fd\u4f1a\u8fbe\u5230\u9047\u5230\u8fd0\u884c\u65f6\u9519\u8bef\u7684\u70b9\u3002\u4e5f\u8bb8\u4f60\u5fc5\u987b\u7f16\u8bd1\u4e00\u4e2a\u8c03\u8bd5\u7248\u672c\u4ee5\u4e86\u89e3\u90a3\u4e9b\u3002\u5728\u53e6\u4e00\u4e2a\u4e4b\u540e\uff0c\u4f60\u6324\u4e0a\u4e86\u4e00\u4e2a\u7410\u788e\u7684\u9519\u8bef\uff0c\u6700\u7ec8\u5c31\u4f1a\u5de5\u4f5c\u3002\u5982\u679c\u60a8\u5728\u8be5\u8fc7\u7a0b\u4e2d\u7f16\u8bd1\u5e76\u94fe\u63a5\u4e86\u5341\u6b21\uff0c\u5e76\u4e14\u5e73\u5747\u82b1\u4e86\u4e00\u5206\u949f\uff0c\u5219\u6d6a\u8d39\u4e86\u5341\u5206\u949f\u7684\u7b49\u5f85\u60a8\u7684\u7f16\u8bd1\u5668\u3002\n \u6211\u575a\u4fe1\u8fd9\u6b21\u603b\u662f\u6d6a\u8d39\u3002\u65f6\u95f4\u6846\u67b6\u5f88\u77ed\uff0c\u4ee5\u81f3\u4e8e\u5b83\u4e0d\u662f\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u4efb\u52a1\u7684Wortwhile\u3002\u4eba\u4eec\u57f9\u517b\u4e86\u4e0d\u540c\u7684\u95f2\u6687\u4e60\u60ef\uff0c\u4f8b\u5982\u7ecf\u5e38\u68c0\u67e5\u65b0\u95fb\u9053\u8def\u3002\u5728\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u5728\u7f16\u8bd1\u5b8c\u6210\u5e76\u4e22\u5931\u66f4\u591a\u65f6\u95f4\u65f6\uff0c\u60a8\u4e0d\u4f1a\u6ce8\u610f\u5230\u3002\n  \u5f53\u7136\uff0c\u4eba\u4eec\u4e86\u89e3\u8fd9\u4e2a\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6848\u6709\u5f88\u591a\u5c1d\u8bd5\u3002\u867d\u7136\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u4f7f\u7f16\u7a0b\u66f4\u53d7\u9650\u5236\u548c\u7a0b\u5e8f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u66f4\u52a0\u590d\u6742\u3002\u4f8b\u5982\uff0c\u5b58\u5728pimpl\u6210\u8bed\uff0c\u4f46\u6dfb\u52a0\u4e86\u6837\u677f\u4ee3\u7801\uff0c\u4f7f\u4ee3\u7801\u66f4\u6e05\u6670\uff0c\u53ea\u7f29\u77ed\u4e86\u67d0\u4e9b\u7c7b\u578b\u7684\u66f4\u6539\u7684\u7f16\u8bd1\u65f6\u95f4\u3002\u6a21\u5757\u662f\u6539\u5584\u7f16\u8bd1\u65f6\u7684\u53e6\u4e00\u79cd\u5c1d\u8bd5\uff0c\u4f46\u6536\u76ca\u4f3c\u4e4e\u662f\u4e2d\u7b49\u7684\u3002\u60a8\u53ef\u4ee5\u5728\u95ee\u9898\u4e0a\u629b\u51fa\u786c\u4ef6\uff0c\u4f46\u662f\u7f16\u8bd1\u548c\u94fe\u63a5\u5e76\u884c\u5316\u7684\u53ef\u80fd\u6027\u662f\u6709\u9650\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u8ba9\u60a8\u6240\u6709\u7684\u5730\u65b9\u3002\n  \u51cf\u534a\u7f16\u8bd1\u65f6\u95f4\u5f88\u597d\uff0c\u4f46\u5c06\u5b83\u4eec\u51cf\u5c11\u5230\u7b2c\u4e8c\u4e2a\u662f\u66f4\u597d\u7684\u3002\u53ea\u60f3\u5230\u4f60\u6ca1\u6709\u7b49\u5f85\u7f16\u8bd1\u5668\u7684\u67d0\u4e9b\u60c5\u51b5\u3002\u70ed\u63d2\u62d4\u7740\u8272\u5668\uff0c\u4f8b\u5982\uff0c\u5728shadertoy\uff0c\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u8fd9\u79cd\u73af\u5883\u9f13\u52b1\u5b9e\u9a8c\u548c\u6d4b\u8bd5\uff0c\u63d0\u9ad8\u751f\u4ea7\u7387\u5e76\u6d88\u9664\u5f88\u591a\u632b\u6298\uff0c\u7279\u522b\u662f\u5728\u8c03\u8bd5\u671f\u95f4\u3002 Printf\u8c03\u8bd5\u5728\u5177\u6709\u957f\u7f16\u8bd1\u65f6\u7684\u8bbe\u7f6e\u4e2d\uff0c\u5982\u679c\u7f16\u8bd1\u548c\u542f\u52a8\u5feb\u901f\uff0c\u5219\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u3002 python\u4e0escipy stact\u662f\u53e6\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u5f53\u7136Python\u6bd4C ++\u6267\u884c\u66f4\u6162\uff0c\u4f46\u5927\u591a\u6570\u65f6\u5019\u6211\u7684Python\u811a\u672c\u5728\u7c7b\u4f3c\u7684C ++\u7a0b\u5e8f\u4e4b\u524d\u8fd0\u884c\u5c31\u4f1a\u5b8c\u6210\u7f16\u8bd1\u3002 \n\u53d7\u5230\u8fd9\u79cd\u7ecf\u9a8c\u7684\u542f\u53d1\uff0c\u53d1\u52a8\u673a\u5f00\u53d1\u4eba\u5458\u6709\u65f6\u4f1a\u8bd5\u56fe\u8ba9\u60a8\u5c3d\u53ef\u80fd\u591a\u5730\u5b8c\u6210\uff0c\u800c\u65e0\u9700\u91cd\u65b0\u7f16\u8bd1\u3002\u70ed\u957f\u7740\u8272\u5668\u91cd\u65b0\u52a0\u8f7d\u662f\u4e00\u4e2a\u79ef\u6781\u7684\u4f8b\u5b50\u3002\u8282\u70b9\u56fe\uff0c\u63d2\u4ef6\u7cfb\u7edf\u6216\u5355\u72ec\u811a\u672c\u8bed\u8a00\u7684\u96c6\u6210\u6709\u70b9\u53ef\u7591\u3002\u5b83\u4eec\u53ef\u80fd\u662f\u975e\u5e38\u5f3a\u5927\u7684\uff0c\u4f46\u52aa\u529b\u8ba9\u4ed6\u4eec\u4e0e\u53d1\u52a8\u673a\u7684\u6240\u6709\u90e8\u5206\u4ea4\u4e92\u662f\u5927\u91cf\u7684\u3002\u6e90\u4ee3\u7801\u662f\u4e00\u79cd\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5f3a\u5927\u548c\u5bcc\u6709\u8868\u73b0\u529b\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u5404\u79cd\u4efb\u52a1\u3002\u5982\u679c\u60a8\u4e3a\u76f8\u540c\u76ee\u7684\u6295\u5165\u4e86\u5f88\u591a\u52aa\u529b\uff0c\u8fd9\u5bf9\u4e8e\u76f8\u540c\u7684\u76ee\u7684\u4e5f\u53ef\u80fd\u4e0d\u90a3\u4e48\u65b9\u4fbf\uff0c\u56e0\u6b64\u7531\u4e8e\u7f16\u8bd1\u65f6\uff0c\u60a8\u6b63\u5728\u8df3\u8fc7\u7b8d\u3002\n   \u6211\u4e00\u76f4\u5728\u4f7f\u7528C ++\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u4e00\u5e74\u5de6\u53f3\uff0c\u6211\u5df2\u7ecf\u70ed\u8877\u4e8e\u6b64\u3002\u6211\u6df1\u5165\u8fdb\u5165\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0c\u6a21\u677f\u9b54\u6cd5\uff0cSTL\u548c\u63d0\u5347\u7684\u5154\u5b54\u3002\u6211\u4e60\u60ef\u4e86\u957f\u671f\u7f16\u8bd1\u65f6\u6bb5\u548c\u6837\u677f\u4ee3\u7801\u3002\u7136\u540e\u4e09\u4e2a\u7ecf\u5386\u9010\u6e10\u9707\u64bc\u4e86\u6211\u7684\u4fe1\u4ef0\u8fdb\u5165C ++\uff1a\u70ed\u7740\u7740\u8272\u5668\u91cd\u65b0\u52a0\u8f7d\uff0cPython\u548cCorona\uff08\u4e0d\u662f\u4f60\u6240\u60f3\u5230\u7684\u90a3\u4e2a\uff09\u3002\u6b64\u65f6\u524d\u4e24\u4e2a\u5e94\u8be5\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\u5bf9\u60a8\u7684\u4ee3\u7801\u8fdb\u884c\u66f4\u6539\uff0c\u5e76\u67e5\u770b\u7ed3\u679c\u540e\u7a0d\u540e\u91ca\u653e\u3002\u6b64\u5916\uff0cPython\u6bd4C ++\u66f4\u7cbe\u7b80\u3002\u4f5c\u4e3a\u793a\u4f8b\uff0c\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u5206\u522b\u4eceNUMPY\u548cEIGEN\u4e2d\u76844\u00d74\u77e9\u9635\u4e2d\u63d0\u53d63\u4e2a\u9876\u90e8\u884c\u3002\n   \u7136\u540e\u6211\u505a\u4e86\u4e00\u4e9b\u79bb\u7ebf\u6e32\u67d3\uff0c\u6211\u4f7f\u7528\u4e86\u7531\u6211\u7684\u540c\u4e8bJohannes Schudeiss\u5f00\u53d1\u7684\u7814\u7a76\u6e32\u67d3\u5668Corona\uff08\u6e32\u67d3\u5668\u7684\u540d\u5b57\u5728\u5927\u6d41\u884c\u524d\u5df2\u7ecf\u5c34\u5c2c\uff0c\u8003\u8651\u5230\u6709\u4e00\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u5546\u4e1a\u6e32\u67d3\u5668\uff09\u3002\u8fd9\u5c31\u662f\u6211\u5982\u4f55\u6b23\u8d4fC. Corona\u7684\u4f18\u96c5\u662f\u4e00\u4e2a\u9002\u5ea6\u7684\u5927\u9879\u76ee\uff0c\u4f46\u5b83\u5728\u4e24\u79d2\u949f\u5185\u6c47\u7f16\u3002\u5e76\u4e14\u4ee3\u7801\u5e93\u5177\u6709\u4ee4\u4eba\u6109\u5feb\u7684\u5c0f\u7535\u5e93\u677f\u4ee3\u7801\u3002\u5176\u4e2dC ++\u5728\u76f8\u540c\u7684\u6982\u5ff5\u4e0a\u7565\u6709\u4e0d\u540c\uff08\u4f8b\u5982\uff0cunique_ptr\uff0cshared_ptr\u548c\u539f\u59cb\u6307\u9488\uff09\uff0cC\u4e3a\u60a8\u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\uff0c\u5e76\u4e14\u90a3\u4e2a\u5177\u6709\u65b9\u4fbf\u7684\u5149\u8c31\u7b26\u53f7\uff08\u5982float *\uff09\u3002\u5185\u5b58\u7684\u5757\u662f\u4e00\u79cd\u666e\u904d\u548c\u81ea\u7136\u7684\u62bd\u8c61\uff0c\u5373C\u63a5\u53e3\u53ef\u4ee5\u7075\u6d3b\uff0c\u957f\u5bff\u547d\uff08STB\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff09\u3002\n \u575a\u6301\u77e9\u9635\u6570\u5b66\u7684\u4f8b\u5b50\uff0c\u5b83\u4ee4\u4eba\u56f0\u60d1C\u4ee3\u7801\u901a\u5e38\u6bd4C ++\u4ee3\u7801\u66f4\u7d27\u51d1\u4e14\u53ef\u8bfb\u3002\u77e9\u9635\u58f0\u660e\u5c06\u662fFloat Matrix [4] [4];\u5e38\u7eff\u77e9\u9635\u548c\u56db\u5143\u6570\u5e38\u89c1\u95ee\u9898\u6709\u8bb8\u591a\u5f88\u597d\u7684\u793a\u4f8b\uff0c\u5982\u4f55\u5728C ++\u4e2d\u91c7\u7528\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u60a8\u5e76\u4e0d\u771f\u6b63\u4f7f\u7528C ++\u3002\u6765\u81ea\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u7b80\u5355\uff1a\n  \u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u4f7f\u65b9\u6cd5\u548c\u5168\u5c40\u51fd\u6570\u6210\u4e3a\u65b9\u6cd5\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u5df2\u7ecf\u4ee5\u7b80\u5355\u7684\u539f\u56e0\u66f4\u559c\u6b22\u8fd9\u4e2a\u8bbe\u8ba1\uff1a\u5f53\u4e00\u4e2a\u51fd\u6570\u4e0e\u591a\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u76f8\u4e92\u4f5c\u7528\u65f6\uff0c\u5b83\u901a\u5e38\u4f1a\u5728\u60a8\u653e\u7f6e\u7684\u5730\u65b9\u7a0d\u5fae\u4efb\u610f\u3002\u5b83\u53ef\u80fd\u662f\u4efb\u4f55\u4e00\u4e2a\u8bfe\u7a0b\u6216\u5168\u7403\u7684\u6210\u5458\u3002\u5982\u679c\u5168\u5c40\u662f\u9ed8\u8ba4\u503c\uff0c\u5219\u4e0d\u9700\u8981\u731c\u6d4b\u3002\u6211\u7684\u7ed3\u6784\u5177\u6709\u5168\u5c40\u521b\u5efa\u548c\u7834\u574f\u529f\u80fd\u3002\u5982\u679c\u5b83\u4eec\u662fmemset\u4e3a\u96f6\uff0c\u5219\u5b83\u4eec\u662f\u201c\u9ed8\u8ba4\u6784\u9020\u201d\u3002\u5982\u679c\u5728\u521d\u59cb\u5316\u671f\u95f4\u51fa\u73b0\u95ee\u9898\uff0c\u8bf7\u521b\u5efa\u8c03\u7528\u9500\u6bc1\u4ee5\u8fdb\u884c\u6e05\u7406\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u5f15\u53d1\u5f88\u5c11\u7684\u6837\u677f\u4ee3\u7801\u3002\u7279\u522b\u662f\uff0c\u6211\u8d62\u4e86\uff06\uff0339; t\u9519\u8fc7\u4e86\u5199\u4f5c\u548c\u5438\u6c14\u5668\u3002\n  \u4f46\u5f53\u7136\uff0c\u4e0eC ++\u76f8\u6bd4c\u7684\u6740\u624b\u529f\u80fd\u662f\u77ed\u671f\u7684\u6b21\u6570\u3002\u6211\u4e0d\u7fa1\u6155C ++\u7f16\u7e82\u8005\u7684\u5f00\u53d1\u4eba\u5458\u3002 C ++\u6807\u51c6\u4f7f\u4ed6\u4eec\u7684\u5de5\u4f5c\u53d8\u5f97\u56f0\u96be\uff0c\u6709\u65f6\u4f1a\u5bfc\u81f4\u6548\u7387\u59a5\u534f\u3002 C\u6613\u4e8e\u7f16\u8bd1\u548c\u901a\u8fc7\u8bbe\u8ba1\u94fe\u63a5\u3002\u6211\u53ef\u4ee5\u76f8\u4fe1\u5176\u4ed6\u8f83\u65b0\u7684\u8bed\u8a00\u5982Rust\u6216D\u6bd4\u73b0\u4ee3C ++\u66f4\u4ee4\u4eba\u6109\u5feb\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u4f3c\u4e4e\u5728\u7f16\u8bd1\u65f6\u8868\u73b0\u5f97\u7c7b\u4f3c\u3002\n  \u518d\u73b0\u6027\u5728\u7814\u7a76\u4e2d\u662f\u91cd\u8981\u7684\u3002\u5176\u4ed6\u4eba\u5e94\u8be5\u80fd\u591f\u8f7b\u677e\u8fd0\u884c\u6211\u7684\u4ee3\u7801\u5e76\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\u3002\u7b2c\u4e00\u90e8\u5206\u7ecf\u5e38\u53d7\u5230\u4f9d\u8d56\u5173\u7cfb\u7684\u963b\u788d\u3002\u5728\u8fd9\u65b9\u9762\uff0cC\u548cC ++\u5e76\u4e0d\u5bb9\u6613\u3002\u786e\u4fdd\u4ee3\u7801\u6613\u4e8e\u7f16\u8bd1\u7684\u6700\u4f73\u65b9\u6cd5\uff0c\u94fe\u63a5\u548c\u8fd0\u884c\u662f\u5c06\u4f9d\u8d56\u9879\u9650\u5236\u4e3a\u88f8\u9732\u7684\u6700\u5c0f\u503c\u3002 \n\u90a3\u4e48\u6700\u5c11\u7684\u662f\u4ec0\u4e48\uff1f\u8981\u4f7f\u7528GPU\uff0c\u6211\u9700\u8981\u4e00\u4e2a\u56fe\u5f62API\u3002 vulkan\u662f\u6700\u5e7f\u6cdb\u652f\u6301\u7684\u90a3\u4e2a\u662f\u81ea\u7136\u7684\u9009\u62e9\u3002\u6211\u4e0d\u6253\u7b97\u7f16\u5199\u81ea\u5df1\u7684\u6269\u5c55\u88c5\u8f7d\u673a\uff0c\u6211\u8fd8\u9700\u8981\u4e00\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u57fa\u7840\uff08\u4f8b\u5982\u7a97\u53e3\u521b\u5efa\u548c\u8f93\u5165/\u8f93\u51fa\uff09\u3002 GLFW\u6db5\u76d6\u4e86\u8fd9\u4e9b\u9700\u6c42\u3002\u4eb2\u7231\u7684Imgui\u975e\u5e38\u6709\u52a9\u4e8e\u5feb\u901f\u539f\u578b\u8bbe\u8ba1\u3002\u5b83\u5e76\u4e0d\u5b8c\u5168\u7b80\u7ea6\uff0c\u800c\u662f\u5b83\u8868\u73b0\u5f97\u81ea\u8eab\u3002\u60a8\u5e94\u8be5\u53ea\u5c06\u5176\u6e90\u6587\u4ef6\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\u3002\u5b83\u662f\u7528C ++\u7f16\u5199\u7684\uff0c\u6240\u4ee5\u6211\u9700\u8981\u4e00\u4e9bC / C ++ Interop\uff0c\u4f46\u8fd9\u662f\u65e0\u75db\u7684\u3002\u6700\u540e\uff0c\u6211\u4f7f\u7528stb_image_write.h\u5c06\u5c4f\u5e55\u622a\u56fe\u5199\u4e3apng\uff0cjpg\u6216hdr\u3002\n \u6240\u6709\u7684\u3002\u6211\u7528\u6e90\u4ee3\u7801\u53d1\u5e03\uff0c\u6211\u5c06\u4eb2\u7231\u7684imgui\uff0cglfw\u548cstb\u53d1\u8d27\u3002 GLFW\u88ab\u7f16\u8bd1\u4e3a\u5355\u72ec\u7684\u9879\u76ee\uff0c\u5176\u4ed6\u4e00\u5207\u90fd\u662f\u6211\u6e32\u67d3\u5668\u9879\u76ee\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u94fe\u63a5\u6709\u5f88\u5c11\u7684\u4e8b\u60c5\u53ef\u80fd\u4f1a\u51fa\u9519\u3002 Vulkan SDK\u662f\u552f\u4e00\u5fc5\u987b\u5355\u72ec\u5b89\u88c5\u7684\u552f\u4e00\u4e8b\u60c5\uff0c\u4f46\u8fd9\u5f88\u5bb9\u6613\u4e14\u4e0d\u53ef\u907f\u514d\uff0c\u56e0\u4e3a\u5b83\u662f\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u3002\u6211\u4f7f\u7528cmake\uff0c\u4f46\u5b83\u6ca1\u6709\u591a\u5927\u3002\n  \u5f53\u6211\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u56fe\u5f62API\uff08\u5982vulkan\uff09\u65f6\uff0c\u6211\u7684\u65e7Inthince\u5c06\u662f\u5728\u6211\u9700\u8981\u7684\u6240\u6709\u529f\u80fd\u5468\u56f4\u7f16\u5199\u5305\u88c5\u3002\u4f46\u8fd9\u771f\u7684\u662f\u4ec0\u4e48\u5462\uff1f\u597d\u5427\uff0c\u5305\u88c5\uff1a\n Vulkan\u89c4\u8303\u5728\u56fe\u5f62\u5f00\u53d1\u4eba\u5458\u4e2d\u76f8\u5bf9\u4f17\u6240\u5468\u77e5\u3002\u5b83\u80af\u5b9a\u6bd4\u4e00\u4e9b\u79c1\u4eba\u5c0f\u5305\u88c5\u8005\u66f4\u719f\u6089\uff0c\u6211\u4f1a\u653e\u5728\u5b83\u7684\u9876\u90e8\u3002\n  \u5305\u88c5\u5668\u7684\u91cd\u590d\u4e3b\u9898\u662f\u4ed6\u4eec\u5c1d\u8bd5\u5c06\u56fe\u5f62API\u7684\u5e7f\u6cdb\u529f\u80fd\u9650\u5236\u4e3a\u7ecf\u5e38\u4f7f\u7528\u7684\u4f4d\u3002\u867d\u7136\u8fd9\u53ef\u4ee5\u4f7f\u67d0\u4e9b\u4efb\u52a1\u6709\u70b9\u65b9\u4fbf\uff0c\u4f46\u5b83\u4f7f\u5176\u4ed6\u4efb\u52a1\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u5728\u56fe\u5f62\u7814\u7a76\u4e2d\uff0c\u60a8\u5e38\u5e38\u5bfb\u6c42\u6700\u65b0\u548c\u6700\u5927\u7684\u529f\u80fd\uff08\u4f8b\u5982\uff0c\u5728\u6211\u7684\u6e32\u67d3\u5668\u4e2d\u7684\u96f7\u67e5\u8be2\uff09\u3002\u6709\u65f6\u4f60\u9700\u8981\u4e00\u4e9b\u76f8\u5f53\u6666\u6da9\u7684\u529f\u80fd\u3002\u5982\u679c\u60a8\u4f9d\u9760\u5305\u88c5\u5668\uff0c\u60a8\u9996\u5148\u5728\u8fd9\u4e9b\u6a21\u7cca\u7684\u529f\u80fd\u5468\u56f4\u7f16\u5199\u5305\u88c5\u5668\uff08\u4e0e\u60a8\u81ea\u5df1\u7684\u4e0d\u719f\u6089\u7684\u754c\u9762\u5373\u5174\uff09\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u4eec\u3002\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\u901a\u8fc7\u56fe\u5f62API\u7b80\u5355\u66f4\u9ad8\u6548\u3002\n  \u4e0e\u4efb\u4f55\u8f6f\u4ef6\u4e00\u6837\uff0cAPI\u548c\u56fe\u5f62\u9a71\u52a8\u7a0b\u5e8f\u5177\u6709\u9519\u8bef\u3002\u4f46\u662f\uff0c\u8be5\u8f6f\u4ef6\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5e7f\u6cdb\u6d4b\u8bd5\u548c\u7531\u8bb8\u591a\u4ed8\u8d39\u4e13\u4e1a\u4eba\u58eb\u8fdb\u884c\u5e7f\u6cdb\u7684\u6d4b\u8bd5\u548c\u5f00\u53d1\u3002\u9519\u8bef\u7684\u901f\u5ea6\u76f8\u5f53\u4f4e\u3002\u4efb\u4f55\u5305\u88c5\u5668\u90fd\u4f1a\u7ee7\u627f\u6240\u6709\u8fd9\u4e9b\u9519\u8bef\uff0c\u5e76\u5728\u5176\u81ea\u5df1\u7684\u5185\u5bb9\u4e2d\u6dfb\u52a0\u4e00\u4e9b\uff0c\u6700\u6709\u53ef\u80fd\u4ee5\u66f4\u9ad8\u7684\u901f\u5ea6\u3002\n  \u5728\u8bf8\u5982OpenGL\u4e4b\u7c7b\u7684\u72b6\u6001API\u4e2d\uff0c\u5f88\u96be\u786e\u4fdd\u5728\u6bcf\u4e2a\u7ed8\u5236\u547c\u53eb\u4e4b\u524d\u786e\u4fddAPI\u5904\u4e8e\u6b63\u786e\u72b6\u6001\u3002\u5305\u88c5\u8005\u53ef\u4ee5\u5e2e\u52a9\u3002\u4f46vulkan\u5168\u90e8\u8fdb\u5165\u7ba1\u9053\u5bf9\u8c61\uff0c\u4f7f\u56fd\u5bb6\u5355\u7247\u3002\u4e0d\u518d\u9700\u8981\u8fd9\u4e9b\u529f\u80fd\u3002 \n\u6211\u5bf9\u6b64\u6ca1\u6709\u7528\u3002\u6211\u5f88\u6ee1\u610fvulkan\u7684C\u63a5\u53e3\uff0c\u4ee5\u53ca\u6211\u4f7f\u7528\u5b83\u4eec\u7684\u65b9\u5f0f\uff08\u89c1\u4e0b\u6587\uff09\u3002\n  \u786e\u5b9e\uff0c\u5305\u88c5\u5668\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u4f46\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5bb9\u6613\u3002\u901a\u5e38\u5fc5\u987b\u9488\u5bf9\u6240\u6709\u76ee\u6807API\u4ed4\u7ec6\u6d4b\u8bd5\u5728\u5305\u88c5\u7eb8\u4e0a\u7684\u7a0b\u5e8f\u3002\u6211\u5e0c\u671b\u4e0a\u4e0b\u4e00\u4e2a\u6c34\u5e73\u3002\u5177\u6709\u4e00\u81f4\u7684\u573a\u666f\u63cf\u8ff0\uff0c\u53ef\u4ee5\u7531\u5177\u6709\u4e0d\u540cAPI\u7684\u6e32\u67d3\u5668\u5448\u73b0\uff0c\u6216\u8005\u4f7f\u7528Moltenvk\u8fd9\u6837\u7684\u4e1c\u897f\u5c06\u5b8c\u6574\u7684\u56fe\u5f62API\u6620\u5c04\u5230\u4e0d\u540c\u7684\u56fe\u5f62API\u4e0a\u3002\n \u5e95\u7ebf\u662f\u6211\u60f3\u76f4\u63a5\u4f7f\u7528vulkan\u3002 vulkan structs\u548c\u51fd\u6570\u5728\u6211\u7684\u5927\u591a\u6570\u6e32\u67d3\u5668\u7684\u5927\u591a\u6570\u90e8\u5206\u4f7f\u7528\u3002\u4eceAPI\u72ec\u7acb\u4ee3\u7801\u6ca1\u6709\u5899\u7ed8\u5236API\u7279\u5b9a\u4ee3\u7801\u3002 vulkan\u5e76\u4e0d\u610f\u5473\u7740\u6362\u4efb\u4f55\u4e1c\u897f\u3002\u6211\u5b81\u613f\u91cd\u5199\u6574\u4ef6\u4e8b\u3002\n  \u5f53\u7136\uff0c\u4ece\u5934\u5212\u75d5\u4e0evulkan\u7684\u5199\u4f5c\u8f6f\u4ef6\u662f\u5f88\u591a\u5de5\u4f5c\uff0c\u6211\u90fd\u4e0d\u60f3\u6bcf\u4e00\u6b21\u90fd\u8fd9\u6837\u505a\u3002\u6211\u5728\u6e32\u67d3\u6211\u7684\u7b2c\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e4b\u524d\u5199\u4e861750\u884c\u4ee3\u7801\u3002\u5c3d\u53ef\u80fd\uff0c\u6211\u7684\u6e32\u67d3\u5668\u7531\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u5c0f\u5757\u7ec4\u6210\u3002\u5b83\u4eec\u5e76\u4e0d\u5305\u88c5\uff0c\u56e0\u4e3a\u5b83\u4eec\u76f4\u63a5\u4f7f\u7528vulkan structs\u548c\u53e5\u67c4\uff0c\u4f46\u5b83\u4eec\u6346\u7ed1\u5728\u4e00\u8d77\u5e38\u7528\u7684\u4e00\u4e9b\u529f\u80fd\u3002\u5982\u679c\u8fd9\u5c31\u662f\u4f60\u60f3\u8981\u7684\uff0c\u5f88\u597d\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u76f4\u63a5\u8c03\u7528vulkan\u51fd\u6570\u6216\u5199\u5165\u53e6\u4e00\u4e2a\u5b9e\u7528\u7a0b\u5e8f\u3002\n \u8fd9\u662f\u4e00\u4e2a\u770b\u8d77\u6765\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u521b\u5efa\u51e0\u4e2a\u7f13\u51b2\u533a\u65f6\uff0c\u901a\u5e38\u8fd8\u8981\u4e3a\u5b83\u4eec\u5206\u914d\u548c\u7ed1\u5b9a\u5185\u5b58\u3002\u56e0\u6b64\uff0c\u6211\u5177\u6709\u901a\u8fc7\u5355\u4e2a\u5185\u5b58\u5206\u914d\u7ef4\u62a4\u4efb\u610f\u6570\u91cf\u7684\u7f13\u51b2\u533a\uff0c\u5e76\u63d0\u4f9b\u5bf9\u67d0\u4e9b\u5143\u6570\u636e\u7684\u65b9\u4fbf\u8bbf\u95ee\uff1a\n //\u5c06\u7f13\u51b2\u53e5\u67c4\u4e0eoffset //\u7ed3\u5408\u8d77\u6765\uff01\u548csize\u952e\u5165dem struct buffer_s {//\uff01\u7f13\u51b2\u7bb1vkbuffer\u7f13\u51b2\u533a; //\u7ed1\u5b9a\u5185\u5b58//\u7684\u504f\u79fb\u91cf\uff01\u5206\u914d\u4ee5\u5b57\u8282vkdeviceSize\u504f\u79fb; //\u6b64\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u6ca1\u6709//\uff01\u586b\u5145vkdeviceize\u5927\u5c0f; buffer_t; //\u6240\u6709\u5171\u4eabA //\u7684\u7f13\u51b2\u533a\u5217\u8868\uff01\u5355\u5185\u5b58\u5206\u914d\u7c7b\u578b\u952e\u5165\u578bstruct buffers_s {//\uff01\u6301\u6709\u7f13\u51b2\u533a\u6570\u91cfuint32_t buffer_count; // buffer_count aruge buffer_t *\u7f13\u51b2\u533a; //\u670d\u52a1//\u7684\u5185\u5b58\u5206\u914d\uff01\u6240\u6709\u7f13\u51b2\u533avkdeviceMemory\u5b58\u50a8\u5668; //\u6574\u4e2a//\u7684\u5b57\u8282\u7684\u5927\u5c0f\uff01\u5185\u5b58\u5206\u914dvkdeviceSize\u5927\u5c0f;}\u7f13\u51b2\u533a_t; / *\uff01\u6839\u636e\u7ed9\u5b9a\u89c4\u8303\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a\u7f13\u51b2\u533a\uff0c\u5bf9\u6240\u6709\u7684\u6240\u6709\u6570\u636e\u6267\u884c\u5355\u4e2a\u5185\u5b58\u5206\u914d\u5e76\u7ed1\u5b9a\u5b83\u3002 \\ param\u7f13\u51b2\u8f93\u51fa\u5bf9\u8c61\u3002\u4f7f\u7528destroy_buffers\uff08\uff09\u91ca\u653e\u5b83\u3002 \\ param\u8bbe\u5907\u4f7f\u7528\u7684\u8bbe\u5907\u3002 \\ param buffer_infos\u4e00\u4e2a\u8981\u521b\u5efa\u7684\u6bcf\u4e2a\u7f13\u51b2\u533a\u7684\u89c4\u8303\uff08\u603b\u5171\u7f13\u51b2\u533a\uff09\u3002 \\ param buffer_count\u8981\u521b\u5efa\u7684\u7f13\u51b2\u533a\u6570\u3002 \\ param memory_properties\u8981\u4e3a\u5185\u5b58\u5206\u914d\u5b9e\u65bd\u7684\u5185\u5b58\u6807\u5fd7\u3002 vkmemoryheapfleagbits\u7684\u7ec4\u5408\u3002 \\\u8fd4\u56de\u6210\u529f\u3002* / int create_buffers\uff08buffers_t * buffers\uff0cconst device_t *\u8bbe\u5907\uff0cconst vkbuffercreateinfo * buffer_infos\uff0cuint32_t buffer_count\uff0cvkmemorypropertyflags memory_properties\uff09; / *\uff01\u9500\u6bc1\u7ed9\u5b9a\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u7f13\u51b2\u533a\uff0c\u5c06\u8bbe\u5907\u5185\u5b58\u5206\u914d\u91ca\u653e\uff0c\u9500\u6bc1\u6570\u7ec4\uff0c\u96f6\u67c4\u548c\u96f6\u7684\u5bf9\u8c61\u3002* / void destroy_buffers\uff08buffers_t * buffers\uff0cconst device_t *\u8bbe\u5907\uff09;\n Crucally\uff0cCreate_Buffers\uff08\uff09\u671f\u671b\u4e00\u7cfb\u5217VkbufferCreateInfo\uff0c\u800c\u4e0d\u662f\u4e00\u4e9b\u5305\u88c5\u5668\u6a21\u4eff\u8be5\u7ed3\u6784\u3002\u65e0\u8bba\u65d7\u5e1c\u662f\u591a\u4e48\u5f02\u5f62\u6807\u5fd7\uff0c\u60a8\u8981\u4e3a\u7f13\u51b2\u533a\u521b\u5efa\u4f7f\u7528\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u3002 \n\u5728\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0c\u6211\u4eceChristoph Schied\u5b66\u5230\u7684\u6280\u5de7\u5c31\u53d1\u6325\u4e86\u3002 C\u4e2d\u7684\u7ed3\u6784\u521d\u59cb\u5316\u5141\u8bb8\u60a8\u5904\u7406Python\u4e2d\u7684\u5173\u952e\u5b57\u53c2\u6570\u7b49vulkan\u7ed3\u6784\u3002\u6700\u8fd1\uff0cC ++\u4e5f\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u60a8\u672a\u63d0\u53ca\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4f1a\u83b7\u5f97\u96f6\u521d\u59cb\u5316\u548cvutkan\uff0c\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u4ee5\u4fbf\u4e3a\u96f6\u63d0\u4f9b\u5408\u7406\u7684\u9ed8\u8ba4\u503c\u3002\u4f8b\u5982\uff0c\u6b64\u4ee3\u7801\u4e3a\u5206\u5c42\u968f\u673a\u6570\u8868\u521b\u5efa\u4e34\u65f6\u7f13\u51b2\u533a\uff1a\n vkbuffercreateinfo buffer_info = {.stype = vk_structure_info_buffer_create_info\uff0c.size = sizeof\uff08uint16_t\uff09* cell_count\uff0c.usage = vk_buffer_usage_transfer_src_bit}; buffers_t staging; if\uff08create_buffers\uff08\uff06amp; stage\uff0cdevice\uff0c\uff06amp; buffer_info\uff0c1\uff0cvk_memory_property_host_visible_bit | vk_memory_property_host_coherent_bit\uff09\uff09{printf\uff08\uff06\uff0334;\u65e0\u6cd5\u4e3a\u566a\u58f0\u521b\u5efa\uff05llu\u5b57\u8282\u6682\u5b58\u7f13\u51b2\u533a\u3002\\ n\uff06\uff0334;\uff0cbuffer_info.size\uff09 ;\u8fd4\u56de1;}\n \u6211\u4e89\u8fa9\u8bf4\uff0c\u524d\u4e24\u6761\u7ebf\u662f\u6837\u677f\uff0c\u4f46\u5176\u4ed6\u4e00\u5207\u90fd\u8868\u8fbe\u4e86\u4e00\u4e9b\u6709\u610f\u4e49\u7684\u4e1c\u897f\uff0c\u6211\u9700\u8981\u4ec0\u4e48\u6837\u7684\u7f13\u51b2\u533a\u3002\u8fd9\u5c31\u662f\u5b83\u5728\u5927\u591a\u6570\u65f6\u5019\u5982\u4f55\u8fd0\u4f5c\u3002\n \u6b64\u793a\u4f8b\u8fd8\u8bf4\u660e\u4e86\u6211\u7684\u5185\u5b58\u7ba1\u7406\u3002\u57fa\u672c\u7b56\u7565\u662f\u6bcf\u7528\u76ee\u7684\u5177\u6709\u4e00\u4e2a\u5185\u5b58\u5206\u914d\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a\u7528\u4e8e\u9876\u70b9\u6570\u636e\uff0c\u4e00\u4e2a\u7528\u4e8e\u7eb9\u7406\uff0c\u4e00\u4e2a\u7528\u4e8e\u5206\u5c42\u968f\u673a\u6570\u3002\u8fd9\u53ef\u80fd\u4e0d\u662f\u5178\u8303\uff0c\u4f46\u5728\u8fd9\u6837\u4e00\u4e2a\u5c0f\u9879\u76ee\u4e2d\u8fd0\u4f5c\u826f\u597d\u3002\u6211\u7684\u6e32\u67d3\u5668\u5728\u7b2c\u4e00\u5e27\u4e4b\u524d\u5171\u8fdb\u884c21\u4e2a\u5185\u5b58\u5206\u914d\uff0c\u5305\u62ec\u4e34\u65f6\u7f13\u51b2\u533a\u3002\n \u6211\u51ed\u501f\u6b64\u4ee3\u7801\u7684\u53ef\u91cd\u7528\u6027\u505a\u51fa\u4e86\u79ef\u6781\u7684\u7ecf\u9a8c\u3002\u4f8b\u5982\uff0c\u6211\u66fe\u7ecf\u60f3\u8981\u4e00\u4e2a\u65e0\u5934\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5728GPU\u4e0a\u4f18\u5316\u4e00\u4e9b\u84dd\u8272\u566a\u58f0\u70b9\u96c6\u3002\u867d\u7136\u8fd9\u79cd\u7528\u4f8b\u4e0e\u6e32\u67d3\u5668\u5199\u7684\u662f\u5b8c\u5168\u4e0d\u540c\u7684\uff0c\u4f46\u5b83\u6ca1\u6709\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u5e76\u5b8c\u7f8e\u65e0\u7f3a\u3002\u4e0e\u6211\u5f53\u524d\u8bbe\u7f6e\u6709\u70b9\u70e6\u4eba\u7684\u4e00\u4ef6\u4e8b\u662f\u591a\u4f20\u9012\u7684\u6e32\u67d3\u3002\u4f46\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u6211\u6b64\u65f6\u53ea\u6709\u4e09\u6b21\u901a\u8fc7\uff0c\u6240\u4ee5\u6211\u6ca1\u6709\u6253\u6270\u8fd9\u7c7b\u4e1c\u897f\u7684\u5f88\u591a\u652f\u6301\u4ee3\u7801\u3002\n  \u5728\u6211\u4e4b\u524d\u7684\u6e32\u67d3\u8005\u4e4b\u4e00\u4e2d\uff0c\u6211\u5bf9\u4e00\u7cfb\u5217\u81ea\u52a8\u5316\u7cfb\u7edf\u611f\u5230\u9a84\u50b2\uff0c\u5b83\u4e00\u76f4\u8ddf\u8e2a\u4f9d\u8d56\u56fe\uff0c\u5e76\u4e14\u4f1a\u81ea\u52a8\u5f04\u6e05\u695a\u5982\u679c\u6709\u4efb\u4f55\u6539\u53d8\uff0c\u53ef\u4ee5\u81ea\u52a8\u5f04\u6e05\u695a\u5e94\u91cd\u65b0\u521d\u59cb\u5316\u7684\u987a\u5e8f\u3002\u5b83\u662f\u4e00\u4e2a\u82b1\u54e8\u9762\u5411\u5bf9\u8c61\u7684\u7cfb\u7edf\uff0c\u5176\u4e2d\u4ece\u67d0\u4e9b\u516c\u5171\u57fa\u7c7b\u548c\u65b9\u6cd5\u8c03\u7528\u4e2d\u7ee7\u627f\u4e86\u5b9a\u4e49\u7684\u4f9d\u8d56\u6027\u3002\u6211\u7684\u65b0\u73a9\u5177\u6e32\u67d3\u5668\u5177\u6709\u5728\u4e24\u884c\u4ee3\u7801\u4e2d\u5b9e\u73b0\u7684\u76f8\u540c\u529f\u80fd\u3002\u6211\u8ba4\u4e3a\uff0c\u5c31\u201c\u4fdd\u6301\u7b80\u5355\u201d\u800c\u8a00\uff0c\u8fd9\u90e8\u5206\u662f\u6700\u597d\u7684\u4f8b\u5b50\u3002\n \u6211\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u5e03\u5c14\u503c\u7684struct application_updates_t\uff0c\u4ee5\u8ddf\u8e2a\u7531\u4e8e\u7528\u6237\u8f93\u5165\u800c\u9700\u8981\u66f4\u6539\u7684\u5185\u5bb9\u3002\u7136\u540e\u6709\u4e00\u4e2a\u51fd\u6570\u6765\u6267\u884c\u8fd9\u4e9b\u66f4\u65b0\uff0c\u8fd9\u4f1a\u4e3a\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u800c\u8c03\u7528\u5b83\uff0c\u5e76\u4e14\u6bcf\u5e27\u4e00\u6b21\uff1a \n/ *\uff01\u91cd\u590d\u9700\u8981\u6267\u884c\u4ee5\u5b9e\u73b0\u7ed9\u5b9a\u66f4\u65b0\u7684\u6240\u6709\u521d\u59cb\u5316\u8fc7\u7a0b\u3002 \\\u8fd4\u56de0\u6210\u529f\u3002* / int update_application\uff08application_t * app\uff0cconst application_updates_t * update_in\uff09;\n \u5728\u6b64\u529f\u80fd\u4e2d\uff0c\u6211\u9996\u5148\u6807\u8bb0\u76f4\u63a5\u53d7\u6b64\u66f4\u65b0\u5f71\u54cd\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u9700\u8981\u91cd\u65b0\u521b\u5efa\u3002\n vkbool32 swapchain = update.recreate_swapchain; vkbool32\u566a\u58f0= update.startup | update.regenerate_noise; vkbool32 ltc_table = update.startup; vkbool32\u573a\u666f= update.startup | update.reload_scene; vkbool32 render_targets = update.startup; vkbool32 render_pass = update.startup; vkbool32 content_buction_buffers = update.startup | update.update_light_count | update.change_shading;\n \u4f46\u5f53\u7136\uff0c\u8fd8\u6709\u4f9d\u8d56\u6027\u6765\u89e3\u91ca\u3002\u5bf9\u8c61\u5728\u521b\u5efa\u671f\u95f4\u5f15\u7528\u4e86\u5176\u4ed6\u5bf9\u8c61\uff0c\u56e0\u6b64\u5982\u679c\u5176\u4ed6\u5bf9\u8c61\u91cd\u65b0\u521b\u5efa\uff0c\u5b83\u4eec\u4e5f\u5fc5\u987b\u91cd\u65b0\u521b\u5efa\u3002\u4f8b\u5982\uff0cSwapchain\u7684\u5a31\u4e50\u901a\u5e38\u610f\u5473\u7740\u5206\u8fa8\u7387\u5df2\u7ecf\u6539\u53d8\uff0c\u56e0\u6b64\u4e5f\u5fc5\u987b\u91cd\u65b0\u521b\u5efa\u6e32\u67d3\u76ee\u6807\u3002\u8fd9\u662f\u7528\u4e8e\u7531\u4f9d\u8d56\u56fe\u5c42\u5904\u7406\u7684\u90e8\u5206\u3002\u73b0\u5728\u5b83\u7531\u4e00\u4e2a\u5faa\u73af\u5904\u7406\u3002\n uint32_t max_dependency_path_length = 16; for\uff08Uint32_t i = 0; i\uff01= max_dependency_path_length; ++ i\uff09{render_targets | = swapchain; Render_pass | = Swapchain | Render_targets; constant_buffers | = swapchain;}\n \u5982\u679c\u60a8\u60f3\u6210\u4e3a\u82b1\u54e8\u7684\u8bdd\uff0c\u60a8\u53ef\u4ee5\u8c03\u7528\u4f9d\u8d56\u56fe\u3002 |\u64cd\u4f5c\u5458\u5b9a\u4e49\u8fb9\u7f18\uff0c\u5faa\u73af\u5b9e\u73b0\u5bbd\u5ea6\u4f46\u7cbe\u7b80\u548c\u6b63\u786e\u7684\u65b9\u5f0f\u3002\u6211\u975e\u5e38\u559c\u6b22\u8fd9\u4e2a\u4ee3\u7801\u7684\u539f\u56e0\u662f\uff0c\u51e0\u4e4e\u6240\u6709\u5b83\u90fd\u5b9a\u4e49\u4e86\u4f7f\u7528\u7d27\u51d1\u7b26\u53f7\u7684\u56fe\u5f62\u3002\u53ea\u6709\u7528\u4e8eFOR-LOOP\u7684\u4e24\u6761\u7ebf\u90fd\u53ef\u4ee5\u5b9e\u73b0\u56fe\u5f62\u904d\u5386\u7684\u56fe\u5f62\u3002\u5728\u9762\u5411\u5bf9\u8c61\u7684\u8bbe\u7f6e\u4e2d\uff0c\u60a8\u53ef\u4ee5\u8fc7\u8f7d|\u8fd0\u7b97\u7b26\u83b7\u53d6\u76f8\u540c\u7684\u8bed\u6cd5\u3002\u4f46\u662f\uff0c\u6ca1\u6709\u4eba\u4f1a\u77e5\u9053\u8be5\u4ee3\u7801\u5728\u4e0d\u67e5\u627e\u64cd\u4f5c\u5458\u7684\u5b9a\u4e49\u7684\u60c5\u51b5\u4e0b\u3002\u5e94\u7528AN\u6216BOOLEAN\u662f\u4e0d\u8a00\u81ea\u660e\u7684\u3002\n \u4e00\u65e6\u6240\u6709\u4f9d\u8d56\u9879\u90fd\u5df2\u4f20\u64ad\uff0c\u9700\u8981\u9500\u6bc1\u7684\u5bf9\u8c61\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u88ab\u9500\u6bc1\uff1a \nvkdevicewaitidle\uff08app-\uff06gt; device.device\uff09; if\uff08constant_buffers\uff09destroy_constant_buffers\uff08\uff06amp; app-\uff06gt; constant_buffers\uff0c\uff06amp; app-\uff06gt;\u8bbe\u5907\uff09; if\uff08render_pass\uff09destroy_render_pass\uff08\uff06amp; app-\uff06gt; render_pass\uff0c\uff06amp; app-\uff06gt;\u8bbe\u5907\uff09; if\uff08render_targets\uff09destroy_render_targets\uff08\uff06amp; app-\uff06gt; render_targets\uff0c\uff06amp; app-\uff06gt;\u8bbe\u5907\uff09; if\uff08\u573a\u666f\uff09destroy_scene\uff08\uff06amp; app-\uff06gt;\u573a\u666f\uff0c\uff06amp; app-\uff06gt;\u8bbe\u5907\uff09; if\uff08ltc_table\uff09destroy_ltc_table\uff08\uff06amp; app-\uff06gt; ltc_table\uff0c\uff06amp; app-\uff06gt;\u8bbe\u5907\uff09; if\uff08\u566a\u58f0\uff09destroy_noise_table\uff08\uff06amp; app-\uff06gt; lest_table\uff0c\uff06amp; app-\uff06gt;\u8bbe\u5907\uff09;\n \u7136\u540e\uff0c\u5982\u6709\u5fc5\u8981\uff0cSwapchain\u4f1a\u5728\u4e0d\u91cd\u65b0\u521b\u5efa\u5e95\u5c42\u7a97\u53e3\u7684\u60c5\u51b5\u4e0b\u8c03\u6574\u5927\u5c0f\u3002\u6700\u540e\uff0c\u6240\u6709\u5176\u4ed6\u5bf9\u8c61\u90fd\u4f1a\u91cd\u65b0\u521b\u5efa\u3002\u5b83\u4fdd\u8bc1\u9996\u5148\u91cd\u65b0\u521b\u5efa\u6240\u6709\u8fd9\u4e9b\u5bf9\u8c61\u3002\u6b64\u6b65\u9aa4\u5229\u7528\u7b2c\u4e00\u4e2a\u9519\u8bef\u4e2d\u6b62\u7684\u7d27\u51d1\u7801\u7684\u77ed\u8def\u8bc4\u4f30\u3002\n if\uff08\uff08\u566a\u58f0\uff06amp; load_noise_table\uff08\uff06amp; app-\uff06gt;\uff06amp; app-\uff06amp; app-\uff06gt; device-\uff06gt; device\uff0cget_default_noise_resolution\uff08app-\uff06gt; render_settings.noise_type\uff09\uff0capp-\uff06gt; render_settings.noise_type\uff09\uff09||\uff08ltc_table \uff06amp;\uff06amp; load_ltc_table\uff08\uff06amp; app-\uff06gt; ltc_table\uff0c\uff06amp; app-\uff06gt;\u8bbe\u5907\uff0c\uff06\uff0334;\u6570\u636e/ ggx_ltc_fit\uff06\uff0334 ;,51\uff09\uff09||\uff08\u573a\u666f\uff06amp; load_scene\uff08\uff06amp; app- \uff06gt;\u573a\u666f\uff0c\uff06amp; app-\uff06gt;\u8bbe\u5907\uff0capp-\uff06gt; scene_specification.file_path\uff0capp-\uff06gt; scee_specification.texture_path\uff0cvk_true\uff09\uff09\n...... ", "note_en": "Part 1 of this  series about my toy renderer covers the most fundamental design decisions. Over the years, I have written many renderers and for a long time their complexity kept growing. This time, I took the opposite route. I wanted to maximize the fraction of code that implements crucial functionality rather than wasting my time on bloaty infrastructure. The code that I wrote (excluding shaders) has 7575 lines at 345 kB. Not exactly a 4k intro but much smaller than any other real-time renderer I have used before. It takes ca. one second to compile and link and startup is also quick.\n Upfront, I want to clarify one thing: The design decisions that I advocate here were made for a research renderer developed by a single person. I am not arguing that the same designs should be favored for big commercial projects. However, I would argue that if you develop new techniques for a big commercial product, it may be best to have a small testbed for that, such as the one I am describing here. And some of the ideas, e.g. the way in which I load scenes, may be inspiring for bigger projects.\n  Long compile times are a  huge detriment to productivity. Compiling and linking a big C++ project with lots of dependencies and some template magic can easily take several minutes. I once had a C++ project with only 300 lines of code. Unfortunately, it also had the header-only, template-centric library  Eigen as dependency, so compile times immediately rose to half a minute (for a single *.cpp file).\n What does that mean for a programming workflow? As you implement a big chunk of new functionality, you are discouraged from testing small bits of it because that requires recompilation. Once you are done, you compile. Maybe at some point in the middle of compilation, an error will be thrown at you. Once that is fixed, you compile again and might get to the point where you encounter run time errors. Maybe you have to compile a debug build to understand those. You squash one trivial bug after the other and eventually things work as they should. If you have compiled and linked ten times during that process and that took one minute on average, you have wasted ten minutes waiting for your compiler.\n I firmly believe that this time is always wasted. The time frame is just short enough that it is not wortwhile to switch to another task. People develop different habits of idling, e.g. checking newspages way too frequently. In the worst case, that means that you do not notice when compilation has finished and lose even more time.\n  Of course, people are aware of this problem and there are many attempts at solutions. Though, all of these make programming more restricted and programs more complex in some way. For example, there is the  PImpl idiom but that adds boilerplate code, makes code less clear and only shortens compile times for certain types of changes. Modules are another attempt at improving compile times but  gains appear to be moderate. You can throw hardware at the problem but possibilities for parallelization of compilation and linking are limited, so that cannot get you all that far.\n  Halving compile times is nice but reducing them to a second is nicer. Just think of some situation where you programmed without having to wait for a compiler. Hot reload of shaders, e.g. on  Shadertoy, is a nice example. Such an environment encourages experimentation and testing, increases productivity and removes a lot of frustration, especially during debugging. printf debugging is rightfully discouraged in settings with long compile times but can be extremely convenient if compilation and startup are quick.  Python with the  SciPy stack is another good example. Of course Python executes more slowly than C++ but most of the time my Python scripts are done running before a similar C++ program would have finished compilation.\n Inspired by such experiences, engine developers sometimes try to let you do as much as possible without recompiling. Hot shader reload is a positive example of that. Node graphs, plugin systems or the integration of separate scripting languages are a bit more questionable. They can be quite powerful but the effort to let them interact with all parts of the engine is substantial. Source code is an incredibly powerful and expressive way to accomplish all sorts of tasks. If you invest a lot of effort into a second system for the same purpose, which may also be less convenient to use, you are jumping through hoops because of long compile times.\n   I have been using C++ for a long time and for a decade or so, I have been enthusiastic about it. I went deep down into rabbit holes of object-oriented programming, template magic, the STL and boost. I got accustomed to long compile times and boilerplate code. Then three experiences gradually shook my faith into C++: Hot shader reload,  Python and  Corona (not the one you are thinking of). The first two should be obvious at this point. Making changes to your code and seeing the result a second later is freeing. Besides, Python is so much leaner than C++. As an example, the following code snippets extract the 3 top rows from a 4\u00d74 matrix in  NumPy and  Eigen, respectively.\n   Then I did some  offline rendering and I used the research renderer  Corona developed by my colleague Johannes Schudeiske (the name of the renderer was already awkward before the pandemic, considering that there is a  commercial renderer with the same name). That is how I came to appreciate the elegance of C. Corona is a moderately big project but it compiles in under two seconds. And the code base has pleasantly little boilerplate code. Where C++ gives you many slightly different takes on the same concept (e.g.  unique_ptr,  shared_ptr and raw pointers), C gives you one way to go and that one has a conveniently compact notation (such as  float*). Chunks of memory are such a universal and natural abstraction that C interfaces can be flexible and long-lived ( stb is a good example).\n Sticking with the example of matrix math, it is baffling how C code is often more compact and readable than C++ code. A matrix declaration would be  float matrix[4][4];. The evergreen  matrix and quaternion FAQ has many great examples of how this kind of code can look in C. Of course, you could take the same approach in C++ but then you are not really using C++. The example from above in C could be simply:\n  Object-oriented programming makes way for structs and global functions. In certain contexts, I have come to prefer this design for a simple reason: When a function interacts with instances of multiple classes, it is often somewhat arbitrary where you put it. It could be a member of any one of the classes or global. If global is the default, no guesswork is required. My structs come with global create and destroy functions. If they are  memset to zero, they are \u201cdefault constructed.\u201d If something goes wrong during initialization, create invokes destroy for cleanup. This approach incurs little boilerplate code. In particular, I won&#39;t miss writing setters and getters.\n  But of course the killer feature of C compared to C++ are short compile times. I do not envy developers of C++ compilers. The C++ standard makes their job difficult and that sometimes results in compromises on efficiency. C is easy to compile and link by design. I can believe that other newer languages such as Rust or D are more pleasant to use than modern C++. However, they seem to perform similarly in terms of compile times.\n  Reproducibility is important in research. Others should be able to run my code easily and get the same results. That first part is often hampered by dependencies. In this regard, C and C++ are not that far apart. The best way to ensure that code will be easy to compile, link and run is to restrict dependencies to the bare minimum.\n So what is the bare minimum? To use the GPU, I need a graphics API.  Vulkan is the one that is most widely supported so that is a natural choice. I am not going to write my own extension loader and I also need some operating system fundamentals (e.g. window creation and input/output).  GLFW covers those needs.  Dear ImGui is incredibly helpful for rapid prototyping. It is not exactly minimalist but as a dependency it behaves itself. You are supposed to just add its source files to your project. It is written in C++, so I need a bit of C/C++ interop here but that is painless. Finally, I use  stb_image_write.h to write screenshots as PNG, JPG or HDR.\n That&#39;s all. I ship Dear ImGui, GLFW and stb with my source code releases. GLFW gets compiled as separate project, everything else is part of the project for my renderer. Thus, there are few things that can go wrong with linking. The Vulkan SDK is the only thing that has to be installed separately but that is easy enough and unavoidable, because it is platform specific. I use CMake but it does not do much.\n  My old instinct as I start to use a new graphics API (such as Vulkan) would have been to write wrappers around all functionality that I need. But what does that really accomplish? Well, wrappers:\n The Vulkan specification is relatively well-known among graphics developers. It is certainly more familiar than some private little wrapper that I would put on top of it.\n  A recurring theme of wrappers is that they try to limit the extensive functionality of graphics APIs to the bits that are frequently used. While that can make certain tasks a bit more convenient, it makes other tasks impossible. In graphics research, you frequently seek out the latest and greatest features (e.g.  ray queries in my renderer). Sometimes you need some fairly obscure features. If you rely on wrappers, you first write a wrapper around these obscure features (coming up with your very own unfamiliar interface) and then use them. Using them through the graphics API directly is simply more efficient.\n  Like any software, APIs and graphics drivers have bugs. However, this software is widely used, extensively tested and developed by many well-paid professionals. The rate of bugs is reasonably low. Any wrapper will inherit all of these bugs and add some on its own, most likely at a higher rate.\n  In stateful APIs such as OpenGL, it has been difficult to ensure that the API is in the right state before each draw call. Wrappers could help with that. But Vulkan goes all in on  pipeline objects that make the state monolithic. There is no longer a need for such features.\n  I have no use for that. I am happy with the C interfaces of Vulkan and the way I use them (see below).\n  It is true that wrappers can make this possible but it is never easy. Usually programs working on top of a wrapper have to be tested carefully against all targeted APIs. I would favor going one level up or down. Either have a consistent scene description that can be rendered by renderers with different APIs or use things like  MoltenVK to map a complete graphics API onto a different graphics API.\n The bottom line is that I want to use Vulkan directly. Vulkan structs and functions are used in most parts of my renderer. There is no wall delineating API specific code from API independent code. Vulkan is not meant to ever be exchanged for anything else. I would rather rewrite the whole thing.\n  Of course, writing software with Vulkan from scratch is a lot of work and I would not want to do that every single time. I wrote 1750 lines of code before rendering my first triangles. Wherever possible, my renderer is composed of reusable little chunks. They are not wrappers because they work directly with Vulkan structs and handles but they bundle together some functionality that is frequently used together. If that is what you want, good. If not, just invoke Vulkan functions directly or write another utility.\n Here is one example of what that looks like. When you create a couple of buffers, you usually also want to allocate and bind memory for them. Thus, I have structs that maintain an arbitrary number of buffers with a single memory allocation and provide convenient access to some meta data:\n //! Combines a buffer handle with offset //! and size typedef  struct buffer_s {  //! The buffer handle VkBuffer buffer;  //! The offset in the bound memory  //! allocation in bytes VkDeviceSize offset;  //! The size of this buffer without  //! padding in bytes VkDeviceSize size;} buffer_t; //! A list of buffers that all share a //! single memory allocation typedef  struct buffers_s {  //! Number of held buffers uint32_t buffer_count;  //! Array of buffer_count buffers buffer_t* buffers;  //! The memory allocation that serves  //! all of the buffers VkDeviceMemory memory;  //! The size in bytes of the whole  //! memory allocation VkDeviceSize size;} buffers_t; /*! Creates one or more buffers according to the given specifications, performs a single memory allocation  for all of them and binds it. \\param buffers The output object. Use  destroy_buffers() to free it. \\param device The used device. \\param buffer_infos A specification of each buffer that is to be created (buffer_count in total). \\param buffer_count The number of buffers to create. \\param memory_properties The memory flags that you want to enforce  for the memory allocation. Combination of VkMemoryHeapFlagBits. \\ return  0 on success.*/ int  create_buffers( buffers_t* buffers,  const device_t* device,  const VkBufferCreateInfo* buffer_infos, uint32_t buffer_count, VkMemoryPropertyFlags memory_properties); /*! Destroys all buffers in the given object, frees the device memory allocation, destroys arrays, zeros handles and zeros the object.*/ void  destroy_buffers( buffers_t* buffers,  const device_t* device);\n Crucially,  create_buffers() expects an array of   VkBufferCreateInfo, not some wrapper imitation of that structure. No matter how exotic the flags are that you want to use for buffer creation, you can use them.\n  In using this function, a trick that I learned from  Christoph Schied comes into play. The  struct initialization in C lets you treat Vulkan structs like  keyword arguments in Python. Lately,  C++ also made that possible. Everything you do not mention, gets zero-initialized and Vulkan is carefully designed so that zero gives reasonable defaults. For example, this code creates the staging buffer for tables of stratified random numbers:\n VkBufferCreateInfo buffer_info = { .sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, .size =  sizeof(uint16_t) * cell_count, .usage = VK_BUFFER_USAGE_TRANSFER_SRC_BIT};buffers_t staging; if ( create_buffers(&amp;staging, device, &amp;buffer_info,  1, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)){  printf(&#34;Failed to create a %llu byte staging buffer  for noise.\\n&#34;, buffer_info.size);  return  1;}\n I would argue that the first two lines are boilerplate but everything else expresses something meaningful about what kind of buffer I need. And that is how it works out most of the time.\n This example also illustrates my memory management. The basic strategy is to have one memory allocation per purpose, e.g. one for vertex data, one for textures and one for stratified random numbers. That might not be exemplary but works well in such a small project. My renderer makes a total of 21 memory allocations prior to the first frame, including staging buffers.\n I have made positive experiences with reusability of this code. For example, I once wanted a headless application that optimizes some blue noise point sets on the GPU. Although this use case is quite different from what the renderer was written for, it did not take a lot of time and worked flawlessly. One thing that can be slightly annoying to do with my current setup is multi-pass rendering. But that is mostly because I only have three passes at this time so I have not bothered to set up a lot of support code for this kind of thing.\n  In one of my  earlier renderers, I was a bit proud of an automated system that kept track of a dependency graph and would automatically figure out the order in which things should get reinitialized if anything changes. It was a fancy object oriented system where everything inherited from some common base classes and method invocations defined dependencies. My new toy renderer has the same feature implemented in two lines of code. I think as far as \u201ckeeping it simple\u201d goes, this part is the best example.\n I have a  struct application_updates_t full of booleans to keep track of what needs to change due to user input. Then there is a function to perform these updates, which gets invoked for application startup and once per frame:\n /*! Repeats all initialization procedures that need to be performed to implement the given update. \\ return  0 on success.*/ int  update_application(application_t* app,  const application_updates_t* update_in);\n In this function, I first mark the objects that are directly affected by this update and need to be recreated.\n VkBool32 swapchain = update.recreate_swapchain;VkBool32 noise = update.startup | update.regenerate_noise;VkBool32 ltc_table = update.startup;VkBool32 scene = update.startup | update.reload_scene;VkBool32 render_targets = update.startup;VkBool32 render_pass = update.startup;VkBool32 constant_buffers = update.startup | update.update_light_count | update.change_shading;\n But of course, there are also dependencies to account for. Objects referenced other objects during creation so if these other objects get recreated, they also have to be recreated. For example, recreation of the swapchain usually means that the resolution has changed, so render targets also have to be recreated. This is the part that used to be handled by a dependency graph. Now it is handled by a single loop.\n uint32_t max_dependency_path_length =  16; for (uint32_t i =  0; i != max_dependency_path_length; ++i) { render_targets |= swapchain; render_pass |= swapchain | render_targets; constant_buffers |= swapchain;}\n If you want to be fancy, you can call this a dependency graph. The  | operator defines edges and the loop implements  breadth-first search in a stupid but lean and correct way. The reason why I like this code so much is that almost all of it defines the graph using a compact notation. Only the two lines for the for-loop serve the implementation of the graph traversal. In an object-oriented setting, you could overload the  | operator to get the same syntax. But then nobody would know what that code does without looking up the definition of the operator. Applying an  or to booleans is self-explanatory.\n Once all the dependencies have been propagated, the objects that need to be destroyed get destroyed in reverse order:\n vkDeviceWaitIdle(app-&gt;device.device); if (constant_buffers)  destroy_constant_buffers(&amp;app-&gt;constant_buffers, &amp;app-&gt;device); if (render_pass)  destroy_render_pass(&amp;app-&gt;render_pass, &amp;app-&gt;device); if (render_targets)  destroy_render_targets(&amp;app-&gt;render_targets, &amp;app-&gt;device); if (scene)  destroy_scene(&amp;app-&gt;scene, &amp;app-&gt;device); if (ltc_table)  destroy_ltc_table(&amp;app-&gt;ltc_table, &amp;app-&gt;device); if (noise)  destroy_noise_table(&amp;app-&gt;noise_table, &amp;app-&gt;device);\n Then, if necessary, the swapchain gets resized without recreating the underlying window. Finally, all other objects get recreated. It is guaranteed that all the objects they depend on have been recreated first. This step exploits  short-circuit evaluation for compact code that aborts at the first error.\n if ( (noise &amp;&amp;  load_noise_table(&amp;app-&gt;noise_table, &amp;app-&gt;device,  get_default_noise_resolution(app-&gt;render_settings.noise_type), app-&gt;render_settings.noise_type))|| (ltc_table &amp;&amp;  load_ltc_table(&amp;app-&gt;ltc_table, &amp;app-&gt;device, &#34;data/ggx_ltc_fit&#34;,  51))|| (scene &amp;&amp;  load_scene(&amp;app-&gt;scene, &amp;app-&gt;device, app-&gt;scene_specification.file_path, app-&gt;scene_specification.texture_path, VK_TRUE))\n......", "posttime": "2021-06-26 09:27:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "c++,\u518d\u89c1,goodbye,\u4ee3\u7801", "title": "\u518d\u89c1C ++\uff0c\u4f60\u597dC ", "title_en": "Goodbye C++, Hello C", "transed": 1, "url": "https://momentsingraphics.de/ToyRenderer1KeepItSimple.html", "via": "", "real_tags": ["c++", "\u518d\u89c1", "goodbye", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "5fba5298847b60d5d5d18829a25fff5c.jpeg", "infoid": 1068362, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c3d\u7ba1Waymo\uff0cCruise\uff0cTesla\u7b49\u96c4\u5fc3\u58ee\u5fd7\uff0cRobotaxis\u5c1a\u672a\u5f7b\u5e95\u6539\u53d8\u7f8e\u56fd\u7684\u4ea4\u901a\uff0c\u5e76\u7559\u5728\u6c38\u6052\u7684\u6280\u672f\u53d1\u5c55\u72b6\u6001\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u81ea\u6cbb\u8f66\u8f86\u5df2\u7ecf\u5728\u77ff\u4e1a\u548c\u5efa\u7b51\u7b49\u91cd\u578b\u884c\u4e1a\u7684\u5168\u804c\u5de5\u4f5c\u3002\n \uff06\uff0339; S Safeai\u521b\u59cb\u4eba\u548c\u9996\u5e2d\u6267\u884c\u5b98Bibhrajit Halder\u79bb\u5f00\u4e86\u4ed6\u7684\u81ea\u4e3b\u5ba2\u8f66\u843d\u540e\u7684\u4e00\u4e2a\u539f\u56e0\u3002\u521d\u6b65\u6539\u9020\u5df2\u7ecf\u5728\u91cd\u5de5\u4e1a\u4e2d\u53d7\u6b22\u8fce\u7684\u8f66\u8f86\u548c\u8bbe\u5907 - \u5305\u62ec\u8fd0\u8f93\u6216\u7ffb\u6597\u8f66\uff0c\u4f20\u8f93\u5668\u548c\u6ed1\u52a8\u9609\u725b - \u4e0e\u5176\u81ea\u6cbb\u7cfb\u7edf\u3002\n  \u54c8\u5fb7\u66fe\u5728\u798f\u7279\uff0c\u6cd5\u62c9\u7b2c\u672a\u6765\u548c\u82f9\u679c\u4e2d\u81f4\u529b\u4e8e\u81ea\u4e3b\u8f6f\u4ef6\u548c\u7cfb\u7edf\uff0c\u7ee7\u627f\u91cd\u578b\u8bbe\u5907\u5236\u9020\u5546Caterpillar\u4e4b\u540e\uff0c\u4ed6\u5728\u4ed6\u4eec\u7684\u5f00\u521b\u6027\u81ea\u4e3b\u91c7\u77ff\u5361\u8f66\u4e0a\u5de5\u4f5c\u3002\n \u9996\u5e2d\u6267\u884c\u5b98\u89e3\u91ca\u8bf4\uff0c\u7ecf\u8425\u51fa\u79df\u8f66\u662f\u4e00\u79cd\u4e0d\u540c\u7684\u76c8\u5229\u5de5\u4f5c\uff0c\u800c\u4e0d\u662f\u53ef\u4ee5\u5728\u77ff\u5c71\uff0c\u91c7\u77f3\u573a\u6216\u5efa\u9020\u6c34\u575d\u6216\u5176\u4ed6\u57fa\u7840\u8bbe\u65bd\u5468\u56f4\u79fb\u52a8\u6750\u6599\u7684\u4e0d\u540c\u4e14\u76c8\u5229\u7684\u5de5\u4f5c\u3002\n \u5728\u516c\u5171\u9053\u8def\u5468\u56f4\u8fd0\u8f93\u4e58\u5ba2\u9700\u8981\u80fd\u591f\u5e94\u5bf9\u826f\u597d\u548c\u574f\u53f8\u673a\uff0c\u884c\u4eba\uff0c\u9053\u8def\u590d\u6742\u89c4\u5219\u548c\u5176\u4ed6\u6311\u6218\u7684\u8f66\u8f86\u3002\u79fb\u52a8\u6750\u6599\u548c\u8bbe\u5907\uff0c\u5728\u7279\u5b9a\u4e8e\u73b0\u573a\u7684\u8f83\u4f4e\u901f\u5ea6\u548c\u4ec5\u9650\u8bb8\u53ef\u7684\u4e13\u4e1a\u4eba\u58eb\u5728\u73b0\u573a\u5141\u8bb8\u7684\u53d7\u9650\u73af\u5883\uff0c\u5e76\u4e0d\u7b80\u5355 - \u4f46\u5b83\u6bd4\u5ba2\u8fd0\u66f4\u7b80\u5355\u3002\n \u53ea\u8981\u4ed6\u4eec\u589e\u52a0\u8239\u961f\u7684\u5b89\u5168\u6027\u548c\u751f\u4ea7\u529b\uff0c\u77ff\u4e1a\u548c\u5efa\u7b51\u4e2d\u4f7f\u7528\u7684\u8f66\u8f86\u7684\u6240\u6709\u8005\u4e5f\u613f\u610f\u652f\u4ed8\u6700\u5148\u8fdb\u7684\u7cfb\u7edf\u3002\u5927\u591a\u6570\u51fa\u79df\u8f66\uff0c\u8c6a\u534e\u8f7f\u8f66\u6216\u9a91\u58eb\u5546\u4eba\u53ef\u4ee5\u5728\u4eca\u5929\u7684\u6210\u672c\u4e0a\uff06\uff0339; T\u5408\u7406\u7684\u81ea\u52a8\u5316\u8f66\u961f\u3002\n \u4e0e\u6b64\u540c\u65f6\uff0c\u5efa\u8bbe\u8005\u548c\u77ff\u5de5\u5df2\u7ecf\u5728\u91cd\u578b\u8bbe\u5907\u4e2d\u53d6\u5f97\u4e86\u91cd\u5927\u6295\u8d44\u3002 \nHalder\u8bf4\uff0c\u8fc7\u53bb\u5e38\u7528\u4e8e\u804c\u4e1a\u7f51\u7ad9\u5468\u56f4\u7684\u5927\u91cf\u6750\u6599\u7684\u8f66\u8f86\u56f4\u7ed5\u5de5\u4f5c\u573a\u6240\u7684\u6570\u91cf\u8d85\u8fc7100\u4e07\u7f8e\u5143\uff0c\u52a0\u4e0a\u6570\u5341\u4e07\u7f8e\u5143\u7684\u8fd0\u8425\u6210\u672c\uff0c\u5982\u52b3\u52a8\u529b\uff0c\u71c3\u6599\uff0c\u670d\u52a1\u548c\u7ef4\u62a4\u7b49\u3002\n \uff06\uff0339; S Sufeai\u4e13\u6ce8\u4e8e\u6539\u9020\u73b0\u6709\u8f66\u8f86\u800c\u4e0d\u662f\u5efa\u7acb\u65b0\u7684\u539f\u56e0\u3002\u8fd9\u5bb6\u56db\u5c81\u7684\u516c\u53f8\u4f7f\u7528\u5305\u62ec\u6444\u50cf\u673a\uff0c\u5fae\u5904\u7406\u5668\u548c\u6fc0\u5149\u96f7\u8fbe\u4f20\u611f\u5668\u7684\u73b0\u6210\u5305\u88c5\u6210\u5206\u5f00\u53d1\u4e86\u81ea\u4e3b\u7cfb\u7edf\uff0c\u7136\u540e\u5199\u4e86\u81ea\u5df1\u7684\u673a\u5668\u5b66\u4e60\u8f6f\u4ef6\u3002\u5728\u4e00\u8f86\u8fd0\u8f93\u5361\u8f66\u4e2d\uff0c\u8fd9\u6709\u52a9\u4e8e\u5efa\u8bbe\u8005\u548c\u77ff\u5de5\u5728\u6ca1\u6709\u4efb\u4f55\u4eba\u4e3a\u5e72\u9884\u7684\u60c5\u51b5\u4e0b\u7ba1\u7406\u8d1f\u8f7d\u62d6\u8f66\u5faa\u73af\u3002\n \u5de5\u4eba\u4ecd\u7136\u5fc5\u987b\u5c06\u6c61\u57a2\u88c5\u8f7d\u5230\u5361\u8f66\u4e0a\uff0c\u4f46\u662f\u88c5\u5907\u91ce\u72d7\u7684\u8f66\u8f86\u53ef\u4ee5\u4e86\u89e3\u5176\u5e8a\u4e0a\u7684\u91cd\u91cf\uff0c\u5e76\u4e14\u5f53\u5b83\u5230\u8fbe\u5bb9\u91cf\u65f6\uff0c\u5c06\u6c61\u57a2\u5e26\u5230\u7cbe\u786e\u7684\u4f4d\u7f6e\u5e76\u81ea\u52a8\u8f6c\u50a8\u3002\n  \u4e0eSafeai\u7cfb\u7edf\u7684\u6ed1\u52a8\u5f0f\u53ef\u4ee5\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u62fe\u53d6\u548c\u643a\u5e26\u6c61\u57a2\uff0c\u96ea\u6216\u6d6a\u8d39\u3002\n \u970d\u5c14\u8bf4\uff0c\uff06\uff0334;\u56e0\u4e3a\u8fd9\u90fd\u662f\u79c1\u4eba\u571f\u5730\uff0c\u6ca1\u6709\u8054\u90a6\u6388\u6743\uff0c\u8fd9\u5c06\u963b\u6b62\u4f7f\u7528\u81ea\u6cbb\u7cfb\u7edf\u3002\u6240\u4ee5\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u76d1\u7ba1\u969c\u788d\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u4e13\u6ce8\u4e8e\u6240\u6709\u5b89\u5168\u6807\u51c6\u3002\uff06\uff0334;\n \u4ed6\u6307\u51fa\uff0c\u6bdb\u6bdb\u866b\u548c\uff0339;\u81ea\u4e3b\u8f66\u8f86\u5df2\u7ecf\u5728\u6ca1\u6709\u5355\u4e00\u4e8b\u6545\u7684\u60c5\u51b5\u4e0b\u79fb\u52a8\u4e86\u8d85\u8fc730\u4ebf\u5428\u7684\u6750\u6599\uff0c\u8fd9\u6709\u52a9\u4e8e\u8be5\u884c\u4e1a\u5bf9\u81ea\u4e3b\u6280\u672f\u6709\u4fe1\u5fc3\u3002\n  \u603b\u90e8\u4f4d\u4e8e\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7c73\u5c14\u76ae\u5854\u65af\uff0c\u5728\u73c0\u65af\uff0c\u6fb3\u5927\u5229\u4e9a\u548c\u4e1c\u4eac\u7684\u529e\u4e8b\u5904\uff0cSafeai\u521a\u521a\u7b79\u96c6\u4e862100\u4e07\u7f8e\u5143\u7684\u4e00\u7cfb\u5217\u7ecf\u6d4e\u578b\u516c\u53f8\uff0c\u8fd9\u662f\u4e00\u5bb6\u4e13\u6ce8\u4e8e\u73b0\u4ee3\u5316\u7684\u9648\u65e7\u5de5\u4e1a\u7684\u65e7\u91d1\u5c71\u516c\u53f8\u7684\u4e00\u7cfb\u5217\u98ce\u9669\u8d44\u91d1\u3002\u5305\u62ec\u65e5\u672c\u5efa\u7b51\u5de8\u5934Obayashi\uff0c\u6fb3\u5927\u5229\u4e9a\u77ff\u4e1a\u516c\u53f8Maca\u548c\u5370\u5ea6\u4f01\u4e1a\u96c6\u56e2Vimson\u96c6\u56e2\u5728\u5185\u7684\u5de5\u4e1a\u53c2\u4e0e\u8005\u8fd8\u4e0e\u5176\u4ed6\u98ce\u9669\u6295\u8d44\u8005\u4e00\u8d77\u652f\u6301\u5b89\u5168\u7684AI\u3002 \n\u5efa\u8bbe\u8005\u666e\u901a\u4f19\u4f34Mark Blackwell\u544a\u8bc9CNBC\u4ed6\u7684\u516c\u53f8\u662f\u56e0\u4e3a\u5b83\u7684\u521b\u59cb\u4eba\uff06\uff0339;\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u80cc\u666f\uff0c\u4ee5\u53ca\u5e02\u573a\u613f\u610f\u62e5\u62b1\u66f4\u591a\u7684\u81ea\u6cbb\u8f66\u8f86\u3002\u4f46\u4ed6\u8fd8\u8868\u793a\uff0c\u4ed6\u5e0c\u671bSafeai\u53ef\u4ee5\u4f7f\u6316\u6398\u548c\u5efa\u9020\u66f4\u591a\u73af\u4fdd\u7684\u5de5\u4f5c\u548c\u66f4\u5b89\u5168\u3002\n \uff06\uff0334;\u75bc\u75db\u70b9\u5728\u91c7\u77ff\u4e2d\u662f\u6025\u6027\u7684\u3002\u8be5\u884c\u4e1a\u4ee3\u8868\u5168\u7403\u52b3\u52a8\u529b\u76841\uff05\uff0c\u4f46\u5de5\u4f5c\u4e2d\u76848\uff05\u662f\u81f4\u547d\u7684\u3002\u5f53\u4f60\u81ea\u52a8\u8fd0\u884c\u65f6\uff0c\u60a8\u53ef\u4ee5\u66f4\u5b89\u5168\uff0c\u51cf\u5c11\u71c3\u6599\uff0c\u6bcf\u8f86\u8f66\u8282\u77017\uff05\u3002\uff06\uff0334;\n Safeai\u4e13\u6ce8\u4e8e\u5728\u77ff\u4e1a\u548c\u5efa\u8bbe\u7684\u53d7\u9650\u73af\u5883\u4e2d\u5de5\u4f5c\uff0c\u5e76\u8ba1\u5212\u5728\u65e5\u672c\uff0c\u6fb3\u5927\u5229\u4e9a\u548c\u7f8e\u56fd\u6269\u5c55\u5176\u8d44\u91d1\u3002\u4f46\u54c8\u5c14\u5fb7\u7ef4\u62a4\u4e86\u4e00\u4e2a\u8010\u5fc3\u4e50\u89c2\u7684\u8fd0\u8f93\u8f66\u8f86\u3002\n \u4ed6\u8bf4\uff0c\uff06\uff0334;\u8fd9\u9879\u6280\u672f\u5e76\u4e0d\u662f\u90a3\u4e48\u3002\u4f46\u7531\u4e8e\u8fd9\u4e2a\u5174\u8da3\u548c\u8d44\u91d1\u7684\u6570\u91cf - \u5728\u51e0\u5341\u7f8e\u5143\u6295\u5165\u4e86\u65e0\u4eba\u9a7e\u9a76\u8f66\u8f86\u7684\u4e16\u754c - \u5b83\uff06\uff0339;\u771f\u7684\u5728\u79fb\u52a8\u3002\u6211\u4eec\u4f1a\u5230\u8fbe\u90a3\u91cc\u3002\u4f46\u6211\u8ba4\u4e3a\u6211\u4eec\u9700\u8981\u8010\u5fc3\u7b49\u5f85\u3002\u6211\u4eec\u82b1\u4e86100\u5e74\u7684\u65f6\u95f4\u8ba9\u6c7d\u8f66\u5c3d\u53ef\u80fd\u597d\u3002\uff06\uff0334; ", "note_en": "Despite the ambitions of  Waymo,  Cruise,  Tesla and others, robotaxis have yet to revolutionize transportation in the U.S., and remain in a state of perpetual technical development. Meanwhile, autonomous vehicles are already at work full-time in heavy industries like mining and construction.\n That&#39;s one reason SafeAI founder and CEO Bibhrajit Halder left his autonomous passenger vehicle work behind. The start-up retrofits vehicles and equipment that are already popular in heavy industries -- including haul or dump trucks, dozers, and skid steers -- with its autonomous systems.\n  Halder previously worked on autonomous software and systems at  Ford, Faraday Future and  Apple following a long tenure with heavy equipment maker  Caterpillar, where he worked on their pioneering autonomous mining truck.\n The CEO explained that operating a taxi is a different and less profitable job than operating equipment that can move materials around a mine, quarry, or to build dams or other infrastructure.\n Transporting passengers around public roadways requires vehicles that can cope with a mix of good and bad drivers, pedestrians, complex rules of the road and other challenges. Moving materials and equipment, at site-specific lower speeds and in constrained environments where only licensed professionals are allowed on-site, is not simple -- but it&#39;s simpler than passenger transport.\n Owners of vehicles used in mining and construction are also willing to pay for state-of-the-art systems as long as they increase the safety and productivity of their fleets. Most taxi, limo or rideshare businesses can&#39;t afford fleets of sophisticated automated vehicles at today&#39;s costs.\n At the same time, builders and miners have already made significant investments in heavy equipment.\n  Some of the vehicles used to haul tons of materials around job sites can cost more than $1 million up front, plus hundreds of thousands of dollars a year in operational costs such as labor, fuel, service and maintenance, Halder says.\n That&#39;s one reason why SafeAI focused on retrofitting existing vehicles rather than building new ones. The four-year-old company developed its autonomous systems using off-the-shelf components including cameras, microprocessors and lidar sensors, then wrote its own machine learning software. In a haul truck, this helps builders and miners manage a load-haul-dump cycle without any human intervention.\n Workers still have to load dirt onto the truck, but the SafeAI-equipped vehicle can understand how much weight is in its bed, and when it reaches capacity the carry the dirt to a precise location and dump it automatically.\n  A skid-steer with the SafeAI system can pick up and carry dirt, snow or waste in a similar manner.\n Halder says, &#34;Since this is all on private land, there&#39;s no federal mandate that would prevent use of autonomous systems. So we do not have any regulatory hurdles. Instead, we focus on all the safety standards.&#34;\n He notes that Caterpillar&#39;s autonomous vehicles have moved more than 3 billion tons of material without a single accident, which has helped the industry have faith in autonomous technology.\n  Headquartered in Milpitas, California, with offices in Perth, Australia, and Tokyo, SafeAI just raised $21 million in a Series A round of venture funding led by Builders VC, a San Francisco firm focused on tech that modernizes antiquated industries. Industry players including Japanese construction giants Obayashi, Australian mining firm Maca and Indian conglomerate Vimson Group are also backing Safe AI along with other venture investors.\n Builders general partner Mark Blackwell told CNBC his firm backed SafeAI in part because of its founder&#39;s impressive background, and the market&#39;s readiness to embrace more autonomous vehicles. But he also said he has hope SafeAI can make the work of mining and building more environmentally sound, and safer.\n &#34;The pain points are acute in mining. The industry represents 1% of the global workforce, but 8% of fatalities at work. When you run autonomously, you can operate more safely and reduce fuel, saving 7% per year per vehicle.&#34;\n SafeAI is focused on working within the constrained environments of mining and construction, and plans to use its funding to expand in Japan, Australia and the US. But Halder maintains a patiently optimistic outlook for driverless vehicles in transportation.\n He said, &#34;The technology is not quite there. But because of the amount of interest and funding in this\u2013 with tens of billions invested in to the world of driverless vehicles\u2013 it&#39;s really moving along. We will get there. But I think we need to be patient. It took us 100 years to make cars as good as they are now.&#34;", "posttime": "2021-06-26 08:45:11", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u5efa\u7b51,\u8f66\u8f86,led", "title": "Safeai\uff0c\u5b83\u6539\u9020\u4e86\u72ec\u7acb\u5f0f\u8f66\u8f86\uff0c\u63a8\u571f\u673a\u548c\u5177\u6709\u81ea\u4e3b\u7cfb\u7edf\u7684\u6ed1\u52a8\u9609\u725b\u7b49\u5de5\u4e1a\u8f66\u8f86\uff0c\u7531\u5efa\u7b51\u5546VC\u63d0\u9ad82100\u4e07\u7f8e\u5143\u7684\u7cfb\u5217 ", "title_en": "SafeAI, which retrofits industrial vehicles like dump trucks, bulldozers, and skid steers with autonomous systems, raises $21M Series A led by Builders VC", "transed": 1, "url": "https://www.cnbc.com/2021/06/22/safeai-raises-21-million-to-build-smart-vehicles-for-heavy-industry.html", "via": "", "real_tags": ["\u5efa\u7b51", "\u8f66\u8f86", "led"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068361, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Windows NT\u4e0a\u7684Alpha\u5df2\u7ecf\u6b7b\u4e86\u3002\u5c31NT\u800c\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u82f1\u7279\u5c14\u4e16\u754c\u3002\n \u4e0a\u5468\uff0c\u5eb7\u67cf\u5ba3\u5e03\uff0c\u5b83\u5728\u5176\u5728Microsoft\u6821\u56ed\u9644\u8fd1\u7684Dewwest\u8bbe\u65bd\u4e2d\u94fa\u8bbe\u4e86\u8d85\u8fc7100\u540d\u7684Alpha / NT\u5458\u5de5\u3002\u8fd9\u7ec4\u5f00\u53d1\u5546\u662f\u5728NT\u6280\u672f\u73b0\u5b9e\u4e0a\u5236\u4f5c\u963f\u5c14\u6cd5\u3002 Microsoft\u8868\u793a\uff0c\u5eb7\u590d\u5eb7\u67cf\uff06\uff0339;\uff06\uff0339;\uff06\uff0339;\u67b6\u6784\u548c\u7cfb\u7edf\u7684\u529b\u91cf\uff0c\u5fae\u8f6f\u8868\u793a\uff0c\u5b83\u5c06\u5728\u5176\u73b0\u6709\u4ea7\u54c1\u7ebf\u4e0a\u505c\u6b62\u5f00\u53d1\u672a\u6765\u768432\u4f4d\u548c64\u4f4dalpha\u4ea7\u54c1\u3002\n  \u5386\u53f2\u5728NT\u6545\u4e8b\u4e0a\u7684alpha\u5c06\u5176\u6839\u90e8\u6062\u590d\u5230NT\u7684\u521d\u59cb\u3002 NT\u7684Creator Dave Cutler\u6b63\u5728\u7814\u7a76\u4e00\u4e2a\u65b0\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4ee3\u7801\u547d\u540d\u548c\uff0334;\u4e91\u6bcd\uff0c\uff06\uff0334;\u7528\u4e8e\u6570\u5b57\u8bbe\u5907\u3002\u6570\u5b57\u9884\u671f\u4e91\u6bcd\u662fVM\u7684\u7ee7\u627f\u8005\uff0c\u5e76\u57fa\u4e8eVMS\u7d27\u5bc6\uff08\u56e0\u6b64\uff0cNT\uff06\uff0339;\u5728VM\u4e2d\u5f3a\u5927\u7684\u6839\uff09\u3002\u4e91\u6bcd\u56e2\u961f\u5728\u4e00\u4e2a\u53eb\u505aDewwest\u7684\u57fa\u4e8e\u897f\u96c5\u56fe\u7684\u5730\u70b9\uff0c\u4e00\u5bb6\u529e\u516c\u5ba4\u572880\u5e74\u4ee3\u521d\u5f00\u59cb\u4e8e80\u5e74\u4ee3\u521d\u671f\uff0c\u5f53\u65f6\u4ed6\u6b63\u5728\u7814\u7a76\u6570\u5b57\u7684Microvax I\u9879\u76ee\u3002\n \u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u6570\u5b57\u6740\u6b7b\u4e86\u4e91\u6bcd\u9879\u76ee\u3002\u6293\u4f4f\u673a\u4f1a\uff0c\u5fae\u8f6f\u6311\u9009\u4e86Dave Cutler\u548c\u4ed6\u7684\u4e91\u6bcd\u56e2\u961f\uff0c\u5e76\u8d44\u52a9\u4e86\u5fae\u8f6f\u5185\u90e8\u4e91\u6bcd\u9879\u76ee\u7684\u5ef6\u7eed\u3002\u51e0\u5e74\u540e\uff0cWindows NT\u51fa\u751f\u3002\u7136\u800c\uff0c\u6570\u5b57\u662f\u7591\u4f3cNT\u5b9e\u9645\u4e0a\u662f\u4e91\u6bcd\u91cd\u751f\uff0c\u5e76\u8058\u8bf7\u4e86\u4e00\u4e2aOS\u4e13\u5bb6\u6765\u786e\u5b9a\u76f8\u4f3c\u4e4b\u5904\u3002\u6839\u636e\u5185\u90e8\u6765\u6e90\uff0cNT\u7684\u4ee3\u7801\u7684\u8bb8\u591a\u90e8\u5206\u751a\u81f3\u8bc4\u8bba\u90fd\u4e0e\u4e91\u6bcd\u76f8\u540c\u3002\u7ed3\u679c\uff0c\u6570\u5b57\u8d77\u8bc9\u4e86\u5fae\u8f6f\u3002 Microsoft\u548cDigital\u8131\u79bb\u6cd5\u5ead\uff0c\u7ed3\u679c\u662f\u6570\u5b57/\u5fae\u8f6f\u8054\u76df\u3002\n \u4f5c\u4e3a\u8054\u76df\u7684\u4e00\u90e8\u5206\uff0cMicrosoft\u627f\u8bfa\u652f\u6301NT\u4e0a\u7684Alpha\u5904\u7406\u5668\uff0c\u5e76\u786e\u4fddMicrosoft\u7684BackOffice\u4ea7\u54c1\uff08\u5373SQL Server\uff0cExchange Server\uff0cInternet Information Server-IIS\uff09\u5c06\u662f\u5b8c\u5168\u517c\u5bb9\u7684\uff0c\u5e76\u540c\u65f6\u53ef\u7528\u82f1\u7279\u5c14\u7b49\u4ef7\u7269\u3002\u6570\u5b57\u6dfb\u52a0\u4e86100\u591a\u540d\u5de5\u7a0b\u5e08\u6765\u89e3\u9664\u4e86Decwest\uff0c\u4efb\u52a1\u662f\u5728NT\u6280\u672f\u73b0\u5b9e\u4e0a\u5236\u4f5calpha\u3002\u4f5c\u4e3a\u534f\u8bae\u7684\u4e00\u90e8\u5206\uff0cDigital\uff08\u73b0\u4e3aCompaq\uff09\u548cMicrosoft\u5c06\u5177\u6709\u4e0eNT\u76f8\u5173\u6280\u672f\u7684\u6c38\u4e45\u4ea4\u53c9\u8bb8\u53ef\uff0c\u5305\u62ec\u5b8c\u5168\u8bbf\u95ee\u6e90\u4ee3\u7801\u3002\n \u8be5\u8054\u76df\u672a\u627f\u8bfa\u7684\u662f\u652f\u6301Microsoft\u7684\u529e\u516c\u5ba4\uff0c\u5f00\u53d1\u4eba\u5458\u5de5\u5177\u6216\u4efb\u4f55\u5176\u4ed6\u684c\u9762\u4ea7\u54c1\u7684\u652f\u6301\u3002\u5982\u679c\u6570\u5b57\u5e0c\u671b\u5176alpha\u82af\u7247\u5b9e\u73b0\u4e0e\u82f1\u7279\u5c14\u7684\u5e94\u7528\u5e73\u4ef7\uff0c\u6570\u5b57\u9700\u8981\u4e3a\u6bcf\u5e74\u63d0\u4f9b\u8425\u9500\u548c\u5f00\u53d1\u52aa\u529b\u7684\u8425\u9500\u548c\u53d1\u5c55\u52aa\u529b\u3002\u6570\u5b57\u662f\u8425\u9500alpha\u6280\u672f\u7684\u597d\u7684\u5de5\u4f5c\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aFX\uff0132\u768432\u4f4d\u82f1\u7279\u5c14\u4eff\u771f\u5668\uff0c\u5438\u5f15\u4e86\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u4f9b\u5e94\u5546\uff0c\u8ba9\u5916\u90e8\u5236\u9020\u5546\u5236\u9020\u4e86alpha\u82af\u7247\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u57fa\u4e8ealpha\u7684\u5de5\u4f5c\u7ad9\u548c\u670d\u52a1\u5668\u3002\u9664\u4e86\u5c11\u6570\u5b64\u7acb\u7684\u6d3b\u52a8\u4e4b\u5916\uff0c\u5982\u53ef\u6269\u5c55\u6027\u65e5\u671f\u6216WinHEC\uff0c\u5fae\u8f6f\u5728NT\u4e0a\u6ca1\u6709\u5e02\u573aalpha\u3002\n \u5f53\u5eb7\u67cf\u8d2d\u4e70\u6570\u5b57\u65f6\uff0c\u5f88\u591a\u4eba\u90fd\u62c5\u5fc3alpha\u82af\u7247\u4f1a\u6b7b\u3002\u7136\u800c\uff0cCompaq\u627f\u8bfa\u901a\u8fc7\u5ba3\u5e03\u5176\u4e32\u8054\u559c\u9a6c\u62c9\u96c5\u8ba1\u7b97\u673a\u7684\u672a\u6765\u7248\u672c\u5c06\u4eceMIPS\u82af\u7247\u79fb\u52a8\u5230Alpha\u82af\u7247\u7684\u672a\u6765\u7248\u672c\u6765\u91cd\u65b0\u652f\u6301Alpha\u3002\u6b64\u5916\uff0c\u6570\u5b57UNIX\uff08TRU64\uff09\uff0cNT\u548cVMS\u5c06\u7ee7\u7eed\u4f7f\u7528\u548c\u6539\u8fdbalpha\u6280\u672f\u3002 Compaq\u6700\u8fd1\u5411Linux\u6dfb\u52a0\u4e86Alpha\u652f\u6301\u3002 \n\u7136\u800c\uff0c64\u4f4d\u95ee\u9898\u4ecd\u7136\u5b58\u5728\uff1aalpha\u66fe\u7ecf\u5b9e\u73b0\u4e86\u4e0e\u82f1\u7279\u5c14\u7ade\u4e89\u7684\u89c4\u6a21\u7ecf\u6d4e\uff0c\u8fd8\u662f\u5e94\u8be5\u5b9a\u4f4d\u4e3a\u9ad8\u7aef\u8ba1\u7b97\u7684\u4f4e\u5bb9\u91cf\uff0c\u9ad8\u4fdd\u8bc1\u91d1\u82af\u7247\uff1f\u7b54\u6848\u5f88\u6e05\u695a\u3002\u5b83\u5c06\u662f\u4e00\u4e2a\u9ad8\u7aef\uff0c\u4f4e\u5377\u82af\u7247\uff0c\u5bf9\u4e8e\u559c\u9a6c\u62c9\u96c5\uff0cTRU64\u548cOpenVM\u975e\u5e38\u91cd\u8981\uff0c\u4f46\u4e0d\u9002\u5408\u5927\u6279\u91cfNT\u5e02\u573a\u3002\u7ed3\u679c\uff0cNT\u8425\u9500\u7684Alpha\u662f\u4e0d\u5b58\u5728\u7684\u3002\u6570\u5b57\u7531\u6570\u5b57\u521b\u5efa\u7684\u4efb\u4f55alpha / nt\u52bf\u5934\u7a81\u7136\u7ed3\u675f\u3002\n Linux\u6700\u521d\uff0cNT\u652f\u6301\u56db\u79cdCPU\u7c7b\u578b\uff1aMIPS\uff0cAlpha\uff0cPowerPC\u548cIntel\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8ffd\u6c42NT\u5e02\u573a\u6240\u9700\u7684\u8425\u9500\u548c\u5f00\u53d1\u8d44\u6e90\u5c06\u5e02\u573a\u51cf\u5c11\u5230NT / Intel\u3002\u5982\u4eca\uff0cLinux\u652f\u6301\u8bb8\u591aCPU\u7c7b\u578b\uff0c\u5305\u62ecAlpha\u3002\u8fd9\u662f\u5f00\u6e90\u4e0e\u5c01\u95ed\u6e90\u5f00\u53d1\u7684\u80dc\u5229\u5417\uff1f\u5373\u4f7f\u5377\u4e0d\u652f\u6301\u5b83\uff0c\u5f00\u6e90\u793e\u533a\u662f\u5426\u4f1a\u7ee7\u7eed\u652f\u6301Alpha\u5417\uff1f\u4e5f\u8bb8\u6709\u8db3\u591f\u7684\u5f00\u6e90Linux\u5f00\u53d1\u4eba\u5458\u5728\u5c3d\u7ba1\u6709\u4e86\u5e02\u573a\u52a8\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4fdd\u6301Alpha / Linux\uff0c\u5c3d\u7ba1\u662f\u5bf9\u53d1\u5c55\u548c\u652f\u6301Linux\u793e\u533a\u7684\u70ed\u7231\u3002\u65f6\u95f4\u4f1a\u544a\u8bc9\u3002\n \u4eca\u5929\u7684\u672a\u6765\uff0cDave Cutler\u7684\u56e2\u961f\u6b63\u5728\u4f7f\u7528\u57fa\u4e8ealpha\u7684\u7cfb\u7edf\u6765\u5f00\u53d164\u4f4dNT\u3002\u5728WinHEC\uff089\u670899\u65e5\uff09\uff0c\u5fae\u8f6f\u80fd\u591f\u5728\u57fa\u4e8eAlpha\u7684\u8ba1\u7b97\u673a\u4e0a\u542f\u52a864\u4f4dNT\u3002\u4f46\u662f\uff0c\u5728\u76ee\u524d\u7684\u53d1\u5c55\u6b65\u4f10\uff0c\u82f1\u7279\u5c14\u53ef\u4ee5\u572864\u4f4dNT\u51c6\u5907\u597d\u65f6\u63d0\u4f9b64\u4f4d\u82af\u7247\uff08\u9ed8\u585e\u5fb7\uff09\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u5219alpha\u9996\u5148\u7684\u4e8b\u5b9e\u4f1a\u63d0\u4f9b\u5f88\u5c11\u7684\u7ade\u4e89\u4f18\u52bf\u3002 Microsoft\u5c0664\u4f4dNT\u670d\u52a1\u5668\u5b9a\u4f4d\u4e3a\u9700\u8981\u6700\u5927\u53ef\u4f38\u7f29\u6027-E.g\u7684\u90a3\u4e9b\u5e94\u7528\u7a0b\u5e8f\u7684\u9ad8\u7aef\uff0c\u4f4e\u5377\u89e3\u51b3\u65b9\u6848 - \u4f8b\u5982\uff0c\u9700\u8981\u4e00\u4e2a\u5927\u7684SQL Server\u6570\u636e\u5e93\uff0c\u5176\u9700\u8981\u9ad8\u901f\u7f13\u5b58\u7684RAM\u3002\u5bf9\u4e8e\u8fd9\u79cd\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c64\u4f4d\u7248\u672c\u7684NT\u5728alpha\u4e0e\u9ed8\u585e\u5fb7\u4e0a\u4f1a\u66f4\u597d\u5730\u8868\u73b0\u66f4\u597d\u5417\uff1f\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u6700\u5feb\u5c31\u4e0d\u4f1a\u514b\u670d\u82f1\u7279\u5c14\u7684\u7ade\u4e89\u4f18\u52bf\uff1a\u517c\u5bb9\u6027\u548c\u6210\u672c\u3002\u5728\u8fc7\u53bb\uff0cCompaq\u5c06\u4e3a\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\u5b9a\u4f4dVM\uff0cTRUE64\u6216HimAlaya\u7cfb\u7edf\u3002 Compaq\u5c0664\u4f4dNT\u5bf9\u6297VM\uff0cTRU64\u6216Himalaya\u5417\uff1f\u4e0d\u89c1\u5f97\u3002\u53ef\u4ee5\u5728NT\u4e0a\u768464\u4f4dAlpha Windows 2000 Professional\uff08Win2k Pro\uff09\u5de5\u4f5c\u7ad9\u4fdd\u5b58Alpha\u5417\uff1f\u51b3\u4e0d\u3002\u56e0\u6b64\uff0cNT\u4e0a\u7684Alpha\u5df2\u7ecf\u6b7b\u4e86\u3002\n \u53ea\u6709\u82f1\u7279\u5c14\u7684NT\u7248\u672c\u662f\u5426\u4f1a\u4ece\u6839\u672c\u4e0a\u6539\u53d8NT\uff1f \uff06\uff0334;\u4e0d\u592a\u53ef\u80fd\uff0c\uff06\uff0334; Mark Russinovich\u662fWindows NT\u6742\u5fd7NT Internals\u4e13\u680f\u7684\u4f5c\u8005\u3002 \uff06\uff0334;\u5185\u6838\u4e2d\u5df2\u7ecf\u6709\u5927\u91cf\u7684\u82f1\u7279\u5c14\u548c\u7279\u5b9a\u4e8ealpha\u7279\u5b9a\u7684\u4f18\u5316\u4ee3\u7801\u3002\u786c\u4ef6\u62bd\u8c61\u5c42\uff08HAL\uff09\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u56e0\u4e3a\u5b83\u4ecd\u7136\u662fOS\u7684\u57fa\u672c\u90e8\u5206\u3002\u6211\u76f8\u4fe1\u5fae\u8f6f\u5e0c\u671b\u5c06\u6765\u7559\u4e0b\u95e8\uff0c\uff06\uff0334; russinovich\u8bf4\u3002\n \u591a\u5e74\u6765\u652f\u6301\uff0c\u6211\u6536\u5230\u4e86\u4f17\u591a\u7535\u5b50\u90ae\u4ef6\uff0c\u6765\u81eaNT\u4e0a\u7684Alpha\u7684\u5feb\u4e50\u548c\u6cae\u4e27\u7684\u7528\u6237\u3002\u5728\u57fa\u4e8eAlpha\u7684\u670d\u52a1\u5668\u4e0a\u4f7f\u7528\u4e00\u4e2aBackOffice\u5e94\u7528\u7a0b\u5e8f\u7684\u7ba1\u7406\u5458\u4f3c\u4e4e\u5bf9\u5176\u7cfb\u7edf\u7684\u6027\u80fd\u548c\u53ef\u9760\u6027\u611f\u5230\u6ee1\u610f\u3002\u63d0\u4f9b\u7684\u989d\u5916\u53ef\u6269\u5c55\u6027\u4ed6\u4eec\u63d0\u4f9b\u7684alpha\u7cfb\u7edf\u4ea7\u751f\u4e86\u5de8\u5927\u7684\u5dee\u5f02\u3002\u5bf9\u4e8ealpha-workstation\u7528\u6237\uff0c\u65e0\u6cd5\u4f7f\u7528\u6700\u65b0\u7248\u672c\u7684Microsoft\u7684\u5f00\u53d1\u4eba\u5458\u5de5\u5177\uff0cOffice\u548c\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u5b58\u5728\u4e0d\u65ad\u7684\u632b\u8d25\u611f\u3002\u867d\u7136FX\uff0132\u63d0\u4f9b\u4e86\u8bb8\u591a\u9700\u8981\u7684\u517c\u5bb9\u6027\uff0c\u4f46\u591a\u6b21\u5b83\u4e0d\u5141\u8bb8\u5176\u82f1\u7279\u5c14\u7b49\u540c\u7269\u7684\u8868\u73b0\uff0c\u8fd9\u51fb\u8d25\u4e86\u67d0\u4eba\u4f1a\u8d2d\u4e70alpha-speed\u7684\u539f\u56e0\uff01\n Microsoft\u548cCompaq\u5df2\u7f16\u5199\u4ed6\u4eec\u8ba1\u5212\u5728NT 4.0\u7684Service Pack 6\uff08SP6\uff09\u4e0a\u7ee7\u7eed\u652f\u6301NT\u4e0a\u7684Alpha\u3002\u8fd9\u5c06\u8ba9\u73b0\u6709\u7528\u6237\u5145\u5206\u5229\u7528\u4ed6\u4eec\u7684\u7cfb\u7edf\uff0c\u4f46\u4eceWin2K\u4e2d\u5220\u9664\u5b83\u4eec\u3002\u5176\u4ed6\u6765\u6e90\uff0c\u5982Aaron Sakovich\u7684\u963f\u73ed\u7ad9\u200b\u200b\u70b9\uff08http://www.alphant.com\uff09\u5c06\u7ee7\u7eed\u652f\u6301NT\u7528\u6237\u7684Alpha\uff0c\u5176\u4e2d\u5305\u542b\u6700\u65b0\u7684\u65b0\u95fb\uff0c\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5e94\u7528\u7a0b\u5e8f\u548c\u63d0\u793a\u3002\n alpha\u6211\u7684\u5fc3\u7684\u5f71\u54cd\u8d8a\u6765\u8d8a\u4e0d\u77e5\u4e0d\u89c9\u5730\u652f\u6301\u5fe0\u8bda\u8005\uff0c\u7528\u6237\uff0c\u5f00\u53d1\u4eba\u5458\u548c\u4f9b\u5e94\u5546\u7684\u793e\u533a\u3002\u6211\u76f8\u4fe1NT\u7684Alpha\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u52a8\u4f5c\u82f1\u7279\u5c14\u7684\u6027\u80fd\u680f\uff0c\u4ee5\u6539\u5584\u5176\u82af\u7247\u4ea7\u54c1\u6bd4\u8fc7\u53bb\u66f4\u5feb\u3002\u5728\u8fc7\u53bb\u76842\u5e74\u91cc\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u82f1\u7279\u5c14\u7684\u663e\u7740\u6027\u80fd\u63d0\u9ad8 - \u8fd9\u5f88\u96be\u8ddf\u4e0a\u3002\u5dee\u8ddd\u660e\u663e\u5173\u95ed\u3002 NT\u4e0a\u7684Alpha\u4e22\u5931\u53ef\u80fd\u4f1a\u51cf\u6162\u6b64\u8fc7\u7a0b\u3002\u635f\u5931\u4e5f\u964d\u4f4e\u4e86\u5fae\u8f6f\u53ef\u80fd\u5bf9\u6297\u82f1\u7279\u5c14\u7684\u4efb\u4f55\u5229\u7528\u3002\u6240\u6709NT\u9e21\u86cb\u73b0\u5728\u90fd\u5728\u4e00\u4e2a\u7bee\u5b50\u91cc\uff0c\u65e0\u8bba\u597d\u574f\u3002\u5176\u4e2d\u4e00\u4e2a\u65e5\u5b50\uff0c\u91ce\u5154\u53ef\u80fd\u4f1a\u51fb\u8d25\u4e4c\u9f9f\uff0c\u4f46\u4eca\u5929\u4e0d\u662f\u3002 \n\u7f16\u8f91\uff06\uff0339; s\u6ce8\u610f\uff1a\u6709\u5173NT\u4e0a\u7684Alpha\u989d\u5916\u9605\u8bfb\uff0c\u8bf7\u53c2\u9605\u4ee5\u4e0bWindows NT\u6742\u5fd7\u6587\u7ae0\u3002 \uff08\u8981\u5728\u7ebf\u67e5\u770b\u6587\u7ae0\uff0c\u60a8\u5fc5\u987b\u662fWindows NT\u6742\u5fd7\u8ba2\u9605\u8005\u3002\uff09 ", "note_en": "Alpha on Windows NT is dead. As far as NT goes, it\u2019s an Intel world.\n Last week, Compaq announced that it was laying off more than 100 of its Alpha/NT employees in its DECwest facility located near the Microsoft campus. This group of developers was tasked with making Alpha on NT a technical reality. Citing Compaq&#39;s decision and the strength of Intel&#39;s architecture and systems, Microsoft says it will discontinue development of future 32-bit and 64-bit Alpha products across its existing product line.\n  History  The Alpha on NT story has its roots back to the inception of NT. Dave Cutler, NT\u2019s creator, was working on a new OS, code-named &#34;Mica,&#34; for Digital Equipment. Digital intended Mica to be a successor to VMS and based it closely on VMS (thus, NT&#39;s strong roots in VMS). The Mica team worked at a Seattle-based location called DECwest, an office started by Cutler in the early 80s when he was working on Digital\u2019s MicroVAX I project.\n For some reason, Digital killed the Mica project. Seizing the opportunity, Microsoft picked up Dave Cutler and his Mica team and funded the continuation of the Mica project within Microsoft. A few years later, Windows NT was born. Digital, however, suspected that NT was actually Mica reborn and hired an OS specialist to determine the similarities. According to inside sources, many portions of NT\u2019s code and even the comments were identical to Mica. As a result, Digital sued Microsoft. Microsoft and Digital settled out of court and the result was the Digital/Microsoft Alliance.\n As part of the alliance, Microsoft promised to support the Alpha processor on NT and to ensure that Microsoft\u2019s BackOffice products (i.e., SQL Server, Exchange Server, Internet Information Server\u2014IIS) would be fully compatible and made available at the same time as their Intel equivalents. Digital added more than 100 engineers to DECWest, tasked with making Alpha on NT a technical reality. As part of the agreement, Digital (now Compaq) and Microsoft would have a perpetual cross-license of NT-related technology including full access to the source code.\n What was NOT promised in the alliance was support for Microsoft\u2019s Office, developer tools, or any other desktop products. If Digital wanted its Alpha chip to achieve application parity with Intel, Digital would need to fund the marketing and development efforts to the tune of millions of dollars each year. Digital did an OK job of marketing Alpha technology, creating a 32-bit Intel emulator called FX!32, attracting third-party software vendors, getting outside manufacturers to fabricate Alpha chips, and providing a line of Alpha-based workstations and servers. Other than a few isolated events such as Scalability Day or WinHEC, Microsoft did not market Alpha on NT.\n When Compaq purchased Digital, many people feared that the Alpha chip would die. However, Compaq pledged renewed support for Alpha by announcing that future versions of its Tandem Himalaya computers would move from a MIPS chip to an Alpha chip. In addition, Digital UNIX (Tru64), NT, and VMS would continue to use and improve Alpha technology. Compaq recently added Alpha support to Linux.\n The 64-bit question, however, remained: Can the Alpha ever achieve the economies of scale to compete with Intel or should it be positioned as a low-volume, high-margin chip for high-end computing? The answer is clear. It would be a high-end, low-volume chip, which is great for Himalaya, Tru64, and OpenVMS, but didn\u2019t fit the high-volume NT market. As a result, Alpha on NT marketing was nonexistent. Any Alpha/NT momentum created by Digital ended abruptly.\n Linux  Originally, NT supported four CPU types: MIPS, Alpha, PowerPC, and Intel. Over time, the marketing and development resources required to pursue the NT market reduced the market to NT/Intel. Today, Linux supports many CPU types, including Alpha. Is this a win for open-source vs. closed-source development? Will the open-source community continue to support Alpha over the next 4 years, even if volumes don\u2019t support it? Perhaps there are enough open-source Linux developers who will keep Alpha/Linux alive for years in spite of market dynamics\u2014purely for the love of developing and supporting the Linux community. Time will tell.\n The Future  Today, Dave Cutler\u2019s team is using Alpha-based systems to develop 64-bit NT. At WinHEC (April 99), Microsoft was able to boot 64-bit NT on an Alpha-based computer. However, at the current pace of development, Intel might deliver its 64-bit chip (Merced) by the time 64-bit NT is ready. If this happens, the fact that Alpha was first would offer little competitive advantage. Microsoft will position the 64-bit NT Server as a high-end, low-volume solution for those applications that need maximum scalability\u2014e.g., a large SQL Server database that needs gigabytes of RAM for caching. Would the 64-bit version of NT perform significantly better on the Alpha vs. Merced for this type of application? If not, then being first and fastest would NOT overcome Intel\u2019s competitive advantages: compatibility and cost. In the past, Compaq would position VMS, True64, or a Himalaya system for a highly scalable database application. Will Compaq position 64-bit NT against VMS, Tru64, or Himalaya? Not likely. Could a 64-bit Alpha Windows 2000 Professional (Win2K Pro) workstation save Alpha on NT? No way. Therefore, Alpha on NT is dead.\n Will an Intel-only version of NT fundamentally change NT? &#34;Not likely,&#34; says Mark Russinovich, author of the NT Internals column for Windows NT Magazine. &#34;There\u2019s already a significant amount of Intel and Alpha-specific optimization code in the kernel. The hardware abstraction layer (HAL) won\u2019t be affected because it\u2019s still a fundamental part of the OS. I believe Microsoft would want to leave the door open for other chips in the future,&#34; says Russinovich.\n Support  Over the years, I\u2019ve received numerous emails from happy and frustrated users of Alpha on NT. Administrators using one BackOffice application like Exchange Server on an Alpha-based server seemed satisfied with the performance and reliability of their systems. The extra scalability their Alpha systems provided made a huge difference. For Alpha-workstation users, there is the constant frustration of not being able to use the latest version of Microsoft\u2019s developer tools, Office, and other applications. And although FX!32 provided much needed compatibility, many times it did not allow performance of its Intel equivalents, which defeated the original reason why someone would buy an Alpha\u2014speed!\n Microsoft and Compaq have stated they plan to continue support for Alpha on NT through Service Pack 6 (SP6) for NT 4.0. This will let existing users get full use out of their systems, but cut them off from Win2K. Other sources such as Aaron Sakovich\u2019s AlphaNT site (http://www.alphant.com) will continue to support Alpha on NT users with the latest news, drivers, applications, and tips.\n The Impact of Alpha  My heart goes out to the community of loyalists, users, developers, and vendors that have tirelessly supported Alpha on NT over the years. I believe Alpha on NT set a performance bar that motivated Intel to improve its chip offerings much faster than it had in the past. We\u2019ve seen significant performance gains for Intel over the past 2 years\u2014it\u2019s hard to keep up. The gap has closed significantly. The loss of Alpha on NT might slow this process down. The loss also reduces any leverage Microsoft might have had against Intel. All NT eggs are in one basket now, for better or worse. One of these days, the hare might beat the tortoise, but not today.\n Editor&#39;s Note: For additional reading about Alpha on NT, see the following Windows NT Magazine articles. (To view the articles online, you must be a Windows NT Magazine subscriber.)", "posttime": "2021-06-26 08:44:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u963f\u5c14\u6cd5,alpha,nt", "title": "\u5728NT\uff081999\uff09\u7684\u963f\u5c14\u6cd5\u6b7b\u4ea1 ", "title_en": "The Death of Alpha on NT (1999)", "transed": 1, "url": "https://www.itprotoday.com/compute-engines/death-alpha-nt", "via": "", "real_tags": ["\u963f\u5c14\u6cd5", "alpha", "nt"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068360, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u89c1\u8fc7\u5f88\u591a\u5f88\u7cdf\u7cd5\u7684\u65cb\u8f6c\u9501\uff0c\u56f4\u7ed5\u7740\u4e92\u8054\u7f51\u3002\u4ed6\u4eec\u90fd\u72af\u4e86\u540c\u6837\u7684\u9519\u8bef\uff1a\u5728\u8bfb\u53d6\u4fee\u6539\u5199\uff08RMW\uff09\u64cd\u4f5c\u4e0a\u65cb\u8f6c\u3002 IWILL\u89e3\u91ca\u4e3a\u4ec0\u4e48\u8fd9\u662f\u4e0d\u597d\u7684\uff0c\u5982\u4f55\u5728C ++\u4e2d\u6b63\u786e\u5730\u5b9e\u73b0Spinlock\u3002\u89e3\u91ca\u548c\u5b9e\u73b0\u5c06\u5f88\u5bb9\u6613\u5730\u643a\u5e26\u5230\u5176\u4ed6\u7f16\u7a0b\u8303\u56f4\u5185\u3002\u5728\u5907\u6ce8\u7ed3\u675f\u65f6\uff0c\u6211\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684Spinlock\uff0c\u4ee5\u5b9e\u73b0\u4e92\u65a5\u9501\u540d\u7684\u547d\u540d\u3002\n   \u6700\u57fa\u672c\u7684\u81ea\u65cb\u9501\u901a\u8fc7\u4f7f\u7528\u5e03\u5c14\uff08\u6216\u5355\u4e2a\u4f4d\uff09\u6765\u6307\u793a\u9501\u5b9a\u662f\u5426\u4fdd\u6301\u9501\u5b9a\u3002\u8981\u83b7\u53d6\u9501\u5b9a\u539f\u5b50\u4ea4\u6362\u64cd\u4f5c\uff0c\u7528\u4e8e\u5c06\u5e03\u5c14\u8bbe\u7f6e\u4e3atrue\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u8fd4\u56de\u7684\u5148\u524d\u503c\u4e3afalse\uff0c\u5219\u9501\u5b9a\u9501\u5b9a\uff0c\u5426\u5219\u6211\u4eec\u9700\u8981\u5728\u9501\u5b9a\u6210\u529f\u83b7\u53d6\u9501\u5b9a\u4e4b\u524d\u5c1d\u8bd5\uff1a\n struct tas_lock {std ::\u539f\u5b50\uff06lt; BOOL\uff06GT; lock_ = {false}; void\u9501\uff08\uff09{while\uff08lock_. Exchange\uff08True\uff09\uff09; void\u89e3\u9501\uff08\uff09{lock_\u3002\u5546\u5e97\uff08\u5047\uff09; }};\n \u6b64\u5b9e\u73b0\u901a\u5e38\u79f0\u4e3a\u6d4b\u8bd5\u548c\u8bbe\u7f6e\uff08TAS\uff09\u9501\u5b9a\u3002\u5176\u4ed6\u539f\u5b50\u5316\u53ef\u7528\u4e8e\u5b9e\u73b0\u65cb\u9501\u3002\u5728\u6211\u7684x86_64Architecture\u4e0a\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u6211\u53d1\u73b0\u53ef\u4ee5\u4f7f\u7528\u7684\u7ed3\u5408\u539f\u5b50\u64cd\u4f5c\u4e4b\u95f4\u7684\u65cb\u8f6c\u9501\u6027\u80fd\u7684\u5dee\u5f02\u5f88\u5c0f\u3002\u6b64\u5916\uff0c\u6839\u636eAgnerfog\u7684\u6307\u4ee4\u8868\u548cUPOS.INFOALL\u9501\u5b9a\u524d\u7f00\u6307\u4ee4\u5177\u6709\u975e\u5e38\u76f8\u4f3c\u7684\u6307\u4ee4\u5ef6\u8fdf1\u3002\n  C ++\u539f\u5b50\u7684\u9ed8\u8ba4\u5185\u5b58\u6392\u5e8fstd :: memory_order_seq_cst\uff08\u987a\u5e8f - \u4e00\u81f4\u6392\u5e8f\uff09is ord tearlyive\uff0c\u53ef\u4ee5\u66f4\u6539\u4e3astd :: meminer_order_acquire uperations\uff0c\u5b83\u83b7\u53d6\u9501\u5b9a\u548cstd :: memory_order_release for modowssthat\u91ca\u653e\u9501\u5b9a2.\u8fd9\u5c06\u5141\u8bb8\u7f16\u8bd1\u5668\u53d1\u51faMoreefficent\u4ee3\u7801\u3002\n struct tas_lock {std ::\u539f\u5b50\uff06lt; BOOL\uff06GT; lock_ = {false}; void lock\uff08\uff09{while\uff08lock_.exchange\uff08true\uff0cstd :: memory_order_acquire\uff09; void\u89e3\u9501\uff08\uff09{lock_\u3002\u5546\u5e97\uff08false\uff0cstd :: memory_order_release\uff09; }};\n  \u5f53Thelock\u4e0a\u5b58\u5728\u4e89\u7528\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u4e0a\u8ff0\u5b9e\u65bd\u7684\u95ee\u9898\u3002\u4e3a\u4e86\u4fdd\u7559\u6240\u6709CPU\u9ad8\u901f\u7f13\u5b58\u540c\u6b65\uff0c\u4f7f\u7528\u7f13\u5b58CONECHENCYPROTOCOCOCOC\u3002\u6709Aresemalal\u4e0d\u540c\u7684\u7f13\u5b58\u4e00\u81f4\u6027\u534f\u8bae\uff08Mesi\uff0cMoesi\uff0cMesif\uff09\uff0c\u4f46\u5b83\u4eec\u90fd\u6709Incommon\uff0c\u53ea\u6709\u5355\u4e2aCPU\u6838\u5fc3\u53ef\u4ee5\u5199\u5165\u9ad8\u901f\u7f13\u5b58\u884c\uff0c\u4f46\u53ef\u4ee5\u4ece\u7f13\u5b58\u884c\u540c\u65f6\u8bfb\u53d6\u591a\u4e2aCPUCITE\u3002\u539f\u5b50Exchange\u64cd\u4f5cQuires\u5199\u5165\u5b58\u50a8\u5b58\u50a8\u9501\u7684\u7f13\u5b58\u884c\u7684\u8bbf\u95ee\u3002\u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u65cb\u8f6c\u5c1d\u8bd5\u83b7\u53d6\u9501\u5b9a\uff0c\u5219\u9700\u8981\u5927\u91cf\u9ad8\u901f\u7f13\u5b58ConherencyTraffic\u6765\u8fde\u7eed\u66f4\u6539\u54ea\u4e2a\u6838\u5fc3\u5177\u6709\u72ec\u5360\u5199\u5165\u8bbf\u95ee\u3002 \n\u7531\u4e8e\u4e00\u81f4\u6027\u534f\u8bae\u5141\u8bb8\u591a\u4e2a\u540c\u65f6\u8bfb\u53d6\u5668\uff0c\u800c\u662f\u901a\u8fc7\u5728\u539f\u5b50\u8d1f\u8f7d\u64cd\u4f5c\uff08\u81ea\u65cb\u7b49\u73af\uff09\u4e0a\u65cb\u8f6c\u6765\u65cb\u8f6c\u4e00\u81f4\u4ea4\u901a\u3002\u800c\u4e0d\u662fContinuoS\u5f92\u52b3\u5c1d\u8bd5\u83b7\u5f97\u9501\u5b9a\u9501\u5b9a\u6211\u4eec\u7b49\u5f85\u9501\u5b9a\u6301\u6709\u8005\u9996\u5148\u91ca\u653e\u9501\u5b9a\u3002\u8fd9\u6d88\u9664\u4e86\u65cb\u8f6c\u8fc7\u7a0b\u4e2d\u7684\u7f13\u51b2\u533a\u6d41\u91cf\uff1a\n struct ttas_lock {... void lock\uff08\uff09{for\uff08;;\uff09{if\uff08\uff01lock_.exchange\uff08true\uff0cstd :: memory_order_acquire\uff09{break; } whiled\uff08lock_\u3002load\uff08std :: memory_order_relaxed\uff09\uff09; }} ...};\n \u6b64\u5b9e\u73b0\u901a\u5e38\u79f0\u4e3a\u6d4b\u8bd5\u548c\u6d4b\u8bd5\u548c\u8bbe\u7f6e\uff08TTA\uff09\u9501\u5b9a\u3002\u6ce8\u610f\uff0c\u9488\u5bf9\u672a\u63a5\u53d7\u7684\u60c5\u51b5\u8fdb\u884c\u4e86\u4f18\u5316\u3002\u9996\u5148\uff0c\u5b83\u8bd5\u56fe\u83b7\u53d6\u9501\uff0c\u5982\u679c\u8fd9\u5931\u8d25\u4e86\u5b83\u65cb\u8f6c\u7b49\u5f85\u9501\u5b9a\u88ab\u91ca\u653e\u3002\n  \u4eca\u5929\u4f7f\u7528\u7684\u5178\u578bCPU\u652f\u6301\u540c\u65f6\u591a\u7ebf\u7a0b\uff08SMT\uff09\uff08\u7b80\u79f0TOAS\u8d85\u7ebf\u7a0b\uff08HT\uff09BYINTEL\uff09\u5141\u8bb8\u591a\u4e2a\u903b\u8f91CPU\u6838\u5fc3\u4f5c\u4e3a\u7b97\u672f\u903b\u8f91\u5355\u5143\uff08ALU\uff09\uff0c\u88c5\u8f7d - \u5b58\u50a8\u5355\u5143\uff08LSU\uff09\u7b49\u3002\n \u6211\u4eec\u4e0a\u9762\u7684\u6539\u8fdb\u9501\u5c06\u51e0\u4e4e\u6bcf\u4e2a\u5faa\u73af\u6267\u884c\u8d1f\u8f7d\u64cd\u4f5c\uff0c\u800c\u4f55\u5148\u7528\u6237\u3002\u8fd9\u5c06\u4f7f\u5176\u4ed6\u903b\u8f91CPU\u6838\u5fc3\u5171\u4eab\u4e0e\u65cb\u8f6c\u6838\u5fc3\u76f8\u540c\u7684Load-OtheLit\u3002\u4e3a\u4e86\u7f13\u89e3\u6b64\u95ee\u9898\uff0c\u82f1\u7279\u5c14\u63a8\u51fa\u4e86\u6682\u505c\u7d20\u5236\u6784\u5efa\uff0c\u8be5\u6682\u505c\u7d20\u6784\u9020\u63d0\u4f9b\u4e86\u4e00\u79cd\u6697\u793a\u65cb\u8f6c\u7b49\u5f85\u5faa\u73af\u6b63\u5728\u8fd0\u884c\u5e76\u4ee5\u67d0\u79cd\u5efa\u7b51\u4e13\u6a2a\u5730\u9650\u5236CPU\u5185\u6838\uff0c\u4ee5\u964d\u4f4e\u8d1f\u8f7d\u5b58\u50a8\u5668\u4e0a\u7684\u7535\u529b\u4f7f\u7528\u548c\u4e89\u7528\u3002\u5728GCC\u548cClang\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528_mm_pause\uff08\uff09\u4f7f\u7528\u5185\u7f6e\u51fd\u6570__builtin_ia32_pause\uff08\uff09\u548cmsvc\u4e0a\u7684\u6682\u505c\u6307\u4ee4\u3002\u6dfb\u52a0thisto\u6211\u4eec\u7684\u65cb\u8f6c\u7b49\u5f85\u5faa\u73af\u6211\u4eec\u5f97\u5230\uff1a\n struct ttas_lock {... void lock\uff08\uff09{for\uff08;;\uff09{if\uff08\uff01lock_.exchange\uff08true\uff0cstd :: memory_order_acquire\uff09{break; } whiled\uff08lock_\u3002load\uff08std :: memory_order_relexed\uff09\uff09{__builtin_ia32_pause\uff08\uff09; }} ...};\n  \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u4e0d\u4f7f\u7528\u8d85\u7ebf\u7a0b\uff0c\u5e76\u4e14\u4e0d\u5173\u5fc3\u4f7f\u7528\u6682\u505c\u6307\u4ee4\u7684\u6743\u529b\uff0c\u5c06\u6162\u4e0b\u9501\u5b9a\u9501\u5b9a\u9501\u5b9a\u3002 \n\u6211\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5176\u4e2d\u542f\u52a8n\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u548c\u91ca\u653e\u9501100m / n\u6b21\uff0c\u6700\u540e\u8ba1\u7b97Alock\uff08\uff09 - \u89e3\u9501\uff08\uff09\u5bf9\u7684\u5e73\u5747\u65f6\u95f4\u3002\n \u4f7f\u75284\u4e2a\u6838\u5fc3/ 8\u4e2a\u8d85\u7ebf\u7a0b\u5728\u6211\u7684\u7535\u8111\u4e0a\u8fd0\u884c\u6211\u4eec\u53ef\u4ee5\u770b\u5230GoodsPinlock\u5b9e\u73b0\u6bd4Bad Spinlock\u66f4\u597d\uff1a\n  \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528perf\u547d\u4ee4\u67e5\u770b\u6bcf\u4e2a\u5b9e\u73b0\u7684\u7f13\u5b58\u672a\u547d\u4e2d\u548c\u96fe\u5316\u7684\u6570\u91cf\u3002\n  sudo perf stat-e l1-dcache-loads\uff0cl1-dcache-load-misses\uff0cmem_inst_retive.lock_loads ./.out 100000000 8\uff06\uff0339\u7684\u6027\u80fd\u8ba1\u6570\u5668\u7edf\u8ba1\u6570\u636e; ./ a.out 100000000 8\uff06\uff0339 ;: 1,038,332,933 l1 -DCache-Loads 282,408,737 L1-DCache-Load-Misses\uff0327.20\uff05\u7684\u6240\u6709L1-DCache HITS 161,632,506 MEM_INST_RETive.LOCK_LOADS 5.148648364\u79d2\u65f6\u95f439.249547000\u79d2\u7528\u62370.015969000\u79d2SYS\n  sudo perf stat -e l1-dcache-loads\uff0cl1-dcache-load-messes\uff0cmem_inst_retive.lock_loads ./a.out 100000000 8\uff06\uff0339\u7684\u6027\u80fd\u8ba1\u6570\u5668\u7edf\u8ba1\u6570\u636e; ./ a.out 100000000 8\uff06\uff0339 ;: 1,067,168,715 l1 -dcache-loads 509,077,190 l1-dcache-load-misses\uff0347.70\uff05\u7684\u6240\u6709L1-DCache\u5339\u914d552,378,083 Mem_inst_retive.lock_loads 11.225589133\u79d2\u65f6\u95f4\u7ecf\u8fc782.805909000\u79d2\u7528\u62370.051584000\u79d2SYS\n       \u4ee5\u4e0b\u662f\u4f7f\u7528C ++ 11atomics\u7684\u57fa\u672c\u65cb\u8f6c\u9501\u7684\u5b8c\u6574\u5b9e\u73b0\u3002\u5b83\u5e94\u8be5\u5f88\u5bb9\u6613\u5230C11\u539f\u5b50\u548c\u5176\u4ed6\u8bed\u8a00\u3002\n \u66f4\u65b02020-04-26\uff1a\u6b63\u5982\u7528\u6237adops_dsponreddit\u7684\u6240\u5efa\u8bae\u5728\u5c1d\u8bd5toacquire\u4e4b\u524d\u9996\u5148\u68c0\u67e5\u9501\u662f\u5426\u6709\u7528\u3002\u5982\u679c\u6709\u4eba\u6eda\u6ce8\u5faa\u73af\u5c1d\u8bd5\uff08\uff09\uff0c\u8fd9\u5c06\u9632\u6b62\u8fc7\u5ea6\u7684\u4e00\u81f4\u6027\u6d41\u91cf\u3002 \nstruct\u65cb\u8f6c\u9501{std ::\u539f\u5b50\uff06lt; BOOL\uff06GT; lock_ = {0}; void lock\uff08\uff09noexcept {for\uff08;;\uff09{//\u4e50\u89c2\u5730\u5047\u8bbe\u9501\u5b9a\u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u65f6\u81ea\u7531\uff08\uff01\u9501\u5b9a_\u3002Exchange\uff08true\uff0cstd :: memory_order_acquire\uff09{return;\u7b49\u5f85\u9501\u5b9a\u624d\u80fd\u91ca\u653e\u800c\u4e0d\u751f\u6210\u7f13\u5b58\u672a\u547d\u4e2d\uff08LOCK_\u3002\u52a0\u8f7d\uff08STD :: Memory_Order_Relaxed\uff09\uff09{//\u53d1\u51fax86\u6682\u505c\u6216arm\u4ea7\u91cf\u6307\u4ee4\uff0c\u4ee5\u51cf\u5c11// hyper-threads __builtin_ia32_pause\uff08\uff09\u4e4b\u95f4\u7684\u4e89\u7528; BOOL TRY_LOCK\uff08\uff09NOEXCEPT {//\u9996\u5148\u505a\u4e00\u4e2a\u653e\u677e\u7684\u8d1f\u8f7d\u6765\u68c0\u67e5\u9501\u662f\u5426\u662f\u514d\u8d39\u7684\uff0c\u4ee5\u9632\u6b62//\u5982\u679c\u6709\u4eba\u8fd9\u6837\u505a\uff08\uff01try_lock\uff08\uff09\uff09\u8fd4\u56de\uff0c\u4e0d\u5fc5\u8981\u7684\u7f13\u5b58\u672a\u547d\u4e2d\u3002\u9501_ \u3002\u52a0\u8f7d\uff08std :: memory_order_relaxed\uff09\uff06amp;\uff06amp; \uff01\uff01\u9501_ \u3002\u4ea4\u6362\uff08\u771f\u5b9e\uff0cstd :: memory_order_acquire\uff09; void\u89e3\u9501\uff08\uff09noexcept {lock_\u3002\u5546\u5e97\uff08false\uff0cstd :: memory_order_release\uff09; }};\n AGNER FOGG\u7684\u6307\u4ee4\u5ef6\u8fdf\u5bf9\u4e8e\u53ef\u7528\u4e8e\u521b\u5efaSpinlocks\u7684\u67d0\u4e9b\u8bf4\u660e\u7684\u8868\uff1a\n  \u5ef6\u8fdf\uff1a\u201c\u8fd9\u662f\u6307\u4ee4\u5728\u4f9d\u8d56\u94fe\u4e2d\u751f\u6210\u7684\u5ef6\u8fdf\u3002\u6570\u5b57\u662f\u6700\u5c0f\u503c\u3002\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u672a\u5bf9\u51c6\u548c\u4f8b\u5916\u53ef\u80fd\u4f1a\u589e\u52a0\u65f6\u949f\u6570\u91cf\u3002\u5728\u542f\u7528\u8d85\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u53e6\u4e00\u4e2a\u87ba\u7eb9\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u6267\u884c\u5355\u5143\u5bfc\u81f4\u8f83\u5dee\u7684\u6027\u80fd\u3002\u975e\u6b63\u89c4\u6570\u5b57\uff0c\u5357\u548c\u65e0\u7a77\u5927\uff0c\u4e0d\u4f1a\u589e\u52a0\u5ef6\u8fdf\u3002\u4f7f\u7528\u7684\u65f6\u95f4\u5355\u4f4d\u662f\u6838\u5fc3\u65f6\u949f\u5468\u671f\uff0c\u800c\u4e0d\u662f\u65f6\u95f4\u6233\u8ba1\u6570\u5668\u7ed9\u51fa\u7684\u53c2\u8003\u65f6\u949f\u5468\u671f\u3002\u201c \u21a9\ufe0e\n C ++\u59d4\u5458\u4f1a\u6210\u5458Tony Van Eerd\u4e0eSTD :: Memory_Order_Acquire\u548c\u4e24\u4e2a\u9501A\u548cB\u7684Redditthat\u8bc4\u8bba\u62e8\u6253A.unlock\uff08\uff09; B.Lock\uff08\uff09\u548c\u4e0d\u540c\u9501\u7684\u9501\uff08\uff09\u53ef\u4ee5\u91cd\u65b0\u6392\u5e8f\u5230B.Lock\uff08\uff09; a.unlock\uff08\uff09;\u5e76\u5f15\u5165\u6f5c\u5728\u7684\u50f5\u5c40\u3002\u6211\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\u3002\u9605\u8bfb\u90e8\u52066.9.2.1 C ++\u6807\u51c6\u7684\u6570\u636e\u64ad\u653e\uff08\u7b2c9\u6bb5\uff09\u65e0\u8d1f\u8f7dORSTORES\u53ef\u4ee5\u5e8a\u5e8a\u642c\u5165\u6216\u4ece\u8d1f\u8f7d - \u83b7\u53d6\u548c\u50a8\u5b58\u91ca\u653e\u88e4\u4e4b\u95f4\u79fb\u52a8\u3002 \u21a9\ufe0e ", "note_en": "I\u2019ve seen a lot of poorly implemented spinlocks floating around the internet.They all make the same mistake: spinning on a  read-modify-write (RMW)operation. Iwill explain why that\u2019s bad and how to correctly implement a spinlock in C++.The explanation and implementation will easily carry over to other programminglanguages. At the end of the note I provide a complete spinlock implementationadhearing to the  Mutex namedrequirements.\n   The most basic spinlock works by using a boolean (or single bit) to indicatewhether the lock is held or not. To acquire the lock a atomic exchange operationis used to set the boolean to  true. If the previous value returned by theexchange operation was  false the lock is now held, otherwise we need to tryagain until the lock is successfully acquired:\n struct  tas_lock  {  std :: atomic &lt; bool &gt;  lock_  =  { false };  void  lock ()  {  while ( lock_ . exchange ( true ));  }  void  unlock ()  {  lock_ . store ( false );  } };\n This implementation is usually called a test-and-set (TAS) lock. Other atomicoperations can be used to implement a spinlock. In my benchmarking on x86_64architecture I found little difference in spinlock performance between thedifferent atomic operations that can be used. Additionally according to  AgnerFog\u2019s instruction tables and upos.infoall LOCK prefixed instructions have very similar instruction latencies  1.\n  The default memory ordering of C++ atomics  std::memory_order_seq_cst( sequentially-consistent ordering) isoverly restrictive and can be changed to  std::memory_order_acquire foroperations that acquires the lock and  std::memory_order_release for operationsthat releases the lock  2. This will  allow the compiler to emit moreefficent code.\n struct  tas_lock  {  std :: atomic &lt; bool &gt;  lock_  =  { false };  void  lock ()  {  while ( lock_ . exchange ( true ,  std :: memory_order_acquire ));  }  void  unlock ()  {  lock_ . store ( false ,  std :: memory_order_release );  } };\n  The problem with the above implementation occurs when there is contention on thelock. In order to keep all CPU caches synchronized a  cache coherencyprotocol is used. There areseveral different cache coherency protocols( MESI, MOESI, MESIF), but they all have incommon that only a single CPU core may write to a cache line but multiple CPUcores may simultaneously read from a cache line. The atomic exchange operationrequires write access to the cache line where the lock is stored. If more thanone thread is spinning trying to acquire the lock a lot of cache coherencytraffic is required to continuously change which core has exclusive write accessto the lock.\n Since the coherency protocol allows for multiple simultaneous readers we canreduce the coherency traffic by instead spinning on an atomic load operation(spin-wait loop). Instead of continuos futile attempts to acquire the held lockwe wait for the lock holder to first release the lock. This eliminates cachecoherency traffic during spinning:\n struct  ttas_lock  {  ...  void  lock ()  {  for  (;;)  {  if  ( ! lock_ . exchange ( true ,  std :: memory_order_acquire ))  {  break ;  }  while  ( lock_ . load ( std :: memory_order_relaxed ));  }  }  ... };\n This implementation is usually called a  test and test-and-set(TTAS) lock. Note thatimplementation is optimized for the uncontended case. First it tries to acquirethe lock, if that fails it spins waiting for the lock to be released.\n  Typical CPUs in use today support  simultaneous multithreading(SMT) (referred toas  hyper-threading (HT) byIntel) allowing multiple logical CPU cores to share the main execution resourcessuch as arithmetic logic unit (ALU), load-store unit (LSU) etc.\n Our improved lock above will execute a load operation almost every cycle whilespinning. This will starve other logical CPU cores sharing the same load-storeunit as the spinning core. To alleviate this problem Intel introduced the  PAUSEinstruction which provides a hint thata spin-wait loop is running and throttles the CPU core in some architecturespecific way in order to reduce power usage and contention on the load-storeunits. On GCC and clang we can emit the PAUSE instruction using the built-infunction  __builtin_ia32_pause() and on MSVC using  _mm_pause(). Adding thisto our spin-wait loop we get:\n struct  ttas_lock  {  ...  void  lock ()  {  for  (;;)  {  if  ( ! lock_ . exchange ( true ,  std :: memory_order_acquire ))  {  break ;  }  while  ( lock_ . load ( std :: memory_order_relaxed ))  {  __builtin_ia32_pause ();  }  }  }  ... };\n  Note that if you don\u2019t use hyper-threading and you don\u2019t care about powerefficiency using the PAUSE instruction will slow down lock acquisition oncontended locks.\n  I created a simple benchmark where N threads are launched, each thread acquiresand releases the lock 100M / N times and finally the average time for alock()-unlock() pair is calculated.\n Running on my computer with 4 cores / 8 hyper-threads we can see that the goodspinlock implementation scales better than the bad spinlock:\n  We can also use the perf command to see the amount of cache misses and atomicoperations for each implementation.\n  sudo perf stat -e L1-dcache-loads,L1-dcache-load-misses,mem_inst_retired.lock_loads ./a.out 100000000 8 Performance counter stats for &#39;./a.out 100000000 8&#39;: 1,038,332,933 L1-dcache-loads 282,408,737 L1-dcache-load-misses # 27.20% of all L1-dcache hits 161,632,506 mem_inst_retired.lock_loads 5.148648364 seconds time elapsed 39.249547000 seconds user 0.015969000 seconds sys\n  sudo perf stat -e L1-dcache-loads,L1-dcache-load-misses,mem_inst_retired.lock_loads ./a.out 100000000 8 Performance counter stats for &#39;./a.out 100000000 8&#39;: 1,067,168,715 L1-dcache-loads 509,077,190 L1-dcache-load-misses # 47.70% of all L1-dcache hits 552,378,083 mem_inst_retired.lock_loads 11.225589133 seconds time elapsed 82.805909000 seconds user 0.051584000 seconds sys\n       Below is the complete implementation of the basic spinlock using  C++11atomics. It should be easy toadapt to  C11 atomics and otherlanguages.\n Update 2020-04-26: As suggested by  user adops_dsp onRedditthe  try_lock() should first check if the lock is free before attempting toacquire it. This would prevent excessive coherency traffic in case someone loopsover  try_lock().\n struct  spinlock  {  std :: atomic &lt; bool &gt;  lock_  =  { 0 };  void  lock ()  noexcept  {  for  (;;)  {  // Optimistically assume the lock is free on the first try   if  ( ! lock_ . exchange ( true ,  std :: memory_order_acquire ))  {  return ;  }  // Wait for lock to be released without generating cache misses   while  ( lock_ . load ( std :: memory_order_relaxed ))  {  // Issue X86 PAUSE or ARM YIELD instruction to reduce contention between   // hyper-threads   __builtin_ia32_pause ();  }  }  }  bool  try_lock ()  noexcept  {  // First do a relaxed load to check if lock is free in order to prevent   // unnecessary cache misses if someone does while(!try_lock())   return  ! lock_ . load ( std :: memory_order_relaxed )  &amp;&amp;  ! lock_ . exchange ( true ,  std :: memory_order_acquire );  }  void  unlock ()  noexcept  {  lock_ . store ( false ,  std :: memory_order_release );  } };\n Instruction latencies from  Agner Fogg\u2019s tables for some instructions that can be used to create spinlocks:\n  Latency: \u201cThis is the delay that the instruction generates in a dependency chain. The numbers are minimum values. Cache misses, misalignment, and exceptions may increase the clock counts considerably. Where hyperthreading is enabled, the use of the same execution units in the other thread leads to inferior perfor-mance. Denormal numbers, NAN\u2019s and infinity do not increase the latency. The time unit used is core clock cycles, not the reference clock cycles given by the time stamp counter.\u201d  \u21a9\ufe0e\n C++ committee member  Tony Van Eerd commented on redditthat with  std::memory_order_acquire and two locks  a and  b; calls to a.unlock(); b.lock() and  lock() for different locks could be reordered to b.lock(); a.unlock(); and introduce a potential deadlock. I don\u2019t think that\u2019strue. Reading section  6.9.2.1 Data races (paragraph9) of the C++ standard] no loads orstores can bed moved into or out from between a load-acquire and store-releasepair.  \u21a9\ufe0e", "posttime": "2021-06-26 08:44:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "c++,\u73b0\u4ee3,implementing,\u9501\u5b9a", "title": "\u5728\u73b0\u4ee3C ++\u4e2d\u6b63\u786e\u5730\u5b9e\u73b0SpinLock ", "title_en": "Correctly implementing a spinlock in Modern C++", "transed": 1, "url": "https://rigtorp.se/spinlock/", "via": "", "real_tags": ["c++", "\u73b0\u4ee3", "\u9501\u5b9a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068359, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6807\u9898\u5b9e\u9645\u4e0a\u662f\u771f\u7684\u3002\u8fd9\u53ef\u80fd\u4e0d\u662f\u7b2c\u4e00\u6b21\u4e86\u89e3\u8fd9\u4e9b\u6982\u5ff5\u7684\u6700\u4f73\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u6211\u5c06\u4e13\u6ce8\u4e8e\u6572\u51fb\u5bf9\u4ed6\u4eec\u7684\u8bef\u89e3\u3002\n  \u6211\u66fe\u7b54\u5e94\u81ea\u5df1\uff0c\u6211\u4e0d\u4f1a\u52a0\u5165\u5806\u4e0a\u7684\u51fd\u4ef6\u6216monad\uff06\uff0334;\u6559\u7a0b\uff06\uff0334;\u4f46\u6211\u6234\u7740\u6597\u4e89\u3002\u5f53\u6211\u770b\u5230\u4e00\u4e2a\u7ea2\u7ebf\u8bc4\u8bba\u65f6\uff0c\u62b1\u6028\u5f52\u8d5b\u8dd1\u8005\u662f\u5982\u4f55\u7406\u89e3\u7684\uff0c\u8fd9\u592a\u96be\u4ee5\u7406\u89e3\u4e86\uff0c\u8fd9\u8ba9\u6211\u611f\u5230\u96be\u8fc7\uff0c\u56e0\u4e3a\u5bf9\u51fd\u6570\u754c\u9762\u7684\u6b63\u786e\u54cd\u5e94\u662f\uff0c\uff06\uff0334;\u90a3\u4e2a\uff06\uff0339; s\u5b83\uff1f\uff06\uff0334;\u3002\u867d\u7136Monad\u5408\u6cd5\u6709\u70b9\u6709\u8da3\u548c\u590d\u6742\uff0c\u4f46\u5bf9\u8fd9\u4e0d\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u53cd\u5e94\u3002\n \u6211\u77e5\u9053\u4eba\u4eec\u7684\u81ed\u540d\u662d\u7740\u7684\u5f71\u54cd;\uff06\uff0334; Monads\u7136\u540e\u53d1\u5e03\u4ed6\u4eec\u81ea\u5df1\u7684\u7279\u8d28\uff0c\u5360\u636e\u4e86\u4ed6\u4eec\u3002\u5728\u6211\u7684\u8fa9\u62a4\u4e2d\uff0c\u8fd9\u4e0d\u662f\u6211\u5199\u7684\u4e1c\u897f\u5728\u6211\u7684\uff06\uff0334\u4e4b\u540e\u5199\u7684\u4e1c\u897f\uff01\u554a\u54c8\uff01\uff06\uff0334;\u65f6\u523b\uff0c\u6211\u5728Haskell\uff06\uff0339\u7684\u60c5\u51b5\u4e0b\u4e86\u89e3\u4ed6\u4eec\u591a\u5e74\u7684\u4e0a\u4e0b\u6587\uff0c\u5b9e\u9645\u4e0a......\u8fd9\u4e2a\u4e0d\u662f\u5173\u4e8e\u90a3\u4e2a\uff06\uff0334;\u554aHA\uff01\uff06\uff0334;\u4e00\u77ac\u95f4\u3002\u8fd9\u53ea\u662f\u5173\u4e8e\u5b83\u4eec\u7684\u4e1c\u897f\u3002\u5373\u4f7f\u4f60\u5b8c\u5168\u4e86\u89e3\u6211\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u5199\u7684\u4e00\u5207\uff0c\u4e5f\u662f\u771f\u5b9e\u7684\uff06\uff0334;\u554a\u54c8\uff01\uff06\uff0334;\u5728\u54ea\u91cc\u5b9e\u73b0\u4e86Monad\u63a5\u53e3\u5468\u56f4\u5efa\u7acb\u7684\u56fe\u4e66\u9986\u7684\u6709\u7528\u662f\u6709\u7528\u7684\uff0c\u9996\u6b21\u641c\u7d22\uff06\uff0339\u7684obogle\u4e0a\u7684\u7c7b\u578b; re\u559c\u6b22\u8fd9\u5e94\u8be5\u5b58\u5728\uff0c\u4e8b\u5b9e\u8bc1\u660e\u5b83\u5b9e\u9645\u4e0a\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e2a\uff06\uff0339\u4ecd\u7136\u5728\u4f60\u7684\u672a\u6765\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u5f88\u6545\u610f\u6ca1\u6709\u8bd5\u56fe\u4f20\u8fbe\u8fd9\u79cd\u611f\u89c9\uff0c\u4ee5\u7b80\u5355\u5730\u83b7\u5f97Monad\u63a5\u53e3\u662f\u4ec0\u4e48\u3002\u54ea\u4e2a\u662f\uff06\uff0339; t\uff0c\u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ecf\u9a8c\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u4f46\u5b83\u786e\u5b9e\u6709\u6240\u5e2e\u52a9\u3002\n    \u4e8b\u5b9e\uff1a\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u6591\u70b9\u7684\u6e90\u5934\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06blob\u53d8\u6210\u4e00\u4ef6\u4e8b\u7684\u51fd\u6570\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u4e00\u8d77\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e8b\u7269\u6765\u6e90\u3002\n  \u5982\u679c\u6211\u6709\u4e00\u4e2a\uff1a\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff0cb\uff1a\u4e00\u4e2a\u51fd\u6570\u8981\u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u6211\u53ef\u4ee5\u8f7b\u677e\u5730\u521b\u5efac\uff1a\u5b57\u7b26\u4e32\u5217\u8868\u3002\n \u5982\u679c\u6211\u6709\u4e00\u4e2a\uff1a\u4e00\u4e2a\u6563\u5217\u8868\u5230\u5b57\u7b26\u4e32\uff0cb\uff1a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3abooleans\u7684\u51fd\u6570\uff0c\u6211\u53ef\u4ee5\u62e5\u6709c\uff1a\u4e00\u4e2a\u6574\u6570\u7684\u54c8\u5e0c\u8868\u5230booleans\u3002\n \u675c\u3002\u660e\u663e\u5730\u3002\u5b83\u542c\u8d77\u6765\u751a\u81f3\u7565\u5fae\u590d\u6742\u7684\u552f\u4e00\u539f\u56e0\u53ea\u662f\u82f1\u56fd\u4eba\uff06\uff0339; t\u5bf9A\uff06\uff0334\u6709\u5f88\u597d\u7684\u76f8\u5f53\u4e8e\u4e00\u4e2a\uff06\uff0334;\u53d8\u91cf\uff06\uff0334;\u5f53\u4f60\u4e0e\u4ed6\u4eec\u5224\u5211\u65f6\uff0c\u5b83\u603b\u662f\u542c\u8d77\u6765\u5f88\u590d\u6742\u3002\u6982\u5ff5\u672c\u8eab\u5982\u679c\u4e0d\u662fELI5\uff0c\u90a3\u4e48\u5728ELI12\u8303\u56f4\u5185\u3002 \n\u6211\u4e0d\u4f1a\u8bf4\u6211\u4eceA\u548cB\u5230C\u5230C.\u6bcf\u79cd\u60c5\u51b5\u90fd\u4e0d\u540c\uff0c\u4f46\u6bcf\u6b21\u90fd\u5f88\u7b80\u5355\u3002\u91c7\u7528\u66f4\u591a\u7684\u82f1\u8bed\u5355\u8bcd\u6765\u8bf4\u5b83\u800c\u4e0d\u662f\u5728\u4f60\u559c\u6b22\u7684\u8bed\u8a00\u4e2d\u5b9e\u65bd\u5b83\u3002\n \u4ec0\u4e48\u662f\u5f52\u97f5\u7279\uff1f\u4eff\u51fd\u6570\u662f\u4e00\u4e2a\u63a5\u53e3\uff08\u6216\uff06\uff0334; trait\uff06\uff0334;\uff06\uff0334;\u6982\u5ff5\uff06\uff0334;\uff06\uff0334; typeclass\uff06\uff0334;\u6216\u8005\u4f60\u7684\u8bed\u8a00\u504f\u597d;\uff06\uff0334;\u754c\u9762\uff06\uff0334;\u4ece\u73b0\u5728\u5f00\u59cb\u6211\u6545\u610f\u5c1d\u8bd5\u4f7f\u7528\u66f4\u591a\u5e38\u89c1\u7684\u672f\u8bed\uff09\uff0c\u5141\u8bb8\u60a8\u5c06\u4e0a\u56fe\u4f5c\u4e3a\u4e00\u6d41\u8bed\u8a00\u5143\u7d20\u7684\u4e8b\u5b9e\u3002\u5728Haskell\uff06\uff0339; S\u6848\u4f8b\uff0c\u901a\u8fc7\u63d0\u4f9bFMAP\u5b9e\u73b0\u6765\u5b9e\u73b0\u7684\u51fd\u6570\u3002\u5bf9\u4e8e\u4e0a\u8ff0\u793a\u4f8b\uff0c\u8be5\u529f\u80fd\u5c06\uff1a\n \u5217\u8868\u5b9e\u73b0\uff1a\u62cd\u6444B\u4e2d\u7684\u51fd\u6570\u5e76\u5728\u6240\u6709\u5143\u7d20\u4e0a\u8fd0\u884c\u5b83\u5e76\u8fd4\u56de\u4e00\u4e2a\u540d\u5355\uff0c\u901a\u5e38\u79f0\u4e3a\u5730\u56fe\u3002\n \u54c8\u5e0c\u8868\u5b9e\u73b0\uff1a\u62cd\u6444B\u4e2d\u7684\u51fd\u6570\u5e76\u5728\u6240\u6709\u503c\u4e0a\u8fd0\u884c\u5b83\uff0c\u8fd4\u56de\u5177\u6709\u76f8\u540c\u5bc6\u94a5\u548c\u65b0\u503c\u7684\u65b0\u54c8\u5e0c\u8868\u3002\n \u51fd\u6570\u5b9e\u73b0\uff1a\u8fd4\u56de\u8fd0\u884c\u51fd\u6570\u7684\u51fd\u6570\uff0c\u7136\u540e\u5728\u7ed3\u679c\u4e2d\u8fd0\u884cB\u4e2d\u7684\u51fd\u6570\u3002\u8fd9\u901a\u5e38\u79f0\u4e3a\u529f\u80fd\u7ec4\u5408\u3002\n \u6700\u540e\u4e00\u4e2a\u662f\u7565\u6709\u68d8\u624b\u7684\uff0c\u4f46\u662f\u5982\u679c\u4f60\u8ba4\u4e3a\u4ed6\u4eec\u7684\u9690\u55bb\u4e2d\u7684\u51fd\u6570\u4f5c\u4e3a\u5728\u5de6\u4fa7\u8f93\u5165\u7684\u9ed1\u5323\u5b50\u5e76\u5728\u53f3\u4fa7\u63d0\u4f9b\u5b83\u4eec\u7684\u8f93\u51fa\uff0c\u90a3\u5c31\u662f\u5728\u53f3\u4fa7\u731b\u51fb\u5b83\u7684\uff06\uff0339; s\u521a\u521a\u649e\u51fb\u5b83\u7b2c\u4e00\u4e2a\u521b\u9020\u4e00\u4e2a\u65b0\u7684\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u8bf4\uff06\uff0334;\uff06\uff0334\u7684\u6765\u6e90;\u67d0\u7269;\u8fd9\u91cc\u7684\u539f\u7406\u662f\u975e\u5e38\u4e00\u822c\u7684\uff0c\u5ef6\u4f38\u8d85\u51fa\u529f\u80fd\uff0c\u5bb9\u5668\u548c\u6211\u6240\u62e5\u6709\u7684\u6240\u6709\u5176\u4ed6\u65b9\u4fbf\u7684\u5355\u8bcd......\u5b83\u9002\u7528\u4e8e\u60a8\u53ef\u80fd\u83b7\u5f97\u7684\u4efb\u4f55\u503c\u3002\n   \u8fd9\u5b9e\u9645\u4e0a\u662f\u5b83\u7684\u4e00\u5207;\u4e00\u79cd\u8ba8\u8bba\u8fd9\u79cd\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u5728\u6574\u4e2a\u4e00\u5806\u7c7b\u578b\u4e2d\u8ba8\u8bba\u4e86\u7b80\u5355\u7684\u64cd\u4f5c\u3002 \n\u56e0\u4e3a\u751a\u81f3\u5728\u5076\u5c14\u5f7b\u5e95\u7684\u4f5c\u5bb6\u6df7\u4e71\uff0c\u5b83\uff06\uff0339;\u5f88\u5bb9\u6613\u5728\u535a\u5ba2\u5e16\u5b50\u4e2d\u592a\u5174\u594b\uff0c\u6700\u7ec8\u4e0e\u6211\u4eec\u80fd\u591f\u5efa\u7acb\u7684\u4e1c\u897f\u3002\n \u6211\u5c06\u5728\u672c\u7bc7\u6587\u7ae0\u7684\u5176\u4f59\u90e8\u5206\u4e2d\u91cd\u590d\u4e00\u81f4\u5316\u4e3a\u66f4\u5e38\u89c1\u7684\u754c\u9762\uff1a\u8fed\u4ee3\u5668\u3002\u4e3a\u4ec0\u4e48\u6c47\u6d41\u7b26\uff06\uff0334;\u91cd\u8981\uff06\uff0334;\u6216\uff06\uff0334;\u6709\u8da3\u7684\uff06\uff0334 ;?\u51fa\u4e8e\u540c\u6837\u7684\u539f\u56e0\uff0c\u8fed\u4ee3\u5668\u754c\u9762\u662f\u3002\u81ea\u7f16\u7a0b\u5f00\u59cb\u4ee5\u6765\u5b58\u5728\u8fed\u4ee3\u5668\uff0c\u5c31\u50cf\uff06\uff0334;\u4eff\u51fd\u6570\uff06\uff0334;\u505a\u8fc7\u3002\u5355\u4e2a\u8fed\u4ee3\u5668\u5b9e\u73b0\u901a\u5e38\u975e\u5e38\u65e0\u804a\uff0c\u6709\u65f6\u751a\u81f3\u662f\u5f7b\u5934\u5f7b\u5c3e\u7684\u5fae\u4e0d\u8db3\u9053\uff0c\u4f8b\u5982\u6cbf\u7740\u9635\u5217\u8fed\u4ee3\u3002\u4f46\u5982\u679c\u4f60\u6709\u4e00\u5806\uff06\uff0334\u7684ad-hoc\u5b9e\u73b0;\u8fed\u4ee3\u5668\uff06\uff0334;\u90a3\u4e2a\uff06\uff0339; t\u878d\u5408\u5728\u4e00\u8d77\uff0c\u4f60\u53ef\u4ee5\uff06\uff0339; t\u521b\u5efa\u4e00\u4e2a\u659c\u8863\u5305\u3002\u4e00\u65e6\u60a8\u6709\u4e00\u4e2a\u5e38\u89c1\u7684\u5408\u540c\u548c\u8fde\u8d2f\u7684\u540d\u79f0\uff0c\u60a8\u5c31\u53ef\u4ee5\u5728\u66fe\u7ecf\u662f\u51e0\u4e4e - \u4f46\u4e0d\u76f8\u540c\u7684\u5b9e\u73b0\u7684\u6df7\u4e71\u6df7\u4e71\u7684\u9876\u90e8\u5f00\u59cb\u5efa\u7acb\u3002\n \u4f5c\u4e3a\u5931\u8e2a\u7684\u8bed\u8a00\u7684\u73b0\u4ee3\u793a\u4f8b\uff0cGo\u7f3a\u5c11\u4efb\u4f55\u7c7b\u578b\u7684\u8bed\u8a00\u6216\u56fe\u4e66\u9986\u652f\u6301\u548c\uff0334;\u8fed\u4ee3\u5668\uff06\uff0334;\uff0c\u56e0\u6b64\u5171\u540c\u4f7f\u7528\u4e2d\u81f3\u5c11\u6709\u4e09\u4e2a\u8fed\u4ee3\u6a21\u5f0f\uff0c\u5e76\u4e14\u5e38\u89c1\u7684\u5e38\u89c1\u53cd\u9970\u7279\uff08\u4f7f\u7528\u8303\u56f4\u9891\u9053\uff0c\u5177\u6709\u4f53\u9762\u7684\u8bed\u4e49\uff0c\u4f46\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u4f8b\u800c\u8a00\uff0c\u6027\u80fd\u53ef\u6015\uff09\u3002\u7f3a\u4e4f\u8fd9\u4e00\u6982\u5ff5\uff0c\u4e5f\u7f3a\u4e4f\u8fed\u4ee3\u673a\u6216\u7c7b\u4f3c\u7684\u56fe\u4e66\u9986\u7b49\u4efb\u4f55\u4e1c\u897f\u3002\n \u5b83\u4e0e\u4eff\u51fd\u6570\u5b8c\u5168\u76f8\u540c\u3002\u6b63\u5982\u73b0\u5728\u53ef\u80fd\u7684\u5404\u79cd\u529f\u80fd\u4e00\u6837\u5e76\u4e14\u53ea\u77e5\u9053\u4ed6\u4eec\u6b63\u5728\u670d\u7528\u5b83\u4eec\u7684\u6548\u679c\u548c\uff0334;\u8fed\u4ee3\u5668\uff06\uff0334;\u901a\u8fc7\u547d\u540d\uff0c\u8fde\u8d2f\uff06\uff0334;\u51fd\u6570\uff06\uff0334;\u53ef\u4ee5\u7f16\u5199\u8bed\u8a00\u51fd\u6570\u4e2d\u7684\u6982\u5ff5\uff0c\u4ece\u800c\u5229\u7528\u5e38\u7528\u529f\u80fd\u3002\n \u91cd\u8981\u7684\u662f\u5bf9\u754c\u9762\u7684\u590d\u6742\u6027\u8fdb\u884c\u7279\u5b9a\u5b9e\u73b0\u7684\u4fe1\u7528\u590d\u6742\u6027\u3002\u51fd\u6570\uff08\uff09\u5b57\u7b26\u4e32\u7684\u754c\u9762\u540e\u9762\u53ef\u4ee5\u5448\u73b0\u67d0\u4e9b\u7279\u5b9a\u5b57\u7b26\u4e32\u7684\u5e38\u91cf\u8fd4\u56de\uff0c\u6216\u8005\u901a\u8fc7\u83b7\u53d6\u7f51\u9875\u5e76\u8fd4\u56de\u5176\u6587\u672c\u6765\u89e3\u91ca\u51e0\u4e4e\u5168\u4e66\u7684\u4e00\u7cfb\u5217\u4e8b\u4ef6......\u4f46\u662f\u540e\u8005\uff06\uff0339; s\u590d\u6742\u6027\u5e94\u4ec5\u8003\u8651\u5230\u7279\u5b9a\u7684\u5b9e\u73b0\uff0c\u800c\u4e0d\u662f\u5b83\u53ef\u4ee5\u7b26\u5408\u7684\u51fd\u6570\uff08\uff09\u5b57\u7b26\u4e32\u63a5\u53e3\u3002\n \u7c7b\u4f3c\u5730\uff0c\u7b97\u6cd5\u53ef\u4ee5\u50cf\u6620\u5c04\u5230\u5217\u8868\u4e2d\u7684\u4f20\u5165\u529f\u80fd\u4e00\u6837\u7b80\u5355\uff0c\u6216\u8005\u5b83\u53ef\u80fd\u9700\u8981\u5728\u6570\u636e\u7ed3\u6784\u4e0a\u8fdb\u884c\u4efb\u610f\u590d\u6742\u7684\u904d\u5386\uff0c\u4f8b\u5982\u8df3\u8fc7\u5217\u8868\u548c\u65b0\u7684\u4e00\u4e2a\u65b0\u7684\u904d\u5386\u3002\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\uff06\uff0334;\u4eff\u51fd\u6570\u590d\u6742\uff0c\u800c\u4e14\u5b83\u662f\u4e00\u4e2a\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8df3\u8fc7\u5217\u8868\u5f88\u590d\u6742\u3002 Functor\u63a5\u53e3\u672c\u8eab\u4e0d\u4f1a\u5360\u590d\u6742\u3002\n \u91cd\u8981\u7684\u662f\u4e0d\u8981\u501f\u9274\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u8fed\u4ee3\u5668\u7684\u590d\u6742\u6027\u4ee5\u5b9e\u73b0\u754c\u9762\u7684\u5b9e\u73b0\u3002\u53ef\u4ee5\u91c7\u53d6\u4e09\u4e2a\u8fed\u4ee3\u5668\uff0c\u53cd\u8f6c\u5176\u4e2d\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5c06\u53e6\u5916\u4e24\u4e2a\u4e0e\u51cf\u5c11\u51fd\u6570\u7ec4\u5408\uff0c\u5e76\u4ec5\u4ece\u7ed3\u679c\u4e2d\u5360\u636ePrime\u7d22\u5f15\u503c\uff0c\u4f46\u8fd9\u4e0d\u4f1a\u5f71\u54cd\u8fed\u4ee3\u5668\u53ea\u662f\u51fd\u6570\u7684\u4e8b\u5b9e\u6253\u7535\u8bdd\u7ed9Get\uff06\uff0334;\u4e0b\u4e00\u4e2a\u503c\uff06\uff0334; \n\u51fa\u4e8e\u4ed6\u4eec\u81ea\u5df1\u7684\u539f\u56e0\uff0c\u6570\u5b66\u5bb6\u4f7f\u7528\uff06\uff0334;\u51fd\u6570\uff06\uff0334;\u4f5c\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u540d\u8bcd\u3002 Haskell\u590d\u5236\u4e86\u8fd9\u4e00\u70b9\uff0c\u56e0\u6b64\u60a8\u591a\u4e45\u542c\u5230\u4e00\u6b21\uff06\uff0334;\u51fd\u6388\uff06\uff0334;\n \u4f46\u662f\uff0c\u63a5\u53e3\u662f\u63cf\u8ff0\u6570\u636e\u7ed3\u6784\u7684\u5f62\u5bb9\u8bcd\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u4eec\u901a\u5e38\u4ee5\u8bb8\u591a\u8bed\u8a00\u547d\u540d\u4e3a\u53ef\u884c\u7684\u540e\u7f00\uff08\u53ef\u8fed\u4ee3\uff0c\u53ef\u5e8f\u5217\u5316\u7b49\uff09\u7a0b\u5e8f\u5458\u66f4\u597d\u5730\u5ffd\u7565\u5b83\u4f5c\u4e3a\u53ef\u7528\u6216\u6b3a\u9a97\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002\n \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u6ca1\u6709\uff06\uff0334\u7684\u9884\u5148\u5b58\u5728\u7684\u52a8\u8bcd\u5f62\u5f0f;\u4f7f\u7528\u51fd\u6570\u754c\u9762\uff06\uff0334;\u6211\u4eec\u7684\u65b9\u5f0f\uff06\uff0334;\u8fed\u4ee3\uff06\uff0334;\u5bf9\u4e8e\u53ef\u8fed\u4ee3\u6216\uff06\uff0334;\u5e8f\u5217\u5316\uff06\uff0334;\u7528\u4e8e\u5e8f\u5217\u5316\u3002\u6211\u4eec\u6700\u63a5\u8fd1\u7684\u662f\uff06\uff0334;\u5730\u56fe\uff06\uff0334;\u8fd9\u662f\u6b3a\u9a97\u6027\u7684\uff0c\u56e0\u4e3a\u8be5\u672f\u8bed\u901a\u5e38\u5177\u6709\u4e00\u4e9b\u5177\u4f53\u6570\u636e\u7ed3\u6784\u7684\u5fc3\u7406\u5f62\u8c61\uff0c\u53ef\u80fd\u53ea\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u6620\u5c04\uff0c\u5c3d\u7ba1\u5b83\u66f4\u666e\u904d\u3002\u6211\u5efa\u8bae\u91c7\u53d6\u4e00\u4e2a\u65e0\u610f\u4e49\u7684\u672f\u8bed\uff0c\u5982\u529f\u80fd\u548c\u62e5\u6709\u5b83\uff0c\u800c\u4e0d\u662f\u7528\u6b63\u65b9\u5f62\u6982\u5ff5\u5361\u5165\u5706\u5f62\u6982\u5ff5\u6d1e\u3002\n \u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u56f0\u60d1\uff0c\u6211\u5efa\u8bae\uff06\uff0334;\u53ef\u7528\u548c\uff0334;\u5bf9\u81ea\u5df1\u3002\u6700\u7ec8\uff0c\u60a8\u5c06\u81ea\u7136\u5730\u5f00\u59cb\u542c\u5230\u4eff\u51fd\u6570\u53ea\u662f\u4f60\u5bf9\u81ea\u5df1\u7684\u8bf4\u6cd5\u7684\u540c\u4e49\u8bcd\u3002\u60a8\u4e5f\u53ef\u4ee5\u8003\u8651\uff06\uff0334;\u529f\u80fd\uff06\uff0334;\uff0c\u5b83\u6613\u4e8e\u9760\u8fd1\uff06\uff0334;\u529f\u80fd\uff06\uff0334;\uff0c\u4f46\u5e26\u6765\uff06\uff0334\u7684\u60f3\u6cd5;\u6211\u4eec\u53ef\u4ee5\u5c06\u51fd\u6570\u5e94\u7528\u4e8e\u5b83\uff06\uff0334;\uff0c\u5c3d\u7ba1\u662f\u4e00\u4e2a\u5177\u6709\u4e00\u5b9a\u7b7e\u540d\u7684\u7279\u6b8a\u529f\u80fd\u3002\n \u5728\u4f60\u73b0\u5728\u9605\u8bfb\u7684\u5e16\u5b50\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd9\u53ef\u80fd\u4f1a\u89c9\u5f97\u81ea\u5df1\u662f\u5c3c\u7279\u3002\u4f46\u662f\uff0c\u6211\u8ba4\u4e3a\u5b83\u5b9e\u9645\u4e0a\u662f\u4eba\u4eec\u5bf9\u7406\u89e3\u51fd\u6388\u548cMonad\u754c\u9762\u7684\u95ee\u9898\u7684\u91cd\u8981\u8d21\u732e\u8005\u3002\u6211\u8bd5\u56fe\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4e00\u76f4\u4ed4\u7ec6\u4f7f\u7528\u8fd9\u4e9b\u8bcd\u8bed\u4f5c\u4e3a\u5f62\u5bb9\u8bcd\uff0c\u56e0\u4e3a\u5f53\u4f60\u7528\u5b83\u4eec\u4f5c\u4e3a\u540d\u8bcd\u65f6\uff0c\u4f60\u4f1a\u5728\u4f60\u5bf9\u5f85\u5927\u591a\u6570\u540d\u8bcd\u65f6\u5c1d\u8bd5\u5bf9\u5f85\u5b83\u4eec\u65f6\u53d8\u5f97\u975e\u5e38\u4ee4\u4eba\u56f0\u60d1\u3002\u5f88\u591a\u4eba\u90fd\u8bf4\u597d\u50cf\u4f60\u53ef\u4ee5\u62e5\u6709\uff06\uff0334;\u4e00\u4e2a\u51fd\u6570\uff06\uff0334;\u6216\uff06\uff0334;\u4e00\u4e2amonad\uff06\uff0334;\u5728\u4f60\u7684\u624b\u4e2d\uff0c\u5f00\u59cb\u5c1d\u8bd5\u8c08\u8bba\u4ed6\u4eec\u7684\uff06\uff0334;\u505a\uff06\uff0334;\u4ece\u6709\u5173\u5177\u4f53\u5b9e\u65bd\u60c5\u51b5\u7684\u80cc\u666f\u4e0b\u5265\u593a\u3002\u4f46\u662f\u4f60\u53ef\u4ee5\uff06\uff0339; t\u8fd9\u6837\u505a\uff0c\u6bd4\u4f60\u80fd\u8c08\u8bba\u548c\uff0334\u7684\u5177\u4f53\u5b9e\u65bd;\u4e00\u4e2a\u8fed\u4ee3\u5668\uff06\uff0334;\u5265\u593a\u4e86\u5b83\u662f\u4e00\u4e2a\u5177\u4f53\u5b9e\u65bd\u7684\u4e1c\u897f\u3002\u6cbb\u7597\uff06\uff0334; Monad\uff06\uff0334;\u548c\uff06\uff0334;\u51fd\u6570\uff06\uff0334;\u56e0\u4e3a\u540d\u8bcd\u5bfc\u81f4\u5f88\u591a\u6df7\u4e71\u3002\n  \u4eff\u51fd\u6570\u53ef\u4ee5\u5e94\u7528\u4e8eareN\uff06\uff0339; t\u5bb9\u5668\u7684\u8bb8\u591a\u4e1c\u897f\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u5df2\u7ecf\u6709\u804c\u80fd\u7684\uff06\uff0339\u3002\u5728\u975eHaskell\u5b9e\u73b0\u4e2d\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9519\u8bef\uff0c\u4ee5\u5047\u8bbe\u7b97\u5b50\u5b9e\u73b0\u53ea\u80fd\u7ee7\u7eed\u5bb9\u5668\u3002\n \u5f53\u6211\u5728\u7ebf\u63d0\u51fa\u8fd9\u4e2a\u65f6\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u6709\u4eba\u8bf4\uff06\uff0334;\u55ef\uff0c\u5982\u679c\u4f60\u772f\u7740\u7535\u8111\uff0c\u529f\u80fd\u662f\u5bb9\u5668\uff0c\u90a3\u4e9b\u5176\u4ed6\u4e1c\u897f\u662f\u5bb9\u5668\uff0c\u6240\u4ee5\u4ed6\u4eec\u59cb\u7ec8\u5728\u5bb9\u5668\u4e0a\u5de5\u4f5c\u3002\uff06\uff0334 ;\u5bf9\u4e8e\u6211\u8bf4\uff0c\u5982\u679c\u4e00\u5207\u90fd\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bcd\u5bb9\u5668\u6ca1\u6709\u610f\u4e49\u3002\u6211\u60f3\u4f60\u7684\u65f6\u5019\uff06\uff0339;\u91cd\u65b0\u6e32\u67d3\u6709\u7528\u7684\u8bcd\u8bed\u53ea\u662f\u4e3a\u4e86\u7b26\u5408\u4f60\u7684\u8bef\u89e3\uff0c\u4f60\u8df3\u8fdb\u4f60\u7684\u8ff7\u5bab\u8ff7\u5bab\uff0c\u53ea\u662f\u8ff7\u60d1\u4f60\u7684\u955c\u5b50\u3002\u6700\u5408\u7406\u7684\u65b9\u6cd5\u662f\u4e22\u5f03\u8bef\u89e3\u5e76\u7406\u89e3\u7b97\u5b50\u5e76\u4e0d\u603b\u662f\u5bb9\u5668\u3002 \n\u770b\u8d77\u6765\u4f60\u547c\u5401\u8fd9\u4e2a\u529f\u80fd\uff06\uff0334; fmap\uff06\uff0334;\u4f7f\u7528\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u5c06\u4e00\u4e2a\u6dfb\u52a0\u5230\u6574\u6570\u7684\u51fd\u6570\u548c\u6574\u6570\u5217\u8868\u3002\u5f53\u4eff\u51fd\u6570\u88ab\u8ba4\u4e3a\u662f\u540d\u8bcd\u65f6\uff0c\u8fd9\u53ef\u4ee5\u590d\u5408\u6df7\u6dc6\uff0c\u56e0\u4e3a\uff0c\u4ec0\u4e48\u662ffmap\uff1f\u4e5f\u8bb8\u662f\uff06\uff0339;\uff06\uff0334;\u51fd\u6570\uff06\uff0334 ;?\u5728OO\u8bed\u8a00\u4e2d\uff0c\u51fd\u6570\u5728\u5b83\u4eec\u4e0a\u6ca1\u6709\u4efb\u4f55\u7c7b\u578b\u7684\u63a5\u53e3\u5206\u8fa8\u7387\u3002\n   \u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u5217\u8868\u4e0a\u8c03\u7528\u65b9\u6cd5\u3002\u4e8b\u5b9e\u4e0a\u5b83\u751a\u81f3\u7279\u522b\u76f8\u5173\uff0c\u6b64\u65f6\uff06\uff0334; fmap\uff06\uff0334;\u53c2\u4e0e\u4e00\u4e2a\u63a5\u53e3\uff0c\u56e0\u4e3a\u8fd9\u5728\u7f16\u8bd1\u65f6\u90fd\u662f\u9759\u6001\u53ef\u89e3\u51b3\u7684\uff0c\u5c31\u50cf\u5b83\u662f\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\u4e00\u6837\u3002\u8fd9\u6837\u505a\uff0cOO\u7a0b\u5e8f\u5458\u6ca1\u6709\u60f3\u8c61\u89e3\u51b3\u89e3\u51b3\u548c\uff0334; FMAP\uff06\uff0334;\u53ef\u80fd\u6d89\u53ca\u67e5\u770b\u5217\u8868\u672c\u8eab\u7684\u5b9a\u4e49\u3002\n \u8fd9\u4e0d\u662fHaskell\u5982\u4f55\u89e3\u6790\u540d\u79f0\u3002\u5b83\u662f\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61\u7684\u540d\u79f0\u3002\u4f46\u5982\u679c\u4f60\u4e0d\u60f3\u5b66\u4e60Haskell\u5e76\u4ec5\u4ec5\u60f3\u4e86\u89e3\u6240\u6709\u8fd9\u4e00\u5207\uff06\uff0334; Monad\uff06\uff0334;\u548c\uff06\uff0334;\u51fd\u6570\uff06\uff0334;\u7092\u4f5c\u662f\uff0c\u8fd9\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u6bd4\u55bb\uff0c\u56e0\u4e3a\u54c8\u65af\u514b\u5c14\u6b63\u5728\u505a\u4ec0\u4e48\u800c\u4e0d\u662f\u5bf9FMAP\u7684\u60f3\u6cd5\u4f5c\u4e3a\u67d0\u79cd\u5947\u602a\u7684\u9b54\u6cd5\u529f\u80fd\u3002\u5b83\u9760\u8fd1\u65b9\u6cd5\u540d\u79f0\u89e3\u6790\u4e3a\uff06\uff0334; fmap\uff06\uff0334;\u5728\u7279\u5b9a\u6570\u636e\u7ed3\u6784\u4e0a\u5b9e\u73b0\u3002 \uff08\u518d\u6b21\uff0cISN\uff06\uff0339; t\u76f8\u5f53\u9c9c\u660e\u7684;\u5b83\u73b0\u5728\u8db3\u591f\u63a5\u8fd1\u4e86\u3002\uff09\n   fmap ::\uff08a  - \uff06gt; b\uff09 - \uff06gt; f a  - \uff06gt; F B.\n \u8fd9\u53ea\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u6709\u4e00\u79cd\u62cd\u6444A\u548c\u4ea7\u751fB\u7684\u65b9\u6cd5\uff0c\u4f60\u6709\u4e00\u4e2a\u6e90\u5934\uff0c\u4f60\u53ef\u4ee5\u62e5\u6709BS\u7684\u6e90\u5934\u3002\n  \u8fd9\u662f\u5b8c\u6574\u7684\u5b9a\u4e49\u3002\u6ca1\u6709\u989d\u5916\u7684\u9690\u85cf\u673a\u68b0\uff0c\u54c8\u514b\u5c14\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u81ea\u52a8\u8c03\u7528\u4f60\uff06\uff0334;\u4f7f\u7528\u51fd\u6388\uff06\uff0334;\u50cf\u8bb8\u591a\u8bed\u8a00\u4e00\u6837\uff0c\u6ca1\u6709\u56f4\u7ed5\u89e3\u51b3\u65b9\u6cd5\u5305\u88f9\u7684\u989d\u5916\u8f6c\u6362\u6216\u5947\u602a\u7684\u4e1c\u897f\u3002\u5c31\u50cfOO\u89e3\u6790\u4e86\u4e00\u4e2a\u8986\u76d6\u7684\u65b9\u6cd5\uff08\u6ca1\u6709\u81ea\u52a8\u8f6c\u6362\uff09\u4e00\u6837\uff0c\u6240\u6709\u9b54\u6cd5\u90fd\u5728\u6311\u9009\u6b63\u786e\u7684\u5b9e\u65bd;\u4e00\u65e6\u89e3\u51b3\u4e86\u8bed\u8a00\u6ca1\u6709\u505a\u4efb\u4f55\u5176\u4ed6\u4e8b\u60c5\u3002\n \u662f\u4ec0\u4e48\u5236\u4f5c\u6570\u636e\u7ed3\u6784\uff06\uff0334;\u51fd\u4ef6\uff06\uff0334 ;?\u5b83\u5177\u6709\u4ee4\u4eba\u660e\u667a\u7684FMAP\u5b9e\u73b0\uff0c\u65e0\u8bba\u54ea\u79cd\u6570\u636e\u7ed3\u6784\u90fd\u5728\u3002\u5982\u679c\u5b83\u6709\u4e00\u4e2a\u660e\u667a\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u5b83\uff0c\u8fd9\u4f7f\u5b83\u6210\u4e3a\u4e00\u4e2a\u4eff\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u53e6\u5916\u7684\u65b9\u5f0f\u3002\u7406\u8bba\u4e0a\u8fd9\u5c31\u662f\u5b83\u5982\u4f55\u7528\u67d0\u79cd\u754c\u9762\u7684\u6982\u5ff5\u6765\u5de5\u4f5c\uff0c\u4f46\u6709\u65f6\u6587\u4e66\u5de5\u4f5c\u53ef\u4ee5\u59a8\u788d\u5b83\uff0c\u8ba9\u5b83\u611f\u89c9\u50cf\u5b83\u4e00\u6837\uff0c\u8fd9\u662f\u53e6\u4e00\u6761\u8def\u7684\uff0c\u6240\u4ee5\u67d0\u79cd\u4e1c\u897f\u5c1a\u672a\uff06\uff0339 ; t\u4e00\u4e2a\u8fed\u4ee3\uff0c\u76f4\u5230\u6211\u6545\u610f\u4f7f\u5b83\u6210\u4e3a\u4e00\u4e2a\u3002\u4f46\u6211\u8ba4\u4e3a\u5b83\u66f4\u52a0\u6210\u719f\u7684\u7f16\u7a0b\u89c6\u56fe\uff0c\u4ee5\u4fbf\u5c06\u6570\u636e\u7ed3\u6784\u5448\u73b0\u4e3a\u7ed9\u5b9a\u63a5\u53e3\u7684\u4e00\u7ec4\u53ef\u80fd\u7684\u660e\u667a\u5b9e\u73b0\uff0c\u53ef\u80fd\u662f\u7a7a\u7684\u6216\u591a\u4e8e\u4e00\u4e2a\uff0c\u5e76\u4e14\u60a8\u53ea\u9700\u9009\u62e9\u662f\u6307\u89e3\u91ca\u5b83\u8bed\u8a00\u3002\u4f60\u901a\u5e38\u4e0d\u662f\uff06\uff0339; t\uff06\uff0334;\u521b\u5efa\uff06\uff0334;\u8fd9\u4e9b\u5b9e\u73b0\u3002\u81f3\u5c11\u5bf9\u4e8e\u8fd9\u4e9b\u66f4\u7b80\u5355\u7684\uff0c\u66f4\u591a\u6570\u5b66\u7c7b\u578b\u7684\u63a5\u53e3\u3002 \n\u4e0a\u9762\u7684\u51fd\u6570\u5b9a\u4e49\u5177\u6709f a\uff0c\u5b83\u662f\uff06\uff0334\u7684haskell\u7b26\u53f7;\u7531a\uff06\uff0334\u53c2\u6570\u5316\u7684\u7c7b\u578bf;\u90a3\u4e2a\uff06\uff0339; s\u6458\u8981\u4e0e\u7c7b\u578b\u53d8\u91cf\uff0c\u4f46\u5728\u4f8b\u5b50\u4e2d\u5bb9\u6613;\u5217\u8868int\u662f\u4e00\u4e2a\uff06\uff0334;\u5217\u8868\uff06\uff0334;\u7531\uff06\uff0334; int\uff06\uff0334;\uff0c\u610f\u601d\u662f\u5b83\u53ef\u4ee5\u6301\u6709INTS\u3002\n \u867d\u7136\u5728\u5b8c\u6574\u7684Haskell\u4e2d\uff0c\u8fd9\u53ef\u80fd\u4f1a\u53d8\u5f97\u66f4\u52a0\u590d\u6742\uff0c\u56e0\u4e3a\u7b80\u5355\u7684\u7c7b\u578bI\uff06\uff0339; m\u5728\u6b64\u5e16\u5b50\u4e2d\u4f7f\u7528\u60a8\u53ef\u4ee5\u5728\u89c6\u89c9\u4e0a\u8fdb\u884c\u6bd4\u8d5b\u3002\u8981\u5339\u914df a\u5217\u51faint\uff0c\u6211\u4eec\u8bbe\u7f6ef = list\u548ca = int\u3002\n \u4e0d\u5e78\u7684\u662f\uff0c\u4e24\u4e2a\u54c8\u65af\u514b\u5c14\uff06\uff0339;\u6700\u91cd\u8981\u7684\u7c7b\u578b\u5f97\u5230\u7279\u6b8a\u5957\u9910\uff0c\u89c6\u89c9\u5339\u914d\u5b83\u4eec\u5f88\u96be\u3002 Haskell\u800c\u4e0d\u662f\u5217\u51faint\uff0c\u800c\u662f\u4f7f\u7528[int]\uff0c\u8fd9\u5728\u65b0\u624b\u7684\u6700\u7cdf\u7cd5\u7684\u65f6\u95f4\u5185\u4ee4\u4eba\u56f0\u60d1\u3002\n \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6b64\u5199\u6210[] int\u3002\u5b83\u5df2\u7ecf\u6709\u6548\u7684haskell\u8bed\u6cd5\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u89c6\u89c9\u4e0a\u5339\u914d\uff1af = []\u548ca = int\u3002\u6211\u73b0\u5728\u4e0d\u8981\u5199\u5f88\u591aHaskell\u4ee3\u7801\uff0c\u4f46\u662f\u6211\u4e00\u76f4\u5728\u91c7\u7528\u5b83\u5982\u4f55\u5728\u6211\u7684\u7c7b\u578b\u4e2d\u6240\u5728\u7684\u5217\u8868\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u7279\u6b8a\u60c5\u51b5\u975e\u5e38\u6709\u7528\u3002\n \u53e6\u4e00\u4e2a\u6df7\u6dc6\u7c7b\u578b\u662f\u51fd\u6570\u7c7b\u578ba  - \uff06gt;\u6e7e\u5bf9\u4e8e\u6559\u5b66\u76ee\u7684\uff0c\u5b83\u662f\u66f4\u597d\u7684\u62fc\u5199\uff08 - \uff06gt;\uff09a b\u3002\u540c\u6837\uff0c\u5f53\u4eca\u6cd5\u5f8b\u54c8\u65af\u514b\u5c14\u8bed\u6cd5\uff0c\u867d\u7136\u4f60\u4e0d\u5e78\u9700\u8981\u62ec\u53f7\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\uff08 - \uff06gt;\uff09\uff0cf =\uff08 - \uff06gt;\uff09a\u548c\u5269\u4f59\u90e8\u5206\u662fb\u3002\u4ecd\u7136\u6709\u70b9\u6458\u8981\uff0c\u6240\u4ee5\u901a\u8fc7\u89c2\u5bdf\u60a8\u53ef\u4ee5\u8f6c\u6362\uff08 - \uff06gt;\uff09\u5b57\u7b26\u4e32int\u548ca\uff08 - \uff06gt;\uff09int int\u7684\u8f93\u51fa\uff0c\u4f7f\u5176\u5177\u4f53\u5316\u3002\u5982\u679c\u60a8\u6709\u4e00\u4e9b\u529f\u80fd\uff0c\u8bf7\u5c06\u5176\u8f6c\u6362\u4e3a\uff08 - \uff06gt;\uff09int int\u3002 \uff08 - \uff06gt;\uff09int string\uff0c\u56e0\u4e3a\u91cd\u8981\u7684\u662f\u4f60\u662f\uff06\uff0334\u7684\u51fd\u6570\u7684\u8f93\u51fa;\u529f\u80fd\uff06\uff0334;\u5339\u914d\u60a8\u7533\u8bf7\u7684\u529f\u80fd\u7684\u8f93\u5165\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662fint\u3002\n \u6211\u5728\u6211\u7684\u4ee3\u7801\u4e2d\u6ca1\u6709\u4f7f\u7528\u5b83\uff0c\u56e0\u4e3a\u5b83\u7684\u624b\u52a8\u7c7b\u578b\u7b7e\u540d\u5230\u5904\u90fd\u662f\u51f6\u731b\u7684\u4e8b\u60c5\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\u5b83\u7684\u771f\u6b63\u610f\u5473\u7740\u4ec0\u4e48\u3002\n \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56fe\u6848\u5339\u914d\u4e2d\u7684f\uff06\uff0334;\u524d\u4ef6\uff06\uff0334;\u800c\u4e0d\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u60a8\u4e0d\u6253\u7b97\u5728Haskell\u8fdb\u884c\u7f16\u7a0b\uff0c\u53ea\u9700\u5c06\u6211\u7684\u901a\u77e5\u4e3a\u6b64\uff0c\u8fd9\u662f\u4e00\u4e2a\u6cd5\u5f8b\u5339\u914d\uff0c\u8ba9\u8fd9\u6b3e\u6e05\u6d17\u5230\u60a8\u8eab\u4e0a;\u5982\u679c\u60a8\u6253\u7b97\u5728Haskell\uff06\uff0339\u4e2d\u7f16\u7a0b\u3002LL\u627e\u5230\u8fd9\u8d62\u5f97\u4e86\uff06\uff0339; T.\u65e0\u8bba\u662f\u5982\u4f55\uff0c\u5b83\u5bf9\u7406\u89e3Monad\u63a5\u53e3\u662f\u5982\u6b64\uff0c\u6211\u5c06\u6cbf\u7740\u73b0\u5728\u6cbf\u7740\u72c2\u6b22\u7684\u65b9\u5f0f\u79fb\u52a8\u3002 \n\u5f53\u60a8\u6709\u4e00\u4e9b\u6e90A\u7684\u6570\u636e\u7ed3\u6784\u662fMONADISIS\uff0c\u4ee5\u53ca\u4e00\u79cd\u62cd\u6444A\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u76f8\u540c\u7684B\u6e90\u7684\u65b9\u5f0f\uff0c\u5e76\u5c06\u5168\u90e8\u8f6c\u5411\u76f8\u540c\u7684B\u6e90\u3002\u548c\uff06\uff0334;\u51fd\u6570\uff06\uff0334;\u6211\u6b63\u5728\u4f7f\u7528\u8fd9\u4e2a\u8bcd\uff06\uff0334;\u6765\u6e90\uff06\uff0334;\u4f5c\u4e3a\u6700\u63a5\u8fd1\u7684\u82f1\u8bed\u5355\u8bcd\uff0c\u6211\u53ef\u4ee5\u60f3\u5230\u4e3a\u7c7b\u578b\u7684\u6700\u5927\u6cdb\u578b\u6982\u5ff5;\u60a8\u6709\u4e00\u4e2aints\u5217\u8868\uff0c\u6216\u4ea7\u751fint\u7684\u51fd\u6570\uff0c\u6216\u8005\u4ece\u7528\u6237\u8f93\u5165\u7b49\u83b7\u5f97int\u7684\u65b9\u5f0f\u7b49\u3002\n Class Monad M\u5728\u54ea\u91cc\uff08\uff06gt;\uff06gt; =\uff09:: m a  - \uff06gt; \uff08a  - \uff06gt; m b\uff09 - \uff06gt; M B.\n \u82f1\u8bed\u771f\u7684\u5728\u8fd9\u91cc\u7eca\u5012\uff0c\u4f46\u5728\u82f1\u8bed\u63cf\u8ff0\u4e0e\u5b9a\u4e49\u4e4b\u95f4\uff0c\u6211\u5e0c\u671b\u57fa\u672c\u7684\u60f3\u6cd5\u9047\u5230\u3002\u5b83\u53ef\u80fd\u4e5f\u6ca1\u6709\u5e2e\u52a9\u6211\u4eec\u6709\u4e00\u4e2a\u804c\u80fd\u79f0\u4e3a\uff06gt;\uff06gt; =\uff0c\u8fd9\u5f88\u96be\u53d1\u97f3\u3002\u5b83\uff06\uff0339; s\u53d1\u97f3\uff06\uff0334;\u7ed1\u5b9a\uff06\uff0334;\uff0c\u8fd9\u53ea\u662f\u7a0d\u5fae\u6709\u7528\u7684\u662f\uff0c\u4ecd\u7136\u65e0\u6cd5\u5524\u8d77\u4efb\u4f55\u6709\u7528\u7684\u56fe\u50cf\u3002\u8bbe\uff06\uff0339;\u25a0\u53c2\u52a0\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff1a\n  \u72ec\u81ea\u4e00\u4eba\uff0c\uff06\uff0339; s\u4e0d\u662f\u4e00\u4e2a\u4ee4\u4eba\u56f0\u60d1\u7684\u529f\u80fd\u3002\u5728\u8fd9\u4e2a\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u8bb8\u591a\u53ef\u80fd\u7684\u660e\u667a\u7684\u5b9e\u73b0\u3002\u663e\u7136\uff0c\u6211\u4eec\u6cbf\u7740ints\u5217\u8868\u8fed\u4ee3\uff0c\u5c06\u5b83\u4eec\u9010\u4e00\u4f20\u9012\u7ed9\u751f\u6210\u5b57\u7b26\u4e32\u5217\u8868\u7684\u4e1c\u897f\uff0c\u5e76\u4e14\u5c06\u6240\u6709\u8fd9\u4e9b\u7ed3\u679c\u8fde\u63a5\u5230\u6700\u7ec8\u5217\u8868\u4e2d\u3002 \uff08\u6211\u4eec\u5fc5\u987b\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6700\u7ec8\u7ed3\u679c\u53ef\u4ee5\uff06\uff0339; t\u662f\u5217\u8868\uff08\u5217\u8868\u5b57\u7b26\u4e32\uff09;\u90a3\u4e2a\uff06\uff0339; s\u4e00\u4e2a\u5355\u72ec\u7684\u7c7b\u578b\u3002\uff09\n   \u6240\u6709Monad\u90fd\u662f\uff06\uff0339;\u5b83\u662f\u4e00\u4e9b\uff06\uff0334;\u65b9\u6cd5\uff06\uff0334;\u8fd9\u7b26\u5408\u8be5\u63a5\u53e3\u89c4\u8303\u3002\n \u7406\u89e3\u8fd9\u4e0d\u662f\u4eba\u4eec\u7684\u610f\u601d\uff06\uff0334;\u4e86\u89e3Monad\uff06\uff0334;\u8fd9\u662f\uff06\uff0334;\u4ec0\u4e48\uff06\uff0334; Monad\u63a5\u53e3\uff0c\u4f46\u4e0d\u662f\uff06\uff0334;\u4e3a\u4ec0\u4e48\uff06\uff0334;\u4f46\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5f80\u5f80\u5728\u5176\u4ed6\u4f5c\u54c1\u4e2d\u8fc7\u4e8e\u8fc5\u901f\u7684\u4e00\u6b65\uff08\u5982\u679c\u4e0d\u662f\u5f7b\u5934\u5f7b\u5c3e\u7684\u8df3\u8fc7\uff09\uff0c\u6240\u4ee5\u8ba9\uff06\uff0339;\u7559\u5728\u8fd9\u91cc\uff0c\u5480\u56bc\u90a3\u4e2a\uff06\uff0334;\u4ec0\u4e48\uff06\uff0334;\u5c31\u4e00\u70b9\u70b9\u3002\n \u518d\u4e00\u6b21\uff0c\u6211\u60f3\u5f3a\u8c03\uff0c\u5c31\u50cf\u4ee5OO\u8bed\u8a00\u4e00\u6837\uff0c\u5c31\u50cfFMAP\u4e00\u6837\uff0c\u6ca1\u6709\u7279\u6b8a\u7684\u9b54\u6cd5\u54c8\u65af\u514b\u5c14\u8c03\u7528\uff0c\u56e0\u4e3a\uff06\uff0334;\u5b83\uff06\uff0339; sonad\uff06\uff0334;\u6240\u6709Haskell\u90fd\u662f\u67e5\u627e\u754c\u9762\uff06\uff0339; s\u7684\u5b9e\u73b0\u5e76\u4f20\u9012\u53c2\u6570\u3002\uff06\uff0334; do\u7b26\u53f7\uff06\uff0334;\u4f46\u8fd9\u53ea\u662f\u8fd9\u4e2a\u529f\u80fd\u547c\u53eb\u7684\u8bed\u6cd5 - \u7cd6\u91cd\u70b9;\u5b83\u4ecd\u7136\u6ca1\u6709\u8fdb\u4e00\u6b65\u64cd\u7eb5\u53c2\u6570\uff0c\u6ca1\u6709\u80c1\u8feb\uff0c\u6ca1\u6709\u6539\u8fdb\u8f93\u5165\uff0c\u6ca1\u6709\u6539\u8fdb\u8f93\u51fa\uff0c\u6ca1\u6709\u3002\u81ea\u672c\u6587\u662f\u5173\u4e8e\u7406\u89e3\u548c\uff0334; Monad\uff06\uff0334;\u5982\u679c\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\u4e86Haskell\u7279\u5b9a\u7684\u7ec6\u8282\uff0c\u6211\u5c06\u5ffd\u7565\u5b83\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f\u8bed\u6cd5\u7cd6\u3002 \n\u7ed1\u5b9a\u53ea\u662f\u4e00\u79cd\u51fd\u6570\uff0c\u5b83\u91c7\u7528\u4e00\u4e9b\u5305\u88c5\u7c7b\u578b\uff0c\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u5185\u90e8\u503c\u5e76\u8fd4\u56de\u5305\u88c5\u7684\u51fd\u6570\uff0c\u4ee5\u53ca\u8be5\u7c7b\u578b\u7684\u6700\u7ec8\u5305\u88c5\u503c\u3002\n  \u518d\u6b21\uff0c\u6ca1\u6709\u8c1c\u3002\u5b83\u9700\u8981\u4e00\u4e2a\u53ef\u80fd\u5177\u6709int\u7684\u5185\u5bb9\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u4efb\u4f55\u5185\u5bb9\u7684\u5185\u5bb9\u3002\n  \u663e\u7136\uff0c\u4f60\u4e0d\u77e5\u9053Blorp\u7684\uff06\uff0339\u3002\u6211\u628a\u5b83\u547d\u540d\uff0c\u6211\u751a\u81f3\u4e0d\u77e5\u9053\u5b83\u7684\u6240\u4f5c\u6240\u4e3a\u3002\u4f46\u662f\u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u5c06\u662f\uff06\uff0334; bind\uff06\uff0334;\u5bf9\u4e8eBlorp\uff0c\u7279\u5b9a\u7c7b\u578bint\u548cstring\u3002\n \u6240\u6709Monad\u90fd\u662f\uff06\uff0339;\u5c31\u50cf\u8fed\u4ee3\u5668\u5468\u56f4\u6ca1\u6709\u9b54\u6cd5\u4e00\u6837\u8fed\u4ee3\uff06\uff0339;\u4e0b\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5c31\u50cf\u51fd\u4ef6\u5468\u56f4\u6ca1\u6709\u9b54\u6cd5\u4e00\u6837\uff0c\u8fd9\u5c31\u662f\u4e00\u5207\u90fd\u662f\u4e00\u5207\u90fd\u662f\u5982\u6b64\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u5b57\u9762\u4e0a\u53ef\u4ee5\uff06\uff0339; t\u66f4\u590d\u6742\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u63a5\u53e3\u3002\u6240\u6709\u63a5\u53e3\u90fd\u53ef\u4ee5\u505a\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u65b9\u6cd5\u3002\u6ca1\u6709\u522b\u7684\u53d1\u751f\u3002\u5982\u679c\u60a8\u53d1\u73b0\u60a8\u5f53\u524d\u7684Monad\u7684\u6982\u5ff5\u4e0d\u5339\u914d\uff0c\u5b83\u575a\u6301\u5728\u90a3\u91cc\uff06\uff0339;\u4e00\u4e2a\u5927\u7403O\uff06\uff0339;\u8fd9\u91cc\u7684\u795e\u79d8\u9762\u7eb1\uff0c\u6254\u6389\u5b83\u3002\u5b83\u53ea\u4e0d\u8fc7\u662f\u5c06\u7279\u5b9a\u51fd\u6570\u58f0\u660e\u4e3a\u6b64\u63a5\u53e3\u7684\u5b9e\u73b0\u4ee5\u53ca\u5f53\u60a8\u4f7f\u7528\u65f6\u7684\u540e\u7eed\u5206\u8fa8\u7387\u673a\u68b0\u3002\u6ca1\u6709\u4ec0\u4e48\u3002\u66f4\u591a\u7684\u3002\n \u4e0d\uff0c\u6211\u4e0d\u662f\u5728A\uff06\uff0334\u4e2d\u7684\u610f\u601d;\u5982\u679c\u4f60\u770b\u53f3\u56fe\uff0c\u8fd9\u4e2a\u8270\u96be\u7684\u6982\u5ff5\u5c31\u4f1a\u5f88\u5bb9\u6613\u3002\u6211\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u4e00\u76f4\u8bd5\u56fe\u7b80\u5316\u4e00\u4e9b\u89e3\u91ca\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u7b80\u5316\u7684\u89e3\u91ca\u3002\u8fd9\u5c31\u662fMonadic\u5b9e\u73b0\u662f\u4ec0\u4e48\u3002\u5b83\u5e76\u975e\u7b80\u5316\u3002\u5b83\u5b8c\u5168\u51c6\u786e\u7684\u63cf\u8ff0\u3002\u5b83\u4e0d\u518d\u5c11\u4e8e\u7279\u5b9a\u63a5\u53e3\u7684\u5b9e\u73b0\u7684\u89c4\u8303\u3002\u5b83\u4e0e\u8fed\u4ee3\u5668\u548c\u4eff\u51fd\u6570\u548c\u9500\u6bc1\u4ee5\u53ca\u8bb8\u591a\u8bed\u8a00\u7684\u6240\u6709\u5176\u4ed6\u4f17\u6240\u5468\u77e5\u7684\u63a5\u53e3\u76f8\u540c\u3002\n \u6211\u5728\u6587\u672c\u4e2d\u7ed3\u5408\u4e86\u8fd9\u4e00\u70b9\uff0c\u5e0c\u671b\u4f60\uff06\uff0339; LL\u5728\u7ee7\u7eed\u4e4b\u524d\u6162\u4e0b\u6765\u5e76\u5904\u7406\u8fd9\u4e2a\u3002\u5f88\u591a\u4eba\u771f\u7684\u5728\u4ed6\u4eec\u7684\u5934\u4e0a\u5efa\u7acb\u4e86\u8fd9\u4e2a\u7279\u6b8a\u7684\u754c\u9762\uff0c\u5c31\u50cf\u4ece\u6839\u672c\u4e0a\u795e\u79d8\u7684\u4e1c\u897f\u3002\u4f46\u8fd9\u5c31\u662fMonad\u7684\u4e00\u5207\u3002\n \u8fd9\u662f\u4e00\u4e2a\u5377\u997c\u5417\uff1f\u8fd9\u662f\u4e00\u4e2a\u592a\u7a7a\u670d\u5417\uff1f\u5b83\u662f\u5176\u4ed6\u4e00\u4e9b\u5947\u602a\u7684\u6bd4\u55bb\u5417\uff1f\u4e0d\uff0c\u4f60\u4e0d\u9700\u8981\u4e00\u4e2a\u5947\u602a\u7684\u9690\u55bb\u6765\u4e86\u89e3\u8fd9\u4e00\u90e8\u5206\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4f60\u5b81\u613f\u9700\u8981\u7f3a\u4e4f\u5947\u5f02\u7684\u9690\u55bb\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f\u795e\u8bdd \n...... ", "note_en": "Title is literally true. This may not be the best place to learn about these concepts for the first time, because I&#39;m going to focus on knocking down the misconceptions about them.\n  I had promised myself I would not add to the pile of functor or monad &#34;tutorials&#34;, but I&#39;ve been worn down. I gave up when I saw a reddit comment complaining about how Functor was &#34;too hard to understand&#34;, which made me sad, because the correct response to the Functor interface is, &#34;That&#39;s it?&#34;. And while Monad is legitimately a bit more interesting and complex, the correct response to that is not that different.\n I am aware of the notorious effect that people &#34;get&#34; monads and then post their own idiosyncratic takes on them. In my defense, this isn&#39;t something I write just after my &#34;ah ha!&#34; moment, I&#39;ve understood them in Haskell&#39;s context for many years now, and actually... this isn&#39;t even about that &#34;ah ha!&#34; moment at all. This is only about  what they are. Even if you completely understand everything I write in this post, the real &#34;ah ha!&#34; where you realize just how useful the libraries built up around the monad interface are, the first time you search for a type on  Hoogle where you&#39;re like  this should exist and it turns out it does in fact exist already, that&#39;s still in your future. In fact I&#39;m quite  deliberately not trying to convey that feeling in the interests of getting at simply  what the monad interface is. Which isn&#39;t, strictly speaking, a pre-requisite to that experience, but it does help.\n    Fact: If you have a source of  Blobs, and a function that can turn a  Blob into a  Thing, you can put them together to create a source of  Things.\n  If I have A: a list of integers, and B: a function to convert integers to strings, I can easily create C: a list of strings.\n If I have A: a hash table of integers to strings, and B: a function to convert strings to booleans, I can have C: a hash table of integers to booleans.\n Duh. Obviously. The only reason it sounds even slightly complicated is just that English doesn&#39;t have a good equivalent for a &#34;variable&#34;, so it always sounds complicated when you have a sentence with them. The concept itself is, if not ELI5, well within the ELI12 range.\n I don&#39;t say  how I get from A and B to C. Each case is different, but simple every time. Takes more English words to say it than implementing it in your favorite language would.\n What is functor then? Functor is an  interface (or &#34;trait&#34;, &#34;concept&#34;, &#34;typeclass&#34; or whatever your language favors; &#34;interface&#34; from now on as I am deliberately trying to use more common terminology) that allows you to refer to the fact above as a first-class language element. In Haskell&#39;s case,  Functor, which is implemented by providing an  fmap implementation. For the above examples, that function will:\n List implementation: Take the function in B and run it on all my elements and return a new list, commonly called  map.\n Hash table implementation: Take the function in B and run it on all my values, return a new hash table with the same keys and new values.\n Function implementation: Return a function that runs the function in A, then runs the function in B on the result. This is commonly called function composition.\n The last one is slightly tricky, but if you think of functions in their metaphor as black boxes that take input on the left and provide their output on the right, that&#39;s just taking the second function and slamming it on the right side of the first to create a new one. This is why I say &#34;source of&#34; something; the principle here is  very general and extends beyond functions, containers, and all the other convenient words I have... it applies to  anything you might obtain a value from.\n   That is literally all it is; a way of discussing that simple operation coherently across a whole bunch of types.\n  Because even setting aside the occasional outright writer confusion, it&#39;s easy to get too excited in a blog post and end up conflating  what a functor is with  what we can build on it.\n I&#39;m going to repeatedly analogize to a more commonly-understood interface throughout the rest of this post: Iterator. Why is Functor &#34;important&#34; or &#34;interesting&#34;? For the same reason the iterator interface is. Iterators existed since the beginning of programming, just as &#34;functors&#34; did. Individual iterator implementations are typically quite boring, sometimes even outright trivial, like iterating along an array. But if you have a whole bunch of ad-hoc implementations of &#34;iterators&#34; that don&#39;t fit together, you can&#39;t create an  itertools package. Once you have a common contract and a coherent name, you can start building on top of what used to be a chaotic mess of almost-but-not-quite-the-same implementations.\n As a modern example of a language missing this, Go lacks any sort of language or library support for &#34;iterators&#34;, and consequently there are at least three iteration patterns in common use and a modestly common antipattern (using  range over channels, which has decent semantics but horrible performance for most use cases). Lacking this concept, Go also lacks anything like  itertools or a similarly-useful library.\n It is exactly the same with functor. Just as a variety of functions are now possible and useful that only know they are taking &#34;an iterator&#34;, by having a named, coherent &#34;functor&#34; concept in the language functions can be written that take advantage of the common functionality.\n It is important not to credit complexity of particular implementations to the complexity of the interface. Behind an interface of  function () string could lie a constant return of some particular string, or  a series of events that takes nearly a full book to explain by fetching a web page and returning its text... but the latter&#39;s complexity should be accounted solely to that particular implementation, not the  function () string interface it can conform to.\n Similarly, a functor may be as simple as mapping the incoming function over a list, or it may require an arbitrarily-complicated traversal over a data structure like a skip list and construction of a new one. But that is not a complicated operation because &#34;functors are complicated&#34;, it is a complicated operation because skip lists are complicated. The functor interface itself does not account for the complication.\n It is important not to credit the complexity of what we can  do with iterators to implementations of the interface. It is possible to take three iterators, reverse one of them, combine two others with a reduction function, and take only the prime indexed values from the result, but that doesn&#39;t affect the fact that an iterator is just a function you call to get &#34;the next value&#34;.\n   For their own good reasons, mathematicians use &#34;functor&#34; as a concrete noun. Haskell copied this, hence how often you hear about &#34;a functor&#34;.\n However, interfaces are  adjectives that describe a data structure, which is why in many languages they are often named with  -able suffixes (Iterable, Serializable, etc.) Programmers are better off thinking of it as Functable or Fmapable or something like that.\n Unfortunately, we do not have a pre-existing verb form for &#34;using the Functor interface&#34; the way we have &#34;iterate on&#34; for Iterable or &#34;serialize&#34; for Serializable. The closest we have is &#34;map on&#34;, and that is deceptive because that term usually has the mental image of some concrete data structure, possibly only and exactly a list, being mapped on, despite it being much more general. I recommend taking a nonsense term like Functable and owning it, rather than jamming a square concept into a round concept hole.\n If you find yourself confused, I recommend literally saying &#34;Functable&#34; to yourself. Eventually you will naturally start to hear Functor as just a synonym for how you say it to yourself. You may also consider &#34;Functionable&#34;, which is perilously close to &#34;functional&#34;, but carries the idea of &#34;we can apply a function to it&#34;, albeit a very particular function with a certain signature.\n In the context of the post you are reading right now, this may feel like nitpicking. However, I think it is actually a very significant contributor to the problem people have with understanding the functor and monad interfaces. I&#39;ve tried to carefully use those words in this post consistently as adjectives, because when you use them as nouns it becomes very confusing as you try to treat them as you treat most nouns. A lot of people speak as if you can have &#34;a functor&#34; or &#34;a monad&#34; in your hand, and start trying to talk about what they &#34;do&#34; stripped away from the context of the specific implementation in question. But you can&#39;t do that, any more than you can speak about the specific implementation of &#34;an iterator&#34; stripped away from what it is a specific implementation  for. Treating &#34;monad&#34; and &#34;functor&#34; as nouns leads to a lot of confusion.\n  Functor can be applied to a number of things that aren&#39;t containers. We&#39;ve seen that already with functions. It is a common mistake in non-Haskell implementations to assume that functor implementations can only go on containers.\n When I bring this up online, inevitably someone says something like &#34;Well, if you squint hard enough, functions are containers, and those other things are containers, and so on, so they do always work on containers.&#34; To that I say, if everything is a container, then the word container has no meaning. I think when you&#39;re rendering useful words meaningless just to conform to your misconceptions that you&#39;re stepping into a maze of mirrors that is only going to confuse you. The most sensible approach is to discard the misconception and understand that functors are not always containers.\n     looks like you are calling the function &#34;fmap&#34; with two parameters, a function to add one to integers and a list of integers. This can compound confusion when functor is thought of as a noun, because, what is fmap? Maybe it&#39;s a part of &#34;functor&#34;? In OO languages, functions do not have any sort of interface resolution on them.\n   that is, a method call on a list. In fact it isn&#39;t even particularly relevant at this point that &#34;fmap&#34; participates in an interface, because this is all statically-resolvable at compile time, just as it would be in many other languages. Laid out this way, an OO programmer has no problem imagining that resolving &#34;fmap&#34; may involve looking at the definition of the list itself.\n This is not how Haskell resolves names. It isn&#39;t an object-oriented name. But if you don&#39;t want to learn Haskell and merely want to learn about what all this &#34;monad&#34; and &#34;functor&#34; hype is, this is a  better metaphor for what Haskell is doing than thinking of  fmap as some sort of weird magical function. It&#39;s  closer to a method name resolving to an &#34;fmap&#34; implementation on a particular data structure. (Which, again, isn&#39;t  quite what&#39;s going on; it&#39;s just close enough for now.)\n   class Functor f where fmap :: (a -&gt; b) -&gt; f a -&gt; f b\n This just says, if you have a way of taking an  a and producing a  b, and you have a source of  as, you can have a source of  bs.\n  This is the  full definition. There is no additional hidden machinery that Haskell is somehow automatically invoking when you &#34;use a Functor&#34;. Like many OO languages, there is no additional conversion or weird stuff wrapped around the resolved method. Just like OO resolving an overridden method (with no automatic conversions),  all the magic is in picking the correct implementation; once resolved the language is not doing anything else.\n What makes a data structure &#34;functorish&#34;? It is having a sensible implementation of fmap, whatever that may be on the data structure. If it has a sensible implementation, we can give it, that makes it a Functor, not the other way around. Theoretically this is how it ought to work in all languages with a concept of an interface of some sort, but sometimes the paperwork can get in the way and make it feel like it&#39;s the other way around, that something isn&#39;t an Iteratable until I deliberately make it one. But I think it&#39;s a more mature programming view to think of a data structure as always having a set of possible sensible implementations for a given interface, possibly empty or more than one, and you simply choose whether or not to explain it to the language. You usually aren&#39;t &#34;creating&#34; these implementations. At least for these simpler, more mathematical types of interfaces.\n  The functor definition above has  f a, which is Haskell notation for &#34;a type  f parameterized by  a&#34;. That&#39;s abstract with type variables, but easy in examples;  List Int is a &#34;List&#34; parameterized by &#34;Int&#34;, meaning it can hold Ints.\n While in full Haskell this can get more complicated, for the simple types I&#39;m using in this post you can do the match visually. To match  f a to  List Int, we set  f = List and  a = Int.\n Unfortunately, two of Haskell&#39;s most important types get special-cased and visually matching them is hard. Rather than  List Int, Haskell uses  [Int], which is confusing at the worst possible time for a novice.\n Fortunately, we can write this as  [] Int. It is already valid Haskell syntax. Then we can visually match:  f = [] and  a = Int. I don&#39;t write a lot of Haskell code nowadays but I&#39;ve been adopting that as how I represent lists everywhere in my types, because I don&#39;t think the special case is very useful.\n The other confusing type is the function type  a -&gt; b. For didactic purposes, it is better spelled  (-&gt;) a b. Again, legal Haskell syntax today, though you unfortunately need the parentheses. In this case, for the functor implementation on  (-&gt;),  f = (-&gt;) a and the remainder is  b. That&#39;s still a bit abstract, so let&#39;s concretize it by observing that you can convert the  output of both a  (-&gt;) String Int and a  (-&gt;) Int Int if you have some function  (-&gt;) Int String, because what matters is that the output of the function you are &#34;functionableing&#34; matches the input of the function you are applying to it, which is  Int in this case.\n I do  not use this in my code, because it mangles type signatures something fierce to do this everywhere. Still, it is important to bear in mind what it really means.\n In this case, the  f in the pattern matches &#34;the front piece&#34; instead of just the first element. If you do not intend to program in Haskell, just take my word for it that this is a legal match and let this wash over you; if you do intend to program in Haskell you&#39;ll find this won&#39;t take much to understand. Either way it&#39;s not terribly important for understanding what the monad interface is so I will be moving merrily along now.\n   A data structure is monadish when you have some source of  a, and a way of taking an  a and turning it into the same sort of source of  b, and turning that all into the same sort of source of  b. As with &#34;functor&#34; I am using the word &#34;source&#34; as the closest English word I can think of for the maximally generic idea of a type; you have a list of ints, or a function that yields an int, or a way of getting an int from user input, etc.\n class Monad m where (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b\n English is really tripping over itself here, but between the English description and the definition I hope the basic idea comes across. It probably also doesn&#39;t help that we have a function literally called  &gt;&gt;=, which is hard to pronounce. It&#39;s pronounced &#34;bind&#34;, which is only slightly more helpful in that that still fails to evoke any useful imagery. Let&#39;s take a specific example:\n  On its own, that&#39;s not a confusing function. In this particular case, there aren&#39;t that many possible sensible implementations. Clearly, we&#39;re going to iterate along the list of ints, pass them one by one to the thing that produces a list of strings, and the concatenate all those results together into the final list. (We have to do that, because the final result can&#39;t be a  List (List String); that&#39;s a separate type.)\n   That&#39;s all Monad is. It is an implementation of some &#34;method&#34; that conforms to that interface specification.\n Understanding this is not what people mean by &#34;understanding monad&#34;. This is the &#34;what&#34; of the monad interface, but not the &#34;why&#34;. But I think it is a step often glossed over too quickly in other works (if not at times outright skipped), so let&#39;s stay here and chew on that &#34;what&#34; for a bit.\n Once again, I want to emphasize that just like in OO languages and just like fmap, there is no special magic that Haskell invokes because &#34;it&#39;s a monad&#34;. All Haskell does is look up the interface&#39;s implementation and pass the arguments in. There is &#34;do notation&#34; but that is  only a syntax-sugar respelling of this function call; it still does no further manipulation of arguments, no coercions, no modification of input, no modification of output, nothing. Since this article is about understanding &#34;monad&#34; without going deeply into Haskell-specific details, I&#39;m going to ignore it because it&#39;s just syntax sugar.\n Bind is simply a function that takes some wrapped type, a function that takes the inner value and returns a wrapped value, and a final wrapped value of that type.\n  Again, no mystery to this implementation. It takes something that may have an Int or not, converts it to a string, and then returns something that is either a String or nothing.\n  Obviously, you don&#39;t know what Blorp does. I named it and I don&#39;t even know what it does. But you can see this would be an implementation of &#34;bind&#34; for Blorp, on particular types  Int and  String.\n That&#39;s all Monad is. Just as there is no magic around the Iterator&#39;s  Next method, just as there is no magic around functors,this is all the  what of a Monad is. In fact, it literally  can&#39;t be more complicated, because this is all an interface  is. All an interface can do is name a particular method. Nothing else happens. If you find your current conception of monad does not match that and it is insisting there&#39;s a big ball o&#39; mystery here, throw it out. It is nothing more than declaring a particular function as the implementation of this interface and the subsequent resolution machinery when you use it. Nothing. More.\n No, I do not mean this in a &#34;this hard concept is really easy if you look at right&#34;. I do not mean it as an attempt to simplify some explanation at all, because this isn&#39;t a simplified explanation. This  is what a monadic implementation is. It&#39;s not a simplification at all. It&#39;s a completely accurate description. It is no more and no less than a specification of an implementation for the particular interface. It is the same as Iterator and Functor and Stringable and all the other well-known interfaces many languages have.\n I have belabored this point in text mostly in the hopes that you&#39;ll slow down and process this before continuing on. A lot of people have really built this particular interface up in their head as something fundamentally mysterious. But this is all the  what of monad is.\n Is it a burrito? Is it a space suit? Is it some other bizarre metaphor? No. You don&#39;t need a bizarre metaphor to understand this part. In fact you rather need a  lack of bizarre metaphors, because they mythologize\n......", "posttime": "2021-06-26 08:44:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6559\u7a0b,\u51fd\u6570,monads", "title": "\u51ed\u501f\u8bfb\u8fc7\u592a\u591a\u201c\u6559\u7a0b\u201d\u7684\u4eba\u7684\u51fd\u6570\u548cMonads ", "title_en": "Functors and Monads for People Who Have Read Too Many \u201cTutorials\u201d", "transed": 1, "url": "http://www.jerf.org/iri/post/2958", "via": "", "real_tags": ["\u6559\u7a0b", "\u51fd\u6570", "monads"]}, {"category": "", "categoryclass": "", "imagename": "d796b1935a1b242e1061509cf6d6fc78.jpg", "infoid": 1068358, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b63\u5982\u6211\u4eec\u6240\u5b66\u5230\u7684\uff0c\u503e\u5411\u4e8e\u6295\u8d44\u7535\u5b50\u5546\u52a1\u57fa\u7840\u8bbe\u65bd\u548c\u4ed8\u6b3e\u516c\u53f8\u7684\u6fc0\u53d1\u4eba\u5458\u73b0\u5728\uff08\u6839\u636e\u4e00\u4efd\u8bc1\u5238\u59d4\u5458\u4f1a\u7533\u8bf7\uff09\uff0c\u63a5\u8fd1\u5df2\u8fbe\u5230\u76ee\u68074.25\u4ebf\u7f8e\u5143\u7684\u7b2c\u56db\u4e2a\u57fa\u91d1\u3002\u5b83\u6709 - \u5c31\u50cf\u8d8a\u6765\u8d8a\u591a\u7684\u5176\u4ed6\u7f8e\u56fd\u516c\u53f8 - \u4e5f\u5728\u67cf\u6797\u5f00\u8bbe\u4e86\u4e00\u4e2a\u65b0\u7684\u529e\u516c\u5ba4\uff0c\u7531\u5168\u7403\u521b\u59cb\u4eba\u9996\u90fd\u7684\u524d\u6295\u8d44\u8005\u6700\u5927\u7684Mayer\u9886\u5bfc\u3002\n \u6211\u4eec\u8c08\u5230\u4e86\u6fc0\u6d3b\u4eba\u7684\u58ee\u5927\u5174\u8da3\uff0c\u4ee5\u53ca\u5b83\u662f\u4ec0\u4e48\u3002\u6211\u4eec\u8fd8\u8ba8\u8bba\u4e86\u73b0\u5728\u4ea4\u6613\u7684\u901f\u5ea6\u4ee5\u53caSarracino\u6210\u4e3a\u4e00\u5e74\u4e2d\u6700\u70ed\u95e8\u8d8b\u52bf\u4e4b\u4e00\uff1a\u4e9a\u9a6c\u900a\u7684\u7b2c\u4e09\u65b9\u5356\u5bb6\u7684\u8bb8\u591a\u6c47\u603b\u3002\u6458\u5f55\u4ece\u8be5\u8c08\u8bdd\u4e2d\u9075\u5faa\uff0c\u8f7b\u8f7b\u5730\u7f16\u8f91\u957f\u5ea6\u3002\n   SS\uff1a\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u3002\u6211\u4eec\u6295\u8d44Hybris [2013\u5e74\u7531SAP\u6536\u8d2d\u7684\u7535\u5b50\u5546\u52a1\u516c\u53f8\uff0c\u4ee515\u4ebf\u7f8e\u5143]\u3002\u6211\u4eec\u4e5f\u662f\u7ebd\u9a6c\u514b\u7279\u7684\u6295\u8d44\u8005[\u516d\u5c81\uff0c\u67cf\u6797\u548c\u6ce2\u58eb\u987f\u7684\u8428\u65af\u516c\u53f8\uff0c\u7531Sepernhan Schambach\u6210\u7acb\uff0c\u4ed6\u8fd8\u521b\u7acb\u4e86QuandWare]\u3002\n \u6211\u4eec\u4e00\u76f4\u6765\u56de\u5230\u4f26\u6566;\u4ece\u4e1c\u6d77\u5cb8\u5f88\u5bb9\u6613\u3002\u4f46\u5927\u9646\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u6545\u4e8b\u3002\u4f60\u771f\u7684\u9700\u8981\u5728\u90a3\u91cc\u6709\u4e00\u4e2a\u5b58\u5728\u3002\n   SS\uff1a\u90a3\u91cc\u603b\u6709\u5f88\u591a\u6280\u672f\u4eba\u624d - \u6211\u8ba4\u4e3a\u6b27\u6d32\u7684\u830e\u6bd5\u4e1a\u751f\u6570\u91cf\u5728\u7f8e\u56fd\u6311\u6218\u4e4b\u524d\u662f\u98ce\u9669\u793e\u533a\u8f83\u5c0f - \u5b83\u9700\u8981\u4e00\u4e2a\u5145\u6ee1\u6d3b\u529b\u7684\u65e9\u671f\u793e\u533a\u521b\u9020\u540e\u671f\u673a\u4f1a\u3002\u6b27\u6d32\u4e5f\u7f3a\u5c11\u4e2d\u90e8\u7ba1\u7406\u3002\u5728L.A.\u6216\u7ebd\u7ea6\u6216\u6ce2\u58eb\u987f\uff0c\u60a8\u53ef\u4ee5\u4eceFacebook\u548c\u4e9a\u9a6c\u900a\u4e2d\u62c9\u51fa\u5f3a\u5927\u7684SVP\u751a\u81f3C\u7ea7\u6267\u884c\uff0c\u4f46\u90a3\u91cc\u6ca1\u6709\u76f8\u540c\u7684\u5927\u516c\u53f8\u6c34\u5e73\uff0c\u5e76\u4e14\u5df2\u7ecf\u6539\u53d8\u3002\u4ed6\u4eec\u73b0\u5728\u90fd\u662f[\u6b27\u6d32]\u3002\u6240\u4ee5\u4f60\u73b0\u5728\u5df2\u7ecf\u83b7\u5f97\u4e86\u6280\u672f\u4eba\u624d\uff0c[\u8db3\u591f]\u98ce\u9669[\u7f8e\u5143]\u548c\u7ba1\u7406\u3002\n TC\uff1a\u8fd8\u6709\u5176\u4ed6\u4f18\u70b9\u5417\uff1f\u8d35\u65cf\u5728\u6b27\u6d32\u6709\u66f4\u597d\u7684\u4f30\u503c\u8fd8\u662f\u5728\u90a3\u91cc\u7684\u8001\u864e\u5168\u7403\u63a8\u52a8\u6570\u5b57\uff1f\n SS\uff1a\u4e3a\u6700\u597d\u7684\u516c\u53f8\uff0c\u60a8\u6ca1\u6709\u770b\u5230\u5927\u9646\u7684\u4f30\u503c\u5dee\u5f02\u3002\u4f46\u6b27\u6d32\u7684\u673a\u9047\u5728\u4e2d\u671f\u9636\u6bb5\u662f\u6709\u5438\u5f15\u529b\u7684\u3002\u79cd\u5b50\u548cA\u975e\u5e38\u597d\uff0c\u4f46B\uff0cC\uff0cD\u548cE\u662f\u4e00\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u6e38\u620f\u3002 \n\u6b27\u6d32\u7684\u53e6\u4e00\u4e2a\u4ee4\u4eba\u60ca\u53f9\u7684\u4e8b\u60c5\u662f\uff0c\u867d\u7136\u4f60\u5fc5\u987b\u5728\u8425\u9500\uff0c\u9500\u552e\u548c\u4ea7\u54c1\u4e0a\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u4f60\u5fc5\u987b\u662f\u591a\u8bed\u8a00\uff0c\u4f46\u4f60\u5fc5\u987b\u5904\u7406\u4e0d\u540c\u7684\u7a0e\u6cd5\u7ba1\u8f96\u533a\uff0c\u4f60\u5fc5\u987b\u5728\u4e0d\u540c\u7684\u56fd\u5bb6\u9500\u552e\u4e0d\u540c\uff0c\u6b27\u6d32\u521d\u521b\u516c\u53f8\u4f5c\u4e3a\u65e8\u5728\u7684\u76ee\u7684\u662f\uff0c\u4e0e\u7f8e\u56fd\u516c\u53f8\u7684\u5168\u7403\u66f4\u5feb\u3002 [\u5728\u7f8e\u56fd]\u4e2d\uff0c\u4f60\u6709\u4e00\u4e2a\u5de8\u5927\u7684\u5e02\u573a\uff0c\u4f60\u53ef\u80fd\u4f1a\u8fdb\u5165\u82f1\u56fd\u548c\u52a0\u62ff\u5927\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u4e3b\u5f20\u3002\n TC\uff1a\u60a8\u4e0e\u60a8\u8ba8\u8bba\u7684\u6b27\u6d32\u516c\u53f8\u662f\u5426\u9700\u8981\u5728\u7f8e\u56fd\u5efa\u7acb\u5b58\u5728\u7684\u5fc5\u8981\u6027\uff0c\u6216\u8005\u4e5f\u6709\u6539\u53d8\uff0c\u4e5f\u6709\u6240\u6539\u53d8\uff1f\n SS\uff1a\u4f8b\u5982\uff0c\u5728\u67d0\u4e9b\u5730\u533a\uff0c\u4e91\u5c42\u91c7\u7528\u843d\u540e\u4e8e\u7f8e\u56fd\uff0c\u60a8\u53ef\u4ee5\u5728\u6b27\u6d32\u83b7\u5f97Hypergrowth\u3002\u56e0\u6b64\uff0c\u8fd9\u4e0d\u662f\u6269\u5c55\u5230\u7f8e\u56fd\u7684\u8981\u6c42\u6216\u5148\u51b3\u6761\u4ef6\u3002\u5f53\u7136\uff0c\u5b83\u662f\u6280\u672f\u4e1a\u52a1\u4e2d\u4efb\u4f55\u4eba\u7684\u8def\u7ebf\u56fe\u3002\n TC\uff1a\u60a8\u5982\u4f55\u8003\u8651\u53ef\u4ee5\u60f3\u8c61\u4e0e\u60a8\u5728\u8def\u4e0a\u7684\u7f8e\u56fd\u6295\u8d44\u6210\u4e3a\u7ade\u4e89\u5bf9\u624b\u7684\u516c\u53f8\uff1f\n SS\uff1a\u6211\u4eec\u8c28\u614e\u5730\u6295\u8d44\u540c\u4e00\u5bb6\u516c\u53f8\uff0c\u800c\u662f\u5728\u4e0d\u540c\u7684\u5730\u7406\u4f4d\u7f6e\u4e2d\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u4fe1\u5ff5\u662f\u4ed6\u4eec\u53ef\u4ee5\u5728\u5168\u7403\u8303\u56f4\u5185\u7ade\u4e89\uff0c\u6240\u4ee5\u6211\u4eec\u8bd5\u56fe\u9009\u62e9\u5168\u7403\u8d62\u5bb6\u3002\u5982\u679c\u5b83\u662f\u4e00\u4e2aMicro Geo  - \u8ba9\u6211\u4eec\u8bf4\u8fd9\u662f\u4e00\u5bb6\u5728\u5fb7\u56fd\u9500\u552eSMB\u57fa\u7840\u8bbe\u65bd\u8f6f\u4ef6\u7684\u516c\u53f8\uff0c\u4e0d\u4f1a\u5230\u8fbe\u7f8e\u56fd\uff0c\u6211\u4eec\u4e0d\u4f1a\u9047\u5230\u652f\u6301[\u7f8e\u56fd\u7c7b\u4f3c\u516c\u53f8]\uff0c\u4f46\u8fd9\u662f\u4f60\u5fc5\u987b\u652f\u4ed8\u7684\u4e1c\u897f\u5bc6\u5207\u5173\u6ce8\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u8463\u4e8b\u4f1a\u4e0a\uff0c\u6211\u4eec\u6d3b\u8dc3\u3002\n \u6211\u4eec\u7684\u8d44\u91d1\u76f8\u5f53\u96c6\u4e2d\u3002\u5728\u6211\u4eec\u7684\u7b2c\u4e09\u4e2a\u57fa\u91d1\u4e2d\uff0c\u6211\u4eec\u53ea\u6709\u516d\u4e2a\u8d44\u4ea7\u3002\u901a\u8fc7\u8fd9\u4e2a\u65b0\u57fa\u91d1\uff0c\u6211\u4eec\u6700\u591a\u53ef\u4ee5\u62e5\u670910\u523012\u4e2a\u4f19\u4f34\u5173\u7cfb\u3002\u6240\u4ee5\u5b83\u66f4\u5bb9\u6613\u7ba1\u7406\u3002\n  TC\uff1a\u5982\u4f55\u5728\u901f\u5ea6\u79fb\u52a8\u7684\u5e02\u573a\u4e0a\u6295\u8d44\u54ea\u4e9b\u5e02\u573a\uff1f\u6211\u4eec\u8bb0\u8005\u770b\u5230\u4e86\u5f88\u591a\u4ea4\u6613\uff0c\u4ed6\u4eec\u5728\u8fd9\u4e00\u70b9\u4e0a\u770b\u8d77\u6765\u5f88\u50cf\u5b83\u4ee4\u4eba\u6cae\u4e27\u3002\u5b83\u5bf9\u4f60\u5fc5\u987b\u662f\u4ee4\u4eba\u6307\u91cd\u7684\u3002 \nSS\uff1a\u4e8b\u60c5\u5feb\u901f\u53d1\u5c55\uff0c\u5b83\u4eec\u5f88\u6602\u8d35\u3002\u8001\u864e\u548c\u66f4\u5927\u7684\u516c\u53f8\u5df2\u7ecf\u8f6c\u79fb\u4e86\u5e02\u573a\u3002\u4f46\u4e2d\u671f\u9636\u6bb5\u4ecd\u6709\u5f88\u5927\u7684\u673a\u4f1a\u3002\u6211\u4eec\u7684\u6574\u4f53\u54f2\u5b66\u662f\uff0c\u9996\u5148\uff0c\u60a8\u60f3\u627e\u5230\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u5b8c\u6210\u4e0d\u540c\u6216\u505a\u67d0\u4e8b\u7684\u542f\u52a8\u3002\u60a8\u8fd8\u5fc5\u987b\u533a\u5206\u7279\u5f81\u548c\u5e73\u53f0\u3002\u8fd9\u4e2a\u542f\u52a8\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u771f\u6b63\u7684\u5e73\u53f0\u5e76\u83b7\u53d6\u4e0d\u540c\u7c7b\u578b\u7684\u5ba2\u6237\u5417\uff1f\u7b2c\u4e09\uff0c\u4f60\u5fc5\u987b\u77e5\u9053\u8fd9\u4e9b\u884c\u4e1a\u73b0\u5728\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u597d\u591a\u4e86\uff0c\u56e0\u4e3a\u5230\u4e86\u4f60\u7684\u89c2\u70b9\uff0c\u8fd9\u4e9b\u65e5\u5b50\u670915\u5bb6\u516c\u53f8\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u5e76\u62e5\u6709\u8fd9\u79cd\u5b9a\u7f6a\uff0c\u4f60\u5fc5\u987b\u4e0e\u6240\u670915\u6b21\u89c1\u9762\u9009\u62e9\u4f60\u8ba4\u4e3a\u57fa\u4e8e\u5e02\u573a\u7684\u80dc\u5229\u7684\u9a6c\uff0c\u56e2\u961f\u7684\u8d28\u91cf\u4ee5\u53ca\u4ed6\u4eec\u53ef\u4ee5\u5efa\u9020\u7684\u4ea7\u54c1\u7684\u8d28\u91cf\u3002\n \u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u5b83\u66f4\u96be\u533a\u5206\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5bf9\u6b64\u505a\u51fa\u53cd\u5e94\u3002\u6211\u4eec\u53cd\u5e94\u7684\u65b9\u5f0f\u662f\u4f9d\u9760\u6211\u4eec\u7684\u6838\u5fc3\u9886\u57df\uff0c\u6211\u4eec\u5bf9\u6211\u4eec\u6240\u77e5\u7684\u6838\u5fc3\u90e8\u95e8\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u4f3c\u4e4e\u975e\u5e38\u795e\u5947\u7684\u4e1c\u897f\uff0c\u4f46\u6211\u4eec\u53ea\u662f\u6ca1\u6709\u8db3\u591f\u5feb\u5730\u901f\u5ea6\u8db3\u591f\u5feb\uff0c\u9274\u4e8e\u5e02\u573a\u7684\u901f\u5ea6\u3002\n TC\uff1a\u5982\u4f55\u786e\u5b9a\u542f\u52a8\u662f\u5426\u6b63\u5e38\u4f7f\u7528\u7279\u5f81\u4e0e\u5e73\u53f0\uff1f\n SS\uff1a\u8fd9\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u4f1f\u5927\u7684\u7279\u8272\u516c\u53f8\u53ef\u4ee5\u5feb\u901f\u5230\u8fbe\u4e00\u4e9b\u89c4\u6a21 -  1000\u4e07\u7f8e\u5143\uff0c2000\u4e07\u7f8e\u5143\uff0c3000\u4e07\u7f8e\u5143\uff0c\u6536\u51654000\u4e07\u7f8e\u5143\u3002\u4f46\u662f\uff0c\u4e0b\u4e00\u6b65\u5f88\u96be\u3002\u5177\u6709\u771f\u5b9e\u7f51\u7edc\u6548\u679c\u7684\u516c\u53f8 - \u610f\u5473\u7740\u6bcf\u4e2a\u5ba2\u6237\u90fd\u6dfb\u52a0\uff0c\u5bf9\u5176\u4ed6\u5ba2\u6237\u6709\u4e00\u4e9b\u597d\u5904 -  [\u53ef\u4ee5]\u4efb\u4f55\u7c7b\u578b\u7684\u53cc\u9762\u5e02\u573a\uff0c[\u5b83\u53ef\u4ee5]\u5d4c\u5165\u5f0f\u4ed8\u6b3e\uff0c[\u4f46\u5fc5\u987b\u6709\u4e00\u4e9b\u9664\u4e86\u9500\u552e\u7b80\u5355\u8f6f\u4ef6\u4e4b\u5916\uff0c\u5176\u4ed6\u201c\u4ef7\u503c\u6dfb\u52a0\u201d\u6c34\u5e73\u3002\n \u8fd9\u4e5f\u770b\u5230\u66f4\u591a\u7684\u516c\u53f8\u5145\u7535\uff0c\u4e0e[\u5e73\u9762\u8ba2\u9605\u7387]\u3002\u6211\u8ba4\u4e3a\u8fd9\u5c06\u662f\u672a\u6765\u4e09\u5e74\u7684\u5de8\u5927\u8d8b\u52bf - \u8fd9\u8fdc\u79bbSaaS\u6cbf\u7740\u5ba2\u6237\u6240\u5173\u5fc3\u7684\u7ebf\u8def\u5145\u7535\u3002\u5f53\u60a8\u6536\u53d6\u5ba2\u6237\u67e5\u770b\u5176\u6536\u5165\u7684\u65b9\u5f0f\u65f6\uff0c\u4ea7\u54c1\u5fc5\u987b\u975e\u5e38\u597d\uff0c\u975e\u5e38\u5dee\u5f02\u5316\u3002\n  TC\uff1a\u5728\u5173\u4e8e\u8d44\u52a9\u516c\u53f8\u4e4b\u524d\uff0c\u60a8\u5728\u5e2e\u52a9\u6211\u4e4b\u524d\u4e0e\u6211\u4ea4\u8c08\uff0c\u5e2e\u52a9SMBS\u907f\u514d\u88ab\u4e9a\u9a6c\u900a\u6316\u7a7a\u3002\u53ea\u662f\u60f3\u77e5\u9053\u4f60\u5bf9\u4e9a\u9a6c\u900a\u7684\u7b2c\u4e09\u65b9\u5356\u5bb6\u7684\u8bb8\u591a\u989d\u5916\u63d0\u5347\uff0c\u6211\u4eec\u4e5f\u5728\u7f8e\u56fd\u548c\u6b27\u6d32\u770b\u5230\u4e86\u4e9a\u6d32\uff0c\u7a81\u7136\u5728\u4e9a\u6d32\u3002\n SS\uff1a\u54e6\uff0c\u5929\u54ea\u56e0\u6b64\uff0c\u4ed6\u4eec\u57fa\u672c\u4e0a\u627e\u5230\u4e86\u771f\u6b63\u7684\u4ea7\u54c1\uff0c\u4e3a\u5ec9\u4ef7\u500d\u6570\u7684EBITDA\u8d2d\u4e70\u5b83\u4eec\uff0c\u7136\u540e\u4e3a\u4e9a\u9a6c\u900a\u63d0\u4f9b\u66f4\u597d\u7684\u5e7f\u544a\uff0c\u53ef\u89c1\u6027\u548c\u8bc4\u8bba\uff0c\u4ee5\u83b7\u5f97\u66f4\u591a\u7684\u4e70\u5bb6\u63a8\u52a8EBITDA\u3002\u8fd9\u662f\u4e00\u4e2a\u8f89\u714c\u7684\u620f\u5267\uff0c\u4f46\u6211\u7684\u8138\u4e0a\u6495\u6389\u4e86\u51e0\u6b21\uff0c\u4e00\u4e2a[\u5b9e\u4f8b\u6b20\u7684\u60c5\u51b5]\u4e00\u4e2a\u5931\u8d25\u7684\u4e00\u70b9\uff0c\u6240\u4ee5\u5f53\u4e9a\u9a6c\u900a\u8f6c\u79fb\u4e1c\u897f\u65f6\uff0c\u6211\u8ba4\u4e3a\u8fd9\u4f1a\u5f15\u5165\u98ce\u9669\u3002 \n\u90a3\u91cc\u6709\u4e00\u4e9b\u975e\u5e38\u6709\u8da3\u7684\u8d44\u4ea7\u3002 \u8fd9\u4e0d\u662f\u6211\u4eec\u6240\u505a\u7684\u3002 \u6211\u4e5f\u89c9\u5f97\u6709\u4e00\u4e9bCovid\u98a0\u7c38\uff0c\u56e0\u4e3a\u4eba\u4eec\u5728\u5bb6\u91cc\u800c\u4e0d\u662f\u82b1\u94b1\uff0c\u6240\u4ee5\u4f60\u770b\u5230\u6d88\u8d39\u4ece\u670d\u52a1\u548c\u7ecf\u9a8c\u548c\u5546\u54c1\u548c\u4ea7\u54c1\u8f6c\u79fb\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5c06\u8fc5\u901f\u8f6c\u79fb\u5230\u7ecf\u9a8c\u3002 \u6240\u4ee5\u6211\u4eec\u4f1a\u770b\u5230\u4e0e\u5176\u4e2d\u4e00\u4e9b\u4eba\u7684Covid\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u4f46\u5b83\u4f1a\u5f97\u5230\u540c\u6837\u7684\u603b\u4f53\u589e\u957f\uff0c\u63a8\u52a8\u4e86\u4e00\u4e9b\u5e95\u5c42\u4ea7\u54c1\u3002 \u8fd8\u6709\u4e00\u4e2a\u5173\u4e8e\u4ed6\u4eec\u771f\u6b63\u7533\u8bf7\u7684\u6280\u672f\u4e0e\u4e4b\u76f8\u53cd\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u4e00\u4e2a\u4ea4\u6613\u4e1a\u52a1\u3002 \u90a3\u662f\u4e0d\u6e05\u695a\u7684\uff0c\u4f46\u662f\uff0c\u6211\u7684\u610f\u601d\u662f\uff0c\u5176\u4e2d\u4e00\u4e9b\u4eba\u7b79\u96c6\u4e86\u534a\u5341\u4ebf\u7f8e\u5143\uff0c\u6240\u4ee5\u4ed6\u4eec\u5f97\u5230\u5b83\uff0c\u4ed6\u4eec\u6b63\u5728\u505a\u4e00\u4e9b\u6b63\u786e\u7684\u4e8b\u60c5\u3002 ", "note_en": "As we learned, Activant, which tends to invest in e-commerce infrastructure and payments companies, is now (according to an  SEC filing), nearing a close on a fourth fund that has targeted $425 million. It has \u2014 like a  growing number of other U.S. firms \u2014 also opened a new office in Berlin, headed by Max Mayer, a former investor with Global Founders Capital.\n We talked a bit about Activant\u2019s growing interest in Europe and what underlies it. We also talked about the velocity of deal-making right now and what Sarracino makes of one of the hottest trends of the year: the many roll-ups of third-party sellers on Amazon. Excerpts from that conversation follow, edited lightly for length.\n   SS: A long time. We\u2019d invested in Hybris [an e-commerce company that was  acquired by SAP in 2013 for $1.5 billion]. We\u2019re also investors in NewMarket [a six-year-old, Berlin- and Boston-based SaaS company that was founded by serial entrepreneur  Stephan Schambach, who also founded Demandware].\n We go back and forth to London all the time; it\u2019s easy from the East Coast. But the continent is a different story. You really need to have a presence on the ground there.\n   SS: There was always a lot of technical talent there \u2014 I think there are two times the number of STEM graduates in Europe as in the U.S. The challenge before was that the venture community was smaller \u2014 it takes a vibrant early-stage community to create later-stage opportunities. Europe was also missing middle management. In L.A. or New York or Boston, you can pull strong SVPs or even C-level execs out of Facebook and Amazon, but there wasn\u2019t the same level of big companies there, and that has changed. They\u2019re all [in Europe] now. So you\u2019ve now got the technical talent, [sufficient] venture [dollars] and management.\n TC: Are there other advantages? Are valuations any better in Europe or is Tiger Global  driving up the numbers there, too?\n SS: For the best companies, you don\u2019t see much difference in valuation across continent. But the opportunity in Europe is attractive in the middle stage. Seed and A is pretty well covered, but B,C,D, and E is a very different game.\n Another amazing thing about Europe is that while you do have to spend a little more on marketing, sales, and product because you have to be multi-lingual, you have to deal with different tax jurisdictions, you have to sell differently in different countries, European startups as a result are purpose-built to go global much faster versus U.S. companies. [In the U.S.], you have one giant market and you might pop into the UK and Canada, but it\u2019s a very different proposition to go global.\n TC: Do the European companies you talk with feel the need to establish a presence in the U.S. as soon as possible, or has that changed, too?\n SS:\u00a0 In some areas, for example, where cloud adoption is behind in Europe versus the U.S., you can get hypergrowth in Europe. So it\u2019s not a requirement or prerequisite to expand into the U.S. But, of course, it\u2019s on the roadmap for anyone in the tech business.\n TC: How do you think about companies that could conceivably become rivals with your U.S. investments down the road?\n SS: We\u2019re careful about investing in the same company but in different geographies because our belief is that they can compete globally, so we try and pick the global winner. If it\u2019s a micro geo \u2014 let\u2019s say it\u2019s a company that sells SMB infrastructure software in Germany and won\u2019t get to the US, we wouldn\u2019t have trouble backing [a similar company in the U.S.], but that\u2019s something you have to pay close attention to, because we are on the board and we are active.\n Our funds are fairly concentrated. In our third fund, we only have six assets. With this new fund, we\u2019ll have 10 to 12 partnerships at most. So it\u2019s a little easier to manage.\n  TC: How can anyone invest in a market that\u2019s moving this fast? We reporters see a lot of deals and they look so much alike at this point that it\u2019s dizzying. It must be exponentially worse for you.\n SS: Things are moving fast and they\u2019re expensive. Tiger and bigger firms have shifted the market. But there are still great opportunities in the mid-stages. Our overall philosophy is that, first, you want to find the startup that\u2019s doing something different or doing something that no one has done in a long time. You also have to distinguish between a feature and a platform. Can this startup build out a real platform and acquire different types of customers? Third, you\u2019ve got to know these sectors much better now than ever before, because, to your point, there are 15 companies doing the same thing these days, and to have that level of conviction, you have to meet with all 15 and pick what you think is the winning horse based on where the market is going, the quality of the team, and the quality of the product they can build.\n In some ways it\u2019s harder to differentiate, and there are a few ways to react to that. The way we react is to retrench to our core sectors that we know well and say no to a lot of stuff that seems really amazing but we\u2019re just not going to get up to speed fast enough given the velocity of the market.\n TC: How do you determine whether a startup is working on a feature versus a platform?\n SS: It\u2019s a real issue because there are a lot of great feature companies that can get to some scale pretty fast \u2014 $10 million, $20 million, $30 million, $40 million in revenue. But making that next step is hard. Companies with real network effects \u2014 meaning that every customer they add, there\u2019s some benefit to the other customers \u2014 [can be] any sort of of two-sided marketplace, [it can be] embedded payments, [but there has to be] some other level of \u2018value add\u2019 besides selling simple software.\n That\u2019s also seeing more companies charging transactionally versus [a flat subscription rate]. I think that\u2019s going to be a big trend over the next three years \u2014 this move away from SaaS to charging along the lines of what the customers cares about. When you charge the way the customer views their revenue, the product has to be very good and very differentiated.\n  TC: You\u2019ve talked with me before about funding companies that help SMBs avoid getting hollowed out by Amazon. Just wondering what you make of these many roll-ups of third-party sellers on Amazon we\u2019re seeing in the U.S. and Europe and suddenly in Asia, too.\n SS: Oh, gosh. So they\u2019re basically finding really neat products, buying them for cheap multiples of EBITDA, and then driving better advertising, visibility, and reviews on Amazon to get more buyers driving up EBITDA. It\u2019s a brilliant play, but I\u2019ve had my face ripped off a few times, and one [instance owed to there being] a single point of failure, so as Amazon shifts things, I think that introduces risk.\n There are some really interesting assets out there. It\u2019s just not what we do. I also think there was some Covid bump, because people were at home and not spending money on travel, so you saw spending shift away from services and experiences and into goods and products and I think that\u2019s going to shift back quickly to experiences. So we\u2019ll see what happens post COVID with some of these, but it\u2019s going to be get the same kind of overarching growth that drove some of the underlying products. There\u2019s\u00a0 also a question about how much technology they\u2019re really applying versus, is it more of a deal business. That\u2019s unclear, but, I mean, some of them have raised like half a billion dollars so they got it, they\u2019re doing something right.", "posttime": "2021-06-26 08:07:35", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u6295\u8d44\u8005,activant", "title": "\u53e6\u4e00\u4e2a\u7f8e\u56fd\u6295\u8d44\u8005 - \u6fc0\u52a8\u4eba\u5fc3\u7684\u8d44\u672c - \u5728\u6b27\u6d32\u5f00\u8bbe\u529e\u516c\u5ba4\uff0c\u56e0\u4e3a\u5927\u9646\u5347\u6e29 ", "title_en": "\n\t\t\t\tAnother U.S. investor \u2014 Activant Capital \u2013  is opening an office in Europe as the continent heats up\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/06/25/another-u-s-investor-activant-capital-is-opening-an-office-in-europe-as-the-continent-heats-up/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u6295\u8d44\u8005", "activant"]}, {"category": "", "categoryclass": "", "imagename": "a62f6388e0aa6d04630925e18171d904.jpg", "infoid": 1068357, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u4eca\u5929Sifive\u7684\u516c\u544a\u7684\u4e00\u90e8\u5206\uff0c\u9664\u4e86\u5728\u82f1\u7279\u5c14\u7684\u94f8\u9020\u670d\u52a1\u4ea7\u54c1\u4e0a\u542f\u7528Sifive IP\uff0cIntel\u5c06\u4f7f\u7528\u51767nm\u5de5\u827a\u6280\u672f\u521b\u5efa\u81ea\u5df1\u7684RISC-V\u5f00\u53d1\u5e73\u53f0\u3002\u8fd9\u4e2a\u540d\u4e3aHorse Creek\u7684\u5e73\u53f0\uff0c\u5c06\u6709\u51e0\u4e2aSifive\u7684\u65b0\u8868\u6f14P550 Cores\u4eca\u5929\u4e5f\u5728\u4eca\u5929\u5ba3\u5e03\uff0c\u5e76\u5c06\u4e0e\u82f1\u7279\u5c14\u7684DDR\u548cPCIe IP\u6280\u672f\u914d\u5bf9\u3002\n    \u9996\u6b21\u9605\u8bfb\u65b0\u95fb\u7a3f\u4e2d\uff0c\u5b83\u4e0d\u662f100\uff05\u6e05\u9664\uff0c\u5373\u82f1\u7279\u5c14\u7684\u8bc4\u8bba\u8ba8\u8bba\u4e86\u4e00\u4e2a\u4e0e\u4e3b\u673a\u7684P550\u7684\u5e73\u53f0\u6216\u4f5c\u4e3a\u52a0\u8f7d\u9879\u7684\u5e73\u53f0\uff1a\u5f15\u7528\u82f1\u7279\u5c14\uff0c\u201c\u6211\u4eec\u5f88\u9ad8\u5174\u6210\u4e3a\u4e00\u4e2a\u5e26\u6765\u7684\u94c5\u53d1\u5c55\u4f19\u4f34\u5c55\u793a\u76f8\u4e92\u5ba2\u6237\u7684\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684P550\u5bf9\u6211\u4eec\u76847nm Horse Creek\u5e73\u53f0\u7684\u8868\u73b0\u3002\u82f1\u7279\u5c14\u5386\u53f2\u4e0a\u901a\u5e38\u4f1a\u4f7f\u5176\u6cb3\u6d41\u7fa4\uff0c\u5982\u535a\u5c14\u5fb7\u6eaa\uff0c\u6a31\u6843\u6eaa\u6216\u6728\u6eaa\uff0c\u7528\u4e8e\u63d2\u5ea7\u5e73\u53f0 - \u800c\u4e0d\u662f\u4e00\u4f53\u5316\u5d4c\u5165\u5f0f\u5f00\u53d1\u5e73\u53f0\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u63aa\u8f9e\u4f7f\u5b83\u542c\u8d77\u6765\u50cf\u6211\u4eec\u5e94\u8be5\u8003\u8651RISC-V\u6838\u5fc3\u4f5c\u4e3a\u7ba1\u7406\u7cfb\u7edf\u53e6\u4e00\u90e8\u5206\u7684\u52a9\u7406\u6838\u5fc3\u3002\n  \u7136\u800c\uff0c\u82f1\u7279\u5c14\u4f3c\u4e4e\u6253\u7b97\u4f7f\u8fd9\u4e00\u5168\u529f\u80fd\u7684\u5f00\u53d1\u7cfb\u7edf\uff0c\u6cbf\u7740\u4eca\u5e74\u521d\u63a8\u51fa\u7684Sifive\u81ea\u5df1\u7684Hifive\u65e0\u4e0e\u4f26\u6bd4\u7684\u5e73\u53f0\u76f8\u4f3c\u3002\u662f\u4ec0\u4e48\u8ba9\u8fd9\u4e2a\u7279\u6b8a\u7684\u662f\u82f1\u7279\u5c14\u6b63\u5728\u81f4\u529b\u4e8e\u5728\u81ea\u5df1\u76847nm\u6d41\u7a0b\u8282\u70b9\u4e0a\u5f00\u53d1SOC\uff0c\u4e3a\u82f1\u7279\u5c14\u63d0\u4f9b\u201c\u66f4\u7b80\u5355\u201d\u7684\u8f66\u8f86\u6765\u6d4b\u8bd5\u548c\u52a0\u901f\u51767nm\u6280\u672f\u3002\u8fd9\u53ef\u4ee5\u968f\u7740RISC-V\u5f00\u53d1\u7684\u8d8a\u6765\u8d8a\u4f4e\u7684\u5174\u8da3\u800c\u8026\u5408\uff0c\u5e76\u4e14\u867d\u7136\u82f1\u7279\u5c14\u7684\u4f9b\u5e94\u94fe\u548c\u5206\u914d\u53ef\u80fd\u5177\u6709\u8fdc\u7a0b\u5373\u5c06\u5230\u6765\u7684\u5f00\u53d1\u4eba\u5458\u7684\u624b\u4e2d\u7684\u5e73\u53f0\u3002\n  \u8fc4\u4eca\u4e3a\u6b62\uff0c\u8fc4\u4eca\u4e3a\u6b62\uff0c\u8fc4\u4eca\u4e3a\u6b62\uff0c\u8fc4\u4eca\u4e3a\u6b62\uff0c\u8fc4\u4eca\u4e3a\u6b62\uff0c\u8fc4\u4eca\u4e3a\u6b62\u7684\u6700\u9ad8\u6027\u80fd\u5904\u7406\u5668\u7684\u65b0\u7684Sifive\u6027\u80fdP550\u6838\u5fc3\u662fSifive\u7684\u6700\u9ad8\u6027\u80fd\u5904\u7406\u5668\u3002\u5b83\u662f\u4e00\u79cd\u80fd\u529b\u7684\u6838\u5fc3\uff0c\u5168\u9762\u652f\u6301RISC-V\u77e2\u91cf\u6269\u5c55V1.0RC\u3002\u5b83\u5177\u670913\u7ea7\u4e09\u7ea7\u95ee\u9898\u65e0\u5e8f\u5fae\u67b6\u6784\uff0c\u5177\u6709\u79c1\u670932kb + 32kb l1\u7f13\u5b58\u548c\u79c1\u6709L2\u7f13\u5b58\uff08\u6bcf\u4e2a\u6838\u5fc3\uff09\u8bbe\u8ba1\u5728\u5355\u4e2a\u7fa4\u96c6\u4e2d\u652f\u6301\u56db\u4e2a\u6838\u5fc3\uff0c\u8be5\u7fa4\u4f53\u53ef\u4ee5\u5c06\u9ad8\u8fbe4 MB\u914d\u5bf9\u5171\u4eabL3\u3002\n    \u8be5\u5e73\u53f0\u63a8\u5411\u5e02\u573a\u7684\u65f6\u95f4\u5c3a\u5ea6\u975e\u5e38\u6709\u8da3\u3002\u5c3d\u7ba1\u82f1\u7279\u5c14\u6700\u8fd1\u81f4\u529b\u4e8e2023\u5e74\u5c06\u51767nm\u63a8\u5411\u5e02\u573a\uff0c\u4f46\u7531\u4e8e\u5176\u6d41\u661f\u6e56\u52a0\u5de5\u5668\u7684\u8ba1\u7b97\u74f7\u7816\u4f5c\u4e3a\u5176\u524d7nm\u4ea7\u54c1\uff0c\u6211\u4eec\u88ab\u544a\u77e5\u9a6c\u6eaa\u7845\u5c06\u57282022\u5e74\u51c6\u5907\u597d\uff0c\u8fd9\u5c06\u4f7f\u9a6c\u514b\u96f7\u514b\u662f\u7b2c\u4e00\u4e2a7nm\u4ea7\u54c1\u3002\u5bf9\u4e8e\u5b83\u7684\u4ef7\u503c\uff0c\u82f1\u7279\u5c14RISC-V\u89e3\u51b3\u65b9\u6848\u4e0d\u592a\u53ef\u80fd\u662f\u57fa\u4e8e\u74f7\u7816\u7684\uff0c\u4f46\u5b83\u53ef\u80fd\u5f88\u5bb9\u6613\u5c06\u5c0f\u578bRISC-V\u82af\u7247\u5f00\u53d1\u5e73\u53f0\u5e26\u5230\u5176\u5468\u56f4\u7684\u5e02\u573a\u3002\u82af\u7247\u53ef\u80fd\u5f88\u5c0f\uff0c\u56e0\u6b64\u53ef\u80fd\u8fd8\u652f\u6301\u5176\u6210\u672c\u3002\u4e00\u4e2a\u95ee\u9898\u786e\u5b9e\u4ecd\u7136\u662f\u82f1\u7279\u5c14\u5728\u8fd9\u91cc\u7684\u53c2\u4e0e\u7eaf\u7cb9\u5728\u786c\u4ef6\u4e2d\uff0c\u6216\u8005\u662f\u5426\u4f1a\u6709\u57fa\u4e8e\u82f1\u7279\u5c14\u7684\u8f6f\u4ef6\u5806\u6808\u4e0e\u5b83\u4e00\u8d77\u4f7f\u7528\u3002\n  \u5f20\u8d34\u8bc4\u8bba\u8003\u8651\u6bd4\u8f83\u70b9\u662fCortex-A75\uff0c\u8fd9\u4ecd\u7136\u5c06\u9876\u7aef\u7684RV\u5e94\u7528\u7a0b\u5e8f\u6838\u5fc3\u653e\u5728\u9876\u7aefARM\u8bb8\u53ef\u540e\u9762\u7684\u957f\u8def\u3002\u4f46\u4ed6\u4eec\u80af\u5b9a\u4f3c\u4e4e\u662f\u6709\u6240\u6539\u5584\u3002\u6b64\u5916\uff0cDoc Ian\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u662f\u5728\u6700\u540e\u4e00\u6bb5\u4e2d\uff0c\u4f60\u5c06\u9a6c\u6eaa\u79f0\u4e3a\u9a6c\u810a\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u4ea7\u54c1\uff08\u91cf\u5b50\u63a7\u5236\u7535\u8def\u3002\uff09\u6211\u8ba4\u4e3a\u8fd9\u53ea\u662f\u4e00\u4e2a\u62fc\u5199\uff0c\u81ea\u5b83\uff06\uff0339; s sorta\u5426\u5219\u3002\n  \u56de\u590d \n\uff06\uff0339; t\u5e2e\u52a9\u67d0\u4e9b\u4eba\u73b0\u5728\u4f1a\u8bf4\u82f1\u7279\u5c14\uff06\uff0339;\u672a\u6765\u7684\u672a\u6765\u786e\u5b9e\u662f\uff06\uff0334;\u514b\u91cc\u514b\uff08s\uff09\uff06\uff0334;\u56de\u590d\n  \u867d\u7136RV\uff06\uff0334;\u7ee9\u6548\u6838\u5fc3\uff06\uff0334;\u4f3c\u4e4e\u66f4\u63a5\u8fd1\u5c3a\u5bf8/\u533a\u57df/\u6676\u4f53\u7ba1\u8ba1\u6570\u7684\u81c2\uff06\uff0339;\u5c0f\u6838\u5fc3\u3002\u800c\u4e14\uff0c\u4e0e\u4ed6\u4eec\u4e0d\u540c\uff0c\u5b83\uff06\uff0339; s OOO\uff0c\u5373\u4f7f\u5728\u6700\u65b0\u7684\u8bbe\u8ba1\u4e2d\u4e5f\u62b5\u6297\u4e86\u5b9e\u65bd\u3002\u56de\u590d\n  \u201c\u8fc4\u4eca\u4e3a\u6b62\uff0c\u9a6c\u514b\u91cc\u514b\u6838\u5fc3\u7684\u65b0\u901f\u5ea6\u8868\u73b0P550\u6838\u5fc3\u662fSifive\u7684\u6700\u9ad8\u6027\u80fd\u5904\u7406\u5668\uff0c\u516c\u53f8\u62a5\u4ef7\u4e868.65\u4e2aPer GHz\u7684\u89c4\u8303\u3002\u201d\u5982\u4f55\u4e0e\u5176\u4ed6\u5e38\u89c1\u7684CPU\u8bbe\u8ba1\u8fdb\u884c\u6bd4\u8f83\uff1f\u6211\u8ba4\u4e3a\u5728\u6587\u7ae0\u4e2d\u62e5\u6709\u8be5\u4fe1\u606f\u5c06\u662f\u6709\u7528\u7684\u3002\u56de\u590d\n  Sifive\u8868\u793a\u6bd4\u8f83\u70b9\u662fCortex-A75\u3002\u8fd9\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u5668\u7684\u6807\u51c6\u6574\u4f53\u8fc5\u901f\uff0c\u4f46\u8fdc\u8fdc\u843d\u540e\u4e8e\u82f1\u7279\u5c14\uff0cAMD\u6216Apple\u7684\u5f53\u524dARM\u8bb8\u53efIP\u6216\u4e3b\u6d41\u6838\u5fc3\u3002\u56de\u590d\n  \u56db\u5e74\u548c\u4e00\u4e2a\u6708\u540e\u9762\u7684A75\u516c\u544a\uff0c\u786e\u5207\u3002 U84\u5728A72\u4e4b\u540e\u5ba3\u5e034.75\u5e74\u3002 U74\u5728A53\u540e6\u5e74\u5ba3\u5e03\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6bcf\u4ee3SiFive\u6838\u5fc3\u90fd\u6bd4\u524d\u4e00\u4e2a\u843d\u540e\u4e00\u5e74\u3002\u8bb0\u4f4fSifive\u6210\u7acb\u4e8eA72\u5ba3\u5e03\u540e\u3002\u56de\u590d\n  \u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u6b64\u6570\u636e\u53d1\u5e03\u56fe\u4e00\u6bb5\u65f6\u95f4\u3002 https\uff1a//www.anandtech.com/show/16226/apple-silicon ... https\uff1a//www.anandtech.com/show/16214/amd-zen-3-rryz ... a13\u5206\u657019.85 / ghz a14\u5206\u657021.1 / GHz R9 5950x\u5206\u657013.57 / GHz I9-10900K\u5206\u657011.08 / GHz P550\u53ef\u80fd\u662f\u5cf0\u503c\u5206\u6570/ GHz\uff0c\u800c\u6240\u6709\u8fd9\u4e9b\u70b9\u4f4d\u4e8e\u9ad8\u7aef\u4ea7\u54c1\u7684\u6700\u6781\u7aef/\u6700\u4e0d\u9ad8\u6548\u70b9\u3002\u6574\u4f53\u8868\u73b0\u4e5f\u5f88\u91cd\u8981\uff0c\u5f53\u60a8\u7684\u9891\u7387\u9891\u7387\uff0c\u56e0\u4e3a\u6838\u5fc3\u8d62\u5f97\u4e86\u6838\u5fc3\u9891\u7387\uff0c\u56e0\u4e3aSOC\u7684\u5176\u4ed6\u90e8\u5206\u7ebf\u6027\u9891\u7387\u7ebf\u6027\u9891\u7387\u5c06\u662f\u56fa\u5b9a\u7684\u3002\u56de\u590d\n  \u6211\u60f3\u77e5\u9053\u4e91\u4f9b\u5e94\u5546\u662f\u5426\u4f1a\u5bf9\u5145\u6ee1\u8fd9\u4e9b\u6838\u5fc3\u7684\u5de8\u578b\u5957\u9910\u611f\u5174\u8da3\uff1f\u5c0f\u578b\uff0c\u5b64\u7acb\u7684VMS Don\uff06\uff0339; t\u9700\u8981\u5927\u91cf\u7684\u6838\u5fc3\u96c6\u7fa4\u5230\u6838\u5fc3\u96c6\u7fa4\u901a\u4fe1\u3002\u6211\u7406\u89e3\u8fd9\u4e2a\u8bbe\u8ba1\u53ef\u80fd\u53ef\u4ee5\uff06\uff0339; t\u505a\u5230\u8fd9\u4e00\u70b9......\u5982\u679c\u6709\u5174\u8da3\uff0c\u6211\u60f3\u77e5\u9053Altera\u6216\u8005\u67d0\u4eba\u4f1a\u7528\u57fa\u4e8e\u8f83\u5c0f\u7684ARM\u6838\u5fc3\u7684\u8bbe\u8ba1\u51fa\u6765\u3002\u56de\u590d ", "note_en": "As part of SiFive\u2019s announcements today, along with enabling SiFive IP on Intel\u2019s Foundry Service offerings, Intel will be creating its own RISC-V development platform using its 7nm process technology. This platform, called Horse Creek, will feature several of SiFive\u2019s new Performance P550 cores also being announced today, and will be paired with Intel\u2019s DDR and PCIe IP technology.\n    On first reading into the press release, it isn\u2019t 100% clear that Intel\u2019s commentary discusses a platform with P550 as a host or as an add-in device: to quote Intel, \u2018 We are pleased to be a lead development partner with SiFive\u00a0to showcase to mutual customers the impressive performance\u00a0of their P550 on our\u00a07nm\u00a0Horse Creek platform\u2019. Intel historically typically  keeps its Creek family names, such as Boulder Creek, Cherry Creek, or Timber Creek, for socketed platforms - not for all-in-one embedded development platforms. Not only that, the wording makes it sound like we should consider a RISC-V core as an assistant core managing another part of a system.\n  However it would appear that Intel intends to make this a fully-featured development system, along similar lines to SiFive\u2019s own  HiFive Unmatched platform launched early this year. What makes this special is that Intel is committing to developing the SoC on its own 7nm process node, which provides a \u2018simpler\u2019 vehicle for Intel to test and ramp up its 7nm technology. This can be coupled with increasing interest in RISC-V development, and deploying a platform though Intel\u2019s supply chain and distribution might have a far reach to put these in the hands of upcoming developers.\n  The new SiFive Performance P550 core at the heart of Horse Creek is SiFive\u2019s highest performance processor to date, with the company quoting a SPEC2006int of 8.65 per GHz. It is a Linux-capable core, with full support for the RISC-V vector extension v1.0rc. It has a 13-stage triple-issue out-of-order microarchitecture with a private 32KB+32KB L1 cache and a private L2 cache (per core) The design supports four cores in a single cluster that can be paired up to 4 MB of shared L3.\n    The time scale for this platform coming to market is quite interesting. Despite Intel recently committed to bringing its 7nm to market in 2023 with  the compute tile for its Meteor Lake processor as its first 7nm product, we\u2019re being told that Horse Creek silicon will be ready in 2022, which would make Horse Creek its first 7nm product. For what it is worth, it\u2019s unlikely that the Intel RISC-V solution is tile-based, but it might be easy enough to bring a small RISC-V chip development platform to market around then. The chip is likely to be small, so that might work in favor of its costs as well. A question does remain as to whether Intel\u2019s involvement here is purely in the hardware, or whether there will be an Intel-based software stack to go along with it.\n  POST A COMMENT      Considering the comparison point is Cortex-A75, this still puts top-end RV apps cores a long way behind top-end ARM licensables. But they certainly seem to be improving. Also, Doc Ian, it looks like in the last paragraph you refer to Horse Creek as Horse Ridge, which is a very different product (quantum control circuit.) I assume this is just a typo, since it&#39;s sorta baffling otherwise.\n  Reply\n      Doesn&#39;t help that some will now say that Intel&#39;s future is indeed &#34;up the creek (s)&#34;.   Reply\n  Although the RV &#34;performance core&#34; appears to be much closer to ARM&#39;s LITTLE cores in size/area/transistor count. And, unlike them, it&#39;s OOO, something ARM has been resistant to implementing even in their newest designs.   Reply\n  \u201cThe new SiFive Performance P550 core at the heart of Horse Creek is SiFive\u2019s highest performance processor to date, with the company quoting a SPEC2006int of 8.65 per GHz.\u201d How does this compare against other common CPU designs? I think it would be useful to have that info in the article.   Reply\n  Sifive is saying the comparison point is the Cortex-A75. That makes it fairly fast by the standard of apps processors as a whole, but far behind current ARM licensable IP or mainstream cores from Intel, AMD, or Apple.  Reply\n  Four years and one month behind A75 announcement, to be precise.  The U84 was announced 4.75 years after the A72. The U74 was announced 6 years after the A53.  So far, each generation of SiFive cores is about one less year behind ARM than the previous one.  Remembering that SiFive was founded after the A72 was announced.  Reply\n  We&#39;ve been publishing graphs with this data for a while.   https://www.anandtech.com/show/16226/apple-silicon...  https://www.anandtech.com/show/16214/amd-zen-3-ryz...  A13 scores 19.85/GHz A14 scores 21.1/GHz R9 5950X scores 13.57/GHz i9-10900K scores 11.08/GHz  P550 is probably peak score/GHz, whereas all of these points are at the most extreme/least efficient point for the high-end products. The overall performance also matters when you factor in frequency, as cores won&#39;t scale linearly with core frequency as other parts of the SoC will be fixed.  Reply\n  I wonder if cloud vendors would be interested in a giant package stuffed full of these cores? Small, isolated VMs don&#39;t need tons of core-cluster to core-cluster communication.  I understand this design probably can&#39;t do that... and if there was interest, I suppose Altera or someone would&#39;ve come out with a design based on smaller ARM cores.  Reply", "posttime": "2021-06-26 08:01:03", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u82f1\u7279\u5c14,\u5f00\u53d1,intel", "title": "\u82f1\u7279\u5c14\u8bb8\u53ef\u8bc1Sifive\u4e3a\u82f1\u7279\u5c14\u94f8\u9020\u670d\u52a1\u76847nm\u4ea7\u54c1\u63d0\u4f9b\u4e86IP\uff0c\u5e76\u8868\u793a\u5b83\u5c06\u521b\u5efa\u81ea\u5df1\u7684RISC-V\u5f00\u53d1\u5e73\u53f0\uff0c\u79f0\u4e3a\u9a6c\u514b\u91cc\u514b ", "title_en": "Intel licenses SiFive's IP for Intel Foundry Services' 7nm offerings and says it will create its own RISC-V development platform called Horse Creek", "transed": 1, "url": "https://www.anandtech.com/show/16780/intel-to-create-riscv-development-platform-with-sifive-p550-cores-on-7nm-in-2022", "via": "", "real_tags": ["\u82f1\u7279\u5c14", "\u5f00\u53d1", "intel"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068356, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "o\uff06amp; o shutup10\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u60a8\u5e0c\u671b\u4f7f\u7528\u7684Windows 10\u4e0b\u7684\u8212\u9002\u529f\u80fd\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u51b3\u5b9a\u5c06\u6570\u636e\u4f20\u9012\u5230\u8fc7\u8fdc\u3002\u4f7f\u7528\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u754c\u9762\uff0c\u60a8\u51b3\u5b9a\u5982\u4f55\u901a\u8fc7\u51b3\u5b9a\u5e94\u8be5\u505c\u7528\u54ea\u4e9b\u4e0d\u9700\u8981\u7684\u51fd\u6570\u6765\u5c0a\u91cd\u60a8\u7684\u9690\u79c1\u3002\n o\uff06amp; o shutup10\u5b8c\u5168\u514d\u8d39\uff0c\u4e0d\u5fc5\u5b89\u88c5 - \u5b83\u53ef\u4ee5\u76f4\u63a5\u548c\u7acb\u5373\u5728\u60a8\u7684\u7535\u8111\u4e0a\u8fd0\u884c\u3002\u5b83\u4e0d\u4f1a\u5b89\u88c5\u6216\u4e0b\u8f7d\u56de\u987e\u6027\u4e0d\u9700\u8981\u7684\u6216\u4e0d\u5fc5\u8981\u7684\u8f6f\u4ef6\uff0c\u5982\u6709\u8bb8\u591a\u5176\u4ed6\u7a0b\u5e8f\u90fd\u8fd9\u6837\u505a\u4e86\uff01\n     Windows 10\u5e0c\u671b\u4e3a\u7528\u6237\u63d0\u4f9b\u6700\u7b80\u5355\u7684\u65e5\u5e38\u4f53\u9a8c\uff0c\u5e76\u4e14\u5728\u6b64\u65b9\u9762\u975e\u5e38\u8feb\u4f7f\u60a8\u5b9e\u9645\u9605\u8bfb\u5e76\u786e\u8ba4\u5b89\u5168\u901a\u77e5\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6765\u81ea\u5fae\u8f6f\u7684\u7b80\u5316\u65b9\u6cd5\u610f\u5473\u7740\u66f4\u591a\u7684\u6570\u636e\u88ab\u4f20\u9012\u7ed9\u5b83\u4eec\u800c\u4e0d\u662f\u8bb8\u591a\u7528\u6237\u60f3\u8981\u7684\u3002\n Microsoft\u4f7f\u7528\u5927\u591a\u6570\u6570\u636e\u5411\u60a8\u5c55\u793a\u4e2a\u6027\u5316\u4fe1\u606f\uff0c\u8be5\u4fe1\u606f\u65e8\u5728\u4f7f\u8ba1\u7b97\u673a\u751f\u6d3b\u66f4\u8f7b\u677e\u3002\u4f8b\u5982\uff0cWindows 10\u53ef\u4ee5\u63d0\u9192\u60a8\uff0c\u7531\u4e8e\u6d41\u91cf\u5728\u7ebf\uff0c\u6211\u4eec\u5c06\u572830\u5206\u949f\u5185\u5411\u673a\u573a\u8bbe\u7f6e\u5230\u673a\u573a\u3002\u7136\u800c\uff0c\u4e3a\u4e86\u5411\u60a8\u63d0\u4f9b\u6b64\u4fe1\u606f\uff0cWindows 10\u5fc5\u987b\u8bbf\u95ee\u60a8\u7684\u65e5\u5386\u6761\u76ee\uff0c\u60a8\u7684\u90ae\u4ef6\uff08\u5373\u822a\u7a7a\u516c\u53f8\u786e\u8ba4\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u60a8\u7684\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5fc5\u987b\u8bbf\u95ee\u4e92\u8054\u7f51\u4ee5\u83b7\u53d6\u4ea4\u901a\u65b0\u95fb\u3002\n    \u4e00\u4e9b\u670d\u52a1\u534f\u8bae\u6574\u4e2a\u952e\u76d8\u6761\u76ee\uff0c\u4f7f\u7528Facebook\u8054\u7cfb\u4eba\u5206\u4eab\u60a8\u7684WLAN\u8bbf\u95ee\u6570\u636e\u6216\u8fde\u63a5\u60a8\u7684\u8ba1\u7b97\u673a\u800c\u4e0d\u8981\u6c42\u516c\u5171\u548c\u53ef\u80fd\u65e0\u4fdd\u62a4 - \u7f51\u7edc\u7684\u6743\u9650\u3002\u867d\u7136\u8fd9\u610f\u5473\u7740\u60a8\u548c\u60a8\u7684\u8054\u7cfb\u4eba\u4e0d\u5fc5\u4f7f\u7528\u590d\u6742\u7684WLAN\u5bc6\u7801\u6765\u62cd\u6444\uff0c\u4f46\u5b83\u4e5f\u63d0\u51fa\u4e86\u663e\u7740\u7684\u5b89\u5168\u98ce\u9669\u3002\n \u4e3a\u81ea\u5df1\u51b3\u5b9a\u4f60\u7684\u201c\u8212\u9002\u201d\u662f\u6709\u591a\u91cd\u8981\u7684\uff0c\u5f53\u4f60\u7684\u9690\u79c1\u6743\u4ee5\u53ca\u5982\u4f55\u4fdd\u62a4\u5b83\u65f6\u3002 O\uff06amp; o shutup10\u5411\u60a8\u5c55\u793a\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u4e2d\u7684\u6240\u6709\u91cd\u8981\u8bbe\u7f6e - \u60a8\u4e0d\u9700\u8981\u4ee5\u524d\u7684IT\u77e5\u8bc6\uff0c\u5e76\u4e14\u65e0\u9700\u624b\u52a8\u66f4\u6539Windows 10\u7cfb\u7edf\u8bbe\u7f6e\u3002\n o\uff06amp; o shutup10\u5b8c\u5168\u514d\u8d39\uff0c\u4e0d\u5fc5\u5b89\u88c5 - \u5b83\u53ef\u4ee5\u76f4\u63a5\u548c\u7acb\u5373\u5728\u60a8\u7684\u7535\u8111\u4e0a\u8fd0\u884c\u3002\u5b83\u4e0d\u4f1a\u5b89\u88c5\u6216\u4e0b\u8f7d\u56de\u987e\u6027\u4e0d\u9700\u8981\u7684\u6216\u4e0d\u5fc5\u8981\u7684\u8f6f\u4ef6\uff0c\u5982\u6709\u8bb8\u591a\u5176\u4ed6\u7a0b\u5e8f\u90fd\u8fd9\u6837\u505a\u4e86\uff01 \n\u8bb8\u591a\u7528\u6237\u95ee\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u652f\u6301\u6211\u4eec\u3002 \u6211\u4eec\u8ba4\u4e3a\u8fd9\u662f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\uff01  \u6211\u4eec\u4e00\u518d\u8be2\u95ee\u662f\u5426\u53ef\u4ee5\u6216\u5e94\u8be5\u652f\u4ed8\u8be5\u8ba1\u5212\u3002 o\uff06amp; o shutup10\u662f\u514d\u8d39\u8f6f\u4ef6\uff0c\u4f46\u6211\u4eec\u5f53\u7136\u53d7\u5230\u4e86\u95ee\u9898\u6240\u8ba8\u538c\u7684\u3002 \u5982\u679c\u60a8\u613f\u610f\uff0c\u6b22\u8fce\u60a8\u4e3a\u6211\u4eec\u7684\u529e\u516c\u5ba4\u72d7\uff0c\u5f17\u91cc\u8fbe\u4e70\u4e00\u5757\u9aa8\u5934\u3002 \u5979\u5411\u529e\u516c\u5ba4\u5e26\u6765\u4e86\u5feb\u4e50\uff0c\u8fd9\u80af\u5b9a\u4f1a\u7ed9\u5979\u5e26\u6765\u5feb\u4e50\uff01 ", "note_en": "O&amp;O ShutUp10 means you have full control over which comfort functions under Windows 10 you wish to use, and you decide when the passing on of your data goes too far. Using a very simple interface, you decide how Windows 10 should respect your privacy by deciding which unwanted functions should be deactivated.\n O&amp;O ShutUp10 is entirely free and does not have to be installed \u2013 it can be simply run directly and immediately on your PC. And it will not install or download retrospectively unwanted or unnecessary software, like so many other programs do these days!\n     Windows 10 wants to give users the easiest possible daily experience and in doing so very rarely forces you to actually read and confirm a security notice. Unfortunately, this simplified approach from Microsoft means much more data is passed onto them than many users would like.\n Microsoft uses most data to display personalized information to you that is aimed at making your computer life easier. As an example, Windows 10 can remind you to set off to the airport 30 minutes earlier due to traffic en route. In order to deliver this information to you, however, Windows 10 has to access your calendar entries, your mails (i.e. the airline confirmation email), your location and it has to have access to the internet to get traffic news.\n    Some services protocol your entire keyboard entries, share your WLAN access data with your facebook contacts or connect your computer without asking permission to a public \u2013 and potentially unprotected \u2013 network. While this means that you and your contacts do not have to grapple with complicated WLAN passwords, it also poses a significant security risk.\n Decide for yourself how important your \u201ccomfort\u201d is when weighed up with your privacy and how to protect it. O&amp;O ShutUp10 presents you with all important settings in one location \u2013 you need no previous IT knowledge and there is no need to manually change the Windows 10 system settings.\n O&amp;O ShutUp10 is entirely free and does not have to be installed \u2013 it can be simply run directly and immediately on your PC. And it will not install or download retrospectively unwanted or unnecessary software, like so many other programs do these days!\n  Many users have asked us if they can support us. We think that\u2019s incredible!\n We are repeatedly asked whether one can, or should, pay for the program. O&amp;O ShutUp10 is freeware, but we are of course flattered by the question. If you wish, you are welcome to buy a bone for our office dog, Frida. She brings joy to the office, and that would certainly bring joy to her!", "posttime": "2021-06-26 08:00:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "windows,\u514d\u8d39,windows-10,\u9632\u866b,antispy", "title": "Windows 10\u7684\u514d\u8d39\u9632\u866b\u5de5\u5177 ", "title_en": "Free antispy tool for Windows 10", "transed": 1, "url": "https://www.oo-software.com/en/shutup10", "via": "", "real_tags": ["windows", "\u514d\u8d39", "\u9632\u866b", "antispy"]}]