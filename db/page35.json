[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1071314, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u4eba\u53e3\u666e\u67e5\u5bb6\u5ead\u8109\u640f\u8c03\u67e5\u548c\u5176\u4ed6\u7c7b\u4f3c\u6765\u6e90\u7684\u6570\u636e\uff0c\u9ed1\u4eba\u75ab\u82d7\u63a5\u79cd\u7387\u843d\u540e\u4e8e\u8be5\u56fd\u5176\u4ed6\u5730\u533a\u3002\u8bdd\u8bed\u4e2d\u5bf9\u6b64\u7684\u4e00\u4e2a\u5e38\u89c1\u89e3\u91ca\u662f\uff0c\u9ed1\u4eba\u5bf9\u75ab\u82d7\u6301\u6000\u7591\u6001\u5ea6\uff0c\u56e0\u4e3a\u4ed6\u4eec\u66fe\u88ab\u7f8e\u56fd\u653f\u5e9c\u548c\u533b\u7597\u4fdd\u5065\u5f53\u5c40\u6ee5\u7528\u548c\u8bd5\u9a8c\u8fc7\u3002\u8fd9\u4e2a\u89e3\u91ca\u4e2d\u63d0\u51fa\u7684\u4e3b\u8981\u4e8b\u4ef6\u662f\u5854\u65af\u57fa\u5409\u5b9e\u9a8c\u3002\u5728\u90a3\u4e2a\u5b9e\u9a8c\u4e2d\uff0c\u60a3\u6709\u6885\u6bd2\u7684\u9ed1\u4eba\u88ab\u544a\u77e5\u4ed6\u4eec\u6b63\u5728\u63a5\u53d7\u6cbb\u7597\u8fd9\u79cd\u75be\u75c5\u7684\u836f\u7269\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ed6\u4eec\u670d\u7528\u4e86\u5b89\u6170\u5242\uff0c\u800c\u7814\u7a76\u4eba\u5458\u5219\u7814\u7a76\u4e86\u672a\u7ecf\u6cbb\u7597\u7684\u6885\u6bd2\u7684\u5f71\u54cd\u3002\u8fd9\u4e2a\u7406\u8bba\u68c0\u67e5\u4e86\u67d0\u4e9b\u4f7f\u5176\u5728\u5f53\u524d\u8bdd\u8bed\u6846\u67b6\u5185\u4ea7\u751f\u5171\u9e23\u7684\u76d2\u5b50\uff0c\u4f46\u5b83\u5e76\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u5982\u679c\u51a0\u72b6\u75c5\u6bd2\u75ab\u82d7\u53ea\u63d0\u4f9b\u7ed9\u9ed1\u4eba\uff0c\u90a3\u4e48\u60a8\u4f1a\u53d1\u73b0\u6709\u4eba\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u4f0e\u4fe9\u3002\u4f46\u5b83\u4eec\u88ab\u7ed9\u4e88\u6bcf\u4e2a\u4eba\uff0c\u5305\u62ec\u8d85\u8fc7 1 \u4ebf\u7684\u767d\u4eba\u3002\u6211\u4eec\u662f\u4e0d\u662f\u8981\u8ba4\u4e3a\u6ca1\u6709\u63a5\u79cd\u75ab\u82d7\u7684\u9ed1\u4eba\u8ba4\u4e3a\u653f\u5e9c\u6b63\u5728\u6bd2\u5bb3 1 \u4ebf\u767d\u4eba\uff0c\u56e0\u4e3a\u653f\u5e9c\u6709\u6bd2\u5bb3\u9ed1\u4eba\u7684\u79cd\u65cf\u4e3b\u4e49\u5386\u53f2\uff1f\u8fd9\u91cc\u7684\u79cd\u65cf\u5206\u6790\u4f1a\u544a\u8bc9\u4f60\uff0c\u767d\u4eba\u81f3\u4e0a\u4e3b\u4e49\u653f\u5e9c\u4e0d\u53ef\u80fd\u505a\u8fd9\u79cd\u4e8b\uff0c\u6240\u4ee5\u75ab\u82d7\u4e00\u5b9a\u662f\u5b89\u5168\u7684\uff01\u6216\u8bb8\u6bd4\u8fd9\u79cd\u62bd\u8c61\u63a8\u7406\u66f4\u5f15\u4eba\u6ce8\u76ee\u7684\u662f\u9ed1\u4eba\u75ab\u82d7\u63a5\u79cd\u7387\u6309\u6559\u80b2\u6c34\u5e73\u7684\u7ec6\u5206\u3002\u4e0e\u4e00\u822c\u4eba\u53e3\u548c\u5176\u4ed6\u6240\u6709\u79cd\u65cf\u7fa4\u4f53\u4e00\u6837\uff0c\u9ed1\u4eba\u75ab\u82d7\u63a5\u79cd\u7387\u4e0e\u53d7\u6559\u80b2\u7a0b\u5ea6\u540c\u6b65\u6500\u5347\u3002\u6559\u80b2\u7a0b\u5ea6\u5f53\u7136\u4e5f\u662f\u6536\u5165\u3001\u8d22\u5bcc\u548c\u5176\u4ed6\u793e\u4f1a\u7ecf\u6d4e\u6307\u6807\u7684\u5e73\u5747\u6307\u6807\u3002\u6211\u731c\u60f3\uff0c\u4e0e\u53d7\u6559\u80b2\u7a0b\u5ea6\u8f83\u4f4e\u7684\u4eba\u76f8\u6bd4\uff0c\u53d7\u8fc7\u9ad8\u7b49\u6559\u80b2\u7684\u4eba\u5bf9\u5854\u65af\u57fa\u5409\u5b9e\u9a8c\u548c\u9ed1\u4eba\u5386\u53f2\u7684\u8ba4\u8bc6\u66f4\u666e\u904d\u3002\u5982\u679c\u8fd9\u4e2a\u731c\u6d4b\u662f\u6b63\u786e\u7684\uff0c\u90a3\u4e48\u5386\u53f2\u79cd\u65cf\u4e3b\u4e49\u533b\u7597\u8650\u5f85\u7684\u77e5\u8bc6\u5b9e\u9645\u4e0a\u4e0e\u63a5\u79cd\u75ab\u82d7\u5bc6\u5207\u76f8\u5173\u3002\u6211\u63d0\u51fa\u8fd9\u4e2a\u95ee\u9898\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u56e0\u4e3a\u5728\u6211\u770b\u6765\uff0c\u8fd9\u4e2a\u5173\u4e8e\u9ed1\u4eba\u75ab\u82d7\u72b9\u8c6b\u4e0d\u51b3\u7684\u6545\u4e8b\u5728\u8bd5\u56fe\u8ba9\u9ed1\u4eba\u548c\u4eba\u7fa4\u66f4\u666e\u904d\u5730\u63a5\u79cd\u75ab\u82d7\u65f6\u5b9e\u9645\u4e0a\u662f\u975e\u5e38\u65e0\u76ca\u7684\u3002\u5bf9\u4e8e\u8bdd\u8bed\u4e2d\u666e\u904d\u5b58\u5728\u7684\u67d0\u79cd\u5fc3\u6001\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u5b89\u6170\uff0c\u4f46\u5b83\u5b8c\u5168\u8131\u79bb\u4e86\u73b0\u5b9e\u548c\u5173\u4e8e\u66f4\u91cd\u8981\u7684\u793e\u4f1a\u7ecf\u6d4e\u56e0\u7d20\u7684\u8bba\u6587\u3002", "note_en": "Black vaccination rates lag the rest of the country, according to data from the  Census Household Pulse Survey and other similar sources.\n  One common explanation for this in the discourse is that black people are skeptical of the vaccine because of prior historical events in which they were abused and experimented upon by the US government and healthcare authorities. The main incident brought up in this explanation is the Tuskegee Experiment. In that experiment, black people with syphilis were told they were receiving drugs to treat the disease but they were actually given placebos while the researchers studied the effects of untreated syphilis.\n This theory checks off certain boxes that make it resonate well within current discourse frameworks, but it doesn\u2019t really make a lot of sense. If the coronavirus vaccines were  only being given to black people, then you could see how someone might reason that it is a trick. But they are being given to everyone, including over 100 million white people. Are we meant to think that black people who aren\u2019t getting the vaccine believe that the government is poisoning 100 million white people because the government has a racist history of poisoning black people? The racial analysis here would tell you that there is no way the white supremacist government would do such a thing and so the vaccine must be safe!\n Perhaps more compelling than this abstract reasoning is the breakdown of the black vaccination rate by education level.\n  As with the population in general and every other racial group, black vaccination rates climb in lockstep with educational attainment. Educational attainment of course is also a decent proxy, on average, for income, wealth, and other socioeconomic indicators.\n I would guess that awareness of the Tuskegee Experiment and black history more generally is greater among those with higher education than those with lower education. If this guess is right, then knowledge of historical racist medical abuses is actually strongly correlated with getting the vaccine.\n One of the reasons I am bringing this up because it seems to me that this just-so story about black vaccine hesitancy is actually very unhelpful when it comes to trying to getting black people and the population more generally vaccinated. It\u2019s soothing to a certain mindset that is prevalent in the discourse, but it\u2019s totally detached from reality and papers over the much more significant socioeconomic factors.", "posttime": "2021-08-05 20:47:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b9e\u9a8c,experiment,\u9ed1\u4eba", "title": "\u5854\u65af\u57fa\u5409\u5b9e\u9a8c\u80fd\u89e3\u91ca\u9ed1\u4eba\u75ab\u82d7\u63a5\u79cd\u7387\u5417\uff1f", "title_en": "Does the Tuskegee experiment explain black vaccination rates?", "transed": 1, "url": "https://mattbruenig.com/2021/08/04/does-the-tuskegee-experiment-really-explain-black-vaccination-rates/", "via": "", "real_tags": ["\u5b9e\u9a8c", "\u9ed1\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071313, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7528\u6237\u80fd\u591f\u8fd0\u884c\u3001\u4fee\u6539\u3001\u5206\u53d1\u548c\u5206\u53d1\u4ed6\u4eec\u4f7f\u7528\u7684\u8f6f\u4ef6\u7684\u4fee\u6539\u7248\u672c\u5bf9\u7528\u6237\u6765\u8bf4\u662f\u4ef6\u597d\u4e8b\u3002\u4ece\u7ecf\u9a8c\u4e0a\u8bb2\uff0c\u8fc7\u53bb 30 \u5e74\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5f00\u6e90\u4f7f\u8f6f\u4ef6\u53d8\u5f97\u66f4\u597d\u3001\u66f4\u4fbf\u5b9c\u3002\u5f53\u8f6f\u4ef6\u5728\u4e00\u53f0\u672c\u5730\u673a\u5668\u4e0a\u8fd0\u884c\u65f6\uff0c\u5982\u679c\u8f6f\u4ef6\u662f\u5f00\u6e90\u7684\uff0c\u7528\u6237\u5f88\u5bb9\u6613\u8fd0\u884c\u8f6f\u4ef6\u7684\u4fee\u6539\u7248\u672c\uff0c\u5e76\u5c06\u8fd9\u4e9b\u4fee\u6539\u7248\u672c\u5206\u53d1\u7ed9\u5176\u4ed6\u4eba\u8fdb\u884c\u534f\u4f5c\u3002\u8fd9\u79cd\u534f\u4f5c\u521b\u5efa\u4e86\u4e00\u4e2a\u53cd\u9988\u5faa\u73af\uff0c\u4f7f\u8f6f\u4ef6\u751a\u81f3\u66f4\u597d\u3002\u4f46\u662f\u5f53\u8f6f\u4ef6\u88ab\u7528\u4f5c\u670d\u52a1\u65f6\uff0c\u5373\u4f7f\u8f6f\u4ef6\u662f\u5f00\u6e90\u7684\uff0c\u7528\u6237\u8fd0\u884c\u548c\u5206\u53d1\u8f6f\u4ef6\u7684\u4fee\u6539\u7248\u672c\u4e5f\u66f4\u52a0\u56f0\u96be\u3002\u8be5\u670d\u52a1\u4f5c\u4e3a\u66f4\u5e7f\u6cdb\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u5728\u4e0d\u53d7\u63a7\u5236\u7684\u8282\u70b9\u4e0a\u8fd0\u884c\u3002\u7528\u6237\u3002\u4e3a\u4e86\u8ba9\u7528\u6237\u8fd0\u884c\u81ea\u5df1\u7684\u526f\u672c\uff0c\u7528\u6237\u5fc5\u987b\u8fd0\u884c\u81ea\u5df1\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u7531\u670d\u52a1\u3001\u5176\u4ed6\u652f\u6301\u670d\u52a1\u548c\u8be5\u670d\u52a1\u7684\u5ba2\u6237\u7aef\u7ec4\u6210\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5206\u5e03\u5728\u591a\u4e2a\u8282\u70b9\u4e0a\u3002\u4f17\u6240\u5468\u77e5\uff0c\u8fd0\u884c\u5206\u5e03\u5f0f\u7cfb\u7edf\u6bd4\u8fd0\u884c\u672c\u5730\u8f6f\u4ef6\u66f4\u96be\uff0c\u4f46\u4e3a\u4ec0\u4e48\u5462\uff1f\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u8fd9\u662f\u4e00\u4e2a\u6280\u672f\u95ee\u9898\u3002\u6211\u4eec\u975e\u5e38\u4e86\u89e3\u5982\u4f55\u5728\u5355\u53f0\u673a\u5668\u4e0a\u7f16\u5199\u548c\u8fd0\u884c\u5355\u4e2a\u8fdb\u7a0b\uff0c\u5373\u4f7f\u662f\u65b0\u624b\u7528\u6237\u4e5f\u53ef\u4ee5\u5728\u57fa\u672c\u7ea7\u522b\u4e0a\u7ba1\u7406\u8fd9\u6837\u7684\u673a\u5668\u3002\u4f46\u6211\u4eec\u5bf9\u8fd9\u65b9\u9762\u7684\u4e86\u89e3\u76f8\u5bf9\u8f83\u5c11\u5982\u4f55\u5bf9\u5206\u5e03\u5728\u591a\u4e2a\u8282\u70b9\u4e0a\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u56e0\u6b64\u5373\u4f7f\u4f7f\u7528\u6211\u4eec\u5f00\u53d1\u7684\u6240\u6709\u5de5\u5177\uff0c\u8fd9\u4e5f\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\u3002\u7136\u800c\uff0c\u5728\u5176\u4ed6\u65b9\u9762\uff0c\u8fd9\u662f\u4e00\u4e2a\u793e\u4f1a\u95ee\u9898\u3002\u4e00\u4e2a\u7528\u6237\uff08\u53ef\u80fd\u662f\u4e00\u4e2a\u4eba\u6216\u6574\u4e2a\u7ec4\u7ec7\uff0c\u4f8b\u5982 Facebook\u3001\u4e9a\u9a6c\u900a\u3001Netflix\u3001\u8c37\u6b4c\u7b49\uff09\u5f00\u53d1\u7684\u811a\u672c\u3001\u8f6f\u4ef6\u548c\u6280\u672f\u6765\u8fd0\u884c\u7279\u5b9a\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u901a\u5e38\u4e0d\u4e0e\u5176\u4ed6\u7528\u6237\u5171\u4eab\u3002\u800c\u4e14\uff0c\u81f3\u5173\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u4e9b\u811a\u672c\u548c\u6280\u672f\u5bf9\u670d\u52a1\u7684\u6700\u7ec8\u7528\u6237\u4e0d\u53ef\u7528\u3002\u5982\u679c\u6700\u7ec8\u7528\u6237\u5e0c\u671b\u81ea\u5df1\u8fd0\u884c\u670d\u52a1\uff0c\u4ed6\u4eec\u4ece\u65e0\u5230\u6709\uff1b\u4ed6\u4eec\u5fc5\u987b\u91cd\u65b0\u521b\u5efa\u4ece\u96f6\u5f00\u59cb\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002\u5982\u679c\u660e\u5929\u7acb\u5373\u53ef\u7528\uff0c\u8fd9\u4e9b\u811a\u672c\u53ef\u80fd\u4e0d\u4f1a\u5f88\u6709\u7528\u3002 \u8fd9\u53c8\u56de\u5230\u4e86\u6280\u672f\u95ee\u9898\uff1a\u6211\u4eec\u5bf9\u5982\u4f55\u5728\u7406\u8bba\u5c42\u9762\u4e0a\u8fd0\u884c\u5206\u5e03\u5f0f\u7cfb\u7edf\u6ca1\u6709\u5f88\u597d\u7684\u7406\u89e3\uff0c\u6240\u4ee5\u6211\u4eec\u7f16\u5199\u7684\u811a\u672c\u662f\u7528\u6765\u505a\u7684\u5b83\u662f\u9ad8\u5ea6\u4e13\u4e1a\u5316\u548c\u5b9a\u5236\u7684\u3002\u7136\u800c\uff0c\u60f3\u8c61\u4e00\u4e2a\u4e16\u754c\uff0c\u6240\u6709\u7528\u6237\uff0c\u5305\u62ec\u6700\u5927\u7684\u7ec4\u7ec7\uff0c\u90fd\u53d1\u5e03\u4e86\u4ed6\u4eec\u7528\u6765\u8fd0\u884c\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u811a\u672c\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6700\u6709\u7528\u3001\u6700\u4fbf\u643a\u548c\u6700\u7075\u6d3b\u7684\u811a\u672c\u5c06\u88ab\u5176\u4ed6\u4eba\u91c7\u7528\uff0c\u5e76\u4e14\u5b83\u4eec\u5c06\u88ab\u6269\u5c55\u4e3a\u751a\u81f3\u66f4\u6709\u7528\u3002\u8fd9\u4e0e\u6211\u4eec\u5728\u6240\u6709\u5f00\u6e90\u4e2d\u770b\u5230\u7684\u52a8\u6001\u76f8\u540c\u3002\u8003\u8651\u672c\u5730\u8f6f\u4ef6\u4e2d\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1aLinux\u3002Linux\u5728\u7406\u8bba\u4e0a\u5e76\u4e0d\u662f\u201c\u7cbe\u5fc3\u8bbe\u8ba1\u201d\u7684\u3002\u4f46\u662f\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u5b83\u8d28\u91cf\u9ad8\uff0c\u76f8\u5bf9\u6613\u4e8e\u4f7f\u7528\uff0c\u5e76\u4e14\u88ab\u5e7f\u6cdb\u7528\u4e8e\u8bb8\u591a\u4e0d\u540c\u7684\u76ee\u7684\u3002\u5b83\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u72b6\u6001\uff0c\u56e0\u4e3a\u5b83\u662f\u5f00\u6e90\u7684\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4e3a\u5171\u4eab\u7684 Linux \u4ee3\u7801\u5e93\u505a\u51fa\u4e86\u8d21\u732e\uff1b\u5982\u679c\u4ed6\u4eec\u60f3\u4f7f\u7528 Linux \u53d1\u5e03\u4ea7\u54c1\uff0c\u4ed6\u4eec\u5fc5\u987b\u8fd9\u6837\u505a\u3002\u4eca\u5929\uff0c\u5b58\u5728\u4e8e Linux \u7684\u53cd\u9988\u5faa\u73af\u5e76\u4e0d\u5b58\u5728\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002\u5b9e\u9645\u4e0a\u7528\u4e8e\u7531\u6700\u5927\u7ec4\u7ec7\u7ef4\u62a4\u7684\u6700\u5927\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u8f6f\u4ef6\u4e0d\u53ef\u7528\uff0c\u5373\u4f7f\u5176\u4e2d\u7684\u4e2a\u522b\u670d\u52a1\u662f\u5f00\u6e90\u7684\u3002\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u4e00\u4e9b\u5355\u72ec\u7ec4\u4ef6\u7684\u6e90\u4ee3\u7801\uff0c\u4f46\u4ed6\u4eec\u65e0\u6cd5\u8bbf\u95ee\u66f4\u5e7f\u6cdb\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u6ca1\u6709\u5f00\u6e90\u7684\u6539\u8fdb\u53cd\u9988\u5faa\u73af\uff0c\u4f7f\u8be5\u7cfb\u7edf\u5177\u6709\u9ad8\u8d28\u91cf\u548c\u53ef\u91cd\u7528\u6027\u3002\u5bf9\u4e8e\u672c\u5730\u8f6f\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 copyleft \u6765\u4fdd\u7559\u8fd0\u884c\u6574\u4e2a\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u7684\u81ea\u7531\u3002\u6574\u4e2a\u7ec4\u5408\u5de5\u4f5c\u3002\u8fd9\u786e\u4fdd\u4e86\u67d0\u4e9b\u8f6f\u4ef6\u7684\u7528\u6237\u59cb\u7ec8\u6709\u80fd\u529b\u5bf9\u5176\u8fdb\u884c\u6539\u8fdb\uff0c\u4ece\u800c\u7ef4\u6301\u5bf9 Linux \u5982\u6b64\u6709\u6548\u7684\u53cd\u9988\u5faa\u73af\u3002\u6211\u4eec\u53ef\u4ee5\u4e3a\u5206\u5e03\u5f0f\u7cfb\u7edf\u7f16\u5199\u65b0\u7684\u3001\u7c7b\u4f3c\u7684 Copyleft \u5f00\u6e90\u8bb8\u53ef\u8bc1\u3002\u5f53\u5206\u5e03\u5f0f\u7cfb\u7edf\u4f7f\u7528\u6839\u636e\u65b0\u8bb8\u53ef\u8bc1\u6388\u6743\u7684\u670d\u52a1\u65f6\uff0c\u8be5\u7cfb\u7edf\u5c06\u9700\u8981\u4e3a\u5176\u7528\u6237\u63d0\u4f9b\u6574\u4e2a\u7ec4\u5408\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u6240\u6709\u5f00\u6e90\u81ea\u7531\u3002\u7528\u6237\u5c06\u6709\u80fd\u529b\u8fd0\u884c\u548c\u4fee\u6539\u4ed6\u4eec\u81ea\u5df1\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u526f\u672c\uff0c\u5e76\u4f7f\u5176\u53d8\u5f97\u66f4\u597d\uff0c\u5c31\u50cf\u4f7f\u7528 Linux \u4e00\u6837\u3002\u6709\u4e9b\u4eba\u62c5\u5fc3\u8fd9\u6837\u7684\u8bb8\u53ef\u8bc1\u4e0d\u5141\u8bb8\u5728\u4e13\u6709\u4e91\u6258\u7ba1\u4e4b\u4e0a\u6258\u7ba1\u670d\u52a1\uff1b\u6700\u7ec8\u7528\u6237\u5c06\u65e0\u6cd5\u4f7f\u7528\u4e13\u6709\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684 API \u6765\u8fd0\u884c\u670d\u52a1\u3002\u8fd9\u662f GPL \u5904\u7406\u7684\u95ee\u9898\u4e5f\u662f\u3002GPL \u5305\u542b\u201c\u7cfb\u7edf\u94fe\u63a5\u8c41\u514d\u201d\uff0c\u5141\u8bb8\u4f7f\u7528\u4e13\u6709\u201c\u7cfb\u7edf\u5e93\u201d\uff0c\u4e13\u6709\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff1b\u8fd9\u5728\u4e13\u6709\u64cd\u4f5c\u7cfb\u7edf\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u65f6\u5019\u5f88\u91cd\u8981\u3002\u6211\u4eec\u65b0\u7684\u5206\u5e03\u5f0f\u8bb8\u53ef\u8bc1\u53ef\u4ee5\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684\u7cfb\u7edf\u94fe\u63a5\u8c41\u514d\u4ee5\u5141\u8bb8\u4e0e\u4e13\u6709\u4e91\u6258\u7ba1\u4e00\u8d77\u4f7f\u7528\u3002 SSPL \u7684\u652f\u6301\u8005\u58f0\u79f0\u8fd9\u662f\u4e3a\u5206\u5e03\u5f0f\u7cfb\u7edf\u7f16\u5199\u8fd9\u6837\u4e00\u4e2a Copyleft \u5f00\u6e90\u8bb8\u53ef\u8bc1\u7684\u5c1d\u8bd5\u3002\u6279\u8bc4\u8005\u58f0\u79f0\u5b83\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u4e1c\u897f\u3002\u6211\u771f\u7684\u4e0d\u5728\u4e4e\uff1b\u6211\u53ea\u60f3\u8981\u4e00\u4e2a\u9700\u8981\u7684\u5f00\u6e90\u8bb8\u53ef\u8bc1\uff0c\u5f53\u8bb8\u53ef\u8f6f\u4ef6\u65f6\u7528\u4e8e\u63d0\u4f9b\u4f5c\u4e3a\u66f4\u5927\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e00\u90e8\u5206\u7684\u670d\u52a1\uff0c\u5fc5\u987b\u4e3a\u8be5\u670d\u52a1\u7684\u7528\u6237\u63d0\u4f9b\u8fd0\u884c\u548c\u4fee\u6539\u4ed6\u4eec\u81ea\u5df1\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u526f\u672c\u7684\u81ea\u7531\u3002\u5982\u679c\u8fd9\u4e0d\u662f SSPL\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684\u8fd9\u6837\u7684\u6267\u7167\u3002 AGPL \u7684\u90e8\u5206\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u8bc1\u7528\u6237\u7684\u8fd9\u79cd\u81ea\u7531\uff0c\u4f46\u5b83\u5931\u8d25\u4e86\u3002\u4e13\u6709\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u7ecf\u5e38\u7ed3\u5408 AGPL \u8f6f\u4ef6\u6765\u63d0\u4f9b\u670d\u52a1\u3002\u5b9e\u65bd\u6b64\u7c7b\u7cfb\u7edf\u7684\u7ec4\u7ec7\u76f8\u4fe1\uff0c\u53ea\u8981\u63d0\u4f9b\u670d\u52a1\u7684\u5355\u4e2a\u6d41\u7a0b\u7b26\u5408AGPL\uff0c\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u5176\u4f59\u90e8\u5206\u4e0d\u9700\u8981\u9075\u5b88\uff1b\u4f3c\u4e4e\u6cd5\u5f8b\u754c\u4e5f\u540c\u610f\u3002\u6211\u5e0c\u671b\u7528\u6237\u80fd\u591f\u8f7b\u677e\u8fd0\u884c\u9ad8\u8d28\u91cf\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002\u6211\u4eec\u53ef\u4ee5\u8ffd\u6c42\u5f88\u591a\u6280\u672f\u8fdb\u6b65\u8ba9\u8fd9\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u4f46\u6211\u4eec\u4e5f\u5e94\u8be5\u8ffd\u6c42\u793e\u4f1a\u8865\u6551\u3002\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u6709\u5927\u91cf\u4f4e\u6210\u672c\u7684\uff0c\u9ad8\u8d28\u91cf\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u8f6f\u4ef6\uff0c\u9664\u975e\u5f00\u6e90\u53cd\u9988\u5faa\u73af\u5f00\u59cb\u4e3a\u5206\u5e03\u5f0f\u7cfb\u7edf\u8fd0\u884c\u3002", "note_en": "It is good for users to be able to run,modify, distribute, and distribute modified versions of the software they use.Empirically, we&#39;ve seen over the last 30 years of open sourcethat this makes software better and cheaper. When software runs on a single local machine,then if the software is open source,it&#39;s easy for the user to run modified versions of the software,and distribute those modified versions to others for collaboration.That collaboration creates a feedback loop which makes the software even better. But when software is used as a service it is much more difficult for the user to run and distribute modified versions of the software,even if the software is open source.The service runs as part of a broader distributed system on nodes not controlled by the user.For the user to run their own copy,the user must  run their own distributed system which is composed of the service, other supporting services,and clients for that service, all spread across multiple nodes. It&#39;s known that it&#39;s more difficult to run distributed systems than local software, but why? In some respects, this is a technical problem.We have a good understanding of how to write and run individual processes on a single machine,and how even novice users can administrate such a machine at a basic level.But we have relatively little understanding of how to do the same for distributed systems,spread across multiple nodes,and so it&#39;s a difficult task even with all the tools we&#39;ve developed. In other respects, however, this is a social problem.The scripts and software and techniques that one user(which may be a single person or an entire organization, e.g. Facebook, Amazon, Netflix, Google, etc.)develops to run a specific distributed system,are typically not shared with other users.And, crucially, those scripts and techniques are not available to the end users of a service.If the end user wishes to run the service themselves,they start from nothing;they have to recreate the distributed system from scratch. Such scripts would probably not be very useful if they were made available immediately tomorrow.This comes back to the technical issues:We don&#39;t have a good understanding of how to  run distributed systemsat a theoretical level,and so the scripts we write to do it are highly specialized and bespoke. However, imagine a world where all users, including the largest organizations,published the scripts they use to run their distributed system.Over time,the most useful and portable and flexible such scripts would be adopted by others,and they would be extended to be even more useful.This is the same dynamic that we see for all open source. Consider an example in local software: Linux.Linux is not &#34; well-designed&#34;on a theoretical level.However, in practice, it&#39;s high quality, relatively easy to use,and used extremely widely for many different purposes.It made it to this state because it was open source,and everyone contributed to the shared Linux codebase;they had to, if they wanted to ship products using Linux. Today, the feedback loop that exists for Linux does not exist for distributed systems.The software that&#39;s actually used for the largest distributed systemsmaintained by the largest organizations isn&#39;t available,even though individual services within it are open source.A user has access to source code of a few individual components,but they don&#39;t have access to the code for the broader distributed system,so there&#39;s no open source feedback loop of improvements making that system high quality and reusable. For local software,we can preserve the freedom to run the entire local application by using copyleft.When a piece of local software uses an open source library licensed under the GPL,that software is required to provide its users all the freedoms of the GPL for the entire combined work.This ensures that the users of some software always have the ability to improve on it,sustaining the feedback loop that is so effective for Linux. We could write new, similar copyleft open source licenses for distributed systems.When a distributed system uses a service licensed under the new license,that system would be required to provide its users with all the freedoms of open source for the entire combined distributed system.The users would have the ability to run and modify their own copies of the distributed system,and make it better, just like with Linux. Some are concerned that such a license would not allow a serviceto be hosted on top of proprietary cloud hosting;an end-user would not be able to use the APIs of a proprietary distributed system to run the service.That&#39;s an issue the GPL dealt with, too.The GPL contains a &#34;system linking exemption&#34;, to allow the use of proprietary &#34;system libraries&#34;,part of proprietary operating systems;this was important back when proprietary operating systems were dominant.Our new distributed license could have a similar system linking exemptionto allow use with proprietary cloud hosting. The proponents of the SSPL claim it is an attemptto write such an copyleft open source license for distributed systems.The detractors claim it&#39;s something completely different.I don&#39;t really care;I just want an open source license which requires that,when licensed software is used to provide a service as part of a larger distributed system,the users of that service must be provided the freedom to run and modify their own copies of that distributed system.If that&#39;s not the SSPL, then we should work on a new such license. The AGPL was intended, in part, to guarantee this freedom to users, but it has failed.Proprietary distributed systems frequently incorporate AGPL software to provide services.The organizations implementing such systemsbelieve that as long as the individual process that provides the service complies with the AGPL,the rest of the distributed system does not need to comply;and it appears that the legal world agrees. I want users to be able to run high-quality distributed systems easily.There are lots of technical advances that we can pursue to make this easier,but we should also pursue social remedies.We will never have a large collection of low-cost, high-quality distributed system softwareunless the open source feedback loop starts running for distributed systems.", "posttime": "2021-08-05 20:47:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,\u514d\u8d39,\u5206\u5e03\u5f0f\u7cfb\u7edf,software", "title": "\u6211\u4eec\u9700\u8981\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u514d\u8d39\u8f6f\u4ef6\u8bb8\u53ef\u8bc1", "title_en": "We need a free software license for distributed systems", "transed": 1, "url": "http://catern.com/freedist.html", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u514d\u8d39", "\u5206\u5e03\u5f0f\u7cfb\u7edf", "software"]}, {"category": "", "categoryclass": "", "imagename": "d25e971a608ecc2145b06859f5f7e2c4.png", "infoid": 1071312, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Cardsjl \u662f\u4e00\u4e2a\u7b80\u5355\u7684 Julia \u5305\uff0c\u5b83\u5c55\u793a\u4e86 Julia \u7f16\u7a0b\u8bed\u8a00\u7684\u8bb8\u591a\u6709\u8da3\u7684\u90e8\u5206\u3002\u9605\u8bfb\u5b83\u662f\u4e00\u79cd\u6109\u5feb\u7684\u4f53\u9a8c\u3002\u6211\u5199\u4e0b\u7684\u6ce8\u91ca\u5728\u8fd9\u91cc\uff1a # import base multiply(*), bitwise-or(|), and bitwise-and(&amp;) # # \u5728 Julia \u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 `using` \u6216 `import` \u52a0\u8f7d\u6a21\u5757\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e # * `using` \u5c06\u52a0\u8f7d\u6a21\u5757 ** \u5e76** \u5c06\u52a0\u8f7d\u7684\u6a21\u5757\u91cd\u65b0\u5bfc\u51fa\u5230\u5468\u56f4\u7684\u5168\u5c40 # \u547d\u540d\u7a7a\u95f4\u4e2d\u3002 # * `import` \u53ea\u4f1a\u52a0\u8f7d\u6a21\u5757\u5e76\u5c06\u6a21\u5757\u540d\u79f0\u91cd\u65b0\u5bfc\u51fa\u5230\u4f5c\u7528\u57df\u3002 import Base : *, |, &amp; &quot;&quot;&quot; \u5c06\u82b1\u8272\u7f16\u7801\u4e3a 2 \u4f4d\u503c\uff08`UInt8` \u7684\u4f4e\u4f4d\uff09\uff1a- 0 = \u2663\uff08\u4ff1\u4e50\u90e8\uff09- 1 = \u2662\uff08\u94bb\u77f3\uff09- 2 = \u2661\uff08\u7ea2\u5fc3) - 3 = \u2660 (spades) \u82b1\u8272\u5177\u6709\u5168\u5c40\u5e38\u91cf\u7ed1\u5b9a\uff1a`\u2663`\u3001`\u2662`\u3001`\u2661`\u3001`\u2660`\u3002&quot;&quot;&quot; # \u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53`Suit`\u3002 `Suit` \u5305\u542b\u4e00\u4e2a\u7c7b\u578b\u4e3a`UInt8` \u7684 `i` \u53d8\u91cf # # \u5728 Julia \u4e2d\uff0c\u7c7b\u578b\u5bf9\u8c61\u662f\u6784\u9020\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u51fd\u6570`suit = Suit(0)`\u6765\u521b\u5efa\u7ed3\u6784\u4f53\u7684\u65b0\u5b9e\u4f8b # struct Suit i :: UInt8 # \u8fd9\u91cc\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u201c\u5185\u90e8\u6784\u9020\u51fd\u6570\u65b9\u6cd5\u201d\u6765\u5b9a\u4e49\u6784\u9020\u51fd\u6570\u7684\u7ea6\u675f # # \u8fd9\u4e5f\u662f\u4e00\u4e2aJulia \u7684 unicode \u652f\u6301\u7684\u7b80\u6d01\u793a\u4f8b\u3002\u662f\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 \u2264 \u7528\u4f5c `&lt;=`\u3002\u897f\u88c5(s :: Integer) = 0 \u2264 s \u2264 3 ? new(s) : throw( ArgumentError( &quot;invalidsuit number: $s &quot;)) end # Julia \u7684\u62bd\u8c61\u4e3b\u8981\u7531\u591a\u91cd\u5206\u6d3e\u63d0\u4f9b\u652f\u6301\u3002 # \u8fd9\u91cc\u6211\u4eec\u4e3a `char()` \u51fd\u6570\u5b9a\u4e49\u4e86\u4e00\u4e2a\u201c\u65b0\u8c03\u5ea6\u201d\u6765\u5c06\u666e\u901a\u5b57\u7b26\u8f6c\u6362\u4e3a Suit\u3002 # \u56e0\u6b64\uff0c\u6bcf\u5f53 `char()` \u51fd\u6570\u4e0e `Suit` \u4e00\u8d77\u5e94\u7528\u65f6\uff0c\u5c06\u4f7f\u7528\u8be5\u8c03\u5ea6\u3002char(s :: Suit) = Char( 0x2663 -s .i) # ... \u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u5e2e\u52a9\u5668\u3002\u5b83\u4eec\u4ee4\u4eba\u60ca\u8bb6\u5730\u4e0d\u8a00\u81ea\u660eBase .string(s :: Suit) = string(char(s))Base .show(io :: IO, s :: Suit) = print(io, char(s)) # \u5728\u4e00\u4e2a\u666e\u901a\u7684\u6251\u514b\u724c\uff0c\u53ea\u6709 4 \u79cd\u53ef\u80fd\u7684\u82b1\u8272 # \u6211\u4eec\u53ef\u4ee5\u7528 Julia \u4e2d\u7684 unicode \u7b26\u53f7\u7f16\u5199\u53ef\u8bfb\u4ee3\u7801 const \u2663 = Suit( 0) const \u2662 = Suit( 1) const \u2661 = Suit( 2) const \u2660 = Suit( 3) ) constsuits = [\u2663, \u2662, \u2661, \u2660] &quot;&quot;&quot; \u5c06\u4e00\u5f20\u6251\u514b\u724c\u7f16\u7801\u4e3a 6 \u4f4d\u6574\u6570\uff08`UInt8` \u7684\u4f4e\u4f4d\uff09\uff1a - \u4f4e\u4f4d\u4ee3\u8868 0 \u5230 15 \u7684\u7b49\u7ea7 - \u9ad8\u4f4d\u4ee3\u8868\u82b1\u8272\uff08\u2663\u3001\u2662\u3001\u2661 \u6216\u2660\uff09\u7b49\u7ea7\u5206\u914d\u5982\u4e0b\uff1a - \u7f16\u53f7\u5361\uff082 \u5230 10\uff09\u7684\u7b49\u7ea7\u4e0e\u5176\u53f7\u7801\u76f8\u540c - \u6770\u514b\u3001\u7687\u540e\u548c\u56fd\u738b\u7684\u7b49\u7ea7\u4e3a 11\u300112 \u548c 13 - \u6709\u4f4e\u548c\u9ad8 A\u7b49\u7ea7 1 \u548c 14 - \u6709\u7b49\u7ea7 0 \u548c 15 \u7684\u4f4e\u7ea7\u548c\u9ad8\u7ea7\u5c0f\u4e11 \u8fd9\u5141\u8bb8\u901a\u8fc7\u9009\u62e9\u4f7f\u7528\u54ea\u4e2a A \u6216\u54ea\u4e2a\u5c0f\u4e11\u6765\u5b9e\u73b0\u4efb\u4f55\u6807\u51c6\u7684\u7eb8\u724c\u7b49\u7ea7\u6392\u5e8f\u3002\u603b\u5171\u6709 64 \u79cd\u53ef\u80fd\u7684\u7eb8\u724c\u503c\u8fd9\u4e2a\u65b9\u6848\uff0c\u7531`UInt8`\u503c`0x00`\u5230`0x3f`\u8868\u793a\u3002\u201d &quot;&quot; # \u5361\u7247\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5b83\u5c06\u82b1\u8272\u548c\u7b49\u7ea7\u7f16\u7801\u6210\u4e00\u4e2a UInt8 # # \u5728\u5927\u591a\u6570\u9ad8\u7ea7\u8bed\u8a00\u4e2d\uff0c\u5b9a\u4e49\u8fd9\u4f1a\u6709\u70b9\u4e4f\u5473\u3002 # \u7136\u800c\uff0cJulia \u5728\u8fd9\u91cc\u76f4\u63a5\u5c55\u793a\u4e86\u5b83\u7684\u8868\u73b0\u529b\u3002 struct Card value :: UInt8 end # \u6211\u4eec\u4e3a `Card` \u7684\u6784\u9020\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 dispatch\u3002 # \u5b83\u5c06\u628a\u79e9\u548c\u82b1\u8272\u7f16\u7801\u6210 UInt8 \u51fd\u6570 Card(r :: Integer, s :: Integer) 0 \u2264 r \u2264 15 || throw( ArgumentError( &quot;invalid card rank: $r &quot;)) return Card(((s &lt;&lt; 4) % UInt8) | (r % UInt8)) end # \u5f53suitCard( r :: Integer, s :: Suit) = Card(r, s .i) # \u8fd9\u4e9b\u662f\u7528\u4e8e\u4ece cardsuit \u4e2d\u83b7\u53d6\u7b49\u7ea7\u6216\u82b1\u8272\u7684 getter(c :: Card) = Suit(( 0x30 &amp; c .value) &gt;&gt; &gt; 4)rank(c :: Card) = (c .value &amp; 0x0f) % Int8 # \u8ba9\u6211\u4eec\u4e3a Base.show \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u8c03\u5ea6\uff0c\u4f7f\u5176\u5728\u6253\u5370\u65f6\u770b\u8d77\u6765\u4e0d\u9519\u3002 function Base .show(io :: IO, c :: Card) r = rank(c) if 1 \u2264 r \u2264 14 r == 10 &amp;&amp; print(io, &#39;1&#39;) print(io, &quot;1234567890JQKA&quot;[r] ) else print(io, &#39;\\U1f0cf&#39;) end print(io,suit(c)) end # \u5728 Julia \u4e2d\uff0c`2 * x` \u53ef\u4ee5\u5199\u6210 `2x`\u3002 # # \u901a\u8fc7\u4e3a\u4e58\u6cd5\u8fd0\u7b97\u7b26 `*` \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8c03\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199 `2\u2663` # \u5e76\u4e14\u5b83\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a `Card(2, \u2663)`\u3002\u54c7\u82b1\u54e8\u3002 *(r :: Integer, s :: Suit) = Card(r, s) # \u7136\u800c\uff0c\u201cJ\u2663\u201d\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u4e58\u6cd5\u3002 # # \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528`@eval` \u5b8f\u5c06\u8fd9\u4e9b\u53d8\u91cf\u521b\u5efa\u4e3a\u5e38\u91cf\u3002 # \u8fd9\u6837\u7684\u53e3\u9f7f\u4e0d\u6e05\u3002\u6211\u559c\u6b22\u3002 for s in &quot;\u2663\u2662\u2661\u2660&quot;, (r,f) in zip( 11 : 14, &quot;JQKA&quot;) ss, sc = Symbol(s), Symbol(&quot; $f$s &quot;) @eval ( export $sc ; const $sc = Card( $r, $ss)) end &quot;&quot;&quot; \u4f7f\u7528`UInt64` \u4f4d\u96c6\u8868\u793a\u4e00\u624b\uff08\u5957\uff09\u724c\u3002&quot;&quot;&quot; # \u6211\u4eec\u4f7f\u7528`UInt64` \u4f4d\u96c6\u6765\u5b58\u50a8\u4ec0\u4e48\u724c\u7531\u4e8e\u4e00\u526f\u724c\u4e2d\u53ea\u6709 52 \u5f20\u724c\uff0c\u56e0\u6b64\u51fa\u73b0\u5728\u624b\u724c\u4e2d\u3002 # # \u6211\u4eec\u4f7f\u7528 `&lt;:` \u6765\u8868\u793a `Hand` \u662f `AbstractSet{Card}` \u7684\u5b50\u7c7b\u578b\u3002 # \u56e0\u6b64\uff0c`Hand` \u53ef\u4ee5\u4e0e\u6240\u6709\u5177\u6709\u53ef\u517c\u5bb9\u5206\u6d3e\u5230 `AbstractSet` \u7684\u51fd\u6570\u4e00\u8d77\u4f7f\u7528\u3002 struct Hand &lt;: AbstractSet{ Card} card :: UInt64 Hand(cards :: UInt64) = new(cards) end # \u5c06\u5361\u7247\u503c\u8f6c\u6362\u4e3a\u4f4d set positionbit(c :: Card) = one( UInt64) &lt;&lt; c .value #\u5c06\u897f\u88c5\u8f6c\u6362\u4e3a\u4f4d\u96c6 rangebits(s :: Suit) = UInt64( 0xffff) &lt;&lt; 16(s .i) # \u5c06\u4e00\u7ec4\u5361\u7247\u8f6c\u6362\u4e3a\u4f4d\u96c6\u7684\u7b80\u5355\u6784\u9020\u51fd\u6570 Hand(cards) hand = Hand(zero( UInt64)) \u7528\u4e8e\u5361\u4e2d\u5361\u5361 is \u5361 || throw( ArgumentError( &quot;not a card: $repr (card)&quot;)) i = bit(card) hand .cards &amp; i == 0 || throw( ArgumentError(&quot;\u4e0d\u652f\u6301\u91cd\u590d\u7684\u5361\u7247&quot;)) hand = Hand(hand .cards | i) end return hand end # \u4e3a\u6211\u4eec\u7684 Hand typeBase \u8fdb\u884c\u66f4\u591a\u8c03\u5ea6\u3002 in(c :: Card, h :: Hand) = (bit(c) &amp; h .cards) != 0Base .length(h :: Hand) = count_ones(h .cards)Base .isempty(h :: Hand) = h .cards == 0Base .lastindex(h :: Hand) = length(h) # \u4e3a\u6211\u4eec\u7684 Hand \u5b9a\u4e49\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 # # \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u4ecb\u7ecd\u7684\u8bed\u6cd5\u5b9a\u4e49\u4e00\u4e2a\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570 function Base .iterate(h :: Hand, s :: UInt8 = trailing_zeros(h .cards) % UInt8) (h .cards &gt;&gt;&gt; s) == 0 &amp;&amp; \u4ec0\u4e48\u90fd\u4e0d\u8fd4\u56de c = Card(s); s += true c, s + trailing_zeros(h .cards &gt;&gt;&gt; s) % UInt8 end # \u4ece Hand \u51fd\u6570\u4e2d\u83b7\u53d6 Card \u7684\u975e\u7ed1\u5b9a\u68c0\u67e5\u51fd\u6570 Base .unsafe_getindex(h :: Hand, i :: UInt8 ) card, s = 0x0, 0x5 \u800c\u771f\u6b63\u7684 mask = 0xffff_ffff_ffff_ffff &gt;&gt; ( 0x40 - ( 0x1 &lt;&lt;s) - card) card += UInt8(i &gt; count_ones(h .cards &amp; mask) % UInt8) &lt;&lt; ss &gt; 0 || break s -= 0x1 end return Card(card) end # \u4e3a\u4e86\u907f\u514d\u4e0d\u65ad\u5730\u4ece UInt8 \u8f6c\u6362\u4e3a Integer\uff0c# \u6211\u4eec\u4e3a\u6240\u6709 IntegeresBase \u7684 unsafe_getindex \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 dispatch .unsafe_getindex(h :: Hand, i :: Integer) = Base .unsafe_getindex(h, i % UInt8) # \u6700\u540e\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6709\u754c\u68c0\u67e5\u7684 `getindex` \u51fd\u6570\u6765\u5305\u88c5\u6211\u4eec\u4e0d\u90a3\u4e48\u5b89\u5168\u7684\u51fd\u6570 function Base .getindex(h :: Hand, i :: Integer) # `@ boundscheck` \u5b8f\u5141\u8bb8\u4f7f\u7528`@inbound` \u5b8f\u5ffd\u7565\u8fb9\u754c\u68c0\u67e5@boundscheck 1 \u2264 i \u2264 length(h) || throw( BoundsError(h,i)) return Base .unsafe_getindex(h, i) end # \u4f7f`Hand` \u5728\u6253\u5370\u65f6\u770b\u8d77\u6765\u5f88\u597d\u770b function Base .show(io :: IO, hand :: Hand) if isempty(hand) | | !get(io, :compact, false) print(io, &quot;Hand([&quot;) for card in hand print(io, card) (bit(card) &lt;&lt; 1) \u2264 hand .cards &amp;&amp; print(io, &quot;, &quot;) end print(io, &quot;])&quot;) else s = hand &amp;suit isempty(s) &amp;&amp; continue show(io,suit) for card in sr = rank(card) if r == 10 print( io, &#39;\\u2491&#39;) elseif 1 \u2264 r \u2264 14 print(io, &quot;1234567890JQKA&quot;[r]) else print(io, &#39;\\U1f0cf&#39;) end end end end # \u66f4\u591a\u7684dispatch\u8ba9\u6211\u4eec\u53ef\u4ee5\u5c06\u4e24\u53ea\u624b\u4e0e`|`\uff0c\u7528`|`a \u5c06\u4e00\u5f20\u724c\u52a0\u5230\u624b\u4e0a\uff1a :: Hand | b :: Hand = Hand(a .cards | b .cards)a :: Hand | c :: Card = Hand(a .cards | bit(c))c :: Card | h :: \u624b = h | c # \u7528 `&amp;`a \u63d2\u5165\u4e24\u53ea\u624b :: Hand &amp; b :: Hand = Hand(a .cards &amp; b .cards) # \u7528 `&amp;`h \u83b7\u53d6\u82b1\u8272\u8303\u56f4\u5185\u7684\u724c :: Hand &amp; s :: Suit = Hand(h .cards &amp; bits(s))s :: Suit &amp; h :: Hand = h &amp; s # \u66f4\u591a\u65b0\u8c03\u5ea6Base .intersect(s :: Suit, h :: Hand) = h &amp; sBase .intersect(h : : Hand, s :: Suit) = intersect(s :: Suit, h :: Hand) # \u6211\u4eec\u7684\u82b1\u8272\u548c\u724c\u7684\u8303\u56f4\u8fd0\u7b97\u7b26 *(rr :: OrdinalRange{ &lt;: Integer}, s :: Suit) = Hand(Card (r,s) for r in rr) ..(r :: Integer, c :: Card) = (r :rank(c)) *suit(c) ..(a :: Card, b :: Card) = \u897f\u88c5(a) == \u897f\u88c5(b) ? rank(a) ..b : throw( ArgumentError( &quot;\u5361\u7247\u8303\u56f4\u9700\u8981\u5339\u914d\u7684\u82b1\u8272\uff1a$a vs $b &quot;)) # \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u526f\u5957\u724c\uff0c\u5176\u4e2d\u5305\u542b 52 \u5f20\u72ec\u7279\u7684\u5361\u7247 consteck = Hand(Card(r,s) ) for s insuits for r = 2 : 14) # \u7a7a\u624b\u53ef\u4ee5\u8868\u793a\u4e3a 0Base .empty( :: Type{ Hand}) = Hand(zero( UInt64)) # \u4f7f\u7528 `rand` \u5f97\u5230\u4e00\u4e2a\u968f\u673a\u5b50\u96c6\u724c\u7ec4 # \u6211\u4eec\u4f7f\u7528 @eval \u5c06\u6240\u6709\u5361\u7247\u63d2\u5165\u5230\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u4e2d\uff0c\u7136\u540e\u5bf9\u5176\u6c42\u503c @eval Base .rand( :: Type{ Hand}) = Hand( $(deck .cards) &amp; rand( UInt64)) # \u5728 Julia \u4e2d\uff0c\u4e00\u4e2a\u4ee5`!`\u7ed3\u5c3e\u7684\u51fd\u6570\u8868\u793a\u5b83\u662f\u4e00\u4e2a\u5c31\u5730\u66f4\u65b0\u51fd\u6570##\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a`deal!`\u51fd\u6570\u6765\u6839\u636e\u6307\u5b9a\u7684`counts`\u5e03\u5c40\u6765\u586b\u5145\u624b\u6570 function deal!(counts :: Vector{ &lt;: Integer}, hand :: AbstractArray{ Hand}, offset :: Int = 0) for rank = 2 : 14,suit = 0 : 3 while true hand = rand( 1 : 4) if counts[hand] &gt; 0 counts[hand] -= 1 hand[offset + hand] |= Card(rank,suit) break end end end return hands end # \u73b0\u5728\u8ba9\u6211\u4eec\u5b9a\u4e49\u6211\u4eec\u7684 `deal` \u51fd\u6570\u3002\u5b83\u5c06\u6309\u7167\u7ed9\u5b9a\u7684\u6570\u91cf\u5411 4 \u4e2a\u4eba\u53d1\u724c # # \u6ca1\u6709\u53c2\u6570\u65f6\u7684\u9ed8\u8ba4\u8c03\u5ea6 provideddeal() = deal!(fill(13, 4), fill(empty(Hand), 4)) # \u4e3a `deal` \u8c03\u5ea6 when\u63d0\u4f9b\u4e86\u4e00\u4e2a `n` Int \u51fd\u6570 deal(n :: Int) counts = fill( 0x0, 4) hands = fill(empty(Hand), 4, n) for i = 1 :n deal!(fill!(counts, 13), hands, 4(i - 1)) end return permutedims(hands) end # \u8ba1\u7b97\u7ed9\u5b9a\u624b\u7684\u70b9\u6570 function points(hand :: Hand) p = 0 for rank = 11 : 14,suit = 0 : 3 card = Card(rank,suit) p += (rank - 10) *(card in hand) end return p end", "note_en": "Cardsjl is a simple Julia package which demonstrate many interesting bits of the  Julia Programming Language.\n Reading it is an enjoyable experience. The note I\u2019ve writtend down is here:\n # import base multiply(*), bitwise-or(|), and bitwise-and(&amp;) # # In Julia, you can load modules with `using` or `import`. The difference is that # * `using` will load the module **and** reexport the loaded module into the surrounding global # namespace. # * `import` will only load the module and rexport the module name to the scope. import Base :  *,  |,  &amp; &#34;&#34;&#34; Encode a suit as a 2-bit value (low bits of a `UInt8`):  - 0 = \u2663 (clubs) - 1 = \u2662 (diamonds) - 2 = \u2661 (hearts) - 3 = \u2660 (spades)  The suits have global constant bindings: `\u2663`, `\u2662`, `\u2661`, `\u2660`. &#34;&#34;&#34; # Here we define a struct `Suit`. A `Suit` contains a `i` variable with type`UInt8` # # In Julia, type objects are constructor functions. We can create new instance of the struct # via calling the function `suit = Suit(0)` struct  Suit i :: UInt8  # Here, we define an &#34;Inner Constructor Method&#34; to define constraints for the constructor  #  # This is also a neat example of Julia&#39;s unicode support. Yes, we can use \u2264 as `&lt;=`. Suit(s :: Integer)  =  0  \u2264 s  \u2264  3  ? new(s)  : throw( ArgumentError( &#34;invalid suit number:  $s &#34;)) end # Julia&#39;s abstraction is mostly powered by multiple dispatch. # Here we define a &#34;new dispatch&#34; for `char()` function to convert normal characters to a Suit. # Therefore, whenever the `char()` function is applied with a `Suit`, this dispatch will be used.char(s :: Suit)  =  Char( 0x2663 -s .i) # ... and some other helpers. They&#39;re surprisingly self-explanatoryBase .string(s :: Suit)  = string(char(s))Base .show(io :: IO, s :: Suit)  = print(io, char(s)) # In a normal poker deck, there&#39;s only 4 possible suits # We can write readable codes with the power of unicode symbols in Julia const \u2663  = Suit( 0) const \u2662  = Suit( 1) const \u2661  = Suit( 2) const \u2660  = Suit( 3) const suits  = [\u2663, \u2662, \u2661, \u2660] &#34;&#34;&#34; Encode a playing card as a 6-bit integer (low bits of a `UInt8`):  - low bits represent rank from 0 to 15 - high bits represent suit (\u2663, \u2662, \u2661 or \u2660)  Ranks are assigned as follows:  - numbered cards (2 to 10) have rank equal to their number - jacks, queens and kings have ranks 11, 12 and 13 - there are low and high aces with ranks 1 and 14 - there are low and high jokers with ranks 0 and 15  This allows any of the standard orderings of cards ranks to be achieved simply by choosing which aces or which jokers to use. There are a total of 64 possible card values with this scheme, represented by `UInt8` values `0x00` through `0x3f`. &#34;&#34;&#34; # A Card is a struct which encode the suit and the rank into a single UInt8 # # In most high-level languages, this would be kinda tedious to define. # However, Julia demonstrated its expressiveness straight to the lowest level here. struct  Card value :: UInt8 end # We create a new dispatch for `Card`&#39;s constructor. # It will encode the rank and the suit into the UInt8 function Card(r :: Integer, s :: Integer)  0  \u2264 r  \u2264  15  || throw( ArgumentError( &#34;invalid card rank:  $r &#34;))  return Card(((s  &lt;&lt;  4)  %  UInt8)  | (r  %  UInt8)) end # Another dispath when a suit is given instead of an integer for suitCard(r :: Integer, s :: Suit)  = Card(r, s .i) # These are getters for getting the rank or suit from a cardsuit(c :: Card)  = Suit(( 0x30  &amp; c .value)  &gt;&gt;&gt;  4)rank(c :: Card)  = (c .value  &amp;  0x0f)  %  Int8 # Lets define a new dispatch for Base.show to make it looks good when printed. function Base .show(io :: IO, c :: Card) r  = rank(c)  if  1  \u2264 r  \u2264  14 r  ==  10  &amp;&amp; print(io,  &#39;1&#39;) print(io,  &#34;1234567890JQKA&#34;[r])  else print(io,  &#39;\\U1f0cf&#39;)  end print(io, suit(c)) end # In Julia, `2 * x` can be written as `2x`. # # By creating a new dispatch for the multiply operator `*`, we can write `2\u2663` # and it will automatically converted to `Card(2, \u2663)`. WOW fancy. *(r :: Integer, s :: Suit)  = Card(r, s) # However, &#34;J\u2663&#34; will not be treated as a multipication. # # Here we use `@eval` macro to create these variables as consts. # such lispy. I like it. for s  in  &#34;\u2663\u2662\u2661\u2660&#34;, (r,f)  in zip( 11 : 14,  &#34;JQKA&#34;) ss, sc  =  Symbol(s),  Symbol( &#34; $f$s &#34;)  @eval ( export  $sc;  const  $sc  = Card( $r, $ss)) end &#34;&#34;&#34; Represent a hand (set) of cards using a `UInt64` bit set. &#34;&#34;&#34; # we use an `UInt64` bit set to store what cards are presented in a hand # since there&#39;s only 52 cards in a deck. # # We use `&lt;:` to indicate that a `Hand` is a subtype of a `AbstractSet{Card}`. # Therefore, `Hand` can be used with all functions with compatiable dispatch to an `AbstractSet`. struct  Hand  &lt;:  AbstractSet{ Card} cards :: UInt64 Hand(cards :: UInt64)  = new(cards) end # convert card value to bit\tset positionbit(c :: Card)  = one( UInt64)  &lt;&lt; c .value # convert suit to bit set rangebits(s :: Suit)  =  UInt64( 0xffff)  &lt;&lt;  16(s .i) # a simple constructor to convert a set of cards to a bit set function Hand(cards) hand  = Hand(zero( UInt64))  for card  in cards card  isa Card  || throw( ArgumentError( &#34;not a card:  $repr (card)&#34;)) i  = bit(card) hand .cards  &amp; i  ==  0  || throw( ArgumentError( &#34;duplicate cards are not supported&#34;)) hand  = Hand(hand .cards  | i)  end  return hand end # Some more dispatches for our Hand typeBase . in(c :: Card, h :: Hand)  = (bit(c)  &amp; h .cards)  !=  0Base .length(h :: Hand)  = count_ones(h .cards)Base .isempty(h :: Hand)  = h .cards  ==  0Base .lastindex(h :: Hand)  = length(h) # Define an iterator for our Hand. # # We can define a parameter with default value with the syntax introduced here function Base .iterate(h :: Hand, s :: UInt8  = trailing_zeros(h .cards)  %  UInt8) (h .cards  &gt;&gt;&gt; s)  ==  0  &amp;&amp;  return nothing c  = Card(s); s  += true c, s  + trailing_zeros(h .cards  &gt;&gt;&gt; s)  %  UInt8 end # a non-bound-checked function to get a Card from a Hand function Base .unsafe_getindex(h :: Hand, i :: UInt8) card, s  =  0x0,  0x5  while true mask  =  0xffff_ffff_ffff_ffff  &gt;&gt; ( 0x40  - ( 0x1 &lt;&lt;s)  - card) card  +=  UInt8(i  &gt; count_ones(h .cards  &amp; mask)  %  UInt8)  &lt;&lt; s s  &gt;  0  ||  break s  -=  0x1  end  return Card(card) end # To avoid having to convert from UInt8 to Integer constantly, # we create a new dispatch for our unsafe_getindex for all IntegeresBase .unsafe_getindex(h :: Hand, i :: Integer)  = Base .unsafe_getindex(h, i  %  UInt8) # Finally, we wrap our not-so-safe fuction with a bounded-checked `getindex` function function Base .getindex(h :: Hand, i :: Integer)  # The `@boundscheck` macro allows the bound check to be ignored with `@inbound` macro  @boundscheck  1  \u2264\u00a0i  \u2264 length(h)  || throw( BoundsError(h,i))  return Base .unsafe_getindex(h, i) end # Make a `Hand` looks nice when printed function Base .show(io :: IO, hand :: Hand)  if isempty(hand)  ||  !get(io,  :compact, false) print(io,  &#34;Hand([&#34;)  for card  in hand print(io, card) (bit(card)  &lt;&lt;  1)  \u2264 hand .cards  &amp;&amp; print(io,  &#34;, &#34;)  end print(io,  &#34;])&#34;)  else  for suit  in suits s  = hand  &amp; suit isempty(s)  &amp;&amp;  continue show(io, suit)  for card  in s r  = rank(card)  if r  ==  10 print(io,  &#39;\\u2491&#39;)  elseif  1  \u2264 r  \u2264  14 print(io,  &#34;1234567890JQKA&#34;[r])  else print(io,  &#39;\\U1f0cf&#39;)  end  end  end  end end # More dispatch to allow us to combine two hands with `|`, add a card to a hand with `|`a :: Hand  | b :: Hand  = Hand(a .cards  | b .cards)a :: Hand  | c :: Card  = Hand(a .cards  | bit(c))c :: Card  | h :: Hand  = h  | c # interset two hands with `&amp;`a :: Hand  &amp; b :: Hand  = Hand(a .cards  &amp; b .cards) # fetch cards within a suit range with `&amp;`h :: Hand  &amp; s :: Suit  = Hand(h .cards  &amp; bits(s))s :: Suit  &amp; h :: Hand  = h  &amp; s # more new dispatchesBase .intersect(s :: Suit, h :: Hand)  = h  &amp; sBase .intersect(h :: Hand, s :: Suit)  = intersect(s :: Suit, h :: Hand) # range operators for our suit and cards *(rr :: OrdinalRange{ &lt;: Integer}, s :: Suit)  = Hand(Card(r,s)  for r  in rr)  ..(r :: Integer, c :: Card)  = (r :rank(c)) *suit(c)  ..(a :: Card, b :: Card)  = suit(a)  == suit(b)  ? rank(a) ..b  : throw( ArgumentError( &#34;card ranges need matching suits:  $a  vs  $b &#34;)) # FINALLY, we create a deck, which contains 52 unique cards const deck  = Hand(Card(r,s)  for s  in suits  for r  =  2 : 14) # An empty hand can be represented as 0Base .empty( :: Type{ Hand})  = Hand(zero( UInt64)) # Use `rand` to get a random subset of the deck # we use @eval to interpolate all cards into this expression then evaluate it @eval Base .rand( :: Type{ Hand})  = Hand( $(deck .cards)  &amp; rand( UInt64)) # In Julia, a function ends with `!` indicates that it&#39;s an in-place update function # # Here we define a `deal!` function to fill hands based on specified `counts` layout function deal!(counts :: Vector{ &lt;: Integer}, hands :: AbstractArray{ Hand}, offset :: Int = 0)  for rank  =  2 : 14, suit  =  0 : 3  while true hand  = rand( 1 : 4)  if counts[hand]  &gt;  0 counts[hand]  -=  1 hands[offset  + hand]  |= Card(rank, suit)  break  end  end  end  return hands end # Now let&#39;s define our `deal` function. It will deal cards to 4 people with the given count # # Default dispatch when no argument provideddeal()  = deal!(fill( 13,  4), fill(empty(Hand),  4)) # a dispatch for `deal` when an `n` Int is provided function deal(n :: Int) counts  = fill( 0x0,  4) hands  = fill(empty(Hand),  4, n)  for i  =  1 :n deal!(fill!(counts,  13), hands,  4(i - 1))  end  return permutedims(hands) end # calculate the points of a given hand function points(hand :: Hand) p  =  0  for rank  =  11 : 14, suit  =  0 : 3 card  = Card(rank, suit) p  += (rank - 10) *(card  in hand)  end  return p end", "posttime": "2021-08-05 20:47:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "julia,\u5b66\u4e60,hand", "title": "\u9010\u884c\u5b66\u4e60 Julia", "title_en": "Learning Julia, Line by Line", "transed": 1, "url": "https://devpoga.org/post/2021-08-04_learning_julia_line_by_line/", "via": "", "real_tags": ["julia", "\u5b66\u4e60", "hand"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071311, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7d PDF \u6458\u8981\uff1a\u4f20\u7edf\u7684\u663e\u7740\u56fe\u7a81\u51fa\u4e86\u795e\u7ecf\u7f51\u7edc\u9884\u6d4b\u9ad8\u5ea6\u654f\u611f\u7684\u8f93\u5165\u7279\u5f81\u3002\u6211\u4eec\u5bf9\u663e\u7740\u6027\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d\u6211\u4eec\u8bc6\u522b\u548c\u5206\u6790\u7f51\u7edc\u53c2\u6570\uff0c\u800c\u4e0d\u662f\u5bfc\u81f4\u9519\u8bef\u51b3\u7b56\u7684\u8f93\u5165\u3002\u6211\u4eec\u53d1\u73b0\u5bfc\u81f4\u76f8\u4f3c\u53c2\u6570\u53d1\u751f\u6545\u969c\u7684\u6837\u672c\u5728\u8bed\u4e49\u4e0a\u662f\u76f8\u4f3c\u7684\u3002\u6211\u4eec\u8fd8\u8868\u660e\uff0c\u4e3a\u9519\u8bef\u5206\u7c7b\u7684\u6837\u672c\u4fee\u526a\u6700\u663e\u7740\u7684\u53c2\u6570\u901a\u5e38\u4f1a\u6539\u5584\u6a21\u578b\u884c\u4e3a\u3002\u6b64\u5916\uff0c\u5728\u5355\u4e2a\u6837\u672c\u4e0a\u5fae\u8c03\u5c11\u6570\u6700\u663e\u7740\u7684\u53c2\u6570\u4f1a\u5bfc\u81f4\u5bf9\u7531\u4e8e\u7c7b\u4f3c\u539f\u56e0\u88ab\u9519\u8bef\u5206\u7c7b\u7684\u5176\u4ed6\u6837\u672c\u8fdb\u884c\u9519\u8bef\u6821\u6b63\u3002\u57fa\u4e8e\u6211\u4eec\u7684\u53c2\u6570\u663e\u7740\u6027\u65b9\u6cd5\uff0c\u6211\u4eec\u8fd8\u5f15\u5165\u4e86\u4e00\u79cd\u8f93\u5165\u7a7a\u95f4\u663e\u7740\u6027\u6280\u672f\uff0c\u8be5\u6280\u672f\u63ed\u793a\u4e86\u56fe\u50cf\u7279\u5f81\u5982\u4f55\u5bfc\u81f4\u7279\u5b9a\u7f51\u7edc\u7ec4\u4ef6\u53d1\u751f\u6545\u969c\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5728\u6570\u636e\u96c6\u548c\u6848\u4f8b\u7814\u7a76\u7ea7\u522b\u4e0a\u4e25\u683c\u9a8c\u8bc1\u4e86\u663e\u7740\u6027\u56fe\u7684\u610f\u4e49\u3002\u4e66\u76ee\u5de5\u5177 \u4ee3\u7801\u548c\u6570\u636e\u76f8\u5173\u8bba\u6587 \u5173\u4e8e arXivLabs arXivLabs \u662f\u4e00\u4e2a\u6846\u67b6\uff0c\u5141\u8bb8\u5408\u4f5c\u8005\u76f4\u63a5\u5728\u6211\u4eec\u7684\u7f51\u7ad9\u4e0a\u5f00\u53d1\u548c\u5171\u4eab\u65b0\u7684 arXiv \u529f\u80fd\u3002\u4e0e arXivLabs \u5408\u4f5c\u7684\u4e2a\u4eba\u548c\u7ec4\u7ec7\u90fd\u63a5\u53d7\u5e76\u63a5\u53d7\u4e86\u6211\u4eec\u7684\u5f00\u653e\u3001\u793e\u533a\u3001\u5353\u8d8a\u548c\u7528\u6237\u6570\u636e\u9690\u79c1\u4ef7\u503c\u89c2\u3002 arXiv \u81f4\u529b\u4e8e\u8fd9\u4e9b\u4ef7\u503c\u89c2\uff0c\u5e76\u4e14\u53ea\u4e0e\u9075\u5b88\u8fd9\u4e9b\u4ef7\u503c\u89c2\u7684\u5408\u4f5c\u4f19\u4f34\u5408\u4f5c\u3002\u6709\u4e00\u4e2a\u53ef\u4ee5\u4e3a arXiv \u793e\u533a\u589e\u52a0\u4ef7\u503c\u7684\u9879\u76ee\u7684\u60f3\u6cd5\u5417\uff1f\u4e86\u89e3\u6709\u5173 arXivLabs \u4ee5\u53ca\u5982\u4f55\u53c2\u4e0e\u7684\u66f4\u591a\u4fe1\u606f\u3002", "note_en": "Download PDF  Abstract: Conventional saliency maps highlight input features to which neural networkpredictions are highly sensitive. We take a different approach to saliency, inwhich we identify and analyze the network parameters, rather than inputs, whichare responsible for erroneous decisions. We find that samples which causesimilar parameters to malfunction are semantically similar. We also show thatpruning the most salient parameters for a wrongly classified sample oftenimproves model behavior. Furthermore, fine-tuning a small number of the mostsalient parameters on a single sample results in error correction on othersamples that are misclassified for similar reasons. Based on our parametersaliency method, we also introduce an input-space saliency technique thatreveals how image features cause specific network components to malfunction.Further, we rigorously validate the meaningfulness of our saliency maps on boththe dataset and case-study levels.\n      Bibliographic Tools      Code &amp; Data      Related Papers       About arXivLabs   arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.\n  Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.\n  Have an idea for a project that will add value for arXiv&#39;s community?   Learn more about arXivLabs and   how to get involved.", "posttime": "2021-08-05 20:46:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u89e3\u91ca\u6027,space,\u9519\u8bef", "title": "\u6a21\u578b\u54ea\u91cc\u51fa\u9519\u4e86\uff1f\u7528\u4e8e\u53ef\u89e3\u91ca\u6027\u7684\u53c2\u6570\u7a7a\u95f4\u663e\u7740\u56fe", "title_en": "Where Do Models Go Wrong? Parameter-Space Saliency Maps for Explainability", "transed": 1, "url": "https://arxiv.org/abs/2108.01335", "via": "", "real_tags": ["\u89e3\u91ca\u6027", "space", "\u9519\u8bef"]}, {"category": "", "categoryclass": "", "imagename": "047eb97801d810e77f7cd4ed5ba2faf1.jpg", "infoid": 1071309, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u6cd5\u5b66\u9662\u62db\u751f\u59d4\u5458\u4f1a\u7684\u6700\u65b0\u6570\u636e\uff0c\u4eca\u5e74\u79cb\u5b63\u7533\u8bf7\u6cd5\u5b66\u9662\u7684\u4eba\u6570\u6fc0\u589e\u4e86\u8fd1 13%\uff0c\u8fd9\u662f\u81ea 2002 \u5e74\u4ee5\u6765\u7684\u6700\u5927\u540c\u6bd4\u589e\u5e45\u3002\u4ed6\u4eec\u662f\u4e00\u7fa4\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u4eba\u3002\u7533\u8bf7 LSAT \u5206\u6570\u5728 175 \u81f3 180 \u4e4b\u95f4\u7684\u6700\u9ad8\u5206\u7684\u4eba\u6570\u4ece\u53bb\u5e74\u7684 732 \u4eba\u589e\u52a0\u5230\u4eca\u5e74\u7684 1,487 \u4eba\uff0c\u589e\u52a0\u4e86\u4e00\u500d\u591a\u3002\u672c\u5468\u671f\u5171\u6709 71,048 \u4eba\u7533\u8bf7\u4e86\u7f8e\u56fd\u5f8b\u5e08\u534f\u4f1a\u8ba4\u53ef\u7684\u6cd5\u5b66\u9662\uff0c\u9ad8\u4e8e 2020 \u5e74\u6b64\u65f6\u7684 62,964 \u4eba\u3002\u8fd9\u4ecd\u663e\u7740\u4f4e\u4e8e 2004 \u5e74 100,601 \u540d\u7533\u8bf7\u4eba\u7684\u5386\u53f2\u9ad8\u4f4d\uff0c\u4f46\u5b83\u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u5927\u7684\u5168\u56fd\u7533\u8bf7\u8005\u7fa4\u4f53\u3002\u8fc7\u53bb\u5341\u5e74\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u611f\u5230\u60ca\u8bb6\u7684\u5468\u671f\uff0c\u201dSpivey Consulting \u7684 Mike Spivey \u8bf4\uff0c\u4ed6\u7684\u516c\u53f8\u5728\u6cd5\u5b66\u9662\u62db\u751f\u8fc7\u7a0b\u4e2d\u534f\u52a9\u5ba2\u6237\u3002 \u201c\u5728\u67d0\u4e9b\u5468\u671f\u4e2d\uff0c\u7533\u8bf7\u4eba\u4f1a\u611f\u5230\u60ca\u8bb6\u3002\u5728\u67d0\u4e9b\u5468\u671f\u4e2d\uff0c\u6cd5\u5b66\u9662\u611f\u5230\u60ca\u8bb6\u3002\u4f46\u662f\u6ca1\u6709\u4eba\u80fd\u591f\u9884\u6599\u5230 LSAT \u9ad8\u5206\u7684\u60ca\u4eba\u98d9\u5347\u3002\u201d Spivey \u8865\u5145\u8bf4\uff0c\u8bb8\u591a\u6cd5\u5b66\u9662\u90fd\u5728\u52aa\u529b\u7ba1\u7406\u610f\u5916\u6570\u91cf\u7684\u9ad8\u5206\u7533\u8bf7\u8005\uff0c\u5e76\u4e14\u5c06\u5728\u5373\u5c06\u5230\u6765\u7684\u5b66\u5e74\u4ee5\u6bd4\u4ed6\u4eec\u8ba1\u5212\u7684\u66f4\u5927\u7684 1L \u73ed\u7ea7\u5f00\u59cb\u3002\u4e13\u5bb6\u5c06\u7533\u8bf7\u6570\u91cf\u51cf\u5c11\u5f52\u56e0\u4e8e\u591a\u79cd\u56e0\u7d20\uff0c\u5c24\u5176\u662f COVID-19 \u5927\u6d41\u884c\u5bfc\u81f4\u5165\u95e8\u7ea7\u5c31\u4e1a\u5e02\u573a\u653e\u7f13\u3002\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u5f53\u7ecf\u6d4e\u653e\u7f13\u7684\u5de5\u4f5c\u66f4\u96be\u83b7\u5f97\u65f6\uff0c\u6cd5\u5b66\u9662\u548c\u5176\u4ed6\u7814\u7a76\u751f\u8bfe\u7a0b\u4f1a\u53d8\u5f97\u66f4\u53d7\u6b22\u8fce\u3002 2002 \u5e74\uff0c\u5728\u6240\u8c13\u7684\u4e92\u8054\u7f51\u6ce1\u6cab\u7834\u706d\u4e4b\u9645\uff0c\u6cd5\u5b66\u9662\u7684\u7533\u8bf7\u8005\u731b\u589e\u4e86\u8fd1 18%\u3002\u5728\u5927\u8427\u6761\u671f\u95f4\uff0c2009 \u5e74\u7533\u8bf7\u7684\u4eba\u6570\u4e5f\u589e\u52a0\u4e86\u8fd1 4%\u3002\u4f46\u8be5\u59d4\u5458\u4f1a\u8d1f\u8d23\u8fd0\u8425\u7684\u6267\u884c\u526f\u603b\u88c1\u82cf\u73ca\u00b7\u514b\u6797\u65af\u57fa (Susan Krinsky) \u8868\u793a\uff0c\u4e0e\u7ecf\u6d4e\u65e0\u5173\u7684\u5f53\u524d\u4e8b\u4ef6\u4e5f\u4fc3\u4f7f\u66f4\u591a\u4eba\u8003\u8651\u5728\u8fd9\u4e2a\u5468\u671f\u5185\u653b\u8bfb\u6cd5\u5f8b\u5b66\u4f4d\u3002\u4e54\u6cbb\u00b7\u5f17\u6d1b\u4f0a\u5fb7 (George Floyd) \u4e4b\u6b7b\u3001\u5168\u56fd\u5bf9\u7cfb\u7edf\u6027\u79cd\u65cf\u4e3b\u4e49\u548c\u4e0d\u5e73\u7b49\u7684\u53cd\u601d\uff0c\u4ee5\u53ca\u6807\u5fd7\u6027\u7684\u7f8e\u56fd\u6700\u9ad8\u6cd5\u9662\u5927\u6cd5\u5b98\u9732\u4e1d\u00b7\u5df4\u5fb7\u00b7\u91d1\u65af\u4f2f\u683c (Ruth Bader Ginsburg) \u7684\u53bb\u4e16\uff0c\u90fd\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u6cd5\u6cbb\u548c\u5f8b\u5e08\u5728\u63a8\u52a8\u66f4\u516c\u5e73\u793e\u4f1a\u65b9\u9762\u6240\u53d1\u6325\u7684\u4f5c\u7528\u4e0a\u3002\u5979\u6307\u51fa\uff0c\u9009\u4e3e\u5e74\u4e5f\u5f80\u5f80\u4f1a\u4ea7\u751f\u66f4\u591a\u7684\u6cd5\u5b66\u9662\u7533\u8bf7\u8005\u3002\n\u514b\u6797\u65af\u57fa\u8bf4\uff1a\u201c\u53ea\u662f\u770b\u770b\u4e16\u754c\u4e0a\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u4ee5\u53ca\u6240\u6709\u7684\u5dee\u5f02\u2014\u2014\u5728\u6cd5\u5f8b\u6559\u80b2\u53ef\u4ee5\u771f\u6b63\u6539\u53d8\u67d0\u4eba\u7684\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u60c5\u3002\u201d Spivey \u6307\u51fa\uff0c2020 \u5e74 6 \u6708\u4ece\u9762\u5bf9\u9762\u7684 LSAT \u8f6c\u4e3a\u66f4\u77ed\u7684\u5728\u7ebf LSAT-Flex\uff0c\u8fd9\u6709\u52a9\u4e8e\u89e3\u91ca LSAT \u9ad8\u5206\u7533\u8bf7\u8005\u4eba\u6570\u589e\u52a0\u7684\u90e8\u5206\u539f\u56e0\u3002\u6cd5\u5b66\u9662\u62db\u751f\u59d4\u5458\u4f1a\u8868\u793a\uff0c\u8fd9\u4e24\u4e2a\u7248\u672c\u5177\u6709\u53ef\u6bd4\u6027\uff0c\u5185\u90e8\u6570\u636e\u663e\u793a\uff0c\u6709\u62b1\u8d1f\u7684\u5f8b\u5e08\u5728\u5927\u6d41\u884c\u671f\u95f4\u6709\u66f4\u591a\u65f6\u95f4\u6765\u5b66\u4e60\u5165\u5b66\u8003\u8bd5\uff0c\u4ece\u800c\u83b7\u5f97\u66f4\u9ad8\u7684\u5206\u6570\u3002 LSAT \u8f85\u5bfc\u5458\u8fd8\u6307\u51fa\uff0c\u4e0e\u5728\u8003\u8bd5\u4e2d\u5fc3\u8fdb\u884c\u7684\u8f83\u957f\u65f6\u95f4\u8003\u8bd5\u76f8\u6bd4\uff0c\u5728\u81ea\u5df1\u8212\u9002\u7684\u5bb6\u4e2d\u8fdb\u884c\u7684\u8f83\u77ed\u65f6\u95f4\u7684\u8003\u8bd5\u80af\u5b9a\u4f1a\u538b\u529b\u66f4\u5c0f\u4e14\u66f4\u6613\u4e8e\u7ba1\u7406\u3002\u5e02\u8bae\u4f1a\u8868\u793a LSAT \u5c06\u4e00\u76f4\u5728\u7ebf\u5230 2022 \u5e74 6 \u6708\uff0c\u4f46\u6700\u7ec8\u7684 LSAT-Flex \u662f\u5728 6 \u6708\u8fdb\u884c\u7684\uff0c\u672c\u6708\u5c06\u88ab\u8fdc\u7a0b\u8003\u8bd5\u53d6\u4ee3\uff0c\u8be5\u8003\u8bd5\u6709\u56db\u4e2a\u90e8\u5206\u800c\u4e0d\u662f\u4e09\u4e2a\u90e8\u5206\uff0c\u8fd9\u4ecd\u7136\u6bd4\u4f20\u7edf\u7684\u8003\u8bd5\u5c11\u4e00\u4e2a\u90e8\u5206\u3002 -\u4e2a\u4ebaLSAT\u3002 Spivey \u9884\u6d4b\u660e\u5e74\u79cb\u5b63\u7684\u7533\u8bf7\u91cf\u5c06\u4fdd\u6301\u5f3a\u52b2\uff0c\u90e8\u5206\u539f\u56e0\u662f\u4eba\u4eec\u63a8\u8fdf\u4e86\u4eca\u5e74\u5728 1L \u73ed\u7ea7\u62db\u751f\u8fc7\u591a\u7684\u5b66\u6821\uff0c\u800c\u90a3\u4e9b\u5728\u7ade\u4e89\u6fc0\u70c8\u7684\u4e00\u5e74\u4e2d\u88ab\u62d2\u4e4b\u95e8\u5916\u7684\u4eba\u518d\u6b21\u5c1d\u8bd5\u3002 \u201c\u4f60\u4f1a\u5728\u65e9\u671f\u770b\u5230\u4e00\u4e2a\u7ade\u4e89\u5468\u671f\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u800c\u4e14\u6211\u8ba4\u4e3a\u5b66\u6821\u5728\u5f55\u53d6\u51b3\u7b56\u65b9\u9762\u4f1a\u975e\u5e38\u7f13\u6162\u3002\u4ed6\u4eec\u4eca\u5e74\u88ab\u70e7\u6bc1\u4e86\u3002\u201d", "note_en": "The number of people applying for admission to law school this fall surged nearly 13%, making it the largest year-over-year percentage increase since 2002, according to the latest data from the Law School Admission Council.\n And they were an impressive bunch. The number of people applying with LSAT scores in the highest band of 175 to 180 more than doubled from 732 last year to 1,487 this year.\n In total, 71,048 people applied to American Bar Association-accredited law schools this cycle, up from 62,964 at this point in 2020. That\u2019s still significantly lower than the historic high of 100,601 applicants in 2004, but it\u2019s by far the largest national applicant pool of the past decade.\n \u201cThis was the cycle that surprised everyone,\u201d said Mike Spivey of Spivey Consulting, whose firm assists clients in the law school admissions process. \u201cIn some cycles, applicants are surprised. In some cycles, law schools are surprised. But no one was able to anticipate the incredible spike of high LSAT scores.\u201d\n Many law schools struggled to manage the unexpected number of high-scoring applicants and will start the upcoming school year with larger 1L classes than they planned for, Spivey added.\n Experts attribute the crush of applications to a number of factors, particularly the slowdown in the entry-level job market caused by the COVID-19 pandemic. Law school and other graduate programs historically become more popular when jobs are tougher to come by in slow economies. Law school applicants shot up nearly 18% in 2002, amid the bursting of the so-called dot-com bubble. The number of people applying also climbed nearly 4% in 2009, amid the Great Recession.\n But current events separate from the economy also prompted more people to consider a law degree this cycle, said Susan Krinsky, the council\u2019s executive vice president for operations. The death of George Floyd, the national reckoning over systemic racism and inequality, and the death of iconic U.S. Supreme Court Justice Ruth Bader Ginsburg all focused attention on the rule of law and the role lawyers play in pushing for a more equitable society. Election years also tend to yield more law school applicants, she noted.\n \u201cJust seeing what was going on in the world and all the disparities \u2014 so much was happening where a legal education can really change things for somebody,\u201d Krinsky said.\n The switch from the in-person LSAT to the shorter, online LSAT-Flex in June of 2020 helps explain some of the increase in applicants with high LSAT scores, Spivey noted. The Law School Admission Council has said the two versions are comparable and that internal data show aspiring lawyers had more time to study for the admissions test during the pandemic, yielding higher scores. LSAT tutors have also noted that, at minimum, a shorter test taken in the comfort of one\u2019s own home is bound to be less stressful and more manageable than a longer exam taken at a testing center.\n The council has said the LSAT will remain online through June 2022, but the final LSAT-Flex was given in June and is being replaced this month by a remote exam with four sections instead of three, which is still one section less than the traditional in-person LSAT.\n Spivey predicts the application pool for next fall will remain robust, due in part to people deferring this year at schools with over-enrolled 1L classes, and those who got shut out in this competitive year trying again.\n \u201cYou\u2019re going to see a competitive cycle early on,\u201d he said. \u201cAnd I think schools are going to go incredibly slowly in admit decision-making. They got burned this year.\u201d", "posttime": "2021-08-05 20:46:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7533\u8bf7\u8005,school,lsat", "title": "\u6cd5\u5b66\u9662\u7533\u8bf7\u8005\u6fc0\u589e 13% \u4e3a\u4e92\u8054\u7f51\u6ce1\u6cab\u4ee5\u6765\u6700\u5927\u589e\u5e45", "title_en": "Law school applicants surge 13%, biggest increase since dot-com bubble", "transed": 1, "url": "https://www.reuters.com/legal/legalindustry/law-school-applicants-surge-13-biggest-increase-since-dot-com-bubble-2021-08-03/", "via": "", "real_tags": ["\u7533\u8bf7\u8005", "school", "lsat"]}, {"category": "", "categoryclass": "", "imagename": "2f15ce956d4ab8969139d2568b607fdf.jpg", "infoid": 1071307, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u7b2c\u4e00\u5929\u8d77\uff0c\u4ee5\u592a\u574a\u80cc\u540e\u7684\u613f\u666f\u5c31\u662f\u6253\u5f00\u53bb\u4e2d\u5fc3\u5316\u7684\u5927\u95e8\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u91d1\u878d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u4e1c\u897f......", "note_en": "from the first day, the vision behind Ethereum was to open the door for decentralizing far more than just finance. And indeed, there are far more things in t...", "posttime": "2021-08-05 20:45:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "buterin,\u4e2d\u5fc3\u5316", "title": "Vitalik Buterin\uff1aDeFi \u4e4b\u5916\u7684\u4e8b\u60c5", "title_en": "Vitalik Buterin: Things that matter outside of DeFi", "transed": 1, "url": "https://www.youtube.com/watch?v=oLsb7clrXMQ", "via": "", "real_tags": ["buterin", "\u4e2d\u5fc3\u5316"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071306, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u7f51\u7ad9\u9700\u8981\u542f\u7528 Cookie \u624d\u80fd\u8fd0\u884c\u3002\u8bf7\u786e\u4fdd Cookie \u5df2\u6253\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u8bbf\u95ee\u6240\u9700\u7684\u9875\u9762\u3002", "note_en": "This site requires Cookies to be enabled to function. Please ensure Cookies are  turned on and then re-visit the desired page.", "posttime": "2021-08-05 20:45:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ba4\u77e5,deficits,cookie", "title": "\u4ece Covid-19 \u4e2d\u5eb7\u590d\u7684\u4eba\u7684\u8ba4\u77e5\u7f3a\u9677", "title_en": "Cognitive deficits in people who have recovered from Covid-19", "transed": 1, "url": "https://www.thelancet.com/journals/eclinm/article/PIIS2589-5370(21)00324-2/fulltext#seccesectitle0001", "via": "", "real_tags": ["\u8ba4\u77e5", "deficits", "cookie"]}, {"category": "", "categoryclass": "", "imagename": "5761f0d42f65642caac7f725c9a91b89.png", "infoid": 1071305, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7559\u5728\u4e00\u4e2a\u89d2\u8272\u4e2d\u53ef\u4ee5\u5efa\u7acb\u6709\u4ef7\u503c\u7684\u3001\u7279\u5b9a\u4e8e\u516c\u53f8\u7684\u9886\u57df\u77e5\u8bc6\u3002\u79bb\u5f00\u901a\u5e38\u4f1a\u5bfc\u81f4\u53d1\u85aa\u65e5\u3002\u5f53\u7206\u51fa\u65b0\u661f\u96f7\u6770-\u8ba9\u4f69\u5947\u5728\u4ec5\u4ec5\u4e00\u4e2a\u8d5b\u5b63\u540e\u79bb\u5f00\u5e03\u91cc\u6770\u987f\u7684\u6d88\u606f\u4f20\u51fa\u65f6\uff0c\u6211\u7684\u7b2c\u4e00\u53cd\u5e94\u662f\u9707\u60ca\u548c\u5fc3\u788e\u3002\u6211\u65e0\u6cd5\u7406\u89e3\u4e3a\u4ec0\u4e48 Netflix \u548c\u9ed1\u65af\u5ef7\u65af\u516c\u7235\u65e0\u6cd5\u8fbe\u6210\u67d0\u79cd\u534f\u8bae\u3002\u4f46\u540e\u6765\u5b83\u6253\u52a8\u4e86\u6211\uff1a\u5728\u6211\u7684\u6574\u4e2a\u804c\u4e1a\u751f\u6daf\u4e2d\uff0c\u6211\u76ee\u7779\u4e86\u624d\u534e\u6a2a\u6ea2\u7684\u5de5\u7a0b\u5e08\u5728\u75db\u82e6\u7684\u77ed\u6682\u4efb\u671f\u540e\u79bb\u5f00\u516c\u53f8\u524d\u5f80\u66f4\u73af\u4fdd\u7684\u7267\u573a\u3002\u6211\u81ea\u5df1\u4e5f\u4e3a\u6b64\u611f\u5230\u5185\u759a\u2014\u2014\u5728\u4e0d\u5230\u4e24\u5e74\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u79bb\u5f00\u4e86\u4e00\u5bb6\u5f88\u68d2\u7684\u516c\u53f8\uff0c\u52a0\u5165\u4e86 Ethena\uff0c\u62c5\u4efb\u5de5\u7a0b\u526f\u603b\u88c1\u3002\u6211\u7684\u4f8b\u5b50\u4e00\u65b9\u9762\uff0c\u6211\u8ba4\u4e3a\u66f4\u5927\u7684\u73b0\u8c61\u662f\u7ec4\u7ec7\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4e2a\u4eba\u7684\u95ee\u9898\u3002\u5728\u62db\u8058\u65b0\u4eba\u65f6\uff0c\u516c\u53f8\u88ab\u8feb\u5728\u516c\u5f00\u5e02\u573a\u4e0a\u7ade\u4e89\uff0c\u4e89\u593a\u9876\u5c16\u4eba\u624d\u3002\u4f46\u5728\u5185\u90e8\uff0c\u4ed6\u4eec\u521b\u5efa\u4e86\u4e0d\u900f\u660e\u548c\u4fe1\u606f\u4e0d\u5bf9\u79f0\u7684\u85aa\u916c\u7ed3\u6784\uff0c\u65e8\u5728\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u73b0\u6709\u5458\u5de5\u7684\u589e\u957f\uff0c\u4ee5\u633d\u6551\u516c\u53f8\u7684\u5e95\u7ebf\u3002\u90a3\u4e0d\u662f\u6211\u60f3\u52a0\u5165\u7684\u516c\u53f8\u7c7b\u578b\uff0c\u6240\u4ee5\u5728 Ethena\uff0c\u6211\u6b63\u5728\u52aa\u529b\u521b\u5efa\u804c\u4e1a\u9053\u8def\u548c\u85aa\u916c\u7ed3\u6784\uff0c\u901a\u8fc7\u6177\u6168\u5730\u652f\u4ed8\u6211\u4eec\u7684\u5de5\u7a0b\u5e08\u5e76\u4e0e\u5176\u5f71\u54cd\u6210\u6bd4\u4f8b\uff0c\u9f13\u52b1\u957f\u671f\u548c\u6109\u5feb\u7684\u4efb\u671f\u3002\u6b64\u5916\uff0c\u6211\u5c06\u4e0e\u6211\u4eec\u5c1a\u672a\u8058\u8bf7\u7684\u4eba\u4e8b\u4e3b\u7ba1\u5408\u4f5c\uff0c\u516c\u5f00\u53d1\u5e03\u6211\u4eec\u7684\u85aa\u916c\u516c\u5f0f\u3002\u8ba9\u6211\u4eec\u5206\u89e3\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u7b56\u7565\u6709\u610f\u4e49\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u6211\u76f8\u4fe1\u5b83\u662f Ethena Engineering \u957f\u671f\u6210\u529f\u7684\u57fa\u7840\u3002\u7531\u4e8e\u5e02\u573a\u5982\u6b64\u706b\u7206\uff0c\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u5728\u516c\u53f8\u4e4b\u95f4\u8df3\u6765\u8df3\u53bb\uff0c\u5e76\u5728\u6b64\u8fc7\u7a0b\u4e2d\u83b7\u5f97\u5de8\u989d\u52a0\u85aa\u3002\u4f46\u662f\u8ba9\u6211\u4eec\u50cf\u7ecf\u6d4e\u5b66\u5bb6\u4e00\u6837\u601d\u8003\u4e00\u4e0b\u2014\u2014\u5728\u4e00\u4e2a\u5b8c\u7f8e\u7684\u5e02\u573a\u4e2d\uff0c\u8fd9\u5e94\u8be5\u662f\u4e0d\u53ef\u80fd\u7684\uff01\u5982\u679c\u67d0\u4e2a\u6c34\u5e73\u7684\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u5728\u516c\u5f00\u5e02\u573a\u4e0a\u8981\u6c42\u7ed9\u5b9a\u7684\u85aa\u6c34\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u73b0\u6709\u7684\u516c\u53f8\u4e0d\u652f\u4ed8\u7ed9\u4ed6\u4eec\u76f8\u540c\u7684\u91d1\u989d\uff1f\u5728\u6211\u4eec\u8fd9\u4e2a\u4e0d\u5b8c\u7f8e\u7684\u4e16\u754c\u4e2d\uff0c\u5de5\u7a0b\u5e08\u52a0\u5165\u4e00\u5bb6\u5177\u6709\u4e00\u5b9a\u4e13\u4e1a\u77e5\u8bc6\u6c34\u5e73\u7684\u516c\u53f8\uff0c\u82b1\u65f6\u95f4\u5728\u8be5\u516c\u53f8\u5185\u90e8\u5b66\u4e60\u548c\u53d1\u5c55\u8be5\u4e13\u4e1a\u77e5\u8bc6\uff0c\u7136\u540e\u65e0\u8bba\u51fa\u4e8e\u4f55\u79cd\u539f\u56e0\uff0c\u53d1\u73b0\u5728\u8be5\u516c\u53f8\u5916\u90e8\u83b7\u5f97\u5bf9\u8fd9\u79cd\u589e\u957f\u7684\u8ba4\u53ef\u8981\u5bb9\u6613\u5f97\u591a\u3002\u4e00\u4e24\u5f20\u56fe\u53ef\u80fd\u6709\u52a9\u4e8e\u8bf4\u660e\u95ee\u9898\u3002\u9996\u5148\uff0c\u5e02\u573a\u85aa\u6c34\u968f\u7740\u7ecf\u9a8c\u7684\u589e\u957f\u800c\u589e\u52a0\uff0c\u5f53\u7136\u524d\u63d0\u662f\u5de5\u7a0b\u5e08\u6b63\u5728\u63d0\u9ad8\u4ed6\u4eec\u7684\u6280\u80fd\uff01\u90a3\u4e2a\u6709\u70b9\u660e\u663e\u5427\uff1f\u597d\u5427\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5de5\u7a0b\u5e08\u5728 Acme Corp \u5de5\u4f5c\u7684\u85aa\u6c34\u3002\u6ce8\u610f\u7ebf\u7684\u659c\u7387\u6709\u70b9\u5c0f\u3002 . .\u4ee4\u4eba\u5174\u594b\uff1f\u5728\u6211\u770b\u6765\uff0c\u5728\u8bb8\u591a\u516c\u53f8\u5b9a\u4e49\u8fd9\u6761\u7ebf\u7684\u659c\u7387\u53ef\u80fd\u662f\u4e3a\u4e86\u7701\u94b1\u7684\u77ed\u89c6\u6b32\u671b\u3002\n\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u8c08\u8bba\u7684\u662f\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u8865\u507f\uff0c\u90a3\u4e48\u5f71\u54cd\u5462\uff1f\u770b\u770b\u8fd9\u4e2a\u9661\u5ced\u7684\u89d2\u5ea6\uff01\u770b\uff0c\u5f00\u53d1\u4eba\u5458\u4e0d\u4ec5\u5728\u4ed6\u4eec\u7684\u516c\u53f8\u5de5\u4f5c\u65f6\u63d0\u9ad8\u4e86\u4ed6\u4eec\u7684\u53ef\u8f6c\u79fb\u6280\u80fd\uff0c\u4ed6\u4eec\u8fd8\u83b7\u5f97\u4e86\u7279\u5b9a\u4e8e\u8be5\u516c\u53f8\u7684\u9886\u57df\u77e5\u8bc6\uff0c\u8fd9\u4e9b\u4e1c\u897f\u975e\u5e38\u6709\u4ef7\u503c\u3002\u75af\u72c2\u7684\u662f\uff0c\u5b83\u53ea\u5bf9\u90a3\u4e00\u5bb6\u516c\u53f8\u6709\u4ef7\u503c\uff01\u8ba9\u6211\u4eec\u628a\u5b83\u4eec\u653e\u5728\u4e00\u5f20\u56fe\u4e2d\uff0c\u8bf7\u4e0d\u8981\u5728\u8fd9\u91cc\u8bc4\u5224\u6211\u5bf9\u5355\u4f4d\u7684\u6df7\u5408\u3002 . .\u8bb8\u591a\u516c\u53f8\u96be\u4ee5\u7406\u89e3\u7684\u4e00\u4e2a\u4e25\u5cfb\u4e8b\u5b9e\u662f\uff0c\u4ed6\u4eec\u5e94\u8be5\u5411\u957f\u671f\u4efb\u804c\u7684\u5de5\u7a0b\u5e08\u652f\u4ed8\u9ad8\u4e8e\u5e02\u573a\u4ef7\u683c\u7684\u85aa\u916c\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u4e00\u5bb6\u516c\u53f8\u5de5\u4f5c\u4e86\u5f88\u957f\u65f6\u95f4\u7684\u5de5\u7a0b\u5e08\u5728\u8fd9\u5bb6\u516c\u53f8\u6bd4\u5728\u4efb\u4f55\u5176\u4ed6\u516c\u53f8\u66f4\u6709\u5f71\u54cd\u529b\u3002\u6487\u5f00\u5e03\u91cc\u6770\u987f\u4e0d\u8c08\uff0c\u50cf Netflix \u8fd9\u6837\u7684\u516c\u53f8\u660e\u767d\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e14\u603b\u662f\u4f1a\u5728\u7ade\u4e89\u4e2d\u80dc\u8fc7\u4ed6\u4eec\u7684\u9876\u5c16\u4eba\u624d\u3002\u8bf4\u201c\u4ed8\u7ed9\u4f60\u7684\u5f00\u53d1\u4eba\u5458\u66f4\u591a\u94b1\u201d\u5f88\u5bb9\u6613\uff0c\u4f46\u4ece\u6765\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\u3002\u4e00\u65b9\u9762\uff0c\u8fd9\u79cd\u85aa\u916c\u7ed3\u6784\u5bf9\u4e8e\u975e\u5e38\u65e9\u671f\u7684\u521d\u521b\u516c\u53f8\u6765\u8bf4\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e9b\u521d\u521b\u516c\u53f8\u4e2d\uff0c\u901a\u5e38\u4e0d\u53ef\u80fd\u5411\u524d\u51e0\u540d\u5de5\u7a0b\u5e08\u652f\u4ed8\u5e02\u573a\u85aa\u6c34\u3002\u6b64\u5916\uff0c\u5982\u679c\u6ca1\u6709\u4eba\u529b\u8d44\u6e90\u57fa\u7840\u8bbe\u65bd\uff0c\u7b80\u5355\u548c\u5e73\u7b49\u53ef\u4ee5\u5e2e\u52a9\u65e9\u671f\u516c\u53f8\u84ec\u52c3\u53d1\u5c55\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5230\u76ee\u524d\u4e3a\u6b62\u5728 Ethena\uff0c\u5305\u62ec\u6211\u81ea\u5df1\u5728\u5185\u7684\u6574\u4e2a\u5de5\u7a0b\u56e2\u961f\u90fd\u83b7\u5f97\u4e86\u76f8\u540c\u7684\u85aa\u6c34\u3002\u50cf\u6211\u63d0\u51fa\u7684\u8865\u507f\u7b56\u7565\u7684\u53e6\u4e00\u4e2a\u6311\u6218\u662f\u51c6\u786e\u65e0\u504f\u89c1\u5730\u8861\u91cf\u6bcf\u4e2a\u4eba\u7684\u72ec\u7279\u5f71\u54cd\u3002\u5f53\u65b0\u6765\u7684\u7099\u624b\u53ef\u70ed\u7684\u521d\u7ea7\u5de5\u7a0b\u5e08\u7a81\u7136\u5f00\u59cb\u8d85\u8d8a\u8001\u540e\u536b\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u51ed\u501f\u57fa\u4e8e\u5f71\u54cd\u7684\u85aa\u916c\u7ed3\u6784\uff0c\u5979\u7406\u5e94\u83b7\u5f97\u53ef\u89c2\u7684\u52a0\u85aa\uff0c\u4f46\u516c\u53f8\u662f\u5426\u613f\u610f\u63a5\u53d7\u5e76\u5192\u7740\u8ba9\u5176\u4ed6\u56e2\u961f\u6210\u5458\u4e0d\u9ad8\u5174\u7684\u98ce\u9669\uff1f\u6b64\u5916\uff0c\u5e76\u975e\u6240\u6709\u5de5\u7a0b\u5e08\u90fd\u4e00\u5b9a\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u63d0\u9ad8\u4ed6\u4eec\u7684\u5f71\u54cd\u6c34\u5e73\u3002\u8fd9\u4e9b\u6bcf\u5929\u8fd8\u5728\u589e\u52a0\u4ef7\u503c\u7684\u5de5\u7a0b\u5e08\u5728\u8fd9\u79cd\u7ed3\u6784\u4e2d\u662f\u5982\u4f55\u5f97\u5230\u8865\u507f\u7684\uff1f\u6211\u76f8\u4fe1\u89e3\u51b3\u8fd9\u4e9b\u96be\u9898\u7684\u5173\u952e\u662f\u7ec4\u7ec7\u6210\u719f\u5ea6\u3002\u5728 Ethena\uff0c\u6211\u4eec\u5728\u900f\u660e\u5ea6\u3001\u5f00\u653e\u53cd\u9988\u6e20\u9053\u548c\u7ecf\u9a8c\u4e30\u5bcc\u7684\u7ba1\u7406\u56e2\u961f\u65b9\u9762\u7684\u4e1a\u7ee9\u8bb0\u5f55\u4f7f\u6211\u4eec\u80fd\u591f\u5236\u5b9a\u5176\u4ed6\u516c\u53f8\u53ef\u80fd\u96be\u4ee5\u5b9e\u65bd\u7684\u6b64\u7c7b\u5927\u80c6\u653f\u7b56\u3002\u5728\u6211\u4eec\u5373\u5c06\u6210\u4e3a\u4eba\u529b\u8d44\u6e90\u4e3b\u7ba1\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u4eec\u6253\u7b97\u521b\u5efa\u4e00\u4e2a\u516c\u5f0f\uff0c\u5c06\u5934\u8854\u3001\u4efb\u804c\u5e74\u9650\u548c\u7ee9\u6548\u8003\u8651\u5728\u5185\uff0c\u4ee5\u521b\u5efa\u4e00\u4e2a\u5c3d\u53ef\u80fd\u4e0e\u516c\u53f8\u5f71\u54cd\u6210\u6bd4\u4f8b\u7684\u85aa\u916c\u56fe\u8868\u3002\u901a\u8fc7\u4f7f\u5176\u53ef\u9884\u6d4b\u548c\u516c\u5f00\uff0c\u73b0\u6709\u56e2\u961f\u6210\u5458\u548c\u6f5c\u5728\u96c7\u5458\u90fd\u53ef\u4ee5\u63d0\u524d\u77e5\u9053\u4ed6\u4eec\u5728\u77ed\u671f\u548c\u957f\u671f\u5185\u5e94\u8be5\u5728 Ethena \u505a\u4ec0\u4e48\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u8981\u63a5\u53d7\u4e25\u9177\u7684\u4e8b\u5b9e\u2014\u2014\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u7684\u5f71\u54cd\u529b\u90fd\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u548c\u89c4\u6a21\u589e\u957f\uff0c\u4fdd\u6301\u4eba\u624d\u5bc6\u5ea6\u610f\u5473\u7740\u613f\u610f\u4e0e\u8868\u73b0\u4e0d\u4f73\u7684\u4eba\u5206\u9053\u626c\u9573\u3002\u5f52\u6839\u7ed3\u5e95\uff0c\u5982\u679c Ethena \u7684\u4efb\u4f55\u5de5\u7a0b\u5e08\u8bc1\u660e\u4ed6\u4eec\u7684\u8868\u73b0\u8fbe\u5230\u4e86\u4e00\u5b9a\u6c34\u5e73\uff0c\u65e0\u8bba\u4ed6\u4eec\u5728\u516c\u53f8\u5185\u5916\u6709\u591a\u5c11\u5e74\u7684\u7ecf\u9a8c\uff0c\u4ed6\u4eec\u90fd\u5e94\u8be5\u83b7\u5f97\u4e0e\u4ed6\u4eec\u7684\u804c\u4f4d\u76f8\u5339\u914d\u7684\u5934\u8854\u548c\u57fa\u672c\u5de5\u8d44\u3002\u5f71\u54cd\uff08\u9664\u4e86\u4ed6\u4eec\u7684\u4efb\u671f\u548c\u7ee9\u6548\u4e58\u6570\uff01\uff09\u3002\u6240\u4ee5\u8bf7\u7ee7\u7eed\u5173\u6ce8\u66f4\u591a\uff01\u6211\u5e0c\u671b\u672a\u6765\u7684\u4eba\u4e8b\u4e3b\u7ba1\u77e5\u9053\u4ed6\u4eec\u5c06\u8981\u4ece\u4e8b\u4ec0\u4e48\u5de5\u4f5c\u3002 . .", "note_en": "Staying in a role builds valuable, company-specific domain knowledge. Leaving often results in a pay day.\n   When news broke that breakout star Reg\u00e9-Jean Page was  leaving Bridgerton after only one season, my initial reaction was that of shock and heartbreak. I couldn\u2019t fathom why Netflix and The Duke of Hastings weren\u2019t able to come to  some sort of agreement. But then it hit me: my entire career, I\u2019ve watched talented engineers leave companies for greener pastures after painfully short tenures. I\u2019m even guilty of this myself \u2014 I left an amazing company after less than two years to join  Ethena as VP of Engineering.\n My example a  side, I think the larger phenomena is a problem with organizations, not individuals. When hiring someone new, companies are forced to play in the open market, competing for top talent. But internally, they create opaque and informationally asymmetric compensation structures designed to minimize growth for existing employees to save the company\u2019s bottom line. That\u2019s not the type of company I want to be a part of, so at Ethena, I\u2019m working to create career paths and compensation structures that encourage long and happy tenures by  paying our engineers generously and in proportion to their impact. Additionally, I\u2019ll be working with our not yet hired  Head of People to  publish our compensation formula publically.\n Let\u2019s break down why this strategy makes sense, and why I believe it will be fundamental to Ethena Engineering\u2019s long term success.\n  With a market this hot, software developers are hopping between companies and raking in enormous pay raises in the process. But let\u2019s think like economists for a second \u2014 in a perfect market, this shouldn\u2019t be possible! If a developer of a certain caliber is able to demand a given salary on the open market, why isn\u2019t their existing company paying them that very same amount? In our imperfect world, engineers join a company at a certain level of expertise, spend time learning and growing that expertise within that company, and then for whatever reason find that it\u2019s much easier to get recognition for that growth  outside that company.\n A graph or two might help illustrate the problem. First, market salary increases with years of experience, assuming an engineer is improving their skills of course!\n  That one is a bit obvious, huh? Okay, well, let\u2019s look at an engineer\u2019s salary in their job at Acme Corp. Notice the slope of the line is a bit less . . . exciting? In my opinion, it\u2019s likely the short-sighted desire to save money that defines the slope of this line at many companies.\n  Well, if we\u2019re talking about compensation over time, what about impact? Check out this steep angle!\n  See, developers don\u2019t just improve their transferable skills while working at their company, they gain domain knowledge that is  specific to that company, and that stuff is incredibly valuable. The wild thing is that it\u2019s only valuable to that one company! Let\u2019s put it all together in one graph, and please don\u2019t judge my blending of the units here . . .\n  The hard truth that many companies struggle to wrap their heads around is that they should be paying their long-tenured engineers  above market  rate. This is because an engineer that\u2019s been working at a company for a long time will be more impactful  specifically at that company than at any other company. Bridgerton casting aside, a company like Netflix  understands this, and will always outbid competition for their top talent.\n  It\u2019s easy to say \u201cpay your developers more,\u201d but it\u2019s never that simple. For one thing, this type of compensation structure is unrealistic for very early stage startups where paying your first few engineers a market salary is usually impossible. Additionally, without an HR infrastructure in place, simplicity and equality can help early stage companies thrive. This is why, so far at Ethena, the entire engineering team, including myself, has made the same salary. The other challenge with a compensation strategy like I\u2019m proposing is measuring everyone\u2019s unique impact accurately and without bias. What happens when the new hotshot junior engineer suddenly starts outperforming the old guard? With an impact-based compensation structure, she would deserve a sizeable raise, but is the company willing to go through with it and risk upsetting the other team members? Plus, not all engineers necessarily increase their level of impact over time. How are these engineers, who still add value every day, compensated in this type of structure? I believe the key to navigating these hard problems is organizational maturity. At Ethena, our track record of transparency, open feedback channels and an experienced management team put us in a position to make these types of bold policies that other companies may struggle to operationalize.\n  With the help of our soon to be Head of People, we intend to create a formula that takes into account title, years of tenure, and performance to create a compensation graph that scales with company impact as closely as possible. By making it predictable and public, both existing team members and potential hires can know in advance what they should expect to make at Ethena in the short- and long-term. It also means being comfortable with hard truths \u2014 not everyone\u2019s impact grows in the same way and at the same time scale and maintaining talent density means being willing to part ways with underperformers. At the end of the day, if any engineer at Ethena demonstrates they are performing at a certain level, regardless of how many years of experience they have in or outside of the company, they should be rewarded with a title and base salary that matches their impact (in addition to their tenure and performance multipliers!).\n So stay tuned for more! I hope the future Head of People knows what they\u2019ll be getting themselves into . . .", "posttime": "2021-08-05 20:44:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5de5\u7a0b\u5e08,tech", "title": "\u4e3a\u4ec0\u4e48\u79d1\u6280\u516c\u53f8\u4e0d\u4ed8\u94b1\u7ed9\u4ed6\u4eec\u7684\u5de5\u7a0b\u5e08\u7559\u4e0b\u6765\uff1f", "title_en": "Why don't tech companies pay their engineers to stay?", "transed": 1, "url": "https://marker.medium.com/why-dont-tech-companies-pay-their-engineers-to-stay-b9c7e4b751e9", "via": "", "real_tags": ["\u5de5\u7a0b\u5e08", "tech"]}, {"category": "", "categoryclass": "", "imagename": "d7419244f5be82fcefe47a18ac43f997.jpg", "infoid": 1071304, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b64\u7248\u672c\u4ee3\u8868\u4e86 elm-pages \u5728\u529f\u80fd\u3001\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u548c\u6027\u80fd\u65b9\u9762\u7684\u5de8\u5927\u6539\u8fdb\u3002\u5b83\u5f15\u5165\u4e86\u4e00\u4e2a\u5b8c\u5168\u81ea\u5b9a\u4e49\u7684\u5f00\u53d1\u670d\u52a1\u5668\uff0c\u7edd\u5bf9\u6ca1\u6709 webpack\uff0c\u5f53\u60a8\u66f4\u6539 Elm \u4ee3\u7801\u548c\u6570\u636e\uff08\u5982\u964d\u4ef7\u6587\u4ef6\uff09\u65f6\uff0c\u5b83\u53ef\u4ee5\u4e3a\u60a8\u63d0\u4f9b\u70ed\u6a21\u5757\u66ff\u6362\uff01\u5b83\u8fd8\u7528\u66f4\u7075\u6d3b\u548c\u901a\u7528\u7684\u6784\u5efa\u5757\u4ee3\u66ff\u4e86\u4e00\u4e9b\u7279\u5b9a\u7684\u529f\u80fd\uff0c\u5f00\u8f9f\u4e86\u8bb8\u591a\u65b0\u7684\u7528\u4f8b\uff0c\u5e76\u4f7f\u7528\u66f4\u5c11\u7684\u6838\u5fc3\u6982\u5ff5\u6765\u5b9e\u73b0\u66f4\u591a\u7684\u53ef\u80fd\u6027\u3002\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u4f34\u968f\u7740\u6211\u4eec\u5728 Elm \u751f\u6001\u7cfb\u7edf\u4e2d\u6240\u671f\u671b\u7684\u7c7b\u578b\u5b89\u5168\u6027\u548c\u5f3a\u5927\u7684\u53cd\u9988\u3002\u5728\u6b64\u7248\u672c\u4e4b\u524d\uff0cStaticHttp API \u5141\u8bb8\u60a8\u63d0\u53d6\u6570\u636e\u5e76\u5728\u9884\u6e32\u67d3\u9875\u9762\u53ca\u5176 SEO \u6807\u7b7e\u4e2d\u4f7f\u7528\u5b83\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5448\u73b0\u5728\u6784\u5efa\u65f6\u9a8c\u8bc1\u7684\u6570\u636e\uff0c\u800c\u65e0\u9700\u52a0\u8f7d\u5fae\u8c03\u5668\u6216\u9519\u8bef\u72b6\u6001\u3002\u5982\u679c\u51fa\u73b0\u95ee\u9898\uff0c\u60a8\u4f1a\u6536\u5230\u6784\u5efa\u9519\u8bef\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u7528\u6237\u770b\u5230\u4e4b\u524d\u4fee\u590d\u5b83\u3002\u5728 v2 \u4e2d\uff0c\u6b64 API \u5df2\u91cd\u547d\u540d\u4e3a DataSource \u4ee5\u53cd\u6620\u66f4\u5e7f\u6cdb\u7684\u7528\u9014\u3002\u60a8\u4e0d\u4ec5\u53ef\u4ee5\u4ece API \u8bf7\u6c42\u4e4b\u5916\u7684\u66f4\u591a\u5730\u65b9\u63d0\u53d6\u6570\u636e\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u5728\u66f4\u591a\u5730\u65b9\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u3002\u5982\u679c\u8fd9\u4e2a\u6982\u5ff5\u5728 v2 \u4e4b\u524d\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u7279\u6027\uff0c\u90a3\u4e48\u5728 v2 \u53d1\u5e03\u4e4b\u540e\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662f\u6574\u4e2a elm-pages \u5e73\u53f0\u7684\u57fa\u672c\u6784\u5efa\u5757\u3002 v2 \u4e4b\u524d\u7f3a\u5c11\u7684\u6700\u5927\u529f\u80fd\u4e4b\u4e00\u662f\u80fd\u591f\u4f7f\u7528\u5916\u90e8\u6570\u636e\u6765\u786e\u5b9a\u9884\u6e32\u67d3\u9875\u9762\u3002\u5728 v1 \u4e2d\uff0c\u5c06\u65b0\u6587\u4ef6\u6dfb\u52a0\u5230 content/ \u6587\u4ef6\u5939\uff08\u901a\u5e38\u662f markdown \u6587\u4ef6\uff09\u662f\u521b\u5efa\u65b0\u9875\u9762\u7684\u552f\u4e00\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u6b64\u9650\u5236\u610f\u5473\u7740\u60a8\u4e0d\u80fd\u4f7f\u7528 CMS\uff08\u5185\u5bb9\u7ba1\u7406\u7cfb\u7edf\uff09\u5728\u5916\u90e8\u7cfb\u7edf\u4e2d\u6258\u7ba1\u60a8\u7684\u535a\u5ba2\u6587\u7ae0\u6216\u5176\u4ed6\u9875\u9762\uff0c\u7136\u540e\u4f7f\u7528\u8be5\u5916\u90e8\u6570\u636e\u4e3a\u6bcf\u4e2a\u6761\u76ee\u521b\u5efa\u4e00\u4e2a\u9875\u9762\u3002\u4f7f\u7528 elm-pages v2\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6570\u636e\u6e90\u6765\u786e\u5b9a\u8def\u7531\u7684\u9884\u6e32\u67d3\u9875\u9762\u3002\u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u91cc\u7684\u8fd9\u7bc7\u535a\u6587\u662f\u5982\u4f55\u5448\u73b0\u7684\u3002\u8981\u521b\u5efa\u535a\u5ba2\u6587\u7ae0\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c elm-pages add Blog.Slug_\u3002\u9875\u9762\u6a21\u5757\u540d\u79f0\u7684\u6bcf\u4e00\u90e8\u5206\u4ee3\u8868 URL \u7684\u4e00\u90e8\u5206\u3002\u5c3e\u968f _ \u8868\u793a slug \u662f\u52a8\u6001\u7684\u3002\u60a8\u53ef\u80fd\u5df2\u7ecf\u770b\u5230\u8fd9\u6837\u6807\u8bb0\u7684\u8def\u7531\uff1a/blog/:slug\u3002\u56e0\u6b64\uff0c\u8fd0\u884c\u6b64\u547d\u4ee4\u4f1a\u6784\u5efa\u4e00\u4e2a\u6a21\u5757\uff0celm-pages v2 \u7684\u57fa\u4e8e\u6587\u4ef6\u7684\u8def\u7531\u5c06\u4f7f\u7528\u8be5\u6a21\u5757\u6765\u5448\u73b0 /blog/introducing-v2 \u7b49\u9875\u9762\u3002\u56e0\u4e3a\u8fd9\u4e9b\u535a\u5ba2\u6587\u7ae0\u53ea\u662f\u672c\u535a\u5ba2\u4e2d\u7684\u672c\u5730\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 DataSource.Glob \u679a\u4e3e\u6211\u4eec\u60f3\u8981\u7684 /blog/:slug \u8def\u7531\u7684\u6240\u6709\u9875\u9762\u3002\nelm-pages \u5e76\u4e0d\u5173\u5fc3\u9884\u6e32\u67d3\u8def\u7531\u7684\u6570\u636e\u6e90\u662f\u4ec0\u4e48\u2014\u2014\u5b83\u53ea\u5173\u5fc3\u4f60\u6709\u4e00\u4e2a\u6570\u636e\u6e90\uff08\u5217\u51fa RouteParams\uff09\u3002\u5982\u679c\u6211\u4eec\u60f3\u5c06\u6211\u4eec\u7684\u535a\u5ba2\u6587\u7ae0\u8fc1\u79fb\u5230\u5916\u90e8 CMS \u5e76\u4f7f\u7528 HTTP \u83b7\u53d6\u535a\u5ba2\u6587\u7ae0\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u5c06\u8be5 DataSource \u66ff\u6362\u4e3a\u4e0d\u540c\u7684\uff1a\u6216\u8005\u4e0a\u8ff0\u4efb\u610f\u7ec4\u5408\uff0c\u4f7f\u7528 DataSource.map2\u3001DataSource.andThen \u6216\u6765\u81ea\u8be5\u6a21\u5757\u7684\u5176\u4ed6\u7ec4\u5408/\u7ee7\u7eed\u52a9\u624b \u5982\u679c\u8fd9\u8fd8\u4e0d\u8db3\u4ee5\u4e3a\u60a8\u63d0\u4f9b\u9700\u8981\u62c9\u5165\u7ad9\u70b9\u7684\u6570\u636e\uff0c\u90a3\u4e48\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u6a21\u5757\u53ef\u4ee5\u8ba9\u60a8\u6784\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u6e90\u3002 DataSource.Port \u5141\u8bb8\u60a8\u89e3\u7801\u4ece\u81ea\u5b9a\u4e49 NodeJS \u51fd\u6570\u8c03\u7528\u7684 JSON \u6570\u636e\u3002\u4e0e\u4efb\u4f55 DataSource \u4e00\u6837\uff0c\u60a8\u5728\u6784\u5efa\u6b65\u9aa4\u4e2d\u83b7\u53d6\u8fd9\u4e9b\u6570\u636e\uff0c\u7136\u540e\u5c06\u5176\u5185\u7f6e\u5230\u60a8\u7684\u7ad9\u70b9\u4e2d\uff0c\u56e0\u6b64\u5f53\u7528\u6237\u5728\u60a8\u7684\u5b9e\u65f6\u7ad9\u70b9\u4e2d\u6253\u5f00\u4e00\u4e2a\u9875\u9762\u65f6\uff0c\u8fd9\u4e9b NodeJS \u51fd\u6570\u3001HTTP \u8bf7\u6c42\u3001\u6587\u4ef6\u8bfb\u53d6\u7b49\u4e0d\u4f1a\u53d1\u751f\u60a8\u4f7f\u7528 elm-pages \u6784\u5efa\u3002\u5b83\u4e3a\u60a8\u63d0\u4f9b\u4e86\u6dfb\u52a0\u6240\u9700\u7684\u4efb\u4f55\u6570\u636e\u6e90\u7684\u6784\u5efa\u5757\uff0c\u4f8b\u5982\u8c03\u7528 shell \u811a\u672c\n\u60a8\u53ef\u4ee5\u5728 NPM \u751f\u6001\u7cfb\u7edf\u4e2d\u5229\u7528\u5e9e\u5927\u7684\u5de5\u5177\u751f\u6001\u7cfb\u7edf\uff0c\u5305\u62ec\u5177\u6709\u672c\u673a\u4f9d\u8d56\u9879\u7684\u5de5\u5177 - \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Sharp \u4ece\u60a8\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u83b7\u53d6\u56fe\u50cf\u7684\u5bbd\u5ea6/\u9ad8\u5ea6\u60a8\u53ef\u4ee5\u4ece\u6700\u7ec8\u7ad9\u70b9\u4e2d\u5220\u9664\u8ba1\u7b97\u548c\u6570\u636e\uff0c\u4ee5\u4fbf\u7528\u6237\u83b7\u5f97\u66f4\u5feb\u901f\u7684\u4f53\u9a8c - JAMstack \u7684\u6838\u5fc3\u539f\u5219\u4e4b\u4e00\u3002\u4f8b\u5982\uff0c\u6211\u559c\u6b22\u5728\u6784\u5efa\u65f6\u4f7f\u7528 shiki \u4ece VS Code \u4e2d\u63d0\u53d6\u6240\u6709\u8bed\u6cd5\u7a81\u51fa\u663e\u793a\u7684\u8bed\u6cd5\uff0c\u5e76\u5c06\u5176\u63d0\u53d6\u4e3a\u6d4f\u89c8\u5668\u52a0\u8f7d\u65f6\u5df2\u7ecf\u89e3\u6790\u7684\u6807\u8bb0\u5316\u8f93\u51fa\uff08\u63d0\u53d6\u6bcf\u4e2a VS Code \u8bed\u8a00\u8bed\u6cd5\u5230\u60a8\u7684\u6346\u7ed1\u5305\u5c06\u4e0d\u53ef\u884c\uff01\uff09\u73b0\u5728\u4e00\u4e2a\u9875\u9762\u5c31\u50cf\u60a8\u9700\u8981\u7684\u90a3\u6837\u7b80\u5355\u3002 v1 \u4e2d\u5143\u6570\u636e\u7684\u6982\u5ff5\u7ecf\u5e38\u5bfc\u81f4\u8fd9\u6837\u7684\u964d\u4ef7\u6587\u4ef6\uff1a\u53ea\u662f\u4e00\u4e2a\u5e26\u6709\u4e00\u4e9b\u524d\u7aef\u7684\u7a7a\u964d\u4ef7\u6587\u4ef6\uff0c\u56e0\u6b64\u9875\u9762\u53ef\u4ee5\u88ab\u89e3\u7801\u4e3a\u5143\u6570\u636e\u3002\u7136\u540e\u4f7f\u7528 case \u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u5b83\u662f blog-index-page\uff0c\u60a8\u53ef\u4ee5\u5728\u4e3b Elm \u89c6\u56fe\u4e2d\u5448\u73b0\u60a8\u7684\u535a\u5ba2\u89c6\u56fe\u3002 elm-pages 2.0 \u4f7f\u7528\u57fa\u4e8e\u62c9\u53d6\u7684\u65b9\u6cd5\u3002\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u9875\u9762\u6a21\u5757\uff0c\u7136\u540e\u7528\u5b83\u6765\u5448\u73b0\u4e00\u4e2a Elm \u89c6\u56fe\uff08\u6216\u4e00\u4e2a\u5e26\u6709\u81ea\u5df1\u7684\u6d88\u606f\u548c\u66f4\u65b0\u7684\u8ff7\u4f60 Elm \u5e94\u7528\u7a0b\u5e8f\uff09\u3002\u6216\u8005\uff0c\u5982\u679c\u60a8\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u4ece\u6240\u6709\u535a\u5ba2\u6587\u7ae0\u4e2d\u63d0\u53d6\u5143\u6570\u636e\u3002\u7531\u4f60\u51b3\u5b9a\u3002\u6838\u5fc3\u6784\u5efa\u5757\u53ef\u8ba9\u60a8\u63d0\u53d6\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u4ece\u4f55\u5904\u83b7\u53d6\u6570\u636e\u4ee5\u53ca\u5982\u4f55\u5904\u7406\u6570\u636e\u3002 elm-pages v1 \u5efa\u7acb\u5728 Webpack \u4e4b\u4e0a\u3002\u5b83\u4f7f\u7528 Webpack \u63d2\u4ef6\u6765\u8fd0\u884c Puppeteer \u5e76\u9884\u6e32\u67d3\u6240\u6709\u9875\u9762\u3002\u8fd9\u662f\u8106\u5f31\u7684\uff0c\u662f\u6027\u80fd\u7684\u4e3b\u8981\u74f6\u9888\u3002 v2 \u5220\u9664\u4e86 Webpack \u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6 NPM \u4f9d\u8d56\u9879\u3002\u5f00\u53d1\u670d\u52a1\u5668\u662f\u5b8c\u5168\u5b9a\u5236\u7684\uff0c\u7528\u4e8e\u7f16\u8bd1\u60a8\u7684 elm-pages \u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u5f00\u53d1\u670d\u52a1\u5668\u4e2d\u4e3a\u60a8\u63d0\u4f9b Elm \u7f16\u8bd1\u5668\u9519\u8bef\u8986\u76d6\uff0c\u4ee5\u53ca\u6570\u636e\u6e90\u9519\u8bef\u8986\u76d6\u3002\u5b83\u751a\u81f3\u53ef\u4ee5\u5bf9\u9875\u9762\u6240\u4f9d\u8d56\u7684\u6570\u636e\u6e90\u8fdb\u884c\u70ed\u6a21\u5757\u66ff\u6362\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a DataSource \u6765\u5217\u51fa\u6bcf\u4e00\u7bc7\u5728 frontmatter \u4e2d\u6807\u8bb0\u4e86\u7279\u5b9a\u6807\u7b7e\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u5982\u679c\u4f60\u4fdd\u5b58\u4e00\u4e2a Markdown \u6587\u4ef6\u5e76\u6dfb\u52a0\u6216\u5220\u9664\u4e00\u4e2a\u6807\u7b7e\uff0c\u5b83\u4f1a\u5728\u4f60\u5728 dev \u4e2d\u67e5\u770b\u9875\u9762\u65f6\u7acb\u5373\u53cd\u6620\u51fa\u6765\u670d\u52a1\u5668\u3002\n\u4f5c\u4e3a\u6b64\u7248\u672c\u7684\u4e00\u90e8\u5206\uff0c\u6211\u8fdb\u884c\u4e86\u5927\u91cf\u6027\u80fd\u8c03\u6574\uff0c\u5bf9\u4e8e\u6211\u5347\u7ea7\u7684\u7ad9\u70b9\uff0c\u6211\u770b\u5230\u6784\u5efa\u65f6\u95f4\u5728\u51e0\u79d2\u949f\u800c\u4e0d\u662f\u51e0\u5206\u949f\u5185\u3002\u5982\u679c\u60a8\u5c06\u60a8\u7684\u7f51\u7ad9\u4ece v1 \u5347\u7ea7\u5230 v2\uff0c\u6211\u5f88\u60f3\u77e5\u9053\u60a8\u4e4b\u524d/\u4e4b\u540e\u7684\u8868\u73b0\uff01 v2 \u5f15\u64ce\u76d6\u4e0b\u7684\u6838\u5fc3\u53d8\u5316\u4e4b\u4e00\u662f\u6bcf\u6b21\u90fd\u6784\u5efa\u4e00\u9875\u3002\u8fd9\u662f\u5982\u4f55\u4f18\u5316\u5f00\u53d1\u670d\u52a1\u5668\u6027\u80fd\u4ee5\u5feb\u901f\u5448\u73b0\u548c\u70ed\u91cd\u8f7d\u9875\u9762\u53ca\u5176\u6570\u636e\u7684\u6838\u5fc3\u3002\u5f15\u64ce\u76d6\u4e0b\u7684\u8fd9\u79cd\u65b0\u67b6\u6784\u4e5f\u4e3a\u4e00\u4e9b\u5b9e\u9a8c\u6027\u529f\u80fd\u63d0\u4f9b\u4e86\u52a8\u529b\uff0c\u8fd9\u4e9b\u529f\u80fd\u5c06\u6210\u4e3a\u4e0b\u4e00\u4e2a elm-pages \u91cc\u7a0b\u7891\u7684\u91cd\u70b9\uff1a\u65e0\u670d\u52a1\u5668\u6e32\u67d3\u3002\u65e0\u670d\u52a1\u5668\u51fd\u6570\u8ba9\u60a8\u53ef\u4ee5\u901a\u8fc7\u6700\u5c11\u7684\u57fa\u7840\u8bbe\u65bd\u8bbe\u7f6e\u8fd0\u884c JavaScript \u4ee3\u7801\uff0c\u5e76\u54cd\u5e94 HTTP \u8bf7\u6c42\u3002\u8fd9\u672c\u8d28\u4e0a\u6b63\u662f\u5f00\u53d1\u670d\u52a1\u5668\u6b63\u5728\u505a\u7684\u4e8b\u60c5\uff0c\u56e0\u6b64\u5728\u8bf7\u6c42\u65f6\u6e32\u67d3\u9875\u9762\u800c\u4e0d\u662f\u5728\u6784\u5efa\u65f6\u9884\u6e32\u67d3\u9875\u9762\u5e76\u6ca1\u6709\u592a\u5927\u7684\u98de\u8dc3\u3002\u5728\u60a8\u63d0\u524d\u62e5\u6709\u6240\u9700\u6570\u636e\u7684\u60c5\u51b5\u4e0b\uff0c\u9884\u6e32\u67d3\u9875\u9762\u4ecd\u7136\u662f\u7406\u60f3\u7684\uff0c\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u6309\u9700\u83b7\u53d6\u6570\u636e\uff0c\u751a\u81f3\u5728\u63d0\u4f9b\u9875\u9762\u65f6\u4f7f\u7528\u8bf7\u6c42\u6807\u5934\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8eab\u4efd\u9a8c\u8bc1\u6807\u5934\u6765\u9a8c\u8bc1\u7528\u6237\u662f\u5426\u5df2\u767b\u5f55\uff0c\u5e76\u6839\u636e\u8eab\u4efd\u9a8c\u8bc1\u68c0\u67e5\u8fdb\u884c\u91cd\u5b9a\u5411\u6216\u63d0\u4f9b\u7528\u6237\u9875\u9762\u3002\u4f20\u7edf Jamstack \u7ad9\u70b9\u7684\u6311\u6218\u4e4b\u4e00\u662f\u7279\u5b9a\u4e8e\u7528\u6237\u7684\u5185\u5bb9\uff0c\u800c\u6b64\u529f\u80fd\u53ef\u4ee5\u5728\u8be5\u9886\u57df\u5f00\u8f9f\u4e00\u4e9b\u7528\u4f8b\u3002\u8bf7\u7ee7\u7eed\u5173\u6ce8\u8fd9\u65b9\u9762\u7684\u66f4\u591a\u4fe1\u606f\u3002\u73b0\u5728\uff0c\u8bd5\u8bd5\u65b0\u7684 v2\uff01\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c npx elm-pages@latest init my-app \u6765\u8bbe\u7f6e\u65b0\u5e94\u7528\u3002\u60a8\u8fd8\u53ef\u4ee5\u5728 elm-pages \u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u5185\u5bb9\uff0c\u5e76\u67e5\u770b elm-pages \u5305\u6587\u6863\u3002\u5982\u679c\u60a8\u521b\u5efa\u4e86\u4e00\u4e2a\u95ea\u4eae\u7684\u65b0 v2 \u7ad9\u70b9\uff0c\u8bf7\u5c06\u5176\u63d0\u4ea4\u5230\u5c55\u793a\u533a\uff0c\u6211\u5f88\u60f3\u770b\u770b\u60a8\u6784\u5efa\u7684\u5185\u5bb9\uff01", "note_en": "This release represents a huge improvement for  elm-pages in terms of features, developer experience, and performance. It introduces a completely custom dev server with absolutely no webpack, that gives you hot module replacement as you change Elm code and data (like markdown files)! It also replaces some specific features with more flexible and universal building blocks, opening up a lot of new use cases, and using fewer core concepts to enable more possibilities. And all that with the type-safety and robust feedback we&#39;ve come to expect in the Elm ecosystem.\n  Before this release, the  StaticHttp API let you pull in data and use it in pre-rendered pages and their SEO tags. That is, you could present data that is validated at build-time, with no loading spinners or error states. If there&#39;s a problem, you get a build error and can fix it before a user sees it.\n In v2, this API has been renamed to  DataSource to reflect the broader range of uses. Not only can you pull in data from more places than just API requests, but you can use that data in more places as well. If this concept was an important feature before v2, after the v2 release you can consider it to be the fundamental building block of the entire  elm-pages platform.\n  One of the biggest features that was missing before v2 was the ability to use external data to determine pre-rendered pages. In v1, adding new files to the  content/ folder (usually markdown files) was the only way to create a new page. This limitation meant that you couldn&#39;t, for example, use a CMS (Content Management System) to host your blog posts or other pages in an external system, and then use that external data to create a page for each entry.\n With  elm-pages v2, you can use any DataSource to determine the pre-rendered pages for a Route. For example, let&#39;s take a look at how this blog post right here is rendered.\n To create a blog post, we could run  elm-pages add Blog.Slug_. Each section of the Page Module&#39;s name represents a segment of the URL. The trailing  _ means that slug is dynamic. You may have seen routes notated like this:  /blog/:slug. So running this command scaffolds a module which  elm-pages v2&#39;s file-based routing will use to render pages like  /blog/introducing-v2.\n Because these blog posts are just local files in this blog, we can use  DataSource.Glob to enumerate all the pages we want for our  /blog/:slug Route.\n  elm-pages doesn&#39;t care what the source of the data is for the pre-rendered routes, though - it only cares that you have a  DataSource (List RouteParams).\n If we wanted to migrate our blog posts over to an external CMS and fetch the blog posts with HTTP, then we would just swap out that  DataSource for different one:\n    Or any combination of the above, using  DataSource.map2,  DataSource.andThen, or other combining/continuing helpers from this module\n If that isn&#39;t enough to get you the data you need to pull in to your site, then there&#39;s an additional module that lets you build your own custom  DataSource.\n DataSource.Port lets you decode JSON data that you call from custom NodeJS functions. As with any  DataSource, you get this data in the build step and then it gets built in to your site, so these NodeJS functions, HTTP requests, file reads, etc. are not happening when a user opens a page in your live site that you built with  elm-pages build.\n    It gives you the building block to add any DataSource you need, like calling shell scripts for example\n If you throw an error, you get a nice error message when you run  elm-pages build and in your dev server\n You can leverage a huge ecosystem of tools, including ones with native dependencies, in the NPM ecosystem - for example, you could use  sharp to get an image&#39;s width/height from your filesystem\n You can shave off computation and data from the final site so users get a snappier experience - one of the core principles of JAMstack. For example, I like using  shiki to pull in all the syntax highlighting grammars from VS Code at build time, and distilling it down to the tokenized output that has already been parsed by the time the browser loads it (pulling in every VS Code language grammar to your bundle would not be viable!)\n   Now a page is as simple as you need it to be. The concept of Metadata in v1 often led to markdown files like this:\n  Just an empty markdown file with some frontmatter, so the page could be decoded as Metadata. Then using a  case expression, you could render your blog view within your main Elm view if it was the blog-index-page.\n elm-pages 2.0 uses a pull-based approach. You can define a Page Module and just use it to render an Elm view (or a mini Elm app with its own Msg and update). Or you can pull in metadata from all blog posts if that&#39;s what you need. It&#39;s up to you. The core building blocks let you pull in data, and it&#39;s up to you to define where to get the data from and what to do with it.\n   elm-pages v1 was built on top of Webpack. It used a Webpack plugin to run Puppeteer and pre-render all the pages. This was brittle and was a major bottleneck for performance.\n v2 has removed Webpack, as well as many other NPM dependencies. The dev server is completely custom tailored to compile your  elm-pages app, give you Elm compiler error overlays in the dev server, as well as  DataSource error overlays. And it even does hot module replacement for the  DataSources your page depends on. For example, if you have a  DataSource to list out every blog post marked with a particular tag in the frontmatter, if you save a markdown file and add or remove a tag, it will be instantly reflected when you are viewing the page in the dev server.\n I did a lot of performance tuning as part of this release, and for the sites that I&#39;ve upgraded I&#39;m seeing build times in the seconds rather than minutes. If you upgrade your site from v1 to v2, I&#39;d love to hear about your before/after performance!\n  One of the core changes under the hood in v2 is that everything is built one page at a time. That&#39;s central to how the dev server performance was optimized to quickly render and hot reload pages and their data.\n This new architecture under the hood is also what powers some experimental functionality that will be the focus of the next  elm-pages milestone: serverless rendering. Serverless functions let you run JavaScript code with minimal infrastructure setup, and respond to an HTTP request. This is essentially exactly what the dev server is doing, so it&#39;s not a big leap from that to rendering pages at request-time instead of pre-rendering them at build-time.\n Pre-rendering pages is still ideal in cases where you have the data you need ahead of time, but in some cases you may want to pull in data on-demand, or even use request headers when serving up the page. For example, you could use an authentication header to verify that a user is logged in, and do a redirect or serve up the user&#39;s page depending on the auth check. One of the challenges with traditional Jamstack sites is content that is user-specific, and this functionality can open up some use cases in this area.\n Stay tuned for more on this front. For now, give the new v2 a try! You can set up a new app by running  npx elm-pages@latest init my-app. You can also  read more in the elm-pages docs, and check out  the  elm-pages package documentation. If you make a shiny new v2 site, submit it to  the showcase, I&#39;d love to see what you build!", "posttime": "2021-08-05 20:44:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "elm", "title": "Elm-Pages 2.0", "title_en": "Elm-Pages 2.0", "transed": 1, "url": "https://elm-pages.com/blog/introducing-v2", "via": "", "real_tags": ["elm"]}, {"category": "", "categoryclass": "", "imagename": "72f3ab5f2275a52e8e6e8ec90026b16f.jpg", "infoid": 1071303, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Winterfell \u662f\u7528\u4e8e\u5b89\u5168\u548c\u9690\u79c1\u5e94\u7528\u7a0b\u5e8f\u7684 STARK \u7684\u6613\u4e8e\u4f7f\u7528\u7684\u5f00\u6e90\u5b9e\u73b0\u3002 \u201c\u4efb\u4f55\u8db3\u591f\u5148\u8fdb\u7684\u6280\u672f\u90fd\u4e0e\u9b54\u6cd5\u65e0\u5f02\u3002\u201d \u2014 \u514b\u62c9\u514b\u7b2c\u4e09\u5b9a\u5f8b \u5982\u679c\u666e\u901a\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4ece\u901a\u5e38\u9700\u8981\u6df1\u5165\u4e86\u89e3\u5bc6\u7801\u5b66\u624d\u80fd\u5b9e\u65bd\u7684\u8ba1\u7b97\u5b8c\u6574\u6027 (CI) \u8bc1\u660e\u4e2d\u53d7\u76ca\uff0c\u4f1a\u600e\u6837\uff1f CI \u8bc1\u660e\uff0c\u5176\u4e2d\u96f6\u77e5\u8bc6\u8bc1\u660e (ZKP) \u662f\u4e00\u4e2a\u5b50\u96c6\uff0c\u662f\u4e00\u79cd\u5bc6\u7801\u6280\u672f\uff0c\u53ef\u4ee5\u8ba9\u60a8\u5b8c\u6210\u770b\u4f3c\u4e0d\u53ef\u80fd\u7684\u4e8b\u60c5\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u8ba1\u7b97\u5e76\u83b7\u5f97\u4e00\u4e9b\u7ed3\u679c\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 CI \u8bc1\u660e\u8ba9\u4efb\u4f55\u4eba\u76f8\u4fe1\u60a8\u6b63\u786e\u5730\u8fdb\u884c\u4e86\u8ba1\u7b97\uff0c\u800c\u65e0\u9700\u4ed6\u4eec\u81ea\u5df1\u91cd\u65b0\u8fd0\u884c\u8ba1\u7b97\u3002\u4ed6\u4eec\u53ef\u4ee5\u5728\u77ed\u77ed\u51e0\u6beb\u79d2\u5185\u9a8c\u8bc1\u8fd9\u79cd\u6b63\u786e\u6027\uff0c\u65e0\u8bba\u539f\u59cb\u8ba1\u7b97\u6709\u591a\u590d\u6742\u6216\u8fd0\u884c\u65f6\u95f4\u6709\u591a\u957f\u3002\u4e3a\u4e86\u5c06 CI \u8bc1\u660e\u7684\u529b\u91cf\u5e26\u7ed9\u5927\u4f17\uff0c\u6211\u4eec\u5f00\u53d1\u4e86 Winterfell\uff0c\u8fd9\u662f\u4e00\u4e2a\u901a\u7528\u7684 STARK\uff08\u53ef\u6269\u5c55\u7684\u900f\u660e\u77e5\u8bc6\u8bba\u8bc1\uff09\u8bc1\u660e\u8005\u548c\u9a8c\u8bc1\u8005\u3002\u6211\u4eec\u5f88\u9ad8\u5174\u5c06\u5e93\u7684 v0.1 \u7248\u672c\u53d1\u5e03\u5230 crates.io\u3002\u8fd9\u4e9b CI \u8bc1\u660e\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u662f\u80fd\u591f\u9690\u85cf\u7528\u4e8e\u8fd0\u884c\u8ba1\u7b97\u7684\u90e8\u5206\uff08\u6216\u5168\u90e8\uff09\u8f93\u5165\u3002\u8fd9\u5c31\u662f\u96f6\u77e5\u8bc6\u65b9\u9762\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u8bc1\u660e\u4e00\u4e2a\u6570\u5b57\u5728\u7ed9\u5b9a\u7684\u8303\u56f4\u5185\uff0c\u800c\u65e0\u9700\u900f\u9732\u8be5\u6570\u5b57\u7684\u786e\u5207\u503c\uff08\u8fd9\u4e9b\u7c7b\u578b\u7684\u8bc1\u660e\u901a\u5e38\u79f0\u4e3a\u8303\u56f4\u8bc1\u660e\uff09\u3002\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u505a\u4e00\u4e9b\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\u6bd4\u8f83\u4e24\u4e2a\u6570\u5b57\u5e8f\u5217\uff0c\u4e00\u4e2a\u662f\u516c\u5171\u7684\uff0c\u4e00\u4e2a\u662f\u79c1\u6709\u7684\uff08\u53ea\u6709\u60a8\u81ea\u5df1\u77e5\u9053\uff09\uff0c\u7136\u540e\u5411\u4efb\u4f55\u4eba\u6beb\u65e0\u7591\u95ee\u5730\u8bc1\u660e\u5b83\u4eec\u4e4b\u95f4\u662f\u5426\u5339\u914d\u3002 ZKP \u80cc\u540e\u7684\u4e00\u822c\u601d\u60f3\u65e9\u5728 1980 \u5e74\u4ee3\u5c31\u5df2\u53d1\u5c55\u8d77\u6765\uff0c\u4f46\u6700\u8fd1\u5bf9\u8be5\u5bc6\u7801\u5b66\u9886\u57df\u7684\u5174\u8da3\u6fc0\u589e\uff0c\u90e8\u5206\u539f\u56e0\u662f\u533a\u5757\u94fe\u9886\u57df\u7684\u65b0\u5174\u5e94\u7528\u3002\u5728\u8fc7\u53bb\u51e0\u5e74\u4e2d\uff0c\u51fa\u73b0\u4e86\u5341\u591a\u79cd\u65b0\u7684\u8bc1\u660e\u7cfb\u7edf\u3002\u5176\u4e2d\u4e00\u4e9b\u751a\u81f3\u5df2\u90e8\u7f72\u5728\u751f\u4ea7\u4e2d\uff0c\u6570\u767e\u4ebf\u7f8e\u5143\u53d6\u51b3\u4e8e\u5176\u5b89\u5168\u5c5e\u6027\u3002\u7136\u800c\uff0cZKP \u8fdc\u975e\u4e3b\u6d41\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\uff1a \u76f4\u5230\u6700\u8fd1\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u90e8\u7f72 ZKP \u8fd8\u9700\u8981\u5177\u6709\u591a\u5e74\u7ecf\u9a8c\u7684\u4e13\u5bb6\u5bc6\u7801\u5b66\u5bb6\u3002\u73b0\u5728\u7684\u60c5\u51b5\u6709\u6240\u597d\u8f6c\uff0c\u56e0\u4e3a\u6709\u5927\u91cf\u76f8\u5bf9\u5bb9\u6613\u83b7\u5f97\u7684\u6750\u6599\u548c\u66f4\u591a\u7684\u9879\u76ee\u8bd5\u56fe\u8ba9\u666e\u901a\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528 ZKP\u3002\u4f46\u5373\u4f7f\u662f\u73b0\u5728\uff0c\u5373\u4f7f\u5bf9\u4e8e\u7ecf\u9a8c\u4e30\u5bcc\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u6765\u8bf4\uff0c\u7406\u89e3\u4e0d\u540c\u7684\u8bc1\u660e\u7cfb\u7edf\u4ee5\u53ca\u4e0e\u4e4b\u76f8\u5173\u7684\u6743\u8861\u4e5f\u9700\u8981\u6df1\u539a\u7684\u4e13\u4e1a\u77e5\u8bc6\u548c/\u6216\u9661\u5ced\u7684\u5b66\u4e60\u66f2\u7ebf\u3002\n\u867d\u7136\u9a8c\u8bc1 ZK \u8bc1\u660e\u975e\u5e38\u5feb\u5e76\u4e14\u9700\u8981\u5f88\u5c11\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u4f46\u751f\u6210\u8bc1\u660e\u662f\u4e00\u4e2a\u8ba1\u7b97\u5bc6\u96c6\u578b\u8fc7\u7a0b\u3002\u5373\u4f7f\u662f\u76f8\u5bf9\u7b80\u5355\u7684\u8ba1\u7b97\uff0c\u4e5f\u53ef\u80fd\u9700\u8981\u51e0\u79d2\u949f\u751a\u81f3\u51e0\u5206\u949f\uff08\u6216\u8bb8\u591a CPU \u5185\u6838\uff09\u6765\u751f\u6210\u8bc1\u660e\u3002\u53ea\u6709\u5728\u5bc6\u7801\u5b66\u548c\u5b9e\u73b0\u6539\u8fdb\u65b9\u9762\u76f8\u5bf9\u8f83\u65b0\u7684\u8fdb\u5c55\u624d\u80fd\u4f7f\u5927\u90e8\u5206\u8ba1\u7b97\u8fbe\u5230 ZKP \u7684\u5b9e\u9645\u53ef\u884c\u6027\u3002\u5e76\u4e14\u6709\u5f88\u591a\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u6765\u6269\u5c55\u8bc1\u660e\u751f\u6210\u5b9e\u7528\u7684\u8ba1\u7b97\u96c6\u3002\u6211\u4eec\u5f00\u53d1\u4e86 Winterfell \u6765\u5f25\u5408\u8fd9\u4e9b\u5dee\u8ddd\uff0c\u5e76\u4f7f\u5e38\u89c4\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528 ZKP\u3002 Winterfell \u662f Novi Research \u7528 Rust \u7f16\u5199\u7684\u901a\u7528 STARK \u8bc1\u660e\u5668\u548c\u9a8c\u8bc1\u5668\u3002\u901a\u7528\u610f\u5473\u7740 Winterfell \u53ef\u4ee5\u4e3a\u4efb\u4f55\u8ba1\u7b97\u751f\u6210 CI \u8bc1\u660e\u3002\u57fa\u672c\u4e0a\uff0c\u5bf9\u4e8e\u4efb\u4f55\u53ef\u4ee5\u7528\u56fe\u7075\u5b8c\u5907\u8bed\u8a00\u63cf\u8ff0\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u4f7f\u7528 Winterfell \u751f\u6210 CI \u8bc1\u660e\uff08\u5c3d\u7ba1\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u7a0b\u5e8f\u6765\u8bf4\u6bd4\u5176\u4ed6\u7a0b\u5e8f\u8981\u7b80\u5355\u5f97\u591a\uff09\u3002 Winterfell \u4f7f\u7528 STARKs\uff0c\u8fd9\u662f\u4e00\u79cd\u7531 Eli Ben-Sasson\u3001Michael Riabzev \u7b49\u4eba\u5f00\u53d1\u7684\u8ba1\u7b97\u8bc1\u660e\u65b9\u6848\u3002\u4e0e\u8bb8\u591a\u5176\u4ed6 CI \u8bc1\u660e\u7cfb\u7edf\u76f8\u6bd4\uff0cSTARKs \u5177\u6709\u8bb8\u591a\u5438\u5f15\u4eba\u7684\u7279\u6027\uff0c\u5305\u62ec\uff1a STARKs \u4f9d\u8d56\u5f88\u5c11\u7684\u5bc6\u7801\u5047\u8bbe\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u8ba9 STARK \u5de5\u4f5c\u7684\u552f\u4e00\u5bc6\u7801\u539f\u8bed\u662f\u6297\u78b0\u649e\u54c8\u5e0c\u51fd\u6570\uff08\u4f8b\u5982\uff0cSHA256\uff09\u3002\u8fd9\u4e5f\u4f7f STARK \u80fd\u591f\u62b5\u5fa1\u6765\u81ea\u4f7f\u7528\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u5bf9\u624b\u7684\u6f5c\u5728\u653b\u51fb\u3002\u4e0e\u8bb8\u591a\u5176\u4ed6\u8bc1\u660e\u7cfb\u7edf\u4e0d\u540c\uff0cSTARK \u662f\u5b8c\u5168\u900f\u660e\u7684\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u9700\u8981\u8fd0\u884c\u590d\u6742\u7684\u53ef\u4fe1\u8bbe\u7f6e\u4eea\u5f0f\u6765\u5f00\u59cb\u4f7f\u7528 STARK\u3002\u53ef\u4fe1\u8bbe\u7f6e\u662f\u5176\u4ed6\u96f6\u77e5\u8bc6\u534f\u8bae\u4e2d\u7684\u4e00\u4e2a\u6f5c\u5728\u5b89\u5168\u5f31\u70b9\uff0c\u56e0\u4e3a\u53d7\u635f\u7684\u53ef\u4fe1\u8bbe\u7f6e\u5141\u8bb8\u653b\u51fb\u8005\u751f\u6210\u4f2a\u9020\u7684 CI \u8bc1\u660e\u3002 STARK \u5bf9\u6b64\u514d\u75ab\u3002\u4e0e\u5176\u4ed6\u7cfb\u7edf\u76f8\u6bd4\uff0c\u5f53\u6211\u4eec\u5904\u7406\u7edf\u4e00\u8ba1\u7b97\u6216\u5177\u6709\u89c4\u5219\u7ed3\u6784\u7684\u8ba1\u7b97\u65f6\uff0cSTARK \u8bc1\u660e\u7684\u751f\u6210\u901f\u5ea6\u975e\u5e38\u5feb\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4eba\u4eec\u7f16\u5199\u7684\u7edd\u5927\u591a\u6570\u7a0b\u5e8f\u786e\u5b9e\u5177\u6709\u8fd9\u6837\u7684\u89c4\u5219\u7ed3\u6784\u3002\u6b64\u5916\uff0c\u51e0\u4e4e STARK \u8bc1\u660e\u751f\u6210\u8fc7\u7a0b\u7684\u6bcf\u4e00\u6b65\u90fd\u662f\u5927\u89c4\u6a21\u5e76\u884c\u5316\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u5206\u5e03\u5230\u8d8a\u6765\u8d8a\u591a\u7684 CPU \u5185\u6838\u6765\u9891\u7e41\u5730\u52a0\u901f\u8bc1\u660e\u751f\u6210\u3002\n\u4e0a\u9762\u5217\u51fa\u7684\u5404\u4e2a\u5c5e\u6027\u90fd\u4e0d\u662f STARK \u72ec\u6709\u7684\u3002\u7136\u800c\uff0c\u6ca1\u6709\u5176\u4ed6\u8bc1\u660e\u7cfb\u7edf\u80fd\u50cf STARK \u90a3\u6837\u7ed3\u5408\u7cbe\u76ca\u5bc6\u7801\u5b66\u3001\u900f\u660e\u5ea6\u548c\u6027\u80fd\u3002 Winterfell \u5145\u5206\u5229\u7528\u4e86\u8fd9\u4e9b\u597d\u5904\uff0c\u540c\u65f6\u62bd\u8c61\u4e86\u5927\u90e8\u5206\u590d\u6742\u6027\u3002\u4f8b\u5982\uff0c\u8bc1\u660e\u751f\u6210\u53ef\u4ee5\u5206\u5e03\u5728\u591a\u4e2a CPU \u5185\u6838\u4e0a\uff0c\u4ee5\u663e\u7740\u51cf\u5c11\u8bc1\u660e\u751f\u6210\u65f6\u95f4\uff08\u8bf7\u53c2\u9605\u6b64\u5904\u7684\u57fa\u51c6\u6d4b\u8bd5\uff09\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8ba1\u5212\u5728\u591a\u53f0\u673a\u5668\u4e0a\u542f\u7528\u5b8c\u5168\u5206\u5e03\u5f0f\u7684\u8bc1\u660e\u751f\u6210\uff0c\u5e76\u4e14\u5df2\u7ecf\u5f00\u59cb\u671d\u7740\u8fd9\u4e2a\u65b9\u5411\u52aa\u529b\u3002\u9664\u4e86\u9ad8\u6027\u80fd\u4e4b\u5916\uff0cWinterfell \u8fd8\u5177\u6709\u9ad8\u5ea6\u7684\u53ef\u914d\u7f6e\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u53ef\u4ee5\u52a8\u6001\u8c03\u6574 STARK \u534f\u8bae\u7684\u51e0\u4e4e\u6240\u6709\u53c2\u6570\uff0c\u4ee5\u5b9e\u73b0\u7279\u5b9a\u7684\u6027\u80fd\u548c\u5b89\u5168\u76ee\u6807\u3002\u901a\u8fc7\u4f9d\u8d56 Rust \u7684\u96f6\u6210\u672c\u62bd\u8c61\uff0c\u6211\u4eec\u80fd\u591f\u5728\u4e0d\u727a\u7272\u6027\u80fd\u6216\u4ee3\u7801\u6e05\u6670\u5ea6\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5982\u6b64\u9ad8\u7684\u53ef\u914d\u7f6e\u6027\u3002\u6700\u540e\uff0c\u4e5f\u8bb8\u662f\u6700\u91cd\u8981\u7684\uff0c\u60a8\u65e0\u9700\u6210\u4e3a\u5bc6\u7801\u5b66\u5bb6\u5373\u53ef\u4f7f\u7528 Winterfell\u3002\u5982\u524d\u6240\u8ff0\uff0cWinterfell \u62bd\u8c61\u4e86 STARK \u534f\u8bae\u7684\u5927\u90e8\u5206\u590d\u6742\u6027\u3002\u7528\u6237\u552f\u4e00\u8d1f\u8d23\u7684\u662f\u4ee5 STARK \u8bc1\u660e\u8005/\u9a8c\u8bc1\u8005\u53ef\u4ee5\u7406\u89e3\u7684\u683c\u5f0f\u63cf\u8ff0\u4ed6\u4eec\u7684\u8ba1\u7b97\u3002\u8fd9\u79cd\u683c\u5f0f\u79f0\u4e3a\u4ee3\u6570\u4e2d\u95f4\u8868\u793a (AIR)\uff0c\u5c06\u7a0b\u5e8f\u8f6c\u6362\u4e3a AIR \u7684\u6b65\u9aa4\u79f0\u4e3a\u7b97\u672f\u5316\u3002 Winterfell \u516c\u5f00\u4e86\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u63a5\u53e3\u6765\u63cf\u8ff0\u4efb\u4f55\u8ba1\u7b97\u7684 AIR\u3002\u7136\u800c\uff0c\u7b97\u672f\u5316\u7684\u6982\u5ff5\u5e76\u4e0d\u662f\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u6240\u719f\u6089\u7684\uff0c\u6240\u4ee5\u4f1a\u6709\u4e00\u4e2a\u5b66\u4e60\u66f2\u7ebf\u3002\u4e3a\u4e86\u5e2e\u52a9\u60a8\u5165\u95e8\uff0c\u6211\u4eec\u6574\u7406\u4e86\u4e00\u4e2a\u5173\u4e8e\u5982\u4f55\u4e3a\u975e\u5e38\u7b80\u5355\u7684\u8ba1\u7b97\u5b9a\u4e49 AIR \u7684\u7aef\u5230\u7aef\u6559\u7a0b\u3002\u6211\u4eec\u8fd8\u5728\u793a\u4f8b crate \u4e2d\u63d0\u4f9b\u4e86\u66f4\u6709\u8da3\u7684\u8ba1\u7b97\u793a\u4f8b\uff0c\u4ece\u7b80\u5355\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u5230\u590d\u6742\u7684\u57fa\u4e8e\u54c8\u5e0c\u7684\u7b7e\u540d\u805a\u5408\u3002\u5982\u679c\u60a8\u60f3\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u7406\u8bba\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u9605\u8bfb StarkWare \u7684\u4e24\u7bc7\u4f18\u79c0\u535a\u5ba2\u6587\u7ae0\uff1aArithmetization I \u548c Arithmetization II\u3002\u4e00\u65e6\u60a8\u5bf9\u7f16\u5199 AIR \u611f\u5230\u6ee1\u610f\uff0c\u4f7f\u7528 Winterfell \u751f\u6210 STARK \u8bc1\u660e\u5c31\u53d8\u5f97\u76f8\u5bf9\u5bb9\u6613\u4e86\u3002\u4f8b\u5982\uff0c\u7528\u4e8e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684 AIR \u9700\u8981\u4e0d\u5230 100 \u884c\u4ee3\u7801\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5927\u7ea6 15 \u5206\u949f\u5185\u5b8c\u6210\u3002\u5373\u4f7f\u5bf9\u4e8e\u4e0a\u9762\u63d0\u5230\u7684\u57fa\u4e8e\u54c8\u5e0c\u7684\u7b7e\u540d\u805a\u5408\u7684\u76f8\u5bf9\u590d\u6742\u7684\u793a\u4f8b\uff0cAIR \u4e5f\u7528\u5927\u7ea6 600 \u884c\u4ee3\u7801\u8fdb\u884c\u4e86\u63cf\u8ff0\uff08\u5c3d\u7ba1\u5b83\u786e\u5b9e\u9700\u8981\u51e0\u5929\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\uff09\u3002\u8fd8\u6709\u4e00\u70b9\u503c\u5f97\u4e00\u63d0\uff1a\u6211\u4eec\u5c06 Winterfell \u7f16\u5199\u4e3a\u4e00\u7ec4\u6a21\u5757\u5316\u7684 crate\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5c06\u5728\u4eca\u5929\u53d1\u5e03\u5230 Crates.io\u3002\u867d\u7136\u6211\u4eec\u4f7f\u7528\u8fd9\u4e9b crate \u6765\u6784\u5efa STARK \u8bc1\u660e\u7cfb\u7edf\uff0c\u4f46\u5176\u4e2d\u8bb8\u591a\u90fd\u8db3\u591f\u901a\u7528\uff0c\u53ef\u4ee5\u7528\u4f5c\u5176\u4ed6 CI \u8bc1\u660e\u7cfb\u7edf\u7684\u6784\u5efa\u5757\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4f4e\u5ea6\u6d4b\u8bd5\uff0c\u6211\u4eec\u4f7f\u7528\u5728 Winter-fri crate \u4e2d\u5b9e\u73b0\u7684 FRI \u534f\u8bae\uff0c\u8be5\u534f\u8bae\u4e5f\u7528\u4f5c\u5176\u4ed6\u51e0\u4e2a\u8bc1\u660e\u7cfb\u7edf\uff08\u4f8b\u5982 Fractal \u548c Aurora\uff09\u7684\u6784\u5efa\u5757\uff0c\u65e8\u5728\u900f\u660e\u548c\u540e\u91cf\u5b50\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684\u5de5\u4f5c\u5c06\u5e2e\u52a9\u8fd9\u4e9b\u534f\u8bae\u7684\u5b9e\u65bd\u8005\u66f4\u5feb\u3001\u66f4\u6709\u6548\u5730\u5b8c\u6210\u4ed6\u4eec\u7684\u5de5\u4f5c\u3002\nZKP \u7684\u6700\u65b0\u8fdb\u5c55\u662f\u7531\u533a\u5757\u94fe\u7a7a\u95f4\u4e2d\u7684\u7d27\u6025\u7528\u4f8b\u9a71\u52a8\u7684\u3002\u5177\u4f53\u6765\u8bf4\uff0cZKP \u4e3a\u533a\u5757\u94fe\u6700\u7d27\u8feb\u7684\u4e24\u4e2a\u6311\u6218\u63d0\u4f9b\u4e86\u6709\u5438\u5f15\u529b\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u9690\u79c1\u548c\u53ef\u6269\u5c55\u6027\u3002\u7136\u800c\uff0cZKP \u5728\u533a\u5757\u94fe\u7a7a\u95f4\u4e4b\u5916\u4e5f\u6709\u8bb8\u591a\u6f5c\u5728\u7684\u5e94\u7528\u3002\u867d\u7136\u5728\u5927\u89c4\u6a21\u8ba1\u7b97\u5b8c\u6574\u6027\u8bc1\u660e\u88ab\u8ba4\u4e3a\u5177\u6709\u5b9e\u7528\u6027\u4e4b\u524d\u4ecd\u6709\u4e00\u4e9b\u6280\u672f\u6311\u6218\u9700\u8981\u514b\u670d\uff0c\u4f46\u6211\u4eec\u76f8\u4fe1 Winterfell \u4ee3\u8868\u4e86\u5c06\u5b66\u672f\u7814\u7a76\u4e2d\u7ecf\u8fc7\u5145\u5206\u7814\u7a76\u7684\u4e3b\u9898\u5e26\u5165\u5b9e\u9645\u90e8\u7f72\u7684\u91cd\u8981\u57ab\u811a\u77f3\u3002\u6211\u4eec\u5e0c\u671b\u5b89\u5168\u548c\u9690\u79c1\u793e\u533a\u4e5f\u80fd\u4ece\u6613\u4e8e\u4f7f\u7528\u7684 STARK \u5f00\u6e90\u5b9e\u73b0\u4e2d\u53d7\u76ca\u3002\u8bf7\u67e5\u770b Winterfell \u5b58\u50a8\u5e93\uff0c\u5e76\u968f\u65f6\u6253\u5f00\u95ee\u9898\u4ee5\u4f9b\u8bc4\u8bba\u5e76\u7559\u4e0b\u53cd\u9988\uff01", "note_en": "Winterfell is an easy to use open source implementation of STARKs for security and privacy applications.\n \u201cAny sufficiently advanced technology is indistinguishable from magic.\u201d \u2014Clarke\u2019s Third Law\n What if the average developer could benefit from proofs of computational integrity (CI) that would normally require an in-depth knowledge of cryptography to implement?\n CI proofs, of which zero-knowledge proofs (ZKPs) are a subset, are a cryptographic technology that let you do seemingly impossible things. For example, you can run a computation and get some result. You can then use a CI proof to convince anyone that you did the computation correctly without their having to rerun the computation themselves.  And they can verify this correctness in just a few milliseconds, regardless of how complex or long-running the original computation was.  To bring the power of CI proofs to the masses, we\u2019ve developed Winterfell, a general-purpose STARK (Scalable Transparent Arguments of Knowledge) prover and verifier. We are happy to be publishing the v0.1 version of the library to crates.io.\n  Another important property of these CI proofs is the ability to hide some (or all) of the inputs that were used to run the computation. This is the zero-knowledge aspect. For example, you could prove that a number is in a given range without revealing the exact value of the number (these types of proofs are usually called range proofs). Or, you could do something as complex as comparing two number sequences, one public and one private (known only to yourself), and prove to anyone beyond a doubt that there is or isn\u2019t a match between them.\n  The general ideas behind ZKPs were developed as early as the 1980s, but interest in this area of cryptography has   exploded  recently, driven in part by emergent applications in the blockchain space. In the last few years, over a dozen new proving systems have appeared. Some of them have even been deployed in production where tens of billions of dollars depend on their security properties. However, ZKPs are far from mainstream, primarily for two reasons:\n Until recently, deploying ZKPs in applications required expert cryptographers with years of experience. The situation is somewhat better now, as there are plenty of relatively accessible materials available and more projects that try to make ZKPs accessible to the average developer. But even now, making sense of different proving systems and the trade-offs associated with them requires deep expertise and/or a steep learning curve, even for experienced software engineers.\n While verifying a ZK proof is extremely fast and requires very few compute resources, generating a proof is a computationally intensive process. It may take seconds or even minutes (or many CPU cores) to generate proofs for even relatively simple computations. Only relatively recent advances in cryptography and implementation improvements have brought a large segment of computations to within practical feasibility for ZKPs. And there is a lot of ongoing work to expand the set of computations for which proof generation is practical.\n We developed Winterfell to bridge these gaps and to bring ZKPs within reach of regular developers.\n  Winterfell is a general purpose STARK prover and verifier written in   Rust  at   Novi Research .   General purpose  means that Winterfell can generate CI proofs for any computation. Basically, for any program that can be described with a Turing-complete language, we can generate a CI proof using Winterfell (though this would be much more straightforward for some programs than for others).\n Winterfell uses STARKs, a proof-of-computation scheme developed by Eli Ben-Sasson, Michael Riabzev, et al. In comparison with many other CI proving systems, STARKs have a number of attractive properties, including:\n STARKs rely on very few cryptographic assumptions. In fact, the only cryptographic primitive we need for STARKs to work is a collision resistant hash function (e.g., SHA256). This also makes STARKs resistant to potential attacks from adversaries with quantum computers.\n Unlike many other proving systems, STARKs are fully transparent. This means we don\u2019t need to run complicated trusted setup ceremonies to start using STARKs. Trusted setups are a potential security weakness in other zero knowledge protocols, because a compromised trusted setup allows attackers to generate fake CI proofs. STARKs are immune to this.\n In comparison with other systems, STARK proof generation is extremely fast when we deal with uniform computations, or computations with regular structures. Fortunately, the vast majority of programs people write do possess such regular structures. Moreover, pretty much every single step of the STARK proof generation process is massively parallelizable. Thus, we can frequently speed up proof generation by distributing it across more and more CPU cores.\n None of the individual properties listed above are unique to STARKs. However, no other proving system combines lean cryptography, transparency, and performance to the extent STARKs do. Winterfell takes full advantage of these benefits while abstracting away most of the complexity. For example, proof generation can be distributed across multiple CPU cores to dramatically reduce proof generation time (see our benchmarks   here ). Moreover, we have plans to enable fully distributed proof generation across multiple machines and have already started work in this direction.\n In addition to being performant, Winterfell is highly configurable. That is, you can dynamically tune almost all parameters of the STARK protocol to attain specific performance and security targets. We are able to achieve such high configurability without sacrificing performance or code clarity by relying on Rust\u2019s zero-cost abstractions.\n Last, and perhaps most important, you don\u2019t need to be a cryptographer to use Winterfell. As mentioned previously, Winterfell abstracts away most of the complexity of the STARK protocol. The only thing the user is responsible for is describing their computation in a format that the STARK prover/verifier can understand. This format is called algebraic intermediate representation (AIR), and the step of translating a program into AIR is called arithmetization.\n   Winterfell exposes a relatively simple interface for describing AIR for any computation. However, the concept of arithmetization is not something most developers are familiar with, so there is going to be a learning curve.\n To help you get started, we\u2019ve put together an end-to-end   tutorial  on how to define AIR for a very simple computation. We also have examples of more interesting computations in the   examples crate , ranging from something as simple as a Fibonacci sequence to something as sophisticated as aggregation of hash-based signatures. And if you would like to get a little bit deeper into theory, we recommend reading two excellent blog posts from StarkWare:   Arithmetization I  and   Arithmetization II .\n Once you are comfortable with writing AIRs, using Winterfell to generate STARK proofs becomes relatively easy. For example, AIR for a Fibonacci sequence requires less than 100 lines of code and can be put together in about 15 minutes. Even for the relatively complicated example of hash-based signature aggregation mentioned above, the AIR is described in about 600 lines of code (though it did take several days to put together).\n Another point worth mentioning: We wrote Winterfell as a set of modular crates, all of which are being published to  Crates.io today as well. While we use these crates to build a STARK proving system, many of them are general enough to be used as building blocks in other CI proving systems. For example, for low-degree testing, we use the FRI protocol implemented in the   winter-fri  crate, which is also used as a building block for several other proof systems (e.g.,   Fractal  and   Aurora ) that aim to be transparent and post-quantum. Thus, we hope that our work will help implementers of these protocols get their job done more quickly and efficiently.\n  Recent advancements in ZKPs are driven by emergent use cases in the blockchain space. Specifically, ZKPs offer attractive solutions to perhaps two of the most pressing blockchain challenges: privacy and scalability. However, ZKPs have numerous potential applications outside of the blockchain space as well.\n While there still remain some technical challenges to overcome before proofs of computational integrity can be considered practical at a large scale, we believe that Winterfell represents an important stepping stone for bringing a well-studied subject in academic research into practical deployments. And we hope that the security and privacy community will also benefit from an easy to use open source implementation of STARKs.\n Please check out the   Winterfell repository , and feel free to open issues for comment and leave feedback!", "posttime": "2021-08-05 20:44:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,\u8bc1\u660e,sourcing", "title": "\u5f00\u6e90 Winterfell\uff1a\u4e00\u4e2a STARK \u7684\u8bc1\u660e\u8005\u548c\u9a8c\u8bc1\u8005", "title_en": "Open sourcing Winterfell: A STARK prover and verifier", "transed": 1, "url": "https://engineering.fb.com/2021/08/04/open-source/winterfell/", "via": "", "real_tags": ["\u5f00\u6e90", "\u8bc1\u660e", "sourcing"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071302, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8282\u70b9\uff1a\u8fd0\u884c\u505c\u6b62\u6dfb\u52a0rm\u94fe\u63a5\uff1a\u6dfb\u52a0rm\u653b\u51fb\uff1a\u5206\u88c2\u8fd0\u884c\uff0c\u529f\u7387\uff08&gt;1/2\uff09\u8fd0\u884c", "note_en": "nodes:  run  stop  add  rm  links:  add  rm\n    attacks:  split  run,  power(&gt;1/2)  run", "posttime": "2021-08-05 20:43:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53ef\u89c6\u5316,\u533a\u5757\u94fe,\u5171\u8bc6,consensus,\u8fd0\u884c", "title": "\u5206\u5e03\u5f0f\u5171\u8bc6\uff08\u533a\u5757\u94fe\uff09\u6a21\u62df\u548c\u53ef\u89c6\u5316", "title_en": "Distributed consensus (blockchain) simulation and visualization", "transed": 1, "url": "https://web3scout.github.io/forcecons-sim/", "via": "", "real_tags": ["\u53ef\u89c6\u5316", "\u533a\u5757\u94fe", "\u5171\u8bc6", "consensus", "\u8fd0\u884c"]}, {"category": "", "categoryclass": "", "imagename": "51d8251bab01d12ff57391b148d447aa.jpg", "infoid": 1071301, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u97f3\u9891\u6307\u7eb9\u8bc6\u522b\u6700\u5e38\u89c1\u7684\u7528\u4f8b\u4e4b\u4e00\u662f\u7535\u89c6\u5e7f\u64ad\u76d1\u63a7\u3002\u901a\u8fc7\u5206\u6790\u5176\u97f3\u9891\u6d41\u6765\u751f\u6210\u6709\u5173\u64ad\u653e\u7684\u7535\u89c6\u5185\u5bb9\u7684\u8be6\u7ec6\u62a5\u544a\u3002\u5982\u679c\u60a8\u60f3\u83b7\u5f97\u6709\u5173\u7279\u5b9a\u5e7f\u544a\u53d1\u751f\u7684\u51c6\u786e\u7edf\u8ba1\u4fe1\u606f\uff0c\u5e94\u7528\u97f3\u9891\u6307\u7eb9\u8bc6\u522b\u53ef\u80fd\u770b\u8d77\u6765\u8db3\u591f\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u6709\u6548\u3002\u4f46\u6709\u65f6\uff0c\u5e7f\u544a\u5546\u4f7f\u7528\u76f8\u540c\u7684\u97f3\u9891\u6d41\u4e0e\u4fee\u6539\u540e\u7684\u89c6\u89c9\u5185\u5bb9\u914d\u5bf9\u3002\u5728\u6c7d\u8f66\u548c\u533b\u7597\u4fdd\u5065\u884c\u4e1a\uff0c\u5b83\u5b9e\u9645\u4e0a\u5f88\u666e\u904d\u3002\u89c6\u89c9\u5185\u5bb9\u7684\u53d8\u5316\u53ef\u80fd\u5f88\u5c0f\uff0c\u6709\u65f6\u5bf9\u4e8e\u666e\u901a\u89c2\u4f17\u6765\u8bf4\u751a\u81f3\u662f\u5bdf\u89c9\u4e0d\u5230\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u60f3\u63d0\u53d6\u6709\u5173\u5e7f\u544a\u5546\u3001\u516c\u53f8\u6216\u7ade\u4e89\u5bf9\u624b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5b83\u4f1a\u4ea7\u751f\u5f88\u5927\u7684\u4e0d\u540c\u3002\u8ba9\u6211\u4eec\u4ece\u51e0\u4e2a\u4f8b\u5b50\u5f00\u59cb\u6765\u6982\u62ec\u8fd9\u4e2a\u95ee\u9898\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4e30\u7530\u5e7f\u544a\u7684\u4f8b\u5b50\uff0c\u5b83\u4f7f\u7528\u4e0e\u4e0d\u540c\u89c6\u9891\u914d\u5bf9\u7684\u76f8\u540c\u97f3\u9891\u6d41\u3002\u5f53\u5546\u4e1a\u62a5\u4ef7\u51fa\u73b0\u5728\u5c4f\u5e55\u4e0a\u65f6\uff0c\u5dee\u5f02\u5f00\u59cb\u4e8e\u7b2c 10 \u79d2\u3002\u5b83\u5728\u5c4f\u5e55\u4e0a\u505c\u7559 10 \u79d2\u949f\uff0c\u5411\u89c2\u4f17\u8bb2\u8ff0\u3002\u7531\u4e8e\u5e7f\u544a\u901a\u5e38\u9605\u8bfb\u901f\u5ea6\u5feb\u4e14\u8bed\u8c03\u76f8\u540c\uff0c\u56e0\u6b64\u97f3\u9891\u6307\u7eb9\u7b97\u6cd5\u53ef\u80fd\u65e0\u6cd5\u533a\u5206\u5b83\u4eec\u3002\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\u7684\u5dee\u5f02\u5f88\u5bb9\u6613\u89c2\u5bdf\u5230\u3002\u4f46\u89c6\u89c9\u53d8\u5316\u53ef\u80fd\u66f4\u4e0d\u660e\u663e\u3002\u6309\u96be\u5ea6\u9012\u589e\u7684\u987a\u5e8f\u67e5\u770b\u66f4\u591a\u793a\u4f8b\u4ee5\u68c0\u6d4b\u4e0d\u540c\u4e4b\u5904\u3002\u5bf9\u4e8e\u201c\u56fd\u6c11\u201d\u5e7f\u544a\uff0c\u4e0d\u96be\u53d1\u73b0\u5dee\u5f02\u2014\u2014SiriusXM \u6587\u672c\u51fa\u73b0\u5728\u5e95\u90e8\u800c\u4e0d\u662f\u9876\u90e8\u3002 \u201cGrubHub\u201d\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\u2014\u2014\u9001\u8d27\u888b\u5305\u542b\u4e24\u4e2a\u4e0d\u540c\u7684\u6807\u5fd7\u3002\u8fd8\u6709\u4e00\u4e2a\u533a\u522b\u3002\u968f\u610f\u6df1\u5165\u4e86\u89e3\u5e7f\u544a\u4ee5\u8bc6\u522b\u5b83\u3002\n\u4ee5\u4e0b\u4e24\u4e2a\u7565\u6709\u4e0d\u540c\u7684\u793a\u4f8b\u3002\u5c1d\u8bd5\u81ea\u884c\u786e\u5b9a\u4e0d\u5339\u914d\u3002\u62a4\u80a4\u4e73\u6db2\u5e7f\u544a\u5305\u542b\u4e24\u4e2a\u4e0d\u540c\u7684\u74f6\u5b50\uff0c\u66f4\u51c6\u786e\u5730\u8bf4\u662f\u4e0d\u540c\u7684\u6807\u7b7e\u3002\u5728\u201cPrevagen\u201d\u5e7f\u544a\u4e2d\uff0c\u9000\u51fa\u5c4f\u5e55\u4e0a\u7684\u6807\u5fd7\u4e0d\u5339\u914d\u2014\u2014\u53f3\u4e0b\u89d2\u7684\u6c83\u5c14\u739b\u548c GNC\u3002\u6b64\u5916\uff0c\u5bf9\u4e8e\u6c7d\u8f66\u884c\u4e1a\u800c\u8a00\uff0c\u5177\u6709\u4e0d\u540c\u7684\u51fa\u53e3\u5c4f\u5e55\u662f\u5f88\u5e38\u89c1\u7684\u3002\u7531\u4e8e\u5b83\u4eec\u5728\u4e0d\u540c\u5730\u533a\u64ad\u51fa\uff0c\u56e0\u6b64\u5b83\u4eec\u5305\u542b\u7279\u5b9a\u7684\u7ecf\u9500\u5546\u4fe1\u606f\u3002\u4ee5\u4e0b\u662f\u5177\u6709\u516d\u4e2a\u4e0d\u540c\u7ed3\u5c3e\u7684\u540c\u4e00\u5546\u4e1a\u5e7f\u544a\u7684\u793a\u4f8b\u3002\u5982\u679c\u8981\u533a\u5206\u8fd9\u4e9b\u5e7f\u544a\uff0c\u4ec5\u76d1\u63a7\u97f3\u9891\u5185\u5bb9\u662f\u4e0d\u591f\u7684\u3002\u8fd9\u662f\u89c6\u9891\u6307\u7eb9\u8bc6\u522b\u53ef\u4ee5\u5e2e\u52a9\u60a8\u7684\u5730\u65b9\u3002\u6982\u8ff0\u7684\u95ee\u9898\u6709\u51e0\u4e2a\u4e0e\u4e1a\u52a1\u76f8\u5173\u7684\u7ea6\u675f\uff0c\u6211\u4eec\u5728\u5f00\u53d1\u7b97\u6cd5\u65f6\u5fc5\u987b\u8003\u8651\u8fd9\u4e9b\u7ea6\u675f\u3002\u5b9e\u65f6\u6570\u636e\u6e90\u6765\u81ea 1000 \u591a\u4e2a\u7535\u89c6\u53f0\uff0c\u6bcf\u5929\u751f\u6210\u8d85\u8fc7 24,000 \u5c0f\u65f6\u7684\u641c\u7d22\u5185\u5bb9 \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u9996\u5148\uff0c\u89c6\u9891\u6307\u7eb9\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u56fe\u50cf\u641c\u7d22\uff0c\u5176\u4e2d\u56fe\u50cf\u662f\u4ece\u89c6\u9891\u4e2d\u63d0\u53d6\u7684\u5b9e\u9645\u89c6\u9891\u5e27\u6d41\u3002\u89c6\u9891\u7684\u6bcf\u4e00\u79d2\u5305\u542b 30 \u4e2a\u989c\u8272\u5e27\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u6211\u4eec\u8981\u68c0\u7d22\u548c\u6bd4\u8f83\u7684\u53c2\u8003\u70b9\u3002\n\u90a3\u4e9b\u9605\u8bfb\u8fc7 SoundFingerprinting \u7b97\u6cd5\u63cf\u8ff0\u7684\u4eba\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\u4e00\u79cd\u6a21\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e3a\u97f3\u9891\u641c\u7d22\u5f00\u53d1\u7684 SoundFingerprinting \u7b97\u6cd5\u6765\u68c0\u7d22\u89c6\u9891\u5e27\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\u6211\u4eec\u53ef\u4ee5\u3002\u4e13\u4e3a\u9891\u8c31\u56fe\u68c0\u7d22\u8bbe\u8ba1\u7684\u56fe\u50cf\u641c\u7d22\u5bf9\u4e8e\u89c6\u9891\u5e27\u975e\u5e38\u6709\u6548\u3002\u6211\u4eec\u7b97\u6cd5\u7684\u7b2c\u4e00\u6b65\u662f\u964d\u4f4e\u8f93\u5165\u89c6\u9891\u5185\u5bb9\u7684\u7ef4\u5ea6\uff1a\u63d2\u5165\u7684\u5e7f\u544a\u548c\u5b9e\u65f6\u67e5\u8be2\u3002\u5185\u5bb9\u4ee5\u5404\u79cd\u683c\u5f0f\u7f16\u7801\uff0c\u6700\u5e38\u89c1\u7684\u662f 1080p \u9ad8\u6e05\u5bbd\u5c4f\u683c\u5f0f\u3002\u8fd9\u4e2a\u5206\u8fa8\u7387\u5bf9\u4e8e\u591a\u7ef4\u641c\u7d22\u6765\u8bf4\u592a\u5927\u4e86\u30021920\u00d71080 \u7684\u989c\u8272\u5411\u91cf\u5f88\u96be\u641c\u7d22\u3002\u5982\u679c\u5728\u4e00\u7ef4\u6570\u7ec4\u4e2d\u7f16\u7801\uff0c\u5176\u957f\u5ea6\u4e3a \\(1920*1080*3 = 6,220,800\\)\u3002\u76f8\u53cd\uff0c\u73b0\u4ee3\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\u7b97\u6cd5\u4ee5\u9ad8\u8fbe 1,000 \u7ef4\u7684\u5411\u91cf\u4e3a\u57fa\u51c6\u3002\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u6b64\u5206\u8fa8\u7387\u6765\u6b63\u786e\u8bc6\u522b\u5e7f\u544a\u4e2d\u7684\u5dee\u5f02\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u5c06\u5176\u8c03\u6574\u4e3a 128x72 \u50cf\u7d20\u56fe\u50cf\u3002\u5728\u5bf9\u591a\u79cd\u9009\u9879\u8fdb\u884c\u8bd5\u9a8c\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u6b64\u5206\u8fa8\u7387\u662f\u6700\u4f73\u7684\u3002\u4e3a\u4e86\u8ba9\u60a8\u4e86\u89e3\u5b83\u6709\u591a\u5c0f\uff0c\u8bf7\u67e5\u770b\u4ee5 128x72 \u683c\u5f0f\u7f16\u7801\u7684\u89c6\u9891\u3002\u5728\u6b64\u5206\u8fa8\u7387\u4e0b\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u533a\u5206\u89c6\u9891\u4e2d\u7684\u91cd\u8981\u7ec6\u8282\u3002\u76f8\u5173\u4fe1\u606f\u5c06\u88ab\u4fdd\u7559\u3002\u97f3\u9891\u6307\u7eb9\u7b97\u6cd5\u4e2d\u7684\u76f8\u5e94\u6b65\u9aa4\u662f\u4e0b\u91c7\u6837\u3002\u4ee5 44.1KHz \u91c7\u6837\u7684\u9ad8\u5206\u8fa8\u7387\u97f3\u9891\u4fe1\u53f7\u88ab\u4e0b\u91c7\u6837\u5230 5.5KHz\uff0c\u4fdd\u7559\u4e86\u521d\u59cb\u97f3\u9891\u7684\u6700\u5173\u952e\u4f4d\u3002\u60a8\u53ef\u4ee5\u7528\u6765\u9009\u62e9\u8c03\u6574\u5927\u5c0f\u53c2\u6570\u7684\u4e00\u4e2a\u7b80\u5355\u542f\u53d1\u5f0f\u65b9\u6cd5\u662f\u65ad\u8a00\u60a8\u5c1d\u8bd5\u533a\u5206\u7684\u4fe1\u606f\u662f\u5426\u5728\u6b64\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u4e22\u5931\u3002\u65ad\u8a00\u76f8\u5bf9\u7b80\u5355\uff1a\u53ef\u89c6\u5316\u964d\u91c7\u6837\u7684\u6587\u4ef6\uff0c\u5e76\u786e\u4fdd\u60a8\u4ecd\u7136\u53ef\u4ee5\u770b\u5230\uff08\u6216\u5728\u97f3\u9891\u7b97\u6cd5\u7684\u60c5\u51b5\u4e0b\u6536\u542c\uff09\u60a8\u8bd5\u56fe\u4fdd\u7559\u7684\u5185\u5bb9\u3002\u5982\u679c\u60a8\u518d\u4e5f\u770b\u4e0d\u5230\u5b83\uff0c\u90a3\u4e48\u4fe1\u606f\u5f88\u53ef\u80fd\u5df2\u7ecf\u65e0\u6cd5\u633d\u56de\u5730\u4e22\u5931\u4e86\u3002\n\u964d\u4f4e\u7ef4\u5ea6\u7684\u4e0b\u4e00\u6b65\u662f\u5c06\u989c\u8272\u6a21\u5f0f\u7f16\u7801\u5230 [0, 255] \u8303\u56f4\u5185\u3002\u4e0d\u9700\u8981\u4fdd\u7559\u539f\u59cb RGB\uff0c\u56e0\u4e3a\u5355\u8272\u56fe\u50cf\u53ef\u4ee5\u5f88\u597d\u5730\u4fdd\u7559\u539f\u59cb\u56fe\u50cf\u3002\u97f3\u9891\u6307\u7eb9\u7b97\u6cd5\u4e2d\u7684\u76f8\u5e94\u6b65\u9aa4\u662f\u5c06\u539f\u59cb\u97f3\u9891\u8f6c\u6362\u4e3a\u5355\u58f0\u9053\u3002\u5728\u6240\u6709\u8fd9\u4e9b\u8f6c\u6362\u4e4b\u540e\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86 675 \u500d\u7684\u964d\u7ef4\u3002\u6211\u4eec\u7684\u5411\u91cf\u7684\u957f\u5ea6\u73b0\u5728\u662f 9120\u3002\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u7279\u5f81\u662f\u4e00\u4e2a\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u7814\u7a76\u9886\u57df\u3002\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u6211\u4eec\u8bd5\u56fe\u89e3\u51b3\u7684\u95ee\u9898\u6709\u51e0\u4e2a\u4f18\u70b9\uff0c\u4f7f\u5b83\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u89c6\u9891\u4e2d\u7684\u5e27\u5177\u6709\u7a33\u5b9a\u7684\u6bd4\u4f8b\u548c\u65b9\u5411\u3002\u6211\u4eec\u53ea\u5bf9 128x72 \u7684\u56fe\u50cf\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u56fe\u50cf\u6c38\u8fdc\u4e0d\u4f1a\u5728\u4efb\u4e00\u8f74\u4e0a\u65cb\u8f6c\u3002\u6b64\u5c5e\u6027\u6781\u5927\u5730\u7b80\u5316\u4e86\u4efb\u52a1\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6b64\u7c7b\u56fe\u50cf\u53ef\u4ee5\u66f4\u5feb\u5730\u5b8c\u6210\u7279\u5f81\u63d0\u53d6\u3002\u5bf9\u56fe\u50cf\u7684\u91cd\u8981\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\u7684\u7279\u5f81\u662f\u4ec0\u4e48\uff1f\u4eba\u773c\u7684\u57fa\u672c\u80fd\u529b\u4e4b\u4e00\u662f\u68c0\u6d4b\u548c\u533a\u5206\u5f62\u72b6\u3002\u4ece\u6838\u5fc3\u6765\u770b\uff0c\u6bcf\u4e2a\u5f62\u72b6\u90fd\u662f\u7531\u8fb9\u7f18\u7ec4\u6210\u7684\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u60f3\u60f3\u6674\u6717\u7684\u84dd\u5929\u7684\u56fe\u50cf\u3002\u5b83\u51e0\u4e4e\u6ca1\u6709\u4fe1\u606f\uff1a\u6240\u6709\u50cf\u7d20\u90fd\u5177\u6709\u76f8\u540c\u7684\u503c\u3002\u73b0\u5728\u60f3\u8c61\u4e00\u4e0b\u84dd\u5929\u4e2d\u7684\u4e00\u4e2a\u767d\u8272\u5e73\u9762\u3002\u8fd9\u4e2a\u65b0\u56fe\u50cf\u5305\u542b\u7531\u4e0d\u540c\u503c\u7684\u76f8\u90bb\u50cf\u7d20\uff08\u767d\u8272\u548c\u84dd\u8272\uff09\u521b\u5efa\u7684\u8fb9\u7f18\u3002\u8fd9\u4e9b\u8fb9\u7f18\u7684\u5b58\u5728\u589e\u52a0\u4e86\u4fe1\u606f\u503c\u56fe\u7247\u3002\u5b83\u7a81\u7136\u53d8\u5f97\u5bf9\u89c2\u5bdf\u8005\u66f4\u6709\u610f\u4e49\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fb9\u7f18\u68c0\u6d4b\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u5982\u6b64\u91cd\u8981\u7684\u7814\u7a76\u9886\u57df\u3002\u770b\u770b\u5f53\u4f7f\u7528\u4e3a\u8fb9\u7f18\u68c0\u6d4b\u8bbe\u8ba1\u7684\u7b80\u5355\u6ee4\u6ce2\u5668\u5bf9\u5176\u4e2d\u4e00\u4e2a\u89c6\u9891\u5e27\u8fdb\u884c\u5377\u79ef\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\n\u5b83\u4ece\u56fe\u50cf\u4e2d\u5220\u9664\u4e86\u6240\u6709\u975e\u5fc5\u8981\u7684\u90e8\u5206\uff0c\u4e3a\u6211\u4eec\u7559\u4e0b\u4e86\u5927\u8111\u8ba4\u4e3a\u6709\u610f\u4e49\u7684\u5f62\u72b6\u2014\u2014\u4e30\u7530\u6807\u5fd7\u548c\u82f1\u6587\u5b57\u6bcd\u3002\u53ef\u4ee5\u8bf4\uff0c\u56fe\u50cf\u6700\u91cd\u8981\u7684\u7279\u5f81\u662f\u8fb9\u7f18\u3002\u627e\u5230\u4e00\u79cd\u4e13\u6ce8\u4e8e\u5bf9\u7279\u5f81\u5411\u91cf\u4e2d\u7684\u8fb9\u7f18\u8fdb\u884c\u6709\u6548\u7f16\u7801\u7684\u7b97\u6cd5\u662f\u6211\u4eec\u4efb\u52a1\u7684\u4e3b\u8981\u6311\u6218\u3002 Haar\u53d8\u6362\u662f\u6700\u7b80\u5355\u7684\u6b63\u4ea4\u5c0f\u6ce2\u53d8\u6362\u3002\u5b83\u5728\\(J=log2(n)\u22121\\)\u5c3a\u5ea6\u4e0a\u8fdb\u884c\u8fd0\u7b97\uff0c\u8ba1\u7b97\u8f93\u5165\u56fe\u50cf\u4e0a\u7684\u4e00\u7cfb\u5217\u7c97\u5c3a\u5ea6\u548c\u7ec6\u5c3a\u5ea6\u7cfb\u6570\u3002\u8ba1\u7b97\u662f\u4ec0\u4e48\u610f\u601d\u591a\u5206\u8fa8\u7387\u7cfb\u6570\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u8fd9\u4e2a\uff1f\u66f4\u76f4\u63a5\u7684\u89e3\u91ca\u662f\uff0c\u79bb\u6563 Haar \u5c0f\u6ce2\u53d8\u6362\u662f\u5728\u56fe\u50cf\u4e2d\u5bfb\u627e\u8fb9\u7f18\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u4e4b\u4e00\u3002\u5b83\u5728\\(J\\) \u8f83\u5c0f\u7684\u5c3a\u5ea6\u4e0a\u8bc6\u522b\u5b83\u4eec\u3002\u4f8b\u5982\uff0c\u5927\u5c0f\u4e3a 512x512 \u50cf\u7d20\u7684\u56fe\u50cf\u5c06\u751f\u6210 8 \u4e2a\u7c97\u5c3a\u5ea6\u7684\u7cfb\u6570\u3002\u964d\u4f4e\u56fe\u50cf\u7684\u5206\u8fa8\u7387\u662f\u4fdd\u7559\u6700\u7a81\u51fa\u8fb9\u7f18\u7684\u5de7\u5999\u6280\u5de7\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u4ee5\u4e0b\u5e94\u7528\u79bb\u6563 Haar \u5c0f\u6ce2\u53d8\u6362\u540e\u7684\u89c6\u9891\u5e27\u793a\u4f8b\u6765\u4e86\u89e3\u56fe\u50cf\u5206\u8fa8\u7387\u964d\u4f4e\u610f\u5473\u7740\u4ec0\u4e48 1\u3002\u597d\u5947\u7684\u8bfb\u8005\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u6240\u5e94\u7528\u7684\u53d8\u6362\u662f\u4e00\u79cd\u6807\u51c6\u7684\u5c0f\u6ce2\u53d8\u6362\uff0c\u5176\u4e2d\u6240\u6709\u884c\u90fd\u5728\u6240\u6709\u5217\u4e4b\u524d\u5904\u7406\u3002\u8fd9\u4e2a\u51b3\u5b9a\u662f\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u7684\uff0c\u56e0\u4e3a\u5b83\u88ab\u8bc1\u660e\u5bf9\u5176\u4ed6\u4eba\u4e5f\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002\u7ed3\u679c\u5f88\u6709\u8bf4\u670d\u529b\u3002\u4f60\u53ef\u4ee5\u6ce8\u610f\u5230\u5982\u4f55\u5728\u8d8a\u6765\u8d8a\u5c0f\u7684\u5206\u8fa8\u7387\u4e0a\u68c0\u6d4b\u5230\u6bcf\u4e00\u6b65\u7684\u8fb9\u7f18\u3002\u5728\u51cf\u5c11\u539f\u59cb\u5411\u91cf\u7ef4\u6570\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c0f\u6ce2\u7cfb\u6570\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u5f3a\u5927\u7684\u673a\u5236\u3002\n\u6211\u4eec\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u4f7f\u7528\u7684\u6700\u540e\u4e00\u6b65\u662f\u6309\u5927\u5c0f\u8fc7\u6ee4\u5c0f\u6ce2\u7cfb\u6570\uff0c\u53ea\u4fdd\u7559\u5c11\u6570\u51e0\u4e2a\u3002\u901a\u8fc7\u4fdd\u7559\u9876\u90e8\u5c0f\u6ce2\u7cfb\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u56fe\u50cf\u4e2d\u6700\u91cd\u8981\u7684\u7279\u5f81\u8fdb\u884c\u7f16\u7801\u3002\u7ecf\u8fc7\u5927\u91cf\u5b9e\u9a8c\uff0c\u4fdd\u7559\u539f\u59cb\u5411\u91cf\u7684 4%\u5c0f\u6ce2\u7cfb\u6570\u63d0\u4f9b\u4e86\u6700\u597d\u7684\u7cbe\u5ea6/\u53ec\u56de\u7387\u3002\u5728\u5c06\u539f\u59cb\u56fe\u50cf\u5e27\u51cf\u5c11\u5230 9120 \u4e2a\u6d6e\u70b9\u6570\u7684\u5411\u91cf\u540e\uff0c\u5176\u4e2d\u53ea\u6709 365 \u4e2a\u503c\u4e0d\u662f\u96f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\u6280\u672f\uff0c\u6700\u7ec8\u4ee5\u6613\u4e8e\u641c\u7d22\u548c\u68c0\u7d22\u7684\u683c\u5f0f\u5bf9\u6211\u4eec\u7684\u5e27\u8fdb\u884c\u7f16\u7801\u3002\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0e\u97f3\u9891\u6307\u7eb9\u7b97\u6cd5\u76f8\u540c\u7684\u65b9\u6cd5\u2014\u2014\u5c40\u90e8\u654f\u611f\u54c8\u5e0c\u3002\u4e0e\u97f3\u9891\u6307\u7eb9\u8bc6\u522b\u7c7b\u4f3c\uff0c\u6211\u4eec\u5c06\u9876\u90e8 Haar \u5c0f\u6ce2\u7cfb\u6570\u7684\u7a00\u758f\u5411\u91cf\u89c6\u4e3a\u4e00\u4e2a\u96c6\u5408\u3002\u6211\u4eec\u5982\u4f55\u5c06\u5b9e\u6570\u5411\u91cf\u89c6\u4e3a\u4e00\u4e2a\u96c6\u5408\uff1f\u5f88\u7b80\u5355\u2014\u2014\u6211\u4eec\u5c06\u9876\u90e8\u5c0f\u6ce2\u7684\u7b26\u53f7\u7f16\u7801\u4e3a 10\uff08\u6b63\uff09\u548c 01\uff08\u8d1f\uff09 2.\u901a\u8fc7\u5e94\u7528\u8fd9\u4e2a\u6280\u5de7\uff0c\u6211\u4eec\u5c06\u5c0f\u6ce2\u7cfb\u6570\u6570\u7ec4\u8f6c\u6362\u4e3a\u957f\u5ea6\u4e3a 18,240 \u7684\u5e03\u5c14\u6570\u7ec4\u3002\u56e0\u6b64\uff0c\u8be5\u51b3\u5b9a\u4f7f\u6211\u4eec\u80fd\u591f\u5728\u6bd4\u8f83\u4e24\u4e2a\u96c6\u5408\u7684\u76f8\u4f3c\u5ea6 3 \u65f6\u4f7f\u7528 Jaccard \u7d22\u5f15\u4f5c\u4e3a\u8ddd\u79bb\u5ea6\u91cf\u3002Jaccard \u7d22\u5f15\u4f5c\u4e3a\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\u5ea6\u91cf\u3002\u5b83\u4eec\u8d8a\u76f8\u4f3c\uff0c\u5b83\u5c31\u8d8a\u63a5\u8fd1 1\u3002\n\u5e94\u7528\u4e8e\u96c6\u5408\u7684 LSH \u4e0e\u6b27\u51e0\u91cc\u5f97\u7a7a\u95f4\u4e2d\u4f7f\u7528\u7684\u968f\u673a\u6295\u5f71\u6709\u5f88\u5927\u4e0d\u540c\u3002\u6211\u9f13\u52b1\u60a8\u9605\u8bfb LSH \u5982\u4f55\u7528\u4e8e\u97f3\u9891\u6307\u7eb9\u8bc6\u522b\uff0c\u56e0\u4e3a\u6211\u63d0\u4f9b\u4e86\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\u4e3a\u4ec0\u4e48\u968f\u673a\u6700\u5c0f\u54c8\u5e0c\u6392\u5217\u7b49\u6548\u4e8e\u968f\u673a\u6295\u5f71\u65f6\u4f7f\u7528 Jaccard \u8ddd\u79bb\u5ea6\u91cf 4. \u5b9e\u73b0\u6709\u6548\u7684 LSH \u6a21\u5f0f\u9700\u8981\u591a\u5c11\u4e2a\u6700\u5c0f\u54c8\u5e0c\u6392\u5217\uff1f\u4e0e\u97f3\u9891\u6307\u7eb9\u8bc6\u522b\u7c7b\u4f3c\uff0c\u6211\u4eec\u4f7f\u7528 100 \u4e2a\u6700\u5c0f\u54c8\u5e0c\u6392\u5217\u6765\u751f\u6210\u968f\u673a\u96c6\u5408\u6392\u5217\u3002\u5b83\u5bf9\u9891\u8c31\u56fe\u975e\u5e38\u6709\u6548\uff0c\u6240\u4ee5\u6211\u4eec\u51b3\u5b9a\u5bf9\u89c6\u9891\u5e27\u4f7f\u7528\u76f8\u540c\u6570\u91cf\u7684\u6392\u5217\u3002\u8fd9 100 \u4e2a\u6700\u5c0f\u6563\u5217\u6392\u5217\u4f1a\u5c06\u751f\u6210\u7684\u6563\u5217\u5206\u7ec4\u5230 25 \u4e2a\u6563\u5217\u8868\u4e2d\uff0c\u6bcf\u4e2a\u8868\u6709 4 \u4e2a\u6392\u5217\u3002\u9009\u62e9\u7684\u53c2\u6570\u53ef\u80fd\u770b\u8d77\u6765\u662f\u4efb\u610f\u7684\uff0c\u4f46\u5b83\u4eec\u4e0d\u662f\u3002\u6700\u5c0f\u6563\u5217\u6392\u5217\u4f1a\u540c\u610f\u7684\u6982\u7387\u81f3\u5c11\u5728\u54c8\u5e0c\u8868\u4e4b\u4e00\u4e2d\uff0c\u7531\u4ee5\u4e0b\u516c\u5f0f 5 \u7ed9\u51fa\uff1a \\[P = 1 - (1 - J^k)^L\\] \u5176\u4e2d \\(J\\) \u662f Jaccard \u7d22\u5f15\uff0c\\(k\\) \u662f\u4e00\u4e2a\u6700\u5c0f\u54c8\u5e0c\u6392\u5217\u7684\u6570\u91cf\u54c8\u5e0c\u8868\uff0c\u4ee5\u53ca \\(L\\) \u4e2a\u54c8\u5e0c\u8868\u3002\u56fe 4. \u81f3\u5c11\u4e00\u4e2a\u54c8\u5e0c\u8868\u5339\u914d\u7684\u6982\u7387\u968f\u7740\u6570\u636e\u70b9\u7684\u76f8\u4f3c\u6027\u800c\u589e\u52a0\u3002\u6ce8\u610f\u81f3\u5c11\u4e00\u4e2a\u6210\u529f\u5339\u914d\u7684\u6982\u7387\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u51e0\u4e4e\u5c31\u50cf\u4e00\u4e2a\u9636\u68af\u51fd\u6570\u3002\u5f53\u4e24\u4e2a\u96c6\u5408\u7684\u76f8\u4f3c\u5ea6\u8d85\u8fc7 50% \u65f6\uff0c\u81f3\u5c11\u4e00\u4e2a\u6210\u529f\u5339\u914d\u7684\u6982\u7387\u4f1a\u6025\u5267\u589e\u52a0\u3002\u8fd9\u6b63\u662f\u6211\u4eec\u6240\u9700\u8981\u7684\u3002\u8fc7\u6ee4\u6389\u566a\u97f3\uff0c\u53ea\u6709\u5728\u5b83\u4eec\u76f8\u4f3c\u65f6\u624d\u80fd\u5f97\u5230\u597d\u7684\u5019\u9009\u8005\u3002\u6211\u4eec\u9009\u62e9\u4e86 \\(L=25\\) \u548c \\(n=4\\)\uff0c\u56e0\u4e3a\u8fd9\u79cd\u6a21\u5f0f\u66f4\u5bbd\u5bb9\uff0c\u4ece\u641c\u7d22\u8bf7\u6c42\u4e2d\u8fd4\u56de\u66f4\u591a\u5019\u9009\u8005\u3002\u8fd9\u79cd\u6743\u8861\u662f\u7531\u89c6\u9891\u5e27\u5339\u914d\u7684\u7ec6\u8282\u9a71\u52a8\u7684\u3002\u4f5c\u4e3a\u89c6\u9891\u6d41\u6765\u81ea\u5404\u79cd\u6765\u6e90\uff0c\u5b83\u4eec\u4ee5\u4e0d\u540c\u7684\u683c\u5f0f\u8fdb\u884c\u7f16\u7801\uff1a4:3\u300116:9\u30011:1 \u5728\u5c06\u5176\u8f6c\u6362\u4e3a\u89c4\u8303\u683c\u5f0f\u65f6\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u5f15\u5165\u8f6c\u6362\u4f2a\u50cf\uff1a\u50cf\u7d20\u5316\u3001\u6df7\u53e0\u3002\u7b97\u6cd5\u5bb9\u6613\u53d7\u5230\u8fd9\u4e9b\u95ee\u9898\u7684\u5f71\u54cd\u3002\u56e0\u6b64\u66f4\u5bbd\u677e\u7684 LSH \u6a21\u5f0f\u662f\u53ef\u53d6\u7684\u3002\u4e3a\u4e86\u63a7\u5236\u7b97\u6cd5\u7684\u654f\u611f\u5ea6\uff0c\u60a8\u8fd8\u53ef\u4ee5\u53ea\u8003\u8651\u90a3\u4e9b\u5728\u591a\u4e2a\u54c8\u5e0c\u8868\u4e2d\u5339\u914d\u7684\u5019\u9009\u8005\u3002\n\u56fe 5. \u9009\u62e9\u4e00\u4e2a\u70b9\u5fc5\u987b\u5339\u914d\u591a\u5c11\u4e2a\u54c8\u5e0c\u8868\u624d\u80fd\u88ab\u8ba4\u4e3a\u662f\u5019\u9009\u70b9 \u6ce8\u610f\u5982\u4f55\u968f\u7740\u76f8\u4f3c\u5ea6\u7684\u589e\u52a0\uff0c\u5339\u914d\u7684\u54c8\u5e0c\u8868\u7684\u6570\u91cf\u4e5f\u4f1a\u589e\u52a0\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u53ea\u9700\u8981\u5206\u6790\u90a3\u4e9b\u88ab\u8ba4\u4e3a\u662f\u5019\u9009\u7684\u56fe\u50cf80% \u76f8\u4f3c\uff0c\u60a8\u53ea\u80fd\u68c0\u7d22\u5728\u81f3\u5c11 5 \u4e2a\u54c8\u5e0c\u8868\u4e2d\u5339\u914d\u7684\u5019\u9009\u8005\u3002\u6211\u5728\u5f00\u59cb\u8fd9\u7bc7\u6587\u7ae0\u65f6\u4e3e\u4e86\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5c06\u4e0d\u540c\u7684 Toyota \u4ea7\u54c1\u6ce8\u5165\u540c\u4e00\u4e2a\u5e7f\u544a\u3002\u6211\u4eec\u5982\u4f55\u4f7f\u7528\u4e0a\u8ff0\u7b97\u6cd5\u53d1\u73b0\u8fd9\u4e9b\u4e0d\u540c\u4e4b\u5904\uff1f\u6211\u4eec\u9996\u5148\u5c06\u5b9e\u65f6\u89c6\u9891\u6d41\u67e5\u8be2\u53d1\u9001\u5230\u6211\u4eec\u7684 Emy \u5b58\u50a8\u96c6\u7fa4\u3002\u7531\u4e8e\u6bcf\u4e2a\u7b2c\u4e8c\u4e2a\u5305\u542b 30 \u5e27\uff0c30 \u4e2a\u67e5\u8be2\u70b9\u7528\u4e8e\u68c0\u7d22\u6f5c\u5728\u5019\u9009\u8005\u3002\u6211\u4eec\u5f97\u5230\u4e00\u7ec4\u5339\u914d\u7684\u5e27\u5e76\u4e3a\u6bcf\u4e2a\u5e7f\u544a\u91cd\u5efa\u6700\u4f73\u5339\u914d\u8def\u5f84\u3002\u91cd\u5efa\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u5b83\u6765\u68c0\u6d4b\u7ed3\u679c\u5e7f\u544a\u4e2d\u7684\u95f4\u9699\u3002\u68c0\u6d4b\u5230\u95f4\u9699\u7684\u533a\u57df\uff0c\u8bc6\u522b\u89c6\u9891\u5e27\u5dee\u5f02\u3002\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u4e30\u7530\u793a\u4f8b\uff0c\u4e0d\u540c\u7684\u5546\u4e1a\u62a5\u4ef7\u4e0e\u539f\u59cb\u62a5\u4ef7\u4ea7\u751f 10 \u79d2\u7684\u5dee\u8ddd\u3002\u6211\u5c06\u7559\u4e0b\u5173\u4e8e\u5982\u4f55\u4ece\u4e0d\u540c\u6587\u7ae0\u7684\u7ed3\u679c\u5e27\u91cd\u5efa\u6700\u4f73\u8def\u5f84\u7684\u7ec6\u8282\u3002\u8fd9\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u9700\u8981\u89e3\u51b3\u7684\u590d\u6742\u95ee\u9898\uff0c\u672c\u8d28\u4e0a\u662f\u7f16\u8f91\u8ddd\u79bb\u95ee\u9898\u7684\u53d8\u4f53 6. \u5f53\u539f\u59cb\u548c\u67e5\u8be2\u5e7f\u544a\u6709\u5fae\u4e0d\u8db3\u9053\u7684\u533a\u522b - \u5373\u4e0d\u540c\u7684\u6807\u5fd7\u6216\u7535\u8bdd\u53f7\u7801\u3002\u63d0\u4f9b\u7684 LSH \u7b97\u6cd5\u4e0d\u4f1a\u533a\u5206\u5b83\u4eec\uff0c\u5b83\u4e0d\u4f1a\u5728\u91cd\u5efa\u7684\u6700\u4f73\u8def\u5f84\u4e2d\u4ea7\u751f\u95f4\u9699\u3002\u8fd9\u662f\u9884\u671f\u7684\uff1a\u6211\u4eec\u4e0d\u80fd\u8ba9 LSH + Min-Hash \u4f5c\u4e3a\u4e00\u79cd\u7cbe\u786e\u7684\u68c0\u7d22\u7b97\u6cd5\uff0c\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\uff0c\u5b83\u662f\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\u3002\u4e3a\u4e86\u80fd\u591f\u68c0\u6d4b\u5230\u5fae\u5c0f\u7684\u53d8\u5316\uff0c\u5fc5\u987b\u5b9e\u65bd\u7b2c 2 \u9636\u6bb5\u9a8c\u8bc1\u3002\u5728\u91cd\u5efa\u6700\u4f73\u5339\u914d\u8def\u5f84\u540e\uff0c\u6211\u4eec\u5e94\u7528\u7b80\u5355\u7684\u5e27\u5230\u5e27\u6bd4\u8f83\uff0c\u6bd4\u8f83\u50cf\u7d20\u7ea7\u522b\u7684\u5dee\u5f02\u3002\n\u5bf9\u4e8e\u5e27\u95f4\u6bd4\u8f83\uff0c\u6211\u4eec\u7684\u9996\u9009\u662f SSIM \u65b9\u6cd5\u3002 SSIM \u662f\u7528\u4e8e\u8861\u91cf\u56fe\u50cf\u8d28\u91cf\u7684\u6307\u6807\uff0c\u4f46\u6ca1\u6709\u4ec0\u4e48\u80fd\u963b\u6b62\u6211\u4eec\u6bd4\u8f83\u901a\u8fc7 LSH \u5339\u914d\u7684\u5e27\u3002\u7531\u4e8e\u5b83\u65e8\u5728\u68c0\u6d4b\u566a\u58f0\u548c\u538b\u7f29\u4f2a\u5f71\uff0c\u56e0\u6b64\u5b83\u4e5f\u53ef\u4ee5\u975e\u5e38\u6709\u6548\u5730\u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u7ec6\u5fae\u5dee\u5f02\u3002 SSIM \u7684\u95ee\u9898\u5728\u4e8e\u8ba1\u7b97\u65b9\u9762\uff0c\u5b83\u975e\u5e38\u6602\u8d35\u3002\u5c06\u5176\u5e94\u7528\u4e8e\u8fc7\u6ee4\u6570\u767e\u4e2a\u7535\u89c6\u53f0\u4e0a\u6570\u5343\u4e2a\u5e7f\u544a\u7684\u73b0\u5b9e\u89e3\u51b3\u65b9\u6848\u662f\u4e0d\u53ef\u884c\u7684\u3002\u4e3a\u4e86\u5bfb\u627e\u66f4\u5feb\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u51b3\u5b9a\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u56fe\u50cf\u4e4b\u95f4\u7684\u9ad8\u65af\u5dee\u5f02\u4ee5\u8bc6\u522b\u5305\u542b\u4e0d\u540c\u89c6\u89c9\u5185\u5bb9\u7684\u533a\u57df 7. \u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5e76\u6392\u6bd4\u8f83 SSIM \u548c\u9ad8\u65af\u5dee\u5f02\u3002\u8f6e\u5ed3\u7528\u9ec4\u8272\u6765\u52fe\u52d2\u51fa\u6e90\u7684\u786e\u5207\u533a\u57df\u5e76\u4e14\u76ee\u6807\u56fe\u50cf\u4e0d\u540c\u3002\u8bf7\u6ce8\u610f\u8fd9\u4e24\u79cd\u7b97\u6cd5\u5982\u4f55\u6b63\u786e\u8bc6\u522b\u53f3\u4e0b\u89d2\u4e22\u5931\u7684\u5fbd\u6807\u3002SSIM \u8fd8\u8bc6\u522b\u56fe\u50cf\u9876\u90e8\u7684\u5176\u4ed6\u66f4\u6539\u3002\u8fd9\u4e9b\u662f\u5b58\u5728\u4e8e\u5176\u4e2d\u4e00\u4e2a\u89c6\u9891\u4e2d\u7684\u538b\u7f29\u4f2a\u5f71\u3002\u5f53\u4f7f\u7528\u4e0d\u540c\u7684\u89c6\u9891\u683c\u5f0f\u5bf9\u89c6\u9891\u6d41\u8fdb\u884c\u7f16\u7801\u65f6\uff0c\u5b83\u4eec\u5c31\u4f1a\u51fa\u73b0\u3002\u9ad8\u65af\u7684\u5dee\u5f02\u5ffd\u7565\u4e86\u538b\u7f29\u4f2a\u5f71\uff0c\u4f7f\u5176\u66f4\u9002\u5408\u8be5\u4efb\u52a1\u3002\u4ee5\u4e0b\u793a\u4f8b\u5305\u542b\u5177\u6709\u4e24\u4e2a\u4e0d\u540c\u7535\u8bdd\u53f7\u7801\u7684\u89c6\u9891\u5e27\uff0c\u5176\u4ed6\u4e00\u5207\u90fd\u76f8\u540c\u3002\u8fd9\u4e24\u79cd\u7b97\u6cd5\u90fd\u53ef\u4ee5\u8f7b\u677e\u8bc6\u522b\u4e0d\u5339\u914d\u3002\u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u5c06\u5c55\u793a SSIM \u65b9\u6cd5\u4f55\u65f6\u8868\u73b0\u66f4\u597d\u3002\u6ce8\u610f\u9ad8\u65af\u5206\u5e03\u7684\u5dee\u5f02\u5982\u4f55\u65e0\u6cd5\u8bc6\u522b\u4e0d\u540c\u7684\u516c\u53f8\u540d\u79f0\uff1a\u201cPeoples Gas\u201d\u4e0e\u201cNorth Shore Gas\u201d\u3002\u4e0d\u96be\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002\u5bf9\u5e27\u5e94\u7528\u9ad8\u65af\u6ee4\u6ce2\u5668\u540e\uff0c\u5b57\u6bcd\u50cf\u7d20\u4e0e\u80cc\u666f\u6df7\u5408\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u50cf\u7d20\u7684\u989c\u8272\u76f8\u4f3c\u3002 \u8fd9\u662f\u9ad8\u65af\u5dee\u5f02\u7684\u5c40\u9650\u6027 - \u5982\u679c\u5dee\u5f02\u4e0e\u80cc\u666f\u6df7\u5408\uff0c\u5219\u7b97\u6cd5\u5c06\u65e0\u6cd5\u8bc6\u522b\u5b83\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u51b3\u5b9a\u575a\u6301\u4f7f\u7528\u5b83\u63d0\u4f9b\u4e86\u6027\u80fd\u548c\u7cbe\u5ea6\u4e4b\u95f4\u7684\u6781\u597d\u6743\u8861\u3002\n\u7b2c 2 \u9636\u6bb5\u9a8c\u8bc1\u7684\u6700\u540e\u4e00\u6b65\u662f\u4ece\u5305\u542b\u7b97\u6cd5\u8bc6\u522b\u7684\u8f6e\u5ed3\u7684\u6700\u4f73\u91cd\u6784\u8def\u5f84\u4e2d\u5220\u9664\u5e27\u4e00\u65e6\u8fd9\u4e9b\u5e27\u88ab\u5220\u9664\uff0c\u6700\u4f73\u8def\u5f84\u5c31\u4f1a\u6709\u95f4\u9699\u3002\u95f4\u9699\u63d0\u4f9b\u4e86\u89c6\u9891\u5f00\u59cb\u4e0d\u5339\u914d\u7684\u65f6\u95f4\u4f4d\u7f6e\u3002\u89c2\u770b\u4ee5\u4e0b\u6700\u4f73\u91cd\u5efa\u8def\u5f84\u793a\u4f8b\uff0c\u901a\u8fc7\u9010\u5e27\u6bd4\u8f83\u8bc6\u522b\u4e0d\u5339\u914d\u7684\u8f6e\u5ed3\u3002\u5f53 SiriusXM \u6587\u672c\u51fa\u73b0\u65f6\uff0c\u7b2c 15 \u79d2\u5c06\u5728\u7b2c\u4e00\u4e2a\u4e2d\u68c0\u6d4b\u5230\u7a33\u5b9a\u7684\u8f6e\u5ed3\u3002\u56fe 9 \u663e\u793a\u4e86\u5dee\u5f02\u5f00\u59cb\u65f6\u7684\u4e00\u4e2a\u5e27\u51fa\u73b0\u3002\u8bf7\u6ce8\u610f\uff0c\u6709\u65f6\uff0c\u4e0d\u4ec5\u5728 SiriusXM \u51fa\u73b0\u671f\u95f4\u8bc6\u522b\u8f6e\u5ed3\u3002\u5feb\u901f\u8fd0\u52a8\u53ef\u80fd\u662f\u67e5\u8be2\u5e27\u548c\u8f68\u8ff9\u5e27\u4e4b\u95f4\u4e0d\u5b8c\u7f8e\u7684\u6700\u4f73\u8def\u5f84\u5bf9\u9f50\u7684\u539f\u56e0\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u503c\u5f97\u5173\u6ce8\u7684\u539f\u56e0\u3002\u5728 1 \u79d2\u7684\u64ad\u653e\u8fc7\u7a0b\u4e2d\uff0c30 \u5e27\u4e2d\u81f3\u5c11\u6709 1 \u5e27\u8db3\u4ee5\u6b63\u786e\u5bf9\u9f50\uff0c\u4ee5\u9632\u6b62\u610f\u5916\u4ea7\u751f\u95f4\u9699\u3002\u4e0b\u4e00\u4e2a\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u68c0\u6d4b\u5e7f\u544a\u4e2d\u95f4\u548c\u672b\u7aef\u7684\u4e73\u6db2\u74f6\u4e0a\u7684\u8f6e\u5ed3\u3002\u5728\u5f00\u53d1\u548c\u96c6\u6210\u89c6\u9891\u6307\u7eb9\u7b97\u6cd5\u540e\uff0cEmysound \u73b0\u5728\u53ef\u4ee5\u5728\u540c\u4e00\u5904\u7406\u7ba1\u9053\u4e2d\u5bf9\u97f3\u9891\u548c\u89c6\u9891\u6d41\u8fdb\u884c\u6307\u7eb9\u3001\u641c\u7d22\u3001\u68c0\u7d22\u548c\u6bd4\u8f83\u3002\u89c6\u9891\u6307\u7eb9\u73b0\u5728\u7528\u4e8e\u8bc6\u522b 1,000 \u591a\u4e2a\u7535\u89c6\u53f0\u663e\u793a\u7684 3,000 \u5230 6,000 \u4e2a\u5e7f\u544a\u3002\u4f7f\u7528LSH + MinHash \u4f7f\u6211\u4eec\u80fd\u591f\u641c\u7d22\u8d85\u8fc7 25,000 \u5c0f\u65f6\u7684\u97f3\u9891\u548c\u89c6\u9891\u5185\u5bb9\u3002\u89c6\u9891\u6307\u7eb9\u7b97\u6cd5\u662f\u5728\u4e0e\u97f3\u9891\u6307\u7eb9\u76f8\u540c\u7684\u5f00\u6e90\u89e3\u51b3\u65b9\u6848\u4e2d\u5b9e\u73b0\u7684\uff1aSoundFingerprinting\u3002\u6211\u8fd8\u6ca1\u6709\u65f6\u95f4\u66f4\u65b0 GitHub \u9875\u9762\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u751f\u6210\u89c6\u9891\u6307\u7eb9\u7684\u52a8\u624b\u793a\u4f8b\uff0c\u4f46\u6211\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u4e2d\u8fdb\u884c\u3002\u5982\u679c\u60a8\u6709\u5174\u8da3\u4f7f\u7528\u5b83\uff0c\u8bf7\u7ed9\u6211\u7559\u8a00\u3002\u6838\u5fc3\u6307\u7eb9\u7b97\u6cd5\u5df2\u83b7\u5f97 MIT \u8bb8\u53ef\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u81ea\u7531\u4f7f\u7528\u3001\u66f4\u6539\u548c\u5206\u53d1\u5b83\u3002\u5982\u679c\u60a8\u6709\u5174\u8da3\u5c06\u5185\u5bb9\u8bc6\u522b\u670d\u52a1\u7528\u4e8e\u5546\u4e1a\u9879\u76ee\uff0c\u8bf7\u6ce8\u518c Emysound\u3002\n1 - \u751f\u6210\u7684\u56fe\u50cf\u5305\u542b\u591a\u4e2a log2(n) \u5c3a\u5ea6\uff0c\u56e0\u4e3a\u5e94\u7528\u7684\u65b9\u6cd5\u662f\u6807\u51c6\u7684 Haar \u5c0f\u6ce2\u53d8\u6362\u3002\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u8be6\u7ec6\u4e86\u89e3\u5e94\u7528 2D Haar \u5c0f\u6ce2\u53d8\u6362\u7684\u65b9\u5f0f\u7684\u5dee\u5f02\u3002 2 - \u4f7f\u7528\u5c0f\u6ce2\u7cfb\u6570\u7684\u7b26\u53f7\u5728\u8fc7\u53bb\u8bc1\u660e\u662f\u6709\u6548\u7684 - C. Jacobs, Finkelstein, A., Salesin, D. (1995) \u5feb\u901f\u591a\u5206\u8fa8\u7387\u56fe\u50cf\u67e5\u8be2\u3002\u8fc7\u7a0b\u4fe1\u53f7\u56fe\u3002 3 - Jaccard \u76f8\u4f3c\u5ea6\u548c min-hash \u503c\u6709\u5f88\u5f3a\u7684\u5173\u7cfb\uff0c\u5176\u4e2d min-hash \u5339\u914d\u7684\u6982\u7387\u7b49\u4e8e Jaccard \u6307\u6570\u3002\u66f4\u591a\u7ec6\u8282\u5728\u8fd9\u91cc\u3002 5 - \u5982\u679c\u60a8\u60f3\u76f4\u89c2\u5730\u4e86\u89e3 LSH \u5728\u6b27\u51e0\u91cc\u5f97\u7a7a\u95f4\u4e2d\u7684\u5e94\u7528\uff0c\u6211\u4f1a\u63a8\u8350\u8fd9\u7bc7\u6587\u7ae0\u4f5c\u4e3a\u4ecb\u7ecd\u3002\u4f5c\u8005\u4f7f\u7528\u968f\u673a\u65cb\u8f6c\u4f5c\u4e3a\u968f\u673a\u6295\u5f71\u5bf9\u70b9\u8fdb\u884c\u6563\u5217\uff0c\u8fd9\u662f\u4e00\u79cd\u7528\u4e8e\u6784\u5efa\u89c6\u89c9\u76f4\u89c2\u5206\u533a\u7684\u5de7\u5999\u6280\u5de7\u3002 6 - \u5c1d\u8bd5\u5bf9\u9f50\u65f6\u95f4\u5e8f\u5217\u7684\u6700\u5e38\u89c1\u7b97\u6cd5\u4e4b\u4e00\u79f0\u4e3a\u52a8\u6001\u65f6\u95f4\u626d\u66f2\u3002\u7f16\u8f91\u8ddd\u79bb\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u66f4\u901a\u7528\uff0c\u4e5f\u53ef\u4ee5\u5e94\u7528\u5728\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002 7 - \u4e0e\u9ad8\u65af\u7b97\u6cd5\u7684\u539f\u59cb\u5dee\u5f02\u7684\u552f\u4e00\u53d8\u5316\u662f\u6211\u4eec\u5bf9\u4e24\u4e2a\u56fe\u50cf\u4f7f\u7528\u76f8\u540c\u7684 sigma\u3002", "note_en": "One of the most common use cases for audio fingerprinting is TV broadcast monitoring.Generating detailed reports about aired TV content is done by analyzing its audio stream.If you want to receive accurate statistics about the occurrence of a specific ad, applying audio fingerprinting may seem sufficient.And indeed, it works in most cases.\n At times though, advertisers use the same audio stream paired with modified visual content.In the automotive and healthcare industries, it is actually widespread.The visual content changes can be minor and sometimes even unnoticeable for the regular viewer. However, it can play a big difference if you want to extract more information about the advertiser, the company, or your competitor.\n Let\u2019s start with a couple of examples to outline the problem.Below is an example of a Toyota ad that uses the same audio stream paired with a different video.\n   The difference starts at the 10th second when the commercial offer appears on screen. It stays on screen for 10 seconds, getting narrated to the audience.Since advertisements are usually read fast and with the same tone of voice, audio fingerprints algorithms may fail to distinguish them.\n The differences in the first examples are easy to observe.Visual variations can be more inconspicuous though.Take a look at some more examples in an increasing order of difficulty to detect the dissimilarities.\n  For the \u201cNational\u201d commercial, it is not difficult to spot the difference - SiriusXM text is present in the bottom spot but not in the top.\n \u201cGrubHub\u201d is slightly more complex - the delivery bag contains two non-identical logos. There is also one more distinction. Feel free to dig deeper into the ad to identify it.\n The following two examples that are marginally different.Try to identify the mismatches on your own.\n  The skin lotion commercial contains two distinct bottles, more precisely different labels.In the \u201cPrevagen\u201d ad, the logos on the exit screen mismatch - Walmart and GNC in the bottom right corner.\n Also, for the automotive industry having different exit screens is quite common. As they are aired in various regions, they contain specific dealership information.Below is an example of the same commercial with six different endings.\n   If you want to differentiate these ads, monitoring only audio content is not enough. This is where video fingerprinting can help you.\n    The outlined problem had a couple more business-related constraints that we had to consider when developing the algorithm.\n real-time data feed comes from over 1000 TV stations, generating more than 24,000 hours of daily search content\n So how do we approach this problem?Firstly, video fingerprinting can be thought of as  image search where the images are actual video frames extracted from the stream.Every second of the video contains 30 color frames, which we can use as the reference points we want to retrieve and compare.\n Those of you who read the description of the  SoundFingerprinting algorithm may notice a pattern.\n  Can we adapt the  SoundFingerprinting algorithm developed for audio search to retrieve video frames?It turns out we can. Image search designed for spectrogram retrieval works remarkably well for video frames.\n  The first step in our algorithm is to reduce the dimensionality for the input video content: inserted ads and real-time queries.The content is encoded in various formats, most commonly in 1080p HD widescreen format. This resolution is far too big for the multidimensional search.1920\u00d71080 color vector is incredibly difficult to search. If encoded in a one-dimensional array, its length is \\(1920*1080*3 = 6,220,800\\).Conversely, modern approximate nearest neighbors  search algorithms are benchmarked on vectors that have up to 1,000 dimensions.\n Thankfully, we don&#39;t need this resolution to correctly identify the differences in the ads, so let&#39;s resize it to 128x72 pixel images. We found this resolution to be optimal after experimenting with a wide range of options. To give you an idea of how small it is, take a look at the video encoded in 128x72 format.\n At this resolution you can still distinguish essential details in the video.The relevant information is preserved.\n The corresponding step in the audio fingerprinting algorithm is  downsampling. A high-resolution audio signal sampled at 44,1KHz is downsampled to 5,5KHz, retaining the most crucial bits of the initial audio.\n A simple heuristic you can use to choose resizing parameters is to assert whether the information you are trying to differentiate is not lost in the process. Asserting is relatively straightforward: visualize the downsampled files and make sure you can still see (or listen in the case of audio algorithms) the very thing you are trying to retain. If you can\u2019t see it anymore, chances are the information is irretrievably lost.\n The next step in reducing dimensionality is encoding the color schema into a [0, 255] range. Keeping the original RGB is not required as a monochrome image preserves the original very well.\n The corresponding step in the audio fingerprinting algorithm is converting the original audio to  mono sound.\n After all these transformations, we have achieved a  675x dimensionality reduction. Our vector\u2019s length is now 9120.\n  Feature extraction from images is an incredibly reach domain of research.Thankfully the problem we are trying to solve has a couple of advantages that make it easier.Frames from a video have a  stable  scale and  orientation. We only operate with 128x72 images, which are never rotated on either of the axes.This property greatly simplifies the task since feature extraction can be done much faster for this type of image.\n What are the features that encode important information about the image?One of the essential abilities of the human eye is detecting and differentiating shapes.Stripped to its core, every shape is made of  edges.\n As an example, think about an image of a clear blue sky. It has almost no information: all pixels are of the same value.Now imagine a white plane in the blue sky.This new image contains edges created by  neighboring pixels of different values, white and blue.The presence of these edges adds information value to the picture.It suddenly becomes more meaningful for the observer.That is why edge detection is such an important area of study in computer vision.\n Take a look at what happens when one of the video frames is  convolved using a simple filter designed for edge detection.\n   It removes all the non-essential bits from the image, leaving us with shapes that our brain interprets as meaningful - the Toyota logo and English letters.\n Arguably, the most essential features of an image are edges. Finding an algorithm that focuses on efficiently encoding edges in a feature vector is the main challenge of our task.\n  The Haar transform is the simplest orthogonal wavelet transform.It operates over \\(J=log2(n)\u22121\\) scales, computing a series of coarse-scale and fine-scale coefficients on the input image.What does it mean to compute multiresolution coefficients, and why do we need this?\n A more straightforward explanation, discrete  Haar Wavelet transform is one of the simplest methods to find edges in an image. It identifies them on \\(J\\) smaller scales.For instance, an image that is 512x512 pixels in size will generate coefficients for 8 coarse scales.\n Decreasing the resolution of an image is a neat trick to retain the most  prominent edges.You can get an idea of what image resolution decrease means by looking at the following example of a video frame after discrete Haar Wavelet transform was applied to it 1.\n   A curious reader might notice that the applied transformation is a  standard wavelet transform where all the rows are processed before all the columns.This decision was deliberate as it proved to work well for  others.\n The result is quite telling.You can notice how on each step edges are detected on a smaller and smaller resolution.In the quest of reducing the number of dimensions of the original vector, wavelet coefficients gave us a powerful mechanism.\n The last step we use in image processing is filtering wavelet coefficients by their magnitude, keeping only a handful of them.By retaining top wavelet coefficients, we can encode the most important features from the image.After extensive experimentation keeping 4% of the original vector of wavelet coefficients provided the best precision/recall ratio.\n  After reducing the original image frames to a vector of 9120 floats, out of which only 365 values are not zeros, we can apply approximate nearest neighbors search techniques to finally encode our frames in a format that is easy to search and retrieve.\n At this stage, we can use the same approach we used on the  audio fingerprinting algorithm -  locality sensitive hashing.\n Similar to audio fingerprinting, we treat our sparse vector of top Haar wavelet coefficients as a set.\n How can we treat a vector of real numbers as a set? Quite simple - we encode the sign of the top-wavelets to 10 (positive) and 01 (negative) 2.By applying this trick, we transform our wavelet coefficients array to a boolean array of length 18,240.\n As a result, this decision enabled us to use the  Jaccard Index as the distance metric when comparing two sets for similarity 3.\n Jaccard Index as a metric of similarity between two sets. The more similar they are the closer it is to 1.\n LSH applied on sets is quite different from random projections that are used in Euclidian space.I encourage you to read how LSH was used for  audio fingerprinting, as I provide a more detailed explanation of why random min-hash permutations are equivalent to random projections when the Jaccard distance metric is used 4.\n How many min-hash permutations are needed to achieve a working LSH schema?Similar to audio fingerprinting we use 100 min-hash permutations to generate random set permutations.It worked great for spectrograms, so we decided to use the same number of permutations for video frames.These 100 min-hash permutations will group resulting hashes into 25 hash tables with 4 permutations per table.Chosen parameters may seem arbitrary, but they are not.The probability that min-hash permutations will agree at least in one of the hash tables is given by the following formula 5:\n\\[P = 1 - (1 - J^k)^L\\] where \\(J\\) is the Jaccard Index, \\(k\\) is the number of min-hash permutations in one hash table, and \\(L\\) number of hash tables.\n  Figure 4. Probability of at least one hash table match increases with similarity of the data points.\n Notice how the probability of at least one successful match works almost like a step function.When the similarity of two sets crosses the 50% mark, the probability of at least one successful match increases dramatically.This is precisely what we need. Filter out the noise and get good candidates only when they are similar.\n We have chosen \\(L=25\\) and \\(n=4\\), as this schema is more forgiving, returning more candidates from a search request.This trade-off was driven by the specifics of the video frame matching.As video streams come from various sources, they are encoded in different formats: 4:3, 16:9, 1:1When transforming it to a canonical format, transformation artifacts are inevitably introduced: pixelation, aliasing.You don\u2019t want to have an algorithm susceptible to these issues.Thus a more lenient LSH schema is preferable.\n To control how sensitive the algorithm is, you can also consider only those candidates that matched in more than just one hash table.\n  Figure 5. Choosing how many hash table have to match for a point to be considered a candidate\n Notice how with the increasing similarity, the number of matching hash tables increases as well.In simple terms, if you need to analyze only those images that are 80% similar, you can retrieve only those candidates that match in at least 5 hash tables.\n  I\u2019ve started this article with an example of different Toyota offerings getting injected into the same ad.How do we spot these dissimilarities using the algorithm outlined above?We start by sending real-time video stream queries to our Emy storage cluster.Since each second contains 30 frames, 30 query points are used to retrieve potential candidates.\n We get a set of matched frames and reconstruct the  best matching path for every advertisement.Once reconstructed, we use it to detect gaps in the resulting ad.Areas where a gap is detected, identify the video frame differences.For the first Toyota example, different commercial offers generate a 10 seconds gap with the original.\n   I will leave the details about how the best path is reconstructed from the resulting frames for a different article.It is on its own a complex problem to solve, essentially a variation of the  edit distance problem 6.\n  What about use cases when the original and query ads have insignificant distinctions - i.e., different logo or phone numbers.Provided LSH algorithm will not differentiate between them, it will not generate gaps in the reconstructed best path.This is expected: we can\u2019t make LSH + Min-Hash act as a precise retrieval algorithm since it is, by definition, an  approximate nearest neighbor search.\n To be able to detect small changes, stage 2 verification had to be implemented.After the best matching path is reconstructed, we apply a simple frame-to-frame comparison that compares the differences on the pixel level.\n For the frame-to-frame comparison, our first choice was the  SSIM method. SSIM is a metric that is used to measure image quality, but nothing stops us from comparing frames that match via LSH.Since it is designed to detect noise and compression artifacts, it also can detect minor differences in the image  very efficiently.\n The problem with SSIM is that computation-wise, it is very expensive.Applying it to a real-world solution that filters thousands of ads on hundreds of TV stations is not feasible.In search of a faster approach, we decided to use a simple  difference of gaussians between images to identify areas that contain different visual content 7.\n Take a look at the following examples with a side-by-side comparison of SSIM and the difference of gaussians.Contours are colored in yellow to outline exact regions where the source and the target images are distinct.\n   Notice how both of the algorithms correctly identified a missing logo on the bottom right.SSIM also identified additional changes on top of the image. These are compression artifacts present in one of the videos.They appear when different video formats are used to encode the video stream.The difference of gaussians ignored compression artifacts, making it a better fit for the task.\n The following example contains video frames with two different phone numbers, everything else being equal.Both algorithms identified the mismatch with ease.\n   As a final example, I will show when the SSIM method fares better.Notice how the difference of gaussians could not spot distinct company names: \u201cPeoples Gas\u201d vs. \u201cNorth Shore Gas.\u201d\n   It is not difficult to explain why this happened. After applying a Gaussian filter on the frames, letter pixels blend with the background, as the color of these pixels is similar.This is a limitation of the difference of gaussians - if the distinction blends with the background, then the algorithm will fail to identify it.Nevertheless, I decide to stick with it provides an excellent trade-off between performance and precision.\n The final step in stage 2 verification eliminates frames from the best-reconstructed path containing contours identified by the algorithmOnce these frames are eliminated, the best path will have gaps.Gaps provide the time location where the video starts to mismatch.\n  Watch the following examples of best-reconstructed paths with frame-by-frame comparisons identifying mismatching contours.A stable contour will be detected in the first one on the 15th second when SiriusXM text appears.Figure 9 shows one of the frames when the difference starts to appear.\n  Notice how at times, contours are identified not only during SiriusXM appearance.A fast motion may be the cause of an imperfect best path alignment between query and track frames.Nonetheless, this is not a cause of concern. It is enough to have at least 1 frame out of 30 during 1-second playback to get correctly aligned to prevent accidental gap creation.\n The next example shows how the contour is detected on the lotion bottle at the ad\u2019s middle and end.\n     After developing and integrating a video fingerprinting algorithm, Emysound can now fingerprint, search, retrieve, and compare both audio and video streams in the same processing pipeline.Video fingerprinting is now used to identify between 3,000 and 6,000 ads displayed over 1,000 TV stations.Using LSH + MinHash allows us to search through over 25,000 hours of both audio and video content.\n Video fingerprinting algorithm is implemented in the same open-source solution as audio fingerprinting:  SoundFingerprinting.I haven\u2019t had the time to update the GitHub page with hands-on examples of programmatically generating video fingerprints though I will do it in the upcoming months.If you are interested in using it drop me a line.\n  The core fingerprinting algorithm is MIT licensed, so you can use, change, and distribute it freely.  Sign up for Emysound if you are interested in using content recognition services for a commercial project.\n 1 - The resulting image contains more than log2(n) scales because applied method is a  standard Haar wavelet transform.You can learn more about the differences in the way a 2D Haar wavelet transform is applied  here.\n  2 - Using the sign of the wavelet coefficient proved to work in the past - C. Jacobs, Finkelstein, A., Salesin, D. (1995) Fast Multiresolution Image Querying. Proc. SIGGRAPH.\n  3 - Jaccard similarity and min-hash values have a powerfull relationship where the probability of min-hash match is equal to Jaccard index. More details  here.\n    5 - If you want to get an intuitive view of LSH applied in Euclidian space, I would recommend  this article as an introduction. The author hashes the points using  random rotation as a random projection which is a neat trick used o build visually intuitive partitions.\n  6 - One of the most common algorithms that try to align temporal sequences is known as  Dynamic Time Warping. Solutions for edit distance problems are more generic, and can also be applied in the corresponding context.\n  7 - The only change from the  original difference of gaussians algorithm is that we use the same sigma for both images.", "posttime": "2021-08-05 20:43:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u89c6\u9891,video,\u56fe\u50cf", "title": "\u89c6\u9891\u6307\u7eb9", "title_en": "Video Fingerprinting", "transed": 1, "url": "https://emysound.com/blog/open-source/2021/08/01/video-fingerprinting.html", "via": "", "real_tags": ["\u89c6\u9891", "video", "\u56fe\u50cf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071300, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Robert C. Martin\uff08\u9c8d\u52c3\u53d4\u53d4\uff09\u81ea 1970 \u5e74\u4ee5\u6765\u4e00\u76f4\u662f\u4e00\u540d\u8f6f\u4ef6\u4e13\u4e1a\u4eba\u58eb\uff0c\u81ea 1990 \u5e74\u4ee5\u6765\u4e00\u76f4\u662f\u4e00\u540d\u56fd\u9645\u8f6f\u4ef6\u987e\u95ee\u3002 Java\u3001OO\u3001\u6a21\u5f0f\u3001UML\u3001\u654f\u6377\u65b9\u6cd5\u548c\u6781\u9650\u7f16\u7a0b\u3002 1995 \u5e74\uff0cRobert \u64b0\u5199\u4e86\u7545\u9500\u4e66\uff1a\u4f7f\u7528 Booch \u65b9\u6cd5\u8bbe\u8ba1\u9762\u5411\u5bf9\u8c61\u7684 C++ \u5e94\u7528\u7a0b\u5e8f\uff0c\u7531 Prentice Hall \u51fa\u7248\u3002\u4ece 1996 \u5e74\u5230 1999 \u5e74\uff0c\u4ed6\u662f C++ Report \u7684\u4e3b\u7f16\u3002 1997 \u5e74\uff0c\u4ed6\u662f Addison Wesley \u51fa\u7248\u7684\u300a\u7a0b\u5e8f\u8bbe\u8ba1\u6a21\u5f0f\u8bed\u8a00 3\u300b\u4e00\u4e66\u7684\u4e3b\u7f16\u3002 1999 \u5e74\uff0c\u4ed6\u662f\u5251\u6865\u51fa\u7248\u793e\u51fa\u7248\u7684\u201cMore C++ Gems\u201d\u7684\u7f16\u8f91\u3002\u4ed6\u4e0e James Newkirk \u5408\u7740\u4e86\u201cXP in Practice\u201d\uff0cAddision Wesley\uff0c2001 \u5e74\u30022002 \u5e74\uff0c\u4ed6\u64b0\u5199\u4e86\u671f\u5f85\u5df2\u4e45\u7684\u201c\u654f\u6377\u8f6f\u4ef6\u5f00\u53d1\uff1a\u539f\u5219\u3001\u6a21\u5f0f\u548c\u5b9e\u8df5\u201d\uff0cPrentice Hall\uff0c2002 \u5e74\u3002\u4ed6\u5df2\u51fa\u7248\u5728\u5404\u79cd\u8d38\u6613\u671f\u520a\u4e0a\u53d1\u8868\u4e86\u6570\u5341\u7bc7\u6587\u7ae0\uff0c\u5e76\u4e14\u7ecf\u5e38\u5728\u56fd\u9645\u4f1a\u8bae\u548c\u8d38\u6613\u5c55\u89c8\u4f1a\u4e0a\u53d1\u8868\u6f14\u8bb2\u3002", "note_en": "Robert C. Martin (Uncle Bob) has been a software professional since 1970 and an international software consultant since 1990. He is founder and president of Object Mentor Inc., a team of experienced consultants who mentor their clients worldwide in the fields of C++, Java, OO, Patterns, UML, Agile Methodologies, and Extreme Programming. In 1995 Robert authored the best-selling book: Designing Object Oriented C++ Applications using the Booch Method, published by Prentice Hall. From 1996 to 1999 he was the editor-in-chief of the C++ Report. In 1997 he was chief editor of the book: Pattern Languages of Program Design 3, published by Addison Wesley. In 1999 he was the editor of &#34;More C++ Gems&#34; published by Cambridge Press. He is co-author, with James Newkirk, of &#34;XP in Practice&#34;, Addision Wesley, 2001. In 2002 he wrote the long awaited &#34;Agile Software Development: Principles, Patterns, and Practices&#34;, Prentice Hall, 2002. He has published many dozens of articles in various trade journals, and is a regular speaker at\rinternational conferences and trade shows.", "posttime": "2021-08-05 20:43:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bed\u8a00,languages,\u51fa\u7248", "title": "\u52a8\u6001\u8bed\u8a00\u4f1a\u53d6\u4ee3\u9759\u6001\u8bed\u8a00\u5417\uff1f (2003)", "title_en": "Are dynamic languages going to replace static languages? (2003)", "transed": 1, "url": "https://www.artima.com/weblogs/viewpost.jsp?thread=4639", "via": "", "real_tags": ["\u8bed\u8a00", "languages", "\u51fa\u7248"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071299, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3b\u8981\u7279\u70b9\uff1a - \u8f7b\u91cf\u7ea7\u548c\u5feb\u901f - \u6700\u5c11\u7684 RAM \u4f7f\u7528\u91cf\uff08\u9002\u7528\u4e8e\u6700\u4fbf\u5b9c\u7684 3.5 \u7f8e\u5143 AWS Lightsail \u5b9e\u4f8b\uff09 - \u6613\u4e8e\u90e8\u7f72\uff08\u5305\u542b\u7f16\u8bd1\u6a21\u677f\u7684\u5355\u4e2a &lt;1 MB \u4e8c\u8fdb\u5236\u6587\u4ef6\uff09 - \u65e0\u9700 JavaScript - \u6bcf\u79cd\u8bed\u8a00\u7684\u8be6\u7ec6\u8bed\u8a00\u7edf\u8ba1\u76ee\u5f55 - \u201c\u9876\u7ea7\u6587\u4ef6\u201d\u529f\u80fd\u63d0\u4f9b\u9879\u76ee\u6982\u8ff0 - \u975e\u5e38\u5feb\u7684 CI \u4e0e\u9884\u7f13\u5b58\u7684\u4f9d\u8d56\u9879 - \u63d0\u4ea4\u62c9\u53d6\u8bf7\u6c42\u800c\u4e0d\u5206\u53c9\u5b58\u50a8\u5e93\u901a\u8fc7\u6d4f\u89c8 V \u8bed\u8a00\u5b58\u50a8\u5e93\u67e5\u770b Gitly \u7684\u5b9e\u9645\u64cd\u4f5c\uff1agitly.org/vlang/ v", "note_en": "Main features: - Light and fast  - Minimal amount of RAM usage (works great on the cheapest $3.5 AWS Lightsail instance)  - Easy to deploy (a single &lt;1 MB binary that includes compiled templates)  - Works without JavaScript  - Detailed language stats for each directory  - &#34;Top files&#34; feature to give an overview of the project  - Very fast CI with pre-cached dependencies  - Submitting a pull request without forking the repository\n   \n  Check out Gitly in action by browsing the V language repo: gitly.org/vlang/v", "posttime": "2021-08-05 20:42:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "github,\u66ff\u4ee3,light,\u6587\u4ef6", "title": "Gitly\uff1a\u7528 V lang\uff08pre-alpha\uff09\u7f16\u5199\u7684\u8f7b\u5de7\u5feb\u901f\u7684 GitHub/GitLab \u66ff\u4ee3\u65b9\u6848", "title_en": "Gitly: A light and fast GitHub/GitLab alternative written in V lang (pre-alpha)", "transed": 1, "url": "http://gitly.org/", "via": "", "real_tags": ["github", "\u66ff\u4ee3", "light", "\u6587\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071298, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9a6c\u58eb\u57fa Triple-E \u7ea7\u96c6\u88c5\u7bb1\u8239\u957f 1,300 \u82f1\u5c3a\uff0c\u53ef\u5728\u6b27\u6d32\u548c\u4e9a\u6d32\u4e4b\u95f4 11,000 \u82f1\u91cc\u7684\u8303\u56f4\u5185\u8fd0\u9001\u8d85\u8fc7 18,000 \u4e2a\u96c6\u88c5\u7bb1\uff0c\u5e76\u4e14\u2026\u2026\u5176\u5168\u4f53\u8239\u5458\u53ef\u4ee5\u88c5\u5728\u4e00\u8f86\u5ba2\u8f66\u5185\u3002\u4f5c\u4e3a\u524d\u9020\u8239\u5e08\u548c\u521d\u521b\u516c\u53f8\u7684\u73b0\u4efb\u8425\u9500\u987e\u95ee\uff0c\u6211\u53d1\u73b0\u8ba9 13 \u4eba\u7684\u8239\u5458\u5c06\u4e16\u754c\u4e0a\u6700\u5927\u7684\u96c6\u88c5\u7bb1\u8239\u822a\u884c\u5230\u5730\u7403\u53e6\u4e00\u7aef\u7684\u6e2f\u53e3\u800c\u4e0d\u53d1\u751f\u6545\u969c\u7684\u76f8\u540c\u539f\u5219\u4e5f\u9002\u7528\u4e8e\u52aa\u529b\u5b9e\u73b0\u79ef\u6781\u589e\u957f\u7684\u521d\u521b\u516c\u53f8\u76ee\u6807\uff1a\u8239\u8236\u5305\u542b\u6613\u4e8e\u64cd\u4f5c\u4e14\u6613\u4e8e\u7406\u89e3\u7684\u7b80\u5355\u7cfb\u7edf\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u6613\u4e8e\u4fee\u590d\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u7684\u505c\u673a\u65f6\u95f4\u66f4\u5c11\u3002\u4e00\u4e2a\u91cd\u8981\u7684\u54c1\u8d28\uff0c\u8003\u8651\u5230\u8239\u8236\u7684\u201c\u505c\u673a\u65f6\u95f4\u201d\u53ef\u80fd\u610f\u5473\u7740\u5728\u6570\u5343\u82f1\u91cc\u4e4b\u5916\u65e0\u6cd5\u83b7\u5f97\u5e2e\u52a9\u3002\u4ee5\u8239\u8236\u7684\u8f6c\u5411\u7cfb\u7edf\u4e3a\u4f8b\u3002\u8235\u7531\u91d1\u5c5e\u6746\u5411\u5de6\u6216\u5411\u53f3\u63a8\u52a8\u3002\u8fd9\u4e9b\u6746\u901a\u8fc7\u6db2\u538b\u79fb\u52a8\u3002\u8be5\u538b\u529b\u7531\u6db2\u538b\u6cf5\u63a7\u5236\u3002\u8be5\u6cf5\u7531\u6765\u81ea\u9a7e\u9a76\u5ba4\u7684\u7535\u5b50\u4fe1\u53f7\u63a7\u5236\u3002\u8be5\u4fe1\u53f7\u7531\u81ea\u52a8\u9a7e\u9a76\u4eea\u63a7\u5236\u3002\u4e0d\u9700\u8981\u706b\u7bad\u79d1\u5b66\u5bb6\u6216\u9020\u8239\u5de5\u7a0b\u5e08\u627e\u5230\u4efb\u4f55\u95ee\u9898\u7684\u539f\u56e0\u548c\u89e3\u51b3\u65b9\u6848\uff1a\u5982\u679c\u7535\u5b50\u4fe1\u53f7\u5931\u8d25\uff0c\u53bb\u8235\u63a7\u5236\u5ba4\u624b\u52a8\u63a7\u5236\u6cf5\uff0c\u540c\u65f6\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4e0e\u9a7e\u9a76\u53f0\u4ea4\u8c08\u6709\u58f0\u624b\u673a\u3002\u5982\u679c\u673a\u68b0\u8054\u52a8\u5931\u6548\uff0c\u5c06\u94fe\u6761\u94a9\u5728\u8235\u7684\u4e24\u4fa7\u5e76\u671d\u4f60\u60f3\u8981\u7684\u65b9\u5411\u62c9\uff01\u521d\u521b\u516c\u53f8\uff0c\u5c31\u50cf\u8239\u8236\u4e00\u6837\uff0c\u4e0d\u80fd\u56e0\u7cfb\u7edf\u505c\u673a\u800c\u505c\u6ede\u4e0d\u524d\u3002\u9500\u552e\u3001\u8425\u9500\u3001\u7f51\u7edc\u3001\u5ba2\u6237\u652f\u6301\u3001\u62db\u8058\u3001\u4ea7\u54c1\u548c\u5176\u4ed6\u7cfb\u7edf\u7684\u957f\u65f6\u95f4\u505c\u673a\u53ef\u80fd\u4f1a\u5bf9\u589e\u957f\u7387\u9020\u6210\u65e0\u6cd5\u5f25\u8865\u7684\u635f\u5bb3\u3002\n\uff08\u867d\u7136\u81ea\u52a8\u5316\u5728\u73b0\u4ee3\u8239\u8236\u4e0a\u5f88\u666e\u904d\uff0c\u4f46\u5b83\u53ea\u4f1a\u5f71\u54cd\u505a\u4e8b\u6240\u9700\u7684\u65f6\u95f4\u548c\u76d1\u63a7\u4e00\u5207\u6240\u9700\u7684\u6ce8\u610f\u529b\u3002\u7531\u4e8e\u73b0\u4ee3\u67f4\u6cb9\u548c\u7535\u529b\u63a8\u8fdb\u7cfb\u7edf\u53d6\u4ee3\u4e86\u7ba1\u9053\uff0c\u63a8\u8fdb\u548c\u8f85\u52a9\u7cfb\u7edf\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u52a0\u7b80\u5355\u2014\u2014\u6ee1\u8f7d\u84b8\u6c7d\u8bbe\u5907\u3002\uff09\u5982\u679c\u7cfb\u7edf\u8d1f\u8d23\u4eba\u79bb\u5f00\u3001\u843d\u6c34\u3001\u88ab\u516c\u5171\u6c7d\u8f66\u649e\u5230\u6216\u88ab\u62c9\u5230\u53e6\u4e00\u4e2a\u9879\u76ee\u4e2d\uff0c\u53e6\u4e00\u4e2a\u4eba\u53ef\u4ee5\u5728\u6ca1\u6709\u592a\u591a\u5b66\u4e60\u6216\u57f9\u8bad\u7684\u60c5\u51b5\u4e0b\u63a5\u7ba1\u3002\u8fd9\u610f\u5473\u7740\u66f4\u591a\u7684\u4eba\u80fd\u591f\u4ecb\u5165\u6765\u6392\u9664\u6545\u969c\u548c\u89e3\u51b3\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u4e0e\u4f7f\u7528\u81ea\u5b9a\u4e49\u811a\u672c\u548c API \u62fc\u51d1\u800c\u6210\u7684\u4eea\u8868\u677f\u76f8\u6bd4\uff0c\u4f7f\u7528 Tableau \u6784\u5efa\u7684\u5206\u6790\u4eea\u8868\u677f\u53ef\u80fd\u9700\u8981\u66f4\u591a\u7684\u5408\u683c\u4eba\u5458\u6765\u4fee\u590d\u5b83\u3002\u6ca1\u6709\u4eba\u5e94\u8be5\u8ba9\u6570\u636e\u79d1\u5b66\u5bb6\u6216\u4ea7\u54c1\u5f00\u53d1\u4eba\u5458\u79bb\u5f00\u4ed6\u4eec\u7684\u5de5\u4f5c\u6765\u4fee\u590d\u6761\u5f62\u56fe\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u6211\u6bcf\u4e2a\u6708\u5de6\u53f3\u90fd\u4f1a\u5199\u4e00\u7bc7\u8fd9\u6837\u7684\u6587\u7ae0\uff0c\u6db5\u76d6\u4ece\u4e0d\u65ad\u589e\u957f\u7684 B2B \u8f6f\u4ef6\u521d\u521b\u516c\u53f8\u4e2d\u5438\u53d6\u7684\u7ecf\u9a8c\u6559\u8bad\u3002\u5728\u4e0b\u4e00\u4e2a\u53d1\u5e03\u65f6\u83b7\u53d6\u7535\u5b50\u90ae\u4ef6\u66f4\u65b0\uff1a\u5728\u4e00\u4e2a\u6613\u4e8e\u7406\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u884c\u4e3a\u53ca\u5176\u4e0e\u5176\u4ed6\u8bc4\u8bba\u7684\u5173\u7cfb\u7684\u7cfb\u7edf\u4e2d\uff0c\u6392\u9664\u95ee\u9898\u5e76\u627e\u5230\u635f\u574f\u7684\u7ec4\u4ef6\uff08\u6839\u672c\u539f\u56e0\uff09\u66f4\u52a0\u76f4\u89c2\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u5bb6\u516c\u53f8\u5728\u5176\u7f51\u7ad9\u4e0a\u6709\u8bb8\u591a\u53ef\u4e0b\u8f7d\u7684\u767d\u76ae\u4e66\uff0c\u5e76\u4e14\u5b83\u4eec\u90fd\u88ab\u5c01\u95ed\u5728\u4e00\u4e2a\u5355\u4e00\u7684\u8868\u5355\u540e\u9762\u2014\u2014\u800c\u4e0d\u662f\u6bcf\u4e2a\u8868\u5355\u7684\u81ea\u5b9a\u4e49\u8868\u5355\u2014\u2014\u90a3\u4e48\u5982\u679c\u767d\u76ae\u4e66\u4e0b\u8f7d\uff0c\u4ed6\u4eec\u53ea\u9700\u8981\u5bf9\u4e00\u4e2a\u8868\u5355\u548c\u4e00\u4e2a\u81ea\u52a8\u5316\u5de5\u4f5c\u6d41\u7a0b\u8fdb\u884c\u6545\u969c\u6392\u9664\u505c\u6b62\u5de5\u4f5c\u3002\u5f53\u7cfb\u7edf\u7684\u6bcf\u4e2a\u90e8\u5206\u90fd\u6709\u660e\u786e\u7684\u529f\u80fd\u65f6\uff0c\u66f4\u5bb9\u6613\u627e\u5230\u66ff\u4ee3\u65b9\u6848\u3002\n\u4f8b\u5982\uff0c\u5047\u8bbe\u4e00\u4e2a Salesforce \u6d41\u7a0b\u4f7f\u7528\u81ea\u52a8\u5316\u548c\u7b2c\u4e09\u65b9\u5de5\u5177\u7684\u6df7\u5408\u4f53\u6765\u8bc4\u5206\u3001\u8fc7\u6ee4\u3001\u5206\u7c7b\u548c\u5206\u914d\u65b0\u7684\u9500\u552e\u7ebf\u7d22\u3002\u5982\u679c\u5931\u8d25\uff0c\u5219\u6ca1\u6709\u660e\u663e\u7684\u66ff\u4ee3\u54c1\u3002\u4e00\u5207\u90fd\u5c06\u88ab\u6401\u7f6e\uff0c\u76f4\u5230\u8be5\u8fc7\u7a0b\u5f97\u5230\u4fee\u590d\u6216\u88ab\u7c7b\u4f3c\u590d\u6742\u7684\u89e3\u51b3\u65b9\u6848\u53d6\u4ee3\u3002\u73b0\u5728\u60f3\u8c61\u4e00\u4e2a\u9500\u552e\u6d41\u7a0b\uff0c\u5728\u8be5\u6d41\u7a0b\u4e2d\uff0c\u9500\u552e\u56e2\u961f\u4f1a\u6536\u5230\u6bcf\u4e2a\u65b0\u9500\u552e\u7ebf\u7d22\u4ee5\u53ca\u76f8\u5173\u8be6\u7ec6\u4fe1\u606f\u7684\u901a\u77e5\uff0c\u8ba9\u4ed6\u4eec\u51b3\u5b9a\u662f\u5426\u8ddf\u8fdb\u8be5\u7ebf\u7d22\u3002\u5982\u679c Salesforce \u901a\u77e5\u6b65\u9aa4\u5931\u8d25\uff0c\u5f88\u5bb9\u6613\u60f3\u51fa\u4e00\u767e\u79cd\u5176\u4ed6\u65b9\u5f0f\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4f20\u9012\u7ed9\u9500\u552e\u56e2\u961f\uff1a\u62a5\u544a\u3001Slack \u901a\u77e5\u3001\u5217\u8868\u5bfc\u51fa\u3001\u624b\u52a8\u89c2\u5bdf\uff0c\u6216\u4f7f\u7528 Zapier \u901a\u8fc7\u51e0\u4e4e\u4efb\u4f55\u5a92\u4ecb\u53d1\u9001\u8b66\u62a5\u3002\u505c\u673a\u65f6\u95f4\u6700\u591a\u4f1a\u6301\u7eed\u51e0\u5206\u949f\u3002\u6211\u7684\u4e00\u4f4d\u5ba2\u6237\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u4f20\u7edf\u7684\u4f01\u4e1a\u8425\u9500\u81ea\u52a8\u5316\u5e73\u53f0 (Marketo)\uff0c\u5176\u4e2d\u5305\u542b 629 \u4e2a\u81ea\u52a8\u5316\u6d41\u7a0b\uff0c\u5e76\u5728\u51e0\u5e74\u5185\u5efa\u7acb\u8d77\u6765\u3002\u5f53\u67d0\u4ef6\u4e8b\u53d1\u751f\u6545\u969c\u6216\u9700\u8981\u8c03\u6574\u65f6\uff0c150 \u591a\u540d\u5458\u5de5\u4e2d\u53ea\u6709\u4e00\u4e2a\u4eba\u53ef\u4ee5\u505a\u5230\u3002\u6bcf\u4e2a\u95ee\u9898\u90fd\u9700\u8981\u51e0\u5929\u751a\u81f3\u51e0\u5468\u7684\u65f6\u95f4\u6765\u89e3\u51b3\uff0c\u800c\u8425\u9500\u6d3b\u52a8\u4e00\u76f4\u505c\u6ede\u4e0d\u524d\u3002\u968f\u7740\u6bcf\u4e2a\u8865\u4e01\uff0c\u6574\u4e2a\u7cfb\u7edf\u53ea\u4f1a\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002\u5f53\u90a3\u4e2a\u4eba\u79bb\u5f00\u516c\u53f8\u65f6\uff0c\u6ca1\u6709\u4eba\u6765\u64cd\u4f5c\u7cfb\u7edf\u3002\u6bcf\u8fc7\u4e00\u5468\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u901f\u5ea6\u6bd4\u6211\u4eec\u627e\u5230\u5e76\u4fee\u590d\u5b83\u4eec\u7684\u901f\u5ea6\u8981\u5feb\u3002\u4e3a\u4e86\u4e0d\u8ba9\u8425\u9500\u5de5\u4f5c\u9677\u5165\u505c\u987f\uff0c\u6211\u8d76\u7d27\u5c06\u516c\u53f8\u4ece Marketo \u8fc1\u79fb\u5230 HubSpot\uff0c\u8fd9\u662f\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u5e73\u53f0\uff0c\u66f4\u6613\u4e8e\u64cd\u4f5c\u548c\u6545\u969c\u6392\u9664\u3002\u8fc1\u79fb\u53ea\u7528\u4e86\u4e00\u5468\u65f6\u95f4\u3002\u7136\u800c\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u53e6\u4e00\u4e2a\u590d\u6742\u7684\u7cfb\u7edf\u51fa\u73b0\u4e86\uff1aSalesforce\u3002 Salesforce \u4e2d\u6709 10 \u4e2a\u81ea\u52a8\u5316\u6d41\u7a0b\uff0c\u6709 100 \u591a\u4e2a\u7ec4\u5408\u64cd\u4f5c\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u4f9d\u8d56\u4e8e Marketo \u4e2d\u5404\u79cd\u7cbe\u786e\u5b9a\u65f6\u7684\u81ea\u52a8\u5316\u3002\u82b1\u4e86\u4e24\u5468\u65f6\u95f4\uff08\u662f\u8fc1\u79fb\u65f6\u95f4\u7684\u4e24\u500d\uff09\u6765\u4e86\u89e3\u8fd9\u4e9b\u6d41\u7a0b\u5e76\u5c06\u5176\u4e0e\u65b0\u7684\u8425\u9500\u5e73\u53f0\u96c6\u6210\u3002\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u4e24\u4e2a\u590d\u6742\u7684\u7cfb\u7edf\uff08\u5728 Marketo \u548c Salesforce \u4e2d\uff09\u5bfc\u81f4\u8425\u9500\u56e2\u961f\u505c\u673a\u516d\u5468\uff0c\u9500\u552e\u56e2\u961f\u505c\u673a\u4e09\u5468\u3002\u8fd9\u8fd8\u6ca1\u6709\u8ba1\u7b97\u4ed6\u4eec\u5728\u8fc7\u53bb\u51e0\u5e74\u4e2d\u7ecf\u5386\u7684\u6570\u5468\u505c\u673a\u65f6\u95f4\uff0c\u4e5f\u6ca1\u6709\u8ba1\u7b97\u5982\u679c\u6211\u4eec\u4e0d\u5bf9\u5e95\u5c42\u7cfb\u7edf\u8fdb\u884c\u5927\u4fee\u4ed6\u4eec\u5c06\u6765\u4f1a\u7ecf\u5386\u7684\u6570\u5468\u505c\u673a\u65f6\u95f4\u3002\n\u6700\u540e\uff0c\u6211\u90e8\u7f72\u7684\u7cfb\u7edf\u5728\u63d0\u4f9b\u6240\u6709\u76f8\u540c\u529f\u80fd\u7684\u540c\u65f6\uff0c\u6d41\u7a0b\u51cf\u5c11\u4e86 97%\uff08\u4ece 629 \u5230 20\uff09\u3002\u51e0\u5929\u540e\u53d1\u73b0\u7684\u9519\u8bef\u5728\u56db\u5206\u949f\u5185\u5f97\u5230\u89e3\u51b3\u3002\u8fd9\u6b21\u7ecf\u5386\u8ba9\u6211\u60f3\u77e5\u9053\u521d\u521b\u516c\u53f8\u53ef\u4ee5\u91c7\u7528\u54ea\u4e9b\u539f\u5219\u6765\u907f\u514d\u590d\u6742\u7cfb\u7edf\u7684\u9677\u9631\u3002\u5373\u4f7f\u957f\u671f\u6536\u76ca\u662f\u503c\u5f97\u7684\uff0cRip-and-replace \u9879\u76ee\u4e5f\u662f\u75db\u82e6\u4e14\u5177\u6709\u7834\u574f\u6027\u7684\u3002\u8bb8\u591a\u521d\u521b\u516c\u53f8\u2014\u2014\u5c31\u50cf\u8239\u8236\u4e00\u6837\u2014\u2014\u4e00\u65e6\u5f00\u59cb\u5c31\u6ca1\u6709\u8db3\u591f\u7684\u65f6\u95f4\u548c\u8d44\u6e90\u6765\u8fdb\u884c\u5927\u4fee\u3002\u529f\u80fd\u5e76\u4e0d\u80fd\u8bc1\u660e\u590d\u6742\u6027\u662f\u5408\u7406\u7684\u3002\u5982\u679c\u4e00\u4e2a\u590d\u6742\u7684\u98de\u884c\u63a7\u5236\u7cfb\u7edf\u8ba9\u6574\u4e2a\u673a\u961f\u505c\u98de\uff0c\u6216\u8005\u5982\u679c\u6ca1\u6709\u4eba\u53ef\u4ee5\u5f00\u5c55\u8425\u9500\u6d3b\u52a8\uff0c\u90a3\u4e48\u50cf Marketo \u8fd9\u6837\u7684\u4f01\u4e1a\u8425\u9500\u5e73\u53f0\u53c8\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u9009\u62e9\u64cd\u4f5c\u7b80\u5355\u7684\u5de5\u5177\uff0c\u800c\u4e0d\u662f\u90a3\u4e9b\u627f\u8bfa\u6700\u591a\u529f\u80fd\u7684\u5de5\u5177\u3002\u6211\u7ed9\u521d\u521b\u516c\u53f8\u7684\u4e00\u4e2a\u5e38\u89c1\u5efa\u8bae\u662f\u9009\u62e9 HubSpot \u4f5c\u4e3a\u4ed6\u4eec\u7684\u8425\u9500\u5e73\u53f0\uff0c\u800c\u4e0d\u662f\u50cf Marketo\u3001Eloqua \u6216 Pardot \u8fd9\u6837\u7684\u4f01\u4e1a\u5e73\u53f0\u3002\u590d\u6742\u7684\u60f3\u6cd5\u5bfc\u81f4\u590d\u6742\u7684\u5b9e\u73b0\u3002\u5982\u679c\u89e3\u91ca\u6216\u638c\u63e1\u4e00\u4e2a\u60f3\u6cd5\u9700\u8981\u5f88\u957f\u65f6\u95f4\uff0c\u90a3\u4e48\u5b83\u7684\u5b9e\u73b0\u5c31\u4f1a\u5f88\u590d\u6742\uff0c\u800c\u4e14\u5f53\u67d0\u4e9b\u4e8b\u60c5\u4e0d\u53ef\u907f\u514d\u5730\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u4fee\u590d\u4e5f\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u9700\u8981\u4e00\u5c0f\u65f6\u6f14\u793a\u7684\u62df\u8bae\u9500\u552e\u6d41\u7a0b\u5c06\u662f\u4e00\u573a\u5669\u68a6\uff0c\u65e0\u8bba\u5b83\u770b\u8d77\u6765\u591a\u4e48\u806a\u660e\u3002\u6dfb\u52a0\u524d\u7684\u4fee\u6539\u3002\u5f53\u51fa\u73b0\u65b0\u9700\u6c42\u65f6\uff0c\u8d8b\u52bf\u662f\u5728\u73b0\u6709\u7cfb\u7edf\u4e4b\u4e0a\u6dfb\u52a0\u5c42\u2014\u2014\u901a\u8fc7\u989d\u5916\u7684\u6b65\u9aa4\u6216\u96c6\u6210\u3002\u76f8\u53cd\uff0c\u67e5\u770b\u662f\u5426\u53ef\u4ee5\u4fee\u6539\u7cfb\u7edf\u7684\u6838\u5fc3\u4ee5\u6ee1\u8db3\u65b0\u7684\u8981\u6c42\u3002\u4e0e\u6211\u7684 Marketo-to-HubSpot \u8fc1\u79fb\u793a\u4f8b\u4e00\u6837\uff0c\u6b64\u66f4\u6539\u53ef\u80fd\u4f1a\u5bfc\u81f4\uff08\u8ba1\u5212\u5185\u7684\uff09\u9884\u5148\u505c\u673a\uff0c\u4f46\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u4f1a\u51cf\u5c11\uff08\u8ba1\u5212\u5916\u7684\uff09\u505c\u673a\u65f6\u95f4\u3002 \u201c\u2026\u2026\u8d8a\u7b80\u5355\u7684\u4e1c\u897f\u8d8a\u4e0d\u5bb9\u6613\u4e71\uff0c\u4e71\u4e86\u8d8a\u5bb9\u6613\u4fee\u590d\u3002\u201d \u2014 \u6258\u9a6c\u65af\u00b7\u6f58\u6069\uff0c\u300a\u5e38\u8bc6\u300b\uff0c1776 \u5e74\n\u6beb\u65e0\u7591\u95ee\uff0c\u521b\u4e1a\u8fc7\u7a0b\u4e2d\u7684\u4e8b\u60c5\u4f1a\u7834\u88c2\uff0c\u5c31\u50cf\u4ed6\u4eec\u5728\u7a7f\u8d8a\u5168\u7403\u7684\u8239\u4e0a\u4e00\u6837\u3002\u7136\u800c\uff0c\u5982\u679c\u673a\u8f7d\u7cfb\u7edf\u5f88\u7b80\u5355\uff0c\u8fd9\u4e9b\u95ee\u9898\u4e0d\u4f1a\u8ba9\u521d\u521b\u516c\u53f8\u5728\u6d77\u6d0b\u4e2d\u65e0\u52a9\u5730\u6f02\u6d41\u3002 PS - \u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\u5417\uff1f\u6211\u6bcf\u4e2a\u6708\u5de6\u53f3\u5199\u4e00\u7bc7\uff0c\u6db5\u76d6\u4ece B2B \u521d\u521b\u516c\u53f8\u6210\u957f\u4e2d\u5b66\u5230\u7684\u7ecf\u9a8c\u6559\u8bad\u3002\u4e0d\u8981\u9519\u8fc7\u4e0b\u4e00\u4e2a\uff1a", "note_en": "The Maersk Triple-E Class container ship is 1,300 feet long, carries over 18,000 containers across 11,000 miles between Europe and Asia, and\u2026 Its entire crew can fit inside a passenger van.\n  As a former naval architect and a current  marketing consultant to startups, I found that the same principle that lets a 13-person crew navigate the world\u2019s largest container ship to a port halfway around the world without breaking down also applies to startups working towards aggressive growth goals:\n  Ships contain simple systems that are easy to operate and easy to understand, which makes them easy to fix, which means they have less downtime. An important quality, considering that \u201cdowntime\u201d for a ship could mean being stranded thousands of miles from help.\n Take the ship\u2019s steering system, for instance. The rudder is pushed left or right by metal rods. Those rods are moved by hydraulic pressure. That pressure is controlled by a hydraulic pump. That pump is controlled by an electronic signal from the wheelhouse. That signal is controlled by the autopilot. It doesn\u2019t require a rocket scientist or a naval architect to find the cause of and solution to any problem:\n If the electronic signals fail, go to the rudder control room to control the pump by hand, while talking with the bridge through a  simple sound-powered phone.\n    If the mechanical linkage fails, hook a chain to both sides of the rudder and pull in the direction you want!\n  Startups, like ships, can\u2019t afford to stall from system downtimes. Extended downtime in sales, marketing, web, customer support, hiring, product, and other systems may cause irreparable damage to the growth rate.\n (Although automation is prevalent on modern ships, it only affects the time it takes to do things and the attention required to monitor everything. The propulsion and auxiliary systems are more simple than ever, thanks to modern diesel and electric propulsion systems that replaced pipe-laden steam plants.)\n   If the person responsible for the system leaves, falls overboard,  gets hit by a bus, or gets pulled into another project, another person can take over without much learning or training. That means more people are able to step in to troubleshoot and fix issues.\n For example, an analytics dashboard built with Tableau is likely to have more qualified people to fix it than one built with a patchwork of custom scripts and APIs. Nobody should have to pull data scientists or product developers away from their work to fix a bar chart.\n  By the way, I write an article like this every month or so, covering lessons learned from growing B2B software startups. Get an email update when the next one is published:\n    In a system where the behavior of each component and its relationship to other comments is easily understood, ruling out issues and finding the broken component\u2014the root cause\u2014is more intuitive.\n For example, if a company has many downloadable whitepapers on their website, and they\u2019re all gated behind a single form\u2014as opposed to a custom form for each one\u2014then they need only troubleshoot one form and one automation workflow if the whitepaper downloads stop working.\n   When each part of the system has a clear function, alternatives are easier to find.\n For example, imagine a Salesforce process that uses a mishmash of automation and third-party tools to score, filter, classify, and assign new sales leads. If that fails then there is no obvious replacement. Everything will be put on hold until the process is fixed or replaced with a similarly complex solution.\n Now imagine a sales process in which the sales team is simply notified of each new sales lead along with pertinent details, letting them decide whether or not to follow up with the lead. If the Salesforce notification step fails, it\u2019s easy to come up with a hundred other ways of getting that information to the sales team: Reports, Slack notifications, list exports, manual observation, or using Zapier to send an alert through virtually any medium. The downtime would last a few minutes, at most.\n    One of my clients was using a legacy enterprise marketing automation platform (Marketo) with 629 automated processes built up over several years. When something broke or needed tweaking, there was only one person among the 150+ employees who could do it. Each issue took several days or even weeks to fix, all the while marketing campaigns stalled. And with each patch, the overall system only grew more complex.\n  When that person left the company, there was nobody left to operate the system. With every passing week a new issue would come up, faster than we could find and fix them.\n To keep the marketing operation from coming to a standstill, I rushed to migrate the company from Marketo to HubSpot, a more simple platform that would be easier to operate and troubleshoot.\n The migration took just one week. Along the way, however, another complex system reared its head: Salesforce. There were 10 automated processes in Salesforce with over 100 combined operations, all dependent on various delicately timed automations in Marketo. It took two weeks\u2014twice as long as the migration\u2014to understand and integrate those processes with the new marketing platform.\n  Overall, these two complex systems (in Marketo and in Salesforce) resulted in six weeks of downtime for the marketing team and three weeks of downtime for the sales team. That\u2019s not counting the many weeks of downtime they experienced throughout the past few years, nor the many weeks of downtime they would experience in the future if we did not overhaul the underlying systems.\n In the end, the system I put in place had 97% fewer processes (from 629 to 20) while providing all the same capabilities. A bug that was found a few days later got resolved in four minutes.\n This experience made me wonder what principles startups can adopt to avoid the pitfalls of complex systems.\n  Rip-and-replace projects are painful and disruptive, even when the long-term benefits are worth it. Many startups\u2014as with ships\u2014don\u2019t have the luxury of time and resources to perform overhauls once they\u2019re underway.\n  Features don\u2019t justify complexity. What good is a complicated flight control system if it grounds an entire fleet of aircraft, or an enterprise marketing platform like Marketo if nobody can run a marketing campaign? Choose tools that are simple to operate over those that promise the most features. A frequent recommendation I give to startups is to choose HubSpot for their marketing platform instead of an enterprise platform like Marketo, Eloqua, or Pardot.\n  Complex ideas lead to complex implementations. If it takes too long to explain or grasp an idea, then its implementation will be complex, and it will take too long to fix when something inevitably breaks. For example, a proposed sales process that requires an hour-long presentation will be a nightmare to maintain, regardless of how clever it seems.\n  Modifications before additions. When new requirements come up, the tendency is to add layers on top of the existing system\u2014by way of additional steps or integrations. Instead, see if the system\u2019s core can be modified to meet the new requirements. The change may cause (planned) downtime upfront, as with my Marketo-to-HubSpot migration example, but less (unplanned) downtime over the long term.\n  \u201c\u2026 the more simple any thing is, the less liable it is to be disordered, and the easier repaired when disordered.\u201d \u2014 Thomas Paine, Common Sense, 1776\n There\u2019s no question things will break along the startup journey, just as surely as they do on a ship crossing the globe. However, if the onboard systems are simple, those issues won\u2019t leave the startup drifting helplessly in the middle of the ocean.\n      PS - Liked this article? I write one every month or so, covering lessons learned on B2B startup growth. Don&#39;t miss the next one:", "posttime": "2021-08-05 20:42:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u505c\u673a,systems,\u7cfb\u7edf", "title": "\u7b80\u5355\u7cfb\u7edf\u7684\u505c\u673a\u65f6\u95f4\u66f4\u5c11\uff082020 \u5e74\uff09", "title_en": "Simple Systems Have Less Downtime (2020)", "transed": 1, "url": "https://www.gkogan.co/blog/simple-systems/", "via": "", "real_tags": ["2020", "\u505c\u673a", "systems", "\u7cfb\u7edf"]}]