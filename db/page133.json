[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1069506, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u6709\u7528\uff0c\u65e0\u4eba\u673a\u9700\u8981\u5feb\u901f\u3002\u7531\u4e8e\u7535\u6c60\u5bff\u547d\u6709\u9650\uff0c\u4ed6\u4eec\u5fc5\u987b\u5728\u5c3d\u53ef\u80fd\u77ed\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u4efb\u4f55\u4efb\u52a1\u2014\u2014\u5728\u707e\u96be\u73b0\u573a\u5bfb\u627e\u5e78\u5b58\u8005\u3001\u68c0\u67e5\u5efa\u7b51\u7269\u3001\u8fd0\u9001\u8d27\u7269\u3002\u4ed6\u4eec\u53ef\u80fd\u5fc5\u987b\u901a\u8fc7\u4e00\u7cfb\u5217\u822a\u8def\u70b9\uff08\u5982\u7a97\u6237\u3001\u623f\u95f4\u6216\u7279\u5b9a\u4f4d\u7f6e\uff09\u8fdb\u884c\u68c0\u67e5\uff0c\u5728\u6bcf\u4e2a\u8def\u6bb5\u91c7\u7528\u6700\u4f73\u8f68\u8ff9\u548c\u6b63\u786e\u7684\u52a0\u901f\u6216\u51cf\u901f\u3002\u6700\u597d\u7684\u4eba\u7c7b\u65e0\u4eba\u673a\u98de\u884c\u5458\u975e\u5e38\u64c5\u957f\u8fd9\u6837\u505a\uff0c\u5e76\u4e14\u8fc4\u4eca\u4e3a\u6b62\u5728\u65e0\u4eba\u673a\u6bd4\u8d5b\u4e2d\u7684\u8868\u73b0\u603b\u662f\u4f18\u4e8e\u81ea\u4e3b\u7cfb\u7edf\u3002\u73b0\u5728\uff0c\u82cf\u9ece\u4e16\u5927\u5b66 (UZH) \u7684\u4e00\u4e2a\u7814\u7a76\u5c0f\u7ec4\u521b\u5efa\u4e86\u4e00\u79cd\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u53ef\u4ee5\u627e\u5230\u6700\u5feb\u7684\u8f68\u8ff9\u6765\u5f15\u5bfc\u56db\u65cb\u7ffc\u98de\u884c\u5668\u2014\u2014\u4e00\u79cd\u5e26\u6709\u56db\u4e2a\u87ba\u65cb\u6868\u7684\u65e0\u4eba\u673a\u2014\u2014\u901a\u8fc7\u7535\u8def\u4e0a\u7684\u4e00\u7cfb\u5217\u822a\u70b9\u3002 \u201c\u6211\u4eec\u7684\u65e0\u4eba\u673a\u5728\u5b9e\u9a8c\u8d5b\u9053\u4e0a\u51fb\u8d25\u4e86\u4e24\u540d\u4e16\u754c\u7ea7\u4eba\u7c7b\u98de\u884c\u5458\u7684\u6700\u5feb\u5708\u901f\u201d\uff0c\u5927\u536b\u00b7\u65af\u5361\u62c9\u7a46\u624e\u8bf4\uff0c\u4ed6\u662f UZH \u673a\u5668\u4eba\u548c\u611f\u77e5\u5c0f\u7ec4\u548c NCCR Robotics \u6551\u63f4\u673a\u5668\u4eba\u5927\u6311\u6218\u7684\u8d1f\u8d23\u4eba\uff0c\u8be5\u9879\u76ee\u8d44\u52a9\u4e86\u8fd9\u9879\u7814\u7a76\u3002 Scaramuzza \u8bf4\uff1a\u201c\u8be5\u7b97\u6cd5\u7684\u65b0\u9896\u4e4b\u5904\u5728\u4e8e\u5b83\u662f\u7b2c\u4e00\u4e2a\u751f\u6210\u5145\u5206\u8003\u8651\u65e0\u4eba\u673a\u5c40\u9650\u6027\u7684\u65f6\u95f4\u6700\u4f73\u8f68\u8ff9\u7684\u7b97\u6cd5\u3002\u201d\u4ee5\u524d\u7684\u5de5\u4f5c\u4f9d\u8d56\u4e8e\u56db\u65cb\u7ffc\u7cfb\u7edf\u7684\u7b80\u5316\u6216\u98de\u884c\u8def\u5f84\u7684\u63cf\u8ff0\uff0c\u56e0\u6b64\u5b83\u4eec\u662f\u6b21\u4f18\u7684\u3002 \u201c\u5173\u952e\u7684\u60f3\u6cd5\u662f\uff0c\u6211\u4eec\u7684\u7b97\u6cd5\u53ea\u662f\u544a\u8bc9\u65e0\u4eba\u673a\u901a\u8fc7\u6240\u6709\u822a\u70b9\uff0c\u800c\u4e0d\u662f\u5982\u4f55\u6216\u4f55\u65f6\u901a\u8fc7\u6240\u6709\u822a\u70b9\uff0c\u800c\u4e0d\u662f\u5c06\u98de\u884c\u8def\u5f84\u7684\u5404\u4e2a\u90e8\u5206\u5206\u914d\u7ed9\u7279\u5b9a\u7684\u822a\u8def\u70b9\uff0c\u201d\u535a\u58eb\u751f\u517c\u7b2c\u4e00\u4f5c\u8005 Philipp Foehn \u8865\u5145\u9053\u7684\u7eb8\u3002\u7814\u7a76\u4eba\u5458\u8ba9\u7b97\u6cd5\u548c\u4e24\u540d\u4eba\u7c7b\u98de\u884c\u5458\u9a7e\u9a76\u540c\u4e00\u4e2a\u56db\u65cb\u7ffc\u98de\u884c\u5668\u7a7f\u8fc7\u8d5b\u9053\u3002\u4ed6\u4eec\u4f7f\u7528\u5916\u90e8\u6444\u50cf\u5934\u6765\u7cbe\u786e\u6355\u6349\u65e0\u4eba\u673a\u7684\u8fd0\u52a8\uff0c\u5e76\u4e14\u2014\u2014\u5728\u81ea\u4e3b\u65e0\u4eba\u673a\u7684\u60c5\u51b5\u4e0b\u2014\u2014\u5411\u7b97\u6cd5\u63d0\u4f9b\u6709\u5173\u65e0\u4eba\u673a\u5728\u4efb\u4f55\u65f6\u523b\u6240\u5904\u4f4d\u7f6e\u7684\u5b9e\u65f6\u4fe1\u606f\u3002\u4e3a\u4e86\u786e\u4fdd\u516c\u5e73\u6bd4\u8f83\uff0c\u4eba\u7c7b\u98de\u884c\u5458\u6709\u673a\u4f1a\u5728\u8d5b\u524d\u5728\u8d5b\u9053\u4e0a\u8fdb\u884c\u8bad\u7ec3\u3002\u4f46\u662f\u7b97\u6cd5\u8d62\u4e86\uff1a\u5b83\u6240\u6709\u7684\u5708\u6570\u90fd\u6bd4\u4eba\u7c7b\u7684\u8981\u5feb\uff0c\u800c\u4e14\u6027\u80fd\u66f4\u7a33\u5b9a\u3002\u8fd9\u5e76\u4e0d\u5947\u602a\uff0c\u56e0\u4e3a\u4e00\u65e6\u7b97\u6cd5\u627e\u5230\u4e86\u6700\u4f73\u8f68\u8ff9\uff0c\u5b83\u5c31\u53ef\u4ee5\u591a\u6b21\u5fe0\u5b9e\u5730\u518d\u73b0\u5b83\uff0c\u8fd9\u4e0e\u4eba\u7c7b\u98de\u884c\u5458\u4e0d\u540c\u3002\u5728\u5546\u4e1a\u5e94\u7528\u4e4b\u524d\uff0c\u8be5\u7b97\u6cd5\u9700\u8981\u964d\u4f4e\u8ba1\u7b97\u8981\u6c42\uff0c\u56e0\u4e3a\u73b0\u5728\u8ba1\u7b97\u673a\u9700\u8981\u957f\u8fbe\u4e00\u4e2a\u5c0f\u65f6\u6765\u8ba1\u7b97\u65e0\u4eba\u673a\u7684\u65f6\u95f4\u6700\u4f73\u8f68\u8ff9\u3002\u6b64\u5916\uff0c\u76ee\u524d\uff0c\u65e0\u4eba\u673a\u4f9d\u9760\u5916\u90e8\u6444\u50cf\u5934\u968f\u65f6\u8ba1\u7b97\u5176\u6240\u5728\u4f4d\u7f6e\u3002\u5728\u672a\u6765\u7684\u5de5\u4f5c\u4e2d\uff0c\u79d1\u5b66\u5bb6\u4eec\u5e0c\u671b\u4f7f\u7528\u673a\u8f7d\u76f8\u673a\u3002\u4f46\u81ea\u52a8\u65e0\u4eba\u673a\u539f\u5219\u4e0a\u53ef\u4ee5\u6bd4\u4eba\u7c7b\u98de\u884c\u5458\u98de\u5f97\u66f4\u5feb\u7684\u6f14\u793a\u662f\u6709\u5e0c\u671b\u7684\u3002 Scaramuzza \u8bf4\uff1a\u201c\u8fd9\u79cd\u7b97\u6cd5\u53ef\u4ee5\u5728\u65e0\u4eba\u673a\u5305\u88f9\u9012\u9001\u3001\u68c0\u67e5\u3001\u641c\u7d22\u548c\u6551\u63f4\u7b49\u65b9\u9762\u6709\u5de8\u5927\u7684\u5e94\u7528\u3002\u201d\u83f2\u5229\u666e\u00b7\u5f17\u6069\u3001\u5b89\u5409\u5c14\u00b7\u7f57\u6885\u7f57\u3001\u5927\u536b\u00b7\u65af\u5361\u62c9\u7a46\u624eQuadrotor Waypoint \u98de\u884c\u7684\u65f6\u95f4\u6700\u4f18\u89c4\u5212\u3002\u79d1\u5b66\u673a\u5668\u4eba\u3002 2021 \u5e74 7 \u6708 21 \u65e5\u3002DOI\uff1a10.1126/scirobotics.abh1221", "note_en": "To be useful, drones need to be quick. Because of their limited battery life they must complete whatever task they have \u2013 searching for survivors on a disaster site, inspecting a building, delivering cargo \u2013 in the shortest possible time. And they may have to do it by going through a series of waypoints like windows, rooms, or specific locations to inspect, adopting the best trajectory and the right acceleration or deceleration at each segment.\n  The best human drone pilots are very good at doing this and have so far always outperformed autonomous systems in drone racing. Now, a research group at the University of Zurich (UZH) has created an algorithm that can find the quickest trajectory to guide a quadrotor \u2013 a drone with four propellers \u2013 through a series of waypoints on a circuit. \u201cOur drone beat the fastest lap of two world-class human pilots on an experimental race track\u201d, says Davide Scaramuzza, who heads the Robotics and Perception Group at UZH and the Rescue Robotics Grand Challenge of the NCCR Robotics, which funded the research.\n \u201cThe novelty of the algorithm is that it is the first to generate time-optimal trajectories that fully consider the drones\u2019 limitations\u201d, says Scaramuzza. Previous works relied on simplifications of either the quadrotor system or the description of the flight path, and thus they were sub-optimal. \u201cThe key idea is, rather than assigning sections of the flight path to specific waypoints, that our algorithm just tells the drone to pass through all waypoints, but not how or when to do that\u201d, adds Philipp Foehn, PhD student and first author of the paper.\n  The researchers had the algorithm and two human pilots fly the same quadrotor through a race circuit. They employed external cameras to precisely capture the motion of the drones and \u2013 in the case of the autonomous drone \u2013 to give real-time information to the algorithm on where the drone was at any moment. To ensure a fair comparison, the human pilots were given the opportunity to train on the circuit before the race. But the algorithm won: all its laps were faster than the human ones, and the performance was more consistent. This is not surprising, because once the algorithm has found the best trajectory it can reproduce it faithfully many times, unlike human pilots.\n Before commercial applications, the algorithm will need to become less computationally demanding, as it now takes up to an hour for the computer to calculate the time-optimal trajectory for the drone. Also, at the moment, the drone relies on external cameras to compute where it was at any moment. In future work, the scientists want to use onboard cameras. But the demonstration that an autonomous drone can in principle fly faster than human pilots is promising. \u201cThis algorithm can have huge applications in package delivery with drones, inspection, search and rescue, and more\u201d, says Scaramuzza.\n  Philipp Foehn, Angel Romero, Davide Scaramuzza. Time-Optimal Planning for Quadrotor Waypoint Flight. Science Robotics. July 21, 2021. DOI: 10.1126/scirobotics.abh1221", "posttime": "2021-07-25 04:58:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,\u4eba\u7c7b,flies,\u65e0\u4eba\u673a", "title": "\u65b0\u7b97\u6cd5\u6bd4\u4eba\u7c7b\u8d5b\u8f66\u98de\u884c\u5458\u66f4\u5feb\u5730\u98de\u884c\u65e0\u4eba\u673a", "title_en": "New algorithm flies drones faster than human racing pilots", "transed": 1, "url": "https://www.media.uzh.ch/en/Press-Releases/2021/Drone-Race.html", "via": "", "real_tags": ["\u7b97\u6cd5", "\u4eba\u7c7b", "flies", "\u65e0\u4eba\u673a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069505, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u524d\u4e00\u5468\uff0c\u6211\u5076\u7136\u53d1\u73b0\u4e86\u5728 SQLite \u4e2d\u63d2\u5165\u5341\u4ebf\u884c\u4e00\u5206\u949f\u7684\u5e16\u5b50\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u5de7\u5408\uff0c\u56e0\u4e3a\u6211\u6b63\u5728\u5bf9\u6211\u81ea\u5df1\u7684 SQLite/Objective-Sadapter \u8fdb\u884c\u4e00\u4e9b\u8c03\u6574\u3002 \uff08\u5e16\u5b50\u7684\u6807\u9898\u540e\u6765\u52a0\u4e0a\u4e86\u201cTowards\u201d\uff0c\u56e0\u4e3a\u4f5c\u8005\u8fd8\u6ca1\u6709\u63a5\u8fd1\u8fbe\u5230\u90a3\u4e2a\u76ee\u6807\uff09\u3002\u8fd9\u4e2a SQLite \u9002\u914d\u5668\u662f\u6211\u4e4b\u524d\u5173\u4e8e\u4f18\u5316 JSON \u6027\u80fd\u7684\u7cfb\u5217\u6587\u7ae0\u7684\u884d\u751f\u4ea7\u54c1\uff0c\u5b83\u672c\u8eab\u662f\u7531 Swift Coding \u5728\u8fd9\u4e2a\u76f8\u5f53\u7b80\u5355\u548c\u76f8\u5173\u7684\u4efb\u52a1\u4e2d\u8868\u73b0\u5f97\u975e\u5e38\u7cdf\u7cd5\u800c\u89e6\u53d1\u7684\u3002\u56de\u987e\u4e00\u4e0b\uff1aSwift \u7684 JSON \u7f16\u7801\u5668\u7684\u65f6\u949f\u901f\u5ea6\u7ea6\u4e3a 10MB/s\u3002\u901a\u8fc7\u4f7f\u7528\u6d41\u5a92\u4f53\u65b9\u6cd5\u548c\u4e00\u4e9b\u8c03\u6574\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u5927\u7ea6 200MB/s\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u6211\u4e00\u76f4\u81f4\u529b\u4e8e\u4f7f Objective-S \u5bf9 UI \u5de5\u4f5c\u66f4\u52a0\u6709\u7528\uff0c\u5bf9\u8c61\u5b57\u9762\u91cf\u8bed\u6cd5\u4f7f\u5f97\u5b9a\u4e49 UI \u4e0e\u5404\u79cd\u201c\u58f0\u660e\u6027\u201d\u529f\u80fd\u65b9\u6cd5\uff08\u4f8b\u5982 React \u6216 SwiftUI\uff09\u4e00\u6837\u65b9\u4fbf\u3002\u9664\u975e\u5b83\u4ecd\u7136\u4f7f\u7528\u6211\u4eec\u719f\u6089\u548c\u559c\u7231\u7684 AppKit \u6216 UIKit \u5bf9\u8c61\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f3a\u8feb\u6211\u4eec\u63a5\u53d7 UI \u662f\u6a21\u578b\u7684\u7eaf\u51fd\u6570\u7684\u611a\u8822\u89c2\u5ff5\u3002\u54e6\uff0c\u4f60\u4f1a\u5f97\u5230\u771f\u6b63\u6709\u6548\u7684\u5b9e\u65f6\u9884\u89c8\u3002\u4f46\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002\u6240\u4ee5\u6211\u6b63\u5728\u6162\u6162\u5730\u505a\u4e00\u4e2a ToDoMVC\uff0c\u4e00\u4e2a\u5bf9\u6211\u6765\u8bf4\u611f\u89c9\u5f88\u81ea\u7136\u7684\u57fa\u51c6\u3002\u867d\u7136\u6211\u4ecd\u7136\u975e\u5e38\u503e\u5411\u4e8e\u8f6c\u50a8 JSON \u6587\u4ef6\uff0c\u800c\u4e14\u4e4b\u524d\u7684\u7cfb\u5217\u6587\u7ae0\u5e0c\u671b\u8868\u660e\u8fd9\u79cd\u65b9\u6cd5\u8db3\u591f\u5feb\uff0c\u4f46\u6211\u610f\u8bc6\u5230\u5f88\u591a\u4eba\u66f4\u559c\u6b22\u201c\u771f\u6b63\u7684\u201d\u6570\u636e\u5e93\uff0c\u5c24\u5176\u662f\u5728\u540e\u7aef\uff0c\u6211\u60f3\u8981\u4e5f\u53ef\u4ee5\u6784\u5efa\u5b83\u3002\u6211\u5bf9 Objective-S \u7684\u4f17\u591a\u57fa\u51c6\u6d4b\u8bd5\u4e4b\u4e00\u662f\uff0c\u7528\u5b83\u6784\u5efa\u66f4\u597d\u7684 Rails \u5e94\u8be5\u662f\u53ef\u80fd\u7684\u3002 \uff08\u6b64\u65f6\u6211\u5f88\u786e\u5b9a\u6211\u4f1a\u8fbe\u5230\u8be5\u57fa\u51c6\uff09\u3002\u5224\u65ad\u4f60\u662f\u5426\u6709\u4e00\u4e2a\u597d\u7684\u8bbe\u8ba1\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u5bf9\u5176\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3002\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u538b\u529b\u6d4b\u8bd5\u662f\u770b\u770b\u5b83\u53ef\u4ee5\u8fd0\u884c\u591a\u5feb\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u544a\u8bc9\u4f60\u4f60\u6784\u5efa\u7684\u4e1c\u897f\u662f\u5426\u7cbe\u76ca\uff0c\u6216\u8005\u4f60\u662f\u5426\u653e\u5165\u4e86\u4e0d\u5fc5\u8981\u7684\u5c42\u548c\u95f4\u63a5\u3002\u8fd9\u5728\u811a\u672c\u7ec4\u4ef6 (pdf) \u7cfb\u7edf\u4e2d\u7279\u522b\u6709\u8da3\uff0c\u8be5\u7cfb\u7edf\u5c06\u76f8\u5bf9\u7f13\u6162\u4f46\u7075\u6d3b\u7684\u4ea4\u4e92\u5f0f\u811a\u672c\u8bed\u8a00\u4e0e\u5feb\u901f\u3001\u4f18\u5316\u7684\u7ec4\u4ef6\u76f8\u7ed3\u5408\u3002\u95ee\u9898\u662f\u60a8\u662f\u5426\u53ef\u4ee5\u5728\u83b7\u5f97\u5feb\u901f\u7ec4\u4ef6\u7684\u597d\u5904\u7684\u540c\u65f6\u771f\u6b63\u7ed3\u5408\u811a\u672c\u8bed\u8a00\u7684\u7075\u6d3b\u6027\uff0c\u800c\u4e0d\u662f\u5fc5\u987b\u6df1\u5165\u9002\u5e94\u548c\u4f18\u5316\u6bcf\u4e2a\u7528\u4f8b\u7684\u7ec4\u4ef6\uff0c\u6216\u8005\u5c3d\u7ba1\u7ec4\u4ef6\u5feb\u901f\uff0c\u4f46\u6027\u80fd\u5374\u5f88\u6162\u3002\u6211\u7684\u9884\u611f\u662f\uff0c\u6211\u5df2\u7ecf\u4f7f\u7528\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6d41\u5a92\u4f53\u65b9\u6cd5\u5bf9\u4e8e JSON \u548c Objective-C \u975e\u5e38\u6709\u6548\uff0c\u5728\u8fd9\u4e2a\u66f4\u5177\u6311\u6218\u6027\u7684\u73af\u5883\u4e2d\u4e5f\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002\u5267\u900f\u8b66\u62a5\uff1a\u786e\u5b9e\u5982\u6b64\uff01\u57fa\u51c6\u6d4b\u8bd5\u662f\u811a\u672c\u7684\u7a0d\u5fae\u4fee\u6539\u7248\u672c\uff0c\u7528\u4f5c\u4efb\u52a1\u540e\u7aef\u3002\u5c31\u50cf\u4e0a\u8ff0\u793a\u4f8b\u811a\u672c\u4e00\u6837\uff0c\u5b83\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a\u4efb\u52a1\u6570\u636e\u5e93\u5e76\u63d2\u5165\u4e86\u4e00\u4e9b\u793a\u4f8b\u884c\u3002\u5b83\u4e0d\u662f\u63d2\u5165\u4e24\u884c\uff0c\u800c\u662f\u63d2\u5165 1000 \u4e07\u3002\u6216\u8005\u4e00\u4ebf\u3002 #!env stsh#- taskbench: dbref#class Task { var id.\u5b8c\u6210\u3002 var \u6807\u9898\u3002 -\u63cf\u8ff0 { \u201d \u201d\u3002 } +sqlForCreate { &#39;( [id] INTEGER PRIMARY KEY, [title] VARCHAR(220) NOT NULL, [done] INTEGER );&#39;. }}.scheme todo : MPWAbstractStore { var db. var \u4efb\u52a1\u8868\u3002 -initWithRef:ref { this:db := (MPWStreamQLite \u5206\u914d initWithPath:ref \u8def\u5f84)\u3002 this:tasksTable := #MPWSQLTable{ #db: this:db , #tableClass: Task, #name: &#39;tasks&#39; }.\u8fd9\uff1a\u6570\u636e\u5e93\u6253\u5f00\u3002\u81ea\u5df1\u3002 } - createTable { this:tasksTable \u521b\u5efa\u3002 this:tasksTable := this:db \u8868\u5728\uff1a&#39;tasks&#39;\u3002 this:tasksTable createEncoderMethodForClass: \u4efb\u52a1\u3002 } -createTaskListToInsert: log10ofSize { baseList \u2190 #( #Task{ #title: &#39;Clean Room&#39;, #done: false }, #Task{ #title: &#39;Check Twitter&#39;, #done: true } )\u3002 ...\u590d\u5236...\u4efb\u52a1\u5217\u8868\u3002 } - insertTasks { taskList := self createTaskListToInsert:6\u3002 1 \u5230\uff1a10 \u505a\uff1a{ this:tasksTable insert:taskList. }. }}.todo := todo alloc initWithRef:dbref.todo createTable.todo insertTasks\u3002 \uff08\u6211\u5df2\u7ecf\u5220\u9664\u4e86\u5c06 2 \u4e2a\u4efb\u52a1\u590d\u5236\u5230\u6211\u4eec\u9700\u8981\u63d2\u5165\u7684\u6570\u767e\u4e07\u4e2a\u4efb\u52a1\u7684\u5217\u8868\u4e2d\u7684\u65b9\u6cd5\u7684\u4e3b\u4f53\u3002\u5b83\u5f88\u5e9e\u5927\u800c\u4e14\u4e0d\u76f8\u5173\u3002\uff09\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 Task \u7c7b\u5e76\u4f7f\u7528\u5b83\u6765\u521b\u5efa SQL \u8868.\u6211\u4eec\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u521b\u5efa\u8868\u5e76\u4ece\u4e2d\u751f\u6210\u4e00\u4e2a Tasks \u7c7b\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8fd0\u884c\u6b64\u811a\u672c\u4f1a\u4ea7\u751f\u4ee5\u4e0b\u7ed3\u679c\u3002 &gt; \u65f6\u95f4 ./taskbench-sqlite.st /tmp/tasks1.db ./taskbench-sqlite.st /tmp/tasks1.db 4.07s \u7528\u6237 0.20s \u7cfb\u7edf 98% cpu 4.328 \u603b\u8ba1&gt; ls -al /tmp/tasks1.db* -rw-r--r-- 1 marcel wheel 214M Jul 24 20:11 /tmp/tasks1.db&gt; sqlite3 /tmp/tasks1.db &#39;select count(id) from tasks;&#39; 10000000 \u6240\u4ee5\u6211\u4eec\u5728 4.328 \u79d2\u5185\u63d2\u5165\u4e86 10M \u884c\uff0c\u4ea7\u751f\u4e86\u6570\u767e\u5146\u5b57\u8282\u7684 SQLite \u6570\u636e\u3002\u5982\u679c\u6211\u4eec\u8ba9\u5b83\u8fd0\u884c\u4e00\u5206\u949f\uff0c\u8fd9\u5c06\u662f 138M \u884c\u3002\u597d\u7684\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u539f\u59cb\u6587\u7ae0\u7684\u6570\u5b57\u5bf9\u4e8e CPython \u662f 1100 \u4e07\u884c/\u5206\u949f\uff0c\u5bf9\u4e8e PyPy \u662f 4000 \u4e07\u884c/\u5206\u949f\uff0c\u5bf9\u4e8e Rust \u662f 1.81 \u4ebf\u884c/\u5206\u949f\uff0c\u5c3d\u7ba1\u5728\u901f\u5ea6\u8f83\u6162\u7684\u82f1\u7279\u5c14 MacBookPro \u4e0a\u8fd0\u884c\uff0c\u800c\u6211\u5728 M1 Air \u4e0a\u8fd0\u884c\u5b83\u3002\u6211\u5728\u6211\u7684 M1 Air \u4e0a\u7f16\u8bd1\u5e76\u8fd0\u884c\u4e86 Rust \u7248\u672c\uff0c\u5b83\u5728 21 \u79d2\u5185\u5b8c\u6210\u4e86 100M \u884c\uff0c\u6240\u4ee5\u6bd4\u6211\u7684 Objective-S \u811a\u672c\u5feb\u4e24\u500d\u591a\uff0c\u5c3d\u7ba1\u4f7f\u7528\u4e86\u66f4\u7b80\u5355\u7684\u6a21\u5f0f\uff08CHAR(6) \u800c\u4e0d\u662f VARCHAR(220)\uff09 ) \u548c\u66f4\u5c11\u7684\u6570\u636e\uff081.5GB \u4e0e 100M \u884c\u7684 2.1GB\uff09\u3002\u811a\u672c\u7684\u521d\u59cb\u7248\u672c\u8981\u6162\u5f97\u591a\uff0c\u800c\u4e14\u8d77\u521d\u5b83\u662f\uff0c\u5443\uff0cSQLite \u7684\u201c\u6b21\u4f18\u201d\u4f7f\u7528\uff0c\u8fd9\u662f\u4e3b\u8981\u7684\u7f6a\u9b41\u7978\u9996\uff0c\u4e3b\u8981\u662f\u5728\u6ca1\u6709\u6279\u5904\u7406\u7684\u60c5\u51b5\u4e0b\u5355\u72ec\u63d2\u5165\u6bcf\u4e00\u884c\u3002\u5f53 SQLite \u770b\u5230\u4e8b\u52a1\u4e2d\u672a\u5305\u542b\u7684 INSERT\uff08\u6216\u4e0e\u6b64\u76f8\u5173\u7684 UPDATE\uff09\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u5c06\u8be5 INSERT \u5305\u88c5\u5728\u751f\u6210\u7684\u4e8b\u52a1\u4e2d\uff0c\u5e76\u5728\u5904\u7406 INSERT \u540e\u63d0\u4ea4\u8be5\u4e8b\u52a1\u3002\u7531\u4e8e SQLite \u975e\u5e38\u6ce8\u91cd\u786e\u4fdd\u4e8b\u52a1\u4ee5\u539f\u5b50\u65b9\u5f0f\u5230\u8fbe\u78c1\u76d8\uff0c\u56e0\u6b64\u901f\u5ea6\u5f88\u6162\u3002\u975e\u5e38\u6162\u3002\u5904\u7406 SQLite \u63d2\u5165\u7684\u7c7b\u662f\u4e00\u4e2a\u591a\u6001\u5199\u5165\u6d41\uff0c\u56e0\u6b64\u5b83\u77e5\u9053\u6570\u7ec4\u662f\u4ec0\u4e48\u3002\u5f53\u5b83\u9047\u5230\u4e00\u4e2a\u6570\u7ec4\u65f6\uff0c\u5b83\u4f1a\u5411\u81ea\u5df1\u53d1\u9001 beginArray \u6d88\u606f\uff0c\u5199\u5165\u6570\u7ec4\u7684\u5185\u5bb9\u5e76\u901a\u8fc7\u5411\u81ea\u5df1\u53d1\u9001 endArray \u6d88\u606f\u6765\u5b8c\u6210\u3002\u56e0\u4e3a\u7f16\u5199\u4e00\u4e2a\u6570\u7ec4\u610f\u5473\u7740\u4f60\u60f3\u5199\u6240\u6709\u5b83\uff0c\u8fd9\u662f\u4e00\u4e2a\u63d2\u5165\u4e8b\u52a1\u7684\u597d\u5730\u65b9\uff1a\u6240\u4ee5\u73b0\u5728\uff0c\u5982\u679c\u4f60\u60f3\u5c06\u4e00\u5806\u5bf9\u8c61\u4f5c\u4e3a\u5355\u4e2a\u4e8b\u52a1\u7f16\u5199\uff0c\u53ea\u9700\u5c06\u5b83\u4eec\u5199\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5982\u57fa\u51c6\u4ee3\u7801\u53ef\u4ee5\u3002\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5c0f\u95ee\u9898\uff0c\u4f46\u5728\u90a3\u4e4b\u540e\u4e0d\u5230 10% \u7684\u603b\u65f6\u95f4\u82b1\u5728 SQLite \u4e0a\uff0c\u6240\u4ee5\u662f\u65f6\u5019\u4f18\u5316\u8c03\u7528\u8005\uff0c\u6211\u7684\u4ee3\u7801\u4e86\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u7684\u731c\u6d4b\u662f\u5269\u4e0b\u7684\u6700\u5927\u7684\u51cf\u901f\u5c06\u662f\u6211\u7684\uff0c\u5443\uff0c\u201c\u96c4\u4f1f\u7684\u201dObjective-Sinterpreter\u3002\u6211\u9519\u4e86\uff0c\u8fd9\u662f\u53ef\u53ef\u5b57\u7b26\u4e32\u5904\u7406\u3002\u6211\u4e0d\u4ec5\u662f\u52a8\u6001\u521b\u5efa SQLite \u53c2\u6570\u5360\u4f4d\u7b26\u952e\uff0c\u56e0\u6b64\u4e3a\u6bcf\u4e00\u884c\u7684\u6bcf\u4e00\u5217\u5206\u914d\u65b0\u7684 NSString \u5bf9\u8c61\uff0c\u800c\u4e14\u73b0\u5728\u4ece NSString \u5bf9\u8c61\u83b7\u53d6\u5b57\u7b26\u6570\u636e\u6d89\u53ca\u4f7f\u7528\u7f16\u7801\u8f6c\u6362\u6d41\u7684\u4e00\u4e9b\u975e\u5e38\u590d\u6742\u548c\u7f13\u6162\u7684\u5185\u90e8\u673a\u5236\u3002 -UTF8String \u4e0d\u662f\u60a8\u7684\u670b\u53cb\uff0c\u5176\u4ed6\u65b9\u6cd5\u4f3c\u4e4e\u76f8\u5f53\u4e00\u81f4\u5730\u4f7f\u7528\u76f8\u540c\u7684\u6162\u901f\u673a\u5236\u3002\u6211\u60f3\u8ba9 NSString \u6162\u5f97\u53ef\u6015\u662f\u4e00\u79cd\u8ba9\u5176\u4ed6\u5b57\u7b26\u4e32\u5904\u7406\u770b\u8d77\u6765\u66f4\u597d\u7684\u65b9\u6cd5\u3002\u7ecf\u8fc7\u51e0\u6b21\u8f6c\u6362\u540e\uff0c\u4ee3\u7801\u5c06\u5728\u5b57\u5178\u4e2d\u67e5\u627e\u4f20\u5165\u7684 NSString \u952e\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230 SQLite \u53c2\u6570\u7d22\u5f15\u3002\u907f\u514d\u4e86\u5b57\u7b26\u4e32\u5904\u7406\u548c\u5b57\u7b26\u8bbf\u95ee\u3002\u5173\u4e8e\u57fa\u51c6\u4ee3\u7801\u4e2d\u7684\u7c7b\u5b9a\u4e49\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u7684\u4e00\u4ef6\u4e8b\u662f\u6ca1\u6709\u7f16\u7801\u5668\u65b9\u6cd5\uff0c\u5b83\u53ea\u5b9a\u4e49\u4e86\u5b83\u7684\u5b9e\u4f8b\u53d8\u91cf\u548c\u4e00\u4e9b\u5176\u4ed6\u5b9e\u7528\u7a0b\u5e8f\u3002\u90a3\u4e48SQLTable \u7684classdata \u662f\u5982\u4f55\u7f16\u7801\u7684\u5462\uff1f KVC\uff1f\u4e0d\uff0c\u8fd9\u4f1a\u6709\u70b9\u6162\uff0c\u5c3d\u7ba1\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u540e\u5907\u3002\u795e\u5947\u7684\u662f createEncoderMethodForClass: \u65b9\u6cd5\u3002\u987e\u540d\u601d\u4e49\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7\u5c06\u591a\u4e2a\u5757\u7c98\u8d34\u5728\u4e00\u8d77\u6765\u521b\u5efa\u7f16\u7801\u5668\u65b9\u6cd5\uff0c\u4f7f\u7528 imp_implementationWithBlock() \u5c06\u9876\u7ea7\u65b9\u6cd5\u8f6c\u6362\u4e3a\u65b9\u6cd5\uff0c\u7136\u540e\u6700\u540e\u4f7f\u7528 class_addMethod() \u5c06\u8be5\u65b9\u6cd5\u6dfb\u52a0\u5230\u76f8\u5173\u7c7b\u4e2d\u3002 -(void)createEncoderMethodForClass:(Class)theClass{ NSArray *ivars=[theClass allIvarNames]; if ( [[ivars lastObject] hasPrefix:@&quot;_&quot;]) { ivars=(NSArray*)[[ivars collect] substringFromIndex:1]; } NSMutableArray *copiers=[[NSMutableArray arrayWithCapacity:ivars.count] \u4fdd\u7559]; for (NSString *ivar in ivars) { MPWPropertyBinding *accessor=[[MPWPropertyBinding valueForName:ivar] \u4fdd\u7559]; [ivar \u4fdd\u7559]; [\u8bbf\u95ee\u5668 bindToClass:theClass]; id objBlock=^(id object, MPWFlattenStream* stream){ [stream writeObject:[accessor valueForTarget:object] forKey:ivar]; }; id intBlock=^(id object, MPWFlattenStream* stream){ [stream writeInteger:[accessor integerValueForTarget:object] forKey:ivar]; }; int typeCode = [\u8bbf\u95ee\u5668\u7c7b\u578b\u4ee3\u7801]; if ( typeCode == &#39;i&#39; || typeCode == &#39;q&#39; || typeCode == &#39;l&#39; || typeCode == &#39;B&#39; ) { [copyers addObject:Block_copy(intBlock)]; } else { [\u590d\u5370\u673a addObject:Block_copy(objBlock)]; } } void (^encoder)( id object, MPWFlattenStream *writer) = Block_copy( ^void(id object, MPWFlattenStream *writer) { for ( id block in copiers ) { void (^encodeIvar)(id object, MPWFlattenStream *writer) =block; encodeIvar(object, writer); } }); void (^encoderMethod)( id blockself, MPWFlattenStream *writer) = ^void(id blockself, MPWFlattenStream *writer) { [writer writeDictionaryLikeObject:blockself withContentBlock:encoder]; }; IMP encoderMethodImp = imp_implementationWithBlock(encoderMethod); class_addMethod(theClass, [self streamWriterMessage], encoderMethodImp, &quot;v@:@&quot; );} \u5de7\u5999\u7684\u662f\u6211\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u4e3a\u8fd9\u4e2a\u7279\u5b9a\u7528\u4f8b\u7f16\u5199\u90a3\u4e2a\u65b9\u6cd5\uff1a\u6211\u5df2\u7ecf\u4e3a JSON \u7f16\u7801\u521b\u5efa\u4e86\u5b83\u3002\u7531\u4e8e JSON \u7f16\u7801\u5668\u548c SQLite \u7f16\u5199\u5668\u90fd\u662f\u591a\u6001\u5199\u5165\u6d41\uff08\u4f5c\u4e3a\u76f8\u5e94\u89e3\u7801\u5668/\u89e3\u6790\u5668\u7684\u76ee\u6807\uff09\uff0c\u56e0\u6b64\u76f8\u540c\u7684\u65b9\u6cd5\u5f00\u7bb1\u5373\u7528\u3002 \uff08\u5e94\u8be5\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7f16\u7801\u5668-\u751f\u6210\u5668\u76ee\u524d\u4e0d\u80fd\u5904\u7406\u6240\u6709\u79cd\u7c7b\u7684\u6570\u636e\u7c7b\u578b\uff1b\u8fd9\u662f\u6545\u610f\u7684\uff09\u3002\u7f16\u7801\u5668\u65b9\u6cd5\u4f7f\u7528 MPWPropertyBinding \u5bf9\u8c61\u901a\u8fc7\u5bf9\u8c61\u7684\u8bbf\u95ee\u5668\u9ad8\u6548\u8bbf\u95ee\u5b9e\u4f8b\u53d8\u91cf\uff0c\u7f13\u5b58 IMP \u5e76\u6839\u636e\u9700\u8981\u8f6c\u6362\u6570\u636e\uff0c\u56e0\u6b64\u5b83\u4eec\u65e2\u9ad8\u6548\u53c8\u7075\u6d3b\u3002\u7136\u800c\uff0cObjective-S \u4e3a\u5176\u5b9e\u4f8b\u53d8\u91cf\u751f\u6210\u7684\u5b9e\u9645\u8bbf\u95ee\u5668\u76f8\u5f53\u5df4\u6d1b\u514b\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f7f\u7528\u4e0e Objective-S \u65b9\u6cd5\u76f8\u540c\u7684\u57fa\u672c\u673a\u5236\uff0c\u53ea\u80fd\u5904\u7406\u5bf9\u8c61\uff0c\u4e0d\u80fd\u5904\u7406\u539f\u59cb\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u4e0eObjective-C\u65e0\u7f1d\u4e92\u64cd\u4f5c\uff0c\u671f\u671b\u65b9\u6cd5\u53ef\u4ee5\u91c7\u7528\u5bf9\u8c61\u4ee5\u5916\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6240\u6709\u975e\u5bf9\u8c61\u65b9\u6cd5\u53c2\u6570\u5728\u4f20\u5165\u65f6\u8f6c\u6362\u4e3a\u5bf9\u8c61\uff0c\u8fd4\u56de\u503c\u5728\u4f20\u51fa\u65f6\u4ece\u5bf9\u8c61\u8f6c\u6362\u4e3a\u539f\u59cb\u503c\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u662f\u539f\u59cb\u7c7b\u578b\u7684\u8bbf\u95ee\u5668\uff0c\u4f8b\u5982\u6574\u6570\u201cid\u201d\u6216\u5e03\u5c14\u503c\u201cdone\u201d\uff0c\u4e5f\u4f1a\u901a\u8fc7\u63a5\u53e3\u673a\u5236\u5c06\u5b83\u4eec\u7684\u503c\u8f6c\u6362\u4e3a\u5bf9\u8c61\u6216\u4ece\u5bf9\u8c61\u8f6c\u6362\u3002\u6b63\u5982\u6211\u4e0a\u9762\u63d0\u5230\u7684\uff0c\u6211\u6709\u70b9\u60ca\u8bb6\uff0c\u8fd9\u79cd\u4f4e\u6548\u7387\u88ab\u57fa\u4e8e NSString \u7684\u5bc6\u94a5\u5904\u7406\u6240\u63a9\u76d6\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8ffd\u6c42 SQLite \u63d2\u5165\u57fa\u51c6\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u6709\u4e00\u4e2a\u6700\u7ec8\u89e3\u51b3\u8fd9\u4e2a Rube-Goldberg \u673a\u5236\u7684\u7406\u7531\u3002\u6700\u540e\uff0c\u5b9e\u9645\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u8fdc\u6ca1\u6709\u6211\u62c5\u5fc3\u7684\u90a3\u4e48\u590d\u6742\uff0c\u8be5\u6280\u672f\u4e0e\u4e0a\u9762\u7528\u4e8e\u7f16\u7801\u5668-\u751f\u6210\u5668\u7684\u6280\u672f\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u66f4\u7b80\u5355\u3002\u6839\u636e\u7c7b\u578b\uff0c\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u5757\uff0c\u8be5\u5757\u4f7f\u7528\u5b9e\u4f8b\u53d8\u91cf\u7684\u504f\u79fb\u91cf\u8fdb\u884c\u53c2\u6570\u5316\u3002\u6211\u5728\u4e0b\u9762\u5c55\u793a\u4e86 setter-generator\uff0c\u56e0\u4e3a\u7531\u4e8e\u4fdd\u7559\u8ba1\u6570\u5904\u7406\uff0c\u5bf9\u8c61\u6848\u4f8b\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u662f\u4e0d\u540c\u7684\uff1a #define pointerToVarInObject( type, anObject ,offset) ((type*)(((char*)anObject) + offset ))#ifndef __clang_analyzer__// \u8fd9\u4e2a\u6cc4\u6f0f\u662f\u56e0\u4e3a\u6211\u4eec\u6b63\u5728\u5b89\u88c5\u5230\u8fd0\u884c\u65f6\uff0c\u65e0\u6cd5\u5220\u9664 after-(void)installInClass:(Class)aClass{ SEL aSelector=NSSelectorFromString([self objcMessageName]); const char *typeCode=NULL; int ivarOffset = (int)[ivarDef offset]; IMP getterImp=NULL; switch ( ivarDef.objcTypeCode ) { case &#39;d&#39;: case &#39;@&#39;: typeCode = &quot;v@:@&quot;; void (^objectSetterBlock)(id object,id arg) = ^void(id object,id arg) { id *p=pointerToVarInObject(id,object,ivarOffset); if ( *p != arg ) { [*p \u91ca\u653e]; [\u53c2\u6570\u4fdd\u7559]; *p=arg; } }; getterImp=imp_implementationWithBlock(objectSetterBlock);\u4f11\u606f; case &#39;i&#39;: case &#39;l&#39;: case &#39;B&#39;: typeCode = &quot;v@:l&quot;; void (^intSetterBlock)(id object,long arg) = ^void(id object,long arg) { *pointerToVarInObject(long,object,ivarOffset)=arg; }; getterImp=imp_implementationWithBlock(intSetterBlock);\u4f11\u606f;\u9ed8\u8ba4\u503c\uff1a[NSException raise:@&quot;invalidtype&quot; format:@&quot;Don&#39;t know how to generate set accessor for type &#39;%c&#39;&quot;,ivarDef.objcTypeCode];\u4f11\u606f; } if ( getterImp &amp;&amp; typeCode ) { class_addMethod(aClass, aSelector, getterImp, typeCode );\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u914d\u7f6e\u6587\u4ef6\u5f00\u59cb\u63a5\u8fd1\u5927\u7ea6\u4e09\u5206\u4e4b\u4e8c\u7684\u65f6\u95f4\u82b1\u5728 sqlite_ \u51fd\u6570\u4e0a\uff0c\u56e0\u6b64\u4f18\u5316\u5de5\u4f5c\u5f00\u59cb\u8fdb\u5165\u6536\u76ca\u9012\u51cf\u533a\u57df\u3002\u660e\u663e\u5f00\u9500\u7684\u6700\u540e\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u70b9\u662f\u53c2\u6570\u7d22\u5f15\u6620\u5c04\u7684\uff08\u5b57\u7b26\u4e32\uff09\u952e\uff0c\u4e0a\u9762\u7684\u4f18\u5316\u5728\u4ece NSString \u5230 NSNumber \u7684 NSDictionary \u6620\u5c04\u4e2d\u7559\u4e0b\u4e86\u5b83\u3002\u60a8\u53ef\u80fd\u77e5\u9053\uff0cNSDictionary \u5e76\u4e0d\u662f\u6700\u5feb\u7684\u3002\u4e00\u4e2a\u60f3\u6cd5\u662f\u7528 MPWFastrStringTable \u66ff\u6362\u8be5\u67e5\u627e\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u8981\u4e48\u9700\u8981\u89e3\u51b3\u5feb\u901f\u8bbf\u95ee NSString \u5b57\u7b26\u6570\u636e\u7684\u95ee\u9898\uff0c\u8981\u4e48\u9700\u8981\u66f4\u6539\u534f\u8bae\u3002\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u5f3a\u5236\u6267\u884c\u5b83\uff1a\u6211\u5c06\u6307\u5411 NSString \u5bf9\u8c61\u7684\u5b9e\u9645\u6307\u9488\u5b58\u50a8\u5728\u7531 SQLite \u53c2\u6570\u7d22\u5f15\u7d22\u5f15\u7684 C-Array \u4e2d\u3002\u5728\u6211\u8fdb\u884c\u5176\u4ed6\u67e5\u627e\u4e4b\u524d\uff0c\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u6211\u4f7f\u7528\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u6307\u9488\u5bf9\u8be5\u8868\u8fdb\u884c\u4e86\u7ebf\u6027\u626b\u63cf\u3002\u8fd9\u4e2a\u5c0f\u6280\u5de7\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4ece\u6211\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u5220\u9664\u4e86\u53c2\u6570\u7d22\u5f15\u67e5\u627e\u3002\u901a\u8fc7\u8fd9\u4e9b\u6700\u540e\u7684\u8c03\u6574\uff0c\u4ee3\u7801\u53ef\u80fd\u975e\u5e38\u63a5\u8fd1\u5b83\u6240\u8981\u83b7\u5f97\u7684\u901f\u5ea6\u3002\u4e0e Rust \u4ee3\u7801\u76f8\u6bd4\uff0c\u5b83\u7684\u6027\u80fd\u8f83\u6162\u53ef\u5f52\u56e0\u4e8e\u5b83\u6b63\u5728\u5904\u7406\u66f4\u591a\u6570\u636e\u548c\u66f4\u590d\u6742\u7684\u6a21\u5f0f\uff0c\u4ee5\u53ca\u5fc5\u987b\u4ece\u7269\u5316\u5bf9\u8c61\u4e2d\u5b9e\u9645\u83b7\u53d6\u6570\u636e\uff0c\u800c Rust \u4ee3\u7801\u53ea\u662f\u5373\u65f6\u751f\u6210 SQlite \u8c03\u7528.\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u662f\u901a\u8fc7\u4e00\u79cd\u7f13\u6162\u7684\u89e3\u91ca\u6027\u811a\u672c\u8bed\u8a00\u5b9e\u73b0\u7684\uff0c\u6240\u6709\u53ef\u53d8\u90e8\u5206\uff08\u6570\u636e\u7c7b\u3001\u63a7\u5236\u4ee3\u7801\uff09\u90fd\u5728\u6240\u8ff0\u7f13\u6162\u7684\u811a\u672c\u8bed\u8a00\u4e2d\u5b9a\u4e49\u3002\u56e0\u6b64\uff0c\u867d\u7136\u6211\u671f\u5f85 Objective-S \u7684\u672c\u673a\u7f16\u8bd1\u5668\uff0c\u4f46\u5f88\u9ad8\u5174\u77e5\u9053\u5b83\u5bf9\u4e8e\u51fa\u8272\u7684\u6027\u80fd\u5e76\u4e0d\u662f\u7edd\u5bf9\u5fc5\u8981\u7684\uff0c\u800c\u4e14\u8fd9\u4e9b API \u7684\u57fa\u672c\u8bbe\u8ba1\u662f\u5408\u7406\u7684\u3002", "note_en": "The other week, I stumbled on the post  Inserting One Billion Rows in SQLite Under A Minute, which was a funny coincidence, as I was just in the process of giving my own SQLite/Objective-Sadapter a bit of tune-up. (The post&#39;s title later had &#34;Towards&#34; prepended, because the author wasn&#39;t close to hitting that goal). This SQLite adapater was a spin-off of my earlier  article  series on  optimizing JSON performance, itself triggered bythe ludicrously bad  performance of Swift Coding at this rather simple and relevant task. To recap: Swift&#39;s JSON coder clocked in at about 10MB/s. By usinga streaming approach and a bit of tuning, we got that to around 200MB/s. Since then, I have worked on making Objective-S much more useful for UI work, with the object-literal syntax makingdefining UIs as convenient as the various &#34;declarative&#34; functional approaches such as React or SwiftUI. Except it isstill using the same AppKit or UIKit objects we know and love, and doesn&#39;t force us to embrace the  silly notion thatthe UI is a pure function of the model. Oh, and you get live previews that actually work. But more on that later. So I am slowly inching towards doing a  ToDoMVC, a benchmark that feelsrather  natural to me. While I am still very partial tojust dumping JSON files, and the previous article series hopefully showed that this approach is plenty fast enough, I realize that a lot of people prefer a &#34;real&#34; database, especially on the  back-end, and I wanted to build that as well. One of the many benchmarks I have for Objective-S is that it shouldbe possible to build a nicer Rails with it. (At this point in time I am pretty sure I will hit that benchmark). One of the ways to figure out if you have a good design is to stress-test it. One very useful stress-test is seeinghow fast it can go, because that will tell you if the thing you built is lean, or if you put in unnecessary layersand indirections. This is particularly interesting in a Scripted Components ( pdf) system that combines a relatively slowbut flexible interactive scripting language with fast, optimized components. The question is whether you can actuallycombine the flexibility of the scripting language while reaping the benefits of the fast components, rather than having to dive into adapting and optimizing the components for each use case, or just getting slow performance despitethe fast components. My hunch was that the streaming approach I have been using for a while now and that worked reallywell for JSON and Objective-C would also do well in this more challenging setting. Spoiler alert: it did! The benchmark was a slightly modified version of the script that serves as a tasks backend. Like said samplescript it also creates a tasks database and inserts some example rows. Instead of inserting two rows,it inserts 10 million. Or a hundred million. #!env stsh#- taskbench: dbref#class Task {\tvar   id.\tvar   done.\tvar   title.\t-description { &#34; &#34;. }\t+sqlForCreate {\t\t&#39;( [id] INTEGER PRIMARY KEY, [title] VARCHAR(220) NOT NULL, [done] INTEGER );&#39;.\t}}.scheme todo : MPWAbstractStore {\tvar db.\tvar tasksTable.\t-initWithRef:ref {\t\tthis:db := (MPWStreamQLite alloc initWithPath:ref path).\t\tthis:tasksTable := #MPWSQLTable{ #db: this:db , #tableClass: Task, #name: &#39;tasks&#39; }.\t\tthis:db open.\t\tself.\t}\t- createTable {\t\tthis:tasksTable create.\t this:tasksTable := this:db tables at:&#39;tasks&#39;. this:tasksTable createEncoderMethodForClass: Task.\t}\t-createTaskListToInsert: log10ofSize {\t\tbaseList \u2190 #( #Task{ #title: &#39;Clean Room&#39;, #done: false }, #Task{ #title: &#39;Check Twitter&#39;, #done: true } ).\t\t...replicate ...\t\ttaskList.\t}\t- insertTasks {\t taskList := self createTaskListToInsert:6.\t\t1 to:10 do: {\t\t\tthis:tasksTable insert:taskList.\t\t}.\t}}.todo := todo alloc initWithRef:dbref.todo createTable.todo insertTasks.\n (I have removed the body of the method that replicates the 2 tasks into the list of millions of tasks we need to insert.It was bulky and not relevant.) In this sample we define the Task class and use that to create the SQL Table. We could also have simply created the table and generated a Tasks class from that. Anyway, running this script yields the following result.  &gt; time ./taskbench-sqlite.st /tmp/tasks1.db ./taskbench-sqlite.st /tmp/tasks1.db 4.07s user 0.20s system 98% cpu 4.328 total&gt; ls -al /tmp/tasks1.db* -rw-r--r-- 1 marcel wheel 214M Jul 24 20:11 /tmp/tasks1.db&gt; sqlite3 /tmp/tasks1.db &#39;select count(id) from tasks;&#39; 10000000\n So we inserted 10M rows in 4.328 seconds, yielding several hundred megabytes of SQLite data. This would be 138M rowshad we let it run for a minute. Nice. For comparison, the original article&#39;s numbers were 11M rows/minute for CPython, 40M rows/minute for PyPy and 181M rows/minute for Rust, though on a slower Intel MacBookPro whereas I was running this on an M1 Air. I compiled and ran the Rust version on my M1 Air and it did 100M rows in 21 seconds, so just a smidgen over twice as fast as my Objective-S script, though witha simpler schema (CHAR(6) instead of VARCHAR(220)) and less data (1.5GB vs. 2.1GB for 100M rows). The initial version of the script was far, far slower, and at first it was, er, &#34;sub-optimal&#34; use of SQLitethat was the main culprit, mostly inserting every row by itself without batching. When SQLite sees anINSERT (or an UPDATE for that matter) that is not contained in a transaction, it will automatically wrap that INSERT inside a generated transaction and commit that transaction after the INSERT is processed. Since SQLite is very fastidious about ensuring that transactions get to disk atomically, this is slow. Very slow. The class handling SQLite inserts is a  Polymorphic Write Stream, so it knows what an array is.When it encounters one, it sends itself the  beginArray message, writes the contents of the array and finishes by sending itself the  endArray message. Since writing an array sort of implies thatyou want to write all of it, this was a good place to insert the transactions:   So now, if you want to write a bunch of objects as a single transaction, just write them as an array, as thebenchmark code does. There were some other minor issues, but after that less than 10% of the total timewere spent in SQLite, so it was time to optimize the caller, my code. At this point, my guess was that the biggest remaining slowdown would be my, er, &#34;majestic&#34; Objective-Sinterpreter. I was wrong, it was Cocoa string handling. Not only was I creating the SQLite parameterplaceholder keys dynamically, so allocating new NSString objects for each column of each row, it alsohappens that getting character data from an NSString object nowadays involves some very complex and slowinternal machinery using encoding conversion streams.  -UTF8String is not your friend, and othermethods appear to fairly consistently use the same slow mechanism. I guess making NSString horribly slow isone way to make other string handling look good in comparison. After a few transformations, the code would just look up the incoming NSString key in a dictionary thatmapped it to the SQLite parameter index. String-processing and character accessing averted. One thing you might have noticed about the class definition in the benchmark code is that there is noencoder method, it just defines its instance variables and some other utilities. So how is the classdata encoded for the  SQLTable? KVC? No, that would be a bit slow, though it might make a goodfallback. The magic is the  createEncoderMethodForClass: method. This method, as the name suggests,creates an encoder method by pasting together a number of blocks, turns the top-level intoa method using  imp_implementationWithBlock(), and then finally adds that methodto the class in question using  class_addMethod(). -(void)createEncoderMethodForClass:(Class)theClass{ NSArray *ivars=[theClass allIvarNames]; if ( [[ivars lastObject] hasPrefix:@&#34;_&#34;]) { ivars=(NSArray*)[[ivars collect] substringFromIndex:1]; } NSMutableArray *copiers=[[NSMutableArray arrayWithCapacity:ivars.count] retain]; for (NSString *ivar in ivars) { MPWPropertyBinding *accessor=[[MPWPropertyBinding valueForName:ivar] retain]; [ivar retain]; [accessor bindToClass:theClass]; id objBlock=^(id object, MPWFlattenStream* stream){ [stream writeObject:[accessor valueForTarget:object] forKey:ivar]; }; id intBlock=^(id object, MPWFlattenStream* stream){ [stream writeInteger:[accessor integerValueForTarget:object] forKey:ivar]; }; int typeCode = [accessor typeCode]; if ( typeCode == &#39;i&#39; || typeCode == &#39;q&#39; || typeCode == &#39;l&#39; || typeCode == &#39;B&#39; ) { [copiers addObject:Block_copy(intBlock)]; } else { [copiers addObject:Block_copy(objBlock)]; } } void (^encoder)( id object, MPWFlattenStream *writer) = Block_copy( ^void(id object, MPWFlattenStream *writer) { for ( id block in copiers ) { void (^encodeIvar)(id object, MPWFlattenStream *writer)=block; encodeIvar(object, writer); } }); void (^encoderMethod)( id blockself, MPWFlattenStream *writer) = ^void(id blockself, MPWFlattenStream *writer) { [writer writeDictionaryLikeObject:blockself withContentBlock:encoder]; }; IMP encoderMethodImp = imp_implementationWithBlock(encoderMethod); class_addMethod(theClass, [self streamWriterMessage], encoderMethodImp, &#34;v@:@&#34; );}\n What&#39;s kind of neat is that I didn&#39;t actually write that method for this particular use-case: I hadalready created it for JSON-coding. Due to the fact that the JSON-encoder and the SQLite writerare both Polymorphic Write Streams (as are the targets of the corresponding decoders/parsers), the same method worked out of the box for both. (It should be noted that this encoder-generator currently does not handle all variety of data types;this is intentional). The encoder method uses  MPWPropertyBinding objects to efficiently access the instancevariables via the object&#39;s accessors, caching IMPs and converting data as necessary, so they areboth efficient and flexible. However, the actual accessors that Objective-S generated for itsinstance variables were rather baroque, because they used the same basic mechanism used for Objective-S methods, which can only deal with objects, not with primitive data types. In order to interoperate seamlessly with Objective-C, which expected methods that cantake data types other than objects, all non-object method arguments are convertedto objects on the way in, and return values are converted from objects to primitivevalues on the way out. So even the accessors for primitive types such as the integer &#34;id&#34; or the boolean &#34;done&#34;would have their values converted to and from objects by the interface machinery. AsI noted above, I was a bit surprised that this inefficiency was overshadowed by the NSString-based key handling. In fact, one of the reason for pursuing the SQLite insert benchmark was to have a reason for finally tackling this Rube-Goldberg mechanism. In the end, actuallyaddressing it turned out to be far less complex than I had feared, with the techniquebeing very similar to that used for the encoder-generator above, just simpler. Depending on the type, we use a different block that gets parameterised with theoffset to the instance variable. I show the setter-generator below, becausethere the code for the object-case is actually different due to retain-counthandling:  #define pointerToVarInObject( type, anObject ,offset) ((type*)(((char*)anObject) + offset))#ifndef __clang_analyzer__// This leaks because we are installing into the runtime, can&#39;t remove after-(void)installInClass:(Class)aClass{ SEL aSelector=NSSelectorFromString([self objcMessageName]); const char *typeCode=NULL; int ivarOffset = (int)[ivarDef offset]; IMP getterImp=NULL; switch ( ivarDef.objcTypeCode ) { case &#39;d&#39;: case &#39;@&#39;: typeCode = &#34;v@:@&#34;; void (^objectSetterBlock)(id object,id arg) = ^void(id object,id arg) { id *p=pointerToVarInObject(id,object,ivarOffset); if ( *p != arg ) { [*p release]; [arg retain]; *p=arg; } }; getterImp=imp_implementationWithBlock(objectSetterBlock); break; case &#39;i&#39;: case &#39;l&#39;: case &#39;B&#39;: typeCode = &#34;v@:l&#34;; void (^intSetterBlock)(id object,long arg) = ^void(id object,long arg) { *pointerToVarInObject(long,object,ivarOffset)=arg; }; getterImp=imp_implementationWithBlock(intSetterBlock); break; default: [NSException raise:@&#34;invalidtype&#34; format:@&#34;Don&#39;t know how to generate set accessor for type &#39;%c&#39;&#34;,ivarDef.objcTypeCode]; break; } if ( getterImp &amp;&amp; typeCode ) { class_addMethod(aClass, aSelector, getterImp, typeCode ); } }\n At this point, profiles were starting to approach around two thirds of the time being spent in  sqlite_ functions,so the optimisation efforts were starting to get into a region of diminishing returns. One final noticeable point of obvious overhead was the (string) key to parameter index mapping, which theoptimizations above had left at a  NSDictionary mapping from  NSString to  NSNumber.As you probably know,  NSDictionary isn&#39;t exactly the fastest. One idea was to replace that lookupwith a  MPWFastrStringTable,but that means either needing to solve the problem of fast access to  NSString character data or changing the protocol. So instead I decided to brute-force it: I store the actual pointers to the NSString objects in a C-Array indexed by the SQLite parameter index. Before I do the other lookup, which I keep to be safe, I do a linear scan in that tableusing the incoming string pointer. This little trick largely removed the parameter index lookup from my profiles. With those final tweaks, the code is probably quite close to as fast as it is going to get. Its slower performancecompared to the Rust code can be attributed to the fact that it is dealing with more data and a more complexschema, as well as having to actually obtain data from materialized objects, whereas the Rust code just generatesthe SQlite calls on-the-fly. All this is achieved from a slow, interpreted scripting language, with all the variable parts (data class, steeringcode) defined in said slow scripting language. So while I look forward to the native compiler for Objective-S,it is good to know that it isn&#39;t absolutely necessary for excellent performance, and that the basic design ofthese APIs is sound.", "posttime": "2021-07-25 04:58:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "sqlite,\u6bcf\u5206\u949f,rows,\u65b9\u6cd5", "title": "\u4ece\u811a\u672c\u8bed\u8a00\u6bcf\u5206\u949f\u63d2\u5165 130M SQLite \u884c", "title_en": "Inserting 130M SQLite Rows per Minute from a Scripting Language", "transed": 1, "url": "https://blog.metaobject.com/2021/07/inserting-130m-sqlite-rows-per.html", "via": "", "real_tags": ["sqlite", "\u6bcf\u5206\u949f", "rows", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "4b1b7793db373121c0388123f382bed2.jpg", "infoid": 1069504, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bfc\u6f14 M. Night Shyamalan \u5bf9\u4ed6\u6807\u5fd7\u6027\u7684\u60ca\u559c\u8f6c\u6298\u7ed3\u5c40\u6709\u7740\u4f17\u6240\u5468\u77e5\u7684\u559c\u7231\u3002\u5f53\u8fd9\u4e9b\u66f2\u6298\u6709\u673a\u5730\u53d1\u6325\u4f5c\u7528\u65f6\uff0c\u6211\u4eec\u5c31\u4f1a\u5f97\u5230\u300a\u7b2c\u516d\u611f\u300b\u548c\u300a\u7262\u4e0d\u53ef\u7834\u300b\u7b49\u7ecf\u5178\u4f5c\u54c1\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u8fd9\u6837\u505a\u2014\u2014\u597d\u5427\uff0c\u5982\u679c\u4f60\u5e78\u8fd0\u7684\u8bdd\uff0c\u4f60\u4f1a\u5f97\u5230\u50cf\u4ed6\u7684\u65b0\u7535\u5f71\u4e00\u6837\u7684\u4e1c\u897f\uff0c\u65e7\u7684\uff0c\u5176\u4e2d\u524d\u9762\u7684\u4e00\u5207\u90fd\u8db3\u591f\u5f15\u4eba\u6ce8\u76ee\uff0c\u4f60\u51e0\u4e4e\u53ef\u4ee5\u6446\u8131\u611f\u89c9\u5982\u6b64\u5f3a\u8feb\u7684\u523a\u8033\u7684\u6700\u540e\u8f6c\u6298\uff0c\u8fd9\u662f\u51e0\u4e4e\u5c31\u50cf\u5b83\u5c5e\u4e8e\u4e00\u90e8\u5b8c\u5168\u4e0d\u540c\u7684\u7535\u5f71\u3002 \uff08\u8fd9\u662f\u4e00\u90e8 M. Night Shyamalan \u7535\u5f71\uff0c\u5176\u4e2d\u51fa\u4eba\u610f\u6599\u7684\u66f2\u6298\u65e0\u5f02\u4e8e\uff0c\u6211\u5df2\u7ecf\u715e\u8d39\u82e6\u5fc3\u5730\u907f\u514d\u5267\u900f\u3002\u4e0b\u9762\u7684\u8bc4\u8bba\u4e2d\u6ca1\u6709\u8ba8\u8bba\u4efb\u4f55\u5c1a\u672a\u5728\u7535\u5f71\u9884\u544a\u7247\u4e2d\u900f\u9732\u7684\u5185\u5bb9\u3002\uff09\u300a\u8001\u300b\u6539\u7f16\u81ea\u6cd5\u56fd\u540d\u4e3a Sandcastle \u7684\u56fe\u753b\u5c0f\u8bf4\uff0c\u7531 Pierre Oscar Levy\uff08\u4e5f\u662f\u7eaa\u5f55\u7247\u5236\u7247\u4eba\uff09\u64b0\u5199\uff0c\u7531 Frederik Peeters \u7ed8\u5236\u63d2\u56fe\u3002\u5b83\u8bb2\u8ff0\u4e86 13 \u4e2a\u4eba\u53d1\u73b0\u81ea\u5df1\u88ab\u56f0\u5728\u4e00\u4e2a\u795e\u79d8\u3001\u50fb\u9759\u7684\u6d77\u6ee9\u4e0a\uff0c\u5728\u90a3\u91cc\u65f6\u95f4\u6d41\u52a8\u5f97\u66f4\u5feb\u2014\u2014\u5982\u6b64\u4e4b\u5feb\uff0c\u4ee5\u81f3\u4e8e\u5e74\u5e7c\u7684\u5b69\u5b50\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u5c31\u8fdb\u5165\u4e86\u9752\u6625\u671f\uff0c\u800c\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u5728 24 \u5c0f\u65f6\u5185\u6b65\u5165\u8001\u5e74\u5e76\u6b7b\u53bb\u3002 Shyamalan \u6536\u5230\u4e86\u8fd9\u672c\u4e66\u7684\u526f\u672c\u4f5c\u4e3a\u7236\u4eb2\u8282\u7684\u793c\u7269\uff0c\u5e76\u7acb\u5373\u88ab\u5b83\u5982\u4f55\u4eba\u9053\u5730\u5e94\u5bf9\u4eba\u7c7b\u5bf9\u8870\u8001\u7684\u6050\u60e7\u548c\u65e0\u60c5\u7684\u65f6\u95f4\u6d41\u901d\u6240\u611f\u52a8\u3002\u6c99\u9a6c\u5170\u7684\u7535\u5f71\u5e76\u975e\u76f4\u63a5\u6539\u7f16\u81ea\u8fd9\u672c\u56fe\u753b\u5c0f\u8bf4\uff0c\u5c3d\u7ba1\u5b83\u4fdd\u7559\u4e86\u76f8\u540c\u7684\u4e2d\u5fc3\u524d\u63d0\u548c\u51e0\u4e2a\u5173\u952e\u573a\u666f\u3002\u6c99\u9a6c\u5170\u8bf4\uff0c\u8fd9\u66f4\u50cf\u662f\u4e00\u79cd\u91cd\u65b0\u60f3\u8c61\uff0c\u5bfc\u6f14\u5145\u5b9e\u4e86\u53d9\u4e8b\u5e76\u589e\u5f3a\u4e86\u7d27\u5f20\u611f\uff0c\u4ee5\u521b\u9020\u4e00\u90e8\u611f\u89c9\u66f4\u50cf\u662f\u201c\u4e24\u5c0f\u65f6\u7684\u66ae\u5149\u4e4b\u57ce\u5267\u96c6\u201d\u7684\u5b58\u5728\u4e3b\u4e49\u60ca\u609a\u7247\u3002\u5df2\u5a5a\u592b\u5987\u76d6\u4f0a\uff08\u76d6\u5c14\u00b7\u52a0\u897f\u4e9a\u00b7\u8d1d\u7eb3\u5c14\uff0c\u4e1b\u6797\u4e2d\u7684\u83ab\u624e\u7279\uff09\u548c\u666e\u91cc\u65af\u5361\uff08\u7ef4\u59ec\u00b7\u514b\u91cc\u666e\u65af\uff0c\u5e7b\u5f71\u7ebf\uff09\u5361\u5e15\u51b3\u5b9a\u5e26\u7740\u4ed6\u4eec\u7684\u4e24\u4e2a\u5b69\u5b50\u5728\u4e00\u4e2a\u8c6a\u534e\u7684\u70ed\u5e26\u5ea6\u5047\u80dc\u5730\u5ea6\u8fc7\u4e00\u4e2a\u5bb6\u5ead\u5047\u671f\uff1a11 \u5c81\u7684\u5973\u513f\u9a6c\u591a\u514b\u65af\uff08\u4e9a\u5386\u514b\u8428\u65af\u6e29\u987f\uff09\uff0c\u548c\u513f\u5b50\u7279\u4f26\u7279\uff08\u8bfa\u5170\u6cb3\uff09\uff0c\u516d\u5c81\u3002\u5ea6\u5047\u6751\u7ecf\u7406 (Gustaf Hammarsten) \u4e3a\u5bb6\u4eba\u5b89\u6392\u4e86\u4e00\u6b21\u7279\u522b\u7684\u65c5\u884c\uff1a\u5728\u9690\u79d8\u7684\u6d77\u6ee9\u5ea6\u8fc7\u4e00\u5929\u3002\u4ed6\u4eec\u4e0d\u662f\u552f\u4e00\u88ab\u9009\u4e2d\u7684\u4eba\u3002\u8fd8\u6709\u4e00\u4f4d\u53ebMid-Sized Sedan\u7684\u563b\u54c8\u827a\u4eba\uff08Aaron Pierre, Krypton\uff09\uff1b\u53e6\u4e00\u5bf9\u5df2\u5a5a\u592b\u5987\uff0c\u62a4\u58eb\u8d3e\u7433\uff08\u6881\u5065\uff0c\u300a\u661f\u7403\u5927\u6218\uff1a\u539f\u529b\u89c9\u9192\u300b\uff09\u548c\u5fc3\u7406\u5b66\u5bb6\u5e15\u7279\u91cc\u590f\uff08\u5c3c\u57fa\u00b7\u963f\u59c6\u5361-\u4f2f\u5fb7\uff0c\u6728\u661f\u4e0a\u5347\uff09\uff1b\u548c\u5fc3\u80f8\u5916\u79d1\u533b\u751f\u67e5\u5c14\u65af\uff08\u9c81\u5f17\u65af\u00b7\u585e\u7ef4\u5c14\uff0c\u9ad8\u57ce\u5821\u4e2d\u7684\u7537\u4eba\uff09\uff0c\u4ed6\u7684\u6218\u5229\u54c1\u59bb\u5b50\u514b\u91cc\u65af\u5854\u5c14\uff08\u827e\u6bd4\u00b7\u674e\uff0c\u6d1b\u592b\u514b\u62c9\u592b\u7279\u4e61\u6751\uff09\uff0c\u4ed6\u7684\u6bcd\u4eb2\u827e\u683c\u5c3c\u4e1d\uff08\u51ef\u745f\u7433\u67e5\u5c14\u51e1\u7279\uff0c\u5916\u9047\uff09\uff0c\u4ee5\u53ca\u4ed6\u4eec\u516d\u5c81\u7684\u5973\u513f\u5361\u62c9\uff08\u51ef\u8389\u00b7\u8d1d\u683c\u5229\uff09\u3002\u5c3d\u7ba1\u6ca1\u6709\u624b\u673a\u670d\u52a1\uff0c\u4f46\u8d77\u521d\u4f3c\u4e4e\u6ca1\u6709\u4ec0\u4e48\u4e0d\u59a5\uff0c\u5c3d\u7ba1\u5b69\u5b50\u4eec\u786e\u5b9e\u53d1\u73b0\u4e86\u534a\u57cb\u5728\u6c99\u5b50\u4e0b\u7684\u5176\u4ed6\u4eba\u7684\u79c1\u4eba\u7269\u54c1\u3002\u7136\u540e\u4e00\u540d\u5e74\u8f7b\u5973\u5b50\u7684\u5c38\u4f53\u88ab\u51b2\u4e0a\u6d77\u6ee9\uff0c\u4e8b\u60c5\u53d8\u5f97\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u3002\u4efb\u4f55\u8bd5\u56fe\u79bb\u5f00\u6d77\u6ee9\u7684\u4eba\u90fd\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u660f\u5012\u3002\u5c38\u4f53\u5728\u521b\u7eaa\u5f55\u7684\u65f6\u95f4\u5185\u5206\u89e3\uff0c\u5b69\u5b50\u4eec\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u53d8\u8001\u4e86\u51e0\u5c81\u3002\u6d77\u6ee9\u57fa\u672c\u4e0a\u5c06 50 \u5e74\u7684\u751f\u547d\u7f29\u77ed\u4e3a\u4e00\u5929\uff0c\u4f7f\u4ed6\u4eec\u7684\u96c6\u4f53\u9003\u4ea1\u6210\u4e3a\u751f\u5b58\u95ee\u9898\u3002\u8fd9\u662f\u4e00\u4e2a\u5947\u5999\u7684\u6982\u5ff5\uff0c\u4eba\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec0\u4e48\u5b83\u5438\u5f15\u4e86 Shyamalan\uff0c\u4ed6\u5229\u7528\u8fd9\u4e2a\u524d\u63d0\u6765\u63a2\u7d22\u88ab\u56f0\u5728\u6d77\u6ee9\u4e0a\u7684\u622a\u7136\u4e0d\u540c\u7684\u4e2a\u6027\u5982\u4f55\u5e94\u5bf9\u4ed6\u4eec\u7684\u56f0\u5883\u3002\u4ece\u89c6\u89c9\u4e0a\u770b\uff0cOld \u662f\u4e00\u90e8\u534e\u4e3d\u7684\u7535\u5f71\uff0c\u51e0\u4e4e\u5b8c\u5168\u662f\u5728\u591a\u7c73\u5c3c\u52a0\u5171\u548c\u56fd\u7684 Playa El Valle \u62cd\u6444\u7684\u3002 Shyamalan \u8bf4\uff0c\u4ed6\u7684\u68f1\u89d2\u5206\u660e\u7684\u6444\u5f71\u65b9\u6cd5\u7684\u7075\u611f\u6765\u81ea\u4e8e Akira Kurosawa \u7684 Ran \u548c Rashomon\uff0c\u76ee\u7684\u662f\u5728\u7530\u56ed\u8bd7\u822c\u7684\u6d77\u6ee9\u73af\u5883\u4e2d\u8425\u9020\u4e00\u79cd\u8d8a\u6765\u8d8a\u5e7d\u95ed\u7684\u611f\u89c9\u3002\u4f5c\u66f2\u5bb6 Trevor Gureckis \u7684\u4e50\u8c31\u5f3a\u5316\u4e86\u4e0d\u7965\u7684\u9884\u611f\uff0c\u5f26\u4e50\u6f14\u594f\u5931\u8c10\u7684\u548c\u58f0\uff0c\u90e8\u843d\u4f4e\u97f3\u9f13\u5524\u8d77\u4e86\u65f6\u95f4\u7684\u65e0\u60c5\u524d\u8fdb\u3002\nOld \u6709\u4e00\u4e9b\u771f\u6b63\u53ef\u7231\u7684\u65f6\u523b\uff0c\u5c24\u5176\u662f\u4e0e Cappa \u4e00\u5bb6\u3002 Guy \u548c Prisca \u5fc5\u987b\u9762\u5bf9\u4ed6\u4eec\u5a5a\u59fb\u4e2d\u7684\u95ee\u9898\uff0c\u5e76\u52aa\u529b\u770b\u7740\u4ed6\u4eec\u7684\u5b69\u5b50\u6210\u957f\u5f97\u592a\u5feb\u2014\u2014Shyamalan \u4f5c\u4e3a\u73b0\u5728\u5df2\u7ecf\u957f\u5927\u7684\u5973\u513f\u7684\u7236\u4eb2\uff0c\u975e\u5e38\u7406\u89e3\u8fd9\u4e00\u70b9\u3002\u4f2f\u7eb3\u5c14\u548c\u514b\u91cc\u666e\u65af\u7684\u8868\u6f14\u90fd\u975e\u5e38\u5fae\u5999\uff0c\u800c\u6258\u9a6c\u897f\u5a1c\u00b7\u9ea6\u80af\u9f50\uff08\u4e54\u4e54\u5154\uff09\u548c\u4e9a\u5386\u514b\u65af\u00b7\u6c83\u5c14\u592b\uff08\u9057\u4f20\u7684\uff09\u5206\u522b\u4e0e\u5341\u51e0\u5c81\u7684\u9a6c\u591a\u514b\u65af\u548c\u7279\u4f26\u7279\u540c\u6837\u6709\u6548\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5c3d\u7ba1\u624d\u534e\u6a2a\u6ea2\u7684\u6f14\u5458\u9635\u5bb9\uff0c\u5176\u4ed6\u89d2\u8272\u8fd8\u6ca1\u6709\u5b8c\u5168\u6210\u719f\u5c3d\u6700\u5927\u52aa\u529b\u4e3a\u627f\u4fdd\u7684\u89d2\u8272\u5e26\u6765\u6df1\u5ea6\uff0c\u8fd9\u4e9b\u89d2\u8272\u53ea\u4e0d\u8fc7\u662f\u523b\u677f\u5370\u8c61\u3002\u5bf9\u4e8e\u5956\u676f\u59bb\u5b50\u514b\u91cc\u65af\u5854\u5c14\u6765\u8bf4\uff0c\u8fd9\u4e00\u70b9\u5c24\u5176\u4ee4\u4eba\u5931\u671b\uff0c\u5979\u7684\u81ea\u6211\u4ef7\u503c\u611f\u5b8c\u5168\u53d6\u51b3\u4e8e\u5979\u7684\u5e74\u8f7b\u548c\u7f8e\u4e3d\u3002\u6211\u4eec\u7684\u6587\u5316\u7279\u522b\u4e25\u5389\u5730\u5bf9\u5f85\u4e0a\u4e86\u5e74\u7eaa\u7684\u5973\u6027\uff0c\u800c\u514b\u91cc\u65af\u5854\u5c14\u53ef\u80fd\u6709\u4e00\u4e2a\u8ff7\u4eba\u7684\u89d2\u8272\u5f27\u7ebf\uff0c\u5979\u771f\u6b63\u52aa\u529b\u5e94\u5bf9\u7a81\u7136\u3001\u5feb\u901f\u8870\u8001\u5bf9\u5979\u7684\u81ea\u6211\u610f\u8bc6\u610f\u5473\u7740\u4ec0\u4e48\u3002\u76f8\u53cd\uff0c\u5979\u53d8\u5f97\u8d8a\u6765\u8d8a\u53ef\u6015\uff0c\u8fd9\u8fdc\u6ca1\u6709\u90a3\u4e48\u6709\u8da3\u3002\u8fd9\u90e8\u7535\u5f71\u6700\u5927\u7684\u95ee\u9898\u662f\uff0cShyamalan \u65e0\u6cd5\u6297\u62d2\u8bd5\u56fe\u53d8\u5f97\u806a\u660e\uff0c\u4ece\u800c\u7834\u574f\u4e86\u4ed6\u5728\u6700\u540e\u4e00\u5e55\u4e2d\u83b7\u5f97\u7684\u53cd\u601d\u6027\u7684\uff0c\u51e0\u4e4e\u662f\u633d\u6b4c\u7684\u97f3\u7b26\u3002\u5173\u4e8e\u8fd9\u4e2a\u626d\u66f2\u7684\u7ed3\u5c40\uff0c\u6211\u60f3\u8bf4\u7684\u662f\uff0c\u5b83\u611f\u89c9\u50cf\u662f\u4e8b\u540e\u7684\u60f3\u6cd5\uff0c\u5e76\u4e14\u4e0e\u4e4b\u524d\u53d1\u751f\u7684\u4e00\u5207\u90fd\u5b8c\u5168\u4e0d\u4e00\u81f4\u3002\u6709\u4e9b\u4e8b\u60c5\u6700\u597d\u4e0d\u8981\u89e3\u91ca\u3002 \uff08\u4f8b\u5982\uff0c\u6fc0\u53d1\u6c99\u9a6c\u5170\u7075\u611f\u7684\u56fe\u753b\u5c0f\u8bf4\u4ece\u672a\u89e3\u91ca\u6d77\u6ee9\u4e0a\u5947\u602a\u7684\u8001\u5316\u5f02\u5e38\uff0c\u5e76\u4ee5\u4e00\u4e2a\u5c0f\u5b69\u72ec\u81ea\u5efa\u9020\u65b0\u6c99\u5821\u7684\u795e\u79d8\u573a\u666f\u7ed3\u675f\u3002\uff09\u6211\u5e26\u7740\u590d\u6742\u7684\u5fc3\u60c5\u8d70\u51fa\u653e\u6620\uff0c\u6df1\u4fe1\u4e0d\u7591\u4e8b\u5b9e\u8bc1\u660e\uff0cOld \u4f1a\u4e0e\u8bc4\u8bba\u5bb6\u548c\u89c2\u4f17\u4ea7\u751f\u5206\u6b67\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60c5\u51b5\u4f3c\u4e4e\u5982\u6b64\u3002 \uff08\u5b83\u751a\u81f3\u5728\u7968\u623f\u4e0a\u6709\u70b9\u75b2\u8f6f\uff0c\u5c3d\u7ba1\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e COVID \u75c5\u4f8b\u7684\u6fc0\u589e\u963b\u6b62\u4eba\u4eec\u53bb\u7535\u5f71\u9662\u548c\u5176\u4ed6\u4efb\u4f55\u4e8b\u60c5\u4e00\u6837\u3002\uff09Shyamalan \u5236\u4f5c\u4e86\u51e0\u90e8\u7535\u5f71\u5728\u4e0a\u6620\u65f6\u53d7\u5230\u8bc4\u8bba\u5bb6\u7684\u62a8\u51fb\uff0c\u8fd9\u4e9b\u7535\u5f71\u540e\u6765\u91cd\u65b0\u8bc4\u4f30\u66f4\u6709\u5229\uff08\u89c1\u6751\u5e84\uff09\u3002\u5c3d\u7ba1\u5b58\u5728\u7f3a\u9677\uff0c\u4f46\u51e0\u5e74\u540e\uff0c\u6216\u8bb8 Old \u4e5f\u4f1a\u53d7\u5230\u6709\u5229\u7684\u91cd\u65b0\u8bc4\u4f30\uff0c\u56e0\u4e3a\u5b83\u786e\u5b9e\u6210\u529f\u5730\u5524\u8d77\u4e86\u5bf9\u5b58\u5728\u4e3b\u4e49\u7684\u6050\u60e7\u611f\uff0c\u5e76\u6700\u7ec8\u63a5\u53d7\u4e86\u4eba\u7c7b\u7684\u6b7b\u4ea1\u3002 Old \u73b0\u5728\u5728\u5f71\u9662\u4e0a\u6620\u3002\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u4ec5\u5728\u5df2\u63a5\u79cd\u75ab\u82d7\u7684\u60c5\u51b5\u4e0b\u624d\u5728\u5f71\u9662\u89c2\u770b\u7535\u5f71\u3002", "note_en": "Director M. Night Shyamalan has a well-known fondness for his signature surprise twist endings. When those twists work organically, we get classics like  The Sixth Sense and  Unbreakable. When they don&#39;&#39;t\u2014well, if you&#39;re lucky, you get something like his new film,   Old, in which everything that comes before is sufficiently compelling that you can almost shake off a jarring final twist that feels so forced, it&#39;s almost like it belongs in an entirely different movie.\n (This being an M. Night Shyamalan film where surprise twists are tantamount, I have taken great pains to avoid spoilers. There is nothing discussed in the review below that has not\u00a0already been revealed in the film&#39;s trailers.)\n Old\u00a0is based on a French graphic novel called  Sandcastle, written by Pierre Oscar Levy (also a documentary filmmaker) and illustrated by Frederik Peeters. It&#39;s about a group of 13 people who find themselves trapped on a mysterious, secluded beach where time moves much more quickly\u2014so quickly that young children reach puberty in a matter of hours, and everyone will reach old age and die within 24 hours. Shyamalan received a copy of the book as a Father&#39;s Day gift, and was immediately touched by how it humanely grappled with the all-too-human fear of aging and the relentless passage of time.\n Shyamalan&#39;s film is not a direct adaption of the graphic novel, although it keeps the same central premise and several key scenes. It&#39;s more of a re-imagining, with the director fleshing out the narrative and amping up the tension to create an existential thriller that feels more like a &#34;two-hour  Twilight Zone episode,&#34; per Shyamalan. Married couple Guy (Gael Garcia Bernal,  Mozart in the Jungle) and Prisca (Vicky Krieps,  The Phantom Thread) Cappa decide to take a family vacation at a luxurious tropical resort with their two children: daughter Maddox (Alexa Swinton), age 11, and son Trent (Nolan River), age six.\n The resort manager (Gustaf Hammarsten) arranges a special excursion for the family: a day at a secret, secluded beach. They are not the only chosen ones. There is also a hip-hop artist named Mid-Sized Sedan (Aaron Pierre,  Krypton); another married couple, nurse Jarin (Ken Leung,  Star Wars: The Force Awakens) and psychologist Patricia (Nikki Amuka-Bird,  Jupiter Ascending); and a cardiothoracic surgeon, Charles (Rufus Sewell,  Man in the High Castle), his trophy wife Chrystal (Abbey Lee,  Lovecraft Country), his mother Agnes (Kathleen Chalfant,  The Affair), and their six-year-old daughter, Kara (Kylie Begley).\n      Nothing seems amiss at first, despite the lack of cell phone service, although the children do discover a stash of other people&#39;s personal belongings half-buried under the sand. Then the corpse of a young woman washes up on the beach, and things take a turn for the creepy. Anyone who tries to leave the beach inevitably blacks out. The corpse decomposes in record time, and the children age several years over the course of a few hours. The beach essentially reduces 50 years of life into a single day, making their collective escape a matter of survival.\n This is a fantastic concept, and one can see why it appealed to Shyamalan, who uses the premise to explore how the very different personalities trapped on the beach respond to their predicament. Visually,  Old is a gorgeous film, almost entirely shot at Playa El Valle in the Dominican Republic. Shyamalan said his angular cinematographic approach was inspired by Akira Kurosawa&#39;s  Ran and  Rashomon, in order to create an increasingly claustrophobic feel to what starts out as an idyllic beach setting. Composer Trevor Gureckis&#39; score reinforces the sense of foreboding with strings playing detuned harmonies, and tribal bass drums evoking the relentless forward march of time.\n There are some truly lovely moments in  Old, especially with the Cappa family. Guy and Prisca must confront the issues in their marriage, and struggle with watching their kids grow up way too fast\u2014something Shyamalan, father to now-grown daughters, understands very well. Both Bernal and Krieps give exquisitely subtle performances, while Thomasina McKenzie ( JoJo Rabbit) and Alex Wolff ( Hereditary) are equally effective as the teenaged Maddox and Trent, respectively\n    Unfortunately, the other characters aren&#39;t nearly as fully developed, although the talented cast does its best to bring depth to underwritten roles that amount to little more than stereotypes. This is especially disappointing in the case of Chrystal, the trophy wife, whose entire sense of self-worth rests on her youth and physical beauty. Ours is a culture that treats aging women particularly harshly, and there could have been a fascinating character arc for Chrystal where she genuinely grappled with what sudden, rapid aging means for her sense of self. Instead, she becomes increasingly monstrous, which is far less interesting.\n The biggest issue with the film is that Shyamalan just can&#39;t resist trying to be clever, thereby undermining the reflective, almost elegiac notes he achieves in the final act. All I will say about that twist ending is that it feels tacked on as an afterthought, and is utterly inconsistent in tone with everything that comes before. Some things are best left unexplained. (The graphic novel that inspired Shyamalan, for instance, never explains the strange aging anomaly on the beach, and ends with a cryptic scene of a young child building a new sandcastle all alone.)\n I came out of the screening with mixed feelings, convinced that  Old would prove to be divisive with both critics and audiences, and thus far that seems to be the case. (It&#39;s even  languishing a bit at the box office, although that&#39;s probably as much due to spiking COVID cases dissuading folks from going to theaters as anything else.) Shyamalan has made several films hammered by critics at the time of their release, which were later re-assessed more favorably (see   The Village). Perhaps  Old will also be favorably re-assessed a few years down the road, despite its flaws, since it really does successfully evoke both an existential sense of dread, and an ultimate acceptance of human mortality.\n Old is now playing in theaters. We strongly recommend only watching movies in theaters if you have been fully vaccinated.", "posttime": "2021-07-25 04:25:29", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7535\u5f71,\u626d\u66f2,solid,shyamalan", "title": "\u8bc4\u8bba\uff1a\u300a\u8001\u300b\u662f\u4e00\u90e8\u88ab\u523a\u8033\u7684\u626d\u66f2\u7ed3\u5c40\u7834\u574f\u7684\u51e0\u4e4e\u662f\u5b9e\u5fc3\u7684\u7535\u5f71", "title_en": "Review: Old is a mostly solid film undermined by jarring twist ending", "transed": 1, "url": "https://arstechnica.com/gaming/2021/07/review-old-is-a-mostly-solid-film-undermined-by-jarring-twist-ending/", "via": "", "real_tags": ["\u7535\u5f71", "\u626d\u66f2", "solid", "shyamalan"]}, {"category": "", "categoryclass": "", "imagename": "f22776577dcc312330619dc086d051a3.jpg", "infoid": 1069503, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6765\u81ea Venture Intelligence \u7684\u6570\u636e\u663e\u793a\uff0c\u622a\u81f3 7 \u6708 16 \u65e5\uff0c\u793e\u4ea4\u5546\u52a1\u521d\u521b\u516c\u53f8\u4eca\u5e74\u7684\u878d\u8d44\u989d\u4e3a 5.54 \u4ebf\u7f8e\u5143\uff0c\u6bd4\u53bb\u5e74\u589e\u957f\u4e86 7 \u500d\uff0c\u662f 2015 \u5e74\u4ee5\u6765\u7684\u6700\u9ad8\u6c34\u5e73\u3002\u793e\u4ea4\u7535\u5546\u5c06\u6253\u5f00\u4e8c\u4e09\u7ebf\u5e02\u573a\uff0c\u8fdb\u5165\u5927\u578b\u7535\u5546\u5e73\u53f0\u76ee\u524d\u5c1a\u672a\u505a\u5230\u7684\u5feb\u901f\u6d88\u8d39\u54c1\u548c\u6742\u8d27\u4e2d\u7684\u4f4e\u5229\u6da6\u54c1\u7c7b\uff0c\u6709\u52a9\u4e8e\u63a8\u52a8\u6574\u4f53\u7535\u5546\u884c\u4e1a\u3001\u4e13\u5bb6\u548c\u6295\u8d44\u8005\u89c6\u8be5\u884c\u4e1a\u4e3a\u7535\u5b50\u5546\u52a1\u7684\u5ef6\u4f38\u544a\u8bc9ET\u3002 DealShare \u7684\u8054\u5408\u521b\u59cb\u4eba Sourjyendu Medda \u8868\u793a\uff0c\u7535\u5b50\u5546\u52a1\u5728 Covid-19 \u5927\u6d41\u884c\u671f\u95f4\u7684\u6210\u529f\u6d88\u9664\u4e86\u6295\u8d44\u8005\u5bf9\u793e\u4ea4\u5546\u52a1\u90e8\u95e8\u8868\u73b0\u826f\u597d\u7684\u4efb\u4f55\u7591\u8651\uff0c\u8be5\u516c\u53f8\u6700\u8fd1\u5b8c\u6210\u4e86\u7531\u7ebd\u7ea6\u98ce\u9669\u6295\u8d44\u516c\u53f8\u7275\u5934\u7684 1.44 \u4ebf\u7f8e\u5143\u878d\u8d44\u57fa\u91d1\u8001\u864e\u73af\u7403\u3002 \u201c\u4ed6\u4eec\uff08Tiger Global\uff09\u5173\u4e8e\u793e\u4ea4\u5546\u52a1\u662f\u8be5\u56fd\u7535\u5b50\u5546\u52a1\u7684\u589e\u957f\u5f15\u64ce\u4ee5\u53ca\u7535\u5b50\u5546\u52a1\u662f\u9633\u5149\u884c\u4e1a\u7684\u8bba\u70b9\u975e\u5e38\u975e\u5e38\u9ad8\uff0c\u201d\u6885\u8fbe\u8bf4\u3002\u4e13\u5bb6\u8868\u793a\uff0c\u9664\u4e86\u4eba\u53e3\u7edf\u8ba1\u6570\u636e\u7684\u6570\u5b57\u5316\u548c\u91c7\u7528\u7387\u589e\u52a0\u5916\uff0c\u793e\u4ea4\u5546\u52a1\u8fd1\u5e74\u6765\u53d8\u5f97\u66f4\u52a0\u7ed3\u6784\u5316\u3002\u4ed6\u4eec\u8865\u5145\u8bf4\uff0c\u8be5\u884c\u4e1a\u53d7\u76ca\u4e8e\u4e00\u7cfb\u5217\u56f4\u7ed5\u53d1\u73b0\u548c\u7269\u6d41\u6548\u7387\u7684\u5de5\u5177\uff0c\u8fd9\u4f7f\u5f97\u4e3a\u4f4e\u5229\u6da6\u7c7b\u522b\u63d0\u4f9b\u670d\u52a1\u6210\u4e3a\u53ef\u80fd\u3002 Elevation Capital \u526f\u603b\u88c1 Akarsh Shrivastava \u8868\u793a\uff1a\u201c\u793e\u4ea4\u5546\u52a1\u6b63\u5728\u5c06\u5370\u5ea6\u7684\u7535\u5b50\u5546\u52a1\u9886\u57df\u6269\u5c55\u5230\u73b0\u6709\u5e02\u573a\u7684\u5ba2\u6237\u4e4b\u5916\uff0c\u8fd9\u4e9b\u5ba2\u6237\u80fd\u591f\u89e3\u51b3\u7ed3\u6784\u5316\u7c7b\u522b\u4ee5\u53ca\u6211\u4eec\u79f0\u4e4b\u4e3a\u5370\u5ea6 1.0 \u7528\u6237\u7684\u95ee\u9898\u5546\u4e1a\u72ec\u89d2\u517d Meesho \u548c CityMall\u3002 \u201c\u603b\u4f53\u800c\u8a00\uff0c\u867d\u7136\u4f20\u7edf\u7535\u5b50\u5546\u52a1\u5c06\u7ee7\u7eed\u4fdd\u6301\u826f\u597d\u7684\u89c4\u6a21\uff0c\u4f46\u4ee5\u793e\u4ea4\u4e3a\u4e3b\u5bfc\u7684\u6a21\u5f0f\u5c06\u663e\u7740\u6269\u5927\u5f71\u54cd\u8303\u56f4\uff0c\u201dShrivastava \u8865\u5145\u9053\u3002\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98 Vidit Aatrey \u5728\u6700\u8fd1\u7684\u4e00\u6b21\u91c7\u8bbf\u4e2d\u544a\u8bc9 ET\uff0c\u5f53 Meesho \u5728 2016 \u5e74\u9996\u6b21\u5bfb\u6c42\u7b79\u96c6\u8d44\u91d1\u65f6\uff0c\u6295\u8d44\u8005\u5632\u7b11\u5c06\u8d44\u91d1\u6295\u5165\u4e00\u4e2a\u5e73\u53f0\u7684\u60f3\u6cd5\uff0c\u8be5\u5e73\u53f0\u4f7f\u4eba\u4eec\u80fd\u591f\u901a\u8fc7\u793e\u4ea4\u5a92\u4f53\u7f51\u7edc WhatsApp \u548c Facebook \u8fdb\u884c\u9500\u552e\u3002\u622a\u6b62\u5230 2021 \u5e74\uff0c\u8be5\u516c\u53f8\u4ee5 21 \u4ebf\u7f8e\u5143\u7684\u4f30\u503c\u7b79\u96c6\u4e86 3 \u4ebf\u7f8e\u5143\uff0c\u7531\u8f6f\u94f6\u613f\u666f\u57fa\u91d1 2 \u9886\u6295\u3002 \u201c\u4e0b\u4e00\u6ce2\u589e\u957f\u5c06\u8d85\u8d8a\u4e00\u7ea7\uff0c\u9996\u6279 1 \u4ebf\u6d88\u8d39\u8005\u548c\u793e\u4ea4\u5546\u52a1\u6a21\u5f0f\u6b63\u5728\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u3002\u6211\u8ba4\u4e3a\u8fd9\u63a8\u52a8\u4e86\u5bf9\u8be5\u884c\u4e1a\u7684\u5927\u90e8\u5206\u5174\u8da3\uff0c\u201dAatrey \u8bf4\uff0c\u5e76\u8865\u5145\u8bf4\u73b0\u5728\u8fd1 80% \u7684\u8ba2\u5355\u6765\u81ea\u4e8c\u7ebf\u53ca\u4ee5\u4e0a\u57ce\u5e02\u3002\u672c\u6708\u65e9\u4e9b\u65f6\u5019\uff0c\u6c83\u5c14\u739b\u65d7\u4e0b\u7684 Flipkart \u63a8\u51fa\u4e86\u4e00\u4e2a\u793e\u4ea4\u5546\u52a1\u5e73\u53f0 Shopsy\uff0c\u8ba9\u4e2a\u4eba\u548c\u5c0f\u4f01\u4e1a\u901a\u8fc7 WhatsApp \u7b49\u5e73\u53f0\u6210\u4e3a\u5176\u7f51\u7edc\u4e0a\u5546\u54c1\u7684\u7ecf\u9500\u5546\u3002\u4e13\u5bb6\u8868\u793a\uff0c\u7535\u5b50\u5546\u52a1\u516c\u53f8\u5c06 - \u5728\u5df2\u7ecf\u83b7\u5f97\u5ba2\u6237\u7684\u60c5\u51b5\u4e0b - \u5bfb\u6c42\u5efa\u7acb\u5f3a\u5927\u7684\u793e\u4ea4\u5546\u52a1\u6e20\u9053\u4ee5\u6269\u5927\u5f71\u54cd\u8303\u56f4\u3002\u5b89\u6c38\u5370\u5ea6\u7535\u5b50\u5546\u52a1\u548c\u6d88\u8d39\u4e92\u8054\u7f51\u5408\u4f19\u4eba\u517c\u56fd\u5bb6\u9886\u5bfc\u4eba Ankur Pahwa \u8868\u793a\uff0c\u968f\u7740\u5927\u578b\u7535\u5b50\u5546\u52a1\u53c2\u4e0e\u8005\u7684\u8fdb\u5165\uff0c\u793e\u4ea4\u5546\u52a1\u9886\u57df\u7684\u8fdb\u4e00\u6b65\u6574\u5408\u548c\u878d\u8d44\u5373\u5c06\u5230\u6765\u3002 \u201c\u9664\u4e86\u89c4\u6a21\u548c\u89c4\u6a21\u7684\u67d0\u4e2a\u70b9\u4e4b\u5916\uff0c\u60a8\u5c06\u9700\u8981\u5176\u4e2d\u4e00\u4e9b\u5e02\u573a\u624d\u80fd\u589e\u52a0\u6d88\u8d39\u8005\u57fa\u7840\uff0c\u201dPahwa \u8bf4\uff0c\u6307\u7684\u662f\u7535\u5b50\u5546\u52a1\u53c2\u4e0e\u8005\u7684\u8fdb\u5165\u3002\u9664\u4e86\u878d\u8d44\u70ed\u6f6e\u5916\uff0c\u8be5\u884c\u4e1a\u6700\u8fd1\u51e0\u4e2a\u6708\u4e5f\u51fa\u73b0\u4e86\u4e00\u4e9b\u6574\u5408\u3002\u8c37\u6b4c\u7684 YouTube \u672c\u5468\u65e9\u4e9b\u65f6\u5019\u6536\u8d2d\u4e86\u89c6\u9891\u8d2d\u7269\u5e94\u7528\u7a0b\u5e8f simsim\uff0c\u800c Shop101 \u6700\u8fd1\u88ab\u79fb\u52a8\u5e7f\u544a\u670d\u52a1\u5e73\u53f0 InMobi \u6536\u8d2d\u3002\u4fe1\u4efb\u662f\u5173\u952e \u5728\u5370\u5ea6\uff0c\u7ecf\u9500\u5546\u6a21\u5f0f\u2014\u2014\u793e\u533a\u5f71\u54cd\u8005\u5728\u5404\u81ea\u7684\u793e\u533a\u4e2d\u7b56\u5212\u548c\u9500\u552e\u4ea7\u54c1\u2014\u2014\u53d6\u5f97\u4e86\u6700\u5927\u7684\u6210\u529f\u3002\u521d\u521b\u516c\u53f8\u6b63\u5728\u63d0\u4f9b\u6fc0\u52b1\u63aa\u65bd\u5e76\u82b1\u8d39\u5927\u91cf\u8d44\u6e90\u6765\u57f9\u8bad\u8fd9\u4e9b\u5fae\u578b\u5f71\u54cd\u8005\u4ee5\u63a8\u52a8\u9500\u552e\u3002\u4f8b\u5982\uff0cTrell \u57f9\u8bad\u4e86 5000 \u540d\u7f51\u7ea2\uff0c\u5e76\u4e3a\u4e00\u4e9b\u7f51\u7ea2\u63d0\u4f9b\u4e86\u6700\u4f4e\u6536\u5165\u4fdd\u8bc1\uff0c\u4ee5\u786e\u4fdd\u5176\u7c98\u6027\u3002 \u201c\u9274\u4e8e\u793e\u4ea4\u5546\u52a1\u7684\u53d1\u5c55\u9636\u6bb5\uff0c\u7ecf\u9500\u5546\u7684\u76f8\u5173\u6027\u4ecd\u5c06\u7ee7\u7eed\u589e\u957f\uff0c\u5c3d\u7ba1\u4f1a\u6709\u5e76\u884c\u589e\u957f\u7684\u66ff\u4ee3\u6a21\u5f0f\uff0c\u5982\u76f4\u64ad\uff0c\u201d\u8d1d\u6069\u5370\u5ea6\u516c\u53f8\u5408\u4f19\u4eba\u3001\u4e3b\u8981\u4f5c\u8005 Radhika Sridharan \u8bf4\u3002\u53bb\u5e74\u53d1\u5e03\u7684\u4e00\u4efd\u62a5\u544a\u2014\u2014\u5546\u4e1a\u7684\u672a\u6765\u2014\u2014\u793e\u4ea4\u5546\u52a1\u7684\u5174\u8d77\u3002 Elevation Capital \u526f\u603b\u88c1 Amit Aggarwal \u8868\u793a\uff0c\u5f71\u54cd\u8005\u4e3b\u5bfc\u7684\u6a21\u578b\u4e0e\u521b\u4f5c\u8005\u7ecf\u6d4e\u7684\u5174\u8d77\u5bc6\u5207\u76f8\u5173\uff0c\u672a\u6765\u5c06\u51fa\u73b0\u201c\u66f4\u6df1\u5165\u5730\u5229\u7528\u7ecf\u9500\u5546\u6765\u4ea7\u751f\u9700\u6c42\u5e76\u4e3a\u5ba2\u6237\u63d0\u4f9b\u7cbe\u9009\u9009\u62e9\u7684\u65b0\u6a21\u578b\u201d\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0cDealShare \u62e5\u6709\u8d85\u8fc7 30,000 \u5bb6\u7ecf\u9500\u5546\uff0c\u4ed6\u4eec\u4e3a\u9700\u6c42\u4ea7\u751f\u652f\u4ed8 1% \u81f3 2% \u7684\u8d39\u7528\uff0c\u5e76\u4e3a\u6700\u540e\u4e00\u82f1\u91cc\u4ea4\u4ed8\u652f\u4ed8\u989d\u5916\u7684 5%\u3002\u540e\u7eed\u6b65\u9aa4 \u6d88\u606f\u548c\u793e\u4ea4\u5e94\u7528\u88ab\u89c6\u4e3a\u793e\u4ea4\u5546\u52a1\u5e73\u53f0\u7684\u652f\u70b9\uff0c\u56e0\u4e3a\u5e73\u53f0\u53ca\u5176\u7ecf\u9500\u5546\u4f7f\u7528\u5b83\u4eec\u6765\u63a8\u52a8\u9500\u552e\u3002\u6295\u8d44\u8005\u548c\u4e13\u5bb6\u8868\u793a\uff0c\u968f\u7740\u793e\u4ea4\u5546\u52a1\u5e73\u53f0\u7684\u4e0d\u65ad\u6269\u5927\uff0c\u672a\u6765\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u201c\u5370\u5ea6\u7684\u793e\u4ea4\u5546\u52a1\u4ecd\u5728\u4e0d\u65ad\u53d1\u5c55\uff0c\u5927\u591a\u6570\u793e\u4ea4\u5546\u52a1\u4ecd\u7136\u7531\u4e2a\u4eba\u5356\u5bb6\u548c\u4e70\u5bb6\u901a\u8fc7 Facebook \u548c WhatsApp \u8fdb\u884c\u4ea4\u6613\u3002\u7136\u800c\uff0c\u968f\u7740\u793e\u4ea4\u5546\u52a1\u89c4\u6a21\u7684\u6269\u5927\uff0c\u8fd9\u4e2a\u751f\u6001\u7cfb\u7edf\u5c06\u53d1\u5c55\u5e76\u53d8\u5f97\u66f4\u52a0\u6807\u51c6\u5316\uff0c\u5e76\u5f00\u59cb\u7c7b\u4f3c\u4e8e\u5370\u5ea6\u6709\u7ec4\u7ec7\u7684\u5e73\u53f0\u7535\u5b50\u5546\u52a1\uff0c\u201d\u8d1d\u6069\u516c\u53f8\u7684\u65af\u91cc\u8fbe\u5170\u8bf4\u3002 Elevation \u7684 Shrivastava \u8868\u793a\uff0c\u4ee5\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u4e3a\u8fd9\u4e9b\u5356\u5bb6\u89e3\u51b3\u53d1\u73b0\u95ee\u9898\u7684\u5e73\u53f0\uff0c\u542f\u7528\u804a\u5929\u673a\u5668\u4eba\u548c\u89c6\u9891\u7b49\u4fe1\u4efb\u6807\u8bb0\uff0c\u5177\u6709\u5de8\u5927\u7684\u6f5c\u529b\u3002 \u201c\u6211\u8ba4\u4e3a\u8fd9\u771f\u7684\u662f\u4f60\u4f1a\u770b\u5230\u793e\u4ea4\u5546\u52a1\u8fbe\u5230\u67d0\u79cd\u9003\u9038\u901f\u5ea6\u5e76\u5f00\u59cb\u8fc5\u901f\u6269\u5c55\u7684\u4e00\u5e74\u3002\u603b\u7684\u6765\u8bf4\uff0c\u5546\u4e1a\u7684\u91c7\u7528\u548c\u63a5\u53d7\u5ea6\u975e\u5e38\u9ad8\u3002\u800c\u4e14\u6211\u8ba4\u4e3a\u4eba\u4eec\u5df2\u7ecf\u63a5\u53d7\u4e86\u8fd9\u521b\u9020\u7684\u4ef7\u503c\uff0c\u201d\u5b89\u6c38\u5370\u5ea6\u7684 Pahwa \u8bf4\u3002", "note_en": "Social commerce  startups have raked in $554 million this year as of July 16, a 7x increase from last year and the highest ever since 2015, according to data sourced from Venture Intelligence.   Social commerce will unlock tier 2 and tier 3 markets and reach low-margin categories in fast-moving consumer goods and groceries, which large e-commerce platforms have not done so far, helping boost the overall e-commerce industry, experts and investors who view the sector as an extension of e-commerce told ET.  The success of e-commerce amid the Covid-19 pandemic has dispelled any doubts investors may have had about the social commerce sector doing well, said Sourjyendu Medda, cofounder of  DealShare, which recently closed a $144 million round led by New York-based venture fund Tiger Global.   \u201cTheir (Tiger Global\u2019s) thesis about social commerce being the growth engine of e-commerce in the country and about e-commerce being the sunshine sector is very, very high,\u201d Medda said.  Apart from increased digitisation and adoption across demographics, social commerce has become more structured in recent years, experts said.  The sector has benefited from a range of tools around discovery and logistics efficiency that has made servicing low-margin categories possible, they added.   \u201cSocial commerce is expanding India\u2019s e-commerce sector beyond the customers of current marketplaces which are able to solve for structured categories and what we term as India 1.0 users very well,\u201d said Akarsh Shrivastava, vice president of Elevation Capital, which has backed social commerce unicorn  Meesho and CityMall.  \u201cOverall, while traditional e-commerce will continue to scale well, models which are social-led will significantly expand the reach,\u201d Shrivastava added.  When Meesho first sought to raise funds in 2016, investors laughed at the idea of putting money in a platform that enabled people to sell through social media networks  WhatsApp and Facebook, cofounder and chief executive Vidit Aatrey  told ET in a recent interview.  Cut to 2021, and the company has  raised $300 million led by SoftBank Vision Fund 2 at a valuation of $2.1 billion.   \u201cThe next wave of growth is coming beyond tier 1 and the first 100 million consumers and social commerce models are enabling that. I think this is driving most of the interest in the sector,\u201d Aatrey said, adding that close to 80% of orders are now coming from tier 2 and beyond cities.  Earlier this month, Walmart-owned Flipkart  launched a social commerce platform, Shopsy, for individuals and small businesses to become resellers of goods on their networks through platforms such as WhatsApp.  Experts said e-commerce companies will - with customers already acquired \u2013 look to build up strong social commerce channels to expand reach.  Along with the entry of large e-commerce players, further consolidation and funding are on the horizon for the social commerce sector, said Ankur Pahwa, partner and national leader, e-commerce and consumer internet, EY India.  \u201cBeyond a certain point in size and scale, you will need some of these markets to be able to add to the consumer base,\u201d Pahwa said, referring to the entry of e-commerce players.      Apart from a funding spree, the sector has in recent months seen some consolidation too.  Google&#39;s YouTube  acquired video shopping app simsim earlier this week and Shop101 was  acquired by mobile ad services platform InMobi recently.   Trust is key In India, the reseller model \u2013 where community influencers curate and sell products in their respective communities -- has found the most success.  Startups are providing incentives and spending significant resources to train these micro-influencers to drive sales.  For instance,  Trell has  trained 5,000 influencers and gives minimum earnings guarantee to some influencers to ensure stickiness.  \u201cGiven the stage of development of social commerce, resellers will still continue to grow in relevance, though there will be alternate models like live-streaming that grow in parallel,\u201d said Radhika Sridharan, a partner in Bain &amp; Company India and the lead author of a report --The Future of Commerce \u2013 The Rise of Social Commerce -- released last year.  Amit Aggarwal, vice president, Elevation Capital said influencer-led models align closely with the rise of the creator economy and \u201cnewer models to leverage resellers even more deeply to generate demand and offer curated selections to their customers\u201d will emerge in future.  DealShare has over 30,000 resellers that are paid 1% to 2% for demand generation and an additional 5% for last-mile delivery, the company said.   Next Steps Messaging and social  apps are considered as a fulcrum to  social commerce platforms, as platforms and their resellers use them to drive sales.  Investors and experts said the future could look a bit different as social commerce platforms continue to scale up.  \u201cSocial commerce in India is still evolving, with most social commerce still transacted through Facebook and WhatsApp by individual sellers and buyers. This ecosystem will, however, evolve and become more standardised and begin to resemble organised platform e-commerce in India as social commerce scales,\u201d Sridharan of Bain &amp; Co said.  Elevation\u2019s Shrivastava said platforms that solve for discovery for these sellers in a scalable manner, enable trust markers like chatbots and videos, hold great potential.   \u201cI think this is really the year in which you will see social commerce reaching some sort of an escape velocity to start scaling rapidly. In general, the adoption, and the acceptance of commerce, is very high. And I think people have bought on to the value that this creates,\u201d Pahwa of EY India said.", "posttime": "2021-07-25 04:21:35", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "2020,intelligence,venture,\u7535\u5b50\u5546\u52a1", "title": "Venture Intelligence \u7684\u6570\u636e\u663e\u793a\uff0c\u4eca\u5e74\u8fc4\u4eca\u4e3a\u6b62\uff0c\u5370\u5ea6\u793e\u4ea4\u5546\u52a1\u521d\u521b\u516c\u53f8\u5df2\u7b79\u96c6\u4e86 5.54 \u4ebf\u7f8e\u5143\uff0c\u662f 2020 \u5e74\u5168\u5e74\u7684 7 \u500d", "title_en": "Data from Venture Intelligence shows Indian social commerce startups have raised $554M so far this year, up 7x from all of 2020", "transed": 1, "url": "https://economictimes.indiatimes.com/tech/startups/social-commerce-startups-make-hay-rake-in-554-million-this-year/articleshow/84654609.cms", "via": "", "real_tags": ["2020", "venture", "\u7535\u5b50\u5546\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069500, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6587\u4ef6\u4f20\u8f93\u534f\u8bae (FTP) \u957f\u671f\u4ee5\u6765\u4e00\u76f4\u662f\u7f51\u7edc\u4e0a\u8ba1\u7b97\u673a\u4e4b\u95f4\u65b9\u4fbf\u7684\u6587\u4ef6\u4ea4\u6362\u673a\u5236\u3002\u867d\u7136\u8fd9\u4e2a\u6807\u51c6\u534f\u8bae\u51e0\u4e4e\u4ece\u4e00\u5f00\u59cb\u5c31\u5f97\u5230\u4e86\u6240\u6709\u4e3b\u8981\u6d4f\u89c8\u5668\u7684\u652f\u6301\uff0c\u4f46\u5b83\u73b0\u5728\u662f\u4ecd\u5728\u4f7f\u7528\u7684\u6700\u53e4\u8001\u7684\u534f\u8bae\u4e4b\u4e00\uff0c\u5e76\u4e14\u5b58\u5728\u8bb8\u591a\u4e25\u91cd\u7684\u5b89\u5168\u95ee\u9898\u3002\u6700\u5927\u7684\u5b89\u5168\u98ce\u9669\u662f FTP \u4ee5\u660e\u6587\u4f20\u8f93\u6570\u636e\uff0c\u5141\u8bb8\u653b\u51fb\u8005\u7a83\u53d6\u3001\u6b3a\u9a97\u751a\u81f3\u4fee\u6539\u4f20\u8f93\u7684\u6570\u636e\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0c\u8bb8\u591a\u6076\u610f\u8f6f\u4ef6\u5206\u53d1\u6d3b\u52a8\u901a\u8fc7\u7834\u574f FTP \u670d\u52a1\u5668\u5e76\u4f7f\u7528 FTP \u534f\u8bae\u5728\u6700\u7ec8\u7528\u6237\u7684\u8bbe\u5907\u4e0a\u4e0b\u8f7d\u6076\u610f\u8f6f\u4ef6\u6765\u53d1\u8d77\u653b\u51fb\u3002\u6839\u636e\u6211\u4eec\u5f03\u7528\u975e\u5b89\u5168 HTTP \u5e76\u589e\u52a0\u5b89\u5168\u8fde\u63a5\u767e\u5206\u6bd4\u7684\u610f\u56fe\uff0c\u6211\u4eec\u4ee5\u53ca\u5176\u4ed6\u4e3b\u8981 Web \u6d4f\u89c8\u5668\u51b3\u5b9a\u505c\u6b62\u652f\u6301 FTP \u534f\u8bae\u3002\u5220\u9664 FTP \u4f7f\u6211\u4eec\u66f4\u63a5\u8fd1\u5b8c\u5168\u5b89\u5168\u7684\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u6b63\u5728\u6210\u4e3a\u4ec5\u4f7f\u7528 HTTPS \u7684\u8def\u5f84\uff0c\u5e76\u4e14\u4efb\u4f55\u73b0\u4ee3\u81ea\u52a8\u5347\u7ea7\u673a\u5236\uff08\u4f8b\u5982 HSTS \u6216 Firefox \u7684\u4ec5 HTTPS \u6a21\u5f0f\uff09\u5747\u4e0d\u9002\u7528\uff0c\u8fd9\u4e9b\u673a\u5236\u4f1a\u81ea\u52a8\u5c06\u4efb\u4f55\u8fde\u63a5\u5347\u7ea7\u4e3a\u5b89\u5168\u548c\u52a0\u5bc6\u5230 FTP\u3002\u81ea 88 \u7248\u4ee5\u6765\uff0cFTP \u534f\u8bae\u672c\u8eab\u5df2\u9ed8\u8ba4\u7981\u7528\uff0c\u73b0\u5728\u662f\u65f6\u5019\u7ed3\u675f\u4e00\u4e2a\u65f6\u4ee3\u5e76\u505c\u6b62\u5bf9\u8fd9\u79cd\u8fc7\u65f6\u4e14\u4e0d\u5b89\u5168\u7684\u534f\u8bae\u7684\u652f\u6301\u2014\u2014Firefox 90 \u5c06\u4e0d\u518d\u652f\u6301 FTP \u534f\u8bae\u3002\u5982\u679c\u60a8\u662f Firefox \u7528\u6237\uff0c\u5219\u65e0\u9700\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u5373\u53ef\u4ece\u8fd9\u9879\u5b89\u5168\u6539\u8fdb\u4e2d\u53d7\u76ca\u3002\u4e00\u65e6\u60a8\u7684 Firefox \u81ea\u52a8\u66f4\u65b0\u5230\u7248\u672c 90\uff0c\u4efb\u4f55\u4f9d\u8d56\u4e0d\u5b89\u5168 FTP \u534f\u8bae\u53d1\u8d77\u653b\u51fb\u7684\u5c1d\u8bd5\u90fd\u5c06\u53d8\u5f97\u6beb\u65e0\u7528\u5904\uff0c\u56e0\u4e3a Firefox \u4e0d\u518d\u652f\u6301 FTP\u3002\u5982\u679c\u60a8\u8fd8\u4e0d\u662f Firefox \u7528\u6237\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u4e0b\u8f7d\u6700\u65b0\u7248\u672c\uff0c\u4ee5\u5f00\u59cb\u53d7\u76ca\u4e8e Firefox \u5728\u6d4f\u89c8\u7f51\u9875\u65f6\u4fdd\u62a4\u60a8\u7684\u6240\u6709\u65b9\u5f0f\u3002", "note_en": "The File Transfer Protocol (FTP) has long been a convenient file exchange mechanism between computers on a network. While this standard protocol has been supported in all major browsers almost since its inception, it\u2019s by now one of the oldest protocols still in use and suffers from a number of serious security issues.\n The biggest security risk is that FTP transfers data in cleartext, allowing attackers to steal, spoof and even modify the data transmitted. To date, many malware distribution campaigns launch their attacks by compromising FTP servers and downloading malware on an end user\u2019s device using the FTP protocol.\n  Aligning with our  intent to deprecate non-secure HTTP and increase the percentage of secure connections, we, as well as other major web browsers, decided to discontinue support of the FTP protocol.\n Removing FTP brings us closer to a fully-secure web which is on a path to becoming HTTPS only and any modern automated upgrading mechanisms such as  HSTS or also Firefox\u2019s  HTTPS-Only Mode, which automatically upgrade any connection to become secure and encrypted do not apply to FTP.\n The FTP protocol itself has been  disabled by default since version 88 and now the time has come to end an era and discontinue the support for this outdated and insecure protocol \u2014 Firefox 90 will no longer support the FTP protocol.\n If you are a Firefox user, you don\u2019t have to do anything to benefit from this security advancement. As soon as your Firefox auto-updates to version 90, any attempt to launch an attack relying on the insecure FTP protocol will be rendered useless, because Firefox does not support FTP anymore. If you aren\u2019t a Firefox user yet,  you can download the latest version here to start benefiting from all the ways that Firefox works to protect you when browsing the web.", "posttime": "2021-07-25 02:51:57", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "firefox,\u505c\u6b62,stops,ftp", "title": "Mozilla \u505c\u6b62\u5728 Firefox 90 \u4e2d\u652f\u6301 FTP", "title_en": "Mozilla Stops FTP Support in Firefox 90", "transed": 1, "url": "https://blog.mozilla.org/security/2021/07/20/stopping-ftp-support-in-firefox-90/", "via": "", "real_tags": ["firefox", "\u505c\u6b62", "stops", "ftp"]}]