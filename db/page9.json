[{"category": "", "categoryclass": "", "imagename": "7d28451dd24205055e1fac71db27af2a.png", "infoid": 1072473, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Paul McBride\u7684\u4e00\u4e2a\u52aa\u529b\u63d0\u9192", "note_en": "A stoic reminder by Paul McBride", "posttime": "2022-01-09 22:07:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6b7b\u4ea1,death,paul", "title": "\u6b7b\u4ea1\u65f6\u949f", "title_en": "Death Clock", "transed": 1, "url": "https://thedeathclock.co/", "via": "", "real_tags": ["\u6b7b\u4ea1", "death", "paul"]}, {"category": "", "categoryclass": "", "imagename": "49476a1a9553abad83ee5a842550fde2.jpg", "infoid": 1072472, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5927\u591a\u6570\u4eba\u90fd\u8ba4\u4e3a\u82b1\u56ed\u662f\u9633\u5149\u707f\u70c2\u7684\u5730\u65b9\uff0c\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u4eec\u4e60\u60ef\u4e8e\u751f\u957f\u548c\u996e\u98df\u7684\u4f5c\u7269\u90fd\u9700\u8981\u5145\u5206\u7684\u9633\u5149\u6765\u8301\u58ee\u6210\u957f\u3002\u800c\u4e14\uff0c\u8fd9\u662f\u771f\u7684\uff1a\u90a3\u4e9b\u590f\u5b63\u852c\u83dc\u852c\u83dc\u91ce\u751f\u82b1\u56ed\u4e0e\u5357\u74dc\uff0c\u9752\u8c46\u548c\u897f\u7ea2\u67ff\u9700\u8981\u5927\u91cf\u7684\u9633\u5149\u3002\u7136\u800c\uff0c\u6709\u8bb8\u591a\u53ef\u98df\u7528\u7684\u690d\u7269\u53ef\u4ee5\u5728\u9634\u5f71\u4e2d\u751f\u957f\u3002\n\u6bd4\u4e0d\u662f\uff0cHostas\u4e3a\u4ed6\u4eec\u7684\u89c2\u8d4f\u54c1\u8d28\u800c\u751f\u957f\u3002\u4ed6\u4eec\u6709\u5bbd\u9614\u7684\u53f6\u5b50\uff0c\u5e76\u5728\u590f\u672b\u63d0\u4f9b\u4ee4\u4eba\u60ca\u53f9\u7684\u82b1\u6735\u3002\u7136\u800c\uff0c\u5b83\u4eec\u4e5f\u662f\u53ef\u98df\u7528\u7684\u690d\u7269\u3002\u518d\u6b21\u88ab\u89c6\u4e3a\u82a6\u7b0b\uff0c\u7ecf\u8fc7\u51e0\u5e74\u7684\u51e0\u5e74\uff0cHosta\u82bd\uff08Driuled Leave\uff09\u53ef\u4ee5\u5728\u65e9\u6625\u6536\u83b7\uff0c\u5e76\u7528\u5927\u849c\u548c\uff08\u690d\u7269\u7684\uff09\u9ec4\u6cb9\u4f5c\u4e3a\u7b80\u5355\u7684\u914d\u83dc\u716e\u719f\u3002\n\u5bf9\u4e8e\u66f4\u591a\u7684\u52a8\u7269\uff0c\u5730\u7403\uff0c\u751f\u6d3b\uff0c\u7d20\u98df\u98df\u54c1\uff0c\u5065\u5eb7\u548c\u98df\u8c31\u5185\u5bb9\u6bcf\u5929\u53d1\u5e03\uff0c\u8ba2\u9605\u4e86\u4e00\u4e2a\u7eff\u8272\u661f\u7403\u901a\u8baf\uff01\u6700\u540e\uff0c\u88ab\u516c\u5f00\u8d44\u52a9\u7684\u8d44\u52a9\u4f7f\u6211\u4eec\u66f4\u6709\u673a\u4f1a\u7ee7\u7eed\u4e3a\u60a8\u63d0\u4f9b\u9ad8\u8d28\u91cf\u7684\u5185\u5bb9\u3002\u8bf7\u8003\u8651\u901a\u8fc7\u6350\u8d60\u652f\u6301\u6211\u4eec\uff01", "note_en": "Most of us think of gardens as sunny places, and that\u2019s likely because the crops we are accustomed to growing and eating require full sun to thrive. And, it\u2019s true: those summer veggie gardens wild with squash, green beans, and tomatoes need plenty of sunshine. However, there are many edible plants that can grow in the shade.\n For those of us  seeking to grow more of what we eat, it\u2019s important to learn the ins and outs of what we can grow in less than sun-drenched conditions. It turns out that a multitude of fruits and vegetables prefer shade, or at least dappled shade, in order to do their thing. Many of these are expensive specialty items or foods that never make it to market shelves. That means that we not only get some food but get something a little of the  eaten track.\n If experimental and adventurous, along with a sprinkling of self-sufficient, sounds like a good time, the following list of shade-tolerant produce might be just what you are looking for.\n   Every spring the forest floor is littered with the fresh sprouts of plants that have been waiting for some warmth. For those fortunate enough to be in the know, ostrich ferns put out  an abundance of edible fiddleheads (unfurled fronds) that are reminiscent of asparagus. They prefer partially shady spots and grow into beautiful, ornamental plants for the rest of the year.\n   Sometimes referred to as wild garlic,  ramps grow naturally in deciduous forests, where the soil is rich and ripe with organic matter. They are spring ephemerals and like to get the sun before the leaves have returned to the trees. Ramps take a while to get going (think a few years prior to harvest), but they are perennials that can produce tasty greens for years to come.\n   For a great edible in shady spots, such as the understory of  food forests, creeping raspberry (thimbleberry) will stay low and grow prolifically. It produces delicate fruits that are too soft for transport to market. Nevertheless, they resemble raspberries in flavor and make delicious jams. They like full shade. And, another bonus is that they are thornless.\n   Wintergreen is a low-growing evergreen that makes a beautiful groundcover with the benefit of edible berries and leaves for tea. The flavor of wintergreen is as its name suggests, both the berries and the leaves. This makes a fantastic groundcover in shady garden spots. They will tolerate some sunlight but much prefer shade.\n   More often than not, hostas are grown for their ornamental qualities. They have broad leaves and provide stunning flowers in the late summer. However,  they are also edible plants. Again, treated like asparagus, after a couple of years, hosta shoots (unfurled leaves) can be harvested in early spring and cooked as a simple side dish with garlic and (plant-based) butter.\n   A self-seeding member of the carrot family, sweet Cecily will spread readily wherever it is planted. It does best in partial shade and produces a delicious range of snacks, as well as attracts lots of pollinators. Like many wildflowers, sweet Cecily likes to be planted in the fall, and it will pop up the following spring.\n   Used for its delicious edible greens, good king henry is something found in supermarkets. It\u2019s a perennial plant that will provide food year after year. The sprouts can be treated like asparagus, the leaves like spinach, and the seeds like quinoa.\n   Anytime we can grow something vertically, even in shady spots, it means we are saving valuable growing space. Arctic Beauty Kiwi enjoys growing in partial shade. It reaches about 10-12 feet tall and produces divine fruit more akin to  hardy kiwi (smooth and green on the outside) than the fuzzy kiwis in the supermarket.\n   An understory tree native to the eastern United States,  American pawpaw is not related to the tropical papaya (sometimes called pawpaw) but rather of other tropical fruit trees: custard apple and soursop. American pawpaws produce delicious fruits that have a soft, pudding texture when ready to eat.\n   Elderberry trees are voracious, fast growers that thrive in sodden soil and partial shade. The berries and flowers are both medicinal and edible. The berries are general used for making jam, syrup, and wine. The flowers can be used for teas. The easy-growing trees can be chopped back if they get too large, and they recover to continue producing.\n What amazing thing to do! Grow lots of food in places most gardeners assume are a no-plant land. Not the case at all. Lots of good eats will grow where the sun rarely shows.\n   For more Animal, Earth, Life, Vegan Food, Health, and Recipe content published daily, subscribe to the\u00a0   One Green Planet Newsletter ! Lastly, being publicly-funded gives us a greater chance to continue providing you with high-quality content. Please consider   \u00a0supporting us  by donating!", "posttime": "2022-01-09 22:06:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u751f\u957f,plants,\u690d\u7269", "title": "\u5728\u9634\u5f71\u4e2d\u751f\u957f\u7684\u53ef\u98df\u7528\u690d\u7269", "title_en": "Edible plants that grow in the shade", "transed": 1, "url": "https://www.onegreenplanet.org/lifestyle/10-edible-plants-that-grow-in-the-shade/", "via": "", "real_tags": ["\u751f\u957f", "plants", "\u690d\u7269"]}, {"category": "", "categoryclass": "", "imagename": "b29b61e2ba68dba620675652a8fde581.png", "infoid": 1072471, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u89c2\u770b\u6765\u81ea\u4e16\u754c\u4efb\u4f55\u5730\u65b9\u7684\u96e8\u6ef4\u7684\u9053\u8def\u3002", "note_en": "Watch the path of a raindrop from anywhere in the world.", "posttime": "2022-01-09 22:05:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5730\u65b9,raindrop,\u6765\u81ea", "title": "\u5728\u4e16\u754c\u4e0a\u4efb\u4f55\u5730\u65b9\u653e\u4e0b\u96e8\u6ef4\uff0c\u5e76\u5728\u54ea\u91cc\u770b\u5b83\u6700\u7ec8", "title_en": "Drop a raindrop anywhere in the world and watch where it ends up", "transed": 1, "url": "https://river-runner-global.samlearner.com/", "via": "", "real_tags": ["\u5730\u65b9", "raindrop", "\u6765\u81ea"]}, {"category": "", "categoryclass": "", "imagename": "f2720a8ef1f4dce16282dc28e56327f2.gif", "infoid": 1072470, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba4\u8bc6\u5230\u7b2c\u56db\u8bed\u8a00\u7684\u4e00\u4e9b\u72ec\u7279\u5c5e\u6027\u3002\u7ecf\u8fc7\u51e0\u9875\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u8ba9\u60a8\u5750\u5728\u7b2c\u56db\u5c4a\u7ec8\u7aef\u3002\n\u5192\u53f7\u6307\u793a\u65b0\u5b9a\u4e49\u7684\u5f00\u59cb\u3002\u7ed3\u80a0\u57ab\u5708\u540e\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\u662f\u65b0\u7a0b\u5e8f\u7684\u540d\u79f0\u3002\u5269\u4f59\u7684\u5355\u8bcd\uff0c\u6d17\u6da4\uff0c\u65cb\u8f6c\uff0c\u51b2\u6d17\u548c\u65cb\u8f6c\u5305\u62ec\u65b0\u7a0b\u5e8f\u7684\u201c\u5b9a\u4e49\u201d\u3002\u6700\u540e\uff0c\u5206\u53f7\u8868\u793a\u5b9a\u4e49\u7684\u7ed3\u5c3e\u3002\n\u5728\u672c\u4e66\u4e2d\uff0c\u6211\u4eec\u5c06\u6db5\u76d6\u6700\u6709\u7528\u7684\u6807\u51c6\u6807\u51c6\u547d\u4ee4\u3002\n\u5982\u679c\u60a8\u8fdb\u884c\u6253\u5b57\u9519\u8bef\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fb\u4e2d\u201c\u9000\u683c\u201d\u952e\u6765\u7ea0\u6b63\u5b83\u3002\u8fd4\u56de\u9519\u8bef\uff0c\u8f93\u5165\u6b63\u786e\u7684\u5b57\u6bcd\uff0c\u7ee7\u7eed\u3002\u6b63\u786e\u952e\u5165\u884c\u65f6\uff0c\u6309\u8fd4\u56de\u952e\u3002 \uff08\u4e00\u65e6\u6309RETURN\uff0c\u7ea0\u6b63\u7ebf\u8def\u4e3a\u65f6\u5df2\u665a\u3002\uff09\n\u8f93\u5165\u4e0a\u8ff0\u5b9a\u4e49\u5e76\u6309\u4e0b\u8fd4\u56de\u540e\uff0c\u7b2c\u56db\u6b21\u54cd\u5e94OK\uff0c\u8868\u793a\u5b83\u5df2\u8bc6\u522b\u60a8\u7684\u5b9a\u4e49\u5e76\u8bb0\u4f4f\u5b83\u3002\u73b0\u5728\u8fdb\u5165\n\u5e76\u83b7\u5f97\u7531\u661f\u661f\u7ec4\u6210\u7684\u201cF\u201d\uff08\u7b2c\u56db\uff09\u3002\u5b83\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a\n\u7f16\u8bd1\u5668\u7f16\u8bd1\u65b0\u5b9a\u4e49\uff08\u5b83\u4e0e42\u76f8\u540c\uff0c\u4f46\u4f7f\u7528[char]\u5c06\u5b57\u7b26\u503c\u7f16\u8bd1\u4e3a\u661f\u53f7\uff09\u5230\u5b57\u5178\u4e2d\u3002\u7f16\u8bd1\u5668\u4e0d\u6253\u5370\u661f\u53f7\u3002\n\u7b54\u6848\u5141\u8bb8\u5b58\u50a8\u5728\u5b57\u5178\u4e2d\u7684\u540d\u79f0\u4e2d\u6700\u591a\u4e09\u5341\u4e2a\u5b57\u7b26\u3002\u540d\u79f0\u5e94\u4ec5\u5305\u542b\u56fe\u5f62\u5b57\u7b26\u3002\n\u8fdb\u5165\u95ee\u5019\u5b9a\u4e49\u65f6\uff0c\u4e0d\u8981\u5fd8\u8bb0\u7ed3\u675f;\u7ed3\u675f\u5b9a\u4e49\u3002\n\u5728\u524d\u4e00\u79cd\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u5728\u64cd\u4f5c\u4e4b\u524d\u4e34\u65f6\u5b58\u50a8\u6570\u5b57\u3002\u8be5\u4f4d\u7f6e\u88ab\u79f0\u4e3a\u201c\u5806\u6808\u201d\u3002\u6570\u5b57\u201c\u88ab\u63a8\u5230\u5806\u6808\u4e0a\u201d\uff0c\u7136\u540e\u5728\u5806\u6808\u4e0a\u7684\u6570\u5b57\u4e0a\u5de5\u4f5c\u3002\n\u5373\u4f7f\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u5355\u8bcd\u660e\u661f\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5806\u6808\u4e2d\u83b7\u53d6\u4e00\u4e2a\u6570\u5b57\uff0c\u5e76\u6253\u5370\u8bb8\u591a\u661f\u661f\u3002\n\u7d22\u5f15\u7684\u5806\u6808\u88ab\u63cf\u8ff0\u4e3a\u201c\u6700\u540e\u4e00\u4e2a\u5148\u8fdb\u7684\u201d\uff08Lifo\uff09\u3002\u4f60\u53ef\u4ee5\u4ece\u65e9\u671f\u7684\u63d2\u56fe\u770b\u770b\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\u3002\u9996\u5148\u5c06\u4e09\u4e2a\u63a8\u5230\u5806\u53e0\u4e0a\uff0c\u7136\u540e\u56db\u4e2a\u63a8\u52a8\u5b83\u3002\u540e\u6765\u52a0\u5165\u673a\u9996\u5148\u62cd\u6444\u56db\u4e2a\uff0c\u56e0\u4e3a\u5b83\u5728\u9876\u90e8\u3002\u56e0\u6b64\uff0c\u201c\u6301\u7eed\uff0c\u5148\u3002\u201d\n\u8ddf\u8e2a\u65b0\u5355\u8bcd\u201c\u5806\u6808\u6548\u679c\u201d\u662f\u5f88\u91cd\u8981\u7684;\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6267\u884c\u5b83\u4e4b\u524d\uff0c\u5355\u8bcd\u9700\u8981\u5728\u5806\u6808\u4e0a\u6709\u4e00\u4e2a\u5355\u8bcd\u7684\u6570\u5b57\uff0c\u5e76\u4e14\u4e4b\u540e\u5b83\u5c06\u5728\u5806\u6808\u4e0a\u7559\u4e0b\u7684\u6570\u5b57\u3002\n\u4ee5\u4e0b\u662f\u5230\u76ee\u524d\u4e3a\u6b62\u5b66\u4e60\u7684\u7b2c\u56db\u5355\u8bcd\u7684\u5217\u8868\uff0c\u5305\u62ec\u4ed6\u4eec\u7684\u5806\u6808\u7b26\u53f7\uff08\u201cN\u201d\u4ee3\u8868\u53f7\u7801;\u201cC\u201d\u4ee3\u8868\u54c1\u683c\uff09\uff1a\n\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u6240\u5b9a\u4e49\u7684\uff0c\u663e\u793a\u5b83\u4eec\u7684\u5806\u6808\u6548\u679c\u548c\u5bf9\u4ed6\u4eec\u6240\u505a\u7684\u64cd\u4f5c\u7684\u8bf4\u660e\uff0c\u5b83\u7528\u4f5c\u7a0b\u5e8f\u5458\u7684\u53c2\u8003\u3002\n\u5f53\u5806\u6808\u5141\u8bb8\u7684\u6574\u4e2a\u5185\u5b58\u533a\u57df\u5b8c\u5168\u5145\u6ee1\u6570\u636e\u65f6\u53d1\u751f\u7684\u9519\u8bef\u6761\u4ef6\u3002", "note_en": "In this chapter we\u2019ll acquaint you with some of the unique properties of the Forth language. After a few introductory pages we\u2019ll have you sitting at a Forth terminal.\n   Imagine that you\u2019re an office manager and you\u2019ve just hired a new, eager assistant. On the first day, you teach the assistant the proper format for typing correspondence. (The assistant already knows how to type.) By the end of the day, all you have to do is say \u201cPlease type this.\u201d\n On the second day, you explain the filing system. It takes all morning to explain where everything goes, but by the afternoon all you have to say is \u201cPlease file this.\u201d\n By the end of the week, you can communicate in a kind of shorthand, where \u201cPlease send this letter\u201d means \u201cType it, get me to sign it, photocopy it, file the copy, and mail the original.\u201d Both you and your assistant are free to carry out your business more pleasantly and efficiently.\n  group related tasks together in larger tasks and give each of these a name, and so on.\n Forth lets you organize your own procedures and communicate them to a computer in just this way (except you don\u2019t have to say \u201cplease\u201d).\n As an example, imagine a microprocessor-controlled washing machine programmed in Forth. The ultimate command in your example is named WASHER. Here is the definition of WASHER, as written in Forth:\n  In Forth, the colon indicates the beginning of a new definition. The first word after the colon, WASHER, is the name of the new procedure. The remaining words, WASH, SPIN, RINSE and SPIN, comprise the \u201cdefinition\u201d of the new procedure. Finally, the semicolon indicates the end of the definition.\n  Each of the words comprising the definition of WASHER has already been defined in our washing-machine application. For example, let\u2019s look at our definition of RINSE:\n  As you can see, the definition of RINSE consists of a group of words: FILL, AGITATE, and DRAIN. Once again, each of these words has been already defined elsewhere in our washing-machine application. The definition of FILL might be:\n  In this definition we are referring to  things (faucets) as well as  actions (open and close). The word TILL-FULL has been defined to create a \u201cdelay-loop\u201d which does nothing but mark time until the water-level switch has been activated, indicating that the tub is full.\n If we were to trace these definitions back, we would eventually find that they are all defined in terms of a group of very useful commands that form the basis of all Forth systems. For example, a complete ANS Forth with all extensions includes 371 such commands. Many of these commands are themselves \u201ccolon definitions\u201d just like our example words; others are defined directly in the machine language of the particular computer. In Forth, a defined command is called a \u201c word.\u201d\n The ability to define a word in terms of other words is called \u201cextensibility.\u201d Extensibility leads to a style of programming that is extremely simple, naturally well-organized, and as powerful as you want it to be.\n Whether your application runs an assembly line, acquires data for a scientific environment, maintains a business application, or plays a game, you can create your own \u201cliving language\u201d of words that relate to your particular need.\n In this book we\u2019ll cover the most useful of the standard Forth commands.\n   One of Forth\u2019s many unique features is that it lets you \u201c execute\u201d a word by simply naming the word. If you\u2019re working at a terminal keyboard, this can be as simple as typing in the word and pressing the RETURN key.\n  Of course, you can also use the same word in the definition of any other word, simply by putting its name in the definition.\n Forth is called an \u201cinteractive\u201d language because it carries out your commands the instant that you enter them.\n We\u2019re going to give an example that you can try yourself, showing the process of combining simple commands into more powerful commands. We\u2019ll use some simple Forth words that control your terminal screen. But first, let\u2019s get acquainted with the mechanics of \u201ctalking\u201d to Forth through your terminal\u2019s keyboard.\n Take a seat at your real or imaginary Forth terminal. We\u2019ll assume that someone has been kind enough to set everything up for you, or that you have followed all the instructions given for loading Forth on your particular computer.\n     The RETURN key is your way of telling Forth to acknowledge your request. The  ok is Forth\u2019s way of saying that it\u2019s done everything you asked it to do without any hangups. In this case, you didn\u2019t ask it to do anything, so Forth obediently did nothing and said  ok.\n   If you make a typing mistake, you can correct it by hitting the  \u201cbackspace\u201d key. Back up to the mistake, enter the correct letter, and continue. When you have typed the line correctly, press the RETURN key. (Once you press RETURN, it\u2019s too late to correct the line.)\n In this book, we use the symbol \u21b5 to mark the point where you must press the RETURN key. We also formatted the computer\u2019s output like this (even though the computer does not) to indicate who is typing what.\n   As soon as you pressed the return key, Forth printed fifteen blank spaces and then, having processed your request, responded ok (at the end of the fifteenth space).\n   The phrase \u201c42 EMIT\u201d tells Forth to print an asterisk (we\u2019ll discuss this command later on in the book.) Here Forth printed an asterisk, then responded ok. (The ASCII code for asterisk is 42. Get out your  ASCII table\u00a0if you don\u2019t believe me.)\n   This time Forth printed fifteen spaces and two asterisks. A note about entering words and/or numbers: we can separate them from another by as many spaces as we want for clarity. But they must be separated by  at least one space for Forth to be able to recognize them as words and/or numbers.\n   over and over, let\u2019s define it as a word called \u201cSTAR.\u201d Enter this:\n  Here STAR is the name; \u201c42 EMIT\u201d is the definition. Notice that we set off the colon and semicolon from adjacent words with a space. Also, to make Forth definitions easy for human beings to read, we conventionally separate the name of the definition from its contents with three spaces.\n After you have entered the above definitions and pressed RETURN, Forth responds ok, signifying that it has recognized your definition and will remember it. Now enter\n   There is no difference between a word such as STAR that you define yourself and a word such as EMIT that is already defined. In this book, however, we will print those words that are already defined in this format, so that you can more easily tell the difference.\n Another system-defined word is CR, which performs a  carriage return and line feed at your terminal. For example, enter this:\n  As you can see, Forth executed a carriage return, then printed ok (on the next line).\n        Our MARGIN STAR combination will be useful for what we intend to do, so let\u2019s define\n  We will also need to print a a horizontal row of stars. So let\u2019s enter the following definition (we\u2019ll explain how it works in a later chapter):\n       We will need a word which performs MARGIN, then prints five stars. Let\u2019s define it like this:\n    and get a letter \u201cF\u201d (for Forth) made up of stars. It should look like this:\n  The final step is to make this new procedure a word. Let\u2019s call the word \u201cF\u201d:\n  You\u2019ve just seen an example of the way simple Forth commands can become a foundation for more complex commands. A Forth application, when listed, consists of a series of increasingly powerful definitions rather than a sequence of instructions to be executed in order.\n To give you a sample of what a Forth application really looks like, here\u2019s a listing of our experimental application:\n ( Large letter F ) : STAR 42 EMIT ; : STARS 0 DO STAR LOOP ; : MARGIN CR 30 SPACES ; : BLIP MARGIN STAR ; : BAR MARGIN 5 STARS ; : F BAR BLIP BAR BLIP BLIP CR ;\n   Each word and its definition are entered into Forth\u2019s \u201cdictionary.\u201d The dictionary already contained many words when you started, but your own words are now in the dictionary as well.\n When you define a new word, Forth translates your definition into dictionary form and writes the entry in the dictionary. This process is called  \u201ccompiling.\u201d\n    the compiler compiles the new definition (it does the same as 42 EMIT but uses [CHAR] to compile the literal value for asterisk) into the dictionary. The compiler does  not print the asterisk.\n Once a word is in the dictionary, how is it executed? Let\u2019s say you enter the following line directly at your terminal (not inside a definition):\n   This will activate a word called INTERPRET, also known as the \u201ctext interpreter.\u201d The text interpreter scans the input stream, looking for strings of characters separated by spaces. When a string is found, it is looked up in the dictionary.\n If the word is in the dictionary, it is pointed out to a word called EXECUTE. EXECUTE executes the definition (in this case an asterisk is printed). Finally, the interpreter says everything\u2019s \u201cok.\u201d\n   If the interpreter cannot find the string in the dictionary, he calls the number-runner (called NUMBER). NUMBER knows a number when he sees one. If NUMBER finds a number, he runs it off to a temporary storage location for numbers.\n  What happens when you try to execute a word that is not in the dictionary? Enter this and see what happens:\n  When the text interpreter cannot find XLERB in the dictionary, it tries to pass it off on NUMBER. NUMBER shines it on. Then the interpreter returns the string to you with a question mark (Some Forths print various error messages along with this.)\n  ANS Forth allows up to thirty-one characters of a name to be stored in the dictionary. A name should contain only graphic characters.\n To summarize: when you type a pre-defined word at the terminal, it gets interpreted and then executed.\n Now remember we said that : is a word? When you type the word :, as in\n    The text interpreter finds the colon in the input stream, and points it out to EXECUTE. The compiler translates the definition into dictionary form and writes it in the dictionary. When the compiler gets to the semicolon, he stops, and execution returns to the text interpreter, who gives the message  ok.\n   Say What? In Forth, a word is a character or group of characters that have a definition. Almost any character can be used in naming a word. The reasons that some of the control characters cannot be used are:\n  Here is a Forth word whose name consists of two punctuation marks. The word is .\u201d and it is pronounced \u201cdot-quote.\u201d You can use .\u201d inside a definition to type a string of text at your terminal. Here\u2019s an example:\n  We\u2019ve just defined a word called GREET. Its definition consists of just one Forth word, .\u201d, followed by the text that we want typed. The quotation mark at the  end of the text will not be typed; it marks the end of the text. It\u2019s called a \u201cdelimiter.\u201d\n When entering the definition of GREET, don\u2019t forget the closing ; to end the definition.\n    A computer would not be much good if it couldn\u2019t do arithmetic. If you never studied computers before, it may seem pretty amazing that a computer (or even a pocket calculator) can do arithmetic at all. We can\u2019t cite all the mechanics in this book, but believe us, it\u2019s not a miracle.\n In general, computers perform their operations by breaking everything they do into ridiculously tiny pieces of information and ridiculously easy things to do. To you and me, \u201c3 + 4\u201d is just \u201c7,\u201d without even thinking. To a computer, \u201c3 + 4\u201d is actually a very long list of things to do and remember.\n Without getting too specific, let\u2019s say you have a pocket calculator which expects its buttons to be pushed in this order:\n  in order to perform the addition and display the result. Here\u2019s a generalized picture of what might occur:\n         \u2014 the calculator performs the operation that is stored in the \u201cNext Operation\u201d Box on the contents of the number boxes and leaves the result in Box A.\n Many calculators and computers approach arithmetic problems in a way similar to what we\u2019ve just described. You may not be aware of it, but these machines are actually storing numbers in various locations and then performing operations on them.\n In Forth, there is  one central location where numbers are temporarily stored before being operated on. That location is called the \u201cstack.\u201d Numbers are \u201cpushed onto the stack,\u201d and  then operations work on the numbers on the stack.\n The best way to explain the stack is to illustrate it. If you enter the following line at your terminal:\n    Recall that when you enter a number at your terminal, the text interpreter hands it over to NUMBER, who runs it to some location. That location, it can now be told, is the stack. In short, when you enter the number three from the terminal, you push it onto the stack.\n  Now the four goes onto the \u201ctop\u201d of the stack and pushes the three downward.\n   The next word in the input stream  can be found in the dictionary. + has been previously defined to \u201ctake the top two numbers off the stack, add them, and push the result back onto the stack.\u201d\n  The next word, ., is also found in the dictionary. It has been previously defined to take the number off the stack and print it at the terminal.\n       Forth uses \u201cpostfix\u201d notation (so called because the operator is affixed  after the numbers) rather than \u201cinfix\u201d notation (so called because the operator is affixed  in-between the numbers) so that all words which \u201cneed\u201d numbers can get them from the  stack.\n  even the word STARS, which we defined ourselves, gets a number from the stack and prints that many stars.\n When  all operators are defined to work on the values that are already on the stack, interaction between many operations remains simple even when the program gets complex.\n Earlier we pointed out that Forth lets you execute a word in either of two ways: by simply naming it, or by putting it in the definition of another word and naming  that word. Postfix is part of what makes this possible.\n Just as an example, let\u2019s suppose we wanted a word that will always add the number 4 to whatever number is on the stack (for no other purpose than to illustrate our point). Let\u2019s call the word\n        The \u201c4\u201d  inside the definition goes onto the stack, just as it would if it were outside a definition. Then the + adds the two numbers on the stack. Since + always works on the stack, it doesn\u2019t care that the \u201c4\u201d came from inside the definition and the three from outside.\n As we begin to give some more complicated examples, the value of the stack and of postfix arithmetic will become increasingly apparent to you. The more operators that are involved, the more important it is that they all be able to \u201ccommunicate\u201d with each other.\n  We\u2019ve just begun to demonstrate the philosophy behind the stack and postfix notation. Before we continue, however, let\u2019s look more closely at the stack in action and get accustomed to its peculiarities.\n Forth\u2019s stack is described as a \u201clast-in, first-out\u201d (LIFO). You can see from the earlier illustration why this is so. The three was pushed onto the stack first, then the four pushed on top of it. Later the adding machine took the four off first because it was on top. Hence \u201clast-in, first-out.\u201d\n In general, the only accessible value at any given time is the top value. Let\u2019s use another operation, the . to further demonstrate. Remember that each . removes one number from the stack and prints it. Four dots, therefore, remove four numbers and print them.\n    For input, the rightmost value on the screen will end up on the  top of the stack.\n For output, the rightmost value on the screen came from the  bottom of the stack.\n     Each  dot removes one value. The fourth dot found that there was no value left on the stack to send to the terminal, and it told you so.\n  This error is called \u201cstack underflow.\u201d (Notice that a stack underflow is  not \u201cok.\u201d)\n The opposite condition, when the stack completely fills up, is called \u201cstack overflow.\u201d The stack is so deep, however, that this condition should never occur except when you\u2019ve done something terribly wrong.\n It\u2019s important to keep track of new words\u2019 \u201cstack effects\u201d; that is, the sort of numbers a word needs to have on the stack before you execute it, and the sort of numbers it will leave on the stack afterwards.\n If you maintain a list of your newly created words with their meanings as you go, you or anyone else can easily understand the word\u2019s operations. In Forth, such a list is called a \u201cglossary.\u201d\n To communicate stack effects in a visual way, Forth programmers conventionally use a special stack notation in their glossaries or tables of words. We\u2019re introducing the stack notation now so that you\u2019ll have it under your belt when you begin the next chapter.\n    The dash separates the things that should be on the stack (before you execute the word) from the things that will be left there afterwards. For example, here\u2019s the stack notation for the word .:\n  (The letter \u201cn\u201d stands for \u201cnumber.\u201d) This shows that . expects one number on the stack (before) and leaves  no number on the stack (after).\n    When there is more than one n, we number them n1, n2, n3, etc., consecutively. The numbers 1 and 2 do  not refer to a position on the stack. Stack position is indicated by the order in which the items are written; the  rightmost item on either side of the dashes\u00a0is the  topmost item on the stack. For example, in the stack notation of +, the n2 is on top:\n Since you probably have the hang of it, we may sometimes leave out the \u21b5 symbol. You can usually tell where to press \u201creturn\u201d because the computer\u2019s response is always formatted  like this.\n   Here\u2019s a list of the Forth words you\u2019ve learned so far, including their stack notations (\u201cn\u201d stands for number; \u201cc\u201d stands for character):\n Creates a new definition with the name  xxx and consisting of word or words  yyy.\n  In the next chapter we\u2019ll talk about getting the computer to perform some fancier arithmetic.\n  to generate a dictionary entry in computer memory from source text (the written-out form of a definition). Distinct from \u201cexecute.\u201d\n  in Forth, a list of words and definitions including both \u201csystem\u201d definitions (pre-defined) and \u201cuser\u201d definitions (which you invent). A dictionary resides in computer memory in compiled form.\n  to perform. Specifically, to execute a word is to perform the operations specified in the compiled definition of the word.\n  a characteristic of a computer language which allows a programmer to add new features or modify existing ones.\n  a list of words defined in Forth, showing their stack effects and an explanation of what they do, which serves as a reference for programmers.\n  the method of writing operators between the operands they affect, as in \u201c2 + 5.\u201d\n  the text to be read by the text interpreter. This may be text that you have just typed in at your terminal, or it may be text that is stored on disk.\n  (when referring to Forth\u2019s text interpreter) to read the input stream, then to find each word in the dictionary or, failing that, to convert it to a number.\n  (last-in, first-out) the type of stack which Forth uses. A can of tennis balls is a LIFO structure; the last ball you drop in is the one you must remove first.\n  the method of writing operators after the operands they affect, as in \u201c2 5 +\u201d for \u201c2 + 5.\u201d Also known as Reverse Polish Notation.\n  in Forth, a region of memory which is controlled in such a way that data can be stored or removed in a last-in, first-out (LIFO) fashion.\n  the error condition that occurs when the entire area of memory allowed for the stack is completely filled with data.\n  the error condition that occurs when an operation expects a value on the stack, but there is no valid data on the stack.\n      Define a word called GIFT which, when executed, will type out the name of some gift. For example, you might try:\n  Now define a word called GIVER which will print out a person\u2019s first name. Finally, define a word called THANKS which i\n......", "posttime": "2022-01-09 22:04:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u7840,fundamental,\u5b9a\u4e49", "title": "\u57fa\u7840\uff082016\uff09", "title_en": "Fundamental Forth (2016)", "transed": 1, "url": "https://www.forth.com/starting-forth/1-forth-stacks-dictionary/", "via": "", "real_tags": ["\u57fa\u7840", "\u5b9a\u4e49"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072469, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c3d\u7ba1\u6211\u8ba4\u4e3a\u81ea\u5df1\u662f\u4e00\u4e2a\u5bc6\u7801\uff0c\u4f46\u6211\u6ca1\u6709\u53d1\u73b0\u81ea\u5df1\u7279\u522b\u88ab\u5438\u5f15\u5230\u201c\u52a0\u5bc6\u3002\u201d\u6211\u4e0d\u8ba4\u4e3a\u6211\u5b9e\u9645\u4e0a\u8bf4\u8fc7\u201c\u79bb\u5f00\u6211\u7684\u8349\u576a\u201d\u7684\u8bdd\uff0c\u4f46\u6211\u66f4\u6709\u53ef\u80fd\u70b9\u51fbPepperidge\u519c\u573a\u8bb0\u5f97\u5473\u9053\u7684\u6a21\u56e0\uff0c\u5173\u4e8e\u5982\u4f55\u201c\u52a0\u5bc6\u201d\u6bd4\u6211\u662f\u201c\u52a0\u5bc6\u201d\u3002\u6700\u65b0\u7684nft\u6ef4\u3002\n\u4f46\u662fweb3\u6253\u7b97\u4e0d\u540c\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u770b\u770b\u3002\u4e3a\u4e86\u8ba9\u7a7a\u95f4\u5feb\u901f\u611f\u53d7\u5230\u5bf9\u672a\u6765\u53ef\u80fd\u6301\u6709\u7684\u5185\u5bb9\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u51b3\u5b9a\u5efa\u7acb\u51e0\u4e2aDAPP\u5e76\u521b\u5efa\u4e00\u4e2aNFT\u3002\n\u670d\u52a1\u5668\uff01\u4f46\u662f\uff0c\u6b63\u5982\u6211\u4eec\u6240\u77e5\uff0c\u4eba\u4eec\u4e0d\u60f3\u8fd0\u884c\u81ea\u5df1\u7684\u670d\u52a1\u5668\u3002\u6b63\u5982\u5b83\u6240\u8bf4\uff0c\u516c\u53f8\u5df2\u51fa\u73b0\u9500\u552eAPI\u8bbf\u95ee\u5b83\u4eec\u4f5c\u4e3a\u670d\u52a1\u8fd0\u884c\u7684Etereum\u8282\u70b9\uff0c\u4ee5\u53ca\u63d0\u4f9b\u5206\u6790\uff0c\u589e\u5f3a\u7684API\uff0c\u5b83\u4eec\u6784\u5efa\u5728\u9ed8\u8ba4\u7684Etereum API\u4e4b\u4e0a\uff0c\u5e76\u8bbf\u95ee\u5386\u53f2\u4e8b\u52a1\u3002\u54ea\u4e2a\u58f0\u97f3......\u719f\u6089\u3002\u6b64\u65f6\uff0c\u57fa\u672c\u4e0a\u6709\u4e24\u5bb6\u516c\u53f8\u3002\u51e0\u4e4e\u6240\u6709DAPP\u90fd\u4f7f\u7528infura\u6216\u70bc\u91d1\u672f\u6765\u4e0e\u533a\u5757\u94fe\u4e92\u52a8\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u5f53\u60a8\u5c06\u94b1\u5305\u4e0eMetAmask\u50cfMetAmask\u4e00\u6837\u8fde\u63a5\u5230DAPP\u65f6\uff0cDAPP\u901a\u8fc7\u60a8\u7684\u94b1\u5305\u4e0e\u533a\u5757\u94fe\u4e92\u52a8\uff0cMetAmask\u53ea\u662f\u6253\u7535\u8bdd\u7ed9Infura\uff01\n\u51e0\u5929\u540e\uff0c\u6ca1\u6709\u8b66\u544a\u6216\u89e3\u91ca\uff0c\u6211\u6240\u505a\u7684nft\u88ab\u53d6\u6d88\u4eceOpenSea\uff08NFT\u5e02\u573a\uff09\u5220\u9664\uff1a\n\u6240\u6709\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8\u7684NFT\u4eceOpenSea\u4e2d\u5220\u9664\uff0c\u5b83\u4e5f\u4f1a\u4ece\u60a8\u7684\u94b1\u5305\u4e2d\u6d88\u5931\u3002\u5728\u529f\u80fd\u4e0a\uff0c\u6211\u7684nft\u5728\u533a\u5757\u94fe\u4e0a\u6f20\u4e0d\u5173\u5fc3\uff0c\u56e0\u4e3a\u94b1\u5305\uff08\u8d8a\u6765\u8d8a\u591a\u7684\u4e1c\u897f\u5728\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u4e00\u5207\uff09\u53ea\u662f\u4f7f\u7528opensea API\u6765\u663e\u793aNFT\uff0c\u8be5API\u5f00\u59cb\u8fd4\u56de304\uff0c\u6ca1\u6709\u5bf9\u6240\u6709\u7684NFT\u7684\u67e5\u8be2\u8fd4\u56de304\u5185\u5bb9\u901a\u8fc7\u6211\u7684\u5730\u5740\uff01\n\u4f46\u662f\uff0c\u5373\u4f7f\u8fd9\u53ea\u662f\u4e00\u4e2a\u5f00\u59cb\uff08\u5b83\u53ef\u80fd\u662f\u5f88\u597d\u7684\uff01\uff09\uff0c\u6211\u4e0d\u786e\u5b9a\u6211\u4eec\u662f\u5426\u5e94\u8be5\u8003\u8651\u4efb\u4f55\u5b89\u6170\u3002\u6211\u8ba4\u4e3a\u76f8\u53cd\u53ef\u80fd\u662f\u771f\u7684;\u770b\u8d77\u6765\u6211\u4eec\u5e94\u8be5\u6ce8\u610f\uff0c\u4ece\u4e00\u5f00\u59cb\uff0c\u8fd9\u4e9b\u6280\u672f\u7acb\u5373\u901a\u8fc7\u5e73\u53f0\u8fdb\u884c\u96c6\u4e2d\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u5b9e\u73b0\uff0c\u8fd9\u5bf9\u751f\u6001\u7cfb\u7edf\u7684\u901f\u5ea6\u4ea7\u751f\u4e86\u301c\u96f6\u5bf9\u901f\u5ea6\u7684\u5f71\u54cd\uff0c\u5e76\u4e14\u5927\u591a\u6570\u53c2\u4e0e\u8005\u90fd\u6ca1\u6709\u5f52\u56e0\u4e8e\u901f\u5ea6\uff0c\u5e76\u4e14\u5927\u591a\u6570\u53c2\u4e0e\u8005\u90fd\u6ca1\u6709\u5bf9\u751f\u6001\u7cfb\u7edf\u7684\u901f\u5ea6\u4ea7\u751f\u5f71\u54cd\u3002\u751a\u81f3\u77e5\u9053\u6216\u7167\u987e\u5b83\u6b63\u5728\u53d1\u751f\u3002\u8fd9\u53ef\u80fd\u8868\u660e\uff0c\u6743\u529b\u4e0b\u653e\u672c\u8eab\u5e76\u4e0d\u662f\u5bf9\u4e0b\u6e38\u5927\u591a\u6570\u4eba\u7684\u76f4\u63a5\u5b9e\u9645\u6216\u91cd\u89c6\uff0c\u5373\u552f\u4e00\u7684\u6743\u529b\u4e0b\u653e\u4eba\u5458\u60f3\u8981\u7684\u6570\u91cf\u662f\u5b58\u5728\u7684\u6700\u4f4e\u91d1\u989d\uff0c\u5982\u679c\u4e0d\u662f\u975e\u5e38\u6709\u610f\u8bc6\u5730\u5360\u8fd9\u4e9b\u52bf\u529b\u5c06\u8fdb\u4e00\u6b65\u63a8\u52a8\u6211\u4eec\u800c\u4e0d\u662f\u66f4\u63a5\u8fd1\u7406\u60f3\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u65e5\u5b50\u8f83\u5c11\u3002\n......", "note_en": "Despite considering myself a cryptographer, I have not found myself particularly drawn to \u201ccrypto.\u201d I don\u2019t think I\u2019ve ever actually said the words \u201cget off my lawn,\u201d but I\u2019m much more likely to click on  Pepperidge Farm Remembers flavored memes about how \u201ccrypto\u201d used to mean \u201ccryptography\u201d than I am the latest NFT drop.\n Also \u2013 cards on the table here \u2013 I don\u2019t share the same generational excitement for moving all aspects of life into an instrumented economy.\n Even strictly on the technological level, though, I haven\u2019t yet managed to become a believer. So given all of the recent attention into what is now being called web3, I decided to explore some of what has been happening in that space more thoroughly to see what I may be missing.\n   web3 is a somewhat ambiguous term, which makes it difficult to rigorously evaluate what the ambitions for web3 should be, but the  general thesis seems to be that web1 was decentralized, web2 centralized everything into platforms, and that web3 will decentralize everything again. web3 should give us the richness of web2, but decentralized.\n It\u2019s probably good to have some clarity on why centralized platforms emerged to begin with, and in my mind the explanation is pretty simple:\n People don\u2019t want to run their own servers, and never will. The premise for web1 was that everyone on the internet would be both a publisher and consumer of content as well as a publisher and consumer of infrastructure.   We\u2019d all have our own web server with our own web site, our own mail server for our own email, our own finger server for our own status messages, our own chargen server for our own character generation. However \u2013 and I don\u2019t think this can be emphasized enough \u2013  that is not what people want. People do not want to run their own servers.   Even nerds do not want to run their own servers at this point. Even organizations building software full time do not want to run their own servers at this point. If there\u2019s one thing I hope we\u2019ve learned about the world, it\u2019s that people do not want to run their own servers. The companies that emerged offering to do that for you instead were successful, and the companies that iterated on new functionality based on what is possible with those networks were even more successful.\n  A protocol  moves much more slowly than a platform. After 30+ years, email is still unencrypted; meanwhile WhatsApp went from unencrypted to full e2ee in a year. People are still trying to standardize sharing a video reliably over IRC; meanwhile, Slack lets you create custom reaction emoji based on your face.   This isn\u2019t a funding issue. If something is truly decentralized, it becomes very difficult to change, and often remains stuck in time. That is a problem for technology, because the rest of the ecosystem is moving very quickly, and if you don\u2019t keep up you will fail. There are entire parallel industries focused on defining and improving methodologies like Agile to try to figure out how to organize enormous groups of people so that they can  move as quickly as possible because it is so critical.   When the technology itself is more conducive to stasis than movement, that\u2019s a problem. A sure recipe for success has been to take a 90\u2019s protocol that was stuck in time, centralize it, and iterate quickly.\n But web3 intends to be different, so let\u2019s take a look. In order to get a quick feeling for the space and a better understanding for what the future may hold, I decided to build a couple of dApps and create an NFT.\n  To get a feeling for the web3 world, I made a dApp called  Autonomous Art that lets anyone mint a token for an NFT by making a visual contribution to it. The cost of making a visual contribution increases over time, and the funds a contributor pays to mint are distributed to all previous artists (visualizing this financial structure would resemble something similar to a pyramid shape). At the time of this writing, over $38k USD has gone into creating this collective art piece.\n I also made a dApp called  First Derivative that allows you to create, discover, and exchange NFT derivatives which track an underlying NFT, similar to financial derivatives which track an underlying asset \ud83d\ude09.\n Both gave me a feeling for how the space works. To be clear, there is nothing particularly \u201cdistributed\u201d about the apps themselves: they\u2019re just normal react websites. The \u201cdistributedness\u201d refers to where the state and the logic/permissions for updating the state lives: on the blockchain instead of in a \u201ccentralized\u201d database.\n One thing that has always felt strange to me about the cryptocurrency world is the lack of attention to the client/server interface. When people talk about blockchains, they talk about distributed trust, leaderless consensus, and all the mechanics of how that works, but often gloss over the reality that clients ultimately can\u2019t participate in those mechanics. All the network diagrams are of servers, the trust model is between servers, everything is about servers. Blockchains are designed to be a network of peers, but not designed such that it\u2019s really possible for your mobile device or your browser to be one of those peers.\n With the shift to mobile, we now live firmly in a world of clients and servers \u2013 with the former completely unable to act as the latter \u2013 and those questions seem more important to me than ever. Meanwhile, ethereum actually refers to servers as \u201cclients,\u201d so there\u2019s  not even a word for an actual untrusted client/server interface that will have to exist somewhere, and no acknowledgement that if successful there will ultimately be billions (!) more clients than servers.\n For example, whether it\u2019s running on mobile or the web, a dApp like  Autonomous Art or  First Derivative needs to interact with the blockchain somehow \u2013 in order to modify or render state (the collectively produced work of art, the edit history for it, the NFT derivatives, etc). That\u2019s not really possible to do from the client, though, since the blockchain can\u2019t live on your mobile device (or in your desktop browser realistically). So the only alternative is to interact with the blockchain via a node that\u2019s running remotely on a server somewhere.\n A server! But, as we know, people don\u2019t want to run their own servers. As it happens, companies have emerged that sell API access to an ethereum node they run as a service, along with providing analytics, enhanced APIs they\u2019ve built on top of the default ethereum APIs, and access to historical transactions. Which sounds\u2026 familiar. At this point, there are basically two companies. Almost all dApps use either  Infura or  Alchemy in order to interact with the blockchain. In fact, even when you connect a wallet like MetaMask to a dApp, and the dApp interacts with the blockchain via your wallet, MetaMask is just making calls to Infura!\n These client APIs are not using anything to verify blockchain state or the authenticity of responses. The results aren\u2019t even signed. An app like Autonomous Art says \u201chey what\u2019s the output of this view function on this smart contract,\u201d Alchemy or Infura responds with a JSON blob that says \u201cthis is the output,\u201d and the app renders it.\n This was surprising to me. So much work, energy, and time has gone into creating a trustless distributed consensus mechanism, but virtually all clients that wish to access it do so by simply trusting the outputs from these two companies without any further verification. It also doesn\u2019t seem like the best privacy situation. Imagine if every time you interacted with a website in Chrome, your request first went to Google before being routed to the destination and back. That\u2019s the situation with ethereum today. All write traffic is obviously already public on the blockchain, but these companies also have visibility into almost all read requests from almost all users in almost all dApps.\n Partisans of the blockchain might say that it\u2019s okay if these types of centralized platforms emerge, because the state itself is available on the blockchain, so if these platforms misbehave clients can simply move elsewhere. However, I would suggest that this is a very simplistic view of the dynamics that make platforms what they are.\n   I also wanted to create a more traditional NFT. Most people think of images and digital art when they think of NFTs, but NFTs generally do not store that data on-chain. For most NFTs of most images, that would be much too expensive.\n Instead of storing the data on-chain, NFTs instead contain a URL that  points to the data. What surprised me about the standards was that there\u2019s no hash commitment for the data located at the URL. Looking at many of the NFTs on popular marketplaces being sold for tens, hundreds, or millions of dollars, that URL often just points to some VPS running Apache somewhere. Anyone with access to that machine, anyone who buys that domain name in the future, or anyone who compromises that machine can change the image, title, description, etc for the NFT to whatever they\u2019d like at any time (regardless of whether or not they \u201cown\u201d the token). There\u2019s nothing in the NFT spec that tells you what the image \u201cshould\u201d be, or even allows you to confirm whether something is the \u201ccorrect\u201d image.\n So as an experiment, I made an NFT that changes based on who is looking at it, since the web server that serves the image can choose to serve different images based on the IP or User Agent of the requester. For example, it looked  one way on OpenSea,  another way on Rarible, but when you buy it and view it from your crypto wallet, it will always display as a large \ud83d\udca9 emoji. What you bid on isn\u2019t what you get. There\u2019s nothing unusual about this NFT, it\u2019s how the NFT specifications are built. Many of the highest priced NFTs could turn into \ud83d\udca9 emoji at any time; I just made it explicit.\n  After a few days, without warning or explanation, the NFT I made was removed from OpenSea (an NFT marketplace):\n  The takedown suggests that I violated some Term Of Service, but after reading the terms, I don\u2019t see any that prohibit an NFT which changes based on where it is being looked at from, and I was openly describing it that way.\n What I found most interesting, though, is that after OpenSea removed my NFT, it also  no longer appeared in any crypto wallet on my device. This is web3, though, how is that possible?\n A crypto wallet like MetaMask, Rainbow, etc is \u201cnon-custodial\u201d (the keys are kept client side), but it has the same problem as my dApps above: a wallet has to run on a mobile device or in your browser. Meanwhile, ethereum and other blockchains have been designed with the idea that it\u2019s a network of peers, but not designed such that it\u2019s really possible for your mobile device or your browser to be one of those peers.\n A wallet like MetaMask needs to do basic things like display your balance, your recent transactions, and your NFTs, as well as more complex things like constructing transactions, interacting with smart contracts, etc. In short, MetaMask needs to interact with the blockchain, but the blockchain has been built such that clients like MetaMask can\u2019t interact with it. So like my dApp, MetaMask accomplishes this by making API calls to three companies that have consolidated in this space.\n       Again, like with my dApp, these responses are not authenticated in some way. They\u2019re not even signed so that you could later prove they were lying. It reuses the same connections, TLS session tickets, etc for all the accounts in your wallet, so if you\u2019re managing multiple accounts in your wallet to maintain some identity separation, these companies know they\u2019re linked.\n MetaMask doesn\u2019t actually  do much, it\u2019s just a view onto data provided by these centralized APIs. This isn\u2019t a problem specific to MetaMask \u2013 what other option do they have? Rainbow, etc are set up in exactly the same way. (Interestingly, Rainbow has their own data for the social features they\u2019re building into their wallet \u2013 social graph, showcases, etc \u2013 and have chosen to build all of that on top of Firebase instead of the blockchain.)\n All this means that if your NFT is removed from OpenSea, it also disappears from your wallet. It doesn\u2019t functionally matter that my NFT is indelibly on the blockchain somewhere, because the wallet (and increasingly everything else in the ecosystem) is just  using the OpenSea API to display NFTs, which began returning 304 No Content for the query of NFTs owned by my address!\n  Given the history of why web1 became web2, what seems strange to me about web3 is that technologies like ethereum have been built with many of the same implicit trappings as web1. To make these technologies usable, the space is consolidating around\u2026 platforms. Again. People who will run servers for you, and iterate on the new functionality that emerges. Infura, OpenSea, Coinbase, Etherscan.\n Likewise, the web3 protocols are slow to evolve. When building First Derivative, it would have been great to price minting derivatives as a percentage of the underlying\u2019s value. That data isn\u2019t on chain, but it\u2019s in an API that OpenSea will give you. People are excited about NFT royalties for the way that they can benefit creators, but royalties aren\u2019t specified in ERC-721, and it\u2019s too late to change it, so OpenSea has its own way of configuring royalties that exists in web2 space. Iterating quickly on centralized platforms is  already outpacing the distributed protocols and consolidating control into platforms.\n Given those dynamics, I don\u2019t think it should be a surprise that we\u2019re already at a place where your crypto wallet\u2019s view of your NFTs is OpenSea\u2019s view of your NFTs. I don\u2019t think we should be surprised that OpenSea isn\u2019t a pure \u201cview\u201d that can be replaced, since it has been busy iterating the platform beyond what is possible strictly with the impossible/difficult to change standards.\n I think this is very similar to the situation with email. I can run my own mail server, but it doesn\u2019t functionally matter for privacy, censorship resistance, or control \u2013 because GMail is going to be on the other end of every email that I send or receive anyway. Once a distributed ecosystem centralizes around a platform for convenience, it becomes the worst of both worlds: centralized control, but still distributed enough to become mired in time. I can build my own NFT marketplace, but it doesn\u2019t offer any additional control if OpenSea mediates the view of all NFTs in the wallets people use (and every other app in the ecosystem).\n This isn\u2019t a complaint about OpenSea or an indictment of what they\u2019ve built. Just the opposite, they\u2019re trying to build something that works. I think we should  expect this kind of platform consolidation to happen, and given the inevitability, design systems that give us what we want when that\u2019s how things are organized. My sense and concern, though, is that the web3 community expects some other outcome than what we\u2019re already seeing.\n  \u201cIt\u2019s early days still\u201d is the most common refrain I see from people in the web3 space when discussing matters like these. In some ways, cryptocurrency\u2019s failure to scale beyond relatively nascent engineering is what makes it possible to consider the days \u201cearly,\u201d since objectively it has already been a decade or more.\n However, even if this is just the beginning (and it very well might be!), I\u2019m not sure we should consider that any consolation. I think the opposite might be true; it seems like we should take notice that  from the very beginning, these technologies immediately tended towards centralization through platforms in order for them to be realized, that this has ~zero negatively felt effect on the velocity of the ecosystem, and that most participants don\u2019t even know or care it\u2019s happening. This might suggest that decentralization itself is not actually of immediate practical or pressing importance to the majority of people downstream, that the only amount of decentralization people want is the minimum amount required for something to exist, and that if not very consciously accounted for, these forces will push us further from rather than closer to the ideal outcome as the days become less early.\n  When you think about it, OpenSea would actually be much \u201cbetter\u201d in the immediate sense if all the web3 parts were gone. It would be faster, cheaper for everyone, and easier to use. For example, to accept a bid on my NFT, I would have had to pay over $80-$150+ just in ethereum transaction fees. That puts an artificial floor on all bids, since otherwise you\u2019d lose money by accepting a bid for less than the gas fees. Payment fees by credit card, which typically feel extortionary, look cheap compared to that. OpenSea could even publish a simple transparency log if people wanted a public record of transactions, offers, bids, etc to verify their accounting.\n However, if they had built a platform to buy and sell images that wasn\u2019t nominally based on crypto, I don\u2019t think it would have taken off. Not because it isn\u2019t distributed, because as we\u2019ve seen so much of what\u2019s required to make it work is already not distributed. I don\u2019t think it would have taken off  because this is a gold rush. People have made money through cryptocurrency speculation, those people are interested in spending that cryptocurrency in ways that support their investment while offering additional returns, and so that defines the setting for the market of transfer of wealth.\n The people at the end of the line who are flipping NFTs do not fundamentally care about distributed trust models or payment mechanics, but they care about where the money is. So the money draws people into OpenSea, they improve the experience by building a platform that iterates on the underlying web3 protocols in web2 space, they eventually offer the ability to \u201cmint\u201d NFTs through OpenSea itself instead of through your own smart contract, and eventually this all opens the door for Coinbase to offer access to the validated NFT market with their own platform via your debit card. That opens the door to Coinbase managing the tokens themselves through dark pools that Coinbase holds, which helpfully eliminates the transaction fees and makes it possible to avoid having to interact with smart contracts at all. Eventually, all the web3 parts  are gone, and you have a website for buying and selling JPEGS with your debit card. The project can\u2019t start as a web2 platform because of the market dynamics, but the same market dynamics and the fundamental forces of centralization will likely drive it to end up there.\n At the end of the stack, NFT artists are  excited about this kind of progression because it means more speculation/investment in their art, but it also seems like if the point of web3 is to avoid the trappings of web2, we should be concerned that this is already the natural tendency for these new protocols that are supposed to offer a different future.\n I think these market forces will likely continue, and in my mind the question of how long it continues is a question of whether the vast amounts of accumulated cryptocurrency are ultimately inside an engine or a leaky bucket. If the money flowing through NFTs ends up channeled back into crypto space, it could continue to accelerate forever (regardless of whether or not it\u2019s just web2x2). If it churns out, then this will be a blip. Personally, I think enough money has been made at this point that there are enough faucets to keep it going, and this won\u2019t just be a blip. If that\u2019s the case, it seems worth thinking about how to avoid web3 being web2x2 (web2 but with even less privacy) with some urgency.\n  I have only dipped my toe in the waters of web3. Looking at it through the lens of these small projects, though, I can easily see why so many people find the web3 ecosystem so neat. I don\u2019t think it\u2019s on a trajectory to deliver us from centralized platforms, I don\u2019t think it will fundamentally change our relationship to technology, and I think the privacy story is already \n......", "posttime": "2022-01-09 22:04:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "web3,impressions,nft", "title": "\u6211\u7684Web3\u7684\u7b2c\u4e00\u5370\u8c61", "title_en": "My First Impressions of Web3", "transed": 1, "url": "https://moxie.org/2022/01/07/web3-first-impressions.html", "via": "", "real_tags": ["web3", "nft"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072468, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03RG3D 0.24\u5df2\u88ab\u91ca\u653e\uff01\u6b64\u7248\u672c\u57282D\u652f\u6301\uff0c\u7269\u7406\uff0c\u7528\u6237\u754c\u9762\uff0c\u6027\u80fd\uff0c\u8d44\u6e90\u7cfb\u7edf\uff0c\u4e66\u7c4d\u7b49\u4e2d\u5177\u6709\u91cd\u5927\u6539\u8fdb\u3002\u8ba9\u6211\u4eec\u7b80\u8981\u4ecb\u7ecd\u6700\u91cd\u8981\u7684\u53d8\u5316\u548c\u6539\u8fdb\u3002\n\u6b64\u7248\u672c\u7684\u4e3b\u8981\u6539\u8fdb\u4e4b\u4e00\u662f\u65b0\u7684\u8f7b\u91cf\u7ea7\u53cd\u5c04\u548cInspector\u7a97\u53e3\u5c0f\u90e8\u4ef6\u3002\u53cd\u5c04\u662f\u6307\u5728\u8fd0\u884c\u65f6\u8bbf\u95ee\u5bf9\u8c61\u7684\u5c5e\u6027\uff0cRG3D\u901a\u8fc7Inspect Traitwith Proc-Macro\u6765\u6267\u884c\u6b64\u64cd\u4f5c\uff1a\n\u8be5\u53d1\u52a8\u673a\u73b0\u5728\u80fd\u591f\u70ed\u91cd\u8f7d\u7eb9\u7406\uff0c\u8fd9\u5bf9\u4e8e\u5236\u4f5c2D\u6e38\u620f\u7279\u522b\u6709\u7528\u3002\u53d1\u52a8\u673a\u4f7f\u7528Lanczos\u8fc7\u6ee4\u5668\u751f\u6210\u7eb9\u7406\u7684\u8d34\u56fe\uff0c\u8fd9\u4e3a\u60a8\u63d0\u4f9b\u4e86\u5353\u8d8a\u7684\u7ed3\u679c\u3002\n\u7a97\u53e3\u5ba2\u6237\u7aef\u533a\u57df\u73b0\u5728\u7531\u6bcf\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u7684\u6e32\u67d3\u5668\u6b63\u786e\u586b\u5145\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662fWindows\u3002", "note_en": "I\u2019m happy to announce that rg3d 0.24 has been released! This release has major improvements in 2D support, physics, user interface, performance, resource system, book, etc. Let\u2019s briefly go over the most significant changes and improvements.\n  Since the very beginning, the engine was focused on 3D games only, but in rg3d 0.23 the situation has changed a bit, a simple version of 2D scene was added. However, in this version, 2D scenes were completely deletedfrom the engine and 2D functionality was integrated in standard 3D scene. Now, to create 2D game you just need to change projection mode of your camera to orthographic and put some objects in standard 3D scene.Here is the very simple 2D scene made in the editor and imported in a simple 2D game:\n    All visual objects here are sprites (rectangles in engine terms), sprites using heavily optimized rendererso you can put thousands objects in the scene with very little performance impact. Since 2D is actually 3D,you can use standard 3D objects to create 2D games world with 3D objects in them, this is very flexibleapproach that allows you to mix various approaches to achieve desired results.\n Standard lighting system works with 2D objects as well as with 3D, however 2D objects cannot cast shadows,this will be improved in future releases:\n  The engine now has full-featured 2D physics, here is a simple example with three dynamic boxes and static ground:\n   The engine now has  guide book. It is still in early development stage, but should help you to start using the engine. It covers basic aspects of the engine, describes how various partsof the engine works, how they should be used. It also has four tutorials that will guide you through gamedevelopment process from start to finish.\n  Physics entities (rigid bodies, colliders, joints) were integrated in scene graph, this means that you can link such objects as other scene nodes. Look closely at the editor screenshot above, as you can see there is Rigid Body 2D node with  Rectangle and  Collider 2D nodes. Previously physics was standalone and scenenodes were linked with the hacky \u201cphysics binder\u201d.\n  One of the major improvements in this version is the new lightweight reflection and the Inspector widget madewith it. Reflection means the access to object\u2019s properties in runtime, rg3d does this via  Inspect traitwith proc-macro:\n  Proc-macro will generate property definitions for every field (unless it is marked with  #[inspect(skip)] attribute), which can be accessed at once using  .properties() method of  Inspect trait. Keep in mindthat since this is lightweight reflection, it does not let you mutate property value nor call methods and suchstuff, only read information about structure fields, enum variants, etc. This may sound too restrictive, buton practice it is not. This reflection was made specifically for the editor needs. The new  Inspector widgetutilizes its at full capacity:\n  Inspector widget shows you all available fields of an object, it supports nested structures, arrays, vectors,enumerations, custom property editors and many more. The editor uses it at 110% capacity :)\n  0.23 introduced custom material system which was quite unoptimized and had a bit disappointing performance. This release fixes that and improves performance by 2.5x times.\n The UI layout system was heavily optimized too, some performance optimizations gave 1000x (this is  not atypo) boost on complex visual trees. rg3d-ui now depends on invalidation, instead of checking everything everyframe. Now it is capable of handling up to 100000 widgets at once without any significant performance loss.This is especially important when you\u2019re editing large maps with thousands of objects on them.\n  rg3d slowly improving resource management, one of the major improvement in it is  import options files. Previouslyyou have to specify  how to load textures, models, sounds, etc. from code, now import options were moved to  .options files. Let\u2019s check a simple example: for example you want to change filtering from bilinear to blockyfor your 2D pixel game, you can make it like so (assuming you have  sprite.jpg file)\n  And save that to  sprite.jpg.options, the engine will read this file and configure the texture accordingly. Everyfield in options files is optional.\n The engine is now able to hot-reload textures, this is especially useful for making 2D games. The engine generatesmip-maps for textures using Lanczos filter, which gives you excellent results.\n  Sound engine (rg3d-sound) has improved samples interpolation for cases when sample rate != 1.0, previuosly itused simplest nearest interpolation, not it is linear which sounds much better and has must fewer harmonics.\n       The editor repository was merged into engine\u2019s repository, this means that you no longer need to download bothprojects to run the editor.\n  Three new scene nodes was added: RigidBody, Collider, Joint. Since rigid body, collider and joint are graph nodesnow, it is possible to have complex hierarchies built with them.\n  It is possible to attach rigid body to any node in scene graph, its position now will be correct in this case (previously it was possible to have rigid bodies attached only on root scene nodes).\n  New  Inspector widget + tons of built-in property editors (with the ability to add custom editors)\n        Linear interpolation for sound samples when sampling rate != 1.0 (much better quality than before)\n    Window client area is now correctly filled by the renderer on every OS, not just Windows.\n                                          Remove all associated widgets of a widget when deleting the widget (do not leave dangling objects)\n  Aside already mentioned Inspector, the editor now has an ability to search for scene items by their names:\n         If you like the project and want to see it alive, please consider doing either a monthly donation on  Patreon or do a one-time donation via BuyMeACoffee.\n      The engine is supported by very generous people, their donations provides sustainable development of the engine:", "posttime": "2022-01-09 22:03:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,rust,\u7eb9\u7406", "title": "RG3D Rust\u6e38\u620f\u5f15\u64ce\u65b0\u7248\u672cv0.24", "title_en": "RG3D rust game engine new release v0.24", "transed": 1, "url": "https://rg3d.rs/general/2022/01/07/0.24-feature-highlights.html", "via": "", "real_tags": ["\u6e38\u620f", "rust", "\u7eb9\u7406"]}, {"category": "", "categoryclass": "", "imagename": "3c5e69a44537d5beb253dc6a218823ec.png", "infoid": 1072467, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u901a\u5e38\uff0c\u6d4b\u8bd5\u6570\u636e\u5b8c\u5168\u66f4\u65b0\u524d2-3\u5929\u3002\u5728\u663e\u793a\u65e5\u5e38\u6d4b\u8bd5\u6570\u636e\u7684\u56fe\u8868\u4e0a\uff0c\u56e0\u6b64\u4e0d\u5305\u62ec\u8fc7\u53bb\u4e24\u5929\u3002\u5728\u589e\u5f3a\u548c\u6b7b\u4ea1\u7684\u56fe\u5f62\u4e0a\uff0c\u6700\u65b0\u4e00\u5929\u4e0d\u5305\u62ec\u5728\u5185\u3002\n\u8fd9\u4e9b\u5730\u5757\u663e\u793a\u4e86\u5404\u79cd\u6d41\u884c\u75c5\u6307\u6807\u7684\u8fdb\u5c55\u4ee5\u53ca\u6b7b\u4ea1\u603b\u6570\uff08\u57282020\u5e74\u79cb\u5b63\u79cb\u5b63\u548c2021\u5e74\u79cb\u5b63\u3002\n\u4e0b\u60c5\u8282\u663e\u793a\u51fa\u75ab\u82d7\u63a5\u79cd\u7684\u6027\u522b\u548c\u5e74\u9f84\u5206\u5e03\uff0c\u8fd9\u662f\u6027\u522b\u548c\u5e74\u9f84\u7ec4\u4eba\u6570\u7684\u767e\u5206\u6bd4\u3002\n\u8be5\u60c5\u8282\u663e\u793a\u4e86\u5404\u79cd\u6d41\u884c\u75c5\u6307\u6807\u4ee5\u53ca\u653f\u7b56\u4e3e\u63aa\u7684\u8fdb\u5c55\u3002\u4e3b\u7ebf\u663e\u793a\u6301\u7eed\u7684\u5e73\u5747\u6c34\u5e73\uff0c\u57fa\u4e8e1\u67081\u65e5\u81f3\u73b0\u5728\u76847\u5929\u7a97\u53e3\u3002\n\u9876\u5c42\u60c5\u8282\u663e\u793a\u6bcf\u65e5\u6536\u5165\u6570\u91cf\uff0c\u6b63\u9762\u6d4b\u8bd5\u7684\u767e\u5206\u6bd4\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u5730\u533a\u8fc7\u53bb\u4e09\u4e2a\u6708\u6b63\u9762\u6d4b\u8bd5\u7684\u53f7\u7801\u3002", "note_en": "Der g\u00e5r typisk 2-3 dage f\u00f8r testdata er helt opdateret. P\u00e5 de grafer der viser daglige testdata er de seneste to dage derfor ikke medtaget. P\u00e5 grafer over nyindlagte og d\u00f8de er den seneste dag ikke medtaget.\n Positivt testede angiver nye positive, alts\u00e5 personer der ikke har testet positiv f\u00f8r (undt. under gennembrudsinfektioner).\n    Plottene viser antal nyindlagte og antal d\u00f8de for hele landet. Den optrukne linje viser det l\u00f8bende gennemsnit baseret p\u00e5 et vindue p\u00e5 7 dage.\n    Plottet viser antallet af nye positivt testede personer for hele landet. Den optrukne linje viser det l\u00f8bende gennemsnit baseret p\u00e5 et vindue p\u00e5 7 dage.\n    Plottet viser hvor stor en procentdel af PCR testede der tester positive. Den optrukne linje viser det l\u00f8bende gennemsnit baseret p\u00e5 et vindue p\u00e5 7 dage. V\u00e6r opm\u00e6rksom p\u00e5 at positivprocenten er p\u00e5virket af hvem der testes, f.eks kan man antage at n\u00e5r man tester flere, tester man i h\u00f8jere grad personer med lavere sandsynlighed for at v\u00e6re smittede.\n    Plottet viser det totale antal testede personer for hele landet opdelt p\u00e5  antigen- og PCR tests. Der er ikke data for antigentests f\u00f8r 1. feb 2021.\n    Plottet viser antallet af nye positivt testede personer for hele landet siden 1. feb 2021. Derudover angives det hvor mange af disse personer, som er blevet testet med PCR-test p\u00e5 samme dag eller dagen efter antigentest, samt svaret p\u00e5 denne test.\n    Plottene viser forl\u00f8bene af forskellige epidemi-indikatorer samt total antal d\u00f8de (uanset \u00e5rsag) for efter\u00e5ret 2020 og efter\u00e5ret 2021.\n     Plottene sammenligner antal nyindlagte med hhv. antal positivt testede og procentdelen af positivt testede. Den optrukne linje viser det l\u00f8bende gennemsnit baseret p\u00e5 et vindue p\u00e5 7 dage.\n     Plottene sammenligner antal d\u00f8de med hhv. antal positivt testede og procentdelen af positivt testede. Den optrukne linje viser det l\u00f8bende gennemsnit baseret p\u00e5 et vindue p\u00e5 7 dage.\n       Plottene viser det ugentlige antal positive, testede og nyindlagte per 100.000 i aldersgruppen, og positivprocenten for hver aldersgruppe. Datoerne angiver mandagen i hver uge.\n       Plottet viser andelen af PCR positive der efterf\u00f8lgende indl\u00e6gges for hvert kvartal siden 1. juli 2020. Andelene er beregnet ved line\u00e6r regression mellem 1) antal positive i en enkelt uge og 2) gennemsnittet af antal indl\u00e6ggelser i samme uge eller de to f\u00f8lgende uger (det er den periode en positiv test kan give anledning til at en indl\u00e6ggelse registreres som en COVID-19 relateret indl\u00e6ggelse). Korrelationskoefficienterne under s\u00f8jlerne angiver hvor god sammenh\u00e6ngen mellem antal positive og antal indl\u00e6ggelser er.\n     Plottet viser det daglige antal d\u00f8de (alle \u00e5rsager) for hver aldersgruppe for 2020, 2021 indtil nu, og gennemsnittet for 2015-19. Antallet af d\u00f8de i \u00e5rene 2015-19 er justeret til befolkningstallet for 2020 indenfor hver aldersgruppe.\n          Det \u00f8verste plot viser det kumulerede antal vaccinerede som procentdel af antal personer i aldersgruppen. Antal personer som har opn\u00e5et fuld effekt efter tredje dose (fuld effekt definerer SSI til 14 dage efter enten anden eller tredje dose) er beregnede ugentlige v\u00e6rdier p\u00e5 baggrund af et separat datas\u00e6t og er derfor beh\u00e6ftet med noget usikkerhed.\n Det nederste plot viser k\u00f8ns-og aldersfordeling for vaccinerede indtil nu som procentdel af antal personer i k\u00f8n- og aldersgruppen.\n       Plottet viser det ugentlige antal positive per 100.000 (i alders- og immunitetsgruppen) og i absolutte tal. Data for modtagere af \u00e9n dosis (f\u00f8rste vaccination) er udeladt.\n Tidligere positive angiver ikke-vaccinerede personer med en tidligere positiv PCR test der er mere end 60 dage gammel.  Ingen vaccination,  fuld effekt 2 doser, og  fuld effekt 3 doser angiver personer der ikke tidligere har testet positiv. \u201cFuld effekt\u201d definerer SSI som 14 dage efter modtaget dose. Personer der er vaccineret  og tidligere testet positive er ikke medtaget. For aldersgrupper 60+ er tidligere positive ikke medtaget, da antal nye positive (repositive) i disse grupper er meget sm\u00e5. Det samme g\u00f8r sig g\u00e6ldende for modtagere af 3. dosis i aldersgrupper under 20 \u00e5r.\n      Det \u00f8verste plot viser antal PCR testede per 100.000 (i alders- og immunitetsgruppen). Det nederste plot viser det testjusterede antal positive per 100.000 (i alders- og immunitetsgruppen) hvor  beta er sat til 0.5, hvilket er et kvalificeret g\u00e6t. I mods\u00e6tning til positivprocenten antager denne type testjustering, at der ikke er et 1:1 forhold mellem antal positive og antal testede: N\u00e5r man tester flere, antages det at man i h\u00f8jere grad tester personer med lavere sandsynlighed for at v\u00e6re smittede. Metoden er  beskrevet her. Datoerne angiver mandagen i hver uge.\n     Plottene viser det ugentlige antal indl\u00e6ggelser og d\u00f8de per 100.000 (i alders- og vaccinationsgruppen) og i absolutte tal. Grupperne er ikke opdelt p\u00e5 baggrund af tidligere smittestatus. Data for modtagere af \u00e9n dosis (f\u00f8rste vaccination) er udeladt. \u201cFuld effekt\u201d definerer SSI som 14 dage efter modtaget dose. Datoerne angiver mandagen i hver uge.\n       Plottene viser en oversigt over forekomsten af varianterne Alfa, Delta, og Omikron samt tidligere varianter (\u201cAndre\u201d) siden 1. november 2020. Det \u00f8verste plot viser absolutte antal positivt testede, og det nederste viser varianternes andel af alle positivt testede. Datoerne angiver mandagen i hver uge.\n     Plottet viser det daglige antal positive opdelt p\u00e5 de to nuv\u00e6rende varianter, Delta og Omikron.\n      Plottet viser forl\u00f8bene af de forskellige epidemi-indikatorer samt tidspunkterne for politiske tiltag. De optrukne linjer viser de l\u00f8bende gennemsnit baseret p\u00e5 et vindue p\u00e5 7 dage fra 1. januar til nu.\n        Plottet viser det daglige antal nye positivt testede og antal total testede for de seneste tre m\u00e5neder for de 30 kommuner der har haft flest positivt testede den seneste m\u00e5ned.\n Bem\u00e6rk at antal positive afl\u00e6ses p\u00e5 h\u00f8jre akse mens antal testede afl\u00e6ses p\u00e5 venstre akse.\n       Plottet viser den daglige procentdel af positivt testede (inkl. 7-dages gennemsnit) for de seneste tre m\u00e5neder for de 30 kommuner der har haft flest positivt testede indenfor den seneste m\u00e5ned.\n       Plottene viser det daglige antal nye positivt testede, antal total testede og procentdel af positivt testede (inkl. 7-dages gennemsnit) for de seneste tre m\u00e5neder for hver landsdel.\n Bem\u00e6rk at antal positive afl\u00e6ses p\u00e5 h\u00f8jre akse mens antal testede afl\u00e6ses p\u00e5 venstre akse.\n      Plottene viser det daglige antal nye positivt testede, antal total testede og procentdel af positivt testede (inkl. 7-dages gennemsnit).\n     \u00d8verste plot viser det daglige antal nyindl\u00e6ggelser, procent positivt testede, og antal positivt testede for de seneste tre m\u00e5neder for hver region.\n Nederste plot viser det daglige antal nyindl\u00e6ggelser og antal positivt testede per 100.000 indbyggere for de seneste tre m\u00e5neder for hver region.\n       \u00d8verste plot viser det totale antal daglige d\u00f8dsfald siden 1. jan 2020, det daglige antal Covid-19 relaterede d\u00f8dsfald, og det gennemsnitlige antal daglige d\u00f8dsfald for perioden 2015-19 (udglattet 7-dages gennemsnit).\n Nederste plot viser det daglige antal d\u00f8dsfald i 2020 siden 1. jan 2020, opdelt p\u00e5 Covid-19- og ikke-Covid-19 relaterede d\u00f8dsfald. Desuden vises det gennemsnitlige antal ugentlige d\u00f8dsfald for perioden 2015-19 (udglattet 7-dages gennemsnit).\n       det gennemsnitlige daglige antal akutindl\u00e6ggelser for hver uge i l\u00f8bet af et \u00e5r for perioden 2008-18. Data for 2008-17 er justeret til befolkningstallet for 2018.\n Data for 2008-18 stammer fra Danmarks Statistik (Susanne Brondbjerg via Ulrik Gerdes) og omfatter ikke indl\u00e6ggelser p\u00e5 privathospitaler eller p\u00e5 psykiatriske afdelinger.\n Det skal bem\u00e6rkes at \u00e9n person kan st\u00e5 for flere indl\u00e6ggelser, og at der er omkring dobbelt s\u00e5 mange  indl\u00e6ggelser som  indlagte personer i l\u00f8bet af et \u00e5r (akut + ikke-akut).", "posttime": "2022-01-09 22:02:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,development,\u663e\u793a", "title": "Covid-19\u611f\u67d3\u5f00\u53d1\u7684\u56fe\u8868\u5728\u4e39\u9ea6\uff08\u4e39\u9ea6\u8bed\uff09", "title_en": "Graphs of Covid-19 infection development in Denmark (Danish)", "transed": 1, "url": "https://covid19danmark.dk/", "via": "", "real_tags": ["\u5f00\u53d1", "\u663e\u793a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072466, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4f4d\u670b\u53cb\u6700\u8fd1\u4e86\u89e3\u4e86Proebsting\u7684\u6cd5\u5f8b\uff0c\u5e76\u544a\u8bc9\u6211\u6389\u624b\u3002\u5982\u679c\u60a8\u4e0d\u77e5\u9053\uff0cProebsting\u7684\u6cd5\u5f8b\u89c4\u5b9a\uff1a\n\u4e3a\u4e86\u4f7f\u8fd9\u4e2a\u5b9e\u9a8c\u6709\u70b9\u6bd4\u8f83\u6709\u8da3\uff0c\u6211\u8981\u6d4b\u8bd5LLVM 1.0  - \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u53ea\u670932\u4f4dLinux\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u56e0\u4e3a\u7f3a\u5c1132\u4f4d\u7cfb\u7edf\u6807\u9898\uff0c\u6211\u65e0\u6cd5\u5b8c\u5168\u5de5\u4f5c\uff0c\u800c\u4e14\u5b83\u5728\u7f16\u8bd1\u4e00\u4e2a\u6e90\u6587\u4ef6\u4e4b\u4e00\u65f6seguauted\u3002\u6240\u4ee5\u6211\u4eec\u5c06\u6d4b\u8bd5\u4e24\u4e2a\u7248\u672c\u7684LLVM\uff1a\n\u6211\u4eec\u5c06\u5206\u522b\u7f16\u8bd1\u6f14\u793a\u7a0b\u5e8f\u7684\u539f\u56e0\u662fDemo\u7a0b\u5e8f\u4f7f\u7528STL\uff0c\u6211\u4e0d\u60f3\u627e\u5230\u4e0e\u8fd9\u4e9b\u65e7\u7f16\u8bd1\u5668\u517c\u5bb9\u7684STL\u7248\u672c\u3002\n\u4e3a\u4e86\u83b7\u5f97\u57fa\u672c\u7684\u7406\u89e3\uff0c\u8ba9\u6211\u4eec\u9009\u62e9\u4e09\u4e2a\u7b97\u6cd5 - \u9876\u70b9\u9ad8\u901f\u7f13\u5b58\u4f18\u5316\uff0c\u7b80\u5316\u548c\u7d22\u5f15\u89e3\u538b\u7f29\u3002\u6211\u4eec\u5c06\u5728\u4ee5\u540e\u770b\u8d77\u6765\u66f4\u63a5\u8fd1\u5176\u4ed6\u7b97\u6cd5\u7684\u6027\u80fd\uff0c\u4f46\u662f\u5728\u5c0f\u7ec4\u4e0a\u83b7\u5f97\u7248\u672c\u4e4b\u95f4\u7684\u5dee\u5f02\u4f1a\u5f88\u597d\u3002\n\u6211\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u679c\u4f7f\u7528-o3\u91cd\u65b0\u5212\u5206\u7684\u5f02\u5e38\u503c\uff0c\u8fd9\u4f7f\u5f97\u5dee\u8ddd\u7a0d\u5fae\u5bbd\uff0c\u4f46\u4ecd\u7136\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff1a\nLLVM 11\u503e\u5411\u4e8e\u4f7f\u7528\u4f18\u5316\u7f16\u8bd1\u4ee3\u7801\u76842\u500d\uff0c\u7ed3\u679c\u4ea7\u751f10-20\uff05\u7684\u4ee3\u7801\uff08\u5728\u4efb\u4e00\u65b9\u5411\u7684\u5076\u5c14\u7684\u5f02\u5e38\u503c\uff09\uff0c\u4e0eLLVM 2.7\u8d85\u8fc710\u5c81\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u822c\u89c4\u5219\uff0c\u7279\u5b9a\u4e8e\u9ad8\u5ea6\u8c03\u6574\u7684\u4ee3\u7801\uff0c\u6216\u7279\u5b9a\u4e8e\u7f51\u773cOptizizer\u7b97\u6cd5\u7684\u4e1c\u897f\u3002", "note_en": "A friend recently learned about Proebsting\u2019s law and mentioned it to me off hand. If you aren\u2019t aware, Proebsting\u2019s law states:\n  Which is to say, if you upgrade your compiler every 18 years, you would expect on average your code to double in performance on the same hardware.This is in sharp contrast to Moore\u2019s law, and suggests that we should be cautious about the performance gains that compiler evolution brings. Proebsting  writes:\n Perhaps this means Programming Language Research should be concentrating on something other than optimizations. Perhaps programmer productivity is a more fruitful arena.\n I knew about the law\u2019s existence but I never really asked myself - do I believe in it?\n Note: this article was published as a Gist in January 2021, but I decided to repost it in the blog form with minor edits.\n  It occurred to me that I could try to do an experiment.I could take a modern compiler and compare performance of generated code - along with perhaps a few other metrics - vs a 20-year-old one.\n At least this was my initial intention; however I\u2019ve long wanted to do  another experiment which is to figure out how LLVM has changed over the years.To combine these two I wanted to get an old version of LLVM and test it against a modern version.\n To make this experiment a bit more interesting, I was going to test LLVM 1.0 - unfortunately, it only comes with 32-bit Linux binaries that I wasn\u2019t able to get to work fully due to lack of 32-bit system headers, and it segfaulted when compiling one of the source files. So we\u2019re going to test two versions of LLVM:\n LLVM 2.7. This is the first release of LLVM that contains a version of Clang that can compile C++ code.\n  LLVM 11. This is the latest stable release of LLVM that I happen to have available.\n LLVM 2.7 was released in April 2010, which was 11 years ago (10.5 years before the release of LLVM 11 in August 2020). So we wouldn\u2019t quite expect a 2x speedup according to Proebsting\u2019s law - only a 1.5x one.\n We\u2019re going to compare these compilers on compile time and run time axis as follows:\n Using an amalgamated version of  meshoptimizer library, we\u2019re going to build  libmeshoptimizer.o several times for each compiler, with and without optimizations (-O0 through -O3), and note the build time.\n  Using the resulting optimized .o file we\u2019re going to compile the meshoptimized demo program using modern clang, run it on a Stanford dragon mesh and compare timings for various algorithms.\n The reason why we\u2019re going to compile the demo program separately is that demo program uses STL and I don\u2019t want to find versions of STL that are compatible with these older compilers.\n Note: I\u2019m aware that this is not a rigorous or a scientific way to analyze the law; the law itself is also a bit tongue in cheek so who cares? Don\u2019t read too much into the results.\n   I\u2019ve downloaded a binary release of LLVM 2.7 from  releases.llvm.org; LLVM 11 comes with Ubuntu 20. I\u2019m running everything using WSL2 on a Linux partition to make sure the performance numbers are representative of real hardware.\n Each compiler is used to build all meshoptimizer source (8.5 KLOC) as a single translation unit to simplify the build process, in four configurations:  -O0,  -Os -DNDEBUG,  -O2 -DNDEBUG and  -O3 -DNDEBUG.\n     Based on this analysis we can observe that the debug compilation throughput was not impacted very significantly - over 10 years of development time clang+llvm got 15% slower in debug builds, which is not surprising and not particularly alarming. Release mode, however, is noticeably slower - 2.2x slower in O2/O3.\n In terms of output size, the numbers look healthy - O2/O3 builds got ~25-30% larger but that by itself isn\u2019t a problem as long as we see matching performance increases - in  Os, where size is important, the binary got 8% smaller.\n  The problem when comparing runtime is that it\u2019s not clear what specific build we need to compare, and what code we need to benchmark.meshoptimizer comes with lots of algorithms that have various performance characteristics. It would be interesting to analyze all of them, but since this article doesn\u2019t promise to be scientific, we\u2019re going to pick a few algorithms and measure them in all build configurations, and then select one configuration to dig into Proebsting\u2019s law further.\n To get a basic understanding, let\u2019s pick just three algorithms - vertex cache optimization, simplification and index decompression. We\u2019re going to look closer into performance of other algorithms later, but it would be good to get a sense of the differences between the versions on a small set.\n       The picture that is beginning to emerge here seems rather grim. We see speedups in the 10-15% range in optimized builds, with an exception of index decompress in Os that seems more like an outlier, where likely  -Os inlining heuristics in LLVM 11 result in the same code across different optimization levels; we also see speedups in the 5% range in unoptimized builds.\n Now, it\u2019s important that in addition to the disclaimer about the comparison not being particularly scientific the reader also understands one extra detail - all algorithms in meshoptimizer are carefully optimized. This isn\u2019t a run-of-the-mill C++ code - this is the code that was studied under various profilers and tweaked until, while it remained reasonably concise, the performance was deemed worthy.\n It is possible in theory that code that\u2019s less carefully optimized exhibits different behavior, or that the benchmarks chosen here are simply not as amenable to compiler optimization as they could be - the lack of prominent difference between different optimization levels is also noteworthy (although O3 in particular has been stufied before in academic research and the value of that mode was inconclusive).\n To try to get a more complete picture, let\u2019s now look at more algorithms and compare them in O2 build only.\n  We\u2019re going to first take a look at a more complete set of algorithms from meshoptimizer library; this isn\u2019t every single algorithm in existence as some of the algorithms have performance characteristics that aren\u2019t very distinct compared to other algorithms already presented here. This also excludes vertex decompression which is going to be mentioned separately.\n  Overall the picture here is not very different from what we\u2019ve already established - LLVM 11 seems to produce code that\u2019s 10-15% faster on most benchmarks. There are a couple outliers where the performance gain is more substantial, up to 25%, and a couple benchmarks where LLVM 11 actually generates consistently  slower code, up to 5% - this is not a measurement error.\n I\u2019ve reran the outliers using -O3 with the following results, that made the gap a bit less wide but still substantial:\n  These gains are certainly welcome, although it is unfortunate that they seem to come at the cost of 2x slower compilation. This takes me back to \u201cThe death of optimizing compilers\u201d by Daniel J. Bernstein - I wonder if there\u2019s a happier middle ground that can be found, one where the compiler gives more control over optimization decisions to the developer and allows tuning the code to reach gains that can be seen here at a lower complexity and compilation performance cost.\n  All of the algorithms presented before were scalar, implemented using portable C++. While portions of some of these can be vectorized in theory, in practice clang 11 even at -O3 struggles with generating efficient SIMD code for most/all of them.\n meshoptimizer does have several algorithms that have first-class SIMD versions, implemented using SSE/NEON/Wasm intrinsics. Their performance was compared using  codecbench, a utility that comes with meshoptimizer and outputs performance in GB/sec - so the numbers in the following tables are reversed, larger is better.\n  All of the filters are typical SIMD streaming kernels - there\u2019s no branches or complex data dependencies. Perhaps unsurprisingly, the delta in performance of the compiled code is thus not very significant. The vertex decode is substantially more complicated - it contains function calls, branches, mix of scalar and vector instructions and in general can be more challenging for the optimizer.\n It\u2019s worth noting that on this particular example, using  -O3 with LLVM 2.7 brings the performance up from 2.3 GB/s to 2.7 GB/s, while having no effect on LLVM 11 - bringing the delta between LLVM 11 and LLVM 2.7 back to ~10% range.\n It\u2019s undoubtedly possible to find examples of loops that LLVM 2.7 couldn\u2019t vectorize (by virtue of not having an autovectorizer) and LLVM 11 can - unfortunately, my experience even on streamlined kernels like the aforementioned filters force me to maintain a deep distrust towards the auto-vectorizer (out of the 4 filter kernels above, clang 11 can not vectorize even a single one, and gcc 10 can only vectorize \u2018exp\u2019 - one out of 4). I would claim that any gains due to auto-vectorization can\u2019t be counted as significant until programmers are given better tools to make these optimizations more predictable and reliable.\n   LLVM 11 tends to take 2x longer to compile code with optimizations, and as a result produces code that runs 10-20% faster (with occasional outliers in either direction), compared to LLVM 2.7 which is more than 10 years old. This may be a general rule, something specific to highly tuned code, or something specific to meshoptimizer algorithms.\n Without spending more than an evening it\u2019s hard to disambiguate the reasons. And this post definitely doesn\u2019t pretend to be a thorough research - it\u2019s just a fun little study of how competitive clang 2.7 looks like in 2021. Without a doubt, the amazing community behind LLVM didn\u2019t spend the last decade for naught - but if you still believe in the sufficiently smart optimizing compiler, it may be time to reconsider the extent to which you can rely on the compiler to make your code faster year after year, as if anything Proebsting\u2019s law should probably be reformulated as:\n  It\u2019s important to recognize that there are many forces that together define the rate at which software performance changes - between hardware getting faster (yes, even in the last 10 years, despite what articles like \u201cFree Lunch Is Over\u201d would make you believe), compilers getting better, software development practices frequently getting out of hand and a large discrepancy between the expertise of the software developers wrt optimization, compiler advances are just one, rather small, piece of the puzzle. Perhaps Daniel Bernstein was right after all.", "posttime": "2022-01-09 22:02:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "proebsting,\u7b97\u6cd5", "title": "\u5173\u4e8eProebsting\u7684\u6cd5\u5f8b", "title_en": "On Proebsting's Law", "transed": 1, "url": "https://zeux.io/2022/01/08/on-proebstings-law/", "via": "", "real_tags": ["\u7b97\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "581d4597dfc3be9e025e41a33fe73912.jpg", "infoid": 1072465, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u7c7b\u6574\u4f53\u542e\u5438\u903b\u8f91\u3002\u6211\u4eec\u6709\u903b\u8f91\u7684\u80fd\u529b\uff0c\u4f46\u5b83\u53ea\u662f\u6211\u4eec\u5927\u8111\u4e2d\u8fd0\u884c\u7684\u8bb8\u591a\u7b97\u6cd5\u4e4b\u4e00\uff0c\u5e76\u4e14\u5e38\u5e38\u5728\u566a\u97f3\u4e2d\u4e22\u5931\u3002\u6b64\u5916\uff0c\u6211\u4eec\u6709\u8bb8\u591a\u76f4\u89c9\uff0c\u504f\u89c1\u548c\u8ba4\u77e5\u7f3a\u9677\uff0c\u4ee5\u964d\u4f4e\u6211\u4eec\u903b\u8f91\u4e0a\u601d\u8003\u7684\u80fd\u529b\u3002\u7136\u800c\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u4e5f\u6709\u80fd\u529b\uff0c\u80fd\u591f\u8003\u8651\u81ea\u5df1\u7684\u601d\u7ef4\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u903b\u8f91\u4ee5\u53ca\u5982\u4f55\u66f4\u6e05\u695a\u5730\u601d\u8003\uff0c\u8fc7\u6ee4\u504f\u5dee\u548c\u7f3a\u9677\u3002\u4e0d\u53ef\u80fd\u5b8c\u7f8e\u5730\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6240\u4ee5\u6700\u597d\u5c06\u5143\u62cd\u89c6\u4e3a\u6e10\u8fdb\u5f0f\u81ea\u6211\u6539\u5584\u7684\u7ec8\u8eab\u9879\u76ee\u3002\u6b64\u5916\uff0c\u6211\u4eec\u7684\u504f\u89c1\u53ef\u80fd\u662f\u5982\u6b64\u5f3a\u5927\uff0c\u5f53\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u8003\u8651\u601d\u8003\u65f6\uff0c\u6211\u4eec\u5f80\u5f80\u53ea\u662f\u8ba9\u6211\u4eec\u7684\u903b\u8f91\u8c2c\u8bef\u8d8a\u6765\u8d8a\u5fae\u5999\uff0c\u800c\u4e0d\u662f\u5b8c\u5168\u6d88\u9664\u5b83\u4eec\u3002\n\u201c\u6211\u77e5\u9053\u8f6e\u76d8\u8d4c\u8f66\u8f6e\u7684\u4e8b\u5b9e\u8fde\u7eed10\u6b21\u65cb\u8f6c10\u6b21\uff0c\u544a\u8bc9\u6211\u65cb\u8f6c\uff0311\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u50cf\u7ea2\u8272\u65cb\u8f6c\u4e00\u6837\u591a\u7684\u9ed1\u8272\u65cb\u8f6c\uff0c\u6240\u4ee5\u81f3\u5c11\u76f4\u89c2\u5730\uff0c\u9ed1\u8272\u65cb\u8f6c\u4f3c\u4e4e\u81f3\u5c11\u6709\u4e00\u70b9\u66f4\u5bb9\u6613\u63d0\u51fa\u4e0b\u4e00\u4e2a\uff0c\u4ee5\u4fbf\u5c06\u8be5\u6bd4\u4f8b\u63a8\u56de50/50\u3002\u8fd9\u4e24\u4e2a\u539f\u5219\u5b9e\u9645\u4e0a\u662f\u5f7c\u6b64\u7d27\u5f20\u5417\uff1f\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u660e\u663e\u7684\u7d27\u5f20\u5c40\u52bf\uff1f\u5982\u679c\u662f\u7684\u8bdd\uff0c\u4e0d\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u8d4c\u5f92\u7684\u201c\u8c2c\u8bef\u201d\u6709\u6548\u671f\u662f\u5426\u6709\u201c\u4e00\u4e9b\u201d\u6709\u6548\u6027\uff1f\u201c", "note_en": "Humans overall suck at logic. We have the capacity for logic, but it is only one of many algorithms running in our brains, and often gets lost in the noise. Further, we have many intuitions, biases, and cognitive flaws that degrade our ability to think logically. Fortunately, however, we also have the ability for metacognition, the ability to think about our own thinking. We can therefore learn logic and how to think more clearly, filtering out the biases and flaws. It is impossible to do this perfectly, so it is best to think of metacognition as a life-long project of incremental self-improvement. Further, our biases can be so powerful, that when we learn how to think about thinking we often just make our logical fallacies more and more subtle, rather than eliminating them entirely.\n Some cognitive flaws are evolutionarily baked into our thinking, likely resulting from heuristics that are practical mental shortcuts but not strictly logically valid. There also appears to be some cognitive abilities that were not prioritized in our evolutionary history, and so our finite brain resources were simply not allocated to them. This is where most math and statistically related fallacies derive. We do not deal well with large numbers, and we have terrible intuitions regarding statistics and probability. We have developed elaborate formal systems for dealing with math and probability, essentially to replace or at least augment our intuitive thinking, and often these systems produce results that are counterintuitive.\n Perhaps the most famous example of counter-intuitive statistics is  the Monty Hall problem. You are given a choice of three doors, behind one is a prize. You can choose one door. The host of this game, who knows where the prize is, then opens one door without a prize (again \u2013 they know where the prize is and deliberately choose one of the unchosen doors without a prize), and then ask if you want to change your choice to the other unopened door. If you change your choice your odds of winning go up from 1/3 to 2/3. If you have not encountered this problem before, this may seem counterintuitive, but it is absolutely correct.\n Another common statistical fallacy is the gambler\u2019s fallacy. This fallacy derives from an incorrect intuitive feeling that past results somehow magically affect future results, in a system in which each event is supposed to be independent. It\u2019s called the gambler\u2019s fallacy because games of chance are a perfect set up for this error in thinking. Let\u2019s consider a roulette table, where you spin the table and bet on where the tiny ball will land. You can bet on a number, or a group, or on red or black (half the numbers are red, half are black, except for the zeros where the house wins all). Let\u2019s say that a red number has come up the last 10 spins, how does this affect the probability of the next spin coming up red or black? If the game is fair, then the answer is \u2013 not at all. Each spin is supposed to be a completely independent random event, like flipping a fair coin. The table is not on a red streak, nor is black \u201cdue\u201d because it has not come up in a while.\n Yet the illusion of streaks or certain outcomes being \u201cdue\u201d is powerful, and such thinking is almost ubiquitous among gamblers. It derives from our tendency toward pattern recognition (apophenia), seeing illusory patterns in random noise. As Carl Sagan said, randomness is clumpy. This is another statistical bias \u2013 our intuitive sense of what random looks like is flawed. A random pattern, like stars in the sky, is more uneven and \u201cclumpy\u201d than our intuition. If asked to draw a random pattern, most people will create a pattern that is decidedly not random. The patterns will tend to be too uniform and evenly distributed, for example. So when we see apparent streaks, we don\u2019t see randomness, we see a pattern, and use that to predict future outcomes.\n Seeing patterns is useful, when they are real, and so it makes sense that our brains would evolve this capacity. But our brains also have the capacity to determine which patterns are real and which are not, but the balance here does not tend to be optimal. We tend to massively overcall patterns as being real. This may result from evolutionary pressures \u2013 the negative consequences of undercalling patterns is likely greater than overcalling them. Also, seeing alleged patterns gives us the feeling of control, and we like that feeling. So we think we can use our amazing powers of pattern recognition to determine that black is \u201cdue\u201d and use that power to win big. Casinos love this delusion, because they know that math wins out in the end.\n Recently I was asked about the gambler\u2019s fallacy and its relationship to the regression to the mean. I thought this was a good example of subtle statistical logical fallacies can be. They wrote:\n \u201cI know that the fact that the roulette wheel has come up red 10 times in a row tells me NOTHING about spin #11. On the other hand, I know that over time, there will be just as many black spins as red spins, so at least intuitively, a black spin seems at least a little more likely to come up next in order to push that ratio back towards 50/50. Are these two principles actually in tension with each other? If not, how do we resolve the apparent tension? If yes, isn\u2019t it the case that there must be \u201csome\u201d validity to the gambler\u2019s \u2018fallacy\u2019?\u201d\n That\u2019s a great question, and the answer is a definite no \u2013 they are not in conflict. Again, the pressure to think that the past influences future independent events is powerful. Regression to the mean is not a power in the universe that ensures that statistics work out in the end, it is purely a probability. Unlikely events are unlikely, whereas likely events are likely. When an unlikely event happens, is it more likely to be followed by another unlikely event or a likely event? Obviously, a likely event, because likely events are always more likely to happen than unlikely events. This may seem obvious when I state it in such general terms, but we don\u2019t always back away from the details to see the situation as raw probability. Regression to the mean simply means that an outlier (unlikely) event is likely to be followed by a more probable average event (because they are inherently more likely). That\u2019s it.\n So when a professional athlete has the best year or game of their career, they are very likely to have a more average year or game next time. This doesn\u2019t mean anything, they are not \u201cchoking\u201d or cursed or whatever. They are just experiencing probability. When your variable disease is expressing its worst symptoms, you are likely to feel better in the future, because outlier symptoms are likely to be followed by more average symptoms. This is regression to the mean.\n The apparent tension of regression to the mean following a run of red numbers is just another gambler\u2019s fallacy illusion. This is produced partly by starting your counting after a statistical fluke, and thinking that, starting from that selected point, black and red need to balance out over time. But they don\u2019t, because you are including data that you already know and is biased in one direction. This fallacy can creep easily into research, which is why as a general rule a study should not include prior data. This is another really subtle statistical bias that creeps into our thinking \u2013 failure to consider that the method of our observation may be non-random. This is a major source of confirmation bias.\n I can keep going down this rabbit hole of cognitive biases, because there is a lot of interaction among them. But I hope the point is made. For some of you, you may still be stuck on the Monty Hall problem above. The important lesson to be taken away from all this is that we inherently suck as logic and probability, but we can remedy our deficits by thinking carefully and engaging with others who are also thinking carefully. Humans also have a powerful tool \u2013 we can write things down. We can accumulate knowledge across centuries, and engage in collective cumulative metacognition. We should avail ourselves of this incredible power.", "posttime": "2022-01-09 22:00:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c2c\u8bba,fallacy,\u903b\u8f91", "title": "\u8d4c\u5f92\u7684\u8c2c\u8bba\u548c\u5bf9\u5e73\u5747\u503c\u7684\u56de\u5f52", "title_en": "Gambler\u2019s Fallacy and the Regression to the Mean", "transed": 1, "url": "https://theness.com/neurologicablog/index.php/gamblers-fallacy-and-the-regression-to-the-mean/", "via": "", "real_tags": ["\u8c2c\u8bba", "fallacy", "\u903b\u8f91"]}, {"category": "", "categoryclass": "", "imagename": "bd7b9ac70ba9826f960607e553a45214.jpg", "infoid": 1072464, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u900f\u660e\u5ea6\u603b\uff1a\u5bf9\u4e8e\u632a\u5a01\u4eba\u6765\u8bf4\uff0c\u5b83\u81ea\u7136\u662f\u547c\u5438\u3002\u5982\u6b64\u591a\u7684\u662f\uff0c\u6bcf\u200b\u200b\u5e7410\u6708\uff0c\u632a\u5a01\u516c\u6c11\u7684\u5e74\u5ea6\u7eb3\u7a0e\u7533\u62a5\u8868\u5728\u632a\u5a01\u7a0e\u52a1\u7ba1\u7406\u5c40\u7684\u5b98\u65b9\u7f51\u7ad9\u4e0a\u53d1\u5e03\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u770b\u770b\u3002\u8fd9\u79cd\u516c\u5f00\u5206\u4eab\u6bcf\u4e2a\u4eba\u7684\u76c8\u5229\u7684\u4f20\u7edf\u5e76\u4e0d\u662f\u65b0\u7684\uff0c\u4f46\u5b83\u975e\u5e38\u8bb2\u8ff0\u4e86\u632a\u5a01\u4eba\u5e0c\u671b\u62e5\u6709\u7684\u793e\u4f1a\u548c\u7a0e\u5236\u3002\n\u5982\u679c\u4ed6\u4eec\u751a\u81f3\u5982\u6b64\u503e\u5411\uff0c\u90a3\u4e48\u632a\u5a01\u7a0e\u6536\u7684\u900f\u660e\u5ea6\u4f7f\u5f97\u4eba\u4eec\u96be\u4ee5\u8003\u8651\u9003\u7a0e\u3002\u5e76\u4e14\u5b83\u7edd\u5bf9\u53ef\u4ee5\u5728\u5ba3\u5e03\u5229\u6da6\u4ee5\u53ca\u6d89\u53ca\u63d0\u4f9b\u7ade\u4e89\u529b\u7684\u5de5\u8d44\u65b9\u9762\u8fdb\u884c\u68c0\u67e5\u3002\u5f53\u6bcf\u4e2a\u4eba\u90fd\u80fd\u770b\u5230\u5176\u4ed6\u4eba\u90fd\u5728\u5236\u4f5c\uff0c\u5173\u4e8e\u52a0\u5267\u7684\u5bf9\u8bdd\u7a81\u7136\u53d8\u5f97\u66f4\u5bb9\u6613\u6216\u4e0d\u5fc5\u8981\u3002", "note_en": "Total transparency: for Norwegians, it comes as naturally as breathing. So much so that, every year in October, the annual tax returns of Norwegian citizens are posted online on the Norwegian Tax Administration\u2019s official  website, and anyone can go and have a look. This tradition of publicly sharing everyone\u2019s earnings is not new, but it is very telling about the kind of society, and tax system, that Norwegians wish to have.\n  Personal income tax was first introduced in Norway back in 1882, and it was a public affair from the very beginning. This was almost a century before  oil was found in the North Sea, and back then, Norway was a relatively poor country, whose people were mostly farmers with a long history of fighting back on taxation, and whose municipalities were self-governed. Everyone was expected to give as much as they were able to keep the poor relief fund and the school fund running; if everything was out in the open, no one could complain. Back then, citizens would go to the City Hall or the local tax office to consult the tax lists, and in this way people could make sure that everyone was contributing fairly.\n  Religion also played a key part in this: Norway, as well as the rest of Scandinavia, has been a Lutheran country since the early 1500s, when the Protestant Reformation took place in Europe. Core Protestant values such as frugality, humility and hard work have been imbued into Scandinavians for centuries \u2013 paying one\u2019s taxes and contributing to the communal pot so that the state can help others was all part of being a good Christian.\n  Janteloven (the Law of Jante), a set of unspoken rules followed by most people in the Nordic countries (and first documented in 1933 by author  Aksel Sandemose), further enhances that Protestant mindset.  Janteloven warns against the perceived evils of individualism; Scandinavians are taught that they should not think they\u2019re special, or believe that they\u2019re better than their fellow Scandinavians. Privacy, in this context, is less coveted than it might be in a more individualistic and opportunistic society: when it comes to financial issues, one does not need privacy if one has nothing to hide.\n  Janteloven has played an integral part in Norway\u2019s and Sweden\u2019s policy of publishing everyone\u2019s salaries, and this helps to ensure that everyone gets the same amount of money for the same kind of work (in Sweden in particular, this policy has contributed significantly towards eliminating the  gender pay disparity). But it has also turned taxation into a way in which people can show that they trust the state. Norway uses a bracket tax rate that ensures the tax burden is distributed fairly depending on income, and the tax is deducted directly from your salary each month. This allows the state to use the tax money to keep funding its extensive public sector, from healthcare and education to transport and communications. Everyone can see that the system works, as everyone benefits from the social provisions of the state, so everyone is (mostly) eager to keep paying taxes.\n  Today, in a world where presidents and prime ministers of some countries famously refuse to disclose their tax returns, Norway\u2019s policy of publishing everything online can come as a shock to non-Scandinavians. In Sweden and Finland, people can find out about anyone else\u2019s tax returns just by making a phone call, but Norway is the only country where you can just look up that information on a government website. Some worry that this practice could lead to people snooping around to find out what their neighbours are earning, or how much tax their boss is paying. They\u2019re not entirely wrong to worry: in both Sweden and Norway, there has been a wave of what tabloids call \u2018tax porn\u2019, meaning people visiting the website for no other reason than to spy on what other people earn.\n  Thankfully, there are countermeasures in place to ensure that people are not abusing this service. Ever since 2014, you need to log in to access the information, and when you check the tax returns of a specific individual, your search is catalogued; when the person you searched for logs into the system, they can see right away that you searched for them. In addition, you can view a maximum of 500 records a month, although this restriction doesn\u2019t apply to journalists.\n  This transparency around tax in Norway makes it hard for people to consider tax evasion, if they were even so inclined. And it definitely keeps most companies in check, both in terms of declaring profits and when it comes to offering competitive salaries. When everyone can see how much everyone else is making, a conversation about a raise suddenly becomes that much easier \u2013 or unnecessary.", "posttime": "2022-01-09 22:00:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7533\u62a5\u8868,country,\u632a\u5a01", "title": "\u632a\u5a01\u662f\u552f\u4e00\u6709\u516c\u5171\u7eb3\u7a0e\u7533\u62a5\u8868\u7684\u56fd\u5bb6\uff082018\u5e74\uff09", "title_en": "Norway Is the Only Country with Public Tax Returns (2018)", "transed": 1, "url": "https://theculturetrip.com/europe/norway/articles/norway-country-public-tax-returns/", "via": "", "real_tags": ["\u7533\u62a5\u8868", "country", "\u632a\u5a01"]}, {"category": "", "categoryclass": "", "imagename": "e4d22e129f8735e98d41851051ec12b5.png", "infoid": 1072463, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u4eec\u5e0c\u671b\u516c\u53f8/\u670d\u52a1\u5728\u4ed6\u4eec\u7684\u8d26\u6237\u4e2d\u53d1\u751f\u4e0d\u5ba3\u4f20\u7684\u4e8b\u60c5\u65f6\u544a\u8bc9\u4ed6\u4eec\uff1a\n\u4f46\u662f\uff0c\u767b\u5f55\u7535\u5b50\u90ae\u4ef6\u5931\u8d25 - \u4ed6\u4eec\u76f8\u4fe1\u7684\u5173\u952e\u90e8\u5206 - \u5b8c\u5168\u662f\u771f\u7684.How\uff1f\u7b80\u5355\u7684\uff1a\n\u4e3a\u4ec0\u4e48\u8fd9\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u5b89\u5168\u8b66\u544a\uff1f\u56e0\u4e3a\u5b83\u5177\u6709\u4f7f\u5176\u5bb9\u6613\u6ee5\u7528\u7684\u6240\u6709\u5c5e\u6027\u3002\n\u60a8\u9700\u8981\u5305\u542b\u7684\u6700\u77ed\u4fe1\u606f\u91cf\u662f\u591a\u5c11\uff1f\u8b66\u544a\u4e2d\u8f83\u5c11\u7684\u7ec6\u8282\uff0c\u6709\u4fe1\u5f92\u7684\u5185\u90e8\u77e5\u8bc6\u8d8a\u5c11\u3002", "note_en": "People expect companies/services to tell them when untoward things could be happening to their accounts:\n  These examples are things you  should probably be notified about.But, if you go overboard with these warnings, you might find phishers triggering them   intentionally.\n    Eek.Well, you\u2019re not in $Country, and you weren\u2019t just logging into your account\u2026Is someone trying to credential-stuff you?\n As you\u2019re trying to remember whether you actually used a unique password on this account, your phone rings.The caller introduces themselves as from the $eShop security team where they\u2019ve just blocked a takeover of your account.To secure your account, they need to walk you through the reset process over the phone.\n Hopefully, you\u2019re suspicious\u2014this is a common phishing lure\u2014but everything seems to check out:\n  So you oblige and go through an account reset process with them.They assure you they\u2019ve successfully stopped the attack and your account is now secure.Phew!\n   The caller was of course not from the $eShop security team.Instead, they were compromising your account using the details you gave them over the phone.\n But, the failed login email\u2014the key part of their believability\u2014was completely genuine.How? Simple:\n The phisher somehow learned your email, phone number, and that you were an $eShop customer. (Often not a difficult task given the number of data breaches available to correlate together.)\n The phisher used a bogus password to try to log into your account, intentionally generating the failed login email. They can use a VPN so that a suitably worrying country gets reported as the source.\n Then they called you and could be incredibly convincing because they knew the contents of the email you just received.\n This perfectly sensible sounding security feature (warning that someone might be trying to log into your account) is easily abused by a phisher to attack your account.\n And can you blame them?The ability to send a scary-sounding warning to any user sounds like a feature  built for phishers.\n So that they\u2019re more likely to believe my pretense and give me their credentials\n  Why was this a bad security warning?Because it had all the properties that make it easy to abuse.\n It was easy to trigger by attackers. \u201cYou\u2019ve logged in on a new device\u201d isn\u2019t very abusable\u2014by that point, the attacker already has control over your account.But a failed login email is extremely abusable\u2014attackers can trigger it without knowing anything more than your username or email address.\n It contained predictable, and worse, controllable content. The phisher was so believable because they could control (and hence know the value of) the country from which the failed login was attempted. Including more details, like the IP address of the failed login, would only make them more believable.\n The timing was predictable. Would the phisher have been so believable if they called before the warning email arrived or hours afterwards?Probably not.Either they\u2019d seem like every other tech support scam (with no warning email to back them up), or you\u2019d have already checked out your account yourself, finding it perfectly safe.\n (note: just adding a delay isn\u2019t sufficient. A fixed one hour delay on the warning requires slightly more planning from attackers but is otherwise just as abusable.)\n  Is the warning  essential? A warning that doesn\u2019t exist can\u2019t be abused.\n What knowledge is required to trigger it? If all a phisher needs is an email to trigger the warning, they\u2019ve got a huge pool of potential victims. Even simple knowledge-based challenges will make large scale abuse harder.\n What\u2019s the minimum amount of information you need to include? The less detail in the warning, the less insider knowledge a phisher can appear to possess.\n Does the warning need to be immediate? Unless the user needs to respond immediately, adding a random delay could make it much harder to abuse.\n Dealing with phishing sites manually? Check out  Phish Report! It automatically finds contact information for the hosting provider and domain registrar and templates the abuse reports for you.", "posttime": "2022-01-09 21:59:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5efa\u7b51,phishers,features,\u4e8b\u60c5", "title": "\u60a8\u662fphishers\u7684\u5efa\u7b51\u529f\u80fd\u5417\uff1f", "title_en": "Are you building features for phishers?", "transed": 1, "url": "https://bradleyjkemp.dev/post/are-you-building-features-for-phishers/", "via": "", "real_tags": ["\u5efa\u7b51", "phishers", "features", "\u4e8b\u60c5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072462, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u572820\u4e16\u7eaa60\u5e74\u4ee3\u521d\u548c20\u4e16\u7eaa80\u5e74\u4ee3\u4e2d\u671f\uff0c\u5357\u975e\u5171\u548c\u56fd\u5728\u4e16\u754c\u4e0a\u8fd0\u8425\u4e86\u4e16\u754c\u4e0a\u6700\u5168\u9762\u7684\u5ba1\u67e5\u5236\u5ea6\u4e4b\u4e00\u3002\u5728\u5b98\u65b9\u7684\u8bb2\u4e49\u4e2d\u547c\u5401\u6ca1\u6709\u5ba1\u67e5\uff0c\u4f46\u51fa\u7248\u7269\u63a7\u5236 - \u5ba1\u67e5\u662f\u4e00\u53e5\u8bdd\uff0c\u5b83\u8bd5\u56fe\u4ece\u516c\u4f17\u8bdd\u8bed\u4e2d\u5ba1\u67e5 - \u5b83\u63a7\u5236\u4e86\u53ef\u4ee5\u516c\u5f00\u4f20\u64ad\u8ff9\u8c61\u7684\u6bcf\u79cd\u5f62\u5f0f\uff0c\u8fd9\u4e0d\u4ec5\u662f\u4e66\u7c4d\uff0c\u6742\u5fd7\uff0c\u62a5\u7eb8\uff0c\u7535\u5f71\u7b49\u3002\u4f46T\u6064\uff0c\u94a5\u5319\u5708\uff0c\u5a03\u5a03\uff0c\u73a9\u5177\uff0c\u5546\u5e97\u7b7e\u540d - \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u53ef\u80fd\u643a\u5e26\u7981\u4ee4\u6216\u8868\u793a\u3002\u6bcf\u4ef6\u65b0\u7684T\u6064\uff0c\u94a5\u5319\u5708\u7b49\uff0c\u4ee5\u53ca\u6bcf\u4e00\u5f20\u65b0\u4e66\uff0c\u7535\u5f71\u7b49\u90fd\u4e0d\u5f97\u4e0d\u901a\u8fc7\u5ba1\u67e5\u5b98\u50da\u4e3b\u4e49\u4e4b\u524d\uff0c\u4ee5\u4fbf\u5728\u516c\u4f17\u91ca\u653e\u4e4b\u524d\u3002\u5728\u65e7\u82cf\u8054\uff0c\u6709\u5927\u7ea670,000\u540d\u5b98\u50da\u76d1\u7763\u7ea67,000\u540d\u4f5c\u5bb6\u7684\u6d3b\u52a8\u3002\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5ba1\u67e5\u5458\u5bf9\u5357\u975e\u4f5c\u5bb6\u7684\u6bd4\u4f8b\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u9ad8\u4e8e\u5341\u5230\u4e00\u4e2a\u3002\n\u6700\u7ec8\u8bc1\u660e\u662f\u6709\u4e9b\u4e1c\u897f\uff0c\u6240\u4ee5\u8981\u8bf4\u7684\u662f\u963f\u91cc\u7eb3\u65af\u6216\u66fc\u52a0\u62c9\u65af\u7b49\u4f5c\u5bb6\u51fa\u4e86\u95ee\u9898\uff0c\u8fd9\u662f\u4ed6\u4eec\u53cd\u5e94\u7684\u8bed\u8a00\u7684\u8fc7\u5ea6\u3002\u4ee5\u53e6\u4e00\u79cd\u65b9\u5f0f\u653e\u7f6e\u8fd9\u4e00\u70b9\uff1a\u5f53\u6211\u4f7f\u7528\u672f\u8bed\u504f\u6267\u72c2\u65f6\uff0c\u5b83\u4e0d\u662f\u63cf\u8ff0\u8fd9\u79cd\u4f5c\u5bb6\u7684\u60c5\u51b5\u7684\u6bd4\u55bb\u65b9\u5f0f\u3002\u76f8\u53cd\uff0c\u504f\u6267\u72c2\u5728\u5185\u90e8\uff0c\u5728\u601d\u60f3\u4e2d\uff0c\u5728\u8bed\u8a00\u4e2d;\u6050\u6016\u548c\u6124\u6012\u7684\u6050\u6016\u548c\u6124\u6012\u5728Mangakis\u7684\u8bdd\u8bed\u4e2d\u542c\u5230\u4e86\u6050\u6016\u548c\u6124\u6012\uff0c\u5728\u4fb5\u6743\u6700\u4e3a\u6073\u6c42\u7684\u4fb5\u7565\u6027\uff0c\u8fd9\u662f\u4e00\u4e2a\u81ea\u6211\u98ce\u683c\u7684\u4fb5\u72af\uff0c\u901a\u8fc7\u53ef\u80fd\u6ca1\u6709\u6cbb\u6108\u7684\u75c5\u7406\u5b66\u3002\u6211\u6000\u7591\u540c\u6837\u7684\u504f\u6267\u72c2\uff0c\u53ef\u4ee5\u7528\u6211\u81ea\u5df1\u7684\u8bed\u8a00\u611f\u53d7\u5230\uff0c\u56e0\u4e3a\u6211\u5728\u8fd9\u91cc\u5199\u9053\uff1a\u5728\u8fc7\u5ea6\u575a\u6301\u5176\u63aa\u8f9e\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u5176\u63a8\u52a8\u4e2d\uff0c\u5b83\u5bf9\u98ce\u683c\u7684\u7ec6\u8282\u654f\u611f\u7684\u8981\u6c42\u3002\u5357\u975e\u5ba1\u67e5\u5f00\u59cb\u572820\u4e16\u7eaa80\u5e74\u4ee3\u5341\u5e74\u5185\u4e0b\u8dcc;\u4eca\u5929\u5b83\u51e0\u4e4e\u662f\u4f11\u7720;\u7136\u800c\uff0c\u6211\u5728\u5176\u9f0e\u76db\u65f6\u671f\u751f\u6d3b\uff0c\u4e0d\u4ec5\u5728\u4f34\u968f\u7740\u4f5c\u5bb6\u7684\u751f\u547d\u4e2d\u5f97\u5230\u4e86\u540e\u679c\uff0c\u800c\u662f\u5bf9\u516c\u4f17\u8bdd\u8bed\u7684\u6574\u4f53\uff0c\u5728\u6211\u81ea\u5df1\u7684\u4eba\u4e2d\u611f\u53d7\u5230\u4e86\u4e00\u4e9b\u66f4\u79d8\u5bc6\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u5fc5\u987b\u8003\u8651\u6211\u5206\u4eab\u7684\u53ef\u80fd\u6027\uff08\u6216\u611f\u89c9\u6211\u5206\u4eab\uff09Arenas\u6216Mangakis\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u6211\u4e5f\u53ef\u80fd\u88ab\u611f\u67d3\u4e86\u4efb\u4f55\u611f\u67d3\u8005\uff0c\u771f\u5b9e\u6216\u5984\u60f3\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u7bc7\u6587\u7ae0\u53ef\u80fd\u662f\u5b83\u5bfb\u6c42\u63cf\u8ff0\u7684\u540c\u7c7b\u504f\u6267\u72c2\u7684\u6807\u672c\u3002\n\u8ba9\u6211\u4eec\u501f\u9274\u4e00\u79cd\u5199\u4f5c\u7684\u4f8b\u5b50\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0e\u5fc3\u7231\u7684\u4e00\u4e9b\u8fd9\u6837\u7684\u4ea4\u6613\u7684\u4ea4\u6613\uff0c\u8fd9\u8bd5\u56fe\u53d6\u60a6\u5979\uff08\u4f46\u8fd9\u4e5f\u662f\u5077\u5077\u5730\u5077\u5077\u5730\u4fee\u6539\u548c\u91cd\u65b0\u521b\u9020\u5979\u7684 - \u8c01\u662f\u613f\u610f\u7684\uff09;\u8ba9\u6211\u4eec\u60f3\u8c61\u5982\u679c\u8fdb\u5165\u6b64\u6b21\u4ea4\u6613\u4ee5\u5927\u89c4\u6a21\u548c\u4e0d\u53ef\u5426\u8ba4\u7684\u65b9\u5f0f\u5f15\u5165\u4e86\u53e6\u4e00\u4e2a\u8bfb\u8005\uff1a\u9ed1\u6697\u7684\uff0c\u79c3\u5934\u5ba1\u67e5\u5458\uff0c\u4ed6\u7684\u5658\u8d77\u5634\u5507\u548c\u4ed6\u7684\u7ea2\u7b14\u548c\u4ed6\u7684\u7ea2\u7b14\u548c\u4ed6\u7684\u7ea2\u7b14\u548c\u4ed6\u7684\u7ea2\u7b14\u548c\u4ed6\u7684\u7ea2\u7b14\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u70e6\u8e81\u548c\u4ed6\u7684\u7ea2\u7b14\u8c34\u8d23\uff08\u65e0\u9519\u8bef\uff0c\u6211\u5c06\u5ba1\u67e5\u5458\u5448\u73b0\u4f5c\u4e3a\u7236\u4eb2\u7684\u76f8\u5f53\u5947\u9178\u7248\u672c\uff09\u3002\u7136\u540e\u4ed4\u7ec6\u5efa\u9020\u7684\u5185\u90e8\u5267\u7684\u6574\u4e2a\u5e73\u8861\u88ab\u6467\u6bc1\uff0c\u5e76\u4ee5\u96be\u4ee5\u4fee\u590d\u7684\u65b9\u5f0f\u6467\u6bc1\u3002\u56e0\u4e3a\uff0c\u4e0e\u8fd9\u4e9b\u5fc3\u7075\u8fd0\u8425\u4e00\u6837\uff0c\u8bd5\u56fe\u5ffd\u7565\uff08\u538b\u5236\uff09\u5ba1\u67e5\u5458\u7684\u65b9\u5f0f\u8d8a\u591a\uff0c\u4ed6\u81a8\u80c0\u7684\u8d8a\u5927\u3002\n\u201c\u4ed6\u662f\u4e00\u4e2a\u5927\u5e08\u5417\uff1f\u201d\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u65af\u5927\u6797\u6ca1\u6709\u95ee\uff0c\u56e0\u4e3a\u4ed6\u8ba4\u4e3a\u4f1f\u5927\u7684\u827a\u672f\u5bb6\u5982\u4e0a\u6240\u8ff0\u3002\u4ed6\u7684\u610f\u601d\u662f\u50cf\u8fd9\u6837\u7684\uff0c\u662f\u5371\u9669\u5417\uff1f\u4ed6\u662f\u5426\u8981\u6d3b\u7740\uff0c\u5373\u4f7f\u4ed6\u6b7b\u4e86\uff1f\u4ed6\u7684\u53e5\u5b50\u4f1a\u6bd4\u4ed6\u7684\u53e5\u5b50\u66f4\u957f\u7684\u65f6\u95f4\u66f4\u957f\u5417\uff1f\u6211\u5fc5\u987b\u5c0f\u5fc3\u5417\uff1f\n\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e86\u89e3\u4f5c\u5bb6\u4e0e\u56fd\u5bb6\u4e4b\u95f4\u7684\u8270\u96be\u5173\u7cfb\u7684\u60a0\u4e45\u5386\u53f2\uff0c\u6211\u4eec\u9700\u8981\u53cd\u601d\u4f5c\u8005\u4f5c\u4e3a\u65e9\u671f\u73b0\u4ee3\u65f6\u4ee3\u987d\u56fa\u7684\u5386\u53f2\u73b0\u8c61\uff0c\u5e76\u5728\u5386\u53f2\u4e0a\u9996\u6b21\u5f00\u653e\u4e86\u91ce\u5fc3\u4f5c\u8005\u804c\u4e1a\u751f\u6daf\u3002", "note_en": "Between the early 1960s and the mid-1980s, the Republic of South Africa operated one of the most comprehensive censorship systems in the world. Called in official parlance not censorship but publications control\u2014censorship was a word it sought to censor from public discourse about itself\u2014it controlled every form in which signs could be publicly disseminated, that is, not only books, magazines, newspapers, films, etc., but T-shirts, key-rings, dolls, toys, shop-signs\u2014anything, in fact, that might carry a forbidden message or representation. Every new T-shirt, key-ring, etc., as well as every new book, film, etc., had to pass the scrutiny of the censorship bureaucracy before it could be released upon the public. In the old Soviet Union there were some 70,000 bureaucrats supervising the activities of some 7,000 writers. The ratio of censors to writers in South Africa was, if anything, higher than ten to one.\n When a man reacts to the world around him as though the air is filled with coded messages deriding him or plotting his destruction, we call him paranoid. For decades the South African state behaved in a paranoid fashion. In itself, as a feature of what we can call the mentality of the state, the phenomenon is nothing new. Paranoia is the pathology par excellence of dictatorships. Among modern dictators Stalin was perhaps the most demonstrably and the most extremely paranoid. We can fairly say that of the millions who died at his behest a good proportion were victims of his paranoid delusions.\n One of the features distinguishing modern dictatorships from earlier dictatorships is how widely and rapidly the modern dictator\u2019s paranoia, or the paranoia of a ruling clique, can be disseminated to infect the populace as a whole. In fact it has been a positive strategy of government among modern paranoid dictatorships to spread their paranoia. Stalin\u2019s Soviet Union is again the prime example: every citizen was encouraged to suspect every other citizen of being a spy or saboteur; the bonds of human sympathy and trust between people were broken down; and \u201cSoviet society\u201d became in fact just a name for tens of millions of individuals living on individual islands of mutual suspicion and terror of one another.\n The Soviet Union was not unique. The Cuban novelist Reinaldo Arenas wrote of the atmosphere of \u201cunceasing official menace\u201d in his country that made a citizen \u201cnot only a repressed person, but also a self-repressed one, not only a censored person, but a self-censored one, not only one watched over, but one who watches over himself.\u201d  1 Exemplary punitive action in a context of \u201cunceasing official menace\u201d is an argument hard to resist: one effect to make certain kinds of writing and even speech a guilty activity, thereby reproducing the paranoia of the state in the psyche of the subject. Thus may the state look forward to the day when the censorship bureaucracy can afford to wither away, its function having been, in effect, privatized.\n I may seem to fling the word paranoia around rather loosely. The paranoia of the tyrant\u2014yes, perhaps. But if the writer stands a chance of being packed off to a real, objective reeducation camp, why should one call that paranoia rather than justifiable watchfulness?\n My answer is, No. The watchfulness of the writer in the paranoid state has a pathological quality that truly tips it over into paranoia. The evidence I call upon here comes from writers themselves. Time and again they record the feeling of being touched and contaminated by the sickness of the state. In a move typical of \u201cauthentic\u201d paranoids, they claim that their minds have been invaded; it is against this invasion that they express their outrage.\n The Greek writer George Mangakis, for instance, records the experience of writing in prison under the eyes of his guards. Every few days the guards searched his cell, taking away his writings and returning those which the prison authorities\u2014the censors\u2014considered \u201cpermissible.\u201d Mangakis recalls accepting his papers back and suddenly \u201cloathing\u201d them. \u201cThe system is a diabolical device for annihilating your own soul. They want to make you see your thoughts through their eyes and control them yourself, from their point of view.\u201d  2 By forcing the writer to see what he has written through the censor\u2019s eyes, the censor forces him to internalize a contaminating reading; Mangakis\u2019 sudden, revulsive moment is the moment of contamination.\n The ultimate proof that something has, so to speak, gone wrong with writers like Arenas or Mangakis is the excessiveness of the language of their response. To put the point in another way: as I use the term paranoia, it is not a figurative way of describing the situation of such a writer. Rather, the paranoia is on the inside, in the language, in the thinking; the terror and rage one hears in Mangakis\u2019 words is terror and rage at the most intimate of invasions, an invasion of the very style of the self, by a pathology for which there may be no cure. I suspect the same paranoia may be felt in my own language, as I write here: in the excessive insistence of its phrasing, in its vehemence, its demands for sensitivity to minutiae of style. The South African censorship began to wind down in the decade of the 1980s; today it is virtually dormant; yet I lived through its heyday, saw its consequences not only on the lives of fellow-writers but on the totality of public discourse, felt in my own person some of its more secret effects, and so must contemplate the possibility that I share (or feel I share) the position of an Arenas or a Mangakis because I too may have been infected with whatever infected them, real or delusional. That is to say, this essay may be a specimen of the same kind of paranoid discourse it seeks to describe.\n I stress that the paranoia I am talking about is not the imprint of censorship on those writers alone who have become the objects of official persecution. All writing that in the normal course of events can fall under the censor\u2019s eye may become tainted in the manner I have described, whether or not the censor passes it. All writers under censorship are at least potentially driven to paranoia, not just those who have books banned.\n Why should this be so? I can give only a speculative answer. It is an answer based not only on introspection, however: it is also based on a scrutiny (I should caution the reader, however: perhaps a paranoid scrutiny) of the accounts other writers (who may themselves have been infected with paranoia) have given of operating under regimes of censorship.\n No one believes any longer that the self is the monadic unit described by classical rationalism. On the contrary, we picture the self as multiple and in many ways divided against itself. We picture it as a zoo, for instance, in which all kinds of strange beasts have residence, over which the anxious, overworked zookeeper of rationality has rather limited control. In this zoo there are few internal bars. At night the zookeeper sleeps and some of the beasts roam about (we call this dreaming).\n Which, in this psychoanalytic fantasy, arc the beasts in the zoo of the self? Some have names like figure-of-the-father and figure-of-the-mother; others are memories or fragments of memories in transmuted form, with strong elements of feeling attached to them; a whole subcolony are semi-tamed but still treacherous earlier versions of the self, each with an inner zoo of its own over which it has less than complete control.\n Artists, says Freud, are people who move around in the inner menagerie with a degree of confidence and emerge from it when they wish more or less unscathed. Whether Freud\u2019s account of the creative process holds water is not my concern here. I poach from it one element: that artistic creation of a certain kind involves inhabiting and managing and exploiting quite primitive parts of the self. This is not a particularly dangerous activity but it is a delicate one, one that may take a writer years of preparation till he/she finally gets the codes and the keys and the balances right, and can move in and out more or less freely. It is also a very private matter, so private that it almost constitutes the definition of privacy: how I am with myself.\n Managing the inner selves, making them work for one (making them productive) is a complex matter of pleasing and satisfying and challenging and extorting and wooing and feeding, and sometimes even of destroying. For writing not only comes out of the zoo but (I become hypermetaphorical now) goes back in again. That is to say, insofar as writing is transactional, the figures for whom and to whom it is done are also figures in the zoo: for instance, the figure-of-the-beloved in the zoo, who may or may not be an idealized representation of some beloved in the real world, though for Freud she is more likely to be a heavily disguised version of a parent.\n Let us take the example of a kind of writing that is, in its essence, a transaction with some such figure of the beloved, that tries to please her (but that also tries continually though surreptitiously to revise and recreate her as the-one-who-will-be-pleased); and let us imagine what happens if into this transaction is introduced in a massive and undeniable way another figure-of-the-reader: the dark-suited, bald-headed censor, with his pursed lips and his red pen and his irritability and his censoriousness (for no good reason I present the censor as a rather parodic version of the figure-of-the- father). Then the entire balance of the carefully constructed inner drama is destroyed, and destroyed in a way that is hard to repair. For, as is the way with these psychic operations, the more one tries to ignore (repress) the censor, the larger he swells.\n Working under a censorship regime is like being intimate with someone who does not love you, with whom you don\u2019t want intimacy, but who is forced upon you. It is like writing for an intrusive reader, one who forces himself in upon the intimacy of the writing transaction, forces out the figure of the loved or courted reader, reads whatever you write in a disapproving and censorious fashion.\n I cite an exemplary case from the Soviet Union, the case of one of Stalin\u2019s principal victims among writers, Osip Mandelstam. It tells several important and appalling lessons about the paranoid state.  3\n In 1933 Mandelstam, then 42 years old, composed a short but powerful poem about a tyrant who orders executions left, right and center, and relishes the deaths of his victims like a man munching raspberries. Though the tyrant is not named (he is identified only as a Georgian), the reference is clearly to Stalin.\n Mandelstam did not write the poem down, but did recite it several times to friends. In 1934 his home was raided by security police looking for the poem. Though they did not find it\u2014it existed solely inside the heads of the poet and his friends\u2014they arrested Mandelstam. While Mandelstam was under arrest, the poet Boris Pasternak had a telephone call from the top man himself, Stalin. Who is this fellow Mandelstam? Stalin wanted to know. In particular, is he a master? (That was Stalin\u2019s word, the same in Russian as in English.)\n Pasternak correctly inferred the second half of the question: Is Mandelstam a master or is he disposable? Pasternak replied, in effect, that Mandelstam was a master, that he was not disposable. So Mandelstam was sentenced to internal exile in the city of Voronezh. While he was living there, enormous pressure was brought on him to pay tribute to Stalin by composing a poem in his honour. Mandelstam gave in and composed an adulatory ode. What he felt about this ode we will never know, not only because he left no record but because\u2014as his wife persuasively argues\u2014he was mad when he wrote it, mad with fear, perhaps, but mad too with the madness of a person not only suffering the embrace of a body he detests, but taking the initiative, day after day, line after line, to embrace that body.\n In fact the ode did not save Mandelstam. He was soon rearrested and sent to a labour camp, from which he never returned. There is a great deal that can be said about the fate of this great and tragic poet. All I will comment on are two moments in his persecution: the moment when Stalin asks whether Mandelstam is a master, and the moment when Mandelstam is ordered to celebrate his persecutor.\n \u201cIs he a master?\u201d We can be sure Stalin was not asking because he regarded great artists as above the state. What he meant was something like, Is he dangerous? Is he going to live, even if he dies? Is his sentence on me going to live longer than my sentence on him? Do I have to be careful?\n Hence the command later on that Mandelstam write an ode (whether the command came from Stalin himself or from the toadies surrounding him need not concern us here). Making the great artists of his day kowtow to him was Stalin\u2019s way of breaking them, of making it impossible for them to hold their heads up\u2014in effect, of showing them who was master, and of making them acknowledge him as master in a medium where no lie, no private reservation, is possible: one\u2019s own art.\n To the case of Mandelstam let me add a case from South Africa that is comparable in its dynamic if not in its scale.  4\n In 1972 the poet Breyten Breytenbach published a poem in Afrikaans entitled \u201cLetter to Butcher from Foreign Parts.\u201d As the poem made clear, the butcher to whom the letter was addressed was Balthazar John Vorster, then Prime Minister of the Republic of South Africa, the man who had done most to create a security-police empire with huge powers over life and death, a police force untouchable by the law, above the courts. Vorster did more than anyone to create an ethos of invulnerability among the police, an ethos whose terrible aftereffects still hang over South Africa. In the custody of Vorster\u2019s security police, scores of political detainees died unexplained deaths. It is important to remember that these people did not \u201cdisappear,\u201d as happened in Argentina and Chile. On the contrary, their bodies were produced for post-mortem examination; and, despite clear evidence that they had died under torture, patriotic or perhaps just frightened magistrates accepted the bland explanations produced by the police: that detainees had slipped on bars of soap and fatally concussed themselves while taking a shower, or had hurled themselves out of tenth-floor windows in tits of remorse, or had hanged themselves with their torn-up shirts.\n In Breytenbach\u2019s long poem there are recorded the names of many of these victims, as if the poem says of itself, \u201cIt is I that will live in history, that will be remembered, not the court record.\u201d But the heart of the poem is a passage addressed to the butcher himself in which Breytenbach asks Vorster in the most intimate of ways what it is like for him to use fingers red with blood to fondle his wife\u2019s private parts. It is a shocking and obscene passage, all the more obscene for addressing the sex-life of a couple in late middle age, public figures in a highly puritanical society.\n Some years later, Breytenbach\u2014who had been living abroad when he wrote the poem, and had published it in the Netherlands, publication back home being out of the question\u2014paid a visit to South Africa, using false papers and on a secret military assignment. He was soon picked up by the security police. He was not liquidated, he was not even tortured, but he was given a show trial. The formal charge was terrorism, but his writings, particularly the poem against Vorster, soon emerged as a subtext to the proceedings. The purpose of the trial, as it emerged, was to break him in much the same way as Mandelstam had been broken. In open court Breytenbach ultimately apologized to Vorster for what he called the \u201ccrass and insulting\u201d poem he had written and thanked the security police for the humanity with which they had treated him. In return for eating crow he got nothing. The deal he had been promised\u2014a lighter sentence\u2014was reneged on.\n There is a puzzling feature about both cases, Brcytenbach\u2019s and Mandelstam\u2019s. Compared with the vast machinery of the state, including its well-developed machinery of censorship, the writer was clearly powerless. Yet the state, and particularly the head of state (the head of the state in which the paranoia buzzes), deemed these writers, these master-writers, important enough in terms of their power\u2014and power is the only quantity that power understands\u2014to lavish much attention on. Why could the two poems in question, however insulting, not have been ignored like the pinpricks they were? Why do the activities of writers concern the state at all?\n To answer this question, to understand the long history of troubled relations between writers and the state, we need to reflect on authorship as an historical phenomenon cradled in the early modern age, and on the ambitions opened up for the first time in history by a career in authorship.\n Scribal culture, the culture of the West before the invention of printing, did not particularly foster the notion that by dint of writing a person could attain fame. This notion belongs to print culture. We begin to see evidence of it quite soon after the invention of printing, as printers begin to make a practice of attaching authors\u2019 names to the books they put out. What does this signing of the book mean? Of course it has legal and commercial implications: the author accepts a share of the legal responsibility for the book as he lays claim to a share of the profits.  5 But signing the book also has a symbolic meaning: the author uses the book as a vehicle for projecting his signature\u2014and sometimes his portrait\u2014into the world, in a multiplied form. It is this potentially endless multiplication of traces of himself that gives the author the sense of having the power to cross all spatial and temporal boundaries. In visions of fame and immortality authorship as we know it today is born: authorship and the mystique of the author.  6\n  The people, as a concept in the political philosophy of the West, also goes back to the early modern state. The question may be McLuhanesque, but it is worth asking nevertheless: Which achieved its aims earlier\u2014the state, fitting the concept of a people over the population under its control, or the early printer-publishers, creating a public (a reading public) for their products? Or, to put the question in a milder form: Does the reading public called into being by the invention of printing not constitute a model of the people as imagined in the philosophy of the early modern state?\n Whatever the answer, it seems to be no accident that, as soon as printing arrived, state censorship took on a more systematic, widespread and rigorous form, as though in printers and their authors the state had identified not so much an enemy (though in fact that is what they were often labeled) as a rival. From the sixteenth century onward we begin to detect in the language of the state, when it turns to authors and their powers, a note of distinctly modern paranoia. Here, for instance, is England\u2019s Lord Keeper, Sir Nicholas Bacon, speaking in 1567:\n These books\u2026 [make] men\u2019s minds to be at variance one with another, and diversity of minds maketh seditions, seditions bring in tumults, tumults make insurrections and rebellions, insurrections make depopulations and bring in utter ruin and destruction of men\u2019s bodies, goods and lands.   7\n We tend today to think of blanket pre- and post-publication censorship as a feature of absolutist and totalitarian states: the Russia of Nicholas I, Stalin\u2019s Soviet Union. But censorship in early modern Europe was at least as relentless\u2014draconian in its penalties and surprisingly sophisticated in its mechanisms too.  8 As early as the sixteenth century we find the state viewing authors and printer-publishers not only as an interest group with a strong (and self-justifying) sense of\n......", "posttime": "2022-01-09 21:59:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5ba1\u67e5,emerging,\u4f5c\u5bb6", "title": "\u6765\u81ea\u5ba1\u67e5\u751f\u7684\u65b0\u5174\uff081993\u5e74\uff09", "title_en": "Emerging from Censorship (1993)", "transed": 1, "url": "https://salmagundi.skidmore.edu/articles/9-emerging-from-censorship", "via": "", "real_tags": ["\u5ba1\u67e5", "emerging", "\u4f5c\u5bb6"]}, {"category": "", "categoryclass": "", "imagename": "fb508e6cf18e791c484b3c2c3c695664.png", "infoid": 1072461, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b63\u5728\u5ba1\u6838\u7684\u4ee3\u7801\u5c5e\u4e8e\uff0c\u5e76\u4e14\u662f\u56e2\u961f\u7684\u4ea7\u54c1\u3002\u56e0\u4e3a1 2 3\uff0c\u800c\u4e0d\u662f\u95ee\u201c\u4f60\u4e0d\u559c\u6b22x y z\u5417\uff1f\u201d\u56e0\u4e3a1 2 3\uff0c\u4f60\u53ef\u4ee5\u95ee\u201c\u6211\u4eec\u4e0d\u559c\u6b22x y z\u5417\uff1f\u201d\u3002", "note_en": "The code that is being reviewed belongs to, and is a product of, a team. Instead of asking \u201cWouldn\u2019t  you prefer x y z because of 1 2 3?\u201d you can ask \u201cWouldn\u2019t  we prefer x y z because of 1 2 3?\u201d.\n  Instead of repeated,  subjective, comments a  bout style \u2014 leave it to the linter to be the source of truth. See people writing code that you really  really don\u2019t like (but works)? Great! After convincing everyone that your style is preferable \u2014 add a task to improve the linter and reflect that.\n  There is no need to optimize idiomatic code that did not fail. Be careful where you trade-off readability for performance, or you will be left with a very performant but impossible to maintain code.\n  Managed git services (e.g. GitHub) distinguish Comments from Change Requests. Know the difference between something that is objectively wrong and broken and something that you, subjectively, don\u2019t like. The former is the  only reason for a change request. You merely don\u2019t  like something? Add a comment. And approve the PR.\n  \u201cI really like this module, its clean and very well tested\u201d. Yes. This is also a part of a good code review. Imagine only hearing the bad things about your code all the time. Wouldn\u2019t that be just terrible?\n  This is something I see a lot and I credit git for it. Reviewers tend to review changed lines with already-bad code along with changes the coder did. While already-bad code should be dealt with, its not practical to involve them in the pull request that merely touched the same lines with them. Even if they\u2019re very small.\n Cleaning up these small things should be done in a separate PR. You can even add routine tasks for them and list them as subtasks when you run into them in PRs. Most of the times these housekeeping PRs involve no logic changes, are easily reviewed, merged and deployed \u2014 and most importantly \u2014 do not block a feature.", "posttime": "2022-01-09 21:58:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,\u5ba1\u67e5,review,\u56e2\u961f", "title": "\u4ee3\u7801\u5ba1\u67e5\u65b9\u5f0f", "title_en": "Code Review Manners", "transed": 1, "url": "https://reutsharabani.medium.com/the-7-code-review-manners-f0f0eef4d3e5", "via": "", "real_tags": ["\u4ee3\u7801", "\u5ba1\u67e5", "review", "\u56e2\u961f"]}, {"category": "", "categoryclass": "", "imagename": "58dcf1f9405a59a43858c943a2215acf.gif", "infoid": 1072460, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u58f0\u79f0\uff0c\u8bb8\u591a\u8f6f\u4ef6\u4e16\u754c\u7684\u8c1c\u9898\u548c\u5931\u8d25\u53ef\u4ee5\u89e3\u91ca\u4e3a\u516c\u5171\u7269\u54c1\u95ee\u9898\u3002\u6765\u81ea\u9ed1\u5ba2\u65b0\u95fb\uff0c\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u548c\u7845\u8c37\u4eba\u4eec\u5e76\u4e0d\u603b\u662f\u77e5\u9053\u8fd9\u4e00\u6807\u51c6\u7ecf\u6d4e\u5b66\u3002\u6240\u4ee5\uff01\n\u6211\u7684\u89c2\u70b9\u4e0d\u662f\u653b\u51fb\u5f00\u653e\u6765\u6e90\uff1a\u6211\u4eec\u521a\u624d\u770b\u5230\u7684\uff0c\u6240\u6709\u8f6f\u4ef6\u5e02\u573a\u90fd\u662f\u4e0d\u5b8c\u7f8e\u7684\u3002\u4f5c\u4e3a\u516c\u5171\u826f\u597d\u7684\u5f00\u6e90\u601d\u8003\u53ef\u4ee5\u6f84\u6e05\u5b83\u9762\u4e34\u7684\u95ee\u9898\u3002\n\u653f\u7b56\u5236\u5b9a\u8005\u6709\u6743\u62c5\u5fc3\u5927\u578b\u6280\u672f\u3002\u4f46\u5927\u578b\u6280\u672f\u5b58\u5728 - \u90e8\u5206 - \u56e0\u4e3a\u5b83\u89e3\u51b3\u4e86\u516c\u5171\u7269\u54c1\u95ee\u9898\u3002\u5982\u679c\u60a8\u6ca1\u6709\u5f97\u5230\u5b83\uff0c\u60a8\u65e0\u6cd5\u6210\u529f\u89e3\u51b3\u95ee\u9898\u3002\u60a8\u4e0d\u5e0c\u671b\u901a\u8fc7\u5438\u5f15\u7f51\u7edc\u7684\u81ea\u7531\u548c\u5f00\u653e\u6027\u7684\u7406\u60f3\u6765\u6d88\u9664\u8fd9\u4e9b\u95ee\u9898...\u9664\u975e\u90a3\u4e9b\u7406\u60f3\u7684\u7406\u60f3\u4f1a\u5e2e\u52a9Joe\u5728\u7ebf\u8d2d\u4e70\u4ed6\u7684\u72d7\u997c\u5e72\u3002", "note_en": "I claim that many puzzles and failures of the software world can be explained as public goods problems. Judging from Hacker News, software engineers and Silicon Valley people don\u2019t always know this standard piece of economics. So!\n Voluntary economic transactions make all parties better off. But not all transactions are voluntary on all sides. If I take the car to work, saving $10 of time, I may cause 10 cents worth of pollution to 1000 people in my neighbourhood. Even though society would be $90 better off if I didn\u2019t drive, those people can\u2019t stop me. My driving is a public bad. Another classic example is overfishing. If everyone can fish from a lake, they will not take account of the cost they impose on others by leaving less fish for them. The lake is a commons.  Elinor Ostrom won her Nobel Prize for studying how communities solve these common pool dilemmas.\n  Computers get faster and have more memory every year. Your computer is many times more powerful than one from 10 years ago. Yet these improvements don\u2019t always seem to translate into faster performance. Many common programs still take seconds to start, or they use gigabytes of memory, seemingly to do the same job they always did.\n Your computer\u2019s memory and processing power is a commons. Many different programs run simultaneously on it. Like a fisher on the lake, each software maker faces a trade-off: they can add features, which take up processing power and memory. The cost of this will be shared among all the programs on your computer. The software maker cares about making their program slower, but not about making other programs slower. (Most users are not tech-savvy enough to work out which programs slow the computer down.) The maker faces another trade-off: they can write faster, leaner software, but at a cost in development time and highly-paid engineers. They pay that cost alone, but the faster software benefits all the other programs on your computer. Again, lean software is a public good. The result is that programs are featureful, but bloated.\n  Firms are collections of people cooperating to produce something. Often, the interest of different divisions is not aligned. Division X works on feature Y. Feature Y may not actually be very useful: the product would be better, and bring in more revenue, without it. But getting rid of Y would mean shrinking division X. If the firm\u2019s leadership is not perfectly effective, division X may get its way, keeping the useless feature. The industry phrase for this is \u201cshipping your org chart\u201d.\n   Open source software licenses allow users to view and modify the source code for software, and to share their modifications. Open source software has some notable successes, most famously the Linux kernel which powers much of the internet and every Android smartphone. It also has problems. Open source authors suffer burnout from demanding users. Key pieces of software infrastructure are  underfunded, putting  security at risk.\n Companies can profit from selling open source software. But they know that a rival can take their code and resell it, effectively expropriating the development time they have put in. ( This  happens.) As a result, investment in open source software is like a public good. There are various imperfect workarounds for this, like selling extra closed-source features, or making money from consulting. In other cases, open source development is done by volunteers, out of altruism or personal passion, or so as to demonstrate their skills to possible employers. Again, this can work, but not perfectly, because altruism and personal passion do not perfectly track consumer demand. Open source hackers write many projects which are useful to hackers, but relatively few which are directly useful to Grandma.\n My point isn\u2019t to attack open source:  all software markets are imperfect, as we\u2019ve just seen. Thinking of open source as a public good can clarify the problems it faces.\n  Much modern software is delivered via the web. The frontend is written in languages like HTML, Javascript and CSS. These aren\u2019t developed by a company but by standards bodies. Anybody may write a web browser which uses them.\n These standards are big and complex. They include a way to display a  repeating elliptical gradient, for a web page styled like a tie-dye t-shirt; an HTML tag for  acronym, plus a completely different tag for  abbreviation. Yet they have notable gaps. On a modern smartphone, you can make a payment with a single finger press. After 25 years of the web, most payments still involve typing in a 16 digit number plus several other details \u2014 typically, yet mysteriously, stored on a separate piece of plastic. It took decades to develop  a standard method to show a video, or a  decent way to display things in rows and columns. And while nerds can write and host their own websites, there is no usable standard way for an ordinary person to author content.\n What explains these failings? The historical details are complex and fought over, but the fundamental issue is simple: open standards are a public good. Making video or payments easy in HTML benefits all the browser makers, and every website owner. By contrast, Apple takes a 30% cut whenever you pay for an iPhone app. Of course it\u2019ll make payment easy.\n  Indeed, a public goods problem can be fixed if a single agent has the power to enforce contributions. Classically, the government might tax your driving or enforce limits on overfishing. In the software world, monopolists can solve public goods problems. When Apple writes software for the iPhone, it has an incentive to minimize bloat, because it makes money from sales of the whole platform, not each individual program. For software that Apple won\u2019t write itself, it can provide a \u201cwalled garden\u201d App store. It takes a cut of the profits; it can also enforce some quality guarantees. Customers don\u2019t mind this, because Apple mitigates (some of) the public goods problems of bad software.\n Facebook lets ordinary people write content on the web and show it to their friends. It provides another platform. Instead of charging users, it extracts information from them and sells it to advertisers. Billions of people are prepared to pay this price.\n One web browser, Chrome, has an increasing share of the web browser market, and that browser\u2019s owner, Google, increasingly dominates the HTML standards-setting process. Effectively, the web might become Google\u2019s platform. Like Facebook, it profits from advertising. Google\u2019s monopoly is not, basically, the result of nefarious behaviour. As the biggest player, it has the most incentive to drive the standards forward. This in turn reinforces its dominance.\n Policy-makers are right to worry about big tech. But big tech exists \u2014 partly \u2014 because it solves public goods problems. You cannot address the issue successfully if you don\u2019t get that. You cannot wish these problems away by appealing to the web\u2019s founding ideals of freedom and openness\u2026  unless those ideals will help Joe buy his dog biscuits online.", "posttime": "2022-01-09 21:57:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,goods,\u7406\u60f3", "title": "\u516c\u5171\u7269\u54c1\u95ee\u9898\u5728\u8f6f\u4ef6\u4e2d\u65e0\u5904\u4e0d\u5728", "title_en": "Public goods problems are everywhere in software", "transed": 1, "url": "https://wyclif.substack.com/p/public-goods-problems-are-everywhere", "via": "", "real_tags": ["\u8f6f\u4ef6", "goods", "\u7406\u60f3"]}, {"category": "", "categoryclass": "", "imagename": "807f2ba834079053e09d95c0898a30be.gif", "infoid": 1072459, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c03\u8c10\u4e50\u5668\u7684\u5f53\u524d\u53c2\u8003\u9891\u7387\u4e3a440 Hz\u3002\u4e00\u4e9b\u7406\u8bba\u5bb6\u548c\u97f3\u4e50\u5bb6\u58f0\u79f0\uff0c432 Hz\u8c03\u6574\u5bf9\u4eba\u4f53\u5177\u6709\u66f4\u597d\u7684\u5f71\u54cd\uff0c\u4f46\u6ca1\u6709\u652f\u6301\u8fd9\u4e00\u5047\u8bbe\u7684\u79d1\u5b66\u7814\u7a76\u3002\n\u67e5\u770b\u5168\u6587", "note_en": "The current reference frequency for tuning musical instruments is 440 Hz. Some theorists and musicians claim that the 432 Hz tuning has better effects on the human body, but there are no scientific studies that support this hypothesis.\n To identify differences in vital parameters and perceptions after listening to music at different frequencies, 440 Hz versus 432 Hz.\n    Two sessions of music listening on different days. Both sessions used the same music (movie soundtracks) but tuned to 440 Hz on one day and 432 Hz on the other. Each session consisted of 20 min\u2019 listening.\n Vital parameters (blood pressure, heart rate, respiratory rate, oxygen saturation), perceptions (physical and emotional sensations, for example fatigue and stress), levels of concentration during the listening session, and general satisfaction with the experience.\n 432 Hz tuned music was associated with a slight decrease of mean (systolic and diastolic) blood pressure values (although not significant), a marked decrease in the mean of heart rate (\u22124.79 bpm,  p\u202f=\u202f0.05) and a slight decrease of the mean respiratory rate values (1 r.a.,  p\u202f=\u202f0.06), compared to 440 Hz. The subjects were more focused about listening to music and more generally satisfied after the sessions in which they listened to 432 Hz tuned music.\n The data suggests that 432 Hz tuned music can decrease heart rate more than 440 Hz tuned music. The study results suggest repeating the experiment with a larger sample pool and introducing randomized controlled trials covering more clinical parameters.\n     One sentence summary: we listen to music tuned to 440 Hz but listening to 432 Hz tuned music can have a greater impact on human health.\n  View full text", "posttime": "2022-01-09 21:57:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u97f3\u4e50,health,\u97f3\u4e50\u5bb6", "title": "\u97f3\u4e50\u8c03\u6574\u4e3a440 Hz\uff0c\u4e0e432 Hz\u548c\u5065\u5eb7\u6548\u679c", "title_en": "Music Tuned to 440 Hz versus 432 Hz and the Health Effects", "transed": 1, "url": "https://www.sciencedirect.com/science/article/abs/pii/S1550830718302763", "via": "", "real_tags": ["\u97f3\u4e50", "health", "\u97f3\u4e50\u5bb6"]}]