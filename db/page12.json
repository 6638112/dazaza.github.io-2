[{"category": "", "categoryclass": "", "imagename": "365e4730cecab4d5447439fb841dc361.jpg", "infoid": 1071709, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e CNBC \u770b\u5230\u7684\u51fa\u751f\u8bc1\u660e\uff0c\u9677\u5165\u56f0\u5883\u7684 Theranos \u521b\u59cb\u4eba\u4f0a\u4e3d\u838e\u767d\u00b7\u970d\u59c6\u65af\uff08Elizabeth Holmes\uff09\u751f\u4e0b\u4e86\u4e00\u4e2a\u5a74\u513f\u3002\u798f\u5c14\u6469\u65af\u56e0\u5979\u5df2\u5012\u95ed\u7684\u7845\u8c37\u521d\u521b\u516c\u53f8\u800c\u9762\u4e34\u5341\u591a\u9879\u7535\u6c47\u6b3a\u8bc8\u91cd\u7f6a\u3002\u5979\u7684\u6000\u5b55\u63a8\u8fdf\u4e86\u5979\u7684\u5ba1\u5224\u5f00\u59cb\u3002 Theranos \u521b\u59cb\u4eba\u4f0a\u4e3d\u838e\u767d\u00b7\u970d\u59c6\u65af (Elizabeth Holmes) \u7684\u6000\u5b55\u63a8\u8fdf\u4e86\u5979\u5373\u5c06\u8fdb\u884c\u7684\u6b3a\u8bc8\u5ba1\u5224\u7684\u5f00\u59cb\uff0c\u5979\u751f\u4e0b\u4e86\u4e00\u4e2a\u5a74\u513f\u3002 CNBC \u5468\u56db\u83b7\u5f97\u4e86\u5411\u5723\u9a6c\u7279\u5965\u53bf\u8bb0\u5f55\u5458\u529e\u516c\u5ba4\u63d0\u4ea4\u7684\u8bb0\u5f55\uff0c\u663e\u793a\u798f\u5c14\u6469\u65af\u548c\u5979\u7684\u642d\u6863\u6bd4\u5229\u57c3\u6587\u65af\u4e8e 7 \u6708 10 \u65e5\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7ea2\u6749\u57ce\u7684\u7ea2\u6749\u533b\u9662\u751f\u4e86\u4e00\u4e2a\u5b69\u5b50\u3002\u798f\u5c14\u6469\u65af\u7684\u5176\u4e2d\u4e00\u540d\u5f8b\u5e08\u827e\u7c73\u00b7\u8428\u54c8\u91cc\u4e9a (Amy Saharia) \u62d2\u7edd\u5bf9\u8fd9\u4e00\u6d88\u606f\u53d1\u8868\u8bc4\u8bba\u3002\u5ba1\u5224\u539f\u5b9a\u4e8e 7 \u6708\u5f00\u59cb\uff0c\u4f46\u56e0\u6000\u5b55\u63a8\u8fdf\u5230 8 \u6708 31 \u65e5\u3002\u798f\u5c14\u6469\u65af\u9762\u4e34\u4e5d\u9879\u7535\u6c47\u6b3a\u8bc8\u7f6a\u540d\u548c\u4e24\u9879\u4e32\u8c0b\u7535\u6c47\u6b3a\u8bc8\u7f6a\u540d\u3002\u68c0\u5bdf\u5b98\u6307\u63a7\u798f\u5c14\u6469\u65af\u5c31\u5176\u516c\u53f8\u7684\u8840\u6db2\u68c0\u6d4b\u6280\u672f\u6b3a\u9a97\u4e86\u6295\u8d44\u8005\u3001\u60a3\u8005\u548c\u533b\u751f\u3002\u5979\u5df2\u4e0d\u8ba4\u7f6a\u3002 NBC \u65b0\u95fb\u6cd5\u5f8b\u5206\u6790\u5e08\u4e39\u5c3c\u00b7\u585e\u74e6\u6d1b\u65af (Danny Cevallos) \u8bf4\uff1a\u201c\u4f5c\u4e3a\u4e00\u540d\u65b0\u5988\u5988\uff0c\u5979\u53ea\u80fd\u5f97\u5230\u966a\u5ba1\u5458\u7684\u540c\u60c5\u3002\u201d \u201c\u5982\u679c\u88ab\u5b9a\u7f6a\uff0c\u5373\u4f7f\u5979\u7684\u91cf\u5211\u6307\u5357\u8981\u6c42\u76d1\u7981\uff0c\u5979\u7684\u5f8b\u5e08\u4e5f\u4f1a\u5c06\u5979\u7684\u6bcd\u6027\u7f6e\u4e8e\u6cd5\u5b98\u9762\u524d\u548c\u4e2d\u5fc3\u4f4d\u7f6e\u3002\u201d\u5728\u4e0a\u4e2a\u6708\u63a5\u53d7 CNBC \u91c7\u8bbf\u65f6\uff0c\u6253\u7834 Theranos \u4e11\u95fb\u7684\u524d\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u8bb0\u8005\u7ea6\u7ff0\u00b7\u5361\u96f7\u9c81 (John Carreyrou) \u8868\u793a\uff0c\u4ed6\u66fe\u4e0e\u4e0e\u6b64\u6848\u6709\u5173\u7684\u4eba\u4ea4\u8c08\u8fc7\uff0c\u6709\u4e9b\u4eba\u201c\u8ba4\u4e3a\u5979\u5728\u4e3a\u81ea\u5df1\u7684\u6000\u5b55\u8ba1\u65f6\uff0c\u4ee5\u4fbf\u5728\u5ba1\u5224\u671f\u95f4\u9732\u9762\u83b7\u5f97\u966a\u5ba1\u56e2\u7684\u540c\u60c5\u3002\u201d\n\u201c\u5982\u679c\u4f0a\u4e3d\u838e\u767d\u88ab\u5224\u6709\u7f6a\uff0c\u6848\u4ef6\u63d0\u4ea4\u6cd5\u5b98\u5ba3\u5224\uff0c\u5982\u679c\u4ed6\u628a\u5979\u9001\u8fdb\u76d1\u72f1\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u4ed6\u5c31\u4f1a\u5265\u593a\u5b69\u5b50\u7684\u6bcd\u4eb2\u591a\u5e74\uff0c\u201d\u5361\u96f7\u9c81\u8bf4\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u91cd\u5927\u7684\u51b3\u5b9a\u3002\u201d\u8fd9\u4e0d\u662f\u798f\u5c14\u6469\u65af\u5bb6\u65cf\u552f\u4e00\u7684\u5a74\u513f\u6d88\u606f\u3002\u6839\u636e\u8fd9\u5bf9\u592b\u5987\u7684\u5728\u7ebf\u767b\u8bb0\uff0c\u5979\u7684\u5144\u5f1f\u514b\u91cc\u65af\u8482\u5b89\uff08Christian\uff09\u548c\u4ed6\u7684\u59bb\u5b50\u4e5f\u5728 Theranos \u5de5\u4f5c\uff0c\u4ed6\u4eec\u5c06\u5728 9 \u6708\u8fce\u6765\u4e00\u4e2a\u5b69\u5b50\u3002", "note_en": "Embattled Theranos founder Elizabeth Holmes has given birth to a baby, according to a birth certificate seen by CNBC.\n Holmes is facing a dozen felony counts of wire fraud over her defunct Silicon Valley startup. Her pregnancy delayed the start of her trial.\n Theranos founder Elizabeth Holmes, whose pregnancy delayed the start of her upcoming fraud trial, has given birth to a baby.\n Records filed with the San Mateo County Recorder office, obtained by CNBC on Thursday, reveal Holmes and her partner, Billy Evans, had a baby on July 10 at Sequoia Hospital in Redwood City, California.\n  One of Holmes&#39; attorneys, Amy Saharia, declined to comment on the news.  The trial was originally scheduled to begin in July, but was pushed back to August 31 due to her pregnancy. Holmes faces nine counts of wire fraud and two counts of conspiracy to commit wire fraud. Prosecutors allege Holmes deceived investors, patients and doctors about her company&#39;s blood testing technology. She has pleaded not guilty.\n  &#34;Being a new mother can only help get her sympathy from jurors,&#34; NBC news Legal Analyst Danny Cevallos, said.\u00a0&#34;If convicted, even if her sentencing guidelines call for incarceration, her attorneys will place her motherhood front and central before the judge.&#34;\n In an interview with CNBC last month, John Carreyrou, the former Wall Street Journal reporter who broke the Theranos scandal, said he spoke to people tied to the case and some &#34;think that she was timing her pregnancy in order to be showing during the trial to get the jury sympathies.&#34;\n &#34;If Elizabeth is convicted and the case goes to the judge for sentencing, if he sends her to prison for a long time he&#39;d be depriving the child of his or her mother for many years,&#34; Carreyrou said. &#34;And that&#39;s a heavy decision to make.&#34;\n This isn&#39;t the only baby news for the Holmes family. Her brother Christian, who also worked at Theranos, and his wife are expecting a child in September, according to the couple&#39;s online registry.", "posttime": "2021-08-06 12:06:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u798f\u5c14\u6469\u65af,holmes,theranos", "title": "\u4f0a\u4e3d\u838e\u767d\u00b7\u798f\u5c14\u6469\u65af (Elizabeth Holmes) \u5728 Theranos \u6b3a\u8bc8\u6848\u5ba1\u5224\u4e34\u8fd1\u4e4b\u9645\u5206\u5a29", "title_en": "Elizabeth Holmes gives birth as Theranos fraud trial nears", "transed": 1, "url": "https://www.cnbc.com/2021/08/06/elizabeth-holmes-gives-birth-as-theranos-fraud-trial-nears.html", "via": "", "real_tags": ["\u798f\u5c14\u6469\u65af", "holmes", "theranos"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071708, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5929\u771f\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u5e76\u4e0d\u662f\u7279\u522b\u56f0\u96be\u3002\u8fd9\u91cc\u7684\u6311\u6218\u662f\u50cf\u7f16\u5199\u6279\u5904\u7406\u67e5\u8be2\u4e00\u6837\u5b9e\u73b0\u5b83\uff0c\u4f46\u8981\u4ee5\u8fd9\u6837\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4f8b\u5982 materialize \u6216 dida \u4e4b\u7c7b\u7684\u589e\u91cf\u7cfb\u7edf\u53ef\u4ee5\u5728\u65b0\u7f16\u8f91\u5230\u8fbe\u65f6\u6709\u6548\u5730\u66f4\u65b0\u7ed3\u679c\u3002\u4e0d\u662f\u56e0\u4e3a\u8fd9\u6bb5\u4ee3\u7801\u672c\u8eab\u7279\u522b\u6709\u7528\uff0c\u800c\u662f\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u53d1\u73b0\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u89e3\u51b3\u54ea\u4e9b\u7c7b\u578b\u7684\u95ee\u9898\u7684\u754c\u9650\u3002\u8be5\u7ec3\u4e60\u6709\u70b9\u50cf GPU \u7f16\u7a0b\uff0c\u56e0\u4e3a\u907f\u514d\u987a\u5e8f\u7b97\u6cd5\u548c\u5171\u4eab\u53ef\u53d8\u6570\u636e\u7ed3\u6784\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u5730\u5c06\u95ee\u9898\u7684\u5b9e\u9645\u57fa\u672c\u6570\u636e\u4f9d\u8d56\u9879\u4e0e\u5178\u578b\u7f16\u7a0b\u6280\u672f\u610f\u5916\u5f15\u5165\u7684\u6570\u636e\u4f9d\u8d56\u9879\u5206\u5f00\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u7f16\u8f91\u6811\uff0c\u6bcf\u4e2a\u7f16\u8f91\u90fd\u4ee3\u8868\u4e00\u4e2a\u5b57\u7b26\u7684\u63d2\u5165\u3002\u6bcf\u4e2a\u7f16\u8f91\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 id\uff0c\u4e3a\u4e86\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u5c06\u8bf4\u5b83\u53ea\u662f\u4e00\u4e2a\u6574\u6570\u3002\u6bcf\u4e2a\u5176\u4ed6\u7f16\u8f91\u90fd\u6709\u4e00\u4e2a\u7236\u7f16\u8f91\u3002\u7f16\u8f91\u7684 id \u603b\u662f\u5927\u4e8e\u5176\u7236\u7ea7\u7684 id\u3002\u4e3a\u4e86\u6784\u5efa\u5b9e\u9645\u7684\u6587\u672c\uff0c\u6211\u4eec\u91c7\u7528\u8fd9\u68f5\u7f16\u8f91\u6811\uff0c\u6309 id \u5bf9\u6bcf\u4e2a\u7f16\u8f91\u7684\u5b50\u9879\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u6811\u8fdb\u884c\u9884\u5e8f\u904d\u5386\u3002\u521b\u5efa\u8868\u7f16\u8f91\uff08id \u6574\u6570\uff0cparent_id \u6574\u6570\uff0c\u5b57\u7b26\u6587\u672c\uff09\uff1b\u63d2\u5165\u7f16\u8f91\u503c\uff08 0 \uff0c null \uff0c &#39;a&#39; \uff09\uff1b\u63d2\u5165\u7f16\u8f91\u503c ( 1 , 0 , &#39;b&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 2 , 0 , &#39;e&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 3 , 1 , &#39;c&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 4 , 1 , &#39;d&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 5 , 2 , &#39;f&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 6 , 5 , &#39;g&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 7 , 5 , &#39;h&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 8 , 5 , &#39;i&#39; );\n\u9274\u4e8e\u6211\u4eec\u6b63\u5728\u5c1d\u8bd5\u5bf9\u8fd9\u7ec4\u7f16\u8f91\u8fdb\u884c\u6392\u5e8f\uff0c\u81ea\u7136\u7684\u53cd\u5e94\u662f\u4ece\u4ee5\u4e0b\u5185\u5bb9\u5f00\u59cb\uff1a\u4f46\u6211\u4eec\u7acb\u5373\u9677\u5165\u56f0\u5883\uff0c\u56e0\u4e3a\u6ca1\u6709\u660e\u663e\u7684\u6392\u5e8f\u952e\u3002\u8ba9\u6211\u4eec\u51b3\u5b9a\u4e00\u4e2a\u7f16\u8f91\u5e94\u8be5\u5728\u53e6\u4e00\u4e2a\u7f16\u8f91\u4e4b\u524d\u8fd8\u662f\u4e4b\u540e\u7684\u4fe1\u606f\u9690\u542b\u5728\u6811\u7684\u5f62\u72b6\u4e2d\u3002\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u5b9e\u9645\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u5305\u542b\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u3002\u9012\u5f52\u8def\u5f84 (id, path , character) as ( select edits . id , edits . id , edits . character from edits where edits . parent_id is null union all select child . id , parent . path || &#39;,&#39; || child . id , child . character from edits as child, path as parent where child . parent_id = parent . id ) select * from path order by path \u3002\u5c0f\u8def ;\u8fd9\u5c31\u662f\u95ee\u9898\u7684\u672c\u8d28 - \u6309\u7167\u4ece\u6839\u76ee\u5f55\u5f00\u59cb\u7684\u8def\u5f84\u4e2d\u7684 id \u5bf9\u7f16\u8f91\u8fdb\u884c\u6392\u5e8f\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5bf9\u4e8e\u5e73\u8861\u826f\u597d\u7684\u6811\u6728\uff0c\u8fd9\u5c06\u662f\u6545\u4e8b\u7684\u7ed3\u5c3e\u3002\u4f46\u662f\u7528\u4e8e\u6587\u672c\u7f16\u8f91 crdt \u7684\u6811\u5f80\u5f80\u975e\u5e38\u6df1\u548c\u72ed\u7a84\uff0c\u56e0\u6b64\u5b9e\u73b0\u8fd9\u4e9b\u8def\u5f84\u5c06\u4f7f\u5b58\u50a8\u6210\u672c\u770b\u8d77\u6765\u50cf O(N\u00b2)\u3002 \uff08\u5728\u5178\u578b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53ea\u67e5\u770b\u5177\u6709\u591a\u4e2a\u5b69\u5b50\u7684\u8def\u5f84\u7684\u4e00\u90e8\u5206\u6765\u51cf\u5c11\u8fd9\u4e00\u70b9\u3002\u4f46\u6700\u574f\u7684\u60c5\u51b5\u4ecd\u7136\u662f O(N\u00b2)\uff09\u5728\u5927\u591a\u6570\u8bed\u8a00\u4e2d\uff0c\u5982\u679c\u663e\u5f0f\u5b58\u50a8\u5bc6\u94a5\u592a\u6602\u8d35\uff0c\u6211\u4eec\u53ea\u662f\u4f7f\u7528\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u8fdb\u884c\u6392\u5e8f\u3002\u521b\u5efa\u51fd\u6570 compare_edits (id1 integer , id2 integer ) \u5c06\u6bd4\u8f83\u8fd4\u56de\u4e3a ???;\u901a\u8fc7\u6bd4\u8f83 compare_edits( edit . id ) \u4ece\u7f16\u8f91\u987a\u5e8f\u4e2d\u9009\u62e9 *\uff1b\n\u589e\u91cf\u7ef4\u62a4\u8fd9\u6837\u7684\u6392\u5e8f\u8fd0\u7b97\u7b26\u4f1a\u5f88\u68d8\u624b\u3002\u53ef\u80fd\u5fc5\u987b\u663e\u5f0f\u5b58\u50a8\u4e00\u7ec4\u6bd4\u8f83\u3002\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u5982\u4f55\u4ee5\u4e00\u79cd\u4f7f\u6240\u9700\u7684\u6bd4\u8f83\u96c6\u76f8\u5bf9\u4e8e\u8f93\u5165\u7684\u5fae\u5c0f\u53d8\u5316\u4fdd\u6301\u7a33\u5b9a\u7684\u65b9\u5f0f\u9009\u62e9\u652f\u70b9\u5e76\u4e0d\u660e\u663e\u3002\u4f46\u5b83\u53ef\u80fd\u662f\u53ef\u80fd\u7684\u3002\u5982\u679c\u4f7f\u7528\u5185\u7f6e\u7684\u6392\u5e8f\u8fd0\u7b97\u7b26\u4e0d\u53ef\u884c\uff0c\u4e5f\u8bb8\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u663e\u5f0f\u904d\u5386\u6811\u3002 with recursiverightmost_child(id, parent_id) as ( select max (id), edit . parent_id from edit where edit . parent_id is not null group by parent_id),rightmost_descendant(id, child_id) as ( select id, id from edit union select parent . parent_id , child . child_id \u4ece rightmost_child \u4e3a\u7236\u7ea7\uff0c rightmost_descendant \u4e3a child where parent . id = child . id ),rightmost_leaf(id, Leaf_id) as ( select id, max (child_id) as leaf_id from rightmost_descendant group by id),prev_sibling(id) , prev_id) as ( select edit . id , ( select max (sibling . id ) from edit as mirror where edit . parent_id = mirror . parent_id and edit . id &gt; mirror . id ) as prev_id from edit where prev_id is not null ), prev_edit(id, prev_id) as ( -- \u6ca1\u6709\u4e0a\u4e00\u4e2a\u5144\u5f1f\u59d0\u59b9\u7684\u7f16\u8f91\u5728\u4ed6\u4eec\u7684\u7236\u7ea7\u4e4b\u540e\u9009\u62e9 edit . id , edit . parent_id from edit where prev_sibling where prev_sibling . id = edit . id ) union all - - \u5176\u4ed6\u7f16\u8f91\u51fa\u73b0\u5728\u4ed6\u4eec\u4e0a\u4e00\u4e2a\u5144\u5f1f\u9009\u62e9\u7f16\u8f91\u7684\u6700\u53f3\u8fb9\u7684\u53f6\u5b50\u4e4b\u540e. id \uff0c rightmost_leaf \u3002 Leaf_id \u6765\u81ea edit\u3001prev_sibling\u3001rightmost_leaf\uff0c\u5176\u4e2d edit \u3002 id = prev_sibling \u3002 id \u548c prev_sibling \u3002 prev_id = rightmost_leaf \u3002 id ),position(id, position, character) as ( -- root is at position 0 select edit . id , 0 , edit . character from edit where edit . parent_id is null union all -- \u6240\u6709\u5176\u4ed6\u7f16\u8f91\u90fd\u5728\u4ed6\u4eec\u4e0a\u4e00\u6b21\u7f16\u8f91\u4e4b\u540eselect edit . id , position . position + 1 , edit . character from edit, prev_edit, position where edit . id = prev_edit . id and prev_edit . prev_id = position . id ) select * from position order by position .\u4f4d\u7f6e ;\u8ba9\u5144\u5f1f=\u7f16\u8f91\uff08\uff1f\u7f16\u8f91\u3002\u7f16\u8f91\u3002\uff08\u7f16\u8f91\u7236~\u7236\uff09\uff09\u5165\u53e3rightmost_child =\u7f16\u8f91\uff08\uff1f\u7f16\u8f91\u3002\u7f16\u8f91\u3002\uff08\u6700\u5927[\u7f16\u8f91~\u7236]\uff09\uff09\u5165\u53e3rightmost_leaf=\u4fee\u590d\uff08\u7f16\u8f91\uff08\uff1f\u7f16\u8f91\u3002\u7f16\u8f91\u3002\u7f16\u8f91\uff09 ) (?[rightmost_leaf] . (rightmost_leaf (?edit . ?leaf .edit . (max [leaf | (leaf rightmost_child)]))))) \u5165\u53e3prev = edits (?edit .edit .let prev_siblings = (edit\u5144\u5f1f) ( ?sibling . (when (edit &gt;sibling)sibling)) in if !!prev_siblings (max [prev_siblings] rightmost_leaf) (edit parent)) \u5165\u53e3\u4f4d\u7f6e = fix (root . 0) (?[position] . (position | (position) (?edit . ?pos . (edit ~prev) . (pos + 1))))) inedits (?edit . (edit position) .edit . (edit character)) \u5728\u4efb\u4f55\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u53ef\u80fd\u4e0d\u5f97\u4e0d\u81f3\u5c11\u7ef4\u62a4\u4e00\u4e2a\u5173\u4e8e parent\u3001~parent \u548c character \u7684\u7d22\u5f15\uff0c\u53ef\u80fd\u8fd8\u6709\u8bb8\u591a\u4e2d\u95f4\u7ed3\u679c\u7684\u7d22\u5f15\u3002\u6709\u70b9\u4ee4\u4eba\u62c5\u5fe7\u7684\u662f\uff0c\u4ece\u4ee3\u7801\u4e2d\u6839\u672c\u65e0\u6cd5\u9884\u6d4b\u8fd9\u4e9b\u5c06\u662f\u4ec0\u4e48\u4ee5\u53ca\u5b83\u4eec\u5c06\u82b1\u8d39\u591a\u5c11\u3002\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0cprev \u7684\u8f93\u51fa\u975e\u5e38\u7a33\u5b9a\uff0c\u56e0\u6b64\u5e94\u8be5\u5141\u8bb8\u5408\u7406\u6709\u6548\u7684\u589e\u91cf\u7ef4\u62a4\u3002\u4f46\u662f\u4f4d\u7f6e\u8f93\u51fa\u7684\u5f88\u5927\u4e00\u90e8\u5206\u4f1a\u5728\u6bcf\u6b21\u65b0\u7f16\u8f91\u65f6\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u7ef4\u62a4\u8d77\u6765\u6548\u7387\u4f4e\u4e0b\u3002\u8fd9\u662f\u56e0\u4e3a prev \u9690\u5f0f\u8868\u793a\u6392\u5e8f\uff0c\u5c31\u76f8\u90bb\u7f16\u8f91\u4e4b\u95f4\u7684\u76f8\u5bf9\u6392\u5e8f\u800c\u8a00\uff0c\u800c position \u901a\u8fc7\u5bf9\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u7f16\u53f7\u6765\u663e\u5f0f\u8868\u793a\u6392\u5e8f\u3002\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6bcf\u4e2a\u65b0\u7684\u7f16\u8f91\u53ea\u6539\u53d8\u5b83\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u7f16\u8f91\u7684 prev \u503c\uff0c\u4f46\u589e\u52a0\u5b83\u53f3\u8fb9\u7684\u6bcf\u4e2a\u7f16\u8f91\u7684\u4f4d\u7f6e\u7f16\u53f7\u3002\n\u6211\u4eec\u4ece\u4e00\u4e2a\u7a7a\u5e8f\u5217\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u5728\u5176\u4e2d\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u5b58\u50a8\u7f16\u8f91\u3002\u5bf9\u4e8e\u6bcf\u6b21\u7f16\u8f91\uff0c\u6211\u4eec\u901a\u8fc7\u9996\u5148\u626b\u63cf\u5e8f\u5217\u627e\u5230\u5b83\u7684\u7236\u7ea7\uff0c\u7136\u540e\u5411\u53f3\u626b\u63cf\u627e\u5230\u6b63\u786e\u7684\u70b9\u63d2\u5165\u5b50\u7ea7\u6765\u5c06\u5176\u63d2\u5165\u5230\u5e8f\u5217\u4e2d\u3002\u5982\u679c\u5e8f\u5217\u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a b \u6811\uff0c\u90a3\u4e48\u8fd9\u4e9b\u626b\u63cf\u548c\u63d2\u5165\u662f\u76f8\u5f53\u4fbf\u5b9c\u7684\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u8ddf\u8e2a b \u6811\u6bcf\u4e2a\u5206\u652f\u4e2d\u7684\u5b57\u7b26\u6570\uff0c\u4ee5\u4fbf\u901a\u8fc7\u6cbf\u7740 b \u6811\u7684\u4e3b\u5e72\u8d70\u4e0b\u53bb\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u56de\u7b54\u8bf8\u5982\u201c\u7b2c 142 \u4e2a\u5b57\u7b26\u7684\u7f16\u8f91 ID \u662f\u4ec0\u4e48\u201d\u4e4b\u7c7b\u7684\u67e5\u8be2\u3002\u547d\u4ee4\u5f0f\u89e3\u51b3\u65b9\u6848\u6839\u636e\u67d0\u4e9b\u6709\u5e8f\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u4f4d\u7f6e\u9690\u5f0f\u8868\u793a\u6392\u5e8f\u3002\u5728\u6570\u636e\u7ed3\u6784\u7684\u5f00\u5934\u9644\u8fd1\u63d2\u5165\u65b0\u7f16\u8f91\u4e0d\u9700\u8981\u663e\u5f0f\u66f4\u65b0\u6bcf\u4e2a\u540e\u9762\u5143\u7d20\u7684\u4f4d\u7f6e - \u8be5\u4f4d\u7f6e\u9690\u542b\u5728\u6574\u4e2a\u7ed3\u6784\u4e2d\u3002\u4f7f\u7528\u9012\u5f52\u5e8f\u5217(last_id, characters, ids) as ( select edit . id , edit . character , array[ edit . id ] from edit where edit . parent_id is null union all select edit . id , -- insert edit.character and edit .id at insert_point substring ( sequence . characters , 1 , insert_point . insert_point - 1 ) || edit . character || substring ( sequence . characters , insert_point . insert_point ), sequence . ids [ 1 : insert_point . insert_point - 1 ] ||\u7f16\u8f91 . id || \u5e8f\u5217 . ids [ \u63d2\u5165\u70b9 . \u63d2\u5165\u70b9 :] \u6765\u81ea\u5e8f\u5217\uff0c\u7f16\u8f91\u8fde\u63a5\u6a2a\u5411\uff08\u9009\u62e9\u5408\u5e76\uff08\u5206\u949f\uff08i\uff09\uff0c\u6570\u7ec4\u957f\u5ea6\uff08\u5e8f\u5217\u3002ids\uff0c1\uff09+ 1\uff09\u4f5c\u4e3a\u63d2\u5165\u70b9\u6765\u81ea\u751f\u6210\u4e0b\u6807\uff08\u5e8f\u5217\u3002ids\uff0c1 ) as i -- \u4fa7\u5411\u7f16\u8f91\u8fde\u63a5\u7684\u7236\u7ea7\u7684\u6570\u7ec4\u626b\u63cf\uff08\u4ece generate_subscripts( sequence . ids , 1 ) \u4e2d\u9009\u62e9 j \u4f5c\u4e3a j where sequence . ids [j] = edit . parent_id ) as parent_ix on true -- \u5bf9\u7236\u7ea7\u7684\u6570\u7ec4\u626b\u63cfids[i] \u52a0\u5165\u6a2a\u5411\uff08\u4ece generate_subscripts( sequence . ids , 1 ) \u4e2d\u9009\u62e9 k\u4f5c\u4e3a k\uff0c\u7f16\u8f91\u4e3a o_edit \u5176\u4e2d\u5e8f\u5217\u3002 ids [k] = o_edit \u3002 parent_id \u548c\u5e8f\u5217\u3002 ids [i] = o_edit \u3002 id ) as o_parent_ix on true - \u627e\u5230 i &gt; parent_ix \u7684\u63d2\u5165\u70b9\u3002 j \u548c o_parent_ix \u3002 k &lt; parent_ix \u3002 j) \u4f5c\u4e3a\u5bf9 true where \u5e8f\u5217\u7684\u63d2\u5165\u70b9\u3002 last_id + 1 = \u7f16\u8f91\u3002 id ) select * from sequence order by last_id desclimit 1 ; Imp \u6ca1\u6709\u4efb\u4f55\u5e8f\u5217\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a\u6709\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\uff0c\u81f3\u5c11\u770b\u770b\u4ee3\u7801\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u3002 // \u5904\u7406\u201c\u6570\u7ec4\u201d\u7684\u51fd\u6570let insert = ?[sequence] . \uff1f\u4f4d\u7f6e \u3002 \uff1f\u7269\u54c1 \u3002\u8ba9 old = \u5e8f\u5217 (?old_position . ?old_item . (if (old_position &gt;= position) (old_position + 1) old_position) . old_item ) in old | (position . item)inlet find_min_pos = ?[sequence] \u3002 \uff1f[\u6761\u4ef6] \u3002 ( let found = sequence (?pos . ?edit . (when (cond pos edit) pos)) in min [found] ) in// \u5b9e\u9645 crdt codelet sequence = fix (0 . root) (?[sequence] . let next_edit = 1 + (max [sequence (?pos . ?edit .edit)]) in if !(edits next_edit) \u5e8f\u5217 let parent_pos = find_min_pos [sequence] [?pos . ?edit . ((next_edit parent) = edit)] \u5728let insert_point = find_min_pos [sequence] [?o_pos . ?o_edit . ( let o_parent_pos = find_min_pos [sequence] [?pos . ?edit . ((o_edit parent) = edit)] in (o_pos &gt; parent_pos) &amp; (parent_pos &gt; o_parent_pos) )] in insert [sequence] (if !!insertion_point inserting_point (max [sequence (?pos . ?edit . pos)])) next_edit ) insequence (?pos . ?edit . pos .edit . (edit character))\n\u8fd9\u4f7f\u5f53\u524d\u8e69\u811a\u7684\u89e3\u91ca\u5668\u5c48\u670d\uff0c\u4f46\u6211\u8ba4\u4e3a\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u5b83\u3002\u5bf9\u4e8e sql \u548c imp \u7248\u672c\uff0c\u4f3c\u4e4e\u53ef\u4ee5\u9010\u6b65\u7ef4\u62a4\u8fd9\u4e00\u70b9\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u6301\u4e45\u6570\u636e\u7ed3\u6784\u6765\u5b9e\u73b0\u6570\u7ec4\uff0c\u90a3\u4e48\u63d2\u5165\u4e0d\u4f1a\u592a\u6602\u8d35\u3002\u5982\u679c\u6211\u4eec\u63d0\u793a\u8fd0\u884c\u65f6\u4e0d\u4f1a\u5220\u9664\u4efb\u4f55\u7f16\u8f91\u5e76\u4e14\u65b0\u7f16\u8f91\u7684 id \u7f16\u53f7\u4f1a\u589e\u52a0\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u63a8\u65ad\u5b83\u4e0d\u9700\u8981\u5b58\u50a8\u6570\u7ec4\u7684\u65e7\u503c\uff08\u53c2\u89c1\u4f8b\u5982 edelweiss\uff09\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u5b8c\u5168\u5076\u7136\u7684\u987a\u5e8f\u4f9d\u8d56\uff0c\u5931\u53bb\u4e86\u5229\u7528\u5e76\u884c\u6027\u6216\u77e2\u91cf\u5316\u7684\u80fd\u529b\uff0c\u4e5f\u5931\u53bb\u4e86\u5904\u7406\u4e71\u5e8f\u7f16\u8f91\u7684\u80fd\u529b\u3002\u4efb\u4f55\u4e0b\u6e38\u4ee3\u7801\u7684\u589e\u91cf\u7ef4\u62a4\u53ef\u80fd\u9700\u8981\u80fd\u591f\u533a\u5206\u5e8f\u5217\u7684\u8fde\u7eed\u7248\u672c\u3002\u8be5\u5e8f\u5217\u6309\u4e00\u4e2a\u952e\u8fdb\u884c\u6392\u5e8f\uff0c\u8be5\u952e\u5b9e\u73b0\u751a\u81f3\u6bd4\u8f83\u7684\u6210\u672c\u90fd\u5f88\u9ad8\u3002\u5feb\u901f\u547d\u4ee4\u5f0f\u89e3\u51b3\u65b9\u6848\u4f9d\u8d56\u4e8e\u4e0d\u9002\u5408\u589e\u91cf\u7ef4\u62a4\u7684\u5de7\u5999\u9690\u5f0f\u6bd4\u8f83\u3002\u867d\u7136\u7f16\u8f91\u7684\u76f8\u5bf9\u987a\u5e8f\u662f\u7a33\u5b9a\u7684\uff08\u4f8b\u5982\uff0c\u5982\u679c id=4 \u51fa\u73b0\u5728 id=12 \u4e4b\u524d\uff0c\u90a3\u4e48\u5b83\u603b\u662f\u5728\u5b83\u4e4b\u524d\uff09\uff0c\u4f46\u7edd\u5bf9\u4f4d\u7f6e\u975e\u5e38\u4e0d\u7a33\u5b9a\uff08\u5982\u679c\u63d2\u5165\u65b0\u7684\u7f16\u8f91\uff0c\u5219\u5fc5\u987b\u589e\u52a0\u5176\u540e\u6240\u6709\u5185\u5bb9\u7684\u4f4d\u7f6e\uff09\u3002\u56e0\u6b64\uff0c\u7edd\u5bf9\u4f4d\u7f6e\u7684\u4efb\u4f55\u660e\u786e\u8868\u793a\u90fd\u5c06\u5bfc\u81f4\u4e0b\u6e38\u5927\u91cf\u6d41\u5931\u3002\u540e\u4e00\u4e2a\u95ee\u9898\u5e76\u4e0d\u662f\u5173\u7cfb\u8bed\u8a00\u72ec\u6709\u7684\u2014\u2014\u7a33\u5b9a\u7684 id \u662f\u4efb\u4f55\u589e\u91cf\u7ef4\u62a4\u95ee\u9898\u7684\u6838\u5fc3\uff08\u4f8b\u5982\uff0c\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u7684\u589e\u91cf\u7b97\u6cd5\u901a\u5e38\u4f9d\u8d56\u4e8e\u6307\u5411\u6811\u8282\u70b9\u7684\u6307\u9488\u800c\u4e0d\u662f\u5b57\u7b26\u4f4d\u7f6e\uff09\u3002\u5173\u7cfb\u8bed\u8a00\u7684\u96be\u70b9\u5728\u4e8e\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6307\u9488\u6807\u8bc6\u4f5c\u4e3a id\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u4e25\u683c\u7ea6\u675f\u7684\u6267\u884c\u987a\u5e8f\u3002\u4e5f\u8bb8\u4e00\u79cd\u9009\u62e9\u662f\u62e5\u6709\u4e00\u4e2a\u4e0b\u964d\u5230\u63d2\u5165\u548c\u5220\u9664\u7ea7\u522b\u7684\u9003\u751f\u8231\u53e3\u3002\u5728\u90a3\u4e2a\u7ea7\u522b\uff0c\u6211\u4eec\u53ef\u4ee5\u57fa\u4e8e\u64cd\u4f5c\u5386\u53f2\u6784\u5efa\u7a33\u5b9a\u7684 id\uff0c\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u6811\u8282\u70b9\u4f5c\u4e3a\u5e8f\u5217\u4e2d\u7684 id\u3002\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u5728\u58f0\u660e\u5c42\u4e2d\u65e0\u6cd5\u89c2\u5bdf\u5230 id \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4ee5\u4fbf\u63d2\u5165/\u5220\u9664\u7684\u987a\u5e8f\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u3002\n\u6211\u7684\u5de5\u4f5c\u76ee\u524d\u662f\u901a\u8fc7\u4e0e\u5728 github \u4e0a\u8d5e\u52a9\u6211\u7684\u4eba\u5206\u4eab\u60f3\u6cd5\u548c\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u6765\u8d44\u52a9\u7684\u3002", "note_en": "Doing this naively isn&#39;t particularly hard. The challenge here is to implement it as if writing a batch query, but in such a way that an incremental system like  materialize or  dida can efficiently update the result when new edits arrive. Not because this code would be particularly useful in itself, but because it helps discover the boundaries of what kinds of problems are possible to solve in this way.\n The exercise is a little like GPU programming, in that avoiding sequential algorithms and shared mutable data-structures requires very carefully separating the actual essential data dependencies of the problem from those accidentally introduced by typical programming techniques.\n   We have a tree of edits, each of which represents the insert of a single character.\n  Each edit has a unique id, which for the purpose of this simple example we&#39;ll say is just an integer.\n  Every other edit has a parent edit. The id of an edit is always greater than the id of its parent.\n To construct the actual text we take this tree of edits, sort the children of each edit by id, and then do an pre-order traversal of the tree.\n    create table  edit (id  integer , parent_id  integer , character  text ); insert into  edit  values  ( 0 ,  null ,  &#39;a&#39; ); insert into  edit  values  ( 1 ,  0 ,  &#39;b&#39; ); insert into  edit  values  ( 2 ,  0 ,  &#39;e&#39; ); insert into  edit  values  ( 3 ,  1 ,  &#39;c&#39; ); insert into  edit  values  ( 4 ,  1 ,  &#39;d&#39; ); insert into  edit  values  ( 5 ,  2 ,  &#39;f&#39; ); insert into  edit  values  ( 6 ,  5 ,  &#39;g&#39; ); insert into  edit  values  ( 7 ,  5 ,  &#39;h&#39; ); insert into  edit  values  ( 8 ,  5 ,  &#39;i&#39; );\n Given that we&#39;re trying to sort this set of edits, the natural reaction would be to start with something like:\n  But we&#39;re immediately stuck because there isn&#39;t an obvious sort key. The information that lets us decide whether one edit should become before or after another edit is implicit in the shape of the tree. To get an actual value to sort by, we would need to include all that information.\n with  recursive  path (id,  path , character)  as  (  select  edits . id ,  edits . id ,  edits . character  from  edits  where  edits . parent_id  is  null  union all select  child . id ,  parent . path  ||  &#39;,&#39;  ||  child . id ,  child . character  from  edits  as  child,  path  as  parent  where  child . parent_id  =  parent . id  ) select  *  from path order by path . path ;\n  This is the essence of the problem - sorting the edits by the ids in their path from the root. It&#39;s a beautiful solution, and for nicely balanced trees this would be the end of the story. But the trees for text editing crdts tend to be very deep and narrow so materializing these paths will make the storage cost look like O(N\u00b2).\n (We could maybe cut this down in the typical case by only looking at parts of the path with more than one child. But the worst case would still be O(N\u00b2))\n  In most languages, if explicitly storing the key was too expensive we&#39;d just sort using a custom comparison function instead.\n create function  compare_edits (id1  integer , id2  integer ) returns comparison  as  ???;  select  *  from  edit  order by  comparing compare_edits( edit . id );\n  It would be tricky to incrementally maintain such a sort operator. The set of comparisons would probably have to be explicitly stored. It&#39;s not obvious to me how to pick pivots in a way that makes the set of required comparisons stable with respect to small changes in the input. But it might be possible.\n  If using the builtin sort operator is not feasible, maybe we can explicitly traverse the tree ourselves.\n  with  recursiverightmost_child(id, parent_id)  as  (  select  max (id),  edit . parent_id  from  edit  where  edit . parent_id  is not  null  group by  parent_id),rightmost_descendant(id, child_id)  as  (  select  id, id  from  edit  union select  parent . parent_id ,  child . child_id  from  rightmost_child  as  parent, rightmost_descendant  as  child  where  parent . id  =  child . id ),rightmost_leaf(id, leaf_id)  as  (  select  id,  max (child_id)  as  leaf_id  from  rightmost_descendant  group by  id),prev_sibling(id, prev_id)  as  (  select  edit . id , (  select  max ( sibling . id )  from  edit  as  sibling  where  edit . parent_id  =  sibling . parent_id  and  edit . id  &gt;  sibling . id  )  as  prev_id  from  edit  where  prev_id  is not  null ),prev_edit(id, prev_id)  as  (  -- edits that have no prev siblings come after their parent  select  edit . id ,  edit . parent_id  from  edit  where  not  exists (  select  *  from  prev_sibling  where  prev_sibling . id  =  edit . id  )  union all  -- other edits come after the rightmost leaf of their prev sibling  select  edit . id ,  rightmost_leaf . leaf_id  from  edit, prev_sibling, rightmost_leaf  where  edit . id  =  prev_sibling . id  and  prev_sibling . prev_id  =  rightmost_leaf . id ),position(id, position, character)  as  (  -- root is at position 0  select  edit . id ,  0 ,  edit . character  from  edit  where  edit . parent_id  is  null  union all  -- every other edit comes after their prev edit  select  edit . id ,  position . position  +  1 ,  edit . character  from  edit, prev_edit, position  where  edit . id  =  prev_edit . id  and  prev_edit . prev_id  =  position . id ) select  * from  position order by  position . position ;\n   let sibling = edits (?edit . edit . (edit parent ~parent)) inlet rightmost_child = edits (?edit . edit . (max [edit ~parent])) inlet rightmost_leaf = fix (edits (?edit . edit . edit)) (?[rightmost_leaf] . (rightmost_leaf (?edit . ?leaf . edit . (max [leaf | (leaf rightmost_child)])))) inlet prev = edits (?edit . edit . let prev_siblings = (edit sibling) (?sibling . (when (edit &gt; sibling) sibling)) in if !!prev_siblings (max [prev_siblings] rightmost_leaf) (edit parent)) inlet position = fix (root . 0) (?[position] . (position | (position (?edit . ?pos . (edit ~prev) . (pos + 1))))) inedits (?edit . (edit position) . edit . (edit character))\n In either case, we&#39;re likely to have to maintain at least an index on  parent,  ~parent and  character and probably also indexes for many intermediate results too. It&#39;s somewhat concerning that it&#39;s not at all predictable from the code what those will be and how much they will cost.\n In the ideal case, the output of  prev is very stable and so should admit reasonably efficient incremental maintenance. But large parts of the output of  position will change on every new edit, so it is inherently inefficient to maintain.\n This is because  prev represents the ordering implicitly, in terms of relative ordering between adjacent edits, whereas  position represents the ordering explicitly by numbering each position in the sequence. In this problem, each new edit only changes the  prev value of the first edit to its right, but increments the  position number of every edit to its right.\n   We start with an empty sequence, in which we&#39;ll store the edits in the correct order.\n  For each edit, we insert it into the sequence by first scanning the sequence to find its parent, and then scanning to the right to find the correct point to insert the child.\n If the sequence is implemented as a b-tree then these scans and inserts are fairly cheap. We can also keep track of the number of characters in each branch of the b-tree so that queries like &#34;what is the edit id for the 142nd character&#34; can be efficiently answered by walking down the spine of the b-tree.\n  The imperative solution represents the ordering implicitly in terms of position in some ordered data-structure. Inserting a new edit near the beginning of the data-structure does not require explicitly updating the position of every later element - the position is implicit in the overall structure.\n   with  recursive sequence(last_id, characters, ids)  as  (  select  edit . id ,  edit . character , array[ edit . id ]  from  edit  where  edit . parent_id  is  null  union all select  edit . id ,  -- insert edit.character and edit.id at insertion_point  substring ( sequence . characters ,  1 ,  insertion_point . insertion_point - 1 )  ||  edit . character  ||  substring ( sequence . characters ,  insertion_point . insertion_point ),  sequence . ids [ 1 : insertion_point . insertion_point - 1 ]  ||  edit . id  ||  sequence . ids [ insertion_point . insertion_point :]  from  sequence, edit  join  lateral (  select  coalesce( min (i), array_length( sequence . ids ,  1 ) + 1 )  as  insertion_point  from  generate_subscripts( sequence . ids ,  1 )  as  i  -- array scan for parent of edit  join  lateral (  select  j  from  generate_subscripts( sequence . ids ,  1 )  as  j  where  sequence . ids [j]  =  edit . parent_id )  as  parent_ix on true  -- array scan for parent of ids[i]  join  lateral (  select  k  from  generate_subscripts( sequence . ids ,  1 )  as  k, edit  as  o_edit  where  sequence . ids [k]  =  o_edit . parent_id  and  sequence . ids [i]  =  o_edit . id )  as  o_parent_ix on true  -- find insertion point  where  i  &gt;  parent_ix . j  and  o_parent_ix . k  &lt;  parent_ix . j  )  as  insertion_point on true  where  sequence . last_id  +  1  =  edit . id ) select  *  from  sequence order by  last_id  desclimit  1 ;\n  Imp doesn&#39;t have any sequence data-structure, but we can fake one with relations to at least see what the code would look like.\n // functions for working with &#39;arrays&#39;let insert = ?[sequence] . ?position . ?item . let old = sequence (?old_position . ?old_item . (if (old_position &gt;= position) (old_position + 1) old_position) . old_item ) in old | (position . item)inlet find_min_pos = ?[sequence] . ?[cond] . ( let found = sequence (?pos . ?edit . (when (cond pos edit) pos)) in min [found] ) in// actual crdt codelet sequence = fix (0 . root) (?[sequence] . let next_edit = 1 + (max [sequence (?pos . ?edit . edit)]) in if !(edits next_edit) sequence let parent_pos = find_min_pos [sequence] [?pos . ?edit . ((next_edit parent) = edit)] in let insertion_point = find_min_pos [sequence] [?o_pos . ?o_edit . ( let o_parent_pos = find_min_pos [sequence] [?pos . ?edit . ((o_edit parent) = edit)] in (o_pos &gt; parent_pos) &amp; (parent_pos &gt; o_parent_pos) )] in insert [sequence] (if !!insertion_point insertion_point (max [sequence (?pos . ?edit . pos)])) next_edit ) insequence (?pos . ?edit . pos . edit . (edit character))\n This brings the current crappy interpreter to its knees, but I think that it is possible to execute it efficiently.\n For both the sql and imp versions it seems possible to incrementally maintain this. If we use a persistent data-structure to implement the array, then the inserts are not too expensive. If we hint to the runtime that no edits will be deleted and new edits will have increasing id numbers, then it can infer that it doesn&#39;t need to store old values of the arrays (see eg  edelweiss).\n On the other hand, we&#39;ve introduced a completely incidental sequential dependency, lost the ability to take advantage of parallelism or vectorization, and lost the ability to handle out-of-order edits. And incremental maintenance of any downstream code might require the ability to diff successive versions of the sequence.\n   The sequence is sorted by a key that is expensive to materialize or even compare. Fast imperative solutions rely on clever implicit comparisons that don&#39;t lend themselves to incremental maintenance.\n While the relative ordering of edits is stable (eg if  id=4 comes before  id=12 then it will always come before it) the absolute positions are very unstable (if a new edit is inserted, the positions of everything after it must be incremented). So any explicit representation of absolute position will cause massive churn downstream.\n The latter problem isn&#39;t unique to relational languages - stable ids are at the heart of any incremental maintenance problem (eg incremental algorithms in text editors often rely on pointers to tree nodes instead of character position). What makes life difficult in relational languages is that we can&#39;t use pointer identity as an id, because that requires a strongly-constrained execution order.\n Perhaps one option is to have an escape hatch that drops down to the level of inserts and deletes. At that level we can construct stable ids based on the history of operations, in a similar fashion to using tree nodes as ids into a sequence. We just have to guarantee that the details of the ids are not observable in the declarative layer so that the order of inserts/deletes does not affect the final result.\n My work is currently funded by sharing thoughts and work in progress with people who  sponsor me on github.", "posttime": "2021-08-06 12:05:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5173\u7cfb,ordering,\u7f16\u8f91", "title": "\u5173\u7cfb\u8bed\u8a00\u4e2d\u7684\u9690\u5f0f\u6392\u5e8f", "title_en": "Implicit Ordering in Relational Languages", "transed": 1, "url": "https://scattered-thoughts.net/writing/implicit-ordering-in-relational-languages", "via": "", "real_tags": ["\u5173\u7cfb", "ordering", "\u7f16\u8f91"]}, {"category": "", "categoryclass": "", "imagename": "ac1360095041925da55ebd2e07828d0b.jpg", "infoid": 1071706, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5185\u5bb9\u4ea4\u4ed8\u7f51\u7edc\u516c\u53f8 Cloudflare Inc. \u7684\u80a1\u7968\u5728\u4eca\u5929\u7684\u76d8\u540e\u4ea4\u6613\u4e2d\u4e0b\u8dcc\uff0c\u6b64\u524d\u6295\u8d44\u8005\u5bf9\u8be5\u516c\u53f8\u7684\u8282\u62cd\u89c4\u6a21\u6ca1\u6709\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u3002\u5728\u622a\u81f3 6 \u6708 30 \u65e5\u7684\u5b63\u5ea6\u4e2d\uff0cCloudflare \u62a5\u544a\u7684\u6536\u5165\u4e3a 1.524 \u4ebf\u7f8e\u5143\uff0c\u540c\u6bd4\u589e\u957f 53%\u3002\u672c\u5b63\u5ea6\u51c0\u4e8f\u635f\u4e3a 3550 \u4e07\u7f8e\u5143\u6216\u6bcf\u80a1 2 \u7f8e\u5206\uff0c\u800c 2020 \u5e74\u540c\u4e00\u5b63\u5ea6\u4e3a 2610 \u4e07\u7f8e\u5143\u6216\u6bcf\u80a1 3 \u7f8e\u5206\u3002\u5206\u6790\u5e08\u6b64\u524d\u9884\u6d4b\u6536\u5165\u4e3a 1.46 \u4ebf\u7f8e\u5143\uff0c\u6bcf\u80a1\u4e8f\u635f\u4e3a 3 \u7f8e\u5206\u3002\u672c\u5b63\u5ea6\u7684\u4eae\u70b9\u5305\u62ec Cloudflare \u7684\u590d\u5408\u5e74\u589e\u957f\u7387\u589e\u957f\u4e86 68%\uff0c\u56e0\u4e3a\u8be5\u516c\u53f8\u5c06\u5e74\u5316\u6536\u5165\u81f3\u5c11\u4e3a 100,000 \u7f8e\u5143\u7684\u5927\u5ba2\u6237\u6570\u91cf\u589e\u52a0\u5230 1,088 \u4e2a\u3002\u622a\u81f3\u672c\u5b63\u5ea6\u672b\uff0c\u8be5\u516c\u53f8\u76ee\u524d\u7ea6\u6709 19% \u7684\u5e78\u8fd0 1,000 \u5ba2\u6237\u4e3a\u4ed8\u8d39\u5ba2\u6237\u3002 Cloudflare \u5ba2\u6237\u603b\u6570\u73b0\u5728\u8d85\u8fc7 126,000\uff0c\u5176\u4e2d 48% \u7684\u6536\u5165\u6765\u81ea\u7f8e\u56fd\u4ee5\u5916\u3002\u8be5\u516c\u53f8\u73b0\u5728\u6bcf\u5929\u963b\u6b62\u8d85\u8fc7 870 \u4ebf\u4e2a\u7f51\u7edc\u5a01\u80c1\u3002 Cloudflare \u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u4fee\u00b7\u666e\u6797\u65af (Matthew Prince) \u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff1a\u201c\u4f5c\u4e3a\u4e0a\u5e02\u516c\u53f8\uff0c\u6211\u4eec\u8fce\u6765\u4e86\u6709\u53f2\u4ee5\u6765\u6700\u5f3a\u52b2\u7684\u5b63\u5ea6\uff0c\u6211\u4eec\u7684\u6536\u5165\u589e\u957f\u7ee7\u7eed\u52a0\u901f\uff0c\u540c\u6bd4\u589e\u957f 53%\u3002\u201d . \u201c\u65e0\u8bba\u6211\u4eec\u662f\u4e3a\u4e16\u754c\u4e0a\u6700\u590d\u6742\u7684\u7ec4\u7ec7\u63d0\u4f9b\u96f6\u4fe1\u4efb\u5b89\u5168\u89e3\u51b3\u65b9\u6848\uff0c\u8fd8\u662f\u901a\u8fc7 Cloudflare Workers \u5b9e\u73b0\u4e0b\u4e00\u4e2a\u5341\u4ebf\u7f8e\u5143\u7684\u4e1a\u52a1\uff0c\u6211\u4eec\u90fd\u5c06\u7ee7\u7eed\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u5ba2\u6237\u6240\u4f9d\u8d56\u7684\u5b89\u5168\u3001\u53ef\u7f16\u7a0b\u7684\u7f51\u7edc\u89e3\u51b3\u65b9\u6848\u3002\u201d Cloudflare \u4f30\u8ba1\u4e0b\u4e00\u5b63\u5ea6\u7684\u6536\u5165\u5728 1.65 \u4ebf\u7f8e\u5143\u81f3 1.66 \u4ebf\u7f8e\u5143\u4e4b\u95f4\uff0c\u8c03\u6574\u540e\u7684\u6bcf\u80a1\u4e8f\u635f\u4e3a 4 \u7f8e\u5206\u81f3 3 \u7f8e\u5206\u3002\u5206\u6790\u5e08\u6b64\u524d\u9884\u8ba1\u6bcf\u80a1\u4e8f\u635f 2 \u7f8e\u5206\uff0c\u6536\u5165\u4e3a 1.574 \u4ebf\u7f8e\u5143\u3002\nCloudflare \u8868\u793a\uff0c\u4ed6\u4eec\u9884\u8ba1\u5168\u5e74\u6536\u5165\u5c06\u5728 6.29 \u4ebf\u7f8e\u5143\u81f3 6.33 \u4ebf\u7f8e\u5143\u4e4b\u95f4\uff0c\u8c03\u6574\u540e\u6bcf\u80a1\u4e8f\u635f\u5728 11 \u81f3 12 \u7f8e\u5206\u4e4b\u95f4\u3002\u5c3d\u7ba1\u5b63\u5ea6\u6570\u636e\u8d85\u51fa\u4e86\u5206\u6790\u5e08\u7684\u9884\u671f\u5e76\u4e14\u4e0e\u9884\u671f\u5927\u81f4\u76f8\u7b26\uff0c\u4f46\u6295\u8d44\u8005\u5e76\u672a\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u3002 Cloudflare \u7684\u80a1\u4ef7\u5728\u76d8\u540e\u4ea4\u6613\u4e2d\u4e0b\u8dcc 5.5%\u3002\u4e0e\u6295\u8d44\u8005\u53ef\u80fd\u9884\u671f\u7684\u66f4\u597d\u76f8\u6bd4\uff0c\u6570\u636e\u5e76\u4e0d\u7cdf\u7cd5\u3002 Cloudflare \u4eca\u5e74\u8868\u73b0\u51fa\u8272\uff0c\u5176\u80a1\u4ef7\u4eca\u5e74\u8fc4\u4eca\u4e0a\u6da8\u4e86 63%\u3002\u4f34\u968f\u7740\u8fd9\u4e00\u6ea2\u4ef7\u800c\u6765\u7684\u662f\u5bf9\u5f3a\u52b2\u62a5\u544a\u7684\u9884\u671f\uff0c\u5c3d\u7ba1 Cloudflare \u5728\u524d\u56db\u4e2a\u5b63\u5ea6\u7684\u8868\u73b0\u8d85\u51fa\u4e86\u9884\u671f\uff0c\u4f46\u8fd9\u6b21\u7684\u5e45\u5ea6\u5e76\u4e0d\u5927\u3002\u52a0\u5165\u6211\u4eec\u7684 Cube \u4ff1\u4e50\u90e8\u548c Cube \u6d3b\u52a8\u4e13\u5bb6\u793e\u533a\uff0c\u8868\u8fbe\u60a8\u5bf9\u6211\u4eec\u4f7f\u547d\u7684\u652f\u6301\u3002\u52a0\u5165\u793e\u533a\uff0c\u5176\u4e2d\u5305\u62ec Amazon Web Services\uff0c\u5373\u5c06\u6210\u4e3a Amazon.com \u9996\u5e2d\u6267\u884c\u5b98 Andy Jassy\u3001\u6234\u5c14\u79d1\u6280\u516c\u53f8\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\u8fc8\u514b\u5c14\u6234\u5c14\u3001\u82f1\u7279\u5c14\u9996\u5e2d\u6267\u884c\u5b98 Pat Gelsinger \u4ee5\u53ca\u66f4\u591a\u540d\u4eba\u548c\u4e13\u5bb6\u3002\u6211\u4eec\u5c06\u4e8e 6 \u6708 16 \u65e5\u4e3e\u884c\u7b2c\u4e8c\u6b21\u4e91\u521b\u4e1a\u5c55\u793a\u4f1a\u3002\u5355\u51fb\u6b64\u5904\u52a0\u5165\u514d\u8d39\u4e14\u5f00\u653e\u7684 Startup Showcase \u6d3b\u52a8\u3002", "note_en": "Shares in content delivery network company Cloudflare Inc. dropped in after-hours trading today after investors were not impressed by the size of the company\u2019s beat.\n For the quarter ending June 30, Cloudflare reported revenue of $152.4 million, up 53% year-over-year. Net loss in the quarter was $35.5 million or two cents per share compared with $26.1 million or three cents per share in the same quarter of 2020.\n Analysts had  been predicting revenue of $146 million and a loss per share of three cents.\n Highlights in the quarter included a 68% increase in Cloudflare\u2019s compound annual growth rate as the company increased its number of large customers, those with at least $100,000 in annualized revenue, to 1,088. As of the end of the quarter, the company now counts about 19% of the Fortunate 1,000 as paying customers.\n Total Cloudflare customers are now over 126,000, with 48% of revenue coming from outside of the U.S. The company is now blocking more than 87 billion cyber threats per day.\n \u201cWe had our strongest quarter ever as a public company, and our revenue growth continued to accelerate, growing 53% year-over-year,\u201d Matthew Prince, co-founder a chief executive officer of Cloudflare (pictured), said in  a statement. \u201cWhether we\u2019re offering zero trust security solutions to the world\u2019s most sophisticated organizations or enabling the next billion-dollar business with Cloudflare Workers, we remain focused on delivering secure, programmable network solutions that our customers rely on.\u201d\n Cloudflare is estimating revenue of between $165 million and $166 million for the quarter ahead and an adjusted loss per share of four cents to three cents. Analysts had  been predicting revenue of $157.4 million on a loss of two cents per share.\n For the full year, Cloudflare said that they expected revenue to come in at between $629 million and $633 million and an adjusted loss of between 11 and 12 cents per share.\n Despite beating analyst estimates with the quarterly figures and being roughly in line with expectations on estimates, investors were not impressed. Share in Cloudflare dropped 5.5% in after-hours trading.\n It wasn\u2019t so much that the figures were bad versus that investors may have expected better. Cloudflare has been a stellar performer this year, with its share price up 63% year to date. With that premium comes expectations of strong reports, and although Cloudflare has beaten predictions in its previous four quarters, it wasn\u2019t by a large margin this time.\n  Show your support for our mission by joining our Cube Club and Cube Event Community of experts. Join the community that includes Amazon Web Services and soon to be Amazon.com CEO Andy Jassy, Dell Technologies founder and CEO Michael Dell, Intel CEO Pat Gelsinger and many more luminaries and experts.\n We are holding our second cloud startup showcase on June 16.\u00a0 Click here to join the free and open Startup Showcase event.", "posttime": "2021-08-06 10:50:50", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u8d85\u51fa,paying,cloudflare", "title": "Cloudflare \u8d85\u51fa\u9884\u671f\uff0c\u7b2c\u4e8c\u5b63\u5ea6\u6536\u5165\u4e3a 1.524 \u4ebf\u7f8e\u5143\uff0c\u540c\u6bd4\u589e\u957f 53%\uff0c48% \u6765\u81ea\u7f8e\u56fd\u4ee5\u5916\uff1b\u8d22\u5bcc 1,000 \u5f3a\u516c\u53f8\u4e2d\u7ea6\u6709 19% \u662f\u4ed8\u8d39\u5ba2\u6237", "title_en": "Cloudflare beats expectations with Q2 revenue of $152.4M, up 53% YoY, 48% came from outside of the US; says ~19% of Fortune 1,000 firms are paying customers", "transed": 1, "url": "https://siliconangle.com/2021/08/05/cloudflare-shares-drop-despite-beating-estimates-second-quarter-earnings/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u8d85\u51fa", "paying"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071705, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Berners-Lee \u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u7684\u513f\u5b50\uff0c1955 \u5e74\uff08\u4e0e\u53f2\u8482\u592b\u00b7\u4e54\u5e03\u65af\u548c\u6bd4\u5c14\u00b7\u76d6\u8328\u540c\u5e74\uff09\u51fa\u751f\u4e8e\u4f26\u6566\uff0c\u5e76\u5728\u725b\u6d25\u5927\u5b66\u5b66\u4e60\u7269\u7406\u5b66\u3002\u5728 1980 \u5e74\u4ee3\u53d7\u96c7\u4e8e CERN \u671f\u95f4\uff0cBerners-Lee \u89c2\u5bdf\u5230\u8ddf\u8e2a\u8be5\u7ec4\u7ec7\u904d\u5e03\u5168\u7403\u7684\u6570\u5343\u540d\u7814\u7a76\u4eba\u5458\u7684\u9879\u76ee\u548c\u8ba1\u7b97\u673a\u7cfb\u7edf\u662f\u591a\u4e48\u56f0\u96be\u3002\u6b63\u5982\u4ed6\u540e\u6765\u6240\u8bf4\uff1a\u201c\u5728\u90a3\u4e2a\u65f6\u4ee3\uff0c\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u6709\u4e0d\u540c\u7684\u4fe1\u606f\uff0c\u4f46\u4f60\u5fc5\u987b\u767b\u5f55\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u624d\u80fd\u83b7\u5f97\u5b83\u3002\u6b64\u5916\uff0c\u6709\u65f6\u60a8\u5fc5\u987b\u5728\u6bcf\u53f0\u8ba1\u7b97\u673a\u4e0a\u5b66\u4e60\u4e0d\u540c\u7684\u7a0b\u5e8f\u3002\u201d 1989 \u5e74 3 \u6708\uff0cBerners-Lee \u5411 CERN \u7684\u7ba1\u7406\u4eba\u5458\u63d0\u51fa\u4e86\u4e00\u4e2a\u4fe1\u606f\u7ba1\u7406\u7cfb\u7edf\u7684\u5efa\u8bae\uff0c\u8be5\u7cfb\u7edf\u4f7f\u7528\u8d85\u6587\u672c\u94fe\u63a5\u8fde\u63a5\u5230 Internet \u7684\u4e0d\u540c\u8ba1\u7b97\u673a\u4e0a\u7684\u6587\u6863\u3002 \uff08\u8d85\u6587\u672c\u662f 1963 \u5e74\u521b\u9020\u7684\u4e00\u4e2a\u672f\u8bed\uff0c\u5141\u8bb8\u4e00\u4e2a\u4eba\u901a\u8fc7\u5355\u51fb\u7f16\u7801\u7684\u5355\u8bcd\u6216\u77ed\u8bed\u6765\u83b7\u53d6\u6587\u6863\u6216\u4e00\u6bb5\u5185\u5bb9\u3002\uff09\u88ab\u4ed6\u7684\u8001\u677f\u6807\u8bb0\u4e3a\u201c\u6a21\u7cca\u4f46\u4ee4\u4eba\u5174\u594b\u201d\u7684\u63d0\u8bae\u6700\u521d\u672a\u88ab\u63a5\u53d7\u3002 Berners-Lee \u4e0e CERN \u7684\u6bd4\u5229\u65f6\u5de5\u7a0b\u5e08 Robert Cailliau \u5408\u4f5c\u5b8c\u5584\u4e86\u8be5\u63d0\u6848\uff0c1990 \u5e74\uff0c\u8fd9\u4f4d\u82f1\u56fd\u4eba\u7684\u8001\u677f\u7ed9\u4e86\u4ed6\u65f6\u95f4\u53c2\u4e0e\u8be5\u9879\u76ee\u3002\u5728\u6700\u521d\u5c06\u9879\u76ee\u79f0\u4e3a\u4fe1\u606f\u7ba1\u7406\u540e\uff0c\u4f2f\u7eb3\u65af-\u674e\u5c1d\u8bd5\u4e86\u8bf8\u5982\u4fe1\u606f\u77ff\u4e95\u548c\u4fe1\u606f\u7f51\u683c\u4e4b\u7c7b\u7684\u540d\u79f0\uff0c\u7136\u540e\u624d\u51b3\u5b9a\u4f7f\u7528\u4e07\u7ef4\u7f51\u3002\u5230 1990 \u5e74\u5e95\uff0cBerners-Lee \u4f7f\u7528\u53f2\u8482\u592b\u4e54\u5e03\u65af\u8bbe\u8ba1\u7684 NeXT \u8ba1\u7b97\u673a\u5f00\u53d1\u4e86\u4f5c\u4e3a Web \u57fa\u77f3\u7684\u5173\u952e\u6280\u672f\uff0c\u5305\u62ec\u7528\u4e8e\u521b\u5efa\u7f51\u9875\u7684\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00 (HTML)\uff1b\u8d85\u6587\u672c\u4f20\u8f93\u200b\u200b\u534f\u8bae (HTTP)\uff0c\u4e00\u7ec4\u7528\u4e8e\u901a\u8fc7 Web \u4f20\u8f93\u6570\u636e\u7684\u89c4\u5219\uff1b\u548c\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26 (URL)\uff0c\u6216\u7528\u4e8e\u67e5\u627e\u6587\u6863\u6216\u9875\u9762\u7684 Web \u5730\u5740\u3002\u4ed6\u8fd8\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u57fa\u672c\u7684\u6d4f\u89c8\u5668\u548c Web \u670d\u52a1\u5668\u8f6f\u4ef6\u3002 1991 \u5e74 8 \u6708 6 \u65e5\uff0c\u4f2f\u7eb3\u65af\u00b7\u674e (Berners-Lee) \u53d1\u5e03\u4e86\u6709\u53f2\u4ee5\u6765\u7b2c\u4e00\u4e2a\u7f51\u7ad9\uff0cWeb \u5f00\u59cb\u4f5c\u4e3a Internet \u4e0a\u7684\u4e00\u9879\u516c\u5f00\u53ef\u7528\u670d\u52a1\u51fa\u73b0\u3002\u6070\u5982\u5176\u5206\u5730\uff0c\u8be5\u7ad9\u70b9\u662f\u5173\u4e8e\u4e07\u7ef4\u7f51\u9879\u76ee\u7684\uff0c\u63cf\u8ff0\u4e86 Web \u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u3002\u5728\u4f2f\u7eb3\u65af-\u674e\u7684 NeXT \u8ba1\u7b97\u673a\u4e0a\u6258\u7ba1\u5728 CERN\uff0c\u8be5\u7ad9\u70b9\u7684 URL \u662f http://info.cern.ch\u3002 Berners-Lee \u5e76\u6ca1\u6709\u8bd5\u56fe\u4ece\u4ed6\u7684\u53d1\u660e\u4e2d\u83b7\u5229\uff0c\u5e76\u62d2\u7edd\u4e86 CERN \u8981\u6c42\u4e3a\u4ed6\u7684 Web \u6280\u672f\u7533\u8bf7\u4e13\u5229\u7684\u547c\u5401\u3002\u4ed6\u5e0c\u671b\u7f51\u7edc\u662f\u5f00\u653e\u548c\u514d\u8d39\u7684\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5feb\u5730\u6269\u5c55\u548c\u53d1\u5c55\u3002\u6b63\u5982\u4ed6\u540e\u6765\u8bf4\u7684\uff0c\u201c\u5982\u679c\u8fd9\u9879\u6280\u672f\u662f\u4e13\u6709\u7684\uff0c\u5e76\u4e14\u5728\u6211\u7684\u5b8c\u5168\u63a7\u5236\u4e4b\u4e0b\uff0c\u5b83\u53ef\u80fd\u4e0d\u4f1a\u8d77\u98de\u3002\u4f60\u4e0d\u80fd\u5efa\u8bae\u67d0\u7269\u6210\u4e3a\u4e00\u4e2a\u901a\u7528\u7a7a\u95f4\uff0c\u540c\u65f6\u4fdd\u6301\u5bf9\u5b83\u7684\u63a7\u5236\u3002\u201d 1993 \u5e74\uff0c\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u56fd\u5bb6\u8d85\u7ea7\u8ba1\u7b97\u5e94\u7528\u4e2d\u5fc3\u7684\u4e00\u4e2a\u56e2\u961f\u53d1\u5e03\u4e86 Mosaic\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u53d7\u5230\u516c\u4f17\u6b22\u8fce\u7684 Web \u6d4f\u89c8\u5668\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u91cc\uff0c\u96c5\u864e (1994)\u3001\u4e9a\u9a6c\u900a (1995)\u3001eBay (1995) \u548c\u8c37\u6b4c (1998) \u7b49\u7f51\u7ad9\u76f8\u7ee7\u63a8\u51fa\u3002\u6839\u636e Internet Live Stats \u7684\u6570\u636e\uff0c\u5230 2004 \u5e74 Facebook \u9996\u6b21\u4eae\u76f8\u65f6\uff0c\u5df2\u6709\u8d85\u8fc7 5100 \u4e07\u4e2a\u7f51\u7ad9\u3002\u4e0e\u6b64\u540c\u65f6\uff0c1994 \u5e74\uff0c\u4f2f\u7eb3\u65af-\u674e\u79bb\u5f00 CERN \u524d\u5f80\u9ebb\u7701\u7406\u5de5\u5b66\u9662\uff0c\u5728\u90a3\u91cc\u4ed6\u521b\u7acb\u4e86\u4e07\u7ef4\u7f51\u8054\u76df (W3C)\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ef4\u62a4 Web \u6807\u51c6\u7684\u7ec4\u7ec7\u3002\u8fd9\u4f4d\u4f4e\u8c03\u7684\u6709\u8fdc\u89c1\u7684\u4eba\u540e\u6765\u88ab\u300a\u65f6\u4ee3\u300b\u6742\u5fd7\u8bc4\u4e3a 20 \u4e16\u7eaa 100 \u4f4d\u6700\u91cd\u8981\u4eba\u7269\u4e4b\u4e00\uff0c\u5e76\u4e8e 2004 \u5e74\u88ab\u82f1\u56fd\u5973\u738b\u4f0a\u4e3d\u838e\u767d\u4e8c\u4e16\u5c01\u4e3a\u7235\u58eb\u3002 2009 \u5e74\uff0c\u4f2f\u7eb3\u65af-\u674e\u521b\u7acb\u4e86\u4e07\u7ef4\u7f51\u57fa\u91d1\u4f1a\uff0c\u8be5\u7ec4\u7ec7\u81f4\u529b\u4e8e\u786e\u4fdd\u7f51\u7edc\u9020\u798f\u4eba\u7c7b\u3002\u5728 2012 \u5e74\u4f26\u6566\u590f\u5b63\u5965\u8fd0\u4f1a\u5f00\u5e55\u5f0f\u4e0a\uff0c\u4ed6\u56e0\u53d1\u660e\u4e86\u7f51\u7edc\u800c\u611f\u5230\u8363\u5e78\uff0c\u5e76\u5728\u63a8\u7279\u4e0a\u5199\u9053\uff1a\u201c\u8fd9\u662f\u7ed9\u6240\u6709\u4eba\u7684\u3002\u201d", "note_en": "The son of computer scientists, Berners-Lee was born in London in 1955 (the same year as Steve Jobs and Bill Gates) and studied physics at Oxford. While employed at CERN in the 1980s, Berners-Lee observed how tough it was to keep track of the projects and computer systems of the organization\u2019s thousands of researchers, who were spread around the globe. As he later stated: \u201cIn those days, there was different information on different computers, but you had to log on to different computers to get at it. Also, sometimes you had to learn a different program on each computer.\u201d\n   In March 1989, Berners-Lee gave managers at CERN a proposal for an information management system that used hypertext to link documents on different computers that were connected to the Internet. (Hypertext, a term coined in 1963, allows a person to get a document or piece of content by clicking on a coded word or phrase.) Labelled \u201cvague but exciting\u201d by his boss, the proposal at first wasn\u2019t accepted. Berners-Lee teamed up with Robert Cailliau, a Belgian engineer at CERN, to refine the proposal, and in 1990 the Englishman\u2019s boss gave him time to work on the project. After originally calling the project Information Management, Berners-Lee tried out names such as Mine of Information and Information Mesh before settling on WorldWideWeb.\n  By the end of 1990, Berners-Lee, using a Steve Jobs-designed NeXT computer, had developed the key technologies that are the bedrock of the Web, including Hypertext Markup Language (HTML), for creating Web pages; Hypertext Transfer Protocol (HTTP), a set of rules for transferring data across the Web; and Uniform Resource Locators (URLs), or Web addresses for finding a document or page. He also had devised a basic browser and Web server software.\n The beginning of the Web as a publicly available service on the Internet arrived on August 6, 1991, when Berners-Lee published the first-ever website. Fittingly, the site was about the World Wide Web project, describing the Web and how to use it. Hosted at CERN on Berners-Lee\u2019s NeXT computer, the site\u2019s URL was http://info.cern.ch.\n   Berners-Lee didn\u2019t try to cash in on his invention and rejected CERN\u2019s call to patent his Web technology. He wanted the Web to be open and free so it could expand and evolve as rapidly as possible. As he later said, \u201cHad the technology been proprietary, and in my total control, it would probably not have taken off. You can\u2019t propose that something be a universal space and at the same time keep control of it.\u201d\n In 1993, a team at the University of Illinois\u2019 National Center for Supercomputing Applications released Mosaic, the first Web browser to become popular with the general public. The next few years saw the launch of such websites as Yahoo (1994), Amazon (1995), eBay (1995) and Google (1998). By the time Facebook debuted in 2004, there were more than 51 million websites, according to  Internet Live Stats.\n Meanwhile, in 1994, Berners-Lee left CERN for the Massachusetts Institute of Technology, where he founded the World Wide Web Consortium (W3C), an organization that maintains standards for the Web. The low-profile visionary went on to be named one of Time Magazine\u2019s 100 Most Important People of the 20th Century, and in 2004 was knighted by Queen Elizabeth II. In 2009, Berners-Lee started the World Wide Web Foundation, an organization focused on ensuring the Web benefits humanity. During the opening ceremony at the 2012 Summer Olympics in London, he was honored for inventing the Web and tweeted, \u201cThis is for everyone.\u201d", "posttime": "2021-08-06 10:50:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e07\u7ef4\u7f51,years,web", "title": "\u4e07\u7ef4\u7f51\u4eca\u5929\u5df2\u7ecf 30 \u5c81\u4e86", "title_en": "The WWW is 30 years old today", "transed": 1, "url": "https://www.history.com/.amp/news/the-worlds-first-web-site", "via": "", "real_tags": ["\u4e07\u7ef4\u7f51", "years", "web"]}, {"category": "", "categoryclass": "", "imagename": "841844f98dd9f8ac68cd09ea6e8decec.gif", "infoid": 1071703, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u611f\u89c9\u5c31\u50cf\u6211\u66fe\u7ecf\u4e0e\u4e4b\u4ea4\u6613\u8fc7\u7684\u6bcf\u5bb6\u516c\u53f8\u548c\u7ec4\u7ec7\u6bcf\u5468\u90fd\u7ed9\u6211\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002\u751a\u81f3\u6bcf\u5929\u90fd\u6709\u4e00\u4e9b\u3002\u6709\u7684\u4e00\u5929\u591a\u6b21\u3002\u6211\u7684\u62b5\u62bc\u8d37\u6b3e\u7ecf\u7eaa\u4eba\u5728\u6211\u751f\u65e5\u548c\u5047\u671f\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002\u6211\u7684\u7259\u533b\u4e5f\u662f\u3002\u67d0\u4e9b\u96f6\u552e\u5546\u66f4\u9891\u7e41\u5730\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002\u5bb6\u5c45\u7528\u54c1\u516c\u53f8 Room &amp; Board \u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\uff0c\u5e0c\u671b\u6211\u80fd\u5347\u7ea7\u5230\u9002\u5408\u4f11\u606f\u5ba4\u7684\u5206\u533a\uff0c\u6216\u8005\u6073\u6c42\u6211\u8ba4\u8bc6\u6765\u81ea\u660e\u5c3c\u82cf\u8fbe\u5dde\u7684\u624b\u5de5\u73bb\u7483\u5439\u5236\u5de5\u3002\u4ec5\u5728\u8fc7\u53bb\u7684\u4e00\u5468\u91cc\uff0c\u670d\u88c5\u96f6\u552e\u5546 Bonobos \u5c31\u7ed9\u6211\u53d1\u4e86\u4e5d\u6b21\u4fe1\u606f\uff0c\u515c\u552e Riviera \u77ed\u88e4\u3001\u6d41\u884c\u886c\u886b\uff0c\u751a\u81f3\u662f\u4ed6\u4eec\u627f\u8bfa\u4f1a\u201c\u5c55\u73b0\u6700\u597d\u7684\u81ea\u5df1\u201d\u7684\u659c\u7eb9\u68c9\u5e03\u88e4\u3002\u8fd9\u5f88\u8352\u8c2c\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u6211\u8981\u6c42\u63d0\u4f9b\u8fd9\u4e9b\u7535\u5b50\u90ae\u4ef6\u3002\u6211\u548c\u6211\u7684\u62b5\u62bc\u8d37\u6b3e\u7ecf\u7eaa\u4eba\u4e00\u8d77\u5199\u4e86\u8d37\u6b3e\u3002\u6211\u4ece Room &amp; Board \u4e70\u4e86\u5bb6\u5177\uff0c\u4ece Bonobos \u4e70\u4e86\u88e4\u5b50\u3002\u800c\u4e14\uff0c\u662f\u7684\uff0c\u6211\u77e5\u9053\u6211\u53ef\u4ee5\u968f\u65f6\u53d6\u6d88\u8ba2\u9605\u6216\u963b\u6b62\u5b83\u4eec\u3002\u4f46\u4e3a\u4ec0\u4e48\u6709\u8fd9\u4e48\u591a\u7535\u5b50\u90ae\u4ef6\uff1f\u5ba2\u6237\u600e\u4e48\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u5f88\u6709\u5438\u5f15\u529b\uff1f\u660e\u786e\u5730\u8bf4\uff1a\u516c\u53f8\u5e0c\u671b\u4f60\u8d2d\u4e70\u4ed6\u4eec\u7684\u4e1c\u897f\uff0c\u800c\u7535\u5b50\u90ae\u4ef6\u662f\u8ba9\u4f60\u770b\u5230\u5b83\u7684\u597d\u65b9\u6cd5\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u60a8\u9996\u5148\u770b\u5230\u8fd9\u4e9b\u7535\u5b50\u90ae\u4ef6\u7684\u539f\u56e0\u8fdc\u6bd4\u60a8\u60f3\u8c61\u7684\u8981\u590d\u6742\u5f97\u591a\uff0c\u6d89\u53ca\u5230\u5c42\u5c42\u5947\u602a\u7684\u4e92\u64cd\u4f5c\u6280\u672f\u4ee5\u53ca\u5728\u7535\u5b50\u90ae\u4ef6\u4e1a\u52a1\u4e2d\u4e3a\u4e89\u593a\u6743\u529b\u548c\u63a7\u5236\u6743\u800c\u8fdb\u884c\u7684\u770b\u4e0d\u89c1\u7684\u6597\u4e89\u3002\u7ed3\u679c\u2014\u2014\u66f4\u591a\u5173\u4e8e\u201c\u9002\u5408\u4f60\u7e41\u5fd9\u65e5\u7a0b\u7684\u88e4\u5b50\u201d\u7684\u4fe1\u4ef6\u2014\u2014\u4e0e\u5176\u8bf4\u662f\u4e00\u4e2a\u6709\u610f\u7684\u7b56\u7565\uff0c\u4e0d\u5982\u8bf4\u662f\u4e00\u4e2a\u5947\u602a\u7684\u88c5\u7f6e\u7684\u7528\u5c3d\u3002\u6211\u4eec\u90fd\u9677\u5165\u4e86\u56f0\u5883\u3002\u5173\u4e8e\u6536\u4ef6\u7bb1\uff0c\u60a8\u5fc5\u987b\u4e86\u89e3\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\uff0c\u60a8\u5bf9\u7535\u5b50\u90ae\u4ef6\u6240\u505a\u7684\u4e8b\u60c5\u4f1a\u76f4\u63a5\u5f71\u54cd\u60a8\u662f\u5426\u4f1a\u770b\u5230\u4e0b\u4e00\u5c01\u90ae\u4ef6\u3002\u5927\u591a\u6570\u7f8e\u56fd\u4eba\u4f7f\u7528\u7684\u7535\u5b50\u90ae\u4ef6\u5e73\u53f0\u80cc\u540e\u7684\u4e09\u5927\u516c\u53f8\u2014\u2014\u8c37\u6b4c\uff08Gmail\uff09\u3001\u5fae\u8f6f\uff08Outlook \u548c Hotmail\uff09\u548c\u5a01\u745e\u68ee\uff08\u7f8e\u56fd\u5728\u7ebf\u548c\u96c5\u864e\u90ae\u7bb1\uff09\u2014\u2014\u90fd\u8bbe\u8ba1\u4e86\u4ed6\u4eec\u7684\u4ea7\u54c1\u6765\u4fdd\u62a4\u4f60\u7684\u6536\u4ef6\u7bb1\uff0c\u5e76\u4f7f\u7528\u6291\u5236\u4f60\u4e0d\u53d1\u9001\u90ae\u4ef6\u7684\u8f6f\u4ef6\u6765\u4fdd\u62a4\u4f60\u7684\u6536\u4ef6\u7bb1\u4e0d\u60f3\u3002\u6253\u5f00\u7535\u5b50\u90ae\u4ef6\u5e76\u5355\u51fb\u5176\u4e2d\u7684\u94fe\u63a5\u53ef\u80fd\u4f1a\u544a\u8bc9\u8f6f\u4ef6\u7684\u7b97\u6cd5\u60a8\u66f4\u60f3\u8981\u5b83\u3002\u6240\u4ee5\u53ef\u80fd\u4f1a\u5411\u4e0b\u6eda\u52a8\u7535\u5b50\u90ae\u4ef6\u7684\u6b63\u6587\uff0c\u6216\u8005\u82b1\u4e00\u5b9a\u7684\u65f6\u95f4\u9605\u8bfb\u5b83\uff0c\u6216\u8005\u7ed9\u5b83\u52a0\u6ce8\u661f\u6807\uff0c\u6216\u8005\u5c06\u5b83\u5f52\u6863\u5230\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u3002\u540c\u65f6\uff0c\u5ffd\u7565\u5176\u4ed6\u6d88\u606f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u90ae\u7bb1\u8f6f\u4ef6\u5f00\u59cb\u5783\u573e\u90ae\u4ef6\uff0c\u751a\u81f3\u963b\u6b62\u53d1\u4ef6\u4eba\u3002\u7535\u5b50\u90ae\u4ef6\u662f\u516c\u53f8\u76f4\u63a5\u8054\u7cfb\u5ba2\u6237\u7684\u5c11\u6570\u51e0\u79cd\u65b9\u5f0f\u4e4b\u4e00\u3002 Oracle \u8425\u9500\u7814\u7a76\u4e3b\u7ba1\u67e5\u5fb7\u00b7S\u00b7\u6000\u7279 (Chad S. White) \u544a\u8bc9\u6211\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u7edd\u5927\u591a\u6570\u4eba\u8868\u793a\uff0c\u4ed6\u4eec\u5e0c\u671b\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u4e86\u89e3\u54c1\u724c\u4fe1\u606f\u3002\u8fd9\u5c31\u662f\u90ae\u7bb1\u8f6f\u4ef6\u5f00\u59cb\u7981\u6b62\u90ae\u4ef6\u7684\u539f\u56e0\u2014\u2014\u4ee5\u4fdd\u62a4\u4eba\u4eec\u514d\u53d7\u516c\u53f8\u53d1\u9001\u8fc7\u591a\u7535\u5b50\u90ae\u4ef6\u7684\u8bf1\u60d1\u3002\u4f5c\u4e3a\u56de\u5e94\uff0c\u7535\u5b50\u90ae\u4ef6\u8425\u9500\u4eba\u5458\u7740\u8ff7\u4e8e\u201c\u53ef\u4f20\u9012\u6027\u201d\uff0c\u6216\u8005\u4ed6\u4eec\u7684\u7535\u5b50\u90ae\u4ef6\u7684\u5185\u5bb9\u548c\u9891\u7387\u53ef\u80fd\u5982\u4f55\u5e2e\u52a9\u8fd9\u4e9b\u90ae\u4ef6\u9996\u5148\u771f\u6b63\u8fdb\u5165\u60a8\u7684\u6536\u4ef6\u7bb1\u3002\u4f46\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u521b\u9020\u4e86\u65b0\u7684\u548c\u5947\u602a\u7684\u53cd\u9988\u5faa\u73af\uff0c\u5176\u4e2d\u4e00\u4e9b\u516c\u53f8\u548c\u67d0\u4e9b\u6d88\u606f\u53ef\u80fd\u6bd4\u4ee5\u524d\u66f4\u5bb9\u6613\u5230\u8fbe\u60a8\u7684\u6536\u4ef6\u7bb1\uff0c\u800c\u5176\u4ed6\u516c\u53f8\u5728\u60a8\u770b\u5230\u5b83\u4eec\u4e4b\u524d\u5c31\u88ab\u5783\u573e\u90ae\u4ef6\u3001\u88ab\u8c34\u8d23\u4e3a\u5783\u573e\u90ae\u4ef6\u3001\u88ab\u5220\u9664\u7b49\u3002\u7ed3\u679c\uff0c\u60a8\u7684\u4e2a\u4eba\u6536\u4ef6\u7bb1\u9010\u6e10\u53d8\u5f97\u4e0d\u518d\u50cf\u90ae\u7bb1\uff0c\u800c\u66f4\u50cf\u662f\u8fdb\u5165\u60a8\u7ef4\u62a4\u7684\u6bcf\u4e2a\u4e1a\u52a1\u5173\u7cfb\u7684\u866b\u6d1e\uff1a\u60a8\u7684\u94f6\u884c\uff1b\u60a8\u7684\u516c\u7528\u4e8b\u4e1a\u63d0\u4f9b\u5546\uff1b\u4f60\u7684\u8d85\u5e02\uff1b\u60a8\u6700\u559c\u6b22\u7684\u7cbe\u54c1\u5e97\u3001\u9910\u5385\u3001\u5bb6\u5c45\u7528\u54c1\u4f9b\u5e94\u5546\uff0c\u4ee5\u53ca\u6240\u6709\u5176\u4ed6\u5730\u65b9\u3002\u8fd9\u662f\u60a8\u81ea\u5df1\u7684\u6570\u5b57\u5546\u4e1a\u533a\uff1a\u6253\u5f00\u7535\u5b50\u90ae\u4ef6\u5c31\u50cf\u5728\u60a8\u7684\u6d4f\u89c8\u5668\u6216\u624b\u673a\u4e0a\u8bbf\u95ee\u4e00\u4e2a\u5c0f\u5546\u573a\uff0c\u6bcf\u4e2a\u5546\u5e97\u90fd\u7d27\u6328\u7740\u5176\u4ed6\u5546\u5e97\u3002\u51e0\u5e74\u524d\uff0cGmail \u901a\u8fc7\u5f15\u5165\u4fc3\u9500\u6587\u4ef6\u5939\uff0c\u5c06\u5783\u573e\u90ae\u4ef6\u91cd\u65b0\u5b9a\u4f4d\u4e3a\u8425\u9500\uff0c\u4f7f\u8fd9\u4e2a\u6bd4\u55bb\u5177\u4f53\u5316\u3002\u5f53\u60a8\u6709\u5fc3\u60c5\u8d2d\u7269\u65f6\uff0c\u53ea\u9700\u53c2\u52a0\u4fc3\u9500\u6d3b\u52a8\u5e76\u67e5\u770b\u6240\u63d0\u4f9b\u7684\u5546\u54c1\uff08\u6216\u641c\u7d22\u6700\u559c\u6b22\u7684\u54c1\u724c\u4ee5\u67e5\u770b\u6700\u65b0\u5546\u54c1\uff09\u3002\u5982\u679c\u4f01\u4e1a\u548c\u79d1\u6280\u516c\u53f8\u5728\u540c\u4e00\u9875\u9762\u4e0a\uff0c\u8fd9\u5c06\u662f\u6545\u4e8b\u7684\u7ed3\u5c40\u3002\u7b97\u6cd5\u4f1a\u4e0d\u65ad\u53d8\u5316\uff0c\u76f4\u5230\u60a8\u4e0e\u8db3\u591f\u591a\u7684\u4fc3\u9500\u7535\u5b50\u90ae\u4ef6\u4e92\u52a8\uff0c\u60a8\u559c\u6b22\u7684\u6bcf\u5bb6\u5546\u5e97\u90fd\u4f1a\u53d1\u9001\u5b8c\u7f8e\u5b9a\u65f6\u7684\u6d88\u606f\uff0c\u6ee1\u8db3\u60a8\u7684\u5404\u79cd\u9700\u6c42\u548c\u613f\u671b\u3002\u6ee1\u8db3\uff0c\u9ad8\u5174\uff0c\u60a8\u8d2d\u4e70\u4e86\u5e7f\u544a\u7ed9\u60a8\u7684\u6bcf\u4ef6\u5546\u54c1\u3002\u5f53\u7136\uff0c\u5b9e\u9645\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002\u5177\u6709\u8bbd\u523a\u610f\u5473\u7684\u662f\uff0c\u4eba\u4eec\u8ba4\u4e3a\u5e0c\u671b\u6536\u5230\u4ed6\u4eec\u6700\u559c\u6b22\u7684\u516c\u53f8\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u4f46\u5728\u7f8e\u56fd\u548c\u52a0\u62ff\u5927\uff0c\u8d85\u8fc7\u4e00\u534a\u7684\u6d88\u8d39\u8005\u8868\u793a\u4ed6\u4eec\u6536\u5230\u4e86\u8fc7\u591a\u7684\u4fc3\u9500\u7535\u5b50\u90ae\u4ef6\u3002\u4e2a\u6027\u5316\u5e94\u8be5\u8ba9\u76f8\u5173\u7684\u4fe1\u606f\u901a\u8fc7\uff0c\u4e0d\u76f8\u5173\u7684\u4fe1\u606f\u5c31\u4f1a\u505c\u6ede\u4e0d\u524d\u3002\u4f46\u201c\u76f8\u5173\u6027\u201d\u7684\u542b\u4e49\u662f\u4e0d\u65ad\u53d8\u5316\u7684\u3002\u5982\u679c\u6211\u9700\u8981\u65b0\u88e4\u5b50\uff0c\u53ef\u80fd\u4f1a\u6b22\u8fce\u670d\u88c5\u5e7f\u544a\u3002\u5982\u679c\u6211\u4e0d\u8fd9\u6837\u505a\uff0c\u90a3\u5c31\u592a\u70e6\u4eba\u4e86\u3002\n\u5173\u4e8e\u6536\u4ef6\u7bb1\uff0c\u60a8\u5fc5\u987b\u4e86\u89e3\u7684\u7b2c\u4e8c\u4ef6\u4e8b\u662f\uff0c\u51b3\u5b9a\u7b97\u6cd5\u5141\u8bb8\u63a5\u6536\u54ea\u4e9b\u7535\u5b50\u90ae\u4ef6\u7684\u4e0d\u4ec5\u4ec5\u662f\u60a8\u7684\u4e2a\u4eba\u9009\u62e9\u3002\u5728\u51b3\u5b9a\u54ea\u4e9b\u90ae\u4ef6\u901a\u8fc7\u60a8\u7684\u6536\u4ef6\u7bb1\u65f6\uff0cGmail \u548c\u5176\u4ed6\u7535\u5b50\u90ae\u4ef6\u8fd8\u4f1a\u6c47\u603b\u6240\u6709\u7535\u5b50\u90ae\u4ef6\u7528\u6237\u7684\u884c\u4e3a\u3002\u5982\u679c\u6ca1\u6709\u8db3\u591f\u591a\u7684\u4eba\u53c2\u4e0e\uff0c\u90a3\u4e48\u53d1\u4ef6\u4eba\u7684\u8bb8\u591a\u6216\u5168\u90e8\u6d88\u606f\u53ef\u80fd\u65e0\u6cd5\u5230\u8fbe\u6536\u4ef6\u4eba\u3002\u5982\u679c\u5f88\u591a\u4eba\u8fd9\u6837\u505a\uff0c\u5b83\u53ef\u4ee5\u8986\u76d6\u4e2a\u4eba\u504f\u597d\u3002\u4f60\u7684\u6536\u4ef6\u7bb1\u5c31\u50cf\u4e00\u4e2a\u8d2d\u7269\u4e2d\u5fc3\uff0c\u662f\u7684\uff0c\u4f46\u5b83\u4f1a\u4e0d\u65ad\u5730\u6539\u53d8\u5f62\u72b6\uff0c\u56e0\u4e3a\u5b83\u8bd5\u56fe\u4e3a\u76ee\u524d\u5728\u91cc\u9762\u7684\u8d2d\u7269\u8005\u5efa\u7acb\u5408\u9002\u7684\u5546\u5e97\u3002\u6d88\u8d39\u8005\u7535\u5b50\u90ae\u4ef6\u662f\u4e00\u9879\u96c6\u4f53\u4e8b\u52a1\uff0c\u7531\u8ba1\u7b97\u673a\u7cbe\u5fc3\u7b56\u5212\uff0c\u505a\u51fa\u9690\u85cf\u7684\u9009\u62e9\uff0c\u5f88\u5c11\u6709\u4eba\u53ef\u4ee5\u76f4\u63a5\u770b\u5230\uff0c\u5305\u62ec\u4f01\u4e1a\u672c\u8eab\u3002\u8fd9\u53ef\u80fd\u4f1a\u7ed9\u53d1\u4ef6\u4eba\u5e26\u6765\u707e\u96be\u6027\u7684\u540e\u679c\u3002\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u516c\u53f8 SparkPost \u7684\u6218\u7565\u603b\u76d1 April Mullen \u544a\u8bc9\u6211\uff0c\u4e00\u5bb6\u91d1\u878d\u670d\u52a1\u516c\u53f8\u6709\u6570\u767e\u4e07\u4efd\u62a5\u8868\u901a\u77e5\u88ab\u4e00\u5bb6\u4e3b\u8981\u7535\u5b50\u90ae\u4ef6\u63d0\u4f9b\u5546\u5c4f\u853d\uff0c\u5bfc\u81f4\u9700\u8981\u6602\u8d35\u7684\u6253\u5370\u5907\u4efd\u6765\u6ee1\u8db3\u76d1\u7ba1\u8981\u6c42\u3002\u50cf\u8fd9\u6837\u7684\u6545\u4e8b\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u6574\u4e2a\u54a8\u8be2\u548c\u8f6f\u4ef6\u670d\u52a1\u90e8\u95e8\uff08\u79f0\u4e3a\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u63d0\u4f9b\u5546\uff09\u5982\u96e8\u540e\u6625\u7b0b\u822c\u6d8c\u73b0\u4ee5\u89e3\u51b3\u53ef\u4ea4\u4ed8\u6027\u95ee\u9898\u3002\u8425\u9500\u4eba\u5458\u5f53\u7136\u4f1a\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u4f46\u4ed6\u4eec\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u8bd5\u56fe\u7406\u89e3\u548c\u9a6f\u670d Gmail \u548c\u96c5\u864e\u90ae\u4ef6\u8fd9\u4e9b\u5947\u602a\u7684\u3001\u4e0d\u53ef\u77e5\u7684\u673a\u5236\uff0c\u6700\u7ec8\u51b3\u5b9a\u4ed6\u4eec\u7684\u6d88\u606f\u662f\u5426\u80fd\u591f\u901a\u8fc7\u3002 Bonobos \u7b49\u54c1\u724c\u6839\u636e\u4ed6\u4eec\u80fd\u591f\u4ece\u4f20\u9012\u7684\u6d88\u606f\u4e2d\u63d0\u53d6\u7684\u6709\u9650\u4fe1\u53f7\uff08\u6216\u8005\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u7684\u5ba2\u6237\u5728\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u7ad9\u4e0a\u660e\u786e\u8bbe\u7f6e\u7684\u504f\u597d\uff09\u8c03\u6574\u4ed6\u4eec\u7684\u7535\u5b50\u90ae\u4ef6\u8425\u9500\u6d3b\u52a8\u3002\u9274\u4e8e\u6240\u6709\u8fd9\u4e9b\u673a\u5236\uff0cWhite \u548c Mullen \u7b49\u7535\u5b50\u90ae\u4ef6\u8425\u9500\u4e13\u5bb6\u8ba4\u4e3a\u62e5\u6709\u6240\u6709\u63a7\u5236\u6743\u7684\u662f\u6d88\u8d39\u8005\u3002\u4ed6\u4eec\u4e89\u8fa9\u8bf4\uff0c\u50cf\u6211\u8fd9\u6837\u7684\u4eba\u6536\u5230\u7535\u5b50\u90ae\u4ef6\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5b83\u4eec\u3002\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u6b63\u786e\u7684\u3002\u5373\u4f7f\u6211\u611f\u89c9\u5230\u6211\u6536\u5230\u4e86\u592a\u591a\u6765\u81ea Bonobos \u7684\u77ed\u88e4\u5e7f\u544a\u6216\u6765\u81ea Room &amp; Board \u7684\u8336\u51e0\u5e7f\u544a\uff0c\u4f46\u4e5f\u6709\u8db3\u591f\u591a\u7684\u5176\u4ed6\u4eba\u5bf9\u6b64\u611f\u5230\u6ee1\u610f\uff0c\u5426\u5219\u7535\u5b50\u90ae\u4ef6\u5c06\u65e0\u6cd5\u9001\u8fbe\u3002 \uff08Room &amp; Board \u62d2\u7edd\u5c31\u8fd9\u4e2a\u6545\u4e8b\u63a5\u53d7\u91c7\u8bbf\u3002Bonobos \u8425\u9500\u526f\u603b\u88c1 Helena Tse \u544a\u8bc9\u6211\uff0c\u8be5\u516c\u53f8\u7684\u9000\u8ba2\u7387\u201c\u4e0e\u884c\u4e1a\u6807\u51c6\u76f8\u6bd4\u975e\u5e38\u4f4e\u201d\uff0c\u4f46\u6ca1\u6709\u63d0\u4f9b\u5177\u4f53\u6570\u5b57\u3002\uff09\u6211\u53ef\u4ee5\u901a\u8fc7\u53d6\u6d88\u8ba2\u9605\u6216\u53d6\u6d88\u8ba2\u9605\u968f\u65f6\u5e2e\u52a9\u66f4\u6539\u8be5\u7b49\u5f0f\u3002\u4ee5\u8861\u91cf\u6211\u5174\u8da3\u7684\u673a\u5236\u8861\u91cf\uff0c\u6211\u4ecd\u7136\u611f\u5174\u8da3\u3002\u4f46\u662f\uff0c\u8fd9\u4e5f\u662f\u8352\u8c2c\u7684\u3002\u8425\u9500\u7535\u5b50\u90ae\u4ef6\u5835\u585e\u6bcf\u4e2a\u4eba\u7684\u6536\u4ef6\u7bb1\u7684\u6839\u672c\u539f\u56e0\u662f\uff0c\u7535\u5b50\u90ae\u4ef6\u8425\u9500\u4ee3\u8868\u4e86\u516c\u53f8\u4e0e\u5176\u5ba2\u6237\u548c\u90ae\u7bb1\u670d\u52a1\u4e92\u52a8\u7684\u96c6\u4f53\u7ed3\u679c\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4e0d\u4ee3\u8868\u6211\u3002\u8bb8\u591a\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u54c1\u724c\u4f3c\u4e4e\u5bf9\u7535\u5b50\u90ae\u4ef6\u8425\u9500\u7684\u4e13\u4e1a\u6280\u5de7\u5982\u6b64\u7740\u8ff7\uff0c\u4ee5\u81f3\u4e8e\u5c06\u5176\u4e0e\u5ba2\u6237\u4f53\u9a8c\u8131\u94a9\u3002\u5f53\u6211\u8ba9 Tse \u89e3\u91ca\u6211\u4e2a\u4eba\u53ef\u80fd\u4f1a\u6536\u5230\u8fd9\u4e48\u591a Bonobos \u7535\u5b50\u90ae\u4ef6\u7684\u8fc7\u7a0b\u65f6\uff0c\u5979\u5f15\u7528\u4e86 KPI\uff0c\u8fd9\u662f\u4e00\u79cd\u7528\u4e8e\u7ecf\u8425\u4f01\u4e1a\u7684\u7ee9\u6548\u6307\u6807\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u7528\u4e8e\u5224\u65ad\u5458\u5de5\u7ee9\u6548\u3002\u5979\u8fd8\u544a\u8bc9\u6211\uff0c\u8be5\u516c\u53f8\u201c\u4e0d\u65ad\u63a2\u7d22\u5982\u4f55\u6539\u8fdb\u6211\u4eec\u7684\u5de5\u5177\u5305\uff0c\u4ee5\u81ea\u52a8\u5316\u548c\u4f18\u5316\u9891\u7387\u4e1a\u52a1\u89c4\u5219\u3002\u201d\u50cf\u8fd9\u6837\u7684\u4e13\u4e1a\u5ba3\u8a00\u53ef\u80fd\u4f1a\u5728\u884c\u4e1a\u4f1a\u8bae\u4e0a\u5f15\u8d77\u70b9\u5934\uff0c\u4f46\u5b83\u8ba9\u6211\u626e\u6f14\u4e86\u6570\u636e\u751f\u6210\u8005\u7684\u89d2\u8272\uff0c\u800c\u4e0d\u662f\u4ed8\u8d39\u5ba2\u6237\u2014\u2014\u66f4\u4e0d\u7528\u8bf4\u4e00\u4e2a\u4e0d\u9700\u8981\u8fd9\u4e48\u591a\u9080\u8bf7\u6765\u53c2\u4e0e Riviera \u77ed\u88e4\u7684\u6d3b\u7740\u7684\u4eba\u4e86.\u7532\u9aa8\u6587\u7684 Chad White \u7528\u4e00\u79cd\u7a0d\u5fae\u4eba\u6027\u5316\u7684\u65b9\u5f0f\u6765\u8c08\u8bba\u7535\u5b50\u90ae\u4ef6\uff0c\u79f0\u4e4b\u4e3a\u5bf9\u8bdd\u3002\u4ed6\u8bf4\uff0c\u6253\u5f00\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u5c31\u50cf\u4e00\u4e2a\u4f1a\u8bdd\u70b9\u5934\u3002 \u201c\u4f60\u6b63\u5728\u548c\u67d0\u4eba\u8bf4\u8bdd\uff0c\u5982\u679c\u4f60\u770b\u5230\u6709\u4eba\u5728\u70b9\u5934\uff0c\u8fd9\u8868\u660e\u4ed6\u4eec\u6b63\u5728\u6ce8\u610f\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4ed6\u4eec\u559c\u6b22\u5b83\uff0c\u4f46\u8fd9\u8868\u660e\u4ed6\u4eec\u6b63\u5728\u5173\u6ce8\u3002\u201d\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u4f46\u5bf9\u8bdd\u662f\u53cc\u5411\u7684\u3002\u6211\u6000\u7591\u666e\u901a\u4eba\u662f\u5426\u7406\u89e3\u4ed6\u4eec\u5728\u7535\u5b50\u90ae\u4ef6\u5ba2\u6237\u7aef\u4e2d\u505a\u51fa\u7684\u201c\u624b\u52bf\u201d\u4f1a\u88ab\u53d1\u4ef6\u4eba\u89c6\u4e3a\u611f\u5174\u8da3\u7684\u4fe1\u53f7\u2014\u2014\u5c24\u5176\u662f\u8425\u9500\u4eba\u5458\u3001\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u63d0\u4f9b\u5546\u548c\u90ae\u7bb1\u63d0\u4f9b\u5546\u5bf9\u5b83\u4eec\u7684\u89e3\u91ca\u65b9\u5f0f\u3002\u6000\u7279\u5728\u8fd9\u4e00\u70b9\u4e0a\u4e0d\u540c\u610f\u6211\u7684\u89c2\u70b9\uff0c\u4f46\u4ed6\u786e\u5b9e\u627f\u8ba4\u8425\u9500\u4eba\u5458\u6709\u65f6\u4f1a\u8fc7\u4e8e\u6267\u7740\u4e8e\u4ed6\u4eec\u5e0c\u671b\u5ba2\u6237\u9075\u5faa\u7684\u201c\u9ec4\u91d1\u4e4b\u8def\u201d\u3002\u7535\u5b50\u90ae\u4ef6\u8425\u9500\u4eba\u5458\u53ef\u80fd\u6253\u7b97\u6253\u5f00\u5e76\u5355\u51fb\u4e00\u6761\u6d88\u606f\uff0c\u76f4\u63a5\u4fc3\u6210\u9500\u552e\u3002\u4f46\u6d88\u8d39\u8005\u884c\u4e3a\u6bd4\u8fd9\u8981\u6df7\u4e71\u5f97\u591a\u3002\u5c31\u50cf\u6211\u7684\u62b5\u62bc\u8d37\u6b3e\u7ecf\u7eaa\u4eba\u7684\u7535\u5b50\u90ae\u4ef6\u63d0\u9192\u6211\u4ed6\u7684\u5b58\u5728\uff0c\u4e5f\u8bb8\u6211\u5e94\u8be5\u5bc6\u5207\u5173\u6ce8\u62b5\u62bc\u8d37\u6b3e\u5229\u7387\uff0c\u4ee5\u9632\u518d\u878d\u8d44\u6709\u5438\u5f15\u529b\uff0c\u6240\u4ee5\u4e00\u4e2a\u54c1\u724c\u7684\u7535\u5b50\u90ae\u4ef6\u53ef\u80fd\u53ea\u662f\u63d0\u9192\u6211\u6211\u6253\u7b97\u5728\u67d0\u4e9b\u65f6\u5019\u4e70\u88e4\u5b50\u89c2\u70b9\u3002\u6000\u7279\u544a\u8bc9\u6211\uff0c\u6709\u4e9b\u4eba\u4f1a\u6536\u5230\u6765\u81ea\u96f6\u552e\u5546\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u7136\u540e\u8f6c\u800c\u53bb\u5546\u5e97\u3002\u7238\u7238\u53ef\u80fd\u4f1a\u6536\u5230\u82b1\u5e97\u7684\u6bcd\u4eb2\u8282\u8425\u9500\u4fe1\u606f\uff0c\u5e76\u63d0\u9192\u5b69\u5b50\u4eec\u7ed9\u4ed6\u4eec\u7684\u7956\u6bcd\u5bc4\u4e00\u5f20\u5361\u7247\u3002\u5176\u4ed6\u4eba\u53ef\u80fd\u53ea\u662f\u5c06\u90ae\u4ef6\u50a8\u5b58\u5728\u4ed6\u4eec\u7684 Gmail \u4fc3\u9500\u6587\u4ef6\u5939\u4e2d\uff0c\u5e76\u5728\u4ed6\u4eec\u60f3\u8d2d\u7269\u65f6\u4f7f\u7528\uff0c\u5c06\u6536\u4ef6\u7bb1\u672c\u8eab\u53d8\u6210\u8d2d\u7269\u4e4b\u65c5\u3002\u90ae\u7bb1\u63d0\u4f9b\u5546\u65e0\u6cd5\u5bfb\u627e\u8fd9\u4e9b\u7c7b\u578b\u7684\u4ea4\u4e92\u3002\n\u7535\u5b50\u90ae\u4ef6\u4e0d\u662f\u60a8\u60f3\u8981\u4ec0\u4e48\u7684\u6807\u5fd7\u3002\u5e76\u4e0d\u771f\u5730\u3002\u5b83\u4ee3\u8868\u4e86\u79d1\u6280\u516c\u53f8\u8ba4\u4e3a\u4f60\u60f3\u8981\u4ec0\u4e48\u7684\u75d5\u8ff9\uff0c\u5f3a\u52a0\u4e8e\u90a3\u4e9b\u522b\u65e0\u9009\u62e9\u53ea\u80fd\u91c7\u7528\u8fd9\u79cd\u7406\u7531\u7684\u54c1\u724c\uff0c\u4ee5\u514d\u4ed6\u4eec\u5b8c\u5168\u65e0\u6cd5\u63a5\u89e6\u5230\u4f60\u3002\u5f53\u8425\u9500\u7535\u5b50\u90ae\u4ef6\u6709\u6548\u65f6\uff0c\u6536\u5230\u7684\u611f\u89c9\u5f88\u68d2\u3002\u4f46\u8981\u505a\u5230\u8fd9\u4e00\u70b9\u9700\u8981\u4e0d\u592a\u53ef\u80fd\u7684\u660e\u661f\u7ec4\u5408\uff1a\u60a8\u4e0d\u65ad\u53d8\u5316\u7684\u613f\u671b\u3001\u90ae\u7bb1\u63d0\u4f9b\u5546\u4e0d\u65ad\u53d8\u5316\u7684\u6570\u636e\u548c\u7b97\u6cd5\u3001\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u516c\u53f8\u4ee3\u8868\u54c1\u724c\u7a81\u7834\u56f0\u5883\u7684\u80fd\u529b\uff0c\u4ee5\u53ca\u54c1\u724c\u7784\u51c6\u60a8\u7684\u80fd\u529b\u5728\u6700\u4f73\u65f6\u523b\u63d0\u4f9b\u76f8\u5173\u4fe1\u606f\u3002\u7ba1\u7406\u8fd9\u79cd\u60c5\u51b5\u7684\u6700\u4f73\u65b9\u6cd5\u53ef\u80fd\u662f\u4e0d\u518d\u76f8\u4fe1\u5b83\u53ef\u4ee5\u6216\u5e94\u8be5\u88ab\u7ba1\u7406\u3002\u6b63\u5982\u7535\u5b50\u90ae\u4ef6\u8425\u9500\u4eba\u5458\u8fc7\u4e8e\u5173\u6ce8\u6fc0\u52b1\u63aa\u65bd\u548c\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u53ef\u4f20\u9012\u6027\u4e00\u6837\uff0c\u4e5f\u8bb8\u7535\u5b50\u90ae\u4ef6\u6536\u4ef6\u4eba\u4e5f\u8fc7\u4e8e\u5173\u6ce8\u610f\u4e49\u548c\u76f8\u5173\u6027\u3002\u8c01\u5728\u4e4e\u4f60\u4e3a\u4ec0\u4e48\u6536\u5230\u4e00\u5c01\u6216 10 \u5c01\u8425\u9500\u7535\u5b50\u90ae\u4ef6\uff1f\u5c31\u50cf\u60a8\u5bf9\u8717\u725b\u90ae\u4ef6\u5e7f\u544a\u6240\u505a\u7684\u90a3\u6837\uff0c\u4e5f\u8bb8\u60a8\u5e94\u8be5\u5c3d\u53ef\u80fd\u5c11\u5730\u8003\u8651\u8fd9\u4e00\u70b9\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8425\u9500\u4eba\u5458\u4e0d\u542c\u3002\u4ed6\u4eec\u53ea\u80fd\u5728\u60a8\u70b9\u51fb\u65f6\u542c\u5230\u60a8\u7684\u58f0\u97f3\u3002", "note_en": "It feels like every company and organization I\u2019ve ever transacted with sends me email every week. Some every day, even. Some multiple times a day. My mortgage broker emails on my birthday and holidays. So does my dentist. Certain retailers email much more often. The home-furnishings company Room &amp; Board is one of them, hoping I\u2019ll upgrade to a lounge-worthy sectional or entreating me to meet artisanal glassblowers from Minnesota. In the past week alone, the clothing retailer Bonobos messaged me nine times, hawking Riviera shorts, trending shirts, and even a chino they promise will \u201cbring out your best self.\u201d\n It\u2019s ridiculous. Technically, I asked for these emails. I wrote loans with my mortgage broker. I\u2019ve bought furniture from Room &amp; Board and pants from Bonobos. And, yes, I\u2019m aware that I can unsubscribe or block them at any time. But why so  many emails? How is it possible that customers would find this appealing?\n To state the obvious: Companies want you to buy their stuff, and email is a good way to get it in front of you. Even so, the reason you see those emails in the first place is far more convoluted than you might think, involving layers of wonkily interoperating technology and unseen struggles for power and control in the email business. The result\u2014more missives about \u201cPants Tailored to Your Busy Schedule\u201d\u2014isn\u2019t an intentional strategy so much as the exhaust of a grotesque contraption. And we\u2019re all caught in the gears.\n The first thing you have to understand about your inbox is that the things you do with emails have a direct impact on whether you\u2019ll even see the next one. The three major companies behind the email platforms used by most Americans\u2014Google (Gmail), Microsoft (Outlook and Hotmail), and Verizon (AOL and Yahoo Mail)\u2014all have designed their products to protect your inbox with software that suppresses messages you don\u2019t want. Opening an email and clicking on a link inside it might tell the software\u2019s algorithms that you want more like it. So might scrolling down the body of an email, or spending a certain amount of time reading it, or starring it, or filing it into a folder. Ignoring other messages, meanwhile, can lead the mailbox software to start junking them, or even blocking the senders.\n Email is one of the few ways companies can reach their customers directly. In fact, people overwhelmingly say that the way they want to hear from brands is by email, Chad S. White, the head of research for Oracle Marketing, told me. That\u2019s why the mailbox software started suppressing messages\u2014to protect people from companies\u2019 temptation to send too many emails. In response, email marketers obsess over \u201cdeliverability,\u201d or how the content and frequency of their emails might help those messages actually hit your inbox in the first place. But  that process has created new and weird feedback loops, in which some companies and certain messages might be able to reach your inbox more readily than before, while others get junked\u2014condemned to spam, deleted, or the like\u2014before you see them.\n As a result, your personal inbox gradually has become less like a mailbox and more like a wormhole into every business relationship you maintain: your bank; your utility provider; your supermarket; your favorite boutiques, restaurants, housewares providers, and all the rest. It\u2019s your own digital commercial district: Opening up email is akin to visiting a little mall in your browser or on your phone, where every shop is right next to every other. A few years ago, Gmail made that metaphor concrete by introducing the promotions folder, recasting spam as marketing. When you\u2019re in the mood to shop, just drop into promotions and see what\u2019s on offer (or search for a favorite brand to see the latest wares).\n If businesses and tech companies were on the same page, this would be the end of the story. The algorithms churn until you\u2019ve interacted with enough promotional emails that every store you like delivers perfectly timed messages that cater to your every need and desire. Fulfilled, happy, you purchase every item advertised to you. Of course, this is not actually what happens. The irony of people\u2019s supposed desire to receive emails from their favorite companies is that  more than half of consumers in the United States and Canada say they receive too much promotional email. Personalization is supposed to make relevant messages get through and irrelevant ones falter. But what \u201crelevance\u201d means is constantly changing. If I need new pants, an apparel ad might be welcome. If I don\u2019t, it\u2019s just annoying.\n The second thing you have to understand about your inbox is that it\u2019s not just your individual choices that dictate which emails the algorithms let in. Gmail and others also aggregate the behavior of  all email users when deciding which messages get through to your inbox. If enough people don\u2019t engage, then many or all of a sender\u2019s messages might not reach their recipients. If many people do, it can override individual preferences. Your inbox is like a shopping mall, yes, but one that\u2019s constantly shape-shifting as it tries to erect the right stores for the shoppers currently inside. Consumer email is a collective affair, one orchestrated by computers making hidden choices few people can see directly, including businesses themselves.\n That can have catastrophic results for senders. April Mullen, a director of strategy at the email-sending firm SparkPost, told me about a financial-services firm that had millions of statement notices blocked by a major email provider, resulting in an expensive print backup to meet regulatory requirements. Stories like this one explain why a whole sector of consulting and software services, known as email service providers, has sprung up to address deliverability. Marketers send emails, sure, but they do so in the context of trying to understand and tame the weird, unknowable machinery of the Gmails and Yahoo Mails that, ultimately, decide whether their messages ever get through. Brands such as Bonobos adjust their email-marketing campaigns in accordance with the limited signals they are able to extract from the messages that get delivered (or, in some cases, the preferences their customers set explicitly on an app or a website).\n Given all that machinery, email-marketing experts such as White and Mullen feel like it\u2019s the consumers who have all the control. They argue that people like me receive emails because we  want them. That\u2019s partly true. Even if I sense that I\u2019m getting too many ads for shorts from Bonobos or end tables from Room &amp; Board, enough other folks must be fine with it, or the emails wouldn\u2019t arrive. (Room &amp; Board declined to be interviewed for this story. Helena Tse, the vice president of marketing at Bonobos, told me the company\u2019s unsubscribe rate is \u201cextremely low compared to the industry standard,\u201d but did not provide specific numbers.) I can help change that equation at any time by junking or unsubscribing. As measured by the machinery that measures my interest, I\u2019m still interested.\n But also, that is absurd. The fundamental reason marketing emails are clogging up everyone\u2019s inboxes is that email marketing represents the collective outcome of a company\u2019s interactions with its customers and the mailbox services; it does not, in other words, represent  me.\n Many email-sending brands seem to have become so obsessed with the professional gamesmanship of email marketing that they have decoupled it from the customer\u2019s experience. When I asked Tse to explain the process by which I, personally, might receive so many Bonobos emails, she cited KPIs, a type of performance indicator used to run businesses and, in many cases, judge employee performance. She also told me that the company \u201ccontinuously explores how to better our toolkit to automate and optimize the frequency business rules.\u201d A professional proclamation such as this might elicit nods at an industry conference, but it casts me in the role of a generator of data rather than a paying customer\u2014let alone a living person who doesn\u2019t need so many invitations to partake of Riviera shorts.\n Oracle\u2019s Chad White has a slightly more humane way of talking about email, calling it a conversation. Opening an email, he says, is like a conversational nod. \u201cYou\u2019re talking to someone, and if you see someone nodding, it indicates that they are paying attention. It doesn\u2019t mean they like it, but it shows that they are paying attention.\u201d That makes sense, but a conversation is a two-way street. I doubt that ordinary folks understand that the \u201cgestures\u201d they make in their email client are read as signals of interest by the senders\u2014especially in the way that marketers, email service providers, and mailbox providers interpret them.\n White disagreed with me on that point, but he did admit that marketers sometimes become overly wed to the \u201cgolden paths\u201d they hope customers will follow. An email marketer might intend a message to be opened and clicked, leading directly to a sale. But consumer behavior is a lot more chaotic than that. Just like the email from my mortgage broker reminds me that he exists, and that maybe I should keep my eye on mortgage rates in case a refinance is appealing, so an email from a brand might simply remind me that I meant to buy pants at some point. Some people, White tells me, receive an email from a retailer and go to the store instead. Dad might receive a Mother\u2019s Day marketing message from a florist and remind the kids to send a card to their grandmother. Others might just hoard messages in their Gmail promotions folder and dip in when they feel like shopping, turning the inbox into a shopping excursion in its own right. The mailbox providers can\u2019t look for those kinds of interactions.\n Email isn\u2019t a sign of what you want. Not really. It represents the traces of what technology companies think you want, as imposed upon the brands who have no choice but to adopt that rationale lest they lose access to you entirely. When a marketing email is effective, it feels great to receive. But getting it right requires an unlikely alignment of the stars: your shifting desires, the mailbox providers\u2019 changing data and algorithms, the email-sending companies\u2019 ability to cut through that murk on behalf of brands, and the brands\u2019 ability to target you with relevant messages at the optimal moment.\n The best way to manage this situation might be to stop believing that it can or should be managed. Just as the email marketers are too obsessed with incentives and the email service providers with deliverability, perhaps email recipients are too preoccupied with sense and relevance. Who cares why you got one marketing email, or 10? Like you do with snail-mail ads, maybe you should think about this as little as possible. The marketers aren\u2019t listening, anyway. They can only hear you when you click.", "posttime": "2021-08-06 10:45:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5546\u5e97,thinking,\u7535\u5b50\u90ae\u4ef6", "title": "\u5546\u5e97\u751a\u81f3\u5728\u8003\u8651\u6240\u6709\u8fd9\u4e9b\u7535\u5b50\u90ae\u4ef6\uff1f", "title_en": "What Are Stores Even Thinking with All These Emails?", "transed": 1, "url": "https://www.theatlantic.com/technology/archive/2021/08/why-stores-send-you-so-many-emails-spam/619670/", "via": "", "real_tags": ["\u5546\u5e97", "thinking", "\u7535\u5b50\u90ae\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "7a9ef95dba2909b1ca2a0c0f56e7b2e8.jpg", "infoid": 1071702, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c06\u5176\u89c6\u4e3a\u5229\u57fa\u95ee\u9898\u4f1a\u4f7f\u60a8\u7684\u516c\u53f8\u9762\u4e34\u5de8\u5927\u98ce\u9669\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u8ba9\u4eba\u4eec\u8d2d\u4e70\u3002\u8bb8\u591a\u7ec4\u7ec7\u5df2\u7ecf\u5f00\u59cb\u4e86\u89e3\u4eba\u5de5\u667a\u80fd\u9053\u5fb7\u98ce\u9669\u8ba1\u5212\u7684\u4e1a\u52a1\u5fc5\u8981\u6027\u3002\u65e0\u6570\u65b0\u95fb\u62a5\u9053\u2014\u2014\u4ece\u9519\u8bef\u548c\u6b67\u89c6\u6027\u7684\u9762\u90e8\u8bc6\u522b\u5230\u4fb5\u72af\u9690\u79c1\uff0c\u518d\u5230\u5177\u6709\u6539\u53d8\u751f\u6d3b\u540e\u679c\u7684\u9ed1\u5323\u5b50\u7b97\u6cd5\u2014\u2014\u5df2\u5c06\u5176\u63d0\u4e0a\u4e86\u8463\u4e8b\u4f1a\u3001\u9996\u5e2d\u6267\u884c\u5b98\u548c\u9996\u5e2d\u6570\u636e\u548c\u5206\u6790\u5b98\u7684\u8bae\u7a0b\u3002\u7136\u800c\uff0c\u5927\u591a\u6570\u9886\u5bfc\u8005\u4e0d\u660e\u767d\u7684\u662f\uff0c\u89e3\u51b3\u8fd9\u4e9b\u98ce\u9669\u9700\u8981\u5728\u6574\u4e2a\u7ec4\u7ec7\u4e2d\u63d0\u9ad8\u5bf9\u8fd9\u4e9b\u98ce\u9669\u7684\u8ba4\u8bc6\u3002\u90a3\u4e9b\u660e\u767d\u8fd9\u4e00\u70b9\u7684\u4eba\u5f80\u5f80\u4e0d\u77e5\u9053\u5982\u4f55\u7ee7\u7eed\u3002\u5bf9\u4e8e\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u7684\u516c\u53f8\u6765\u8bf4\uff0c\u8fd9\u9700\u8981\u6210\u4e3a\u91cd\u4e2d\u4e4b\u91cd\u3002\u8d85\u8fc7 50% \u7684\u9ad8\u7ba1\u62a5\u544a\u79f0\uff0c\u9274\u4e8e\u5176\u76ee\u524d\u8bc6\u522b\u548c\u51cf\u8f7b\u8fd9\u4e9b\u98ce\u9669\u7684\u51c6\u5907\u6c34\u5e73\uff0c\u4ed6\u4eec\u5bf9\u5176\u7ec4\u7ec7\u4e2d\u4eba\u5de5\u667a\u80fd\u7684\u9053\u5fb7\u548c\u58f0\u8a89\u98ce\u9669\u5b58\u5728\u201c\u91cd\u5927\u201d\u6216\u201c\u6781\u7aef\u201d\u62c5\u5fe7\u3002\u8fd9\u610f\u5473\u7740\u5efa\u7acb\u4e00\u4e2a\u6bcf\u4e2a\u4eba\u90fd\u63a5\u53d7\u7684\u4eba\u5de5\u667a\u80fd\u9053\u5fb7\u98ce\u9669\u8ba1\u5212\u5bf9\u4e8e\u90e8\u7f72\u4eba\u5de5\u667a\u80fd\u662f\u5fc5\u8981\u7684\u3002\u505a\u5f97\u597d\uff0c\u63d0\u9ad8\u610f\u8bc6\u65e2\u53ef\u4ee5\u5728\u6218\u672f\u5c42\u9762\u51cf\u8f7b\u98ce\u9669\uff0c\u53c8\u6709\u52a9\u4e8e\u6210\u529f\u5b9e\u65bd\u66f4\u901a\u7528\u7684\u4eba\u5de5\u667a\u80fd\u9053\u5fb7\u98ce\u9669\u8ba1\u5212\u3002\u9996\u5148\uff0c\u91c7\u8d2d\u5b98\u5458\u662f\u4eba\u5de5\u667a\u80fd\u9053\u5fb7\u98ce\u9669\u7684\u6700\u5927\u6765\u6e90\u4e4b\u4e00\uff0c\u4e5f\u662f\u6700\u5bb9\u6613\u88ab\u5ffd\u89c6\u7684\u6765\u6e90\u4e4b\u4e00\u3002 AI \u4f9b\u5e94\u5546\u9500\u552e\u5230\u60a8\u7ec4\u7ec7\u4e2d\u7684\u6bcf\u4e2a\u90e8\u95e8\uff0c\u5c24\u5176\u662f\u4eba\u529b\u8d44\u6e90\u3001\u8425\u9500\u548c\u8d22\u52a1\u90e8\u95e8\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7684\u4eba\u529b\u8d44\u6e90\u91c7\u8d2d\u5b98\u4e0d\u77e5\u9053\u5982\u4f55\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\u6765\u5ba1\u67e5 AI \u4ea7\u54c1\uff0c\u90a3\u4e48\u4ed6\u4eec\u53ef\u80fd\u4f1a\u5728\u62db\u8058\u8fc7\u7a0b\u4e2d\u5f15\u5165\u6b67\u89c6\u53d7\u4fdd\u62a4\u5b50\u7fa4\u4f53\u7684\u98ce\u9669\u3002\u5176\u6b21\uff0c\u9ad8\u7ea7\u9886\u5bfc\u8005\u901a\u5e38\u4e0d\u5177\u5907\u53d1\u73b0\u7ec4\u7ec7 AI \u4e2d\u7684\u9053\u5fb7\u7f3a\u9677\u6240\u9700\u7684\u77e5\u8bc6\uff0c\u4ece\u800c\u4f7f\u516c\u53f8\u5728\u58f0\u8a89\u548c\u6cd5\u5f8b\u4e0a\u90fd\u9762\u4e34\u98ce\u9669\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u4ea7\u54c1\u56e2\u961f\u51c6\u5907\u90e8\u7f72\u4eba\u5de5\u667a\u80fd\uff0c\u4f46\u9996\u5148\u9700\u8981\u5f97\u5230\u4e00\u4f4d\u5bf9\u4ea7\u54c1\u7684\u9053\u5fb7\u98ce\u9669\u77e5\u4e4b\u751a\u5c11\u7684\u9ad8\u7ba1\u7684\u6279\u51c6\uff0c\u90a3\u4e48\u54c1\u724c\u7684\u58f0\u8a89\uff08\u66f4\u4e0d\u7528\u8bf4\u9ad8\u7ba1\uff09\u53ef\u80fd\u9762\u4e34\u9ad8\u98ce\u9669\u3002\u7b2c\u4e09\uff0c\u4eba\u5de5\u667a\u80fd\u9053\u5fb7\u98ce\u9669\u8ba1\u5212\u9700\u8981\u77e5\u8bc6\u6e0a\u535a\u7684\u6570\u636e\u79d1\u5b66\u5bb6\u548c\u5de5\u7a0b\u5e08\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u4e86\u89e3\u4eba\u5de5\u667a\u80fd\u7684\u9053\u5fb7\u98ce\u9669\uff0c\u4ed6\u4eec\u53ef\u80fd\u65e0\u6cd5\u7406\u89e3\u8ba1\u5212\u4e2d\u9610\u660e\u7684\u65b0\u804c\u8d23\uff0c\u6216\u8005\u4ed6\u4eec\u53ef\u80fd\u7406\u89e3\u4f46\u4e0d\u4e86\u89e3\u5176\u91cd\u8981\u6027\uff0c\u4ece\u800c\u5bfc\u81f4\u4e0d\u8ba4\u771f\u5bf9\u5f85\u5b83\u4eec\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u60a8\u7684\u7ec4\u7ec7\u4e86\u89e3 AI \u7684\u9053\u5fb7\u3001\u58f0\u8a89\u548c\u6cd5\u5f8b\u98ce\u9669\uff0c\u4ed6\u4eec\u5c31\u4f1a\u660e\u767d\u5b9e\u65bd\u8de8\u7ec4\u7ec7\u7cfb\u7edf\u5730\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u8ba1\u5212\u7684\u91cd\u8981\u6027\u3002\u5f88\u597d\u5730\u521b\u5efa\u8fd9\u79cd\u8de8\u7ec4\u7ec7\u610f\u8bc6\u9700\u8981\u5de5\u4f5c\u3002\u5b83\u9700\u8981\u4e00\u81f4\u7684\u4fe1\u606f\uff0c\u8be5\u4fe1\u606f\u4e5f\u9488\u5bf9\u6bcf\u4e2a\u7fa4\u4f53\u7684\u5177\u4f53\u95ee\u9898\u91cf\u8eab\u5b9a\u5236\u3002\u6bd5\u7adf\uff0c\u6700\u9ad8\u7ba1\u7406\u5c42\u7684\u5229\u76ca\u548c\u804c\u8d23\u4e0d\u540c\u4e8e\u4ea7\u54c1\u6240\u6709\u8005\u548c\u8bbe\u8ba1\u5e08\u7684\u5229\u76ca\u548c\u804c\u8d23\uff0c\u4e5f\u4e0d\u540c\u4e8e\u6570\u636e\u79d1\u5b66\u5bb6\u548c\u5de5\u7a0b\u5e08\u7684\u5229\u76ca\u548c\u804c\u8d23\u2014\u2014\u5bf9\u4ed6\u4eec\u6240\u6709\u4eba\u8bf4\u540c\u4e00\u79cd\u8bed\u8a00\u5bfc\u81f4\u4ed6\u4eec\u8c01\u4e5f\u4e0d\u8bf4\u3002\u8be5\u4fe1\u606f\u4e0d\u80fd\u662f\u80a4\u6d45\u7684\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u4eba\u4eec\u8ba4\u4e3a AI \u9053\u5fb7\u662f\u516c\u5173\u95ee\u9898\u6216\u5229\u57fa\u95ee\u9898\u3002\u5b83\u9700\u8981\u4e00\u4e2a\u660e\u786e\u7684\u6700\u9ad8\u5c42\u9886\u5bfc\uff0c\u8d1f\u8d23\u5236\u5b9a\u548c\u76d1\u7763\u6218\u7565\u7684\u6267\u884c\uff0c\u4ece\u800c\u5728\u6574\u4e2a\u7ec4\u7ec7\u8303\u56f4\u5185\u63d0\u9ad8\u610f\u8bc6\u2014\u2014\u5982\u679c\u4fe1\u606f\u4e0d\u662f\u6765\u81ea\u9ad8\u5c42\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u4e0d\u4f1a\u88ab\u8ba4\u771f\u5bf9\u5f85\u3002\u8fd9\u662f\u7ec4\u7ec7\u5e94\u8be5\u5f00\u59cb\u7684\u5730\u65b9\u3002\n\u786e\u4fdd\u6bcf\u4f4d\u5458\u5de5\u90fd\u4e86\u89e3\u98ce\u9669\u5e76\u611f\u53d7\u5230\u7ec4\u7ec7\u5185\u4eba\u5de5\u667a\u80fd\u7684\u6210\u529f\u81f3\u5173\u91cd\u8981\u3002\u4ed6\u4eec\u4e0d\u4ec5\u9700\u8981\u610f\u8bc6\u5230\u8fd9\u4e9b\u95ee\u9898\u7684\u5b58\u5728\uff0c\u8fd8\u9700\u8981\u77e5\u9053\u8fd9\u4e9b\u98ce\u9669\u5982\u4f55\u5f71\u54cd\u4ed6\u4eec\u7684\u7279\u5b9a\u5de5\u4f5c\u4ee5\u53ca\u5b83\u5982\u4f55\u9002\u5e94\u4ed6\u4eec\u7684\u5de5\u4f5c\u63cf\u8ff0\u3002\u5bf9\u4e8e\u4eba\u529b\u8d44\u6e90\u90e8\u95e8\u7684\u4eba\u6765\u8bf4\uff0c\u77e5\u9053\u4ed6\u4eec\u9700\u8981\u96c7\u7528\u9002\u5408\u8fd9\u4efd\u5de5\u4f5c\u7684\u4eba\u4ee5\u53ca\u53ef\u80fd\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u4eba\u662f\u4e00\u56de\u4e8b\uff0c\u540c\u65f6\u987a\u4fbf\u63d0\u4e00\u4e0b\uff0c\u8fd8\u8981\u610f\u8bc6\u5230\u4eba\u5de5\u667a\u80fd\u7684\u9053\u5fb7\u98ce\u9669\u3002\u8be5\u4eba\u5c06\u8bc6\u522b\u548c\u51cf\u8f7b\u8fd9\u4e9b\u98ce\u9669\u89c6\u4e3a\u5176\u5de5\u4f5c\u7684\u4e00\u90e8\u5206\u662f\u53e6\u4e00\u56de\u4e8b\uff0c\u4f8b\u5982\uff0c\u5979\u77e5\u9053\u8d1f\u8d23\u4efb\u5730\u5c65\u884c\u804c\u8d23\u5305\u62ec\u8981\u6c42\u63d0\u4f9b\u62db\u8058\u8f6f\u4ef6\u7684 AI \u4f9b\u5e94\u5546\u63d0\u4f9b\u6709\u5173\u4ed6\u4eec\u5982\u4f55\u8bc6\u522b\u548c\u51cf\u8f7b\u504f\u89c1\u7684\u6587\u6863\u3002\u4ed6\u4eec\u7684\u4eba\u5de5\u667a\u80fd\u3002\u60a8\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u516d\u9879\u63aa\u65bd\u6765\u5efa\u7acb\u7ec4\u7ec7\u610f\u8bc6\u5e76\u4ee5\u6b63\u786e\u7684\u65b9\u5f0f\u652f\u6301\u3002 1\u3001\u6d88\u9664\u5bf9\u4eba\u5de5\u667a\u80fd\u548c\u4eba\u5de5\u667a\u80fd\u4f26\u7406\u7684\u6050\u60e7\u3002\u7ec4\u7ec7\u9762\u4e34\u7684\u4e00\u4e2a\u969c\u788d\u662f IT \u4ee5\u5916\u7684\u4eba\u53ef\u80fd\u4f1a\u88ab\u8fd9\u4e2a\u8bdd\u9898\u5413\u5012\u3002 \u201c\u4eba\u5de5\u667a\u80fd\u201d\u3001\u201c\u673a\u5668\u5b66\u4e60\u201d\u548c\u201c\u6b67\u89c6\u6027\u7b97\u6cd5\u201d\u4f3c\u4e4e\u662f\u4ee4\u4eba\u751f\u754f\u7684\u6982\u5ff5\uff0c\u5bfc\u81f4\u4eba\u4eec\u5b8c\u5168\u56de\u907f\u8fd9\u4e2a\u8bdd\u9898\u3002\u5982\u679c\u4e0d\u662f\u6280\u672f\u57fa\u7840\uff0c\u4eba\u4eec\u5fc5\u987b\u719f\u6089\u5e76\u719f\u6089\u8fd9\u4e9b\u6982\u5ff5\uff0c\u8fd9\u5bf9\u4e8e\u5efa\u7acb\u7ec4\u7ec7\u610f\u8bc6\u81f3\u5173\u91cd\u8981\u3002\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u5177\u5907\u57fa\u672c\u7684\u4eba\u5de5\u667a\u80fd\u7d20\u517b\u5e76\u4e0d\u662f\u5f88\u96be\u3002\u6bd5\u7adf\uff0c\u673a\u5668\u5b66\u4e60\u672c\u8d28\u4e0a\u662f\u4f8b\u4e3e\u5b66\u4e60\uff0c\u5927\u5bb6\u90fd\u8033\u719f\u80fd\u8be6\u3002\u540c\u6837\uff0c\u56e0\u4e3a\u6ca1\u6709\u8db3\u591f\u7684\u4f8b\u5b50\u800c\u64c5\u957f\u67d0\u4e8b\u4e5f\u662f\u6bcf\u4e2a\u4eba\u90fd\u719f\u6089\u7684\u3002\u5982\u679c\u60a8\u6b63\u5728\u5411\u4eba\u4eec\u4f20\u8fbe\u5982\u4f55\u521b\u5efa\u6b67\u89c6\u6027\u7b97\u6cd5\uff0c\u60a8\u53ef\u4ee5\u89e3\u91ca\u4e00\u4e9b\u662f\u8f6f\u4ef6\u6ca1\u6709\u8db3\u591f\u7684\u793a\u4f8b\u53ef\u4f9b\u5b66\u4e60\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u8f6f\u4ef6\u4f1a\u51fa\u9519\uff08\u4f8b\u5982\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u9ed1\u4eba\u5973\u6027\u9762\u90e8\u793a\u4f8b\uff09\u4e3a\u60a8\u7684\u9762\u90e8\u8bc6\u522b\u8f6f\u4ef6\u5bfc\u81f4\u8be5\u8f6f\u4ef6\u5728\u6311\u9009\u9ed1\u4eba\u5973\u6027\u9762\u90e8\u65b9\u9762\u975e\u5e38\u7cdf\u7cd5\uff09\u3002\u66f4\u4e00\u822c\u5730\u8bf4\uff0c\u4eba\u5de5\u667a\u80fd\u7684\u8bb8\u591a\u9053\u5fb7\u98ce\u9669\u53ca\u5176\u5404\u79cd\u6765\u6e90\u90fd\u53ef\u4ee5\u5411\u975e\u6280\u672f\u53d7\u4f17\u9610\u660e\uff0c\u5e76\u8ba9\u5458\u5de5\u6709\u4fe1\u5fc3\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\u3002\u8981\u6c42\u60a8\u7684\u4eba\u529b\u8d44\u6e90\u548c\u8425\u9500\u4eba\u5458\u57fa\u672c\u719f\u6089 AI \u7684\u5de5\u4f5c\u539f\u7406\u4ee5\u53ca AI \u9053\u5fb7\u98ce\u9669\u7684\u4ea7\u751f\u65b9\u5f0f\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\u3002\u7136\u800c\uff0c\u5927\u591a\u6570\u7ec4\u7ec7\u5df2\u7ecf\u5bf9\u7f51\u7edc\u5b89\u5168\u98ce\u9669\u4ea7\u751f\u4e86\u5f88\u5927\u7684\u8ba4\u8bc6\uff0c\u8fd9\u4e5f\u9700\u8981\u7f51\u7edc\u5b89\u5168\u7d20\u517b\uff0c\u5728\u516c\u53f8\u627f\u8bfa\u5b9e\u73b0\u5b83\u4e4b\u524d\uff0c\u8fd9\u4f3c\u4e4e\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u7684\u5458\u5de5\u4e0d\u4e86\u89e3\u57fa\u7840\u77e5\u8bc6\uff0c\u4ed6\u4eec\u5c06\u4e0d\u77e5\u9053\u5728\u4ed6\u4eec\u8fd9\u6837\u505a\u81f3\u5173\u91cd\u8981\u65f6\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\uff08\u4f8b\u5982 AI \u4f9b\u5e94\u5546\uff09\u3002 2. \u4e3a\u60a8\u7684\u542c\u4f17\u91cf\u8eab\u5b9a\u5236\u60a8\u7684\u6c9f\u901a\u65b9\u5f0f\u3002\u5c06\u81ea\u5df1\u89c6\u4e3a\u54c1\u724c\u58f0\u8a89\u7ba1\u5bb6\u7684\u9ad8\u7ea7\u9886\u5bfc\u8005\u6709\u5174\u8da3\u907f\u514d\u5a01\u80c1\u54c1\u724c\u58f0\u8a89\u7684\u98ce\u9669\u3002\u5bf9\u4ed6\u4eec\u6765\u8bf4\uff0c\u4f7f\u7528\u201c\u9053\u5fb7\u548c\u58f0\u8a89\u98ce\u9669\u201d\u7684\u8bed\u8a00\u5bf9\u4e8e\u4ed6\u4eec\u4e86\u89e3 AI \u9053\u5fb7\u4e0e\u4ed6\u4eec\u7684\u62c5\u5fe7\u548c\u8d23\u4efb\u7684\u76f8\u5173\u6027\u5f88\u91cd\u8981\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4ea7\u54c1\u8bbe\u8ba1\u5e08\u66f4\u5173\u5fc3\u7684\u662f\u907f\u514d\u98ce\u9669\uff0c\u800c\u4e0d\u662f\u5236\u4f5c\u201c\u9177\u201d\u548c\u6709\u7528\u7684\u4ea7\u54c1\u3002\u901a\u8fc7\u8bbe\u8ba1\u6765\u89e3\u91ca\u4eba\u5de5\u667a\u80fd\u4f26\u7406\u5982\u4f55\u6539\u8fdb\u4ed6\u4eec\u7684\u4ea7\u54c1\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u8d8a\u6765\u8d8a\u591a\u7684\u4ef7\u503c\u9a71\u52a8\u578b\u6d88\u8d39\u8005\u548c\u4e00\u822c\u516c\u6c11\u6765\u8bf4\uff0c\u53ef\u80fd\u662f\u4e00\u79cd\u975e\u5e38\u6709\u6548\u7684\u63a5\u89e6\u53d7\u4f17\u7684\u65b9\u5f0f\u3002\u6700\u540e\uff0c\u6570\u636e\u79d1\u5b66\u5bb6\u548c\u5de5\u7a0b\u5e08\u9700\u8981\u6709\u6548\u7684\u7a33\u5065\u6a21\u578b\u3002\u8c08\u8bba\u4ed6\u4eec\u7684\u8bed\u8a00\u610f\u5473\u7740\u89e3\u91ca\u6709\u504f\u89c1\u7684\u7b97\u6cd5\u548c\u9ed1\u5323\u5b50\u95ee\u9898\u5982\u4f55\u964d\u4f4e\u5de5\u5177\u548c/\u6216\u5176\u91c7\u7528\u7684\u80fd\u529b\u3002\u6ca1\u6709\u4eba\u613f\u610f\u6784\u5efa\u4e00\u4e2a\u4e0d\u51c6\u786e\u6216\u672a\u4f7f\u7528\u7684\u6a21\u578b\u3002\u63d0\u4f9b\u6bcf\u4e2a\u53d7\u4f17\u90fd\u53ef\u4ee5\u4e0e\u4e4b\u76f8\u5173\u7684 AI \u51fa\u9519\u7684\u4f8b\u5b50\u548c\u6545\u4e8b\u4e5f\u5f88\u91cd\u8981\u3002\u8fd9\u4e0d\u4ec5\u9700\u8981\u6d89\u53ca\u516c\u5173\u707e\u96be\u3002\u4f8b\u5982\uff0c\u5b83\u8fd8\u53ef\u80fd\u5305\u62ec\u4e9a\u9a6c\u900a\u65e0\u6cd5\u5145\u5206\u51cf\u8f7b\u5176\u4eba\u5de5\u667a\u80fd\u62db\u8058\u8f6f\u4ef6\u4e2d\u7684\u504f\u89c1\uff0c\u8fd9\u4ee4\u4eba\u94a6\u4f69\u5730\u5bfc\u81f4\u4e9a\u9a6c\u900a\u505c\u6b62\u4e86\u8be5\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u90e8\u7f72\u53ef\u80fd\u5bf9\u6c42\u804c\u8005\u548c\u54c1\u724c\u90fd\u6709\u5bb3\u7684\u4e1c\u897f\u3002\u6b64\u5916\uff0c\u60a8\u5e94\u8be5\u5c3d\u53ef\u80fd\u4f7f\u7528\u60a8\u6240\u5728\u884c\u4e1a\u7279\u6709\u7684\u793a\u4f8b\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4eba\u5de5\u667a\u80fd\u5df2\u7ecf\u610f\u8bc6\u5230\u533b\u7597\u4fdd\u5065\u9886\u57df\u7684\u67d0\u4e9b\u9053\u5fb7\u98ce\u9669\uff0c\u4f46\u5982\u679c\u60a8\u4e0e\u91d1\u878d\u79d1\u6280\u516c\u53f8\u7684\u6210\u5458\u4ea4\u8c08\uff0c\u5458\u5de5\u5c06\u66f4\u591a\u5730\u4e0e\u540c\u884c\u516c\u53f8\u7684\u6545\u4e8b\u8054\u7cfb\u8d77\u6765\u3002\n3. \u5c06\u60a8\u5efa\u7acb\u7ec4\u7ec7\u610f\u8bc6\u7684\u5c1d\u8bd5\u4e0e\u516c\u53f8\u7684\u4f7f\u547d\u6216\u76ee\u7684\u8054\u7cfb\u8d77\u6765\u3002\u5982\u679c\u60a8\u7684\u4f7f\u547d/\u76ee\u7684\u5df2\u7ecf\u878d\u5165\u60a8\u7684\u7ec4\u7ec7\u6587\u5316\uff0c\u8bf7\u5c06\u60a8\u5bf9 AI \u9053\u5fb7\u7684\u8ba8\u8bba\u4e0e\u6b64\u76f8\u7ed3\u5408\u3002\u89e3\u91ca AI \u4f26\u7406/\u4f26\u7406\u98ce\u9669\u7ba1\u7406\u5982\u4f55\u8fdb\u4e00\u6b65\u6269\u5c55\u8be5\u4f7f\u547d\uff0c\u56f4\u7ed5\u60a8\uff08\u4e0d\uff09\u613f\u610f\u4e3a\u8ffd\u6c42\u8be5\u4f7f\u547d\u505a\u4ec0\u4e48\u7684\u4e00\u7cfb\u5217\u62a4\u680f\u3002\u4f8b\u5982\uff0c\u60a8\u7684\u4efb\u52a1\u53ef\u80fd\u662f\u63d0\u4f9b\u6700\u597d\u7684\u8d22\u52a1\u5efa\u8bae\u3002\u4f46\u662f\uff0c\u9664\u975e\u4eba\u4eec\u4fe1\u4efb\u60a8\uff0c\u5426\u5219\u60a8\u65e0\u6cd5\u63d0\u4f9b\u8be5\u5efa\u8bae\uff0c\u5982\u679c\u60a8\u5728\u90e8\u7f72 AI \u65f6\u758f\u5ffd\u5927\u610f\uff0c\u4eba\u4eec\u5c31\u65e0\u6cd5\u4fe1\u4efb\u60a8\u3002\u5f53 AI \u51fa\u9519\u65f6\uff0c\u5b83\u4f1a\u5927\u89c4\u6a21\u51fa\u9519\uff0c\u56e0\u6b64\u4e0e\u60a8\u7684\u7ec4\u7ec7\u6c9f\u901a\uff0c\u63d0\u4f9b\u6700\u4f73\u8d22\u52a1\u5efa\u8bae\u7684\u90e8\u5206\u53ef\u80fd\u9700\u8981\u4fdd\u62a4\u60a8\u7684\u5ba2\u6237\uff0c\u800c\u4fdd\u62a4\u4ed6\u4eec\u7684\u90e8\u5206\u9700\u8981 AI \u7684\u9053\u5fb7\u3001\u8d1f\u8d23\u4efb\u6216\u53ef\u4fe1\u8d56\u7684\u90e8\u7f72\uff0cAI \u9053\u5fb7\u4e0d\u518d\u88ab\u89c6\u4e3a\u4e0e\u60a8\u7684\u8fd0\u8425\u76f8\u5173\u8054\u7684\u4e1c\u897f\u3002\u76f8\u53cd\uff0c\u60a8\u4f20\u8fbe\u7684\u662f\u5b83\u662f\u60a8\u7684\u4f7f\u547d\u548c\u6838\u5fc3\u4ef7\u503c\u89c2\u7684\u8fdb\u4e00\u6b65\u5ef6\u4f38\u3002 4. \u4ee5\u53ef\u64cd\u4f5c\u7684\u65b9\u5f0f\u5b9a\u4e49 AI \u9053\u5fb7\u5728\u60a8\u7684\u7ec4\u7ec7\u4e2d\u7684\u542b\u4e49\u3002\u8bf4\u4f60\u201c\u4e3a\u4e86\u9690\u79c1\u201d\u6216\u201c\u5c0a\u91cd\u9690\u79c1\u201d\u662f\u4e00\u56de\u4e8b\u3002\u5b9e\u9645\u505a\u4e00\u4e9b\u4e8b\u60c5\u662f\u53e6\u4e00\u56de\u4e8b\u3002\u4e3a\u786e\u4fdd\u60a8\u7684 AI \u9053\u5fb7\u4ef7\u503c\u627f\u8bfa\u4e0d\u53ea\u662f\u516c\u5173\uff0c\u8bf7\u5c06\u8fd9\u4e9b\u627f\u8bfa\u4e0e\u9053\u5fb7\u62a4\u680f\u8054\u7cfb\u8d77\u6765\uff0c\u4f8b\u5982\u201c\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u5c06\u60a8\u7684\u6570\u636e\u51fa\u552e\u7ed9\u7b2c\u4e09\u65b9\u201d\u6216\u201c\u6211\u4eec\u5c06\u59cb\u7ec8\u533f\u540d\u4e0e\u7b2c\u4e09\u65b9\u5171\u4eab\u7684\u6570\u636e\u201d\u3002\u5982\u679c\u4f60\u6709\u4e00\u4efd\u7cbe\u5fc3\u8bbe\u8ba1\u7684 AI \u9053\u5fb7\u58f0\u660e\uff0c\u5b83\u5c06\u5305\u62ec\u90a3\u4e9b\u8d77\u5230\u53cc\u91cd\u4f5c\u7528\u7684\u62a4\u680f\u3002\u9996\u5148\uff0c\u4ed6\u4eec\u4f1a\u5411\u60a8\u7684\u56e2\u961f\u4f20\u8fbe\u60a8\u5b9e\u9645\u4e0a\u6b63\u5728\u505a\u4ec0\u4e48\uff08\u6216\u8ba1\u5212\u505a\u4ec0\u4e48\uff09\u5173\u4e8e\u4eba\u5de5\u667a\u80fd\u9053\u5fb7\u98ce\u9669\u7684\u4e8b\u60c5\u3002\u5176\u6b21\uff0c\u5b83\u7acb\u5373\u4f20\u8fbe\u51fa\u8fd9\u4e0d\u662f\u516c\u5173\u6216\u6a21\u7cca\u7684\u4e1c\u897f\u3002\u5f53\u4ef7\u503c\u89c2\u4ee5\u4e00\u79cd\u5c06\u5b83\u4eec\u4e0e\u884c\u52a8\u8054\u7cfb\u8d77\u6765\u7684\u65b9\u5f0f\u8868\u8fbe\u548c\u4f20\u8fbe\u65f6\uff0c\u8fd9\u4e9b\u4f20\u8fbe\u662f\u53ef\u4fe1\u4e14\u4ee4\u4eba\u96be\u5fd8\u7684\u3002\u8ba9\u60a8\u7684\u542c\u4f17\u7406\u89e3 AI \u9053\u5fb7\u5982\u4f55\u4e0d\u6a21\u7cca\u5e76\u4e14\u53ef\u4ee5\u5b9e\u65bd\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u89e3\u91ca\u533b\u7597\u4fdd\u5065\u4e2d\u9762\u4e34\u7684\u975e\u5e38\u771f\u5b9e\u548c\u68d8\u624b\u7684\u9053\u5fb7\u95ee\u9898\u4ee5\u53ca\u4ed6\u4eec\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u65b9\u5f0f\u3002\u76f8\u5173\u5730\uff0c\u60a8\u53ef\u4ee5\u8ba8\u8bba\u533b\u7597\u4fdd\u5065\u884c\u4e1a\u5982\u4f55\u5c06\u9053\u5fb7\u98ce\u9669\u7f13\u89e3\u7eb3\u5165\u57fa\u7840\u8bbe\u65bd\u548c\u6d41\u7a0b\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u53ef\u4ee5\u5b8c\u6210\u3002 5. \u9080\u8bf7\u5404\u804c\u80fd\u90e8\u95e8\u4e2d\u503c\u5f97\u4fe1\u8d56\u548c\u6709\u5f71\u54cd\u529b\u7684\u6210\u5458\u52a0\u5165\u60a8\u7684\u884c\u5217\u3002\u4e00\u4e9b\u7ec4\u7ec7\uff0c\u5982\u5fae\u8f6f\uff0c\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u201c\u4eba\u5de5\u667a\u80fd\u9053\u5fb7\u51a0\u519b\u201d\u7cfb\u7edf\u3002\u8fd9\u4e9b\u4eba\u662f\u6574\u4e2a\u7ec4\u7ec7\u4e2d\u8d1f\u8d23\u63d0\u9ad8\u56e2\u961f\u5bf9 AI \u9053\u5fb7\u98ce\u9669\u610f\u8bc6\u7684\u4eba\u3002 AI Ethics Champion \u8ba1\u5212\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\u662f\uff0c\u5b83\u8d4b\u4e88\u5df2\u7ecf\u83b7\u5f97\u56e2\u961f\u4fe1\u4efb\u548c\u652f\u6301\u7684\u9886\u5bfc\u8005\u6743\u529b\u3002\u6b64\u5916\uff0c\u4ed6\u4eec\u6bd4\u9996\u5e2d\u5b66\u4e60\u5b98\u6216\u9996\u5e2d\u6570\u636e\u5b98\u6216\u9886\u5bfc\u7ec4\u7ec7\u610f\u8bc6\u6218\u7565\u7684\u4efb\u4f55\u4eba\u66f4\u4e86\u89e3\u5404\u81ea\u7684\u56e2\u961f\u3002 6. \u6301\u7eed\u6559\u80b2\u3002\u5efa\u7acb\u7ec4\u7ec7\u610f\u8bc6\u4e0d\u662f\u4f60\u5728\u5468\u4e09\u4e0b\u5348\u6216\u5468\u672b\u9759\u4fee\u65f6\u505a\u7684\u4e8b\u60c5\u3002\u5b83\u9700\u8981\u6301\u7eed\u548c\u591a\u6837\u5316\u7684\u63a5\u89e6\u70b9\uff0c\u5305\u62ec\u5185\u90e8\u548c\u5916\u90e8\u53d1\u8a00\u4eba\u3001\u7814\u8ba8\u4f1a\u3001\u65f6\u4e8b\u901a\u8baf\u7b49\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4eba\u5de5\u667a\u80fd\u548c\u65b0\u5174\u6280\u672f\u901a\u5e38\u90fd\u5728\u8fc5\u901f\u53d8\u5316\u548c\u53d1\u5c55\uff0c\u4f34\u968f\u8fd9\u4e9b\u53d8\u5316\u7684\u662f\u9053\u5fb7\u98ce\u9669\u7684\u65b0\u6765\u6e90\u3002\u4e3a\u786e\u4fdd\u60a8\u7684\u7ec4\u7ec7\u4e0d\u4f1a\u843d\u540e\u592a\u591a\uff0c\u4e0d\u65ad\u6559\u80b2\u60a8\u7684\u5458\u5de5\u5c06\u662f\u62b5\u5fa1\u6280\u672f\u8fdb\u6b65\u6d6a\u6f6e\u7684\u5173\u952e\u5821\u5792\u3002\n\u5546\u4e1a\u9886\u8896\u77e5\u9053\uff0c\u5f04\u6e05\u695a\u5982\u4f55\u4ee5\u5b89\u5168\u548c\u5408\u4e4e\u9053\u5fb7\u7684\u65b9\u5f0f\u5f00\u53d1\u3001\u91c7\u8d2d\u548c\u90e8\u7f72\u4eba\u5de5\u667a\u80fd\u5bf9\u4e8e\u6301\u7eed\u589e\u957f\u548c\u4fdd\u6301\u7ade\u4e89\u4f18\u52bf\u81f3\u5173\u91cd\u8981\u3002\u91cd\u8981\u7684\u662f\u4e0d\u8981\u5c06\u6b64\u76ee\u6807\u4e0e\u6570\u636e\u79d1\u5b66\u5bb6\u548c\u5de5\u7a0b\u5e08\u8981\u5b9e\u73b0\u7684\u6280\u672f\u76ee\u6807\u76f8\u6df7\u6dc6\u3002\u8d1f\u8d23\u4efb\u5730\u90e8\u7f72\u4eba\u5de5\u667a\u80fd\u2014\u2014\u65e0\u8bba\u662f\u7528\u4e8e\u5185\u90e8\u8fd8\u662f\u5916\u90e8\u76ee\u7684\u2014\u2014\u90fd\u9700\u8981\u610f\u8bc6\u5230\u4eba\u5de5\u667a\u80fd\u7684\u9053\u5fb7\u98ce\u9669\u548c\u7ec4\u7ec7\u5bf9\u51cf\u8f7b\u8fd9\u4e9b\u98ce\u9669\u7684\u6218\u7565\u7684\u8ba4\u540c\u3002", "note_en": "Treating it as a niche concern exposes your company to huge risks. Here\u2019s how to get people to buy in.\n  Many organizations have come around to seeing the business imperative of an AI ethical risk program. Countless news reports \u2014 from faulty and discriminatory facial recognition to privacy violations to black box algorithms with life-altering consequences \u2014 have put it on the agendas of boards, CEOs, and Chief Data and Analytics Officers. What most leaders don\u2019t understand, however, is that addressing these risks requires raising awareness of them across their entire organization. Those that do understand this often don\u2019t know how to proceed.\n  For companies that use AI, this needs to be a top priority. Over 50% of executives report \u201cmajor\u201d or \u201cextreme\u201d concern about the ethical and reputational risks of AI in their organization given its current level of preparedness for  identifying and mitigating those risks. That means that  building an AI ethical risk program that everyone is bought into is necessary for deploying AI  at all. Done well, raising awareness can both mitigate risks at the tactical level and lend itself to the successful implementation of a more general AI ethical risk program.\n    First, procurement officers are one of the greatest \u2014 and most overlooked \u2014 sources of AI ethical risks. AI vendors sell into most every department in your organization, but especially HR, marketing, and finance. If your HR procurement officers don\u2019t know how to ask the right questions to vet AI products then they may, for instance, import the risk of discriminating against protected sub-populations during the hiring process.\n  Second, senior leaders often don\u2019t have the requisite knowledge for spotting ethical flaws in their organization\u2019s AI, putting the company at risk, both reputationally and legally. For instance, if a product team is ready to deploy an AI but first needs the approval of an executive who knows little about the ethical risks of the product, the reputation of the brand (not to mention the executive) can be at high risk.\n  Third, an AI ethical risk program requires knowledgeable data scientists and engineers. If they don\u2019t understand the ethical risks of AI, they may either fail to understand their new responsibilities as articulated in the program, or they may understand them but not understand their importance, which in turn leads to not taking them seriously. On the other hand, if you have an organization that understands the ethical, reputational, and legal risks of AI they will understand the importance of implementing a program that systematically addresses those issues cross-organizationally.\n  Creating this cross-organizational awareness well requires work. It requires a consistent message that\u2019s also tailored to the specific concerns of each group. After all, the interests and responsibilities of the C-suite are different from those of product owners and designers which are different from those of data scientists and engineers \u2014 speaking in the same language to all of them results in speaking to none of them. The message can\u2019t be superficial, or it will result in people thinking AI ethics is either a PR issue or niche concern. And it needs a clear C-suite leader responsible for devising and overseeing the execution of a strategy that results in organization-wide awareness \u2014 this issue won\u2019t be taken seriously if the message doesn\u2019t come from the top. Here\u2019s where organizations should start.\n    It\u2019s crucial to ensure that every employee knows the risks and feels vested in the success of AI within the organization. They not only need to be aware that these issues exist, but they also need to know how those risks impact their particular job and how it fits in to their job description. It\u2019s one thing for someone in HR to know they need to hire people that are right for the job and what that might look like while also, incidentally, being aware of the ethical risks of AI. It\u2019s another for that person to see identifying and mitigating those risks as part of her job by, for instance, knowing that the responsible discharging of her responsibilities includes asking AI vendors that provide hiring software to provide documentation on how they identified and mitigated the biases in their AI.\n  Here are six measures you can take for building organizational awareness and buy-in the right way.\n  1. Remove the fear of AI and AI ethics. One barrier organizations face is that people outside of IT can be intimidated by the topic. \u201cArtificial intelligence,\u201d \u201cmachine learning,\u201d and \u201cdiscriminatory algorithms\u201d can seem like daunting concepts, which leads people to shy away from the topic altogether. It\u2019s crucial for building organizational awareness that people become familiar and comfortable with the concepts, if not the technical underpinnings.\n  Possessing basic AI literacy is, in one sense, not very difficult. After all, machine learning is, in essence, learning by example, which everyone is familiar with. Similarly, being bad at something because you didn\u2019t have enough examples is also familiar to everyone. If you\u2019re communicating to people how a discriminatory algorithm might be created, you can explain that some are the result of software that didn\u2019t have enough examples to learn and so the software makes mistakes (e.g. not having enough examples of black women\u2019s faces for your facial recognition software resulting in the software being really bad at picking out black women\u2019s faces). More generally, many of the ethical risks of AI and their various sources can be articulated to a non-technical audience and results in employees with the confidence they need to handle the issues.\n  Requiring your people in HR and marketing to have a basic familiarity with how AI works and how AI ethical risks arise may seem like a tall order. However, most organizations have created a great deal of awareness around cybersecurity risks, which also entails cybersecurity literacy, and this probably seemed like a virtual impossibility before companies committed to making it happen. But, if your people don\u2019t know the basics, they won\u2019t know to ask the right questions (e.g. of AI vendors) when it\u2019s crucial that they do so.\n  2. Tailor your communications to your audience. Senior leaders that see themselves as stewards of their brand\u2019s reputation are interested in avoiding risks that threaten that reputation. For them, speaking in the language of \u201cethical and reputational  risk\u201d is important for them to see the relevance of AI ethics to their concerns and responsibilities. Product designers, on the other hand, are less concerned about avoiding risk than with making \u201ccool\u201d and helpful products. Explaining how AI ethics by design improves their product, especially for the growing number of values-driven consumers and citizens generally, can be a highly effective way to reach that audience. Finally, data scientists and engineers want robust models that are effective. Talking their language means explaining how issues of biased algorithms and black boxes decrease the power of the tool and/or its adoption. No one wants to build an inaccurate or unused model.\n  Giving examples and stories of AI gone wrong that each audience can relate to is also important. This doesn\u2019t only need to involve PR disasters. It can also include, for instance, Amazon\u2019s inability to sufficiently mitigate the biases in their AI-powered hiring software which  admirably led Amazon to pull the plug on the project rather than deploying something that could be harmful to job applicants and the brand alike. Further, to the extent possible, you should use examples that are particular to your industry. There are cases in which AI has realized certain ethical risks in healthcare, but if you\u2019re talking to members of a fintech, employees will connect more with a story from a peer company.\n  3. Tie your attempts to build organizational awareness to your company\u2019s mission or purpose. If it\u2019s already built into your organizational culture what your mission/purpose is, integrate your discussion of AI ethics with that. Explain how AI ethics/ethical risk management is a further extension of that mission, a set of guardrails around what you\u2019re (not) willing to do in pursuit of that mission.\n  For example, your mission might be to provide the best financial advice possible. But you can\u2019t provide that advice unless people trust you and people can\u2019t trust you if you\u2019re negligent in your deployment of AI. When AI goes wrong, it goes wrong at scale, so communicating to your organization that part of providing the best financial advice possible entails protecting your clients, and that part of protecting them requires the ethical, responsible, or trustworthy deployment of AI, AI ethics is no longer seen as something bolted on to your operations. Instead, you communicate that it is a further extension of your mission and core values.\n  4. Define what AI ethics means in your organization in an operational way. It\u2019s one thing to say you\u2019re \u201cfor privacy\u201d or that you \u201crespect privacy.\u201d It\u2019s another thing to actually do something about it. To make sure your AI ethics value commitments aren\u2019t seen as mere PR, tie those commitments to ethical guardrails, e.g. \u201cwe will never sell your data to third-parties\u201d or \u201cwe will always anonymize data shared with third parties\u201d.\n  If you have a well-crafted AI ethics statement, it will include those guardrails, which play a dual role. First, they communicate to your team what you\u2019re actually doing (or plan to do) about the AI ethical risks. And second, it immediately communicates that this is not PR or something fuzzy. When values are articulated and communicated in a way that ties them to actions, those communications are credible and memorable.\n  One way to ease your audience into understanding how AI ethics is not fuzzy and is something that can be implemented is to explain the very real and tough ethical questions faced in healthcare and the ways they have tackled those issues. Relatedly, you can discuss how the healthcare industry has incorporated ethical risk mitigation into infrastructure and process so they can see it can be done.\n  5. Invite trusted and influential members across various functions to join you in your efforts. Some organizations, like Microsoft, have created a system of \u201cAI Ethics Champions.\u201d These are people throughout the organization that are charged with raising awareness of AI ethical risks with their teams. One important feature of an AI Ethics Champion program is that it empowers leaders who already have the trust and support of their team. Further, they know their respective teams better than, say, the Chief Learning Officer or the Chief Data Officer, or whomever leads the organizational awareness strategy.\n  6. Continuously educate. Building organizational awareness is not something you do on a Wednesday afternoon or a weekend retreat. It requires ongoing and diverse touchpoints, from internal and external speakers, workshops, newsletters, and so on. Indeed, AI and emerging technologies generally are rapidly changing and evolving, and with those changes come novel sources of ethical risk. To ensure that your organization doesn\u2019t fall too far behind, continuously educating your people will be a crucial bulwark against the rising tide of technological advances.\n  Business leaders know that figuring out how to develop, procure, and deploy AI in a safe and ethical manner is crucial for continued growth and maintaining a competitive edge. It is important that this goal is not confused with a technical goal for data scientists and engineers to achieve. The responsible deployment of AI \u2014 whether it is used for internal or external purposes \u2014 requires awareness of the ethical risks of AI and organizational buy-in to a strategy that mitigates them.", "posttime": "2021-08-06 10:44:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e86\u89e3,understand,ai", "title": "\u7ec4\u7ec7\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u9700\u8981\u4e86\u89e3 AI \u9053\u5fb7", "title_en": "Everyone in Your Organization Needs to Understand AI Ethics", "transed": 1, "url": "https://hbr.org/2021/07/everyone-in-your-organization-needs-to-understand-ai-ethics", "via": "", "real_tags": ["\u4e86\u89e3", "ai"]}, {"category": "", "categoryclass": "", "imagename": "3e245ea8c4d6290d51afb696c0fc7106.png", "infoid": 1071701, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4f4d\u540c\u4e8b\u6700\u8fd1\u8be2\u95ee\u4e86\u6211\u63a8\u8350\u7684\u65b9\u6cd5\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u4f46\u5979\u6ca1\u6709\u770b\u5230\u4efb\u4f55\u6587\u6863\u3002\u6211\u610f\u8bc6\u5230\u8fd9\u662f\u6211\u4ece\u4e0e Google \u7684\u6a21\u578b\u6784\u5efa\u8005\u4ea4\u8c08\u4e2d\u5b66\u5230\u7684\u4e1c\u897f\uff0c\u800c\u4e14\u6211\u4e0d\u786e\u5b9a\u662f\u5426\u6709\u4efb\u4f55\u8bb0\u5f55\uff0c\u6240\u4ee5\u672c\u7740\u4e3a\u540e\u9762\u7684\u4efb\u4f55\u4eba\u7559\u4e0b\u9762\u5305\u5c51\u7684\u7cbe\u795e\uff0c\u6211\u60f3\u6211\u5e94\u8be5\u628a\u5b83\u53d8\u6210\u4e86\u4e00\u4e2a\u5feb\u901f\u7684\u535a\u5ba2\u6587\u7ae0\u3002\u603b\u7ed3\u662f\uff0c\u5982\u679c\u60a8\u5728\u7f51\u7edc\u4e2d\u7684\u5377\u79ef\u5c42\u4e4b\u540e\u6709 MaxPool \u6216 AveragePool\uff0c\u5e76\u4e14\u60a8\u7684\u76ee\u6807\u662f\u50cf\u5fae\u63a7\u5236\u5668\u8fd9\u6837\u7684\u8d44\u6e90\u53d7\u9650\u7cfb\u7edf\uff0c\u60a8\u5e94\u8be5\u5c1d\u8bd5\u5b8c\u5168\u5220\u9664\u5b83\u4eec\uff0c\u5e76\u7528\u5377\u79ef\u4e2d\u7684\u6b65\u5e45\u66ff\u6362\u5b83\u4eec\u3002\u8fd9\u6709\u4e24\u4e2a\u4e3b\u8981\u597d\u5904\uff0c\u4f46\u4e3a\u4e86\u89e3\u91ca\uff0c\u6700\u5bb9\u6613\u7ed8\u5236\u524d\u540e\u7f51\u7edc\u56fe\u3002\u5728\u5de6\u4fa7\u663e\u793a\u7684\u5178\u578b\u8bbe\u7f6e\u4e2d\uff0c\u5377\u79ef\u5c42\u540e\u8ddf\u6c60\u5316\u64cd\u4f5c\u3002\u8fd9\u81f3\u5c11\u4ece AlexNet \u5f00\u59cb\u5c31\u5f88\u5e38\u89c1\uff0c\u5e76\u4e14\u4ecd\u7136\u5b58\u5728\u4e8e\u8bb8\u591a\u73b0\u4ee3\u7f51\u7edc\u4e2d\u3002\u6211\u7ecf\u5e38\u53d1\u73b0\u6709\u7528\u7684\u8bbe\u7f6e\u663e\u793a\u5728\u53f3\u4fa7\u3002\u6211\u5728\u6b64\u56fe\u8868\u4e2d\u4f7f\u7528\u4e86 224 \u5bbd x 224 \u9ad8\u7684\u793a\u4f8b\u8f93\u5165\u5927\u5c0f\uff0c\u4f46\u8be5\u8ba8\u8bba\u9002\u7528\u4e8e\u4efb\u4f55\u7ef4\u5ea6\u3002\u9996\u5148\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6807\u51c6\u914d\u7f6e\u4e2d\uff0c\u5728\u5377\u79ef\u5c42\u4e4b\u540e\u6709\u4e00\u4e2a 224x224x8 \u7684\u6fc0\u6d3b\u7f13\u51b2\u533a\u5199\u5165\u5185\u5b58\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u662f\u56fe\u4e2d\u8fd9\u4e00\u90e8\u5206\u6240\u9700\u7684\u6700\u5927\u5185\u5b58\u5757\uff0c\u5373\u4f7f\u4f7f\u7528 8 \u4f4d\u503c\uff0c\u4e5f\u5360\u7528\u8d85\u8fc7 400 KB\u3002\u6211\u6240\u77e5\u9053\u7684\u6240\u6709 ML \u6846\u67b6\u90fd\u9700\u8981\u5728\u8c03\u7528\u4e0b\u4e00\u4e2a\u64cd\u4f5c\u4e4b\u524d\u5b9e\u4f8b\u5316\u5e76\u586b\u5145\u6b64\u7f13\u51b2\u533a\u3002\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u53ef\u80fd\u53ef\u4ee5\u6309\u7167\u56fe\u50cf\u5904\u7406\u6846\u67b6\u5e38\u89c1\u7684\u65b9\u5f0f\u8fdb\u884c\u5e73\u94fa\u6267\u884c\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u589e\u52a0\u7684\u590d\u6742\u6027\u5e76\u672a\u4f7f\u5176\u6210\u4e3a\u4f18\u5148\u4e8b\u9879\u3002\u5982\u679c\u60a8\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c400KB \u662f\u5f88\u591a RAM\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u5b83\u4ec5\u7528\u4e8e\u4e34\u65f6\u503c\u3002\u8fd9\u4f7f\u5b83\u6210\u4e3a\u5927\u5c0f\u4f18\u5316\u7684\u8bf1\u4eba\u76ee\u6807\u3002\u6211\u7684\u7b2c\u4e8c\u4e2a\u89c2\u5bdf\u662f\u6211\u4eec\u53ea\u4f7f\u7528\u4e86\u8fd9\u4e9b\u503c\u7684 25%\uff0c\u5047\u8bbe MaxPool \u6b63\u5728\u6267\u884c\u5178\u578b\u7684 2x \u7f29\u51cf\uff0c\u5728 2\u00d72 \u7a97\u53e3\u4e2d\u53d6 4 \u4e2d\u7684\u6700\u5927\u503c\u3002\u6839\u636e\u7ecf\u9a8c\uff0c\u8fd9\u4e9b\u503c\u901a\u5e38\u975e\u5e38\u76f8\u4f3c\uff0c\u56e0\u6b64\u867d\u7136\u8fdb\u884c\u6c60\u5316\u786e\u5b9e\u6709\u52a9\u4e8e\u6574\u4f53\u51c6\u786e\u6027\uff0c\u4f46\u968f\u673a\u53d6\u8fd9\u56db\u4e2a\u503c\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e5f\u4e0d\u4f1a\u5dee\u591a\u5c11\u3002\u672c\u8d28\u4e0a\uff0c\u8fd9\u5c31\u662f\u53bb\u9664\u6c60\u5316\u548c\u589e\u52a0\u5377\u79ef\u6b65\u957f\u6240\u505a\u7684\u3002\u5f53\u5377\u79ef\u6ee4\u6ce2\u5668\u5728\u8f93\u5165\u4e0a\u6ed1\u52a8\u65f6\uff0cStride \u662f\u4e00\u4e2a\u63a7\u5236\u6b65\u957f\u7684\u53c2\u6570\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8bb8\u591a\u7f51\u7edc\u7684\u7a97\u53e3\u5f7c\u6b64\u6c34\u5e73\u504f\u79fb\u4e00\u4e2a\u50cf\u7d20\uff0c\u5782\u76f4\u504f\u79fb\u4e00\u4e2a\u50cf\u7d20\u3002\u8fd9\u610f\u5473\u7740\uff08\u5ffd\u7565\u586b\u5145\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u8ba8\u8bba\uff09\u8f93\u51fa\u4e0e\u8f93\u5165\u7684\u5927\u5c0f\u76f8\u540c\uff0c\u4f46\u901a\u5e38\u6709\u66f4\u591a\u7684\u901a\u9053\uff08\u4e0a\u56fe\u4e2d\u7684\u516b\u4e2a\uff09\u3002\u60a8\u53ef\u4ee5\u5c06\u6b65\u5e45\u8bbe\u7f6e\u4e3a 2,2\uff0c\u800c\u4e0d\u662f\u5c06\u6b65\u5e45\u8bbe\u7f6e\u4e3a\u6c34\u5e73 1\u3001\u5782\u76f4 1 \u7684\u9ed8\u8ba4\u503c\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u7a97\u53e3\u4e0e\u5176\u90bb\u5c45\u5782\u76f4\u548c\u6c34\u5e73\u504f\u79fb\u4e24\u4e2a\u50cf\u7d20\u3002\u8fd9\u5bfc\u81f4\u8f93\u51fa\u6570\u7ec4\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u662f\u8f93\u5165\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u5143\u7d20\u6570\u91cf\u662f\u56db\u5206\u4e4b\u4e00\u3002\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u6211\u4eec\u6b63\u5728\u9009\u62e9\u6c60\u64cd\u4f5c\u4f1a\u9009\u62e9\u7684\u56db\u4e2a\u503c\u4e4b\u4e00\uff0c\u4f46\u6ca1\u6709\u5728\u6807\u51c6\u914d\u7f6e\u4e2d\u4f7f\u7528\u7684\u6bd4\u8f83\u6216\u5e73\u5747\u3002\u8fd9\u610f\u5473\u7740\u5377\u79ef\u5c42\u7684\u8f93\u51fa\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58\uff0c\u5bfc\u81f4 TFL Micro \u7684\u7ade\u6280\u573a\u66f4\u5c0f\uff0c\u4f46\u4e5f\u51cf\u5c11\u4e86 75% \u7684\u8ba1\u7b97\uff0c\u56e0\u4e3a\u53ea\u8ba1\u7b97\u4e86\u56db\u5206\u4e4b\u4e00\u7684\u5377\u79ef\u7a97\u53e3\u3002\u5b83\u786e\u5b9e\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u7cbe\u5ea6\u635f\u5931\uff0c\u60a8\u53ef\u4ee5\u5728\u8bad\u7ec3\u671f\u95f4\u8fdb\u884c\u9a8c\u8bc1\uff0c\u4f46\u7531\u4e8e\u5b83\u5982\u6b64\u663e\u7740\u5730\u51cf\u5c11\u4e86\u8d44\u6e90\u4f7f\u7528\uff0c\u60a8\u751a\u81f3\u53ef\u4ee5\u589e\u52a0\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570\uff0c\u4f8b\u5982\u8f93\u5165\u5927\u5c0f\u6216\u901a\u9053\u6570\uff0c\u5e76\u83b7\u5f97\u4e00\u4e9b\u56de\u62a5\u3002\u5982\u679c\u60a8\u786e\u5b9e\u53d1\u73b0\u81ea\u5df1\u5728\u4e3a\u7ade\u6280\u573a\u5927\u5c0f\u800c\u82e6\u82e6\u6323\u624e\uff0c\u6211\u5f3a\u70c8\u5efa\u8bae\u60a8\u5c1d\u8bd5\u8fd9\u79cd\u65b9\u6cd5\uff0c\u5b83\u5bf9\u6211\u4eec\u7684\u8bb8\u591a\u6a21\u578b\u90fd\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u5982\u679c\u60a8\u4e0d\u786e\u5b9a\u60a8\u7684\u6a21\u578b\u662f\u5426\u5177\u6709\u5377\u79ef/\u6c60\u5316\u6a21\u5f0f\uff0c\u6216\u8005\u60f3\u66f4\u597d\u5730\u4e86\u89e3\u6fc0\u6d3b\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u5f71\u54cd\u60a8\u9700\u8981\u7684\u9886\u57df\uff0c\u6211\u63a8\u8350 Netron \u53ef\u89c6\u5316\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u91c7\u7528 TensorFlow Lite \u6a21\u578b\u6587\u4ef6\u3002", "note_en": "A colleague recently asked for more details on an approach I recommended, but which she hadn\u2019t seen any documentation for. I realized that it was something I\u2019d learned from talking to model builders at Google, and I wasn\u2019t sure there was anything written up, so in the spirit of leaving a trail of breadcrumbs for anyone coming after, I thought I should put it into a quick blog post.\n The summary is that if you have MaxPool or AveragePool after a convolutional layer in a network, and you\u2019re targeting a resource-constrained system like a microcontroller, you should try removing them entirely and replacing them with a stride in the convolution instead. This has two main benefits, but to explain it\u2019s easiest to diagram out the network before and after.\n  In the typical setup, shown on the left, is a convolutional layer is followed by a pooling operation. This has been common since at least AlexNet, and is still found in many modern networks. The setup I often find useful is shown on the right. I\u2019m using an example input size of 224 wide by 224 high for this diagram, but the discussion holds true for any dimensions.\n The first thing to notice is that in the standard configuration, there\u2019s a 224x224x8 activation buffer written out to memory after the convolution layer. This is by far the biggest chunk of memory required in this part of the graph, taking over 400KB, even with eight-bit values. All ML frameworks I\u2019m aware of will require this buffer to be instantiated and filled before the next operation can be invoked. In theory it might be possible to do tiled execution, in the way that\u2019s common for image processing frameworks, but the added complexity hasn\u2019t made it a priority so far. If you\u2019re running on an embedded system, 400KB is a lot of RAM, especially since it\u2019s only being used for temporary values. That makes it a tempting target for size optimization.\n My second observation is that we\u2019re only using 25% of those values, assuming MaxPool is doing a typical 2x reduction, taking the largest value out of 4 in a 2\u00d72 window. From experience, these values are often very similar, so while doing the pooling does help overall accuracy a bit, taking any of those four values at random isn\u2019t much worse. In essence, this is what removing the pooling and increasing the stride for convolution does.\n Stride is an argument that controls the step size as a convolution filter is slid across the input. By default, many networks have windows that are offset from each other by one pixel horizontally, and one pixel vertically. This means (ignoring padding, which is a whole different discussion) the output is the same size as the input, but typically with more channels (eight in the diagram above). Instead of setting the stride to this default of 1 horizontally, 1 vertically, you can set it to 2,2. This means that each window is offset by two pixels vertically and horizontally from its neighbor. This results in an output array that is half the width and height of the input, and so has a quarter of the number of elements. In essence, we\u2019re picking one of the four values that would have been chosen by the pooling operation, but without the comparison or averaging that is used in the standard configuration.\n This means that the output of the convolution layer uses much less memory, resulting in a smaller arena for TFL Micro, but also reduces the computation by 75%, since only a quarter of the convolution windows are being calculated. It does result in some accuracy loss, which you can verify during training, but since it reduces the resource usage so dramatically you may even be able to increase some other parameters like the input size or number of channels and gain some back. If you do find yourself struggling for arena size, I highly recommend giving this approach a try, it\u2019s been very helpful for a lot of our models. If you\u2019re not sure if your model has the convolution/pooling pattern, or want to better understand the sizes of your activation buffers and how they influence the arena you\u2019ll need, I recommend the  Netron visualizer, which can take TensorFlow Lite model files.", "posttime": "2021-08-06 10:44:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "tinyml,trick,\u5377\u79ef", "title": "\u4e00\u79cd\u7f29\u5c0f TinyML \u5377\u79ef\u7f51\u7edc\u7684\u5947\u602a\u6280\u5de7", "title_en": "One weird trick to shrink convolutional networks for TinyML", "transed": 1, "url": "https://petewarden.com/2021/08/05/one-weird-trick-to-shrink-convolutional-networks-for-tinyml/", "via": "", "real_tags": ["tinyml", "trick", "\u5377\u79ef"]}, {"category": "", "categoryclass": "", "imagename": "4d8718ddc454a2f1a7c71a0b2c18ec0a.jpg", "infoid": 1071700, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u968f\u7740\u65b0\u7684\u7535\u5b50\u6e38\u620f Left 4... \u54b3\u54b3\uff0cBack 4 Blood \u5728\u4eca\u5e74\u665a\u4e9b\u65f6\u5019\u63a8\u51fa\uff0c\u8fd9\u4e2a\u50f5\u5c38\u5408\u4f5c\u5c04\u51fb\u6e38\u620f\u5df2\u7ecf\u8fdb\u5165\u4e86\u4e00\u4e2a\u6b63\u5f0f\u88ab\u89c6\u4e3a\u201c\u6d4b\u8bd5\u7248\u201d\u7684\u72b6\u6001\u3002\u6211\u5728\u73a9\u6e38\u620f\u7684\u6700\u65b0\u6d4b\u8bd5\u7248\u672c\u5927\u7ea6\u516d\u4e2a\u5c0f\u65f6\u540e\u786e\u5b9a\u4e86\u8fd9\u4e00\u70b9\uff0c\u73b0\u5728\u53ef\u4ee5\u4e3a\u5176\u9884\u8ba2\u5ba2\u6237\uff08\u6216\u4efb\u4f55\u83b7\u5f97\u65e9\u671f\u4ee3\u7801\u7684\u4eba\uff09\u63d0\u4f9b\u670d\u52a1\u3002\u8fd9\u4e2a\u7248\u672c\u5c06\u4e8e 8 \u6708 12 \u65e5\u661f\u671f\u56db\u5411\u516c\u4f17\u5f00\u653e\u3002\u6211\u6d4b\u8bd5\u8fc7\u7684 PvE \u548c PvP \u6a21\u5f0f\u611f\u89c9\u7a33\u5b9a\u548c\u7a33\u5b9a\uff0c\u81f3\u5c11\u5728 PC \u4e0a\uff0c\u5e76\u4e14\u5b83\u4eec\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u786e\u5b9a Back 4 Blood \u7684\u771f\u5b9e\u611f\u53d7\u96f6\u552e\u6e38\u620f\u4ece 10 \u6708 12 \u65e5\u5f00\u59cb\u3002\u7b80\u800c\u8a00\u4e4b\uff0cBack 4 Blood \u5df2\u7ecf\u611f\u89c9\u5c31\u50cf Left 4 Dead \u7cfb\u5217\u5b66\u4f1a\u4e86\u5982\u4f55\u6570\u5230\u4e09\u3002\u4f60\u4e0d\u5fc5\u772f\u7740\u773c\u5c31\u80fd\u770b\u5230\u6e38\u620f\u7f3a\u5c11\u4e00\u4e9b\u7c7b\u4f3c Valve \u7684\u9b54\u6cd5\u7684\u5730\u65b9\uff0c\u4f46\u8fd9\u8fd8\u4e0d\u8db3\u4ee5\u62d6\u57ae\u8840\u8165\u7684\u7f8e\u597d\u65f6\u5149\u3002\u7531\u4e8e\u5f15\u64ce\u6280\u672f\u7684\u63d0\u5347\u3001\u806a\u660e\u800c\u516c\u5e73\u7684\u201c\u5361\u7247\u7ec4\u201d\u7cfb\u7edf\u4ee5\u53ca\u5bf9\u4eba\u7c7b\u4e0e\u50f5\u5c38 PvP \u6218\u6597\u7684\u4ee4\u4eba\u60ca\u8bb6\u7684\u6709\u8da3\u8c03\u6574\uff0cBack 4 Blood \u611f\u89c9\u5c31\u50cf\u662f\u4e00\u90e8\u63a5\u8fd1\u6709\u4ef7\u503c\u7684\u7eed\u96c6\u3002\u4f5c\u4e3a\u5165\u95e8\uff0c\u8bf7\u56de\u987e\u6211 2020 \u5e74 12 \u6708\u7684\u6e38\u620f\u4e0d\u592a\u5b8c\u5584\u7684 alpha \u7248\u672c\uff0c\u8be5\u7248\u672c\u5c06\u821e\u53f0\u8bbe\u7f6e\u5982\u4e0b\uff1aB4B \u7684\u8bb8\u591a\u6982\u5ff5\u90fd\u662f\u4ece L4D \u65e0\u803b\u5730\u63d0\u51fa\u6765\u7684\uff08\u5982\u679c\u5e26\u6709\u6570\u5b57\u201c4\u201d\u7684\u547d\u540d\u7ea6\u5b9a\u4e0d\u77e5\u9053\u4f60\u5462\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff1a\u6e38\u620f\u7684\u6bcf\u4e2a\u201c\u6218\u5f79\u201d\u533a\u57df\u90fd\u88ab\u5206\u6210\u66f4\u5c0f\u7684\u7ea7\u522b\uff0c\u60a8\u7684\u5c0f\u961f\u6709\u673a\u4f1a\u5728\u6bcf\u4e2a\u7ea7\u522b\u4e4b\u95f4\u7684\u201c\u5b89\u5168\u533a\u57df\u201d\u4f11\u606f\u3001\u6cbb\u7597\u548c\u50a8\u5b58\u8865\u7ed9\u3002\u4f7f\u7528\u67aa\u652f\u3001\u8fd1\u6218\u6b66\u5668\u548c\u7206\u70b8\u6027\u5de5\u5177\u6495\u6bc1\u50f5\u5c38\uff0c\u5e76\u5904\u7406\u5065\u5eb7\u7269\u54c1\u548c\u5de5\u5177\uff0c\u8ba9\u60a8\u7684\u56e2\u961f\u4ece\u4e00\u4e2a\u5b89\u5168\u533a\u57df\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u5b89\u5168\u533a\u57df\u3002\u90a3\u4e2a\u6838\u5fc3\u81ea\u8d1f\u4ecd\u7136\u5b58\u5728\uff0c\u800c\u672c\u5468\u7684\u6d4b\u8bd5\u7248\u672c\u4e3a\u4f53\u9a8c\u589e\u6dfb\u4e86\u66f4\u591a\u63a5\u8fd1\u6700\u7ec8\u7684\u6da6\u8272\u3002\u6700\u5927\u7684\u533a\u522b\u662f\u66f4\u597d\u5730\u4e86\u89e3\u5b83\u7684\u4e00\u7cfb\u5217\u6e38\u620f\u4fee\u6539\u5361\u7ec4\uff0c\u636e\u6211\u6240\u77e5\uff0cTurtle Rock Studios \u5df2\u7ecf\u5b9e\u65bd\u4e86\u4e00\u4e9b\u5e94\u8be5\u53ef\u4ee5\u5de5\u4f5c\u7684\u4e1c\u897f\uff0c\u800c\u4e0d\u4f1a\u8981\u6c42\u73a9\u5bb6\u5728\u96f6\u552e\u4ef7\u683c\u4e4b\u4e0a\u591a\u82b1\u4e00\u5206\u94b1\u3002\u6e38\u620f\u5f00\u59cb\u65f6\uff0c\u60a8\u5c06\u62e5\u6709\u5927\u91cf\u7eb8\u724c\uff0c\u5e76\u9080\u8bf7\u60a8\u5236\u4f5c 15 \u5f20\u5361\u7ec4\u3002\u6bcf\u5f53\u60a8\u6f5c\u5165 PvE\uff08\u4e0e\u670b\u53cb\u5408\u4f5c\u5bf9\u6297\u8ba1\u7b97\u673a\u63a7\u5236\u7684\u50f5\u5c38\uff09\u6216 PvP\uff08\u56db\u5bf9\u56db\u5bf9\u6218\u6a21\u5f0f\uff09\u65f6\uff0c\u60a8\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u9009\u62e9\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5957\u724c\u3002\u5728\u6bcf\u4e2a\u6218\u5f79\u9636\u6bb5\u5f00\u59cb\u65f6\uff0c\u60a8\u7684\u4e00\u4e9b\u5361\u7247\u5c06\u88ab\u968f\u673a\u53d1\u653e\uff0c\u60a8\u53ef\u4ee5\u4ece\u4e2d\u6311\u9009\u4e00\u4e24\u5f20\u6765\u589e\u5f3a\u60a8\u7684\u6218\u6597\u529b\u3002\u6700\u76f4\u63a5\u7684\u597d\u5904\u662f\u4f60\u7684\u89d2\u8272\uff0c\u5c11\u91cf\u7684\u5361\u7247\u7ed9\u6240\u6709\u961f\u53cb\u67d0\u79cd\u63d0\u5347\u3002\u901a\u5e38\uff0c\u8fd9\u4e9b\u53ea\u662f\u7b80\u5355\u7684\u6570\u5b57\u63d0\u5347\uff0c\u4ece\u989d\u5916\u7684\u5065\u5eb7\u6216\u5f39\u836f\u5230\u5f53\u60a8\u7684\u89d2\u8272\u5065\u5eb7\u72b6\u51b5\u4e0d\u4f73\u65f6\u5f00\u542f\u7684\u7279\u6b8a\u6d25\u8d34\u3002\u5176\u4ed6\u4eba\u4e3a\u60a8\u7684\u89d2\u8272\u63d0\u4f9b\u5168\u65b0\u7684\u653b\u51fb\u6216\u80fd\u529b\uff0c\u4f8b\u5982\u201c\u84c4\u529b\u201d\u8fd1\u6218\u653b\u51fb\uff0c\u8ba9\u60a8\u6309\u4f4f\u8fd1\u6218\u6309\u94ae\u66f4\u957f\u65f6\u95f4\u4ee5\u8fdb\u5165\u50f5\u5c38\u3002\n\u6bcf\u4e2a\u73a9\u5bb6\u5c06\u5728\u6bcf\u6b21\u4f1a\u8bdd\u4e2d\u9009\u62e9\u5927\u7ea6\u516d\u5f20\u724c\uff08\u603b\u662f\u5728\u201c\u53d1\u4e94\uff0c\u9009\u4e00\u201d\u7684\u5bb9\u91cf\uff09\u3002\u8fd9\u610f\u5473\u7740\u9002\u5f53\u7684\u5957\u724c\u6784\u5efa\u53ef\u4ee5\u8ba9\u73a9\u5bb6\u62e8\u5165\u5404\u79cd\u6e38\u620f\u7406\u5ff5 - \u4e0d\u4e00\u5b9a\u4fdd\u8bc1\u6bcf\u6b21\u90fd\u80fd\u5904\u7406\u4ed6\u4eec\u7684\u68a6\u60f3\u5361\u3002\u6d4b\u8bd5\u7248\u4e2d\u6700\u65e9\u7684\u5957\u724c\u9009\u9879\u5f3a\u70c8\u5f3a\u8c03\u8fd1\u6218\uff0c\u5c24\u5176\u662f\u5f53\u5b83\u4eec\u4e3a\u6bcf\u4e00\u4e2a\u88ab\u8fd1\u6218\u6b66\u5668\u6740\u6b7b\u7684\u50f5\u5c38\u53e0\u52a0\u5065\u5eb7\u52a0\u6210\u65f6\u3002\u7a0d\u540e\u89e3\u9501\u5361\u724c\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u4ece\u8fdc\u5904\u6740\u6b7b\u3001\u6cbb\u7597\u548c\u590d\u6d3b\u76df\u53cb\uff0c\u6216\u7d2f\u79ef\u8010\u529b\u8ba1\uff08\u5f53\u60a8\u5954\u8dd1\u6216\u4f7f\u7528\u8fd1\u6218\u653b\u51fb\u65f6\uff0c\u8010\u529b\u8ba1\u4f1a\u51cf\u5c11\uff09\u3002\u968f\u7740\u6211\u5728\u6d4b\u8bd5\u7248\u4e2d\u82b1\u8d39\u7684\u65f6\u95f4\u8d8a\u6765\u8d8a\u591a\uff0c\u6211\u5bf9\u83b7\u5f97\u89e3\u9501\u66f4\u591a\u5957\u724c\u9009\u9879\u6240\u9700\u7684\u79ef\u5206\u611f\u5230\u7531\u8877\u7684\u5174\u594b\u3002\u4e00\u5f00\u59cb\u6211\u4e0d\u60f3\u6210\u4e3a\u4e00\u540d\u72d9\u51fb\u624b\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u6211\u4e0e\u9730\u5f39\u67aa\u548c\u65a7\u5934\u7684\u6218\u6597\u6709\u591a\u4e48\u6709\u8da3\uff0c\u4f46\u6211\u9010\u6e10\u6e34\u671b\u4e00\u5957\u80fd\u5f3a\u8c03\u8fdc\u8ddd\u79bb\u653b\u51fb\u7684\u7532\u677f\uff0c\u800c\u6211\u7684\u961f\u53cb\u5219\u80a9\u8d1f\u91cd\u4efb\u3002\u6211\u60f3\u6d4b\u8bd5\u7248\u4f1a\u516c\u5f00\u4e00\u4e9b\u5361\u7247\u6240\u9700\u7684\u5404\u79cd\u4e0e\u6570\u5b66\u76f8\u5173\u7684\u8c03\u6574\uff0c\u4f46\u4e0d\u8981\u8bef\u4f1a\uff1a\u8fd9\u4e2a\u7cfb\u7edf\u5df2\u7ecf\u4e3a\u8fc7\u65f6\u7684 Left 4 Dead \u5408\u4f5c\u6a21\u5f0f\u6dfb\u52a0\u4e86\u53d7\u6b22\u8fce\u7684\u9999\u6599\u3002\u5982\u679c\u53d1\u884c\u5546 WB Games \u6ca1\u6709\u901a\u8fc7\u5411\u8fd9\u4e9b\u5361\u7247\u6dfb\u52a0\u5fae\u4ea4\u6613\u6765\u641e\u7838\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u8fce\u6765\u4e00\u4e2a\u5f88\u597d\u7684\u7532\u677f\u5efa\u8bbe\u65f6\u95f4\u3002 B4B \u7684\u56db\u5bf9\u56db\u5bf9\u6218\u6a21\u5f0f\u5bf9\u4e8e L4D \u7c89\u4e1d\u6765\u8bf4\u770b\u8d77\u6765\u5f88\u719f\u6089\uff0c\u56e0\u4e3a\u5b83\u4e5f\u8ba9\u201c\u66f4\u6e05\u6d01\u201d\u7684\u4eba\u7c7b\u56e2\u961f\u5bf9\u6297\u8d85\u7ea7\u50f5\u5c38\u56e2\u961f\u3002\u4f46\u5728 L4D \u7248\u672c\u53ef\u80fd\u4f1a\u611f\u89c9\u8fc7\u957f\u548c\u7b28\u62d9\u7684\u5730\u65b9\uff0cTurtle Rock \u7684\u65b0\u65cb\u8f6c\u4f18\u5148\u8003\u8651\u66f4\u5feb\u3001\u66f4\u52a8\u6001\u7684\u6218\u6597\uff0c\u66f4\u597d\u5730\u907f\u514d\u6124\u6012\u7684\u6212\u65ad\u8005\u3002\u5728 L4D \u7684\u5bf9\u6218\u6a21\u5f0f\u4e2d\uff0c\u50f5\u5c38\u961f\u4f0d\u4f1a\u5165\u4fb5\u6b63\u5e38\u7684\u6218\u5f79\u5730\u56fe\u6765\u5e72\u6270\u3001\u9a9a\u6270\u548c\uff08\u5e0c\u671b\uff09\u6740\u6b7b\u4eba\u7c7b\u961f\u4f0d\u3002 B4B \u7684\u8f6c\u6298\u56f4\u7ed5\u7740\u6218\u5f79\u5730\u56fe\u7684\u66f4\u5c0f\u3001\u4e0e\u7279\u5b9a\u90e8\u5206\u76f8\u6bd4\uff0c\u4ee5\u53ca\u6bcf 60 \u79d2\u79fb\u52a8\u4e00\u6b21\u7684\u7c7b\u4f3c\u5927\u9003\u6740\u7684\u201c\u5b89\u5168\u533a\u201d\u3002\u6bcf\u652f\u961f\u4f0d\u8f6e\u6d41\u626e\u6f14\u50f5\u5c38\u548c\u4eba\u7c7b\uff0c\u6bcf\u56de\u5408\u5411\u4e24\u8fb9\u5404\u5c04\u4e00\u67aa\uff0c\u76ee\u6807\u662f\u8ba9\u6bcf\u652f\u961f\u4f0d\u5728\u7ed9\u5b9a\u56de\u5408\u4e2d\u4f5c\u4e3a\u4eba\u7c7b\u6301\u7eed\u66f4\u957f\u65f6\u95f4\u3002\u636e\u6211\u6240\u77e5\uff0c\u4eba\u7c7b\u6a21\u5f0f\u7684\u56e2\u961f\u6bcf\u8f6e\u6700\u591a\u53ef\u4ee5\u6301\u7eed 4 \u5206\u949f\u6216\u5c11\u81f3 45 \u79d2\u3002\u4f5c\u4e3a\u4eba\u7c7b\u56e2\u961f\u6301\u7eed\u66f4\u957f\u65f6\u95f4\uff0c\u6216\u8005\u4f5c\u4e3a\u50f5\u5c38\u7834\u574f\u4eba\u7c7b\u7684\u4e00\u5929\uff0c\u9700\u8981\u53cc\u65b9\u5c31\u5730\u56fe\u63a7\u5236\u505a\u51fa\u660e\u667a\u7684\u51b3\u5b9a\u3002\u7279\u522b\u662f\uff0c\u4eba\u7c7b\u4e0d\u80fd\u4f9d\u8d56\u8eb2\u5728\u5730\u56fe\u7684\u201c\u5b89\u5168\u201d\u89d2\u843d\uff0c\u56e0\u4e3a\u79fb\u52a8\u7684\u5b89\u5168\u533a\u901a\u5e38\u4f1a\u5bfc\u81f4\u6bd2\u4e91\u586b\u6ee1\u4ee5\u524d\u6709\u7528\u7684\u5efa\u7b51\u7269\u6216\u6d1e\u7a74\u3002\u4eba\u7c7b\u660e\u667a\u7684\u505a\u6cd5\u662f\u5728\u4efb\u4f55\u770b\u4f3c\u5b89\u5168\u7684\u533a\u57df\u5728\u88ab\u6bd2\u6c14\u8986\u76d6\u4e4b\u524d\u6700\u5927\u9650\u5ea6\u5730\u589e\u52a0\u989d\u5916\u7684\u5f39\u836f\u3001\u5c0f\u5de5\u5177\u548c\u5065\u5eb7\u62fe\u53d6\u5668\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u50f5\u5c38\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u80fd\u5728\u5730\u56fe\u4e0a\u770b\u5230\u4eba\u7c7b\u7684\u8f6e\u5ed3\u65b9\u9762\u88ab\u4e25\u91cd\u538b\u5236\u3002\u8fd9\u53ef\u4ee5\u8bf4\u662f\u5bf9\u5927\u591a\u6570\u8d85\u7ea7\u50f5\u5c38\u4e0e\u4eba\u7c7b\u76f8\u6bd4\u6709\u591a\u6162\u7684\u8865\u507f\u3002\u56e0\u6b64\uff0c\u4e00\u573a\u597d\u7684\u50f5\u5c38\u56de\u5408\u5c06\u53d6\u51b3\u4e8e\u6709\u6548\u7684\u6c9f\u901a\u548c\u4e09\u89d2\u6d4b\u91cf\u2014\u2014\u56e0\u4e3a\u8d85\u7ea7\u50f5\u5c38\u6700\u597d\u5c06\u4eba\u7c7b\u961f\u53cb\u5206\u5f00\uff0c\u7136\u540e\u5c06\u5176\u4e2d\u7684\u4e00\u4e24\u4e2a\u4eba\u51fb\u5012\u3002 \uff08\u4e0e\u6b64\u540c\u65f6\uff0c\u4eba\u7c7b\u56e2\u7ed3\u5728\u4e00\u8d77\uff0c\u770b\u5728\u4e0a\u5e1d\u7684\u4efd\u4e0a\uff01\uff09\u4f5c\u4e3a\u4e00\u79cd\u4e09\u5c40\u4e24\u80dc\u7684\u6a21\u5f0f\uff0cB4B \u7684\u5bf9\u6218\u5bf9\u4e24\u652f\u7403\u961f\u6765\u8bf4\u59cb\u7ec8\u662f\u5e73\u7b49\u7684\uff0c\u76f4\u5230\u4e0d\u662f\u8fd9\u6837\uff0c\u800c\u4e0d\u662f\u62d6\u51fa\u660e\u663e\u7684\u56e2\u961f\u5931\u8861\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u5bf9\u8fc4\u4eca\u4e3a\u6b62\u770b\u5230\u7684\u5bf9\u6297\u6a21\u5f0f\u5730\u56fe\u8bbe\u8ba1\u5e76\u4e0d\u7740\u8ff7\uff1a\u5b83\u4e3b\u8981\u7531\u91cd\u65b0\u6df7\u5408\u7684\u623f\u5c4b\u548c\u6218\u5f79\u4e2d\u7684\u5730\u5f62\u7ec4\u6210\u2014\u2014\u901a\u5e38\u6709\u592a\u591a\u5bb9\u6613\u8ba9\u4eba\u7c7b\u5b89\u987f\u4e0b\u6765\u7684\u89d2\u843d\u9690\u85cf\u70b9\u3002\u66f4\u591a\u7684\u5782\u76f4\u5ea6\u548c\u5f3a\u5236\u8fd0\u52a8\u53ef\u4ee5\u5927\u5927\u589e\u52a0\u8fd9\u79cd\u6a21\u5f0f\u7684\u817f\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u4eba\u7c7b\u73a9\u5bb6\u4e0d\u80fd\u6307\u671b\u5728\u6211\u8fc4\u4eca\u4e3a\u6b62\u770b\u5230\u7684\u7ea7\u522b\u4e2d\u4f7f\u7528\u72d9\u51fb\u6b65\u67aa\u7b49\u6b66\u5668\u7cfb\u5217\u3002", "note_en": "As the new video game  Left 4... ahem,  Back 4 Blood shambles its way toward launch later this year, this zombie co-op shooter has entered a state that formally counts as a &#34;beta.&#34; I&#39;ve determined this after about six hours playing the game&#39;s latest test version, now live for its preorder customers (or anyone who&#39;s  scored early codes). This version will open up to the public on Thursday, August 12. The PvE and PvP modes\u00a0I&#39;ve tested feel solid and stable, at least on PC, and they make it easier to determine exactly what  Back 4 Blood will feel like as a retail game starting October 12.\n In short,  Back 4 Blood already feels like the   Left 4 Dead series learned how to count to three. You don&#39;t have to squint to see the places where the game lacks some Valve-like magic, but it&#39;s not enough to drag down the bloody good times.  Back 4 Blood feels like something approaching a worthy sequel, thanks to a ramping up of engine tech, a clever and fair &#34;card deck&#34; system, and surprisingly entertaining tweaks to humans-versus-zombie PvP combat.\n  For a primer, rewind to  my December 2020 look at the game&#39;s less-polished alpha version, which sets the stage as follows:\n Many of\u00a0 B4B&#39;s concepts are lifted shamelessly from\u00a0 L4D\u00a0(if the naming convention with a number &#34;4&#34; didn&#39;t clue you in). To wit: each of the game&#39;s &#34;campaign&#34; zones is broken up into smaller levels, and your squad gets an opportunity to rest, heal, and stock up on supplies at a &#34;safe zone&#34; between each level. Use guns, melee weapons, and explosive implements to tear through zombies, and juggle health items and tools to get your team from one safe zone to the next.\n That core conceit is still here, while this week&#39;s testing version adds more near-final polish to the experience. The biggest differentiator is a better look at its series of gameplay-modifying card decks, and from what I can tell, Turtle Rock Studios has implemented something that\u00a0 should work without demanding players spend a single additional penny on top of the retail price.\n    You&#39;ll start the game with a solid inventory of cards, along with an invitation to build 15-card decks. Whenever you dive into either PvE (co-op with friends against computer-controlled zombies) or PvP (a four-on-four versus mode), your first step is to pick one of your custom decks. At the beginning of each campaign phase, some of your cards will be randomly dealt, and you pick one or two of them to augment your battling from there on out.\n Most directly benefit your character, with a smaller number of cards giving all teammates some sort of boost. Often, these are simple numerical boosts, ranging from additional health or ammo to special perks that turn on when your character is low on health. Others give your character entirely new attacks or abilities, like a &#34;charged&#34; melee attack that lets you hold the melee button down longer to barrel into zombies.\n    Each player will choose roughly six cards per session (always in a &#34;deal five, pick one&#34; capacity). This means proper deck-building lets players dial in various gameplay philosophies\u2014without necessarily guaranteeing their dream cards get dealt every time. The earliest deck options in the beta strongly emphasize melee, especially when they stack a health bonus for every zombie killed with a melee weapon. Later card unlocks make it easier to kill from afar, heal and revive allies, or stack up your endurance meter (which runs down when you run or use melee attacks).\n As I spent more time playing the beta, I felt genuine excitement in earning the points needed to unlock more deck options. I didn&#39;t want to be a sniper at first, thanks to how much fun I had battling with shotguns and axes, but I grew to long for a deck that would emphasize distance attacks while hand-to-hand duties went to my squadmates. I imagine the beta will expose various math-related tweaks needed for some of the cards, but make no mistake: already, this system adds welcome spice to the dated  Left 4 Dead co-op formula. And if publisher WB Games doesn&#39;t screw it up by adding microtransactions to these cards, then we&#39;re in for a good deck-building time.\n     B4B&#39;s four-on-four versus mode will look familiar to  L4D fans, as it, too, pits teams of &#34;cleaner&#34; humans against teams of super zombies. But where the  L4D version could feel overlong and unwieldy, Turtle Rock&#39;s new spin prioritizes quicker, more dynamic combat that&#39;s better built to stave off rage-quitters.\n  In  L4D&#39;s versus modes, teams of zombies invaded normal campaign maps to interrupt, annoy, and (hopefully) kill the human teams.  B4B&#39;s twist revolves around smaller, versus-specific slices of the campaign&#39;s maps, along with a battle royale-like &#34;safe zone&#34; that moves every 60 seconds. Each team takes turns as the zombies and the humans, one shot at each side per round, and the object is for each team to last longer as humans in a given round.\n From what I&#39;ve seen, teams in human mode can last as long as four minutes or as little as 45 seconds per round. Lasting longer as a human team, or ruining the humans&#39; day as zombies, requires both sides to make wise decisions about map control. In particular,\u00a0humans can&#39;t rely on hiding in a &#34;safe&#34; corner of a map, as the moving safe zone will usually lead to a poison cloud filling up a formerly useful building or cave. Humans would be wise to maximize any seemingly safe region&#39;s extra ammo, gadgets, and health pickups before they&#39;re covered in poison gas.\n Zombies, meanwhile, are seriously overpowered in terms of seeing humans&#39; outlines on the map at all times. This is arguably a compensation for how slow most super zombies are compared to humans. Thus, a good zombie round will hinge on effective communication and triangulation\u2014as the super zombies do best when they separate human teammates, then take one or two of them down. (Meanwhile, humans, stick together, for god&#39;s sake!)\n As a best-of-three mode,  B4B&#39;s versus combat is always in equal reach for both teams until the moment it&#39;s not, as opposed to dragging out obvious team imbalances. Unfortunately, I&#39;m not charmed by the versus mode map design I&#39;ve seen thus far: it&#39;s mostly made up of remixed houses and terrain from the campaign\u2014often with too many easy corner hiding spots for humans to settle into. More verticality and forced movement could go a long way to add legs to this mode, especially since human players can&#39;t expect to use weapon families like sniper rifles in the levels I&#39;ve thus far seen.", "posttime": "2021-08-06 10:07:55", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "blood,beta,\u4eba\u7c7b", "title": "\u8fd4\u56de 4 Blood beta \u5370\u8c61\uff1a\u6f5c\u5728\u5408\u4f5c\u793e\u4f1f\u5927\u7684\u6a21\u677f", "title_en": "Back 4 Blood beta impressions: A template for potential co-op greatness", "transed": 1, "url": "https://arstechnica.com/gaming/2021/08/back-4-blood-beta-impressions-a-template-for-potential-co-op-greatness/", "via": "", "real_tags": ["blood", "beta", "\u4eba\u7c7b"]}, {"category": "", "categoryclass": "", "imagename": "96d7618aa920aeb0bc63e3f691a8a668.jpeg", "infoid": 1071699, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5355\u51fb\u201c\u6ce8\u518c\u201d\uff0c\u5373\u8868\u793a\u60a8\u540c\u610f\u63a5\u6536\u6765\u81ea Insider \u7684\u8425\u9500\u7535\u5b50\u90ae\u4ef6\u4ee5\u53ca\u5176\u4ed6\u5408\u4f5c\u4f19\u4f34\u7684\u4f18\u60e0\uff0c\u5e76\u63a5\u53d7\u6211\u4eec\u7684\u670d\u52a1\u6761\u6b3e\u548c\u9690\u79c1\u653f\u7b56\u3002\u636e\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u5468\u56db\u62a5\u9053\uff0c\u636e\u62a5\u9053\uff0c\u82f9\u679c\u516c\u53f8\u8ba1\u5212\u63a8\u51fa\u8f6f\u4ef6\uff0c\u8be5\u8f6f\u4ef6\u5c06\u626b\u63cf\u7f8e\u56fd iPhone \u7167\u7247\u4e2d\u7684\u513f\u7ae5\u6027\u8650\u5f85\u56fe\u50cf\u3002\u62a5\u9053\u63f4\u5f15\u719f\u6089\u82f9\u679c\u8ba1\u5212\u7684\u5b89\u5168\u7814\u7a76\u4eba\u5458\u7684\u8bdd\u79f0\uff0c\u82f9\u679c\u53ef\u80fd\u4f1a\u5728\u4e0b\u5468\u5ba3\u5e03\u66f4\u591a\u6709\u5173\u8be5\u8f6f\u4ef6\u7684\u4fe1\u606f\u3002\u636e\u62a5\u9053\uff0c\u8be5\u8f6f\u4ef6\u540d\u4e3a neuralMatch\uff0c\u65e8\u5728\u67e5\u770b\u5b58\u50a8\u5728 iPhone \u4e0a\u5e76\u4e0a\u4f20\u5230 iCloud \u5b58\u50a8\u7684\u56fe\u50cf\u3002\u636e\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u62a5\u9053\uff0c\u5982\u679c\u8be5\u8f6f\u4ef6\u68c0\u6d4b\u5230\u7167\u7247\u4e2d\u7684\u513f\u7ae5\u6027\u8650\u5f85\uff0c\u5b83\u5c31\u4f1a\u5c06\u6750\u6599\u4f20\u9012\u7ed9\u4eba\u7c7b\u5ba1\u9605\u8005\uff0c\u5982\u679c\u4ed6\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u56fe\u50cf\u662f\u975e\u6cd5\u7684\uff0c\u4ed6\u4eec\u4f1a\u63d0\u9192\u6267\u6cd5\u90e8\u95e8\u3002\u7136\u800c\uff0c\u5b89\u5168\u4e13\u5bb6\u8b66\u544a\u8bf4\uff0c\u8fd9\u53ef\u80fd\u8d85\u51fa\u5bfb\u627e\u513f\u7ae5\u6027\u8650\u5f85\u56fe\u50cf\u7684\u8303\u56f4\u3002\u7ea6\u7ff0\u970d\u666e\u91d1\u65af\u5927\u5b66\u7684\u5bc6\u7801\u5b66\u5bb6\u9a6c\u4fee\u683c\u6797\u5728\u63a8\u7279\u4e0a\u8bf4\uff1a\u201c\u4ed6\u4eec\u5728\u8fd9\u4e00\u70b9\u4e0a\u662f\u5bf9\u8fd8\u662f\u9519\u5e76\u4e0d\u91cd\u8981\u3002\u8fd9\u5c06\u6253\u7834\u5927\u575d\u2014\u2014\u653f\u5e9c\u5c06\u8981\u6c42\u6bcf\u4e2a\u4eba\u8fd9\u6837\u505a\u3002\u201d\u82f9\u679c\u53d1\u8a00\u4eba\u6ca1\u6709\u7acb\u5373\u56de\u5e94 Insider \u7684\u8bc4\u8bba\u8bf7\u6c42\uff0c\u8be5\u516c\u53f8\u62d2\u7edd\u5411\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u53d1\u8868\u8bc4\u8bba\u3002\n\u8fd9\u79cd\u65b0\u8f6f\u4ef6\u5982\u679c\u5b9e\u65bd\uff0c\u53ef\u80fd\u4f1a\u53d6\u60a6\u6267\u6cd5\u90e8\u95e8\u548c\u653f\u5e9c\u673a\u6784\uff0c\u4f46\u53ef\u80fd\u4f1a\u5f15\u8d77\u9690\u79c1\u6743\u6d3b\u52a8\u5bb6\u7684\u5f3a\u70c8\u53cd\u5bf9\u3002\u8fd1\u5e74\u6765\uff0cApple \u5c06\u9690\u79c1\u529f\u80fd\u4f5c\u4e3a\u5176\u8425\u9500\u7684\u57fa\u77f3\uff0c\u5e76\u5ba3\u4f20\u201ciPhone \u4e0a\u53d1\u751f\u7684\u4e8b\u60c5\u4f1a\u7559\u5728 iPhone \u4e0a\u201d\u3002\u4f46\u8fd9\u79cd\u627f\u8bfa\u548c\u6743\u8861\u662f\u6709\u9650\u7684\u3002 Apple \u5df2\u7ecf\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u201c\u6563\u5217\u201d\u7684\u6280\u672f\u76d1\u63a7\u4ece Apple \u8bbe\u5907\u53d1\u9001\u7684\u56fe\u50cf\u4e2d\u662f\u5426\u5b58\u5728\u8650\u5f85\u513f\u7ae5\u7684\u56fe\u50cf\uff0c\u5e76\u5728\u7b97\u6cd5\u548c Apple \u5458\u5de5\u68c0\u6d4b\u5230\u53ef\u7591\u7684\u8650\u5f85\u513f\u7ae5\u6750\u6599\u65f6\u5411\u6267\u6cd5\u90e8\u95e8\u53d1\u51fa\u8b66\u62a5\u3002\u5b83\u8fd8\u4e0e\u6267\u6cd5\u90e8\u95e8\u5408\u4f5c\u5904\u7406\u5408\u6cd5\u7684\u4fe1\u606f\u8bf7\u6c42\u3002 \u201c\u6211\u4eec\u7684\u6cd5\u5f8b\u56e2\u961f\u4f1a\u5ba1\u67e5\u8bf7\u6c42\uff0c\u4ee5\u786e\u4fdd\u8bf7\u6c42\u5177\u6709\u6709\u6548\u7684\u6cd5\u5f8b\u4f9d\u636e\uff0c\u201d\u82f9\u679c\u5728\u5176\u7f51\u7ad9\u4e0a\u5199\u9053\u3002 \u201c\u5982\u679c\u4ed6\u4eec\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u4f1a\u901a\u8fc7\u63d0\u4f9b\u54cd\u5e94\u8bf7\u6c42\u7684\u6570\u636e\u6765\u9075\u5b88\u3002\u5982\u679c\u8bf7\u6c42\u6ca1\u6709\u6709\u6548\u7684\u6cd5\u5f8b\u4f9d\u636e\uff0c\u6216\u8005\u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u5b83\u4e0d\u660e\u786e\u3001\u4e0d\u9002\u5f53\u6216\u8fc7\u4e8e\u5bbd\u6cdb\uff0c\u6211\u4eec\u4f1a\u8d28\u7591\u6216\u62d2\u7edd\u8be5\u8bf7\u6c42\u3002\u6211\u4eec\u62a5\u544a\u6bcf\u516d\u4e2a\u6708\u6536\u5230\u4e00\u6b21\u8bf7\u6c42\u3002\u201d\u8fc7\u53bb\uff0c\u82f9\u679c\u62d2\u7edd\u4e86\u653f\u5e9c\u673a\u6784\u8981\u6c42\u8be5\u516c\u53f8\u5b89\u88c5\u540e\u95e8\u4ee5\u5141\u8bb8\u6267\u6cd5\u90e8\u95e8\u8bbf\u95ee\u52a0\u5bc6\u4fe1\u606f\u7684\u8981\u6c42\u3002\u7ebd\u7ea6\u5e02\u8b66\u65b9\u548c\u68c0\u5bdf\u5b98\u6279\u8bc4\u82f9\u679c\u516c\u53f8\u7684\u52a0\u5bc6\u6280\u672f\u5e2e\u52a9\u72af\u7f6a\u5206\u5b50\u5411\u6267\u6cd5\u90e8\u95e8\u9690\u7792\u4fe1\u606f\u3002 Facebook \u7b49\u5176\u4ed6\u79d1\u6280\u516c\u53f8\u4e5f\u9677\u5165\u4e86\u4fdd\u62a4\u7528\u6237\u9690\u79c1\u548c\u6267\u6cd5\u673a\u6784\u548c\u653f\u5e9c\u673a\u6784\u8981\u6c42\u4e4b\u95f4\u7684\u56f0\u5883\u3002\u591a\u5bb6\u516c\u53f8\u7684\u653f\u5e9c\u5b98\u5458\u6279\u8bc4 Facebook \u5bf9\u5176 Messenger \u670d\u52a1\u8fdb\u884c\u52a0\u5bc6\uff0c\u56e0\u4e3a\u5b83\u4f7f\u68c0\u6d4b\u63cf\u7ed8\u513f\u7ae5\u6027\u5265\u524a\u7684\u5185\u5bb9\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\u7814\u7a76\u4eba\u5458\u544a\u8bc9\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\uff0c\u82f9\u679c\u7684\u51b3\u5b9a\u53ef\u80fd\u4f1a\u8feb\u4f7f\u5176\u4ed6\u516c\u53f8\u5b9e\u65bd\u7c7b\u4f3c\u7684\u76d1\u63a7\uff0c\u5e76\u4e14\u968f\u540e\u53ef\u80fd\u4f1a\u6269\u5c55\u5230\u5bf9\u513f\u7ae5\u6027\u8650\u5f85\u4ee5\u5916\u7684\u56fe\u50cf\u7684\u76d1\u63a7\uff0c\u4f8b\u5982\u6297\u8bae\u6d3b\u52a8\u4e2d\u7684\u53cd\u653f\u5e9c\u6807\u5fd7\u3002\u6ce8\u518c\u63a5\u6536\u6765\u81ea Insider \u7684\u901a\u77e5\uff01\u53ca\u65f6\u4e86\u89e3\u60a8\u60f3\u4e86\u89e3\u7684\u5185\u5bb9\u3002\n\u5f62\u6210\u201cX\u201d\u7684\u4e24\u6761\u200b\u200b\u4ea4\u53c9\u7ebf\u3002\u5b83\u6307\u793a\u4e00\u79cd\u5173\u95ed\u4ea4\u4e92\u6216\u5173\u95ed\u901a\u77e5\u7684\u65b9\u5f0f\u3002", "note_en": "By clicking \u2018Sign up\u2019, you agree to receive marketing emails from Insider as well as other partner offers and accept our  Terms of Service and  Privacy Policy.\n    Apple is reportedly planning to roll out  software that will scan US iPhone photos for images of child sexual abuse, the Financial Times reported on Thursday.\n Apple could announce more about the software in the coming week, according to the report, which cited security researchers familiar with Apple&#39;s plans.\n The software, reportedly called neuralMatch, is designed to look through images that have been stored on iPhones and uploaded to iCloud storage. According to the Financial Times, if the software detects child sexual abuse in a photo, it will then pass the material on to human reviewers who will alert law enforcement if they think the images are illegal.\n However, security experts warned that this could snowball beyond looking for child sexual abuse images.\n     &#34;Whether they turn out to be right or wrong on that point hardly matters. This will break the dam \u2014 governments will demand it from everyone,&#34; Matthew Green, a cryptographer at Johns Hopkins University, said on Twitter.\n  An Apple spokesperson did not immediately respond to Insider&#39;s request for comment, and the company declined to comment to the Financial Times.\n  This new software, if implemented, would likely please law enforcement and government agencies, but risks potential backlash from privacy activists. Apple has made privacy features a cornerstone of its marketing in recent years, advertising that  &#34;what happens on your iPhone stays on your iPhone.&#34;\n But there are limits to this promise, and tradeoffs. Apple  already monitors images sent from Apple devices for child abuse imagery, using a technique called &#34;hashing,&#34; and alerts law enforcement when the algorithm and an Apple employee detect suspected child abuse material. It also cooperates with law enforcement on lawful requests for information.\n     &#34;Our legal team reviews requests to ensure that the requests have a valid legal basis,&#34; Apple writes  on its website. &#34;If they do, we comply by providing data responsive to the request. If a request does not have a valid legal basis, or if we consider it to be unclear, inappropriate, or overly broad, we challenge or reject the request. We report on the requests every six months.&#34;\n In the past, Apple has  resisted government agencies&#39; requests for the company to install a back door that would allow law enforcement to access encrypted messages. New York City police and prosecutors have  criticized Apple&#39;s encryption technology for aiding criminals in hiding information from law enforcement.\n Other tech companies like Facebook have also been  caught between protecting users&#39; privacy and requests from law enforcement and government agencies. Government officials in multiple companies have criticized Facebook&#39;s encryption of its Messenger service for making it more difficult to detect content depicting child sexual exploitation.\n Researchers told the Financial Times that Apple&#39;s decision could pressure other companies into implementing similar kinds of monitoring and could later expand into monitoring of images beyond child sexual abuse, like anti-government signs held at protests.\n  Sign up for notifications from Insider! Stay up to date with what you want to know.\n            Two crossed lines that form an &#39;X&#39;. It indicates a way to close an interaction, or dismiss a notification.", "posttime": "2021-08-06 10:07:27", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u82f9\u679c,iphone,apple,\u6027\u8650\u5f85", "title": "\u5982\u679c\u4f60\u4f4f\u5728\u7f8e\u56fd\uff0c\u636e\u62a5\u9053\u82f9\u679c\u8ba1\u5212\u626b\u63cf\u4f60\u7684 iPhone \u4ee5\u67e5\u627e\u513f\u7ae5\u6027\u8650\u5f85\u56fe\u50cf", "title_en": "If you live in the US, Apple reportedly plans to scan your iPhone for child sexual abuse images", "transed": 1, "url": "https://www.businessinsider.com/apple-plans-software-scan-us-iphones-child-abuse-images-report-2021-8", "via": "", "real_tags": ["\u7f8e\u56fd", "\u82f9\u679c", "iphone", "apple", "\u6027\u8650\u5f85"]}, {"category": "", "categoryclass": "", "imagename": "c8b0ba6312be4d448f80c8c907859f98.png", "infoid": 1071697, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728 Trisha \u9152\u5427\u7684\u5395\u6240\u8bbe\u65bd\u4e2d\uff0c\u90a3\u4e2a\u5149\u8363\u7684 Soho \u8001\u5e78\u5b58\u8005\uff0c\u88c5\u9970\u7740 Al Capone \u548c\u6559\u7687\u7684\u7167\u7247\uff0c\u5728\u89c6\u7ebf\u9ad8\u5ea6\u4e0a\u5199\u7740\u4e00\u4e2a\u4f20\u8bf4\uff1a\u201c\u4ec5\u7528\u4f5c\u5c0f\u4fbf\u6c60\u3002\u6ca1\u6709\u5750\u3002\u9664\u4e86\u6709\u4eba\u2014\u2014\u6211\u76f8\u4fe1\u4ed6\u4eec\u901a\u5e38\u88ab\u79f0\u4e3a\u201cwag\u201d\u2014\u2014\u5728\u6700\u540e\u4e00\u4e2a\u8bcd\u4e2d\u63d2\u5165\u4e86\u4e00\u4e2a H\uff0c\u4f7f\u5176\u6210\u4e3a\u540c\u6837\u719f\u6089\uff08\u5e76\u4e14\u53ef\u4ee5\u8bf4\u66f4\u5408\u9002\uff09\u7684\u76ce\u683c\u9c81\u6492\u514b\u900a\u8bed\u3002\u8fd8\u662f\u5e94\u8be5\u662f\u539f\u59cb\u5370\u6b27\u8bed\u7cfb\uff1f\u6b63\u5982\u7ea6\u7ff0\u9ea6\u514b\u6c83\u7279\u5728\u4e5d\u4e2a\u8ba8\u538c\u7684\u8bcd\u4e2d\u544a\u8bc9\u6211\u4eec\u7684\u90a3\u6837\uff0c\u90a3\u4e2a\u88ab\u6d82\u9e26\u7684\u52a8\u8bcd\u7684\u5386\u53f2\uff08\u5c3d\u7ba1\uff0c\u6b63\u5982\u4ed6\u6240\u6307\u51fa\u7684\uff0c\u5b83\u4e5f\u53ef\u4ee5\u662f\u540d\u8bcd\u3001\u5f62\u5bb9\u8bcd\u3001\u4ee3\u8bcd\uff0c\u751a\u81f3\u201c\u7a0d\u4f5c\u8c03\u6574\u201d\u662f\u526f\u8bcd\uff09\u53ef\u4ee5\u8ffd\u6eaf\u5230skei \u8fd9\u4e2a\u8bcd\u2014\u2014\u88ab\u6614\u65e5\u7684\u8349\u539f\u5c45\u6c11\u4f7f\u7528\uff0c\u610f\u601d\u662f\u201c\u5207\u65ad\u201d\u3002\u8fd9\u771f\u7684\u5f88\u6709\u8da3\uff0c\u53ef\u4ee5\u5728\u5395\u6240\u91cc\u5b66\u4e60\u7684\u4e1c\u897f\u3002 Skei \u7684\u73b0\u4ee3\u540e\u88d4\u662f McWhorter \u5728\u8fd9\u90e8\u5145\u6ee1\u6d3b\u529b\u548c\u5b66\u672f\u6027\u7684\u4eb5\u6e0e\u5386\u53f2\u4e2d\u63cf\u8ff0\u7684\u4e5d\u4e2a\u8bcd\u4e4b\u4e00\u3002\u6b63\u5982\u60a8\u5728\u8bed\u8a00\u5b66\u6559\u6388\u7684\u4f5c\u54c1\u4e2d\u6240\u671f\u671b\u7684\u90a3\u6837\uff0c\u8bcd\u6e90\u5b66\u548c\u6df7\u86cb\u6545\u4e8b\u5728\u6bcf\u4e00\u7ae0\u4e2d\u5360\u636e\u4e86\u76f8\u5f53\u5927\u7684\u6bd4\u4f8b\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u795e\u8bdd\u6bd4\u62c9\u4e01\u8bed\u3001\u8bfa\u66fc\u8bed\u6216\u4e2d\u53e4\u82f1\u8bed\u8150\u8d25\u7684\u5b9e\u9645\u6848\u4f8b\u66f4\u5f15\u4eba\u5165\u80dc\u3002\u6709\u4e9b\u4eba\u8ba4\u4e3a\u5728 Trisha&#39;s \u5395\u6240\u89d2\u843d\u53d1\u73b0\u7684\u8fd9\u4e2a\u5c0f\u8bcd\u5b9e\u9645\u4e0a\u662f\u201cShip High in Transit\u201d\u7684\u9996\u5b57\u6bcd\u7f29\u5199\u8bcd\u2014\u2014\u4e0e\u7caa\u4fbf\u7684\u6d77\u8fd0\u6709\u5173\uff0c\u4f46\u6b63\u5982\u9ea6\u514b\u6c83\u7279\u6307\u51fa\u7684\u90a3\u6837\uff0c\u8fd9\u662f\u4e00\u4e2a\u5feb\u4e50\u7684\u8bcd\u65e9\u5728\u9e1f\u7caa\u8d38\u6613\u7206\u70b8\u4e4b\u524d\uff0c\u4e54\u53df\u548c\u5176\u4ed6\u4eba\u5c31\u5df2\u7ecf\u77e5\u9053\u4e86\u3002\u8fd8\u6709\u4e00\u4e9b\u4eba\u8ba4\u4e3a\uff0c\u6e90\u81ea\u4e00\u53ea\u6bcd\u72d7\u7684\u540d\u5b57\uff08\u6211\u4eec\u81f3\u5c11\u5728 1397 \u5e74\u5c31\u6709\u82f1\u6587\u8bb0\u5f55\uff09\u4ee3\u8868\u201c\u5b8c\u5168\u63a7\u5236\u8702\u871c\u201d\u3002\u60f3\u8c61\u739b\u683c\u4e3d\u7279\u00b7\u535a\u798f\u7279\u592b\u4eba\u6216\u4f0a\u4e3d\u838e\u767d\u00b7\u4f0d\u5fb7\u7ef4\u5c14\u4ee5\u743c\u00b7\u67ef\u6797\u65af\u7684\u65b9\u5f0f\u8bf4\u8bdd\u662f\u76f8\u5f53\u4ee4\u4eba\u6109\u5feb\u7684\u3002\u867d\u7136\u6211\u77e5\u9053\u636e\u8bf4\u662f\u201c\u5728\u56fd\u738b\u540c\u610f\u4e0b\u901a\u5978\u201d\u8fd9\u4e2a\u8bcd\u7684\u9996\u5b57\u6bcd\u7f29\u5199\u8bcd\u7684\u8bcd\u6e90\u6709\u8bef\uff0c\u4f46\u5f97\u77e5\u8fd9\u4e2a\u8bcd\u7684\u7b2c\u4e00\u4e2a\u4e66\u9762\u7528\u6cd5\u6765\u81ea\u4e00\u4f4d\u795e\u804c\u4eba\u5458\u4e4b\u624b\u2014\u2014\u4e00\u4f4d\u50e7\u4fa3\uff0c\u4ed6\u5728 1528 \u5e74\u5728\u4e00\u4e9b\u65c1\u6ce8\u4e2d\u4f7f\u7528\u5b83\u6765\u6307\u4ee3\u4ed6\u660e\u663e\u4e0d\u559c\u6b22\u7684\u65b9\u4e08\u3002\u6211\u4e0d\u7981\u8ba4\u4e3a\uff0c\u4e0e\u901a\u5e38\u7684\u8fc2\u56de\u88ab\u52a8\u4fb5\u7565\u76f8\u53cd\uff0c\u8fd9\u79cd\u76f4\u767d\u7684\u8bf4\u6cd5\u4f1a\u6539\u5584\u6559\u4f1a\u65f6\u62a5\u7684\u4fe1\u4ef6\u9875\u9762\u3002\u8bf8\u5982\u4e0a\u8ff0\u8f76\u4e8b\u7684\u6765\u6e90\u8303\u56f4\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\u4f8b\u5982\uff0c\u5728\u73b0\u5728\u65e0\u5904\u4e0d\u5728\u7684\u201c\u8be5\u6b7b\u201d\u548c\u201c\u5730\u72f1\u201d\u4e00\u7ae0\u4e2d\uff0c\u9ea6\u514b\u6c83\u7279\u5f15\u7528\u4e86\u5404\u79cd\u5404\u6837\u7684\u6765\u6e90\uff0c\u4f8b\u5982\u574e\u7279\u4f2f\u96f7\u6545\u4e8b\u4e2d\u7684\u8d66\u514d\u8005\u3001HMS Pinafore \u4e2d\u7684\u79d1\u514b\u5170\u8239\u957f\u548c\u5408\u6cd5\u91d1\u53d1\u5973\u90ce\uff1a\u97f3\u4e50\u5267\u7684\u5f00\u573a\u53f7\u7801\uff0c\u5176\u4e2d\uff0c\u6211\u5b66\u4f1a\u4e86\u6211\u7684\u718f\u9676\uff0c\u9898\u4e3a&#39;Omigod You Guys&#39;\u3002\u867d\u7136\u603b\u7684\u6765\u8bf4\u8fd9\u662f\u4e00\u672c\u5173\u4e8e\u7cbe\u5fc3\u90e8\u7f72\u7684\u5492\u9a82\u7684\u4e50\u8da3\u7684\u4e66\uff0c\u4f46\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u786e\u5b9e\u8ba9\u6211\u6000\u7591\u4eb5\u6e0e\u6cd5\u5230\u5e95\u662f\u4e0d\u662f\u4e00\u4ef6\u574f\u4e8b\u3002\u4e5f\u8bb8\u56e0\u4e3a\u8fd9\u662f\u4e00\u672c\u5173\u4e8e\u8bed\u8a00\u53e3\u8bed\u4f7f\u7528\u7684\u4e66\uff0c\u5176\u4e2d\u7684\u7f8e\u56fd\u4e3b\u4e49\u4f3c\u4e4e\u6bd4\u8d77\u6e90\u4e8e\u5927\u897f\u6d0b\u5bf9\u5cb8\u7684\u5176\u4ed6\u4e66\u7c4d\u66f4\u5f15\u4eba\u6ce8\u76ee\u3002\u4f8b\u5982\uff0c\u5f53\u8ba8\u8bba\u5728 Trisha&#39;s \u7684\u5395\u6240\u4e2d\u5982\u6b64\u4f18\u96c5\u5730\u90e8\u7f72\u7684\u52a8\u8bcd\u7684\u8fc7\u53bb\u5f0f\u65f6\uff0cMcWhorter \u65ad\u8a00\u4e0e\u201cbat\u201d\u62bc\u97f5\u7684\u52a8\u8bcd\u5f62\u5f0f\u4f3c\u4e4e\u662f\u53d7\u5f71\u54cd\u7684\u6216\u201c\u62f1\u5f62\u201d\u3002\u5728\u8fd9\u4e2a\u56fd\u5bb6\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5c06\u201c\u62f1\u95e8\u201d\u4e0e\u8bfa\u57c3\u5c14\u00b7\u8003\u6c83\u5fb7 (No\u00ebl Coward) \u7684\u9ec4\u8702\u8f76\u4e8b\u8054\u7cfb\u8d77\u6765\uff0c\u4f46\u6211\u8ba4\u4e3a\uff0c\u4e0e\u4ee5\u7279\u5b9a\u8fc7\u53bb\u5206\u8bcd\u4e3a\u7279\u8272\u7684\u81ea\u6211\u73b7\u6c61\u6545\u4e8b\u65e0\u5173\u3002\u867d\u7136\u5173\u4e8e\u53e4\u8001\u7684\u810f\u8bdd\u7684\u7ae0\u8282\u5f88\u6709\u8da3\uff0c\u4f46\u4e66\u4e2d\u6700\u6709\u6548\u7684\u90e8\u5206\u662f\u90a3\u4e9b\u88ab\u8ba4\u4e3a\u662f\u771f\u6b63\u7981\u5fcc\u7684\u8bcd\u6c47\uff0c\u5373\u4f7f\u5728\u6211\u4eec\u8fd9\u6837\u5bbd\u5bb9\u7684\u793e\u4f1a\u4e2d\u3002\u5173\u4e8e\u8fd9\u4e2a\u8bcd\u7684\u7528\u6cd5\u88ab\u8ba4\u4e3a\u662f\u4ee4\u4eba\u53cd\u611f\u7684\uff0c\u4ee5\u81f3\u4e8e\u5b83\u5bfc\u81f4\u5176\u4e0d\u5e78\u7684\u8fd1\u540c\u97f3\u8bcd\u201cniggardly\u201d\uff08\u5317\u6b27\u8bed\u4e2d\u4e0e\u201cmiser\u201d\u65e0\u5173\u7684\u672f\u8bed\uff09\u8870\u843d\u7684\u4e00\u7ae0\u7279\u522b\u6709\u542f\u53d1\u6027\uff0c\u751a\u81f3\u611f\u4eba\u3002 McWhorter \u5728\u4ed6\u5173\u4e8e\u4e00\u6346\u68cd\u5b50\u7684\u65e7\u672f\u8bed\u7684\u7ae0\u8282\u4e2d\u540c\u6837\u654f\u611f\uff0c\u73b0\u5728\u66f4\u5e38\u7528\u6765\u8868\u793a\u201c\u9999\u70df\u201d\u3001\u201c\u8089\u4e38\u72b6\u6df7\u5408\u7269\u201d\u548c\u201c\u5bf9\u540c\u6027\u604b\u8005\u7684\u8bfd\u8c24\u201d\u3002\u8fd9\u672c\u4e66\u63d0\u9192\u6211\u4eec\uff0c\u6b63\u5982 McWhorter \u6240\u8bf4\uff0c\u810f\u8bdd\u65e2\u5177\u6709\u7e41\u6b96\u548c\u8fdb\u5316\u7684\u80fd\u529b\uff0c\u800c\u4e14\u66f4\u91cd\u8981\u7684\u662f\u5fc5\u4e0d\u53ef\u5c11\u3002\u5373\u4f7f\u5728\u4e00\u4e2a\u544a\u8bc9\u81ea\u5df1\u5b83\u73cd\u89c6\u201c\u8a00\u8bba\u81ea\u7531\u201d\u7684\u534a\u771f\u534a\u5047\u7684\u793e\u4f1a\u4e2d\uff0c\u786e\u5b9e\u5fc5\u987b\u6709\u4e00\u4e9b\u8d85\u8d8a\u82cd\u767d\u7684\u8bcd\u2014\u2014\u4ecd\u7136\u53ef\u4ee5\u4ee4\u4eba\u9707\u60ca\u3001\u6fc0\u52a8\u6216\u7f9e\u803b\u7684\u8bcd\u3002\u5e0c\u671b\u65e0\u8bba\u662f\u5bbd\u5bb9\u8fd8\u662f\u5979\u7684\u5b6a\u751f\u59d0\u59b9\u6e05\u6559\u4e3b\u4e49\uff0c\u90fd\u4e0d\u4f1a\u771f\u6b63\u9609\u5272\u82f1\u8bed\u4e2d\u66f4\u80ae\u810f\u3001\u66f4\u5371\u9669\u7684\u90e8\u5206\u3002", "note_en": "T he lavatory facilities at Trisha\u2019s bar, that glorious survivor of old Soho, adorned with photos of Al Capone and the pope, bear a legend written at eye level: \u2018USE AS URINAL ONLY. NO SITTING.\u2019 Except someone \u2013 I believe they are known usually as a \u2018wag\u2019 \u2013 has inserted an H into the final word, rendering it an equally familiar (and, arguably, more appropriate) piece of Anglo-Saxon. Or ought that to be Proto-Indo-European? As John McWhorter informs us in  Nine Nasty Words, the history of that graffitied verb (though, as he points out, it can also be a noun, an adjective, a pronoun and even \u2018with a bit of adjustment\u2019 an adverb) goes back to the word  skei \u2013  used by steppe dwellers of yore and meaning \u2018to cut off\u2019. It really is fascinating, the things one can learn in a lavatory.\n Skei\u2019s modern-day descendant is one of nine words profiled by McWhorter in this spirited and scholarly history of profanities. As you\u2019d expect in a work by a professor of linguistics, etymologies and tales of bastardisation form a sizeable proportion of each chapter. As is often the case, the myths are more fascinating than the actual cases of corruption of Latin, Norman or Middle English. There are people who believe that the little word found in the lavatorial corner of Trisha\u2019s is in fact an acronym for \u2018Ship High in Transit\u2019 \u2013 relating to the seaborne transport of manure, though, as McWhorter points out, it was a word bandied merrily about by Chaucer and others long before the explosion in the guano trade.\n There are also those who hold that the slur derived from the name of a female dog (of which we have written records in English from at least 1397) stands for \u2018Being in Total Control Honey\u2019. It\u2019s rather pleasing to imagine Lady Margaret Beaufort or Elizabeth Woodville speaking in the manner of Joan Collins. While I was aware of the erroneous etymology of the word said to be an acronym for \u2018Fornicating Under Consent of King\u2019, it was particularly wonderful to learn that this word\u2019s first written usage came from the hand of a cleric \u2013 a monk who in 1528 used it in some marginalia to refer to his clearly disliked abbot. I can\u2019t help but think the letters page of the  Church Times would be improved by such plain speaking, as opposed to the usual roundabout  passive aggression.\n The range of sources for anecdotes such as the one above is impressive. For instance, in the chapter on the now ubiquitous \u2018damn\u2019 and \u2018hell\u2019, McWhorter quotes sources as diverse as the Pardoner in  The Canterbury Tales, Captain Corcoran in  HMS Pinafore and the opening number of  Legally Blonde: The Musical,  which, I learned to my edification, is entitled \u2018Omigod You Guys\u2019 . While on the whole this is a book about the joys of well-deployed swearing, the final example did make me wonder whether blasphemy laws were such a bad thing after all.\n Perhaps because this is a book about language\u2019s colloquial use, the Americanisms within seem more noticeable than in other tomes originating on the opposite side of the Atlantic. For example, when discussing the past tense of the verb so elegantly deployed in the lavatories at Trisha\u2019s, McWhorter asserts that the form of the verb that rhymes with \u2018bat\u2019 seems affected or \u2018arch\u2019. In this country we might associate \u2018arch\u2019 with a waspish anecdote by No\u00ebl Coward, but not, I think, with tales of self-foulage that feature a particular past participle.\n While the chapters on the old familiar profanities are ripe with interest, the most effective sections of the book are those about words that are considered, even in a society as permissive as ours, to be truly taboo. The chapter on the word whose usage is considered so offensive that it has caused the decline of its unfortunate near-homophone \u2018niggardly\u2019 (an unrelated term from the Norse for \u2018miser\u2019) is particularly enlightening, moving even. McWhorter is equally as sensitive in his chapter on an old term for a bundle of sticks, which is now more commonly used to mean \u2018cigarette\u2019, \u2018meatballish concoction\u2019 and \u2018slur for a gay man\u2019.\n This book reminds us that profanities are both, as McWhorter puts it, \u2018fertile\u2019 in their ability to spawn and evolve and also, more importantly, essential. Even in a society which tells itself the half-truth that it treasures \u2018free speech\u2019, there are, indeed must be, words that are beyond the pale \u2013 words that can still shock, thrill or shame. It is to be hoped that neither permissiveness nor her twin sister, puritanism, will ever truly emasculate the English language of its nastier, danglier bits.", "posttime": "2021-08-06 09:59:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56fd\u738b,consent,\u52a8\u8bcd", "title": "\u5728\u56fd\u738b\u7684\u540c\u610f\u4e0b\u901a\u5978", "title_en": "Fornicating Under Consent of King", "transed": 1, "url": "https://literaryreview.co.uk/fornicating-under-consent-of-king", "via": "", "real_tags": ["\u56fd\u738b", "consent", "\u52a8\u8bcd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071695, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "VisiData \u662f\u4e00\u79cd\u7528\u4e8e\u8868\u683c\u6570\u636e\u7684\u4ea4\u4e92\u5f0f\u591a\u529f\u80fd\u5de5\u5177\u3002\u5b83\u5c06\u7535\u5b50\u8868\u683c\u7684\u6e05\u6670\u6027\u3001\u7ec8\u7aef\u7684\u6548\u7387\u548c Python \u7684\u5f3a\u5927\u529f\u80fd\u7ed3\u5408\u5230\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u5b9e\u7528\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u8f7b\u677e\u5904\u7406\u6570\u767e\u4e07\u884c\u3002", "note_en": "VisiData is an interactive multitool for tabular data. It combines the clarity of a spreadsheet, the efficiency of the terminal, and the power of Python, into a lightweight utility which can handle millions of rows with ease.", "posttime": "2021-08-06 09:58:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,open,\u8868\u683c", "title": "VisiData \u2013 \u5f00\u6e90\u6570\u636e\u591a\u529f\u80fd\u5de5\u5177", "title_en": "VisiData \u2013 open-source data multitool", "transed": 1, "url": "https://www.visidata.org/", "via": "", "real_tags": ["\u5f00\u6e90", "open", "\u8868\u683c"]}, {"category": "", "categoryclass": "", "imagename": "1bdd0419bc9746cad6b18131c00d3d21.png", "infoid": 1071694, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6280\u672f\u503a\u52a1\uff0c\u7b3c\u7f69\u7740\u6bcf\u4e2a\u4ea7\u54c1\u56e2\u961f\u7684\u5e7d\u7075\u3002\u5b83\u963b\u788d\u529f\u80fd\uff0c\u7ed9\u5f00\u53d1\u4eba\u5458\u5e26\u6765\u538b\u529b\uff0c\u5e76\u4f7f\u5ba2\u6237\u611f\u5230\u6cae\u4e27\u3002\u56e2\u961f\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u8fd9\u4e00\u70b9\u3002\u56e2\u961f\u6210\u5458\u5728\u6bcf\u6b21\u56de\u987e\u3001\u4e8b\u540e\u5206\u6790\u548c\u4ea7\u54c1\u8d28\u91cf\u5ba1\u67e5\u4e2d\u90fd\u4f1a\u63d0\u5230\u5b83\u3002\u7136\u800c\uff0c\u5b83\u4ecd\u7136\u5b58\u5728\u3002\u6280\u672f\u503a\u52a1\u611f\u89c9\u4e0d\u53ef\u907f\u514d\u4e14\u4e0d\u673d\uff0c\u8fd9\u662f\u60a8\u7684\u56e2\u961f\u65e0\u6cd5\u9003\u907f\u7684\u5b58\u5728\u3002\u4f46\u662f\uff0c\u5c3d\u7ba1\u5b83\u7684\u540d\u58f0\u4e0d\u597d\uff0c\u4f46\u6280\u672f\u503a\u52a1\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4e00\u4ef6\u597d\u4e8b\u2026\u2026\u5982\u679c\u7ba1\u7406\u5f97\u5f53\u3002\u6b63\u5982 Sandi Metz \u6240\u8bf4\uff0c\u201c\u5982\u679c\u5b83\u8ba9\u4f60\u611f\u89c9\u597d\u4e00\u4e9b\uff0c\u90a3\u4e48\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u4e00\u56e2\u7cdf\u89c6\u4e3a\u6210\u529f\u7684\u6807\u5fd7\u3002\u4f60\u7684\u7ade\u4e89\u5bf9\u624b\u6ca1\u6709\u6df7\u4e71\u7684\u539f\u56e0\u662f\u4ed6\u4eec\u5012\u95ed\u4e86\u3002\u4f60\u8d62\u4e86\uff0c\u4f60\u7684\u5956\u54c1\u662f\u4e00\u4e2a\u80cc\u53db\u65f6\u95f4\u8e42\u8e8f\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u201d\u6280\u672f\u503a\u52a1\u6765\u81ea\u5b66\u4e60\u548c\u6210\u957f\u3002\u5b83\u4f1a\u4e00\u76f4\u5728\u8fd9\u91cc\uff1b\u6211\u4eec\u7684\u76ee\u6807\u4e0d\u662f\u6d88\u706d\u5b83\uff0c\u800c\u662f\u9a6f\u670d\u5b83\u3002\u5b66\u4f1a\u63a5\u53d7\u6280\u672f\u503a\u52a1\u9700\u8981\u8bda\u5b9e\u5730\u5ba1\u89c6\u60a8\u7684\u4ea7\u54c1\u7684\u9700\u6c42\u548c\u80fd\u529b\u3002\u4f46\u5728\u8fd9\u91cc\u8981\u5c0f\u5fc3\u2014\u2014\u5f88\u5bb9\u6613\u5c48\u670d\u4e8e\u65b0\u8fd1\u504f\u89c1\u548c\u8fc7\u5ea6\u7d22\u5f15\u4f60\u7684\u56e2\u961f\u5728\u8fc7\u53bb\u51e0\u4e2a\u51b2\u523a\u4e2d\u7ecf\u5386\u7684\u75db\u82e6\u3002\u6700\u7ec8\uff0c\u76ee\u6807\u662f\u8ba9\u5f00\u8f9f\u65b0\u9053\u8def\u66f4\u5bb9\u6613\uff0c\u800c\u4e0d\u662f\u7ffb\u65b0\u65e7\u5730\u3002\u514b\u670d\u6280\u672f\u503a\u52a1\u9700\u8981\u4e00\u79cd\u5168\u9762\u7684\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u6765\u81ea\u5bf9\u5ba2\u6237\u9700\u6c42\u3001\u4ea7\u54c1\u7ec4\u7ec7\u7684\u4f18\u5148\u7ea7\u548c\u6574\u4f53\u4e1a\u52a1\u7684\u6df1\u5165\u4e86\u89e3\u3002\u5355\u72ec\u7406\u89e3\u6574\u4e2a\u753b\u9762\u662f\u4e0d\u53ef\u80fd\u7684\uff1b\u4f60\u9700\u8981\u4f9d\u8d56\u4f60\u7684\u76df\u53cb\u3002\u5728\u60a8\u6e05\u7406\u4ea7\u54c1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f88\u5bb9\u6613\u5c06\u60a8\u7684\u4ea7\u54c1\u7ecf\u7406\u6216\u5de5\u7a0b\u7ecf\u7406\u89c6\u4e3a\u5bf9\u624b\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u662f\u5173\u952e\u7684\u76df\u53cb\u3002\u5229\u7528\u4ed6\u4eec\u7684\u77e5\u8bc6\u548c\u89c2\u70b9\u6765\u5b8c\u5584\u60a8\u81ea\u5df1\u7684\u77e5\u8bc6\u548c\u89c2\u70b9\u3002\u63a5\u53d7\u6280\u672f\u503a\u52a1\u610f\u5473\u7740\u627f\u8ba4\u6ca1\u6709\u4efb\u4f55\u9879\u76ee\u662f\u4e07\u80fd\u7684\u3002\u53ea\u8981\u60a8\u7684\u4ea7\u54c1\u84ec\u52c3\u53d1\u5c55\uff0c\u603b\u4f1a\u6709\u53e6\u4e00\u4e2a\u9879\u76ee\u9700\u8981\u89e3\u51b3\u3002\u8ba9\u8fd9\u91ca\u653e\u4f60\u3002\u5c06\u6709\u66f4\u591a\u673a\u4f1a\u89e3\u51b3\u60a8\u9519\u8fc7\u7684\u4efb\u4f55\u95ee\u9898\u3002\u7136\u800c\uff0c\u8fd9\u610f\u5473\u7740\u4efb\u4f55\u6280\u672f\u9879\u76ee\u7684\u4e3b\u8981\u76ee\u6807\u4e4b\u4e00\u662f\u5efa\u7acb\u548c\u7ef4\u62a4\u4fe1\u4efb\uff0c\u4ee5\u4fbf\u60a8\u548c\u60a8\u7684\u56e2\u961f\u80fd\u591f\u6210\u529f\u5730\u5904\u7406\u672a\u6765\u7684\u9879\u76ee\u3002\u4fe1\u4efb\u59cb\u4e8e\u5468\u5230\u7684\u5408\u4f5c\u3002\u5c3d\u65e9\u5f00\u59cb\u4e0e\u5229\u76ca\u76f8\u5173\u8005\u7684\u5bf9\u8bdd\u3002\u5c06\u60f3\u6cd5\u4f20\u9012\u7ed9\u60a8\u7684 PM \u548c EM\uff0c\u5e76\u4ece\u60a8\u7684\u961f\u53cb\u90a3\u91cc\u5bfb\u6c42\u53cd\u9988\u3002\u5728\u56e2\u961f\u4e2d\u5de5\u4f5c\u65f6\uff0c\u601d\u8003\u53d8\u6210\u4e86\u4e00\u79cd\u96c6\u4f53\u6d3b\u52a8\u3002\u6709\u6548\u7684\u6280\u672f\u503a\u52a1\u9879\u76ee\u59cb\u4e8e\u8bbe\u5b9a\u79ef\u6781\u7684\u76ee\u6807\u3002\u5f88\u5bb9\u6613\u9677\u5165\u6839\u636e\u8fc7\u53bb\u6279\u51c6\u7684\u5185\u5bb9\u786e\u5b9a\u9879\u76ee\u8303\u56f4\u7684\u9677\u9631\uff0c\u8fc7\u65e9\u5730\u526a\u6389\u90e8\u5206\u4ee5\u5c1d\u8bd5\u4f7f\u5176\u9002\u5408\u3002\u8def\u7ebf\u56fe\u89c4\u5212\u662f\u5bf9\u8d44\u6e90\u7684\u534f\u5546\uff1a\u516c\u53f8\u5fc5\u987b\u5c06\u6709\u9650\u7684\u65f6\u95f4\u3001\u4eba\u5458\u548c\u8d44\u91d1\u5206\u6563\u5230\u4e0d\u65ad\u589e\u957f\u7684\u7ade\u4e89\u4f18\u5148\u4e8b\u9879\u6e05\u5355\u4e0a\u3002\n\u8ba9\u8def\u7ebf\u56fe\u89c4\u5212\u53d1\u6325\u4f5c\u7528\uff1a\u5c06\u60a8\u7684\u5efa\u8bae\u4e0e\u5176\u4ed6\u5efa\u8bae\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u786e\u5b9a\u5982\u4f55\u4f7f\u4e8b\u60c5\u9002\u5408\u3002\u8bd5\u56fe\u9884\u6d4b\u9886\u5bfc\u5982\u4f55\u4f18\u5148\u8003\u8651\u60a8\u7684\u9879\u76ee\u610f\u5473\u7740\u60a8\u53ef\u80fd\u4f1a\u9519\u8fc7\u8d44\u6e90\uff0c\u6216\u8005\u5728\u9700\u8981\u59a5\u534f\u65f6\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u53ef\u4ee5\u524a\u51cf\u3002\u4e00\u4e2a\u597d\u7684\u8ba1\u5212\u5e94\u8be5\u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u53cd\u9988\uff0c\u5f15\u53d1\u5173\u4e8e\u8def\u7ebf\u56fe\u3001\u4ea7\u54c1\u7684\u6574\u4f53\u6280\u672f\u5065\u5eb7\u72b6\u51b5\u3001\u56e2\u961f\u4f18\u52bf\u7b49\u7684\u8ba8\u8bba\u3002\u4f60\u5fc5\u987b\u8bda\u5b9e\u5730\u5bf9\u5f85\u6bcf\u4e00\u6b21\u5bf9\u8bdd\u3002\u8fc7\u5ea6\u63a8\u9500\u4e00\u4e2a\u9879\u76ee\u4ee5\u8bd5\u56fe\u83b7\u5f97\u6279\u51c6\u4f1a\u5728\u60a8\u7684\u4ea7\u54c1\u7ecf\u7406\u7684\u8111\u6d77\u4e2d\u4ea7\u751f\u5bf9\u8be5\u9879\u76ee\u7684\u626d\u66f2\u770b\u6cd5\u3002\u4ed6\u4eec\u5c06\u6839\u636e\u60a8\u63d0\u4f9b\u7684\u7ed3\u679c\u8fdb\u884c\u8ba1\u5212\uff0c\u671f\u671b\u8be5\u9879\u76ee\u65e0\u9700\u8fdb\u4e00\u6b65\u7684\u6280\u672f\u5de5\u4f5c\u5373\u53ef\u89e3\u9501\u67d0\u4e9b\u529f\u80fd\u3002\u5feb\u901f\u5931\u53bb\u4fe1\u4efb\u7684\u65b9\u6cd5\u662f\u8bbe\u5b9a\u9519\u8bef\u7684\u671f\u671b\u3002\u4e00\u65e6\u5931\u53bb\u4fe1\u4efb\uff0c\u672a\u6765\u7684\u9879\u76ee\u5c31\u5c8c\u5c8c\u53ef\u5371\u3002\u8bbe\u5b9a\u660e\u786e\u548c\u8bda\u5b9e\u7684\u671f\u671b\u3002\u5173\u6ce8\u5373\u5c06\u63a8\u51fa\u7684\u529f\u80fd\u7684\u5f71\u54cd\uff0c\u8fd9\u4e9b\u529f\u80fd\u9884\u8ba1\u5c06\u4fdd\u6301\u76f8\u5bf9\u7a33\u5b9a\u3002\u8981\u5177\u4f53\u5e76\u4e13\u6ce8\u4e8e\u7ed3\u679c\uff1a\u5b83\u662f\u5426\u5f00\u542f\u4e86\u6211\u4eec\u4e4b\u524d\u8ba4\u4e3a\u6210\u672c\u592a\u9ad8\u800c\u65e0\u6cd5\u5c1d\u8bd5\u7684\u4e00\u7c7b\u5de5\u4f5c\uff1f\u6709\u65f6\u60a8\u7684\u8ba1\u5212\u4f1a\u88ab\u62d2\u7edd\u3002\u4e5f\u8bb8\u65f6\u673a\u4e0d\u5bf9\uff0c\u6216\u8005\u5173\u952e\u7684\u5229\u76ca\u76f8\u5173\u8005\u4e0d\u540c\u610f\u4f60\u7684\u5206\u6790\u3002\u4e0d\u7ba1\u662f\u4ec0\u4e48\u539f\u56e0\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u73b0\u5728\u7684\u201c\u4e0d\u201d\u53ef\u80fd\u5728\u672a\u6765\u53d8\u6210\u201c\u662f\u201d\u3002\u5982\u679c\u60a8\u5bf9\u8fd9\u9879\u6295\u8d44\u5145\u6ee1\u70ed\u60c5\uff0c\u8bf7\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u518d\u6b21\u5c1d\u8bd5\u63a8\u9500\u5b83\uff0c\u5e76\u4e14\u60a8\u5df2\u7ecf\u6709\u673a\u4f1a\u5bf9\u5176\u8fdb\u884c\u6539\u8fdb\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u5c06\u8ba1\u5212\u6401\u7f6e\u4e00\u65c1\uff0c\u5e76\u5c1d\u8bd5\u627e\u5230\u53ef\u4ee5\u964d\u4f4e\u6295\u8d44\u6210\u672c\u6216\u98ce\u9669\u7684\u8f83\u5c0f\u6b65\u9aa4\uff0c\u4f8b\u5982\u56e2\u961f\u53ef\u4ee5\u5728\u65e5\u5e38\u529f\u80fd\u5de5\u4f5c\u4e2d\u673a\u4f1a\u6027\u5730\u5904\u7406\u7684\u5de5\u4f5c\u3002\n\u672a\u6765\u4e09\u4e2a\u6708\u90fd\u65e0\u6cd5\u9884\u6d4b\uff0c\u66f4\u4e0d\u7528\u8bf4\u4e00\u5e74\u4e86\u3002\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u60a8\u7684\u76ee\u6807\u4e0d\u662f\u6b63\u786e\u7684\uff1b\u4f60\u7684\u76ee\u6807\u662f\u907f\u514d\u72af\u9519\u3002\u4e0d\u8981\u8ffd\u6c42\u5b8c\u7f8e\u3002\u6bcf\u4e2a\u9879\u76ee\u90fd\u662f\u6cbf\u7740\u8def\u5f84\u7684\u4e00\u6b65\u3002\u8ba9\u6bcf\u4e00\u6b65\u90fd\u6709\u610f\u4e49\u9700\u8981\u77e5\u9053\u4f60\u8981\u53bb\u54ea\u91cc\u3002\u628a\u4f60\u7684\u957f\u671f\u6280\u672f\u613f\u666f\u60f3\u8c61\u6210\u4e00\u4e2a\u6307\u5357\u9488\u2014\u2014\u5b83\u8ba9\u4f60\u5bf9\u4f60\u7684\u56e2\u961f\u9700\u8981\u524d\u8fdb\u7684\u65b9\u5411\u6709\u4e00\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\u3002\u901a\u8fc7\u5c06\u8fc7\u53bb\u7684\u4f24\u5bb3\u4e0e\u60a8\u7684\u4ea7\u54c1\u672a\u6765\u7684\u53d1\u5c55\u65b9\u5f0f\u76f8\u7ed3\u5408\uff0c\u60a8\u5c06\u80fd\u591f\u5236\u5b9a\u66f4\u51c6\u786e\u7684\u957f\u671f\u613f\u666f\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u4f1a\u53d1\u73b0\u60a8\u7684\u4ea7\u54c1\u7ecf\u7406\u5728\u6b64\u8fc7\u7a0b\u4e2d\u7684\u6295\u5165\u662f\u65e0\u4ef7\u7684\u3002\u4e0e\u60a8\u7684 PM \u5bc6\u5207\u5408\u4f5c\u5c06\u6539\u5584\u60a8\u548c\u4ed6\u4eec\u7684\u8ba1\u5212\u3002\u5b83\u5c06\u63d0\u4f9b\u81ea\u7136\u7684\uff0c\u751a\u81f3\u662f\u663e\u800c\u6613\u89c1\u7684\u673a\u4f1a\uff0c\u5c06\u60a8\u7684\u9879\u76ee\u5305\u542b\u5728\u4ea7\u54c1\u8def\u7ebf\u56fe\u4e2d\u3002\u4e00\u65e6\u4f60\u627e\u5230\u4e86\u673a\u4f1a\uff0c\u6311\u6218\u6027\u7684\u5de5\u4f5c\u5c31\u5f00\u59cb\u4e86\u3002\u9996\u5148\u8ba9\u4f60\u7684\u8ba1\u5212\u6613\u4e8e\u7406\u89e3\u3002\u4f5c\u4e3a\u4ea7\u54c1\u56e2\u961f\u8fdb\u884c\u6280\u672f\u6295\u8d44\u7684\u4e0d\u5e78\u73b0\u5b9e\u662f\uff0c\u60a8\u7684\u9996\u8981\u4efb\u52a1\u548c\u6700\u7ec8\u4f18\u5148\u4e8b\u9879\u662f\u4ea4\u4ed8\u76f4\u63a5\u5f71\u54cd\u4e1a\u52a1\u76ee\u6807\u7684\u529f\u80fd\u3002\u6b63\u5982\u5f53\u516c\u53f8\u7684\u76ee\u6807\u6216\u9884\u6d4b\u53d1\u751f\u53d8\u5316\u65f6\u9762\u5411\u5ba2\u6237\u7684\u9879\u76ee\u53ef\u80fd\u4f1a\u7f29\u51cf\u6216\u53d6\u6d88\u4e00\u6837\uff0c\u6280\u672f\u9879\u76ee\u901a\u5e38\u4e5f\u9700\u8981\u6401\u7f6e\u3002\u5e76\u975e\u6bcf\u4e2a\u66f4\u6539\u90fd\u9700\u8981\u53ef\u53d1\u5e03\uff0c\u4f46\u9879\u76ee\u5e94\u8be5\u6709\u5b9a\u671f\u7684\u201c\u68c0\u67e5\u70b9\u201d\uff0c\u53ef\u4ee5\u5728\u5176\u4e2d\u6309\u4e0b\u5f39\u51fa\u6309\u94ae\u800c\u5c3d\u91cf\u51cf\u5c11\u6df7\u4e71\u3002\u7834\u574f\u9879\u76ee\u53ef\u80fd\u6d89\u53ca\u56de\u6eda\u5df2\u7ecf\u63d0\u4ea4\u7684\u4ee3\u7801\u3002\u4e0d\u8fc7\u4e0d\u8981\u7d27\u5f20\u2014\u2014\u4ee3\u7801\u5f88\u4fbf\u5b9c\u3002\u91cd\u8981\u7684\u662f\u4f60\u4ece\u5c1d\u8bd5\u4e2d\u5b66\u5230\u4e86\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u4e1c\u897f\uff0c\u4f7f\u4e0b\u4e00\u6b21\u5c1d\u8bd5\u66f4\u6210\u529f\u3002\u5728\u60a8\u5c06\u9879\u76ee\u5206\u89e3\u6210\u53ef\u6d88\u5316\u7684\u5757\u4e4b\u540e\uff0c\u662f\u65f6\u5019\u8ba9\u5b83\u4eec\u53d8\u5f97\u66f4\u53ef\u53e3\u4e86\u3002\u60a8\u7684 PM \u9700\u8981\u80fd\u591f\u5c06\u60a8\u7684\u8ba1\u5212\u51fa\u552e\u7ed9\u4ed6\u4eec\u7684\u8001\u677f\u6216\u4ed6\u4eec\u8001\u677f\u7684\u8001\u677f\u3002\u4e0d\u8981\u8ba9\u4ed6\u4eec\u8bd5\u56fe\u4ec5\u51ed\u6280\u672f\u4f18\u70b9\u6765\u63a8\u9500\u5b83\u3002\u9996\u5148\u5173\u6ce8\u60a8\u7684\u8ba1\u5212\u5c06\u542f\u7528\u7684\u7279\u5b9a\u529f\u80fd\u548c\u7528\u4f8b\u3002\u63a5\u4e0b\u6765\uff0c\u5b66\u4e60\u5229\u7528\u53d8\u5316\u3002\u4e00\u4e2a\u666e\u904d\u7684\u770b\u6cd5\u662f\uff0c\u6280\u672f\u503a\u52a1\u9879\u76ee\u4e0d\u5e94\u4ea7\u751f\u4efb\u4f55\u529f\u80fd\u53d8\u5316\u3002\u4f46\u8fd9\u662f\u4e0d\u5207\u5b9e\u9645\u7684\u671f\u671b\u3002\u590d\u6742\u7cfb\u7edf\u4e2d\u7684\u91cd\u5927\u6280\u672f\u5de5\u4f5c\u4f1a\u5bfc\u81f4\u529f\u80fd\u7684\u610f\u5916\u53d8\u5316\u3002\u56e0\u6b64\uff0c\u4e0e\u5176\u907f\u514d\u6539\u53d8\uff0c\u4e0d\u5982\u5229\u7528\u5b83\u3002\u8981\u6709\u6218\u7565\u773c\u5149\u3002\u4f5c\u4e3a\u6280\u672f\u503a\u52a1\u6e05\u7406\u7684\u4e00\u90e8\u5206\uff0c\u5bfb\u627e\u4e0e\u5f53\u524d\u4f18\u5148\u4e8b\u9879\u76f8\u534f\u8c03\u7684\u4ea7\u54c1\u6539\u8fdb\u3002\u9080\u8bf7\u8bbe\u8ba1\u548c\u4ea7\u54c1\u56e2\u961f\u5728\u9879\u76ee\u7684\u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u5e2e\u52a9\u60a8\u8bc6\u522b\u5c0f\u7684\u66f4\u6539\uff0c\u4f8b\u5982\u4fee\u6539\u4e00\u4e9b\u65e7 UI \u6216\u6e05\u7406\u4e0d\u4e00\u81f4\u7684\u4ea4\u4e92\u3002\n\u5f53\u7136\uff0c\u66f4\u91cd\u8981\u7684\u6539\u8fdb\u662f\u975e\u5e38\u68d2\u7684\u2026\u2026\u5f53\u5b83\u4eec\u523a\u6fc0\u8fdb\u4e00\u6b65\u7684\u6280\u672f\u6295\u8d44\u800c\u4e0d\u662f\u5206\u6563\u6ce8\u610f\u529b\u65f6\u3002\u6700\u7ec8\u76ee\u6807\u662f\u627e\u5230\u53ef\u4ee5\u50cf\u5728\u5e38\u89c4\u529f\u80fd\u5de5\u4f5c\u4e2d\u4e00\u6837\u5229\u7528\u4e92\u8865\u4ea7\u54c1\u548c\u6280\u672f\u6295\u8d44\u7684\u65b9\u6cd5\u3002\u60a8\u53ef\u80fd\u719f\u6089\u526a\u7eb8\u7968\u3002\u8fd9\u662f\u4e0d\u65ad\u88ab\u60a8\u7684 CS \u56e2\u961f\u91cd\u65b0\u6253\u5f00\u7684\u7968\uff0c\u6216\u8005\u662f\u60a8\u5728\u5f85\u529e\u4e8b\u9879\u68b3\u7406\u4e2d\u8df3\u8fc7\u7684\u7968\uff0c\u56e0\u4e3a\u6709\u66f4\u591a\u5173\u952e\u5de5\u4f5c\u8981\u505a\u3002\u4f60\u77e5\u9053\u4f60\u53ef\u4ee5\u5728\u534a\u5929\u5185\u89e3\u51b3\u5b83\uff0c\u9876\uff0c\u5982\u679c\u4f60\u80fd\u628a\u5b83\u62c9\u8fdb\u51b2\u523a\u3002\u4f46\u662f\u901a\u8fc7\u4e00\u4e9b\u5de5\u4f5c\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u6c38\u8fdc\u88ab\u5ffd\u89c6\u7684\u95e8\u7968\u8f6c\u5316\u4e3a\u91cd\u8981\u4ef7\u503c\u7684\u6765\u6e90\u3002\u5173\u952e\u662f\u5efa\u7acb\u4e00\u4e2a\u53ef\u6301\u7eed\u7684\u8fc7\u7a0b\uff0c\u5c06\u526a\u7eb8\u6b63\u5e38\u5316\u5230\u4f60\u7684\u51b2\u523a\u8ba1\u5212\u4e2d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e0d\u5fc5\u5f88\u590d\u6742\u3002\u4f8b\u5982\uff0c\u6211\u7684\u56e2\u961f\u786e\u5b9a\u7684\u6d41\u7a0b\u662f\u201c\u5feb\u901f\u8d62\u5f97\u51b2\u523a\u201d\u3002\u7ecf\u8fc7\u51e0\u6b21\u51b2\u523a\u540e\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u4e0d\u4ec5\u62c9\u4e00\u4e24\u4e2a\u526a\u7eb8\u5bf9\u529f\u80fd\u8282\u594f\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd\uff0c\u800c\u4e14\u6211\u4eec\u4e4b\u524d\u8ba4\u4e3a\u4e0d\u91cd\u8981\u7684\u7968\u5bf9\u6211\u4eec\u7684\u5ba2\u6237\u6765\u8bf4\u5177\u6709\u91cd\u8981\u4ef7\u503c\u3002\u6b64\u5916\uff0c\u8d4b\u4e88\u526a\u7eb8\u4ef7\u503c\u7684\u51b3\u5b9a\u6539\u53d8\u4e86\u6211\u4eec\u8c08\u8bba\u95ee\u9898\u7684\u65b9\u5f0f\u3002\u5173\u4e8e\u75db\u70b9\u7684\u5bf9\u8bdd\u4ee5\u524d\u4ee5\u65e0\u5948\u7684\u53f9\u606f\u544a\u7ec8\uff0c\u7ed3\u679c\u5374\u662f\u4e00\u5f20\u65b0\u7684\u526a\u7eb8\u3002\u90a3\u4e2a\u526a\u7eb8\u53d8\u6210\u4e86\u4e0b\u4e00\u6b21\u5f85\u529e\u4e8b\u9879\u68b3\u7406\u65f6\u7684\u8ba8\u8bba\u3002\u5b83\u6210\u4e3a\u5c06\u6211\u4eec\u7684\u6280\u672f\u503a\u52a1\u80cc\u666f\u5316\u7684\u5de5\u5177\u3002\u4e00\u4e2a\u597d\u7684 PM \u4f1a\u6ce8\u610f\u5230\u6a21\u5f0f\u3002\u5982\u679c\u526a\u7eb8\u56e0\u4e3a\u6280\u672f\u503a\u52a1\u4f7f\u5b83\u4eec\u6210\u672c\u8fc7\u9ad8\u800c\u4e0d\u65ad\u5173\u95ed\uff0c\u90a3\u4e48\u8fdf\u65e9\uff0cPM \u5c06\u9700\u8981\u4e86\u89e3\u539f\u56e0\u3002\u8fd9\u5c31\u50cf\u4e00\u4e2a\u96ea\u7403\u4ece\u5c71\u4e0a\u6eda\u4e0b\u6765\u3002\u6bcf\u5b8c\u6210\u4e00\u9879\u4efb\u52a1\uff0c\u62bd\u8c61\u7684\u6280\u672f\u95ee\u9898\u5c31\u4f1a\u53d8\u5f97\u66f4\u52a0\u5177\u4f53\u3001\u66f4\u52a0\u6709\u5f62\uff0c\u76f4\u5230\u4e0d\u53ef\u907f\u514d\u3002\u76f4\u5230\u95ee\u9898\u7684\u4e25\u91cd\u6027\u50cf\u96ea\u5d29\u4e00\u6837\u538b\u5728\u4f60\u8eab\u4e0a\u3002\u8ba9\u4ea7\u54c1\u4e89\u8fa9\u8bf4\u56e2\u961f\u9700\u8981\u89e3\u51b3\u4e00\u4e2a\u6280\u672f\u95ee\u9898\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u62c5\u5fc3\u5982\u4f55\u5904\u7406\u5b83\u3002", "note_en": "Tech debt, the specter looming over every product team. It hobbles features, stresses developers, and frustrates customers. Everyone on the team is aware of it. Team members mention it in every retro, post mortem, and product quality review. Yet, it persists. Tech debt feels inevitable and immortal, a presence your team cannot escape.\n  But despite its bad rap,  tech debt can actually be a good thing...when it\u2019s managed well. As  Sandi Metz says, \u201cIf it makes you feel any better, there&#39;s a way in which having a big mess is a sign of success. The reason your competitors don&#39;t have messes is that they went out of business. You won, and your prize is an application that betrays the ravages of time.\u201d Tech debt comes from learning and growing. It will always be here; our goal isn\u2019t to eliminate it but to tame it.\n Learning to accept tech debt requires taking an honest look at your product\u2019s needs and capabilities. But be careful here \u2014 it&#39;s easy to succumb to recency bias and over-index on the pain your team experienced in the last couple of sprints. Ultimately, the goal is to make it easier to forge new paths, not to retread old ground.\n Taming tech debt requires  a holistic approach that comes from a deep understanding of your customer needs, the product org\u2019s priorities, and the overall business. It is impossible to understand the whole picture alone; you need to rely on your allies. On your journey to clean up the product, it\u2019s easy to think of your Product Manager or your Engineering Manager as antagonists. Instead, they are critical allies. Leverage their knowledge and perspective to round out your own.\n Accepting tech debt means acknowledging that  no project will be a panacea. As long as your product is flourishing, there will always be another project to tackle. Let this free you. There will be more chances to address anything that you missed.\n However, this means that one of the primary goals of any technical project is building and maintaining trust, so that you and your team can successfully tackle future projects. Trust starts with considerate collaboration. Start conversations with stakeholders early. Run ideas past your PM and EM and seek feedback from your teammates. When working on a team, thinking becomes a group activity.\n  Effective tech debt projects start with setting aggressive goals. It can be easy to fall into the trap of scoping your project according to what\u2019s been approved in the past, prematurely cutting pieces off to try and make it fit. Roadmap planning is a negotiation for resources: the finite time, people, and money the company has to spread over an ever-growing list of competing priorities.\n Let roadmap planning do its job: comparing your proposal to the others to determine how to make things fit. Trying to predict how leadership would prioritize your project means you might miss out on resources or not have anything to cut when a compromise is needed.\n A good plan should generate a lot of feedback, sparking discussion about the roadmap, the overall technical health of the product, team strengths, etc. You must approach each of these conversations with honesty.\n Overselling a project to try and get it approved creates a warped perception of the project in your Product Manager\u2019s mind. They will plan based on the outcome you presented, expecting the project to unlock certain capabilities without further technical work. A quick way to lose trust is by setting up false expectations.  Once trust has been lost, future projects are in jeopardy.\n Set clear and honest expectations. Focus on the impact of upcoming features, which are projected to stay relatively stable. Be concrete and concentrate on outcomes:\n Does it unlock a class of work we previously thought was too costly to attempt?\n Sometimes your plan will get rejected. Maybe the timing is wrong, or a critical stakeholder disagreed with your analysis. Whatever the reason, remember that what\u2019s a \u2018no\u2019 right now could become a \u2018yes\u2019 in the future.\n If you\u2019re passionate about this investment, try pitching it again after some time passes and you\u2019ve had a chance to refine it. If you can, put the plan aside and try to find smaller steps that can make the investment less costly or risky, such as work the team can tackle opportunistically during routine feature work.\n  The future is impossible to predict three months out, let alone a year. But remember, your goal isn\u2019t to be right;  your goal is to avoid being wrong. Don\u2019t seek perfection. Each project is a single step along the path. And making each step worthwhile requires knowing where you are going. Think of your long-term technical vision like a compass \u2014 it gives you a general sense of the direction in which your team needs to move.\n By synthesizing what\u2019s hurt you in the past with how your product will evolve in the future, you\u2019ll be able to develop a more accurate long-term vision. Here you\u2019ll find that the input of your Product Manager in this process is invaluable. Close collaboration with your PM will improve both your plan and theirs. It will provide natural, even obvious, opportunities to include your project in the product roadmap. Once you\u2019ve found the opportunity, the challenging work begins.\n Start by making your plan digestible. The unfortunate reality of making technical investments as a product team is that your first and ultimate priority is shipping features that directly impact business goals. Just as a customer-facing project may get scaled back or canceled when the company\u2019s goals or projections shift, so too, technical projects often need to be left undone.\n Not every change needs to be releasable, but a project should have regular \u201ccheckpoints\u201d where the eject button can be pressed with minimal mess. Scuttling the project may involve rolling back code that was already committed. Don\u2019t stress though \u2014 code is cheap. The important thing is that you learn something valuable from the attempt to make the next attempt more successful.\n After you\u2019ve broken down the project into digestible chunks, it\u2019s time to make them more palatable. Your PM needs to be able to sell your plan to their boss or their boss\u2019s boss. Don\u2019t make them try to pitch it on technical merits alone. Start by focusing on the specific features and use cases that your plan will enable. Next, learn to leverage change.\n A common belief is that tech debt projects should yield no functional change. But that\u2019s an unrealistic expectation. Significant technical work in complex systems will cause accidental changes in functionality. So  instead of avoiding change, take advantage of it.\n Be strategic. As part of the tech debt cleanup, look for product improvements that harmonize with current priorities. Invite the design and product teams to help you identify small changes, like touching up some legacy UI or cleaning up an inconsistent interaction, in each step of the project.\n Of course, more significant improvements are fantastic\u2026 when they spur on further technical investment rather than distract from it. The end goal is to find ways that you can capitalize on complementary product and tech investments like you would during regular feature work.\n  You might be familiar with the papercut ticket. It\u2019s the ticket that keeps getting reopened by your CS team, or the ticket you skip over in backlog grooming because there\u2019s more critical work to do. You know you could fix it in half a day, tops, if you could just pull it into a sprint.\n But with a bit of work, you can turn these perpetually overlooked tickets into a source of significant value.  The key is establishing a sustainable process that normalizes pulling papercuts into your sprint planning. This process doesn\u2019t have to be complex. For example, the process my team settled on is \u201cpull in one quick win a sprint.\u201d After a few sprints, we noticed that not only did pulling in a papercut or two had little impact on feature cadence, but also the tickets we had previously believed were unimportant had significant value for our customers.\n Further, the decision to give papercuts value transformed how we talked about issues. Conversations about pain points that had previously ended in resigned sighs, resulted instead in a new papercut. That papercut turned into a discussion at the next backlog grooming. It became a tool for contextualizing our tech debt.\n A good PM notices patterns. If papercuts keep getting closed because tech debt makes them too costly, sooner or later, PMs will need to understand why. It\u2019s like a snowball rolling down a hill. With each task that\u2019s closed, the abstract technical problem becomes a little more concrete, a little more tangible, until it\u2019s unavoidable. Until the magnitude of the problem crashes down on you like an avalanche.  Let the product argue that the team needs to address a technical issue so you can worry about how to handle it.", "posttime": "2021-08-06 09:53:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u505c\u6b62,stop,\u9879\u76ee", "title": "\u6211\u662f\u5982\u4f55\u5b66\u4f1a\u505c\u6b62\u62c5\u5fc3\u548c\u70ed\u7231\u6280\u672f\u503a\u52a1\u7684", "title_en": "How I Learned to Stop Worrying and Love Tech Debt", "transed": 1, "url": "https://heap.io/blog/how-i-learned-to-stop-worrying-and-love-tech-debt", "via": "", "real_tags": ["\u505c\u6b62", "stop", "\u9879\u76ee"]}, {"category": "", "categoryclass": "", "imagename": "2162aa1d90a14ba4e38ed8015bffe4c7.jpg", "infoid": 1071693, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\uff08\u534e\u76db\u987f\u7279\u533a\uff09\u53f8\u6cd5\u89c2\u5bdf\u548c\u533b\u5b66\u8fdb\u6b65\u4e2d\u5fc3 (CMP) \u4eca\u5929\u5ba3\u5e03\uff0c\u4ed6\u4eec\u4ece\u7f8e\u56fd\u536b\u751f\u4e0e\u516c\u5171\u670d\u52a1\u90e8\u6536\u5230\u4e86 252 \u9875\u7684\u65b0\u6587\u4ef6\uff0c\u5176\u4e2d\u663e\u793a\u8fd1 300 \u4e07\u7f8e\u5143\u7684\u8054\u90a6\u8d44\u91d1\u7528\u4e8e\u5339\u5179\u5821\u5927\u5b66\u7684\u5bfb\u6c42\u6210\u4e3a 6 \u81f3 42 \u5468\u598a\u5a20\u671f\u4eba\u7c7b\u80ce\u513f\u7ec4\u7ec7\u7684\u201c\u7ec4\u7ec7\u4e2d\u5fc3\u201d\u3002\u8fd9\u4e9b\u6587\u4ef6\u662f\u4f5c\u4e3a\u4fe1\u606f\u81ea\u7531\u6cd5 (FOIA) \u8bc9\u8bbc\u7684\u4e00\u90e8\u5206\u83b7\u5f97\u7684\uff0c\u5728\u8be5\u8bc9\u8bbc\u4e2d\uff0c\u53f8\u6cd5\u89c2\u5bdf\u4ee3\u8868 CMP \u5e76\u5728 HHS \u672a\u80fd\u56de\u5e94 2020 \u5e74 4 \u6708 28 \u65e5\u7684 FOIA \u8bf7\u6c42\u540e\u8d77\u8bc9 HHS\u5339\u5179\u5821\u5927\u5b66\u201c\u7ec4\u7ec7\u4e2d\u5fc3\u548c\u6536\u96c6\u7ad9\u201d\u3002 \uff08\u533b\u5b66\u8fdb\u6b65\u4e2d\u5fc3\u8bc9\u7f8e\u56fd\u536b\u751f\u4e0e\u516c\u4f17\u670d\u52a1\u90e8\uff08No. 1:21-cv-00642\uff09\uff09\u3002\u6700\u521d\u7684 2015 \u5e74\u63d0\u6848\u4e2d\u5217\u51fa\u7684\u9879\u76ee\u7684\u76ee\u6807\u662f\u201c\u5f00\u53d1\u4e00\u6761\u7ba1\u9053\uff0c\u4ee5\u83b7\u53d6\u3001\u8d28\u91cf\u63a7\u5236\u548c\u5206\u914d\u5728\u6574\u4e2a\u53d1\u80b2\u8fc7\u7a0b\u4e2d\uff086-42 \u5468\u598a\u5a20\uff09\u83b7\u5f97\u7684\u4eba\u7c7b\u6ccc\u5c3f\u751f\u6b96\u7cfb\u7edf [\u6ccc\u5c3f\u548c\u751f\u6b96\u5668\u5b98\u548c\u529f\u80fd] \u6837\u672c\u3002 ...... [\u548c] \u751f\u6210\u4e00\u4e2a\u6301\u7eed\u7684\u8d44\u6e90\uff0c\u5c06\u4e0d\u540c\u9636\u6bb5\uff086-42 \u5468\uff09\u7684\u65b0\u9c9c\u53d1\u80b2\u4eba\u7c7b\u6ccc\u5c3f\u751f\u6b96\u7cfb\u7edf\u6837\u672c\u5206\u53d1\u7ed9 GUDMAP [\u6ccc\u5c3f\u751f\u6b96\u7cfb\u7edf\u53d1\u80b2\u5206\u5b50\u89e3\u5256\u5b66\u9879\u76ee] Atlas \u9879\u76ee\u3002\u201d\u5728\u63d0\u6848\u4e2d\uff0c\u76ae\u7279\u6307\u51fa\uff0c\u201c\u6536\u96c6\u80ce\u513f\u7ec4\u7ec7\u5df2\u7ecf\u8d85\u8fc7 10 \u5e74\u2026\u2026\u5305\u62ec[ing]\u809d\u810f\u3001\u5fc3\u810f\u3001\u6027\u817a\u3001\u817f\u3001\u5927\u8111\u3001\u6ccc\u5c3f\u751f\u6b96\u7ec4\u7ec7\uff0c\u5305\u62ec\u80be\u810f\u3001\u8f93\u5c3f\u7ba1\u548c\u8180\u80f1\u3002\u201d\u76ae\u7279\u5728 2015 \u5e74\u6307\u51fa\uff0c\u201c\u6211\u4eec\u5df2\u7ecf\u53d1\u653e\u4e86\u4ece 77 \u4e2a\u6848\u4f8b\u4e2d\u6536\u96c6\u7684 300 \u591a\u4e2a\u65b0\u9c9c\u6837\u672c\u3002\u7531\u4e8e\u53bb\u5e74\u53ef\u80fd\u4ece\u591a\u8fbe 725 \u4e2a\u6848\u4f8b\u4e2d\u79ef\u7d2f\u4e86\u6750\u6599\uff0c\u56e0\u6b64\u6536\u96c6\u91cf\u53ef\u4ee5\u663e\u7740\u589e\u52a0\u3002\u201d\u4f4d\u4e8e\u76ae\u7279\u7684\u5065\u5eb7\u79d1\u5b66\u7ec4\u7ec7\u5e93\u201c\u96b6\u5c5e\u4e8e\u75c5\u7406\u5b66\u7cfb\u2026\u2026\u56e0\u6b64\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u975e\u5e38\u9ad8\u8d28\u91cf\u7684\u7ec4\u7ec7\u548c\u751f\u7269\u6807\u672c\u3002\u201d\u5339\u5179\u5821\u5927\u5b66\u5439\u5618\u5b83\u6709\u8bb8\u591a\u5185\u90e8\u8054\u7cfb\u4ee5\u53ca\u201c\u4e0e UPMC [\u5339\u5179\u5821\u5927\u5b66\u533b\u5b66\u4e2d\u5fc3]\u548c\u75c5\u7406\u5b66\u7cfb\u7684\u7262\u56fa\u5de5\u4f5c\u5173\u7cfb\u201d\u4ee5\u53ca\u4e09\u4e2a\u201c\u65d7\u8230 UPMC \u533b\u9662\u7684\u5b9e\u9a8c\u5ba4\u201d\u3002\u8fd9\u5305\u62ec\u4e00\u4e2a\u62e5\u6709\u201c\u7528\u4e8e\u5207\u5272\u9aa8\u5934\u7684 ButcherBoy \u5e26\u952f\u201d\u7684\u5b9e\u9a8c\u5ba4\uff0c\u4ee5\u53ca\u4e00\u4e2a\u201c\u51b7\u51bb\u5207\u7247\u5ba4\uff0c\u53ef\u5728\u624b\u672f\u5ba4\u4e4b\u95f4\u4f20\u8f93\u6570\u5b57\u89c6\u9891\u3002\u8fd9\u4e5f\u5141\u8bb8\u4e0e\u5916\u79d1\u533b\u751f\u8fdb\u884c\u5373\u65f6\u8ba8\u8bba\uff0c\u5e76\u4e3a\u4ed6\u4eec\u7acb\u5373\u2018\u5c55\u793a\u548c\u8bb2\u8ff0\u2019\u3002\u201d\u5177\u6709\u8bbd\u523a\u610f\u5473\u7684\u662f\uff0c\u8be5\u63d0\u6848\u8fd8\u5938\u8000\u4e86\u201c\u5339\u5179\u5821\u513f\u7ae5\u533b\u9662\u201d\u7684\u5b9e\u9a8c\u5ba4\u3002\n\u5728\u63d0\u6848\u7684\u540e\u9762\uff0c\u76ae\u7279\u8868\u793a\u5b83\u4f1a\u8bb0\u5f55\u201c\u6211\u4eec\u6837\u672c\u7684\u70ed\u7f3a\u8840\u65f6\u95f4\uff0c\u5e76\u91c7\u53d6\u63aa\u65bd\u5c06\u5176\u4fdd\u6301\u5728\u6700\u4f4e\u9650\u5ea6\uff0c\u4ee5\u786e\u4fdd\u83b7\u5f97\u6700\u9ad8\u8d28\u91cf\u7684\u751f\u7269\u6807\u672c\u3002\u201d [\u201c\u70ed\u7f3a\u8840\u65f6\u95f4\u201d\u662f\u6307\u5668\u5b98\u5728\u8840\u6db2\u4f9b\u5e94\u88ab\u5207\u65ad\u540e\u4fdd\u6301\u4f53\u6e29\u7684\u65f6\u95f4\u3002\u70ed\u7f3a\u8840\u65f6\u95f4\u4e0d\u540c\u4e8e\u51b7\u7f3a\u8840\u65f6\u95f4\uff0c\u51b7\u7f3a\u8840\u65f6\u95f4\u662f\u6307\u5668\u5b98\u88ab\u51b7\u5374\u7684\u65f6\u95f4\u3002\u76ae\u7279\u7684\u58f0\u660e\u8868\u660e\u5815\u80ce\u548c\u6536\u96c6\u4e4b\u95f4\u7684\u65f6\u95f4\u5f88\u77ed\u3002] \u76ae\u7279\u7684\u79d1\u5b66\u5bb6\u6307\u51fa\uff0c\u201c\u6240\u6709\u80ce\u513f\u7ec4\u7ec7\u90fd\u662f\u901a\u8fc7\u5305\u62ec\u8ba1\u5212\u751f\u80b2\u3001\u4ea7\u79d1\u548c\u75c5\u7406\u5b66\u5728\u5185\u7684\u534f\u4f5c\u8fc7\u7a0b\u6536\u96c6\u7684\u3002\u201d\u800c\u4e14\uff0c\u201c\u540c\u610f\u548c\u6536\u96c6\u7684\u6570\u91cf\u4e00\u76f4\u5728\u7a33\u6b65\u589e\u52a0\u2026\u2026\u6211\u4eec\u5904\u4e8e\u6709\u5229\u5730\u4f4d\uff0c\u53ef\u4ee5\u6269\u5c55\u6211\u4eec\u7684\u670d\u52a1\u4ee5\u5305\u62ec GUDMAP Atlas \u9879\u76ee\u7684\u9700\u6c42\u3002\u201d\u76ae\u7279\u9884\u8ba1\u201c\u80fd\u591f\u6536\u83b7\u548c\u5206\u914d\u9ad8\u8d28\u91cf\u7684\u7ec4\u7ec7\u548c\u7ec6\u80de...... [\u5e76\u4e14] \u9884\u8ba1\u4e0d\u4f1a\u51fa\u73b0\u4e0e\u7ec4\u7ec7\u7684\u83b7\u53d6\u548c\u5206\u914d\u76f8\u5173\u7684\u4efb\u4f55\u91cd\u5927\u95ee\u9898\u3002\u201d Pitt \u7684\u76ee\u6807\u662f\u201c\u5728 6-42 \u5468\u7684\u5b55\u9f84\u6bcf\u5468\u81f3\u5c11\u63d0\u4f9b 5 \u4e2a\u75c5\u4f8b\uff08\u7ec4\u7ec7\u548c\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5176\u4ed6\u751f\u7269\u5236\u54c1\uff09\u3002\u201d\u76ae\u7279\u7684\u63d0\u8bae\u8fd8\u5305\u62ec\u4e00\u4e2a\u6536\u83b7\u4eba\u7c7b\u80ce\u513f\u90e8\u5206\u7684\u79cd\u65cf\u76ee\u6807\u3002\u5728\u5176\u8ba1\u5212\u7684\u6d41\u4ea7\u201c\u53d7\u8bd5\u8005\u201d\u4e2d\uff0c\u76ae\u7279\u5e0c\u671b 50% \u662f\u5c11\u6570\u65cf\u88d4\u80ce\u513f\u3002\u8be5\u63d0\u6848\u5efa\u8bae\u201c\u4e3b\u4f53\u201d\u591a\u5143\u5316\uff0c\u56e0\u4e3a\u5339\u5179\u5821\u662f\u591a\u5143\u5316\u7684\uff0c\u7f8e\u56fd\u4eba\u53e3\u666e\u67e5\u5c40\u663e\u793a\u5339\u5179\u5821\u5e02\u63a5\u8fd1 70% \u7684\u767d\u4eba\u3002\u76ae\u7279\u7684\u63d0\u6848\u8981\u6c42\u5728\u4e94\u5e74\u5185\u8d85\u8fc7 320 \u4e07\u7f8e\u5143\u3002\u6587\u4ef6\u663e\u793a\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0cNIH \u5df2\u4e3a\u76ae\u7279\u7684\u4eba\u7c7b\u80ce\u513f\u7ec4\u7ec7\u91c7\u96c6\u548c\u4e2d\u5fc3\u63d0\u4f9b\u4e86\u81f3\u5c11 270 \u4e07\u7f8e\u5143\u7684\u8d44\u91d1\u3002 2021 \u5e74 3 \u6708\uff0c\u8054\u90a6\u6cd5\u9662\u547d\u4ee4 HHS \u53d1\u5e03\u6709\u5173\u5176\u8d2d\u4e70\u4ece\u6d41\u4ea7\u7684\u4eba\u7c7b\u80ce\u513f\u4e2d\u83b7\u53d6\u7684\u5668\u5b98\u7684\u66f4\u591a\u4fe1\u606f\u3002\u6cd5\u9662\u8fd8\u8ba4\u5b9a\u201c\u6709\u7406\u7531\u8d28\u7591\u201d\u8fd9\u4e9b\u4ea4\u6613\u662f\u5426\u8fdd\u53cd\u4e86\u7981\u6b62\u51fa\u552e\u80ce\u513f\u5668\u5b98\u7684\u8054\u90a6\u6cd5\u5f8b\u3002\n2021 \u5e74 5 \u6708\uff0c\u53f8\u6cd5\u89c2\u5bdf\u5ba3\u5e03\u5df2\u53d1\u73b0 FDA \u7684\u8bb0\u5f55\uff0c\u8be5\u8bb0\u5f55\u663e\u793a\u8be5\u673a\u6784\u82b1\u8d39\u4e86\u6570\u4e07\u7eb3\u7a0e\u4eba\u7684\u7f8e\u5143\u4ece\u4f4d\u4e8e\u52a0\u5229\u798f\u5c3c\u4e9a\u7684\u5148\u8fdb\u751f\u7269\u79d1\u5b66\u8d44\u6e90\uff08ABR\uff09\u8d2d\u4e70\u4eba\u7c7b\u80ce\u513f\u7ec4\u7ec7\u3002\u8be5\u7ec4\u7ec7\u88ab\u7528\u4e8e\u5236\u9020\u201c\u4eba\u6e90\u5316\u5c0f\u9f20\u201d\u4ee5\u6d4b\u8bd5\u201c\u751f\u7269\u836f\u7269\u4ea7\u54c1\u201d\u3002\u8bb0\u5f55\u663e\u793a\uff0c\u8be5\u673a\u6784\u8ba2\u8d2d\u7684\u8d27\u7269\u662f\u201c\u65b0\u9c9c\u7684\uff1b\u7528\u6e7f\u51b0\u8fd0\u9001\u3002\u201d 2020 \u5e74 6 \u6708\uff0c\u53f8\u6cd5\u89c2\u5bdf\u53d1\u5e03\u7684\u8bb0\u5f55\u663e\u793a\uff0cFDA \u5728 2012 \u5e74\u81f3 2018 \u5e74\u671f\u95f4\u4e0e Advanced Bioscience Resources (ABR) \u7b7e\u8ba2\u4e86\u4ef7\u503c 96,370 \u7f8e\u5143\u7684\u516b\u4efd\u5408\u540c\uff0c\u4ee5\u4ece\u7b2c 1 \u548c\u7b2c 2 \u4e09\u4e2a\u6708\u6d41\u4ea7\u7684\u80ce\u513f\u4e2d\u83b7\u53d6\u201c\u65b0\u9c9c\u4e14\u4ece\u672a\u51b7\u51bb\u201d\u7684\u7ec4\u7ec7\uff0c\u7528\u4e8e\u521b\u9020\u6b63\u5728\u8fdb\u884c\u7814\u7a76\u7684\u4eba\u6e90\u5316\u5c0f\u9f20\u3002 2020 \u5e74 2 \u6708\uff0c\u53f8\u6cd5\u89c2\u5bdf\u516c\u5f00\u4e86\u989d\u5916\u7684\u4eba\u6027\u5316\u200b\u200b\u5c0f\u9f20\u8bb0\u5f55\u3002 \u201c\u8fd9\u4e9b\u6587\u4ef6\u663e\u793a\uff0c\u7eb3\u7a0e\u4eba\u7684\u94b1\u88ab\u7528\u6765\u5c06\u5339\u5179\u5821\u5927\u5b66\u53d8\u6210\u4e00\u7ad9\u5f0f\u4eba\u7c7b\u80ce\u513f\u7ec4\u7ec7\u5546\u5e97\u2014\u2014\u4ece\u4ece\u9009\u62e9\u6027\u5815\u80ce\u4e2d\u83b7\u53d6\u7ec4\u7ec7\u3001\u2018\u7ec6\u5206\u2019\u4eba\u7c7b\u9057\u9ab8\uff0c\u5230\u5206\u53d1\u548c\u8fd0\u8f93\u6536\u83b7\u7684\u7ec4\u7ec7\uff0c\u201d\u8bf4\u53f8\u6cd5\u89c2\u5bdf\u4e3b\u5e2d\u6c64\u59c6\u00b7\u83f2\u987f\u3002\u53f8\u6cd5\u89c2\u5bdf\u662f 501(c)(3) \u975e\u8425\u5229\u7ec4\u7ec7\u3002\u6350\u6b3e\u6765\u81ea\u4e2a\u4eba\u3001\u57fa\u91d1\u4f1a\u548c\u516c\u53f8\uff0c\u5e76\u4e14\u5728\u6cd5\u5f8b\u5141\u8bb8\u7684\u8303\u56f4\u5185\u53ef\u4ee5\u514d\u7a0e\u3002\u5546\u5e97\u6350\u8d60", "note_en": "(Washington, DC)  Judicial Watch and   The Center for Medical Progress  (CMP) announced today that they received   252 pages  of new documents from the US Department of Health and Human Services that reveal nearly $3 million in federal funds were spent on the University of Pittsburgh\u2019s quest to become a \u201cTissue Hub\u201d for human fetal tissue ranging from 6 to 42 weeks gestation.\n These documents were obtained as part of the Freedom of Information Act (FOIA) lawsuit in which Judicial Watch represents CMP and is suing HHS after it failed to respond to an April 28, 2020, FOIA request seeking among other things, the grant applications for a University of Pittsburgh \u201ctissue hub and collection site.\u201d (   Center for Medical Progress v. U.S. Department of Health and Human Services  (No. 1:21-cv-00642)).\n  The aims of the project listed in the original 2015 proposal were to \u201c  develop a pipeline  to the acquisition, quality control and distribution of human genitourinary [urinary and genital organs and functions] samples obtained throughout development (6-42 weeks gestation). \u2026 [and] generate an ongoing resource to distribute fresh developmental human genitourinary samples from various stages (6-42 weeks) to the GUDMAP [GenitoUrinary Development Molecular Anatomy Project] Atlas projects.\u201d\n In the   proposal , Pitt notes that is has been \u201ccollecting fetal tissue for over 10 years \u2026 include[ing] liver, heart, gonads, legs, brain, genitourinary tissues including kidneys, ureters and bladders.\u201d\n Pitt noted in 2015 \u201cwe have disbursed over   300 fresh samples  collected from 77 cases. The collections can be significantly ramped up as material could have been accrued from as many as 725 cases last year.\u201d\n The Health Sciences Tissue Bank at Pitt is \u201c  embedded  within the Department of Pathology \u2026 thus providing rapid access to very high quality tissue and biological specimens.\u201d\n Pitt boasts it has a number of internal connections as well as a \u201cstrong working relationship with UPMC [University of Pittsburgh Medical Center] and the Department of Pathology\u201d as well as three \u201claboratories in the flagship UPMC hospitals.\u201d This includes a lab boasting a \u201c  ButcherBoy band saw  for sectioning bone,\u201d and a \u201cfrozen section room has digital video feed to and from the operating rooms. This also allows for instantaneous discussions with the surgeons as well [as] immediate \u2018show and tell\u2019 for them.\u201d The proposal ironically also boasts about the laboratories at the \u201c  Children\u2019s Hospital of Pittsburgh .\u201d\n Later in the proposal, Pitt states that it records the \u201c  warm ischemic time  on our samples and take steps to keep it at a minimum to ensure the highest quality biological specimens.\u201d [The \u201cwarm ischemic time\u201d refers to the amount of time an organ remains at body temperature after blood supply has been cut off.\u00a0 Warm ischemic time differs from cold ischemic time which refers to amount of time the organ is chilled.\u00a0 Pitt\u2019s statement suggests the time between the abortion and collection is minimal.]\n The Pitt scientists note that, \u201cAll fetal tissue is collected through a   collaborative process  including Family Planning, Obstetrics and Pathology.\u201d And that, \u201cthe numbers of consents and collections has been steadily increasing\u2026 and we are in an excellent position to expand our services to include the needs of the GUDMAP Atlas projects.\u201d\n Pitt anticipated \u201cbeing able to   harvest and distribute  quality tissue and cells \u2026 [and] do not anticipate any major problems related to the acquisition and distribution of the tissues.\u201d\n Pitt\u2019s   target goal  \u201cis to have available a minimum of 5 cases (tissues and if possible other biologicals) per week of gestational age for ages 6-42 weeks.\u201d\n Pitt\u2019s proposal also included a   racial target  for harvesting of human fetal parts. Of its planned aborted \u201csubjects\u201d Pitt desired 50% to be minority fetuses. The proposal suggests that the \u201csubjects\u201d be diverse because Pittsburgh is diverse, the U.S. Census Bureau shows the city of Pittsburgh is close to 70% white.\n Pitt\u2019s proposal requested more than   $3.2 million  over a five-year period. The documents show NIH has funded at least $2.7 million so far for Pitt\u2019s human fetal tissue harvesting and hub.\n In March 2021, a federal court   ordered HHS to release additional information about its purchases of organs harvested from aborted human fetuses. The court also found \u201cthere is reason to question\u201d whether the transactions violate federal law barring the sale of fetal organs.\n In May 2021, Judicial Watch announced it had   uncovered records from the FDA showing the agency spent tens of thousands of taxpayer dollars to buy human fetal tissue from California-based Advanced Bioscience Resources (ABR). The tissue was used in creating \u201c  humanized mice\u201d to test \u201cbiologic drug products.\u201d The records show the agency ordered shipments to be \u201cfresh; shipped on wet ice.\u201d\n In June 2020, Judicial Watch   released records showing the FDA between 2012 and 2018 entered into eight contracts worth $96,370 with Advanced Bioscience Resources (ABR) to acquire \u201cfresh and never frozen\u201d tissue from 1 st\u00a0and 2 nd\u00a0trimester aborted fetuses for use in creating humanized mice for ongoing research. In February 2020, Judicial Watch   made public additional humanized mice records.\n \u201cThese documents show  taxpayer money is being used to turn the University of Pittsburgh is a one-stop human fetal tissue shop \u2013 from procuring the tissue from elective abortions, \u2018subdividing\u2019 the human remains, to distributing and shipping the harvested tissue,\u201d stated Judicial Watch President Tom Fitton.\n    Judicial Watch is a 501(c)(3) nonprofit organization. Contributions are received from individuals, foundations, and corporations and are tax-deductible to the extent allowed by law.\n  Shop   Donate", "posttime": "2021-08-06 09:53:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6587\u4ef6,documents,\u7ec4\u7ec7", "title": "\u65b0\u7684 HHS \u6587\u4ef6\u663e\u793a\u8054\u90a6\u8d44\u52a9\u6570\u767e\u4e07\u4eba\u4f53\u5668\u5b98\u6458\u53d6", "title_en": "New HHS Documents Reveal Millions in Federal Funding for Human Organ Harvesting", "transed": 1, "url": "https://www.judicialwatch.org/press-releases/hhs-documents-organ-harvesting/", "via": "", "real_tags": ["\u6587\u4ef6", "documents", "\u7ec4\u7ec7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071692, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e02\u9762\u4e0a\u6709\u5f88\u591a\u5173\u4e8e Pascal \u7684\u4e66\u7c4d\u548c\u8d44\u6e90\uff0c\u4f46\u5176\u4e2d\u592a\u591a\u8c08\u8bba\u65e7\u7684 Pascal\uff0c\u6ca1\u6709\u7c7b\u3001\u5355\u5143\u6216\u6cdb\u578b\u3002\u6240\u4ee5\u6211\u5199\u4e86\u8fd9\u7bc7\u5173\u4e8e\u6211\u79f0\u4e4b\u4e3a\u73b0\u4ee3 Object Pascal \u7684\u5feb\u901f\u4ecb\u7ecd\u3002\u5927\u591a\u6570\u4f7f\u7528\u5b83\u7684\u7a0b\u5e8f\u5458\u5e76\u6ca1\u6709\u771f\u6b63\u79f0\u5176\u4e3a\u201c\u73b0\u4ee3\u5bf9\u8c61\u5e15\u65af\u5361\u201d\uff0c\u6211\u4eec\u53ea\u662f\u79f0\u5176\u4e3a\u201c\u6211\u4eec\u7684\u5e15\u65af\u5361\u201d\u3002\u4f46\u662f\u5728\u4ecb\u7ecd\u8be5\u8bed\u8a00\u65f6\uff0c\u6211\u89c9\u5f97\u5f3a\u8c03\u5b83\u662f\u4e00\u79cd\u73b0\u4ee3\u7684\u3001\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u5f88\u91cd\u8981\u3002\u81ea\u4ece\u8bb8\u591a\u4eba\u5f88\u4e45\u4ee5\u524d\u5728\u5b66\u6821\u5b66\u5230\u7684\u65e7\uff08Turbo\uff09Pascal \u4ee5\u6765\uff0c\u5b83\u5df2\u7ecf\u6709\u4e86\u5f88\u5927\u7684\u53d1\u5c55\u3002\u5728\u529f\u80fd\u65b9\u9762\uff0c\u5b83\u4e0e C++\u3001Java \u6216 C# \u975e\u5e38\u76f8\u4f3c\u3002\u5b83\u5177\u6709\u60a8\u6240\u671f\u671b\u7684\u6240\u6709\u73b0\u4ee3\u529f\u80fd\u2014\u2014\u7c7b\u3001\u5355\u5143\u3001\u63a5\u53e3\u3001\u6cdb\u578b......\u5b83\u8fd8\u6709\u4f18\u79c0\u7684\u3001\u53ef\u79fb\u690d\u7684\u548c\u5f00\u6e90\u7684\u7f16\u8bd1\u5668\uff0c\u79f0\u4e3a Free Pascal \u7f16\u8bd1\u5668\uff0chttp://freepascal.org/\u3002\u8fd8\u6709\u4e00\u4e2a\u540d\u4e3a Lazarus http://lazarus.freepascal.org/ \u7684\u9644\u5e26 IDE\uff08\u7f16\u8f91\u5668\u3001\u8c03\u8bd5\u5668\u3001\u53ef\u89c6\u5316\u7ec4\u4ef6\u5e93\u3001\u8868\u5355\u8bbe\u8ba1\u5668\uff09\u3002\u6211\u81ea\u5df1\u662f Castle \u6e38\u620f\u5f15\u64ce https://castle-engine.io/ \u7684\u521b\u5efa\u8005\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f00\u6e90 3D \u548c 2D \u6e38\u620f\u5f15\u64ce\uff0c\u4f7f\u7528\u73b0\u4ee3 Pascal \u5728\u8bb8\u591a\u5e73\u53f0\uff08Windows\u3001Linux\u3001macOS\u3001 Android\u3001iOS\u3001Nintendo Switch\uff1b\u8fd8\u6709 WebGL \u5373\u5c06\u63a8\u51fa\uff09\u3002\u672c\u4ecb\u7ecd\u4e3b\u8981\u9488\u5bf9\u5df2\u7ecf\u6709\u5176\u4ed6\u8bed\u8a00\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u3002\u6211\u4eec\u4e0d\u4f1a\u5728\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u6982\u5ff5\u7684\u542b\u4e49\uff0c\u6bd4\u5982\u201c\u4ec0\u4e48\u662f\u7c7b\u201d\uff0c\u6211\u4eec\u53ea\u4f1a\u5c55\u793a\u5982\u4f55\u5728 Pascal \u4e2d\u5b9e\u73b0\u5b83\u4eec\u3002 {$mode objfpc} {$H+} {$J-} // \u53ea\u9700\u5728\u6240\u6709\u73b0\u4ee3\u6e90\u7a0b\u5e8f MyProgram \u4e2d\u4f7f\u7528\u8fd9\u4e00\u884c\uff1b // \u5c06\u6b64\u6587\u4ef6\u53e6\u5b58\u4e3a myprogram.lpr begin WriteLn( &#39;Hello world!&#39;);\u7ed3\u5c3e\u3002\u5982\u679c\u4f7f\u7528\u547d\u4ee4\u884c FPC\uff0c\u53ea\u9700\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6 myprogram.lpr \u5e76\u6267\u884c fpc myprogram.lpr\u3002\n\u5982\u679c\u60a8\u4f7f\u7528 Lazarus\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\uff08\u83dc\u5355 Project \u2192 New Project \u2192 Simple Program\uff09\u3002\u5c06\u5176\u53e6\u5b58\u4e3a myprogram \u5e76\u5c06\u6b64\u6e90\u4ee3\u7801\u7c98\u8d34\u4e3a\u4e3b\u6587\u4ef6\u3002\u4f7f\u7528\u83dc\u5355\u9879\u8fd0\u884c\u2192\u7f16\u8bd1\u8fdb\u884c\u7f16\u8bd1\u3002\u8fd9\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f\uff0c\u6240\u4ee5\u5728\u4efb\u4f55\u4e00\u79cd\u60c5\u51b5\u4e0b - \u53ea\u9700\u4ece\u547d\u4ee4\u884c\u8fd0\u884c\u7f16\u8bd1\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\u5c06\u8ba8\u8bba Object Pascal \u8bed\u8a00\uff0c\u56e0\u6b64\u4e0d\u8981\u671f\u671b\u770b\u5230\u6bd4\u547d\u4ee4\u884c\u5185\u5bb9\u66f4\u82b1\u54e8\u7684\u4e1c\u897f\u3002\u5982\u679c\u4f60\u60f3\u770b\u5230\u4e00\u4e9b\u5f88\u9177\u7684\u4e1c\u897f\uff0c\u53ea\u9700\u5728 Lazarus \u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 GUI \u9879\u76ee\uff08\u9879\u76ee\u2192\u65b0\u5efa\u9879\u76ee\u2192\u5e94\u7528\u7a0b\u5e8f\uff09\u3002\u77a7\u2014\u2014\u4e00\u4e2a\u5de5\u4f5c\u7684 GUI \u5e94\u7528\u7a0b\u5e8f\uff0c\u8de8\u5e73\u53f0\uff0c\u5230\u5904\u90fd\u6709\u539f\u751f\u5916\u89c2\uff0c\u4f7f\u7528\u8212\u9002\u7684\u53ef\u89c6\u5316\u7ec4\u4ef6\u5e93\u3002 Lazarus \u548c Free Pascal Compiler \u5e26\u6709\u8bb8\u591a\u73b0\u6210\u7684\u5355\u5143\uff0c\u7528\u4e8e\u7f51\u7edc\u3001GUI\u3001\u6570\u636e\u5e93\u3001\u6587\u4ef6\u683c\u5f0f\uff08XML\u3001json\u3001\u56fe\u50cf\u2026\u2026\uff09\u3001\u7ebf\u7a0b\u4ee5\u53ca\u60a8\u53ef\u80fd\u9700\u8981\u7684\u4e00\u5207\u3002\u6211\u4e4b\u524d\u5df2\u7ecf\u63d0\u5230\u8fc7\u6211\u5f88\u9177\u7684\u57ce\u5821\u6e38\u620f\u5f15\u64ce:) {$mode objfpc} {$H+} {$J-} program MyProgram;\u8fc7\u7a0b MyProcedure(const A: Integer); begin WriteLn(&#39; A + 10 \u662f\uff1a&#39;, A + 10);\u7ed3\u5c3e;\u51fd\u6570 MyFunction(const S: string): string;\u5f00\u59cb\u7ed3\u679c\uff1a= S + &#39;\u5b57\u7b26\u4e32\u88ab\u81ea\u52a8\u7ba1\u7406&#39;;\u7ed3\u5c3e; var X\uff1a\u5355\uff1b\u5f00\u59cb WriteLn(MyFunction(&#39;\u6ce8\uff1a&#39;));\u6211\u7684\u7a0b\u5e8f(5); // \u4f7f\u7528 &quot;/&quot; \u7684\u9664\u6cd5\u603b\u662f\u4ea7\u751f\u6d6e\u70b9\u7ed3\u679c\uff0c\u4f7f\u7528 &quot;div&quot; \u8fdb\u884c\u6574\u6570\u9664\u6cd5 X := 15 / 5; WriteLn(&#39; X \u73b0\u5728\u662f\uff1a&#39;, X); // \u79d1\u5b66\u8bb0\u6570\u6cd5 WriteLn( &#39; X \u73b0\u5728\u662f: &#39;, X: 1: 2); // 2 \u4f4d\u5c0f\u6570\u7ed3\u675f\u3002\u8981\u4ece\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8bf7\u4e3a\u795e\u5947\u7684 Result \u53d8\u91cf\u8d4b\u503c\u3002\u60a8\u53ef\u4ee5\u81ea\u7531\u5730\u8bfb\u53d6\u548c\u8bbe\u7f6e Result\uff0c\u5c31\u50cf\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u4e00\u6837\u3002\u51fd\u6570 MyFunction(const S: string): string;\u5f00\u59cb\u7ed3\u679c\uff1a= S + &#39;\u4e1c\u897f&#39;;\u7ed3\u679c := \u7ed3\u679c + &#39; \u8fd8\u6709\u4e00\u4e9b\u4e1c\u897f\uff01 &#39;;\u7ed3\u679c := \u7ed3\u679c + &#39; \u7b49\u7b49\uff01 &#39;;\u7ed3\u5c3e;\u60a8\u8fd8\u53ef\u4ee5\u5c06\u51fd\u6570\u540d\u79f0\uff08\u5982\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684 MyFunction\uff09\u89c6\u4e3a\u60a8\u53ef\u4ee5\u5206\u914d\u7684\u53d8\u91cf\u3002\u4f46\u662f\u6211\u4e0d\u9f13\u52b1\u5728\u65b0\u4ee3\u7801\u4e2d\u4f7f\u7528\u5b83\uff0c\u56e0\u4e3a\u5728\u8d4b\u503c\u8868\u8fbe\u5f0f\u7684\u53f3\u4fa7\u4f7f\u7528\u65f6\u5b83\u770b\u8d77\u6765\u201c\u53ef\u7591\u201d\u3002\u5f53\u60a8\u60f3\u8981\u8bfb\u53d6\u6216\u8bbe\u7f6e\u51fd\u6570\u7ed3\u679c\u65f6\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528 Result \u3002\n\u5982\u679c\u4f60\u60f3\u9012\u5f52\u5730\u8c03\u7528\u51fd\u6570\u672c\u8eab\uff0c\u4f60\u5f53\u7136\u53ef\u4ee5\u8fd9\u6837\u505a\u3002\u5982\u679c\u60a8\u9012\u5f52\u8c03\u7528\u65e0\u53c2\u6570\u51fd\u6570\uff0c\u8bf7\u52a1\u5fc5\u6307\u5b9a\u62ec\u53f7 ()\uff08\u5373\u4f7f\u5728 Pascal \u4e2d\u60a8\u901a\u5e38\u53ef\u4ee5\u7701\u7565\u65e0\u53c2\u6570\u51fd\u6570\u7684\u62ec\u53f7\uff09\uff0c\u8fd9\u4f1a\u9012\u5f52\u8c03\u7528\u65e0\u53c2\u6570\u51fd\u6570\u4e0e\u8bbf\u95ee\u6b64\u51fd\u6570\u7684\u5f53\u524d\u7ed3\u679c\u4e0d\u540c\u3002\u50cf\u8fd9\u6837\uff1a\u51fd\u6570 SumIntegersUntilZero: Integer; var I\uff1a\u6574\u6570\uff1b\u5f00\u59cb\u9605\u8bfb\uff08I\uff09\uff1b\u7ed3\u679c\uff1a=\u6211\uff1b\u5982\u679c\u6211 &lt;&gt; 0 \u90a3\u4e48\u7ed3\u679c := Result + SumIntegersUntilZero();\u7ed3\u5c3e;\u60a8\u53ef\u4ee5\u5728\u8fc7\u7a0b\u6216\u51fd\u6570\u5230\u8fbe\u6700\u7ec8\u7ed3\u675f\u4e4b\u524d\u8c03\u7528 Exit \u6765\u7ed3\u675f\u5b83\u7684\u6267\u884c\u3002\u5982\u679c\u60a8\u5728\u51fd\u6570\u4e2d\u8c03\u7528\u65e0\u53c2\u6570 Exit\uff0c\u5b83\u5c06\u8fd4\u56de\u60a8\u8bbe\u7f6e\u4e3a Result \u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 Exit(X) \u6784\u9020\u6765\u8bbe\u7f6e\u51fd\u6570\u7ed3\u679c\u5e76\u7acb\u5373\u9000\u51fa - \u8fd9\u5c31\u50cf\u7c7b C \u8bed\u8a00\u4e2d\u7684 return X \u6784\u9020\u4e00\u6837\u3002 function AddName( const ExistingNames, NewName: string): string; begin if ExistingNames = &#39; &#39; then Exit(NewName);\u7ed3\u679c := ExistingNames + &#39; , &#39; + NewName;\u7ed3\u5c3e;\u8bf7\u6ce8\u610f\uff0c\u53ef\u4ee5\u4e22\u5f03\u51fd\u6570\u7ed3\u679c\u3002\u4efb\u4f55\u51fd\u6570\u90fd\u53ef\u4ee5\u50cf\u8fc7\u7a0b\u4e00\u6837\u4f7f\u7528\u3002\u5982\u679c\u51fd\u6570\u9664\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e4b\u5916\u8fd8\u6709\u4e00\u4e9b\u526f\u4f5c\u7528\uff08\u4f8b\u5982\uff0c\u5b83\u4fee\u6539\u4e86\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff09\uff0c\u8fd9\u662f\u6709\u9053\u7406\u7684\u3002\u4f8b\u5982\uff1a var Count: Integer; MyCount\uff1a\u6574\u6570\uff1b\u51fd\u6570 CountMe\uff1a\u6574\u6570\uff1b\u5f00\u59cb\u516c\u53f8\uff08\u8ba1\u6570\uff09\uff1b\u7ed3\u679c\uff1a=\u8ba1\u6570\uff1b\u7ed3\u5c3e;\u5f00\u59cb\u8ba1\u6570\uff1a= 10\uff1b\u628a\u6211\u7b97\u8fdb\u53bb; // \u51fd\u6570\u7ed3\u679c\u88ab\u4e22\u5f03\uff0c\u4f46\u51fd\u6570\u88ab\u6267\u884c\uff0cCount \u73b0\u5728\u662f 11 MyCount := CountMe; // \u4f7f\u7528\u51fd\u6570\u7684\u7ed3\u679c\uff0cMyCount \u7b49\u4e8e Count\uff0c\u73b0\u5728\u662f 12 end\u3002\u4f7f\u7528 if .. then \u6216 if .. then .. else \u5728\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u65f6\u8fd0\u884c\u67d0\u4e9b\u4ee3\u7801\u3002\u4e0e\u7c7b C \u8bed\u8a00\u4e0d\u540c\uff0c\u5728 Pascal \u4e2d\uff0c\u60a8\u4e0d\u5fc5\u5c06\u6761\u4ef6\u62ec\u5728\u62ec\u53f7\u4e2d\u3002\nvar A\uff1a\u6574\u6570\uff1b B\uff1a\u5e03\u5c14\u503c\uff1b\u5982\u679c A &gt; 0 \u5219\u5f00\u59cb\u505a\u4e00\u4e9b\u4e8b\u60c5\uff1b\u5982\u679c A &gt; 0 \u5219\u5f00\u59cb DoSomething\uff1b\u5e76\u505a\u66f4\u591a\u7684\u4e8b\u60c5\uff1b\u7ed3\u5c3e;\u5982\u679c A &gt; 10 \u5219 DoSomething else DoSomethingElse\uff1b // \u76f8\u5f53\u4e8e\u4e0a\u9762\u7684 B := A &gt; 10; if B then DoSomething else DoSomethingElse;\u7ed3\u5c3e;\u867d\u7136\u4e0a\u9762\u5d4c\u5957 if \u7684\u793a\u4f8b\u662f\u6b63\u786e\u7684\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u5d4c\u5957 if \u653e\u5728 begin ... end \u5757\u4e2d\u901a\u5e38\u4f1a\u66f4\u597d\u3002\u8fd9\u4f7f\u5f97\u4ee3\u7801\u5bf9\u8bfb\u8005\u6765\u8bf4\u66f4\u660e\u663e\uff0c\u5373\u4f7f\u4f60\u5f04\u4e71\u4e86\u7f29\u8fdb\uff0c\u5b83\u4e5f\u4f1a\u4fdd\u6301\u660e\u663e\u3002\u8be5\u793a\u4f8b\u7684\u6539\u8fdb\u7248\u672c\u5982\u4e0b\u3002\u5f53\u60a8\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u67d0\u4e2a else \u5b50\u53e5\u65f6\uff0c\u5f88\u660e\u663e\u5b83\u5c06\u9002\u7528\u4e8e\u54ea\u4e2a\u6761\u4ef6\uff08\u9002\u7528\u4e8e A \u6d4b\u8bd5\u6216 B \u6d4b\u8bd5\uff09\uff0c\u56e0\u6b64\u4e0d\u592a\u5bb9\u6613\u51fa\u9519\u3002\u903b\u8f91\u8fd0\u7b97\u7b26\u79f0\u4e3aand\u3001or\u3001not\u3001xor\u3002\u5b83\u4eec\u7684\u542b\u4e49\u53ef\u80fd\u5f88\u660e\u663e\uff08\u5982\u679c\u60a8\u4e0d\u786e\u5b9a xor \u7684\u4f5c\u7528\uff0c\u8bf7\u641c\u7d22\u201cexclusive or\u201d:)\uff09\u3002\u4ed6\u4eec\u63a5\u53d7\u5e03\u5c14\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u3002\u5f53\u4e24\u4e2a\u53c2\u6570\u90fd\u662f\u6574\u6570\u503c\u65f6\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u5145\u5f53\u6309\u4f4d\u8fd0\u7b97\u7b26\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002\u5173\u7cfb\uff08\u6bd4\u8f83\uff09\u8fd0\u7b97\u7b26\u662f =\u3001&lt;&gt;\u3001&gt;\u3001&lt;\u3001&lt;=\u3001&gt;=\u3002\u5982\u679c\u60a8\u4e60\u60ef\u4e86\u7c7b C \u8bed\u8a00\uff0c\u8bf7\u6ce8\u610f\uff0c\u5728 Pascal \u4e2d\uff0c\u60a8\u4f7f\u7528\u5355\u4e2a\u76f8\u7b49\u5b57\u7b26 A = B \u6bd4\u8f83\u4e24\u4e2a\u503c\uff08\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u76f8\u7b49\uff09\uff08\u4e0e\u5728 C \u4e2d\u4f7f\u7528 A == B \u4e0d\u540c\uff09\u3002 Pascal \u4e2d\u7684\u7279\u6b8a\u8d4b\u503c\u8fd0\u7b97\u7b26\u662f:=\u3002\u903b\u8f91\uff08\u6216\u6309\u4f4d\uff09\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5173\u7cfb\u8fd0\u7b97\u7b26\u3002\u60a8\u53ef\u80fd\u9700\u8981\u5728\u67d0\u4e9b\u8868\u8fbe\u5f0f\u5468\u56f4\u4f7f\u7528\u62ec\u53f7\u4ee5\u83b7\u5f97\u6240\u9700\u7684\u8ba1\u7b97\u987a\u5e8f\u3002 var A, B: \u6574\u6570\uff1b begin if A = 0 and B &lt;&gt; 0 then ... // INCORRECT example \u4e0a\u9762\u7684\u7f16\u8bd1\u5931\u8d25\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u9996\u5148\u8981\u6309\u4f4d\u6267\u884c\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff1a(0 and B)\u3002\u8fd9\u662f\u4e00\u4e2a\u9010\u4f4d\u8fd0\u7b97\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u503c\u3002\u7136\u540e\u7f16\u8bd1\u5668\u5e94\u7528 = \u8fd0\u7b97\u7b26\uff0c\u5b83\u4ea7\u751f\u4e00\u4e2a\u5e03\u5c14\u503c A = (0 \u548c B)\u3002\u6700\u540e\uff0c\u5728\u5c1d\u8bd5\u6bd4\u8f83\u5e03\u5c14\u503c A = (0 \u548c B) \u548c\u6574\u6570\u503c 0 \u540e\uff0c\u51fa\u73b0\u4e86\u201c\u7c7b\u578b\u4e0d\u5339\u914d\u201d\u9519\u8bef\u3002\n\u5982\u679c MyFunction(X) \u8fd4\u56de false\uff0c\u5219\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5df2\u77e5\u7684\uff08false \u7684\u503c\u4ee5\u53ca\u59cb\u7ec8\u4e3a false \u7684\u503c\uff09\uff0c\u5e76\u4e14\u6839\u672c\u4e0d\u4f1a\u6267\u884c MyOtherFunction(Y)\u3002\u7c7b\u4f3c\u7684\u89c4\u5219\u662f for \u6216 expression\u3002\u5728\u90a3\u91cc\uff0c\u5982\u679c\u5df2\u77e5\u8868\u8fbe\u5f0f\u4e3a\u771f\uff08\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e3a\u771f\uff09\uff0c\u5219\u4e0d\u8ba1\u7b97\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u3002\u5373\u4f7f A \u4e3a\u96f6\uff0c\u8fd9\u4e5f\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5173\u952e\u5b57 nil \u662f\u4e00\u4e2a\u7b49\u4e8e\u96f6\u7684\u6307\u9488\uff08\u5f53\u8868\u793a\u4e3a\u6570\u5b57\u65f6\uff09\u3002\u5b83\u5728\u8bb8\u591a\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u88ab\u79f0\u4e3a\u7a7a\u6307\u9488\u3002\u5982\u679c\u5e94\u8be5\u6839\u636e\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u90a3\u4e48 case .. of .. end \u8bed\u53e5\u5f88\u6709\u7528\u3002 case SomeValue \u4e3a 0\uff1aDoSomething\uff1b 1\uff1a\u505a\u522b\u7684\u4e8b\u60c5\uff1b 2\uff1a\u5f00\u59cbIfItsTwoThenDoThis\uff1b AndAlsoDoThis;\u7ed3\u5c3e; 3.. 10\uff1aDoSomethingInCaseItsInThisRange\uff1b 11\u300121\u300131\uff1aAndDoSomethingFor theseSpecialValues\uff1b\u5426\u5219 DoSomethingInCaseOfUnexpectedValue;\u7ed3\u5c3e; else \u5b50\u53e5\u662f\u53ef\u9009\u7684\uff08\u5e76\u4e14\u5bf9\u5e94\u4e8e\u7c7b C \u8bed\u8a00\u4e2d\u7684\u9ed8\u8ba4\u503c\uff09\u3002\u5982\u679c\u6ca1\u6709\u6761\u4ef6\u5339\u914d\uff0c\u5e76\u4e14\u6ca1\u6709\u5176\u4ed6\u6761\u4ef6\uff0c\u5219\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\u3002\u5982\u679c\u60a8\u6765\u81ea\u7c7b C \u8bed\u8a00\uff0c\u5c06\u5176\u4e0e\u8fd9\u4e9b\u8bed\u8a00\u4e2d\u7684 switch \u8bed\u53e5\u8fdb\u884c\u6bd4\u8f83\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230\u6ca1\u6709\u81ea\u52a8\u5931\u8d25\u3002\u8fd9\u5728 Pascal \u4e2d\u662f\u4e00\u79cd\u523b\u610f\u7684\u795d\u798f\u3002\u60a8\u4e0d\u5fc5\u8bb0\u4f4f\u653e\u7f6e\u4e2d\u65ad\u8bf4\u660e\u3002\u5728\u6bcf\u6b21\u6267\u884c\u4e2d\uff0c\u6700\u591a\u6267\u884c\u4e00\u4e2a case \u5206\u652f\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\nPascal \u4e2d\u7684\u679a\u4e3e\u7c7b\u578b\u662f\u4e00\u79cd\u975e\u5e38\u597d\u7684\u4e0d\u900f\u660e\u7c7b\u578b\u3002\u60a8\u53ef\u80fd\u4f1a\u6bd4\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u679a\u4e3e\u66f4\u9891\u7e41\u5730\u4f7f\u7528\u5b83:) \u7ea6\u5b9a\u662f\u5728\u679a\u4e3e\u540d\u79f0\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u4e24\u4e2a\u5b57\u6bcd\u7684\u7c7b\u578b\u540d\u79f0\u5feb\u6377\u65b9\u5f0f\uff0c\u56e0\u6b64 ak = \u201c\u52a8\u7269\u79cd\u7c7b\u201d\u7684\u5feb\u6377\u65b9\u5f0f\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u7ea6\u5b9a\uff0c\u56e0\u4e3a\u679a\u4e3e\u540d\u79f0\u4f4d\u4e8e\u5355\u5143\uff08\u5168\u5c40\uff09\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u7ed9\u5b83\u4eec\u52a0\u4e0a ak \u524d\u7f00\uff0c\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4e0e\u5176\u4ed6\u6807\u8bc6\u7b26\u53d1\u751f\u51b2\u7a81\u7684\u673a\u4f1a\u3002\u540d\u79f0\u4e0a\u7684\u51b2\u7a81\u5e76\u4e0d\u662f\u4e00\u4e2a\u969c\u788d\u3002\u4e0d\u540c\u7684\u5355\u4f4d\u5b9a\u4e49\u76f8\u540c\u7684\u6807\u8bc6\u7b26\u662f\u53ef\u4ee5\u7684\u3002\u4f46\u65e0\u8bba\u5982\u4f55\u5c3d\u91cf\u907f\u514d\u51b2\u7a81\u662f\u4e2a\u597d\u4e3b\u610f\uff0c\u4ee5\u4fdd\u6301\u4ee3\u7801\u6613\u4e8e\u7406\u89e3\u548c grep\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\u5668\u6307\u4ee4 {$scopedenums on} \u907f\u514d\u5c06\u679a\u4e3e\u540d\u79f0\u653e\u7f6e\u5728\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\u8fd9\u610f\u5473\u7740\u60a8\u5fc5\u987b\u8bbf\u95ee\u7531\u7c7b\u578b\u540d\u79f0\u9650\u5b9a\u7684\u5b83\u4eec\uff0c\u4f8b\u5982 TAnimalKind.akDuck\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981 ak \u524d\u7f00\uff0c\u60a8\u53ef\u80fd\u53ea\u4f1a\u8c03\u7528\u679a\u4e3e Duck\u3001Cat\u3001Dog\u3002\u8fd9\u7c7b\u4f3c\u4e8e C# \u679a\u4e3e\u3002\u679a\u4e3e\u7c7b\u578b\u662f\u4e0d\u900f\u660e\u7684\u8fd9\u4e00\u4e8b\u5b9e\u610f\u5473\u7740\u5b83\u4e0d\u80fd\u4ec5\u5206\u914d\u7ed9\u6574\u6570\u6216\u4ece\u6574\u6570\u5206\u914d\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u7279\u6b8a\u7528\u9014\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Ord(MyAnimalKind) \u5c06 enum \u5f3a\u5236\u8f6c\u6362\u4e3a int\uff0c\u6216 typecast TAnimalKind(MyInteger) \u5c06 int \u5f3a\u5236\u8f6c\u6362\u4e3a enum\u3002\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u786e\u4fdd\u9996\u5148\u68c0\u67e5 MyInteger \u662f\u5426\u5728\u826f\u597d\u7684\u8303\u56f4\u5185\uff080 \u5230 Ord(High(TAnimalKind))\uff09\u3002 type TArrayOfTenStrings = array [ 0.. 9] of string; TArrayOfTenStrings1Based = array [ 1.. 10] \u7684\u5b57\u7b26\u4e32\uff1b TMyNumber = 0.. 9; TAlsoArrayOfTenStrings = \u5b57\u7b26\u4e32\u6570\u7ec4 [TMyNumber]\uff1b TAnimalKind = (akDuck, akCat, akDog); TAnimalNames = \u5b57\u7b26\u4e32\u6570\u7ec4 [TAnimalKind]\uff1b\u8f93\u5165 TAnimalKind = (akDuck, akCat, akDog); TAnimals = TAnimalKind \u96c6\uff1b var A: TAnimals;\u5f00\u59cb A := []; A := [akDuck, akCat]; A := A + [akDog]; A := A * [akCat, akDog];\u5305\u542b(A, akDuck);\u6392\u9664\uff08A\uff0cakDuck\uff09\uff1b\u7ed3\u5c3e;\n{$mode objfpc} {$H+} {$J-} {$R+} // \u8303\u56f4\u68c0\u67e5 - \u975e\u5e38\u9002\u5408\u8c03\u8bd5 var MyArray: array [ 0.. 9] of Integer; I\uff1a\u6574\u6570\uff1b begin // \u521d\u59cb\u5316\u4e3a I := 0 \u5230 9 do MyArray[I] := I * I; // show for I := 0 to 9 do WriteLn(&#39; Square is &#39;, MyArray[I]); // \u5bf9 I := Low(MyArray) to High(MyArray) do WriteLn( &#39; Square is &#39;, MyArray[I]); // \u548c\u4e0a\u9762\u4e00\u6837 I := 0;\u5f53 I &lt; 10 \u5f00\u59cb WriteLn( &#39; Square is &#39;, MyArray[I]);\u6211 := \u6211 + 1; // \u6216 &quot;I += 1&quot;, \u6216 &quot;Inc(I)&quot; end; // \u548c\u4e0a\u9762\u4e00\u6837 I := 0; repeat WriteLn( &#39; Square is &#39;, MyArray[I]);\u516c\u53f8\uff08\u4e00\uff09\uff1b\u76f4\u5230\u6211 = 10\uff1b // \u4e0e\u4e0a\u8ff0\u76f8\u540c // \u6ce8\u610f\uff1a\u8fd9\u91cc\u6211\u679a\u4e3e MyArray \u503c\uff0c\u800c\u4e0d\u662f MyArray \u4e2d I \u7684\u7d22\u5f15 do WriteLn( &#39; Square is &#39;, I);\u7ed3\u5c3e\u3002\u5faa\u73af\u6761\u4ef6\u5177\u6709\u76f8\u53cd\u7684\u542b\u4e49\u3002\u5728 while .. \u4f60\u544a\u8bc9\u5b83\u4ec0\u4e48\u65f6\u5019\u7ee7\u7eed\uff0c\u4f46\u5728\u91cd\u590d .. \u76f4\u5230\u4f60\u544a\u8bc9\u5b83\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u3002\u5728\u91cd\u590d\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u5f00\u59cb\u65f6\u4e0d\u68c0\u67e5\u6761\u4ef6\u3002\u6240\u4ee5\u91cd\u590d\u5faa\u73af\u603b\u662f\u81f3\u5c11\u8fd0\u884c\u4e00\u6b21\u3002 for I := .. to .. do ... \u6784\u9020\u5b83\u7c7b\u4f3c\u4e8e\u7c7b\u4f3c C \u7684 for \u5faa\u73af\u3002\u4f46\u662f\uff0c\u5b83\u53d7\u5230\u66f4\u591a\u9650\u5236\uff0c\u56e0\u4e3a\u60a8\u65e0\u6cd5\u6307\u5b9a\u4efb\u610f\u64cd\u4f5c/\u6d4b\u8bd5\u6765\u63a7\u5236\u5faa\u73af\u8fed\u4ee3\u3002\u8fd9\u4e25\u683c\u7528\u4e8e\u8fed\u4ee3\u8fde\u7eed\u6570\u5b57\uff08\u6216\u5176\u4ed6\u5e8f\u6570\u7c7b\u578b\uff09\u3002\u60a8\u62e5\u6709\u7684\u552f\u4e00\u7075\u6d3b\u6027\u662f\u60a8\u53ef\u4ee5\u4f7f\u7528 downto \u800c\u4e0d\u662f to\uff0c\u4f7f\u6570\u5b57\u4e0b\u964d\u3002\u4f5c\u4e3a\u4ea4\u6362\uff0c\u5b83\u770b\u8d77\u6765\u5f88\u5e72\u51c0\uff0c\u5e76\u4e14\u5728\u6267\u884c\u4e0a\u975e\u5e38\u4f18\u5316\u3002\u7279\u522b\u662f\uff0c\u5728\u5faa\u73af\u5f00\u59cb\u4e4b\u524d\uff0c\u4e0b\u9650\u548c\u4e0a\u9650\u7684\u8868\u8fbe\u5f0f\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u53ef\u80fd\u7684\u4f18\u5316\uff0c\u5faa\u73af\u8ba1\u6570\u5668\u53d8\u91cf\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a I\uff09\u7684\u503c\u5728\u5faa\u73af\u5b8c\u6210\u540e\u5e94\u88ab\u89c6\u4e3a\u672a\u5b9a\u4e49\u3002\u5728\u5faa\u73af\u4e4b\u540e\u8bbf\u95ee I \u7684\u503c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u8b66\u544a\u3002\u9664\u975e\u60a8\u901a\u8fc7 Break \u6216 Exit \u63d0\u524d\u9000\u51fa\u5faa\u73af\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8ba1\u6570\u5668\u53d8\u91cf\u4fdd\u8bc1\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\u503c\u3002 for I in .. do .. \u7c7b\u4f3c\u4e8e\u8bb8\u591a\u73b0\u4ee3\u8bed\u8a00\u4e2d\u7684 foreach \u7ed3\u6784\u3002\u5b83\u53ef\u4ee5\u5728\u8bb8\u591a\u5185\u7f6e\u7c7b\u578b\u4e0a\u667a\u80fd\u5730\u5de5\u4f5c\uff1a\nvar \u52a8\u7269\uff1aTAnimals\uff1b AK\uff1aTAnimalKind\uff1b\u5f00\u59cb\u52a8\u7269:= [akDog, akCat];\u5bf9\u4e8e\u52a8\u7269\u4e2d\u7684 AK \u505a ... {$mode objfpc} {$H+} {$J-} \u4f7f\u7528 SysUtils\uff0cFGL\uff1b\u7c7b\u578b TMyClass = I \u7c7b\uff0c\u6b63\u65b9\u5f62\uff1a\u6574\u6570\uff1b\u7ed3\u5c3e; TMyClassList = \u4e13\u95e8\u5316 TFPGObjectList&lt;TMyClass&gt;;\u53d8\u91cf\u5217\u8868\uff1aTMyClassList\uff1b C\uff1aTMyClass\uff1b I\uff1a\u6574\u6570\uff1b\u5f00\u59cb\u5217\u8868 := TMyClassList.Create(true); // true = owns children try for I := 0 to 9 do begin C := TMyClass.Create; CI := I; C.Square := I * I; List.Add(C);\u7ed3\u5c3e; for C in List do WriteLn(&#39; Square of &#39;, CI, &#39; is &#39;, C.Square);\u6700\u540e FreeAndNil(List);\u7ed3\u5c3e;\u7ed3\u5c3e\u3002\u6211\u4eec\u8fd8\u6ca1\u6709\u89e3\u91ca\u7c7b\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u5bf9\u4f60\u6765\u8bf4\u53ef\u80fd\u8fd8\u4e0d\u662f\u5f88\u660e\u663e\u2014\u2014\u7ee7\u7eed\uff0c\u7a0d\u540e\u4f1a\u6709\u610f\u4e49:) \u8981\u5728 Pascal \u4e2d\u7b80\u5355\u5730\u8f93\u51fa\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f7f\u7528 Write \u6216 WriteLn \u4f8b\u7a0b\u3002\u540e\u8005\u81ea\u52a8\u5728\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6362\u884c\u7b26\u3002\u8fd9\u662f Pascal \u4e2d\u7684\u201c\u795e\u5947\u201d\u4f8b\u7a0b\u3002\u5b83\u9700\u8981\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5b83\u4eec\u53ef\u4ee5\u6709\u4efb\u4f55\u7c7b\u578b\u3002\u5b83\u4eec\u5728\u663e\u793a\u65f6\u90fd\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u7279\u6b8a\u8bed\u6cd5\u6765\u6307\u5b9a\u586b\u5145\u548c\u6570\u5b57\u7cbe\u5ea6\u3002 WriteLn(&#39;Hello world!&#39;);WriteLn(&#39;\u53ef\u4ee5\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff1a&#39;, 3 * 4);WriteLn(&#39;\u53ef\u4ee5\u586b\u5145\u4e00\u4e2a\u6574\u6570\uff1a&#39;, 666: 10);WriteLn(&#39;\u53ef\u4ee5\u8f93\u51fa\u4e00\u4e2a\u6d6e\u70b9\u6570\uff1a &#39;, \u5706\u5468\u7387: 1: 4);\u8981\u5728\u5b57\u7b26\u4e32\u4e2d\u663e\u5f0f\u4f7f\u7528\u6362\u884c\u7b26\uff0c\u8bf7\u4f7f\u7528 LineEnding \u5e38\u91cf\uff08\u6765\u81ea FPC RTL\uff09\u3002 \uff08Castle Game Engine \u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f83\u77ed\u7684 NL \u5e38\u91cf\u3002\uff09Pascal \u5b57\u7b26\u4e32\u4e0d\u89e3\u91ca\u4efb\u4f55\u7279\u6b8a\u7684\u53cd\u659c\u6760\u5e8f\u5217\uff0c\u56e0\u6b64\u7f16\u5199\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4ec5\u9002\u7528\u4e8e\u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\u3002\u786e\u4fdd\u5728\u4e3b\u7a0b\u5e8f\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86 {$apptype CONSOLE}\uff08\u800c\u4e0d\u662f {$apptype GUI}\uff09\u3002\u5728\u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5b83\u5b9e\u9645\u4e0a\u65e0\u5173\u7d27\u8981\uff0c\u5e76\u4e14\u59cb\u7ec8\u6709\u6548\uff08Unix\uff09\uff0c\u4f46\u5728\u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5c1d\u8bd5\u4ece GUI \u5e94\u7528\u7a0b\u5e8f\u5199\u5165\u5185\u5bb9\u662f\u9519\u8bef\u7684\uff08Windows\uff09\u3002\u5728 Castle Game Engine \u4e2d\uff1a\u4f7f\u7528 WriteLnLog \u6216 WriteLnWarning\uff0c\u4ece\u4e0d\u4f7f\u7528 WriteLn\uff0c\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\u3002\u5b83\u4eec\u5c06\u59cb\u7ec8\u6307\u5411\u4e00\u4e9b\u6709\u7528\u7684\u8f93\u51fa\u3002\u5728 Unix \u4e0a\uff0c\u6807\u51c6\u8f93\u51fa\u3002\u5728 Windows GUI \u5e94\u7528\u7a0b\u5e8f\u4e0a\uff0c\u65e5\u5fd7\u6587\u4ef6\u3002\u5728 Android \u4e0a\uff0cAndroid \u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177\uff08\u4f7f\u7528 adb logcat \u65f6\u53ef\u89c1\uff09\u3002 WriteLn \u7684\u4f7f\u7528\u5e94\u4ec5\u9650\u4e8e\u7f16\u5199\u547d\u4ee4\u884c\u5e94\u7528\u7a0b\u5e8f\uff08\u5982 3D \u6a21\u578b\u8f6c\u6362\u5668/\u751f\u6210\u5668\uff09\u5e76\u4e14\u60a8\u77e5\u9053\u6807\u51c6\u8f93\u51fa\u53ef\u7528\u7684\u60c5\u51b5\u3002\u8981\u5c06\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff08\u800c\u4e0d\u662f\u76f4\u63a5\u8f93\u51fa\u5b83\u4eec\uff09\uff0c\u60a8\u6709\u51e0\u4e2a\u9009\u9879\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 IntToStr \u548c FloatToStr \u7b49\u4e13\u7528\u51fd\u6570\u5c06\u7279\u5b9a\u7c7b\u578b\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u5728 Pascal \u4e2d\u7b80\u5355\u5730\u901a\u8fc7\u6dfb\u52a0\u5b57\u7b26\u4e32\u6765\u8fde\u63a5\u5b57\u7b26\u4e32\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\uff1a&#39;My int number is &#39; + IntToStr(MyInt) + &#39;\uff0c\u800c Pi \u7684\u503c\u4e3a &#39; + FloatToStr(Pi)\u3002\u4f18\u70b9\uff1a\u7edd\u5bf9\u7075\u6d3b\u3002\u6709\u5f88\u591a XxxToStr \u91cd\u8f7d\u7248\u672c\u548c\u670b\u53cb\uff08\u6bd4\u5982 FormatFloat\uff09\uff0c\u6db5\u76d6\u4e86\u5f88\u591a\u7c7b\u578b\u3002\u5b83\u4eec\u4e2d\u7684\u5927\u591a\u6570\u90fd\u5728 SysUtils \u5355\u5143\u4e2d\u3002\u53e6\u4e00\u4e2a\u4f18\u70b9\uff1a\u4e0e\u53cd\u5411\u529f\u80fd\u4e00\u81f4\u3002\u8981\u5c06\u5b57\u7b26\u4e32\uff08\u4f8b\u5982\uff0c\u7528\u6237\u8f93\u5165\uff09\u8f6c\u6362\u56de\u6574\u6570\u6216\u6d6e\u70b9\u6570\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 StrToInt\u3001StrToFloat \u548c\u670b\u53cb\uff08\u5982 StrToIntDef\uff09\u3002\u7f3a\u70b9\uff1a\u8bb8\u591a XxxToStr \u8c03\u7528\u548c\u5b57\u7b26\u4e32\u7684\u957f\u8fde\u63a5\u770b\u8d77\u6765\u4e0d\u592a\u597d\u3002\nFormat \u51fd\u6570\uff0c\u7c7b\u4f3c\u4e8e Format(&#39;%d %f %s&#39;, [MyInt, MyFloat, MyString])\u3002\u8fd9\u5c31\u50cf\u7c7b C \u8bed\u8a00\u4e2d\u7684 sprintf \u51fd\u6570\u3002\u5b83\u5c06\u53c2\u6570\u63d2\u5165\u5230\u6a21\u5f0f\u4e2d\u7684\u5360\u4f4d\u7b26\u4e2d\u3002\u5360\u4f4d\u7b26\u53ef\u80fd\u4f1a\u4f7f\u7528\u7279\u6b8a\u8bed\u6cd5\u6765\u5f71\u54cd\u683c\u5f0f\uff0c\u4f8b\u5982 %.4f \u4f1a\u4ea7\u751f\u5c0f\u6570\u70b9\u540e 4 \u4f4d\u7684\u6d6e\u70b9\u683c\u5f0f\u3002\u4f18\u70b9\uff1a\u6a21\u5f0f\u5b57\u7b26\u4e32\u4e0e\u53c2\u6570\u7684\u5206\u79bb\u770b\u8d77\u6765\u5f88\u5e72\u51c0\u3002\u5982\u679c\u60a8\u9700\u8981\u5728\u4e0d\u89e6\u53ca\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u66f4\u6539\u6a21\u5f0f\u5b57\u7b26\u4e32\uff08\u4f8b\u5982\u5728\u7ffb\u8bd1\u65f6\uff09\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5b8c\u6210\u3002\u53e6\u4e00\u4e2a\u4f18\u70b9\uff1a\u6ca1\u6709\u7f16\u8bd1\u5668\u9b54\u6cd5\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u8bed\u6cd5\u5728\u81ea\u5df1\u7684\u4f8b\u7a0b\u4e2d\u4f20\u9012\u4efb\u610f\u6570\u91cf\u7684\u4efb\u610f\u7c7b\u578b\u7684\u53c2\u6570\uff08\u5c06\u53c2\u6570\u58f0\u660e\u4e3a const \u6570\u7ec4\uff09\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u53c2\u6570\u5411\u4e0b\u4f20\u9012\u7ed9 Format\uff0c\u6216\u8005\u89e3\u6784\u53c2\u6570\u5217\u8868\u5e76\u4f7f\u7528\u5b83\u4eec\u6267\u884c\u4efb\u4f55\u60a8\u559c\u6b22\u7684\u64cd\u4f5c\u3002\u7f3a\u70b9\uff1a\u7f16\u8bd1\u5668\u4e0d\u68c0\u67e5\u6a21\u5f0f\u662f\u5426\u4e0e\u53c2\u6570\u5339\u914d\u3002\u4f7f\u7528\u9519\u8bef\u7684\u5360\u4f4d\u7b26\u7c7b\u578b\u5c06\u5728\u8fd0\u884c\u65f6\u5bfc\u81f4\u5f02\u5e38\uff08 EConvertError \u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u50cf\u5206\u6bb5\u9519\u8bef\u90a3\u6837\u4ee4\u4eba\u8ba8\u538c\u7684\u4e1c\u897f\uff09\u3002 WriteStr(TargetString, \u2026 ) \u4f8b\u7a0b\u7684\u884c\u4e3a\u4e0e Write(\u2026 ) \u975e\u5e38\u76f8\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u7ed3\u679c\u4fdd\u5b58\u5230 TargetString\u3002\u4f18\u70b9\uff1a\u5b83\u652f\u6301 Write \u7684\u6240\u6709\u529f\u80fd\uff0c\u5305\u62ec\u7528\u4e8e\u683c\u5f0f\u5316\u7684\u7279\u6b8a\u8bed\u6cd5\uff0c\u5982 Pi:1:4\u3002\u7f3a\u70b9\uff1a\u683c\u5f0f\u5316\u7684\u7279\u6b8a\u8bed\u6cd5\u662f\u201c\u7f16\u8bd1\u5668\u9b54\u672f\u201d\uff0c\u4e13\u95e8\u4e3a\u8fd9\u6837\u7684\u4f8b\u7a0b\u5b9e\u73b0\u3002\u8fd9\u6709\u65f6\u4f1a\u5f88\u9ebb\u70e6\uff0c\u4f8b\u5982\u60a8\u4e0d\u80fd\u521b\u5efa\u81ea\u5df1\u7684\u4f8b\u7a0b MyStringFormatter(... ) \u4e5f\u5141\u8bb8\u50cf Pi:1:4 \u8fd9\u6837\u7684\u7279\u6b8a\u8bed\u6cd5\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff08\u4e5f\u56e0\u4e3a\u5b83\u5728\u4e3b\u8981\u7684 Pascal \u7f16\u8bd1\u5668\u4e2d\u5f88\u4e45\u6ca1\u6709\u5b9e\u73b0\uff09\uff0c\u8fd9\u79cd\u7ed3\u6784\u4e0d\u662f\u5f88\u6d41\u884c\u3002\n\u5355\u5143\u5141\u8bb8\u60a8\u5c06\u5e38\u89c1\u7684\u4e1c\u897f\uff08\u4efb\u4f55\u53ef\u4ee5\u58f0\u660e\u7684\u4e1c\u897f\uff09\u5206\u7ec4\uff0c\u4f9b\u5176\u4ed6\u5355\u5143\u548c\u7a0b\u5e8f\u4f7f\u7528\u3002\u5b83\u4eec\u76f8\u5f53\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6a21\u5757\u548c\u5305\u3002\u5b83\u4eec\u6709\u4e00\u4e2a\u63a5\u53e3\u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u58f0\u660e\u5176\u4ed6\u5355\u5143\u548c\u7a0b\u5e8f\u53ef\u7528\u7684\u5185\u5bb9\uff0c\u7136\u540e\u662f\u5b9e\u73b0\u3002\u5c06\u5355\u4f4d MyUnit \u4fdd\u5b58\u4e3a myunit.pas\uff08\u5c0f\u5199\u5e76\u5e26\u6709 .pas \u6269\u5c55\u540d\uff09\u3002 {$mode objfpc} {$H+} {$J-} \u5355\u5143 MyUnit;\u63a5\u53e3\u8fc7\u7a0b MyProcedure( const A: Integer);\u51fd\u6570 MyFunction(const S: string): string;\u6267\u884c\u7a0b\u5e8f MyProcedure(const A: Integer); begin WriteLn(&#39; A + 10 \u662f\uff1a&#39;, A + 10);\u7ed3\u5c3e;\u51fd\u6570 MyFunction(const S: string): string;\u5f00\u59cb\u7ed3\u679c\uff1a= S + &#39;\u5b57\u7b26\u4e32\u88ab\u81ea\u52a8\u7ba1\u7406&#39;;\u7ed3\u5c3e;\u7ed3\u5c3e\u3002\u6700\u7ec8\u7a0b\u5e8f\u4fdd\u5b58\u4e3a myprogram.lpr \u6587\u4ef6\uff08 lpr = Lazarus \u7a0b\u5e8f\u6587\u4ef6\uff1b\u5728 Delphi \u4e2d\uff0c\u60a8\u5c06\u4f7f\u7528 .dpr\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u5176\u4ed6\u7ea6\u5b9a\u5728\u8fd9\u91cc\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u4f8b\u5982\uff0c\u6709\u4e9b\u9879\u76ee\u53ea\u4f7f\u7528 .pas \u4f5c\u4e3a\u4e3b\u7a0b\u5e8f\u6587\u4ef6\uff0c\u6709\u4e9b\u4f7f\u7528 .pp \u4f5c\u4e3a\u5355\u4f4d\u6216\u7a0b\u5e8f\u3002\u6211\u5efa\u8bae\u5c06 .pas \u7528\u4e8e\u5355\u4f4d\uff0c\u5c06 .lpr \u7528\u4e8e FPC/Lazarus \u7a0b\u5e8f\u3002\u4e00\u4e2a\u5355\u5143\u4e5f\u53ef\u80fd\u5305\u542b\u521d\u59cb\u5316\u548c\u7ed3\u675f\u90e8\u5206\u3002\u8fd9\u662f\u7a0b\u5e8f\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u6267\u884c\u7684\u4ee3\u7801\u3002\u4e00\u4e2a\u5355\u5143\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u4e2a\u5355\u5143\u3002\u53e6\u4e00\u4e2a\u5355\u5143\u53ef\u4ee5\u7528\u5728\u63a5\u53e3\u90e8\u5206\uff0c\u4e5f\u53ef\u4ee5\u53ea\u7528\u5728\u5b9e\u73b0\u90e8\u5206\u3002\u524d\u8005\u5141\u8bb8\u5728\u53e6\u4e00\u4e2a\u5355\u5143\u7684\u5185\u5bb9\u4e4b\u4e0a\u5b9a\u4e49\u65b0\u7684\u516c\u5171\u5185\u5bb9\uff08\u7a0b\u5e8f\u3001\u7c7b\u578b......\uff09\u3002\u540e\u8005\u66f4\u53d7\u9650\u5236\uff08\u5982\u679c\u4f60\u53ea\u5728\u5b9e\u73b0\u90e8\u5206\u4f7f\u7528\u4e00\u4e2a\u5355\u5143\uff0c\u4f60\u53ea\u80fd\u5728\u4f60\u7684\u5b9e\u73b0\u4e2d\u4f7f\u7528\u5b83\u7684\u6807\u8bc6\u7b26\uff09\u3002 {$mode objfpc} {$H+} {$J-} \u5355\u4f4d\u53e6\u4e00\u4e2a\u5355\u4f4d\uff1b\u63a5\u53e3\u4f7f\u7528\u7c7b\uff1b { \u201cTComponent\u201d\u7c7b\u578b\uff08\u7c7b\uff09\u5b9a\u4e49\u5728 Classes un ......", "note_en": "There are many books and resources about Pascal out there, but too many of them talk about the old Pascal, without classes, units or generics.\n So I wrote this quick introduction to what I call  modern Object Pascal. Most of the programmers using it don\u2019t really call it  &#34;modern Object Pascal&#34;, we just call it  &#34;our Pascal&#34;. But when introducing the language, I feel it\u2019s important to emphasize that it\u2019s a modern, object-oriented language. It evolved a  lot since the old (Turbo) Pascal that many people learned in schools long time ago. Feature-wise, it\u2019s quite similar to C++ or Java or C#.\n It has all the modern features you expect\u2009\u2014\u2009classes, units, interfaces, generics\u2026\u200b\n It also has excellent, portable and open-source compiler called the  Free Pascal Compiler,  http://freepascal.org/ . And an accompanying IDE (editor, debugger, a library of visual components, form designer) called  Lazarus  http://lazarus.freepascal.org/ . Myself, I\u2019m the creator of  Castle Game Engine,  https://castle-engine.io/ , which is an open-source 3D and 2D game engine using modern Pascal to create games on many platforms (Windows, Linux, macOS, Android, iOS, Nintendo Switch; also WebGL is coming).\n This introduction is mostly directed at programmers who already have experience in other languages. We will not cover here the meanings of some universal concepts, like  &#34;what is a class&#34;, we\u2019ll only show how to do them in Pascal.\n {$mode objfpc} {$H+} {$J-}  // Just use this line in all modern sources program MyProgram;  // Save this file as myprogram.lpr begin WriteLn(  &#39; Hello world! &#39;); end.\n  If you use the command-line FPC, just create a new file  myprogram.lpr and execute  fpc myprogram.lpr.\n If you use  Lazarus, create a new project (menu  Project \u2192  New Project \u2192  Simple Program). Save it as  myprogram and paste this source code as the main file. Compile using the menu item  Run \u2192 Compile.\n This is a command-line program, so in either case\u2009\u2014\u2009just run the compiled executable from the command-line.\n The rest of this article talks about the Object Pascal language, so don\u2019t expect to see anything more fancy than the command-line stuff. If you want to see something cool, just create a new GUI project in  Lazarus ( Project \u2192  New Project \u2192  Application).Voila\u2009\u2014\u2009a working GUI application, cross-platform, with native look everywhere, using a comfortable visual component library. The  Lazarus and  Free Pascal Compiler come with lots of ready units for networking, GUI, database, file formats (XML, json, images\u2026\u200b), threading and everything else you may need. I already mentioned my cool  Castle Game Engine earlier:)\n {$mode objfpc} {$H+} {$J-} program MyProgram; procedure MyProcedure( const A: Integer); begin WriteLn(  &#39; A + 10 is:  &#39;, A +  10); end; function MyFunction( const S:  string):  string; begin Result := S +   &#39; strings are automatically managed &#39;; end; var X: Single; begin WriteLn(MyFunction(  &#39; Note:  &#39;)); MyProcedure( 5);  // Division using &#34;/&#34; always makes float result, use &#34;div&#34; for integer division X :=  15 /  5; WriteLn(  &#39; X is now:  &#39;, X);  // scientific notation WriteLn(  &#39; X is now:  &#39;, X: 1: 2);  // 2 decimal places end.\n To return a value from a function, assign something to the magic  Result variable. You can read and set the  Result freely, just like a local variable.\n function MyFunction( const S:  string):  string; begin Result := S +   &#39; something &#39;; Result := Result +   &#39;  something more! &#39;; Result := Result +   &#39;  and more! &#39;; end;\n You can also treat the function name (like  MyFunction in example above) as the variable, to which you can assign. But I would discourage it in new code, as it looks &#34;fishy&#34; when used on the right side of the assignment expression. Just use  Result always when you want to read or set the function result.\n If you want to call the function itself recursively, you can of course do it. If you\u2019re calling a parameter-less function recursively, be sure to specify the parenthesis  () (even though in Pascal you can usually omit the parentheses for a parameter-less function), this makes a recursive call to a parameter-less function different from accessing this function\u2019s current result. Like this:\n function SumIntegersUntilZero: Integer; var I: Integer; begin Readln(I); Result := I;  if I &lt;&gt;  0  then Result := Result + SumIntegersUntilZero(); end;\n You can call  Exit to end the execution of the procedure or function before it reaches the final  end;. If you call parameter-less  Exit in a function, it will return the last thing you set as  Result. You can also use  Exit(X) construct, to set the function result and exit  now\u2009\u2014\u2009this is just like  return X construct in C-like languages.\n function AddName( const ExistingNames, NewName:  string):  string; begin  if ExistingNames =   &#39; &#39;  then Exit(NewName); Result := ExistingNames +   &#39; ,  &#39; + NewName; end;\n Note that the function result can be discarded. Any function may be used just like a procedure. This makes sense if the function has some  side effect (e.g. it modifies a global variable) besides calculating the result. For example:\n var Count: Integer; MyCount: Integer; function CountMe: Integer; begin Inc(Count); Result := Count; end; begin Count :=  10; CountMe;  // the function result is discarded, but the function is executed, Count is now 11 MyCount := CountMe;  // use the result of the function, MyCount equals to Count which is now 12 end.\n Use  if .. then or  if .. then .. else to run some code when some condition is satisfied. Unlike in the C-like languages, in Pascal you don\u2019t have to wrap the condition in parenthesis.\n var A: Integer; B: boolean; begin  if A &gt;  0  then DoSomething;  if A &gt;  0  then  begin DoSomething; AndDoSomethingMore;  end;  if A &gt;  10  then DoSomething  else DoSomethingElse;  // equivalent to above B := A &gt;  10;  if B  then DoSomething  else DoSomethingElse; end;\n   While the example with nested  if above is correct, it is often better to place the nested  if inside a  begin \u2026\u200b  end block in such cases. This makes the code more obvious to the reader, and it will remain obvious even if you mess up the indentation. The improved version of the example is below. When you add or remove some  else clause in the code below, it\u2019s obvious to which condition it will apply (to the  A test or the  B test), so it\u2019s less error-prone.\n The  logical operators are called  and,  or,  not,  xor. Their meaning is probably obvious (search for  &#34;exclusive or&#34; if you\u2019re unsure what  xor does:)). They take  boolean arguments, and return a  boolean. They can also act as  bit-wise operators when both arguments are integer values, in which case they return an integer.\n The  relational (comparison) operators are  =,  &lt;&gt;,  &gt;,  &lt;,  &lt;=,  &gt;=. If you\u2019re accustomed to C-like languages, note that in Pascal you compare two values (check are they equal) using a single equality character  A = B (unlike in C where you use  A == B). The special  assignment operator in Pascal is  :=.\n The  logical (or bit-wise) operators have a higher precedence than relational operators. You may need to use parenthesis around some expressions to have the desired order of the calculations.\n  var A, B: Integer; begin  if A =  0  and B &lt;&gt;  0  then ...  // INCORRECT example\n The above fails to compile, because the compiler first wants to perform a bit-wise  and in the middle of the expression:  (0 and B). This is a bit-wise operation which returns an integer value. Then the compiler applies  = operator which yields a boolean value  A = (0 and B). And finally the  &#34;type mismatch&#34; error is risen after trying to compare the boolean value  A = (0 and B) and integer value  0.\n     And if  MyFunction(X) returns  false, then the value of expression is known (the value of  false and whatever is always  false), and  MyOtherFunction(Y) will not be executed at all.\n Analogous rule is for  or expression. There, if the expression is known to be  true (because the 1st operand is  true), the 2nd operand is not evaluated.\n This will work OK, even when  A is  nil. The keyword  nil is a pointer equal to zero (when represented as a number). It is called a  null pointer in many other programming languages.\n If a different action should be executed depending on the value of some expression, then the  case .. of .. end statement is useful.\n case SomeValue  of  0: DoSomething;  1: DoSomethingElse;  2:  begin IfItsTwoThenDoThis; AndAlsoDoThis;  end;  3.. 10: DoSomethingInCaseItsInThisRange;  11,  21,  31: AndDoSomethingForTheseSpecialValues;  else DoSomethingInCaseOfUnexpectedValue; end;\n The  else clause is optional (and corresponds to  default in C-like languages). When no condition matches, and there\u2019s no  else, then nothing happens.\n In you come from C-like languages, and compare this with  switch statement in these languages, you will notice that there is no automatic  fall-through. This is a deliberate blessing in Pascal. You don\u2019t have to remember to place  break instructions. In every execution,  at most one branch of the  case is executed, that\u2019s it.\n Enumerated type in Pascal is a very nice, opaque type. You will probably use it much more often than enums in other languages:)\n  The convention is to prefix the enum names with a two-letter shortcut of type name, hence  ak = shortcut for  &#34;Animal Kind&#34;. This is a useful convention, since the enum names are in the unit (global) namespace. So by prefixing them with  ak prefix, you minimize the chances of collisions with other identifiers.\n The collisions in names are not a show-stopper. It\u2019s Ok for different units to define the same identifier. But it\u2019s a good idea to try to avoid the collisions anyway, to keep code simple to understand and grep.\n You can avoid placing enum names in the global namespace by compiler directive  {$scopedenums on}. This means you will have to access them qualified by a type name, like  TAnimalKind.akDuck. The need for  ak prefix disappears in this situation, and you will probably just call the enums  Duck, Cat, Dog. This is similar to C# enums.\n The fact that enumerated type is  opaque means that it cannot be just assigned to and from an integer. However, for special use, you can use  Ord(MyAnimalKind) to forcefully convert enum to int, or typecast  TAnimalKind(MyInteger) to forcefully convert int to enum. In the latter case, make sure to check first whether  MyInteger is in good range (0 to  Ord(High(TAnimalKind))).\n  type TArrayOfTenStrings =  array [ 0.. 9]  of  string; TArrayOfTenStrings1Based =  array [ 1.. 10]  of  string; TMyNumber =  0.. 9; TAlsoArrayOfTenStrings =  array [TMyNumber]  of  string; TAnimalKind = (akDuck, akCat, akDog); TAnimalNames =  array [TAnimalKind]  of  string;\n  type TAnimalKind = (akDuck, akCat, akDog); TAnimals =  set  of TAnimalKind; var A: TAnimals; begin A := []; A := [akDuck, akCat]; A := A + [akDog]; A := A * [akCat, akDog]; Include(A, akDuck); Exclude(A, akDuck); end;\n {$mode objfpc} {$H+} {$J-} {$R+}  // range checking on - nice for debugging var MyArray:  array [ 0.. 9]  of Integer; I: Integer; begin  // initialize  for I :=  0  to  9  do MyArray[I] := I * I;  // show  for I :=  0  to  9  do WriteLn(  &#39; Square is  &#39;, MyArray[I]);  // does the same as above  for I := Low(MyArray)  to High(MyArray)  do WriteLn(  &#39; Square is  &#39;, MyArray[I]);  // does the same as above I :=  0;  while I &lt;  10  do  begin WriteLn(  &#39; Square is  &#39;, MyArray[I]); I := I +  1;  // or &#34;I += 1&#34;, or &#34;Inc(I)&#34;  end;  // does the same as above I :=  0;  repeat WriteLn(  &#39; Square is  &#39;, MyArray[I]); Inc(I);  until I =  10;  // does the same as above  // note: here I enumerates MyArray values, not indexes  for I  in MyArray  do WriteLn(  &#39; Square is  &#39;, I); end.\n   The loop condition has an opposite meaning. In  while .. do you tell it  when to continue, but in  repeat .. until you tell it  when to stop.\n In case of  repeat,  the condition is not checked at the beginning. So the  repeat loop always runs at least once.\n  The  for I := .. to .. do \u2026\u200b construction it similar to the C-like  for loop. However, it\u2019s more constrained, as you cannot specify arbitrary actions/tests to control the loop iteration. This is strictly for iterating over a consecutive numbers (or other ordinal types). The only flexibility you have is that you can use  downto instead of  to, to make numbers go downward.\n In exchange, it looks clean, and is very optimized in execution. In particular,  the expressions for the lower and higher bound are only calculated once, before the loop starts.\n Note that the value of the loop counter variable ( I in this example) should be considered  undefined after the loop has finished, due to possible optimizations. Accessing the value of  I after the loop may cause a compiler warning.  Unless you exit the loop prematurely by  Break or  Exit: in such case, the counter variable is guaranteed to retain the last value.\n  The  for I in .. do .. is similar to  foreach construct in many modern languages. It works intelligently on many built-in types:\n var Animals: TAnimals; AK: TAnimalKind; begin Animals := [akDog, akCat];  for AK  in Animals  do ...\n {$mode objfpc} {$H+} {$J-} uses SysUtils, FGL; type TMyClass =  class I, Square: Integer;  end; TMyClassList = specialize TFPGObjectList&lt;TMyClass&gt;; var List: TMyClassList; C: TMyClass; I: Integer; begin List := TMyClassList.Create(true);  // true = owns children  try  for I :=  0  to  9  do  begin C := TMyClass.Create; C.I := I; C.Square := I * I; List.Add(C);  end;  for C  in List  do WriteLn(  &#39; Square of  &#39;, C.I,   &#39;  is  &#39;, C.Square);  finally FreeAndNil(List);  end; end.\n We didn\u2019t yet explain the concept of classes, so the last example may not be obvious to you yet\u2009\u2014\u2009just carry on, it will make sense later:)\n To simply output strings in Pascal, use the  Write or  WriteLn routine. The latter automatically adds a newline at the end.\n This is a &#34;magic&#34; routine in Pascal. It takes a variable number of arguments and they can have any type. They are all converted to strings when displaying, with a special syntax to specify padding and number precision.\n WriteLn(  &#39; Hello world! &#39;);WriteLn(  &#39; You can output an integer:  &#39;,  3 *  4);WriteLn(  &#39; You can pad an integer:  &#39;,  666: 10);WriteLn(  &#39; You can output a float:  &#39;, Pi: 1: 4);\n To explicitly use newline in the string, use the  LineEnding constant (from FPC RTL). (The  Castle Game Engine defines also a shorter  NL constant.) Pascal strings do not interpret any special backslash sequences, so writing\n      Note that this will only work in  console applications. Make sure you have  {$apptype CONSOLE} (and  not  {$apptype GUI}) defined in your main program file. On some operating systems it actually doesn\u2019t matter and will work always (Unix), but on some operating systems trying to write something from a GUI application is an error (Windows).\n In the Castle Game Engine: use  WriteLnLog or  WriteLnWarning, never  WriteLn, to print debug information. They will be always directed to some useful output. On Unix, standard output. On Windows GUI application, log file. On Android, the  Android logging facility (visible when you use  adb logcat). The use of  WriteLn should be limited to the cases when you write a command-line application (like a 3D model converter / generator) and you know that the  standard output is available.\n To convert an arbitrary number of arguments to a string (instead of just directly outputting them), you have a couple of options.\n You can convert particular types to strings using specialized functions like  IntToStr and  FloatToStr. Furthermore, you can concatenate strings in Pascal simply by adding them. So you can create a string like this:  &#39;My int number is &#39; + IntToStr(MyInt) + &#39;, and the value of Pi is &#39; + FloatToStr(Pi).\n Advantage: Absolutely flexible. There are many  XxxToStr overloaded versions and friends (like  FormatFloat), covering many types. Most of them are in the  SysUtils unit.\n Another advantage: Consistent with the reverse functions. To convert a string (for example, user input) back to an integer or float, you use  StrToInt,  StrToFloat and friends (like  StrToIntDef).\n Disadvantage: A long concatenation of many  XxxToStr calls and strings doesn\u2019t look nice.\n The  Format function, used like  Format(&#39;%d %f %s&#39;, [MyInt, MyFloat, MyString]). This is like  sprintf function in the C-like languages. It inserts the arguments into the placeholders in the pattern. The placeholders may use special syntax to influence formatting, e.g.  %.4f results in a floating-point format with 4 digits after the decimal point.\n Advantage: The separation of  pattern string from  arguments looks clean. If you need to change the pattern string without touching the arguments (e.g. when translating), you can do it easily.\n Another advantage: No compiler magic. You can use the same syntax to pass any number of arguments of an arbitrary type in your own routines (declare parameter as an  array of const). You can then pass these arguments downward to  Format, or deconstruct the list of parameters and do anything you like with them.\n Disadvantage: Compiler does not check whether the pattern matches the arguments. Using a wrong placeholder type will result in an exception at runtime ( EConvertError exception, not anything nasty like a segmentation fault).\n WriteStr(TargetString, \u2026\u200b) routine behaves much like  Write(\u2026\u200b), except that the result is saved to the  TargetString.\n Advantage: It supports all the features of  Write, including the special syntax for formatting like  Pi:1:4.\n Disadvantage: The special syntax for formatting is a &#34;compiler magic&#34;, implemented specifically for routines like this. This is sometimes troublesome, e.g. you cannot create your own routine  MyStringFormatter(\u2026\u200b) that would also allow the special syntax like  Pi:1:4. For this reason (and also because it wasn\u2019t implemented for a long time in major Pascal compilers), this construction is not very popular.\n Units allow you to group common stuff (anything that can be declared), for usage by other units and programs. They are equivalent to  modules and  packages in other languages. They have an interface section, where you declare what is available for other units and programs, and then the implementation. Save unit  MyUnit as  myunit.pas (lowercase with  .pas extension).\n {$mode objfpc} {$H+} {$J-} unit MyUnit; interface procedure MyProcedure( const A: Integer); function MyFunction( const S:  string):  string; implementation procedure MyProcedure( const A: Integer); begin WriteLn(  &#39; A + 10 is:  &#39;, A +  10); end; function MyFunction( const S:  string):  string; begin Result := S +   &#39; strings are automatically managed &#39;; end; end.\n Final programs are saved as  myprogram.lpr files ( lpr = Lazarus program file; in Delphi you would use  .dpr). Note that other conventions are possible here, e.g. some projects just use  .pas for main program file, some use  .pp for units or programs. I advise using  .pas for units and  .lpr for FPC/Lazarus programs.\n   A unit may also contain  initialization and  finalization sections. This is the code executed when the program starts and ends.\n  One unit can also use another unit. Another unit can be used in the interface section, or only in the implementation section. The former allows to define new public stuff (procedures, types\u2026\u200b) on top of another unit\u2019s stuff. The latter is more limited (if you use a unit only in the implementation section, you can use its identifiers only in your implementation).\n {$mode objfpc} {$H+} {$J-} unit AnotherUnit; interface uses Classes; { The &#34;TComponent&#34; type (class) is defined in the Classes un\n......", "posttime": "2021-08-06 09:52:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u7a0b\u5e8f\u5458,object", "title": "\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u73b0\u4ee3 Object Pascal \u7b80\u4ecb", "title_en": "Modern Object Pascal Introduction for Programmers", "transed": 1, "url": "https://castle-engine.io/modern_pascal_introduction.html", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u7a0b\u5e8f\u5458", "object"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071691, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60a8\u53ef\u4ee5\u4ece RDS for PostgreSQL \u6570\u636e\u5e93\u5b9e\u4f8b\u8c03\u7528 AWS Lambda \u51fd\u6570\u3002\u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528 RDS for PostgreSQL \u968f\u9644\u7684 aws_lambda PostgreSQL \u6269\u5c55\u3002 AWS Lambda \u662f\u4e00\u79cd\u53ef\u7528\u4e8e\u8fd0\u884c\u4ee3\u7801\u7684\u8ba1\u7b97\u670d\u52a1\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Lambda \u51fd\u6570\u6765\u5904\u7406\u6765\u81ea\u6570\u636e\u5e93\u5b9e\u4f8b\u7684\u4e8b\u4ef6\u901a\u77e5\u3002\u6709\u5173 Lambda \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4ec0\u4e48\u662f AWS Lambda\uff1f\u5728 AWS Lambda \u5f00\u53d1\u4eba\u5458\u6307\u5357\u4e2d\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8fc7\u7a0b\u4ece RDS for PostgreSQL \u6570\u636e\u5e93\u8c03\u7528 Lambda \u51fd\u6570\u3002\u5b89\u88c5\u6240\u9700\u7684 PostgreSQL \u6269\u5c55\u3002\u5176\u4e2d\u5305\u62ec aws_lambda \u548c aws_commons \u6269\u5c55\u3002\u4e3a\u6b64\uff0c\u8bf7\u542f\u52a8 psql \u5e76\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002 aws_lambda \u6269\u5c55\u63d0\u4f9b\u4e86\u7528\u4e8e\u5728 Lambda \u4e2d\u8c03\u7528\u51fd\u6570\u7684 aws_lambda.invoke \u51fd\u6570\u3002\u5305\u542b aws_commons \u6269\u5c55\u4ee5\u63d0\u4f9b\u989d\u5916\u7684\u8f85\u52a9\u51fd\u6570\u3002\u786e\u5b9a\u8981\u4f7f\u7528\u7684 Lambda \u51fd\u6570\u7684\u540d\u79f0\u6216 Amazon \u8d44\u6e90\u540d\u79f0 (ARN)\u3002\u6709\u5173\u6b64\u8fc7\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6307\u5b9a\u8981\u4f7f\u7528\u7684 Lambda \u51fd\u6570\u3002\u8981\u8c03\u7528 Lambda \u51fd\u6570\uff0c\u8bf7\u6388\u4e88 RDS for PostgreSQL \u6570\u636e\u5e93\u5b9e\u4f8b\u8bbf\u95ee Lambda \u8c03\u7528 API \u64cd\u4f5c\u7684\u6743\u9650\u3002\u8fd9\u6837\u505a\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a\n\u521b\u5efa AWS Identity and Access Management (IAM) \u7b56\u7565\uff0c\u4ee5\u63d0\u4f9b\u5bf9\u60a8\u8981\u8c03\u7528\u7684 Lambda \u51fd\u6570\u7684\u8bbf\u95ee\u6743\u9650\u3002\u4f7f\u7528 aws_lambda.invoke \u51fd\u6570\u8fd0\u884c Lambda \u51fd\u6570\u3002\u6709\u5173\u6b64\u8fc7\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8c03\u7528 Lambda \u51fd\u6570\u3002\u51fd\u6570\u540d\u79f0 \u2013 Lambda \u51fd\u6570\u7684\u540d\u79f0\u3001ARN\u3001\u7248\u672c\u6216\u522b\u540d\u3002\u6709\u5173\u53ef\u80fd\u683c\u5f0f\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u9605 Lambda \u51fd\u6570\u540d\u79f0\u683c\u5f0f\u3002 AWS \u533a\u57df \u2013\uff08\u53ef\u9009\uff09Lambda \u51fd\u6570\u6240\u5728\u7684 AWS \u533a\u57df\u3002\u5982\u679c\u60a8\u672a\u6307\u5b9a Region \u503c\u4e14\u672a\u5728\u51fd\u6570 ARN \u4e2d\u6307\u5b9a\uff0c\u5219 RDS \u4f7f\u7528\u4e0e\u6570\u636e\u5e93\u5b9e\u4f8b\u76f8\u540c\u7684 Region\u3002\u6709\u5173 AWS \u533a\u57df\u540d\u79f0\u548c\u5173\u8054\u503c\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u9605\u533a\u57df\u3001\u53ef\u7528\u533a\u548c\u672c\u5730\u533a\u57df\u3002\u8981\u4fdd\u5b58 Lambda \u51fd\u6570\u540d\u79f0\u4fe1\u606f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 aws_commons.create_lambda_function_arn \u51fd\u6570\u3002\u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2a aws_commons._lambda_function_arn_1 \u590d\u5408\u7ed3\u6784\u6765\u5b58\u50a8\u540d\u79f0\u4fe1\u606f\uff0c\u5982\u4e0b\u6240\u793a\u3002 psql=&gt; SELECT aws_commons.create_lambda_function_arn(&#39;my-function&#39;, &#39;us-west-2&#39;) AS aws_lambda_arn_1 \\gsetpsql=&gt; SELECT aws_commons.create_lambda_function_arn(&#39;123456789012:function:my-function&#39;- ) AS lambda_partial_arn_1 \\gsetpsql=&gt; SELECT aws_commons.create_lambda_function_arn(&#39;arn:aws:lambda:us-west-2:123456789012:function:my-function&#39;) AS lambda_arn_1 \\gset\n\u60a8\u53ef\u4ee5\u7a0d\u540e\u5728\u8c03\u7528 aws_lambda.invoke \u51fd\u6570\u65f6\u63d0\u4f9b\u8fd9\u4e9b\u503c\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4f5c\u4e3a\u53c2\u6570\u3002\u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u8c03\u7528 Lambda \u51fd\u6570\u3002\u8981\u4f7f\u7528 Lambda \u51fd\u6570\uff0c\u8bf7\u6388\u4e88\u60a8\u7684 PostgreSQL \u6570\u636e\u5e93\u5b9e\u4f8b\u8bbf\u95ee Lambda \u7684\u6743\u9650\u3002\u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u8fc7\u7a0b\u3002\u6b64\u7b56\u7565\u63d0\u4f9b\u5141\u8bb8\u60a8\u7684 PostgreSQL \u6570\u636e\u5e93\u5b9e\u4f8b\u8c03\u7528 Lambda \u51fd\u6570\u7684\u6743\u9650\u3002\u5728\u7b56\u7565\u4e2d\u5305\u542b\u6240\u9700\u7684\u64cd\u4f5c lambda:InvokeFunction \u4ee5\u5141\u8bb8\u4ece RDS for PostgreSQL \u6570\u636e\u5e93\u5b9e\u4f8b\u8c03\u7528 Lambda\u3002\u5305\u62ec\u6807\u8bc6 Lambda \u51fd\u6570\u7684 Amazon \u8d44\u6e90\u540d\u79f0 (ARN)\u3002\u8bbf\u95ee Lambda \u7684 ARN \u683c\u5f0f\u4e3a\uff1aarn:aws:lambda::function:example_function/* \u6709\u5173\u4e3a RDS for PostgreSQL \u521b\u5efa IAM \u7b56\u7565\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e3a IAM \u6570\u636e\u5e93\u8bbf\u95ee\u521b\u5efa\u548c\u4f7f\u7528 IAM \u7b56\u7565\u3002\u53e6\u8bf7\u53c2\u9605 IAM \u7528\u6237\u6307\u5357\u4e2d\u7684 IAM \u6559\u7a0b\uff1a\u521b\u5efa\u5e76\u9644\u52a0\u60a8\u7684\u7b2c\u4e00\u4e2a\u5ba2\u6237\u6258\u7ba1\u7b56\u7565\u3002\u4ee5\u4e0b AWS CLI \u547d\u4ee4\u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\u521b\u5efa\u540d\u4e3a rds-lambda-policy \u7684 IAM \u7b56\u7565\u3002\u5b83\u6388\u4e88\u5bf9\u540d\u4e3a example_function \u7684\u51fd\u6570\u7684\u8bbf\u95ee\u6743\u9650\u3002\naws iam create-policy --policy-name rds-lambda-policy --policy-document &#39; { &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Sid&quot;: &quot;AllowAccessToExampleFunction&quot;, &quot;Effect &quot;: &quot;Allow&quot;, &quot;Action&quot;: &quot;lambda:InvokeFunction&quot;, &quot;Resource&quot;: &quot;arn:aws:lambda:&lt;region&gt;:&lt;123456789012&gt;:function:example_function&quot; } ]}&#39; \u521b\u5efa\u7b56\u7565\u540e\uff0c\u8bf7\u6ce8\u610f\u7b56\u7565\u7684 ARN\u3002\u5c06\u7b56\u7565\u9644\u52a0\u5230 IAM \u89d2\u8272\u65f6\uff0c\u60a8\u9700\u8981 ARN \u7528\u4e8e\u540e\u7eed\u6b65\u9aa4\u3002\u60a8\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u8ba9 RDS for PostgreSQL \u53ef\u4ee5\u4ee3\u8868\u60a8\u4ee3\u5165\u6b64 IAM \u89d2\u8272\u4ee5\u8bbf\u95ee\u60a8\u7684 Lambda \u51fd\u6570\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 IAM \u7528\u6237\u6307\u5357\u4e2d\u7684\u521b\u5efa\u89d2\u8272\u4ee5\u5c06\u6743\u9650\u59d4\u6d3e\u7ed9 IAM \u7528\u6237\u3002\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4f7f\u7528 AWS CLI \u547d\u4ee4\u521b\u5efa\u540d\u4e3a rds-lambda-role \u7684\u89d2\u8272\u3002 aws iam create-role --role-name rds-lambda-role --assume-role-policy-document &#39; { &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Effect&quot;: &quot;Allow &quot;, &quot;Principal&quot;: { &quot;Service&quot;: &quot;rds.amazonaws.com&quot; }, &quot;Action&quot;: &quot;sts:AssumeRole&quot; } ] }&#39; \u4ee5\u4e0b AWS CLI \u547d\u4ee4\u5c06\u4e4b\u524d\u521b\u5efa\u7684\u7b56\u7565\u9644\u52a0\u5230\u540d\u4e3a rds-lambda \u7684\u89d2\u8272-\u89d2\u8272\u3002\u5c06 your-policy-arn \u66ff\u6362\u4e3a\u60a8\u5728\u524d\u9762\u6b65\u9aa4\u4e2d\u8bb0\u4e0b\u7684\u7b56\u7565 ARN\u3002\u5c06 IAM \u89d2\u8272\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u5b9e\u4f8b\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 AWS CLI \u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5982\u4e0b\u6240\u8ff0\u3002\n\u4f7f\u7528\u4ee5\u4e0b CLI \u547d\u4ee4\u5c06 IAM \u89d2\u8272\u6dfb\u52a0\u5230\u540d\u4e3a my-db-instance \u7684 RDS for PostgreSQL \u6570\u636e\u5e93\u5b9e\u4f8b\u3002\u5c06 your-role-arn \u66ff\u6362\u4e3a\u60a8\u5728\u4e0a\u4e00\u6b65\u4e2d\u8bb0\u4e0b\u7684\u89d2\u8272 ARN\u3002\u4f7f\u7528 Lambda \u4f5c\u4e3a --feature-name \u9009\u9879\u7684\u503c\uff0c\u5982\u4e0b\u6240\u793a\u3002\u4e0b\u9762\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u8c03\u7528 aws_lambda.invoke \u51fd\u6570\u7684\u793a\u4f8b\u3002\u5728\u4f7f\u7528 aws_lambda.invoke \u51fd\u6570\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5b8c\u6210\u4ee5\u4e0b\u5148\u51b3\u6761\u4ef6\uff1a \u5982\u6307\u5b9a\u8981\u4f7f\u7528\u7684 Lambda \u51fd\u6570\u4e2d\u6240\u8ff0\u786e\u5b9a\u8981\u8c03\u7528\u7684 Lambda \u51fd\u6570\u3002\u786e\u4fdd\u6570\u636e\u5e93\u5b9e\u4f8b\u5177\u6709\u5bf9 Lambda \u7684\u8c03\u7528\u8bbf\u95ee\u6743\u9650\uff0c\u5982\u6388\u4e88 RDS \u5bf9 Lambda \u7684\u8bbf\u95ee\u6743\u9650\u4e2d\u6240\u8ff0\u3002\u60a8\u53ef\u4ee5\u540c\u6b65\u6216\u5f02\u6b65\u8c03\u7528 Lambda \u51fd\u6570\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 aws_lambda.invoke \u51fd\u6570\u7684 invocation_type \u53c2\u6570\u7684\u4ee5\u4e0b\u503c\u63a7\u5236\u6b64\u64cd\u4f5c\uff1a Lambda \u51fd\u6570\u7684 RequestResponse \u8c03\u7528\u7c7b\u578b\u662f\u540c\u6b65\u7684\uff0c\u5e76\u5728 aws_lambda.invoke \u51fd\u6570\u7684\u7ed3\u679c\u4e2d\u8fd4\u56de\u54cd\u5e94\u8d1f\u8f7d\u3002\u5f53\u60a8\u7684\u5de5\u4f5c\u6d41\u4f9d\u8d56\u4e8e\u7acb\u5373\u63a5\u6536 Lambda \u51fd\u6570\u7ed3\u679c\u65f6\uff0c\u8bf7\u4f7f\u7528 RequestResponse \u8c03\u7528\u7c7b\u578b\u3002\u4ee5\u4e0b\u5927\u591a\u6570\u793a\u4f8b\u4f7f\u7528\u540c\u6b65\u8c03\u7528\u3002 Lambda \u51fd\u6570\u7684\u4e8b\u4ef6\u8c03\u7528\u7c7b\u578b\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u7acb\u5373\u8fd4\u56de\u800c\u4e0d\u8fd4\u56de\u8d1f\u8f7d\u3002\u5f53\u60a8\u5728\u5de5\u4f5c\u6d41\u7a0b\u7ee7\u7eed\u4e4b\u524d\u4e0d\u9700\u8981\u77e5\u9053 Lambda \u51fd\u6570\u7684\u7ed3\u679c\u65f6\uff0c\u8bf7\u4f7f\u7528\u4e8b\u4ef6\u7c7b\u578b\u7684\u8c03\u7528\u3002\u6709\u5173\u5f02\u6b65\u8c03\u7528\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605 Lambda \u51fd\u6570\u7684\u5f02\u6b65\u4e8b\u4ef6\u8c03\u7528\u3002\n\u4ee5\u4e0b aws_lambda.invoke \u793a\u4f8b\u4f7f\u7528 aws_lambda_arn_1 \u7ed3\u6784\uff0c\u5176\u4e2d\u5305\u542b Lambda \u51fd\u6570\u7684\u8bc6\u522b\u4fe1\u606f\u3002\u8981\u521b\u5efa\u7ed3\u6784\uff0c\u8bf7\u4f7f\u7528 aws_commons.create_lambda_function_arn \u51fd\u6570\u3002\u6709\u5173\u4f7f\u7528 aws_commons.create_lambda_function_arn \u51fd\u6570\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u6307\u5b9a\u8981\u4f7f\u7528\u7684 Lambda \u51fd\u6570\u3002\u4ee5\u4e0b\u662f\u540c\u6b65 Lambda \u51fd\u6570\u8c03\u7528\u7684\u793a\u4f8b\u3002\u4e0b\u9762\u4e24\u4e2a aws_lambda.invoke \u51fd\u6570\u8c03\u7528\u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002 psql=&gt; SELECT * FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&quot;body&quot;: &quot;Hello from Postgres!&quot;}&#39;::json);psql=&gt; SELECT * FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&quot;body&quot;: &quot;\u6765\u81ea Postgres \u7684\u4f60\u597d\uff01&quot;}&#39;::json, &#39;RequestResponse&#39;); :&#39;aws_lambda_arn_1&#39; \u2013 \u6b64\u53c2\u6570\u662f\u6807\u8bc6\u8981\u8c03\u7528\u7684 Lambda \u51fd\u6570\u7684\u7ed3\u6784\u3002\u6b64\u793a\u4f8b\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u6765\u6807\u8bc6\u5148\u524d\u521b\u5efa\u7684\u7ed3\u6784\u3002\u60a8\u53ef\u4ee5\u6539\u4e3a\u901a\u8fc7\u5728 aws_lambda.invoke \u51fd\u6570\u8c03\u7528\u4e2d\u5305\u542b aws_commons.create_lambda_function_arn \u51fd\u6570\u8c03\u7528\u5185\u8054\u6765\u521b\u5efa\u7ed3\u6784\uff0c\u5982\u4e0b\u6240\u793a\u3002\u4ee5\u4e0b\u662f\u5f02\u6b65 Lambda \u51fd\u6570\u8c03\u7528\u7684\u793a\u4f8b\u3002\u4e8b\u4ef6\u8c03\u7528\u7c7b\u578b\u4f7f\u7528\u6307\u5b9a\u7684\u8f93\u5165\u8d1f\u8f7d\u5b89\u6392 Lambda \u51fd\u6570\u8c03\u7528\u5e76\u7acb\u5373\u8fd4\u56de\u3002\u5728\u4e0d\u4f9d\u8d56\u4e8e Lambda \u51fd\u6570\u7ed3\u679c\u7684\u67d0\u4e9b\u5de5\u4f5c\u6d41\u4e2d\u4f7f\u7528\u4e8b\u4ef6\u8c03\u7528\u7c7b\u578b\u3002\u60a8\u53ef\u4ee5\u8bf7\u6c42\u5728\u51fd\u6570\u54cd\u5e94\u4e2d\u5305\u542b\u6267\u884c\u65e5\u5fd7\u7684\u6700\u540e 4 KB\uff0c\u5982\u4e0b\u6240\u793a\u3002 psql=&gt; SELECT *, select convert_from(decode(log_result, &#39;base64&#39;), &#39;utf-8&#39;) \u4f5c\u4e3a\u65e5\u5fd7 FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&quot;body&quot;: &quot;Hello from Postgres!&quot;}&#39; ::json, &#39;RequestResponse&#39;, &#39;Tail&#39;);\n\u5c06 aws_lambda.invoke \u51fd\u6570\u7684 log_type \u53c2\u6570\u8bbe\u7f6e\u4e3a Tail \u4ee5\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u6267\u884c\u65e5\u5fd7\u3002 log_type \u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u4e3a None\u3002\u8fd4\u56de\u7684 log_result \u662f\u4e00\u4e2a base64 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 decode \u548c convert_from PostgreSQL \u51fd\u6570\u7684\u7ec4\u5408\u6765\u89e3\u7801\u5185\u5bb9\u3002\u60a8\u53ef\u4ee5\u4f20\u5165\u4e0e\u6709\u6548\u8d1f\u8f7d\u5206\u5f00\u7684\u5ba2\u6237\u7aef\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5982\u4e0b\u6240\u793a\u3002 psql=&gt; SELECT *, convert_from(decode(log_result, &#39;base64&#39;), &#39;utf-8&#39;) as log FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&quot;body&quot;: &quot;Hello from Postgres!&quot;}&#39;: :json, &#39;RequestResponse&#39;, &#39;Tail&#39;);\u6709\u5173\u8c03\u7528\u7279\u5b9a\u7248\u672c\u7684 Lambda \u51fd\u6570\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u4ee5\u4e0b\u5185\u5bb9\u3002\u8981\u8bc6\u522b Lambda \u51fd\u6570\u7684\u7248\u672c\uff0c\u8bf7\u4f7f\u7528 aws_lambda.invoke \u51fd\u6570\u7684\u9650\u5b9a\u7b26\u53c2\u6570\u3002\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u201ccustom_version\u201d\u662f\u6807\u8bc6\u8981\u8c03\u7528\u7684\u51fd\u6570\u7248\u672c\u7684\u522b\u540d\u6216\u7248\u672c\u3002\u60a8\u53ef\u4ee5\u6539\u4e3a\u63d0\u4f9b\u5e26\u6709\u51fd\u6570\u540d\u79f0\u4fe1\u606f\u7684 Lambda \u51fd\u6570\u9650\u5b9a\u7b26\uff0c\u5982\u4e0b\u6240\u793a\u3002\n\u5982\u679c Lambda \u51fd\u6570\u5728\u8bf7\u6c42\u5904\u7406\u671f\u95f4\u629b\u51fa\u5f02\u5e38\uff0c\u5219 aws_lambda.invoke \u5c06\u5931\u8d25\u5e76\u663e\u793a PostgreSQL \u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\u3002 psql=&gt; SELECT * FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&quot;body&quot;: &quot;Hello from Postgres!&quot;}&#39;::json);ERROR: lambda invocation failedDETAIL: &quot;arn:aws:lambda:us-west -2:123456789012:function:my-function&quot; \u8fd4\u56de\u9519\u8bef\u201c\u672a\u5904\u7406\u201d\uff0c\u8be6\u7ec6\u4fe1\u606f\uff1a\u201c&lt;\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u5b57\u7b26\u4e32&gt;\u201d\u3002\u4ee5\u4e0b\u662f\u7528\u4e8e\u4f7f\u7528 RDS for PostgreSQL \u8c03\u7528 Lambda \u51fd\u6570\u7684\u51fd\u6570\u7684\u53c2\u8003\u3002\u6709\u5173\u8c03\u7528 Lambda \u51fd\u6570\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u53e6\u8bf7\u53c2\u9605 AWS Lambda \u5f00\u53d1\u4eba\u5458\u6307\u5357\u4e2d\u7684\u8c03\u7528\u3002 aws_lambda.invoke(IN function_name TEXT,IN payload JSON,IN region TEXT DEFAULT NULL,IN invocation_type TEXT DEFAULT &#39;RequestResponse&#39;,IN log_type TEXT DEFAULT &#39;None&#39;,IN context JSON DEFAULT NULL,IN qualifier VARCHAR(128) DEFAULT NULL,OUT status_code INT,OUT \u6709\u6548\u8f7d\u8377 JSON,OUT \u6267\u884c\u7684_\u7248\u672c\u6587\u672c,OUT log_result TEXT) aws_lambda.invoke(IN function_name aws_commons._lambda_function_arn_1,IN \u6709\u6548\u8f7d\u8377 JSON,IN invocation_type TEXT DEFAULT &#39;RequestResponse&#39;,IN log_type TEXT DEFAULT NULL \u4e0a\u4e0b\u6587 &#39;None&#39;,FAULIN ,IN qualifier VARCHAR(128) DEFAULT NULL,OUT status_code INT,OUT payload JSON,OUT execution_version TEXT,OUT log_result TEXT) aws_lambda.invoke(IN function_name TEXT,IN payload JSONB,IN region TEXT DEFAULT NULL,IN invocation_type TEXT DEFAULT &#39;RequestResponse &#39;,IN log_type TEXT DEFAULT &#39;None&#39;,IN context JSONB DEFAULT NULL,IN qualifier VARCHAR(128) DEFAULT NULL,OUT status_code INT,OUT payload JSONB,OUT execution_version TEXT,OUT log_result TEXT)\naws_lambda.invoke(IN function_name aws_commons._lambda_function_arn_1,IN \u6709\u6548\u8f7d\u8377 JSONB,IN invocation_type TEXT DEFAULT &#39;RequestResponse&#39;,IN log_type TEXT DEFAULT &#39;None&#39;,IN \u4e0a\u4e0b\u6587 JSONB DEFAULT NULL,IN \u9650\u5b9a\u7b26 VARCHAR(128, DEFAULT \u72b6\u6001)\u6709\u6548\u8d1f\u8f7d JSONB,OUT \u6267\u884c\u7248\u672c TEXT,OUT log_result TEXT) Lambda \u51fd\u6570\u7684\u6807\u8bc6\u540d\u79f0\u3002\u8be5\u503c\u53ef\u4ee5\u662f\u51fd\u6570\u540d\u79f0\u3001ARN \u6216\u90e8\u5206 ARN\u3002\u6709\u5173\u53ef\u80fd\u683c\u5f0f\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u9605 AWS Lambda \u5f00\u53d1\u4eba\u5458\u6307\u5357\u4e2d\u7684 Lambda \u51fd\u6570\u540d\u79f0\u683c\u5f0f\u3002 Lambda \u51fd\u6570\u7684\u8f93\u5165\u3002\u683c\u5f0f\u53ef\u4ee5\u662f JSON \u6216 JSONB\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 PostgreSQL \u6587\u6863\u4e2d\u7684 JSON \u7c7b\u578b\u3002 \uff08\u53ef\u9009\uff09\u51fd\u6570\u7684 Lambda \u533a\u57df\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cRDS \u4ece function_name \u4e2d\u7684\u5b8c\u6574 ARN \u89e3\u6790 AWS \u533a\u57df\uff0c\u6216\u8005\u5b83\u4f7f\u7528 RDS for PostgreSQL \u6570\u636e\u5e93\u5b9e\u4f8b\u533a\u57df\u3002\u5982\u679c\u6b64 Region \u503c\u4e0e function_name ARN \u4e2d\u63d0\u4f9b\u7684\u503c\u51b2\u7a81\uff0c\u5219\u4f1a\u5f15\u53d1\u9519\u8bef\u3002 Lambda \u51fd\u6570\u7684\u8c03\u7528\u7c7b\u578b\u3002\u8be5\u503c\u533a\u5206\u5927\u5c0f\u5199\u3002\u53ef\u80fd\u7684\u503c\u5305\u62ec\uff1a RequestResponse \u2013 \u9ed8\u8ba4\u503c\u3002\u8fd9\u79cd\u7c7b\u578b\u7684 Lambda \u51fd\u6570\u8c03\u7528\u662f\u540c\u6b65\u7684\uff0c\u5e76\u5728\u7ed3\u679c\u4e2d\u8fd4\u56de\u54cd\u5e94\u8d1f\u8f7d\u3002\u5f53\u60a8\u7684\u5de5\u4f5c\u6d41\u4f9d\u8d56\u4e8e\u7acb\u5373\u63a5\u6536 Lambda \u51fd\u6570\u7ed3\u679c\u65f6\uff0c\u8bf7\u4f7f\u7528 RequestResponse \u8c03\u7528\u7c7b\u578b\u3002\u4e8b\u4ef6 \u2013 \u5bf9 Lambda \u51fd\u6570\u7684\u8fd9\u79cd\u7c7b\u578b\u7684\u8c03\u7528\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u4e14\u5728\u6ca1\u6709\u8fd4\u56de\u8d1f\u8f7d\u7684\u60c5\u51b5\u4e0b\u7acb\u5373\u8fd4\u56de\u3002\u5982\u679c\u60a8\u5728\u5de5\u4f5c\u6d41\u7a0b\u7ee7\u7eed\u4e4b\u524d\u4e0d\u9700\u8981 Lambda \u51fd\u6570\u7684\u7ed3\u679c\uff0c\u8bf7\u4f7f\u7528\u4e8b\u4ef6\u8c03\u7528\u7c7b\u578b\u3002\n\u8981\u5728 log_result \u8f93\u51fa\u53c2\u6570\u4e2d\u8fd4\u56de\u7684 Lambda \u65e5\u5fd7\u7684\u7c7b\u578b\u3002\u8be5\u503c\u533a\u5206\u5927\u5c0f\u5199\u3002\u53ef\u80fd\u7684\u503c\u5305\u62ec\u4ee5\u4e0b\u5185\u5bb9\uff1a Tail \u2013 \u8fd4\u56de\u7684 log_result \u8f93\u51fa\u53c2\u6570\u5c06\u5305\u62ec\u6267\u884c\u65e5\u5fd7\u7684\u6700\u540e 4 KB\u3002 JSON \u6216 JSONB \u683c\u5f0f\u7684\u5ba2\u6237\u7aef\u4e0a\u4e0b\u6587\u3002\u8981\u4f7f\u7528\u7684\u5b57\u6bb5\u5305\u62ec custom \u548c env\u3002\u6807\u8bc6\u8981\u8c03\u7528\u7684 Lambda \u51fd\u6570\u7248\u672c\u7684\u9650\u5b9a\u7b26\u3002\u5982\u679c\u6b64\u503c\u4e0e function_name ARN \u4e2d\u63d0\u4f9b\u7684\u503c\u51b2\u7a81\uff0c\u5219\u4f1a\u5f15\u53d1\u9519\u8bef\u3002 HTTP \u72b6\u6001\u54cd\u5e94\u4ee3\u7801\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 AWS Lambda \u5f00\u53d1\u4eba\u5458\u6307\u5357\u4e2d\u7684 Lambda \u8c03\u7528\u54cd\u5e94\u5143\u7d20\u3002\u4ece\u8fd0\u884c\u7684 Lambda \u51fd\u6570\u8fd4\u56de\u7684\u4fe1\u606f\u3002\u683c\u5f0f\u4e3a JSON \u6216 JSONB\u3002\u8c03\u7528Lambda\u51fd\u6570\u65f6log_type\u503c\u4e3aTail\u65f6\u8fd4\u56de\u7684\u6267\u884c\u65e5\u5fd7\u4fe1\u606f\u3002\u7ed3\u679c\u5305\u542b\u4ee5 Base64 \u7f16\u7801\u7684\u6267\u884c\u65e5\u5fd7\u7684\u6700\u540e 4 KB\u3002\n\u521b\u5efa aws_commons._lambda_function_arn_1 \u7ed3\u6784\u4ee5\u4fdd\u5b58 Lambda \u51fd\u6570\u540d\u79f0\u4fe1\u606f\u3002\u60a8\u53ef\u4ee5\u5728 aws_lambda.invoke aws_lambda.invoke \u51fd\u6570\u7684 function_name \u53c2\u6570\u4e2d\u4f7f\u7528 aws_commons.create_lambda_function_arn \u51fd\u6570\u7684\u7ed3\u679c\u3002\u5305\u542b Lambda \u51fd\u6570\u540d\u79f0\u7684\u5fc5\u9700\u6587\u672c\u5b57\u7b26\u4e32\u3002\u8be5\u503c\u53ef\u4ee5\u662f\u51fd\u6570\u540d\u79f0\u3001\u90e8\u5206 ARN \u6216\u5b8c\u6574 ARN\u3002\u5305\u542b Lambda \u51fd\u6570\u6240\u5728 AWS \u533a\u57df\u7684\u53ef\u9009\u6587\u672c\u5b57\u7b26\u4e32\u3002\u6709\u5173\u533a\u57df\u540d\u79f0\u548c\u5173\u8054\u503c\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u9605\u533a\u57df\u3001\u53ef\u7528\u533a\u548c\u672c\u5730\u533a\u57df\u3002", "note_en": "You can invoke AWS Lambda functions from an  RDS for PostgreSQL DB instance. To do this, use the  aws_lambda PostgreSQL extension provided with  RDS for PostgreSQL.\n  AWS Lambda is a compute service that you can use to run code. For example, you can use Lambda functions to process event notifications from a DB instance. For more information about Lambda, see  What is AWS Lambda? in the  AWS Lambda Developer Guide.\n        You can invoke a Lambda function from an  RDS for PostgreSQL database with the following procedure.\n  Install the required PostgreSQL extensions. These include the  aws_lambda and  aws_commons extensions. To do so, start psql and run the following commands.\n    The  aws_lambda extension provides the  aws_lambda.invoke function that you use to invoke functions in Lambda. The  aws_commons extension is included to provide additional helper functions.\n  Identify the name or Amazon Resource Name (ARN) for the Lambda function to use. For details about this process, see  Specifying the Lambda function to use.\n  To invoke a Lambda function, give the  RDS for PostgreSQL DB instance permission to access the Lambda invoke API operation. Doing this includes the following steps:\n  Create an AWS Identity and Access Management (IAM) policy that provides access to a Lambda function that you want to invoke.\n  Use the  aws_lambda.invoke function to run the Lambda function. For details about this process, see  Invoking Lambda functions.\n      Function name \u2013 The name of the Lambda function, ARN, version, or alias. For a listing of possible formats, see   Lambda function name formats.\n  AWS Region \u2013 (Optional) The AWS Region where the Lambda function is located. If you don&#39;t specify a Region value and it&#39;s not specified in the function ARN,  RDS uses the same Region as the  DB instance.\n  For a listing of AWS Region names and associated values, see   \t Regions, Availability Zones, and Local Zones \t .\n  To hold the Lambda function name information, you can use the  aws_commons.create_lambda_function_arn function. This function creates an  aws_commons._lambda_function_arn_1 composite structure to store the name information, as shown following.\n  psql=&gt; SELECT aws_commons.create_lambda_function_arn( &#39;my-function&#39;, &#39;us-west-2&#39;) AS aws_lambda_arn_1 \\gsetpsql=&gt; SELECT aws_commons.create_lambda_function_arn( &#39;123456789012:function:my-function&#39;, &#39;us-west-2&#39;) AS lambda_partial_arn_1 \\gsetpsql=&gt; SELECT aws_commons.create_lambda_function_arn( &#39;arn:aws:lambda:us-west-2:123456789012:function:my-function&#39;) AS lambda_arn_1 \\gset\n  You can later provide any of these values as a parameter in calls to the  aws_lambda.invoke function. For examples, see  Invoking Lambda functions.\n    To use a Lambda function, give your PostgreSQL  DB instance permission to access Lambda. To do this, use the following procedure.\n  This policy provides the permissions that allow your PostgreSQL  DB instance to invoke Lambda functions.\n    Include in the policy the required action  lambda:InvokeFunction to allow Lambda invocation from your  RDS for PostgreSQL DB instance.\n  Include the Amazon Resource Name (ARN) that identifies the Lambda function. The ARN format for accessing Lambda is:  arn:aws:lambda:::function: example_function/*\n  For more information on creating an IAM policy for  RDS for PostgreSQL, see   Creating and using an IAM policy for IAM database access . See also   IAM Tutorial: Create and attach your first customer managed policy  in the  IAM User Guide.\n  The following AWS CLI command creates an IAM policy named  rds-lambda-policy with these options. It grants access to a function named  example_function.\n  aws iam create-policy --policy-name rds-lambda-policy --policy-document &#39; { &#34;Version&#34;: &#34;2012-10-17&#34;, &#34;Statement&#34;: [  { &#34;Sid&#34;: &#34;AllowAccessToExampleFunction&#34;, &#34;Effect&#34;: &#34;Allow&#34;, &#34;Action&#34;: &#34;lambda:InvokeFunction&#34;, &#34;Resource&#34;: &#34;arn:aws:lambda:&lt;region&gt;:&lt;123456789012&gt;:function:example_function&#34; } ]}&#39;\n  After you create the policy, note the ARN of the policy. You need the ARN for a subsequent step when you attach the policy to an IAM role.\n  You do this so that  RDS for PostgreSQL can assume this IAM role on your behalf to access your Lambda function. For more information, see  Creating a role to delegate permissions to an IAM user  in the  IAM User Guide.\n  The following example shows using the AWS CLI command to create a role named  rds-lambda-role.\n  aws iam create-role --role-name rds-lambda-role --assume-role-policy-document &#39; { &#34;Version&#34;: &#34;2012-10-17&#34;, &#34;Statement&#34;: [  { &#34;Effect&#34;: &#34;Allow&#34;, &#34;Principal&#34;:  { &#34;Service&#34;: &#34;rds.amazonaws.com&#34; }, &#34;Action&#34;: &#34;sts:AssumeRole&#34; } ] }&#39;\n  The following AWS CLI command attaches the policy created earlier to the role named  rds-lambda-role. Replace  your-policy-arn with the policy ARN that you noted in an earlier step.\n  Add the IAM role to the DB instance. You do so by using the AWS CLI, as described following.\n  Use the following CLI command to add the IAM role to the RDS for PostgreSQL DB instance named  my-db-instance. Replace   your-role-arn with the role ARN that you noted in a previous step. Use  Lambda for the value of the  --feature-name option, as shown following.\n    Following, you can find some examples of calling the  aws_lambda.invoke function. Before you use the  aws_lambda.invoke function, be sure to complete the following prerequisites:\n  Determine which Lambda function to invoke as described in  Specifying the Lambda function to use.\n  Make sure that the  DB instance has invoke access to Lambda as described in  Giving RDS access to Lambda.\n  You can invoke a Lambda function synchronously or asynchronously. You control this with the following values for the  aws_lambda.invoke function&#39;s  invocation_type parameter:\n  The  RequestResponse type of invocation for a Lambda function is synchronous and returns a response payload in the result of the  aws_lambda.invoke function. Use the  RequestResponse invocation type when your workflow depends on receiving the Lambda function result immediately. Most of the following examples use synchronous invocation.\n  The  Event type of invocation for a Lambda function is asynchronous and returns immediately without a returned payload. Use the  Event type of invocation when you don&#39;t need to know the result of the Lambda function before your workflow moves on. For an example of asynchronous invocation, see  Asynchronous event invocation of Lambda functions.\n  The following  aws_lambda.invoke examples use a  aws_lambda_arn_1 structure, which contains the identifying information for the Lambda function. To create the structure, use the  aws_commons.create_lambda_function_arn function. For an example of using the  aws_commons.create_lambda_function_arn function, see  Specifying the Lambda function to use.\n      Following is an example of a synchronous Lambda function invocation. The following two  aws_lambda.invoke function call results are the same.\n  psql=&gt; SELECT * FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&#34;body&#34;: &#34;Hello from Postgres!&#34;}&#39;::json);psql=&gt; SELECT * FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&#34;body&#34;: &#34;Hello from Postgres!&#34;}&#39;::json, &#39;RequestResponse&#39;);\n    :&#39;aws_lambda_arn_1&#39; \u2013 This parameter is a structure that identifies the Lambda function to call. This example uses a variable to identify the previously created structure. You can instead create the structure by including the  aws_commons.create_lambda_function_arn function call inline within the  aws_lambda.invoke function call as follows.\n    Following is an example of an asynchronous Lambda function invocation. The  Event invocation type schedules the Lambda function invocation with the specified input payload and returns immediately. Use the  Event invocation type in certain workflows that don&#39;t depend on the results of the Lambda function.\n      You can request to include the last 4 KB of the execution log in the function response, as shown following.\n  psql=&gt; SELECT *, select convert_from(decode(log_result, &#39;base64&#39;), &#39;utf-8&#39;) as log FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&#34;body&#34;: &#34;Hello from Postgres!&#34;}&#39;::json, &#39;RequestResponse&#39;, &#39;Tail&#39;);\n  Set the  aws_lambda.invoke function&#39;s  log_type parameter to  Tail to include the execution log in the response. The default value for the  log_type parameter is  None.\n  The  log_result that&#39;s returned is a  base64 encoded string. You can decode the contents using a combination of the  decode and  convert_from PostgreSQL functions.\n    You can pass in client context information that is separate from the payload, as shown following.\n  psql=&gt; SELECT *, convert_from(decode(log_result, &#39;base64&#39;), &#39;utf-8&#39;) as log FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&#34;body&#34;: &#34;Hello from Postgres!&#34;}&#39;::json, &#39;RequestResponse&#39;, &#39;Tail&#39;);\n      For an example of invoking a specific version of a Lambda function, see the following.\n    To identify a Lambda function&#39;s version, use the  aws_lambda.invoke function&#39;s  qualifier parameter. In this example,  &#39; custom_version&#39; is an alias or version that identifies the version of the function to invoke.\n  You can instead supply a Lambda function qualifier with the function name information as follows.\n      If a Lambda function throws an exception during request processing,  aws_lambda.invoke fails with a PostgreSQL error such as the following.\n  psql=&gt; SELECT * FROM aws_lambda.invoke(:&#39;aws_lambda_arn_1&#39;, &#39; {&#34;body&#34;: &#34;Hello from Postgres!&#34;}&#39;::json);ERROR: lambda invocation failedDETAIL: &#34;arn:aws:lambda:us-west-2:123456789012:function:my-function&#34; returned error &#34;Unhandled&#34;, details: &#34;&lt;Error details string&gt;&#34;.\n    Following is the reference for the functions to use for invoking Lambda functions with  RDS for PostgreSQL.\n        For more details about invoking Lambda functions, see also  Invoke in the  AWS Lambda Developer Guide.\n      aws_lambda.invoke(IN function_name TEXT,IN payload JSON,IN region TEXT DEFAULT NULL,IN invocation_type TEXT DEFAULT &#39;RequestResponse&#39;,IN log_type TEXT DEFAULT &#39;None&#39;,IN context JSON DEFAULT NULL,IN qualifier VARCHAR(128) DEFAULT NULL,OUT status_code INT,OUT payload JSON,OUT executed_version TEXT,OUT log_result TEXT)\n  aws_lambda.invoke(IN function_name aws_commons._lambda_function_arn_1,IN payload JSON,IN invocation_type TEXT DEFAULT &#39;RequestResponse&#39;,IN log_type TEXT DEFAULT &#39;None&#39;,IN context JSON DEFAULT NULL,IN qualifier VARCHAR(128) DEFAULT NULL,OUT status_code INT,OUT payload JSON,OUT executed_version TEXT,OUT log_result TEXT)\n    aws_lambda.invoke(IN function_name TEXT,IN payload JSONB,IN region TEXT DEFAULT NULL,IN invocation_type TEXT DEFAULT &#39;RequestResponse&#39;,IN log_type TEXT DEFAULT &#39;None&#39;,IN context JSONB DEFAULT NULL,IN qualifier VARCHAR(128) DEFAULT NULL,OUT status_code INT,OUT payload JSONB,OUT executed_version TEXT,OUT log_result TEXT)\n  aws_lambda.invoke(IN function_name aws_commons._lambda_function_arn_1,IN payload JSONB,IN invocation_type TEXT DEFAULT &#39;RequestResponse&#39;,IN log_type TEXT DEFAULT &#39;None&#39;,IN context JSONB DEFAULT NULL,IN qualifier VARCHAR(128) DEFAULT NULL,OUT status_code INT,OUT payload JSONB,OUT executed_version TEXT,OUT log_result TEXT)\n   The identifying name of the Lambda function. The value can be the function name, an ARN, or a partial ARN. For a listing of possible formats, see   Lambda function name formats in the  AWS Lambda Developer Guide.\n    The input for the Lambda function. The format can be JSON or JSONB. For more information, see   JSON Types  in the PostgreSQL documentation.\n    (Optional) The Lambda Region for the function. By default,  RDS resolves the AWS Region from the full ARN in the  function_name or it uses the  RDS for PostgreSQL DB instance Region. If this Region value conflicts with the one provided in the  function_name ARN, an error is raised.\n    The invocation type of the Lambda function. The value is case-sensitive. Possible values include the following:\n  RequestResponse \u2013 The default. This type of invocation for a Lambda function is synchronous and returns a response payload in the result. Use the  RequestResponse invocation type when your workflow depends on receiving the Lambda function result immediately.\n  Event \u2013 This type of invocation for a Lambda function is asynchronous and returns immediately without a returned payload. Use the  Event invocation type when you don&#39;t need results of the Lambda function before your workflow moves on.\n    The type of Lambda log to return in the  log_result output parameter. The value is case-sensitive. Possible values include the following:\n  Tail \u2013 The returned  log_result output parameter will include the last 4 KB of the execution log.\n    Client context in JSON or JSONB format. Fields to use include than  custom and  env.\n    A qualifier that identifies a Lambda function&#39;s version to be invoked. If this value conflicts with one provided in the  function_name ARN, an error is raised.\n  An HTTP status response code. For more information, see  Lambda Invoke response elements in the  AWS Lambda Developer Guide.\n    The information returned from the Lambda function that ran. The format is in JSON or JSONB.\n        The execution log information returned if the  log_type value is  Tail when the Lambda function was invoked. The result contains the last 4 KB of the execution log encoded in Base64.\n    Creates an  aws_commons._lambda_function_arn_1 structure to hold Lambda function name information. You can use the results of the  aws_commons.create_lambda_function_arn function in the  function_name parameter of the aws_lambda.invoke  aws_lambda.invoke function.\n      A required text string containing the Lambda function name. The value can be a function name, a partial ARN, or a full ARN.\n    An optional text string containing the AWS Region that the Lambda function is in. For a listing of Region names and associated values, see   \t Regions, Availability Zones, and Local Zones \t .", "posttime": "2021-08-06 09:52:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c03\u7528,lambda", "title": "\u76f4\u63a5\u4ece Postgres \u8c03\u7528 Lambda \u51fd\u6570", "title_en": "Invoke Lambda functions directly from Postgres", "transed": 1, "url": "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/PostgreSQL-Lambda.html#PostgreSQL-Lambda-invoke", "via": "", "real_tags": ["\u8c03\u7528", "lambda"]}]