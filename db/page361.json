[{"category": "", "categoryclass": "", "imagename": "b5d0f1167a86fdbbb8945644fc4c54f6.png", "infoid": 1031226, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5df2\u7ecf\u6709\u4e86\u81ea\u5df1\u7684\u57df\u540d\uff1amydomain.com\u3002\u6211\u5e0c\u671b\u80fd\u591f\u5728\u6211\u7684\u6811\u8393PI 4B\u4e0a\u8fd0\u884c\u4e00\u4e9b\u7f51\u9875\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u5bb6\u91cc\u4ee5\u65e0\u5934\u6a21\u5f0f\u6c38\u4e45\u8fd0\u884c(\u53ea\u9700\u89815W\u7684\u7535\u6e90\u548c\u65e0\u7ebf\u4e92\u8054\u7f51)\u3002\u6211\u5e0c\u671b\u80fd\u591f\u4ece\u516c\u5171\u4e92\u8054\u7f51\u8bbf\u95ee\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u3002\u52a8\u6001DNS\u4e0d\u662f\u4e00\u4e2a\u9009\u9879\uff0c\u56e0\u4e3a\u6211\u7684ISP\u963b\u6b62\u6240\u6709\u4f20\u5165\u901a\u4fe1\u3002Ngrok\u53ef\u4ee5\u594f\u6548\uff0c\u4f46\u514d\u8d39\u8ba1\u5212\u9650\u5236\u592a\u591a\u3002\n\u6211\u5728Hetzner\u4e0a\u4e70\u4e86\u4e00\u4e2a\u4fbf\u5b9c\u76842 GB\u5185\u5b58\u300120 GB\u78c1\u76d8VM\u548c\u4e00\u4e2a25 GB\u7684\u5377\uff0c\u5927\u7ea64\u6b27\u5143/\u6708\uff0cHetzner\u7ed9\u4e86\u6211\u4e00\u4e2a\u9759\u6001IP\u3002\u6211\u8fd8\u6ca1\u6709\u8d2d\u4e70\u6d6e\u52a8IP\u3002\n\u6211\u521b\u5efa\u4e86\u4e00\u4e2a\u5b50\u57dfu1.mydomain.com\uff0c\u5176A\u8bb0\u5f55\u6307\u5411\u4e0a\u9762\u7684\u9759\u6001IP\u5730\u5740\u3002\n\u6211\u5728\u670d\u52a1\u5668\u4e0a\u7981\u7528\u4e86nginx\uff0c\u800c\u5b89\u88c5\u4e86Caddy\u3002\u4ee5\u4e0b\u662f\u6211\u7684/etc/caddy/caddyfile\u7684\u5185\u5bb9\uff1a\n{email myemail@gmail.com}home.mydomain.com{#\u8fd9\u4e9b\u88ab\u53cd\u5411\u4ee3\u7406\u5230\u7aef\u53e310000+n\uff0c\u8fd9\u4e9b\u7aef\u53e3\u901a\u8fc7ssh#\u96a7\u9053\u4f20\u8f93\u5230\u6211\u7684\u5bb6\u4e61\u53cd\u5411\u4ee3\u7406localhost\uff1a10080}\u7684raspbercrypi\u4e2d}cloud.mydomain.com{#\u8fd9\u4e9b\u670d\u52a1\u5728\u672c\u5730\u63d0\u4f9b\uff0c\u4f46\u5e26\u6709\u81ea\u52a8HTTPS root*/usr/share/caddy file_server}\u3002\n\u6211\u5728\u670d\u52a1\u5668\u4e0a\u7684/etc/ssh/sshd_config\u4e2d\u8bbe\u7f6e\u4e86\u6307\u5b9a\u7684GatewayPorts\u5ba2\u6237\u7aef\u3002\u8fd9\u662f\u5fc5\u9700\u7684\uff0c\u4ee5\u4fbf\u5ba2\u6237\u7aef(RaspberryPI)\u53ef\u4ee5\u6307\u5b9a\u5728\u54ea\u4e9b\u7aef\u53e3\u4e0a\u542f\u7528\u53cd\u5411\u96a7\u9053\u3002\n\u6211\u5728\u6b64\u670d\u52a1\u5668\u4e0a\u542f\u7528\u4e86Ubuntu\u9632\u706b\u5899\uff0c\u5e76\u5141\u8bb8\u7aef\u53e380\u548c443\u4e0a\u7684\u4f20\u5165\u6d41\u91cf\u3002\u4f8b\u5982\uff1aSUDO UFW\u5141\u8bb880\u3002\n\u73b0\u5728\uff0c\u5728\u5bb6\u91cc\u7684Raspberry PI\u4e0a\uff0c\u6211\u521b\u5efa\u4e86\u4e00\u4e2a\u5230\u8fd9\u4e2aHetznerVM\u7684\u53cd\u5411SSH\u96a7\u9053\uff0c\u547d\u4ee4\u662f\uff1assh-N-T-R 10080\uff1alocalhost\uff1a80myuser@u1.mydomain.com\u3002\n\u5c31\u50cf\u8fd9\u6837\uff0c\u6211\u7684\u7ad9\u70b9\u5728PI\u7684\u7aef\u53e380\u4e0a\u8fd0\u884c\uff0c\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7https://home.mydomain.com.\u8bbf\u95ee\u3002\n\u4e00\u65e6\u6211\u4eec\u5b8c\u6210\u6d4b\u8bd5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6dfb\u52a0-f\u9009\u9879\uff0c\u4ee5\u4fbf\u6b64\u96a7\u9053\u5728\u540e\u53f0\u8fd0\u884c\u3002\u4e3a\u4e86\u80fd\u591f\u91cd\u65b0\u521b\u5efa\u96a7\u9053(\u53ef\u80fd\u901a\u8fc7crontab)\uff0c\u6211\u5c06\u4ee5\u4e0b\u4ee3\u7801\u653e\u5165bash\u811a\u672c\uff1a\n#\uff01/bin/bashcreateTunes(){/usr/bin/ssh-f-N-T-R 10080\uff1alocalhost\uff1a80myuser@u1.mydomain.com\u5982\u679c[[$\uff1f-eq 0]]\uff1b\u5219\u6210\u529f\u521b\u5efa\u5230\u8d6b\u8328\u7eb3\u7684\u56de\u663e\u96a7\u9053\uff0c\u5426\u5219\u5728\u521b\u5efa\u5230\u8d6b\u8328\u7eb3\u7684\u96a7\u9053\u65f6\u51fa\u73b0\u56de\u663e\u9519\u8bef\u3002Rc\u662f$\uff1fFi}/bin/pidof sshif[[$\uff1f-ne 0]]\uff1b\u7136\u540e\u56de\u663e\u521b\u5efa\u65b0\u96a7\u9053\u8fde\u63a5createTunnelfi\u3002\n\u6620\u5c04\u6574\u4e2a\u7aef\u53e3\u8303\u56f4\uff0c\u8fd9\u6837\u6bcf\u6b21\u5728PI\u4e0a\u6dfb\u52a0\u65b0\u7684WebApp\u65f6\u5c31\u4e0d\u9700\u8981\u6267\u884c\u4e0a\u8ff0\u4e24\u4e2a\u6b65\u9aa4", "note_en": "I already have my own domain name:  mydomain.com. I wanted to be able to run some webapps on my Raspberry Pi 4B runningperpetually at home in headless mode (just needs 5W power and wireless internet). I wanted to be able to access these apps from public Internet. Dynamic DNS wasn&#39;t an option because my ISP blocks all incoming traffic.  ngrok would work but the free plan is too restrictive.\n I bought a cheap 2GB RAM, 20GB disk VM + a 25GB volume on Hetzner for about 4 EUR/month.Hetzner gave me a static IP for it. I haven&#39;t purchased a floating IP yet.\n I created a subdomain  u1.mydomain.com with its A record pointing to the above static IP address.\n  I disabled  nginx on the server and installed  Caddy instead. These are the contents of my  /etc/caddy/Caddyfile:\n { email myemail@gmail.com}home.mydomain.com { # These are reverse-proxied to port 10000+n which are SSH # tunneled into the raspberrypi at my home reverse_proxy localhost:10080}cloud.mydomain.com { # These are served locally but with automatic HTTPS root * /usr/share/caddy file_server}\n I set  GatewayPorts clientspecified in my  /etc/ssh/sshd_config on the server. This is needed so that the client (RaspberryPi) can specify which ports to enabled reverse tunneling on.\n I enabled the Ubuntu firewall on this server and allowed incoming traffic on port 80, and 443. For eg:  sudo ufw allow 80\n Now, on my Raspberry Pi at home, I created a reverse SSH tunnel to this Hetzner VM with: ssh -N -T -R 10080:localhost:80 myuser@u1.mydomain.com\n And just like that, my site running on port 80 on the Pi is now accessible at  https://home.mydomain.com.\n Once we&#39;re done testing, we can add the  -f option so that this tunnel runs in the background. To be able to recreate the tunnel (perhaps via  crontab), I put this in a bash script:\n #!/bin/bashcreateTunnel() { /usr/bin/ssh -f -N -T -R 10080:localhost:80 myuser@u1.mydomain.com if [[ $? -eq 0 ]]; then echo Tunnel to Hetzner created successfully else echo An error occurred creating a tunnel to hetzner. RC was $? fi}/bin/pidof sshif [[ $? -ne 0 ]]; then echo Creating new tunnel connection createTunnelfi\n    Map an entire port range so that the above two steps are not needed everytime I add a new Webapp on the Pi", "posttime": "2020-10-26 21:53:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "raspberry-pi,ssh,raspberry,\u96a7\u9053", "title": "\u7528Caddy\u548cSSH\u96a7\u9053\u8ba9\u6811\u8393PI\u4e0a\u7ebf", "title_en": "Putting Raspberry Pi Online with Caddy and SSH Tunnel", "transed": 1, "url": "https://gist.github.com/nileshtrivedi/4c615e8d3c1bf053b0d31176b9e69e42", "via": "", "real_tags": ["ssh", "raspberry", "\u96a7\u9053"]}, {"category": "", "categoryclass": "", "imagename": "7472213ca4836380259f211bf1c44c32.jpg", "infoid": 1031225, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ee5\u4e0b\u662fIndranil Banik\uff0cMoritz Haslbauer\u548cPavel Kroupa\u6839\u636e\u4ed6\u4eec\u7684\u65b0\u8bba\u6587\u64b0\u5199\u7684\u5ba2\u5ea7\u5e16\u5b50\u3002\n\u7531\u4e8e\u8bb8\u591a\u4e25\u91cd\u7684\u7d27\u5f20\u5c40\u52bf\uff0c\u5b87\u5b99\u5b66\u76ee\u524d\u6b63\u5904\u4e8e\u4e00\u573a\u91cd\u5927\u5371\u673a\u4e2d\uff0c\u5176\u4e2d\u6700\u4e25\u91cd\u548c\u4f17\u6240\u5468\u77e5\u7684\u662f\uff0c\u5f53\u5730\u5bf9\u5b87\u5b99\u81a8\u80c0\u901f\u5ea6\u7684\u89c2\u6d4b(\u6240\u8c13\u7684\u201c\u54c8\u52c3\u5e38\u6570\u201d)\u8d85\u8fc7\u4e86\u6807\u51c6\u5b87\u5b99\u5b66\u6a21\u578b\u039bcdm\u7684\u9884\u6d4b\u3002\u8fd9\u4e00\u9884\u6d4b\u662f\u57fa\u4e8e\u5b87\u5b99\u5fae\u6ce2\u80cc\u666f(CMB)\uff0c\u8fd9\u662f\u6211\u4eec\u80fd\u89c2\u5bdf\u5230\u7684\u6700\u53e4\u8001\u7684\u5149-\u901a\u5e38\u8ba4\u4e3a\u5b83\u662f\u5728\u5927\u7206\u70b8\u540e\u5927\u7ea640\u4e07\u5e74\u53d1\u51fa\u7684\u3002\u4e3a\u4e86\u4f7f\u54c8\u52c3cdm\u80fd\u4e0e\u666e\u6717\u514b\u536b\u661f\u548c\u5176\u4ed6\u5b9e\u9a8c\u89c2\u6d4b\u5230\u7684\u5929\u4f53\u8fd0\u52a8\u6a21\u5f0f\u76f8\u543b\u5408\uff0c\u039b\u5e38\u6570\u5fc5\u987b\u6709\u4e00\u4e2a\u7279\u5b9a\u503c\uff0c\u537367.40.5 km/s/mpc\u3002\u5f53\u5730\u7684\u6d4b\u91cf\u7ed3\u679c\u51e0\u4e4e\u90fd\u9ad8\u4e8e\u8fd9\u4e2a\u201c\u666e\u6717\u514b\u503c\u201d\uff0c\u4f46\u5f7c\u6b64\u662f\u4e00\u81f4\u7684\u3002\u5728\u6211\u4eec\u7684\u8bba\u6587\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u8d85\u65b0\u661f\u548c\u5f15\u529b\u900f\u955c\u7c7b\u661f\u4f53\u7684\u7ec4\u5408\uff0c\u4f7f\u7528\u4e8673.8\u00b11.1 km/s/mpc\u7684\u5c40\u57df\u503c\uff0c\u8fd9\u662f\u4e24\u79cd\u7279\u522b\u7cbe\u786e\u4f46\u53c8\u72ec\u7acb\u7684\u6280\u672f\u3002\n\u5b87\u5b99\u7684\u8fd9\u79cd\u51fa\u4eba\u610f\u6599\u7684\u5feb\u901f\u5c40\u90e8\u81a8\u80c0\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u4eec\u5c45\u4f4f\u5728\u4e00\u4e2a\u5de8\u5927\u7684\u4f4e\u5bc6\u5ea6\u533a\u57df\uff0c\u6216\u8005\u8bf4\u662f\u7a7a\u865a\u7684\u533a\u57df\u3002\u7136\u800c\uff0c\u5728\u5efa\u7acb\u5728\u7231\u56e0\u65af\u5766\u5f15\u529b\u7406\u8bba-\u5e7f\u4e49\u76f8\u5bf9\u8bba\u57fa\u7840\u4e0a\u7684\u039b\u6e05\u6d01\u53d1\u5c55\u673a\u5236\u4e2d\uff0c\u4e00\u4e2a\u8db3\u591f\u5bbd\u548c\u8db3\u591f\u6df1\u7684\u7a7a\u6d1e\u6765\u89e3\u91ca\u54c8\u52c3\u5f20\u529b\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u7136\u800c\uff0c\u6709\u76f8\u5f53\u6709\u529b\u7684\u8bc1\u636e\u8868\u660e\uff0c\u6211\u4eec\u786e\u5b9e\u751f\u6d3b\u5728\u4e00\u4e2a\u534a\u5f84\u7ea6\u4e3a300Mpc\uff0c\u537310\u4ebf\u5149\u5e74\u7684\u5927\u7a7a\u6d1e\u4e2d\u3002\u8fd9\u4e00\u8bc1\u636e\u6765\u81ea\u8bb8\u591a\u6db5\u76d6\u4ece\u65e0\u7ebf\u7535\u5230X\u5c04\u7ebf\u7684\u6574\u4e2a\u7535\u78c1\u9891\u8c31\u7684\u8c03\u67e5\u3002\u6700\u4ee4\u4eba\u4fe1\u670d\u7684\u8bc1\u636e\u6765\u81ea\u5bf9\u8fd1\u7ea2\u5916\u661f\u7cfb\u8ba1\u6570\u7684\u5206\u6790\uff0c\u7ed9\u51fa\u4e86\u8fd9\u4e2a\u7a7a\u6d1e\u7684\u540d\u5b57--\u57fa\u5357-\u5df4\u683c-\u8003\u4f0a(KBC)\u7a7a\u6d1e\u3002\u6765\u81ea\u7a7a\u6d1e\u5916\u7269\u8d28\u7684\u5f15\u529b\u5c06\u6bd4\u5b83\u5185\u90e8\u7684\u7269\u8d28\u5438\u5f15\u66f4\u591a\u7684\u4e1c\u897f\uff0c\u4f7f\u5b87\u5b99\u770b\u8d77\u6765\u6bd4\u7a7a\u6d1e\u5185\u7684\u89c2\u5bdf\u8005\u5b9e\u9645\u81a8\u80c0\u5f97\u66f4\u5feb\u3002\u8fd9\u79cd\u201c\u54c8\u52c3\u6ce1\u6cab\u201d\u60c5\u666f(\u5982\u56fe1\u6240\u793a)\u53ef\u4ee5\u89e3\u51b3\u54c8\u52c3\u5f20\u529b\u95ee\u9898\uff0c\u8fd9\u4e00\u53ef\u80fd\u6027\u5728\u4e4b\u524d\u7684\u51e0\u90e8\u4f5c\u54c1(\u5982\u80af\u6c83\u897f+2019\u5e74)\u4e2d\u90fd\u66fe\u8003\u8651\u8fc7\uff0c\u4f46\u90fd\u88ab\u62d2\u7edd\u4e86\u3002\u6211\u4eec\u5c06\u56de\u5230\u4ed6\u4eec\u5bf9\u8fd9\u4e00\u60f3\u6cd5\u7684\u53cd\u5bf9\u610f\u89c1\u3002\n\u4e3b\u8981\u7684\u53cd\u5bf9\u610f\u89c1\u4e4b\u4e00\u4f3c\u4e4e\u662f\uff0c\u65e2\u7136\u5982\u6b64\u5de8\u5927\u800c\u6df1\u523b\u7684\u7a7a\u767d\u4e0e\u039b\u6e05\u6d01\u53d1\u5c55\u673a\u5236\u4e0d\u76f8\u5bb9\uff0c\u5b83\u5c31\u4e0d\u53ef\u80fd\u5b58\u5728\u3002\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u601d\u7ef4\u65b9\u5f0f\uff0c\u4f46\u95ee\u9898\u5728\u6211\u4eec\u5f88\u65e9\u7684\u65f6\u5019\u5c31\u5f88\u6e05\u695a\u4e86\u3002\u8fd9\u4e2a\u903b\u8f91\u7684\u7b2c\u4e00\u90e8\u5206\u662f\u5408\u7406\u7684-\u5047\u8bbe\u5e7f\u4e49\u76f8\u5bf9\u8bba\uff0c\u4e00\u4e2a\u70ed\u7684\u5927\u7206\u70b8\uff0c\u5b87\u5b99\u65e9\u671f\u7684\u72b6\u6001\u5728\u5b87\u5b99\u5927\u7206\u70b8\u4e2d\u662f\u663e\u800c\u6613\u89c1\u7684(\u5373\uff0c\u5b83\u5f53\u65f6\u662f\u5e73\u7684\uff0c\u51e0\u4e4e\u662f\u5747\u5300\u7684)\uff0c\u6211\u4eec\u88ab\u5f15\u5bfc\u5230\u6807\u51c6\u7684\u5e73\u5766\u7684\u039b\u6e05\u6d01\u53d1\u5c55\u673a\u5236\u6a21\u578b\u3002\u901a\u8fc7\u7814\u7a76\u8fd9\u4e2a\u6a21\u578b\u6700\u5927\u7684\u5408\u9002\u7684\u6a21\u62df(\u79f0\u4e3aMXXL)\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u4ee5\u89c2\u5bdf\u5230\u7684KBC\u7a7a\u6d1e\u7684\u5927\u5c0f\u548c\u6df1\u5ea6(\u6216\u4f4e\u4e8e\u5bc6\u5ea6\u7684\u5206\u6570)\uff0c\u6211\u4eec\u5e94\u8be5\u5b8c\u5168\u4e0d\u53ef\u80fd\u53d1\u73b0\u6211\u4eec\u81ea\u5df1\u5728\u7a7a\u6d1e\u4e2d-\u8fd9\u79cd\u53ef\u80fd\u6027\u53ef\u4ee5\u6bd4\u7b2c\u4e00\u6b21\u5ba3\u5e03\u53d1\u73b0\u5e0c\u683c\u65af\u73bb\u8272\u5b50\u65f6\u66f4\u6709\u4fe1\u5fc3\u5730\u88ab\u62d2\u7edd\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5e94\u7528\u4e86\u9886\u5148\u7684\u53e6\u7c7b\u5f15\u529b\u7406\u8bba\u4e4b\u4e00\uff0c\u79f0\u4e3a\u7c73\u5c14\u683c\u7f57\u59c6\u52a8\u529b\u5b66(MOND)\uff0c\u8fd9\u662f\u4ee5\u8272\u5217\u7269\u7406\u5b66\u5bb6\u83ab\u5c14\u5fb7\u6d77\u00b7\u7c73\u5c14\u683c\u7f57\u59c6\u572820\u4e16\u7eaa80\u5e74\u4ee3\u521d\u63d0\u51fa\u7684\u4e00\u4e2a\u6709\u4e89\u8bae\u7684\u60f3\u6cd5\u3002\u6211\u4eec\u4f7f\u7528MOND(\u8fd9\u91cc\u7528\u7b80\u5355\u7684\u65b9\u5f0f\u89e3\u91ca)\u4ece\u65e9\u671f\u5f00\u59cb\u5411\u524d\u6f14\u5316\u51fa\u4e00\u4e2a\u5c0f\u7684\u5bc6\u5ea6\u8d77\u4f0f\uff0c\u7814\u7a76130\u4ebf\u5e74\u540e\u5b83\u662f\u5426\u9002\u5408\u5c40\u90e8\u5b87\u5b99\u7684\u5bc6\u5ea6\u548c\u901f\u5ea6\u573a\u3002\u5728\u63cf\u8ff0\u6211\u4eec\u7684\u7ed3\u679c\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u7b80\u8981\u4ecb\u7ecdMOND\uff0c\u5e76\u89e3\u91ca\u5982\u4f55\u5728\u6f5c\u5728\u53ef\u884c\u7684\u5b87\u5b99\u5b66\u6846\u67b6\u4e2d\u4f7f\u7528\u5b83\u3002\u5929\u6587\u5b66\u5bb6\u7ecf\u5e38\u5047\u8bbeMOND\u4e0d\u80fd\u6269\u5c55\u5230\u5b87\u5b99\u5c3a\u5ea6(\u901a\u5e38\u4e3a&gt\uff1b10MPC)\uff0c\u5982\u679c\u6ca1\u6709\u4e00\u4e9b\u8f85\u52a9\u5047\u8bbe\uff0c\u8fd9\u53ef\u80fd\u662f\u6b63\u786e\u7684\u3002\u5e7f\u4e49\u76f8\u5bf9\u8bba\u4e5f\u662f\u5982\u6b64\uff0c\u5c3d\u7ba1\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8f85\u52a9\u5047\u8bbe\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u7684\u5c3a\u5ea6\u53ea\u6709\u51e0\u4e2akpc\uff0c\u4e5f\u5c31\u662f\u5728\u661f\u7cfb\u4e2d\u3002\n\u8499\u5fb7\u6700\u521d\u7684\u8bbe\u8ba1\u662f\u4e3a\u4e86\u89e3\u91ca\uff0c\u5982\u679c\u4eba\u4eec\u5c06\u5e7f\u4e49\u76f8\u5bf9\u8bba\u5e94\u7528\u4e8e\u53d1\u5149\u7269\u8d28\u7684\u5206\u5e03\uff0c\u4e3a\u4ec0\u4e48\u661f\u7cfb\u5728\u5176\u5916\u56f4\u7684\u65cb\u8f6c\u901f\u5ea6\u6bd4\u5e94\u6709\u7684\u901f\u5ea6\u8981\u5feb\u3002\u8fd9\u79cd\u5dee\u5f02\u5f15\u53d1\u4e86\u56f4\u7ed5\u5355\u4e2a\u661f\u7cfb\u7684\u6697\u7269\u8d28\u5149\u6655\u7684\u60f3\u6cd5\u3002\u8981\u8ba9\u6697\u7269\u8d28\u5728\u8fd9\u6837\u7684\u5c3a\u5ea6\u4e0a\u805a\u96c6\uff0c\u5b83\u5fc5\u987b\u662f\u201c\u51b7\u7684\u201d\uff0c\u6216\u8005\u76f8\u5f53\u4e8e\u7531\u76f8\u5f53\u91cd\u7684\u7c92\u5b50\u7ec4\u6210(\u9ad8\u4e8e\u51e0\u5343eV/c2\uff0c\u6216\u8d28\u5b50\u8d28\u91cf\u7684\u767e\u4e07\u5206\u4e4b\u4e00)\u3002\u4efb\u4f55\u8f83\u8f7b\u7684\u7269\u8d28\u548c\u6765\u81ea\u661f\u7cfb\u7684\u5f15\u529b\u90fd\u4e0d\u80fd\u6293\u4f4f\u6697\u7269\u8d28\u3002\u8499\u5fb7\u5047\u8bbe\u8fd9\u4e9b\u63a8\u6d4b\u7684\u548c\u65e0\u6cd5\u89e3\u91ca\u7684\u51b7\u6697\u7269\u8d28\u5149\u73af\u5e76\u4e0d\u5b58\u5728--\u5b83\u4eec\u7684\u9700\u8981\u6bd5\u7adf\u53d6\u51b3\u4e8e\u5e7f\u4e49\u76f8\u5bf9\u8bba\u7684\u6709\u6548\u6027\u3002\u5728MOND\u4e2d\uff0c\u4efb\u4f55\u7269\u4f53\u7684\u91cd\u529b\u4e00\u65e6\u964d\u5230\u67d0\u4e2a\u975e\u5e38\u4f4e\u7684\u9608\u503c(\u79f0\u4e3a0)\uff0c\u5b83\u5c31\u4f1a\u968f\u7740\u8ddd\u79bb\u7684\u589e\u52a0\u800c\u66f4\u7f13\u6162\u5730\u4e0b\u964d\uff0c\u9075\u5faa\u7684\u662f\u53cd\u8ddd\u79bb\u5b9a\u5f8b\uff0c\u800c\u4e0d\u662f\u901a\u5e38\u7684\u53cd\u5e73\u65b9\u5f8b\u3002\u8499\u5fb7\u5df2\u7ecf\u6210\u529f\u5730\u9884\u6d4b\u4e86\u8bb8\u591a\u661f\u7cfb\u7684\u65cb\u8f6c\u66f2\u7ebf\uff0c\u7a81\u51fa\u4e86\u5b83\u4eec\u4e0e\u53ef\u89c1\u8d28\u91cf\u4e4b\u95f4\u7684\u4e00\u4e9b\u663e\u8457\u7684\u76f8\u5173\u6027\u3002\u8fd9\u662f\u610f\u60f3\u4e0d\u5230\u7684\uff0c\u5982\u679c\u5b83\u4eec\u5927\u591a\u7531\u4e0d\u53ef\u89c1\u7684\u6697\u7269\u8d28\u7ec4\u6210\uff0c\u5176\u6027\u8d28\u4e0e\u53ef\u89c1\u8d28\u91cf\u5b8c\u5168\u4e0d\u540c\u3002\u5730\u65b9\u6027\u7fa4\u4f53\n\u5bf9\u6211\u4eec\u7684\u6a21\u578b\u7684\u4e00\u4e2a\u53cd\u5bf9\u610f\u89c1\u662f\uff0c\u4e00\u4e2a\u5de8\u5927\u7684\u5c40\u90e8\u7a7a\u6d1e\u4f1a\u5bfc\u81f4\u5b87\u5b99\u7684\u660e\u663e\u81a8\u80c0\u5728\u540e\u671f\u52a0\u901f\u3002\u540c\u6837\uff0c\u8d85\u51fa\u7a7a\u6d1e\u7684\u89c2\u6d4b\u5e94\u8be5\u9075\u5faa\u6807\u51c6\u7684\u666e\u6717\u514b\u5b87\u5b99\u8bba\uff0c\u4ece\u800c\u5728\u7a7a\u6d1e\u8fb9\u7f18\u5f62\u6210\u9636\u68af\u72b6\u7684\u884c\u4e3a\u3002\u5371\u6025\u5173\u5934\u662f\u6240\u8c13\u7684\u52a0\u901f\u5ea6\u53c2\u6570q0(\u6211\u4eec\u5b9a\u4e49\u8be5\u53c2\u6570\u4e0e\u60ef\u4f8b\u76f8\u53cd\uff0c\u4ee5\u7ea0\u6b63\u5386\u53f2\u9519\u8bef)\u3002\u5728\u039b\u6e05\u6d01\u53d1\u5c55\u673a\u5236\u4e2d\uff0c\u6211\u4eec\u9884\u8ba1Q0=0.55\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u5728\u6ce1\u6cab\u60c5\u666f\u4e2d\uff0c\u6211\u4eec\u9884\u8ba1\u4f1a\u6709\u66f4\u9ad8\u7684\u503c\u3002\u80af\u6c83\u897f+(2019\u5e74)\u7684\u53cd\u5bf9\u610f\u89c1\u662f\uff0c\u7531\u4e8e\u89c2\u5bdf\u5230\u7684Q0\u63a5\u8fd10.55\uff0c\u6ca1\u6709\u7a7a\u7684\u7a7a\u95f4\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u7684\u6570\u636e\u5206\u6790\u5c06Q0\u56fa\u5b9a\u4e3a\u039b\u6e05\u6d01\u53d1\u5c55\u673a\u5236\u7684\u671f\u671b\u503c\uff0c\u4ece\u800c\u6d88\u9664\u4e86\u53d1\u73b0\u53ef\u80fd\u7531\u5c40\u90e8\u7a7a\u6d1e\u9020\u6210\u7684\u504f\u5dee\u7684\u4efb\u4f55\u5e0c\u671b\u3002\u5176\u4ed6\u5206\u6790(\u4f8b\u5982\uff0cCamarena\u548cAmmarra2020b)\u6ca1\u6709\u505a\u51fa\u8fd9\u79cd\u7406\u8bba\u9a71\u52a8\u7684\u5047\u8bbe\uff0c\u53d1\u73b0Q0=1.08\uff0c\u8fd9\u4e0e\u6211\u4eec\u7684\u6700\u4f73\u62df\u5408\u6a21\u578b\u975e\u5e38\u4e00\u81f4(\u56fe4)\u3002\u6211\u4eec\u8fd8\u8ba8\u8bba\u4e86\u5bf9\u5927\u7684\u5c40\u90e8\u7a7a\u6d1e\u7684\u5176\u4ed6\u53cd\u5bf9\u610f\u89c1\uff0c\u4f8b\u5982Wu&amp\uff1bHuterer(2017)\u7684\u8bba\u6587\uff0c\u5b83\u6ca1\u6709\u8003\u8651\u8db3\u591f\u5927\u7684\u7a7a\u6d1e\uff0c\u8feb\u4f7f\u4f5c\u8005\u8003\u8651\u4e00\u4e2a\u66f4\u6df1\u7684\u7a7a\u6d1e\u6765\u8bd5\u56fe\u89e3\u51b3\u54c8\u52c3\u5f20\u529b\u3002\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e9b\u4e25\u91cd\u7684\u89c2\u6d4b\u4e0d\u4e00\u81f4\uff0c\u4f46\u50cf\u89c2\u5bdf\u5230\u7684KBC\u7a7a\u6d1e\u8fd9\u6837\u66f4\u5927\u3001\u66f4\u6d45\u7684\u7a7a\u6d1e\u4f3c\u4e4e\u5f88\u597d\u5730\u89e3\u91ca\u4e86\u6570\u636e\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7ed3\u5408\u6211\u4eec\u5e94\u7528\u4e8e\u6211\u4eec\u6a21\u578b\u7684\u6240\u6709\u7ea6\u675f\uff0c\u603b\u7684\u5f20\u529b\u53ea\u67092.53%\u03c3\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u7684\u6a21\u578b\u662f\u6b63\u786e\u7684\uff0c\u90a3\u4e48\u6570\u636e\u67091.14%\u7684\u673a\u4f1a\u51fa\u73b0\u3002\u56e0\u6b64\uff0c\u5b9e\u9645\u7684\u89c2\u5bdf\u7ed3\u679c\u5e76\u4e0d\u662f\u6211\u4eec\u7684\u6a21\u578b\u6700\u53ef\u80fd\u7684\u7ed3\u679c\uff0c\u4f46\u5982\u679c\u5b83\u662f\u6b63\u786e\u7684\uff0c\u5c31\u6709\u53ef\u80fd\u51fa\u73b0\u3002\u8003\u8651\u5230\u6211\u4eec\u4ece\u51fa\u7248\u7269\u4e2d\u63d0\u53d6\u7684\u90e8\u5206(\u5982\u679c\u4e0d\u662f\u5168\u90e8)\u89c2\u6d4b\u8bef\u5dee\u88ab\u4f4e\u4f30\u7684\u53ef\u80fd\u6027\u5f88\u9ad8\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u4e00\u81f4\u6027\u6c34\u5e73\u3002\n\u4e0e\u5176\u4ed6\u89e3\u51b3\u54c8\u52c3\u5f20\u529b\u7684\u5c1d\u8bd5\u4e0d\u540c\uff0c\u6211\u4eec\u7684\u72ec\u7279\u4e4b\u5904\u5728\u4e8e\u4f7f\u7528\u4e86\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u7406\u8bba(MOND)\uff0c\u8be5\u7406\u8bba\u662f\u51fa\u4e8e\u4e0d\u540c\u7684\u539f\u56e0(\u661f\u7cfb\u65cb\u8f6c\u66f2\u7ebf)\u800c\u5f00\u53d1\u7684\u3002\u4ecd\u7136\u9700\u8981\u4f7f\u7528\u7531\u5047\u8bbe\u7684\u7a00\u8584\u4e2d\u5fae\u5b50\u7ec4\u6210\u7684\u4e0d\u53ef\u89c1\u7684\u65e0\u78b0\u649e\u7269\u8d28\u6765\u89e3\u91ca\u661f\u7cfb\u56e2\u7684\u5c5e\u6027\uff0c\u5426\u5219\u5c31\u4e0d\u80fd\u5f88\u597d\u5730\u7b26\u5408MOND\u7684\u8981\u6c42\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u4e2d\u5fae\u5b50\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u89e3\u91caCMB\u548c\u80cc\u666f\u81a8\u80c0\u5386\u53f2\uff0c\u5c3d\u7ba1\u6700\u8fd1Skordis&Amp\uff1bZlosnik(2020)\u8868\u660e\u8fd9\u5728\u53ea\u6709\u666e\u901a\u7269\u8d28\u7684MOND\u4e2d\u662f\u53ef\u80fd\u7684\u3002\u65e0\u8bba\u5982\u4f55\uff0cMOND\u662f\u4e00\u79cd\u5f15\u529b\u7406\u8bba\uff0c\u800c\u6697\u7269\u8d28\u662f\u4e00\u79cd\u5047\u8bbe\uff0c\u5373\u5b58\u5728\u7684\u7269\u8d28\u6bd4\u8089\u773c\u770b\u5230\u7684\u66f4\u591a\u3002\u8fd9\u4e24\u4e2a\u60f3\u6cd5\u90fd\u53ef\u80fd\u662f\u6b63\u786e\u7684\uff0c\u5e94\u8be5\u5206\u522b\u8fdb\u884c\u6d4b\u8bd5\u3002\n\u56e0\u6b64\uff0c\u6697\u7269\u8d28-MOND\u6df7\u5408\u4f53\u4f3c\u4e4e\u662f\u89e3\u51b3\u5f53\u524d\u5b87\u5b99\u5b66\u5371\u673a\u7684\u4e00\u79cd\u975e\u5e38\u6709\u524d\u9014\u7684\u65b9\u6cd5\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd8\u9700\u8981\u505a\u66f4\u591a\u7684\u5de5\u4f5c\u6765\u6784\u5efa\u4e00\u4e2a\u80fd\u591f\u89e3\u51b3\u5b87\u5b99\u5b66\u95ee\u9898\u7684\u6210\u719f\u7684\u76f8\u5bf9\u8bbaMOND\u7406\u8bba\u3002\u8fd9\u53ef\u4ee5\u5efa\u7acb\u5728Skordis&Amp\uff1bZlosnik(2019\u5e74)\u63d0\u51fa\u7684\u5f15\u529b\u6ce2\u4ee5\u5149\u901f\u4f20\u64ad\u7684\u7406\u8bba\u7684\u57fa\u7840\u4e0a\uff0c\u8fd9\u88ab\u8ba4\u4e3a\u662fMOND\u7684\u4e00\u4e2a\u4e3b\u8981\u56f0\u96be\u3002\u6211\u4eec\u8ba4\u4e3a\uff0c\u5728\u4e00\u7cfb\u5217\u5408\u7406\u7684\u7406\u8bba\u5047\u8bbe\u4e0b\uff0c\u8fd9\u6837\u7684\u7406\u8bba\u4f1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4fc3\u8fdb\u7ed3\u6784\u7684\u5f62\u6210\uff0c\u4f46\u8fd9\u9700\u8981\u4ece\u76f8\u5bf9\u8bba\u7684MOND\u7406\u8bba\u5f00\u59cb\u660e\u786e\u5730\u8bc1\u660e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b87\u5b99\u5b66\u7ed3\u6784\u5f62\u6210\u7684\u6a21\u62df\u5f53\u7136\u662f\u5fc5\u9700\u7684--\u8fd9\u4e9b\u6a21\u62df\u76ee\u524d\u6b63\u5728\u6ce2\u6069\u8fdb\u884c\u3002\u8fdb\u4e00\u6b65\u7684\u89c2\u6d4b\u4e5f\u4f1a\u6709\u5f88\u5927\u7684\u5e2e\u52a9\uff0c\u7279\u522b\u662f\u5bf9KBC\u7a7a\u6d1e\u5916\u56f4500Mpc\u8ddd\u79bb\u7684\u7269\u8d28\u5bc6\u5ea6\u7684\u89c2\u6d4b\u3002\u8fd9\u53ef\u80fd\u4f1a\u4e3a\u7a7a\u6d1e\u6269\u5927\u5f97\u6709\u591a\u5feb\u63d0\u4f9b\u91cd\u8981\u7ebf\u7d22\uff0c\u5e2e\u52a9\u786e\u5b9a\u5907\u53d7\u8ffd\u6367\u7684MOND\u7406\u8bba\u7684\u884c\u4e3a\u3002\n\u4ece\u6700\u5c0f\u7684\u77ee\u5c0f\u661f\u7cfb\u5230\u5b87\u5b99\u4e2d\u6700\u5927\u7684\u7ed3\u6784\uff0c\u4ece\u5b87\u5b99\u8bde\u751f\u540e\u7684\u51e0\u79d2\u949f\u5230\u4eca\u5929\uff0c\u73b0\u5728\u6709\u4e00\u4e2a\u975e\u5e38\u73b0\u5b9e\u7684\u524d\u666f\uff0c\u53ef\u4ee5\u83b7\u5f97\u9002\u7528\u4e8e\u6240\u6709\u5929\u6587\u5c3a\u5ea6\u7684\u5355\u4e00\u7406\u8bba\u3002\u4e0e\u5176\u4e89\u8bba\u8fd9\u4e00\u7406\u8bba\u770b\u8d77\u6765\u66f4\u50cfMOND\u8fd8\u662f\u6807\u51c6\u5b87\u5b99\u5b66\uff0c\u6211\u4eec\u771f\u6b63\u5e94\u8be5\u505a\u7684\u662f\u5c06\u4e24\u8005\u7684\u6700\u4f73\u5143\u7d20\u7ed3\u5408\u8d77\u6765\uff0c\u4ed4\u7ec6\u5173\u6ce8\u6240\u6709\u7684\u89c2\u5bdf\u7ed3\u679c\u3002\nIndranil Banik\u662f\u5fb7\u56fd\u6ce2\u6069\u5927\u5b66\u4ea5\u59c6\u970d\u5179\u8f90\u5c04\u548c\u6838\u7269\u7406\u7814\u7a76\u6240(HISKP)\u6d2a\u5821\u5927\u5b66\u7684\u535a\u58eb\u540e\u7814\u7a76\u5458\u3002\u4ed6\u5728\u5251\u6865\u4e09\u4e00\u5b66\u9662\u653b\u8bfb\u672c\u79d1\u548c\u7855\u58eb\u5b66\u4f4d\uff0c\u5728\u8d75\u6d2a\u751f\u7684\u6307\u5bfc\u4e0b\u5728\u5723\u5b89\u5fb7\u9c81\u65af\u83b7\u5f97\u535a\u58eb\u5b66\u4f4d\u3002\u4ed6\u7684\u7814\u7a76\u91cd\u70b9\u662f\u6d4b\u8bd5\u91cd\u529b\u662f\u5426\u5728\u94f6\u6cb3\u7cfb\u5916\u56f4\u5178\u578b\u7684\u4f4e\u52a0\u901f\u5ea6\u4e0b\u7ee7\u7eed\u9075\u5faa\u725b\u987f\u5e73\u65b9\u53cd\u6bd4\u5b9a\u5f8b\uff0cMOND\u662f\u53d1\u5c55\u6700\u597d\u7684\u66ff\u4ee3\u65b9\u6848\u3002\n\u83ab\u91cc\u8328\u00b7\u54c8\u65af\u5c14\u9c8d\u5c14(Moritz Haslbauer)\u662f\u6ce2\u6069\u9a6c\u514b\u65af\u00b7\u666e\u6717\u514b\u5c04\u7535\u5929\u6587\u5b66\u7814\u7a76\u6240(MPIfR)\u7684\u535a\u58eb\u751f\u3002\u4ed6\u5728\u7ef4\u4e5f\u7eb3\u5927\u5b66\u83b7\u5f97\u5b66\u58eb\u5b66\u4f4d\uff0c\u5728\u6ce2\u6069\u5927\u5b66\u83b7\u5f97\u7855\u58eb\u5b66\u4f4d\u3002\u4ed6\u81f4\u529b\u4e8e\u7814\u7a76\u661f\u7cfb\u7684\u5f62\u6210\u548c\u6f14\u5316\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u5c40\u90e8\u5b87\u5b99\u4e2d\u7684\u5206\u5e03\uff0c\u4ee5\u68c0\u9a8c\u4e0d\u540c\u7684\u5b87\u5b99\u5b66\u6a21\u578b\u548c\u5f15\u529b\u7406\u8bba\u3002Pavel Krou\u6559\u6388", "note_en": "The following is a guest post by Indranil Banik, Moritz Haslbauer, and Pavel Kroupa (bios at end) based on their new paper\n  Cosmology is currently in a major crisis because of  many severe tensions, the most serious and well-known being that local observations of how quickly the Universe is expanding (the so-called \u2018Hubble constant\u2019) exceed the prediction of the standard cosmological model, \u039bCDM. This prediction is based on the cosmic microwave background (CMB), the most ancient light we can observe \u2013 which is generally thought to have been emitted about 400,000 years after the Big Bang. For \u039bCDM to fit the pattern of fluctuations observed in the CMB by the Planck satellite and other experiments, the Hubble constant must have a particular value of 67.4 \u00b1 0.5 km/s/Mpc. Local measurements are nearly all above this \u2018Planck value\u2019, but are consistent with each other. In our paper, we use a local value of 73.8 \u00b1 1.1 km/s/Mpc using a combination of supernovae and gravitationally lensed quasars, two particularly precise yet independent techniques.\n This unexpectedly rapid local expansion of the Universe could be due to us residing in a huge underdense region, or void. However, a void wide and deep enough to explain the Hubble tension is not possible in \u039bCDM, which is built on Einstein\u2019s theory of gravity, General Relativity. Still, there is quite strong evidence that we are indeed living within a large void with a radius of about 300 Mpc, or one billion light years. This evidence comes from many surveys covering the whole electromagnetic spectrum, from radio to X-rays. The most compelling evidence comes from analysis of galaxy number counts in the near-infrared, giving the void its name of the  Keenan-Barger-Cowie (KBC) void. Gravity from matter outside the void would pull more than matter inside it, making the Universe appear to expand faster than it actually is for an observer inside the void. This \u2018Hubble bubble\u2019 scenario (depicted in Figure 1) could solve the Hubble tension, a possibility considered \u2013 and rejected \u2013 in several previous works (e.g.  Kenworthy+ 2019). We will return to their objections against this idea.\n  One of the main objections seemed to be that since such a large and deep void is incompatible with \u039bCDM, it can\u2019t exist. This is a  common way of thinking, but the problem with it was clear to us from a very early stage. The first part of this logic is sound \u2013 assuming General Relativity, a hot Big Bang, and that the state of the Universe at early times is apparent in the CMB (i.e. it was flat and almost homogeneous then), we are led to the standard flat \u039bCDM model. By studying the largest suitable simulation of this model (called MXXL), we found that it should be completely impossible to find ourselves inside a void with the observed size and depth (or fractional underdensity) of the KBC void \u2013 this possibility can be rejected with more confidence than the discovery of the Higgs boson when first announced. We therefore applied one of the leading alternative gravity theories called Milgromian Dynamics ( MOND), a controversial idea developed in the early 1980s by Israeli physicist Mordehai Milgrom. We used MOND ( explained in a simple way here) to evolve a small density fluctuation forwards from early times, studying if 13 billion years later it fits the density and velocity field of the local Universe. Before describing our results, we briefly introduce MOND and explain how to use it in a potentially viable cosmological framework. Astronomers often assume MOND cannot be extended to cosmological scales (typically &gt;10 Mpc), which is probably true without some auxiliary assumptions. This is also the case for General Relativity, though in that case the scale where auxiliary assumptions become crucial is only a few kpc, namely in galaxies.\n MOND was originally designed to explain why galaxies rotate faster in their outskirts than they should if one applies General Relativity to their luminous matter distribution. This discrepancy gave rise to the idea of dark matter halos around individual galaxies. For dark matter to cluster on such scales, it would have to be \u2018cold\u2019, or equivalently consist of rather heavy particles (above a few thousand eV/c 2, or a millionth of a proton mass). Any lighter and the gravity from galaxies could not hold on to the dark matter. MOND assumes these speculative and unexplained cold dark matter haloes do not exist \u2013 the need for them is after all dependent on the validity of General Relativity. In MOND once the gravity from any object gets down to a certain very low threshold called a 0, it declines more gradually with increasing distance, following an inverse distance law instead of the usual inverse square law. MOND has successfully predicted many galaxy rotation curves, highlighting some remarkable correlations with their visible mass. This is unexpected if they mostly consist of invisible dark matter with quite different properties to visible mass. The Local Group satellite galaxy planes also strongly favour MOND over \u039bCDM, as explained using the logic of Figure 2 and in  this YouTube video.\n  To extend MOND to cosmology, we used what we call the \u03bdHDM framework (with \u03bd pronounced \u201cnu\u201d), originally proposed by  Angus (2009). In this model, the cold dark matter of \u039bCDM is replaced by the same total mass in sterile neutrinos with a mass of only 11 eV/c 2, almost a billion times lighter than a proton. Their low mass means they would not clump together in galaxies, consistent with the original idea of MOND to explain galaxies with only their visible mass. This makes the extra collisionless matter \u2018hot\u2019, hence the name of the model. But this collisionless matter would exist inside galaxy clusters, helping to explain unusual configurations like the Bullet Cluster and the unexpectedly strong gravity (even in MOND) in quieter clusters. Considering the universe as a whole, \u03bdHDM has the same overall matter content as \u039bCDM. This makes the overall expansion history of the universe very similar in both models, so both can explain the amounts of deuterium and helium produced in the first few minutes after the Big Bang. They should also yield similar fluctuations in the CMB because both models contain the same amount of dark matter. These fluctuations would get somewhat blurred by sterile neutrinos of such a low mass due to their rather fast motion in the early Universe. However, it has been demonstrated that Planck data are consistent with dark matter particles more massive than 10 eV/c 2. Crucially, we showed that the density fluctuations evident in the CMB typically yield a gravitational field strength of 21 a 0 (correcting an earlier erroneous estimate of 570 a 0 in the above paper), making the gravitational physics nearly identical to General Relativity. Clearly, the main lines of early Universe evidence used to argue in favour of \u039bCDM are not sufficiently unique to distinguish it from \u03bdHDM ( Angus 2009).\n The models nonetheless behave very differently later on. We estimated that for redshifts below about 50 (when the Universe is older than about 50 million years), the gravity would typically fall below a 0 thanks to the expansion of the Universe (the CMB comes from a redshift of 1100). After this \u2018MOND moment\u2019, both the ordinary matter and the sterile neutrinos would clump on large scales just like in \u039bCDM, but there would also be the extra gravity from MOND. This would cause structures to grow much faster (Figure 3), allowing much wider and deeper voids.\n  We used this basic framework to set up a dynamical model of the void. By making various approximations and trying different initial density profiles, we were able to simultaneously fit the apparent local Hubble constant, the observed density profile of the KBC void, and many other observables like the acceleration parameter, which we come to below. We also confirmed previous results that the same observables rule out standard cosmology at 7.09\u03c3 significance. This is much more than the typical threshold of 5\u03c3 used to claim a discovery in cases like the Higgs boson, where the results agree with prior expectations.\n One objection to our model was that a large local void would cause the apparent expansion of the Universe to accelerate at late times. Equivalently, observations that go beyond the void should see a standard Planck cosmology, leading to a step-like behaviour near the void edge. At stake is the so-called acceleration parameter  q 0 (which we defined oppositely to convention to correct a historical error). In \u039bCDM, we expect  q 0 = 0.55, while in general much higher values are expected in a Hubble bubble scenario. The objection of  Kenworthy+ (2019) was that since the observed  q 0 is close to 0.55, there is no room for a void. However, their data analysis fixed  q 0 to the \u039bCDM expectation, thereby removing any hope of discovering a deviation that might be caused by a local void. Other analyses (e.g.  Camarena &amp; Marra 2020b) which do not make such a theory-motivated assumption find  q 0 = 1.08, which is quite consistent with our best-fitting model (Figure 4). We also discussed other objections to a large local void, for instance the  Wu &amp; Huterer (2017) paper which did not consider a sufficiently large void, forcing the authors to consider a much deeper void to try and solve the Hubble tension. This led to some serious observational inconsistencies, but a larger and shallower void like the observed KBC void seems to explain the data nicely. In fact, combining all the constraints we applied to our model, the overall tension is only 2.53\u03c3, meaning the data have a 1.14% chance of arising if ours were the correct model. The actual observations are thus not the most likely consequence of our model, but could plausibly arise if it were correct. Given also the high likelihood that some if not all of the observational errors we took from publications are underestimates, this is actually a very good level of consistency.\n  Unlike other attempts to solve the Hubble tension, ours is unique in using an already existing theory (MOND) developed for a different reason (galaxy rotation curves). The use of unseen collisionless matter made of hypothetical sterile neutrinos is still required to explain the properties of galaxy clusters, which otherwise  do not sit well with MOND. In addition, these neutrinos provide an easy way to explain the CMB and background expansion history, though recently  Skordis &amp; Zlosnik (2020) showed that this is  possible in MOND with only ordinary matter. In any case, MOND is a theory of gravity, while dark matter is a hypothesis that more matter exists than meets the eye. The ideas could both be right, and should be tested separately.\n A dark matter-MOND hybrid thus appears to be a very promising way to resolve the current crisis in cosmology. Still, more work is required to construct a fully-fledged relativistic MOND theory capable of addressing cosmology. This could build on the theory proposed by  Skordis &amp; Zlosnik (2019) in which gravitational waves travel at the speed of light, which was considered to be a major difficulty for MOND. We argued that such a theory would enhance structure formation to the required extent under a wide range of plausible theoretical assumptions, but this needs to be shown explicitly starting from a relativistic MOND theory. Cosmological structure formation simulations are certainly required in this scenario \u2013 these are currently under way in Bonn. Further observations would also help greatly, especially of the matter density in the outskirts of the KBC void at distances of about 500 Mpc. This could hold vital clues to how quickly the void has grown, helping to pin down the behaviour of the sought-after MOND theory.\n There is now a very real prospect of obtaining a single theory that works across all astronomical scales, from the tiniest dwarf galaxies up to the largest structures in the Universe &amp; its overall expansion rate, and from a few seconds after the birth of the Universe until today. Rather than argue whether this theory looks more like MOND or standard cosmology, what we should really do is combine the best elements of both, paying careful attention to all observations.\n   Indranil Banik is a Humboldt postdoctoral fellow in the Helmholtz Institute for Radiation and Nuclear Physics (HISKP) at the University of Bonn, Germany. He did his undergraduate and masters at Trinity College, Cambridge, and his PhD at Saint Andrews under Hongsheng Zhao. His research focuses on testing whether gravity continues to follow the Newtonian inverse square law at the low accelerations typical of galactic outskirts, with MOND being the best-developed alternative.\n Moritz Haslbauer is a PhD student at the Max Planck Institute for Radio Astronomy (MPIfR) in Bonn. He obtained his undergraduate degree from the University of Vienna and his masters from the University of Bonn. He works on the formation and evolution of galaxies and their distribution in the local Universe in order to test different cosmological models and gravitational theories. Prof. Pavel Kroupa is his PhD supervisor.\n Pavel Kroupa is a professor at the University of Bonn and professorem hospitem at Charles University in Prague. He went to school in Germany and South Africa, studied physics in Perth, Australia, and obtained his PhD at Trinity College, Cambridge, UK. He researches stellar populations and their dynamics as well as the dark matter problem, therewith testing gravitational theories and cosmological models.", "posttime": "2020-10-26 21:53:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ebb\u70e6,trouble,mond", "title": "\u6df1\u7a7a\u4e2d\u7684\u5927\u9ebb\u70e6", "title_en": "Big Trouble in a Deep Void", "transed": 1, "url": "https://tritonstation.com/2020/10/23/big-trouble-in-a-deep-void/", "via": "", "real_tags": ["\u9ebb\u70e6", "trouble", "mond"]}, {"category": "", "categoryclass": "", "imagename": "52b03383f830f67c707d01d620371549.png", "infoid": 1031224, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e8c\u96f6\u4e8c\u96f6\u5e74\u5341\u6708\u4e8c\u5341\u4e09\u65e5(\u661f\u671f\u4e94)", "note_en": "Friday, October 23, 2020", "posttime": "2020-10-26 21:52:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8868\u6f14\u8005,attention,\u5341\u6708", "title": "\u5bf9\u8868\u6f14\u8005\u6ce8\u610f\u529b\u7684\u518d\u601d\u8003", "title_en": "Rethinking Attention with Performers", "transed": 1, "url": "https://ai.googleblog.com/2020/10/rethinking-attention-with-performers.html", "via": "", "real_tags": ["\u8868\u6f14\u8005", "attention", "\u5341\u6708"]}, {"category": "", "categoryclass": "", "imagename": "ca041555eb481a719c19b6875f02f720.png", "infoid": 1031223, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5f88\u81ea\u8c6a\u5730\u5ba3\u5e03\uff0cReactOS Deutschland e.V.\u5df2\u7ecf\u8058\u8bf7\u6770\u7f57\u59c6\u00b7\u52a0\u675c(J\u00e9r\u00f4me Gardou)\u5728\u63a5\u4e0b\u6765\u76843\u4e2a\u6708\u91cc\u5168\u804c\u8d1f\u8d23ReactOS\u5185\u6838\u7684\u5185\u5b58\u7ba1\u7406\u3002\nJ\u00e9r\u00f4me\u662fReactOS\u7684\u8d44\u6df1\u4eba\u58eb\uff0c\u81ea2009\u5e74\u4ee5\u6765\u4e00\u76f4\u5728\u4e3a\u8be5\u9879\u76ee\u505a\u51fa\u8d21\u732e\u3002\u4ed6\u5bf9ReactOS\u7684\u51e0\u4e4e\u6240\u6709\u90e8\u5206\u90fd\u6709\u6df1\u539a\u7684\u4e13\u4e1a\u77e5\u8bc6\uff0c\u4ece\u5404\u79cd\u7528\u6237\u6a21\u5f0f\u7ec4\u4ef6(\u4e3b\u8981\u4e0e\u4f4e\u7ea7\u56fe\u5f62\u76f8\u5173)\u5230\u5185\u6838\u6a21\u5f0f\u7ec4\u4ef6\uff0c\u518d\u5230\u5185\u6838\u5185\u5b58\u7ba1\u7406\u5668\u7b49\u88f8\u673a\u7ec4\u4ef6\u3002\n\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\uff0cJ\u00e9r\u00f4me\u5c06\u5bf9\u5185\u6838\u7684\u5185\u5b58\u7ba1\u7406\u5668(Memory Manager)\u548c\u7f13\u5b58\u63a7\u5236\u5668(CC)\u7ec4\u4ef6\u8fdb\u884c\u5927\u4fee\uff0c\u8fd9\u4e24\u4e2a\u7ec4\u4ef6\u90fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u6d89\u53ca\u5230\u6bcf\u4e00\u4e2a\u5185\u5b58\u8bf7\u6c42\u548c\u6587\u4ef6\u64cd\u4f5c\uff0c\u6539\u8fdb\u540e\u6709\u671b\u5bf9ReactOS\u7684\u6574\u4f53\u7a33\u5b9a\u6027\u548c\u6027\u80fd\u4ea7\u751f\u5b9e\u8d28\u6027\u5f71\u54cd\u3002\n\u8c08\u5230\u5177\u4f53\u7684\u6280\u672f\u7ec6\u8282\uff0cJ\u00e9r\u00f4me\u9996\u5148\u60f3\u8ba9CC\u6210\u4e3aMm\u7684\u5ba2\u6237\u7aef\u3002\u4e0d\u50cfReactOS\u73b0\u5728\u90a3\u6837\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u8282\u521b\u5efa\u4e00\u4e2a\u7f13\u5b58\u9879\uff0c\u8ba9\u6211\u4eec\u53cd\u8fc7\u6765\u505a\uff1a\u4e3a\u6bcf\u4e2a\u7f13\u5b58\u7684\u6587\u4ef6\u521b\u5efa\u4e00\u4e2amm\u8282\uff0c\u5e76\u5728\u6587\u4ef6\u7cfb\u7edf\u9a71\u52a8\u7a0b\u5e8f\u8bf7\u6c42\u65f6\u5c06\u5176\u5206\u9875\u3002\u8fd9\u6709\u51e0\u4e2a\u597d\u5904\uff1a\n\u6211\u4eec\u5728CC\u4e2d\u4f7f\u7528\u8f83\u5c11\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u8282\u5c06\u4e0d\u518d\u521b\u5efa\u7f13\u5b58\u6761\u76ee\u3002\nReactOS\u5185\u6838\u7684\u4f53\u7cfb\u7ed3\u6784\u66f4\u63a5\u8fd1Windows\u539f\u59cb\u7248\u672c\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u517c\u5bb9\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002\n\u7b80\u5316\u4e86MM\u548cCC\u4e2d\u7684\u5f00\u53d1\uff0c\u56e0\u4e3a\u8be5\u6b65\u9aa4\u4f7f\u5185\u6838\u66f4\u52a0\u6a21\u5757\u5316\u3002\n\u63a5\u4e0b\u6765\u5c06\u628a\u6587\u4ef6\u8282\u521b\u5efa\u96c6\u6210\u5230\u201c\u73b0\u4ee3\u201dReactOS\u5185\u5b58\u7ba1\u7406\u5668(\u5185\u90e8\u79f0\u4e3aARM3)\u7684\u4ee3\u7801\u8def\u5f84\u4e2d\uff0c\u5c06\u9875\u9762\u6ce8\u518c\u5230\u8fdb\u7a0b\u5de5\u4f5c\u96c6\u4e2d\uff0c\u6700\u540e\u5b9e\u73b0\u7528\u4e8e\u6b63\u786e\u5185\u5b58\u5206\u9875\u7684\u7ebf\u7a0b\u3002\u5bf9\u4e8e\u76ee\u524d\u4ecd\u4e0d\u6e05\u695a\u7684\u90e8\u5206\uff0cJ\u00e9r\u00f4me\u8ba1\u5212\u7f16\u5199\u989d\u5916\u7684\u5185\u6838\u6a21\u5f0f\u6d4b\u8bd5\u3002\n\u8fd9\u4e00\u58f0\u660e\u662f\u5728\u6211\u4eec\u8058\u8bf7Victor Perevertkin\u5728\u5b58\u50a8\u5806\u6808\u4e0a\u5168\u804c\u5de5\u4f5c\u51e0\u4e2a\u6708\u540e\u53d1\u5e03\u7684\u3002\u4ed6\u4ecd\u5728\u4e3a\u6211\u4eec\u5de5\u4f5c\uff0c\u5373\u5c06\u5b8c\u6210\u5c06\u5185\u6838\u6a21\u5f0f\u9a71\u52a8\u7a0b\u5e8f\u6846\u67b6(KMDF)\u79fb\u690d\u5230ReactOS\uff0c\u8fd9\u5c06\u4f7f\u6211\u4eec\u80fd\u591f\u5229\u7528\u8bb8\u591a\u4e3aWindows\u7f16\u5199\u7684\u5f00\u6e90\u5b58\u50a8\u9a71\u52a8\u7a0b\u5e8f\u3002\n\u6709\u4e86\u4e24\u4e2a\u5168\u804c\u62db\u8058\uff0c2020\u5e74\u5bf9ReactOS\u9879\u76ee\u6765\u8bf4\u7edd\u5bf9\u662f\u5177\u6709\u91cc\u7a0b\u7891\u610f\u4e49\u7684\u4e00\u5e74\u3002\u975e\u5e38\u611f\u8c22\u6211\u4eec\u6177\u6168\u7684\u6350\u8d60\u8005\u4f7f\u8fd9\u6210\u4e3a\u53ef\u80fd\uff01\u4f60\u4eec\u7684\u6301\u7eed\u6350\u6b3e\u5df2\u7ecf\u4f7f\u6211\u4eec\u80fd\u591f\u8d44\u52a9\u4e24\u4e2a\u5f00\u53d1\u5546\uff0c\u5e76\u5e0c\u671b\u5728\u672a\u6765\u6709\u66f4\u591a\u7684\u5f00\u53d1\u5546\u3002", "note_en": "I proudly announce that ReactOS Deutschland e.V. has hired J\u00e9r\u00f4me Gardou to work full-time on the ReactOS kernel\u2019s memory manager for the next 3 months.\n J\u00e9r\u00f4me is a ReactOS veteran who has been contributing to the project since 2009.He has deep expertise into nearly all parts of ReactOS, ranging from various user-mode components (mostly related to low-level graphics) over their kernel-mode counterparts and down to bare-metal components like the kernel memory manager.\n During the upcoming months, J\u00e9r\u00f4me is going to overhaul the  Mm (Memory Manager) and  Cc (Cache Controller) components of the kernel.Both of them are core parts of the operating system, which are involved in every memory request and file operation.Improving them is expected to have a substantial effect on the overall stability and performance of ReactOS.\n Going into the nitty-gritty technical details, J\u00e9r\u00f4me first wants to make  Cc a client of  Mm.Instead of creating a cache entry for each file section (as ReactOS does right now), let\u2019s do it the other way round:Create an  Mm section for each cached file and page it in when the filesystem driver requests it.This has several benefits:\n We use less address space in  Cc, as each file section will not create a cache entry anymore.\n The ReactOS kernel\u2019s architecture gets closer to the Windows original, thereby improving compatibility and maintainability.\n Simplified development in both  Mm and  Cc, as that step makes the kernel more modular.\n The work will be followed by integrating file section creation into the code path of the \u201cmodern\u201d ReactOS memory manager (internally known as  ARM3), registering pages into process working sets, and finally implementing a thread for proper memory paging. For parts that are still unclear as of today, J\u00e9r\u00f4me plans to write additional kernel-mode tests.\n This announcement comes just a few months after we  hired Victor Perevertkin to work full-time on the storage stack.He is still working for us and just about to finish  porting the Kernel-Mode Driver Framework (KMDF) to ReactOS, which will enable us to leverage many open-source storage drivers written for Windows.\n With two full-time hirings, 2020 is definitely a landmark year for the ReactOS Project. Many thanks go out to our generous  donors for making this possible!Your  continued donations already enable us to finance two developers, and hopefully many more in the future.", "posttime": "2020-10-26 21:52:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u514d\u8d39,windows,\u5f00\u6e90,free,reactos", "title": "ReactOS(\u514d\u8d39\u5f00\u6e90Windows)\uff1aJ\u00e9r\u00f4me Gardou\u53d7\u96c7\u5168\u804c\u5de5\u4f5c", "title_en": "ReactOS (Free and Open Source Windows): J\u00e9r\u00f4me Gardou hired to work full-time", "transed": 1, "url": "https://reactos.org/project-news/jerome-gardou-hired-full-time/", "via": "", "real_tags": ["\u514d\u8d39", "windows", "\u5f00\u6e90", "free", "reactos"]}, {"category": "", "categoryclass": "", "imagename": "c6465f4bd30880dac3f3b3f4c1001843.jpeg", "infoid": 1031222, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f26\u6566(\u8def\u900f\u793e)-\u4e16\u754c\u9886\u5148\u7684\u65b0\u51a0\u80ba\u708e\u5b9e\u9a8c\u75ab\u82d7\u4e4b\u4e00\u5728\u5e74\u8f7b\u4eba\u548c\u8001\u5e74\u4eba\u4e2d\u90fd\u80fd\u4ea7\u751f\u514d\u75ab\u53cd\u5e94\uff0c\u8fd9\u63d0\u9ad8\u4e86\u4eba\u4eec\u5bf9\u8d70\u51fa\u8fd9\u79cd\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u9020\u6210\u7684\u60b2\u89c2\u548c\u7ecf\u6d4e\u7834\u574f\u7684\u5e0c\u671b\u3002\n\u5e2e\u52a9\u5236\u9020\u75ab\u82d7\u7684\u82f1\u56fd\u5236\u836f\u5546\u963f\u65af\u5229\u5eb7\u516c\u53f8(AstraZeneca Plc AZN.L)\u5468\u4e00\u8868\u793a\uff0c\u7531\u725b\u6d25\u5927\u5b66\u5f00\u53d1\u7684\u75ab\u82d7\u4e5f\u5728\u8001\u5e74\u4eba\u4e2d\u5f15\u53d1\u4e86\u8f83\u4f4e\u7684\u4e0d\u826f\u53cd\u5e94\u3002\n\u4e00\u79cd\u6709\u6548\u7684\u75ab\u82d7\u88ab\u89c6\u4e3a\u5bf9\u6297\u8fd9\u79cd\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u7684\u6e38\u620f\u89c4\u5219\u6539\u53d8\u8005\u3002\u8fd9\u79cd\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u5df2\u5bfc\u81f4115\u4e07\u591a\u4eba\u6b7b\u4ea1\uff0c\u5168\u7403\u7ecf\u6d4e\u5927\u7247\u5730\u533a\u5173\u95ed\uff0c\u6570\u5341\u4ebf\u4eba\u7684\u6b63\u5e38\u751f\u6d3b\u53d1\u751f\u4e86\u7ffb\u5929\u8986\u5730\u7684\u53d8\u5316\u3002\n\u963f\u65af\u5229\u5eb7\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8bf4\uff1a\u201c\u4ee4\u4eba\u9f13\u821e\u7684\u662f\uff0c\u8001\u5e74\u4eba\u548c\u5e74\u8f7b\u4eba\u7684\u514d\u75ab\u539f\u6027\u53cd\u5e94\u76f8\u4f3c\uff0c\u800c\u65b0\u51a0\u80ba\u708e\u75c5\u4e25\u91cd\u7a0b\u5ea6\u8f83\u9ad8\u7684\u8001\u5e74\u4eba\u7684\u53cd\u5e94\u6027\u8f83\u4f4e\u3002\u201d\n\u201c\u8fd9\u4e9b\u7ed3\u679c\u8fdb\u4e00\u6b65\u4e3aAZD1222\u7684\u5b89\u5168\u6027\u548c\u514d\u75ab\u539f\u6027\u5efa\u7acb\u4e86\u8bc1\u636e\uff0c\u201d\u8fd9\u4f4d\u53d1\u8a00\u4eba\u8bf4\uff0c\u4ed6\u6307\u7684\u662f\u75ab\u82d7\u7684\u6280\u672f\u540d\u79f0\u3002\n\u9884\u8ba1\u725b\u6d25/\u963f\u65af\u5229\u5eb7\u75ab\u82d7\u5c06\u662f\u5927\u578b\u5236\u836f\u516c\u53f8\u9996\u6279\u83b7\u5f97\u76d1\u7ba1\u6279\u51c6\u7684\u75ab\u82d7\u4e4b\u4e00\uff0c\u4e0e\u8f89\u745ePFE.N\u548c\u751f\u7269\u79d1\u6280\u768422UAy.F\u5019\u9009\u75ab\u82d7\u4e00\u6837\uff0c\u4e16\u754c\u6b63\u8bd5\u56fe\u5236\u5b9a\u51fa\u4e00\u6761\u6446\u8131\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\u7684\u9053\u8def\u3002\n\u8001\u5e74\u4eba\u4ece\u75ab\u82d7\u4e2d\u83b7\u5f97\u514d\u75ab\u5e94\u7b54\u7684\u6d88\u606f\u662f\u79ef\u6781\u7684\uff0c\u56e0\u4e3a\u514d\u75ab\u7cfb\u7edf\u968f\u7740\u5e74\u9f84\u7684\u589e\u957f\u800c\u51cf\u5f31\uff0c\u800c\u8001\u5e74\u4eba\u662f\u90a3\u4e9b\u6700\u6709\u53ef\u80fd\u6b7b\u4e8e\u75c5\u6bd2\u7684\u4eba\u3002\n\u5982\u679c\u6709\u6548\uff0c\u75ab\u82d7\u5c06\u4f7f\u4e16\u754c\u5728\u5927\u6d41\u884c\u7684\u52a8\u8361\u4e4b\u540e\u6062\u590d\u5230\u67d0\u79cd\u7a0b\u5ea6\u7684\u6b63\u5e38\u72b6\u6001\u3002\n\u82f1\u56fd\u536b\u751f\u5927\u81e3\u9a6c\u7279\u00b7\u6c49\u8003\u514b(Matt Hancock)\u8868\u793a\uff0c\u75ab\u82d7\u5c1a\u672a\u51c6\u5907\u597d\uff0c\u4f46\u4ed6\u6b63\u5728\u4e3a\u53ef\u80fd\u7684\u63a8\u51fa\u505a\u540e\u52e4\u51c6\u5907\uff0c\u4e3b\u8981\u662f\u57282021\u5e74\u4e0a\u534a\u5e74\u3002\n\u5f53\u88ab\u95ee\u53ca\u4e00\u4e9b\u4eba\u4eca\u5e74\u662f\u5426\u53ef\u4ee5\u63a5\u79cd\u75ab\u82d7\u65f6\uff0c\u4ed6\u544a\u8bc9BBC\uff1a\u201c\u6211\u4e0d\u6392\u9664\u8fd9\u4e00\u53ef\u80fd\u6027\uff0c\u4f46\u8fd9\u4e0d\u662f\u6211\u7684\u6838\u5fc3\u671f\u671b\u3002\u201d\n\u6c49\u8003\u514b\u8bf4\uff1a\u201c\u9879\u76ee\u8fdb\u5c55\u987a\u5229\uff0c(\u4f46)\u6211\u4eec\u8fd8\u6ca1\u6709\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u201d\n\u725b\u6d25\u75ab\u82d7\u7684\u7814\u7a76\u5de5\u4f5c\u4e8e1\u6708\u4efd\u5f00\u59cb\u3002\u8fd9\u79cd\u540d\u4e3aAZD1222\u6216ChAdOx1 nCoV-19\u7684\u75c5\u6bd2\u8f7d\u4f53\u75ab\u82d7\u662f\u7531\u4e00\u79cd\u5bfc\u81f4\u9ed1\u7329\u7329\u611f\u67d3\u7684\u666e\u901a\u611f\u5192\u75c5\u6bd2\u7684\u5f31\u5316\u7248\u672c\u5236\u6210\u7684\u3002\n\u9ed1\u7329\u7329\u611f\u5192\u75c5\u6bd2\u5df2\u7ecf\u88ab\u57fa\u56e0\u6539\u53d8\uff0c\u5305\u62ec\u51a0\u72b6\u75c5\u6bd2\u7528\u6765\u8fdb\u5165\u4eba\u7c7b\u7ec6\u80de\u7684\u6240\u8c13\u9489\u72b6\u86cb\u767d\u7684\u57fa\u56e0\u5e8f\u5217\u3002\u4eba\u4eec\u5e0c\u671b\uff0c\u5982\u679c\u4eba\u4f53\u518d\u6b21\u770b\u5230\u8fd9\u79cd\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\uff0c\u5b83\u5c31\u4f1a\u653b\u51fb\u5b83\u3002\n\u82f1\u56fd\u201c\u91d1\u878d\u65f6\u62a5\u201d\u65e9\u4e9b\u65f6\u5019\u62a5\u9053\uff0c\u5bf9\u4e00\u7ec4\u5e74\u9f84\u8f83\u5927\u7684\u53c2\u4e0e\u8005\u8fdb\u884c\u7684\u514d\u75ab\u539f\u6027\u8840\u6db2\u6d4b\u8bd5\u547c\u5e94\u4e867\u6708\u4efd\u53d1\u5e03\u7684\u6570\u636e\uff0c\u8be5\u6570\u636e\u663e\u793a\uff0c\u8be5\u75ab\u82d7\u572818\u5c81\u81f355\u5c81\u7684\u5065\u5eb7\u6210\u5e74\u4eba\u4e2d\u4ea7\u751f\u4e86\u201c\u5f3a\u5927\u7684\u514d\u75ab\u53cd\u5e94\u201d\u3002\n\u82f1\u56fd\u201c\u91d1\u878d\u65f6\u62a5\u201d\u79f0\uff0c\u8fd9\u4e00\u53d1\u73b0\u7684\u7ec6\u8282\u9884\u8ba1\u5c06\u5f88\u5feb\u53d1\u8868\u5728\u4e00\u672c\u4e34\u5e8a\u6742\u5fd7\u4e0a\u3002\u5b83\u6ca1\u6709\u900f\u9732\u51fa\u7248\u7269\u7684\u540d\u79f0\u3002\n\u77e5\u60c5\u4eba\u58eb\u8868\u793a\uff0c\u5bf9\u4e00\u90e8\u5206\u8001\u5e74\u53c2\u4e0e\u8005\u8fdb\u884c\u7684\u6240\u8c13\u514d\u75ab\u539f\u6027\u8840\u6db2\u6d4b\u8bd5\u7684\u7ed3\u679c\uff0c\u4e0e7\u6708\u4efd\u53d1\u5e03\u7684\u6570\u636e\u76f8\u547c\u5e94\uff0c\u8be5\u6570\u636e\u663e\u793a\uff0c\u8be5\u75ab\u82d7\u572818\u5c81\u81f355\u5c81\u7684\u5065\u5eb7\u6210\u5e74\u4eba\u4e2d\u4ea7\u751f\u4e86\u201c\u5f3a\u5927\u7684\u514d\u75ab\u53cd\u5e94\u201d\u3002\n\u968f\u7740\u963f\u65af\u5229\u5eb7(AstraZeneca)\u63a5\u8fd1\u516c\u5e03\u4e00\u9879\u665a\u671f\u4e34\u5e8a\u8bd5\u9a8c\u7684\u65e9\u671f\u7ed3\u679c\uff0c\u8be5\u516c\u53f8\u5df2\u4e0e\u4e16\u754c\u5404\u5730\u7684\u516c\u53f8\u548c\u653f\u5e9c\u7b7e\u7f72\u4e86\u51e0\u9879\u4f9b\u5e94\u548c\u5236\u9020\u534f\u8bae\u3002\n\u8be5\u516c\u53f8\u5468\u4e94\u8868\u793a\uff0c\u5728\u83b7\u5f97\u7f8e\u56fd\u76d1\u7ba1\u673a\u6784\u7684\u6279\u51c6\u540e\uff0c\u8be5\u516c\u53f8\u6062\u590d\u4e86\u5b9e\u9a8c\u6027\u75ab\u82d7\u5728\u7f8e\u56fd\u7684\u8bd5\u9a8c\u3002\n\u636e\u82f1\u56fd\u592a\u9633\u62a5\u5468\u4e00\u62a5\u9053\uff0c\u4f26\u6566\u4e00\u5bb6\u533b\u9662\u4fe1\u6258\u57fa\u91d1\u7684\u5de5\u4f5c\u4eba\u5458\u5df2\u88ab\u544a\u77e5\u51c6\u5907\u63a5\u79cd\u7b2c\u4e00\u6279\u725b\u6d25/\u963f\u65af\u5229\u5eb7(Oxford/AstraZeneca)\u75ab\u82d7\u3002", "note_en": "LONDON (Reuters) - One of the world\u2019s leading COVID-19 experimental vaccines produces a immune response in both young and old adults, raising hopes of a path out of the gloom and economic destruction wrought by the novel coronavirus.\n  The vaccine, developed by the University of Oxford, also triggers lower adverse responses among the elderly, British drug maker AstraZeneca Plc   AZN.L , which is helping manufacture the vaccine, said on Monday.\n A vaccine that works is seen as a game-changer in the battle against the novel coronavirus, which has killed more than 1.15 million people, shuttered swathes of the global economy and turned normal life upside down for billions of people.\n \u201cIt is encouraging to see immunogenicity responses were similar between older and younger adults and that reactogenicity was lower in older adults, where the COVID-19 disease severity is higher,\u201d an AstraZeneca spokesman said.\n \u201cThe results further build the body of evidence for the safety and immunogenicity of AZD1222,\u201d the spokesman said, referring to the technical name of the vaccine.\n  The Oxford/AstraZeneca vaccine is expected to be one of the first from big pharma to secure regulatory approval, along with Pfizer   PFE.N  and BioNTech&#39;s   22UAy.F  candidate, as the world tries to plot a path out of the COVID-19 pandemic.\n The news that older people get an immune response from the vaccine is positive because the immune system weakens with age and older people are those most at risk of dying from the virus.\n If it works, a vaccine would allow the world to return to some measure of normality after the tumult of the pandemic.\n British Health Secretary Matt Hancock said a vaccine was not yet ready but he was preparing logistics for a possible roll out mostly in the first half of 2021.\n  Asked if some people could receive a vaccine this year he told the BBC: \u201cI don\u2019t rule that out but that is not my central expectation.\u201d\n \u201cThe programme is progressing well, (but) we\u2019re not there yet,\u201d Hancock said.\n  Work began on the Oxford vaccine in January. Called AZD1222 or ChAdOx1 nCoV-19, the viral vector vaccine is made from a weakened version of a common cold virus that causes infections in chimpanzees.\n  The chimpanzee cold virus has been genetically changed to include the genetic sequence of the so-called spike protein which the coronavirus uses to gain entry to human cells. The hope is that the human body will then attack the novel coronavirus if it sees it again.\n Immunogenicity blood tests carried out on a subset of older participants echo data released in July which showed the vaccine generated \u201crobust immune responses\u201d in a group of healthy adults aged between 18 and 55, the Financial Times reported earlier.\n Details of the finding are expected to be published shortly in a clinical journal, the FT said. It did not name the publication.\n People aware of the results from so-called immunogenicity blood tests carried out on a subset of older participants say the findings echo data released in July that showed the vaccine generated \u201crobust immune responses\u201d in a group of healthy adults aged between 18 and 55.\n  AstraZeneca has signed several supply and manufacturing deals with companies and governments around the world as it gets closer to reporting early results of a late-stage clinical trial.\n It resumed the U.S. trial of the experimental vaccine after approval by U.S. regulators, the company said on Friday.\n Staff at a London hospital trust have been told to be ready to receive the first batches of the Oxford/AstraZeneca vaccine, The Sun newspaper reported on Monday.", "posttime": "2020-10-26 21:52:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75ab\u82d7,hopes", "title": "\u725b\u6d25\u75ab\u82d7\u63a5\u79cd\u6fc0\u53d1\u8001\u5c11\u514d\u75ab\u53cd\u5e94\uff0c\u75ab\u82d7\u5e0c\u671b\u4e0a\u5347", "title_en": "Vaccine hopes rise as Oxford jab prompts immune response among old and young", "transed": 1, "url": "https://www.reuters.com/article/us-health-coronavirus-astrazeneca-vaccin/oxford-covid-19-vaccine-prompts-immune-response-among-adults-old-and-young-astrazeneca-says-idUSKBN27B0IV", "via": "", "real_tags": ["\u75ab\u82d7", "hopes"]}, {"category": "", "categoryclass": "", "imagename": "ecf09d38283c2eb203af0e3d58afcdb9.jpg", "infoid": 1031221, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u745e\u58eb\u56fd\u5bb6\u94f6\u884c(SNB)\u548c\u56fd\u9645\u6e05\u7b97\u94f6\u884c(BIS)\u8ba1\u5212\u5728\u4eca\u5e74\u5e74\u5e95\u524d\u6d4b\u8bd5\u4e00\u79cd\u592e\u884c\u6570\u5b57\u8d27\u5e01(CBDC)\u3002", "note_en": "The Swiss National Bank (SNB) and the Bank for International Settlements (BIS) plan to test a central bank digital currency (CBDC) by the end of this year.", "posttime": "2020-10-26 21:52:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6570\u5b57,central,\u8d27\u5e01", "title": "\u745e\u58eb\u592e\u884c\uff0c\u56fd\u9645\u6e05\u7b97\u94f6\u884c\u8ba1\u5212\u5728\u4eca\u5e74\u5e74\u5e95\u524d\u6d4b\u8bd5\u6570\u5b57\u8d27\u5e01", "title_en": "Swiss central bank, BIS plan to test digital currency by the end of this year", "transed": 1, "url": "https://www.theblockcrypto.com/linked/82299/swiss-central-bank-bis-digital-currency-test", "via": "", "real_tags": ["\u6570\u5b57", "central", "\u8d27\u5e01"]}, {"category": "", "categoryclass": "", "imagename": "159d5a198349b51c9e4947861c3f9756.png", "infoid": 1031220, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5927\u7ea6\u4e00\u5e74\u524d\uff0c\u6211\u5f00\u59cb\u5f00\u53d1YoutubeExplde\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u5220\u9664YouTube\u89c6\u9891\u4e0a\u7684\u4fe1\u606f\u5e76\u8ba9\u4f60\u4e0b\u8f7d\u5b83\u4eec\u7684\u5e93\u3002\u6700\u521d\uff0c\u6211\u5f00\u53d1\u5b83\u7684\u4e3b\u8981\u52a8\u673a\u53ea\u662f\u4e3a\u4e86\u83b7\u5f97\u7ecf\u9a8c\uff0c\u56e0\u4e3a\u8fd9\u9879\u4efb\u52a1\u6d89\u53ca\u5230\u5927\u91cf\u7684\u7814\u7a76\u548c\u9006\u5411\u5de5\u7a0b\u3002\u5982\u4eca\uff0cYoutubeExplde\u53ef\u4ee5\u8bf4\u662f\u5904\u7406YouTube\u7684\u6700\u4e00\u81f4\u3001\u6700\u5065\u58ee\u7684.NET\u5e93\u3002\n\u7531\u4e8e\u8fd9\u5728\u8bb8\u591a\u65b0\u624b\u5f00\u53d1\u4eba\u5458\u4e2d\u662f\u4e00\u4e2a\u76f8\u5bf9\u6d41\u884c\u7684\u8ba8\u8bba\u8bdd\u9898\uff0c\u6211\u60f3\u6211\u53ef\u4ee5\u901a\u8fc7\u82b1\u51e0\u5341\u4e2a\u5c0f\u65f6\u76ef\u7740Chrome\u5f00\u53d1\u4eba\u5458\u5de5\u5177\u6765\u5206\u4eab\u6211\u627e\u5230\u7684\u77e5\u8bc6\uff0c\u4ece\u800c\u5e2e\u52a9\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u6ce8\uff1a\u5c3d\u7ba1\u8fd9\u91cc\u89e3\u91ca\u7684\u57fa\u672c\u539f\u5219\u4e0d\u592a\u53ef\u80fd\u6539\u53d8\uff0c\u4f46\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684\u4e00\u4e9b\u4fe1\u606f\u53ef\u80fd\u4f1a\u8fc7\u65f6\u3002\u8fd9\u7bc7\u6587\u7ae0\u4e0eYoutubeExplde v4.1(2018\u5e742\u670816\u65e5)\u76f8\u5173\u3002\n\u4e3a\u4e86\u67e5\u627e\u548c\u89e3\u6790\u5a92\u4f53\u6d41\uff0c\u60a8\u9700\u8981\u9996\u5148\u83b7\u53d6\u89c6\u9891\u5143\u6570\u636e\u3002\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u6700\u53ef\u9760\u7684\u65b9\u6cd5\u662f\u67e5\u8be2YouTube\u7684iframe embed API\u5185\u90e8\u4f7f\u7528\u7684Ajax\u7aef\u70b9\u3002\u683c\u5f0f\u5982\u4e0b\uff1ahttps://www.youtube.com/get_video_info?video_id={videoId}.\u3002\n\u8be5\u8bf7\u6c42\u53ef\u4ee5\u63a5\u53d7\u8bb8\u591a\u4e0d\u540c\u7684\u53c2\u6570\uff0c\u4f46\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u89c6\u9891ID-/watch\uff1fv=\u4e4b\u540e\u7684URL\u4e2d\u7684\u503c\uff0c\u4f8b\u5982e_S9VvJM1PI\u3002\n\u54cd\u5e94\u5305\u542bURL\u7f16\u7801\u7684\u5143\u6570\u636e\uff0c\u5fc5\u987b\u5148\u5bf9\u5176\u8fdb\u884c\u89e3\u7801\u624d\u80fd\u4f7f\u7528\u3002\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u53c2\u6570\u540d\u79f0\u6620\u5c04\u5230\u5b57\u5178\u4e2d\u7684\u503c\uff0c\u4ee5\u4fbf\u4e8e\u8bbf\u95ee\u3002\u67d0\u4e9b\u53c2\u6570\u503c\u672c\u8eab\u5c31\u662f\u5d4c\u5957\u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f9d\u6b21\u5c06\u5b83\u4eec\u6620\u5c04\u5230\u5d4c\u5957\u5b57\u5178\u3002\n\u5982\u60a8\u6240\u89c1\uff0c\u6709\u76f8\u5f53\u591a\u7684\u4fe1\u606f\u53ef\u4ee5\u7acb\u5373\u63d0\u53d6\u3002\n\u6211\u4eec\u8fd8\u6765\u770b\u4e00\u4e0b\u6b64\u8bf7\u6c42\u53ef\u4ee5\u91c7\u7528\u7684\u4e00\u4e9b\u91cd\u8981\u53ef\u9009\u53c2\u6570\uff1a\nHL-\u7528\u4e8e\u672c\u5730\u5316\u67d0\u4e9b\u5b57\u7b26\u4e32\u7684\u533a\u57df\u6027\u7684\u540d\u79f0\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u9ed8\u8ba4\u4e3a\u4ece\u60a8\u7684IP\u63a8\u65ad\u7684\u533a\u57df\u6027\u3002\u4f7f\u7528hl=en\u5728\u6240\u6709\u5b57\u7b26\u4e32\u4e0a\u5f3a\u5236\u4f7f\u7528\u82f1\u8bed\u3002\n\u53d1\u51fa\u8bf7\u6c42\u7684YouTube\u9875\u9762\u7684EL\u7c7b\u578b\u3002\u8fd9\u51b3\u5b9a\u4e86\u54cd\u5e94\u4e2d\u5c06\u63d0\u4f9b\u4ec0\u4e48\u7c7b\u578b\u7684\u4fe1\u606f\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u9700\u8981\u6839\u636e\u89c6\u9891\u7c7b\u578b\u5c06\u6b64\u53c2\u6570\u8bbe\u7f6e\u4e3a\u67d0\u4e2a\u503c\uff0c\u4ee5\u907f\u514d\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a\u5d4c\u5165\u5f0f\u3002\nSTS-\u67d0\u79cd\u4f1a\u8bdd\u6807\u8bc6\u7b26\uff0c\u7528\u4e8e\u5728\u8bf7\u6c42\u4e4b\u95f4\u540c\u6b65\u4fe1\u606f\u3002\u9ed8\u8ba4\u4e3a\u7a7a\u3002\nEl\u8bf7\u6c42\u53c2\u6570\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u503c\uff0c\u5b83\u4f1a\u5f71\u54cd\u60a8\u5c06\u63a5\u6536\u4f5c\u4e3a\u54cd\u5e94\u7684\u6570\u636e\u7c7b\u578b\u3002\u4e0d\u8fc7\uff0c\u771f\u6b63\u91cd\u8981\u7684\u53ea\u6709\u51e0\u4e2a\uff0c\u6240\u4ee5\u6211\u5c06\u5728\u8fd9\u91cc\u5217\u51fa\u5b83\u4eec\uff1a\nEmbedded\uff0c\u9ed8\u8ba4\u503c\u3002YouTube\u5728\u8bf7\u6c42\u5d4c\u5165\u89c6\u9891\u7684\u4fe1\u606f\u65f6\u4f7f\u7528\u6b64\u529f\u80fd\u3002\u4e0d\u9002\u7528\u4e8e\u4e0d\u53ef\u5d4c\u5165\u7684\u89c6\u9891\uff0c\u4f46\u9002\u7528\u4e8e\u5e74\u9f84\u9650\u5236\u7684\u89c6\u9891\u3002\n\u66ff\u4ee3\u503cDetail Page\u5305\u542b\u66f4\u591a\u4fe1\u606f\u3002\u76f8\u53cd\uff0c\u9002\u7528\u4e8e\u4e0d\u53ef\u5d4c\u5165\u7684\u89c6\u9891\uff0c\u4f46\u4e0d\u9002\u7528\u4e8e\u5e74\u9f84\u9650\u5236\u7684\u89c6\u9891\u3002\nYoutubeExplde\u5bf9\u7b2c\u4e00\u4e2a\u67e5\u8be2\u4f7f\u7528el=Embedded\u3002\u5982\u679c\u7531\u4e8e\u65e0\u6cd5\u5d4c\u5165\u89c6\u9891\u800c\u5931\u8d25\uff0c\u5219\u4f1a\u4f7f\u7528el=DetailPage\u91cd\u8bd5\u3002\n\u9519\u8bef\u4ee3\u7801\u4f3c\u4e4e\u975e\u5e38\u901a\u7528\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e0d\u662f100\u5c31\u662f150\uff0c\u56e0\u6b64\u5b83\u4eec\u5728\u786e\u5b9a\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\u65f6\u7528\u5904\u4e0d\u5927\u3002\n\u6709\u4e9b\u89c6\u9891\u9700\u8981\u8d2d\u4e70\u540e\u624d\u80fd\u89c2\u770b\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5c06\u4f1a\u6709\uff1a\n\u591a\u8def\u590d\u7528(\u591a\u8def\u590d\u7528)\u6d41\u662f\u5728\u540c\u4e00\u6d41\u4e2d\u540c\u65f6\u5305\u542b\u89c6\u9891\u548c\u97f3\u9891\u8f68\u9053\u7684\u7c7b\u578b\u3002YouTube\u53ea\u63d0\u4f9b\u4f4e\u8d28\u91cf\u7684\u6d41\u5a92\u4f53--\u6700\u597d\u7684\u662f720p30\u3002\n\u8fd9\u4e9b\u6d41\u7684\u5143\u6570\u636e\u5305\u542b\u5728\u524d\u9762\u63d0\u5230\u7684url_encode_fmt_stream_map\u53c2\u6570\u5185\u7684URL\u7f16\u7801\u54cd\u5e94\u4e2d\u3002\u8981\u63d0\u53d6\u5b83\uff0c\u60a8\u53ea\u9700\u5c06\u503c\u62c6\u5206\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u90e8\u5206\u8fdb\u884cURL\u89e3\u7801\u3002\n\u6ce8\u610f\uff1a\u6211\u9047\u5230\u8fc7\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u4e00\u4e9b\u591a\u8def\u6570\u636e\u6d41\u5c3d\u7ba1\u4ecd\u51fa\u73b0\u5728\u5143\u6570\u636e\u4e2d\uff0c\u4f46\u4ecd\u88ab\u5220\u9664\u3002\u56e0\u6b64\uff0c\u5efa\u8bae\u53d1\u9001Head\u8bf7\u6c42\uff0c\u68c0\u67e5\u6bcf\u6761\u6d41\u662f\u5426\u4ecd\u7136\u53ef\u7528\u3002\u60a8\u8fd8\u53ef\u4ee5\u5728\u67e5\u770b\u5185\u5bb9\u65f6\u83b7\u53d6\u5185\u5bb9\u957f\u5ea6\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5b58\u5728\u4e8e\u5143\u6570\u636e\u4e2d\u3002\nYouTube\u8fd8\u4f7f\u7528\u7eaf\u89c6\u9891\u6d41\u548c\u7eaf\u97f3\u9891\u6d41\u3002\u8fd9\u4e9b\u4ea7\u54c1\u5177\u6709\u6700\u9ad8\u7684\u53ef\u7528\u8d28\u91cf\uff0c\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002\n\u7c7b\u4f3c\u4e8e\u591a\u8def\u590d\u7528\u7684\u6d41\uff0c\u53ef\u4ee5\u4eceAdaptive_fmts\u53c2\u6570\u4e2d\u63d0\u53d6\u8fd9\u4e9b\u6d41\u7684\u5143\u6570\u636e\u3002\u4e0b\u9762\u662f\u5b83\u7684\u5916\u89c2\uff1a\n\u81ea\u9002\u5e94\u6d41\u5177\u6709\u7565\u5fae\u6269\u5c55\u7684\u4e00\u7ec4\u5c5e\u6027\u3002\u6211\u5c06\u5217\u51fa\u4e00\u4e9b\u6709\u7528\u7684\u4fe1\u606f\uff1a\n\u89c6\u9891\u4fe1\u606f\u53ef\u80fd\u5728dashmpd\u53c2\u6570\u4e2d\u5305\u542b\u7834\u6298\u53f7\u6e05\u5355\u7684URL\u3002\u5b83\u5e76\u4e0d\u603b\u662f\u5b58\u5728\uff0c\u6709\u4e9b\u89c6\u9891\u53ef\u80fd\u6839\u672c\u5c31\u6ca1\u6709\u5b83\u3002\n\u8981\u89e3\u6790\u8fd9\u4e9b\u6d41\u7684\u5143\u6570\u636e\uff0c\u60a8\u9700\u8981\u9996\u5148\u4f7f\u7528\u63d0\u4f9b\u7684URL\u4e0b\u8f7d\u6e05\u5355\u3002\u6709\u65f6\u8d27\u5355\u53ef\u4ee5\u53d7\u5230\u4fdd\u62a4\u3002\u5982\u679c\u662f\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u5728URL\u4e2d\u627e\u5230\u7b7e\u540d-\u5b83\u662f/s/\u540e\u9762\u7528\u659c\u6760\u5206\u9694\u7684\u503c\u3002\nDASH\u4e2d\u7684\u6d41\u4e5f\u53ef\u4ee5\u5206\u6bb5-\u6bcf\u4e2a\u5206\u6bb5\u4ece\u7ed9\u5b9a\u70b9\u5f00\u59cb\uff0c\u4ec5\u6301\u7eed\u4e00\u5230\u4e24\u79d2\u3002\u8fd9\u662f\u60a8\u7684\u6d4f\u89c8\u5668\u5728YouTube\u4e0a\u64ad\u653e\u89c6\u9891\u65f6\u901a\u5e38\u4f7f\u7528\u7684\u7c7b\u578b-\u5b83\u4f7f\u5176\u53ef\u4ee5\u6839\u636e\u7f51\u7edc\u6761\u4ef6\u8f7b\u677e\u8c03\u6574\u8d28\u91cf\u3002\u5206\u6bb5\u6d41\u4e5f\u7528\u4e8e\u76f4\u64ad\u89c6\u9891\u3002\u4e0d\u8fc7\uff0c\u8fd9\u7bc7\u6587\u7ae0\u4e0d\u4f1a\u6d89\u53ca\u5b83\u4eec\uff0c\u56e0\u4e3a\u4e0b\u8f7d\u89c6\u9891\u4e0d\u9700\u8981\u5bf9\u5b83\u4eec\u8fdb\u884c\u5904\u7406\u3002\n\u7834\u6298\u53f7\u6e05\u5355\u9075\u5faa\u6b64XML\u6a21\u5f0f\u3002\u5982\u679c\u904d\u5386\u7c7b\u578b\u8868\u793a\u7684\u6240\u6709\u5b50\u4ee3\u8282\u70b9\uff0c\u5219\u53ef\u4ee5\u89e3\u6790\u6d41\u5143\u6570\u636e\u3002\u4e0b\u9762\u662f\u5b83\u4eec\u7684\u663e\u793a\u65b9\u5f0f\uff1a\nHttps://r12---sn-3c27sn7k.googlevideo.com/videoplayback?id=7bf4bd56f24cd4f2 ITAG=133source=Youtube requressl=yes ei=Bt4VWqLOJMT3NI3qjPgB ms=au gcr=ua mv=mpl=24 mn=sn-3c27sn7k initcwndbps=1143750 mm=31 nh=IgpwcjAxLmticDAxKgkxMjcuMC4wLjE\u901f\u7387\u7ed5\u8fc7=yes MIME=\u89c6\u9891/MP4gir=yes clen=4436318 lmt=1507180947831345 dur=183.850 mt=1511382418\u5bc6\u94a5=dg_yt0 s=7227CB6B79F7C702BB11275F9D71C532EB7E72046.DD6F06570E470E0E8384F74B879F79475D023A64A64 signature=254E9E06DF034BC66D29B39523F84B33D5940EE3.1F4C8A5645075A228BB0C2D87F71477F6ABFFA99 ip=255.255.255.255 ipbit=0=1511404params=ip\uff0cipbit\uff0cexpire\uff0cid\uff0citag\uff0csource\uff0csource\uff0cressl\uff0cms\uff0cgcr\uff0cmv\uff0cpl\uff0cmn\uff0cinitcitcndbps\uff0cmm\uff0cmm\uff0cnh\uff0c\u65c1\u8def\uff0cMIMIR\uff0cgir\uff0cclen\uff0cdur=183.850 mt=1511382418\u5bc6\u94a5=dg_yt0\u5bc6\u94a5=255.255.255.255 ipbit=0=151144params=ip\uff0cipbit\uff0c\u8fc7\u671f\uff0cid\uff0citag\uff0c\u6e90\uff0c\u8bf7\u6c42ressl\uff0cmm\uff0cms\uff0cgcr\uff0cmv\uff0cpl\uff0cmn\uff0cinitcitcnbps\uff0cmm\uff0cmm\uff0cnh\uff0c\u65c1\u8def\uff0cMIMIR\uff0cgir\uff0cclen\uff0cdur=183.850 mt=1511382418\u3002\n\u6ce8\u610f\uff1a\u4e0d\u8981\u8bd5\u56fe\u4ececontentLength\u5c5e\u6027\u4e2d\u63d0\u53d6\u5185\u5bb9\u957f\u5ea6\uff0c\u56e0\u4e3a\u5b83\u5e76\u4e0d\u603b\u662f\u51fa\u73b0\u5728&lt\uff1bBaseURL&gt\uff1b\u6807\u8bb0\u4e0a\u3002\u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6839\u636eURL\u4e2dclen\u67e5\u8be2\u53c2\u6570\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002\n\u60a8\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u6709\u4e9b\u89c6\u9891(\u4e3b\u8981\u662f\u901a\u8fc7\u9a8c\u8bc1\u9891\u9053\u4e0a\u4f20\u7684\u89c6\u9891)\u662f\u53d7\u4fdd\u62a4\u7684\u3002\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u7684\u5a92\u4f53\u6d41\u548c\u7834\u6298\u53f7\u6e05\u5355\u4e0d\u80fd\u901a\u8fc7URL\u76f4\u63a5\u8bbf\u95ee-\u800c\u662f\u8fd4\u56de403\u9519\u8bef\u4ee3\u7801\u3002\u4e3a\u4e86\u80fd\u591f\u8bbf\u95ee\u5b83\u4eec\uff0c\u60a8\u9700\u8981\u89e3\u5bc6\u5b83\u4eec\u7684\u7b7e\u540d\uff0c\u7136\u540e\u9002\u5f53\u5730\u4fee\u6539URL\u3002\n\u5bf9\u4e8e\u591a\u8def\u590d\u7528\u548c\u81ea\u9002\u5e94\u6d41\uff0c\u7b7e\u540d\u662f\u63d0\u53d6\u7684\u5143\u6570\u636e\u7684\u4e00\u90e8\u5206\u3002\u4eea\u8868\u6d41\u672c\u8eab\u6c38\u8fdc\u4e0d\u4f1a\u53d7\u5230\u4fdd\u62a4\uff0c\u4f46\u5b9e\u9645\u7684\u6e05\u5355\u53ef\u80fd\u4f1a\u53d7\u5230\u4fdd\u62a4-\u7b7e\u540d\u4f5c\u4e3aURL\u7684\u4e00\u90e8\u5206\u5b58\u50a8\u3002\n\u7b7e\u540d\u662f\u7531\u4e24\u4e2a\u7531\u53e5\u70b9\u5206\u9694\u7684\u5927\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u5e8f\u5217\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f8b\u5b50\uff1a537513BBC517D8643EBF25887256DAACD7521090.AE6A48F177E7B0E8CD85D077E5170BFD83BEDE6BE6C6C.\n\u5f53\u60a8\u7684\u6d4f\u89c8\u5668\u6253\u5f00YouTube\u89c6\u9891\u65f6\uff0c\u5b83\u4f1a\u4f7f\u7528\u64ad\u653e\u5668\u6e90\u4ee3\u7801\u4e2d\u5b9a\u4e49\u7684\u4e00\u7ec4\u64cd\u4f5c\u6765\u8f6c\u6362\u8fd9\u4e9b\u7b7e\u540d\uff0c\u5e76\u5c06\u7ed3\u679c\u4f5c\u4e3a\u9644\u52a0\u53c2\u6570\u653e\u5165URL\u4e2d\u3002\u8981\u5728\u4ee3\u7801\u4e2d\u91cd\u590d\u76f8\u540c\u7684\u8fc7\u7a0b\uff0c\u60a8\u9700\u8981\u627e\u5230\u89c6\u9891\u4f7f\u7528\u7684\u64ad\u653e\u5668\u7684JavaScript\u6e90\u5e76\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002\n\u6bcf\u4e2a\u89c6\u9891\u4f7f\u7528\u7684\u64ad\u653e\u5668\u7248\u672c\u7565\u6709\u4e0d\u540c\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u9700\u8981\u786e\u5b9a\u4e0b\u8f7d\u54ea\u4e2a\u7248\u672c\u3002\u5982\u679c\u60a8\u83b7\u5f97\u89c6\u9891\u5d4c\u5165\u9875\u9762\u7684HTML\uff0c\u60a8\u53ef\u4ee5\u641c\u7d22&#34\uff1bjs&#34\uff1b\uff1a\u6765\u67e5\u627e\u5305\u542b\u64ad\u653e\u5668\u76f8\u5bf9\u6e90\u4ee3\u7801URL\u7684JSON\u5c5e\u6027\u3002\u4e00\u65e6\u4f60\u4e3ayoutube\u7684\u4e3b\u673a\u6dfb\u52a0\u4e86\u524d\u7f00\uff0c\u4f60\u6700\u7ec8\u4f1a\u5f97\u5230\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u7f51\u5740\uff1ahttps://www.youtube.com/yts/jsbin/player-vflYXLM5n/en_US/base.js.\u3002\n\u9664\u4e86\u83b7\u53d6\u64ad\u653e\u5668\u6e90URL\u4e4b\u5916\uff0c\u60a8\u8fd8\u9700\u8981\u83b7\u53d6\u540d\u4e3aSTS\u7684\u4e1c\u897f\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u662f\u67d0\u79cd\u4f1a\u8bdd\u4ee4\u724c\u3002\u60a8\u9700\u8981\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u53d1\u9001\u5230\u524d\u9762\u63d0\u5230\u7684GET_VIDEO_INFO\u7aef\u70b9-\u8fd9\u5c06\u786e\u4fdd\u8fd4\u56de\u7684\u5143\u6570\u636e\u5bf9\u4e8e\u8be5\u64ad\u653e\u5668\u4e0a\u4e0b\u6587\u6709\u6548\u3002\u60a8\u53ef\u4ee5\u7c7b\u4f3c\u5730\u63d0\u53d6sts\u7684\u503c\uff0c\u53ea\u9700\u641c\u7d22&#34\uff1bsts&#34\uff1b\uff1a\u5c31\u53ef\u4ee5\u627e\u5230\u5b83\u3002\n\u627e\u5230\u6e90\u4ee3\u7801URL\u5e76\u4e0b\u8f7d\u540e\uff0c\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u9009\u62e9\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u89e3\u6790\u5b83\u3002\n\u6211\u4e0d\u4f1a\u4e00\u6b65\u4e00\u6b65\u5730\u89e3\u91ca\u60a8\u5230\u5e95\u9700\u8981\u505a\u4ec0\u4e48\uff0c\u800c\u53ea\u662f\u4eceYoutubeExplde\u590d\u5236\u4e00\u5c0f\u90e8\u5206\u6e90\u4ee3\u7801\u3002\u6211\u4e00\u5b9a\u4f1a\u5c3d\u6211\u6240\u80fd\u5bf9\u5b83\u8fdb\u884c\u8bc4\u8bba\uff0c\u6240\u4ee5\u5b83\u5e94\u8be5\u5f88\u5bb9\u6613\u7406\u89e3\u3002\n\u79c1\u6709\u5f02\u6b65GetCipherOperationsAsync(SourceUrl){//\u83b7\u53d6\u64ad\u653e\u5668\u6e90\u4ee3\u7801sourceRaw=await_httpClient\u3002GetStringAsync(SourceUrl)\uff1b//\u627e\u5230\u5904\u7406\u89e3\u5bc6Entry Point=Regex\u7684\u51fd\u6570\u540d\u79f0\u3002Match(SourceRaw\uff0c@&#34\uff1b\\bc\\s*&amp\uff1b&amp\uff1b\\s*d\\.Set\\([^\uff0c]+\uff0c\\s*(\uff1f\uff1aencodeURIComponent\\s*\\()\uff1f\\s*([\\w$]+)\\(&#34\uff1b).Groups[1].value\uff1bif(String.\u3002IsNullOrWhiteSpace(\u5165\u53e3\u70b9)\u629b\u51fanew(&#34\uff1b\u627e\u4e0d\u5230\u7528\u4e8e\u7b7e\u540d\u89e3\u5bc6\u7684\u5165\u53e3\u51fd\u6570\u3002&#34\uff1b)\uff1b//\u627e\u5230\u51fd\u6570entryPointBody=Regex\u7684\u6b63\u6587\u3002Match(sourceRaw\uff0c@&#34\uff1b(\uff1f\uff01h\\.)&#34\uff1b+Regex.\u3002\u8f6c\u4e49(\u5165\u53e3\u70b9)+@&#34\uff1b=\u51fd\u6570\\(\\w+\\)\\{(.*\uff1f)\\}&#34\uff1b\uff0cRegexOptions.Singleline).Groups[1].value\uff1bif(String.\u3002IsNullOrWhiteSpace(EntryPointBody)\u5f15\u53d1new(&#34\uff1b\u627e\u4e0d\u5230\u7b7e\u540d\u89e3\u5bc6\u5668\u51fd\u6570\u4f53\u3002&#34\uff1b)\uff1bentryPointLines=entryPointBody\u3002Split(&#34\uff1b\uff1b&#34\uff1b)\uff1b//\u8bc6\u522b\u5bc6\u7801\u51fd\u6570verseFuncName=NULL\uff1bsliceFuncName=NULL\uff1bcharSwapFuncName=NULL\uff1bOperations=new()\uff1b//\u5206\u6790\u51fd\u6570\u4f53\u4ee5\u786e\u5b9a\u5bc6\u7801\u51fd\u6570\u7684\u540d\u79f0foreach(entryPointLines\u4e2d\u7684\u884c){//\u5982\u679c(\uff01\u5b57\u7b26\u4e32\u3002IsNullOrWhiteSpace(ReverseFuncName)&amp\uff1b&amp\uff1b\uff01\u5b57\u7b26\u4e32\u3002IsNullOrWhiteSpace(SliceFuncName)&amp\uff1b&amp\uff1b\uff01\u5b57\u7b26\u4e32\u3002IsNullOrWhiteSpace(CharSwapFuncName))Break\uff1b//\u83b7\u53d6\u6b64\u884c\u8c03\u7528\u7684\u51fd\u6570\uff0c\u540d\u4e3aFuncName=Regex\u3002Match(line\uff0c@&#34\uff1b\\w+\\.(\\W+)\\(&#34\uff1b).Groups[1].value\uff1bif(String.\u3002IsNullOrWhiteSpace(CalledFuncName))Continue\uff1b//\u67e5\u627e\u5bc6\u7801\u51fd\u6570\u540d\u79f0if(regex.\u3002IsMatch(sourceRaw\uff0c$@&#34\uff1b{regex.\u3002\u8f6c\u4e49(CalledFuncName)}\uff1a\\bfunction\\b\\(\\w+\\)&#34\uff1b)){verse seFuncName=calledFuncName\uff1b}Else if(Regex.\u3002IsMatch(sourceRaw\uff0c$@&#34\uff1b{regex.\u3002\u8f6c\u4e49(CalledFuncName)}\uff1a\\bfunction\\b\\([a]\uff0cb\\).(\\breTurn\\b)\uff1f.\\W+\\.&#34\uff1b){sliceFuncName=calledFuncName\uff1b}Else if(Regex.\u3002IsMatch(sourceRaw\uff0c$@&#34\uff1b{regex.\u3002ESCAPE(CalledFuncName)}\uff1a\\bfunction\\b\\(\\w+\\\uff0c\\w\\).\\bvar\\b.\\bc=a\\b&#34\uff1b){charSwapFuncName=calledFuncName\uff1b}}//\u518d\u6b21\u5206\u6790\u51fd\u6570\u4f53\u4ee5\u786e\u5b9a\u64cd\u4f5c\u96c6\u5e76\u5bf9foreach\u6392\u5e8f(entryPointLines\u4e2d\u7684\u884c){//\u83b7\u53d6\u6b64\u884c\u8c03\u7528\u7684\u540d\u4e3adFuncName=regex\u7684\u51fd\u6570\u3002Match(line\uff0c@&#34\uff1b\\w+\\.(\\W+)\\(&#34\uff1b).Groups[1].value\uff1bif(String.\u3002IsNullOrWhiteSpace(CalledFuncName))\u7ee7\u7eed\uff1b//\u5982\u679c(calledFuncName==charSwapFuncName){index=int.\u3002Parse(Regex.\u3002\u5339\u914d(line\uff0c@&#34\uff1b\\(\\w+\uff0c(\\d+)\\)&#34\uff1b).Groups[1].value)\uff1b\u64cd\u4f5c\u3002Add(new(Index))\uff1b}//\u5207\u7247\u64cd\u4f5c(\u8fd4\u56de\u7d22\u5f15\u5904\u7684\u5b50\u5b57\u7b26\u4e32)\uff0c\u5426\u5219if(calledFuncName==sliceFuncName){index=int\u3002Parse(Regex.\u3002\u5339\u914d(line\uff0c@&#34\uff1b\\(\\w+\uff0c(\\d+)\\)&#34\uff1b).Groups[1].value)\uff1b\u64cd\u4f5c\u3002Add(new(Index))\uff1b}//\u53cd\u8f6c\u64cd\u4f5c(\u53cd\u8f6c\u6574\u4e2a\u5b57\u7b26\u4e32)\uff0c\u5426\u5219if(calledFuncName==verse seFuncName){\u64cd\u4f5c\u3002\u65b0\u589e(new())\uff1b}}\u9000\u8d27\u64cd\u4f5c\uff1b}\u3002\n\u6b64\u65b9\u6cd5\u7684\u8f93\u51fa\u662fICipherOperations\u7684\u96c6\u5408\u3002\u6b64\u65f6\uff0c\u6700\u591a\u53ef\u4ee5\u67093\u79cd\u5bc6\u7801\u64cd\u4f5c\uff1a\n\u6210\u529f\u63d0\u53d6\u6240\u7528\u64cd\u4f5c\u7684\u7c7b\u578b\u548c\u987a\u5e8f\u540e\uff0c\u9700\u8981\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5728\u7b7e\u540d\u4e0a\u6267\u884c\u5b83\u4eec\u3002\n\u89e3\u6790\u64ad\u653e\u5668\u6e90\u4ee3\u7801\u540e\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u89e3\u5bc6\u540e\u7684\u7b7e\u540d\uff0c\u5e76\u76f8\u5e94\u66f4\u65b0URL\u3002\n\u5bf9\u4e8e\u591a\u8def\u590d\u7528\u548c\u81ea\u9002\u5e94\u6d41\uff0c\u8f6c\u6362\u4ece\u5143\u6570\u636e\u63d0\u53d6\u7684\u7b7e\u540d\u5e76\u5c06\u5176\u6dfb\u52a0\u4e3a\u540d\u4e3aSignature-...&amp\uff1bsignature=212CD2793C2E9224A40014A56BB8189AF3D591E3.523508F8A49EC4A3425C6E4484EF9F59FBEF9066\u7684\u67e5\u8be2\u53c2\u6570\u3002\n\u5bf9\u4e8e\u7834\u6298\u53f7\u6e05\u5355\uff0c\u8f6c\u6362\u4eceurl\u4e2d\u63d0\u53d6\u7684\u7b7e\u540d\u5e76\u5c06\u5176\u6dfb\u52a0\u4e3a\u540d\u4e3aSignature-.../signature/212CD2793C2E9224A40014A56BB8189AF3D591E3.523508F8A49EC4A3425C6E4484EF9F59FBEF9066/\u7684\u8def\u7531\u53c2\u6570\u3002\n\u6bcf\u4e2a\u5a92\u4f53\u6d41\u90fd\u6709\u552f\u4e00\u6807\u8bc6\u5176\u5c5e\u6027(\u5982\u5bb9\u5668\u7c7b\u578b\u3001\u7f16\u89e3\u7801\u5668\u3001\u89c6\u9891\u8d28\u91cf)\u7684ITAG\u3002YoutubeExplde\u4f7f\u7528\u5df2\u77e5\u6807\u7b7e\u7684\u9884\u5b9a\u4e49\u6620\u5c04\u89e3\u6790\u8fd9\u4e9b\u5c5e\u6027\uff1a\n\u79c1\u6709\u9759\u6001\u53ea\u8bfbItagMap=new{//\u591a\u8def\u590d\u7528{5\uff0cnew(Container.Flv\uff0cAudioEncoding.mp3\uff0cVideoEncoding.H263\uff0cVideoQuality.Low144)}\uff0c{6\uff0cnew(Container.Flv\uff0cAudioEncoding.mp3\uff0cVideoEncoding.H263\uff0cVideoQuality.Low240)}\uff0c{13\uff0cnew(Container.Tgpp\uff0cAudioEncoding.Aac\uff0cVideoEncoding.Mp4V\uff0cVideoQuality.Low144)}\uff0c{17\uff0cnew(Container.Tgpp\uff0cAudioEncoding.Aac\uff0cVideoEncoding.Low144)}\u3002New(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium360)}\uff0c{22\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.High720)}\uff0c{34\uff0cnew(\u5bb9\u5668.Flv\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium360)}\uff0c{35\uff0cnew(Container.Flv\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium480)}\uff0c{36\uff0cnew(Container.Tgpp\uff0cAac\uff0cAac\uff0cVideoEncoding.Mp4V)}\uff0c{35\uff0cnew(Container.Flv\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium480)}\uff0c{36\uff0cnew(Container.Tgpp\uff0cAudioEncoding.Aac\uff0cVideoEncoding.Mp4V\u3002VideoQuality.Low240)}\uff0c{37\uff0cnew(Container.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.High1080)}\uff0c{38\uff0cnew(Container.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.High3072)}\uff0c{43\uff0cnew(Container.WebM\uff0cAudioEncoding.Vorbis\uff0cVideoEncoding.Medium360)}\uff0c{44\uff0cnew(Container.WebM\uff0cAudioEncoding.Vorbis\uff0cVideoEncoding.Vp8\uff0cVideoQuality.Medium480)}\uff0c{45\uff0cnew(Container.WebM\uff0cAudioEncoding.Vorbis\uff0cVideoQuality.Medium360)}\uff0c{44\uff0cnew(Container.WebM\uff0cAudioEncoding.Vorbis\uff0cVideoEncoding.Vp8\uff0cVideoQuality.Medium480)}\uff0c{45\uff0cnew(Container.WebM\uff0cAudioEncoding.Vorbis\uff0cVideoQuality.Medium360)}\u3002AudioEncoding.Vorbis\uff0cVideoEncoding.Vp8\uff0cVideoQuality.High720)}\uff0c{46\uff0cnew(Container.WebM\uff0cAudioEncoding.Vorbis\uff0cVideoEncoding.Vp8\uff0cVideoQuality.High1080)}\uff0c{59\uff0cnew(Container.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium480)}\uff0c{78\uff0cnew(Container.mp4\uff0cAudioEncoding.H264\uff0cVideoQuality.Medium480)}\uff0c{82\uff0cnew(Container.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium360)}\uff0c{83\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium480)\u3002New(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium480)}\uff0c{84\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.High720)}\uff0c{85\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.High1080)}\uff0c{91\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Low144)}\uff0c{92\uff0cnew(Container.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.High1080)}\uff0c{91\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Low144)}\uff0c{92\uff0cnew(Container.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.High1080)}\u3002VideoQuality.Low240)}\uff0c{93\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium360)}\uff0c{94\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoQuality.Medium480)}\uff0c{95\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.H264\uff0cVideoQuality.High720)}\uff0c{96\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.High1080)}\uff0c{100\uff0cnew(\u5bb9\u5668.WebM\uff0cM\uff0cHigh1080)}\uff0c{95\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.H264\uff0cVideoQuality.High720)}\uff0c{96\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.High1080)\u3002AudioEncoding.Vorbis\uff0cVideoEncoding.Vp8\uff0cVideoQuality.Medium360)}\uff0c{101\uff0cnew(\u5bb9\u5668.WebM\uff0cAudioEncoding.Vorbis\uff0cVideoEncoding.Vp8\uff0cVideoQuality.Medium480)}\uff0c{102\uff0cnew(\u5bb9\u5668.WebM\uff0cAudioEncoding.Vp8\uff0cVideoQuality.High720)}\uff0c{132\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Lowum240)}\uff0c{151\uff0cnew(\u5bb9\u5668.mp4\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Low144)}\uff0c{151\uff0cnew(\u5bb9\u5668.WebM\uff0cAudioEncoding.Aac\uff0cVideoEncoding.H264\uff0cVideoQuality.Low144)}\uff0c{132\uff0cnew(\u5bb9\u5668.WebM\uff0cAudioEncoding.Vp8\uff0cVideoQuality.Medium360)}\uff0c{101\uff0cnew(\u5bb9\u5668.WebM\uff0cAudioEncoding.Vp8\uff0cVideoQuality.Medium480)}\uff0c{102\u3002//\u7eaf\u89c6\u9891(Mp4){133\uff0cnew(Container.mp4\uff0cnull\uff0cVideoEncoding.H264\uff0cVideoQuality.Low240)}\uff0c{134\uff0cnew(Container.mp4\uff0cnull\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium360)}\uff0c{135\uff0cnew(Container.mp4\uff0cnull\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium480)}\uff0c{136\uff0cnew(Container.mp4\uff0cnull\uff0cVideoEncoding.H264\uff0cVideoQuality.High720)}\uff0c{137\uff0cnew(Container.mp4\uff0cnull\uff0cVideoQuality.High720)}\u3002VideoEncoding.H264\uff0cVideoQuality.High1080)}\uff0c{138\uff0cnew(Container.mp4\uff0cnull\uff0cVideoEncoding.H264\uff0cVideoQuality.High4320)}\uff0c{160\uff0cnew(Container.mp4\uff0cnull\uff0cVideoEncoding.H264\uff0cVideoQuality.Low144)}\uff0c{212\uff0cnew(Container.mp4\uff0cnull\uff0cVideoEncoding.H264\uff0cVideoQuality.Medium480)}\uff0c{213\uff0cnew(Container.mp4\uff0cnull\uff0cV", "note_en": "Almost a year ago, I started developing  YoutubeExplode, a library that scraps information on YouTube videos and lets you download them. Originally, my main motivation for developing it was simply to gain experience, as the task involved a lot of research and reverse-engineering. Nowadays, YoutubeExplode is arguably the most consistent and robust .NET library for dealing with YouTube.\n Since this is a relatively popular discussion topic among many beginner developers, I thought that I could help out by sharing the knowledge I found by spending dozens of hours staring at Chrome Developer Tools.\n Note: even though the base principles explained here are unlikely to change, some information in this post may become outdated. This post is relevant to YoutubeExplode v4.1 (16-Feb-2018).\n  In order to find and resolve media streams, you need to first get video metadata. There are a few ways to do it, but the most reliable one is by querying an AJAX endpoint used internally by YouTube\u2019s iframe embed API. The format is as follows:  https://www.youtube.com/get_video_info?video_id={videoId}.\n The request can take a lot of different parameters, but at a minimum it needs a video ID \u2014 the value in the URL that comes after  /watch?v=, for example  e_S9VvJM1PI.\n The response contains URL-encoded metadata, which has to be decoded first before it\u2019s usable. After that, you can map the parameter names to values in a dictionary for easier access. Some parameter values are nested objects themselves, so they can in turn be mapped to nested dictionaries.\n   As you can see, there is quite a lot of information that can be extracted straight away.\n Let\u2019s also look at some important optional parameters that this request can take:\n hl \u2014 name of the culture used to localize some strings. If not set, it defaults to culture inferred from your IP. Use  hl=en to force English language on all strings.\n el \u2014 type of YouTube page from where the request was made. This decides what kind of information will be available in the response. In some cases, you will need to set this parameter to a certain value depending on the type of the video, in order to avoid errors. Defaults to  embedded.\n sts \u2014 some kind of session identifier, used to synchronize information between requests. Defaults to empty.\n  The  el request parameter can take multiple values and it affects what kind of data you will receive as a response. There are only a few that actually matter though, so I\u2019ll list them here:\n embedded, the default value. YouTube uses this when requesting information for embedded videos. Doesn\u2019t work with videos that aren\u2019t embeddable, but works with age-restricted videos.\n detailpage, alternative value, contains a bit more info. Conversely, works with videos that aren\u2019t embeddable, but doesn\u2019t work with age-restricted videos.\n YoutubeExplode uses  el=embedded for the first query. If it fails because the video cannot be embedded, it then retries with  el=detailpage.\n    Error codes seem to be very generic and most of the time it\u2019s either  100 or  150 so they aren\u2019t very useful at determining what went wrong.\n  Some videos need to be purchased before they can be watched. In such cases, there will be:\n     Multiplexed (muxed) streams are the type that contain both video and audio tracks in the same stream. YouTube provides these streams only in low qualities \u2014 the best they can be is 720p30.\n Metadata for these streams is contained within the URL-encoded response mentioned earlier, inside the  url_encoded_fmt_stream_map parameter. To extract it, you simply need to split the value by  , and then URL-decode each part.\n     Note: I\u2019ve encountered cases when  some of the muxed streams were removed despite still appearing in the metadata. Therefore it\u2019s recommended to send HEAD requests to check that each stream is still available. You can get content length as well while you\u2019re at it, since it\u2019s not present in the metadata.\n  YouTube also uses video-only and audio-only streams. These come at highest available qualities, with no limitations.\n Similarly to muxed streams, metadata for these streams can be extracted from  adaptive_fmts parameter. Here\u2019s how it looks:\n  Adaptive streams have a slightly extended set of properties. I\u2019ll list the useful ones:\n   Video info may contain URL of a DASH manifest inside the  dashmpd parameter. It\u2019s not always present and some videos might never have it at all.\n To resolve metadata of these streams, you need to first download the manifest using the provided URL. Sometimes a manifest can be protected. If it is, you should be able to find the signature inside the URL \u2014 it\u2019s the value separated by slashes that comes after  /s/.\n Streams in DASH can also be segmented \u2014 each segment starting at a given point and lasting only a second or two. This is the type that your browser normally uses when playing a video on YouTube \u2014 it lets it easily adjust quality based on network conditions. Segmented streams are also used for livestream videos. This post will not be covering them, however, as processing them is not required to download videos.\n The DASH manifest follows  this XML schema. You can parse the stream metadata if you go through all descendant nodes of type  Representation. Here\u2019s how they appear:\n https://r12---sn-3c27sn7k.googlevideo.com/videoplayback?id=7bf4bd56f24cd4f2 itag=133 source=youtube requiressl=yes ei=Bt4VWqLOJMT3NI3qjPgB ms=au gcr=ua mv=m pl=24 mn=sn-3c27sn7k initcwndbps=1143750 mm=31 nh=IgpwcjAxLmticDAxKgkxMjcuMC4wLjE ratebypass=yes mime=video/mp4 gir=yes clen=4436318 lmt=1507180947831345 dur=183.850 mt=1511382418 key=dg_yt0 s=7227CB6B79F7C702BB11275F9D71C532EB7E72046.DD6F06570E470E0E8384F74B879F79475D023A64A64 signature=254E9E06DF034BC66D29B39523F84B33D5940EE3.1F4C8A5645075A228BB0C2D87F71477F6ABFFA99 ip=255.255.255.255 ipbits=0 expire=1511404134 sparams=ip,ipbits,expire,id,itag,source,requiressl,ei,ms,gcr,mv,pl,mn,initcwndbps,mm,nh,ratebypass,mime,gir,clen,lmt,dur\n    Note: don\u2019t be tempted to extract content length from the  contentLength attribute, because it doesn\u2019t always appear on  &lt;BaseURL&gt; tag. Instead, you can use regular expressions to parse it from  clen query parameter in the URL.\n  You may notice that some videos, mostly the ones uploaded by verified channels, are protected. This means that their media streams and DASH manifests cannot be directly accessed by URL \u2014 a 403 error code is returned instead. To be able to access them, you need to decipher their signatures and then modify the URL appropriately.\n For muxed and adaptive streams, the signatures are part of the extracted metadata. DASH streams themselves are never protected, but the actual manifest may be \u2014 the signature is stored as part of the URL.\n A signature is a string made out of two sequences of uppercase letters and numbers, separated by period. Here\u2019s an example:  537513BBC517D8643EBF25887256DAACD7521090.AE6A48F177E7B0E8CD85D077E5170BFD83BEDE6BE6C6C.\n When your browser opens a YouTube video, it transforms these signatures using a set of operations defined in the player source code, putting the result as an additional parameter inside URLs. To repeat the same process from code, you need to locate the JavaScript source of the player used by the video and parse it.\n  Every video uses a slightly different version of the player, which means you need to figure out which one to download. If you get the HTML of the  video\u2019s embed page, you can search for  &#34;js&#34;: to find a JSON property that contains the player\u2019s relative source code URL. Once you prepend YouTube\u2019s host you\u2019ll end up with a URL like this one:  https://www.youtube.com/yts/jsbin/player-vflYXLM5n/en_US/base.js.\n Besides obtaining the player source URL, you also need to get something called  sts, which appears to be some sort of session token. You will need to send it as a parameter to  get_video_info endpoint mentioned earlier \u2014 this makes sure that the returned metadata is valid for this player context. You can extract the value of  sts similarly, just search for  &#34;sts&#34;: and you should find it.\n Once you locate the source code URL and download it, you need to parse it. There are few ways to do it, for simplicity reasons I chose to parse it using regular expressions.\n Instead of explaining step-by-step what exactly you need to do, I\u2019ll just copy a small part of source code from YoutubeExplode. I made sure to comment it to the best of my ability, so it should be pretty easy to follow.\n private  async    GetCipherOperationsAsync (  sourceUrl ) {  // Get player source code   sourceRaw  =  await _httpClient . GetStringAsync (sourceUrl ) ;  // Find the name of the function that handles deciphering   entryPoint  = Regex . Match (sourceRaw ,  @&#34;\\bc\\s*&amp;&amp;\\s*d\\.set\\([^,]+,\\s*(?:encodeURIComponent\\s*\\()?\\s*([\\w$]+)\\(&#34; ) .Groups [ 1 ] .Value ;  if  ( string . IsNullOrWhiteSpace (entryPoint ) )  throw  new   ( &#34;Could not find the entry function for signature deciphering.&#34; ) ;  // Find the body of the function   entryPointBody  = Regex . Match (sourceRaw ,  @&#34;(?!h\\.)&#34;  + Regex . Escape (entryPoint )  +  @&#34;=function\\(\\w+\\)\\{(.*?)\\}&#34; , RegexOptions .Singleline ) .Groups [ 1 ] .Value ;  if  ( string . IsNullOrWhiteSpace (entryPointBody ) )  throw  new   ( &#34;Could not find the signature decipherer function body.&#34; ) ;   entryPointLines  = entryPointBody . Split ( &#34;;&#34; ) ;  // Identify cipher functions   reverseFuncName  =  null ;   sliceFuncName  =  null ;   charSwapFuncName  =  null ;   operations  =  new   ( ) ;  // Analyze the function body to determine the names of cipher functions  foreach  (  line  in entryPointLines )  {  // Break when all functions are found  if  ( ! string . IsNullOrWhiteSpace (reverseFuncName )  &amp;&amp;  ! string . IsNullOrWhiteSpace (sliceFuncName )  &amp;&amp;  ! string . IsNullOrWhiteSpace (charSwapFuncName ) )  break ;  // Get the function called on this line   calledFuncName  = Regex . Match (line ,  @&#34;\\w+\\.(\\w+)\\(&#34; ) .Groups [ 1 ] .Value ;  if  ( string . IsNullOrWhiteSpace (calledFuncName ) )  continue ;  // Find cipher function names  if  (Regex . IsMatch (sourceRaw ,   $@&#34;  { Regex . Escape (calledFuncName ) } :\\bfunction\\b\\(\\w+\\)&#34; ) )  { reverseFuncName  = calledFuncName ;  }  else  if  (Regex . IsMatch (sourceRaw ,   $@&#34;  { Regex . Escape (calledFuncName ) } :\\bfunction\\b\\([a],b\\).(\\breturn\\b)?.?\\w+\\.&#34; ) )  { sliceFuncName  = calledFuncName ;  }  else  if  (Regex . IsMatch (sourceRaw ,   $@&#34;  { Regex . Escape (calledFuncName ) } :\\bfunction\\b\\(\\w+\\,\\w\\).\\bvar\\b.\\bc=a\\b&#34; ) )  { charSwapFuncName  = calledFuncName ;  }  }  // Analyze the function body again to determine the operation set and order  foreach  (  line  in entryPointLines )  {  // Get the function called on this line   calledFuncName  = Regex . Match (line ,  @&#34;\\w+\\.(\\w+)\\(&#34; ) .Groups [ 1 ] .Value ;  if  ( string . IsNullOrWhiteSpace (calledFuncName ) )  continue ;  // Swap operation (swaps first character and character at index)  if  (calledFuncName  == charSwapFuncName )  {   index  =  int . Parse (Regex . Match (line ,  @&#34;\\(\\w+,(\\d+)\\)&#34; ) .Groups [ 1 ] .Value ) ; operations . Add ( new   (index ) ) ;  }  // Slice operation (returns substring at index)  else  if  (calledFuncName  == sliceFuncName )  {   index  =  int . Parse (Regex . Match (line ,  @&#34;\\(\\w+,(\\d+)\\)&#34; ) .Groups [ 1 ] .Value ) ; operations . Add ( new   (index ) ) ;  }  // Reverse operation (reverses the entire string)  else  if  (calledFuncName  == reverseFuncName )  { operations . Add ( new   ( ) ) ;  }  }  return operations ; }\n Output of this method is a collection of  ICipherOperations. At this point in time, there can be up to 3 kind of cipher operations:\n  Once you successfully extract the type and order of the used operations, you need to store them somewhere so you can execute them on a signature.\n  After parsing the player source code, you can get the deciphered signatures and update the URL accordingly.\n For muxed and adaptive streams, transform the signature extracted from metadata and add it as a  query parameter called  signature \u2014  ...&amp;signature=212CD2793C2E9224A40014A56BB8189AF3D591E3.523508F8A49EC4A3425C6E4484EF9F59FBEF9066\n For DASH manifest, transform the signature extracted from URL and add it as a  route parameter called  signature \u2014  .../signature/212CD2793C2E9224A40014A56BB8189AF3D591E3.523508F8A49EC4A3425C6E4484EF9F59FBEF9066/\n  Each media stream has an  itag that uniquely identifies its properties such as container type, codecs, video quality. YoutubeExplode resolves these properties using a predefined map of known tags:\n private  static  readonly   ItagMap  =  new   {  // Muxed  { 5 ,  new   (Container .Flv , AudioEncoding .Mp3 , VideoEncoding .H263 , VideoQuality .Low144 ) } ,  { 6 ,  new   (Container .Flv , AudioEncoding .Mp3 , VideoEncoding .H263 , VideoQuality .Low240 ) } ,  { 13 ,  new   (Container .Tgpp , AudioEncoding .Aac , VideoEncoding .Mp4V , VideoQuality .Low144 ) } ,  { 17 ,  new   (Container .Tgpp , AudioEncoding .Aac , VideoEncoding .Mp4V , VideoQuality .Low144 ) } ,  { 18 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Medium360 ) } ,  { 22 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .High720 ) } ,  { 34 ,  new   (Container .Flv , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Medium360 ) } ,  { 35 ,  new   (Container .Flv , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Medium480 ) } ,  { 36 ,  new   (Container .Tgpp , AudioEncoding .Aac , VideoEncoding .Mp4V , VideoQuality .Low240 ) } ,  { 37 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .High1080 ) } ,  { 38 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .High3072 ) } ,  { 43 ,  new   (Container .WebM , AudioEncoding .Vorbis , VideoEncoding .Vp8 , VideoQuality .Medium360 ) } ,  { 44 ,  new   (Container .WebM , AudioEncoding .Vorbis , VideoEncoding .Vp8 , VideoQuality .Medium480 ) } ,  { 45 ,  new   (Container .WebM , AudioEncoding .Vorbis , VideoEncoding .Vp8 , VideoQuality .High720 ) } ,  { 46 ,  new   (Container .WebM , AudioEncoding .Vorbis , VideoEncoding .Vp8 , VideoQuality .High1080 ) } ,  { 59 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Medium480 ) } ,  { 78 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Medium480 ) } ,  { 82 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Medium360 ) } ,  { 83 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Medium480 ) } ,  { 84 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .High720 ) } ,  { 85 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .High1080 ) } ,  { 91 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Low144 ) } ,  { 92 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Low240 ) } ,  { 93 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Medium360 ) } ,  { 94 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Medium480 ) } ,  { 95 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .High720 ) } ,  { 96 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .High1080 ) } ,  { 100 ,  new   (Container .WebM , AudioEncoding .Vorbis , VideoEncoding .Vp8 , VideoQuality .Medium360 ) } ,  { 101 ,  new   (Container .WebM , AudioEncoding .Vorbis , VideoEncoding .Vp8 , VideoQuality .Medium480 ) } ,  { 102 ,  new   (Container .WebM , AudioEncoding .Vorbis , VideoEncoding .Vp8 , VideoQuality .High720 ) } ,  { 132 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Low240 ) } ,  { 151 ,  new   (Container .Mp4 , AudioEncoding .Aac , VideoEncoding .H264 , VideoQuality .Low144 ) } ,  // Video-only (mp4)  { 133 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .Low240 ) } ,  { 134 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .Medium360 ) } ,  { 135 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .Medium480 ) } ,  { 136 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High720 ) } ,  { 137 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High1080 ) } ,  { 138 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High4320 ) } ,  { 160 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .Low144 ) } ,  { 212 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .Medium480 ) } ,  { 213 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .Medium480 ) } ,  { 214 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High720 ) } ,  { 215 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High720 ) } ,  { 216 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High1080 ) } ,  { 217 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High1080 ) } ,  { 264 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High1440 ) } ,  { 266 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High2160 ) } ,  { 298 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High720 ) } ,  { 299 ,  new   (Container .Mp4 ,  null , VideoEncoding .H264 , VideoQuality .High1080 ) } ,  // Video-only (webm)  { 167 ,  new   (Container .WebM ,  null , VideoEncoding .Vp8 , VideoQuality .Medium360 ) } ,  { 168 ,  new   (Container .WebM ,  null , VideoEncoding .Vp8 , VideoQuality .Medium480 ) } ,  { 169 ,  new   (Container .WebM ,  null , VideoEncoding .Vp8 , VideoQuality .High720 ) } ,  { 170 ,  new   (Container .WebM ,  null , VideoEncoding .Vp8 , VideoQuality .High1080 ) } ,  { 218 ,  new   (Container .WebM ,  null , VideoEncoding .Vp8 , VideoQuality .Medium480 ) } ,  { 219 ,  new   (Container .WebM ,  null , VideoEncoding .Vp8 , VideoQuality .Medium480 ) } ,  { 242 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .Low240 ) } ,  { 243 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .Medium360 ) } ,  { 244 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .Medium480 ) } ,  { 245 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .Medium480 ) } ,  { 246 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .Medium480 ) } ,  { 247 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .High720 ) } ,  { 248 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .High1080 ) } ,  { 271 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .High1440 ) } ,  { 272 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .High2160 ) } ,  { 278 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .Low144 ) } ,  { 302 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .High720 ) } ,  { 303 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .High1080 ) } ,  { 308 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .High1440 ) } ,  { 313 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .High2160 ) } ,  { 315 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .High2160 ) } ,  { 330 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .Low144 ) } ,  { 331 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .Low240 ) } ,  { 332 ,  new   (Container .WebM ,  null , VideoEncoding .Vp9 , VideoQuality .Medium360 ) } ,  { 333 ,  new   (Con\n......", "posttime": "2020-10-26 21:51:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "youtube,\u5de5\u7a0b,engineering,\u89c6\u9891", "title": "\u53cd\u5411\u5de5\u7a0bYouTube(2017)", "title_en": "Reverse-Engineering YouTube (2017)", "transed": 1, "url": "https://tyrrrz.me/blog/reverse-engineering-youtube", "via": "", "real_tags": ["youtube", "\u5de5\u7a0b", "\u89c6\u9891"]}, {"category": "", "categoryclass": "", "imagename": "342a95b3397cd1f6910fff42ab7c3fc5.png", "infoid": 1031219, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1850\u5e74\uff0c\u8d6b\u5c14\u66fc\u00b7\u51af\u00b7\u8d6b\u59c6\u970d\u5179(Hermann Von Helmholtz)\u53d1\u660e\u4e86\u773c\u955c\u6216\u68c0\u773c\u955c\uff0c\u4f7f\u773c\u79d1\u53d1\u751f\u4e86\u9769\u547d\u6027\u7684\u53d8\u5316\u3002\u7136\u800c\uff0c3\u5e74\u524d\uff0c\u4e00\u4f4d\u540d\u53eb\u67e5\u5c14\u65af\u00b7\u5df4\u8d1d\u5947\u7684\u82f1\u56fd\u4eba\u5dee\u4e00\u70b9\u5c31\u83b7\u5f97\u4e86\u8fd9\u4e2a\u5927\u5956\u3002\n\u67e5\u5c14\u65af\u00b7\u5df4\u8d1d\u5947\u4e8e1791\u5e74\u51fa\u751f\u4e8e\u4f26\u6566\u4e00\u4e2a\u5bcc\u88d5\u7684\u94f6\u884c\u5bb6\u5ead\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5a07\u5f31\u7684\u5b69\u5b50\uff0c\u8eab\u4f53\u4e0d\u597d\u4e00\u76f4\u56f0\u6270\u7740\u4ed6\u7684\u957f\u5bff\u3002\u4ed6\u5f88\u65e9\u5c31\u8868\u73b0\u51fa\u6570\u5b66\u5929\u8d4b\uff0c\u5e76\u6210\u4e3a\u5251\u6865\u5927\u5b66\u7684\u5362\u5361\u65af\u6570\u5b66\u6559\u6388\uff0c\u8be5\u6559\u6388\u4e4b\u524d\u7531\u827e\u8428\u514b\u00b7\u725b\u987f\u7235\u58eb\u62c5\u4efb\uff1b\u4ed6\u62c5\u4efb\u8be5\u6559\u6388\u957f\u8fbe10\u5e74\u4e4b\u4e45\uff0c\u6ca1\u6709\u8bb2\u8bfe\u3002\n\u4ed6\u8fdd\u80cc\u7236\u4eb2\u7684\u610f\u613f\u5ac1\u7ed9\u4e86\u4e54\u6cbb\u5b89\u5a1c\u00b7\u60e0\u7279\u83ab\u5c14\uff0c\u4f46\u4ece\u7236\u4eb2\u90a3\u91cc\u7ee7\u627f\u4e86\u4e00\u7b14\u8d22\u5bcc\uff0c\u8ba9\u4ed6\u5f97\u4ee5\u6c89\u8ff7\u4e8e\u5bf9\u6570\u5b66\u548c\u529b\u5b66\u7684\u70ed\u7231\u3002\n\u4e3a\u4ec0\u4e48\u5df4\u8d1d\u5947\u8981\u8bd5\u56fe\u5efa\u9020\u4e00\u79cd\u76f4\u89c6\u773c\u775b\u7684\u4eea\u5668\u5462\uff1f\u4ed6\u88ab\u6307\u63a7\u60a3\u6709\u53cc\u773c\u5355\u773c\u590d\u89c6--\u8fd9\u662f\u5426\u8ba9\u4ed6\u4ea7\u751f\u4e86\u63a2\u7d22\u81ea\u5df1\u773c\u775b\u7684\u597d\u5947\u5fc3\uff1f\u8fd8\u662f\u6709\u5176\u4ed6\u539f\u56e0\uff1f\n1940\u5e74\u5173\u4e8e\u5df4\u8d1d\u5947\u7684\u4e00\u7bc7\u6587\u7ae01\u63d0\u4f9b\u4e86\u5173\u4e8e\u4ed6\u89c6\u529b\u7f3a\u9677\u7684\u7ebf\u7d22\u3002\u4ed6\u6709\u8fc7\u4e24\u6b21\u773c\u79d1\u4e4b\u65c5--\u68c0\u773c\u955c\u548c\u8272\u89c9\u3002\u82f1\u683c\u5170\u94f6\u884c\u7684\u773c\u79d1\u533b\u751f\u963f\u5c14\u5f17\u96f7\u5fb7\u00b7\u65af\u5bc6\u57281847\u5e74\u63d0\u51fa\uff0c\u4f1f\u5927\u7684\u5a01\u5ec9\u00b7\u9ea6\u80af\u9f50\u66fe\u65ad\u8a00\u5df4\u8d1d\u5947\u6709\u201c\u4e0d\u6b63\u5e38\u7684\u89c6\u529b\u201d\u3002\n\u4f26\u6566\u5e02\u4e2d\u5fc3\u773c\u79d1\u533b\u9662\u7684\u8054\u5408\u521b\u59cb\u4eba\u963f\u5c14\u5f17\u96f7\u5fb7\u00b7\u65af\u7c73(Alfred Smee)\u662f\u4e00\u540d\u773c\u79d1\u535a\u5b66\u8005\uff0c\u4e5f\u662f\u4eba\u5de5\u667a\u80fd\u7684\u5148\u9a71\u3002\u65af\u5bc6\u662f\u82f1\u683c\u5170\u94f6\u884c\u603b\u4f1a\u8ba1\u5e08\u7684\u513f\u5b50\uff0c\u6709\u4e00\u6b21\u5df4\u8d1d\u5947\u88ab\u53eb\u6765\u4e3a\u4ed6\u63d0\u4f9b\u5982\u4f55\u6253\u51fb\u5047\u949e\u7684\u5efa\u8bae\u3002\n\u5a01\u5ec9\u00b7\u9ea6\u80af\u9f50(William Mackenzie)\u57281830\u5e74\u81f31854\u5e74\u95f4\u51fa\u7248\u7684\u201c\u773c\u775b\u75be\u75c5\u5b9e\u7528\u8bba\u8457\u201d\u6709\u51e0\u4e2a\u7248\u672c\uff1b\u7b2c\u4e00\u4e2a\u7248\u672c\u4e2d\u6ca1\u6709\u63d0\u5230\u5df4\u8d1d\u5947\uff0c\u4f46\u57281834\u5e74\u7684\u7248\u672c\u4e2d\uff0c\u63d0\u5230\u4e86\u5df4\u8d1d\u5947\u3002\u201c\u201dM(Onsieur)\u300281\u5c81\u7684Pr\u00e9vost\u53d1\u8868\u4e86\u4e00\u7bc7\u6709\u8da3\u7684\u6587\u7ae0\uff0c\u8bb2\u8ff0\u4e86\u4ed6\u81ea\u5df1\u7684\u5355\u773c\u590d\u89c6\u75c5\u4f8b\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u6676\u72b6\u4f53\u9aa8\u6298\u3001\u7600\u4f24\u6216\u90e8\u5206\u6241\u5e73\u6216\u6676\u72b6\u4f53\u677f\u5c42\u5206\u79bb\u6240\u81f4\u201c.\u3002\u666e\u96f7\u6c83\u65af\u7279\u8fd8\u4e0e\u5df4\u8d1d\u5947\u5148\u751f\u8fdb\u884c\u4e86\u6c9f\u901a\uff0c\u5df4\u8d1d\u5947\u5148\u751f\u7684\u4e24\u53ea\u773c\u775b\u90fd\u6709\u590d\u89c6\uff0c\u7136\u800c\u4ed6\u53d1\u73b0\u81ea\u5df1\u53ef\u4ee5\u901a\u8fc7\u5361\u7247\u4e0a\u7684\u4e00\u4e2a\u5c0f\u5b54\u6216\u51f9\u900f\u955c\u6765\u5f25\u8865\u8fd9\u4e00\u7f3a\u9677\u3002\u9ea6\u80af\u9f50\u5f15\u7528\u4e86\u76ae\u57c3\u5c14\u00b7\u666e\u96f7\u6c83\u65af\u7279\u4e0e\u5df4\u8d1d\u5947\u57281832\u5e74\u51fa\u7248\u7684\u201cChimie et de Physique\u5e74\u9274\u201d\u4e2d\u7684\u901a\u4fe1\u30024.\u3002\n\u666e\u96f7\u6c83\u65af\u7279\u5bb6\u65cf\u4e3a\u79d1\u5b66\u548c\u773c\u79d1\u505a\u51fa\u4e86\u5de8\u5927\u8d21\u732e\u3002\u4eba\u4eec\u8bd5\u56fe\u89c2\u5bdf\u773c\u775b\u7684\u5185\u90e8\uff0c\u5e76\u89e3\u91ca\u6765\u81ea\u5b83\u7684\u53cd\u5c04\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u773c\u775b\u5728\u7279\u5b9a\u6761\u4ef6\u4e0b\u8868\u73b0\u51fa\u5149\u5ea6\u3002\u8fd9\u4e9b\u7406\u8bba\u90fd\u662f\u6a21\u7cca\u7684\uff0c\u5176\u4e2d\u5305\u62ec\u5947\u5999\u7684\u63a8\u6d4b\uff1a\u662f\u77ed\u6682\u7684\u53d1\u5149\u78f7\u5149\uff0c\u767d\u5929\u5438\u6536\u7684\u5149\uff0c\u665a\u4e0a\u50cf\u8424\u706b\u866b\u4e00\u6837\u53d1\u5149\uff0c\u8fd8\u662f\u89c6\u7f51\u819c\u53d1\u51fa\u7684\u88f8\u9732\u7684\u7535\uff1f\n1810\u5e74\uff0c\u672c\u5c3c\u8fea\u514b\u7279\u00b7\u666e\u96f7\u6c83\u65af\u7279(Benedict Pr\u00e9vost)\u8bc1\u5b9e\uff0c\u89c6\u7f51\u819c\u5728\u9ed1\u6697\u4e2d\u662f\u770b\u4e0d\u89c1\u7684\uff1b\u662f\u5149\u7ebf\u4ece\u5916\u9762\u8fdb\u5165\u773c\u775b\u7684\u53cd\u5c04\uff0c\u4f7f\u5b83\u53d8\u5f97\u660e\u4eae\u3002\n\u76ae\u57c3\u5c14\u7684\u8868\u5144\u827e\u8428\u514b\u00b7\u672c\u5c3c\u8fea\u514b\u7279\u00b7\u666e\u96f7\u6c83\u51fa\u751f\u5728\u65e5\u5185\u74e6\uff0c\u4f46\u540e\u6765\u5728\u6cd5\u56fd\u8499\u9676\u90a6\u6210\u4e3a\u4e00\u540d\u5b66\u8005\u3002\u4f5c\u4e3a\u4e00\u540d\u79d1\u5b66\u5bb6\u540c\u4e8b\uff0c\u5df4\u8d1d\u5947\u4f1a\u77e5\u9053\u6216\u610f\u8bc6\u5230\u4ed6\u7684\u5b58\u5728\u3002\u76ae\u57c3\u5c14\u00b7\u666e\u96f7\u6c83\u65af\u7279\u6709\u4e09\u4e2a\u513f\u5b50\uff0c\u4e9a\u5386\u5c71\u5927\uff0c5\u5c81\u7684\u8ba9-\u8def\u6613\u65af\uff0c6\u5c81\u7684\u7eaa\u5c27\u59c6\u3002\u524d\u4e24\u4e2a\u4eba\u5199\u7684\u662f\u773c\u79d1\u5b66\u79d1\u3002\u5df4\u8d1d\u5947\u7ed9\u4ed6\u7684\u5c0f\u513f\u5b50\u53d6\u540d\u4e3a\u4ea8\u5229\u00b7\u666e\u96f7\u6c83\u65af\u7279\uff0c\u4f46\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u54ea\u4f4d\u666e\u96f7\u6c83\u65af\u7279\u83b7\u5f97\u4e86\u8fd9\u6837\u7684\u8363\u8a89\u3002\n\u745e\u58eb\u7269\u7406\u5b66\u5bb6\u76ae\u57c3\u5c14\u00b7\u666e\u96f7\u6c83\u65af\u7279(Pierre Pr\u00e9vost)\u6307\u51fa\uff0c\u6240\u6709\u7269\u4f53\uff0c\u65e0\u8bba\u662f\u70ed\u7684\u8fd8\u662f\u51b7\u7684\uff0c\u90fd\u4f1a\u8f90\u5c04\u70ed\u91cf7\uff0c\u5e76\u5c06\u989c\u8272\u7f3a\u9677\u547d\u540d\u4e3a\u9053\u5c14\u987f\u4e3b\u4e49(Daltonism)\u3002\u5f53\u4ed6\u57281832\u5e74\u63d0\u51fa\u201c\u4e00\u53ea\u773c\u775b\u81ea\u5df1\u5c06\u7269\u4f53\u7ffb\u500d\u201d\u65f6\uff0c\u4ed6\u662f\u65e5\u5185\u74e6\u7684\u8363\u4f11\u6559\u6388\uff0c\u4ee5\u81ea\u5df1\u4e3a\u7814\u7a76\u5bf9\u8c61\uff0c\u7814\u7a76\u8870\u8001\u8fc7\u7a0b\u3002\u53d1\u73b0\u4ed6\u4eec\u5171\u60a3\u4e86\u4e00\u79cd\u75be\u75c5\uff0c\u666e\u96f7\u6c83\u65af\u7279\u548c\u5df4\u8d1d\u5947\u4ea4\u6362\u4e86\u5173\u4e8e\u8fd9\u79cd\u4e0d\u540c\u5bfb\u5e38\u7684\u773c\u75be\u7684\u4fe1\u606f\u3002\u4ee5\u4e0b\u662f\u5df4\u8d1d\u5947\u5bf9\u666e\u96f7\u6c83\u7684\u90e8\u5206\u8bc4\u8bba\u7684\u6cd5\u8bed\u7ffb\u8bd1\u3002\n\u201c\u6211\u770b\u5230\u4e24\u4e2a\u7269\u4f53\u7684\u56fe\u50cf\uff0c\u5782\u76f4\u5730\u4e00\u4e2a\u5728\u53e6\u4e00\u4e2a\u4e4b\u4e0a\uff0c\u7528\u4e24\u53ea\u773c\u775b\uff0c\u6216\u8005\u7528\u4e24\u53ea\u773c\u775b\u5206\u5f00\uff0c\u6bcf\u6b21\u6211\u770b\u7740\u4e00\u4e2a\u7269\u4f53\u65f6\uff0c\u90fd\u4e0d\u4f1a\u5f3a\u8feb\u5668\u5b98\u3002\u201d\u4e0a\u4f4d\u56fe\u50cf\u6bd4\u4e0b\u4f4d\u56fe\u50cf(\u771f\u5b9e\u56fe\u50cf)\u5f31\uff0c\u5e76\u4e14\u76f8\u969412\u5206\u949f\u7684\u89d2\u5ea6\u3002\n\u5f53\u6211\u8eab\u4f53\u4e0d\u597d\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u56fe\u50cf\u4f1a\u53d8\u5f97\u66f4\u5f3a\uff0c\u4f46\u6211\u76f8\u4fe1\u89d2\u5ea6\u8ddd\u79bb\u662f\u4e0d\u4f1a\u6539\u53d8\u7684\u3002\n\u201c\u7531\u4e8e\u4e24\u5e45\u56fe\u50cf\u4e4b\u95f4\u7684\u8ddd\u79bb\u5f88\u5c0f\uff0c\u9644\u8fd1\u7684\u7269\u4f53\u770b\u8d77\u6765\u5e76\u4e0d\u662f\u53cc\u500d\u7684\uff0c\u800c\u662f\u5728\u8fb9\u7f18\u663e\u9732\u51fa\u4e00\u79cd\u6a21\u7cca\u7684\u611f\u89c9\u3002\u66f4\u660e\u663e\u7684\u7269\u4f53\u662f\u8fdc\u5904\u7684\u5730\u5e73\u7ebf\uff0c\u5b83\u603b\u662f\u770b\u8d77\u6765\u662f\u53cc\u500d\u7684\u3002\u5728\u6211\u770b\u6765\uff0c\u661f\u661f\u662f\u5982\u6b64\u6a21\u7cca\uff0c\u4ee5\u81f3\u4e8e\u6211\u4e0d\u80fd\u8bf4\u6211\u770b\u5230\u7684\u662f\u4e0d\u662f\u52a0\u500d\u7684\uff0c\u800c\u662f\u76f8\u5f53\u591a\u4e91\u7684\u3002\u5f53\u6211\u5728\u65c5\u884c\u4e2d\u89c2\u5bdf\u5730\u5e73\u7ebf\u65f6\uff0c\u6211\u7b2c\u4e00\u6b21\u6ce8\u610f\u5230\u4e86\u8fd9\u4e00\u4e8b\u5b9e\u3002\n\u201c\u5f53\u6211\u901a\u8fc7\u5361\u7247\u4e0a\u7684\u4e00\u4e2a\u5c0f\u5b54\uff0c\u6216\u8005\u901a\u8fc7\u6211\u7684\u624b\u6307\u548c\u62c7\u6307\u4e4b\u95f4\u7684\u4e00\u4e2a\u5c0f\u5f00\u53e3(\u6211\u7ecf\u5e38\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u770b\u5f97\u66f4\u6e05\u695a)\uff0c\u6211\u5c31\u4f1a\u5931\u53bb\u8f83\u5f31\u7684\u56fe\u50cf\u3002\u201d\u5f53\u6211\u5411\u540e\u4ef0\u7740\u5934\uff0c\u628a\u6211\u7684\u89c6\u7ebf\u5bf9\u51c6\u773c\u76ae\u4e0b\u65f6\uff0c\u6211\u4e5f\u53ef\u4ee5\u6446\u8131\u5b83\uff0c\u56e0\u4e3a\u4ece\u7269\u4f53\u53d1\u51fa\u7684\u5149\u7ebf\u975e\u5e38\u63a5\u8fd1\u5b83\u3002\n\u201c\u5982\u679c\u6211\u7528\u4e00\u53ea\u773c\u775b\u900f\u8fc7\u51f9\u900f\u955c\u770b\uff0c\u6211\u53ea\u80fd\u770b\u5230\u4e00\u4e2a\u7269\u4f53\u3002\u6211\u76b1\u7709\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u53bb\u6389\u7b2c\u4e8c\u4e2a\u5f62\u8c61\uff0c\u4f46\u90a3\u9700\u8981\u76f8\u5f53\u5927\u7684\u52aa\u529b\u3002\u201c\n\u5df4\u8d1d\u5947\u4e0e\u7267\u5e08\u4eec\u7684\u5171\u540c\u5174\u8da3\u53ef\u80fd\u4fc3\u4f7f\u4ed6\u57281847\u5e74\u5efa\u9020\u4e86\u4e00\u4e2a\u68c0\u773c\u955c\u6765\u68c0\u67e5\u81ea\u5df1\u7684\u773c\u775b\u3002\u5f53\u65f6\uff0c\u68c0\u773c\u955c\u8fd9\u4e2a\u8bcd\u8fd8\u4e0d\u4e3a\u4eba\u6240\u77e5\u3002\n1846\u5e74\uff0c\u5a01\u5ec9\u00b7\u5361\u660e(William Cumming)\u5199\u4e86\u4e00\u7bc7\u201c\u5173\u4e8e\u4eba\u773c\u7684\u53d1\u5149\u5916\u89c2\u53ca\u5176\u5728\u89c6\u7f51\u819c\u548c\u773c\u775b\u540e\u90e8\u75be\u75c5\u68c0\u6d4b\u4e2d\u7684\u5e94\u7528\u201d\uff0c\u8fd9\u662f\u7b2c\u4e00\u7bc7\u89e3\u91ca\u7167\u660e\u8f74\u548c\u89c2\u5bdf\u8f74\u5fc5\u987b\u91cd\u5408\u624d\u80fd\u89c2\u5bdf\u773c\u5e95\u7684\u8bba\u6587\u3002\n\u6ca1\u6709\u8bc1\u636e\u8868\u660e\u5df4\u8d1d\u5947\u77e5\u9053\u5361\u660e\u7684\u8bba\u6587\uff0c\u4f46\u5728\u4f26\u6566\u70ed\u95f9\u7684\u79d1\u5b66\u754c\uff0c\u5f88\u53ef\u80fd\u662f\u5df4\u8d1d\u5947\u8bfb\u4e86\u5361\u660e\u7684\u8bba\u6587\uff0c\u4ed6\u4f1a\u610f\u8bc6\u5230\u5982\u4f55\u5c06\u773c\u5e95\u53ef\u89c6\u5316\u3002\n\u5728\u5927\u82f1\u56fe\u4e66\u9986\u7684\u624b\u5199\u5ba4\u91cc\uff0c\u670919\u5377\u7ed9\u5df4\u8d1d\u5947\u7684\u4fe1\u548c\u4ed6\u7684\u8349\u7a3f\uff0c\u5171\u8ba110000\u591a\u5c01\u4fe1\u3002\u6211\u4e00\u76f4\u5728\u5bfb\u627e\u5df4\u8d1d\u5947\u89c6\u529b\u6709\u7f3a\u9677\u7684\u7ebf\u7d22\uff0c\u5e76\u53c2\u8003\u4e86\u4e00\u79cd\u76f4\u89c6\u773c\u775b\u7684\u4eea\u5668\u3002\u5728\u6240\u6709\u7684\u4f20\u8bb0\u548c\u5df4\u8d1d\u5947\u81ea\u5df1\u7684\u534a\u81ea\u4f20\u201c\u54f2\u5b66\u5bb6\u7684\u4e00\u751f\u201d\u4e2d\uff0c\u90fd\u6ca1\u6709\u63d0\u5230\u8fd9\u4e24\u4e2a\u5b57\u3002\u5df4\u8d1d\u5947\u5b66\u8005\u6ca1\u6709\u610f\u8bc6\u5230\u5df4\u8d1d\u5947\u6709\u773c\u775b\u7f3a\u9677\u3002\n\u4e3a\u4ec0\u4e48\u5df4\u8d1d\u5947\u628a\u4ed6\u7684\u4e50\u5668\u7ed9\u6258\u9a6c\u65af\u00b7\u6c83\u987f\u00b7\u743c\u65af(Thomas Wharton Jones)\u770b\uff0c\u800c\u4e0d\u662f\u5361\u660e(\u5982\u679c\u4ed6\u8ba4\u8bc6\u5361\u660e\u7684\u8bdd)\uff0c\u751a\u81f3\u662f\u666e\u96f7\u6c83\u65af\u7279(Pr\u00e9vosts)\uff1f\n\u6258\u9a6c\u65af\u00b7\u6c83\u987f\u00b7\u743c\u65af\u66fe\u5728\u7231\u4e01\u5821\u5b66\u4e60\uff0c\u4f46\u5728\u65e0\u610f\u4e2d\u5377\u5165\u4e86\u4f2f\u514b\u548c\u9ed1\u5c14\u7684\u62a2\u5c38\u4e11\u95fb\u540e\u79bb\u5f00\u4e86\u3002\u4ed6\u642c\u5230\u4e86\u683c\u62c9\u65af\u54e5\uff0c\u52a0\u5165\u4e86\u5a01\u5ec9\u00b7\u9ea6\u80af\u9f50(William Mackenzie)\uff0c\u4ed6\u4e3a\u4ed6\u7684\u7ecf\u5178\u8bba\u6587\u63d0\u4f9b\u4e86\u773c\u775b\u7684\u65ad\u5c42\u89e3\u5256\u56fe\u3002\n\u9ea6\u80af\u9f50\u77e5\u9053\u5df4\u8d1d\u5947\u6709\u773c\u775b\u7f3a\u9677\uff0c\u6709\u53ef\u80fd\u662f\u4ed6\u63a8\u8350\u4ed6\u53bb\u770b\u4ed6\u7684\u95e8\u5f92\u6c83\u987f\u00b7\u743c\u65af(Wharton Jones)\uff0c\u540e\u8005\u73b0\u5728\u662f\u4f26\u6566\u4e00\u4f4d\u6770\u51fa\u7684\u773c\u79d1\u533b\u751f\uff0c\u7231\u5fb7\u534e\u00b7\u8a79\u7eb3(Edward Jenner)\u79f0\u4ed6\u662f\u6709\u53f2\u4ee5\u6765\u6700\u4f1f\u5927\u7684\u82f1\u56fd\u4eba\u4e4b\u4e00\u3002\n1847\u5e74\uff0c\u6c83\u987f\u00b7\u743c\u65af(Wharton Jones)\u627f\u8ba4\u66fe\u5c1d\u8bd5\u8fc7\u8fd9\u79cd\u4eea\u5668\uff0c\u4f46\u4ee5\u4ef7\u503c\u4e0d\u5927\u4e3a\u7531\u62d2\u7edd\u4e86\u5b83\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u4f9d\u9760\u4ed6\u6765\u63cf\u8ff0\u5df4\u8d1d\u5947\u7684\u68c0\u773c\u955c\u3002\u8be5\u6a21\u578b\u7531\u4e00\u5757\u5e73\u9762\u955c\u7ec4\u6210\uff0c\u5728\u4e2d\u5fc3\u7684\u4e24\u4e09\u4e2a\u5c0f\u70b9\u522e\u53bb\u9540\u94f6\u7684\u90e8\u5206\uff0c\u4ee5\u4e00\u5b9a\u89d2\u5ea6\u56fa\u5b9a\u5728\u7ba1\u5b50\u5185\uff0c\u8fd9\u6837\u4ece\u4fa7\u9762\u7684\u5f00\u53e3\u6295\u5c04\u5230\u955c\u9762\u4e0a\u7684\u5149\u7ebf\u5c31\u4f1a\u53cd\u5c04\u5230\u75c5\u4eba\u7684\u773c\u775b\u91cc\u3002\u89c2\u5bdf\u8005\u4ece\u955c\u5b50\u7684\u53e6\u4e00\u7aef\u900f\u8fc7\u6e05\u6670\u7684\u6591\u70b9\u770b\u8fc7\u53bb\u3002\n\u6c83\u987f\u00b7\u743c\u65af(Wharton Jones)\u662f\u5ba1\u67e5\u8fd9\u79cd\u4eea\u5668\u7684\u4e00\u4e2a\u7cdf\u7cd5\u7684\u9009\u62e9\uff1a\u5728\u773c\u5e95\u955c\u88ab\u666e\u904d\u4f7f\u75283\u5e74\u540e\uff0c\u4ed6\u4ecd\u7136\u5bf9\u5176\u4ef7\u503c\u6301\u6000\u7591\u6001\u5ea6\uff0c\u8ba4\u4e3a\u5149\u7ebf\u5bf9\u89c6\u7f51\u819c\u6709\u5371\u9669\uff0c\u800c\u4e14\u4ed6\u662f\u4e00\u4e2a\u8fd1\u89c6\u773c\u3002\u5173\u952e\u7684\u662f\uff0c\u5df4\u8d1d\u5947\u5728\u4ed6\u7684\u8bbe\u8ba1\u4e2d\u9057\u6f0f\u4e86\u4e00\u4ef6\u4e8b\uff0c\u6d77\u59c6\u970d\u5179\u610f\u8bc6\u5230\uff0c\u4ed6\u9700\u8981\u5728\u89c2\u5bdf\u8005\u7684\u773c\u775b\u548c\u955c\u5b50\u540e\u9762\u4e4b\u95f4\u5b89\u88c5\u4e00\u4e2a\u51f9\u900f\u955c\uff0c\u4ee5\u6821\u6b63\u6765\u81ea\u60a3\u8005\u89c6\u7f51\u819c\u7684\u4f1a\u805a\u5149\u7ebf\u3002\u867d\u7136\u5df4\u8d1d\u5947\u4f7f\u7528\u7684\u662f\u5e26\u5149\u5708\u7684\u5e73\u9762\u955c\uff0c\u800c\u4e0d\u662f\u4ea5\u59c6\u970d\u5179\u4f7f\u7528\u7684\u5e73\u884c\u73bb\u7247\uff0c\u4f46\u5149\u5b66\u539f\u7406\u57fa\u672c\u4e0a\u662f\u4e00\u6837\u7684\u3002\u4ece\u53d7\u8bd5\u8005\u773c\u775b\u53cd\u5c04\u7684\u5149\u7ebf\u5c06\u4f1a\u805a\uff0c\u8fd9\u53d6\u51b3\u4e8e\u773c\u775b\u7684\u6298\u5c04\u548c\u60a3\u8005\u7684\u9002\u5e94\u80fd\u529b\u3002\u901a\u8fc7\u5728\u89c2\u5bdf\u8005\u7684\u773c\u775b\u524d\u9762\u653e\u7f6e\u4e00\u4e2a\u51f9\u900f\u955c\uff0c\u5149\u7ebf\u53ef\u4ee5\u53d1\u6563\uff0c\u8fd9\u6837\u89c2\u5bdf\u8005\u5982\u679c\u9002\u5e94\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u628a\u5b83\u4eec\u5e26\u5230\u7126\u70b9\u4e0a\u3002\u89c2\u5bdf\u8005\u5c06\u4e0d\u5f97\u4e0d\u4e0e\u5927\u7ea65\u5ea6\u7684\u7167\u660e\u533a\u57df\u4f5c\u6597\u4e89\uff0c\u8fd9\u52a0\u5267\u4e86\u4e00\u4e2a\u5df2\u7ecf\u5f88\u56f0\u96be\u7684\u8fc7\u7a0b\u3002\u7531\u4e8e\u8fd1\u89c6\uff0c\u6c83\u987f\u00b7\u743c\u65af\u53ef\u80fd\u53ea\u770b\u5230\u4e86\u5f88\u5c0f\u7684\u5fae\u5f31\u7684\u7ea2\u8272\u53cd\u5c04\uff0c\u6240\u4ee5\u4ed6\u4ee5\u4e0d\u53ef\u884c\u4e3a\u7531\u62d2\u7edd\u4e86\u8fd9\u53f0\u4eea\u5668\u3002\u5df4\u8d1d\u5947\u6ca1\u6709\u8ffd\u6c42\u4ed6\u7684\u53d1\u660e\u3002\n1827\u5e74\uff0c\u5f53\u4ed6\u51fa\u7248\u4ed6\u7684\u5bf9\u6570\u8868\u683c\u6837\u672c\u65f6\uff0c\u5b83\u662f\u5370\u5728\u5f69\u8272\u7eb8\u4e0a\u7684\u3002\u4ed6\u8bd5\u9a8c\u4e86\u4e0d\u5c11\u4e8e151\u79cd\u4e0d\u540c\u989c\u8272\u7684\u7eb8\uff0c\u7136\u540e\u51b3\u5b9a\u7528\u8d6d\u9ec4\u8272\uff0c\u58f0\u79f0\u7528\u8fd9\u79cd\u989c\u8272\u4eba\u773c\u53ef\u4ee5\u66f4\u597d\u5730\u5fcd\u53d7\u8fd9\u4e9b\u8868\u683c\u7684\u5197\u957f\u8bfb\u6570\u3002\n1859\u5e74\uff0c\u201c\u773c\u79d1\u533b\u9662\u62a5\u544a\u548c\u7687\u5bb6\u4f26\u6566\u773c\u79d1\u533b\u9662\u6742\u5fd7\u201d\u88ab\u5370\u5728\u9ec4\u8272\u7eb8\u5f20\u4e0a\uff0c\u7f16\u8f91J\u00b7F\u00b7\u65af\u7279\u91cc\u7279\u83f2\u5c14\u5fb7\u7ed9\u4e86\u5df4\u8d1d\u5947\u7684\u6392\u7248\u6e05\u6670\u5ea6\u89c4\u5219\u5f88\u5927\u7684\u7bc7\u5e45\u300212\u4e2a\u3002\n\u76f4\u52301847\u5e74\u5df4\u8d1d\u5947\u5efa\u9020\u4ed6\u7684\u68c0\u773c\u955c\u4e4b\u524d\uff0c\u4ed6\u4e00\u76f4\u5728\u4e0e\u653f\u5e9c\u4e89\u53d6\u8d44\u91d1\u6765\u5f00\u53d1\u4ed6\u7684\u5206\u6790\u4eea\u5668\u3002\u7687\u5bb6\u5929\u6587\u5b66\u5bb6\u4e54\u6cbb\u00b7\u827e\u91cc\u8d28\u7591\u673a\u68b0\u5316\u7684\u5fc5\u8981\u6027\uff0c\u800c\u4e0d\u662f\u4f20\u7edf\u7684\u624b\u5de5\u8ba1\u7b97\uff0c\u5e76\u5c06\u5df4\u8d1d\u5947\u7684\u673a\u5668\u79f0\u4e3a\u201c\u8fd9\u4ef6\u4e8b\u662f\u4e2a\u9a97\u4eba\u7684\u4e1c\u897f\u201d\u3002\n\u5230\u4e861847\u5e74\uff0c\u5df4\u8d1d\u5947\u57fa\u672c\u4e0a\u5df2\u7ecf\u6210\u4e3a\u4e00\u540d\u673a\u68b0\u8ba1\u7b97\u5927\u5e08\uff0c\u4ed6\u6b63\u4e13\u6ce8\u4e8e\u4ed6\u76842\u53f7\u5dee\u5206\u673a\u7684\u8bbe\u8ba1\uff0c\u8fd9\u53f0\u5dee\u5206\u673a\u6b63\u5728\u5efa\u9020\u4e2d\u3002\n\u4e0d\u5e78\u7684\u5df4\u8d1d\u5947\u7684\u7edd\u5999\u6982\u5ff5\u5728\u4ed6\u6b7b\u540e100\u5e74\u88ab\u8bc1\u660e\u662f\u6b63\u786e\u7684\uff0c\u4ed6\u7684\u5dee\u5f02\u5f15\u64ce\u662f\u4ece\u4ed6\u513f\u5b50\u4ea8\u5229\u7559\u4e0b\u7684\u56fe\u753b\u4e2d\u5728\u4f26\u6566\u7684\u79d1\u5b66\u535a\u7269\u9986\u7cbe\u5fc3\u5efa\u9020\u7684\u3002\u5b83\u5de5\u4f5c\u5f97\u975e\u5e38\u597d\uff0113\u8fd9\u53f0\u6700\u6f02\u4eae\u7684\u673a\u5668\u80fd\u8ba1\u7b97\u523030\u4e2a\u5c0f\u6570\u70b9\uff0c\u7136\u540e\u628a\u7ed3\u679c\u6253\u5370\u51fa\u6765\u3002\n\u5df4\u8d1d\u5947\u662f\u7ef4\u591a\u5229\u4e9a\u65f6\u4ee3\u7684\u4e00\u540d\u535a\u5b66\u8005\uff0c\u4f46\u4ed6\u7684\u4e2a\u4eba\u751f\u6d3b\u5145\u6ee1\u4e86\u65e0\u6cd5\u91ca\u6000\u7684\u60b2\u4f24\u3002\u4ed6\u6709\u516b\u4e2a\u5b69\u5b50\uff1a\u53ea\u6709\u4e09\u4e2a\u6d3b\u4e86\u4e0b\u6765\u30021827\u5e74\uff0c\u4ed6\u7684\u7236\u4eb2\u3001\u59bb\u5b50\u548c\u4e24\u4e2a\u5b69\u5b50\u53bb\u4e16\u3002\u4ed6\u5fc3\u7231\u7684\u5973\u513f\u4e54\u6cbb\u4e9a\u5a1c\u4e8e1834\u5e74\u53bb\u4e16\uff1b\u4ed6\u4ece\u672a\u4ece\u8fd9\u4ef6\u4e8b\u4e2d\u6062\u590d\u8fc7\u6765\u3002\n\u4ece\u5f88\u5c0f\u7684\u65f6\u5019\u8d77\uff0c\u5df4\u8d1d\u5947\u5c31\u5f00\u59cb\u53d1\u660e\u3001\u89e3\u8c1c\u548c\u5b9e\u9a8c\u3002\u4ed6\u5728\u7ae5\u5e74\u5c1d\u8bd5\u5e26\u6709\u8fde\u63a5\u94f0\u94fe\u7684\u811a\u6868\u65f6\u51e0\u4e4e\u6eba\u6c34\u8eab\u4ea1\uff0c\u5e0c\u671b\u901a\u8fc7\u5b83\u4eec\u7684\u62bd\u6c34\u52a8\u4f5c\uff0c\u4ed6\u53ef\u4ee5\u5728\u6c34\u4e0a\u884c\u8d70\u3002\u4ed6\u7684\u4fe1\u53f7\u706f--\u9690\u853d\u7684\u7535\u62a5--\u88ab\u4fc4\u56fd\u4eba\u4eff\u5236\u5e76\u7528\u4e8e\u585e\u5df4\u65af\u6258\u6ce2\u5c14\u3002\u5728\u8fc8\u514b\u5c14\u00b7\u6cd5\u62c9\u7b2c\u7684\u5efa\u8bae\u4e0b\uff0c\u4ed6\u8bbe\u8ba1\u4e86\u5728\u5267\u9662\u4f7f\u7528\u6ee4\u8272\u5668\u7684\u65b9\u6cd5\u3002\n\u572819\u4e16\u7eaa40\u5e74\u4ee3\u548c50\u5e74\u4ee3\uff0c\u5df4\u8d1d\u5947\u5728\u4f26\u6566\u53d7\u5230\u793e\u4f1a\u7684\u63a8\u5d07\uff0c\u4ed6\u662f\u4e00\u4e2a\u5584\u4e8e\u4ea4\u9645\u7684\u4eba\uff0c\u5728\u4ed6\u4f4d\u4e8e\u591a\u585e\u7279\u8857\u7684\u5bb6\u4e2d\u4e3e\u529e\u4e86200-300\u4eba\u7684\u665a\u4f1a\u3002\n\u4e3a\u4e86\u6d88\u9063\uff0c\u4ed6\u6210\u4e86\u5f00\u9501\u9ad8\u624b\uff0c\u5728\u514b\u91cc\u7c73\u4e9a\u6218\u4e89\u5f00\u59cb\u7684\u77ed\u77ed\u4e24\u5468\u5185\u5c31\u7834\u89e3\u4e86\u5df2\u6709300\u5e74\u5386\u53f2\u7684\u7ef4\u683c\u7eb3\u5bc6\u7801(Vigen\u00e8re Cipher)\u7684\u5bc6\u7801\u3002\n\u5927\u82f1\u56fe\u4e66\u9986\u7684\u4e66\u4fe1\u4e2d\u6709\u67e5\u5c14\u65af\u00b7\u72c4\u66f4\u65af\u7684\u4e66\u4fe1\uff0c\u6d1b\u592b\u83b1\u65af\u4f2f\u7235\u592b\u4eba\u827e\u8fbe\u5bf9\u6b64\u975e\u5e38\u611f\u5174\u8da3\u3002\u65e9\u671f\u7684\u7f8e\u56fd\u8ba1\u7b97\u673a\u8f6f\u4ef6\u4ee5\u5979\u7684\u540d\u5b57\u547d\u540d\u4e3a\u827e\u8fbe\u3002\u95e8\u5fb7\u5c14\u677e\u56e0\u4e3a6\u4e2a\u5c0f\u65f6\u7684\u6392\u7ec3\u5934\u75bc\u800c\u62d2\u7edd\u53c2\u52a0\u665a\u4f1a\u7684\u4fe1\u3002\u4e0e\u5e03\u9c81\u5185\u5c14\u8fdb\u884c\u4e86\u591a\u6b21\u4ea4\u6d41\uff0c\u5df4\u8d1d\u5947\u66fe\u5c31\u5927\u897f\u90e8\u94c1\u8def\u5411\u4ed6\u8bf7\u6559\u3002\n\u4ed6\u4e0e\u5f53\u65f6\u7684\u79d1\u5b66\u754c\u548c\u533b\u5b66\u754c\u6709\u8bb8\u591a\u63a5\u89e6\uff1a\u5a01\u5ec9\u00b7\u6c83\u5c14\u65af\u987f\u7235\u58eb\u3001\u8fc8\u514b\u5c14\u00b7\u6cd5\u62c9\u7b2c\u7235\u58eb\u3001\u7ea6\u7ff0\u00b7\u8d6b\u6b47\u5c14\u7235\u58eb\u3001\u67e5\u5c14\u65af\u00b7\u60e0\u7279\u65af\u901a\u3001\u5965\u53e4\u65af\u4e01\u00b7\u83f2\u6d85\u5c14\u548c\u5a01\u5ec9\u00b7\u60e0\u5a01\u5c14\u7267\u5e08\uff0c\u540e\u8005\u521b\u9020\u4e86\u6563\u5149\u8fd9\u4e2a\u8bcd\uff0c\u5e76\u5f15\u5165\u4e86\u201c\u79d1\u5b66\u5bb6\u201d\u8fd9\u4e2a\u8bcd\u3002\u4e0e\u7406\u67e5\u5fb7\u00b7\u6b27\u6587(Richard Owen)\u548c\u7ea6\u745f\u592b\u00b7\u674e\u65af\u7279\u7235\u58eb(Sir Joseph Lister)\u7b49\u533b\u5b66\u754c\u4eba\u58eb\u901a\u4fe1\uff0c\u8be2\u95ee\u5c3c\u79d1\u5c14\u504f\u632f\u68f1\u955c\u5728\u4ed6\u7684\u6d88\u6bd2\u5de5\u4f5c\u4e2d\u7684\u4f7f\u7528\u60c5\u51b5\u3002\n\u6709\u73b0\u4ee3\u6444\u5f71\u4e4b\u7236\u5a01\u5ec9\u00b7\u798f\u514b\u65af\u00b7\u5854\u5c14\u535a\u7279(William Fox Talbot)\u57281839\u5e74\u548c\u4f1f\u5927\u7684\u8096\u50cf\u5bb6\u5b89\u6258\u4e07\u00b7\u514b\u52b3\u4ee3\u7279(Antoine Claudet)\u4f7f\u7528\u8fbe\u76d6\u5c14(Daguerre)\u65b9\u6cd5\u7684\u4fe1\u4ef6\u3002\u4ed6\u6700\u4eb2\u5bc6\u7684\u670b\u53cb\u7ea6\u7ff0\u00b7\u8d6b\u6b47\u5c14\u53d1\u73b0\u4e86\u666e\u9c81\u58eb\u84dd\u7684\u6c30\u5316\u94be\uff0c\u8fd9\u662f\u5f71\u5370\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff1b\u963f\u5c14\u5f17\u96f7\u5fb7\u00b7\u65af\u5bc6\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u4e3a\u4ed6\u63d0\u4f9b\u4e86\u8fd9\u4e00\u8fc7\u7a0b\u6240\u5fc5\u9700\u7684\u94c1\u6c30\u5316\u94be\u3002\n1824\u5e74\uff0c\u5927\u536b\u00b7\u5e03\u9c81\u65af\u7279\u7235\u58eb(Sir David Brewster)\u6709\u4e00\u5c01\u5f15\u4eba\u5165\u80dc\u7684\u4fe1\uff0c\u4ed6\u662f\u4e07\u82b1\u7b52\u7684\u53d1\u660e\u8005\u4e4b\u4e00\uff0c\u4ed6\u53d1\u73b0\u4e86\u5149\u7684\u504f\u632f\u73b0\u8c61\uff0c\u4fe1\u4e2d\u5199\u9053\uff1a\u201c\u6211\u76ee\u524d\u6b63\u5fd9\u7740\u68c0\u67e5\u9c7c\u7684\u900f\u955c\uff0c\u4f46\u6211\u65e0\u6cd5\u5f97\u5230\u9ca4\u9c7c\u548c\u4e01\u9c7c\u7684\u900f\u955c\u3002\u6211\u60f3\u5230\u5728\u4f26\u6566\u4e5f\u53ef\u4ee5\u4e70\u5230\uff0c\u201c\u2026\u2026\u201d\u955c\u5934\u5728\u70ed\u6c34\u4e2d\u6d78\u6ce1\u51e0\u5206\u949f\uff0c\u5c31\u53ef\u4ee5\u5b89\u5168\u5730\u7528\u4e00\u5f20\u7eb8\u5305\u88f9\u8d77\u6765\u4e86\u3002\u201c(\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u201d\u4ed6\u8bf4\uff0c\u201c\u5982\u679c\u628a\u955c\u5934\u653e\u5728\u70ed\u6c34\u4e2d\u6d78\u6ce1\u51e0\u5206\u949f\uff0c\u5b83\u4eec\u5c31\u53ef\u4ee5\u5b89\u5168\u5730\u5305\u5728\u4e00\u5f20\u7eb8\u91cc\u4e86\u3002\u201d\u4ed6\u611f\u8c22\u5df4\u8d1d\u5947\u6240\u4f5c\u7684\u201c\u975e\u5e38\u5947\u7279\u800c\u6709\u8da3\u7684\u5149\u5b66\u6c47\u7f16\uff0c\u6beb\u65e0\u7591\u95ee\uff0c\u6211\u4eec\u5c06\u4ece\u4e2d\u5f97\u5230\u8bb8\u591a\u5173\u4e8e\u8fd9\u95e8\u79d1\u5b66\u65e9\u671f\u5386\u53f2\u7684\u542f\u793a\u3002\u201d\u8fd9\u662f\u7531\u5df4\u8d1d\u5947\u7f16\u8f91\u7684\u201c\u65af\u514b\u91cc\u666e\u7279\u96f7\u65af\u5149\u5b6615\u201d\uff0c\u7531\u60e0\u66f4\u65af\u3001\u7b1b\u5361\u5c14\u3001\u54c8\u96f7\u3001\u5df4\u7f57\u7b49\u4eba\u7684\u8bba\u6587\u7ec4\u6210\u3002\u5e03\u9c81\u65af\u7279\u5bf9\u4e00\u79cd\u76f4\u89c6\u773c\u775b\u7684\u5de5\u5177\u5f88\u611f\u5174\u8da3\uff0c\u5df4\u8d1d\u5947\u4e0e\u4ed6\u9891\u7e41\u7684\u901a\u4fe1\u4e5f\u53ef\u80fd\u4e3a\u5df4\u8d1d\u5947\u7684\u5efa\u9020\u63d0\u4f9b\u7ebf\u7d22\u3002\n\u5df4\u8d1d\u5947\u5bfb\u6c42\u5bf9\u4ed6\u7684\u516c\u5171\u670d\u52a1\u7684\u8ba4\u53ef\uff0c\u4f46\u4ed6\u7684\u56fa\u6267\u548c\u4e0d\u59a5\u534f\u4e0e\u592a\u591a\u6709\u6743\u52bf\u7684\u4eba\u4e3a\u654c\uff0c\u4ed6\u7684\u91ce\u5fc3\u8d85\u51fa\u4e86\u653f\u5e9c\u51c6\u5907\u63d0\u4f9b\u7684\u8303\u56f4\u3002\u4ed6\u540c\u65f6\u4ee3\u7684\u5927\u591a\u6570\u4eba\u90fd\u63a5\u53d7\u8fc7\u9a91\u58eb\u79f0\u53f7\u3002\u4e0d\u5230\u4e00\u4e2a\u8d35\u65cf\u5934\u8854\u90fd\u4f1a\u8ba9\u4ed6\u6ee1\u610f--\u76f8\u53cd\uff0c\u4ed6\u572879\u5c81\u65f6\u5b64\u72ec\u5730\u6b7b\u53bb\uff0c\u6ca1\u6709\u6210\u5c31\u611f\uff0c\u8eab\u4f53\u72b6\u51b5\u4e0d\u4f73\uff0c\u751a\u81f3\u5728\u5f25\u7559\u4e4b\u9645\u4e5f\u88ab\u610f\u5927\u5229\u98ce\u7434\u7814\u78e8\u673a\u7684\u58f0\u97f3\u6298\u78e8\u7740\uff0c\u4ed6\u8bf4\u610f\u5927\u5229\u98ce\u7434\u7814\u78e8\u673a\u662f\u4e00\u79cd\u516c\u5171\u6ecb\u6270\u3002\n\u4ed6\u5bf9\u79d1\u5b66\u53d1\u660e\u7684\u597d\u5947\u5fc3\u4e00\u76f4\u4fdd\u6301\u5230\u665a\u5e74\u3002\u4ed6\u8bf4\uff0c\u5982\u679c\u80fd\u8ba9\u4ed6\u6d3b3\u5929\uff0c\u4e5f\u5c31\u662f500\u5e74\u540e\uff0c\u5728\u4e00\u4f4d\u79d1\u5b66\u5bfc\u6e38\u7684\u5e2e\u52a9\u4e0b\uff0c\u4ed6\u5f88\u4e50\u610f\u653e\u5f03\u4f59\u751f\uff0c\u8fd9\u4f4d\u5bfc\u6e38\u53ef\u4ee5\u5411\u4ed6\u89e3\u91ca\u81ea\u4ed6\u6b7b\u540e\u6240\u53d6\u5f97\u7684\u53d1\u73b0\u3002\n\u67e5\u5c14\u65af\u00b7\u5df4\u8d1d\u5947\u4e8e1871\u5e74\u88ab\u57cb\u846c\u5728\u4f26\u6566\u80af\u8428\u5c14\u00b7\u683c\u6797\u516c\u5893\uff0c\u846c\u793c\u53ea\u5438\u5f15\u4e86\u4e00\u8f86\u9a6c\u8f66\u3002\u5728\u4ed6\u7684\u5efa\u8bae\u4e0b\uff0c\u4ed6\u7684\u5927\u8111\u88ab\u53d6\u51fa\uff0c\u4ea4\u7ed9\u7687\u5bb6\u5916\u79d1\u5b66\u9662\u8fdb\u884c\u7814\u7a76\u3002\n\u5982\u679c\u4e0d\u662f\u56e0\u4e3a\u5728\u4ed6\u7684\u773c\u775b\u89c2\u5bdf\u4eea\u5668\u4e2d\u589e\u52a0\u4e864\u62165\u5c48\u5149\u5ea6\u7684\u51f9\u900f\u955c\uff0c\u5df4\u8d1d\u5947\u4eca\u5929\u53ef\u80fd\u4f1a\u4f5c\u4e3a\u73b0\u4ee3\u773c\u79d1\u65f6\u4ee3\u7684\u5148\u9a71\u800c\u95fb\u540d\u4e8e\u4e16\u3002\n1.\u5df4\u5185\u7279\u00b7A\u00b7\u67e5\u5c14\u65af\u00b7\u5df4\u8d1d\u5947\u7684\u773c\u79d1\u53d1\u660e\u3002\u201c\u53cd\u52a8\u6d3e\u201d1940\uff1b\u4e94\u6708\uff1a141-3\u3002[\u8c37\u6b4c\u5b66\u8005]\u3002\n3.\u9ea6\u80af\u9f50\u00b7W\u201c\u773c\u79d1\u75be\u75c5\u5b9e\u7528\u8bba\u8457\u201d(Mackenzie W.A\u5b9e\u7528\u6027\u8bba\u8457)\u3002\u4f26\u6566\uff1a\u6717\u66fc\u3001\u91cc\u65af\u3001\u5965\u59c6\u3001\u5e03\u6717\u3001\u683c\u6797\u548c\u6717\u66fc\u51fa\u7248\u793e\uff0c1835\uff1b20\uff1a855\u3002[\u8c37\u6b4c\u5b66\u8005]\u3002\n4.Pr\u00e9vost P.Doublement d\u2018un Object Par un Oeil\u72ec\u4e00\u65e0\u4e8c\u3002Chimie et de Physique 1832\uff1b51\uff1a210\u3002[\u8c37\u6b4c\u5b66\u8005]\u3002\n5.\u666e\u96f7\u6c83\u65af\u7279\u7f8e\u8054\u793e(Pr\u00e9vost AP)\u3002\u8fd9\u662f\u4e00\u6b3e\u53cc\u76ee\u89c6\u89c9\u671b\u8fdc\u955c(ESAI Sur la T\u00e9orie de la Vision Binoculaire)\u3002\u6770\u59ae\u8299\uff1a\u6321\u4f4f\u3002\u5170\u535a\u5179\uff0c1843\u5e74\u3002\n6.Pr\u00e9vost JL.\u3002\u504f\u79bb\u5171\u8f6d\u4e0e\u65cb\u8f6c\u7684\u5173\u7cfb\u786e\u5b9a\u4e3a\u4e00\u5b9a\u7684\u504f\u5dee\u503c\u3002(\u8bd1\u8005\u6ce8\uff1a\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u201c\u6211\u7684\u610f\u601d\u662f\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u76f8\u77db\u76fe\u7684\u73b0\u8c61\u3002\u201d\u3002)\u3002\u201c\u5df4\u9ece\uff1a\u7ef4\u514b\u591a\u00b7\u9a6c\u68ee\u548c\u83f2\u5c14\u65af\u201d\uff0c1868\u5e74\u3002\n7.PREVOST P.1970-1976\u5e74\u79d1\u5b66\u4f20\u8bb0\u8bcd\u5178\u3002\u67e5\u5c14\u65af\u00b7\u5e93\u5c14\u65af\u987f\u00b7\u5409\u83b1\u65af\u76ae\u4e3b\u7f16\u3002\u7ebd\u7ea6\uff1a\u67e5\u5c14\u65af\u00b7\u65af\u514b\u91cc\u5e03\u7eb3\u3002\n8.\u5173\u4e8e\u4eba\u773c\u7684\u53d1\u5149\u5916\u89c2\u7684Cumming W.\u3002TRANMED CHIR SOC 1846\uff1b29\uff1a283\u3002[PMC\u514d\u8d39\u6587\u7ae0][PubMed][\u8c37\u6b4c\u5b66\u8005]\u3002\n9.\u5df4\u8d1d\u5947C.\u54f2\u5b66\u5bb6\u751f\u5e73\u7684\u6bb5\u843d\u3002\u4f26\u6566\uff1a\u6717\u66fc\u3001\u683c\u6797\u3001\u6717\u66fc\u3001\u7f57\u4f2f\u7279\u00b7\u683c\u6797\u51fa\u7248\u793e\uff0c1864\u5e74\u51fa\u7248\u3002\n10.Wharton Jones T.BR Foreign Med Chir Rev 1854\uff1bXIV(10\u6708)\uff1a425-32\u3002[\u8c37\u6b4c\u5b66\u8005]\u3002\n11.\u5df4\u8d1d\u5947C.\u5bf9\u6570\u8868\u6837\u672c\u3002\u4e00\u4e2a\u8d26\u6237\u3002ED Jour of Science(Brewster\u2018s)1832\u5e74\uff1bVI\uff1a144\u3002[\u8c37\u6b4c\u5b66\u8005]\u3002\n12.\u65af\u7279\u91cc\u7279\u83f2\u5c14\u5fb7JF.\u3002\u5728\u5f69\u7eb8\u4e0a\u3002\u773c\u79d1\u533b\u9662\u62a5\u544a\u548c\u7687\u5bb6\u4f26\u6566\u773c\u79d1\u533b\u9662\u6742\u5fd7\uff0c1859\u5e7410\u67089\u65e5\u3002[\u8c37\u6b4c\u5b66\u8005]\u3002\n13.\u65af\u74e6\u5fb7\u00b7D\u7684\u9f7f\u8f6e\u5927\u8111\u3002\u67e5\u5c14\u65af\u00b7\u5df4\u8d1d\u5947\u548c\u5efa\u9020\u7b2c\u4e00\u53f0\u8ba1\u7b97\u673a\u7684\u63a2\u7d22\u3002\u4f26\u6566\uff1a\u5c0f\u5e03\u6717\uff0c2000\u3002\n15.\u5df4\u8d1d\u5947\u00b7C\u00b7\u65af\u514b\u91cc\u666e\u6258\u96f7\u65af\u00b7\u5149\u5b66\uff1a\u6216\u4e0e\u5149\u5b66\u6709\u5173\u7684\u4e8b\u5b9e\u96c6\u3002\u4f26\u6566\uff1aR\u00b7\u5a01\u5c14\u514b\u65af\uff0c1823\u5e74\u3002", "note_en": "In 1850, Hermann von Helmholtz revolutionised ophthalmology by the invention of an eye speculum or ophthalmoscope. Yet, 3 years earlier, an Englishman, Charles Babbage came so near to claiming this great prize.\n Charles Babbage was born in 1791 into a wealthy London banking family. A delicate child, ill health was to dog his long life. He showed an early aptitude for mathematics and became Lucasian Professor of Mathematics at Cambridge, a chair held previously by Sir Isaac Newton; he held it for 10 years without giving a lecture.\n He married Georgiana Whitmore against his father\u2019s wishes, but inherited a fortune from him, freeing him to indulge in his passion for mathematics and mechanics.\n Why should Babbage attempt to construct an instrument for looking into the eye? He was alleged to have had bilateral monocular diplopia\u2014did this create an inquisitiveness to explore his own eyes? Or was there some other reason?\n An article on Babbage in 1940   1  provides a clue about his defective eyesight. He had made two excursions into ophthalmology\u2014the ophthalmoscope and colour vision. Alfred Smee, ophthalmic surgeon to the Bank of England, suggested in 1847   2  that the great William Mackenzie had asserted that Babbage had \u201cirregular vision.\u201d\n Alfred Smee, co-founder of the Central London Ophthalmic Hospital, was an ophthalmologist polymath, and a pioneer of artificial intelligence. Smee was the son of the chief accountant of the Bank of England and Babbage was once called in to advise him on how to combat forgery of bank notes.\n There are several editions of William Mackenzie\u2019s  Practical Treatise on the Diseases of the Eye between 1830 and 1854; there is no reference to Babbage in the first but, in the 1834 edition,   3  Babbage is mentioned. \u201cM(onsieur). Pr\u00e9vost, at the age of 81 years, has published an interesting account of his own case of double vision with a single eye, which he thinks may perhaps arise from a fracture, bruise or partial flattening of the lens or separation of its laminae\u201d...... \u201cPr\u00e9vost has also communicated with Mr Babbage who is affected in either eye singly with double vision, a defect however which he finds himself able to remedy by looking through a small hole in a card or through a concave lens.\u201d Mackenzie cites Pierre Pr\u00e9vost\u2019s communications with Babbage in  Annales de Chimie et de Physique 1832.   4\n The extensive Pr\u00e9vost family contributed much to science and ophthalmology. Attempts had been made to view the interior of the eye and to explain the reflexes coming from it and why the eye demonstrated luminosity under certain conditions. These theories were vague and included fantastic speculations: was the fleeting luminosity phosphorescence, light absorbed during the day giving off light at night like a firefly, or was it naked electricity emitted by the retina?\n In 1810 Benedict Pr\u00e9vost affirmed that the retina could not be seen in the dark; it was the reflection of light which entered the eye from without which gave it luminosity.\n Isaac Benedict Pr\u00e9vost, Pierre\u2019s first cousin, was born in Geneva but became an academic in Montaubon in France. Babbage would have known or been aware of him, being a fellow scientist. Pierre Pr\u00e9vost had three sons, Alexandre,   5  Jean-Louis,   6  and Guillaume. The first two wrote on ophthalmological subjects. Babbage named his younger son Henry Pr\u00e9vost but it is unclear which Pr\u00e9vost was so honoured.\n Pierre Pr\u00e9vost, a Swiss physicist, showed that all bodies, hot or cold, radiate heat   7  and gave the name Daltonism to colour deficiencies. When he presented \u201cThe doubling of an object by one eye on its own\u201d in 1832 he was Professor Emeritus in Geneva, studying the ageing process with himself as the subject. Finding they shared an ailment Pr\u00e9vost and Babbage exchanged information about this unusual eye condition. The following is a translation from the French of part of Babbage\u2019s observations to Pr\u00e9vost.\n \u201cI see two images of objects, vertically one above the other, with two eyes, or with each eye separately, each time that I look at an object without forcing the organ. The superior image is weaker than the inferior image, the real one and is separated by an angle of 12 minutes.\n When I am in bad health, the second image becomes stronger; but the angular distance is, I believe, not altered.\n \u201cBecause of the small separation of the two images, nearby objects do not appear doubled, but an indistinction manifests itself at the edges. The more noticeable object is the remote horizon, which always appears doubled. The stars, to my eyes, are so indistinct, that I am unable to say if I see them doubled but rather cloudy. I noticed this fact for the first time when I was observing the horizon on my travels.\n \u201cWhen I look through a small hole made in a card, or through a small opening between my fingers and thumb (as I very often do to see more clearly) I lose the weaker image. I can also get rid of it when inclining my head backwards and aiming my view under the eyelid, in the manner that the rays coming from the object are very close to it.\n \u201cI see only one object if I look with one eye through a concave lens. I can also get rid of the second image when frowning, but that needs quite an effort.\u201d\n Babbage\u2019s common interests with the Pr\u00e9vosts may have encouraged him to construct an ophthalmoscope in 1847 for examination of his own eyes. At that time the word ophthalmoscope was unknown.\n In 1846, William Cumming wrote \u201cOn a luminous appearance of the human eye and its application to the detection of disease of the retina and posterior part of the eye,\u201d   the first paper to explain that the axis of illumination and observation had to be coincident to view the fundus.\n There is no evidence that Babbage knew of Cumming\u2019s paper but in the buzzing scientific community in London, it is likely that Cumming\u2019s paper was read by Babbage who would have realised how to visualise the fundus.\n In the manuscript room of the British Library there are 19 volumes of letters to Babbage and drafts from him totalling over 10 000 letters. I have looked for clues about Babbage\u2019s defective eyesight and reference to an instrument for looking into the eye. In all the biographies and Babbage\u2019s own semi-autobiography,  Passages from a Life of a Philosopher,   9  there is not one mention of either. Babbage scholars are unaware that Babbage had an eye defect.\n Why did Babbage show his instrument to Thomas Wharton Jones and not Cumming if he knew him, or indeed the Pr\u00e9vosts?\n Thomas Wharton Jones studied in Edinburgh but left after being unwittingly implicated in the Burke and Hare body snatching scandal. He moved to Glasgow and joined William Mackenzie whom he provided with sectional anatomical drawings of the eye for his classic treatise.\n Mackenzie knew Babbage had an eye defect and it is possible that he recommended him to see his prot\u00e9g\u00e9 Wharton Jones, now an outstanding oculist in London, who Edward Jenner had called one of the greatest Englishmen who ever lived.\n Wharton Jones, in 1847, confessed to having tried the instrument and rejected it as of little value and we have to rely on him for a description of Babbage\u2019s ophthalmoscope.   10  The model consisted of a piece of plain mirror, with the silvering scraped off at two or three small spots in the centre, held within a tube at an angle so that rays of light falling on it through an opening in the side were reflected into the patient\u2019s eye. The observer looked through the clear spots of the mirror from the other end.\n Wharton Jones was a poor choice to review the instrument: he was still sceptical of the value of an ophthalmoscope 3 years after it was in common use, deeming the light dangerous to the retina, and he was a myope. Critically, what Babbage missed in his design, which Helmholtz realised, was the need for a concave lens between the observer\u2019s eye and the back of the mirror to correct the convergent rays from the patient\u2019s retina. Although Babbage used a plano mirror with an aperture instead of parallel glass slides as employed by Helmholtz, the optics were essentially the same. The rays reflected from the subject\u2019s eye will, depending on the refraction of the eye and the patient\u2019s accommodation, be convergent. By placing a concave lens in front of the observer\u2019s eye, the rays can be given divergence so that the observer, if accommodating, can bring them to a focus. The observer would have had to contend with an area of illumination of approximately 5 degrees, exacerbating an already difficult procedure. With his myopia, Wharton Jones probably saw only a small, weak red reflex, so he rejected the instrument as unworkable. Babbage did not pursue his invention.\n In 1827, when he published his  Specimen of Logarithmic Tables it was printed on coloured paper.   11  He experimented with no less than 151 different coloured papers before deciding on an ochreous yellow tint, claiming that the human eye could tolerate lengthy readings of these tables better with this.\n In 1859, the  Ophthalmic Hospital Reports and Journal of the Royal London Ophthalmic Hospital was printed on yellow paper with the editor J F Streatfield giving generous space to Babbage\u2019s rules of typographical perspicuity.   12\n Up to the time that Babbage was constructing his ophthalmoscope in 1847 he was battling the government for funds for the development of his analytical machine. George Airy, the Astronomer Royal, questioned the need for mechanisation over conventional manual calculation and referred to Babbage\u2019s machine as \u201cthis thing is a humbug.\u201d\n By 1847 Babbage had become substantially a master of mechanical calculation and was concentrating on the design of his Difference Engine No 2, which was under construction.\n The unfortunate Babbage\u2019s brilliant concept was vindicated 100 years after his death when his Difference Engine was painstakingly built at the Science Museum in London from his drawings, left by his son Henry. It worked perfectly!   13  This most beautiful machine calculates to 30 decimal points and prints out the results.\n Babbage was a Victorian polymath but his personal life was one of unrelieved sadness. He had eight children: only three survived. In 1827 his father, his wife, and two children died. His beloved daughter Georgiana died in 1834; he never recovered from this.\n From a very early age Babbage was inventing, solving riddles, and experimenting. He nearly drowned in childhood trying out foot paddles with connecting hinges hoping that, with their pumping action, he could walk on water. His signalling lights, the occulting telegraph, were copied by the Russians and used at Sebastopol. He devised methods of using colour filters in the theatre with advice from Michael Faraday.\n In the 1840s and 1850s Babbage was lionised by society in London and was a sociable person, holding soir\u00e9es of 200\u2013300 people at his home in Dorset Street.\n For amusement, he became a master lock picker and broke the code of the \u201cunbreakable\u201d 300 year old Vigen\u00e8re Cipher in just 2 weeks at the beginning of the Crimean War.\n Among the letters in the British Library are ones from Charles Dickens to whom Ada, Countess of Lovelace, was greatly attracted. Early American computer software was named Ada after her. There is a letter from Mendelsohn declining a soir\u00e9e because of headache brought on by 6 hours of rehearsing. There are many exchanges with Brunel from whom Babbage\u2019s advice was sought on the Great Western Railway.\n His contacts with the men of science and medicine of the day were many: Sir William Wollaston, Sir Michael Faraday, Sir John Herschel, Charles Wheatstone, Augustin Fresnel, and the Reverend William Whewell, who coined the word astigmatism and introduced the word \u201cscientist.\u201d Correspondence with men of medicine included Richard Owen and Sir Joseph Lister, inquiring about the use of polarising nicol prisms for his work on antisepsis.\n There are letters from William Fox Talbot the father of modern photography in 1839 and Antoine Claudet the great portraitist using the Daguerre process. His closest friend, John Herschel, discovered the Prussian blue cyanotype the first method of photocopying; Alfred Smee unknowingly provided him with the potassium ferricyanide essential for this process.\n There is a fascinating letter in 1824   14  by Sir David Brewster, inventor among other things of the kaleidoscope, and discovered the polarisation of light, which reads \u201cI am busy at present with the examination of the lenses of fishes but I am unable to get those of the carp and tench. It has occurred to me that they may be available in London\u201d......\u201cthe immersion of the lens for a few minutes in very hot water will allow them to be wrapt up with safety in a piece of paper.\u201d He thanked Babbage for \u201cthe very curious and interesting compilation in optics from which I have no doubt we shall derive much light upon the early history of the science.\u201d This is  Scriptores Optici    15  which, edited by Babbage, consists of papers by Huygens, Descartes, Halley, Barrow, and others. Brewster was interested in an instrument for looking in the eye and Babbage\u2019s frequent correspondence with him might also provide a clue for Babbage\u2019s construction.\n Babbage sought recognition for his public services but he had made enemies of too many powerful people with his obstinacy and intransigence and his ambitions were beyond what the government was prepared to offer. Most of his contemporaries had received knighthoods. No less than a peerage would have satisfied him\u2014instead he died alone aged 79 unfulfilled, bitter, in poor health, and tormented even on his deathbed by the sound of Italian organ grinders, whom he\u2019d described as a public nuisance.\n His curiosity in scientific invention remained late in life. He said he would gladly have given up the remainder of his life if he could be allowed to live 3 days, 500 years hence assisted by a scientific Cicerone who could explain to him the discoveries made since his death.\n Charles Babbage was buried in Kensal Green Cemetery, London in 1871, the funeral attracting just one carriage. At his suggestion his brain had been removed and given to the Royal College of Surgeons for research.\n But for the addition of a 4 or 5 dioptre concave lens in his instrument for looking into the eye, Babbage would probably be renowned today as the harbinger of the modern era of ophthalmology.\n 1.    Barnett A. The ophthalmic inventions of Charles Babbage.  The Refractionist 1940; May:141\u20133.  [ Google Scholar]\n  3.    Mackenzie W.  A practical treatise on the diseases of the eye. London: Longman, Rees, Orme, Brown, Green &amp; Longman, 1835; 20:855.  [ Google Scholar]\n 4.    Pr\u00e9vost P. Doublement d\u2019un objet par un oeil unique.  Annales de Chimie et de Physique 1832; 51:210.  [ Google Scholar]\n 5.    Pr\u00e9vost AP.  Essai sur la th\u00e9orie de la vision binoculaire. Geneve: Fend. Ramboz, 1843.\n 6.    Pr\u00e9vost JL.  De la deviation conjugu\u00e9e des yeux et de la rotation de la tete dans certains cas d\u2019h\u00e9m\u00e9pl\u00e9gie. Paris: Victor Masson et Fils, 1868.\n 7.    Pr\u00e9vost P.  Dictionary of scientific biography 1970\u20131976. Charles Coulston Gillespie, ed. New York: Charles Scribner.\n 8.    Cumming W. On a luminous appearance of the human eye.  Trans Med Chir Soc 1846; 29:283.  [ PMC free article] [ PubMed]  [ Google Scholar]\n 9.    Babbage C.  Passages from the life of a philosopher. London: Longman, Green, Longman, Robert &amp; Green, 1864.\n 10.    Wharton Jones T.  Br Foreign Med Chir Rev 1854; XIV (October):425\u201332.  [ Google Scholar]\n 11.    Babbage C. Specimen of logarithmic tables. An account.  Ed Jour of Science (Brewster\u2019s) 1832; VI:144.  [ Google Scholar]\n 12.    Streatfield JF. On coloured paper.  Ophthalmic Hospital Reports and Journal of the Royal London Ophthalmic Hospital 1859; IX October.  [ Google Scholar]\n 13.    Swade D.  The cogwheel brain. Charles Babbage and the quest to build the first computer. London: Little Brown, 2000.\n  15.    Babbage C.  Scriptores optici: or a collection of facts relating to optics. London: R Wilks, 1823.", "posttime": "2020-10-26 21:50:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5df4\u8d1d\u5947,babbage", "title": "\u201c\u4e0d\u5e78\u7684\u5df4\u8d1d\u5947\u201d(2004)", "title_en": "Babbage the unfortunate (2004)", "transed": 1, "url": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1772188/", "via": "", "real_tags": ["\u5df4\u8d1d\u5947", "babbage"]}, {"category": "", "categoryclass": "", "imagename": "e19ec63d2f8b8a80ab6e6c5864a4a9ac.jpeg", "infoid": 1031218, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u62a5\u9053\u53ea\u5bf9\u201c\u5546\u4e1a\u5185\u5e55\u201d\u7684\u8ba2\u9605\u8005\u5f00\u653e\u3002\u6210\u4e3a\u4e00\u540d\u5185\u5e55\u4eba\u58eb\uff0c\u73b0\u5728\u5c31\u5f00\u59cb\u9605\u8bfb\u5427\u3002\n\u6211\u4eec\u4e0a\u4e00\u6b21\u770b\u5230\u8c37\u6b4c\u8054\u5408\u521b\u59cb\u4eba\u62c9\u91cc\u00b7\u4f69\u5947(Larry Page)\u548c\u8c22\u5c14\u76d6\u00b7\u5e03\u6797(Sergey Brin)\u4e00\u8d77\u5411\u542c\u4f17\u53d1\u8868\u8bb2\u8bdd\u662f\u57282016\u5e74\u5927\u9009\u540e\u4e0d\u4e45\u7684\u4e00\u5bb6\u5168\u4f53\u5458\u5de5\u7684\u516c\u53f8\u91cc\u3002\n\u5728\u4e24\u5e74\u540e\u6cc4\u9732\u7684\u4f1a\u8bae\u5f55\u97f3\u4e2d\uff0c\u4e24\u4eba\u54c0\u53f9\u7279\u6717\u666e\u603b\u7edf\u7684\u80dc\u5229\uff0c\u5e76\u56de\u7b54\u4e86\u5fe7\u5fc3\u5fe1\u5fe1\u7684\u8c37\u6b4c\u4eba\u63d0\u51fa\u7684\u95ee\u9898\u3002\u623f\u95f4\u91cc\u7b3c\u7f69\u7740\u4e00\u79cd\u9634\u90c1\u7684\u6c14\u6c1b\uff0c\u4f46\u5e03\u6797\u548c\u4f69\u5947\u4ecd\u7136\u8bbe\u6cd5\u8868\u73b0\u51fa\u4e86\u4e00\u4e9b\u5178\u578b\u7684\u5446\u677f\u4f5c\u98ce\u3002\n\u90a3\u65f6\uff0c\u4e24\u4eba\u5df2\u7ecf\u628a\u8c37\u6b4c\u7684\u65e5\u5e38\u7410\u4e8b\u7559\u7ed9\u4e86\u9996\u5e2d\u6267\u884c\u5b98\u6851\u8fbe\u5c14\u00b7\u76ae\u67e5\u4f0a\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u91cc\uff0c\u4ed6\u4eec\u5f00\u59cb\u4e86\u6bcd\u516c\u53f8Alphabet\u65d7\u4e0b\u7684Moonshot&34\uff1b\u9879\u76ee\u7684\u5de5\u4f5c--\u7136\u540e\u4e5f\u628a\u5de5\u4f5c\u79fb\u4ea4\u7ed9\u4e86\u6bcd\u516c\u53f8Alphabet\u3002\n\u4f46\u522b\u88ab\u611a\u5f04\u4e86\uff1a\u4f69\u5947\u548c\u5e03\u6797\u4eca\u5929\u4ecd\u7136\u662f\u5b57\u6bcd\u8868\u7684\u771f\u6b63\u6743\u529b\u4e2d\u5fc3\u3002\u8fd9\u8981\u5f52\u529f\u4e8e\u4ed6\u4eec\u7684B\u7c7b\u80a1\u7968\uff0c\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u80a1\u7968\uff0c\u7ed9\u4e86\u4ed6\u4eec\u989d\u5916\u7684\u6295\u7968\u6743\u3002\u7531\u4e8e\u4ed6\u4eec\u603b\u5171\u6709\u8d85\u8fc750%\u7684\u9009\u7968\uff0c\u8d23\u4efb\u4ecd\u7136\u843d\u5728\u521b\u59cb\u4eba\u8eab\u4e0a\u3002\n\u6839\u636e\u8c37\u6b4c\u6700\u8fd1\u63d0\u4ea4\u7ed9\u7f8e\u56fd\u8bc1\u5238\u4ea4\u6613\u59d4\u5458\u4f1a(SEC)\u7684\u6587\u4ef6\uff0c\u5c31\u8fde\u524d\u9996\u5e2d\u6267\u884c\u5b98\u57c3\u91cc\u514b\u00b7\u65bd\u5bc6\u7279(Eric Schmidt)\u4e5f\u4ecd\u7136\u62e5\u6709\u603b\u6295\u7968\u6743\u76845.2%\u3002\u65bd\u5bc6\u7279\u672c\u5468\u58f0\u79f0\u81ea\u5df1\u662f\u4e0d\u53d7\u7ea6\u675f\u7684\uff0c\u56e0\u4e3a\u4ed6\u8ba4\u4e3a\u53f8\u6cd5\u90e8\u5bf9\u8c37\u6b4c\u7684\u8bc9\u8bbc\u662f\u6709\u8bef\u5bfc\u6027\u7684\u3002\n\u4f46\u5b83\u7a81\u663e\u4e86\u4e00\u4e2a\u76f8\u5173\u7684\u89c2\u70b9\uff1a\u771f\u6b63\u63a7\u5236\u8c37\u6b4c\u7684\u4eba\u5df2\u7ecf\u4e0d\u5728\u4eba\u4eec\u7684\u89c6\u7ebf\u4e4b\u5185\u3002\u76f8\u53cd\uff0c\u5728\u8be5\u516c\u53f8\u4e0e\u534e\u76db\u987f\u5f00\u6218\u4e4b\u9645\uff0c\u53ea\u6709\u8bf4\u8bdd\u6e29\u548c\u7684\u6851\u8fbe\u5c14\u00b7\u76ae\u67e5\u4f0a(Sundar Pichai)\u624d\u662f\u5e26\u5934\u51b2\u950b\u7684\u4eba\u3002\n\u52a1\u5b9e\u7684\u9996\u5e2d\u6267\u884c\u5b98\u53ef\u80fd\u662f\u8fd9\u6837\u505a\u7684\u5b8c\u7f8e\u4eba\u9009\uff0c\u4f46\u6beb\u65e0\u7591\u95ee\uff0c\u4ed6\u7ee7\u627f\u4e86\u4e00\u53ea\u72e1\u733e\u7684\u624b\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u5e03\u6797\u548c\u4f69\u5947\u5b9e\u9645\u4e0a\u5df2\u7ecf\u4ece\u4eba\u4eec\u7684\u89c6\u7ebf\u4e2d\u6d88\u5931\u4e86\uff0c\u5c31\u5728\u4ed6\u4eec\u7684\u516c\u53f8\u51c6\u5907\u8fce\u63a5\u4e00\u573a\u957f\u8fbe\u6570\u5e74\u7684\u53cd\u5784\u65ad\u6218\u4e4b\u9645\u3002\u4ed6\u4eec\u5c06\u76ee\u524d\u4e0eAlphabet\u7684\u5173\u7cfb\u63cf\u8ff0\u4e3a\u81ea\u8c6a\u7684\u7236\u6bcd\u4e4b\u4e00\u3002\n\u7814\u7a76\u8fd9\u4e24\u4f4d\u8054\u5408\u521b\u59cb\u4eba\u7684\u7ecf\u6d4e\u5b66\u5bb6\u3001\u54c8\u4f5b\u5546\u5b66\u9662(Harvard Business School)\u6559\u6388\u8c22\u6069\u00b7\u683c\u6797\u65af\u5766(Shane Greenstein)\u8868\u793a\uff0c\u4ed6\u4eec\u80af\u5b9a\u9884\u89c1\u5230\u4e86\u8fd9\u4e00\u5929\u7684\u5230\u6765\u3002\n\u4f17\u6240\u5468\u77e5\uff0c\u53f8\u6cd5\u90e8\u5df2\u7ecf\u8fdb\u884c\u4e86\u4e00\u5e74\u591a\u7684\u8c03\u67e5\uff0c\u4f46\u76d1\u7ba1\u673a\u6784\u66f4\u5927\u7684\u53cd\u5784\u65ad\u60c5\u7eea\u915d\u917f\u7684\u65f6\u95f4\u8981\u957f\u5f97\u591a\u30022013\u5e74\uff0c\u8c37\u6b4c\u5df2\u7ecf\u63a5\u53d7\u4e86\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u5bf9\u641c\u7d22\u504f\u89c1\u7684\u8c03\u67e5\uff0c\u4f46\u8be5\u6848\u5728\u6ca1\u6709\u91c7\u53d6\u884c\u52a8\u7684\u60c5\u51b5\u4e0b\u7ed3\u6848\u3002\n\u7f8e\u56fd\u53f8\u6cd5\u90e8(Justice Department)\u672c\u5468\u63d0\u8d77\u7684\u8bc9\u8bbc\uff0c\u72ed\u9698\u5730\u805a\u7126\u4e8e\u8c37\u6b4c(Google)\u4e3a\u6210\u4e3a\u641c\u7d22\u9886\u5148\u8005\u800c\u91c7\u53d6\u7684\u4e3e\u63aa\uff0c\u7279\u522b\u662f\u5b83\u4e0e\u82f9\u679c(Apple)\u7b7e\u8ba2\u7684\u4fdd\u6301iPhone\u4e8b\u5b9e\u4e0a\u7684\u641c\u7d22\u5f15\u64ce\u5730\u4f4d\u7684\u5408\u540c\u3002\n\u8fd9\u4e3a\u672a\u6765\u53ef\u80fd\u957f\u8fbe\u6570\u5e74\u7684\u6cd5\u5f8b\u6597\u4e89\u94fa\u5e73\u4e86\u9053\u8def\uff0c\u53ef\u80fd\u8fd8\u4f1a\u6709\u5176\u4ed6\u6848\u4ef6\u63a5\u8e35\u800c\u81f3\u3002\n\u683c\u6797\u65af\u5766\u8bf4\uff0c\u53ea\u8981\u516c\u53f8\u7f3a\u4e4f\u5e02\u573a\u529b\u91cf\uff0c\u5e74\u8f7b\u65f6\u5728\u529f\u80fd\u4e0a\u5bf9\u516c\u53f8\u6709\u7528\u7684\u4e1c\u897f\u662f\u76f8\u5f53\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u6392\u4ed6\u6027\u5408\u540c\uff0c\u4e00\u65e6\u516c\u53f8\u5de9\u56fa\u4e86\u5e02\u573a\u529b\u91cf\u5e76\u957f\u671f\u5904\u4e8e\u8fd9\u79cd\u5730\u4f4d\uff0c\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898\u3002\n\u4f46\u521b\u59cb\u4eba\u4eec\u7559\u7ed9\u76ae\u67e5\u4f0a\u7684\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u4ee4\u4eba\u5934\u75bc\u7684\u53cd\u5784\u65ad\u95ee\u9898\uff0c\u76ae\u67e5\u4f0a\u6b63\u5728\u5e26\u9886\u4e00\u5bb6\u516c\u53f8\u6e21\u8fc7\u4e00\u573a\u53ef\u80fd\u6210\u4e3a\u4e2d\u5e74\u5371\u673a\u7684\u5371\u673a\u3002\u4ed6\u7ee7\u627f\u4e86\u4e00\u5bb6\u62e5\u6709\u66f4\u5927\u3001\u66f4\u76f4\u8a00\u4e0d\u8bb3\u5458\u5de5\u57fa\u7840\u7684\u516c\u53f8\uff0c\u4e0d\u65ad\u589e\u52a0\u7684\u5ba1\u67e5\u6307\u63a7\uff0c\u4ee5\u53ca\u4e00\u957f\u4e32\u8017\u8d44\u5de8\u5927\u7684\u6fc0\u60c5\u9879\u76ee\u3002\n\u76ae\u67e5\u4f0a\u8fd8\u88ab\u7559\u4e0b\u6765\u5904\u7406\u4e00\u8d77\u80a1\u4e1c\u8bc9\u8bbc\uff0c\u6307\u63a7\u8463\u4e8b\u4f1a\u5bf9\u8c37\u6b4c\u9ad8\u7ba1\u7684\u6027\u884c\u4e3a\u4e0d\u5f53\u5904\u7406\u4e0d\u5f53\u3002\n\u636e\u62a5\u9053\uff0c\u5728\u4f69\u5947\u7684\u76d1\u7763\u4e0b\uff0c\u8be5\u516c\u53f8\u5411\u5b89\u5353\u524d\u8001\u677f\u5b89\u8fea\u00b7\u9c81\u5bbe\u652f\u4ed8\u4e869000\u4e07\u7f8e\u5143\u7684\u79bb\u804c\u65b9\u6848\uff0c\u5c3d\u7ba1\u53d1\u73b0\u9488\u5bf9\u4ed6\u7684\u6027\u884c\u4e3a\u4e0d\u5f53\u6307\u63a7\u662f\u53ef\u4fe1\u7684\u3002\u4e0a\u4e2a\u6708\u8fbe\u6210\u4e86\u548c\u89e3\u3002\n\u521b\u59cb\u4eba\u4ecd\u7136\u62e5\u6709\u7ecf\u6d4e\u5229\u76ca\uff0c\u53ef\u80fd\u4f1a\u88ab\u62d6\u5165\u8fd9\u573a\u6597\u4e89\uff0c\u4e0d\u7ba1\u4f60\u559c\u6b22\u4e0e\u5426\u3002\n\u76ae\u67e5\u4f0a\u4ecd\u7136\u5b9a\u671f\u4e0e\u4f69\u5947\u548c\u5e03\u6797\u8fdb\u884c\u54a8\u8be2\uff0c\u4f46\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u8fd9\u4e24\u4f4d\u521b\u59cb\u4eba\u5728\u5373\u5c06\u5230\u6765\u7684\u4e89\u6597\u4e2d\u4f1a\u6709\u591a\u5927\u7684\u53c2\u4e0e\u3002\n\u8fd9\u5f53\u7136\u662f\u4e00\u573a\u53cc\u65b9\u90fd\u5e0c\u671b\u907f\u514d\u7684\u6218\u6597\uff0c\u5c24\u5176\u662f\u4f69\u5947\u30022018\u5e74\uff0c\u5f53\u4f69\u5947\u548c\u76ae\u67e5\u4f0a\u90fd\u6ca1\u6709\u51fa\u73b0\u5728\u56fd\u4f1a\u5173\u4e8e\u5e72\u9884\u9009\u4e3e\u7684\u542c\u8bc1\u4f1a\u4e0a\u65f6\uff0c\u53c2\u8bae\u5458\u4eec\u7559\u4e0b\u4e86\u4e00\u4e2a\u7a7a\u6905\u5b50\uff0c\u8bd5\u56fe\u8ba9\u516c\u53f8\u8499\u7f9e\u3002\u4ece\u90a3\u4ee5\u540e\uff0c\u76ae\u67e5\u4f0a\u88ab\u8ba4\u4e3a\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u5408\u4f5c\u7684\u3002\n\u8bb8\u591a\u540c\u4e8b\u5c06\u76ae\u67e5\u4f0a\u63cf\u8ff0\u4e3a\u4e00\u4f4d\u6bd4\u4f69\u5947\u66f4\u6709\u5916\u4ea4\u624b\u8155\u7684\u9886\u5bfc\u4eba\uff0c\u4ed6\u88ab\u4efb\u547d\u4e3a\u8c37\u6b4c\u548cAlphabet\u7684\u6700\u9ad8\u9886\u5bfc\u4eba\uff0c\u90e8\u5206\u539f\u56e0\u53ef\u80fd\u662f\u4f69\u5947\u4e5f\u77e5\u9053\u8fd9\u4e00\u70b9\u3002\n\u4e00\u4f4d\u66fe\u4e0e\u521b\u59cb\u4eba\u5171\u4e8b\u7684\u524d\u9ad8\u7ba1\u8868\u793a\uff0c\u62c9\u91cc\u662f\u90a3\u79cd\u4ece\u4e0d\u60f3\u53bb\u53c2\u52a0\u6d3b\u52a8\u7684\u4eba\uff0c\u5728\u6d3b\u52a8\u4e2d\uff0c\u4ed6\u5fc5\u987b\u4e0e\u653f\u5ba2\u6216\u9996\u5e2d\u6267\u884c\u5b98\u4ea4\u8c08\u3002\n\u5728\u672c\u5468\u4e0e\u8bb0\u8005\u7684\u901a\u8bdd\u4e2d\uff0c\u7f8e\u56fd\u53f8\u6cd5\u90e8\u4e00\u540d\u5b98\u5458\u62d2\u7edd\u900f\u9732\u662f\u5426\u8054\u7cfb\u4e86\u62c9\u91cc\u00b7\u4f69\u5947\u4f5c\u4e3a\u8c03\u67e5\u7684\u4e00\u90e8\u5206\u3002\u8c37\u6b4c\u53d1\u8a00\u4eba\u62d2\u7edd\u8fdb\u4e00\u6b65\u7f6e\u8bc4\u3002\n\u4f46\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u4ed6\u53ef\u80fd\u522b\u65e0\u9009\u62e9\u3002\u653f\u5e9c\u7684\u53d1\u73b0\u8fc7\u7a0b\u53ef\u80fd\u9700\u8981\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\uff0c\u5c06\u8981\u6c42\u8c37\u6b4c\u63d0\u4f9b\u6587\u4ef6\u3002\u5b83\u8fd8\u53ef\u80fd\u7f62\u514d\u67d0\u4e9b\u516c\u53f8\u9ad8\u7ba1\u3002\n\u5f88\u96be\u76f8\u4fe1\u8c22\u5c14\u76d6\u00b7\u5e03\u6797(Sergey Brin)\u6216\u62c9\u91cc\u00b7\u4f69\u5947(Larry Page)\u4e0d\u638c\u63e1\u53ef\u80fd\u5bfc\u81f4\u76f8\u5173\u8bc1\u636e\u5728\u8fd9\u91cc\u88ab\u91c7\u7eb3\u7684\u4fe1\u606f\uff0c\u524d\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u5ead\u5ba1\u5f8b\u5e08\u3001\u5361\u5fb7\u74e6\u62c9\u5fb7(Cadwalader)\u53cd\u5784\u65ad\u5c0f\u7ec4\u5408\u4f19\u4eba\u4e54\u5c14\u00b7\u7c73\u7279\u5c3c\u514b(Joel Mitnick)\u8868\u793a\u3002\n\u5982\u679c\u4ed6\u4eec\u4e0d\u628a\u8054\u5408\u521b\u59cb\u4eba\u8bf7\u6765\u4f5c\u8bc1\uff0c\u6211\u4f1a\u5f88\u60ca\u8bb6\u3002\u6211\u77e5\u9053\u4ed6\u4eec\u6700\u8fd1\u51e0\u5e74\u4e0d\u90a3\u4e48\u6d3b\u8dc3\uff0c\u4f46\u4ed6\u4eec\u80af\u5b9a\u6709\u5173\u4e8e\u8c37\u6b4c\u6218\u7565\u6f14\u53d8\u7684\u76f8\u5173\u8bc1\u8bcd\uff0c\u4ee5\u53ca\u4ed6\u4eec\u76ee\u524d\u5408\u540c\u5173\u7cfb\u7684\u8d77\u6e90\u3002\n\u4e8b\u60c5\u53ef\u80fd\u4e0d\u4f1a\u53d1\u5c55\u5230\u90a3\u4e00\u6b65\u3002\u53cc\u65b9\u53ef\u80fd\u8fbe\u6210\u548c\u89e3\uff0c\u4f46\u4e13\u5bb6\u8868\u793a\uff0c\u4efb\u4f55\u548c\u89e3\u90fd\u9700\u8981\u4ece\u6839\u672c\u4e0a\u89e3\u51b3\u8bc9\u8bbc\u7684\u6838\u5fc3\u5173\u5207\u3002\n\u8fd9\u662f\u76ae\u67e5\u4f0a\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\u8981\u8003\u8651\u7684\u53e6\u4e00\u4ef6\u4e8b\uff0c\u4e5f\u662f\u4ed6\u957f\u957f\u7684\u95ee\u9898\u6e05\u5355\u4e0a\u8981\u89e3\u51b3\u7684\u53e6\u4e00\u4ef6\u4e8b\u3002\n\u70b9\u51fb\u201c\u6ce8\u518c\u201d\uff0c\u5373\u8868\u793a\u60a8\u540c\u610f\u63a5\u6536\u6765\u81eaBusiness Insider\u7684\u8425\u9500\u7535\u5b50\u90ae\u4ef6\u4ee5\u53ca\u5176\u4ed6\u5408\u4f5c\u4f19\u4f34\u4f18\u60e0\uff0c\u5e76\u63a5\u53d7\u6211\u4eec\u7684\u670d\u52a1\u6761\u6b3e\u548c\u9690\u79c1\u653f\u7b56\u3002", "note_en": "This story is available exclusively to Business Insider subscribers.  Become an Insider and start reading now.\n  The last time we saw Google&#39;s cofounders Larry Page and Sergey Brin address an audience together was in a company all-hands held just after the 2016 election.\n In a recording of the meeting,  which leaked two years later, the duo bemoaned President Trump&#39;s win and addressed questions from concerned Googlers. A somber atmosphere hung over the room, but Brin and Page still managed to display some of their typical goofiness.\n By that point, the pair had already left the daily grind of Google to CEO Sundar Pichai, and they were off spending the next few years working on &#34;moonshot&#34; projects under parent company Alphabet \u2013 before handing that over, too.\n But don&#39;t be fooled: Page and Brin are still the true power center of Alphabet today. That&#39;s thanks to their Class B shares, a special stock that gives them extra voting rights. With more than 50% of the total votes between them, the buck still stops with the founders.\n Even former CEO Eric Schmidt,  who this week claimed he was &#34;unfettered&#34; when opining that the Justice Department&#39;s lawsuit against Google was misguided, still owns 5.2% of the total voting power, according to the company&#39;s most recent SEC filings.\n  But it highlights a relevant point: The people who truly control Google are no longer in view. Instead, it is the soft-spoken Sundar Pichai who is left to lead the charge as the company goes to war with Washington.\n The pragmatic CEO may be the perfect person to do so, but there&#39;s no doubt that he inherited a tricky hand.\n   Meanwhile Brin and Page, who  described their current relationship to Alphabet as one of &#34;proud parents,&#34;\u00a0 have effectively vanished from view just as their company braces itself for a years-long antitrust battle.\n &#34;They certainly saw this coming,&#34; said Shane Greenstein, an economist and Harvard Business School professor who studied the cofounders.\n It was public knowledge that the Justice Department had been working on an investigation for over a year, but the larger antitrust sentiment by regulators has been brewing for much longer. Google had already been subjected to an investigation by the FTC into search bias in 2013, but the case was closed without action.\n The Justice Department case, filed this week, focuses narrowly on the moves Google has made to become a leader in search, particularly its contract with Apple to remain the iPhone&#39;s de facto search engine.\n It paves the way for potentially years of legal fighting ahead, and possibly other cases to come.\n &#34;Things that are functionally useful for a firm when they&#39;re young can be quite acceptable so long as the firm lacks market power,&#34; said Greenstein. &#34;Those same things, like exclusive contracts, can be problematic once the firm has solidified market power and has been in that position for a long time.&#34;\n But it&#39;s not just an antitrust headache that the founders have left for Pichai, who is steering a company through what could become a midlife crisis. He&#39;s inherited a company with a larger and more vocal employee base, increasing accusations of censorship, and  a long list of expensive passion projects.\n Pichai was also left to handle a shareholder lawsuit alleging that the board had mishandled sexual misconduct by Google executives.\n   Under Page&#39;s watch, the company  reportedly paid former Android boss Andy Rubin a $90 million exit package, despite finding sexual misconduct claims against him to be credible. A settlement  was reached last month.\n The founders still have a financial interest and may be dragged into the fight, like it or not\n Pichai still regularly consults with Page and Brin, but it is unclear how involved the founders will be in the coming fight.\n It&#39;s certainly a battle that both would prefer to avoid, Page in particular. When neither Page nor Pichai showed at a congressional hearing on election interference in 2018,  senators left an empty chair by way of trying to shame the company. Since then, Pichai has seen to be largely cooperative.\n Many colleagues have described Pichai as a much more diplomatic leader than Page, and his appointment to the top of Google and Alphabet was perhaps, in part, because Page knew this, too.\n &#34;Larry was the type who never wanted to go to an event where he had to talk to a politician or CEO,&#34; said one former executive who worked with the founders.\n During a call with reporters this week, a DOJ official refused to say whether Larry Page had been contacted as part of the investigation. A Google spokesperson refused to comment further.\n But in the months ahead, he might not have a choice. The government&#39;s discovery process, which could take many months, will request that Google provide documentation. It may also depose certain company executives.\n &#34;It&#39;s hard to believe that Sergey Brin or Larry Page don&#39;t possess information that could lead to admissible relevant evidence here,&#34; said Joel Mitnick, a former FTC trial lawyer and partner in Cadwalader&#39;s Antitrust Group.\n   &#34;I would be surprised if they did not bring in the cofounders for deposition. I know that they&#39;ve not been as active in recent years, but they certainly may have relevant testimony about the evolution of Google&#39;s strategy, and the genesis of the current contractual relationships that they have.&#34;\n It may not come to that. The two parties could reach a settlement, but experts say that any settlement will need to fundamentally address the core concerns of the lawsuit.\n It&#39;s another thing for Pichai to mull over in the coming months, and another thing on his long list of problems to fix.\n  By clicking \u2018Sign up\u2019, you agree to receive marketing emails from Business Insider as well as other partner offers and accept our  Terms of Service and  Privacy Policy.", "posttime": "2020-10-26 21:50:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65f6\u673a,page,\u53ef\u80fd", "title": "\u62c9\u91cc\u00b7\u4f69\u5947\u548c\u8c22\u5c14\u76d6\u00b7\u5e03\u6797\u65af\u4ece\u516c\u4f17\u89c6\u91ce\u4e2d\u6d88\u5931\u7684\u65f6\u673a\u6070\u5230\u597d\u5904", "title_en": "Larry Page and Sergey Brins perfectly timed disappearance from public view", "transed": 1, "url": "https://www.businessinsider.com/larry-page-sergey-brin-smartest-move-a-perfectly-timed-disappearance-2020-10", "via": "", "real_tags": ["\u65f6\u673a", "page", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "683f76973c3deabfab3d9be9c2e0a460.png", "infoid": 1031217, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u4f60\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0cDocker\u53ef\u80fd\u4f1a\u8ba9\u4f60\u611f\u5230\u56f0\u60d1\u3002\u5373\u4f7f\u60a8\u770b\u4e86\u51e0\u4e2a\u6559\u7a0b\uff0c\u5b83\u7684\u672f\u8bed\u4ecd\u7136\u53ef\u80fd\u4e0d\u6e05\u695a\u3002\u672c\u6587\u7684\u76ee\u6807\u8bfb\u8005\u662f\u90a3\u4e9b\u5b89\u88c5\u8fc7Docker\u5e76\u6709\u8fc7\u4e00\u4e9b\u7ecf\u9a8c\u7684\u4eba\uff0c\u4f46\u53ef\u80fd\u9700\u8981\u6f84\u6e05\u4e00\u4e0b\u3002\u6211\u4eec\u5c06\u5236\u4f5cDocker\u7684\u6240\u6709\u4e09\u4e2a\u6838\u5fc3\u90e8\u5206\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e9b\u6709\u7528\u7684\u5176\u4ed6\u547d\u4ee4\u3002\u5b83\u5c06\u6db5\u76d6\u5f88\u591a\u5185\u5bb9\uff0c\u4e00\u5b9a\u8981\u70b9\u51fb\u94fe\u63a5\u3002\n\u6211\u4eec\u5c06\u9010\u6b65\u4ecb\u7ecd\u8fd9\u5f20\u56fe\u7684\u6bcf\u4e00\u4e2a\u90e8\u5206\uff0c\u4f46\u5c06\u524d\u9762\u7684\u4e09\u4e2a\u4e3b\u8981\u9636\u6bb5\u770b\u4f5c\u8def\u7ebf\u56fe\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002\u7b80\u800c\u8a00\u4e4b\uff0cDockerfile\u7528\u4e8e\u6784\u5efa\u955c\u50cf\u3002\u56fe\u50cf\u7528\u4e8e\u521b\u5efa\u5bb9\u5668\u3002\u7136\u540e\uff0c\u60a8\u5fc5\u987b\u542f\u52a8\u5e76\u8fde\u63a5\u5230\u5bb9\u5668\u4e0a\u3002Run\u547d\u4ee4\u5141\u8bb8\u60a8\u4e00\u6b21\u7ec4\u5408\u6240\u6709\u521b\u5efa\u3001\u542f\u52a8\u548c\u9644\u52a0\u547d\u4ee4\u3002\n\u4e3a\u4e86\u8ba9\u6211\u4eec\u7684\u9879\u76ee\u6709\u6240\u4f5c\u4e3a\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2aserver.js\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u53d1\u9001\u4e00\u4e2a\u7b80\u5355\u7684\u6587\u672c\u54cd\u5e94\u3002\u8fd9\u662f\u672c\u6559\u7a0b\u4e2d\u552f\u4e00\u7684\u8282\u70b9\u4ee3\u7801\u3002\u60a8\u4e0d\u9700\u8981\u77e5\u9053Node\u3002\nConst http=Required(&#34\uff1bhttp&#34\uff1b)\uff1bconst app=(req\uff0cres)=&gt\uff1b{console.log(&#34\uff1bping\uff01&#34\uff1b)\uff1bres.end(&#34\uff1bHello here.&#34\uff1b\uff0c&#34\uff1butf-8&#34\uff1b)\uff1b}http.createServer(App).listen(3000)\uff1bconsole.log(&#34\uff1bserver started&#34\uff1b)\uff1b\nDockerfile\u53ea\u662f\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542bDocker\u5c06\u89e3\u91ca\u4ee5\u751f\u6210\u56fe\u50cf\u7684\u6307\u4ee4\u3002\u5b83\u5927\u90e8\u5206\u65f6\u95f4\u76f8\u5bf9\u8f83\u77ed\uff0c\u4e3b\u8981\u7531\u76f8\u4e92\u6784\u5efa\u7684\u5355\u72ec\u7ebf\u8def\u7ec4\u6210\u3002\u5b83\u5e94\u8be5\u79f0\u4e3aDockerfile(\u533a\u5206\u5927\u5c0f\u5199)\uff0c\u5e76\u4e14\u6ca1\u6709\u6587\u4ef6\u6269\u5c55\u540d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a\n\u8fd9\u4e0d\u662f\u5173\u4e8e\u5982\u4f55\u7f16\u5199Dockerfile\u7684\u6559\u7a0b\uff0c\u4f46\u662f\u8ba9\u6211\u4eec\u82b1\u4e00\u70b9\u65f6\u95f4\u6765\u8ba8\u8bba\u4e00\u4e0b\u3002\u6211\u4eec\u7684Dockerfile\u6240\u505a\u7684\u662f\u4eceDockerHub(\u6216\u60a8\u7684\u673a\u5668)\u62c9\u4e0b\u540d\u4e3anode\uff1a12-slm\u7684\u8282\u70b9\u6620\u50cf\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4e0a\u6784\u5efa\u81ea\u5b9a\u4e49\u6620\u50cf\u3002DockerHub\u662f\u4e00\u4e2a\u5728\u7ebf\u56fe\u7247\u5e93\uff1b\u6709\u70b9\u50cfNPM\u6216Pip\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06server.js\u590d\u5236\u5230\u73af\u5883\u4e2d\uff0c\u4ee5\u4fbf\u6700\u7ec8\u7684\u5bb9\u5668\u53ef\u4ee5\u8bbf\u95ee\u5b83\u3002Dockerfile\u4e2d\u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u901a\u5e38\u662f\u5bb9\u5668\u521b\u5efa\u540e\u8981\u8fd0\u884c\u7684CMD(\u547d\u4ee4)\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u5b83\u5c06\u542f\u52a8\u6211\u4eec\u7684server.js\u3002\n\u6ce8\u610f\uff1aCMD\u6570\u7ec4\u7684\u6bcf\u4e00\u6bb5\u90fd\u8981\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\uff0c\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u5426\u5219\u5b83\u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002\n\u4eceDockerfile\u6784\u5efa\u6620\u50cf\u7684\u65b9\u6cd5\u662f\u5728\u547d\u4ee4\u884c\u4e0a\u8fd0\u884cbuild\u3002\u4ee5\u4e0b\u547d\u4ee4\u5047\u5b9a\u6211\u4eec\u4e0eserver.js\u548cDockerfile\u4f4d\u4e8e\u540c\u4e00\u76ee\u5f55\u4e2d\uff1a\n\u90a3\u4e2a\u3002\u544a\u8bc9Docker\u4ece\u5f53\u524d\u76ee\u5f55\u4e2d\u7684Dockerfile\u6784\u5efa\u3002\u4f5c\u4e3a\u989d\u5916\u5956\u52b1\uff0c\u6211\u4eec\u4e3a\u6211\u4eec\u7684\u56fe\u50cf\u6dfb\u52a0\u4e86my-node-img\u6807\u8bb0\u3002\u8fd9\u5c06\u5e2e\u52a9\u6211\u4eec\u6307\u5b9a\u6b63\u5728\u4f7f\u7528\u7684\u56fe\u50cf\uff0c\u800c\u4e0d\u5fc5\u4f7f\u7528ID\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u4e8e\u56fe\u50cf\u6807\u7b7e\u7684\u6307\u5357\u3002\u60a8\u5e94\u8be5\u77e5\u9053\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u56fe\u50cf\u548c\u5bb9\u5668ID\u4ee3\u66ff\u6807\u8bb0\u548c\u540d\u79f0\uff0c\u4f46\u662f\u5355\u8bcd\u66f4\u5bb9\u6613\u8bb0\u4f4f\u3002\u5efa\u9020\u53ef\u80fd\u9700\u8981\u4e00\u5206\u949f\uff0c\u4f46\u4e00\u65e6\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u4f1a\u6709\u81ea\u5df1\u7684\u5f62\u8c61\uff01\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u5b83\uff1a\n\u5982\u679cDockerfile\u662f\u7528\u4e8e\u521b\u5efa\u955c\u50cf\u7684\u4e00\u7ec4\u6307\u4ee4\uff0c\u90a3\u4e48\u5c06\u955c\u50cf\u770b\u4f5c\u662f\u7528\u4e8e\u521b\u5efa\u5bb9\u5668\u7684\u6a21\u677f\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002\u6620\u50cf\u8d1f\u8d23\u8bbe\u7f6e\u5bb9\u5668\u5185\u5c06\u5b58\u5728\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u73af\u5883\u3002\u9700\u8981\u4e86\u89e3\u7684\u91cd\u8981\u4e00\u70b9\u662f\uff0c\u56fe\u50cf\u662f\u53ea\u8bfb\u7684\u3002\u60a8\u4e0d\u9700\u8981\u5bf9\u56fe\u50cf\u8fdb\u884c\u7f16\u8f91\uff0c\u800c\u662f\u5bf9Dockerfile\u8fdb\u884c\u7f16\u8f91\uff0c\u7136\u540e\u6784\u5efa\u65b0\u7684\u56fe\u50cf\u3002\n\u4f7fDocker\u5982\u6b64\u5f3a\u5927\u7684\u529f\u80fd\u4e4b\u4e00\u662f\u56fe\u50cf\u53ef\u4ee5\u5206\u5c42\u3002\u5728\u6bcf\u4e2aDockerfile\u4e2d\uff0c\u60a8\u5c06\u4ece\u4e00\u4e2a\u57fa\u7840\u6620\u50cf\u5f00\u59cb\u3002\u800c\u90a3\u4e9b\u57fa\u7840\u56fe\u50cf\u53ef\u80fd\u662f\u4ece\u5176\u4ed6\u56fe\u50cf\u6784\u5efa\u800c\u6765\u7684\uff0c\u5b83\u4e00\u76f4\u90fd\u662f\u56fe\u50cf\u3002\u8fd9\u79cd\u5206\u5c42\u6548\u679c\u6709\u52a9\u4e8e\u5b9e\u73b0\u7528\u4e8eCI/CD\u76ee\u7684\u7684\u7f13\u5b58\u7b49\u529f\u80fd\u3002\u4f46\u4e0d\u7ba1\u600e\u6837\uff0c\u9664\u4e86\u521b\u5efa\u5bb9\u5668\u4e4b\u5916\uff0c\u56fe\u50cf\u4e5f\u6ca1\u4ec0\u4e48\u597d\u5904\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u8fd9\u4e48\u505a\u5427\uff01\n\u6700\u540e\uff0c\u6211\u4eec\u8981\u8bf4\u5230\u597d\u4e1c\u897f\u4e86\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u60a8\u9700\u8981\u505a\u7684\u5c31\u662f\u521b\u5efa\u5bb9\u5668\uff1a\n\u4f46\u662f\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u670d\u52a1\u5668\u793a\u4f8b\u6765\u8bf4\uff0c\u8fd9\u662f\u65e0\u7528\u7684\u3002\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e00\u4e9b\u6807\u5fd7\uff1a\n--name\u5141\u8bb8\u6211\u4eec\u6307\u5b9a\u81ea\u5df1\u7684\u540d\u79f0\u3002\u5982\u679c\u6211\u4eec\u4e0d\u8fd9\u6837\u505a\uff0cDocker\u4f1a\u81ea\u52a8\u4e3a\u5bb9\u5668\u751f\u6210\u4e00\u4e2a\u540d\u79f0\uff0c\u4f46\u5b83\u4eec\u53c8\u957f\u53c8\u53ef\u6015\u3002Init\u8868\u793a\u6211\u4eec\u4f7f\u7528\u7684\u662fDocker\u5185\u7f6e\u7684Tini\u5305\u3002\u5b83\u5904\u7406ctrl-C\uff0c\u4f7f\u6211\u4eec\u4e0d\u4f1a\u88ab\u56f0\u5728\u5bb9\u5668\u4e2d\u3002\u63a5\u4e0b\u6765\u662f-p\uff0c\u5b83\u5c06\u4e3b\u673a\u7684\u7aef\u53e33000\u8fde\u63a5\u5230Docker\u5bb9\u5668\u7684\u7aef\u53e33000\u3002\u6ca1\u6709\u5b83\uff0c\u6211\u4eec\u5c06\u65e0\u6cd5\u8fde\u63a5\u5230\u6211\u4eec\u7684\u670d\u52a1\u5668\u3002\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f\u5c06\u521b\u5efa\u5bb9\u5668\u7684\u5b9e\u9645\u56fe\u50cf\u6807\u8bb0\u3002\n\u5bb9\u5668\u662f\u5b9e\u9645\u8fd0\u884c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4e1c\u897f\u3002\u53ef\u4ee5\u5c06\u5bb9\u5668\u60f3\u8c61\u6210\u4e00\u4e2a\u5b64\u7acb\u7684Linux\u76d2\u5b50\u3002\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u91cd\u91cf\u66f4\u8f7b\u7684\u865a\u62df\u673a\u3002\u62e5\u6709\u96c6\u88c5\u7bb1\u7684\u610f\u4e49\u5728\u4e8e\u6807\u51c6\u5316\u3002\u5e94\u7528\u7a0b\u5e8f\u53ea\u9700\u5173\u5fc3\u5b83\u5728\u5176\u4e2d\u8fd0\u884c\u7684\u5bb9\u5668\u3002\u4e0d\u4f1a\u518d\u8bf4\u4e86\uff0c\u201c\u4f46\u5b83\u80fd\u5728\u6211\u7684\u673a\u5668\u4e0a\u5de5\u4f5c\uff01\u201d\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c\uff0c\u5219\u65e0\u8bba\u5bb9\u5668\u672c\u8eab\u9a7b\u7559\u5728\u4f55\u5904\uff0c\u5b83\u90fd\u5c06\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002\u8fd9\u4f7f\u5f97\u672c\u5730\u5f00\u53d1\u548c\u751f\u4ea7\u90e8\u7f72\u90fd\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5bb9\u6613\u3002\nCreate\u6240\u505a\u7684\u53ea\u662f\u521b\u5efa\u5bb9\u5668\uff0c\u800c\u4e0d\u662f\u542f\u52a8\u5b83\u3002\u60a8\u4ecd\u7136\u53ef\u4ee5\u770b\u5230\u5b83\u4e0e\u575e\u7ad9PS\u548c\u4e00\u4e9b\u989d\u5916\u7684\u8fc7\u6ee4\u5668\u4e00\u8d77\u5b58\u5728\uff1a\n\u4f46\u662f\uff0c\u5982\u679c\u60a8\u8f6c\u5230localhost\uff1a3000\uff0c\u5219\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\u3002\u6211\u4eec\u7684\u96c6\u88c5\u7bb1\u4ecd\u7136\u4e0d\u6d3b\u52a8\uff0c\u5b83\u53ea\u662f\u2026\u3002\u5b58\u5728\uff1b\u5176\u72b6\u6001\u4ec5\u4e3a\u201c\u5df2\u521b\u5efa\u201d\u3002\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u5b83\uff1a\n\u73b0\u5728\uff0c\u5f53\u60a8\u8f6c\u5230localhost\uff1a3000\u65f6\uff0c\u5b83\u4f1a\u54cd\u5e94\uff01\u56e0\u4e3a\u6211\u4eec\u7684\u5bb9\u5668\u6b63\u5f0f\u201c\u8fd0\u884c\u201d\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u7684docker ps\u6765\u67e5\u770b\u5b83\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ea\u663e\u793a\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u3002\n\u6211\u4eec\u5982\u4f55\u67e5\u770b\u5bb9\u5668\u7684\u8f93\u51fa\u548c\u65e5\u5fd7\uff1f\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u547d\u4ee4\uff0c\u4f46\u5728\u952e\u5165\u5b83\u4e4b\u524d\u8bf7\u7a0d\u5019\uff1a\n\u8bf7\u6ce8\u610f\uff1a\u5982\u679c\u60a8\u8fd0\u884cATTACH\uff0c\u60a8\u7684\u7ec8\u7aef\u5c06\u5728\u663e\u793a\u5bb9\u5668\u65e5\u5fd7\u65f6\u505c\u6ede\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5982\u679c\u60a8\u8fde\u63a5\u7136\u540e\u6309ctrl-C\u7ec4\u5408\u952e\u9000\u51fa\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f1a\u5728\u9000\u51fa\u65f6\u505c\u6b62\u5bb9\u5668\u3002\u6216\u8005\u66f4\u7cdf\u7684\u662f\uff0c\u5b83\u5c06\u5ffd\u7565ctrl-C\u5e76\u6355\u83b7\u60a8\u7684\u7ec8\u7aef\u3002\u5982\u679c\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u60a8\u8eab\u4e0a\uff0c\u60a8\u5c06\u4e0d\u5f97\u4e0d\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\u5e76\u505c\u6b62\u5bb9\u5668(\u7a0d\u540e\u5c06\u8be6\u7ec6\u4ecb\u7ecd)\u3002\u8fd9\u5c31\u662f\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5e94\u8be5\u5904\u7406SIGTERM\u6216\u4f7f\u7528TINI\u5305\u7684\u539f\u56e0\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u793a\u4f8b\u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u67e5\u770b\u8f93\u51fa\u7684\u66f4\u597d\u65b9\u6cd5\u662fDocker logs\u547d\u4ee4\uff1a\n\u8fd9\u5c06\u663e\u793a\u4ece\u60a8\u7684\u5bb9\u5668\u6253\u5370\u7684\u65e5\u5fd7\u3002\u6309Ctrl-C\u7ec4\u5408\u952e\u53ef\u4ee5\u5728\u4e0d\u4e2d\u65ad\u5bb9\u5668\u7684\u60c5\u51b5\u4e0b\u79bb\u5f00\u8fd9\u91cc\u3002\u5982\u679c\u60a8\u53ea\u60f3\u9759\u6001\u6253\u5370\u65e5\u5fd7\uff0c\u90a3\u4e48\u53ef\u4ee5\u7701\u7565-f\u6807\u5fd7\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u8fdb\u5165\u5bb9\u5668\u6765\u6d4f\u89c8\u6587\u4ef6\u7cfb\u7edf\uff0c\u5219\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\nEXEC\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u4e0a\u6267\u884c\u4efb\u4f55\u547d\u4ee4\u3002\u5982\u679c\u5b83\u662f\u4ea4\u4e92\u5f0f\u7684\uff0c\u6bd4\u5982\u6253\u5f00bash shell\uff0c\u5219\u5fc5\u987b\u5305\u62ec-it\u6807\u5fd7\u3002\u53e6\u5916\uff0c\u8bf7\u6ce8\u610f\u67d0\u4e9b\u5bb9\u5668\u53ef\u80fd\u6ca1\u6709\u5b89\u88c5bash\uff0c\u56e0\u6b64\u5982\u679c\u4e0d\u8d77\u4f5c\u7528\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5c1d\u8bd5\u4f7f\u7528sh\u6216ash\u3002\n\u6b63\u5982\u60a8\u5728\u4fe1\u606f\u56fe\u4e2d\u6240\u8bb0\u5f97\u7684\u90a3\u6837\uff0cRun\u662f\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4e00\u6b21\u5b8c\u6210\u521b\u5efa\u3001\u542f\u52a8\u548c\u9644\u52a0\u64cd\u4f5c\uff1a\n\u4f46\u662f\uff0c\u6b63\u5982\u6211\u4eec\u6240\u8bf4\u7684\uff0c\u8fde\u63a5\u4f1a\u5360\u7528\u7ec8\u7aef\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u60a8\u60f3\u8981\u7684\u3002\u8fd0\u884c\u5e26\u6709-d\u6807\u5fd7\u7684\u547d\u4ee4(\u5206\u79bb\u6a21\u5f0f)\uff0c\u4ee5\u4fbf\u5bb9\u5668\u8fdb\u5165\u540e\u53f0\uff1a\n\u9664\u4e86\u65b0\u7684--rm\u6807\u5fd7\u4e4b\u5916\uff0c\u6240\u6709\u9009\u9879\u4ecd\u5728\u6267\u884c\u4e0ecreate\u76f8\u540c\u7684\u64cd\u4f5c\u3002\u8fd9\u53ea\u662f\u5728\u6211\u4eec\u505c\u6b62\u5bb9\u5668\u65f6\u5c06\u5bb9\u5668\u4ece\u673a\u5668\u4e2d\u5220\u9664\u3002\u8fd9\u5c06\u5141\u8bb8\u60a8\u8fd0\u884c\u76f8\u540c\u7684\u547d\u4ee4\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u540d\u79f0\u7a7a\u95f4\u95ee\u9898\uff1b\u5b83\u4e3b\u8981\u7528\u4e8e\u7ec3\u4e60\u3002\n\u5f53\u7136\uff0c\u60a8\u4f1a\u60f3\u8981\u505c\u4e0b\u6765\u79fb\u8d70\u65e7\u7684/\u5361\u4f4f\u7684\u5bb9\u5668\uff0c\u5e78\u8fd0\u7684\u662f\u8fd9\u5f88\u7b80\u5355\uff1a\n\u5b50shell\u4f7f\u7528-q(\u5b89\u9759)\u6807\u5fd7\u4ec5\u8fd4\u56de\u5bb9\u5668ID\uff0c\u7136\u540e\u5c06\u5176\u63d0\u4f9b\u7ed9\u505c\u6b62\u547d\u4ee4\u3002\nRun\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u6620\u50cf\u4f4d\u4e8e\u4e3b\u673a\u4e0a\u3002\u5982\u679cDocker\u5728\u672c\u5730\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u955c\u50cf\uff0c\u4f1a\u5c1d\u8bd5\u5728DockerHub\u4e0a\u627e\u5230\u3002\u8fd9\u5728\u4e0eRun\u7684\u53e6\u4e00\u4e2a\u7279\u6027\u914d\u5408\u4f7f\u7528\u65f6\u975e\u5e38\u6709\u7528\uff1a\u5b83\u53ef\u4ee5\u5728\u65b0\u521b\u5efa\u7684\u5bb9\u5668\u4e0a\u6267\u884c\u547d\u4ee4\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u8282\u70b9\u6620\u50cf\uff0c\u7136\u540e\u5728bash\u4e2d\u542f\u52a8\u5b83\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684Node repl\uff1a\n\u8981\u8fd0\u884c\u7684\u547d\u4ee4\u7d27\u8ddf\u5728\u56fe\u50cf\u6807\u8bb0\u4e4b\u540e\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5982\u679c\u547d\u4ee4\u662f\u4ea4\u4e92\u5f0f\u7684\uff0c\u5219\u53ea\u9700\u8981-it\u6807\u5fd7\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u53ea\u60f3\u67e5\u770bLinux\u7248\u672c\uff0c\u5219\u4e0d\u9700\u8981\u4efb\u4f55\u6807\u5fd7\uff1a\n\u6211\u4eec\u6709\u4e00\u4e2a\u96c6\u88c5\u7bb1\uff0c\u662f\u7684\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u96c6\u88c5\u7bb1\u5462\uff1f\u8fd9\u662fDocker\u7684\u53e6\u4e00\u4e2a\u5f3a\u5927\u7279\u6027\uff1a\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u5bb9\u5668\u8054\u7f51\u5728\u4e00\u8d77\u3002\u4f46\u662f\uff0c\u4e00\u65e6\u60a8\u67092\u4e2a\u6216\u66f4\u591a\u7684\u5bb9\u5668\u9700\u8981\u7ba1\u7406\uff0c\u6211\u4e0d\u5efa\u8bae\u60a8\u5c1d\u8bd5\u4ece\u547d\u4ee4\u884c\u63a7\u5236\u5b83\u4eec\u3002\u4e0d\uff0c\u60a8\u9700\u8981\u5f00\u59cb\u4f7f\u7528\u7684\u662f\u5bb9\u5668\u7f16\u6392\u7cfb\u7edf\uff0c\u901a\u5e38\u662f\u7528\u4e8e\u672c\u5730\u5f00\u53d1\u7684Docker\u548c\u7528\u4e8e\u5b9e\u9645\u751f\u4ea7\u7684Kubernetes\u3002\u6211\u63a8\u8350\u770b\u8fd9\u4e2a\u89c6\u9891\u6765\u5b66\u4e60\u4f5c\u66f2\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u8fd9\u4e2a\u7cfb\u5217\u53ef\u4ee5\u8ba9\u4f60\u66f4\u6df1\u5165\u5730\u4e86\u89e3Kubernetes\u3002\n#\u6784\u5efa\u60a8\u7684\u955c\u50cfdocker build-t my-node-img\u3002#show Specific image docker image ls my-node-img#\u8981\u67e5\u770b\u673a\u5668docker\u6620\u50cfls\u4e0a\u7684\u6240\u6709\u56fe\u50cf\uff0c\u8bf7\u4f7f\u7528\u5fae\u5305\u3001\u540d\u79f0\u548c\u7aef\u53e3docker\u521b\u5efa\u5bb9\u5668--init--name my-app-p 3000\uff1a3000 my-node-img#show new create\u5bb9\u5668docker ps-a--filter&#34\uff1bname=my-app&#34\uff1b#\u542f\u52a8\u60a8\u7684\u96c6\u88c5\u7bb1\u7801\u5934\u542f\u52a8my-app#\u8fde\u63a5\u5230\u5bb9\u5668(\u4e0d\u63a8\u8350)docker\u8fde\u63a5my-app#\u67e5\u770b\u5bb9\u5668\u65e5\u5fd7(\u63a8\u8350)\u7801\u5934\u65e5\u5fd7-f my-app#\u8bbf\u95ee\u5bb9\u5668&#39\uff1bS system docker exec-it my-app bash#\u4f7f\u7528\u8fd0\u884c\u5feb\u6377\u65b9\u5f0fdocker run--name my-app-p 3000\uff1a3000-d--init--rm my-node-img#\u505c\u6b62\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668docker stop my-app#\u5220\u9664\u975e\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668docker rm my-app#\u67e5\u770b\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668docker ps#\u505c\u6b62\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668docker stop$(docker ps-q)#\u68c0\u67e5\u5bb9\u5668docker\u8fd0\u884c\u8282\u70b9\u7684Linux\u7248\u672c\uff1a12-slm cat/etc/Issue", "note_en": "D ocker can be confusing when you\u2019re getting started. Even after you watch a few tutorials, its terminology can still be unclear. This article is intended for people who have installed Docker and played around a bit, but could use some clarification. We\u2019re going to make all three core pieces of Docker and give some helpful other commands. It\u2019s going to cover a lot,  be sure to click the links.\n   We\u2019re going to step through eve ry piece of this graphic, but it\u2019s helpful to see the three main stages upfront as a roadmap. In short,  Dockerfiles are used to  build  images. Images are used to  create  containers. You then have to  start and  attach to the  containers. The  run  command allows you to combine the  create ,  start , and  attach  commands all at once.\n   In order for our project to do something, we\u2019re going to make a  server.js file that sends a simple text response.  This is the only Node code in the tutorial.   You do not need to know Node.\n const  http = require(&#34; http&#34;);  const  app = (req,  res) =&gt; {   console.log( &#34;ping!&#34;);   res.end(&#34; Hello there.&#34;, &#34; utf-8&#34;); }  http.createServer(app).listen(3000);  console.log(&#34; server started&#34;);\n  A Dockerfile is simply a text file with instructions that Docker will interpret to make an image. It is relatively short most of the time and primarily consists of individual lines that build on one another. It is expected to be called  Dockerfile (case sensitive) and does not have a file extension. Here is a simple example:\n  This isn\u2019t a tutorial on  how to write Dockerfiles, but let\u2019s talk about this for a second. What our Dockerfile is doing is pulling down the Node image  called node:12-slim  FROM  DockerHub (or your machine) so we can build our custom image on top of it. DockerHub is an online repository of images; kind of like NPM or Pip. Then we\u2019re  COPYing our  server.js into the environment so our eventual container will have access to it. The last thing in a Dockerfile is usually a  CMD (command) for the container to run once it\u2019s made. In our case it\u2019s going to start our  server.js.\n NOTE: It is crucial that each piece the   CMD  array is surrounded by   double quotes or else it won\u2019t work properly .\n  The way to build an image from a Dockerfile is to run  build on the command line. The following command assumes we\u2019re in the same directory as our  server.js and  Dockerfile:\n  The  . tells Docker to build from the  Dockerfile in the current directory. As a bonus, we gave our image a tag of  my-node-img. This will help us specify which image we are using without having to use an id. Here\u2019s a  guide on image tags.  You should know that you can use image and container IDs instead of tags and names, but words are easier to remember. Building can take a minute, but once done, we will have our image! See it by running:\n   If a Dockerfile is a set of instructions used to create an image, it\u2019s helpful to think that an image is just a template used to create a container. An image is responsible for setting up the application and environment that will exist inside the container. The important thing to understand is that  images are read-only. You do not make edits to an image, you make edits to the Dockerfile and then build a  new image.\n One of the features that makes Docker so powerful is that images can be layered. In every Dockerfile, you\u2019ll be pulling down a base image to start from. And those base images are probably built from others, it\u2019s images all the way down. This layering effect helps with things like  caching for CI/CD purposes. But anyway, images aren\u2019t good for much besides creating containers, so let\u2019s do that!\n  Finally, we\u2019re getting to the good stuff. This is technically all you need to do to  create a container:\n  However, for our server example, that\u2019s kind of useless. We\u2019ll need to add some flags:\n  The  --name lets us assign our own name. Docker will autogenerate a name for the container if we don\u2019t, but they\u2019re long and  terrible. The  --init means we\u2019re using the  Tini package that comes built in with Docker. It handles  ctrl-C and keeps us from getting stuck in our container. Next up is  -p, which connects our host machine\u2019s port 3000 to the Docker container\u2019s port 3000. Without this, we wouldn\u2019t be able to connect to our server. The last argument is the actual  image tag that will create our container.\n  The container is what actually  runs our app. Think of the container like an isolated Linux box. It\u2019s essentially a  lighter weight virtual machine. The  point of having a container is standardization. An application only has to care about the container it\u2019s run in. No more, \u201cBut it works on my machine!\u201d If an app runs in a container, it will work the same way  no matter where the container itself is hosted. This makes both local development and production deployments much,  much easier.\n  All  create did was  create the container, it didn\u2019t  start it. You can still see that it  exists with   docker ps and some extra filters:\n  But, if you go to localhost:3000, nothing happens. Our container still isn\u2019t active,  it just\u2026exists; its  status is merely \u201ccreated.\u201d  start it by running:\n  Now when you go to localhost:3000, it responds! Since our container is officially \u201crunning\u201d we can also see it with a regular  docker ps, which by default only shows running containers.\n  How do we see our container\u2019s outputs and logs? Well, there\u2019s  technically a command you  can run, but hang on before typing it:\n  Be warned: if you run   attach, your terminal is going to get stuck displaying the container logs. Worse, if you attach and then  ctrl-C to get out, it will actually  stop the container on exit. Or worse, it will just ignore the ctrl-C and trap your terminal. If that ever happens to you, you\u2019ll have to open a new terminal and stop the container (more on that later). That\u2019s why in your applications you should handle the SIGTERM or use the Tini package like we have in our example. A  better way to see output is the Docker  logs command:\n  That will show you the logs as they print from your container.  ctrl-C to get out of this with no interruptions to your container. If you just want the logs print out statically, omit the  -f flag.\n  If you want to go into the container to explore the file system, you\u2019d want to run this:\n  exec  executes any command on a  running container. If it\u2019s going to be an interactive one, like opening a  bash shell, you must  include the   -it  flags. Also, heads up that some containers may not have  bash installed, so you might need to try  sh or  ash if it doesn\u2019t work.\n  As you remember with the infographic,  run is a shortcut that takes care of  create,  start, and  attach all at once:\n  However, like we talked about, attaching takes up the terminal, which is probably not what you want. Run the command with the  -d flag (detached mode) so the container goes in the background:\n  All the options are still doing the same thing they were doing with  create, with the exception of the new  --rm flag. This simply removes our container from our machine when we stop the container. That will allow you to run the same command without name space issues; it\u2019s mainly for practicing.\n  Of course, you will want to stop and remove old/stuck containers, and that\u2019s luckily straightforward:\n    The  subshell is using the  -q (quiet) flag to only return the container ids, which are then fed into the  stop command.\n  run doesn\u2019t actually need the image to be on the host machine. If Docker can\u2019t find the specified image locally, it will try to find it on DockerHub. This is useful when paired with another feature of  run: it can execute a command on the newly created container. For example, you could spin up a Node image and then start it in bash instead of the default Node repl:\n  The command to run just goes after the image tag. Remember, you only need the  -it flags if the command is interactive. If you just wanted to see the Linux version for example, no flags are necessary:\n   We\u2019ve had one container yes, but what about a second container? That\u2019s another powerful feature of Docker: you can easily network containers together. But once you have 2 or more containers to manage, I wouldn\u2019t recommended that you try to control them from the command line. No, what you\u2019ll want to start using is a  container orchestration system, usually it\u2019ll be Docker Compose for local development and Kubernetes for actual production. I recommend watching this video to pick up  the basics of Compose and this  series to take a deeper dive with Kubernetes.\n    # Build your image   docker  build  -t my-node-img . # Show specific image   docker  image  ls my-node-img # to see all images on your machine  docker  image  ls # Create a container with the tiny package, a name, and port  docker  create  --init --name my-app  -p 3000:3000 my-node-img # Show newly created container  docker  ps  -a  --filter &#34;name=my-app&#34; # Start your container  docker  start my-app # Attach to container (not recommended)   docker  attach my-app # See containers logs (recommended)  docker  logs  -f my-app # access container&#39;s system   docker  exec  -it my-app bash # using the run shortcut   docker  run  --name my-app  -p 3000:3000  -d  --init  --rm my-node-img # Stop a running container  docker  stop my-app # Remove a non-running container  docker  rm my-app # see all running containers   docker  ps # stop all running containers  docker  stop $( docker  ps  -q) # Check version of linux for container  docker  run node:12-slim  cat /etc/issue", "posttime": "2020-10-26 21:49:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "docker,images,\u5bb9\u5668", "title": "\u5982\u4f55\u4f7f\u7528Docker\u56fe\u50cf\u3001\u5bb9\u5668\u548cDockerfile", "title_en": "How to Use Docker Images, Containers, and Dockerfiles", "transed": 1, "url": "https://medium.com/@mostlyfocusedmike/how-to-use-docker-images-containers-and-dockerfiles-39e4e8fc181a", "via": "", "real_tags": ["docker", "images", "\u5bb9\u5668"]}, {"category": "", "categoryclass": "", "imagename": "c9ec90dcde14834f0586db1457745446.png", "infoid": 1031216, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u6211\u4e00\u76f4\u5728\u751f\u4ea7\u4e2d\u8fd0\u884c\u4e00\u4e2a\u7531ES\u6a21\u5757\u63d0\u4f9b\u652f\u6301\u7684\u5355\u9875Web\u5e94\u7528\u7a0b\u5e8f\u3002\n\u8fd9\u662f\u4e00\u6b3ejavascript\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u5b83\u4e0d\u4f7f\u7528\u5df4\u522b\u5854\u3001webpack\u3001Rollup\u6216\u4efb\u4f55\u5176\u4ed6\u5de5\u5177\u6765\u8fdb\u884c\u8f6c\u6362\u6216\u6346\u7ed1\u3002\u6211\u5728\u5f00\u53d1\u4e2d\u7f16\u5199\u7684\u6587\u4ef6\u4e0e\u5728\u751f\u4ea7\u4e2d\u63d0\u4f9b\u7ed9\u6700\u7ec8\u7528\u6237\u7684\u6587\u4ef6\u76f8\u540c\u3002\n\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u9488\u5bf9\u526f\u9879\u76ee\u2026\u7684\u3002\u4e00\u4e2a\u5728\u7ebf\u97f3\u4e50\u76d2\u6b4c\u66f2\u5236\u4f5c\u5de5\u5177\u3002\u5b83\u4e0d\u662f\u4e00\u4e2a\u5e9e\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u4e5f\u4e0d\u7b97\u5c0f--\u76ee\u524d\u5927\u7ea6\u670960\u4e2aJavaScript\u6a21\u5757\uff0c\u8fd9\u4e9b\u6a21\u5757\u6df7\u5408\u4e86\u7ec4\u4ef6\u3001\u5b9e\u7528\u7a0b\u5e8f\u548c\u7b2c\u4e09\u65b9\u5e93\u3002\u4ee3\u7801\u5e93\u770b\u8d77\u6765\u5f88\u50cf\u4e00\u4e2aReactJS\u9879\u76ee\uff0c\u4f46\u662f\u5b83\u6ca1\u6709\u4f7f\u7528Reaction\u3002\u5b83\u4f7f\u7528\u666e\u901a\u7684JavaScript\u66ff\u4ee3\u65b9\u6848\uff0c\u5c06\u62bd\u8c61(\u5982JSX)\u66ff\u6362\u4e3a\u539f\u751fJavaScript\u7279\u6027(\u5982\u6a21\u677f\u5b57\u7b26\u4e32)\u3002\u8fd9\u4e2a\u6846\u67b6\u4e0e\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u65e0\u5173\uff0c\u4f46\u5982\u679c\u4f60\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u5728\u6211\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u5185\u5bb9\u3002\n\u5f53\u6211\u57282019\u5e748\u6708\u53d1\u5e03\u8fd9\u6b3e\u5e94\u7528\u65f6\uff0c\u4e1a\u754c\u7684\u5171\u8bc6\u662f\uff0c\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528\u975e\u6346\u7ed1\u7684ES6\u6a21\u5757\u662f\u4e00\u4e2a\u574f\u4e3b\u610f\u3002Khan Academy\u5c1d\u8bd5\u62c6\u5206\u4ed6\u4eec\u7684\u4e3b\u9875JS\uff0c\u5e76\u5f97\u51fa\u7ed3\u8bba\uff0c\u8fd9\u964d\u4f4e\u4e86\u4ed6\u4eec\u6700\u521d\u7684\u9875\u9762\u52a0\u8f7d\u901f\u5ea6\u3002\u90a3\u662f\u4e94\u5e74\u524d\u7684\u4e8b\u4e86\uff0c\u6211\u81f3\u4eca\u8fd8\u4e0d\u77e5\u9053\u6709\u8c01\u8ba4\u771f\u8003\u8651\u8df3\u8fc7\u6346\u7ed1\u5305\uff0c\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528ES6\u6a21\u5757\u3002*\u3002\n\u8fd9\u592a\u7cdf\u7cd5\u4e86\uff0c\u56e0\u4e3a\u73b0\u5728\u6d4f\u89c8\u5668\u5bf9ES\u6a21\u5757\u7684\u652f\u6301\u975e\u5e38\u597d\uff0c\u4f3c\u4e4e\u53ea\u9700\u7f16\u5199\u6d4f\u89c8\u5668\u80fd\u591f\u7406\u89e3\u7684JavaScript\u5c31\u53ef\u4ee5\u907f\u514d\u5f88\u591a\u65e0\u7a3d\u4e4b\u8c08(\u81f3\u5c11\u5bf9\u4e8e\u6709\u610f\u4e49\u7684\u9879\u76ee\u662f\u8fd9\u6837)\u3002\n\u6211\u4e00\u76f4\u5728\u5bfb\u627e\u4eba\u4eec\u8fd9\u6837\u505a\u7684\u4f8b\u5b50\uff0c\u4f46\u6211\u5f88\u96be\u627e\u5230\u4ed6\u4eec\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u8bd5\u4e00\u8bd5\uff0c\u770b\u770b\u5230\u5e95\u6709\u591a\u7cdf\u7cd5\u3002\u8fd9\u662f\u6211\u7684\u53d1\u73b0\uff1a\n\u5f00\u53d1\u7ecf\u9a8c\u3002\u6211\u539f\u4ee5\u4e3a\u5f00\u53d1\u4f53\u9a8c\u4f1a\u5f88\u68d2\uff0c\u4e8b\u5b9e\u4e5f\u7684\u786e\u5982\u6b64\u3002\u6ca1\u6709\u5b89\u88c5\u8bf4\u660e\uff0c\u6ca1\u6709\u542f\u52a8\u5ef6\u8fdf\u3002\u65e0\u9700\u67e5\u770b\u6587\u4ef6\u3001\u751f\u6210\u6e90\u6620\u5c04\u6216\u7b49\u5f85\u91cd\u65b0\u7f16\u8bd1\u3002\u53ea\u9700\u4fdd\u5b58\u6587\u4ef6\u5e76\u5237\u65b0\u5373\u53ef\u3002\u2728\u3002\n\u90e8\u7f72\u3002\u90e8\u7f72\u975e\u5e38\u7b80\u5355\u3002\u6211\u6240\u9700\u8981\u505a\u7684\u5c31\u662f\u6309\u539f\u6837\u5c06\u4ee3\u7801\u590d\u5236\u5230\u670d\u52a1\u5668\u3002\u6211\u7684\u7f51\u7edc\u4e3b\u673anetlify\u4f7f\u5f97\u5728git\u63a8\u9001\u4e0a\u5b9e\u73b0\u8fd9\u4e00\u70b9\u53d8\u5f97\u5f88\u5bb9\u6613(\u4e0d\u8fc7\uff0c\u516c\u5e73\u5730\u8bf4\uff0cnetlify\u751a\u81f3\u53ef\u4ee5\u8ba9\u6700\u590d\u6742\u7684\u8bbe\u7f6e\u4e5f\u5f88\u5bb9\u6613\u90e8\u7f72)\u3002\n\u5f00\u53d1/\u751f\u4ea7\u5947\u5076\u6821\u9a8c\u3002\u6bcf\u6b21\u6211\u53d1\u73b0\u751f\u4ea7\u7f3a\u9677\u65f6\uff0c\u6211\u90fd\u80fd\u5728\u672c\u5730\u590d\u5236\u5b83\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\uff0c\u4f46\u975e\u5e38\u65b9\u4fbf\u3002\n\u4f9d\u8d56\u9879\u4e0d\u652f\u6301ES\u6a21\u5757\u3002\u6211\u7ecf\u5e38\u53d1\u73b0\u6211\u60f3\u4f7f\u7528\u7684\u5e93\uff0c\u7ed3\u679c\u5374\u53d1\u73b0\u5b83\u4eec\u4e0d\u652f\u6301ES\u6a21\u5757\u3002\u5b83\u4eec\u901a\u5e38\u652f\u6301CommonJS\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4e0d\u80fd\u4f7f\u7528\u5b83\u4eec\u3002\u8d77\u521d\uff0c\u6211\u901a\u8fc7\u52a0\u8f7d\u4f7f\u7528\u6d4f\u89c8\u5668\u5168\u5c40\u53d8\u91cf\u7684\u5e93\u7248\u672c(\u901a\u8fc7\u811a\u672c\u6807\u8bb0\u6216\u526f\u4f5c\u7528\u5bfc\u5165)\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u8fd9\u5f88\u7ba1\u7528\uff0c\u4f46\u611f\u89c9\u5e76\u4e0d\u7406\u60f3\u3002\n\u6700\u540e\uff0c\u6211\u5f00\u59cb\u4f7f\u7528SnowPack\uff0c\u5b83\u53ef\u4ee5\u5bfc\u5165\u4e0d\u652f\u6301ES\u6a21\u5757\u7684\u4f9d\u8d56\u9879\uff0c\u5e76\u751f\u6210\u652f\u6301ES\u6a21\u5757\u7684\u4e00\u6b21\u6027\u6784\u5efa\u3002\u5b83\u5de5\u4f5c\u5f97\u975e\u5e38\u597d\uff0c\u6211\u5df2\u7ecf\u5f00\u59cb\u5728\u5176\u4ed6\u9879\u76ee\u4e2d\u4f7f\u7528\u5b83\u3002\n\u73af\u5883\u53d8\u91cf\u3002\u901a\u5e38\uff0c\u6211\u4f1a\u5728\u6784\u5efa\u65f6\u5206\u914d\u8fd9\u4e9b\u53c2\u6570\uff0c\u4f46\u5728\u6ca1\u6709\u6784\u5efa\u65f6\u5c31\u4e0d\u80fd\u4e86\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u79d1\u91cc\u00b7\u8c6a\u65af\u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u5e16\u5b50\u63cf\u8ff0\u4e86\u6240\u6709\u7684\u9009\u62e9\u3002\u6211\u6700\u7ec8\u4f7f\u7528\u4e86\u73af\u5883\u55c5\u63a2\uff0c\u8fd9\u611f\u89c9\u6709\u70b9\u5947\u602a\uff0c\u4f46\u6700\u7ec8\u5bf9\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u5e76\u4e0d\u662f\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u4e8b\u3002\nCSS\u7ec4\u7ec7\u3002\u6211\u4f7f\u7528\u4f20\u7edf\u7684CSS\uff0c\u4f7f\u7528BEM\u7ea6\u5b9a\uff0c\u8fd9\u5f88\u597d\u3002\u4e0d\u8fc7\uff0c\u6211\u4ecd\u7136\u60f3\u62c6\u5206\u6211\u7684\u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e26\u6709\u4e00\u5806@Imports\u7684main.css\u6587\u4ef6\u3002\u8fd9\u611f\u89c9\u597d\u591a\u4e86\uff0c\u4f46\u662f\u540e\u6765\u6211\u6709\u4e00\u4e2a\u963b\u585e\u8bf7\u6c42\uff0c\u5ef6\u8fdf\u4e86\u9875\u9762\u5448\u73b0\uff0c\u6240\u4ee5\u6211\u5c06@Imports\u79fb\u5230\u4e86\u5185\u8054\u6837\u5f0f\u6807\u8bb0\u4e2d\u3002\u6211\u4e0d\u786e\u5b9a\u6211\u662f\u5426\u559c\u6b22\uff0c\u6240\u4ee5\u6211\u53ef\u80fd\u4f1a\u7ee7\u7eed\u91cd\u590d\u8fd9\u4e00\u70b9\u3002\n\u7f13\u5b58\u65e0\u6548\u3002\u6211\u62c5\u5fc3\u6211\u5728\u4f7f\u7f13\u5b58\u7684CSS\u6216JavaScript\u65e0\u6548\u65f6\u4f1a\u9047\u5230\u9ebb\u70e6(\u56e0\u4e3a\u6211\u4e0d\u80fd\u4f9d\u8d56\u6346\u7ed1\u7a0b\u5e8f\u4e3a\u6211\u7684\u8d44\u4ea7\u6307\u5b9a\u7f13\u5b58\u7834\u574f\u7684\u6587\u4ef6\u540d)\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0ceTags\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848(\u7279\u522b\u662f\u56e0\u4e3a\u6211\u7684web\u4e3b\u673a\u6709\u4e00\u4e2a\u5feb\u901f\u800c\u7b80\u5355\u7684\u53ef\u9760\u5b9e\u73b0)\u3002\u6211\u542c\u8bf4\u7834\u574f\u7f13\u5b58\u7684\u6587\u4ef6\u540d\u53ef\u80fd\u6bd4eTag\u5feb\u4e00\u70b9\uff0c\u4f46\u6211\u89c9\u5f97Netlify\u7684\u5b9e\u73b0\u76f8\u5f53\u5feb\u3002\n\u6027\u80fd\u3002\u6211\u542c\u5230\u7684\u6bcf\u4e00\u4ef6\u4e8b\u90fd\u8bf4ES\u6a21\u5757\u7684\u6027\u80fd\u4f1a\u5f88\u7cdf\u7cd5\uff0c\u5373\u4f7f\u662f\u4f7f\u7528HTTP2\u3002\u6240\u4ee5\u6211\u548c\u2026\u90fd\u505a\u597d\u4e86\u51c6\u5907\u3002\u8fd9\u771f\u662f\u592a\u68d2\u4e86\u3002\u9664\u4e86\u786e\u4fdd\u6211\u7684\u521d\u59cbHTML\u6587\u4ef6\u5177\u6709\u4e00\u4e9b\u826f\u597d\u7684\u9ed8\u8ba4\u6807\u8bb0\u4e4b\u5916\uff0c\u6211\u751a\u81f3\u6ca1\u6709\u505a\u4efb\u4f55\u4f18\u5316\u3002\u6211\u6000\u7591\u6027\u80fd\u5f88\u597d\uff0c\u56e0\u4e3a\u6211\u7684\u5e94\u7528\u8fd8\u6ca1\u6709\u5927\u5230\u53ef\u4ee5\u5f00\u59cb\u9047\u5230\u4efb\u4f55\u74f6\u9888(\u8fd9\u9879\u7814\u7a76\u8bf4\uff0c\u5982\u679c\u4f60\u4f4e\u4e8e\u51e0\u767e\u4e2a\u6a21\u5757\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e00\u70b9\u4f3c\u4e4e\u5f97\u5230\u4e86\u574a\u95f4\u7684\u8bc1\u5b9e)\u3002\u8fd9\u8ba9\u6211\u610f\u8bc6\u5230\uff0c\u6211\u7684\u76f4\u89c9\u504f\u79bb\u4e86\u4e00\u6b3e\u5e94\u7528\u7a0b\u5e8f\u7684\u201c\u592a\u5927\u201d\u3002\u5728\u60a8\u9700\u8981\u4e00\u6b21\u52a0\u8f7d300-500\u4e2a\u6587\u4ef6\u4e4b\u524d\uff0c\u60a8\u53ef\u4ee5\u8d70\u5f88\u957f\u4e00\u6bb5\u8def\u3002\u81f3\u5c11\uff0c\u6211\u89c9\u5f97\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u592a\u53ef\u80fd\u8fbe\u5230\u8fd9\u4e9b\u9650\u5236\u3002\n\u6211\u6709\u70b9\u62c5\u5fc3\u6ca1\u6709\u7f29\u5c0f\u6211\u7684JavaScript\u3002\u8fd9\u4e0d\u662f\u8282\u7701\u4e86\u5927\u91cf\u5b57\u8282\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5f53\u60a8\u7684\u6587\u4ef6\u4ee5gzip(\u6216brotli\u538b\u7f29\uff0c\u5c31\u50cf\u6211\u7684\u4f8b\u5b50)\u63d0\u4f9b\u670d\u52a1\u65f6\uff0c\u5dee\u522b\u8981\u5c0f\u5f97\u591a\u3002\u901a\u8fc7\u91cd\u547d\u540d\u53d8\u91cf\u548c\u53bb\u6389\u6ce8\u91ca\uff0c\u7f29\u5c0f\u4ecd\u7136\u4f1a\u4f7f\u6211\u7684\u6587\u4ef6\u66f4\u5c0f\uff0c\u4f46\u662f\u5dee\u522b\u6bd4\u6211\u9884\u671f\u7684\u8981\u5c0f\u3002\n\u6d4f\u89c8\u5668\u652f\u6301\u3002\u56e0\u4e3a\u6211\u6ca1\u6709\u4f7f\u7528Babel\uff0c\u6240\u4ee5\u6211\u9884\u8ba1\u4f1a\u6709\u5f88\u591a\u8de8\u6d4f\u89c8\u5668\u7684\u95ee\u9898\uff0c\u4f46\u5b83\u4eec\u5f88\u5c11\u89c1\u3002**\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4e00\u65e6\u4f60\u653e\u5f03\u4e86\u5bf9IE11\u7684\u652f\u6301\uff0c\u6d4f\u89c8\u5668\u5bf9\u73b0\u4ee3JS\u7279\u6027\u7684\u652f\u6301\u5c31\u771f\u7684\u5f88\u597d\u4e86\u3002\u7bad\u5934\u51fd\u6570\u3001const/let\u3001\u6a21\u677f\u5b57\u7b26\u4e32\u3001ES6\u7c7b\u548cFETCH\u7b49\u90fd\u6709\u8d85\u8fc795%\u7684\u5168\u5c40\u652f\u6301(\u5305\u62ecIE11)\u3002\u6211\u552f\u4e00\u4e00\u6b21\u6ca1\u6709\u4f7f\u7528\u6211\u771f\u6b63\u60f3\u8981\u7684JS\u7279\u6027\u662f\u53ef\u9009\u7684\u94fe\u8fd0\u7b97\u7b26\uff0c\u8be5\u7279\u6027\u5728\u672a\u6765\u4e00\u4e24\u5e74\u5185\u53ef\u80fd\u4f1a\u670995%\u7684\u652f\u6301\u3002\u957f\u9752\u6d4f\u89c8\u5668\u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u4e1c\u897f\u3002\n\u6211\u5f88\u60ca\u559c\u3002\u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u3001\u6346\u7ed1\u7684\u3001\u5355\u9875\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u73b0\u5728\u5c31\u9700\u8981\u5904\u7406\u4e00\u4e24\u4e2a\u4e3b\u8981\u7684\u5de5\u5177\u5347\u7ea7\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u80fd\u591f\u4e13\u6ce8\u4e8e\u529f\u80fd\u3002\u539f\u751f\u7f51\u7edc\u6280\u672fFTW\uff01\n\u5982\u679c\u6211\u7684\u6a21\u5757\u6570\u91cf\u592a\u5927\uff0c\u6027\u80fd\u5f00\u59cb\u660e\u663e\u4e0b\u964d\uff0c\u6211\u5f88\u6709\u4fe1\u5fc3\u80fd\u591f\u4f7f\u7528SnowPack\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4ece\u4ed6\u4eec\u7684\u6587\u6863\u4e2d\uff1a\nSnowPack\u5c06\u6346\u7ed1\u89c6\u4e3a\u53ef\u9009\u7684\u751f\u4ea7\u4f18\u5316\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u81ea\u7531\u5730\u8df3\u8fc7\u6346\u7ed1\u7684\u989d\u5916\u590d\u6742\u6027\uff0c\u76f4\u5230\u9700\u8981\u4e3a\u6b62\u3002\u60a8\u5e94\u8be5\u80fd\u591f\u4f7f\u7528\u6346\u7ed1\u5668\uff0c\u56e0\u4e3a\u60a8\u60f3\u8fd9\u6837\u505a\uff0c\u800c\u4e0d\u662f\u56e0\u4e3a\u60a8\u9700\u8981\u8fd9\u6837\u505a\u3002\n\u4e5f\u8bb8ES\u6a21\u5757\u5e76\u4e0d\u9002\u7528\u4e8e\u6bcf\u4e2a\u9879\u76ee\uff0c\u4f46\u5b83\u4eec\u5728\u6211\u7684\u9879\u76ee\u4e2d\u5de5\u4f5c\u5f97\u5f88\u597d\u3002\u5982\u679c\u8bf4\u6709\u4ec0\u4e48\u6839\u672c\u6027\u7684\u7f3a\u9677\uff0c\u6211\u8fd8\u6ca1\u6709\u627e\u5230\u3002\n\u8001\u5b9e\u8bf4\uff0c\u73b0\u5728\u6211\u5f88\u96be\u60f3\u8c61\u4ee5\u5176\u4ed6\u65b9\u5f0f\u6784\u5efa\u4e00\u4e2a\u526f\u4e1a\u3002", "note_en": "For the last year, I\u2019ve been running a single-page web app powered by ES modules in production.\n It\u2019s a JavaScript app but it doesn\u2019t use Babel, Webpack, Rollup, or any other tooling for transpiling or bundling. The files I write in development are the same files that get served to end-users in production.\n The app is for a side-project\u2026 an  online music-box song making tool. It\u2019s not a massive app, but it\u2019s not tiny either\u2014there\u2019s currently about 60 JavaScript modules, which are a mix of components, utilities, and third-party libraries.  The codebase looks a lot like a ReactJS project, but it doesn\u2019t use React. It uses a plain JavaScript alternative that substitutes abstractions (like JSX) with native JavaScript features (like template strings). The framework isn\u2019t relevant for the purpose of this post but you can read more about it in  my earlier post, if you are curious.\n When I launched the app in August 2019, the industry consensus was that using unbundled ES6 modules in production was a bad idea. Khan Academy tried unbundling their homepage JS and concluded that  it slowed down their initial page load. That was five years ago and I still don\u2019t know of anybody who seriously considers skipping the bundler and using ES6 modules in production.*\n And that\u2019s too bad because now that  browser support for ES modules is great, it seems like we could avoid a lot of  nonsense by just  writing JavaScript that the browser understands (at least for projects where it makes sense).\n I kept looking for examples of people doing this but I struggled to find them, so I decided I\u2019d give it a try and see how bad it really was. Here\u2019s what I found:\n  Development experience. I expected the development experience to be great, and it was. There\u2019s no setup instructions, no startup delays. No need to watch files, generate source maps, or wait for things to recompile. Just save the file and refresh. \u2728\n Deployment. Deployment was straightforward. All I needed to do was copy my code to the server as-is. My web host Netlify makes it easy to do this on git push (though, to be fair, Netlify can make even the most complex setups easy to deploy).\n Dev/Prod parity. Every time I found a production bug I was able to reproduce it locally. Not a major goal, but very convenient.\n  Dependencies not supporting ES modules.I often found libraries I wanted to use, only to learn that they didn\u2019t support ES modules. They usually supported CommonJS instead, which meant I couldn\u2019t use them. At first, I was working around this by loading versions of the library that use browser globals (either via script tag, or  side-effects import). This worked, but it didn\u2019t feel ideal.\n Eventually, I started using  Snowpack, which can import dependencies that don\u2019t support ES modules and produce a one-time build that does. This worked so well that  I\u2019ve started using it on other projects.\n Environment variables. Typically, I\u2019d assign these at build-time but you can\u2019t when there\u2019s no build. Fortunately, Cory House has  a great post describing all the options. I ended up using  environment sniffing which feels a little weird, but ultimately isn\u2019t a big deal for my app.\n CSS organization. I went with traditional CSS using BEM conventions, which was fine. I still wanted to break up my files though, so I used a  main.css file with a bunch of  @imports. That felt better, but then I had a blocking request that delayed page rendering so  I moved the  @imports into an inline style tag. I\u2019m not sure if I like it, so I may keep iterating on this.\n  Cache invalidation. I was worried that I was going to have trouble invalidating cached CSS or JavaScript (since I couldn\u2019t rely on a bundler to give my assets cache-busting filenames). It turns out that  ETags are a great solution for this (especially since  my web host has a solid implementation that\u2019s quick and simple). I\u2019ve heard that cache-busting filenames can be a bit faster than Etags, but Netlify\u2019s implementation feels pretty snappy to me.\n Performance.Everything I heard said that ES module performance was going to be terrible, even with HTTP/2. So I braced myself and\u2026 it\u2019s been great. I haven\u2019t even done any optimizations beyond making sure that my initial HTML file had some good default markup. I suspect the performance is good because my app isn\u2019t big enough to start hitting any bottlenecks yet ( this research says you\u2019ll be fine if you\u2019re below a couple hundred modules, which  seems to be confirmed anecdotally). This made me realize that that my intuition was off on what was \u201ctoo big\u201d of an app. You can go a long way before you\u2019re in a place where you need to load 300-500 files, all at once. It feels unlikely that I\u2019ll reach those limits on my app, at least.\n I was a little worried about not minifying my JavaScript. Isn\u2019t that a huge number of bytes saved? It turns out that the difference is a lot smaller when your files are served gzipped (or  brotli-compressed, as in my case). Minifying would still make my files smaller by renaming variables and stripping out comments, but the difference was less than I expected.\n Browser support. Since I wasn\u2019t using Babel, I expected lots of cross-browser issues but they were rare.** It turns out that once you drop IE11 support, browser support of modern JS features is really good. Things like arrow functions, const/let, template strings, ES6 classes, and  fetch all have over 95% global support (and that\u2019s including IE11). The only time I didn\u2019t get to use a JS feature I really wanted was  the optional chaining operator, and that feature will probably have 95% support in the next year or two. Evergreen browsers are a powerful thing.\n  I\u2019ve been pleasantly surprised. If this were a typical, bundled, single-page-application, I would have needed to deal with one or two major tooling upgrades by now. Instead, I\u2019ve been able to focus on features.  Native web technologies FTW!\n If my module count gets so big that performance starts to noticeably degrade, I\u2019m pretty confident that I\u2019ll be able to use Snowpack to work through it. From  their docs:\n Snowpack treats bundling as an optional production optimization, which means you\u2019re free to skip over the extra complexity of bundling until you need it.  You should be able to use a bundler because you want to, and not because you need to.\n  Maybe ES modules aren\u2019t for every project but they\u2019ve worked pretty well for mine. If there are fundamental flaws, I haven\u2019t found them yet.\n Honestly, it\u2019s hard for me to imagine building a side-project any other way right now.", "posttime": "2020-10-26 21:49:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6a21\u5757,modules", "title": "\u751f\u4ea7\u4e2d\u7684ES\u6a21\u5757\uff1a\u6211\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u7ecf\u9a8c", "title_en": "ES modules in production: my experience so far", "transed": 1, "url": "https://www.bryanbraun.com/2020/10/23/es-modules-in-production-my-experience-so-far/", "via": "", "real_tags": ["\u6a21\u5757", "modules"]}, {"category": "", "categoryclass": "", "imagename": "01ca82ddd4f8a96f038071f73cf487a7.jpeg", "infoid": 1031214, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u4f7f\u7528\u53ef\u9009\u7684\u7b2c\u4e09\u65b9\u5206\u6790Cookie\u6765\u4e86\u89e3\u60a8\u662f\u5982\u4f55\u4f7f\u7528GitHub.com\u7684\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6784\u5efa\u66f4\u597d\u7684\u4ea7\u54c1\u3002\u60a8\u59cb\u7ec8\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u9875\u9762\u5e95\u90e8\u7684Cookie\u9996\u9009\u9879\u6765\u66f4\u65b0\u60a8\u7684\u9009\u62e9\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u9690\u79c1\u58f0\u660e\u3002\n\u6211\u4eec\u4f7f\u7528\u57fa\u672cCookie\u6765\u6267\u884c\u57fa\u672c\u7684\u7f51\u7ad9\u529f\u80fd\uff0c\u4f8b\u5982\uff0c\u5b83\u4eec\u7528\u4e8e\u8ba9\u60a8\u767b\u5f55\u3002\u4e86\u89e3\u66f4\u591a\u3002\n\u6211\u4eec\u4f7f\u7528\u5206\u6790Cookie\u6765\u4e86\u89e3\u60a8\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u7684\u7f51\u7ad9\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u5b83\u4eec\uff0c\u4f8b\u5982\uff0c\u5b83\u4eec\u7528\u4e8e\u6536\u96c6\u6709\u5173\u60a8\u8bbf\u95ee\u7684\u9875\u9762\u4ee5\u53ca\u5b8c\u6210\u4efb\u52a1\u9700\u8981\u70b9\u51fb\u591a\u5c11\u6b21\u7684\u4fe1\u606f\u3002\u4e86\u89e3\u66f4\u591a", "note_en": "We use  optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.   You can always update your selection by clicking  Cookie Preferences at the bottom of the page. For more information, see our  Privacy Statement.\n  We use essential cookies to perform essential website functions, e.g. they&#39;re used to log you in.  Learn more\n  We use analytics cookies to understand how you use our websites so we can make them better, e.g. they&#39;re used to gather information about the pages you visit and how many clicks you need to accomplish a task.  Learn more", "posttime": "2020-10-26 21:49:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bba\u6587,\u6280\u672f,oriented", "title": "\u9762\u5411\u6280\u672f\u7684PDF\u96c6\u5408(\u8bba\u6587\u3001\u89c4\u683c\u3001\u8d44\u6599\u3001\u624b\u518c\u7b49)", "title_en": "Technically-Oriented PDF Collection (Papers, Specs, Decks, Manuals, etc.)", "transed": 1, "url": "https://github.com/tpn/pdfs", "via": "", "real_tags": ["\u8bba\u6587", "\u6280\u672f", "oriented"]}, {"category": "", "categoryclass": "", "imagename": "2d5cbf33d45196e259b94b1a6c097d9d.png", "infoid": 1031213, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(2020\u5e74\u66f4\u65b0)\u65e0\u8bba\u60a8\u662fK8\u65b0\u624b\u8fd8\u662f\u8001\u624b\uff0c\u6b64\u5217\u8868\u90fd\u5c06\u662f\u60a8\u4f7f\u7528Kubernetes\u589e\u5f3a\u5f00\u53d1\u6d41\u7a0b\u6bcf\u4e2a\u9636\u6bb5\u7684\u914d\u5957\u6307\u5357\u3002", "note_en": "(Updated for 2020) Whether you\u2019re new to K8s or an old hand, this list will be your companion guide for enhancing every stage of your development pipeline with Kubernetes.", "posttime": "2020-10-26 17:31:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,kubernetes,\u8001\u624b", "title": "\u9002\u7528\u4e8e2020\u5e74\u7684\u6709\u7528Kubernetes\u5de5\u5177", "title_en": "Useful Kubernetes Tools for 2020", "transed": 1, "url": "https://caylent.com/50-useful-kubernetes-tools-for-2020", "via": "", "real_tags": ["2020", "\u8001\u624b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031212, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u6211\u7b2c\u4e00\u6b21\u5728Web\u7684\u5404\u4e2a\u89d2\u843d\u5076\u7136\u53d1\u73b0Lisp\u5021\u5bfc\u65f6\uff0c\u6211\u5df2\u7ecf\u662f\u4e00\u540d\u7ecf\u9a8c\u4e30\u5bcc\u7684\u7a0b\u5e8f\u5458\u4e86\u3002\u5728\u90a3\u4ef6\u4e8b\u4e0a\r\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u5df2\u7ecf\u9886\u4f1a\u4e86\u5728\u5f53\u65f6\u770b\u8d77\u6765\u8303\u56f4\u5f88\u5e7f\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u6211\u5f88\u81ea\u8c6a\u62e5\u6709\u5e38\u89c1\u7684\u5acc\u7591\u72af(C++\u3001Java\u3001C#\u3001\r\u7b49)\u3002\u5728\u6211\u7684\u670d\u5f79\u8bb0\u5f55\u4e0a\uff0c\u6211\u7684\u5370\u8c61\u662f\u6211\u77e5\u9053\u5173\u4e8e\u7f16\u7a0b\u8bed\u8a00\u7684\u4e00\u5207\u3002\u6211\u4e0d\u53ef\u80fd\r\u53ef\u80fd\u66f4\u5927\u9519\u7279\u9519\u4e86\u3002\n\u5f53\u6211\u770b\u5230\u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801\u65f6\uff0c\u6211\u6700\u521d\u5b66\u4e60Lisp\u7684\u5c1d\u8bd5\u5c31\u621b\u7136\u800c\u6b62\u3002\u6211\u60f3\u6211\u4e5f\u6709\u540c\u6837\u7684\u60f3\u6cd5\r\u51e0\u5343\u4e2a\u66fe\u7ecf\u7ad9\u5728\u6211\u7684\u7acb\u573a\u4e0a\u7684\u4eba\u7684\u5fc3\u601d\uff1a&#34\uff1b\u7a76\u7adf\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4eba\u60f3\u8981\u7528\u8fd9\u6837\u4e00\u79cd\u8bed\u8a00\u5462\uff1f\r\u53ef\u6015\u7684\u8bed\u6cd5\uff1f\u5982\u679c\u4e00\u95e8\u8bed\u8a00\u7684\u521b\u9020\u8005\u4e0d\u613f\u8d39\u5fc3\u7ed9\u5b83\u4e00\u4e2a\u4ee4\u4eba\u6109\u5feb\u7684\u8bed\u6cd5\uff0c\u6211\u5c31\u4e0d\u4f1a\u8d39\u5fc3\u53bb\u5b66\u4e60\u5b83\u3002\u6bd5\u7adf\uff0c\u6211\u51e0\u4e4e\u88ab\u81ed\u540d\u662d\u8457\u7684Lisp\u62ec\u53f7\u5f04\u778e\u4e86\u773c\u775b\uff01\n\u5728\u6211\u6062\u590d\u89c6\u529b\u7684\u90a3\u4e00\u523b\uff0c\u6211\u5c31\u628a\u6211\u7684\u632b\u8d25\u611f\u544a\u8bc9\u4e86\u4e00\u4e9bLisp\u6559\u6d3e\u7684\u6210\u5458\u3002\u51e0\u4e4e\u7acb\u523b\u6211\u5c31\u906d\u5230\u4e86\r\u4e00\u7ec4\u6807\u51c6\u7684\u54cd\u5e94\uff1alisp\u7684\u62ec\u53f7\u53ea\u662f\u4e00\u4e2a\u8868\u9762\u7684\u95ee\u9898\uff0cLisp\u6709\u4e00\u4e2a\u5de8\u5927\u7684\u597d\u5904\uff0c\u4ee3\u7801\u548c\u6570\u636e\r\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u8868\u793a(\u663e\u7136\uff0c\u8fd9\u662f\u5bf9XML\u7684\u5de8\u5927\u6539\u8fdb)\uff0cLisp\u5177\u6709\u975e\u5e38\u5f3a\u5927\u7684\u5143\u7f16\u7a0b\u529f\u80fd\r\u5141\u8bb8\u7a0b\u5e8f\u7f16\u5199\u4ee3\u7801\u548c\u4fee\u6539\u81ea\u8eab\u7684\u5de5\u5177\uff0cLisp\u5141\u8bb8\u521b\u5efa\u7279\u5b9a\u4e8e\r\u624b\u5934\u7684\u95ee\u9898\u662f\uff0cLisp\u6a21\u7cca\u4e86\u8fd0\u884c\u65f6\u548c\u7f16\u8bd1\u65f6\u4e4b\u95f4\u7684\u533a\u522b\uff0cLisp\u3001Lisp\u3001Lisp\u2026\u2026\u3002\u8fd9\u4efd\u540d\u5355\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\u4e0d\u7528\u8bf4\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u8bf4\u4e0d\u901a\u3002\u6ca1\u6709\u4eba\u80fd\u7528\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u8fd9\u4e9b\u529f\u80fd\u7684\u7528\u5904\uff0c\u56e0\u4e3a\u8fd9\u4e9b\r\u6280\u672f\u5e94\u8be5\u53ea\u5728\u5927\u578b\u8f6f\u4ef6\u7cfb\u7edf\u4e2d\u6709\u7528\u3002\u5728\u5bf9\u4f20\u7edf\u7f16\u7a0b\u8bed\u8a00\u8fdb\u884c\u4e86\u957f\u8fbe\u6570\u5c0f\u65f6\u7684\u8fa9\u8bba\u4e4b\u540e\r\u628a\u5de5\u4f5c\u505a\u597d\uff0c\u6211\u653e\u5f03\u4e86\u3002\u6211\u4e0d\u6253\u7b97\u82b1\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u6765\u5b66\u4e60\u4e00\u95e8\u8bed\u6cd5\u5f88\u7cdf\u7cd5\u7684\u8bed\u8a00\uff0c\u4ee5\u4fbf\r\u4e86\u89e3\u6ca1\u6709\u6709\u7528\u793a\u4f8b\u7684\u6666\u6da9\u96be\u61c2\u7684\u529f\u80fd\u3002\u6211\u7684\u65f6\u4ee3\u8fd8\u6ca1\u6709\u5230\u6765\u3002\n\u51e0\u4e2a\u6708\u6765\uff0cLisp\u7684\u5021\u5bfc\u8005\u4e00\u76f4\u5728\u575a\u6301\u3002\u6211\u88ab\u96be\u4f4f\u4e86\u3002\u6211\u8ba4\u8bc6\u5e76\u975e\u5e38\u5c0a\u656c\u7684\u8bb8\u591a\u975e\u5e38\u806a\u660e\u7684\u4eba\u90fd\u662f\r\u7528\u8fd1\u4e4e\u5b97\u6559\u7684\u5949\u732e\u6765\u8d5e\u626cLisp\u3002\u4e00\u5b9a\u6709\u4ec0\u4e48\u4e1c\u897f\u5728\u90a3\u91cc\uff0c\u4e00\u4e9b\u6211\u62ff\u4e0d\u5230\u7684\u4e1c\u897f\uff01\r\u6700\u7ec8\uff0c\u6211\u5bf9\u77e5\u8bc6\u7684\u6e34\u6c42\u8d62\u5f97\u4e86\u6211\u7684\u5fc3\u3002\u6211\u5192\u4e86\u9669\uff0c\u54ac\u7d27\u7259\u5173\uff0c\u5f04\u810f\u4e86\u53cc\u624b\uff0c\u5f00\u59cb\u4e86\u51e0\u4e2a\u6708\u7684\u601d\u8003\r\u5f2f\u66f2\u7ec3\u4e60\u3002\u8fd9\u662f\u4e00\u6b21\u5728\u65e0\u5c3d\u7684\u632b\u6298\u4e4b\u6e56\u4e0a\u7684\u65c5\u884c\u3002\u6211\u628a\u8111\u5b50\u91cc\u7684\u4e1c\u897f\u7ffb\u8fc7\u6765\uff0c\u628a\u5b83\u51b2\u6d17\u5e72\u51c0\uff0c\u7136\u540e\u653e\u56de\u53bb\r\u5730\u70b9\u3002\u6211\u7ecf\u5386\u4e86\u4e03\u4e2a\u5730\u72f1\u73af\uff0c\u7136\u540e\u56de\u6765\u4e86\u3002\u7136\u540e\u6211\u5c31\u660e\u767d\u4e86\u3002\n\u987f\u609f\u662f\u77ac\u95f4\u5230\u6765\u7684\u3002\u524d\u4e00\u523b\u6211\u4ec0\u4e48\u90fd\u4e0d\u61c2\uff0c\u4e0b\u4e00\u523b\u4e00\u5207\u90fd\u7406\u6240\u5f53\u7136\u4e86\u3002\u6211\u6709\u8fc7\u8fd9\u6837\u7684\u7ecf\u5386\u3002\r\u5b9e\u73b0\u4e86\u6d85\u69c3\u3002\u6211\u51e0\u5341\u6b21\u542c\u5230\u4e0d\u540c\u7684\u4eba\u5f15\u7528\u57c3\u91cc\u514b\u00b7\u96f7\u8499\u5fb7\u7684\u8bdd\uff1aLisp\u503c\u5f97\u5b66\u4e60\r\u5f53\u60a8\u6700\u7ec8\u83b7\u5f97\u5b83\u65f6\uff0c\u60a8\u5c06\u62e5\u6709\u6df1\u523b\u7684\u542f\u8499\u7ecf\u9a8c\uff1b\u8fd9\u4e9b\u7ecf\u9a8c\u5c06\u4f7f\u60a8\u6210\u4e3a\u4e00\u540d\u66f4\u597d\u7684\u7a0b\u5e8f\u5458\r\u5269\u4e0b\u7684\u65f6\u95f4\uff0c\u5373\u4f7f\u4f60\u4ece\u6765\u4e0d\u7ecf\u5e38\u4f7f\u7528Lisp\u672c\u8eab\u3002&#34\uff1b\u6211\u4ece\u6765\u6ca1\u6709\u7406\u89e3\u8fc7\u8fd9\u53e5\u8bdd\u3002\u6211\u4ece\u6765\u4e0d\u76f8\u4fe1\u8fd9\u4f1a\u662f\u771f\u7684\r\u662f\u771f\u7684\u3002\u7ec8\u4e8e\uff0c\u5728\u7ecf\u5386\u4e86\u6240\u6709\u7684\u75db\u82e6\u4e4b\u540e\uff0c\u8fd9\u4e00\u5207\u90fd\u53d8\u5f97\u6709\u610f\u4e49\u4e86\uff01\u8fd9\u4ef6\u4e8b\u7684\u771f\u76f8\u6bd4\u6211\u60f3\u8c61\u7684\u8981\u591a\u5f97\u591a\u3002\u6211\u5df2\u7ecf\u53d6\u5f97\u4e86\u4e00\u9879\u6210\u5c31\r\u4e00\u79cd\u8fd1\u4e4e\u795e\u5723\u7684\u7cbe\u795e\u72b6\u6001\uff0c\u4e00\u6b21\u77ac\u95f4\u7684\u542f\u8499\u7ecf\u5386\uff0c\u5728\u4e0d\u5230\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u5c31\u5f7b\u5e95\u6539\u53d8\u4e86\u6211\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u770b\u6cd5\r\u4e00\u79d2\u949f\u3002\n\u5c31\u5728\u90a3\u4e00\u523b\uff0c\u6211\u6210\u4e3a\u4e86Lisp\u90aa\u6559\u7684\u4e00\u5458\u3002\u6211\u611f\u89c9\u5230\u4e00\u79cd\u5fcd\u672f\u5927\u5e08\u4e00\u5b9a\u4f1a\u6709\u7684\u611f\u89c9\uff1a\u6211\u5fc5\u987b\u628a\u6211\u7684\u65b0\u53d1\u73b0\r\u5728\u6211\u7684\u6709\u751f\u4e4b\u5e74\uff0c\u81f3\u5c11\u6709\u5341\u4e2a\u8ff7\u5931\u7684\u7075\u9b42\u83b7\u5f97\u4e86\u77e5\u8bc6\u3002\u6211\u8d70\u7684\u662f\u5e73\u5e38\u7684\u8def\u3002\u6211\u5728\u91cd\u590d\u540c\u6837\u7684\u8bba\u70b9\uff0c\r\u591a\u5e74\u6765\u4e00\u76f4\u7ed9\u6211(\u53ea\u662f\u73b0\u5728\u5b83\u4eec\u624d\u771f\u6b63\u6709\u610f\u4e49\uff01)\uff0c\u5e0c\u671b\u80fd\u8ba9\u6beb\u65e0\u6212\u5fc3\u7684\u65c1\u89c2\u8005\u6539\u53d8\u4e3b\u610f\u3002\u5b83\u6ca1\u6709\u8d77\u4f5c\u7528\u3002\u6211\u7684\r\u575a\u6301\u4e0d\u61c8\u6fc0\u53d1\u4e86\u4e00\u4e9b\u4eba\u7684\u5174\u8da3\uff0c\u4f46\u4ec5\u4ec5\u770b\u5230\u793a\u4f8bLisp\u4ee3\u7801\uff0c\u4ed6\u4eec\u7684\u597d\u5947\u5fc3\u5c31\u4f1a\u51cf\u5f31\u3002\u4e5f\u8bb8\u51e0\u5e74\u6765\r\u5021\u5bfc\u5c06\u953b\u9020\u4e00\u4e9b\u65b0\u7684\u91cc\u65af\u73c0\u65af\uff0c\u4f46\u6211\u5e76\u4e0d\u6ee1\u610f\u3002\u4e00\u5b9a\u6709\u66f4\u597d\u7684\u529e\u6cd5\u3002\n\u6211\u4ed4\u7ec6\u8003\u8651\u4e86\u8fd9\u4ef6\u4e8b\u3002Lisp\u6709\u6ca1\u6709\u4ec0\u4e48\u56fa\u6709\u7684\u786c\u6027\uff0c\u963b\u788d\u4e86\u975e\u5e38\u806a\u660e\u3001\u6709\u7ecf\u9a8c\u7684\r\u7a0b\u5e8f\u5458\u7406\u89e3\u4e0d\u4e86\u5417\uff1f\u4e0d\uff0c\u6ca1\u6709\u3002\u6bd5\u7adf\uff0c\u6211\u505a\u5230\u4e86\uff0c\u5982\u679c\u6211\u80fd\u505a\u5230\uff0c\u4efb\u4f55\u4eba\u90fd\u80fd\u505a\u5230\u3002\u90a3\u662f\u4ec0\u4e48\u8ba9\u4f60\r\u53e3\u9f7f\u4e0d\u6e05\u5c31\u8fd9\u4e48\u96be\u61c2\u5417\uff1f\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u7b54\u6848\u51fa\u4e4e\u610f\u6599\u5730\u51fa\u73b0\u4e86\u3002\u5f53\u7136\u4e86!\u3002\u6559\u4efb\u4f55\u4eba\u4efb\u4f55\u6d89\u53ca\u5230\u7684\u4e8b\u60c5\r\u5728\u4ed6\u4eec\u5df2\u7ecf\u7406\u89e3\u7684\u6982\u5ff5\u57fa\u7840\u4e0a\u6784\u5efa\u9ad8\u7ea7\u6982\u5ff5\uff01\u5982\u679c\u8fc7\u7a0b\u53d8\u5f97\u6709\u8da3\uff0c\u4e8b\u60c5\u5f97\u5230\u89e3\u91ca\r\u6b63\u786e\u5730\u8bf4\uff0c\u65b0\u6982\u5ff5\u4f1a\u53d8\u5f97\u548c\u5e2e\u52a9\u4ed6\u4eec\u7406\u89e3\u7684\u539f\u59cb\u6784\u4ef6\u4e00\u6837\u76f4\u89c2\u3002\u8fd9\u5c31\u662f\u95ee\u9898\u6240\u5728\uff01\r\u5143\u7a0b\u5e8f\u8bbe\u8ba1\u3001\u4ee3\u7801\u548c\u6570\u636e\u5408\u4e8c\u4e3a\u4e00\u3001\u81ea\u4fee\u6539\u7a0b\u5e8f\u3001\u9886\u57df\u7279\u5b9am\n\u5343\u91cc\u4e4b\u884c\uff0c\u59cb\u4e8e\u8db3\u4e0b\u3002\u542f\u8499\u4e4b\u65c5\u4e5f\u4e0d\u4f8b\u5916\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u6b65\u53ea\u662f\u78b0\u5de7\rXML\u3002\u5173\u4e8eXML\uff0c\u8fd8\u6709\u4ec0\u4e48\u53ef\u4ee5\u8bf4\u7684\u8fd8\u6ca1\u6709\u8bf4\u8fc7\u5462\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u662f\u76f8\u5f53\u591a\u7684\u3002\u5f53\u8fd9\u91cc\u4ec0\u4e48\u90fd\u6ca1\u6709\u7684\u65f6\u5019\rXML\u672c\u8eab\u7279\u522b\u6709\u8da3\uff0c\u5b83\u4e0eLisp\u7684\u5173\u7cfb\u975e\u5e38\u5438\u5f15\u4eba\u3002XML\u662fLisp\u975e\u5e38\u719f\u6089\u7684\u6982\u5ff5\r\u5021\u5bfc\u8005\u9700\u8981\u7684\u4e1c\u897f\u592a\u591a\u4e86\u3002\u5b83\u662f\u6211\u4eec\u5411\u666e\u901a\u7a0b\u5e8f\u5458\u4f20\u8fbe\u7406\u89e3\u7684\u6865\u6881\u3002\u6240\u4ee5\u8ba9\u6211\u4eec\u590d\u6d3b\u8fd9\u5339\u6b7b\u9a6c\uff0c\u5e72\u6389\u5b83\r\u5927\u68d2\uff0c\u5e76\u5192\u9669\u8fdb\u5165XML\u7684\u8352\u91ce\uff0c\u5728\u6211\u4eec\u4e4b\u524d\uff0c\u6ca1\u6709\u4eba\u6562\u5192\u9669\u8fdb\u5165\u8fd9\u7247\u8352\u91ce\u3002\u662f\u65f6\u5019\u4ece\u6211\u4eec\u719f\u6089\u7684\u5730\u65b9\u770b\u5230\u8fd9\u8f6e\u592a\u719f\u6089\u7684\u6708\u4eae\u4e86\u3002\r\u53e6\u4e00\u8fb9\u3002\n\u4ece\u8868\u9762\u4e0a\u770b\uff0cXML\u53ea\u4e0d\u8fc7\u662f\u4e00\u79cd\u6807\u51c6\u5316\u8bed\u6cd5\uff0c\u7528\u4e8e\u4ee5\u4eba\u7c7b\u53ef\u8bfb\u7684\u5f62\u5f0f\u8868\u793a\u4efb\u610f\u7684\u5206\u5c42\u6570\u636e\u3002\u5f85\u529e\u4e8b\u9879\u5217\u8868\u3001\u7f51\u9875\u3001\u533b\u7597\u8bb0\u5f55\u3001\u6c7d\u8f66\u4fdd\u9669\u7d22\u8d54\u3001\u914d\u7f6e\u6587\u4ef6\u90fd\u662fXML\u6f5c\u5728\u7528\u9014\u7684\u793a\u4f8b\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u5427\r\u4e3e\u4e2a\u7b80\u5355\u7684\u5f85\u529e\u4e8b\u9879\u6e05\u5355\u4e3a\u4f8b(\u5728\u51e0\u4e2a\u90e8\u5206\u4e2d\uff0c\u4f60\u4f1a\u4ece\u4e00\u4e2a\u5168\u65b0\u7684\u89d2\u5ea6\u6765\u770b\u5f85\u5b83)\uff1a\n&lt\uff1b\u5f85\u529e\u4e8b\u9879\u540d\u79f0=&#34\uff1b\u5bb6\u52a1&#34\uff1b&gt\uff1b\r&lt\uff1b\u9879\u76ee\u4f18\u5148\u7ea7=&#34\uff1b\u9ad8&gt\uff1b\u6253\u626b\u623f\u95f4\u3002&lt\uff1b/\u9879\u76ee&gt\uff1b\r&lt\uff1b\u9879\u76ee\u4f18\u5148\u7ea7=&#34\uff1b\u4e2d\u7b49&gt\uff1b\u6d17\u7897\u3002&lt\uff1b/\u9879\u76ee&gt\uff1b\r&lt\uff1b\u9879\u76ee\u4f18\u5148\u7ea7=&#34\uff1b\u4e2d\u7b49&gt\uff1b\u8d2d\u4e70\u66f4\u591a\u80a5\u7682\u3002&lt\uff1b/\u9879\u76ee&gt\uff1b\r&lt\uff1b/\u5f85\u529e\u4e8b\u9879&gt\uff1b\n\u5982\u679c\u6211\u4eec\u5728\u8fd9\u4e2a\u5f85\u529e\u4e8b\u9879\u5217\u8868\u4e2d\u91ca\u653e\u6211\u4eec\u6700\u559c\u6b22\u7684XML\u89e3\u6790\u5668\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u4e00\u65e6\u6570\u636e\u88ab\u89e3\u6790\uff0c\u5b83\u5728\u5185\u5b58\u4e2d\u662f\u5982\u4f55\u8868\u793a\u7684\u5462\uff1f\u8fd9\u4e2a\r\u5f53\u7136\uff0c\u6700\u81ea\u7136\u7684\u8868\u793a\u662f\u6811--\u5206\u5c42\u6570\u636e\u7684\u5b8c\u7f8e\u6570\u636e\u7ed3\u6784\u3002\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u505a\u4e86\u8fd9\u4e48\u591a\u4e4b\u540e\uff0cXML\u662f\r\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u68f5\u6811\uff0c\u5e8f\u5217\u5316\u6210\u4eba\u7c7b\u53ef\u8bfb\u7684\u5f62\u5f0f\u3002\u4efb\u4f55\u53ef\u4ee5\u7528\u6811\u8868\u793a\u7684\u4e1c\u897f\u90fd\u53ef\u4ee5\u7528XML\u8868\u793a\uff0c\u53cd\u4e4b\u4ea6\u7136\r\u53cd\u4e4b\u4ea6\u7136\u3002\u6211\u5e0c\u671b\u4f60\u80fd\u7406\u89e3\u8fd9\u4e2a\u60f3\u6cd5\u3002\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\u3002\n\u8ba9\u6211\u4eec\u518d\u6df1\u5165\u4e00\u70b9\u3002\u901a\u5e38\u5c06\u54ea\u4e9b\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u8868\u793a\u4e3a\u6811\uff1f\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u8fd9\u4efd\u6e05\u5355\u5c31\u50cf\r\u65e0\u9650\u7684\uff0c\u6240\u4ee5\u6211\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u63d0\u793a\uff0c\u6211\u8981\u8bf4\u7684\u662f--\u8bd5\u7740\u8bb0\u4f4f\u4f60\u4ee5\u524d\u7684\u7f16\u8bd1\u5668\u8bfe\u7a0b\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u6a21\u7cca\u7684\u8bb0\u5fc6\r\u8be5\u6e90\u4ee3\u7801\u5728\u89e3\u6790\u540e\u5b58\u50a8\u5728\u6811\u4e2d\uff0c\u60a8\u5c31\u8d70\u4e0a\u4e86\u6b63\u786e\u7684\u9053\u8def\u3002\u4efb\u4f55\u7f16\u8bd1\u5668\u90fd\u4e0d\u53ef\u907f\u514d\u5730\u89e3\u6790\u6e90\u4ee3\u7801\r\u8f6c\u6362\u4e3a\u62bd\u8c61\u8bed\u6cd5\u6811\u3002\u8fd9\u5e76\u4e0d\u5947\u602a\uff0c\u56e0\u4e3a\u6e90\u4ee3\u7801\u662f\u5206\u5c42\u7684\uff1a\u51fd\u6570\u5305\u542b\u53c2\u6570\u548c\u4ee3\u7801\u5757\u3002\u4ee3\u7801\u5757\u5305\u542b\u8868\u8fbe\u5f0f\u548c\u8bed\u53e5\u3002\u8868\u8fbe\u5f0f\u5305\u542b\u53d8\u91cf\u548c\u8fd0\u7b97\u7b26\u3002\u4e8b\u60c5\u5c31\u8fd9\u6837\u8fc7\u53bb\u4e86\u3002\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684\u63a8\u8bba\u5e94\u7528\u5230\u8fd9\u4e2a\u60f3\u6cd5\u4e0a\uff0c\u5373\u4efb\u4f55\u6811\u90fd\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5e8f\u5217\u5316\u4e3aXML\u3002\u5982\u679c\u6700\u7ec8\u8868\u793a\u4e86\u6240\u6709\u6e90\u4ee3\u7801\r\u4f5c\u4e3a\u4e00\u68f5\u6811\uff0c\u4efb\u4f55\u4e00\u68f5\u6811\u90fd\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3aXML\uff0c\u90a3\u4e48\u6240\u6709\u7684\u6e90\u4ee3\u7801\u90fd\u53ef\u4ee5\u8f6c\u6362\u6210XML\uff0c\u5bf9\u5417\uff1f\u8ba9\u6211\u4eec\u6765\u8bf4\u660e\u4e00\u4e0b\u8fd9\u4e00\u70b9\u3002\r\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u8bf4\u660e\u4e86\u6709\u8da3\u7684\u5c5e\u6027\u3002\u8bf7\u8003\u8651\u4ee5\u4e0b\u51fd\u6570\uff1a\n\u60a8\u80fd\u5c06\u6b64\u51fd\u6570\u5b9a\u4e49\u8f6c\u6362\u4e3a\u5b83\u7684XML\u7b49\u6548\u9879\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u76f8\u5f53\u7b80\u5355\u3002\u5f53\u7136\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\r\u8fd9\u4e48\u505a\u5427\u3002\u4ee5\u4e0b\u662f\u751f\u6210\u7684XML\u7684\u4e00\u79cd\u5f62\u5f0f\uff1a\n&lt\uff1bDefine-Function Return-type=&#34\uff1bint&#34\uff1bname=&#34\uff1badd&#34\uff1b&gt\uff1b\r&lt\uff1b\u53c2\u6570&gt\uff1b\r&lt\uff1b\u53c2\u6570\u7c7b\u578b=&#34\uff1bint&#34\uff1b&gt\uff1barg1&lt\uff1b/\u53c2\u6570&gt\uff1b\r&lt\uff1b\u53c2\u6570\u7c7b\u578b=&#34\uff1bint&#34\uff1b&gt\uff1barg2&lt\uff1b/\u53c2\u6570&gt\uff1b\r&lt\uff1b/\u53c2\u6570&gt\uff1b\r&lt\uff1b\u6b63\u6587&gt\uff1b\r&lt\uff1b\u9000\u8d27&gt\uff1b\r&lt\uff1bADD VALUE1=&#34\uff1bArg1&#34\uff1bvalue2=&#34\uff1barg2&#34\uff1b/&gt\uff1b\r&lt\uff1b/\u9000\u8d27&gt\uff1b\r&lt\uff1b/Body&gt\uff1b\r&lt\uff1b/\u5b9a\u4e49&gt\uff1b\n\u6211\u4eec\u53ef\u4ee5\u7528\u4efb\u4f55\u8bed\u8a00\u5b8c\u6210\u8fd9\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u7ec3\u4e60\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4efb\u4f55\u6e90\u4ee3\u7801\u8f6c\u6362\u4e3aXML\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\r\u751f\u6210\u7684XML\u8fd4\u56de\u5230\u539f\u59cb\u6e90\u4ee3\u7801\u3002\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u5c06Java\u8f6c\u6362\u4e3aXML\u7684\u8f6c\u6362\u5668\uff0c\u4e5f\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u5c06XML\u8f6c\u6362\u56deXML\u7684\u8f6c\u6362\u5668\r\u722a\u54c7\u3002\u6211\u4eec\u53ef\u4ee5\u4e3aC++\u505a\u540c\u6837\u7684\u4e8b\u60c5\u3002(\u5982\u679c\u4f60\u60f3\u77e5\u9053\u662f\u5426\u6709\u4eba\u75af\u72c2\u5230\u8fd9\u6837\u505a\uff0c\u770b\u770bGCC-xml\u5427)\u3002\u6b64\u5916\uff0c\u5bf9\u4e8e\u5171\u4eab\u5171\u540c\u7279\u5f81\u4f46\u4f7f\u7528\u4e0d\u540c\u8bed\u6cd5\u7684\u8bed\u8a00(\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u5bf9\u5927\u591a\u6570\u4e3b\u6d41\u662f\u6b63\u786e\u7684\r\u8bed\u8a00)\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528XML\u4f5c\u4e3a\u4e2d\u95f4\u8868\u793a\u5c06\u6e90\u4ee3\u7801\u4ece\u4e00\u79cd\u8bed\u8a00\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u8bed\u8a00\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6211\u4eec\u7684\rJava2XML\u8f6c\u6362\u5668\u5c06Java\u7a0b\u5e8f\u8f6c\u6362\u4e3aXML\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u751f\u6210\u7684XML\u8fd0\u884cXML2CPP\u8f6c\u6362\u5668\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\rC++\u4ee3\u7801\u3002\u5e78\u8fd0\u7684\u662f(\u5982\u679c\u6211\u4eec\u907f\u514d\u4f7f\u7528C++\u4e2d\u4e0d\u5b58\u5728\u7684Java\u7279\u6027)\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u53ef\u4ee5\u5de5\u4f5c\u7684C++\u7a0b\u5e8f\u3002\u5f88\u6574\u6d01\uff0c\u662f\u5427\uff1f\n\u6240\u6709\u8fd9\u4e9b\u6709\u6548\u5730\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528XML\u8fdb\u884c\u6e90\u4ee3\u7801\u7684\u6cdb\u578b\u5b58\u50a8\u3002\u6211\u4eec\u5c06\u80fd\u591f\u521b\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7c7b\r\u4f7f\u7528\u7edf\u4e00\u8bed\u6cd5\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4ee5\u53ca\u7f16\u5199\u5c06\u73b0\u6709\u6e90\u4ee3\u7801\u8f6c\u6362\u4e3aXML\u7684\u8f6c\u6362\u5668\u3002\u5982\u679c\u6211\u4eec\u8981\r\u5b9e\u9645\u4e0a\u91c7\u7528\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u4e0d\u540c\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u4e3a\u4ed6\u4eec\u7279\u5b9a\u7684\u8bed\u6cd5\u5b9e\u73b0\u89e3\u6790\u5668-\u4ed6\u4eec\r\u53ea\u9700\u4f7f\u7528XML\u89e3\u6790\u5668\u5c06XML\u76f4\u63a5\u8f6c\u6362\u4e3a\u62bd\u8c61\u8bed\u6cd5\u6811\u5373\u53ef\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u8981\u5f00\u59cbXML\u5341\u5b57\u519b\u4e1c\u5f81\uff0c\u5b83\u4e0eLisp\u6709\u4ec0\u4e48\u5173\u7cfb(\u6bd5\u7adf\uff0cLisp\u5c31\u662f\u521b\u5efa\u7684\r\u5927\u7ea6\u5728XML\u4e4b\u524d30\u5e74)\u3002\u6211\u4fdd\u8bc1\u4e00\u5207\u5f88\u5feb\u5c31\u4f1a\u660e\u6717\u8d77\u6765\u3002\u4f46\u5728\u6211\u4eec\u8fc8\u51fa\u7b2c\u4e8c\u6b65\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u8d70\u4e00\u6b65\r\u901a\u8fc7\u4e00\u4e2a\u5c0f\u7684\u54f2\u5b66\u7ec3\u4e60\u3002\u4ed4\u7ec6\u770b\u4e00\u4e0b\u4e0a\u9762\u7684&#34\uff1badd&#34\uff1b\u51fd\u6570\u7684XML\u7248\u672c\u3002\u4f60\u4f1a\u600e\u4e48\u505a\r\u628a\u5b83\u5f52\u7c7b\u5417\uff1f\u662f\u6570\u636e\u8fd8\u662f\u4ee3\u7801\uff1f\u5982\u679c\u60a8\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b\uff0c\u5c31\u4f1a\u610f\u8bc6\u5230\u6709\u5f88\u597d\u7684\u7406\u7531\u5c06\u6b64XML\r\u8fd9\u4e24\u4e2a\u7c7b\u522b\u7684\u4ee3\u7801\u7247\u6bb5\u3002\u5b83\u662fXML\uff0c\u5b83\u53ea\u662f\u4ee5\u6807\u51c6\u5316\u683c\u5f0f\u7f16\u7801\u7684\u4fe1\u606f\u3002\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\r\u53ef\u4ee5\u4ece\u5185\u5b58\u4e2d\u7684\u6811\u6570\u636e\u7ed3\u6784\u751f\u6210(\u8fd9\u5b9e\u9645\u4e0a\u5c31\u662fGCC-xml\u6240\u505a\u7684\u4e8b\u60c5)\u3002\u5b83\u8eba\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\uff0c\u6ca1\u6709\r\u663e\u7136\u662f\u6267\u884c\u5b83\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89e3\u6790\u4e3aXML\u8282\u70b9\u6811\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u5404\u79cd\u8f6c\u6362\u3002\u5b83\u7684\u6570\u636e\u3002\u4f46\u8bf7\u7a0d\u7b49\u7247\u523b\r\u7b49\u4e00\u4e0b\uff01\u8bf4\u5b8c\u548c\u505a\u5b8c\u4e4b\u540e\uff0c\u7528\u4e0d\u540c\u8bed\u6cd5\u7f16\u5199\u7684\u51fd\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5bf9\u5417\uff1f\u4e00\u65e6\u89e3\u6790\uff0c\u5b83\u7684\u6811\u53ef\u80fd\u662f\r\u8f93\u5165\u5230\u7f16\u8bd1\u5668\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6267\u884c\u5b83\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4e3a\u8fd9\u6bb5XML\u4ee3\u7801\u7f16\u5199\u4e00\u4e2a\u5c0f\u578b\u89e3\u91ca\u5668\uff0c\u7136\u540e\u6267\u884c\u5b83\r\u76f4\u63a5\u53bb\u5427\u3002\u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3aJava\u6216C++\u4ee3\u7801\uff0c\u7f16\u8bd1\u5e76\u8fd0\u884c\u3002\u8fd9\u662f\u5b83\u7684\u4ee3\u7801\u3002\n\u90a3\u4e48\uff0c\u6211\u4eec\u8bf4\u5230\u54ea\u4e86\uff1f\u770b\u8d77\u6765\u6211\u4eec\u521a\u521a\u5230\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u5730\u6b65\u3002\u4e00\u4e2a\u4f20\u7edf\u4e0a\u5f88\u96be\u7406\u89e3\u7684\u6982\u5ff5\r\u73b0\u5728\u53d8\u5f97\u60ca\u4eba\u7684\u7b80\u5355\u548c\u76f4\u89c2\u3002\u4ee3\u7801\u4e5f\u603b\u662f\u6570\u636e\uff01\u8fd9\u662f\u5426\u610f\u5473\u7740\u6570\u636e\u4e5f\u603b\u662f\u4ee3\u7801\uff1f\u8fd9\u542c\u8d77\u6765\u5f88\u75af\u72c2\r\u60c5\u51b5\u5f88\u53ef\u80fd\u662f\u8fd9\u6837\u3002\u8fd8\u8bb0\u5f97\u6211\u600e\u4e48\u4fdd\u8bc1\u4f60\u4f1a\u4ee5\u5168\u65b0\u7684\u773c\u5149\u770b\u5f85\u6211\u4eec\u7684\u5f85\u529e\u4e8b\u9879\u6e05\u5355\u5417\uff1f\u8ba9\u6211\u91cd\u7533\u4e00\u4e0b\r\u90a3\u4e2a\u627f\u8bfa\u3002\u4f46\u662f\u6211\u4eec\u73b0\u5728\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u6cbf\u7740\u6211\u4eec\u7684\u9053\u8def\u8d70\u4e0b\u53bb\u3002\n\u524d\u9762\u6211\u63d0\u5230\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7f16\u5199\u89e3\u91ca\u5668\u6765\u6267\u884cAdd\u51fd\u6570\u7684XML\u7247\u6bb5\u3002\u5f53\u7136\u662f\u8fd9\u4e2a\u4e86\r\u542c\u8d77\u6765\u50cf\u662f\u7eaf\u7cb9\u7684\u7406\u8bba\u7ec3\u4e60\u3002\u54ea\u4e2a\u5fc3\u667a\u6b63\u5e38\u7684\u4eba\u4f1a\u51fa\u4e8e\u5b9e\u9645\u76ee\u7684\u53bb\u505a\u90a3\u4ef6\u4e8b\u5462\uff1f\u55ef\uff0c\u4e8b\u5b9e\u8bc1\u660e\r\u76f8\u5f53\u591a\u7684\u4eba\u4f1a\u4e0d\u540c\u610f\u3002\u5728\u4f60\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\uff0c\u4f60\u53ef\u80fd\u4e5f\u81f3\u5c11\u9047\u5230\u8fc7\u5e76\u4f7f\u7528\u8fc7\u4ed6\u4eec\u7684\u4f5c\u54c1\u4e00\u6b21\u3002\u6211\u6709\u4f60\u5417\uff1f\r\u5750\u5728\u4f60\u7684\u5ea7\u4f4d\u8fb9\u4e0a\u5417\uff1f\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u524d\u8fdb\u5427\uff01\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u5230\u6708\u7403\u7684\u9ed1\u6697\u9762\u65c5\u884c\u4e86\uff0c\u90a3\u6211\u4eec\u5c31\u522b\u8d70\u4e86\u3002\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u63a2\u7d22\u5b83\u6765\u5b66\u5230\u4e00\u4e9b\u4e1c\u897f\r\u518d\u591a\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u518d\u5f80\u524d\u8d70\u4e00\u6b65\u3002\u9996\u5148\uff0c\u6211\u4eec\u95ed\u4e0a\u773c\u775b\uff0c\u56de\u5fc6\u8d772000\u5e74\u51ac\u5929\u7684\u4e00\u4e2a\u5bd2\u51b7\u7684\u96e8\u591c\u3002\u4e00\u4e2a\r\u4e00\u4f4d\u540d\u53eb\u8a79\u59c6\u65af\u00b7\u9093\u80af\u00b7\u6234\u7ef4\u68ee1\u53f7\u7684\u8457\u540d\u5f00\u53d1\u8005\rTomcat Servlet\u5bb9\u5668\u3002\u5230\u4e86\u6784\u5efa\u66f4\u6539\u7684\u65f6\u5019\uff0c\u4ed6\u5c0f\u5fc3\u7ffc\u7ffc\u5730\u4fdd\u5b58\u4e86\u6240\u6709\u6587\u4ef6\r\u7136\u540e\u8dd1\u4e86Make\u3002\u9519\u8bef\u3002\u5f88\u591a\u9519\u8bef\u3002\u6709\u70b9\u4e0d\u5bf9\u52b2\u3002\u7ecf\u8fc7\u4ed4\u7ec6\u68c0\u67e5\uff0c\u8a79\u59c6\u65af\u60ca\u547c\u9053\uff1a\u6211\u7684\u547d\u4ee4\u6ca1\u6709\u6267\u884c\u5417\uff1f\r\u56e0\u4e3a\u6211\u7684\u8d26\u5355\u524d\u9762\u6709\u7a7a\u683c\uff1f\uff01&#34\uff1b\u786e\u5b9e\uff0c\u8fd9\u5c31\u662f\u95ee\u9898\u6240\u5728\u3002\u518d\u6765\u4e00\u6b21\u3002\u8a79\u59c6\u65af\u5df2\u7ecf\u53d7\u591f\u4e86\u3002\u4ed6\u80fd\u900f\u8fc7\u5b83\u611f\u89c9\u5230\u6ee1\u6708\u3002\r\u4e91\u5f69\u8ba9\u4ed6\u5145\u6ee1\u4e86\u5192\u9669\u7cbe\u795e\u3002\u4ed6\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u65b0\u7684Java\u9879\u76ee\uff0c\u5e76\u8fc5\u901f\u5c06\u4e00\u4e2a\u7b80\u5355\u4f46\u975e\u5e38\u6709\u7528\u7684\r\u5b9e\u7528\u7a0b\u5e8f\u3002\u8fd9\u4f4d\u5929\u624d\u7684\u706b\u82b1\u4f7f\u7528Java\u5c5e\u6027\u6587\u4ef6\u6765\u83b7\u53d6\u6709\u5173\u5982\u4f55\u6784\u5efa\u9879\u76ee\u7684\u4fe1\u606f\u3002\u8a79\u59c6\u65af\u73b0\u5728\u53ef\u4ee5\u5199\u51fa\u7b49\u540c\u7684\u4e1c\u897f\u4e86\u3002\rMakefile\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u683c\u5f0f\uff0c\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u8be5\u6b7b\u7684\u7a7a\u683c\u4e86\u3002\u4ed6\u7684\u516c\u7528\u4e8b\u4e1a\u516c\u53f8\u4f7f\u51fa\u4e86\u6d51\u8eab\u89e3\u6570\u3002\n\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c06\u6e90\u76ee\u5f55\u590d\u5236\u5230\u76ee\u6807\u76ee\u5f55\u3002Ant\u5b9a\u4f4d\u4e00\u4e2a\u590d\u5236\u4efb\u52a1(\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2aJava\u7c7b)\uff0c\u8bbe\u7f6e\r\u901a\u8fc7\u8c03\u7528\u9002\u5f53\u7684Java\u65b9\u6cd5\u83b7\u5f97\u9002\u5f53\u7684\u53c2\u6570(todir\u548cfileset)\uff0c\u7136\u540e\u6267\u884c\u4efb\u52a1\u3002\u8682\u8681\u81ea\u5e26\u4e86\u4e00\u5957\r\u6838\u5fc3\u4efb\u52a1\uff0c\u4efb\u4f55\u4eba\u53ea\u9700\u7f16\u5199\u9075\u5faa\u7279\u5b9a\u7ea6\u5b9a\u7684Java\u7c7b\uff0c\u5c31\u53ef\u4ee5\u7528\u4ed6\u4eec\u81ea\u5df1\u7684\u4efb\u52a1\u6765\u6269\u5c55\u5b83\u3002\u8682\u8681\u53d1\u73b0\r\u8fd9\u4e9b\u7c7b\uff0c\u5e76\u5728\u9047\u5230\u5177\u6709\u9002\u5f53\u540d\u79f0\u7684XML\u5143\u7d20\u65f6\u6267\u884c\u5b83\u4eec\u3002\u5f88\u7b80\u5355\u3002\u6709\u6548\u7684\u8682\u8681\r\u5b9e\u73b0\u4e86\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u4e2d\u8ba8\u8bba\u7684\u5185\u5bb9\uff1a\u5b83\u5145\u5f53\u4f7f\u7528XML\u4f5c\u4e3a\u8bed\u6cd5\u7684\u8bed\u8a00\u7684\u89e3\u91ca\u5668\r\u901a\u8fc7\u5c06XML\u5143\u7d20\u8f6c\u6362\u4e3a\u9002\u5f53\u7684Java\u6307\u4ee4\u3002\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u6dfb\u52a0\u4efb\u52a1\uff0c\u5e76\u8ba9Ant\u5728\u9047\u5230\u5b83\u65f6\u6267\u884c\u5b83\r\u4e0a\u4e00\u8282\u4e2d\u63d0\u4f9b\u7684\u7528\u4e8e\u6dfb\u52a0\u7684XML\u7247\u6bb5\uff01\u8003\u8651\u5230Ant\u662f\u4e00\u4e2a\u975e\u5e38\u53d7\u6b22\u8fce\u7684\u9879\u76ee\uff0c\r\u5728\u4e0a\u4e00\u8282\u4e2d\u4ecb\u7ecd\u7684\u5185\u5bb9\u5f00\u59cb\u770b\u8d77\u6765\u66f4\u7406\u667a\u4e86\u3002\u6bd5\u7adf\uff0c\u5b83\u4eec\u6bcf\u5929\u90fd\u88ab\u7528\u5728\u53ef\u80fd\u76f8\u5f53\u4e8e\r\u6570\u4ee5\u5343\u8ba1\u7684\u516c\u53f8\uff01\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u8fd8\u6ca1\u6709\u8bf4\u8fc7\u4e3a\u4ec0\u4e48Ant\u8981\u4e0d\u8f9e\u8f9b\u52b3\u5730\u89e3\u91caXML\u3002\u4e0d\u8981\u8bd5\u56fe\u5728\u7f51\u4e0a\u5bfb\u627e\u7b54\u6848\r\u5b83\u7684\u7f51\u7ad9\u4e5f\u4e0d\u4e00\u6837--\u4f60\u4f1a\u53d1\u73b0\u6ca1\u6709\u4efb\u4f55\u6709\u4ef7\u503c\u7684\u4e1c\u897f\u3002\u53cd\u6b63\u8ddf\u6211\u4eec\u7684\u8ba8\u8bba\u6ca1\u4ec0\u4e48\u5173\u7cfb\u3002\u8ba9\u6211\u4eec\u518d\u8d70\u4e00\u6b65\u5427\u3002\u73b0\u5728\u662f\u65f6\u5019\r\u627e\u51fa\u539f\u56e0\u3002\n\u6709\u65f6\u5019\uff0c\u6b63\u786e\u7684\u51b3\u5b9a\u662f\u5728\u6ca1\u6709\u5168\u610f\u8bc6\u7684\u60c5\u51b5\u4e0b\u505a\u51fa\u7684\u3002\r\u4e86\u89e3\u6240\u6709\u6d89\u53ca\u7684\u95ee\u9898\u3002\u6211\u4e0d\u786e\u5b9a\u8a79\u59c6\u65af\u662f\u5426\r\u6211\u77e5\u9053\u4ed6\u4e3a\u4ec0\u4e48\u9009\u62e9XML--\u8fd9\u5f88\u53ef\u80fd\u662f\u4e00\u4e2a\u4e0b\u610f\u8bc6\u7684\u51b3\u5b9a\u3002\r\u81f3\u5c11\uff0c\u6211\u5728\u8682\u8681\u7f51\u7ad9\u4e0a\u770b\u5230\u7684\u4f7f\u7528\rXML\u90fd\u662f\u9519\u8bef\u7684\u539f\u56e0\u3002\u4f3c\u4e4e\u4e3b\u8981\u5173\u6ce8\u7684\u662f\r\u56f4\u7ed5\u53ef\u79fb\u690d\u6027\u548c\u53ef\u6269\u5c55\u6027\u5c55\u5f00\u3002\u6211\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\r\u5728Ant\u7684\u6848\u4f8b\u4e2d\uff0cXML\u6709\u52a9\u4e8e\u63a8\u8fdb\u8fd9\u4e9b\u76ee\u6807\u3002\u4ec0\u4e48\u662f\r\u76f8\u5bf9\u4e8e\u7b80\u5355\u7684Java\u6e90\u4ee3\u7801\uff0c\u4f7f\u7528\u89e3\u91ca\u578bXML\u7684\u4f18\u52bf\u662f\u4ec0\u4e48\uff1f\r\u4e3a\u4ec0\u4e48\u4e0d\u521b\u5efa\u4e00\u7ec4\u5177\u6709\u826f\u597dAPI\u7684\u7c7b\uff0c\u7528\u4e8e\u901a\u5e38\r\u4f7f\u7528\u7684\u4efb\u52a1(\u590d\u5236\u76ee\u5f55\u3001\u7f16\u8bd1\u7b49)\u3002\u5e76\u4f7f\u7528\r\u90a3\u4e9b\u76f4\u63a5\u6765\u81eaJava\u6e90\u4ee3\u7801\u7684\u5417\uff1f\u8fd9\u5c06\u5728\u6bcf\u4e2a\r\u8fd0\u884cJava\u7684\u5e73\u53f0(\u8fd9\u662fAnt\u65e0\u8bba\u5982\u4f55\u90fd\u9700\u8981\u7684)\uff0c\u5b83\u7684\r\u65e0\u9650\u7684\u53ef\u6269\u5c55\u6027\uff0c\u5b83\u7684\u597d\u5904\u662f\u62e5\u6709\u66f4\u591a\r\u4ee4\u4eba\u6109\u5feb\uff0c\u719f\u6089\u7684\u8bed\u6cd5\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u662fXML\u5462\uff1f\u6211\u4eec\u80fd\u627e\u5230\u4e00\u4e2a\u5f88\u597d\u7684\u7406\u7531\u5417\uff1f\r\u56e0\u4e3a\u4f60\u7528\u4e86\u5b83\uff1f\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u53ef\u4ee5(\u5c3d\u7ba1\u5982\u6211\u524d\u9762\u63d0\u5230\u7684\uff0c\u6211\u53ef\u4ee5\r\u4e0d\u786e\u5b9a\u8a79\u59c6\u65af\u662f\u5426\u6709\u610f\u8bc6\u5730\u610f\u8bc6\u5230\u4e86\u8fd9\u4e00\u70b9)\u3002XML\u5177\u6709\r\u5728\u5f15\u5165\u65b9\u9762\u8981\u7075\u6d3b\u5f97\u591a\u7684\u7279\u6027\r\u8bed\u4e49\u7ed3\u6784\u6bd4Java\u6240\u5e0c\u671b\u7684\u8981\u597d\u3002\u4e0d\u8981\u8fd9\u6837\u505a\r\u62c5\u5fc3\uff0c\u6211\u4e0d\u4f1a\u843d\u5165\u4f7f\u7528\u5927\u8bdd\u7684\u9677\u9631\r\u63cf\u8ff0\u96be\u4ee5\u7406\u89e3\u7684\u6982\u5ff5\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\r\u76f8\u5bf9\u7b80\u5355\u7684\u60f3\u6cd5\uff0c\u5c3d\u7ba1\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u52aa\u529b\u624d\u80fd\r\u89e3\u91ca\u4e00\u4e0b\u3002\u7cfb\u597d\u5b89\u5168\u5e26\u3002\u6211\u4eec\u5373\u5c06\u8fdb\u884c\u4e00\u6b21\u5de8\u5927\u7684\u98de\u8dc3\r\u5411\u7740\u5b9e\u73b0\u6d85\u69c3\u7684\u65b9\u5411\u524d\u8fdb\u3002\n\u6211\u4eec\u5982\u4f55\u7528Java\u4ee3\u7801\u8868\u793a\u4e0a\u9762\u7684\u526f\u672c\u793a\u4f8b\u5462\uff1f\u8fd9\u91cc\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff1a\n\u4ee3\u7801\u51e0\u4e4e\u76f8\u540c\uff0c\u53ea\u662f\u6bd4\u539f\u59cb\u7684XML\u7a0d\u957f\u4e00\u4e9b\u3002\u6240\u4ee5\r\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f\u7b54\u6848\u662fXML\u7247\u6bb5\u5f15\u5165\u4e86\u4e00\u4e2a\r\u7528\u4e8e\u590d\u5236\u7684\u7279\u6b8a\u8bed\u4e49\u7ed3\u6784\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u7528Java\u505a\u8fd9\u4ef6\u4e8b\uff0c\u5b83\u770b\u8d77\u6765\r\u5c31\u50cf\u8fd9\u6837\uff1a\n\u4f60\u80fd\u770b\u51fa\u4e0d\u540c\u4e4b\u5904\u5417\uff1f\u4e0a\u9762\u7684\u4ee3\u7801(\u5982\u679c\u53ef\u80fd\u7684\u8bdd\r\u5728Java\u4e2d)\u662f\u7528\u4e8e\u590d\u5236\u6587\u4ef6\u7684\u7279\u6b8a\u64cd\u4f5c\u7b26-\u7c7b\u4f3c\u4e8e\rFor\u5faa\u73af\u6216Java5\u4e2d\u5f15\u5165\u7684\u65b0foreach\u7ed3\u6784\u3002\r\u5982\u679c\u6709\u4e00\u4e2a\u4eceXML\u5230Java\u7684\u81ea\u52a8\u8f6c\u6362\u5668\uff0c\u5f88\u53ef\u80fd\r\u5236\u9020\u4e0a\u8ff0\u80e1\u8a00\u4e71\u8bed\u3002\u539f\u56e0\u662fJava\r\u63a5\u53d7\u7684\u8bed\u6cd5\u6811\u8bed\u6cd5\u7531\u8bed\u8a00\u56fa\u5b9a\r\u89c4\u683c-\u6211\u4eec\u65e0\u6cd5\u4fee\u6539\u5b83\u3002\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\r\u5305\u3001\u7c7b\u3001\u65b9\u6cd5\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u6269\u5c55Java\u6765\u5236\u4f5c\r\u53ef\u4ee5\u6dfb\u52a0\u65b0\u7684\u64cd\u4f5c\u5458\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5bf9\u6211\u4eec\u7684\r\u6838\u5fc3\u5728XML\u4e2d\u7684\u5185\u5bb9-\u5176\u8bed\u6cd5\u6811\u4e0d\u53d7\u9650\u5236\r\u9664\u4e86\u6211\u4eec\u7684\u7ffb\u8bd1\u4ec0\u4e48\u90fd\u884c\uff01\u5982\u679c\u8fd9\u4e2a\u60f3\u6cd5\u8fd8\u4e0d\u6e05\u695a\uff0c\r\u8003\u8651\u5728Java\u4e2d\u5f15\u5165\u7279\u6b8a\u8fd0\u7b97\u7b26\uff0c\u9664\u975e\uff1a\n\u5728\u524d\u4e24\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9Java\u8bed\u8a00\u8fdb\u884c\u4e86\u6269\u5c55\uff0c\u4ee5\u5f15\u5165\r\u7528\u4e8e\u590d\u5236\u6587\u4ef6\u7684\u8fd0\u7b97\u7b26\u548c\u6761\u4ef6\u8fd0\u7b97\u7b26\uff0c\u9664\u975e\n.", "note_en": "When I first stumbled into Lisp advocacy on various corners of the web I was already an experienced programmer. At that\r point I had grokked what seemed at the time a wide range of programming languages. I was proud to have the usual suspects (C++, Java, C#,\r etc.) on my service record and was under impression that I knew everything there is to know about programming languages. I couldn&#39;t have\r possibly been more wrong.\n  My initial attempt to learn Lisp came to a crashing halt as soon as I saw some sample code. I suppose the same thought ran through my \r\t\t\t\tmind that ran through thousands of other minds who were ever in my shoes: &#34;Why on Earth would anyone want to use a language with such \r\t\t\t\thorrific syntax?!&#34; I couldn&#39;t be bothered to learn a language if its creators couldn&#39;t be bothered to give it a pleasant syntax. \r\t\t\t\tAfter all, I was almost blinded by the infamous Lisp parentheses!\n  The moment I regained my sight I communicated my frustrations to some members of the Lisp sect. Almost immediately I was bombarded by \r\t\t\t\ta standard set of responses: Lisp&#39;s parentheses are only a superficial matter, Lisp has a huge benefit of code and data being \r\t\t\t\texpressed in the same manner (which, obviously, is a huge improvement over XML), Lisp has tremendously powerful metaprogramming \r\t\t\t\tfacilities that allow programs to write code and modify themselves, Lisp allows for creation of mini-languages specific to the \r\t\t\t\tproblem at hand, Lisp blurs the distinction between run time and compile time, Lisp, Lisp, Lisp... The list was very impressive. \r\t\t\t\tNeedless to say none of it made sense. Nobody could illustrate the usefulness of these features with specific examples because these \r\t\t\t\ttechniques are supposedly only useful in large software systems. After many hours of debating that conventional programming languages \r\t\t\t\tdo the job just fine, I gave up. I wasn&#39;t about to invest months into learning a language with a terrible syntax in order to \r\t\t\t\tunderstand obscure features that had no useful examples. My time has not yet come.\n  For many months the Lisp advocates pressed on. I was baffled. Many extremely intelligent people I knew and had much respect for were \r\t\t\t\tpraising Lisp with almost religious dedication. There had to be something there, something I couldn&#39;t afford not to get my hands on! \r\t\t\t\tEventually my thirst for knowledge won me over. I took the plunge, bit the bullet, got my hands dirty, and began months of mind \r\t\t\t\tbending exercises. It was a journey on an endless lake of frustration. I turned my mind inside out, rinsed it, and put it back in \r\t\t\t\tplace. I went through seven rings of hell and came back. And then I got it.\n  The enlightenment came instantaneously. One moment I understood nothing, and the next moment everything clicked into place. I&#39;ve \r\t\t\t\tachieved nirvana. Dozens of times I heard Eric Raymond&#39;s statement quoted by different people: &#34;Lisp is worth learning for the \r\t\t\t\tprofound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the \r\t\t\t\trest of your days, even if you never actually use Lisp itself a lot.&#34; I never understood this statement. I never believed it could be \r\t\t\t\ttrue. And finally, after all the pain, it made sense! There was more truth to it than I ever could have imagined. I&#39;ve achieved an \r\t\t\t\talmost divine state of mind, an instantaneous enlightenment experience that turned my view of computer science on its head in less than \r\t\t\t\ta single second.\n  That very second I became a member of the Lisp cult. I felt something a ninjitsu master must feel: I had to spread my newfound \r\t\t\t\tknowledge to at least ten lost souls in the course of my lifetime. I took the usual path. I was rehashing the same arguments that \r\t\t\t\twere given to me for years (only now they actually made sense!), hoping to convert unsuspecting bystanders. It didn&#39;t work. My \r\t\t\t\tpersistence sparked a few people&#39;s interest but their curiosity dwindled at the mere sight of sample Lisp code. Perhaps years of \r\t\t\t\tadvocacy would forge a few new Lispers, but I wasn&#39;t satisfied. There had to be a better way.\n  I gave the matter careful thought. Is there something inherently hard about Lisp that prevents very intelligent, experienced \r\t\t\t\tprogrammers from understanding it? No, there isn&#39;t. After all, I got it, and if I can do it, anybody can. Then what is it that makes \r\t\t\t\tLisp so hard to understand? The answer, as such things usually do, came unexpectedly. Of course! Teaching anybody anything involves \r\t\t\t\tbuilding advanced concepts on top of concepts they already understand! If the process is made interesting and the matter is explained \r\t\t\t\tproperly the new concepts become as intuitive as the original building blocks that aided their understanding. That was the problem! \r\t\t\t\tMetaprogramming, code and data in one representation, self-modifying programs, domain specific mini-languages, none of the \r\t\t\t\texplanations for these concepts referenced familiar territory. How could I expect anyone to understand them! No wonder people wanted \r\t\t\t\tspecific examples. I could as well have been speaking in Martian!\n  I shared my ideas with fellow Lispers. &#34;Well, of course these concepts aren&#39;t explained in terms of familiar territory&#34;, they said. \r\t\t\t\t&#34;They are so different, they&#39;re unlike anything these people have learned before.&#34; This was a poor excuse. &#34;I do not believe this to \r\t\t\t\tbe true&#34;, I said. The response was unanimous: &#34;Why don&#39;t you give it a try?&#34; So I did. This article is a product of my efforts. It is \r\t\t\t\tmy attempt to explain Lisp in familiar, intuitive concepts. I urge brave souls to read on. Grab your favorite drink. Take a deep \r\t\t\t\tbreath. Prepare to be blown away. Oh, and may the Force be with you.\n    A thousand mile journey starts with a single step. A journey to enlightenment is no exception and our first step just happens to be \r\t\t\t\tXML. What more could possibly be said about XML that hasn&#39;t already been said? It turns out, quite a bit. While there&#39;s nothing \r\t\t\t\tparticularly interesting about XML itself, its relationship to Lisp is fascinating. XML is the all too familiar concept that Lisp \r\t\t\t\tadvocates need so much. It is our bridge to conveying understanding to regular programmers. So let&#39;s revive the dead horse, take out \r\t\t\t\tthe stick, and venture into XML wilderness that no one dared venture into before us. It&#39;s time to see the all too familiar moon from \r\t\t\t\tthe other side.\n  Superficially XML is nothing more than a standardized syntax used to express arbitrary hierarchical data in human readable form. \r\t\t\t\tTo-do lists, web pages, medical records, auto insurance claims, configuration files are all examples of potential XML use. Let&#39;s use \r\t\t\t\ta simple to-do list as an example (in a couple of sections you&#39;ll see it in a whole new light):\n  &lt;todo name=&#34;housework&#34;&gt;\r &lt;item priority=&#34;high&#34;&gt;Clean the house.&lt;/item&gt;\r &lt;item priority=&#34;medium&#34;&gt;Wash the dishes.&lt;/item&gt;\r &lt;item priority=&#34;medium&#34;&gt;Buy more soap.&lt;/item&gt;\r&lt;/todo&gt;\n  What happens if we unleash our favorite XML parser on this to-do list? Once the data is parsed, how is it represented in memory? The \r\t\t\t\tmost natural representation is, of course, a tree - a perfect data structure for hierarchical data. After all is said and done, XML is \r\t\t\t\treally just a tree serialized to a human readable form. Anything that can be represented in a tree can be represented in XML and vice \r\t\t\t\tversa. I hope you understand this idea. It&#39;s very important for what&#39;s coming next.\n  Let&#39;s take this a little further. What other type of data is often represented as a tree? At this point the list is as good as \r\t\t\t\tinfinite so I&#39;ll give you a hint at what I&#39;m getting at - try to remember your old compiler course. If you have a vague recollection \r\t\t\t\tthat source code is stored in a tree after it&#39;s parsed, you&#39;re on the right track. Any compiler inevitably parses the source code \r\t\t\t\tinto an abstract syntax tree. This isn&#39;t surprising since source code is hierarchical: functions contain arguments and blocks of code. \r\t\t\t\tBlocks of code contain expressions and statements. Expressions contain variables and operators. And so it goes.\n  Let&#39;s apply our corollary that any tree can easily be serialized into XML to this idea. If all source code is eventually represented \r\t\t\t\tas a tree, and any tree can be serialized into XML, then all source code can be converted to XML, right? Let&#39;s illustrate this \r\t\t\t\tinteresting property by a simple example. Consider the function below:\n    Can you convert this function definition to its XML equivalent? Turns out, it&#39;s reasonably simple. Naturally there are many ways to \r\t\t\t\tdo this. Here is one way the resulting XML can look like:\n  &lt;define-function return-type=&#34;int&#34; name=&#34;add&#34;&gt;\r &lt;arguments&gt;\r &lt;argument type=&#34;int&#34;&gt;arg1&lt;/argument&gt;\r &lt;argument type=&#34;int&#34;&gt;arg2&lt;/argument&gt;\r &lt;/arguments&gt;\r &lt;body&gt;\r &lt;return&gt;\r &lt;add value1=&#34;arg1&#34; value2=&#34;arg2&#34; /&gt;\r &lt;/return&gt;\r &lt;/body&gt;\r&lt;/define&gt;\n  We can go through this relatively simple exercise with any language. We can turn any source code into XML, and we can transform the \r\t\t\t\tresulting XML back to original source code. We can write a converter that turns Java into XML and a converter that turns XML back to \r\t\t\t\tJava. We could do the same for C++. (In case you&#39;re wondering if anyone is crazy enough to do it, take a look at  GCC-XML). \r\t\t\t\tFurthermore, for languages that share common features but use different syntax (which to some extent is true about most mainstream \r\t\t\t\tlanguages) we could convert source code from one language to another using XML as an intermediary representation. We could use our \r\t\t\t\tJava2XML converter to convert a Java program to XML. We could then run an XML2CPP converter on the resulting XML and turn it into \r\t\t\t\tC++ code. With any luck (if we avoid using features of Java that don&#39;t exist in C++) we&#39;ll get a working C++ program. Neat, eh?\n  All this effectively means that we can use XML for generic storage of source code. We&#39;d be able to create a whole class of \r\t\t\t\tprogramming languages that use uniform syntax, as well as write transformers that convert existing source code to XML. If we were to \r\t\t\t\tactually adopt this idea, compilers for different languages wouldn&#39;t need to implement parsers for their specific grammars - they&#39;d \r\t\t\t\tsimply use an XML parser to turn XML directly into an abstract syntax tree.\n  By now you&#39;re probably wondering why I&#39;ve embarked on the XML crusade and what it has to do with Lisp (after all, Lisp was created \r\t\t\t\tabout thirty years before XML). I promise that everything will become clear soon enough. But before we take our second step, let&#39;s go \r\t\t\t\tthrough a small philosophical exercise. Take a good look at the XML version of our &#34;add&#34; function above. How would you \r\t\t\t\tclassify it? Is it data or code? If you think about it for a moment you&#39;ll realize that there are good reasons to put this XML \r\t\t\t\tsnippet into both categories. It&#39;s XML and it&#39;s just information encoded in a standardized format. We&#39;ve already determined that it \r\t\t\t\tcan be generated from a tree data structure in memory (that&#39;s effectively what GCC-XML does). It&#39;s lying around in a file with no \r\t\t\t\tapparent way to execute it. We can parse it into a tree of XML nodes and do various transformations on it. It&#39;s data. But wait a \r\t\t\t\tmoment! When all is said and done it&#39;s the same &#34;add&#34; function written with a different syntax, right? Once parsed, its tree could be \r\t\t\t\tfed into a compiler and we could execute it. We could easily write a small interpreter for this XML code and we could execute it \r\t\t\t\tdirectly. Alternatively, we could transform it into Java or C++ code, compile it, and run it. It&#39;s code.\n  So, where are we? Looks like we&#39;ve just arrived to an interesting point. A concept that has traditionally been so hard to understand \r\t\t\t\tis now amazingly simple and intuitive. Code is also always data! Does it mean that data is also always code? As crazy as this sounds \r\t\t\t\tthis very well might be the case. Remember how I promised that you&#39;ll see our to-do list in a whole new light? Let me reiterate on \r\t\t\t\tthat promise. But we aren&#39;t ready to discuss this just yet. For now let&#39;s continue walking down our path.\n  A little earlier I mentioned that we could easily write an interpreter to execute our XML snippet of the add function. Of course this \r\t\t\t\tsounds like a purely theoretical exercise. Who in their right mind would want to do that for practical purposes? Well, it turns out \r\t\t\t\tquite a few people would disagree. You&#39;ve likely encountered and used their work at least once in your career, too. Do I have you \r\t\t\t\tout on the edge of your seat? If so, let&#39;s move on!\n    Now that we&#39;ve made the trip to the dark side of the moon, let&#39;s not leave quite yet. We may still learn something by exploring it a \r\t\t\t\tlittle more, so let&#39;s take another step. We begin by closing our eyes and remembering a cold rainy night in the winter of 2000. A \r\t\t\t\tprominent developer by the name of James Duncan Davidson  1 was hacking his way through\r\t\t\t\t Tomcat servlet container. As the time came to build the changes he carefully saved all his files\r\t\t\t\tand ran  make. Errors. Lots of errors. Something was wrong. After careful examination James exclaimed: &#34;Is my command not executing\r\t\t\t\tbecause I have a space in front of my tab?!&#34; Indeed, this was the problem. Again. James has had enough. He could sense the full moon through\r\t\t\t\tthe clouds and it made him adventurous. He created a fresh Java\tproject and quickly hacked together a simple but surprisingly useful\r\t\t\t\tutility. This spark of genius used Java property files for\tinformation on how to build the project. James could now write the equivalent\r\t\t\t\tof the makefile in a nice format without worrying about\tthe damned spaces ever again. His utility did all the hard work by interpreting\r\t\t\t\tthe property file and taking appropriate actions to build the project. It was neat. Another Neat Tool.  Ant.\n  After using Ant to build Tomcat for a few months it became clear that Java property files are not sufficient to express complicated \r\t\t\t\tbuild instructions. Files needed to be checked out, copied, compiled, sent to another machine, and unit tested. In case of failure \r\t\t\t\te-mails needed to be sent out to appropriate people. In case of success &#34;Bad to the Bone&#34; needed to be played at the highest possible \r\t\t\t\tvolume. At the end of the track volume had to be restored to its original level. Yes, Java property files didn&#39;t cut it anymore. \r\t\t\t\tJames needed a more flexible solution. He didn&#39;t feel like writing his own parser (especially since he wanted an industry standard \r\t\t\t\tsolution). XML seemed like a reasonable alternative. In a couple of days Ant was ported to XML. It was the best thing since sliced \r\t\t\t\tbread.\n  So how does Ant work? It&#39;s pretty simple. It takes an XML file with specific build instructions (you decide if they&#39;re data or code) \r\t\t\t\tand interprets them by running specialized Java code for each XML element. It&#39;s actually much simpler than it sounds. A simple XML \r\t\t\t\tinstruction like the one below causes a Java class with an equivalent name to be loaded and its code to be executed.\n    The snippet above copies a source directory to a destination directory. Ant locates a &#34;copy&#34; task (a Java class, really), sets \r\t\t\t\tappropriate parameters (todir and fileset) by calling appropriate Java methods and then executes the task. Ant comes with a set of \r\t\t\t\tcore tasks and anyone can extend it with tasks of their own simply by writing Java classes that follow certain conventions. Ant finds \r\t\t\t\tthese classes and executes them whenever XML elements with appropriate names are encountered. Pretty simple. Effectively Ant \r\t\t\t\taccomplishes what we were talking about in the previous section: it acts as an interpreter for a language that uses XML as its syntax \r\t\t\t\tby translating XML elements to appropriate Java instructions. We could write an &#34;add&#34; task and have Ant execute it when it encounters \r\t\t\t\tthe XML snippet for addition presented in the previous section! Considering that Ant is an extremely popular project, the ideas \r\t\t\t\tpresented in the previous section start looking more sane. After all, they&#39;re being used every day in what probably amounts to \r\t\t\t\tthousands of companies!\n  So far I&#39;ve said nothing about why Ant actually goes through all the trouble of interpreting XML. Don&#39;t try to look for the answer on \r\t\t\t\tits website either - you&#39;ll find nothing of value. Nothing relevant to our discussion, anyway. Let&#39;s take another step. It&#39;s time to \r\t\t\t\tfind out why.\n    Sometimes right decisions are made without full conscious\r\t\t\t\tunderstanding of all the issues involved. I&#39;m not sure if James\r\t\t\t\tknew why he chose XML - it was likely a subconscious decision.\r\t\t\t\tAt the very least, the reasons I saw on Ant&#39;s website for using\r\t\t\t\tXML are all the wrong reasons. It appears that the main concerns\r\t\t\t\trevolved around portability and extensibility. I fail to see how\r\t\t\t\tXML helps advance these goals in Ant&#39;s case. What is the\r\t\t\t\tadvantage of using interpreted XML over simple Java source code?\r\t\t\t\tWhy not create a set of classes with a nice API for commonly\r\t\t\t\tused tasks (copying directories, compiling, etc.) and using\r\t\t\t\tthose directly from Java source code? This would run on every\r\t\t\t\tplatform that runs Java (which Ant requires anyway), it&#39;s\r\t\t\t\tinfinitely extensible, and it has the benefit of having a more\r\t\t\t\tpleasant, familiar syntax. So why XML? Can we find a good reason\r\t\t\t\tfor using it?\n  It turns out that we can (although as I mentioned earlier I&#39;m\r\t\t\t\tnot sure if James was consciously aware of it). XML has the\r\t\t\t\tproperty of being far more flexible in terms of introduction of\r\t\t\t\tsemantic constructs than Java could ever hope to be. Don&#39;t\r\t\t\t\tworry, I&#39;m not falling into the trap of using big words to\r\t\t\t\tdescribe incomprehensible concepts. This is actually a\r\t\t\t\trelatively simple idea, though it may take some effort to\r\t\t\t\texplain. Buckle your seat-belt. We&#39;re about to make a giant leap\r\t\t\t\ttowards achieving nirvana.\n  How can we represent &#39;copy&#39; example above in Java code? Here&#39;s one way to do it:\n    The code is almost the same, albeit a little longer than the original XML. So\r\t\t\t\twhat&#39;s different? The answer is that the XML snippet introduces a\r\t\t\t\tspecial semantic construct for copying. If we could do it in Java it would look\r\t\t\t\tlike this:\n    Can you see the difference? The code above (if it were possible\r\t\t\t\tin Java) is a special operator for copying files - similar to a\r\t\t\t\t for loop or a new  foreach construct introduced in Java 5. If we\r\t\t\t\thad an automatic converter from XML to Java it would likely\r\t\t\t\tproduce the above gibberish. The reason for this is that Java&#39;s\r\t\t\t\taccepted syntax tree grammar is fixed by the language\r\t\t\t\tspecification - we have no way of modifying it. We can add\r\t\t\t\tpackages, classes, methods, but we cannot extend Java to make\r\t\t\t\taddition of new operators possible. Yet we can do it to our\r\t\t\t\theart&#39;s content in XML - its syntax tree isn&#39;t restricted by\r\t\t\t\tanything except our interpreter! If the idea is still unclear,\r\t\t\t\tconsider introducing a special operator &#39;unless&#39; to Java:\n    In the previous two examples we extend the Java language to introduce an\r\t\t\t\toperator for copying files and a conditional operator  unless\n......", "posttime": "2020-10-26 17:31:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "lisp,nature,xml", "title": "Lisp\u7684\u672c\u8d28(2006)", "title_en": "The Nature of Lisp (2006)", "transed": 1, "url": "http://www.defmacro.org/ramblings/lisp.html", "via": "", "real_tags": ["lisp", "nature", "xml"]}, {"category": "", "categoryclass": "", "imagename": "cb137c9c1bba0d6a6435375a85921b08.jpg", "infoid": 1031211, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TravelSafe API\u662f\u4e00\u79cd\u6708\u5ea6\u8ba2\u9605\u4ea7\u54c1\uff0c\u5141\u8bb8\u65c5\u6e38\u63d0\u4f9b\u5546\u5728\u9884\u8ba2\u8fc7\u7a0b\u4e2d\u96c6\u6210\u6709\u5173\u76ee\u7684\u5730\u4e4b\u95f4\u70b9\u5bf9\u70b9\u9650\u5236\u7684\u6d41\u884c\u75c5\u76f8\u5173\u4fe1\u606f-\u8be5\u670d\u52a1\u4ece\u5b98\u65b9\u6765\u6e90\u548c\u5f53\u5730\u653f\u5e9c\u7f51\u7ad9\u63d0\u53d6\u6570\u636e\uff0cTravelPerk\u8868\u793a\uff0c\u8fd9\u4e9b\u6570\u636e\u88ab\u81ea\u5df1\u7684\u5ba2\u6237\u670d\u52a1\u4ee3\u7406\u4ea4\u53c9\u5f15\u7528\u3002\n\u5b83\u8fd8\u5728\u8ba1\u7b97\u524d\u5f80\u7279\u5b9a\u56fd\u5bb6\u65c5\u884c\u7684\u98ce\u9669\u6c34\u5e73\uff0c\u5b83\u8bf4\u8fd9\u662f\u57fa\u4e8e\u5bf9\u75ab\u60c5\u7e41\u6b96\u7387(R0)\u7684\u5b9e\u65f6\u5206\u6790\u3002\n\u5728\u63a8\u51faAPI\u4e4b\u524d\uff0cTravelPerk\u57287\u6708\u4efd\u6536\u8d2d\u4e86\u98ce\u9669\u7ba1\u7406\u521d\u521b\u516c\u53f8Albatross\uff0c\u56e0\u4e3a\u5927\u6d41\u884c\u63a8\u52a8\u5176\u6269\u5927\u65c5\u884c\u98ce\u9669\u7ba1\u7406\u4ea7\u54c1\u3002\n\u65c5\u6e38\u521d\u521b\u516c\u53f8\u5f53\u7136\u662f\u53d7\u75ab\u60c5\u6253\u51fb\u6700\u4e25\u91cd\u7684\u516c\u53f8\u4e4b\u4e00\uff0c\u8be5\u75c5\u6bd2\u6467\u6bc1\u4e86\u56fd\u9645\u65c5\u884c\u7684\u9700\u6c42\uff0c\u5e76\u62b9\u53bb\u4e86\u5927\u7247\u5546\u52a1\u65c5\u884c\u5e02\u573a\u3002\u800c\u4e14\uff0c\u867d\u7136\u5bb6\u5ead\u9017\u7559\u4f3c\u4e4e\u786e\u5b9e\u62b5\u6d88\u4e86\u4e00\u4e9b\u4e0e\u5ea6\u5047\u76f8\u5173\u7684\u9700\u6c42\u7d27\u7f29\uff0c\u4f46\u5546\u4e1a\u5c0f\u8d39\u7684\u524d\u666f\u4ecd\u7136\u4e25\u5cfb-\u56e0\u4e3a\u6570\u5341\u540d\u4fe1\u606f\u5de5\u4f5c\u8005\u5728\u5bb6\u91cc\u5fd9\u4e8e\u5f00\u4f1a\u3002\n\u5bf9\u65b0\u51a0\u80ba\u708e\u9700\u6c42\u51b2\u51fb\u7684\u56de\u5e94\u4e00\u76f4\u662f\u4e13\u6ce8\u4e8e\u4ea7\u54c1\u5f00\u53d1\uff0c\u800c\u4eca\u5929\u63a8\u51fa\u7684\u8ba2\u9605\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\u770b\u8d77\u6765\u50cf\u662f\u8bd5\u56fe\u5728\u65c5\u6e38\u5371\u673a\u4e2d\u5bfb\u627e\u5546\u673a\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86\u4e00\u9879\u670d\u52a1\uff0c\u5e0c\u671b\u80fd\u652f\u6301\u66f4\u5e7f\u6cdb\u7684\u884c\u4e1a\u91cd\u632f\u505c\u6ede\u4e0d\u524d\u7684\u9700\u6c42\u3002\n\u8fd9\u4e2aAPI\u4e5f\u662f\u51fa\u4e8e\u9700\u8981\u800c\u5f00\u53d1\u7684\uff0cTravelPerk\u6700\u521d\u4e3a\u81ea\u5df1\u7684\u5ba2\u6237\u63d0\u4f9b\u4e86\u8fd9\u9879\u670d\u52a1\uff0c\u56e0\u4e3a\u5b83\u8bd5\u56fe\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u9884\u8ba2\u6240\u9700\u7684\u4fdd\u8bc1\u3002\n\u73b0\u5728\uff0c\u5b83\u5f00\u653e\u4e86\u5bf9\u822a\u7a7a\u516c\u53f8\u3001\u65c5\u884c\u793e\u548c\u9884\u8ba2\u5e73\u53f0\u7684\u66f4\u5e7f\u6cdb\u751f\u6001\u7cfb\u7edf\u7684\u8bbf\u95ee\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u4ea7\u54c1\uff0c\u53ef\u4ee5\u901a\u8fc7\u6708\u5ea6\u8ba2\u9605\u83b7\u5f97(\u4e0d\u9700\u8981\u9501\u5b9a\u5408\u540c)\u3002\n\u8bbf\u95eeTravelSafe\u5e76\u4e0d\u4f9d\u8d56\u4e8e\u662f\u5426\u5df2\u6210\u4e3aTravelPerk\u5ba2\u6237\u3002TravelSafe API\u662f\u4efb\u4f55\u516c\u53f8\u90fd\u53ef\u4ee5\u4f7f\u7528\u7684\u72ec\u7acb\u4ea7\u54c1\uff0c\u201c\u9996\u5e2d\u6267\u884c\u5b98\u517c\u8054\u5408\u521b\u59cb\u4ebaAvi Meir\u8bc1\u5b9e\u3002\u6211\u4eec\u6700\u521d\u4e3a\u6211\u4eec\u81ea\u5df1\u7684\u5e73\u53f0\u5efa\u7acb\u4e86\u8fd9\u9879\u6280\u672f\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\uff0c\u5728\u8fd9\u6837\u4e00\u4e2a\u4e0d\u786e\u5b9a\u7684\u65f6\u671f\uff0c\u6211\u4eec\u7684\u5ba2\u6237\u548c\u65c5\u884c\u8005\u786e\u5b9e\u9700\u8981\u51c6\u786e\u7684\u3001\u6700\u65b0\u7684\u4fe1\u606f\u3002\u7136\u800c\uff0c\u6211\u4eec\u5f88\u5feb\u610f\u8bc6\u5230\uff0c\u6574\u4e2a\u884c\u4e1a\u90fd\u5b58\u5728\u540c\u6837\u7684\u9700\u6c42\uff0c\u6211\u4eec\u4e3a\u81ea\u5df1\u5efa\u7acb\u7684\u4e1c\u897f\u5728\u6574\u4e2a\u65c5\u6e38\u4e1a\u53ef\u80fd\u771f\u7684\u5f88\u6709\u4ef7\u503c\u3002\u201c\n\u4ed6\u8865\u5145\u8bf4\uff1a\u201c\u6211\u4eec\u7684\u76ee\u6807\u662f\u6210\u4e3a\u6700\u5f00\u653e\u7684\u65c5\u884c\u7ba1\u7406\u5e73\u53f0\uff0c\u8fd9\u662f\u6211\u4eec\u671d\u7740\u5efa\u7acb\u65c5\u884c\u670d\u52a1\u751f\u6001\u7cfb\u7edf\u8fc8\u51fa\u7684\u7b2c\u4e00\u6b65\uff0c\u8ba9\u5176\u4ed6\u65c5\u884c\u516c\u53f8\u4e43\u81f3\u6574\u4e2a\u884c\u4e1a\u90fd\u80fd\u4ece\u6211\u4eec\u7684\u6280\u672f\u6295\u8d44\u4e2d\u53d7\u76ca\u3002\u201d\n\u6885\u5c14\u8868\u793a\uff0cTravelPerk\u9884\u8ba1\u6700\u5f3a\u52b2\u7684\u9700\u6c42\u5c06\u6765\u81ea\u4e2d\u578b\u65c5\u884c\u7ba1\u7406\u516c\u53f8--\u8003\u8651\u5230\u8be5\u4ea7\u54c1\u7684\u201c\u5f00\u53d1\u8005\u53cb\u597d\u578b\u201d\u6027\u8d28(\u4ed6\u5439\u6367\u96c6\u6210\u7684\u7b80\u4fbf\u6027\u548c\u901f\u5ea6\u662f\u6700\u5927\u7684\u5438\u5f15\u529b)\uff0c\u8fd8\u56e0\u4e3a\u5b83\u7684\u5185\u5bb9\u201c\u662fTravelSafe\u72ec\u6709\u7684\uff0c\u5e76\u53ef\u5b9e\u65f6\u66f4\u65b0\u201d\u3002(\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u6211\u4eec\u95ee\u5230\u98ce\u9669\u8bc4\u5206\u5143\u7d20\u65f6\uff0c\u4ed6\u786e\u8ba4TravelSafe API\u63d0\u4f9b\u7684\u4fe1\u606f\u662f\u201c\u6700\u4f73\u6570\u636e\u548c\u4fe1\u606f\u7684\u96c6\u5408\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u7684\u4e3b\u89c2\u8bc4\u4f30\u201d\u3002)\u3002\n\u201c\u8003\u8651\u5230\u76ee\u524d\u65c5\u6e38\u4e1a\u7684\u53d8\u5316\u901f\u5ea6\uff0c\u8fd9\u4e00\u70b9\u81f3\u5173\u91cd\u8981\uff0c\u201d\u4ed6\u8865\u5145\u9053\u3002\n\u7531\u4e8e\u65e0\u6cd5\u83b7\u5f97\u6709\u5173\u75c5\u6bd2\u5982\u4f55\u5728\u4e0d\u540c\u5730\u533a\u4f20\u64ad\u7684\u6570\u636e(\u548c/\u6216\u9ad8\u8d28\u91cf\u6570\u636e)\uff0c\u4f7f\u9ad8\u5ea6\u6ce2\u52a8\u7684\u5927\u6d41\u884c\u53d8\u5f97\u590d\u6742\uff0c\u4f7f\u65c5\u884c\u6307\u5357\u4fdd\u6301\u6700\u65b0\u663e\u7136\u662f\u4e00\u4e2a\u91cd\u5927\u6311\u6218\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u6885\u5c14\u8ba4\u4e3a\uff0c\u6280\u672f\u53ef\u4ee5\u901a\u8fc7\u5de5\u5177\u6765\u6574\u7406\u548c\u5c55\u793a\u6700\u597d\u7684\u4fe1\u606f\uff0c\u4ece\u800c\u5e2e\u52a9\u89e3\u51b3\u672c\u8d28\u4e0a\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5\u3002(\u4ed6\u8fd8\u9a73\u65a5\u4e86\u4e00\u5bb6\u63d0\u4f9b\u65c5\u884c\u98ce\u9669\u8bc4\u4f30\u5efa\u8bae\u7684\u65c5\u6e38\u516c\u53f8\u662f\u5426\u5b58\u5728\u4efb\u4f55\u7d27\u5f20\u60c5\u7eea\uff0c\u8fa9\u79f0\u5176\u6fc0\u52b1\u63aa\u65bd\u4e0e\u786e\u4fdd\u5b89\u5168\u65c5\u884c\u662f\u4e00\u81f4\u7684\u3002)\u3002\n\u6885\u5c14\u8bf4\uff1a\u201c\u6211\u4eec\u65e0\u6cd5\u63d0\u9ad8\u5168\u7403\u65b0\u51a0\u80ba\u708e\u73b0\u6709\u6570\u636e\u7684\u8d28\u91cf\u6216\u51c6\u786e\u6027\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u8ba9\u65c5\u884c\u8005\u66f4\u5bb9\u6613\u8bbf\u95ee\u548c\u7406\u89e3\u53ef\u7528\u7684\u4fe1\u606f\u3002\u201d\u201c\u76ee\u524d\uff0c\u65c5\u884c\u8005\u771f\u7684\u5f88\u96be\u627e\u5230\u5173\u4e8e\u9002\u7528\u4e8e\u4ed6\u4eec\u7684\u89c4\u5219\u7684\u6e05\u6670\u3001\u6613\u7406\u89e3\u548c\u51c6\u786e\u7684\u4fe1\u606f\u3002\u4eba\u4eec\u5f80\u5f80\u9700\u8981\u9605\u8bfb\u591a\u7bc7\u6587\u7ae0\uff0c\u524d\u5f80\u8bb8\u591a\u4e0d\u540c\u7684\u6765\u6e90\uff0c\u624d\u80fd\u4e86\u89e3\u5f53\u5730\u7684\u6307\u5bfc\u65b9\u9488\u662f\u4ec0\u4e48\uff0c\u98ce\u9669\u6c34\u5e73\u662f\u4ec0\u4e48\uff0c\u662f\u5426\u5fc5\u987b\u5728\u8fd4\u56de\u65f6\u8fdb\u884c\u9694\u79bb\u7b49\u7b49\u3002\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u6295\u8d44\u5f00\u53d1\u4e86\u5148\u8fdb\u7684\u4fe1\u606f\u5904\u7406\u5de5\u5177\uff0c\u4f7f\u7528R-Rate\u8ba1\u7b97\u81ea\u52a8\u6bcf\u65e5\u66f4\u65b0\u98ce\u9669\u6c34\u5e73\uff0c\u4ee5\u53ca\u5185\u90e8\u5de5\u5177\uff0c\u4ee5\u65b9\u4fbf\u6211\u4eec\u7684\u653f\u7b56\u5206\u6790\u5e08\u68c0\u67e5\u548c\u66f4\u65b0\u8fd9\u4e9b\u6570\u636e\u3002\u8fd9\u4f7f\u5f97TravelSafe API\u5373\u4f7f\u5728\u5982\u6b64\u591a\u7684\u53d8\u5316\u548c\u4e0d\u786e\u5b9a\u6027\u4e2d\u4e5f\u80fd\u63d0\u4f9b\u5b89\u5168\u3001\u7b80\u6d01\u548c\u51c6\u786e\u7684\u4fe1\u606f\u3002\u201c\u3002\n\u5f53\u88ab\u95ee\u53caTravelPerk\u81ea\u5df1\u7684\u57fa\u4e8eAPI\u7684\u5e73\u53f0(\u4e0a\u4e2a\u6708\u63a8\u51fa\u540e)\u65f6\uff0c\u4ed6\u5f62\u5bb9\u5e02\u573a\u53cd\u5e94\u201c\u60ca\u4eba\u201d\u3002\u4ed6\u8bf4\uff1a\u201c\u81ea\u4ece\u6211\u4eec\u4e09\u5468\u524d\u63a8\u51fa\u4ee5\u6765\uff0c\u6211\u4eec\u770b\u523050\u4e2a\u65b0\u7684\u5408\u4f5c\u4f19\u4f34\u5f00\u59cb\u7740\u624b\u6784\u5efa\u96c6\u6210\uff0c\u4e00\u4e2a\u4e0ePayhawk\u7684\u5b8c\u5168\u96c6\u6210\u5df2\u7ecf\u4e0a\u7ebf\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u5408\u4f5c\u4f19\u4f34\u5373\u5c06\u5b8c\u6210\u96c6\u6210\uff0c\u51c6\u5907\u4e0a\u7ebf\u8be5\u5e73\u53f0\u3002\u201d\u4ed6\u8865\u5145\u8bf4\uff1a\u201c\u6211\u4eec\u5bf9\u8fc4\u4eca\u7684\u5174\u8da3\u6c34\u5e73\u4ee5\u53ca\u6211\u4eec\u7684\u5408\u4f5c\u4f19\u4f34\u53d1\u73b0\u4f7f\u7528API\u662f\u591a\u4e48\u5bb9\u6613\u90fd\u611f\u5230\u975e\u5e38\u6ee1\u610f\u3002\u201d", "note_en": "The TravelSafe  API   is a monthly subscription product that lets travel providers integrate pandemic-related information on point to point restrictions between destinations during the booking process \u2014 with the service pulling data from official sources and local governmental websites that  TravelPerk   says is cross referenced by its own customer care agents.\n It\u2019s also calculating the risk level for travel to a particular country which it says is based on real-time analysis of the reproductive rate of the epidemic (R0).\n  The API launch follows TravelPerk\u2019s acquisition of risk management startup Albatross in  July, as the pandemic has pushed it to build out its travel risk management offerings.\n Travel startups have of course been among the  hardest hit by the pandemic, with the virus decimating demand for international trips and wiping out huge swathes of the business travel market. And, while domestic staycationing does appear to have offset some of the vacation-related demand crunch, it\u2019s still a tough outlook for business tips \u2014 as scores of information workers  Zoom into meetings from home.\n TravelPerk\u2019s response to the COVID-19 demand shock has been to focus on product development \u2014 and today\u2019s launch of a subscription API looks like an attempt to find a business opportunity amid the travel crisis, while also offering a service it hopes will support the wider industry to reboot stalled demand.\n The API has also been developed out of necessity, with TravelPerk initially putting the service together for its own customers, as it sought to provide them with the reassurance they needed to make a booking.\n Now it\u2019s opening access to the wider ecosystem of airlines, travel agents and booking platforms as a standalone product available via monthly subscription (without the need to lock into a contract).\n \u201cAccess to TravelSafe is not dependent upon being a pre-existing TravelPerk customer. The TravelSafe API is a standalone product available to any company,\u201d confirms CEO and co-founder Avi Meir. \u201cWe built this technology for our own platform initially, because we knew that in such an uncertain time our customers and travelers really needed accurate, up-to-date information. However, we quickly realised that this same need exists across the sector and that what we\u2019d built for ourselves could be really valuable across the travel industry.\u201d\n \u201cOur goal is to become the most open travel management platform, and this is the first step towards us building an ecosystem of travel services that lets other travel companies, and the industry as a whole, benefit from our technology investments,\u201d he adds.\n Meir says TravelPerk is expecting the strongest demand to come from mid-sized travel management companies \u2014 given the \u201cdeveloper-friendly\u201d nature of the product (he touts ease and speed of integration as big draws) \u2014 and also because the content is \u201cunique to TravelSafe and updated in real-time\u201d. (That said, when we ask about the risk scoring element he confirms the information the TravelSafe API offers is \u201can aggregation of the best data and information available, rather than our subjective assessment\u201d.)\n \u201cThis is vital given the pace of change in the travel industry at the moment,\u201d he adds.\n Keeping travel guidance up-to-date with a highly volatile pandemic that\u2019s complicated by a lack of access to data (and/or good quality data) about how the virus is spreading in different regions is clearly a major challenge.\n Nonetheless Meir reckons technology can help an inherently uncertain situation via tools that collate and surface the best of the information that\u2019s out there. (He also disputes there\u2019s any tension in a travel company offering risk assessment advice on travel, arguing its incentives are aligned with ensuring safe travel.)\n \u201cWe cannot improve the quality or the accuracy of the data that exists on Covid-19 globally, but we can make it much easier for travelers to access and understand the information that is available,\u201d says Meir. \u201cCurrently, travelers are really struggling to find clear, digestible, and accurate information on the rules that apply to them. People often have to read multiple articles and go to many different sources just to understand what the local guidelines are, the risk-level, whether they must quarantine upon return and so on.\n \u201cTo solve this problem, we invested in developing advanced information processing tools, automated daily updates of risk levels using R-rates computation, and internal tools to facilitate the checking and updating of this data by our policy analysts. This allows the TravelSafe API to offer safe, concise, and accurate information even amongst so much change and uncertainty.\u201d\n Asked about TravelPerk\u2019s own API-based platform \u2014 following the launch  last month \u2014 he describes the market response as \u201cphenomenal\u201d. \u201cSince we launched three weeks ago, we saw 50 new partners reach out to begin building integrations, one full integration with Payhawk went live, and a number of other partners coming close to finishing their integration and getting ready to go live with the platform,\u201d he says, adding: \u201cWe\u2019re really pleased with both the level of interest so far and how easy our partners have found it to use the API.\u201d", "posttime": "2020-10-26 16:10:27", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u63a8\u51fa,launches,\u65c5\u884c", "title": "\nTravelPerk\u63a8\u51fa\u65b0\u51a0\u80ba\u708e\u9650\u4ee4\u63a5\u53e3", "title_en": "\n\t\t\t\tTravelPerk launches an API for COVID-19 restrictions\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/10/26/travelperk-launches-an-api-for-covid-19-restrictions/", "via": "", "real_tags": ["\u63a8\u51fa", "launches", "\u65c5\u884c"]}]