[{"category": "", "categoryclass": "", "imagename": "3d929c57c8191d10d1ec3ea9db2c62ca.png", "infoid": 1072064, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eca\u5929\u8bfb\u4e86\u4e00\u4e9b\u5173\u4e8e\u4e00\u5bb6\u5927\u578b\u79d1\u6280\u516c\u53f8\u8ba1\u5212\u5b9e\u65bd\u4e00\u4e2a\u65b0\u7cfb\u7edf\u6765\u81ea\u52a8\u68c0\u6d4b\u548c\u62a5\u544a\u7528\u6237\u7167\u7247\u4e2d\u7684 CSAM \u7684\u6587\u7ae0\u3002\u603b\u7684\u6765\u8bf4\uff0c\u4ed6\u4eec\u5728 12 \u9875\u6280\u672f\u6458\u8981\u4e2d\u63cf\u8ff0\u7684\u7cfb\u7edf\u4f3c\u4e4e\u8bbe\u8ba1\u5f97\u5f88\u597d\uff0c\u5e76\u4e14\u53ef\u80fd\u5c3d\u53ef\u80fd\u63a5\u8fd1\u771f\u6b63\u7684\u9690\u79c1\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u5185\u5bb9\u76d1\u89c6\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u5f53\u6211\u542c\u5230\u5173\u4e8e\u7aef\u5230\u7aef\u52a0\u5bc6\u7684\u4f8b\u5916\u60c5\u51b5\u65f6\uff0c\u6211\u5fc3\u4e2d\u7684\u9ed1\u5ba2\u4e0d\u7981\u611f\u5230\u6709\u70b9\u60ca\u614c\uff08\u5e76\u4e0d\u662f\u8bf4\u4ed6\u4eec\u7684\u7167\u7247\u5b58\u50a8\u88ab\u5ba3\u4f20\u4e3a\u7aef\u5230\u7aef\u52a0\u5bc6\u5f00\u59cb\uff09\u4e0e\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u6280\u672f\u6982\u8ff0\u786e\u5b9e\u8bf4\u6240\u6709\u7167\u7247\u90fd\u4f7f\u7528\u7528\u6237\u8bbe\u5907\u968f\u673a\u751f\u6210\u7684 - \u9608\u503c\u53ef\u7834\u89e3 - \u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\uff09\u3002\u56e0\u6b64\uff0c\u6211\u6765\u200b\u200b\u5230\u8fd9\u91cc\u6982\u8ff0\u6211\u8ba4\u4e3a\u5bf9\u8be5\u7cfb\u7edf\u7684\u5bc6\u7801\u5f3a\u5ea6/\u9690\u79c1\u4fdd\u8bc1\u6700\u73b0\u5b9e\u7684\u653b\u51fb\uff0c\u5e76\uff08\u5e0c\u671b\uff09\u4e86\u89e3\u6211\u4e3a\u4ec0\u4e48\u9519\u4e86\u6216\u6211\u5ffd\u7565\u4e86\u4ec0\u4e48\u3002\u5047\u8bbe\u8fd9\u5bb6\u516c\u53f8\u66fe\u7ecf\u906d\u53d7\u8fc7\u6570\u636e\u6cc4\u9732\uff1a\u8fd9\u79cd\u60c5\u51b5\u5f00\u59cb\u65f6\u4e0d\u592a\u53ef\u80fd\u53d1\u751f\uff0c\u4f46\u5e76\u975e\u95fb\u6240\u672a\u95fb\u3002\u7531\u4e8e\u8fd9\u6b21\u6570\u636e\u6cc4\u9732\uff0c\u8bb8\u591a\u7528\u6237\u7684\u7167\u7247\uff08\u52a0\u5bc6\u683c\u5f0f\uff09\u88ab\u6cc4\u9732\u3002\u5982\u679c\u771f\u6b63\u7684\u7aef\u5230\u7aef\u52a0\u5bc6\u5230\u4f4d\uff0c\u8fd9\u4e0d\u4f1a\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u9690\u79c1\u95ee\u9898\uff0c\u56e0\u4e3a\u6240\u6709\u7167\u7247\u90fd\u5c06\u4f7f\u7528\u53ea\u6709\u6700\u7ec8\u7528\u6237\u8bbe\u5907\u77e5\u9053\u7684\u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u89e3\u5bc6\u4e92\u8054\u7f51\u3002\u7136\u800c\uff0c\u5728\u8fd9\u4e2a\u65b0\u7cfb\u7edf\u4e2d\uff0c\u6211\u7684\u7406\u89e3\u662f\u7167\u7247\uff0c\u6216\u8005\u81f3\u5c11\u662f\u5b83\u4eec\u7684\u89c6\u89c9\u884d\u751f\u7269\uff08\u6211\u627e\u4e0d\u5230\u5b9a\u4e49\uff0c\u867d\u7136\u6211\u5047\u8bbe\u5b83\u7c7b\u4f3c\u4e8e\u7f29\u7565\u56fe\uff09\u88ab\u52a0\u5bc6\u4e24\u6b21\uff0c\u5916\u5c42\u88ab\u52a0\u5bc6\u901a\u8fc7\u4ece\u7167\u7247\u7684 NeuralHash \u6d3e\u751f\u7684\u5bc6\u94a5\u3002 NeuralHash \u88ab\u63cf\u8ff0\u4e3a\u4e00\u79cd\u6563\u5217\u7b97\u6cd5\uff0c\u80fd\u591f\u4e3a\u540c\u4e00\u56fe\u50cf\u63d0\u4f9b\u76f8\u540c\u7684\u6563\u5217\uff0c\u5373\u4f7f\u8be5\u56fe\u50cf\u7ecf\u8fc7\u88c1\u526a\u3001\u8c03\u6574\u5927\u5c0f\u3001\u989c\u8272\u8c03\u6574\u3001\u538b\u7f29\u7b49\u3002\u6563\u5217\u7684\u4e3b\u8981\u76ee\u7684\u662f\u786e\u4fdd\u76f8\u540c\u548c\u89c6\u89c9\u4e0a\u76f8\u4f3c\u7684\u56fe\u50cf\u4ea7\u751f\u76f8\u540c\u7684\u54c8\u5e0c\u503c\uff0c\u800c\u5f7c\u6b64\u4e0d\u540c\u7684\u56fe\u50cf\u4ea7\u751f\u4e0d\u540c\u7684\u54c8\u5e0c\u503c\u3002\u4f8b\u5982\uff0c\u7ecf\u8fc7\u8f7b\u5fae\u88c1\u526a\u6216\u8c03\u6574\u5927\u5c0f\u7684\u56fe\u50cf\u5e94\u88ab\u89c6\u4e3a\u4e0e\u5176\u539f\u59cb\u56fe\u50cf\u76f8\u540c\u5e76\u5177\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u3002\u8fd9\u5728\u7406\u8bba\u4e0a\u5f88\u68d2\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u7528\u6237\u62cd\u6444\u7684\u6240\u6709\uff08\u53ef\u80fd\u662f\u552f\u4e00\u7684\uff09\u7167\u7247\u90fd\u5c06\u4f7f\u7528\u5f3a\u5927\u7684\u3001\u72ec\u7279\u7684\u79d8\u5bc6\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ee5\u786e\u4fdd\u5b83\u4eec\u7684\u79c1\u5bc6\u6027\u548c\u5b89\u5168\u6027\u3002\n\u4f46\u662f\uff0c\u5f53\u7528\u6237\u5b58\u50a8\u4e0d\u552f\u4e00\u7684\u7167\u7247\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u4f8b\u5982\u4e00\u4e2a\u6d41\u884c\u7f51\u7ad9\u7684\u622a\u56fe\uff0c\u4e00\u4e2a\u5728\u4e92\u8054\u7f51\u4e0a\u6d41\u4f20\u7684\u6a21\u56e0\u7b49\u7b49\uff1f\u5982\u4f55\u963b\u6b62\u653b\u51fb\u8005\u751f\u6210\u6d41\u884c\u6a21\u56e0\u7684 NeuralHash\uff0c\u5bfc\u51fa\u5bc6\u94a5\uff0c\u7136\u540e\u66b4\u529b\u7834\u89e3\u6cc4\u9732\u7684\u6570\u636e\u76f4\u5230\u6210\u529f\u89e3\u5bc6\u6761\u76ee\uff0c\u4ece\u800c\u9a8c\u8bc1\u7279\u5b9a\u7528\u6237\u4e91\u7167\u7247\u5e93\u4e2d\u7684\u5185\u5bb9\uff0c\u5e76\u964d\u4f4e\u4ed6\u4eec\u7684\u9690\u79c1\u7ea7\u522b\uff1f\u6216\u8005\uff0c\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u653b\u51fb\u8005\u559c\u6b22\u82f9\u679c\uff0c\u5e76\u4e14\u771f\u7684\u975e\u5e38\u60f3\u627e\u5230\u82f9\u679c\u7684\u7167\u7247\u3002\u662f\u4ec0\u4e48\u963b\u6b62\u4ed6\u4eec\u8ba9 AI \u751f\u6210\u51e0\u767e\u4e07\u5f20\u82f9\u679c\u7167\u7247\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u54c8\u5e0c\u5904\u7406\uff0c\u83b7\u53d6\u5bc6\u94a5\uff0c\u7136\u540e\u66b4\u529b\u7834\u89e3\u53ef\u80fd\u5f88\u5927\u7684\u6cc4\u6f0f\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u9879\uff1f\u4e00\u4e2a\u82f9\u679c\u4e0d\u53ef\u80fd\u6709\u90a3\u4e48\u591a\u6392\u5217\uff0c\u5bf9\u5427\uff1f\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u60a8\u4e0d\u4f1a\u627e\u5230\u6240\u6709\u7684\u82f9\u679c\u7167\u7247\uff0c\u4f46\u6211\u8ba4\u4e3a\u60a8\u81f3\u5c11\u80fd\u591f\u83b7\u5f97\u4e00\u4e9b\u53ef\u89e3\u5bc6\u7684\u5339\u914d\u9879\u3002\u8be5\u516c\u53f8\u672c\u8eab\u751a\u81f3\u5728\u5176\u4e00\u7bc7\u8bba\u6587\u4e2d\u900f\u9732\uff0c\u5728\u5339\u914d\u65f6\u51fa\u73b0\u8bef\u62a5\u7684\u53ef\u80fd\u6027\u975e\u96f6\uff0c\u56e0\u6b64\u4ed6\u4eec\u5f15\u5165\u4e86\u9608\u503c\u79d8\u5bc6\u5171\u4eab\uff08\u5373\u9700\u8981\u5bf9\u5176\u201c\u5df2\u77e5\u9519\u8bef\u201d\u8fdb\u884c\u591a\u6b21\u5339\u914d\u201c\u5728\u5176\u5185\u90e8\u52a0\u5bc6\u7ea7\u522b\u88ab\u7834\u574f\u4e4b\u524d\u6570\u636e\u5e93......\u63a5\u4e0b\u6765\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\uff0c\u4ee5\u5c06\u8bef\u62a5\u7684\u53ef\u80fd\u6027\u964d\u4f4e\u5230\u4e07\u4ebf\u5206\u4e4b\u4e00\u3002\u5bf9\u6211\u800c\u8a00\uff0c\u7ed9\u5b9a\u7684\u7167\u7247\u58f0\u97f3\u5728\u53ef\u66b4\u529b\u7834\u89e3\u8303\u56f4\u5185\uff0c\u4efb\u4f55\u51fa\u73b0\u8bef\u62a5\u5339\u914d\u7684\u53ef\u80fd\u6027\u90fd\u5927\u5927\u4f4e\u4e8e\u4e07\u5206\u4e4b\u4e00\uff0c\u5c24\u5176\u662f\u5982\u679c\u60a8\u5df2\u7ecf\u77e5\u9053\u8981\u67e5\u627e\u7684\u7167\u7247\u7c7b\u578b\u3002\u6700\u540e\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u9608\u503c\u52a0\u5bc6\u7684\u5185\u5c42\uff0c\u5b83\u57fa\u672c\u4e0a\u8981\u6c42\u5728\u6784\u5efa\u89e3\u5bc6\u5185\u5c42\u7684\u5bc6\u94a5\u4e4b\u524d\u5148\u89e3\u5bc6\u591a\u5f20\u7167\u7247\u7684\u5916\u5c42\u3002\u4f46\u662f\u518d\u4e00\u6b21\uff0c\u6839\u636e\u9608\u503c\u5927\u5c0f\uff08\u5fc5\u987b\u975e\u5e38\u4f4e\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5c0f\u4e8e\u67d0\u4eba\u53ef\u80fd\u62e5\u6709\u7684\u5b9e\u9645 CSAM \u6570\u91cf\uff09\uff0c\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u4e00\u4e2a\u5927\u969c\u788d\uff1a\u60a8\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u4f8b\u5982\uff0c\u5728\u6574\u4e2a\u4e91\u7167\u7247\u5b58\u50a8\u5e93\u4e2d\u5b58\u50a8\u4e86 10 \u4e2a\u5e38\u89c1\u6a21\u56e0\u7684\u7528\u6237\uff0c\u73b0\u5728\u60a8\u5df2\u7ecf\u6784\u5efa\u4e86\u8be5\u5bc6\u94a5\u3002\u6839\u636e\u8be5\u8bba\u6587\uff0c\u5728\u7b2c\u4e00\u5c42\u52a0\u5bc6\u4e2d\uff0c\u7528\u6237\u7684\u6240\u6709\u7167\u7247\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u94a5\u3002\u5f52\u6839\u7ed3\u5e95\uff0c\u6211\u770b\u5230\u4e86\u8be5\u7cfb\u7edf\u5728\u53d1\u751f\u6570\u636e\u6cc4\u9732\u4e8b\u4ef6\u65f6\u7684\u5b89\u5168\u548c\u9690\u79c1\u4fdd\u8bc1\uff0c\u4e3b\u8981\u95ee\u9898\u662f\uff1aNeuralHash\u3002\u5982\u679c NeuralHash \u5177\u6709\u8db3\u591f\u9ad8\u7684\u8bef\u62a5\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fdb\u884c\u9006\u5411\u5de5\u7a0b\u6216\u6cc4\u9732\u6216\u516c\u5f00\uff08\u5982\u679c\u5c1a\u672a\u516c\u5f00\uff09\uff0c\u90a3\u4e48\u8fd9\u5bb6\u5927\u578b\u79d1\u6280\u516c\u53f8\u80fd\u5426\u771f\u6b63\u4fdd\u8bc1\u5176\u7528\u6237\u7684\u79c1\u4eba\u7167\u7247\u5c06\u65e0\u6761\u4ef6\u4fdd\u7559\u79c1\u4eba\u7684\uff0c\u53ea\u8981\u4ed6\u4eec\u4e0d\u662f CSAM\uff1f\u6211\u5ffd\u7565\u4e86\u54ea\u4e9b\u52a0\u5bc6\u4fdd\u62a4\uff0c\u4f7f\u6211\u4e0a\u9762\u63cf\u8ff0\u7684\u653b\u51fb\u53d8\u5f97\u4e0d\u53ef\u80fd\uff1f\u6211\u9519\u8fc7\u4e86\u4ec0\u4e48\uff1f\u4f60\u770b\u5230\u4efb\u4f55\u5176\u4ed6\u6f5c\u5728\u7684\u7f3a\u9677\u5417\uff1f\u66f4\u65b0\uff1a\u6211\u4e0d\u786e\u5b9a\u662f\u5426\u53ef\u4ee5\u63a5\u53d7\u6216\u4e0d\u5177\u4f53\u547d\u540d\u516c\u53f8\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u8c28\u614e\u884c\u4e8b\uff0c\u4e0d\u8fd9\u6837\u505a\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u6211\u786e\u5b9e\u770b\u5230\u4e00\u4e9b\u8bc4\u8bba\u8981\u6c42\u63d0\u4f9b\u6765\u6e90\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u3002\u6211\u5e0c\u671b\u8fd9\u6709\u5e2e\u52a9\uff01", "note_en": "I was doing some reading today about a major tech company planning to implement a new system for automatically detecting and reporting CSAM in users&#39; photos. Overall, the system as described in their 12-page technical summary seems to be designed quite well, and may be as close as you can get to true privacy, while still allowing for content surveillance.\n That being said, the hacker in me can&#39;t help but feel a little alarmed when it hears about exceptions to what could otherwise be end-to-end encryption (not that their photo storage is advertised as end-to-end encrypted to begin with, however their technical overview does say that all of the photos are encrypted with a\u2014 threshold breakable\u2014key randomly generated by the user&#39;s device). Therefore, I came here to outline what I see as the most realistic attack on the cryptographic strength/privacy guarantees of this system, and to (hopefully) learn why I am wrong or what I have overlooked.\n  Let&#39;s say that this company ever suffers a data breach: an unlikely situation to begin with, but not unheard of. As a result of this data breach, many users&#39; photos (in encrypted format) are leaked. If true end-to-end encryption were in place, this would not be a major privacy concern, as all photos would be encrypted with a key known only to the end users&#39; devices, and therefore would not be realistically decryptable by anyone on the internet.\n In this new system, however, it is my understanding that photos, or at least their  visual derivatives (which I could not find a definition for though  I&#39;m assuming is similar to thumbnails), are encrypted twice, with the outer layer being encrypted by a key derived from the NeuralHash of the photo.\n NeuralHash is described as a hashing algorithm capable of providing the same hash for the same image, even after that image has undergone cropping, resizing, color adjustments, compression, etc.\n  The main purpose of the hash is to ensure that identical and visually similar images result in the same hash, and images that are different from one another result in different hashes. For example, an image that has been slightly cropped or resized should be considered identical to its original and have the same hash.\n This is great in theory, because it means that all (presumably unique) photos taken by users will be encrypted with strong, unique secrets, keeping them private and secure.\n But, what happens when a user stores a photo that isn&#39;t unique? For example a screenshot from a popular website, a meme circulating the internet, etc.? What&#39;s to stop an attacker from generating a NeuralHash of popular memes, deriving a key, then bruteforcing the leaked data until it successfully decrypts an entry, thus verifying the contents within a specific user&#39;s cloud photo library, and degrading their level of privacy?\n Or, for another example, let&#39;s say the attacker  loves apples, and really, really wants to find photos of apples. What&#39;s to stop them from having an AI generate a few million photos of an apple, hashing them, deriving keys, and then bruteforcing the presumably large leak until it finds a match? There can&#39;t be  that many permutations of an apple, can there? Like sure, you&#39;re not going to find all of the apple photos, but I would think that you&#39;d be able to at least get  some decryptable matches.\n This company itself even reveals in one of its papers that there is a non-zero chance of false positives when it comes to matches, and that they&#39;ve therefore introduced threshold secret sharing (i.e. needing to have multiple matches to their &#34;known-bad&#34; database before their inner level of encryption can be broken... more on that next), to reduce the chance of false positives down to one in a trillion. A significantly less than a one in a trillion chance of having a false positive match on any, given photo sounds within bruteforceable range to me, especially if you already know what type of photo you&#39;re looking for.\n On a final note, there is an inner layer of threshold encryption which basically requires that the outer layers of multiple photos be decrypted before the key to decrypt the inner layer can be constructed. But once again, depending on the threshold size (which must be quite low, as it needs to be less than a realistic amount of CSAM that someone could have), it doesn&#39;t seem like a large obstacle: you just need to find a user who has, say, ten common memes stored in their entire cloud photo storage library, and you&#39;ve now constructed that key. According to the paper, that same key is used across  all of a user&#39;s photos for that first layer of encryption.\n At the end of the day, I see the security and privacy guarantees of this system in the event of a data breach hanging onto one, main thing: the NeuralHash.\n If the NeuralHash has a high-enough false positive rate, and can be reverse engineered or gets leaked or is made public (if it isn&#39;t already), then can this major tech company truly guarantee its users that their private photos will unconditionally remain private, as long as they&#39;re not CSAM? What cryptographic protections have I overlooked, that make an attack like the one I described above impossible? What am I missing? Do you see any other potential flaws?\n  Update: I was not sure if it were considered acceptable or not to specifically name the company, so I decided to err on the side of caution and not do so. That being said, I did see a few comments asking for the source, so  here it is. I hope this helps!", "posttime": "2021-08-08 12:50:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u89e3,apple,csam,\u7167\u7247", "title": "Apple \u7684\u65b0 CSAM \u4fdd\u62a4\u63aa\u65bd\u53ef\u80fd\u4f1a\u4f7f iCloud \u7167\u7247\u53d8\u5f97\u53ef\u66b4\u529b\u7834\u89e3", "title_en": "Apple's New CSAM Protections May Make iCloud Photos Bruteforceable", "transed": 1, "url": "https://crypto.stackexchange.com/questions/93423/how-unique-is-a-neuralhash", "via": "", "real_tags": ["\u7834\u89e3", "apple", "csam", "\u7167\u7247"]}, {"category": "", "categoryclass": "", "imagename": "3091a8bc82c4b4fe5de7d661c8e1aabc.png", "infoid": 1072063, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bb8\u591a\u6700\u8fd1\u7684\u534f\u8bae\uff08\u4f8b\u5982\u52a0\u5bc6 DNS \u548c HTTPS\uff09\u5bf9 Web \u67b6\u6784\u7684\u5173\u952e\u90e8\u5206\u8fdb\u884c\u52a0\u5bc6\uff0c\u5426\u5219\u7a83\u542c\u8005\u53ef\u80fd\u4f1a\u5229\u7528\u8fd9\u4e9b\u90e8\u5206\u6765\u63a8\u65ad\u7528\u6237\u7684\u6570\u636e\u3002\u4f46\u52a0\u5bc6\u4e0d\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u9690\u79c1\uff0c\u5c24\u5176\u662f\u5728\u5143\u6570\u636e\u65b9\u9762\u3002 DNS-over-HTTPS (DoH) \u6216\u52a0\u5bc6\u670d\u52a1\u5668\u540d\u79f0\u6307\u793a (ESNI) \u7b49\u65b0\u5174\u6807\u51c6\u53ef\u4ee5\u4fdd\u62a4 DNS \u67e5\u8be2\u548c TLS SNI \u6269\u5c55\u7684\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u67e5\u770b\u6e90\u81ea\u7528\u6237\u8bbe\u5907\u7684\u6d41\u91cf\u4e0a\u7684\u76ee\u6807 IP \u5730\u5740\u6765\u786e\u5b9a\u7528\u6237\u6b63\u5728\u8bbf\u95ee\u54ea\u4e9b\u7f51\u7ad9\uff0c\u8fd9\u4e9b IP \u5730\u5740\u4f5c\u4e3a TLS \u63e1\u624b\u7684 ClientHello \u7684\u4e00\u90e8\u5206\u53ef\u89c1\u3002\u8be5\u5143\u6570\u636e\u53ef\u4ee5\u88ab\u591a\u4e2a\u4ee3\u7406\u5229\u7528\u548c\u8d27\u5e01\u5316\uff0c\u4ee5\u5206\u6790\u548c\u5b9a\u4f4d\u7528\u6237\u8fdb\u884c\u5e7f\u544a\u3002\u6211\u4eec\u5728\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u8fdb\u884c\u4e86\u4e00\u9879\u6d4b\u91cf\u7814\u7a76\uff0c\u4ee5\u4e86\u89e3\u653b\u51fb\u8005\u662f\u5426\u53ef\u4ee5\u4ec5\u4f7f\u7528\u6765\u81ea\u7528\u6237\u8bbe\u5907\u7684\u4e00\u7ec4 IP \u5730\u5740\u63a8\u65ad\u51fa\u7528\u6237\u5c1d\u8bd5\u8fde\u63a5\u7684\u7f51\u7ad9\u3002\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e Chromium \u6784\u5efa\u7684\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684\u7f51\u7edc\u722c\u866b MIDA\uff0c\u5bf9\u53c2\u4e0e\u5448\u73b0 Alexa \u524d 100 \u4e07\u4e2d\u6700\u53d7\u6b22\u8fce\u7f51\u7ad9\u7684\u6240\u6709\u57df\u6267\u884c DNS \u89e3\u6790\u3002\u7531\u4e8e\u5728\u8bf7\u6c42\u7f51\u7ad9\u65f6\u6267\u884c\u7684\u5b50\u67e5\u8be2\uff0c\u6211\u4eec\u8fd8\u8003\u8651\u4e86\u4ece\u4e0d\u540c Web \u670d\u52a1\u5668\u52a0\u8f7d\u7684\u51e0\u4e2a\u8d44\u6e90\u3002\u8054\u7cfb\u7684\u6240\u6709\u8fd9\u4e9b IP \u7684\u96c6\u5408\u79f0\u4e3a\u7f51\u7ad9\u7684\u9875\u9762\u52a0\u8f7d\u6307\u7eb9 (PLF)\u3002\u6211\u4eec\u91c7\u7528\u4e86\u4e00\u4e2a\u5bf9\u624b\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u65e8\u5728\u901a\u8fc7\u6536\u96c6\u5404\u79cd\u5019\u9009\u57df\u7684\u6b63\u5411\u6620\u5c04\u6765\u6062\u590d\u57df\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528\u7b54\u6848\u6765\u63a8\u65ad\u7ed9\u5b9a IP \u7684\u53cd\u5411\u6620\u5c04\u3002\n\u56fe 2 \u2014 PLF \u5982\u4f55\u89e3\u91ca\u5728 Web \u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u4e0a\u52a0\u8f7d\u7684\u591a\u4e2a\u8d44\u6e90\u7684\u56fe\u5f62\u8868\u793a\u3002\u514d\u8d23\u58f0\u660e\uff1a\u4ee5\u4e0a\u7f51\u7ad9\u4ec5\u7528\u4f5c\u793a\u4f8b\u3002\u5bf9\u4e8e\u6211\u4eec\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a IP \u5730\u5740\uff0c\u6211\u4eec\u8ba1\u7b97\u4e86\u6620\u5c04\u5230\u5b83\u7684\u57df\u6570\u91cf\u4f5c\u4e3a\u5176\u533f\u540d\u96c6\u3002\u6211\u4eec\u6570\u636e\u96c6\u4e2d\u7684\u4e00\u5c0f\u90e8\u5206 IP \u5730\u5740 (47.6%) \u5bf9\u5e94\u4e8e\u5355\u4e2a\u57df\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u57df\uff0c\u653b\u51fb\u8005\u77e5\u9053\u7528\u6237\u53ef\u80fd\u67e5\u627e\u7684\u6f5c\u5728\u5730\u5740\u96c6\u5e76\u80fd\u591f\u5bf9\u5176\u6267\u884c\u524d\u5411\u67e5\u627e\uff0c\u52a0\u5bc6 DNS \u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u597d\u5904\u3002\u5927\u7ea6 20% \u7684\u8bf7\u6c42\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u552f\u4e00\u6807\u8bc6\uff1b\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cs (XHR) \u4e0d\u592a\u53ef\u80fd\u6620\u5c04\u5230\u7ad9\u70b9\u552f\u4e00\u7684 IP \u5730\u5740\uff0c\u800c\u6837\u5f0f\u8868\u548c\u56fe\u50cf\u66f4\u6709\u53ef\u80fd\u3002\u56fe 3 \u2014 \u6b64\u56fe\u5c06\u751f\u6210\u7684\u533f\u540d\u96c6\u7684\u6570\u91cf\u6620\u5c04\u5230\u5b83\u4eec\u7684\u5927\u5c0f\uff0c\u8868\u660e\u51e0\u4e4e\u4e00\u534a\u7684\u533f\u540d\u96c6\u7684\u5927\u5c0f\u4e3a 1\uff0c\u56e0\u6b64\u53ef\u4ee5\u552f\u4e00\u5730\u6620\u5c04\u5230\u7f51\u7ad9\u3002\u6211\u4eec\u6570\u636e\u96c6\u4e2d\u5927\u7ea6 68% \u7684 IP \u662f\u5355\u4e2a\u7ad9\u70b9\u72ec\u6709\u7684\uff0c\u603b\u5171\u6709 402,524 (42.6%) \u4e2a\u7ad9\u70b9\u4f7f\u7528\u81f3\u5c11\u4e00\u79cd\u8d44\u6e90\uff0c\u5176\u57df\u6620\u5c04\u5230\u7ad9\u70b9\u552f\u4e00 IP \u5730\u5740\u3002\u5927\u591a\u6570\u7f51\u7ad9 (95.7%) \u90fd\u6709\u552f\u4e00\u7684 PLF\uff0c\u8fd9\u8868\u660e\u5b58\u5728\u4ec5\u4ece\u6240\u8054\u7cfb\u7684 IP \u5730\u5740\u5217\u8868\u4e2d\u8bc6\u522b\u51fa\u7528\u6237\u6b63\u5728\u8bbf\u95ee\u8be5\u7f51\u7ad9\u7684\u98ce\u9669\u3002\u56fe 4 - \u5982\u4f55\u5c06\u9875\u9762\u52a0\u8f7d\u6307\u7eb9\u7528\u4f5c\u7b7e\u540d\uff0c\u901a\u8fc7\u7b80\u5355\u5730\u67e5\u770b IP \u5730\u5740\u6765\u8bc6\u522b\u8bf7\u6c42\u7684\u7f51\u9875\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff0c\u5728 Web \u6d4f\u89c8\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0cDNS \u548c SNI \u9690\u79c1\u5bf9\u77e5\u9053\u7528\u6237\u53ef\u80fd\u8bbf\u95ee\u7684\u4e00\u7ec4\u5408\u7406\u7ad9\u70b9\uff08\u5373\u4f7f\u8be5\u7ec4\u975e\u5e38\u5927\uff09\u5e76\u4e14\u6267\u884c\u524d\u5411\u67e5\u627e\u4ee5\u63a8\u65ad\u7684\u5bf9\u624b\u63d0\u4f9b\u4e86\u6709\u9650\u7684\u4fdd\u62a4\u4e0e\u7ed9\u5b9a IP \u5730\u5740\u5173\u8054\u7684\u57df\u540d\u548c\u7ad9\u70b9\u3002\n\u771f\u5b9e\u4e16\u754c\u7684\u63a8\u7406\u4e0e\u6211\u4eec\u7684\u5c01\u95ed\u4e16\u754c\u5047\u8bbe\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u5bf9\u624b\u53ef\u4ee5\u4f7f\u7528\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u96c6\u3002\u5728\u6211\u4eec\u7684\u7814\u7a76\u4e2d\u53ef\u80fd\u770b\u8d77\u6765\u72ec\u4e00\u65e0\u4e8c\u7684 PLF \u7b7e\u540d\u5b9e\u9645\u4e0a\u53ef\u80fd\u5c5e\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u7f51\u7ad9\uff1b\u8fd9\u662f\u4e50\u89c2\u7684\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\u6620\u5c04\u5230\u552f\u4e00\u57df\u7684 IP \u5730\u5740\uff0c\u8fd9\u4e9b IP \u5730\u5740\u53ef\u80fd\u7528\u4e8e\u552f\u4e00\u5730\u914d\u7f6e\u7f51\u7ad9\u3002\u6211\u4eec\u786e\u5b9e\u53d1\u73b0\u5185\u5bb9\u5206\u53d1\u7f51\u7edc (CDN) \u901a\u8fc7\u5c06\u66f4\u591a\u57df\u5408\u5e76\u5230\u540c\u4e00 IP \u5730\u5740\u6765\u63d0\u4f9b\u989d\u5916\u4fdd\u62a4\u7684\u91cd\u8981\u673a\u4f1a\u3002 HTTP/2 \u8fde\u63a5\u5408\u5e76\u53ef\u4ee5\u6291\u5236\u6765\u81ea\u9875\u9762\u52a0\u8f7d\u8ddf\u8e2a\u7684\u8fde\u63a5\u5e76\u6709\u52a9\u4e8e\u6539\u5584\u7528\u6237\u9690\u79c1\u3002\u8981\u4e86\u89e3\u6709\u5173\u6211\u4eec\u5de5\u4f5c\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u89c2\u770b\u6211\u4eec\u5728 2019 \u5e74\u5e94\u7528\u7f51\u7edc\u7814\u7a76\u7814\u8ba8\u4f1a\u4e0a\u7684\u6f14\u8bb2\u3002 Simran Patil \u662f\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u5384\u5df4\u7eb3\u9999\u69df\u5206\u6821\u8ba1\u7b97\u673a\u5de5\u7a0b\u4e13\u4e1a\u7684\u7855\u58eb\u751f\u3002\u5979\u662f\u7531\u4f0a\u5229\u8bfa\u4f0a\u5dde\u5b89\u5168\u548c\u9690\u79c1\u7814\u7a76\u4e2d\u5fc3\u7684\u987e\u95ee Nikita Borisov \u6559\u6388\u9886\u5bfc\u7684 Hatswitch \u7814\u7a76\u5c0f\u7ec4\u7684\u6210\u5458\u3002", "note_en": "A number of recent protocols such as Encrypted DNS and HTTPS encrypt critical parts of the web architecture, which can otherwise be exploited by eavesdroppers to infer users\u2019 data. But encryption may not necessarily guarantee privacy, especially when it comes to metadata.\n Emerging standards such as DNS-over-HTTPS (DoH) or Encrypted Server Name Indication (ESNI) can protect the content of both DNS queries and the TLS SNI extensions. However, it might still be possible to determine which websites users are visiting by simply looking at the destination IP addresses on the traffic originating from users\u2019 devices, which are visible as a part of the ClientHello of the TLS Handshake.\n This metadata can be exploited and monetized by several agents to profile and target the user for advertising.\n   We, at the University of Illinois, did a measurement study to understand whether an adversary can deduce the websites a user is trying to connect to, using a set of IP addresses originating from the user\u2019s device alone.\n Using a highly configurable web crawler built on top of Chromium called MIDA, we performed DNS resolution on all domains involved in rendering the most popular websites listed in the Alexa Top 1 Million.\n   We also accounted for several resources that get loaded from different web servers due to the sub-queries performed when a website is requested. The set of all these IPs contacted is referred to as the Page Load Fingerprint (PLF) of the website.\n We adopted the model of an adversary who aims to recover domain information by collecting forward mappings of various candidate domains, and then using the answers to infer the reverse mapping of a given IP.\n  Figure 2 \u2014 A graphical representation of how a PLF accounts for the several resources loaded on part of a web request. Disclaimer: The above website is used just as an example.\n  For each IP address in our dataset we calculated the number of domains that map to it as its anonymity set.\n A slight minority of the IP addresses in our data set (47.6%) correspond to a single domain. For these domains, where the adversary knows the set of potential addresses a user may look up and is able to perform forward lookups on them, encrypted DNS provides little to no benefit. About 20% of the requests are uniquely identifying in this way; notably,  s (XHRs) are less likely to map to site-unique IP addresses whereas stylesheets and images are more likely.\n  Figure 3 \u2014 This graph maps the number of anonymity sets generated to their sizes indicating that almost half the anonymity sets are of size 1 and thus, can be uniquely mapped to a website.\n Around 68% of the IPs in our data set are unique to a single site, and a total of 402,524 (42.6%) sites use at least one resource whose domain maps to a site-unique IP address. The majority of websites (95.7%) have a unique PLF, suggesting there is a risk of identifying that a user is visiting the site solely from a list of contacted IP addresses.\n  Figure 4 \u2014\u00a0How a page load fingerprint can be used as a signature to identify the webpage that was requested by simply looking at the IP addresses.\n We thus conclude that, in the context of web browsing, DNS and SNI privacy offers limited protection against an adversary who knows a plausible set of sites a user might visit (even if the set is quite large), and who performs forward lookups to infer the domain names and sites associated with given IP addresses.\n The real-world inference will be slightly different from our closed-world assumption because a wider dataset will be available to the adversary. It can happen that a PLF signature that might seem unique in our study can actually belong to two different websites; it\u2019s optimistic but we have identified IP addresses that have mappings to unique domains and these can potentially be used to uniquely profile websites.\n We do identify a significant opportunity for content distribution networks (CDNs) to offer additional protection by coalescing more domains onto the same IP address. HTTP/2 connection coalescing can suppress connections from the page load trace and contribute to improved user privacy.\n To learn more about our work watch our presentation at the  Applied Networking Research Workshop 2019.\n  Simran Patil is a Masters student in Computer Engineering at the University of Illinois at Urbana-Champaign. She is a part of the Hatswitch research group led by her advisor, Prof. Nikita Borisov, at Security and Privacy Research at Illinois.", "posttime": "2021-08-08 12:50:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5730\u5740,ip", "title": "\u60a8\u53ef\u4ee5\u4ece IP \u5730\u5740\u4e2d\u5b66\u5230\u4ec0\u4e48\uff1f (2019)", "title_en": "What can you learn from an IP address? (2019)", "transed": 1, "url": "https://blog.apnic.net/2019/08/23/what-can-you-learn-from-an-ip-address/", "via": "", "real_tags": ["\u5730\u5740", "ip"]}, {"category": "", "categoryclass": "", "imagename": "f9f0713c799355395bc5d34844997c72.jpg", "infoid": 1072062, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd1\u5e74\u6765\uff0cSqills \u4ece\u94c1\u8def\u8fd0\u8425\u5546\u90a3\u91cc\u8d62\u5f97\u4e86\u6bd4\u4efb\u4f55\u5176\u4ed6\u6280\u672f\u4f9b\u5e94\u5546\u90fd\u591a\u7684\u5347\u7ea7\u5e93\u5b58\u3001\u9884\u8ba2\u548c\u7968\u52a1\u8f6f\u4ef6\u7684\u5408\u540c\u3002\u6240\u4ee5\u8fd9\u6b21\u6536\u8d2d\u662f\u6709\u9053\u7406\u7684\u3002\u897f\u95e8\u5b50\u4ea4\u901a\u5468\u56db\u8868\u793a\uff0c\u5df2\u7b7e\u7f72\u534f\u8bae\uff0c\u4ee5 6.5 \u4ebf\u7f8e\u5143\uff085.5 \u4ebf\u6b27\u5143\uff09\u6536\u8d2d\u8377\u5170\u94c1\u8def\u8f6f\u4ef6\u516c\u53f8 Sqills\u3002\u968f\u7740\u6c14\u5019\u53d8\u5316\u7684\u5f71\u54cd\u53d8\u5f97\u66f4\u52a0\u660e\u663e\uff0c\u4ee5\u53ca\u65b0\u4e00\u6ce2\u6280\u672f\u7684\u51fa\u73b0\uff0c\u8be5\u4ea4\u6613\u51f8\u663e\u4e86\u5168\u7403\u5bf9\u57ce\u9645\u94c1\u8def\u7684\u5174\u8da3\u65e5\u76ca\u6d53\u539a\u3002 Sqills \u662f\u4e00\u5bb6\u9762\u5411\u5168\u7403\u94c1\u8def\u8fd0\u8f93\u8fd0\u8425\u5546\u7684\u57fa\u4e8e\u4e91\u7684\u5e93\u5b58\u7ba1\u7406\u3001\u9884\u8ba2\u548c\u7968\u52a1\u8f6f\u4ef6\u7684\u9500\u552e\u5546\u3002\u8be5\u516c\u53f8\u6210\u7acb\u4e8e 2002 \u5e74\uff0c\u5c1a\u672a\u7b79\u96c6\u5916\u90e8\u6295\u8d44\u3002\u591a\u5e74\u6765\uff0c\u897f\u95e8\u5b50\u7684 HaCon \u90e8\u95e8\u548c Sqills \u4e00\u76f4\u5728\u4e0e Amadeus\u3001IBM \u548c SilverRail \u7b49\u5176\u4ed6\u4f9b\u5e94\u5546\u7ade\u4e89\uff0c\u4e3a\u94c1\u8def\u516c\u53f8\u63d0\u4f9b\u8fd0\u8425\u5de5\u5177\u3002\u4f46\u662f\uff0c\u5728\u5927\u6d41\u884c\u6765\u88ad\u4e4b\u524d\uff0cSqills \u5728\u6b27\u6d32\u53d6\u5f97\u4e86\u8fde\u80dc\u7684\u4e1a\u52a1\u3002\u5982\u4eca\uff0cSNCF\u3001\u7231\u5c14\u5170\u94c1\u8def\u3001Rail Delivery Group\u3001SJ\u3001Via Rail \u548c Eurostar \u7b49 33 \u5bb6\u8fd0\u8425\u5546\u4f7f\u7528\u5176\u670d\u52a1\u3002\u8be5\u516c\u53f8\u62e5\u6709 160 \u540d\u5458\u5de5\uff0c\u9884\u8ba1 2022 \u5e74\u7684\u6536\u5165\u7ea6\u4e3a 4700 \u4e07\u7f8e\u5143\uff084000 \u4e07\u6b27\u5143\uff09\u3002\u8fd9\u4ee3\u8868\u4e86 2019 \u5e74\u5927\u6d41\u884c\u524d\u7684\u589e\u957f\uff0c\u5f53\u65f6 Sqills \u4ea7\u751f\u4e86\u5927\u7ea6 2500 \u4e07\u7f8e\u5143\u7684\u6536\u5165\u3002 \u201c\u5bf9 Sqills \u7684\u6536\u8d2d\u662f\u897f\u95e8\u5b50\u5982\u4f55\u7ed3\u5408\u73b0\u5b9e\u4e16\u754c\u548c\u6570\u5b57\u4e16\u754c\u4ee5\u5e2e\u52a9\u5176\u5ba2\u6237\u5b9e\u73b0\u8f6c\u578b\u7684\u4e00\u4e2a\u5b8c\u7f8e\u4f8b\u5b50\uff0c\u201d\u897f\u95e8\u5b50\u80a1\u4efd\u516c\u53f8\u603b\u88c1\u517c\u9996\u5e2d\u6267\u884c\u5b98 Roland Busch \u8868\u793a\uff0c\u8be5\u516c\u53f8\u5468\u56db\u5ba3\u5e03\u4e86\u8be5\u4ea4\u6613\u3002 \u201c\u4e0e\u6b64\u540c\u65f6\uff0cSqills \u652f\u6301\u6211\u4eec\u7684\u6570\u5b57\u670d\u52a1\u589e\u957f\u8def\u5f84\uff0c\u662f\u901a\u8fc7\u6709\u9488\u5bf9\u6027\u7684\u6536\u8d2d\u5e94\u7528\u6211\u4eec\u7684\u8d44\u672c\u5206\u914d\u6807\u51c6\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u201d Squills \u7684\u7b2c\u4e00\u4e2a\u5ba2\u6237\u662f 2010 \u5e74\u7684\u4e00\u5bb6\u5c0f\u578b\u5fb7\u56fd\u94c1\u8def\u8fd0\u8425\u5546\u3002Squills \u6309\u7167\u6570\u91cf\u4e58\u4ee5\u4ef7\u683c\u6ed1\u52a8\u6bd4\u4f8b\u6a21\u578b\u6536\u8d39\u3002\n\u8fd9\u7b14\u4ea4\u6613\u662f\u5728\u6b27\u6d32\u94c1\u8def\u5e02\u573a\u52a8\u6001\u53d8\u5316\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u7684\u3002\u6700\u8fd1\u5bf9\u6b27\u6d32\u94c1\u8def\u5e02\u573a\u7684\u653e\u677e\u7ba1\u5236\u4ee5\u53ca\u5bf9\u94c1\u8def\u4f5c\u4e3a\u6bd4\u822a\u73ed\u66f4\u73af\u4fdd\u7684\u57ce\u9645\u65c5\u884c\u9009\u62e9\u7684\u5174\u8da3\u589e\u52a0\uff0c\u53ef\u80fd\u4f1a\u52a0\u5927\u94c1\u8def\u8fd0\u8425\u5546\u5347\u7ea7\u9884\u8ba2\u548c\u5e93\u5b58\u7ba1\u7406\u8f6f\u4ef6\u7684\u538b\u529b\u3002\u8bb8\u591a\u8fd0\u8425\u5546\u4ecd\u5728\u5f00\u53d1\u53ef\u8ffd\u6eaf\u5230 1980 \u5e74\u4ee3\u548c 1990 \u5e74\u4ee3\u7684\u9884\u8ba2\u7cfb\u7edf\u3002\u66f4\u65b0\u7684\u57fa\u4e8e\u4e91\u7684\u7cfb\u7edf\u4f7f\u8fd0\u8425\u5546\u80fd\u591f\u66f4\u5feb\u5730\u6d4b\u8bd5\u5176\u5546\u4e1a\u6a21\u5f0f\u7684\u53d8\u5316\uff0c\u540c\u65f6\u4ee5\u66f4\u4f4e\u7684\u5355\u4f4d\u6210\u672c\u8fd0\u8425\u3002\u8fd9\u53ef\u4ee5\u5141\u8bb8\u8bd5\u9a8c\u7968\u4ef7\u7ed3\u6784\u3001\u59cb\u53d1\u5730\u548c\u76ee\u7684\u5730\u5b9a\u4ef7\u3001\u57fa\u4e8e\u533a\u57df\u7684\u5b9a\u4ef7\u548c\u57fa\u4e8e\u8ddd\u79bb\u7684\u5b9a\u4ef7\u3002\u8fd0\u8425\u5546\u4f7f\u7528 Sqills \u7684\u5e93\u5b58\u7cfb\u7edf\uff0c\u7136\u540e\u4e0e Trainline\u3001SilverRail \u548c Amadeus \u7b49\u516c\u53f8\u8054\u7cfb\uff0c\u5c06\u4ed6\u4eec\u7684\u8f66\u7968\u5206\u53d1\u7ed9\u4ee3\u7406\u5546\u3002 Siemens Mobility \u5728\u4e9a\u592a\u5730\u533a\u548c\u7f8e\u6d32\u6709\u5f88\u591a\u5ba2\u6237\uff0c\u53ef\u4ee5\u901a\u8fc7 Sqills \u7684\u4ea7\u54c1\u8fdb\u884c\u4ea4\u53c9\u9500\u552e\u3002\u8fd9\u5bb6\u5fb7\u56fd\u79d1\u6280\u5de8\u5934\u8ba1\u5212\u5c06 Sqills \u7684 S3 \u4e58\u5ba2\u5e73\u53f0\u4e0e\u5176\u5176\u4ed6\u4ea7\u54c1\u6574\u5408\uff0c\u5305\u62ec Hacon\u3001eos.uptrade\u3001Bytemark \u548c Padam Mobility\u3002 Sqills \u6ca1\u6709\u505a\u592a\u591a\u7684\u5b9a\u5236\u5de5\u4f5c\u3002\u5927\u7ea6 95% \u7684\u8fd0\u8425\u5546\u8981\u6c42\u5df2\u7ecf\u662f\u5176\u7cfb\u7edf\u4e2d\u7684\u6807\u51c6\u529f\u80fd\u548c\u9009\u9879\u3002\u6bcf\u4e2a\u8fd0\u8425\u5546\u5728\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u4e0a\u90fd\u6709\u81ea\u5df1\u7684\u8f6f\u4ef6\u7248\u672c\uff0c\u8fd0\u8425\u5546\u7684\u5185\u90e8\u56e2\u961f\u8fd0\u884c\u5b83\u3002\u8fd9\u4e0e\u57fa\u4e8e\u4e91\u7684\u7edf\u4e00\u6a21\u578b\u4e0d\u540c\uff0c\u540e\u8005\u5728\u4e00\u4e2a\u5730\u65b9\u53d1\u751f\u6545\u969c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6240\u6709\u5ba2\u6237\u5b95\u673a\u3002\u7136\u800c\uff0c\u4e00\u4e9b\u5b9a\u5236\u662f\u5178\u578b\u7684\uff0c\u4ee5\u94fe\u63a5\u6765\u81ea\u4e0d\u540c\u4f9b\u5e94\u5546\u7684\u4e0d\u540c\u7cfb\u7edf\uff0c\u4f8b\u5982\u81ea\u52a8\u552e\u7968\u673a\u4e0e\u94c1\u8def\u4f1a\u8ba1\u8f6f\u4ef6\u3002 \u201c\u4e3a\u4e86\u663e\u7740\u589e\u52a0\u8f68\u9053\u4e0a\u7684\u4e58\u5ba2\u6570\u91cf\u5e76\u5728 2030 \u5e74\u5b9e\u73b0\u6211\u4eec\u7684\u6c14\u5019\u76ee\u6807\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u4e58\u5ba2\u63d0\u4f9b\u66f4\u4f18\u5316\u7684\u6d41\u7a0b\uff0c\u4f7f\u4ed6\u4eec\u80fd\u591f\u65e0\u7f1d\u8bc6\u522b\u548c\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684\u6240\u6709\u94c1\u8def\u670d\u52a1\uff0c\u201d\u9996\u5e2d\u6267\u884c\u5b98\u8fc8\u514b\u5c14\u5f7c\u5f97\u8bf4\u897f\u95e8\u5b50\u4ea4\u901a\u3002", "note_en": "Sqills has won more contracts from railway operators to upgrade their inventory, booking, and ticketing software than any other tech vendor in recent years. So this acquisition makes sense.\n Siemens Mobility said on Thursday it had signed a deal to  acquire  Sqills, a Netherlands-based rail software company, for $650 million (\u20ac550 million). The deal highlights an amplified interest in intercity rail worldwide as the impacts of climate change become more apparent and a new wave of technologies become available.\n Sqills is a seller of cloud-based inventory management, reservation, and ticketing software for rail transport operators worldwide. Founded in 2002, it hasn\u2019t raised outside investment.\n For years, Siemens\u2019  HaCon unit and Sqills have competed against other vendors, such as Amadeus, IBM, and SilverRail, to offer operational tools to railway companies. But Sqills enjoyed a streak of business wins in Europe before the pandemic struck. Today 33 operators, such as SNCF, Irish Rail, Rail Delivery Group, SJ, Via Rail, and Eurostar, use its services.\n The company employs 160 people and forecasts its 2022 revenue of approximately $47 million (\u20ac40 million). That represented growth from the pre-pandemic year of 2019, when Sqills generated roughly $25 million in revenue.\n \u201cThe acquisition of Sqills is a perfect example of how Siemens combines the real and digital worlds to empower its customers in their transformation,\u201d said Roland Busch, president and CEO of Siemens AG, which announced the deal Thursday. \u201cAt the same time, Sqills supports our growth path for digital services and is a great example of applying our capital allocation criteria through targeted acquisitions.\u201d\n Sqills\u2019 first customer was a small German rail operator, in 2010. Squills charges on a volume-times-price, sliding scale model.\n The deal comes against a backdrop of  changing dynamics in Europe\u2019s rail market. Recent deregulation of Europe\u2019s rail markets and an increased interest in rail as a greener option for intercity travel than flights could ramp up pressure on railway operators to upgrade their software for reservations and inventory management. Many operators are still working on reservation systems dating from the 1980s and 1990s.\n Newer cloud-based systems enable operators to test changes in their commercial models more quickly while also operating at a lower cost per unit. This can allow experimentation infare structure, origin-and-destination pricing, zone-based pricing, and distance-based pricing.\n Operators use Sqills\u2019 inventory system and then connect with companies like Trainline, SilverRail, and Amadeus to distribute their tickets to agencies.\n Siemens Mobility has many customers in Asia Pacific and the Americas that could be cross-sold on Sqills\u2019 products. The German tech giant plans to integrate Sqills\u2019 S3 Passenger platform with its other offerings, including Hacon, eos.uptrade, Bytemark, and Padam Mobility.\n Sqills isn\u2019t doing much custom work. About 95 percent of the operators\u2019 requirements are already standard capabilities and options in its system. Each operator gets its own version of the software on Amazon Web Services, and in-house teams at the operator run it. That\u2019s different from a unified cloud-based model, where an outage in one place could bring all customers down.\n Some customization is typical, however, to link disparate systems from different vendors, such as a ticket vending machine with the railway\u2019s accounting software.\n  \u201cTo significantly increase the number of passengers on the tracks and achieve our climate goals by 2030, we need to provide passengers with a more optimized process that enables them to seamlessly identify and use all the rail services we offer,\u201d said Michael Peter, CEO of Siemens Mobility.", "posttime": "2021-08-08 11:50:54", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6f\u4ef6,based,\u94c1\u8def", "title": "\u897f\u95e8\u5b50\u8868\u793a\u5df2\u540c\u610f\u4ee5\u7ea6 6.5 \u4ebf\u7f8e\u5143\u7684\u4ef7\u683c\u6536\u8d2d\u603b\u90e8\u4f4d\u4e8e\u8377\u5170\u7684 Sqills\uff0c\u8fd9\u662f\u4e00\u6b3e\u9762\u5411\u5168\u7403\u94c1\u8def\u8fd0\u8f93\u8fd0\u8425\u5546\u7684\u57fa\u4e8e\u4e91\u7684\u8f6f\u4ef6\u5957\u4ef6", "title_en": "Siemens says that it has agreed to buy Netherlands-based Sqills, a cloud-based software suite for rail transport operators worldwide, for ~$650M", "transed": 1, "url": "https://skift.com/2021/08/05/siemens-to-buy-rail-software-company-sqills-for-650-million/", "via": "", "real_tags": ["\u8f6f\u4ef6", "based", "\u94c1\u8def"]}, {"category": "", "categoryclass": "", "imagename": "4a0b2e5b054d00671a5405186042d55c.jpg", "infoid": 1072061, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5e74\u590f\u5929\uff0cTU Delft \u7684 Flying V \u55b7\u6c14\u5ba2\u673a\u7684\u6bd4\u4f8b\u6a21\u578b\u5f00\u59cb\u98de\u884c\u3002\u65b0\u98de\u673a\u7684\u673a\u7ffc\u8f7d\u5ba2\uff0c\u636e\u62a5\u9053\u5176\u71c3\u6cb9\u6548\u7387\u63d0\u9ad8\u4e86 20%\u3002\u9879\u76ee\u8d1f\u8d23\u4eba Roelof Vos \u535a\u58eb\u548c\u4ed6\u7684\u56e2\u961f\u5c06 22.5 \u516c\u65a4\u30013 \u7c73\u5bbd\u7684\u6a21\u578b\u5e26\u5230\u4e86\u5fb7\u56fd\u7684\u4e00\u4e2a\u7a7a\u519b\u57fa\u5730\u3002\u5728\u90a3\u91cc\uff0c\u4ed6\u4eec\u4e0e\u7a7a\u4e2d\u5ba2\u8f66\u516c\u53f8\u7684\u4e00\u4e2a\u56e2\u961f\u5408\u4f5c\uff0c\u8ba9\u98de\u673a\u8d77\u98de\uff0c\u8fdb\u884c\u4e86\u591a\u6b21\u8bd5\u98de\uff0c\u76f4\u5230\u7535\u6c60\u51e0\u4e4e\u8017\u5c3d\u5e76\u7740\u9646\u3002 \u201c\u6211\u4eec\u62c5\u5fc3\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u7531\u4e8e\u5148\u524d\u7684\u8ba1\u7b97\u8868\u660e\u2018\u65cb\u8f6c\u2019\u53ef\u80fd\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u6b64\u98de\u673a\u8d77\u98de\u53ef\u80fd\u4f1a\u6709\u4e9b\u56f0\u96be\u3002\u8be5\u56e2\u961f\u4f18\u5316\u4e86\u7f29\u653e\u98de\u884c\u6a21\u578b\u4ee5\u9632\u6b62\u51fa\u73b0\u6b64\u95ee\u9898\uff0c\u4f46\u5e03\u4e01\u7684\u8bc1\u636e\u5728\u4e8e\u8fdb\u98df\u3002\u4f60\u9700\u8981\u98de\u884c\u624d\u80fd\u786e\u5b9a\uff0c\u201d\u6c83\u65af\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\u3002\u8fd9\u6b21\u8bd5\u9a8c\u88ab\u8ba4\u4e3a\u662f\u6210\u529f\u7684\uff0c\u56e0\u4e3a\u8d77\u98de\u65f6\u7684\u65cb\u8f6c\u5f88\u5bb9\u6613\u4ee5 50 \u82f1\u91cc/\u5c0f\u65f6\uff0880 \u516c\u91cc/\u5c0f\u65f6\uff09\u7684\u901f\u5ea6\u8fdb\u884c\u3002\u7136\u800c\uff0c\u56e0\u4e3a\u5b83\u662f\u53ea\u662f\u4e00\u4e2a\u5b9e\u9a8c\u6a21\u578b\uff0c\u771f\u6b63\u7684\u55b7\u6c14\u5ba2\u673a\u5728\u5b9e\u9645\u98de\u884c\u4e2d\u7684\u8868\u73b0\u4ecd\u7136\u4e0d\u786e\u5b9a\u3002\u4ece\u8fd9\u4e2a\u6bd4\u4f8b\u6a21\u578b\u8bd5\u9a8c\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u5f97\u51fa\u7ed3\u8bba\uff0c\u4ed6\u4eec\u5fc5\u987b\u6539\u53d8\u98de\u673a\u7684\u91cd\u5fc3\u5e76\u56fa\u5b9a\u5929\u7ebf\u4ee5\u6539\u5584\u9065\u6d4b\u3002\u8be5\u56e2\u961f\u7684\u4e0b\u4e00\u6b65\u662f\u4f7f\u7528\u98de\u884c\u671f\u95f4\u83b7\u5f97\u7684\u6570\u636e\u6765\u6784\u5efa\u98de\u673a\u7684\u7a7a\u6c14\u52a8\u529b\u5b66\u8f6f\u4ef6\u6a21\u578b\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u53ef\u4ee5\u5728\u98de\u884c\u6a21\u62df\u5668\u4e2d\u6d4b\u8bd5\u55b7\u6c14\u5f0f\u5ba2\u673a\u5e76\u5c06\u7ed3\u679c\u7528\u4e8e\u7814\u53d1\u3002Flying-V \u5177\u6709\u6253\u9020\u9ad8\u80fd\u6548\u957f\u9014\u98de\u673a\uff0c\u5ba2\u8231\u3001\u8d27\u8231\u3001\u6cb9\u7bb1\u5747\u7f6e\u4e8e\u673a\u7ffc\u5185\uff0c\u5f15\u5165\u4e86\u98de\u673a\u547d\u540d\u7684V\u5b57\u578b\u3002\n\u4ee3\u5c14\u592b\u7279\u7406\u5de5\u5927\u5b66\u7814\u7a76\u4eba\u5458\u7684\u8ba1\u7b97\u673a\u8ba1\u7b97\u4f30\u8ba1\uff0c\u4e0e\u5f53\u4eca\u6700\u5148\u8fdb\u7684\u98de\u673a\u76f8\u6bd4\uff0c\u8be5\u98de\u673a\u4f18\u8d8a\u7684\u7a7a\u6c14\u52a8\u529b\u5b66\u5916\u5f62\u548c\u51cf\u8f7b\u7684\u91cd\u91cf\u53ef\u4ee5\u5c06\u6cb9\u8017\u964d\u4f4e 20%\u3002", "note_en": "This summer, a scale model of TU Delft&#39;s Flying V jetliner took flight. The new aircraft carries passengers in its wings and reports being 20% more fuel-efficient.\n  Project leader Dr. Roelof Vos and his team took the  22.5 kg and  3-meter\u00a0wide-scale model to an airbase in Germany. There they worked together with a team from Airbus to get the  aircraft to take-off, fly a number of test maneuvers until the batteries were nearly empty and landed.\n \u201cOne of our worries was that the aircraft might have some difficulty lifting-off since previous calculations had shown that \u2018rotation\u2019 could be an issue. The team optimized the scaled flight model to prevent the issue, but the proof of the pudding is in the eating. You need to fly to know for sure,&#34; said in a  statement Vos.\n  The trial was deemed a successful one as rotation on take-off was performed easily at the speed of  50 mph (80 km/h). However, as it was just an experimental model, how the real jetliner would perform in an actual flight is still uncertain.\n From this scale model trial, the researchers already concluded that they had to\u00a0change the center of gravity of the aircraft and fix the antenna to improve telemetry.\n The next steps for the team are to\u00a0use the data acquired during the flight to build an aerodynamic software model of the aircraft. This will mean they can test the jetliner in a flight simulator and use the outcomes for research and development.\n The Flying-V has been created to be a highly energy-efficient long-distance  airplane. The passenger cabin, the cargo hold, and the fuel tanks have all been placed in the wings, introducing the V-shape that the plane is named after.\n  TU Delft researchers&#39; computer calculations estimate that the aircraft\u2019s superior aerodynamic shape and decreased weight can  reduce fuel consumption by 20% compared to today\u2019s  most advanced aircraft.", "posttime": "2021-08-08 11:50:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u55b7\u6c14,ride,\u98de\u673a", "title": "V\u578b\u673a\u7ffc\u5f0f\u55b7\u6c14\u5ba2\u673a\u6210\u529f\u8d77\u98de\u2014\u2014IE", "title_en": "V-Shaped Ride-in-the-Wings Jetliner Successfully Took Off \u00e2\u20ac\u201c IE", "transed": 1, "url": "https://interestingengineering.com/the-energy-efficient-v-shaped-ride-in-the-wings-jetliner-successfully-took-off", "via": "", "real_tags": ["\u55b7\u6c14", "ride", "\u98de\u673a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072060, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u6211\u6b63\u5728\u5bf9\u51e0\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u5e93\u8fdb\u884c\u6d88\u606f\u4f20\u9012\u5de5\u4f5c\u8d1f\u8f7d\u7684\u8bc4\u4f30\u3002\u5728\u5bf9 Apache Cassandra \u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u6027\u80fd\u6307\u6807\u4e2d\u7684\u5f02\u5e38\u6a21\u5f0f\u3002\u6211\u9075\u5faa\u4e86\u8fd9\u4e9b\u7ebf\u7d22\uff0c\u6700\u7ec8\u53d1\u73b0\u4e86\u4e00\u4e9b\u4e3b\u8981\u7684\u7ebf\u7a0b\u6c60\u8bbe\u8ba1\u95ee\u9898\uff0c\u5e76\u5728 Windows \u4e0a\u5b9e\u73b0\u4e86\u6f5c\u5728\u7684 18 \u500d\u6027\u80fd\u63d0\u5347\u3002\u6211\u4e00\u76f4\u5728\u7814\u7a76\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u6570\u636e\u5e93\u4f5c\u4e3a\u91cd\u65b0\u8bbe\u8ba1\u6d88\u606f\u4ea7\u54c1\u7684\u6f5c\u5728\u540e\u7aef\u3002\u867d\u7136\u6211\u5df2\u7ecf\u60f3\u5230\u4e86\u4e00\u4e9b\u5019\u9009\u4eba\uff0c\u4f46\u6211\u5e0c\u671b\u80fd\u591f\u5c55\u793a\u5bf9\u6570\u636e\u5e93\u9009\u9879\u7684\u5f3a\u5927\u63a2\u7d22\u3002\u867d\u7136 PostgreSQL \u662f SQL \u6570\u636e\u5e93\u4e2d\u7684\u6709\u529b\u7ade\u4e89\u8005\uff0c\u5e76\u4e14\u5728\u65e9\u671f\u5b9e\u9a8c\u4e2d\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u7ed3\u679c\uff0c\u4f46\u6211\u4e00\u76f4\u5728\u5bfb\u627e\u7406\u60f3\u7684 NoSQL \u5019\u9009\u8005\u3002 Apache Cassandra \u6bd4\u6700\u65b0\u7684 NewSQL \u548c\u952e\u503c\u6570\u636e\u5e93\u8981\u8001\u4e00\u4e9b\uff0c\u4f46\u5b83\u5728\u5f88\u591a\u65b9\u9762\u4f3c\u4e4e\u5728\u67b6\u6784\u4e0a\u90fd\u5f88\u7406\u60f3\uff1a\u6211\u7684\u76ee\u6807\u662f\u5c06\u6570\u636e\u5e93\u51e0\u4e4e\u5b8c\u5168\u7528\u4f5c\u201c\u53ea\u5199\u6570\u636e\u5b58\u50a8\u201d\u3002\u6d88\u606f\u4f20\u9012\u6709\u4e24\u4e2a\u4e3b\u8981\u8981\u6c42\uff1a\u6301\u4e45\u8bb0\u5f55\u5df2\u5b8c\u6210\u7684\u5de5\u4f5c\uff08\u63a5\u6536\u548c\u53d1\u9001\u7684\u6d88\u606f\uff09\u4ee5\u5141\u8bb8\u5d29\u6e83\u6062\u590d\uff0c\u4ee5\u53ca\u8bb0\u5f55\u66f4\u957f\u671f\u7684\u53ef\u641c\u7d22\u65e5\u5fd7\u3002 Cassandra \u5df2\u7ecf\u88ab\u6211\u4eec\u7684\u5de5\u7a0b\u5e08\u786e\u5b9a\u4e3a\u9996\u9009\u6570\u636e\u5e93\uff0c\u7406\u8bba\u4e0a\u5e94\u8be5\u975e\u5e38\u7b26\u5408\u8fd9\u4e9b\u8981\u6c42\u3002\u51ed\u501f\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u5206\u533a\u5199\u5165\u6027\u80fd\u53ca\u5176 LSMT \u6570\u636e\u7ed3\u6784\u80fd\u591f\u81ea\u52a8\u4ece\u8868\u4e2d\u538b\u7f29\u5df2\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5b83\u4f3c\u4e4e\u662f\u4e00\u4e2a\u660e\u786e\u7684\u9886\u5bfc\u8005\u3002\u6211\u5728\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u4e2d\u8bc4\u4f30\u7684\u4e3b\u8981\u5de5\u4f5c\u8d1f\u8f7d\u6d89\u53ca\u63a5\u6536\u6d88\u606f\u3001\u6355\u83b7\u5c5e\u6027\u3001\u8f6c\u6362\u6d88\u606f\u5e76\u53d1\u9001\u5b83\u4eec\u3002\n\u5728\u8bb8\u591a\u5ba2\u6237\u7cfb\u7edf\u4e2d\uff0c\u5c06\u6709\u4e00\u4e2a\u4e3b\u8981\u8def\u7531\u6309\u987a\u5e8f\u5904\u7406\u5927\u591a\u6570\u3002\u9700\u8981\u6301\u4e45\u5730\u8bb0\u5f55\u8fd9\u4e9b\u6d88\u606f\u7684\u63a5\u6536\u60c5\u51b5\uff0c\u8fd9\u4f7f\u5f97\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5355\u7ebf\u7a0b\u7528\u4f8b\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u57fa\u51c6\u6d4b\u8bd5\u3002\u8fd8\u6709\u591a\u7ebf\u7a0b\u57fa\u51c6\u6d4b\u8bd5\u53ef\u4ee5\u4e3a\u5728\u591a\u6761\u8def\u7ebf\u4e0a\u66f4\u5747\u5300\u5730\u5206\u914d\u5de5\u4f5c\u7684\u5ba2\u6237\u8868\u5f81\u6027\u80fd\u3002 PostgreSQL \u5728\u5355\u7ebf\u7a0b\u548c\u591a\u7ebf\u7a0b\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u90fd\u53d6\u5f97\u4e86\u4f18\u5f02\u7684\u6210\u7ee9\uff0c\u4f46\u6211\u5e0c\u671b Cassandra\u2014\u2014\u51ed\u501f\u5176\u66f4\u7b80\u5355\u7684\u6a21\u578b\u548c\u6781\u81f4\u7684\u6027\u80fd\u2014\u2014\u80fd\u591f\u63d0\u4f9b\u66f4\u9ad8\u7684\u6027\u80fd\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u8868\u660e\u5355\u7ebf\u7a0b\u5199\u5165\u6027\u80fd\u5b58\u5728\u4e00\u4e9b\u76f8\u5173\u5f02\u5e38\u3002\u5b58\u5728\u51e0\u4e2a\u5173\u952e\u95ee\u9898\uff1a \u5355\u7ebf\u7a0b Cassandra \u57fa\u51c6\u6d4b\u8bd5\u5728\u786c\u4ef6\u4e0a\u8868\u73b0\u51fa\u6781\u5dee\u7684\u6027\u80fd\uff0c\u4e0e PostgreSQL \u663e\u793a\u7684\u7269\u7406\u6027\u80fd\u76f8\u6bd4\u3002\u5ef6\u8fdf\u4e0e\u6392\u961f\u7406\u8bba\u8868\u660e\u7684\u901a\u5e38\u6a21\u5f0f\u76f8\u53cd\uff1b\u5728\u591a\u7ebf\u7a0b\u7cfb\u7edf\u4e2d\uff0c\u66f4\u591a\u7684\u7ebf\u7a0b\u5e94\u8be5\u63d0\u4f9b\u66f4\u9ad8\u7684\u541e\u5410\u91cf\uff0c\u4f46\u4ee5\u589e\u52a0\u5ef6\u8fdf\u4e3a\u4ee3\u4ef7\u3002 Cassandra \u5c55\u793a\u4e86\u8fd9\u79cd\u6a21\u5f0f\u7684\u53cd\u8f6c\u3002\u541e\u5410\u91cf\u589e\u52a0\u8d85\u8fc7\u7ebf\u7a0b\u6570\u2014\u201410 \u500d\u7684\u7ebf\u7a0b\u63d0\u4f9b\u8fdc\u8fdc\u8d85\u8fc7 10 \u500d\u7684\u541e\u5410\u91cf\u8fd9\u4e00\u4e8b\u5b9e\u4e5f\u662f\u53ef\u7591\u7684\u3002\u7efc\u4e0a\u6240\u8ff0\uff0c\u8fd9\u4e9b\u75c7\u72b6\u8ba9\u6211\u6000\u7591 Cassandra \u4e0a\u7684\u5355\u7ebf\u7a0b\u5de5\u4f5c\u8d1f\u8f7d\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u6548\u7387\u4f4e\u4e0b\u7684\u95ee\u9898\u3002\n\u5bf9\u4e8e\u50cf\u6211\u8fd9\u6837\u4e0d\u719f\u6089\u7684\u5de5\u7a0b\u5e08\u6765\u8bf4\uff0c\u4e86\u89e3 Cassandra \u7684\u5185\u90e8\u6267\u884c\u8fc7\u7a0b\u5177\u6709\u5f88\u5927\u7684\u590d\u6742\u6027\u3002\u5177\u6709\u5f88\u5f3a\u7684\u5e76\u53d1\u6027\uff0c\u901a\u8fc7\u591a\u4e2a\u5de5\u4f5c\u6c60\u8de8\u591a\u4e2a\u7ebf\u7a0b\u5904\u7406\u6570\u636e\u5e93\u64cd\u4f5c\u3002\u9274\u4e8e\u8fd9\u79cd\u590d\u6742\u6027\uff0c\u68c0\u6d4b\u548c\u8ddf\u8e2a\u8bf7\u6c42\u5904\u7406\u4f3c\u4e4e\u662f\u7406\u89e3\u95ee\u9898\u7684\u552f\u4e00\u53ef\u884c\u9014\u5f84\u3002\u6240\u4ee5\u6211\u83b7\u53d6\u4e86\u6e90\u4ee3\u7801\uff0c\u6784\u5efa\u4e86 Cassandra \u5e76\u5f00\u59cb\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65e5\u5fd7\u6765\u68c0\u6d4b\u95ee\u9898\u3002\u6211\u7684\u65e5\u5fd7\u8bb0\u5f55\u96c6\u4e2d\u5728\u8bb0\u5f55\u6574\u4e2a\u8bf7\u6c42\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u4ee5\u53ca\u8f6c\u79fb\u5230\u5de5\u4f5c\u6c60\u7684\u7ec4\u4ef6\u4efb\u52a1\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u3002\u8fd9\u91cc\u7684\u76ee\u6807\u662f\u80fd\u591f\u5728\u5fae\u79d2\u7ea7\u522b\u8ddf\u8e2a\u4efb\u52a1\u5b9e\u9645\u6267\u884c\u7684\u65f6\u95f4\uff0c\u4ee5\u5bfb\u627e\u5ef6\u8fdf\u3002\u8ddf\u8e2a\u663e\u793a\u5728\u8c03\u7528 StorageProxy.performLocally() \u548c\u5b9e\u9645\u6267\u884c LocalMutationRunnable \u4e4b\u95f4\u7684\u5e73\u5747\u5ef6\u8fdf\u4e3a 1.52 \u6beb\u79d2\u3002\u603b\u64cd\u4f5c\u65f6\u95f4\u5e73\u5747\u4e3a 2.06 \u6beb\u79d2\uff08\u5728 Message.Dispatcher processRequest() \u5904\u6d4b\u91cf\uff09\u3002\u8fd9\u8868\u660e\u5728 SEPExecutor \u4e2d\u7b49\u5f85\u7ebf\u7a0b\u8c03\u5ea6\u6240\u635f\u5931\u7684\u603b\u64cd\u4f5c\u65f6\u95f4\u7684\u7ea6 72%\u3002\u9274\u4e8e\u6211\u53d1\u73b0\u7684\u5ef6\u8fdf\uff0cSEPExecutor \u7ebf\u7a0b\u6c60\u6210\u4e3a\u8c03\u67e5\u7684\u7126\u70b9\u3002\u8fd9\u662f\u4e00\u4e2a Cassandra \u7279\u5b9a\u7684\u81ea\u5b9a\u4e49\u7ebf\u7a0b\u6c60\uff0c\u5177\u6709\u663e\u7740\u7684\u5185\u90e8\u590d\u6742\u6027\u3002\u6211\u7528 SEPExecutor \u5c1d\u8bd5\u4e86\u8bb8\u591a\u7b28\u62d9\u7684\u5e72\u9884\u63aa\u65bd\uff0c\u4f46\u6ca1\u6709\u4e00\u6b21\u5b8c\u5168\u6210\u529f\u3002\n\u6211\u5f00\u59cb\u8be2\u95ee\u6709\u5173 SEPWorker.assign() \u5728\u4ece SPINNING \u8f6c\u6362\u5230\u201c\u5de5\u4f5c\u201d\u72b6\u6001\u65f6\u5982\u4f55\u4e0d\u89e3\u9664\u7ebf\u7a0b\u7684\u95ee\u9898\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u5df2\u7ecf\u8bb0\u5f55\u4e86\u6211\u7684\u8c03\u67e5\u548c\u7ed3\u679c\uff0c\u6211\u5728 Cassandra JIRA \u9519\u8bef\u8ddf\u8e2a\u5668\u4e0a\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\u3002\u6700\u521d\u5b83\u9047\u5230\u4e86\u4e00\u4e9b\u516c\u5e73\u7684\u95ee\u9898\uff0c\u4f46\u8001\u5b9e\u8bf4\u6709\u4e00\u5b9a\u7a0b\u5ea6\u7684\u6000\u7591\u3002 \uff08\u8001\u5b9e\u8bf4\uff0c\u8fd9\u5bf9\u4e8e\u4efb\u4f55\u9879\u76ee\u90fd\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u56e0\u4e3a\u9879\u76ee\u62e5\u6709\u7684\u8d44\u6e90\u6709\u9650\uff0c\u800c\u4e14\u4ed6\u4eec\u53ef\u80fd\u4f1a\u6536\u5230\u5927\u91cf\u611a\u8822\u7684\u95ee\u9898\u548c\u8bef\u62a5\u3002\uff09\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u6b63\u5728\u5bfb\u627e\u548c\u8ba8\u8bba\u5173\u4e8e JIRA \u95ee\u9898\u7684\u8fdb\u4e00\u6b65\u7ebf\u7d22\u3002 Cassandra \u7684\u4e00\u4f4d\u8d1f\u8d23\u4eba\u52a0\u5165\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u6b63\u5728\u8ba8\u8bba\u5178\u578b\u7684\u73af\u5883\u548c\u7528\u4f8b\u3002\u6211\u613f\u610f\u542c\u5230\u4e00\u4e9b\u89c1\u89e3\u6216\u89e3\u91ca\uff0c\u4f46\u6211\u81ea\u5df1\u575a\u4fe1\u8fd9\u91cc\u5f88\u53ef\u80fd\u4f1a\u627e\u5230\u4e00\u4e9b\u4e1c\u897f\u3002\u5bf9\u4efb\u52a1\u8c03\u5ea6\u884c\u4e3a\u548c\u7531\u6b64\u4ea7\u751f\u7684\u8c03\u5ea6\u5ef6\u8fdf\u7684\u8be6\u7ec6\u8ddf\u8e2a\u8868\u660e\uff0c\u5f53\u5de5\u4f5c\u4eba\u5458\u5df2\u7ecf\u53ef\u7528\u4f46\u505c\u5728\u201c\u65cb\u8f6c\u201d\u72b6\u6001\u65f6\u4f1a\u53d1\u751f\u5ef6\u8fdf\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cCassandra \u7684 SEPExecutor \u7ebf\u7a0b\u6c60\u65e2\u6ca1\u6709\u542f\u52a8\u989d\u5916\u7684 worker\uff0c\u4e5f\u6ca1\u6709\u5524\u9192\uff08unpark\uff09\u6b63\u5728\u4f11\u7720\u7684 worker\u3002\u5728\u5355\u7ebf\u7a0b\u6761\u4ef6\u4e0b\uff0cworker \u4f1a\u5728\u6bcf\u6b21\u8bf7\u6c42\u540e\u7acb\u5373\u8fdb\u5165\u7761\u7720\u72b6\u6001\uff1b\u6700\u591a\u9700\u8981 1.5 \u6beb\u79d2\u624d\u80fd\u5524\u9192\u4e0b\u4e00\u4e2a\uff01\u867d\u7136\u8fd9\u5bf9\u6211\u6765\u8bf4\u4f3c\u4e4e\u662f\u5f3a\u6709\u529b\u7684\u8bc1\u636e\uff0c\u4f46 Cassandra \u793e\u533a\u6307\u51fa\u7ebf\u7a0b\u6c60\u662f\u4e3a Linux \u8bbe\u8ba1\u7684\uff0c\u5e76\u4e14\uff08\u4ece\u65b0\u7248\u672c 4 \u5f00\u59cb\uff09\u4ed6\u4eec\u5df2\u7ecf\u653e\u5f03\u4e86\u5bf9 Windows \u4f5c\u4e3a\u5e73\u53f0\u7684\u652f\u6301\u3002\n\u6240\u4ee5\uff0c\u6211\u53bb\u62ff\u4e86\u4e00\u4e2a EC2 \u5b9e\u4f8b\u5e76\u8fdb\u884c\u4e86\u4e00\u4e9b Linux \u6d4b\u8bd5\u3002\u5728\u5355\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0c\u6211\u80fd\u591f\u5728 Linux \u4e0a\u53d1\u73b0 +30.9% \u7684\u6027\u80fd\u6539\u8fdb\uff0c\u5728 10\u300150 \u548c 200 \u4e2a\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0c\u6539\u8fdb\u4ece\u5c0f\u5230\u5927\u4e0d\u7b49\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u89c9\u5f97\u6211\u5df2\u7ecf\u62a5\u544a\u4e86\u4e00\u4e2a\u660e\u663e\u7684\u9519\u8bef (CASSANDRA-16499)\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8865\u4e01\uff0c\u5e76\u663e\u793a\u4e86\u6027\u80fd\u6539\u8fdb\u548c\u975e\u56de\u5f52\u7684\u826f\u597d\u8bc1\u636e\u3002\u7136\u800c\uff0c\u63d0\u51fa\u4e86\u67b6\u6784\u95ee\u9898\uff0c\u8fd9\u662f\u6267\u884c\u5668\u7684\u9884\u671f\u8bbe\u8ba1\u2014\u2014\u5de5\u4f5c\u7ebf\u7a0b\u81ea\u7ec4\u7ec7\uff0c\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u4ea4\u4e92\u6709\u9650\u3002\u6dfb\u52a0\u4e3b\u52a8\u5524\u9192\u884c\u4e3a\u5c06\u6d88\u9664\u6b64\u8bbe\u8ba1\u529f\u80fd\u3002 Cassandra \u9886\u5bfc\u5e76\u6ca1\u6709\u63a5\u53d7\u8865\u4e01\uff0c\u800c\u662f\u8981\u6c42\u5bf9\u53ef\u80fd\u7684\u7ebf\u7a0b\u6c60\u9009\u9879\u8fdb\u884c\u5168\u9762\u7684\u67b6\u6784\u91cd\u65b0\u8bc4\u4f30\u3002\u867d\u7136\u8fd9\u662f\u4e00\u6b21\u6709\u4ef7\u503c\u7684\u63a2\u7d22\uff0c\u4f46\u6211\u5728\u57fa\u51c6\u6d4b\u8bd5\u548c\u8bc4\u4f30\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86 Cassandra \u7684\u5176\u4ed6\u7f3a\u70b9\uff1a\u5e76\u884c\u63d0\u4ea4/fsync \u53ef\u80fd\u6548\u7387\u4f4e\u4e0b\u2014\u2014PostgreSQL \u80fd\u591f\u5728\u5355\u4e2a fsync() \u4e2d\u63d0\u4ea4\u591a\u4e2a\u7b49\u5f85\u4e8b\u52a1\uff0cCassandra \u53ef\u80fd\u5728\u8fd9\u65b9\u9762\u6709\u5c40\u9650\u6027\u6211\u4eec\u8ba8\u8bba\u4e86\u6211\u4eec\u7684\u6570\u636e\u5e93\u9009\u9879\uff0c\u4ee5\u53ca\u8fdb\u4e00\u6b65\u6295\u8d44 Cassandra \u4ee5\u53d1\u73b0\u548c\u4fee\u590d\u8fd9\u4e9b\u5176\u4ed6\u53ef\u80fd\u7684\u7f3a\u9677\u7684\u6f5c\u529b\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u5e73\u53f0\uff0c\u6211\u4eec\u5f88\u611f\u5174\u8da3\uff0c\u4f46\u6211\u4eec\u5f88\u96be\u505a\u51fa\u5546\u4e1a\u6848\u4f8b\u3002\n\u6240\u4ee5\u611f\u8c22\u9605\u8bfb\uff0c\u6211\u5e0c\u671b\u4f60\u89c9\u5f97\u8fd9\u5f88\u6709\u8da3\uff01\u5982\u679c\u6709\u4eba\u5e0c\u671b\u7ee7\u7eed\u8fd9\u9879\u5de5\u4f5c\uff0c\u6211\u5f88\u4e50\u610f\u8ba8\u8bba\u3002", "note_en": "Recently I was conducting an evaluation of several different databases for a messaging workload. While benchmarking Apache Cassandra, I noticed unusual patterns in performance metrics. I followed these clues and eventually found some major thread-pool design questions and a potential 18x performance gain realizable on Windows.\n  I had been investigating a range of different databases as potential backends to re-engineer a messaging product. While I had some candidates in mind already, I wanted to be able to show a robust exploration of database options.\n  While PostgreSQL was a strong contender among SQL databases and had given good results in early experiments, I was looking for the ideal NoSQL candidate.\n Apache Cassandra was a little older than the latest NewSQL &amp; key-value databases, but it seemed in in many ways architecturally ideal:\n  The paradigm I was aiming for was to use the database almost entirely as a \u2018write-only datastore\u2019. Messaging has two major requirements: durable recording of work done (messages received &amp; sent) to allow crash recovery, and recording a longer-term searchable log.\n Cassandra had already been identified by our engineers as a preferred database, and should theoretically have aligned very well with these requirements. With highly scalable partitioned write performance and its LSMT datastructure able to automatically compact completed work from the table, it seemed like a clear leader.\n  Key workloads I was assessing in the messaging system involved receiving messages, capturing properties, transforming the messages, and sending them on.\n In many customer systems there would be one major route processing a large majority in sequential order. The requirement to durably record receipt of these messages made this essentially a single-threaded usecase, so this was a major benchmark. There were also multi-threaded benchmarks to characterize performance for customers running a more even distribution of work across multiple routes.\n PostgreSQL had given excellent results across single- and multi-threaded benchmarks, but I had hopes that Cassandra \u2014 with its simpler model and extreme performance focus \u2014 would be able to deliver even higher.\n      However these results suggested some concerning anomalies in single-threaded write performance.\u00a0Several key concerns existed:\n The single-threaded Cassandra benchmark showed abysmally poor performance on the hardware, compared to what PostgreSQL had shown was physically possible.\n Latencies were inverted from the usual pattern that queueing theory indicates; in a multi-threaded system, more threads should give higher throughput but at the cost of increased latency. Cassandra showed an inversion of this pattern.\n Throughput increasing beyond the number of threads \u2014 the fact that 10x the threads gave far more than 10x the throughput was also suspicious.\n Taken together, these symptoms made me suspicious there might be some inefficiencies in single-thread workloads on Cassandra.\n  Understanding Cassandra\u2019s internal execution processes, to an unfamiliar engineer like myself, posed a significant degree of complexity. There is a strong degree of concurrency, with database operations processed across multiple threads via a number of worker pools.\n Given this complexity, instrumenting &amp; tracing the request processing seemed the only plausible route to understand the problem. So I fetched the source, built Cassandra &amp; started added custom logging to instrument the problem.\n My logging focused on recording the start &amp; end times of the overall request and of the component tasks devolved to worker pools. The aim here was to be able to track, at a microsecond level, when tasks were actually executing in order to look for delays.\n  Tracing showed an average delay of 1.52 ms between StorageProxy.performLocally() being called, and the LocalMutationRunnable actually executing.\n Total operation time averaged 2.06 ms (measured at Message.Dispatcher processRequest()). This suggested ~72% of the\u00a0 total operation time\u00a0being lost waiting for thread scheduling in SEPExecutor.\n Given the delays I found, the SEPExecutor thread pool became a focus of investigation. This is a Cassandra-specific custom thread pool with significant internal complexity.\n I tried a number of clumsy interventions with SEPExecutor, none of which were fully successful.\n I started asking questions about how SEPWorker.assign() doesn\u2019t unpark threads when transitioning from SPINNING to \u2018working\u2019 state.\n Having documented my investigation &amp; results so far, I raised an issue on the Cassandra JIRA bug-tracker. Initially it was met with some fair questions but to be honest a certain amount of skepticism. (To be honest this is very understandable for any project, given the limited resources projects have and the numbers of stupid questions &amp; false positives they likely receive.)\n   In the meantime I was finding &amp; discussing further clues on the JIRA issue. One of the Cassandra leads had joined the issue and was discussing typical environments &amp; usecases. I was open to hearing some insight or explanation, but believed strongly myself that there was likely something to be found here.\n  A detailed trace of task scheduling behavior and resultant scheduling delays, showed that delays occurred when a worker was already available but parked in a \u2018SPINNING\u2019 state.\n In this case, Cassandra\u2019s SEPExecutor thread pool neither started an extra worker, nor did it wake (unpark) the sleeping one.\n Under single-threaded conditions, workers would go to sleep immediately after each request; and take up to 1.5 milliseconds to wake up for the next one!\n    While this seemed like strong evidence to me, the Cassandra community noted that the thread-pool is designed for Linux and that (as of the new version 4) they had dropped support for Windows as a platform.\n So, I went and got an EC2 instance and undertook some Linux testing. I was able to find a +30.9% performance improvement on Linux \u00a0in the single-thread case, with improvements varying from small to marginal over 10, 50 and 200 thread cases.\n  At this point I felt that I\u2019d reported a clear bug ( CASSANDRA-16499), provided a patch, and shown good evidence of performance improvement and non-regression.\n However there were architectural questions raised, that this was the intended design of the executor \u2014 that worker threads self-organize with limited interaction between producers and consumers. And that adding a proactive wakeup behavior, would obviate this design feature.\n Rather than accepting the patch, the Cassandra lead asked for a comprehensive architectural reassessment of possible thread-pooling options.\n While it was a valuable exploration, the course of my benchmarking &amp; assessment had identified other drawbacks of Cassandra:\n possible inefficiency in parallel commit/ fsync \u2014 PostgreSQL is able to commit multiple waiting transactions in a single fsync(), Cassandra may have limitations here\n We discussed our database options, and potential of investing further in Cassandra to find &amp; fix these other likely deficits. It\u2019s a great platform, and we were interested, but it was hard for us to make a business case.\n So thanks for reading, and I hope you found this interesting! Should anyone wish to continue this work, I\u2019d be very happy to discuss.", "posttime": "2021-08-08 11:49:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,apache,deficits,cassandra", "title": "Apache Cassandra \u4e2d\u7684\u6027\u80fd\u7f3a\u9677", "title_en": "Performance Deficits in Apache Cassandra", "transed": 1, "url": "http://literatejava.com/database/performance-deficits-in-apache-cassandra/", "via": "", "real_tags": ["\u6027\u80fd", "apache", "deficits", "cassandra"]}]