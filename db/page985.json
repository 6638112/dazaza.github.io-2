[{"category": "", "categoryclass": "", "imagename": "a751cb318fc42d8fe968bad3597031f8.jpg", "infoid": 1009454, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6570\u5b57\u662f\u76f8\u5f53\u6709\u7528\u7684\u3002\u8fd9\u662f\u4e0d\u5e78\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e5f\u76f8\u5f53\u4ee4\u4eba\u56f0\u60d1\u3002\u6211\u4eec\u7684\u5927\u8111\u5f88\u96be\u7406\u89e3\u6570\u5b57\u5217\u8868\uff0c\u6240\u4ee5\u6211\u4eec\u96c7\u4f63\u4e86\u4e00\u4e2a\u60f3\u8c61\u4e2d\u7684\u670b\u53cb\u6765\u5e2e\u52a9\u6211\u4eec--\u5c31\u662f\u201c\u5e73\u5747\u6570\u201d\u3002\n\u5982\u679c\u4e0d\u6c42\u52a9\u4e8e\u5e73\u5747\u6570\uff0c\u5f88\u96be\u8c08\u8bba\u3001\u751a\u81f3\u5f88\u96be\u60f3\u8c61\u6570\u5b57--\u8fc7\u53bb90\u5e74\uff0c\u6807\u51c6\u666e\u5c14500\u6307\u6570\u7684\u5e73\u5747\u5e74\u56de\u62a5\u7387\u4e3a9.8%\uff1b\u82f1\u56fd\u5bb6\u5ead\u5e73\u5747\u6536\u5165\u4e3a29,600\u514b\u6717\uff1b\u4eca\u5e74\u623f\u4ef7\u5e73\u5747\u4e0a\u6da8\u4e862%\u3002\u5728\u8fc7\u53bb\u768490\u5e74\u91cc\uff0c\u6807\u51c6\u666e\u5c14500\u6307\u6570\u7684\u5e73\u5747\u5e74\u56de\u62a5\u7387\u4e3a9.8%\uff1b\u82f1\u56fd\u7684\u5e73\u5747\u5bb6\u5ead\u6536\u5165\u4e3a29,600\u82f1\u9551\uff1b\u4eca\u5e74\u7684\u623f\u4ef7\u5e73\u5747\u4e0a\u6da8\u4e862%\u3002\n\u8fd9\u4e2a\u60f3\u8c61\u4e2d\u7684\u670b\u53cb\u53ef\u80fd\u4f1a\u6709\u5e2e\u52a9-\u5e73\u5747\u4e0b\u6765\uff0c\u4f1a\u628a\u4e00\u5806\u4e71\u4e03\u516b\u7cdf\u7684\u6570\u5b57\u53d8\u6210\u6211\u4eec\u53ef\u4ee5\u601d\u8003\u7684\u6e05\u6670\u7684\u4e1c\u897f\u3002\u4f46\u662f\uff0c\u4e00\u4e2a\u865a\u6784\u7684\u670b\u53cb\u7ec8\u7a76\u662f\u865a\u6784\u7684\u3002\u5e73\u5747\u6570\u4e0d\u5b58\u5728\u3002\n\u95ee\u9898\uff1a\u5047\u8bbe\u81ea\u52a9\u9910\u670910\u9053\u83dc\u3002\u6bcf\u9053\u83dc\u5e73\u5747\u9700\u89811\u4e2a\u5c0f\u65f6\u7684\u51c6\u5907\u65f6\u95f4\uff0c\u800c\u4e14\u53ef\u4ee5\u540c\u65f6\u51c6\u5907\u3002\u81ea\u52a9\u9910\u5e73\u5747\u9700\u8981\u591a\u957f\u65f6\u95f4\u624d\u80fd\u51c6\u5907\u597d\uff1f\n\u89e3\u51b3\u65b9\u6848\uff1a\u6709\u4e9b\u83dc\u80b4\u7684\u51c6\u5907\u65f6\u95f4\u4e0d\u52301\u4e2a\u5c0f\u65f6\uff0c\u800c\u53e6\u4e00\u4e9b\u83dc\u80b4\u5219\u9700\u8981\u66f4\u957f\u7684\u65f6\u95f4\u3002\u4f46\u662f\u8981\u8ba9\u81ea\u52a9\u9910\u51c6\u5907\u597d\uff0c\u6211\u4eec\u9700\u8981\u684c\u4e0a\u7684\u6bcf\u4e00\u9053\u83dc--\u53ea\u9700\u8981\u4e00\u9053\u665a\u83dc\u5c31\u53ef\u4ee5\u63a8\u8fdf\u6574\u987f\u996d\u7684\u65f6\u95f4\uff01\u81f3\u5c11\u4e00\u9053\u83dc\u7684\u7528\u65f6\u6781\u6709\u53ef\u80fd\u8d85\u8fc7\u4e00\u4e2a\u5c0f\u65f6\uff0c\u6240\u4ee5\u81ea\u52a9\u9910\u51c6\u5907\u597d\u7684\u5e73\u5747\u65f6\u95f4\u8d85\u8fc7\u4e00\u4e2a\u5c0f\u65f6\u3002\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u9879\u76ee\u4f30\u8ba1\u7ecf\u5e38\u662f\u4e0d\u6b63\u786e\u7684-\u57fa\u4e8e\u5e73\u5747\u7684\u65f6\u95f4\u4f30\u8ba1\u8fc7\u4e8e\u4e50\u89c2\u3002\n\u4f60\u7684\u670b\u53cb\u4e0d\u4f1a\u4ecb\u610f\u4f60\u63d0\u4f9b\u665a\u9910\u8fdf\u5230\uff0c\u4f46\u5546\u754c\u5c31\u4e0d\u90a3\u4e48\u5bbd\u5bb9\u4e86-\u5ef6\u8bef\u4f1a\u6d88\u8017\u5b9d\u8d35\u7684\u8d44\u6e90\uff0c\u5e76\u6270\u4e71\u9879\u76ee\u6240\u9700\u7684\u4e0b\u6e38\u5de5\u4f5c\u3002\n\u89e3\u91ca\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\u7684\u4e00\u79cd\u5e38\u89c1\u65b9\u6cd5\u662f\u57283\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u4f30\u8ba1\uff1a\u5e73\u5747\u60c5\u51b5\u3001\u6700\u597d\u60c5\u51b5\u548c\u6700\u574f\u60c5\u51b5\u3002\u8bb8\u591a\u516c\u53f8\u5728\u89c4\u5212\u548c\u9884\u6d4b\u65f6\u90fd\u4f1a\u8fd9\u6837\u505a\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u5e76\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u95ee\u9898\u3002\u6b63\u5982\u6211\u4eec\u5c06\u5728\u672a\u6765\u7684\u6587\u7ae0\u4e2d\u63a2\u8ba8\u7684\u90a3\u6837\uff0c\u8fd9\u79cd\u573a\u666f\u89c4\u5212\u98ce\u683c\u6ce8\u5b9a\u4f1a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f4e\u4f30\u98ce\u9669\uff0c\u800c\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u9ad8\u4f30\u98ce\u9669\u3002\n\u65af\u7279\u5170\u5947\u535a\u58eb\uff1a\u5982\u679c\u6211\u53ca\u65f6\u5411\u524d\u8d70\u2026\u2026\u3002\u8981\u67e5\u770b\u66ff\u4ee3\u671f\u8d27\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u3002\u770b\u5230\u5373\u5c06\u5230\u6765\u7684\u51b2\u7a81\u7684\u6240\u6709\u53ef\u80fd\u7ed3\u679c\u3002\n\u8fd9\u5c31\u662f\u8499\u7279\u5361\u6d1b\u6a21\u62df\u80cc\u540e\u7684\u6838\u5fc3\u7406\u5ff5--\u63a2\u7d22\u201c\u66ff\u4ee3\u672a\u6765\u201d\uff0c\u6216\u79f0\u6a21\u62df\uff0c\u4ee5\u4e86\u89e3\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002\n\u5047\u8bbe\u6bcf\u9053\u83dc\u7684\u51c6\u5907\u65f6\u95f4\u4e3a45-75\u5206\u949f(\u5e73\u5747\u4ecd\u4e3a1\u5c0f\u65f6)\u3002\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c1000\u4e2a\u6a21\u62df\uff0c\u5728\u8fd9\u4e2a\u6a21\u62df\u4e2d\uff0c\u6211\u4eec\u4e3a\u6bcf\u9053\u83dc\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u65f6\u95f4\uff0c\u65f6\u95f4\u572845\u523075\u5206\u949f\u4e4b\u95f4\u3002\u5f53\u6700\u540e\u4e00\u9053\u6a21\u62df\u83dc\u80b4\u51c6\u5907\u597d\u65f6\uff0c\u6bcf\u4e00\u9053\u6a21\u62df\u81ea\u52a9\u9910\u90fd\u51c6\u5907\u597d\u4e86\u3002\n\u5f53\u6211\u4eec\u505a\u5b8c\u540e\uff0c\u6211\u4eec\u4f1a\u6709\u4e00\u4e2a1000\u6b21\u53ef\u80fd\u7684\u81ea\u52a9\u9910\u6b21\u6570\u7684\u6e05\u5355\u3002\u5176\u4e2d\u4e00\u4e9b\u4f1a\u5f88\u9ad8-\u4e00\u4e2a\u4e0d\u5e78\u7684\u6a21\u62df\u53ef\u80fd\u9700\u898175\u5206\u949f\u624d\u80fd\u5b8c\u6210\u4e00\u9053\u83dc\u3002\u6709\u4e9b\u4f1a\u5f88\u4f4e-\u5e78\u8fd0\u7684\u6a21\u62df\u53ef\u80fd\u4f1a\u8ba9\u6bcf\u9053\u83dc\u82b1\u8d39\u4e0d\u523060\u5206\u949f\u3002\n\u5982\u679c\u6211\u4eec\u770b\u4e00\u904d\u8fd9\u4e2a\u5217\u8868\uff0c\u627e\u51fa\u9608\u503c\uff0c50%\u7684\u65f6\u95f4\u5728\u4e0a\u9762\uff0c50%\u7684\u65f6\u95f4\u5728\u4e0b\u9762\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u627e\u5230\u4e86\u771f\u6b63\u7684\u5e73\u5747\u81ea\u52a9\u9910\u65f6\u95f4\u3002\u7ed3\u679c\u662f\u5927\u7ea670\u5206\u949f\u3002\n\u5728\u4f60\u7684\u4e0b\u4e00\u6b21\u665a\u5bb4\u4e4b\u5916\uff0c\u53ea\u8981\u51b3\u7b56\u4e2d\u5b58\u5728\u4e0d\u786e\u5b9a\u6027\uff0c\u4e0d\u540c\u7684\u7ed3\u679c\u6709\u4e0d\u540c\u7684\u98ce\u9669\uff0c\u8499\u7279\u5361\u6d1b\u6a21\u62df\u5c31\u4f1a\u5f88\u6709\u7528\uff1a\n\u9000\u4f11\u8ba1\u5212--\u4f60\u9700\u8981\u627e\u5230\u4e00\u4e2a\u80fd\u8ba9\u4f60\u7684\u50a8\u84c4\u91d1\u7ef4\u6301\u591a\u4e45\u7684\u63d0\u6b3e\u7387\n\u516c\u53f8\u9884\u7b97-\u6bcf\u4e2a\u90e8\u95e8\u5bf9\u5176\u9884\u7b97\u9700\u6c42\u90fd\u6709\u4e00\u4e2a\u4e0d\u786e\u5b9a\u7684\u4f30\u8ba1\uff0c\u9996\u5e2d\u6267\u884c\u5b98\u9700\u8981\u51b3\u5b9a\u603b\u4f53\u7559\u51fa\u591a\u5c11\u73b0\u91d1\u3002\n\u4f9b\u5e94\u94fe\u7ba1\u7406--\u5982\u679c\u4f60\u60f3\u50a8\u5b58\u8db3\u591f\u7684\u5e93\u5b58\uff0c\u786e\u4fe1\u4e0d\u4f1a\u7528\u5b8c\uff0c\u4f46\u53c8\u4e0d\u60f3\u79ef\u538b\u3002\n\u7535\u5b50\u8868\u683c\u63d2\u4ef6-\u6700\u53d7\u6b22\u8fce\u7684Excel\u63d2\u4ef6\u662f@Risk\u548cCrystal Ball\u3002\u6700\u6d41\u884c\u7684\u5de5\u4f5c\u8868\u63d2\u4ef6\u662fRisk Solver\u3002\n\u72ec\u7acb\u5de5\u5177--\u7b80\u5355\u7684\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u5de5\u5177\uff0c\u5982Guesstimate\uff0c\u4f7f\u5165\u95e8\u53d8\u5f97\u5bb9\u6613\uff0c\u8fd8\u6709\u66f4\u590d\u6742\u7684\u684c\u9762\u6a21\u62df\u5305\uff0c\u5982Analytica\u3002\n\u6211\u4eec\u8d8a\u6765\u8d8a\u591a\u5730\u4f7f\u7528\u6570\u5b57\u6765\u6307\u5bfc\u6211\u4eec\u7684\u51b3\u7b56\uff0c\u8fd9\u662f\u4e00\u4ef6\u5f88\u68d2\u7684\u4e8b\u60c5\uff0c\u8fd9\u662f\u901a\u8fc7\u8ba1\u7b97\u673a\u548c\u7535\u5b50\u8868\u683c\u7b49\u5de5\u5177\u5b9e\u73b0\u7684\u3002\n\u4e3a\u4e86\u8ba9\u6211\u4eec\u7684\u51b3\u7b56\u66f4\u4e0a\u4e00\u5c42\u697c\uff0c\u6211\u4eec\u9700\u8981\u5f00\u59cb\u9762\u5bf9\u4e0d\u786e\u5b9a\u6027\uff0c\u6211\u4eec\u9700\u8981\u65b0\u7684\u5de5\u5177\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002", "note_en": "Numbers are rather useful. This is unfortunate, because they&#39;re also rather confusing. Our brains have a hard time making sense of lists of numbers, so we employ an imaginary friend to help us \u2014\u00a0the \u201caverage\u201d.\n  It&#39;s hard to talk, or even think, about numbers without resorting to averages \u2014 the S&amp;P 500 has returned an  average of 9.8% per year over the last 90 years; the  average household income in the UK is \u00a329,600; this year house prices have risen by 2%  on average.\n    This imaginary friend can be helpful \u2014\u00a0an average turns a jumble of numbers into something legible that we can think about. But an imaginary friend is, ultimately, imaginary. The &#34;average&#34; doesn&#39;t exist.\n           Problem: Consider a buffet of 10 dishes. Each dish takes an average of 1 hour to prepare, and they can be prepared simultaneously. What&#39;s the average time it takes for the buffet to be ready?\n  Solution: Some dishes will take less than 1 hour to prepare, and others will take more. But for the buffet to be ready, we need every single dish on the table \u2014 all it takes is 1 late dish to delay the entire meal! It&#39;s highly likely that at least 1 dish will take longer than an hour, so the average time for the buffet to be ready is longer than 1 hour.\n    This is why project estimates are so often incorrect \u2014\u00a0time estimates based on averages are too optimistic.\n  Your friends won\u2019t mind if you\u2019re late to serve dinner, but the business world is less forgiving \u2014 delays use up precious resources, and disrupt downstream work required for a project.\n        A common way to account for this uncertainty is to make estimates under 3 different scenarios:  average-case,  best-case, and  worst-case. Many companies do this when planning and forecasting.\n  Unfortunately, this doesn\u2019t quite cut it. As we\u2019ll explore in a future article, this style of scenario planning is fated to underestimate risk in some settings, and overestimate risk in others.\n        Dr. Strange:\u00a0I went forward in time... to view alternate futures. To see all the possible outcomes of the coming conflict.\n    This is the core idea behind  Monte Carlo simulation \u2014\u00a0exploring \u201calternate futures\u201d, or  simulations, to understand the full range of possible outcomes.\n    Suppose each dish takes 45\u201375 minutes to prepare (still 1 hour on average). We could run 1,000 simulations, in which we pick a random time between 45 and 75 minutes for each dish. Each simulated buffet is ready when the final simulated dish is prepared.\n  When we\u2019re done, we\u2019ll have a list of 1,000 possible buffet times. Some of these will be high \u2014\u00a0an unlucky simulation could have a dish taking 75 minutes. Some will be low \u2014\u00a0a lucky simulation could have every dish taking under 60 minutes.\n  If we go through this list and find the threshold such that 50% of times are above, and 50% of times are below, then we\u2019ve found the real average buffet time. It turns out to be ~70 minutes.\n  Outside of your next dinner party, Monte Carlo simulation is useful whenever there\u2019s uncertainty involved in decision-making, and different risks associated with different outcomes:\n    Retirement planning \u2014\u00a0you need to find a rate of withdrawal that makes your nest egg last as long as you need\n  Company budgeting \u2014\u00a0each department has an uncertain estimate for their budget requirements, and the CEO needs to decide how much cash to set aside overall\n  Supply chain management \u2014\u00a0you want to stock enough inventory to be confident that you won\u2019t run out, but you don\u2019t want to overstock\n          Spreadsheet plugins \u2014\u00a0the most popular Excel plugins are\u00a0 @RISK and\u00a0 Crystal Ball. The most popular Sheets plugin is\u00a0 Risk Solver.\n  Standalone tools \u2014 simple browser-based tools like  Guesstimate make it easy to get started, and there are also more complex desktop simulation packages like  Analytica.\n    It&#39;s great that we&#39;re increasingly working with numbers to guide our decisions, enabled by computers with tools like spreadsheets.\n  To take our decision-making to the next level, we need to start working with uncertainty, and we need new kinds of tools to enable this.", "posttime": "2020-07-02 19:15:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6a21\u62df,carlo,\u6570\u5b57", "title": "\u4ec0\u4e48\u662f\u8499\u7279\u5361\u7f57\u6a21\u62df\uff1f", "title_en": "What Is Monte Carlo Simulation?", "transed": 1, "url": "https://www.forbes.com/sites/taimurabdaal/2020/07/01/what-is-monte-carlo-simulation/#567a68fb4f6c", "via": "", "real_tags": ["\u6a21\u62df", "carlo", "\u6570\u5b57"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1009453, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u684c\u9762\u73af\u5883\u7684\u552f\u4e00\u4f5c\u7528\u662f\u5c06\u7528\u6237\u8fde\u63a5\u5230\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u5305\u62ec\u4ece\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u5230\u5b9e\u9645\u663e\u793a\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u65b9\u9762\u9762\uff0c\u4f46\u4e5f\u5305\u62ec\u7ba1\u7406\u5b83\u4eec\u5e76\u786e\u4fdd\u5b83\u4eec\u516c\u5e73\u8fd0\u884c\u3002\u6bcf\u4e2a\u4eba\u90fd\u719f\u6089\u4efb\u52a1\u7ba1\u7406\u5668(\u5982ksysGuard)\u7684\u6982\u5ff5\uff0c\u4f46\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4ed6\u4eec\u8ddf\u4e0d\u4e0a\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u7684\u65b9\u5f0f\u6216Linux\u7684\u6700\u65b0\u53d1\u5c55\u3002\n\u66fe\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u4e00\u4e2aPID==\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002kwrite\u8fdb\u7a0b\u4ee3\u8868Kwrite\uff0cFirefox\u8fdb\u7a0b\u4ee3\u8868Firefox\uff0c\u5f88\u7b80\u5355\u3002\u4f46\u8fd9\u79cd\u60c5\u51b5\u5df2\u7ecf\u6539\u53d8\u4e86\u3002\u4e3e\u4e2a\u6781\u7aef\u7684\u4f8b\u5b50\uff1a\u5e73\u623f\u91cc\u7684\u4e0d\u548c\u8c10\u662f13\u4e2a\u8fc7\u7a0b\uff01\n\u5b83\u57fa\u672c\u4e0a\u4f7f\u6211\u4eec\u7684\u4efb\u52a1\u7ba1\u7406\u5668\u7684\u8fdb\u7a0b\u89c6\u56fe\u4e0d\u53ef\u7528\u3002\u6240\u6709\u7684\u540d\u5b57\u90fd\u662f\u968f\u673a\u7684\u80e1\u8a00\u4e71\u8bed\uff0c\u8bd5\u56fe\u6740\u6b7b\u5e94\u7528\u7a0b\u5e8f\u6216\u8bbe\u7f6e\u597d\u7684\u7ea7\u522b\u53d8\u6210\u4e86\u4e00\u573a\u731c\u8c1c\u6e38\u620f\u3002\u7236\u6bcd\u6811\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\uff0c\u4f46\u5b83\u4eec\u53ea\u80fd\u5e26\u7ed9\u4f60\u8fd9\u4e48\u591a\u3002\n\u5b83\u5bf9\u6211\u6765\u8bf4\u662f\u4e0d\u53ef\u7528\u7684\uff0c\u5b83\u53ef\u80fd\u5bf9\u4efb\u4f55\u7528\u6237\u90fd\u662f\u4e0d\u53ef\u7528\u7684\uff0c\u800c\u4e14\u4f1a\u59a8\u788d\u4f60\u611f\u89c9\u81ea\u5df1\u5728\u63a7\u5236\u4f60\u7684\u7535\u8111\u3002\n\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u6267\u884c\u9ad8\u5ea6\u590d\u6742\u7684\u56fe\u5f62\u64cd\u4f5c\u7684\u9ad8\u5ea6\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6240\u4ee5CPU\u4f1a\u5f88\u5403\u529b\u3002\n\u5bf9\u4e8e\u5185\u6838\u8c03\u5ea6\u5668\uff0c\u5b83\u53ea\u80fd\u770b\u523014\u4e2a\u4e0d\u900f\u660e\u7684\u8fdb\u7a0b\u3002\u5b83\u4e0d\u77e5\u9053\u5b83\u4eec\u88ab\u5f52\u4e3a\u4e24\u4e2a\u4e0d\u540c\u7684\u4e1c\u897f\u3002\u5b83\u4e0d\u53ef\u80fd\u62ff\u51fa\u516c\u5e73\u7684\u4e1c\u897f\u3002\n(\u8b66\u544a\uff1a\u663e\u7136\u5927\u591a\u6570\u8fdb\u7a0b\u90fd\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u6211\u5ffd\u7565\u4e86\u7ebf\u7a0b\u4ee5\u8868\u660e\u89c2\u70b9\uff0c\u8bf7\u4e0d\u8981\u5199\u4e0b\u8fd9\u4e00\u70b9)\u3002\n\u76ee\u524d\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684\u552f\u4e00\u5143\u6570\u636e\u663e\u793a\u5728\u7a97\u53e3\u4e0a\u3002\u8981\u5728ksysGuard(\u6216\u4efb\u4f55\u5176\u4ed6\u7cfb\u7edf\u76d1\u89c6\u5668)\u4e2d\u663e\u793a\u7528\u6237\u53cb\u597d\u7684\u540d\u79f0\u548c\u56fe\u6807\uff0c\u6211\u4eec\u5fc5\u987b\u83b7\u53d6\u6240\u6709\u8fdb\u7a0b\u7684\u5217\u8868\u3001\u83b7\u53d6\u6240\u6709\u7a97\u53e3\u7684\u5217\u8868\u5e76\u6267\u884cmashup\u3002\u63d0\u51fa\u4efb\u610f\u542f\u53d1\u5f0f\u7b97\u6cd5\u6765\u5904\u7406\u4e0d\u7a33\u5b9a\u548c\u6df7\u4e71\u7684\u7236PID\u3002\n\u5728\u7b49\u79bb\u5b50\u4f53\u7684\u4efb\u52a1\u7ba1\u7406\u5668\u4e2d\uff0c\u6211\u4eec\u5728\u76f8\u5173\u7a97\u53e3\u65c1\u8fb9\u663e\u793a\u97f3\u9891\u6307\u793a\u5668\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u6b63\u5728\u64ad\u653e\u7684\u97f3\u9891\u7684PID\u4e0e\u7a97\u53e3\u7684PID\u8fdb\u884c\u5339\u914d\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u7684\u6848\u4f8b\u6765\u8bf4\u5f88\u5bb9\u6613\u3002\u7136\u800c\uff0c\u4e00\u65e6\u6211\u4eec\u8fdb\u5165\u591a\u8fdb\u7a0b\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u8ddf\u8e2a\u7236PID\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4fee\u590d\u90fd\u53ea\u662f\u5728\u4e00\u4e2abug\u548c\u53e6\u4e00\u4e2abug\u4e4b\u95f4\u4ea4\u66ff\u3002\n\u6211\u4eec\u4f1a\u4e22\u5931\u6709\u5173\u6211\u4eec\u50ac\u751f\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u4fe1\u606f\u3002\u6211\u4eec\u6709\u9519\u8bef\u62a5\u544a\uff0c\u4eba\u4eec\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u4efb\u52a1\u7ba1\u7406\u5668\u6761\u76ee\uff0c\u5206\u522b\u5bf9\u5e94\u4e8e&#34\uff1bFirefox&34\uff1b\u548c&#34\uff1bFirefox(Nighly)&34\uff1b\u7136\u800c\uff0c\u4e00\u65e6\u8be5\u8fdb\u7a0b\u4ea7\u751f\uff0c\u4fe1\u606f\u5c31\u4f1a\u4e22\u5931-\u5e94\u7528\u7a0b\u5e8f\u4f1a\u5c06\u5176\u81ea\u8eab\u62a5\u544a\u4e3a\u4e00\u4e2a\u4e00\u81f4\u7684\u540d\u79f0\uff0c\u5e76\u4e14\u6211\u4eec\u7684\u4efb\u52a1\u680f\u4f1a\u88ab\u6df7\u6dc6\u3002\n\u73b0\u4ee3\u7684sysadmin\u5904\u7406\u7684\u4e0d\u662f\u8fdb\u7a0b\uff0c\u800c\u662fcgroup\u3002cgroup\u7ba1\u7406\u5668(\u901a\u5e38\u662fsystemd)\u5c06\u6bcf\u4e2a\u670d\u52a1\u6d3e\u751f\u4e3a\u4e00\u4e2acgroup\u3002\u5b83\u4f7f\u7528cgroup\u6765\u77e5\u9053\u4ec0\u4e48\u5728\u8fd0\u884c\uff0c\u5185\u6838\u53ef\u4ee5\u770b\u5230\u4ec0\u4e48\u4e1c\u897f\u5c5e\u4e8e\u4e00\u8d77\u3002\n\u5728\u684c\u9762\u4e0a\uff0c\u6241\u5e73\u5305\u5c06\u5728cgroup\u4e2d\u751f\u6210\u81ea\u8eab\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5173\u7684\u540d\u79f0\u7a7a\u95f4\u529f\u80fd\u3002\n\u60a8\u53ef\u80fd\u5df2\u7ecf\u5728\u4f7f\u7528Cgroup\u4e86\u3002\u4f5c\u4e3a\u8de8\u684c\u9762\u52aa\u529b\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5e0c\u671b\u5c06cgroup\u5e26\u5230\u6574\u4e2a\u684c\u9762\u3002\ncgroup\u4f7f\u7528\u7684\u53e6\u4e00\u4e2a\u5173\u952e\u90e8\u5206\u662f\u5207\u7247\u7684\u6982\u5ff5\u3002Cgroup\u57fa\u4e8e\u5c42\u6b21\u5316\u7ed3\u6784\uff0c\u5c06\u7247\u4f5c\u4e3a\u5212\u5206\u8d44\u6e90\u4f7f\u7528\u7684\u903b\u8f91\u4f4d\u7f6e\u3002\u6211\u4eec\u4e0d\u5168\u5c40\u8c03\u6574\u8d44\u6e90\uff0c\u6211\u4eec\u8c03\u6574\u7247\u5185\u7684\u8d44\u6e90\uff0c\u7136\u540e\u5b83\u5411\u8c03\u5ea6\u5668\u63d0\u4f9b\u4fe1\u606f\u3002\n\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u60a8\u53ef\u4ee5\u60f3\u8c61\u6211\u4eec\u53ea\u662f\u5728\u6811\u7684\u7ea7\u522b\u5185\u8c03\u6574\u8d44\u6e90\u3002\u7136\u540e\u5185\u6838\u795e\u5947\u5730\u5904\u7406\u5269\u4e0b\u7684\u90e8\u5206\u3002\n\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u4f18\u79c0\u7684\u7cfb\u5217\u201c\u7528cgroup\u7edf\u6cbb\u4e16\u754c\u201d\u4e2d\u627e\u5230\u3002\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u5207\u7247\u3002\u5728\u76f8\u5173\u7684\u7528\u6237\u5207\u7247\u4e2d\uff0c\u8fd9\u5c06\u7531\u5171\u4eab\u7684\u3002\n\u8fd9\u4e9b\u5207\u7247\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u9ed8\u8ba4\u4f18\u5148\u987a\u5e8f\u548cOOM\u8bbe\u7f6e\u3002\n\u73b0\u5728\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u5207\u7247\uff0c\u5e76\u4e14\u53ea\u8c03\u6574\u5207\u7247\u5185\u7684\u76f8\u5bf9\u6743\u91cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8d44\u6e90\u4f18\u5148\u7ea7\u8f6c\u79fb\u5230\u62e5\u6709\u805a\u7126\u7a97\u53e3\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u53ea\u6709\u5f53\u60a8\u7684\u7cfb\u7edf\u540c\u65f6\u4ece\u591a\u4e2a\u6765\u6e90\u6ee1\u8d1f\u8377\u8fd0\u884c\u65f6\uff0c\u8fd9\u624d\u4f1a\u6709\u4efb\u4f55\u6548\u679c\uff0c\u4f46\u5b83\u53ef\u4ee5\u63d0\u4f9b\u66f4\u5706\u6ed1\u7684\u54cd\u5e94\uff0c\u800c\u4e0d\u4f1a\u6709\u4efb\u4f55\u7f3a\u70b9\u3002\nNICE\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u503c\uff0c\u5728\u6574\u4e2a\u7cfb\u7edf\u4e2d\u662f\u5168\u5c40\u7684\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u7528\u6237\u8fdb\u7a0b\u53ea\u80fd\u964d\u4f4e\uff0c\u4f46\u51b3\u4e0d\u80fd\u63d0\u9ad8\uff0c\u4ee5\u907f\u514d\u6270\u4e71\u7cfb\u7edf\u3002\u5bf9\u4e8e\u5207\u7247\uff0c\u6211\u4eec\u53ea\u8c03\u6574\u4e0e\u6211\u4eec\u5207\u7247\u5185\u7684\u670d\u52a1\u76f8\u6bd4\u7684\u76f8\u5bf9\u6743\u91cd\u3002\u56e0\u6b64\uff0c\u8ba9\u7528\u6237\u5b8c\u5168\u63a7\u5236\u4ed6\u4eec\u7684\u5207\u7247\u662f\u5b89\u5168\u7684\u3002\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u4efb\u4f55\u8c03\u6574\u90fd\u4e0d\u4f1a\u5f71\u54cd\u7cfb\u7edf\u670d\u52a1\u6216\u5176\u4ed6\u7528\u6237\u3002\n\u5b83\u4e5f\u4e0d\u4f1a\u4e0e\u5e94\u7528\u7a0b\u5e8f\u663e\u5f0f\u8bbe\u7f6e\u7684NICE\u503c\u51b2\u7a81\u3002\u5982\u679c\u6211\u4eec\u5c06kDevelopment\u8bbe\u7f6e\u4e3a\u5177\u6709\u66f4\u5927\u7684CPU\u91cd\u91cf\uff0c\u90a3\u4e48clang\u4e0d\u4f1a\u5728\u7f16\u8bd1\u65f6\u7a81\u7136\u63a5\u7ba1\u6574\u4e2a\u8ba1\u7b97\u673a\u3002\nCgroup\u63d0\u4f9b\u4e86\u8bb8\u591a\u65b0\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u5728\u6bcf\u4e2a\u8fdb\u7a0b\u7ea7\u522b\u4e0a\u662f\u4e0d\u63d0\u4f9b\u7684\u3002\n\u6211\u4eec\u53ef\u4ee5\u7ed9OOM\u6740\u624b\u63d0\u4f9b\u63d0\u793a\uff0c\u4e0d\u4ec5\u4ec5\u662f\u91cd\u91cf\uff0c\u8fd8\u6709\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u6b63\u5e38\u7684\u9884\u671f\u8303\u56f4\u3002\n\u6240\u6709\u8fd9\u4e9b\u5bf9\u4e8e\u7528\u6237/\u7cfb\u7edf\u7ba1\u7406\u5458\u6765\u8bf4\u90fd\u5f88\u5bb9\u6613\u6dfb\u52a0\u3002\u4f7f\u7528Drop in\uff0c\u60a8\u53ea\u9700\u5c06\u4e00\u4e2a.service\u6587\u4ef6[\u793a\u4f8b\u6587\u4ef6\u94fe\u63a5]\u6dfb\u52a0\u5230~/.config/systemd/user.control/app-firefox@.service\u5e76\u64cd\u4f5c\u5176\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5373\u53ef\u3002\n[\u8b66\u544a\uff0c\u5176\u4e2d\u4e00\u4e9b\u529f\u80fd\u9002\u7528\u4e8e\u4f5c\u4e3a\u65b0\u7684\u4e34\u65f6\u670d\u52a1\u521b\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5f53\u524d\u5408\u5e76\u5230KDE/Gnome\u4e2d\u7684\u4f5c\u7528\u57df\u7684\u7cbe\u7b80\u7248\u672c-\u4e5f\u8bb8\u503c\u5f97\u4e00\u63d0\u7684\u662f]\u3002\n\u8840\u6d465.19\u548c\u6700\u8fd1\u7684Gnome\u73b0\u5728\u5c06\u5e94\u7528\u7a0b\u5e8f\u4ea7\u5375\u5230\u5404\u81ea\u7684cgroup\u4e2d\uff0c\u4f46\u6211\u4eec\u8fd8\u6ca1\u6709\u4ece\u8fd9\u4e00\u70b9\u4e0a\u5f97\u5230\u7ed3\u679c\u3002\n\u5982\u679c\u4ece\u73b0\u6709\u5e94\u7528\u7a0b\u5e8f\u6d3e\u751f\u65b0\u5e94\u7528\u7a0b\u5e8f\uff0c\u8bf7\u786e\u4fdd\u4f7f\u7528ApplicationLauncherJob\u6216CommandLauncherJob\u5e76\u8bbe\u7f6e\u5404\u81ea\u7684\u670d\u52a1\u3002\u7136\u540e\uff0c\u6240\u6709\u5176\u4ed6\u4e8b\u60c5\u90fd\u4f1a\u81ea\u52a8\u5904\u7406\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u90fd\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u6765\u751f\u6210\u65b0\u670d\u52a1\u3002\n\u5bf9\u53d1\u5c04\u7684\u6539\u53d8\u76f8\u5bf9\u8f83\u5c0f\uff0c\u4f46\u5728\u7b49\u79bb\u5b50\u4f53\u4e2d\u8fbe\u5230\u8fd9\u4e00\u70b9\u5e76\u4e0d\u5bb9\u6613-\u6709\u5f88\u591a\u8fb9\u7f18\u60c5\u51b5\u6b63\u786e\u5730\u6270\u4e71\u4e86\u5206\u7ec4\u3002\n\u5982\u679c\u67d0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662fDBUS\u6fc0\u6d3b\u7684(\u4f8b\u5982\u6211\u4eec\u7684\u5c4f\u5e55\u622a\u56fe\u5de5\u5177)\uff0c\u5219DBUS\u6fc0\u6d3b\u4e0d\u77e5\u9053\u76f8\u5173\u7684.ktop\u6587\u4ef6\u3002\n\u6b64\u5916\uff0c\u4e3a\u4e86\u5145\u5206\u5229\u7528\u7247\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6240\u6709\u540e\u53f0\u8fdb\u7a0b\u79fb\u5230\u6258\u7ba1\u670d\u52a1\u548c\u7247\u4e2d\u3002\u8fd9\u503c\u5f97\u518d\u53d1\u4e00\u7bc7(\u540c\u6837\u957f\u7684)\u535a\u5ba2\u6587\u7ae0\u3002\n\u8fd9\u662f\u4e00\u573a\u5bfb\u627e\u8fd9\u4e9b\u8fb9\u7f18\u6848\u4f8b\u7684\u6218\u6597\u3002\u5728\u8fd0\u884c\u60a8\u7684\u7cfb\u7edf\u65f6\uff0c\u8bf7\u8fd0\u884csystemd-cgls\u5e76\u6307\u51fa\u4efb\u4f55\u4e0d\u5728\u5176\u76f8\u5e94cgroup\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f(\u8fd8\u4e0d\u662f\u540e\u53f0\u670d\u52a1)\u3002\n\u56e0\u4e3a\u6211\u4eec\u53ea\u662f\u6dfb\u52a0\u5143\u6570\u636e\uff0c\u6240\u4ee5\u73b0\u5728\u4f7f\u7528\u7684\u6240\u6709\u4e1c\u897f\u90fd\u5c06\u7ee7\u7eed\u50cf\u73b0\u5728\u4e00\u6837\u5de5\u4f5c\u3002\u6240\u6709\u73b0\u6709\u5de5\u5177\u7684\u5de5\u4f5c\u65b9\u5f0f\u5b8c\u5168\u76f8\u540c\u3002\u5728\u6211\u4eec\u7684\u4efb\u52a1\u7ba1\u7406\u5668\u4e2d\uff0c\u6211\u4eec\u4ecd\u7136\u4f1a\u4fdd\u7559\u4e00\u4e2a\u8fdb\u7a0b\u89c6\u56fe(\u4e0d\u7ba1\u600e\u6837\uff0c\u5b83\u4ecd\u7136\u5f88\u6709\u7528)\uff0c\u6211\u4eec\u4e0d\u4f1a\u653e\u5165\u4efb\u4f55\u4f9d\u8d56\u4e8e\u5f53\u524dcgroup\u5143\u6570\u636e\u7684\u4ee3\u7801\u3002\u6211\u4eec\u5c06\u4fdd\u7559\u73b0\u6709\u7684\u5c06\u7a97\u53e3\u4e0e\u5916\u90e8\u4e8b\u4ef6\u8fdb\u884c\u5339\u914d\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0ccgrou\u5143\u6570\u636e\u5c06\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u5f71\u54cd\u56e0\u7d20\u3002\u60c5\u51b5\u4e0d\u4f1a\u53d8\u5f97\u66f4\u7cdf\uff0c\u4f46\u6211\u4eec\u4e0d\u4f1a\u5229\u7528\u8fd9\u91cc\u8ba8\u8bba\u7684\u65b0\u529f\u80fd\uff0c", "note_en": "A desktop environment&#39;s sole role is to connect users to their applications. This includes everything from launching apps to actually displaying apps but also managing them and making sure they run fairly. Everyone is familiar the concept of a &#34;Task manager&#34; (like ksysguard), but over time they haven&#39;t kept up with the way applications are being developed or the latest developments from Linux.\n   There used to be a time where one PID == one &#34;application&#34;. The kwrite process represents Kwrite, the firefox process represents Firefox, easy. but this has changed. To pick an extreme example:  Discord in a flatpak is 13 processes!\n It basically renders our task manager&#39;s process view unusable. All the names are random gibberish, trying to kill the application or setting nice levels becomes a guessing game. Parent trees can help, but they only get you so far.\n It&#39;s unusable for me, it&#39;s probably unusable for any user and gets in the way of feeling in control of your computer.\n    One will be straining the CPU because it is a highly sophisticated application doing highly complicated graphic operations\n To a kernel scheduler all it would see are 14 opaque processes. It has no knowledge that they are grouped as two different things. It won&#39;t be able to come up with something that&#39;s fair.\n  (caveat: Obviously most proceses are idling, and I&#39;ve ignored threads for the purposes of making a point, don&#39;t write about it)\n  Currently the only metadata of the &#34;application&#34; is on a window. To show a user friendly name and icon in ksysguard (or any other system monitor) we have to fetch a list of all processes, fetch a list of all windows and perform a mashup. Coming up with arbitrary heuristics for handling parent PIDs which is unstable and messy.\n  In plasma&#39;s task manager we show an audio indicator next to the relevant window, we do this by matching PIDs of what&#39;s playing audio to the PID of a window. Easy for the simple case... however as soon as we go multi-process we have to track the parent PID, and each &#34;fix&#34; just alternates between one bug and another.\n  We lose information on what &#34;app&#34; we&#39;ve spawned. We have bug reports where people have two different taskmanager entries for &#34;Firefox&#34; and &#34;Firefox (nightly)&#34; however once the process is spawned that information is lost - the application reports itself as one consistent name and our taskbar gets confused.\n    A modern sysadmin doesn&#39;t deal in processes, but cgroups. The cgroup manager (which will be typically systemd) spawns each service as one cgroup. It uses cgroups to know what&#39;s running, the kernel can see what things belong together.\n On the desktop flatpaks will spawn themselves in cgroups so that they can use the relevant namespace features.\n You&#39;re probably already using cgroups. As part of a  cross-desktop effort we want to bring cgroups to the entire desktop.\n      Another key part of cgroup usage is the concept of slices. Cgroups are based on a heirachical structure, with slices as logical places to split resource usage. We don&#39;t adjust resources globally, we adjust resources within our slice, which then provides information to the scheduler.\n  Conceptually you can imagine that we just adjust resources within our level of a tree. Then the kernel magically takes care of the rest.\n More information can be found on slices in this excellent series   World domination with cgroups.\n  This means we can set up some predefined slices. Within the relevant user slice this will consist shared of\n  Each of these slices can be given some default prioritisations and OOM settings out of the box.\n  Now that we are using slices, and only adjusting our relative weight within the slice, we can shift resource priority to the application owning the focused window.\n This only has any effect if your system is running at full steam from mulitple sources at once, but it can provide a slicker response at no drawback.\n  Nice is a single value, global across the entire system. Because of this user processes can only be lowered, but never raised to avoid messing with the system. With slices we&#39;re only adjusting relative weight compared to services within our slice. So it&#39;s safe to give the user full control within their slice. Any adjustments to an application, won&#39;t impact system services or other users.\n It also doesn&#39;t conflict with nice values set by the application explicitly. If we set kdevelop to have greater CPU weight, clang won&#39;t suddenly take over the whole computer when compiling.\n   CGroup&#39;s come with a lot of new features that aren&#39;t available on a per-process level.\n  We can provide hints to the OOM killer not just with a weight but with expected ranges that should be considered normal\n All of this is easy to add for a user / system administrator. Using drop in&#39;s one can just add a .service file [example file link] to ~/.config/systemd/user.control/app-firefox@.service and manipulate any of these.\n [caveat, some of those features works for applications created as new transient services, not the lite version using scopes that&#39;s currently merged in KDE/Gnome - maybe worth mentioning]\n  Plasma 5.19 and recent Gnome now spawn applications into respective cgroups, but we&#39;re not yet surfacing the results that we can get from this.\n  If spawning a new application from an existing application be sure to use either   ApplicationLauncherJob or   CommandLauncherJob and set the respective service. Everything else is then handled automagically. You should be using these classes anyway for spawning new services.\n  That change to the launching is relatively tiny, but getting to this point in Plasma wasn&#39;t easy - there were a lot of edge cases that messed up the grouping correctly.\n dbus activation has no knowledge of the associated .desktop file if an application is DBus activated (such as spectacle our screenshot tool)\n Also to fully capitalise on slices we need to move all our background processes into managed services and slices. This is worthy of another (equally lengthy) blog post.\n  It&#39;s been a battle to find these edge cases. Whilst running your system, please run systemd-cgls and point out any applications (not background services yet) that are not in their appropriate cgroup.\n   As we&#39;re just adding metadata, everything used now will continue to work exactly as it does now. All existing tools work exactly the same. Within our task manager we still will keep a process view (it&#39;s still useful regardless) and we won&#39;t put in any code that relies on the cgroup metadata present. We&#39;ll keep the existing heuristics for matching windows with external events, cgroup metadata would just be a strongly influence factor in that. Things won&#39;t get worse, but we won&#39;t be able to capitalise on the new features discussed here,", "posttime": "2020-07-02 19:14:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d41\u7a0b,modern,\u5e94\u7528\u7a0b\u5e8f", "title": "\u5c06\u73b0\u4ee3\u6d41\u7a0b\u7ba1\u7406\u5e26\u5165\u53f0\u5f0f\u673a", "title_en": "Bringing modern process management to the desktop", "transed": 1, "url": "http://blog.davidedmundson.co.uk/blog/modern-process-management-on-the-desktop/", "via": "", "real_tags": ["\u6d41\u7a0b", "modern", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "26fdee2c448461ddf132a6d952b03710.png", "infoid": 1009452, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PermalLink GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d\u3002\n\u8fd9\u672c\u8d28\u4e0a\u662f\u4e00\u4e2aJIT\uff0c\u5176\u4e2d\u4ee3\u7801\u53ea\u88ab\u4f7f\u7528\u4e00\u6b21\uff0c\u7136\u540e\u88ab\u8986\u76d6\u5e76\u518d\u6b21\u4f7f\u7528\u3002(\u8bf7\u6ce8\u610f\uff0c\u6b64\u4ee3\u7801\u5728\u5b9e\u65bdW^X\u5b89\u5168\u6027\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u4e0d\u8d77\u4f5c\u7528\u3002\u76ee\u524d\uff0cx86\u4e0a\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u5f3a\u5236\u6267\u884cW^X\uff0c\u56e0\u6b64\u4e0a\u8ff0\u6280\u672f\u5728\u5927\u591a\u6570\u8ba1\u7b97\u673a\u4e0a\u90fd\u662f\u53ef\u884c\u7684\u3002\u5bf9\u4e8e\u6b64\u8c03\u67e5\uff0c\u6211\u5c06\u5047\u8bbe\u6ca1\u6709\u5f3a\u5236\u6267\u884cW^X)\u3002\nx86\u5904\u7406\u5668\u5b8c\u5168\u652f\u6301\u81ea\u4fee\u6539\u4ee3\u7801(SMC)\uff0c\u4e0d\u9700\u8981\u7a0b\u5e8f\u5411\u5904\u7406\u5668\u53d1\u51fa\u4efb\u4f55\u4fe1\u53f7(\u4f8b\u5982\uff0c\u4e0d\u9700\u8981\u5237\u65b0\u6307\u4ee4)\uff0c\u8fd9\u610f\u5473\u7740x86\u5904\u7406\u5668\u9700\u8981\u81ea\u52a8\u68c0\u6d4b\u5bf9\u6307\u4ee4\u6570\u636e\u7684\u5199\u5165\u5e76\u7acb\u5373\u5904\u7406\u5b83\u4eec\u3002\n\u4e0a\u8ff0\u4ee3\u7801\u867d\u7136\u4e0d\u662f\u771f\u6b63\u7684SMC\u65b9\u6848\uff0c\u4f46\u7531\u4e8eJIT\u4ee3\u7801\u5728\u9700\u8981\u5199\u5165\u65f6\u9a7b\u7559\u5728\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u4e2d\uff0c\u56e0\u6b64\u901a\u5e38\u4f1a\u68c0\u6d4b\u5230\u5b83\u3002\u6b64\u7c7b\u5199\u5165\u901a\u5e38\u6d89\u53ca\u4f7f\u7f13\u5b58\u65e0\u6548\u548c\u5237\u65b0\u7ba1\u9053\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u6027\u80fd\u635f\u5931\u3002\n\u6211\u5728\u7814\u7a76\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u6267\u884cGF(216)\u4e58\u6cd5\u7684\u7b97\u6cd5\u65f6\u9047\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u6ce8\u610f\u5230\u6709\u4e00\u4e9b\u6280\u672f\u53ef\u4ee5\u51cf\u8f7b\u8fd9\u79cd\u6027\u80fd\u635f\u5931\u3002\n\u7136\u800c\uff0c\u6211\u4e00\u76f4\u65e0\u6cd5\u627e\u5230\u66f4\u591a\u5173\u4e8e\u8fd9\u65b9\u9762\u7684\u4fe1\u606f\uff0c\u66f4\u4e0d\u7528\u8bf4\u5b9e\u9645\u7684\u6d4b\u8bd5\u7ed3\u679c\u4e86\u3002\u56e0\u6b64\uff0c\u6b64\u5b58\u50a8\u5e93\u6258\u7ba1\u4e00\u4e9b\u6d4b\u8bd5\u4ee3\u7801\u548c\u5b9e\u9a8c\u7ed3\u679c\uff0c\u65e8\u5728\u7814\u7a76\u51cf\u5c11\u6b64\u7c7b\u4ee3\u7801\u5f00\u9500\u7684\u65b9\u6cd5\u3002\n\u6211\u8bd5\u7740\u60f3\u51fa\u4e00\u4e9b\u53ef\u80fd\u5bf9\u4e0a\u8ff0\u884c\u4e3a\u6709\u5f71\u54cd\u7684\u573a\u666f\uff0c\u5e76\u5c06\u5b83\u4eec\u5b9e\u73b0\u5230\u6b64\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\n\u6700\u597d\u67e5\u770b\u4ee3\u7801\u4ee5\u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u6d4b\u8bd5\uff0c\u4f46\u662f\u4e0b\u9762\u5217\u51fa\u4e86\u6240\u5c1d\u8bd5\u7684\u60f3\u6cd5\u7684\u6458\u8981\uff1a\n\u663e\u800c\u6613\u89c1\u7684\u65b9\u6cd5-\u5373\uff0c\u53ea\u9700\u7f16\u5199\u4ee3\u7801\u5e76\u6267\u884c\u5b83\uff0c\u5982\u672c\u9875\u9762\u9876\u90e8\u6240\u793a(\u5728\u7ed3\u679c\u4e2d\u6807\u8bb0\u4e3ajit_Plain)\u3002\u8fd8\u4f1a\u6d4b\u8bd5\u53cd\u5411\u7f16\u5199\u4ee3\u7801\uff0c\u4ee5\u67e5\u770b\u8fd9\u662f\u5426\u6709\u4efb\u4f55\u6548\u679c(\u6807\u8bb0\u4e3ajit_verse)\u3002\n\u53c2\u8003\uff1aJIT-TO\u5e76\u6267\u884c\u5355\u72ec\u7684\u4f4d\u7f6e\u3002\u8fd9\u5e76\u6ca1\u6709\u8fbe\u5230\u4e0a\u9762\u7684\u76ee\u7684\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u6267\u884cJIT\u4ee3\u7801\uff0c\u800c\u662f\u7528\u6765\u6f14\u793a\u6ca1\u6709\u4ee3\u4ef7\u7684\u7406\u60f3\u60c5\u51b5(\u6807\u8bb0\u4e3ajit_only)\uff0c\u4ee5\u53ca\u8ba1\u7b97\u5904\u7406\u5668\u4e0a\u7684SMC\u4ee3\u4ef7\u3002\n\u5c06\u4ee3\u7801\u5199\u5165\u4e0d\u53ef\u6267\u884c\u5185\u5b58(\u4e34\u65f6\u4f4d\u7f6e)\uff0c\u7136\u540e\u4f7f\u7528\u5305\u62ecmemcpy(\u6807\u8bb0\u4e3ajit_memcpy*)\u5728\u5185\u7684\u4e00\u7cfb\u5217\u6280\u672f\u5c06\u5176\u590d\u5236\u5230\u5206\u914d\u7684\u53ef\u6267\u884c\u5185\u5b58\u3002\u5982\u679c\u5185\u5b58\u590d\u5236\u610f\u5473\u7740\u547d\u4e2d\u53ef\u6267\u884c\u5185\u5b58\u7684\u5199\u64cd\u4f5c\u8f83\u5c11\uff0c\u5219\u53ef\u80fd\u610f\u5473\u7740\u9700\u8981\u8f83\u5c11\u7684\u540c\u6b65/\u5237\u65b0\u3002\n\u5728\u7f16\u5199\u4ee3\u7801\u4e4b\u524d\u2018\u6e05\u9664\u2019\u53ef\u6267\u884c\u5185\u5b58\uff0c\u5373\u4f7f\u7528Memset\u7528\u7a7a\u5b57\u8282\u8986\u76d6\u533a\u57df\uff0c\u6216\u8005\u901a\u8fc7\u5411\u6bcf\u4e2a64\u5b57\u8282\u7f13\u5b58\u7ebf(\u6807\u8bb0\u4e3ajit_clr*)\u5199\u5165\u4e00\u6b21\u6765\u91c7\u53d6\u5feb\u6377\u65b9\u5f0f\u3002\u4e5f\u8bb8\u8fd9\u6709\u52a9\u4e8e\u5728JIT\u8fdb\u7a0b\u7f13\u6162\u6267\u884c\u4e4b\u524d\u5feb\u901f\u4f7f\u7f13\u5b58\u5931\u6548\uff1f\n\u5728\u7f16\u5199\u4ee3\u7801\u4e4b\u524d/\u4e4b\u540e\u5237\u65b0\u7f13\u5b58\u7ebf(\u6807\u8bb0\u4e3ajit_clflush*)\u3002\u4e5f\u8bb8\u8fd9\u6709\u52a9\u4e8e\u63d0\u524d\u5c06\u6570\u636e\u4ece\u5355\u72ec\u7684L1\u6307\u4ee4/\u6570\u636e\u9ad8\u901f\u7f13\u5b58\u4e2d\u63a8\u9001\u51fa\u6765\uff1f\n\u5c06\u4ee3\u7801\u9884\u53d6\u5230\u4e8c\u7ea7\u7f13\u5b58\uff0c\u5e26/\u4e0d\u5e26\u5199\u63d0\u793a(\u6807\u8bb0\u4e3ajit_prefetch*)\u3002L1\u7f13\u5b58\u5355\u72ec\u7684\u6570\u636e\u548c\u6307\u4ee4\uff0c\u4f46L2\u662f\u5171\u4eab\u7684\uff0c\u56e0\u6b64\u5bf9\u6307\u4ee4\u6570\u636e\u7684\u4efb\u4f55\u66f4\u6539\u5728\u5230\u8fbe\u6307\u4ee4\u7f13\u5b58\u4e4b\u524d\u90fd\u5fc5\u987b\u7ecf\u8fc7L2\u3002\u9884\u53d6\u901a\u5e38\u7528\u4e8e\u5c06\u6570\u636e\u63d0\u5347\u5230\u8f83\u4f4e\u7ea7\u522b\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u800c\u4e0d\u662f\u964d\u7ea7\u5230\u8f83\u9ad8\u7ea7\u522b\uff0c\u4f46\u4e5f\u8bb8\u67d0\u4e9b\u5904\u7406\u5668\u53ef\u4ee5\u6ce8\u610f\u5230\u5199\u5165\u63d0\u793a\u5e76\u76f8\u5e94\u5730\u6267\u884c\u64cd\u4f5c\u3002\n\u5728\u53ef\u6267\u884c\u4ee3\u7801\u7684\u5f00\u5934\u4fdd\u7559\u4e00\u6761UD2\u6307\u4ee4\uff0c\u76f4\u5230JIT\u8fc7\u7a0b\u5b8c\u6210(\u6807\u8bb0\u4e3ajit_ud2)\u3002\u4e5f\u8bb8\u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u5904\u7406\u5668\u5728\u5199\u5165\u4ee3\u7801\u65f6\u9884\u53d6\u4ee3\u7801\n\u5728\u591a\u4e2a\u9884\u5148\u5206\u914d\u7684\u9875\u9762(\u6807\u8bb0\u4e3ajit_*region)\u4e4b\u95f4\u4ea4\u66ff\u3002\u8fd9\u53ef\u80fd\u6709\u52a9\u4e8e\u964d\u4f4eJIT\u5199\u5165\u89e6\u53ca\u7f13\u5b58\u4ee5\u4f9b\u6267\u884c\u7684\u5185\u5b58\u7684\u53ef\u80fd\u6027\uff0c\u4f46\u662f\uff0c\u5c31\u7f13\u5b58\u4f7f\u7528\u800c\u8a00\uff0c\u8fd9\u662f\u76f8\u5f53\u6602\u8d35\u7684\u3002\n\u5c1d\u8bd5\u901a\u8fc7\u8df3\u8fc7\u5927\u91cf\u7f13\u5b58\u884c(\u6807\u8bb0\u4e3ajit_jmp*)\u6765\u6e05\u9664\u6307\u4ee4\u7f13\u5b58\u3002\u4f46\u662f\uff0c\u53ef\u80fd\u4f1a\u98a0\u7c38\u6307\u4ee4\u7f13\u5b58\u3002\n\u67e5\u770b\u5728\u7f16\u5199\u548c\u6267\u884c\u4ee3\u7801\u4e4b\u95f4\u662f\u5e94\u7528\u5185\u5b58\u56f4\u680f(MFENCE\u6307\u4ee4)\u8fd8\u662f\u5e8f\u5217\u5316\u64cd\u4f5c(CPUID\u6307\u4ee4)\u4f1a\u6709\u4ec0\u4e48\u4e0d\u540c(\u6807\u8bb0\u4e3ajit_mfigure\u548cjit_Serialize)\u3002\n\u5411\u6620\u5c04\u5230\u540c\u4e00\u7269\u7406\u9875\u7684\u4e0d\u540c\u865a\u62df\u5730\u5740\u5199\u5165\u548c\u6267\u884c(\u6807\u8bb0\u4e3ajit_DUAL_MAPPING)\u3002\u82f1\u7279\u5c14\u624b\u518c\u5efa\u8bae\uff0c\u5728\u6267\u884c\u7f16\u5199\u7684\u4ee3\u7801\u4e4b\u524d\uff0c\u6b64\u7c7b\u884c\u4e3a\u9700\u8981\u5e8f\u5217\u5316\u6307\u4ee4\uff0c\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u65e0\u9700\u8c03\u7528\u81ea\u4fee\u6539\u4ee3\u7801\u884c\u4e3a\u5373\u53ef\u7f16\u5199\u4ee3\u7801\u3002\n\u8bf7\u6ce8\u610f\uff0cJIT\u4f8b\u7a0b\u672c\u8eab\u4f1a\u9010\u4e2a\u5199\u51fa\u6307\u4ee4\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c1d\u8bd5\u5c06\u591a\u6761\u6307\u4ee4\u6279\u5904\u7406\u5230\u4e00\u6b21\u5199\u5165\u4e2d\u3002\n\u4f7f\u7528RDTSC\u6307\u4ee4\u6d4b\u8bd5\u6027\u80fd\u3002\u4e3a\u4e86\u51cf\u5c11\u53ef\u53d8\u6027\uff0c\u5728\u591a\u6b21\u8fed\u4ee3\u4e2d\u5bf9\u5176\u8fdb\u884c\u6d4b\u91cf\uff0c\u5e76\u6267\u884c\u591a\u6b21\u8bd5\u9a8c\u4ee5\u627e\u5230\u6700\u5feb\u7684\u5ea6\u91cf\u3002\n\u4e0b\u9762\u5217\u51fa\u7684\u7ed3\u679c\u5728\u4e0d\u540c\u7684\u5904\u7406\u5668\u5fae\u4f53\u7cfb\u7ed3\u6784\u4e2d\u5dee\u5f02\u5f88\u5927\u3002\u6d4b\u8bd5\u5728\u5404\u79cd\u7cfb\u7edf\u4e0a\u6267\u884c\uff0c\u5305\u62ec\u5728\u865a\u62df\u673a\u4e0a\u6267\u884c\u3002\u6240\u6709\u4ee3\u7801\u90fd\u662f\u7528GCC\u4e3ax86-64\u7f16\u8bd1\u7684\u3002\n\u5728\u8db3\u4ee5\u8d85\u8fc7\u4e00\u7ea7\u7f13\u5b58\u5927\u5c0f\u7684\u591a\u4e2a\u533a\u57df\u4e4b\u95f4\u4ea4\u66ff\u4f3c\u4e4e\u662f\u6700\u6709\u6548\u7684\u6280\u672f(Jit_16region)\uff0c\u4f46\u662f\u8fd9\u53ef\u80fd\u4f1a\u5f71\u54cd\u5176\u4ed6\u4ee3\u7801\u7684\u6027\u80fd\u3002\n\u5728\u7f16\u5199\u4ee3\u7801\u4e4b\u524d\u6e05\u9664\u76ee\u6807\u662f\u7b2c\u4e8c\u6709\u6548\u7684\u65b9\u6cd5(\u6bd4\u4e0a\u9762\u7565\u5dee)\uff0c\u7279\u522b\u662f\u5728\u6bcf\u4e2a\u7f13\u5b58\u884c\u53ea\u6e05\u9664\u4e00\u4e2a\u5b57\u8282(Jit_Clr_1byte)\u7684\u60c5\u51b5\u4e0b\u3002\n\u5728Haswell\u53ca\u66f4\u9ad8\u7248\u672c(Jit_Jmp32k_Unalign)\u4e2d\uff0c\u4f7f\u7528\u89e6\u53ca\u6240\u6709\u7f13\u5b58\u7ebf\u7684\u8df3\u8f6c\u6e05\u9664\u6307\u4ee4\u7f13\u5b58\u4f3c\u4e4e\u4e5f\u662f\u6709\u6548\u7684\u3002\u8fd9\u53ef\u80fd\u4f1a\u5f71\u54cd\u5176\u4ed6\u4ee3\u7801\u7684\u6027\u80fd\uff0c\u56e0\u4e3a\u5b83\u4f1a\u6709\u6548\u5730\u6e05\u9664\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u3002\n\u539f\u59cb\u7ed3\u679c\uff1aNehalem\uff0c[Sandy Bridge](Results/Sandy Bridge.txt)\uff0c[Ivy Bridge](Results/Ivy Bridge(Win64).txt)\uff0cHaswell\uff0c[Broadwell](Results/Broadwell(Xen).txt)\uff0cSkylake\uff0c[Skylake-X](Results/Skylake-X(Win64).txt)\u3002\nSilvermont(\u539f\u59cb\u7ed3\u679c)\u62f7\u8d1d\u4f3c\u4e4e\u662f\u6700\u6709\u6548\u7684\uff0c\u7279\u522b\u662f\u5728\u62f7\u8d1d\u4e2d\u4f7f\u7528\u975e\u4e34\u65f6\u5199\u5165\u65f6(Jit_Memcpy_SsE2_Nt)\u3002\n\u5728\u8be5\u533a\u57df\u53d1\u51faCLFLUSH(Jit_Clflush)\u6216PREFETCHW(Jit_Prefetchw)\u4f3c\u4e4e\u4e5f\u6709\u6548(\u6211\u4ee5\u4e3aSilvermont\u4e0d\u652f\u6301Broadwell\u4e2d\u6dfb\u52a0\u7684PREFETCHW\u6307\u4ee4\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5b83\u652f\u6301\u6765\u81ea3DNow\u7684PREFETCHW\u6307\u4ee4\uff01)\u3002\nGoldmont([RAW RESULT](Results/Goldmont(Win64).txt))\u6700\u6709\u6548\u7684\u6280\u672f\u4f3c\u4e4e\u662f\u4f7f\u7528\u975e\u4e34\u65f6\u5199\u5165\u8fdb\u884c\u590d\u5236(Jit_Memcpy_Sse2_Nt)\uff0c\u4f7f\u7528\u975e\u4e34\u65f6\u5199\u5165\u6e05\u9664\u5185\u5b58(Jit_Clr_SsE2_Nt)\uff0c\u6216\u8005\u5728\u5199\u5165\u4e4b\u524d\u5bf9\u53ef\u6267\u884c\u533a\u57df\u53d1\u51faCLFLUSHOPT(Jit_Clflushopt)\u3002\n\u4f7f\u7528\u975e\u4e34\u65f6\u5199\u5165(Jit_Memcpy_Sse2_Nt)\u8fdb\u884c\u62f7\u8d1d\u4f3c\u4e4e\u6bd4\u76f4\u63a5\u65b9\u6cd5\u7565\u6709\u4f18\u52bf\u3002\nZen1([RAW RESULT](Results/Zen1(VM).txt))\u590d\u5236\u4f3c\u4e4e\u662f\u552f\u4e00\u6709\u6548\u7684\u65b9\u6cd5(jit_memcpy*)\u3002\u4e0e\u6b64\u5904\u7684\u5176\u4ed6CPU\u4e0d\u540c\uff0c\u975e\u4e34\u65f6\u5199\u5165\u7684\u6027\u80fd\u8f83\u5dee\n\u4e0e\u82f1\u7279\u5c14\u9177\u777fCPU\u4e0d\u540c\uff0c\u5728\u82f1\u7279\u5c14\u9177\u777fCPU\u4e0a\uff0c\u8986\u76d6\u6307\u4ee4\u4ee3\u7801\u4f3c\u4e4e\u4f1a\u4f7f\u6307\u4ee4\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u65e0\u6548\uff0c\u800cZen1\u4f3c\u4e4e\u4fdd\u6301\u4e86\u4e24\u8005\u4e4b\u95f4\u7684\u67d0\u79cd\u540c\u6b65\u3002\u8fd9\u610f\u5473\u7740\uff0c\u91cd\u590d\u8986\u76d6\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u4e2d\u5b58\u5728\u7684\u76f8\u540c\u4ee3\u7801\u53ef\u80fd\u4f1a\u4ea7\u751f\u51cf\u6162\u6548\u679c\uff0c\u5373\u4f7f\u8be5\u4ee3\u7801\u4ee5\u540e\u6c38\u8fdc\u4e0d\u4f1a\u6267\u884c\u4e5f\u662f\u5982\u6b64\u3002\npiledriver(\u539f\u59cb\u7ed3\u679c)\u590d\u5236(jit_memcpy*)\u548c\u6e05\u9664(jit_clr*)\u4ee5\u53ca\u53d1\u51faPREFETCHW\u6307\u4ee4(Jit_Prefetchw)\u90fd\u662f\u6709\u6548\u7684\u3002\n\u5c3d\u7ba1\u6839\u636e\u82f1\u7279\u5c14\u7684\u6587\u6863\uff0c\u5982\u679cx86\u5904\u7406\u5668\u4f4d\u4e8e\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\uff0c\u5219\u5b83\u4eec\u4e0d\u9700\u8981\u540c\u6b65\u4ee3\u7801/\u6307\u4ee4\u6570\u636e\uff0c\u4f46\u6211\u53d1\u73b0\uff0c\u5982\u679c\u8fd9\u4e9b\u5904\u7406\u5668\u6307\u5411\u76f8\u540c\u7684\u7269\u7406\u5730\u5740\uff0c\u5219\u5b83\u4eec\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u540c\u6b65\u4ee3\u7801/\u6307\u4ee4\u6570\u636e\u3002\u6211\u53d1\u73b0\uff0c\u5373\u4f7f\u5220\u9664\u4e86\u540c\u6b65\u6307\u4ee4\uff0c\u4ee3\u7801\u4ecd\u7136\u53ef\u4ee5\u5de5\u4f5c\u3002\n\u5728\u8fd9\u91cc\u7684\u7ed3\u679c\u4e2d\u6ca1\u6709\u663e\u793a\uff0c\u4f46\u662f\u6211\u786e\u5b9e\u4f7f\u75284KB\u7684\u4ee3\u7801\u800c\u4e0d\u662f1KB\u7684\u4ee3\u7801\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u5e76\u4e14\u53d1\u73b0\u6d4b\u91cf\u5230\u7684\u65f6\u95f4\u4e5f\u5927\u7ea6\u662f\u539f\u6765\u7684\u56db\u500d\u3002\u8fd9\u8868\u660eSMC\u635f\u5931\u4e0e\u7f16\u5199\u7684\u4ee3\u7801\u91cf\u6210\u6b63\u6bd4\uff0c\u56e0\u6b64\u5728\u6267\u884c\u4efb\u4f55\u51fd\u6570\u4e4b\u524d\u7f16\u5199\u591a\u4e2a\u51fd\u6570\u7684\u60f3\u6cd5\u4f3c\u4e4e\u6ca1\u6709\u592a\u5927\u5e2e\u52a9(\u9664\u975e\u5b83\u8db3\u4ee5\u8d85\u8fc7\u4e00\u7ea7\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\uff0c\u5e76\u4e14\u5904\u7406\u5668\u662fIntel Core\u5904\u7406\u5668)\u3002\n\u4e3a\u4e86\u4f7f\u672c\u9875\u4e0d\u53ea\u662f\u6587\u672c\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u56fe\u8868\u5411\u60a8\u5c55\u793a\u4e86\u4e00\u4e9b\u53ef\u89c6\u5316\u7684\u4e1c\u897f\uff0c\u5c06SMC\u60e9\u7f5a\u4e0e\u4e0a\u9762\u6307\u51fa\u7684\u663e\u800c\u6613\u89c1\u7684\u89e3\u51b3\u65b9\u6848\u548c\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u4e86\u6bd4\u8f83\uff1a\n\u8bf7\u6ce8\u610f\uff0c\u6240\u6d4b\u8bd5\u7684\u5904\u7406\u5668/\u7cfb\u7edf\u4e4b\u95f4\u5b58\u5728\u663e\u8457\u5dee\u5f02\uff0c\u56e0\u6b64\u53ef\u80fd\u4e0d\u5e94\u8be5\u6bd4\u8f83\u5904\u7406\u5668\u4e4b\u95f4\u7684\u6d4b\u91cf\u7ed3\u679c\uff0c\u4f46\u5b83\u4ecd\u7136\u53ef\u4ee5\u663e\u793a\u4f7f\u7528\u4e0a\u9762\u627e\u5230\u7684\u6280\u672f\u53ef\u4ee5\u8fdb\u884c\u591a\u5927\u7a0b\u5ea6\u7684\u6539\u8fdb\u3002\n\u901a\u8fc7\u5e94\u7528\u4e0a\u9762\u5217\u51fa\u7684\u4e00\u4e9b\u6280\u672f\uff0c\u53ef\u4ee5\u63d0\u9ad8\u672c\u6587\u6863\u9876\u90e8\u663e\u793a\u7684\u793a\u4f8b\u7684\u6027\u80fd\uff0c\u901a\u5e38\u4f1a\u6709\u76f8\u5f53\u5927\u7684\u63d0\u9ad8\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6ca1\u6709\u5355\u4e00\u7684\u201c\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u201d\uff0c\u56e0\u4e3a\u5b83\u968f\u5e95\u5c42\u5fae\u4f53\u7cfb\u7ed3\u6784\u7684\u4e0d\u540c\u800c\u4e0d\u540c\u3002\n\u4ece\u6211\u5df2\u6709\u7684\u7ed3\u679c(\u4ee5\u53ca\u6211\u5bf9\u6211\u6ca1\u6709\u7684\u7ed3\u679c\u7684\u731c\u6d4b)\u6765\u770b\uff0c\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\uff1a\n\u5982\u679cCPU\u662fIntel Core(Nehalem\u6216\u66f4\u9ad8\u7248\u672c)\uff1a\u5728\u5185\u5b58\u533a\u57df(\u8db3\u4ee5\u5927\u4e8e\u4e00\u7ea7\u7f13\u5b58\u5927\u5c0f)\u4e4b\u95f4\u4ea4\u66ff\uff0c\u5373JIT\u5230\u4f4d\u7f6e1\uff0c\u6267\u884c\u4f4d\u7f6e1\uff0cJIT\u5230\u4f4d\u7f6e2\uff0c\u7b49\u7b49\uff0c\u5e76\u5faa\u73af(Jit_16region)\u3002\n\u5982\u679c\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u53ef\u80fd\u5b9e\u73b0\uff0c\u6216\u8005\u7f13\u5b58\u547d\u4e2d\u4e0d\u53ef\u63a5\u53d7\uff0c\u5219\u5728\u5b9e\u9645\u5199\u5165\u6307\u4ee4(Jit_Clr_1byte)\u4e4b\u524d\uff0c\u6e05\u9664\u8981\u5199\u5165\u7684\u533a\u57df\u4e2d\u7684\u6bcf64\u5b57\u8282\u7f13\u5b58\u884c1\u4e2a\u5b57\u8282\u3002\n\u5426\u5219\uff0c\u5982\u679cCPU\u662f\u82f1\u7279\u5c14\u51cc\u52a8\u3001\u82f1\u7279\u5c14\u9177\u777f2\u3001AMD\u7cfb\u521715h\u6216AMD K10\uff1a\u5c06\u4ee3\u7801\u5199\u5165\u4e34\u65f6\u4f4d\u7f6e\uff0c\u7136\u540e\u4f7f\u7528\u975e\u4e34\u65f6\u5199\u5165(Jit_Memcpy_Sse2_Nt)\u590d\u5236\u5230\u76ee\u6807\u3002SSE1/2\u5199\u5165\u5c31\u8db3\u591f\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e9bCPU\u90fd\u6ca1\u6709256\u4f4d\u52a0\u8f7d/\u5b58\u50a8\u7aef\u53e3\u3002\n\u5426\u5219\uff0c\u5982\u679cCPU\u662fAMD\u7cfb\u521717h\u300118h\u6216\u66f4\u65b0\u7684AMD\uff1a\u5c06\u4ee3\u7801\u7f16\u5199\u5230\u4e34\u65f6\u4f4d\u7f6e\uff0c\u7136\u540e\u590d\u5236\u5230\u76ee\u6807\u4f4d\u7f6e(rep mov\u4f3c\u4e4e\u662f\u6700\u4f73\u9009\u62e9(Jit_Memcpy_Movsb)\uff0c\u4f46memcpy\u4e5f\u53ef\u80fd\u5de5\u4f5c\u5f97\u5f88\u597d(Jit_Memcpy))\u3002\n\u53ef\u80fd\u6ca1\u6709\u5f97\u5230\u8db3\u591f\u7684\u91cd\u89c6\uff0c\u4f46\u6211\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u7ed3\u679c\u7279\u5b9a\u4e8e\u8fd9\u91cc\u68c0\u67e5\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002\u5982\u679c\u60a8\u5b9e\u65bd\u5355\u6b21\u4f7f\u7528\u7684JIT\u7b97\u6cd5\uff0c\u7ed3\u679c\u53ef\u80fd\u4f1a\u56e0\u7f16\u5199\u7684\u4ee3\u7801\u91cf\u548c\u5199\u5165\u65b9\u5f0f\u7684\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c(\u4f8b\u5982\uff0c\u8f83\u5c11\u7684\u5199\u5165\u64cd\u4f5c\u5c06\u6bd4\u5927\u91cf\u8f83\u5c0f\u7684\u5199\u5165\u6267\u884c\u5f97\u66f4\u597d)\u3002\n\u6b22\u8fce\u5bf9\u6b64\u5904\u672a\u5217\u51fa\u7684\u5904\u7406\u5668\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u53ca\u4efb\u4f55\u5176\u4ed6\u53d1\u73b0\u3001\u66f4\u6b63\u548c\u5efa\u8bae\u3002\n\u8be5\u4ee3\u7801\u5f53\u524d\u672a\u5b9e\u73b0\u52a8\u6001\u8fd0\u884c\u65f6\u8c03\u5ea6\uff0c\u56e0\u6b64\u5e94\u5728\u8fd0\u884c\u8be5\u4ee3\u7801\u7684\u8ba1\u7b97\u673a\u4e0a\u4f7f\u7528\u5e26\u6709-MARCH=NATIVE\u6807\u5fd7\u7684GCC/Clang\u8fdb\u884c\u7f16\u8bd1\u3002\u53ef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\u6b64\u6d4b\u8bd5\uff1a\n\u6ce8\u610f\uff0c\u5728\u67d0\u4e9bLinux\u53d1\u884c\u7248\u4e0a\uff0c\u60a8\u53ef\u80fd\u8fd8\u9700\u8981\u5728\u672b\u5c3e\u6dfb\u52a0-lrt\u3002\n\u5728\u8fd0\u884c\u6d4b\u8bd5\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u7ed3\u679c\u6709\u5f88\u5927\u7684\u53d8\u5f02\u6027\u3002\u4ee3\u7801\u786e\u5b9e\u5c1d\u8bd5\u901a\u8fc7\u8fd0\u884c\u591a\u4e2a\u8bd5\u9a8c\u548c\u8fd0\u884c\u901f\u5ea6\u6700\u5feb\u7684\u65b9\u5f0f\u6765\u6ee1\u8db3\u8fd9\u4e00\u8981\u6c42\uff0c\u4f46\u662f\u5728\u8fd0\u884c\u6d4b\u8bd5\u4e4b\u524d\u5c06CPU\u8c03\u63a7\u5668/\u7535\u6e90\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e\u4e3a\u6027\u80fd\u5e76\u7981\u7528turbo Boost\u53ef\u80fd\u662f\u6709\u76ca\u7684\u3002\u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u6211\u6ca1\u6709\u9488\u5bf9\u4efb\u4f55\u7ed3\u679c\u6267\u884c\u6b64\u64cd\u4f5c\u3002", "note_en": "Permalink     GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up\n       This is essentially a JIT where the code is only used once, before being overwritten and used again.(Note, this code will not work on an OS which enforces  W^X security. Currently, the most widely used OSes on x86 do not enforce W^X, hence the above technique is viable on most machines. For this investigation, I will assume no W^X is being enforced)\n x86 processors fully support  self-modifying code (SMC), without needing the program to signal anything to the processor (e.g. no flush instruction necessary), which means that x86 processors need to automatically detect writes to instruction data and handle them immediately.\n The above code, although not really a true SMC scenario, is often detected as such, due to the JIT code residing in instruction cache when it needs to be written to. Such writes usually involve invalidating caches and flushing pipelines, which causes severe performance penalties.\n I came across this issue whilst investigating an algorithm like the above for  performing GF(2 16) multiplication, and noticed that there are techniques that can be done to mitigate this performance penalty.\n However, I\u2019ve been unable to find much information on this, and even less in terms of actual test results. Hence, this repository hosts some test code, and results from experimentation, which intends to investigate ways in which to reduce the overhead of such code.\n  I\u2019ve tried to think up a number of scenarios which might have an impact on the above behaviour, and implemented these into this test application.\n It\u2019s best to  look at the code to see the tests that are run, but a summary of ideas tried is listed here:\n obvious approach - that is, just write the code an execute it, as shown at the top of this page (labelled   jit_plain in results). Also tests writing the code in reverse to see if that has any effect (labelled   jit_reverse).\n for reference: JIT-to and execute separate locations. This doesn\u2019t achieve the aim above, since it isn\u2019t actually executing the JIT\u2019d code, but is used to demonstrate the ideal case of having no penalty (labelled   jit_only), as well as compute the SMC penalty on processors\n write code to non-executable memory (temporary location), then copy it to the allocated executable memory, using a range of techniques including  memcpy (labelled   jit_memcpy*). If the memory copy means that fewer write operations hit the executable memory, it may mean fewer syncs/flushes are needed\n \u2018clear\u2019 executable memory before writing code, i.e. overwrite the region with null bytes, using  memset, or take a shortcut by writing once to each 64-byte cacheline (labelled   jit_clr*). Maybe this helps invalidate the cache quickly before the JIT process would\u2019ve done it slowly?\n flushing cachelines before/after writing code (labelled   jit_clflush*). Maybe this helps push the data out of the separate L1 instruction/data cache ahead of time?\n prefetching code to L2 cache, with/without write hinting (labelled   jit_prefetch*). L1 caches separate data and instructions, but L2 is shared, so any changes to instruction data must go through L2 before arriving at the instruction cache. Prefetching is usually used to  promote data to a lower level of cache, not demote to a higher level, but maybe some processors can take note of the write hint and act accordingly\n leaving a  UD2 instruction at the beginning of the executable code, until the JIT process is complete (labelled   jit_ud2). Maybe this helps with preventing the processor from prefetching the code as it\u2019s being written to\n alternate between a number of pre-allocated pages (labelled   jit_*region). This might help by reducing the likelihood that the JIT writing touches memory that is cached for execution, however, this is fairly expensive in terms of cache usage\n trying to clear the instruction cache by  jumping across a large number of cachelines (labelled   jit_jmp*). Probably thrashes the instruction cache however\n seeing whether applying a memory fence ( MFENCE instruction) or serializing operation ( CPUID instruction) between writing and executing the code, makes any difference (labelled   jit_mfence and   jit_serialize)\n writing to and executing from  different virtual addresses which map to the same physical page (labelled   jit_dual_mapping). The Intel manual suggests that such behaviour requires a serializing instruction before executing the written code, which  presumably means that code can be written without invoking self-modifying code behaviour\n Note that the  JIT routine itself writes out instructions one-by-one, and doesn\u2019t attempt to batch multiple instructions into a single write.\n Testing performance is done using the   RDTSC instruction. To reduce variability, it is measured across multiple iterations, and  multiple trials are performed to find the fastest measure.\n  The results, listed below, vary significantly across processor micro-architectures. Tests were performed on a variety of systems, including some on virtual machines. All code was compiled with GCC for x86-64.\n  Alternating between a number of regions, enough to exceed L1 cache size, appears to be the most effective technique (  jit_16region), however this could affect the performance of other code.\n Clearing the target before writing code, is second most effective (slightly worse than above), particularly if you just clear one byte per cacheline (  jit_clr_1byte)\n  Clearing the instruction cache with jumps touching all the cachelines, seems to also be effective on Haswell and later (  jit_jmp32k_unalign). This may affect performance of other code as it effectively flushes out the instruction cache\n Raw results:  Nehalem, [Sandy Bridge](results/Sandy Bridge.txt), [Ivy Bridge](results/Ivy Bridge (win64).txt),  Haswell, [Broadwell](results/Broadwell (xen).txt),  Skylake, [Skylake-X](results/Skylake-X (win64).txt)\n  Silvermont ( raw result) Copying appears to be the most effective, particularly if non-temporal writes are used in the copy (  jit_memcpy_sse2_nt)\n  Issuing  CLFLUSH (  jit_clflush) or  PREFETCHW (  jit_prefetchw) over the region also seems to work(I thought Silvermont didn\u2019t support  PREFETCHW instruction added in Broadwell, but as it turns out, it supports the  PREFETCHW instruction from 3DNow!)\n Goldmont ([raw result](results/Goldmont (win64).txt)) The most effective techniques appear to be copying with non-temporal writes (  jit_memcpy_sse2_nt), clearing the memory using non-temporal writes (  jit_clr_sse2_nt), or issuing  CLFLUSHOPT over the executable region before writing (  jit_clflushopt)\n  Copying with non-temporal writes (  jit_memcpy_sse2_nt) seems to have a slight advantage over the straightforward method\n   Zen1 ([raw result](results/Zen1 (VM).txt)) Copying seems to be the only effective method (  jit_memcpy*). Unlike other CPUs here, non-temporal writes perform worse\n Unlike on Intel Core CPUs, where overwriting the instruction code seems to invalidate the data from the instruction cache, it seems like Zen1 maintains some sync between the two. This means that repeatedly overwriting the same code, that exists in instruction cache, can have a slowdown effect, even if the code is never executed later\n    Piledriver ( raw result) Copying (  jit_memcpy*) and clearing (  jit_clr*) are both effective, as well as issuing  PREFETCHW instructions (  jit_prefetchw)\n     Although, according to Intel documentation, x86 processors don\u2019t need to sync code/instruction data if they are at different virtual addresses, I found that processors did this anyway, if these point to the same physical address. I found that, even  removing the synchronization instruction, code would still work\n Not shown in the results here, but I did test with writing 4KB of code instead of 1KB of code, and found that the measured time also roughly quadrupled. This suggests that the SMC penalty is proportional to the amount of code written, so the idea of writing multiple functions before executing any, doesn\u2019t seem to help much (unless it\u2019s enough to exceed the L1 instruction cache and the processor is an Intel Core processor)\n To make this page a little interesting than just text, here\u2019s a chart to show you something visual, comparing the SMC penalty with the obvious solution and the best solution indicated above:\n  Note that there\u2019s significant variation between the processors/systems tested, so measurements  between processors probably shouldn\u2019t be compared, but it can nonetheless show how much of an improvement can be made with techniques found above.\n  The performance of the example shown at the top of this document can be improved, often by a fair margin, by applying some techniques listed above. Unfortunately, there is no single \u2018best solution\u2019, as it varies depending on the underlying micro-architecture.\n From the results I have (and speculation on my part for results I don\u2019t have) the best solution is:\n If CPU is Intel Core (Nehalem or later): Alternate between areas of memory (enough to be larger than L1 cache size), i.e. JIT to location 1, execute location 1, JIT to location 2, execute location 2 etc, and loop around (  jit_16region)\n If the above is not possible, or the cache hit is unacceptable, clear 1 byte per 64-byte cacheline in the area to be written to, before actually writing instructions (  jit_clr_1byte)\n Else if CPU is Intel Atom, Intel Core2, AMD Family 15h or AMD K10: Write code to a temporary location, then copy to the destination using  non-temporal writes (  jit_memcpy_sse2_nt). SSE1/2 writes are sufficient, as none of these CPUs have 256-bit load/store ports\n Else if CPU is AMD Family 17h, 18h or newer AMD: Write code to a temporary location, then copy to the destination ( REP MOVS seems to be optimal (  jit_memcpy_movsb), but  memcpy probably works fine too (  jit_memcpy))\n Probably not emphasised enough, but I do stress that the results here are specific to the test case examined here. If you implement a single-use JIT algorithm, results may vary depending on how much code is written and the way it is written (e.g. fewer write  operations will perform better than more numerous smaller writes).\n  Tests on processors not listed here are welcome, as are any other findings, corrections and suggestions.\n  The code currently does not implement dynamic runtime dispatch, so should be compiled using GCC/Clang with the  -march=native flag on the machine running the code.The following command can be used to compile this test:\n  Note that you may need to also add  -lrt to the end, on some Linux distros.\n I\u2019ve noticed significant variability in results when running the test. The code does try to cater for this, by running multiple trials and taking the fastest run, but it may be beneficial to set the CPU governor/power profile to Performance, and disabling turbo boost, before running the test. Note that I haven\u2019t done this for any of the results though.", "posttime": "2020-07-02 18:54:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,jit", "title": "x86\u5904\u7406\u5668\u4e0a\u7684\u5355\u673aJIT\u6027\u80fd", "title_en": "Single-use JIT Performance on x86 Processors", "transed": 1, "url": "https://github.com/animetosho/jit_smc_test/blob/master/README.md#single-use-jit-performance-on-x86-processors", "via": "", "real_tags": ["\u6027\u80fd", "jit"]}, {"category": "", "categoryclass": "", "imagename": "5c35becbbc4d71eacee2f845232d0e17.png", "infoid": 1009451, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65f6\u95f4\u5e8f\u5217\u7b80\u5355\u5730\u8868\u793a\u968f\u65f6\u95f4\u63a8\u79fb\u7684\u6570\u636e\u70b9\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u5728\u81ea\u7136\u754c\u548c\u5546\u4e1a\u4e2d\u65e0\u5904\u4e0d\u5728\uff1a\u6e29\u5ea6\u3001\u5fc3\u8df3\u3001\u51fa\u751f\u3001\u4eba\u53e3\u52a8\u6001\u3001\u4e92\u8054\u7f51\u6d41\u91cf\u3001\u5e93\u5b58\u3001\u5e93\u5b58\u3001\u9500\u552e\u3001\u8ba2\u5355\u3001\u5de5\u5382\u751f\u4ea7-\u4efb\u4f55\u4f60\u80fd\u60f3\u5230\u7684\u3002\u5728\u65e0\u6570\u60c5\u51b5\u4e0b\uff0c\u5bf9\u65f6\u95f4\u5e8f\u5217\u7684\u6709\u6548\u5904\u7406\u548c\u9884\u6d4b\u5177\u6709\u63d0\u4f9b\u51b3\u5b9a\u6027\u4f18\u52bf\u7684\u6f5c\u529b\u3002\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4f01\u4e1a\u63d0\u524d\u8c03\u6574\u5176\u6218\u7565(\u4f8b\u5982\uff0c\u5982\u679c\u53ef\u4ee5\u63d0\u524d\u8ba1\u5212\u751f\u4ea7)\uff0c\u6216\u6539\u8fdb\u5176\u8fd0\u8425(\u4f8b\u5982\uff0c\u901a\u8fc7\u68c0\u6d4b\u590d\u6742\u7cfb\u7edf\u4e2d\u7684\u5f02\u5e38)\u3002\u5c3d\u7ba1\u5b58\u5728\u8bb8\u591a\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u7684\u6a21\u578b\u548c\u5de5\u5177\uff0c\u4f46\u4f7f\u7528\u5b83\u4eec\u4ecd\u7136\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4eec\u5404\u81ea\u90fd\u6709\u81ea\u5df1\u7684\u9519\u7efc\u590d\u6742\u4e4b\u5904\uff0c\u5e76\u4e14\u4e0d\u80fd\u603b\u662f\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u3002\u5728\u7b2c\u516b\u5355\u5143\uff0c\u6211\u4eec\u7ecf\u5e38\u5904\u7406\u65f6\u95f4\u5e8f\u5217\uff0c\u56e0\u6b64\u6211\u4eec\u5f00\u59cb\u5f00\u53d1\u6211\u4eec\u81ea\u5df1\u7684\u5de5\u5177\uff0c\u8ba9\u6211\u4eec\u7684\u751f\u6d3b\u53d8\u5f97\u66f4\u7b80\u5355\u3002\u6211\u4eec\u8fd8\u51b3\u5b9a\u901a\u8fc7\u5f00\u6e90\u7684\u65b9\u5f0f\u4e3a\u793e\u533a\u505a\u51fa\u8d21\u732e\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecdDART\uff0c\u8fd9\u662f\u6211\u4eec\u5728Python\u4e2d\u7b80\u5316\u65f6\u95f4\u5e8f\u5217\u5904\u7406\u548c\u9884\u6d4b\u7684\u5c1d\u8bd5\u3002\n\u5982\u679c\u4f60\u662f\u4e00\u540d\u7814\u7a76\u65f6\u95f4\u5e8f\u5217\u7684\u6570\u636e\u79d1\u5b66\u5bb6\uff0c\u4f60\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e00\u70b9\uff1a\u65f6\u95f4\u5e8f\u5217\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u91ce\u517d\u3002\u5bf9\u4e8e\u5e38\u89c4\u7684\u8868\u683c\u6570\u636e\uff0c\u60a8\u901a\u5e38\u53ea\u9700\u4f7f\u7528SCRICKIT-\u5b66\u4e60\u6267\u884c\u5927\u591a\u6570ML\u64cd\u4f5c-\u4ece\u9884\u5904\u7406\u5230\u9884\u6d4b\u548c\u6a21\u578b\u9009\u62e9\u3002\u4f46\u5bf9\u4e8e\u65f6\u95f4\u5e8f\u5217\uff0c\u60c5\u51b5\u5c31\u4e0d\u540c\u4e86\u3002\u60a8\u5f88\u5bb9\u6613\u5728\u9700\u8981\u4e00\u4e2a\u5e93\u8fdb\u884c\u9884\u5904\u7406(\u4f8b\u5982\uff0cPandas\u7528\u4e8e\u63d2\u5165\u7f3a\u5931\u503c\u5e76\u91cd\u65b0\u91c7\u6837)\u3001\u53e6\u4e00\u4e2a\u5e93\u7528\u4e8e\u68c0\u6d4b\u5b63\u8282\u6027(\u4f8b\u5982statsModels)\u3001\u7b2c\u4e09\u4e2a\u5e93\u7528\u4e8e\u9002\u5e94\u9884\u6d4b\u6a21\u578b(\u4f8b\u5982Facebook Prophet)\u7684\u60c5\u51b5\u4e0b\u7ed3\u675f\uff0c\u6700\u540e\uff0c\u60a8\u901a\u5e38\u9700\u8981\u5b9e\u73b0\u81ea\u5df1\u7684\u56de\u6d4b\u548c\u6a21\u578b\u9009\u62e9\u4f8b\u7a0b\u3002\u8fd9\u53ef\u80fd\u76f8\u5f53\u4e4f\u5473\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u5e93\u4f7f\u7528\u4e0d\u540c\u7684API\u548c\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u751a\u81f3\u6ca1\u6709\u63d0\u5230\u6d89\u53ca\u66f4\u590d\u6742\u7684\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u6a21\u578b\u7684\u60c5\u51b5\uff0c\u6216\u8005\u6d89\u53ca\u5916\u90e8\u6570\u636e\u548c\u66f4\u591a\u7ef4\u5ea6\u7684\u95ee\u9898\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5fc5\u987b\u9488\u5bf9\u60a8\u7684\u7528\u4f8b\u81ea\u5df1\u5b9e\u73b0\u6a21\u578b\uff0c\u4f8b\u5982\u4f7f\u7528TensorFlow\u6216PyTorch\u7b49\u5e93\u3002\u603b\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u89c9\u5f97\u5728Python\u4e2d\u5bf9\u65f6\u95f4\u5e8f\u5217\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u7684\u4f53\u9a8c\u8fd8\u4e0d\u662f\u5f88\u6d41\u7545\u3002\n\u6211\u4eec\u662fSCRKIT-LEARN\u65b9\u6cd5\u7684\u94c1\u6746\u7c89\u4e1d\uff1a\u4e00\u4e2a\u5177\u6709\u4e00\u81f4API\u7684\u5355\u4e00\u5f00\u6e90\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u5957\u975e\u5e38\u68d2\u7684\u7aef\u5230\u7aef\u673a\u5668\u5b66\u4e60\u5de5\u5177\u3002DARTS\u8bd5\u56fe\u6210\u4e3a\u65f6\u95f4\u5e8f\u5217\u7684\u79d1\u5b66\u5b66\u4e60\u5de5\u5177\uff0c\u5176\u4e3b\u8981\u76ee\u6807\u662f\u7b80\u5316\u6574\u4e2a\u65f6\u95f4\u5e8f\u5217\u7684\u673a\u5668\u5b66\u4e60\u4f53\u9a8c\u3002\nDARTS\u662f\u5f00\u6e90\u7684\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u83b7\u5f97\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u5b89\u88c5\u5728\u60a8\u6700\u559c\u6b22\u7684Python\u73af\u5883\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a\nDART\u4e2d\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u662f\u65f6\u95f4\u5e8f\u5217\uff0c\u5b83\u8868\u793a\u591a\u53d8\u91cf\u65f6\u95f4\u5e8f\u5217\u3002\u5b83\u4e3b\u8981\u662f\u5bf9Pandas DataFrame\u8fdb\u884c\u5305\u88c5\uff0c\u5e76\u6709\u4e00\u4e9b\u989d\u5916\u7684\u4fdd\u8bc1\uff0c\u4ee5\u786e\u4fdd\u5b83\u8868\u793a\u683c\u5f0f\u826f\u597d\u7684\u65f6\u95f4\u5e8f\u5217\uff0c\u5e76\u5177\u6709\u9002\u5f53\u7684\u65f6\u95f4\u7d22\u5f15\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4eceDataFrame\u6784\u5efa\u5b83\uff1a\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u8bfb\u53d6\u4e86\u4e00\u4e2a\u5305\u542b\u822a\u7a7a\u4e58\u5ba2\u6570\u636e\u96c6\u7684DataFrame\u3002\u7136\u540e\uff0c\u6211\u4eec\u6784\u5efa\u4e00\u4e2a(\u5355\u53d8\u91cf)\u65f6\u95f4\u5e8f\u5217\uff0c\u6307\u5b9a\u65f6\u95f4\u548c\u503c\u5217(\u5206\u522b\u4e3aMonth\u548c#Passenger)\u3002\n\u73b0\u5728\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684\u5e8f\u5217\u5206\u6210\u8bad\u7ec3\u548c\u9a8c\u8bc1\u65f6\u95f4\u5e8f\u5217\uff0c\u5e76\u5bf9\u8bad\u7ec3\u5e8f\u5217\u8bad\u7ec3\u6307\u6570\u5e73\u6ed1\u6a21\u578b\uff1a\n\u5c31\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u73b0\u5728\u5bf9\u6211\u4eec\u7684\u9a8c\u8bc1\u7cfb\u5217\u6709\u4e86\u4e00\u4e2a\u9884\u6d4b\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4e0e\u5b9e\u9645\u7684\u7cfb\u5217\u4e00\u8d77\u7ed8\u5236\u51fa\u6765\uff1a\n\u6b63\u5982\u60a8\u53ef\u80fd\u5df2\u7ecf\u731c\u5230\u7684\uff0c\u6211\u4eec\u6b63\u5728\u6a21\u4eff\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\u548c\u8fdb\u884c\u9884\u6d4b\u7684SCRICKIT-LEARN FIT()\u548cPredict()\u6a21\u5f0f\u3002\u51fd\u6570\u7684\u4f5c\u7528\u662f\uff1a\u63a5\u53d7\u8bad\u7ec3\u65f6\u95f4\u5e8f\u5217\u7684\u53c2\u6570\uff0c\u800c\u9884\u6d4b()\u51fd\u6570\u7684\u4f5c\u7528\u662f\u8fd4\u56de\u8868\u793a\u9884\u6d4b\u7684\u65b0\u65f6\u95f4\u5e8f\u5217\u3002\u8fd9\u610f\u5473\u7740\u6a21\u578b\u64cd\u4f5c\u65f6\u95f4\u5e8f\u5217\uff0c\u800c\u8fd9\u51e0\u4e4e\u662fDART\u4e2d\u552f\u4e00\u88ab\u64cd\u4f5c\u7684\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u4f7f\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5730\u4ea4\u6362\u548c\u6bd4\u8f83\u578b\u53f7\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u6837\u8f7b\u677e\u5730\u4f7f\u7528\u81ea\u52a8ARIMA\u6a21\u578b(\u5b83\u5728\u5e55\u540e\u56f4\u7ed5\u7740pmdarima)\uff1a\n\u6709\u4e24\u79cd\u6a21\u5f0f\u3002\u9884\u6d4b\u6a21\u578b\u5728\u7ed9\u5b9a\u8fc7\u53bb\u503c\u7684\u60c5\u51b5\u4e0b\u9884\u6d4b\u65f6\u95f4\u5e8f\u5217\u7684\u672a\u6765\u503c\uff0c\u800c\u56de\u5f52\u6a21\u578b\u5728\u7ed9\u5b9a\u4e00\u7ec4\u7279\u5f81\u65f6\u95f4\u5e8f\u5217\u7684\u60c5\u51b5\u4e0b\u9884\u6d4b\u76ee\u6807\u65f6\u95f4\u5e8f\u5217\u7684\u503c\u3002\u6211\u4eec\u4e0a\u9762\u5efa\u7acb\u7684\u6307\u6570\u5e73\u6ed1\u548c\u81eaARIMA\u6a21\u578b\u5c31\u662f\u9884\u6d4b\u6a21\u578b\u7684\u4f8b\u5b50\u3002\n\u6a21\u578b\u6d88\u8017\u5e76\u4ea7\u751f\u65f6\u95f4\u5e8f\u5217\uff0c\u8fd9\u610f\u5473\u7740\u4f8b\u5982\uff0c\u5f88\u5bb9\u6613\u8ba9\u56de\u5f52\u6a21\u578b\u6d88\u8017\u9884\u6d4b\u6a21\u578b\u7684\u8f93\u51fa\u3002\n\u65f6\u95f4\u5e8f\u5217\u53ef\u4ee5\u662f\u5355\u53d8\u91cf(\u4e00\u7ef4)\u6216\u591a\u53d8\u91cf(\u591a\u7ef4)\u3002\u67d0\u4e9b\u6a21\u578b\uff0c\u5982\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u6a21\u578b\uff0c\u4f5c\u7528\u4e8e\u591a\u53d8\u91cf\u5e8f\u5217\uff0c\u800c\u53e6\u4e00\u4e9b\u6a21\u578b\u4ec5\u9650\u4e8e\u5355\u53d8\u91cf\u5e8f\u5217\u3002\n\u8be5\u5e93\u8fd8\u5305\u542b\u5bf9\u9884\u6d4b\u548c\u56de\u5f52\u6a21\u578b\u8fdb\u884c\u53cd\u5411\u6d4b\u8bd5\u3001\u5bf9\u8d85\u53c2\u6570\u6267\u884c\u7f51\u683c\u641c\u7d22\u3001\u8bc4\u4f30\u6b8b\u5dee\uff0c\u751a\u81f3\u6267\u884c\u81ea\u52a8\u6a21\u578b\u9009\u62e9\u7684\u529f\u80fd\u3002\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528DART\u83b7\u5f97\u4e86\u4ece1958\u5e741\u6708\u5f00\u59cb\u7684\u672a\u676536\u4e2a\u6708\u7684\u4e00\u6b21\u9884\u6d4b\u3002\u7136\u800c\uff0c\u4e00\u65e6\u6709\u65b0\u7684\u6570\u636e\u53ef\u7528\uff0c\u9884\u6d4b\u5f80\u5f80\u9700\u8981\u7acb\u5373\u66f4\u65b0\u3002\u4f7f\u7528DART\uff0c\u4f7f\u7528\u56de\u6eaf\u6d4b\u8bd5\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8ba1\u7b97\u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\u4ea7\u751f\u7684\u9884\u6d4b\u3002\u4f8b\u5982\uff0c\u4f7f\u7528\u56de\u6eaf\u6d4b\u8bd5\u6bd4\u8f83\u4e24\u4e2a\u6a21\u578b\u5982\u4e0b\u6240\u793a\uff1a\n\u4eceDART.backtest\u5bfc\u5165\u6765\u81eaDARTS\u7684BACKTEST_FOREGING\u3002MODELES IMPORT PROPHET MODELES=[ExponentialSmooating()\uff0cProphet()]Backtest=[Backtest_Forecast(Series\uff0cModel\uff0cpd.Timestamp(&#39\uff1b19550101&#39\uff1b)\uff0cfcast_Horizon_n=3)for model in model]\u3002\nBACKTEST_FOREGING\u51fd\u6570\u63a5\u53d7\u65f6\u95f4\u5e8f\u5217\u3001\u9884\u6d4b\u6a21\u578b\u3001\u65f6\u95f4\u6233\u548c\u9884\u6d4b\u8303\u56f4\u3002\u5b83\u8fd4\u56de\u5305\u542b\u5386\u53f2\u9884\u6d4b\u7684\u65f6\u95f4\u5e8f\u5217\uff0c\u5f53\u4f7f\u7528\u6a21\u578b\u9884\u6d4b\u5177\u6709\u6307\u5b9a\u9884\u6d4b\u5c55\u671b\u671f(\u8fd9\u91cc\u662f3\u4e2a\u6708)\u7684\u5e8f\u5217\u65f6\uff0c\u4ece\u6307\u5b9a\u7684\u65f6\u95f4\u6233\u5f00\u59cb(\u4f7f\u7528\u6269\u5c55\u7a97\u53e3\u7b56\u7565)\u3002\n\u8fd4\u56de\u7c7b\u578b\u662f\u65f6\u95f4\u5e8f\u5217\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u8ba1\u7b97\u8bef\u5dee\u5ea6\u91cf-\u4f8b\u5982\u8fd9\u91cc\u7684\u5e73\u5747\u7edd\u5bf9\u8bef\u5dee\u767e\u5206\u6bd4\uff1a\n\u4ecedarts.metrics\u5bfc\u5165\u679a\u4e3e(\u578b\u53f7)\u4e2di\u3001m\u7684Mape Series es.lot(Label=&#39\uff1bdata&#39\uff1b)\uff1aERR=Mape(backtest[i]\uff0cSeries)backtest[i].lot(lw=3\uff0clabel=&#39\uff1b{}\uff0cMAPE={\uff1a.2F}%&#39\uff1b.format(m\uff0cerr))plt.title(&#39\uff1b\u5e26\u67093\u4e2a\u6708\u9884\u6d4b\u5c55\u671b\u671f\u7684\u56de\u6d4b)plt.title(&#39\uff1bBacktest with 3\u4e2a\u6708\u9884\u6d4b\u5c55\u671b\u671f)plt.\u3002\n\u6b64\u5916\uff0c\u56e0\u4e3abacktest_forecast()\u7684\u8fd4\u56de\u7c7b\u578b\u662f\u65f6\u95f4\u5e8f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528\u56de\u5f52\u6a21\u578b\u4e2d\u7684\u8f93\u51fa\u8981\u7d20\u5e8f\u5217\uff0c\u8fd9\u53ef\u4ee5\u7528\u6765\u96c6\u6210(\u5806\u53e0)\u51e0\u4e2a\u6a21\u578b\u6240\u505a\u7684\u9884\u6d4b\uff0c\u5e76\u4e14\u53ef\u80fd\u8fd8\u5305\u62ec\u5916\u90e8\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u3002\n\u8fd9\u91cc\u8fd8\u6709\u5f88\u591a\u6211\u4eec\u6ca1\u6709\u8c08\u5230\u7684\u5185\u5bb9\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u6db5\u76d6\u66f4\u591a\u6750\u6599\u7684\u793a\u4f8b\u7b14\u8bb0\u672c\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u7b80\u4ecb\u7b14\u8bb0\u672c\uff0c\u6216\u8005\u4e86\u89e3\u5982\u4f55\u4f7f\u7528FIT()\u548cPredict()\u6a21\u5f0f\u8f7b\u677e\u5730\u8bad\u7ec3RNN\u6216TCNs\u795e\u7ecf\u7f51\u7edc\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5efa\u8bae\u53c2\u8003DARTS\u6587\u6863\u3002\n\u6211\u4eec\u6b63\u5728\u79ef\u6781\u5f00\u53d1DART\u5e76\u589e\u52a0\u65b0\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u8865\u5145\u4ee5\u4e0b\u51e0\u70b9\uff1a\n\u6700\u540e\uff0c\u5728\u6211\u4eec\u4e3a\u51e0\u5bb6\u516c\u53f8\u7684\u65e5\u5e38AI/ML\u5de5\u4f5c\u4e2d\uff0cDART\u662f\u6211\u4eec\u5185\u90e8\u4f7f\u7528\u7684\u5de5\u5177\u4e4b\u4e00\u3002\u5982\u679c\u60a8\u8ba4\u4e3a\u60a8\u7684\u516c\u53f8\u53ef\u4ee5\u4ece\u65f6\u95f4\u5e8f\u5217\u89e3\u51b3\u65b9\u6848\u4e2d\u83b7\u76ca\u6216\u6709\u5176\u4ed6\u4ee5\u6570\u636e\u4e3a\u4e2d\u5fc3\u7684\u95ee\u9898\uff0c\u8bf7\u4e0d\u8981\u72b9\u8c6b\u4e0e\u6211\u4eec\u8054\u7cfb\u3002", "note_en": "Time series simply represent data points over time. They are thus everywhere in nature and in business: temperatures, heartbeats, births, population dynamics, internet traffic, stocks, inventories, sales, orders, factory production \u2014 you name it. In countless cases, efficient processing and forecasting of time series has the potential to provide decisive advantages. It can help businesses adapt their strategies ahead of time (e.g. if production can be planned in advance), or improve their operations (e.g. by detecting anomalies in complex systems). Although there exist many models and tools for time series, they are still often nontrivial to work with, because they each have their own intricacies and cannot always be used in the same way. At  Unit8, we often work with time series and thus we started developing our own tool to make our lives simpler. We also decided to contribute to the community by open-sourcing it.  In this article, we introduce Darts, our attempt at simplifying time series processing and forecasting in Python.\n  If you are a data scientist working with time series you already know this: time series are special beasts. With regular tabular data, you can often just use  scikit-learn for doing most ML things \u2014 from preprocessing to prediction and model selection. But with time series, the story is different. You can easily end up in situations where you need one library for pre-processing (e.g.  Pandas to interpolate missing values and re-sample), another to detect seasonality (e.g.  statsmodels), a third one to fit a forecasting model (e.g.  Facebook Prophet), and finally more often than not you\u2019ll have to implement your own backtesting and model selection routines. This can be quite tedious, as most libraries use different APIs and data types. And that\u2019s not even mentioning cases involving more complex models based on neural networks, or problems involving external data and more dimensions. In such cases you\u2019d likely have to implement the models yourself for your use-case, for instance using libraries such as  Tensorflow or  PyTorch. Overall, we feel that the experience of doing machine learning on time series in Python is just not really smooth, yet.\n We are big fans of the scikit-learn approach: a single open-source library with consistent API that contains a great set of tools for end-to-end machine learning. Darts attempts to be a scikit-learn for time series, and its primary goal is to simplify the whole time series machine learning experience.\n  darts is open source and available  here. You can install it in your favourite Python environment as follows:\n  The basic data type in Darts is  TimeSeries, which represents a multivariate time series. It is mostly a wrapper around Pandas  DataFrame, with some additional guarantees to ensure that it represents a well-formed time series, with a proper time index. It can easily be built, for example from a  DataFrame:\n  In the above snippet, we first read a  DataFrame containing the  air passengers dataset. We then build a (univariate)  TimeSeries, specifying the time and value columns ( Month and  #Passengers, respectively).\n Let\u2019s now split our series in a training and validation  TimeSeries, and train an exponential smoothing model on the training series:\n  That\u2019s it, we now have a prediction over our validation series. We can plot it, along with the actual series:\n    As you may have guessed, we are mimicking the scikit-learn  fit() and  predict() pattern for training models and making forecasts. The  fit()function takes in argument a training  TimeSeries and the  predict() function returns a new  TimeSeries representing the forecast. This means that models manipulate  TimeSeries, and this is pretty much the only data type being manipulated in Darts. This allows users to easily swap and compare models. For example, we could have just as easily used an auto-ARIMA model (which behind the scenes wraps around  pmdarima):\n   There are two kinds of models.  Forecasting models predict the future values of a time series given the past values, and  regression models predict values of a target time series given a set of feature time series. The exponential smoothing and auto-ARIMA model we built above are examples of forecasting models.\n  Models consume and produce  TimeSeries, which means for instance that it is easy to have a regression model consume the output of a forecasting model.\n TimeSeries can be either univariate (1-dimensional) or multivariate (multi-dimensional). Certain models such as those based on neural nets operate on multivariate series, while others are restricted to univariate series.\n   The library also contains functionalities to backtest forecasting and regression models, perform grid search on hyper-parameters, evaluate residuals, and even perform automatic model selection.\n  In our example above, we used Darts to obtain once a forecast over the next 36 months starting in January 1958. However, forecasts often need to be updated as soon as new data becomes available. With Darts, it\u2019s easy to compute the forecasts resulting from such a process, using  backtesting. For instance, using backtesting to compare two models looks as follows:\n from darts.backtesting import backtest_forecasting from darts.models import Prophet models = [ExponentialSmoothing(), Prophet()] backtests = [backtest_forecasting(series,  model,  pd.Timestamp(&#39;19550101&#39;),  fcast_horizon_n=3)  for model in models]\n The function  backtest_forecasting takes a time series, a forecasting model, a timestamp and a forecast horizon. It returns the  TimeSeries containing the historical forecasts  would have been obtained when using the model to forecast the series with the specified forecast horizon (here 3 months), starting at the specified timestamp (using an expanding window strategy).\n The return type is a  TimeSeries, and so we can quickly compute error metrics \u2014 for instance here the mean absolute percentage error:\n from darts.metrics import mape series.plot(label=&#39;data&#39;) for i, m in enumerate(models):  err = mape(backtests[i], series)  backtests[i].plot(lw=3, label=&#39;{}, MAPE={:.2f}%&#39;.format(m, err)) plt.title(&#39;Backtests with 3-months forecast horizon&#39;) plt.legend()\n  In addition, because the return type of  backtest_forecasting() is a  TimeSeries, we can also simply consume the outputs features series in regression models, which can serve to ensemble (stack) the forecasts made by several models, and potentially also include external time series data.\n There is a lot more that we did not cover here. We provide a series of  example notebooks covering more material. For instance, you can look at the  intro notebook, or see how to easily train  RNNs or  TCNs neural networks using the  fit() and  predict() pattern. In addition, we also recommend consulting the  Darts documentation.\n  We are actively developing Darts and adding new features. For instance here are a few things we would like to add:\n   Finally, Darts is one of the tools we are using internally during our day-to-day AI/ML work for several companies. If you think your company could benefit from time series solutions or have other data-centric issues, don\u2019t hesitate to  contact us.", "posttime": "2020-07-02 18:34:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "dart,python,\u7528\u4e8e,\u9884\u6d4b", "title": "DARTS\uff1a\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u5904\u7406\u548c\u9884\u6d4b\u7684Python\u5e93", "title_en": "Darts: A Python library for Timeseries processing and forecasting", "transed": 1, "url": "https://medium.com/unit8-machine-learning-publication/darts-time-series-made-easy-in-python-5ac2947a8878", "via": "", "real_tags": ["dart", "python", "\u7528\u4e8e", "\u9884\u6d4b"]}, {"category": "", "categoryclass": "", "imagename": "6bcb0780a480222379f43c3e54c733f4.jpeg", "infoid": 1009450, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u5f88\u5feb\u5c31\u53ef\u4ee5\u5728\u5bb6\u91cc\u4eab\u75283D\u6253\u5370\u7684\u690d\u7269\u6027\u725b\u6392\u4e86\u3002\u4ee5\u8272\u5217\u521d\u521b\u516c\u53f8ReDefine Meat\u8868\u793a\uff0c\u8fd9\u5c31\u662f\u5b83\u5e0c\u671b\u57282021\u5e74\u63a8\u51fa3D\u6253\u5370\u725b\u6392\u66ff\u4ee3\u54c1\u65f6\u4e3a\u5ba2\u6237\u5b9e\u73b0\u7684\u76ee\u6807\u3002\u8be5\u4ea7\u54c1\u5c06\u8fdb\u5165\u690d\u7269\u6027\u8089\u7c7b\u5e02\u573a\uff0c\u5982Impact Foods\u548cBeyond Meat\uff0c\u5b83\u4eec\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u6b63\u5728\u4e0a\u5347\u3002\u867d\u7136\u4e4b\u524d\u6709\u51e0\u79cd\u690d\u7269\u6027\u725b\u6392\u6295\u653e\u5e02\u573a\uff0c\u4f46\u4f3c\u4e4e\u6ca1\u6709\u4e00\u79cd\u50cf\u7ede\u8089\u6216\u8089\u997c\u90a3\u6837\u5e7f\u6cdb\u4e0a\u5e02\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5c60\u592b\u5f0f\u7684\u5207\u5272\u8fd8\u4e0d\u592a\u5e38\u89c1\u3002\n\u6839\u636e\u5176\u7f51\u7ad9\u4ecb\u7ecd\uff0cRefinition Meat\u8868\u793a\uff0c\u901a\u8fc73D\u6253\u5370\uff0c\u5b83\u80fd\u591f\u521b\u9020\u51fa\u4e0e\u52a8\u7269\u8089\u76f8\u540c\u7684\u201c\u5916\u89c2\u3001\u8d28\u5730\u548c\u5473\u9053\u201d\u7684\u690d\u7269\u6027\u8089\u7c7b\u3002\u8d28\u611f\u4f3c\u4e4e\u662f3D\u6253\u5370\u673a\u7684\u6807\u5fd7\u6027\u6210\u5c31\u3002\u201c\u4f60\u9700\u8981\u4e00\u53f03D\u6253\u5370\u673a\u6765\u6a21\u62df\u52a8\u7269\u808c\u8089\u7684\u7ed3\u6784\uff0c\u201dReDefinition Meat\u9996\u5e2d\u6267\u884c\u5b98Eshchar Ben-Shitritt\u544a\u8bc9\u8def\u900f\u793e\u3002\n3D\u6253\u5370\u4e0e\u516c\u53f8\u7528\u6765\u518d\u73b0\u8089\u7c7b\u5473\u9053\u548c\u8d28\u5730\u7684\u5176\u4ed6\u65b9\u6cd5\u4e0d\u540c\u3002Impact Foods\u548cBeyond Meat\u90fd\u4f7f\u7528\u4ee5\u690d\u7269\u4e3a\u57fa\u7840\u7684\u86cb\u767d\u8d28\u3001\u6cb9\u548c\u7c98\u5408\u5242\u7684\u7ec4\u5408\uff0c\u5982\u7532\u57fa\u7ea4\u7ef4\u7d20\u548c\u571f\u8c46\u6dc0\u7c89\uff0c\u4ee5\u83b7\u5f97\u78e8\u788e\u7684\u725b\u8089\u548c\u8089\u997c\u7684\u903c\u771f\u8d28\u5730-\u5c3d\u7ba1\u53ef\u4ee5\u8bf4\u78e8\u788e\u7684\u725b\u8089\u7684\u8d28\u5730\u6bd4\u725b\u6392\u66f4\u5bb9\u6613\u5b9e\u73b0\u3002\u6700\u540e\uff0c\u98df\u54c1\u516c\u53f8\u5728\u5176\u65e0\u8089\u57f9\u6839\u4e2d\u4f7f\u7528\u8611\u83c7\u7ea4\u7ef4\u6765\u6a21\u4eff\u52a8\u7269\u7ec4\u7ec7\u3002\n\u65e0\u8bba\u662f\u51fa\u4e8e\u5065\u5eb7\u3001\u73af\u5883\u8fd8\u662f\u9053\u5fb7\u539f\u56e0\uff0c\u6d88\u8d39\u8005\u90fd\u5728\u8d2d\u4e70\u66f4\u591a\u7684\u8089\u7c7b\u66ff\u4ee3\u54c1\u3002\u6839\u636e\u7814\u7a76\u516c\u53f8Statista 2019\u5e746\u6708\u7684\u4e00\u7bc7\u6587\u7ae0\uff0c\u5df4\u514b\u83b1(Barclays)\u7684\u5e02\u573a\u5206\u6790\u5e08\u53bb\u5e74\u4f30\u8ba1\uff0c\u52302029\u5e74\uff0c\u5168\u7403\u8089\u7c7b\u66ff\u4ee3\u54c1\u5e02\u573a\u53ef\u80fd\u4f1a\u8fbe\u52301400\u4ebf\u7f8e\u5143\u3002\u6700\u8fd1\u7684\u6570\u636e\u4f3c\u4e4e\u652f\u6301\u8fd9\u4e00\u8d8b\u52bf\uff0c\u56e0\u4e3a\u798f\u5e03\u65af\u57285\u6708\u521d\u62a5\u9053\uff0c\u81ea\u5927\u6d41\u884c\u5f00\u59cb\u4ee5\u6765\uff0c\u66ff\u4ee3\u8089\u7c7b\u7684\u9500\u552e\u6709\u6240\u589e\u957f\u3002\n\u91cd\u65b0\u5b9a\u4e49\u8089\u7c7b\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u5bb6\u5c1d\u8bd53D\u6253\u5370\u8089\u7c7b\u66ff\u4ee3\u54c1\u7684\u516c\u53f8\u3002\u897f\u73ed\u7259\u516c\u53f8NovaMeat\u6b63\u5728\u7814\u53d13D\u6253\u5370\u725b\u6392\u548c\u732a\u8089\u66ff\u4ee3\u54c1\u3002NovaMeat\u9996\u5e2d\u6267\u884c\u5b98\u6731\u585e\u4f69\u00b7\u8096\u8482\u544a\u8bc9\u8def\u900f\u793e\uff0c\u4ed6\u7684\u516c\u53f8\u7684\u4ea7\u54c1\u4eca\u5e74\u5c06\u5728\u6b27\u6d32\u201c\u7cbe\u9009\u7684\u9876\u7ea7\u9910\u5385\u201d\u4e0a\u5e02\uff0c\u5e76\u5c06\u57282021\u5e74\u66f4\u5e7f\u6cdb\u5730\u53d1\u5e03\u3002", "note_en": "You could soon be able to enjoy 3D-printed, plant-based flank steak at home. Israeli startup Redefine Meat says that\u2019s what it hopes to accomplish for customers when it launches 3D-printed steak alternatives in 2021. The product will enter a market where plant-based meats, like  Impossible Foods and  Beyond Meat, are rising in popularity. While a couple  plant-based  steaks have previously hit the market, none seem to be widely available as, for example, ground meat or patties. Until now, butcher-style cuts have been less common.\n Redefine Meat says that through 3D printing, it\u2019s able to create plant-based meat with the same \u201cappearance, texture and flavor of animal meat,\u201d according to its  website. Texture specifically seems to be the 3D printer\u2019s hallmark achievement. \u201cYou need a 3D printer to mimic the structure of the muscle of the animal,\u201d Redefine Meat CEO Eshchar Ben-Shitrit  told  Reuters.\n  3D printing differs from other methods companies have used for reproducing meat taste and texture. Both Impossible Foods and Beyond Meat use combinations of plant-based proteins, oils and binders, like methylcellulose and potato starch, to achieve a realistic texture for their ground beef and patties -- though the texture of ground beef is arguably easier to achieve than that of steak.  Atlast Food uses mushroom fibers to emulate animal tissue in its meatless bacon.\n Whether it be for health, environmental or ethical reasons, consumers are buying more meat alternatives. Last year, market analysts at Barclays estimated the global market for meat substitutes could reach $140 billion by 2029, according to a June 2019 article from the research firm  Statista. Recent data seems to support that trend, as   Forbes reported in early May that alternative meat sales grew since the start of the pandemic.\n Redefine Meat isn\u2019t the only company attempting 3D-printed meat alternatives. Spanish company  NovaMeat is working on 3D-printed steak and  pork substitutes. NovaMeat CEO Giuseppe Scionti told  Reuters his company\u2019s product will be available \u201cin selected top restaurants\u201d in Europe this year, and will have a wider release in 2021.", "posttime": "2020-07-02 18:16:07", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6253\u5370,\u690d\u7269\u6027,plant", "title": "3D\u6253\u5370\u7684\u690d\u7269\u6027\u725b\u6392\u53ef\u80fd\u57282021\u5e74\u4e0a\u5e02", "title_en": "3D-Printed Plant-Based Steaks Could Arrive In 2021", "transed": 1, "url": "https://www.engadget.com/3d-printed-plantbased-steaks-193947695.html", "via": "", "real_tags": ["\u6253\u5370", "\u690d\u7269\u6027", "plant"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1009448, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u8fd8\u6ca1\u6709\u5b8c\u5168\u51c6\u5907\u597d\u8fdb\u5165\u9ec4\u91d1\u65f6\u95f4\uff0c\u4f46\u662f\u5982\u679c\u4f60\u559c\u6b22\u5371\u9669\u7684\u751f\u6d3b\uff0c\u6211\u4eec\u9080\u8bf7\u4f60\u5c1d\u8bd5\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5f00\u6d4b\u8bd5\u7248\u3002\n\u6709\u4e86WordPress\u7684\u6545\u4e8b\uff0c\u6211\u4eec\u5c06\u4e3aWordPress\u5e26\u6765\u4e00\u6d41\u7684Web\u6545\u4e8b\u652f\u6301\u3002", "note_en": "We&#39;re not quite ready for prime time yet, but if you like to live dangerously, we invite you to try our first public beta.\n  With Stories for WordPress, we&#39;re bringing first-class Web Stories support to WordPress.", "posttime": "2020-07-02 17:36:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u5f00\u6e90,stories,\u6545\u4e8b", "title": "Google\u548c\u5f00\u6e90\u4e3aWordPress\u7f16\u5199\u7684Web\u6545\u4e8b", "title_en": "Web Stories for WordPress by Google and open source", "transed": 1, "url": "https://google.github.io/web-stories-wp/beta/", "via": "", "real_tags": ["google", "\u5f00\u6e90", "stories", "\u6545\u4e8b"]}, {"category": "", "categoryclass": "", "imagename": "99e5aee66303065c97b732cc0dd1a03e.jpeg", "infoid": 1009447, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6b63\u5728\u52aa\u529b\u9605\u8bfb\u6240\u6709\u5173\u4e8e\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u597d\u6587\u7ae0\u3002\u8fd9\u975e\u5e38\u5bb9\u6613\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u592a\u591a\u7684\u4e1c\u897f\u88ab\u5199\u51fa\u6765\uff1a\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5199\u4e00\u7bc7\u5173\u4e8e\u5982\u4f55\u5c06\u4fc4\u7f57\u65af\u65b9\u5757AI\u4f5c\u4e3a\u4e00\u4e2a\u5bb9\u5668\u5316\u7684Kotlin\u5fae\u670d\u52a1\u7f16\u5199\u7684\u6587\u7ae0\u8981\u6bd4\u6df1\u5165\u4e86\u89e3\u5982\u4f55\u7f16\u5199\u597d\u7684\u4ee3\u7801\u8981\u5bb9\u6613\u5f97\u591a\u3002\u56e0\u6b64\uff0c\u5f53\u6211\u542c\u8bf4John Ousterhout\u7684\u65b0\u4e66\u201c\u8f6f\u4ef6\u8bbe\u8ba1\u54f2\u5b66\u201d\u65f6\uff0c\u6211\u7acb\u5373\u8ba2\u8d2d\u4e86\u4e00\u672c\u3002\n\u6211\u8bb0\u5f97\u65af\u5766\u798f\u5927\u5b66\u7814\u7a76\u751f\u8bbf\u95ee\u65e5\u7684\u7ea6\u7ff0\u00b7\u6b27\u65af\u7279\u80e1\u7279(John Ousterhout)\u9970\u6f14\u4e00\u4e2a\u9ad8\u4e2a\u5b50\uff0c\u4ed6\u7528\u4e00\u4e2a\u81ea\u5632\u7684\u7b11\u8bdd\u81ea\u6211\u4ecb\u7ecd\uff0c\u5e76\u9080\u8bf7\u6240\u6709\u88ab\u5f55\u53d6\u7684\u535a\u58eb\u5230\u4ed6\u5bb6\u5171\u8fdb\u665a\u9910\u3002\u6211\u8fd8\u77e5\u9053\u4ed6\u662f\u51ef\u00b7\u5965\u65af\u7279\u80e1\u7279(Kay Ousterhout)\u548c\u827e\u7c73\u00b7\u5965\u65af\u7279\u80e1\u7279(Amy Ousterhout)\u7684\u7236\u4eb2\uff0c\u6211\u6700\u8fd1\u5728Strange Loop\u9047\u5230\u4e86\u4ed6\u4eec\uff0c\u827e\u7c73\u00b7\u5965\u65af\u7279\u80e1\u7279\u662f\u7b2c\u4e00\u5bf9\u90fd\u83b7\u5f97\u4eab\u6709\u76db\u8a89\u7684\u8d6b\u5179\u8054\u8c0a\u4f1a(Hertz Fellowship)\u7684\u59d0\u59b9\u3002\n170\u9875\u7684\u201c\u8f6f\u4ef6\u8bbe\u8ba1\u54f2\u5b66\u201d(\u4ee5\u4e0b\u7b80\u79f0\uff1aPOSD)\u662f\u4e00\u672c\u4e0d\u8d77\u773c\u7684\u4e66\u3002\u7ea6\u7ff0\u7684\u80cc\u666f\u662f\u7cfb\u7edf\uff0c\u800c\u4e0d\u662f\u8f6f\u4ef6\u5de5\u7a0b\u6216\u7f16\u7a0b\u8bed\u8a00\uff0c\u4ed6\u4ece\u6765\u6ca1\u6709\u58f0\u79f0\u81ea\u5df1\u6709\u7279\u522b\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002\u4f46\u4ed6\u7684\u4ece\u4e1a\u8005\u4fe1\u8a89\u662f\u5de8\u5927\u7684\u3002\u6211\u559c\u6b22\u62c6\u89e3\u5f00\u6e90\u9879\u76ee\uff0c\u5e76\u5c06\u5b83\u4eec\u8f6c\u5316\u4e3a\u4e0d\u5e94\u8be5\u505a\u7684\u6848\u4f8b\u7814\u7a76\uff0c\u6211\u7684\u5b66\u751f\u5982\u6b64\u4e4b\u591a\uff0c\u4ee5\u81f3\u4e8e\u6211\u8981\u6c42\u6211\u5199\u4e00\u4e2a\u5173\u4e8e\u597d\u4ee3\u7801\u7684\u6848\u4f8b\u7814\u7a76\uff0c\u8fd9\u4e00\u6b21\u662f\u5982\u6b64\u4e4b\u591a\u3002Ousterhout\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u7cfb\u7edfRAMCloud\u73b0\u5728\u5728\u6211\u7684\u5019\u9009\u540d\u5355\u4e0a\uff1a\u4ece5\u5206\u949f\u7684\u65f6\u95f4\u6765\u770b\uff0c\u5b83\u662f\u6211\u89c1\u8fc7\u7684\u6700\u5e72\u51c0\u3001\u6587\u6863\u6700\u5b8c\u6574\u7684\u4ee3\u7801\u4e4b\u4e00\u3002\u800c\u4e14\uff0c\u8003\u8651\u5230\u4ed6\u662f\u4e00\u4e2a\u7ba1\u7406\u5927\u578b\u5b9e\u9a8c\u5ba4\u7684\u5fd9\u788c\u7684\u6559\u6388\uff0c\u4ed6\u81ea\u5df1\u5199\u4e86\u5927\u91cf\u7684\u6587\u7ae0\u3002\u4ed6\u4e5f\u4ea7\u751f\u4e86\u5f88\u5927\u7684\u5f71\u54cd\uff1a\u4ed6\u662fTcl\u8bed\u8a00\u53ca\u5176Tk\u6846\u67b6\u7684\u521b\u5efa\u8005\uff0c\u6211\u57282005\u5e74\u4e86\u89e3\u5230Tcl\u8bed\u8a00\u53ca\u5176Tk\u6846\u67b6\u662f\u7f16\u5199GUI\u7684\u65b9\u6cd5(\u2122)\u3002\nPOSD\u6700\u597d\u662f\u4f5c\u4e3a\u5982\u4f55\u64cd\u4f5c\u7684\u6218\u672f\u6307\u5357\u6765\u9605\u8bfb\u3002\u5927\u7ea6\u56db\u5206\u4e4b\u4e00\u7684\u5185\u5bb9\u82b1\u5728\u547d\u540d\u548c\u8bc4\u8bba\u4e0a\uff0c\u5176\u4f59\u7684\u5927\u90e8\u5206\u662f\u5173\u4e8e\u7279\u5b9a\u6a21\u5f0f\u7684\u3002\u4ed6\u5f88\u5c11\u5c1d\u8bd5\u4ece\u6218\u672f\u5efa\u8bae\u8df3\u5230\u539f\u5219\u4e0a\uff0c\u8981\u4e48\u662f\u8bd5\u56fe\u5c06\u542c\u8d77\u6765\u76f8\u4f3c\u7684\u63d0\u793a\u6df7\u4e3a\u4e00\u8c08\uff0c\u8981\u4e48\u662f\u56e0\u4e3a\u4ed6\u770b\u4e0d\u5230\u4ee3\u7801\u4ee5\u5916\u7684\u7a0b\u5e8f\u7684\u610f\u4e49(\u7a0d\u540e\u5c06\u8be6\u7ec6\u4ecb\u7ecd)\u3002\u4ed6\u5728\u7b2c19\u7ae0\u6ed1\u7a3d\u5730\u8bf4\u660e\u4e86\u7f3a\u4e4f\u539f\u5219\uff0c\u4ed6\u627f\u8bfa\u5c06\u4e66\u4e2d\u7684\u201c\u539f\u5219\u201d\u5e94\u7528\u4e8e\u51e0\u79cd\u8f6f\u4ef6\u8d8b\u52bf\uff0c\u7136\u540e\u5728\u8fd9\u4e00\u7ae0\u7684\u5176\u4f59\u90e8\u5206\u5145\u6ee1\u4e86\u5173\u4e8e\u5355\u5143\u6d4b\u8bd5\u548cOOP\u7684\u6807\u51c6(\u4f46\u53ef\u9760\u7684)\u5efa\u8bae\uff0c\u4f46\u6ca1\u6709\u63d0\u5230\u672c\u4e66\u7684\u5176\u4f59\u90e8\u5206\u3002\u603b\u4f53\u800c\u8a00\uff0c\u8fd9\u672c\u4e66\u7684\u5efa\u8bae\u6bd4\u50cfClean Code\u8fd9\u6837\u7684\u521d\u5b66\u8005\u4e66\u7c4d\u6c34\u5e73\u66f4\u9ad8\uff0c\u4f46\u5b83\u7684\u5927\u90e8\u5206\u5185\u5bb9\u5bf9\u4e8e\u9ad8\u7ea7\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u6765\u8bf4\u90fd\u662f\u719f\u6089\u7684\uff0c\u800c\u4e14\u65b0\u5947\u7684\u90e8\u5206\u4e5f\u662f\u53c2\u5dee\u4e0d\u9f50\u7684\u3002\n\u5728\u50cf\u201c\u4ee3\u7801\u7b80\u5355\u6027\u201d\u8fd9\u6837\u7684\u5176\u4ed6\u4e66\u7c4d\u4e4b\u540e\uff0cPOSD\u9996\u5148\u9ad8\u77bb\u8fdc\u77a9\u5730\u89e3\u91ca\u4e86\u597d\u4ee3\u7801\u7684\u597d\u5904\u548c\u590d\u6742\u6027\u7684\u5371\u9669\u3002\u5b83\u7684\u524d\u51e0\u7ae0\u5168\u9762\u4ecb\u7ecd\u4e86\u8f6f\u4ef6\u7ec4\u7ec7\u7684\u57fa\u672c\u6982\u5ff5\uff1a\u5206\u79bb\u62bd\u8c61\u7ea7\u522b\u3001\u9694\u79bb\u590d\u6742\u6027\u4ee5\u53ca\u4f55\u65f6\u62c6\u5206\u529f\u80fd\u3002\u7b2c5\u7ae0\u662f\u6211\u89c1\u8fc7\u7684\u5bf9Parnas\u5173\u4e8e\u4fe1\u606f\u9690\u85cf\u601d\u60f3\u7684\u6700\u5e73\u6613\u8fd1\u4eba\u7684\u4ecb\u7ecd\u4e4b\u4e00\u3002\u4f46\u5728\u7b2c4\u7ae0\uff0c\u4ed6\u4ecb\u7ecd\u4e86\u8fd9\u672c\u4e66\u7684\u4e2d\u5fc3\u601d\u60f3\uff1a\u6df1\u5ea6\u6a21\u5757\u3002Ousterhout\u89e3\u91ca\u8bf4\uff0c\u63a5\u53e3\u4e0d\u4ec5\u4ec5\u662f\u4ee3\u7801\u4e2d\u7f16\u5199\u7684\u51fd\u6570\u7b7e\u540d\u3002\u5b83\u8fd8\u5305\u62ec\u975e\u6b63\u5f0f\u5143\u7d20\uff1a\u9ad8\u7ea7\u884c\u4e3a\u3001\u5bf9\u6392\u5e8f\u7684\u7ea6\u675f\uff1b\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u5b83\u9700\u8981\u77e5\u9053\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u8bb8\u591a\u6a21\u5757\u90fd\u5f88\u80a4\u6d45\uff1a\u5b83\u4eec\u9700\u8981\u505a\u5f88\u591a\u89e3\u91ca\uff0c\u4f46\u5b9e\u9645\u4e0a\u505a\u7684\u5e76\u4e0d\u591a\u3002\u4e00\u4e2a\u597d\u7684\u6a21\u5757\u662f\u6df1\u5165\u7684\uff1a\u63a5\u53e3\u5e94\u8be5\u6bd4\u5b9e\u73b0\u7b80\u5355\u5f97\u591a\u3002\n\u8bf4\u201c\u63a5\u53e3\u5e94\u8be5\u6bd4\u5b9e\u73b0\u77ed\uff1f\u201d\u542c\u8d77\u6765\u5f88\u4e0d\u9519\u3002\u4f60\u600e\u4e48\u6d4b\u8bd5\u5b83\uff1f\n\u5bf9\u4e8eOusterhout\u6765\u8bf4\uff0c\u754c\u9762\u53ea\u662f\u4e00\u4e2a\u8bc4\u8bba\u548c\u4e00\u4e9b\u5173\u4e8e\u5b83\u662f\u5426\u6613\u4e8e\u4f7f\u7528\u548c\u8003\u8651\u7684\u8ba8\u8bba\u3002\u76f4\u89c9\u548c\u7ecf\u9a8c\u662f\u8fd9\u91cc\u552f\u4e00\u7684\u4ef2\u88c1\u8005\u3002\u8fd9\u5c31\u66b4\u9732\u4e86\u4ed6\u7684\u4e3b\u8981\u76f2\u70b9\u3002\n\u6211\u4e4b\u524d\u5df2\u7ecf\u89e3\u91ca\u8fc7\uff0c\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u91cd\u8981\u4fe1\u606f\u4e0d\u5728\u4ee3\u7801\u4e2d(2\u7ea7)\uff0c\u800c\u5728\u903b\u8f91\u4e2d\uff1a\u5f88\u5c11\u5177\u4f53\u5199\u4e0b\u6765\uff0c\u4f46\u4ecd\u7136\u5851\u9020\u4ee3\u7801\u7684\u89c4\u8303\u548c\u63a8\u7406\u3002\u6211\u5c06\u8fd9\u4e9b\u6784\u4ef6\u5206\u7ec4\u5230\u805a\u5408\u7684\u201c\u7b2c3\u7ea7\u6784\u9020\u201d\u4e2d\u3002Ousterhout\u63cf\u8ff0\u7684\u201c\u975e\u6b63\u5f0f\u63a5\u53e3\u201d\u5c31\u662f\u8fd9\u6837\u76843\u7ea7\u7ed3\u6784\uff0c\u4f46\u5b83\u4eec\u548c\u4ee3\u7801\u4e00\u6837\u771f\u5b9e\uff0c\u800c\u4e14\uff0c\u4e0eOusterhout\u76f8\u53cd\uff0c\u6709\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u53ef\u4ee5\u8ba9\u60a8\u5199\u4e0b\u5e76\u68c0\u67e5\u5b83\u4eec\u3002\n\u8fd9\u6837\u505a\u7684\u7ecf\u9a8c\u4f7f\u6211\u4eec\u5728\u8c08\u8bba\u8f6f\u4ef6\u8bbe\u8ba1\u65f6\u6709\u4e86\u5177\u4f53\u7684\u57fa\u7840\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5982\u4f55\u8fdb\u5165\u8f6f\u4ef6\u5de5\u7a0b\u7684\u540e\u4e25\u683c\u9636\u6bb5\uff0c\u5e76\u4e14\u77e5\u9053\u5f53\u6211\u4eec\u4f7f\u7528\u8bf8\u5982\u201c\u63a5\u53e3\u201d\u548c\u201c\u590d\u6742\u6027\u201d\u4e4b\u7c7b\u7684\u672f\u8bed\u65f6\u6211\u4eec\u7684\u610f\u601d\u3002\u5b83\u4fdd\u62a4\u6211\u4eec\u4e0d\u4f1a\u53d1\u8868\u4ee4\u4eba\u56f0\u60d1\u548c\u81ea\u76f8\u77db\u76fe\u7684\u58f0\u660e\u3002\u5965\u65af\u7279\u80e1\u7279\u7f3a\u4e4f\u8fd9\u79cd\u6d1e\u5bdf\u529b\uff0c\u8fd9\u5c31\u662f\u4ed6\u88ab\u70e7\u4f24\u7684\u539f\u56e0\u3002\n\u6211\u4f1a\u7a0d\u4f5c\u505c\u987f\uff0c\u544a\u8bc9\u4f60\u4eec\uff1a\u603b\u7684\u6765\u8bf4\uff0c\u6211\u559c\u6b22\u8fd9\u672c\u4e66\u3002\u8fd9\u672c\u4e66\u5199\u5f97\u5f88\u597d\uff0c\u4e66\u4e2d\u6709\u5f88\u591a\u6211\u8ba4\u4e3a\u6709\u7528\u7684\u5efa\u8bae\uff0c\u5c3d\u7ba1\u5b83\u7684\u57fa\u7840\u4e0d\u7a33\u56fa\uff0c\u4f46\u66f4\u591a\u7684\u5efa\u8bae\u6839\u672c\u4e0d\u4f9d\u8d56\u4e8e\u6b64\u3002\u4e0d\u8fc7\uff0c\u5965\u65af\u7279\u80e1\u7279\u5bf9\u6b64\u5c0f\u9898\u5927\u505a\uff0c\u6240\u4ee5\u6211\u5c06\u7528\u51e0\u9875\u7eb8\u6765\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5b83\u662f\u9519\u8bef\u7684\u3002\u8fd9\u4e9b\u60f3\u6cd5\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u901a\u5411\u66f4\u9ad8\u6c34\u5e73\u638c\u63e1\u7684\u4e00\u90e8\u5206\u3002\n\u6211\u7684\u89c2\u70b9\u662f\uff0cOusterhout\u7684\u201c\u975e\u6b63\u5f0f\u63a5\u53e3\u201d\u53ea\u662f\u5c06\u6b63\u5f0f\u89c4\u8303\u7ffb\u8bd1\u6210\u82f1\u8bed\u3002\u6211\u4eec\u5bf9\u63a5\u53e3\u7684\u4efb\u4f55\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u95ee\u201c\u89c4\u8303\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff1f\u201d\u6765\u56de\u7b54\u3002\u867d\u7136\u6211\u65e0\u6cd5\u5728\u4e0d\u6df1\u5165\u6b27\u65af\u7279\u80e1\u7279\u5934\u8111\u7684\u60c5\u51b5\u4e0b\u8bc1\u660e\u8fd9\u4e9b\u901a\u4fe1\uff0c\u4f46\u6211\u53d1\u73b0\u8fd9\u4e2a\u955c\u5934\u5728\u5e2e\u52a9\u89e3\u91ca\u8f6f\u4ef6\u8bbe\u8ba1\u65b9\u9762\u4e0d\u5408\u7406\u5730\u6709\u6548\u3002\u56e0\u6b64\uff0c\u5728\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u5c06\u4ea4\u66ff\u4f7f\u7528\u201c\u89c4\u8303\u201d\u548c\u201c\u63a5\u53e3\u201d\u8fd9\u4e24\u4e2a\u8bcd\u3002\n\u6211\u540c\u610f\u89c4\u8303\u901a\u5e38\u5e94\u8be5\u6bd4\u4ee3\u7801\u7b80\u5355\u5f97\u591a\u3002\u4f46\u662f\uff0c\u4efb\u4f55\u6709\u5b9e\u9645\u89c4\u8303\u5f62\u5f0f\u5316\u7ecf\u9a8c\u7684\u4eba\u90fd\u53ef\u4ee5\u544a\u8bc9\u60a8\uff0c\u5728\u4e00\u4e9b\u6709\u8da3\u7684\u60c5\u51b5\u4e0b\uff0c\u89c4\u8303\u6bd4\u5b9e\u73b0\u66f4\u590d\u6742\uff0c\u800c\u4e14\u5e94\u8be5\u6bd4\u5b9e\u73b0\u66f4\u590d\u6742\u3002\n\u8fd9\u662f\u5bf9\u7684\uff1a\u6709\u4e9b\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u5e0c\u671b\u6709\u4e00\u4e2a\u6bd4\u4ee3\u7801\u66f4\u590d\u6742\u7684\u89c4\u8303\u3002\u4e24\u4e2a\u4e3b\u8981\u539f\u56e0\u662f\u5e7d\u7075\u72b6\u6001\u548c\u4e0d\u7cbe\u786e\u3002\u5e7b\u5f71\u72b6\u6001\u662f\u6765\u81ea\u9a8c\u8bc1\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u5b83\u63cf\u8ff0\u4e86\u67d0\u4e9b\u7c7b\u578b\u7684\u201c\u5fae\u5999\u201d\u4ee3\u7801\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u8bdd\u9898\uff0c\u503c\u5f97\u53d1\u8868\u81ea\u5df1\u7684\u535a\u5ba2\u6587\u7ae0\uff1b\u6211\u4e0d\u4f1a\u518d\u63d0\u4e86\u3002(\u7b80\u800c\u8a00\u4e4b\uff1a\u8fd9\u662f\u6307\u4e00\u4e2a\u7b80\u5355\u7684\u52a8\u4f5c\uff0c\u6bd4\u5982\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u5b9e\u9645\u4e0a\u4ee3\u8868\u4e86\u4e00\u4e9b\u6982\u5ff5\u4e0a\u7684\u590d\u6742\u4e1c\u897f\u3002)\u3002\n\u89c4\u8303\u4e4b\u6240\u4ee5\u66f4\u957f\uff0c\u6b63\u662f\u56e0\u4e3a\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a\u62bd\u8c61\u969c\u788d\u3002\u5982\u679c\u60a8\u5728\u8bbe\u8ba1\u7cfb\u7edf\u7684\u5176\u4f59\u90e8\u5206\u65f6\u5047\u8bbeFudarkameter\u6070\u597d\u662f70\u5ea6\uff0c\u90a3\u4e48Fudarkameter\u5c31\u53d8\u5f97\u5f88\u96be\u66f4\u6539\u6216\u66f4\u6362\u3002\u901a\u8fc7\u524a\u5f31\u5bf9\u6a21\u5757\u7684\u5047\u8bbe\uff0c\u4ee3\u7801\u53d8\u5f97\u66f4\u5177\u8fdb\u5316\u80fd\u529b\u3002\n\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u53e6\u4e00\u4e2a\u6839\u672c\u539f\u56e0\uff1a\u4ece\u5185\u90e8\u63cf\u8ff0\u67d0\u4e8b\u8981\u6bd4\u4ece\u5916\u90e8\u63cf\u8ff0\u5bb9\u6613\u5f97\u591a\u3002\u7ed9\u4f60\u770b\u4e00\u4e2a\u82f9\u679c\u6bd4\u56de\u7b54\u4f60\u5411\u5b83\u63d0\u51fa\u7684\u6bcf\u4e00\u4e2a\u95ee\u9898\u8981\u5bb9\u6613\u5f97\u591a\u3002(\u79cd\u5b50\u5728\u54ea\u91cc\uff1f\u6211\u6389\u4e0b\u6765\u7684\u65f6\u5019\u5b83\u4f1a\u600e\u4e48\u6eda\uff1f)\u3002\u867d\u7136\u4f60\u53ef\u4ee5\u8bf4\u7684\u5173\u4e8e\u4e00\u4e2a\u82f9\u679c\u7684\u4e1c\u897f\u6bd4\u4e16\u754c\u4e0a\u6240\u6709\u7684\u82f9\u679c\u90fd\u591a\uff0c\u4f46\u662f\u5173\u4e8e\u4e00\u4e9b\u82f9\u679c\u7684\u4e8b\u60c5\u53ef\u80fd\u6bd4\u5173\u4e8e\u4e00\u4e2a\u82f9\u679c\u7684\u4e8b\u60c5\u66f4\u591a\u3002\n\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u4ee5\u5806\u6808\u6570\u636e\u7ed3\u6784\u4e3a\u4f8b\uff0c\u6211\u5e0c\u671b\u5927\u5bb6\u90fd\u540c\u610f\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u62bd\u8c61\u3002\u5806\u6808\u662f\u5177\u6709\u63a8\u5165\u548c\u5f39\u51fa\u64cd\u4f5c\u7684\u5e8f\u5217\uff0c\u9075\u5faa\u540e\u8fdb\u5148\u51fa\u7684\u987a\u5e8f\u3002\u94fe\u8868\u5b9e\u73b0\u975e\u5e38\u7b80\u77ed\uff1a\u53ea\u9700\u6dfb\u52a0\u548c\u5220\u9664\u5217\u8868\u524d\u9762\u7684\u5143\u7d20\u3002\u4f46\u662f\u5982\u679c\u60a8\u4f7f\u7528\u5806\u6808\uff0c\u5e76\u4e14\u60a8\u4e0d\u60f3\u4f7f\u7528\u6b64\u5b9e\u73b0\u7684\u5185\u90e8\u7ec6\u8282\uff0c\u90a3\u4e48\u60a8\u9700\u8981\u4e00\u79cd\u4e0d\u5f15\u7528\u5e95\u5c42\u5e8f\u5217\u7684\u65b9\u5f0f\u6765\u8003\u8651\u5b83\u3002\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u5806\u6808\u516c\u7406\uff0c\u8be5\u516c\u7406\u8bf4\u201c\u5982\u679c\u60a8\u5c06\u67d0\u4e2a\u4e1c\u897f\u538b\u5165\u5806\u6808\uff0c\u7136\u540e\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\uff0c\u60a8\u4f1a\u5f97\u5230\u65e7\u503c\u201d\u548c\u201c\u5982\u679c\u60a8\u66fe\u7ecf\u5c06\u67d0\u4e2a\u4e1c\u897f\u538b\u5165\u5806\u6808\uff0c\u90a3\u4e48\u5b83\u4e0d\u662f\u7a7a\u7684\u3002\u201d\u6211\u4eec\u5df2\u7ecf\u4ece\u89e3\u91ca\u5806\u6808\u64cd\u4f5c\u5982\u4f55\u64cd\u4f5c\u5185\u5b58\u7684\u5185\u90e8\u89c6\u56fe\uff0c\u5230\u89e3\u91ca\u5b83\u4eec\u7684\u4ea4\u4e92\u548c\u53ef\u89c2\u5bdf\u884c\u4e3a\u7684\u5916\u90e8\u89c6\u56fe\u3002\n\u5728\u6211\u4e0eOusterhout\u6559\u6388\u7684\u516c\u5f00\u901a\u4fe1\u4e2d\uff0c\u6211\u901a\u8fc7\u5199\u4e0b\u5806\u6808\u6570\u636e\u7ed3\u6784\u7684\u5b9e\u73b0\u548c\u63a5\u53e3(\u5305\u62ec\u5806\u6808\u516c\u7406)\u6765\u8bf4\u660e\u8fd9\u4e00\u70b9\u3002\u6211\u7684\u5b9e\u73b0\u662f30\u4e2a\u4ee4\u724c\uff1b\u63a5\u53e3\u662f54\u4e2a\u3002\n\u4e5f\u8bb8\u60a8\u53ef\u4ee5\u627e\u5230\u4e00\u79cd\u66f4\u77ed\u7684\u65b9\u5f0f\u6765\u89e3\u91ca\u5806\u6808\uff0c\u4f46\u8fd9\u770b\u8d77\u6765\u5e76\u4e0d\u597d\u3002\u770b\u8d77\u6765\uff0cOusterhout\u7684\u5efa\u8bae\u5b9e\u9645\u4e0a\u662f\u5728\u544a\u8bc9\u6211\u4eec\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u5806\u6808(\u6216\u8005\uff0c\u81f3\u5c11\uff0c\u53ea\u4f7f\u7528\u66f4\u590d\u6742\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982\u65e0\u9501\u7684\u5e76\u53d1\u5806\u6808)\u3002\n\u6808\u7684\u63a5\u53e3\u5f88\u5bb9\u6613\u6bd4\u5b9e\u73b0\u5927\uff0c\u56e0\u4e3a\u5b83\u4eec\u592a\u5c0f\u4e86\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e9b\u66f4\u5927\u7684\u4e1c\u897f\u3002\u6211\u4e0d\u9700\u8981\u975e\u5e38\u52aa\u529b\u5730\u5bfb\u627e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u56e0\u4e3aOusterhout\u7ed9\u4e86\u6211\u4e00\u4e2a\u4f8b\u5b50\u3002\nUnix\u64cd\u4f5c\u7cfb\u7edf\u53ca\u5176\u540e\u4ee3(\u5982Linux)\u63d0\u4f9b\u7684\u6587\u4ef6IO\u673a\u5236\u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6df1\u5ea6\u63a5\u53e3\u793a\u4f8b\u3002I/O\u7684\u57fa\u672c\u7cfb\u7edf\u8c03\u7528\u53ea\u67095\u4e2a\uff0c\u7b7e\u540d\u7b80\u5355\uff1a\nint open(const char*path\uff0cint\u6807\u5fd7\uff0cmode_t\u6743\u9650)\uff1bssize_t read(int fd\uff0cvoid*buffer\uff0csize_t count)\uff1bssize_t write(int fd\uff0cconst void*buffer\uff0csize_t count)\uff1boff_t lSeek(int fd\uff0coff_t Offset\uff0cint reference encePosition)\uff1bint close(Int FD)\uff1b\nPOSIX\u6587\u4ef6API\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u793a\u4f8b\uff0c\u4f46\u4e0d\u662f\u6df1\u5ea6\u63a5\u53e3\u3002\u76f8\u53cd\uff0c\u5b83\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u8bf4\u660e\u4e86\u5f53\u7b80\u5316\u4e3aC\u6837\u5f0f\u7684\u51fd\u6570\u7b7e\u540d\u65f6\uff0c\u5177\u6709\u975e\u5e38\u590d\u6742\u63a5\u53e3\u7684\u4ee3\u7801\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u7b80\u5355\u3002\u5b83\u662f\u4e00\u4e2a\u6709\u72b6\u6001API\uff0c\u5177\u6709\u6709\u8da3\u7684\u987a\u5e8f\u548c\u8c03\u7528\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002OPEN\u7684\u6807\u5fd7\u548c\u6743\u9650\u53c2\u6570\u9690\u85cf\u4e86\u5de8\u5927\u7684\u590d\u6742\u6027\uff0c\u9690\u85cf\u7684\u8981\u6c42\u5982\u201c\u5e94\u8be5\u6b63\u597d\u6307\u5b9a\u8fd9\u4e94\u4f4d\u4e2d\u7684\u4e00\u4f4d\u201d\u3002OPEN\u53ef\u80fd\u4f1a\u8fd4\u56de20\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\u4ee3\u7801\uff0c\u6bcf\u4e2a\u9519\u8bef\u4ee3\u7801\u90fd\u6709\u81ea\u5df1\u7684\u542b\u4e49\uff0c\u5e76\u4e14\u8bb8\u591a\u9519\u8bef\u4ee3\u7801\u90fd\u5f15\u7528\u4e86\u7279\u5b9a\u7684\u5b9e\u73b0\u3002\nSibylFS\u7684\u4f5c\u8005\u8bd5\u56fe\u5199\u4e0b\u5f00\u653e\u63a5\u53e3\u7684\u51c6\u786e\u63cf\u8ff0\u3002\u4ed6\u4eec\u7684\u5e26\u6ce8\u91ca\u7248\u672c\u7684POSIX\u6807\u51c6\u7248\u672c\u8d85\u8fc73000\u5b57\u3002\u4e0d\u5305\u62ec\u57fa\u672c\u7684\u673a\u5668\uff0c\u4ed6\u4eec\u82b1\u4e86200\u591a\u884c\u7528\u9ad8\u9636\u903b\u8f91\u5199\u4e0b\u4e86\u5f00\u653e\u7684\u6027\u8d28\uff0c\u53c8\u82b1\u4e8670\u884c\u6765\u7ed9\u51fa\u5f00\u653e\u548c\u5173\u95ed\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u867d\u7136\u5f88\u96be\u8ba1\u7b97\u7279\u6027\u7684\u5927\u5c0f\uff0c\u4f46\u5b83\u4eec\u7684\u6a21\u578b\u5b9e\u73b0\u53ea\u670940\u884c\u4ee3\u7801\u3002\n\u662f\u7684\uff0cLinux\u4e2d\u7684\u5b9e\u9645\u7248\u672c\u8981\u957f\u5f97\u591a\uff0c\u5373\u4f7f\u4e0d\u5305\u62ec\u5b83\u6240\u57fa\u4e8e\u7684\u66f4\u901a\u7528\u7684\u201cinode\u201d\u673a\u5236\u3002\u800c\u4e14\uff0c\u60a8\u53ea\u9700\u5bf9API\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u5c31\u53ef\u4ee5\u8fc7\u5f97\u53bb\u3002\u4f46\u662f\uff0c\u5728\u7814\u7a76\u4e86\u5b83\u7684\u8bed\u4e49(\u4e00\u4e2a\u771f\u6b63\u76843\u7ea7\u6784\u4ef6)\u4e4b\u540e\uff0c\u6211\u4eec\u73b0\u5728\u5bf9\u8fd9\u4e2aAPI\u7684\u590d\u6742\u6027\u6709\u4e86\u66f4\u771f\u5b9e\u7684\u8ba4\u8bc6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u201c\u7b80\u5355\u7684\u201d\u7b7e\u540d\u3002\n\u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\u6765\u6539\u8fdb\u8fd9\u4e2aAPI\uff0c\u4f46\u662f\u5b9e\u73b0\u53ef\u4ee5\u66f4\u77ed\u662f\u6709\u6839\u672c\u539f\u56e0\u7684\u3002\u8fd9\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u65e8\u5728\u63cf\u8ff0\u5f00\u653e\u7684\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u5b9e\u73b0\u3002\u7d27\u968f\u5176\u540e\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4e0e\u5b83\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e00\u8d77\u4f7f\u7528\u3002\u90a3\u4e48\uff0c\u5b83\u600e\u4e48\u4f1a\u6bd4\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u66f4\u7b80\u5355\u5462\uff1f\n\u56e0\u6b64\uff0c\u5f53\u4e0e\u5176\u66f4\u7b80\u5355\u7684\u5b9e\u73b0\u7ed3\u5408\u5728\u4e00\u8d77\u65f6\uff0c\u5f00\u653e\u786e\u5b9e\u662fOusterhout\u6240\u553e\u5f03\u7684\u6d45\u8584API\u4e4b\u4e00\u3002\u8003\u8651\u5230\u5b83\u610f\u5473\u7740\u5305\u542b\u7684\u591a\u6837\u6027\u5982\u6b64\u4e4b\u591a\uff0c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8fd9\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\n(Ousterhout\u7684\u53cd\u9a73\u662f\uff1a\u201c\u60a8\u53ea\u662f\u5728\u8c08\u8bba\u89c4\u8303\uff0c\u800c\u4e0d\u662f\u5b83\u4eec\u7528\u6765\u7f16\u5199\u80fd\u591f\u5de5\u4f5c\u7684\u4ee3\u7801\u6709\u591a\u5bb9\u6613\u3002\u201d\u770b\u4e00\u4e0b\u89c4\u8303\u4e2d\u7684\u5185\u5bb9\uff0c\u6211\u60f3\u8bf4\u4e86\u89e3\u5b83\u5982\u4f55\u89e3\u91ca\u6587\u4ef6\u8def\u5f84\u548cO_RDONLY\u6807\u5fd7\u7684\u4f5c\u7528\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u90fd\u662f\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u4e00\u90e8\u5206\u3002)\u3002\n\u4e5f\u8bb8\u4e00\u4e2a\u66f4\u5177\u7a7f\u900f\u529b\u7684\u4f8b\u5b50\u662f\u9488\u5bf9\u7b80\u5355\u590d\u5236\u78c1\u76d8\u7684\u8fd9\u4e2a\u5199\u5165\u529f\u80fd\u3002\u8fd9\u662f\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5176\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u78c1\u76d8\uff0c\u4f46\u5c06\u6240\u6709\u5185\u5bb9\u590d\u5236\u5230\u4e24\u4e2a\u5e95\u5c42\u78c1\u76d8\uff0c\u56e0\u6b64\u5373\u4f7f\u5176\u4e2d\u4e00\u4e2a\u78c1\u76d8\u51fa\u73b0\u6545\u969c\uff0c\u5b83\u4ecd\u7136\u53ef\u4ee5\u8fd0\u884c\u3002\u4e0b\u9762\u662fWrite\u51fd\u6570\uff0c\u4eceCoq\u97f3\u8bd1\u4e3aC\uff1a\n\u8fd9\u4e2a\u51fd\u6570\u7684\u89c4\u683c\u662f\u4ec0\u4e48\uff1f\u5b83\u5728\u4e24\u4e2a\u78c1\u76d8\u4e0a\u90fd\u88ab\u5199\u4e3ab\uff0c\u5982\u679c\u78c1\u76d8\u6b7b\u4e86\uff0c\u5219\u4e0d\u4f1a\u5bf9\u5176\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u5982\u679c\u7cfb\u7edf\u4e2d\u9014\u5d29\u6e83\uff0c\u5219\u8981\u4e48\u5199\u5165\u90fd\u4e0d\u6210\u529f\uff0c\u8981\u4e48\u78c1\u76d81\u5199\u5165\u6210\u529f\uff0c\u6216\u8005\u4e24\u4e2a\u5199\u5165\u90fd\u6210\u529f\u3002\u5728Coq\u4e2d\uff1a\n{|pre\uff1a=disk0 state\uff1f|=eq d/\\disk1 state\uff1f|=eq d\uff1bpost\uff1a=un r state&#39\uff1b=&gt\uff1br=tt/\\disk0 state&#39\uff1b\uff1f|=eq(DiskUpd A B)/\\disk1 state&#39\uff1b\uff1f|=eq(DiskUpd A B)\uff1bRECOVERED\uff1a=FUN_STATE&#39\uff1b=&gT\uff1bWRITE_RECOVER_CONDITION d a\u72b6\u6001&\u3002|})[.]\u3002\u5b9a\u4e49WRITE_RECOVER_CONDITION d a b\u72b6\u6001&#39\uff1b\uff1a=(disk0 state&#39\uff1b\uff1f|=eq d/\\disk1 state&#39\uff1b\uff1f|=eq d)\\/(disk0 state&#39\uff1b\uff1f|=eq(DiskUpd A B)/\\disk1 state&#39\uff1b\uff1f|=eq d)\\/(disk0 state&#39\uff1b\uff1f|=eq(DiskUpd A B)/\\disk1\u3002\n\u662f\u7684\uff0c\u8fd9\u662f\u5185\u90e8\u63a5\u53e3\u3002\u5916\u90e8API\u7684\u89c4\u8303\u66f4\u7b80\u5355\uff0c\u4f46\u4ecd\u7136\u6bd4\u4ee3\u7801\u957f\u3002\n\u5728\u90a3\u4e2a\u6587\u4ef6\u7684\u5176\u4ed6\u5730\u65b9\u6709\u66f4\u591a\u7684\u4e50\u8da3\u3002\u6211\u5bf9\u6062\u590d\u8fc7\u7a0b\u7684\u89c4\u8303\u603b\u5171\u670970\u884c\u590d\u6742\u7684\u4ee3\u7801\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u7528\u4e8e\u5b9e\u73b0\u7684\u7b80\u5355\u4ee3\u7801\u884c\u53ea\u670929\u884c\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5728\u7f16\u5199\u8fd9\u7c7b\u4ee3\u7801\u65f6\uff0c\u60a8\u9700\u8981\u4e0d\u65ad\u5730\u8be2\u95ee\u201c\u5982\u679c\u6b64\u884c\u53d1\u751f\u5d29\u6e83\u4f1a\u53d1\u751f\u4ec0\u4e48\u201d\u3002\u5f88\u5bb9\u6613\u5ffd\u7565\u8fd9\u4e00\u70b9\uff0c\u5e76\u8ba4\u4e3a\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4f46\u903b\u8f91\u662f\u8d64\u88f8\u88f8\u7684\u3002\u56e0\u6b64\uff0c\u63a5\u53e3\u6bd4\u4ee3\u7801\u957f\u5f97\u591a\u3002\n\u56e0\u6b64\uff0cOusterhout\u5bf9\u6df1\u5c42\u6a21\u5757\u7684\u6df1\u523b\u89c1\u89e3\u662f\u6709\u7f3a\u9677\u7684\uff0c\u57fa\u4e8e\u5b83\u7684\u5efa\u8bae\u662f\u4e0d\u53ef\u9760\u7684\u3002\u4f7f\u7528\u5b83\uff0c\u4ed6\u62a8\u51fb\u4e86\u5236\u4f5c\u5c0f\u578b\u7c7b/\u65b9\u6cd5\u7684\u666e\u904d\u667a\u6167\uff0c\u4f46\u6ca1\u6709\u7ed9\u51fa\u4e00\u79cd\u65b9\u6cd5\u6765\u533a\u5206\u4f55\u65f6\u8fd9\u6837\u505a\u662f\u62bd\u8c61\u67d0\u4e9b\u4e1c\u897f\u8fd8\u662f\u4ec5\u4ec5\u6dfb\u52a0\u95f4\u63a5\u7684\u4e1c\u897f\u3002\n\u6574\u672c\u4e66\u4e2d\u6709\u8bb8\u591a\u8f83\u5c0f\u7684\u7f3a\u9677\uff0c\u8fd9\u4e9b\u7f3a\u9677\u6765\u81ea\u4e8e\u6ca1\u6709\u76f4\u63a5\u63a5\u89e6\u5230\u7ea7\u522b3\u7684\u6784\u9020\u3002\u4f8b\u5982\uff0c\u5728\u65e9\u671f\u5173\u4e8e\u8026\u5408\u7684\u8ba8\u8bba\u4e2d\uff0c\u4ed6\u8ba8\u8bba\u4e86\u4e8c\u8fdb\u5236\u534f\u8bae\u7684\u89e3\u6790\u548c\u5e8f\u5217\u5316\u4ee3\u7801\u5982\u4f55\u76f8\u4e92\u4f9d\u8d56\uff0c\u4f46\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5b83\u4eec\u90fd\u4f9d\u8d56\u4e8e\u8be5\u534f\u8bae\uff0c\u8be5\u534f\u8bae\u662f3\u7ea7\u7684\uff0c\u5b58\u5728\u4e8e\u4ee3\u7801\u4e4b\u5916\u3002(\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u8981\u4f7f\u7528\u5de5\u5177\u4ece\u5e8f\u5217\u5316\u7a0b\u5e8f\u5408\u6210\u89e3\u6790\u5668\uff0c\u5219\u9700\u8981\u9996\u5148\u63a8\u65ad\u534f\u8bae\uff0c\u7136\u540e\u4ece\u534f\u8bae\u751f\u6210\u89e3\u6790\u4ee3\u7801\u3002)\u3002\n\u5728\u7b2c9\u7ae0\u4e4b\u540e\uff0c\u672c\u4e66\u4e0d\u518d\u8bd5\u56fe\u5c06\u5e7f\u6cdb\u7684\u7f16\u7801\u539f\u5219\u5f15\u5165\u66f4\u8f6f\u7684\u9886\u57df\uff0c\u4e5f\u4e0d\u518d\u5c1d\u8bd5\u66f4\u5177\u4f53\u7684\u7f16\u7801\u5b9e\u8df5\u3002\u7b2c10\u7ae0\u201c\u5b9a\u4e49\u4e0d\u5b58\u5728\u7684\u9519\u8bef\u201d\u5bf9\u6211\u6765\u8bf4\u662f\u6700\u4e0d\u5bfb\u5e38\u3001\u6700\u53d1\u4eba\u6df1\u7701\u7684\u4e00\u7ae0\u3002\u6211\u6765\u8fd9\u91cc\u7684\u65f6\u5019\uff0c\u671f\u5f85\u7740\u4e00\u4e9b\u6211\u6559\u6388\u7684\u201c\u4f7f\u65e0\u6548\u72b6\u6001\u65e0\u6cd5\u4ee3\u8868\u201d\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\u6211\u5b9e\u9645\u4e0a\u53d1\u73b0\u7684\u662f\u66f4\u6539\u51fd\u6570\u89c4\u8303\u4ee5\u5bb9\u5fcd\u66f4\u591a\u8f93\u5165/\u60c5\u51b5\u7684\u4e0d\u540c\u6280\u5de7\u7684\u62fc\u51d1\u3002\n\u5f53\u6211\u8bd5\u56fe\u5c06\u8fd9\u4e00\u7ae0\u4e2d\u7684\u6bcf\u4e00\u6761\u5efa\u8bae\u90fd\u5f52\u7eb3\u51fa\u6765\u65f6\uff0c\u6211\u53d1\u73b0\u6709\u4e9b\u5efa\u8bae\u5b9e\u9645\u4e0a\u4e0e\u5176\u4ed6\u5efa\u8bae\u76f8\u53cd\u3002\u5728\u7b2c10.9\u8282\u4e2d\uff0c\u4ed6\u6073\u6c42\u6211\u4eec\u201c\u8bbe\u8ba1\u4e0d\u5b58\u5728\u7684\u7279\u6b8a\u60c5\u51b5\u201d\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u4ed6\u89e3\u91ca\u4e86\u5728\u6587\u672c\u7f16\u8f91\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5982\u4f55\u5c06\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u5efa\u6a21\u4e3a\u201c\u9009\u62e9\u59cb\u7ec8\u5b58\u5728\uff0c\u4f46\u53ef\u80fd\u4e3a\u7a7a\u201d\uff0c\u4ece\u800c\u4e0d\u518d\u9700\u8981\u7279\u6b8a\u4ee3\u7801\u6765\u5904\u7406\u6ca1\u6709\u9009\u62e9\u7684\u60c5\u51b5\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ece\u51fd\u6570\u7684\u89c4\u8303\u4e2d\u53bb\u6389\u4e00\u4e2a\u6761\u4ef6\u3002\u4f46\u662f\u5728\u7b2c10.5\u8282\u4e2d\uff0c\u4ed6\u544a\u8bc9\u6211\u4eec\u5e94\u8be5\u5728\u51fd\u6570\u7684\u89c4\u8303\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6761\u4ef6\uff0c\u5373\u4f7fJava\u7684\u5b50\u5b57\u7b26\u4e32\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u8d8a\u754c\u7d22\u5f15\u3002\u6211\u4e0d\u80fd\u5b8c\u5168\u80af\u5b9a\u4ed6\u662f\u9519\u7684(\u6b63\u5982\u6211\u5728\u6211\u7684Strange Loop\u6f14\u8bb2\u4e2d\u6240\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u8fd9\u53ef\u4ee5\u5f52\u7ed3\u4e3a\uff1a\u6709\u6ca1\u6709\u4e00\u79cd\u6e05\u6670\u7684\u65b9\u5f0f\u6765\u63cf\u8ff0\u8fd9\u79cd\u884c\u4e3a\uff1f)\uff0c\u4f46\u6211\u53d1\u73b0\u4ed6\u58f0\u79f0\u8fd9\u4f7f\u4ee3\u7801\u201c\u66f4\u7b80\u5355\u201d\uff0c\u53ea\u662f\u6bd4\u4ed6\u5173\u4e8eUnix\u6587\u4ef6API\u7684\u8bf4\u6cd5\u7a0d\u5fae\u53ef\u4fe1\u4e00\u70b9\u3002\n\u63a5\u4e0b\u6765\u76847\u7ae0\u662f\u672c\u4e66\u7684\u8f6f\u90e8\u5206\u3002\u7b2c11\u7ae0\u8ba4\u4e3a\uff0c\u4f60\u5e94\u8be5\u4e3a\u6bcf\u4ef6\u4e8b\u8003\u8651\u81f3\u5c11\u4e24\u79cd\u8bbe\u8ba1\uff0c\u8fd9\u662f\u51b3\u7b56\u8fc7\u7a0b\u4e2d\u591a\u91cd\u8ddf\u8e2a\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u4e0b\u9762\u5173\u4e8e\u8bc4\u8bba\u7684\u7ae0\u8282\u5199\u5f97\u5f88\u597d\uff0c\u5c3d\u7ba1\u6709\u65f6\u662f\u9053\u5fb7\u8bf4\u6559\uff0c\u4f46\u5bf9\u4e8e\u6211\u4e0d\u540c\u610f\u7684\u90e8\u5206\uff0c\u6211\u6ca1\u6709\u575a\u5b9e\u7684\u57fa\u7840\u3002\u6211\u975e\u5e38\u8d5e\u540c\u4ed6\u5728\u5b9e\u73b0\u63a5\u53e3(\u6253\u7834\u6ce8\u91ca\u4e4b\u95f4\u7684\u9690\u85cf\u8026\u5408)\u65f6\u7f16\u5199\u201c\u5728&lt\uff1b\u5176\u4ed6\u6587\u4ef6&gt\uff1b\u4e2d\u67e5\u770b\u6ce8\u91ca\u201d\u7684\u505a\u6cd5\u3002\u5728RAMCloud\u4ee3\u7801\u5e93\u4e2d\u770b\u5230\u5b83\u7684\u8fd0\u884c\u975e\u5e38\u6f02\u4eae\u3002\n\u76f4\u5230\u5012\u6570\u7b2c\u4e8c\u7ae0\u201c\u4e3a\u6027\u80fd\u800c\u8bbe\u8ba1\u201d\uff0c\u5965\u65af\u7279\u80e1\u7279\u624d\u4ece\u72c2\u70ed\u7231\u597d\u8005\u8f6c\u53d8\u4e3a\u4e13\u5bb6\u3002\u8fd9\u4e00\u7ae0\u7684\u4e2d\u5fc3\u662f\u4ed6\u7684\u201c\u56f4\u7ed5\u5173\u952e\u8def\u5f84\u8fdb\u884c\u8bbe\u8ba1\u201d\u7684\u6982\u5ff5\uff0c\u8fd9\u8ba9\u4eba\u60f3\u8d77Carmack\u5bf9\u5185\u8054\u4ee3\u7801\u7684\u8bc4\u8bba\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6e05\u6670\u7684RAMCloud\u6848\u4f8b\u7814\u7a76\u3002\u8fd9\u4e00\u7ae0\u95ea\u8000\u7740\u80dc\u5229\u7684\u7ecf\u9a8c\uff0c\u6211\u5f88\u4e50\u610f\u8bfb\u4ed6\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u4e00\u672c\u4e66\u3002\u6211\u53ea\u5e0c\u671b\u5b83\u80fd\u65e9\u70b9\u6765\u3002\n\u5728\u8fd9\u672c\u4e66\u7684\u540e\u534a\u90e8\u5206\uff0c\u6211\u53ea\u53d1\u73b0\u4e86\u4e24\u6761\u503c\u5f97\u6ce8\u610f\u7684\u5efa\u8bae\uff0c\u6211\u8ba4\u4e3a\u5b83\u4eec\u662f\u4e0d\u597d\u7684\u3002\n\u4e3a\u4ec0\u4e48\u5b83\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u5c3d\u7ba1\u5b83\u662f\u4e00\u4e2a\u6570\u7ec4\u5217\u8868\uff0cOusterhout\u95ee\u9053\uff1f\u8fd9\u662f\u4e0d\u662f\u8ba9\u5b83\u53d8\u5f97\u4e0d\u90a3\u4e48\u660e\u663e\u4e86\uff1f\u6bd5\u7adf\uff0cArrayList\u6709\u5b83\u4eec\u81ea\u5df1\u7684\u6027\u80fd\u5c5e\u6027\u3002\n\u662f\u7684\uff0c\u4f46\u662f\u5b83\u4e0d\u5fc5\u8981\u5730\u5c06\u4ee3\u7801\u7ed1\u5b9a\u5230ArrayList\u7684\u7279\u5b9a\u5b9e\u73b0\uff0c\u5e76\u4e14\u4f1a\u4f7f\u4ee3\u7801\u66f4\u96be\u66f4\u6539\u3002Joshua Bloch\u5728\u4ed6\u7684\u4e66Efficient Java\u4e2d\u7684\u7b2c52\u70b9\u201c\u901a\u8fc7\u5b83\u4eec\u7684\u63a5\u53e3\u5f15\u7528\u5bf9\u8c61\u201d\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u51e0\u4e4e\u76f8\u540c\u7684\u793a\u4f8b\uff0c\u5f7b\u5e95\u8bc1\u660e\u4e86\u76f8\u53cd\u7684\u5efa\u8bae\u3002\n\u4e0d\u8fc7\uff0c\u5728\u4e0eOusterhout\u8ba8\u8bba\u4e86\u8fd9\u4e2a\u4f8b\u5b50\u4e4b\u540e\uff0c\u542c\u8d77\u6765\u4ed6\u3001\u5e03\u6d1b\u8d6b\u548c\u6211\u90fd\u540c\u610f\u8fd9\u4e00\u70b9\u3002Ousterhout\u544a\u8bc9\u4eba\u4eec\u8fd9\u4e00\u70b9\u7684\u524d\u63d0\u662f\uff0c\u9664\u975e\u4ed6\u4eec\u9700\u8981ArrayList\u7684\u7279\u5b9a\u6027\u80fd\u4fdd\u8bc1\uff0c\u5426\u5219\u4ed6\u4eec\u4e0d\u4f1a\u4f7f\u7528ArrayList\uff0c\u8fd9\u662f\u6211\u4ece\u672a\u9047\u5230\u8fc7\u7684\u60c5\u51b5\u3002(\u76f8\u53cd\uff0c\u5f53\u6211\u9700\u8981\u7f16\u5199\u4f7f\u7528\u8f83\u5c11\u5185\u5b58\u7684\u4ee3\u7801\u65f6\uff0c\u6211\u4e0d\u5f97\u4e0d\u9075\u5faa\u4e00\u4e2a\u9700\u8981ArrayList&lt\uff1bInteger&gt\uff1b\u7684\u63a5\u53e3\uff0c\u8fd9\u8ba9\u6211\u611f\u5230\u7126\u5934\u70c2\u989d\u3002)\u3002\u6b63\u662f\u8fd9\u6837\u7684\u5220\u51cf\u7ec6\u8282\u548c\u8b66\u544a\uff0c\u8ba9\u6b27\u65af\u7279\u80e1\u7279\u62e5\u6709\u4e86\u4ed6\u7684\u77ed\u4e66\u7bc7\u5e45\uff0c\u4f46\u4e5f\u5c06\u5408\u7406\u7684\u5efa\u8bae\u53d8\u6210\u4e86\u4e00\u4e9b\u6210\u719f\u7684\u3001\u5bb9\u6613\u88ab\u6ee5\u7528\u7684\u4e1c\u897f\uff0c\u5e76\u7834\u574f\u4e86\u5b83\u76f8\u5bf9\u4e8e\u539f\u59cb\u76f4\u89c9\u7684\u8bb8\u591a\u4ef7\u503c\u3002\n\u7b2c\u4e8c\u6761\u4e0d\u597d\u7684(\u597d\u7684\uff0c\u8bef\u5bfc\u6027\u7684)\u5efa\u8bae\u6765\u81ea\u5bf9\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edfSprite\u4e2d\u7684\u4e00\u4e2a\u6709\u5bb3\u9519\u8bef\u7684\u8ba8\u8bba\u3002\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u67d0\u4e9b\u6570\u636e\u4f1a\u88ab\u968f\u673a\u8986\u76d6\u3002\u7f6a\u9b41\u7978\u9996\u662f\u5f53\u8868\u793a\u6587\u4ef6\u4e2d\u7684\u903b\u8f91\u5757\u7684\u6574\u6570(\u79f0\u4e3a\u201c\u5757\u201d)\u88ab\u7528\u4f5c\u78c1\u76d8\u4e0a\u7684\u7269\u7406\u5757(\u4e5f\u79f0\u4e3a\u201c\u5757\u201d)\u7684\u5730\u5740\u65f6\u3002\u4e0e\u65af\u6ce2\u5c14\u65af\u57fa\u76f8\u547c\u5e94\u7684\u662f\uff0c\u5965\u65af\u7279\u80e1\u7279\u63a8\u8350\u4e86\u4ed6\u7684\u89e3\u51b3\u529e\u6cd5\uff1a\u4e3a\u6bcf\u4e2a\u53d8\u91cf\u60f3\u51fa\u4e00\u4e2a\u5b8c\u7f8e\u7684\u540d\u79f0\u3002\n\u8ba4\u771f\u5bf9\u5f85\u540d\u5b57\uff0c\u4e0d\u8981\u5bf9\u4e24\u4e2a\u4e0d\u540c\u7684\u6982\u5ff5\u4f7f\u7528\u76f8\u540c\u7684\u540d\u5b57\uff0c\u8fd9\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u800c\u4e14\uff0c\u6b63\u5982\u4e4b\u524d\u5728Spoelsky\u4e0a\u7684\u8bc4\u8bba\u8005\u6240\u6307\u51fa\u7684\u90a3\u6837\uff0c\u521d\u7ea7\u9632\u5fa1\u673a\u5236\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9\u3002\nART\u7684\u8bbe\u8ba1\u8005\uff0c\u4e5f\u5c31\u662f\u5728\u6240\u6709Android\u8bbe\u5907\u4e0a\u8fd0\u884c\u7684Java VM\uff0c\u4e5f\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\u4ed6\u4eec\u6709\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\uff0c\u4e0d\u5e94\u8be5\u5206\u914d\u7ed9\u5bf9\u65b9\u3002\u5bf9\u5783\u573e\u56de\u6536\u5668\u63a7\u5236\u7684\u5bf9\u8c61\u7684\u5f15\u7528\u9700\u8981\u4e0e\u8fd0\u884c\u65f6\u5185\u90e8\u7684\u5bf9\u8c61\u5206\u5f00\u3002\u6709\u4e9b\u662f\u538b\u7f29\u4e3a32\u4f4d\u768464\u4f4d\u6307\u9488\uff0c\u4e0d\u80fd\u76f4\u63a5\u53d6\u6d88\u5f15\u7528\u3002\n\u4ed6\u4eec\u7684\u89c1\u89e3\u662f\uff0c\u8fd9\u4e9b\u503c\u5df2\u7ecf\u88ab\u5f53\u4f5c\u4e0d\u540c\u7684\u7c7b\u578b\u5bf9\u5f85\uff0c\u56e0\u6b64\u5c06\u5176\u663e\u5f0f\u5904\u7406\u51e0\u4e4e\u6ca1\u6709\u590d\u6742\u6027\u6210\u672c\u3002\u56e0\u6b64\uff0c\u4ed6\u4eec\u7684\u89e3\u51b3\u65b9\u6848(\u8bf7\u53c2\u9605\uff1a\u6b64\u5904\u548c\u6b64\u5904)\u662f\u4e3a\u6bcf\u79cd\u6307\u9488\u521b\u5efa\u5355\u72ec\u7684\u7c7b\u578b\u3002\u73b0\u5728\u6ca1\u6709\u6df7\u6dc6\u4e24\u4e2a\u8fd9\u6837\u7684\u6307\u9488\u7684\u98ce\u9669\u3002\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f7f\u7528\u6b64\u4fe1\u606f\u6765\u91cd\u8f7d\u8d4b\u503c\uff0c\u4ece\u800c\u7f29\u77ed\u4ee3\u7801\u3002\u800c\u4e14\u5b83\u53ef\u4ee5\u7528C++\u5b8c\u6210\uff0c\u8fd0\u884c\u65f6\u5f00\u9500\u4e3a\u96f6\u3002\n\u201c\u4f7f\u7528\u66f4\u7cbe\u786e\u7684\u7c7b\u578b\u201d\u662f\u8bb8\u591a\u8f6f\u4ef6\u5de5\u7a0b\u95ee\u9898\u7684\u7b54\u6848\u3002\n\u5965\u65af\u7279\u80e1\u7279\u521b\u5efa\u4e86\u4e00\u4e2a\u8c37\u6b4c\u5c0f\u7ec4\uff0c\u552f\u4e00\u7684\u76ee\u7684\u662f\u5206\u4eab\u5bf9\u4ed6\u7684\u4e66\u7684\u53cd\u9988\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u4ee4\u4eba\u94a6\u4f69\u7684\uff0c\u5e76\u5e0c\u671b\u66f4\u591a\u7684\u4f5c\u8005\u6548\u4eff\u3002\u5728\u6211\u53d1\u8868\u8fd9\u7bc7\u8bc4\u8bba\u4e4b\u524d\uff0c\u6211\u4eec\u5bf9\u5b83\u8fdb\u884c\u4e86\u51e0\u4e2a\u661f\u671f\u7684\u8ba8\u8bba\uff0c\u5305\u62ec\u201c\u62bd\u8c61\u201d\u548c\u201c\u590d\u6742\u6027\u201d\u7684\u5b9a\u4e49\u7b49\u91cd\u5927\u95ee\u9898\uff0c\u4ee5\u53ca\u7011\u5e03\u65b9\u6cd5\u7684\u5386\u53f2\u7b49\u5c0f\u4f17\u95ee\u9898\u3002\u5982\u679c\u4f60\u60f3\u770b\u5230\u4ed6\u5bf9\u8fd9\u7bc7\u8bc4\u8bba\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u9605\u8bfb\u3002\nPOSD\u662f\u6211\u8bfb\u8fc7\u7684\u4e09\u672c\u8f6f\u4ef6\u8bbe\u8ba1\u4e66\u7c4d\u4e2d\u7684\u4e00\u672c\uff0c\u6211\u5c06\u5176\u5f52\u5165\u201c\u4e2d\u7ea7\u201d\u7c7b\u522b\uff0c\u4e5f\u662f\u7b2c\u4e00\u672c\u5305\u542b\u8db3\u591f\u591a\u4ee3\u7801\u793a\u4f8b\u4ee5\u4fbf\u4e8e\u6e05\u6670\u4ea4\u6d41\u7684\u6b64\u7c7b\u4e66\u7c4d\u3002\n..", "note_en": "I\u2019m trying to read all the good writing about software design. This is very easy because not very much has been written: it turns out that it\u2019s much easier to write an article about how to write a Tetris AI as a containerized Kotlin microservice than it is to shed insight on how to write good code. And so, when I heard about John Ousterhout\u2019s new book \u201cA Philosophy of Software Design,\u201d I ordered my copy immediately.\n  I remember John Ousterhout from Stanford\u2019s grad student visit day as the tall guy who introduced himself with a self-deprecating joke and invited all the Ph. D. admits over to dinner at his house. I know him also as the father of  Kay Ousterhout, whom I recently met as a fellow speaker at Strange Loop, and Amy Ousterhout, whom together are the first pair of sisters to both win the prestigious Hertz Fellowship.\n At 170 pages, \u201cA Philosophy of Software Design\u201d (henceforth: PoSD) is a humble book. John\u2019s background is in systems rather than in software engineering or programming languages, and he never claims special expertise. But his practitioner cred is immense. I enjoy tearing apart open-source projects and turning them into case studies of what not to do, so much that my students have requested I write a case study about good code for once. RAMCloud, Ousterhout\u2019s distributed in-memory storage system, is now on my shortlist: from a 5-minute glance, it\u2019s among the cleanest and best-documented code I\u2019ve seen. And, given that he\u2019s a busy professor managing a large lab, he\u2019s written a surprising amount of it himself. He\u2019s had plenty of impact too: he\u2019s the creator of the Tcl language and its Tk framework, which I learned in 2005 as The Way to Write GUIs(\u2122).\n PoSD is best read as a tactical guide of how-to\u2019s. About a quarter of it is spent on naming and comments, and much of the rest is about specific patterns. His few attempts to jump from tactical advice to principles are either done by trying to blur together similar-sounding tips, or are hamstrung by his inability to see the meaning of a program beyond the code (more on that later). He demonstrates the lack of principles comically in Chapter 19, where he promises to apply the books\u2019 \u201cprinciples\u201d to several software trends, and then fills the rest of the chapter with standard (but solid) advice on unit-testing and OOP, with nary a reference to the rest of the book. On the whole, the book\u2019s advice is higher-level than beginner books like Clean Code, but most of its contents will be familiar to a senior software engineer, and the novel parts are hit-and-miss.\n Following other books like   Code Simplicity, PoSD starts with a high-minded explanation of the benefits of good code and the dangers of complexity. Its early chapters are a grand tour of the basic concepts of software organization: separating levels of abstraction, isolating complexity, and when to break up functions. Chapter 5 is one of the most approachable introductions I\u2019ve seen to Parnas\u2019s ideas about information hiding. But it\u2019s Chapter 4 where he introduces the book\u2019s central idea: deep modules. An interface, explains Ousterhout, is not just the function signatures written in the code. It also includes informal elements: high-level behavior, constraints on ordering; anything a developer needs to know to use it. Many modules are shallow: they take a lot to explain, but don\u2019t actually do that much. A good module is deep: the interface should be much simpler than the implementation.\n   It sounds pretty nice to say \u201cinterfaces should be shorter than the implementation?\u201d How do you test it?\n To Ousterhout, where the interface is just a comment and some discussion about whether it\u2019s simple to use and think about. Intuition and experience are the sole arbiters here. And this reveals his major blind spot.\n I\u2019ve  explained  before\u00a0that the important information of software design is not in the code (Level 2), but in the logic: the specifications and reasoning that are rarely written down concretely, but shape the code nonetheless. I group these artifacts into the aggregate \u201cLevel 3 constructs.\u201d The \u201cinformal interface\u201d Ousterhout describes is such a Level 3 construct, but they\u2019re just as real as the code, and, contrary to Ousterhout, there are plenty of programming languages that do let you write them down and check them.\n Experience doing this gives us concrete grounding when we talk software design. It\u2019s how we move into  post-rigorous stage of software engineering, and know what we mean when we use terms like \u201cinterface\u201d and \u201ccomplexity.\u201d It defends us against making confused and contradictory statements. Ousterhout lacks this insight, and that\u2019s how he gets burned.\n I\u2019m going to pause for a moment and tell you: I like this book overall. It&#39;s well-written, and there\u2019s a lot of advice in the book that I consider useful even though it\u2019s on shaky ground, and more that doesn\u2019t depend on this at all. Still, Ousterhout makes a big deal out of it, and so I\u2019ll be taking a couple pages to explain why it\u2019s wrong. These ideas are important, because they\u2019re part of what leads to the higher levels of mastery.\n My view is that Ousterhout\u2019s \u201cinformal interface\u201d is just the translation into English of a formal specification. Any question we have about interfaces can be answered by asking the question \u201cwhat would a specification look like?\u201d While I can\u2019t prove the correspondence without peaking into Ousterhout\u2019s head more than I\u2019ve gotten to in our back-and-forth, I\u2019ve found this lens unreasonably effective in helping to explain software design. And so, for the remainder of this post, I\u2019ll be using the words \u201cspec\u201d and \u201cinterface\u201d interchangeably.\n I agree that the spec should usually be much simpler than the code. But anyone with experience actually formalizing specs can tell you that there are interesting cases where the specification is and should be more complicated than the implementation.\n That&#39;s right: there are times when it\u2019s actually desirable to have a specification more complicated than the code. Two major reasons are  ghost state and  imprecision. Ghost state is a concept from verification that describes certain kinds of \u201csubtle\u201d code. It\u2019s an interesting subject that deserves its own blog post; I won\u2019t mention it again. (Short version: it\u2019s when a simple action like flipping a bit actually represents something conceptually complicated.)\n  The specification is longer precisely because it creates an abstraction barrier. If you design the rest of the system assuming the Fudarkameter is exactly 70 degrees, then the Fudarkameter becomes much harder to change or replace. By weakening the assumptions placed on a module, code becomes more evolvable.\n On top of these, there\u2019s another fundamental reason: It is much easier to describe something from the inside than from the outside. It is much easier to show you an apple than to answer every question you may ask of it. (Where are the seeds? How will it roll when I drop it?) And while there is more you can say  about a single apple than all the apples in the world, there are more things that may be true about some apple than about a single apple.\n As an example, let\u2019s take a stack data structure, something I hope we can all agree is a useful abstraction. A stack is a sequence with push and pop operations, following the last-in-first-out ordering. The linked-list implementation is very short: just adding and removing elements off the front of the list. But if you use a stack, and you don\u2019t want to use internal details of this implementation, then you need a way to think about it that doesn\u2019t reference the underlying sequence. One solution is to use the  stack axioms, which say things like \u201cIf you push something onto a stack and then pop from the stack, you get the old value back\u201d and \u201cIf you\u2019ve ever pushed something onto a stack, then it\u2019s not empty.\u201d We\u2019ve gone from the internal view of explaining how the stack operations manipulate memory, to the external view of explaining their interactions and observable behaviors.\n In my public correspondence with Prof. Ousterhout, I illustrated this by writing down an implementation and interface for a stack data structure, including the stack axioms. My implementation was 30 tokens; the interface was 54.\n Perhaps you can find a shorter way to explain stacks, but this is not looking good. It seems that Ousterhout\u2019s advice, held under a microscope, is actually telling us we should not use stacks in our code (or, at least, only use the more complicated implementations, like lock-free concurrent stacks).\n  It\u2019s easy for the interface for stacks to be larger than the implementation because they\u2019re so small. Now, let\u2019s look at something larger. I don\u2019t need to look very hard for an example, because Ousterhout gives me one.\n The mechanism for file IO provided by the Unix operating system and its descendants, such as Linux, is a beautiful example of a deep interface. There are only five basic system calls for I/O, with simple signatures:\n int  open ( const  char *  path,  int  flags,  mode_t  permissions); ssize_t  read ( int  fd,  void *  buffer,  size_t  count); ssize_t  write ( int  fd,  const  void *  buffer,  size_t  count); off_t  lseek ( int  fd,  off_t  offset,  int  referencePosition); int  close ( int  fd);\n The POSIX file API is a great example, but not of a deep interface. Rather, it\u2019s a great example of how code with a very complicated interface may look deceptively simple when reduced to C-style function signatures. It\u2019s a stateful API with interesting orderings and interactions between calls. The flags and permissions parameters of  open hide an enormous amount of complexity, with hidden requirements like \u201cexactly one of these five bits should be specified.\u201d  open may return 20 different error codes, each with their own meaning, and many with references to specific implementations.\n The authors of SibylFS tried to write down an exact description of the  open interface. Their  annotated version of the POSIX standard\u00a0is over 3000 words. Not counting basic machinery, it took them over 200 lines to write down  the properties of  open in higher-order logic, and another 70 to give the interactions between  open and  close.\n For comparison, while it\u2019s difficult to do the accounting for the size of a feature, their model implementation is a  mere 40 lines.\n Yes, the real versions in Linux are much longer, even if you don\u2019t count the more general \u201cinode\u201d machinery it\u2019s based on. And you can get by with only a partial understanding of the API. But, having looked at its semantics, a\u00a0 Level 3 artifact, we now have a much truer sense of the complexity of this API beyond the \u201csimple\u201d signature.\n There\u2019s a lot that could be done to improve this API, but there\u2019s a fundamental reason why the implementation can be shorter. This is an interface meant to describe every possible implementation of open. Applications that follow it can work with any of them. And so how can it be simpler than the simplest implementation?\n So, when coupled with its simpler implementations,  open is indeed one of the shallow APIs that Ousterhout reviles. And given how much variety it\u2019s meant to encapsulate, to some extent that\u2019s inevitable.\n (Ousterhout\u2019s counterargument is: \u201cYou\u2019re just talking about the specification, rather than how easy they are to use to write code that works.\u201d Looking at what\u2019s in the spec, I\u2019d say that knowing how it interprets file paths and what the O_RDONLY flag does are both very much part of knowing how to use it.)\n Perhaps a more penetrating example is this write function for a simple replicated disk. This is a system that acts like one disk, but copies everything to two underlying disks, so that it can still run even if one fails. Here\u2019s the write function, transliterated from Coq into C:\n  What\u2019s a spec for this function? Well, it\u2019s written b to both disks\u00a0 \u2014\u00a0but does nothing to a disk if it\u2019s dead. And if the system crashes midway through, then either neither write succeeded, or the disk1 write succeeded, or both writes succeeded. In Coq:\n {|  pre  :=  disk0  state  ?|=  eq  d  /\\  disk1  state  ?|=  eq  d ;  post  :=  fun  r  state&#39;  =&gt;  r  =  tt  /\\  disk0  state&#39;  ?|=  eq  ( diskUpd  d  a  b )  /\\  disk1  state&#39;  ?|=  eq  ( diskUpd  d  a  b );  recovered  :=  fun  _  state&#39;  =&gt;  write_recover_condition  d  a  b  state&#39;  ;  |}) [...] Definition  write_recover_condition  d  a  b  state&#39;  :=  ( disk0  state&#39;  ?|=  eq  d  /\\  disk1  state&#39;  ?|=  eq  d )  \\/  ( disk0  state&#39;  ?|=  eq  ( diskUpd  d  a  b )  /\\  disk1  state&#39;  ?|=  eq  d )  \\/  ( disk0  state&#39;  ?|=  eq  ( diskUpd  d  a  b )  /\\  disk1  state&#39;  ?|=  eq  ( diskUpd  d  a  b )).\n Yes, that\u2019s the internal API. The spec for the external API is simpler, but still longer than the code.\n There\u2019s a lot more fun elsewhere in that file. My specs for the recovery procedures total 70 complicated lines, compared to 29 simple lines for the implementation. This is because, when writing this kind of code, you need to constantly be asking \u201cwhat happens if there\u2019s a crash on this line.\u201d It&#39;s easy to miss that and think the code is simple, but the logic lays all bare. Hence, the interfaces are much longer than the code.\n So, Ousterhout\u2019s big insight about deep modules is flawed, and advice based on it is unreliable. Using it, he attacks the common wisdom of making small classes/methods, but doesn\u2019t give a way to distinguish when doing so is abstracting something vs. merely adding indirection.\n And there are a lot of smaller flaws throughout the book that come from not engaging directly with Level 3 constructs. In an early discussion of coupling, for instance, he discusses how parsing and serialization code for a binary protocol may depend on each other, but it\u2019s more accurate to say that they both depend on the protocol, which is Level 3 and exists outside the code. (Indeed, if you were to use a tool to synthesize a parser from a serializer, you\u2019d do it by first inferring the protocol, and then generating the parsing code from the protocol.)\n  After Chapter 9, the book moves away from trying to give broad coding principles into softer territory, as well as more specific coding practices. Chapter 10 \u201cDefine errors out of existence\u201d was the most unusual and thought-provoking chapter for me. I came in expecting some cousin of the \u201cmake invalid states unrepresentable\u201d stuff that I teach. What I actually found was a pastiche of different tricks for changing the spec of a function to tolerate more inputs/situations.\n When I was trying to pin down each piece of advice in this chapter, I found that some of it was actually the opposite of others. In Section 10.9, he implores us to \u201cDesign special cases out of existence.\u201d Specifically, he explains how, in a text-editing application, modeling the application state as \u201ca selection always exists, but may be empty\u201d removes the need for special code to handle the case where there is no selection. In other words, take a conditional out of the spec for the function. But in Section 10.5, he tells us that we should add a conditional to the spec of a function, namely in making Java\u2019s  substring method defined for out-of-bounds indices. I\u2019m not completely sure he\u2019s wrong (as I discuss in  my Strange Loop talk, it comes down to: is there a clean way to describe this behavior?), but I find his claims that this makes the code \u201csimpler\u201d only slightly more credible than his claims about the Unix file API.\n The next 7 chapters are the soft parts of the book. Chapter 11 argues that you should consider at least two designs for everything, an instance of multi-tracking in decision-making. The following chapters on comments are well-written if at times moralizing, and I don\u2019t have a solid basis for the parts where I disagree. I strongly approve of his practice of writing \u201cSee comment in &lt;other file&gt;\u201d whenever he implements an interface (breaking the hidden coupling between comments). Seeing it in action in the RAMCloud codebase was beautiful.\n It\u2019s not until the second-to-last chapter, \u201cDesigning for Performance,\u201d that Ousterhout shifts from an enthusiast to an expert. The chapter centers on his \u201cDesign around the critical path\u201d concept, reminiscent of  Carmack\u2019s comments on inlined code, and a clearly-written case study in RAMCloud. The chapter shines with battle-won experience, and I\u2019d gladly read a book-length from him on this topic. I only wish it had come earlier.\n  Throughout the second half of the book, I only found two notable pieces of advice that I regard as bad.\n   Why is it being declared as a  List even though it\u2019s an  ArrayList, Ousterhout asks? Isn\u2019t that making it less obvious? After all,  ArrayList\u2019s have their own performance properties.\n Yes, but it needlessly ties the code to the specific implementation of ArrayList, and can make the code harder to change. Joshua Bloch thoroughly argues for the opposite advice using an almost-identical example in Point 52 \u201cRefer to objects by their interfaces\u201d in his book  Effective Java.\n After discussing this example with Ousterhout though, it sounds like he, Bloch, and I are all in agreement. Ousterhout tells people this on the assumption that they wouldn\u2019t be using an  ArrayList unless they needed the specific performance guarantees of  ArrayList, which is a situation I\u2019ve never encountered. (Conversely, I\u2019ve gotten burned from having to conform to an interface that took  ArrayList&lt;Integer&gt;, when I needed to write something that used less memory.) It\u2019s cutting out details and caveats like this that gives Ousterhout his short book length, but also transmutes sound advice into something ripe for misuse, and destroys a lot of the value it has over raw intuition.\n The second piece of bad (well, misleading) advice comes out of a discussion of a pernicious bug in Sprite, a distributed operating system. On rare occasions, some data would be randomly overwritten. The culprit was when an integer representing a logical block within a file (called a \u201cblock\u201d) was used as the address of a physical block on the disk (also called a \u201cblock\u201d). Echoing  Spoelsky, Ousterhout recommends his fix: come up with the perfect name for each variable.\n Taking names seriously, and never using the same name for two different concepts, is a good idea. And,  as noted before\u00a0by  commenters on Spoelsky, there\u2019s a much better choice for the primary defense mechanism.\n The designers of ART, the Java VM that runs on every Android device, had a similar problem. They had many different kinds of pointers which should not be assigned to each other. References to objects controlled by the garbage collector needed to be kept separate from objects internal to the runtime. Some were 64-bit pointers compresesd to 32-bit, and couldn\u2019t be dereferenced directly.\n Their insight was that these values are already treated like different types, and there\u2019s hence little complexity cost in making this explicit. Thus, their solution (see:  here\u00a0and  here) was to create a separate type for each kind of pointer. Now there is no risk of confusing two such pointers. The compiler can use this information to overload assignment, making code shorter. And it can be done in C++ with zero runtime overhead.\n \u201cUse more precise types\u201d is the answer to a lot of software engineering problems.\n  Ousterhout created a Google group for the sole purpose of sharing feedback on his book, which I find admirable and hope more authors follow. We had several weeks of discussion about this review before I posted it, including big things such as the definitions of \u201cabstraction\u201d and \u201ccomplexity,\u201d and niche things like the history of the Waterfall method. If you want to see more details of his take on this review, you can read it  here.\n  PoSD is one of three software design books I\u2019ve read that I\u2019d classify in the \u201cintermediate\u201d category, and the first such book with enough code examples to communicate clearly \n......", "posttime": "2020-07-02 17:35:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u8f6f\u4ef6,\u8f6f\u4ef6\u8bbe\u8ba1,review,\u4ee3\u7801", "title": "\u4e66\u8bc4\uff1a\u8f6f\u4ef6\u8bbe\u8ba1\u54f2\u5b66", "title_en": "Book Review: A Philosophy of Software Design", "transed": 1, "url": "http://www.pathsensitive.com/2018/10/book-review-philosophy-of-software.html", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u8f6f\u4ef6", "\u8f6f\u4ef6\u8bbe\u8ba1", "review", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "7d74e41a7aefeca3e3d8d218c350c963.png", "infoid": 1009446, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728Algolia\uff0c\u6211\u4eec\u7684\u4f7f\u547d\u662f\u8ba9\u6bcf\u4e00\u4e2a\u5f00\u53d1\u8005\u548c\u516c\u53f8--\u65e0\u8bba\u5927\u5c0f--\u90fd\u80fd\u521b\u9020\u4ee4\u4eba\u6109\u5feb\u7684\u641c\u7d22\u548c\u53d1\u73b0\u4f53\u9a8c\u3002\u8003\u8651\u5230\u8fd9\u4e00\u4f7f\u547d\uff0c\u6211\u4eec\u6b63\u5728\u5bf9\u6211\u4eec\u7684\u5b9a\u4ef7\u8fdb\u884c\u91cd\u5927\u66f4\u65b0\uff0c\u76ee\u6807\u662f\u8ba9Algolia\u66f4\u5bb9\u6613\u83b7\u5f97\uff0c\u5e76\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u80fd\u63d0\u4f9b\u51fa\u8272\u7684\u641c\u7d22\u4f53\u9a8c\u3002\u6211\u4eec\u7684\u4ef7\u683c\u73b0\u5728\u662f\u5e02\u573a\u4e0a\u5bf9\u5ba2\u6237\u6700\u53cb\u597d\u7684\uff0c\u4ece\u6700\u5c0f\u7684\u9879\u76ee\u5230\u5927\u89c4\u6a21\u7684\u90e8\u7f72\u3002\n\u4ece\u4eca\u5929\u5f00\u59cb\uff0c\u6211\u4eec\u7684\u65b0\u5b9a\u4ef7\u5305\u62ec\u66f4\u5c11\u7684\u957f\u671f\u627f\u8bfa\u3001\u66f4\u4f4e\u7684\u5165\u95e8\u7ea7\u4ef7\u683c\u548c\u6279\u91cf\u6298\u6263\u4ee5\u589e\u52a0\u4f7f\u7528\u91cf\u7684\u9009\u9879\u3002\u73b0\u5728\uff0c\u65e0\u8bba\u60a8\u662f\u6b63\u5728\u8fdb\u884c\u5c0f\u578b\u8f85\u52a9\u9879\u76ee\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u8fd8\u662f\u5e0c\u671b\u63d0\u4f9b\u66f4\u597d\u7684\u6d88\u8d39\u7ea7\u641c\u7d22\u4f53\u9a8c\u7684\u5927\u578b\u516c\u53f8\uff0cAlgolia\u90fd\u4e3a\u60a8\u63d0\u4f9b\u670d\u52a1\u3002\n\u4f5c\u4e3a\u4e00\u5bb6\u5f00\u53d1\u8005\u4f18\u5148\u7684\u516c\u53f8\uff0c\u5982\u679c\u4e0d\u5bf9\u5f00\u53d1\u8005\u53cb\u597d\uff0cAlgolia\u5c31\u4e0d\u4f1a\u6709\u4eca\u5929\u7684\u5730\u4f4d\u3002\u4f5c\u4e3a\u8054\u5408\u521b\u59cb\u4eba\uff0c\u5c3c\u53e4\u62c9\u65af\u548c\u6211\u81ea\u5df1\u4e5f\u662f\u65e9\u671f\u5f00\u53d1\u4eba\u5458\uff0c\u6240\u4ee5\u5fe0\u4e8e\u6211\u4eec\u7684\u613f\u666f\u4e00\u76f4\u662f\u6211\u4eecDNA\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u542c\u53d6\u4e86\u5f00\u53d1\u8005\u7684\u53cd\u9988\uff0c\u5e76\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u83b7\u5f97\u6211\u4eec\u7684\u5165\u95e8\u7ea7\u5b9a\u4ef7\uff0c\u5373\u4f7f\u4ed6\u4eec\u9700\u8981\u4f7f\u7528\u6211\u4eec\u7684\u9ad8\u7ea7\u529f\u80fd\u3002\n\u6613\u8bd5\u6613\u4e70\uff1a\u5ba2\u6237\u6709\u66f4\u591a\u7684\u9009\u62e9\uff0c\u5305\u62ec\u6ca1\u6709\u957f\u671f\u627f\u8bfa\uff0c\u6bcf\u6708\u53ea\u9700\u652f\u4ed81.00\u7f8e\u5143\u7684\u4ed8\u8d39\u8ba1\u5212\u3002\n\u8bbf\u95ee\uff1a\u6211\u4eec\u7684\u4e00\u4e9b\u9ad8\u7ea7\u529f\u80fd\u73b0\u5728\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6807\u51c6\u8ba1\u5212\u4e2d\u4f7f\u7528\uff1b\u60a8\u4e0d\u518d\u9700\u8981\u662f\u4f01\u4e1a\u5ba2\u6237\u624d\u80fd\u8bbf\u95ee\u9ad8\u7ea7\u529f\u80fd\uff0c\u5982\u67e5\u8be2\u5efa\u8bae\u548cA/B\u6d4b\u8bd5\u3002\n\u900f\u660e\u5ea6\uff1a\u6211\u4eec\u7684\u5b9a\u4ef7\u5df2\u7ecf\u7b80\u5316\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u9884\u6d4b\u3002\n\u4e3a\u60a8\u4f7f\u7528\u7684\u5185\u5bb9\u4ed8\u8d39\uff1a\u6211\u4eec\u7684\u65b0\u5b9a\u4ef7\u57fa\u4e8e\u60a8\u7684\u641c\u7d22\u91cf\u548c\u7d22\u5f15\u7684\u5927\u5c0f\uff1b\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u6309\u6708\u4ed8\u8d39\u6216\u6309\u5e74\u4ed8\u8d39\uff0c\u4ee5\u83b7\u5f97\u5e74\u5ea6\u627f\u8bfa\u7684\u6298\u6263\u3002\n\u53ef\u6269\u5c55\uff1a\u6279\u91cf\u6298\u6263\u5956\u52b1\u4f7f\u7528\u91cf\u589e\u52a0\u7684\u5ba2\u6237\uff0c\u4f7f\u4ed6\u4eec\u80fd\u591f\u968f\u7740\u4e1a\u52a1\u589e\u957f\u8fdb\u884c\u7ecf\u6d4e\u9ad8\u6548\u7684\u6269\u5c55\u3002\n\u4e3a\u4e86\u4f7f\u201c\u6309\u4f7f\u7528\u4ed8\u8d39\u201d\u6a21\u5f0f\u66f4\u52a0\u6e05\u6670\uff0c\u6709\u4e86\u65b0\u7684\u5b9a\u4ef7\uff0c\u6211\u4eec\u5c06\u4e0d\u518d\u5bf9\u7d22\u5f15\u64cd\u4f5c\u6536\u8d39(\u5bf9\u60a8\u7684\u7d22\u5f15\u8fdb\u884c\u66f4\u6539)\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u5355\u5143\u7684\u6982\u5ff5\u3002\n\u4e00\u4e2a\u5355\u4f4d\u8868\u793a\u7ed9\u5b9a\u6570\u91cf\u7684\u4e24\u4e2a\u5bb9\u6613\u6d4b\u91cf\u7684\u6708\u5ea6\u503c\uff1a\u641c\u7d22\u8bf7\u6c42\u6570\u91cf*\u548cAlgolia\u7d22\u5f15\u4e2d\u7684\u8bb0\u5f55\u6570\u91cf\u3002\n\u5728\u6bcf\u6708\u7684\u201c\u6309\u4f7f\u7528\u4ed8\u8d39\u201d\u6a21\u578b\u4e2d\uff0c\u4e00\u4e2a\u5355\u4f4d\u4ee3\u8868\u4e00\u4e2a\u6708\u5185\u4f7f\u7528\u76841000\u4e2a\u641c\u7d22\u8bf7\u6c42\u548c\u8be5\u6708\u5185Algolia\u7d22\u5f15\u4e2d\u76841000\u4e2a\u8bb0\u5f55\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u503c\u4e2d\u7684\u4e00\u4e2a\u8d85\u8fc71,000\uff0c\u90a3\u4e48\u60a8\u5c06\u6d88\u8017\u8be5\u5355\u4f4d\u3002\u8fd9\u4e2a\u5355\u4f4d\u662f\u4f60\u4ed8\u8d39\u7684\uff0c\u5bf9\u4e8e\u6807\u51c6\u7684\u73b0\u6536\u73b0\u4ed8\u6708\u5ea6\u8ba1\u5212\uff0c\u8d77\u6b65\u4ef7\u662f\u6bcf\u5355\u4f4d\u6bcf\u67081.00\u7f8e\u5143-\u5982\u679c\u662f\u5e74\u5ea6\u8ba1\u5212\uff0c\u8d77\u4ef7\u751a\u81f3\u66f4\u4f4e\u3002\n\u5728\u65b0\u7684\u5b9a\u4ef7\u6a21\u5f0f\u4e0b\uff0c\u6d88\u8017\u7684\u5355\u4f4d\u8d8a\u591a\uff0c\u6bcf\u4e2a\u5355\u4f4d\u5c31\u4f1a\u53d8\u5f97\u8d8a\u4fbf\u5b9c\uff0c\u4ece\u800c\u5728\u589e\u52a0\u4f7f\u7528\u91cf\u7684\u60c5\u51b5\u4e0b\u91ca\u653e\u89c4\u6a21\u7ecf\u6d4e\u3002\n\u6709\u4e86\u65b0\u7684\u5b9a\u4ef7\uff0c\u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u8ba1\u5212\uff1a\u6807\u51c6\u548c\u9ad8\u7ea7\uff0c\u5177\u6709\u4ee5\u4e0b\u529f\u80fd\u548c\u66f4\u591a\u529f\u80fd\u3002\n\u6b64\u5916\uff0c\u4e3a\u4e86\u8ba9\u66f4\u591a\u5ba2\u6237\u80fd\u591f\u4f7f\u7528\u6211\u4eec\u7684\u4e00\u4e9b\u9ad8\u7ea7\u529f\u80fd\uff0c\u6807\u51c6\u8ba1\u5212\u4e2d\u73b0\u5728\u63d0\u4f9b\u4e86\u641c\u7d22\u5206\u6790\u3001\u4e8b\u4ef6\u5206\u6790\u548cA/B\u6d4b\u8bd5\u7b49\u9ad8\u7ea7\u529f\u80fd\u3002\n\u6211\u4eec\u77e5\u9053\u4f60\u4f1a\u559c\u6b22Algolia\u7684\uff0c\u6240\u4ee5\u5728\u4f60\u51b3\u5b9a\u5b83\u662f\u5426\u9002\u5408\u4f60\u4e4b\u524d\uff0c\u8bf7\u968f\u610f\u8bd5\u4e00\u8bd5\u3002\u6211\u4eec\u63d0\u4f9b14\u5929\u7684\u514d\u8d39\u8bd5\u7528(\u5305\u62ec\u6700\u591a500\u53f0)\uff0c\u751a\u81f3\u53ef\u4ee5\u8bbf\u95ee\u6211\u4eec\u7684\u8bb8\u591a\u9ad8\u7ea7\u529f\u80fd\uff0c\u5305\u62ec\u89c4\u5219\u3001\u53ef\u89c6\u5316\u7f16\u8f91\u5668\u548c\u4e2a\u6027\u5316\u3002\u5728\u8fd9\u91cc\u62a5\u540d\u3002\n\u6211\u4eec\u76f8\u4fe1\uff0c\u65b0\u7684\u5b9a\u4ef7\u8ba1\u5212\u5c06\u4f7f\u6211\u4eec\u7684\u5ba2\u6237\u53d7\u76ca\uff0c\u5e76\u5bf9\u4ed6\u4eec\u4ea7\u751f\u79ef\u6781\u5f71\u54cd\uff0c\u7279\u522b\u662f\u73b0\u5728\u80fd\u591f\u8f7b\u677e\u5c1d\u8bd5\u7136\u540e\u8f7b\u677e\u8d2d\u4e70Algolia\u7684\u5f00\u53d1\u4eba\u5458\u793e\u533a-\u6210\u672c\u900f\u660e\u4e14\u53ef\u9884\u6d4b\uff0c\u4ee5\u53ca\u83b7\u5f97\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u5148\u8fdb\u7684\u529f\u80fd\u3002\n\u6700\u540e\uff0c\u5982\u679c\u60a8\u662fAlgolia\u7684\u5f53\u524d\u5ba2\u6237\uff0c\u5e76\u4e14\u5bf9\u60a8\u7684\u8ba1\u5212\u611f\u5230\u6ee1\u610f\uff0c\u90a3\u5c31\u592a\u68d2\u4e86\uff01\u4f60\u53ef\u4ee5\u65e0\u9650\u671f\u5730\u4fdd\u7559\u4f60\u73b0\u6709\u7684\u8ba1\u5212\u3002\u6211\u4eec\u652f\u6301\u60a8\u7b2c\u4e00\u6b21\u7b7e\u7ea6\u4f7f\u7528\u6211\u4eec\u670d\u52a1\u65f6\u6240\u505a\u7684\u627f\u8bfa\uff0c\u5e76\u5c06\u8ba9\u60a8\u51b3\u5b9a\u4ec0\u4e48\u6700\u9002\u5408\u60a8\u7ee7\u7eed\u524d\u8fdb\u3002\u5982\u679c\u60a8\u6709\u5174\u8da3\u5229\u7528\u5373\u5c06\u63a8\u51fa\u7684\u65b0\u529f\u80fd\uff0c\u6211\u4eec\u4f1a\u4e3a\u60a8\u63d0\u4f9b\u5e2e\u52a9\uff0c\u5e76\u53ef\u4ee5\u6307\u5bfc\u60a8\u8fc1\u79fb\u5230\u6211\u4eec\u7684\u65b0\u5b9a\u4ef7\u8ba1\u5212\u3002\n*\u5982\u679c\u60a8\u662fAlgolia\u7684\u73b0\u6709\u5ba2\u6237\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5c06\u201c\u641c\u7d22\u64cd\u4f5c\u201d\u6982\u5ff5\u66ff\u6362\u4e3a\u201c\u641c\u7d22\u8bf7\u6c42\u201d\u3002\u8fd9\u662f\u4e00\u4e2a\u91cd\u5927\u53d8\u5316\uff0c\u53ef\u4ee5\u6839\u636e\u5ba2\u6237\u53cd\u9988\u7b80\u5316\u6211\u4eec\u7684\u5b9a\u4ef7\u3002\u6211\u4eec\u7684Batch Queries API\u7aef\u70b9\u73b0\u5728\u4ec5\u8ba1\u4e3a\u4e00(1)\u4e2a\u8bf7\u6c42\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528\u5206\u9762\u548c\u8054\u5408\u641c\u7d22\uff0c\u800c\u4e0d\u5fc5\u8003\u8651\u6210\u672c\u3002", "note_en": "At Algolia, our mission is to enable every developer and company\u2014small and large\u2014to create delightful search and discovery experiences. With this mission in mind, we are making a significant update to our pricing with the goal to have Algolia be more accessible and allow everyone to deliver a great search experience. Our pricing is now the most customer-friendly in the market, from the smallest projects to massive deployments at scale.\n Beginning today, our new pricing includes options with fewer long term commitments, lower entry level prices and volume discounts for increased usage.\u00a0 Now, whether you are a developer working on a small side project or a larger company looking to provide a better consumer-grade search experience, Algolia has you covered.\n As a developer-first company, Algolia wouldn\u2019t be where it is today without being developer-friendly.\u00a0 As co-founders, Nicolas and I were early stage developers ourselves, so staying true to our vision has always been part of our DNA.\u00a0 So, we listened to developer feedback and have made our entry level pricing more accessible to developers, even if they need access to our premium features.\n  Easy to try and easy to buy:  customers have more options, including no long-term commitment, paid plans for as little as US$1.00 per month.\n Access:  some of our advanced features are now available in our Standard plan; you no longer have to be an enterprise customer to have access to advanced features like query suggestions and A/B testing.\n Transparency:  our pricing has been simplified so that it is easier to understand and predictable.\n Pay for what you use:  our new pricing is based on your search volume and the size of your indexes; you can also choose between paying for exactly what you use each month or paying annually to receive discounts for annual commitments.\n Scalable:  volume discounts reward customers for increased usage, allowing them to cost-effectively scale as their business grows.\n   To help bring even more clarity into the \u201cpay for what you use\u201d model, with the new pricing, we no longer will be charging for indexing operations (changes to your index). Instead, we\u2019re introducing the concept of the unit.\n A unit represents a given number of two easily measurable monthly values:  the number of search requests*  and  the number of records within Algolia indexes .\n In the monthly \u201cpay for what you use\u201d model, a unit represents 1,000 search requests consumed in a month and 1,000 records within Algolia indexes during the month. If one of those two values goes above 1,000, then you will have consumed that unit. The unit is what you pay for and starts at US$1.00 per unit per month for the standard, pay-as-you-go monthly plan\u2014and even less with annual plans.\n  With the new pricing model, the more units consumed, the cheaper each unit becomes, unlocking economies of scale with increased usage.\n With the new pricing, there are two main plans:  Standard and Premium with the following features and more.\n   In addition, to provide more customers access to some of our advanced features, Premium features like  Search Analytics, Event Analytics and A/B Testing  are now available in the Standard plan.\n We know you\u2019ll love Algolia, so please feel free to try it before you decide that it\u2019s right for you. We offer a 14-day free trial (with up to 500 units included) that provides access even to many of our Premium features, including  Rules, Visual Editor and Personalization .  Sign up here.\n   We believe the new pricing plan will benefit and have a positive impact for our customers, especially the developer community that is now able to easily try and then easily buy Algolia\u2014with a transparent and predictable cost, along with access to more advanced features than ever before.\n  Finally, if you\u2019re a current Algolia customer and are happy with your plan, that\u2019s great! You can remain on your existing plan indefinitely. We support the commitment we made when you first signed up for our service, and will let you decide what works best for you moving forward. If you\u2019re interested in taking advantage of the new features coming out, we\u2019re here to help and can guide and migrate you to our new pricing plan.\n   * If you are an existing Algolia customer, it is worth noting that we replaced the \u201csearch operations\u201d concept with \u201csearch request\u201d. This is a significant change to make our pricing simpler based on customer feedback. Our batch queries API endpoint is now counting as only one (1) request, which means that you can use faceting and federated search without having to think about the cost.", "posttime": "2020-07-02 16:40:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5373\u4ed8,introduces,algolia", "title": "Algolia\u63a8\u51fa\u9996\u4e2a\u641c\u7d22\u5373\u4ed8\u5373\u7528\u5b9a\u4ef7", "title_en": "Algolia introduces the first Pay-as-you-go pricing for search", "transed": 1, "url": "https://blog.algolia.com/introducing-algolias-most-customer-friendly-pricing", "via": "", "real_tags": ["\u5373\u4ed8", "algolia"]}, {"category": "", "categoryclass": "", "imagename": "b4071833f99e9967ea79135e089c013c.png", "infoid": 1009445, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8ba4\u8bc6\u6211\u7684\u4eba\u90fd\u77e5\u9053\uff0c\u6211\u662f\u8001\u5f0f\u8054\u60f3ThinkPad\u7b14\u8bb0\u672c\u7535\u8111\u7684\u7c89\u4e1d\uff0c\u8fd9\u6b3e\u7b14\u8bb0\u672c\u7535\u8111\u914d\u5907\u4e86\u771f\u6b63\u76847\u6392\u952e\u76d8\u3002\u6211\u6709\u51e0\u4e2a2011\u5e74\u7684*20\u578b\u53f7\uff0c\u5305\u62ecW520\uff0cT420s\u548cX220\u3002\u5f53\u8c08\u5230\u201c\u7b14\u8bb0\u672c\u7535\u8111\u201d\u65f6\uff0c\u5b83\u4eec\u4ecd\u7136\u5f88\u9707\u64bc\uff0c\u800c\u4e14\u5728\u4efb\u4f55\u62cd\u5356\u5e73\u53f0\u4e0a\u90fd\u975e\u5e38\u4fbf\u5b9c\u3002\u4ed6\u4eec\u53ea\u6709\u4e00\u4e2a\u7f3a\u9677\u2026\u3002CPU(\u6709\u65f6\u8fd8\u6709GPU)\u4e0a\u7684\u6563\u70ed\u5316\u5408\u7269\u6bd4\u8fd9\u4e9b\u7b14\u8bb0\u672c\u7535\u8111\u8001\u5316\u5f97\u5feb\u5f97\u591a\u3002\n\u5728\u6211\u6073\u6c42\u4f7f\u7528ThinkPadW520\u4e4b\u540e\uff0c\u6211\u5bb3\u6015\u5b83\u6709\u70b9\u574f\u4e86\uff0c\u56e0\u4e3a\u5b83\u5728\u7a7a\u95f2\u65f6\u53ef\u4ee5\u8fbe\u523060\u6444\u6c0f\u5ea6\u5de6\u53f3\uff0c\u5f53\u6211\u505a\u8981\u6c42\u5f88\u4f4e\u7684\u4efb\u52a1\u65f6\uff0c\u5b83\u7684\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u53ef\u4ee5\u8fbe\u523095\u6444\u6c0f\u5ea6\u3002\u6211\u65e0\u6cd5\u4eceFreeBSD\u4e0a\u7684\u5178\u578b\u7cfb\u7edf\u5206\u6790/\u6027\u80fd\u5de5\u5177\u4e2d\u770b\u51fa\u4efb\u4f55\u4e1c\u897f\uff0c\u4f46\u6211\u505a\u4e86\u66f4\u6df1\u5165\u7684\u8c03\u67e5\uff0c\u56e0\u4e3a\u6211\u5728ThinkPadX220\u6216ThinkPadT420s\u2026\u4e0a\u6ca1\u6709\u9047\u5230\u4efb\u4f55\u8fd9\u6837\u7684\u95ee\u9898\u3002\u4f17\u6240\u5468\u77e5\uff0cT420s\u6709\u4e00\u4e9b\u51b7\u5374\u95ee\u9898\uff0c\u800cW520\u6ca1\u6709\u3002\u5f53\u6211\u9700\u8981CPU\u7535\u6e90\u65f6\uff0c\u6211\u751a\u81f3\u771f\u7684\u611f\u89c9\u5230\u7cfb\u7edf\u5728\u201c\u51cf\u901f\u201d\u3002\n\u6211\u5f00\u59cb\u6000\u7591CPU\u4e0a\u7684\u70ed\u8d34\u53ef\u80fd\u592a\u65e7\u4e86\uff0c\u4e0d\u80fd\u53ef\u9760\u5730\u5de5\u4f5c\u3002\u6211\u68c0\u67e5\u4e86\u70ed\u8d34\u7684\u201c\u57fa\u51c6\u201d\uff0c\u770b\u770b\u8be5\u7528\u54ea\u79cd\u3002\u5728\u6240\u6709/\u5927\u591a\u6570\u6d4b\u8bd5\u4e2d\uff0c\u6709\u4e00\u79cd\u6d46\u7cca\u8131\u9896\u800c\u51fa\uff0c\u90a3\u5c31\u662f\u70ed\u7070\u718aKryonaut\u6d46\u7cca\u3002\u4e0b\u9762\u60a8\u5c06\u770b\u5230Tom\u786c\u4ef6\u7ad9\u70b9\u9488\u5bf9CPU\u548cGPU\u6240\u505a\u7684\u6d4b\u8bd5\u7ed3\u679c\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u53ef\u4ee5\u5728Tom\u7684\u786c\u4ef6\u9875\u9762\u4e0a\u627e\u5230\u3002\u9996\u5148\u662fCPU\u6d4b\u8bd5\u3002\n\u4e0d\u77e5\u9053\u4f60\u662f\u5426\u6ce8\u610f\u5230\u4e86\uff0c\u4f46\u662f\u4ed6\u4eec(\u6c64\u59c6\u7684\u786c\u4ef6)\u4e5f\u6d4b\u8bd5\u4e86\u666e\u901a\u7684\u8001\u5f0f\u7259\u818f\ud83d\ude42\u3002\n\u70ed\u7070\u718a\u5728\u4ed6\u4eec\u7684\u9875\u9762-https://thermal-grizzly.com/en/products-\u8fd9\u91cc\u63d0\u4f9b\u4e86\u4ed6\u4eec\u7684\u4ea7\u54c1\u4e4b\u95f4\u7684\u5f88\u597d\u7684\u6bd4\u8f83\u3002\u4e0b\u9762\u60a8\u5c06\u770b\u5230\u6b64\u6bd4\u8f83\u7684\u5c4f\u5e55\u622a\u56fe\u3002\u6211\u60f3\u8fd9\u662f\u5468\u56f4\u6700\u597d\u7684\u6d46\u7cca\u4e4b\u4e00\uff0c\u4f1a\u5f88\u8d35\u7684\u3002\u2026\u3002\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\u6211\u82b1\u4e86\u5927\u7ea65\u7f8e\u5143\u4e70\u4e86\u6211\u7684\u6d46\u7cca\uff0c\u6211\u4e0d\u8ba4\u4e3a\u5b83\u5f88\u8d35\u3002\u2026\u3002\u5c24\u5176\u662f\u5e02\u9762\u4e0a\u6700\u597d\u7684\u6d46\u7cca\u4e4b\u4e00\u3002\n\u5728\u9605\u8bfb\u4e86\u6709\u5173\u91d1\u5c5e\u57fa\u7cca\u7684\u5185\u5bb9\u540e\uff0c\u6211\u4e0d\u6562\u5728\u6211\u7684ThinkPadW520CPU/GPU\u4e0a\u4f7f\u7528\u8fd9\u6837\u7684\u6d46\u7cca\uff0c\u56e0\u6b64\u6211\u4f7f\u7528\u4e86\u6700\u5148\u8fdb\u7684\u975e\u91d1\u5c5e\u57fa\u7cca\u3002\n\u6211\u771f\u7684\u4e0d\u60f3\u81ea\u5df1\u5236\u4f5c\u4e00\u90e8\u5173\u4e8e\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u7535\u5f71(\u6211\u4e5f\u6ca1\u6709)\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f7f\u7528Youtube\u4e0a\u7684\u8fd9\u90e8\u7535\u5f71\u4f5c\u4e3a\u6307\u5357-https://youtu.be/CPGvKNuapzY-\u5b83\u65e2\u5c55\u793a\u4e86\u62c6\u5378\u8fc7\u7a0b\uff0c\u4e5f\u5c55\u793a\u4e86\u6e05\u6d01\u8fc7\u7a0b\u3002\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u786c\u4ef6\u7ef4\u62a4\u624b\u518c-ThinkPad T520/W520-\u8054\u60f3ThinkPad\u7684\u5b98\u65b9\u624b\u518c\uff0c\u4e86\u89e3\u6bcf\u9879\u7ef4\u62a4\u4efb\u52a1\u9700\u8981\u505a\u4e9b\u4ec0\u4e48\u3002\n\u6211\u81f3\u5c11\u53ef\u4ee5\u505a\u4e00\u4e9b\u7167\u7247\uff0c\u4f46\u6211\u53ea\u505a\u4e86\u4e00\u5f20\u7167\u7247-\u6240\u6709\u7684\u87ba\u4e1d\u9489\u4ece\u6211\u7684\u5fc3\u5e95ThinkPadW520\u3002\n\u6211\u6ca1\u6709\u60f3\u8fc7\u4efb\u4f55\u5176\u4ed6\u66f4\u5408\u7406\u7684\u65b9\u6cd5\u6765\u8bb0\u4f4f\u5e94\u8be5\u628a\u54ea\u4e9b\u87ba\u9489\u653e\u5728\u54ea\u91cc\ud83d\ude42\u3002\nCPU\u548cGPU\u4e0a\u7684\u6d46\u7cca\u771f\u7684\u5f88\u6613\u788e\uff0c\u4eceCPU/GPU\u4e0a\u79fb\u9664\u5b83\u771f\u7684\u5f88\u5bb9\u6613(\u592a\u5bb9\u6613)\u3002\n\u4e00\u4e9b\u4eba\u62b1\u6028\u8bf4\uff0c\u5e94\u7528\u70ed\u7070\u718a\u5b87\u822a\u5458\u662f\u201c\u56f0\u96be\u7684\u201d\uff0c\u5b83\u5e94\u8be5\u66f4\u5bb9\u6613\u2026\u3002\u4f46\u662f\u6211\u4e0d\u77e5\u9053\u54ea\u4e2a\u90e8\u5206\u5e94\u8be5\u6bd4\u8f83\u96be\u3002\u5b83\u5c31\u50cf\u6211\u8fc7\u53bb\u5728\u6211\u7684(\u5f53\u65f6\u7684\u53f0\u5f0f\u673a)CPU\u4e0a\u4f7f\u7528\u7684\u4efb\u4f55\u5176\u4ed6\u70ed\u7cca\u4e00\u6837\u3002\u4e0d\u77e5\u9053\u8fd9\u4e9b\u201c\u58f0\u97f3\u201d\u662f\u4ece\u54ea\u91cc\u6765\u7684\uff0c\u4f46\u6d82\u62b9\u8fd9\u79cd\u6d46\u7cca\u7684\u8fc7\u7a0b\u975e\u5e38\u7b80\u5355\u3002\n\u6d82\u62b9\u5b8c\u6d46\u7cca\u540e\uff0c\u6211\u5f53\u7136\u98a0\u5012\u4e86\u62c6\u5378\u8fc7\u7a0b\uff0c\u4f7f\u6211\u7684ThinkPadW520\u518d\u6b21\u201c\u5b8c\u6574\u201d\u8d77\u6765\u3002\n\u5728FreeBSD\u4eceBIOS\u5f15\u5bfc\u5230XDM\u768420\u79d2\u4e4b\u540e(8)\uff0c\u6211\u53ef\u4ee5\u767b\u5f55\u4e86\u3002\u6211\u7684dzen2(1)\u914d\u7f6e\u663e\u793a\u4e86\u7a7a\u95f2\u6e29\u5ea6\u3002\u6e29\u5ea6\u662f48\u6444\u6c0f\u5ea6\u3002\u6bd4\u4f7f\u7528\u65e7\u7684(\u53ef\u80fd\u662f\u539f\u59cb\u7684)\u70ed\u7cca\u4f4e\u7ea612\u6444\u6c0f\u5ea6\u3002\u771f\u6b63\u4e0d\u540c\u7684\u662f\uff0c\u5f53\u6211\u52a0\u8f7dThinkPadW520\u7b14\u8bb0\u672c\u7535\u8111\u65f6\u3002\u201c\u52a0\u8f7d\u201d\u7684\u6e29\u5ea6\u6700\u9ad8\u4e3a65\u6444\u6c0f\u5ea6\uff0c\u800c\u4e4b\u524d\u7684\u6e29\u5ea6\u662f95\u6444\u6c0f\u5ea6\u3002\u5927\u7ea630\u6444\u6c0f\u5ea6\u7684\u5dee\u503c\u2026\u3002\u6211\u7684W520\u5728\u88c5\u8f7d\u65f6\u7ec8\u4e8e\u6ca1\u6709\u51cf\u901f\u3002\n\u5728\u6e29\u5ea6\u6709\u4e86\u5982\u6b64\u5927\u7684\u6539\u5584\u4e4b\u540e\uff0c\u6211\u751a\u81f3\u5199\u4e86\u81ea\u5df1\u7684\u811a\u672c\u6765\u63a7\u5236ThinkPad\u7684\u98ce\u6247\uff0c\u4f7f\u5b83\u66f4\u5b89\u9759-https://github.com/vermaden/scripts/blob/master/acpi-thinkpad-fan.sh-\u5728\u8fd9\u91cc\u53ef\u4ee5\u4e70\u5230\u3002\u60a8\u9700\u8981\u6bcf\u5206\u949f(*)\u5c06\u5176\u6267\u884c\u653e\u5230crontab(1)\u4e2d\uff0c\u4ee5\u5145\u5206\u5229\u7528\u5b83\u3002\u5728\u90a3\u4e4b\u540e(\u5f53\u7136\u8fd8\u6709\u70ed\u8d34)\uff0c\u6211\u7684ThinkPadW520\u51e0\u4e4e\u53d8\u6210\u4e86\u6ca1\u6709\u98ce\u6247\u7684\ud83d\ude42\u3002\n\u6bcf\u8d34\u4e00\u6b21\u70ed\u7070\u718aKryonaut\u6d46\u7cca\uff0c\u4f60\u90fd\u4f1a\u5f97\u5230\u552f\u4e00\u7684\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684\u9875\u9762\u4e0a\u5728\u7ebf\u9a8c\u8bc1\u8fd9\u4e9b\u4ee3\u7801\u3002\n\u70ed\u7070\u718aKryonaut\u662f\u6700\u597d\u7684\u70ed\u7cca\u5417\uff1f\u6211\u73b0\u5728\u77e5\u9053\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u5f88\u4e0d\u9519\u3002\u81f3\u5c11\u5bf9\u4e8e\u4e0d\u662f\u91d1\u5c5e\u57fa\u6750\u7684\u2018\u5b89\u5168\u2019\u6d46\u7cca\u3002\u6211\u60f3\uff0c\u5982\u679c\u4f60\u51fa\u73b0\u548c\u6211\u4e00\u6837\u7684\u75c7\u72b6\uff0c\u4f60\u771f\u7684\u5e94\u8be5\u6362\u6389\u4f60\u7684\u7ecf\u5178ThinkPad\u4e0a\u7684\u70ed\u8d34\u3002\n\u5982\u679c\u8fd9\u662f\u4e00\u7bc7\u8d5e\u52a9\u7684\u535a\u5ba2\u6587\u7ae0\uff1f\u4e0d\u5e78\u7684\u662f\u6ca1\u6709\uff0c\u4f46\u4e5f\u8bb8\u5728\u672a\u6765\u2026\u3002\ud83d\ude42", "note_en": "Those who know me know that I am a bit fan of the oldschool  Lenovo ThinkPad laptops with real 7-row keyboards. I own several *20 models from 2011 including W520, T420s and X220 ones. They still rock when it comes to \u2018laptop computing\u2019 and they are dirt cheap on any auction platform. They only got one flaw \u2026 that thermal compound on CPU (and sometimes GPU) gets older a lot faster then these laptops.\n After I got  ThinkPad W520 in the begging of using it I was scared that it was kinda broken because it got about 60C degrees when idle and very fast to 95C degrees when I was doing even quite low demanding tasks. I was not able to tell anything from typical system profiling/performance tools on  FreeBSD but I dig deeper as I did not got any such problem on ThinkPad X220 or ThinkPad T420s \u2026 and T420s is know to have some cooling issues while W520 does not. I really even felt that system was \u2018slowing\u2019 down when I needed CPU power.\n I started to suspect that maybe thermal paste on CPU is little too old to make its job reliably. I checked for thermal paste \u2018benchmarks\u2019 to see which on to get. In all/most test one paste stood out \u2013 the  Thermal Grizzly Kryonaut paste. Below you will find results of the tests made by  Tom\u2019s Hardware site both for CPU and GPU. The test is available on  Tom\u2019s Hardware page  here. First the CPU tests.\n  Not sure that you noticed that but they ( Tom\u2019s Hardware) also tested plain old tooth paste \ud83d\ude42\n   The  Thermal Grizzly offers nice comparison between their products on their page \u2013  https://thermal-grizzly.com/en/products \u2013 here. Below you will find a screenshot of this comparison. I thought that it its one of the better pastes around it would be quite expensive \u2026 but it is not. I got mine paste for about $5. I to not think its expensive \u2026 especially for one of the best pastes on the market.\n  After reading about metal based pastes I was afraid to apply such paste on my ThinkPad W520 CPU/GPU thus I used the most advanced paste that is not metal based.\n I really did not wanted to make my own movie about this process (and I did not) so you can use this one from  YouTube as a guide \u2013  https://youtu.be/CPGvKNuapzY \u2013 it shows both disassembly and cleaning process. You can also use the  Hardware Maintenance Manual \u2013 ThinkPad T520/W520 \u2013 the official  Lenovo ThinkPad manual on what you need to do for each maintenance task.\n I could at least make some photos but I did only one photo \u2013 of all the screws from the bottom of my  heart  ThinkPad W520.\n  I did not thought about any other more reasonable way to remember which screws to put where \ud83d\ude42\n The paste on the both CPU and GPU was really fragile and it was really easy (too easy) to remove it from CPU/GPU.\n Some people complained that applying the  Thermal Grizzly Kryonaut is \u2018hard\u2019 and it should be easier \u2026 but I do not know in which part it supposed to be hard. It applied as any other thermal paste that I used in the past for my (then desktop) CPUs. Not sure where these \u2018voices\u2019 came from but It was very easy process to apply that paste.\n After applying that paste I of course reversed the disassembly process and made my  ThinkPad W520 \u2018whole\u2019 again.\n  After 20 seconds of  FreeBSD boot from BIOS to   xdm(8) I was able to login. My   dzen2(1) config showed me the idle temperature. It was 48C degrees. About 12C lower then with old (probably original) thermal paste. The real difference came when I loaded my  ThinkPad W520 laptop. The \u2018loaded\u2019 temperature was at most 65C degrees and that was from 95C before. About 30C degrees difference \u2026 and my W520 finally did not slowed down when loaded.\n After such great improvements in temperature I even wrote my own script to control the ThinkPad fan to make it more noiseless \u2013  https://github.com/vermaden/scripts/blob/master/acpi-thinkpad-fan.sh \u2013 available here. You need to put its execution into   crontab(1) every minute (  * * * * *) to make best use of it. After that (and thermal paste of course) my  ThinkPad W520 became almost fanless \ud83d\ude42\n With every  Thermal Grizzly Kryonaut paste you get unique code that you can verify online on their page.\n  Is the  Thermal Grizzly Kryonaut the best thermal paste? I do now know, but its pretty good. At least for not metal base \u2018safe\u2019 paste. I think that You really should change that thermal paste on your classy ThinkPad if you get symptoms like mine.\n If this is a sponsored blog entry? Unfortunately not, but maybe in the future \u2026 \ud83d\ude42", "posttime": "2020-07-02 16:21:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "thinkpad", "title": "\u7ecf\u5178ThinkPad\u70ed\u8d34\u66f4\u6362", "title_en": "Classic ThinkPad Thermal Paste Change", "transed": 1, "url": "https://vermaden.wordpress.com/2020/06/30/classic-thinkpad-thermal-paste-change/", "via": "", "real_tags": ["thinkpad"]}, {"category": "", "categoryclass": "", "imagename": "9ea5adbfa6d98d6ee04a97117663f0d7.jpg", "infoid": 1009444, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7275\u5934\u8fd9\u8f6e\u878d\u8d44\u7684\u662f\u4e13\u95e8\u4ece\u4e8b\u6570\u5b57\u5a92\u4f53\u3001\u7535\u5b50\u5546\u52a1\u548c\u533b\u7597\u4fdd\u5065\u7684\u6295\u8d44\u516c\u53f8Alpine Meridian\uff0c\u4ee5\u53ca\u4f01\u4e1a\u5bb6\u7f57\u4f2f\u7279\u00b7\u5185\u6c83(Robert Neveu)\uff0c\u4ed6\u4e5f\u52a0\u5165\u4e86OurPeople\uff0c\u62c5\u4efb\u7ba1\u7406\u5408\u4f19\u4eba\u3002\u5b83\u4f7f\u603b\u8d44\u91d1\u8fbe\u5230300\u4e07\u7f8e\u5143\u3002\n\u603b\u90e8\u4f4d\u4e8e\u5e03\u91cc\u65af\u6258\u5c14\u7684OurPeople\u7531\u7f57\u65af\u00b7\u9ea6\u8003(Ross McCaw)\u4e8e2016\u5e74\u521b\u7acb\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b89\u5168\u7684\u79fb\u52a8\u5e73\u53f0\uff0c\u8ba9\u4f01\u4e1a\u53ef\u4ee5\u4e0e\u5458\u5de5\u8fdb\u884c\u6570\u5b57\u6c9f\u901a\uff0c\u786e\u4fdd\u56e2\u961f\u80fd\u591f\u4fdd\u6301\u8054\u7cfb\u3002\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u4e3b\u8981\u5de5\u4f5c\u5728\u5065\u8eab\u548c\u4f11\u95f2\u7b49\u5927\u91cf\u65e0\u529e\u516c\u684c\u5458\u5de5\u7684\u884c\u4e1a\u3002\u76ee\u524d\u7684\u5ba2\u6237\u5305\u62ec\u897f\u6c49\u59c6\u8054\u961f\u57fa\u91d1\u4f1a\u3001\u7ef4\u73cd\u6d3b\u8dc3\u82f1\u56fd\u516c\u53f8\u3001\u4fdd\u5c14\u987f\u516c\u56ed\u516c\u53f8\u548cSerco\u4f11\u95f2\u516c\u53f8\u3002\n\u9ea6\u8003\u66fe\u7ecf\u662f\u4e00\u540d\u517c\u804c\u6551\u751f\u5458\u548c\u6e38\u6cf3\u6559\u5e08\uff0c\u4ed6\u4e4b\u524d\u521b\u7acb\u4e86CoursePro\uff0c\u4ee5\u6539\u5584\u82f1\u56fd\u548c\u5176\u4ed6\u56fd\u5bb6\u7684\u6e38\u6cf3\u8bfe\u7ba1\u7406\u65b9\u5f0f\u30022014\u5e74\uff0c\u8be5\u516c\u53f8\u88ab\u4e54\u7eb3\u65af\u8f6f\u4ef6\u516c\u53f8(Jonas Software)\u5b8c\u5168\u6536\u8d2d\u65f6\uff0c\u5df2\u6709100\u591a\u4e07\u6e38\u6cf3\u8005\u6ce8\u518c\u3002\u5728CoursePro\u53d6\u5f97\u6210\u529f\u540e\uff0c\u4ed6\u53d1\u73b0\u4e86\u53e6\u4e00\u4e2a\u673a\u4f1a\uff0c\u4e8e\u662f\u521b\u529e\u4e86OurPeople\u3002\n\u9ea6\u8003\u8bf4\uff1a\u201c\u6211\u4eb2\u773c\u76ee\u7779\u4e86\u516c\u53f8\u5982\u4f55\u52aa\u529b\u4e0e\u5458\u5de5\u6c9f\u901a\u3002\u201d\u201c\u5177\u4f53\u5730\u8bf4\uff0c\u4ed6\u4eec\u7684\u8fdc\u7a0b\u3001\u65e0\u529e\u516c\u684c\u7684\u56e2\u961f\u6210\u5458\uff0c\u4ed6\u4eec\u5f80\u5f80\u65e0\u6cd5\u8bbf\u95ee\u516c\u53f8\u7535\u5b50\u90ae\u4ef6\uff0c\u4f46\u4ed6\u4eec\u662f\u4e0e\u5ba2\u6237\u63a5\u89e6\u6700\u76f4\u63a5\u7684\u4eba\u201d\u3002\n\u771f\u6b63\u5f15\u4eba\u6ce8\u76ee\u7684\u662f\uff0c\u6709\u591a\u5c11\u57f9\u8bad\u5e08\u6ca1\u6709\u53c2\u4e0e\u516c\u53f8\u65b0\u95fb\u548c\u516c\u544a\u3002\u201c\u8fd9\u5bf9\u516c\u53f8\u548c\u4ed6\u4eec\u90fd\u4e0d\u597d\u3002\u6211\u7814\u7a76\u4e86\u591a\u4e2a\u5176\u4ed6\u884c\u4e1a\uff0c\u53d1\u73b0\u8fd9\u662f\u5f88\u591a\u65e0\u529e\u516c\u684c\u5458\u5de5\u4eba\u6570\u8f83\u591a\u7684\u884c\u4e1a\u666e\u904d\u5b58\u5728\u7684\u95ee\u9898\u3002\u201c\u3002\nMcCaw\u5c06OurPeople\u89e3\u51b3\u65b9\u6848\u63cf\u8ff0\u4e3a\u4e00\u79cd\u201c\u9ad8\u5ea6\u590d\u6742\u4f46\u7b80\u5355\u6613\u7528\u201d\u7684\u4fe1\u606f\u670d\u52a1\uff0c\u5b83\u80fd\u786e\u4fdd\u7ec4\u7ec7\u4e2d\u5408\u9002\u7684\u4eba\u5728\u4ed6\u4eec\u9700\u8981\u7684\u65f6\u5019\u6536\u5230\u4ed6\u4eec\u9700\u8981\u7684\u4fe1\u606f\u3002\u4ed6\u8ba4\u4e3a\uff0c\u6b63\u662f\u8fd9\u79cd\u9488\u5bf9\u6027\u548c\u79fb\u52a8\u6027\u4f18\u5148\u7684\u7279\u70b9\uff0c\u4f7f\u8be5\u901a\u4fe1\u5e73\u53f0\u6709\u522b\u4e8e\u7ade\u4e89\u5bf9\u624b\u3002\n\u201c\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\u5206\u4e3a\u4e24\u7c7b\uff1a\u804c\u573a\u793e\u4ea4\u7f51\u7edc\u6216\u6d88\u8d39\u8005\u98ce\u683c\u7684\u804c\u573a\u804a\u5929\u7fa4\u3002\u5728\u6211\u4eec\u770b\u6765\uff0c\u4e24\u8005\u90fd\u5236\u9020\u4e86\u592a\u591a\u7684\u566a\u97f3\u548c\u95f2\u804a\u3002\u4ed6\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u9488\u5bf9\u6027\uff0c\u201c\u9ea6\u8003\u8bf4\u3002\n\u201c\u5458\u5de5\u5e0c\u671b\u770b\u5230\u4e0e\u4ed6\u4eec\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u9605\u8bfb\u6216\u89c2\u770b\u7684\u901f\u5ea6\u5feb\u5f97\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u96c7\u4e3b\u60f3\u77e5\u9053\u901a\u4fe1\u662f\u5426\u5df2\u88ab\u67e5\u770b\u548c\u786e\u8ba4\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u2018\u6807\u8bb0\u2019\u7cfb\u7edf\uff0c\u8fd9\u6837\u53ea\u6709\u7edd\u5bf9\u9700\u8981\u770b\u5230\u90a3\u6761\u6d88\u606f\u7684\u4eba\u624d\u80fd\u6536\u5230\u5b83\u3002\u201c\u3002\n\u6b64\u5916\uff0cOurPeople\u521b\u59cb\u4eba\u8868\u793a\uff0c\u8be5\u5e73\u53f0\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u5e76\u6ca1\u6709\u8bd5\u56fe\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u573a\u6240\u793e\u4ea4\u7f51\u7edc\uff0c\u201c\u5728\u90a3\u91cc\uff0c\u91cd\u8981\u4fe1\u606f\u53ef\u80fd\u4f1a\u5728\u6240\u6709\u5178\u578b\u7684\u566a\u97f3\u4e2d\u4e22\u5931\u201d\u3002\n\u201cOurPeople\u5728\u6b63\u786e\u7684\u65f6\u95f4\u63d0\u4f9b\u5173\u952e\u7684\u3001\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u8ba9\u90a3\u4e9b\u96be\u4ee5\u8054\u7cfb\u5230\u5458\u5de5\u7684\u4eba\u53c2\u4e0e\u8fdb\u6765\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5728\u4ed6\u4eec\u5c65\u884c\u9762\u5411\u5ba2\u6237\u7684\u804c\u8d23\u65f6\u51cf\u6162\u4ed6\u4eec\u7684\u901f\u5ea6\u3002\u6211\u4eec\u4f7f\u5185\u90e8\u6c9f\u901a\uff0c\u7279\u522b\u662f\u4e0e\u8fdc\u7a0b\u548c\u65e0\u529e\u516c\u684c\u7684\u540c\u4e8b\u8fdb\u884c\u6709\u6548\u548c\u9ad8\u6548\u7684\u6c9f\u901a\u3002\u201c", "note_en": "Leading the round is Alpine Meridian, an investment firm that specialises in digital media, e-commerce and healthcare, and entrepreneur Robert Neveu, who also joins OurPeople as managing partner. It brings total funding to $3 million.\n Founded in 2016 by Ross McCaw, Bristol-based OurPeople offers a secure mobile platform to let businesses communicate digitally with employees, ensuring teams can stay connected. The startup primarily works in industries with large numbers of desk-less workers, such as fitness and leisure. Clients currently include West Ham United Foundation, Virgin Active UK, Paulton\u2019s Park and Serco Leisure.\n  McCaw \u2014 who used to be a part-time lifeguard and swim teacher \u2014 previously founded CoursePro to improve the way swim lessons were administered in the U.K. and other countries. At the time the company was fully acquired by Jonas Software in 2014, over a million swimmers had enrolled. After the success of CoursePro, he spotted another opportunity and launched OurPeople.\n \u201cI saw first-hand how companies struggled to communicate with their employees,\u201d says McCaw. \u201cSpecifically their remote, desk-less team members who, more often than not, do not have access to a company email but who are the people with the most direct exposure to their customers\u201d.\n What really stood out was how many of the trainers were not engaging with company news and announcements. \u201cThis was bad for both the company and them. I looked at a number of other sectors and saw that this was a wider issue amongst many industries with high numbers of desk-less workers\u201d.\n McCaw describes the OurPeople solution as a \u201chighly-sophisticated yet simple to use\u201d messaging service that ensures the right people in an organisation receive the information they need when they need it. He reckons it\u2019s this targeted nature and being mobile-first that sets the communication platform apart from competitors.\n \u201cGenerally our competitors come in one of two categories: the workplace social network or the consumer-style workplace chat groups. Both, in our opinion, create too much noise and chatter. They are not targeted enough,\u201d says McCaw.\n \u201cEmployees want to see content that is relevant to them and incredibly quick to read or watch. The employer, on the other hand, wants to know that the communication has been seen and acknowledged. To achieve this we have a \u2018tagging\u2019 system so that only the people that absolutely need to see that message receive it\u201d.\n Furthermore, the OurPeople founder says the platform is different because the startup is not attempting to create a workplace social network \u201cwhere vital information can get lost in all the typical noise\u201d.\n \u201cOurPeople is about crucial, relevant information at the right time that engages those hard to reach employees and won\u2019t slow them down as they carry out their customer-facing duties. We make internal communications, especially with remote and desk-less colleagues, effective and efficient\u201d.", "posttime": "2020-07-02 16:03:36", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6c9f\u901a,team", "title": "\n\u56e2\u961f\u6c9f\u901a\u548c\u53c2\u4e0e\u5e73\u53f0OurPeople\u7b79\u96c6200\u4e07\u7f8e\u5143", "title_en": "\n\t\t\t\tOurPeople, the team communication and engagement platform, raises $2M\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/07/02/ourpeople/", "via": "", "real_tags": ["\u6c9f\u901a", "team"]}, {"category": "", "categoryclass": "", "imagename": "e18aaf44de5b8c4b0db940a00acac934.jpg", "infoid": 1009443, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u622a\u81f32020\u5e746\u6708\uff0c\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u7684\u592a\u9633\u52a8\u529b\u5b66\u5929\u6587\u53f0(SDO)\u5df2\u7ecf\u8fde\u7eed\u89c2\u6d4b\u592a\u9633\u6574\u6574\u5341\u5e74\u4e86\u3002\u4ece\u73af\u7ed5\u5730\u7403\u7684\u592a\u7a7a\u8f68\u9053\u4e0a\uff0cSDO\u5df2\u7ecf\u6536\u96c6\u4e864.25\u4ebf\u5f20\u9ad8\u5206\u8fa8\u7387\u7684\u592a\u9633\u56fe\u50cf\uff0c\u5728\u8fc7\u53bb\u768410\u5e74\u91cc\u79ef\u7d2f\u4e862000\u4e07GB\u7684\u6570\u636e\uff0c\u5e76\u4f7f\u65e0\u6570\u5173\u4e8e\u6211\u4eec\u6700\u8fd1\u7684\u6052\u661f\u7684\u65b0\u53d1\u73b0\u6210\u4e3a\u53ef\u80fd\u3002", "note_en": "As of June 2020, NASA\u2019s Solar Dynamics Observatory \u2013 SDO \u2013 has now been watching the Sun non-stop for over a full decade. From its orbit in space around Earth, SDO has gathered 425 million high-resolution images of the Sun, amassing 20 million gigabytes of data over the past 10 years and enabling countless new discoveries about our closest star.", "posttime": "2020-07-02 16:01:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u89c2\u770b,\u592a\u9633", "title": "\u89c2\u770b\u592a\u9633\u768410\u5e74\u65f6\u95f4\u6d41\u901d", "title_en": "Watch a 10-Year Time Lapse of Sun", "transed": 1, "url": "https://www.nasa.gov/feature/goddard/2020/watch-a-10-year-time-lapse-of-sun-from-nasa-s-sdo", "via": "", "real_tags": ["\u89c2\u770b", "\u592a\u9633"]}, {"category": "", "categoryclass": "", "imagename": "9bc38d0e1f7d3eaeb1ef8a8467842f1f.jpg", "infoid": 1009442, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u603b\u90e8\u4f4d\u4e8e\u65e7\u91d1\u5c71\u7684\u6295\u8d44\u516c\u53f8Greenoaks\u9886\u5bfc\u4e86\u8fd9\u5bb6\u6210\u7acb\u4e24\u5e74\u7684\u5370\u5ea6\u521d\u521b\u516c\u53f8\u7684C\u7cfb\u5217\u878d\u8d44\u3002\u73b0\u6709\u6295\u8d44\u8005Accel\u3001Kae Capital\u3001LightSpeed\u548cSequoia Capital India\u4e5f\u53c2\u4e0e\u4e86\u8fd9\u8f6e\u878d\u8d44\uff0c\u4f7fZetwerk\u8fc4\u4eca\u7b79\u96c6\u7684\u8d44\u91d1\u8fbe\u52306200\u4e07\u7f8e\u5143\u3002\nZetwerk\u7531Amrit Acharya\u3001Srinath Ramakkrushnan\u3001Rahul Sharma\u548cVishal Chaudhary\u4e8e2018\u5e74\u521b\u7acb\uff0c\u5c06OEM(\u539f\u59cb\u8bbe\u5907\u5236\u9020\u5546)\u548cEPC(\u5de5\u7a0b\u91c7\u8d2d\u5efa\u7b51)\u5ba2\u6237\u4e0e\u5236\u9020\u4e1a\u5c0f\u4f01\u4e1a\u548c\u4f01\u4e1a\u8054\u7cfb\u8d77\u6765\u3002\n\u4e0e\u66f4\u5178\u578b\u7684\u7535\u5b50\u5546\u52a1\u516c\u53f8\u4e0d\u540c\uff0cZetwerk\u9500\u552e\u8d77\u91cd\u673a\u90e8\u4ef6\u3001\u95e8\u3001\u4e0d\u540c\u673a\u5668\u7684\u5e95\u76d8\u548c\u68af\u5b50\u7b49\u5546\u54c1\u3002\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u7684\u4e1a\u52a1\u662f\u4e3a\u5236\u9020\u3001\u52a0\u5de5\u3001\u94f8\u9020\u548c\u953b\u9020\u4e1a\u52a1\u7684\u5ba2\u6237\u63d0\u4f9b\u670d\u52a1\u3002\n\u8fd9\u4e9b\u90fd\u662f\u5b9a\u505a\u7684\u4ea7\u54c1\u3002\u201c\u6ca1\u6709\u4eba\u6709\u8fd9\u7c7b\u5e93\u5b58\u7684\u5e93\u5b58\u3002\u4f60\u63a5\u5230\u8ba2\u5355\uff0c\u5c31\u4f1a\u627e\u5230\u5236\u9020\u5b83\u4eec\u7684\u5236\u9020\u5546\u548c\u4f5c\u574a\u3002\u6211\u4eec\u7684\u5ba2\u6237\u662f\u4ece\u4e8b\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\u4e1a\u52a1\u7684\u516c\u53f8\uff0c\u201c\u62c5\u4efbZetwerk\u9996\u5e2d\u6267\u884c\u5b98\u7684Acharya\u8bf4\u3002\n\u201c\u6211\u4eec\u4e3a\u8fd9\u4e9b\u5c0f\u4f5c\u574a\u7f16\u5236\u7d22\u5f15\uff0c\u4e86\u89e3\u4ed6\u4eec\u4ee5\u524d\u5efa\u9020\u7684\u4ea7\u54c1\u79cd\u7c7b\u3002\u8fd9\u4e9b\u6307\u6570\u5e2e\u52a9\u8f83\u5927\u7684\u516c\u53f8\u53d1\u73b0\u5e76\u4e0e\u4ed6\u4eec\u5408\u4f5c\uff0c\u201c\u4ed6\u8865\u5145\u8bf4.\u201d\u4e00\u65e6\u4e00\u5bb6\u516c\u53f8\u4e0b\u4e86\u8ba2\u5355\uff0cZetwerk\u5c31\u53ef\u4ee5\u8ba9\u4ed6\u4eec\u8ffd\u8e2a\u5236\u9020\u7684\u8fdb\u5ea6\uff0c\u7136\u540e\u8ffd\u8e2a\u5176\u53d1\u8d27\u60c5\u51b5.\u3002\u5728\u8fd9\u4e00\u884c\u4e1a\u4e2d\uff0c\u8fd9\u79cd\u201c\u7275\u624b\u201d\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7269\u54c1\u7684\u5236\u9020\u548c\u8fd0\u8f93\u901a\u5e38\u9700\u8981\u4e24\u5230\u4e09\u4e2a\u6708\u4ee5\u4e0a\u7684\u65f6\u95f4\u3002\n\u8be5\u516c\u53f8\u544a\u8bc9TechCrunch\uff0c\u76ee\u524d\uff0cZetwerk\u4e0e150\u591a\u5bb6\u4f01\u4e1a\u548c2500\u5bb6\u4e2d\u5c0f\u4f01\u4e1a\u5408\u4f5c\u3002\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u6bcf\u6708\u4ea4\u4ed8\u8d85\u8fc73\u4e07\u4e2a\u96f6\u90e8\u4ef6\uff0c\u81ea\u53bb\u5e7412\u6708\u4ee5\u6765\u589e\u957f\u4e8650%\uff0c\u5e76\u4f7f\u5370\u5ea6\u7684\u51e0\u5bb6\u5236\u9020\u5546\u80fd\u591f\u53d1\u73b0\u6d77\u5916\u5ba2\u6237\u3002\nAccel\u7684Prayank Swaroop\u8868\u793a\uff1a\u201cZetwerk\u6b63\u5728\u5c06\u5370\u5ea6\u5236\u9020\u4e1a\u5e26\u5230\u5168\u7403\u821e\u53f0\u4e0a\uff0c\u6211\u4e3a\u80fd\u6210\u4e3a\u4ed6\u4eec\u6545\u4e8b\u7684\u4e00\u90e8\u5206\u800c\u611f\u5230\u81ea\u8c6a\u3002\u201d\n\u7eff\u8272\u6a61\u6811\u8d44\u672c\u516c\u53f8(Greenoaks Capital)\u7684\u5c3c\u5c14\u00b7\u6c99\u963f(Neil Shah)\u8868\u793a\uff0cZetwerk\u5f00\u53d1\u4e86\u201c\u72ec\u7279\u7684\u8f6f\u4ef6\uff0c\u4f7f\u4e00\u4e2a\u5de8\u5927\u7684\u5168\u7403\u5236\u9020\u5e02\u573a\u80fd\u591f\u5c06\u539f\u59cb\u8bbe\u5907\u5236\u9020\u5546(OEM)\u548cEPC\u4e0e\u5de5\u4e1a\u4f9b\u5e94\u5546\u8054\u7cfb\u8d77\u6765\u3002\u201d\n\u8d8a\u6765\u8d8a\u591a\u7684\u516c\u53f8\u5e0c\u671b\u5728\u5168\u7403\u8303\u56f4\u5185\u4f7f\u4ed6\u4eec\u7684\u4f9b\u5e94\u94fe\u591a\u6837\u5316\uff0cZetwerk\u7684\u5e73\u53f0\u4f7f\u4ed6\u4eec\u80fd\u591f\u8bc6\u522b\u4f9b\u5e94\u5546\u4f19\u4f34\u5e76\u4e0e\u4e4b\u5408\u4f5c\uff0c\u4ee5\u6309\u65f6\u3001\u9ad8\u8d28\u91cf\u5730\u4ea4\u4ed8\u9879\u76ee\u3002\u6211\u4eec\u5f88\u9ad8\u5174\u80fd\u7ee7\u7eed\u4e0eZetwerk\u56e2\u961f\u5408\u4f5c\u3002\u201c\u3002\nAcharya\u8bf4\uff0c\u5236\u9020\u4e1a\u8d21\u732e\u4e86\u5370\u5ea6GDP\u768414%\uff0c\u4f46\u8fd9\u4e2a\u56fd\u5bb6\u7f3a\u4e4f\u4e00\u4e2a\u652f\u6301\u751f\u6001\u7cfb\u7edf\u6765\u66f4\u6709\u6548\u5730\u6267\u884c\u9879\u76ee\u3002\u4ed6\u8bf4\uff0c\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u5c06\u90e8\u7f72\u65b0\u8d44\u672c\uff0c\u4e3a\u5176\u56fd\u9645\u6269\u5f20\u63d0\u4f9b\u8d44\u91d1\uff0c\u5e76\u63a8\u51fa\u65b0\u7684\u7c7b\u522b\u3002\n\u5728\u8bc4\u8bba\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u5982\u4f55\u5f71\u54cdZetwerk\u65f6\uff0cAcharya\u544a\u8bc9TechCrunch\uff0c\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u5de5\u4f5c\u5728\u591a\u4e2a\u884c\u4e1a\uff0c\u5176\u4e2d\u4e00\u4e9b\u884c\u4e1a\u4ecd\u5728\u589e\u957f\u3002\u201c\u603b\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u505a\u5f97\u5f88\u597d\uff0c\u201d\u4ed6\u8bf4\u3002", "note_en": "San Francisco-based investment firm Greenoaks led the two-year-old Indian startup\u2019s Series C financing round. Existing investors  Accel,    Kae Capital,   Lightspeed and Sequoia Capital India also participated in the round, which brings Zetwerk\u2019s  to-date raise to $62 million.\n Founded by Amrit Acharya, Srinath Ramakkrushnan, Rahul Sharma and Vishal Chaudhary in 2018,  Zetwerk connects OEMs (original equipment manufacturers) and EPC (engineering procurement construction) customers with manufacturing small-businesses and enterprises.\n  Unlike the more typical e-commerce firms, Zetwerk sells goods such as parts of a crane, doors, chassis of different machines and ladders. The startup operates to serve customers in fabrication, machining, casting and forging businesses.\n These are all custom-made products. \u201cNobody has a stock of such inventories. You get the order, you find manufacturers and workshops that make them. Our customers are companies that are in the business of building infrastructure,\u201d said Acharya, who serves as Zetwerk\u2019s chief executive.\n \u201cWe index these small workshops and understand the kinds of products they have built before. These indexes help bigger companies discover and work with them,\u201d he added.\u00a0Once a firm has placed an order, Zetwerk allows them to track the progress of manufacturing and then its shipping. In this line of business, this \u201chand-holding\u201d is crucial as manufacturing and shipping of these items typically take more than two to three months.\n Currently, Zetwerk works with more than 150 enterprises and 2,500 small and medium-sized businesses, it told TechCrunch. The startup delivers more than 30,000 parts each month, up 50% since December last year, and has enabled several manufacturers in India to discover clients overseas.\n \u201cZetwerk is bringing Indian manufacturing to the global stage, and I\u2019m proud to be part of their story,\u201d said Prayank Swaroop of Accel.\n Zetwerk has developed \u201cunique software to enable an enormous global manufacturing marketplace connecting OEMs and EPCs with industrial suppliers,\u201d said Neil Shah of Greenoaks Capital.\n \u201cIncreasingly, companies are looking to diversify their supply chain globally and Zetwerk\u2019s platform allows them to identify and collaborate with supplier partners to deliver projects on-time and with high quality. We are thrilled to continue to partner with the Zetwerk team,\u201d he said.\n Manufacturing contributes to 14% of India\u2019s GDP, but the nation lacks a supporting ecosystem to execute projects more efficiently, said Acharya. The startup will deploy the fresh capital to fund its international expansion and launch new categories, he said.\n Commenting on how the coronavirus pandemic has impacted Zetwerk, Acharya told TechCrunch that the startup works across multiple industries, some of which are still growing. \u201cOverall, we are doing well,\u201d he said.", "posttime": "2020-07-02 15:43:34", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "b2b,items,zetwerk", "title": "\n\u5370\u5ea6B2B\u5236\u9020\u4ea7\u54c1\u5e02\u573aZetwerk\u7b79\u96c62100\u4e07\u7f8e\u5143", "title_en": "\n\t\t\t\tZetwerk, an Indian B2B marketplace for manufacturing items, raises $21 million\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/07/02/zetwerk-an-indian-b2b-marketplace-for-manufacturing-items-raises-21-million/", "via": "", "real_tags": ["b2b", "items", "zetwerk"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1009440, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8dc3\u5bfc\u822a\u8df3\u8dc3\u5bfb\u627e\u7ecf\u6d4e\u53d1\u5c55\u7684O\u5f62\u73af\u7406\u8bba\u662fMichael Kremer\u57281993\u5e74\u63d0\u51fa\u7684\u4e00\u79cd\u7ecf\u6d4e\u53d1\u5c55\u6a21\u578b[1]\uff0c\u5b83\u63d0\u51fa\u751f\u4ea7\u4efb\u52a1\u5fc5\u987b\u4e00\u8d77\u719f\u7ec3\u5730\u6267\u884c\uff0c\u624d\u80fd\u4f7f\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u4efb\u52a1\u5177\u6709\u5f88\u9ad8\u7684\u4ef7\u503c\u3002\u8fd9\u79cd\u6a21\u5f0f\u7684\u4e3b\u8981\u7279\u70b9\u662f\u79ef\u6781\u7684\u5206\u7c7b\u5339\u914d\uff0c\u5373\u5177\u6709\u76f8\u4f3c\u6280\u80fd\u6c34\u5e73\u7684\u4eba\u4e00\u8d77\u5de5\u4f5c\u3002[1]\u3002\n\u8fd9\u4e2a\u540d\u5b57\u6765\u6e90\u4e8e1986\u5e74\u6311\u6218\u8005\u53f7\u822a\u5929\u98de\u673a\u707e\u96be\uff0c\u8fd9\u662f\u4e00\u573a\u7531\u5355\u4e2aO\u5f62\u73af\u6545\u969c\u9020\u6210\u7684\u707e\u96be\u3002\n\u514b\u96f7\u9ed8\u8ba4\u4e3a\uff0cO\u5f62\u73af\u53d1\u5c55\u7406\u8bba\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u5bcc\u88d5\u56fd\u5bb6\u6bd4\u8d2b\u7a77\u56fd\u5bb6\u751f\u4ea7\u66f4\u590d\u6742\u7684\u4ea7\u54c1\u3001\u62e5\u6709\u66f4\u5927\u7684\u516c\u53f8\u548c\u66f4\u9ad8\u7684\u5de5\u4eba\u751f\u4ea7\u7387\u3002[2]\u3002\n\u8fd9\u4e2a\u6a21\u578b\u6709\u4e94\u4e2a\u4e3b\u8981\u5047\u8bbe\uff1a\u4f01\u4e1a\u662f\u98ce\u9669\u4e2d\u6027\u7684\uff0c\u52b3\u52a8\u529b\u5e02\u573a\u662f\u7ade\u4e89\u7684\uff0c\u5de5\u4eba\u63d0\u4f9b\u52b3\u52a8\u529b\u662f\u975e\u5f39\u6027\u7684\uff0c\u5de5\u4eba\u662f\u5f7c\u6b64\u4e0d\u5b8c\u7f8e\u7684\u66ff\u4ee3\u54c1\uff0c\u4efb\u52a1\u6709\u8db3\u591f\u7684\u4e92\u8865\u6027\u3002\n\u751f\u4ea7\u88ab\u5206\u89e3\u4e3an{\\displaystyle n}\u4e2a\u4efb\u52a1\u3002\u52b3\u52a8\u8005\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u4e0d\u540c\u6548\u7387\u7684\u6280\u672f\u6765\u5b8c\u6210\u8fd9\u4e9b\u4efb\u52a1\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4ed6\u4eec\u7684\u6280\u80fd\u3002\u6280\u80fd\u7531Q{\\DisplayStyle Q}\u8868\u793a\uff0c\u5176\u4e2d0\u2264Q\u22641{\\DisplayStyle 0\\leq Q\\leq 1}\u3002Q{\\DisplayStyle Q}\u7684\u6982\u5ff5\u6839\u636e\u89e3\u91ca\u7684\u4e0d\u540c\u800c\u4e0d\u540c\u3002\u5b83\u53ef\u80fd\u610f\u5473\u7740\uff1a\u52b3\u52a8\u8005\u6210\u529f\u5b8c\u6210\u4e00\u9879\u4efb\u52a1\u7684\u6982\u7387\uff0c\u4ee5\u767e\u5206\u6bd4\u8868\u793a\u7684\u4efb\u52a1\u5b8c\u6210\u8d28\u91cf\uff0c\u6216\u5728\u53ef\u80fd\u964d\u4f4e\u8d28\u91cf\u7684\u8bef\u5dee\u8303\u56f4\u6761\u4ef6\u4e0b\u7684\u4efb\u52a1\u5b8c\u6210\u8d28\u91cf\u3002[3]\u8f93\u51fa\u662f\u901a\u8fc7\u5c06n{\\displaystyle n}\u4e2a\u4efb\u52a1\u7684\u6bcf\u4e2a\u4efb\u52a1\u7684q{\\displaystyle q}\u503c\u76f8\u4e58\uff0c\u7136\u540e\u5c06\u8be5\u7ed3\u679c\u4e58\u4ee5\u8868\u793a\u516c\u53f8\u7684\u5355\u4e2a\u7279\u5f81\u7684\u53e6\u4e00\u9879(\u5047\u8bbe\u4e3aB{\\displaystyle B})\u6765\u786e\u5b9a\u7684\u3002B{\\displaystyle B}\u4e0e\u4efb\u52a1\u6570\u5448\u6b63\u76f8\u5173\u3002\u8fd9\u91cc\u7684\u751f\u4ea7\u51fd\u6570\u5f88\u7b80\u5355\uff1a\n\u8fd9\u4e2a\u751f\u4ea7\u51fd\u6570\u7684\u91cd\u8981\u542b\u4e49\u662f\u6b63\u5206\u7c7b\u5339\u914d\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5047\u8bbe\u7684\u4e24\u4e2a\u4f4e\u6280\u80fd\u5de5\u4eba(QL)\u548c\u4e24\u4e2a\u9ad8\u6280\u80fd\u5de5\u4eba(QH)\u7684\u56db\u4eba\u7ecf\u6d4e\u6765\u89c2\u5bdf\u8fd9\u4e00\u70b9\u3002\u6b64\u516c\u5f0f\u89c4\u5b9a\u4e86\u6280\u80fd\u5339\u914d\u7684\u751f\u4ea7\u6548\u7387\uff1a\n\u4ece\u4e8b\u76f8\u540c\u5de5\u4f5c\u7684\u5de5\u4eba\u5728\u9ad8\u6280\u80fd\u516c\u53f8\u6bd4\u5728\u4f4e\u6280\u80fd\u516c\u53f8\u83b7\u5f97\u66f4\u9ad8\u7684\u5de5\u8d44\uff1b\n\u53d1\u8fbe\u56fd\u5bb6\u7684\u5de5\u8d44\u5c06\u9ad8\u4e8e\u901a\u8fc7\u8861\u91cf\u6280\u80fd\u6c34\u5e73\u6240\u5047\u5b9a\u7684\u6bd4\u4f8b\uff1b\n\u5458\u5de5\u4f1a\u6839\u636e\u5468\u56f4\u4eba\u7684\u7c7b\u4f3c\u6295\u8d44\u6765\u8003\u8651\u4eba\u529b\u8d44\u672c\u6295\u8d44\uff1b\n\u8be5\u6a21\u578b\u653e\u5927\u4e86\u5c40\u90e8\u74f6\u9888\u7684\u5f71\u54cd\uff0c\u964d\u4f4e\u4e86\u6280\u80fd\u7684\u9884\u671f\u6536\u76ca\uff1b\n\u8fd9\u4e2a\u6a21\u578b\u6709\u52a9\u4e8e\u89e3\u91ca\u4eba\u624d\u6d41\u5931\u548c\u56fd\u9645\u7ecf\u6d4e\u5dee\u8ddd\u3002\u6b63\u5982\u514b\u96f7\u9ed8\u6240\u8bf4\uff0c\u5982\u679c\u6218\u7565\u4e92\u8865\u6027\u8db3\u591f\u5f3a\uff0c\u5fae\u89c2\u7ecf\u6d4e\u4e0a\u76f8\u540c\u7684\u56fd\u5bb6\u6216\u56fd\u5bb6\u5185\u7684\u96c6\u56e2\u53ef\u4ee5\u4e0e\u4e0d\u540c\u6c34\u5e73\u7684\u4eba\u529b\u8d44\u672c\u8fbe\u6210\u5747\u8861\u3002[1]\u3002\n\u52a0\u96f7\u7279\u00b7\u743c\u65af(Garett Jones\uff0c2013)\u4ee5\u514b\u83b1\u9ed8\u7684O\u73af\u7406\u8bba\u4e3a\u57fa\u7840\uff0c\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u5c3d\u7ba1\u53ea\u4f1a\u9020\u6210\u4e00\u56fd\u5185\u90e8\u5de5\u8d44\u6c34\u5e73\u7684\u5fae\u5c0f\u5dee\u5f02\uff0c\u4f46\u5de5\u4eba\u6280\u80fd\u5dee\u5f02\u4e0e\u56fd\u9645\u751f\u4ea7\u7387\u6c34\u5e73\u7684\u5de8\u5927\u5dee\u5f02\u6709\u5173\u3002\u4e3a\u6b64\uff0c\u4ed6\u533a\u5206\u4e86O\u578b\u73af\u5de5\u4f5c-\u5728\u6280\u80fd\u65b9\u9762\u5177\u6709\u9ad8\u5ea6\u6218\u7565\u4e92\u8865\u6027\u7684\u5de5\u4f5c-\u548c\u4e07\u65e0\u4e00\u5931\u7684\u5de5\u4f5c-\u4ee5\u52b3\u52a8\u529b\u56de\u62a5\u9012\u51cf\u4e3a\u7279\u5f81\u7684\u5de5\u4f5c-\u5e76\u5047\u8bbe\u8fd9\u4e24\u79cd\u751f\u4ea7\u6280\u672f\u90fd\u9002\u7528\u4e8e\u6240\u6709\u56fd\u5bb6\u3002\u4ed6\u63a5\u7740\u6307\u51fa\uff0c\u6bcf\u4e2a\u56fd\u5bb6\u7684\u5e73\u5747\u5de5\u4eba\u6280\u80fd\u5728\u56fd\u9645\u4e0a\u7684\u5fae\u5c0f\u5dee\u5f02\u5bfc\u81f4\u4e86\u5de8\u5927\u7684\u56fd\u9645\u6536\u5165\u4e0d\u5e73\u7b49\u548c\u8f83\u5c0f\u7684\u56fd\u5185\u6536\u5165\u4e0d\u5e73\u7b49\u3002[5]\u3002\n^a bc.kremer\uff0cMichael(1993)\u3002\u7ecf\u6d4e\u53d1\u5c55\u7684O\u5f62\u73af\u7406\u8bba\u3002\u95ee\uff1a\u7ecf\u6d4e\u3002\u725b\u6d25\u5927\u5b66\u51fa\u7248\u793e\u3002108(3)\uff1a551-575\u300210.2307/2118400\u3002\u8054\u5408\u5305\u88f9\u670d\u52a1\u516c\u53f8\u80a1\u4ef7\u4e0a\u6da82118400\u3002\n^Nafziger\uff0cE.W.(2005)\u30025-\u7ecf\u6d4e\u53d1\u5c55\u7406\u8bba\u3002\u7ecf\u6d4e\u53d1\u5c55\u3002\u7b2c123-164\u9875\u3002DOI\uff1a10.1017/CBO9780511805615.006.\u3002ISBN\u4e3a9780511805615\u3002\n\u8fc8\u514b\u5c14\u00b7\u6258\u8fbe\u7f57\uff1b\u65af\u8482\u82ac\u00b7C\u00b7\u53f2\u5bc6\u65af(2011)\u3002\u201c\u7ecf\u6d4e\u53d1\u5c55\u201d(\u7b2c\u4e5d\u7248)\u3002\u827e\u8fea\u68ee\u00b7\u97e6\u65af\u5229\u3002\u7b2c166-167\u9875\u3002ISBN978-1408284476\u3002CS1\u7ef4\u62a4\uff1aREF=HARV(\u94fe\u63a5)\u3002\n^Jones\uff0cGarett(2013)\u3002O\u5f62\u5708\u6247\u533a\u548c\u4e07\u65e0\u4e00\u5931\u6247\u533a\uff1a\u6280\u80fd\u5916\u90e8\u6027\u7684\u89e3\u91ca\u3002J.\u7ecf\u6d4e\u3002\u884c\u4e3a\u4e3e\u6b62\u3002\u5668\u5b98\u300285\uff1a1-10.doi\uff1a10.1016/j.jebo.2012.10.014.", "note_en": "Jump to navigation  Jump to search  The  O-ring theory of economic development is a  model of  economic development put forward by  Michael Kremer in 1993,  [1] which proposes that tasks of production must be executed proficiently together in order for any of them to be of high value. The key feature of this model is positive  assortative matching, whereby people with similar skill levels work together.  [1]\n The name comes from the 1986  Challenger shuttle disaster, a catastrophe caused by the failure of a single  O-ring.\n Kremer thinks that the O-ring development theory explains why rich countries produce more complicated products, have larger firms and much higher worker productivity than poor countries.  [2]\n   There are five major assumptions of this model: firms are risk-neutral,  labor markets are competitive, workers supply labor  inelastically, workers are  imperfect substitutes for one another, and there is a sufficient  complementarity of tasks.\n Production is broken down into            n    {\\displaystyle n}   tasks. Laborers can use a multitude of techniques of varying efficiency to carry out these tasks depending on their skill. Skill is denoted by            q    {\\displaystyle q}  , where            0  \u2264  q  \u2264  1    {\\displaystyle 0\\leq q\\leq 1}  . The concept of            q    {\\displaystyle q}   differs depending on interpretation. It could mean: the probability of a laborer successfully completing a task, the quality of task completion expressed as a percentage, or the quality of task completion with the condition of a margin of error that could reduce quality.  [3] Output is determined by multiplying the            q    {\\displaystyle q}   values of each of the            n    {\\displaystyle n}   tasks together and then multiplying this result by another term (let&#39;s say            B    {\\displaystyle B}  ) denoting the individual characteristics of the firm.            B    {\\displaystyle B}   is positively correlated with the number of tasks. The  production function here is simple:\n  The important implication of this production function is positive assortative matching. We can observe this through a hypothetical four-person economy with two low skill workers ( q L) and two high skill workers ( q H). This equation dictates the  productive efficiency of skill matching:\n     Workers performing the same task earn higher wages in a high-skill firm than in a low-skill firm;\n Wages will be more than proportionately higher in developed countries than would be assumed by measurements of skill levels;\n Workers will consider human capital investments in light of similar investments by those around them;\n This model magnifies the effect of local bottlenecks which also reduce the expected returns to skill;\n This model helps explain  brain drain and  international economic disparity. As Kremer puts it, &#34;If strategic complementarity is sufficiently strong, microeconomically identical nations or groups within nations could settle into  equilibria with different levels of human capital&#34;.  [1]\n  Garett Jones (2013) builds upon Kremer&#39;s O-ring theory to explain why differences in worker skills are associated with &#34;massive&#34; differences in international productivity levels despite causing only modest differences in wages within a country. For this purpose, he distinguishes between O-ring jobs - jobs featuring high strategic complementarities in terms of skill - and foolproof jobs - jobs characterized by diminishing returns to labor - and assumes both production technologies to be available to all countries. He then goes on to show that small international variations in average worker skill per country result in both large international and small intra-national income inequality.  [5]\n  ^     a     b     c    Kremer, Michael (1993). &#34;The O-Ring Theory of Economic Development&#34;.   Q. J. Econ.  Oxford University Press.  108 (3): 551\u2013575.  doi: 10.2307/2118400.  JSTOR\u00a0 2118400.\n ^   Nafziger, E. W. (2005). &#34;5 - Theories of Economic Development&#34;.  Economic Development. pp.\u00a0123\u2013164.  doi: 10.1017/CBO9780511805615.006.  ISBN\u00a0  9780511805615.\n ^    Todaro, Michael;  Smith, Stephen C. (2011).  Economic Development (Ninth ed.). Addison Wesley. pp.\u00a0166\u2013167.  ISBN\u00a0  978-1408284476.  CS1 maint: ref=harv ( link)\n  ^   Jones, Garett (2013). &#34;The O-ring sector and the Foolproof sector: An explanation for skill externalities&#34;.   J. Econ. Behav. Organ.  85: 1\u201310.  doi: 10.1016/j.jebo.2012.10.014.", "posttime": "2020-07-02 15:41:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7406\u8bba,ring,\u6280\u80fd", "title": "O-\u73af\u7406\u8bba", "title_en": "O-Ring Theory", "transed": 1, "url": "https://en.wikipedia.org/wiki/O-ring_theory_of_economic_development", "via": "", "real_tags": ["\u7406\u8bba", "ring", "\u6280\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "b4159f0277c2ed48c72a0db23b63f647.jpg", "infoid": 1009438, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5de5\u4f1a\u4ee3\u8868\u544a\u8bc9College Fix\uff0c\u5927\u5b66\u4e0d\u5e94\u8be5\u5206\u4eab\u4e0e\u5176\u652f\u6301BLM\u6297\u8bae\u6d3b\u52a8\u76f8\u51b2\u7a81\u7684\u6570\u636e\u3002\n\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66(Michigan State University)\u9886\u5bfc\u4eba\u6210\u529f\u5730\u5411\u8bb8\u5b97\u8861\u65bd\u538b\uff0c\u8981\u6c42\u4ed6\u8f9e\u53bb\u7814\u7a76\u4e0e\u521b\u65b0\u526f\u603b\u88c1\u7684\u804c\u52a1\uff0c\u6b64\u524d\u7814\u7a76\u751f\u5458\u5de5\u5de5\u4f1a\u53d1\u8d77\u4e86\u4e00\u573a\u7f62\u514d\u4ed6\u7684\u8fd0\u52a8\u3002\n\u6b64\u524d\uff0c\u4ee3\u8868\u6559\u5b66\u548c\u7814\u7a76\u52a9\u7406\u7684\u5de5\u4f1a\u4ed4\u7ec6\u9605\u8bfb\u4e86\u8bb8\u5fd7\u6c38\u591a\u5e74\u6765\u53d1\u8868\u7684\u535a\u5ba2\u6587\u7ae0\u548c\u91c7\u8bbf\uff0c\u6279\u8bc4\u4ed6\u5206\u4eab\u4e0d\u540c\u79cd\u65cf\u4e4b\u95f4\u57fa\u56e0\u5dee\u5f02\u7684\u5185\u5bb9\u3002\n\u4f46\u9a71\u9010\u5f90\u7684\u4e3b\u8981\u63a8\u52a8\u529b\u6765\u81ea\u4e8e\u8fd9\u4f4d\u6559\u6388\u515c\u552e\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u7684\u7814\u7a76\uff0c\u8be5\u7814\u7a76\u53d1\u73b0\u8b66\u5bdf\u5e76\u4e0d\u66f4\u6709\u53ef\u80fd\u67aa\u6740\u975e\u88d4\u7f8e\u56fd\u4eba\u3002\n\u201c\u63a8\u7279\u66b4\u5f92\u7684\u80dc\u5229\u53ef\u80fd\u4f1a\u5bf9\u6821\u56ed\u91cc\u7684\u5b66\u672f\u81ea\u7531\u4ea7\u751f\u5bd2\u8749\u6548\u5e94\uff0c\u201d\u5f90\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u544a\u8bc9\u201c\u5927\u5b66\u4fee\u590d\u201d(College Fix)\u3002\n\u5de5\u4f1a\u5229\u75286\u670810\u65e5\u4e0e\u9ed1\u4eba\u751f\u6d3b\u4e8b\u4ef6\u76f8\u5173\u7684#ShutDownStem\u65e5\u5e2e\u52a9\u9a71\u9010\u4ed6\u3002\u5728\u5de5\u4f1a\u548c\u5927\u5b66\u6821\u957f\u585e\u7f2a\u5c14\u00b7\u65af\u5766\u5229(Samuel Stanley)\u7684\u538b\u529b\u4e0b\uff0c\u5f90\u4e8e6\u670819\u65e5\u8f9e\u53bb\u4e86\u526f\u6821\u957f\u4e00\u804c\u3002\u7136\u800c\uff0c\u5f90\u5c06\u7ee7\u7eed\u62c5\u4efb\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u7684\u7269\u7406\u5b66\u6559\u6388\u3002\n\u4eca\u5929\uff0c\u4e3a\u4e86#ShutDownAcademy#ShutDownSTEM\uff0cGEU\u53ca\u5176STEM\u793e\u533a\u7684\u8054\u76df\u4f19\u4f34\u547c\u5401\u89e3\u9664Stephen Hsu\u5728@michiganstateu\u62c5\u4efb\u7814\u7a76\u548c\u7814\u7a76\u751f\u7814\u7a76\u90e8\u526f\u603b\u88c1\u7684\u804c\u52a1\u3002\n\u5de5\u4f1a\u8fd8\u4f20\u9605\u4e86\u4e00\u4efd\u53cd\u5bf9\u8bb8\u5fd7\u6c38\u7684\u8bf7\u613f\u4e66\uff0c\u6307\u63a7\u4ed6\u662f\u201c\u79d1\u5b66\u79cd\u65cf\u4e3b\u4e49\u201d\uff0c\u5438\u5f15\u4e86800\u591a\u4eba\u7b7e\u540d\u3002\u4e00\u5c01\u7531\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66500\u591a\u540d\u6559\u804c\u5458\u5de5\u7b7e\u540d\u7684\u516c\u5f00\u4fe1\u8ba4\u4e3a\uff0c\u5f90\u652f\u6301\u667a\u529b\u4e0e\u9057\u4f20\u5b66\u6709\u5173\u7684\u89c2\u70b9\u3002\n\u652f\u6301\u8bb8\u5fd7\u6c38\u7684\u53cd\u8bf7\u613f\u4e66\u5df2\u7ecf\u83b7\u5f97\u4e861000\u591a\u4e2a\u7b7e\u540d\uff0c\u5176\u4e2d\u5305\u62ec\u6765\u81ea\u5168\u56fd\u5404\u5730\u7684\u8bb8\u591a\u6559\u6388\u540c\u884c\u3002\n\u201c\u56e0\u4e3a\u6301\u6709\u6709\u4e89\u8bae\u7684\u89c2\u70b9\uff0c\u6216\u8be2\u95ee\u6709\u4e89\u8bae\u7684\u8bdd\u9898\uff0c\u6216\u53ea\u662f\u7b80\u5355\u5730\u4e0e\u6709\u4e89\u8bae\u7684\u4eba\u7269\u4ea4\u8c08\uff0c\u800c\u5c06\u8bb8\u5fd7\u6c38\u9664\u540d\u3002\u2026\u3002\u8fd9\u4e5f\u4f1a\u5f00\u521b\u4e00\u4e2a\u5371\u9669\u7684\u5148\u4f8b\uff0c\u4e0d\u7b26\u5408\u73b0\u4ee3\u5f00\u660e\u9ad8\u7b49\u6559\u80b2\u7684\u57fa\u672c\u539f\u5219\uff0c\u201c\u5b83\u5199\u9053\u3002\n\u5bf9\u65bc\u201c\u79d1\u5b66\u79cd\u65cf\u4e3b\u4e49\u201d\u7684\u8bf4\u6cd5\uff0c\u8bb8\u5fd7\u6c38\u5728\u4e2a\u4eba\u7f51\u7ad9\u4e0a\u4e88\u4ee5\u9a73\u65a5\uff0c\u4ed6\u8bf4\uff1a\u201c\u6211\u76f8\u4fe1\u57fa\u672c\u7684\u4eba\u6743\u548c\u4eba\u7684\u5c0a\u4e25\u662f\u6765\u81ea\u6211\u4eec\u5171\u540c\u7684\u4eba\u6027\uff0c\u800c\u4e0d\u662f\u80fd\u529b\u548c\u57fa\u56e0\u7684\u4e00\u81f4\u6027\u3002\u201d\n\u4f46\u5b66\u751f\u4f1a\u7684\u4e00\u4f4d\u9886\u5bfc\u8868\u793a\uff0c\u5bfc\u81f4\u8bb8\u5fd7\u6c38\u4e0b\u53f0\u7684\u56e0\u7d20\u6709\u5f88\u591a\uff0c\u5305\u62ec\u4e0d\u540c\u610f\u8bb8\u5fd7\u6c38\u7684\u4eba\u8ba4\u4e3a\uff0c\u4ed6\u4eec\u4e0d\u80fd\u8868\u8fbe\u81ea\u5df1\u7684\u62c5\u5fe7\uff0c\u56e0\u4e3a\u62c5\u5fc3\u906d\u5230\u5f3a\u70c8\u53cd\u5bf9\u3002\n\u7814\u7a76\u751f\u5de5\u4f1a\u526f\u4e3b\u5e2d\u963f\u5361\u897f\u4e9a\u00b7\u963f\u514b\u5c14\u65af\u5728\u63a5\u53d7The College Fix\u91c7\u8bbf\u65f6\u8868\u793a\uff1a\u201c\u4e00\u65e6\u6211\u4eec\u5f00\u59cb\u5bf9\u8bdd\uff0c\u5c31\u6709\u6570\u5341\u4eba\u5411\u6211\u4eec\u8bb2\u8ff0\u4e86\u4ed6\u4eec\u8bd5\u56fe\u76f4\u8a00\u4e0d\u8bb3\u7684\u4e2a\u4eba\u6545\u4e8b\uff0c\u4ee5\u53ca\u4ed6\u4eec\u81ea\u5df1\u4e0e\u5f90\u7684\u7ecf\u5386\uff0c\u6570\u767e\u4eba\u7b7e\u540d\u8981\u6c42\u4ed6\u4e0b\u53f0\uff0c\u201d\u7814\u7a76\u751f\u96c7\u5458\u5de5\u4f1a\u526f\u4e3b\u5e2d\u963f\u5361\u897f\u4e9a\u00b7\u963f\u514b\u5c14\u65af(Acacia Ackles)\u544a\u8bc9\u201c\u5b66\u9662\u4fee\u590d\u201d(College Fix)\u3002\n\u5de5\u4f1a\u8fd8\u6279\u8bc4\u4e86\u8bb8\u5fd7\u6c38\u63a8\u52a8\u7684\u4e00\u9879\u7814\u7a76\uff0c\u8be5\u7814\u7a76\u53d1\u73b0\u8b66\u5bdf\u67aa\u51fb\u4e8b\u4ef6\u4e2d\u6ca1\u6709\u79cd\u65cf\u504f\u89c1\u3002\n\u201c\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u9884\u6d4b\u9ed1\u4eba\u6216\u767d\u4eba\u516c\u6c11\u88ab\u67aa\u6740\u65f6\uff0c\u8b66\u5b98\u7684\u79cd\u65cf\u5e76\u4e0d\u91cd\u8981\uff0c\u201d\u8bb8\u5b97\u8861\u5f15\u7528\u7684\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u7684\u4e00\u9879\u7814\u7a76\u5f15\u8d77\u4e86\u8bb8\u591a\u4eba\u7684\u6124\u6012\u3002\n\u4ed6\u5728\u7ed9The College Fix\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\u5199\u9053\uff1a\u201cGeu\u58f0\u79f0\u6211\u662f\u79cd\u65cf\u4e3b\u4e49\u8005\uff0c\u56e0\u4e3a\u6211\u91c7\u8bbf\u4e86\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u5fc3\u7406\u5b66\u6559\u6388\u4e54\u00b7\u585e\u8428\u91cc\u5965\uff0c\u4ed6\u7814\u7a76\u8b66\u5bdf\u67aa\u51fb\u4e8b\u4ef6\u3002\u201d\u4f46\u585e\u8428\u91cc\u5965\u7684\u5de5\u4f5c(\u4ee5\u53ca\u5176\u4ed6\u4eba\u7684\u7c7b\u4f3c\u5de5\u4f5c\uff0c\u5982\u54c8\u4f5b\u5927\u5b66\u7684\u7f57\u5170\u00b7\u5f17\u83b1\u5c14)\u5bf9\u4e8e\u7406\u89e3\u81f4\u547d\u6b66\u529b\u548c\u5982\u4f55\u6539\u5584\u6cbb\u5b89\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\n\u585e\u8428\u91cc\u5965\u662f\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u5fc3\u7406\u5b66\u6559\u6388\uff0c\u4ed6\u4e0e\u4eba\u5408\u8457\u4e86\u8fd9\u98792019\u5e747\u6708\u53d1\u8868\u7684\u7814\u7a76\uff0c\u8be5\u7814\u7a76\u9a73\u65a5\u4e86\u8b66\u5bdf\u66f4\u6709\u53ef\u80fd\u5f00\u67aa\u6253\u6b7b\u975e\u88d4\u7f8e\u56fd\u4eba\u7684\u8bf4\u6cd5\u3002\u5f90\u5728\u4ed6\u7684\u535a\u5ba2\u4e0a\u5199\u9053\uff0c\u8fd9\u7bc7\u8bba\u6587\u7684\u7ed3\u8bba\u662f\u201c\u8b66\u5bdf\u67aa\u51fb\u4e8b\u4ef6\u4e2d\u6ca1\u6709\u666e\u904d\u7684\u79cd\u65cf\u504f\u89c1\u3002\u201dCesario\u6559\u6388\u5728\u5f90\u6559\u6388\u7684\u9886\u5bfc\u4e0b\uff0c\u83b7\u5f97\u4e86\u5c11\u91cf\u7684\u7814\u7a76\u7ecf\u8d39\u3002\nCesario\u5411\u534e\u5c14\u8857\u65e5\u62a5\u6307\u51fa\uff0c\u201c\u5728\u6211\u4eec\u505a\u8fd9\u9879\u7814\u7a76\u4e4b\u524d\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u6570\u636e\u4f1a\u662f\u4ec0\u4e48\uff0c\u7ed3\u679c\u4f1a\u662f\u4ec0\u4e48.\u201d\n\u585e\u8428\u91cc\u5965\u7684\u7814\u7a76\u88ab\u5f15\u7528\u57286\u67083\u65e5\u53d1\u8868\u7684\u4e00\u7bc7\u88ab\u5e7f\u6cdb\u5206\u4eab\u7684\u534e\u5c14\u8857\u65e5\u62a5\u4e13\u680f\u6587\u7ae0\u201c\u7cfb\u7edf\u6027\u8b66\u5bdf\u79cd\u65cf\u4e3b\u4e49\u7684\u795e\u8bdd\u201d\u4e2d\uff0c\u5f53\u65f6\u9488\u5bf9\u4e54\u6cbb\u00b7\u5f17\u6d1b\u4f0a\u5fb7(George Floyd)\u5728\u8b66\u65b9\u62d8\u7559\u671f\u95f4\u6b7b\u4ea1\u7684\u79cd\u65cf\u4e3b\u4e49\u6297\u8bae\u6d3b\u52a8\u53d7\u5230\u79cd\u65cf\u6307\u63a7\u3002\n\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u7684\u6c9f\u901a\u56e2\u961f\u57286\u67089\u65e5\u7248\u7684\u7535\u5b50\u90ae\u4ef6\u65f6\u4e8b\u901a\u8bafInside MSU\u4e2d\u5f3a\u8c03\u4e86\u8fd9\u4e00\u70b9\u3002\u7b2c\u4e8c\u5929\uff0c\u6bd5\u4e1a\u751f\u5de5\u4f1a\u8c34\u8d23\u4e86\u8bb8\u5fd7\u6c38\u3002\u201c\u534e\u5c14\u8857\u65e5\u62a5\u201d\u62a5\u9053\u8bf4\uff1a\u201c\u622a\u81f36\u670811\u65e5\uff0c\u65f6\u4e8b\u901a\u8baf\u7684\u7f16\u8f91\u5df2\u7ecf\u4e3a\u201d\u520a\u767b\u8fd9\u7bc7\u6587\u7ae0\u53ca\u5176\u9020\u6210\u7684\u4f24\u5bb3\u201c\u9053\u6b49\u3002\u201d\n\u7814\u7a76\u751f\u5de5\u4f1a\u544a\u8bc9Fix\uff0c\u7ba1\u7406\u4eba\u5458\u4e0d\u5e94\u8be5\u5206\u4eab\u4e0e\u5927\u5b66\u516c\u5f00\u58f0\u660e\u80cc\u9053\u800c\u9a70\u7684\u7814\u7a76\u3002\n\u963f\u514b\u5c14\u65af\u5728\u7ed9College Fix\u7684\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u5199\u9053\uff1a\u201c\u5de5\u4f1a\u7684\u7acb\u573a\u662f\uff0c\u6301\u6709\u76f8\u540c\u89c2\u70b9\u7684\u7ba1\u7406\u5458\u53cd\u5bf9\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u53d1\u5e03\u7684\u652f\u6301\u6297\u8bae\u6d3b\u52a8\u53ca\u5176\u6839\u672c\u539f\u56e0\u548c\u76ee\u6807\u7684\u58f0\u660e\u3002\u201d\n\u516d\u6708\u5341\u4e5d\u65e5\uff0c\u53f2\u4e39\u5229\u603b\u7edf\u53d1\u8868\u58f0\u660e\uff0c\u4e3a\u81ea\u5df1\u65bd\u538b\u8bb8\u5fd7\u6c38\u8f9e\u804c\u7684\u51b3\u5b9a\u8fa9\u62a4\u3002\n\u201c\u6211\u76f8\u4fe1\u8fd9\u662f\u6211\u4eec\u5927\u5b66\u7ee7\u7eed\u524d\u8fdb\u7684\u6700\u597d\u65b9\u5f0f\u3002\u601d\u60f3\u4ea4\u6d41\u5bf9\u9ad8\u7b49\u6559\u80b2\u81f3\u5173\u91cd\u8981\uff0c\u6211\u5b8c\u5168\u652f\u6301\u6211\u4eec\u7684\u6559\u804c\u5458\u5de5\u548c\u4ed6\u4eec\u7684\u5b66\u672f\u81ea\u7531\u6765\u89e3\u51b3\u6700\u56f0\u96be\u548c\u6700\u6709\u4e89\u8bae\u7684\u95ee\u9898\u3002\u201c\n\u201c\u4f46\u662f\uff0c\u5f53\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u7684\u9ad8\u7ea7\u7ba1\u7406\u4eba\u5458\u9009\u62e9\u5c31\u4efb\u4f55\u95ee\u9898\u53d1\u8868\u610f\u89c1\u65f6\uff0c\u4ed6\u4eec\u88ab\u89c6\u4e3a\u4ee3\u8868\u6574\u4e2a\u5927\u5b66\u53d1\u8a00\u3002\u4ed6\u4eec\u7684\u58f0\u660e\u4e0d\u5e94\u8ba9\u4eba\u6000\u7591\u4ed6\u4eec\u6216\u6211\u4eec\u5bf9\u6559\u804c\u5458\u5de5\u548c\u5b66\u751f\u53d6\u5f97\u6210\u529f\u7684\u627f\u8bfa\u3002\u201c", "note_en": "Union rep tells College Fix  that university should not share data that runs afoul of its support of BLM protests\n Michigan State University leaders have successfully pressured  Stephen Hsu to resign from his position as vice president of research and innovation after the  Graduate Employees Union launched a campaign to oust him from his role.\n This came after the union, which represents  teaching and research assistants, crawled through years of  blog posts and interviews Hsu had conducted and criticized him for sharing content on genetic differences among different races.\n But the main thrust to oust Hsu came because the professor touted Michigan State research that found police are not more likely to shoot African-Americans.\n \u201cThe victory of the Twitter mob will likely have a chilling effect on academic freedom on campus,\u201d Hsu told  The College Fix via email.\n The union had taken advantage of a Black Lives Matter-linked  #ShutDownStem day on June 10 to help oust him. Hsu stepped down from his vice president role on June 19 after pressure from the union and the president of the university,  Samuel Stanley. Hsu will stay on as a physics professor at Michigan State, however.\n Today for  #ShutDownAcademia  #ShutDownSTEM, the GEU and its coalition partners in the STEM community are calling for the removal of Stephen Hsu as VP of Research and Graduate Studies at  @michiganstateu.\n  The union also circulated a  petition against Hsu that accused him of \u201cscientific racism\u201d that garnered over 800 signers. An  open letter signed by more than 500 faculty and staff at Michigan State argued Hsu supports the idea that intelligence is linked to genetics.\n A  counter-petition in support of Hsu has gained more than 1,000 signers, including many fellow professors from across the country.\n \u201cTo remove Hsu for holding controversial views, or for inquiring about controversial topics, or for simply talking to controversial personalities \u2026 would also set a dangerous precedent, inconsistent with the fundamental principles of modern enlightened higher education,\u201d it read.\n As for the claim of \u201cscientific racism,\u201d Hsu rejected that on his personal website, stating \u201cI believe that basic human rights and human dignity derive from our shared humanity, not from uniformity in ability or genetic makeup.\u201d\n But a leader with the graduate student union said that there were multiple factors that led to Hsu\u2019s removal, including people who disagreed with Hsu not feeling they were able to state their concerns for fear of backlash.\n \u201cOnce we started the dialogue, dozens of people approached us with personal stories of their own attempts to speak out and their own experiences with Hsu, and hundreds signed on calling for his removal,\u201d Graduate Employees Union Vice President Acacia Ackles told  The College Fix.\n The union has also criticized Hsu\u2019s promotion of a study that found there is no racial bias in police shootings.\n \u201cWe found that the race of the officer doesn\u2019t matter when it comes to predicting whether black or white citizens are shot,\u201d  according to the Michigan State-based research Hsu had quoted that drew the ire of many.\n  \u201cThe GEU alleged that I am a racist because I interviewed MSU Psychology professor Joe Cesario, who studies police shootings,\u201d he wrote in an email to  The College Fix. \u201cBut Cesario\u2019s work (along with similar work by others, such as  Roland Fryer at Harvard) is essential to understanding deadly force and how to improve policing.\u201d\n Cesario is the Michigan State psychology professor who co-authored  the study published July 2019 that debunked the notion that police are more likely to shoot African-Americans. Hsu wrote on his blog that the paper  concluded \u201cthere is no widespread racial bias in police shooting.\u201d Professor Cesario received a small amount of funding for his research under Hsu\u2019s leadership.\n Cesario pointed out to   The Wall Street Journal \u201cwe had no idea what the data was going to be, what the outcome was going to be, before we did this study.\u201d\n Cesario\u2019s research had been cited in a widely shared   Wall Street Journal op-ed headlined \u201cThe Myth of Systemic Police Racism\u201d that was published June 3 amid racially charged protests against the death of George Floyd in police custody.\n The \u201cMSU communications team highlighted the mention in the June 9 edition of their email newsletter, InsideMSU. The next day, the Graduate Employees Union denounced Mr. Hsu. By June 11, editors of the newsletter had apologized \u2018for including the item and for the harm it caused,\u2019\u201d the  Journal reports.\n The graduate union told  The Fix that administrators should not share research that runs counter to public statements by the university.\n \u201cIt is the union\u2019s position that an administrator sharing such views is in opposition to MSU\u2019s statements released supporting the protests and their root cause and aim,\u201d Ackles wrote in an e-mail to  The College Fix.\n President Stanley released a  statement on June 19 where he defended his decision to pressure Hsu to resign.\n \u201cI believe this is what is best for our university to continue our progress forward. The exchange of ideas is essential to higher education, and I fully support our faculty and their academic freedom to address the most difficult and controversial issues.\u201d\n \u201cBut when senior administrators at MSU choose to speak out on any issue, they are viewed as speaking for the university as a whole. Their statements should not leave any room for doubt about their, or our, commitment to the success of faculty, staff and students,\u201d he added.", "posttime": "2020-07-02 15:40:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7814\u7a76,forced,\u8bb8\u5fd7\u6c38", "title": "\u7814\u7a76\u4eba\u5458\u88ab\u8feb\u8f9e\u804c\uff0c\u56e0\u4e3a\u7814\u7a76\u663e\u793a\u8b66\u5bdf\u67aa\u51fb\u4e8b\u4ef6\u6ca1\u6709\u504f\u89c1", "title_en": "Researcher forced to resign over study showing no bias in police shootings", "transed": 1, "url": "https://www.thecollegefix.com/scholar-forced-to-resign-over-study-that-found-police-shootings-not-biased-against-blacks/", "via": "", "real_tags": ["\u7814\u7a76", "forced", "\u8bb8\u5fd7\u6c38"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1009436, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e0d\u662f\u4ec0\u4e48\u79d8\u5bc6\uff0c\u6211\u60f3\u8981\u4e00\u4e2aWebAssembly\u7684Python\u5b9e\u73b0\u3002\u8fd9\u4e0d\u4ec5\u53ef\u4ee5\u8ba9Python\u8fdb\u5165\u6d4f\u89c8\u5668\uff0c\u800c\u4e14\u7531\u4e8eiOS\u548cAndroid\u90fd\u652f\u6301\u5c06JavaScript\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u8fd0\u884c\uff0c\u8fd9\u4e5f\u5c06\u4f7fPython\u8fdb\u5165\u79fb\u52a8\u8bbe\u5907\u3002\u8fd9\u4e00\u5207\u90fd\u8ba9\u6211\u5174\u594b\u3002\n\u4f46\u662f\u5f53\u6211\u60f3\u5230\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Python\u5b9e\u73b0\u8fd9\u9879\u8270\u5de8\u7684\u4efb\u52a1\u65f6\uff0c\u6211\u7684\u5927\u8111\u4e5f\u5f00\u59cb\u95ee\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1aPython\u5230\u5e95\u662f\u4ec0\u4e48\uff1f\u6211\u4eec\u4e0eCPython\u76f8\u5904\u7684\u65f6\u95f4\u592a\u957f\u4e86\uff0c\u6211\u6000\u7591\u6211\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u53ea\u662f\u7b80\u5355\u5730\u8ba4\u4e3aPython==CPython&#34\uff1b\u3002PyPy\u8bd5\u56fe\u505a\u5230\u5982\u6b64\u517c\u5bb9\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u4eec\u5c06\u5b9e\u73b0CPython\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\u57fa\u672c\u4e0a\uff0c\u6211\u6240\u77e5\u9053\u7684\u5927\u591a\u6570Python\u5b9e\u73b0\u90fd\u52aa\u529b\u901a\u8fc7CPython\u7684\u6d4b\u8bd5\u5957\u4ef6\uff0c\u5e76\u5c3d\u53ef\u80fd\u5730\u4e0eCPython\u517c\u5bb9\u3002\n\u8fd9\u4ee4\u4eba\u671b\u800c\u751f\u754f\u3002CPython\u5b9e\u73b0\u7684Python\u662f\u975e\u5e38\u52a8\u6001\u7684\uff0c\u5e76\u4e14\u516c\u5f00\u4e86\u8bb8\u591a\u53ea\u6709\u5728\u60a8\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4f7f\u7528\u89e3\u91ca\u5668\u5b9e\u73b0Python\u65f6\u624d\u6709\u610f\u4e49\u7684\u4e1c\u897f\u3002\u4f8b\u5982\uff0cPyPy\u6709\u4e00\u4e2a\u53ef\u4f9b\u4ed6\u4eecJIT\u4f7f\u7528\u7684\u57fa\u7ebf\u89e3\u91ca\u5668\uff0c\u4f46\u662f\u5728Python\u4e2d\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u8feb\u4f7fPyPy\u5173\u95edJIT\u800c\u575a\u6301\u4f7f\u7528\u5b57\u8282\u7801\u3002REPL\u672c\u8eab\u5c31\u4f7f\u4e8b\u60c5\u53d8\u5f97\u975e\u5e38\u52a8\u6001\uff0c\u56e0\u4e3a\u60a8\u8f93\u5165\u5230REPL\u4e2d\u7684\u6bcf\u4e00\u4ef6\u4e8b\u90fd\u662f\u7531\u89e3\u91ca\u5668\u5f53\u573a\u52a8\u6001\u89e3\u6790\u3001\u7f16\u8bd1\u548c\u6267\u884c\u7684\u3002\n\u8fd9\u8ba9\u6211\u5f00\u59cb\u601d\u8003Python\u5230\u5e95\u662f\u4ec0\u4e48\u7684\u95ee\u9898\u3002\u8bed\u8a00\u7684\u6838\u5fc3\u662f\u4ec0\u4e48\u4f7f\u5b83\u6210\u4e3a\u73b0\u5728\u7684\u6837\u5b50\uff1f\u6240\u6709Python\u5b9e\u73b0\u9700\u8981\u8986\u76d6\u4ec0\u4e48\u57fa\u7ebf\uff0c\u624d\u80fd\u771f\u6b63\u5c06\u81ea\u5df1\u79f0\u4e3a\u4eba\u4eec\u4ecd\u80fd\u8bc6\u522b\u7684Python\u5b9e\u73b0\uff1f\u6216\u8005\u4ece\u6211\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8981\u5c06Python\u76f4\u63a5\u7f16\u8bd1\u5230WebAssembly\u5e76\u4ecd\u7136\u88ab\u8ba4\u4e3a\u662fPython\u5b9e\u73b0\uff0c\u9700\u8981\u5b9e\u73b0\u591a\u5c11\uff1f\n\u771f\u6b63\u8ba9\u6211\u5f00\u59cb\u601d\u8003\u8fd9\u4e2a\u95ee\u9898\u7684\u662f\uff0c\u5f53\u6211\u5f00\u59cb\u8003\u8651\u5982\u4f55\u5c06Python\u7f16\u8bd1\u6210WebAssembly\u65f6\uff1f\u4e0d\u5b9e\u73b0\u53e6\u4e00\u4e2a\u89e3\u91ca\u5668\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ecePython\u6e90\u4ee3\u7801\u53d1\u51fa\u9759\u6001WebAssembly\uff0c\u5e76\u4e14\u4ecd\u7136\u5408\u7406\u5730\u5c06\u5176\u547d\u540d\u4e3aPython\u3002\n\u6211\u77e5\u9053\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u901a\u8fc7eval()\u6216Compile()\u8fdb\u884c\u52a8\u6001\u7f16\u8bd1\u53ef\u80fd\u5e76\u4e0d\u5bb9\u6613\uff0c\u56e0\u4e3aWebAssembly\u7684\u5b89\u5168\u6a21\u578b\u4f1a\u5728\u52a0\u8f7d\u65f6\u9a8c\u8bc1\u6a21\u5757\u3002\u8fd9\u8868\u660e\u5728\u5176\u4ed6\u4ee3\u7801\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\u6ca1\u6709\u88ab\u6784\u9020\u4e3a\u53ea\u8fd0\u884c\u4efb\u610f\u4ee3\u7801\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u5b9e\u73b0REPL\u53d8\u5f97\u68d8\u624b\u3002\n\u4f46\u8fd9\u8ba9\u6211\u601d\u8003\uff1aPython\u771f\u7684\u9700\u8981REPL\u5417\uff1f\u4e0d\u8981\u8bef\u4f1a\u6211\u7684\u610f\u601d\uff0c\u5b83\u975e\u5e38\u65b9\u4fbf\uff0c\u4f46\u662f\u5982\u679c\u4e00\u4e2a\u5b9e\u73b0\u6ca1\u6709REPL\uff0c\u5b83\u4f1a\u4e0d\u4f1a\u4e0d\u518d\u662fPython\u5462\uff1f\u6211\u4f1a\u4e89\u8fa9\u8bf4\uff0c\u6ca1\u6709REPL\u7684Python\u4ecd\u7136\u662fPython\uff0c\u53ea\u662f\u7f3a\u5c11\u4e00\u4e2a(\u6f5c\u5728\u7684\u5173\u952e)\u7279\u6027\u3002\n\u8fd9\u8ba9\u6211\u8d70\u4e0a\u4e86\u601d\u8003Python\u7684\u54ea\u4e9b\u90e8\u5206\u9700\u8981\u8003\u8651\u7684\u9053\u8def\uff1f\n\u6ca1\u6709\u5f53\u5730\u4eba\uff0c\u4f60\u80fd\u6d3b\u4e0b\u53bb\u5417()\uff1f\u80fd\u591f\u4efb\u610f\u5730\u5c06\u6240\u6709\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u53ca\u5176\u503c\u6536\u96c6\u5230\u5b57\u5178\u4e2d\u662f\u4e00\u4ef6\u975e\u5e38\u52a8\u6001\u7684\u4e8b\u60c5\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u50cfCPython\u8fd9\u6837\u7684\u89e3\u91ca\u5668\uff0c\u90a3\u4e48\u60a8\u53ea\u9700\u5c06\u5f53\u524d\u6267\u884c\u6846\u67b6\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u672c\u5730\u53d8\u91cf\u3002\u4f46\u5728\u7f16\u8bd1\u8bed\u8a00\u4e2d\uff0c\u8fd9\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u60a8\u5fc5\u987b\u77e5\u9053\u4f55\u65f6\u6536\u96c6\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\uff0c\u56e0\u4e3a\u5f53\u8c03\u7528locals()\u65f6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4e0d\u4e00\u5b9a\u53ea\u662f\u95f2\u7f6e\u3002\n\u6216\u8005\uff0c\u5982\u679c\u4eba\u4eec\u51cc\u9a7e\u4e8e\u5f53\u5730\u4eba()\u672c\u8eab\u5462\uff1f\u540c\u6837\uff0c\u8fd9\u5728CPython\u4e2d\u4e5f\u4e0d\u662f\u4ec0\u4e48\u5927\u95ee\u9898\uff0c\u56e0\u4e3a\u5185\u7f6e\u6a21\u5757\u6709\u4e00\u4e2a__dict__\uff0c\u60a8\u53ef\u4ee5\u8986\u76d6\u5b83\uff0c\u5e76\u4e14\u5b83\u4f1a\u7b80\u5355\u5730\u5411\u4e0b\u4f20\u64ad\u5230\u4efb\u4f55\u672a\u6765\u7684\u8c03\u7528\u3002\u4f46\u662f\u5728\u7f16\u8bd1\u8bed\u8a00\u4e2d\uff0c\u6267\u884c\u8fd9\u7c7b\u68c0\u6d4b\u9700\u8981\u4ed8\u51fa\u66f4\u591a\u7684\u52aa\u529b\uff0c\u800c\u4e14\u6267\u884c\u8fd9\u6837\u7684\u68c0\u67e5\u6700\u7ec8\u4f1a\u8017\u8d39\u5927\u91cf\u7684\u6027\u80fd\u3002\nsys.settrace()\u600e\u4e48\u6837\u5462\uff1f\u5b83\u5b9e\u9645\u4e0a\u89e6\u53d1\u6bcf\u4e2a\u5b57\u8282\u7801\u7684\u56de\u8c03\uff0c\u5982\u679c\u7f16\u8bd1\u4ee3\u7801\uff0c\u8fd9\u5e76\u4e0d\u662f\u5f88\u6709\u6548\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u662f\u5426\u5728\u6bcf\u884c\u4e4b\u540e\u8bbe\u7f6e\u4e86\u8ddf\u8e2a\u51fd\u6570\u6765\u4f2a\u9020\u5b83\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5927\u591a\u6570\u65f6\u5019\u4e0d\u8bbe\u7f6e\u8fd9\u6837\u7684\u94a9\u5b50\uff0c\u8fd9\u4f3c\u4e4e\u6709\u70b9\u8fc7\u4e86(\u4e0d\u8fc7\uff0c\u5b83\u53ef\u80fd\u662f\u8981\u5728\u8fd9\u79cd\u652f\u6301\u4e0b\u7f16\u8bd1\u7684\u7f16\u8bd1\u5668\u6807\u5fd7)\u3002\n\u90a3\u4e48sys._getframe()\u600e\u4e48\u6837\u5462\uff1f\u7f16\u8bd1\u540e\u7684\u8bed\u8a00\u4e0d\u4e00\u5b9a\u4f1a\u76f4\u63a5\u8bbf\u95ee\u6267\u884c\u6846\u67b6\uff0c\u56e0\u6b64\u60a8\u4f1a\u8d39\u5fc3\u6a21\u62df\u8fd9\u4e00\u70b9\u5417\uff1f\u7531\u4e8e\u4efb\u4f55\u51fd\u6570\u90fd\u53ef\u4ee5\u8bf7\u6c42\u6267\u884c\u5e27\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u59cb\u7ec8\u505a\u597d\u6309\u9700\u63d0\u4f9b\u6267\u884c\u5e27\u7684\u51c6\u5907\u3002\n\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0cPython\u4e2d\u6709\u5f88\u591a\u4e1c\u897f\u4f7f\u5f97\u7f16\u8bd1\u53d8\u5f97\u56f0\u96be(\u56e0\u6b64\uff0cNuitka\u63a5\u53d7\u8fd9\u4e00\u6311\u6218\u7684\u80fd\u529b\u66f4\u5f3a)\u3002\u4f46\u662f\u6211\u613f\u610f\u6253\u8d4c\u6211\u4e0a\u9762\u63d0\u5230\u7684\u4e1c\u897f\u4f6099.9%\u7684\u65f6\u95f4\u90fd\u4e0d\u7528\uff0c\u6240\u4ee5\u5982\u679c\u4e00\u4e2a\u5b9e\u73b0\u9057\u6f0f\u4e86\u5b83\u4eec\uff0c\u5b83\u8fd8\u80fd\u88ab\u8ba4\u4e3a\u662fPython\u5417\uff1f\n\u8fd9\u4e2a\u95ee\u9898\u6211\u6ca1\u6709\u5f88\u597d\u7684\u7b54\u6848\u3002\u4f46\u5b83\u7684\u7b54\u6848\u51b3\u5b9a\u4e86\u5b9e\u73b0Python\u6709\u591a\u96be\uff0c\u4ee5\u53ca\u5b83\u4e0e\u73b0\u6709\u8f6f\u4ef6\u7684\u517c\u5bb9\u6027\u6709\u591a\u5f3a\u3002\u6211\u8981\u8bf4\u7684\u662f\uff0c\u6211\u8ba4\u4e3aWebAssembly\u4e0d\u9700\u8981\u652f\u6301\u5927\u91cf\u7684Python\u8f6f\u4ef6\u5c31\u80fd\u53d1\u6325\u4f5c\u7528\u3002WebAssembly\u53ef\u4ee5\u8bbf\u95ee\u5176\u4ed6\u8bed\u8a00\u751f\u6001\u7cfb\u7edf\uff0c\u5982Rust\u548cJavaScript\uff0c\u56e0\u6b64\u4f7f\u7528\u5176\u4ed6\u8bed\u8a00\u5b9e\u73b0\u60a8\u9700\u8981\u7684\u5185\u5bb9\u7684\u53ef\u80fd\u6027\u7edd\u5bf9\u9ad8\u4e8e\u96f6\u3002\n\u5f00\u53d1\u4e00\u4e2a\u7f16\u8bd1\u5668\u5c06Python\u4ee3\u7801\u76f4\u63a5\u8f6c\u6362\u4e3aWebAssembly\u5e76\u727a\u7272\u4e00\u4e9b\u517c\u5bb9\u6027\u6765\u63d0\u9ad8\u6027\u80fd\u53ef\u80fd\u662f\u6709\u610f\u4e49\u7684\u3002\u5f00\u53d1\u4e00\u4e2a\u9488\u5bf9WebAssembly\u8bbe\u8ba1\u4f46\u4e0e\u73b0\u6709\u4ee3\u7801\u4fdd\u6301\u5f88\u597d\u517c\u5bb9\u6027\u7684\u89e3\u91ca\u5668\u53ef\u80fd\u662f\u6709\u610f\u4e49\u7684\u3002\u5728\u4ed6\u4eec\u7684WebAssembly\u5de5\u4f5c\u4e2d\u7b80\u5355\u5730\u652f\u6301RustPython\u53ef\u80fd\u662f\u6709\u610f\u4e49\u7684\u3002\u4e5f\u8bb8\u76ae\u8fea\u5fb7\u4f1a\u5e26\u6211\u4eec\u53bb\u90a3\u91cc\u3002\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u4e9b\u53ef\u80fd\u6027\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u672c\u8d28\u4e0a\u90fd\u662f\u9519\u8bef\u7684\uff0c\u5b83\u53ef\u80fd\u53ea\u4f1a\u5f52\u7ed3\u4e3a\u54ea\u79cd\u53ef\u80fd\u6027\u8db3\u4ee5\u6fc0\u53d1\u4eba\u4eec\u7684\u5174\u8da3\uff0c\u4f7f\u5176\u5bf9\u4ed6\u4eba\u6709\u7528\u3002", "note_en": "It&#39;s no secret that I want a Python implementation for  WebAssembly. It would not only get Python into the browser, but with the fact that both  iOS and  Android support running JavaScript as part of an app it would also get Python on to mobile. That all excites me.\n But when thinking about the daunting task of creating a new implementation of Python, my brain also began asking the question of what exactly  is Python? We have \u00a0lived with  CPython for so long that I suspect most of us simply think that &#34;Python == CPython&#34;.  PyPy tries to be so  compatible that they will implement implementation details of CPython. Basically most implementations of Python that I know of strive to pass CPython&#39;s test suite and to be as compatible with CPython as possible.\n That&#39;s daunting. Python as implemented by CPython is very dynamic and exposes many things that only make sense if you implement Python using an interpreter somehow. For instance, PyPy has a baseline interpreter that they JIT from, but there are many things you can use in Python which force PyPy to turn off the JIT and stick with bytecode. The REPL alone makes things very dynamic as everything you enter into the REPL is dynamically parsed, compiled, and executed by the interpreter right then and there.\n That has led me to contemplate the question of what exactly  is Python? What is the core of the language that makes it what it is? What baseline would all Python implementations need to cover in order to truly be able to call themselves an implementation of Python that people would still recognize? Or from my perspective, how much would one have to implement to compile Python directly to WebAssembly and still be considered a Python implementation?\n  The thing that really made me start thinking about this is when I began contemplating what it would take to compile Python down to WebAssembly? Not \u00a0implement another interpreter, but actually emit static WebAssembly from Python source and still reasonably call it &#34;Python&#34;.\n One thing I knew is dynamic compilation via  eval() or  compile() might not be easily doable as  WebAssembly&#39;s security model validates modules at load time. That would suggest there \u00a0isn&#39;t structured to run just arbitrary code in other code&#39;s memory space which might make implementing a REPL tricky.\n But that got me thinking: does Python really  need a REPL? Don&#39;t get me wrong, it&#39;s extremely handy, but if an implementation didn&#39;t have a REPL, would it no longer  be Python? I would argue a REPL-less Python would still be Python, it would just be lacking a (potentially key) feature.\n This led me down the road of thinking which parts of Python are required to be considered &#34;Python&#34;?\n Could you live without   locals()? Its a very dynamic thing to be able to arbitrarily gather all defined local variables and their values into a dictionary. If you&#39;re in an intepreter like CPython you just get the locals by pulling together some things from the current execution frame. But in a compiled language this takes a lot more work as you have to know when to gather all of this information as it isn&#39;t necessarily just lying around when one calls  locals().\n Or how about people overriding  locals() itself? Once again this isn&#39;t a big deal in CPython as the  builtins module \u00a0has a  __dict__ which you can override and it will simply propagate down to any future calls. But in a compiled language it takes way more effort to do this sort of detection and it ends up costing performance to do such a check.\n What about   sys.settrace()? It actually triggers the callback per bytecode and that doesn&#39;t quite work if the code is compiled. You can fake it by checking if a trace function is set after every line, but that seems a bit much when you don&#39;t set such a hook most of the time (it could potentially be a compiler flag to compile in such support, though).\n And how about   sys._getframe()? Compiled languages do not necessarily end up with direct access to the execution frame, so do you bother simulating this? Since the execution frames could be requested by any function you would need to always be prepared to supply the execution frames on-demand.\n As you can see there is a lot of stuff in Python where it makes compilation difficult (and thus more power to  Nuitka for taking this challenge on). But I&#39;m willing to bet the stuff I mentioned above you don&#39;t use 99.9% of the time, so if an implementation left them out could it still be considered &#34;Python&#34;?\n  I don&#39;t have a good answer to this question. But its answer dictates how hard it is to implement Python and how compatible it would be with preexisting software. I will say that I think WebAssembly doesn&#39;t need to support the vast amount of Python software out there to be useful. WebAssembly has access to other language ecosystems like Rust and JavaScript, so the possibility of having something you need implemented in another language that you can use else is definitely above zero.\n  It might make sense to develop a compiler that translates Python code directly to WebAssembly and sacrifice some compatibility for performance. It might make sense to develop an interpreter that targets WebAssembly&#39;s design but maintains a lot of compatibility with preexisting code. It might make sense to simply support  RustPython in their WebAssembly endeavours. Maybe  Pyodide will get us there. I don&#39;t think any of these possibilities are inherently wrong and it will probably just come down to whichever one sparks people&#39;s interest enough to see it to the point of being useful to others.", "posttime": "2020-07-02 15:20:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,programming,\u7f16\u7a0b,\u7f16\u7a0b\u8bed\u8a00", "title": "Python\u7f16\u7a0b\u8bed\u8a00\u7684\u6838\u5fc3\u662f\u4ec0\u4e48\uff1f", "title_en": "What is the core of the Python programming language?", "transed": 1, "url": "https://snarky.ca/what-is-the-core-of-the-python-programming-language/", "via": "", "real_tags": ["python", "\u7f16\u7a0b", "\u7f16\u7a0b\u8bed\u8a00"]}]