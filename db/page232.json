[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1033610, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Nitro Enclaves\u4e3a\u5b89\u5168\u5904\u7406\u975e\u5e38\u654f\u611f\u7684\u6570\u636e\u63d0\u4f9b\u9694\u79bb\u7684\u8ba1\u7b97\u73af\u5883\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Nitro Enclaves\u6784\u5efa\u4e00\u4e2a\u6781\u5176\u5b89\u5168\u7684\u5bc6\u7801\u5b58\u50a8\u673a\u5236\u3002\n\u5728\u53d1\u8868\u4e86\u6211\u6700\u8fd1\u53d1\u8868\u7684\u5173\u4e8eEC2\u785d\u57fa\u98de\u5730\u7684\u6587\u7ae0(\u7b2c\u4e00\u90e8\u5206\uff0c\u7b2c\u4e8c\u90e8\u5206)\u540e\uff0c\u6709\u4e9b\u4e8b\u60c5\u56f0\u6270\u7740\u6211\u3002\u6211\u82b1\u4e86\u51e0\u5929\u65f6\u95f4\u624d\u610f\u8bc6\u5230\u8fd9\u662f\u4ec0\u4e48\uff1a\u9664\u4e86ACM\u53c2\u8003\u67b6\u6784\uff0c\u6211\u60f3\u4e0d\u51faNitro Enclaves\u7684\u6709\u6548\u7528\u4f8b\u3002\u8fd9\u8ba9\u6211\u4e0d\u7981\u8981\u95ee--\u785d\u57fa\u98de\u5730\u662f\u5728\u5bfb\u627e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f\n\u51e0\u4e2a\u5c0f\u65f6\u7684\u8349\u7ed8\u548c\u601d\u8003\u7ed9\u6211\u7559\u4e0b\u4e86\u4e00\u4e9b\u4e0d\u53ef\u884c\u6216\u4ee4\u4eba\u8d39\u89e3\u7684\u5b9e\u73b0\u60f3\u6cd5\u3002\u4f46\u540e\u6765\u6211\u7a81\u7136\u60f3\u5230\u3002\u785d\u57fa\u98de\u5730\u53ef\u7528\u4e8e\u63d0\u4f9b\u8d85\u7ea7\u5b89\u5168\u7684\u5bc6\u7801\u5b58\u50a8\u673a\u5236\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u6700\u540e\uff0c\u6211\u4eec\u5c06\u6784\u5efa\u4e00\u4e2aNitro Enclave\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u53ef\u4ee5\u4fdd\u62a4\u7528\u6237\u5bc6\u7801\uff0c\u5373\u4f7f\u653b\u51fb\u8005\u5b8c\u5168\u63a7\u5236\u4e86\u5e94\u7528\u7a0b\u5e8f\u670d\u52a1\u5668\u548c\u6570\u636e\u5e93\u3002\u8fd9\u4e2aNitro Enclave\u5e94\u7528\u7a0b\u5e8f\u88ab\u79f0\u4e3aNitroPepper\u3002\n\u672c\u6587\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\u3002\u7b2c\u4e00\u8282\u4ecb\u7ecd\u4e86\u5bc6\u7801\u5b58\u50a8\u673a\u5236\uff0c\u5e76\u89e3\u91ca\u4e86NitroPepper\u89e3\u51b3\u7684\u95ee\u9898\u3002\u7b2c2\u8282\u4ecb\u7ecd\u4e86NitroPepper\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\u5728\u7b2c3\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5728\u60a8\u81ea\u5df1\u7684EC2\u5b9e\u4f8b\u4e0a\u8fd0\u884cNitroPepper\u7684\u6240\u6709\u6b65\u9aa4\u3002\nNitroPepper\u67b6\u6784\u9700\u8981\u51e0\u4e2a\u7ec4\u4ef6\uff0c\u6211\u4eec\u5c06\u5728\u7b2c2\u8282\u6df1\u5165\u8ba8\u8bba\u8fd9\u4e9b\u7ec4\u4ef6\u3002\u6211\u4eec\u4f7f\u7528\u7684\u7ec4\u4ef6\u5305\u62ec\uff1a\n\u4e00\u4e2a\u7b80\u5355\u7684Python Flask\u524d\u7aef(GitHub)\uff0c\u5b83\u516c\u5f00\u4e86\u4e24\u4e2aREST API\u65b9\u6cd5\uff1anew_user\u548clogin\u3002\u6b64\u524d\u7aef\u4ec5\u7528\u4e8e\u6f14\u793a\u76ee\u7684\u3002\nAWS Nitro\u5305\u542b\u4f7f\u7528Python\u63a5\u53e3(GitHub)\u6269\u5c55\u7684NSM API\u3002\u6b64\u63a5\u53e3\u63d0\u4f9bNitroPepper\u548cNitro\u5b89\u5168\u6a21\u5757(NSM)\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\n\u4efb\u4f55\u4f7f\u7528\u7528\u6237\u767b\u5f55\u7684\u7cfb\u7edf\u90fd\u9700\u8981\u67d0\u79cd\u65b9\u5f0f\u6765\u5b58\u50a8\u7528\u6237\u5bc6\u7801\u3002\u51e0\u5341\u5e74\u524d\uff0c\u4ee5\u7eaf\u6587\u672c\u5b58\u50a8\u5bc6\u7801\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4f46\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u6709\u4ef7\u503c\u7684\u6570\u636e\u88ab\u5b58\u50a8\u5728\u7f51\u4e0a\uff0c\u4eba\u4eec\u5f00\u59cb\u653b\u51fb\u6570\u636e\u5e93\u5e76\u63d0\u53d6\u5176\u4e2d\u7684\u5185\u5bb9\u3002\u4e3a\u4e86\u9632\u6b62\u5bc6\u7801\u6cc4\u9732\uff0c\u4eba\u4eec\u9010\u6e10\u5f00\u53d1\u51fa\u66f4\u590d\u6742\u7684\u5bc6\u7801\u5b58\u50a8\u65b9\u6cd5\u3002\u5728\u8fd9\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u56de\u987e\u5bc6\u7801\u5b58\u50a8\u7684\u5386\u53f2\u3002\n\u5982\u679c\u4f60\u5df2\u7ecf\u719f\u6089\u6563\u5217\u7b97\u6cd5\u3001\u76d0\u548c\u80e1\u6912\uff0c\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u8282\uff0c\u76f4\u63a5\u8df3\u5230\u201c\u4e00\u4e2a\u72ec\u7279\u7684\u80e1\u6912\u7528\u6237\u7684\u6848\u4f8b\u201d\u8fd9\u4e00\u6bb5\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u5728\u4e0b\u9762\u7684\u90e8\u5206\u4e2d\uff0c\u6211\u4f7f\u7528MD5\u4f5c\u4e3a\u6563\u5217\u673a\u5236\u7684\u793a\u4f8b\u3002\u4f17\u6240\u5468\u77e5\uff0cMD5\u975e\u5e38\u4e0d\u5b89\u5168\uff0c\u60a8\u6c38\u8fdc\u4e0d\u5e94\u8be5\u5c06\u5176\u7528\u4e8e\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u5bc6\u7801\u6563\u5217\u3002\u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528SHA-512\u3001SHA3\u6216\u5176\u4ed6\u9ad8\u5ea6\u5b89\u5168\u7684\u7b97\u6cd5\u3002\u6211\u5728\u672c\u6587\u4e2d\u4f7f\u7528MD5\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5b83\u7684\u8f93\u51fa\u7b80\u6d01\u7f8e\u89c2\uff0c\u4fbf\u4e8e\u9605\u8bfb\u3002\n\u5728\u51e0\u4e4e\u88ab\u9057\u5fd8\u7684\u8fc7\u53bb\uff0c\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u8fde\u63a5\u5230\u4e92\u8054\u7f51\uff0c\u6570\u636e\u5e93\u4ece\u672a\u53d7\u5230\u653b\u51fb\uff0c\u5bc6\u7801\u53ef\u4ee5\u660e\u6587\u5b58\u50a8\u3002\u7528\u6237\u8868\u4e2d\u7684\u51e0\u884c\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n\u8981\u767b\u5f55\u5230\u6b64\u7cfb\u7edf\uff0c\u7528\u6237\u9700\u8981\u5411\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5176\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\u5e94\u7528\u7a0b\u5e8f\u68c0\u67e5\u6570\u636e\u5e93\u4e2d\u662f\u5426\u5b58\u5728\u7528\u6237\u540d/\u5bc6\u7801\u7ec4\u5408\u3002\u5982\u679c\u627e\u5230\u5bc6\u7801\uff0c\u5219\u5141\u8bb8\u7528\u6237\u8fdb\u5165\u3002\n\u968f\u7740\u7cfb\u7edf\u7684\u8fde\u901a\u6027\u548c\u53ef\u8bbf\u95ee\u6027\u8d8a\u6765\u8d8a\u9ad8\uff0c\u6570\u636e\u5e93\u9ed1\u5ba2\u548c\u8f6c\u50a8\u4e5f\u53d8\u5f97\u66f4\u52a0\u5e38\u89c1\u3002\u5f53\u653b\u51fb\u8005\u4f7f\u7528\u4ee5\u7eaf\u6587\u672c\u5f62\u5f0f\u5b58\u50a8\u7684\u5bc6\u7801\u83b7\u5f97\u5bf9\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u6743\u9650\u65f6\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b64\u4fe1\u606f\u4ee5\u4efb\u4f55\u7528\u6237\u8eab\u4efd\u767b\u5f55\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u7528\u6237\u901a\u5e38\u4f1a\u91cd\u590d\u4f7f\u7528\u5bc6\u7801\u3002\u8fd9\u610f\u5473\u7740\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u5728\u4e0d\u5b89\u5168\u7684\u7ad9\u70b9A\u627e\u5230\u7684\u5bc6\u7801\u5c1d\u8bd5\u767b\u5f55\u5230\u53e6\u4e00\u4e2a\u7ad9\u70b9B\uff0c\u5373\u4f7f\u8be5\u7ad9\u70b9\u786e\u5b9e\u5b89\u5168\u5730\u5b58\u50a8\u4e86\u4ed6\u4eec\u7684\u5bc6\u7801\u3002\n\u63d0\u9ad8\u5bc6\u7801\u5b58\u50a8\u5b89\u5168\u6027\u7684\u7b2c\u4e00\u4e2a\u53d1\u5c55\u662f\u6563\u5217\u3002\u50cfMD5\u6216SHA\u8fd9\u6837\u7684\u6563\u5217\u7b97\u6cd5\u63a5\u53d7\u4e00\u4e2a\u8f93\u5165(\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f\u5bc6\u7801)\uff0c\u5e76\u4e3a\u8be5\u8f93\u5165\u751f\u6210\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u3002\u8be5\u7b97\u6cd5\u662f\u4e00\u79cd\u6570\u5b66\u8fd0\u7b97\uff0c\u5b83\u5c06\u59cb\u7ec8\u4e3a\u4efb\u4f55\u7ed9\u5b9a\u7684\u8f93\u5165\u751f\u6210\u76f8\u540c\u7684\u8f93\u51fa\u3002\u4f8b\u5982\uff1a\n\u6563\u5217\u51fd\u6570\u7684\u672c\u8d28\u662f\u5b83\u662f\u5355\u5411\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u53ef\u4ee5\u4ece\u5bc6\u7801\u751f\u6210\u6563\u5217\uff0c\u4f46\u4e0d\u80fd\u4ece\u5176\u6563\u5217\u751f\u6210\u5bc6\u7801\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6709\u4eba\u80fd\u591f\u8bbf\u95ee\u6563\u5217bd2bf17a10bc97a50bfb551aa2de9e76\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u77e5\u9053\u6e90\u5bc6\u7801\u662fSUPER_Secret1\u3002\n\u57fa\u4e8e\u6b64\u6280\u672f\u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u4e0d\u518d\u5b58\u50a8\u7eaf\u6587\u672c\u5bc6\u7801\uff0c\u800c\u662f\u5b58\u50a8\u6563\u5217\u7248\u672c\uff1a\n\u5f53\u7528\u6237\u767b\u5f55\u5230\u6b64\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u4ed6\u4eec\u4f1a\u63d0\u4f9b\u7528\u6237\u540d\u548c\u660e\u6587\u5bc6\u7801\u3002\u5e94\u7528\u7a0b\u5e8f\u5728\u6bcf\u6b21\u767b\u5f55\u5c1d\u8bd5\u65f6\u90fd\u4f1a\u5bf9\u5bc6\u7801\u8fdb\u884c\u6563\u5217\uff0c\u5e76\u5c06\u7ed3\u679c\u4e0e\u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u7684\u6563\u5217\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u5b83\u4eec\u5339\u914d\uff0c\u5219\u5141\u8bb8\u7528\u6237\u8fdb\u5165\u3002\n\u4f7f\u7528\u6b64\u89e3\u51b3\u65b9\u6848\u65f6\uff0c\u5bc6\u7801\u4e0d\u518d\u4ee5\u7eaf\u6587\u672c\u5f62\u5f0f\u5b58\u50a8\u3002\u7136\u800c\uff0c\u4ecd\u7136\u5b58\u5728\u660e\u663e\u7684\u5f31\u70b9\u3002\u9996\u5148\uff0c\u4e00\u4e9b\u7b97\u6cd5\uff0c\u5982MD5\u548cSHA1\uff0c\u5df2\u7ecf\u88ab\u201c\u7834\u574f\u201d\u4e86\u3002\u5f53\u7b97\u6cd5\u88ab\u7834\u574f\u65f6\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u72ec\u7acb\u5730\u751f\u6210\u5bfc\u81f4\u7ed9\u5b9a\u6563\u5217\u7684\u8f93\u5165\u5b57\u7b26\u4e32\u3002\u7136\u540e\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b64\u8f93\u5165\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5bc6\u7801\u3002\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\u7ed9\u5b9a\u5bc6\u7801\u7684\u6563\u5217\u503c\u603b\u662f\u76f8\u540c\u7684\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u4e8b\u5b9e\uff0c\u4f7f\u7528\u5e38\u89c1\u8f93\u5165\u548c\u6a21\u5f0f\u7684\u6563\u5217\u6784\u5efa\u8bcd\u5178\u6216\u5f69\u8679\u8868\u3002\u5f53\u4ed6\u4eec\u8bbf\u95ee\u6563\u5217\u6570\u636e\u5e93\u65f6\uff0c\u4ed6\u4eec\u53ea\u9700\u8981\u5728\u5b57\u5178\u4e2d\u67e5\u627e\u5b83\u4eec\u6765\u786e\u5b9a\u539f\u59cb\u5bc6\u7801\u3002\n\u4e0b\u4e00\u4ee3\u5bc6\u7801\u5b89\u5168\u901a\u8fc7\u6dfb\u52a0\u76d0\u6765\u89e3\u51b3\u6563\u5217\u95ee\u9898\u3002\u4e3a\u4ec0\u4e48\u8fd9\u53eb\u76d0\uff1f\u56e0\u4e3a\u76d0\u548c\u54c8\u5e0c\u8089\u5f88\u914d\u3002\u4f7f\u7528SALT\u65f6\uff0c\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u6563\u5217\u7b97\u6cd5\uff0c\u4f46\u4e0d\u662f\u53ea\u5bf9\u660e\u6587\u5bc6\u7801\u8fdb\u884c\u6563\u5217\uff0c\u800c\u662f\u5728\u8f93\u5165\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\u3002\u4e0b\u9762\u662f\u51e0\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\n\u6b64\u76d0\u4e0e\u7528\u6237\u4fe1\u606f\u4e00\u8d77\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u3002\u8bf7\u6ce8\u610f\uff0cSALT\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5177\u6709\u66f4\u5927\u5b57\u7b26\u96c6\u7684\u66f4\u957f\u7684\u5b57\u7b26\u4e32\u3002\n\u5728\u53e3\u4ee4\u4e2d\u6dfb\u52a0\u76d0\u540e\uff0c\u4e24\u4e2a\u76f8\u540c\u7684\u53e3\u4ee4(SUPER_Secret1)\u53d8\u5f97\u552f\u4e00(SUPER_Secret1-123455\u548cSUPER_Secret1-669911)\uff0c\u8fd9\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u6563\u5217\u3002\n\u767b\u5f55\u5230\u6b64\u7cfb\u7edf\u65f6\uff0c\u7528\u6237\u4ecd\u63d0\u4f9b\u5176\u660e\u6587\u5bc6\u7801\u3002\u7136\u540e\uff0c\u670d\u52a1\u5668\u4ece\u6570\u636e\u5e93\u4e2d\u68c0\u7d22SALT\u5e76\u6267\u884c\u6563\u5217\u51fd\u6570\uff1aMD5([Password]-[SALT])\u3002\u5f53\u751f\u6210\u7684\u6563\u5217\u4e0e\u5b58\u50a8\u7684\u5bc6\u7801\u6563\u5217\u5339\u914d\u65f6\uff0c\u5141\u8bb8\u7528\u6237\u767b\u5f55\u3002\n\u968f\u7740\u76d0\u7684\u52a0\u5165\uff0c\u5b57\u5178\u548c\u5f69\u8679\u8868\u90fd\u53d8\u5f97\u6beb\u65e0\u7528\u5904\u4e86\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5373\u4f7f\u662f\u8fd9\u79cd\u89e3\u51b3\u65b9\u6848\u5728\u8bb8\u591a\u7528\u4f8b\u4e2d\u4e5f\u4e0d\u591f\u5f3a\u5927\u3002\n\u5728\u4e0a\u8ff0\u89e3\u51b3\u65b9\u6848\u4e2d\uff0c\u6240\u6709\u4fe1\u606f\u90fd\u5b58\u50a8\u5728\u5355\u4e2a\u6e90\u4e2d--\u6570\u636e\u5e93\u3002\u5982\u679c\u653b\u51fb\u8005\u6709\u6743\u8bbf\u95ee\u6570\u636e\u5e93\u548c\u5df2\u77e5\u6761\u76ee(\u4f8b\u5982\uff0c\u4ed6\u4eec\u81ea\u5df1\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801)\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u66b4\u529b\u7834\u89e3\u6765\u68c0\u7d22\u539f\u59cb\u503c\u3002\u8fd9\u53ef\u80fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u5904\u7406\u80fd\u529b\u6bcf\u5e74\u90fd\u4f1a\u53d8\u5f97\u66f4\u4fbf\u5b9c\uff0c\u800c\u4e14\u653f\u5e9c\u53ef\u4ee5\u4f7f\u7528\u8d85\u7ea7\u8ba1\u7b97\u673a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u7834\u89e3\u5bc6\u7801\u6bd4\u4f60\u60f3\u8c61\u7684\u66f4\u5bb9\u6613\u3002\n\u516c\u5e73\u5730\u8bf4\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u5177\u6709\u9002\u5f53\u76d0\u6e0d\u5bc6\u7801\u7684\u5b58\u50a8\u673a\u5236\u5c06\u662f\u8db3\u591f\u5b89\u5168\u7684\u3002\u4f46\u5728\u533b\u7597\u3001\u91d1\u878d\u6216\u653f\u5e9c\u4f7f\u7528\u6848\u4f8b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u8fd8\u4e0d\u591f\u3002\u8fd9\u5c31\u662f\u6dfb\u52a0\u57fa\u4e8e\u670d\u52a1\u5668\u7684Pepper\u7684\u7528\u6b66\u4e4b\u5730\u3002\u4e3a\u4ec0\u4e48\u53eb\u80e1\u6912\u2026\uff1f\uff1f\u597d\u5427\uff0c\u4f60\u660e\u767d\u6211\u7684\u610f\u601d\u4e86\u3002\n\u5171\u4eab\u79d8\u5bc6\u8fa3\u6912\u5efa\u7acb\u5728\u76d0\u7684\u539f\u7406\u4e4b\u4e0a\uff0c\u4f46\u5b83\u4e0d\u662f\u5c06\u503c\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u800c\u662f\u5b58\u50a8\u5728\u670d\u52a1\u5668\u6587\u4ef6\u7cfb\u7edf\u6216\u5176\u4ed6\u975e\u6570\u636e\u5e93\u7cfb\u7edf(\u5982AWS Secrets Manager)\u4e0a\u3002\u4e3a\u4e86\u80fd\u591f\u89e3\u5bc6\u6570\u636e\u5e93\u4e2d\u7684\u5bc6\u7801\uff0c\u653b\u51fb\u8005\u9700\u8981\u540c\u65f6\u8bbf\u95ee\u6570\u636e\u5e93\u548c\u8f85\u52a9\u5b58\u50a8\u7cfb\u7edf\uff0c\u8fd9\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u5b89\u5168\u6027\u3002\u73b0\u5728\uff0c\u7b80\u5355\u7684SQL\u6ce8\u5165\u653b\u51fb\u6216\u5bf9\u6570\u636e\u5e93\u5907\u4efd\u7684\u8bbf\u95ee\u5df2\u4e0d\u8db3\u4ee5\u5c1d\u8bd5\u66b4\u529b\u653b\u51fb\u3002\n\u8fd9\u4e00\u6b21\uff0c\u5f53\u7528\u6237\u5c1d\u8bd5\u767b\u5f55\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c06\u6563\u5217\u5bc6\u7801+\u76d0+\u80e1\u6912\uff1amd5([\u5bc6\u7801]-[\u76d0]-[\u80e1\u6912])\u3002\u5f53\u7ed3\u679c\u4e0e\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u7684\u5bc6\u7801\u6563\u5217\u5339\u914d\u65f6\uff0c\u5141\u8bb8\u8be5\u7528\u6237\u8fdb\u5165\u3002\n\u80e1\u6912(\u5bc6\u7801\u5b66)\u7684\u7ef4\u57fa\u767e\u79d1\u9875\u9762\u4e0a\u5199\u9053\uff1a\u201c\u5728\u5171\u4eab\u79d8\u5bc6\u80e1\u6912\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u88ab\u6cc4\u9732\u7684\u5bc6\u7801(\u901a\u8fc7\u5bc6\u7801\u91cd\u590d\u4f7f\u7528\u6216\u5176\u4ed6\u653b\u51fb)\u52a0\u4e0a\u7528\u6237\u7684\u76d0\u53ef\u4ee5\u5bfc\u81f4\u53d1\u73b0\u80e1\u6912\u7684\u653b\u51fb\uff0c\u4f7f\u5176\u5931\u6548\u3002\u201d\u6b64\u5916\uff0c\u6709\u6743\u8bbf\u95eeWeb\u670d\u52a1\u5668\u7684\u7528\u6237\u3001\u5de5\u7a0b\u5e08\u6216\u9ed1\u5ba2\u5f88\u53ef\u80fd\u6709\u6743\u8bbf\u95ee\u6570\u636e\u5e93\u51ed\u636e\u548c\u5171\u4eab\u7684\u79d8\u5bc6\u80e1\u6912\u3002\u5982\u679c\u8fd9\u4e2a\u4eba\u80fd\u591f\u6e17\u51fa\u6570\u636e\u5e93\u548c\u5171\u4eab\u7684\u79d8\u5bc6\u80e1\u6912\uff0c\u5bc6\u7801\u5c31\u53ef\u4ee5\u518d\u6b21\u88ab\u66b4\u529b\u7834\u89e3\u3002\n\u89e3\u51b3\u65b9\u6848\u662f\u4e3a\u6bcf\u4e2a\u7528\u6237\u751f\u6210\u552f\u4e00\u7684\u80e1\u6912\u3002\u5f53\u7136\uff0c\u76d0\u5bf9\u6bcf\u4e2a\u7528\u6237\u6765\u8bf4\u4e5f\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u7528\u6237\u76d0\u548c\u72ec\u7279\u7684\u7528\u6237\u80e1\u6912\u4e4b\u95f4\u7684\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002\u76d0\u4e0e\u7528\u6237\u7684\u6563\u5217\u5bc6\u7801\u534a\u516c\u5f00\u5730\u5b58\u50a8\u5728\u4e00\u8d77\uff0c\u800c\u552f\u4e00\u7684\u7528\u6237\u80e1\u6912\u5219\u5b58\u50a8\u5728\u5355\u72ec\u7684\u4ecb\u8d28\u4e0a\uff0c\u4f8b\u5982\u786c\u4ef6\u5b89\u5168\u6a21\u5757(HSM)\u3002\u7f3a\u70b9\u662f\uff0c\u8fd9\u79cd\u5355\u72ec\u7684\u5a92\u4ecb\u9700\u8981\u80fd\u591f\u4e3a\u6bcf\u4e2a\u7528\u6237\u5b58\u50a8\u8fa3\u6912\u3002\u5728\u5927\u89c4\u6a21\u73af\u5883\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u5b89\u5168\u6a21\u5757\u8fd8\u9700\u8981\u5927\u91cf\u7684\u5b58\u50a8\u548c\u5904\u7406\u80fd\u529b\u3002\u4f46\u968f\u7740\u785d\u57fa\u98de\u5730\u7684\u5f15\u5165\uff0c\u4e00\u79cd\u65b0\u7684\u89e3\u51b3\u65b9\u6848\u53d8\u5f97\u53ef\u884c\u3002\n\u4f7f\u7528EC2 Nitro Enclaves\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528KMS\u5bf9\u552f\u4e00\u7684\u7528\u6237\u80e1\u6912\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u540e\u7684\u6570\u636e\u4e0e\u7528\u6237\u4fe1\u606f\u4e00\u8d77\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u3002\u785d\u57fa\u98de\u5730\u5c06\u662f\u552f\u4e00\u53ef\u4ee5\u89e3\u5bc6\u80e1\u6912\u7684\u90e8\u4ef6\u3002\u56e0\u4e3a\u98de\u5730\u662f\u5b8c\u5168\u9694\u79bb\u8fd0\u884c\u7684\uff0c\u6240\u4ee5\u7528\u6237\u7684\u80e1\u6912\u6c38\u8fdc\u4e0d\u4f1a\u66b4\u9732\u51fa\u6765\u3002\u5373\u4f7f\u67d0\u4eba\u53ef\u4ee5\u4e0d\u53d7\u9650\u5236\u5730\u8bbf\u95eeWeb\u670d\u52a1\u5668\u548c\u6570\u636e\u5e93\uff0c\u4ed6\u4eec\u4e5f\u6c38\u8fdc\u65e0\u6cd5\u89e3\u5bc6\u7528\u6237\u7684\u5bc6\u7801\u3002\u63d0\u4f9b\u8fd9\u4e9b\u529f\u80fd\u7684Enclave\u5e94\u7528\u7a0b\u5e8f\u540d\u4e3aNitroPepper\u3002\n\u5728\u4e0b\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u63cf\u8ff0\u4e00\u4e2a\u5177\u6709\u5b58\u50a8\u5728DynamoDB\u4e2d\u7684\u7528\u6237\u51ed\u636e\u7684Web\u5e94\u7528\u7a0b\u5e8f\u3002\u5f53\u7528\u6237\u6ce8\u518c\u65f6\uff0c\u4ed6\u4eec\u7684\u5bc6\u7801\u4f1a\u88ab\u53d1\u9001\u7ed9NitroPepper\u3002NitroPepper\u4e0eNitro Security\u6a21\u5757\u548cKMS\u901a\u4fe1\uff0c\u4ee5\u5b89\u5168\u5730\u6563\u5217\u5bc6\u7801\u3002\u7136\u540e\uff0cNitroPepper\u8fd4\u56de\u6563\u5217\u5bc6\u7801\u548c\u52a0\u5bc6\u7684\u80e1\u6912\u3002\u6563\u5217\u5bc6\u7801\u548c\u52a0\u5bc6\u7684\u80e1\u6912\u4e00\u8d77\u5b58\u50a8\u5728DynamoDB\u4e2d\u3002\n\u5f53\u73b0\u6709\u7528\u6237\u5c1d\u8bd5\u767b\u5f55\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c06\u4eceDynamoDB\u83b7\u53d6\u6563\u5217\u5bc6\u7801\u548c\u52a0\u5bc6\u7684Pepper\u3002\u7136\u540e\uff0c\u8fd9\u4e9b\u4fe1\u606f\u548c\u4ed6\u4eec\u8bd5\u56fe\u767b\u5f55\u7684\u5bc6\u7801\u4e00\u8d77\u88ab\u8f6c\u53d1\u7ed9NitroPepper\u3002NitroPepper\u5c06\u89e3\u5bc6DynamoDB\u4e2d\u7684\u80e1\u6912\uff0c\u5e76\u4f7f\u7528\u89e3\u5bc6\u7684\u503c\u5bf9\u7528\u6237\u5c1d\u8bd5\u767b\u5f55\u65f6\u4f7f\u7528\u7684\u5bc6\u7801\u8fdb\u884c\u6563\u5217\u3002\u5982\u679c\u7ed3\u679c\u4e0e\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u7684\u6563\u5217\u5339\u914d\uff0c\u5219\u5141\u8bb8\u7528\u6237\u767b\u5f55\u3002\nNitroPepper\u98de\u5730\u9700\u89813 GB\u5185\u5b58\u624d\u80fd\u8fd0\u884c\u3002\u8fd9\u662f\u5f88\u591a\u7684\uff0c\u5f53\u7136\u53ef\u4ee5\u4f18\u5316\uff0c\u4f46\u5b83\u5c31\u662f\u76ee\u524d\u7684\u60c5\u51b5\u3002\u8981\u8fd0\u884c3 GB\u7684enclave\uff0c\u53ef\u4ee5\u53d1\u51fa\u4ee5\u4e0b\u547d\u4ee4\uff1asudo nitro-cli run-enclave--cpu-count 2--memory 3072--eif--path nitPepper.eif--enclave-ci6\u3002\u7b2c\u4e00\u6b21\u8fd0\u884c\u6b64\u547d\u4ee4\u65f6\uff0c\u6211\u9047\u5230\u4e86\u4ee5\u4e0b\u9519\u8bef\uff1a\n(Env)[ec2-user@ip-172-31-9-229 nitPepper]$sudo nitro-cli run-enclave--cpu-count 2--Memory 3072--eif--enclave-ci6\u5f00\u59cb\u5206\u914d\u5185\u5b58...[E27]\u53ef\u7528\u5185\u5b58\u4e0d\u8db3\u3002\u7528\u6237\u63d0\u4f9b\u7684`\u5185\u5b58\u2018\u4e3a3072MB\uff0c\u8d85\u8fc7\u4e86\u53ef\u7528\u7684\u8d85\u5927\u9875\u9762\u5185\u5b58\u3002\n\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u8fd0\u884cECHO&#34\uff1bvm.nr_hugepages=1536&#34\uff1b|sudo tee/etc/sysctl.d/99-nit.conf\uff1bsudo sysctl-p/etc/sysctl.d/99-nit.conf\u6765\u589e\u52a0\u5927\u9875\u9762\u7684\u6570\u91cf\u3002\n\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u53e6\u4e00\u4e2a\u65f6\u523b\uff0c\u6211\u7684\u505c\u9760\u5bb9\u5668\u8017\u5c3d\u4e86\u5185\u5b58\u3002\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u5185\u5b58\u662f\u95ee\u9898\u6240\u5728\uff0c\u56e0\u4e3aNitro Enclaves\u63d0\u4f9b\u7684\u552f\u4e00\u8f93\u51fa\u662f\u65e0\u6cd5\u6253\u5f00/env\u6587\u4ef6\uff1a\u6ca1\u6709\u8fd9\u6837\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u3002\u4e00\u65e6\u6211\u5c06Nitro Enclaves\u5185\u5b58\u4ece2 GB\u66f4\u6539\u4e3a3 GB\uff0c\u9519\u8bef\u5c31\u6d88\u5931\u4e86\uff0c\u518d\u4e5f\u6ca1\u6709\u51fa\u73b0\u8fc7\u3002\n\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7vsock(VM\u5957\u63a5\u5b57\u7684\u7f29\u5199)\u4e0eNitroPepper\u901a\u4fe1\u3002\u8fd9\u5728Python\u4e2d\u975e\u5e38\u7b80\u5355\u3002NitroPepper\u6309\u5982\u4e0b\u65b9\u5f0f\u7ed1\u5b9a\u5230vsock(Enclave_Port\u8bbe\u7f6e\u4e3a5000)\uff1a\nVsock=socket.\u5957\u63a5\u5b57(socket.AF_VSOCK\uff0csocket.SOCK_STREAM)vsock.bind((socket.VMADDR_CID_ANY\uff0cEnclave_Port))vsock.listen()\u800cTrue\uff1aconn\uff0c_addr=vsock.Accept()print(&#39\uff1b\u63a5\u6536\u5230\u65b0\u8fde\u63a5)payload=Conn.recv(4096)\u3002\n\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u6b64\u5957\u63a5\u5b57\uff0c\u5982\u4e0b\u6240\u793a\u3002Enclave_CID\u786c\u7f16\u7801\u4e3a6\uff0cEnclave_Port\u4e3a5000\u3002\nNitroPepper\u6267\u884c\u4e09\u79cd\u7c7b\u578b\u7684KMS\u64cd\u4f5c\uff1aGenerateRandom\u3001Encrypt\u548cDeccrypt\u3002\u524d\u4e24\u4e2a\u64cd\u4f5c\u5e94\u8be5\u76f8\u5f53\u7b80\u5355\uff1b\u6211\u4eec\u4f7f\u7528\u4ece\u7236\u5b9e\u4f8b\u83b7\u5f97\u7684\u51ed\u636e\u5411https://kms.eu-central-1.amazonaws.com\u53d1\u9001\u4e00\u4e2a\u7b80\u5355\u7684POST\u8bf7\u6c42\uff0cKMS\u8fd4\u56de\u6211\u4eec\u8bf7\u6c42\u7684\u5185\u5bb9\u3002\n\u7136\u800c\uff0c\u785d\u57fa\u98de\u5730\u6ca1\u6709\u53ef\u7528\u7684\u7f51\u7edc\u8fde\u63a5\u3002\u8981\u4e0eKMS\u901a\u4fe1\uff0cEnclave\u9700\u8981\u8fde\u63a5\u5230\u5728\u7236\u5b9e\u4f8b\u4e0a\u8fd0\u884c\u7684KMS\u4ee3\u7406\u3002\u8981\u8fd0\u884cKMS\u4ee3\u7406\uff0c\u53ea\u9700\u6267\u884csudo vsock-proxy 8000 kms.eu-Central-1.amazonaws.com443\u6216\u5c06vsock-proxy\u4f5c\u4e3a\u670d\u52a1\u542f\u52a8\u3002\u5728Enclave\u4e2d\uff0c\u60a8\u4f7f\u7528CID 3\u8fde\u63a5\u5230vsock\u3002\u6b64\u6d41\u91cf\u7531vsock-Proxy\u63a5\u6536\uff0c\u5e76\u5c06\u5176\u8f6c\u53d1\u5230KMS\u3002\n\u5728NitroPepper\u4e2d\uff0c\u6211\u60f3\u4f7f\u7528\u6807\u51c6\u8bf7\u6c42\u5e93\u8fdb\u884cHTTP\u8c03\u7528\uff0c\u4f46\u662f\u8bf7\u6c42\u4e0d\u652f\u6301vsock\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4f7f\u7528Richard Fan(GitHub)\u7f16\u5199\u7684\u6d41\u91cf\u8f6c\u53d1\u5668\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728\u4ed6\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u8be6\u7ec6\u63cf\u8ff0\u4e86\u5728AWS Nitro Enclaves\u4e0a\u8fd0\u884cPython App\u3002\u8f6c\u53d1\u5668\u5728\u6807\u51c6\u7aef\u53e3\u4e0a\u63a5\u6536\u6d41\u91cf\uff0c\u5e76\u5c06\u5176\u8f6c\u53d1\u5230KMS vsock\u3002\u95ee\u9898\u89e3\u51b3\u4e86\u3002\n\u5bf9\u4e8eNitro Enclaves\u8bc1\u660e\uff0cEnclave\u9700\u8981\u751f\u6210RSA\u5bc6\u94a5\u5bf9\u5e76\u5c06\u516c\u94a5\u53d1\u9001\u5230KMS\u670d\u52a1\u3002\u751f\u6210RSA\u5bc6\u94a5\u5bf9\u9700\u8981\u968f\u673a\u6570\u751f\u6210\uff0c\u8fd9\u901a\u5e38\u7531/dev/Random\u548c/dev/urandom\u63d0\u4f9b\u3002\u7136\u800c\uff0c\u5728\u785d\u57fa\u98de\u5730\uff0c\u8fd9\u4e9b\u662f\u4e0d\u53ef\u7528\u7684\u3002\n\u76f8\u53cd\uff0c\u6211\u4eec\u4f7f\u7528/dev/nsm\uff0c\u5b83\u540c\u65f6\u7528\u4e8e\u968f\u673a\u6570\u751f\u6210\u548c\u521b\u5efa\u8bc1\u660e\u6587\u6863\u3002\u4f7f\u7528ioctl\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0e/dev/nsm\u901a\u4fe1\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u76f8\u5f53\u590d\u6742\uff0c\u4f46\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u5fc5\u91cd\u65b0\u53d1\u660e\u8f6e\u5b50\u3002\u5728GitHub\u4e0a\uff0cAWS\u63d0\u4f9b\u4e86aws-nitro-enclaves-nsm-api\uff0c\u8fd9\u662f\u4e00\u4e2a(\u7528Rust\u7f16\u5199\u7684)\u5e93\uff0c\u5b83\u4e0e/dev/nsm\u63a5\u53e3\u3002\u4f46\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5b83\u53ea\u4e3aC\u8bed\u8a00\u63d0\u4f9b\u63a5\u53e3\u3002\n\u6211\u5c06aws-nitro-enclaves-nsm-api\u6d3e\u751f\u5230\u6211\u81ea\u5df1\u7684Git\u5b58\u50a8\u5e93\uff0c\u7136\u540e\u4e3aPython\u7f16\u5199\u989d\u5916\u7684\u63a5\u53e3\u3002\u8fd9\u53ea\u9700\u8981\u5927\u7ea680\u884c\u4ee3\u7801\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u63d0\u4ea4\u4e2d\u627e\u5230\u3002\u60a8\u53ef\u4ee5\u514b\u9686\u5b58\u50a8\u5e93\u5e76\u8fd0\u884cCargo Build\u6765\u6784\u5efa\u60a8\u81ea\u5df1\u7684\u5e93\uff0c\u6216\u8005\u4eceNitroPepper\u5b58\u50a8\u5e93\u4e0b\u8f7d\u9884\u7f16\u8bd1\u5e93\u3002\nLibnsm\u5e93\u4e3ansm_get_Random()\u548cnsm_get_attestation_doc()\u51fd\u6570\u63d0\u4f9b\u4e86\u63a5\u53e3\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u4e3aNitroPepper\u6240\u9700\u8981\u7684\u3002\nPycrypdome\u5e93\u63d0\u4f9b\u4e86RSA.Generate()\u51fd\u6570\u6765\u751f\u6210RSA\u5bc6\u94a5\u5bf9\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f7f\u7528\u6807\u51c6\u7684Linux\u968f\u673a\u6570\u751f\u6210\u5668(/dev/Random)\uff0c\u4f46\u662f\u53ef\u4ee5\u7528RSA.Generate(2048\uff0cRandfunc=nsm_randfunc)\u2026\u8986\u76d6\u5b83\u3002\u6216\u8005\u6211\u662f\u8fd9\u6837\u60f3\u7684\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4f1a\u8986\u76d6/dev/Random\u7684\u4e00\u4e9b\u7528\u6cd5(\u4f46\u4e0d\u662f\u5168\u90e8\u7528\u6cd5)\u3002\u4e3a\u4e86\u514b\u670d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u7ed9\u91d1\u5b57\u5854\u6253\u4e86\u4ee5\u4e0b\u8865\u4e01\uff1a\n@classMethod def_money_patch_crypto(cls\uff0cnsm_rand_func)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1bCrypto.Random.get_Random_bytes=NSM_rand_func def new_Random_read(self\uff0cn_bytes)\uff1a\u8fd4\u56deNSM_rand_func(N_Bytes)Crypto.NSM_RAND_FUNC(N_Bytes)Crypto.&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\n\u6709\u4e86\u8fd9\u4e00\u70b9\uff0cpycrypdome\u5728Nitro Enclaves\u4e2d\u8fd0\u884c\u6ca1\u6709\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u751f\u6210RSA\u5bc6\u94a5\u5bf9\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6700\u56f0\u96be\u7684\u90e8\u5206\u662f\u8ba9\u201c\u8bc1\u660e\u201d\u8fd0\u884c\u3002\u8ba4\u8bc1\u662f\u6307\u785d\u57fa\u98de\u5730\u901a\u8fc7\u4e00\u79cd\u4fdd\u8bc1\u8bf7\u6c42\u6765\u81ea\u7279\u5b9a\u98de\u5730\u7684\u65b9\u6cd5\u5411KMS\u8868\u660e\u81ea\u5df1\u8eab\u4efd\u7684\u8fc7\u7a0b\u3002\u6b64\u8fc7\u7a0b\u4ec5\u7528\u4e8e\u89e3\u5bc6\u64cd\u4f5c\u3002\n\u8ba9\u6211\u4eec\u4ece\u6982\u8ff0\u5f00\u59cb\u3002\u51fa\u4e8e\u53ef\u8bfb\u6027\u8003\u8651\uff0c\u6b64\u56fe\u4e2d\u672a\u5305\u542bKMS\u4ee3\u7406\u3002\n\u5982\u60a8\u6240\u89c1\uff0c\u8be5\u8fc7\u7a0b\u9700\u8981\u516b\u4e2a\u52a0\u5bc6\u548c\u89e3\u5bc6\u6b65\u9aa4\u3002\u9996\u5148\uff0c\u751f\u6210RSA\u5bc6\u94a5\u5bf9(3)\u3002\u516c\u94a5\u88ab\u53d1\u9001\u5230NSM API\uff0c\u8be5API\u751f\u6210\u5d4c\u5165\u8be5\u516c\u94a5\u7684\u8bc1\u660e\u6587\u6863(4)\u3002\u8bc1\u660e\u6587\u6863\u88ab\u9644\u52a0\u5230KMS\u89e3\u5bc6\u547c\u53eb(5)\u3002KMS\u4f7f\u7528NitroPepper\u63d0\u4f9b\u7684\u516c\u94a5\u5bf9\u8bf7\u6c42\u7684\u6570\u636e\u8fdb\u884c\u52a0\u5bc6\u3002\u7136\u540e\uff0c\u5b83\u4ee5\u52a0\u5bc6\u6d88\u606f\u8bed\u6cd5(CMS)\u4fe1\u5c01\u7684\u5f62\u5f0f\u5c06\u52a0\u5bc6\u6570\u636e\u53d1\u9001\u56deNitroPepper(6)\uff0c\u8be5\u4fe1\u5c01\u662f\u5728\u516c\u94a5\u5bc6\u7801\u6807\u51c6#7\u6216PKCS#7\u4e2d\u5b9a\u4e49\u7684\u3002\u8fd4\u56de\u5230NitroPepper\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5bf9\u4fe1\u5c01\u8fdb\u884c\u89e3\u6790(7)\uff0c\u8fd9\u4ea7\u751f\u4e86\u4e09\u4e2a\u503c\uff1a\u7528\u4e8e\u52a0\u5bc6KMS\u54cd\u5e94\u7684\u5bc6\u94a5\uff0c\u8be5KMS\u54cd\u5e94\u672c\u8eab\u662f\u7528RSA\u5bc6\u94a5\u52a0\u5bc6\u7684\u3001\u521d\u59cb\u5316\u5411\u91cf(IV)\u548c\u52a0\u5bc6\u7684KMS\u54cd\u5e94\u3002\u7136\u540e\uff0cNitroPepper\u4f7f\u7528RSA\u79c1\u94a5\u6765\u89e3\u5bc6\u5bf9\u79f0\u5bc6\u94a5(8)\u3002\u6700\u540e\uff0c\u5bf9\u79f0\u5bc6\u94a5\u7528\u4e8e\u89e3\u5bc6KMS\u54cd\u5e94(9)\u3002\nKMS\u89e3\u5bc6\u8c03\u7528\u9700\u8981\u8bc1\u660e\u6587\u6863\u7684\u4e00\u4e9b\u672a\u8bb0\u5f55\u7684\u53c2\u6570\u3002\u4e0b\u9762\u7684Python\u4ee3\u7801(\u6e90\u4ee3\u7801)\u663e\u793a\u4e86NitroPepper\u4f7f\u7528\u7684\u8bf7\u6c42\u6b63\u6587\uff1a\nCMS\u89e3\u5bc6\u8fc7\u7a0b\u7684\u4ee3\u7801\u53ef\u4ee5\u5728kms.py\u4e2d\u627e\u5230\u3002\u4ee5\u4e0b\u662f\u6838\u5fc3\u529f\u80fd\u7684\u4e00\u5c0f\u6bb5\uff1a\nDef_cms_parse_encaped_data(self\uff0cciphertext_for_repient)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u8fd4\u56de\u5e8f\u5217\u5316CMS\u5185\u5bb9\u7684\u5bf9\u79f0\u5bc6\u94a5\u3001IV\u3001\u5757\u5927\u5c0f\u548c\u5bc6\u6587\u3002&#34\uff1b&#34\uff1b&#34\uff1b...\u3002BLOCK_SIZE=encrypted_content_info[&#39\uff1bcontent_encryption_algorithm&#39\uff1b].encryption_block_size INIT_VECTOR=encrypted_content_info[&#39\uff1bcontent_encryption_algorithm&#39\uff1b].encryption_iv\u5bc6\u6587=encrypted_content_info[&#39\uff1bencrypted_content&#39\uff1b].native\u8fd4\u56de\u5bc6\u94a5\uff0cINIT_VECTOR\uff0cBLOCK_SIZE\uff0cciphertext def_rsa_deccrypt(SELF\uff0cPRIVATE_KEY\uff0cENCRYPTED_SYMM_KEY)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u4f7f\u7528RSA\u79c1\u94a5\u89e3\u5bc6\u52a0\u5bc6\u7684\u5bf9\u79f0\u5bc6\u94a5\u3002&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#34\uff1b&#rsa=PKCS1_OAEP.new(PRIVATE_KEY)\u8fd4\u56decipher_rsa.deccrypt(Encrypted_Symm_Key)def_aws_cms_cipher_deccrypt(self\uff0cciphertext\uff0ckey\uff0cblock_size\uff0cinit_Vector)\uff1a&#34\uff1b&#34\uff1b&#34\uff1b\u89e3\u5bc6\u660e\u6587\u6570\u636e\u3002Cipher=AES\u3002new(key\uff0cAES.MODE_CBC\uff0civ=init_Vector)\u8fd4\u56deunpad(cipher.deccrypt(\u5bc6\u6587)\uff0cblock_size)\u3002\n\u5c06\u516c\u5171RSA\u5bc6\u94a5\u53d1\u9001\u5230KMS\u7684\u8fc7\u7a0b\uff0c\u4ee5\u53caKMS\u5728\u8fd4\u56de\u54cd\u5e94\u4e4b\u524d\u5bf9\u54cd\u5e94\u8fdb\u884c\u52a0\u5bc6\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u786e\u4fdd\u5373\u4f7f\u6570\u636e\u88ab\u62e6\u622a(\u5728\u7236\u5b9e\u4f8b\u4e0a\u3001\u7f51\u7edc\u4e0a\u6216\u7269\u7406\u4e3b\u673a\u4e0a\u7684\u5176\u4ed6\u79df\u6237)\uff0c\u62e6\u622a\u5668\u4ecd\u7136\u65e0\u6cd5\u8bbf\u95ee\u60a8\u7684\u6570\u636e\u3002\u89e3\u5bc6\u6570\u636e\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u4f7f\u7528RSA\u79c1\u94a5\uff0c\u9664\u98de\u5730\u5916\uff0c\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u8bbf\u95ee\u8be5\u5bc6\u94a5\u3002\n\u4f7f\u7528\u5bc6\u7801\u548c\u76d0\u751f\u6210\u5bc6\u7801\u6563\u5217\u7684\u51fd\u6570\u662fhashlib.pbkdf2_hmac()\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u4ee3\u7801\u3002\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230Python pbkdf\u7684\u6587\u6863\u3002\u5728NitroPepper\u4e2d\uff0cpbkdf2_hmac\u7684\u7528\u6cd5\u5982\u4e0b\u3002PBKDF2_Iterations\u8bbe\u7f6e\u4e3a100.000\u6b21\u8fed\u4ee3\u3002\n\u6b64\u51fd\u6570\u5c06\u628a\u5bc6\u7801\u548c\u80e1\u6912\u4f5c\u4e3a\u5b57\u8282\uff0c\u5e76\u4f7f\u7528sha512\u5bf9\u5b83\u4eec\u8fdb\u884c100.000\u6b21\u6563\u5217\u3002100.000\u6b21\u8fed\u4ee3\u4f7f\u5f97\u8fd9\u4e2a\u8fc7\u7a0b\u76f8\u5bf9\u7f13\u6162\uff0c\u8fd9\u4f7f\u5f97\u66b4\u529b\u653b\u51fb\u53d8\u5f97\u4e0d\u53ef\u884c\u3002\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0bAWS CLI\u547d\u4ee4\u521b\u5efa\u524d\u4e09\u4e2a\u8d44\u6e90\u3002\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0cAMI\u662f\u6700\u65b0\u7684Amazon Linux2\u955c\u50cf\u3002\nAWS EC2\u8fd0\u884c\u5b9e\u4f8b--\u533a\u57dfEU-Central-1--Image-id ami-00a205cb8e06c3c4e--count 1--\u5b9e\u4f8b\u7c7b\u578bm5a.xLarge--Enclave-Options&#39\uff1bEnabled=true&#39\uff1b--key-name[\u60a8\u7684\u5bc6\u94a5\u540d\u79f0]AWS DynamoDB Create-table-Region EU-Central-1--table-name nitPepper-user--\u8ba1\u8d39\u6a21\u5f0fPay_per_Request--Attribute--\u30022012\u5e7410\u670817\u65e5&34\uff1b&#34\uff1bStatement&#34\uff1b\uff1a[{&#34\uff1bEffect&#34\uff1b\uff1a&#34\uff1bAllow&#34\uff1b\uff0c&#34\uff1bPrincipal&#34\uff1b\uff1a{&#34\uff1bService&#34\uff1b\uff1a&#34\uff1bec2.amazonaws.com&#34\uff1b}\uff0c&#34\uff1bAction&#34\uff1b\uff1a&#34\uff1bsts:AssumeRole&#34\uff1b}]}&#39\uff1bAWS IAM CREATE-ROLE--ROLE-NAME NITHPER-ROLE--\u5047\u5b9a-ROLE-POLICYALLOW_DOCUMENT$POLICYALLOW_DDB=&#39\uff1b{&#34\uff1bVersion&#34\uff1b\uff1a&#34\uff1b2012-10-17&#34\uff1b\uff0c&#34\uff1bStatement&#34\uff1b\uff1a[{&#34\uff1bEffect&#34\uff1b\uff1a&#34\uff1bAllow&#34\uff1b\uff0c&#34\uff1bAction&#34\uff1b\uff1a[&#34\uff1bDynamoDB\uff1aPutItem&#34\uff1b\uff0c&#34\uff1bDynamoDB\uff1aGetItem&34\uff1b]\uff0c&#34\uff1b\u8d44\u6e90&#34\uff1b\uff1a&#34\uff1barn:aws:dynamodb\uff1a*\uff1a*\uff1atable/nitropepper-users&#34\uff1b}]}&#39\uff1baws IAM PUT-ROLE-POLICY--ROLE-NIT\u3002\n.", "note_en": "Nitro Enclaves provide isolated compute environments for secure processing of very sensitive data. In this article we will use Nitro Enclaves to build an extremely safe password storage mechanism.\n Something was bugging me after publishing my recent articles about EC2 Nitro Enclaves ( part 1,  part 2). It took me a few days until I realized what it was: aside from the ACM reference architecture I couldn\u2019t come up with a valid use case for Nitro Enclaves. This left me wondering - are Nitro Enclaves a solution in search of a problem?\n A couple of hours of sketching and thinking left me with a few infeasible or convoluted implementation ideas. But then it hit me. Nitro Enclaves can be used to provide a super secure password storage mechanism. At the end of this post we will have built a Nitro Enclave application that will protect user passwords, even when an attacker has full control over the application server and database. This Nitro Enclave application is called NitroPepper.\n This article consists of three sections. Section 1 covers password storage mechanisms and explains the problem solved by NitroPepper. Section 2 covers the implementation details of NitroPepper. In section 3 we will walk through all the steps to get NitroPepper running on your own EC2 instances.\n The NitroPepper architecture requires a few components, all of which we will discuss in depth in section 2. The components we use are:\n A simple Python  Flask frontend ( GitHub) exposing two REST API methods:  new_user and  login. This frontend only serves demo purposes.\n  The AWS  Nitro Enclaves NSM API, extended with Python interfaces ( GitHub). This API provides an interface between NitroPepper and the Nitro Security Module (NSM).\n   Any system with a user login requires some way to store a user\u2019s password. Decades ago, it was acceptable to store passwords in plain text. But as more and more valuable data was stored online, people started attacking databases and extracting their contents. To protect against password leaks, gradually more sophisticated methods for storing passwords were developed. In this section we will briefly go trough the history of password storage.\n If you\u2019re already familiar with hashing algorithms, salt and pepper, feel free to skip this section and jump to the paragraph \u201cThe case for a unique pepper per user\u201d.\n One caveat: in the sections below I use MD5 as an example hashing mechanism. MD5 is known to be very insecure and you should never use it for real world password hashing. Instead, you would use SHA-512, SHA3 or another highly secure algorithm. The reason I use MD5 in this article is because its output is nice and short, which makes for easier reading.\n  In an almost forgotten past, applications were not connected to the internet, databases were never attacked and passwords could be stored in plain text. A few rows in a user table might look like this:\n  To log in to this system, the user provides their username and password to the application. The application checks if the username/password combination exists in the database. If the combination is found, the user is allowed in.\n As systems got more connected and accessible, database hacks and dumps also became more common. When an attacker would gain access to a database with passwords stored in plain text, they could use this information to log in as any user. To make matters worse, users commonly reuse passwords. This means that an attacker could use the passwords found at insecure site A to try a log in on another site B, even if this site did securely store their passwords.\n  The first development to improve password storage security was  hashing. A hashing algorithm like MD5 or SHA takes an input (in our case, the password) and generates a fixed-length string for this input. The algorithm is a mathematical operation that will always generate the same output for any given input. For example:\n  The essence of a hash function is that it is one-directional. In other words, you can generate a hash from a password, but not a password from its hash. So if someone would gain access to the hash  bd2bf17a10bc97a50bfb551aa2de9e76, they wouldn\u2019t know that the source password was  super_Secret1.\n An application built around this technology would no longer store plain text passwords, but store the hashed version instead:\n  When a user logs in to this application they provide their username and plain text password. The application hashes the password at every login attempt and compares the result with the hash stored in the database. If they match, the user is allowed in.\n With this solution the password is no longer stored in plain text. However, there are still significant weaknesses. The first is that some algorithms, like MD5 and SHA1, have been \u2018broken\u2019. When an algorithm has been broken, an attacker can independently generate an input string that results in the given hash. They can then use this input string as the password. Another problem is that the hash value will always be the same for a given password. An attacker can use this fact to build dictionaries or rainbow tables with the hash of common inputs and patterns. When they gain access to a database of hashes they only need to look them up in their dictionary to determine the original password.\n  The next generation of password security solves the problems of hashing by adding a  salt. Why is this called a salt? Because salt goes well with hash. With  salt, we still use a hashing algorithm, but instead of just hashing the plain password, we add a random string to the input. A few quick examples:\n  This salt is stored with the user information in the database. Please note that a salt would in reality be a longer string with a larger character set.\n  With a salt added to the password, two identical passwords ( super_Secret1) become unique ( super_Secret1-123455 and  super_Secret1-669911), which results in different hashes.\n When logging in to this system, the user still provides their plain text password. The server then retrieves the salt from the database and performs the hash function:  MD5([password]-[salt]). When the resulting hash matches the stored password hash, the user is allowed to log in.\n With salt added to hashes, dictionaries and rainbow tables have become useless. Unfortunately, even this solution is not strong enough in a number of use cases.\n  In the solution above all information is stored in a single source - the database. If the attacker has access to the database and a known entry (for example their own username and password), they can attempt to retrieve the original values through brute force. This might take a while, but processing power becomes cheaper every year, and governments have access to supercomputers that might make breaking passwords easier than you might expect.\n To be fair, a storage mechanism with properly salted passwords will be more than secure enough for most applications. But in healthcare, finance or government use cases, it might not be sufficient. This is where adding a server based pepper comes into play. Why is it called a pepper\u2026? Well you get the point.\n A shared secret pepper builds on the principle of the salt, but instead of storing the value in the database, it is stored on the server file system or another non-database system like AWS Secrets Manager. To be able to decrypt the passwords in the database the attacker needs access to both the database and secondary storage system, which significantly improves security. A simple SQL injection attack or access to a database backup is now no longer sufficient to attempt a brute force attack.\n This time when a user attempts to log in, the application will hash the password + salt + pepper:  MD5([password]-[salt]-[pepper]). When the result matches the password hash stored in the database, the user is allowed in.\n  The Wikipedia page for  Pepper (cryptography) states: \u201cIn the case of a shared-secret pepper, a single compromised password (via password reuse or other attack) along with a user\u2019s salt can lead to an attack to discover the pepper, rendering it ineffective\u201d. Additionally, a user, engineer or hacker with access to a web server will likely have access to the database credentials and the shared secret pepper. If this person could exfiltrate the database and the shared secret pepper, the passwords can be brute-forced again.\n The solution is to generate a pepper unique to every user. Of course, the salt is also unique to each user. The difference between the user salt and the unique user pepper is where they are stored. The salt is stored semi-publicly with the user\u2019s hashed password, while the unique user pepper is stored on a separate medium, such as a Hardware Security Module (HSM). The downside is that this separate medium needs to be able to store peppers for every single user. In large scale environments this means the security module also needs a lot of storage and processing capacity. But with the introduction of Nitro Enclaves, a new solution has become available.\n  With EC2 Nitro Enclaves we can encrypt the unique user pepper with KMS and store the encrypted data with the user information in the database. The Nitro Enclave will be the only component that can decrypt the pepper. Because the Enclave runs in full isolation, the user pepper will never be exposed. Even when someone has unrestricted access to both the web server and the database, they will never be able to decrypt the user\u2019s passwords. The Enclave application that delivers these features is called NitroPepper.\n  In the chapter below we will describe a web application with user credentials stored in DynamoDB. When a user signs up, their password is sent to NitroPepper. NitroPepper communicates with the Nitro Security Module and KMS to securely hash the password. Then NitroPepper returns the hashed password and the encrypted pepper. The hashed password and the encrypted pepper are stored together in DynamoDB.\n When an existing user tries to log in, the hashed password and encrypted pepper are fetched from DynamoDB by the application. These are then forwarded to NitroPepper, together with the password they are trying to log in with. NitroPepper will decrypt the pepper from DynamoDB, and use the decrypted value to hash the password the user is trying to log in with. If the result matches the hash stored in the database, the user is allowed to log in.\n   The NitroPepper Enclave needs 3 GB of memory to run. This is a lot, and can surely be optimized, but it\u2019s what it currently is. To run a 3 GB Enclave, you issue the following command:  sudo nitro-cli run-enclave --cpu-count 2 --memory 3072 --eif-path nitropepper.eif --enclave-cid 6. The first time I ran this, I encountered the following error:\n (env) [ec2-user@ip-172-31-9-229 nitropepper]$ sudo nitro-cli run-enclave --cpu-count 2 --memory 3072 --eif-path nitropepper.eif --enclave-cid 6Start allocating memory...[ E27 ] Insufficient memory available. User provided `memory` is 3072 MB, which is more than the available hugepage memory.\n To fix this, we need to increase the amount of hugepages by running  echo &#34;vm.nr_hugepages=1536&#34; | sudo tee /etc/sysctl.d/99-nitro.conf; sudo sysctl -p /etc/sysctl.d/99-nitro.conf.\n At another point during development my docker container ran out of memory. It was not immediately obvious that memory was the problem, because the only output provided by Nitro Enclaves was  Could not open /env file: No such file or directory. Once I changed the Nitro Enclaves memory from 2GB to 3GB the error was gone and never returned.\n  The frontend application communicates with NitroPepper over a vsock (short for VM Socket). This is pretty straightforward in Python. NitroPepper binds to the vsock as follows (ENCLAVE_PORT is set to 5000):\n vsock = socket.socket(socket.AF_VSOCK, socket.SOCK_STREAM) vsock.bind((socket.VMADDR_CID_ANY, ENCLAVE_PORT)) vsock.listen() while True: conn, _addr = vsock.accept() print(&#39;Received new connection&#39;) payload = conn.recv(4096)\n The frontend application connects to this socket like below. ENCLAVE_CID is hardcoded to 6, ENCLAVE_PORT is 5000.\n    NitroPepper executes three types of KMS operations:  GenerateRandom,  Encrypt and  Decrypt. The first two operations are supposed to be fairly straightforward; we send a simple POST request to  https://kms.eu-central-1.amazonaws.com with the credentials obtained from the parent instance, and KMS returns the contents we requested.\n However, the Nitro Enclaves have no network connection available. To communicate with KMS, the Enclave needs to connect to a KMS proxy running on the parent instance. To run the KMS proxy, you simply execute  sudo vsock-proxy 8000 kms.eu-central-1.amazonaws.com 443 or start  vsock-proxy as a service. In the Enclave, you connect to the vsock with CID 3. This traffic is received by  vsock-proxy, which forwards it to KMS.\n In NitroPepper, I wanted to use the standard  requests library for HTTP calls, but  requests does not have native support for vsocks. Luckily, this problem was solved using a traffic forwarder written by Richard Fan ( GitHub), detailed in his blog post  Running Python App on AWS Nitro Enclaves. The forwarder receives traffic on a standard port and forwards it to the KMS vsock. Problem solved.\n  For Nitro Enclaves attestation, the Enclave needs to generate an RSA key pair and send the public key to the KMS service. Generating RSA key pairs requires random number generation, which is usually provided by  /dev/random and  /dev/urandom. However, in Nitro Enclaves, these are not available.\n Instead, we have  /dev/nsm, which is used for both random number generation and creating attestation documents. Using ioctl, we can communicate with  /dev/nsm. This process is quite complex, but luckily we don\u2019t have to reinvent the wheel. On GitHub, AWS provides the  aws-nitro-enclaves-nsm-api, which is a library (written in Rust) that interfaces with  /dev/nsm. But there is one issue: it only provides interfaces for C.\n  I forked the  aws-nitro-enclaves-nsm-api to my own  Git repository, then I wrote additional interfaces for Python. This only required about 80 lines of code, which you can find in  this commit. You can clone the repository and run  cargo build to build your own library, or download the  precompiled library from the NitroPepper repository.\n The libnsm libary provides interfaces for the  nsm_get_random() and  nsm_get_attestation_doc() functions, which is all we need for NitroPepper.\n  The  pycryptodome library provides the  RSA.generate() function to generate RSA key pairs. By default, this uses the standard Linux random number generator ( /dev/random), but this can be overwritten with  RSA.generate(2048, randfunc=nsm_randfunc)\u2026 Or so I thought. In practice, this overwrites some, but not all the usages of  /dev/random. To overcome this, I monkey patched pycryptodome as follows:\n @classmethod def _monkey_patch_crypto(cls, nsm_rand_func): &#34;&#34;&#34;Monkeypatch Crypto to use the NSM rand function.&#34;&#34;&#34; Crypto.Random.get_random_bytes = nsm_rand_func def new_random_read(self, n_bytes): return nsm_rand_func(n_bytes) Crypto.Random._UrandomRNG.read = new_random_read\n With this, pycryptodome runs without issues in Nitro Enclaves, and we can use it to generate RSA key pairs.\n  The most difficult part by far was to get Attestation to run. Attestation is the process where Nitro Enclaves identify themselves to KMS through a method that guarantees a request is coming from a specific Enclave. This process is only used for the Decrypt operation.\n Let\u2019s start with an overview. The KMS proxy has been left out of this diagram for readability.\n  As you can see, the process requires eight steps of encryption and decryption. First the RSA key pair is generated (3). The public key is sent to the NSM API, which generates an attestation document in which this public key is embedded (4). The attestation document is attached to the KMS Decrypt call (5). KMS encrypts the requested data with the public key provided by NitroPepper. Then it sends the encrypted data back to NitroPepper (6) in the form of a Cryptographic Message Syntax (CMS) envelope, which is defined in Public Key Cryptography Standard #7, or  PKCS#7. Back in the NitroPepper application, the envelope is parsed (7), which yields three values: the key used to encrypt the KMS response, which itself is encrypted with the RSA key, an initialization vector (IV) and the encrypted KMS response. NitroPepper then uses the RSA private key to decrypt the symmetric key (8). Finally, the symmetric key is used to decrypt the KMS response (9).\n The KMS Decrypt call requires some undocumented parameters for the Attestation Document. The Python code below ( source) shows the request body used by NitroPepper:\n  The code for the CMS decryption process can be found in  kms.py. A snippet of the core functionality:\n def _cms_parse_enveloped_data(self, ciphertext_for_recipient): &#34;&#34;&#34;Return symmetric key, IV, Block Size and ciphertext for serialized CMS content.&#34;&#34;&#34; ... block_size = encrypted_content_info[&#39;content_encryption_algorithm&#39;].encryption_block_size init_vector = encrypted_content_info[&#39;content_encryption_algorithm&#39;].encryption_iv ciphertext = encrypted_content_info[&#39;encrypted_content&#39;].native return cipherkey, init_vector, block_size, ciphertextdef _rsa_decrypt(self, private_key, encrypted_symm_key): &#34;&#34;&#34;Decrypt the encrypted symmetric key with the RSA private key.&#34;&#34;&#34; cipher_rsa = PKCS1_OAEP.new(private_key) return cipher_rsa.decrypt(encrypted_symm_key)def _aws_cms_cipher_decrypt(self, ciphertext, key, block_size, init_vector): &#34;&#34;&#34;Decrypt the plain text data with the dycrypted key from CMS.&#34;&#34;&#34; cipher = AES.new(key, AES.MODE_CBC, iv=init_vector) return unpad(cipher.decrypt(ciphertext), block_size)\n The process of sending a public RSA key to KMS, and KMS encrypting the response before returning it, guarantees that even if the data would be intercepted (on the parent instance, on the network, or by other tenants on the physical host), the interceptor still wouldn\u2019t be able to access your data. The only way the data can be decrypted is with the private RSA key, which remains inaccessible to anyone but the enclave.\n  The function that uses the password and salt to generate a password hash is  hashlib.pbkdf2_hmac(). You can find the code  here. The documentation of Python pbkdf can be found  here. In NitroPepper, pbkdf2_hmac is used as follows. PBKDF2_ITERATIONS is set to 100.000 iterations.\n  This function will take the password and the pepper as bytes, and hash them 100.000 times with sha512. The 100.000 iterations make the process relatively slow, which makes a brute force attack infeasible.\n    You can create the first three resources with the following AWS CLI commands. The AMI is the latest Amazon Linux 2 image at the time of writing.\n aws ec2 run-instances --region eu-central-1 --image-id ami-00a205cb8e06c3c4e --count 1 --instance-type m5a.xlarge --enclave-options &#39;Enabled=true&#39; --key-name [your key name]aws dynamodb create-table --region eu-central-1 --table-name nitropepper-users --billing-mode PAY_PER_REQUEST --attribute-definitions AttributeName=username,AttributeType=S --key-schema AttributeName=username,KeyType=HASH POLICY=&#39;{&#34;Version&#34;:&#34;2012-10-17&#34;,&#34;Statement&#34;:[{&#34;Effect&#34;:&#34;Allow&#34;,&#34;Principal&#34;:{&#34;Service&#34;:&#34;ec2.amazonaws.com&#34;},&#34;Action&#34;:&#34;sts:AssumeRole&#34;}]}&#39;aws iam create-role --role-name nitropepper-role --assume-role-policy-document $POLICYALLOW_DDB=&#39;{&#34;Version&#34;: &#34;2012-10-17&#34;,&#34;Statement&#34;:[{&#34;Effect&#34;:&#34;Allow&#34;,&#34;Action&#34;:[&#34;dynamodb:PutItem&#34;,&#34;dynamodb:GetItem&#34;],&#34;Resource&#34;:&#34;arn:aws:dynamodb:*:*:table/nitropepper-users&#34;}]}&#39;aws iam put-role-policy --role-name nit\n......", "posttime": "2020-11-07 11:13:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bc6\u7801,nitropepper,secure", "title": "\u4f7f\u7528NitroPepper\u5b9e\u73b0\u8d85\u5b89\u5168\u5bc6\u7801\u5b58\u50a8", "title_en": "Ultra Secure Password Storage with NitroPepper", "transed": 1, "url": "https://www.sentiatechblog.com/ultra-secure-password-storage-with-nitropepper", "via": "", "real_tags": ["\u5bc6\u7801", "secure"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1033609, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6807\u51c6\u5e93\u5305\u542b\u5927\u91cf\u6211\u4eec\u4e0d\u60f3\u81ea\u5df1\u7f16\u5199\u7684\u4ee3\u7801\uff0c\u5305\u62ecprintf\u3001scanf\u3001\u6570\u5b66\u51fd\u6570\u7b49\u7b49\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u6211\u4eec\u7684\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u94fe\u63a5\u5230\u8fd9\u4e2a\u5e93\uff0c\u5e76\u4e14\u4e00\u5207\u90fd\u201c\u6b63\u5e38\u5de5\u4f5c\u201d\u3002\u8fd9\u7bc7\u6587\u7ae0\u5c06\u5411\u4f60\u5c55\u793a\u6211\u5982\u4f55\u5c06\u6211\u4eec\u7684\u64cd\u4f5c\u7cfb\u7edf\u94fe\u63a5\u5230\u4e00\u4e2a\u6807\u51c6\u5e93newlib\uff0c\u4ee5\u53ca\u5728\u8fd9\u6837\u505a\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u8003\u9a8c\u548c\u78e8\u96be\u3002\n\u7a0b\u5e8f\u5e93\u5141\u8bb8\u7a0b\u5e8f\u5458\u5728\u66f4\u9ad8\u7684\u5c42\u6b21\u4e0a\u5f00\u59cb\u7f16\u5199\u7a0b\u5e8f\u3002\u5982\u679c\u6709\u4eba\u8fd8\u8bb0\u5f9780\u5e74\u4ee3\uff0c\u5f53\u4e2a\u4eba\u7535\u8111\u5f15\u5bfc\u5230\u4e00\u4e2a\u57fa\u672c\u7684\u7f16\u8f91\u5668\u65f6\uff0c\u4f60\u57fa\u672c\u4e0a\u5fc5\u987b\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u4f60\u7684\u7a0b\u5e8f\u3002\n\u672f\u8bed\u5e93\u53ea\u8868\u793a\u5b58\u50a8\u4ee3\u7801\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u901a\u5e38\uff0c\u6b64\u4ee3\u7801\u662f\u7f16\u8bd1\u548c\u6c47\u7f16\u7684\u6e90\u4ee3\u7801\u7684\u76ee\u6807\u6587\u4ef6\u3002\u5171\u4eab\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u6309\u9700\u52a0\u8f7d\uff0c\u4f46\u8fd9\u9700\u8981\u4e00\u4e9b\u6765\u81ea\u52a8\u6001\u94fe\u63a5\u5668\u7684\u989d\u5916\u652f\u6301\u3002\u8bf7\u770b\u6211\u5173\u4e8e\u52a8\u6001\u94fe\u63a5\u7684\u5e16\u5b50\uff1a\u52a8\u6001\u94fe\u63a5\u3002\n\u8bb8\u591a\u6700\u6709\u7528\u7684\u4f8b\u7a0b\u5c06\u53ea\u9700\u7f16\u5199\u4e00\u6b21\uff0c\u7136\u540e\u5b58\u50a8\u5230\u5171\u4eab\u5bf9\u8c61(So)\u6216\u5b58\u6863(A)\u4e2d\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5e93\u5141\u8bb8\u6211\u4eec\u5f15\u5165\u5df2\u7ecf\u7f16\u5199\u7684\u4ee3\u7801\uff0c\u4f46\u5e93\u8fd8\u6709\u4e00\u4e2a\u66f4\u6839\u672c\u7684\u539f\u56e0--\u4f7f\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u7684\u63a5\u53e3\u53d8\u5f97\u5bb9\u6613\u3002\n\u5982\u679c\u4f60\u8bfb\u8fc7\u6211\u5173\u4e8e\u4f7f\u7528Rust\u7684RISC-V\u64cd\u4f5c\u7cfb\u7edf\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u4f60\u5c31\u4f1a\u77e5\u9053\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u5982\u4f55\u4ece\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\u53d1\u51fa\u8bf7\u6c42\u7684\u3002\u901a\u5e38\uff0c\u8fd9\u662f\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u5b8c\u6210\u7684\u3002\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u88ab\u8d4b\u4e88\u4e00\u4e2a\u7f16\u53f7\u3002\u4f8b\u5982\uff0c\u5728x86-64\u7cfb\u7edf\u4e0a\u7684Linux\u4e2d\uff0c\u7cfb\u7edf\u8c03\u7528#0\u662fexit\u7cfb\u7edf\u8c03\u7528\u3002\u7136\u800c\uff0c\u6ca1\u6709\u4ec0\u4e48\u80fd\u771f\u6b63\u8bf4\u660e\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u8fd9\u4e9b\u6570\u5b57\u3002\n\u5982\u679c\u6211\u4eec\u770b\u4e00\u770blibgoss\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e3anewlib\u7f16\u5199\u7684\u4f4e\u7ea7\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u6807\u51c6\uff1a\n\u56e0\u6b64\uff0c\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u4f4e\u7ea7\u5e93\u7684\u5de5\u4f5c\u662f\u786e\u4fdd\u53c2\u6570\u4f4d\u4e8e\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u7cfb\u7edf\u8c03\u7528\u53f7\u4f4d\u4e8e\u6b63\u786e\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u4e14\u5b9e\u9645\u6267\u884c\u4e86\u7cfb\u7edf\u8c03\u7528\u3002\u5bf9\u4e8eRISC-V\uff0c\u6211\u4eec\u6267\u884c\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\u662feCall\uff0c\u5373\u201c\u73af\u5883\u8c03\u7528\u201d\u3002\u8fd9\u6761\u6307\u4ee4\u5c06\u4f7f\u6211\u4eec\u8fdb\u5165\u64cd\u4f5c\u7cfb\u7edf\u3002\u64cd\u4f5c\u7cfb\u7edf\u5c06\u901a\u8fc7\u9996\u5148\u4e86\u89e3\u5b83\u6b63\u5728\u5904\u7406\u7cfb\u7edf\u8c03\u7528\u6765\u5904\u7406\u6b64\u95ee\u9898\u3002\u5176\u6b21\uff0c\u5b83\u5c06\u67e5\u770b\u7cfb\u7edf\u8c03\u7528\u53f7\u5e76\u5c06\u5176\u8def\u7531\u5230\u6b63\u786e\u7684\u4f8b\u7a0b\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u901a\u7528\u51fd\u6570(\u5982printf())\u6765\u4e86\u89e3\u8fd9\u4e00\u70b9\u3002\u6b64\u51fd\u6570\u5c06\u9996\u5148\u4f7f\u7528\u5e94\u7528\u7a0b\u5e8f\u5f62\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u5b57\u7b26\u4e32\u3002\u56e0\u6b64\uff0c\u7c7b\u4f3cprintf(\u201cHello%s\u201d\uff0c\u201cStephen\u201d)\u7684\u5185\u5bb9\u5c06\u5bfc\u81f4\u8be5\u51fd\u6570\u6784\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u5185\u5bb9\u4e3a\u201cHello Stephen\\0\u201d\u3002\u6700\u540e\u4e00\u6b65\u662fprintf()\u5c06\u5176\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u6587\u4ef6\u53e5\u67c4\u3002\u9664\u975e\u6709\u4efb\u4f55\u91cd\u5b9a\u5411\uff0c\u5426\u5219\u8fd9\u901a\u5e38\u662f\u63a7\u5236\u53f0\u3002\u56e0\u6b64\uff0c\u5e93\u51fd\u6570\u6700\u7ec8\u5fc5\u987b\u8c03\u7528WRITE\u7cfb\u7edf\u8c03\u7528\uff0c\u9996\u5148\u5217\u51fa\u6587\u4ef6\u63cf\u8ff0\u7b26(Number)\uff0c\u5176\u6b21\u662f\u6307\u5411\u5b57\u7b26\u4e32\u7684\u6307\u9488\uff0c\u6700\u540e\u662f\u8981\u5199\u5165\u7684\u5b57\u8282\u6570\u3002\n\u5728\u7cfb\u7edf\u8c03\u7528\u7ed3\u675f\u65f6\uff0c\u63a7\u5236\u6743\u4ea4\u56de\u7ed9\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cprintf()\u5fc5\u987b\u5904\u7406\u4eceWRITE\u7cfb\u7edf\u8c03\u7528\u63a5\u6536\u5230\u7684\u4efb\u4f55\u8fd4\u56de\u503c\u3002\u5982\u679c\u6211\u4eec\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u8ddf\u8e2a\u6216strace\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230WRITE\u786e\u5b9e\u662fprintf\u7684\u6700\u7ec8\u76ee\u6807\u3002\n\u5728\u4e0a\u9762\u7684\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230printf()\u51b3\u5b9a\u8c03\u7528WRITE WITH WITE WITH FILE DESCRIPTOR 1(\u8fd9\u662f\u6807\u51c6\u8f93\u51fa)\u548c\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\u201cHello Stephen\u201d(\u6700\u540e13\u4e2a\u5b57\u7b26)\u3002\u8bf7\u6ce8\u610f\uff0cprintf()\u5fc5\u987b\u80fd\u591f\u627e\u5230\u7a7a\u7ec8\u6b62\u7b26(\\0)\u6765\u8ba1\u7b97\u6253\u5370\u5b57\u7b26\u6570\u3002\n\u5f53\u6211\u4eec\u67e5\u770b\u5185\u6838\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u80fd\u591f\u5904\u7406\u5e93\u5982\u4f55\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3002\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u4e2d\u7684\u5927\u591a\u6570\u90fd\u9075\u5faaUNIX SYSV\u7ea6\u5b9a\uff0c\u6bd4\u5982exit\u3001read\u3001write\u7b49\u7b49\uff0c\u5176\u4e2d\u6240\u6709\u5185\u5bb9\u90fd\u662f\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5305\u62ec\u7f51\u7edc\u5957\u63a5\u5b57\u548c\u5b9e\u9645\u6587\u4ef6\u3002\n\u4e0b\u9762\u7684\u4f8b\u5b50\u663e\u793a\u4e86\u6211\u662f\u5982\u4f55\u5b9e\u73b0\u5f00\u653e\u7cfb\u7edf\u8c03\u7528\u7684\u3002\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u7531\u4e8e\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u865a\u62df\u5185\u5b58\uff0c\u56e0\u6b64\u6211\u9700\u8981\u627e\u51fa\u5b83\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u5185\u6838\u53ef\u4ee5\u627e\u5230\u5b83\u3002\u5c06\u4e24\u8005\u6df7\u5408\u6216\u8de8\u8d8a\u6cb3\u6d41\u4ece\u6765\u90fd\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u68c0\u67e5\u7528\u6237\u7ed9\u51fa\u7684\u8def\u5f84(\u7b2c\u4e00\u4e2a\u53c2\u6570)\u662f\u5426\u5728\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u662f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5e76\u5c06\u5176\u94fe\u63a5\u5230\u8be5\u6587\u4ef6\u3002\u6b63\u5982\u60a8\u53ef\u4ee5\u770b\u51fa\u7684\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u7edd\u4e0d\u80fd\u5b8c\u5168\u5904\u7406\u6240\u6709\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u4ef6\uff0c\u5305\u62ec\u8282\u70b9(\u5957\u63a5\u5b57\u3001FIFO\u7b49)\u3002\nC++\u6807\u51c6\u5b9e\u9645\u4e0a\u5305\u542b\u6709\u5173\u6807\u51c6\u5e93\u7684\u4fe1\u606f\u3002\u8fd9\u5305\u62ec\u590d\u6742\u6027\u4fdd\u8bc1\u548c\u5185\u5b58\u5360\u7528\u3002\n\u8be5\u5e93\u8fd8\u6700\u597d\u4e86\u89e3\u5e95\u5c42\u67b6\u6784\u7684\u6240\u6709\u6f0f\u6d1e\u3002\u4f8b\u5982\uff0c\u5982\u679cCPU\u652f\u6301AVX\u6216SSE\u6269\u5c55\uff0cstrcpy(\u5b57\u7b26\u4e32\u590d\u5236)\u5c31\u53ef\u4ee5\u5229\u7528\u5b83\u4eec\u3002\n\u770b\u770b\u6211\u5728\u8fd9\u91cc\u514d\u8d39\u627e\u5230\u7684C++2011\u6807\u51c6\uff0chttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf\u6982\u8ff0\u4e86\u9700\u8981\u652f\u6301\u624d\u80fd\u88ab\u89c6\u4e3aC++\u6807\u51c6\u7684\u4e0d\u540c\u6807\u51c6\u51fd\u6570\u3002\n\u8fd9\u91cc\u53ea\u662f\u7b2c717\u9875\u4e0a\u5bb9\u5668\u5e93\u9700\u6c42\u7684\u4e00\u4e2a\u4f8b\u5b50(731\u662fPDF\u9875\u9762)\u3002\n\u5e93\u7684\u53e6\u4e00\u4e2a\u6709\u8da3\u90e8\u5206\u662f\uff0c\u5b83\u4eec\u7684\u67d0\u4e9b\u90e8\u5206\u53ef\u4ee5\u5e2e\u52a9\u8bed\u8a00\u6b63\u5e38\u8fd0\u884c\u3002\u8fd9\u4e9b\u5e93\u901a\u5e38\u79f0\u4e3a\u8fd0\u884c\u65f6\u3002\u5927\u591a\u6570\u8bed\u8a00\u73b0\u5728\u90fd\u6709\u8fd0\u884c\u5e93\uff0c\u8fd0\u884c\u5e93\u662f\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6267\u884c\u7684\u4ee3\u7801\uff0c\u800c\u4e0d\u662f\u5728\u7f16\u8bd1\u6216\u94fe\u63a5\u65f6\u6267\u884c\u7684\u4ee3\u7801\u3002\n\u4f60\u4eec\u5f53\u4e2d\u6709\u591a\u5c11\u4eba\u771f\u7684\u77e5\u9053int main\u4e0d\u662f\u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u7684\u771f\u6b63\u5207\u5165\u70b9\uff1f\u76f8\u53cd\uff0c\u5b83\u5c5e\u4e8e\u4e00\u4e2a\u540d\u4e3a_start\u7684\u5185\u5b58\u6807\u7b7e\u3002\u8be5\u6807\u7b7e\u662fELF(\u53ef\u6267\u884c\u548c\u53ef\u94fe\u63a5\u683c\u5f0f)\u5165\u53e3\u70b9\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5728\u8be5\u5165\u53e3\u70b9\u8bbe\u7f6e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u3002\n_start\u6700\u7ec8\u5c06\u8c03\u7528int main\uff0c\u4f46\u5b83\u5fc5\u987b\u8bbe\u7f6e\u4e00\u4e9b\u5185\u5bb9\uff0c\u5305\u62ec\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u6216\u8005\u81f3\u5c11\u5c06\u5b83\u4eec\u653e\u5165int argc\u4e2d\uff0c\u4ee5\u53cachar*argv[]\u53c2\u6570\u3002\n\u6211\u4eec\u53ef\u4ee5\u5728crt0.S\u7a0b\u5e8f\u96c6\u6587\u4ef6\u4e2d\u770b\u5230_start\u4f8b\u7a0b\uff0c\u5b83\u4ee3\u8868C\u8fd0\u884c\u65f6\u30020\u662f\u7b2c\u4e00\u4e2a\u8fd0\u884c\u65f6\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u6dfb\u52a0\u66f4\u591a\u7684\u8fd0\u884c\u65f6\uff0c\u6bd4\u5982crt1.S\u7b49\u7b49\u3002\n\u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u770b\u5230\uff0c\u751a\u81f3\u5728\u8c03\u7528main\u4e4b\u524d\uff0cBSS(\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf)\u88ab\u6e05\u9664\u4e3a0\uff0c\u5168\u5c40\u6307\u9488(GP)\u88ab\u8bbe\u7f6e\uff0catexit\u51fd\u6570(\u5168\u5c40\u7ec8\u6b62\u51fd\u6570)\u88ab\u6ce8\u518c\u3002\u6700\u540e\uff0cargc\u3001argv\u548cenvp\u90fd\u627e\u5230\u4e86\u5408\u9002\u7684\u4f4d\u7f6e\u3002\u5bf9\u4e8eRISC-V\uff0c\u8fd9\u662fa0\u3001a1\u548ca2\u3002\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u540e\u53d1\u751f\u7684\u4e8b\u60c5\u662f\u9000\u51fa\u547c\u53eb\u3002\u8fd9\u5c06\u83b7\u53d6Main\u7684\u8fd4\u56de\u503c\uff0c\u8be5\u8fd4\u56de\u503c\u5c06\u4f4d\u4e8e\u5bc4\u5b58\u5668a0\u4e2d\u3002\u5c3e\u90e8\u6307\u4ee4\u610f\u5473\u7740\u5b83\u4e0d\u4f1a\u8fd4\u56de\u3002Call\u548cTail\u90fd\u662fRISC-V\u4e2d\u7684\u4f2a\u6307\u4ee4\uff0c\u53ef\u4ee5\u5728RISC-V\u89c4\u8303\u4e2d\u770b\u5230\uff1a\n\u52a8\u6001\u94fe\u63a5\u8981\u6c42\u6211\u4eec\u5206\u6790\u53ef\u6267\u884c\u548c\u53ef\u94fe\u63a5\u683c\u5f0f(ELF)\uff0c\u8fd9\u6bd4\u6211\u4eec\u5728Rust\u4e2d\u4f7f\u7528\u7684RISC-V\u64cd\u4f5c\u7cfb\u7edf\u66f4\u5f3a\u5927\u4e00\u4e9b\u3002\u52a8\u6001\u94fe\u63a5\u5668\u9700\u8981\u4f4d\u4e8e\u5b58\u50a8\u8bbe\u5907\u67d0\u5904\u7684\u53ef\u6267\u884c\u89e3\u91ca\u5668\u3002\u5b9e\u9645\u4e0a\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4ee5\u4e86\u89e3\u5728\u8c03\u7528\u8fd9\u4e9b\u52a8\u6001\u94fe\u63a5\u7684\u51fd\u6570\u65f6\u5b83\u5c06\u8bf7\u6c42\u54ea\u4e2a\u89e3\u91ca\u5668\u3002\n\u60a8\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5c06\u4f7f\u7528/lib64/ld-linux-x86-64.so.2\u6765\u8fd0\u884c\u6211\u7f16\u8bd1\u7684\u8fd9\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u53ef\u6267\u884c\u6587\u4ef6\u3002\u6211\u4eec\u53ef\u4ee5\u5b9e\u9645\u8fd0\u884c\u90a3\u4e2a\u89e3\u91ca\u5668\uff0c\u770b\u770b\u5b83\u8bf4\u4e86\u4ec0\u4e48\uff1a\n\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0cINTERP\u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u7a0b\u5e8f\u5934\uff0c\u6211\u4eec\u7684\u64cd\u4f5c\u7cfb\u7edf\u5fc5\u987b\u80fd\u591f\u5904\u7406\u5b83\u5e76\u4ea7\u751f\u6307\u5411\u52a8\u6001\u94fe\u63a5\u5668\u7684\u7ebf\u7a0b\u3002\u7136\u800c\uff0c\u8fd9\u8fdc\u8fdc\u8d85\u51fa\u4e86\u6211\u4eec\u7684\u5b9a\u5236\u64cd\u4f5c\u7cfb\u7edf\u6240\u80fd\u5904\u7406\u7684\u8303\u56f4\u3002\u6240\u4ee5\u73b0\u5728\uff0c\u6211\u4eec\u7684\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u5c06\u6807\u51c6\u5e93\u9759\u6001\u94fe\u63a5\u5230\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u3002\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u9700\u8981\u7684\u6240\u6709\u51fd\u6570\u548c\u4f8b\u7a0b\u90fd\u5fc5\u987b\u5b58\u50a8\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u8fd9\u5927\u5927\u589e\u52a0\u4e86\u7a0b\u5e8f\u7684\u5927\u5c0f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5728\u53ef\u6267\u884c\u6587\u4ef6\u7684\u751f\u547d\u5468\u671f\u4e2d\u8fdb\u884c\u7684\u5e93\u51fd\u6570\u8c03\u7528\u7684\u6b21\u6570\u3002\n\u6211\u751a\u81f3\u8fd8\u6ca1\u6709\u5f00\u59cb\u6df1\u5165\u7814\u7a76\u8bbe\u8ba1\u548c\u521b\u5efa\u4e00\u4e2a\u56fe\u4e66\u9986\u3002\u5728\u6211\u7684\u8f6f\u4ef6\u5de5\u7a0b\u8bfe\u7a0b\u4e2d\uff0c\u6211\u5c55\u793a\u4e86\u5e93\u53ef\u4ee5\u662f\u5c06\u8bb8\u591a\u4e0d\u540c\u56e2\u961f\u7684\u4ee3\u7801\u805a\u5408\u5230\u5355\u4e2a\u9879\u76ee\u4e2d\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u5de5\u5177\u3002\u8bf7\u8bb0\u4f4f\uff0c\u6211\u662f\u7528\u4e00\u4e2a\u76f8\u5f53\u4f4e\u5c42\u6b21\u7684\u955c\u5934\u6765\u770b\u8fd9\u4ef6\u4e8b\u7684\u3002\n\u5927\u591a\u6570\u56fe\u4e66\u9986\u90fd\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u4f53\u7cfb\u7ed3\u6784\u548c\u64cd\u4f5c\u7cfb\u7edf\u3002\u8fd9\u7ed9\u5b9a\u5236\u64cd\u4f5c\u7cfb\u7edf\u5e26\u6765\u4e86\u4e00\u4e9b\u6311\u6218\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u6211\u53ea\u662f\u4e3a\u4e86\u907f\u514d\u4ee5\u540e\u7684\u75db\u82e6\u800c\u590d\u5236Linux\u7684\u7ea6\u5b9a\u3002\u4ece\u603b\u4f53\u4e0a\u770b\uff0c\u8fd9\u4f3c\u4e4e\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u3002\u7136\u800c\uff0c\u5b83\u8feb\u4f7f\u60a8\u4ee5\u67d0\u79cd\u65b9\u5f0f\u601d\u8003\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u83b7\u5f97\u4e00\u4e2a\u5927\u7684\u54f2\u5b66-Linux\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4f46\u5b83\u4ecd\u7136\u6709\u4e00\u4e2a\u6838\u5fc3\u7684\u54f2\u5b66\u3002\u4ece\u5b83\u884d\u751f\u51fa\u6765\u7684\u8bb8\u591a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5305\u62ec\u5b89\u5353\uff0c\u73b0\u5728\u90fd\u88ab\u6dd8\u6c70\u4e86\uff0c\u4ee5\u6362\u53d6\u65b0\u7684\u3001\u4ee4\u4eba\u8033\u76ee\u4e00\u65b0\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8c37\u6b4c\u5df2\u7ecf\u542f\u52a8\u4e86Fuchsia\u9879\u76ee\uff0c\u8be5\u9879\u76ee\u65e8\u5728\u6784\u5efa\u4e00\u4e2a\u6a21\u5757\u5316\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4ee5\u53d6\u4ee3\u5176\u79fb\u52a8\u8bbe\u5907\u4e2d\u7684Android\u3002", "note_en": "The standard library contains a ton of code that we don\u2019t want to write ourselves, including printf, scanf, math functions, and so forth. So, we need to make sure our operating system can link to this library and everything \u201cjust works\u201d. This post will show you how I linked our operating system to a standard library, newlib, and the trials and tribulations encountered in doing so.\n      Libraries allow programmers to start writing programs at a higher level. If anyone remembers back to the 80s where personal computers would boot to a BASIC editor, you essentially had to write your programs from scratch.\n The term library just means some place to store code. Generally, this code is an object file of compiled and assembled source code. Shared objects can also be loaded  on-demand, but this requires a little bit of extra support from a dynamic linker. See my post about dynamic linking here:  Dynamic Linking.\n   Many of the most useful routines will be written once and then stored into either a  shared object (so) or an archive (a). We know that libraries allow us to pull in already-written code, but there is a more fundamental reason for a library\u2013to make interfacing with the operating system easy.\n If you\u2019ve read my blog posts on a RISC-V operating system using Rust, you will know how an application can make a request from the operating system itself. Generally, this is done through system calls. These system calls are given a number. For example, in Linux on an x86-64 system, system call #0 is the  exit system call. However, nothing really says that we have to use these numbers.\n If we take a look at libgloss, which is a low-level library written for newlib, we can see the following standard:\n    So, as you can see, the job of a low-level library is to make sure the arguments are in the right location, the system call number is in the correct register, and that the system call is actually made. For RISC-V, the final instruction we execute is  ecall, for \u201cenvironment call\u201d. This instruction will jump us into the operating system. The OS will handle this by first understanding that it is handling a system call. Second, it will look at the system call number and route it to the correct routine.\n  We can see this in terms of a common function, such as printf(). This function will first use the application to form a full string. So, something like printf(\u201cHello %s\u201d, \u201cStephen\u201d) will cause the function to build a string that reads \u201cHello Stephen\\0\u201d. The final step is for printf() to print it to the  stdout file handle. Barring any redirections, this is generally the console. So, the library function(s) must eventually call the  write system call with the file descriptor (number) listed first, a pointer to the string second, and finally the number of bytes to write third.\n At the end of a system call, control is handed back to the user application. In this case, printf() will have to handle whatever return value is received from the write system call. If we perform a system call trace, or strace, we can see that indeed  write is the end goal for printf.\n  In the output above, we can see that printf() decided to call write with file descriptor 1, which is standard output, the string buffer \u201cHello Stephen\u201d, which is lastly 13 characters. Notice that printf() must be able to find the NULL-terminator (\\0) to count the number of  printing characters.\n   When we look in our kernel, we have to be able to handle how the library makes the system call. As you can see, most of these system calls follow the UNIX SYSV convention, such as exit, read, write, and so forth, and where everything this a file descriptor, including network sockets and actual files.\n The example below shows how I implemented the  open system call. You can see that since the application is using virtual memory, I am required to find out where that is in physical memory so the kernel can go find it. Mixing the two or  crossing streams is never a good idea.\n  In the code above, I check to see if the path given by the user (the first parameter) is somewhere in the virtual file system. If it is, then we can create a new file descriptor and link it to that file. As you can tell, this system call is by no means completely able to handle all of the different types of files out there, including nodes (sockets, fifos, etc).\n   The C++ standard actually contains information about the standard library. This includes complexity guarantees and memory footprints.\n The library would also be best to know about all of the exploits of the underlying architecture. For example, strcpy (string copy) can exploit the AVX or SSE extensions if the CPU supports them.\n Looking at the C++ 2011 standard, which I found for free here  http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf outlines the different standard functions that need to be supported to be considered C++ standard.\n Here\u2019s just one example of the requirements for the container library on page 717 (731 is the PDF page).\n    Another interesting part of libraries is that some portions of them can help the language function properly. These libraries are usually called  runtimes. Most languages now have a runtime, which is code that is executed when the program runs, rather than when it is compiled or linked.\n How many of you really knew that  int main is not our real entry point for running a program? Instead, this belongs to a memory label called  _start. This label is the ELF (executable and linkable format) entry point where the operating system will set your application to start running.\n The _start will eventually call int main, but it has to set up some things include command line arguments, or at the very least putting them into the int argc, and char *argv[] parameters.\n We can see the _start routines in the crt0.S assembly file, which stands for C-runtime. The 0 is the first runtime, as more runtimes can be added in different files, such as crt1.S and so forth.\n   You can see in the code above, before main is even called, the BSS (uninitialized global variables) is cleared to 0, the global pointer (gp) is set, and the atexit functions (global termination functions) are registered. Finally, argc, argv, and envp all get their proper locations. For RISC-V, this is a0, a1, and a2.\n You can see that the last thing to occur is the exit call. This will take the return value of main, which will be in the register a0. The  tail instruction means that it will not return. Both call and tail are pseudo-instructions in RISC-V, which can be seen in the RISC-V specification:\n    Dynamic linking requires us to parse the executable and linkable format (ELF) a little bit more robustly than we did in our  RISC-V OS in Rust. The dynamic linker requires an executable  interpreter that lives somewhere on the storage device. You can actually look at an executable file to see what interpreter it will request when those dynamically-linked functions are called.\n  You can see the executable file above is going to use /lib64/ld-linux-x86-64.so.2 to run this simple test executable that I compiled. We can actually run that interpreter and see what it says:\n  As you can see, the INTERP is a particular program header that our operating system would have to be able to handle and spawn a thread to the dynamic linker. However, this was way more than our custom operating system could handle. So now, our operating system will require that the standard library be statically linked into our program. This means that all of the functions and routines that are needed by the program will have to be stored in the executable. This significantly increases the size of our program depending on the number of library function calls made in the lifetime of the executable.\n   I haven\u2019t even begun to dive deeply at all that goes into designing and creating a library. In my software engineering courses, I show that libraries can be a great tool to aggregate many different teams\u2019 code into a single project. Keep in mind that I\u2019m looking at this with a fairly low-level lens.\n Most libraries have a particular architecture and operating system in mind. This leads to some challenges with a custom OS. In fact, more often than not, I ended up copying Linux\u2019s conventions just to avoid pain later. In the grand scheme of things, this might not seem to be a big deal. However, it forces you to think a certain way about an operating system.\n Getting a big philosophical\u2013Linux has changed over the years, but it still has a core philosophy. Many operating systems that were derived from it, including Android, are now being rendered obsolete for a new, refreshing look at operating systems. In fact, Google has started the  Fuchsia project, which aims to build a modular operating system to replace Android in its mobile devices.", "posttime": "2020-11-07 11:12:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u64cd\u4f5c\u7cfb\u7edf,custom", "title": "\u5c06\u6211\u4eec\u7684\u5b9a\u5236\u64cd\u4f5c\u7cfb\u7edf\u4e0e\u6807\u51c6\u5e93\u6302\u94a9", "title_en": "Hooking Up Our Custom OS to a Standard Library", "transed": 1, "url": "https://blog.stephenmarz.com/2020/10/25/hooking-up-our-custom-os-to-a-standard-library/", "via": "", "real_tags": ["\u64cd\u4f5c\u7cfb\u7edf", "custom"]}, {"category": "", "categoryclass": "", "imagename": "bbfd7dbe51e4897c859474ed83e2c561.png", "infoid": 1033608, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5957\u7528\u72ec\u7acb\u4e50\u961fCracker\u7684\u8bdd\u8bf4\uff0c\u73b0\u5728\u4e16\u754c\u9700\u8981\u7684\u662f\u53e6\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u6bd4\u5982\u6211\u9700\u8981\u5728\u8111\u888b\u4e0a\u6253\u4e2a\u6d1e\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u56f4\u68cb\u5df2\u7ecf\u6162\u6162\u5730\uff0c\u4f46\u80af\u5b9a\u5730\u50cf\u4e00\u68f5\u722c\u884c\u7684\u85e4\u8513\u4e00\u6837\u6df9\u6ca1\u4e86\u5f00\u53d1\u754c\uff0c\u4ee5\u4e00\u79cd\u90c1\u90c1\u8471\u8471-\u5728\u8bb8\u591a\u65b9\u9762\u90fd\u662f\u4f18\u8d8a\u7684-\u7f16\u7a0b\u529b\u91cf\u7684\u63a9\u62a4\u8986\u76d6\u4e86\u5b83\u4e4b\u524d\u7684\u4e00\u5207\u3002\u968f\u7740\u5b83\u8d8a\u6765\u8d8a\u53d7\u6b22\u8fce\uff0c\u4f60\u6709\u5f88\u591a\u7406\u7531\u5e94\u8be5\u4ed4\u7ec6\u770b\u770b\u3002\n\u636e\u8bf4\uff0c\u8c37\u6b4c\u5de5\u7a0b\u5e08\u5728\u7b49\u5f85\u5176\u4ed6\u7a0b\u5e8f\u7f16\u8bd1\u7684\u540c\u65f6\u8bbe\u8ba1\u4e86\u56f4\u68cb\u3002\u4ed6\u4eec\u5bf9\u5de5\u5177\u96c6\u7684\u5931\u671b\u8feb\u4f7f\u4ed6\u4eec\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u601d\u8003\u7cfb\u7edf\u7f16\u7a0b\uff0c\u521b\u5efa\u4e86\u4e00\u4e2a\u7cbe\u7b80\u3001\u7b80\u964b\u4e14\u7ecf\u8fc7\u7f16\u8bd1\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5141\u8bb8\u5728\u538b\u529b\u4e0b\u5b9e\u73b0\u5927\u89c4\u6a21\u591a\u7ebf\u7a0b\u3001\u5e76\u53d1\u6027\u548c\u6027\u80fd\u3002\n\u5728\u73b0\u4ee3\u786c\u4ef6\u4e0a\u8fd0\u884cGo--\u751a\u81f3\u5728\u5bb9\u5668\u5185\u6216\u5728\u865a\u62df\u673a\u4e0a\u8fd0\u884cGo--\u53ef\u80fd\u662f\u4e00\u79cd\u771f\u6b63\u7684\u4e50\u8da3\u3002\u7531\u4e8eGO\u662f\u4e3a\u5728\u591a\u6838\u4e0a\u8fd0\u884c\u800c\u8bbe\u8ba1\u7684\uff0c\u56e0\u6b64\u5b83\u88ab\u6784\u5efa\u4e3a\u652f\u6301\u5e76\u53d1\u6027\u548c\u968f\u7740\u6838\u7684\u6dfb\u52a0\u800c\u6269\u5c55\u3002\u6b64\u5916\uff0c\u5b83\u7684\u591a\u7ebf\u7a0b\u529f\u80fd--\u5c24\u5176\u662f\u5b83\u7684Goroutines--\u662f\u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u4e14\u53d7\u6b22\u8fce\u7684\u65b0\u529f\u80fd\u3002\n\u5728\u6211\u4eec\u6df1\u5165\u7814\u7a76\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u6765\u770b\u770bGoroutines\u3002\u8fd9\u4e9b\u672c\u8d28\u4e0a\u662f\u5728\u7a0b\u5e8f\u5176\u4f59\u90e8\u5206\u5b8c\u6210\u65f6\u8fd0\u884c\u7684\u5e76\u53d1\u51fd\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2aGoroutine\uff0c\u8ba9\u5b83\u8fd0\u884c\uff0c\u5e76\u5728\u5b83\u53ca\u5176\u6570\u5343\u4e2a\u5144\u5f1f\u8fdb\u7a0b\u5728\u540e\u53f0\u8fd0\u884c\u65f6\u7ee7\u7eed\u8fd0\u884c\u3002\u7f51\u7edc\u8d85\u65f6\uff1f\u4e0d\u8981\u62c5\u5fc3\uff0c\u5f53\u4e3b\u5faa\u73af\u7ee7\u7eed\u65f6\uff0c\u60a8\u7684Goroutine\u5c06\u4f1a\u5904\u7406\u5b83\u3002\u6570\u636e\u5e93\u5b8c\u5168\u6545\u969c\uff1f\u4f60\u7684Goroutine\u4f1a\u77e5\u9053\u7684\uff0c\u4f60\u53ef\u4ee5\u4f18\u96c5\u5730\u7ed5\u8fc7\u8fd9\u4e2a\u95ee\u9898\u3002\n\u7a0b\u5e8f\u5305mainimport(&#34\uff1bfmt&#34\uff1b&#34\uff1b)func Hello(){fmt.Println(&#34\uff1bHello world goroutine&#34\uff1b)}func main(){go Hello()time.Sept(1*time.Second)fmt.Println(&#34\uff1bmain function&#34\uff1b)}\u3002\nMain\u51fd\u6570\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u5728C\u4e2d\u4e00\u6837\u3002\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0cmain\u89e6\u53d1\u4e00\u4e2a\u79f0\u4e3aHello()\u7684goroutine(\u7531go\u5173\u952e\u5b57\u6307\u793a)\u3002\u8be5\u7a0b\u5e8f\u4f1a\u5feb\u901f\u6253\u4e2a\u76f9\uff0c\u7136\u540e\u7ee7\u7eed\u3002\u5982\u679cHello()\u51fd\u6570\u4e2d\u53d1\u751f\u4efb\u4f55\u4e8b\u60c5\uff0cmain\u51fd\u6570\u90fd\u4e0d\u4f1a\u6ce8\u610f\u5230\u3002\u6700\u91cd\u8981\u7684\u662f\u5de5\u4f5c\u5df2\u7ecf\u5b8c\u6210\u3002\n\u5f53main\u4f8b\u7a0b\u9192\u6765\u5e76\u53d1\u51fa\u4e00\u4e2aPrintln\u65f6\uff0c\u7a0b\u5e8f\u7ed3\u675f\u3002Hello()\u51fd\u6570\u53ef\u4ee5\u662f\u4efb\u4f55\u4e1c\u897f--\u6570\u636e\u8c03\u7528\u3001\u4e8b\u52a1\u3001\u961f\u5217\u6761\u76ee--\u5b83\u4f1a\u5728\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u8fd0\u884c\u65f6\u8fd0\u884c\u3002\u5c31\u50cf\u524d\u9762\u63d0\u5230\u7684\u85e4\u672c\u690d\u7269\u4e00\u6837\uff0c\u53ef\u4ee5\u628aGoroutine\u770b\u4f5c\u662f\u5c0f\u82b1\uff0c\u5b83\u4eec\u4f1a\u5728\u4e3b\u85e4\u7ee7\u7eed\u751f\u957f\u7684\u540c\u65f6\u5206\u679d\u67af\u6b7b\u3002\n\u60f3\u770b\u770b\u5b83\u7684\u5b9e\u9645\u6548\u679c\u5417\uff1f\u770b\u770bGo\u6e38\u4e50\u573a\u4e0a\u7684\u8fd9\u6bb5\u89c6\u9891\uff0c\u4f60\u4f1a\u770b\u5230\u5927\u7329\u7329\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\u4ec5\u6b64\u4e00\u9879\u529f\u80fd\u5c31\u503c\u5f97\u5165\u573a\u8d39\u3002\u5bf9\u4e8eWeb\u5e94\u7528\u7a0b\u5e8f\uff0cGoroutines\u53ef\u4ee5\u8ba9\u4f60\u5728\u8fd0\u884c\u5e76\u53d1\u4f5c\u4e1a\u7684\u540c\u65f6\u907f\u5f00\u8def\u969c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6b63\u5728\u7b49\u5f85\u6570\u636e\u8f93\u5165\uff0c\u5219\u5373\u4f7f\u7528\u6237\u6b63\u5728\u6253\u5b57\uff0cGoroutine\u4e5f\u53ef\u4ee5\u89e6\u53d1\u4ee5\u63d0\u4f9b\u9884\u5148\u586b\u5145\u7684\u6587\u672c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f\u5e76\u53d1\u8fdb\u7a0b\u82b1\u8d39\u7684\u65f6\u95f4\u6bd4\u9884\u671f\u7684\u8981\u957f\uff0c\u60a8\u7684\u7a0b\u5e8f\u4e5f\u4f1a\u7ee7\u7eed\u8fd0\u884c\u3002\n\u7eb3\u7ef4\u6069\u00b7\u62c9\u9a6c\u7eb3\u5766\u5728\u56f4\u68cb\u5b66\u4e60\u8d44\u6e90GoLangBot\u4e0a\u5199\u9053\uff1a\u201cGoroutine\u88ab\u591a\u8def\u4f20\u8f93\u5230\u66f4\u5c11\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u4e0a\u3002\u201d\u201c\u5728\u5305\u542b\u6570\u5343\u4e2aGoroutine\u7684\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u3002\u5982\u679c\u7ebf\u7a0b\u4e2d\u6709\u4efb\u4f55Goroutine\u963b\u585e(\u6bd4\u65b9\u8bf4\uff0c\u7b49\u5f85\u7528\u6237\u8f93\u5165)\uff0c\u5219\u521b\u5efa\u53e6\u4e00\u4e2aOS\u7ebf\u7a0b\uff0c\u5e76\u5c06\u5269\u4f59\u7684Goroutine\u79fb\u52a8\u5230\u65b0\u7684OS\u7ebf\u7a0b\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u7531\u8fd0\u884c\u65f6\u8d1f\u8d23\uff0c\u4f5c\u4e3a\u7a0b\u5e8f\u5458\uff0c\u6211\u4eec\u4ece\u8fd9\u4e9b\u590d\u6742\u7684\u7ec6\u8282\u4e2d\u62bd\u8c61\u51fa\u6765\uff0c\u5e76\u88ab\u8d4b\u4e88\u4e00\u4e2a\u5e72\u51c0\u7684API\u6765\u5904\u7406\u5e76\u53d1\u6027\u3002\u201c\u3002\n\u8fd1\u5e74\u6765\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u770b\u5230\u4e00\u4e9btweet\u6216\u535a\u5ba2\u8ba4\u4e3aGo\u6bd4Perl/Python/C/\u7b49\u7b49\u66f4\u597d\u3002\u6211\u4eec\u90fd\u5728\u4f7f\u7528\u4e00\u4e9b\u4e1c\u897f-\u89c1\u9b3c\uff0c\u6211\u751a\u81f3\u4f7f\u7528\u547d\u4ee4\u884cPHP-\u5728\u6211\u4eec\u7684\u670d\u52a1\u5668\u4e0a\u505a\u4e00\u4e9b\u5c0f\u4e8b\u60c5\u3002\u60f3\u770b\u6728\u5934\u5417\uff1fPerl\u3002\u60f3\u8981\u5b9a\u671f\u53d1\u63a8\u6587\u5417\uff1f\u87d2\u86c7\u3002\u60f3\u8981\u7ba1\u7406\u6765\u81ea\u6570\u5343\u4e2a\u5e76\u53d1\u7528\u6237\u7684\u4f20\u5165\u6570\u636e\u5417\uff1fJava\u6216C++\u4e00\u76f4\u662f\u60a8\u7684\u7b54\u6848\u3002\u90a3\u4e48\u56f4\u68cb\u662f\u4e0d\u662f\u201c\u66f4\u597d\u201d\u4e86\u5462\uff1f\n\u597d\u5427\uff0c\u53bb\u5427\uff0c\u8fd9\u4e00\u5207\u6211\u90fd\u80fd\u505a\u5230\u3002Go\u786e\u4fdd\u60a8\u7684\u5de5\u5177\u7bb1\u53ef\u5728\u6240\u6709\u5e73\u53f0\u548c\u6240\u6709\u786c\u4ef6\u4e0a\u7f16\u8bd1\u3002\u5b83\u4f7f\u7528\u4e86\u4e00\u79cd\u4ee4\u4eba\u60ca\u8bb6\u7684\u7b80\u5355\u7684\u5305\u7ba1\u7406\u89e3\u51b3\u65b9\u6848\uff0c\u8be5\u89e3\u51b3\u65b9\u6848\u201c\u6070\u5230\u597d\u5904\u201d\uff0c\u800c\u4e14\u975e\u5e38\u4fbf\u643a\u3002\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7528Go\u66ff\u6362\u4f60\u7684\u811a\u672c\u8bed\u8a00\uff0c\u5f53\u4f60\u7684\u7f16\u8bd1\u8bed\u8a00\u4e0eGo\u89e3\u51b3\u65b9\u6848\u76f8\u6bd4\u8f83\u65f6\uff0c\u4f60\u7684\u7f16\u8bd1\u8bed\u8a00\u80af\u5b9a\u4f1a\u53d8\u5f97\u7269\u6709\u6240\u503c\u3002\n\u56f4\u68cb\u662f\u4e3a\u5f53\u4eca\u7684\u8f6f\u4ef6\u5de5\u7a0b\u800c\u8bbe\u8ba1\u7684\u3002\u4e0d\u662f\u6240\u6709\u7684\u65b0\u4e8b\u7269\u90fd\u662f\u5b8c\u7f8e\u7684\uff0c\u4f46\u662f\u5f53\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u5b8c\u5168\u9488\u5bf9\u6211\u4eec\u5927\u591a\u6570\u4eba\u73b0\u5728\u4f7f\u7528\u7684\u73af\u5883\u800c\u8bbe\u8ba1\u65f6--\u53ef\u6269\u5c55\u7684\u3001\u57fa\u4e8e\u4e91\u7684\u3001\u6027\u80fd\u4f18\u5316\u7684\u670d\u52a1\u5668--\u5f88\u591a\u4e8b\u60c5\u90fd\u53ef\u4ee5\u505a\u5f97\u5f88\u597d\u3002Go\u51e0\u4e4e\u53ef\u4ee5\u5728\u4efb\u4f55\u673a\u5668\u4e0a\u7f16\u8bd1\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u521b\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u6216\u4e00\u4e2a\u5de5\u5177\u6765\u6e05\u7406\u4f20\u5165\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\u3002\u548c\u4e4b\u524d\u7684Perl\u4e00\u6837\uff0cGo\u662f\u4e00\u628a\u745e\u58eb\u519b\u5200\uff0c\u4f46\u5b83\u53bb\u6389\u4e86\u8fc7\u53bb\u51e0\u5341\u5e74\u6765\u5728\u7f16\u7a0b\u5e73\u53f0\u4e0a\u589e\u52a0\u7684\u6240\u6709\u5f00\u9500\u548c\u989d\u5916\u7684\u5783\u573e\u3002\n\u56f4\u68cb\u5f88\u7b80\u5355\u3002\u4f5c\u4e3a\u4e00\u540d\u5f00\u53d1\u4eba\u5458\uff0c\u6211\u80fd\u591f\u5728\u4e00\u4e2a\u957f\u5468\u672b\u5b66\u4e60\u8bed\u8a00\u548c\u6846\u67b6\u3002\u8fd9\u8ba9\u6211\u4e86\u89e3\u4e86\u51e0\u4e2a\u91cd\u8981\u7684\u5e73\u53f0\uff0c\u800c\u4e14\uff0c\u56e0\u4e3a\u6211\u4e0d\u9700\u8981\u6bcf\u5929\u7f16\u5199\u4ee3\u7801\uff0c\u6240\u4ee5\u5728\u521b\u5efa\u5c0f\u7684\u526f\u4ea7\u54c1\u65f6\uff0c\u6709\u8db3\u591f\u7684\u7ef3\u7d22\u8ba9\u6211\u4e0a\u540a\u3002\u56f4\u68cb\u5c31\u4e0d\u540c\u4e86\u3002\u5bf9\u4e8e\u5df2\u7ecf\u4e86\u89e3\u7f16\u7a0b\u57fa\u7840\u6216\u5176\u4ed6\u51e0\u95e8\u8bed\u8a00\u7684\u4eba\u6765\u8bf4\uff0c\u5b66\u4e60\u56f4\u68cb\u6700\u591a\u53ea\u9700\u8981\u51e0\u4e2a\u5c0f\u65f6\u3002\u4e00\u65e6\u60a8\u4e86\u89e3\u4e86\u5b83\u7684\u8bc0\u7a8d\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u7f16\u5199\u4ee3\u7801\u4e86\u3002\u540c\u6837\uff0c\u56e0\u4e3a\u5b83\u592a\u5feb\u4e86\uff0c\u60a8\u4f1a\u60f3\u8981\u5c06\u5b83\u7528\u4e8e\u60a8\u4f7f\u7528\u547d\u4ee4\u884c\u89e3\u91ca\u5668\u8fdb\u884c\u7684\u51e0\u4e4e\u6240\u6709\u64cd\u4f5c\uff0c\u4ece\u800c\u53d6\u4ee3\u60a8\u7684bash\u811a\u672c\u3001Python\u8349\u56fe\u548cJava\u5de5\u4f5c\u3002\n\u8d70\u5f97\u5f88\u5feb\u3002\u770b\u770b\u7a46\u7f55\u9ed8\u5fb7\u00b7\u6cd5\u8fea\u5c14\u7684\u300a\u56f4\u68cb\u300b\u4e2d\u8fd9\u5f20\u806a\u660e\u7684\u5f85\u529e\u4e8b\u9879\u6e05\u5355\u5427\u3002\u4ee3\u7801\u975e\u5e38\u7b80\u5355--\u5728Docker\u4e2d\u5efa\u7acb\u4e00\u4e2aMySQL\u6570\u636e\u5e93\uff0c\u6dfb\u52a0\u4e00\u4e9bHTML\uff0c\u51e0\u4e4e\u7acb\u523b\u5c31\u4f1a\u6709\u4e00\u4e2a\u5728\u547d\u4ee4\u884c\u7f16\u8bd1\u7684\u8d85\u9ad8\u901fWeb\u5e94\u7528\u7a0b\u5e8f\u3002\u6b64\u5916\uff0c\u6cd5\u8fea\u5c14\u8fd8\u63a2\u8ba8\u4e86\u4ed6\u4e3a\u4ec0\u4e48\u559c\u6b22\u56f4\u68cb\uff1a\u901f\u5ea6\u3002\n\u5728regex\u6d4b\u8bd5\u4e2d\uff0cregex-redux-go\u8fd0\u884c\u65f6\u95f4\u4e3a3.55\u79d2\uff0c\u800cJava\u8fd0\u884c\u65f6\u95f4\u4e3a5.58\u79d2\u3002\u56f4\u68cb\u7a0b\u5e8f\u5305\u542b102\u884c\u4ee3\u7801\uff0c\u800cJava\u7a0b\u5e8f\u5305\u542b70\u884c\u4ee3\u7801\u3002\u8bda\u7136\uff0cGo\u786e\u5b9e\u6bd4Java\u7a0d\u5f3a\u4e00\u4e9b\uff0c\u4f46\u8003\u8651\u5230Go\u51fb\u8d25\u4e86\u4e0b\u4e00\u4e2a\u6700\u6d41\u884c\u7684\u7cfb\u7edf\u8bed\u8a00\u7684\u901f\u5ea6\uff0c\u5f88\u660e\u663e\u4f60\u6ca1\u6709\u727a\u7272\u901f\u5ea6\u3002\n\u968f\u7740Go\u4f5c\u4e3a\u5fae\u670d\u52a1\u548c\u7f51\u7edc\u7684\u6807\u51c6\u8bed\u8a00\u53d8\u5f97\u8d8a\u6765\u8d8a\u6709\u7528\uff0cGo\u6b63\u5728\u63a5\u7ba1\u8bb8\u591a\u5f00\u6e90\u548c\u79c1\u4eba\u9879\u76ee\u3002\u5b83\u53ef\u80fd\u5f00\u59cb\u53d6\u4ee3\u6027\u80fd\u8f83\u5dee\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5982Java\u548cC\u3002\n\u4e0d\u8981\u8f7b\u4fe1\u6211\u7684\u8bdd\u3002\u6709\u5173\u7f16\u5199Web\u5e94\u7528\u7a0b\u5e8f\u3001\u547d\u4ee4\u884c\u5de5\u5177\u548c\u670d\u52a1\u7684\u5efa\u8bae\uff0c\u8bf7\u8bbf\u95eeGoLang.org\u3002\n\u201c\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u76f8\u4fe1\u56f4\u68cb\u662f\u65b0\u7684Java\u3002\u8bb8\u591a\u5f00\u6e90\u9879\u76ee(\u4f8b\u5982Jaeger\u3001Kubernetes\u3001Docker\u3001InfluxDB\u3001Serf\u7b49)\u3002\u73b0\u5728\u90fd\u662f\u7528\u56f4\u68cb\u5199\u7684\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8f83\u8001\u7684\u9879\u76ee(\u4f8b\u5982\uff0cApache Kafka\u3001Apache Hadoop\u3001Apache Spark\u7b49)\u3002\u90fd\u662f\u7528Java\u7f16\u5199\u7684\u3002\u201cFadhil\u5199\u9053\u3002\n\u56f4\u68cb\u5c31\u50cf\u56fd\u9645\u8c61\u68cb\uff0c\u6216\u8005\uff0c\u55ef\uff0c\u56f4\u68cb\uff1a\u5b83\u9700\u8981\u7247\u523b\u7684\u65f6\u95f4\u6765\u5b66\u4e60\uff0c\u9700\u8981\u4e00\u751f\u7684\u65f6\u95f4\u6765\u638c\u63e1\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4e0e\u56fd\u9645\u8c61\u68cb\u4e0d\u540c\uff0c\u56f4\u68cb\u7684\u96be\u5ea6\u968f\u7740\u7ecf\u9a8c\u7684\u589e\u52a0\u800c\u964d\u4f4e\uff0c\u5f88\u5feb\u4f60\u5c31\u53ef\u4ee5\u7528\u4e16\u754c\u4e0a\u6700\u73b0\u4ee3\u7684\u8bed\u8a00\u4e4b\u4e00\u7f16\u5199\u901f\u5ea6\u5feb\u3001\u901f\u5ea6\u5feb\u7684\u7a0b\u5e8f\u4e86\u3002\n\u6807\u7b7e\uff1aGo\uff0cGolang", "note_en": "To paraphrase the indie band Cracker, what the world needs now is another programming language like I need a hole in the head. That said, Go has slowly\u00a0 but surely  inundated the development world like a creeping vine, covering everything that came before it in a lush\u2014and in many ways superior\u2014cover of programming power. With its growing popularity, there are a number of reasons you should take a closer look at it.\n The story goes that Google engineers designed Go while waiting for other programs to compile. Their frustration at their toolset forced them to rethink system programming from the ground up, creating a lean, mean, and compiled solution that allows for massive multithreading, concurrency, and performance under pressure.\n Running Go on modern hardware\u2014and even inside containers or on virtual machines\u2014can be a real pleasure. Because Go was designed to run on multiple cores, it is built to support concurrency and scale as cores are added. Further, its multithreading capabilities\u2014most specifically, its goroutines\u2014are a surprising and welcome addition to your bag of tricks.\n  Before we dig in further, let\u2019s look at goroutines. These are essentially concurrent functions that run while the rest of the program completes. In other words, you can fire off a goroutine, have it run, and keep going while it and thousands of its brethren process in the background. Network timeout? Don\u2019t worry, your goroutine will manage it while the main loop continues. Complete database failure? Your goroutine will know, and you can gracefully work around the issue.\n  package mainimport ( &#34;fmt&#34; &#34;time&#34;)func hello() { fmt.Println(&#34;Hello world goroutine&#34;)}func main() { go hello() time.Sleep(1 * time.Second) fmt.Println(&#34;main function&#34;)}\n The  main function works just like it does in C. In this code,  main fires off a goroutine\u2014indicated by  the  go keyword\u2014called  hello(). The program takes a quick nap and then continues. If anything were to happen in the  hello() function, the  main function wouldn\u2019t notice. All that\u2019s important is the work is done.\n The program finishes when the  main routine wakes up and fires off a  Println. The  hello() function could be anything\u2014a data call, a transaction, a queue entry\u2014and it would run while the rest of the program churns along. Like the aforementioned vine, think of goroutines as little flowers that branch off and die while the main vine keeps going.\n Want to see it in action? Check out  this snippet at the Go Playground and you\u2019ll see just how goroutines work.\n This feature alone is worth the price of admission. For web apps, goroutines let you run concurrent jobs while avoiding roadblocks. If you\u2019re waiting for data input, for example, a goroutine can fire off to supply pre-populated text even as the user is typing. In other words, your program will keep running even if the concurrent processes take longer than expected.\n  \u201cThe Goroutines are multiplexed to fewer number of OS threads,\u201d  wrote Naveen Ramanathan\u00a0 on GoLangBot, a Go learning resource. \u201cThere might be only one thread in a program with thousands of Goroutines. If any Goroutine in that thread blocks, say, waiting for user input, then another OS thread is created and the remaining Goroutines are moved to the new OS thread. All these are taken care of by the runtime and we, as programmers, are abstracted from these intricate details and are given a clean API to work with concurrency.\u201d\n  You\u2019ve probably seen some tweets or blogs in recent years arguing that Go is better than Perl/Python/C/etc. We\u2019ve all been using something\u2014heck, I even use command line PHP\u2014to do little things on our servers. Want to watch a log? Perl. Want to send out regular tweets? Python. Want to manage incoming data from thousands of concurrent users? Java or C++ was always your answer. So is Go \u201cbetter\u201d?\n Well, Go, can do all of that. Go ensures that your toolbox is compilable across all platforms and on all hardware. It uses a surprisingly simple package management solution that \u201cjust works\u201d and it is extremely portable. You can easily replace your scripting languages with Go and your compiled languages will definitely get a run for their money when stacked against Go solutions.\n Go is built for software engineering today. Not everything new is great, but when a programming language is designed for exactly the environment most of us use right now\u2014scalable, cloud-based servers that are optimized for performance\u2014a lot can go right. Go is compilable on nearly any machine, so you can use it to create a full webapp or a tool to clean up incoming data for processing. Like Perl before it, Go is a Swiss Army knife, but one that has stripped off all of the overhead and extra junk that has accreted onto programming platforms over the past few decades.\n Go is simple. As a dev, I\u2019ve been able to pick up languages and frameworks over a long weekend. This gives me an understanding of a few important platforms and, since I don\u2019t have to code daily, enough rope to hang myself when it comes to creating little side projects. Go has been different. For folks who already know the basics of programming or a few other languages, learning Go takes a few hours at most. Once you know its tricks, you\u2019re ready to code. Again, because it is so fast, you\u2019ll want to use it for nearly everything you used command line interpreters for, thereby replacing your bash scripts, Python sketches, and Java efforts.\n Go is fast. Take a look at this clever  to-do list in Go by Mohamad Fadhil. The code is quite simple\u2014set up a MySQL database in Docker, add in a bit of HTML, and almost instantly you have a super fast web app that compiles at the command line. What\u2019s more, Fadhil explores why he likes Go in the first place: speed.\n In a regex test\u2014 regex-redux \u2014Go ran in 3.55 seconds while Java ran in 5.58. The Go program weighed in at 102 lines of code, while the Java program weighed in at 70. True, Go was a little heftier than Java, but given the speed at which Go bested the next most popular system language, it\u2019s clear you\u2019re not sacrificing speed.\n Go is on course to take over many open source and private projects and as it becomes more useful as a standard language for both microservices and the web. It could start replacing less performant solutions like Java and C.\n Don\u2019t take my word for it.  Check out GoLang.org for advice on writing web applications, command line tools, and services.\n \u201cPersonally, I believe Go is the new Java. Many open-source projects (e.g., Jaeger, Kubernetes, Docker, InfluxDB, Serf, etc.) are now written in Go. In contrast, the older projects (e.g., Apache Kafka, Apache Hadoop, Apache Spark, etc.) are written in Java,\u201d wrote Fadhil.\n Go is like chess or, well, the game of Go: it takes a moment to learn and a lifetime to master. Luckily, unlike chess, Go\u2019s difficulty goes down with experience and soon you\u2019ll be coding fast and furious programs in one of the world\u2019s most modern languages.\n Tags:  go,  golang", "posttime": "2020-11-07 11:12:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56f4\u68cb,great", "title": "\u56f4\u68cb\u6709\u4ec0\u4e48\u597d\u7684\uff1f", "title_en": "What's so great about Go?", "transed": 1, "url": "https://stackoverflow.blog/2020/11/02/go-golang-learn-fast-programming-languages/", "via": "", "real_tags": ["\u56f4\u68cb", "great"]}, {"category": "", "categoryclass": "", "imagename": "f5c9099dc638b16febf872f523ed0dfa.png", "infoid": 1033607, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u9762\u662f\u4e00\u7ec4\u56fe\u8868\uff0c\u5c55\u793a\u4e86\u4e3a\u4e86\u6210\u4e3a\u4e00\u540d\u6570\u636e\u79d1\u5b66\u5bb6\u3001\u673a\u5668\u5b66\u4e60\u4e13\u5bb6\u6216\u4eba\u5de5\u667a\u80fd\u4e13\u5bb6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u7684\u9053\u8def\u548c\u4f60\u60f3\u8981\u91c7\u7528\u7684\u6280\u672f\u3002\u6211\u4eec\u4e3a\u6211\u4eec\u7684\u65b0\u5458\u5de5\u5236\u4f5c\u4e86\u8fd9\u4e9b\u56fe\u8868\uff0c\u8ba9\u4ed6\u4eec\u6210\u4e3a\u4eba\u5de5\u667a\u80fd\u4e13\u5bb6\uff0c\u4f46\u6211\u4eec\u60f3\u5728\u8fd9\u91cc\u5206\u4eab\u5b83\u4eec\uff0c\u4ee5\u5e2e\u52a9\u793e\u533a\u3002\n\u5982\u679c\u4f60\u6709\u5174\u8da3\u6210\u4e3a\u5fb7\u56fdAMAI(\u6253\u5f00\u65b0\u7a97\u53e3)\u7684\u4eba\u5de5\u667a\u80fd\u4e13\u5bb6\uff0c\u6216\u8005\u4f60\u60f3\u8058\u8bf7\u4eba\u5de5\u667a\u80fd\u4e13\u5bb6\uff0c\u8bf7\u8bf4hi@am.ai\u3002\n\u6709\u5173\u5217\u8868\u4e2d\u6bcf\u4e2a\u9879\u76ee\u7b26\u53f7\u7684\u4e92\u52a8\u7248\u672c\uff0c\u8bf7\u8bbf\u95eei.am.ai/\ud83d\udc49(\u6253\u5f00\u65b0\u7a97\u53e3)\ud83d\udc48\u3002\n\u8981\u63a5\u6536\u66f4\u65b0\uff0c\u8bf7\u70b9\u51fb\u2b50\ufe0f(\u6253\u5f00\u65b0\u7a97\u53e3)\uff0c\u89c2\u770b\ud83d\udc40GitHub Repo(\u6253\u5f00\u65b0\u7a97\u53e3)\uff0c\u5f53\u6211\u4eec\u6dfb\u52a0\u65b0\u5185\u5bb9\u5e76\u4fdd\u6301\u5728\u6700\u65b0\u7814\u7a76\u7684\u9876\u90e8\u65f6\uff0c\u6211\u4eec\u4f1a\u6536\u5230\u901a\u77e5\u3002\n\u8fd9\u4e9b\u8def\u7ebf\u56fe\u7684\u76ee\u7684\u662f\u7ed9\u4f60\u4e00\u4e2a\u5173\u4e8e\u98ce\u666f\u7684\u60f3\u6cd5\uff0c\u5982\u679c\u4f60\u5bf9\u4e0b\u4e00\u6b65\u8981\u5b66\u4ec0\u4e48\u611f\u5230\u56f0\u60d1\uff0c\u4e5f\u662f\u4e3a\u4e86\u6307\u5bfc\u4f60\uff0c\u800c\u4e0d\u662f\u9f13\u52b1\u4f60\u6311\u9009\u4ec0\u4e48\u662f\u65f6\u9ae6\u7684\u548c\u65f6\u9ae6\u7684\u3002\u4f60\u5e94\u8be5\u52a0\u6df1\u5bf9\u4e3a\u4ec0\u4e48\u4e00\u79cd\u5de5\u5177\u6bd4\u53e6\u4e00\u79cd\u66f4\u9002\u5408\u67d0\u4e9b\u60c5\u51b5\u7684\u7406\u89e3\uff0c\u8bb0\u4f4f\u65f6\u9ae6\u5e76\u4e0d\u610f\u5473\u7740\u6700\u9002\u5408\u8fd9\u9879\u5de5\u4f5c\u3002\nGit-\u5e26\u6709\u4ee3\u7801\u4e2a\u4eba\u63a8\u8350\u7684\u7248\u672c\u63a7\u5236\u6587\u4ef6\uff01\u53ef\u7528\u9009\u9879\u6570\u636e\u79d1\u5b66\u5bb6\u5927\u6570\u636e\u5de5\u7a0b\u5e08\u673a\u5668\u5b66\u4e60...\u30022020\u5e74\u4efb\u4f55\u8def\u5f84AI\u4e13\u5bb6\u90fd\u9700\u8981\u6df1\u5ea6\u5b66\u4e60\u6570\u636e\u5de5\u7a0b\u5e08\u9009\u62e9\u60a8\u7684\u8def\u5f84\u56fe\u4f8b\u8bed\u4e49\u7248\u672c\u63a7\u5236\u4fdd\u7559ChangeLog\u67e5\u770b\u5668\u4e0d\u652f\u6301\u5b8c\u6574\u7684SVG 1.1\u3002\n\u6570\u636e\u79d1\u5b66\u5bb6\u77e9\u9635\u4e0e\u7ebf\u6027\u4ee3\u6570\u5085\u7acb\u53f6\u3002\u6570\u636e\u5e93\u57fa\u7840\u77e5\u8bc6\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e0e\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93SQL+JOIN(\u5185\u90e8\u3001\u5916\u90e8\u3001\u4ea4\u53c9\u3001...\u3002NoSQL\u8868\u683c\u6570\u636e\u6846\u548c\u7cfb\u5217%3CmxGra...\u3002\u63d0\u53d6\u3001\u8f6c\u6362\u3001\u52a0\u8f7d(et...\u3002\u62a5\u544aVS BI VS\u5206\u6790\u6570\u636e\u683c\u5f0fJSON XML\u6b63\u5219\u8868\u8fbe\u5f0f(RegEx)\u6982\u7387\u7406\u8bba\u6982\u7387\u5206\u5e03\u968f\u673a\u6027\uff0c\u968f\u673a\u53d8\u91cf\u548c...\u3002\u6761\u4ef6\u6982\u7387\u548c..\u3002(\u7edf\u8ba1)\u72ec\u7acb\u6027iid CDF\uff0cpdf\uff0cpmf\u8fde\u7eed\u5206\u5e03(pd\u2026\u3002\u7d2f\u79ef\u5206\u5e03\u51fd\u6570(CD...\u3002\u6982\u7387\u5bc6\u5ea6\u51fd\u6570(Pdf)\u6982\u7387\u8d28\u91cf\u51fd\u6570(PMF)\u6b63\u6001/\u9ad8\u65af\u5747\u5300(\u8fde\u7eed)Beta-Dirichlet\u6307\u6570\u5747\u5300(\u79bb\u6563)\u79bb\u6563\u5206\u5e03(PMF&#39\uff1b...=\u2018class1\u2019&gt;\u4e8c\u9879\u591a\u9879\u5f0f\u8d85\u51e0\u4f55\u6cca\u677e\u671f\u671b\u548c\u5747\u503c\u91cd\u8981\u5b9a\u5f8b\u7684\u6c47\u603b\u7edf\u8ba1\u4f30\u8ba1\u5047\u8bbe\u68c0\u9a8c\u53ef\u4fe1\u533a\u95f4(CI)%3 cm.\u3002\u8499\u7279\u5361\u7f57\u65b9\u6cd5\u51e0\u4f55\u65b9\u5dee\u548c\u6807\u51c6\u5dee(...\u3002\u534f\u65b9\u5dee\u548c\u76f8\u5173\u4e2d\u4f4d\u6570\uff0c\u56db\u5206\u4f4d\u6570\u533a\u95f4\u767e\u5206\u4f4d\u6570/\u5206\u4f4d\u6570\u6a21\u5f0f\u5927\u6570\u5b9a\u5f8b(LLN)\u4e2d\u5fc3\u6781\u9650\u5b9a\u7406(CL\u2026\u3002\u6700\u5927\u4f3c\u7136\u4f30\u8ba1(ML...\u3002\u6838\u5bc6\u5ea6\u4f30\u8ba1(KDE)p-\u503cChi2\u6d4b\u8bd5F-test t-test Python\u57fa\u7840\u91cd\u8981\u5e93\u865a\u62df\u73af\u5883\u8868\u8fbe\u5f0f\u53d8\u91cf\u6570\u636e\u7ed3\u6784\u51fd\u6570\u5b89\u88c5\u5305(\u901a\u8fc7pip\uff0cconda\u6216si\u2026\u3002\u4ee3\u7801\u98ce\u683c\uff0c\u4f8b\u5982PEP8\u5c0f\u718a\u732b\u751f\u6001\u7cfb\u7edf\u64cd\u7eb5\u6570\u636e\u6846\u5b50\u8bbe\u7f6e\u6570\u636e\u8bfb\u53d6CSV\u548c\u539f\u59cb\u6570\u636e\u57fa\u672c\u9762\u7edf\u8ba1Python\u548c\u7f16\u7a0b\u56fe\u8868\u5efa\u8bae\u601d\u60f3\u2026\u3002\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790/...\u3002Python Matplotlib\u6807\u7ed8(\u5c31\u50cfR\u4e2d\u7684gglot)Vega-Lite D3.js Tableau Tableau Dash\u7ef4\u5ea6\u548c\u6570\u5b57...\u3002\u53ef\u89c6\u5316\u5f52\u4e00\u5316\u6570\u636e\u6e05\u7406\uff0c...\u3002\u65e0\u504f\u4f30\u8ba1\u3001\u5165\u5e93\u7a00\u758f\u503c\u3001\u7279\u5f81\u63d0\u53d6\u3001\u53bb\u566a\u91c7\u6837\u3001\u4e3b\u6210\u5206\u5206\u6790\u2026\u3002\u673a\u5668\u5b66\u4e60\u6570\u636e\u5de5\u7a0b\u5e08CSV\u4ee4\u4eba\u656c\u754f\u7684\u516c\u5171\u6570\u636e\u96c6Kaggle Jupyter\u7b14\u8bb0\u672c/\u5b9e\u9a8c\u5ba4Web\u4eea\u8868\u677fBI PowerBI\u6d77\u8fd0IPYVOLUME(3D\u6570\u636e)\u6d41\u5149\u6570\u636e\u6e90\u4e00\u4e9b\u76d2\u5b50\u94fe\u63a5\u5230\u5176\u4ed6\u5730\u5740...\u3002\u4e92\u52a8\u7248\u672c\u5728...\u3002\u67e5\u770b\u5668\u4e0d\u652f\u6301\u5b8c\u6574\u7684SVG 1.1\u3002\n\u673a\u5668\u5b66\u4e60\u7684\u6982\u5ff5\uff0c\u8f93\u5165\u548c\u5c5e\u6027\uff0c\u4e00\u822c\u5206\u7c7b\u53d8\u91cf\uff0c\u5e8f\u6570\u53d8\u91cf\uff0c\u6570\u503c\u53d8\u91cf\uff0c\u6210\u672c\u51fd\u6570\u2026\u3002\u8fc7\u9ad8/\u8fc7\u4f4e\u7684\u57f9\u8bad\u3001\u9a8c\u8bc1\u2026\u2026\u3002\u67e5\u51c6\u7387\u4e0e\u67e5\u5168\u7387\u504f\u5dee&\u65b9\u5dee\u63d0\u5347\u6709\u76d1\u7763\u5b66\u4e60\u65b9\u6cd5\u65e0\u76d1\u7763\u5b66\u4e60\u96c6\u6210\u5b66\u4e60\u5f3a\u5316\u5b66\u4e60\u56de\u5f52\u5206\u7c7b\u7387\u51b3\u7b56\u6811\n\u6df1\u5ea6\u5b66\u4e60\u6df1\u5ea6\u5b66\u4e60\u8bba\u6587\u9605\u8bfb\u2026\u2026\u3002\u5e26\u6709\u4ee3\u7801\u6587\u4ef6\u7684\u6587\u4ef6\uff0c\u4ee3\u7801\u72b6\u6001\u4e3a...\u3002\u7406\u89e3..\u3002\u795e\u7ecf\u7f51\u7edc\u611f\u77e5\u5668\u81ea\u52a8\u7f16\u7801\u5668\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u3002\u751f\u6210\u6027\u5bf9\u6297\u6027\u7f51\u7edc\u3002\u5efa\u7b51\uff0c\u4ee4\u4eba\u656c\u754f\u7684\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\uff0c\u706b\u70ac\uff0c\u4e0d\u65ad\u63a2\u7d22\u548c\u7814\u7a76\u2026\u3002\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\u3002LSM LSTM GRU TensorFlow Viewer\u4e0d\u652f\u6301\u5b8c\u6574\u7684SVG 1.1\u3002\n\u6570\u636e\u5de5\u7a0b\u5e08\u6570\u636e\u683c\u5f0f\u6458\u8981\u6570\u636e\u53d1\u73b0\u6570\u636e\u6e90\u548c\u91c7\u96c6\u6570\u636e\u96c6\u6210\u6570\u636e\u878d\u5408\u8f6c\u6362\u548c\u4e30\u5bccOpenRefining\u6570\u636e\u8c03\u67e5\u6709\u591a\u5c11\u6570\u636e\u4f7f\u7528ETL\u6570\u636e\u6e56VS\u6570\u636e\u4ed3\u5e93\u5bf9\u63a5\u60a8\u7684Python\u5e94\u7528\u7a0b\u5e8f...\u3002\u7ee7\u7eed\u63a2\u7d22\uff0c\u5bfb\u627e\u2026\u2026\u3002\u67e5\u770b\u5668\u4e0d\u652f\u6301\u5b8c\u6574\u7684SVG 1.1\u3002\n\u5982\u679c\u60a8\u8ba4\u4e3a\u4efb\u4f55\u8def\u7ebf\u56fe\u53ef\u4ee5\u6539\u8fdb\uff0c\u8bf7\u6253\u5f00\u4efb\u4f55\u66f4\u65b0\u7684\u516c\u5173\uff0c\u5e76\u63d0\u4ea4\u4efb\u4f55\u95ee\u9898\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5c06\u7ee7\u7eed\u6539\u8fdb\u8fd9\u4e00\u70b9\uff0c\u56e0\u6b64\u60a8\u53ef\u80fd\u5e0c\u671b\u67e5\u770b/\u542f\u52a8\u6b64\u5b58\u50a8\u5e93\u4ee5\u91cd\u65b0\u8bbf\u95ee\u3002\n\u8bf7\u770b\u4e00\u4e0b\u8d21\u732e\u6587\u6863\uff0c\u4e86\u89e3\u5982\u4f55\u66f4\u65b0\u4efb\u4f55\u8def\u7ebf\u56fe", "note_en": "Below you find a set of charts demonstrating the paths that you can take and the technologies that you would want to adopt in order to become a data scientist, machine learning or an ai expert. We made these charts for our new employees to make them AI Experts but we wanted to share them here to help the community.\n  If you are interested to become an AI EXPERT at  AMAI       (opens new window) in Germany, or you want to hire an AI Expert, please say  hi@am.ai.\n    \ud83d\udc49 An  interactive version with links to follow about each bullet of the list can be found at  i.am.ai/roadmap       (opens new window) \ud83d\udc48\n  To receive updates  star \u2b50\ufe0f       (opens new window) and watch \ud83d\udc40 the  GitHub Repo       (opens new window) to get notified, when we add new content to stay on the top of the most recent research.\n    The purpose of these roadmaps is to give you an idea about the landscape and to guide you if you are confused about what to learn next and not to encourage you to pick what is hip and trendy. You should grow some understanding of why one tool would better suited for some cases than the other and remember hip and trendy never means best suited for the job.\n    GIT - Version Control       Papers with code        Personal Recommendation!      Available Options       Data Scientist           Big Data Engineer          Machine Learnin...       Deep Learning             Data Engineer           Required for any path      AI Expert in 2020      Choose your path      Legend       Semantic Versioning       Keep a Changelog    Viewer does not support full SVG 1.1\n    Data Scientist        Matrices &amp; Linear Algebra Fu...       Database Basics        Relational vs. non-relational databases         SQL + Joins (Inner, Outer, Cross, Thet...         NoSQL      Tabular Data      Data Frames &amp; Series%3CmxGra...        Extract, Transform, Load (ET...      Reporting vs BI vs Analytics      Data Formats         JSON         XML         Regular Expressions (RegEx)        Probability Theory         Probability distribution        Randomness, random variable and...        Conditional probability and...         (Statistical) independence         iid       cdf, pdf, pmf          Continuous distributions (pd...         Cumulative distribution function (cd...         Probability density function (pdf)         Probability mass function (pmf)        Normal / Gaussian        Uniform (continuous)         Beta         Dirichlet         Exponential         Uniform (discrete)         Discrete distributions (pmf&#39;...        \u00a0\u03c72\u00a0(chi-squared)         Binomial         Multinomial         Hypergeometric         Poisson       Expectation and mean      Important Laws        Summary statistics          Estimation         Hypothesis Testing        Confidence Interval (CI)%3Cm...         Monte Carlo Method         Geometric        Variance and standard deviation (...        Covariance and correlation        Median, quartile         Interquartile range        Percentile / quantile         Mode         Law of large numbers (LLN)         Central limit theorem (CL...        Maximum Likelihood Estimation (ML...        Kernel Density Estimation (KDE)        p-Value         Chi2 test         F-test         t-test         Python Basics        Important libraries         Virtual Environments      Expressions       Variables       Data Structures       Functions       Install packages (via pip, conda or si...        Codestyle, e.g. PEP8         Numpy          Pandas          Ecosystem       Manipulate Data Frames       Subsetting Data       Reading CSV and raw data      Fundamentals      Statistics      Python\u00a0 \u00a0Programming        Chart Suggestions thought st...      Exploratory Data Analysis /...         Python        Matplotlib        plotnine (like ggplot in R)         Vega-Lite         D3.js         Tableau         Dash       Dimensionality &amp; Numerosity...      Visualization        Normalization        Data Scrubbing,...        Unbiased Estimators        Binning sparse values        Feature Extraction        Denoising        Sampling        Principal Component Analysis...      Machine Learning      Data Engineer          CSV         Awesome Public Datasets        Kaggle      Jupyter Notebooks / Lab      Web      Dashboards      BI        PowerBI       seaborn         ipyvolume (3D data)         streamlit          Data Sources      Some boxes link to additional ress...        Interactive version on...    Viewer does not support full SVG 1.1\n    Machine Learning        Concepts, Inputs &amp; Attributes      General       Categorical Variables       Ordinal Variables       Numerical Variables       Cost functions and...       Overfitting / Underfitting       Training, validation...       Precision vs Recall       Bias &amp; Variance       Lift        Supervised Learning      Methods       Unsupervised Learning      Ensemble Learning      Reinforcement Learning        Regression        Classification       Classification Rate        Decision Trees        Na\u00efve Bayes Classifiers        Logistic Regression        Linear Regression        Poisson Regression        K-Nearest Neighbour       SVM        Clustering       Association Rule Learning        Dimensionality Reduction       Hierarchical Clustering        K-Means Clustering       DBSCAN       Fuzzy C-Means       Mean Shift       Agglomerative       Principal Component Analysis (PCA)        Boosting       Bagging       Stacking       Q-Learning       Sentiment Analysis      Collaborative Filtering       Tagging       Prediction      Use Cases      Tools        scikit-learn      Deep Learning       Important libraries       spacy (NLP)       Huggingface Transform...       Viewer does not support full SVG 1.1\n    Deep Learning        Deep Learning Papers Reading...      Papers       Papers with code        Papers with code - state of...       Understanding...      Neural Networks        Perceptrons      Autoencoders       Convolutional Neural Network...       Generative Adversarial Netwo...      Architectures       Awesome Deep Learning      Tools        PyTorch      keep exploring and s...          Recurrent Neural Networks...       LSM       LSTM       GRU        Tensorflow     Viewer does not support full SVG 1.1\n    Data Engineer        Summary of Data Formats      Data Discovery      Data Source &amp; Acquisition      Data Integration      Data Fusion      Transformation &amp; Enrichment       OpenRefine      Data Survey      How much Data      Using ETL       Data Lake vs Data Warehouse       Dockerize your Python Applic...       keep exploring and st...    Viewer does not support full SVG 1.1\n        If you think any of the roadmaps can be improved, please do open a PR with any updates and submit any issues. Also, we will continue to improve this, so you might want to watch/star this repository to revisit.\n    Have a look at the  contribution docs for how to update any of the roadmaps", "posttime": "2020-11-07 11:12:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u5de5\u667a\u80fd,\u4e13\u5bb6,expert,\u6570\u636e", "title": "\u4eba\u5de5\u667a\u80fd\u4e13\u5bb6\u8def\u7ebf\u56fe", "title_en": "AI Expert Roadmap", "transed": 1, "url": "https://i.am.ai/roadmap", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "\u4e13\u5bb6", "expert", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "9b245f67c3b3cbeea18876c89a1c8070.png", "infoid": 1033606, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Dgraph Labs\u81ea2015\u5e74\u6210\u7acb\u4ee5\u6765\u4e00\u76f4\u662f\u56f4\u68cb\u8bed\u8a00\u7684\u7528\u6237\u3002\u4e94\u5e74\u6765\uff0c\u6211\u4eec\u7528\u4e8620\u4e07\u884c\u56f4\u68cb\u4ee3\u7801\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u5730\u544a\u8bc9\u5927\u5bb6\uff0c\u6211\u4eec\u4ecd\u7136\u575a\u4fe1\u56f4\u68cb\u662f\u6b63\u786e\u7684\u9009\u62e9\uff0c\u65e0\u8bba\u662f\u73b0\u5728\u8fd8\u662f\u73b0\u5728\uff0c\u6211\u4eec\u90fd\u575a\u4fe1\u56f4\u68cb\u662f\u6b63\u786e\u7684\u9009\u62e9\u3002\u6211\u4eec\u5bf9\u56f4\u68cb\u7684\u5174\u594b\u5df2\u7ecf\u8d85\u8d8a\u4e86\u6784\u5efa\u7cfb\u7edf\uff0c\u751a\u81f3\u8ba9\u6211\u4eec\u7528\u56f4\u68cb\u7f16\u5199\u4e86\u811a\u672c\uff0c\u8fd9\u4e9b\u811a\u672c\u901a\u5e38\u662f\u7528Bash\u6216Python\u7f16\u5199\u7684\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u4f7f\u7528Go\u5e2e\u52a9\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u5e72\u51c0\u3001\u53ef\u8bfb\u3001\u53ef\u7ef4\u62a4\u7684\u4ee3\u7801\u5e93--\u6700\u91cd\u8981\u7684\u662f--\u9ad8\u6548\u548c\u5e76\u53d1\u3002\n\u7136\u800c\uff0c\u6709\u4e00\u4e2a\u9886\u57df\u662f\u6211\u4eec\u4ece\u65e9\u671f\u5c31\u5f00\u59cb\u5173\u6ce8\u7684\uff1a\u5185\u5b58\u7ba1\u7406\u3002\u6211\u4eec\u5e76\u4e0d\u53cd\u5bf9Go\u5783\u573e\u6536\u96c6\u5668\uff0c\u4f46\u867d\u7136\u5b83\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u4fbf\u5229\uff0c\u4f46\u5b83\u4e5f\u6709\u4e0e\u5176\u4ed6\u5185\u5b58\u5783\u573e\u6536\u96c6\u5668\u76f8\u540c\u7684\u95ee\u9898\uff1a\u5b83\u6839\u672c\u65e0\u6cd5\u4e0e\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u6548\u7387\u7ade\u4e89\u3002\n\u5f53\u60a8\u624b\u52a8\u7ba1\u7406\u5185\u5b58\u65f6\uff0c\u5185\u5b58\u4f7f\u7528\u7387\u66f4\u4f4e\u3001\u66f4\u53ef\u9884\u6d4b\uff0c\u5e76\u4e14\u5141\u8bb8\u5185\u5b58\u5206\u914d\u7a81\u53d1\u4e0d\u4f1a\u5bfc\u81f4\u5185\u5b58\u4f7f\u7528\u91cf\u7684\u75af\u72c2\u5cf0\u503c\u3002\u5bf9\u4e8e\u4f7f\u7528Go Memory\u7684Dgraph\u6765\u8bf4\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u4e00\u4e2a\u95ee\u98981\u3002\u4e8b\u5b9e\u4e0a\uff0cDgraph\u5185\u5b58\u4e0d\u8db3\u662f\u6211\u4eec\u4ece\u7528\u6237\u90a3\u91cc\u542c\u5230\u7684\u4e00\u79cd\u975e\u5e38\u5e38\u89c1\u7684\u62b1\u6028\u3002\n\u50cfRust\u8fd9\u6837\u7684\u8bed\u8a00\u5df2\u7ecf\u53d6\u5f97\u4e86\u4e00\u5b9a\u7684\u8fdb\u5c55\uff0c\u90e8\u5206\u539f\u56e0\u662f\u5b83\u5141\u8bb8\u5b89\u5168\u7684\u5185\u5b58\u7ba1\u7406\u3002\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u7406\u89e3\u8fd9\u4e00\u70b9\u3002\n\u6839\u636e\u6211\u4eec\u7684\u7ecf\u9a8c\uff0c\u624b\u52a8\u5206\u914d\u5185\u5b58\u5e76\u8ffd\u8e2a\u6f5c\u5728\u7684\u5185\u5b58\u6cc4\u6f0f\u6bd4\u5c1d\u8bd5\u5728\u5177\u6709\u5783\u573e\u6536\u96c6\u7684\u8bed\u8a00\u4e2d\u4f18\u5316\u5185\u5b58\u4f7f\u7528\u8981\u5c112\u3002\u5728\u6784\u5efa\u80fd\u591f\u51e0\u4e4e\u65e0\u9650\u4f38\u7f29\u7684\u6570\u636e\u5e93\u7cfb\u7edf\u65f6\uff0c\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u662f\u975e\u5e38\u503c\u5f97\u7684\u3002\n\u6211\u4eec\u5bf9\u56f4\u68cb\u7684\u70ed\u7231\u548c\u907f\u514d\u56f4\u68cbGC\u7684\u9700\u8981\u8ba9\u6211\u4eec\u627e\u5230\u4e86\u5728\u56f4\u68cb\u4e2d\u8fdb\u884c\u52a8\u6001\u5185\u5b58\u7ba1\u7406\u7684\u65b0\u65b9\u6cd5\u3002\u5f53\u7136\uff0c\u5927\u591a\u6570\u56f4\u68cb\u7528\u6237\u6c38\u8fdc\u4e0d\u9700\u8981\u57df\u5185\u5b58\u7ba1\u7406\uff1b\u9664\u975e\u60a8\u9700\u8981\uff0c\u5426\u5219\u6211\u4eec\u5efa\u8bae\u60a8\u4e0d\u8981\u8fd9\u6837\u505a\u3002\u5f53\u4f60\u771f\u7684\u9700\u8981\u5b83\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u77e5\u9053\u7684\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u5206\u4eab\u6211\u4eec\u5728Dgraph\u5b9e\u9a8c\u5ba4\u4ece\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u5b9e\u8df5\u4e2d\u5b66\u5230\u7684\u4e1c\u897f\uff0c\u5e76\u89e3\u91ca\u6211\u4eec\u662f\u5982\u4f55\u5728\u56f4\u68cb\u4e2d\u624b\u52a8\u7ba1\u7406\u5185\u5b58\u7684\u3002\n\u7075\u611f\u6765\u81eaCGO wiki\u4e2d\u5173\u4e8e\u5c06C\u6570\u7ec4\u8f6c\u6362\u4e3aGoslices\u7684\u90e8\u5206\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Malloc\u5728C\u4e2d\u5206\u914d\u5185\u5b58\uff0c\u5e76\u4f7f\u7528unSafe\u5c06\u5176\u4f20\u9012\u7ed9Go\uff0c\u800c\u4e0d\u4f1a\u53d7\u5230Go GC\u7684\u4efb\u4f55\u5e72\u6270\u3002\n\u5bfc\u5165&#34\uff1bC&34\uff1b\u5bfc\u5165&#34\uff1b\u4e0d\u5b89\u5168...\u300228]C.YourType)(unsafe.Pointer(theCArray))[\uff1alength:length]\u9635\u5217*C.YourType=C.getTheArray()\u957f\u5ea6\uff1a=C.getTheArrayLength()\u5207\u7247\uff1a=(*[1\uff1b&lt\uff1b&lt\uff1bvar\u3002\n\u6ce8\u610f\uff1a\u5f53\u524d\u7684\u5b9e\u73b0\u6709\u4e00\u4e2a\u9519\u8bef\u3002\u867d\u7136\u5141\u8bb8GO\u4ee3\u7801\u5c06NIL\u6216C\u6307\u9488(\u4f46\u4e0d\u662fGO\u6307\u9488)\u5199\u5165C\u5185\u5b58\uff0c\u4f46\u5982\u679cC\u5185\u5b58\u7684\u5185\u5bb9\u663e\u793a\u4e3aGO\u6307\u9488\uff0c\u5219\u5f53\u524d\u5b9e\u73b0\u6709\u65f6\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\u3002\u56e0\u6b64\uff0c\u5982\u679cGO\u4ee3\u7801\u8981\u5728\u5176\u4e2d\u5b58\u50a8\u6307\u9488\u503c\uff0c\u8bf7\u907f\u514d\u5c06\u672a\u521d\u59cb\u5316\u7684C\u5185\u5b58\u4f20\u9012\u7ed9GO\u4ee3\u7801\u3002\u5c06C\u4e2d\u7684\u5185\u5b58\u6e05\u96f6\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9Go\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528Malloc\uff0c\u800c\u662f\u4f7f\u7528\u5176\u4ef7\u683c\u7a0d\u9ad8\u7684\u540c\u7c7b\u4ea7\u54c1calloc\u3002Calloc\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0emalloc\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u5728\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u4e4b\u524d\u5c06\u5185\u5b58\u6e05\u96f6\u3002\n\u6211\u4eec\u4e00\u5f00\u59cb\u53ea\u5b9e\u73b0\u4e86\u57fa\u672c\u7684Calloc\u548cFree\u51fd\u6570\uff0c\u5b83\u4eec\u901a\u8fc7CGO\u4e3aGo\u5206\u914d\u548c\u53d6\u6d88\u5206\u914d\u5b57\u8282\u7247\u3002\u4e3a\u4e86\u6d4b\u8bd5\u8fd9\u4e9b\u529f\u80fd\uff0c\u6211\u4eec\u5f00\u53d1\u5e76\u8fd0\u884c\u4e86\u4e00\u4e2a\u6301\u7eed\u7684\u5185\u5b58\u4f7f\u7528\u6d4b\u8bd5\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u65e0\u4f11\u6b62\u5730\u91cd\u590d\u4e86\u4e00\u4e2a\u5206\u914d/\u91ca\u653e\u5468\u671f\uff0c\u5728\u8fd9\u4e2a\u5468\u671f\u4e2d\uff0c\u5b83\u9996\u5148\u5206\u914d\u5404\u79cd\u968f\u673a\u5927\u5c0f\u7684\u5185\u5b58\u5757\uff0c\u76f4\u5230\u5206\u914d\u4e8616 GB\u7684\u5185\u5b58\uff0c\u7136\u540e\u91ca\u653e\u8fd9\u4e9b\u5185\u5b58\u5757\uff0c\u76f4\u5230\u53ea\u5269\u4e0b1 GB\u7684\u5185\u5b58\u5206\u914d\u3002\n\u6b64\u7a0b\u5e8f\u7684C\u7b49\u6548\u9879\u7684\u884c\u4e3a\u7b26\u5408\u9884\u671f\u3002\u6211\u4eec\u4f1a\u770b\u5230HTOP\u4e2d\u7684RSS\u5185\u5b58\u589e\u52a0\u523016 GB\uff0c\u7136\u540e\u4e0b\u964d\u52301 GB\uff0c\u7136\u540e\u53c8\u589e\u52a0\u523016 GB\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u7136\u800c\uff0c\u4f7f\u7528Calloc\u548cFree\u7684\u56f4\u68cb\u7a0b\u5e8f\u5728\u6bcf\u4e2a\u5468\u671f\u4e4b\u540e\u4f1a\u9010\u6e10\u4f7f\u7528\u66f4\u591a\u7684\u5185\u5b58(\u89c1\u4e0b\u56fe)\u3002\n\u6211\u4eec\u5c06\u6b64\u884c\u4e3a\u5f52\u56e0\u4e8e\u9ed8\u8ba4\u7684C.calloc\u8c03\u7528\u4e2d\u7f3a\u4e4f\u7ebf\u7a0b\u611f\u77e5\u5bfc\u81f4\u7684\u5185\u5b58\u788e\u7247\u3002\u5728\u5f97\u5230Go#\u9ed1\u6697\u827a\u672f\u677e\u5f1b\u9891\u9053\u7684\u4e00\u4e9b\u5e2e\u52a9\u540e(\u7279\u522b\u611f\u8c22\u51ef\u5c14\u00b7\u5e03\u5170\u80af\u5e0c\u666e)\uff0c\u6211\u4eec\u51b3\u5b9a\u5c1d\u8bd5\u4e00\u4e0bJemalloc\u3002\nJemalloc\u662f\u4e00\u4e2a\u901a\u7528\u7684Malloc(3)\u5b9e\u73b0\uff0c\u5b83\u5f3a\u8c03\u907f\u514d\u788e\u7247\u548c\u53ef\u4f38\u7f29\u7684\u5e76\u53d1\u652f\u6301\u3002Jemalloc\u57282005\u5e74\u4f5c\u4e3aFreeBSD libc\u5206\u914d\u5668\u9996\u6b21\u6295\u5165\u4f7f\u7528\uff0c\u4ece\u90a3\u65f6\u8d77\uff0c\u5b83\u5c31\u88ab\u5927\u91cf\u4f9d\u8d56\u4e8e\u5176\u53ef\u9884\u6d4b\u884c\u4e3a\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u53d6\u4ee3\u3002--http://jemalloc.net\u3002\n\u6211\u4eec\u5c06API\u8f6c\u6362\u4e3a\u4f7f\u7528jemalloc 3\u8fdb\u884ccalloc\u548cfree\u8c03\u7528\u3002\u5b83\u7684\u6267\u884c\u975e\u5e38\u51fa\u8272\uff1ajemalloc\u672c\u8eab\u5c31\u652f\u6301\u7ebf\u7a0b\uff0c\u51e0\u4e4e\u6ca1\u6709\u5185\u5b58\u788e\u7247\u3002\u6211\u4eec\u7684\u5185\u5b58\u4f7f\u7528\u76d1\u63a7\u6d4b\u8bd5\u4e2d\u7684\u5206\u914d-\u91ca\u653e\u5468\u671f\u5728\u9884\u671f\u9650\u5236\u4e4b\u95f4\u5faa\u73af\uff0c\u5ffd\u7565\u4e86\u8fd0\u884c\u6d4b\u8bd5\u6240\u9700\u7684\u6df7\u4e71\u3002\n\u4e3a\u4e86\u786e\u4fdd\u6211\u4eec\u4f7f\u7528\u7684\u662fjemalloc\u5e76\u907f\u514d\u540d\u79f0\u51b2\u7a81\uff0c\u6211\u4eec\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u6dfb\u52a0\u4e86je_prefix\uff0c\u6240\u4ee5\u6211\u4eec\u7684API\u73b0\u5728\u8c03\u7528\u7684\u662fje_calloc\u548cje_free\uff0c\u800c\u4e0d\u662fcalloc\u548cfree\u3002\n\u5728\u4e0a\u9762\u7684\u56fe\u8868\u4e2d\uff0c\u901a\u8fc7C.calloc\u5206\u914d\u56f4\u68cb\u5185\u5b58\u4f1a\u5bfc\u81f4\u5927\u91cf\u5185\u5b58\u788e\u7247\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u5728\u7b2c11\u4e2a\u5468\u671f\u5360\u752820GBs\u7684\u5185\u5b58\u3002\u4e0ejemalloc\u76f8\u540c\u7684\u4ee3\u7801\u6ca1\u6709\u660e\u663e\u7684\u788e\u7247\uff0c\u6bcf\u4e2a\u5468\u671f\u90fd\u4f1a\u51cf\u5c11\u8fd11 GB\u3002\n\u5728\u7a0b\u5e8f\u672b\u5c3e(\u6700\u53f3\u8fb9\u7684\u5c0f\u70b9)\uff0c\u5728\u91ca\u653e\u6240\u6709\u5206\u914d\u7684\u5185\u5b58\u540e\uff0cC.calloc\u7a0b\u5e8f\u4ecd\u7136\u5360\u7528\u4e0d\u523020 GB\u7684\u5185\u5b58\uff0c\u800cjemalloc\u663e\u793a400MB\u7684\u5185\u5b58\u4f7f\u7528\u91cf\u3002\nPtr\uff1a=C.je_calloc(C.size_t(N)\uff0c1)\u5982\u679cptr==nil{//NB\uff1a\u629b\u51fa\u7c7b\u4f3c\u4e8e\u6b7b\u673a\uff0c\u9664\u975e\u5b83\u4fdd\u8bc1\u8fdb\u7a0b\u5c06\u88ab//\u7ec8\u6b62\u3002\u4e0b\u9762\u7684\u8c03\u7528\u6b63\u662fGo\u8fd0\u884c\u65f6\u5728//\u65e0\u6cd5\u5206\u914d\u5185\u5b58\u65f6\u8c03\u7528\u7684\u3002\u629b\u51fa(&#34\uff1bout out Memory&#34\uff1b)}uptr\uff1a=unSafe.Pointer(PTR)atom ic.AddInt64(&amp\uff1bnumBytes\uff0cint64(N))//\u5c06C\u6307\u9488\u89e3\u91ca\u4e3a\u6307\u5411GO\u6570\u7ec4\u7684\u6307\u9488\uff0c\u7136\u540e\u5207\u7247\u3002\u8fd4\u56de(*[MaxArrayLen]\u5b57\u8282)(Uptr)[\uff1an\uff1an]\u3002\n\u6211\u4eec\u5c06\u6b64\u4ee3\u7801\u4f5c\u4e3aRistretto\u7684z\u5305\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64Dgraph\u548cBadger\u90fd\u53ef\u4ee5\u4f7f\u7528\u5b83\u3002\u4e3a\u4e86\u5141\u8bb8\u6211\u4eec\u7684\u4ee3\u7801\u5207\u6362\u5230\u4f7f\u7528jemalloc\u6765\u5206\u914d\u5b57\u8282\u7247\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6784\u5efa\u6807\u8bb0jemalloc\u3002\u4e3a\u4e86\u8fdb\u4e00\u6b65\u7b80\u5316\u6211\u4eec\u7684\u90e8\u7f72\uff0c\u6211\u4eec\u901a\u8fc7\u8bbe\u7f6e\u6b63\u786e\u7684LDFLAGS\uff0c\u5c06jemalloc\u5e93\u9759\u6001\u94fe\u63a5\u5230\u4efb\u4f55\u751f\u6210\u7684GO\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u3002\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u5206\u914d\u548c\u91ca\u653e\u5b57\u8282\u7247\u7684\u65b9\u6cd5\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u4f7f\u7528\u5b83\u6765\u5e03\u5c40GO\u7ed3\u6784\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u4e00\u4e2a\u57fa\u672c\u7684(\u5b8c\u6574\u4ee3\u7801)\u5f00\u59cb\u3002\nType node struct{val int next*node}var nodeSz=int(unSafe.Sizeof(node{}))func newNode(Val Int)*node{b\uff1a=z.Calloc(NodeSz)n\uff1a=(*node)(unSafe.Pointer(&amp\uff1bb[0]))n.val=val return n}func FreeNode(n*node){buf\uff1a=(*[z.MaxArrayLen]byte)(unsafe.Pointer(n))[\uff1anodeSz:nodeSz]z.Free(Buf)}\u3002\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528newNode\u5728C\u5206\u914d\u7684\u5185\u5b58\u4e0a\u5e03\u7f6e\u4e86\u4e00\u4e2ago\u7ed3\u6784\uff0c\u5e76\u521b\u5efa\u4e86\u76f8\u5e94\u7684freNode\u51fd\u6570\uff0c\u4e00\u65e6\u4f7f\u7528\u5b8c\u8be5\u7ed3\u6784\uff0c\u5c31\u53ef\u4ee5\u91ca\u653e\u5185\u5b58\u3002GO\u7ed3\u6784\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u662fint\u548c\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7ed3\u6784\u7684\u6307\u9488\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5728\u7a0b\u5e8f\u4e2d\u8bbe\u7f6e\u548c\u8bbf\u95ee\u7684\u3002\u6211\u4eec\u5206\u914d\u4e862M\u4e2a\u8282\u70b9\u5bf9\u8c61\uff0c\u5e76\u521b\u5efa\u4e86\u4e00\u4e2a\u94fe\u8868\u6765\u6f14\u793ajemalloc\u7684\u6b63\u786e\u529f\u80fd\u3002\n\u5bf9\u4e8e\u9ed8\u8ba4\u7684go\u5185\u5b58\uff0c\u6211\u4eec\u770b\u5230\u670931MiB\u7684\u5806\u88ab\u5206\u914d\u7ed9\u5177\u67092M\u4e2a\u5bf9\u8c61\u7684\u94fe\u8868\uff0c\u4f46\u6ca1\u6709\u901a\u8fc7jemalloc\u8fdb\u884c\u5206\u914d\u3002\n$GO\u8fd0\u884c\u3002\u5206\u914d\u7684\u5185\u5b58\uff1a0\u5bf9\u8c61\uff1a2000001\u8282\u70b9\uff1a0...\u91ca\u653e\u540e\u8282\u70b9\uff1a200000\u3002\u5206\u914d\u7684\u5185\u5b58\uff1a0Heapalc\uff1a31 MiB\u3002\n\u4f7f\u7528jemalloc\u6784\u5efa\u6807\u8bb0\uff0c\u6211\u4eec\u770b\u5230\u901a\u8fc7jemalloc\u5206\u914d\u4e8630MiB\u7684\u5185\u5b58\uff0c\u5728\u91ca\u653e\u94fe\u8868\u4e4b\u540e\uff0c\u8fd9\u4e2a\u5185\u5b58\u964d\u5230\u4e86\u96f6\u3002Go\u5806\u5206\u914d\u53ea\u6709\u5f88\u5c0f\u7684399 KiB\uff0c\u8fd9\u53ef\u80fd\u6765\u81ea\u8fd0\u884c\u7a0b\u5e8f\u7684\u5f00\u9500\u3002\n$go run-tag=jemalloc\u3002\u5df2\u5206\u914d\u5185\u5b58\uff1a30 MiB\u5bf9\u8c61\uff1a2000001\u8282\u70b9\uff1a0...\u8282\u70b9\uff1a200000\u91ca\u653e\u540e\u3002\u5206\u914d\u7684\u5185\u5b58\uff1a0Heapalc\uff1a399 KiB\u3002\n\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5f88\u597d\u5730\u907f\u514d\u901a\u8fc7GO\u5206\u914d\u5185\u5b58\u3002\u4f46\u662f\uff0c\u8fd9\u4e5f\u662f\u8981\u4ed8\u51fa\u4ee3\u4ef7\u7684\uff1a\u8f83\u4f4e\u7684\u6027\u80fd\u3002\u7528\u65f6\u95f4\u8fd0\u884c\u8fd9\u4e24\u4e2a\u5b9e\u4f8b\uff0c\u6211\u4eec\u770b\u5230\u5728\u6ca1\u6709jemalloc\u7684\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u4e3a1.15s\u3002\u4f7f\u7528jemalloc\u65f6\uff0c\u5b83\u7684\u8fd0\u884c\u901f\u5ea6\u6162\u4e86\u7ea65\u500d\uff0c\u4e3a5.29s\u3002\n$\u65f6\u95f4\u53bb\u5954\u8dd1\uff0c\u53bb\u5954\u8dd1\u30021.15s\u7528\u62370.25s\u7cfb\u7edf162%cpu 0.861\u603b\u8ba1$time go run-tag=jemalloc.go run-tag=jemalloc\u30025.29s\u7528\u62370.36s\u7cfb\u7edf108%cpu\u603b\u8ba15.200\u3002\n\u6211\u4eec\u5c06\u6027\u80fd\u964d\u4f4e\u5f52\u56e0\u4e8e\u6bcf\u6b21\u5206\u914d\u5185\u5b58\u65f6\u90fd\u4f1a\u8fdb\u884cCGO\u8c03\u7528\uff0c\u800c\u4e14\u6bcf\u6b21CGO\u8c03\u7528\u90fd\u4f1a\u5e26\u6765\u4e00\u4e9b\u5f00\u9500\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5728ristretto/z\u5305\u4e2d\u7f16\u5199\u4e86\u4e00\u4e2a\u5206\u914d\u5668\u5e93\u3002\u8fd9\u4e2a\u5e93\u5728\u4e00\u6b21\u8c03\u7528\u4e2d\u5206\u914d\u66f4\u5927\u7684\u5185\u5b58\u5757\uff0c\u7136\u540e\u8fd9\u4e9b\u5185\u5b58\u5757\u53ef\u4ee5\u7528\u6765\u5206\u914d\u8bb8\u591a\u5c0f\u5bf9\u8c61\uff0c\u4ece\u800c\u907f\u514d\u6602\u8d35\u7684CGO\u8c03\u7528\u3002\n\u5206\u914d\u5668\u4ece\u4e00\u4e2a\u7f13\u51b2\u533a\u5f00\u59cb\uff0c\u5f53\u8017\u5c3d\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u4e24\u500d\u5927\u5c0f\u7684\u65b0\u7f13\u51b2\u533a\u3002\u5b83\u7ef4\u62a4\u6240\u6709\u5df2\u5206\u914d\u7f13\u51b2\u533a\u7684\u5185\u90e8\u5217\u8868\u3002\u6700\u540e\uff0c\u5f53\u7528\u6237\u5904\u7406\u5b8c\u6570\u636e\u540e\uff0c\u4ed6\u4eec\u53ef\u4ee5\u8c03\u7528Release\u6765\u4e00\u6b21\u6027\u91ca\u653e\u6240\u6709\u8fd9\u4e9b\u7f13\u51b2\u533a\u3002\u6ce8\u610f\uff0cAllocator\u4e0d\u505a\u4efb\u4f55\u5185\u5b58\u79fb\u52a8\uff0c\u8fd9\u6709\u52a9\u4e8e\u786e\u4fdd\u6211\u4eec\u62e5\u6709\u7684\u4efb\u4f55\u7ed3\u6784\u6307\u9488\u4fdd\u6301\u6709\u6548\u3002\n\u867d\u7136\u8fd9\u770b\u8d77\u6765\u6709\u70b9\u50cftcmalloc/jemalloc\u4f7f\u7528\u7684\u677f\u5f0f\u5185\u5b58\u7ba1\u7406\uff0c\u4f46\u5b83\u8981\u7b80\u5355\u5f97\u591a\u3002\u4e00\u65e6\u5206\u914d\uff0c\u5c31\u4e0d\u80fd\u53ea\u91ca\u653e\u4e00\u4e2a\u7ed3\u6784\u3002\u60a8\u53ea\u80fd\u91ca\u653e\u5206\u914d\u56684\u4f7f\u7528\u7684\u6240\u6709\u5185\u5b58\u3002\nAllocator\u505a\u5f97\u5f88\u597d\u7684\u662f\u4ee5\u8f83\u4f4e\u7684\u6210\u672c\u5e03\u5c40\u6570\u767e\u4e07\u4e2a\u7ed3\u6784\uff0c\u5e76\u5728\u5b8c\u6210\u540e\u91ca\u653e\u5b83\u4eec\uff0c\u800c\u4e0d\u6d89\u53caGo\u5806\u3002\u4e0a\u9762\u663e\u793a\u7684\u76f8\u540c\u7a0b\u5e8f\uff0c\u5f53\u4f7f\u7528\u65b0\u7684\u5206\u914d\u5668\u6784\u5efa\u6807\u8bb0\u8fd0\u884c\u65f6\uff0c\u8fd0\u884c\u901f\u5ea6\u751a\u81f3\u6bd4Go Memory\u7248\u672c\u66f4\u5feb\u3002\n$time go run-tag=&#34\uff1bjemalloc\uff0callocator&#34\uff1b.go run-tag=&#34\uff1bjemalloc\uff0callocator&#34\uff1b\u30021.09s\u7528\u62370.29s\u7cfb\u7edf143%cpu\u603b\u8ba10.956\u3002\n\u4eceGO 1.14\u5f00\u59cb\uff0c-race\u6807\u5fd7\u6253\u5f00\u5bf9structs\u7684\u5185\u5b58\u5bf9\u9f50\u68c0\u67e5\u3002Allocator\u6709\u4e00\u4e2aAllocateAligned\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u5185\u5b58\uff0c\u4ece\u53f3\u6307\u9488\u5bf9\u9f50\u5f00\u59cb\uff0c\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u68c0\u67e5\u3002\u6839\u636e\u7ed3\u6784\u7684\u5927\u5c0f\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u5185\u5b58\u6d6a\u8d39\uff0c\u4f46\u4f1a\u56e0\u4e3a\u6b63\u786e\u7684\u5b57\u8fb9\u754c\u800c\u4f7fCPU\u6307\u4ee4\u66f4\u6709\u6548\u7387\u3002\n\u6211\u4eec\u8fd8\u9762\u4e34\u7740\u53e6\u4e00\u4e2a\u5185\u5b58\u7ba1\u7406\u95ee\u9898\uff1a\u6709\u65f6\u5185\u5b58\u5206\u914d\u53d1\u751f\u5728\u4e0e\u91ca\u653e\u975e\u5e38\u4e0d\u540c\u7684\u5730\u65b9\u3002\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u552f\u4e00\u7684\u901a\u4fe1\u53ef\u80fd\u662f\u5206\u914d\u7684\u7ed3\u6784\uff0c\u5b83\u4eec\u65e0\u6cd5\u5411\u4e0b\u4f20\u9012\u5b9e\u9645\u7684Allocator\u5bf9\u8c61\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u5206\u914d\u5668\u5bf9\u8c61\u5206\u914d\u4e86\u4e00\u4e2a\u552f\u4e00\u7684ID\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5c06\u5176\u5b58\u50a8\u5728uint64\u5f15\u7528\u4e2d\u3002\u6bcf\u4e2a\u65b0\u7684\u5206\u914d\u5668\u5bf9\u8c61\u90fd\u5b58\u50a8\u5728\u9488\u5bf9\u5176\u5f15\u7528\u7684\u5168\u5c40\u6620\u5c04\u4e0a\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u8be5\u5f15\u7528\u91cd\u65b0\u8c03\u7528\u5206\u914d\u5668\u5bf9\u8c61\uff0c\u5e76\u5728\u4e0d\u518d\u9700\u8981\u6570\u636e\u65f6\u5c06\u5176\u91ca\u653e\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u5f53\u624b\u52a8\u5206\u914d\u7ed3\u6784\u65f6\uff0c\u91cd\u8981\u7684\u662f\u8981\u786e\u4fdd\u7ed3\u6784\u4e2d\u6ca1\u6709\u5bf9Go\u5206\u914d\u7684\u5185\u5b58\u7684\u5f15\u7528\u3002\u8003\u8651\u5bf9\u4e0a\u9762\u7684\u7ed3\u6784\u8fdb\u884c\u8f7b\u5fae\u4fee\u6539\uff1a\n\u8ba9\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u6839\uff1a=newNode(Val)\u51fd\u6570\u6765\u6309\u9700\u5206\u914d\u4e00\u4e2a\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u968f\u540e\u8bbe\u7f6eroot.next=&amp\uff1bnode{val\uff1aval}\uff0c\u5b83\u901a\u8fc7Go Memory\u6765\u5206\u914d\u94fe\u8868\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u8282\u70b9\uff0c\u6211\u4eec\u5fc5\u7136\u4f1a\u5f97\u5230\u4ee5\u4e0b\u5206\u6bb5\u9519\u8bef\uff1a\n$GO RUN-RACE-TAG=&#34\uff1bjemalloc&#34\uff1b\u3002\u5df2\u5206\u914d\u5185\u5b58\uff1a16 B\u5bf9\u8c61\uff1a2000001\u610f\u5916\u6545\u969c\u5730\u57400x1cccb0\u81f4\u547d\u9519\u8bef\uff1a\u6545\u969c[\u4fe1\u53f7SIGSEGV\uff1a\u5206\u6bb5\u51b2\u7a81\u4ee3\u7801=0x1 Addr=0x1cccb0 PC=0x55a48b]\nGO\u5206\u914d\u7684\u5185\u5b58\u4f1a\u88ab\u5783\u573e\u56de\u6536\uff0c\u56e0\u4e3a\u6ca1\u6709\u6709\u6548\u7684GO\u7ed3\u6784\u6307\u5411\u5b83\u3002\u53ea\u6709C\u5206\u914d\u7684\u5185\u5b58\u5728\u5f15\u7528\u5b83\uff0c\u800cGo\u5806\u6ca1\u6709\u4efb\u4f55\u5bf9\u5b83\u7684\u5f15\u7528\uff0c\u8fd9\u5bfc\u81f4\u4e86\u4e0a\u9762\u7684\u9519\u8bef\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u5e76\u624b\u52a8\u4e3a\u5176\u5206\u914d\u5185\u5b58\uff0c\u91cd\u8981\u7684\u662f\u8981\u786e\u4fdd\u6240\u6709\u9012\u5f52\u53ef\u8bbf\u95ee\u7684\u5b57\u6bb5\u4e5f\u90fd\u662f\u624b\u52a8\u5206\u914d\u7684\u3002\n\u4f8b\u5982\uff0c\u5982\u679c\u4e0a\u9762\u7684\u7ed3\u6784\u4f7f\u7528\u4e00\u4e2a\u5b57\u8282\u7247\uff0c\u6211\u4eec\u4e5f\u4f7f\u7528Allocator\u6765\u5206\u914d\u8be5\u5b57\u8282\u7247\uff0c\u4ee5\u907f\u514d\u5c06GO\u5185\u5b58\u548cC\u5185\u5b58\u6df7\u4e3a\u4e00\u8c08\u3002\n\u5206\u914d\u5668\u975e\u5e38\u9002\u5408\u624b\u52a8\u5206\u914d\u6570\u767e\u4e07\u4e2a\u7ed3\u6784\u3002\u7136\u800c\uff0c\u6211\u4eec\u6709\u9700\u8981\u521b\u5efa\u6570\u5341\u4ebf\u4e2a\u5c0f\u5bf9\u8c61\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\u7684\u7528\u4f8b\u3002\u5728\u56f4\u68cb\u4e2d\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u65b9\u6cd5\uff0c\u5373\u4f7f\u662f\u4f7f\u7528Allocator\uff0c\u770b\u8d77\u6765\u4e5f\u662f\u8fd9\u6837\u7684\uff1a\nVar Nodes[]*nodefor i\uff1a=0\uff1bi&lt\uff1b1e9\uff1bi++{b\uff1a=allocator.AllocateAligned(NodeSz)n\uff1a=(*node)(unSafe.Pointer(&amp\uff1bb[0]))n.val=rand.Int63()Nodes=append(Nodes\uff0cn)}\u6392\u5e8f\u3002Slice(Nodes\uff0cfunc(i\uff0cj int)bool{Return Nodes[i].val&lt\uff1bNodes\u3002\n\u6240\u6709\u8fd9\u4e9b1B\u8282\u70b9\u90fd\u662f\u5728\u5206\u914d\u5668\u4e0a\u624b\u52a8\u5206\u914d\u7684\uff0c\u8fd9\u4f1a\u5f88\u6602\u8d35\u3002\u6211\u4eec\u8fd8\u9700\u8981\u652f\u4ed8Go\u4e2d\u7684\u5207\u7247\u6210\u672c\uff0c8 GB\u7684\u5185\u5b58(\u6bcf\u4e2a\u8282\u70b9\u6307\u94888\u5b57\u8282\uff0c1B\u6761\u76ee)\u672c\u8eab\u5c31\u76f8\u5f53\u6602\u8d35\u3002\n\u4e3a\u4e86\u5904\u7406\u8fd9\u7c7b\u7528\u4f8b\uff0c\u6211\u4eec\u6784\u5efa\u4e86z.Buffer\uff0c\u5b83\u53ef\u4ee5\u88ab\u5185\u5b58\u6620\u5c04\u5230\u4e00\u4e2a\u6587\u4ef6\u4e0a\uff0c\u4ece\u800c\u5141\u8bb8Linux\u6839\u636e\u7cfb\u7edf\u7684\u9700\u8981\u8c03\u5165\u548c\u8c03\u51fa\u5185\u5b58\u3002\u5b83\u5b9e\u73b0\u4e86io.Writer\uff0c\u53d6\u4ee3\u4e86\u6211\u4eec\u5bf9bytes.Buffer\u7684\u4f9d\u8d56\u3002\n\u66f4\u91cd\u8981\u7684\u662f\uff0cz.Buffer\u63d0\u4f9b\u4e86\u4e00\u79cd\u5206\u914d\u8f83\u5c0f\u6570\u636e\u7247\u7684\u65b0\u65b9\u6cd5\u3002\u901a\u8fc7\u8c03\u7528SliceALLOCATE(N)\uff0cz.Buffer\u5c06\u5199\u5165\u8981\u5206\u914d\u7684\u7247\u7684\u957f\u5ea6(N)\uff0c\u7136\u540e\u5206\u914d\u7247\u3002\u8fd9\u4f7f\u5f97z.Buffer\u80fd\u591f\u7406\u89e3\u5207\u7247\u8fb9\u754c\uff0c\u5e76\u4f7f\u7528SliceIterate\u6b63\u786e\u5730\u8fed\u4ee3\u5b83\u4eec\u3002\n\u5bf9\u4e8e\u6392\u5e8f\uff0c\u6211\u4eec\u6700\u521d\u5c1d\u8bd5\u4ecez.Buffer\u83b7\u53d6\u5207\u7247\u504f\u79fb\u91cf\uff0c\u8bbf\u95ee\u8981\u6bd4\u8f83\u7684\u5207\u7247\uff0c\u4f46\u53ea\u5bf9\u504f\u79fb\u91cf\u8fdb\u884c\u6392\u5e8f\u3002\u5728\u7ed9\u5b9a\u504f\u79fb\u91cf\u7684\u60c5\u51b5\u4e0b\uff0cz.Buffer\u53ef\u4ee5\u8bfb\u53d6\u504f\u79fb\u91cf\uff0c\u627e\u5230\u5207\u7247\u7684\u957f\u5ea6\u5e76\u8fd4\u56de\u8be5\u5207\u7247\u3002\u56e0\u6b64\uff0c\u8be5\u7cfb\u7edf\u5141\u8bb8\u6211\u4eec\u6309\u6392\u5e8f\u987a\u5e8f\u8bbf\u95ee\u5207\u7247\uff0c\u800c\u4e0d\u4f1a\u5f15\u8d77\u4efb\u4f55\u5185\u5b58\u79fb\u52a8\u3002\u867d\u7136\u5f88\u65b0\u5947\uff0c\u4f46\u8fd9\u79cd\u673a\u5236\u7ed9\u5185\u5b58\u5e26\u6765\u4e86\u5f88\u5927\u7684\u538b\u529b\uff0c\u56e0\u4e3a\u6211\u4eec\u4ecd\u7136\u5728\u652f\u4ed88 GB\u7684\u5185\u5b58\u635f\u5931\uff0c\u53ea\u662f\u4e3a\u4e86\u628a\u8fd9\u4e9b\u8865\u507f\u653e\u5165Go\u5185\u5b58\u4e2d\u3002\n\u6211\u4eec\u6709\u4e00\u4e2a\u5173\u952e\u7684\u9650\u5236\uff0c\u90a3\u5c31\u662f\u5207\u7247\u7684\u5927\u5c0f\u4e0d\u4e00\u6837\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ea\u80fd\u6309\u987a\u5e8f\u8bbf\u95ee\u8fd9\u4e9b\u5207\u7247\uff0c\u800c\u4e0d\u80fd\u4ee5\u9006\u5e8f\u6216\u968f\u673a\u987a\u5e8f\u8bbf\u95ee\u8fd9\u4e9b\u5207\u7247\uff0c\u800c\u4e0d\u80fd\u63d0\u524d\u8ba1\u7b97\u548c\u5b58\u50a8\u504f\u79fb\u91cf\u3002\u5927\u591a\u6570\u5c31\u5730\u6392\u5e8f\u7b97\u6cd5\u90fd\u5047\u8bbe\u503c\u7684\u5927\u5c0f\u76f8\u540c\u4e3a5\uff0c\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4ea4\u6362\u3002\u53bb\u5427\u3002Slice\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u4e0d\u592a\u9002\u5408Z.Buffer\u3002\n\u6709\u4e86\u8fd9\u4e9b\u9650\u5236\uff0c\u6211\u4eec\u53d1\u73b0\u5408\u5e76\u6392\u5e8f\u7b97\u6cd5\u6700\u9002\u5408\u8fd9\u9879\u5de5\u4f5c\u3002\u4f7f\u7528\u5408\u5e76\u6392\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u987a\u5e8f\u5bf9\u7f13\u51b2\u533a\u8fdb\u884c\u64cd\u4f5c\uff0c\u5728\u7f13\u51b2\u533a\u5927\u5c0f\u4e0a\u53ea\u9700\u8981\u989d\u5916\u4e00\u534a\u7684\u5185\u5b58\u547d\u4e2d\u7387\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e0d\u4ec5\u6bd4\u5c06\u504f\u79fb\u91cf\u5f15\u5165\u5185\u5b58\u66f4\u4fbf\u5b9c\uff0c\u800c\u4e14\u5728\u5185\u5b58\u4f7f\u7528\u5f00\u9500\u65b9\u9762\u4e5f\u66f4\u53ef\u9884\u6d4b(\u5927\u7ea6\u662f\u7f13\u51b2\u533a\u5927\u5c0f\u7684\u4e00\u534a)\u3002\u66f4\u597d\u7684\u662f\uff0c\u8fd0\u884c\u5408\u5e76\u6392\u5e8f\u6240\u9700\u7684\u5f00\u9500\u672c\u8eab\u5c31\u662f\u5185\u5b58\u6620\u5c04\u7684\u3002\n\u5408\u5e76\u6392\u5e8f\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u79ef\u6781\u7684\u6548\u679c\u3002\u4f7f\u7528\u57fa\u4e8e\u504f\u79fb\u91cf\u7684\u6392\u5e8f\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u5728\u8fed\u4ee3\u548c\u5904\u7406\u7f13\u51b2\u533a\u65f6\u5c06\u504f\u79fb\u91cf\u4fdd\u7559\u5728\u5185\u5b58\u4e2d\uff0c\u8fd9\u7ed9\u5185\u5b58\u5e26\u6765\u4e86\u66f4\u5927\u7684\u538b\u529b\u3002\u4f7f\u7528\u5408\u5e76\u6392\u5e8f\uff0c\u6240\u9700\u7684\u989d\u5916\u5185\u5b58\u5728\u8fed\u4ee3\u5f00\u59cb\u65f6\u88ab\u91ca\u653e\uff0c\u8fd9\u610f\u5473\u7740\u6709\u66f4\u591a\u7684\u5185\u5b58\u53ef\u7528\u4e8e\u7f13\u51b2\u5904\u7406\u3002\nZ.Buffer\u8fd8\u652f\u6301\u901a\u8fc7Calloc\u5206\u914d\u5185\u5b58\uff0c\u4e00\u65e6\u5185\u5b58\u8d85\u8fc7\u7528\u6237\u6307\u5b9a\u7684\u9650\u5236\uff0c\u5c31\u4f1a\u81ea\u52a8\u8fdb\u884c\u5185\u5b58\u6620\u5c04\u3002\u8fd9\u4f7f\u5f97\u5b83\u5728\u5404\u79cd\u5927\u5c0f\u7684\u6570\u636e\u4e0a\u90fd\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002\nBuffer\uff1a=z.NewBuffer(256\uff1b&lt\uff1b20)//\u901a\u8fc7Calloc.Buffer.AutoMmapAfter(1&lt\uff1b&lt\uff1b30)\u4ece256MB\u5f00\u59cb//\u5b83\u53d8\u62101GB\u540e\u81ea\u52a8\u6620\u5c04\u3002\u5bf9\u4e8ei\uff1a=0\uff1bi&lt\uff1b1e9\uff1bi++{b\uff1a=Buffer.SliceAllocate(NodeSz)n\uff1a=(*node)(unSafe.Point(&amp\uff1bB[0])n.val=rand.Int63()}Buffer.SortSlice(func(Left\uff0cRight[]byte)bool{nl\uff1a=(*node)(unSafe.Pointer(&amp\uff1bLeft[0]))nr\uff1a=(*node)(&amp\uff1bright[0])return nl.val&lt\uff1bnr.val})//\u6309val.Buffer.Slicer.Slice.Node\u9012\u589e\u987a\u5e8f\u904d\u5386\u8282\u70b9\u3002B[0]))_=n.val\u8fd4\u56de\u503c\u4e3a\u7a7a})\u3002\n\u5982\u679c\u4e0d\u6d89\u53ca\u5185\u5b58\u6cc4\u6f0f\uff0c\u6240\u6709\u8fd9\u4e9b\u8ba8\u8bba\u90fd\u5c06\u662f\u4e0d\u5b8c\u6574\u7684\u3002\u73b0\u5728\u6211\u4eec\u4f7f\u7528\u7684\u662f\u624b\u52a8\u5185\u5b58\u5206\u914d\uff0c\u5728\u6211\u4eec\u5fd8\u8bb0\u91ca\u653e\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u5fc5\u7136\u4f1a\u6709\u5185\u5b58\u6cc4\u6f0f\u3002\u6211\u4eec\u600e\u4e48\u624d\u80fd\u6293\u4f4f\u5b83\u4eec\u5462\uff1f\n\u6211\u4eec\u4e4b\u524d\u505a\u7684\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u60c5\u662f\u8ba9\u539f\u5b50\u8ba1\u6570\u5668\u8ddf\u8e2a\u901a\u8fc7\u8fd9\u4e9b\u8c03\u7528\u5206\u914d\u7684\u5b57\u8282\u6570\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7z.NumAllocBytes()\u5feb\u901f\u77e5\u9053\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u624b\u52a8\u5206\u914d\u4e86\u591a\u5c11\u5185\u5b58\u3002\u5982\u679c\u5728\u5185\u5b58\u6d4b\u8bd5\u7ed3\u675f\u65f6\u4ecd\u6709\u5269\u4f59\u5185\u5b58\uff0c\u5219\u8868\u660e\u5b58\u5728\u6cc4\u6f0f\u3002\n\u5f53\u6211\u4eec\u786e\u5b9e\u53d1\u73b0\u4e86\u4e00\u4e2a\u6f0f\u6d1e\u65f6\uff0c\u6211\u4eec\u6700\u521d\u5c1d\u8bd5\u4f7f\u7528jemalloc\u5185\u5b58\u5206\u6790\u5668\u3002\u4f46\u662f\uff0c\u6211\u4eec\u5f88\u5feb\u610f\u8bc6\u5230\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\u3002\u7531\u4e8eCGO\u8fb9\u754c\u7684\u539f\u56e0\uff0c\u5b83\u770b\u4e0d\u5230\u6574\u4e2arecall\u5806\u6808\u3002\u5206\u6790\u5668\u770b\u5230\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u6765\u81ea\u76f8\u540cz.Calloc\u548cz.Free\u8c03\u7528\u7684\u5206\u914d\u548c\u91ca\u653e\u3002\n\u591a\u4e8f\u4e86Go\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u80fd\u591f\u5feb\u901f\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u7cfb\u7edf\u6765\u5c06\u8c03\u7528\u8005\u6355\u83b7\u5230z.Calloc\u4e2d\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0ez.Free\u8c03\u7528\u8fdb\u884c\u5339\u914d\u3002\u8fd9\u4e2a\u7cfb\u7edf\u9700\u8981\u4e92\u65a5\u9501\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u9ed8\u8ba4\u4e0d\u542f\u7528\u5b83\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u4f7f\u7528\u6cc4\u6f0f\u6784\u5efa\u6807\u5fd7\u6765\u6253\u5f00\u5f00\u53d1\u4eba\u5458\u6784\u5efa\u7684\u6cc4\u6f0f\u8c03\u8bd5\u6d88\u606f\u3002\u8fd9\u4f1a\u81ea\u52a8\u68c0\u6d4b\u6cc4\u6f0f\uff0c\u5e76\u6253\u5370\u51fa\u53d1\u751f\u6cc4\u6f0f\u7684\u4f4d\u7f6e\u3002\n//\u5982\u679c\u542f\u7528\u4e86\u6cc4\u6f0f\u68c0\u6d4b\u3002pc\uff0c_\uff0cl\uff0cok\uff1a=runtime.Caller(1)if ok{dallocsMu.Lock()dallocs[uptr]=&amp\uff1bdalloc{pc\uff1apc\uff0cno\uff1al\uff0csz\uff1an\uff0c}dallocsMu.Unlock()}//\u8bf1\u5bfc\u6cc4\u6f0f\u4ee5\u6f14\u793a\u6cc4\u6f0f\u6355\u83b7\u3002\u7b2c\u4e00\u4e2a\u6570\u5b57\u663e\u793a//\u5206\u914d\u7684\u5927\u5c0f\uff0c\u540e\u8ddf\u51fd\u6570\u548c//\u8fdb\u884c\u5206\u914d\u7684\u884c\u53f7\u3002$go test-v-tag=&#34\uff1bjemalloc leak&#34\uff1b-run=TestCalloc...leak\uff1a128 at func\uff1agithub.com/dgraph-io/ristretto/z.TestCalloc 91\u3002\n\u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\uff0c\u6211\u4eec\u4e24\u5168\u5176\u7f8e\uff1a\u6211\u4eec\u53ef\u4ee5\u5728\u5173\u952e\u7684\u3001\u5185\u5b58\u53d7\u9650\u7684\u4ee3\u7801\u8def\u5f84\u4e2d\u8fdb\u884c\u624b\u52a8\u5185\u5b58\u5206\u914d\u3002\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u975e\u5173\u952e\u4ee3\u7801\u8def\u5f84\u4e2d\u83b7\u5f97\u81ea\u52a8\u5783\u573e\u56de\u6536\u7684\u597d\u5904\u3002\u5373\u4f7f\u4f60\u4e0d\u4e60\u60ef\u4f7f\u7528CGO\u6216jemalloc\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u6280\u672f\u5e94\u7528\u5230\u66f4\u5927\u7684\u56f4\u68cb\u5185\u5b58\u4e0a\uff0c\u4ea7\u751f\u7c7b\u4f3c\u7684\u6548\u679c\u3002\n\u4e0a\u9762\u63d0\u5230\u7684\u6240\u6709\u5e93\u90fd\u5728Ristretto/z\u5305\u4e2d\u7684Apache2.0\u8bb8\u53ef\u4e0b\u53ef\u7528\u3002MemTest\u548c\u6f14\u793a\u4ee3\u7801\u4f4d\u4e8eConrib\u6587\u4ef6\u5939\u4e2d\u3002\n\u737e\u548cDgraph(\u7279\u522b\u662f\u737e)\u90fd\u5df2\u7ecf\u4ece\u4f7f\u7528\u8fd9\u4e9b\u5e93\u4e2d\u83b7\u76ca\u826f\u591a\u3002\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6709\u9650\u7684\u5185\u5b58\u6765\u5904\u7406TB\u7ea7\u7684\u6570\u636e--\u8fd9\u7b26\u5408\u60a8\u5bf9C++\u7a0b\u5e8f\u7684\u671f\u671b\u3002\u6211\u4eec\u6b63\u5728\u8fdb\u4e00\u6b65\u627e\u51fa\u56f4\u68cb\u8bb0\u5fc6\u9762\u4e34\u538b\u529b\u7684\u9886\u57df\uff0c\u5e76\u5728\u6709\u610f\u4e49\u7684\u5730\u65b9\u5207\u6362\u5230\u624b\u52a8\u8bb0\u5fc6\u7ba1\u7406\u6765\u7f13\u89e3\u538b\u529b\u3002\nDgraph v20.11(T&#39\uff1bChalla)\u7248\u672c\u5c06\u662f\u7b2c\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5185\u5b58\u7ba1\u7406\u529f\u80fd\u7684\u7248\u672c\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u786e\u4fddDgraph\u6c38\u8fdc\u4e0d\u9700\u8981\u8d85\u8fc732 GB\u7684\u7269\u7406RAM\u6765\u8fd0\u884c\u4efb\u4f55\u7c7b\u578b\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\u4f7f\u7528z.Calloc\u3001z.Free\u3001z.Allocator\u548cz.Buffer\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u901a\u8fc7Go\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u3002\n\u591a\u5e74\u6765\uff0c\u6211\u4eec\u5728GO\u4e2d\u5c1d\u8bd5\u4e86\u6240\u6709\u7684\u4ea4\u6613\u6280\u5de7\u3002\u4f7f\u7528sync.Pool\uff0c\u7ef4\u62a4\u6211\u4eec\u81ea\u5df1\u7684\u81ea\u7531\u5217\u8868\uff0c\u5c3d\u53ef\u80fd\u907f\u514d\u5806\u4e0a\u7684\u5206\u914d\uff0c\u4f7f\u7528\u7f13\u51b2\u533a\u533a\u57df\u7b49\u7b49\u3002\u21a9\ufe0e\u3002\n\u5f53\u60a8\u83b7\u5f97\u4f7f\u7528\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u8bed\u8a00\u7f16\u5199\u4ee3\u7801\u7684\u7ecf\u9a8c\u65f6\uff0c\u60a8\u5c31\u4f1a\u6ce8\u610f\u5230\u5206\u914d\u548c\u91ca\u653e\u3002\u6b64\u5916\uff0c\u6027\u80fd\u5206\u6790\u5de5\u5177\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5e2e\u52a9\u60a8\u786e\u5b9a\u5185\u5b58\u6cc4\u6f0f\uff0c\u4ee5\u4fbf\u4ece\u4ee3\u7801\u5e93\u4e2d\u6d88\u9664\u5185\u5b58\u6cc4\u6f0f\u3002\u8fd9\u4e0e\u5728Go\u4e2d\u7f16\u5199\u4ee3\u7801\u65f6\u83b7\u5f97\u773c\u5411\u5e76\u53d1\u6a21\u5f0f\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u5728\u5916\u4eba\u770b\u6765\uff0c\u5e76\u53d1\u548c\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u90fd\u7279\u522b\u56f0\u96be\uff0c\u4f46\u5bf9\u4e8e\u7ecf\u5e38\u81f4\u529b\u4e8e\u8fd9\u4e24\u79cd\u8bed\u8a00\u7684\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u5b83\u4eec\u53ea\u662f\u6e38\u620f\u7684\u4e00\u90e8\u5206\u3002\u21a9\ufe0e\n\u4e8b\u5b9e\u4e0a\uff0c\u7531\u4e8e\u9700\u8981\u4e92\u65a5\u9501\uff0c\u5728allocator\u4e2d\u7ba1\u7406\u81ea\u7531\u804c\u4e1a\u8005\u7684\u4e00\u4e9b\u5b9e\u9a8c\u88ab\u8bc1\u660e\u6bd4\u4ec5\u4ec5\u4f7f\u7528Calloc\u548cFree\u8981\u6162\u3002\u21a9\ufe0e\u3002\n\u53ef\u53d8\u957f\u5ea6\u5b57\u7b26\u4e32\u7684\u7247\u6bb5var buf[]\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\u4ecd\u7136\u662f\u56fa\u5b9a\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5bf9\u7247\u6bb5\u7684\u611f\u77e5\u3002Buf[i]\u548cbuf[j]\u5360\u7528\u7684\u5185\u5b58\u91cf\u5b8c\u5168\u76f8\u540c\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u6307\u5411\u5b57\u7b26\u4e32\u7684\u6307\u9488\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728buf\u5185\u968f\u65f6\u4ea4\u6362\u3002\u8fd9\u91cc\u7684\u60c5\u51b5\u5e76\u975e\u5982\u6b64\uff0c\u5b57\u8282\u7247\u88ab\u653e\u7f6e\u5728\u4e00\u4e2a\u5927\u5f97\u591a\u7684\u5b57\u8282\u7f13\u51b2\u533a\u4e0a\u3002\u21a9\ufe0e", "note_en": "Dgraph Labs has been a user of the Go language since our inception in 2015. Fiveyears and 200K lines of Go code later, we&#39;re happy to report that we are stillconvinced Go was and remains the right choice. Our excitement for Go has gonebeyond building systems, and has led us to even write scripts in Go that wouldtypically be written in Bash or Python. We find that using Go has helped usbuild a codebase that is clean, readable, maintainable and - most importantly -efficient and concurrent.\n However, there&#39;s one area of concern that we have had since the early days: memory management. We have nothing against the Go garbage collector, but whileit offers a convenience to developers, it has the same issue that other memorygarbage collectors do:  it simply cannot compete with the efficiency of manualmemory management.\n When you manage memory manually, the memory usage is lower, predictable andallows bursts of memory allocation to not cause crazy spikes in memory usage.For Dgraph using Go memory, all of those have been a problem  1. In fact, Dgraphrunning out of memory is a very common complaint we hear from our users.\n Languages like Rust have been gaining ground partly because it allows safemanual memory management. We can completely empathize with that.\n In our experience, doing manual memory allocation and chasing potential memoryleaks takes less effort than trying to optimize memory usage in a language withgarbage collection  2. Manual memory management is well worth the trouble whenbuilding database systems that are capable of virtually unlimited scalability.\n Our love of Go and our need to avoid Go GC led us to find  novel ways to domanual memory management in Go. Of course,  most Go users will never need to domanual memory management; and we would recommend against it unless you need it. And when you do need it, you&#39;ll know.\n In this post, I&#39;ll share what we have learned at Dgraph Labs from ourexploration of manual memory management, and explain how we manually managememory in Go.\n  The inspiration came from the Cgo wiki section about  Turning C arrays into Goslices. We could use  malloc to allocate memory in C and use unsafe to pass it over to Go, without any interference from Go GC.\n import &#34;C&#34;import &#34;unsafe&#34;... var theCArray *C.YourType = C.getTheArray() length := C.getTheArrayLength() slice := (*[1 &lt;&lt; 28]C.YourType)(unsafe.Pointer(theCArray))[:length:length]\n  Note: the current implementation has a bug. While Go code is permitted to write nil or a C pointer (but not a Go pointer) to C memory, the current implementation may sometimes cause a runtime error if the contents of the C memory appear to be a Go pointer. Therefore, avoid passing uninitialized C memory to Go code if the Go code is going to store pointer values in it. Zero out the memory in C before passing it to Go.\n So, instead of using  malloc, we use its slightly more expensive sibling, calloc.  calloc works the same way as  malloc, except it zeroes outthe memory before returning it to the caller.\n We started out by just implementing basic  Calloc and  Free functions, whichallocate and de-allocate byte slices for Go via Cgo. To test these functions, wedeveloped and ran a continuous  memory usage test. This testendlessly repeated an allocate/de-allocate cycle in which it first allocatedvarious randomly-sized memory chunks until it had allocated 16GB of memory, andthen freed these chunks until just 1GB of memory was left allocated.\n The C equivalent of this program behaved as expected. We would see the RSSmemory in our  htop increasing to 16GB, then going down to 1GB, increasing backto 16GB, and so on. However, the Go program using  Calloc and  Free woulduse progressively more memory after each cycle (see chart below).\n We attributed this behavior to memory fragmentation due to lack of threadawareness in the default  C.calloc calls. After some help from the Go #dark-arts Slack channel (particular thanks to Kale Blankenship), we decidedto give  jemalloc a try.\n  jemalloc is a general purpose malloc(3) implementation that emphasizesfragmentation avoidance and scalable concurrency support. jemalloc first cameinto use as the FreeBSD libc allocator in 2005, and since then it has found itsway into numerous applications that rely on its predictable behavior. \u2014 http://jemalloc.net\n We switched our APIs over to use jemalloc  3 for  calloc and  free calls.  And itperformed beautifully: jemalloc supports threads natively with little memoryfragmentation. The allocation-deallocation cycles from our memory usagemonitoring test were circulating between expected limits, ignoring a smalloverhead required to run the test.\n Just to ensure that we&#39;re using jemalloc and avoid a name clash, we added a je_ prefix during installation, so our APIs are now calling  je_calloc and je_free, instead of  calloc and  free.\n   In the above chart, allocating Go memory via C.calloc resulted in major memoryfragmentation, causing the program to hog on to 20GBs of memory by the 11thcycle. Equivalent code with jemalloc had no noticeable fragmentation,going down close to 1GB on every cycle.\n At the end of the program (small dips on far right), after all theallocated memory was released, C.calloc program resulted in still hogging justunder 20GB of memory, while jemalloc showed 400MB of memory usage.\n     ptr := C.je_calloc(C.size_t(n), 1)\tif ptr == nil {\t\t// NB: throw is like panic, except it guarantees the process will be\t\t// terminated. The call below is exactly what the Go runtime invokes when\t\t// it cannot allocate memory.\t\tthrow(&#34;out of memory&#34;)\t}\tuptr := unsafe.Pointer(ptr)\tatomic.AddInt64(&amp;numBytes, int64(n))\t// Interpret the C pointer as a pointer to a Go array, then slice.\treturn (*[MaxArrayLen]byte)(uptr)[:n:n]\n We made this code part of  Ristretto\u2018s z package, so both Dgraph and Badgercan use it. To allow our code to switch to using jemalloc to allocate the byteslices, we added a build tag  jemalloc. To further simplify our deployments, wemade the  jemalloc library be statically linked in any resulting Go binary bysetting the right LDFLAGS.\n  Now that we have a way to allocate and free a byte slice, the next stepis to use it to layout a Go struct. We can start with a basic one ( full code).\n type node struct { val int next *node}var nodeSz = int(unsafe.Sizeof(node{}))func newNode(val int) *node { b := z.Calloc(nodeSz) n := (*node)(unsafe.Pointer(&amp;b[0])) n.val = val return n}func freeNode(n *node) { buf := (*[z.MaxArrayLen]byte)(unsafe.Pointer(n))[:nodeSz:nodeSz] z.Free(buf)}\n In the code above, we laid out a Go struct on C allocated memory using  newNode.We created a corresponding  freeNode function, which can free up the memory oncewe were done with the struct. The Go struct has the basic data type  int and apointer to the next node struct, all of which were set and accessed in theprogram.We allocated 2M node objects and created a linked list out of them todemonstrate the proper functioning of jemalloc.\n With default Go memory, we see 31 MiB of heap allocated for the linked list with2M objects, but nothing allocated via jemalloc.\n $ go run .Allocated memory: 0 Objects: 2000001node: 0...node: 2000000After freeing. Allocated memory: 0HeapAlloc: 31 MiB\n Using the jemalloc build tag, we see 30 MiB of memory allocated via jemalloc,which goes down to zero after freeing the linked list. The Go heap allocation isonly a tiny 399 KiB, which probably comes from the overhead of running theprogram.\n $ go run -tags=jemalloc .Allocated memory: 30 MiB Objects: 2000001node: 0...node: 2000000After freeing. Allocated memory: 0HeapAlloc: 399 KiB\n  The above code works great to avoid allocating memory via Go.  But, it comes at acost: lower performance. Running both the instances with  time, we see thatwithout jemalloc, the program ran in 1.15s. With jemalloc, it ran ~5x slower at5.29s.\n $ time go run .go run . 1.15s user 0.25s system 162% cpu 0.861 total$ time go run -tags=jemalloc .go run -tags=jemalloc . 5.29s user 0.36s system 108% cpu 5.200 total\n We attribute the slower performance to the fact that Cgo calls were made eachtime that memory was allocated, and each Cgo call comes with some overhead. Todeal with this, we wrote an  Allocator library in  ristretto/z package. This library allocates bigger chunks of memory in one call, which can then beused to allocate many small objects, avoiding expensive Cgo calls.\n Allocator starts with a buffer and when exhausted, creates a new buffer oftwice the size. It maintains an internal list of all the allocated buffers.Finally, when the user is done with the data, they can call  Release to free upall these buffers in one go. Note that  Allocator does not do any memory movement.This helps ensure that any  struct pointers we have stay valid.\n While this might look a bit like the slab-style memory management that tcmalloc/ jemalloc use, this is a lot simpler. Once allocated, you can notfree up just one struct. You can only free up all of the memory used by Allocator  4.\n What Allocator does well is to layout millions of structs for cheap and freethem when done, without involving the Go heap. The same program shownabove, when run with a new  allocator build tag, runs even faster thanthe Go memory version.\n $ time go run -tags=&#34;jemalloc,allocator&#34; .go run -tags=&#34;jemalloc,allocator&#34; . 1.09s user 0.29s system 143% cpu 0.956 total\n Starting in Go 1.14, the  -race flag turns on memory alignment checks forstructs.  Allocator has an  AllocateAligned method which returns memorystarting with the right pointer alignment to pass those checks. Depending uponthe size of the struct, this could result in some memory waste butmakes CPU instructions more efficient due to correct word boundaries.\n We faced another memory management problem: Sometimes memory allocation happensat a very different place from deallocation. The only communication betweenthese two places might be the structs allocated with no way to pass down theactual  Allocator object. To deal with this, we assign a unique ID to each Allocator object, which the objects store in a  uint64 reference. Each new Allocator object is stored on a global map against its reference.  Allocatorobjects can then be recalled using this reference and released when the data isno longer required.\n   When allocating a struct manually, as shown above, it is important to ensurethat there&#39;s no reference within the struct to Go-allocated memory. Consider aslight modification to the struct above:\n  Let&#39;s use the  root := newNode(val) func defined above to allocate a nodemanually. If, however, we then set  root.next = &amp;node{val: val}, whichallocates all the other nodes in the linked list via Go memory, we are bound toget the following segmentation fault:\n $ go run -race -tags=&#34;jemalloc&#34; .Allocated memory: 16 B Objects: 2000001unexpected fault address 0x1cccb0fatal error: fault[signal SIGSEGV: segmentation violation code=0x1 addr=0x1cccb0 pc=0x55a48b]\n The memory allocated by Go gets garbage collected because no valid Go struct ispointing to it. Only C-allocated memory is referencing it, and the Go heap doesnot have any reference to it, resulting in the above fault. So, if youcreate a struct and manually allocate memory to it, it&#39;s important to ensurethat  all the recursively accessible fields are allocated manually as well.\n For example, if the above struct was using a byte slice, we allocate that byteslice using  Allocator as well to avoid mixing Go memory with C memory.\n   Allocator is great for manually allocating millions of structs. However, we haveuse cases where we need to create billions of small objects and sort them. Theway one would do that in Go, even with  Allocator, looks something like this:\n var nodes []*nodefor i := 0; i &lt; 1e9; i++ { b := allocator.AllocateAligned(nodeSz) n := (*node)(unsafe.Pointer(&amp;b[0])) n.val = rand.Int63() nodes = append(nodes, n)}sort.Slice(nodes, func(i, j int) bool { return nodes[i].val &lt; nodes[j].val})// nodes are now sorted in increasing order of val.\n All these 1B nodes are manually allocated on the  Allocator, which getsexpensive. We also need to pay the cost of the slice in Go, which at 8GB ofmemory (8 bytes per node pointer, 1B entries) is itself quite expensive.\n To deal with these kinds of use cases, we built  z.Buffer, which can be memorymapped on a file to allow Linux to page memory in and out as required by thesystem. It implements  io.Writer and replaces our reliance on  bytes.Buffer.\n More importantly,  z.Buffer provides a new way to allocate smaller slices ofdata. With a call to  SliceAllocate(n),  z.Buffer would write the length ofthe slice being allocated (n) followed by allocating the slice. This allows z.Buffer to understand slice boundaries and iterate over them correctly with SliceIterate.\n  For sorting, we initially tried to get slice offsets from  z.Buffer, access theslices to compare, but sort only the offsets. Given an offset,  z.Buffer canread the offset, find the length of the slice and return that slice. So thissystem allowed us to access the slices in sorted order, without incurring anymemory movements. While novel, that mechanism put a lot of pressure on memory,because we were still paying the 8GB memory penalty just to bring those offsetsinto Go memory.\n One crucial limitation we had was that slices were not of the samesize. Moreover, we could only access these slices in sequential order, not inreverse or random order, without calculating and storing the offsets in advance.Most in-place sort algorithms assume that values are of the same size   5, can berandomly accessed and can be readily swapped. Go&#39;s  sort.Slice works the sameway, and hence wasn&#39;t a good fit for  z.Buffer.\n With these limitations, we found the merge sort algorithm to be the most suitablefor this job.  With merge sort, we can operate on the buffer in sequentialorder, taking only an extra half the memory hit over the size of the buffer.This not only turned out to be cheaper than bringing offsets into memory, but itwas a lot more predictable in terms of memory usage overhead as well  (roughlyhalf the buffer size). Even better, the overhead required to run merge sort isitself memory-mapped.\n Merge sort also had one very positive effect. With offset based sorting, we hadto keep the offsets in memory while iterating over and processing the buffer,which put even more pressure on memory. With merge sort,  the extra memoryneeded is released by the time iteration starts, which means more memory isavailable for buffer processing.\n z.Buffer also supports allocating memory via  Calloc, and automaticallymemory mapping it once it exceeds a certain user-specified limit. This makes itwork really well across all sizes of data.\n buffer := z.NewBuffer(256&lt;&lt;20) // Start with 256MB via Calloc.buffer.AutoMmapAfter(1&lt;&lt;30) // Automatically mmap it after it becomes 1GB.for i := 0; i &lt; 1e9; i++ { b := buffer.SliceAllocate(nodeSz) n := (*node)(unsafe.Pointer(&amp;b[0])) n.val = rand.Int63()}buffer.SortSlice(func(left, right []byte) bool { nl := (*node)(unsafe.Pointer(&amp;left[0])) nr := (*node)(unsafe.Pointer(&amp;right[0])) return nl.val &lt; nr.val})// Iterate over nodes in increasing order of val.buffer.SliceIterate(func(b []byte) error { n := (*node)(unsafe.Pointer(&amp;b[0])) _ = n.val return nil})\n  All of this discussion would not be complete without touching on memory leaks.Now that we are using manual memory allocation, there are bound to be memoryleaks where we forgot to deallocate memory.  How do we catch those?\n One simple thing we did early on was to have an atomic counter track the numberof bytes allocated via these calls, so we can quickly know how much memory wehave manually allocated in the program via  z.NumAllocBytes(). If by theend of our memory test we still had any memory left, this indicated a leak.\n When we did find a leak, we initially tried to use the  jemalloc memoryprofiler. But, we soon realized that it isn&#39;t helpful. It doesn&#39;t see the entirecall stack due to the Cgo boundary. All that the profiler sees are allocationsand de-allocations coming from the same  z.Calloc and  z.Free calls.\n Thanks to the Go runtime, we were able to quickly build a simple system to capturethe callers into  z.Calloc and match them against  z.Free calls. Thissystem requires mutex locks, so we chose not to enable it by default. Instead,we use a  leak build flag to turn on leak debug messages for our dev builds.This automatically detects leaks, and prints out the places where any leaksoccur.\n // If leak detection is enabled.pc, _, l, ok := runtime.Caller(1)if ok { dallocsMu.Lock() dallocs[uptr] = &amp;dalloc{ pc: pc, no: l, sz: n, } dallocsMu.Unlock()}// Induced leak to demonstrate leak capture. The first number shows// the size of allocation, followed by the function and the line// number where the allocation was made.$ go test -v -tags=&#34;jemalloc leak&#34; -run=TestCalloc...LEAK: 128 at func: github.com/dgraph-io/ristretto/z.TestCalloc 91\n  With these techniques, we get the best of both worlds: We can do  manual memoryallocation in critical, memory-bound code paths. At the same time,we can get the benefits of  automatic garbage collection in non-critical codepaths. Even if you are not comfortable using Cgo or jemalloc, you could apply thesetechniques on bigger chunks of Go memory, with similar impact.\n All of the libraries mentioned above are available under Apache 2.0 license inthe  Ristretto/z package. The memtest and demo code is located in contrib folder.\n Both Badger and Dgraph (particularlyBadger) have already gained immensely from using these libraries. We can nowprocess terabytes of data with limited memory usage \u2013  in line with what you&#39;dexpect from a C++ program. We are further identifying areas where we putpressure on Go memory, and relieving it by switching to manual memorymanagement where that makes sense.\n Dgraph v20.11 ( T&#39;Challa) release will be the first one to include all of thesememory management features. Our goal is to ensure that Dgraph never needs morethan 32 GB of physical RAM to run any kind of workload. And using  z.Calloc, z.Free,  z.Allocator and  z.Buffer helps us achieve this goal with Go.\n Over the years, we have tried all tricks of the trade within Go. Usingsync.Pool, maintaining our own freelists, avoiding allocations on heapwherever possible, using buffer arenas and so on.  \u21a9\ufe0e\n When you gain experience writing in a language with manual memorymanagement, you develop an eye towards the allocations and deallocations.Moreover, profiling tools further help you determine memory leaks toeradicate them from the code base. This is no different from gaining an eyetowards concurrency patterns when writing code in Go. Both concurrency andmanual memory management look particularly hard to outsiders, but are justpart of the game for the developers regularly working on those languages.  \u21a9\ufe0e\n  In fact, some experimentation with managing freelists within allocatorproved to be slower than just using Calloc and Free, due to the need for mutexlocks.  \u21a9\ufe0e\n A slice of variable-length strings  var buf []string is still fixed sizefrom the perception of the slice.  buf[i] and  buf[j] take exactly the sameamount of memory, because they&#39;re both pointers to string, and can be readilyswapped within  buf. That&#39;s not the case here with byte slices being laid outon a much bigger byte buffer.  \u21a9\ufe0e", "posttime": "2020-11-07 11:11:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u5b58,jemalloc,memory", "title": "\u4f7f\u7528jemalloc\u5728\u56f4\u68cb\u4e2d\u8fdb\u884c\u624b\u52a8\u5185\u5b58\u7ba1\u7406", "title_en": "Manual Memory Management in Go using jemalloc", "transed": 1, "url": "https://dgraph.io/blog/post/manual-memory-management-golang-jemalloc/", "via": "", "real_tags": ["\u5185\u5b58", "jemalloc", "memory"]}, {"category": "", "categoryclass": "", "imagename": "09a389eaf8bd01041e70b65a350522ef.png", "infoid": 1033605, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f51\u7edc\u5b89\u5168\u6559\u80b2\u591a\u6837\u6027\u5021\u8bae(CEDI)\u89e3\u51b3\u4e86\u56fd\u5bb6\u5173\u952e\u7684\u7f51\u7edc\u5b89\u5168\u4eba\u624d\u7f3a\u53e3\uff0c\u6d88\u9664\u4e86\u901a\u5e38\u4e0e\u5efa\u7acb\u65b0\u7684\u7f51\u7edc\u5b89\u5168\u8ba1\u5212\u6709\u5173\u7684\u969c\u788d\uff1b\u83b7\u5f97\u8ba4\u8bc1\u7684\u6559\u5e08\u3001\u9ad8\u8d28\u91cf\u7684\u6559\u80b2\u8d44\u6e90\u3001\u6307\u5bfc\u3001\u4e0a\u4e0b\u6587\u5b66\u4e60\u4f53\u9a8c\u4ee5\u53ca\u4e0e\u6240\u6709\u5de5\u4e1a\u90e8\u95e8\u7684\u4f01\u4e1a\u5728\u4e0d\u540c\u5730\u7406\u4f4d\u7f6e\u7684\u5b9e\u4e60\u673a\u4f1a\u3002\n\u9ad8\u8c2d\u5e02\u00b7\u590f\u5c14\u9a6c(Gotham Sharma)\u662f\u4e00\u4f4d\u7f51\u7edc\u5b89\u5168\u6559\u80b2\u5bb6\u3001\u6295\u8d44\u4eba\u3001\u6f14\u8bf4\u5bb6\u548c\u4f5c\u5bb6\u3002\u4ed6\u62c5\u4efbExeltek Consulting Group\u7684\u9996\u5e2d\u4fe1\u606f\u5b89\u5168\u5b98\u3002\u5728Twitter\u3001Instagram\u548cLinkedIn\u4e0a\u4e0e\u4ed6\u8054\u7cfb\u3002", "note_en": "\u201cThe Cybersecurity Education Diversity Initiative (CEDI), addresses the nation\u2019s critical cybersecurity talent gap by removing obstacles typically associated with establishing a new cybersecurity programs; access to certified teachers, quality educational resources, mentoring, contextual learning experiences and geographically-located internships with business across all industrial sectors.\u201d\n  Gotham Sharma is a cybersecurity educator, investor, speaker, and writer. He serves as the Chief Information Security Officer of the Exeltek Consulting Group. Connect with him on  Twitter,  Instagram, and  Linkedin.", "posttime": "2020-11-07 11:11:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56fd\u5bb6,nsa,\u7f51\u7edc\u5b89\u5168", "title": "\u56fd\u9632\u90e8\u548c\u56fd\u5bb6\u5b89\u5168\u5c40\u4e0eHBCU\u5171\u540c\u53d1\u8d77\u65b0\u7684\u7f51\u7edc\u5b89\u5168\u5021\u8bae", "title_en": "DoD and NSA Launch New Cybersecurity Initiative with HBCUs", "transed": 1, "url": "https://www.accesscyber.org/department-of-defense-national-security-agency-launch-cybersecurity-initiative-with-historically-black-universities-colleges/", "via": "", "real_tags": ["\u56fd\u5bb6", "nsa", "\u7f51\u7edc\u5b89\u5168"]}, {"category": "", "categoryclass": "", "imagename": "a1b6d4864fc168fc2c2b74a1a3b653b9.png", "infoid": 1033604, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\u53d1\u5e03\u7684\u51e0\u6b3e\u6e38\u620f\u91cd\u65b0\u70b9\u71c3\u4e86\u4eba\u4eec\u5bf9\u201c\u65e0\u8d56\u201d\u4e00\u8bcd\u542b\u4e49\u7684\u65e7\u6709\u8ba8\u8bba\u3002\u8fd9\u7bc7\u6587\u7ae0\u8bd5\u56fe\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u8bcd\u7684\u542b\u4e49\u5728\u5386\u53f2\u4e0a\u662f\u5982\u4f55\u53d8\u5316\u7684\u3002\n\u6d41\u6c13\u6e38\u620f\u4e0e\u4e3b\u6d41\u89c6\u9891\u6e38\u620f\u662f\u5206\u5f00\u8fdb\u5316\u7684\uff1a\u4e3b\u6d41\u6e38\u620f\u4e13\u6ce8\u4e8e\u7545\u9500\u7684\u529f\u80fd\uff0c\u800c\u6d41\u6c13\u6e38\u620f\u662f\u7531\u719f\u7ec3\u7684\u7a0b\u5e8f\u5458\u5f00\u53d1\u7684\uff0c\u4ed6\u4eec\u60f3\u8981\u4e3a\u81ea\u5df1\u521b\u9020\u6709\u8da3\u7684\u6e38\u620f\uff0c\u5e76\u4e0e\u5176\u4ed6\u6709\u76f8\u4f3c\u54c1\u5473\u7684\u4eba\u5206\u4eab\u8fd9\u4e9b\u6e38\u620f\u3002\u8fd9\u4e2a\u672f\u8bed\u4ece\u6765\u6ca1\u6709\u88ab\u5f88\u597d\u5730\u5b9a\u4e49\uff0c\u6bcf\u4e2a\u7403\u5458\u90fd\u6839\u636e\u81ea\u5df1\u7684\u611f\u89c9\u6765\u4f7f\u7528\u5b83\uff1b\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u628a\u5b83\u53d8\u6210\u76f8\u5f53\u4e3b\u89c2\u7684\u3002\u6b64\u5916\uff0c\u5927\u90e8\u5206\u7684\u91cd\u70b9\u90fd\u653e\u5728\u4e86\u793e\u533a\u4e0a-\u56e0\u4e3a\u6d41\u6c13\u5f80\u5f80\u88ab\u4e3b\u6d41\u5a92\u4f53\u5ffd\u89c6\uff0c\u7c89\u4e1d\u4eec\u805a\u96c6\u5728\u7f51\u7edc\u793e\u533a\uff0c\u8fd9\u5bf9\u8fd9\u4e00\u6d41\u6d3e\u7684\u6f14\u53d8\u81f3\u5173\u91cd\u8981\u3002\n\u5f53\u201c\u65e0\u8d56\u201d\u8fd9\u4e2a\u8bcd\u88ab\u521b\u9020\u51fa\u6765\u7684\u65f6\u5019\uff0c\u6211\u8fd8\u6ca1\u6709\u8fdb\u5165\u8fc7\u4efb\u4f55\u7f51\u7edc\u793e\u533a\uff1b\u5e78\u8fd0\u7684\u662f\uff0c\u5723\u5730\u4e9a\u54e5\u00b7\u8428\u5e15\u5854(Santiago Zapata)\u5df2\u7ecf\u5c31\u6b64\u5199\u4e86\u4e00\u7bc7\u535a\u6587\u3002\u8fd9\u4e2a\u672f\u8bed\u662f\u7531Usenet\u793e\u533a\u53d1\u660e\u7684\uff0c\u7528\u6765\u5c06\u4ed6\u4eec\u8ba4\u4e3a\u76f8\u4f3c\u7684\u51e0\u6b3e\u6e38\u620f\u5206\u7ec4\uff1b\u8fd9\u4e9b\u6e38\u620f\u662f(1)\u514d\u8d39\u7684(2)\u5730\u4e0b\u57ce\u722c\u884c\u6e38\u620f(3)\u4f7f\u7528\u201c\u89d2\u8272\u663e\u793a\u201d(\u6e38\u620f\u4e2d\u7684\u5b9e\u4f53\u7531\u5b57\u6bcd\u548c\u5176\u4ed6\u5b57\u7b26\u8868\u793a)\u3002\u6e38\u620f\u7279\u5f81\uff0c\u5982(4)\u6c38\u4e45\u6b7b\u4ea1\u6216(5)\u968f\u673a\u6027\u6ca1\u6709\u88ab\u8003\u8651\u3002\u5f53\u65f6\u7684\u6d41\u6c13\u6e38\u620f\u5305\u62ec\u76d7\u8d3c\u3001\u83ab\u91cc\u4e9a\u3001\u5948\u8428\u514b\u3001\u82f1\u56fd\u4f6c\u548c\u5176\u4ed6\u51e0\u6b3e\u5c0f\u6e38\u620f\u3002\n\u5927\u7ea6\u5728\u90a3\u4e2a\u65f6\u5019\uff0c\u6211\u4e00\u76f4\u5728\u73a9\u74e6\u5c14\u54c8\u62c9(\u901a\u5e38\u88ab\u79f0\u4e3aRagnarok)\u3002\u662f\u4e2a\u65e0\u8d56\u5417\uff1f\n(2)\u5730\u7262\u722c\u884c-\u90e8\u5206\uff1a\u6e38\u620f\u7684\u7b2c\u4e00\u4e2a\u4e3b\u8981\u90e8\u5206\u662f\u5728\u68ee\u6797\u4e2d\u8fdb\u884c\u7684\uff0c\u5c3d\u7ba1\u5730\u7262\u4e5f\u5f88\u7a81\u51fa\u3002\n(3)\u5b57\u7b26\u663e\u793a--\u4e0d\u662f\uff1a\u5b83\u7684\u56fe\u5f62\u5f88\u7b80\u5355(\u5c3d\u7ba1\u4f60\u5728\u4e0a\u9762\u7684\u5730\u56fe\u4e0a\u4ecd\u7136\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u5b57\u6bcd\u7b26\u53f7)\u3002\n(4)\u6c38\u4e45\u6b7b\u4ea1-\u90e8\u5206\uff1a\u5728\u50cf\u4f60\u8fd9\u6837\u7684\u6d41\u6c13\u4e2d\uff0c\u5f53\u6709\u4e0d\u597d\u7684\u4e8b\u60c5\u53d1\u751f\u65f6\uff0c\u4f60\u4e0d\u80fd\u91cd\u65b0\u52a0\u8f7d\u4f60\u7684\u65e7\u4fdd\u5b58\u6587\u4ef6\uff0c\u5982\u679c\u88ab\u51fb\u8d25\uff0c\u4f60\u4e0d\u80fd\u5f00\u59cb\u65b0\u7684\u6e38\u620f\uff0cValhara\u7684\u7279\u70b9\u662f\u5177\u6709\u975e\u5e38\u4e25\u683c\u7684\u4fdd\u5b58\u7684\u201c\u4e13\u5bb6\u6a21\u5f0f\u201d\uff0c\u4ee5\u53ca\u201c\u521d\u5b66\u8005\u6a21\u5f0f\u201d\uff0c\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4f60\u53ef\u4ee5\u6bcf200\u56de\u5408\u521b\u5efa\u4e00\u4e2a\u53ef\u91cd\u65b0\u52a0\u8f7d\u7684\u4fdd\u5b58\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u573a\u6e38\u620f\u8fd8\u662f\u5e73\u8861\u4e86\u6c38\u4e45\u6b7b\u4ea1\u7684\u53ef\u80fd\u6027\u3002\n\u7136\u800c\uff0c\u6d41\u6c13\u822c\u7684\u5e38\u89c1\u95ee\u9898\u89e3\u7b54(FAQ)\u4ecd\u7136\u8ba4\u4e3a\u5b83\u662f\u6d41\u6c13\u3002\u7406\u5e94\u5982\u6b64--\u5b9e\u9645\u7684\u6e38\u620f\u73a9\u6cd5\u4e0eNethack\u975e\u5e38\u76f8\u4f3c\u3002\u786e\u5b9e\u662f\n\u5b83\u6709\u4e00\u4e9b\u5947\u602a\u7684\u60ef\u4f8b\uff0c\u5c31\u50cf\u4f60\u53ef\u4ee5\u6309\u4e0b\u2018\uff01\u2019\u67e5\u770b\u4f60\u6240\u6709\u9b54\u836f\u7684\u94a5\u5319(\u8fd9\u5bf9\u6211\u6765\u8bf4\u5f88\u5947\u602a\uff0c\u4f46\u5bf9\u6d41\u6c13\u7c89\u4e1d\u6765\u8bf4\u5e94\u8be5\u662f\u663e\u800c\u6613\u89c1\u7684-\u2018\uff01\u2019\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u74f6\u5b50\uff0c\u662fASCII\u7c7b\u6d41\u6c13\u7684\u5178\u578b\u836f\u6c34\u7b26\u53f7)\u3002\u6211\u60f3\u521b\u9020\u6211\u81ea\u5df1\u7684\u6e38\u620f\uff0c\u5c31\u50cf\u74e6\u5c14\u54c8\u62c9\u4e00\u6837\u3002\u5927\u7ea6\u5728\u90a3\u4e2a\u65f6\u5019\uff0c\u51fa\u73b0\u4e86\u8bb8\u591a\u5c0f\u6d41\u6c13\uff0c\u6bd4\u59821995\u5e74\u7684Alphaman\uff0c\u8fd9\u662f\u4e00\u6b3e\u4ee5\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e(Donald Trump)\u6210\u4e3a\u603b\u7edf\u540e\u4e16\u754c\u672b\u65e5\u65f6\u4ee3\u7684\u672a\u6765\u4e3a\u80cc\u666f\u7684\u6e38\u620f\u3002\u6d41\u6c13\u822c\u7684\u5e38\u89c1\u95ee\u9898\u4e5f\u5305\u62ec\u4e86CrossFire\uff0c\u5b83\u73b0\u5728\u53ef\u80fd\u4e0d\u4f1a\u88ab\u79f0\u4e3a\u6d41\u6c13\u4e86\uff0c\u5c3d\u7ba1\u6211\u731c\u591a\u4eba\u6e38\u620f\u7684\u5b9a\u4e49\u5df2\u7ecf\u653e\u677e\u4e86\u3002\n1997\u5e74\uff0c\u300a\u6697\u9ed1\u7834\u574f\u795e\u300b\u4e0a\u6620\u3002\u5982\u679c\u4f60\u628a\u6697\u9ed1\u7834\u574f\u795e\u548c\u82f1\u56fd\u4f6c\u76f8\u63d0\u5e76\u8bba\uff0c\u8fd9\u4e24\u573a\u6bd4\u8d5b\u663e\u7136\u975e\u5e38\u76f8\u4f3c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f00\u53d1\u8005\u6700\u521d\u60f3\u8981\u521b\u9020\u4e00\u4e2a\u57fa\u4e8e\u56de\u5408\u7684\u6d41\u6c13\u6e38\u620f\uff1b\u7136\u800c\uff0c\u5f53\u65f6\u5b9e\u65f6\u7b56\u7565\u662f\u4e00\u4e2a\u70ed\u95e8\u7684\u65b0\u6d41\u6d3e\uff0c\u4ed6\u4eec\u51b3\u5b9a\u5c06\u5176\u5236\u4f5c\u4e3a\u6d41\u6c13\u548cRTS\u7684\u6df7\u5408\u4f53\u3002\u300a\u6697\u9ed1\u7834\u574f\u795e\u300b\u4ee5\u51fa\u8272\u7684\u753b\u9762\u4e3a\u7279\u8272\u3002\u6211\u4e0d\u77e5\u9053\u5f00\u53d1\u8005\u51b3\u5b9a\u653e\u5f03\u6c38\u751f\u6b7b\u4ea1\u7684\u786e\u5207\u539f\u56e0\uff0c\u4f46\u8fd9\u5728\u5f53\u65f6\u4ee5\u6d41\u6c13\u4e3a\u7075\u611f\u7684\u5546\u4e1a\u6e38\u620f\u4e2d\u5f88\u5e38\u89c1\u3002\n\u8bc4\u8bba\u5bb6\u4eec\u786e\u5b9e\u8ba4\u4e3a\u8fd9\u662f\u4e00\u6b3e\u5f88\u68d2\u7684\u6e38\u620f\uff0c\u800c\u4e14\u5b83\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u5206\u7c7b--\u8f7b\u677e\u7684\u6545\u4e8b\uff0c\u5bf9\u6218\u6597\u7684\u5173\u6ce8\uff0c\u4ee5\u53ca\u968f\u673a\u6027\u4f7f\u5b83\u4e0e\u5178\u578b\u7684RPG\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u5982\u679c\u4ed6\u4eec\u8ba4\u8bc6\u5230\u8fd9\u4e9b\u7279\u5f81\u662f\u76f4\u63a5\u4ece\u65e0\u8d56\u8eab\u4e0a\u83b7\u5f97\u7684\uff0c\u90a3\u4e48\u201c\u52a8\u4f5c\u65e0\u8d56\u201d\u5f88\u53ef\u80fd\u610f\u5473\u7740\u4e00\u6b3e\u7c7b\u4f3c\u4e8e\u73b0\u5728\u7684\u201c\u6697\u9ed1\u7834\u574f\u795e\u201d\u7684\u6e38\u620f\uff1b\u7136\u800c\uff0c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b0\u7c7b\u578b\u7684\u6e38\u620f\u88ab\u79f0\u4e3a\u201c\u52a8\u4f5cRPG\u201d\u3002\n\u5927\u7ea6\u57281998\u5e74\u7684\u67d0\u4e2a\u65f6\u5019\uff0c\u6211\u7684\u4e00\u4e2a\u5b66\u6821\u670b\u53cb\u53d1\u73b0\u4e86\u4e00\u79cd\u53eb\u505aGSNband\u7684\u82f1\u5f0f\u53d8\u4f53\u3002\u4ed6\u628a\u5b83\u5206\u4eab\u7ed9\u4e86\u6211\u4eec\u7684\u4e00\u7fa4\u670b\u53cb\uff0c\u6211\u4eec\u5f88\u591a\u4eba\u4e5f\u5f88\u559c\u6b22\uff01\u6211\u4eec\u4e5f\u5f00\u59cb\u521b\u9020\u6211\u4eec\u81ea\u5df1\u7684\u65e0\u8d56\u5f62\u8c61\u3002\u5728\u9605\u8bfb\u6709\u5173GSNband\u7684\u6587\u7ae0\u65f6\uff0c\u6211\u53d1\u73b0\u5b83\u88ab\u5f52\u7c7b\u4e3a\u201c\u6d41\u6c13\u201d\uff0c\u5e76\u4e86\u89e3\u5230\u5176\u4ed6\u6d41\u6c13\u7684\u5b58\u5728\u3002\u5230\u90a3\u65f6\uff0c\u4e00\u4e2a\u65b0\u7684\u4e3b\u8981\u6d41\u6c13\u51fa\u73b0\u4e86\uff0c\u540d\u53eb\u4e9a\u591a\u59c6\u3002\u5b83\u770b\u8d77\u6765\u5f88\u6709\u8da3\uff0c\u4f46\u5b83\u7684\u201c\u7b80\u5355\u7684\u5b57\u7b26\u56fe\u5f62\u201d\u6700\u521d\u8ba9\u5b83\u53d8\u5f97\u8fdf\u949d\u3002\u6700\u540e\uff0c\u6211\u8bd5\u4e86\uff0c\u8fd9\u7edd\u5bf9\u662f\u503c\u5f97\u7684\uff01\u6211\u5148\u628a\u5b83\u5f53RPG\u6765\u73a9(\u901a\u8fc7\u590d\u5236\u4fdd\u5b58\u6587\u4ef6)\uff0c\u4f46\u6700\u7ec8\u8fd8\u662f\u5207\u6362\u5230\u4e86\u6b63\u786e\u7684\u3001\u6c38\u4e45\u6b7b\u4ea1\u7684\u65b9\u5f0f\u3002\n\u5728ADOM\u7684\u7f51\u7ad9\u548cPetri Kuittinen\u7684\u7f51\u7ad9\u4e0a\u53ef\u4ee5\u627e\u52301999-2001\u5e74\u5de6\u53f3\u7684\u4e00\u4e9b\u6d41\u6c13\u5b9a\u4e49\u3002\n\u5728\u8fbe\u4f26\u00b7\u8d6b\u5e03\u767b\u7684\u7f51\u7ad9\u4e0a\uff0c\u53ef\u4ee5\u627e\u5230100\u591a\u540d\u6d41\u6c13\u7684\u540d\u5355\u3002\u6211\u8ba4\u4e3a\u6709\u4e00\u4e9b\u9057\u6f0f\u662f\u975e\u5e38\u6709\u8da3\u7684\uff1a\n\u5728\u82f9\u679c\u5e84\u56ed\u4e0b\u9762\uff0c\u662f1978\u5e74\u7684\u4e00\u6b3e\u6e38\u620f\u3002\u5b83\u5728\u300a\u76d7\u8d3c\u300b\u4e4b\u524d\u95ee\u4e16\uff0c\u4f46\u5b83\u62e5\u6709\u6240\u6709\u6d41\u6c13\u822c\u7684\u6e38\u620f\u5143\u7d20\uff0c\u90fd\u662f\u72ec\u7acb\u53d1\u660e\u7684\u3002\n1993\u5e74\u53d1\u5e03\u7684\u5171\u4eab\u8f6f\u4ef6\u6e38\u620f\u300a\u98ce\u4e4b\u57ce\u5821\u300b\u3002\u5b83\u5f88\u53d7\u6b22\u8fce\u3002\u5982\u679c\u6709\u4eba\u8bb0\u5f97\u4ed6\u4eec\u572890\u5e74\u4ee3\u626e\u6f14\u4e86\u4e00\u4e9b\u65e0\u8d56\u89d2\u8272\uff0c\u7b54\u6848\u901a\u5e38\u662f\u300a\u98ce\u4e4b\u57ce\u5821\u300b(Castle Of The Winds)\u3002\n\u4efb\u52a1\u8fc5\u96f7\uff0c1986\u5e74\u5728\u5927\u578b\u673a\u4e0a\u5f00\u53d1\uff0c1992\u5e74\u5728Windows\u548cMac\u4e0a\u5546\u4e1a\u53d1\u5e03\u3002\u6211\u57282010\u5e74\u5de6\u53f3\u73a9\u8fc7\u5b83\uff0c\u5b83\u771f\u7684\u662f\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u65e0\u8d56\u6e38\u620f\uff0c\u5728\u90a3\u4e2a\u65f6\u4ee3\u6709\u76f8\u5f53\u597d\u7684\u56fe\u5f62\u6548\u679c\uff0c\u4f1f\u5927\u7684\u521b\u65b0\u60f3\u6cd5\uff0c\u4ee5\u53ca\u53ef\u9009\u7684\u6c38\u4e45\u6b7b\u4ea1\u3002\u53ef\u60b2\u7684\u662f\uff0c\u8fd9\u573a\u6bd4\u8d5b\u662f\u591a\u4e48\u7684\u4e0d\u4e3a\u4eba\u6240\u77e5\u3002\n\u5f88\u5feb\u6211\u5c31\u5f00\u59cb\u53c2\u4e0e\u4e00\u4e9b\u6d41\u6c13\u793e\u533a\uff0c\u4f8b\u5982\uff0c\u6211\u5728\u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u6d41\u6c13\u7279\u5f81\u5217\u8868\uff0c\u4f46\u5728\u5176\u4ed6\u6e38\u620f\u4e2d\u5374\u5f88\u5c11\u89c1\u3002\u4eba\u4eec\u6ce8\u610f\u5230\uff0c\u6211\u7684\u540d\u5355\u504f\u5411\u4e8e\u201c\u9ed1\u5ba2\u559c\u6b22\u201d\uff1b\u6211\u4e0d\u662f\u5948\u8428\u514b\u7684\u7c89\u4e1d\uff0c\u800c\u662f\u4e9a\u591a\u59c6\u548c\u74e6\u5c14\u54c8\u62c9\u7684\u94c1\u6746\u7c89\u4e1d\u3002\u4eba\u4eec\u8ba4\u8bc6\u5230\u6d41\u6c13\u662f\u5f88\u96be\u5b9a\u4e49\u7684\u3002\u4e00\u4e9b\u5f88\u96be\u5f52\u7c7b\u7684\u6e38\u620f\u5f00\u59cb\u51fa\u73b0\uff1a\u5fb7\u514b\u5c14\u662f\u4e00\u6b3e\u8d5b\u535a\u670b\u514b\u6e38\u620f\uff0c\u6211\u4e0d\u8ba4\u4e3a\u5b83\u662f\u6d41\u6c13\u6e38\u620f\uff0c\u56e0\u4e3a\u5b83\u6709\u5b8c\u5168\u4e0d\u540c\u7684\u6218\u672f\u3002\n2002\u5e74\uff0cDRL(\u300a\u6076\u68cd\u672b\u65e5\u300b)\u6700\u521d\u53d1\u5e03\u3002\u4ece\u5b83\u7684\u540d\u5b57\u53ef\u4ee5\u5f88\u6e05\u695a\u5730\u770b\u51fa\u5b83\u662f\u4ec0\u4e48\uff1a\u5b83\u662f\u4e00\u4e2a\u6d41\u6c13(\u89d2\u8272\u663e\u793a\uff0c\u56de\u5408\u5236\uff0c\u968f\u673a\u751f\u6210)\uff0c\u4f60\u7684\u4e3b\u8981\u6b66\u5668\u662f\u67aa\uff0c\u4f60\u548c\u6765\u81ea\u672b\u65e5\u7684\u6076\u9b54\u4f5c\u6218\u3002\n\u7f57\u683c\u76c6\u5730\u6700\u521d\u662f\u7531\u5723\u5730\u4e9a\u54e5\u00b7\u8428\u5e15\u5854\u521b\u5efa\u7684\u7ef4\u57fa\u3002\u5b83\u521b\u5efa\u4e8e2005\u5e74\uff0c\u5f00\u59cb\u6536\u96c6\u4e0e\u6d41\u6c13\u76f8\u5173\u7684\u77e5\u8bc6\u3002\u7f57\u683c\u76c6\u5730\u4ecd\u5728\u6d3b\u52a8\u3002\n\u7b2c\u4e00\u5c4a7DRL\u6311\u6218\u8d5b\u4e8e2005\u5e74\u4e3e\u884c\u3002\u5f53\u65f6\u7684\u6d41\u6c13\u6e38\u620f\u901a\u5e38\u662f\u975e\u5e38\u590d\u6742\u7684\u6e38\u620f\uff0c\u9700\u8981\u6570\u5e74\u65f6\u95f4\u624d\u80fd\u5236\u4f5c\u5b8c\u6210\uff1b\u800c7DRL\u6311\u6218\u8d5b\u7684\u91cd\u70b9\u662f\u57287\u5929\u5185\u521b\u5efa\u7684\u6e38\u620f\u3002\u8fd9\u4e9b\u610f\u89c1\u4e66\u4e2d\u7684\u8bb8\u591a\u90fd\u662f\u975e\u5e38\u5b9e\u9a8c\u6027\u7684\u30027DRL Challenges\u81f3\u4eca\u4ecd\u5f88\u6d3b\u8dc3\uff0c\u6bcf\u5e74\u90fd\u6709\u6570\u767e\u6b3e\u6d41\u6c13\u6e38\u620f(\u4ee5\u53ca\u7c7b\u4f3c\u7684\u6e38\u620f)\u95ee\u4e16\u3002\u5728\u6211\u7684\u5370\u8c61\u4e2d\uff0c7DRL\u6311\u6218\u771f\u7684\u5e2e\u52a9\u63d0\u70bc\u51fa\u4e86\u8ba9\u4e00\u6b3e\u6e38\u620f\u53d8\u5f97\u50cf\u6d41\u6c13\u4e00\u6837\u7684\u5177\u4f53\u4e1c\u897f\u3002\u867d\u7136\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e3b\u8981\u7684\u6d41\u6c13\u90fd\u662f\u975e\u5e38\u590d\u6742\u7684\u6e38\u620f\uff0c\u4f467DRL\u786e\u5b9e\u8868\u660e\uff0c\u4f60\u53ef\u4ee5\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6e38\u620f\uff0c\u4f46\u4ecd\u7136\u6709\u8fd9\u79cd\u96be\u4ee5\u6349\u6478\u7684\u6d41\u6c13\u611f\u89c9\u3002\n\u6700\u521d\u4e8e2006\u5e74\u4e0a\u6620\u7684\u300a\u77ee\u4eba\u5821\u5792\u300b\u6709\u4e24\u79cd\u6a21\u5f0f\uff1a\u5192\u9669\u6a21\u5f0f\u548c\u5821\u5792\u6a21\u5f0f\u3002\u5192\u9669\u6a21\u5f0f\u662f\u5178\u578b\u7684\u76d7\u8d3c\u6a21\u5f0f\uff0c\u800c\u5821\u5792\u6a21\u5f0f\u5177\u6709\u9ad8\u590d\u6742\u5ea6\u3001\u968f\u673a\u751f\u6210\u548cASCII\u663e\u793a\u7b49\u7279\u70b9\u3002\u300a\u77ee\u4eba\u5821\u5792\u300b(\u8fd8\u6709\u4e00\u70b9\u300a\u963f\u591a\u59c6\u300b)\u540e\u6765\u6210\u4e3a\u5f53\u4eca\u6700\u53d7\u6b22\u8fce\u7684\u6e38\u620f\u4e4b\u4e00\u300a\u6211\u7684\u4e16\u754c\u300b\u7684\u7075\u611f\u6765\u6e90\uff0c\u5b83\u672c\u8eab\u4e5f\u662f\u5176\u4ed6\u8bb8\u591a\u6e38\u620f(\u5982Terraria)\u7684\u7075\u611f\u6765\u6e90\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6d41\u6c13\u822c\u7684\u8ba8\u8bba\u4e3b\u8981\u662f\u5728Usenet\u4e3e\u884c\u7684\uff0c\u5728rec.games.roguelike.news group\u4e2d\u3002\u5723\u5730\u4e9a\u54e5\u00b7\u8428\u5e15\u5854\u57282007\u5e745\u6708\u5de6\u53f3\u5efa\u7acb\u4e86\u6d41\u6c13\u795e\u5e99\uff0c\u5b83\u7684\u7f51\u7edc\u8bba\u575b\u8fc5\u901f\u8d70\u7ea2\uff0c\u800c\u65b0\u95fb\u7ec4\u5374\u9010\u6e10\u51cf\u5c11\u3002\u6211\u4e0d\u592a\u559c\u6b22Usenet\u65b0\u95fb\u7ec4\uff0c\u5728\u5723\u6bbf\u8bba\u575b\u4e0a\u53d8\u5f97\u66f4\u52a0\u6d3b\u8dc3\u3002\u6211\u8fd8\u6d3b\u8dc3\u5728Ivan\u8bba\u575b(Iter Vehemens ad Necem\u662f\u4e00\u4e2a\u56fe\u5f62\u5316\u7684\uff0c\u975e\u5e38\u6709\u8da3\u7684\u9ed1\u5ba2)\uff0c\u5728\u90a3\u91cc\u6211\u5f00\u59cb\u4e86\u81ea\u5df1\u7684\u5f00\u53d1\u8d21\u732e\uff0c\u4f7f\u7528IVAN3D\u3002\n2009\u5e74\uff0c\u8fd9\u4e9b\u65e0\u8d56\u5f00\u53d1\u4eba\u5458\u51b3\u5b9a\u5728\u9996\u5c4a\u56fd\u9645\u65e0\u8d56\u5f00\u53d1\u5927\u4f1a\u4e0a\u9762\u5bf9\u9762\u4f1a\u9762\u3002\u4ed6\u4eec\u5df2\u7ecf\u51b3\u5b9a\uff0c\u4ed6\u4eec\u9700\u8981\u771f\u6b63\u5b9a\u4e49\u8fd9\u6b21\u4f1a\u8bae\u7684\u5b9e\u9645\u5185\u5bb9\uff0c\u56e0\u6b64\u67cf\u6797\u7684\u89e3\u91ca\u5c31\u5e94\u8fd0\u800c\u751f\u4e86\u3002\u5728\u6211\u770b\u6765\uff0c\u4ed6\u4eec\u5927\u591a\u5931\u8d25\u4e86\uff0c\u539f\u56e0\u6709\u4e24\u4e2a\uff1a\n(1)\u4ed6\u4eec\u53ea\u77e5\u9053\u5f53\u65f6\u5b58\u5728\u7684\u6e38\u620f\uff0c\u6709\u4e9b\u529f\u80fd\u88ab\u8d4b\u4e88\u4e86\u592a\u591a\u6216\u592a\u5c11\u7684\u6743\u91cd(\u5c31\u50cf1993\u5e74\u6700\u521d\u7684\u5b9a\u4e49\u4e00\u6837\uff0c\u8bb2\u7a76\u514d\u8d39\u3001\u4fbf\u643a\u548c\u4eba\u7269\u5c55\u793a)\u3002\u4e0d\u4e45\u4e4b\u540e\uff0c\u65b0\u7684\u521b\u65b0\u88ab\u521b\u9020\u51fa\u6765\uff0c\u5e26\u6765\u4e86\u5f88\u591a\u56f0\u60d1\u3002\n(2)\u6d41\u6c13\u7684\u611f\u89c9\u76f8\u5f53\u96be\u4ee5\u6349\u6478\uff0c\u66f4\u50cf\u662f\u6211\u770b\u5230\u5b83\u65f6\u5c31\u77e5\u9053\u4e86\uff0c\u800c\u4e0d\u662f\u4e00\u4e9b\u5177\u4f53\u7684\u7279\u5f81\u5217\u8868\u3002\n2009\u5e74\u665a\u4e9b\u65f6\u5019\uff0c\u65af\u4f69\u4f26\u57fa\u83b7\u91ca\u3002Spelunky\u662f\u4e00\u4e2a\u5e73\u53f0\uff0c\u5b83\u4ece\u6d41\u6c13\u4e2d\u5438\u6536\u4e86\u517c\u5bb9\u7684\u5143\u7d20\uff1a\u968f\u673a\u751f\u6210\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u6b21\u8981\u7684\u53c2\u8003\uff0c\u6bd4\u5982Hacklike\u7684\u975e\u6a21\u5f0f\u5546\u5e97\u3002\u6b64\u5916\uff0c\u6700\u521d\u7684\u7248\u672c\u662f\u514d\u8d39\u7684\u3002\u867d\u7136Derek Yu\u6ca1\u6709\u628a\u4ed6\u7684\u6e38\u620f\u79f0\u4e3a\u6d41\u6c13\u6e38\u620f\uff0c\u4f46\u4ed6\u660e\u786e\u8868\u793a\uff0c\u8fd9\u4e2a\u6e38\u620f\u9700\u8981\u5927\u91cf\u6d41\u6c13\u7684\u7075\u611f\u3002\u53cd\u8fc7\u6765\uff0c\u65af\u4f69\u4f26\u57fa\u4e5f\u542f\u53d1\u4e86\u5f88\u591a\u5176\u4ed6\u6e38\u620f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5927\u591a\u6570\u6e38\u620f\u8bb0\u8005\u548c\u73a9\u5bb6\u5e76\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u201c\u65e0\u8d56\u201d\uff0c\u4ed6\u4eec\u5f00\u59cb\u628a\u53d7\u5230\u65af\u76ae\u4f26\u57fa\u542f\u53d1\u7684\u6e38\u620f\u79f0\u4e3a\u201c\u65e0\u8d56\u201d\u3002\u5982\u679c\u6211\u6ca1\u6709\u8bb0\u9519\u7684\u8bdd\uff0c\u5f53\u65f6\u6211\u4eec\u66fe\u8ba8\u8bba\u8fc7Spelunky\u662f\u5426\u7b97\u5f97\u4e0a\u6d41\u6c13\uff1b\u6700\u540e\uff0c\u5927\u591a\u6570\u771f\u6b63\u73a9\u8fc7\u6d41\u6c13\u6e38\u620f\u7684\u4eba\u90fd\u89c9\u5f97\u8fd9\u4e9b\u6e38\u620f\u6ca1\u6709\u6355\u6349\u5230\u90a3\u79cd\u96be\u4ee5\u6349\u6478\u7684\u6d41\u6c13\u611f\u89c9\uff0c\u4e8e\u662f\u628a\u8fd9\u7c7b\u6e38\u620f\u79f0\u4e3a\u201c\u6d41\u6c13\u822c\u7684\u559c\u6b22\u201d\uff0c\u6216\u540e\u6765\u7684\u201c\u6d41\u6c13\u201d\u3002\n\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u80cc\u79bb\u4e86\u4f20\u7edf\u7684\u6d41\u6c13\u5b9a\u4e49\u3002\u4e0e\u5fb7\u514b\u5c14\u7c7b\u4f3c\uff0c\u5b83\u672c\u8d28\u4e0a\u62e5\u6709\u6d41\u6c13\u5b9a\u4e49\u7684\u6240\u6709\u57fa\u672c\u6027\u8d28(\u5c31\u50cf\u67cf\u6797\u7684\u89e3\u91ca)\uff0c\u4f46\u6211\u5e76\u4e0d\u8ba4\u4e3a\u5b83\u662f\u6d41\u6c13\uff0c\u56e0\u4e3a\u5728\u6218\u672f\u4e0a\u5b83\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002\u4e0eSpelunky\u8fd9\u6837\u7684\u6e38\u620f\u76f8\u6bd4\uff0c\u5b83\u66f4\u50cf\u662f\u4f20\u7edf\u7684\u6d41\u6c13\u6e38\u620f\u3002\n\u57282008-2011\u5e74\u95f4\uff0c\u6211\u4e00\u76f4\u5728\u4ece\u4e8bIRLDb\u7684\u5de5\u4f5c\uff0c\u8fd9\u662f\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u5b83\u4ece\u7f57\u683c\u76c6\u5730\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u4ee5\u8868\u683c\u7684\u65b9\u5f0f\u663e\u793a\u51fa\u6765\u3002\u5b83\u8fd8\u4e0eRogueTemple\u8bba\u575b\u76f8\u7ed3\u5408\uff0c\u5141\u8bb8\u6210\u5458\u5bf9\u6d41\u6c13\u8fdb\u884c\u8bc4\u7ea7\uff0c\u5206\u4eab\u4ed6\u4eec\u7684\u6210\u529f\uff0c\u5e76\u64b0\u5199\u8bc4\u8bba\u3002\n\u5927\u7ea6\u57282011\u5e74\uff0c\u6d41\u6c13\u793e\u533a\u5f00\u59cb\u4ece\u7f51\u7edc\u8bba\u575b(\u6bd4\u5982RogueTemple)\u8f6c\u5411\u6d41\u6c13\u793e\u533a\u3002\u867d\u7136\u7f57\u683c\u76c6\u5730\u4ecd\u5728\u66f4\u65b0\uff0c\u4f46IRLDB\u7684\u8bc4\u7ea7\u5927\u591a\u663e\u793a\u4e862011\u5e74\u5de6\u53f3\u7684\u72b6\u6001\u3002\u5927\u591a\u6570\u6d41\u6c13\u7403\u8ff7\u90fd\u5c1d\u8bd5\u8fc7Angband\u548cNethack\uff0c\u4f46\u73b0\u4ee3\u6d41\u6c13\u73a9\u5bb6\u8ba4\u4e3a\u4ed6\u4eec\u4e0d\u662f\u90a3\u4e48\u597d\u3002\u4ed6\u4eec\u66f4\u559c\u6b22\u8f83\u65b0\u7684\u4e3b\u8981\u6d41\u6c13\uff0c\u5982Adom(\u975e\u5e38\u53d7\u6b22\u8fce\uff0c\u8bc4\u5206\u5f88\u9ad8)\u6216DCSS(\u66f4\u53d7\u6b22\u8fce\uff0c\u8bc4\u5206\u66f4\u9ad8)\u3002Spelunky\u4e5f\u88ab\u8bc4\u4e3a\u975e\u5e38\u9ad8\u7684\u8bc4\u7ea7\u3002\u5230\u90a3\u4e2a\u65f6\u5019\uff0cCogMind\u548cCaves of Qud\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u4f46\u662f\u5b83\u4eec(\u51e0\u4e4e)\u8fd8\u6ca1\u6709\u8bc4\u7ea7\u3002\u5b83\u4eec\u73b0\u5728\u975e\u5e38\u53d7\u6b22\u8fce\u3002\n\u53e6\u4e00\u6b3e\u4ece\u6d41\u6c13\u8eab\u4e0a\u6c72\u53d6\u7075\u611f\u7684\u521b\u65b0\u6e38\u620f\u3002\u867d\u7136\u8fd9\u662f\u4e00\u6b3e\u5b9e\u65f6\u6e38\u620f\uff0c\u4f46\u5b83\u5141\u8bb8\u73a9\u5bb6\u5728\u4efb\u4f55\u65f6\u5019\u6682\u505c\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5bf9\u4e0d\u559c\u6b22\u52a8\u4f5c\u6e38\u620f\u7684\u6d41\u6c13\u793e\u533a\u7684\u4e00\u90e8\u5206\u5f88\u6709\u5438\u5f15\u529b\u3002\u53e6\u4e00\u4e2a\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u867d\u7136\u4f20\u7edf\u7684\u76d7\u8d3c\u662f\u975e\u6a21\u5f0f\u7684(\u6218\u6597\u548c\u63a2\u7d22\u662f\u4e00\u56de\u4e8b)\uff0c\u4f46\u5728\u8d85\u5149\u901f\u98de\u884c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u63a2\u7d22\u94f6\u6cb3\u7cfb\u5e76\u83b7\u5f97\u201c\u4e8b\u4ef6\u201d\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5f71\u54cd\u4f60\u7684\u8dd1\u6b65\uff0c\u6216\u8005\u5c06\u4f60\u62d6\u5165\u4e00\u573a\u6218\u6597\uff0c\u8fd9\u662f\u4e00\u79cd\u72ec\u7acb\u7684\u6a21\u5f0f\u3002\u5b83\u81ea\u79f0\u662f\u4e00\u4e2a\u201c\u7c7b\u4f3c\u4e8e\u5b87\u5b99\u98de\u8239\u7684\u6a21\u62df\u6d41\u6c13\u201d\u3002\n\u53d7\u65af\u76ae\u4f26\u57fa\u542f\u53d1\u7684\u5e73\u53f0\u4e4b\u4e00\u3002\u5b83\u628a\u81ea\u5df1\u63cf\u8ff0\u6210\u4e00\u4e2a\u201c\u65e0\u8d56\u201d\u3002\u4f60\u7684\u89d2\u8272\u6b7b\u4e86\uff0c\u4f46\u968f\u7740\u4f60\u7684\u8840\u7edf\u6bcf\u8fc7\u4e00\u6b21\uff0c\u4f60\u7684\u8840\u7edf\u5c31\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5f3a\u5927\u3002\u201c\u3002\u4eca\u5929\uff0c\u6709\u5f88\u591a\u4eba\u8ba4\u4e3a\u81ea\u5df1\u662f\u6d41\u6c13\u7684\u4e13\u5bb6\uff0c\u8ba4\u4e3a\u8fd9\u79cd\u7279\u6b8a\u7684\u4e1c\u897f\u662f\u6d41\u6c13\u548c\u6d41\u6c13\u7684\u4e0d\u540c\u4e4b\u5904\u3002\u5bf9\u4ed6\u4eec\u6765\u8bf4\uff0c\u6d41\u6c13\u662f\u4e00\u6b3e\u57fa\u4e8e\u5954\u8dd1\u7684\u6e38\u620f\uff0c\u4f60\u7684\u89d2\u8272\u7684\u529b\u91cf\u5728\u968f\u540e\u7684\u5954\u8dd1\u4e2d\u4fdd\u6301\u5927\u81f4\u4e0d\u53d8\uff0c\u800c\u6d41\u6c13\u662f\u4e00\u6b3e\u57fa\u4e8e\u5954\u8dd1\u7684\u6e38\u620f\uff0c\u4f60\u7684\u89d2\u8272\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5f3a\u58ee\u3002\u8fd9\u4e00\u7279\u6027\u4e5f\u88ab\u79f0\u4e3a\u201c\u5143\u8fdb\u5c55\u201d(\u53d1\u751f\u5728\u4e24\u6b21\u8fd0\u884c\u4e4b\u95f4\uff0c\u800c\u4e0d\u662f\u5728\u4e00\u6b21\u8fd0\u884c\u5185\u90e8\u7684\u8fdb\u5c55)\u3002\n\u4ece\u4f20\u7edf\u6d41\u6c13\u793e\u533a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u6ca1\u6709\u592a\u5927\u610f\u4e49\u3002\u5927\u591a\u6570\u6d41\u6c13\u73a9\u5bb6\u5728\u73a9\u4e86\u534a\u5e74\u540e\uff0c\u4f3c\u4e4e\u7b2c\u4e00\u6b21\u628a\u7f3a\u4e4f\u5143\u8fdb\u5c55\u89c6\u4e3a\u4e00\u79cd\u4f18\u52bf-\u8d62\u5f97\u4e86DCSS\u662f\u4e00\u79cd\u5f88\u68d2\u7684\u611f\u89c9\uff0c\u8fd9\u5728\u5143\u8fdb\u5c55\u6e38\u620f\u4e2d\u662f\u4e0d\u53ef\u80fd\u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u5b83\u6c38\u8fdc\u4e0d\u786e\u5b9a\u4f60\u8d62\u662f\u56e0\u4e3a\u4f60\u638c\u63e1\u4e86\u6e38\u620f\uff0c\u8fd8\u662f\u56e0\u4e3a\u6e38\u620f\u8ba9\u4f60\u8d62\u4e86\u3002\u7136\u800c\uff0cNethack(\u548c\u5176\u4ed6\u9ed1\u5ba2)\u6709\u201c\u9aa8\u5934\u201d\u529f\u80fd\uff0c\u5728\u90a3\u91cc\u4f60\u53ef\u4ee5\u627e\u5230\u4ee5\u524d\u5192\u9669\u5bb6\u7684\u9057\u9ab8\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u6240\u6709\u88c5\u5907\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u8ba9\u8fdb\u4e00\u6b65\u7684\u6e38\u620f\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u65af\u666e\u683c\u4f0d\u5fb7\u3001\u5927\u90e8\u5934\uff0c\u6216\u8005\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u82f1\u96c4\u90fd\u6709\u8d85\u524d\u53d1\u5c55\u7684\u4f5c\u7528\uff0c\u4f46\u5728\u6211\u4eec\u770b\u6765\uff0c\u4ed6\u4eec\u4ecd\u7136\u50cf\u6d41\u6c13\u4e00\u6837\u3002\n\u4e00\u4e2a\u52a8\u4f5c\u5e73\u53f0\u3002\u4e0e\u90a3\u4e2a\u65f6\u4ee3\u7684\u6e38\u620f\u4e00\u6837\uff0c\u5b83\u5e76\u4e0d\u81ea\u79f0\u662f\u6d41\u6c13\u6e38\u620f\uff0c\u800c\u662f\u4e00\u6b3e\u201c\u5e26\u6709\u6d41\u6c13\u5143\u7d20\u7684\u6e38\u620f\u201d\u6216\u201c\u6d41\u6c13-\u8f7b\u91cf\u7ea7\u201d\u6e38\u620f\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5982\u4eca\u7684\u73a9\u5bb6\u79f0\u5176\u4e3a\u201c\u7ecf\u5178\u7684\u6d41\u6c13\u6e38\u620f\u201d\u3002\u867d\u7136\u8fd9\u4e9b\u73a9\u5bb6\u7ed9\u51fa\u4e86\u201c\u7a0b\u5e8f\u751f\u6210\u201d\u548c\u201c\u6c38\u4e45\u6b7b\u4ea1\u201d\u4f5c\u4e3a\u8fd9\u4e2a\u5206\u7c7b\u7684\u8981\u6c42\uff0c\u4f46\u96e8\u7684\u98ce\u9669\u5e76\u4e0d\u662f\u771f\u6b63\u5728\u7a0b\u5e8f\u4e0a\u751f\u6210\u7684\uff1a\u6bcf\u6b21\u8fd0\u884c\u7684\u5173\u5361\u5e03\u5c40\u51e0\u4e4e\u90fd\u662f\u76f8\u540c\u7684(\u5b9e\u9645\u4e0a\uff0c\u6709\u4e24\u79cd\u9009\u62e9\u4e4b\u4e00)\u3002\n\u6839\u636e\u84b8\u6c7d\u5546\u5e97\u7684\u9875\u9762\uff0c\u201c\u6700\u9ed1\u6697\u7684\u5730\u4e0b\u57ce\u662f\u4e00\u90e8\u5145\u6ee1\u6311\u6218\u7684\u54e5\u7279\u5f0f\u89d2\u8272\u626e\u6f14\u89d2\u8272\uff0c\u5c31\u50cf\u6d41\u6c13\u4e00\u6837\uff0c\u8bb2\u8ff0\u4e86\u5192\u9669\u7684\u5fc3\u7406\u538b\u529b\u3002\u201d\u867d\u7136\u4e4b\u524d\u53d7\u6d41\u6c13\u542f\u53d1\u7684\u6e38\u620f\u5f00\u53d1\u5546\u660e\u786e\u8868\u793a\uff0c\u4ed6\u4eec\u7684\u6e38\u620f\u672c\u8eab\u5e76\u4e0d\u662f\u6d41\u6c13(\u53ea\u662f\u53d7\u5230\u4ed6\u4eec\u7684\u542f\u53d1)\uff0c\u4f46\u6700\u8fd1\u7684\u6e38\u620f\u4f3c\u4e4e\u53ea\u662f\u79f0\u81ea\u5df1\u4e3a\u6d41\u6c13\u3002\n\u6211\u81ea\u5df1\u6ca1\u6709\u73a9\u8fc7\u6700\u9ed1\u6697\u7684\u5730\u4e0b\u57ce\uff0c\u4f46\u6211\u89c1\u8fc7\u5b83\u6d41\u6c13\u822c\u7684\uff0c\u751a\u81f3\u6d41\u6c13\u7684\uff0c\u5927\u81ea\u7136\u53d7\u5230\u4e86\u6311\u6218\uff0c\u56e0\u4e3a\u5b83\u5e76\u6ca1\u6709\u771f\u6b63\u7684\u6d41\u6c13\u610f\u4e49\u4e0a\u7684\u6c38\u4e45\u6b7b\u4ea1\u3002\u4f60\u7684\u89d2\u8272\u6b7b\u4e86\uff0c\u4f46\u4ed6\u4eec\u66f4\u591a\u7684\u662f\u53ef\u727a\u7272\u7684\u8d44\u6e90\uff0c\u4f60\u7684\u5954\u8dd1\u4e0d\u4f1a\u7ed3\u675f\uff0c\u4f60\u4f1a\u8d62\u5f97\u4f60\u7684\u7b2c\u4e00\u6b21\u5954\u8dd1\u3002\u6b64\u5916\uff0c\u6839\u636e\u6295\u8bc9\uff0c\u8fd9\u4e2a\u6e38\u620f\u7684\u91cd\u590d\u6027\u5f88\u5f3a\uff0c\u6d41\u6c13\u7684\u968f\u610f\u6027\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u8fd9\u4e00\u70b9\u3002\n\u201c\u6740\u6b7b\u5c16\u9876\u201d\u4f7f\u8fd9\u79cd\u88ab\u79f0\u4e3a\u201c\u6d41\u6c13\u822c\u7684\u7532\u677f\u5efa\u9020\u8005\u201d\u7684\u6e38\u620f\u53d8\u5f97\u6d41\u884c\u8d77\u6765\u3002\u5b83\u7ed3\u5408\u4e86Dominion\u7b49\u7532\u677f\u5efa\u9020\u8005\u7684\u60f3\u6cd5\uff0c\u4ee5\u53caFTL\u7684\u901a\u7528\u57fa\u4e8e\u4e8b\u4ef6\u7684\u7ed3\u6784\u3002\n\u5728\u6211\u770b\u6765\uff0c\u201c\u6d41\u6c13\u822c\u7684\u7532\u677f\u5efa\u9020\u8005\u201d\u8fd9\u4e2a\u540d\u5b57\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u57fa\u4e8e\u4e8b\u4ef6\u7684\u7ed3\u6784\u662fFTL\u7684\u521b\u65b0\uff0c\u5b83\u4e0e\u4f20\u7edf\u7684\u975e\u60c5\u6001\u6d41\u6c13\u98ce\u683c\u80cc\u9053\u800c\u9a70\u3002\u6218\u6597\u7cfb\u7edf\u7ed9\u4eba\u7684\u611f\u89c9\u66f4\u50cf\u662fJRPG\uff1b\u5728\u73a9JRPG\u65f6\uff0c\u6211\u89c9\u5f97\u6218\u6597\u7cfb\u7edf(\u53ca\u5176\u5f62\u6001)\u662f\u533a\u522b\u4e8e\u6d41\u6c13\u7684\u4e3b\u8981\u56e0\u7d20\u3002\u6740\u6b7b\u5c16\u9876\u662f\u57fa\u4e8e\u8fd0\u884c\u7684\uff0c\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u521b\u65b0\uff0c\u5c31\u50cf\u6240\u6709\u7684\u7532\u677f\u5efa\u9020\u8005\u4e00\u6837\uff01\u81f3\u5c11\uff0c\u4f60\u73a9\u7684\u6bcf\u4e00\u6b3eDominion\u6e38\u620f\u90fd\u4f1a\u5b8c\u5168\u4e0d\u540c\u3002\u50cf\u201c\u5730\u7262\u722c\u884c\u7532\u677f\u5efa\u9020\u8005\u201d(Dominion\u4e0d\u662f\u5730\u7262\u722c\u884c)\u8fd9\u6837\u7684\u8bdd\u4f1a\u66f4\u6709\u610f\u4e49\u3002\n\u770b\u770b\u4e00\u4e32\u6d41\u6c13\u63a8\u8350\u4fe1\uff0c\u5c31\u4f1a\u53d1\u73b0\u4eca\u5929\u4eba\u4eec\u8ba4\u4e3a\u7684\u662f\u201c\u6d41\u6c13\u201d\u3002\u5927\u591a\u6570\u4eba\u63a8\u8350\u57fa\u4e8eRun\u7684\u6e38\u620f\uff0c\u8fd9\u4e9b\u6e38\u620f\u4e0d\u662f\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u6d41\u6c13\u6e38\u620f\uff0c\u6709\u4e9b\u4eba\u786e\u5b9e\u63d0\u5230\u4e86\u4f20\u7edf\u7684\u6d41\u6c13\u6e38\u620f\u3002\u51e0\u4e4e\u6ca1\u6709\u4eba\u63a8\u8350\u8fd9\u4e24\u79cd\u6e38\u620f\u3002\u4e00\u4e9b\u65e0\u8d56\u5f0f\u7684\u540d\u4eba\u8bf4\u6218\u4e89\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u6211\u4eec\u5e94\u8be5\u63a5\u53d7\u201c\u65e0\u8d56\u5f0f\u201d\u73b0\u5728\u7684\u610f\u601d\u4e0d\u540c\u4e86\u3002\n\u867d\u7136\u8bed\u8a00\u7684\u6539\u53d8\u5f88\u96be\u6297\u62d2\uff0c\u4f46\u6211\u4f1a\u5411\u5927\u5bb6\u5c55\u793a\u4e00\u4e9b\u6d41\u884c\u60ef\u4f8b\u7684\u95ee\u9898\u3002\n\u5bf9\u4e00\u4e9b\u4eba\u6765\u8bf4\uff0c\u4efb\u4f55\u4e0e\u6c38\u751f\u6b7b\u4ea1\u548c\u7a0b\u5e8f\u5316\u4e16\u4ee3\u6709\u5173\u7684\u6e38\u620f\u90fd\u662f\u201c\u65e0\u8d56\u6e38\u620f\u201d\u3002\u4f46\u6211\u4e0d\u6e05\u695a\u8fd9\u4e9b\u4eba\u4e3a\u4ec0\u4e48\u9700\u8981\u8fd9\u4e2a\u8bcd\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5f88\u9177\u7684\u8bcd\uff1a\u5b83\u6700\u521d\u88ab\u9009\u4e3a\u201c\u6240\u6709\u53ef\u80fd\u7684\u90aa\u6076\u4e2d\u6700\u5c0f\u7684\u4e00\u79cd\u201d\u3002\u6240\u6709\u88ab\u79f0\u4e3a\u201c\u65e0\u8d56\u201d\u7684\u6e38\u620f\u7684\u4e3b\u8981\u5171\u540c\u70b9\u662f\uff0c\u5b83\u4eec\u90fd\u662f\u57fa\u4e8e\u8fd0\u884c\u7684\uff1a\u8fd9\u6b3e\u6e38\u620f\u7684\u8bbe\u8ba1\u662f\u4e3a\u4e86\u8ba9\u4f60\u53ef\u4ee5\u591a\u6b21\u73a9\u3002\u968f\u673a\u6027\u662f\u8ba9\u8fd9\u4ef6\u4e8b\u53d8\u5f97\u6709\u8da3\u7684\u597d\u65b9\u6cd5\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u5fc5\u8981\u7684--\u5728\u4e0b\u96e8\u7684\u98ce\u9669\u4e0b\uff0c\u968f\u673a\u6027\u662f\u6709\u9650\u7684\uff0c\u5b83\u4ecd\u7136\u5f88\u6709\u8da3\u3002\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u4eec\u6709\u4e00\u79cd\u201c\u672b\u65e5\u514b\u9686\u201d\u7c7b\u578b\uff0c\u6700\u7ec8\u88ab\u91cd\u65b0\u547d\u540d\u4e3a\u66f4\u5177\u63cf\u8ff0\u6027\u7684\u201c\u7b2c\u4e00\u4eba\u79f0\u5c04\u51fb\u6e38\u620f\u201d\uff0c\u6211\u8ba4\u4e3a\u6211\u4eec\u4e5f\u5e94\u8be5\u540c\u6837\u5730\u628a\u57fa\u4e8e\u5954\u8dd1\u7684\u6e38\u620f\u79f0\u4e3a\u201c\u57fa\u4e8e\u5954\u8dd1\u7684\u201d\u3002\u8fd9\u5c06\u5305\u62ec\u4fc4\u7f57\u65af\u65b9\u5757\u8fd9\u6837\u7684\u6e38\u620f\uff0c\u4f46\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6e38\u620f\u548c\u6d41\u6c13\u4e00\u6837\u6709\u8da3\u3002\u6d41\u6c13\u548c\u6d41\u6c13\u6ca1\u6709\u6355\u6349\u5230\uff0c\u56e0\u4e3a\u5b83\u4eec\u592a\u6a21\u7cca\u4e86\uff0c\u592a\u50cf\u201c\u6d41\u6c13\u201d\u4e86\u3002\u5c24\u5176\u662f\u901a\u5e38\u4f7f\u7528\u7684\u201c\u65e0\u8d56\u201d\u6709\u4e94\u79cd\u622a\u7136\u4e0d\u540c\u7684\u610f\u601d\uff0c\u6240\u4ee5\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u8bf4\u51fa\u4f60\u7684\u610f\u601d\u5462\uff1f\n\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u8bcd\u6765\u5f62\u5bb9\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u201c\u65e0\u8d56\u201d\u3002\u6709\u4e9b\u4eba\u60f3\u8981\u73a9\u8fd9\u79cd\u98ce\u683c\u7684\u6e38\u620f\uff0c\u8fd8\u6709\u6e38\u620f\u5f00\u53d1\u8005\uff0c\u4ed6\u4eec\u521b\u9020\u4e86\u8fd9\u6837\u7684\u6e38\u620f\uff0c\u5e76\u5e0c\u671b\u5f88\u5feb\u5c31\u80fd\u77e5\u9053\u5b83\u662f\u4ec0\u4e48\u3002\u5f53\u300a\u6076\u68cd\u672b\u65e5\u300b\u4e0a\u6620\u65f6\uff0c\u5b83\u7684\u540d\u5b57\u5c31\u975e\u5e38\u6e05\u695a\u5730\u8868\u660e\u4e86\u5b83\u662f\u4ec0\u4e48(\u53ea\u8981\u4f60\u6f14\u8fc7\u4efb\u4f55\u6076\u68cd\u548c\u672b\u65e5)\u3002HyperRogue\u662f\u4e00\u4e2a\u53d1\u751f\u5728\u975e\u6b27\u51e0\u91cc\u5fb7\u51e0\u4f55\u4e2d\u7684\u6d41\u6c13\uff1b\u56e0\u4e3a\u6d41\u6c13\u5206\u4eab\u4e86\u4ed6\u4eec\u7ecf\u5178\u7684\u8c61\u68cb\u6e38\u620f\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e5f\u5206\u4eab\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u7b56\u7565\uff0c\u51e0\u4f55\u7684\u53d8\u5316\u7ed9\u4ed6\u4eec\u5e26\u6765\u4e86\u65b0\u7684\u8f6c\u6298\u3002\u4ee4\u4eba\u607c\u706b\u7684\u662f\uff0c\u8fd9\u6837\u7684\u4e8b\u60c5\u5c06\u4e0d\u518d\u6e05\u6670\u3002\u539f\u6765\u7684\u5355\u8bcd\u5df2\u7ecf\u662f\u574f\u7684\uff0c\u662f\u6240\u6709\u53ef\u80fd\u7684\u90aa\u6076\u4e2d\u6700\u5c0f\u7684\uff0c\u800c\u57fa\u4e8e\u8dd1\u6b65\u7684\u4eba\u5df2\u7ecf\u5077\u8d70\u4e86\u5b83\uff0c\u5c3d\u7ba1\u4ed6\u4eec\u5e76\u4e0d\u9700\u8981\u5b83\u3002\n\u6b64\u5916\uff0c\u770b\u8d77\u6765\u57fa\u4e8e\u8dd1\u6b65\u7684\u6e38\u620f\u867d\u7136\u5f88\u91cd\u8981\uff0c\u4f46\u5e76\u4e0d\u662f\u4f20\u7edf\u6d41\u6c13\u6e38\u620f\u6700\u91cd\u8981\u7684\u54c1\u8d28--\u5546\u4e1a\u4e0a\u7684\u4f20\u7edf\u6d41\u6c13\u6e38\u620f\u901a\u5e38\u4f1a\u653e\u5f03\u8fd9\u4e00\u70b9\uff0c\u4f46\u5982\u679c\u4f60\u6b3a\u9a97\u4e86\u6c38\u751f\u6d41\u6c13\uff0c\u5176\u4ed6\u6e38\u620f\u4ecd\u7136\u5f88\u6709\u8da3\u3002\n\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u6240\u8c13\u7684\u201c\u6d41\u6c13\u201d\u662f\u5426\u771f\u7684\u662f\u4e00\u79cd\u7c7b\u578b\u3002\u300a\u6740\u6b7b\u5c16\u5854\u300b\u3001\u300a\u6700\u9ed1\u6697\u7684\u5730\u4e0b\u57ce\u300b\u3001\u300a\u65af\u76ae\u4f26\u57fa\u300b\u3001\u300a\u8d85\u5149\u901f\u300b\u662f\u622a\u7136\u4e0d\u540c\u7684\u6e38\u620f\u3002\u4e3a\u4ec0\u4e48\u5b83\u4eec\u5e94\u8be5\u662f\u4e00\u79cd\u6d41\u6d3e\uff0c\u800c\u201c\u53ef\u4ee5\u629a\u6478\u72d7\u7684\u6e38\u620f\u201d\u5374\u4e0d\u662f\u5462\uff1f\n\u5efa\u8bae\u4f7f\u7528\u201c\u4f20\u7edf\u7684\u6d41\u6c13\u201d\u4f5c\u4e3a\u539f\u610f\u3002\u8fd9\u4e2a\u60f3\u6cd5\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\u3002\u751a\u81f3\u5728\u8fd9\u4e2a\u8bcd\u88ab\u521b\u9020\u51fa\u6765\u4e4b\u524d\uff0c\u4e00\u4e9b\u4eba\u5c31\u5df2\u7ecf\u5f00\u59cb\u79f0Spelunky\u4e3a\u201c\u4f20\u7edf\u7684\u65e0\u8d56\u201d\u4e86\u3002\u6b64\u5916\uff0c\u201c\u4f20\u7edf\u578b\u201d\u610f\u5473\u7740\u7f3a\u4e4f\u521b\u65b0\uff1b\u6211\u4e0d\u4f1a\u79f0HyperRogue\u6216\u5176\u4ed6\u4efb\u4f55\u7c7b\u4f3c\u62fc\u56fe\u7684\u6d41\u6c13\u6e38\u620f\u4e3a\u201c\u4f20\u7edf\u578b\u201d\u3002\u6709\u4e9b\u4eba\u4e0d\u8ba4\u4e3a\u62fc\u56fe\u6d41\u6c13\u662f\u6d41\u6c13\uff1b\u6211\u5bf9\u6b64\u6ca1\u6709\u610f\u89c1\uff0c\u4f46\u4f3c\u4e4e\u793e\u4f1a\u4e0a\u5927\u591a\u6570\u4eba\u90fd\u8fd9\u6837\u8ba4\u4e3a\u3002\u201c\u4f20\u7edf\u6d41\u6c13\u201d\u7684\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u201c\u52a8\u4f5c\u6d41\u6c13\u201d\uff0c\u5b83\u4e0d\u5305\u62ec\u975e\u4f20\u7edf\u6d41\u6c13\u7684\u56de\u5408\u5236\u6e38\u620f\uff0c\u4e5f\u4e0d\u5305\u62ec\u6697\u9ed1\u7834\u574f\u795e\uff0c\u5c3d\u7ba1\u5b83\u66f4\u7c7b\u4f3c\u4e8e\u4f20\u7edf\u3002\n\u4f3c\u4e4e\u5927\u591a\u6570\u6d41\u6c13\u7c89\u4e1d\u90fd\u63a5\u53d7\u5c06\u201c\u6d41\u6c13\u201d\u7528\u4f5c\u5f62\u5bb9\u8bcd\uff0c\u4f8b\u5982\u201c\u6d41\u6c13\u822c\u7684\u5e73\u53f0\u201d\u6216\u201c\u6d41\u6c13\u822c\u7684\u7b2c\u4e00\u4eba\u79f0\u5c04\u624b\u201d\u3002\u867d\u7136\u6709\u70b9\u4ee4\u4eba\u56f0\u60d1\uff0c\u4f46\u8fd9\u662f\u6709\u9053\u7406\u7684\uff1a\u6e38\u620f\u662f\u4e24\u79cd\u7c7b\u578b\u7684\u7ec4\u5408\uff0c\u5b83\u5177\u6709\u8be5\u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\u4ee5\u540d\u8bcd\u5f62\u5f0f\u51fa\u73b0\uff0c\u5e76\u4e14\u8be5\u7c7b\u578b\u7684\u517c\u5bb9\u5c5e\u6027\u4ee5\u5f62\u5bb9\u8bcd\u5f62\u5f0f\u51fa\u73b0\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u6709\u201c\u7b2c\u4e00\u4eba\u79f0\u5c04\u51fb\u76d7\u8d3c\u201d(DRL)\u6216\u201c\u5e73\u53f0\u76d7\u8d3c\u201d(\u4e00\u79cd\u57fa\u4e8e\u6805\u683c\u7684\u56de\u5408\u6e38\u620f\uff0c\u5173\u5361\u7684\u7ed3\u6784\u7c7b\u4f3c\u4e8e\u5e73\u53f0\uff0c\u4f8b\u5982\u71c3\u6599\u6216\u51f9\u51f8)\u3002\u867d\u7136\u6709\u4e9b\u4eba\u8fd9\u6837\u505a\u662f\u4e0d\u6b63\u786e\u7684(\u4f8b\u5982\uff0c\u201c\u7532\u677f\u5efa\u9020\u6d41\u6c13\u201d\u662f\u9519\u8bef\u7684\uff0c\u201c\u6d41\u6c13\u822c\u7684\u7532\u677f\u5efa\u9020\u4eba\u201d\u66f4\u597d)\u3002\n\u90a3\u4e9b\u8ba4\u4e3a\u6d41\u6c13\u7684\u610f\u601d\u4e0d\u540c\u7684\u4eba\u73b0\u5728\u4f3c\u4e4e\u4ece\u6765\u6ca1\u6709(\u6216\u8005\u51e0\u4e4e\u4ece\u6765\u6ca1\u6709)\u73a9\u8fc7\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u6d41\u6c13\u3002\u4ed6\u4eec\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4ef6\u5fae\u4e0d\u8db3\u9053\u7684\u4e8b\u60c5\uff0c\u6216\u8005\u5b83\u7684\u89c4\u5219\u592a\u5177\u4f53\u4e86\uff0c\u4e0d\u80fd\u6210\u4e3a\u4e00\u4e2a\u6d41\u6d3e(\u7b26\u5408\u6807\u51c6\u7684\u6e38\u620f\u5927\u7ea6\u6709\u4e00\u5343\u79cd\uff0c\u6709\u51e0\u4e2a\u5b50\u6d41\u6d3e\uff0c\u6bd4\u5982\u9ed1\u5ba2\u559c\u6b22\u3001\u62fc\u56fe\u6d41\u6c13\u548c\u7c97\u4fd7\u559c\u6b22)\uff0c\u975e\u5e38\u5c0f\u4f17\u7684\u4e00\u4e2a(\u6211\u8ba4\u8bc6\u5f88\u591a\u73a9\u8fd9\u4e9b\u6e38\u620f\u7684\u4eba--\u4ed6\u4eec\u53ea\u662f\u5728\u66f4\u4e3b\u6d41\u7684\u6e38\u620f\u5a92\u4f53\u4e2d\u6ca1\u6709\u51fa\u73b0\u800c\u5df2\uff1b\u867d\u7136\u652f\u4ed8\u6700\u591a\u94b1\u7684\u90a3\u90e8\u5206\u6e38\u620f\u89c2\u4f17\u4e0d\u592a\u53ef\u80fd\u559c\u6b22\u5b83\u4eec\uff0c\u4f46\u4f60\u4e5f\u4e0d\u9700\u8981\u6210\u4e3a\u67d0\u79cd\u8d85\u7ea7\u4e66\u5446\u5b50)\uff0c\u66f4\u5c11\u7684\u662f\u4e00\u4e9b\u8d85\u7ea7\u4e66\u5446\u5b50(\u6211\u8ba4\u8bc6\u5f88\u591a\u73a9\u8fd9\u4e9b\u6e38\u620f\u7684\u4eba--\u4ed6\u4eec\u53ea\u662f\u6ca1\u6709\u51fa\u73b0\u5728\u66f4\u4e3b\u6d41\u7684\u6e38\u620f\u5a92\u4f53\u4e0a\uff1b\u867d\u7136\u82b1\u94b1\u6700\u591a\u7684\u90a3\u90e8\u5206\u6e38\u620f\u89c2\u4f17\u4e0d\u592a\u53ef\u80fd\u559c\u6b22\u5b83\u4eec\uff0c\u4f46\u4f60\u4e5f\u4e0d\u9700\u8981\u6210\u4e3a\u67d0\u79cd\u8d85\u7ea7\u4e66\u5446\u5b50)\u3002\u6ca1\u6709\u7406\u6027\u7684\u7406\u7531\u4e0d\u53bb\u5c1d\u8bd5\u3002\n.", "note_en": "Several recently released games have rekindled the old discussions on the meaning of the word \u201croguelike\u201d. This post is an attempt to document how the meaning of this term has changed historically.\n Roguelikes have evolved separately from mainstream video games: whil e mainstream games focused on features that sell well, roguelikes were made by skilled programmers who wanted to create games interesting for themselves, and share them with other people with similar tastes. The term was never defined well, with every player using it according to their own feelings; for this reason, I have decided to make this quite subjective. Also, much of the emphasis is put on the community \u2014 since the roguelikes tend to be ignored by mainstream media, the fans gathered in online communities, which have been crucial for the evolution of the genre.\n   I have not yet been in any online communities when the term \u201croguelike\u201d has been coined; luckily, Santiago Zapata has written  a blogpost about this. The term was invented by the Usenet community to group several games which they thought they were similar; these games were (1) free (2) dungeon crawl games (3) using \u2018character display\u2019 (in-game entities represented by letters and other characters). Gameplay features such as (4) permadeath or (5) randomness were not considered. Roguelikes at that time included  Rogue,  Moria,  NetHack,  Angband, and several other minor games.\n   Around that time, I have been playing  Valhalla (more commonly known as  Ragnarok). Was it a roguelike?\n  (2) dungeon crawl \u2014 partially: the first major part of the game took part in a forest, although dungeons were prominent too\n (3) character display \u2014 no: it had simple graphics (although you still can see some letter notation in the map above)\n (4) permadeath \u2014 partially: while in a roguelike you typically you could not reload your older savefile when something bad happens, and start a new game if defeated, Valhalla featured an \u201cexpert mode\u201d with very resticted saving, and a \u201cbeginner mode\u201d where you could create a reloadable save every 200 turns. Still, the game was balanced for permadeath.\n Yet, the  Roguelike FAQ still considered it a roguelike. As it should \u2014 the actual gameplay was very similar to  NetHack. It was\n  It had some weird conventions, like you could press the \u2018!\u2019 key to see all your potions (this was weird for me, but for roguelike fans it should be obvious \u2014 \u2018!\u2019 looks like a bottle, and was a typical potion symbol in ASCII roguelikes). I wanted to create my own game like  Valhalla. Many minor roguelikes have been created around that time, such as  Alphaman, a 1995 game set in the post-apocalyptic future when Donald Trump became the president. The Roguelike FAQ also includes  Crossfire which probably would not be called a roguelike now, although I guess that the definition is loosened for multiplayer games.\n  In 1997,  Diablo was released. If you compare  Diablo to  Angband, the two games are obviously very similar. In fact, the developers originally wanted to create a turn-based roguelike; however, Real-Time Strategy was a hot new genre back then, and they have decided to make it a roguelike/RTS hybrid.  Diablo featured great graphics. I do not know the exact reasons why the developers have decided to drop permadeath, but this was common in commercial roguelike-inspired games back then.\n Reviewers did recognize it as a great game, and that it required a new classification \u2014 the light story, focus on combat, and randomness made it quite different from typical RPGs. If they recognized that these traits were taken directly from roguelikes, \u201caction roguelike\u201d would probably mean a game similar to  Diablo nowadays; however, they did not, so the new genre was called \u201caction RPG\u201d.\n  Somewhere around 1998 one of my school friends has found an  Angband variant called  GSNband. He has shared it with our group of friends, and quite a lot of us loved it too! We also started creating our own roguelike. Reading about  GSNband, I have found that it is classified as a \u201croguelike\u201d, and learned about the existence of other roguelikes. By then, a new major roguelike has emerged, named  ADOM. It looked interesting, but its \u201csimple character graphics\u201d initially put it off. Eventually, I tried, and it was definitely worth it! I played it like an RPG as first (by copying the save files), but eventually switched to the correct, permadeath way.\n Some roguelike definitions from around 1999\u20132001 could be found  on the ADOM website and  on Petri Kuittinen\u2019s site.\n On  Darren Hebden\u2019s site, a list of over 100 roguelikes could be found. There are some omissions that I consider very interesting:\n Beneath Apple Manor, a 1978 game. It came out before Rogue, but it had all the roguelike gameplay elements, invented independently.\n Castle of the Winds, a shareware game published in 1993. It was quite popular. if somebody remembered they played some roguelike in the 90\u2019s, the answer was usually Castle of the Winds.\n Mission Thunderbolt, developed in 1986 on mainframe computers, and released commercially for Windows and Mac in 1992. I have played it around 2010 and it was a really great roguelike, with quite good graphics for its time, great innovative ideas, and optional permadeath. It is sad how unknown this game is.\n Soon I have started participating a bit in the roguelike communities, for example  here I have created a list of features which are typical to roguelikes, but are rare in other games. It was noticed that my list was slanted towards \u201chacklikes\u201d; I am not a fan of  Nethack itself, but a big fan of  ADOM and  Valhalla. People recognized that roguelikes are difficult to define. Some games started to appear which were a bit difficult to classify:  Decker is a cyberpunk game that I did not consider a roguelike because it had completely different tactics.\n  In 2002  DRL (\u201cDoom the Roguelike\u201d) was originally released. It was quite clear from the name what it was: it was a roguelike (character display, turn-based, randomly generated) where your primary weapons were guns, and you fought demons from Doom.\n  RogueBasin is a wiki initially created by Santiago Zapata. Created in 2005, it started collecting the knowledge related to roguelikes. RogueBasin is still active.\n  The first  7DRL challenge has been held in 2005. Roguelikes at that time were often extremely complex games which took years to produce; the 7DRL challenge instead focused on games created in seven days. Many of these submission were very experimental in nature. 7DRL challenge is still active today, with hundreds of roguelikes (and similar games) created every year. In my impression, the 7DRL challenge really helped to extract the specific things which made a game a roguelike. While major roguelikes so far were extremely complex games, 7DRLs did show that you could have a simple game which still had this elusive roguelike feeling.\n  Originally released in 2006,  Dwarf Fortress has two modes: the adventure mode and the fortress mode. The adventure mode was a typical roguelike, while the fortress mode shared some features, such as high complexity, random generation and ASCII display.  Dwarf Fortress (and a bit of  ADOM) later became a big inspiration for  Minecraft, one of the most popular games today, and itself an inspiration to many other games such as  Terraria.\n  So far, the roguelike discussions were mainly held in Usenet, in the rec.games.roguelike.newsgroups.  Temple of the Roguelike has been established by Santiago Zapata around May 2007, and its web forums quickly gained popularity, while the newsgroups gradually declined. I did not like the Usenet newsgroups too much, and became more active in the Temple forums. I have been also active in the  IVAN forums (Iter Vehemens ad Necem is a graphical and very fun hacklike), where I started my own development contributions, with IVAN3D.\n  In 2009 the roguelike developers have decided to meet in person, in the first International Roguelike Development Conference. They have decided that they need to actually define what the conference was actually about, and thus the  Berlin Interpretation was born. In my opinion, also  shared by other prominent roguelike people, they mostly failed, for two reasons:\n (1) they only knew the games existing at that time, and some features were given too much or not enough weight (just like the original 1993 definition which cared about being free, portable and character display). Soon after, new innovations were created, bringing lots of confusion.\n (2) the feeling of being a roguelike is quite elusive, it is more like  I know it when I see it rather than some specific list of features.\n  Later in 2009,  Spelunky was released. Spelunky is a platformer which took the compatible elements from roguelikes: random generation, as well as some other minor references, such as the non-modal shops from hacklikes. Moreover, the original version was free. While Derek Yu did not call his game a roguelike, he made it clear that the game takes a lot of inspiration of roguelikes. In turn, Spelunky has inspired lots of other games. Unfortunately, most game journalists and players did not know what a \u201croguelike\u201d was, and they started referring to games inspired by Spelunky as \u201croguelikes\u201d. If I recall correctly, we had discussions at the time whether Spelunky should be counted as a roguelike or not; ultimately, it turned out that most people who have actually played the original roguelikes have felt that these games do not capture that elusive roguelike feeling, and called such games \u201croguelike-likes\u201d, or later \u201croguelites\u201d.\n  Another interesting departure from the traditional roguelike definition. Similar to  Decker, it had essentially all the basic properties from roguelike definitions (like the Berlin Interpretation), but I did not consider it a roguelike because tactically it was completely different. Still more similar to traditional roguelikes than games such as  Spelunky.\n  In 2008\u20132011 I have been working on  IRLDb, a database which took the data from RogueBasin and displayed it in a tabular way. It was also integrated with the RogueTemple forums, allowing the members to rate roguelikes, share their successes, and write reviews.\n Around 2011 the roguelike community has started shifting from the web forums (such as RogueTemple) to  the roguelike subeddit. While the RogueBasin is still updated, the IRLDb ratings mostly show the state around 2011. Most roguelike fans have tried  Angband and  NetHack, but they are not considered to be that good by modern roguelike players. They prefer newer major roguelikes, such as  ADOM (very popular and rated quite highly) or  DCSS (even more popular and more highly rated).  Spelunky is also rated very highly.  Cogmind and  Caves of Qud have already existed by then, but they are (almost) not rated yet. They are extremely popular today.\n  Another innovative game which takes lots of inspiration from roguelikes. While a real-time game, it lets the player pause at any time, which makes it appealing to the part of the roguelike community who do not like action games. Another difference is that, while traditional roguelikes are non-modal (combat and exploration are the same thing), in  FTL you explore the galaxy and get \u201cevents\u201d, which may affect your run in some way, or pull you into a combat, which is a separate mode. It calls itself a \u201cspaceship simulation roguelike-like\u201d.\n  One of the platformers inspired by  Spelunky. It described itself as a \u201cRogue-lite. Your character dies, but with each passing your lineage grows and becomes stronger.\u201d Today, there are lots of people who consider themselves experts on roguelikes, and consider  this particular thing to be what separates roguelikes from roguelites. For them, roguelike is a run-based game where the strength of your characters remains roughly constant in subsequent runs, while a roguelite is a run-based game where your characters get stronger and stronger. This feature is also caled \u201cmeta-progression\u201d (progression which happens between runs, as opposed to inside a run).\n It does not make too much sense from the point of view of traditional roguelike communities. Most roguelike players seem to see the lack of meta-progression as an advantage \u2014 winning  DCSS for the first time after playing it for half a year was a great feeling, that could not be achieved in a meta-progression game, where it is never sure whether you win because you have mastered the game, or because the game let you. However,  NetHack (and other hacklikes) had the \u201cbones\u201d feature, where you could find the remains of a previous adventurer, with all their equiment, which also could make the further games easier.  Sproggiwood,  ToME, or  One Way Heroics have meta-progression, and they still do feel like roguelikes to us.\n  An action platformer. As usual with games from that era, it does not call itself a roguelike, but rather a game \u201cwith roguelike elements\u201d or \u201crogue-lite\u201d. Despite of that, players call it a \u201cclassic roguelike\u201d nowadays. While these players give \u201cprocedural generation\u201d and \u201cpermadeath\u201d as the requirements for this classification,  Risk of Rain is not really procedurally generated: the level layout is mostly the same in every run (actually, there is one of two choices).\n  According to the Steam store page, \u201c Darkest Dungeon is a challenging gothic roguelike turn-based RPG about the psychological stresses of adventuring\u201d. While previously the developers of games inspired by roguelikes clearly said that their games are not roguelikes themselves (only inspired by them), it appears that the more recent games just call themselves roguelikes.\n I have not played  Darkest Dungeon myself, but I have seen its roguelike, or even roguelite, nature  challenged because it does not really have permadeath in roguelike sense. Your characters die, but they are more of expendable resources, your run does not end, you will win your first run. Furthermore, according to the complaints, the game is very repetitive, which the randomness of roguelikes aims to avoid.\n  Slay The Spire has popularized the genre known as \u201croguelike deckbuilder\u201d games. It combines the ideas of deckbuilders such as  Dominion, and the general event-based structure of  FTL.\n From my point of view, the name \u201croguelike deckbuilder\u201d does not make much sense. The event-based structure is an innovation from  FTL, which goes against the traditional roguelike style of being non-modal. The combat system feels more like a jRPG; when playing jRPGs, I felt that the combat system (and its modality) was the major thing which separated them from roguelikes. Slay the Spire is run-based, but this is not an innovation, as all deckbuilders are! At least, every game of  Dominion you play will be completely different. Something like \u201cdungeon crawl deckbuilder\u201d (Dominion is not a dungeon crawl) would make more sense.\n  A look at a  thread of roguelike recommendations shows what people consider to be \u201croguelikes\u201d today. Most people recommended run-based games which are not roguelikes in the traditional sense, some did mention traditional roguelikes. Almost no one recommended games of both kinds. Some roguelike celebrities say that the  war is over, we should accept that \u201croguelike\u201d means something different now.\n While it is hard to fight the language change, I will exhibit some problems with the popular conventions.\n For some people, any game with permadeath and procedural generation is a \u201croguelike\u201d. But it is not clear to me why these people even need this term. It is not a cool word: it was originally chosen as \u201cthe least of all available evils\u201d. The main thing that all games called \u201croguelike\u201d share is that they are run-based: the game is designed so that you play it many times. Randomness is a good way to make this interesting, but it is not necessary \u2014in Risk of Rain, randomness is limited, and it is still fun. For some time, we had a \u201cdoom clone\u201d genre, which was eventually renamed to the more descriptive \u201cfirst-person shooter\u201d, and I think we should similarly refer to run-based games as \u201crun-based\u201d. This would include games like Tetris, but it does not seem to be a problem, because these games are fun for the same reason as roguelikes are. Roguelike-like and roguelite did not catch, because they are too vague, and too similar to \u201croguelike\u201d. Especially that there are like five significantly different meanings of \u201croguelike\u201d commonly used, so  why not just say exactly what you mean if you can.\n On the other hand, we need a word for a \u201croguelike\u201d in the traditional meaning. There are people who want to play a game in this particular style, and game developers who create such games and want to quickly tell what it is. When \u201cDoom the Roguelike\u201d was released, the name made it perfectly clear what it was (as long as you have played any roguelike and Doom).  HyperRogue is a roguelike taking place in non-Euclidean geometry; since roguelikes share their classic chess-like gameplay, they also share some basic strategies, and the change of geometry brings a new twist on them. It is annoying that such things would not be clear anymore. The original word was already bad, the least of all available evils, and run-based people have stolen it, even though they did not need it.\n Also, it seems that being run-based, while important, is not the most important quality of traditional roguelikes \u2014 commercial traditional roguelikes usually dropped it, others are still fun if you were cheating permadeath.\n It is not clear whether so-called \u201croguelikes\u201d are actually a genre. Slay the Spire, Darkest Dungeon, Spelunky, FTL are very different games. Why should they be a genre while, say, \u201cgames where you can pet a dog\u201d are not?\n It is suggested that \u201cTraditional roguelike\u201d should be used for the original meaning. There are some issues with this idea. Some people started calling  Spelunky a \u201ctraditional roguelike\u201d even before this term was coined. Furthermore, \u201ctraditional\u201d suggests lack of innovation; I would not call  HyperRogue, or mostly any other puzzle roguelike, \u201ctraditional\u201d. Some people do not consider puzzle roguelikes to be roguelikes; I am fine with this, but it appears that the majority of the community does. The alternative for \u201ctraditional roguelike\u201d is \u201caction roguelike\u201d, which would not include turn-based games which are not traditional roguelikes, and also does not include  Diablo for some reason, even though it is  more similar to the tradition.\n It seems that most roguelike fans accept using \u201croguelike\u201c as an adjective, for example \u201croguelike platformer\u201d or \u201croguelike first-person shooter\u201d. While slightly confusing, this makes sense: a game is a combination of two genres, it has all the properties of the genre appearing as a noun, and the compatible properties of the genre appearing as an adjective. We can also have \u201cfirst-person shooter roguelike\u201d (DRL) or \u201cplatformer roguelike\u201d (a grid-based turn-based game where the structure of the level is similar to that of a platformer, e.g. Fuel or Bump). Although some people do this incorrectly (e.g. \u201cdeckbuilding roguelike\u201d is wrong, \u201croguelike deckbuilder\u201d is better).\n It appears that the people who argue that roguelike means something different now have never (or almost never) played a roguelike in traditional sense. They think it is a tiny thing, or its rules are too specific to be a genre (there is about a thousand of games satisfying the criteria, and there are several subgenres, like hacklikes, puzzle roguelikes and broughlikes), very niche one (I know lots of people who play them \u2014 they are just not represented in more mainstream game media; while the part of the gaming audience who pays the most money would not be likely to enjoy them, you don\u2019t need to be some kind of ultra-nerd either), less influential than classics such as  Spelunky (roguelikes inspired three major genres, Spelunky inspired just one). There is no rational reason not to try a r\n......", "posttime": "2020-11-07 11:10:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e0\u8d56,roguelike,\u6e38\u620f", "title": "\u201c\u65e0\u8d56\u201d\u662f\u4ec0\u4e48\u610f\u601d\uff1f", "title_en": "What \u201cRoguelike\u201d Meant", "transed": 1, "url": "https://zenorogue.medium.com/what-roguelike-meant-fb8b0e1601a", "via": "", "real_tags": ["\u65e0\u8d56", "roguelike", "\u6e38\u620f"]}, {"category": "", "categoryclass": "", "imagename": "0b5f61a7f6c0de0ddcf3920486409778.jpg", "infoid": 1033603, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u6f14\u8bb2\u6765\u81ea2020\u5e74\u7684\u865a\u62df\u65e0\u8d56\u5e86\u5178\uff1ahttps://roguelike.club/event2020.html Duke\u662f\u4e00\u4f4d\u6765\u81ea\u6fb3\u5927\u5229\u4e9a\u58a8\u5c14\u672c\u7684\u7a0b\u5e8f\u5458\uff0c\u4ed6\u6709\u592a\u591a\u7684\u2026\u2026", "note_en": "This talk is from the 2020 virtual Roguelike Celebration: https://roguelike.club/event2020.html Duke is a programmer from Melbourne, Australia with too many ...", "posttime": "2020-11-07 11:10:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e74\u6765,quest,\u6765\u81ea", "title": "\u621140\u5e74\u6765\u5bfb\u627e\u4e00\u4e2a\u8ff7\u8def\u7684\u6d41\u6c13", "title_en": "My 40 year quest to find a lost Roguelike", "transed": 1, "url": "https://www.youtube.com/watch?v=xgBGrgucH2s", "via": "", "real_tags": ["\u5e74\u6765", "quest", "\u6765\u81ea"]}, {"category": "", "categoryclass": "", "imagename": "9273ceda14cdf9778bf1c13f24caeb5e.jpg", "infoid": 1033602, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8a79\u59c6\u65af\u00b7\u4f2f\u514b(\u300a\u8054\u7cfb\u300b\uff0c\u300a\u5b87\u5b99\u6539\u53d8\u7684\u4e00\u5929\u300b)\uff0c\u4e16\u754c\u4e0a\u6700\u91cd\u8981\u7684\u79d1\u5b66\u53f2\u5b66\u5bb6\u4e4b\u4e00\uff0c\u4e8e5\u670817\u65e5\u5728\u9694\u79bb\u533a\u63a5\u53d7\u4e86\u73b0\u573a\u91c7\u8bbf\u3002", "note_en": "James Burke (Connections, The Day The Universe Changed), one of the world's foremost historians of science, gives a live interview from quarantine on May 17t...", "posttime": "2020-11-07 11:10:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4f2f\u514b,burke,\u63a5\u53d7", "title": "\u8a79\u59c6\u65af\u00b7\u4f2f\u514b\u91c7\u8bbf[\u89c6\u9891]", "title_en": "James Burke Interview [video]", "transed": 1, "url": "https://www.youtube.com/watch?v=mUb6Sv-rUv0", "via": "", "real_tags": ["\u4f2f\u514b", "burke", "\u63a5\u53d7"]}, {"category": "", "categoryclass": "", "imagename": "1fe3799249db7b90499a3d5c021edbda.jpg", "infoid": 1033601, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u79d8\u9c81\u5b89\u7b2c\u65af\u9ad8\u5730\u53d1\u73b0\u4e86\u4e00\u51779000\u5e74\u524d\u7684\u5973\u6027\u9aa8\u67b6\uff0c\u5176\u4e2d\u57cb\u846c\u7740\u8003\u53e4\u5b66\u5bb6\u6240\u8bf4\u7684\u201c\u5927\u578b\u730e\u7269\u72e9\u730e\u5de5\u5177\u201d\u3002\u8fd9\u4e00\u53d1\u73b0\u6311\u6218\u4e86\u53e4\u4ee3\u72e9\u730e\u91c7\u96c6\u8005\u6700\u5e7f\u4e3a\u6d41\u4f20\u7684\u4fe1\u6761\u4e4b\u4e00--\u7537\u6027\u72e9\u730e\uff0c\u5973\u6027\u91c7\u96c6\u3002\n\u52a0\u5dde\u5927\u5b66\u6234\u7ef4\u65af\u5206\u6821(University of California\uff0cDavis)\u7684\u8003\u53e4\u5b66\u5bb6\u5170\u8fea\u00b7\u54c8\u65af(Randy Haas)\u548c\u4ed6\u7684\u4e00\u7fa4\u540c\u4e8b\u5728\u5468\u4e09\u53d1\u8868\u5728\u300a\u79d1\u5b66\u8fdb\u5c55\u300b(Science Advance)\u6742\u5fd7\u4e0a\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u5f97\u51fa\u7ed3\u8bba\uff0c\u8fd9\u540d\u5e74\u8f7b\u5973\u5b50\u662f\u4e00\u540d\u5927\u578b\u730e\u7269\u730e\u624b\uff0c\u5979\u548c\u5979\u7684\u65cf\u4eba\u4e00\u8d77\u8ffd\u9010\u7ef4\u5c3c\u4e9a\u548c\u9e7f\uff0c\u8fd9\u4e9b\u52a8\u7269\u5728\u4ed6\u4eec\u7684\u98df\u7269\u4e2d\u5360\u4e86\u76f8\u5f53\u5927\u7684\u6bd4\u4f8b\u3002\n\u4e00\u540d\u5973\u6027\u730e\u4eba\u7684\u53d1\u73b0\u662f\u4e0d\u540c\u5bfb\u5e38\u7684\u3002\u4f46\u54c8\u65af\u535a\u58eb\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u5bf9\u7f8e\u6d32\u8fd9\u4e2a\u65f6\u671f\u7684\u52b3\u52a8\u5206\u5de5\u63d0\u51fa\u4e86\u66f4\u5927\u7684\u4e3b\u5f20\u3002\u4ed6\u4eec\u4e89\u8fa9\u8bf4\uff0c\u989d\u5916\u7684\u7814\u7a76\u8868\u660e\uff0c\u7537\u5973\u5728\u72e9\u730e\u65b9\u9762\u7684\u53c2\u4e0e\u51e0\u4e4e\u662f\u5e73\u7b49\u7684\u3002\u4ed6\u4eec\u603b\u7ed3\u9053\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u201c\u7f8e\u6d32\u65e9\u671f\u7684\u5973\u6027\u662f\u5927\u578b\u730e\u7269\u7684\u730e\u624b\u3002\u201d\n\u5176\u4ed6\u79d1\u5b66\u5bb6\u8ba4\u4e3a\u8fd9\u4e9b\u9057\u9ab8\u662f\u5973\u6027\u730e\u4eba\u7684\u8bf4\u6cd5\u4ee4\u4eba\u4fe1\u670d\uff0c\u4f46\u4e00\u4e9b\u79d1\u5b66\u5bb6\u8868\u793a\uff0c\u6570\u636e\u5e76\u4e0d\u652f\u6301\u66f4\u5e7f\u6cdb\u7684\u8bf4\u6cd5\u3002\n\u6000\u4fc4\u660e\u5927\u5b66(University Of Wyming)\u4eba\u7c7b\u5b66\u5bb6\u7f57\u4f2f\u7279\u00b7L\u00b7\u51ef\u5229(Robert L.Kelly)\u64b0\u5199\u4e86\u5927\u91cf\u5173\u4e8e\u72e9\u730e\u91c7\u96c6\u8005\u7684\u6587\u7ae0\uff0c\u4ed6\u8bf4\uff0c\u867d\u7136\u6709\u4e00\u5177\u5973\u6027\u9aa8\u67b6\u5f88\u53ef\u80fd\u662f\u730e\u4eba\uff0c\u4f46\u5bf9\u5176\u4ed6\u5893\u846c\u7684\u5206\u6790\u5e76\u4e0d\u80fd\u8bf4\u670d\u4ed6\uff0c\u201c\u730e\u4eba\u7684\u7537\u5973\u6bd4\u4f8b\u51e0\u4e4e\u76f8\u5f53\u3002\u201d\u4ed6\u8bf4\uff0c\u7814\u7a76\u4eba\u5458\u7684\u575f\u5893\u6837\u672c\u5f88\u5c0f\uff0c\u5e76\u6307\u51fa\u5176\u4ed6\u5893\u846c\u4e2d\u6ca1\u6709\u4e00\u4e2a\u660e\u663e\u662f\u5973\u6027\u730e\u4eba\u3002\n\u4fc4\u514b\u62c9\u4f55\u9a6c\u5927\u5b66(University Of Oklahoma)\u7684\u4eba\u7c7b\u5b66\u5bb6\u90a6\u59ae\u00b7L\u00b7\u76ae\u5e03\u62c9\u591a(Bonnie L.Pitblado)\u4e13\u95e8\u7814\u7a76\u7f8e\u6d32\u4eba\u53e3\uff0c\u5979\u8bf4\u8fd9\u4e9b\u53d1\u73b0\u201c\u5f88\u6709\u9053\u7406\uff0c\u662f\u672a\u6765\u6d4b\u8bd5\u7684\u4e00\u4e2a\u91cd\u8981\u60f3\u6cd5\u201d\u3002\u5979\u8bf4\uff0c\u4f5c\u8005\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8d28\u7591\u6027\u522b\u89d2\u8272\u4ee5\u53ca\u662f\u4ec0\u4e48\u51b3\u5b9a\u4e86\u6027\u522b\u89d2\u8272\uff0c\u5e76\u79f0\u8fd9\u9879\u7814\u7a76\u5bf9\u7f8e\u6d32\u65e9\u671f\u5b9a\u5c45\u8005\u7684\u7814\u7a76\u201c\u771f\u7684\u662f\u4e00\u9879\u4ee4\u4eba\u8033\u76ee\u4e00\u65b0\u7684\u8d21\u732e\u201d\u3002\n\u54c8\u65af\u535a\u58eb\u8bf4\uff0c\u5728\u5927\u591a\u6570\u5f53\u4ee3\u548c\u6700\u8fd1\u7684\u72e9\u730e\u91c7\u96c6\u8005\u793e\u4f1a\u4e2d\uff0c\u72e9\u730e\u4e3b\u8981\u7531\u7537\u6027\u5b8c\u6210\uff0c\u8fd9\u4e00\u70b9\u5df2\u7ecf\u5e7f\u4e3a\u4eba\u77e5\u3002\u8003\u53e4\u8bc1\u636e\u503e\u5411\u4e8e\u652f\u6301\u8fd9\u6837\u7684\u7ed3\u8bba\uff0c\u5373\u8fc7\u53bb\u7684\u6027\u522b\u89d2\u8272\u662f\u76f8\u4f3c\u7684\u3002\u6709\u65f6\uff0c\u5973\u6027\u9057\u9ab8\u4f1a\u4e0e\u8868\u660e\u5979\u4eec\u662f\u730e\u4eba\u7684\u6750\u6599\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u4f46\u8fd9\u4e9b\u4f8b\u5b50\u88ab\u89c6\u4e3a\u5f02\u5e38\u503c\u3002\u54c8\u65af\u535a\u58eb\u5efa\u8bae\uff0c\u5982\u679c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff0c\u90a3\u4e48\u4eba\u4eec\u5bf9\u72e9\u730e\u7684\u6574\u4f53\u770b\u6cd5\u5e94\u8be5\u8c03\u6574\u4e00\u4e0b\u5462\uff1f\n\u4ed6\u548c\u5176\u4ed6\u4eba\u5728\u79d8\u9c81\u5357\u90e8\u666e\u8bfa\u5730\u533a\u4e00\u4e2a\u540d\u53ebWilamaya Patjxa\u7684\u5730\u70b9\u53d1\u73b0\u4e86\u8fd9\u540d\u5e74\u8f7b\u5973\u6027\u7684\u575f\u5893\uff0c\u90a3\u91cc\u6d77\u62d4\u8fd11.3\u4e07\u82f1\u5c3a\u3002\u7b54\uff1a2013\u5e74\uff0c\u5f53\u5730\u5408\u4f5c\u8005\u76ae\u5c14\u79d1\u00b7\u594e\u65af\u4f69(PilCo Quispe)\u5728\u7a46\u62c9\u00b7\u6cd5\u897f\u91cc(Mulla Fasiri)\u793e\u533a\u9644\u8fd1\u9996\u6b21\u53d1\u73b0\u4e86\u8be5\u5730\u533a\u7684\u6587\u7269\u30022018\u5e74\uff0c\u54c8\u65af\u535a\u58eb\u548c\u5176\u4ed6\u4eba\u4e0e\u793e\u533a\u6210\u5458\u5408\u4f5c\uff0c\u6316\u6398\u4e86\u5927\u7ea6400\u5e73\u65b9\u82f1\u5c3a\u7684\u9762\u79ef\uff0c\u627e\u56de\u4e86\u5927\u7ea62\u4e07\u4ef6\u6587\u7269\u3002\u4ed6\u4eec\u53d1\u73b0\u4e86\u4e94\u4e2a\u57cb\u846c\u5730\u70b9\uff0c\u5176\u4e2d\u6709\u516d\u4e2a\u4eba\u7684\u9057\u9ab8\uff0c\u5176\u4e2d\u4e00\u4eba\u662f\u730e\u4eba\u3002\n\u8fd9\u4e00\u53d1\u73b0\u7279\u522b\u4ee4\u4eba\u5174\u594b\u3002\u54c8\u65af\u535a\u58eb\u8bf4\uff0c\u4ed6\u7684\u4e00\u4e2a\u5408\u4f5c\u8005\u4e00\u76f4\u5728\u5bfb\u627e\u6295\u5c04\u70b9\uff0c\u7136\u540e\u7528\u9aa8\u67b6\u7684\u6b8b\u9ab8\u6536\u96c6\u6295\u5c04\u70b9\u548c\u5176\u4ed6\u77f3\u5668\u3002\u4ed6\u8bf4\uff0c\u8fd9\u7fa4\u6316\u6398\u673a\u90fd\u5f88\u6fc0\u52a8\uff0c\u8c08\u8bdd\u7684\u5b9e\u8d28\u662f\uff1a\u201c\u54e6\uff0c\u4ed6\u4e00\u5b9a\u662f\u4e00\u4f4d\u4f1f\u5927\u7684\u914b\u957f\u3002\u201d\u4ed6\u662f\u4e00\u4e2a\u4f1f\u5927\u7684\u730e\u4eba\u3002\u201c\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u88ab\u63a9\u57cb\u7684\u4eba\uff0c\u73b0\u5728\u88ab\u79f0\u4e3aWMP6\uff0c\u662f\u4e00\u540d\u5973\u6027\uff0c\u5927\u7ea617-19\u5c81\u3002\u5979\u7684\u9aa8\u9abc\u6bd4\u7537\u6027\u9884\u8ba1\u7684\u8981\u8f7b\uff0c\u4e00\u9879\u5bf9\u7259\u91c9\u8d28\u4e2d\u86cb\u767d\u8d28\u7684\u7814\u7a76\u8868\u660e\uff0c\u5979\u7edd\u5bf9\u662f\u5973\u6027\u3002\u7259\u91c9\u8d28\u662f\u4e00\u79cd\u76f8\u5bf9\u8f83\u65b0\u7684\u6027\u522b\u9274\u5b9a\u6280\u672f\u3002\n\u7136\u540e\uff0c\u54c8\u65af\u535a\u58eb\u67e5\u770b\u4e86\u5927\u7ea61.4\u4e07\u52308000\u5e74\u524d\u7f8e\u6d32\u7684429\u5904\u5893\u5730\uff0c\u786e\u8ba4\u4e8627\u4e2a\u6027\u522b\u5df2\u7ecf\u786e\u5b9a\u7684\u4eba\uff0c\u4ed6\u4eec\u88ab\u53d1\u73b0\u643a\u5e26\u5927\u578b\u730e\u7269\u72e9\u730e\u5de5\u5177\u3002\u5176\u4e2d11\u4eba\u4e3a\u5973\u6027\uff0c16\u4eba\u4e3a\u7537\u6027\u3002\u4ed6\u548c\u4ed6\u7684\u4f5c\u8005\u627f\u8ba4\uff0c\u8fd9\u4e9b\u57cb\u846c\u7684\u6570\u636e\u5e76\u4e0d\u662f\u51b3\u5b9a\u6027\u7684\uff0c\u800c\u4e14\u552f\u4e00\u4e0d\u53ef\u5426\u8ba4\u7684\u5973\u6027\u730e\u4eba\u662f\u6765\u81eaWilamaya Patjxa\u7684\u4eba\u3002\u4f46\u662f\uff0c\u54c8\u65af\u535a\u58eb\u8bf4\uff0c\u5c3d\u7ba1\u8bc1\u636e\u5360\u4f18\u52bf\uff0c\u4f46\u4ecd\u5f97\u51fa\u7ed3\u8bba\uff0c\u5728\u5927\u578b\u52a8\u7269\u730e\u4eba\u4e2d\uff0c\u5973\u6027\u7ea6\u536030%\u523050%\u3002\n\u8fd9\u4e00\u7ed3\u8bba\u662f\u51ef\u5229\u535a\u58eb\u53d1\u73b0\u7684\u672a\u7ecf\u8bc1\u5b9e\u7684\u3002\u5176\u4e2d\u4e24\u5904\u5893\u5730\u662f\u5a74\u513f\u7684\u5893\u5730\uff0c\u54c8\u65af\u535a\u58eb\u548c\u4ed6\u7684\u5408\u4f5c\u8005\u8bf4\uff0c\u8fd9\u4e9b\u5a74\u513f\u7684\u5893\u5730\u91cc\u57cb\u846c\u7740\u4e00\u4e9b\u6587\u7269\uff0c\u8fd9\u4e9b\u6587\u7269\u8868\u660e\u4ed6\u4eec\u53ef\u80fd\u662f\u730e\u4eba\u3002\u4ed6\u8fd8\u544a\u8beb\u4eba\u4eec\u4e0d\u8981\u8fc7\u5ea6\u89e3\u8bfb\u5893\u846c\u3002\u201c\u4f5c\u4e3a\u4e00\u79cd\u6587\u5316\u7684\u3001\u8c61\u5f81\u6027\u7684\u884c\u4e3a\uff0c\u5bf9\u5893\u846c\u7269\u54c1\u7684\u89e3\u8bfb\u5e76\u4e0d\u7b80\u5355\u6216\u76f4\u622a\u4e86\u5f53\u3002\u201d\n\u4ed6\u4e5f\u6279\u8bc4\u4e86\u5bf9\u5176\u4ed6\u9aa8\u9abc\u7684\u89e3\u91ca\uff0c\u5e76\u8bf4\uff1a\u201c\u5982\u679c\u6211\u4eec\u63a5\u53d7WMP6\u4f5c\u4e3a\u6837\u672c\u4e2d\u552f\u4e00\u7684\u5973\u6027\u730e\u4eba\uff0c\u90a3\u4e48\u8fd9\u8868\u660e\u5973\u6027\u730e\u4eba\u7684\u6bd4\u4f8b\u6700\u6709\u53ef\u80fd\u662f10%\u3002\u201d\u6211\u4e0d\u4f1a\u5bf9\u6b64\u611f\u5230\u60ca\u8bb6\u3002\u201c", "note_en": "The discovery of a 9,000-year-old female skeleton buried with what archaeologists call a \u201cbig-game hunting kit\u201d in the Andes highlands of Peru has challenged one of the most widely held tenets about ancient hunter gatherers \u2014 that males hunted and females gathered.\n Randy Haas, an archaeologist at the University of California, Davis, and a group of colleagues, concluded in a  paper published in the journal Science Advances on Wednesday that this young woman was a big game hunter, who participated with her people in the pursuit of the vicu\u00f1a and deer that made up a significant portion of their diet.\n The find of a female hunter is unusual. But Dr. Haas and his colleagues make a larger claim about the division of labor at this time period in the Americas. They argue that additional research shows something close to equal participation in hunting for both sexes. In general, they conclude, \u201cearly females in the Americas were big game hunters.\u201d\n Other scientists found the claim that the remains were those of a female hunter convincing, but some said the data didn\u2019t support the broader claim.\n Robert L. Kelly, an anthropologist at the University of Wyoming who has written extensively on hunter gatherers, said that while one female skeleton may well have been a hunter, he was not persuaded by the analysis of other burials that \u201cthe prevalence of male-female hunters was near parity.\u201d The researchers\u2019 sample of graves was small, he said, noting that none of the other burials were clearly female hunters.\n Bonnie L. Pitblado, an anthropologist at the University of Oklahoma whose specialty is the peopling of the Americas, said the findings were \u201cwell-reasoned and an important idea for future testing.\u201d The authors could question gender roles further and what determined them, she said, calling the study \u201ca really refreshing contribution\u201d to studies of early settlers of the Americas.\n  In most contemporary and recent societies of hunter gatherers, Dr. Haas said, it is well-established that hunting is predominantly done by males. Archaeological evidence has tended to support the conclusion that past gender roles were similar. On occasion, female remains have been associated with materials that suggested that they were hunters but the examples have been treated as outliers. What if they weren\u2019t, Dr. Haas suggested, and the overall view of hunting should be adjusted?\n He and others found the grave of the young female with the hunting materials at a site called Wilamaya Patjxa in the Puno district of southern Peru at an altitude of almost 13,000 feet. A. Pilco Quispe, a local collaborator, first found artifacts in that area in 2013 near the community of Mulla Fasiri. In 2018, working with community members, Dr. Haas and others excavated an area of about 400 square feet, recovering about 20,000 artifacts. They found five burial sites with remains of six people, one of whom was the hunter.\n  That find was particularly exciting. One of his collaborators kept finding projectile points, Dr. Haas said, and then a collection of points and other stone tools, with the remains of a skeleton. The group of excavators was thrilled, he said, and the substance of the conversation was, \u201cOh, he must have been a great chief. He was a great hunter.\u201d\n As it turned out, the buried person, who now goes by the scientific identifier WMP6, was female, about 17-19 years old. Her bones were lighter than might have been expected for a male, and a study of proteins in dental enamel, a relatively new technique for sex identification, showed she was definitely female.\n Dr. Haas then looked at 429 burials in the Americas from about 14,000 to 8,000 years ago and identified 27 individuals whose sex had been determined who were found with big game hunting implements. Eleven were female and 16 were male. He and his authors acknowledged that the data was not conclusive for these burials, and that the only individual that was undeniably female and a hunter was the person from Wilamaya Patjxa. But, Dr. Haas said, the preponderance of the evidence still led to the conclusion that females were about 30 to 50 percent of the big game hunters.\n That conclusion is what Dr. Kelly found unsubstantiated. Two of the burials were of infants, which Dr. Haas and his collaborators described as buried with artifacts that suggested they would be hunters. And he cautioned about reading too much into burials. \u201cThe interpretation of grave goods, as a cultural, symbolic act, is not simple or straightforward.\u201d\n He had criticisms of the interpretation of the other skeletons as well, and said, \u201cIf we accept WMP6 as the only female hunter in the sample, then it suggests the most likely prevalence of female hunters is 10 percent. I would not be surprised at that.\u201d", "posttime": "2020-11-07 11:10:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53e4\u4ee3,remains,\u730e\u4eba", "title": "\u79d8\u9c81\u7684\u53e4\u4ee3\u9057\u9ab8\u63ed\u793a\u4e86\u5e74\u8f7b\u7684\u5973\u6027\u5927\u578b\u52a8\u7269\u730e\u4eba", "title_en": "Ancient remains in Peru reveal young, female big-game hunter", "transed": 1, "url": "https://www.nytimes.com/2020/11/04/science/ancient-female-hunter.html", "via": "", "real_tags": ["\u53e4\u4ee3", "remains", "\u730e\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "269ff76fea4af70f92500cc8fea5304e.jpg", "infoid": 1033600, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u76ee\u524d\uff0cPlayStation5\u4e0d\u652f\u6301\u5c06\u4fdd\u5b58\u7684\u6570\u636e\u590d\u5236\u5230\u5916\u90e8\u5b58\u50a8\u8bbe\u5907\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6e38\u620f\u673a\u5c06\u4fdd\u5b58\u6587\u4ef6\u4ece\u4e00\u4e2aPS5\u79fb\u52a8\u5230\u53e6\u4e00\u4e2aPS5\uff0c\u6216\u8005\u5907\u4efd\u4fdd\u5b58\u6570\u636e\u7684\u552f\u4e00\u9009\u62e9\u662f\u4f7f\u7528\u7d22\u5c3c\u7684\u4e91\u5b58\u50a8--\u8fd9\u662fPlayStation Plus\u7528\u6237\u72ec\u6709\u7684\u3002\n\u8fd9\u4e0e\u5b83\u5728PlayStation4\u4e0a\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0d\u540c\uff0cPlayStation4\u5141\u8bb8\u7528\u6237\u5c06\u6570\u636e\u5907\u4efd\u5230USB\u9a71\u52a8\u5668\u548c\u4e91\u5b58\u50a8\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e00\u9009\u9879\uff0cPS5\u7528\u6237\u5c06\u9762\u4e34\u4e22\u5931\u4fdd\u5b58\u6587\u4ef6\u7684\u98ce\u9669\uff0c\u9664\u975e\u4ed6\u4eec\u4e3a\u6d3b\u8dc3\u7684PlayStation Plus\u8ba2\u9605\u4ed8\u8d39\uff0c\u5426\u5219\u4ed6\u4eec\u5c06\u9762\u4e34\u4e00\u4e9b\u707e\u96be\u964d\u4e34--\u6bd4\u5982\u4ed6\u4eec\u7684\u6e38\u620f\u673a\u5728\u62a2\u52ab\u4e2d\u88ab\u76d7\uff0c\u6216\u8005\u88ab\u6d2a\u6c34\u6467\u6bc1\uff0c\u6216\u8005\u88ab\u56fa\u4ef6\u66f4\u65b0\u7838\u574f\u3002\nPS4/PS5\u7684\u533a\u522b\u5728PS5\u7684\u7cfb\u7edf\u8bbe\u7f6e\u4e2d\u53d8\u5f97\u6e05\u6670\u8d77\u6765\u3002\u5728\u83dc\u5355\u7684\u201c\u4fdd\u5b58\u7684\u6570\u636e\u548c\u6e38\u620f/\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u201d\u9875\u9762\u4e2d\uff0c\u6709\u4e00\u4e2a\u6807\u8bb0\u4e3a\u201c\u4fdd\u5b58\u7684\u6570\u636e(PS4)\u201d\u7684\u90e8\u5206\u3002\u5728\u90a3\u91cc\uff0c\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u5c06PS4\u4fdd\u5b58\u7684\u6587\u4ef6\u590d\u5236\u5230USB\u9a71\u52a8\u5668\u6216\u7d22\u5c3c\u7684\u4e91\u5b58\u50a8\uff0c\u6216\u8005\u4ece\u63a7\u5236\u53f0\u5220\u9664\u8fd9\u4e9b\u6587\u4ef6\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u6539\u53d8PS5\u5904\u7406PS4\u4fdd\u5b58\u6570\u636e\u81ea\u52a8\u4e0a\u4f20\u5230\u4e91\u5b58\u50a8\u7684\u65b9\u5f0f\u3002\n\u7136\u800c\uff0c\u201c\u4fdd\u5b58\u7684\u6570\u636e(PS5)\u201d\u83dc\u5355\u7f3a\u5c11\u201cUSB\u9a71\u52a8\u5668\u201d\u9009\u9879\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5904\u7406PS5\u4fdd\u5b58\u6587\u4ef6\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u624b\u52a8\u5c06\u5b83\u4eec\u4ece\u6e38\u620f\u673a\u7684\u5185\u90e8\u5b58\u50a8\u590d\u5236\u5230\u7d22\u5c3c\u7684\u4e91\u5b58\u50a8\uff0c\u6216\u8005\u5220\u9664\u5b83\u4eec\u3002\n\u5982\u679c\u4f60\u70b9\u51fb\u8fd9\u4e2a\u9875\u9762\u4e0a\u7684\u201c\u63a7\u5236\u53f0\u5b58\u50a8\u201d\uff0c\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u53ea\u6709\u4e24\u4e2a\u9009\u9879\u7684\u5c4f\u5e55\uff1a\u201c\u4e0a\u4f20\u5230\u4e91\u5b58\u50a8\u201d\u548c\u201c\u5220\u9664\u201d\u3002\u524d\u8005\u65c1\u8fb9\u6709\u4e00\u4e2aPlayStation Plus\u6807\u8bc6--\u8fd9\u610f\u5473\u7740\u5b83\u4ec5\u9650\u4e8e\u8ba2\u6237\u4f7f\u7528\u3002\n\u867d\u7136\u4e91\u5b58\u50a8\u5f53\u7136\u4e0d\u9519\uff0c\u800c\u4e14\u5f88\u53ef\u80fd\u662f\u5927\u591a\u6570PS5\u7528\u6237\u5907\u4efd\u4fdd\u5b58\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u4f46\u6709\u51e0\u4ef6\u4e8b\u4f1a\u8ba9\u5b83\u53d8\u5f97\u4e0d\u65b9\u4fbf\u3002\u9664\u4e86PS5\u5b58\u50a8\u5907\u4efd\u9501\u5b9a\u5728PlayStation Plus\u4ed8\u8d39\u5899\u540e\u9762\u4e4b\u5916\uff0c\u4e91\u5b58\u50a8\u8fd8\u9700\u8981\u7f51\u7edc\u8fde\u63a5\u624d\u80fd\u8bbf\u95ee\u3002\u5982\u679c\u73a9\u5bb6\u7684\u4e92\u8054\u7f51\u51fa\u73b0\u6545\u969c\uff0c\u4ed6\u4eec\u5c31\u4f1a\u5012\u9709\uff0c\u800c\u5982\u679c\u4ed6\u4eec\u80fd\u5c06\u4fdd\u5b58\u7684\u6587\u4ef6\u5907\u4efd\u5230\u672c\u5730\u5b58\u50a8\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u4ece\u672c\u5730\u5b58\u50a8\u4e2d\u6062\u590d\u4fdd\u5b58\u7684\u6587\u4ef6\u3002\u6211\u4eec\u5df2\u7ecf\u8be2\u95ee\u4e86\u7d22\u5c3c\u4e3a\u4ec0\u4e48PS5\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u4f1a\u7528\u6211\u4eec\u6536\u5230\u7684\u4efb\u4f55\u4fe1\u606f\u6765\u66f4\u65b0\u8fd9\u7bc7\u6587\u7ae0\u3002\n\u5f53\u7136\uff0c\u8fd9\u4e5f\u662f\u4efb\u5929\u5802\u5904\u7406\u4efb\u5929\u5802Switch\u4e0a\u4fdd\u5b58\u6587\u4ef6\u7684\u65b9\u5f0f--\u7528\u6237\u53ea\u6709\u5728\u652f\u4ed8\u4efb\u5929\u5802Switch\u5728\u7ebf\u8ba2\u9605\u8d39\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u5c06\u6587\u4ef6\u5907\u4efd\u5230\u4e91\u5b58\u50a8\u4e2d\u3002(\u5f53\u8fd9\u6b3e\u6e38\u620f\u673a\u57282017\u5e74\u521d\u53d1\u5e03\u65f6\uff0c\u5b83\u751a\u81f3\u6ca1\u6709\u8fd9\u4e00\u529f\u80fd\u3002)\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5fae\u8f6f\u5728Xbox One\u4e0a\u63d0\u4f9b\u514d\u8d39\u7684\u4e91\u5b58\u50a8(\u5f88\u5febXbox 360\u4e0a\u4e5f\u4f1a\u514d\u8d39)\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cPS5\u4fdd\u5b58\u6570\u636e\u5e76\u4e0d\u662fPS5\u552f\u4e00\u4e0d\u5141\u8bb8\u4f60\u4f20\u8f93\u5230USB\u8bbe\u5907\u7684\u4e1c\u897f\u3002\u8fd9\u6b3e\u6e38\u620f\u673a\u8fd8\u53ef\u4ee5\u963b\u6b62\u73a9\u5bb6\u5c06\u6574\u4e2aPS5\u6e38\u620f\u79fb\u81f3\u5916\u90e8\u5b58\u50a8\u3002\u867d\u7136\u73a9\u5bb6\u4e0d\u80fd\u4ece\u5916\u90e8\u5b58\u50a8\u5668\u73a9\u8fd9\u4e9b\u6e38\u620f\u5e76\u4e0d\u5947\u602a\uff0c\u4f46\u8003\u8651\u5230PS5\u5185\u7f6eSSD\u7684\u901f\u5ea6\u8981\u6c42\uff0c\u7d22\u5c3c\u4e0d\u8ba9\u73a9\u5bb6\u4f7f\u7528\u5916\u90e8USB\u9a71\u52a8\u5668\u4f5c\u4e3a\u201c\u51b7\u5b58\u50a8\u5668\u201d\u6765\u91ca\u653eSSD\u4e0a\u7684\u7a7a\u95f4\uff0c\u800c\u4e0d\u5fc5\u91cd\u65b0\u4e0b\u8f7d\u6e38\u620f\uff0c\u8fd9\u6709\u70b9\u4ee4\u4eba\u60ca\u8bb6\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u8fd8\u5e94\u8be5\u6ce8\u610f\u5230\uff0cPS5\u786e\u5b9e\u63d0\u4f9b\u4e86\u7cfb\u7edf\u5907\u4efd/\u6062\u590d\u529f\u80fd\uff0c\u5c31\u50cfPS4\u4e00\u6837\u3002\u4f46\u5bf9\u4e8e\u5b9a\u671f\u5907\u4efdPS5\u5b58\u50a8\u6570\u636e\u6765\u8bf4\uff0c\u8fd9\u6839\u672c\u4e0d\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u9009\u62e9--\u5b83\u7684\u8bbe\u8ba1\u529f\u80fd\u7c7b\u4f3c\u4e8e\u7535\u8111\u4e0a\u7684\u6062\u590d\u8f6f\u4ef6\uff0c\u7c7b\u4f3c\u4e8eWindows\u4e0a\u7684\u7cfb\u7edf\u8fd8\u539f\u6216Mac OS\u4e0a\u7684Time Machine\u3002\n\u5728PS5\u8bbe\u7f6e\u7684\u7cfb\u7edf\u9875\u9762\u7684\u201c\u7cfb\u7edf\u8f6f\u4ef6\u201d\u90e8\u5206\uff0c\u63a7\u5236\u53f0\u7684\u201c\u5907\u4efd\u548c\u6062\u590d\u201d\u529f\u80fd\u8bf4\uff0c\u5b83\u5141\u8bb8\u4f60\u201c\u5c06\u63a7\u5236\u53f0\u5b58\u50a8\u4e2d\u7684\u6e38\u620f\u3001\u5e94\u7528\u7a0b\u5e8f\u548c\u6570\u636e\u5907\u4efd\u5230USB\u9a71\u52a8\u5668\u3002\u201d\u8fd9\u5728\u6280\u672f\u4e0a\u662f\u6b63\u786e\u7684\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u662f\u7b80\u5355\u5730\u5c06\u4fdd\u5b58\u7684\u6587\u4ef6(\u6216\u5df2\u5b89\u88c5\u7684PS5\u6e38\u620f\u6216\u4efb\u4f55\u5176\u4ed6\u6570\u636e)\u4ee5\u5176\u539f\u59cb\u7684\u3001\u53ef\u7528\u7684\u683c\u5f0f\u590d\u5236\u5230\u5916\u90e8\u5b58\u50a8\u3002\u5b83\u6240\u505a\u7684\u662f\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u76f8\u5173\u6570\u636e\u7684\u538b\u7f29\u5b58\u6863\uff0c\u4ee5\u4fbf\u5c06\u5176\u5bfc\u51fa\u5230USB\u9a71\u52a8\u5668\u3002\u53ea\u6709PS5\u53ef\u4ee5\u8bfb\u53d6\u8fd9\u4e2a\u5907\u4efd\u6863\u6848--\u5b83\u88ab\u5206\u62103.99 GB\u7684\u6570\u636e\u5757\uff0c\u4e0e\u5907\u4efd\u6240\u9700\u7684\u5927\u5c0f\u4e00\u6837\u591a--\u8bbf\u95ee\u5176\u4e2d\u9501\u5b9a\u7684\u6570\u636e\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u4f7f\u7528\u63a7\u5236\u53f0\u7684\u201c\u6062\u590dPS5\u201d\u9009\u9879\u3002\n\u5982\u679c\u5bf9\u8fd9\u4e00\u529f\u80fd\u63cf\u8ff0\u4e0d\u80fd\u6d88\u9664\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u4ee3\u66ff\u7d22\u5c3c\u4e91\u5b58\u50a8\u7684\u60f3\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e00\u70b9\u5f88\u53ef\u80fd\u4f1a\u6d88\u9664\u4f60\u7684\u7591\u8651\uff0c\u5373\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u4ee3\u66ff\u7d22\u5c3c\u7684\u4e91\u5b58\u50a8\u3002\n\u201c\u5f53\u4f60\u5f00\u59cb\u6062\u590d\u65f6\uff0c\u4f60\u7684PS5\u5c06\u88ab\u91cd\u7f6e\u4e3a\u51fa\u5382\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u6240\u6709\u7528\u6237\u548c\u6240\u6709\u6570\u636e\u90fd\u5c06\u88ab\u5220\u9664\uff0c\u201d\u7d22\u5c3c\u5728\u6062\u590d\u8fc7\u7a0b\u5f00\u59cb\u524d\u8b66\u544a\u8bf4\u3002\u4e4b\u540e\uff0c\u5c06\u4f7f\u7528\u5907\u4efd\u6570\u636e\u6062\u590d\u60a8\u7684PS5\u3002\n\u4ece\u5907\u4efd\u4e2d\u6062\u590dPS5\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u52a8\u4f5c\uff0c\u6bd4\u5982\u8bf4\uff0c\u5c06\u4fdd\u5b58\u7684\u6587\u4ef6\u4ece\u5b58\u6863\u590d\u5236\u56de\u63a7\u5236\u53f0\u7684\u5185\u90e8\u56fa\u6001\u786c\u76d8\u3002\u4efb\u4f55\u65f6\u5019\u4f60\u8fdb\u884c\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u4f60\u90fd\u5c06\u4ece\u5934\u5f00\u59cb\u3002\u6240\u4ee5\uff0c\u662f\u7684\uff0c\u62e5\u6709PS5\u5185\u7f6e\u5907\u4efd\u5de5\u5177\u7684\u5907\u4efd\u6863\u6848\u603b\u6bd4\u6ca1\u6709\u5907\u4efd\u8981\u597d\u3002\u4f46\u8fd9\u4e00\u8fc7\u7a0b\u975e\u5e38\u8d39\u529b\uff0c\u5bf9\u4e8e\u7d22\u5c3c\u7981\u6b62PS5\u7528\u6237\u7b80\u5355\u5730\u5c06PS5\u4fdd\u5b58\u6570\u636e\u590d\u5236\u5230U\u76d8\u800c\u9020\u6210\u7684\u95ee\u9898\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u73b0\u5b9e\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u66f4\u65b0\uff1a\u6211\u4eec\u5728\u672c\u6587\u4e2d\u6dfb\u52a0\u4e86\u6709\u5173PS5\u5185\u7f6e\u5907\u4efd\u548c\u6062\u590d\u5de5\u5177\u7684\u4fe1\u606f\u3002", "note_en": "At the moment, the PlayStation 5 doesn\u2019t support copying save data onto external storage devices. Instead, the console\u2019s only option for moving save files from one PS5 to another, or backing up save data, is to use Sony\u2019s cloud storage \u2014 which is available exclusively to PlayStation Plus subscribers.\n This is different from how it works on PlayStation 4, which allows users to back up save data to a USB drive as well as cloud storage. Without that option, PS5 owners are at risk of losing their save files if some catastrophe befalls them \u2014 like their console getting stolen in a robbery, or destroyed in a flood, or bricked by a firmware update \u2014 unless they pay for an active PlayStation Plus subscription.\n The PS4/PS5 difference becomes clear in the PS5\u2019s system settings. In the \u201cSaved Data and Game/App Settings\u201d page of the menu, there\u2019s a section labeled \u201cSaved Data (PS4).\u201d There, players can choose to copy PS4 save files to a USB drive or Sony\u2019s cloud storage, or delete those files from the console. The other option is to change the way that the PS5 handles the automatic upload of PS4 save data to cloud storage.\n   However, the \u201cSaved Data (PS5)\u201d menu lacks the \u201cUSB Drive\u201d option. Instead, the only things to do with PS5 save files are to manually copy them from the console\u2019s internal storage to Sony\u2019s cloud storage, or to delete them.\n   If you click \u201cConsole Storage\u201d on this page, you\u2019ll get to a screen that offers just two options: \u201cUpload to Cloud Storage\u201d and \u201cDelete.\u201d The former has a PlayStation Plus logo next to it \u2014 which means it\u2019s restricted to subscribers.\n   While cloud storage is certainly nice, and likely to be the way that the majority of PS5 users back up their save data, a few things make it inconvenient. Aside from the fact that PS5 save backup is locked behind the PlayStation Plus paywall, cloud saves require network connections to access. That leaves players out of luck if their internet goes down, whereas they\u2019d be able to restore save files from local storage if they could back them up to it. We\u2019ve asked Sony about why this is the case on PS5, and we\u2019ll update this article with any information we receive.\n Of course, this is the way Nintendo handles save files on the Nintendo Switch \u2014 users can back them up to cloud storage  only if they pay for a Nintendo Switch Online subscription. (When the console launched in early 2017,  it didn\u2019t even have that feature.) Meanwhile, Microsoft offers free cloud saves on Xbox One (and  they\u2019ll soon be free on Xbox 360, too).\n  It\u2019s worth noting that PS5 save data isn\u2019t the only thing that the PS5 won\u2019t let you transfer to a USB device. The console also blocks players from moving entire PS5 games to external storage. While it\u2019s no surprise that players can\u2019t play those games from external storage,  given the speed requirements of the PS5\u2019s internal SSD, it is a little surprising that Sony won\u2019t let players use external USB drives as \u201ccold storage\u201d to free up space on the SSD without having to re-download games.\n Now, we should also note that the PS5  does offer system backup/restore functionality, like the PS4 does. But this simply isn\u2019t a viable option for regularly backing up PS5 save data \u2014 it\u2019s designed to function like recovery software on a computer, akin to System Restore on Windows or Time Machine on Mac OS.\n Accessible from the \u201cSystem Software\u201d section of the PS5 settings\u2019 System page, the console\u2019s \u201cBack Up and Restore\u201d function says that it allows you to \u201cback up games, apps, and data in console storage to a USB drive.\u201d That\u2019s technically true, but this method doesn\u2019t simply copy save files (or installed PS5 games, or any other data) in their original, usable formats to external storage. What it does is create a compressed archive containing the data in question for export to a USB drive. Only a PS5 can read this backup archive \u2014 which gets split into as many 3.99 GB chunks as the size of the backup requires \u2014 and the only way to access the data locked within it is to use the console\u2019s \u201cRestore PS5\u201d option.\n   In case that description of this feature didn\u2019t disabuse you of the notion that you could use it in lieu of Sony\u2019s cloud storage, this probably will.\n \u201cWhen you start restoring, your PS5 will be reset to factory defaults, and all users and all data will be deleted,\u201d Sony warns right before the beginning of the restore process. \u201cAfter that, your PS5 will be restored using the backup data.\u201d\n Restoring your PS5 from backup isn\u2019t a simple act of, say, copying save files from the archive back to the console\u2019s internal SSD. Any time you undertake this process, you\u2019ll be starting from scratch. So yes, having a backup archive from the PS5\u2019s built-in backup tool would be preferable to having no backup at all. But the process is so laborious that it\u2019s not a realistic solution for a problem Sony has created by prohibiting PS5 owners from simply copying PS5 save data to a USB stick.\n Update: We\u2019ve added information about the PS5\u2019s built-in backup and recovery tools to this article.", "posttime": "2020-11-07 11:09:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "playstation,save,ps5", "title": "PS5\u4fdd\u5b58\u6587\u4ef6\u53ea\u80fd\u6709\u6548\u5730\u5907\u4efd\u5230PlayStation Plus\u4e91", "title_en": "PS5 save files can effectively only be backed up to Playstation Plus cloud", "transed": 1, "url": "https://www.polygon.com/2020/11/6/21551875/ps5-save-data-backup-cloud-usb-storage", "via": "", "real_tags": ["save", "ps5"]}, {"category": "", "categoryclass": "", "imagename": "52bcc4c7153485756a5bb6dfd55a5705.png", "infoid": 1033598, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1757\u5e74\u7684\u4e00\u5929\uff0c\u8bd7\u4eba\u514b\u91cc\u65af\u6258\u5f17\u00b7\u65af\u9a6c\u7279(Christopher Smart)\u6765\u5230\u5723\u8a79\u59c6\u65af\u516c\u56ed(St James\u2018s Park)\uff0c\u5f00\u59cb\u5927\u58f0\u7948\u7977\uff0c\u505c\u4e0d\u4e0b\u6765\u3002\u4ed6\u88ab\u5e26\u5230\u5723\u5362\u514b\u7cbe\u795e\u75c5\u9662\uff0c\u5728\u90a3\u91cc\u72c2\u559c\u7684\u8bd7\u53e5\u4ece\u4ed6\u90a3\u91cc\u503e\u6cfb\u800c\u51fa\uff0c\u4ed6\u5728\u8bd7\u4e2d\u8ba4\u51fa\u4e86\u4ed6\u7684\u732b\u4f34\u4e54\u5f17\u91cc\uff0c\u4ed6\u8bf4\u4ed6\u662f\u201c\u6c38\u751f\u795e\u7684\u4ec6\u4eba\u201d\u3002\u6839\u636e\u65af\u9a6c\u7279\u9ad8\u5174\u7684\u6e05\u5355\uff0c\u6770\u5f17\u91cc\u4e3a\u5168\u80fd\u7684\u4e0a\u5e1d\u670d\u52a1\uff0c\u6293\u8001\u9f20\uff0c\u4fdd\u6301\u4ed6\u7684\u524d\u722a\u7279\u522b\u5e72\u51c0\uff0c\u5e76\u89c2\u5bdf\u591c\u91cc\u7684\u503c\u73ed\u3002\u4ed6\u4e5f\u662f\u4e00\u4e2a\u5e73\u548c\u7684\u7075\u9b42\uff0c\u4eb2\u543b\u90bb\u5c45\u7684\u732b\uff0c\u201c\u53cb\u5584\u5730\u201d\uff0c\u8ba9\u8001\u9f20\u9003\u8131\u6bcf\u4e03\u6b21\u4e2d\u5c31\u6709\u4e00\u6b21\u3002\u4f46\u4e5f\u8bb8\u6770\u5f17\u91cc\u6700\u5927\u7684\u6210\u5c31\u662f\u4ed6\u80fd\u201c\u6447\u6447\u6643\u6643\u5730\u56db\u80a2\u5f20\u5f00\u201d\u3002\u65af\u9a6c\u7279\u7684\u5947\u5999\u4e4b\u5904\u8868\u660e\uff0c\u5f20\u5f00\u56db\u80a2\u548c\u6447\u6446\u6446\u52a8\u90fd\u6df1\u6df1\u5730\u53d6\u60a6\u4e86\u4e0a\u5e1d\u3002\n\u867d\u7136\u6770\u5f17\u91cc\u56e0\u65af\u9a6c\u7279\u7684\u8bd7\u96c6\u300a\u6211\u7684\u732b\u6770\u5f17\u91cc\u300b\u800c\u6210\u540d\uff0c\u4f46\u4ed6\u5e76\u6ca1\u6709\u5728\u5386\u53f2\u8bb0\u5f55\u4e0a\u7559\u4e0b\u5176\u4ed6\u68cb\u5b50\u7684\u5370\u8bb0\u3002\u6211\u4eec\u4e0d\u77e5\u9053\u65af\u9a6c\u7279\u662f\u600e\u4e48\u627e\u5230\u4ed6\u7684\uff0c\u4e5f\u4e0d\u77e5\u9053\u4ed6\u662f\u600e\u4e48\u627e\u5230\u65af\u9a6c\u7279\u7684\u3002\u8fd9\u4f4d\u8bd7\u4eba\u4e8e1763\u5e74\u83b7\u91ca\uff0c\u91cd\u65b0\u5f00\u59cb\u4e86\u4ed6\u5728\u683c\u9c81\u5e03\u8857\u7684\u751f\u6d3b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5251\u6865\u5f6d\u5e03\u7f57\u514b\u5b66\u9662\u7684\u524d\u7814\u7a76\u5458\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u8870\u843d\uff0c\u4e5f\u4e0d\u786e\u5b9a\u4ed6\u540e\u6765\u600e\u4e48\u6837\u4e86\u3002\u6b63\u662f\u8fd9\u4e00\u5dee\u8ddd\uff0c\u5965\u5229\u5f17\u00b7\u7d22\u767b(Oliver Soden)\u5f00\u59cb\u8865\u5145\u4ed6\u4ee4\u4eba\u6109\u5feb\u7684\u6770\u5f17\u91cc(Jeoffry)\u4f20\u8bb0\u3002\u7d22\u767b\u8ba4\u4e3a\u4e54\u83f2\u662f\u94c1\u9508\u8272\u7684\u3002\u4ed6\u4ece\u8003\u6587\u7279\u82b1\u56ed\u7684\u4e00\u5bb6\u5993\u9662\u5f00\u59cb\uff0c\u5728\u90a3\u91cc\u4ed6\u82b1\u4e86\u5341\u5929\u7684\u65f6\u95f4\u5728\u5730\u677f\u4e0a\u8ffd\u9010\u7528\u8fc7\u7684\u907f\u5b55\u5957\uff0c\u907f\u514d\u5c3f\u58f6\uff0c\u60ca\u8bb6\u4e8e\u4ed6\u8e72\u5728\u5e8a\u4e0b\u6563\u53d1\u51fa\u7684\u8089\u5473\uff0c\u800c\u4ed6\u7684\u60c5\u5987\u5357\u5e0c\u00b7\u5df4\u7f57\u65af(Nancy Burroughs)\u5219\u987d\u5f3a\u5730\u5904\u7406\u7740\u5979\u7684\u4e8b\u52a1\u3002\u8fd9\u79cd\u80cc\u666f\u7ed9\u4e86\u7d22\u767b\u4e00\u4e2a\u7edd\u4f73\u7684\u673a\u4f1a\uff0c\u4e3a\u5a01\u5ec9\u00b7\u970d\u52a0\u65af(William Hogarth)\u7684\u7248\u753b\u7684\u9ed1\u767d\u4e16\u754c\u63d0\u4f9b\u8272\u5f69\uff0c\u8fd9\u4e2a\u4e16\u754c\u662f\u6c61\u79fd\u4e0e\u6df7\u4e71\u3001\u6cd5\u5f8b\u4e0e\u6df7\u4e71\u3001\u9053\u5fb7\u4e0e\u9053\u5fb7\u8870\u843d\u7684\u6df7\u4e71\u4e4b\u5904\u3002\u4ed6\u751a\u81f3\u7ffb\u9605\u4e86\u54c8\u91cc\u65af\u76841761\u5e74\u8003\u6587\u7279\u82b1\u56ed\u5973\u58eb\u540d\u5355\uff0c\u7ed9\u4e86\u5357\u5e0c\u4e00\u4e2a\u80cc\u666f\u6545\u4e8b\uff1a\u5979\u5f88\u4e11\uff0c\u4e3b\u8981\u662f\u548c\u8001\u670b\u53cb\u505a\u751f\u610f\u7684\u5546\u4eba\uff0c\u4e13\u95e8\u5356\u6866\u6811\u3002\n\u7d22\u767b\u8fd8\u5c0f\u5fc3\u7ffc\u7ffc\u5730\u878d\u5165\u4e8618\u4e16\u7eaa\u7684\u6bcf\u4e00\u4e2a\u8457\u540d\u7684\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u732b\u6545\u4e8b\uff0c\u5373\u4f7f\u8fd9\u610f\u5473\u7740\u8981\u8fdb\u884c\u53d9\u4e8b\u6027\u7684\u6f2b\u6b65\u3002\u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u542c\u5230\u4e86\u970d\u52d2\u65af\u00b7\u6c83\u5c14\u6ce2\u5c14\u7b14\u4e0b\u7684\u732b\u00b7\u585e\u5229\u739b\u7684\u6545\u4e8b\uff0c\u4ed6\u57281747\u5e74\u6389\u8fdb\u91d1\u9c7c\u7f38\u6eba\u6c34\u8eab\u4ea1\uff0c\u540e\u6765\u6258\u9a6c\u65af\u00b7\u683c\u96f7\u5728\u300a\u5ba0\u7269\u732b\u9882\u300b\u4e2d\u590d\u6d3b\u4e86\u3002\u6211\u4eec\u8fd8\u8d76\u5230\u4e86\u7ea6\u7ff0\u900a\u535a\u58eb\u7684\u5bb6\uff0c\u770b\u5230\u8fd9\u4f4d\u4f1f\u5927\u7684\u8bcd\u5178\u7f16\u7e82\u8005\u5411\u4ed6\u7684\u5149\u6ed1\u3001\u9ed1\u6697\u7684\u970d\u5947\u4fdd\u8bc1\u8bf4\uff0c\u4ed6\u786e\u5b9e\u662f\u4e00\u53ea\u975e\u5e38\u597d\u7684\u732b\u3002\n\u6587\u5b66\u5178\u6545\u4e0d\u6b62\u4e8e\u6b64\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7d22\u767b\u7684\u6574\u672c\u4e66\u90fd\u662f\u5bf9\u540c\u82b1\u987a\u7684\u575a\u5b9a\u81f4\u656c\uff0c\u8fd9\u662f\u4e00\u672c\u5173\u4e8e\u4f0a\u4e3d\u838e\u767d\u00b7\u5df4\u96f7\u7279\u00b7\u5e03\u6717\u5b81(Elizabeth Barrett Browning)\u730e\u72ac\u7684\u865a\u6784\u4f20\u8bb0\uff0c\u5f17\u5409\u5c3c\u4e9a\u00b7\u4f0d\u5c14\u592b(Virginia Woolf)\u57281933\u5e74\u7528\u8fd9\u4f4d\u8bd7\u4eba\u7684\u4fe1\u4ef6\u4e2d\u77ed\u6682\u7684\u9732\u9762\u7f16\u9020\u4e86\u8fd9\u90e8\u4f20\u8bb0\u3002\u5c31\u50cf\u4f0d\u5c14\u592b\u4e00\u6837\uff0c\u7d22\u767b\u5229\u7528\u4ed6\u7684\u52a8\u7269\u4e3b\u4eba\u516c\u4ece\u79bb\u5730\u976218\u82f1\u5bf8\u7684\u5730\u65b9\u91cd\u65b0\u60f3\u8c61\u4e16\u754c\u3002\u5728\u4e00\u4e2a\u7279\u522b\u597d\u7684\u732b\u773c\u89c6\u89d2\u4e2d\uff0c\u7d22\u767b\u8ba9\u6770\u5f17\u91cc\u901a\u8fc7\u5c0f\u817f\u7684\u5f62\u72b6\u6765\u533a\u5206\u65af\u9a6c\u7279\u7684\u907f\u96be\u6240\u8bbf\u5ba2\uff1a\u4ed6\u80fd\u591f\u533a\u5206\u7ea6\u7ff0\u900a\u535a\u58eb\u9f13\u8d77\u7684\u5c0f\u817f\u548c\u8e52\u8dda\u7684\u811a\uff0c\u4ee5\u53ca\u67e5\u5c14\u65af\u00b7\u4f2f\u5c3c(Charles Burney)\u66f4\u6709\u5f39\u6027\u7684\u56db\u80a2\u3002\u5f53\u5927\u536b\u00b7\u52a0\u91cc\u514b(David Garrick)\u5230\u8fbe\u65f6\uff0c\u6770\u5f17\u91cc\u901a\u8fc7\u6f14\u5458\u620f\u5267\u6027\u7684\u98a4\u97f3\u79fb\u52a8\u5c0f\u7262\u623f\u91cc\u7684\u7a7a\u6c14\u7684\u65b9\u5f0f\u8ba4\u51fa\u4e86\u4ed6\u3002\u6bd5\u7adf\uff0c\u8fd9\u5c31\u662f\u80e1\u987b\u7684\u7528\u9014\u3002\n\u300a\u6211\u7684\u732b\u6770\u5f17\u91cc\u300b\u662f\u4e00\u9996\u540d\u4e3a\u300a\u6b22\u5e86\u963f\u683c\u8bfa\u300b(Jubilate Agno)\u7684\u957f\u5f97\u591a\u7684\u8bd7\u6b4c\u5e8f\u5217\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u88ab\u6401\u7f6e\u4e86\u8fd1\u4e24\u4e2a\u4e16\u7eaa\uff0c\u76f4\u52301938\u5e74\u7531T\u00b7S\u00b7\u827e\u7565\u7279(T S Eliot)\u62c5\u4efb\u7f16\u8f91\u53d1\u8868\u5728\u300a\u6807\u51c6\u300b(The Critarion)\u4e0a\u3002\u739b\u4e3d\u00b7\u76d6\u8328\u57fa\u5c14\u7684\u957f\u7bc7\u6563\u6587\u300a\u8ff7\u5931\u7684\u732b\u300b(Lost Cat)\u4e5f\u8d70\u4e0a\u4e86\u4e00\u6761\u7c7b\u4f3c\u7684\u66f2\u6298\u9053\u8def\uff0c\u8fd9\u672c\u4e66\u5df2\u7ecf\u6709\u4e86\u76f8\u5f53\u591a\u7684\u751f\u547d\uff0c\u5982\u679c\u4e0d\u662f\u786e\u5207\u76849\u6761\u751f\u547d\u7684\u8bdd\u3002\u8be5\u4e66\u4e8e2009\u5e74\u5728\u683c\u5170\u5854\u9996\u6b21\u51fa\u7248\uff0c\u968f\u540e\u57282017\u5e74\u6210\u4e3a\u8fd9\u4f4d\u7f8e\u56fd\u5c0f\u8bf4\u5bb6\u975e\u865a\u6784\u7c7b\u4f5c\u54c1\u96c6\u7684\u4e3b\u89d2\u3002\u73b0\u5728\u53c8\u6765\u4e86\uff0c\u8fd9\u4e00\u6b21\u5b8c\u5168\u662f\u72ec\u81ea\u65c5\u884c\uff0c\u5f53\u7136\uff0c\u8fd9\u6b63\u662f\u6bcf\u4e00\u53ea\u6709\u81ea\u5c0a\u7684\u732b\u90fd\u559c\u6b22\u7684\u3002\n\u300a\u8ff7\u5931\u7684\u732b\u300b\u8bb2\u8ff0\u4e86\u76d6\u8328\u57fa\u5c14\u5728\u5931\u53bb\u52a0\u8482\u8bfa\u540e\u7684\u8fc7\u5ea6\u53cd\u5e94\u3002\u52a0\u8482\u8bfa\u662f\u4e00\u53ea\u72ec\u773c\u7684\u5c0f\u732b\uff0c\u5979\u4ece\u610f\u5927\u5229\u6551\u4e86\u5b83\uff0c\u82b1\u4e86\u5f88\u5927\u7684\u4ee3\u4ef7\u628a\u5b83\u5e26\u56de\u4e86\u5979\u5728\u65b0\u82f1\u683c\u5170\u7684\u519c\u820d\u3002\u4e00\u5929\u665a\u4e0a\uff0c\u52a0\u8482\u8bfa\u5927\u6447\u5927\u6446\u5730\u8d70\u8fdb\u4e86\u51b0\u51b7\u7684\u98ce\u666f\uff0c\u8ba9\u76d6\u8328\u57fa\u5c14\u53d8\u5f97\u8d8a\u6765\u8d8a\u7cbe\u795e\u9519\u4e71--\u5982\u679c\u662f\u5728\u4e24\u4e2a\u4e16\u7eaa\u4e4b\u524d\uff0c\u5979\u5c31\u4f1a\u88ab\u9001\u8fdb\u7cbe\u795e\u75c5\u9662\u3002\u5979\u5728\u7eaf\u51c0\u7684\u96ea\u5730\u4e0a\u7559\u4e0b\u4e86\u6d78\u6ce1\u5c3f\u6db2\u7684\u732b\u7802\u7684\u75d5\u8ff9\uff0c\u5e0c\u671b\u52a0\u8482\u8bfa\u80fd\u95fb\u5230\u6c14\u5473\uff0c\u7136\u540e\u9003\u56de\u5bb6\u3002\u5979\u54a8\u8be2\u4e86\u6602\u8d35\u7684\u901a\u7075\u5e08\uff0c\u8fd9\u4e9b\u7075\u5a92\u544a\u8bc9\u5979\uff0c\u5c0f\u732b\u5e73\u9759\u5730\u6b7b\u53bb\u4e86\uff0c\u4ed6\u5728\u75db\u82e6\u4e2d\u53bb\u4e16\u4e86\u3002\u5728\u4e61\u6751\u591c\u665a\u7684\u6bcf\u4e00\u6b21\u6572\u95e8\u58f0\u548c\u6c99\u6c99\u58f0\u4e2d\uff0c\u5979\u90fd\u89c9\u5f97\u81ea\u5df1\u542c\u5230\u4e86\u4ed6\u7684\u547c\u5524\u3002\n\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u75af\u72c2\u7684\u732b\u5973\u6545\u4e8b\u3002\u5728\u60b2\u4f24\u7684\u6563\u6587\u4e2d\uff0c\u76d6\u8328\u57fa\u5c14\u68b3\u7406\u4e86\u4e3a\u4ec0\u4e48\u5979\u4f1a\u56e0\u4e3a\u5931\u53bb\u732b\u800c\u5d29\u6e83\uff0c\u8fd9\u7edd\u5bf9\u662f\u4e0e\u65af\u9a6c\u7279\u7684\u6731\u6bd4\u5229\u4e9a\u00b7\u963f\u683c\u8bfa(Jubilate Agno)\u76f8\u53cd\u7684\u3002\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u5979\u6ca1\u80fd\u63a5\u53d7\u7236\u4eb2\u51e0\u5e74\u524d\u53bb\u4e16\u7684\u4e8b\u5b9e--\u53bb\u5904\u7406\u5931\u53bb\u4e00\u4f4d\u542c\u8d77\u6765\u50cf\u662f\n\u6b63\u662f\u8fd9\u79cd\u7edd\u5bf9\u7684\u6743\u5229\u611f\uff0c\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u5728\u5386\u53f2\u4e0a\uff0c\u6bcf\u5f53\u6587\u660e\u5728\u5bfb\u627e\u65b9\u4fbf\u7684\u4e1c\u897f\u6765\u8868\u8fbe\u4e0d\u6ee1\u65f6\uff0c\u732b\u90fd\u4f1a\u6210\u4e3a\u9996\u9009\u5bf9\u8c61\u3002\u6bcf\u5f53\u72c2\u6b22\u8282\u7684\u4eba\u7fa4\u5728\u711a\u70e7\u4e00\u53ea\u732b\u4e4b\u524d\u628a\u5b83\u6253\u626e\u6210\u6559\u7687\u7684\u6837\u5b50\uff0c\u6216\u8005\u9189\u9152\u7684\u5b66\u5f92\u4eec\u5728\u9547\u4e0a\u6a2a\u51b2\u76f4\u649e\u52d2\u6b7b\u6d41\u6d6a\u72d7\uff0c\u6216\u8005\u5973\u4f63\u5728\u6355\u9f20\u4eba\u7684\u60c5\u5987\u770b\u4e0d\u5230\u7684\u65f6\u5019\u8e22\u4e86\u5979\u4e00\u811a\uff0c\u4ed6\u4eec\u90fd\u662f\u5728\u8868\u8fbe\u5bf9\u8fd9\u79cd\u62d2\u7edd\u81ea\u6211\u611f\u89c9\u4e0d\u4f73\u7684\u751f\u7269\u7684\u6df1\u6df1\u7fa1\u6155\u3002\u683c\u96f7\u8868\u793a\uff0c\u732b\u843d\u5165\u574f\u4eba\u624b\u4e2d\u662f\u5982\u6b64\u4ee4\u4eba\u6124\u6012\uff0c\u56e0\u4e3a\u4e0e\u72d7\u4e0d\u540c\uff0c\u732b\u6c38\u8fdc\u4e0d\u4f1a\u964d\u5230\u6211\u4eec\u7684\u6c34\u5e73\u3002\n\u683c\u96f7\u603b\u7ed3\u9053\uff0c\u5982\u679c\u6211\u4eec\u90fd\u80fd\u8bd5\u7740\u53d8\u5f97\u66f4\u50cf\u732b\u4e00\u70b9\uff0c\u6211\u4eec\u5c31\u4f1a\u5feb\u4e50\u5f97\u591a\u3002\u6216\u8005\u81f3\u5c11\u4e0d\u90a3\u4e48\u4e0d\u5f00\u5fc3\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6211\u4eec\u5e94\u8be5\u5c1d\u8bd5\u8214\u81ea\u5df1\u7684\u5c41\u80a1(\u65e0\u8bba\u5982\u4f55\uff0c\u9664\u975e\u4f60\u975e\u5e38\u64c5\u957f\u745c\u4f3d\uff0c\u5426\u5219\u5bf9\u4e8e\u56db\u5341\u591a\u5c81\u7684\u4eba\u6765\u8bf4\u662f\u5f88\u68d8\u624b\u7684)\u3002\u4e0d\u8fc7\uff0c\u8fd9\u786e\u5b9e\u610f\u5473\u7740\u8981\u610f\u8bc6\u5230\uff0c\u4e0e\u5176\u89c9\u5f97\u81ea\u5df1\u4e0d\u5f97\u4e0d\u7231\u522b\u4eba\uff0c\u4e0d\u5982\u5bf9\u522b\u4eba\u6f20\u4e0d\u5173\u5fc3\u3002\u683c\u96f7\u8bf4\uff1a\u201c\u4e00\u4e9b\u7406\u60f3\u6bd4\u666e\u4e16\u7684\u7231\u66f4\u6709\u5bb3\u3002\u201d\u683c\u96f7\u7684\u8bed\u6c14\u542c\u8d77\u6765\u5c31\u50cf\u4e00\u53ea\u7279\u522b\u66b4\u8e81\u7684\u4e4c\u9f9f\uff0c\u4e00\u76f4\u5728\u7b49\u5f85\u4ed6\u7684\u83f2\u5229\u514b\u65af(Felix)\u3002", "note_en": "One day in 1757 the poet Christopher Smart went out to St James\u2019s Park, started praying loudly and couldn\u2019t stop. He was hauled off to St Luke\u2019s Asylum, where a cascade of ecstatic verse proceeded to pour from him, in which he identified his cat companion, Jeoffry, as \u2018the servant of the Living God\u2019. According to Smart\u2019s delighted itemising, Jeoffry served the Almighty by catching rats, keeping his front paws pernickety clean and observing the watches of the night. He was a peaceable soul too, kissing neighbouring cats \u2018in kindness\u2019 and letting a mouse escape one time in seven. But perhaps Jeoffry\u2019s greatest accomplishment was his ability to \u2018spraggle upon waggle\u2019. Both spraggling and waggling, Smart\u2019s magnificat suggests, are deeply pleasing to the Lord.\n Although Jeoffry has become famous through Smart\u2019s much-anthologised poem \u2018My Cat Jeoffry\u2019, he has left no other pawprint on the historical record. We don\u2019t know how Smart found him, or how he found Smart. Nor is it certain what became of him after the poet was released in 1763 and restarted his life as a denizen of Grub Street, a huge comedown for a one-time fellow of Pembroke College, Cambridge. It is this gap that Oliver Soden proceeds to plug in his delightful \u2018biography\u2019 of Jeoffry. Soden decides that Jeoffry is rust-coloured. He starts him off in a Covent Garden brothel, where he spends his kitten days chasing used condoms across the floor, avoiding piss pots and wondering at the meaty smells emanating from the bed under which he crouches while his mistress, Nancy Burroughs, doggedly transacts her business. This setting gives Soden the perfect chance to provide colour to the black-and-white world of William Hogarth\u2019s prints, a riotous jumble of muck and mayhem, law and disorder, moral and amoral decline. He even rifles through  Harris\u2019s List of Covent Garden Ladies for 1761 to give Nancy a back story: she is \u2018very ugly; chiefly a dealer with old fellows\u2019 who specialises in the birch.\n Soden also takes care to incorporate every well-known real-life cat story from the 18th century, even when it means going on narrative walkabout. So we are told about Horace Walpole\u2019s tabby Selima, who in 1747 topples into a goldfish bowl and drowns, only to be resurrected by Thomas Gray in \u2018Ode on the Death of a Favourite Cat\u2019. We also zoom over to Dr Johnson\u2019s house to see the Great Lexicographer assuring his sleek darkling Hodge that he is \u2018a very fine cat indeed\u2019.\n The literary allusions don\u2019t stop there. Indeed, the whole of Soden\u2019s book is a determined homage to  Flush, an imaginary biography of Elizabeth Barrett Browning\u2019s spaniel that Virginia Woolf concocted in 1933 out of his fleeting appearances in the poet\u2019s letters. Just like Woolf, Soden uses his animal protagonist to reimagine the world from eighteen inches above the ground. In a particularly fine evocation of a cat\u2019s-eye view, Soden has Jeoffry distinguish Smart\u2019s asylum visitors from each other by the shape of their lower legs: he is able to tell apart the bulging calves and hobbled feet of Dr Johnson and the more springy limbs of Charles Burney. When David Garrick arrives, Jeoffry recognises him from the way the actor\u2019s theatrical vibrato moves the air in the little cell. It is, after all, what whiskers are for.\n \u2018My Cat Jeoffry\u2019, which is a fragment of a much longer poetic sequence called  Jubilate Agno, lay unregarded for nearly two centuries until it was published in  The  Criterion under the editorship of T S Eliot in 1938. A similarly winding path has been taken by Mary Gaitskill\u2019s extended essay  Lost Cat, which has had, if not exactly nine lives, then quite a few already. Published first in 2009 in  Granta, it then appeared as the lead piece in a collection of the American novelist\u2019s nonfiction in 2017. Now here it is again, this time travelling quite alone, which, of course, is exactly how every self-respecting cat prefers it.\n Lost Cat deals with what seems like Gaitskill\u2019s excessive reaction to losing Gattino, a little one-eyed cat whom she has rescued from Italy and brought back to her New England farmhouse at great trouble and expense. One night Gattino stalks off into the bone-freezing landscape, leaving Gaitskill reduced to increasingly demented behaviour \u2013 the sort of thing that, two centuries earlier, would have had her admitted to the asylum. She leaves trails of urine-soaked cat litter over the pristine snow in the hope that Gattino might pick up the scent and scuttle back home. She consults expensive psychics who tell her both that the little cat died peacefully and that he passed away in agony. With every knock and rustle of the rural night she thinks she hears him calling.\n This is not just some crazy-cat-lady story. In disconsolate prose, an absolute counterpoint to Smart\u2019s  Jubilate Agno, Gaitskill teases out why she has become undone by the loss of her cat. It could be her failure to absorb the death of her father several years earlier \u2013 to deal with the loss of a man who sounds distinctly tricky. Or perhaps it is to do with the more recent struggles she has faced in fostering two children, Caesar and Natalia, from the inner city. Initially they seem to flourish under the novelty of Gaitskill\u2019s interest, enjoying a generous supply of tutors, riding lessons and trips to summer camp. But then they pull away, as if wanting to punish her for her foolish fondness, just as Gattino seems equally indifferent to the superhuman efforts she has made on his behalf.\n That, though, is the way of cats according to the philosopher John Gray, who references both Jeoffry and Gattino in his magnificent  Feline Philosophy. Cats, argues Gray, are not burdened by self-consciousness, which leaves them free to be magnificently themselves. They live in a world of materiality \u2013 of cushions, mice, hunger and heated blankets \u2013 and adjust themselves accordingly. If something doesn\u2019t suit them, they move on and find something better. They are not being unkind and they have no sense of wanting to punish an owner who has failed to come up with the goods. But they follow the beat of their own  conatus, a term Spinoza used to suggest a kind of inner drive to live the life that suits you best, even if that means bringing up fur balls on the carpet at four o\u2019clock in the morning.\n It is this absolute sense of entitlement that explains why the cat has historically been the object of choice whenever civilisation went looking for something handy onto which to project its discontents. Every time a carnival crowd dressed up a cat as the pope before torching it, or drunken \u2019prentice lads rampaged through the town strangling strays, or a housemaid kicked the resident mouse-catcher when her mistress wasn\u2019t looking, they were expressing profound envy of a creature that refused to feel bad about itself. Cats are so enraging in the wrong hands, suggests Gray, because, unlike dogs, they never descend to our level.\n If only, Gray concludes, we could all try to be a bit more catlike we would be so much happier. Or at least less unhappy. This doesn\u2019t mean, mercifully, that we should try licking our own bottoms (tricky, anyway, for the over-forties unless you\u2019re very good at yoga). It does mean realising, though, that it is better to be indifferent to others than to feel you have to love them. \u2018Few ideals\u2019, suggests Gray, sounding like a particularly grumpy tortoiseshell who has been kept waiting for his Felix, \u2018have been more harmful than that of universal love.\u2019", "posttime": "2020-11-07 11:09:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u732b\u79d1\u52a8\u7269,hooked,\u7d22\u767b", "title": "\u6302\u5728\u732b\u79d1\u52a8\u7269\u8eab\u4e0a", "title_en": "Hooked on a Feline", "transed": 1, "url": "https://literaryreview.co.uk/hooked-on-a-feline", "via": "", "real_tags": ["\u732b\u79d1\u52a8\u7269", "hooked", "\u7d22\u767b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1033597, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u5bb6\u8f6f\u4ef6\u516c\u53f8\u7684\u4e3b\u7ba1\u8ba4\u4e3a\uff0c\u7528\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00(HTML)\u547d\u540d\u4f1a\u5f88\u6709\u8da3\u3002\n\u516c\u53f8\u4e4b\u5bb6(Companies House)\u8feb\u4f7f\u4e00\u5bb6\u516c\u53f8\u66f4\u540d\uff0c\u6b64\u524d\u8be5\u516c\u53f8\u59d7\u59d7\u6765\u8fdf\u5730\u610f\u8bc6\u5230\u8fd9\u53ef\u80fd\u4f1a\u5e26\u6765\u5b89\u5168\u98ce\u9669\u3002\n\u8fd9\u5bb6\u516c\u53f8\u73b0\u5728\u5728\u6cd5\u5f8b\u4e0a\u88ab\u79f0\u4e3a\u201c\u90a3\u5bb6\u516c\u53f8\uff0c\u5b83\u7684\u540d\u5b57\u66fe\u7ecf\u5305\u542bHTML\u811a\u672c\u6807\u7b7e\u6709\u9650\u516c\u53f8\u201d\u662f\u7531\u4e00\u4f4d\u82f1\u56fd\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u521b\u5efa\u7684\uff0c\u4ed6\u8bf4\u4ed6\u8fd9\u6837\u505a\u7eaf\u7cb9\u662f\u56e0\u4e3a\u4ed6\u8ba4\u4e3a\u8fd9\u4f1a\u662f\u4ed6\u7684\u54a8\u8be2\u4e1a\u52a1\u7684\u201c\u4e00\u4e2a\u6709\u8da3\u7684\u6709\u8da3\u7684\u540d\u5b57\u201d\u3002\n\u4ed6\u73b0\u5728\u8bf4\uff0c\u4ed6\u6ca1\u6709\u610f\u8bc6\u5230Companies House\u5b9e\u9645\u4e0a\u5f88\u5bb9\u6613\u53d7\u5230\u4ed6\u4f7f\u7528\u7684\u4e00\u79cd\u6781\u5176\u7b80\u5355\u7684\u6280\u672f\u7684\u653b\u51fb\uff0c\u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a\u201c\u8de8\u7ad9\u70b9\u811a\u672c\u201d\uff0c\u5141\u8bb8\u653b\u51fb\u8005\u4ece\u4e00\u4e2a\u7f51\u7ad9\u8fd0\u884c\u53e6\u4e00\u4e2a\u7f51\u7ad9\u7684\u4ee3\u7801\u3002\n\u8be5\u516c\u53f8\u6700\u521d\u7684\u540d\u79f0\u662f\u201c\u201d&gt\uff1b&lt\uff1bscript SRC=HTTPS\uff1a//MJT.XSS.HT&gt\uff1bLtd\u201c\u201d\u3002\u5982\u679c\u540d\u79f0\u4ee5\u5f15\u53f7\u548c\u96ea\u4f5b\u9f99\u5f00\u5934\uff0c\u4efb\u4f55\u672a\u80fd\u6b63\u786e\u5904\u7406HTML\u4ee3\u7801\u7684\u7f51\u7ad9\u90fd\u4f1a\u8bef\u4ee5\u4e3a\u516c\u53f8\u540d\u79f0\u4e3a\u7a7a\uff0c\u7136\u540e\u52a0\u8f7d\u5e76\u6267\u884c\u6765\u81ea\u7f51\u7ad9XSS Hunter\u7684\u811a\u672c\uff0c\u8be5\u811a\u672c\u53ef\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u67e5\u627e\u8de8\u7ad9\u70b9\u811a\u672c\u9519\u8bef\u3002\n\u8fd9\u4e2a\u811a\u672c\u672c\u53ef\u4ee5\u7b80\u5355\u5730\u53d1\u51fa\u65e0\u5bb3\u7684\u8b66\u62a5--\u4f46\u5b83\u8bc1\u660e\u4e86\u6076\u610f\u653b\u51fb\u8005\u672c\u53ef\u4ee5\u5229\u7528\u540c\u6837\u7684\u5f31\u70b9\u6765\u8fbe\u5230\u66f4\u5177\u7834\u574f\u6027\u7684\u76ee\u7684\u3002\n\u7c7b\u4f3c\u7684\u540d\u5b57\u5728\u8fc7\u53bb\u4e5f\u66fe\u88ab\u6ce8\u518c\u8fc7\uff0c\u4f8b\u5982\u201c\uff1bDROP TABLE\u201dCompanies\u201c\uff1b--Ltd\u201d\uff0c\u8fd9\u662f\u53d7XKCD\u8457\u540d\u7f51\u7edc\u6f2b\u753b\u7684\u542f\u53d1\uff0c\u8bd5\u56fe\u5b9e\u65bd\u540d\u4e3aSQL\u6ce8\u5165\u7684\u653b\u51fb\u7684\u72e1\u733e\u5c1d\u8bd5\uff0c\u4f46\u8fd9\u662f\u7b2c\u4e00\u6b21\u5f15\u8d77\u56de\u5e94\u7684\u6b64\u7c7b\u540d\u79f0\u3002Companies House\u5df2\u8ffd\u6eaf\u6027\u5730\u4ece\u5176\u6570\u636e\u9988\u9001\u4e2d\u5220\u9664\u4e86\u539f\u59cb\u540d\u79f0\uff0c\u6240\u6709\u6d89\u53ca\u5176\u539f\u59cb\u7ef0\u53f7\u7684\u6587\u6863\u73b0\u5728\u90fd\u7b80\u5355\u5730\u5199\u7740\u201c\u516c\u53f8\u540d\u79f0\u53ef\u6839\u636e\u8981\u6c42\u63d0\u4f9b\u201d\u3002\n\u8fd9\u4f4d\u4e0d\u613f\u900f\u9732\u59d3\u540d\u7684\u516c\u53f8\u4e3b\u7ba1\u544a\u8bc9\u300a\u536b\u62a5\u300b\uff1a\u201c\u653f\u5e9c\u6570\u5b57\u670d\u52a1(GDS)\u5728\u5b89\u5168\u65b9\u9762\u6709\u5f88\u597d\u7684\u58f0\u8a89\uff0c\u5176\u4ed6\u7c7b\u4f3c\u641e\u7b11\u540d\u5b57\u7684\u516c\u53f8\u8fc7\u53bb\u4e5f\u6ce8\u518c\u8fc7\uff0c\u6240\u4ee5\u6211\u60f3\u53ef\u80fd\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u201d\n\u201c\u5f53\u6211\u53d1\u73b0\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\u65f6\uff0c\u6211\u7acb\u5373\u8054\u7cfb\u4e86\u516c\u53f8\u4e4b\u5bb6\u548c\u56fd\u5bb6\u7f51\u7edc\u5b89\u5168\u4e2d\u5fc3\uff0c\u5e76\u6ca1\u6709\u5411\u5176\u4ed6\u4efb\u4f55\u4eba\u900f\u9732\u8fd9\u4e00\u95ee\u9898\u3002\u201d\n\u4ed6\u8868\u793a\uff0c\u4ed6\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4f1a\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u5305\u62ec&gt\uff1b\u548c\u201c\u5728\u5185\u7684\u5b57\u7b26\u88ab\u660e\u786e\u5141\u8bb8\u4f5c\u4e3a\u516c\u53f8\u540d\u79f0\uff0c\u8fd9\u8868\u660e\u8be5\u673a\u6784\u5df2\u7ecf\u91c7\u53d6\u4e86\u5b89\u5168\u63aa\u65bd\u6765\u9632\u6b62\u6b64\u7c7b\u653b\u51fb\u3002\n\u516c\u53f8\u4e4b\u5bb6\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8bf4\uff1a\u201c\u4e00\u5bb6\u516c\u53f8\u6ce8\u518c\u65f6\u4f7f\u7528\u7684\u5b57\u7b26\u5982\u679c\u5728\u4e0d\u53d7\u4fdd\u62a4\u7684\u5916\u90e8\u7f51\u7ad9\u4e0a\u53d1\u5e03\uff0c\u53ef\u80fd\u4f1a\u7ed9\u6211\u4eec\u7684\u4e00\u5c0f\u90e8\u5206\u5ba2\u6237\u5e26\u6765\u5b89\u5168\u98ce\u9669\u3002\u201d\u6211\u4eec\u5df2\u7acb\u5373\u91c7\u53d6\u63aa\u65bd\u51cf\u8f7b\u8fd9\u4e00\u98ce\u9669\uff0c\u5e76\u5df2\u91c7\u53d6\u63aa\u65bd\u9632\u6b62\u7c7b\u4f3c\u4e8b\u4ef6\u53d1\u751f\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u516c\u53f8\u5185\u90e8\u670d\u52a1\u4ecd\u7136\u662f\u5b89\u5168\u7684\u3002\u201c", "note_en": "Software firm\u2019s director thought name using HTML would be \u2018fun and playful\u2019\n    Companies House has forced a company to change its name after it belatedly realised it could pose a security risk.\n The company now legally known as \u201cTHAT COMPANY WHOSE NAME USED TO CONTAIN HTML SCRIPT TAGS LTD\u201d was set up by a British software engineer, who says he did it purely because he thought it would be \u201ca fun playful name\u201d for his consulting business.\n  He now says he didn\u2019t realise that Companies House was actually vulnerable to the extremely simple technique he used, known as \u201ccross-site scripting\u201d, which allows an attacker to run code from one website on another.\n The original name of the company was \u201c\u201c&gt;&lt;SCRIPT SRC=HTTPS://MJT.XSS.HT&gt; LTD\u201d. By beginning the name with a quotation mark and chevron, any site which failed to properly handle the HTML code would have mistakenly thought the company name was blank, and then loaded and executed a script from the site XSS Hunter, which helps developers find cross-site scripting errors.\n That script would have simply put up a harmless alert \u2013 but it serves as proof that a malicious attacker could instead have used the same weakness as a gateway to more damaging ends.\n Similar names have been registered in the past, such as \u201c; DROP TABLE \u201cCOMPANIES\u201d;-- LTD\u201d, a  wry attempt to carry out an attack known as SQL injection,  inspired by a famous XKCD webcomic, but this was the first such name to have prompted a response. Companies House has retroactively removed the original name from its data feeds, and all documentation referring to its original moniker now reads simply \u201cCompany name available on request\u201d.\n The director of the company, who asked not to be named, told the Guardian: \u201cGovernment Digital Service - GDS - have a good reputation for security, and other companies with similarly playful names have been registered in the past, so I thought there probably wouldn\u2019t be a problem.\n \u201cWhen I discovered there were some minor problems, I contacted Companies House and the  National Cyber Security Centre immediately, and didn\u2019t disclose the issue to anyone else.\u201d\n He did not realise it would be an issue, he said, because characters including &gt; and \u201c are explicitly allowed as company names, which suggested that the agency had put security measures in place to prevent such attacks.\n A Companies House spokesperson said: \u201cA company was registered using characters that could have presented a security risk to a small number of our customers, if published on unprotected external websites. We have taken immediate steps to mitigate this risk and have put measures in place to prevent a similar occurrence. We are confident that Companies House services remain secure.\u201d", "posttime": "2020-11-07 11:08:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53ef\u80fd,forced", "title": "\u516c\u53f8\u88ab\u8feb\u66f4\u540d\uff0c\u53ef\u80fd\u88ab\u7528\u6765\u5165\u4fb5\u7f51\u7ad9", "title_en": "Company forced to change name that could be used to hack websites", "transed": 1, "url": "https://www.theguardian.com/uk-news/2020/nov/06/companies-house-forces-business-name-change-to-prevent-security-risk", "via": "", "real_tags": ["\u53ef\u80fd", "forced"]}, {"category": "", "categoryclass": "", "imagename": "21ddf474dca676b907600414fc3ae011.jpeg", "infoid": 1033596, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u7f8e\u56fd\u957f\u5927\u7684\u6211\u8bb0\u5f97\uff0c\u5728\u4e07\u5723\u8282\u524d\u5915\uff0c\u6211\u6bcd\u4eb2\u5e38\u8bf4\uff1a\u201c\u4eb2\u7231\u7684\uff0c\u4eca\u5929\u4e0d\u53ea\u662f\u88c5\u626e\u548c\u7cd6\u679c\u7684\u65e5\u5b50\u3002\u4f60\u8fd8\u5fc5\u987b\u8bb0\u4f4f\u4f60\u7684\u4eb2\u621a\u3002\u77e5\u9053\u4ed6\u4eec\u7684\u540d\u5b57\u3002\u201c\u3002\u5979\u4f1a\u7ed9\u6211\u770b\u963f\u59e8\u3001\u53d4\u53d4\u548c\u5176\u4ed6\u5df2\u6545\u4eb2\u621a\u7684\u7167\u7247\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u5728\u58a8\u897f\u54e5\u7684\u5bb6\u4eba\u5e86\u795d\u4e86\u4ea1\u7075\u8282\uff0c\u8fd9\u662f\u4e00\u4e2a\u5168\u56fd\u6027\u7684\u8282\u65e5\uff0c\u4ece10\u670831\u65e5\u523011\u67082\u65e5\u3002\u4ed6\u4eec\u4f1a\u5728\u5bb6\u91cc\u5efa\u4e00\u4e9b\u5c0f\u796d\u575b\u6765\u7eaa\u5ff5\u4ed6\u4eec\u6240\u7231\u7684\u4eba\uff0c\u5e76\u5728\u796d\u575b\u4e0a\u653e\u4e0a\u98df\u7269\u3001\u996e\u6599\u3001\u7167\u7247\u548c\u5176\u4ed6\u4e2a\u4eba\u7269\u54c1\u3002\u4ed6\u4eec\u4e5f\u540c\u6837\u88c5\u9970\u7956\u5148\u7684\u575f\u5893\u3002\n\u8fd9\u4e9b\u5929\u6765\uff0c\u6211\u662f\u4e00\u5c0f\u7fa4\u7814\u7a76\u4eba\u5458\u4e2d\u7684\u4e00\u5458\uff0c\u4ed6\u4eec\u6b63\u5728\u52aa\u529b\u6062\u590d\u963f\u5179\u7279\u514b\u4eba\u7684\u54f2\u5b66\u3002\u6211\u7684\u91cd\u70b9\u662f\u963f\u5179\u7279\u514b\u4eba\u7684\u4f26\u7406\u9053\u5fb7\uff0c\u963f\u5179\u7279\u514b\u4eba\u8ba4\u4e3a\u8fd9\u662f\u751f\u6d3b\u5f97\u597d\u7684\u827a\u672f\uff0c\u4f46\u6211\u4eec\u79f0\u4e4b\u4e3a\u8ffd\u6c42\u5e78\u798f\u3002\n\u6211\u4e86\u89e3\u5230\uff0c\u6b7b\u8005\u65e5\u7684\u4eea\u5f0f\u53ef\u4ee5\u8ffd\u6eaf\u5230\u58a8\u897f\u54e5\u524d\u54e5\u4f26\u5e03\u65f6\u4ee3\u7684\u4eba\u6c11\uff0c\u5728\u7f8e\u6d32\u5404\u5730\u90fd\u6709\u5e86\u795d\uff0c\u6df1\u6df1\u690d\u6839\u4e8e\u963f\u5179\u7279\u514b\u4eba\u7684\u4f26\u7406\u4e4b\u4e2d\u3002\n1492\u5e74\u514b\u91cc\u65af\u6258\u5f17\u00b7\u54e5\u4f26\u5e03(Christopher Columbus)\u62b5\u8fbe\u52a0\u52d2\u6bd4\u6d77\u540e\u4e0d\u4e45\uff0c\u897f\u73ed\u7259\u4eba\u6b96\u6c11\u4e86\u8be5\u5730\u533a\u30021521\u5e74\uff0c\u963f\u5179\u7279\u514b\u5e1d\u56fd\u5728\u897f\u73ed\u7259\u4eba\u8d6b\u5c14\u5357\u00b7\u79d1\u5c14\u7279\u65af\u9886\u5bfc\u7684\u4e24\u5e74\u6218\u4e89\u4e2d\u57ae\u53f0\u3002\n\u4e4b\u540e\uff0c\u897f\u73ed\u7259\u7267\u5e08\u60f3\u8981\u4e86\u89e3\u5f53\u5730\u5c45\u6c11\uff0c\u4ee5\u4fbf\u4f7f\u4ed6\u4eec\u7688\u4f9d\u57fa\u7763\u6559\u3002\u4ed6\u4eec\u715e\u8d39\u82e6\u5fc3\u5730\u5c06\u963f\u5179\u7279\u514b\u4eba\u7684\u4fe1\u4ef0\u7528\u963f\u5179\u7279\u514b\u8bed\u8a00\u90a3\u534e\u7279\u5c14\u8bed\u5199\u6210\u4e86\u6210\u5377\u7684\u6750\u6599\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\u6765\u6e90\u662f\u201c\u4f5b\u7f57\u4f26\u8428\u6284\u672c\u201d\uff0c\u5199\u4e8e1547\u5e74\u81f31577\u5e74\u4e4b\u95f4\u3002\n\u6839\u636e\u8fd9\u4e9b\u6d88\u606f\u6765\u6e90\uff0c\u963f\u5179\u7279\u514b\u4eba\u751f\u6d3b\u7684\u57fa\u672c\u95ee\u9898\u662f\u4eba\u7c7b\u5e76\u4e0d\u5b8c\u7f8e--\u4ed6\u4eec\u4f1a\u72af\u9519\u3002\u963f\u5179\u7279\u514b\u4eba\u4f1a\u8bf4\uff1a\u201c\u5730\u7403\u53c8\u6ed1\u53c8\u6ed1\u3002\u201d\u4e3a\u4e86\u907f\u514d\u8bef\u5165\u6b67\u9014\uff0c\u4eba\u4eec\u9700\u8981\u5728\u5fc3\u7406\u3001\u8eab\u4f53\u548c\u793e\u4f1a\u4e09\u4e2a\u4e0d\u540c\u5c42\u9762\u4e0a\u8fc7\u4e00\u79cd\u5e73\u8861\u7684\u751f\u6d3b\u3002\n\u56e0\u6b64\uff0c\u963f\u5179\u7279\u514b\u4f26\u7406\u5b66\u7684\u6700\u9ad8\u4e2a\u4eba\u76ee\u6807\u662f\u8ba9\u4eba\u4eec\u5e73\u8861\u81ea\u5df1\u7684\u5fc3\u7406\u3002\u8fd9\u662f\u901a\u8fc7\u5bf9\u9f50\u5fc3\u810f(\u6216\u9ec4\u4f53)\u548c\u9762\u90e8(\u6216ixtli)\u6765\u5b8c\u6210\u7684\u3002\u963f\u5179\u7279\u514b\u4eba\u8bf4\u7684\u201c\u5fc3\u201d\u6307\u7684\u662f\u601d\u60f3\u548c\u6b32\u671b\u3002\u4ed6\u4eec\u6240\u8bf4\u7684\u201c\u9762\u5b50\u201d\u6307\u7684\u662f\u8fd9\u4e9b\u6b32\u671b\u7684\u5408\u7406\u7ec4\u7ec7\u3002\n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u963f\u5179\u7279\u514b\u4eba\u6765\u8bf4\uff0c\u5e78\u798f\u7684\u751f\u6d3b\u662f\u901a\u8fc7\u5e73\u8861\u6765\u5b9e\u73b0\u7684\u3002\u5c31\u4e2a\u4eba\u800c\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u5e73\u8861\u4e00\u4e2a\u4eba\u7684\u201c\u8138\u201d\u548c\u201c\u5fc3\u201d\uff0c\u4f46\u5728\u793e\u4f1a\u4e0a\uff0c\u8fd9\u6d89\u53ca\u5230\u670b\u53cb\u3001\u5bb6\u4eba\u548c\u7956\u5148\u3002\u4ea1\u7075\u8282\u7684\u4eea\u5f0f\u6709\u52a9\u4e8e\u8fd9\u79cd\u793e\u4f1a\u5e73\u8861\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u201c\u5fc3\u201d\u662f\u8eab\u4f53\u6240\u6709\u6b32\u671b\u7684\u9690\u55bb\u3002\u6b64\u5916\uff0c\u963f\u5179\u7279\u514b\u4eba\u5e76\u4e0d\u533a\u5206\u7cbe\u795e\u548c\u8eab\u4f53\u3002\u4ed6\u4eec\u76f8\u4fe1\u8eab\u4f53\u7684\u6bcf\u4e2a\u533a\u57df\u90fd\u6709\u81ea\u5df1\u7684\u201c\u5934\u8111\u201d\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u7684\u773c\u775b\u7528\u4e00\u79cd\u65b9\u5f0f\u601d\u8003\uff0c\u6211\u4eec\u7684\u8033\u6735\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\u601d\u8003\uff0c\u6211\u4eec\u7684\u76ae\u80a4\u4ecd\u7136\u7528\u53e6\u4e00\u79cd\u65b9\u5f0f\u601d\u8003\u3002\u6b63\u5982\u5b66\u8005\u963f\u5c14\u5f17\u96f7\u591a\u00b7\u6d1b\u4f69\u5179\u00b7\u5965\u65af\u6c40(Alfredo Lop\u00e9z Austin)\u6240\u8bf4\uff0c\u963f\u5179\u7279\u514b\u4eba\u8ba4\u4e3a\u610f\u8bc6\u662f\u8fd9\u79cd\u601d\u7ef4\u751f\u6001\u7cfb\u7edf\u7684\u7ed3\u679c\uff0c\u6bcf\u4e2a\u601d\u7ef4\u90fd\u5728\u4e89\u593a\u6ce8\u610f\u529b\uff0c\u8868\u8fbe\u81ea\u5df1\u7684\u613f\u671b\u3002\n\u5728\u8fd9\u4e2a\u601d\u60f3\u751f\u6001\u7cfb\u7edf\u4e2d\uff0c\u963f\u5179\u7279\u514b\u4eba\u8ba4\u4e3a\uff0c\u6709\u4e09\u4e2a\u533a\u57df\u62e5\u6709\u6700\u96c6\u4e2d\u7684\u5b87\u5b99\u529b\u91cf\uff0c\u4f7f\u4eba\u7c7b\u5f97\u4ee5\u751f\u5b58\u548c\u6d3b\u52a8\uff1a\u5fc3\u810f(\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u7269\u7406\u5fc3\u810f)\u3001\u5934\u90e8\u548c\u809d\u810f\u3002\n\u5fc3\u810f\u91cc\u6709\u201cYolia\u201d\uff0c\u5b83\u8868\u8fbe\u4e86\u4e00\u4e2a\u4eba\u6709\u610f\u8bc6\u7684\u548c\u8bb0\u5fc6\u4e2d\u7684\u4e2a\u6027\u3002\u5934\u4e0a\u6709\u201cTonalli\u201d\uff0c\u5b83\u8868\u8fbe\u4e86\u4e00\u4e2a\u4eba\u7684\u6027\u683c\u548c\u547d\u8fd0\u7684\u529b\u91cf\u3002\u809d\u810f\u91cc\u6709\u201cihiyotl\u201d\uff0c\u5b83\u8d1f\u8d23\u6211\u4eec\u7684\u547c\u5438\u548c\u5065\u5eb7\u3002\n\u5f53\u6211\u4eec\u6b7b\u540e\uff0c\u963f\u5179\u7279\u514b\u4eba\u76f8\u4fe1\u8fd9\u4e09\u79cd\u529b\u91cf\u662f\u4ece\u6211\u4eec\u7684\u8eab\u4f53\u4e2d\u5206\u79bb\u51fa\u6765\u7684\u3002Ihiyotl\uff0c\u6216\u79f0\u547c\u5438\uff0c\u7acb\u5373\u4e0e\u5927\u81ea\u7136\u91cd\u9022\u3002\u6258\u7eb3\u5229(Tonalli)\uff0c\u6216\u79f0\u751f\u547d\u529b\uff0c\u4f1a\u4ee5\u80fd\u91cf\u7684\u5f62\u5f0f\u56de\u5f52\uff0c\u5728\u9700\u8981\u65f6\u88ab\u53ec\u5524\u3002\u5176\u4e2d\u4e00\u4e2a\u662f\u5c24\u5229\u5a05\u3002\u7136\u800c\uff0c\u4eba\u683c\u5374\u6765\u5230\u4e86\u6b7b\u4ea1\u4e4b\u5730\uff0c\u4e5f\u5c31\u662f\u7c73\u7279\u5170\u3002\u5728\u90a3\u91cc\uff0c\u5b83\u7ecf\u5386\u4e86\u4e00\u7cfb\u5217\u8003\u9a8c\uff0c\u5305\u62ec\u9965\u997f\u548c\u5bd2\u98ce\u3002\n\u4e3a\u4e86\u5728\u65c5\u9014\u4e2d\u63d0\u4f9b\u5e2e\u52a9\uff0c\u6bcf\u4e2a\u4eba\u7684Yolia\u90fd\u4f1a\u4f34\u968f\u7740\u4e00\u53ea\u5c0f\u9ec4\u72d7\u548c\u4eb2\u4eba\u63d0\u4f9b\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u4e00\u5e74\u4e2d\u7684\u4e0d\u540c\u65e5\u5b50-\u4e0d\u4ec5\u4ec5\u662f\u5728\u4ea1\u7075\u8282-\u5bb6\u4eba\u5e94\u8be5\u5e2e\u52a9\u6700\u8fd1\u53bb\u4e16\u7684\u4eb2\u621a\u7684\u5c24\u5229\u5a05\uff0c\u5728\u4ed6\u4eec\u7684\u5bb6\u5ead\u795e\u6bbf\u91cc\u7ed9\u4ed6\u4eec\u63d0\u4f9b\u98df\u7269\u3001\u996e\u6599\u548c\u5176\u4ed6\u793c\u7269\u3002\n\u4f46\u662f\u56db\u5e74\u540e\uff0c\u5c24\u5229\u5a05\u53f7\u7ed3\u675f\u4e86\u5b83\u7684\u65c5\u7a0b\uff0c\u91cd\u65b0\u52a0\u5165\u4e86\u5b87\u5b99\u7684\u57fa\u672c\u80fd\u91cf--\u201cmeteotl\u201d\uff0c\u4e5f\u5c31\u662f\u4e0a\u5e1d\u3002\u56e0\u6b64\uff0c\u901d\u8005\u7684\u9057\u4f53\u53ea\u5269\u4e0b\u4ed6\u4eec\u4f5c\u4e3a\u6258\u7eb3\u5229\u7684\u4eba\u683c\u529b\u91cf\uff0c\u963f\u5179\u7279\u514b\u4eba\u76f8\u4fe1\uff0c\u8bb0\u4f4f\u4ed6\u4eec\u7684\u540d\u5b57\u5c31\u53ef\u4ee5\u53ec\u5524\u8fd9\u79cd\u529b\u91cf\u3002\n\u963f\u5179\u7279\u514b\u4eba\u8ba4\u4e3a\uff0c\u901a\u8fc7\u7f05\u6000\u6211\u4eec\u7684\u7956\u5148\uff0c\u6211\u4eec\u5728\u5730\u7403\u4e0a\u5e2e\u52a9\u5e73\u8861\u4e86\u6211\u4eec\u7684\u751f\u6d3b\uff0c\u4e5f\u652f\u6301\u4e86\u6211\u4eec\u6240\u7231\u7684\u4eba\u6765\u4e16\u3002\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u8fd9\u5c31\u662f\u4eca\u5929\u8bb8\u591a\u4eba\u7eaa\u5ff5\u4ea1\u7075\u8282\u7684\u76ee\u7684\u3002", "note_en": "Growing up in the United States, I remember on Halloween my mother used to say, \u201cHoney, this is not just a day for costumes and candy. You must also remember your relatives. Know their names.\u201d She would show me pictures of great-aunts, uncles and other deceased relatives.\n Meanwhile, my family members in Mexico observed Day of the Dead, a national holiday that is celebrated from Oct. 31 to Nov. 2. They would build small altars at home to honor their loved ones, and put food, drinks, photos and other personal items on them. They similarly decorated their ancestors\u2019 graves.\n These days, I am part of a small  group of researchers who are  working to recover Aztec philosophy. My focus is on Aztec ethics, which the Aztecs thought of as  the art of living well, but we call the pursuit of happiness.\n I\u2019ve learned that Day of the Dead rituals, which date back to Mexico\u2019s pre-Columbian peoples and are observed all over the Americas, are deeply rooted in Aztec ethics.\n  Shortly after Christopher Columbus arrived in the Caribbean in 1492, Spanish peoplecolonized the region. In 1521 the Aztec empire  fell in a two-year war led by the Spaniard Hern\u00e1n Cort\u00e9s.\n Afterwards, Spanish priests wanted to understand the native population in order to convert them to Christianity. They painstakingly detailed the Aztecs\u2019 beliefs in volumes of material written in Nahuatl, the Aztec language. The most important of these sources is the \u201c Florentine Codex,\u201d written between 1547 and 1577.\n The basic problem of life for the Aztecs, according to these sources, is that humans aren\u2019t perfect \u2013 they make mistakes. \u201c The earth is slippery, slick,\u201d the Aztecs would say. And to avoid falling into error, people need to live a balanced life on three different levels: in their psyches, their bodies and their society.\n The top individual goal in Aztec ethics, then, is for people to balance their psyche. It is done by aligning the heart, or yollotl, and face, or ixtli. By \u201cheart,\u201d the Aztecs meant thoughts and desires. By \u201cface,\u201d they meant the rational organization of those desires.\n  For the Aztecs, then, a happy life is achieved through balance. Individually, this means balancing one\u2019s \u201cface\u201d and \u201cheart,\u201d but socially this involves friends, family and ancestors. Day of the Dead rituals help with this social balance.\n It\u2019s important to note that the \u201cheart\u201d is a metaphor for all of the body\u2019s desires. Also, the Aztecs did not distinguish minds from bodies. They believed each region of the body had its own \u201cmind.\u201d For example, our eyes think one way, our ears another, and our skin another way still. As the scholar  Alfredo Lop\u00e9z Austin  argues, the Aztecs thought of consciousness as the result of this ecosystem of minds, with each mind competing for attention and expressing its own desires.\n Within this ecosystem of minds, the Aztecs believed that three regions held the highest concentration of the cosmic forces  that make humans living, moving beings: the heart (the physical heart, in this case), the head and the liver.\n The heart houses the \u201cyolia,\u201d which expresses one\u2019s conscious and remembered personality. The head houses the \u201ctonalli,\u201d which  expresses the strength of one\u2019s character and destiny. And the liver houses the \u201cihiyotl,\u201d which is responsible for our breathing and health.\n When we die, the Aztecs believed these three powers separate from our bodies. The ihiyotl, or breath, immediately rejoins nature. The tonalli, or vital strength, returns as energy to be called on in need. One\u2019s yolia. or personality, however,  travels to the land of the dead, called Mictl\u00e1n. There, it endures a series of trials, including hunger and cold winds.\n To help in the journey, each person\u2019s yolia is accompanied by a little yellow dog and whatever offerings one\u2019s loved ones make. That\u2019s why on various days of the year \u2013 not only during Day of the Dead \u2013  family members are supposed to help the yolia of recently deceased relatives by offering them food, drink and other gifts at their home shrines.\n  But after four years, the yolia finishes its journey and rejoins the  fundamental energy of the universe \u2013 \u201cometeotl,\u201d or god. All that remains of the deceased, then, is their force of personality as tonalli, which, the Aztecs believed, could be called on by remembering their name.\n By remembering our ancestors, Aztecs thought, we help balance our lives while we\u2019re here on Earth and also support our loves ones in their afterlife. This, in essence, is the purpose of the Day of the Dead that many observe today.", "posttime": "2020-11-07 11:08:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ea1\u7075,dead,\u5bb6\u4eba", "title": "\u5173\u4e8e\u963f\u5179\u7279\u514b\u4eba\u7684\u5e78\u798f\u54f2\u5b66\uff0c\u4ea1\u7075\u8282\u544a\u8bc9\u4e86\u6211\u4eec\u4ec0\u4e48\uff1f", "title_en": "What Day of the Dead tells us about the Aztec philosophy of happiness", "transed": 1, "url": "https://theconversation.com/what-day-of-the-dead-tells-us-about-the-aztec-philosophy-of-happiness-147552", "via": "", "real_tags": ["\u4ea1\u7075", "dead", "\u5bb6\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "588a96d6002ca4532492f7f791645b37.png", "infoid": 1033595, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u80fd\u5426\u7f16\u5199\u5177\u6709\u53ef\u9884\u6d4b\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u53ef\u4ee5\u81ea\u52a8\u5e76\u884c\u5316\uff1f\u827e\u4f26\u00b7\u56fe\u7075(Alan Turing)\u548c\u963f\u9686\u4f50\u00b7\u4e18\u5947(Alonzo Church)\u5728\u53ef\u8ba1\u7b97\u6027\u65b9\u9762\u7684\u90e8\u5206\u5de5\u4f5c\u8868\u660e\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u7a0b\u5e8f\u6765\u8bf4\uff0c\u65e0\u6cd5\u63d0\u524d\u786e\u5b9a\u8be5\u7a0b\u5e8f\u662f\u5426\u53ef\u4ee5\u8ba1\u7b97\u3002\u8fd9\u6784\u6210\u4e86\u505c\u987f\u95ee\u9898\u7684\u75c7\u7ed3\u6240\u5728\u3002\u56fe\u7075\u5b8c\u6574\u6027\u95ee\u9898\u4e0d\u662f\u4ed6\u4eec\u6240\u5c55\u793a\u7684\u95ee\u9898\uff0c\u800c\u662f\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u5982\u4f55\u56e0\u4e3a\u7f3a\u4e4f\u5bf9\u53ef\u8ba1\u7b97\u6027\u7684\u4fdd\u8bc1\uff0c\u4ee5\u53ca\u6211\u4eec\u7684\u884c\u4e1a\u6ca1\u6709\u8ba4\u8bc6\u5230\u8fd9\u7ed9\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u5e26\u6765\u7684\u8d1f\u62c5\u800c\u53d7\u963b\u3002\u6b64\u5916\uff0c\u6700\u8fd1\u7684\u8ba1\u7b97\u673a\u5236(\u5982\u591a\u7ebf\u7a0b\u3001NUMA\u3001GPGPU\u548c\u5206\u5e03\u5f0f\u8ba1\u7b97)\u8fdb\u4e00\u6b65\u52a0\u5267\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u4e9b\u673a\u5236\u5df2\u7ecf\u8131\u79bb\u4e86\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u6240\u57fa\u4e8e\u7684\u56fe\u7075\u673a\u8ba1\u7b97\u6a21\u578b\u3002\n\u4e0b\u9762\u7684C\u4ee3\u7801\u7247\u6bb5\u7b80\u6d01\u5730\u5305\u542b\u4e86\u4f7f\u73b0\u4ee3\u5f00\u53d1\u590d\u6742\u5316\u7684\u56fe\u7075\u5b8c\u6574\u6027\u95ee\u9898\uff1a\n\u81ea\u52a8\u5e76\u884c\u5316-\u5b83\u4e0d\u53ef\u80fd\u81ea\u52a8\u5e76\u884c\u5316\u8fd9\u6bb5\u4ee3\u7801\u3002\u5bf9\u4e8e\u53ef\u80fd\u8de8\u7ebf\u7a0b\u6346\u7ed1\u8fd9\u4e9b\u8c03\u7528\u7684\u7f16\u8bd1\u5668\u6765\u8bf4\uff0c\u8282\u70b9\u6570\u5e76\u4e0d\u6e05\u695a\uff0c\u4e5f\u4e0d\u6e05\u695a\u51fd\u6570\u8c03\u7528\u662f\u5426\u4f1a\u6539\u53d8\u8282\u70b9\u5e76\u6dfb\u52a0/\u5220\u9664\u8981\u5904\u7406\u7684\u8282\u70b9\u3002\n\u505c\u6b62\u95ee\u9898--\u5b83\u4e0d\u53ef\u80fd\u77e5\u9053\u4ee3\u7801\u662f\u5426\u4f1a\u505c\u6b62\uff0c\u751a\u81f3\u5ffd\u7565\u4e86\u8fd9\u6837\u4e00\u4e2a\u60f3\u6cd5\uff1a\u4f7f\u7528do SomethingWith\u53ef\u80fd\u603b\u662f\u5411\u5b83\u6b63\u5728\u5904\u7406\u7684\u8282\u70b9\u6dfb\u52a0\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u963b\u6b62\u8282\u70b9\u6307\u5411\u81ea\u5df1\uff0c\u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u505c\u6b62\u3002\n\u81ea\u52a8\u5e76\u884c\u5316\u53ea\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3/\u9700\u8981\u5e76\u884c\u5316\u6211\u4eec\u7684\u4ee3\u7801\u3002\u76f4\u5230\u6700\u8fd1\uff0c\u8fd9\u8fd8\u53ea\u662f\u4e00\u79cd\u5229\u57fa\u9700\u6c42\uff0c\u56e0\u4e3a\u8ba1\u7b97\u80fd\u529b\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u5448\u6307\u6570\u7ea7\u589e\u957f\uff0c\u5728\u8fc7\u53bb\u5341\u5e74\u624d\u8d8b\u4e8e\u5e73\u7f13\u3002\u5982\u679c\u60c5\u51b5\u4ecd\u7136\u5982\u6b64\uff0c\u5b83\u5f88\u53ef\u80fd\u4ecd\u7136\u662f\u4e00\u4e2a\u53ea\u6709\u4e13\u5bb6\u624d\u9700\u8981\u62c5\u5fc3\u7684\u5229\u57fa\u95ee\u9898\uff0c\u4f46\u968f\u7740\u591a\u6838\u73b0\u5728\u751a\u81f3\u5728\u4e2a\u4eba\u7b14\u8bb0\u672c\u7535\u8111\u4e2d\u4e5f\u662f\u5e38\u6001\uff0c\u800c\u4e14\u968f\u7740\u4fe1\u53f7\u4f20\u64ad\u672c\u8eab\u6210\u4e3a\u9650\u5236\u56e0\u7d20\uff0c\u5b83\u4e0d\u592a\u53ef\u80fd\u6d88\u5931\uff0c\u5b83\u4e5f\u6210\u4e3a\u4e86\u666e\u901a\u5f00\u53d1\u8005\u7684\u95ee\u9898\u3002\n\u505c\u987f\u95ee\u9898\u672c\u8eab\u7684\u4e89\u8bae\u8981\u5927\u5f97\u591a\u3002\u56fe\u7075\u8bc1\u660e\uff0c\u4e0d\u53ef\u80fd\u786e\u5b9a\u4efb\u610f\u8ba1\u7b97\u662f\u5426\u5c06\u505c\u6b62\u6216\u6c38\u8fdc\u8fd0\u884c\uff0c\u56e0\u6b64\u8fd9\u79cd\u7f3a\u4e4f\u51b3\u5b9a\u8bba\u4e00\u76f4\u88ab\u5bb9\u5fcd\u4e3a\u6240\u6709\u5fc5\u987b\u7b80\u5355\u5904\u7406\u7684\u8ba1\u7b97\u7684\u4e0d\u5e78\u73b0\u5b9e\u3002\u7136\u800c\uff0c\u6211\u4eec\u5047\u8bbe\u6ca1\u6709\u4efb\u4f55\u5b9e\u9645\u6709\u7528\u7684\u8ba1\u7b97\u4f1a\u6c38\u8fdc\u6301\u7eed\u4e0b\u53bb\uff0c\u56e0\u4e3a\u5b83\u7684\u7ed3\u679c\u4e0d\u4f1a\u5f71\u54cd\u6211\u4eec\u751f\u6d3b\u7684\u6709\u9650\u73b0\u5b9e\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5458\u5df2\u7ecf\u5728\u7279\u522b\u76f4\u89c2\u7684\u610f\u4e49\u4e0a\u4e3a\u4ed6\u4eec\u81ea\u5df1\u7684\u95ee\u9898\u57df\u627e\u5230\u56fe\u7075\u5b8c\u5907\u6027\u7684\u4e00\u4e2a\u4e0d\u5b8c\u7f8e\u7684\u5b50\u96c6\uff0c\u4ee5\u4fbf\u80fd\u591f\u771f\u6b63\u4e3a\u4ed6\u4eec\u7684\u7528\u6237\u4ea7\u751f\u6709\u4ef7\u503c\u7684\u8ba1\u7b97\u3002\n\u5728\u5355\u7ebf\u7a0b\u73af\u5883\u4e2d\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e3b\u8981\u662f\u4e00\u4e2a\u5c0f\u9ebb\u70e6--\u5f53\u60a8\u7f16\u5199\u65e0\u9650\u5faa\u73af\u4ee3\u7801\u65f6\uff0c\u627e\u5230\u5904\u7406\u5668\u53cd\u590d\u6267\u884c\u7684\u4ee3\u7801\u6bb5\uff0c\u7814\u7a76\u5b83\u662f\u5982\u4f55\u8fdb\u5165\u8fd9\u79cd\u72b6\u6001\u7684\uff0c\u5e76\u627e\u51fa\u5982\u4f55\u9632\u6b62\u8be5\u72b6\u6001\u518d\u6b21\u53d1\u751f--\u6216\u8005\u5728\u68c0\u6d4b\u5230\u8be5\u72b6\u6001\u65f6\u4e2d\u6b62\u3002\u4f46\u662f\u5728\u591a\u7ebf\u7a0b\u3001\u591a\u673a\u5668\u7684\u96c6\u7fa4\u8ba1\u7b97\u4e16\u754c\u4e2d\uff0c\u5728\u7f16\u5199\u65e0\u9650\u5faa\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u68c0\u6d4b\u8de8\u8d8a\u591a\u53f0\u673a\u5668\u7684\u65e0\u9650\u5faa\u73af\u4e5f\u662f\u4e00\u9879\u6311\u6218\uff0c\u66f4\u4e0d\u7528\u8bf4\u6536\u96c6\u8c03\u8bd5\u8fd9\u79cd\u65e0\u6548\u72b6\u6001\u7684\u539f\u56e0\u6240\u9700\u7684\u6570\u636e\u4e86\u3002\u591a\u53f0\u76f8\u4e92\u4f5c\u7528\u7684\u56fe\u7075\u673a\u5668\u4e0d\u80fd\u540c\u6b65\u6267\u884c\u6240\u56fa\u6709\u7684\u4e0d\u786e\u5b9a\u6027\u8fdb\u4e00\u6b65\u52a0\u5267\u4e86\u8fd9\u4e00\u95ee\u9898\uff0c\u8fd9\u4f7f\u5f97\u95ee\u9898\u7684\u518d\u73b0\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\n\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u52c9\u5f3a\u4e0d\u5b8c\u6574\u7684\u56fe\u7075\u5b50\u96c6\u6765\u907f\u5f00\u505c\u987f\u95ee\u9898\uff0c\u4e5f\u4f7f\u5f97\u81ea\u52a8\u5e76\u884c\u5316\u6210\u4e3a\u53ef\u80fd\u3002\u73b0\u5728\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f7f\u7528\u53ef\u4ee5\u786e\u5b9a\u5728\u54ea\u91cc\u4ee5\u53ca\u5982\u4f55\u5e76\u884c\u5316\u5de5\u4f5c\u7684\u4ee3\u7801\uff0c\u5e76\u4e14\u80fd\u591f\u5bf9\u5176\u6709\u9650\u7684\u6267\u884c\u65f6\u95f4\u8fdb\u884c\u5efa\u6a21\uff0c\u4ee5\u786e\u5b9a\u5728\u5404\u79cd\u6761\u4ef6\u4e0b\u5e76\u884c\u5316\u662f\u5426\u503c\u5f97\u3002\n\u8fd9\u5c31\u662fAlan\u7f16\u7a0b\u8bed\u8a00\u7684\u4e3b\u9898\uff0c\u5373\u53ea\u8981\u6709\u5f88\u5c0f\u7684\u8bed\u6cd5\u7ea6\u675f(\u6211\u4eec\u76f8\u4fe1\u7edd\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u4e0d\u4f1a\u6ce8\u610f\u5230\uff0c\u6216\u8005\u81f3\u5c11\u4e0d\u4f1a\u6ce8\u610f\u5230)\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u4fdd\u60a8\u7f16\u5199\u7684\u4ee3\u7801\u603b\u662f\u505c\u6b62\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u4e3a\u60a8\u5e76\u884c\u5316\u60a8\u7684\u4ee3\u7801\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u4e3a\u8fd0\u884c\u65f6\u4f30\u8ba1\u5efa\u7acb\u6a21\u578b\uff0c\u8fd9\u4e9b\u6a21\u578b\u53ea\u9700\u8981\u6570\u636e\u7684\u5927\u5c0f\u548c\u5f62\u72b6\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\uff0c\u56e0\u6b64\u4e0d\u4ec5\u53ef\u4ee5\u786e\u5b9a\u5982\u4f55\u5e76\u884c\u5316\u4ee3\u7801\uff0c\u800c\u4e14\u53ef\u4ee5\u786e\u5b9a\u5728\u7ed9\u5b9a\u8981\u64cd\u4f5c\u7684\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u662f\u5426\u6709\u610f\u4e49\u3002\u6211\u4eec\u8fd8\u6ca1\u6709\u5b8c\u6210\u6240\u6709\u8fd9\u4e9b\u8981\u6c42\uff0c\u4f46\u73b0\u5728\u8fd9\u53ea\u662f\u4e00\u4e2a\u65f6\u95f4\u548c\u52aa\u529b\u7684\u95ee\u9898\u3002\uff1a)\u3002\n\u793a\u4f8bC\u4ee3\u7801\u7684\u5927\u591a\u6570\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u6570\u636e\u7ed3\u6784\u548c\u7528\u6237\u5b9a\u4e49\u51fd\u6570\u7684\u884c\u4e3a\u4e0d\u660e\u786e\u3002\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0cWhile\u5faa\u73af\u662f\u4e00\u4e2a\u65e0\u754c\u5faa\u73af\u6784\u9020\uff0c\u9664\u4e86While\u5faa\u73af\u7684\u4e3b\u4f53\u88ab\u6267\u884c\u96f6\u6b21\u6216\u591a\u6b21\u4e4b\u5916\uff0c\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u63a8\u7406\u3002&#34\uff1b\u5728Alan\u4e2d\uff0c\u4e0d\u5141\u8bb8\u4efb\u610f\u5faa\u73af\u548c\u9012\u5f52\uff0c\u5e76\u4e14\u6240\u6709\u6570\u636e\u90fd\u5efa\u7acb\u5728\u5177\u6709\u53ef\u77e5\u7ea6\u675f\u7684\u6570\u636e\u7c7b\u578b\u4e4b\u4e0a\uff0c\u4e0d\u5141\u8bb8\u4efb\u610f\u8df3\u8f6c\u8bed\u53e5\u6216\u6570\u636e\u6307\u9488\u903b\u8f91\u3002\n\u5b9e\u9645\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u662f\u5728\u4e0a\u9762\u4e3a\u8282\u70b9\u5217\u8868\u7f16\u5199While\u5faa\u73af\uff0c\u800c\u662f\u7f16\u5199\u5982\u4e0b\u5185\u5bb9\uff1a\n\u5bf9\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u6267\u884c\u526f\u4f5c\u7528\u64cd\u4f5c\u7684\u610f\u56fe\u5f88\u660e\u663e\uff0cAlan\u7f16\u8bd1\u5668\u53ef\u4ee5\u786e\u5b9a\u51fd\u6570\u7684\u7eaf\u5ea6--\u5b83\u662f\u5426\u6539\u53d8\u4e86\u8f93\u5165\u53c2\u6570\u6216\u5916\u90e8\u4f5c\u7528\u57df--\u4ee5\u786e\u5b9a\u5b83\u662f\u5426\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u3002\u7136\u540e\uff0c\u5728\u8fd0\u884c\u65f6\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u7684\u4f30\u8ba1\u6267\u884c\u65f6\u95f4\u3001\u8282\u70b9\u6570\u7ec4\u4e2d\u7684\u8282\u70b9\u6570\u4ee5\u53ca\u8de8\u591a\u4e2a\u7ebf\u7a0b\u5206\u914d\u5de5\u4f5c\u7684\u6210\u672c\u6765\u51b3\u5b9a\u662f\u5426\u5e76\u884c\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u3002\nFn\u793a\u4f8b(file1\uff1astring\uff0cFile2\uff1astring)\uff1aArray&lt\uff1bArray&lt\uff1bint64&gt\uff1b&gt\uff1b{const matrix1=loadFile(File1).parseMatrix()const matrix2=loadFile(File2).parseMatrix()return matrix1*matrix2}\u3002\n\u77e9\u9635\u4e58\u6cd5\u4e0d\u4ec5\u662f\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u53ef\u5e76\u884c\u5316\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5927\u578b\u77e9\u9635\u90fd\u6709\u53ef\u80fd\u5e76\u884c\u5316\uff0c\u800c\u4e14\u4ece\u78c1\u76d8\u8bfb\u53d6\u6587\u4ef6\u7136\u540e\u89e3\u6790\u5176\u5185\u5bb9\u53ef\u80fd\u4f1a\u5728\u77e9\u9635\u4e58\u6cd5\u4e4b\u524d\u5e76\u884c\u5b8c\u6210\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u4f1a\u5e26\u6765\u6027\u80fd\u4e0a\u7684\u597d\u5904\u3002\n\u8981\u5b9e\u73b0\u81ea\u52a8\u5e76\u884c\u5316\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u4e0e\u4f20\u7edf\u56fe\u7075\u78c1\u5e26\u4e0d\u540c\u7684\u4e1c\u897f\u6765\u7f16\u8bd1\u3002\u6211\u4eec\u79f0\u4e4b\u4e3aAlan Graphcode\uff1a\u4e00\u79cd\u5e26\u6709\u56fe\u5f62\u6ce8\u91ca\u7684\u5b57\u8282\u7801\u683c\u5f0f\uff0c\u4fdd\u8bc1\u6ca1\u6709\u5faa\u73af\u3002\u8981\u6267\u884c\u7684\u64cd\u4f5c\u7684\u4f9d\u8d56\u56fe(\u5176\u4e2d\u4e00\u4e9b\u64cd\u4f5c\u8fd8\u5177\u6709\u8981\u6267\u884c\u7684\u64cd\u4f5c\u5b50\u56fe)\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e86\u89e3\u54ea\u4e9b\u64cd\u4f5c\u53ef\u4ee5\u5b89\u5168\u5e76\u884c\u6267\u884c\u6240\u9700\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca(\u9690\u542b\u7684)\u64cd\u4f5c\u6267\u884c\u65f6\u95f4\u4f30\u8ba1\uff0c\u4ee5\u786e\u5b9a\u8fd9\u6837\u505a\u662f\u5426\u6709\u610f\u4e49\u3002\n\u4e4d\u4e00\u770b\uff0cAlan\u7684\u975e\u5faa\u73af\u56fe\u5f62\u4ee3\u7801\u4f3c\u4e4e\u4e0e\u4efb\u4f55\u7c7b\u578b\u7684\u63a7\u5236\u6d41\u4e0d\u517c\u5bb9\uff0c\u56e0\u4e3a\u5fc5\u987b\u5168\u90e8\u6267\u884c\u7684\u64cd\u4f5c\u7684\u4f9d\u8d56\u56fe\u4f3c\u4e4e\u6392\u9664\u4e86\u8df3\u8f6c\u64cd\u4f5c\u7684\u884c\u4e3a\uff0c\u5c31\u50cf\u7ecf\u5178\u7684JNZ(Jump If Not Zero)\u3002Alan\u5141\u8bb8IF\u8bed\u53e5\u751a\u81f3\u7ecf\u5178\u5faa\u73af\u6784\u9020\u7684\u6709\u4fdd\u8bc1\u7684\u6682\u505c\u7248\u672c\u90fd\u5728\u4e00\u4e2a\u6807\u51c6\u5e93\u4e2d\uff0c\u8be5\u5e93\u6839\u636e\u5141\u8bb8\u7684\u6700\u5927\u8fed\u4ee3\u6b21\u6570\u63d0\u4f9b\u53ef\u9884\u6d4b\u7684\u6700\u574f\u60c5\u51b5\u6267\u884c\u65f6\u95f4\u3002\u6211\u4eec\u5c06\u6f14\u793aAlan\u5982\u4f55\u901a\u8fc7\u57fa\u4e8e\u56fe\u5f62\u7684\u8868\u793a\u6765\u5141\u8bb8\u63a7\u5236\u6d41\uff0c\u4ece\u800c\u4f7f\u81ea\u52a8\u5e76\u884c\u5316\u6210\u4e3a\u53ef\u80fd\u3002\n\u8fd9\u91cc\u8fd0\u884c\u4e24\u4e2a\u64cd\u4f5cOP1\u548cOP2\uff0c\u7136\u540e\u8fd0\u884cJNZ\u3002\u5982\u679c\u68c0\u67e5\u4e0d\u662f\u96f6\uff0c\u5b83\u8df3\u5230\u53ea\u8fd0\u884cop5\u548cop6\uff0c\u5426\u5219\u5728\u8fd0\u884cop5\u548cop6\u4e4b\u524d\u8fd0\u884cop3\u548cop4\u3002\nVar a=op1()\uff1bvar b=op2(A)\uff1b\u5982\u679c(B){var c=op3()\uff1ba=op4(C)\uff1b}var d=op5(A)\uff1b\u8fd4\u56deop6(D)\uff1b\n\u5728\u8fd9\u91cc\uff0c\u6761\u4ef6\u8c03\u7528\u662f\u4e00\u4e2a\u7279\u6b8a\u7684Cond\u8282\u70b9\uff0c\u5b83\u53ef\u80fd\u6267\u884c\u4e5f\u53ef\u80fd\u4e0d\u6267\u884c\u540d\u4e3aif\u7684\u6307\u5b9a\u56fe\u3002\u4e3b\u56fe\u7684\u6240\u6709\u8282\u70b9\u90fd\u4f1a\u6267\u884c\uff0c\u4f46Cond\u64cd\u4f5c\u53ef\u80fd\u4f1a\u6267\u884c\u5185\u90e8\u5b50\u56fe\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u6267\u884c\u3002\u57fa\u4e8e\u4f9d\u8d56\u5173\u7cfb\u96c6\uff0c\u7edd\u5bf9\u4e0d\u53ef\u80fd\u8fdb\u884c\u5e76\u884c\u5316\uff0c\u4f46\u5f88\u660e\u663e\uff0cop5\u5728op1\u548ccond(If)\u90fd\u8fd0\u884c\u4e4b\u524d\u4e0d\u80fd\u8fd0\u884c\u3002\n\u56de\u5230\u7ecf\u5178\u7684\u56fe\u7075\u673a\uff0c\u56fe\u7075\u78c1\u5e26\u4e2dif\u8bed\u53e5\u7684\u53cd\u4e49\u8bcd\u662f\u4ec0\u4e48\uff1f\u8fd9\u4e0d\u662f\u5176\u4ed6\u7684\u5982\u679c\u6216\u8005\u4e0d\u662f\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u53ea\u662f\u5728\u4e0d\u540c\u6761\u4ef6\u4e0b\u7684\u5176\u4ed6\u5411\u524d\u8df3\u8dc3\u3002If\u7684\u5bf9\u7acb\u9762\u662fdo-While\u8bed\u53e5\uff0c\u56e0\u4e3a\u8fd9\u662f\u5411\u540e\u8df3\u8f6c\u3002\nVar a=op1()\uff1bvar b=op2(A)\uff1bdo{var c=op3()\uff1ba=op4(C)\uff1bvar d=op5(A)\uff1b}\u867d\u7136(D)\uff1bop6(A)\uff1b\n\u5728\u8fd9\u91cc\uff0cDOWHILE\u64cd\u4f5c\u7801\u4e00\u904d\u53c8\u4e00\u904d\u5730\u8fd0\u884c\u5faa\u73af\u5b50\u56fe\uff0c\u76f4\u5230\u6ee1\u8db3\u9884\u671f\u7684\u6761\u4ef6\u3002\u56e0\u6b64\uff0c\u6709\u4e86\u8fd9\u4e24\u4e2a\u7279\u6b8a\u7684\u64cd\u4f5c\u7801COND\u548cDOWHILE\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u91cd\u73b0JNZ\u5411\u524d\u548c\u5411\u540e\u8df3\u8dc3\u7684\u884c\u4e3a\uff0c\u6211\u4eec\u53ef\u4ee5\u7528DOWHILE\u8fdb\u5165\u65e0\u9650\u5faa\u73af\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5e94\u8be5\u662f\u56fe\u7075\u5b8c\u6210\u7684\u3002\n\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u624d\u80fd\u8ba9\u56fe\u7075\u51e0\u4e4e\u4e0d\u5b8c\u6574\u5462\uff1f\u6211\u4eec\u5728VM\u672c\u8eab\u4e2d\u521b\u5efa\u4e00\u4e2a\u5217\u8868/\u6570\u7ec4\u7c7b\u578b\u4e3a\u4e00\u7b49\u516c\u6c11\uff0c\u7136\u540e\u6839\u636e\u8be5\u5217\u8868\u6216\u5176\u4ed6\u4e00\u4e9b\u4e0d\u80fd\u88ab\u7528\u6237\u81ea\u5df1\u7684\u4ee3\u7801\u76f4\u63a5\u6539\u53d8\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u53ea\u6dfb\u52a0\u77e5\u9053\u5b83\u4eec\u8981\u64cd\u4f5c\u7684\u754c\u9650\u7684\u64cd\u4f5c\u3002\n\u73b0\u5728\uff0c\u5bf9\u4e8e\u6570\u636e\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Each\u64cd\u4f5c\u7801\uff0c\u5c06\u7ed9\u5b9a\u7684\u64cd\u4f5c\u5b50\u56fe\u5e94\u7528\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u3002Alan\u8fd0\u884c\u65f6\u6216AVM\u53ef\u4ee5\u6839\u636e\u56fe\u5f62\u7684\u9884\u671f\u6267\u884c\u65f6\u95f4\u3001\u8282\u70b9\u6570\u4ee5\u53ca\u5c06\u6570\u636e\u53d1\u9001\u5230\u591a\u4e2a\u7ebf\u7a0b\u7684\u6210\u672c\u6765\u5224\u65ad\u662f\u5426\u6267\u884cfork-Join\u3002\u5bf9\u4e8e10\u4e2a\u5143\u7d20\u53ef\u80fd\u662f\u5426\u5b9a\u7684\uff0c\u5bf9\u4e8e100\u4ebf\u5143\u7d20\u53ef\u80fd\u662f\u80af\u5b9a\u7684\uff0c\u4f46\u95e8\u69db\u5728\u54ea\u91cc\uff1f\u4e3a\u4ec0\u4e48\uff1f\u8fd9\u66f4\u597d\u5730\u8ba9\u8ba1\u7b97\u673a\u6839\u636e\u6570\u636e\u5b9e\u65f6\u505a\u51fa\u51b3\u5b9a\uff0c\u800c\u4e0d\u662f\u7531\u5f00\u53d1\u4eba\u5458\u6765\u51b3\u5b9a\u3002\n\u8fd9\u662f\u827e\u4f26\u53ca\u5176AVM\u80cc\u540e\u7684\u57fa\u672c\u7ed3\u6784\u3002\u5173\u4e8e\u56fe\u5f62\u7684\u81ea\u52a8\u8f6c\u6362\u4ee5\u66f4\u597d\u5730\u4f18\u5316IO(\u6211\u4eec\u76ee\u524d\u6b63\u5728\u8fdb\u884c\u90e8\u5206\u5de5\u4f5c)\u548c\u4e3a\u6d41\u5904\u7406\u81ea\u52a8\u91cd\u5199\u56fe\u5f62(\u6211\u4eec\u4ecd\u5728\u7814\u7a76\u4e2d)\u6709\u66f4\u591a\u7684\u597d\u5904\uff0c\u4f46\u4ec5\u6b64\u4e00\u70b9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u81ea\u52a8\u83b7\u5f97\u66f4\u597d\u7684\u5e76\u884c\u5316\u7b56\u7565\uff0c\u540c\u65f6\u4fdd\u6301\u60a8\u81ea\u5df1\u7684\u4ee3\u7801\u7b80\u77ed\u548c\u5e72\u51c0\u3002", "note_en": "Can we write programs with predictable execution that could be automatically parallelized? Part of the work of Alan Turing and Alonzo Church on  computability demonstrated that for some programs it cannot be determined ahead of time whether or not the program can be computed. This constitutes the crux of the  Halting Problem. This &#34;Turing-Completeness Problem&#34; is not an issue with what they have shown, but how the software development process is hindered by the lack of assurances on computability and our industry&#39;s lack of recognition of the burden this has put onto software developers. Further, it has been exacerbated by recent computing mechanisms, such as multithreading, NUMA, GPGPU, and distributed computing, which have moved away from the &#34;single tape&#34; Turing Machine model of computation that most programming languages are founded upon.\n The following snippet of C code succinctly contains the problems of Turing completeness complicating modern development:\n  Automatic Parallelization - It&#39;s not possible to automatically parallelize this code. The number of nodes is not clear to the compiler for it to potentially bunch those calls across threads, and it&#39;s also unclear if the function call mutates the node and adds/removes nodes to process.\n Halting Problem - It&#39;s not possible to know if the code will halt, even ignoring the idea that  doSomethingWith may always add a new  node to the one it is processing, there&#39;s nothing stopping a node from pointing at itself and never halting that way.\n Automatic parallelization is only a problem because we want/need to parallelize our code. Until very recently this was a niche need as  computing power had been increasing exponentially for decades and has only flattened in the past decade. If this was still the case it is likely that it would have remained a niche problem that only experts need to worry about, but with multicore now the norm even in personal laptops and unlikely to go away as  signal propagation itself becomes the limiting factor, it has become a problem for the average developer, as well.\n The issue with the Halting Problem itself is much more contentious. Turing demonstrated that it is not possible to determine whether arbitrary compute will halt or run forever so this lack of determinism has been tolerated as an unfortunate reality of all compute that must simply be dealt with. However, we posit that no  practially useful computation will take forever because its result cannot affect the finite reality of our lives, so programmers have already been finding an imperfect subset of Turing completeness for their own problem domains in an ad-hoc intuitive sense to be able to actually produce valuable calculations for their users.\n In a single-threaded world, this problem has been mostly a small annoyance -- on those occasions where you have written infinitely-looping code, find the section of code that the processor is executing over and over again, study how it entered this state, and figure out how to prevent that state from occurring again -- or abort on detection of said state. But in a multi-threaded, multi-machined cluster computing world, on those occasions where you have written an infinite loop, even detecting an infinite loop that spans multiple machines is a challenge, let alone gathering the data you need to debug the cause of this invalid state. This is further exacerbated by the non-determinism inherent to multiple interacting Turing machines not executing in lockstep with each other making reproduction of the problem even more difficult.\n Side-stepping the Halting Problem by defining a barely-Turing-incomplete subset, also makes the automatic parallelization story possible. Now the compiler can work with code that it can determine where and how it could parallelize the work and has the ability to model its finite execution time to determine whether or not parallelization is worth it under various conditions.\n This is the thesis of  the Alan programming language, that with minor syntax constraints (that we believe the vast majority of developers will not notice, or at least won&#39;t mind) we can be sure that the code you write always halts, and we can parallelize your code for you. We can make models for runtime estimates at compile time that only require the size and &#34;shape&#34; of the data to get an answer and can therefore determine not only how to parallelize your code, but whether or not it makes sense given the data being operated on. We have not yet accomplished all of these claims, but this is now only a matter of time and effort. :)\n The root of most of the problems with the example C code involves the ambiguity in the data structure and the behavior of the user-defined function. The other problem is that the while loop is an unbounded looping construct that cannot be reasoned about except &#34;the body of the while loop is executed zero or more times.&#34; In Alan,  arbitrary looping and recursion are disallowed, and all data is built on top of data types with knowable constraints, no arbitrary JUMP statements or data pointer logic allowed.\n What this means in practice is that instead of writing that while loop above for your list of nodes, you would write something like:\n  Your intent to perform a side-effect action on each of the nodes in the list is clear, and the Alan compiler can determine the &#34;purity&#34; of the function -- whether or not it mutates the input argument or an outer scope -- to determine if it  could execute the operations in parallel. Then at runtime it can use the estimated execution time of the function, the number of nodes in the  nodes array, and the cost to distribute that work across multiple threads, to decide  if it will execute the operations in parallel.\n  fn example(file1: string, file2: string): Array&lt;Array&lt;int64&gt;&gt; { const matrix1 = loadFile(file1).parseMatrix() const matrix2 = loadFile(file2).parseMatrix() return matrix1 * matrix2}\n Not only is the matrix multiplication a trivially parallelizable operation that likely will be parallelized for any large-ish matrix, but reading the files from disk and then parsing their contents may be done in parallel before the matrix multiplication because the performance benefit is there to do so.\n To accomplish automatic parallelization, we need something different from a classic Turing tape to compile to. We call this the Alan Graphcode: a bytecode format with graph annotations that is guaranteed to have no cycles. A dependency graph of operations to perform, with some of these also having a subgraph of operations to perform, provides us with the information we need to know which operations are safe to execute in parallel, coupled with (implied) operation execution time estimates to determine if it makes sense to do so.\n Alan&#39;s acyclic graphcode seems incompatible with any sort of control flow at first glance, though, since a dependency graph of operations that must all be executed appears to preclude the behavior of  JUMP operations, like the classic  JNZ (Jump if Not Zero).  Alan allows  if statements and even  guaranteed halting versions of classic looping constructs are in a standard library that provide a predictable &#34;worst case&#34; execution time based on a maximum iteration count allowed. We will demonstrate how Alan allows control flow with a graph-based representation that makes automatic parallelization possible.\n  Here two operations  OP1 and  OP2 run, then a  JNZ runs. If the check is not zero, it skips to only run  OP5 and  OP6, otherwise it runs  OP3 and  OP4 before running  OP5 and  OP6.\n  var a = op1();var b = op2(a);if (b) { var c = op3(); a = op4(c);}var d = op5(a);return op6(d);\n   Here, the conditional call is a special  COND node that may or may not execute the specified graph named  if. All of the nodes of the main graph are executed, but the  COND operation may or may not execute the inner subgraph. There is absolutely no parallelization possible based on the set of dependencies, but it&#39;s clear that  OP5 can&#39;t run until both  OP1 and  COND(if) are run.\n Back to classic Turing machines, what is the opposite of an  if statement in a Turing tape? It&#39;s not  else if or  else as those are just other forward jumps on different conditions. The opposite of an  if is a  do-while statement, because that is a jump  backwards.\n  var a = op1();var b = op2(a);do { var c = op3(); a = op4(c); var d = op5(a);} while (d);op6(a);\n   Here a  DOWHILE opcode runs the loop sub-graph over and over until the expected condition is met. So with these two special opcodes  COND and  DOWHILE we can reproduce the behavior of  JNZ&#39;s forwards and backwards jumping and we can enter infinite loops with  DOWHILE, meaning we should be Turing Complete.\n So how do we make this barely  not Turing complete? We make a list/array type a first class citizen in the VM itself and then we only add operations that know the bounds that they are to operate on based on that list or some other condition that cannot be  directly mutated by the user&#39;s own code.\n Now for an array of data we can have an  each opcode that applies a given sub-graph of operations to every node in the array. The Alan runtime, or AVM, can tell based on the expected execution time of the graph and the number of nodes and the cost to send that data to multiple threads whether or not to do a fork-join or not. Probably no for 10 elements and probably yes for 10 billion, but where&#39;s the threshold and why? That&#39;s something better left for a computer to decide in realtime based on the data rather than a developer.\n This is the fundamental structure behind  Alan and it&#39;s AVM. There are more goodies around automatic transforms of the graph to better optimize IO that we have partially working right now and automatic rewriting of the graph for stream processing that we&#39;re still figuring out, but with just this we can get better parallelization strategies automatically while keeping your own code short and clean.", "posttime": "2020-11-07 11:08:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b8c\u5907,completeness", "title": "\u56fe\u7075\u5b8c\u5907\u6027\u95ee\u9898", "title_en": "The Turing-Completeness Problem", "transed": 1, "url": "https://alan-lang.org/the-turing-completeness-problem.html", "via": "", "real_tags": ["\u5b8c\u5907"]}]