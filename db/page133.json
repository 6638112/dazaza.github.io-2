[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1067496, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u53d1\u73b0\u533a\u5757\u94fe\u8ff7\u4eba\uff0c\u56e0\u4e3a\u5b83\u5c06\u5f00\u6e90\u8f6f\u4ef6\u5f00\u53d1\u6269\u5c55\u5230\u5f00\u6e90+\u72b6\u6001\u3002\u8fd9\u4f3c\u4e4e\u662f\u8ba1\u7b97\u8303\u5f0f\u7684\u771f\u6b63/\u4ee4\u4eba\u5174\u594b\u7684\u521b\u65b0;\u6211\u4eec\u4e0d\u4ec5\u4ec5\u662f\u5206\u4eab\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4eab\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8ba1\u7b97\u673a\uff0c\u4efb\u4f55\u4eba\u968f\u65f6\u968f\u5730\u90fd\u53ef\u4ee5\u4ee5\u6253\u5f00\u548c\u6743\u9650\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u3002\u8fd9\u573a\u9769\u547d\u7684\u79cd\u5b50\u53ef\u4ee5\u4f7f\u7528\u6bd4\u7279\u5e01\u5f00\u59cb\uff0c\u6240\u4ee5\u6211\u53d8\u5f97\u597d\u5947\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5b83\uff0c\u4ee5\u4fbf\u76f4\u89c2\u5730\u4e86\u89e3\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u3002\u672c\u7740\u201c\u6211\u65e0\u6cd5\u521b\u9020\u7684\u4e1c\u897f\u6211\u4e0d\u660e\u767d\u7684\u7cbe\u795e\u201d\uff0c\u8fd9\u6bd4\u4ece\u5934\u5f00\u59cb\u5b9e\u73b0\u8fd9\u4e00\u70b9\u66f4\u597d\u7684\u65b9\u6cd5\uff1f\n \u6211\u4eec\u5c06\u5728\u7eafPython\u4e2d\u521b\u5efa\uff0c\u6570\u5b57\u7b7e\u540d\u548c\u5e7f\u64ad\u6bd4\u7279\u5e01\u4e8b\u52a1\uff0c\u4ece\u5934\u5f00\u59cb\uff0c\u4f9d\u8d56\u4e8e\u96f6\u4f9d\u8d56\u6027\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u6bd4\u7279\u5e01\u4ee3\u8868\u4ef7\u503c\u7684\u4e00\u70b9\u3002\u6211\u4eec\u53bb\u53d6\u5f97\u5b83\u3002\n \uff08BTW\u5982\u679c\u6b64\u5e16\u5b50\u7684\u89c6\u89c9\u683c\u5f0f\u70e6\u607c\u60a8\uff0c\u8bf7\u53c2\u9605jupyter\u7b14\u8bb0\u672c\u7248\u672c\uff0c\u5177\u6709\u76f8\u540c\u7684\u5185\u5bb9\uff09\u3002\n  \u9996\u5148\uff0c\u6211\u4eec\u5e0c\u671b\u751f\u6210\u4e00\u4e2a\u5168\u65b0\u7684\u52a0\u5bc6\u8eab\u4efd\uff0c\u8fd9\u53ea\u662f\u79c1\u4eba\u516c\u5171\u952e\u9986\u3002\u6bd4\u7279\u5e01\u4f7f\u7528\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u800c\u4e0d\u662f\u66f4\u5e38\u89c1\u7684\u4e1c\u897f\uff0c\u5982RSA\u6765\u4fdd\u62a4\u4e8b\u52a1\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4e0d\u4f1a\u5b8c\u6574\u4ecb\u7ecdECC\uff0c\u56e0\u4e3a\u5176\u4ed6\u4eba\u5df2\u7ecf\u505a\u4e86\u660e\u663e\u66f4\u597d\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982\u66f4\u597d\u7684\u5de5\u4f5c\u3002\u6211\u53d1\u73b0Andrea Corbellini\u7684\u535a\u5ba2\u6587\u7ae0\u7cfb\u5217\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8d44\u6e90\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u662f\u5199\u4ee3\u7801\uff0c\u4f46\u8981\u7406\u89e3\u4e3a\u4ec0\u4e48\u5b83\u6709\u6548\u5730\u5de5\u4f5c\uff0c\u60a8\u9700\u8981\u901a\u8fc7\u8be5\u7cfb\u5217\u3002\n \u597d\u5427\uff0c\u6240\u4ee5\u6bd4\u7279\u5e01\u4f7f\u7528secp256k1\u66f2\u7ebf\u3002\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u624b\uff0c\u6211\u53d1\u73b0\u8fd9\u90e8\u5206\u4ee4\u4eba\u7740\u8ff7 - \u6709\u4e9b\u4e0d\u540c\u7684\u66f2\u7ebf\u56fe\u4e66\u9986\u60a8\u53ef\u4ee5\u9009\u62e9\u63d0\u4f9b\u4e0d\u540c\u7684\u4e13\u4e1a\u4eba\u5458\u548c\u7f3a\u70b9\u548c\u5c5e\u6027\u3002 NIST\u53d1\u5e03\u4e86\u6709\u5173\u54ea\u4e9b\u4f7f\u7528\u7684\u5efa\u8bae\uff0c\u4f46\u4eba\u4eec\u66f4\u559c\u6b22\u4f7f\u7528\u4e0d\u592a\u53ef\u80fd\u5728\u5176\u5185\u7f6e\u540e\u95e8\u7684\u5176\u4ed6\u66f2\u7ebf\uff08\u5982SECP256K1\uff09\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u692d\u5706\u66f2\u7ebf\u662f\u4e00\u4e2a\u76f8\u5f53\u4f4e\u7684\u6570\u5b66\u6570\u5b66\u5bf9\u8c61\uff0c\u53ea\u97003\u4e2a\u6574\u6570\u6765\u5b9a\u4e49\uff1a\n \u6765\u81ea__future__\u5bfc\u5165\u6ce8\u91ca#pep 563\uff1a\u63a8\u8fdf\u8bc4\u4f30dataclasses\u5bfc\u5165dataclass\uff03https://docs.python.org/3/library/dataclasses.html\u6211\u559c\u6b22\u8fd9\u4e9b\u5f88\u591a@ dataclass\u7c7b\u66f2\u7ebf\uff1a\uff06\uff0334;\uff06\uff03 34;\uff06\uff0334;\u692d\u5706\u66f2\u7ebf\u5728\u6574\u6570\u6a21\u578b\u7684\u6574\u6570\u9886\u57df\u3002\u66f2\u7ebf\u4e0a\u7684\u70b9\u6ee1\u8db3Y ^ 2 = x ^ 3 + a * x + b\uff08mod p\uff09\u3002 \uff06\uff0334;\uff06\uff0334;\uff06\uff0334; p\uff1aint\uff03\u7684\u6709\u9650\u5b57\u6bb5\u7684\u4e3b\u8981\u6a21\u91cfa\uff1aint b\uff1aint\uff03secp256k1\u4f7f\u7528a = 0\uff0cb = 7\uff0c\u6240\u4ee5\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5904\u7406\u66f2\u7ebfY ^ 2 = x ^ 3 + 7\uff08mod p \uff08P = 0x = 0x000000600/6000000/7800300c600c600c600c600ca\uff0c\uff03a = 0 b = 0x000000600/380000c0000c0000c0000c0000c0000c0000c0000c0000c000000ca\uff0c\uff03a = 0 b = 0x00000000c0000c0000c0000c0000c0000c0000c000000c600c600ca\uff0c\uff03a = 0 b = 0x0000000000/3000000ca\uff0c\uff03a = 0 b = 0x00000000000000/3000000capp = 7\uff09\n \u9664\u4e86\u5b9e\u9645\u66f2\u7ebf\u4e4b\u5916\uff0c\u6211\u4eec\u9664\u4e86\u66f2\u7ebf\u5468\u671f\u4e0a\u7684\u4e00\u4e2a\u56fa\u5b9a\u7684\u201c\u8d77\u70b9\u201d\uff0c\u5b83\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u53d1\u7535\u673a\u70b9\uff0c\u8fd9\u4e9b\u66f2\u7ebf\u4e0a\u7684\u4e00\u4e9b\u56fa\u5b9a\u7684\u201c\u8d77\u59cb\u70b9\u201d\u7528\u4e8e\u5728\u66f2\u7ebf\u5468\u56f4\u542f\u52a8\u201c\u968f\u673a\u884c\u8d70\u201d\u3002\u53d1\u7535\u673a\u662f\u516c\u5f00\u7684\uff0c\u5e76\u540c\u610f\u6301\u7eed\uff1a \n@ dataclass\u7c7b\u70b9\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u66f2\u7ebf\u4e0a\u7684\u6574\u6570\u70b9\uff08x\uff0cy\uff09\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u66f2\u7ebf\uff1a\u66f2\u7ebfX\uff1aINT Y\uff1aINT G =\u70b9\uff08bitcoin_curve\uff0cX = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\uff0cY = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\uff09\uff03\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u8be5\u53d1\u7535\u673a\u70b9\u7684\u786e\u662f\u66f2\u7ebf\uff0c\u5373\uff0cY 1 2 = X ^ 3 + 7\uff08MOD p\uff09\u6253\u5370\uff08\uff06\uff0334;\u53d1\u7535\u673a\u5728\u66f2\u7ebf\u4e0a\uff1a\uff06\uff0334;\uff08g\u3002y ** 2  -  g.x ** 3  -  7\uff09\uff05bitcoin_curve\u3002p == 0\uff09\uff03\u4e00\u4e9b\u5176\u4ed6\u5b8c\u5168\u968f\u673a\u7684\u70b9\u5f53\u7136\u4e0d\u4f1a\u5728\u66f2\u7ebf\u4e0a\uff0c_MOST_\u53ef\u80fd\u4f1a\u968f\u673a\u8fdb\u53e3\u3002\u79cd\u5b50\uff081337\uff09x =\u968f\u673a\u3002 RandRange\uff080\uff0c\u6bd4\u7279\u5e01_Curve\u3002P\uff09Y =\u968f\u673a\u3002 RandRange\uff080\uff0c\u6bd4\u7279\u5e01_Curve\u3002P\uff09\u6253\u5370\uff08\uff06\uff0334;\u5b8c\u5168\u968f\u673a\u70b9\u4e0d\u662f\uff1a\uff06\uff0334;\uff08y ** 2  -  x ** 3  -  7\uff09\uff05\u6bd4\u7279\u5e01_curve\u3002p == 0\uff09\n  \u6700\u540e\uff0c\u5df2\u77e5\u751f\u6210\u70b9G\u7684\u987a\u5e8f\uff0c\u5e76\u4e14\u6709\u6548\u5730\u662f\u6211\u4eec\u5728\u66f2\u7ebf\u5468\u56f4\u7684\u5468\u671f\u4e0a\u7684\uff08x\uff0cy\uff09\u6574\u6570\u5143\u7ec4\u65b9\u9762\u4f7f\u7528\u7684\u201c\u8bbe\u7f6e\u7684\u5927\u5c0f\u201d\u3002\u6211\u559c\u6b22\u5c06\u6b64\u4fe1\u606f\u7ec4\u7ec7\u6210\u4e00\u4e2a\u66f4\u591a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4f1a\u8c03\u7528\u751f\u6210\u5668\uff1a\n @ dataclass\u7c7b\u751f\u6210\u5668\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u66f2\u7ebf\u4e0a\u7684\u53d1\u7535\u673a\uff1a\u521d\u59cb\u70b9\u548c\uff08\u9884\u8ba1\uff09\u79e9\u5e8f\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; g\uff1a\u70b9\uff03\u66f2\u7ebf\u4e0a\u7684\u53d1\u7535\u70b9n\uff1aint\uff03\u53d1\u7535\u70b9\u7684\u987a\u5e8f\uff0c\u6240\u4ee50 * g = n * g = inf bitcoin_gen =\u751f\u6210\u5668\uff08g = g\uff0c\uff03g\u7684\u987a\u5e8f\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u53ef\u4ee5\u5728\u6570\u5b66\u4e0a\u6d3e\u751fN = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBAAEDCE6AF48A03BBFD25E8CD0364141\n \u8bf7\u6ce8\u610f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5b8c\u6210\u4efb\u4f55\u4e8b\u60c5\uff0c\u8fd9\u4e00\u5207\u90fd\u53ea\u662f\u5bf9\u67d0\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u5b9a\u4e49\uff0c\u5e76\u7528\u4e0e\u6bd4\u7279\u5e01\u4e2d\u4f7f\u7528\u7684\u692d\u5706\u66f2\u7ebf\u76f8\u5173\u7684\u516c\u77e5\u5e38\u6570\u586b\u5145\u5b83\u4eec\u3002\u8fd9\u5373\u5c06\u6539\u53d8\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u51c6\u5907\u597d\u751f\u6210\u6211\u4eec\u7684\u79c1\u94a5\u3002\u79c1\u94a5\uff08\u6216\u201c\u79d8\u5bc6\u5bc6\u94a5\u201d\u5982\u6211\u6240\u8bf4\u7684\uff09\u5373\u5c06\u5230\u6765\uff09\u53ea\u662f\u6ee1\u8db31\uff06lt; = key\uff06lt;\u7684\u968f\u673a\u6574\u6570\u3002 n\uff08\u53ec\u56den\u662fg\u7684\u987a\u5e8f\uff09\uff1a\n \uff03secret_key = random.randrange\uff081\uff0cbitcoin_gen.nn\uff09\uff03\u8fd9\u662f_would_ do secret_key = int\u7684\u65b9\u5f0f\u3002 from_bytes\uff08B\uff06\uff0339; Andrej\u5f88\u9177\uff1aP\uff06\uff0339;\uff0c\uff06\uff0339; Big\uff06\uff0339;\uff09\uff03\u8fd9\u662f\u6211\u5c06\u5982\u4f55\u4e3a\u518d\u73b0\u6027assert 1\uff06lt; secret_key\uff06lt;\u6bd4\u7279\u5e01_gen\u3002 n\u6253\u5370\uff08secret_key\uff09\n  \u8fd9\u662f\u6211\u4eec\u7684\u79d8\u5bc6\u5bc6\u94a5 - \u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u7a81\u51fa\u7684\u6574\u6570\uff0c\u4f46\u4efb\u4f55\u77e5\u9053\u5b83\u53ef\u4ee5\u63a7\u5236\u4e0e\u5b83\u76f8\u5173\u7684\u6bd4\u7279\u5e01\u533a\u5757\u94fe\u4e2d\u62e5\u6709\u7684\u6240\u6709\u8d44\u91d1\u3002\u5728\u6700\u7b80\u5355\u7684\uff0c\u6700\u5e38\u89c1\u7684vanilla\u7528\u4f8b\u7684\u6bd4\u7279\u5e01\u662f\u63a7\u5236\u60a8\u5e10\u6237\u7684\u5355\u4e2a\u201c\u5bc6\u7801\u201d\u3002\u5f53\u7136\uff0c\u5728\u6211\u4e0a\u9762\u7684\u4e00\u4e9b\u5176\u4ed6Andrej\u624b\u52a8\u751f\u6210\u4e86\u4ed6\u4eec\u7684\u79d8\u5bc6\u5bc6\u94a5\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0e\u8fd9\u4e2a\u79d8\u5bc6\u5bc6\u94a5\u76f8\u5173\u7684\u94b1\u5305\u5f88\u53ef\u80fd\u662f\u96f6\u6bd4\u7279\u5e01\u7684\u5e73\u8861:)\u3002\u5982\u679c\u5b83\u6ca1\u6709\uff0c\u6211\u4eec\u786e\u5b9e\u975e\u5e38\u5e78\u8fd0\u3002\n \u6211\u4eec\u73b0\u5728\u8981\u751f\u6210\u516c\u94a5\uff0c\u8fd9\u662f\u4e8b\u60c5\u5f00\u59cb\u53d8\u5f97\u6709\u8da3\u7684\u5730\u65b9\u3002\u516c\u94a5\u662f\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u4ece\u6dfb\u52a0\u53d1\u7535\u673a\u70b9\u5230\u81ea\u8eab\u7684\u79d8\u5bc6\u65f6\u95f4\u3002\u5373\uff0c\u6211\u4eec\u6709\uff1apublic_key = g + g + g +\uff08\u79d8\u5bc6\u952e\u65f6\uff09+ g = secret_key * G.\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684'+'\uff08\u6dfb\u52a0\uff09\u548c'*'\uff08\u6b21\uff09\u7b26\u53f7\u90fd\u975e\u5e38\u7279\u522b\uff0c\u7565\u5fae\u6df7\u6dc6\u3002\u79d8\u5bc6\u5bc6\u94a5\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4f46\u662f\u53d1\u7535\u673a\u70b9G\u662f\u4e00\u4e2a\uff08x\uff0cy\uff09\u5143\u7ec4\uff0c\u5b83\u662f\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5bfc\u81f4\uff08x\uff0cy\uff09\u5143\u7ec4\u516c\u94a5\uff0c\u518d\u6b21\u66f2\u7ebf\u4e0a\u7684\u4e00\u4e2a\u70b9\u3002\u8fd9\u662f\u6211\u4eec\u5fc5\u987b\u5728\u692d\u5706\u66f2\u7ebf\u4e0a\u5b9e\u9645\u5b9a\u4e49\u52a0\u6cd5\u8fd0\u7b97\u7b26\u7684\u5730\u65b9\u3002\u5b83\u5177\u6709\u4e00\u4e2a\u975e\u5e38\u5177\u4f53\u7684\u5b9a\u4e49\u548c\u51e0\u4f55\u89e3\u91ca\uff08\u89c1\u4e0a\u9762\u7684Andrea\u7684\u53d1\u5e03\uff09\uff0c\u4f46\u5b9e\u9645\u5b9e\u73b0\u76f8\u5bf9\u7b80\u5355\uff1a \nWarning: Can only detect less than 5000 characters\nWarning: Can only detect less than 5000 characters", "note_en": "I find blockchain fascinating because it extends open source software development to open source + state. This seems to be a genuine/exciting innovation in computing paradigms; We don\u2019t just get to share code, we get to share a running computer, and anyone anywhere can use it in an open and permissionless manner. The seeds of this revolution arguably began with Bitcoin, so I became curious to drill into it in some detail to get an intuitive understanding of how it works. And in the spirit of \u201cwhat I cannot create I do not understand\u201d, what better way to do this than implement it from scratch?\n We are going to create, digitally sign, and broadcast a Bitcoin transaction in pure Python, from scratch, and with zero dependencies. In the process we\u2019re going to learn quite a bit about how Bitcoin represents value. Let\u2019s get it.\n (btw if the visual format of this post annoys you, see the  jupyter notebook version, which has identical content).\n  First we want to generate a brand new cryptographic identity, which is just a private, public keypair. Bitcoin uses  Elliptic Curve Cryptography instead of something more common like RSA to secure the transactions. I am not going to do a full introduction to ECC here because others have done a significantly better job, e.g. I found  Andrea Corbellini\u2019s blog post series to be an exceptional resource. Here we are just going to write the code but to understand why it works mathematically you\u2019d need to go through the series.\n Okay so Bitcoin uses the  secp256k1 curve. As a newbie to the area I found this part fascinating - there are entire libraries of different curves you can choose from which offer different pros/cons and properties. NIST publishes recommendations on which ones to use, but people prefer to use other curves (like secp256k1) that are less likely to have backdoors built into them. Anyway, an elliptic curve is a fairly low dimensional mathematical object and takes only 3 integers to define:\n from  __future__  import  annotations  # PEP 563: Postponed Evaluation of Annotations from  dataclasses  import  dataclass  # https://docs.python.org/3/library/dataclasses.html I like these a lot @ dataclass class  Curve :  &#34;&#34;&#34; Elliptic Curve over the field of integers modulo a prime. Points on the curve satisfy y^2 = x^3 + a*x + b (mod p). &#34;&#34;&#34;  p :  int  # the prime modulus of the finite field  a :  int  b :  int # secp256k1 uses a = 0, b = 7, so we&#39;re dealing with the curve y^2 = x^3 + 7 (mod p) bitcoin_curve  =  Curve (  p  =  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F ,  a  =  0x0000000000000000000000000000000000000000000000000000000000000000 ,  # a = 0  b  =  0x0000000000000000000000000000000000000000000000000000000000000007 ,  # b = 7 )\n In addition to the actual curve we define a Generator point, which is just some fixed \u201cstarting point\u201d on the curve\u2019s cycle, which is used to kick off the \u201crandom walk\u201d around the curve. The generator is a publicly known and agreed upon constant:\n @ dataclass class  Point :  &#34;&#34;&#34; An integer point (x,y) on a Curve &#34;&#34;&#34;  curve :  Curve  x :  int  y :  int G  =  Point (  bitcoin_curve ,  x  =  0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798 ,  y  =  0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 , ) # we can verify that the generator point is indeed on the curve, i.e. y^2 = x^3 + 7 (mod p) print ( &#34;Generator IS on the curve: &#34; ,  ( G . y ** 2  -  G . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 ) # some other totally random point will of course not be on the curve, _MOST_ likely import  random random . seed ( 1337 ) x  =  random . randrange ( 0 ,  bitcoin_curve . p ) y  =  random . randrange ( 0 ,  bitcoin_curve . p ) print ( &#34;Totally random point is not: &#34; ,  ( y ** 2  -  x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 )\n  Finally, the order of the generating point G is known, and is effectively the \u201csize of the set\u201d we are working with in terms of the (x,y) integer tuples on the cycle around the curve. I like to organize this information into one more data structure I\u2019ll call Generator:\n @ dataclass class  Generator :  &#34;&#34;&#34; A generator over a curve: an initial point and the (pre-computed) order &#34;&#34;&#34;  G :  Point  # a generator point on the curve  n :  int  # the order of the generating point, so 0*G = n*G = INF bitcoin_gen  =  Generator (  G  =  G ,  # the order of G is known and can be mathematically derived  n  =  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 , )\n Notice that we haven\u2019t really done anything so far, it\u2019s all just definition of some data structures, and filling them with the publicly known constants related to the elliptic curves used in Bitcoin. This is about to change, as we are ready to generate our private key. The private key (or \u201c secret key\u201d as I\u2019ll call it going forward) is simply a random integer that satisfies 1 &lt;= key &lt; n (recall n is the order of G):\n # secret_key = random.randrange(1, bitcoin_gen.n) # this is how you _would_ do it secret_key  =  int . from_bytes ( b &#39;Andrej is cool :P&#39; ,  &#39;big&#39; )  # this is how I will do it for reproducibility assert  1  &lt;=  secret_key  &lt;  bitcoin_gen . n print ( secret_key )\n  This is our secret key - it is a a pretty unassuming integer but anyone who knows it can control all of the funds you own on the Bitcoin blockchain, associated with it. In the simplest, most common vanilla use case of Bitcoin it is the single \u201cpassword\u201d that controls your account. Of course, in the exceedingly unlikely case that some other Andrej manually generated their secret key as I did above, the wallet associated with this secret key most likely has a balance of zero bitcoin :). If it didn\u2019t we\u2019d be very lucky indeed.\n We are now going to generate the  public key, which is where things start to get interesting. The public key is the point on the curve that results from adding the generator point to itself secret_key times. i.e. we have: public_key = G + G + G + (secret key times) + G = secret_key * G. Notice that both the \u2018+\u2019 (add) and the \u2018*\u2019 (times) symbol here is very special and slightly confusing. The secret key is an integer, but the generator point G is an (x,y) tuple that is a Point on the Curve, resulting in an (x,y) tuple public key, again a Point on the Curve. This is where we have to actually define the Addition operator on an elliptic curve. It has a very specific definition and a geometric interpretation (see Andrea\u2019s post above), but the actual implementation is relatively simple:\n INF  =  Point ( None ,  None ,  None )  # special point at &#34;infinity&#34;, kind of like a zero def  extended_euclidean_algorithm ( a ,  b ):  &#34;&#34;&#34; Returns (gcd, x, y) s.t. a * x + b * y == gcd This function implements the extended Euclidean algorithm and runs in O(log b) in the worst case, taken from Wikipedia. &#34;&#34;&#34;  old_r ,  r  =  a ,  b  old_s ,  s  =  1 ,  0  old_t ,  t  =  0 ,  1  while  r  !=  0 :  quotient  =  old_r  //  r  old_r ,  r  =  r ,  old_r  -  quotient  *  r  old_s ,  s  =  s ,  old_s  -  quotient  *  s  old_t ,  t  =  t ,  old_t  -  quotient  *  t  return  old_r ,  old_s ,  old_t def  inv ( n ,  p ):  &#34;&#34;&#34; returns modular multiplicate inverse m s.t. (n * m) % p == 1 &#34;&#34;&#34;  gcd ,  x ,  y  =  extended_euclidean_algorithm ( n ,  p )  # pylint: disable=unused-variable  return  x  %  p def  elliptic_curve_addition ( self ,  other :  Point )  -&gt;  Point :  # handle special case of P + 0 = 0 + P = 0  if  self  ==  INF :  return  other  if  other  ==  INF :  return  self  # handle special case of P + (-P) = 0  if  self . x  ==  other . x  and  self . y  !=  other . y :  return  INF  # compute the &#34;slope&#34;  if  self . x  ==  other . x :  # (self.y = other.y is guaranteed too per above check)  m  =  ( 3  *  self . x ** 2  +  self . curve . a )  *  inv ( 2  *  self . y ,  self . curve . p )  else :  m  =  ( self . y  -  other . y )  *  inv ( self . x  -  other . x ,  self . curve . p )  # compute the new point  rx  =  ( m ** 2  -  self . x  -  other . x )  %  self . curve . p  ry  =  ( - ( m * ( rx  -  self . x )  +  self . y ))  %  self . curve . p  return  Point ( self . curve ,  rx ,  ry ) Point . __add__  =  elliptic_curve_addition  # monkey patch addition into the Point class\n I admit that it may look a bit scary and understanding and re-deriving the above took me a good half of a day. Most of the complexity comes from all of the math being done with modular arithmetic. So even simple operations like division \u2018/\u2019 suddenly require algorithms such as the modular multiplicative inverse  inv. But the important thing to note is that everything is just a bunch of adds/multiplies over the tuples (x,y) with some modulo p sprinkled everywhere in between. Let\u2019s take it for a spin by generating some trivial (private, public) keypairs:\n # if our secret key was the integer 1, then our public key would just be G: sk  =  1 pk  =  G print ( f &#34; secret key:  { sk } \\n  public key:  { ( pk . x ,  pk . y ) } &#34; ) print ( &#34;Verify the public key is on the curve: &#34; ,  ( pk . y ** 2  -  pk . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 ) # if it was 2, the public key is G + G: sk  =  2 pk  =  G  +  G print ( f &#34; secret key:  { sk } \\n  public key:  { ( pk . x ,  pk . y ) } &#34; ) print ( &#34;Verify the public key is on the curve: &#34; ,  ( pk . y ** 2  -  pk . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 ) # etc.: sk  =  3 pk  =  G  +  G  +  G print ( f &#34; secret key:  { sk } \\n  public key:  { ( pk . x ,  pk . y ) } &#34; ) print ( &#34;Verify the public key is on the curve: &#34; ,  ( pk . y ** 2  -  pk . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 )\n secret key: 1 public key: (55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424)Verify the public key is on the curve: True secret key: 2 public key: (89565891926547004231252920425935692360644145829622209833684329913297188986597, 12158399299693830322967808612713398636155367887041628176798871954788371653930)Verify the public key is on the curve: True secret key: 3 public key: (112711660439710606056748659173929673102114977341539408544630613555209775888121, 25583027980570883691656905877401976406448868254816295069919888960541586679410)Verify the public key is on the curve: True\n Okay so we have some keypairs above, but we want the public key associated with our randomly generator secret key above. Using just the code above we\u2019d have to add G to itself a very large number of times, because the secret key is a large integer. So the result would be correct but it would run very slow. Instead, let\u2019s implement the \u201cdouble and add\u201d algorithm to dramatically speed up the repeated addition. Again, see the post above for why it works, but here it is:\n def  double_and_add ( self ,  k :  int )  -&gt;  Point :  assert  isinstance ( k ,  int )  and  k  &gt;=  0  result  =  INF  append  =  self  while  k :  if  k  &amp;  1 :  result  +=  append  append  +=  append  k  &gt;&gt;=  1  return  result # monkey patch double and add into the Point class for convenience Point . __rmul__  =  double_and_add # &#34;verify&#34; correctness print ( G  ==  1 * G ) print ( G  +  G  ==  2 * G ) print ( G  +  G  +  G  ==  3 * G )\n  # efficiently calculate our actual public key! public_key  =  secret_key  *  G print ( f &#34;x:  { public_key . x } \\n y:  { public_key . y } &#34; ) print ( &#34;Verify the public key is on the curve: &#34; ,  ( public_key . y ** 2  -  public_key . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 )\n  With the private/public key pair we\u2019ve now generated our crypto identity. Now it is time to derive the associated Bitcoin wallet address. The wallet address is not just the public key itself, but it can be deterministically derived from it and has a few extra goodies (such as an embedded checksum). Before we can generate the address though we need to define some hash functions. Bitcoin uses the ubiquitous SHA-256 and also RIPEMD-160. We could just plug and play use the implementations in Python\u2019s  hashlib, but this is supposed to be a zero-dependency implementation, so  import hashlib is cheating. So first here is the SHA256 implementation I wrote in pure Python following the (relatively readable) NIST  FIPS PUB 180-4 doc:\n def  gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace ():  &#34;&#34;&#34; SHA256 implementation. Follows the FIPS PUB 180-4 description for calculating SHA-256 hash function https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf Noone in their right mind should use this for any serious reason. This was written purely for educational purposes. &#34;&#34;&#34;  import  math  from  itertools  import  count ,  islice  # -----------------------------------------------------------------------------  # SHA-256 Functions, defined in Section 4  def  rotr ( x ,  n ,  size = 32 ):  return  ( x  &gt;&gt;  n )  |  ( x  &lt;&lt;  size  -  n )  &amp;  ( 2 ** size  -  1 )  def  shr ( x ,  n ):  return  x  &gt;&gt;  n  def  sig0 ( x ):  return  rotr ( x ,  7 )  ^  rotr ( x ,  18 )  ^  shr ( x ,  3 )  def  sig1 ( x ):  return  rotr ( x ,  17 )  ^  rotr ( x ,  19 )  ^  shr ( x ,  10 )  def  capsig0 ( x ):  return  rotr ( x ,  2 )  ^  rotr ( x ,  13 )  ^  rotr ( x ,  22 )  def  capsig1 ( x ):  return  rotr ( x ,  6 )  ^  rotr ( x ,  11 )  ^  rotr ( x ,  25 )  def  ch ( x ,  y ,  z ):  return  ( x  &amp;  y ) ^  ( ~ x  &amp;  z )  def  maj ( x ,  y ,  z ):  return  ( x  &amp;  y )  ^  ( x  &amp;  z )  ^  ( y  &amp;  z )  def  b2i ( b ):  return  int . from_bytes ( b ,  &#39;big&#39; )  def  i2b ( i ):  return  i . to_bytes ( 4 ,  &#39;big&#39; )  # -----------------------------------------------------------------------------  # SHA-256 Constants  def  is_prime ( n ):  return  not  any ( f  for  f  in  range ( 2 , int ( math . sqrt ( n )) + 1 )  if  n % f  ==  0 )  def  first_n_primes ( n ):  return  islice ( filter ( is_prime ,  count ( start = 2 )),  n )  def  frac_bin ( f ,  n = 32 ):  &#34;&#34;&#34; return the first n bits of fractional part of float f &#34;&#34;&#34;  f  -=  math . floor ( f )  # get only the fractional part  f  *=  2 ** n  # shift left  f  =  int ( f )  # truncate the rest of the fractional content  return  f  def  genK ():  &#34;&#34;&#34; Follows Section 4.2.2 to generate K The first 32 bits of the fractional parts of the cube roots of the first 64 prime numbers: 428a2f98 71374491 b5c0fbcf e9b5dba5 3956c25b 59f111f1 923f82a4 ab1c5ed5 d807aa98 12835b01 243185be 550c7dc3 72be5d74 80deb1fe 9bdc06a7 c19bf174 e49b69c1 efbe4786 0fc19dc6 240ca1cc 2de92c6f 4a7484aa 5cb0a9dc 76f988da 983e5152 a831c66d b00327c8 bf597fc7 c6e00bf3 d5a79147 06ca6351 14292967 27b70a85 2e1b2138 4d2c6dfc 53380d13 650a7354 766a0abb 81c2c92e 92722c85 a2bfe8a1 a81a664b c24b8b70 c76c51a3 d192e819 d6990624 f40e3585 106aa070 19a4c116 1e376c08 2748774c 34b0bcb5 391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3 748f82ee 78a5636f 84c87814 8cc70208 90befffa a4506ceb bef9a3f7 c67178f2 &#34;&#34;&#34;  return  [ frac_bin ( p  **  ( 1 / 3.0 ))  for  p  in  first_n_primes ( 64 )]  def  genH ():  &#34;&#34;&#34; Follows Section 5.3.3 to generate the initial hash value H^0 The first 32 bits of the fractional parts of the square roots of the first 8 prime numbers. 6a09e667 bb67ae85 3c6ef372 a54ff53a 9b05688c 510e527f 1f83d9ab 5be0cd19 &#34;&#34;&#34;  return  [ frac_bin ( p  **  ( 1 / 2.0 ))  for  p  in  first_n_primes ( 8 )]  # -----------------------------------------------------------------------------  def  pad ( b ):  &#34;&#34;&#34; Follows Section 5.1: Padding the message &#34;&#34;&#34;  b  =  bytearray ( b )  # convert to a mutable equivalent  l  =  len ( b )  *  8  # note: len returns number of bytes not bits  # append but &#34;1&#34; to the end of the message  b . append ( 0b10000000 )  # appending 10000000 in binary (=128 in decimal)  # follow by k zero bits, where k is the smallest non-negative solution to  # l + 1 + k = 448 mod 512  # i.e. pad with zeros until we reach 448 (mod 512)  while  ( len ( b ) * 8 )  %  512  !=  448 :  b . append ( 0x00 )  # the last 64-bit block is the length l of the original message  # expressed in binary (big endian)  b . extend ( l . to_bytes ( 8 ,  &#39;big&#39; ))  return  b  def  sha256 ( b :  bytes )  -&gt;  bytes :  # Section 4.2  K  =  genK ()  # Section 5: Preprocessing  # Section 5.1: Pad the message  b  =  pad ( b )  # Section 5.2: Separate the message into blocks of 512 bits (64 bytes)  blocks  =  [ b [ i : i + 64 ]  for  i  in  range ( 0 ,  len ( b ),  64 )]  # for each message block M^1 ... M^N  H  =  genH ()  # Section 5.3  # Section 6  for  M  in  blocks :  # each block is a 64-entry array of 8-bit bytes  # 1. Prepare the message schedule, a 64-entry array of 32-bit words  W  =  []  for  t  in  range ( 64 ):  if  t  &lt;=  15 :  # the first 16 words are just a copy of the block  W . append ( bytes ( M [ t * 4 : t * 4 + 4 ]))  else :  term1  =  sig1 ( b2i ( W [ t - 2 ]))  term2  =  b2i ( W [ t - 7 ])  term3  =  sig0 ( b2i ( W [ t - 15 ]))  term4  =  b2i ( W [ t - 16 ])  total  =  ( term1  +  term2  +  term3  +  term4 )  %  2 ** 32  W . append ( i2b ( total ))  # 2. Initialize the 8 working variables a,b,c,d,e,f,g,h with prev hash value  a ,  b ,  c ,  d ,  e ,  f ,  g ,  h  =  H  # 3.  for  t  in  range ( 64 ):  T1  =  ( h  +  capsig1 ( e )  +  ch ( e ,  f ,  g )  +  K [ t ]  +  b2i ( W [ t ]))  %  2 ** 32  T2  =  ( capsig0 ( a )  +  maj ( a ,  b ,  c ))  %  2 ** 32  h  =  g  g  =  f  f  =  e  e  =  ( d  +  T1 )  %  2 ** 32  d  =  c  c  =  b  b  =  a  a  =  ( T1  +  T2 )  %  2 ** 32  # 4. Compute the i-th intermediate hash value H^i  delta  =  [ a ,  b ,  c ,  d ,  e ,  f ,  g ,  h ]  H  =  [( i1  +  i2 )  %  2 ** 32  for  i1 ,  i2  in  zip ( H ,  delta )]  return  b &#39;&#39; . join ( i2b ( i )  for  i  in  H )  return  sha256 sha256  =  gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace () print ( &#34;verify empty hash:&#34; ,  sha256 ( b &#39;&#39; ). hex ())  # should be e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 print ( sha256 ( b &#39;here is a random bytes message, cool right?&#39; ). hex ()) print ( &#34;number of bytes in a sha256 digest: &#34; ,  len ( sha256 ( b &#39;&#39; )))\n  Okay the reason I wanted to implement this from scratch and paste it here is that I want you to note that again there is nothing too scary going on inside. SHA256 takes some bytes message that is to be hashed, it first pads the message, then breaks it up into chunks, and passes these chunks into what can best be described as a fancy \u201cbit mixer\u201d, defined in section 3, that contains a number of bit shifts and binary operations orchestrated in a way that is frankly beyond me, but that results in the beautiful properties that SHA256 offers. In particular, it creates a fixed-sized, random-looking short digest of any variably-sized original message s.t. the scrambling is not invertible and also it is basically computationally impossible to construct a different message that hashes to any given digest.\n Bitcoin uses SHA256 everywhere to create hashes, and of course it is the core element in Bitcoin\u2019s Proof of Work, where the goal is to modify the block of transactions until the whole thing hashes to a sufficiently low number (when the bytes of the digest are interpreted as a number). Which, due to the nice properties of SHA256, can only be done via brute force search. So all of the ASICs designed for efficient mining are just incredibly optimized close-to-the-metal implementations of exactly the above code.\n Anyway before we can generate our address we also need the RIPEMD160 hash function, which I found on the internet and shortened and cleaned up:\n def  gen_ripemd160_with_variable_scope_protector_to_not_pollute_global_namespace ():  import  sys\n......", "posttime": "2021-06-23 01:08:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6bd4\u7279\u5e01,python,\u5212\u4f24,tour,\u66f2\u7ebf", "title": "\u5728Python\u7684\u6bd4\u7279\u5e01\u5212\u4f24\u4e4b\u65c5 ", "title_en": "A from-scratch tour of Bitcoin in Python", "transed": 1, "url": "https://karpathy.github.io/2021/06/21/blockchain/", "via": "", "real_tags": ["\u6bd4\u7279\u5e01", "python", "\u5212\u4f24", "tour", "\u66f2\u7ebf"]}, {"category": "", "categoryclass": "", "imagename": "f8b746c90a0ed763e726acfcd1920e1c.jpg", "infoid": 1067494, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u7834\u88c2\u7684\u8001\u57fa\u77f3\u88ab\u6700\u9ad8\u6cd5\u9662\u4eceNCAA\u4e0b\u6765\u731b\u62c9\u51fa\u6765\uff0c\u5b83\u5c06\u5bfc\u81f4\u90a3\u5bb6\u7c97\u66b4\u7684\u623f\u5b50\u7684\u603b\u5d29\u6e83\uff0c\u53ea\u662f\u4f60\u770b\u3002\u5f88\u5feb\u5c31\u4f1a\u5728Mark Emmert\u7684\u811a\u4e0b\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\uff0c\u800c\u662f\u51e0\u4e2a\u8150\u70c2\u7684\u8463\u4e8b\u4f1a\u3002 NCAA\u5e94\u8be5\u7b7e\u51fa\uff1a\u201c\u8fd9\u4e2a\u8d22\u4ea7\u53d7\u5230\u8c34\u8d23\u3002\u201d\n \u8fd9\u662f\u4e00\u4e2a\u4e0d\u53ef\u907f\u514d\u7684\u65f6\u523b\uff0c\u4f46\u57c3\u8499\u7279\u548c\u4ed6\u7684\u4e2d\u5c09\u5728\u6cd5\u5f8b\u8d39\u7528\u4e2d\u5ea6\u8fc7\u4e86\u591a\u5e74\u548c\u6570\u5341\u4ebf\u7f8e\u5143\uff0c\u8bd5\u56fe\u901a\u8fc7\u6cd5\u9662\u6218\u6597\u8fd0\u52a8\u5458\u800c\u4e0d\u662f\u56de\u5f52\u57fa\u672c\u4e0a\u662f\u4ed6\u4eec\u88ab\u76d7\u7684\u8d22\u4ea7\u3002 \u201cNCAA\u4e0d\u9ad8\u4e8e\u6cd5\u5f8b\uff0c\u201dBrett M. Kavanaugh Justice Brett M. Kavanaugh\u5728NCAA v\u7684\u4e00\u81f49-0\u51b3\u5b9a\u4e2d\u5199\u9053\u3002\u963f\u5c14\u65af\u987f\u54e6\uff0c\u4f46\u5b83\u8ba4\u4e3a\u8fd9\u662f\u3002\u5728\u6574\u4e2a\u73b0\u4ee3\u6cd5\u5f8b\u53f2\u4e0a\uff0cNCAA\u7684\u7ba1\u5bb6\u4f9d\u9760\u50b2\u6162\u7684\u5047\u8bbe\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6240\u505a\u7684\u672c\u8d28\u6240\u6b20\u7684\u6cd5\u9662\u5f52\u548e\u4e8e\uff1a\u4ed6\u4eec\u662f\u4e1a\u4f59\u4e3b\u4e49\u548c\u5b66\u672f\u7eaf\u6d01\u7684\u5b88\u95e8\u4eba\uff0c\u5373\u4f7f\u4ed6\u4eec\u5265\u79bb\u548c\u878d\u5408\u548c\u6536\u96c6\u7684\u540e\u671frakeoffs\u3002\n \u5728\u53e5\u5b50\u4e4b\u540e\uff0c\u5728\u77ed\u8bed\u4e4b\u540e\u77ed\u8bed\uff0c\u6700\u9ad8\u5bab\u5ef7\u79bb\u5f00NCAA\u65e0\u4e0e\u4f26\u4e4b\u88f8\u9732\uff0c\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u7559\u4e0b\u4e86\u5b83\u7684\u81ea\u8d1f\u3002\n   \u201cNCAA Couches\u4e3a\u6ca1\u6709\u652f\u4ed8\u65e0\u5bb3\u7684\u6807\u7b7e\u652f\u4ed8\u5b66\u751f\u8fd0\u52a8\u5458\u7684\u8bba\u70b9\uff0c\u201dKavanaugh\u5199\u9053\u3002 \u201c\u4f46\u662f\u6807\u7b7e\u4e0d\u80fd\u4f2a\u9020\u73b0\u5b9e\uff1aNCAA\u7684\u5546\u4e1a\u6a21\u5f0f\u5728\u7f8e\u56fd\u51e0\u4e4e\u4efb\u4f55\u5176\u4ed6\u884c\u4e1a\u90fd\u4f1a\u5728\u7f8e\u56fd\u7684\u51e0\u4e4e\u662f\u8fdd\u6cd5\u7684\u3002\u201d\u7e41\u8363\u3002\u811a\u8e1d\u5468\u56f4\u7684\u88e4\u5b50\u3002\n \u8fd9\u53e5\u8bdd\u80af\u5b9a\u4f1a\u5bfc\u81f4\u8d4b\u4e88\u8bc9\u8bbc\u3002\u8fd9\u5c31\u662f\u8fd9\u4e00\u70b9\uff0c\u4eceNeil M.\u6208\u5c14\u82cf\u5947\u5927\u81f4\u610f\u89c1\uff1a\u201c\u7b80\u5355\u5730\u8bf4\uff0c\u8fd9\u5957\u8bc9\u8bbc\u6d89\u53ca\u5728\u88ab\u544a\u8fd0\u52a8\u5e02\u573a\u63a7\u5236\u7684\u5e02\u573a\u4e2d\u627f\u8ba4\u6c34\u5e73\u4ef7\u683c\u4fee\u590d\uff0c\u201d\u4ed6\u5199\u9053\u3002\n  \u201c\u5e73\u5766\u7684\u975e\u6cd5\u201d\u548c\u201c\u4ef7\u683c\u5b9a\u5f71\u201d - \u8fd9\u4e9b\u662fNCAA\u601d\u60f3\u662f\u4e00\u4e2a\u72ed\u9698\u7684\u5c0f\u6848\u7684\u5927\u8bcd\u3002\u963f\u5c14\u65af\u987f\u5728\u5176\u8138\u4e0a\uff0c\u53ea\u662f\u5173\u4e8eNCAA\u662f\u5426\u53ef\u4ee5\u6267\u884c\u9650\u5236\u4e0e\u7814\u7a76\u751f\u5956\u5b66\u91d1\u7b49\u67d0\u4e9b\u6559\u80b2\u76f8\u5173\u798f\u5229\u7684\u89c4\u5219\u3002\u4f46\u6700\u9ad8\u6cd5\u9662\u5bbd\u9614 - \u800c\u4e14\u8fd9\u6837\u505a\u5c31\u8e22\u4e86\u817f\u90e8\uff0c\u5373NCAA\u4e00\u76f4\u5728\u634d\u536b\u5176\u5728\u5176\u4ed6\u6848\u4ef6\u4e2d\u634d\u536b\u5176\u975e\u6cd5\u884c\u4e3a\u7684\u817f\uff0c\u7279\u522b\u662f\u8fd0\u52a8\u5458\u6536\u56de\u4ed6\u4eec\u7684\u540d\u5b57\uff0c\u5f62\u8c61\u548c\u8096\u50cf\u6743\u5229\u6240\u5e26\u6765\u7684\u4ecd\u7136\u5728\u8f83\u4f4e\u7684\u6cd5\u9662\u3002\n   ncaa\u8ba4\u4e3a\u5b83\u6709\u4e00\u4e2a\u9b54\u6cd5\u6597\u7bf7\uff0c\u4f46\u73b0\u5728\u5b83\u5df2\u7ecf\u6d88\u5931\u4e86\u3002\u5b83\u4f9d\u8d56\u4e8e1984\u5e74\u7edf\u6cbb\u7684\u63aa\u8f9e\u53eb\u505aNCAA\u8bc9\u59d4\u5458\u4f1a\u7684\u63aa\u8f9e\u3002\u8463\u4e8b\u4f1a\u7684\u8463\u4e8b\u4f1a\uff0c\u8be5\u59d4\u5458\u4f1a\u6307\u51fa\uff0c\u5177\u6709\u5b66\u672f\u4f20\u7edf\u7684\u5927\u5b66\u8db3\u7403\u662f\u4ece\u5c0f\u8054\u76df\u68d2\u7403\u7684\u533a\u522b\u3002 NCAA\u8ba4\u4e3a\u5176\u201c\u4e1a\u4f59\u7231\u60c5\u201d\u89c4\u5219\u5c06\u8fd0\u52a8\u5458\u4ece\u6cd5\u9662\u8d5a\u94b1\u201c\u795d\u798f\u201d\u3002 \n\u4e0d\u518d\u3002\u8fd9\u662f\u5361\u74e6\u4e07\u64a4\u56de\u8fd9\u79cd\u795d\u798f\u3002 \u201c\u6d41\u6d6a\u70b9\u8bc4\u201d\u6765\u81ea\u7687\u5bb6\u4eba\uff0c\u4ed6\u5199\u5f97\u4e0d\u5c51\u4e00\u987e\u597d\u50cfNCAA\u662f\u4e00\u53ea\u80e1\u540c\u732b\uff0c\u6ca1\u6709\u8fa9\u62a4\u3002\u4ed6\u603b\u7ed3\u4e86NCAA\u591a\u5e74\u6765\uff0cNCAA\u5728\u6cd5\u9662\u6f5c\u5165\u7684\u5faa\u73af\u903b\u8f91\uff1a\u201cNCAA\u8868\u793a\uff0c\u7531\u4e8eNCAA\u7684\u8bf4\u6cd5\uff0c\u5927\u5b66\u53ef\u80fd\u4f1a\u62d2\u7edd\u652f\u4ed8\u5b66\u751f\u8fd0\u52a8\u5458\uff0c\u56e0\u4e3aNCAA\u7684\u5927\u5b66\u8fd0\u52a8\u7684\u5b9a\u4e49\u7279\u5f81\u662f\u5b66\u751f\u8fd0\u52a8\u5458\u6ca1\u6709\u652f\u4ed8\u3002\u201c\n Kavanaugh\u5728\u5b83\u9002\u5f53\u7684\u8352\u51c9\u7684\u80cc\u666f\u4e0b\u653e\u7f6e\u3002 \u201c\u533b\u9662\u4e0d\u80fd\u540c\u610f\u62a4\u58eb\u6536\u5165\uff0c\u4ee5\u521b\u9020\u4e00\u4e2a\u201d\u666e\u53ca\u7684\u201c\u5f62\u5f0f\u7684\u5e2e\u52a9\u75c5\u4eba\uff0c\u201d\u4ed6\u5199\u9053\u3002 \u201c...\u7535\u5f71\u5de5\u4f5c\u5ba4\u4e0d\u80fd\u524a\u51cf\u5bf9\u955c\u5934\u8239\u5458\u7684\u4f18\u52bf\uff0c\u4ee5\u70b9\u71c3\u597d\u83b1\u575e\u7684\u201d\u4e1a\u4f59\u4e3b\u4e49\u7cbe\u795e\u201c\u3002\u201d\n   Kavanaugh\u5199\u9053\uff0c\u4e3a\u4e86\u592a\u4e45\uff0cNCAA\u201c\u4ece\u666e\u901a\u7684\u53cd\u6258\u62c9\u65af\u5ba1\u67e5\u4e2d\u957f\u671f\u5c4f\u853d\u4e86\u5b83\u7684\u85aa\u916c\u89c4\u5219\u201d\uff0cKavanaugh\u5199\u9053\u3002\n \u6208\u65af\u9c81\u514b\u4e5f\u88ad\u51fb\u4e86NCAA\u7684\u63a8\u7406\u4f5c\u4e3a\u7279\u6743\u72b6\u6001\u7684\u8981\u6c42\u3002\u5b83\u8981\u6c42\u201c\u4ece[\u53cd\u6258\u62c9\u65af\u6cd5\u5f8b]\u4e3a\u5176\u8d38\u6613\u675f\u7f1a\u7684\u6761\u4ef6\u4e0b\uff0c\u6211\u4eec\u5e94\u8be5\u5ffd\u89c6\u5176\u9650\u5236\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6070\u597d\u843d\u5728\u9ad8\u7b49\u6559\u80b2\uff0c\u4f53\u80b2\u548c\u91d1\u94b1 - \u6211\u4eec\u4e0d\u80fd\u540c\u610f\uff0c\u6211\u4eec\u4e0d\u80fd\u540c\u610f\uff0c \u201c \u4ed6\u5199\u4e86\u3002\n \u9b54\u672f\u6597\u7bf7\u5df2\u7ecf\u88ab\u6495\u6389\u4e86\u3002\u5728\u5b83\u7684\u5730\u65b9\u662f\u57c3\u8499\u7279\u548c\u4ed6\u7684\u6f5c\u5728\u5ba2\u6237\u7684\u88f8\u9732\u819d\u76d6\uff0c\u4ee5\u53ca\u5f88\u591a\u95ee\u9898\u3002\u5141\u8bb8\u8fd0\u52a8\u5458\u5982\u4f55\u4ece\u4ed6\u4eec\u7684\u59d3\u540d\uff0c\u56fe\u50cf\u548c\u8096\u50cf\u4e2d\u53d7\u76ca\u5f71\u54cd\u8fd0\u52a8\u90e8\u95e8\u7684\u6574\u4f53\u6536\u5165\uff1f\u8fd0\u52a8\u5458\u5728\u8f83\u5c0f\u7684\u8fd0\u52a8\u4e2d\u7684\u6548\u679c\u4f1a\u662f\u4ec0\u4e48\uff1f\u662f\u5426\u5fc5\u987b\u6709\u85aa\u6c34\u5e3d\u4fdd\u6301\u7ade\u4e89\u6027\u5e73\u8861\uff1f\u7531\u4e8e\u6ca1\u6709\u53d1\u73b0NCAA\u81ea\u5df1\u7684\u89c4\u5219\u5728\u6cd5\u5f8b\u4e4b\u5916\uff0c\u8fd9\u662f\u771f\u7684\u6709\u4ec0\u4e48\u8fd9\u6837\u7684\u4e8b\u60c5\u662f\u201c\u975e\u6cd5\u62db\u8058\u201d\uff1f\n  \u8fd9\u4e9b\u95ee\u9898\u5fc5\u987b\u7531\u81ea\u7136\u5e02\u573a\u529b\u91cf\u6216\u56fd\u5bb6\u548c\u8054\u90a6\u7acb\u6cd5\u56de\u7b54\u3002\u80af\u5b9a\u7684\u662f\uff0c\u4ed6\u4eec\u5c06\u4e0d\u518d\u88ab\u4e00\u4e2a\u5229\u6da6\u7684\u56e4\u79ef\u5b98\u50da\u673a\u6784\u56de\u7b54\uff0c\u8fd9\u4e9b\u5b98\u50da\u673a\u6784\u4f7f\u7528\u53cd\u590d\u65e0\u5e38\u7684\u89c4\u5219\u9884\u8ba2\u548c\u9053\u5fb7\u5316\u201c\u7eaf\u7cb9\u201d\u7684\u201c\u7eaf\u6d01\u201d\uff0c\u4f5c\u4e3a\u5176\u5728\u5b66\u751f\u80cc\u9762\u7684\u63a0\u593a\u6027\u5546\u4e1a\u5b9e\u8df5\u7684\u5c01\u9762\u3002\n   \u201c\u6211\u4eec\u5f88\u6fc0\u52a8\uff0c\u201d\u80dc\u5229\u7684\u5f8b\u5e08\u53f2\u8482\u592b\u00b7\u4f69\u66fc\u662f\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u5199\u7684\u3002 \u201cNCAA\u4e0d\u518d\u4e89\u8fa9\u8bf4\u5b83\u6709\u6743\u5c0a\u91cd\u5176\u4ed6\u4f01\u4e1a\u6ca1\u6709\u3002\u201d \nNCAA\u5df2\u6210\u4e3a\u53e6\u4e00\u4e2a\u574f\u516c\u53f8\u6f14\u5458\u3002 \u5b83\u5df2\u7ecf\u6d88\u5931\u7684\u8fc7\u5ea6\u529b\u91cf\uff0c\u4f60\u53ef\u4ee5\u542c\u5230\u788e\u7247\u3002 \u4ec0\u4e48\u4f1a\u66ff\u6362\u5b83\uff1f \u66f4\u597d\u7684\u4e1c\u897f\u3002 \u6cd5\u9662\u6b63\u786e\u8ba4\u8bc6\u5230\uff0c\u5927\u5b66\u8fd0\u52a8\u5458\u4ecd\u7136\u5fc5\u987b\u6ce8\u518c\u548c\u826f\u597d\u7684\u5b66\u672f\u5730\u4f4d\u3002 \u8fd9\u662f\u4e00\u79cd\u611a\u8822\u7684\u8c2c\u8bef\uff0c\u603b\u662f\uff0c\u904f\u5236NCAA\u7684\u5931\u63a7\u529b\u91cf\u4f1a\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4f7f\u7cfb\u7edf\u66f4\u7eaf\u4e8e\u5b83\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5b83\u5c06\u4f7f\u5176\u66f4\u52a0\u8bda\u5b9e\uff0c\u66f4\u76f4\u63a5\u3002 \u66f4\u76f4\u7684\u3002  \u5982\u4f55\u91cd\u5efa\uff1f \u8fd9\u662f\u7b2c\u4e00\u5757\u7816\uff1a\u4e00\u4e2a\u4eba\u7684\u81ea\u7136\u540d\u79f0\u548c\u670d\u52a1\u5458\u7ecf\u6d4e\u6743\u5229\u672c\u8d28\u4e0a\u5c5e\u4e8e\u5b83\u4eec\u800c\u4e0d\u662fNCAA\u3002 \u4ece\u90a3\u4e2a\u89d2\u8272\u5f00\u59cb\u3002 \u4ece\u73b0\u5728\u5f00\u59cb\u7684\u5176\u4ed6\u4e8b\u60c5\u90fd\u4f1a\u662f\u7a33\u5b9a\u7684\uff0c\u4ece\u73b0\u5728\u5f00\u59cb\u9020\u6210\u66f4\u591a\u7684\u610f\u4e49\u3002  \u5f53\u5929\u6700\u91cd\u8981\u7684\u65b0\u95fb\u6545\u4e8b\uff0c\u7531\u90ae\u653f\u7f16\u8f91\u7b56\u5212\u5e76\u6bcf\u5929\u65e9\u4e0a\u4ea4\u4ed8\u3002 ", "note_en": "A cracked old cornerstone has been yanked out from under the NCAA by the Supreme Court, and it\u2019s going to lead to the total collapse of that crude shanty house, just you watch. Soon there will be nothing left under Mark Emmert\u2019s feet but a few rotten boards. The NCAA should put a sign out: \u201cThis property is condemned.\u201d\n This was an inevitable moment, and yet Emmert and his lieutenants spent years and billions in legal fees trying to forestall it, fighting athletes through the courts instead of returning what was essentially their stolen property. \u201cThe NCAA is not above the law,\u201d Justice Brett M. Kavanaugh wrote in a concurrence to the  unanimous 9-0 decision in  NCAA v. Alston. Oh, but it thought it was. Throughout its modern legal history, the NCAA\u2019s stewards had relied on the arrogant supposition that the courts owed them acquiescence because of the nature of what they do: They were the gatekeepers of amateurism and of scholarly purity, even as they filched and conned and collected backroom rakeoffs.\n In sentence after sentence, phrase after phrase, the highest court left the NCAA unhoused and naked, with nothing left but its pretensions.\n   \u201cThe NCAA couches its arguments for not paying student athletes in innocuous labels,\u201d Kavanaugh wrote. \u201cBut the labels cannot disguise the reality: The NCAA\u2019s business model would be flatly illegal in almost any other industry in America.\u201d Boom. Pants around ankles.\n That sentence is sure to lead to a blitz of litigation. So is this one, from Justice Neil M. Gorsuch in the majority opinion: \u201cPut simply, this suit involves admitted horizontal price fixing in a market where the defendants exercise market control,\u201d he wrote.\n  \u201cFlatly illegal\u201d and \u201cprice fixing\u201d \u2014 those are big words for what the NCAA thought was a narrow little case.  Alston was, on its face, simply about whether the NCAA could enforce rules limiting certain education-related benefits such as graduate scholarships. But the Supreme Court went broad \u2014 and in doing so it kicked the legs out of every legal argument the NCAA has been using to defend its illegal behavior in other cases, especially those brought by athletes to reclaim their name, image and likeness rights, which are still in the lower courts.\n   The NCAA thought it had a magic cloak, but now it\u2019s gone. It had relied heavily on wording in a 1984 ruling called  NCAA v. Board of Regents, which stated that the identification of college football with an academic tradition is what differentiated it from minor league baseball. The NCAA took that to mean its \u201camateurism\u201d rules that restrict athletes from making money had been \u201cblessed\u201d by the courts.\n Not anymore. Here is Kavanaugh retracting that blessing. \u201cStray comments\u201d from  Regents, he wrote dismissively as if the NCAA were an alley cat, did not amount to a defense. He summed up the circular logic the NCAA has been foisting off on courts for years: \u201cThe NCAA says that colleges may decline to pay student athletes because the defining feature of college sports, according to the NCAA, is that the student athletes are not paid.\u201d\n Kavanaugh put that in its properly ludicrous context. \u201cHospitals cannot agree to cap nurses\u2019 income in order to create a \u2018purer\u2019 form of helping the sick,\u201d he wrote. \u201c\u2026 Movie studios cannot collude to slash benefits to camera crews to kindle a \u2018spirit of amateurism\u2019 in Hollywood.\u201d\n   For too long, the NCAA \u201chas long shielded its compensation rules from ordinary antitrust scrutiny\u201d with that sort of nonsense, Kavanaugh wrote.\n Gorsuch, too, attacked the NCAA\u2019s reasoning as a request for privileged status. It demanded \u201ca sort of judicially ordained immunity from the terms of [antitrust law] for its restraints of trade \u2014 that we should overlook its restrictions because they happen to fall at the intersection of higher education, sports, and money \u2014 we cannot agree,\u201d he wrote.\n The magic cloak has been torn away. In its place are the bare knees of Emmert and his lead counsels, and a lot of questions. How will allowing athletes to benefit from their names, images and likenesses affect overall revenue for athletic departments? What will the effect be for athletes in smaller sports? Will there have to be salary caps to preserve competitive balance? Is there really any such thing anymore as \u201cillegal recruiting\u201d since the NCAA\u2019s own rules have been found to be outside of the law?\n  Those questions will have to be answered by natural market forces, or by state and federal legislation. What\u2019s sure is that they will no longer be answered by a profit-hoarding bureaucracy that used capricious rule-booking and moralizing on \u201cpurity\u201d of amateurs as cover for its predatory business practices on the backs of students.\n   \u201cWe\u2019re thrilled,\u201d Steve Berman, one of the winning attorneys, wrote via email. \u201cThe NCAA can no longer argue that it\u2019s entitled to deference other businesses don\u2019t have.\u201d\n The NCAA has become just another bad corporate actor. The inordinate power it had is gone, and you can hear the splintering. What will replace it? Something better. The court rightly recognized that college athletes still have to be enrolled and in good academic standing. It was a silly fallacy, always, that curbing the NCAA\u2019s runaway power would somehow make the system more impure than it already is. In fact, it will make it more honest, more direct. Straighter.\n How to rebuild? Here\u2019s the first brick: A person\u2019s natural-born name and attendant economic rights inherently belong to them and not to the NCAA. Start with that cornerstone. Everything else that comes after will be solid and make a lot more sense from now on.\n     The most important news stories of the day, curated by Post editors and delivered every morning.", "posttime": "2021-06-23 01:07:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u77e5\u9053,longer,ncaa", "title": "\u5f88\u5feb\uff0c\u6211\u4eec\u77e5\u9053\u7684NCAA\u5c06\u4e0d\u518d\u5b58\u5728\u3002 \u7529\u6389\u5305\u88b1\u3002 ", "title_en": "Soon, the NCAA as we know it will no longer exist. Good riddance.", "transed": 1, "url": "https://www.washingtonpost.com/sports/2021/06/22/sally-jenkins-supreme-court-ncaa-decision/", "via": "", "real_tags": ["\u77e5\u9053", "longer", "ncaa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067493, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u79d1\u5b66\u5bb6\u8bf4\uff0c\u8be5\u7cfb\u7edf\u5bf9\u73af\u5883\u5f71\u54cd\u5f88\u5c0f\uff0c\u5bf9\u7272\u755c\u517b\u6b96\u5f62\u6210\u9c9c\u660e\u5bf9\u6bd4\n    \u6839\u636e\u4e00\u9879\u65b0\u7684\u7814\u7a76\uff0c\u7ed3\u5408\u592a\u9633\u80fd\u548c\u5fae\u751f\u7269\u53ef\u4ee5\u4ea7\u751f\u6bd4\u5927\u8c46\u8c46\u7c7b\u7b49\u4f5c\u7269\u66f4\u591a\u7684\u86cb\u767d\u8d28\u768410\u500d\u3002\n \u7814\u7a76\u4eba\u5458\u8868\u793a\uff0c\u8be5\u7cfb\u7edf\u5bf9\u73af\u5883\u5f71\u54cd\u5f88\u5c0f\uff0c\u4e0e\u7272\u755c\u517b\u6b96\u9c9c\u660e\u5bf9\u6bd4\uff0c\u5bfc\u81f4\u5de8\u5927\u7684\u6c14\u5019\u52a0\u70ed\u6c14\u4f53\u4ee5\u53ca\u6c34\u6c61\u67d3\u3002\n  \u8be5\u6982\u5ff5\u4f7f\u7528\u4ece\u7a7a\u6c14\u4e2d\u7684\u592a\u9633\u80fd\u7535\u6c60\u677f\u548c\u4e8c\u6c27\u5316\u78b3\u7684\u7535\u529b\u6765\u4e3a\u5fae\u751f\u7269\u751f\u957f\uff0c\u4ee5\u4ea7\u751f\u71c3\u6599\uff0c\u7136\u540e\u5728\u751f\u7269\u53cd\u5e94\u5668VATS\u4e2d\u751f\u957f\uff0c\u7136\u540e\u52a0\u5de5\u6210\u5e72\u71e5\u7684\u86cb\u767d\u8d28\u7c89\u672b\u3002\u79d1\u5b66\u5bb6\u8bf4\uff0c\u8be5\u8fc7\u7a0b\u4f7f\u571f\u5730\uff0c\u6c34\u548c\u80a5\u6599\u7684\u9ad8\u6548\u5229\u7528\u80fd\u591f\u90e8\u7f72\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u90e8\u7f72\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728\u5177\u6709\u5f3a\u5927\u7684\u9633\u5149\u6216\u80a5\u6c83\u571f\u58e4\u7684\u56fd\u5bb6\u3002\n \u4ed6\u4eec\u8bf4\uff0c\u7cae\u98df\u5b89\u5168\u662f\u672a\u6765\u51e0\u5341\u5e74\u6765\u4eba\u7c7b\u7684\u201c\u5173\u952e\u95ee\u9898\u201d\uff0c\u4ed6\u4eec\u8868\u793a\uff0c\u968f\u7740\u5168\u7403\u4eba\u53e3\u751f\u957f\uff0c\u751f\u7269\u71c3\u6599\u4e0e\u4f5c\u7269\u7684\u571f\u5730\u7ade\u4e89\uff0c\u5927\u7ea6800\u4e07\u4eba\u4eca\u5929\u5df2\u7ecf\u8425\u9020\u4e86\u7ea6800\u4e07\u4eba\u3002\u6b64\u5916\uff0c\u5728\u4e0d\u524a\u51cf\u52a8\u7269\u548c\u4e73\u5236\u54c1\u751f\u4ea7\u7684\u60c5\u51b5\u4e0b\uff0c\u89e3\u51b3\u6c14\u5019\u5371\u673a\u5c06\u8fd1\u4e0d\u53ef\u80fd\u3002\n \u5fae\u751f\u7269\u5df2\u7ecf\u7528\u4e8e\u5236\u4f5c\u8bb8\u591a\u5e38\u89c1\u7684\u98df\u7269\uff0c\u5982\u9762\u5305\uff0c\u9178\u5976\uff0c\u5564\u9152\u548cQuorn\u3002\u4f46\u5176\u4ed6\u7814\u7a76\u4eba\u5458\u79f0\uff0c\u5c06\u6d88\u8d39\u8005\u8f6c\u5316\u4e3a\u98df\u7528\u5fae\u751f\u7269\u86cb\u767d\u53ef\u80fd\u662f\u56f0\u96be\u7684\uff0c\u5e76\u4e14\u8fd9\u79cd\u98df\u7269\u53ef\u80fd\u4e0d\u4f1a\u8425\u517b\u5b8c\u6574\u3002\n Dorian Leger\uff0c\u5728\u6ce2\u8328\u5766\u7684Max Planck\u5206\u5b50\u690d\u7269\u751f\u7406\u5b66\u7814\u7a76\u6240\uff0c\u5fb7\u56fd\u9886\u5bfc\u4e86\u65b0\u5206\u6790\uff0c\u8bf4\uff1a\u201c\u6211\u4eec\u8ba4\u4e3a\u5fae\u751f\u7269\u98df\u54c1\u975e\u5e38\u6709\u524d\u9014\uff0c\u5e76\u5c06\u6210\u4e3a\u89e3\u51b3\u6f5c\u5728\u7cae\u98df\u5371\u673a\u7684\u4e3b\u8981\u8d21\u732e\u8005\u4e4b\u4e00\u3002 \n\u201c\u5b83\u53ef\u80fd\u4f1a\u5728\u6d88\u8d39\u65b9\u9762\u8fc5\u901f\u62ff\u8d77\uff0c\u4f46\u5f88\u96be\u8bf4\u3002 \u201c\u4f46\u6211\u505a\u4e86\u4e00\u4e9b\u8fd0\u52a8\uff0c\u5982\u679c\u6211\u73b0\u5728\u88ab\u63d0\u4f9b\u4e86\u4e00\u79cd\u7ec6\u83cc\u86cb\u767d\u8d28\uff0c\u6211\u4f1a\u6709\u5b83\u3002\u201d\n \u8be5\u56e2\u961f\u4e13\u6ce8\u4e8e\u5927\u8c46\u8c46\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4e0e\u68ee\u6797\u7684\u7834\u574f\u76f8\u5173\uff0c\u5927\u591a\u662f\u5582\u517b\u52a8\u7269\uff0c\u4f46\u5176\u4ed6\u7ec6\u83cc\u4ea7\u751f\u68d5\u6988\u6cb9\u7684\u4e3b\u8981\u5143\u7d20\u3002 \u201c\u7ec6\u83cc\u975e\u5e38\u7075\u6d3b\uff0c\u56e0\u6b64\u4ed6\u4eec\u6700\u7ec8\u53ef\u4ee5\u8c03\u6574\u5230\u4e0d\u540c\u7684\u4ea7\u54c1\uff0c\u201dleger\u8bf4\u3002\n \u81f3\u5c11\u6709\u5341\u51e0\u5bb6\u516c\u53f8\u5df2\u7ecf\u4ece\u5fae\u751f\u7269\u751f\u4ea7\u52a8\u7269\u9972\u6599\uff0c\u4f46\u7ec6\u83cc\u901a\u5e38\u662f\u4ece\u5176\u4ed6\u4f5c\u7269\u6216\u7532\u70f7\u6216\u7532\u9187\u7684\u7cd6\u4e2d\u4ece\u5316\u77f3\u71c3\u6599\u4e2d\u5582\u98df\u3002\u57fa\u4e8e\u82ac\u5170\u7684\u592a\u9633\u80fd\u98df\u54c1\u6b63\u5728\u5229\u7528\u7535\u529b\u4e3a\u4eba\u7c7b\u521b\u9020\u98df\u7269\u3002\n \u516c\u5e03\u7684\u65b0\u8bc4\u4f30\u5728\u7f8e\u56fd\u7f8e\u56fd\u56fd\u5bb6\u79d1\u5b66\u9662\u7684\u671f\u520a\u4e0a\u53d1\u5e03\uff0c\u662f\u4f20\u7edf\u519c\u4e1a\u548c\u592a\u9633\u80fd\u5fae\u751f\u7269\u751f\u4ea7\u7cfb\u7edf\u4e4b\u95f4\u7684\u571f\u5730\u5229\u7528\u548c\u80fd\u6e90\u6548\u7387\u7684\u7b2c\u4e00\u6b21\u5b9a\u91cf\u6bd4\u8f83\u3002\n \u7814\u7a76\u4eba\u5458\u4f7f\u7528\u4e86\u4eca\u5929\u6280\u672f\u7684\u6570\u636e\u6765\u8ba1\u7b97\u8fc7\u7a0b\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u6548\u7387\uff0c\u5305\u62ec\u4ece\u7a7a\u4e2d\u6355\u83b7CO 2\u5e76\u5c06\u5fae\u751f\u7269\u52a0\u5de5\u6210\u4eba\u4eec\u53ef\u4ee5\u5403\u7684\u98df\u7269\u3002\u4ed6\u4eec\u53d1\u73b0\u5fae\u751f\u7269\u7cfb\u7edf\u4ec5\u4f7f\u7528\u4f5c\u7269\u6240\u9700\u76841\uff05\uff0c\u80a5\u6599\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u662f\u5728\u9886\u57df\u4f7f\u7528\u65f6\u6d6a\u8d39\u3002\n \u8be5\u5206\u6790\u4f30\u8ba1\uff0c\u6bcf\u5e74\u7684\u6bcf\u516c\u9877\uff08\u6216\u6bcf\u82f1\u4ea9\uff09\u7684\u200b\u200b\u592a\u9633\u5fae\u751f\u7269\u8fc7\u7a0b\u53ef\u4ee5\u4ece\u6bcf\u516c\u9877\uff08\u6216\u6bcf\u82f1\u4ea9\uff09\u4ea7\u751f15\u5428\u86cb\u767d\u8d28\uff0c\u8db3\u4ee5\u517b\u6d3b520\u4eba\uff0c\u79d1\u5b66\u5bb6\u8868\u793a\u662f\u4fdd\u5b88\u7684\u4f30\u8ba1\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5927\u8c46\u8c46\u7c7b\u516c\u9877\u53ef\u4ee5\u4ea7\u751f1.1\u5428\u86cb\u767d\u8d28\uff0c\u5582\u98df40\u4eba\u3002\u5373\u4f7f\u5728\u9633\u5149\u6c34\u5e73\u7b49\u9633\u5149\u6c34\u5e73\u7684\u56fd\u5bb6\uff0c\u5fae\u751f\u7269\u86cb\u767d\u8d28\u4ea7\u91cf\u6bd4\u6bcf\u516c\u9877\u7684\u5fae\u751f\u7269\u86cb\u767d\u8d28\u4ea7\u91cf\u6bd4\u690d\u7269\u81f3\u5c11\u9700\u8981\u4e94\u500d\u3002\n \u7814\u7a76\u4eba\u5458\u5efa\u8bae\uff0c\u5fae\u751f\u7269\u86cb\u767d\u7684\u6210\u672c\u4e0e\u5f53\u524d\u86cb\u767d\u8d28\uff08\u4f8b\u5982\u4e73\u6e05\u6216\u8c4c\u8c46\uff09\u5403\u7684\u76ee\u524d\u86cb\u767d\u8d28\u76f8\u540c\u3002\u4f46\u5b83\u6bd4\u76ee\u524d\u7684\u52a8\u7269\u9972\u6599\u6602\u8d35\u51e0\u500d\uff0c\u5c3d\u7ba1\u672a\u6765\u7684\u6280\u672f\u6539\u5584\u9884\u8ba1\u5c06\u964d\u4f4e\u6210\u672c\u3002 \nLeger\u8868\u793a\u690d\u7269\u5bf9\u5149\u5408\u4f5c\u7528\u7684\u80fd\u529b\u663e\u7740\uff0c\u4f46\u5728\u80fd\u6548\u65b9\u9762\uff0c\u4e3b\u98df\u4ec5\u5c06\u5927\u7ea61\uff05\u7684\u592a\u9633\u80fd\u8f6c\u5316\u4e3a\u53ef\u98df\u7528\u7684\u751f\u7269\u8d28\u3002\u8fd9\u662f\u56e0\u4e3a\u690d\u7269\u5df2\u7ecf\u53d1\u5c55\u4ee5\u7ade\u4e89\u548c\u518d\u73b0\uff0c\u5e76\u4e14\u521a\u521a\u589e\u957f\uff0c\u5e76\u4e14\u4f7f\u7528\u6bd4\u5149\u4f0f\u9762\u677f\u66f4\u5c11\u7684\u592a\u9633\u5149\u8c31\u3002\n \u7cfb\u7edf\u7684\u6240\u6709\u7ec4\u4ef6\u90fd\u5b58\u5728\uff0c\u4f46\u662fleger\u8868\u793a\u4ed6\u4eec\u73b0\u5728\u9700\u8981\u4e00\u8d77\u6d4b\u8bd5\uff0c\u7279\u522b\u662f\u5728\u5c3a\u5ea6\u4e0a\u8fdb\u884c\u6d4b\u8bd5\uff0c\u7279\u522b\u662f\u4ece\u7a7a\u6c14\u4e2d\u6355\u83b7CO 2\uff0c\u5e76\u786e\u4fdd\u4f7f\u7528\u7684\u592a\u9633\u80fd\u7535\u6c60\u677f\u53ef\u4ee5\u56de\u6536\u5229\u7528\u3002 \u201c\u5bf9\u4e8e\u4eba\u7c7b\u98df\u7269\uff0c\u4e5f\u9700\u8981\u514b\u670d\u5f88\u591a\u89c4\u5b9a\uff0c\u201d\u4ed6\u8bf4\u3002\n Pete Iannetta\u5728\u82cf\u683c\u5170\u8a79\u59c6\u65af\u00b7\u8d6b\u987f\u7814\u7a76\u6240\uff0c\u8bf4\uff1a\u201c\u201d\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u6982\u5ff5 - \u4f60\u6b63\u5728\u79bb\u5a5a\u4ece\u571f\u5730\u4f7f\u7528\u4e2d\u7684\u98df\u7269\u751f\u4ea7\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u62e5\u6709\u53ef\u91cd\u65b0\u5236\u9020\u7684\u6240\u6709\u571f\u5730\u3002\u201c\n \u4f46\u4ed6\u8bf4\uff0c\u98df\u7269\u4e0d\u4ec5\u7531\u4e3b\u8981\u8425\u517b\u7d20\u7ec4\u6210\uff0c\u5982\u86cb\u767d\u8d28\u548c\u78b3\u6c34\u5316\u5408\u7269\uff1a\u201c\u6709\u5f88\u591a\u6b21\u8981\u5316\u5408\u7269\u5bf9\u60a8\u7684\u798f\u7949\u5f88\u91cd\u8981\u3002\u201d Iannetta\u8fd8\u8d28\u7591\u5fae\u751f\u7269\u98df\u54c1\u662f\u5426\u4f1a\u6210\u4e3a\u4e3b\u6d41\uff1a\u201c\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u5f88\u957f\u65f6\u95f4\u7684\u85fb\u7c7b\u4f5c\u4e3a\u6f5c\u5728\u7684\u98df\u7269\u8d44\u6e90\uff0c\u4f46\u5b83\u4ecd\u7136\u6ca1\u6709\u88ab\u5e7f\u6cdb\u63a5\u53d7\u3002\u201d\n \u519c\u4e1a\u6280\u672f\u987e\u95ee\u535a\u58eb\u535a\u58eb\u8868\u793a\uff1a\u201c\u76f4\u5230\u6a21\u578b\u4e0e\u8bd5\u9a8c\u5382\u7684\u6d4b\u8bd5\u548c\u6210\u672c\u8ba1\u7b97\uff0c\u5305\u62ec[\u592a\u9633\u80fd\u7535\u6c60\u677f]\u751f\u4ea7\u7684\u751f\u547d\u5468\u671f\u8bc4\u4f30\uff0c\u5f88\u96be\u8bc4\u8bba\u5b83\u662f\u5426\u6709\u6240\u6539\u5584[\u519c\u4e1a]\u5df2\u7ecf\u6301\u7eed\u4e86\u6570\u5343\u5e74\u7684\u7cfb\u7edf\uff0c\u5c3d\u7ba1\u4eba\u53e3\u4f4e\u4e8e\u6211\u4eec\u8ba1\u5212\u9972\u6599\u7684\u4eba\u53e3\u3002\u201c ", "note_en": "The system would also have very little impact on the environment, in contrast to livestock farming, scientists say\n    Combining solar power and microbes could produce 10 times more protein than crops such as soya beans, according to a new study.\n The system would also have very little impact on the environment, the researchers said, in stark contrast to livestock farming which results in  huge amounts of climate-heating gases as well as water pollution.\n  The concept uses electricity from solar panels and carbon dioxide from the air to create fuel for microbes, which are grown in bioreactor vats and then processed into dry protein powders. The process makes highly efficient use of land, water and fertiliser and could be deployed anywhere, not just in countries with strong sunshine or fertile soils, the scientists said.\n Food security is a \u201ccritical issue\u201d for humanity in coming decades, they said, with the global population growing, biofuels competing for land with crops, and about 800 million people already undernourished today. Furthermore, tackling the climate crisis will be near impossible without  slashing emissions from animal and dairy food production.\n Microbes are already used to make many common foods, such as bread, yoghurt, beer and Quorn. But other researchers said converting consumers to eating microbial protein might be difficult and that such foods may not be nutritionally complete.\n Dorian Leger, at the Max Planck Institute of Molecular Plant Physiology in Potsdam, Germany, who led the new analysis, said: \u201cWe think microbial foods are very promising and will be one of the major contributors to solving the potential food crisis.\n \u201cIt might pick up quite quickly on the consumer side, but it\u2019s hard to say. \u201cBut I do some exercise, and if I was offered a bacterial protein shake now, I would have it.\u201d\n The team focused on soya beans, as these are  linked to the destruction of forests and are mostly fed to animals, but other bacteria produce the main elements of palm oil. \u201cBacteria are very flexible, so they could eventually be tuned to different products,\u201d Leger said.\n At least a dozen companies are already  producing animal feed from microbes but the bacteria are typically fed either sugars from other crops or methane or methanol from fossil fuels.  Solar Foods, based in Finland, is using electricity to create food for humans.\n The new assessment, published in the journal  Proceedings of the National Academy of Sciences of the United States of America, is the first quantitative comparison of land use and energy efficiency between traditional agriculture and solar-powered microbial production systems.\n The researchers used data on today\u2019s technologies to calculate the efficiency of each step of the process, including capturing CO 2 from the air and processing the microbes into food that people could eat. They found the microbial system used just 1% of the water needed by the crops and a small fraction of the fertiliser, most of which is wasted when used in fields.\n The analysis estimated that the solar-microbial process could produce 15 tonnes of protein from each hectare (or per 2.5 acres) a year, enough to feed 520 people, which the scientists said was a conservative estimate. In comparison, a hectare of soya beans could produce 1.1 tonnes of protein, feeding 40 people. Even in countries with relatively low sunlight levels  like the UK, microbial protein production was at least five times greater from each hectare than plants.\n The microbial protein would cost about the same as current proteins eaten by people, such as whey or pea, the researchers suggested. But it was several times more expensive than current animal feeds, although future technological improvements are expected to lower costs.\n Leger said plants\u2019 ability to photosynthesise is remarkable but, in terms of energy efficiency, staple crops only convert about 1% of solar energy into edible biomass. This is because plants have evolved to compete and reproduce as well as just grow, and use less of the solar light spectrum than photovoltaic panels.\n All the components of the system exist, but Leger said they now need to be tested together and at scale, in particular the capturing of CO 2 from the air and ensuring that used solar panels can be recycled. \u201cFor human food, there\u2019s also a lot of regulation that needs to be overcome,\u201d he said.\n Pete Iannetta, at the James Hutton Institute in Scotland, said: \u201c\u201cIt\u2019s a really interesting concept \u2013 you are divorcing food production from land use, which would mean you could have all that land available for rewilding.\u201d\n But he said food is not only composed of the main nutrients, like protein and carbohydrate: \u201cThere are an awful lot of secondary compounds that are important for your wellbeing.\u201d Iannetta also questioned whether microbial foods would become mainstream: \u201cFor example, we have used algae for a long time as a potential food resource, but it\u2019s still not widely accepted.\u201d\n Dr Toby Mottram, a consultant on agricultural technology, said: \u201cUntil the model is tested and costed with a pilot-scale plant, including a lifecycle assessment of [solar panel] production, it is hard to comment on whether it improves on [farming] systems which have been sustained for thousands of years, albeit for a lower population than we are planning to feed.\u201d", "posttime": "2021-06-23 01:07:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u592a\u9633\u80fd,food,\u5fae\u751f\u7269", "title": "\u5fae\u751f\u7269\u548c\u592a\u9633\u80fd\u80fd\u529b\u6bd4\u690d\u7269\u4ea7\u751f10\u500d\u7684\u98df\u7269' ", "title_en": "Microbes and solar power \u2018could produce 10 times more food than plants\u2019", "transed": 1, "url": "https://www.theguardian.com/environment/2021/jun/21/microbes-and-solar-power-could-produce-10-times-more-food-than-plants", "via": "", "real_tags": ["\u592a\u9633\u80fd", "food", "\u5fae\u751f\u7269"]}, {"category": "", "categoryclass": "", "imagename": "e36ddafdbac03ecf5d14673a2abfd91f.jpeg", "infoid": 1067492, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5bf9Web\u5f00\u53d1\u4eba\u5458\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6d88\u606f\uff0c\u5f00\u59cb\u5c06Color-Scheme\u5c5e\u6027\u6dfb\u52a0\u5230\u7f51\u9875\u3002\n \uff06lt;\uff01 - \u9875\u9762\u652f\u6301\u9ed1\u6697\u548c\u6d45\u8272\u65b9\u6848\uff0c\u9875\u9762\u4f5c\u8005\u66f4\u559c\u6b22\u9ed1\u6697.--\uff06gt;\n  / *\u9875\u9762\u652f\u6301\u9ed1\u6697\u548c\u6d45\u8272\u65b9\u6848\uff0c\u9875\u9762\u4f5c\u8005\u66f4\u559c\u6b22\u9ed1\u6697\u3002* /\uff1a\u6839{\uff1a\u6697\u5149;}\n \u6211\u7edd\u5bf9\u8ba8\u8bba\u4e86\uff06\uff0334;\u6709\u4e00\u4e2a\u9ed1\u6697\u6a21\u5f0f\uff0c\u4f46\u662f\u4e0d\u8981\u5236\u4f5c\u6eda\u52a8\u6761\u9ed1\u6697\uff01\uff06\uff0334;\uff0c\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662fdocusaurus\u3002\n      \u5149\u6a21\u5f0f\u6eda\u52a8\u6761\u4f24\u5bb3\u4e86\u773c\u775b\uff0c\u5e76\u4e14\u5e9f\u589f\u4e86\u7f51\u7ad9\u7684\u5916\u89c2\uff0c\u6240\u4ee5\uff0c\u4e3a\u4e86\u6bcf\u4e2a\u6709\u773c\u775b\u548c\u559c\u6b22\u9ed1\u6697\u6a21\u5f0f\u7684\u4eba\uff0c\u8bf7\u4f7f\u7528\u989c\u8272\u65b9\u6848\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u5b83\u4e0e\u4f60\u7684\u9ed1\u6697\u6a21\u5f0f\u4e00\u8d77\u4f7f\u7528\u5b83\u4f8b\u5982\uff0cCSS\uff0c\u6211\u4e3a\u5ba2\u6237\u63d0\u4f9b\u7684\u7f51\u7ad9\u4e4b\u4e00Josephojo.com\n  \u5f53\u4f7f\u7528\u989c\u8272\u65b9\u6848\u5c5e\u6027\u65f6\uff0c\u60a8\u53ef\u4ee5\u8f6c\u52a8\u8868\u5355\u5143\u7d20\uff0c\u7f51\u9875\u80cc\u666f\uff0c\u6587\u672c\u989c\u8272\u548c\u6eda\u52a8\u6761\u9ed1\u6697\uff0c\u4e00\u4e2a\u66f4\u540d\u7684\u4f8b\u5b50\u662fGithub\uff0c\n  \u6ce8\u610f\uff0c\u6eda\u52a8\u6761\u662f\u9ed1\u6697\u7684\uff0c\u4e5f\u662f\u5982\u4f55\u70e7\u6389\u773c\u775b\uff0c\u4ed6\u4eec\u80fd\u591f\u4f7f\u7528\u5143\u6807\u7b7e\u6765\u5b8c\u6210\u5b83\u3002 \n\u5bf9\u4e8eJosephojo.com\uff0c\u6211\u4f7f\u7528\u4e86\u4e0e@Media\uff08Prefers-Color-Scheme\uff1aDark\uff09{}\u548c.dark\u7c7b\u4e00\u8d77\u4f7f\u7528\u7684\u989c\u8272\u65b9\u6848CSS\u5c5e\u6027\uff0c\u6700\u7ec8\u7ed3\u679c\u662f\n {\uff1alight;} .dark {\uff1a\u9ed1\u6697; @media\uff08\u9ed1\u6697\uff09{\uff1anot\uff08\uff09{\uff1a\u9ed1\u8272; }}\n \u521b\u5efa\u7f51\u7ad9\u65f6\uff0c\u6211\u4f7f\u7528\u4e86DailWindcs\uff0c\u7528\u6697\u6a21\u5f0f\u8bbe\u7f6e\u4e3a\uff06\uff0334;\u7c7b\uff06\uff0334;\uff0c\u6211\u7684tailwind config\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff0c\n  \u5bf9\u4e8e\u90a3\u4e9b\u8c01\u907f\u96be\u6240\uff06\uff0339; t\u4e00\u8d77\u4f7f\u7528tailwindcss\u4e4b\u524d\uff0c\u5b83\uff06\uff0339; S\u57fa\u672c\u76f8\u540c\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u5f53\u52a0\u5165\u5230\u8be5html\u5143\u7d20\u5c06\u7528\u4fe1\u53f7\uff0c\u8be5\u7f51\u7ad9\u662f\u5728\u9ed1\u6697\u6a21\u5f0f\u3002\n    \u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e9b\u6837\u677f\u4ee3\u7801\uff0c\u4f60\u771f\u6b63\u9700\u8981\u505a\u7684\uff0c\u662f\u8bbe\u7f6e\u4e00\u4e2a\u5c06\u8bb0\u4f4f\u6211\u4eec\u5f53\u524d\u4e3b\u9898\u72b6\u6001\u7684\u5207\u6362\u3002\n \u5728\u5f00\u53d1josephojo.com\uff0c\u6211\u53d1\u73b0\uff0c\u4f60\u5fc5\u987b\u8bbe\u7f6e\u4f60\u7684\u4e3b\u9898\u5316\u7cfb\u7edf\u4e4b\u524d\u522b\u7684\u652f\u6301\u672c\u5730\u5a92\u4f53\u7684\u4e3b\u9898\uff0c\u5b83\uff06\uff0339; S\u4e00\u822c\u7528\u6237\u75db\u82e6\u5c11\uff0c\u5373\uff06\uff0339; S\u4e3a\u4ec0\u4e48\u6211\u8bbe\u7f6e\u7684HTML\uff1a\u6ca1\u6709\uff08 [Data-Theme]\uff09\u5728\u66f4\u559c\u6b22 - \u989c\u8272\u65b9\u6848\u4e2d\uff1a\u9ed1\u6697\u5a92\u4f53\u67e5\u8be2\uff0c\n  html.dark\u8868\u793a\u9ed1\u6697\u7684\u4e3b\u9898\u5e94\u7528\u4e8e\u7531\u987a\u98ce\u548c[\u6570\u636e\u4e3b\u9898]\u8868\u793a\u5f53\u524d\u5e94\u7528\u7684\u4e3b\u9898\uff0c\u5982\u679c\u6570\u636e\u7684\u4e3b\u9898\u662f\u4ece\u672c\u5730\u5b58\u50a8\u5668\u4e0d\u540c\uff0c\u90a3\u4e48\u4e3b\u9898\u624b\u52a8\u5207\u6362\u548c\u9875\u5e94\u8be5\u5728\u6570\u636e - \u4f7f\u7528\u65b0\u7684\u4e3b\u9898\u4e3b\u9898\u4ee5\u53ca\u66f4\u65b0\u672c\u5730\u5b58\u50a8\u7684\u4e3b\u9898\uff0c\u5426\u5219\uff0c\u5b83\u5e94\u8be5\u4f7f\u7528\u672c\u5730\u5b58\u50a8\u7684\u4e3b\u9898\u6570\u636e\u4e3b\u9898\uff0c\u4f46\u7531\u4e8e\u6570\u636e\u7684\u4e3b\u9898\u4ec5\u9002\u7528\u4e8eJavaScript\u7684\u52a0\u8f7d\u540e\u7684HTML\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u544a\u8bc9\u6211\u4eec\u7684CSS\u4f7f\u7528\u9ed8\u8ba4\u7684\u9ed1\u6697\u4e3b\u9898\u5982\u679c\u559c\u6b22 - \u989c\u8272\u65b9\u6848\uff1a\u9ed1\u6697\u548cHTML\u5143\u7d20\u6ca1\u6709\u6570\u636e - \u4e3b\u9898\u5c5e\u6027\u3002 \n\u5f53\u60a8\u5728\u90a3\u91cc\u770b\u5230\u7684\u90a3\u6837\uff0c\u6539\u53d8\u5b9e\u9645\u7684\u6d4f\u89c8\u5668\u4e3b\u9898Won\uff06\uff0339; t\u6c38\u4e45\u66f4\u6539\u672c\u5730\u5b58\u50a8\u4e2d\u8bbe\u7f6e\u7684\u4e3b\u9898\uff0c\u5982\u679c\u7528\u6237a\u624b\u52a8\u66f4\u6539\u5b83\u4eec\u5fc5\u987b\u5e0c\u671b\u6c38\u4e45\u4f7f\u7528\u8be5\u4e3b\u9898\u7684\u4e3b\u9898\uff0c\u5219\u4f7f\u7528\u7cfb\u7edf\u4e3b\u9898\u3002\n  //\u57fa\u4e8e[Joshwomeau.com/gatsby/dark-mode/]\u8ba9LetsAvedTheme =\uff08\uff09=\uff06gt; {const\u4e3b\u9898= window.localstorage.getItem\uff08\uff06\uff0334;\u4e3b\u9898\uff06\uff0334;\uff09; //\u5982\u679c\u7528\u6237\u660e\u786e\u5730\u9009\u62e9\u4e86\u706f\u5149\u6216\u6697\uff0c//\u8ba9\uff06\uff0339; s\u4f7f\u7528\u5b83\u3002\u5426\u5219\uff0c\u6b64\u503c\u5c06\u4e3anull\u3002 if\uff08typeof theme ===\uff06\uff0334;\u5b57\u7b26\u4e32\uff06\uff0334;\uff09\u8fd4\u56de\u4e3b\u9898; //\u5982\u679c\u4ed6\u4eec\u4f7f\u7528\u7684\u6d4f\u89c8\u5668/\u64cd\u4f5c\u7cfb\u7edf\uff0c\u90a3\u4e48\u652f\u6301//\u989c\u8272\u4e3b\u9898\uff0c\u8bbe\uff06\uff0339;\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u8fd4\u56denull;};\u8ba9\u91ce\u9a6c=\uff08\u4e3b\u9898\uff09=\uff06gt; {//\u5982\u679c\u7528\u6237\u5df2\u660e\u786e\u9009\u62e9\u706f\u6216\u6697\uff0c\u5219\u5b58\u50a8\u9ed8\u8ba4\u4e3b\u9898\uff08Typeof Theme ===\uff06\uff0334; String\uff06\uff0334;\uff09window.localstorage.setItem\uff08\uff06\uff0334;\u4e3b\u9898\uff06\uff0334;\u4e3b\u9898\uff09 ;};\u8ba9MediaTheme =\uff08\uff09=\uff06gt; {//\u5982\u679c\u4ed6\u4eec\u6ca1\u6709\u660e\u786e\u8bbe\u7f6e\uff0c\u8ba9\uff06\uff0339; s\u68c0\u67e5\u5a92\u4f53\u67e5\u8be2const mql = matchMedia\uff08\uff06\uff0334;\uff08\u66f4\u559c\u6b22 - \u989c\u8272\u65b9\u6848\uff1a\u9ed1\u6697\uff09\uff06\uff0334;\uff09; const hasmediaquerypreference = typeof mql.matches ===\uff06\uff0334;\u5e03\u5c14\uff06\uff0334 ;;\u5982\u679c\uff08hasmediaquerypreference\uff09\u8fd4\u56demql.matches\uff1f \uff06\uff0334;\u9ed1\u6697\uff06\uff0334; \uff1a\uff06\uff0334;\u5149\uff06\uff0334 ;;}; const html = document.querySelector\uff08\uff06\uff0334; html\uff06\uff0334;\uff09; //\u4eceHTML\u6807\u8bb0\u83b7\u53d6\u4e3b\u9898\uff0c\u5982\u679c\u5b83\u6709\u4e3b\u9898\u6216\u4eceLocalStorage\u83b7\u53d6\u5b83\uff0c\u8bf7\u7559\u4e0bCheckCurrentTheme =\uff08\uff09=\uff06gt; {\u8ba9ProMeattr = HTML.getAttribute\uff08\uff06\uff0334;\u6570\u636e\u4e3b\u9898\uff06\uff0334;\uff09; if\uff08themeattr\uff09\u8fd4\u56dethemeattr;\u8fd4\u56degetsavedtheme\uff08\uff09;}; //\u5728localStorage\u4e2d\u8bbe\u7f6e\u4e3b\u9898\uff0c\u4ee5\u53caHTML\u6807\u8bb0\uff0cLet ApplicatTheme =\uff08\u4e3b\u9898\uff09=\uff06gt; {html.classname =\u4e3b\u9898; html.setTribute\uff08\uff06\uff0334;\u6570\u636e\u4e3b\u9898\uff06\uff0334;\u4e3b\u9898\uff09;\u5c1d\u8bd5{//\u5982\u679c\u5728\u672c\u5730\u5b58\u50a8\u4e2d\u5b58\u5728\u4fdd\u5b58\u7684\u4e3b\u9898\uff0c\u8bf7\u4f7f\u7528\uff0c//\u5426\u5219\u4f7f\u7528`\u66f4\u504f\u597d\u7684\u989c\u8272\u65b9\u6848\uff08Scheme Scheme`\uff09\u8bbe\u7f6e\u4e3b\u9898\uff0c\u8ba9\u4e3b\u9898= getsAvedTheme\uff08\uff09; if\uff08theme == null\uff09\u4e3b\u9898= mediaTheme\uff08\uff09; //\u8bbe\u7f6e\u521d\u59cb\u4e3b\u9898html.setattribute\uff08\uff06\uff0334;\u6570\u636e\u4e3b\u9898\uff06\uff0334;\u4e3b\u9898\uff09; html.classlist.add\uff08\u4e3b\u9898\uff09; //\u5982\u679c\u7528\u6237\u66f4\u6539\u7cfb\u7edf/\u6d4f\u89c8\u5668/\u64cd\u4f5c\u7cfb\u7edf\u4e3b\u9898\uff0c\u4e5f\u66f4\u65b0\u7ad9\u70b9\u4e3b\u9898\uff0c// ant\uff06\uff0339; t\u4fdd\u5b58\u672c\u5730\u5b58\u50a8\u7a97\u53e3\u7684\u66f4\u6539.matchmedia\uff08\uff06\uff0334;\uff08Prefers-color-scheme\uff1a\u9ed1\u6697\uff09\uff06\uff0334;\uff09.addeventlistener\uff08\uff06\uff0334;\u53d8\u66f4\uff06\uff0334;\uff08e\uff09=\uff06gt; {applicattheme\uff08e\uff09=\uff0334;\u9ed1\u6697\uff06\uff0334;\uff1a\uff06\uff0334;\u5149\u548c\uff0334;\uff09 ;}\uff09; //\u5728\u4e3b\u9898\u5207\u6362\u6309\u94ae\u5355\u51fb\uff0c\u5728\u6697\u548c\u5149\u6a21\u5f0f\u4e4b\u95f4\u5207\u6362\u9875\u9762\u4e3b\u9898\uff0c\u7136\u540e\u5c06\u4e3b\u9898\u4fdd\u5b58\u5728\u672c\u5730\u5b58\u50a8\u6587\u6863\u4e2d.QuerySelector\uff08\uff06\uff0334;\uff03\u4e3b\u9898 - \u5207\u6362\uff06\uff0334;\uff09.addeventlistener\uff08\uff06\uff0334;\u5355\u51fb\uff06\uff0334;\uff08\uff09=\uff06gt; {\u8ba9\u4e3b\u9898= checkCurrentTheme\uff08\uff09===\uff06\uff0334;\u6697\uff06\uff0334;\uff1f\uff06\uff0334;\u5149\u548c\uff0334;\uff1a\uff06\uff0334;\u9ed1\u6697\uff06\uff0334 ;; applicattheme\uff08\u4e3b\u9898\uff09;\u91ce\u9a6c\uff08\u4e3b\u9898\uff09;}}}}} catch\uff08e\uff09{console.warn\uff08\uff06\uff0334;\u4e3b\u9898\u662f\uff06\uff0339; t\u5728\u8fd9\u4e2a\u6d4f\u89c8\u5668\u4e0a\u3002\uff06\uff0334;\uff0ce\uff09;}\n \u60a8\u53ef\u4ee5\u5728\u4e0b\u9762\u67e5\u770b\u6f14\u793a\uff0c\u4f46\u60a8\u53ef\u80fd\u9700\u8981\u5728\u65b0\u9009\u9879\u5361\u4e2d\u6253\u5f00\u6f14\u793a\uff0c\u4ee5\u4fbf\u6b63\u5e38\u5de5\u4f5c\u3002\n  \u6b64\u5916\uff0c\u6ce8\u610f\uff0c\u6211\u5982\u4f55\u4ece\u672a\u8bbe\u7f6e\u6587\u672c\u989c\u8272\uff0c\u80cc\u666f\u989c\u8272\uff0c\u6eda\u52a8\u6761\u989c\u8272\u6216\u6309\u94ae\u6837\u5f0f\uff0c\u5373\u8bbe\u7f6e\u989c\u8272\u65b9\u6848\u7684\u9b54\u529b\u7684\u4e00\u90e8\u5206\u3002 ", "note_en": "I have a simple message for web developers, start adding the  color-scheme property to your webpages.\n &lt;!-- The page supports both dark and light color schemes, and the page author prefers dark.--&gt;\n  /* The page supports both dark and light color schemes, and the page author prefers dark.*/ :root {  : dark light;}\n I absolutely detest sites that  &#34;have a dark mode,  BUT DON&#39;T MAKE THE SCROLLBAR DARK!&#34;, a great example of this is  docusaurus.\n      The light mode scrollbar hurts the eyes, and ruins the look of the site, so, for the sake of everyone who has eyes and likes dark mode, please use  color-scheme, you can even use it together with your dark mode toggle by using css, for example, one of the sites I made for a client  josephojo.com\n  When using the  color-scheme property you can turn form elements, webpage background, text color, and scrollbars dark, a more famous example would be,  Github,\n  Notice, how the scrollbar is dark, and doesn&#39;t burn the eyes, they&#39;re able to do it, by using the meta tag.\n  For  josephojo.com I used the  color-scheme css property together with  @media (prefers-color-scheme: dark) {} and the  .dark class, the final result is\n {  : light;}  .dark {  : dark;} @media (  dark) {   :not( ) {  : dark; }}\n When creating the site I used  tailwindcss, with the dark mode set to &#34;class&#34;, my tailwind config looked like this,\n  For those who haven&#39;t used  tailwindcss before, it&#39;s basically the same as defining a class that when added to the html element will signal that the site is in dark mode.\n    Now that we have some boilerplate code, all you really need to do, is setup a toggle that will remember our current theme state.\n While developing  josephojo.com, I found that you have to set your theming system to support the native media theme before anything else, it&#39;s generally less painful to the user, that&#39;s why I set  html:not([data-theme]) in the  prefers-color-scheme: dark media query,\n  html.dark represents the dark theme applied by  tailwind and  [data-theme] represents the currently applied theme, if  data-theme is different from the local storage, then the theme was manually toggled and the page should use the new theme in  data-theme as well as update the local storage theme, otherwise, it should use the local storage theme as  data-theme, but because  data-theme is only applied to the  html element after javascript is loaded we can tell our css to use the default dark theme if  prefers-color-scheme: dark and the html element doesn&#39;t have the  data-theme attribute.\n   As you saw at the end there, changing the actual browser theme won&#39;t permanently change the theme set in local storage, with the idea being, if a user a manually changes the theme they must want to use that theme permanently, otherwise use the system theme.\n  // Based on [joshwcomeau.com/gatsby/dark-mode/] let getSavedTheme =  () =&gt; {  const theme =  window.localStorage.getItem( &#34;theme&#34;);  // If the user has explicitly chosen light or dark,  // let&#39;s use it. Otherwise, this value will be null.  if ( typeof theme ===  &#34;string&#34;)  return theme;  // If they are using a browser/OS that doesn&#39;t support  // color themes, let&#39;s not do anything.  return  null;}; let saveTheme =  ( theme) =&gt; {  // If the user has explicitly chosen light or dark, store the default theme  if ( typeof theme ===  &#34;string&#34;)  window.localStorage.setItem( &#34;theme&#34;, theme);}; let mediaTheme =  () =&gt; {  // If they haven&#39;t been explicitly set, let&#39;s check the media query  const mql = matchMedia( &#34;(prefers-color-scheme: dark)&#34;);  const hasMediaQueryPreference =  typeof mql.matches ===  &#34;boolean&#34;;  if (hasMediaQueryPreference)  return mql.matches ?  &#34;dark&#34; :  &#34;light&#34;;}; const html =  document.querySelector( &#34;html&#34;); // Get theme from html tag, if it has a theme or get it from localStorage let checkCurrentTheme =  () =&gt; {  let themeAttr = html.getAttribute( &#34;data-theme&#34;);  if (themeAttr)  return themeAttr;  return getSavedTheme();}; // Set theme in localStorage, as well as in the html tag let applyTheme =  ( theme) =&gt; { html.className = theme; html.setAttribute( &#34;data-theme&#34;, theme);}; try {  // if there is a saved theme in local storage use that,  // otherwise use `prefer-color-scheme` to set the theme   let theme = getSavedTheme();  if (theme ==  null) theme = mediaTheme();  // set the initial theme html.setAttribute( &#34;data-theme&#34;, theme); html.classList.add(theme);  // If a user changes the system/browser/OS theme, update the site theme as well,  // but don&#39;t save the change in local storage  window .matchMedia( &#34;(prefers-color-scheme: dark)&#34;) .addEventListener( &#34;change&#34;,  ( e) =&gt; { applyTheme(e.matches ?  &#34;dark&#34; :  &#34;light&#34;); });  // On theme toggle button click, toggle the page theme between dark and light mode,  // then save the theme in local storage  document .querySelector( &#34;#theme-toggle&#34;) .addEventListener( &#34;click&#34;,  () =&gt; {  let theme = checkCurrentTheme() ===  &#34;dark&#34; ?  &#34;light&#34; :  &#34;dark&#34;; applyTheme(theme); saveTheme(theme); });}  catch (e) {  console.warn( &#34;Theming isn&#39;t available on this browser.&#34;, e);}\n You can view the demo below, but you may need to open the demo in a new tab for it to work properly.\n  Also, notice, how I never set the text color, background color, scrollbar color or button styles, that&#39;s part of the magic of setting  color-scheme.", "posttime": "2021-06-23 01:07:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6dfb\u52a0,add,\u4e3b\u9898", "title": "PSA\uff1a\u5c06\u9ed1\u6697\u6a21\u5f0f\u6dfb\u52a0\u5230\u60a8\u7684\u7f51\u7ad9\uff0c\u6216\u8005\u81f3\u5c11\u8ba9\u6d4f\u89c8\u5668\u4e3a\u60a8\u670d\u52a1 ", "title_en": "PSA: Add dark mode to your sites, or at least let the browsers do it for you", "transed": 1, "url": "https://blog.okikio.dev/psa-add-dark-mode-to-your-sites-or-at-least-let-the-browsers-do-it-for-you", "via": "", "real_tags": ["\u6dfb\u52a0", "add", "\u4e3b\u9898"]}, {"category": "", "categoryclass": "", "imagename": "48861ce9c562640d54afc97b18dc2fc3.jpg", "infoid": 1067490, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u660e\u5e74\uff0c12\u5c81\u7684\u4f17\u514b\u5fb7\u83f2\u5fb7\u5e73\u53f0\u7684Kickstarter\u5c06\u5c1d\u8bd5\u4e00\u9879\u4e3a\u671f\u56db\u5929\u7684\u5de5\u4f5cWorwweek\uff0c\u8fd9\u662f\u8be5\u516c\u53f8\u7684\u53d1\u8a00\u4eba\u544a\u8bc9\u5927\u897f\u6d0b\u3002\u51cf\u5c11\u5176\u5458\u5de5\u65f6\u95f4\u800c\u4e0d\u964d\u4f4e\u5176\u5de5\u8d44\u7684\u975e\u4f20\u7edf\u884c\u52a8\u5c06\u662f\u5bf9\u8be5\u7406\u8bba\u7684\u5b9d\u8d35\u8003\u9a8c\uff0c\u5373\u66f4\u77ed\u7684\u65f6\u95f4\u8868\u53ef\u4ee5\u6539\u5584\u5de5\u4eba\u7684\u751f\u547d\uff0c\u6216\u8005\u81f3\u5c11\u662f\u4f01\u4e1a\u7684\u5e95\u7ebf\u3002\n  Kickstarter\u5c06\u52a0\u5165\u5c11\u6570\u5176\u4ed6\u5bb6\u5ead\u540d\u79f0\u516c\u53f8\uff0c\u8fd9\u4e9b\u516c\u53f8\u5df2\u7ecf\u5c1d\u8bd5\u5243\u6389\u4e86\u6807\u51c6\u5de5\u4f5c\u5468\u7684\u4e00\u5929\u3002\u6c49\u5821\u94fe\u6447\u68da\u5b50\u7528\u4e00\u4e9b\u5458\u5de5\u5c1d\u8bd5\u4e86\u9644\u8868\uff08\u867d\u7136\u5927\u6d41\u884c\u5c31\u51b3\uff0c\u4f46\u516c\u53f8\u5c1a\u672a\u62ab\u9732\u5176\u672a\u6765\u7684\u610f\u56fe\uff09\uff0c\u73b0\u5728\uff0c\u6d88\u8d39\u54c1\u516c\u53f8\u8054\u5408\u5229\u534e\u7684\u65b0\u897f\u5170\u529e\u4e8b\u5904\u4e2d\u9014\u901a\u8fc7\u4e86\u4e00\u4e2a12\u4e2a\u6708\u7684\u6d4b\u8bd5\u8fd0\u884c\u3002\n \u5c3d\u7ba1\u5982\u6b64\uff0c\u5458\u5de5\u4ecd\u7136\u9700\u8981\u4e94\u5929\uff0c\u53ea\u6709\u56db\u4e2a\u662f\u975e\u5e38\u7a00\u6709\u7684 - \u4e5f\u8bb8\u53ea\u6709\u51e0\u5341\u51e0\u5bb6\u5728\u7f8e\u56fd\u8fd9\u6837\u505a\u3002 Kickstarter\u5206\u4eab\u4e86\u8bb8\u591a\u4eba\u7684\u7279\u70b9\uff1a\u5b83\u5f88\u5c0f\uff08\u5b83\u670990\u540d\u5458\u5de5\uff09\uff0c\u5176\u5de5\u4f5c\u4e3b\u8981\u662f\u57fa\u4e8e\u8ba1\u7b97\u673a\u7684\uff0c\u5176\u4e2d\u4e00\u4e2a\u521b\u59cb\u4eba\u4ecd\u7136\u4e0e\u516c\u53f8\u76f4\u63a5\u6d89\u53ca\u3002\u989d\u5916\u7684\u533a\u522b\u662fKickstarter\u662f\u4e00\u4e2a\u201c\u516c\u5171\u798f\u5229\u516c\u53f8\u201d\uff0c\u4e00\u4e2a\u6cd5\u5f8b\u6307\u5b9a\uff0c\u7ed1\u5b9a\u516c\u53f8\u4ee5\u8ffd\u6c42\u66f4\u5927\u7684\u4e00\u4e9b\u5143\u7d20\u3002\n \u4f46\u6b63\u5982\u6211\u4e0a\u5468\u5728\u6211\u7684\u4e89\u8bba\u4e2d\u5199\u7684\u4e3a\u671f\u56db\u5929\u7684\u5de5\u4f5c\u5468\uff0c\u7f29\u77ed\u4e86\u6bcf\u5468\u65f6\u95f4\u8868\uff0c\u4e3a\u5404\u79cd\u5404\u6837\u7684\u4f01\u4e1a\u5de5\u4f5c\uff0c\u5305\u62ec\u5de5\u5382\u548c\u517b\u8001\u9662\u3002\u8f76\u4e8b\uff0c\u5de5\u4eba\u4f3c\u4e4e\u66f4\u5e78\u798f\uff0c\u66f4\u4e13\u6ce8\uff0c\u4f01\u4e1a\u62a5\u544a\u6b63\u5e38\u5b8c\u6210\u3002 \u201c\u6709\u8db3\u591f\u7684\u8bc1\u636e\u8868\u660e\uff0c[\u66f4\u591a\u516c\u53f8]\u81f3\u5c11\u5e94\u8be5\u5c1d\u8bd5\u5b83\uff0c\u201dJon Leland\uff0cKickstarter\u7684\u6570\u636e\u548c\u5206\u6790\u8d1f\u8d23\u4eba\u544a\u8bc9\u6211\u3002 \uff08\u53d1\u8a00\u4eba\u8868\u793a\uff0c\u8be5\u516c\u53f8\u5c1a\u672a\u51b3\u5b9a\u6d4b\u8bd5\u6301\u7eed\u591a\u4e45\u6216\u7ed3\u679c\u5c06\u6709\u8d44\u683c\u4f5c\u4e3a\u6210\u529f\u3002\uff09\n Kickstarter\u662f\u7b2c\u4e00\u5bb6\u81f4\u529b\u4e8e\u75314\u5929\u5de5\u4f5c\u5468\u7ade\u9009\u6d3b\u52a8\u534f\u8c03\u7684\u66f4\u5e7f\u6cdb\u7684\u8bd5\u70b9\u8ba1\u5212\uff0c\u674e\u5170\u53c2\u4e0e\u5176\u4e2d\uff0c\u4e0b\u5468\u63a8\u51fa\u3002\u8be5\u7ade\u9009\u6d3b\u52a8\uff0c\u4e00\u4e2a\u66f4\u5e7f\u6cdb\u7684\u5168\u7403\u63a8\u52a8\u516c\u53f8\u8bd5\u7528\u65e5\u7a0b\u5b89\u6392\u7684\u4e00\u90e8\u5206\uff0c\u65e8\u5728\u65e8\u5728\u660e\u5e74\u53c2\u52a0\u5176\u4ed6\u96c7\u4e3b\u53c2\u52a0\u5ba1\u5224\uff0c\u4ee5\u5efa\u7acb\u4e00\u4e2a\u66f4\u4e25\u683c\u7684\u6570\u636e\u96c6\u3002\n \u4f4e\u85aa\u548c\u6bcf\u5c0f\u65f6\u5de5\u4eba\u53ef\u80fd\u4f1a\u4ece\u8f83\u77ed\u7684\u4e00\u5468\u4e2d\u53d7\u76ca\uff0c\u6bd4\u767d\u9886\u5de5\u4f5c\u8005\u559c\u6b22\u50cfKickstarter\u90a3\u6837\u7684\u767d\u9886\u5de5\u4eba\u3002\u6731\u4e3d\u897f\u8212\u5c14\u00b7\u65af\u4e3d\u4e3d\u8212\u5c14\uff08Buliet Schor\uff09\u5728\u6ce2\u58eb\u987f\u5b66\u9662\u5b66\u4e60\u5de5\u4f5c\u65f6\u95f4\u7684\u5386\u53f2\uff0c\u6700\u8fd1\u544a\u8bc9\u6211\uff0c\u867d\u7136\u4e3a\u671f\u56db\u5929\u7684\u4e00\u5468\uff0c\u4f46\u662f\u5728\u5c0f\u578b\u7cbe\u54c1\u96c7\u4e3b\u9996\u5148\u6355\u83b7\uff0c\u5b83\u53ef\u4ee5\u4f20\u64ad\u5230\u66f4\u5927\u7684\u96c7\u4e3b\uff0c\u5e76\u5f00\u59cb\u5230\u8fbe\u5176\u4ed6\u4eba\u3002\u4f20\u64ad\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\uff0c\u56db\u5929\u7684\u4e00\u5468\u53ef\u80fd\u6210\u4e3a\u4e0e\u975e\u8fd0\u52a8\u79d1\u6280\u516c\u53f8\u76f8\u5173\u7684\u53e6\u4e00\u4e2a\u95ee\u9898\u3002\u4f46\u662f\uff0c\u8e22\u7403\u8fd0\u52a8\u5458\u53ef\u80fd\uff0c\u6f5c\u5728\u7684\u4f8b\u5b50\uff0c\u6f5c\u5728\u5730\u4fb5\u8680\u4e86\u4e94\u5929\u7684\u4e00\u5468\u7684\u6587\u5316\u7edf\u6cbb\uff0c\u4f7f\u96c7\u4e3b\u66f4\u52a0\u5f00\u653e\u5230\u4e0d\u540c\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u6240\u4ee5\u5728\u672a\u6765\u7684\u67d0\u4e2a\u65f6\u95f4\uff0c\u4e00\u4e2a\u4e09\u5929\u7684\u5468\u672b\u4f3c\u4e4e\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u3002 ", "note_en": "Next year, Kickstarter, the 12-year-old crowdfunding platform, will experiment with a four-day workweek, a spokesperson for the company told  The Atlantic. The unconventional move of reducing its employees\u2019 hours without reducing their pay will be a valuable test of the theory that a shorter schedule can\u2014on top of improving workers\u2019 lives\u2014be good, or at least neutral, for businesses\u2019 bottom line.\n  Kickstarter will join a handful of other household-name companies that have tried shaving a day off the standard workweek. The burger chain Shake Shack  tried the schedule out with some employees (though the pandemic put the trial on hold, and the company hasn\u2019t disclosed its future intentions), and right now, the New Zealand offices of the consumer-goods corporation Unilever are  halfway through a 12-month test run of their own.\n Still, paying employees for five days when they work just four is exceedingly rare\u2014perhaps only a few dozen companies in the United States do so. Kickstarter shares the characteristics of many of them: It is small (it has 90 employees), its work is primarily computer-based, and one of its founders is still directly involved with the company. An additional distinction is that Kickstarter is a  \u201cpublic-benefit corporation,\u201d a legal designation that binds companies to pursuing some element of the greater good.\n But as I wrote last week  in my argument for the four-day workweek, shortening weekly schedules has worked for all sorts of businesses, including factories and nursing homes. Anecdotally, workers seem to be happier and more focused, and businesses report getting just as much done. \u201cThere\u2019s more than enough evidence that suggests that [more companies] should at least try it,\u201d Jon Leland, Kickstarter\u2019s head of data and analytics, told me. (A spokesperson said that the company hasn\u2019t yet decided how long the test will last or what outcomes would qualify as a success.)\n Kickstarter is the first company to commit to a broader pilot program coordinated by  the 4 Day Workweek campaign, which Leland is involved with and which launches next week. The campaign, part of  a wider global push for companies to try out the schedule, aims to enlist other employers to participate in trials next year, in order to build up a more rigorous set of data.\n Lower-paid and hourly workers  would likely benefit from a shorter week even more than white-collar office workers like those at Kickstarter. Juliet Schor, a sociologist at Boston College who has studied the history of working hours,  recently told me that although the four-day week is catching on first at small, boutique employers, it could spread to larger ones and begin to reach everyone else. That spread may never happen, and the four-day week could become another perk associated with offbeat tech companies. But examples such as Kickstarter\u2019s could, potentially, erode the cultural dominance of the five-day week and make employers more open to different ways of working, so that sometime in the future, a three-day weekend will seem like nothing special.", "posttime": "2021-06-23 01:06:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "test", "title": "Kickstarter\u5c06\u57282022\u5e74\u6d4b\u8bd54\u5929\u7684\u5de5\u4f5c\u5468 ", "title_en": "Kickstarter Will Test a 4-Day Workweek in 2022", "transed": 1, "url": "https://www.theatlantic.com/family/archive/2021/06/kickstarter-four-day-workweek/619263/", "via": "", "real_tags": ["test"]}]