[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1071622, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b89\u5168\u65ad\u8a00\u6807\u8bb0\u8bed\u8a00 (SAML) \u662f\u4e00\u79cd\u7528\u4e8e\u5728\u5404\u65b9\u4e4b\u95f4\u4ea4\u6362\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u6570\u636e\u7684\u5f00\u653e\u6807\u51c6\u3002 SAML \u901a\u5e38\u7528\u4e8e\u5355\u70b9\u767b\u5f55\uff08\u201c\u4f7f\u7528 Google \u767b\u5f55\u201d\u3001\u201c\u4f7f\u7528 Twitter \u767b\u5f55\u201d\u7b49\uff09\u3002\u8fd9\u610f\u5473\u7740\u5f53\u60a8\u8981\u767b\u5f55 example.com \u65f6\uff0cexample.com \u53ef\u4ee5\u4fe1\u4efb\u5e76\u4f7f\u7528\u5916\u90e8\u8eab\u4efd\u9a8c\u8bc1\u63d0\u4f9b\u7a0b\u5e8f\u4e3a\u60a8\u65ad\u8a00\u7528\u6237\u7684\u8eab\u4efd\u3002 SAML \u662f\u5173\u4e8e\u8de8\u7ec4\u7ec7\u8fb9\u754c\uff08\u7f51\u7edc\u57df\uff09\u4f20\u8fbe\u8fd9\u4e9b\u8eab\u4efd\u9a8c\u8bc1\u548c\u8eab\u4efd\u8be6\u7ec6\u4fe1\u606f\u3002 SAML \u6700\u8fd1\u51fa\u73b0\u4e86\u5177\u6709\u975e\u5e38\u5927\u5f71\u54cd\u7684\u707e\u96be\u6027\u6f0f\u6d1e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u7406\u89e3\u6b63\u786e\uff08\u6211\u53ef\u80fd\u7406\u89e3\uff0c\u56e0\u4e3a\u5b89\u5168\u7814\u7a76\u4eba\u5458\u8f6c\u53d1\u4e86\u6211\u7684\u53cd\u5e94\uff09\u82ac\u5170\u7a0e\u52a1\u673a\u5173\u3001\u5927\u591a\u6570\u653f\u5e9c\u670d\u52a1\u548c\u5065\u5eb7\u8bb0\u5f55\u7cfb\u7edf\u90fd\u662f\u8106\u5f31\u7684\uff0c\u4ee5\u81f3\u4e8e\u653b\u51fb\u8005\u672c\u53ef\u4ee5\u7ee7\u7eed\u7aa5\u63a2\u4eba\u4eec\u7684\u7eb3\u7a0e\u7533\u62a5\u8868\u3001\u5065\u5eb7\u8bb0\u5f55\u4ee5\u53ca\u57fa\u672c\u4e0a\u4efb\u4f55\u5728\u7ebf\u53ef\u7528\u7684\u653f\u5e9c\u76f8\u5173\u4fe1\u606f\u3002\u5b83\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u88ab\u5a92\u4f53\u5ffd\u7565\u4e86\uff0c\u4e5f\u8bb8\u662f\u56e0\u4e3a\u8fd9\u4e9b\u6f0f\u6d1e\u6ca1\u6709\u88ab\u5229\u7528\uff08\u6216\u8005\u6ca1\u6709\u68c0\u6d4b\u5230\u8fd9\u6837\u7684\u5b9e\u4f8b\uff09\u3002 SAML \u4f7f\u7528\u57fa\u4e8e\u8ba1\u7b97\u503c\u7684\u7b7e\u540d\u3002\u8fd9\u79cd\u505a\u6cd5\u672c\u8d28\u4e0a\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u56e0\u6b64 SAML \u4f5c\u4e3a\u8bbe\u8ba1\u662f\u4e0d\u5b89\u5168\u7684\u3002\u603b\u800c\u8a00\u4e4b\uff1a\u4e00\u65e6\u60a8\u5c06\u5b89\u5168\u6027\u57fa\u4e8e\u67d0\u4e9b\u8ba1\u7b97\u5c5e\u6027\uff0c\u60a8\u73b0\u5728\u5c31\u53ef\u4ee5\u5229\u7528\u6b64\u8ba1\u7b97\u4e2d\u7684\u4efb\u4f55\u7f3a\u9677\u3001\u5dee\u5f02\u6216\u6b67\u4e49\u3002\u8ba1\u7b97\u8d8a\u590d\u6742\uff0c\u5c31\u8d8a\u5371\u9669\u3002SAML \u7b7e\u540d\u8ba1\u7b97\u975e\u5e38\u590d\u6742\u3002\u4f46\u662f\u8ba9\u6211\u4eec\u7ee7\u7eed\u89e3\u91ca\u8fd9\u4e2a\u6982\u5ff5\u3002\u8ba9\u6211\u4eec\u62ff\u4e00\u4e2a\u4f2a\u8eab\u4efd\u6587\u4ef6\uff08\u5c3d\u7ba1\u5b9e\u9645 SAML \u662f XML\uff09\uff1a\n\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u7a0d\u5fae\u66f4\u6539\u6587\u4ef6\uff08\u6211\u5728 { \u4e4b\u524d\u6dfb\u52a0\u4e86\u7a7a\u683c\uff09\u3002\u6211\u4eec\u6ce8\u610f\u5230\u7b7e\u540d\u53d1\u751f\u4e86\u53d8\u5316\uff1a\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5c5e\u6027\uff0c\u56e0\u4e3a\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5bf9\u5b89\u5168\u6027\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\uff08\u5373\u4f7f\u662f\u90a3\u4e9b\u5728 JSON \u7ea7\u522b\u88ab\u8ba4\u4e3a\u6beb\u65e0\u610f\u4e49\u7684\u66f4\u6539\uff09-\u5173\u952e\u6587\u6863\uff08SAML \u662f\uff09\u4ee5\u751f\u6210\u4e0d\u540c\u7684\u7b7e\u540d\u3002\u53ef\u4ee5\u5728\u4e0d\u7834\u788e\u7684\u60c5\u51b5\u4e0b\u5851\u9020\u6210\u5176\u4ed6\u4e1c\u897f\u7684\u4e1c\u897f\u7684\u8d28\u91cf\uff0c\u4f8b\u5982\u7c98\u571f\u7684\u5ef6\u5c55\u6027\u3002\u6211\u4eec\u5c06\u6587\u6863\u7b7e\u540d\u4e3a\u539f\u59cb\u5b57\u8282 blob \u4f7f\u5f97\u8fd9\u79cd\u4e0d\u53ef\u5ef6\u5c55\u6027\uff0c\u5373\u5b83\u4e0d\u80fd\u5728\u4e0d\u7834\u574f\u5b83\u7684\u60c5\u51b5\u4e0b\u6210\u5f62\u3002\u8fd9\u662f\u4fe1\u606f\u5b89\u5168\u9886\u57df\u7684\u7406\u60f3\u884c\u4e3a\u3002\u4e3a\u4e86\u901a\u8fc7\u793a\u4f8b\u8fdb\u884c\u89e3\u91ca\uff0c\u8ba9\u6211\u4eec\u56de\u5230 JSON \u793a\u4f8b\u3002\u6211\u4eec\u5c06\u4f7f\u7528 jq\uff08\u4e00\u4e2a JSON \u8f6c\u6362\u5b9e\u7528\u7a0b\u5e8f\uff09\u4ece\u6211\u4eec\u7684\u6587\u6863\u5185\u90e8\u8ba1\u7b97\u4e00\u4e9b\u4e1c\u897f\uff1a\u6ce8\u610f\u901a\u8fc7 jq \u7ba1\u9053\u6587\u4ef6\u662f\u5982\u4f55\u5220\u9664\u7a7a\u95f4\u7684\uff1f\u90a3\u662f\u56e0\u4e3a\u5728 JSON \u7ea7\u522b\u7a7a\u95f4\u5e76\u4e0d\u91cd\u8981\u3002\u4e4d\u4e00\u770b\uff0c\u8fd9\u4f3c\u4e4e\u5e76\u4e0d\u6709\u8da3\uff0c\u4f46\u6211\u4eec\u6b63\u5728\u5feb\u901f\u524d\u5f80\u5371\u9669\u533a\u57df\u3002\u5373\u4f7f\u6587\u4ef6\u4ecd\u7136\u6709\u7a7a\u683c\u4fee\u6539\uff0c\u7b7e\u540d\u73b0\u5728\u4e0e\u539f\u59cb\u7b7e\u540d\u5339\u914d\uff08\u6765\u81ea\u6ca1\u6709\u6dfb\u52a0\u7a7a\u683c\u7684\u6587\u4ef6\uff09\u3002\n$ cat assertion.json{ &quot;signed_in_user&quot;: &quot;EvilAttacker&quot;, &quot;signed_in_user&quot;: &quot;Joonas&quot;}$ cat assertion.json | .jq | sha1sume58dc03a7491f9e5fb2ed664b23d826489c42cc5#\u4e0a\u9762\u662f\u56e0\u4e3a\uff1a$ cat assertion.json | jq .{ &quot;signed_in_user&quot;: &quot;Joonas&quot;} \u7b7e\u540d\u4ecd\u7136\u4e0e\u539f\u59cb\u6587\u4ef6\u5339\u914d\u3002\u8fd9\u662f\u56e0\u4e3a\u91cd\u590d\u7684\u5bc6\u94a5\u662f\u6709\u6548\u7684 JSON\uff0c\u5728\u5904\u7406\u65f6\u88ab\u5220\u9664\uff0c\u5e76\u4e14\u5927\u591a\u6570 JSON \u5b9e\u73b0\u8ba9\u6700\u540e\u4e00\u4e2a\u5bc6\u94a5\u83b7\u80dc\u3002\u73b0\u5728\uff0c\u5982\u679c\u60a8\u6709\u4e24\u6bb5\u4e0d\u540c\u7684\u4ee3\u7801\u6765\u5904\u7406 SAML \u6587\u6863\uff0c\u5e76\u4e14\u5b83\u4eec\u5bf9 JSON \u91cd\u590d\u952e\uff08= \u6d88\u606f\u8bed\u4e49\u5185\u5bb9\uff09\u6709\u4e0d\u540c\u7684\u89e3\u91ca/\u89e3\u6790\u5668\u884c\u4e3a\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u653b\u51fb\u8005\u8981\u6c42\u8eab\u4efd\u63d0\u4f9b\u8005\u4e3a\u4ed6\u7b7e\u7f72\u65ad\u8a00\uff0c\u4f46\u7531\u4e8e SAML \u7684\u53ef\u5ef6\u5c55\u6027\uff0c\u4ed6\u80fd\u591f\u653b\u51fb\u89e3\u6790\u5668\u5dee\u5f02\u5e76\u7be1\u6539\u6587\u6863\uff0c\u4f7f\u5176\u5bf9\u7b7e\u540d\u9a8c\u8bc1\u4ecd\u7136\u6709\u6548\uff0c\u4f46\u53ef\u4ee5\u8bbf\u95ee\u5176\u4ed6\u7528\u6237\u7684\u6570\u636e\u3002\u73b0\u5728\u6211\u5e0c\u671b\u89e3\u91ca\u4e86\u5ef6\u5c55\u6027\u548c\u57fa\u4e8e\u8ba1\u7b97/\u89e3\u91ca\u5185\u5bb9\u7684\u7b7e\u540d\u662f\u591a\u4e48\u5371\u9669\u3002\u8fd9\u4e9b SAML \u6f0f\u6d1e\u53d1\u751f\u7684\u4e8b\u60c5\u5e76\u4e0d\u50cf\u6211\u4eec\u7684 JSON \u793a\u4f8b\u90a3\u4e48\u7b80\u5355\uff0c\u4f46\u8fd9\u8bf4\u660e\u4e86\u8fd9\u4e9b\u6f0f\u6d1e\u7684\u539f\u7406\u53ca\u5176\u6839\u672c\u539f\u56e0\uff1a\u5bf9\u8ba1\u7b97\u503c\u548c\u5ef6\u5c55\u6027\u8fdb\u884c\u7b7e\u540d\u3002\u6700\u65b0\u7684\u6f0f\u6d1e\u662f\u7531\u4e8e XML \u5f80\u8fd4\u4e0d\u7a33\u5b9a\u6027\u9020\u6210\u7684\uff08\u8bf7\u53c2\u9605\u6807\u9898\u201cXML \u5f80\u8fd4\u6f0f\u6d1e\u662f\u4ec0\u4e48\u6837\u7684\u201d\uff09\u3002\n\u603b\u4e4b\uff0c\u6f0f\u6d1e\u4ea7\u751f\u4e8e\u89e3\u6790 XML -&gt; \u7f16\u5199 XML \u4ea7\u751f\u8bed\u4e49\u4e0d\u540c\u7684\u6587\u6863\uff0c\u5373\u7f16\u7801\uff08\u89e3\u7801\uff08xmlDocument\uff09\uff09\uff01= xmlDocument\uff09\u3002\u6211\u4e0d\u662f 100 % \u786e\u5b9a\uff0c\u4f46\u6211\u8ba4\u4e3a\u7531\u4e8e SAML \u7b7e\u540d\u9a8c\u8bc1\u9700\u8981\u4e00\u4e2a XML \u5199\u5165\u6b65\u9aa4\uff0c\u5b83\u662f\u8fd9\u6837\u7684\uff1a\u5982\u679c SAML \u5f85\u7b7e\u540d\u5185\u5bb9\u662f\u4e0d\u53ef\u5ef6\u5c55\u7684\uff0c\u5219\u4e0a\u8ff0\u5185\u5bb9\u4e0d\u4f1a\u6210\u4e3a\u653b\u51fb\u5411\u91cf\uff0c\u5373\u8eab\u4efd\u63d0\u4f9b\u8005\u7b7e\u7f72\u6587\u6863\u540e\u7684\u4efb\u4f55\u66f4\u6539\u90fd\u5c06\u88ab\u68c0\u6d4b\u4e3a\u7b7e\u540d\u8fdd\u89c4\u3002\u8ba9\u6211\u4eec\u771f\u8bda\u5730\u5047\u8bbe SAML \u8bbe\u8ba1\u8005\u77e5\u9053\u4e0d\u53ef\u5ef6\u5c55\u6027\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5c5e\u6027\uff0c\u8ba9\u6211\u4eec\u8bd5\u7740\u731c\u6d4b\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u6700\u7ec8\u4ecd\u7136\u91c7\u7528\u53ef\u5ef6\u5c55\u6027\u8bbe\u8ba1\u3002\u6240\u4ee5\uff0c\u8ba9\u6211\u4eec\u7b7e\u7f72\u4e00\u4e9b\u4e1c\u897f\u3002\u5f53\u4e00\u4e2a\u4eba\u7b7e\u7f72\u67d0\u7269\u65f6\uff0c\u5f97\u5230\u4e00\u4e2a\u7b7e\u540d\u4f5c\u4e3a\u8f93\u51fa\uff1asign(contentToSign,signingKey) -&gt; \u7b7e\u540d\u3002\u4e3a\u4e86\u4f7f\u7b7e\u540d\u6709\u7528\uff0c\u60a8\u9700\u8981\u5c06\u7b7e\u540d\u4e0e contentToSign \u4e00\u8d77\u4f20\u8f93\uff0c\u4ee5\u4fbf\u5728\u6d88\u8d39\u8005\u8bfb\u53d6 contentToSign \u65f6\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u7b7e\u540d\u5bf9\u5176\u8fdb\u884c\u9a8c\u8bc1\u3002\u4f46\u662f\u7f3a\u5c11\u7b7e\u540d\u3002 SAML \u8bbe\u8ba1\u4eba\u5458\u53ef\u80fd\u4e0d\u60f3\u5355\u72ec\u4f20\u8f93 SAML \u6587\u6863\u53ca\u5176\u7b7e\u540d\uff08\u7b7e\u540d\u53ef\u80fd\u5728 HTTP \u6807\u5934\u6216 URL \u53c2\u6570\u4e2d\uff09\uff0c\u56e0\u6b64\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4ed6\u4eec\u5e0c\u671b\u5c06\u5176\u5d4c\u5165\u5230\u540c\u4e00\u4e2a XML \u6587\u6863\u4e2d\uff1a\n\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u4f1a\u5f97\u5230\u66f4\u591a\u7684 YOLO\u3002\u7b7e\u540d\u5b58\u50a8\u5728 contentToSign \u4e0b\uff0c\u56e0\u6b64\u5728\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\uff0c\u7b7e\u540d\u9700\u8981\u88ab\u5ffd\u7565\uff08\u540c\u6837\u662f\u66f4\u5371\u9669\u7684\u590d\u6742\u6027\uff09\uff0c\u4ee5\u4e0d\u5c06\u5176\u771f\u6b63\u5305\u542b\u5728 contentToSign \u4e2d\uff0c\u8fd9\u5c06\u4f7f\u5176\u6210\u4e3a\u4e0d\u53ef\u80fd\u7684\u9012\u5f52\u95ee\u9898\uff1a\u4f46\u8ba9\u6211\u4eec\u60f3\u8c61\u4e00\u4e0b\u4e4b\u524d\u7b7e\u540d\u662f\u6ca1\u6709\u5b58\u50a8\u5728 contentToSign \u4e2d\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u57fa\u4e8e\u5b57\u8282\u8fdb\u884c\u7b7e\u540d\u9a8c\u8bc1\uff0c\u8bf7\u56de\u5230\u95ee\u9898\u4e0a\u6765\uff01\u95ee\u9898\u662f\u4ece XML \u6d88\u606f\u5185\u90e8\u63d0\u53d6\u5c5e\u4e8e contentToSign \u7684\u5b57\u8282\u771f\u7684\u5f88\u56f0\u96be\u3002\u636e\u6211\u6240\u77e5\uff0cXML \u89e3\u6790\u5668 API \u4e0d\u652f\u6301\u6b64\u7528\u4f8b\u3002\u5373\u4f7f\u6709\u4e9b\u4eba\u613f\u610f\uff0c\u4e3a\u4e86\u4f7f SAML \u6709\u7528\uff0c\u4ed6\u4eec\u4e5f\u5fc5\u987b\u8fce\u5408\u5927\u591a\u6570 XML \u89e3\u6790\u5668\u5b9e\u73b0\u652f\u6301\u7684\u5185\u5bb9\u3002 =&gt; \u5f53\u4f60\u6709 samlDocument \u5e76\u4e14\u4f60\u60f3\u8bbf\u95ee\u5b83\u7684\u5b50\u6811 contentToSign \u65f6\uff0c\u4f60\u53ea\u80fd\u5728\u90a3\u91cc\u83b7\u5f97 XML \u7ea7\u522b\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u6240\u4ee5 SAML \u8bbe\u8ba1\u8005\u53ef\u80fd\u6ca1\u6709\u8003\u8651\u592a\u591a\uff0c\u53bb\ud83e\udd37\u200d\u2642\ufe0f \u8bf4\u201c\u8ba9\u6211\u4eec\u7b7e\u7f72 XML-\u7136\u540e\u6c34\u5e73\u6570\u636e\u201d\u3002\u5bf9 XML \u89e3\u6790\u5668\u7684\u8f93\u51fa\u8fdb\u884c\u7b7e\u540d\u771f\u7684\u5f88\u96be\uff0c\u56e0\u4e3a\u60a8\u8bd5\u56fe\u4ece XML \u89e3\u6790\u8f93\u51fa\u4e2d\u4fdd\u6301\u7b7e\u540d\u8f93\u5165\u7a33\u5b9a\uff0cXML \u89e3\u6790\u8f93\u51fa\u5728 XML \u5e93\u4e0e\u5e93\u4e4b\u95f4\u4ee5\u53ca\u8bed\u8a00\u4e0e\u8bed\u8a00\u4e4b\u95f4\u5b58\u5728\u89e3\u6790\u5668\u5dee\u5f02\u3002\u6240\u4ee5\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u6709 XML dsig \u7684\u539f\u56e0\uff0c\u5b83\u5177\u6709\u4f8b\u5982\u6392\u5e8f XML \u7684\u89c4\u5219\u5c5e\u6027\u5728\u4e00\u4e9b clusterfuck order \u4e2d\uff0c\u4ee5\u4fbf SAML \u5b9e\u73b0\u5c31\u9a8c\u8bc1\u7b7e\u540d\u7684\u5b57\u8282\u5e8f\u5217\u8fbe\u6210\u67d0\u79cd\u7a33\u5b9a\u7684\u5171\u8bc6\u3002\u6700\u540e\uff0c\u65e0\u8bba\u5982\u4f55\u6211\u4eec\u603b\u662f\u9700\u8981\u5339\u914d\u5b57\u8282\u3002\u8fd9\u79cd\u75af\u72c2\u88ab\u79f0\u4e3a\u89c4\u8303\u5316\uff0c\u5b83\u8f6c\u6362\u4e86\u8fd9\u6837\u7684\u4e1c\u897f\uff1a\uff08\u8fd9\u53ea\u662f\u6211\u53d1\u660e\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4e0d\u786e\u5b9a\u54ea\u4e9b\u89c4\u5219\u786e\u5b9e\u5b58\u5728\uff0c\u4f46\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\u3002\uff09\u603b\u7ed3\uff1aXML \u5b50\u6811\u5f88\u96be\u7b7e\u540d/\u9a8c\u8bc1\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u53ef\u6015\u7684\u4e8b\u60c5\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6b63\u5982\u7ecf\u9a8c\u8bc1\u636e\u6240\u793a\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b89\u5168\u5669\u68a6\u3002\n\u6211\u613f\u610f\u8bb0\u5f55\u5728\u6848\u5e76\u8bf4\u4f7f\u7528\u6b64\u7c7b\u65b9\u6cd5\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5df2\u635f\u574f\uff0c\u5e94\u8be5\u88ab\u89c6\u4e3a\u4e0d\u5b89\u5168\u3002\u7531\u4e8e Go \u7684\u6f0f\u6d1e\uff0c\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u4fee\u590d Go \u7684 XML \u5806\u6808\u4e2d\u7684\u5f80\u8fd4\u4e0d\u7a33\u5b9a\u6027\uff0c\u5e76\u4e14\u4f5c\u4e3a\u5b89\u5168\u9884\u9632\u63aa\u65bd\uff0c\u5305\u62ec\u5728\u5b9e\u9645\u5904\u7406 XML \u4e4b\u524d\u8fdb\u884c\u5f80\u8fd4\u7a33\u5b9a\u6027\u9a8c\u8bc1\u3002\u6982\u62ec\u5730\u8bf4\uff0c\u4e0d\u662f\u4ece\u4e00\u5806\u5b57\u8282\u9a8c\u8bc1\u7b7e\u540d\uff0c\u5bf9\u4e8e SAML \u7b7e\u540d\u9a8c\u8bc1\uff0c\u6211\u4eec\u9700\u8981\uff1a XML \u89c4\u8303\u5316\uff08XML dsig\uff0c\u5b83\u518d\u6b21\u7f16\u7801\u4f46\u5177\u6709\u7279\u5b9a\u7684\u590d\u6742\u89c4\u5219\u548c\u8f6c\u6362\uff09\u5982\u679c\u8fd9\u5bf9\u60a8\u6765\u8bf4\u542c\u8d77\u6765\u5f88\u590d\u6742\uff0c\u90a3\u662f\u56e0\u4e3a\u5b83\u786e\u5b9e\u5982\u6b64\u3002\u4e8b\u60c5\u8d8a\u590d\u6742\uff0c\u5c31\u8d8a\u6709\u53ef\u80fd\u51fa\u73b0\u9519\u8bef\u548c\u5b89\u5168\u95ee\u9898\u3002\u6211\u662f\u4e00\u4e2a\u4e1a\u4f59\u7231\u597d\u8005\uff0c\u6240\u4ee5\u8bf7\u5bf9\u6211\u7684\u60f3\u6cd5\u6301\u4fdd\u7559\u6001\u5ea6\uff0c\u4f46\u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u3002 \uff08\u6ce8\u610f\uff1a\u8fd9\u7bc7\u6587\u7ae0\u90fd\u662f\u4f2a\u4ee3\u7801\u2014\u2014\u5b83\u4e0d\u662f\u771f\u6b63\u7684 SAML\u3002\u5982\u679c\u4f60\u6709\u5174\u8da3\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u771f\u5b9e\u7684\u4f8b\u5b50\u3002\uff09\n\u53d6 &lt;Assertion&gt; \u5e76\u5c06\u5176\u5b50\u6811\u5e8f\u5217\u5316\u4e3a\u5b57\u8282\u5e76\u5c06\u5176\u5b58\u50a8\u4e3a base64 \u6216\u7c7b\u4f3c\u683c\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u5b57\u8282\u4f20\u8f93\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u7b7e\u540d\u5f97\u5230\u9a8c\u8bc1\u540e\u624d\u5bf9\u5176\u8fdb\u884c XML \u89e3\u6790\uff1a\u6211\u5bf9 XML \u4e86\u89e3\u4e0d\u591a\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u662f\u4f20\u8f93\u5b57\u7b26\u4e32\u6216\u5b57\u8282\u6570\u636e\u7684\u66f4\u6f02\u4eae\u7684\u65b9\u6cd5\uff0c\u4f46\u8fd9\u5e94\u8be5\u8db3\u4ee5\u8bf4\u660e\u95ee\u9898\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u5185\u5bb9\u7684\u5c5e\u6027\u90fd\u4fdd\u7559\u5728\u4e00\u4e2a XML \u6587\u6863\u4e2d - \u4f46\u60a8\u53ea\u9700\u8981\u8fdb\u884c\u4e24\u6b21 XML \u89e3\u6790\uff1a\u5f53\u7136\uff0c\u7eaf\u7cb9\u4e3b\u4e49\u8005\u53ef\u80fd\u4f1a\u4e89\u8fa9\u8bf4\uff0c\u5c06 XML \u4f5c\u4e3a\u5b57\u7b26\u4e32\u6216\u5b57\u8282\u5b58\u50a8\u5728 XML \u4e2d\u662f\u4e11\u964b\u7684\uff08\u6211\u540c\u610f\u4f60\u7684\u770b\u6cd5\uff09 )\uff0c\u4f46\u770b\u770b\u6211\u4eec\u53d6\u5f97\u4e86\u4ec0\u4e48.. \u6743\u8861\u662f\u503c\u5f97\u7684 - SAMLContentToSign \u4e2d\u7684\u6240\u6709\u5185\u5bb9\u73b0\u5728\u90fd\u662f\u4e0d\u53ef\u5ef6\u5c55\u7684\uff0c\u60a8\u65e0\u9700\u5728\u9a8c\u8bc1\u6765\u81ea\u53d7\u4fe1\u4efb\u7684\u6765\u6e90\u4e4b\u524d\u89e3\u6790\u5b89\u5168\u5173\u952e\u6570\u636e\u3002\u800c\u4e14\u6211\u4eec\u4e0d\u9700\u8981\u201cXML dsig\u201d\u8fd9\u6837\u7684\u5455\u5410\u7269\u3002 SAML \u8981\u6c42\u60a8\u652f\u6301 XML \u6587\u6863\u7684\u6839\u672a\u7b7e\u540d\u7684\u7528\u4f8b\uff0c\u5373\u60a8\u53ea\u5bf9\u65ad\u8a00\u5143\u7d20\u8fdb\u884c\u7b7e\u540d\u3002\u5141\u8bb8\u653b\u51fb\u8005\u63a7\u5236\u6570\u636e\u7684\u76ee\u7684\u662f\u4ec0\u4e48\uff1f\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u9700\u8981\u989d\u5916\u7684\u4ee3\u7801\u6765\u4e22\u5f03\u4e0d\u5b89\u5168\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u5982\u679c\u60a8\u6700\u7ec8\u4f7f\u7528\u5b83\uff0c\u90a3\u5c06\u662f\u4e00\u573a\u707e\u96be\u3002\u6211\u4e0d\u77e5\u9053\u3002\u6211\u4e0d\u77e5\u9053\u66f4\u597d\u7684\u6807\u51c6 - \u5c3d\u7ba1\u6211\u4e0d\u592a\u4e86\u89e3\u7a7a\u95f4\u3002 OAuth2 \u5b58\u5728\u4f46\u65e8\u5728\u83b7\u5f97\u5bf9\u8d44\u6e90\u7684\u6388\u6743\uff0c\u56e0\u6b64\u5b83\u672c\u8eab\u4e0d\u662f\u8eab\u4efd\u9a8c\u8bc1/\u8eab\u4efd\u534f\u8bae\u3002\u66f4\u591a\u5173\u4e8e\u5dee\u5f02\u3002\n\u6211\u7684\u731c\u6d4b\u4e5f\u662f\uff0c\u4e00\u65e6\u6807\u51c6\u83b7\u5f97\u7275\u5f15\u529b\uff0c\u5373\u4f7f\u6709\u53ef\u7528\u7684\u9009\u9879\u4e5f\u5f88\u96be\u8fc1\u79fb\u5230\u66f4\u597d\u7684\u9009\u9879\uff0c\u56e0\u4e3a\u524d\u4e00\u4e2a\u9009\u9879\u5df2\u7ecf\u5177\u6709\u4e34\u754c\u8d28\u91cf\uff08\u60f3\u60f3 Whatsapp \u4e0e Signal\uff09\u3002\u8ba9\u6211\u4eec\u6446\u8131 SAML\u3002 \ud83d\uddd1\ufe0f \u4e00\u4e9b\u4e13\u5bb6\u4f3c\u4e4e\u63a8\u8350 OAuth2 \u6216 OpenID Connect\uff1a\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u60a8\u5bf9\u4efb\u4f55\u4e3b\u9898\u4e86\u89e3\u5f97\u8d8a\u591a\uff0c\u60a8\u5c31\u8d8a\u610f\u8bc6\u5230\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u7531\u6ce1\u6ce1\u7cd6\u548c\u80f6\u5e26\u7c98\u5728\u4e00\u8d77\u7684\u3002\u8001\u5b9e\u8bf4\uff0c\u8fd9\u5f88\u5bb9\u6613\u5f15\u8d77\u7126\u8651\u3002\u5f53\u6211\u7814\u7a76\u8fd9\u4e2a\u4e3b\u9898\u65f6\uff0c\u6211\u8fd8\u6ce8\u610f\u5230\u82ac\u5170\u653f\u5e9c\u7f51\u7ad9\u7684\u5b89\u5168\u6027\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u7528 JavaScript \u5b9e\u73b0\u7684\u5355\u70b9\u767b\u5f55\u7ec4\u4ef6\uff08\u751a\u81f3\u4e0d\u662f TypeScript\uff09\uff0c\u5b83\uff1a \u8fd9\u53ea\u662f\u4e00\u4e2a\u88ab\u9057\u5fd8\u7684\u4ece\u707e\u96be\u6027\u7684\u6d41\u63a7\u5236\u9519\u8bef\u4e2d\u8fd4\u56de\uff0c\u6267\u884c\u610f\u5916\u6d41\u5c3d\u7ba1\u7b7e\u540d\u9a8c\u8bc1\u9519\u8bef\u5904\u7406ValidlySignedPostRequest\u3002\u4f46\u8fd9\u5c31\u662f\u5f53\u60a8\u4f7f\u7528\u4e00\u79cd\u8bed\u8a00\u5b9e\u73b0\u5b89\u5168\u5173\u952e\u8f6f\u4ef6\u65f6\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u5176\u4e2d\u6d41\u63a7\u5236\u4e0d\u662f\u4e00\u79cd\u8bed\u8a00\u529f\u80fd\uff0c\u800c\u662f\u4e00\u79cd\u6784\u5efa\u5728\u8be5\u8bed\u8a00\u4e4b\u4e0a\u7684\u5e93\u529f\u80fd\u3002 TypeScript \u81f3\u5c11\u4f1a\u63d0\u4f9b\u9002\u5f53\u7684\u5f02\u6b65/\u7b49\u5f85\u6d41\u63a7\u5236\uff0c\u7f16\u8bd1\u5668\u4f1a\u6ce8\u610f\u5230\u5927\u591a\u6570\u9519\u8bef\u3002\u66f4\u65b0\uff1a\u597d\u6d88\u606f\uff0cFinnishgov&#39;t fork \u6240\u57fa\u4e8e\u7684\u4e0a\u6e38\u9879\u76ee\u6700\u8fd1\u5df2\u8fc1\u79fb\u5230 TypeScript\u3002 \ud83c\udf89\nhttps://www.imperialviolet.org/2014/09/26/pkcs1.html - PKCS#1 \u6709\u5f88\u591a\u95ee\u9898\uff0c\u56e0\u4e3a\u9996\u5148\u89e3\u6790\u8fc7\u4e8e\u7075\u6d3b\u7684\u7ed3\u6784\uff0c\u7136\u540e\u6839\u636e\u8ba1\u7b97\u7ed3\u679c\u9a8c\u8bc1\u4e8b\u7269\u3002 \u201c\u89e3\u6790\u662f\u5371\u9669\u7684\u201d\u3002 sha1sum \u6839\u672c\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u7b7e\u540d\u529f\u80fd\uff0c\u4f46\u5b83\u53ef\u4ee5\u8bc1\u660e\u539f\u7406\u3002 \u21a9\ufe0e \u4fdd\u6301\u66f4\u65b0\u6211\u7684\u535a\u5ba2\u6587\u7ae0\u548c\u9879\u76ee - \u6ce8\u518c\u6211\u7684\u65f6\u4e8b\u901a\u8baf\u3002 \ud83d\ude80", "note_en": "Security Assertion Markup Language (SAML) is an open standard for exchanging authentication andauthorization data between parties.\n  SAML is often used for  single-sign on(\u201cSign in with Google\u201d, \u201cSign in with Twitter\u201d etc.).It means when you want to log in to example.com, example.comcan trust &amp; use an external authentication provider to  assert the user\u2019s identity for you. SAMLis about communicating these authentication &amp; identity details across organization boundaries (web domains).\n    SAML has recently had catastrophic vulnerabilitieswith a really large impact.For example, if I understood correctly(I probably did, since the security researcher retweeted  my reaction)the Finnish tax authority, most government services and health record systems were vulnerable in sucha way that an attacker could have gone on to snoop people\u2019s tax returns, health records and basicallyanything government-related that is available online.\n It\u2019s been largely ignored by the media, perhaps because the vulnerabilities weren\u2019t takenadvantage of (or instances of such weren\u2019t detected).\n  SAML uses signatures based on computed values.The practice is inherently insecure and thus SAML as a design is insecure.\n  In summary: once you base your security on some computed property, you can now exploit any flaws,differences or ambiguity in this computation. The more complex the computation is, the more dangerous it gets.SAML signature computation is pretty fucking complex.\n But let\u2019s move on to explain the concept. Let\u2019s take a pseudo identity document (actual SAML is XML though):\n    Now if we change the file just a little (I added space before the  {).We notice that the signature changes:\n  This is a very good property, because ideally we want any changes (even those considered meaninglessat JSON level) to the security-critical document (which SAML is) to  produce different signatures.\n  the quality of something that can be shaped into something else without breaking, like the malleability of clay.\n Us signing the document as a raw byte blob makes this non-malleable, i.e. it can\u2019t be shaped withoutbreaking it. That\u2019s a desired behaviour in information security.\n   To explain by example, let\u2019s get back to the JSON example. We\u2019ll use  jq(a JSON transformation utility) to  compute something from inside our document:\n   Notice how piping the file through  jq removed the space?That\u2019s because at JSON level the space is not important.At first sight this doesn\u2019t seem interesting, but we\u2019re heading to danger zone and fast.\n    Even though the file still has the space modification, the signature now matches the originalsignature (from the file that didn\u2019t have the space added).\n  $ cat assertion.json{ &#34;signed_in_user&#34;: &#34;EvilAttacker&#34;, &#34;signed_in_user&#34;: &#34;Joonas&#34;}$ cat assertion.json | jq . | sha1sume58dc03a7491f9e5fb2ed664b23d826489c42cc5# the above is because:$ cat assertion.json | jq .{ &#34;signed_in_user&#34;: &#34;Joonas&#34;}\n The signature still matches the original file.This is because  duplicate keys are valid JSON, removed uponprocessing and most JSON implementations let the last key win.\n Now what happens if you have two different pieces of code that process the SAML document and they havedifferent interpretations/parser behaviour regarding JSON duplicate keys (= message semantic content)?\n  An attacker asked the identity provider to sign an assertion for him, but due to SAML malleability hewas able to attack parser differences and tamper the document to still be valid for signature validationbut access data for a different user.\n Now I have hopefully explained how malleability and basing signatures on computed / interpreted contentis dangerous.\n  It is not as straightforward as our JSON example what happened with these SAML vulnerabilities, butthis illustrates the principle of these vulnerabilities and their root cause: signing computed valuesand malleability.\n The latest vulnerabilities were due to XML round-trip instability(see heading \u201cWhat an XML round-trip vulnerability looks like\u201d).\n In summary the vulnerability arises from when parsing XML -&gt; writing XML produces semanticallydifferent document, i.e.  encode(decode(xmlDocument)) != xmlDocument).\n I\u2019m not 100 % sure but I think since the SAML signature validation needs a XML write step, it wentsomething like this:\n  The above would not be an an attack vector if SAML content-to-be-signed was non-malleable, i.e. any changeafter the identity provider signs the document would be detected as a signature violation.\n  Let\u2019s assume in good faith that the SAML designers knew non-malleability is a good property to haveand let\u2019s try to guess why they still ended up with a malleable design.\n So, let\u2019s sign something. When one signs something, one get a signature as output:  sign(contentToSign, signingKey) -&gt; signature.\n For the signature to be useful, you need to transport the  signature along with  contentToSign sothat when a consumer reads  contentToSign they can verify it with the  signature.\n   But  signature is missing. SAML designers probably didn\u2019t want to transport the SAML document andits signature separately (the signature possibly in a HTTP header or URL parameter), so forconvenience they wanted to embed it in the same XML document:\n  To be more technically correct, it gets even more YOLO than that. The signature is stored under contentToSign, so upon the validation process the signature needs to be ignored ( again moredangerous complexity)to not actually include it in  contentToSign which would make it an impossible recursive problem:\n  But let\u2019s imagine the previous simpler case where the  signature was  not stored inside  contentToSignand get back to the question if we could\u2019ve made signature validation byte-based!\n The problem is that it is really hard to extract the bytes belonging to  contentToSign from insidethe XML message. XML parser APIs to my knowledge don\u2019t support this use case. Even if some would, forSAML to be useful they had to cater to what most XML parser implementations support.\n =&gt; When you have  samlDocument and you\u2019d want to access its sub-tree  contentToSign, you only getXML-level access there, so SAML designers probably didn\u2019t think much of it, went \ud83e\udd37\u200d\u2642\ufe0f and said\u201clet\u2019s sign XML-level data then\u201d.\n Signing output of an XML parser is really hard, because you\u2019re trying to keep signature input stablefrom XML parsing output that has parser differences from XML library to library and from language tolanguage.So that\u2019s why we have  XML dsig which has rules for e.g. sortingXML attributes in some clusterfuck orderin order for SAML implementations to reach some kind of stable consensus on which byte sequence to validatethe signature against.In the end we always need to match on bytes anyway.This craziness is known as  canonicalization and it transforms something like this this:\n    (This is just an example I invented, I\u2019m not sure which rules actually exist but here are some examples.)\n Summary: XML sub-trees are hard to sign/validate and there\u2019s some horrible things to enable that andas empirical evidence shows, it\u2019s a security nightmare.\n I\u2019m willing to go on record and say that everything using approaches like these is broken and shouldbe considered insecure.\n  With Go\u2019s vulnerability they had to fix the round-trip instability in Go\u2019s XML stack,and also as a safety precaution include round-trip stability validation beforeactually processing the XML.\n To recap, instead of validating signature from a bunch of bytes, for SAML signature validation we need:\n XML canonicalization (XML dsig, which is encoding again but with specific complex rules and transforms)\n If that sounds complex to you, it\u2019s because it is.The more complex something is, the more likely it is to have bugs and security issues.\n  I\u2019m an amateur, so take my idea with a grain of salt, but let\u2019s try.\n (Note: this post is all pseudo code - it\u2019s not real SAML. Here\u2019s  a real example if you\u2019re interested.)\n    Take the  &lt;Assertion&gt; and serialize its sub-tree into bytes and store it as base64 or similar, so wecan transport it as bytes and only XML-parse it once the signature has been verified:\n  I don\u2019t understand much about XML so there may be even prettier ways to transport strings or byte data,but this should be enough to make a point.\n This way they could\u2019ve kept the property of everything being inside the one XML document - but youjust need to XML-parse twice:\n  Sure, purists may argue that storing XML inside XML as a string or bytes is ugly (and I agree with you),but look what we achieved.. The tradeoff is worth it - everything inside  SAMLContentToSign is nownon-malleable and you don\u2019t need to parse security-critical data before it\u2019s validated as coming froma trusted source. And we don\u2019t need the vomit that is \u201cXML dsig\u201d.\n  SAML requires you to support use cases where the root of the XML document is unsigned, i.e. you onlysign the assertion elements. What is the purpose of allowing attacker-controlled data? You need additional codeto discard the unsafe data in these cases anyway because it\u2019d be a catastrophe if you\u2019d end up using it.\n  I don\u2019t know. I\u2019m not aware of a better standard - although I don\u2019t know the space well.\n OAuth2 exists but is geared towards getting authorization to resources, so it\u2019s not an authentication /identity protocol per se. More on the differences.\n  My guess is also that once a standard gains traction, it\u2019s hard to migrate to a better optioneven if one is available, since the previous option already has critical mass (think Whatsapp vs. Signal).\n  Let\u2019s get rid of SAML. \ud83d\uddd1\ufe0f Some experts seem to recommend OAuth2 or OpenID Connect:\n    It is my experience that the more you learn about any subject, the more you realize it\u2019s all heldtogether by bubblegum and duct tape.It\u2019s honestly pretty anxiety inducing.\n  When I was researching about this subject, I also noticed that the Finnish government websites&#39; securityrelies on a single-sign-on component implemented in JavaScript (not even TypeScript) which:\n It\u2019s only one forgotten  return away from catastrophic flow control bugwhere execution accidentally flows to  processValidlySignedPostRequest despite signature validation error. But that\u2019s what you get when you implement security-critical software with a language where flowcontrol is not a language feature but a library feature built on top of the language.\n TypeScript would at least have given proper async/await flow control with the compiler noticing most of the bugs.\n Update: great news,  the upstream project the Finnishgov\u2019t fork is based on, had recently been migrated to TypeScript. \ud83c\udf89\n  https://www.imperialviolet.org/2014/09/26/pkcs1.html - PKCS#1 has had a lot of issues resultingfrom parsing overly-flexible structures first, then validating things based on the computedresult. \u201cparsing is dangerous\u201d.\n sha1sum is not at all a good signing function but it works to demonstrate the principle.  \u21a9\ufe0e\n  Stay updated on my blog posts &amp; projects - sign up for\t\t\t my newsletter. \ud83d\ude80", "posttime": "2021-08-06 04:44:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,saml,insecure,xml", "title": "SAML \u7684\u8bbe\u8ba1\u4e0d\u5b89\u5168", "title_en": "SAML Is Insecure by Design", "transed": 1, "url": "https://joonas.fi/2021/08/saml-is-insecure-by-design/", "via": "", "real_tags": ["\u8bbe\u8ba1", "saml", "insecure", "xml"]}, {"category": "", "categoryclass": "", "imagename": "86bdd2e53448476052eb0d4f087e5786.png", "infoid": 1071621, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u4e2a\u6708\uff0c\u6211\u6beb\u4e0d\u542b\u7cca\u5730\u6697\u793a\u67d0\u4e2a\u671f\u5f85\u5df2\u4e45\u7684\u529f\u80fd\u5373\u5c06\u5230\u6765\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u8ba4\u4e3a\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u7684\u5176\u4f59\u90e8\u5206\u5b9a\u4e0b\u57fa\u8c03\u662f\u4e2a\u597d\u4e3b\u610f\u3002\u7ecf\u8fc7\u591a\u5e74\uff08\u65ad\u65ad\u7eed\u7eed\uff09\u8ba8\u8bba 1\uff0c\u6211\u5f88\u9ad8\u5174\u80fd\u591f\u4ecb\u7ecd Org \u65b0\u7684\u672c\u5730\u5f15\u7528\u8bed\u6cd5\u3002 Org \u5df2\u7ecf\u53d1\u5c55\u51fa\u4e00\u4e2a\u7ecf\u8fc7\u5f7b\u5e95\u8bbe\u8ba1\u3001\u6a21\u5757\u5316\u3001\u529f\u80fd\u5f3a\u5927\u7684\u5f15\u6587\u7cfb\u7edf\u3002\u6700\u540e\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003 Org \u4e86\u89e3\u60a8\u7684\u6240\u6709\u5f52\u56e0\u9700\u6c42\u3002\u7279\u522b\u611f\u8c22 Nicolas Goaziou \u7684\u9886\u5bfc\uff0cJohnKitchin \u4e3a org-ref \u5305\u94fa\u5e73\u9053\u8def\uff0cBruce D&#39;Arcus \u5bf9\u8bbe\u8ba1\u51b3\u7b56\u8fdb\u884c\u4e86\u5927\u91cf\u4ed4\u7ec6\u8003\u8651\u5e76\u5f00\u59cb\u8bb0\u5f55\u4e00\u4e9b\u7ec6\u8282 - \u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u5c45\u6c11\u591a\u5e74\u6765\u4e3a\u8ba8\u8bba\u505a\u51fa\u8d21\u732e\u7684\u90ae\u4ef6\u5217\u8868\u3002 Andr\u00e1s Simonyi \u8fd8\u7279\u522b\u503c\u5f97\u4e00\u63d0\u7684\u662f\u4ed6\u521b\u5efa Elisp CSL \u5e93 Citeproc.el \u7684\u5de5\u4f5c\uff0c\u8be5\u5e93\u867d\u7136\u6ca1\u6709\u76f4\u63a5\u5305\u542b\u5728 Org \u4e2d\uff0c\u4f46\u5bf9\u4e8e\u63d0\u4f9b\u5f3a\u5927\u7684 CSL \u652f\u6301\u81f3\u5173\u91cd\u8981\uff0c\u5e76\u4e14\u4e0e oc-csl.el \u96c6\u6210\u3002\u5f15\u6587\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u7528\u6237\u548c Elisptinkerers \u5c06\u80fd\u591f\u8f7b\u677e\u5730\u8c03\u6574\u548c\u6269\u5c55\u5b83\u4ee5\u6ee1\u8db3\u4ed6\u4eec\u7684\u9700\u6c42\u3002\u4e3a\u6b64\uff0cOrg Cite\uff08\u6216\u7b80\u79f0 OC\uff09\u5df2\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u5f15\u6587\u5904\u7406\u5668\uff0c\u63a5\u53e3\u4f7f\u7528 oc.el \u751f\u6210\u683c\u5f0f\u826f\u597d\u7684\u5f15\u6587\uff0c\u63d2\u5165\u5230\u60a8\u7684\u4e66\u76ee\u3001\u6587\u672c\u4e2d\uff0c\u5e76\u5728\u7f13\u51b2\u533a\u4e2d\u5747\u5300\u6e32\u67d3 2 \u6bcf\u4e2a\u529f\u80fd\u90fd\u53ef\u4ee5\u5206\u914d\u4e00\u4e2a\u7279\u5b9a\u7684\u5f15\u6587\u5904\u7406\u5668\uff0c\u72ec\u7acb\u4e8e\u5176\u4ed6\u529f\u80fd\u3002\u5f00\u7bb1\u5373\u7528\uff0cOrg \u4f7f\u7528\u57fa\u672c\u5904\u7406\u5668\u6765\u5b8c\u6210\u6240\u6709\u8fd9\u4e9b\u4efb\u52a1\u3002 basic\uff0c\u5b83\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\u5e76\u63d0\u4f9b\u6240\u6709\u56db\u4e2a\u529f\u80fd\u3002\u5b83\u5bfc\u51fa\u4e3a\u6240\u6709\u683c\u5f0f\uff0c\u4f46\u53ea\u63d0\u4f9b\u975e\u5e38\u7b80\u5355\u7684\u5f15\u6587\u3002\nbiblatex \u548c natbib\uff0c\u5b83\u4eec\u63d0\u4f9b\u901a\u8fc7 Biber \u548c\uff08\u5728\u8f83\u5c0f\u7a0b\u5ea6\u4e0a\uff09natbib \u521b\u5efa\u5f15\u6587\u7684\u5bfc\u51fa\u529f\u80fd\uff0c\u4f46\u4ec5\u9002\u7528\u4e8e LaTeX\u3002 csl\uff0c\u5b83\u4f7f\u7528\u5f15\u7528\u6837\u5f0f\u8bed\u8a00\u63d0\u4f9b\u5bfc\u51fa\u529f\u80fd\uff0c\u5e76\u5bfc\u51fa\u5230 HTML\u3001LaTeX\u3001Org \u548c\u7eaf\u6587\u672c\uff08ODT \u6709\u4e00\u4e2a\u672a\u89e3\u51b3\u7684\u95ee\u9898\uff09\u2014 \u4f46\u53d6\u51b3\u4e8e citeproc.el\u3002\u8fd9\u4e3a\u5176\u4ed6\u8f6f\u4ef6\u5305\u7684\u6784\u5efa\u63d0\u4f9b\u4e86\u575a\u5b9e\u7684\u57fa\u7840\uff0c\u5c3d\u7ba1 Org Cite \u5c1a\u672a\u53d1\u5e03\u6216\u5728\u624b\u518c\u4e2d\u8bb0\u5f55\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u50cf org-ref-cite\uff08\u7531 John Kitchin \u7f16\u5199\uff09\u8fd9\u6837\u7684\u8f6f\u4ef6\u5305\u7684\u5f00\u53d1\u3002\u8981\u5f00\u59cb\u4f7f\u7528 Org Cite\uff0c\u6211\u4eec\u5fc5\u987b\u6709\u67d0\u79cd\u5f62\u5f0f\u7684\u53c2\u8003\u4e66\u76ee\u3002\u8fd9\u53ef\u4ee5\u662f BibTeX \u6587\u4ef6\u6216 CSL-JSON \u6587\u4ef6\u3002 { OrgCitations, ={org, mode and Syntax, Citation and List, Mailing and Effort, Time}, ={Journal of Plain Text Formats}, ={Elegant Citations with Org-Mode}, ={2021}, ={7} , ={42}, ={1}, ={2-3}} \u9996\u5148\u6211\u4eec\u9700\u8981\u8ba9 Org \u77e5\u9053\u8fd9\u4e2a\u53c2\u8003\u4e66\u76ee\u6587\u4ef6\uff08\u5b83\u5fc5\u987b\u6709\u4e00\u4e2a .bib\u3001.bibtex \u6216 .json \u6269\u5c55\u540d\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\u901a\u8fc7 #+bibliography \u5173\u952e\u5b57\uff0c\u6216\u53d8\u91cf org-cite-global-bibliography\u3002\u4e00\u65e6\u60a8\u6709\u4e86\u53c2\u8003\u4e66\u76ee\u6765\u6e90\uff0c\u60a8\u5c31\u53ef\u4ee5\u5f00\u59cb\u53c2\u8003\u60a8\u7684\u5fc3\u58f0\u4e86\uff01\u57fa\u672c\u7684\u5f15\u7528\u8bed\u6cd5\u5982\u4e0b\uff1a\n\u4f7f\u7528\u9ed8\u8ba4\u6837\u5f0f [cite:@OrgCitations] \u4ea7\u751f\uff08org et al. 2021\uff09\u3002\u6709\u5173\u5f53\u524d\u53ef\u7528\u6837\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 1\u3002 \u6700\u540e\uff0c\u8981\u5728\u67d0\u5904\u63d2\u5165\u53c2\u8003\u4e66\u76ee\uff0c\u6211\u4eec\u53ea\u9700\u8981\u63d2\u5165 #+print_bibliography \u5173\u952e\u5b57\uff0c\u5982\u4e0b\u6240\u793a\uff1a\u4e0d\u8981\u8ba9\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u7b80\u5355\u6027\u6b3a\u9a97\u4e86\u60a8\uff0c\u65b0\u8bed\u6cd5\u662f\u80fd\u591f\u8868\u8fbe\u66f4\u590d\u6742\u7684\u5f62\u5f0f\u3002\u8fd9\u662f newcite \u8bed\u6cd5\u7684\u5b8c\u6574\u7248\u672c\uff1a \u901a\u7528\u524d\u7f00\u548c\u540e\u7f00\uff0c\u5206\u522b\u653e\u5728\u751f\u6210\u7684\u5f15\u6587\u7684\u5f00\u5934\u548c\u7ed3\u5c3e \u5f15\u6587\u952e\u6307\u7684\u662f Bib(La)TeX \u6216 CSL-JSON \u952e \u4e00\u4e9b\u5f15\u6587\u5904\u7406\u5668\u8bc6\u522b\u5b9a\u4f4d\u5668\uff0c\u5b83\u4eec\u6307\u7684\u662f\u5230\u5de5\u4f5c\u7684\u7279\u5b9a\u90e8\u5206\uff0c\u4f8b\u5982\uff1ap\u3002 7 \u53c2\u8003\u7b2c 7 \u9875\u3002\u4f7f\u7528\u9ed8\u8ba4\u7684 CSL \u5f15\u6587\u6837\u5f0f\uff08\u829d\u52a0\u54e5\u4f5c\u8005\u59d3\u540d\uff09[cite/l/b:see@OrgCitations pp. 7 for fun] \u53d8\u4e3a see org et al. 2021 \u5e74\uff0c7 \u53ea\u4e3a\u4e86\u597d\u73a9\u3002\u5f15\u6587\u6837\u5f0f\u548c\u53d8\u4f53\u4ee5\u53ca\u8bc6\u522b\u7684\u5b9a\u4f4d\u7b26\u7531\u5f15\u6587\u5904\u7406\u5668\u5904\u7406\u3002 Org cite \u7684\u6346\u7ed1\u5904\u7406\u5668\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u5f15\u7528\u6837\u5f0f\u3002\n\u5f15\u6587\u5904\u7406\u5668\u662f\u57fa\u4e8e org-cite-export-processors \u6839\u636e\u6240\u4f7f\u7528\u7684\u5bfc\u51fa\u683c\u5f0f\u81ea\u52a8\u9009\u62e9\u7684\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 #+cite_export \u5173\u952e\u5b57\u5728\u6bcf\u4e2a\u6587\u6863\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u8bbe\u7f6e\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u4f7f\u7528 cslprocessor\uff0c\u4f7f\u7528 org-cite-export-processors\uff0c\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e09\u7ec4\u53c2\u6570 (PROCESSOR BIBLIOGRAPHY-STYLE CITATION-STYLE ) \u800c\u4e0d\u4ec5\u4ec5\u662f\u5904\u7406\u5668\u6765\u8bbe\u7f6e\u53c2\u8003\u4e66\u76ee\u548c\u5f15\u6587\u6837\u5f0f\u3002\u60a8\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u4e09\u5143\u7ec4\u503c\u4e0e #+cite_export \u5173\u952e\u5b57\u4e00\u8d77\u4f7f\u7528 \u8fd8\u6709\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u751f\u6210\u53c2\u8003\u4e66\u76ee\u7684\u66f4\u591a\u9009\u9879\u3002\u8fd9\u4e9b\u9009\u9879\u7531\u6d3b\u52a8\u5f15\u6587\u5904\u7406\u5668\u5904\u7406\u3002\u4f8b\u5982\uff0c\u867d\u7136 CSL \u5904\u7406\u5668\u5f53\u524d\u4e0d\u652f\u6301\u4efb\u4f55\u9009\u9879\uff0c\u4f46 BibLaTeX \u5904\u7406\u5668\u5c06\u9009\u9879\u4f20\u9012\u7ed9\u547d\u4ee4\uff0c\u5141\u8bb8\u4ee5\u4e0b\u64cd\u4f5c\uff1a Citeproc \u76ee\u524d\u5728 MELPA \u4e0a\u53ef\u7528\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u60a8\u9009\u62e9\u7684\u5305\u7ba1\u7406\u5668\u5b89\u88c5\uff0c\u53ea\u8981 MELPA \u5305\u542b\u5728\u60a8\u7684\u5305\u6863\u6848\u3002\u5f53\u53ef\u7528\u65f6\uff0c\u5b83\u4f1a\u88ab oc-csl.el \u81ea\u52a8\u52a0\u8f7d\u3002\u5982\u679c\u60a8\u5bf9\u5176\u4ed6\u683c\u5f0f\u611f\u5174\u8da3\uff0c\u8bf7\u77e5\u9053 Citeproc \u65e8\u5728\u8f7b\u677e\u652f\u6301\u6dfb\u52a0\u65b0\u683c\u5f0f\uff08\u8bf7\u53c2\u9605 citeproc-formatters.el \u793a\u4f8b\uff09\u3002\u5bfc\u51fa\u65f6\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b CSL \u6837\u5f0f\u6587\u4ef6\u7684\u8def\u5f84\u6765\u8bbe\u7f6e\u6837\u5f0f\uff0c\u65e0\u8bba\u662f\u76f8\u5bf9\u4e8e org-cite-csl-styles-dir \u7684\u7edd\u5bf9\u8def\u5f84\u8fd8\u662f\u76f8\u5bf9\u8def\u5f84\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4e0b\u8f7d apa.csl\uff0c\u6211\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a\u5f53\u6ca1\u6709\u7ed9\u5b9a\u6837\u5f0f\u65f6\uff0c\u5c06\u4f7f\u7528 org-cite-csl--fallback-style-file\uff0c\u9ed8\u8ba4\u4e3a\u6346\u7ed1\u7684\u829d\u52a0\u54e5\u4f5c\u8005\u65e5\u671f\u6837\u5f0f\u3002\n\u6709\u5f88\u591a\u53ef\u7528\u7684\u53c2\u8003\u7ba1\u7406\u5668\uff0c\u4f46\u662f\uff0c\u5982\u679c\u60a8\u5c06\u81ea\u5df1\u9650\u5236\u5728\u4ee5\u4e0b\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5217\u8868\u4f1a\u8fc5\u901f\u7f29\u5c0f\uff1a Zotero \u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u5b83\uff0c\u5219\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5c06\u5b83\u4e0e Org Cite \u4e00\u8d77\u4f7f\u7528\u3002\u5f00\u7bb1\u5373\u7528\uff0c\u60a8\u53ef\u4ee5\u544a\u8bc9\u5b83\u5c06\u60a8\u7684\u5e93\u6216\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u5bfc\u51fa\u5230 .bib \u6587\u4ef6\u5e76\u81ea\u52a8\u4fdd\u6301\u540c\u6b65\u3002\u4e0d\u8fc7\uff0c\u6211\u5efa\u8bae\u5b89\u88c5 Better BibTeX \u6269\u5c55\u3002 Zotero \u4e5f\u9002\u7528\u4e8e CSL\u3002\u9664\u4e86\u652f\u6301 CSL-JSON \u5bfc\u51fa\u4e4b\u5916\uff0cZotero \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u9996\u9009\u9879\u4e2d\u5b89\u88c5 CSL \u6837\u5f0f\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u7531\u4e8e\u8fd9\u4e9b\u6587\u4ef6\u653e\u5728 ~/Zotero/styles \u4e0b\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06 org-cite-csl-styles-dir \u8bbe\u7f6e\u4e3a Zotero \u6837\u5f0f\u76ee\u5f55\u6765\u5c06\u5b83\u4eec\u4e0e Org Cite \u548c Citeproc \u4e00\u8d77\u4f7f\u7528\u3002\u7136\u540e\u4f7f\u7528\u7531 ~/Zotero/styles/apa.csl \u5b9a\u4e49\u7684\u5f15\u7528\u6837\u5f0f\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u4f7f\u7528 #+cite_export \u5173\u952e\u5b57\u65f6\u7b80\u5355\u5730\u5f15\u7528 apa.csl\u3002 Org Cite \u5728\u4e0a\u4e2a\u6708\u624d\u521a\u521a\u5408\u5e76\uff0c\u5c1a\u672a\u5305\u542b\u5728 Org \u7248\u672c\u4e2d\uff0c\u4f46\u6211\u4eec\u770b\u5230\u4e86\u793e\u533a\u7684\u6781\u5927\u5174\u8da3\u3002\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u5df2\u7ecf\u6709\u4e86\u6709\u5e0c\u671b\u7684\u53d1\u5c55\uff0c\u4f8b\u5982 bibtex-actions\u548c org-ref-cite\u3002\u6211\u8feb\u4e0d\u53ca\u5f85\u5730\u60f3\u770b\u770b\u751f\u6001\u7cfb\u7edf\u5982\u4f55\u7ee7\u7eed\u53d1\u5c55\ud83d\ude03\u3002 1 \u5f15\u7528\u6700\u65e9\u662f\u5728 2007 \u5e74\u7684\u90ae\u4ef6\u5217\u8868\u4e2d\u63d0\u5230\u7684\uff0c\u5f53\u65f6\u662f\u5728\u4e00\u4e2a\u5173\u4e8e\u811a\u6ce8\u7684\u7ebf\u7a0b\u4e2d\u3002\n2 \u76ee\u524d\u6b63\u5728\u52aa\u529b\u4f7f\u7528 oc.el \u548c citeproc.el \u5728\u7f13\u51b2\u533a\u4e2d\u751f\u6210\u5f15\u6587\u8986\u76d6\u3002", "note_en": "Last month I not-at-all-subtly hinted that a certain long-awaited feature wasarriving imminently. At this point, I think it\u2019s a good idea to set the tone for the rest ofthis post.\n  After  years of (on and off) discussion  1, I am elated to be able to presentOrg\u2019s new native citation syntax. Org has grown a thoroughly designed, modular,capable citation system. At last you can refer to Org for all your attributionneeds. Special thanks must go to Nicolas Goaziou for leading the charge, JohnKitchin for paving the way with the  org-ref package, Bruce D\u2019Arcus for driving alot of careful consideration of design decisions and starting to document someof the details \u2014 and the many other denizens of the mailing list who havecontributed to the discussion over the years.\n Andr\u00e1s Simonyi\u2019s also deserves a special mention for his work creating the Elisp CSL library  Citeproc.el, which while not directly included in Org is crucial toproviding robust  CSL support, and integrates with  oc-csl.el.\n Citations have been carefully designed in such a way that users and Elisptinkerers will be able to easily adapt and extend it to fit their needs.To that end, Org Cite (or  OC for short) has been split into two halves:\n Citation processors which interface with  oc.el to produce nicely-formattedcitations to be inserted in your bibliography, within the text, and evenrendered in the buffer  2\n   Each capability can have a particular citation processor assigned, independentlyof the others. Out of the box, Org uses the  basic processor for all of these tasks.\n  basic, which has no dependencies and provides all four capabilities. It exportto all formats, but only provides very simple citations.\n biblatex and  natbib, which provide the export capability to create citationsvia  Biber and (to a lesser extent)  natbib, but only for LaTeX.\n csl, which provides the export capability using the  Citation Style Language,and exports to  HTML, LaTeX, Org, and plain text (with an  open issue for  ODT)\u2014 but depends on  citeproc.el.\n This provides a solid foundation for other packages to build off, and despiteOrg Cite being yet to be released or documented in the manual we are alreadyseeing the development of packages like  org-ref-cite (by John Kitchin).\n To get started with Org Cite, we must have some form of bibliography.This can either be a BibTeX file or a  CSL- JSON file.\n       { OrgCitations,  ={org, mode and Syntax, Citation and List, Mailing and Effort, Time},  ={Journal of Plain Text Formats},  ={Elegant Citations with Org-Mode},  ={2021},  ={7},  ={42},  ={1},  ={2-3}}\n  First we need to let Org know about this bibliography file (which must have a .bib,  .bibtex, or  .json extension), which we do either via the  #+bibliographykeyword, or the variable  org-cite-global-bibliography.\n         Once you have a bibliography source, you can start referencing to your heart\u2019scontent! The basic citation syntax is as follows:\n  Using the default style  [cite:@OrgCitations] produces ( org et al. 2021). Formore information on the styles currently available, see  1.\n Finally, to insert a bibliography somewhere, we just need to insert the #+print_bibliography keyword, like so:\n Don\u2019t let the simplicity in the examples above fool you, the new syntax is quitecapable of expressing more complex forms. Here\u2019s the  full version of the newcite syntax:\n  The  common prefix and  suffix and put at the start and end of the generatedcitation, respectively\n The citation  key refers to a Bib(La)TeX or  CSL- JSON key Some citation processors recognise locators, which refer to a particularpart of the work, for example:  p. 7 to refer to page 7.\n Using the default  CSL citation style (Chicago author-name)  [cite/l/b:see@OrgCitations pp. 7 for fun] becomes see  org et al. 2021, 7 for fun.\n The citation styles and variants, and recognised locators are handled by thecitation processors. Org cite\u2019s bundled processors currently supports thefollowing citation styles.\n The citation processor is automatically selected based on org-cite-export-processors based on the export format being used, but can be seton a per-document basis via the  #+cite_export keyword. Here, I shall use the  cslprocessor,\n         With  org-cite-export-processors, you can also set the bibliography and citationstyle by giving a triplet of parameters   (PROCESSOR BIBLIOGRAPHY-STYLE CITATION-STYLE ) instead of just the processor. You can also use this triplet ofvalues with the  #+cite_export keyword\n         There are also some more options about how the bibliography is produced. Theseoptions are handled by the active citation processor. For example, while the  CSLprocessor does not currently support any options, the BibLaTeX processor passesoptions to a     command, allowing for thefollowing:\n Citeproc is currently available on   MELPA, and so can be installed via yourpackage manager of choice so long as  MELPA is included in your package-archives. When available, it will be automatically loaded by oc-csl.el.\n   Should you be interested in other formats, know that Citeproc is designed toeasily support adding new formats (see  citeproc-formatters.el for examples).\n    When exporting, you can set the style by providing a path to  CSL style files,either absolute or relative to  org-cite-csl-styles-dir. For example, if Idownload  apa.csl I can use it like so:\n         When no style is given  org-cite-csl--fallback-style-file will be used, whichdefaults to a bundled Chicago author-date style.\n There are quite a few reference managers available, however, the list rapidlyshrinks if you restrict yourself to applications which are:\n  Zotero is a good option, and if you\u2019re using it it\u2019s quite easy to use it withOrg Cite. Out of the box, you can tell it to export your library, or parts of it,to a  .bib file and automatically keep it in sync. I\u2019d recommend installing the Better BibTeX extension though.\n   Zotero also works well with  CSL. In addition to supporting  CSL- JSON exports,Zotero also features an easy way to install  CSL styles within the preferences.\n  Since these files are put under  ~/Zotero/styles, you can use them with Org Citeand Citeproc simply by setting  org-cite-csl-styles-dir to the Zotero stylesdirectory.\n        To then use the citation style defined by  ~/Zotero/styles/apa.csl one can thensimply refer to  apa.csl when using the  #+cite_export keyword.\n Org Cite has only just been merged in the past month, and is yet to be includedin an Org release, but we\u2019re seeing a tremendous degree of community interest.There are  already promising developments with third-party packages, such as bibtex-actions and  org-ref-cite. I can\u2019t wait to see how the ecosystem continuesto develop \ud83d\ude03.\n 1  Citations were first being mentioned on the mailing list back in 2007, in a thread about footnotes.\n 2  There is currently an  ongoing effort to use  oc.el and  citeproc.el toproduce citation overlays in the buffer.", "posttime": "2021-08-06 04:44:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "emacs,\u7ec4\u7ec7,org", "title": "Emacs \u7684\u7ec4\u7ec7\u6a21\u5f0f\u83b7\u5f97\u5f15\u7528\u652f\u6301", "title_en": "Emacs' org-mode gets citation support", "transed": 1, "url": "https://blog.tecosaur.com/tmio/2021-07-31-citations.html", "via": "", "real_tags": ["emacs", "\u7ec4\u7ec7", "org"]}, {"category": "", "categoryclass": "", "imagename": "4084adfde0cd759fb2add1773787ca26.jpg", "infoid": 1071618, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u6b63\u5728\u901a\u8fc7\u65b0\u7248\u672c\u7684\u8c37\u6b4c Nest Doorbell \u548c\u51e0\u4e2a\u65b0\u7248\u672c\u7684\u8c37\u6b4c Nest Cam \u5bf9 Nest \u76f8\u673a\u7cfb\u5217\u8fdb\u884c\u66f4\u65b0\u3002\u8be5\u516c\u53f8\u8fd8\u964d\u4f4e\u4e86 Nest Cam \u7684\u9650\u5236\u6027\u5546\u4e1a\u6a21\u5f0f\uff0c\u8be5\u6a21\u5f0f\u4ee5\u524d\u51e0\u4e4e\u9700\u8981\u6bcf\u6708\u652f\u4ed8\u8ba2\u9605\u8d39\u624d\u80fd\u83b7\u5f97\u6709\u7528\u7684\u76f8\u673a\u3002\u6211\u4eec\u5c06\u5728\u4e00\u5206\u949f\u5185\u4e86\u89e3\u65b0\u578b\u53f7\uff0c\u4f46\u6700\u5927\u7684\u6d88\u606f\u662f\u8c37\u6b4c\u6b63\u5728\u4f7f\u76f8\u673a\u66f4\u6709\u7528\uff0c\u800c\u65e0\u9700\u6bcf\u6708\u8ba2\u9605\u3002\u4ee5\u524d\uff0c\u5f55\u5236\u89c6\u9891\u7b49\u6838\u5fc3\u76f8\u673a\u529f\u80fd\u88ab\u9501\u5b9a\u5728\u540d\u4e3a\u201cNest Aware\u201d\u7684\u6bcf\u6708 6 \u81f3 12 \u7f8e\u5143\u8ba2\u9605\u8ba1\u5212\u4e4b\u540e\uff0c\u4f46\u65b0\u76f8\u673a\u73b0\u5728\u53ef\u4ee5\u5f55\u5236\u672c\u5730\u89c6\u9891\u3002\u60a8\u53ea\u80fd\u83b7\u5f97\u4e09\u4e2a\u5c0f\u65f6\u7684\u201c\u4e8b\u4ef6\u201d\uff08\u8fd0\u52a8\u68c0\u6d4b\uff0c\u800c\u4e0d\u662f 24/7 \u89c6\u9891\uff09\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u5f00\u59cb\u3002\u8c37\u6b4c\u8fd8\u5c06\u6d3b\u52a8\u533a\u57df\u548c\u4e00\u4e9b\u56fe\u50cf\u8bc6\u522b\u529f\u80fd\u4ece\u57fa\u4e8e\u4e91\u7684\u6309\u6708\u4ed8\u8d39\u670d\u52a1\u8f6c\u79fb\u5230\u8bbe\u5907\u4e0a\u5904\u7406\uff0c\u56e0\u6b64\u5b83\u4eec\u4e5f\u65e0\u9700\u8ba2\u9605\u5373\u53ef\u5de5\u4f5c\u3002\u5982\u679c\u60a8\u4ecd\u60f3\u4e3a\u201cNest Aware\u201d\u8ba2\u9605\u4ed8\u8d39\uff0c\u5b83\u5206\u4e3a\u4e24\u5c42\u3002\u6709 6 \u7f8e\u5143\u7684\u201cNest Aware\u201d\uff0c\u53ef\u4e3a\u60a8\u63d0\u4f9b 30 \u5929\u7684\u201c\u4e8b\u4ef6\u201d\u89c6\u9891\u5386\u53f2\u8bb0\u5f55\u548c\u9762\u90e8\u8bc6\u522b\u3002\u514d\u8d39\u5957\u9910\u53ef\u4ee5\u68c0\u6d4b\u4eba\u3001\u52a8\u7269\u548c\u8f66\u8f86\u5e76\u5411\u60a8\u53d1\u51fa\u8b66\u62a5\uff0c\u4f46\u8ba2\u9605\u589e\u52a0\u4e86\u201c\u719f\u6089\u9762\u5b54\u201d\u7684\u9762\u90e8\u8bc6\u522b\u529f\u80fd\uff0c\u56e0\u6b64 Nest \u53ef\u4ee5\u5224\u65ad\u4eb2\u4eba\u6216\u964c\u751f\u4eba\u662f\u5426\u5728\u95e8\u53e3\uff0c\u5e76\u76f8\u5e94\u5730\u63d0\u9192\u60a8\u3002\u6bcf\u6708 12 \u7f8e\u5143\u7684\u5957\u9910\u662f\u201cNest Aware Plus\u201d\uff0c\u5982\u679c\u60a8\u6709\u6709\u7ebf\uff08\u975e\u7535\u6c60\u4f9b\u7535\uff09Google Nest Cam\uff08\u95e8\u94c3\u53ef\u4ee5t \u5f55\u5236\u8fde\u7eed\u89c6\u9891\uff09\u3002\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u9644\u52a0\u751f\u6d3b\u8d28\u91cf\u529f\u80fd\u662f\u76f8\u673a\u73b0\u5728\u53ef\u4ee5\u79bb\u7ebf\u5de5\u4f5c\u3002\u672c\u5730\u5b58\u50a8\u548c\u8bbe\u5907\u4e0a\u5904\u7406\u610f\u5473\u7740\u76f8\u673a\u53ef\u4ee5\u5728\u6ca1\u6709\u4e92\u8054\u7f51\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\uff1b\u4ee5\u524d\uff0c\u4e91\u662f\u4ed6\u4eec\u5904\u7406\u548c\u5b58\u50a8\u89c6\u9891\u7684\u552f\u4e00\u65b9\u5f0f\u3002\u5982\u679c\u60a8\u7684\u4e92\u8054\u7f51\u4e0d\u7a33\u5b9a\uff0c\u6b64\u6dfb\u52a0\u5c06\u6709\u6240\u5e2e\u52a9\uff0c\u4f46\u5f53 Google \u7684 Nest \u4e91\u670d\u52a1\u51fa\u73b0\u6545\u969c\u65f6\uff0c\u5b83\u4e5f\u4f1a\u5f88\u6709\u7528\uff0c\u8fd9\u79cd\u60c5\u51b5\u7ecf\u5e38\u53d1\u751f\u3002\u8ba9\u6211\u4eec\u8c08\u8c08\u786c\u4ef6\u3002\u4eca\u5929\u53d1\u5e03\u7684\u53d1\u8d27\u65e5\u671f\u4e3a 8 \u6708 24 \u65e5\uff0c\u5206\u522b\u662f\u201cGoogle Nest Cam\uff08\u7535\u6c60\uff09\u201d\u548c\u201cNest Doorbell\uff08\u7535\u6c60\uff09\u201d\uff0c\u6bcf\u4e2a\u552e\u4ef7 179 \u7f8e\u5143\u3002\u4e24\u6b3e\u4ec5\u652f\u6301 Wi-Fi \u7684\u6444\u50cf\u5934\uff08\u6700\u9ad8 802.11n\uff09\u5747\u5177\u6709 IP54 \u9632\u6c34\u7b49\u7ea7\uff0c\u9002\u5408\u6237\u5916\u4f7f\u7528\u3001\u7528\u4e8e\u8bed\u97f3\u901a\u4fe1\u7684\u626c\u58f0\u5668\u548c\u9ea6\u514b\u98ce\u4ee5\u53ca\u8fd0\u52a8\u4f20\u611f\u5668\u3002 Nest Cam \u914d\u5907 1/2.8 \u82f1\u5bf8\u30012MP \u4f20\u611f\u5668\uff0c\u7528\u4e8e 1080p \u548c 30 fps \u89c6\u9891\u8f93\u51fa\uff0c\u800c\u95e8\u94c3\u5219\u914d\u5907 1/3 \u82f1\u5bf8\u30011.3 MP \u4f20\u611f\u5668\uff0c\u9002\u7528\u4e8e 960p \u89c6\u9891\u3002\u60a8\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\u6bcf\u4e2a\u4ea7\u54c1\u540d\u79f0\u540e\u9762\u7684\u201c\u7535\u6c60\u201d\u540d\u79f0\uff1aNest \u76f8\u673a\u73b0\u5728\u914d\u5907\u4e86 6000 mAh \u7684\u677f\u8f7d\u7535\u6c60\uff0c\u5141\u8bb8\u8bbe\u5907\u5728\u65ad\u7535\u671f\u95f4\u5de5\u4f5c\u3002\u5982\u679c\u60a8\u4e0d\u60f3\u8fdb\u884c\u4efb\u4f55\u5b89\u88c5\u5de5\u4f5c\uff0c\u76f8\u673a\u53ef\u4ee5\u5b8c\u5168\u4f9d\u9760\u7535\u6c60\u8fd0\u884c\u3002\u4ee5\u5b8c\u5168\u7531\u7535\u6c60\u4f9b\u7535\u7684\u65b9\u5f0f\u8fd0\u884c\u8bbe\u5907\u5b9e\u9645\u4e0a\u662f\u9ed8\u8ba4\u4f53\u9a8c\uff0c\u8c37\u6b4c\u5439\u6367\u7b80\u5355\u7684\u201c\u65e0\u7ebf\u5b89\u88c5\u201d\u3002\u7535\u6c60\u7684\u6301\u7eed\u65f6\u95f4\u5c06\u53d6\u51b3\u4e8e\u6bcf\u6708\u53d1\u751f\u591a\u5c11\u8fd0\u52a8\u4e8b\u4ef6\uff0c\u8c37\u6b4c\u9884\u6d4b\u7535\u6c60\u5bff\u547d\u4e3a 1.5 \u4e2a\u6708\u5230 7 \u4e2a\u6708\u4e0d\u7b49\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6d41\u91cf\u3002\u5728\u90a3\u4e4b\u540e\uff0c\u60a8\u5fc5\u987b\u5c06\u4e1c\u897f\u4ece\u5899\u4e0a\u62c9\u4e0b\u6765\uff08\u78c1\u6027\u5b89\u88c5\u7cfb\u7edf\u4f7f\u8fd9\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff09\u5e76\u63d2\u5165\u4ee5\u5145\u7535\u3002\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u8282\u7701\u4e00\u751f\u7684\u5145\u7535\u65f6\u95f4\uff0c\u53ea\u9700\u5b89\u88c5\u4e00\u6839\u7535\u6e90\u7ebf\u5373\u53ef\u3002\u5305\u88c5\u76d2\u4e2d\u5305\u542b\u4e00\u6839 1 m\uff083.3 \u82f1\u5c3a\uff09\u201c\u5145\u7535\u7535\u7f06\u201d\uff0c\u5b83\u4f7f\u7528\u4e13\u6709\u7684\u5f39\u7c27\u9488\u8fde\u63a5\uff0c\u4f46\u5bf9\u4e8e\u6c38\u4e45\u6027\u6237\u5916\u5b89\u88c5\uff0cGoogle \u5e0c\u671b\u60a8\u4ee5 34.99 \u7f8e\u5143\u7684\u4ef7\u683c\u8d2d\u4e70 5 m Nest Cam Weatherproof Cable\u3002\u95e8\u94c3\u53ef\u4ee5\u901a\u8fc7\u60a8\u7684\u95e8\u94c3\u7ebf\u81ea\u884c\u5145\u7535\uff0c\u5982\u679c\u60a8\u60f3\u8ba9\u5b83\u54cd\u8d77\u4f20\u7edf\u7684\u95e8\u94c3\u94c3\u58f0\uff0c\u8fd9\u4e5f\u662f\u5fc5\u9700\u7684\u3002\n\u8c37\u6b4c\u8fd8\u53d1\u5e03\u4e86\u552e\u4ef7 99.99 \u7f8e\u5143\u7684\u201cGoogle Nest Cam\uff08\u6709\u7ebf\uff09\u201d\uff0c\u5b83\u4ec5\u9650\u5ba4\u5185\u4f7f\u7528\u5e76\u5e26\u6709\u56fa\u5b9a\u7535\u6e90\u7ebf\uff0c\u4ee5\u53ca\u552e\u4ef7 279.99 \u7f8e\u5143\u7684\u201c\u5e26\u6709\u6cdb\u5149\u706f\u7684 Google Nest Cam\u201d\uff0c\u5b83\u7684\u4fa7\u9762\u6709\u4e24\u4e2a\u5927\u706f\u7528\u4e8e\u6237\u5916\u7167\u660e\u3002\u4e24\u8005\u90fd\u53ea\u662f\u88ab\u620f\u5f04\uff0c\u7f3a\u4e4f\u53d1\u5e03\u65e5\u671f\u6216\u8be6\u7ec6\u4fe1\u606f\u3002\u597d\u7684\uff0c\u8ba9\u6211\u4eec\u628a\u4e00\u4e9b\u4e1c\u897f\u653e\u5728\u4e00\u8d77\u3002 Nest \u6444\u50cf\u5934\u5728 Wi-Fi \u4e0a\u5de5\u4f5c\uff0c\u56e0\u6b64\u5b83\u4eec\u6ca1\u6709\u4ee5\u592a\u7f51\u7ebf\u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u5b8c\u5168\u4f9d\u9760\u7535\u6c60\u4f9b\u7535\uff0c\u56e0\u6b64\u4e5f\u4e0d\u9700\u8981\u7535\u6e90\u7ebf\u3002\u6b63\u5982\u4e00\u6bb5\u65f6\u95f4\u4ee5\u6765\u7684\u60c5\u51b5\u4e00\u6837\uff0cNest \u6444\u50cf\u5934\u548c\u58c1\u6302\u652f\u67b6\u4e4b\u95f4\u7684\u8fde\u63a5\u7cfb\u7edf\u662f\u78c1\u6027\u7684\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8be5\u8bbe\u5907\u662f\u5b8c\u5168\u65e0\u7ebf\u4e14\u78c1\u6027\u5b89\u88c5\u7684\uff0c\u90a3\u4e48\u662f\u4ec0\u4e48\u963b\u6b62\u4eba\u4eec\u4f7f\u7528\u5b83\u5462\uff1f\u4f60\u4e0d\u80fd\u76f4\u63a5\u8d70\u8fc7\u53bb\u5077\u76f8\u673a\uff0c\u4e0d\u7528\u5de5\u5177\u5417\uff1f\u662f\u7684\uff0c\u60c5\u51b5\u4f3c\u4e4e\u5982\u6b64\u3002\u8c37\u6b4c\u5b9e\u9645\u4e0a\u6709\u4e00\u4efd\u652f\u6301\u6587\u4ef6\u8bf4\uff0c\u5982\u679c\u6709\u4eba\u62ff\u7740\u4f60\u7684\u76f8\u673a\u79bb\u5f00\u5e76\u4e14\u4f60\u63d0\u4ea4\u4e86\u8b66\u65b9\u62a5\u544a\uff0c\u516c\u53f8\u5c06\u514d\u8d39\u66f4\u6362\u8bbe\u5907\u3002\u60a8\u53ef\u4ee5\u5c06\u5b83\u5b89\u88c5\u5728\u79bb\u5730\u9762\u8db3\u591f\u9ad8\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5176\u66f4\u96be\u88ab\u76d7\uff0c\u4f46\u60a8\u4ecd\u7136\u9700\u8981\u4f7f\u7528\u76f8\u673a\u4e3a\u5176\u5145\u7535\u3002\u8c37\u6b4c\u8fd8\u51fa\u552e\u552e\u4ef7 14.99 \u7f8e\u5143\u7684\u201c\u9632\u76d7\u652f\u67b6\u201d\uff0c\u5b83\u53ef\u4ee5\u5939\u5728 Nest \u6444\u50cf\u5934\u5468\u56f4\uff0c\u8ba9\u60a8\u53ef\u4ee5\u7528\u91d1\u5c5e\u7535\u7f06\u5c06\u5176\u56fa\u5b9a\u5728\u5899\u4e0a\u3002\u81f3\u5c11\u6709\u4eba\u5728\u4e00\u7cfb\u5217\u76d7\u7a83\u4e8b\u4ef6\u5f00\u59cb\u4e4b\u524d\u5c31\u8003\u8651\u8fc7\u8fd9\u4e00\u70b9\uff0c\u4f46\u4f3c\u4e4e\u5b89\u5168\u6444\u50cf\u5934\u7684\u5b89\u5168\u6027\u5e94\u8be5\u66f4\u591a\u5730\u4f5c\u4e3a\u57fa\u672c\u8bbe\u8ba1\u8003\u8651\u3002\u8fd9\u4e9b\u65b0\u76f8\u673a\u4e5f\u6807\u5fd7\u7740 Nest \u5e94\u7528\u7a0b\u5e8f\u7ec8\u7ed3\u7684\u5f00\u59cb\u3002\u81ea 2018 \u5e74 Nest \u4ece\u4e00\u5bb6\u72ec\u7acb\u7684 Alphabet \u516c\u53f8\u8f6c\u53d8\u4e3a Google \u7684\u5b50\u54c1\u724c\u4ee5\u6765\uff0cGoogle \u4e00\u76f4\u81f4\u529b\u4e8e\u9010\u6b65\u6dd8\u6c70\u5408\u5e76\u524d\u7684 Nest \u57fa\u7840\u8bbe\u65bd\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u201cWorks with Nest\u201d\u751f\u6001\u7cfb\u7edf\u548c Nest \u5e10\u6237\u7684\u6d88\u4ea1\uff0c\u8fd9\u4e9b\u65b0\u76f8\u673a\u6839\u672c\u4e0d\u4f7f\u7528 Nest \u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u662f\u901a\u8fc7 Google Home \u5e94\u7528\u7a0b\u5e8f\u5de5\u4f5c\u3002 Nest \u5e94\u7528\u7a0b\u5e8f\u73b0\u5728\u4ec5\u9002\u7528\u4e8e\u65e7\u8bbe\u5907\u3002", "note_en": "Google is introducing updates to the Nest camera line with a new version of the Google Nest Doorbell and several new versions of the Google Nest Cam. The company is also toning down the Nest Cam&#39;s restrictive business model, which previously has all but required paying a monthly subscription fee to get a useful camera.\n We&#39;ll get to the new models in a minute, but the biggest news is that Google is making the cameras more useful without a monthly subscription. Previously, core camera features like\u00a0 recording video were locked behind a $6-$12 monthly subscription plan called &#34;Nest Aware,&#34; but the new cameras can now record local video. You only get three hour&#39;s worth of &#34;events&#34; (motion detection, as opposed to 24/7 video), but it&#39;s a start. Google has also moved activity zones and some image recognition features from the cloud-based pay-per-month service to on-device processing, so they work without a subscription, too.\n If you still want to pay for the &#34;Nest Aware&#34; subscription, it comes in two tiers. There&#39;s the $6 &#34;Nest Aware,&#34; which gives you 30 days of &#34;event&#34; video history and facial recognition. The free tier can detect and alert you about people, animals, and vehicles, but the subscription adds facial recognition for &#34;Familiar faces&#34; so Nest can tell if a loved one or stranger is at the door and alert you accordingly. The $12-per-month tier is &#34;Nest Aware Plus,&#34; which provides 60 days of event video history and 10 days of 24/7 video history if you have a wired (not battery-powered) Google Nest Cam (the doorbell can&#39;t record continuous video).\n    Another big added quality-of-life feature is that the cameras can now work offline. Local storage and on-device processing mean the cameras can function without the Internet; previously, the cloud was the only way they had to process and store video. This addition will help if your Internet is spotty, but it will also be useful when Google&#39;s Nest cloud service goes down, which happens  fairly frequently.\n Let&#39;s talk hardware. Unveiled today, with a ship date of August 24, are the\u00a0&#34; Google Nest Cam (battery)&#34; and the &#34; Nest Doorbell (battery)&#34; for $179 each. Both Wi-Fi-only cameras (up to 802.11n) have\u00a0IP54 water resistance for outdoor use, speakers and microphones for voice communications, and motion sensors. The Nest Cam features a 1/2.8-inch, 2MP sensor for 1080p and 30 fps\u00a0video output, while the doorbell has a 1/3 inch, 1.3 MP sensor, good for 960p video.\n You might notice that &#34;battery&#34; designation after the name of each product: Nest cameras have on-board 6000 mAh batteries now, allowing the devices to work during a power outage. If you don&#39;t want to do any installation work, the cameras can run entirely on batteries. Running the devices as completely battery-powered is actually the default experience, and Google touts an easy, &#34;Wire-free installation.&#34; How long the battery lasts will depend on how many motion events happen per month, with Google predicting anywhere from 1.5 months to seven months of battery life, depending on traffic. After that point, you&#39;ll have to pull the thing off the wall (the magnetic mounting system makes this very easy) and plug it in to recharge it.\n Alternatively, you could save yourself a lifetime of recharging and just install a power wire. Included in the box is a 1 m (3.3 ft) &#34;charging cable&#34; that uses a\u00a0proprietary pogo-pin connection, but for permanent outdoor installation, Google wants you to buy the 5 m\u00a0 Nest Cam Weatherproof Cable\u00a0for $34.99. The Doorbell can recharge itself via your doorbell wire, which is also required if you want it to ring a traditional doorbell chime.\n    Google also announced the $99.99 &#34; Google Nest Cam (wired),&#34; which is indoor-only and has a fixed power wire, and the\u00a0&#34; Google Nest Cam with floodlight&#34; for $279.99, which has two big lights on the side for outdoor lighting. Both were only teased and lack a launch date or detailed information.\n     OK, let&#39;s put a few things together here. The Nest cameras work on Wi-Fi, so they don&#39;t have an Ethernet wire. They can also run entirely on battery power, so there&#39;s no power cable, either. And as has been the case for  a while now, the connection system between the Nest camera and the wall mount is magnetic. So if the device is totally wireless and magnetically mounted, what is stopping people from just taking it? Can&#39;t you just walk up and steal the camera, using no tools?\n Yep, that seems to be the case. Google actually has  a support document saying that if someone walks off with your camera and you file a police report, the company will replace the device for free. You could mount it high enough off the ground to make it harder to steal, but you&#39;ll still need to access the camera to charge it.\n Google is also selling a\u00a0$14.99 &#34; anti-theft mount,&#34; which clamps around the Nest camera and lets you tether the thing to the wall with a metal cable. At least someone thought about this before a rash of thefts started, but it seems like the security of a security camera should be more of a base-design consideration.\n These new cameras also mark the beginning of the end for the Nest app. Since Nest moved from a separate Alphabet company to a Google sub-brand in 2018, Google has been working on  phasing out\u00a0the pre-merger Nest infrastructure. We&#39;ve already seen the death of the  &#34;Works with Nest&#34; ecosystem and Nest accounts, and these new cameras don&#39;t use the Nest app at all and instead work via the Google Home app. The Nest app is just for legacy devices now.", "posttime": "2021-08-06 03:58:14", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "google,nest", "title": "\u65b0\u7684 Google Nest Cam \u65e0\u9700\u6309\u6708\u8ba2\u9605\u5373\u53ef\u5f55\u5236\u89c6\u9891", "title_en": "New Google Nest Cams can record video without a monthly subscription", "transed": 1, "url": "https://arstechnica.com/gadgets/2021/08/new-google-nest-cams-can-record-video-without-a-monthly-subscription/", "via": "", "real_tags": ["google", "nest"]}, {"category": "", "categoryclass": "", "imagename": "c84094031a45fd8eb7b5f253879a502b.png", "infoid": 1071617, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u57fa\u4e8e Y: The Last Man \u7684\u7535\u89c6\u8fde\u7eed\u5267\uff0c\u5c61\u83b7\u6b8a\u8363\u7684 Vertigo \u6f2b\u753b\u7cfb\u5217\u5173\u4e8e\u7279\u5b9a\u6027\u522b\u7684\u542f\u793a\uff0c\u4f3c\u4e4e\u603b\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u4f46\u81ea 2008 \u5e74\u6f2b\u753b\u7cfb\u5217\u7ed3\u675f\u4ee5\u6765\uff0c\u771f\u4eba\u6539\u7f16\u7684\u8ba1\u5212\u4e00\u76f4\u5f98\u5f8a\u5728\u660e\u663e\u7684\u53d1\u5c55\u5730\u72f1\u3002\u4e0b\u4e2a\u6708\uff0c\u5f53\u4e00\u90e8\u7535\u89c6\u5267\u6700\u7ec8\u5728 Hulu \u4e0a\u63a8\u51fa\u65f6\uff0c\u4e00\u5207\u90fd\u4f1a\u6539\u53d8\u3002\u8fd9\u6761\u65b0\u95fb\u4ee5\u9884\u544a\u7247\u7684\u5f62\u5f0f\u51fa\u73b0\uff0c\u5c55\u793a\u4e86\u8be5\u7cfb\u5217\u7684\u660e\u661f\uff0c\u540c\u65f6\u89e3\u91ca\u4e86\u5b83\u5bf9\u793e\u4f1a\u7834\u574f\u6027\u75be\u75c5\u7684\u7279\u6b8a\u626d\u66f2\u3002\u539f\u7248\u6f2b\u753b\u7531\u524d\u8ff7\u5931\u4f5c\u5bb6/\u5236\u7247\u4eba Brian K. Vaughan\uff08\u4e5f\u53c2\u4e0e\u4e86 Saga \u548c Paper Girls \u7b49\u6df1\u53d7\u559c\u7231\u7684\u6f2b\u753b\u7cfb\u5217\uff09\u64b0\u5199\uff0c\u56f4\u7ed5\u5730\u7403\u4e0a\u6240\u6709\u5177\u6709 Y \u67d3\u8272\u4f53\u7684\u4e8b\u7269\u540c\u65f6\u6b7b\u4ea1\u5c55\u5f00\uff0c\u4eba\u7c7b\u548c\u52a8\u7269\u90fd\u4e00\u6837\u3002\u5468\u56db\u7684\u65b0\u9884\u544a\u7247\u91cd\u8ff0\u4e86\u540c\u6837\u7684\u524d\u63d0\uff0c\u91cd\u70b9\u5173\u6ce8\u7f8e\u56fd\u603b\u7edf\u6b7b\u4e8e\u8840\u8165\u5d29\u6e83\uff0c\u968f\u540e\u663e\u7136\u662f\u8fd9\u4e2a\u661f\u7403\u4e0a\u7684\u5176\u4ed6\u6240\u6709\u4eba\u2026\u2026\u9664\u4e86\u4e00\u4e2a\u3002\u90a3\u4e2a\u540d\u53eb\u7ea6\u91cc\u514b\u00b7\u5e03\u6717\u7684\u7537\u4eba\uff08\u672c\u00b7\u65bd\u5185\u6cfd\u9970\uff09\u5f00\u59cb\u7a7f\u8d8a\u4e00\u4e2a\u88ab\u6467\u6bc1\u7684\u7f8e\u56fd\uff0c\u8fd9\u4e2a\u7535\u89c6\u7248\u672c\u4e0e\u6f2b\u753b\u76f8\u5339\u914d\uff0c\u5305\u62ec\u4ed6\u7684\u5ba0\u7269\u7334\u5b50\uff0c\u540d\u53eb Ampersand\uff08\u4e5f\u6709 Y \u67d3\u8272\u4f53\uff09\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4ed6\u7684\u6bcd\u4eb2\uff0c\u53c2\u8bae\u5458\u8a79\u59ae\u5f17\u00b7\u5e03\u6717\uff08\u9edb\u5b89\u00b7\u83b1\u6069\u9970\uff09\uff0c\u663e\u7136\u5df2\u7ecf\u63a5\u7ba1\u4e86\u7f8e\u56fd\u603b\u7edf\u7684\u6743\u529b\u3002\u8fd9\u662f\u5bf9\u539f\u59cb\u6f2b\u753b\u7684\u4e00\u4e2a\u8f6c\u6298\uff0c\u5176\u4e2d\u7ea6\u91cc\u514b\u7684\u6bcd\u4eb2\u5728\u56fd\u4f1a\uff0c\u4f46\u4e0d\u4e00\u5b9a\u664b\u5347\u4e3a\u6700\u9ad8\u7b49\u7ea7\u3002\u9996\u6620\u9884\u544a\u7247\u7684\u5176\u4f59\u90e8\u5206\u9700\u8981\u6839\u636e\u6211\u4eec\u5bf9\u539f\u59cb\u6f2b\u753b\u7684\u4e86\u89e3\u5728\u5b57\u91cc\u884c\u95f4\u9605\u8bfb\u3002\u6700\u5bb9\u6613\u7ed8\u5236\u7684\u8054\u7cfb\u6765\u81ea\u7279\u5de5 355\uff08\u7531 Ashley Romans \u9970\u6f14\uff09\u7684\u89d2\u8272\uff0c\u4ed6\u662f\u4e00\u4e2a\u88ab\u6307\u6d3e\u4fdd\u62a4\u7ea6\u91cc\u514b\u7684\u79d8\u5bc6\u7f8e\u56fd\u519b\u4e8b\u7ec4\u7ec7\u7684\u6210\u5458\uff0c\u6211\u4eec\u770b\u5230 355 \u4ee3\u8868\u7ea6\u91cc\u514b\u8e22\u5c41\u80a1\u5e76\u6fc0\u6d3b\u70b8\u836f\u3002\u6211\u4eec\u8fd8\u5728\u5e78\u5b58\u7684\u5973\u6027\u4e2d\u770b\u5230\u4e86\u4e00\u4e9b\u654c\u5bf9\u6d3e\u7cfb\u7684\u6697\u793a\uff0c\u5c3d\u7ba1\u9884\u544a\u7247\u6ca1\u6709\u8bf4\u660e\u5979\u4eec\u662f\u5426\u662f\u4e9a\u9a6c\u900a\u4e16\u754c\u672b\u65e5\u5973\u513f\u7684\u4e00\u5bf9\u4e00\u6bd4\u8d5b\u3002\u8fd8\u6709\u50cf\u827e\u8389\u68ee\u66fc\u535a\u58eb\uff08\u6234\u5b89\u5a1c\u90a6\u9970\uff09\u548c\u7ea6\u91cc\u514b\u7684\u59b9\u59b9\u82f1\u96c4\u5e03\u6717\uff08\u5965\u5229\u7ef4\u4e9a\u745f\u5c14\u6bd4\u9970\uff09\u7b49\u539f\u521b\u7cfb\u5217\u89d2\u8272\u7684\u77ed\u6682\u95ea\u5149\u3002 \u300aY\uff1a\u6700\u540e\u4e00\u4e2a\u4eba\u300b\u53ef\u80fd\u7684\u771f\u4eba\u7248\u5df2\u7ecf\u4e0a\u6620\u5341\u591a\u5e74\u4e86\uff1b\u53d1\u5c55\u5305\u62ec\u4e00\u90e8\u4ece\u672a\u6295\u5165\u751f\u4ea7\u7684\u957f\u7bc7\u7535\u5f71\u3001\u4e00\u90e8\u88ab\u5e9f\u5f03\u7684 2018 \u5e74\u7535\u89c6\u8bd5\u64ad\u96c6\u3001\u66f4\u6362\u8282\u76ee\u4e3b\u6301\u4eba\u4ee5\u53ca\u91cd\u65b0\u5851\u9020\u7ea6\u91cc\u514b\u7684\u4e3b\u89d2\u3002\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u5b83\u5728 Hulu \u4e0a\u7684\u72ec\u5bb6\u4e3b\u573a\u662f\u5426\u4f1a\u4e3a\u8be5\u7cfb\u5217\u5e26\u6765\u798f\u97f3\uff0c\u5c3d\u7ba1\u6211\u4eec\u5e0c\u671b\u8be5\u60c5\u8282\u5bf9\u4e3b\u8981\u5973\u6027\u6f14\u5458\u7684\u5f3a\u8c03\uff08\u4ee5\u53ca FX \u575a\u6301\u6574\u4e2a\u7b2c\u4e00\u5b63\u7531\u5973\u6027\u5bfc\u6f14\uff09\u5c06\u5e26\u6765\u65b0\u9c9c\u611f\u4ece 9 \u6708 13 \u65e5\u5f00\u59cb\u5728\u7535\u89c6\u5c4f\u5e55\u4e0a\u64ad\u51fa\u3002", "note_en": "A TV series based on\u00a0 Y: The Last Man,  the award-winning Vertigo comic series about a sex-specific apocalypse, has always seemed inevitable, but ever since the comic series wrapped in 2008, plans for a live-action adaptation have lingered in apparent development hell. That all changes next month, when a TV series finally launches on Hulu. The news came in the form of a trailer that shows off the series&#39; stars while explaining its peculiar twist on a society-crushing disease.\n The original comics, written by former  Lost writer/producer Brian K. Vaughan (also involved with beloved comic series like  Saga and  Paper Girls), revolved around the simultaneous death of everything on Earth with a Y chromosome, humans and animals alike. Thursday&#39;s new trailer recaps the same premise by focusing on the president of the United States succumbing to a bloody collapse, followed by apparently every other man on the planet... save one.\n That man, Yorick Brown (played by Ben Schnetzer), begins making his way across a decimated United States, and this TV version matches the comics by including his pet monkey named Ampersand (who also has a Y chromosome). Meanwhile, his mother, Senator Jennifer Brown (played by Diane Lane), apparently assumes control as president of the United States. That&#39;s a twist on the original comics, which had Yorick&#39;s mother in Congress but not necessarily promoted to the top of the pecking order.\n    The rest of the premiere trailer requires reading between the lines based on what we know of the original comics. The easiest connection to draw comes from the character of Agent 355 (played by\u00a0Ashley Romans), a member of a clandestine American military group assigned to protect Yorick, and we see 355 kick butt and activate explosives on Yorick&#39;s behalf. We also see a hint of rival factions among the surviving women, though the trailer doesn&#39;t clarify whether they&#39;re a one-for-one match for the apocalyptic Daughters of the Amazon. There are also brief flashes of original series characters like Dr. Allison Mann (played by Diana Bang) and Yorick&#39;s sister Hero Brown (played by\u00a0Olivia Thirlby).\n A possible live-action take of  Y: The Last Man has bounced around for over a decade; developments included a feature-length movie that never moved into production, a 2018 TV pilot that was scrapped,  a change of showrunners, and  a recasting of the lead role of Yorick. It&#39;s unclear whether its exclusive home on Hulu will be a boon for the series, though we&#39;re hopeful that the plot&#39;s emphasis on a predominately female cast (and FX&#39;s insistence that  the whole first season is directed by women) will offer a breath of fresh air on TV screens starting September 13.", "posttime": "2021-08-06 03:57:59", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u53d1\u5e03,\u9996\u6620,tv,\u9884\u544a\u7247", "title": "Y\uff1aThe Last Man \u7535\u89c6\u5267\u5728 9 \u6708 13 \u65e5 Hulu \u53d1\u5e03\u524d\u83b7\u5f97\u9996\u6620\u9884\u544a\u7247", "title_en": "Y: The Last Man TV series gets premiere trailer ahead of Sept. 13 Hulu launch", "transed": 1, "url": "https://arstechnica.com/gaming/2021/08/y-the-last-man-tv-series-gets-premiere-trailer-ahead-of-sept-13-hulu-launch/", "via": "", "real_tags": ["\u53d1\u5e03", "\u9996\u6620", "tv", "\u9884\u544a\u7247"]}, {"category": "", "categoryclass": "", "imagename": "3e682fe6194f1eae8c0537626031c0a2.jpg", "infoid": 1071616, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fae\u8f6f\u8054\u5408\u521b\u59cb\u4eba\u6bd4\u5c14\u00b7\u76d6\u8328\u627f\u8ba4\uff0c\u4ed6\u5728\u4e0e\u6027\u72af\u7f6a\u8005\u548c\u540d\u8a89\u626b\u5730\u7684\u91d1\u878d\u5bb6\u6770\u5f17\u91cc\u00b7\u7231\u6cfc\u65af\u5766\u5171\u5ea6\u65f6\u5149\u65f6\u72af\u4e86\u201c\u4e00\u4e2a\u5de8\u5927\u7684\u9519\u8bef\u201d\u3002\u76d6\u8328\u5148\u751f\u544a\u8bc9\u7f8e\u56fd\u6709\u7ebf\u7535\u89c6\u65b0\u95fb\u7f51\uff0c\u4ed6\u6709\u201c\u51e0\u6b21\u665a\u9910\u201d\u5173\u4e8e\u4e00\u4e2a\u6ca1\u6709\u51fa\u73b0\u7684\u6148\u5584\u9879\u76ee\uff0c\u4e0d\u5e94\u8be5\u7ed9\u4ed6\u201c\u53ef\u4fe1\u5ea6\u201d\u3002\u76d6\u8328\u5148\u751f\u8fd8\u4e0e\u6885\u7433\u8fbe\u00b7\u5f17\u5170\u5947\u00b7\u76d6\u8328\u8ba8\u8bba\u4e86\u4ed6\u7684\u79bb\u5a5a\u95ee\u9898\uff0c\u79f0\u5176\u4e3a\u201c\u4e2a\u4eba\u5de8\u5927\u60b2\u4f24\u7684\u6839\u6e90\u201d\u3002\u8fd9\u4f4d 65 \u5c81\u7684\u8001\u4eba\u4e8e\u53bb\u5e74 3 \u6708\u5ba3\u5e03\u9000\u51fa\u5fae\u8f6f\u8463\u4e8b\u4f1a\uff0c\u4ed6\u8bf4\u4ed6\u548c\u4ed6\u7684\u524d\u59bb\u201c\u5c06\u5c1d\u8bd5\u5e76\u7ee7\u7eed\u201d\u5728\u6bd4\u5c14\u548c\u6885\u7433\u8fbe\u76d6\u8328\u57fa\u91d1\u4f1a\u5408\u4f5c\u3002\u76d6\u8328\u5148\u751f\u8fd8\u88ab\u95ee\u53ca\u4ed6\u662f\u5426\u5bf9\u5de5\u4f5c\u573a\u6240\u4e0d\u5f53\u884c\u4e3a\u7684\u6307\u63a7\u611f\u5230\u9057\u61be\u2014\u2014\u4e00\u4e9b\u5fae\u8f6f\u5458\u5de5\u6307\u8d23\u4ed6\u6b3a\u51cc\u3002\u4ed6\u6ca1\u6709\u5177\u4f53\u56de\u5e94\uff0c\u4ed6\u8bf4\uff1a\u201c\u5f53\u7136\u6bcf\u4e2a\u4eba\u90fd[\u6709\u9057\u61be]\uff0c\u4f46\u73b0\u5728\u662f\u53cd\u601d\u7684\u65f6\u5019\uff0c\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u9700\u8981\u7ee7\u7eed\u524d\u8fdb\u3002\u201d\u76d6\u8328\u5148\u751f\u7684\u4ee3\u8868\u6b64\u524d\u6de1\u5316\u4e86\u4ed6\u4e0e\u7231\u6cfc\u65af\u5766\u7684\u5173\u7cfb\uff0c\u79f0\u6ca1\u6709\u5546\u4e1a\u4f19\u4f34\u5173\u7cfb\u6216\u4e2a\u4eba\u53cb\u8c0a\u3002\n\u4ed6\u5728 CNN \u91c7\u8bbf\u4e2d\u56de\u5e94\u4e86\u8fd9\u4e00\u70b9\uff0c\u8bf4\uff1a\u201c\u4f60\u77e5\u9053\uff0c\u6211\u548c\u4ed6\u5171\u8fdb\u8fc7\u51e0\u6b21\u665a\u9910\uff0c\u5e0c\u671b\u4ed6\u6240\u8bf4\u7684\u901a\u8fc7\u4ed6\u7684\u63a5\u89e6\u4e3a\u5168\u7403\u5065\u5eb7\u7b79\u96c6\u6570\u5341\u4ebf\u7f8e\u5143\u7684\u6148\u5584\u4e8b\u4e1a\u53ef\u80fd\u4f1a\u51fa\u73b0\u3002\u4ed6\u6ca1\u6709\u7ed9\u51fa\u4efb\u4f55\u65f6\u95f4\u8868\u3002\u4f1a\u8bae\uff0c\u5c3d\u7ba1\u7f8e\u56fd\u5a92\u4f53\u79f0\u5b83\u4eec\u662f\u5728 2011 \u5e74\u81f3 2014 \u5e74\u4e4b\u95f4\u3002\u90a3\u662f\u5728\u7231\u6cfc\u65af\u5766\u4e8e 2019 \u5e74\u56e0\u8054\u90a6\u6307\u63a7\u5bf9\u672a\u6210\u5e74\u4eba\u8fdb\u884c\u6027\u4ea4\u6613\u800c\u88ab\u6355\u4e4b\u524d\uff0c\u4f46\u5728\u4ed6\u4e8e 2008 \u5e74\u56e0\u5176\u4ed6\u6027\u72af\u7f6a\u88ab\u5b9a\u7f6a\u540e\u88ab\u5224\u5165\u72f1\u3002\u76d6\u8328\u5148\u751f\u8bf4\uff1a\u201c\u82b1\u65f6\u95f4\u548c\u4ed6\u5728\u4e00\u8d77\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u9519\u8bef\uff0c\u8ba9\u4ed6\u6709\u5728\u90a3\u91cc\u7684\u53ef\u4fe1\u5ea6\u3002\u201d \u7f8e\u56fd\u5a92\u4f53\u79f0\u6885\u7433\u8fbe\u00b7\u5f17\u5170\u5947\u00b7\u76d6\u8328\u5bf9\u4ed6\u4e0e\u7231\u6cfc\u65af\u5766\u7684\u5173\u7cfb\u611f\u5230\u6124\u6012\uff0c\u5e76\u5e0c\u671b\u7ed3\u675f\u8fd9\u79cd\u5173\u7cfb\u3002\u8bf4\u5230\u4ed6\u7684\u524d\u59bb\u3002 \uff0c\u6bd4\u5c14\u76d6\u8328\u8bf4\u5979\u662f\u201c\u4e00\u4e2a\u4f1f\u5927\u7684\u4eba\uff0c\u6211\u4eec\u5373\u5c06\u7ed3\u675f\u7684\u4f19\u4f34\u5173\u7cfb\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u4e2a\u4eba\u60b2\u4f24\u7684\u6839\u6e90\u201d\u3002\u4e0d\u4e45\u4e4b\u540e\uff0c\u6709\u6d88\u606f\u79f0\u5fae\u8f6f\u6b63\u5728\u8c03\u67e5\u76d6\u8328\u5148\u751f\u201c\u8bd5\u56fe\u53d1\u8d77\u4e00\u9879\u6295\u8bc9\u201d\u3002\u4eb2\u5bc6\u76842000 \u5e74\u4e0e\u4e00\u540d\u5973\u6027\u5458\u5de5\u7684\u5173\u7cfb\u3002\u8c03\u67e5\u5728\u76d6\u8328\u5148\u751f\u79bb\u5f00\u8463\u4e8b\u4f1a\u540e\u7ed3\u675f\uff0c\u4f46\u5fae\u8f6f\u8868\u793a\u4e24\u4eba\u6ca1\u6709\u8054\u7cfb\u3002\n\u4e00\u4e9b\u524d\u96c7\u5458\u8fd8\u6307\u8d23\u76d6\u8328\u5148\u751f\u813e\u6c14\u66b4\u8e81\uff0c\u53e3\u53f7\u662f\u201c\u8fd9\u662f\u6211\u542c\u8fc7\u7684\u6700\u611a\u8822\u7684\uff08\u5492\u9a82\uff09\u60f3\u6cd5\u201d\u3002\u524d\u8463\u4e8b\u4f1a\u6210\u5458\u739b\u4e3d\u4e9a\u00b7\u514b\u52b3\uff08Maria Klawe\uff09\u66fe\u8bf4\u8fc7\u201c\u50cf\u6bd4\u5c14\u00b7\u76d6\u8328\u8fd9\u6837\u7684\u4eba\u8ba4\u4e3a\u901a\u5e38\u7684\u884c\u4e3a\u89c4\u5219\u4e0d\u9002\u7528\u4e8e\u4ed6\u201d\u3002\u76d6\u8328\u5148\u751f\u5728\u63a5\u53d7 CNN \u91c7\u8bbf\u65f6\u8bf4\uff1a\u201c\u6211\u7684\u5de5\u4f5c\u5bf9\u6211\u6765\u8bf4\u975e\u5e38\u91cd\u8981\u3002\u5728\u5bb6\u5ead\u4e2d\uff0c\u6211\u4eec\u4f1a\u5c3d\u6211\u4eec\u6240\u80fd\u6cbb\u6108\u5e76\u4ece\u53d1\u751f\u7684\u4e8b\u60c5\u4e2d\u5438\u53d6\u6559\u8bad\u3002\u201d", "note_en": "Microsoft co-founder Bill Gates has admitted he made &#34;a huge mistake&#34; in spending time with sex offender and disgraced financier Jeffrey Epstein.\n Mr Gates told CNN he had &#34;several dinners&#34; about a philanthropy project that did not emerge, and should not have given him &#34;credibility&#34;.\n  Mr Gates also discussed his divorce with Melinda French Gates, calling it &#34;a source of great personal sadness&#34;.\n  The 65-year-old, who announced in March last year he was stepping down from the Microsoft board, said he and his ex-wife were &#34;going to try and continue&#34; working together on the Bill &amp; Melinda Gates Foundation.\n Mr Gates was also asked whether he had regrets following allegations of workplace misbehaviour - some Microsoft employees have accused him of bullying.\n He did not respond specifically, saying: &#34;Certainly everyone does [have regrets] but it&#39;s a time of reflection, and at this point, I need to go forward.&#34;\n  Mr Gates&#39;s representatives have previously played down his relationship with Epstein, saying there was no business partnership or personal friendship.\n He echoed that in the CNN interview, saying: &#34;I had several dinners with him, you know, hoping that what he said about getting billions of philanthropy for global health through contacts that he had might emerge.\n   He did not give any timeframe for the meetings, although US media have said they were between 2011 and 2014.\n That was before Epstein&#39;s arrest in 2019 on federal charges of sex-trafficking of minors, but after he had served a jail sentence following conviction in 2008 for other sex offences.\n Mr Gates said: &#34;It was a huge mistake to spend time with him, to give him the credibility of being there.&#34;\n US media have said Melinda French Gates was furious at his relationship with Epstein and wanted it to end.\n Speaking of his ex-wife, Bill Gates said she was &#34;a great person, and that partnership that we had coming to an end is a source of great personal sadness&#34;.\n  Shortly afterwards, it emerged that Microsoft was investigating a complaint that Mr Gates had &#34;sought to initiate an intimate relationship&#34; with a female employee in 2000. The investigation ended after Mr Gates left the board, but Microsoft said the two were not linked.\n Some former employees have also accused Mr Gates of having a hot temper, with the catchphrase &#34;that&#39;s the stupidest {expletive] idea I&#39;ve ever heard&#34;.\n Former board member Maria Klawe had said &#34;a person like Bill Gates thinks the usual rules of behaviour don&#39;t apply to him&#34;.\n  Mr Gates said in his CNN interview: &#34;My work is very important to me. Within the family, we&#39;ll heal as best we can and learn from what&#39;s happened.&#34;", "posttime": "2021-08-06 03:57:33", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4f1a\u8bae,meetings,\u5148\u751f", "title": "\u6bd4\u5c14\u76d6\u8328\u8bf4\u7231\u6cfc\u65af\u5766\u4f1a\u8bae\u72af\u4e86\u4e00\u4e2a\u5de8\u5927\u7684\u9519\u8bef", "title_en": "Epstein meetings a huge mistake, says Bill Gates", "transed": 1, "url": "https://www.bbc.com/news/world-us-canada-58099778.amp", "via": "", "real_tags": ["\u4f1a\u8bae", "meetings", "\u5148\u751f"]}, {"category": "", "categoryclass": "", "imagename": "dbb334b62f5ba8dde63dbe111f59aca4.png", "infoid": 1071615, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Quora \u8868\u793a\uff0c\u5b83\u201c\u6709\u671b\u4ece\u5e7f\u544a\u4e2d\u83b7\u5f97\u6b63\u73b0\u91d1\u6d41\u201d\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u5e73\u53f0\u76ee\u524d\u5e76\u672a\u5904\u4e8e\u4e8f\u635f\u72b6\u6001\u3002\u4f46 Quora \u5c06\u5229\u7528\u521b\u4f5c\u8005\u7ecf\u6d4e\u548c\u8ba2\u9605\u4f5c\u4e3a\u76c8\u5229\u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u201c\u6211\u4eec\u5e0c\u671b\u8ba9\u521b\u4f5c\u8005\u5728\u8d22\u52a1\u4e0a\u66f4\u53ef\u6301\u7eed\u5730\u5171\u4eab\u77e5\u8bc6\uff0c\u201dQuora \u9996\u5e2d\u6267\u884c\u5b98 Adam D&#39;Angelo \u5728\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u5199\u9053\u3002 \u201c\u5c3d\u7ba1\u8bb8\u591a\u4eba\u6709\u52a8\u529b\u5e76\u4e14\u80fd\u591f\u82b1\u65f6\u95f4\u5728 Quora \u4e0a\u5199\u4f5c\u53ea\u662f\u4e3a\u4e86\u5206\u4eab\u4ed6\u4eec\u7684\u77e5\u8bc6\uff0c\u4f46\u8bb8\u591a\u5176\u4ed6\u4eba\u4e5f\u53ef\u4ee5\u5728\u6709\u7ecf\u6d4e\u7406\u7531\u7684\u60c5\u51b5\u4e0b\u5206\u4eab\u66f4\u591a\u3002\u201d Quora \u7684\u7b2c\u4e00\u4e2a\u65b0\u4ea7\u54c1\u662f Quora+\u2014\u2014\u8ba2\u9605\u8005\u5c06\u652f\u4ed8 5 \u7f8e\u5143\u7684\u6708\u8d39\u6216 50 \u7f8e\u5143\u7684\u5e74\u8d39\u6765\u8bbf\u95ee\u4efb\u4f55\u521b\u4f5c\u8005\u9009\u62e9\u653e\u5728\u4ed8\u8d39\u5899\u540e\u9762\u7684\u5185\u5bb9\u3002\u8fd9\u4e9b\u4e0e\u6ca1\u6709\u5e7f\u544a\u7684 Medium \u4e3a\u5176\u4f1a\u5458\u8ba1\u5212\u6536\u53d6\u7684\u8d39\u7528\u76f8\u540c\u3002\u8ba2\u9605\u8005\u5c06\u652f\u4ed8 Quora\uff0c\u800c\u4e0d\u662f\u652f\u4ed8\u9009\u5b9a\u7684\u521b\u4f5c\u8005\u3002\u7136\u540e\uff0c\u6bcf\u4e2a\u8ba2\u9605\u8005\u7684\u4ed8\u6b3e\u5c06\u201c\u6309\u6bcf\u4e2a\u8ba2\u9605\u8005\u6d88\u8d39\u5176\u5185\u5bb9\u7684\u6570\u91cf\u6210\u6bd4\u4f8b\u5206\u914d\u7ed9\u521b\u4f5c\u8005\uff0c\u8ba2\u9605\u8005\u7684\u66f4\u591a\u8d21\u732e\u5c06\u5206\u914d\u7ed9\u8ba2\u9605\u8005\u5173\u6ce8\u7684\u4f5c\u5bb6\u548c\u7a7a\u95f4\u3002\u201d\u521b\u4f5c\u8005\u53ef\u4ee5\u9009\u62e9\u5728 Quora+ \u5185\u5bb9\u4e0a\u542f\u7528\u52a8\u6001\u4ed8\u8d39\u4e13\u533a\uff0c\u5982\u679c Quora \u8ba4\u4e3a\u4ed6\u4eec\u53ef\u80fd\u4f1a\u8f6c\u6362\u4e3a\u4ed8\u8d39\u4f1a\u5458\uff0c\u5219\u53ef\u4ee5\u8ba9\u514d\u8d39\u7528\u6237\u8bbf\u95ee\u67d0\u4e9b\u5e16\u5b50\uff1b\u8fd8\u6709\u4e00\u4e2a\u201c\u81ea\u9002\u5e94\u201d\u4ed8\u8d39\u4e13\u533a\u9009\u9879\uff0c\u5b83\u4f7f\u7528\u4e00\u79cd\u7b97\u6cd5\u6765\u51b3\u5b9a\u662f\u5426\u6839\u636e\u5177\u4f53\u60c5\u51b5\u4e3a\u7279\u5b9a\u7528\u6237\u4ed8\u8d39\u4e13\u533a\u5185\u5bb9\u3002\u8fd9\u5e94\u8be5\u53ef\u4ee5\u5e2e\u52a9\u521b\u4f5c\u8005\u5728\u901a\u8fc7\u5185\u5bb9\u8d27\u5e01\u5316\u548c\u6269\u5927\u89c2\u4f17\u4ee5\u5bfb\u627e\u65b0\u7684\u6f5c\u5728\u8ba2\u9605\u8005\u4e4b\u95f4\u53d6\u5f97\u5e73\u8861\u3002 Quora \u544a\u8bc9 TechCrunch\uff0c\u5b83\u4ecd\u5728\u8bd5\u9a8c Quora+\uff0c\u8fd8\u4e0d\u80fd\u8bf4\u5b83\u5c06\u4ece\u8ba2\u9605\u4e2d\u83b7\u5f97\u591a\u5c11\u767e\u5206\u6bd4\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u8ba9\u521b\u4f5c\u8005\u5728 Spaces \u4e0a\u5199\u4ed8\u8d39\u5e16\u5b50\uff0c\u5c31\u50cf\u7528\u6237\u5728 Quora \u4e0a\u521b\u5efa\u7684\u51fa\u7248\u7269\u4e00\u6837\u3002 Quora \u5c06\u6536\u53d6\u8ba2\u9605\u8d39\u7684 5%\uff0c\u521b\u4f5c\u8005\u53ef\u4ee5\u81ea\u884c\u9009\u62e9\u2014\u2014\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u76f4\u63a5\u9762\u5411\u6d88\u8d39\u8005\u7684\u535a\u5ba2\u5e73\u53f0 Substack \u6536\u53d6\u4f5c\u8005\u5229\u6da6\u7684 10%\uff0c\u8fd9\u4f7f\u5f97 Quora \u6210\u4e3a\u5177\u6709\u7ade\u4e89\u529b\u7684\u66ff\u4ee3\u65b9\u6848\u3002 Ghost \u7b49\u5176\u4ed6\u5e73\u53f0\u6bcf\u6708\u6536\u53d6 9 \u7f8e\u5143\u7684\u8d39\u7528\uff0c\u4f46\u8ba9\u4f5c\u5bb6\u4fdd\u7559\u4ed6\u4eec\u7684\u6536\u5165\u2014\u2014\u5bf9\u4e8e\u6bcf\u6708\u81f3\u5c11\u8d5a 180 \u7f8e\u5143\u7684\u4f5c\u5bb6\u6765\u8bf4\uff0cGhost \u4f1a\u6bd4 Quora \u66f4\u6709\u5229\u53ef\u56fe\u3002 D&#39;Angelo \u5199\u9053\uff1a\u201c\u6211\u4eec\u80fd\u591f\u53ef\u6301\u7eed\u5730\u627f\u8bfa\u53ea\u6536\u53d6\u6700\u4f4e\u9650\u5ea6\u7684\u8d39\u7528\uff0c\u800c\u65e0\u9700\u5728\u672a\u6765\u589e\u52a0\u8d39\u7528\uff0c\u56e0\u4e3a\u6211\u4eec\u4ece\u5e7f\u544a\u4e2d\u83b7\u5f97\u4e86\u8db3\u591f\u7684\u6536\u5165\u6765\u8d44\u52a9\u8be5\u5e73\u53f0\u7684\u5927\u90e8\u5206\u5f00\u53d1\u548c\u8fd0\u8425\u3002\u201d\u4e0e\u6b64\u540c\u65f6\uff0cSubstack \u6ca1\u6709\u5e7f\u544a\u3002\nQuora \u5728\u7b79\u96c6\u4e86 8500 \u4e07\u7f8e\u5143\u540e\uff0c\u5728 2017 \u5e74\u8fbe\u5230\u4e86 18 \u4ebf\u7f8e\u5143\u7684\u4f30\u503c\uff0c\u5f53\u65f6\u8be5\u5e73\u53f0\u62e5\u6709 1.9 \u4ebf\u6708\u7528\u6237\u3002\u73b0\u5728\uff0c\u6839\u636e D&#39;Angelo \u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u6bcf\u6708\u6709\u8d85\u8fc7 3 \u4ebf\u4eba\u4f7f\u7528 Quora\u3002\u5c3d\u7ba1\u7528\u6237\u6709\u6240\u589e\u957f\uff0c\u4f46 Quora \u4e8e 2020 \u5e74 1 \u6708\u5728\u5176\u6e7e\u533a\u548c\u7ebd\u7ea6\u5e02\u529e\u516c\u5ba4\u88c1\u5458\uff0c\u4eba\u6570\u4e0d\u8be6\u3002\u4eca\u5929\u5c06\u4e3a\u5305\u62ec\u7f8e\u56fd\u5728\u5185\u7684 25 \u4e2a\u56fd\u5bb6/\u5730\u533a\u7684\u82f1\u8bed\u7528\u6237\u63a8\u51fa\u7a7a\u95f4\u8ba2\u9605\u670d\u52a1 Quora+ \u7684\u63a8\u51fa\u4e0d\u4f1a\u90a3\u4e48\u76f4\u63a5\u56e0\u4e3a Quora \u9080\u8bf7\u7cbe\u9009\u4f5c\u5bb6\u6d4b\u8bd5\u5e73\u53f0\u5e76\u786e\u5b9a\u6700\u9002\u5408\u8ba2\u9605\u8005\u548c\u521b\u4f5c\u8005\u7684\u5185\u5bb9\u3002", "note_en": "Quora says it\u2019s \u201con track to be cash flow positive from ads alone,\u201d implying that the platform isn\u2019t currently in the black. But Quora sees tapping into the creator economy and subscriptions as a way to turn a profit.\n \u201cWe want to make sharing knowledge more financially sustainable for creators,\u201d Quora CEO Adam D\u2019Angelo wrote in  a blog post. \u201cEven though many people are motivated and able to spend their time writing on Quora just to share their knowledge, many others could share much more with financial justification to do so.\u201d\n Quora\u2019s first new product is Quora+ \u2014 subscribers will pay a  $5\u00a0monthly fee or a $50 yearly fee \u00a0to access content that any creator chooses to put behind a paywall. These are the same rates that Medium, which has  no ads, charges for its  membership program.\n Rather than paying select creators, subscribers will pay Quora. Then, each subscriber\u2019s payment will be distributed to creators \u201cin proportion to the amount each subscriber is consuming their content, with more of a subscriber\u2019s contribution going to writers and spaces the subscriber follows.\u201d Creators have the option to enable a  dynamic paywall on Quora+ content, which would give free users access to certain posts if Quora thinks they\u2019re likely to convert to paid membership; there\u2019s also an \u201c adaptive\u201d paywall option, which uses an algorithm to decide whether to paywall content for a specific user on a case-by-case basis. This is supposed to help creators strike a balance between monetizing their content and growing their audience to find new potential subscribers.\n Quora told TechCrunch that it is still experimenting with Quora+ and can\u2019t yet say what percentage it will take from subscriptions.\n The other option is for creators to write paywalled posts on  Spaces, which are like user-created publications on Quora. Quora will take 5% of the subscription fee, which the creator can choose at their own discretion \u2014 comparatively, the direct-to-consumer blogging platform Substack takes  10% of writers\u2019 profits, which makes Quora a competitive alternative. Other platforms like  Ghost ask for a $9 monthly fee, but let writers retain their revenue \u2014 for writers making at least $180 per month, Ghost would be more profitable than Quora.\n  \u201cWe\u2019re able to sustainably commit to taking only a minimal fee without needing to increase it in the future because we make enough revenue from ads to fund most of the platform\u2019s development and operations,\u201d D\u2019Angelo wrote. Substack, meanwhile, doesn\u2019t have ads.\n Quora reached a  $1.8 billion valuation in 2017 after raising $85 million, and at the time, the platform had 190 million monthly users. Now, according to D\u2019Angelo\u2019s blog post, over 300 million people use Quora each month. Despite this user growth, Quora  laid off an undisclosed amount of staff in its Bay Area and New York City offices in January 2020.\n Space subscriptions will launch today for English language users in  25 countries, including the U.S. The rollout of Quora+ will be less immediate as Quora invites select writers to test the platform and determine what works best for subscribers and creators.", "posttime": "2021-08-06 03:57:05", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u73b0\u5728,monetize,quora", "title": "\u521b\u4f5c\u8005\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7 Quora \u4e0a\u7684\u4e13\u4e1a\u77e5\u8bc6\u83b7\u5229", "title_en": "\n\t\t\t\tCreators can now monetize their expertise on Quora\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/08/05/creators-can-now-monetize-their-expertise-on-quora/", "via": "", "real_tags": ["\u73b0\u5728", "monetize", "quora"]}, {"category": "", "categoryclass": "", "imagename": "e08dbebe284498fed04010aab8c5897f.jpg", "infoid": 1071614, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Ripple Ventures \u7684\u521b\u59cb\u4eba\u517c\u7ba1\u7406\u5408\u4f19\u4eba\u9a6c\u7279\u00b7\u79d1\u6069 (Matt Cohen) \u662f\u4e00\u540d\u4e1a\u52a1\u8fd0\u8425\u5546\uff0c\u540e\u6765\u6210\u4e3a\u65e9\u671f\u6295\u8d44\u8005\u3002\u5728\u521b\u7acb about.me \u548c Sphere\uff08\u5747\u88ab AOL \u6536\u8d2d\uff09\u4e4b\u540e\uff0cTony \u5c06\u521b\u59cb\u4eba\u548c\u521d\u521b\u516c\u53f8\u7684\u9886\u5bfc\u4e13\u4e1a\u77e5\u8bc6\u5e26\u5165\u4e86\u4ed6\u5728 True \u7684\u5408\u4f19\u4eba\u89d2\u8272\u4e2d\u3002\u8fd9\u5e76\u4e0d\u662f\u8bf4\u98ce\u6295\u5e26\u6765\u7684\u4ef7\u503c\u51cf\u5c11\u4e86\u3002\u5982\u679c\u6709\u7684\u8bdd\uff0c\u60c5\u51b5\u6070\u6070\u76f8\u53cd\u2014\u2014\u8fd9\u79cd\u65b0\u7684\u52a8\u6001\u8feb\u4f7f\u521b\u59cb\u4eba\u5bf9\u5750\u5728\u4ed6\u4eec\u5bfc\u5e08\u684c\u65c1\u7684\u7a76\u7adf\u662f\u8c01\u975e\u5e38\u6311\u5254\u3002\u8981\u5728\u65e9\u671f\u9636\u6bb5\u4ece\u7ecf\u9a8c\u4e30\u5bcc\u7684\u6295\u8d44\u8005\u90a3\u91cc\u83b7\u5f97\u6700\u5927\u4ef7\u503c\uff0c\u6839\u672c\u4e0d\u53ef\u80fd\u5efa\u7acb\u5927\u91cf\u6df1\u539a\u800c\u6709\u610f\u4e49\u7684\u5173\u7cfb\u3002\u521b\u59cb\u4eba\u7edd\u5bf9\u5e94\u8be5\u4ee5\u6781\u9ad8\u7684\u4f30\u503c\u8fdb\u884c\u5927\u8f6e\u878d\u8d44\uff0c\u4f46\u91cd\u8981\u7684\u662f\u4ed6\u4eec\u8981\u8ba4\u8bc6\u5230\u7ba1\u7406\u5141\u8bb8\u8fdb\u5165\u5bfc\u5e08\u5708\u7684\u4eba\u662f\u591a\u4e48\u91cd\u8981\u3002\u6700\u521d\uff0c\u521b\u59cb\u4eba\u5e94\u8be5\u786e\u4fdd\u4ed6\u4eec\u7684\u7b2c\u4e00\u5c42\u7531\u771f\u6b63\u7684\u201c\u5b9e\u5e72\u5bb6\u201d\u7ec4\u6210\u2014\u2014\u901a\u5e38\u662f\u5929\u4f7f\u548c\u65e9\u671f\u98ce\u9669\u6295\u8d44\u8005\uff0c\u521b\u59cb\u4eba\u6bcf\u5468\uff08\u6216\u66f4\u9891\u7e41\uff09\u4f1a\u9762\u4ee5\u5e2e\u52a9\u89e3\u51b3\u4e00\u4e9b\u6700\u7ec6\u5fae\u7684\u95ee\u9898\u3002\u4ece\u62db\u8058\u5230\u8fd0\u8425\u969c\u788d\uff0c\u4e00\u76f4\u5230\u66f4\u6df1\u5c42\u6b21\u3001\u66f4\u4e2a\u4eba\u5316\u7684\u6311\u6218\uff0c\u4f8b\u5982\u5728\u5bb6\u5ead\u751f\u6d3b\u4e0e\u5feb\u901f\u53d1\u5c55\u7684\u521d\u521b\u516c\u53f8\u4e4b\u95f4\u53d6\u5f97\u5e73\u8861\u3002\u8fd9\u4e2a\u5708\u5b50\u662f\u771f\u6b63\u7684\u6307\u5bfc\u53d1\u751f\u7684\u5730\u65b9\uff0c\u521b\u59cb\u4eba\u53ef\u4ee5\u662f\u5f00\u653e\u548c\u8106\u5f31\u7684\u3002\u51fa\u4e8e\u663e\u800c\u6613\u89c1\u7684\u539f\u56e0\uff0c\u8fd9\u4e2a\u5708\u5b50\u5fc5\u987b\u5f88\u5c0f\uff0c\u901a\u5e38\u6700\u591a\u7531\u4e24\u5230\u516d\u4e2a\u4eba\u7ec4\u6210\u3002\u4efb\u4f55\u66f4\u7b80\u5355\u7684\u4e8b\u60c5\u90fd\u4f1a\u53d8\u5f97\u7b28\u62d9\uff0c\u8ba9\u521b\u59cb\u4eba\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\u6765\u7ba1\u7406\u8fd9\u4e9b\u5173\u7cfb\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u5efa\u7acb\u4ed6\u4eec\u7684\u516c\u53f8\u3002\u7b2c\u4e8c\u5c42\u5e94\u8be5\u7531\u6295\u8d44\u8005\u7684\u201c\u5b63\u5ea6\u4eba\u7fa4\u201d\u7ec4\u6210\u3002\u8fd9\u4e9b\u4eba\u4e0d\u4e00\u5b9a\u662f\u4e0d\u611f\u5174\u8da3\u6216\u4e0d\u613f\u610f\u53c2\u4e0e\u8fd0\u8425\u516c\u53f8\u7684\u672c\u8d28\u7684\u4eba\uff0c\u4f46\u8fd9\u4e2a\u5708\u5b50\u5f80\u5f80\u7531\u6bcf\u5e74\u8fdb\u884c\u6570\u5341\u6b21\u6295\u8d44\u7684\u98ce\u6295\u7ec4\u6210\u3002\u4ed6\u4eec\u548c\u4ed6\u4eec\u7684\u521b\u59cb\u4eba\u4e00\u6837\uff0c\u65e0\u6cd5\u6bcf\u5468\u7ba1\u7406 50 \u6b21\u5173\u7cfb\uff0c\u56e0\u6b64\u4ed6\u4eec\u5728\u516c\u53f8\u95ee\u9898\u4e0a\u7684\u63a5\u89e6\u70b9\u5f80\u5f80\u79fb\u52a8\u5f97\u66f4\u6162\u6216\u66f4\u4e0d\u9891\u7e41\u3002", "note_en": "Founder and managing partner at  Ripple Ventures, Matt Cohen is a business operator turned early-stage investor.\n Having founded  about.me and Sphere (both acquired by AOL), Tony brings founder and startup leadership expertise to his partner role at  True.\n  This isn\u2019t to say that the value VCs bring has diminished. If anything, it\u2019s quite the opposite \u2014 this new dynamic is forcing founders to be extremely selective about exactly who is sitting around their mentorship table. It\u2019s simply not possible to have numerous deep and meaningful relationships to extract maximum value at the early stage from seasoned investors.\n Founders should definitely pursue big rounds at sky-high valuations, but it\u2019s important that they recognize how important it is to manage who they allow into their mentorship circles. Initially, founders should make sure their first layer consists of the real \u201cdoers\u201d \u2014 usually angels and early venture investors who founders meet with weekly (or more frequently) to help solve some of the most granular problems.\n Everything from hiring to operational hurdles all the way to deeper, more personal challenges like balancing family life with a rapidly growing startup.\n This circle is where the real mentorship happens, where founders can be open and vulnerable. For obvious reasons, this circle has to be small, and usually consist of two to six people at most. Anything more simply becomes unwieldy and leaves founders spending more time managing these relationships than actually building their company.\n  The second layer should consist of the \u201cquarterly crowd\u201d of investors. These aren\u2019t necessarily people who are uninterested or unwilling to participate in the nitty gritty of running the company, but this circle tends to consist of VCs who make dozens of investments per year. They, like their founders, aren\u2019t capable of managing 50 relationships on a weekly basis, so their touch points on company issues tend to move slower or less frequently.", "posttime": "2021-08-06 03:56:49", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "rust,\u6295\u8d44\u8005,learn,\u521b\u59cb\u4eba", "title": "\u521b\u59cb\u4eba\u5fc5\u987b\u5b66\u4f1a\u5982\u4f55\u4e0e\u6295\u8d44\u8005\u5efa\u7acb\u548c\u7ef4\u6301\u4fe1\u4efb\u5708", "title_en": "\n\t\t\t\tFounders must learn how to build and maintain circles of trust with investors\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/08/05/founders-must-learn-how-to-build-and-maintain-circles-of-trust-with-investors/", "via": "", "real_tags": ["rust", "\u6295\u8d44\u8005", "learn", "\u521b\u59cb\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "feced9be697d5c029475c240b1aa4cd5.jpg", "infoid": 1071613, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Apple \u544a\u8bc9 TechCrunch\uff0c\u68c0\u6d4b\u513f\u7ae5\u6027\u8650\u5f85\u6750\u6599 (CSAM) \u662f\u65e8\u5728\u66f4\u597d\u5730\u4fdd\u62a4\u4f7f\u7528\u5176\u670d\u52a1\u7684\u513f\u7ae5\u514d\u53d7\u5728\u7ebf\u4f24\u5bb3\u7684\u51e0\u9879\u65b0\u529f\u80fd\u4e4b\u4e00\uff0c\u5305\u62ec\u8fc7\u6ee4\u5668\u4ee5\u963b\u6b62\u901a\u8fc7\u513f\u7ae5\u7684 iMessage \u5e10\u6237\u53d1\u9001\u548c\u63a5\u6536\u7684\u6f5c\u5728\u8272\u60c5\u7167\u7247.\u5f53\u7528\u6237\u5c1d\u8bd5\u901a\u8fc7 Siri \u548c\u641c\u7d22\u641c\u7d22\u4e0e CSAM \u76f8\u5173\u7684\u672f\u8bed\u65f6\uff0c\u53e6\u4e00\u4e2a\u529f\u80fd\u5c06\u8fdb\u884c\u5e72\u9884\u3002\u5927\u591a\u6570\u4e91\u670d\u52a1\u2014\u2014Dropbox\u3001\u8c37\u6b4c\u548c\u5fae\u8f6f\u7b49\u2014\u2014\u5df2\u7ecf\u626b\u63cf\u4e86\u7528\u6237\u6587\u4ef6\u4e2d\u53ef\u80fd\u8fdd\u53cd\u5176\u670d\u52a1\u6761\u6b3e\u6216\u6f5c\u5728\u975e\u6cd5\u7684\u5185\u5bb9\uff0c\u5982 CSAM\u3002\u4f46\u82f9\u679c\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u62d2\u7edd\u626b\u63cf\u7528\u6237\u5728\u4e91\u4e2d\u7684\u6587\u4ef6\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u5728\u6570\u636e\u5230\u8fbe\u82f9\u679c\u7684 iCloud \u670d\u52a1\u5668\u4e4b\u524d\u5bf9\u5176\u8fdb\u884c\u52a0\u5bc6\u3002\u82f9\u679c\u8868\u793a\uff0c\u5176\u65b0\u7684 CSAM \u68c0\u6d4b\u6280\u672f\u2014\u2014NeuralHash\u2014\u2014\u800c\u662f\u5728\u7528\u6237\u8bbe\u5907\u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bc6\u522b\u7528\u6237\u662f\u5426\u5c06\u5df2\u77e5\u7684\u8650\u5f85\u513f\u7ae5\u56fe\u50cf\u4e0a\u4f20\u5230 iCloud\uff0c\u800c\u65e0\u9700\u89e3\u5bc6\u56fe\u50cf\uff0c\u76f4\u5230\u8fbe\u5230\u9608\u503c\u5e76\u901a\u8fc7\u4e00\u7cfb\u5217\u68c0\u67e5\u6765\u9a8c\u8bc1\u5185\u5bb9\u88ab\u6e05\u9664.\u5468\u4e09\uff0c\u5f53\u7ea6\u7ff0\u970d\u666e\u91d1\u65af\u5927\u5b66\u7684\u5bc6\u7801\u5b66\u6559\u6388\u9a6c\u4fee\u683c\u6797\u5728\u4e00\u7cfb\u5217\u63a8\u6587\u4e2d\u900f\u9732\u4e86\u65b0\u6280\u672f\u7684\u5b58\u5728\u65f6\uff0c\u82f9\u679c\u516c\u53f8\u7684\u52aa\u529b\u7684\u6d88\u606f\u6cc4\u9732\u4e86\u3002\u8fd9\u4e00\u6d88\u606f\u906d\u5230\u4e86\u4e00\u4e9b\u5b89\u5168\u4e13\u5bb6\u548c\u9690\u79c1\u5021\u5bfc\u8005\u7684\u62b5\u5236\uff0c\u4f46\u4e5f\u906d\u5230\u4e86\u4e60\u60ef\u4e86\u82f9\u679c\u516c\u53f8\u5927\u591a\u6570\u5176\u4ed6\u516c\u53f8\u6240\u6ca1\u6709\u7684\u5b89\u5168\u548c\u9690\u79c1\u65b9\u6cd5\u7684\u7528\u6237\u7684\u62b5\u5236\u3002 Apple \u6b63\u8bd5\u56fe\u901a\u8fc7\u591a\u5c42\u52a0\u5bc6\u4fdd\u62a4\u9690\u79c1\u6765\u5e73\u606f\u6050\u60e7\uff0c\u8fd9\u79cd\u52a0\u5bc6\u65b9\u5f0f\u9700\u8981\u591a\u4e2a\u6b65\u9aa4\u624d\u80fd\u8fdb\u5165 Apple \u7684\u6700\u7ec8\u4eba\u5de5\u5ba1\u6838\u3002 NeuralHash \u5c06\u767b\u9646 iOS 15 \u548c macOS Monterey\uff0c\u9884\u8ba1\u5728\u672a\u6765\u4e00\u4e24\u4e2a\u6708\u5185\u53d1\u5e03\uff0c\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\u5c06\u7528\u6237 iPhone \u6216 Mac \u4e0a\u7684\u7167\u7247\u8f6c\u6362\u4e3a\u552f\u4e00\u7684\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\u4e32\uff0c\u79f0\u4e3a\u54c8\u5e0c\u3002\u4efb\u4f55\u65f6\u5019\u4f60\u7a0d\u5fae\u4fee\u6539\u4e00\u4e2a\u56fe\u50cf\uff0c\u5b83\u90fd\u4f1a\u6539\u53d8\u54c8\u5e0c\u5e76\u963b\u6b62\u5339\u914d\u3002 Apple \u8868\u793a\uff0cNeuralHash \u8bd5\u56fe\u786e\u4fdd\u76f8\u540c\u4e14\u89c6\u89c9\u4e0a\u76f8\u4f3c\u7684\u56fe\u50cf\u2014\u2014\u4f8b\u5982\u88c1\u526a\u6216\u7f16\u8f91\u8fc7\u7684\u56fe\u50cf\u2014\u2014\u4ea7\u751f\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u3002\u5728\u5c06\u56fe\u50cf\u4e0a\u4f20\u5230 iCloud \u7167\u7247\u4e4b\u524d\uff0c\u8fd9\u4e9b\u54c8\u5e0c\u503c\u4f1a\u5728\u8bbe\u5907\u4e0a\u4e0e\u5df2\u77e5\u7684\u8650\u5f85\u513f\u7ae5\u56fe\u50cf\u54c8\u5e0c\u503c\u6570\u636e\u5e93\u8fdb\u884c\u5339\u914d\uff0c\u8be5\u6570\u636e\u5e93\u7531\u56fd\u5bb6\u5931\u8e2a\u4e0e\u53d7\u8650\u513f\u7ae5\u4e2d\u5fc3 (NCMEC) \u7b49\u513f\u7ae5\u4fdd\u62a4\u7ec4\u7ec7\u63d0\u4f9b\u3002 NeuralHash \u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u79c1\u6709\u96c6\u5408\u4ea4\u96c6\u7684\u52a0\u5bc6\u6280\u672f\u6765\u68c0\u6d4b\u54c8\u5e0c\u5339\u914d\uff0c\u800c\u4e0d\u4f1a\u900f\u9732\u56fe\u50cf\u662f\u4ec0\u4e48\u6216\u63d0\u9192\u7528\u6237\u3002\n\u7ed3\u679c\u4f1a\u4e0a\u4f20\u5230 Apple\uff0c\u4f46\u65e0\u6cd5\u81ea\u884c\u8bfb\u53d6\u3002 Apple \u4f7f\u7528\u53e6\u4e00\u79cd\u79f0\u4e3a\u9608\u503c\u79d8\u5bc6\u5171\u4eab\u7684\u52a0\u5bc6\u539f\u7406\uff0c\u4ec5\u5f53\u7528\u6237\u8d85\u8fc7\u5176 iCloud \u7167\u7247\u4e2d\u5df2\u77e5\u7684\u8650\u5f85\u513f\u7ae5\u56fe\u50cf\u9608\u503c\u65f6\uff0c\u5b83\u624d\u5141\u8bb8\u89e3\u5bc6\u5185\u5bb9\u3002 Apple \u4e0d\u4f1a\u8bf4\u8fd9\u4e2a\u9608\u503c\u662f\u4ec0\u4e48\uff0c\u4f46\u8bf4\u2014\u2014\u4f8b\u5982\u2014\u2014\u5982\u679c\u4e00\u4e2a\u79d8\u5bc6\u88ab\u5206\u6210\u4e00\u5343\u4e2a\u7247\u6bb5\uff0c\u5e76\u4e14\u9608\u503c\u662f\u5341\u5f20\u8650\u5f85\u513f\u7ae5\u5185\u5bb9\u7684\u56fe\u50cf\uff0c\u90a3\u4e48\u53ef\u4ee5\u4ece\u8fd9\u5341\u5f20\u56fe\u50cf\u4e2d\u7684\u4efb\u4f55\u4e00\u5f20\u91cd\u5efa\u79d8\u5bc6\u3002\u90a3\u65f6\uff0cApple \u53ef\u4ee5\u89e3\u5bc6\u5339\u914d\u7684\u56fe\u50cf\u3001\u624b\u52a8\u9a8c\u8bc1\u5185\u5bb9\u3001\u7981\u7528\u7528\u6237\u5e10\u6237\u5e76\u5c06\u56fe\u50cf\u62a5\u544a\u7ed9 NCMEC\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9\u6267\u6cd5\u90e8\u95e8\u3002 Apple \u8868\u793a\uff0c\u6b64\u8fc7\u7a0b\u6bd4\u626b\u63cf\u4e91\u4e2d\u7684\u6587\u4ef6\u66f4\u52a0\u6ce8\u91cd\u9690\u79c1\uff0c\u56e0\u4e3a NeuralHash \u4ec5\u641c\u7d22\u5df2\u77e5\u800c\u975e\u65b0\u7684\u8650\u5f85\u513f\u7ae5\u56fe\u50cf\u3002\u82f9\u679c\u516c\u53f8\u8868\u793a\uff0c\u8bef\u62a5\u7684\u53ef\u80fd\u6027\u4e3a\u4e07\u4ebf\u5206\u4e4b\u4e00\uff0c\u4f46\u5982\u679c\u5e10\u6237\u88ab\u9519\u8bef\u6807\u8bb0\uff0c\u5219\u6709\u4e00\u4e2a\u4e0a\u8bc9\u7a0b\u5e8f\u3002 Apple \u5df2\u5728\u5176\u7f51\u7ad9\u4e0a\u53d1\u5e03\u4e86\u6709\u5173 NeuralHash \u5de5\u4f5c\u539f\u7406\u7684\u6280\u672f\u7ec6\u8282\uff0c\u8fd9\u4e9b\u7ec6\u8282\u5df2\u7ecf\u8fc7\u5bc6\u7801\u5b66\u4e13\u5bb6\u7684\u5ba1\u67e5\u3002\u4f46\u662f\uff0c\u5c3d\u7ba1\u6253\u51fb\u513f\u7ae5\u6027\u8650\u5f85\u7684\u52aa\u529b\u5f97\u5230\u4e86\u5e7f\u6cdb\u652f\u6301\uff0c\u4f46\u4ecd\u6709\u4e00\u90e8\u5206\u76d1\u89c6\u5185\u5bb9\u8ba9\u8bb8\u591a\u4eba\u5728\u5c06\u5176\u4ea4\u7ed9\u7b97\u6cd5\u65f6\u4f1a\u611f\u5230\u4e0d\u8212\u670d\uff0c\u4e00\u4e9b\u5b89\u5168\u4e13\u5bb6\u547c\u5401\u5728 Apple \u5411\u7528\u6237\u63a8\u51fa\u8be5\u6280\u672f\u4e4b\u524d\u8fdb\u884c\u66f4\u591a\u7684\u516c\u5f00\u8ba8\u8bba\u3002\u4e00\u4e2a\u5927\u95ee\u9898\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u800c\u4e0d\u662f\u66f4\u65e9\u3002\u82f9\u679c\u8868\u793a\uff0c\u5176\u9690\u79c1\u4fdd\u62a4 CSAM \u68c0\u6d4b\u76f4\u5230\u73b0\u5728\u624d\u5b58\u5728\u3002\u4f46\u82f9\u679c\u7b49\u516c\u53f8\u4e5f\u9762\u4e34\u7740\u6765\u81ea\u7f8e\u56fd\u653f\u5e9c\u53ca\u5176\u76df\u53cb\u7684\u5de8\u5927\u538b\u529b\uff0c\u8981\u6c42\u5176\u524a\u5f31\u6216\u540e\u95e8\u7528\u4e8e\u4fdd\u62a4\u7528\u6237\u6570\u636e\u7684\u52a0\u5bc6\uff0c\u4ee5\u5141\u8bb8\u6267\u6cd5\u90e8\u95e8\u8c03\u67e5\u4e25\u91cd\u72af\u7f6a\u3002\u79d1\u6280\u5de8\u5934\u62d2\u7edd\u4e3a\u4ed6\u4eec\u7684\u7cfb\u7edf\u8bbe\u7f6e\u540e\u95e8\u7a0b\u5e8f\uff0c\u4f46\u5728\u8fdb\u4e00\u6b65\u963b\u6b62\u653f\u5e9c\u8bbf\u95ee\u7684\u52aa\u529b\u4e2d\u9762\u4e34\u963b\u529b\u3002\u5c3d\u7ba1\u5b58\u50a8\u5728 iCloud \u4e2d\u7684\u6570\u636e\u4ee5\u4e00\u79cd\u8fde\u82f9\u679c\u90fd\u65e0\u6cd5\u8bbf\u95ee\u7684\u65b9\u5f0f\u8fdb\u884c\u52a0\u5bc6\uff0c\u4f46\u8def\u900f\u793e\u53bb\u5e74\u62a5\u9053\u79f0\uff0c\u5728 FBI \u62b1\u6028\u8fd9\u4f1a\u635f\u5bb3\u8c03\u67e5\u540e\uff0c\u82f9\u679c\u653e\u5f03\u4e86\u5c06\u7528\u6237\u7684\u5b8c\u6574\u624b\u673a\u5907\u4efd\u52a0\u5bc6\u5230 iCloud \u7684\u8ba1\u5212\u3002\u672a\u7ecf\u516c\u5f00\u8ba8\u8bba\u7684\u6709\u5173 Apple \u65b0 CSAM \u68c0\u6d4b\u5de5\u5177\u7684\u6d88\u606f\u4e5f\u5f15\u53d1\u4e86\u4eba\u4eec\u7684\u62c5\u5fe7\uff0c\u5373\u8be5\u6280\u672f\u53ef\u80fd\u4f1a\u88ab\u6ee5\u7528\uff0c\u5411\u53d7\u5bb3\u8005\u53d1\u9001\u8650\u5f85\u513f\u7ae5\u56fe\u50cf\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u4ed6\u4eec\u7684\u5e10\u6237\u88ab\u6807\u8bb0\u548c\u5173\u95ed\uff0c\u4f46 Apple \u6de1\u5316\u4e86\u8fd9\u4e9b\u62c5\u5fe7\u5e76\u8868\u793a\u8fdb\u884c\u4eba\u5de5\u5ba1\u67e5\u5c06\u5ba1\u67e5\u53ef\u80fd\u6ee5\u7528\u7684\u8bc1\u636e\u3002\n\u82f9\u679c\u8868\u793a\uff0cNeuralHash \u5c06\u9996\u5148\u5728\u7f8e\u56fd\u63a8\u51fa\uff0c\u4f46\u6ca1\u6709\u900f\u9732\u662f\u5426\u6216\u4f55\u65f6\u5728\u56fd\u9645\u4e0a\u63a8\u51fa\u3002\u76f4\u5230\u6700\u8fd1\uff0c\u5728\u8fd9\u79cd\u505a\u6cd5\u88ab\u65e0\u610f\u4e2d\u7981\u6b62\u540e\uff0c\u50cf Facebook \u8fd9\u6837\u7684\u516c\u53f8\u88ab\u8feb\u5728\u6574\u4e2a\u96c6\u56e2\u5173\u95ed\u5176\u8650\u5f85\u513f\u7ae5\u68c0\u6d4b\u5de5\u5177\u3002 Apple \u8868\u793a\uff0c\u8be5\u529f\u80fd\u5728\u6280\u672f\u4e0a\u662f\u53ef\u9009\u7684\uff0c\u56e0\u4e3a\u60a8\u4e0d\u5fc5\u4f7f\u7528 iCloud \u7167\u7247\uff0c\u4f46\u5982\u679c\u7528\u6237\u4f7f\u7528\uff0c\u5219\u5c06\u662f\u5fc5\u9700\u7684\u3002\u6bd5\u7adf\uff0c\u60a8\u7684\u8bbe\u5907\u5c5e\u4e8e\u60a8\uff0c\u4f46 Apple \u7684\u4e91\u4e0d\u5c5e\u4e8e\u60a8\u3002", "note_en": "Apple told TechCrunch that the detection of child sexual abuse material (CSAM) is one of several new features aimed at better protecting the children who use its services from online harm, including filters to block potentially sexually explicit photos sent and received through a child\u2019s iMessage account. Another feature will intervene when a user tries to search for CSAM-related terms through Siri and Search.\n Most cloud services \u2014 Dropbox, Google, and Microsoft to name a few \u2014 already scan user files for content that might violate their terms of service or be potentially illegal, like CSAM. But Apple has long resisted scanning users\u2019 files in the cloud by giving users the option to encrypt their data before it ever reaches Apple\u2019s iCloud servers.\n Apple said its new CSAM detection technology \u2014 NeuralHash \u2014 instead works on a user\u2019s device, and can identify if a user uploads known child abuse imagery to iCloud without decrypting the images until a threshold is met and a sequence of checks to verify the content are cleared.\n News of Apple\u2019s effort leaked Wednesday when Matthew Green, a cryptography professor at Johns Hopkins University, revealed the existence of the new technology in  a series of tweets. The news was met with some resistance from some security experts and privacy advocates, but also users who are accustomed to Apple\u2019s approach to security and privacy that most other companies don\u2019t have.\n Apple is trying to calm fears by baking in privacy through multiple layers of encryption, fashioned in a way that requires multiple steps before it ever makes it into the hands of Apple\u2019s final manual review.\n NeuralHash will  land in iOS 15 and  macOS Monterey, slated to be released in the next month or two, and works by converting the photos on a user\u2019s iPhone or Mac into a unique string of letters and numbers, known as a hash. Any time you modify an image slightly, it changes the hash and can prevent matching. Apple says NeuralHash tries to ensure that identical and visually similar images \u2014 such as cropped or edited images \u2014 result in the same hash.\n Before an image is uploaded to iCloud Photos, those hashes are matched on the device against a database of known hashes of child abuse imagery, provided by child protection organizations like the National Center for Missing &amp; Exploited Children (NCMEC) and others. NeuralHash uses a cryptographic technique called private set intersection to detect a hash match without revealing what the image is or alerting the user.\n The results are uploaded to Apple but cannot be read on their own. Apple uses another cryptographic principle called threshold secret sharing that allows it only to decrypt the contents if a user crosses a threshold of known child abuse imagery in their iCloud Photos. Apple would not say what that threshold was, but said \u2014 for example \u2014 that if a secret is split into a thousand pieces and the threshold is ten images of child abuse content, the secret can be reconstructed from any of those ten images.\n  It\u2019s at that point Apple can decrypt the matching images, manually verify the contents, disable a user\u2019s account and report the imagery to NCMEC, which is then passed to law enforcement. Apple says this process is more privacy mindful than scanning files in the cloud as NeuralHash only searches for known and not new child abuse imagery. Apple said that there is a one in one trillion chance of a false positive, but there is an appeals process in place in the event an account is mistakenly flagged.\n Apple has  published technical details on its  website about how NeuralHash works, which was reviewed by cryptography experts.\n But despite the wide support of efforts to combat child sexual abuse, there is still a component of surveillance that many would feel uncomfortable handing over to an algorithm, and  some security experts are calling for more public discussion before Apple rolls the technology out to users.\n A big question is why now and not sooner. Apple said its privacy-preserving CSAM detection did not exist until now. But companies like Apple have also faced considerable pressure from the U.S. government and its allies  to weaken or backdoor the encryption used to protect their users\u2019 data to allow law enforcement to investigate serious crime.\n Tech giants have refused efforts to backdoor their systems, but have faced resistance against efforts to further shut out government access. Although data stored in iCloud is encrypted in a way that even Apple cannot access it, Reuters reported  last year that Apple dropped a plan for encrypting users\u2019 full phone backups to iCloud after the FBI complained that it would harm investigations.\n The news about Apple\u2019s new CSAM detection tool, without public discussion, also sparked concerns that the technology could be abused to flood victims with child abuse imagery that could result in their account getting flagged and shuttered, but Apple downplayed the concerns and said a manual review would review the evidence for possible misuse.\n Apple said NeuralHash will roll out in the U.S. at first, but would not say if, or when, it would be rolled out internationally. Until recently, companies like Facebook were forced to  switch off its child abuse detection tools across the bloc after the practice was inadvertently banned. Apple said the feature is technically optional in that you don\u2019t have to use iCloud Photos, but will be a requirement if users do. After all, your device belongs to you but Apple\u2019s cloud does not.", "posttime": "2021-08-06 03:45:22", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,ios,\u82f9\u679c,apple,\u8868\u793a", "title": "\u82f9\u679c\u8868\u793a\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u5185\uff0c\u5b83\u5c06\u5f00\u59cb\u5728\u7f8e\u56fd\u7684 iOS 15 \u548c macOS Monterey \u8bbe\u5907\u4e0a\u626b\u63cf\u7167\u7247\uff0c\u4ee5\u67e5\u627e\u5df2\u77e5\u7684\u8650\u5f85\u513f\u7ae5\u56fe\u50cf", "title_en": "Apple says in the next couple of months it will begin scanning photos on iOS 15 and macOS Monterey devices in the US for known child abuse images", "transed": 1, "url": "https://techcrunch.com/2021/08/05/apple-icloud-photos-scanning/", "via": "", "real_tags": ["\u7f8e\u56fd", "ios", "\u82f9\u679c", "apple", "\u8868\u793a"]}, {"category": "", "categoryclass": "", "imagename": "2c3a52cf00544a84e078183be0221095.png", "infoid": 1071612, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea 2008 \u5e74\u4ee5\u6765\uff0c\u6211\u4eec\u4e0d\u518d\u4f7f\u7528\u65f6\u949f\u6b65\u957f\u5bf9\u6211\u4eec\u7684\u670d\u52a1\u5668\u5e94\u7528\u95f0\u79d2\uff0c\u800c\u662f\u5728\u6bcf\u6b21\u95f0\u524d\u540e\u7684\u51e0\u4e2a\u5c0f\u65f6\u5185\u201c\u6d82\u62b9\u201d\u989d\u5916\u7684\u79d2\u3002\u95f0\u6d82\u62b9\u9002\u7528\u4e8e\u6240\u6709 Google \u670d\u52a1\uff0c\u5305\u62ec\u6211\u4eec\u6240\u6709\u7684 API\u3002\u8bb8\u591a\u7ec4\u7ec7\u4f7f\u7528\u6d82\u7247\u65f6\u949f\uff0c\u5982\u679c\u6d82\u7247\u76f8\u540c\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002\u6bd5\u7adf\uff0c\u949f\u8868\u7684\u76ee\u7684\u662f\u5728\u4e0d\u540c\u7684\u5730\u65b9\u8bfb\u53d6\u76f8\u540c\u7684\u65f6\u95f4\u3002\u6211\u4eec\u9f13\u52b1\u4efb\u4f55\u6d82\u62b9\u95f0\u79d2\u7684\u4eba\u5728 UTC \u65f6\u95f4\u4ece\u4e2d\u5348\u5230\u4e2d\u5348\u4f7f\u7528 24 \u5c0f\u65f6\u7ebf\u6027\u6d82\u62b9\u3002\u8fd9\u79cd\u6d82\u62b9\u7ed3\u5408\u4e86\u7ecf\u9a8c\u8868\u660e\u9002\u7528\u4e8e\u8bb8\u591a\u5206\u5e03\u5f0f\u8ba1\u7b97\u5e94\u7528\u7a0b\u5e8f\u7684\u7279\u6027\uff1a\u6301\u7eed\u65f6\u95f4\u957f\uff0c\u9891\u7387\u53d8\u5316\u5f88\u5c0f\u3002\u6d82\u7247\u7684\u53d8\u5316\u7ea6\u4e3a 11.6 ppm\u3002\u8fd9\u5728\u5927\u591a\u6570\u673a\u5668\u7684\u77f3\u82f1\u632f\u8361\u5668\u7684\u5236\u9020\u548c\u70ed\u8bef\u5dee\u8303\u56f4\u5185\uff0c\u5e76\u4e14\u8fdc\u4f4e\u4e8e NTP \u7684 500 ppm \u6700\u5927\u538b\u6446\u7387\u3002\u5c06\u62d6\u5c3e\u7f6e\u4e8e\u95f0\u79d2\u7684\u4e2d\u5fc3\uff0c\u800c\u4e0d\u662f\u8ba9\u5b83\u5728\u95f0\u79d2\u5f00\u59cb\u6216\u7ed3\u675f\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4e86\u6700\u5927\u504f\u79fb\u3002\u4e0e\u4f59\u5f26\u62d6\u5c3e\u76f8\u6bd4\uff0c\u7ebf\u6027\u62d6\u5c3e\u66f4\u7b80\u5355\uff0c\u66f4\u5bb9\u6613\u8ba1\u7b97\uff0c\u5e76\u4e14\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4e86\u6700\u5927\u9891\u7387\u53d8\u5316\u3002\n24 \u5c0f\u65f6\u6301\u7eed\u65f6\u95f4\u5df2\u88ab\u5176\u4ed6\u5b9e\u65bd\u6d82\u62b9\u7684\u4eba\u5e7f\u6cdb\u91c7\u7528\u3002\u6211\u4eec\u4ee5\u524d\u4f7f\u7528 20 \u5c0f\u65f6\u6d82\u62b9\u6301\u7eed\u65f6\u95f4\uff0c\u4f46\u66f4\u6539\u4e3a\u4e0e\u66f4\u6d41\u884c\u7684\u4e2d\u5348\u5230\u4e2d\u5348\u7684\u95f4\u9694\u4fdd\u6301\u4e00\u81f4\u3002\u6211\u4eec\u8ba1\u5212\u5728\u672a\u6765\u7684\u6240\u6709\u95f0\u79d2\u4e2d\u4f7f\u7528\u6b64\u6d82\u62b9\u3002\u4e9a\u9a6c\u900a\u4f7f\u7528\u8fd9\u79cd\u6d82\u62b9 AWS\u3002\u5728\u60a8\u7684\u7cfb\u7edf\u4e2d\u4f7f\u7528\u5b83\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5b83\u4eec\u914d\u7f6e\u4e3a\u4f7f\u7528 Google \u516c\u5171 NTP\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u5728 2021 \u5e74 12 \u6708\u672b\u6709\u4e00\u4e2a\u95f0\u79d2\uff0c\u5c3d\u7ba1\u5b9e\u9645\u65f6\u95f4\u8868\u5c1a\u672a\u516c\u5e03\u3002\u62d6\u5c3e\u65f6\u95f4\u4ece 2021-12-31 12:00:00UTC \u5f00\u59cb\uff0c\u4e00\u76f4\u6301\u7eed\u5230 2022-01-01 12:00:00UTC\u3002\u5728\u6b64\u671f\u95f4\u4e4b\u524d\u548c\u4e4b\u540e\uff0c\u62d6\u5c3e\u65f6\u949f\u548c\u62a5\u65f6\u670d\u52a1\u4e0e\u5e94\u7528\u95f0\u79d2\u7684\u65f6\u949f\u4e00\u81f4\u3002\u5728\u6d82\u7247\u671f\u95f4\uff0c\u65f6\u949f\u7684\u8fd0\u884c\u901f\u5ea6\u6bd4\u5e73\u65f6\u7a0d\u6162\u3002\u62d6\u5c3e\u65f6\u6807\u4e2d\u7684\u6bcf\u4e00\u79d2\u65f6\u95f4\u6bd4\u5730\u7403\u65f6\u95f4\u4e2d\u5b9e\u73b0\u7684 SI \u79d2\u957f\u7ea6 11.6 \u5fae\u79d2\u3002\u5728\u95f0\u79d2\u5f00\u59cb\u65f6\uff0c\u62d6\u5c3e\u65f6\u95f4\u7565\u4f4e\u4e8e UTC \u7684 0.5 \u79d2\u3002 UTC \u63d2\u5165\u4e00\u4e2a\u989d\u5916\u7684\u79d2\uff0c\u800c\u6d82\u62b9\u7684\u65f6\u95f4\u7ee7\u7eed\u4e0d\u95f4\u65ad\u3002\u5f53\u95f0\u79d2\u7ed3\u675f\u65f6\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u62d6\u5c3e\u65f6\u95f4\u6bd4 UTC \u5feb\u4e0d\u5230 0.5 \u79d2\u3002\u901a\u8fc7\u7ee7\u7eed\u4ee5\u76f8\u540c\u7684\u51cf\u6162\u901f\u5ea6\u8fd0\u884c\u65f6\u949f\uff0c\u5728\u63a5\u4e0b\u6765\u7684 12 \u5c0f\u65f6\u5185\u6301\u7eed\u7684\u62d6\u5c3e\u4f1a\u51cf\u5c11\u8fd9\u79cd\u504f\u79fb\u3002\u5230 12:00:00\uff0csmeared \u548cleapingclocks \u518d\u6b21\u4e00\u81f4\u3002\n\u5728\u6d82\u62b9\u7684 86,401 SI \u79d2\u5185\uff0c86,400 \u6307\u793a\u79d2\u4e2d\u7684\u62c9\u4f38\u52a0\u8d77\u6765\u7b49\u4e8e\u8df3\u8dc3\u6240\u9700\u7684\u989d\u5916 SI \u79d2\u3002\u4ece\u4e2d\u5348\u5230\u4e2d\u5348 86,399 SI \u79d2\u7684\u52a0\u901f\u65f6\u949f\u4f1a\u62b9\u6389\u8d1f\u95f0\u79d2\uff0c\u5982\u679c\u771f\u7684\u53d1\u751f\u7684\u8bdd\u3002\u8c37\u6b4c 2008 \u5e74\u7684\u6d82\u7247\u662f\u98de\u8dc3\u524d 20 \u5c0f\u65f6\u7684\u4f59\u5f26\u6d82\u7247\uff0804:00:00 \u5230 00:00:00\uff09\u3002\u8fd9\u662f\u6211\u4eec\u552f\u4e00\u4e00\u6b21\u4f7f\u7528\u4f59\u5f26\u6d82\u62b9\u3002\u8c37\u6b4c\u7684\u7b2c\u4e8c\u6b21\u8df3\u8dc3\u662f\u4ee5\u8df3\u8dc3\u4e3a\u4e2d\u5fc3\u7684 20 \u5c0f\u65f6\u7ebf\u6027\u6d82\u62b9\u3002\u6211\u4eec\u5728 2012\u30012015 \u548c 2016 \u5e74\u4f7f\u7528\u4e86\u5b83\u3002\u6211\u4eec\u7684\u5f00\u6e90 unsmear \u5e93\u5c06\u5728\u6d82\u62b9\u65f6\u95f4\u548c\u672a\u6d82\u62b9 TAI \u6216 GPST \u4e4b\u95f4\u7684\u4efb\u4e00\u65b9\u5411\u8fdb\u884c\u8f6c\u6362\u3002", "note_en": "Since 2008, instead of applying leap seconds to our servers using clock steps,we have &#34;smeared&#34; the extra second across the hours before and after each leap.The leap smear applies to all Google services, including all our APIs.\n  Many organizations use smeared clocks, and it would be helpful if the smearswere the same. After all, the purpose of clocks is to read the same time indifferent places.\n We encourage anyone smearing leap seconds to use a  24-hour linear smear fromnoon to noon UTC.\n This smear combines the features that experience has shown to work well for manydistributed computing applications:\n The long duration keeps the frequency change small. The change for the smearis about 11.6\u202fppm. This is within the manufacturing and thermal errorsof most machines&#39; quartz oscillators, and well under NTP&#39;s 500 ppm maximumslew rate.\n Centering the smear on the leap second, instead of having it begin or end atthe leap second, minimizes the maximum offset.\n Compared to a cosine smear, the linear smear is simpler, easier tocalculate, and minimizes the maximum frequency change.\n The 24-hour duration has been widely adopted by others implementing smears.We previously used a 20-hour smear duration, but changed to align with thismore popular noon-to-noon interval.\n We plan to use this smear for all future leap seconds. Amazon uses this smearin AWS. One way to use it in your systems is to configure them to use Google Public NTP.\n  In this example, we will suppose there is a leap second at the end of December2021, although the actual schedule has not yet been announced.\n The smear period starts at  2021-12-31 12:00:00UTCand continues through  2022-01-01 12:00:00UTC.Before and after this period, smeared clocks and time service agree with clocksthat apply leap seconds.\n During the smear, clocks run slightly slower than usual. Each second of time inthe smeared timescale is about 11.6\u202f\u03bcs longer than an  SIsecond as realizedin  Terrestrial Time.\n At the beginning of the leap second, smeared time is just under 0.5\u202fsbehind UTC. UTC inserts an additional second, while smeared time continuesuninterrupted. This causes smeared time to become just under 0.5\u202fs aheadof UTC when the leap second ends.\n By continuing to run the clocks at the same slowed rate, the ongoing smearreduces this offset over the next twelve hours. By 12:00:00, smeared and leapingclocks agree again.\n  Over the 86,401 SI seconds of the smear, the stretch in the 86,400 indicatedseconds adds up to the one additional SI second required by the leap.\n A negative leap second, if one were ever to occur, would be smeared by speedingup clocks over the 86,399 SI seconds from noon to noon.\n   Google&#39;s 2008smearwas a 20-hour cosine smear before the leap (04:00:00 to 00:00:00). This wasthe only time we used a cosine smear.\n Google&#39;s second leapsmearwas a 20-hour linear smear centered on the leap. We used this in 2012, 2015,and 2016.\n  Our open source  unsmear library willconvert in either direction between smeared time and unsmeared TAI or GPST.", "posttime": "2021-08-06 03:44:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u95f0\u79d2,leap,\u6d82\u62b9", "title": "\u95f0\u79d2\u6d82\u62b9", "title_en": "Leap Second Smear", "transed": 1, "url": "https://developers.google.com/time/smear", "via": "", "real_tags": ["\u95f0\u79d2", "leap", "\u6d82\u62b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071611, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u8bc1\u660e\u6709\u5173 Lisp\uff08\u7279\u522b\u662f Common Lisp\uff09\u7684\u5b9e\u7528\u6027\u7684\u4e92\u8054\u7f51\u9519\u8bef\uff0c\u6211\u8bd5\u56fe\u8ba9\u7b80\u5355\uff08\u4f46\u73b0\u5b9e\uff09\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\uff0c\u8fd9\u662f\u4e00\u79cd\u8352\u8c2c\u7684\u5c1d\u8bd5\u3002\u56db\u5929\u540e\uff0cABCL \u7684\u8865\u4e01\u6211\u5f97\u5230\u4e86\u4e00\u4e9b\u5de5\u4f5c\u3002 (let* ((port 8080) (server (make-server 8080))) (route server &quot;GET&quot; &quot;/&quot; (lambda (ctx) &quot;My index!&quot;)) (route server &quot;GET&quot; &quot;/search&quot; ( lambda (ctx) (\u6a21\u677f &quot;search.tmpl&quot; &#39;((&quot;version&quot; &quot;0.1.0&quot;) (&quot;results&quot; (&quot;cat&quot; &quot;dog&quot; &quot;mouse&quot;))))))) &lt;html&gt; &lt;title&gt;\u7248\u672c {{ version }}&lt;/title&gt; {% for item in results %} &lt;h2&gt;{{ item }}&lt;/h2&gt; {% endfor %}&lt;/html&gt; Armed Bear Common Lisp (ABCL) \u662f\u552f\u4e00\u7684 Common Lispimplementation \u6211\u77e5\u9053\u5b83\u53ef\u4ee5\u8fde\u63a5\u5230\u50cf JVM \u6216 CLR \u8fd9\u6837\u7684\u4e3b\u8981\u5e93\u751f\u6001\u7cfb\u7edf\u3002\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u8fd9\u5bf9\u4e8e\u90a3\u4e9b\u60f3\u8981\u751f\u6001\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u548c\u8d44\u6e90\u7684\u4eba\u6765\u8bf4\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u5efa\u8bae\uff0c\u5373\u4f7f\u4ed6\u4eec\u4e0d\u4f7f\u7528\u5176\u65d7\u8230\u8bed\u8a00\u3002\u50cf Micronaut\uff08\u548c Jersey\uff09\u8fd9\u6837\u7684\u5e93\u7684\u95ee\u9898\u5728\u4e8e\u5b83\u4eec\u505a\u4e86\u5927\u91cf\u7684\u52a8\u6001\u68c0\u67e5\u6765\u5f04\u6e05\u695a\u5982\u4f55\u6ce8\u518c\u63a7\u5236\u5668\u7b49\u7b49\u3002\u8fd9\u5bf9\u4e8e\u4f7f\u7528 Java \u5e93\u7684\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\u5f53\u7136\u5f88\u65b9\u4fbf\u3002\u4f46\u662f\uff0c\u5f53\u60a8\u5c1d\u8bd5\u901a\u8fc7\u53e6\u4e00\u79cd\u8bed\u8a00\u7684\u5916\u90e8\u51fd\u6570\u63a5\u53e3 (FFI) \u4f7f\u7528\u5e93\u65f6\uff0c\u8fd9\u5c06\u6210\u4e3a\u4e00\u79cd\u6298\u78e8\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6846\u67b6\u626b\u63cf\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u4ee5\u83b7\u53d6 @GET \u6ce8\u91ca\u3002\u53e6\u4e00\u65b9\u9762\uff0cSpark \u5bf9\u5f15\u5165 Websocket \u5e93\u6709\u4e00\u4e2a\u770b\u4f3c\u4e25\u683c\u7684\u8981\u6c42\uff0c\u8fd9\u5728\u914d\u7f6e\u8fc7\u7a0b\u4e2d\u5bfc\u81f4\u4e86\u4e00\u4e9b\u95ee\u9898\u3002\u6240\u4ee5\u6211\u6700\u7ec8\u9009\u62e9\u4e86 Jooby \u548c Netty\uff08\u4f5c\u4e3a\u5e95\u5c42\u670d\u52a1\u5668\uff09\u3002\u6700\u540e\uff0c\u6211\u67e5\u770b\u4e86\u4e00\u4e9b\u7c7b\u4f3c Jinja \u7684\u6a21\u677f\u5e93\u5e76\u9009\u62e9\u4e86 Pebble\uff0c\u56e0\u4e3a Jinjava \u4e0d\u4f1a\u52a0\u8f7d\u8868\u5355\u3002\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;project&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.github.eatonphil&lt;/groupId&gt; &lt;artifactId&gt;abcl-rest-api -hello-world&lt;/artifactId&gt; &lt;version&gt;1&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;io.jooby&lt;/groupId&gt; &lt;artifactId&gt;jooby&lt;/artifactId&gt; &lt;version&gt;2.10.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.jooby&lt;/groupId&gt; &lt;artifactId&gt;jooby-netty&lt;/artifactId&gt; &lt;version&gt;2.10.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.pebbletemplates &lt;/groupId&gt; &lt;artifactId&gt;pebble&lt;/artifactId&gt; &lt;version&gt;3.1.5&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; ABCL \u6709\u4e00\u4e2a\u540d\u4e3a abcl-asdf \u7684\u5305\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u60a8\u901a\u8fc7 Maven \u548c\u4f60\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u6211\u4eec\u5c06\u5bfc\u5165\u5b83\u548c\u5b83\u6240\u4f9d\u8d56\u7684\u5305 (abcl-contrib)\uff1a\u8981\u4ece Maven \u5bfc\u5165\u7279\u5b9a\u5305\uff0c\u60a8\u53ef\u4ee5\u8c03\u7528 abcl-asdf:resolve \u5e76\u4f7f\u7528\u5305\u542b Maven \u5305\u7ec4 ID \u548c\u5de5\u4ef6 ID \u7684\u5192\u53f7\u5206\u9694\u5b57\u7b26\u4e32\u8c03\u7528 abcl-asdf:resolve\u3002\u7136\u540e\u5c06\u8be5\u7ed3\u679c\u4f20\u9012\u7ed9 abcl-asdf:as-classpath \u5e76\u5c06\u8be5\u7ed3\u679c\u4f20\u9012\u7ed9 java:add-to-classpath\u3002\u73b0\u5728\u60a8\u53ef\u4ee5\u5728\u8fd9\u4e9b\u5305\u4e2d\u8c03\u7528\u51fd\u6570\u3002\u5982\u679c\u60a8\u53ea\u60f3\u4f7f\u7528\u5185\u7f6e\u51fd\u6570\u8c03\u7528 Java \u65b9\u6cd5\uff0c\u5b83\u770b\u8d77\u6765\u50cf (jcall &quot;method&quot;&quot;com.organization.package.Class&quot; object arg1 arg2 ... argN)\u3002\u5982\u679c\u8981\u8c03\u7528\u9759\u6001 Java \u65b9\u6cd5\uff0c\u8bf7\u4f7f\u7528 (jstatic...) \u800c\u4e0d\u662f (jcall ...)\u3002\u4f3c\u4e4e ABCL \u4f1a\u81ea\u52a8\u5c06\u7b80\u5355\u7c7b\u578b\u4ece theirLisp \u8868\u793a\u5f62\u5f0f\u8f6c\u6362\u4e3a Java\uff0c\u4f46\u5b83\u4e0d\u4f1a\u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u6570\u7ec4\u3002\u5982\u679c Java \u51fd\u6570\u9700\u8981\u6570\u7ec4\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u7c7b\u4f3c (java:jnew-array-from-list&quot;java.lang.String&quot; my-string-list) \u4e4b\u7c7b\u7684\u51fd\u6570\u660e\u786e\u5730\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4f7f\u7528\u5185\u7f6e Java FFI \u65f6\uff0c\u60a8\u59cb\u7ec8\u9700\u8981\u5bf9 java.lang.Objectfor Object \u6216 java.util.Arrayfor Array \u7b49\u7c7b\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u540d\u79f0\u3002\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\uff08\u9700\u8981 :jss\uff09\u8bbf\u95ee\u7528\u4e8e\u8fdb\u884c Java \u8c03\u7528\u7684\u66f4\u7b80\u5355\u7684\u8bed\u6cd5\u3002\u65b9\u6cd5\u8c03\u7528\u770b\u8d77\u6765\u50cf (#&quot;method&quot; object arg1 arg2 ... argN)\u3002\u521b\u5efa\u5bf9\u8c61\u7684\u65b0\u5b9e\u4f8b\u6b63\u5728\u8c03\u7528 (jss:jnew&#39;className)\u3002\u5f53\u60a8\u4f7f\u7528 JSS \u65f6\uff0c\u60a8\u4e0d\u9700\u8981\u5b8c\u5168\u9650\u5b9a\u7c7b\u540d\uff0c\u9664\u975e\u6709\u591a\u4e2a\u7c7b\u540c\u540d\u3002\u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Jooby \u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 (jss:jnew &#39;Jooby)\u3002\u53ea\u8981\u5728\u7c7b\u8def\u5f84\u4e2d\u53ef\u4ee5\u627e\u5230\u8be5\u7c7b\uff0cJSS \u5c31\u4f1a\u89e3\u6790\u5b83\u3002\n\u771f\u6b63\u7684\u4ee3\u7801\u5c06\u7c7b\u4f3c\u4e8e\u672c\u6587\u9876\u90e8\u7684\u4f2a\u4ee3\u7801\u3002\u6211\u4eec\u5c06\u5254\u9664\u7279\u5b9a\u4e8e\u5e93\u7684\u5305\u88c5\u5668\uff0c\u7528\u4e8e\u5448\u73b0\u6a21\u677f\u548c\u6ce8\u518c\u8def\u7531\u3002 * \u670d\u52a1\u5668\u670d\u52a1\u5668 = new Netty(); // \u6216 Jetty \u6216 Utow * * App app = new App(); * * server.start(app); * * ... * * server.stop(); Netty \u6765\u81ea Maven \u4e0a io.jooby \u7ec4\u4e2d\u7684 jooby-netty \u5de5\u4ef6\u3002\u800c App \u662f\u6269\u5c55 io.jooby.Jooby \u7684\u5bf9\u8c61\u3002\u7531\u4e8e\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 OOP \u8bed\u8a00\uff0c\u4f46\u6211\u4eec\u5c06\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u7c7b\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 io.jooby.Jooby \u5b9e\u4f8b\u5e76\u76f4\u63a5\u5411\u5176\u6dfb\u52a0\u8def\u7531\u3002 (defun template (filename context) &quot;&quot;)(defun route (app method path handler) nil)(defun register-endpoints (app) (route app &quot;GET&quot; &quot;/&quot; (lambda (ctx) &quot;An index!&quot;)) (route app &quot;GET&quot; &quot;/search&quot; (lambda (ctx) (template &quot;search.tmpl&quot; `((&quot;version&quot; &quot;1.0.0&quot;) (&quot;results&quot; ,(java:jarray-from-list &#39;(&quot;) cat&quot; &quot;dog&quot; &quot;mouse&quot;))))))) (route app &quot;GET&quot; &quot;/hello-world&quot; (lambda (ctx) &quot;Hello world!&quot;)))(let* ((port 8080)) (server (jss:new &#39;Netty)) (app (jss:new &#39;Jooby))) (register-endpoints app) (#&quot;setOptions&quot; server (#&quot;setPort&quot; (jss:new &#39;ServerOptions) port)) (#&quot;start &quot; server app) (#&quot;join&quot; server)) \u6211\u4eec\u518d\u6b21\u4e0d\u4f1a\u50cf Jooby \u6587\u6863\u5efa\u8bae\u7684\u90a3\u6837\u4f7f\u7528\u82b1\u54e8\u7684 Java \u8bed\u6cd5\uff08\u5982\u679c\u4f60\u4f7f\u7528 Java \u5f88\u597d\uff09\u3002\u518d\u6b21\u641c\u7d22 Jooby \u6e90\u4ee3\u7801\u770b\u8d77\u6765\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u65b9\u6cd5\u5b57\u7b26\u4e32\u3001\u8def\u5f84\u5b57\u7b26\u4e32\u548c\u5b9e\u73b0 io.jooby.Route.Handler \u63a5\u53e3\u7684\u5bf9\u8c61\u5b9e\u4f8b\u8c03\u7528 Jooby \u7c7b\u4e0a\u7684\u8def\u7531\u3002\u7531\u4e8e\u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u521b\u5efa\u5b83\u7684\u5b9e\u4f8b\u6765\u518d\u6b21\u6b3a\u9a97\u6211\u4eec\u5fc5\u987b\u5728 Lisp \u4e2d\u5b9e\u9645\u521b\u5efa\u4e00\u4e2a\u6269\u5c55\u5b83\u7684\u65b0\u7c7b\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u65b9\u6cd5\u6765\u6ee1\u8db3\u8fd9\u4e2a\u63a5\u53e3\uff0capply\u3002\u5b83\u63a5\u53d7\u4e00\u4e2a io.jooby.Context \u5bf9\u8c61\u5e76\u8fd4\u56de\u4e00\u4e2a java.lang.Object\u3002\u7136\u540e\uff0c\u6846\u67b6\u4f1a\u8fdb\u884c\u81ea\u7701\uff0c\u4ee5\u786e\u5b9a\u5bf9\u8c61\u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u662f\u5426\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u4ee5\u4f5c\u4e3a HTTP \u54cd\u5e94\u6b63\u6587\u8fd4\u56de\u3002\u8981\u5728 ABCL \u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\uff0c\u6211\u4eec\u8c03\u7528 (java:jnew-runtime-class&quot;classname&quot; :interfaces &#39;(&quot;an interface name&quot;) :methods &#39;((&quot;methodname 1&quot; &quot;return type&quot; (&quot;first parameter type&quot; . ..) (lambda (this arg1 ...) body)))):\n(defun route (app method path handler) (#&quot;route&quot; app method path (jss:new (java:jnew-runtime-class (substitute #\\$ #\\/ (substitute #\\$ #\\- path)) :interfaces &#39;(&quot;io.jooby.Route$Handler&quot;) :methods `( (&quot;apply&quot; &quot;java.lang.Object&quot; (&quot;io.jooby.Context&quot;) (lambda (this ctx) (funcall ,handler ctx))) ))))) \u9700\u8981\u6ce8\u610f\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u5728\u6587\u4ef6\u4e2d\u5f15\u7528\u5b50\u7c7b\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 io.jooby.Route$Handler \u8bed\u6cd5\u6765\u5904\u7406\u5b83\uff0c\u800c\u4e0d\u662f\u50cf\u60a8\u5728 Java \u4e2d\u5f15\u7528\u7684 io.jooby.Route.Handler \u90a3\u6837\u3002\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0cABCLthinks Route \u662f\u4e00\u4e2a\u5305\uff0c\u800c\u5b9e\u9645\u4e0a\u5b83\u53ea\u662f\u4e00\u4e2a\u7c7b\u3002\u5982\u679c\u4f60\u73b0\u5728\u7528 abcl --load main.lisp \u8fd0\u884c\u5b83\u3002\u5b83\u4f1a\u4e00\u76f4\u5de5\u4f5c\uff0c\u76f4\u5230\u60a8\u5230\u8fbe\u7ec8\u70b9\u3002\u95ee\u9898\u662f Jooby \u5982\u4f55\u8bd5\u56fe\u627e\u51fa\u8fd4\u56de\u5bf9\u8c61\u7684\u771f\u5b9e\u7c7b\u578b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c1d\u8bd5\u6253\u5f00\u5e76\u89e3\u6790\u6211\u4eec\u5e94\u7528\u7a0b\u5e8f\u7684\uff08Java\uff09\u6e90\u4ee3\u7801\uff0c\u4ee5\u5c1d\u8bd5\u627e\u5230\u6b64\u5e94\u7528\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u4ee3\u7801\u4e0d\u662f Java\u3002\u901a\u8fc7\u53cd\u590d\u8bd5\u9a8cIrealized\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u53e6\u4e00\u4e2aapply\u5b9e\u73b0\u6765\u5411\u6211\u4eec\u7684\u7c7b\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ece\u800c\u6b3a\u9a97Jooby/Java/\u67d0\u4eba\u627e\u51fa\u6b63\u786e\u7684\u8fd4\u56de\u7c7b\u578b\u3002 (defun route (app method path handler) (#&quot;route&quot; app method path (jss:new (java:jnew-runtime-class (substitute #\\$ #\\/ (substitute #\\$ #\\- path)) :interfaces &#39;(&quot;io.jooby.Route$Handler&quot;) :methods `(;; \u9700\u8981\u5b9a\u4e49\u8fd9\u4e2a\u6765\u8ba9 Jooby \u627e\u51fa\u8fd4\u56de\u7c7b\u578b;; \u5426\u5219\u5b83\u4f1a\u5c1d\u8bd5\u8bfb\u53d6\u4e0d\u662f Java \u6587\u4ef6\u7684\u201c\u8fd9\u4e2a\u6587\u4ef6\u201d\uff0c\u6240\u4ee5\u65e0\u6cd5\u89e3\u6790 (&quot;apply&quot; &quot;java.lang.String&quot; (&quot;io.jooby.Context&quot;) (lambda (this ctx) nil)) ;; \u8fd9\u4e2a\u5b9e\u9645\u4e0a\u88ab\u8c03\u7528 (&quot;apply&quot; &quot;java.lang.Object&quot; (&quot;io.jooby.Context&quot;) (lambda (this ctx) (funcall ,handler ctx)))))))) \u4f60\u53ef\u80fd\u60f3\u77e5\u9053\uff0c\u4e3a\u4ec0\u4e48\u4fdd\u7559\u539f\u59cb\u65b9\u6cd5\uff1f\u55ef\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u53cd\u5c04\u8fc7\u7a0b\u4e2d\uff0cABCL \u8bf4\u5728 Handlerinterface \u4e2d\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8fd4\u56de String \u7684\u65b9\u6cd5\u3002\u6211\u60f3\u8fd9\u5f88\u516c\u5e73\u3002\nPebbleEngine engine = new PebbleEngine.Builder().build();PebbleTemplatecompiledTemplate = engine.getTemplate(&quot;home.html&quot;);Map&lt;String, Object&gt; context = new HashMap&lt;&gt;();context.put(&quot;name&quot; , &quot;Mitchell&quot;);Writer writer = new StringWriter();compiledTemplate.evaluate(writer, context);String output = writer.toString(); (defun hashmap (alist) (let ((map (jss:new &#39;HashMap))) (loop for el in alist do (#&quot;put&quot; map (car el) (cadr el))) map))(defun template ( filename context-alist) (let* ((ctx (hashmap context-alist)) (path (java:jstatic &quot;of&quot; &quot;java.nio.file.Path&quot; filename)) (file (#&quot;readString&quot; &#39;java.nio .file.Files path)) (engine (#&quot;build&quot; (jss:new &#39;PebbleEngine$Builder))) (compiledTmpl (#&quot;getTemplate&quot; engine filename)) (writer (jss:new &#39;java.io.StringWriter)) ) (#&quot;evaluate&quot;compiledTmpl writer ctx) (#&quot;toString&quot; writer))) \u4f46\u662f\u5982\u679c\u4f60\u8fd0\u884c\u8fd9\u4e2a abcl --load main.lisp \u5e76\u70b9\u51fb\u8fd9\u4e2a /search \u7aef\u70b9\uff0c\u5b83\u4f1a\u7206\u70b8\u8bf4\u201c\u6ca1\u6709\u8fd9\u6837\u7684\u65b9\u6cd5\u201d\u5b58\u5728\u4e8e\u5bf9 Path.of(filename) \u7684\u8c03\u7528\u3002\u867d\u7136\u6709\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u51fd\u6570\u7684\u4f8b\u5b50\uff0c\u5f53\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u6bd4\u5982 java.util.Arrays.asList(T ...)\uff0c\u5728\u8fd9\u91cc\u4f7f\u7528\u76f8\u540c\u7684\u6280\u672f\u7ee7\u7eed\u5bfc\u81f4\u201c\u6ca1\u6709\u8fd9\u6837\u7684\u65b9\u6cd5\u201d\uff1a\u6700\u7ec8\u6211\u627e\u5230\u4e86\u4e00\u4e2a\u4f8b\u5b50\u6709\u4eba\u5728\u8fd9\u79cd\u51fd\u6570\u8c03\u7528\u4e0a\u8fdb\u884c\u53cd\u5c04/\u8c03\u7528\uff0c\u5728 ABCL \u6e90\u4ee3\u7801\u7684\u672c\u5730\u526f\u672c\u4e0a\u5c1d\u8bd5\u4e86\u8fd9\u79cd\u903b\u8f91\u3002 (defun \u6a21\u677f (filename context-alist) (let* ((ctx (hashmap context-alist)) (path (java:jstatic &quot;of&quot; &quot;java.nio.file.Path&quot; \u6587\u4ef6\u540d (java:jnew-array &quot;java. lang.String&quot; 0))) (file (#&quot;readString&quot; &#39;java.nio.file.Files path)) (engine (#&quot;build&quot; (jss:new &#39;PebbleEngine$Builder))) (compiledTmpl (#&quot;getTemplate) &quot; \u5f15\u64ce\u6587\u4ef6\u540d)) (writer (jss:new &#39;java.io.StringWriter))) (#&quot;evaluate&quot;compiledTmpl writer ctx) (#&quot;toString&quot; writer))) $ mkdir ~/vendor$ cd ~/vendor$ git\u514b\u9686 https://github.com/eatonphil/abcl$ cd abcl$ git checkout pe/more-variadic$ sudo {dnf/brew/apt} install ant maven$ ant -f build.xml\n\u6211\u6b63\u5728\u5c06\u6b64\u793a\u4f8b\u79fb\u690d\u5230 Kawa \u4ee5\u67e5\u770b\u5b83\u7684\u8868\u73b0\u3002\u535a\u5ba2\u6587\u7ae0\u6765\u4e86\u3002\u4e3a\u4e86\u8bc1\u660e\u4e92\u8054\u7f51\u5173\u4e8e Lisp\uff08\u7279\u522b\u662f Common Lisp\uff09\u7684\u5b9e\u7528\u6027\u662f\u9519\u8bef\u7684\uff0c\u6211\u8bd5\u56fe\u8ba9\u4e00\u4e2a\u7b80\u5355\uff08\u4f46\u73b0\u5b9e\uff09\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\uff0c\u8fd9\u662f\u4e00\u79cd\u8352\u8c2c\u7684\u5c1d\u8bd5\u3002\u7ecf\u8fc7\u56db\u5929\u548c ABCL \u7684\u8865\u4e01\uff0c\u6211\u5f97\u5230\u4e86\u4e00\u4e9b\u5de5\u4f5c\u3002 https://t.co/5UUWNR8Wnn pic.twitter.com/cZsx32IlKD \u2014 Phil Eaton (@phil_eaton) 2021 \u5e74 8 \u6708 5 \u65e5", "note_en": "In a ridiculous attempt to  prove an internetwrong about thepracticality of Lisp (Common Lisp specifically), I tried to get asimple (but realistic) web app running. After four days and  a patchto ABCL I got somethingworking.\n  (let* ((port 8080) (server (make-server 8080))) (route server &#34;GET&#34; &#34;/&#34; (lambda (ctx) &#34;My index!&#34;)) (route server &#34;GET&#34; &#34;/search&#34; (lambda (ctx) (template &#34;search.tmpl&#34; &#39;((&#34;version&#34; &#34;0.1.0&#34;) (&#34;results&#34; (&#34;cat&#34; &#34;dog&#34; &#34;mouse&#34;)))))))\n  &lt;html&gt; &lt;title&gt;Version {{ version }}&lt;/title&gt; {% for item in results %} &lt;h2&gt;{{ item }}&lt;/h2&gt; {% endfor %}&lt;/html&gt;\n   Armed Bear Common Lisp (ABCL) is the only Common Lispimplementation I&#39;m aware of that can hook into a major ecosystem oflibraries like the JVM or CLR has. In theory, this makes it a safesuggestion for folks who want the stability and resources of theecosystem even if they aren&#39;t using its flagship language.\n  The problem with libraries like Micronaut (and Jersey) is that they do alot of dynamic inspection to figure out how to register controllersand whatnot. This is certainly convenient for developers using thelibrary in Java. But it becomes an ordeal when you&#39;re trying to usethe library through a foreign function interface (FFI) in anotherlanguage. An example of this is if a framework scans all files in adirectory for a   @GET annotation.\n On the other hand, Spark had a seeming hard-requirement about bringingin a Websocket library which caused some issues duringconfiguration. So I ended up going with  Jooby and Netty (as the underlying server).\n Finally, I looked into a few Jinja-like template libraries and settledon  Pebble since Jinjava  wouldn&#39;t load forme.\n   &lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;&lt;project&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.github.eatonphil&lt;/groupId&gt; &lt;artifactId&gt;abcl-rest-api-hello-world&lt;/artifactId&gt; &lt;version&gt;1&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;io.jooby&lt;/groupId&gt; &lt;artifactId&gt;jooby&lt;/artifactId&gt; &lt;version&gt;2.10.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.jooby&lt;/groupId&gt; &lt;artifactId&gt;jooby-netty&lt;/artifactId&gt; &lt;version&gt;2.10.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.pebbletemplates&lt;/groupId&gt; &lt;artifactId&gt;pebble&lt;/artifactId&gt; &lt;version&gt;3.1.5&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;\n ABCL has a package called  abcl-asdf that helps you resolve dependencies through Maven and your filesystem. We&#39;ll import it and a package it depends on ( abcl-contrib):\n   To import a specific package from Maven youcall  abcl-asdf:resolve with a colon-separated stringcontaining the Maven package group id and artifact id. Then you passthat result to  abcl-asdf:as-classpath and pass thatresult to  java:add-to-classpath.\n   Now you can call functions within these packages. If you want to calla Java method using only builtins it looks like  (jcall &#34;method&#34;&#34;com.organization.package.Class&#34; object arg1 arg2 ... argN). Ifyou want to call a static Java method you use  (jstatic...) instead of  (jcall ...).\n It seems that ABCL will automatically convert simple types from theirLisp representation to Java but it will not turn a list into anarray. If a Java function requires an array you&#39;ll have to do thatexplicitly with a function like  (java:jnew-array-from-list&#34;java.lang.String&#34; my-string-list).\n When using the builtin Java FFI you always need to use the fullyqualified name for classes like  java.lang.Objectfor  Object or  java.util.Arrayfor  Array.\n Alternatively you can  (require :jss) to get access to asimpler syntax for making Java calls. A method call lookslike  (#&#34;method&#34; object arg1 arg2 ... argN). Creating anew instance of an object is calling  (jss:jnew&#39;className). When you use JSS you don&#39;t need to fully qualify aclass name unless there are more than one class with the samename. For example to create a new Jooby application instance we cancall  (jss:jnew &#39;Jooby). As long as the class can be foundin the class path JSS will resolve it.\n  The real code will look similar to the pseudo-code at the top of thisarticle. We&#39;ll stub out the library-specific wrappers for rendering atemplate and for registering a route.\n  * Server server = new Netty(); // or Jetty or Utow * * App app = new App(); * * server.start(app); * * ... * * server.stop();\n Netty comes from the  jooby-netty artifact inthe  io.jooby group on Maven. And  App is someobject that extends  io.jooby.Jooby. Since we&#39;re not usingan OOP language though we&#39;re going to try avoiding classes as much aspossible. So we&#39;ll just create a new instanceof  io.jooby.Jooby and add routes directly to it.\n (defun template (filename context) &#34;&#34;)(defun route (app method path handler) nil)(defun register-endpoints (app) (route app &#34;GET&#34; &#34;/&#34; (lambda (ctx) &#34;An index!&#34;)) (route app &#34;GET&#34; &#34;/search&#34; (lambda (ctx) (template &#34;search.tmpl&#34; `((&#34;version&#34; &#34;1.0.0&#34;) (&#34;results&#34; ,(java:jarray-from-list &#39;(&#34;cat&#34; &#34;dog&#34; &#34;mouse&#34;))))))) (route app &#34;GET&#34; &#34;/hello-world&#34; (lambda (ctx) &#34;Hello world!&#34;)))(let* ((port 8080) (server (jss:new &#39;Netty)) (app (jss:new &#39;Jooby))) (register-endpoints app) (#&#34;setOptions&#34; server (#&#34;setPort&#34; (jss:new &#39;ServerOptions) port)) (#&#34;start&#34; server app) (#&#34;join&#34; server))\n   We are again not going the happy path with fancy Java syntax (which isfine if you&#39;re using Java) like the Jooby documentationsuggests. Scouring the  Jooby source codeagainit looks like we can call  route on the  Joobyclass with a method string, a path string, and an instance of anobject implementing the  io.jooby.Route.Handler interface.\n Since this handler argument is an interface, we cannot cheat again bycreating an instance of it we&#39;ll have to actually create a new classin Lisp that extends it. Thankfully there&#39;s only one method we need toimplement to satisfy this interface, apply. Itaccepts a  io.jooby.Context object and returnsa  java.lang.Object. The framework then does introspectionto figure out what exactly the object is and if it needs to transformit into a string to be returned as an HTTP response body.\n To create a new class in ABCL we call  (java:jnew-runtime-class&#34;classname&#34; :interfaces &#39;(&#34;an interface name&#34;) :methods &#39;((&#34;methodname 1&#34; &#34;return type&#34; (&#34;first parameter type&#34; ...) (lambda (this arg1 ...) body)))):\n (defun route (app method path handler) (#&#34;route&#34; app method path (jss:new (java:jnew-runtime-class (substitute #\\$ #\\/ (substitute #\\$ #\\- path)) :interfaces &#39;(&#34;io.jooby.Route$Handler&#34;) :methods `( (&#34;apply&#34; &#34;java.lang.Object&#34; (&#34;io.jooby.Context&#34;) (lambda (this ctx) (funcall ,handler ctx))))))))\n One thing to note is that when referring to a subclass within a filewe need to address it with the  io.jooby.Route$Handlersyntax rather than as you might refer to it in Javaas  io.jooby.Route.Handler. In the latter case ABCLthinks  Route is a package when in fact it&#39;s just a class.\n If you run this now with  abcl --load main.lisp. It willwork until you hit an endpoint. The problem is how Jooby tries tofigure out the real type of the returned object.\n  In this case it tries to  open and parse the (Java) sourcecodeof our application to try to find the return type forthis  apply function.\n That&#39;s a problem since our code isn&#39;t Java. Through trial and error Irealized we can trick Jooby/Java/somebody into figuring out thecorrect return type by adding another implementationof  apply that returns a  String to our class.\n  (defun route (app method path handler) (#&#34;route&#34; app method path (jss:new (java:jnew-runtime-class (substitute #\\$ #\\/ (substitute #\\$ #\\- path)) :interfaces &#39;(&#34;io.jooby.Route$Handler&#34;) :methods `( ;; Need to define this one to make Jooby figure out the return type ;; Otherwise it tries to read &#34;this file&#34; which isn&#39;t a Java file so cannot be parsed (&#34;apply&#34; &#34;java.lang.String&#34; (&#34;io.jooby.Context&#34;) (lambda (this ctx) nil)) ;; This one actually gets called (&#34;apply&#34; &#34;java.lang.Object&#34; (&#34;io.jooby.Context&#34;) (lambda (this ctx) (funcall ,handler ctx))))))))\n You may wonder, why keep the original method around? Well it&#39;s becauseduring reflection, ABCL says no such method thatreturns  String exists in the  Handlerinterface. That&#39;s fair I guess.\n   PebbleEngine engine = new PebbleEngine.Builder().build();PebbleTemplate compiledTemplate = engine.getTemplate(&#34;home.html&#34;);Map&lt;String, Object&gt; context = new HashMap&lt;&gt;();context.put(&#34;name&#34;, &#34;Mitchell&#34;);Writer writer = new StringWriter();compiledTemplate.evaluate(writer, context);String output = writer.toString();\n  (defun hashmap (alist) (let ((map (jss:new &#39;HashMap))) (loop for el in alist do (#&#34;put&#34; map (car el) (cadr el))) map))(defun template (filename context-alist) (let* ((ctx (hashmap context-alist)) (path (java:jstatic &#34;of&#34; &#34;java.nio.file.Path&#34; filename)) (file (#&#34;readString&#34; &#39;java.nio.file.Files path)) (engine (#&#34;build&#34; (jss:new &#39;PebbleEngine$Builder))) (compiledTmpl (#&#34;getTemplate&#34; engine filename)) (writer (jss:new &#39;java.io.StringWriter))) (#&#34;evaluate&#34; compiledTmpl writer ctx) (#&#34;toString&#34; writer)))\n But if you run this  abcl --load main.lisp and hit this /search endpoint, it will blow up saying &#34;no such method&#34;exists at the call to  Path.of(filename).\n  And while there are  examplesof using variadic functionswhen the function only has a single parameter like java.util.Arrays.asList(T ...), employing that sametechnique here continued to result in &#34;no such method&#34;:\n  Eventually I found an  example of someone doing reflect/invoke on thiskind of a functioncalland tried this logic on a local copy of the ABCL source code.\n   (defun template (filename context-alist) (let* ((ctx (hashmap context-alist)) (path (java:jstatic &#34;of&#34; &#34;java.nio.file.Path&#34; filename (java:jnew-array &#34;java.lang.String&#34; 0))) (file (#&#34;readString&#34; &#39;java.nio.file.Files path)) (engine (#&#34;build&#34; (jss:new &#39;PebbleEngine$Builder))) (compiledTmpl (#&#34;getTemplate&#34; engine filename)) (writer (jss:new &#39;java.io.StringWriter))) (#&#34;evaluate&#34; compiledTmpl writer ctx) (#&#34;toString&#34; writer)))\n  $ mkdir ~/vendor$ cd ~/vendor$ git clone https://github.com/eatonphil/abcl$ cd abcl$ git checkout pe/more-variadic$ sudo {dnf/brew/apt} install ant maven$ ant -f build.xml\n       I&#39;m porting this example to Kawa to see how it fares. Blog post to come.\n   In a ridiculous attempt to prove an internet wrong about the practicality of Lisp (Common Lisp specifically), I tried to get a simple (but realistic) web app running. After four days and a patch to ABCL I got something working. https://t.co/5UUWNR8Wnn  pic.twitter.com/cZsx32IlKD\n\u2014 Phil Eaton (@phil_eaton)  August 5, 2021", "posttime": "2021-08-06 03:44:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,lisp,quot", "title": "\u5b9e\u9645\u7684\uff1f JVM \u4e0a\u7684 Common Lisp\uff1a\u73b0\u4ee3 Web \u5e94\u7528\u7a0b\u5e8f\u7684 ABCL \u5feb\u901f\u4ecb\u7ecd", "title_en": "Practical? Common Lisp on the JVM: A quick intro to ABCL for modern web apps", "transed": 1, "url": "https://notes.eatonphil.com/practical-common-lisp-on-the-jvm.html", "via": "", "real_tags": ["\u7a0b\u5e8f", "lisp", "quot"]}, {"category": "", "categoryclass": "", "imagename": "1cd9624c8c65d141ade32cf6f3a84b8e.jpg", "infoid": 1071610, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e9\u5728 80 \u5e74\u4ee3\u672b\u5230 90 \u5e74\u4ee3\uff0cUnix \u5de5\u4f5c\u7ad9\u5c31\u8d85\u7ea7\u5f3a\u5927\u3001\u8d85\u7ea7\u9177\u4e14\u8d85\u7ea7\u6602\u8d35\u3002\u5982\u679c\u60a8\u6b63\u5728\u5236\u4f5c 3D \u56fe\u5f62\u6216\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\uff0c\u60a8\u9700\u8981\u4e00\u53f0\u9ad8\u6027\u80fd\u5de5\u4f5c\u7ad9\uff0c\u800c Sun \u5236\u9020\u4e86\u4e00\u4e9b\u6700\u597d\u7684\u5de5\u4f5c\u7ad9\u3002\u4f46\u9664\u975e\u4f60\u4e3a\u5927\u516c\u53f8\u3001\u5927\u5b66\u6216\u653f\u5e9c\u5de5\u4f5c\uff0c\u5426\u5219\u5b83\u4eec\u53ef\u80fd\u592a\u8d35\u4e86\u3002\u4e8c\u5341\u591a\u5e74\u540e\uff0c\u6211\u4eec\u6709\u4e86\u66f4\u5f3a\u5927\u3001\u66f4\u5b9e\u60e0\u7684\u8ba1\u7b97\u673a\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6a21\u62df\u65e7\u7cfb\u7edf\uff0c\u770b\u770b\u8fd0\u884c\u4e00\u4e9b\u60a8\u5728 90 \u5e74\u4ee3\u53ef\u4ee5\u4e70\u5230\u7684\u6700\u9177\u7684\u8ba1\u7b97\u673a\u662f\u4ec0\u4e48\u611f\u89c9\u3002 Sun \u5de5\u4f5c\u7ad9\u5f00\u59cb\u8fd0\u884c\u57fa\u4e8e BSD Unix\uff08\u5982 NeXTSTEP\uff09\u7684 SunOS\uff0c\u4f46\u5728 1991 \u5e74\u4ed6\u4eec\u5c06\u5176\u66ff\u6362\u4e3a\u57fa\u4e8e Unix System V Release 4\uff08\u5982 AIX \u548c HP-UX\uff09\u7684 Solaris\u3002 Solaris \u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u5b9e\u9645\u4e0a\u662f Solaris 2\uff0c\u4e3a\u4e86\u5c1d\u8bd5\u5f04\u660e\u767d\uff0c\u4ed6\u4eec\u56de\u8fc7\u5934\u6765\u5c06\u5176\u547d\u540d\u4e3a SunOS Solaris 1\uff0c\u4f46\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u5b83\u4ecd\u7136\u79f0\u81ea\u5df1\u4e3a SunOS\u3002\u6240\u4ee5 Solaris 1 \u662f SunOS 4\uff0cSolaris 2 \u662f SunOS 5\uff0c\u6211\u4eec\u5c06\u8fd0\u884c\u7684 Solaris 2.6 \u662f SunOS 5.6\u3002\u8fd8\u7cca\u6d82\uff1f\u5ffd\u7565\u547d\u540d\u7ea6\u5b9a\uff0c\u53ea\u77e5\u9053\u6211\u4eec\u5c06\u4ece 1997 \u5e74\u5f00\u59cb\u8fd0\u884c Solaris 2.6\u3002\u4f5c\u4e3a\u6bd4\u8f83\uff0c\u5f53\u65f6\u7684 PC \u5c06\u8fd0\u884c Windows 95\uff0c\u800c Apple \u4e8e\u540c\u5e74\u53d1\u5e03\u4e86 Mac OS 8\u3002\u4e3a\u4e86\u589e\u52a0\u4e50\u8da3\uff0c\u4f7f\u7528 Drakware \u7684 Sun2USB \u5c06 Sun Type 5 \u952e\u76d8\u8f6c\u6362\u4e3a USB \u6216\u4f7f\u7528 SPARC \u952e\u76d8\u89c4\u8303\u548c\u50cf Trinket M0 \u8fd9\u6837\u7684\u5c0f\u578b Arduino \u8fdb\u884c DIY", "note_en": "Back in the late 80s and through the 90s, Unix workstations were super powerful, super cool, and super expensive. If you were making 3D graphics or developing applications, you wanted a high-performance workstation and Sun made some of the best ones. But unless you worked for a huge company, university, or government, they were probably too expensive.\n More than twenty years later, we have much more powerful and affordable computers, so let&#39;s emulate the old systems and see what it was like to run some of the coolest computers you could buy in the 90s.\n  Sun workstations started out running SunOS, based on BSD Unix (like NeXTSTEP), but in 1991 they replaced it with Solaris, based on Unix System V Release 4 (like AIX and HP-UX).\n The first version of Solaris was actually Solaris 2, and to try and make sense they went back and named SunOS Solaris 1, but in the operating system it still refers to itself as SunOS. So Solaris 1 is SunOS 4, and Solaris 2 is SunOS 5, and Solaris 2.6 that we&#39;ll run is SunOS 5.6. Confused yet?\n Ignore the naming conventions and just know that we&#39;ll run Solaris 2.6 from 1997. For comparison, at that time a PC would be running Windows 95 and Apple released Mac OS 8 the same year.\n For added fun, a Sun Type 5 keyboard converted to USB with  Drakware&#39;s Sun2USB or DIY with the  SPARC keyboard specification and a small Arduino like the Trinket M0", "posttime": "2021-08-06 03:44:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "sparc,solaris", "title": "\u6784\u5efa\u60a8\u81ea\u5df1\u7684 SPARC \u5de5\u4f5c\u7ad9", "title_en": "Build your own SPARC workstation", "transed": 1, "url": "https://learn.adafruit.com/build-your-own-sparc-with-qemu-and-solaris", "via": "", "real_tags": ["sparc", "solaris"]}, {"category": "", "categoryclass": "", "imagename": "82e7d14e4ed587e3d37df4b52e4ca4a4.png", "infoid": 1071609, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53e6\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u662f\u513f\u7ae5\u6027\u8650\u5f85\u6750\u6599 (CSAM) \u5728\u7ebf\u4f20\u64ad\u3002 CSAM \u662f\u6307\u63cf\u8ff0\u6d89\u53ca\u513f\u7ae5\u7684\u8272\u60c5\u6d3b\u52a8\u7684\u5185\u5bb9\u3002\u4e3a\u4e86\u5e2e\u52a9\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0ciOS \u548c iPadOS * \u4e2d\u7684\u65b0\u6280\u672f\u5c06\u5141\u8bb8 Apple \u68c0\u6d4b\u5b58\u50a8\u5728 iCloud \u7167\u7247\u4e2d\u7684\u5df2\u77e5 CSAM \u56fe\u50cf\u3002\u8fd9\u5c06\u4f7f Apple \u80fd\u591f\u5411\u56fd\u5bb6\u5931\u8e2a\u548c\u53d7\u8650\u513f\u7ae5\u4e2d\u5fc3 (NCMEC) \u62a5\u544a\u8fd9\u4e9b\u60c5\u51b5\u3002 NCMEC \u662f CSAM \u7684\u7efc\u5408\u62a5\u544a\u4e2d\u5fc3\uff0c\u5e76\u4e0e\u7f8e\u56fd\u5404\u5730\u7684\u6267\u6cd5\u673a\u6784\u5408\u4f5c\u3002 Apple \u68c0\u6d4b\u5df2\u77e5 CSAM \u7684\u65b9\u6cd5\u5728\u8bbe\u8ba1\u65f6\u8003\u8651\u4e86\u7528\u6237\u9690\u79c1\u3002\u8be5\u7cfb\u7edf\u4e0d\u662f\u5728\u4e91\u4e2d\u626b\u63cf\u56fe\u50cf\uff0c\u800c\u662f\u4f7f\u7528 NCMEC \u548c\u5176\u4ed6\u513f\u7ae5\u5b89\u5168\u7ec4\u7ec7\u63d0\u4f9b\u7684\u5df2\u77e5 CSAM \u56fe\u50cf\u54c8\u5e0c\u6570\u636e\u5e93\u6267\u884c\u8bbe\u5907\u4e0a\u5339\u914d\u3002 Apple \u8fdb\u4e00\u6b65\u5c06\u6b64\u6570\u636e\u5e93\u8f6c\u6362\u4e3a\u4e00\u7ec4\u4e0d\u53ef\u8bfb\u7684\u54c8\u5e0c\u503c\uff0c\u5e76\u5b89\u5168\u5730\u5b58\u50a8\u5728\u7528\u6237\u7684\u8bbe\u5907\u4e0a\u3002\u5728\u5c06\u56fe\u50cf\u5b58\u50a8\u5728 iCloud \u7167\u7247\u4e2d\u4e4b\u524d\uff0c\u4f1a\u6839\u636e\u5df2\u77e5\u7684 CSAM \u54c8\u5e0c\u503c\u5bf9\u8be5\u56fe\u50cf\u6267\u884c\u8bbe\u5907\u4e0a\u7684\u5339\u914d\u8fc7\u7a0b\u3002\u6b64\u5339\u914d\u8fc7\u7a0b\u7531\u79f0\u4e3a\u79c1\u6709\u96c6\u4ea4\u96c6\u7684\u52a0\u5bc6\u6280\u672f\u63d0\u4f9b\u652f\u6301\uff0c\u8be5\u6280\u672f\u53ef\u5728\u4e0d\u900f\u9732\u7ed3\u679c\u7684\u60c5\u51b5\u4e0b\u786e\u5b9a\u662f\u5426\u5b58\u5728\u5339\u914d\u3002\u8be5\u8bbe\u5907\u521b\u5efa\u4e00\u4e2a\u52a0\u5bc6\u5b89\u5168\u51ed\u8bc1\uff0c\u5bf9\u5339\u914d\u7ed3\u679c\u4ee5\u53ca\u6709\u5173\u56fe\u50cf\u7684\u9644\u52a0\u52a0\u5bc6\u6570\u636e\u8fdb\u884c\u7f16\u7801\u3002\u6b64\u4f18\u60e0\u5238\u4e0e\u56fe\u50cf\u4e00\u8d77\u4e0a\u4f20\u5230 iCloud \u7167\u7247\u3002\u8be5\u7cfb\u7edf\u4f7f\u7528\u53e6\u4e00\u79cd\u79f0\u4e3a\u9608\u503c\u79d8\u5bc6\u5171\u4eab\u7684\u6280\u672f\uff0c\u786e\u4fdd\u9664\u975e iCloud \u7167\u7247\u5e10\u6237\u8d85\u8fc7\u5df2\u77e5 CSAM \u5185\u5bb9\u7684\u9608\u503c\uff0c\u5426\u5219 Apple \u65e0\u6cd5\u89e3\u91ca\u5b89\u5168\u51ed\u8bc1\u7684\u5185\u5bb9\u3002\u8be5\u9608\u503c\u65e8\u5728\u63d0\u4f9b\u6781\u9ad8\u7684\u51c6\u786e\u6027\uff0c\u5e76\u786e\u4fdd\u6bcf\u5e74\u9519\u8bef\u6807\u8bb0\u7ed9\u5b9a\u5e10\u6237\u7684\u51e0\u7387\u4f4e\u4e8e\u4e07\u4ebf\u5206\u4e4b\u4e00\u3002\u53ea\u6709\u5f53\u8d85\u8fc7\u9608\u503c\u65f6\uff0c\u52a0\u5bc6\u6280\u672f\u624d\u5141\u8bb8 Apple \u89e3\u91ca\u4e0e\u5339\u914d CSAM \u56fe\u50cf\u76f8\u5173\u8054\u7684\u5b89\u5168\u51ed\u8bc1\u7684\u5185\u5bb9\u3002\u7136\u540e\uff0cApple \u624b\u52a8\u5ba1\u67e5\u6bcf\u4efd\u62a5\u544a\u4ee5\u786e\u8ba4\u662f\u5426\u5b58\u5728\u5339\u914d\u9879\uff0c\u7981\u7528\u7528\u6237\u5e10\u6237\uff0c\u5e76\u5411 NCMEC \u53d1\u9001\u62a5\u544a\u3002\u5982\u679c\u7528\u6237\u8ba4\u4e3a\u4ed6\u4eec\u7684\u5e10\u6237\u88ab\u9519\u8bef\u6807\u8bb0\uff0c\u4ed6\u4eec\u53ef\u4ee5\u63d0\u51fa\u4e0a\u8bc9\u4ee5\u6062\u590d\u5176\u5e10\u6237\u3002\u8fd9\u9879\u521b\u65b0\u7684\u65b0\u6280\u672f\u4f7f Apple \u80fd\u591f\u5411 NCMEC \u548c\u6267\u6cd5\u90e8\u95e8\u63d0\u4f9b\u6709\u5173\u5df2\u77e5 CSAM \u6269\u6563\u7684\u6709\u4ef7\u503c\u4e14\u53ef\u64cd\u4f5c\u7684\u4fe1\u606f\u3002\u8fd9\u6837\u505a\u7684\u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u6bd4\u73b0\u6709\u6280\u672f\u663e\u7740\u7684\u9690\u79c1\u4f18\u52bf\uff0c\u56e0\u4e3a Apple \u53ea\u6709\u5728\u7528\u6237\u7684 iCloud \u7167\u7247\u5e10\u6237\u4e2d\u6709\u4e00\u7ec4\u5df2\u77e5\u7684 CSAM \u65f6\u624d\u4f1a\u4e86\u89e3\u7528\u6237\u7684\u7167\u7247\u3002\u5373\u4f7f\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0cApple \u4e5f\u53ea\u4f1a\u4e86\u89e3\u4e0e\u5df2\u77e5 CSAM \u5339\u914d\u7684\u56fe\u50cf\u3002", "note_en": "Another important concern is the spread of Child Sexual Abuse Material (CSAM) online. CSAM refers to content that depicts sexually explicit activities involving a child.\n  To help address this, new technology in iOS and iPadOS  * will allow Apple to detect known CSAM images stored in iCloud Photos. This will enable Apple to report these instances to the National Center for Missing and Exploited Children (NCMEC). NCMEC acts as a comprehensive reporting center for CSAM and works in collaboration with law enforcement agencies across the United States.\n  Apple\u2019s method of detecting known CSAM is designed with user privacy in mind. Instead of scanning images in the cloud, the system performs on-device matching using a database of known CSAM image hashes provided by NCMEC and other child safety organizations. Apple further transforms this database into an unreadable set of hashes that is securely stored on users\u2019 devices.\n  Before an image is stored in iCloud Photos, an on-device matching process is performed for that image against the known CSAM hashes. This matching process is powered by a cryptographic technology called private set intersection, which determines if there is a match without revealing the result. The device creates a cryptographic safety voucher that encodes the match result along with additional encrypted data about the image. This voucher is uploaded to iCloud Photos along with the image.\n  Using another technology called threshold secret sharing, the system ensures the contents of the safety vouchers cannot be interpreted by Apple unless the iCloud Photos account crosses a threshold of known CSAM content. The threshold is set to provide an extremely high level of accuracy and ensures less than a one in one trillion chance per year of incorrectly flagging a given account.\n  Only when the threshold is exceeded does the cryptographic technology allow Apple to interpret the contents of the safety vouchers associated with the matching CSAM images. Apple then manually reviews each report to confirm there is a match, disables the user\u2019s account, and sends a report to NCMEC. If a user feels their account has been mistakenly flagged they can file an appeal to have their account reinstated.\n  This innovative new technology allows Apple to provide valuable and actionable information to NCMEC and law enforcement regarding the proliferation of known CSAM. And it does so while providing significant privacy benefits over existing techniques since Apple only learns about users\u2019 photos if they have a collection of known CSAM in their iCloud Photos account. Even in these cases, Apple only learns about images that match known CSAM.", "posttime": "2021-08-06 03:44:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u513f\u7ae5,protections,csam", "title": "\u6269\u5927\u5bf9\u513f\u7ae5\u7684\u4fdd\u62a4", "title_en": "Expanded Protections for Children", "transed": 1, "url": "https://www.apple.com/child-safety/", "via": "", "real_tags": ["\u513f\u7ae5", "csam"]}, {"category": "", "categoryclass": "", "imagename": "9fbba133cad7aa0b9c6b733b01238074.jpg", "infoid": 1071608, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u636e\u77e5\u60c5\u4eba\u58eb\u900f\u9732\uff0c\u82f9\u679c\u8ba1\u5212\u5728\u7f8e\u56fd iPhone \u4e0a\u5b89\u88c5\u8f6f\u4ef6\u6765\u626b\u63cf\u8650\u5f85\u513f\u7ae5\u7684\u56fe\u50cf\uff0c\u4e3a\u6570\u767e\u4e07\u4eba\u76d1\u63a7\u4e2a\u4eba\u8bbe\u5907\u6253\u5f00\u5927\u95e8\u3002\u8fd9\u5728\u5b89\u5168\u7814\u7a76\u4eba\u5458\u4e2d\u6572\u54cd\u4e86\u8b66\u949f\uff0c\u4ed6\u4eec\u8b66\u544a\u8bf4\u5b58\u5728\u3002\u636e\u4e24\u540d\u5728\u865a\u62df\u4f1a\u8bae\u4e0a\u542c\u53d6\u7b80\u62a5\u7684\u5b89\u5168\u7814\u7a76\u4eba\u5458\u79f0\uff0c\u82f9\u679c\u516c\u53f8\u5411\u4e00\u4e9b\u7f8e\u56fd\u5b66\u8005\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u63d0\u51fa\u7684\u7cfb\u7edf\uff08\u79f0\u4e3a\u201c\u795e\u7ecf\u5339\u914d\u201d\uff09\u3002\u4ed6\u4eec\u8868\u793a\uff0c\u8be5\u8ba1\u5212\u53ef\u80fd\u4f1a\u5728\u672c\u5468\u5185\u66f4\u5e7f\u6cdb\u5730\u516c\u5e03\u3002\u5982\u679c\u786e\u5b9a\u68c0\u6d4b\u5230\u975e\u6cd5\u56fe\u50cf\uff0c\u81ea\u52a8\u5316\u7cfb\u7edf\u4f1a\u63d0\u524d\u8b66\u544a\u4e00\u7ec4\u4eba\u5de5\u5ba1\u6838\u4eba\u5458\u3002\u5982\u679c\u6750\u6599\u53ef\u7528\uff0c\u5ba1\u67e5\u5458\u5c06\u8054\u7cfb\u6267\u6cd5\u90e8\u95e8\u3002\u8be5\u8ba1\u5212\u6700\u521d\u5c06\u4ec5\u5728\u7f8e\u56fd\u90e8\u7f72\u3002\u8be5\u63d0\u6848\u4ecb\u4e8e\u4fdd\u62a4\u5ba2\u6237\u9690\u79c1\u7684\u72ec\u7279\u627f\u8bfa\u548c\u653f\u5e9c\u3001\u6267\u6cd5\u673a\u6784\u548c\u513f\u7ae5\u5b89\u5168\u6d3b\u52a8\u5bb6\u7684\u6301\u7eed\u8981\u6c42\u4e4b\u95f4\uff0c\u4ee5\u8fdb\u4e00\u6b65\u652f\u6301\u6050\u6016\u4e3b\u4e49\u548c\u513f\u7ae5\u8272\u60c5\u7b49\u5211\u4e8b\u8c03\u67e5\u3002\u82f9\u679c\u8bd5\u56fe\u627e\u5230\u59a5\u534f\u3002\u6267\u6cd5\u673a\u6784\u4e0e Apple \u548c Facebook \u7b49\u9ad8\u79d1\u6280\u516c\u53f8\u4e4b\u95f4\u7684\u7d27\u5f20\u5173\u7cfb\u4e3a\u4ea7\u54c1\u548c\u670d\u52a1\u4e2d\u8d8a\u6765\u8d8a\u591a\u5730\u4f7f\u7528\u52a0\u5bc6\u8fa9\u62a4\uff0c\u5bfc\u81f4 iPhone \u5236\u9020\u5546\u5728 2016 \u5e74\u8bbf\u95ee\u4e86 FBI \u6d89\u5acc\u6050\u6016\u5206\u5b50\u7684 iPhone\u3002 \u81ea\u5f00\u5ead\u4ee5\u6765\uff0c\u8fd9\u79cd\u7d27\u5f20\u5c40\u52bf\u4e00\u76f4\u5728\u52a0\u5267\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5723\u8d1d\u7eb3\u8fea\u8bfa\u53d1\u751f\u67aa\u51fb\u4e8b\u4ef6\u540e\u3002\u867d\u7136\u5b89\u5168\u7814\u7a76\u4eba\u5458\u652f\u6301\u6253\u51fb\u8650\u5f85\u513f\u7ae5\u7684\u52aa\u529b\uff0c\u4f46\u4ed6\u4eec\u62c5\u5fc3\u4e16\u754c\u5404\u56fd\u653f\u5e9c\u5bfb\u6c42\u8bbf\u95ee\u516c\u6c11\u4e2a\u4eba\u6570\u636e\u7684\u98ce\u9669\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u7edd\u5bf9\u53ef\u6015\u7684\u60f3\u6cd5\uff0c\u56e0\u4e3a\u5b83\u5bfc\u81f4\u5206\u5e03\u5f0f\u6279\u91cf\u76d1\u63a7......\u6211\u4eec\u7684\u624b\u673a\u548c\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u201d\u5251\u6865\u5927\u5b66\u5b89\u5168\u5de5\u7a0b\u6559\u6388\u7f57\u65af\u5b89\u5fb7\u68ee\u8bf4\u3002\n\u8be5\u7cfb\u7edf\u76ee\u524d\u7ecf\u8fc7\u57f9\u8bad\uff0c\u53ef\u4ee5\u68c0\u6d4b\u513f\u7ae5\u6027\u8650\u5f85\uff0c\u4f46\u53ef\u4ee5\u626b\u63cf\u5176\u4ed6\u6709\u9488\u5bf9\u6027\u7684\u56fe\u50cf\u548c\u6587\u672c\uff0c\u4f8b\u5982\u6050\u6016\u5206\u5b50\u65a9\u9996\u548c\u6297\u8bae\u6d3b\u52a8\u4e2d\u7684\u53cd\u653f\u5e9c\u8ff9\u8c61\u3002\u53ef\u4ee5\u9002\u5e94\u3002\u82f9\u679c\u7684\u5148\u4f8b\u4e5f\u53ef\u80fd\u5bf9\u5176\u4ed6\u79d1\u6280\u516c\u53f8\u65bd\u52a0\u538b\u529b\uff0c\u8981\u6c42\u4ed6\u4eec\u4f7f\u7528\u7c7b\u4f3c\u7684\u6280\u672f\u3002\u7ea6\u7ff0\u970d\u666e\u91d1\u65af\u5927\u5b66\u5b89\u5168\u6559\u6388\u9a6c\u4fee\u683c\u6797\u8bf4\uff1a\u201c\u8fd9\u5c06\u6253\u7834\u5927\u575d\u2014\u2014\u653f\u5e9c\u5c06\u8981\u6c42\u6240\u6709\u4eba\u8fd9\u6837\u505a\u3002\u201d\u53d1\u5e03\u4e00\u6761\u5173\u4e8e\u8be5\u95ee\u9898\u7684\u63a8\u6587\u3002\u66fe\u5728 Facebook \u548c Deliveroo \u5de5\u4f5c\u8fc7\u7684\u5b89\u5168\u7814\u7a76\u5458\u548c\u9690\u79c1\u6d3b\u52a8\u5bb6\u4e9a\u5386\u514b\u00b7\u7a46\u83f2\u7279 (Alec Muffett) \u8868\u793a\uff0c\u82f9\u679c\u7684\u4e3e\u52a8\u662f\u201c\u5730\u58f3\u8fd0\u52a8\u201d\uff0c\u662f\u201c\u8fc8\u5411\u4e2a\u4eba\u9690\u79c1\u7684\u5de8\u5927\u800c\u5012\u9000\u7684\u4e00\u6b65\u201d\u3002\u57fa\u4e8e\u4e91\u7684\u7167\u7247\u5b58\u50a8\u7cfb\u7edf\u548c\u793e\u4ea4\u7f51\u7ad9\u5df2\u7ecf\u5728\u626b\u63cf\u8650\u5f85\u513f\u7ae5\u7684\u56fe\u50cf\uff0c\u4f46\u8bd5\u56fe\u8bbf\u95ee\u5b58\u50a8\u5728\u4e2a\u4eba\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u4f1a\u4f7f\u8fc7\u7a0b\u590d\u6742\u5316\u3002\u8428\u5229\u5927\u5b66\u8ba1\u7b97\u673a\u5b89\u5168\u6559\u6388\u827e\u4f26\u4f0d\u5fb7\u6c83\u5fb7\u8bf4\uff0c\u82f9\u679c\u7cfb\u7edf\u7684\u4fb5\u5165\u6027\u8f83\u5c0f\uff0c\u56e0\u4e3a\u7b5b\u9009\u662f\u901a\u8fc7\u7535\u8bdd\u5b8c\u6210\u7684\uff0c\u201c\u53ea\u6709\u5728\u5339\u914d\u65f6\uff0c\u624d\u4f1a\u5411\u641c\u7d22\u8005\u8fd4\u56de\u901a\u77e5\u201d\u3002\u6211\u6709\u3002 \u201c\u8fd9\u79cd\u53bb\u4e2d\u5fc3\u5316\u7684\u65b9\u6cd5\u662f\u9075\u5faa\u8fd9\u6761\u8def\u7ebf\u7684\u6700\u4f73\u65b9\u6cd5\u3002\u201d\u82f9\u679c\u7684 neuralMatch \u7b97\u6cd5\u4f1a\u6301\u7eed\u626b\u63cf\u5b58\u50a8\u5728\u7f8e\u56fd\u7528\u6237 iPhone \u4e0a\u5e76\u4e0a\u4f20\u5230 iCloud \u5907\u4efd\u7cfb\u7edf\u7684\u7167\u7247\u3002\u901a\u8fc7\u79f0\u4e3a\u201c\u54c8\u5e0c\u201d\u7684\u8fc7\u7a0b\u8f6c\u6362\u4e3a\u4e00\u7cfb\u5217\u6570\u5b57\u7684\u7528\u6237\u7167\u7247\u4e0e\u5df2\u77e5\u7684\u513f\u7ae5\u6027\u8650\u5f85\u56fe\u50cf\u6570\u636e\u5e93\u4e2d\u7684\u7167\u7247\u8fdb\u884c\u6bd4\u8f83\u3002\u8be5\u7cfb\u7edf\u63a5\u53d7\u4e86\u7f8e\u56fd\u975e\u8425\u5229\u6027\u56fd\u5bb6\u5931\u8e2a\u548c\u53d7\u8650\u513f\u7ae5\u4e2d\u5fc3\u6536\u96c6\u7684 200,000 \u5f20\u6027\u8650\u5f85\u56fe\u50cf\u7684\u8bad\u7ec3\u3002\n\u636e\u77e5\u60c5\u4eba\u58eb\u900f\u9732\uff0c\u5728\u7f8e\u56fd\u4e0a\u4f20\u5230 iCloud \u7684\u6240\u6709\u7167\u7247\u90fd\u5c06\u83b7\u5f97\u4e00\u5f20\u201c\u5b89\u5168\u51ed\u8bc1\u201d\uff0c\u4ee5\u8868\u660e\u5b83\u4eec\u662f\u5426\u53ef\u7591\u3002\u5982\u679c\u4e00\u5b9a\u6570\u91cf\u7684\u7167\u7247\u88ab\u6807\u8bb0\u4e3a\u53ef\u7591\uff0cApple \u5c06\u5141\u8bb8\u60a8\u89e3\u5bc6\u6240\u6709\u53ef\u7591\u7167\u7247\uff0c\u5982\u679c\u5b83\u4eec\u660e\u663e\u975e\u6cd5\uff0c\u5219\u5c06\u5b83\u4eec\u4ea4\u7ed9\u5f53\u5c40\u3002\u82f9\u679c\u8ba1\u5212\u626b\u63cf\u7f8e\u56fd iPhone \u4e2d\u7684\u8650\u5f85\u513f\u7ae5\u56fe\u50cf\u6765\u6e90\u94fe\u63a5\u82f9\u679c\u8ba1\u5212\u626b\u63cf\u7f8e\u56fd iPhone \u4e2d\u7684\u8650\u5f85\u513f\u7ae5\u56fe\u50cf", "note_en": "Apple plans to install software on US iPhones to scan images of child abuse, opening the door to monitoring personal devices for millions of people, according to people who were briefed on the plan. It is ringing a warning bell among security researchers who warn that there is.\n   Apple detailed the system proposed earlier this week (known as \u201cneural Match\u201d) to some US scholars, according to two security researchers briefed at a virtual meeting. They said the plan might be published more widely soon this week.\n  The automated system warns a team of human reviewers in advance if it determines that an illegal image has been detected. The reviewer will contact law enforcement if the material is available. This scheme will initially be deployed only in the United States.\n     The proposal is between a unique commitment to protect customer privacy and ongoing demands from governments, law enforcement agencies, and child safety activists for further support in criminal investigations such as terrorism and child pornography. Apple\u2019s attempt to find a compromise.\n  Tensions between law enforcement agencies and high-tech companies such as Apple and Facebook defending the increasing use of encryption in products and services caused iPhone makers to access the iPhones of suspected terrorists in the FBI in 2016. It has been intensifying since the court was opened in. Following the shooting in San Bernardino, California.\n  While security researchers support efforts to combat child abuse, they are concerned about the risks that will allow governments around the world to seek access to citizens\u2019 personal data.\n  \u201cIt\u2019s an absolutely horrifying idea because it leads to distributed bulk monitoring \u2026 Our phones and laptops,\u201d said Ross Anderson, a professor of security engineering at the University of Cambridge.\n  The system is currently trained to detect child sexual abuse, but to scan other targeted images and texts, such as signs of anti-government in terrorist decapitation and protests. Can be adapted. Apple\u2019s precedent could also put pressure on other tech companies to use similar technologies.\n  \u201cThis will break the dam \u2014 the government will demand it from everyone,\u201d said Matthew Green, a security professor at Johns Hopkins University.  Post a tweet About the problem.\n  Alec Muffett, a security researcher and privacy campaigner who previously worked for Facebook and Deliveroo, said Apple\u2019s move was \u201ccrustal movement\u201d and \u201ca huge and backward step towards personal privacy.\u201d\n    Cloud-based photo storage systems and social networking sites are already scanning images of child abuse, but trying to access the data stored on personal devices complicates the process.\n  Apple\u2019s system is less invasive in that screening is done over the phone, and \u201conly if there is a match, a notification is returned to the searcher,\u201d said Alan Woodward, a professor of computer security at Sally University. I have. \u201cThis decentralized approach is the best approach you can take to follow this route.\u201d\n  Apple\u2019s neuralMatch algorithm continuously scans photos stored on the US user\u2019s iPhone and also uploaded to the iCloud backup system. User photos converted into a series of numbers by a process called \u201chash\u201d are compared to photos in a database of known images of child sexual abuse.\n  The system is trained on 200,000 sexual abuse images collected by the US Nonprofit National Missing and Exploited Children\u2019s Center.\n  All photos uploaded to iCloud in the United States will be given a \u201csafety voucher\u201d to indicate if they are suspicious, according to those who were briefed on the plan. If a certain number of photos are marked as suspicious, Apple will allow you to decrypt all the suspicious photos and give them to the authorities if they are clearly illegal.\n  Apple plans to scan US iPhones for child abuse imagery  Source link  Apple plans to scan US iPhones for child abuse imagery", "posttime": "2021-08-06 03:43:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u82f9\u679c,iphone,apple,\u513f\u7ae5", "title": "\u82f9\u679c\u8ba1\u5212\u626b\u63cf\u7f8e\u56fd iPhone \u4e2d\u7684\u8650\u5f85\u513f\u7ae5\u56fe\u50cf", "title_en": "Apple plans to scan US iPhones for child abuse imagery", "transed": 1, "url": "https://californianewstimes.com/apple-plans-to-scan-us-iphones-for-child-abuse-imagery/470263/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u82f9\u679c", "iphone", "apple", "\u513f\u7ae5"]}, {"category": "", "categoryclass": "", "imagename": "94ce8da88e8e63ca295744fc252d720f.jpeg", "infoid": 1071607, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7684\u4e00\u4f4d\u6570\u5b66\u5bb6\u5f00\u53d1\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u6c42\u89e3\u4e8c\u6b21\u65b9\u7a0b\u3002\u4ed6\u7684\u79d8\u8bc0\u662f\u5c06\u4e24\u4e2a\u6839\u6982\u62ec\u5728\u4e00\u8d77\uff0c\u800c\u4e0d\u662f\u5c06\u5b83\u4eec\u4fdd\u7559\u4e3a\u5355\u72ec\u7684\u503c\u3002\u6839\u636e\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684\u6280\u672f\u8bc4\u8bba\uff0c\u4e00\u4f4d\u6570\u5b66\u5bb6\u63a8\u5bfc\u51fa\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u4e8c\u6b21\u65b9\u7a0b\u95ee\u9898\u3002\u4e8c\u6b21\u65b9\u7a0b\u662f\u5305\u542b x\u00b2 \u7684\u591a\u9879\u5f0f\uff0c\u6559\u5e08\u4f7f\u7528\u5b83\u4eec\u6765\u6559\u5b66\u751f\u4e00\u6b21\u627e\u5230\u4e24\u4e2a\u89e3\u3002\u7531\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7684 Po-Shen Loh \u535a\u58eb\u5f00\u53d1\u7684\u65b0\u8fc7\u7a0b\u7ed5\u8fc7\u4e86\u4f20\u7edf\u65b9\u6cd5\uff0c\u4f8b\u5982\u5b8c\u6210\u5e73\u65b9\uff0c\u5e76\u5c06\u6c42\u6839\u53d8\u6210\u4e86\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u6d89\u53ca\u66f4\u5c11\u7684\u6b65\u9aa4\uff0c\u4e5f\u66f4\u76f4\u89c2\u3002\u6b64\u5185\u5bb9\u662f\u4ece YouTube \u5bfc\u5165\u7684\u3002\u60a8\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u627e\u5230\u53e6\u4e00\u79cd\u683c\u5f0f\u7684\u76f8\u540c\u5185\u5bb9\uff0c\u6216\u8005\u60a8\u200b\u200b\u53ef\u4ee5\u627e\u5230\u66f4\u591a\u4fe1\u606f\u3002\u4e8c\u6b21\u65b9\u7a0b\u843d\u5165\u4e86\u6559\u80b2\u4e2d\u4e00\u4e2a\u6709\u8da3\u7684\u751c\u751c\u5708\u6d1e\u3002\u5b66\u751f\u4eec\u4ece\u4ee3\u6570\u6216\u9884\u4ee3\u6570\u8bfe\u7a0b\u5f00\u59cb\u5b66\u4e60\u5b83\u4eec\uff0c\u4f46\u5b83\u4eec\u662f\u52fa\u5b50\u5582\u517b\u7684\u4f8b\u5b50\uff0c\u5f88\u5bb9\u6613\u7528\u6574\u6570\u89e3\u6765\u89e3\u51b3\u3002\u52fe\u80a1\u5b9a\u7406\u4e5f\u53d1\u751f\u4e86\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u5728\u5b66\u6821\u91cc\uff0c\u5927\u591a\u6570\u4f8b\u5b50\u6700\u7ec8\u90fd\u4f1a\u89e3\u51fa\u52fe\u80a1\u4e09\u5143\u7ec4\uff0c\u8fd9\u662f\u4e00\u5c0f\u7ec4\u6574\u6570\u503c\uff0c\u53ef\u4ee5\u5b8c\u5168\u878d\u5165\u52fe\u80a1\u5b9a\u7406\u3002\u6b64\u5185\u5bb9\u662f\u4ece {embed-name} \u5bfc\u5165\u7684\u3002\u60a8\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u627e\u5230\u53e6\u4e00\u79cd\u683c\u5f0f\u7684\u76f8\u540c\u5185\u5bb9\uff0c\u6216\u8005\u60a8\u200b\u200b\u53ef\u4ee5\u627e\u5230\u66f4\u591a\u4fe1\u606f\u3002\n\u4e8c\u6b21\u65b9\u7a0b\u662f\u591a\u9879\u5f0f\uff0c\u610f\u601d\u662f\u6570\u5b66\u672f\u8bed\u4e32\u3002\u50cf\u201cx + 4\u201d\u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u662f\u591a\u9879\u5f0f\u3002\u5b83\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u4efb\u610f\u7ec4\u5408\u7684\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u53d8\u91cf\u7684\u5e42\u3002\u6240\u4ee5 x + 4 \u662f\u63cf\u8ff0\u4e00\u6761\u76f4\u7ebf\u7684\u8868\u8fbe\u5f0f\uff0c\u800c (x + 4)\u00b2 \u662f\u4e00\u6761\u66f2\u7ebf\u3002\u7531\u4e8e\u4e00\u6761\u7ebf\u4ec5\u7a7f\u8fc7\u4efb\u4f55\u7279\u5b9a\u7eac\u5ea6\u6216\u7ecf\u5ea6\u4e00\u6b21\uff0c\u56e0\u6b64\u5176\u89e3\u53ea\u662f\u4e00\u4e2a\u503c\u3002\u5982\u679c\u4f60\u6709 x\u00b2\uff0c\u8fd9\u610f\u5473\u7740\u4e24\u4e2a\u6839\u503c\uff0c\u5f62\u72b6\u50cf\u4e00\u4e2a\u5706\u5f62\u6216\u5f27\u5f62\uff0c\u6709\u4e24\u4e2a\u4ea4\u53c9\u70b9\u3002 Loh \u535a\u58eb\u7684\u65b9\u6cd5\uff08\u4ed6\u4e5f\u5728\u4ed6\u7684\u7f51\u7ad9\u4e0a\u8be6\u7ec6\u5206\u4eab\u4e86\u8be5\u65b9\u6cd5\uff09\u4f7f\u7528\u6bcf\u4e2a\u4e8c\u6b21\u65b9\u7a0b\u7684\u4e24\u4e2a\u6839\u7684\u601d\u60f3\u6765\u5236\u4f5c\u63a8\u5bfc\u8fd9\u4e9b\u6839\u7684\u66f4\u7b80\u5355\u65b9\u6cd5\u3002\u4ed6\u610f\u8bc6\u5230\u4ed6\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u63cf\u8ff0\u4e8c\u6b21\u65b9\u7a0b\u7684\u4e24\u4e2a\u6839\uff1a\u7ec4\u5408\u8d77\u6765\uff0c\u5b83\u4eec\u5e73\u5747\u5230\u67d0\u4e2a\u503c\uff0c\u7136\u540e\u6709\u4e00\u4e2a\u503c z \u663e\u793a\u4efb\u4f55\u989d\u5916\u7684\u672a\u77e5\u503c\u3002\u6211\u4eec\u4e0d\u662f\u641c\u7d22\u4e24\u4e2a\u5355\u72ec\u7684\u3001\u4e0d\u540c\u7684\u503c\uff0c\u800c\u662f\u641c\u7d22\u4e24\u4e2a\u76f8\u540c\u7684\u503c\u3002\u8fd9\u7b80\u5316\u4e86\u5c06\u516c\u5f0f\u76f8\u4e58\u7684\u7b97\u672f\u90e8\u5206\u3002 \u201c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5f53\u6211\u4eec\u505a\u4e00\u4e2a\u56e0\u5f0f\u5206\u89e3\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u4f1a\u8bd5\u56fe\u627e\u5230\u4e24\u4e2a\u4e58\u4ee5 12 \u5e76\u52a0\u8d77\u6765\u4e3a 8 \u7684\u6570\u5b57\uff0c\u201dLoh \u535a\u58eb\u8bf4\u3002\u8fd9\u4e24\u4e2a\u6570\u5b57\u662f\u4e8c\u6b21\u65b9\u7a0b\u7684\u89e3\uff0c\u4f46\u5b66\u751f\u4eec\u9700\u8981\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u6765\u89e3\u5b83\u4eec\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7ecf\u5e38\u4f7f\u7528\u731c\u6d4b\u548c\u68c0\u67e5\u7684\u65b9\u6cd5\u3002\u5982\u679c\u6211\u4eec\u8981\u67e5\u627e\u7684\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\u540e\u7b49\u4e8e 8\uff0c\u5219\u5b83\u4eec\u5fc5\u987b\u4e0e\u5e73\u5747\u503c\u7b49\u8ddd\u3002\u56e0\u6b64\u8fd9\u4e9b\u6570\u5b57\u53ef\u4ee5\u8868\u793a\u4e3a 4\u2013u \u548c 4+u\u3002\u4e58\u6cd5\u65f6\uff0c\u4e2d\u95f4\u9879\u76f8\u4e92\u62b5\u6d88\uff0c\u5f97\u51fa\u65b9\u7a0b 16\u2013u2 = 12\u3002\u6c42\u89e3 u \u65f6\uff0c\u60a8\u4f1a\u770b\u5230\u6b63\u8d1f 2 \u5404\u6709\u6548\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u6574\u6570\u4ee3\u5165\u65b9\u7a0b 4 \u2013u \u548c 4+u\uff0c\u4f60\u4f1a\u5f97\u5230\u4e24\u4e2a\u89e3\uff0c2 \u548c 6\uff0c\u5b83\u4eec\u6c42\u89e3\u539f\u59cb\u591a\u9879\u5f0f\u65b9\u7a0b\u3002\u5b83\u6bd4\u4e8c\u6b21\u516c\u5f0f\u4e2d\u4f7f\u7528\u7684\u7ecf\u5178\u632b\u8d25\u65b9\u6cd5\u66f4\u5feb\u2014\u2014\u800c\u4e14\u4e0d\u9700\u8981\u731c\u6d4b\u3002 \u2014\u2014\u8003\u7279\u5c3c\u00b7\u6797\u5fb7\nLoh \u535a\u58eb\u8ba4\u4e3a\u5b66\u751f\u53ef\u4ee5\u66f4\u76f4\u89c2\u5730\u5b66\u4e60\u8fd9\u79cd\u65b9\u6cd5\uff0c\u90e8\u5206\u539f\u56e0\u662f\u4e0d\u9700\u8981\u7279\u6b8a\u7684\u5355\u72ec\u516c\u5f0f\u3002\u5982\u679c\u5b66\u751f\u80fd\u8bb0\u4f4f\u4e00\u4e9b\u5173\u4e8e\u6839\u7684\u7b80\u5355\u6982\u62ec\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u51b3\u5b9a\u4e0b\u4e00\u6b65\u53bb\u54ea\u91cc\u3002\u5b83\u4ecd\u7136\u5f88\u590d\u6742\uff0c\u4f46\u6ca1\u6709\u90a3\u4e48\u590d\u6742\uff0c\u7279\u522b\u662f\u5982\u679c Loh \u535a\u58eb\u662f\u5bf9\u7684\uff0c\u8fd9\u5c06\u4f7f\u5b66\u751f\u5bf9\u4e8c\u6b21\u65b9\u7a0b\u7684\u5de5\u4f5c\u539f\u7406\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u9002\u7528\u4e8e\u6570\u5b66\u7684\u7406\u89e3\u66f4\u52a0\u987a\u7545\u3002\u4f8b\u5982\uff0c\u7406\u89e3\u5b83\u4eec\u662f\u5fae\u79ef\u5206\u5f00\u59cb\u7684\u5173\u952e\u3002\u5728\u8bfe\u5802\u4e0a\u51c6\u5907\u7684\u4f8b\u5b50\u4e4b\u5916\uff0c\u4e8c\u6b21\u65b9\u6cd5\u5e76\u4e0d\u7b80\u5355\u3002\u771f\u5b9e\u7684\u4f8b\u5b50\u548c\u5e94\u7528\u662f\u6df7\u4e71\u7684\uff0c\u4e11\u964b\u7684\u6839\u7531\u5c0f\u6570\u6216\u65e0\u7406\u6570\u7ec4\u6210\u3002\u4f5c\u4e3a\u4e00\u540d\u5b66\u751f\uff0c\u5f88\u96be\u77e5\u9053\u4f60\u627e\u5230\u4e86\u6b63\u786e\u7684\u7b54\u6848\u3002 Loh \u535a\u58eb\u7684\u65b0\u65b9\u6cd5\u9002\u7528\u4e8e\u73b0\u5b9e\u751f\u6d3b\uff0c\u4f46\u4ed6\u5e0c\u671b\u5b83\u4e5f\u80fd\u5e2e\u52a9\u5b66\u751f\u540c\u65f6\u66f4\u597d\u5730\u7406\u89e3\u4e8c\u6b21\u516c\u5f0f\u3002\u8bb8\u591a\u6570\u5b66\u5b66\u751f\u5728\u7406\u89e3\u7b80\u5355\u7684\u8bfe\u5802\u4f8b\u5b50\u548c\u81ea\u5df1\u5e94\u7528\u60f3\u6cd5\u4e4b\u95f4\u96be\u4ee5\u8de8\u8d8a\u9e3f\u6c9f\uff0cLoh \u535a\u58eb\u5e0c\u671b\u4e3a\u4ed6\u4eec\u642d\u5efa\u4e00\u5ea7\u66f4\u597d\u7684\u6865\u6881\u3002\u6b64\u5185\u5bb9\u7531\u7b2c\u4e09\u65b9\u521b\u5efa\u548c\u7ef4\u62a4\uff0c\u5e76\u5bfc\u5165\u6b64\u9875\u9762\u4ee5\u5e2e\u52a9\u7528\u6237\u63d0\u4f9b\u5176\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u60a8\u53ef\u4ee5\u5728 Piano.io \u4e0a\u627e\u5230\u6709\u5173\u6b64\u5185\u5bb9\u548c\u7c7b\u4f3c\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f", "note_en": "A mathematician at Carnegie Mellon University has developed   an easier way to solve quadratic equations.\n  His secret is in generalizing two roots together instead of keeping them as separate values.\n   A mathematician has derived   an easier way to solve quadratic equation problems, according to MIT&#39;s  Technology Review.\n  Quadratic equations are polynomials that include an x\u00b2, and teachers use them to teach students to find two solutions at once.  The  new process, developed by Dr. Po-Shen Loh at Carnegie Mellon University, goes around traditional methods like completing the square and turns finding roots into a simpler thing involving fewer steps that are also more intuitive.\n  This content is imported from YouTube. You may be able to find the same content in another format, or you may be able to find more information, at their web site.\n  Quadratic equations fall into an interesting donut hole in education. Students learn them beginning in algebra or pre-algebra classes, but they\u2019re spoonfed examples that work out very easily and with whole integer solutions. The same thing happens with the Pythagorean theorem, where in school, most examples end up solving out to   Pythagorean triples, the small set of integer values that work cleanly into the Pythagorean theorem.\n This content is imported from {embed-name}. You may be able to find the same content in another format, or you may be able to find more information, at their web site.\n  Quadratic equations are polynomials, meaning strings of math terms. An expression like \u201cx + 4\u201d is a polynomial. They can have one or many variables in any combination, and the magnitude of them is decided by what power the variables are taken to. So x + 4 is an expression describing a straight line, but (x + 4)\u00b2 is a curve.\n  Since a line crosses just once through any particular latitude or longitude, its solution is just one value. If you have x\u00b2, that means two root values, in a shape like a circle or arc that makes two crossings.\n  Dr. Loh\u2019s method, which he also  shared in detail on his website, uses the idea of the two roots of every quadratic equation to make a simpler way to derive those roots. He realized he could describe the two roots of a quadratic equation this way: Combined, they average out to a certain value, then there\u2019s a value z that shows any additional unknown value. Instead of searching for two separate, different values, we\u2019re searching for two identical values to begin with. This simplifies the arithmetic part of multiplying the formula out.\n   \u201cNormally, when we do a factoring problem, we are trying to find two numbers that multiply to 12 and add to 8,\u201d Dr. Loh said. Those two numbers are the solution to the quadratic, but it takes students a lot of time to solve for them, as they\u2019re often using a guess-and-check approach.\n  If the two numbers we\u2019re looking for, added together, equal 8, then they must be equidistant from their average. So the numbers can be represented as 4\u2013u and 4+u.\n When you multiply, the middle terms cancel out and you come up with the equation 16\u2013u2 = 12. When solving for u, you\u2019ll see that positive and negative 2 each work, and when you substitute those integers back into the equations 4\u2013u and 4+u, you get two solutions, 2 and 6, which solve the original polynomial equation.\n It\u2019s quicker than the classic foiling method used in the quadratic formula\u2014and there\u2019s no guessing required. \u2014Courtney Linder\n  Dr. Loh believes students can learn this method more intuitively, partly because there\u2019s not a special, separate formula required. If students can remember some simple generalizations about roots, they can decide where to go next.\n     It\u2019s still complicated, but it\u2019s less complicated, especially if Dr. Loh is right that this will smooth students\u2019s understanding of how quadratic equations work and how they fit into math. Understanding them is key to the beginning ideas of precalculus, for example.\n  Outside of classroom-ready examples, the quadratic method isn&#39;t simple. Real examples and applications are messy, with ugly roots made of decimals or irrational numbers. As a student, it&#39;s hard to know you&#39;ve found the right answer. Dr. Loh\u2019s new method is for real life, but he hopes it will also help students feel they understand the quadratic formula better at the same time.\n Many math students struggle to move across the gulf in understanding between simple classroom examples and applying ideas themselves, and Dr. Loh wants to build them a better bridge.\n     This content is created and maintained by a third party, and imported onto this page to help users provide their email addresses. You may be able to find more information about this and similar content at piano.io", "posttime": "2021-08-06 03:43:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u6c42\u89e3,finds,\u65b9\u6cd5", "title": "\u6570\u5b66\u5bb6\u627e\u5230\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u6c42\u89e3\u4e8c\u6b21\u65b9\u7a0b (2020)", "title_en": "Mathematician Finds Easier Way to Solve Quadratic Equations (2020)", "transed": 1, "url": "https://www.popularmechanics.com/science/math/a30152083/solve-quadratic-equations/", "via": "", "real_tags": ["2020", "\u6c42\u89e3", "finds", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "c1583e4636f34490f8587f720fd983d1.gif", "infoid": 1071606, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u662f\u4ecb\u7ecd\u6211\u4eec\u5728 Cord \u4f7f\u7528\u7684\u201c\u5fae\u6a21\u578b\u201d\u65b9\u6cd5\u6765\u81ea\u52a8\u5316\u6570\u636e\u6ce8\u91ca\u3002\u6211\u4eec\u5df2\u5c06\u8fd9\u79cd\u65b9\u6cd5\u90e8\u7f72\u5728\u5e7f\u6cdb\u9886\u57df\u7684\u8ba1\u7b97\u673a\u89c6\u89c9\u6807\u8bb0\u4efb\u52a1\u4e0a\uff0c\u5305\u62ec\u533b\u5b66\u6210\u50cf\u3001\u519c\u4e1a\u3001\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u548c\u536b\u661f\u6210\u50cf\u3002 TLDR\uff1b\u5185\u5bb9\uff1a\u5e94\u7528\u4e8e\u5c0f\u8303\u56f4\u6570\u636e\u5206\u5e03\u7684\u4f4e\u504f\u5dee\u6a21\u578b\u3002\u5982\u4f55\uff1a\u5728\u72ed\u4e49\u4efb\u52a1\u7684\u5c11\u6570\u793a\u4f8b\u4e0a\u8fc7\u5ea6\u62df\u5408\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u3002\u539f\u56e0\uff1a\u8282\u7701\u6570\u767e\u5c0f\u65f6\u7684\u624b\u5de5\u8d34\u6807\u65f6\u95f4\u3002\u8fd9\u5f53\u7136\u53d6\u51b3\u4e8e\u4f60\u7684\u76ee\u6807\u3002\u4e5f\u8bb8\u60a8\u60f3\u8981\u4e00\u4e2a\u901a\u7528\u6a21\u578b\uff0c\u53ef\u4ee5\u540c\u65f6\u68c0\u6d4b\u51fa\u4e9a\u5f53\u00b7\u97e6\u65af\u7279\u3001\u8fc8\u514b\u5c14\u00b7\u57fa\u987f\u548c\u8759\u8760\u4fa0\u7684\u8759\u8760\u4fa0\u3002\u4e5f\u8bb8\u4f60\u9700\u8981\u5b83\u5305\u62ec\u4e00\u4e2a\u5e03\u9c81\u65af\u97e6\u6069\u63a2\u6d4b\u5668\uff0c\u5b83\u4e5f\u53ef\u4ee5\u8bc6\u522b\u9762\u5177\u540e\u9762\u7684\u4eba\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u60f3\u8981\u4e00\u4e2a\u6a21\u578b\u5728\u4e00\u4e2a\u7535\u5f71\u4e2d\u7684\u4e00\u4e2a\u573a\u666f\u4e2d\u8ddf\u968f Christian Bale \u8759\u8760\u4fa0\uff0c\u90a3\u4e48\u7b54\u6848\u662f\u2026\u2026\u4e94\u4e2a\u5e26\u6807\u7b7e\u7684\u56fe\u50cf\u3002\u7528\u4e8e\u751f\u6210\u4e0a\u8ff0\u6a21\u578b\u63a8\u7406\u7ed3\u679c\u7247\u6bb5\u7684\u6a21\u578b\u4f7f\u7528\u4ee5\u4e0b\u4e94\u4e2a\u6807\u7b7e\u8fdb\u884c\u8bad\u7ec3\uff1a\u73b0\u5728\uff0c\u8fd9\u662f\u5426\u56de\u7b54\u4e86\u6700\u521d\u7684\u95ee\u9898\uff1f\u8fd9\u4e2a\u6a21\u578b\u53ea\u662f\u90e8\u5206\u8759\u8760\u4fa0\u6a21\u578b\u3002\u5b83\u5728 Val Kilmer \u6216 George Clooney Batmen \u4e0a\u8868\u73b0\u4e0d\u4f73\uff0c\u4f46\u5b83\u5728\u7279\u5b9a\u7528\u4f8b\u4e2d\u4ecd\u7136\u6709\u6548\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u4f1a\u79f0\u5176\u4e3a\u8759\u8760\u4fa0\u6a21\u578b\uff0c\u800c\u662f\u8759\u8760\u4fa0\u5fae\u578b\u6a21\u578b\u3002\u6211\u4eec\u5728 Cord \u7684\u65e9\u671f\u5c31\u5f00\u59cb\u4f7f\u7528\u5fae\u6a21\u578b\uff0c\u5f53\u65f6\u6211\u4eec\u53ea\u5173\u6ce8\u89c6\u9891\u6570\u636e\u3002\u6211\u4eec\u5728\u5c1d\u8bd5\u4e0d\u540c\u7684\u5efa\u6a21\u6846\u67b6\u6765\u81ea\u52a8\u5206\u7c7b\u80c3\u80a0\u75c5\u5b66\u89c6\u9891\u65f6\u5076\u7136\u53d1\u73b0\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff08\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u627e\u5230\u66f4\u591a\u76f8\u5173\u4fe1\u606f\uff09\u3002\u6211\u4eec\u6700\u521d\u7684\u7b56\u7565\u662f\u5c1d\u8bd5\u4e00\u79cd\u201c\u7ecf\u5178\u201d\u6570\u636e\u79d1\u5b66\u65b9\u6cd5\uff0c\u4ece\u5e7f\u6cdb\u5206\u5e03\u7684\u89c6\u9891\u4e2d\u91c7\u6837\u5e27\uff0c\u8bad\u7ec3\u6a21\u578b\uff0c\u7136\u540e\u5bf9\u4e0d\u540c\u89c6\u9891\u96c6\u7684\u6837\u672c\u5916\u56fe\u50cf\u8fdb\u884c\u6d4b\u8bd5\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8fd9\u4e9b\u6a21\u578b\u5e76\u8861\u91cf\u4e0e\u4eba\u5de5\u6807\u8bb0\u76f8\u6bd4\u6211\u4eec\u7684\u6ce8\u91ca\u6548\u7387\u6539\u8fdb\u3002\u7136\u800c\uff0c\u6211\u4eec\u5728\u5b9e\u9a8c\u4e2d\u610f\u8bc6\u5230\uff0c\u5728\u4ec5\u4ece\u4e00\u4e2a\u89c6\u9891\u4e2d\u667a\u80fd\u9009\u62e9\u7684\u4e00\u5c0f\u7ec4\u5e27\u4e0a\u8bad\u7ec3\u7684\u5206\u7c7b\u6a21\u578b\u5df2\u7ecf\u4ea7\u751f\u4e86\u5f88\u597d\u7684\u7ed3\u679c\u3002\u6211\u4eec\u8fd8\u6ce8\u610f\u5230\uff0c\u968f\u7740\u65f6\u4ee3\u6570\u91cf\u7684\u589e\u52a0\uff0c\u6211\u4eec\u7684\u6ce8\u91ca\u6548\u7387\u53d8\u5f97\u66f4\u9ad8\u3002\u8fd9\u4e0e\u6211\u4eec\u5bf9\u826f\u597d\u6570\u636e\u79d1\u5b66\u7684\u4e86\u89e3\u76f8\u53cd\u3002\u6211\u4eec\u4e25\u91cd\u8fc7\u5ea6\u62df\u5408\u4e86\u8fd9\u4e2a\u89c6\u9891\u7684\u6a21\u578b\u3002\u4f46\u5b83\u594f\u6548\u4e86\uff0c\u7279\u522b\u662f\u5982\u679c\u6211\u4eec\u628a\u5b83\u5206\u89e3\u6210\u6bcf\u4e2a\u89c6\u9891\u90fd\u6709\u81ea\u5df1\u7684\u6a21\u578b\u3002\u6211\u4eec\u79f0\u5b83\u4eec\u4e3a\u5fae\u578b\u6a21\u578b\u3002\u867d\u7136\u8fd9\u662f\u7528\u4e8e\u89c6\u9891\u5e27\u5206\u7c7b\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u6269\u5c55\u4e86\u5b9e\u8df5\uff0c\u5305\u62ec\u5bf9\u8c61\u68c0\u6d4b\u3001\u5206\u5272\u548c\u59ff\u6001\u4f30\u8ba1\u7b49\u4efb\u52a1\u3002\n\u6700\u7b80\u800c\u8a00\u4e4b\uff0c\u5fae\u6a21\u578b\u662f\u9488\u5bf9\u7279\u5b9a\u4efb\u52a1\u6216\u7279\u5b9a\u6570\u636e\u8fdb\u884c\u8fc7\u5ea6\u8bad\u7ec3\u7684\u7279\u5b9a\u6ce8\u91ca\u6a21\u578b\u3002\u5b83\u4eec\u662f\u6545\u610f\u8fc7\u5ea6\u62df\u5408\u7684\u6a21\u578b\uff0c\u56e0\u6b64\u5b83\u4eec\u5728\u4e00\u822c\u95ee\u9898\u4e0a\u8868\u73b0\u4e0d\u4f73\uff0c\u4f46\u5728\u81ea\u52a8\u5316\u6570\u636e\u6ce8\u91ca\u7684\u67d0\u4e00\u65b9\u9762\u975e\u5e38\u6709\u6548\u3002\u56e0\u6b64\uff0c\u4ed6\u4eec\u88ab\u8bbe\u8ba1\u4e3a\u53ea\u64c5\u957f\u4e00\u4ef6\u4e8b\u3002\u4e3a\u4e86\u5728\u5b9e\u8df5\u4e2d\u4f7f\u7528\u5b83\u4eec\uff0c\u6211\u4eec\u5c06\u8bb8\u591a\u7ec4\u5408\u5728\u4e00\u8d77\u4ee5\u81ea\u52a8\u5316\u5168\u9762\u7684\u6ce8\u91ca\u8fc7\u7a0b\u3002 \u201c\u4f20\u7edf\u201d\u6a21\u578b\u548c\u5fae\u89c2\u6a21\u578b\u4e4b\u95f4\u7684\u533a\u522b\u4e0d\u5728\u4e8e\u5b83\u4eec\u7684\u67b6\u6784\u6216\u53c2\u6570\uff0c\u800c\u5728\u4e8e\u5b83\u4eec\u7684\u5e94\u7528\u9886\u57df\u3001\u7528\u4e8e\u751f\u6210\u5b83\u4eec\u7684\u8fdd\u53cd\u76f4\u89c9\u7684\u6570\u636e\u79d1\u5b66\u5b9e\u8df5\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u6700\u7ec8\u7528\u9014\u3002\u4e3a\u4e86\u4ecb\u7ecd\u5fae\u578b\u6a21\u578b\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u6211\u4eec\u5c06\u91c7\u7528\u4e00\u4e2a\u9ad8\u5ea6\u7b80\u5316\u7684\u73a9\u5177\u6a21\u578b\uff0c\u5b83\u53ef\u4ee5\u66f4\u6e05\u695a\u5730\u4e86\u89e3\u5b83\u4eec\u4e0b\u9762\u7684\u57fa\u7840\u3002\u673a\u5668\u5b66\u4e60\u7684\u6838\u5fc3\u662f\u66f2\u7ebf\u62df\u5408\uff0c\u53ea\u662f\u5728\u5177\u6709\u8bb8\u591a\u53c2\u6570\u7684\u975e\u5e38\u9ad8\u7684\u7ef4\u5ea6\u7a7a\u95f4\u4e2d\u3002\u56e0\u6b64\uff0c\u5c06\u6784\u5efa\u6a21\u578b\u7684\u672c\u8d28\u63d0\u70bc\u4e3a\u6700\u7b80\u5355\u7684\u53ef\u80fd\u60c5\u51b5\u4e4b\u4e00\uff0c\u5373\u4e00\u7ef4\u6807\u7b7e\uff0c\u662f\u6709\u76ca\u7684\u3002\u4e0b\u9762\u7684\u5185\u5bb9\u7a0d\u5fae\u6709\u70b9\u6280\u672f\u6027\uff0c\u8bf7\u968f\u610f\u8df3\u8fc7\u3002\u60a8\u6ca1\u6709\u66f2\u7ebf\u7684 xy \u5750\u6807\uff0c\u4e5f\u65e0\u6cd5\u5b9e\u9645\u67e5\u770b\u6574\u4e2a\u66f2\u7ebf\uff0c\u60a8\u53ea\u80fd\u624b\u52a8\u91c7\u6837 x \u7684\u503c\uff0c\u5e76\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u503c\uff0c\u60a8\u5fc5\u987b\u67e5\u627e\u4e0e\u4e4b\u5173\u8054\u7684\u76f8\u5e94 y \u503c\uff08\u201c\u6807\u7b7e\u201d\u4e3a x)\u3002\u60a8\u60f3\u7528\u4e00\u4e2a\u6a21\u578b\u62df\u5408\u6574\u6761\u66f2\u7ebf\uff0c\u4f46\u5bc6\u96c6\u91c7\u6837\u70b9\u7684\u6210\u672c\u592a\u9ad8\u4e86\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528\u4ec0\u4e48\u7b56\u7565\uff1f\u4e00\u79cd\u7b56\u7565\u662f\u5c06\u9ad8\u5ea6\u591a\u9879\u5f0f\u62df\u5408\u5230\u66f2\u7ebf\u57df\u4e0a\u7684\u4e00\u4e9b\u521d\u59cb\u91c7\u6837\u70b9\u96c6\uff0c\u968f\u673a\u91cd\u65b0\u91c7\u6837\uff0c\u8bc4\u4f30\u8bef\u5dee\uff0c\u5e76\u6839\u636e\u9700\u8981\u66f4\u65b0\u591a\u9879\u5f0f\u3002\u95ee\u9898\u662f\u6bcf\u6b21\u68c0\u67e5\u65b0\u6837\u672c\u70b9\u65f6\u90fd\u5fc5\u987b\u91cd\u65b0\u62df\u5408\u6574\u6761\u66f2\u7ebf\u3002\u6bcf\u4e00\u70b9\u90fd\u4f1a\u76f8\u4e92\u5f71\u54cd\u3002\u60a8\u7684\u6a21\u578b\u4e5f\u5fc5\u987b\u975e\u5e38\u590d\u6742\u624d\u80fd\u5904\u7406\u66f2\u7ebf\u4e2d\u7684\u6240\u6709\u4e0d\u540c\u53d8\u5316\u3002\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u53e6\u4e00\u79cd\u7b56\u7565\u662f\u5728\u5c40\u90e8\u533a\u57df\u91c7\u6837\uff0c\u62df\u5408\u4e00\u4e2a\u8fd1\u4f3c\u8be5\u533a\u57df\u7684\u6a21\u578b\uff0c\u7136\u540e\u5c06\u6574\u4e2a\u57df\u4e2d\u7684\u8bb8\u591a\u5c40\u90e8\u533a\u57df\u62fc\u63a5\u5728\u4e00\u8d77\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5c06\u6a21\u578b\u62df\u5408\u5230\u4e0b\u9762\u8fd9\u4e2a\u5f2f\u66f2\u7684\u90e8\u5206\uff1a\n\u8fd9\u662f\u6837\u6761\u63d2\u503c\uff0c\u4e00\u79cd\u5e38\u7528\u7684\u66f2\u7ebf\u62df\u5408\u6280\u672f\u3002\u6bcf\u4e2a\u6837\u6761\u90fd\u6545\u610f\u201c\u8fc7\u62df\u5408\u201d\u5230\u5c40\u90e8\u533a\u57df\u3002\u5b83\u4e0d\u4f1a\u5f88\u597d\u5730\u5916\u63a8\u5230\u5b83\u7684\u9886\u57df\u4e4b\u5916\uff0c\u4f46\u5b83\u4e0d\u662f\u5fc5\u987b\u7684\u3002\u8fd9\u662f\u5fae\u89c2\u6a21\u578b\u7684\u6982\u5ff5\u57fa\u7840\uff0c\u8868\u73b0\u5728\u4f4e\u7ef4\u7a7a\u95f4\u4e2d\u3002\u8fd9\u4e9b\u5355\u72ec\u7684\u6837\u6761\u5355\u5143\u7c7b\u4f3c\u4e8e\u6211\u4eec\u7528\u6765\u81ea\u52a8\u5316 x \u503c\u6807\u8bb0\u7684\u201c\u5fae\u6a21\u578b\u201d\u3002\u66f4\u4e00\u822c\u7684\u60c5\u51b5\u9075\u5faa\u7c7b\u4f3c\u7684\u6838\u5fc3\u903b\u8f91\uff0c\u4f46\u6709\u4e00\u4e9b\u989d\u5916\u7684\u5fae\u5999\u4e4b\u5904\uff08\u4f8b\u5982\u5229\u7528\u8fc1\u79fb\u5b66\u4e60\u548c\u4f18\u5316\u91c7\u6837\u7b56\u7565\uff09\u3002\u4e3a\u4e86\u81ea\u52a8\u5316\u5b8c\u6574\u7684\u8ba1\u7b97\u673a\u89c6\u89c9\u6ce8\u91ca\u8fc7\u7a0b\uff0c\u6211\u4eec\u8fd8\u50cf\u88c5\u914d\u7ebf\u4e00\u6837\u5c06\u5fae\u578b\u6a21\u578b\u201c\u7f1d\u5408\u201d\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u5c06\u5f31\u6a21\u578b\u96c6\u6210\u5728\u4e00\u8d77\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u63a8\u7406\u7ed3\u679c\u662f\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u5f88\u957f\u65f6\u95f4\u7684\u60f3\u6cd5\u3002\u8fd9\u7565\u6709\u4e0d\u540c\u3002\u6211\u4eec\u4e0d\u4f1a\u4e3a\u5355\u4e2a\u9884\u6d4b\u5c06\u5fae\u89c2\u6a21\u578b\u5e73\u5747\u5728\u4e00\u8d77\uff0c\u6211\u4eec\u8ba9\u6bcf\u4e2a\u6a21\u578b\u81ea\u5df1\u5904\u7406\u9884\u6d4b\u3002\u5fae\u578b\u6a21\u578b\u4e5f\u4e0d\u4ec5\u4ec5\u662f\u201c\u5f31\u5b66\u4e60\u8005\u201d\u3002\u4ed6\u4eec\u53ea\u662f\u5bf9\u6570\u636e\u5206\u5e03\u7684\u8986\u76d6\u8303\u56f4\u6709\u9650\uff0c\u5e76\u4e14\u5bf9\u8be5\u8986\u76d6\u8303\u56f4\u7684\u504f\u5dee\u5f88\u5c0f\u3002\u6211\u4eec\u6b63\u5728\u5229\u7528\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5728\u6ce8\u91ca\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u67d0\u79cd\u5f62\u5f0f\u7684\u4eba\u5de5\u76d1\u7763\u6765\u5c06\u6a21\u578b\u201c\u6307\u5411\u201d\u6b63\u786e\u7684\u57df\u3002\u8fd9\u79cd\u5bf9\u5fae\u6a21\u578b\u9886\u57df\u7684\u6307\u5bfc\u4f7f\u6211\u4eec\u80fd\u591f\u907f\u514d\u4f7f\u7528\u5f88\u5c11\u7684\u4eba\u5de5\u6807\u7b7e\u6765\u5f00\u59cb\u81ea\u52a8\u5316\u6d41\u7a0b\u3002\u6a21\u578b\u53ef\u4ee5\u6839\u636e\u5f62\u5f0f\uff08\u4e00\u79cd\u8fd1\u4f3c\u4e16\u754c\u4e0a\u67d0\u4e9b\u73b0\u8c61\u7684\u53ef\u91cf\u5316\u8868\u793a\uff09\u6216\u529f\u80fd\uff08\u4e00\u79cd\u5e2e\u52a9\u60a8\u505a\u4e8b\u7684\u5de5\u5177\uff09\u6765\u5b9a\u4e49\u3002\u6211\u7684\u89c2\u70b9\u503e\u5411\u4e8e\u540e\u8005\u3002\u4fd7\u8bdd\u8bf4\uff1a\u5fae\u578b\u6a21\u578b\u4e5f\u4e0d\u4f8b\u5916\u3002\u5b83\u4eec\u7684\u7406\u7531\u6765\u81ea\u5728\u5404\u79cd\u9886\u57df\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002\u4e3a\u4e86\u8003\u8651\u5fae\u6a21\u578b\u5728\u6ce8\u91ca\u65b9\u9762\u7684\u5b9e\u9645\u8003\u8651\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u7684\u8759\u8760\u4fa0\u793a\u4f8b\u3002\u4ece\u6211\u4eec\u8bad\u7ec3\u6a21\u578b\u7684\u573a\u666f\u4e2d\u53d6\u4e00\u5343\u4e94\u767e\u5e27\uff0c\u6211\u4eec\u770b\u5230\u8759\u8760\u4fa0\u51fa\u73b0\u5728\u5176\u4e2d\u7684\u5927\u7ea6\u4e00\u534a\u4e2d\u3002\u53cd\u8fc7\u6765\uff0c\u6211\u4eec\u7684\u5fae\u578b\u6a21\u578b\u53ef\u4ee5\u63d0\u53d6\u8fd9\u4e9b\u5b9e\u4f8b\u4e2d\u7684\u5927\u7ea6 70%\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4ec5\u4ece\u4e94\u4e2a\u624b\u52a8\u6ce8\u91ca\u4e2d\u5c31\u83b7\u5f97\u4e86\u5927\u7ea6 500 \u4e2a\u8759\u8760\u4fa0\u6807\u7b7e\u3002\u5f53\u7136\u8fd8\u6709\u66f4\u6b63\u7684\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u6709\u8bef\u62a5\u3002\u8003\u8651\u6765\u81ea\u6211\u4eec\u6a21\u578b\u9009\u53d6\u7684\u573a\u666f\u4e2d\u7684\u201c\u4eba\u9020\u201d\u8759\u8760\u4fa0\u4e4b\u4e00\u7684\u63a8\u7406\u7ed3\u679c\u3002\n\u6211\u4eec\u4e5f\u6709\u53ef\u80fd\u6ca1\u6709\u90a3\u4e48\u7d27\u7684\u8fb9\u754c\u6846\u3002\u7136\u800c\uff0c\u8fd9\u53ea\u662f\u6211\u4eec\u5fae\u6a21\u578b\u7684\u7b2c\u4e00\u904d\u3002\u548c\u666e\u901a\u6a21\u578b\u4e00\u6837\uff0c\u5fae\u6a21\u578b\u4e5f\u4f1a\u7ecf\u8fc7\u51e0\u8f6e\u8fed\u4ee3\u3002\u4e3a\u6b64\uff0c\u4e3b\u52a8\u5b66\u4e60\u662f\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6211\u4eec\u53ea\u4ece\u4e94\u4e2a\u6807\u7b7e\u5f00\u59cb\uff0c\u4f46\u73b0\u5728\u901a\u8fc7\u4e00\u4e9b\u6700\u5c0f\u7684\u6821\u6b63\u548c\u667a\u80fd\u91c7\u6837\uff0c\u6211\u4eec\u6709\u8d85\u8fc7 500 \u4e2a\u6807\u7b7e\u53ef\u4ee5\u7528\u6765\u8bad\u7ec3\u6211\u4eec\u7684\u4e0b\u4e00\u4ee3\u5fae\u6a21\u578b\u3002\u7136\u540e\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u66f4\u5f3a\u5927\u7684\u7248\u672c\u6765\u6539\u8fdb\u6211\u4eec\u7684\u539f\u59cb\u63a8\u7406\u7ed3\u679c\u5e76\u751f\u6210\u66f4\u9ad8\u8d28\u91cf\u7684\u6807\u7b7e\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u53e6\u4e00\u4e2a\u5faa\u73af\u4e4b\u540e\uff0c\u5f53\u8003\u8651\u5230\u4eba\u7c7b\u884c\u4e3a\u7684\u6570\u91cf\u65f6\uff0c\u5305\u62ec\u624b\u52a8\u66f4\u6b63\uff0c\u6211\u4eec\u7684\u8759\u8760\u4fa0\u6807\u7b7e\u6548\u7387\u4e0e\u6211\u4eec\u7684\u5fae\u6a21\u578b\u8fbe\u5230\u4e86 95% \u4ee5\u4e0a\u3002\u5f00\u59cb\u65f6\u95f4\uff1a\u7531\u4e8e\u9700\u8981\u8bad\u7ec3\u7684\u6807\u7b7e\u5f88\u5c11\uff0c\u60a8\u53ef\u4ee5\u5728\u65b0\u9879\u76ee\u7684\u4e94\u5206\u949f\u5185\u5f00\u59cb\u5728\u63a8\u7406\u4e2d\u4f7f\u7528\u5fae\u6a21\u578b\u3002\u8fed\u4ee3\u65f6\u95f4\uff1a\u5feb\u901f\u5165\u95e8\u7684\u5fc5\u7136\u7ed3\u679c\u662f\u8fed\u4ee3\u5468\u671f\u77ed\u3002\u60a8\u53ef\u4ee5\u8fdb\u5165\u6301\u7eed\u6570\u5206\u949f\u800c\u4e0d\u662f\u6570\u5c0f\u65f6\u6216\u6570\u5929\u7684\u4e3b\u52a8\u5b66\u4e60\u5faa\u73af\u3002\u539f\u578b\u8bbe\u8ba1\uff1a\u77ed\u8fed\u4ee3\u5468\u671f\u6709\u52a9\u4e8e\u5feb\u901f\u6a21\u578b\u5b9e\u9a8c\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5fae\u578b\u6a21\u578b\u4f5c\u4e3a\u4eba\u4eec\u6b63\u5728\u6784\u5efa\u7684\u672a\u6765\u751f\u4ea7\u6a21\u578b\u7684\u975e\u5e38\u6709\u7528\u7684\u539f\u578b\u3002\u5b83\u4eec\u53ef\u4ee5\u5feb\u901f\u68c0\u67e5\u60f3\u6cd5\u5bf9\u4e8e ML \u9879\u76ee\u7684\u53ef\u884c\u6027\u662f\u5426\u6700\u4f4e\u3002\u867d\u7136\u6211\u4eec\u5728\u4f7f\u7528\u5fae\u6a21\u578b\u8fdb\u884c\u6570\u636e\u6ce8\u91ca\u65b9\u9762\u53d6\u5f97\u4e86\u6210\u529f\uff0c\u4f46\u6211\u4eec\u8ba4\u4e3a\u9664\u4e86\u6570\u636e\u7ba1\u9053\u5e94\u7528\u7a0b\u5e8f\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u53ef\u80fd\u6027\u9886\u57df\u3002\u5982\u524d\u6240\u8ff0\uff0c\u4eba\u5de5\u667a\u80fd\u662f\u66f2\u7ebf\u62df\u5408\u3002\u4f46\u66f4\u6839\u672c\u7684\u662f\uff0c\u5b83\u662f\u8ba9\u8ba1\u7b97\u673a\u505a\u4f60\u60f3\u8ba9\u5b83\u505a\u7684\u4e8b\u60c5\uff0c\u8fd9\u53ea\u662f\u7f16\u7a0b\u3002\u5b83\u53ea\u662f\u4e00\u79cd\u7edf\u8ba1\u800c\u975e\u903b\u8f91\u9a71\u52a8\u7684\u7f16\u7a0b\u5f62\u5f0f\u3002 \u201c\u6b63\u5e38\u201d\u7f16\u7a0b\u7684\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7\u903b\u8f91\u8fd0\u7b97\u4e3a\u8f93\u5165\u5230\u8f93\u51fa\u7684\u8f6c\u6362\u5efa\u7acb\u786e\u5b9a\u6027\u7684\u5076\u7136\u6027\u3002\u673a\u5668\u5b66\u4e60\u5728\u9ad8\u5ea6\u590d\u6742\u7684\u9886\u57df\u84ec\u52c3\u53d1\u5c55\uff0c\u5728\u8fd9\u4e9b\u9886\u57df\u4e2d\uff0c\u901a\u8fc7\u4ece\u793a\u4f8b\u4e2d\u5b66\u4e60\u6765\u89e3\u51b3\u903b\u8f91\u6355\u6349\u8fd9\u4e9b\u7a81\u53d1\u4e8b\u4ef6\u7684\u56f0\u96be\u3002\u8fd9\u79cd\u7edf\u8ba1\u7f16\u7a0b\u8303\u5f0f\u4ecd\u5904\u4e8e\u8d77\u6b65\u9636\u6bb5\uff0c\u5c1a\u672a\u5f00\u53d1\u51fa\u56f4\u7ed5\u5b83\u7684\u6982\u5ff5\u6846\u67b6\u4ee5\u4f9b\u53ef\u9760\u7684\u5b9e\u9645\u4f7f\u7528\u3002\n\u4f8b\u5982\uff0c\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u66f4\u5c0f\u7684\u7ec4\u4ef6\u662f\u5927\u591a\u6570\u95ee\u9898\u89e3\u51b3\u6846\u67b6\u7684\u5173\u952e\u8981\u7d20\u4e4b\u4e00\u3002\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8303\u5f0f\u662f\u671d\u7740\u8fd9\u4e2a\u65b9\u5411\u8fdb\u884c\u7684\u7ec4\u7ec7\u8f6c\u53d8\uff0c\u5b83\u52a0\u901f\u4e86\u8f6f\u4ef6\u5de5\u7a0b\u7684\u53d1\u5c55\uff0c\u81f3\u4eca\u4ecd\u5728\u5b9e\u8df5\u4e2d\u3002\u6211\u4eec\u4ecd\u5904\u4e8e\u4eba\u5de5\u667a\u80fd\u7684\u65e9\u671f\uff0c\u4e5f\u8bb8\u5b9e\u4f8b\u5316\u9762\u5411\u6570\u636e\u7684\u7f16\u7a0b\u8303\u5f0f\u5bf9\u4e8e\u7c7b\u4f3c\u7684\u5feb\u901f\u53d1\u5c55\u662f\u5fc5\u8981\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5fae\u89c2\u6a21\u578b\u53ef\u80fd\u5728\u5bf9\u8c61\u8303\u5f0f\u4e2d\u5177\u6709\u81ea\u7136\u7684\u7c7b\u4f3c\u7269\u3002\u590d\u6742\u6570\u636e\u5206\u5e03\u4e2d\u7684\u4e00\u4e2a\u5757\u662f\u201c\u5bf9\u8c61\u7b49\u4ef7\u7269\u201d\uff0c\u5fae\u6a21\u578b\u662f\u8be5\u5bf9\u8c61\u7684\u5b9e\u4f8b\u3002\u867d\u7136\u8fd9\u4e9b\u60f3\u6cd5\u8fd8\u4e3a\u65f6\u5c1a\u65e9\uff0c\u4f46\u5b83\u4eec\u4e0e\u4ee5\u6570\u636e\u4e3a\u4e2d\u5fc3\u7684\u4eba\u5de5\u667a\u80fd\u7684\u65b0\u91cd\u70b9\u76f8\u543b\u5408\u3002\u5f00\u53d1\u7f16\u6392\u8fd9\u4e9b\u201c\u6570\u636e\u5bf9\u8c61\u201d\u7684\u5de5\u5177\u662f\u4e0b\u4e00\u4ee3\u4eba\u5de5\u667a\u80fd\u57fa\u7840\u8bbe\u65bd\u7684\u8d1f\u62c5\u3002\u6211\u4eec\u624d\u521a\u521a\u5f00\u59cb\uff0c\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\u3002", "note_en": "The purpose of this post is to introduce the \u201cmicro-model\u201d methodology we use at   Cord  to automate data annotation. We have deployed this approach on computer vision labelling tasks across a wide range of domains including medical imaging, agriculture, autonomous vehicles, and satellite imaging.\n TLDR;  What: Low bias models applied to a small domain of a data distribution.  How: Overfitting deep learning models on a handful of examples of a narrowly defined task.  Why: Saving hundreds of hours of hand labelling.\n   This o  f course depends on your goal. Maybe you want a general purpose model that can detect the Batmen of Adam West, Michael Keaton, and Batfleck all in one. Maybe you need it to include a Bruce Wayne detector that can also identify the man behind the mask.\n But if you want a model that follows the Christian Bale Batman in one movie, in one scene, the answer is\u2026 five labelled images. The model used to produce the snippet of model inference results above was trained with the five labels below:\n  Now, does this answer the initial question? This model is only a  partial Batman model. It doesn\u2019t perform that well on the Val Kilmer or George Clooney Batmen, but it is still functional with a specific use case. We thus won\u2019t call it a Batman model, but instead a Batman  micro-model.\n  We started using micro-models in the early days of Cord when our focus was purely on video data. We stumbled upon the idea when trying out different modelling frameworks to automate the classification of gastroenterology videos (you can find more about that  here). Our initial strategy was to try a \u201cclassical\u201d data science approach of sampling frames from a wide distribution of videos, training a model, and then testing on out-of-sample images of a different set of videos. We would then use these models and measure our annotation efficiency improvement compared to human labelling. We realized in experiments, however, that a classification model trained on a small set of intelligently selected frames from  only one video already produced strong results. We also noticed that as we turned the number of epochs up, our annotation efficiencies got higher.\n This was contrary to what we knew about good data science; we were grossly overfitting a model to this video. But it worked, especially if we broke it up such that each video had its own model. We called them micro-models. While this was for video frame classification, we have since extended the practice to include tasks such as object detection, segmentation, and pose estimation.\n  Most succinctly,  micro-models are annotation specific models that are overtrained to a particular task or particular piece of data. They are  purposefully overfit models such that they don\u2019t perform well on general problems, but are very effective in automating one aspect of your data annotation. They are thus designed to only be good at one thing. To use them in practice, we ensemble many together to automate a comprehensive annotation process.\n  The distinction between a \u201ctraditional\u201d model and a micro-model is not in their architecture or parameters, but in their domain of application, the counter-intuitive data science practices that are used to produce them, and their eventual end uses.\n  To cover  how micro-models work, we will take a highly simplified toy model that can give a clearer insight into the underpinnings beneath them. Machine learning at its core is curve-fitting, just in a very high dimensional space with many parameters. It is thus instructive to distill the essence of building a model to one of the simplest possible cases, one-dimensional labelling.  The following is  slightly more technical, feel free to skip ahead.\n  You don\u2019t have the x-y coordinates of the curve and can\u2019t actually see the curve as a whole, you can only manually sample values of x and for each one you have to look up the corresponding y value associated with it (the \u201clabel\u201d for x).\n  You want to fit the whole curve with one model, but it is too expensive to densely sample points to do so. What strategies can you use here?\n One strategy is fitting a high degree polynomial to some initial set of sampled points across the domain of the curve, re-sampling at random , evaluating the error, and updating the polynomial as necessary. The issue is that you will have to re-fit the whole curve each time new sample points are checked. Every point will affect every other. Your model will also have to be quite complex to handle all the different variations in the curve.\n Another strategy, which resolves these problems, is to sample in a local region, fit a model that approximates just that region, and then stitch together many of these local regions over the entire domain. We can try to fit a model to just this curved piece below for instance:\n  This is  spline interpolation, a common technique for curve-fitting. Each spline is purposefully \u201coverfit\u201d to a local region. It will not extrapolate well beyond its domain, but it doesn\u2019t have to. This is the conceptual basis for micro-models, manifested in a low dimensional space. These individual spline units are analogous to \u201cmicro-models\u201d that we are using to automate our x-value labelling.\n The more general case follows similar core logic with some additional subtleties(like utilizing transfer learning and optimizing sampling strategies). To automate a full computer vision annotation process, we also \u201cstitch\u201d micro-models together like an assembly line. Note, ensembling weak models together to achieve better inference results is an idea that has been around for a long time. This is slightly different. We are not averaging micro-models together for a single prediction, we let each one handle predictions on their own. Micro-models are also not just \u201cweak learners.\u201d They just have limited coverage over a data distribution and exhibit  very low bias over that coverage.\n We are leveraging the fact that during an annotation process, we have access to some form of human supervision to \u201cpoint\u201d the models to the correct domain. This guidance over the domain of the micro-model allows us to get away with using very few human labels to start automating a process.\n  Models can be defined based on  form (a quantifiable representation approximating some phenomena in the world) or on  function (a tool that helps you do stuff). My view leans toward the latter. As the common quote goes:\n  Micro-models are no different. Their justification flows from using them in applications along a variety of domains.\n To consider the practical considerations of micro-models with regards to annotation, let\u2019s look at our Batman example. Taking fifteen hundred frames from the scene we trained our model on, we see that Batman is present in about half of them. Our micro-model in turn picks up about 70% of these instances. We thus get around  five hundred Batman labels from only  five manual annotations.\n There are of course issues of correction. We have false positives for instance. Consider the inference result of one of the \u201cfaux\u201d Batmen from the scene that our model picks up on.\n  We also have bounding boxes that are not as tight as they could be. This is all, however, with just the first pass of our micro-model. Like normal models, micro-models will go through a few rounds of iteration. For this, active learning is the best solution.\n We only started with five labels, but now with some minimal correction and smart sampling, we have more than five hundred labels to work with to train the next generation of our micro-model. We then use this more powerful version to improve on our original inference results and produce higher quality labels. After another loop of this process, when accounting for number of human actions, including manual corrections, our Batman label efficiency with our micro-model gets to over 95%.\n   Time to get started: You can start using micro-models in inference within five minutes of a new project due to requiring so few labels to train.\n Iteration time: A corollary to the speed of getting started is the short iteration cycle. You can get into active learning loops that are minutes long rather than hours or days.\n Prototyping: Short iteration cycles facilitate rapid model experimentation. We have seen micro-models serve as very useful prototypes for the future production models people are building. They are quick checks if ideas are minimally feasible for an ML project.\n  While we have found success in using micro-models for data annotation, we think there is also a realm of possibility beyond just data pipeline applications. As mentioned before, AI is curve fitting. But even more fundamentally, it is getting a computer to do something you want it to do, which is simply programming. It is just a form of programming that is statistically rather than logically driven.\n \u201cNormal\u201d programming works by establishing deterministic contingencies for the transformation of inputs to outputs via logical operations. Machine learning thrives in high complexity domains where the difficulty in logically capturing these contingencies is supplanted by learning from examples. This  statistical programming paradigm is still in its infancy and hasn\u2019t developed the conceptual frameworks around it for robust practical use yet.\n For example, factorization of problems into smaller components is one of the key elements to most problem solving frameworks. The object oriented programming paradigm was an organziational shift in this direction that accelerated the development of software engineering and is still in practice today. We are still in the early days of AI, and perhaps instantiating a   data-oriented programming paradigm is necessary for similar rapid progression.\n In this context, micro-models might have a natural analogue in the object paradigm. One lump in a complex data distribution is an \u201cobject equivalent\u201d with the micro-model being an instantiation of that object. While these ideas are still early, they coincide well with the new emphasis on  data-centric AI. Developing the tools to orchestrate these \u201cdata objects\u201d is the burden for the next generation of AI infrastructure. We are only getting started, and still have a long way to go.", "posttime": "2021-08-06 03:42:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6a21\u578b,models", "title": "\u5fae\u6a21\u578b\uff1a\u6709\u76ee\u7684\u5730\u8fc7\u5ea6\u62df\u5408\u64c5\u957f\u67d0\u4e00\u7279\u5b9a\u4e8b\u7269\u7684\u6a21\u578b", "title_en": "Micro-models: purposefully overfit models that are good at one specific thing", "transed": 1, "url": "https://eric-landau.medium.com/introduction-to-micro-models-or-how-i-learned-to-stop-worrying-and-love-overfitting-fd8fbe98e99b", "via": "", "real_tags": ["\u6a21\u578b", "models"]}]