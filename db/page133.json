[{"category": "", "categoryclass": "", "imagename": "7ee8051cee40a9bd36c93eba68cd506b.png", "infoid": 1072183, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u89e3\u51b3\u901a\u8fc7\u667a\u80fd\u624b\u673a\u6444\u50cf\u5934\u5236\u4f5c\u53ef\u70b9\u51fb\u7684\u5370\u5237\u94fe\u63a5\uff08\u5373\u4e66\u7c4d\u6216\u6742\u5fd7\u4e2d\u7684\u94fe\u63a5\uff09\u7684\u95ee\u9898\u3002\u6211\u4eec\u5c06\u4f7f\u7528 TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API \u6765\u8bad\u7ec3\u81ea\u5b9a\u4e49\u5bf9\u8c61\u68c0\u6d4b\u5668\u6a21\u578b\uff0c\u4ee5\u5728\u6587\u672c\u56fe\u50cf\uff08\u5373\u667a\u80fd\u624b\u673a\u76f8\u673a\u6d41\uff09\u4e2d\u67e5\u627e\u5b50\u5b57\u7b26\u4e32\uff08\u5982 https://\uff09\u7684\u4f4d\u7f6e\u548c\u8fb9\u754c\u6846\u3002\u6bcf\u4e2a\u94fe\u63a5\u7684\u6587\u672c\uff08https:// \u8fb9\u754c\u6846\u7684\u53f3\u4fa7\u5ef6\u7eed\uff09\u5c06\u4f7f\u7528 Tesseract \u5e93\u8fdb\u884c\u8bc6\u522b\u3002\u672c\u6587\u4e0d\u4f1a\u6d89\u53ca\u8bc6\u522b\u90e8\u5206\uff0c\u4f46\u60a8\u53ef\u4ee5\u5728 links-detector \u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b\u3002 \ud83d\udcdd \u5728 GitHub \u4e0a\u6253\u5f00 links-detector \u5b58\u50a8\u5e93\u4ee5\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\u3002 \u26a0\ufe0f \u76ee\u524d\u8be5\u5e94\u7528\u7a0b\u5e8f\u5904\u4e8e\u5b9e\u9a8c Alpha \u9636\u6bb5\uff0c\u5b58\u5728\u8bb8\u591a\u95ee\u9898\u548c\u9650\u5236\u3002\u6240\u4ee5\u5728\u8fd9\u4e9b\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u4e4b\u524d\uff0c\u4e0d\u8981\u628a\u4f60\u7684\u671f\u671b\u503c\u63d0\u9ad8\u5f97\u592a\u9ad8\ud83e\udd37\ud83c\udffb\u200d\u3002\u6b64\u5916\uff0c\u672c\u6587\u7684\u76ee\u7684\u66f4\u591a\u662f\u5173\u4e8e\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API\uff0c\u800c\u4e0d\u662f\u60f3\u51fa\u4e00\u4e2a\u751f\u4ea7\u5c31\u7eea\u7684\u6a21\u578b\u3002\u5982\u679c\u672c\u6587\u4e2d\u7684 Python \u4ee3\u7801\u5757\u5728\u6b64\u5e73\u53f0\u4e0a\u7f3a\u4e4f\u6b63\u786e\u7684\u683c\u5f0f\uff0c\u8bf7\u968f\u65f6\u9605\u8bfb GitHub \u4e0a\u7684\u6587\u7ae0\u6211\u662f\u4e00\u540d\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u5728\u6211\u81ea\u5df1\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u5c06\u5b66\u4e60\u673a\u5668\u5b66\u4e60\u4f5c\u4e3a\u4e00\u79cd\u7231\u597d\u3002\u4f46\u8fd9\u8fd8\u4e0d\u662f\u95ee\u9898\u3002\n\u6211\u6700\u8fd1\u4e70\u4e86\u4e00\u672c\u5173\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u5370\u5237\u4e66\uff0c\u5f53\u6211\u9605\u8bfb\u524d\u51e0\u7ae0\u65f6\uff0c\u6211\u5728\u6587\u672c\u4e2d\u9047\u5230\u4e86\u8bb8\u591a\u770b\u8d77\u6765\u50cf https://tensorflow.org/ \u6216 https://some-url.com \u7684\u5370\u5237\u94fe\u63a5/which/may/be/even/longer?and_with_params=true\u3002\u6211\u770b\u5230\u4e86\u6240\u6709\u8fd9\u4e9b\u94fe\u63a5\uff0c\u4f46\u7531\u4e8e\u5b83\u4eec\u88ab\u6253\u5370\u51fa\u6765\uff0c\u6211\u65e0\u6cd5\u70b9\u51fb\u5b83\u4eec\uff08\u8c22\u8c22\uff0c\u5e3d\u5b50\uff01\uff09\u3002\u8981\u8bbf\u95ee\u8fd9\u4e9b\u94fe\u63a5\uff0c\u6211\u9700\u8981\u5728\u6d4f\u89c8\u5668\u7684\u5730\u5740\u680f\u4e2d\u9010\u4e2a\u5b57\u7b26\u5730\u952e\u5165\u5b83\u4eec\uff0c\u8fd9\u975e\u5e38\u70e6\u4eba\u4e14\u5bb9\u6613\u51fa\u9519\u3002\u6240\u4ee5\uff0c\u6211\u5728\u60f3\uff0c\u5982\u679c\u7c7b\u4f3c\u4e8e\u4e8c\u7ef4\u7801\u68c0\u6d4b\uff0c\u6211\u4eec\u4f1a\u5c1d\u8bd5\u201c\u6559\u201d\u667a\u80fd\u624b\u673a\uff081\uff09\u68c0\u6d4b\u548c\uff082\uff09\u4e3a\u6211\u4eec\u8bc6\u522b\u6253\u5370\u7684\u94fe\u63a5\u5e76\u4f7f\u5b83\u4eec\u53ef\u70b9\u51fb\uff1f\u8fd9\u6837\uff0c\u60a8\u53ea\u9700\u5355\u51fb\u4e00\u6b21\uff0c\u800c\u4e0d\u662f\u591a\u6b21\u51fb\u952e\u3002 \u201c\u70b9\u51fb\u201d\u6253\u5370\u94fe\u63a5\u7684\u64cd\u4f5c\u590d\u6742\u5ea6\u4ece O(N) \u5230 O(1)\u3002\u6b63\u5982\u6211\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u6211\u53ea\u662f\u5c06\u673a\u5668\u5b66\u4e60\u4f5c\u4e3a\u4e00\u79cd\u7231\u597d\u6765\u5b66\u4e60\u3002\u56e0\u6b64\uff0c\u672c\u6587\u7684\u76ee\u7684\u66f4\u591a\u662f\u5173\u4e8e\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API\uff0c\u800c\u4e0d\u662f\u60f3\u51fa\u4e00\u4e2a\u751f\u4ea7\u5c31\u7eea\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5728 iPhone X \u8fd9\u6837\u7684\u8bbe\u5907\u4e0a\uff0c\u68c0\u6d4b\u548c\u8bc6\u522b\u8fc7\u7a0b\u5e94\u8be5\u5177\u6709\u63a5\u8fd1\u5b9e\u65f6\u7684\u6027\u80fd\uff08\u5373\u6bcf\u79d2 0.5-1 \u5e27\uff09\u3002\u8fd9\u610f\u5473\u7740\u6574\u4e2a\u68c0\u6d4b + \u8bc6\u522b\u8fc7\u7a0b\u6700\u591a\u9700\u8981 2 \u79d2\uff08\u76f8\u5f53\u53ef\u4ee5\u5fcd\u53d7\uff09\u81f3\u4e8e\u4e1a\u4f59\u9879\u76ee\uff09\u3002\u4ec5\u5e94\u652f\u6301\u6d45\u8272\u80cc\u666f\uff08\u5373\u767d\u8272\u6216\u6d45\u7070\u8272\uff09\u4e0a\u7684\u6df1\u8272\u6587\u672c\uff08\u5373\u9ed1\u8272\u6216\u6df1\u7070\u8272\uff09\u3002\u76ee\u524d\u53ea\u652f\u6301 https:// \u94fe\u63a5\uff08\u5982\u679c\u6211\u4eec\u7684\u6a21\u578b\u65e0\u6cd5\u8bc6\u522b http://\u3001ftp://\u3001tcp:// \u6216\u5176\u4ed6\u7c7b\u578b\u7684\u94fe\u63a5\uff0c\u4e5f\u53ef\u4ee5\uff09\u3002\n\u5728\u540e\u7aef\u8fdb\u884c\u94fe\u63a5\u68c0\u6d4b\u548c\u8bc6\u522b\uff0c\u5e76\u5c06\u54cd\u5e94\u53d1\u9001\u56de\u5ba2\u6237\u7aef\u3002 \ud83d\udc9a \u68c0\u6d4b\u6027\u80fd\u4e0d\u53d7\u5ba2\u6237\u7aef\u8bbe\u5907\u9650\u5236\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6c34\u5e73\uff08\u6dfb\u52a0\u66f4\u591a\u5b9e\u4f8b\uff09\u548c\u5782\u76f4\uff08\u6dfb\u52a0\u66f4\u591a\u5185\u6838/GPU\uff09\u6269\u5c55\u670d\u52a1\u6765\u52a0\u5feb\u68c0\u6d4b\u901f\u5ea6\u3002 \ud83d\udc9a \u6a21\u578b\u53ef\u80fd\u66f4\u5927\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u4e0a\u4f20\u5230\u5ba2\u6237\u7aef\u3002\u5728\u5ba2\u6237\u7aef\u4e0b\u8f7d ~10Mb \u6a21\u578b\u53ef\u80fd\u6ca1\u95ee\u9898\uff0c\u4f46\u52a0\u8f7d ~100Mb \u6a21\u578b\u5bf9\u4e8e\u5ba2\u6237\u7aef\u7684\u7f51\u7edc\u548c\u5e94\u7528\u7a0b\u5e8f UX\uff08\u7528\u6237\u4f53\u9a8c\uff09\u6765\u8bf4\u53ef\u80fd\u662f\u4e00\u4e2a\u5927\u95ee\u9898\u3002 \ud83d\udc9a \u53ef\u4ee5\u63a7\u5236\u8c01\u5728\u4f7f\u7528\u6a21\u578b\u3002\u6a21\u578b\u53d7 API \u4fdd\u62a4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u5176\u8c03\u7528\u65b9/\u5ba2\u6237\u7aef\u3002 \ud83d\udc94 \u7cfb\u7edf\u590d\u6742\u6027\u589e\u957f\u3002\u5e94\u7528\u7a0b\u5e8f\u6280\u672f\u5806\u6808\u4ece JavaScript \u53d1\u5c55\u5230 JavaScript + Python\u3002\u6211\u4eec\u9700\u8981\u6ce8\u610f\u81ea\u52a8\u7f29\u653e\u3002 \ud83d\udc94 \u5e94\u7528\u7a0b\u5e8f\u7684\u79bb\u7ebf\u6a21\u5f0f\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u4e92\u8054\u7f51\u8fde\u63a5\u624d\u80fd\u5de5\u4f5c\u3002 \ud83d\udc94 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u8fc7\u591a\u7684 HTTP \u8bf7\u6c42\u53ef\u80fd\u4f1a\u5728\u67d0\u4e2a\u65f6\u5019\u6210\u4e3a\u74f6\u9888\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u63d0\u9ad8\u68c0\u6d4b\u7684\u6027\u80fd\uff0c\u6bd4\u65b9\u8bf4\uff0c\u4ece\u6bcf\u79d2 1 \u5e27\u5230 10+ \u5e27\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u5ba2\u6237\u7aef\u6bcf\u79d2\u5c06\u53d1\u9001 10 \u4e2a\u4ee5\u4e0a\u7684\u8bf7\u6c42\u3002\u5bf9\u4e8e 10 \u4e2a\u5e76\u53d1\u5ba2\u6237\u7aef\uff0c\u6bcf\u79d2\u5df2\u7ecf\u6709 100 \u591a\u4e2a\u8bf7\u6c42\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cHTTP/2 \u53cc\u5411\u6d41\u548c gRPC \u53ef\u80fd\u5f88\u6709\u7528\uff0c\u4f46\u6211\u4eec\u5c06\u56de\u5230\u8fd9\u91cc\u589e\u52a0\u7684\u7cfb\u7edf\u590d\u6742\u6027\u3002\n\ud83d\udc94 \u7cfb\u7edf\u53d8\u5f97\u66f4\u52a0\u6602\u8d35\u3002\u51e0\u4e4e\u6240\u6709\u6765\u81ea Pros \u90e8\u5206\u7684\u79ef\u5206\u90fd\u9700\u8981\u652f\u4ed8\u3002 \ud83d\udc9a \u7cfb\u7edf\u4e0d\u90a3\u4e48\u590d\u6742\u3002\u6211\u4eec\u4e0d\u9700\u8981\u8bbe\u7f6e\u670d\u52a1\u5668\u3001\u6784\u5efa API \u4ee5\u53ca\u5411\u7cfb\u7edf\u5f15\u5165\u989d\u5916\u7684 Python \u5806\u6808\u3002 \ud83d\udc9a \u79bb\u7ebf\u6a21\u5f0f\u662f\u53ef\u80fd\u7684\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u4e0d\u9700\u8981\u4e92\u8054\u7f51\u8fde\u63a5\u5373\u53ef\u5de5\u4f5c\uff0c\u56e0\u4e3a\u6a21\u578b\u5df2\u5b8c\u5168\u52a0\u8f7d\u5230\u8bbe\u5907\u4e0a\u3002\u56e0\u6b64\uff0c\u53ef\u80fd\u4f1a\u6784\u5efa\u6e10\u8fdb\u5f0f Web \u5e94\u7528\u7a0b\u5e8f (PWA) \u6765\u652f\u6301\u8fd9\u4e00\u70b9\u3002 \ud83d\udc9a \u7cfb\u7edf\u201c\u6709\u70b9\u201d\u81ea\u52a8\u7f29\u653e\u3002\u60a8\u62e5\u6709\u7684\u5ba2\u6237\u7aef\u8d8a\u591a\uff0c\u5b83\u4eec\u5e26\u6765\u7684\u5185\u6838\u548c GPU \u5c31\u8d8a\u591a\u3002\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5408\u9002\u7684\u7f29\u653e\u89e3\u51b3\u65b9\u6848\uff08\u66f4\u591a\u5173\u4e8e\u4e0b\u9762\u7684\u7f3a\u70b9\u90e8\u5206\uff09\u3002 \ud83d\udc9a \u7cfb\u7edf\u66f4\u4fbf\u5b9c\u3002\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u7528\u4e8e\u9759\u6001\u8d44\u4ea7\uff08HTML\u3001JS\u3001CSS\u3001\u6a21\u578b\u6587\u4ef6\u7b49\uff09\u7684\u670d\u52a1\u5668\u3002\u8fd9\u53ef\u80fd\u662f\u514d\u8d39\u7684\uff0c\u6bd4\u65b9\u8bf4\uff0c\u5728 GitHub \u4e0a\u3002 \ud83d\udc9a \u6bcf\u79d2\u53d1\u9001\u5230\u670d\u52a1\u5668\u7aef\u7684 HTTP \u8bf7\u6c42\u6570\u91cf\u4e0d\u65ad\u589e\u52a0\uff0c\u8fd9\u6ca1\u6709\u95ee\u9898\u3002 \ud83d\udc94 \u53ea\u80fd\u8fdb\u884c\u6c34\u5e73\u7f29\u653e\uff08\u6bcf\u4e2a\u5ba2\u6237\u7aef\u90fd\u6709\u81ea\u5df1\u7684 CPU/GPU\uff09\u3002\u5782\u76f4\u7f29\u653e\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u5f71\u54cd\u5ba2\u6237\u7aef\u7684\u8bbe\u5907\u6027\u80fd\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u5bf9\u4f4e\u6027\u80fd\u8bbe\u5907\u8fdb\u884c\u5feb\u901f\u68c0\u6d4b\u3002\n\ud83d\udc94 \u65e0\u6cd5\u4fdd\u62a4\u6a21\u578b\u7684\u4f7f\u7528\u5e76\u63a7\u5236\u6a21\u578b\u7684\u8c03\u7528\u8005/\u5ba2\u6237\u7aef\u3002\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4e0b\u8f7d\u6a21\u578b\u5e76\u91cd\u65b0\u4f7f\u7528\u5b83\u3002 \ud83d\udc94 \u5ba2\u6237\u7aef\u8bbe\u5907\u7684\u7535\u6c60\u6d88\u8017\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\u3002\u4e3a\u4e86\u4f7f\u6a21\u578b\u5de5\u4f5c\uff0c\u5b83\u9700\u8981\u8ba1\u7b97\u8d44\u6e90\u3002\u56e0\u6b64\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u5ba2\u6237\u53ef\u80fd\u4e0d\u6ee1\u610f\u4ed6\u4eec\u7684 iPhone \u8d8a\u6765\u8d8a\u70ed\u3002\u7531\u4e8e\u8be5\u9879\u76ee\u7684\u76ee\u7684\u66f4\u591a\u662f\u5173\u4e8e\u5b66\u4e60\u800c\u4e0d\u662f\u63d0\u51fa\u751f\u4ea7\u5c31\u7eea\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u6b64\u6211\u51b3\u5b9a\u91c7\u7528\u4ece\u5ba2\u6237\u7aef\u4e3a\u6a21\u578b\u63d0\u4f9b\u670d\u52a1\u7684\u7b2c\u4e8c\u79cd\u9009\u62e9\u3002\u8fd9\u4f7f\u6574\u4e2a\u9879\u76ee\u7684\u6210\u672c\u5927\u5927\u964d\u4f4e\uff08\u5b9e\u9645\u4e0a\uff0c\u4f7f\u7528 GitHub \u53ef\u4ee5\u514d\u8d39\u6258\u7ba1\u5b83\uff09\uff0c\u800c\u4e14\u6211\u53ef\u4ee5\u5c06\u66f4\u591a\u7cbe\u529b\u653e\u5728\u673a\u5668\u5b66\u4e60\u4e0a\uff0c\u800c\u4e0d\u662f\u81ea\u52a8\u7f29\u653e\u540e\u7aef\u57fa\u7840\u8bbe\u65bd\u4e0a\u3002\u597d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u51b3\u5b9a\u91c7\u7528\u65e0\u670d\u52a1\u5668\u89e3\u51b3\u65b9\u6848\u3002\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u6765\u81ea\u76f8\u673a\u6d41\u7684\u56fe\u50cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\u7b2c\u4e00\u4e2a\u4e5f\u662f\u6700\u660e\u663e\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u4f7f\u7528\u8bc6\u522b\u56fe\u50cf\u7684\u6574\u4e2a\u6587\u672c\u6765\u89e3\u51b3\u5149\u5b66\u5b57\u7b26\u8bc6\u522b (OCR) \u4efb\u52a1\uff0c\u6bd4\u65b9\u8bf4, Tesseract.js \u5e93\u3002\u5b83\u8fd4\u56de\u6bb5\u843d\u3001\u6587\u672c\u884c\u548c\u6587\u672c\u5757\u7684\u8fb9\u754c\u6846\u4ee5\u53ca\u8bc6\u522b\u7684\u6587\u672c\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u8fd9\u6837\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4ece\u8bc6\u522b\u7684\u6587\u672c\u884c\u6216\u6587\u672c\u5757\u4e2d\u63d0\u53d6\u94fe\u63a5\uff08\u793a\u4f8b\u5728 TypeScript \u4e0a\uff09\uff1a const URL_REG_EXP = / https?:\\/\\/(www\\.)?[-a -zA-Z0-9@:%._+~#=]{2,256}\\.[az]{2,4}\\b([-a-zA-Z0-9@:%_+.~#? &amp;/=]*) / gi ; const extractLinkFromText = (text : string ) : string | null =&gt; { const urls : string [] |\u7a7a = \u6587\u672c\u3002\u5339\u914d ( URL_REG_EXP ) ; if ( !urls || !urls .length ) { return null ; } \u8fd4\u56de\u7f51\u5740 [ 0 ] ; };\n\ud83d\udc94 \u95ee\u9898\u662f\u8bc6\u522b+\u68c0\u6d4b\u65f6\u95f4\u53ef\u80fd\u4f1a\u4ece 2 \u79d2\u5230 20+ \u79d2\u4e0d\u7b49\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6587\u672c\u7684\u5927\u5c0f\u3001\u56fe\u50cf\u4e0a\u201c\u770b\u8d77\u6765\u50cf\u6587\u672c\u7684\u4e1c\u897f\u201d\u7684\u6570\u91cf\u3001\u56fe\u50cf\u8d28\u91cf\u548c\u5176\u4ed6\u56e0\u7d20.\u56e0\u6b64\uff0c\u8981\u8fbe\u5230\u6bcf\u79d2 0.5-1 \u5e27\u4ee5\u8ba9\u7528\u6237\u4f53\u9a8c\u81f3\u5c11\u63a5\u8fd1\u5b9e\u65f6\u5c06\u975e\u5e38\u56f0\u96be\u3002 \ud83d\udc94 \u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c\u6211\u4eec\u8981\u6c42\u56fe\u4e66\u9986\u4e3a\u6211\u4eec\u8bc6\u522b\u56fe\u50cf\u4e2d\u7684\u6574\u4e2a\u6587\u672c\uff0c\u5373\u4f7f\u5b83\u53ef\u80fd\u53ea\u5305\u542b\u4e00\u4e24\u4e2a\u94fe\u63a5\uff08\u5373\u53ea\u6709\u7ea6 10% \u7684\u6587\u672c\u53ef\u80fd\u5bf9\u6211\u4eec\u6709\u7528\uff09\u6211\u4eec\uff09\uff0c\u6216\u8005\u5b83\u751a\u81f3\u53ef\u80fd\u6839\u672c\u4e0d\u5305\u542b\u94fe\u63a5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u542c\u8d77\u6765\u50cf\u662f\u5728\u6d6a\u8d39\u8ba1\u7b97\u8d44\u6e90\u3002\u5982\u679c\u6211\u4eec\u5728\u94fe\u63a5\u6587\u672c\u8bc6\u522b\u4e4b\u524d\u4f7f\u7528\u4e00\u4e9b\u989d\u5916\u7684\u201c\u987e\u95ee\u201d\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f Tesseract \u5de5\u4f5c\u5f97\u66f4\u5feb\u3002\u8fd9\u4e2a\u201c\u987e\u95ee\u201d\u7b97\u6cd5\u5e94\u8be5\u68c0\u6d4b\u4f46\u4e0d\u8bc6\u522b\u56fe\u50cf\u4e0a\u6bcf\u4e2a\u94fe\u63a5\u7684\u6700\u5de6\u8fb9\u4f4d\u7f6e\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\u8fd9\u5c06\u4f7f\u6211\u4eec\u80fd\u591f\u901a\u8fc7\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\u6765\u52a0\u901f\u8bc6\u522b\u90e8\u5206\uff1a\u5982\u679c\u56fe\u50cf\u4e0d\u5305\u542b\u4efb\u4f55\u94fe\u63a5\uff0c\u6211\u4eec\u6839\u672c\u4e0d\u5e94\u8c03\u7528 Tesseract \u68c0\u6d4b/\u8bc6\u522b\u3002\u5982\u679c\u56fe\u50cf\u786e\u5b9e\u6709\u94fe\u63a5\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u8ba9 Tesseract \u4ec5\u8bc6\u522b\u56fe\u50cf\u4e2d\u5305\u542b\u94fe\u63a5\u7684\u90a3\u4e9b\u90e8\u5206\u3002\u6211\u4eec\u4e0d\u60f3\u82b1\u65f6\u95f4\u8bc6\u522b\u4e0d\u5305\u542b\u94fe\u63a5\u7684\u4e0d\u76f8\u5173\u6587\u672c\u3002\u5c06\u5728 Tesseract \u4e4b\u524d\u53d1\u751f\u7684\u201c\u987e\u95ee\u201d\u7b97\u6cd5\u5e94\u8be5\u4ee5\u6052\u5b9a\u7684\u65f6\u95f4\u5de5\u4f5c\uff0c\u65e0\u8bba\u56fe\u50cf\u8d28\u91cf\u5982\u4f55\uff0c\u6216\u8005\u56fe\u50cf\u4e0a\u662f\u5426\u5b58\u5728\u6587\u672c\u3002\u5b83\u4e5f\u5e94\u8be5\u975e\u5e38\u5feb\uff0c\u5e76\u4e14\u5728\u4e0d\u5230 1 \u79d2\u7684\u65f6\u95f4\u5185\u68c0\u6d4b\u5230\u94fe\u63a5\u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u6211\u4eec\u80fd\u591f\u6ee1\u8db3\u201c\u63a5\u8fd1\u5b9e\u65f6\u201d\u7684\u8981\u6c42\uff08\u5373\u5728 iPhone X \u4e0a\uff09\u3002 \ud83d\udca1 \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u53e6\u4e00\u4e2a\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u6765\u5e2e\u52a9\u6211\u4eec\u627e\u5230\u56fe\u50cf\u4e2d\u6240\u6709\u51fa\u73b0\u7684 https:// \u5b50\u5b57\u7b26\u4e32\uff08\u6bcf\u4e2a\u5b89\u5168\u94fe\u63a5\u90fd\u6709\u8fd9\u4e2a\u524d\u7f00\uff0c\u4e0d\u662f\u5417\uff09\u600e\u4e48\u529e\uff1f\u7136\u540e\uff0c\u5728\u6587\u672c\u4e2d\u6709\u8fd9\u4e9b https:// \u8fb9\u754c\u6846\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u5b83\u4eec\u7684\u53f3\u4fa7\u5ef6\u7eed\u5e76\u5c06\u5b83\u4eec\u53d1\u9001\u5230 Tesseract \u8fdb\u884c\u6587\u672c\u8bc6\u522b\u3002\n\u60a8\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230 Tesseract \u9700\u8981\u505a\u7684\u5de5\u4f5c\u8981\u5c11\u5f97\u591a\uff0c\u4ee5\u9632\u4e07\u4e00\u5b83\u6709\u4e00\u4e9b\u5173\u4e8e\u94fe\u63a5\u53ef\u80fd\u4f4d\u4e8e\u4f55\u5904\u7684\u63d0\u793a\uff08\u8bf7\u53c2\u9605\u4e24\u5f20\u56fe\u7247\u4e0a\u7684\u84dd\u8272\u6846\u7684\u6570\u91cf\uff09\u3002\u6240\u4ee5\u73b0\u5728\u7684\u95ee\u9898\u662f\u6211\u4eec\u5e94\u8be5\u9009\u62e9\u54ea\u79cd\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u4ee5\u53ca\u5982\u4f55\u91cd\u65b0\u8bad\u7ec3\u5b83\u4ee5\u652f\u6301\u81ea\u5b9a\u4e49 https:// \u5bf9\u8c61\u7684\u68c0\u6d4b\u3002\u8bad\u7ec3\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u5728\u6211\u4eec\u7684\u4e0a\u4e0b\u6587\u4e2d\u4e0d\u662f\u4e00\u4e2a\u5408\u7406\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u4ee5\u4e0b\u539f\u56e0\uff1a\ud83d\udc94\u6211\u4eec\u5f88\u53ef\u80fd\u65e0\u6cd5\u6536\u96c6\u6570\u5341\u4e07\u5f20\u5e26\u6709\u94fe\u63a5\u7684\u4e66\u7c4d\u7684\u6807\u8bb0\u56fe\u50cf\uff08\u6211\u4eec\u53ef\u80fd\u4f1a\u867d\u7136\u751f\u6210\u5b83\u4eec\uff0c\u4f46\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\u3002\u56e0\u6b64\uff0c\u4e0e\u5176\u521b\u5efa\u65b0\u6a21\u578b\uff0c\u4e0d\u5982\u6559\u4e00\u4e2a\u73b0\u6709\u7684\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u4e3a\u6211\u4eec\u8fdb\u884c\u81ea\u5b9a\u4e49\u5bf9\u8c61\u68c0\u6d4b\uff08\u8fdb\u884c\u8fc1\u79fb\u5b66\u4e60\uff09\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u201c\u81ea\u5b9a\u4e49\u5bf9\u8c61\u201d\u5c06\u662f\u5e26\u6709 https:// \u6587\u672c\u7684\u56fe\u50cf\u3002\u8fd9\u79cd\u65b9\u6cd5\u6709\u4ee5\u4e0b\u597d\u5904\uff1a \ud83d\udc9a \u6570\u636e\u96c6\u53ef\u80fd\u8981\u5c0f\u5f97\u591a\u3002\u6211\u4eec\u4e0d\u9700\u8981\u6536\u96c6\u6210\u5343\u4e0a\u4e07\u7684\u6807\u8bb0\u56fe\u50cf\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u505a\u5927\u7ea6 100 \u5f20\u56fe\u7247\u5e76\u624b\u52a8\u6807\u8bb0\u5b83\u4eec\u3002\u8fd9\u662f\u56e0\u4e3a\u6a21\u578b\u5df2\u7ecf\u5728 COCO \u6570\u636e\u96c6\u7b49\u901a\u7528\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u4e86\u9884\u8bad\u7ec3\uff0c\u5e76\u4e14\u5df2\u7ecf\u5b66\u4f1a\u4e86\u5982\u4f55\u63d0\u53d6\u901a\u7528\u56fe\u50cf\u7279\u5f81\u3002 \ud83d\udc9a \u8bad\u7ec3\u8fc7\u7a0b\u4f1a\u66f4\u5feb\uff08GPU \u4e0a\u7684\u5206\u949f/\u5c0f\u65f6\u800c\u4e0d\u662f\u51e0\u5929/\u51e0\u5468\uff09\u3002\u540c\u6837\uff0c\u8fd9\u662f\u56e0\u4e3a\u8f83\u5c0f\u7684\u6570\u636e\u96c6\uff08\u8f83\u5c0f\u7684\u6279\u6b21\uff09\u548c\u8f83\u5c11\u7684\u53ef\u8bad\u7ec3\u53c2\u6570\u3002\n\u6211\u4eec\u53ef\u4ee5\u4ece TensorFlow 2 Detection Model Zoo \u4e2d\u9009\u62e9\u73b0\u6709\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5728 COCO 2017 \u6570\u636e\u96c6\u4e0a\u9884\u8bad\u7ec3\u7684\u68c0\u6d4b\u6a21\u578b\u3002\u73b0\u5728\u5b83\u5305\u542b\u5927\u7ea6 40 \u4e2a\u6a21\u578b\u53d8\u4f53\u53ef\u4f9b\u9009\u62e9\u3002\u4e3a\u4e86\u5728\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4e0a\u91cd\u65b0\u8bad\u7ec3\u548c\u5fae\u8c03\u6a21\u578b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API\u3002 TensorFlow \u5bf9\u8c61\u68c0\u6d4b API \u662f\u4e00\u4e2a\u6784\u5efa\u5728 TensorFlow \u4e4b\u4e0a\u7684\u5f00\u6e90\u6846\u67b6\uff0c\u53ef\u4ee5\u8f7b\u677e\u6784\u5efa\u3001\u8bad\u7ec3\u548c\u90e8\u7f72\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u3002\u5982\u679c\u60a8\u70b9\u51fb Model Zoo \u94fe\u63a5\uff0c\u60a8\u5c06\u627e\u5230\u6bcf\u4e2a\u6a21\u578b\u7684\u68c0\u6d4b\u901f\u5ea6\u548c\u51c6\u786e\u5ea6\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u9009\u62e9\u6a21\u578b\u65f6\u5728\u68c0\u6d4b\u901f\u5ea6\u548c\u51c6\u786e\u6027\u4e4b\u95f4\u627e\u5230\u9002\u5f53\u7684\u5e73\u8861\u3002\u4f46\u662f\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u53ef\u80fd\u66f4\u91cd\u8981\u7684\u662f\u6a21\u578b\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u5b83\u5c06\u88ab\u52a0\u8f7d\u5230\u5ba2\u6237\u7aef\u3002\u5b58\u6863\u6a21\u578b\u7684\u5927\u5c0f\u53ef\u80fd\u5728 ~20Mb \u5230 ~1Gb \u4e4b\u95f4\u53d8\u5316\u5f88\u5927\u3002\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50\uff1a \ud83d\udc9a \u5b83\u4f7f\u7528 MobileNet v2 \u7f51\u7edc\u4f5c\u4e3a\u7279\u5f81\u63d0\u53d6\u5668\uff0c\u8be5\u7f51\u7edc\u9488\u5bf9\u79fb\u52a8\u8bbe\u5907\u7684\u4f7f\u7528\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u4ee5\u964d\u4f4e\u80fd\u8017\u3002 \ud83d\udc9a \u65e0\u8bba\u56fe\u50cf\u5185\u5bb9\u5982\u4f55\uff0c\u200b\u200b\u5b83\u90fd\u4f1a\u4e00\u6b21\u6027\u5bf9\u6574\u4e2a\u56fe\u50cf\u548c\u5176\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u8fdb\u884c\u5bf9\u8c61\u68c0\u6d4b\uff08\u4e0d\u6d89\u53ca\u533a\u57df\u63d0\u8bae\u6b65\u9aa4\uff0c\u8fd9\u4f7f\u5f97\u68c0\u6d4b\u901f\u5ea6\u66f4\u5feb\uff09\u3002\n\ud83d\udc94 \u867d\u7136\u5b83\u4e0d\u662f\u6700\u51c6\u786e\u7684\u6a21\u578b\uff08\u4e00\u5207\u90fd\u662f\u6743\u8861\u2696\ufe0f\uff09\u3002\u6a21\u578b\u540d\u79f0\u7f16\u7801\u4e86\u4e00\u4e9b\u91cd\u8981\u7279\u5f81\uff0c\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb\u66f4\u591a\u76f8\u5173\u4fe1\u606f\uff1a \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u628a Tensorflow 2 \u5bf9\u8c61\u68c0\u6d4b API \u4f5c\u4e3a Python \u5305\u5b89\u88c5\u3002\u5982\u679c\u60a8\u5728 Google Colab\uff08\u63a8\u8350\uff09\u6216 Jupyter \u4e2d\u8fdb\u884c\u8bd5\u9a8c\uff0c\u8fd9\u4f1a\u5f88\u65b9\u4fbf\u3002\u5bf9\u4e8e\u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u90fd\u4e0d\u9700\u8981\u672c\u5730\u5b89\u88c5\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728\u6d4f\u89c8\u5668\u4e2d\u8fdb\u884c\u8bd5\u9a8c\u3002\u5982\u679c\u60a8\u66f4\u559c\u6b22\u901a\u8fc7 Docker \u5b89\u88c5\u5bf9\u8c61\u68c0\u6d4b API\uff0c\u60a8\u4e5f\u53ef\u4ee5\u9075\u5faa\u5b98\u65b9\u6587\u6863\u3002\u5982\u679c\u60a8\u5728 API \u5b89\u88c5\u6216\u6570\u636e\u96c6\u51c6\u5907\u671f\u95f4\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u5c1d\u8bd5\u901a\u8bfb TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API \u6559\u7a0b\uff0c\u5176\u4e2d\u4e3a\u8be5\u8fc7\u7a0b\u6dfb\u52a0\u4e86\u8bb8\u591a\u6709\u7528\u7684\u7ec6\u8282\u3002\u514b\u9686\u5230\u201c\u6a21\u578b\u201d...\u8fdc\u7a0b\uff1a\u679a\u4e3e\u5bf9\u8c61\uff1a2301\uff0cdone.remote\uff1a\u8ba1\u6570\u5bf9\u8c61\uff1a100%\uff082301/2301\uff09\uff0cdone.remote\uff1a\u538b\u7f29\u5bf9\u8c61\uff1a100%\uff082000/2000\uff09\uff0cdone.remote\uff1a\u603b\u8ba12301 (delta 561), \u91cd\u7528 922 (delta 278), \u6253\u5305\u91cd\u7528 0Receiving objects: 100% (2301/2301), 30.60 MiB | 13.90 MiB/s\uff0c\u5b8c\u6210\u3002\u89e3\u6790\u589e\u91cf\uff1a100% (561/561)\uff0c\u5b8c\u6210\u3002\u7531\u4e8e\u67d0\u4e9b\u4f9d\u8d56\u9879\u9519\u8bef\uff0c\u6700\u540e\u4e00\u6b65\u53ef\u80fd\u4f1a\u5931\u8d25\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8fd0\u884c pip install \u3002 \u2014\u2014\u518d\u5b89\u9759\u4e00\u6b21\u3002\nTensorFlow \u5bf9\u8c61\u68c0\u6d4b API \u5df2\u5b89\u88c5\uff01\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 API \u63d0\u4f9b\u7684\u811a\u672c\u8fdb\u884c\u6a21\u578b\u63a8\u7406\u3001\u8bad\u7ec3\u6216\u5fae\u8c03\u3002\u8ba9\u6211\u4eec\u4ece TensorFlow Model Zoo \u4e0b\u8f7d\u6211\u4eec\u9009\u62e9\u7684 ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8 \u6a21\u578b\uff0c\u5e76\u68c0\u67e5\u5b83\u5982\u4f55\u8fdb\u884c\u4e00\u822c\u5bf9\u8c61\u68c0\u6d4b\uff08\u4ece COCO \u6570\u636e\u96c6\u4e2d\u68c0\u6d4b\u7c7b\u7684\u5bf9\u8c61\uff0c\u5982\u201c\u732b\u201d\u3001\u201c\u72d7\u201d\u3001\u201c\u6c7d\u8f66\u201d\u7b49\uff09\u3002\u6211\u4eec\u5c06\u4f7f\u7528 get_file() TensorFlow \u5e2e\u52a9\u7a0b\u5e8f\u4ece URL \u4e0b\u8f7d\u5b58\u6863\u6a21\u578b\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u3002\u5c06\u5f20\u91cf\u6d41\u5bfc\u5165\u4e3a tf \u5bfc\u5165\u8def\u5f84libMODEL_NAME = &#39;ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8&#39;TF_MODELS_BASE_PATH = &#39;http://download.tensorflow.org/models/object_detection/tf2/202007111/202007111/202007111/202007111/20200711_model_cache_model_cache_model_cache_model_cache_model_fpnlite_640x640_coco17_tpu-8&#39;TF_MODELS_BASE_PATH = &#39;http://download.tensorflow.org/models/object_detection/tf2 = TF_MODELS_BASE_PATH + model_name + &#39;.tar.gz&#39; model_dir = tf .keras .utils .get_file ( fname =model_name , origin =model_url , untar = True , cache_dir =pathlib .Path (cache_folder ) .absolute ( ) ) return model_dir #\u5f00\u59cb\u6a21\u578b download.model_dir = download_tf_model (MODEL_NAME , CACHE_FOLDER ) \u6253\u5370 (model_dir ) pipeline.config \u6587\u4ef6\u5305\u542b\u6a21\u578b\u7684\u68c0\u6d4b\u8bbe\u7f6e\u3002\u5f53\u6211\u4eec\u9700\u8981\u5fae\u8c03\u6a21\u578b\u65f6\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u56de\u5230\u8fd9\u4e2a\u6587\u4ef6\u3002\u76ee\u524d\uff0c\u8be5\u6a21\u578b\u53ef\u4ee5\u68c0\u6d4b 90 \u4e2a COCO \u6570\u636e\u96c6\u7c7b\u7684\u5bf9\u8c61\uff0c\u5982\u6c7d\u8f66\u3001\u9e1f\u3001\u70ed\u72d7\u7b49\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6a21\u578b\u5728\u5305\u542b\u8fd9\u4e9b\u7c7b\u5bf9\u8c61\u7684\u4e00\u4e9b\u901a\u7528\u56fe\u50cf\u4e0a\u7684\u8868\u73b0\u5982\u4f55\u3002\nObject Detection API \u5df2\u7ecf\u4e3a\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u5957\u5b8c\u6574\u7684 COCO \u6807\u7b7e\uff08\u7c7b\uff09\u3002 import os # \u5bfc\u5165\u5bf9\u8c61\u68c0\u6d4b API \u52a9\u624b\u3002 from object_detection .utils import label_map_util # \u52a0\u8f7d COCO \u6807\u7b7e\u6570\u636e\uff08\u7c7b\u540d\u548c\u7d22\u5f15\u5173\u7cfb\uff09\u3002 def load_coco_labels() : # Object Detection API \u5df2\u7ecf\u4e3a\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u5957\u5b8c\u6574\u7684 COCO \u7c7b\u3002 label_map_path = os .path .join ( &#39;models/research/object_detection/data&#39; , &#39;mscoco_complete_label_map.pbtxt&#39; ) label_map = label_map_util .load_labelmap (label_map_path ) # \u7c7b ID \u5230\u7c7b\u540d\u7684\u6620\u5c04\u3002 category = label_map_util .convert_label_map_to_categories ( label_map , max_num_classes =label_map_util .get_max_label_map_index (label_map ) , use_display_name = True ) category_index = label_map_util .create_category_index (categories) #Class Name to Class ID mapping label_map_dict = label_map_util .get_label_map_dict (label_map , use_display_name = True ) return category_index , label_map_dict # \u52a0\u8f7d COCO \u6807\u7b7e.coco_category_index , coco_label_map_dict = load_coco_labels ( ) print ( &#39;coco_category_index :&#39;coco_category_index :&#39;coco_category_index_codict_index:&#39;coco_category_index_codict_map_index:&#39;coco_categ_c : {&#39;id&#39;: 1, &#39;name&#39;: &#39;person&#39;}, 2: {&#39;id&#39;: 2, &#39;name&#39;: &#39;bicycle&#39;}, ... 90: {&#39;id&#39;: 90, &#39;name&#39; : &#39;toothbrush&#39;},}coco_label_map_dict:{ &#39;background&#39;: 0, &#39;person&#39;: 1, &#39;bicycle&#39;: 2, &#39;car&#39;: 3, ... &#39;toothbrush&#39;: 90,} \u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u68c0\u6d4b\u8be5\u51fd\u6570\u5c06\u4f7f\u7528\u6211\u4eec\u4e0b\u8f7d\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u5bf9\u8c61\u68c0\u6d4b\u3002 import tensorflow as tf # \u5bfc\u5165\u5bf9\u8c61\u68c0\u6d4b API \u52a9\u624b\u3002 from object_detection .utils import config_util from object_detection .builders import model_builder # \u4e3a\u7279\u5b9a\u6a21\u578b\u548c\u7279\u5b9a\u6a21\u578b\u7684\u68c0\u67e5\u70b9\u751f\u6210\u68c0\u6d4b\u51fd\u6570 def detection_fn_from_checkpoint (config_path , checkpoint_path ) : # \u6784\u5efa\u6a21\u578b\u3002 pipeline_config = config_util .get_configs_from_pipeline_file (config_path) model_config = pipeline_config [ &#39;model&#39; ] model = model_builder .build ( model_config =model_config , is_training = False , ) # \u6062\u590d\u68c0\u67e5\u70b9\u3002 ckpt = tf .compat .v2 .train .Checkpoint (model =model ) ckpt .restore (checkpoint_path ) .expect_partial ( ) # \u8fd9\u662f\u4e00\u4e2a\u8fdb\u884c\u68c0\u6d4b\u7684\u51fd\u6570\u3002 @tf .function def detect_fn\uff08\u56fe\u50cf\uff09\uff1a\u56fe\u50cf\uff0c\u5f62\u72b6=\u6a21\u578b.\u9884\u5904\u7406\uff08\u56fe\u50cf\uff09\u9884\u6d4b_dict=\u6a21\u578b.\u9884\u6d4b\uff08\u56fe\u50cf\uff0c\u5f62\u72b6\uff09\u68c0\u6d4b=\u6a21\u578b.\u540e\u5904\u7406\uff08\u9884\u6d4b_dict\uff0c\u5f62\u72b6\uff09\u8fd4\u56de\u68c0\u6d4b\uff0c\u9884\u6d4b_dict\uff0ctf .reshape\uff08\u5f62\u72b6\uff09 , [ - 1 ] ) return detect_fninference_detect_fn = detection_fn_from_checkpoint ( config_path =os .path .join ( &#39;cache&#39; , &#39;datasets&#39; , MODEL_NAME , &#39;pipeline.config&#39; ) , checkpoint_path =os .path .join (&#39;datasets&#39; , &#39;datasets&#39; &#39; , MODEL_NAME , &#39;checkpoint&#39; , &#39;ckpt-0&#39; ) , ) \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u5c06\u56fe\u50cf\u4fdd\u5b58\u5230\u6211\u4eec\u9879\u76ee\u7684 inference/test/ \u6587\u4ef6\u5939\u4e2d\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Google Colab\uff0c\u5219\u53ef\u4ee5\u521b\u5efa\u6b64\u6587\u4ef6\u5939\u5e76\u624b\u52a8\u4e0a\u4f20\u56fe\u50cf\u3002 import matplotlib .pyplot as plt %matplotlib inline # \u521b\u5efa\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a image.inference_ds = tf .keras .p\u200b\u200breprocessing .image_dataset_from_directory ( directory = &#39;inference&#39; , image_size = ( 640 , 640 ) , batch_size = 1 , False shuffle \u7684 TensorFlow \u6570\u636e\u96c6, label_mode = None ) # Numpy \u7248\u672c\u7684\u6570\u636e\u96c6.inference_ds_numpy = list (inference_ds .as_numpy_iterator() ) # \u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u9884\u89c8\u6570\u636e\u96c6\u4e2d\u7684\u56fe\u50cf.plt .figure (figsize = ( 14 , 14 ) ) for i , image in\u679a\u4e3e\uff08inference_ds_numpy\uff09\uff1aplt.subplot\uff082,2,i+1\uff09plt.imshow\uff08image[0].astype\uff08\u201cuint8\u201d\uff09\uff09plt.axis\uff08\u201coff\u201d\uff09plt.show\uff08\uff09\n\u73b0\u5728\u6211\u4eec\u5df2\u51c6\u5907\u597d\u8fd0\u884c\u68c0\u6d4b\u3002 inference_ds_numpy[0] \u6570\u7ec4\u4ee5 Numpy \u683c\u5f0f\u5b58\u50a8\u7b2c\u4e00\u5f20\u56fe\u50cf\u7684\u50cf\u7d20\u6570\u636e\u3002 box = detections [&#39;detection_boxes&#39;] .numpy ()scores = detections [&#39;detection_scores&#39;] .numpy()classes = detections [&#39;detection_classes&#39;] .numpy()num_detections = detections [&#39;num_detections&#39;] .numpy() [0 ] \u6253\u5370\uff08&#39;boxes.shape\uff1a&#39;\uff0cboxes .shape\uff09\u6253\u5370\uff08&#39;scores.shape\uff1a&#39;\uff0cscores.shape\uff09\u6253\u5370\uff08&#39;classes.shape\uff1a&#39;\uff0cclasses.shape\uff09\u6253\u5370\uff08&#39;num_detections\uff1a&#39;\uff0cnum_detections\uff09\u6a21\u578b\u4e3a\u6211\u4eec\u505a\u4e86 100 \u6b21\u68c0\u6d4b\u3002\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u5728\u56fe\u50cf\u4e0a\u627e\u5230\u4e86 100 \u4e2a\u5bf9\u8c61\u3002\u8fd9\u610f\u5473\u7740\u8be5\u6a21\u578b\u6709 100 \u4e2a\u69fd\uff0c\u5e76\u4e14\u5b83\u6700\u591a\u53ef\u4ee5\u5728\u5355\u4e2a\u56fe\u50cf\u4e0a\u68c0\u6d4b 100 \u4e2a\u5bf9\u8c61\u3002\u6bcf\u4e2a\u68c0\u6d4b\u90fd\u6709\u4e00\u4e2a\u5206\u6570\uff0c\u4ee3\u8868\u6a21\u578b\u5bf9\u5176\u7684\u7f6e\u4fe1\u5ea6\u3002\u6bcf\u4e2a\u68c0\u6d4b\u7684\u8fb9\u754c\u6846\u90fd\u5b58\u50a8\u5728 box \u6570\u7ec4\u4e2d\u3002\u6a21\u578b\u5173\u4e8e\u6bcf\u6b21\u68c0\u6d4b\u7684\u5206\u6570\u6216\u7f6e\u4fe1\u5ea6\u662f......", "note_en": "In this article we will start solving the issue of making the printed links (i.e. in a book or in a magazine) clickable via your smartphone camera.\n We will use  TensorFlow 2 Object Detection API to train a custom object detector model to find positions and bounding boxes of the sub-strings like  https:// in the text image (i.e. in smartphone camera stream).\n The text of each link (right continuation of  https:// bounding box) will be recognized by using  Tesseract library. The recognition part will not be covered in this article, but you may find the complete code example of the application in  links-detector repository.\n  \ud83d\udcdd  Open links-detector repository on GitHub to see the complete source code of the application.\n   \u26a0\ufe0f Currently the application is in  experimental  Alpha stage and has  many issues and limitations. So don&#39;t raise your expectations level too high until these issues are resolved \ud83e\udd37\ud83c\udffb\u200d. Also, the purpose of this article is more about learning how to work with TensorFlow 2 Object Detection API rather than coming up with a production-ready model.\n In case if Python code blocks in this article will lack proper formatting on this platform feel free to  to read the article on GitHub\n  I work as a software engineer and in my own time, I learn Machine Learning as a hobby. But this is not the problem yet.\n I bought a printed book about Machine Learning recently and while I was reading through the first several chapters I&#39;ve encountered many printed links in the text that looked like  https://tensorflow.org/ or  https://some-url.com/which/may/be/even/longer?and_with_params=true.\n  I saw all these links, but I couldn&#39;t click on them since they were printed (thanks, cap!). To visit these links I needed to start typing them character by character in the browser&#39;s address bar, which was pretty annoying and error-prone.\n  So, I was thinking, what if, similarly to QR-code detection, we will try to &#34;teach&#34; the smartphone to  (1)  detect and  (2)  recognize printed links for us and to make them  clickable? This way you would do just one click instead of multiple keystrokes. The operational complexity of &#34;clicking&#34; the printed links goes from  O(N) to  O(1).\n    As I&#39;ve mentioned earlier I&#39;m just studying Machine Learning as a hobby. Thus, the purpose of this article is more about  learning how to work with TensorFlow 2 Object Detection API rather than coming up with a production-ready application.\n  The detection and recognition processes should have a  close-to-real-time performance (i.e.  0.5-1 frames per second) on a device like iPhone X. It means that the whole  detection + recognition process should take up to  2 seconds (pretty bearable as for the amateur project).\n  Only  dark text (i.e. black or dark-grey) on  light background (i.e. white or light-grey) should be supported.\n Only  https:// links should be supported for now (it is ok if our model will not recognize the  http://,  ftp://,  tcp:// or other types of links).\n      Do link detection and recognition on the back-end and send the response back to the client.\n   \ud83d\udc9a The detection performance is not limited by the client&#39;s device. We may speed the detection up by scaling the service horizontally (adding more instances) and vertically (adding more cores/GPUs).\n \ud83d\udc9a The model might be bigger since there is no need to upload it to the client-side. Downloading the  ~10Mb model on the client-side may be ok, but loading the  ~100Mb model might be a big issue for the client&#39;s network and application UX (user experience) otherwise.\n \ud83d\udc9a It is possible to control who is using the model. Model is guarded behind the API, so we would have complete control over its callers/clients.\n  \ud83d\udc94 System complexity growth. The application tech stack grew from just  JavaScript to, let&#39;s say,  JavaScript + Python. We need to take care of the autoscaling.\n \ud83d\udc94 Offline mode for the app is not possible since it needs an internet connection to work.\n \ud83d\udc94 Too many HTTP requests between the client and the server may become a bottleneck at some point. Imagine if we would want to improve the performance of the detection, let&#39;s say, from  1 to  10+ frames per second. This means that each client will send  10+ requests per second. For  10 simultaneous clients it is already  100+ requests per second. The  HTTP/2 bidirectional streaming and  gRPC might be useful in this case, but we&#39;re going back to the increased system complexity here.\n \ud83d\udc94 System becomes more expensive. Almost all points from the Pros section need to be paid for.\n      \ud83d\udc9a System is less complex. We don&#39;t need to set up the servers, build the API, and introduce an additional Python stack to the system.\n \ud83d\udc9a Offline mode is possible. The app doesn&#39;t need an internet connection to work since the model is fully loaded to the device. So the Progressive Web Application ( PWA) might be built to support that.\n \ud83d\udc9a System is &#34;kind of&#34; scaling automatically. The more clients you have, the more cores and GPUs they bring. This is not a proper scaling solution though (more about that in a Cons section below).\n \ud83d\udc9a System is cheaper. We only need a server for static assets ( HTML,  JS,  CSS, model files, etc.). This may be done for free, let&#39;s say, on GitHub.\n \ud83d\udc9a No issue with the growing number of HTTP requests per second to the server-side.\n  \ud83d\udc94 Only horizontal scaling is possible (each client will have its own CPU/GPU). Vertical scaling is not possible since we can&#39;t influence the client&#39;s device performance. As a result, we can&#39;t guarantee fast detection for low performant devices.\n \ud83d\udc94 It is not possible to guard the model usage and control the callers/clients of the model. Everyone could download the model and re-use it.\n \ud83d\udc94 Battery consumption of the client&#39;s device might become an issue. For the model to work it needs computational resources. So clients might not be happy with their iPhone getting warmer and warmer while the app is working.\n  Since the purpose of the project was more about learning and not coming up with a production-ready solution  I decided to go with the second option of serving the model from the client side. This made the whole project much cheaper (actually with GitHub it was free to host it), and I could focus more on Machine Learning than on the autoscaling back-end infrastructure.\n  Ok, so we&#39;ve decided to go with the serverless solution. Now we have an image from the camera stream as an input that looks something like this:\n     The first and the most obvious approach would be to solve the  Optical Character Recognition ( OCR) task by recognizing the whole text of the image by using, let&#39;s say,  Tesseract.js library. It returns the bounding boxes of the paragraphs, text lines, and text blocks along with the recognized text.\n  We may try then to extract the links from the recognized text lines or text blocks with a regular expression like  this one (example is on TypeScript):\n const  URL_REG_EXP  =   / https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_+.~#?&amp;/=]*) / gi ; const extractLinkFromText  =  (text :  string ) :  string  |  null  =&gt;  {  const urls :  string [ ]  |  null  = text . match ( URL_REG_EXP ) ;  if  ( !urls  ||  !urls .length )  {  return  null ;  }  return urls [ 0 ] ; } ;\n   \ud83d\udc94 The thing is that the  recognition + detection time may vary from  2 to  20+ seconds depending on the size of the text, on the amount of &#34;something that looks like a text&#34; on the image, on the image quality and on other factors. So it will be really hard to achieve those  0.5-1 frames per second to make the user experience at least  close to real-time.\n \ud83d\udc94 Also if we would think about it, we&#39;re asking the library to recognize the  whole text from the image for us even though it might contain only one or two links in it (i.e. only ~10% of the text might be useful for us), or it may even not contain the links at all. In this case, it sounds like a waste of computational resources.\n  We could make Tesseract work faster if we used some  additional &#34;adviser&#34; algorithm prior to the links text recognition. This &#34;adviser&#34; algorithm should detect, but not recognize,  the leftmost position of each link on the image if there are any. This will allow us to speed up the recognition part by following these rules:\n If the image does not contain any link we should not call Tesseract detection/recognition at all.\n If the image does have the links then we need to ask Tesseract to recognize only those parts of the image that contains the links. We&#39;re not interested in spending the time for recognition of the irrelevant text that does not contain the links.\n The &#34;adviser&#34; algorithm that will take place before the Tesseract should work with a constant time regardless of the image quality, or the presence/absence of the text on the image. It also should be pretty fast and detect the leftmost positions of the links for less than  1s so that we could satisfy the &#34;close-to-real-time&#34; requirement (i.e. on iPhone X).\n \ud83d\udca1 So what if we will use another object detection model to help us find all occurrences of the  https:// substrings (every secure link has this prefix, doesn&#39;t it) in the image? Then, having these  https:// bounding boxes in the text we may extract the right-side continuation of them and send them to the Tesseract for text recognition.\n   You may notice that Tesseract needs to do  much less work in case if it would have some hints about where are the links might be located (see the number of blue boxes on both pictures).\n So the question now is which object detection model we should choose and how to re-train it to support the detection of the custom  https:// objects.\n   Training a new object detection model is not a reasonable option in our context because of the following reasons:\n \ud83d\udc94 We most probably won&#39;t be able to collect hundreds of thousands of  labeled images of the books that have links in them (we might try to generate them though, but more about that later).\n So instead of creating a new model, we should better teach an existing object detection model to do the custom object detection for us (to do the  transfer learning). In our case, the &#34;custom objects&#34; would be the images with  https:// text drawn in them. This approach has the following benefits:\n \ud83d\udc9a The dataset might be much smaller. We don&#39;t need to collect hundreds of thousands of the labeled images. Instead, we may do  ~100 pictures and label them manually. This is because the model is already pre-trained on the general dataset like  COCO dataset and already learned how to extract general image features.\n \ud83d\udc9a The training process will be much faster (minutes/hours on GPU instead of days/weeks). Again, this is because of a smaller dataset (smaller batches) and because of fewer trainable parameters.\n We may choose the existing model from  TensorFlow 2 Detection Model Zoo which provides a collection of detection models pre-trained on the  COCO 2017 dataset. Now it contains  ~40 model variations to choose from.\n To re-train and fine-tune the model on the custom dataset we will use a  TensorFlow 2 Object Detection API. The TensorFlow Object Detection API is an open-source framework built on top of  TensorFlow that makes it easy to construct, train, and deploy object detection models.\n If you follow the  Model Zoo link you will find the  detection speed and  accuracy for each model.\n   Of course, we would want to find the right balance between the detection  speed and  accuracy while picking the model. But what might be even more important in our case is the  size of the model since it will be loaded to the client-side.\n The size of the archived model might vary drastically from  ~20Mb to  ~1Gb. Here are several examples:\n   \ud83d\udc9a It uses the MobileNet v2 network as a feature extractor which is optimized for usage on mobile devices to reduce energy consumption.\n \ud83d\udc9a It does the object detection for the whole image and for all objects in it  in one go regardless of the image content (no  regions proposal step is involved which makes the detection faster).\n \ud83d\udc94 It is not the most accurate model though (everything is a tradeoff \u2696\ufe0f).\n The model name encodes some several important characteristics that you may read more about if you want:\n   In this article, we&#39;re going to install the Tensorflow 2 Object Detection API  as a Python package. It is convenient in case if you&#39;re experimenting in  Google Colab (recommended) or in  Jupyter. For both cases no local installation is needed, you may experiment right in your browser.\n You may also follow the  official documentation if you would prefer to install Object Detection API via Docker.\n If you stuck with something during the API installation or during the dataset preparation try to read through the  TensorFlow 2 Object Detection API tutorial which adds a lot of useful details to this process.\n    Cloning into &#39;models&#39;...remote: Enumerating objects: 2301, done.remote: Counting objects: 100% (2301/2301), done.remote: Compressing objects: 100% (2000/2000), done.remote: Total 2301 (delta 561), reused 922 (delta 278), pack-reused 0Receiving objects: 100% (2301/2301), 30.60 MiB | 13.90 MiB/s, done.Resolving deltas: 100% (561/561), done.\n     It is possible that the last step will fail because of some dependency errors. In this case, you might want to run  pip install . --quiet one more time.\n     The TensorFlow Object Detection API is installed! You may now use the scripts that API provides for doing the model  inference,  training or  fine-tuning.\n  Let&#39;s download our selected  ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8 model from the TensorFlow Model Zoo and check how it does the general object detection (detection of the objects of classes from COCO dataset like &#34;cat&#34;, &#34;dog&#34;, &#34;car&#34;, etc.).\n We will use the  get_file() TensorFlow helper to download the archived model from the URL and unpack it.\n import tensorflow  as tf import pathlibMODEL_NAME  =  &#39;ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8&#39;TF_MODELS_BASE_PATH  =  &#39;http://download.tensorflow.org/models/object_detection/tf2/20200711/&#39;CACHE_FOLDER  =  &#39;./cache&#39; def  download_tf_model (model_name , cache_folder ) : model_url  = TF_MODELS_BASE_PATH  + model_name  +  &#39;.tar.gz&#39; model_dir  = tf .keras .utils .get_file ( fname =model_name , origin =model_url , untar = True , cache_dir =pathlib .Path (cache_folder ) .absolute ( )  )  return model_dir # Start the model download.model_dir  = download_tf_model (MODEL_NAME , CACHE_FOLDER ) print (model_dir )\n      The  pipeline.config file contains the detection settings of the model. We&#39;ll come back to this file later when we will need to fine-tune the model.\n  For now, the model can detect the object of  90 COCO dataset classes like a  car,  bird,  hot dog etc.\n   Let&#39;s see how the model performs on some general images that contain the objects of these classes.\n  Object Detection API already has a complete set of COCO labels (classes) defined for us.\n import os # Import Object Detection API helpers. from object_detection .utils  import label_map_util # Loads the COCO labels data (class names and indices relations). def  load_coco_labels ( ) :  # Object Detection API already has a complete set of COCO classes defined for us. label_map_path  = os .path .join (  &#39;models/research/object_detection/data&#39; ,  &#39;mscoco_complete_label_map.pbtxt&#39;  ) label_map  = label_map_util .load_labelmap (label_map_path )  # Class ID to Class Name mapping. categories  = label_map_util .convert_label_map_to_categories ( label_map , max_num_classes =label_map_util .get_max_label_map_index (label_map ) , use_display_name = True  ) category_index  = label_map_util .create_category_index (categories )  # Class Name to Class ID mapping. label_map_dict  = label_map_util .get_label_map_dict (label_map , use_display_name = True )  return category_index , label_map_dict # Load COCO labels.coco_category_index , coco_label_map_dict  = load_coco_labels ( ) print ( &#39;coco_category_index:&#39; , coco_category_index ) print ( &#39;coco_label_map_dict:&#39; , coco_label_map_dict )\n  coco_category_index:{ 1: {&#39;id&#39;: 1, &#39;name&#39;: &#39;person&#39;}, 2: {&#39;id&#39;: 2, &#39;name&#39;: &#39;bicycle&#39;}, ... 90: {&#39;id&#39;: 90, &#39;name&#39;: &#39;toothbrush&#39;},}coco_label_map_dict:{ &#39;background&#39;: 0, &#39;person&#39;: 1, &#39;bicycle&#39;: 2, &#39;car&#39;: 3, ... &#39;toothbrush&#39;: 90,}\n  We need to create a detection function that will use the pre-trained model we&#39;ve downloaded to do the object detection.\n import tensorflow  as tf # Import Object Detection API helpers. from object_detection .utils  import config_util from object_detection .builders  import model_builder # Generates the detection function for specific model and specific model&#39;s checkpoint def  detection_fn_from_checkpoint (config_path , checkpoint_path ) :  # Build the model. pipeline_config  = config_util .get_configs_from_pipeline_file (config_path ) model_config  = pipeline_config [ &#39;model&#39; ] model  = model_builder .build ( model_config =model_config , is_training = False ,  )  # Restore checkpoints. ckpt  = tf .compat .v2 .train .Checkpoint (model =model ) ckpt .restore (checkpoint_path ) .expect_partial ( )  # This is a function that will do the detection.  @tf .function  def  detect_fn (image ) : image , shapes  = model .preprocess (image ) prediction_dict  = model .predict (image , shapes ) detections  = model .postprocess (prediction_dict , shapes )  return detections , prediction_dict , tf .reshape (shapes ,  [ - 1 ] )  return detect_fninference_detect_fn  = detection_fn_from_checkpoint ( config_path =os .path .join ( &#39;cache&#39; ,  &#39;datasets&#39; , MODEL_NAME ,  &#39;pipeline.config&#39; ) , checkpoint_path =os .path .join ( &#39;cache&#39; ,  &#39;datasets&#39; , MODEL_NAME ,  &#39;checkpoint&#39; ,  &#39;ckpt-0&#39; ) , )\n      To do that let&#39;s save the image to the  inference/test/ folder of our project. If you&#39;re using Google Colab you may create this folder and upload the image manually.\n   import matplotlib .pyplot  as plt %matplotlib inline # Creating a TensorFlow dataset of just one image.inference_ds  = tf .keras .preprocessing .image_dataset_from_directory ( directory = &#39;inference&#39; , image_size = ( 640 ,  640 ) , batch_size = 1 , shuffle = False , label_mode = None ) # Numpy version of the dataset.inference_ds_numpy  =  list (inference_ds .as_numpy_iterator ( ) ) # You may preview the images in dataset like this.plt .figure (figsize = ( 14 ,  14 ) ) for i , image  in  enumerate (inference_ds_numpy ) : plt .subplot ( 2 ,  2 , i  +  1 ) plt .imshow (image [ 0 ] .astype ( &#34;uint8&#34; ) ) plt .axis ( &#34;off&#34; )plt .show ( )\n  Now we&#39;re ready to run the detection. The  inference_ds_numpy[0] array stores the pixel data for the first image in  Numpy format.\n   boxes  = detections [ &#39;detection_boxes&#39; ] .numpy ( )scores  = detections [ &#39;detection_scores&#39; ] .numpy ( )classes  = detections [ &#39;detection_classes&#39; ] .numpy ( )num_detections  = detections [ &#39;num_detections&#39; ] .numpy ( ) [ 0 ] print ( &#39;boxes.shape: &#39; , boxes .shape ) print ( &#39;scores.shape: &#39; , scores .shape ) print ( &#39;classes.shape: &#39; , classes .shape ) print ( &#39;num_detections:&#39; , num_detections )\n   The model has made a  100 detections for us. It doesn&#39;t mean that it found  100 objects on the image though. It means that the model has  100 slots, and it can detect  100 objects at max on a single image. Each detection has a score that represents the confidence of the model about it. The bounding boxes for each detection are stored in the  boxes array. The scores or confidences of the model about each detection are\n......", "posttime": "2021-08-09 04:59:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6253\u5370,\u94fe\u63a5,printed,\u6a21\u578b", "title": "\u5c1d\u8bd5\u4f7f\u6253\u5370\u7684\u94fe\u63a5\u53ef\u70b9\u51fb", "title_en": "Attempt to make printed links clickable", "transed": 1, "url": "https://trekhleb.dev/blog/2020/printed-links-detection/", "via": "", "real_tags": ["\u6253\u5370", "\u94fe\u63a5", "printed", "\u6a21\u578b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072181, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Microsoft Windows 98/98 SP1/98 SE Shell Unchecked BufferArbitrary Code Execution SHELL32.DLL 4.72.3812.600 \u5b89\u5168\u6f0f\u6d1e\u4fee\u590d\uff1a\u76f4\u63a5\u4e0b\u8f7d [834 KB\uff0c\u82f1\u6587]\u3002\u66f4\u591a\u4fe1\u606f\u3002 BUG\uff1a\u6b64SHELL32.DLL \u4fee\u590d\u7834\u574f\u4e86\u4ece\u684c\u9762\u5feb\u6377\u65b9\u5f0f\u56fe\u6807\u4e2d\u5220\u9664\u607c\u4eba\u7bad\u5934\u7684\u80fd\u529b\uff01\u4fee\u590d\uff1a\u8bf7\u53c2\u9605\u201cPATCHED SHELL32.DLL BUG + FIX\u201d\uff0c\u4e5f\u5728 TIPS98.TXT\uff08W95-11D.EXE \u7684\u4e00\u90e8\u5206\uff09\u4e2d\u4e86\u89e3\u5b8c\u6574\u7684\u7ec6\u8282\u3002", "note_en": "Microsoft Windows 98/98 SP1/98 SE Shell Unchecked BufferArbitrary Code Execution SHELL32.DLL 4.72.3812.600 Security Vulnerability Fix:  Direct download [834 KB,English].  More info.   BUG: ThisSHELL32.DLL fix breaks the ability of removing annoying arrows from Desktop shortcut icons!  FIX:See &#34; PATCHED SHELL32.DLL BUG + FIX&#34;, also in TIPS98.TXT (part of  W95-11D.EXE), for complete details.", "posttime": "2021-08-09 04:58:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,windows,\u514d\u8d39,free,\u4fee\u590d", "title": "MDGx \u514d\u8d39 Windows \u8f6f\u4ef6\u7cbe\u534e", "title_en": "MDGx Free WinDOwS Software Essentials", "transed": 1, "url": "https://web.archive.org/web/20210723001556/http://www.mdgx.com/web.htm", "via": "", "real_tags": ["\u8f6f\u4ef6", "windows", "\u514d\u8d39", "free", "\u4fee\u590d"]}, {"category": "", "categoryclass": "", "imagename": "5008ae44d7cdb4cb32b734f11e026b4e.jpg", "infoid": 1072179, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e95\u7279\u5f8b\u5386\u6765\u662f\u7f8e\u56fd\u8fde\u63a5\u6700\u5c11\u7684\u57ce\u5e02\u4e4b\u4e00\uff0c\u5927\u7ea6 40% \u7684\u5e95\u7279\u5f8b\u5c45\u6c11\u6839\u672c\u6ca1\u6709\u4efb\u4f55\u5bb6\u5ead\u4e92\u8054\u7f51\u63a5\u5165\u3002\u7136\u800c\uff0c\u4e8b\u60c5\u6b63\u5728\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u8981\u5f52\u529f\u4e8e\u516c\u5e73\u4e92\u8054\u7f51\u5021\u8bae (EII) \u7b49\u9879\u76ee\uff0c\u8fd9\u662f\u5e95\u7279\u5f8b\u793e\u533a\u6280\u672f\u9879\u76ee\u548c\u793e\u533a\u7ec4\u7ec7\u7f51\u7edc\u4e4b\u95f4\u7684\u5408\u4f5c\u3002 EII \u6709\u4e00\u4e2a\u96c4\u5fc3\u52c3\u52c3\u7684\u76ee\u6807\uff1a\u901a\u8fc7\u4e3a\u5e95\u7279\u5f8b\u670d\u52a1\u6b20\u7f3a\u7684\u793e\u533a\u5efa\u8bbe\u4f4e\u6210\u672c\u3001\u9ad8\u901f\u7684\u4e92\u8054\u7f51\u6765\u52a0\u5f3a\u793e\u533a\uff0c\u63d0\u9ad8\u6570\u5b57\u7d20\u517b\uff0c\u5e76\u57f9\u8bad\u5c45\u6c11\u6210\u4e3a\u201c\u6570\u5b57\u7ba1\u5bb6\u201d\u3002\u6392\u9664\u4e07\u96be\uff0c\u4ed6\u4eec\u53d6\u5f97\u4e86\u6210\u529f\u3002\u5728\u8fc7\u53bb\u7684\u516d\u5e74\u4e2d\uff0cEII \u5728\u5e95\u7279\u5f8b\u7684\u5927\u7247\u571f\u5730\u4e0a\u5efa\u7acb\u5e76\u7ef4\u62a4\u4e86\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u4e92\u8054\u7f51\u7f51\u7edc\uff0c\u57f9\u8bad\u6765\u81ea\u793e\u533a\u7684\u6570\u5b57\u7ba1\u7406\u5458\u8bbe\u7f6e\u548c\u5b89\u88c5\u65e0\u7ebf\u63a5\u5165\u70b9\u3001\u5149\u7ea4\u8fde\u63a5\u548c\u70ed\u70b9\uff0c\u5e76\u6559\u80b2\u5c45\u6c11\u5982\u4f55\u5b89\u5168\u6709\u6548\u5730\u4f7f\u7528\u4e92\u8054\u7f51\u3002 COVID-19 \u7684\u51b2\u51fb\u4ee5\u53ca\u968f\u540e\u5728\u5168\u56fd\u8303\u56f4\u5185\u7684\u5c01\u9501\u52a0\u5267\u4e86\u6570\u5341\u5e74\u6765\u666e\u904d\u5b58\u5728\u7684\u95ee\u9898\uff1a\u6570\u5b57\u9e3f\u6c9f\u3002\u5f53\u8bb8\u591a\u7f8e\u56fd\u4eba\u767b\u5f55 Zoom \u5f00\u5c55\u4e1a\u52a1\u3001\u4e0e\u5bb6\u4eba\u804a\u5929\u548c\u89c2\u770b Netflix \u65f6\uff0c\u6570\u4ee5\u767e\u4e07\u8ba1\u7684\u4eba\u5904\u4e8e\u79bb\u7ebf\u72b6\u6001\uff0c\u65e0\u6cd5\u8fde\u63a5\uff0c\u52aa\u529b\u5bfb\u627e\u6709\u5173 COVID-19 \u7684\u4fe1\u606f\u3001\u5b89\u6392\u75ab\u82d7\u9884\u7ea6\u548c\u7533\u8bf7\u5931\u4e1a\u3002\u8fd9\u5c31\u662f\u6570\u5b57\u9e3f\u6c9f\uff1a\u62e5\u6709\u6570\u5b57\u8fde\u63a5\u7684\u4eba\u548c\u6ca1\u6709\u6570\u5b57\u8fde\u63a5\u7684\u4eba\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002\u8fd9\u79cd\u5dee\u5f02\u5728\u6709\u8272\u4eba\u79cd\u793e\u533a\u4ee5\u53ca\u4f4e\u6536\u5165\u793e\u533a\u4e2d\u5c24\u4e3a\u660e\u663e\u3002\u6839\u636e\u5e95\u7279\u5f8b\u897f\u5357\u90e8 Grace in Action \u7f51\u7edc\u7ecf\u7406 Nyasia Valdez \u7684\u8bf4\u6cd5\uff0c\u5e95\u7279\u5f8b\u6570\u5b57\u9e3f\u6c9f\u80cc\u540e\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u5c45\u6c11\u7684\u8d1f\u62c5\u80fd\u529b\u3002 \u201c\u5728\u897f\u5357\u7684\u67d0\u4e9b\u5730\u533a\uff0c\u53ea\u6709\u4e00\u4e2a\u4e92\u8054\u7f51\u63d0\u4f9b\u5546\uff0c\u800c\u5728\u5176\u4ed6\u5730\u533a\u5219\u6709\u4e09\u56db\u4e2a\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4ed6\u4eec\u552f\u4e00\u7684\u9009\u62e9\u662f\u6bcf\u6708 100 \u7f8e\u5143\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4ed6\u4eec\u5fc5\u987b\u652f\u4ed8\u7684\u8d39\u7528\u3002\u201d\u516c\u5e73\u4e92\u8054\u7f51\u5021\u8bae\u670d\u52a1\u7684\u9886\u57df\u4e3b\u8981\u662f\u6709\u8272\u4eba\u79cd\u793e\u533a\uff0cEII \u57f9\u8bad\u548c\u96c7\u7528\u7684\u6570\u5b57\u7ba1\u7406\u5458\u6765\u81ea\u8fd9\u4e9b\u793e\u533a\u3002 \u201c\u8ba9\u793e\u533a\u6210\u5458\u6210\u4e3a\u6280\u672f\u4eba\u5458\u6bd4\u8ba9\u6280\u672f\u4eba\u5458\u6210\u4e3a\u793e\u533a\u6210\u5458\u66f4\u5bb9\u6613\uff0c\u201d\u6570\u5b57\u7ba1\u5bb6 Shiva Shahmir \u8868\u793a\u3002\u7ba1\u7406\u5458\u5e2e\u52a9\u5b89\u88c5\u548c\u7ef4\u62a4 EII \u7684\u9ad8\u901f\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u662f\u65e0\u7ebf\u7684\u3001\u70b9\u5bf9\u70b9\u7684\u5e76\u63d0\u4f9b 25mbps \u7684\u4e0a\u4e0b\u901f\u5ea6\u3002\u5b83\u5229\u7528\u6765\u81ea\u4f01\u4e1a ISP \u7684 123Net \u6350\u8d60\u7684\u8fde\u63a5\uff0c\u4ece\u5e95\u7279\u5f8b\u6700\u9ad8\u70b9\u6587\u827a\u590d\u5174\u4e2d\u5fc3\u7684\u9876\u90e8\u5411\u4e09\u4e2a\u4e3b\u8981\u7ec4\u7ec7\u5408\u4f5c\u4f19\u4f34\u4f20\u9001\u5343\u5146\u8fde\u63a5\uff1aGrace in Action\u3001Church of the Messiah \u548c North End Woodward\u793e\u533a\u8054\u76df\u3002\u4ece\u90a3\u91cc\uff0c\u7ba1\u7406\u5458\u521b\u5efa\u65e0\u7ebf\u5206\u914d\u7f51\u7edc\u5230\u793e\u533a\u4e2d\u5fc3\uff0c\u7136\u540e\u5230\u4f4f\u5b85\u3002\n\u73b0\u5728\uff0cEII \u6b63\u5728\u5236\u5b9a\u672a\u6765\u7684\u5f39\u6027\u8ba1\u5212\u3002\u9996\u5148\u662f\u592a\u9633\u80fd\u5145\u7535\u7ad9\uff0c\u5b83\u5efa\u5728\u5e95\u7279\u5f8b\u5468\u56f4\uff0c\u63d0\u4f9b\u514d\u8d39\u7684\u9ad8\u901f\u4e92\u8054\u7f51\u63a5\u5165\u4ee5\u53ca\u8bbe\u5907\u5145\u7535\u3002 EII \u8fd8\u5f00\u53d1\u4e86\u4fbf\u643a\u5f0f\u7f51\u7edc\u5957\u4ef6\uff0c\u8fd9\u4e9b\u5957\u4ef6\u662f\u7535\u6c60\u4f9b\u7535\u7684\u673a\u7bb1\uff0c\u53ef\u5411\u534a\u5f84\u56db\u4e2a\u8857\u533a\u63d0\u4f9b\u65e0\u7ebf\u4fe1\u53f7\uff0c\u53ef\u5728\u7f51\u7edc\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u3002\u6700\u540e\uff0cEII \u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u5185\u90e8\u7f51\uff0c\u4e00\u4e2a\u7528\u4e8e\u79bb\u7ebf\u4e14\u4ec5\u901a\u8fc7\u5176\u7f51\u7edc\u8fdb\u884c\u901a\u4fe1\u7684\u7cfb\u7edf\u3002\u8fd9\u5141\u8bb8\u4eba\u4eec\u79c1\u4e0b\u548c\u79bb\u7ebf\u4ea4\u6d41\u3002 \u201c\u6267\u6cd5\u673a\u6784\u7ecf\u5e38\u95ee\u6211\uff0c\u4ed6\u4eec\u80fd\u5426\u6210\u4e3a\u6211\u4eec\u7f51\u7edc\u7684\u4e00\u90e8\u5206\uff0c\u201dEII \u9879\u76ee\u7ecf\u7406\u6c83\u5229\u5409\u5c14\u4f2f\u7279\u7267\u5e08\u8bf4\u3002 \u201c\u6211\u8bf4\u4e0d\uff0c\u6211\u4eec\u4fdd\u8bc1\u7528\u6237\u5bf9\u6211\u4eec\u7f51\u7edc\u7684\u9690\u79c1\uff0c\u6211\u4eec\u4e0d\u505a\u4efb\u4f55\u6570\u636e\u6536\u96c6\u3002\u6211\u4eec\u5e0c\u671b\u793e\u533a\u5728\u4ea4\u6d41\u65f6\u611f\u5230\u5b89\u5168\u3002\u201d \u201c\u83b7\u53d6\u4fe1\u606f\u5c31\u50cf\u81ea\u7531\u3002\u6bcf\u5f53\u4e3a\u4e86\u8d44\u672c\u4e3b\u4e49\u800c\u53d7\u5230\u9650\u5236\u6216\u9650\u5236\u65f6\uff0c\u5b83\u5c31\u662f\u538b\u8feb\u7684\u8c61\u5f81\uff0c\u56e0\u4e3a\u4eba\u4eec\u65e0\u6cd5\u4e0b\u5b9a\u51b3\u5fc3\uff0c\u201d\u6c99\u7c73\u5c14\u8bf4\u3002 \u201c\u5f53\u4ed6\u4eec\u6ca1\u6709\u8fd9\u4e9b\u4fe1\u606f\u65f6\uff0c\u4ed6\u4eec\u771f\u7684\u53ef\u4ee5\u4e3a\u81ea\u5df1\u505a\u51fa\u6700\u597d\u7684\u51b3\u5b9a\u5417\uff1f\u201d", "note_en": "Detroit has historically been one of the least connected cities in America, with about 40 percent of Detroit residents lacking any home internet access at all. Things are changing, though, thanks in large part to projects like the Equitable Internet Initiative (EII), a collaboration between the Detroit Community Technology Project and a network of community organizations.\n EII has an ambitious goal: to strengthen neighborhoods by building\u00a0low-cost, high-speed internet for the underserved communities of Detroit, to increase digital literacy, and to train residents to be \u201cdigital stewards.\u201d And against all odds, they are succeeding.\n Over the past six years, EII has built and maintained an impressive internet network across large swaths of Detroit, training digital stewards from the community to set up and install wireless access points, fiber hookups and hotspots, and educating residents on how to safely and effectively use the internet.\n The onslaught of COVID-19 and the subsequent lockdowns around the country exacerbated an issue that has been pervasive for decades: the digital divide. As many Americans logged into Zoom to conduct business, chat with their family and watch Netflix, millions of others were offline and disconnected, struggling to find information about COVID-19, schedule vaccine appointments and apply for unemployment. This is the digital divide: the gap between those who have digital connectivity, and those who do not. This disparity is especially pronounced in communities of color, as well as low income communities.\n According to Nyasia Valdez, network manager for Grace in Action in Southwest Detroit, one issue behind the digital divide in Detroit is affordability for residents. \u201cIn some areas of Southwest, there is only one internet provider, versus in other areas where there are three or four. So if their only option is $100 a month, then that\u2019s what they have to pay.\u201d\n The areas that the Equitable Internet Initiative serves are predominantly communities of color, and the digital stewards that EII train and employ come from these communities. \u201cIt\u2019s easier to make a community member a technician than a technician a community member,\u201d according to digital steward Shiva Shahmir.\n The stewards help install and maintain EII\u2019s high speed network, which is wireless, point-to-point and provides a 25mbps up and down speed. It utilizes donated connections from 123Net, an enterprise ISP, who beams a gigabit connection from the top of the Renaissance Center, the highest point in Detroit, to the three anchor organization partners: Grace in Action, Church of the Messiah, and North End Woodward Community Coalition. From there, the stewards create wireless distribution networks to community hubs, and then to residential homes.\n Now, EII is working on resilience plans for the future. First are solar charging stations, which are set up around Detroit and provide free, high speed internet access, as well as device-charging.\n EII is also creating portable network kits, which are battery-powered cases that provide wireless signal to a four block radius, and can be used in situations where there is a network outage.\n Finally, EII is developing an intranet, a system\u00a0for communicating offline and solely via their network. This allows people to communicate privately and offline. \u201cLaw enforcement agencies are often asking me, can they become a part of our network,\u201d says the Rev. Wally Gilbert, project manager for EII. \u201cI say no, we guarantee the users of our network privacy, we don\u2019t do any data collection. We want the community to feel safe communicating.\u201d\n \u201cAccess to information is like liberty. Whenever that is restricted or limited for the sake of capitalism, it\u2019s so symbolic of oppression because people can\u2019t make up their own minds,\u201d says Shahmir. \u201cWhen they don\u2019t have that information, can they really make the best decisions for themselves?\u201d", "posttime": "2021-08-09 04:58:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5c45\u6c11,residents,\u793e\u533a", "title": "\u5e95\u7279\u5f8b\u5c45\u6c11\u5982\u4f55\u5efa\u7acb\u81ea\u5df1\u7684\u4e92\u8054\u7f51", "title_en": "How Detroit residents are building their own internet", "transed": 1, "url": "https://thehill.com/changing-america/video/555961-how-detroit-residents-are-building-their-own-internet", "via": "", "real_tags": ["\u5c45\u6c11", "residents", "\u793e\u533a"]}, {"category": "", "categoryclass": "", "imagename": "73be1c667c04bf037561fb16681edfdc.jpg", "infoid": 1072177, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u66fe\u7ecf\u68a6\u60f3\u8fc7\u201c\u5f88\u4e45\u4ee5\u524d\uff0c\u4f4f\u5728\u4e00\u4e2a\u9065\u8fdc\u7684\u661f\u7cfb\u4e2d\u201d\uff0c\u90a3\u4e48\u73b0\u5728\u5c31\u662f\u4f60\u7684\u673a\u4f1a\u2014\u2014\u53ea\u8981\u4f60\u6709\u95f2\u7f6e\u7684\u56db\u5230\u516d\u5343\u7f8e\u5143\u3002\u672c\u5468\uff0c\u6c83\u5c14\u7279\u8fea\u65af\u5c3c\u4e16\u754c\u516c\u5e03\u4e86\u6709\u5173\u5176\u6625\u5b63\u65b0\u94f6\u6cb3\u661f\u9645\u5de1\u6d0b\u8230\u9152\u5e97\u5f00\u4e1a\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u8fd9\u662f\u4e00\u573a\u4e3a\u671f\u4e24\u5929\u7684\u6c89\u6d78\u5f0f\u201c\u661f\u7403\u5927\u6218\u201d\u4f53\u9a8c\uff0c\u5524\u8d77\u4e86\u7f6e\u8eab\u4e8e\u7535\u5f71\u4e2d\u7684\u611f\u89c9\u3002\u8be5\u6280\u672f\u5c06\u6bd4\u4efb\u4f55\u5176\u4ed6\u8fea\u58eb\u5c3c\u4f53\u9a8c\u90fd\u66f4\u5148\u8fdb\uff0c\u5305\u62ec\u8fea\u58eb\u5c3c\u4e50\u56ed\u7684\u62b5\u6297\u8fd0\u52a8\u7684\u5174\u8d77\u548c\u661f\u7403\u5927\u6218\uff1a\u94f6\u6cb3\u8fb9\u7f18\u7684\u571f\u5730\u3002\u6b63\u5982\u60a8\u6240\u6599\uff0c\u6210\u672c\u4e5f\u5c06\u9ad8\u4e8e\u51e0\u4e4e\u4efb\u4f55\u5176\u4ed6\u8fea\u58eb\u5c3c\u4f53\u9a8c\uff0c\u9664\u4e86\u5927\u578b\u5a5a\u793c\u6216\u665a\u4e0a\u79df\u7528\u672a\u6765\u4e16\u754c\u3002 \u201c\u661f\u7403\u5927\u6218\uff1a\u94f6\u6cb3\u661f\u9645\u5de1\u6d0b\u8230\u662f\u4e00\u79cd\u9769\u547d\u6027\u7684\u5168\u65b0 2 \u665a\u4f53\u9a8c\uff0c\u60a8\u5c06\u6210\u4e3a\u82f1\u96c4\uff0c\u201d\u6c83\u5c14\u7279\u8fea\u65af\u5c3c\u4e16\u754c\u7f51\u7ad9\u79f0\u3002 \u201c\u60a8\u548c\u60a8\u7684\u56e2\u961f\u5c06\u8e0f\u4e0a\u5c5e\u4e8e\u60a8\u81ea\u5df1\u7684\u53f2\u65e0\u524d\u4f8b\u7684\u661f\u7403\u5927\u6218\u5192\u9669\u3002\u8fd9\u662f\u6709\u53f2\u4ee5\u6765\u6700\u8eab\u4e34\u5176\u5883\u7684\u661f\u7403\u5927\u6218\u6545\u4e8b\u2014\u2014\u4f60\u53ef\u4ee5\u4f53\u9a8c\u5b9a\u5236\u7684\u4f53\u9a8c\uff0c\u5e76\u6bd4\u4f60\u60f3\u8c61\u7684\u66f4\u6df1\u5165\u5730\u8fdb\u884c\u661f\u7403\u5927\u6218\u5192\u9669\u3002\u201d\u6709\u5149\u5251\u4f53\u9a8c\u3001\u661f\u9645\u5a31\u4e50\u3001\u89d2\u8272\u56db\u5904\u6e38\u8361\uff0c\u4ee5\u53ca\u60a8\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u63a5\u8fd1\u661f\u7403\u5927\u6218\u7684\u6574\u4f53\u611f\u89c9\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u4f60\u4f4f\u5728\u8c6a\u534e\u7684\u592a\u7a7a\u5de1\u822a\u4e2d\uff0c\u6c89\u6d78\u5728\u9152\u5e97\u200b\u200b\u7684\u7a97\u6237\u91cc\u53ef\u4ee5\u770b\u5230\u201c\u592a\u7a7a\u201d\uff0c\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u79bb\u5f00\u9152\u5e97\uff0c\u9664\u975e\u201c\u767b\u4e0a\u4ea4\u901a\u5de5\u5177\u201d\u5230\u5df4\u56fe\uff0c\u661f\u7403\u5927\u6218\uff1a\u94f6\u6cb3\u7cfb\u7684\u571f\u5730\u8fb9\u7f18\u53d1\u751f\u3002\u597d\u83b1\u575e\u5f71\u57ce\u7684\u5165\u573a\u8d39\u5df2\u5305\u542b\u5728\u4ef7\u683c\u4e2d\uff0c\u60a8\u7684\u6240\u6709\u98df\u7269\u548c\u975e\u9152\u7cbe\u996e\u6599\u4e5f\u662f\u5982\u6b64\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u5728\u5de5\u4f5c\u5ba4\u4e2d\u4e3a\u4e24\u540d\u5ba2\u4eba\u63d0\u4f9b\u4e24\u665a\u4f4f\u5bbf\u7684\u8d39\u7528\u4e3a 4,809 \u7f8e\u5143\uff0c\u4ed6\u4eec\u53ef\u4ee5\u6295\u5165\u4e00\u4e24\u676f\u592a\u7a7a\u5564\u9152\u3002\u5982\u679c\u60a8\u6dfb\u52a0\u4e00\u4e2a\u5b69\u5b50\uff0c\u540c\u4e00\u4e2a\u623f\u95f4\u7684\u4ef7\u683c\u5c06\u9ad8\u8fbe 5,299 \u7f8e\u5143\uff0c\u5982\u679c\u623f\u95f4\u4e2d\u6709\u4e00\u4e2a\u5b69\u5b50\u548c\u7b2c\u4e09\u4e2a\u6210\u4eba\uff0c\u5219\u4ef7\u683c\u9ad8\u8fbe 5,999 \u7f8e\u5143\u3002\u5957\u623f\u4f4f\u5bbf\u751a\u81f3\u66f4\u9ad8\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8fea\u58eb\u5c3c\u6280\u672f\u6700\u5148\u8fdb\u7684\u6e38\u8f6e\u65b0\u8fea\u58eb\u5c3c\u613f\u671b\u53f7\u5305\u62ec\u201c\u6c34\u4e0a\u8fc7\u5c71\u8f66\u201d\u6ed1\u6c34\u9053\u3001\u661f\u7403\u5927\u6218\u9152\u5427\u548c\u6f2b\u5a01\u9910\u5385\uff0c\u60a8\u53ef\u4ee5\u5728\u90a3\u91cc\u54c1\u5c1d\u9ed1\u8c79\u7684 Wakanda \u548c\u7329\u7ea2\u5973\u5deb\u7684 Sokovia \u7684\u98df\u7269\u3002\u660e\u5e74\u590f\u5929\u542f\u822a\u65f6\uff0c\u5e26\u9633\u53f0\u7684\u6d77\u666f\u623f\u4e24\u4e2a\u4eba\u6bcf\u665a\u7684\u4ef7\u683c\u7ea6\u4e3a1000\u7f8e\u5143\u3002\u636e TripAdvisor \u79f0\uff0c\u534e\u7279\u8fea\u58eb\u5c3c\u4e16\u754c\u6700\u6602\u8d35\u7684\u8fea\u58eb\u5c3c\u5927\u4f5b\u7f57\u91cc\u8fbe\u9152\u5e97\u7684\u5e73\u5747\u6bcf\u665a\u623f\u4ef7\u7ea6\u4e3a 675 \u7f8e\u5143\uff0c\u7565\u4f4e\u4e8e\u8fea\u58eb\u5c3c\u4e50\u56ed\u7684\u8fea\u58eb\u5c3c\u5927\u52a0\u5dde\u9152\u5e97\u3002\u4f46\u8bdd\u53c8\u8bf4\u56de\u6765\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u661f\u7403\u5927\u6218\u7684\u7c89\u4e1d\u6765\u8bf4\uff0c\u4f60\u4e0d\u80fd\u4e3a\u5b8c\u5168\u6c89\u6d78\u5728\u540c\u4eba\u5708\u4e2d\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u4ece\u6f14\u5458\u8868\u73b0\u5f97\u597d\u50cf\u4ed6\u4eec\u771f\u7684\u662f\u661f\u9645\u65c5\u884c\u8005\u5230\u80fd\u591f\u5728\u4e0d\u53d7\u4e25\u683c\u5224\u65ad\u7684\u60c5\u51b5\u4e0b\u5236\u4f5c\u65e0\u9650\u7684\u4f0d\u57fa\u7b11\u8bdd\u4e0d\u613f\u82b1 4,000 \u7f8e\u5143\u7761\u5728\u201c\u5b87\u5b99\u98de\u8239\u201d\u4e0a\u7684\u4eba\u3002", "note_en": "If you\u2019ve ever dreamed of living \u201ca long time ago in a galaxy far, far away,\u201d now is your chance \u2014 as long as you\u2019ve got a spare four to six thousand dollars sitting around.\n  This week, Walt Disney World announced more details about its new  Galactic Starcruiser hotel opening in the spring, an immersive, two-day \u201cStar Wars\u201d experience that evokes the feeling of being in the movies. The tech will be more advanced than any other Disney experience, including Rise of the Resistance at Disneyland and the Star Wars: Galaxy\u2019s Edge lands.\n  The cost, as you might expect, is going to be higher than almost any other Disney experience, too, with the exception of, say,  a grand-scale wedding or  renting out Epcot for the night.\n    \u201cStar Wars: Galactic Starcruiser is a revolutionary new 2-night experience where you are the hero,\u201d according to Walt Disney World\u2019s website. \u201cYou and your group will embark on a first-of-its-kind Star Wars adventure that\u2019s your own. It\u2019s the most immersive Star Wars story ever created \u2014 one where you live a bespoke experience and journey further into a Star Wars adventure than you ever dreamed possible.\u201d\n     There are lightsaber experiences, interstellar entertainment, characters hanging around and an overall feeling that you\u2019re closer to being in Star Wars than you\u2019ve ever been in your life.\n       The idea is that you\u2019re staying on a luxury space cruise, so immersive that the hotel\u2019s windows look out into \u201cspace\u201d and you never leave the property unless it\u2019s to \u201cboard a transport\u201d to Batuu, the land where Star Wars: Galaxy\u2019s Edge takes place. Admission to Hollywood Studios is included in the price, as is all of your food and non-alcoholic beverages. But really, for $4,809 for two nights\u2019 accommodations for two guests in a studio, they could throw in a space beer or two.\n   Prices go up to $5,299 for that same room if you add a kid, and up to $5,999 if there\u2019s a kid and a third adult in the room. Suite accommodations are even higher.\n      By comparison, Disney\u2019s most technologically advanced cruise ship,  the new Disney Wish, includes an \u201caqua coaster\u201d waterslide ride, a Star Wars bar and  a Marvel restaurant where you can eat foods from Black Panther\u2019s Wakanda and the Scarlet Witch\u2019s Sokovia. When it sets sail next summer, prices will be about $1,000 a night for two people in an ocean view room with a balcony.\n   According to TripAdvisor, the  average nightly rate at Disney\u2019s Grand Floridian Hotel, the most expensive hotel at Walt Disney World, is about $675, and  just slightly under that for Disney\u2019s Grand Californian at Disneyland.\n  But then again, for some Star Wars fans, you can\u2019t put a price on total immersion in the fandom, from cast members acting as though they\u2019re really intergalactic travelers to the ability to make infinite Wookee jokes free from the harsh judgements of people who wouldn\u2019t spend $4,000 to sleep in a \u201cspaceship.\u201d", "posttime": "2021-08-09 04:03:38", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u661f\u7403\u5927\u6218,\u4e16\u754c,world", "title": "\u5728\u8fea\u65af\u5c3c\u4e16\u754c\u7684\u661f\u7403\u5927\u6218\u4e3b\u9898\u9152\u5e97\uff0c\u5468\u672b\u4e24\u4eba\u8d39\u7528 4,800 \u7f8e\u5143", "title_en": "At Disney World's Star Wars-Themed Hotel, a Weekend for Two Costs $4,800", "transed": 1, "url": "https://www.sfgate.com/disneyland/article/disney-world-star-wars-hotel-prices-reservations-16372866.php", "via": "", "real_tags": ["\u661f\u7403\u5927\u6218", "\u4e16\u754c", "world"]}, {"category": "", "categoryclass": "", "imagename": "e64f4a5b50980f737d6f15c9dd1d5eb1.jpg", "infoid": 1072176, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56db\u5341\u5e74\u524d\u7684 8 \u6708 10 \u65e5\uff0c\u4e00\u4f4d\u8eab\u6750\u9b41\u68a7\u7684\u8001\u4eba\u5728\u80af\u8f9b\u987f\u5bab\u53bb\u4e16\uff0c\u4eab\u5e74 94 \u5c81\u3002 .\u4ed6\u5728\u53bb\u94f6\u884c\u53c2\u52a0\u4f1a\u8bae\u65f6\u5728\u5730\u94c1\u4e0a\u9605\u8bfb\u838e\u58eb\u6bd4\u4e9a\uff0c\u5e76\u5199\u4e86\u4e1a\u4f59\u8bd7\u6b4c\u3002\u5076\u5c14\u7687\u5ba4\u6210\u5458\u4f1a\u5728\u4ed6\u4eec\u7ecf\u8fc7\u7684\u8def\u4e0a\u505c\u4e0b\u6765\u95f2\u804a\uff0c\u5c31\u50cf\u739b\u683c\u4e3d\u7279\u516c\u4e3b\u66fe\u7ecf\u548c\u5979\u7684\u65b0\u751f\u513f\u4e00\u6837\u3002\u665a\u5e74\u9690\u5c45\u7684\u4ed6\uff0c\u7528\u4ed6\u81ea\u5df1\u7684\u8bdd\u6765\u8bf4\uff0c\u5c31\u662f\u4e2a\u201c\u5927\u809a\u8001\u6cb3\u72f8\u201d\uff0c\u7559\u7740\u96be\u770b\u7684\u80e1\u987b\u3002\u8fd9\u4e2a\u4eba\u662f\u827e\u4f26\u201c\u6c64\u7c73\u201d\u62c9\u585e\u5c14\u65af\uff0c\u4e54\u6cbb\u516d\u4e16\u548c\u4f0a\u4e3d\u838e\u767d\u5973\u738b\u4e8c\u4e16\u7684\u524d\u79c1\u4eba\u79d8\u4e66\uff0c\u7231\u5fb7\u534e\u516b\u4e16\u7684\u52a9\u7406\u79c1\u4eba\u79d8\u4e66\uff0c\u5f53\u65f6\u4ed6\u662f\u5a01\u5c14\u58eb\u4eb2\u738b\u3002\u81ea 1953 \u5e74\u9000\u4f11\u4ee5\u6765\uff0c\u4ed6\u4e00\u76f4\u5728\u80af\u8f9b\u987f\u5bab\u7684\u65e7\u9a6c\u53a9\uff08\u4ed6\u8ba4\u4e3a\u90a3\u662f\u82f1\u683c\u5170\u6700\u597d\u7684\u623f\u5b50\u4e4b\u4e00\uff09\u4e00\u76f4\u751f\u6d3b\u5728\u4f18\u96c5\u548c\u5ba0\u7231\u4e4b\u4e2d\u3002\u4ece 1920 \u5e74\u5230 1953 \u5e74\uff0c\u4ed6\u65ad\u65ad\u7eed\u7eed\u5730\u5f53\u8fc7\u671d\u81e3\uff0c\u4ed6\u5bf9\u5982\u4f55\u5728\u6c11\u4e3b\u56fd\u5bb6\u7ef4\u62a4\u541b\u4e3b\u5236\u63d0\u51fa\u4e86\u5f15\u4eba\u5165\u80dc\u7684\u89c1\u89e3\u3002 Lascelles \u5728\u300a\u738b\u51a0\u300b\u4e2d\u88ab\u8bbd\u523a\u4e3a\u4e00\u4e2a\u987d\u56fa\u3001\u786c\u7740\u5934\u76ae\u3001\u813e\u6c14\u66b4\u8e81\u7684\u53ef\u6015\u89c4\u5219\u7684\u6267\u884c\u8005\uff0c\u6c38\u8fdc\u963b\u788d\u4e86\u771f\u7231\u7684\u8fdb\u7a0b\u3002\u9664\u4e86\u5728\u7231\u5fb7\u534e\u516b\u4e16\u7684\u9000\u4f4d\u4e2d\u53d1\u6325\u4f5c\u7528\u5916\uff0c\u62c9\u585e\u5c14\u65af\u8fd8\u88ab\u89c6\u4e3a\u51b3\u5b9a\u739b\u683c\u4e3d\u7279\u516c\u4e3b\u4e0d\u80fd\u4e0e\u5f7c\u5f97\u6c64\u68ee\u7ed3\u5a5a\u7684\u5f53\u6743\u6d3e\u4eba\u58eb\u4e4b\u4e00\u3002\u4f46\u662f\uff0c\u5c3d\u7ba1\u5728\u73b0\u4ee3\u7687\u5bb6\u5386\u53f2\u4e0a\u626e\u6f14\u7740\u5982\u6b64\u91cd\u8981\u7684\u89d2\u8272\uff0c\u4f46\u771f\u6b63\u7684 Lascelles \u4ecd\u7136\u5728\u6211\u4eec\u7684\u89c6\u7ebf\u4e4b\u5916\u3002\u6ca1\u6709\u4f20\u8bb0\u3002\u4ed6\u5728\u5251\u6865\u4e18\u5409\u5c14\u5b66\u9662\u7684\u6863\u6848\u57fa\u672c\u4e0a\u662f\u5c01\u95ed\u7684\u2014\u2014\u5c24\u5176\u662f\u4e0e\u541b\u4e3b\u5236\u6709\u5173\u7684\u8d44\u6599\u3002\u6700\u8fd1\u5199\u4e86\u4e00\u672c\u5173\u4e8e\u738b\u5ba4\u548c\u5927\u4f17\u5a92\u4f53\u7684\u4e66\u7684\u7231\u5fb7\u534e\u6b27\u6587\u65af\u88ab\u62d2\u7edd\u63a5\u89e6\u4ed6\u4eec\u3002\u4ed6\u7684\u65e5\u8bb0\u867d\u7136\u51fa\u8272\uff0c\u4f46\u8fd8\u662f\u7531\u4ed6\u7684\u670b\u53cb\u9c81\u4f2f\u7279\u00b7\u54c8\u7279-\u6234\u7ef4\u65af\uff08Rupert Hart-Davis\uff09\u6709\u9009\u62e9\u5730\u7f16\u8f91\u3002\u4e0e\u6d41\u884c\u7684\u5f62\u8c61\u76f8\u6bd4\uff0c\u4ed6\u4eec\u63ed\u793a\u4e86\u4e00\u4e2a\u66f4\u60c5\u7eea\u5316\u3001\u66f4\u660e\u667a\u3001\u66f4\u8ba8\u4eba\u559c\u6b22\u7684\u7537\u4eba\u3002\u56e0\u6b64\uff0c\u5173\u4e8e Lascelles \u7684\u771f\u5b9e\u6027\u683c\u5e76\u6ca1\u6709\u8fbe\u6210\u5171\u8bc6\u3002\u5bf9\u4e8e\u8eab\u4e3a\u6e29\u838e\u516c\u7235\u6d41\u4ea1\u6d77\u5916\u7684\u7231\u5fb7\u534e\u516b\u4e16\u6765\u8bf4\uff0c\u62c9\u585e\u5c14\u65af\u6c38\u8fdc\u662f\u201c\u90a3\u6761\u86c7\u201d\u3002\u8fd9\u79cd\u611f\u89c9\u662f\u76f8\u4e92\u7684\u3002\u9000\u4f4d\u4e09\u5929\u540e\uff0c\u54c8\u7f57\u5fb7\u00b7\u5c3c\u79d1\u5c14\u68ee\u4e0e\u62c9\u585e\u5c14\u65af\u5171\u8fdb\u5348\u9910\u65f6\uff0c\u671d\u81e3\u8bf4\u8fd9\u4f4d\u524d\u56fd\u738b\u201c\u5c31\u50cf\u7ae5\u8bdd\u6545\u4e8b\u4e2d\u7684\u5b69\u5b50\uff0c\u9664\u4e86\u7075\u9b42\u4e4b\u5916\uff0c\u6240\u6709\u793c\u7269\u90fd\u5f97\u5230\u4e86\u201d\u3002\u4ed6\u8fd8\u5bf9\u7231\u5fb7\u534e\u516b\u4e16\u4e0d\u591f\u7231\u56fd\u8fd9\u4e00\u4e8b\u5b9e\u5927\u53d1\u96f7\u9706\uff1a\u201c\u4ed6\u4ece\u4e0d\u5173\u5fc3\u82f1\u683c\u5170\u6216\u82f1\u56fd\u4eba\u3002\u201d Ferdinand Mount \u8bb0\u5f97 Lascelles \u53c2\u89c2\u4e86\u4ed6\u7684\u5b66\u6821\uff0c\u5728\u90a3\u91cc\uff0cMount\u201c\u88ab\u4ed6\u5bf9\u6e29\u838e\u516c\u7235\u7684\u6bd2\u6db2\u7684\u7206\u70b8\u9707\u60ca\u4e86......\u4ed6\u4ee4\u4eba\u96be\u5fd8\u3002\u201d\u4f46 Lascelles \u4e0d\u53ea\u662f\u575a\u6301\u795e\u79d8\u548c\u52bf\u5229\u7684\u6807\u51c6\uff0c\u4ed6\u4e5f\u4e0d\u4f1a\u5728\u6267\u884c\u8fd9\u4e9b\u6807\u51c6\u65f6\u83b7\u5f97\u6b8b\u9177\u7684\u4e50\u8da3\u3002\u4ed6\u4e3b\u5f20\u516c\u5e73\u7ade\u4e89\u548c\u52a1\u5b9e\u3002\u5f53\u8bfa\u57c3\u5c14\u00b7\u8003\u6c83\u5fb7\u88ab\u63a8\u8350\u4e3a\u7235\u58eb\u65f6\uff0c\u62c9\u585e\u5c14\u65af\u5efa\u8bae\u4e54\u6cbb\u516d\u4e16\u4e0d\u8981\u3002\u56fd\u738b\u4e0d\u65ad\u6279\u51c6\u5bf9\u5f00\u51fa\u65e0\u6548\u652f\u7968\u7684\u5e74\u8f7b\u82f1\u56fd\u7687\u5bb6\u7a7a\u519b\u519b\u5b98\u8fdb\u884c\u519b\u4e8b\u6cd5\u5ead\u5ba1\u5224\uff0c\u800c\u8003\u6c83\u5fb7\u6700\u8fd1\u56e0\u6b3a\u9a97\u6240\u5f97\u7a0e\u800c\u88ab\u7f5a\u6b3e\u3002\u90a3\u4e9b\u5e74\u8f7b\u4eba\u5728\u8003\u6c83\u5fb7\u53d7\u5230\u5c0a\u91cd\u7684\u540c\u65f6\u53d7\u5230\u60e9\u7f5a\u662f\u9519\u8bef\u7684\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u4ee4\u4eba\u96be\u5fd8\uff0c\u4f46\u672c\u8d28\u4e0a\u662f\u5149\u8363\u7684\u3002\u62c9\u585e\u5c14\u65af\u660e\u767d\uff0c\u867d\u7136\u541b\u4e3b\u5236\u5fc5\u987b\u4e0a\u6f14\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u662f\u5047\u7684\u3002\u516c\u5171\u666f\u89c2\u5fc5\u987b\u662f\u5b83\u6240\u575a\u6301\u7684\u4ef7\u503c\u89c2\u7684\u771f\u5b9e\u8868\u8fbe\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5fc5\u987b\u62d2\u7edd\u7235\u4f4d\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u534e\u83b1\u58eb\u8f9b\u666e\u68ee\u4e0d\u80fd\u6210\u4e3a\u5973\u738b\u3002 \uff08\u5728\u4ed6\u66f4\u6076\u6bd2\u7684\u4e00\u4e2a\u65f6\u523b\uff0c\u62c9\u585e\u5c14\u65af\u5199\u9053\uff0c\u56fd\u738b\u7684\u81e3\u6c11\u4e0d\u4f1a\u5bb9\u5fcd\u201c\u4e00\u4e2a\u88ab\u5546\u5e97\u5ba0\u574f\u7684\u7f8e\u56fd\u4eba\uff0c\u6709\u4e24\u4e2a\u6d3b\u7740\u7684\u4e08\u592b\uff0c\u58f0\u97f3\u5c31\u50cf\u751f\u9508\u7684\u952f\u5b50\u201d\u3002\uff09\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u9000\u4f4d\u540e\uff0c\u62c9\u585e\u5c14\u65af\u53bb\u4e86\u7aed\u5c3d\u5168\u529b\u8ba9\u7231\u5fb7\u534e\u8fdc\u79bb\u8fd9\u4e2a\u56fd\u5bb6\uff0c\u8bd5\u56fe\u4ece\u516c\u4f17\u7684\u8111\u6d77\u4e2d\u6839\u9664\u6574\u4e2a\u4e8b\u4ef6\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\uff0c\u65e0\u8bba\u53d1\u751f\u7684\u65b9\u5f0f\u5982\u4f55\uff0cLascelles \u5f00\u59cb\u76f8\u4fe1\u9000\u4f4d\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u4ed6\u8bf4\uff0c\u7231\u5fb7\u534e\u201c\u4e60\u60ef\u6027\u5730\u51c6\u5907\u4e3a\u4ed6\u4e2a\u4eba\u7684\u597d\u6076\u800c\u727a\u7272\u771f\u76f8\u201d\uff1b\u7231\u5fb7\u534e\u7684\u540d\u6c14\u4e0d\u8db3\u4ee5\u7ef4\u6301\u541b\u4e3b\u5236\u3002 Lascelles \u76f8\u4fe1\u8be5\u673a\u6784\uff0c\u4f46\u8bf4\uff1a\u201c\u6211\u4ece\u672a\u5c06\u6e29\u838e\u5bb6\u65cf\u7684\u4efb\u4f55\u6210\u5458\u7406\u60f3\u5316\u201d\u3002\u5f53\u54c8\u7f57\u5fb7\u00b7\u5c3c\u79d1\u5c14\u68ee\u53d7\u547d\u64b0\u5199\u4e54\u6cbb\u200b\u200b\u4e94\u4e16\u7684\u4f20\u8bb0\u65f6\uff0c\u62c9\u585e\u5c14\u65af\u544a\u8bc9\u4ed6\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u673a\u6784\u7684\u4f20\u8bb0\uff0c\u4e0d\u9700\u8981\u201c\u4e0b\u964d\u4e3a\u4e2a\u6027\u201d\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u5439\u5618\u3002\u5ba3\u5e03\u9000\u4f4d\u7684\u90a3\u5929\u665a\u4e0a\uff0c\u62c9\u585e\u5c14\u65af\u7ed5\u7740\u5723\u8a79\u59c6\u65af\u516c\u56ed\u8d70\u6765\u8d70\u53bb\uff0c\u60f3\u7740\u8a79\u59c6\u65af\u4e8c\u4e16\u3002\u541b\u4e3b\u5236\u7684\u7a33\u5b9a\u5bf9\u4ed6\u6765\u8bf4\u5f88\u91cd\u8981\u3002\u4ed6\u5c06\u9000\u4f4d\u63cf\u8ff0\u4e3a\u201c\u6211\u751f\u547d\u4e2d\u771f\u6b63\u7684\u60b2\u5267\u201d\u3002\n\u7136\u800c\u5bf9\u4e8e\u6709\u7740\u5982\u6b64\u5f3a\u70c8\u539f\u5219\u7684\u4eba\u6765\u8bf4\uff0c\u62c9\u585e\u5c14\u65af\u5374\u7f3a\u4e4f\u65b9\u5411\u611f\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5e74\u8f7b\u7684\u6bd5\u4e1a\u751f\uff0c\u4ed6\u76f8\u5f53\u61d2\u6563\u3002\u5c3d\u7ba1\u4ed6\u548c\u4f2f\u8482\u00b7\u4f0d\u65af\u7279\uff08Bertie Wooster\uff09\u6240\u8bf4\u7684\u4e00\u4e9b\u66f4\u597d\u7684\u5143\u7d20\u4e00\u8d77\u5728\u4f26\u6566\u5403\u996d\uff0c\u4f46\u4ed6\u7684\u65e5\u8bb0\u4ece\u672a\u50cf\u4ed6\u5c04\u6740\u7b2c\u4e00\u53ea\u96c4\u9e7f\u6216\u9a91\u9a6c\u65f6\u90a3\u6837\u751f\u52a8\u3002 \uff08\u4ed6\u611f\u8c22\u4ed6\u7ee7\u627f\u4e86\u201c\u53c8\u957f\u53c8\u5e73\u7684 Lascelles \u5927\u817f\u201d\u3002\uff09\u4ed6\u5e74\u8f7b\u65f6\u7684\u4e3b\u8981\u5174\u8da3\u2014\u2014\u5c31\u50cf\u7231\u5fb7\u534e\u516b\u4e16\u4e00\u6837\u2014\u2014\u662f\u6d3b\u8dc3\u3002\u4e00\u7cfb\u5217\u53ef\u80fd\u7684\u804c\u4e1a\u2014\u2014\u5916\u4ea4\u90e8\u3001\u80a1\u7968\u7ecf\u7eaa\u4eba\u3001\u8bb0\u8005\u2014\u2014\u88ab\u5c1d\u8bd5\u3001\u618e\u6068\u3001\u5931\u8d25\u6216\u6839\u672c\u6ca1\u6709\u5f00\u59cb\u3002\u5982\u679c\u6ca1\u6709\u6218\u4e89\uff0c\u4ed6\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u6d41\u6d6a\u8005\u3002\u76f8\u53cd\uff0c\u5c3d\u7ba1\u6218\u4e89\u6709\u70b9\u4e0d\u6d3b\u8dc3\uff0c\u4ed6\u8fd8\u662f\u88ab\u6388\u4e88\u519b\u4e8b\u5341\u5b57\u52cb\u7ae0\u3002\u505c\u6218\u540e\uff0c\u4ed6\u4e3a\u4ed6\u7684\u59d0\u592b\u5b5f\u4e70\u603b\u7763\u5de5\u4f5c\u3002\u4ed6\u5728\u7ed9\u4ed6\u7684\u53d4\u53d4\u963f\u9053\u592b\u00b7\u5229\u5fb7\u5c14\uff08Adolphous Liddell\uff09\uff08\u53e6\u4e00\u4e2a\u7a0d\u5fae\u6709\u70b9\u5931\u843d\u7684\u7075\u9b42\uff09\u5199\u4fe1\u65f6\u8bf4\uff1a\u201c\u5373\u4f7f\u7ecf\u8fc7\u957f\u671f\u7684\u519b\u7eaa\u8bad\u7ec3\uff0c\u5728\u6240\u6709\u7684\u9686\u91cd\u548c\u4eea\u5f0f\u4e2d\u4e5f\u6709\u5f88\u591a\u4e1c\u897f\u6df1\u6df1\u5730\u6fc0\u6012\u4e86\u6211\u3002\u201d\u6211\u4eec\u53ef\u80fd\u4f1a\u60ca\u8bb6\u4e8e\u8fd9\u79cd\u5bf9\u5e1d\u738b\u98ce\u4e91\u7684\u7f3a\u4e4f\u94a6\u4f69\u3002\u6bd5\u7adf\uff0c\u8fd9\u5c31\u662f Alan Lascelles\uff1a\u53cd\u52a8\u7684\u3001\u6743\u5a01\u7684\u3001\u5a5a\u59fb\u7684\u6740\u624b\u3001\u65e7\u79e9\u5e8f\u7684\u4e3b\u8981\u634d\u536b\u8005\u3002\u4f46\u4e5f\u6b63\u662f\u8fd9\u79cd\u7565\u663e\u8d85\u7136\u7684\u770b\u6cd5\uff0c\u8ba9\u4ed6\u6210\u4e3a\u4e86\u5982\u6b64\u4f18\u79c0\u7684\u81e3\u5b50\u3002 Lascelles \u76f8\u4fe1\u7687\u5ba4\u7684\u5b9e\u8d28\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5c55\u793a\u3002\u4e54\u6cbb\u4e94\u4e16\u53bb\u4e16\u540e\u7684\u7b2c\u4e8c\u5929\uff0c\u4e5f\u5c31\u662f\u90a3\u6b21\u62b1\u6028\u7687\u5bb6\u98ce\u6d41\u7684\u8fd1 20 \u5e74\u540e\uff0c\u56fd\u738b\u7684\u9057\u4f53\u88ab\u5e26\u5230\u6851\u5fb7\u7075\u5384\u59c6\u82b1\u56ed\u5c3d\u5934\u7684\u4e00\u4e2a\u5c0f\u6559\u5802\uff0c\u5728\u5927\u578b\u516c\u5171\u8868\u6f14\u4e4b\u524d\u4e3e\u884c\u4e86\u4e00\u4e2a\u5c0f\u578b\u7684\u79c1\u4eba\u4eea\u5f0f\uff1a\u201c\u536b\u5175\u4eec\u51e0\u4e4e\u4e00\u58f0\u4e0d\u54cd\uff0c\u5c06\u68fa\u6750\u625b\u5728\u80a9\u4e0a\uff0c\u653e\u5728\u796d\u575b\u524d\uff1b\u5728\u90a3\u91cc\uff0c\u7ecf\u8fc7\u975e\u5e38\u77ed\u6682\u7684\u670d\u52a1\u540e\uff0c\u6211\u4eec\u79bb\u5f00\u4e86\u5b83\uff0c\u8ba9\u6851\u5fb7\u7075\u5384\u59c6\u5e84\u56ed\u7684\u4eba\u770b\u5b88\u4e09\u5341\u516d\u5c0f\u65f6\u3002\u6211\u6562\u8bf4\uff0c\u5f53\u6240\u6709\u7684\u55a7\u56a3\u548c\u558a\u53eb\u90fd\u6d88\u901d\u540e\uff0c\u90a3\u4e2a\u5c0f\u5c0f\u7684\u4eea\u5f0f\u5c06\u4f5c\u4e3a\u6700\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u4eea\u5f0f\u7559\u5728\u6211\u7684\u8111\u6d77\u4e2d\u3002\u201d Lascelles \u4e0d\u662f\u90a3\u79cd\u4e3a\u4e86\u7eaa\u5ff5\u724c\u548c\u5728\u516c\u56ed\u91cc\u51fa\u53bb\u73a9\u7684\u4fdd\u7687\u515a\u3002\u4ed6\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u4fe1\u5f92\u3002\u4ed6\u53ef\u4ee5\u6beb\u4e0d\u5938\u5f20\u5730\u5c06\u56fd\u738b\u79f0\u4e3a\u795e\u3002\u4ed6\u57cb\u846c\u4e86\u90e8\u843d\u7684\u9996\u9886\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u65b0\u56fd\u738b\u4f1a\u53d1\u751f\u5982\u6b64\u6df7\u4e71\u7684\u539f\u56e0\u3002\u7231\u5fb7\u534e\u516b\u4e16\u60f3\u8981\u7ecf\u8425\u4e00\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u90e8\u843d\u3002 Lascelles \u4e0e\u7231\u5fb7\u534e\u516b\u4e16\u7684\u5386\u53f2\u5bf9\u4e8e\u4e86\u89e3\u540e\u6765\u7684\u4e8b\u4ef6\u81f3\u5173\u91cd\u8981\u3002 1920 \u5e74\uff0c\u5f53\u4ed6\u4ece\u5370\u5ea6\u56de\u6765\u65f6\uff0c\u4ed6\u7684\u670b\u53cb\u83b1\u8482\u00b7\u57c3\u5c14\u4e54 (Letty Elcho) \u7ed9\u4ed6\u5e26\u6765\u4e86\u4e00\u5c01\u4fe1\uff0c\u9080\u8bf7\u4ed6\u4e0e\u65f6\u4efb\u5a01\u5c14\u58eb\u4eb2\u738b\u7684\u7231\u5fb7\u534e\u516b\u4e16\u4e00\u8d77\u5de5\u4f5c\u3002 Lascelles \u88ab\u8fd9\u4efd\u5de5\u4f5c\u5438\u5f15\uff0c\u90e8\u5206\u539f\u56e0\u662f\u56e0\u4e3a\u5723\u8a79\u59c6\u65af\u5bab\u79bb\u4ed6\u5bb6\u534a\u82f1\u91cc\uff0c\u79bb\u4ed6\u7684\u4ff1\u4e50\u90e8\u6709\u56db\u5206\u4e4b\u4e00\u82f1\u91cc\uff0c\u4f46\u4e3b\u8981\u662f\u56e0\u4e3a\u201c\u6211\u5bf9\u738b\u5b50\u975e\u5e38\u94a6\u4f69\uff0c\u6211\u76f8\u4fe1\u82f1\u683c\u5170\u7684\u672a\u6765\u548c\u4efb\u4f55\u4e2a\u4eba\u4e00\u6837\uff0c\u90fd\u638c\u63e1\u5728\u4ed6\u7684\u624b\u4e2d\u3002\u201d\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4efd\u5de5\u4f5c\uff0c\u4ed6\u53ef\u80fd\u4f1a\u7b7e\u7ea6\u5230\u4e00\u5bb6\u5370\u5237\u516c\u53f8\u5f53\u5b66\u5f92\u3002\u8fd9\u79cd\u6df1\u6df1\u7684\u94a6\u4f69\u4e0d\u4f1a\u6301\u4e45\uff0c\u800c\u62c9\u585e\u5c14\u65af\u770b\u5230\u7687\u5ba4\u4e2d\u7684\u8352\u8c2c\u7684\u80fd\u529b\u5bf9\u4ed6\u4f5c\u4e3a\u671d\u81e3\u7684\u89d2\u8272\u5f88\u91cd\u8981\u3002\u5728\u76ee\u7779\u4e86\u738b\u5b50\u559d\u9152\u3001\u8d4c\u535a\u3001\u505a\u5973\u4eba\u3001\u73a9\u5ffd\u804c\u5b88\u3001\u5bf9\u82f1\u56fd\u5f53\u6743\u6d3e\u6210\u5458\u7c97\u9c81\u4ee5\u53ca\u2014\u2014\u4ee4\u4eba\u9707\u60ca\u7684\u662f\u5c01\u5efa\u7684\u827e\u4f26\u2014\u2014\u5728\u4e54\u6cbb\u4e94\u4e16\u53ef\u80fd\u4f1a\u6b7b\u7684\u6050\u60e7\u65f6\u8868\u73b0\u51fa\u5f88\u5c11\u5174\u8da3\u540e\uff0c\u4ed61929 \u5e74\uff0c\u4ee5\u6211\u4eec\u8bb8\u591a\u4eba\u68a6\u5bd0\u4ee5\u6c42\u7684\u65b9\u5f0f\u8f9e\u804c\uff1a\n\u5f53\u4ed6\u95ee\u6211\u4e3a\u4ec0\u4e48\u8981\u79bb\u5f00\u4ed6\u65f6\uff0c\u6211\u5728\u4ed6\u7684\u623f\u95f4\u91cc\u8e31\u6b65\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u544a\u8bc9\u4ed6\uff0c\u5c31\u50cf\u6211\u53ef\u80fd\u544a\u8bc9\u4e00\u4e2a\u5f1f\u5f1f\u4e00\u6837\uff0c\u6211\u5bf9\u4ed6\u548c\u4ed6\u7684\u6574\u4e2a\u751f\u6d3b\u8ba1\u5212\u7684\u770b\u6cd5\uff0c\u5e76\u9884\u8a00\u51c6\u786e\u5730\u8bf4\uff0c\u4ed6\u5c06\u5931\u53bb\u82f1\u683c\u5170\u7684\u738b\u4f4d\uff0c\u8fd9\u5728\u5f53\u65f6\u53ef\u80fd\u4f1a\u8ba9\u6211\u611f\u5230\u60ca\u8bb6\u3002\u6211\u4eec\u5927\u591a\u6570\u4eba\uff0c\u5728\u8fd9\u6837\u7684\u9000\u51fa\u4e4b\u540e\uff0c\u5c31\u518d\u4e5f\u4e0d\u4f1a\u56de\u53bb\u4e86\u3002\u800c Lascelles \u53ea\u662f\u9010\u6e10\u878d\u5165\u4e86\u8fd9\u4e2a\u89d2\u8272\u3002\u4e0d\u5e72\u4e86\uff0c\u4ed6\u79f0\u81ea\u5df1\u4e3a\u201c\u5012\u7f6e\u7684\u798f\u65af\u5854\u592b\u201d\uff08\u56e0\u4e3a\u4ed6\u5f88\u7626\uff0c\u4e2d\u5e74\u65f6\u548c\u5e74\u8f7b\u65f6\u4e00\u6837\u7626\uff09\uff0c\u8ba9\u54c8\u5c14\u738b\u5b50\u201c\u81ea\u5bfb\u6b7b\u8def\u201d\u3002\u4f46\u662f\uff0c\u5728\u4e0e\u4ed6\u7684\u5bb6\u4eba\u5728\u8be5\u56fd\u9605\u8bfb\u548c\u56ed\u827a\u4e24\u5e74\u540e\uff0c\u5e76\u5728\u52a0\u62ff\u5927\u4e3a\u603b\u7763\u5de5\u4f5c\u4e86\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4ed6\u88ab\u8981\u6c42\u91cd\u65b0\u52a0\u5165\u7687\u5bb6\u5de5\u4f5c\u4eba\u5458\u3002\u8d77\u521d\uff0c\u4ed6\u62d2\u7edd\u4e86\u3002\u8fd9\u4efd\u5de5\u4f5c\u662f\u4e0e\u4e54\u6cbb\u4e94\u4e16\u4e00\u8d77\u5de5\u4f5c\u7684\uff0c\u4ed6\u66fe\u5c06\u4ed6\u63cf\u8ff0\u4e3a\u201c\u795e\u683c\u201d\u2014\u2014\u4f46\u62c9\u585e\u5c14\u65af\u5728\u4ed6\u7684\u8f9e\u804c\u4fe1\u4e2d\u8bf4\uff1a\u201c\u5f88\u5c11\u6709\u4eba\u80fd\u4e00\u8f88\u5b50\u505a\u79c1\u4eba\u79d8\u4e66\uff0c\u6211\u4e0d\u662f\u4ed6\u4eec\u4e2d\u7684\u4e00\u5458\u3002\u201d\u6b64\u5916\uff0c\u4ed6\u6307\u51fa\uff0c\u5f53\u56fd\u738b\u53bb\u4e16\u65f6\uff0c\u4ed6\u4f1a\u5904\u4e8e\u4e00\u4e2a\u975e\u5e38\u56f0\u96be\u7684\u5883\u5730\uff0c\u8bf4\u5f97\u5ba2\u6c14\u4e00\u70b9\uff0c\u5df2\u7ecf\u5c06\u4ed6\u5bf9\u4ed6\u7684\u60f3\u6cd5\u544a\u8bc9\u4e86\u4e0b\u4e00\u4f4d\u3002\u4e54\u6cbb\u4e94\u4e16\u7684\u79c1\u4eba\u79d8\u4e66\u514b\u83b1\u592b\u00b7\u5a01\u683c\u62c9\u59c6\uff08Clive Wigram\uff09\u66fe\u8058\u8bf7\u62c9\u585e\u5c14\u65af\u4f5c\u4e3a\u4ed6\u7684\u52a9\u624b\uff0c\u4ed6\u544a\u8bc9\u4ed6\u4e0d\u8981\u62c5\u5fc3\u3002\u56fd\u738b\u8eab\u4f53\u5f88\u597d\uff0c\u8fd8\u6709\u51e0\u5e74\u7684\u5bff\u547d\u3002 Lascelles \u5199\u4fe1\u7ed9\u4ed6\u7684\u59bb\u5b50\u743c\u8bf4\u4ed6\u5c06\u63a5\u53d7\u8fd9\u4efd\u5de5\u4f5c\uff1a\u201c\u5982\u679c\u4e00\u4e2a\u4eba\u4e0d\u51c6\u5907\u5728\u88ab\u53ec\u5524\u65f6\u534f\u52a9\u795e\u7075\uff0c\u90a3\u4e48\u5728\u4e16\u754c\u5404\u5730\u5531\u2018\u5929\u4f51\u56fd\u738b\u2019\u662f\u6ca1\u6709\u7528\u7684\u3002\u201d\u56e0\u6b64\uff0c\u5728 1936 \u5e74 1 \u6708\uff0c\u4ed6\u524d\u5f80\u8bfa\u798f\u514b\u5f00\u59cb\u4ed6\u7684\u65b0\u5de5\u4f5c\u3002\u4ed6\u5728\u5229\u7269\u6d66\u8857\u627e\u5230\u4e86\u4e00\u8f86\u4e3a\u4ed6\u9884\u7559\u7684\u5934\u7b49\u8f66\u53a2\u3002\u65c5\u7a0b\u5f00\u59cb\u540e\uff0c\u201c\u4e00\u4e2a\u5e74\u8f7b\u4eba\u51fa\u73b0\u5728\u6211\u7684\u9a6c\u8f66\u95e8\u53e3\u3002\u5f53\u6211\u8ba4\u51fa\u4ed6\u662f\u7ea6\u514b\u516c\u7235\u65f6\uff0c\u6211\u6b63\u8981\u544a\u8bc9\u4ed6\u8d70\u5f00\u3002\u201d\u4ed6\u80fd\u8ba4\u51fa\u4ed6\u662f\u4ef6\u597d\u4e8b\u3002 12 \u4e2a\u6708\u5185\uff0c\u8fd9\u4e2a\u5e74\u8f7b\u4eba\u5c06\u6210\u4e3a\u4e54\u6cbb\u516d\u4e16\uff0c\u800c 1943 \u5e74\uff0c\u62c9\u585e\u5c14\u65af\u5c06\u6210\u4e3a\u4ed6\u7684\u79c1\u4eba\u79d8\u4e66\u3002 \u7ea6\u514b\u516c\u7235\u5728\u65c5\u9014\u4e2d\u9014\u5bf9\u4ed6\u8bf4\uff1a\u201c\u56fd\u738b\u8eab\u4f53\u4e0d\u597d\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u201d\u4e54\u6cbb\u4e94\u4e16\u5728\u56db\u5929\u5185\u53bb\u4e16\u3002\u6ca1\u6709\u7075\u9b42\u7684\u7231\u5fb7\u534e\u662f\u56fd\u738b\u3002\u56e0\u6b64\uff0c\u51fa\u4e8e\u5026\u6020\u3001\u8d23\u4efb\u548c\u70ed\u8840\u7231\u56fd\u4e3b\u4e49\u7684\u7ed3\u5408\uff0c\u62c9\u585e\u5c14\u65af\u6700\u7ec8\u6210\u4e3a\u4e86\u4e00\u4e2a\u5728\u9053\u5fb7\u4e0a\u88ab\u4ed6\u6392\u65a5\u7684\u4eba\u7684\u52a9\u7406\u79c1\u4eba\u79d8\u4e66\u3002\u7ec5\u58eb\u4eec\u4e0d\u53ea\u662f\u56e0\u4e3a\u4e0d\u559c\u6b22\u65b0\u56fd\u738b\u800c\u9000\u51fa\u7687\u5bb6\u670d\u52a1\u3002\u7231\u5fb7\u534e\u8ba9 Lascelles \u575a\u6301\u4e0b\u53bb\uff0c\u8fd9\u4e5f\u8bb8\u4ee4\u4eba\u60ca\u8bb6\u3002\u4f46\u4ece\u8fd9\u4e2a\u8ddd\u79bb\u770b\u6765\u5f88\u660e\u663e\u2014\u2014\u6b63\u5982\u5f53\u65f6\u62c9\u585e\u5c14\u65af\u6240\u8ba4\u4e3a\u7684\u90a3\u6837\u2014\u2014\u7231\u5fb7\u534e\u4ece\u6765\u6ca1\u6709\u6253\u7b97\u8d70\u90a3\u4e48\u8fdc\uff0c\u4e5f\u4e0d\u4f1a\u5f85\u592a\u4e45\u3002\u738b\u5ba4\u65e8\u5728\u901a\u8fc7\u5c55\u793a\u4ed6\u4eec\u7684\u751f\u6d3b\u6765\u4e3a\u6211\u4eec\u7684\u751f\u6d3b\u5e26\u6765\u5947\u89c2\uff1a\u51fa\u751f\u3001\u6b7b\u4ea1\u548c\u5a5a\u59fb\u7684\u8f89\u714c\u76db\u4f1a\u3002\u968f\u7740\u541b\u4e3b\u5236\u5728 19 \u4e16\u7eaa\u5931\u53bb\u6743\u529b\uff0c\u4ed6\u4eec\u7528\u8868\u6f14\u53d6\u800c\u4ee3\u4e4b\u3002\u516c\u4f17\u53c2\u4e0e\u6210\u4e3a\u7ef4\u591a\u5229\u4e9a\u5973\u738b\u4fdd\u6301\u5176\u76f8\u5173\u6027\u7684\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b0\u7684\u7687\u5ba4\u751f\u6d3b\u6a21\u5f0f\u662f\u8ba9\u7231\u5fb7\u534e\u516b\u4e16\u6210\u4e3a\u5a01\u5c14\u58eb\u4eb2\u738b\u8fd9\u6837\u7684\u660e\u661f\u7684\u4e00\u90e8\u5206\uff1a\u4ed6\u5728\u7f8e\u56fd\u3001\u52a0\u62ff\u5927\u548c\u5357\u975e\u7684\u65c5\u884c\u53d6\u5f97\u4e86\u5de8\u5927\u7684\u6210\u529f\u3002\u4f46\u5230\u4e54\u6cbb\u4e94\u4e16\u7edf\u6cbb\u672b\u671f\uff0c\u82f1\u56fd\u7687\u5ba4\u4e0e\u4eba\u6c11\u8fbe\u6210\u4e86\u65b0\u7684\u76df\u7ea6\uff1a\u201c\u79c1\u4eba\u8bda\u4fe1\uff0c\u516c\u5171\u666f\u89c2\u201d\u3002 Lascelles \u662f\u683c\u9c81\u5409\u4e9a\u6a21\u5f0f\u7684\u5927\u796d\u53f8\uff0c\u4ed6\u4eb2\u773c\u76ee\u7779\u4e86\u7231\u5fb7\u534e\u5168\u662f\u516c\u4f17\u4eba\u7269\uff0c\u6ca1\u6709\u79c1\u4eba\u6b63\u76f4\u3002\u4f5c\u4e3a\u4e00\u540d\u5931\u804c\u7684\u671d\u81e3\uff08\u5e76\u4e14\u56e0\u4e3a\u4ed6\u627e\u4e0d\u5230\u5176\u4ed6\u4e8b\u60c5\u53ef\u505a\uff09\uff0c\u4ed6\u610f\u8bc6\u5230\u9664\u975e\u738b\u5ba4\u575a\u6301\u81ea\u5df1\u7684\u539f\u5219\u2014\u2014\u575a\u6301\u4e0d\u65ad\u53d8\u5316\u7684\u4e16\u754c\u5f3a\u52a0\u7ed9\u5b83\u7684\u539f\u5219\u2014\u2014\u5426\u5219\u5c31\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u4ed6\u662f\u5ba3\u4f20\u5458\uff0c\u662f\u7231\u5fb7\u534e\u516b\u4e16\u7684\u654c\u4eba\uff0c\u662f\u53cd\u52a8\u6d3e\uff0c\u4ee5\u53ca\u4ed6\u58f0\u79f0\u7684\u4e00\u5207\uff0c\u56e0\u4e3a\u4ed6\u610f\u8bc6\u5230\u738b\u5ba4\u522b\u65e0\u9009\u62e9\u3002\u968f\u7740\u541b\u4e3b\u5236\u9002\u5e94\u6c11\u4e3b\u5236\uff0c\u636e\u8bf4\u62c9\u585e\u5c14\u65af\u5e26\u6765\u7684\u5927\u90e8\u5206\u4e8b\u60c5\u5f88\u53ef\u80fd\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\n\u4ed6\u4e00\u76f4\u662f\u4e00\u4e2a\u7565\u663e\u4e0d\u7518\u7684\u671d\u81e3\u3002 \uff08\u4ed6\u9000\u4f11\u540e\u5f88\u4e45\u5c31\u544a\u8bc9\u4ed6\u7684\u5973\u513f\uff0c\u5982\u679c\u4ed6\u80fd\u91cd\u6765\uff0c\u4ed6\u4f1a\u517b\u9a6c\u3002\u201c\u8d5b\u9a6c\uff0c\u6216\u9a6c\u8f66\uff1a\u4efb\u4f55\u79cd\u7c7b\u7684\u9a6c\u3002\u201d\uff09\u4e0d\u8fc7\uff0c\u4ed6\u5f88\u64c5\u957f\u3002\u4ed6\u6700\u7ec8\u4f1a\u88ab\u8bb0\u4f4f\u662f\u6700\u540e\u4e00\u4e2a\u5e2e\u52a9\u541b\u4e3b\u5236\u8fc7\u6e21\u5230\u73b0\u4ee3\u529f\u80fd\u7684\u8001\u6d3e\uff0c\u8fd8\u662f\u4e00\u4e2a\u987d\u56fa\u7684\u8001\u53cd\u52a8\u5206\u5b50\uff0c\u65e0\u8c13\u5730\u7834\u574f\u4e86\u4e00\u4e9b\u5e78\u798f\u751f\u6d3b\uff0c\u8fd8\u6709\u5f85\u89c2\u5bdf\u3002\u4f46\u662f\u5f53\u4ed6\u7684\u6863\u6848\u6700\u7ec8\u88ab\u6e05\u7406\u5e72\u51c0\u65f6\uff0c\u6211\u6000\u7591\u6211\u4eec\u4f1a\u5728\u90a3\u91cc\u627e\u5230\u4efb\u4f55\u9ed1\u6697\u7684\u79d8\u5bc6\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u57fa\u672c\u539f\u7406\u3002\u4ed6\u662f\u4e00\u4e2a\u76f8\u4fe1\u738b\u5ba4\u9053\u5fb7\u652f\u6491\u7740\u738b\u5ba4\u773c\u955c\u7684\u4eba\u3002\u4ed6\u4f1a\u600e\u6837\u770b\u5f85\u73b0\u4ee3\u541b\u4e3b\u5236\uff1f\u5728 1990 \u5e74\u5bf9\u83f2\u5229\u666e\u00b7\u9f50\u683c\u52d2 (Philip Ziegler) \u7684\u7231\u5fb7\u534e\u516b\u4e16 (Edward VIII) \u7684\u8bc4\u8bba\u4e2d\uff0c\u514b\u91cc\u65af\u6258\u5f17\u00b7\u5e0c\u94a6\u65af (Christopher Hitchens) \u89c2\u5bdf\u5230\u201c\u738b\u4f4d\u7684\u9b54\u529b\u73b0\u5728\u4e0e\u67e5\u5c14\u65af\u548c\u5b89\u5ae9\u4f2f\u683c\u3001\u6234\u5b89\u5a1c\u548c\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e\u5bc6\u4e0d\u53ef\u5206\u2014\u2014\u7231\u5fb7\u534e\u7684\u56fd\u9645\u767d\u8272\u5783\u573e\u4e60\u60ef\u5ef6\u4f38\u5230\u73b0\u4ee3\u5a31\u4e50\u5708\u548c\u540d\u4eba\u6587\u5316\u4e2d\u3002 \u201d\u8fd9\u53e5\u8bdd\u53ef\u80fd\u662f\u5bf9 Lascelles \u5b66\u6821\u7684\u60bc\u8bcd\uff1a\u9664\u975e\u4ed6\u4eec\u575a\u6301\u67d0\u4e9b\u56f0\u96be\u7684\u3001\u6709\u65f6\u662f\u8fc7\u65f6\u7684\u539f\u5219\uff0c\u5426\u5219\u62e5\u6709\u738b\u5ba4\u6beb\u65e0\u610f\u4e49\u3002\u5bf9\u4e8e\u62c9\u585e\u5c14\u65af\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5f53\u65f6\u7684\u516c\u4f17\u6765\u8bf4\uff0c\u8fd9\u4e9b\u539f\u5219\u90fd\u662f\u5173\u4e8e\u5a5a\u59fb\u7684\u3002\u4ed6\u505a\u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u662f\u5750\u5728\u80af\u8f9b\u987f\u5bab\u7684\u82b1\u56ed\u91cc\u89c2\u770b\u67e5\u5c14\u65af\u548c\u6234\u5b89\u5a1c\u5a5a\u793c\u7684\u70df\u82b1\u5e86\u795d\u6d3b\u52a8\u3002\u7b2c\u4e8c\u5929\uff0c\u4ed6\u6bcf\u9694\u51e0\u5206\u949f\u5c31\u8be2\u95ee\u6709\u5173\u4e8b\u4ef6\u7684\u6d88\u606f\uff0c\u62c5\u5fc3\u4e00\u5207\u90fd\u4f1a\u987a\u5229\u3002\u4e24\u5468\u540e\u4ed6\u53bb\u4e16\u4e86\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u6211\u4eec\u4ece\u90a3\u4ee5\u540e\u542c\u5230\u7684\u5173\u4e8e\u7687\u5ba4\u7684\u90a3\u4e9b\u7206\u6599\u4f1a\u4ee4\u4ed6\u7684\u793c\u4eea\u611f\u5230\u538c\u6076\u3002\u4f46\u6c64\u7c73\u6ca1\u6709\u63a8\u6d4b\u3002 BBC \u7684\u4e00\u4f4d\u5e74\u8f7b\u4eba\u66fe\u8bd5\u56fe\u8bf4\u670d\u4ed6\u53c2\u52a0 Lascelles \u6240\u8bf4\u7684\u201c\u5173\u4e8e\u82f1\u56fd\u541b\u4e3b\u5236\u672a\u6765\u7684\u7535\u89c6\u72c2\u6b22\u201d\u3002 Lascelles \u76f4\u622a\u4e86\u5f53\u5730\u56de\u7b54\u8bf4\uff1a\u201c\u6211\u544a\u8bc9\u4ed6\u6211\u5f88\u5feb\u5c31\u4f1a\u8d64\u8eab\u88f8\u4f53\u5730\u8d70\u5728\u76ae\u5361\u8fea\u5229\u5927\u8857\u4e0a\u3002\u201d\u6211\u4eec\u53ef\u80fd\u4f1a\u53d1\u73b0\u5f88\u5bb9\u6613\u5c06\u4ed6\u89c6\u4e3a\u8001\u987d\u56fa\u800c\u4e0d\u4e88\u7406\u4f1a\u3002\u4f46\u662f\uff0c\u6211\u4eec\u5982\u4f55\u81ea\u4fe1\u5730\u8bf4\u6211\u4eec\u8d85\u8d8a\u4e86\u4ed6\u5bf9\u79c1\u4eba\u8bda\u4fe1\u7684\u62c5\u5fe7\uff1f\u6211\u4eec\u662f\u5426\u62c5\u5fc3\u4ec0\u4e48\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u738b\u5ba4\u914d\u5076\uff1f\u8981\u53c2\u4e0e\u8ba8\u8bba\u5e76\u4fdd\u6301\u6700\u65b0\u72b6\u6001\uff0c\u8bf7\u6210\u4e3a\u6ce8\u518c\u7528\u6237\u3002\u6ce8\u518c\u6211", "note_en": "Forty years ago, on 10 August, a tall and wiry old man died at Kensington Palace, aged 94. He had been a cultivated chap \u2014 a former Director of the Midland Bank, Secretary of the Literary Society and Director of the Royal Academy of Music. He read Shakespeare on the Tube as he travelled to meetings at the bank, and wrote amateur poetry. Occasionally royalty stopped to chit chat on their way past, as Princess Margaret once did with her new baby. In later retirement, he had become something of a hermit, looking like \u201ca pot-bellied old beaver\u201d, to use his own words, and growing an ungainly beard.\n This man was Alan \u201cTommy\u201d Lascelles, former Private Secretary to George VI and Queen Elizabeth II, and the Assistant Private Secretary to Edward VIII when he was Prince of Wales. He had lived, grace-and-favour, at the Old Stables at Kensington Palace (he thought it was one of the nicest houses in England) since he retired in 1953. Having been a courtier, on and off, from 1920-1953, he gives a fascinating insight into how to preserve a monarchy in a democracy.\n  Lascelles gets caricatured as a stiff-arsed, hard-bristled, curmudgeonly enforcer of horrible rules in  The Crown , forever thwarting true love\u2019s course. As well as playing a role in Edward VIII\u2019s abdication, Lascelles is seen as one of the Establishment men who decided Princess Margaret couldn\u2019t marry Peter Townsend. But despite this crucial role in modern Royal history, the real Lascelles remains slightly out of sight to us. There is no biography. His archives in Churchill College, Cambridge are largely closed \u2014 especially material relating to the monarchy. Edward Owens, who recently wrote a book about the royal family and the mass media, was denied access to them. His diaries, although excellent, were selectively edited by his friend Rupert Hart-Davis; they reveal a much more emotional, sensible, likeable man than the popular image.\n There is no consensus, then, on Lascelles\u2019s true character. To Edward VIII, living in exile as the Duke of Windsor, Lascelles was always \u201cthat snake\u201d. The feeling was mutual. When Harold Nicolson had lunch with Lascelles three days after the Abdication, the courtier said the former King was \u201clike a child in the fairy stories who had been given every gift except a soul\u201d. He was also spitting with rage about the fact that Edward VIII was not patriotic enough: \u201cHe never cared about England or the English.\u201d Ferdinand Mount  remembers Lascelles visiting his school, where Mount \u201cwas startled by his explosion of venom against the Duke of Windsor \u2026 He was memorably unpleasant.\u201d\n  But Lascelles wasn\u2019t just a stickler for arcane and snobbish standards, nor did he take a cruel pleasure in enforcing them. He stood for fair play and pragmatism. When No\u00ebl Coward was recommended for a knighthood, Lascelles advised George VI against. The King was constantly approving court martials against young RAF officers who had written dud cheques, and Coward had recently been fined for cheating his Income Tax. It would have been wrong for those young men to be punished while Coward was honoured.\n Essentially honourable, then, despite being memorably unpleasant. Lascelles understood that although monarchy must be staged, that doesn\u2019t mean it can be fake. The public spectacle has to be a true enough expression of the values it upholds. That is why the knighthood had to be refused, and why Wallace Simpson couldn\u2019t be Queen. (In one of his more venomous moments, Lascelles wrote that the King\u2019s subjects would not tolerate \u201ca shop-spoiled American, with two living husbands and a voice like a rusty saw\u201d.) That is why, after the abdication, Lascelles went to some lengths to keep Edward out of the country, to try and eradicate the whole affair from the public mind. It is also why, irrespective of the way it happened, Lascelles came to believe the abdication was inevitable. Edward, he said, was \u201chabitually ready to sacrifice truth to his personal likes or dislikes\u201d; Edward\u2019s celebrity wasn\u2019t enough to maintain the monarchy.\n Lascelles believed in the institution but said, \u201cI have never idealised any member of the House of Windsor\u201d. When Harold Nicolson was commissioned to write George V\u2019s biography, Lascelles told him it would be the biography of an institution, and that there would be no need to \u201cdescend into personalities\u201d. This isn\u2019t just bluster. The night the abdication was announced, Lascelles walked round and round St James\u2019s Park, thinking about James II. The stability of the monarchy mattered to him. He described the abdication as \u201ca real tragedy in my life\u201d.\n  And yet for someone with such strong principles, Lascelles lacked a sense of direction. As a young graduate, he was rather louche. Although he was skittling around London dining with what Bertie Wooster would call some of the better elements, his diary never comes alive like it does when he shoots his first stag, or when he\u2019s riding a horse. (He gives thanks that he inherited the \u201clong, flat Lascelles thighs.\u201d) His main interest as a young man \u2014 just like Edward VIII\u2019s \u2014 was to be active. A series of possible careers \u2014 Foreign Office, stockbroker, journalist \u2014 were tried, hated, failed or simply never started. Without the war, he would have been edging towards becoming a drifter. Instead, despite a somewhat inactive war, he was awarded the Military Cross.\n After the Armistice, he worked for his brother-in-law, the Governor of Bombay. Writing to his uncle  Adolphous Liddell (another slightly lost soul) he said: \u201cthere is much in all the flummery and ceremonial which, even after a long course of military discipline, irritates me profoundly.\u201d We might be surprised at this lack of admiration for imperial flummery. This is, after all, Alan Lascelles: reactionary, establishment stalwart, slayer of marriages, arch defender of the old order. But it was precisely this slightly detached view that made him such a good courtier.\n Lascelles believed in the substance of royalty, not just the display. The day after George V died, nearly 20 years after that complaint about imperial flummery, the King\u2019s body was taken to a little church at the end of the garden at Sandringham for a small private ceremony ahead of the large, public spectacle:\n \u201cThe guardsmen, with scarcely a sound, slung the coffin on their shoulders and laid it before the altar; and there, after a very brief service, we left it, to be watched for thirty-six hours by the men of the Sandringham Estate. I daresay when all the tumult and shouting dies, that little ceremony will remain in my mind as the most impressive of all.\u201d\n Lascelles was not the sort of Royalist who was in it for the memorial plates and days out at the park. He was a genuine believer. He could talk of the King as a Deity with little exaggeration. He was burying the head of his tribe. This is why there was such a kerfuffle with the new King. Edward VIII wanted to run a very different sort of tribe.\n  Lascelles\u2019s history with Edward VIII is essential to understanding later events. When he returned from India in 1920, his friend Letty Elcho brought him a letter offering a job with Edward VIII, then Prince of Wales. Lascelles was attracted to the job partly because St. James\u2019s Palace was half a mile from his house and a quarter of a mile from his club, but mostly because \u201cI have got a very deep admiration for the Prince, and I am convinced that the future of England is as much in his hands as in any individual\u201d. Remarkably, had this job not come along, he would have signed on as an apprentice to a printing firm.\n This deep admiration would not last, and Lascelles\u2019s ability to see the ridiculous in the Royal was important to his role as a courtier. After nine years of watching the Prince drink, gamble, womanise, neglect his duties, be rude to members of the British establishment, and \u2014 shockingly for the feudal Alan \u2014 show very little interest when there was a scare that George V might die, he stormed out in 1929, in the sort of resignation so many of us have dreamed of making:\n When he asked me why I wanted to leave him, I paced his room for the best part of an hour, telling him, as I might have told a younger brother, exactly what I thought of him and his whole scheme of life, and foretelling, with an accuracy that might have surprised me at the time, that he would lose the throne of England.\n Most of us, after such an exit, would never go back. And Lascelles had only drifted into the role. Quitting it, he called himself \u201can inverted Falstaff\u201d (because he was thin, just as thin in middle age as when he was young), leaving Prince Hal to \u201cwork out his own damnation\u201d. But, after two years of reading and gardening with his family in the country, and a stint working for the Governor General in Canada, he was asked to re-join the Royal staff.\n At first, he refused. The job was with George V, who he once described as \u201cthe godhead\u201d \u2014 but Lascelles had said in his resignation letter: \u201cVery few men can go on being private secretaries all their lives, and I am not one of them.\u201d And besides, he pointed out, when the king died, he would be in a very difficult position, to put it mildly, having told the next-in-line exactly what he thought of him. Clive Wigram, George V\u2019s Private Secretary \u2014\u00a0who was hiring Lascelles to be his assistant \u2014 told him not to worry. The King was in splendid health and had years left in him. Lascelles wrote to his wife Joan saying he was going to take the job: \u201cIt is no use going about the world singing \u2018God Save the King\u2019 if one isn\u2019t prepared to assist the Deity when called upon.\u201d\n  And so, in January 1936, he travelled to Norfolk to start his new job. He had found a first-class carriage reserved for him at Liverpool Street. Once the journey was underway, \u201ca young man appeared in the doorway of my carriage. I was about to tell him to go away when I recognised him as the Duke of York.\u201d It was a good thing he recognised him. The young man would accede as George VI within 12 months, and Lascelles would become his Private Secretary in 1943. The Duke of York said to him halfway through the journey, \u201cWhat\u2019s all this about the King not being well?\u201d George V died within four days. The soulless Edward was king.\n And so, from a combination of lassitude, duty, and blue-blooded patriotism, Lascelles ended up as Assistant Private Secretary to a man he was morally repulsed by. Gentlemen do not just drop out of Royal service because they dislike the new King. It is perhaps surprising that Edward kept Lascelles on. But it seems obvious from this distance \u2014 as it seemed to Lascelles then\u00a0\u2014 that Edward had never planned to make it that far and wasn\u2019t going to stay long.\n The royal family is meant to bring spectacle to our lives by displaying theirs: a glittering pageant of Births, Deaths, and Marriages. As the monarchy lost power through the nineteenth century, they replaced it with performance. Public engagement became Queen Victoria\u2019s way of maintaining her relevance. And this new mode of royal existence is part of what made Edward VIII such a star as Prince of Wales: his tours of America, Canada, and South Africa were massive successes. But by the end of George V\u2019s reign, British royalty had consolidated a new covenant with the people: \u201cprivate probity, public spectacle.\u201d\n Lascelles was the high priest of the Georgian model and had seen first-hand that Edward was all public spectacle and no private probity. A courtier out of duty (and because he found nothing else to do), he realised that unless the royal family stuck to its principles \u2014 to the principles forced on it by a changing world \u2014 it would suffer. To the extent that he was a propagandist, an enemy of Edward VIII, a reactionary, and everything else he is claimed to be, it was because he realised the royal family had very little choice. Much of what Lascelles is said to have brought about may well have been inevitable as monarchy adjusted to democracy.\n He had always been a slightly unwilling courtier. (He told his daughter long after he retired that, if he could have his life again, he would breed horses. \u201cRacehorses, or cart-horses: any sort of horses.\u201d) He was good at it, though. It remains to be seen whether he will eventually be remembered as the last of the old school who helped the monarchy transition to its modern function \u2014 or as a crusty old reactionary who needlessly destroyed a clutch of happy lives. But when his archives are eventually dusted off, I doubt we will find any dark secrets in there. We already know the fundamentals. He was a man who believed in royal morals underpinning royal spectacles.\n  What would he make of the modern monarchy? In his 1990 review of Philip Ziegler\u2019s  Edward VIII, Christopher Hitchens  observed that \u201cthe magic of the throne is now inextricable from Charles and the Annenbergs, Diana and Donald Trump \u2014 the extension of Edward\u2019s international white-trash habit into modern showbiz and celeb culture.\u201d This line might stand as a eulogy for the Lascelles\u2019s school: that there is little point in having a Royal Family unless they adhere to certain difficult and sometimes out-of-date principles. For Lascelles, as for the public at that time, those principles were about marriage. One of the last things he did was sit in the garden of Kensington Palace to watch the firework celebrations of Charles and Diana\u2019s wedding. The next day, he asked for news about the event every few minutes, anxious it should all be going well. He died two weeks later.\n Undoubtedly, the sort of revelations we have heard about the Royal Family since would have been anathema to his sense of decorum. But Tommy didn\u2019t speculate. A young man from the BBC once tried to persuade him to appear in what Lascelles called \u201ca television orgy on The Future of the British Monarchy\u201d. Lascelles gave a forthright reply: \u201cI told him I would as soon walk stark naked down Piccadilly.\u201d We might find it easy to dismiss him as an old fogey. But how confidently can we say that we are beyond his concerns about private probity? Are we above worrying about what makes an acceptable royal spouse?\n To get involved in the discussion and stay up to date, become a registered user.\n    Sign me up", "posttime": "2021-08-09 03:58:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u541b\u4e3b\u5236,saved,\u7231\u5fb7\u534e", "title": "\u62ef\u6551\u541b\u4e3b\u5236\u7684\u201c\u86c7\u201d", "title_en": "The 'snake' who saved the monarchy", "transed": 1, "url": "https://unherd.com/2021/08/the-snake-who-saved-the-monarchy/", "via": "", "real_tags": ["\u541b\u4e3b\u5236", "saved", "\u7231\u5fb7\u534e"]}]