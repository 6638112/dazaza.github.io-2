[{"category": "", "categoryclass": "", "imagename": "cc35c0950881e2e8e784d95cbf3ecb63.png", "infoid": 1066710, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5f88\u6fc0\u52a8\u5230\u91ca\u653e.NET 6\u9884\u89c85.\u6211\u4eec\u73b0\u5728\u5728.NET 6\u7684\u4e0b\u534a\u90e8\u5206\uff0c\u5e76\u5f00\u59cb\u770b\u5230\u6709\u91cd\u5927\u7684\u529f\u80fd\u3002\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662f.NET SDK\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5b83\u662f\u6211\u4eec\u7684.NET Unifigation Vision\u7684\u57fa\u7840\uff0c\u5e76\u652f\u6301\u652f\u6301\u66f4\u591a\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u578b\u3002\u4e0e\u5176\u4ed6\u7279\u5f81\u4e00\u6837\uff0c\u5b83\u5373\u5c06\u5230\u6765\u63d0\u4f9b\u5f15\u4eba\u6ce8\u76ee\u7684\u6700\u7ec8\u7528\u6237\u4f53\u9a8c\u3002\n   \u6709\u5173Web\uff0c\u6570\u636e\u8bbf\u95ee\u548c\u8de8\u5e73\u53f0UI\u65b9\u6848\u7684\u6700\u65b0\u529f\u80fd\uff0c\u8bf7\u53c2\u9605ASP.NET\u6838\u5fc3\uff0cEF\u6838\u5fc3\u548c.NET MAUI\u5e16\u5b50\u3002\n Visual Studio 2022\u9884\u89c81\u4eca\u5929\u4e5f\u91ca\u653e\uff0c.NET 6\u9884\u89c85\u5305\u542b\u5728\u8be5\u7248\u672c\u4e2d\u3002 .NET 6\u4e5f\u4f7f\u7528Visual Studio 16.11\u548cMac 8.9\u7684Visual Studio\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u4f7f\u7528\u8fd9\u4e9b\u6784\u5efa\uff0c\u5982\u679c\u60a8\u60f3\u5c1d\u8bd5\u4f7f\u7528Visual Studio .NET 6\u3002\n \u67e5\u770b\u65b0\u7684\u5bf9\u8bdd\u5e16\u5b50\uff0c\u7528\u4e8e\u6df1\u5165\u7684\u5de5\u7a0b\u5e08\u5230\u5de5\u7a0b\u5e08\u8ba8\u8bba\u6700\u65b0.NET\u529f\u80fd\u3002\n  SDK Workloads\u662f\u4e00\u4e2a\u65b0\u7684.NET SDK\u529f\u80fd\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u4e3a\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u578b\u6dfb\u52a0\u652f\u6301 - \u5982\u79fb\u52a8\u548c\u7f51\u9875\u88c5\u914d - \u800c\u4e0d\u589e\u52a0SDK\u7684\u5927\u5c0f\u3002\n \u5de5\u4f5c\u8d1f\u8f7d\u529f\u80fd\u5df2\u66f4\u65b0\u4e3a\u5305\u542b\u5217\u8868\u548c\u66f4\u65b0\u52a8\u8bcd\u3002\u8fd9\u4e9b\u65b0\u529f\u80fd\u63d0\u4f9b\u4e86\u9884\u671f\u7684\u6700\u7ec8\u7ecf\u9a8c\u7684\u611f\u89c9\u3002\u60a8\u5c06\u80fd\u591f\u7528\u4e00\u4e9b\u7b80\u5355\u7684\u547d\u4ee4\u5feb\u901f\u5efa\u7acb\u60a8\u7684\u9996\u9009\u73af\u5883\uff0c\u5e76\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u4fdd\u6301\u6700\u65b0\u72b6\u6001\u3002\n  \u66f4\u65b0\u52a8\u8bcd\u67e5\u8be2nuget.org for\u66f4\u65b0\u7684\u5de5\u4f5c\u8d1f\u8f7d\u6e05\u5355\uff0c\u66f4\u65b0\u672c\u5730\u6e05\u5355\uff0c\u4e0b\u8f7d\u5df2\u5b89\u88c5\u5de5\u4f5c\u8d1f\u8f7d\u7684\u65b0\u7248\u672c\uff0c\u7136\u540e\u5220\u9664\u6240\u6709\u65e7\u7248\u672c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002\u8fd9\u7c7b\u4f3c\u4e8eAPT\u66f4\u65b0\u548cAPT\u5347\u7ea7 - \u5373\uff08\u57fa\u4e8eDebian\u7684Linux Distrs\uff09\u3002 \nDotnet Workload\u547d\u4ee4\u5728\u7ed9\u5b9aSDK\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u60a8\u5df2\u5b89\u88c5.NET 6\u548c.NET 7\u3002\u5982\u679c\u60a8\u4f7f\u7528\u4e24\u8005\uff0c\u5de5\u4f5c\u8d1f\u8f7d\u547d\u4ee4\u5c06\u63d0\u4f9b\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u5de5\u4f5c\u8d1f\u8f7d\u5c06\u662f\u4e0d\u540c\u7684\uff08\u81f3\u5c11\u4e0d\u540c\u7248\u672c\u7684\u76f8\u540c\u5de5\u4f5c\u8d1f\u8f7d\uff09\u3002\n \u5982\u60a8\u6240\u89c1\uff0c\u5de5\u4f5c\u8d1f\u8f7d\u529f\u80fd\u672c\u8d28\u4e0a\u662f.NET SDK\u7684\u5305\u7ba1\u7406\u5668\u3002\u5de5\u4f5c\u8d1f\u8f7d\u9996\u5148\u5728.NET 6\u9884\u89c84\u91ca\u653e\u4e2d\u5f15\u5165\u3002\n  \u5305\u9a8c\u8bc1\u5de5\u5177\u5c06\u4f7fNuget\u5e93\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u9a8c\u8bc1\u5176\u8f6f\u4ef6\u5305\u662f\u5426\u4e00\u81f4\u4e14\u5f62\u6210\u826f\u597d\u3002\n  \u9a8c\u8bc1\u7a0b\u5e8f\u5305\u5bf9\u6240\u6709\u7279\u5b9a\u4e8e\u8fd0\u884c\u65f6\u7684\u5b9e\u73b0\u5177\u6709\u76f8\u540c\u7684\u516c\u4f17API\u3002\n    \u5728.NET 5\u4e2d\uff0c\u6211\u4eec\u5c06\u5927\u7ea6250\u5206\u6790\u4eea\u4e0e.NET SDK\u53d1\u5e03\u4e86\u5927\u7ea6250\u5206\u6790\u4eea\u3002\u4ed6\u4eec\u4e2d\u7684\u8bb8\u591a\u5df2\u7ecf\u5b58\u5728\uff0c\u4f46\u662f\u88ab\u5e26\u51fa\u4e50\u961f\u4f5c\u4e3a\u5c3c\u53e4\u7279\u5305\u3002\u6211\u4eec\u4e3a.NET 6\u6dfb\u52a0\u4e86\u66f4\u591a\u5206\u6790\u4eea\u3002\n \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5927\u591a\u6570\u65b0\u5206\u6790\u4eea\u90fd\u5728\u4fe1\u606f\u7ea7\u522b\u542f\u7528\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u8fd9\u6837\u7684\u5206\u6790\u6a21\u5f0f\u6765\u5728\u8b66\u544a\u7ea7\u522b\u542f\u7528\u8fd9\u4e9b\u5206\u6790\u4eea\uff1a\uff06lt; anyysismode\uff06gt; allenelabledydefault\uff06lt; / analysismode\uff06gt ;.\n \u6211\u4eec\u53d1\u5e03\u4e86\u6211\u4eec\u60f3\u8981\u7684.NET 6\uff08\u52a0\u4e0a\u4e00\u4e9b\u989d\u5916\uff09\u7684\u5206\u6790\u4eea\u96c6\uff0c\u7136\u540e\u4f7f\u5927\u90e8\u5206\u62a2\u52ab\u62a2\u3002 \nCredit\u5230Newell Clark\u548cMeik Tranel\u7684\u4ee5\u4e0b\u5b9e\u65bd\u4e2d\u5305\u542b\u7684\u9884\u89c85.\u8bf7\u6ce8\u610f\uff0c\u793e\u533a\u5728\u4ee5\u524d\u7684\u9884\u89c8\u4e2d\u8d21\u732e\u4e86\u5176\u4ed6\u5b9e\u65bd\u3002\n    CA1416\u5e73\u53f0\u517c\u5bb9\u6027\u5206\u6790\u4eea\u5df2\u7ecf\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf/\u8fd0\u884c\u65f6\u7684\u65b9\u6cd5\u8bc6\u522b\u5e73\u53f0\u8b66\u536b\uff0c\u4f8b\u5982operatingSystem.IsWindows\u548cOperatingsystem.IsWindowsVersionAtlest\u3002\u4f46\u662f\uff0c\u5206\u6790\u4eea\u4e0d\u8bc6\u522b\u51fa\u7c7b\u4f3c\u4e8e\u5728\u5b57\u6bb5\u6216\u5c5e\u6027\u4e2d\u7f13\u5b58\u7684\u5e73\u53f0\u68c0\u67e5\u7ed3\u679c\u7b49\u5176\u4ed6\u4fdd\u62a4\u53ef\u80fd\u6027\uff0c\u6216\u8005\u5728\u8f85\u52a9\u65b9\u6cd5\u4e2d\u5b9a\u4e49\u590d\u6742\u7684\u5e73\u53f0\u68c0\u67e5\u903b\u8f91\u3002\n \u4e3a\u4e86\u5141\u8bb8\u81ea\u5b9a\u4e49\u4fdd\u62a4\u53ef\u80fd\u6027\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u65b0\u7684\u5c5e\u6027\u652f\u6301oSplatformGuard\u548cUnsupportedOsplatformGuard\uff0c\u7528\u4e8e\u4f7f\u7528\u76f8\u5e94\u7684\u5e73\u53f0\u540d\u79f0\u548c/\u6216\u7248\u672c\u6ce8\u91ca\u81ea\u200b\u200b\u5b9a\u4e49\u8b66\u536b\u6210\u5458\u3002\u8be5\u6ce8\u91ca\u7531\u5e73\u53f0\u517c\u5bb9\u6027\u5206\u6790\u4eea\u7684\u6d41\u5206\u6790\u903b\u8f91\u8bc6\u522b\u548c\u5c0a\u91cd\u3002\n  [Unsupportedosplatformguard\uff08\uff06\uff0334;\u6d4f\u89c8\u5668\uff06\uff0334;\uff09] //\u5e73\u53f0\u4fdd\u62a4\u5c5e\u6027\r#if target_browser.\r \u5185\u90e8BOOL isporpported =\uff06gt;\u9519\u8bef\u7684;\r\uff03\u522b\u7684\r \u5185\u90e8BOOL isporpported =\uff06gt;\u771f\u7684;\r\uff03\u4e07\u4e00\r\r [UnsupportedoSplatform\uff08\uff06\uff0334;\u6d4f\u89c8\u5668\uff06\uff0334;\uff09]\r void apinotsupportedonbrowser\uff08\uff09{}\r\r void m1\uff08\uff09\r {\r apinotoupportedonbrowser\uff08\uff09; //\u8b66\u544a\uff1a\u6240\u6709\u5e73\u53f0\u53ef\u8bbf\u95ee\u6b64\u547c\u53eb\u7ad9\u70b9\u3002\uff06\uff0339; apinotoupportedonbrowser\uff08\uff09\uff06\uff0339;\u4e0d\u652f\u6301\uff1a\uff06\uff0339;\u6d4f\u89c8\u5668\uff06\uff0339;\r\r \u5982\u679c\uff08\u7b7e\u53d1\uff09\r {\r apinotoupportedonbrowser\uff08\uff09; //\u4e0d\u8b66\u544a\r }\r }\r\r [\u652f\u6301DOSPLATFORM\uff08\uff06\uff0334; Windows\uff06\uff0334;\uff09]\r [SupportedOsplatform\uff08\uff06\uff0334; Linux\uff06\uff0334;\uff09]\r void apionlyworkonwindowslinux\uff08\uff09{}\r\r [SupportedOsplatformGuard\uff08\uff06\uff0334; Linux\uff06\uff0334;\uff09]\r [SupportedOsplatformguard\uff08\uff06\uff0334; Windows\uff06\uff0334;\uff09]\r \u79c1\u6709readonly bool _iswindoworlinux = operatingsystem.Islinux\uff08\uff09|| Operatingsystem.IsWindows\uff08\uff09;\r\r void m2\uff08\uff09\r {\r apionlyworkonwindowslinux\uff08\uff09; //\u6b64\u547c\u53eb\u7ad9\u70b9\u53ef\u4ee5\u5728\u6240\u6709\u5e73\u53f0\u4e0a\u8bbf\u95ee\u3002\uff06\uff0339; apionlyworkonwindowslinux\uff08\uff09\uff06\uff0339;\u53ea\u652f\u6301\uff1a\uff06\uff0339; Linux\uff06\uff0339 ;,\uff06\uff0339; windows\uff06\uff0339;\r\r if\uff08_iswindoworlinux\uff09\r {\r apionlyworkonwindowslinux\uff08\uff09; //\u4e0d\u8b66\u544a\r }\r }\r}\n  \u60a8\u73b0\u5728\u53ef\u4ee5\u4e3a\u5177\u6709Application.SetDefaultFont\u7684\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u9ed8\u8ba4\u5b57\u4f53\u3002\u60a8\u4f7f\u7528\u7684\u6a21\u5f0f\u7c7b\u4f3c\u4e8e\u8bbe\u7f6e\u9ad8DPI\u6216\u89c6\u89c9\u6837\u5f0f\u3002\n \u73ed\u7ea7\u8ba1\u5212\r{\r [Stathread]\r \u9759\u6001void main\uff08\uff09\r {\r application.sethighdpimode\uff08highdpimode.systemaware\uff09;\r application.enablevisualstyles\uff08\uff09;\r application.setcompatibletextrenderingdefault\uff08false\uff09;\r\r+ application.setdefaultfont\uff08\u65b0\u5b57\u4f53\uff08\u65b0\u7684fontfamily\uff08\uff06\uff0334; Microsoft Sans Serif\uff06\uff0334;\uff09\uff0c8f\uff09\uff09;\r\r application.run\uff08\u65b0form1\uff08\uff09\uff09;\r }\r}\n      \u9ed8\u8ba4\u5b57\u4f53\u5728.NET Core 3.0\u4e2d\u66f4\u65b0\u3002\u4f46\u662f\uff0c\u8fd9\u4e00\u53d8\u5316\u5f15\u5165\u4e86\u4e00\u4e9b\u7528\u6237\u8fc1\u79fb.NET Framework\u5e94\u7528\u7a0b\u5e8f\u5230.NET\u6838\u5fc3\u7684\u91cd\u8981\u969c\u788d\u3002\u8fd9\u79cd\u65b0\u7684\u53d8\u5316\u4f7f\u5f97\u4e3a\u5e94\u7528\u7a0b\u5e8f\u9009\u62e9\u6240\u9700\u7684\u5b57\u4f53\u5e76\u5220\u9664\u8be5\u8fc1\u79fb\u969c\u788d\u3002 \n\u4ece\u5305\u88f9\u4e2d\u5220\u9664\u6846\u67b6\u662f\u4e00\u4e2a\u6e90\u5934\u7834\u88c2\u7684\u53d8\u5316\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7ee7\u7eed\u4e3a\u6211\u4eec\u53d1\u8d27\u7684\u6240\u6709\u6846\u67b6\u6784\u5efa\u589e\u52a0\u4e86\u5305\u7684\u590d\u6742\u6027\u548c\u5927\u5c0f\u3002\u5728\u8fc7\u53bb\uff0c\u6211\u4eec\u901a\u8fc7\u6536\u83b7\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u57fa\u672c\u4e0a\u610f\u5473\u7740\uff1a\n \u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e0b\u8f7d\u4e86\u65e9\u671f\u7248\u672c\u7684\u5305\u5e76\u6536\u96c6\u4e86\u65e9\u671f\u6846\u67b6\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u6211\u4eec\u4e0d\u518d\u4e3a\n \u867d\u7136\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u968f\u65f6\u66f4\u65b0\uff0c\u800c\u65e0\u9700\u62c5\u5fc3\u6211\u4eec\u4f1a\u4e22\u5f03\u6846\u67b6\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5982\u679c\u60a8\u4f7f\u7528\u6536\u83b7\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u60a8\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u6536\u5230\u4efb\u4f55\u9519\u8bef\u4fee\u590d\u6216\u65b0\u529f\u80fd\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6536\u83b7\u7684\u8d44\u4ea7\u65e0\u6cd5\u7ef4\u4fee\uff0c\u73b0\u5728\u9690\u85cf\uff0c\u56e0\u4e3a\u4ece\u4f60\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4f60\u80fd\u591f\u7ee7\u7eed\u5c06\u5305\u88c5\u66f4\u65b0\u5230\u4ee5\u540e\u7684\u7248\u672c\uff0c\u751a\u81f3\u8ba4\u4e3a\u4f60\u6b63\u5728\u6d88\u8017\u6211\u4eec\u4e0d\u518d\u7684\u540c\u6837\u7684\u65e7\u4e8c\u5143\u5305\u66f4\u65b0\u3002\n \u4ece.NET 6\u9884\u89c85\u5f00\u59cb\uff0c\u6211\u4eec\u8ba1\u5212\u4e0d\u518d\u6267\u884c\u4efb\u4f55\u5f62\u5f0f\u7684\u6536\u83b7\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u8fd0\u9001\u7684\u6240\u6709\u8d44\u4ea7\u90fd\u53ef\u4ee5\u63d0\u4f9b\u670d\u52a1\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6b63\u5728\u4e3a\u4efb\u4f55\u6bd4\u8fd9\u4e9b\u6846\u67b6\u7684\u6846\u67b6\u4e22\u5f03\u652f\u6301\uff1a\n  \u5982\u679c\u60a8\u5f53\u524d\u6b63\u5728\u5f15\u7528\u4ece\u65e9\u671f\u6846\u67b6\u4e2d\u5f15\u7528\u53d7\u5f71\u54cd\u7684\u5305\uff0c\u5219\u60a8\u5c06\u4e0d\u518d\u80fd\u591f\u5c06\u5f15\u7528\u7684\u5305\u66f4\u65b0\u4e3a\u66f4\u9ad8\u7248\u672c\u3002\u60a8\u7684\u9009\u62e9\u8981\u4e48\u5c06\u9879\u76ee\u91cd\u65b0\u51fa\u53e3\u5230\u7a0d\u540e\u7684\u6846\u67b6\u7248\u672c\u6216\u672a\u66f4\u65b0\u5f15\u7528\u7684\u5305\uff08\u901a\u5e38\u4e0d\u662f\u5de8\u5927\u7684\u6536\u56de\uff0c\u56e0\u4e3a\u60a8\u5df2\u7ecf\u6d88\u8017\u4e86\u51bb\u7ed3\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff09\u3002\n \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u201c\u53d7\u5f71\u54cd\u7684\u8f6f\u4ef6\u5305\u7684\u5b8c\u6574\u5217\u8868\u201d\uff0c\u8bf7\u53c2\u9605DotNet /\u516c\u544a\uff1a\u4e22\u5f03\u65e7\u6846\u67b6\u7248\u672c\u3002\n  \u6211\u4eec\u4e00\u76f4\u5728\u6539\u5584Microsoft.extensions API\u6b64\u7248\u672c\u3002\u5728\u9884\u89c85\u4e2d\uff0c\u6211\u4eec\u4e13\u6ce8\u4e8e\u6258\u7ba1\u548c\u4f9d\u8d56\u6ce8\u5165\u3002\u5728\u9884\u89c84\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7528\u4e8e\u65e5\u5fd7\u8bb0\u5f55\u7684\u7f16\u8bd1\u65f6\u6e90\u751f\u6210\u5668\u3002 \n\u6211\u4eec\u5728ihostbuilder\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684ConfigureHostOptions API\uff0c\u4f7f\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u66f4\u7b80\u5355\uff08\u4f8b\u5982\uff0c\u914d\u7f6e\u5173\u673a\u8d85\u65f6\uff09\uff1a\n   \u4f7f\u7528hostbuilder host = new\uff08\uff09\r .configureServices\uff08\u670d\u52a1=\uff06gt;\r {\r \u670d\u52a1.Configure\uff06lt; hostoptions\uff06gt;\uff08o =\uff06gt;\r {\r o.shutdowntimeout = timespan.fromminutes\uff0810\uff09;\r }\uff09;\r }\uff09\r \u3002\u5efa\u9020\uff08\uff09;\r\rhost.run\uff08\uff09;\n  \u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u5904\u7406\u5c06\u5728\u78b0\u5de7\u6ce8\u518cIASyncDisposable\u670d\u52a1\u65f6\u629b\u51faInvalidOperationException\u3002\n \u65b0\u7684CreateAsyncope API\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\u770b\u5230\uff1a\n   \u4f7f\u7528\u7cfb\u7edf;\r\u4f7f\u7528system.threading.tasks;\r\u4f7f\u7528Microsoft.extensions.DependentIn\u6ce8\u610f;\r\r\u7b49\u5f85\u4f7f\u7528var\u63d0\u4f9b\u7a0b\u5e8f= new serviceCollection\uff08\uff09\r .addscoped\uff06lt; foo\uff06gt;\uff08\uff09\r .buildserviceprovider\uff08\uff09;\r\r//\u8fd9\u4e2a\u4f7f\u7528\u53ef\u4ee5\u629b\u51faInvalidOperationException\r\u4f7f\u7528\uff08var scope = provider.createscope\uff08\uff09\uff09\r{\r var foo = scope.serviceprovider.getrequiredservice\uff06lt; foo\uff06gt;\uff08\uff09;\r}\r\rflass foo\uff1aiasyncdisposable\r{\r Public ValueTask DisposeAsync\uff08\uff09=\uff06gt;\u9ed8\u8ba4;\r}\n     \u51e0\u4e4e\u6240\u6709.NET Serializers\u7684\u9aa8\u5e72\u90fd\u662f\u53cd\u5c04\u3002\u53cd\u5c04\u662f\u67d0\u4e9b\u573a\u666f\u7684\u91cd\u8981\u529f\u80fd\uff0c\u4f46\u4e0d\u662f\u4f5c\u4e3a\u9ad8\u6027\u80fd\u4e91\u5929\u7136\u5e94\u7528\u7684\u57fa\u7840\uff08\u901a\u5e38\uff08de\uff09\u5e8f\u5217\u5316\u548c\u5904\u7406\u5927\u91cf\u7684JSON\u6587\u4ef6\uff09\u3002\u53cd\u5c04\u662f\u542f\u52a8\uff0c\u5185\u5b58\u4f7f\u7528\u548c\u88c5\u914d\u4fee\u526a\u7684\u95ee\u9898\u3002\n \u8fd0\u884c\u65f6\u53cd\u5c04\u7684\u66ff\u4ee3\u65b9\u6848\u662f\u7f16\u8bd1\u65f6\u6e90\u751f\u6210\u3002\u6e90\u751f\u6210\u5668\u751f\u6210\u53ef\u4ee5\u7f16\u8bd1\u4e3a\u5e93\u6216\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u7684\u4e00\u90e8\u5206\u7684C\uff03\u6e90\u6587\u4ef6\u3002\u5728\u7f16\u8bd1\u65f6\u751f\u6210\u6e90\u4ee3\u7801\u53ef\u4ee5\u4e3a.NET\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u8bb8\u591a\u597d\u5904\uff0c\u5305\u62ec\u6539\u8fdb\u7684\u6027\u80fd\u3002 \n\u5728.NET 6\u4e2d\uff0c\u6211\u4eec\u5305\u62ec\u4e00\u4e2a\u65b0\u7684\u6e90\u751f\u6210\u5668\u4f5c\u4e3aSystem.Text.json\u7684\u4e00\u90e8\u5206\u3002 JSON\u6e90\u751f\u6210\u5668\u4e0eJSonserializer\u914d\u5408\u4f7f\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ee5\u591a\u79cd\u65b9\u5f0f\u914d\u7f6e\u3002\u662f\u4f60\u51b3\u5b9a\u4f60\u662f\u5426\u4f7f\u7528\u65b0\u7684\u6e90\u751f\u6210\u5668\u3002\u5b83\u53ef\u4ee5\u63d0\u4f9b\u4ee5\u4e0b\u597d\u5904\uff1a\n  \u4f8b\u5982\uff0c\u800c\u4e0d\u662f\u5728\u8fd0\u884c\u65f6\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u751f\u6210\u65b9\u6cd5\u4ee5\u5728\uff08de\uff09\u5e8f\u5217\u5316\u671f\u95f4\u4f7f\u7528\u53cd\u5c04\uff08\u4f7f\u7528\u79c1\u6709\u5185\u5b58\u5e76\u5177\u6709\u542f\u52a8\u6210\u672c\uff09\uff0c\u800c\u4e0d\u662f\u5728\uff08de\uff09\u5e8f\u5217\u5316\u671f\u95f4\u8bbe\u7f6e\u7c7b\u5c5e\u6027\uff0c\u800c\u662f\u53ef\u4ee5\u751f\u6210\u66f4\u7b80\u5355\u4e14\u6709\u6548\u5730\u5206\u914d\u7684\u4ee3\u7801\u6216\u8005\u76f4\u63a5\u68c0\u7d22\u5230\u95ea\u7535\u5feb\u901f\u95ea\u7535\u7684\u5c5e\u6027\u3002\n \u60a8\u53ef\u4ee5\u4f7f\u7528system.text.json nuget\u5305\u7684\u6700\u65b0\u9884\u89c8\u7248\u672c\u5c1d\u8bd5\u6e90\u751f\u6210\u5668\u3002\u6211\u4eec\u6b63\u5728\u81f4\u529b\u4e8e\u5728SDK\u5185\u5305\u62ec\u6e90\u751f\u6210\u5668\u7684\u63d0\u6848\u3002\n  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cJSON\u6e90\u751f\u6210\u5668\u4e3a\u7ed9\u5b9a\u7684\u5e8f\u5217\u5316\u7c7b\u578b\u53d1\u51fa\u5e8f\u5217\u5316\u903b\u8f91\u3002\u901a\u8fc7\u751f\u6210\u76f4\u63a5\u4f7f\u7528UTF8JSONWRITER\u7684\u6e90\u4ee3\u7801\uff0c\u53ef\u4ee5\u63d0\u4f9b\u6bd4\u4f7f\u7528\u73b0\u6709\u7684JSonserializer\u65b9\u6cd5\u66f4\u9ad8\u7684\u6027\u80fd\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u6e90\u751f\u6210\u5668\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u7f16\u8bd1\u65f6\u5411\u60a8\u63d0\u4f9b\u4e0d\u540c\u5b9e\u73b0\u7684\u65b9\u5f0f\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u4f7f\u8fd0\u884c\u65f6\u4f53\u9a8c\u3002\n \u7f29\u653e\uff0cJSonserializer\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u5177\u6709\u8bb8\u591a\u529f\u80fd\uff08\u751a\u81f3\u66f4\u65b0\uff01\uff09\uff0c\u53ef\u4ee5\u4ece/\u8fdb\u5165JSON\u683c\u5f0f\u7684.NET\u7c7b\u578b\u7684\uff08DE\uff09\u5e8f\u5217\u5316\u3002\u5b83\u5f88\u5feb\uff0c\u4f46\u662f\u5f53\u5e8f\u5217\u5316\u4f8b\u7a0b\u53ea\u9700\u8981\u4e00\u4e2a\u529f\u80fd\u5b50\u96c6\u65f6\u53ef\u4ee5\u5177\u6709\u4e00\u4e9b\u6027\u80fd\u5f00\u9500\u3002\u524d\u8fdb\uff0c\u6211\u4eec\u5c06\u66f4\u65b0JSonserializer\u548c\u65b0\u6e90\u751f\u6210\u5668\u4e00\u8d77\u3002\n  \u547d\u540d\u7a7a\u95f4\u6d4b\u8bd5\r{\r \u5185\u90e8\u7c7bjsonmessage.\r {\r \u516c\u5171\u5b57\u7b26\u4e32\u6d88\u606f{get;\u653e; }\r }\r}\n \u6e90\u751f\u6210\u5668\u53ef\u4ee5\u914d\u7f6e\u4e3a\u4e3a\u793a\u4f8bjsonMessage\u7c7b\u578b\u7684\u5b9e\u4f8b\u751f\u6210\u5e8f\u5217\u5316\u903b\u8f91\u3002\u8bf7\u6ce8\u610f\uff0cjsoncontext\u7c7b\u540d\u79f0\u662f\u4efb\u610f\u7684\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u6240\u751f\u6210\u7684\u6e90\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u7c7b\u540d\u3002 \n\u4f7f\u7528system.text.json.serialization;\r\r\u547d\u540d\u7a7a\u95f4\u6d4b\u8bd5\r{\r [JSonserializable\uff08Typeof\uff08jsonMessage\uff09]\r \u5185\u90e8\u90e8\u5206\u7c7bjsoncontext\uff1ajsonserializercontext\r {\r }\r}\n \u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e00\u7ec4\u901a\u8fc7JSonserializerOptionsAttribute\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u652f\u6301\u6e90\u751f\u6210\u6a21\u5f0f\u7684JSonserializer\u529f\u80fd\uff0c\u8be5\u529f\u80fd\u63d0\u4f9b\u4e86\u6700\u4f73\u7684\u5e8f\u5217\u5316\u541e\u5410\u91cf\u3002\u8fd9\u4e9b\u529f\u80fd\u53ef\u4ee5\u63d0\u524d\u6307\u5b9a\u7ed9\u6e90\u751f\u6210\u5668\uff0c\u4ee5\u907f\u514d\u5728\u8fd0\u884c\u65f6\u989d\u5916\u68c0\u67e5\u3002\u5982\u679c\u672a\u4f7f\u7528\u8be5\u5c5e\u6027\uff0c\u5219\u5728\u8fd0\u884c\u65f6\u5047\u5b9a\u9ed8\u8ba4\u7684JSonserializationOptions\u3002\n \u4f5c\u4e3a\u6784\u5efa\u7684\u4e00\u90e8\u5206\uff0c\u6e90\u751f\u6210\u5668\u901a\u8fc7\u4ee5\u4e0b\u5f62\u72b6\u589e\u5f3a\u4e86jsonContext\u90e8\u5206\u7c7b\uff1a\n \u5185\u90e8\u90e8\u5206\u7c7bjsoncontext\uff1ajsonserializercontext\r{\r \u516c\u5171\u9759\u6001jsoncontext\u9ed8\u8ba4{get; }\r\r \u516c\u5171jsontypeinfo\uff06lt; jsonmessage\uff06gt; jsonmessage {\u5f97\u5230; }\r\r \u516c\u5171jsoncontext\uff08JSonserializerOptions\u9009\u9879\uff09{}\r\r \u516c\u5171\u8986\u76d6jsontypeinfo gettypeinfo\uff08\u7c7b\u578b\u7c7b\u578b\uff09=\uff06gt; ......\r}\n \u4f7f\u7528\u6b64\u6a21\u5f0f\u7684\u4e32\u884c\u7a0b\u5e8f\u8c03\u7528\u770b\u8d77\u6765\u50cf\u4ee5\u4e0b\u793a\u4f8b\u3002\u6b64\u793a\u4f8b\u63d0\u4f9b\u4e86\u6700\u4f73\u6027\u80fd\u3002\n \u4f7f\u7528hememstream ms = new\uff08\uff09;\r\u4f7f\u7528utf8jsonwriter writer = new\uff08ms\uff09;\r\rjsoncontext.default.jsonmessage.serialize\uff08\u5199\u9053\uff0c\u65b0jsonmessage {\uff06\uff0334;\u4f60\u597d\uff0c\u4e16\u754c\uff01\uff06\uff0334;}\uff09;\r\u64b0\u5199\u8005.Flush\uff08\uff09;\r\r// Writer\u5305\u542b\uff1a\r// {\uff06\uff0334;\u6d88\u606f\uff06\uff0334;\uff1a\uff06\uff0334;\u4f60\u597d\uff0c\u4e16\u754c\uff01\uff06\uff0334;}\n \u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528JSonserializer\uff0c\u800c\u662f\u5c06\u751f\u6210\u7684\u4ee3\u7801\u7684\u5b9e\u4f8b\u4e0eJsonContext.default.jsonMessage\u4f20\u9012\u7ed9\u5b83\u3002 \n\u8fd9\u4e24\u4e2a\u8fc7\u8f7d\u4e4b\u95f4\u7684\u5dee\u5f02\u662f\u7b2c\u4e00\u4e2a\u4f7f\u7528\u952e\u5165\u7684\u5143\u6570\u636e\u5b9e\u73b0 -  jsontypeinfo\uff06lt; t\uff06gt; - \u7b2c\u4e8c\u4e2a\u662f\u4f7f\u7528\u66f4\u666e\u904d\u7684UNTYWED\u5b9e\u73b0\uff0c\u8be5\u5b9e\u73b0\u53ef\u4ee5\u5728\u4e0a\u4e0b\u6587\u5b9e\u4f8b\u4e2d\u786e\u5b9a\u662f\u5426\u5b58\u5728\u952e\u5165\u7684\u5b9e\u73b0\u3002\u7ed3\u679c\uff0c\u5b83\u6709\u70b9\u6162\uff08\u7531\u4e8e\u7c7b\u578b\u6d4b\u8bd5\uff09\u3002\u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u7c7b\u578b\u7684\u6e90\u751f\u6210\u7684\u5b9e\u73b0\uff0c\u5219erializer\u4f1a\u629b\u51fa\u4ee4\u4eba\u6548\u5f52\u7684\u6cc4\u6f0f\u3002\u5b83\u4e0d\u4f1a\u56de\u5230\u57fa\u4e8e\u53cd\u5c04\u7684\u5b9e\u73b0\uff08\u4f5c\u4e3a\u660e\u786e\u7684\u8bbe\u8ba1\u9009\u62e9\uff09\u3002\n \u57fa\u4e8eUTF8JSONWWRITER\u7684\u6700\u5feb\u548c\u6700\u4f18\u5316\u7684\u6e90\u4ee3\u751f\u6210\u6a21\u5f0f - \u76ee\u524d\u4ec5\u9002\u7528\u4e8e\u5e8f\u5217\u5316\u3002\u7c7b\u4f3c\u4e8e\u53cd\u5e8f\u5217\u5316\u7684\u652f\u6301 - \u57fa\u4e8eUTF8JSONREADER  - \u53ef\u4ee5\u6839\u636e\u60a8\u7684\u53cd\u9988\u63d0\u4f9b\u5c06\u6765\u63d0\u4f9b\u3002\n \u4f46\u662f\uff0c\u6e90\u751f\u6210\u5668\u8fd8\u4f1a\u53d1\u51fa\u53ef\u4ee5\u6548\u76ca\u53cd\u5e8f\u5217\u5316\u7684\u7c7b\u578b\u5143\u6570\u636e\u521d\u59cb\u5316\u903b\u8f91\u3002\u8981\u4f7f\u7528\u9884\u5148\u751f\u6210\u7684METADATA\u53cd\u5e38\u5316JSONMESSAGE\u7684\u5b9e\u4f8b\uff0c\u60a8\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n     \u53ef\u4ee5\u5728\u6d3e\u751f\u7684\uff0c\u90e8\u5206jsonserializercontext\u5b9e\u4f8b\u4e0a\u901a\u8fc7[JSonserializable]\u6e90\u4ee3\u7801\u751f\u6210\u591a\u79cd\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u3002\n \u6e90\u751f\u6210\u5668\u8fd8\u652f\u6301\u5bf9\u8c61\u4e0a\u7684\u5d4c\u5957\u5bf9\u8c61\u548c\u96c6\u5408\u6210\u5458\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u539f\u59cb\u7c7b\u578b\u3002\n  \u538b\u7f29\u5bf9\u4e8e\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u7684\u4efb\u4f55\u6570\u636e\u975e\u5e38\u91cd\u8981\u3002 WebSocket\u73b0\u5728\u542f\u7528\u538b\u7f29\u3002\u6211\u4eec\u4f7f\u7528\u4e86WebSockets\uff0cRFC 7692\u7684Permessage-Leflate\u6269\u5c55\u7684\u5b9e\u73b0\u3002\u5b83\u5141\u8bb8\u4f7f\u7528\u7f29\u5c0f\u7b97\u6cd5\u538b\u7f29WebSockets\u6d88\u606f\u6709\u6548\u8f7d\u8377\u3002\n \u6b64\u529f\u80fd\u662fGitHub\u4e0a\u7f51\u7edc\u7684\u9876\u7ea7\u7528\u6237\u8bf7\u6c42\u4e4b\u4e00\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7API\u8bc4\u8bba1\u548cAPI\u8bc4\u8bba\u63d0\u4f9bAPI\uff0c\u9075\u5faa\u6211\u4eec\u7684\u65c5\u7a0b1\u548cAPI\u8bc4\u8bba2\u3002 \n\u6211\u4eec\u610f\u8bc6\u5230\uff0c\u4f7f\u7528\u538b\u7f29\u4e0e\u52a0\u5bc6\u4e00\u8d77\u53ef\u80fd\u5bfc\u81f4\u653b\u51fb\uff0c\u5982\u72af\u7f6a\u548c\u8fdd\u89c4\u884c\u4e3a\u3002\u8fd9\u610f\u5473\u7740\u4e0d\u80fd\u5728\u5355\u4e2a\u538b\u7f29\u4e0a\u4e0b\u6587\u4e2d\u4e0e\u7528\u6237\u751f\u6210\u7684\u6570\u636e\u4e00\u8d77\u53d1\u9001\u79d8\u5bc6\uff0c\u5426\u5219\u53ef\u4ee5\u63d0\u53d6\u79d8\u5bc6\u3002\u4e3a\u4e86\u8ba9\u7528\u6237\u6ce8\u610f\u8fd9\u4e9b\u5f71\u54cd\uff0c\u5e76\u5e2e\u52a9\u4ed6\u4eec\u6743\u8861\u98ce\u9669\uff0c\u6211\u4eec\u5c06API\u66f4\u540d\u4e3a\u5371\u9669\u7684DeflateOptions\u3002\u6211\u4eec\u8fd8\u6dfb\u52a0\u4e86\u5173\u95ed\u7279\u5b9a\u6d88\u606f\u7684\u538b\u7f29\u7684\u80fd\u529b\uff0c\u56e0\u6b64\u5982\u679c\u7528\u6237\u60f3\u8981\u53d1\u9001\u79d8\u5bc6\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u6ca1\u6709\u538b\u7f29\u7684\u60c5\u51b5\u4e0b\u5b89\u5168\u5730\u6267\u884c\u6b64\u64cd\u4f5c\u3002\n IVAN\u8fd8\u6709\u4e00\u4e2a\u968f\u8bbf\uff0c\u51cf\u5c11\u4e86\u5f53\u538b\u7f29\u7981\u7528\u7ea627\uff05\u65f6Websocket\u7684\u5185\u5b58\u5360\u7528\u7a7a\u95f4\u3002\n \u4ece\u5ba2\u6237\u7aef\u542f\u7528\u538b\u7f29\u5f88\u5bb9\u6613\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u793a\u4f8b\u3002\u4f46\u662f\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u534f\u5546\u8bbe\u7f6e\uff0c\u4f8b\u5982\uff0c\u8bf7\u6c42\u8f83\u5c0f\u7684\u7a97\u53e3\uff0c\u6216\u5b8c\u5168\u62d2\u7edd\u538b\u7f29\u3002\n var cws = new clientwebsocket\uff08\uff09;\rcws.options.dangereDeflateOptions = new websocketDeflateOptions\uff08\uff09\r{\r clientmaxwindowbits = 10\uff0c\r servermaxwindowbits = 10.\r};\n \u6700\u8fd1\u8fd8\u6dfb\u52a0\u4e86\u5bf9ASP.NET\u6838\u5fc3\u7684WebSocket\u538b\u7f29\u652f\u6301\u3002\u5b83\u5c06\u5305\u542b\u5728\u5373\u5c06\u63a8\u51fa\u7684\u9884\u89c8\u4e2d\u3002\n  \u889c\u5b50\u662f\u4e00\u4e2a\u4ee3\u7406\u670d\u52a1\u5668\u5b9e\u73b0\uff0c\u53ef\u4ee5\u5904\u7406\u4efb\u4f55TCP\u6216UDP\u6d41\u91cf\uff0c\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u975e\u5e38\u901a\u7528\u7684\u7cfb\u7edf\u3002\u5b83\u662f\u4e00\u4e2a\u5df2\u6dfb\u52a0\u5230.NET 6\u7684\u957f\u671f\u793e\u533a\u8bf7\u6c42\u3002\n \u6b64\u66f4\u6539\u4e3aSocks4\uff0cSocks4a\u548cSocks5\u589e\u52a0\u4e86\u652f\u6301\u3002\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7SSH\u6d4b\u8bd5\u5916\u90e8\u8fde\u63a5\u6216\u8fde\u63a5\u5230TOR\u7f51\u7edc\u3002 \nWebProxy\u7c7b\u73b0\u5728\u63a5\u53d7Socks\u65b9\u6848\uff0c\u5c31\u50cf\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\u6240\u770b\u5230\u7684\u90a3\u6837\u3002\n var handler = new httpclienthandler\r{\r Proxy =\u65b0\u7684WebProxy\uff08\uff06\uff0334; Socks5\uff1a//127.0.0.1&#34;\uff0c9050\uff09\r};\rvar httpclient = new httpclient\uff08handler\uff09;\n   \u6211\u4eec\u4e00\u76f4\u5728\u4e3a\u4e0a\u4e00\u5bf9\u592b\u59bb.NET\u7248\u672c\u6dfb\u52a0\u5bf9OpenTeLemetry\u7684\u652f\u6301\uff0c\u4f5c\u4e3a\u6211\u4eec\u5bf9\u53ef\u89c2\u5bdf\u6027\u7684\u5173\u6ce8\u7684\u4e00\u90e8\u5206\u3002\u5728.NET 6\u4e2d\uff0c\u6211\u4eec\u6b63\u5728\u4e3aOpenTeLemetry\u6307\u6807API\u6dfb\u52a0\u652f\u6301\u3002\u901a\u8fc7\u4e3aOpenTeMetry\u6dfb\u52a0\u652f\u6301\uff0c\u60a8\u7684\u5e94\u7528\u53ef\u4ee5\u4e0e\u5176\u4ed6OpenTeLemetry\u7cfb\u7edf\u65e0\u7f1d\u4e92\u64cd\u4f5c\u3002\n system.diagnostics.metrics\u662fOpenTeleMetry\u6307\u6807API\u89c4\u8303\u7684.NET\u5b9e\u73b0\u3002\u6307\u6807API\u660e\u786e\u5730\u8bbe\u8ba1\u7528\u4e8e\u5904\u7406\u539f\u59cb\u6d4b\u91cf\uff0c\u901a\u5e38\u6709\u610f\u56fe\uff0c\u6709\u6548\u548c\u540c\u65f6\u4ea7\u751f\u8fd9\u4e9b\u6d4b\u91cf\u7684\u8fde\u7eed\u6458\u8981\u3002\n API\u5305\u62ec\u4eea\u8868\u7c7b\uff0c\u53ef\u7528\u4e8e\u521b\u5efa\u4eea\u5668\u5bf9\u8c61\uff08\u4f8b\u5982\u8ba1\u6570\u5668\uff09\u3002 API\u516c\u5f00\u4e86\u56db\u79cd\u4eea\u5668\u7c7b\uff1a\u8ba1\u6570\u5668\uff0c\u76f4\u65b9\u56fe\uff0c\u89c2\u5bdf\u5230\u548c\u89c2\u5bdf\u5956\u52b1\uff0c\u4ee5\u652f\u6301\u4e0d\u540c\u7684\u6307\u6807\u65b9\u6848\u3002\u6b64\u5916\uff0cAPI\u516c\u5f00\u4e86MeterListener\u7c7b\u4ee5\u5141\u8bb8\u76d1\u542c\u4eea\u5668\u7684\u5f55\u5236\u6d4b\u91cf\u4ee5\u83b7\u53d6\u805a\u5408\u548c\u5206\u7ec4\u76ee\u7684\u3002\n OpenTeLemetry .NET\u5b9e\u73b0\u5c06\u6269\u5c55\u4e3a\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7684API\uff0c\u5b83\u4e3a\u5ea6\u91cf\u6807\u51c6\u53ef\u89c2\u5bdf\u6027\u65b9\u6848\u6dfb\u52a0\u4e86\u652f\u6301\u3002\n  \u7c73\u8ba1=\u65b0\u4eea\u8868\uff08\uff06\uff0334; io.opentelemetry.contrib.mongodb\uff06\uff0334 ;,\uff06\uff0334; v1.0\uff06\uff0334;\uff09;\r \u8ba1\u6570\u5668\uff06lt; int\uff06gt;\u8ba1\u6570\u5668= meter.createcounter\uff06lt; int\uff06gt;\uff08\uff06\uff0334;\u8bf7\u6c42\uff06\uff0334;\uff09;\r \u9006\u62a5\u7f72\uff081\uff09;\r counter.add\uff081\uff0ckeyvaluepair.Create\uff06lt; String\uff0cObject\uff06gt;\uff08\uff06\uff0334;\u8bf7\u6c42\uff06\uff0334;\uff06\uff0334;\u9605\u8bfb\uff06\uff0334;\uff09\uff09; \nmeterlistener listener = new meterlistener\uff08\uff09;\r listener.instrumentpublished =\uff08\u4eea\u5668\uff0cmeterlistener\uff09=\uff06gt;\r {\r if\uff08internice.name ==\uff06\uff0334;\u8bf7\u6c42\uff06\uff0334;\uff06amp;\uff06amp;\uff06amp;\uff06amp;\uff06amp;\uff06amp;\uff06amp;\uff06amp; name .name ==\uff06\uff0334; io.opentelemetry.contrib.mongodb\uff06\uff0334;\uff09\r {\r meterlistener.enablemeasurementEvents\uff08\u4eea\u5668\uff0cnull\uff09;\r }\r };\r listener.setmeasurementEventCallback\uff06lt; int\uff06gt;\uff08\uff08\u4eea\u5668\uff0c\u6d4b\u91cf\uff0c\u6807\u7b7e\uff0c\u72b6\u200b\u200b\u6001\uff09=\uff06gt;\r {\r console.writeline\uff08$\uff06\uff0334; interner\uff1a{interner.name}\u5f55\u5236\u4e86\u6d4b\u91cf{measurement}\uff06\uff0334;\uff09;\r }\uff09;\r listener.start\uff08\uff09;\n  \u4ece\u5341\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u89e3\u6790\u4e86\u5206\u6790\u6765\u81ea\u5341\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u770b\u5230\u9ad8\u8fbe89\uff05\u7684\u6539\u5584\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n    \u5411\u91cf\uff06lt; t\uff06gt;\u73b0\u5728\u652f\u6301\u5728C\uff039\u4e2d\u6dfb\u52a0\u7684nint\u548cnuint\u539f\u59cb\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u6b64\u66f4\u6539\u5e94\u4f7f\u5176\u66f4\u7b80\u5355\u5730\u4f7f\u7528\u5e26\u6709\u6307\u9488\u6216\u5e73\u53f0\u4f9d\u8d56\u7684\u957f\u5ea6\u7684SIMD\u6307\u4ee4\u3002\n  .NET\u52a0\u5bc6API\u652f\u6301\u4f7f\u7528OpenSSL 3\u4f5c\u4e3aLinux\u4e0a\u7684\u9996\u9009\u672c\u673a\u52a0\u5bc6\u63d0\u4f9b\u7a0b\u5e8f\u3002 .NET 6\u5982\u679c\u53ef\u7528\uff0c\u5c06\u4f7f\u7528OpenSSL 3\u3002\u5426\u5219\uff0c\u5b83\u5c06\u4f7f\u7528OpenSSL 1.x.\n  Chacha20Poly1305\u7c7b\u5df2\u88ab\u6dfb\u52a0\u5230System.Security.cryptography\u3002\u4e3a\u4e86\u4f7f\u7528Chacha20 / Poly1305\u7b97\u6cd5\uff0c\u5fc5\u987b\u7531\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u3002\u9759\u6001\u64ad\u653e\u5c5e\u6027\u53ef\u7528\u4e8e\u786e\u5b9a\u7b97\u6cd5\u662f\u5426\u5728\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\u4e2d\u652f\u6301\u3002\n    \u8be5\u56e2\u961f\u4e00\u76f4\u5728\u6dfb\u52a0Object-C\u652f\u6301\uff0c\u5176\u76ee\u6807\u662f\u5177\u6709\u5355\u4e00\u76ee\u6807-C\u4e92\u64cd\u4f5c\u6027\u7684.NET\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0cObjective-C\u4e92\u64cd\u4f5c\u7cfb\u7edf\u662f\u5728Mono\u5d4c\u5165\u5f0fAPI\u5468\u56f4\u6784\u5efa\u7684\uff0c\u4f46\u6211\u4eec\u51b3\u5b9a\u5b83\u4e0d\u662f\u8de8\u8d8a\u8fd0\u884c\u65f6\u5206\u4eab\u7684\u6b63\u786e\u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684.NET API\uff0c\u5b83\u5c06\u542f\u7528\u4e00\u4e2aObject-C\u4e92\u64cd\u4f5c\u4f53\u9a8c\uff0c\u6700\u7ec8\u5c06\u5728\u4e24\u4e2a\u8fd0\u884c\u65f6\u5de5\u4f5c\u3002\n Objective-C Interop\u7684\u8fd9\u4e2a\u65b0API\u5728NSAuteLeasePool\u7684\u8fd0\u884c\u65f6\u7acb\u5373\u652f\u6301\uff0c\u8fd9\u4f7f\u5f97\u80fd\u591f\u652f\u6301Cocoa\u7684\u53c2\u8003\u8bb0\u5fc6\u7ba1\u7406\u7cfb\u7edf\u3002\u60a8\u73b0\u5728\u53ef\u4ee5\u914d\u7f6e\u662f\u5426\u5e0c\u671b\u6bcf\u4e2a\u6258\u7ba1\u7ebf\u7a0b\u90fd\u6709\u9690\u5f0fNSAutorEaseAsePool\u3002\u8fd9\u4f7f\u5f97\u80fd\u591f\u4ee5\u6bcf\u7ebf\u7a0b\u91ca\u653e\u53ef\u53ef\u5bf9\u8c61\u3002 \n\u81ea\u4ece.NET 6\u5f00\u59cb\uff0cMonovm\u5df2\u6dfb\u52a0\u5927\u91cf\u8bca\u65ad\u529f\u80fd\u3002\u8fd9\u4f7f\u5f97\u5b83\u5df2\u542f\u7528\u6258\u7ba1\u4e8b\u4ef6/ enceListener\uff0ceventPipe\u548c\u8bca\u65ad\u7a0b\u5e8f\u7b49\u529f\u80fd\u3002 \u5b83\u5df2\u4f7f\u7528Dotnet-Trace\uff0cDotnet-Counters\uff0cDotNet-Stack\u7b49\u5e94\u7528\u7a0b\u5e8f\u542f\u7528\uff0c\u7528\u4e8e\u5728\u79fb\u52a8\u8bbe\u5907\uff08iOS / Android\uff09\u4ee5\u53ca\u684c\u9762\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002  \u8fd9\u4e9b\u65b0\u529f\u80fd\u5f00\u8f9f\u4e86\u5206\u6790Monovm\u751f\u6210\u7684NetTrace\u6587\u4ef6\u7684\u80fd\u529b\uff0c\u5982Priveview / Speed  ...... ", "note_en": "We are thrilled to release .NET 6 Preview 5. We\u2019re now in the second-half of the .NET 6 release, and starting to see significant features coming together. A great example is .NET SDK Workloads, which is the foundation of our  .NET unification vision and enables supporting more application types. Like other features, it is coming together to provide a compelling end-to-end user experience.\n   See the  ASP.NET Core,\u00a0 EF Core, and  .NET MAUI posts for more detail on what\u2019s new for web, data access, and cross-platform UI scenarios.\n Visual Studio 2022 Preview 1 is also releasing today and .NET 6 Preview 5 is included in that release. .NET 6 has also been tested with  Visual Studio 16.11 and  Visual Studio for Mac 8.9. We recommend you use those builds if you want to try .NET 6 with  Visual Studio.\n Check out the new  conversations posts for in-depth engineer-to-engineer discussions of the latest .NET features.\n  SDK workloads is a new .NET SDK feature that enables us to add support for new application types \u2014 like  mobile and  WebAssembly \u2014 without increasing the size of the SDK.\n The workloads feature has been updated to include  list and  update verbs. These new capabilities provide a sense of the expected final experience. You\u2019ll be able to quickly establish your preferred environment with a few simple commands and to keep it up-to-date over time.\n  The  update verb queries  nuget.org for updated workload manifests, updates local manifests, downloads new versions of the installed workloads, and then removes all old versions of a workload. This is analogous to  apt update and  apt upgrade -y (used on Debian-based Linux distros).\n The  dotnet workload commands operate in the context of the given SDK. Imagine you have both .NET 6 and .NET 7 installed. If you use both, the workloads commands will provide different results since the workloads will be different (at least different versions of the same workloads).\n As you can see, the workloads feature is essentially a package manager for the .NET SDK. Workloads were first introduced in the  .NET 6 preview 4 release.\n  Package Validation tooling will enable NuGet library developers to validate that their packages are consistent and well-formed.\n  Validate that the package has the same set of publics APIs for all runtime-specific implementations.\n    In .NET 5, we shipped approximately 250 analyzers with the .NET SDK. Many of them already existed but were shipped out-of-band as NuGet packages. We\u2019re  adding more analyzers for .NET 6.\n By default most of the new analyzers are enabled at Info level. You can enable these analyzers at Warning level by  configuring the analysis mode like this:  &lt;AnalysisMode&gt;AllEnabledByDefault&lt;/AnalysisMode&gt;.\n We published the set of analyzers we wanted for .NET 6 (plus some extras) and then made most of them  up-for-grabs.\n Credit to  Newell Clark\u00a0and\u00a0 Meik Tranel\u00a0for the following implementations, included in Preview 5. Note that the community has contributed other implementations in previous previews.\n    The CA1416 Platform Compatibility analyzer already recognizes platform guards using the methods in OperatingSystem/RuntimeInformation, such as  OperatingSystem.IsWindows and  OperatingSystem.IsWindowsVersionAtLeast. However,  the analyzer does not recognize any other guard possibilities like the platform check result cached in a field or property, or complex platform check logic is defined in a helper method.\n For  allowing custom guard possibilities we  added new attributes  SupportedOSPlatformGuard and  UnsupportedOSPlatformGuard for annotating the custom guard members with the corresponding platform name and/or version. This annotation is recognized and respected by the Platform Compatibility analyzer\u2019s flow analysis logic.\n  [UnsupportedOSPlatformGuard(&#34;browser&#34;)] // The platform guard attribute\r#if TARGET_BROWSER\r internal bool IsSupported =&gt; false;\r#else\r internal bool IsSupported =&gt; true;\r#endif\r\r [UnsupportedOSPlatform(&#34;browser&#34;)]\r void ApiNotSupportedOnBrowser() { }\r\r void M1()\r {\r ApiNotSupportedOnBrowser(); // Warns: This call site is reachable on all platforms.&#39;ApiNotSupportedOnBrowser()&#39; is unsupported on: &#39;browser&#39;\r\r if (IsSupported)\r {\r ApiNotSupportedOnBrowser(); // Not warn\r }\r }\r\r [SupportedOSPlatform(&#34;Windows&#34;)]\r [SupportedOSPlatform(&#34;Linux&#34;)]\r void ApiOnlyWorkOnWindowsLinux() { }\r\r [SupportedOSPlatformGuard(&#34;Linux&#34;)]\r [SupportedOSPlatformGuard(&#34;Windows&#34;)]\r private readonly bool _isWindowOrLinux = OperatingSystem.IsLinux() || OperatingSystem.IsWindows();\r\r void M2()\r {\r ApiOnlyWorkOnWindowsLinux(); // This call site is reachable on all platforms.&#39;ApiOnlyWorkOnWindowsLinux()&#39; is only supported on: &#39;Linux&#39;, &#39;Windows&#39;.\r\r if (_isWindowOrLinux)\r {\r ApiOnlyWorkOnWindowsLinux(); // Not warn\r }\r }\r}\n  You can now  set a default font for an application with  Application.SetDefaultFont. The pattern you use is similar to setting high dpi or visual styles.\n class Program\r{\r [STAThread]\r static void Main()\r {\r Application.SetHighDpiMode(HighDpiMode.SystemAware);\r Application.EnableVisualStyles();\r Application.SetCompatibleTextRenderingDefault(false);\r\r+ Application.SetDefaultFont(new Font(new FontFamily(&#34;Microsoft Sans Serif&#34;), 8f));\r\r Application.Run(new Form1());\r }\r}\n      The  default font was updated in .NET Core 3.0. However that change introduced a significant hurdle for some users migrating .NET Framework apps to .NET Core. This new change makes it straightforward to choose the desired font for an app and removes that migration hurdle.\n  Dropping a framework from a package is a source breaking change. At the same time, continuing to build for all frameworks we ever shipped increases the complexity and size of a package. In the past, we\u2019ve solved this issue by  harvesting, which basically meant:\n During build, we download the earlier version of the package and harvest the binaries for earlier frameworks we no longer build for\n While this means that you can always update without worrying that we drop a framework it also means that you\u2019ll never get any bug fixes or new features if you consume a harvested binary. In other words, harvested assets can\u2019t be serviced which is now hidden because from your point of view you\u2019re able to keep updating the package to a later version even thought you\u2019re consuming the same old binary that we\u2019re no longer updating.\n Starting with .NET 6 Preview 5, we plan to no longer perform any form of harvesting to ensure that all assets we ship can be serviced. This means we\u2019re dropping support for any framework that is older than these:\n  If you\u2019re currently referencing an impacted package from an earlier framework, you\u2019ll no longer be able to update the referenced package to a later version. Your choice is to either retarget your project to a later framework version or not updating the referenced package (which is generally not a huge take back because you\u2019re already consuming a frozen binary anyways).\n For more details, including the full list of impacted packages, see  dotnet/announcement: Dropping older framework versions.\n  We\u2019ve been improving  Microsoft.Extensions APIs this release. In Preview 5, we\u2019ve focused on hosting and dependency injection. In Preview 4, we added a  compile-time source generator for logging.\n   We added a new ConfigureHostOptions API on IHostBuilder to make application setup simpler (e.g. configuring the shutdown timeout):\n   using HostBuilder host = new()\r .ConfigureServices(services =&gt;\r {\r services.Configure&lt;HostOptions&gt;(o =&gt;\r {\r o.ShutdownTimeout = TimeSpan.FromMinutes(10);\r });\r })\r .Build();\r\rhost.Run();\n  You might have noticed that disposal of a service provider will throw an  InvalidOperationException when it happens to register an IAsyncDisposable service.\n The new  CreateAsyncScope API provides a straightforward solution, as you can see in the following example:\n   using System;\rusing System.Threading.Tasks;\rusing Microsoft.Extensions.DependencyInjection;\r\rawait using var provider = new ServiceCollection()\r .AddScoped&lt;Foo&gt;()\r .BuildServiceProvider();\r\r// This using can throw InvalidOperationException\rusing (var scope = provider.CreateScope())\r{\r var foo = scope.ServiceProvider.GetRequiredService&lt;Foo&gt;();\r}\r\rclass Foo : IAsyncDisposable\r{\r public ValueTask DisposeAsync() =&gt; default;\r}\n     The backbone of nearly all .NET serializers is reflection. Reflection is a great capability for certain scenarios, but not as the basis of high-performance cloud-native applications (which typically (de)serialize and process a lot of JSON documents). Reflection is a problem for  startup, memory usage, and  assembly trimming.\n The alternative to runtime reflection is compile-time  source generation.  Source generators generate C# source files that can be compiled as part of the library or application build. Generating source code at compile time can provide many benefits to .NET applications, including improved performance.\n In .NET 6, we are including a new source generator as part of  System.Text.Json. The JSON source generator works in conjunction with  JsonSerializer, and can be configured in multiple ways. It\u2019s your decision whether you use the new source generator. It can provide the following benefits:\n  For example, instead of dynamically generating methods at runtime to get and set class properties during (de)serialization using  Reflection.Emit (which uses private memory and has start-up costs), a source generator can generate code that more simply and efficiently assigns or retrieves a value directly to/from properties, which is lightning fast.\n You can try out the source generator by using the latest preview version of the  System.Text.Json NuGet package. We are working on a  proposal for including source generators within the SDK.\n  By default, the JSON source generator emits serialization logic for the given serializable types. This delivers higher performance than using the existing  JsonSerializer methods by generating source code that uses  Utf8JsonWriter directly. In short, source generators offer a way of giving you a different implementation at compile-time in order to make the runtime experience better.\n Zooming out,  JsonSerializer is a powerful tool which has many features (and even more coming!) that can improve the (de)serialization of .NET types from/into the JSON format. It is fast, but can have some performance overhead when only a subset of features are needed for a serialization routine. Going forward, we will update  JsonSerializer and the new source generator together.\n  namespace Test\r{\r internal class JsonMessage\r {\r public string Message { get; set; }\r }\r}\n The source generator can be configured to generate serialization logic for instances of the example  JsonMessage type. Note that the class name  JsonContext is arbitrary. You can use whichever class name you want for the generated source.\n using System.Text.Json.Serialization;\r\rnamespace Test\r{\r [JsonSerializable(typeof(JsonMessage)]\r internal partial class JsonContext : JsonSerializerContext\r {\r }\r}\n We have defined a  set of  JsonSerializer features that are supported with the source generation mode that provides the best serialization throughput, via  JsonSerializerOptionsAttribute. These features can be specified to the source generator ahead of time, to avoid extra checks at runtime. If the attribute is not used, then default  JsonSerializationOptions are assumed at runtime.\n As part of the build, the source generator augments the  JsonContext partial class with the following shape:\n internal partial class JsonContext : JsonSerializerContext\r{\r public static JsonContext Default { get; }\r\r public JsonTypeInfo&lt;JsonMessage&gt; JsonMessage { get; }\r\r public JsonContext(JsonSerializerOptions options) { }\r\r public override JsonTypeInfo GetTypeInfo(Type type) =&gt; ...;\r}\n The serializer invocation with this mode could look like the following example. This example provides the best possible performance.\n using MemoryStream ms = new();\rusing Utf8JsonWriter writer = new(ms);\r\rJsonContext.Default.JsonMessage.Serialize(writer, new JsonMessage { &#34;Hello, world!&#34; });\rwriter.Flush();\r\r// Writer contains:\r// {&#34;Message&#34;:&#34;Hello, world!&#34;}\n Alternatively, you can continue to use  JsonSerializer, and instead pass an instance of the generated code to it, with  JsonContext.Default.JsonMessage.\n    The difference between these two overloads is that the first is using the typed metadata implementation \u2014  JsonTypeInfo&lt;T&gt; \u2014 and the second one is using a more general untyped implementation that does type tests to determine if a typed implementation exists within the context instance. It is a little slower (due to the type tests), as a result. If there is not a source-generated implementation for a given type, then the serializer throws a  NotSupportedException. It does not fallback to a reflection-based implementation (as an explicit design choice).\n The fastest and most optimized source generation mode \u2014 based on  Utf8JsonWriter \u2014 is currently only available for serialization. Similar support for deserialization \u2014 based on  Utf8JsonReader \u2014 may be provided in the future depending on your feedback.\n However, the source generator also emits type-metadata initialization logic that can benefit deserialization as well. To deserialize an instance of  JsonMessage using pre-generated type metadata, you can do the following:\n     Multiple types can be included for source generation via  [JsonSerializable] on a derived, partial  JsonSerializerContext instance, not just one.\n The source generator also supports nested object and collection members on objects, not just primitive types.\n  Compression is important for any data transmitted over a network.  WebSockets now enable compression. We used an implementation of  permessage-deflate extension for WebSockets,  RFC 7692. It allows compressing WebSockets message payloads using DEFLATE algorithm.\n This feature was one of the top user requests for Networking on GitHub. You can follow our journey to providing that API via  API review 1 and  API review 2.\n  We realized that using compression together with encryption may lead to attacks, like  CRIME and  BREACH. It means that a secret cannot be sent together with user-generated data in a single compression context, otherwise that secret could be extracted. To bring user\u2019s attention to these implications and help them weigh the risks, we renamed our API to  DangerousDeflateOptions. We also added the ability to turn off compression for specific messages, so if the user would want to send a secret, they could do that securely without compression.\n There was also a  follow-up by  Ivan that reduced the memory footprint of the WebSocket when compression is disabled by about 27%.\n Enabling the compression from the client side is easy, see the example below. However, please bear in mind that the server can negotiate the settings, e.g. request smaller window, or deny the compression completely.\n var cws = new ClientWebSocket();\rcws.Options.DangerousDeflateOptions = new WebSocketDeflateOptions()\r{\r ClientMaxWindowBits = 10,\r ServerMaxWindowBits = 10\r};\n WebSocket compression support for ASP.NET Core was also recently added. It will be included in an upcoming preview.\n  SOCKS is a proxy server implementation that can process any TCP or UDP traffic, making it a very versatile system. It is a  long-standing community request that has been  added to .NET 6.\n This change adds support for Socks4, Socks4a, and Socks5. For example, it enables testing external connections via SSH or  connecting to the Tor network.\n The  WebProxy class now accepts  socks schemes, as you can see in the following example.\n var handler = new HttpClientHandler\r{\r Proxy = new WebProxy(&#34;socks5://127.0.0.1&#34;, 9050)\r};\rvar httpClient = new HttpClient(handler);\n   We\u2019ve been  adding support for OpenTelemetry for the last couple .NET versions, as part of our focus on  observability. In .NET 6, we\u2019re adding  support for the  OpenTelemetry Metrics API. By adding support for OpenTelemetry, your apps can seamlessly interoperate with other  OpenTelemetry systems.\n System.Diagnostics.Metrics is the .NET implementation of the  OpenTelemetry Metrics API specification. The Metrics APIs are designed explicitly for processing raw measurements, generally with the intent to produce continuous summaries of those measurements, efficiently and simultaneously.\n The APIs include the  Meter class which can be used to create instrument objects (e.g. Counter). The APIs expose four instrument classes:  Counter,  Histogram,  ObservableCounter, and  ObservableGauge to support different metrics scenarios. Also, the APIs expose the  MeterListener class to allow listening to the instrument\u2019s recorded measurement for aggregation and grouping purposes.\n The  OpenTelemetry .NET implementation will be extended to use these new APIs, which add support for Metrics observability scenarios.\n  Meter meter = new Meter(&#34;io.opentelemetry.contrib.mongodb&#34;, &#34;v1.0&#34;);\r Counter&lt;int&gt; counter = meter.CreateCounter&lt;int&gt;(&#34;Requests&#34;);\r counter.Add(1);\r counter.Add(1, KeyValuePair.Create&lt;string, object&gt;(&#34;request&#34;, &#34;read&#34;));\n  MeterListener listener = new MeterListener();\r listener.InstrumentPublished = (instrument, meterListener) =&gt;\r {\r if (instrument.Name == &#34;Requests&#34; &amp;&amp; instrument.Meter.Name == &#34;io.opentelemetry.contrib.mongodb&#34;)\r {\r meterListener.EnableMeasurementEvents(instrument, null);\r }\r };\r listener.SetMeasurementEventCallback&lt;int&gt;((instrument, measurement, tags, state) =&gt;\r {\r Console.WriteLine($&#34;Instrument: {instrument.Name} has recorded the measurement {measurement}&#34;);\r });\r listener.Start();\n  Parsing of BigIntegers from both decimal and hexadecimal strings has been improved. We see  improvements of up to 89%, as demonstrated in the following chart.\n    Vector&lt;T&gt;  now supports the  nint and  nuint primitive types, added in C# 9. For example, this change should make it simpler to use SIMD instructions with pointers or platform-dependent lengths.\n  .NET cryptography APIs support using  OpenSSL 3 as the preferred native cryptography provider on Linux. .NET 6 will use OpenSSL 3 if it is available. Otherwise, it will use OpenSSL 1.x.\n  The  ChaCha20Poly1305 class has been added to  System.Security.Cryptography. In order to use the ChaCha20/Poly1305 algorithm, it must be supported by the underlying operating system. The static  IsSupported property can be used to determine if the algorithm is supported in a given context.\n    The team has been  adding Objective-C support, with the goal of having a single  Objective-C interop implementation for .NET. Up until now, the  Objective-C interop system was built around the Mono embedding API but we decided it wasn\u2019t the right approach to share across runtimes. As a result we\u2019ve create a new .NET API that will enable a single Objective-C interop experience that will eventually work on both runtimes.\n This new API for Objective-C interop has brought immediate support in both runtimes for   NSAutoreleasePool, which  enables support for Cocoa\u2019s reference-counted memory management system. You can now  configure whether you want each managed thread to have an implicit  NSAutoreleasePool. This enables the release of Cocoa objects on a per-thread basis.\n  A lot of  diagnostics features have been added into MonoVM since beginning of .NET 6. This has enabled features like managed EventSource/EventListener, EventPipe and DiagnosticsServer. It has enabled using diagnostics tools like  dotnet-trace,  dotnet-counters,  dotnet-stacks for apps running on mobile devices (iOS/Android) as well as desktop.\n These new features opens up ability to analyse nettrace files generated by MonoVM in tools like PrefView/Speed\n......", "posttime": "2021-06-18 22:34:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "net", "title": ".NET 6\u9884\u89c85 ", "title_en": ".NET 6 Preview 5", "transed": 1, "url": "https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-5/", "via": "", "real_tags": ["net"]}, {"category": "", "categoryclass": "", "imagename": "9fa6147035fef74ed249a5b689f2bbbd.jpg", "infoid": 1066709, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Pornhub\u6628\u5929\u88ab34\u540d\u5987\u5973\u8d77\u8bc9\uff0c\u6307\u793a\u8be5\u7f51\u7ad9\u6258\u7ba1\u89c6\u9891\uff0c\u672a\u7ecf\u4ed6\u4eec\u7684\u540c\u610f\uff0c\u5e76\u4ece\u5176\u4ed6\u975e\u81f4\u5bc6\u5185\u5bb9\u4e2d\u83b7\u5229\uff0c\u6d89\u53ca\u5f3a\u5978\uff0c\u513f\u7ae5\u6027\u8650\u5f85\u548c\u4eba\u53e3\u8d29\u8fd0\u3002\n \u53c2\u4e0e\u8bc9\u8bbc\u7684\u53d7\u5bb3\u8005\uff0c14\u8868\u793a\uff0c\u4ed6\u4eec\u662f\u88ab\u6307\u63a7\u6216\u88ab\u5224\u72af\u6709\u6027\u884c\u4e3a\u72af\u7f6a\u7684\u4eba\u7684\u53d7\u5bb3\u8005\uff0c14\u4eba\u8868\u793a\uff0c\u4ed6\u4eec\u5728Pornhub\u4e0a\u7684\u89c6\u9891\u4e2d\u662f\u672a\u6210\u5e74\u7684\u3002\n \u201c\u8fd9\u662f\u4e3a\u4ed6\u4eec\u72af\u4e0b\u8fdd\u6cd5\u884c\u4e3a\u548c\u975e\u6cd5\u5185\u5bb9\u7684\u516c\u53f8\u548c\u4e2a\u4eba\u5bf9\u5176\u72af\u7f6a\u627f\u62c5\u8d23\u4efb\u7684\u65f6\u5019\uff0c\u201d\u5176\u4e2d\u4e00\u9879\u539f\u544a\u5728CNN\u62a5\u544a\u7684\u4f1a\u8bae\u4e0a\u8868\u793a\u3002 \u201c\u6211\u52a0\u5165\u4e86\u8fd9\u4e2a\u8bc9\u8bbc\uff0c\u56e0\u4e3a\u6211\u4e3a\u81ea\u5df1\u548c\u65e0\u6570\u7684\u53d7\u5bb3\u8005\u5bfb\u6c42\u6b63\u4e49\uff0c\u800c\u4e0d\u662f\uff06\uff0339; t\u51fa\u5934\u7684\u65e0\u6570\u53d7\u5bb3\u8005\u3002\u201d\n Pornhub\u7684\u6bcd\u516c\u53f8\uff0c\u62e5\u6709\u6216\u7ecf\u8425\u8d85\u8fc7150\u4e2a\u8272\u60c5\u7f51\u7ad9\u7684Mindgeek\uff0c\u88ab\u5305\u542b\u5728\u8bc9\u8bbc\u4e2d\u3002 Pornhub\uff0c\u8fd9\u662f\u4e92\u8054\u7f51\u4e0a\u6700\u5927\u7684\u8272\u60c5\u7f51\u7ad9\u4e4b\u4e00\uff0c\u53bb\u5e7412\u6708\u5728\u7ebd\u7ea6\u65f6\u62a5\u4e13\u680f\u4f5c\u5bb6\u5c3c\u53e4\u62c9\u65af\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u00b7\u514b\u91cc\u65af\u7279\u548c\u5987\u5973\u5728\u5851\u6599\u888b\u4e2d\u7a92\u606f\u7684\u955c\u5934\u3002\u201c\n  \u5f53\u65f6\uff0c\u8be5\u7f51\u7ad9\u6bcf\u5e74\u6536\u5230680\u4e07\u4e2a\u65b0\u89c6\u9891\uff0c\u4f7f\u5176\u6210\u4e3a\u7f51\u7edc\u4e0a\u6700\u5927\u7684\u89c6\u9891\u5e73\u53f0\u4e4b\u4e00\u3002\u5728Kristof\u7684\u6587\u7ae0\u4e4b\u540e\uff0cMasterCard\u548cVisa\u8c03\u67e5\u4e86\u8be5\u7f51\u7ad9\u3002\u8be5\u516c\u544a\u53d1\u9001\u4e86Pornhub\u6270\u4e71\uff0c\u800c\u5728\u4e24\u5929\u5185\uff0c\u8be5\u7f51\u7ad9\u901a\u8fc7\u672a\u8ba4\u5b9a\u7684\u7528\u6237\u963b\u6b62\u4e0a\u4f20\uff0c\u5e76\u5220\u9664\u4e86\u4e0b\u8f7d\u9a8c\u8bc1\u6a21\u578b\u7a0b\u5e8f\u4e2d\u7684\u6709\u507f\u4e0b\u8f7d\u9664\u4e86\u4e0a\u4f20\u89c6\u9891\uff08\u201c\u9664\u4e86\u9a8c\u8bc1\u7684\u6a21\u578b\u7a0b\u5e8f\u4e4b\u5916\uff0c\u201d\u8be5\u7f51\u7ad9\u5f53\u65f6\u8868\u793a\uff09\u3002\u4f46\u662f\uff0c\u66f4\u6539\u4e0d\u591f\uff0c\u800c\u4e14\u4e07\u4e8b\u8fbe\u5361\u548c\u7b7e\u8bc1\u90fd\u7981\u6b62\u4e86\u4ed6\u4eec\u7684\u652f\u4ed8\u7f51\u7edc\u3002\u51e0\u5929\u540e\uff0cPornhub\u6e05\u9664\u4e86\u6570\u767e\u4e07\u7528\u6237\u4e0a\u4f20\u7684\u89c6\u9891\uff0c\u4ee3\u8868\u4e86\u7f51\u7ad9\u5185\u5bb9\u7684\u4e09\u5206\u4e4b\u4e8c\u3002\n  2\u6708\u4efd\uff0cPornhub\u5ba3\u5e03\u5b83\u901a\u8fc7\u4f9d\u9760\u8f6f\u4ef6\u548c\u201c\u4e00\u652f\u5e7f\u6cdb\u7684\u4eba\u7c7b\u4e3b\u6301\u4eba\u56e2\u961f\u201d\u6765\u5ba1\u67e5\u6bcf\u6b21\u4e0a\u4f20\u65f6\uff0c\u5b83\u5df2\u7ecf\u6269\u5927\u4e86\u52aa\u529b\u3002\u5b83\u8fd8\u4eceFacebook\u62cd\u6444\u4e86\u4e00\u4e2a\u9875\u9762\uff0c\u8ba9\u975e\u8425\u5229\u7ec4\u7ec7\u505a\u4e86\u4e00\u4e9b\u5347\u964d\u673a\uff0c\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u201c\u53ef\u4fe1\u7684\u65d7\u8bb0\u7a0b\u5e8f\u201d\uff0c\u5b83\u5c06\u7981\u7528\u89c6\u9891\u8fd9\u4e9b\u7fa4\u4f53\u8ba4\u4e3a\u662f\u975e\u6cd5\u5185\u5bb9\u7684\u7fa4\u4f53\u3002\u6700\u540e\uff0c\u4ed6\u4eec\u5f00\u59cb\u4e0e\u7b2c\u4e09\u65b9\u5408\u4f5c\uff0cyoti\uff0c\u9a8c\u8bc1\u5176\u7528\u6237\u7684\u8eab\u4efd\u3002\u5c3d\u7ba1\u6709\u8fd9\u4e9b\u63aa\u65bd\uff0cPornhub\u4e0d\u9075\u5faa\u66f4\u4f20\u7edf\u7684\u8272\u60c5\u4ea7\u4e1a\u4e2d\u7684\u5176\u4ed6\u6807\u51c6\u3002\u4f8b\u5982\uff0c\u5b83\u6ca1\u6709\u9a8c\u8bc1\u7f51\u7ad9\u4e0a\u6258\u7ba1\u7684\u89c6\u9891\u4e2d\u7684\u6bcf\u4e2a\u4eba\u7684\u5e74\u9f84\uff0c\u4e5f\u6ca1\u6709\u786e\u8ba4\u4ed6\u4eec\u540c\u610f\u88ab\u62cd\u6444\u6216\u4e0a\u4f20\u7684\u89c6\u9891\u3002\n    \u8bc9\u8bbc\u7531Brown Rudnick LLP\u63d0\u4ea4\uff0c\u5e76\u901a\u8fc7\u540d\u4e3aComptickingHub\u7684\u7f51\u7ad9\u53d1\u73b0\u4e86\u51e0\u4e2a\u7b7e\u7f72\u7684\u6d89\u5acc\u53d7\u5bb3\u8005\uff0c\u8be5\u7f51\u7ad9\u65e8\u5728\u5173\u95edPornhub\u3002\u8be5\u7f51\u7ad9\u7531\u79f0\u4e3aExodus Cry Cry\u7684\u5b97\u6559\u7ec4\u7ec7\u7ecf\u8425\uff0cCBS\u65b0\u95fb\u6ce8\u660e\u672c\u96c6\u56e2\u201c\u4e00\u76f4\u6279\u8bc4\u5176\u52aa\u529b\u5c06\u6027\u4ea7\u4e1a\u548c\u5e9f\u5f03\u8272\u60c5\u5236\u54c1\u5f52\u548e\u4e8e\u72af\u7f6a\u3002\u201d \n\u7136\u800c\uff0c\u4ee3\u8868\u8bc9\u8bbc\u5987\u5973\u7684\u5f8b\u5e08\u8fc8\u514b\u5c14\u9c8d\u666e\u544a\u8bc9CBS\uff0c\u4ed6\u6ca1\u6709\u5bfb\u6c42Outhaw\u5728\u7ebf\u8272\u60c5\u7247\uff0c\u800c\u662f\u7b26\u5408\u4f20\u7edf\u7684\u8272\u60c5\u89c4\u5219\u548c\u6cd5\u89c4\u3002 \u201c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u662f\u8272\u60c5\uff0c\u8fd9\u662f\u5173\u4e8e\u5f3a\u5978\u3002\u8fd9\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u884c\u4e1a\uff0c\u540c\u610f\u4eba\u4eec\u6bcf\u4e00\u4e2a\u53c2\u4e0e\u7684\u6743\u5229\u3002\u5b83\u53ea\u9700\u8981\u5408\u6cd5\u800c\u4e0d\u662f\u975e\u6cd5\u5185\u5bb9\u3002\u201c\u4ed6\u544a\u8bc9CBS\u3002\n \u6628\u5929\u7684\u8bc9\u8bbc\u4e0d\u662fPornhub\u7b2c\u4e00\u6b21\u88ab\u8d77\u8bc9\u6258\u7ba1\u6d89\u5acc\u4ee5\u6027\u884c\u4e3a\u8d29\u8fd0\u7684\u89c6\u9891\u3002\u572812\u6708\uff0c\u4e07\u4e8b\u8fbe\u5361\u548c\u7b7e\u8bc1\u540e\u4e0d\u4e45\u5f00\u59cb\u8c03\u67e5\uff0c40\u540d\u5987\u5973\u63d0\u51fa\u4e86\u4e00\u4efd\u8bc9\u8bbc\uff0c\u79f0\u4ed6\u4eec\u662fWimentdoporn\u7684\u53d7\u5bb3\u8005\uff0c\u8be5\u516c\u53f8\u662f\u4e00\u4e2a\u516c\u53f8\u7684\u5236\u7247\u4eba\u8bf1\u5bfc\u53d7\u5bb3\u8005\u201c\u5047\u5192\u5efa\u6a21\u5e7f\u544a\uff0c\u865a\u5047\u627f\u8bfa\u548c\u6b3a\u9a97\u6027\u7684\u524d\u53f0\u516c\u53f8\uff0c\u6700\u7ec8\u65e8\u5728\u5a01\u80c1\u8981\u5a01\u80c1\u8fd9\u4e9b\u5a01\u80c1\u5987\u5973\u5728\u505a\u7231\u89c6\u9891\u4e2d\uff0c\u201c\u4f5c\u8005\u53f8\u6cd5\u90e8Randy Grossman\u5728\u6700\u8fd1\u7684\u4e00\u4f4d\u88ab\u5224\u72af\u7f6a\u7684\u5236\u4f5c\u4eba\u548c\u884c\u52a8\u8005\u88ab\u5224\u72af\u6709\u4e0e\u4ed6\u7684\u5de5\u4f5c\u4e2d\u88ab\u5224\u72af\u7f6a\u7684\u5236\u4f5c\u4eba\u548c\u6f14\u5458\u4e4b\u4e00\u540e\u8868\u793a\u3002\u57282\u6708\u8bc9\u8bbc\u4e2d\uff0c\u539f\u544a\u58f0\u79f0\u201cMindGeek\u8ba4\u8bc6\u7684\u5973\u5b69\u901a\u8fc7\u4f7f\u7528\u6b3a\u8bc8\uff0c\u80c1\u8feb\u548c\u6050\u5413\u8d29\u8fd0\u5176\u53d7\u5bb3\u8005\u4f5c\u4e3a\u5176\u4e60\u60ef\u6027\u5546\u4e1a\u60ef\u4f8b\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u4f7f\u5987\u5973\u62cd\u6444\u89c6\u9891\u3002\u201d\n Canada\u7684\u9690\u79c1\u4e13\u5458\u4e5f\u6b63\u5728\u8c03\u67e5MindGeek\u3002\u8be2\u95ee\u662f\u5173\u4e8e\u5987\u5973\u63d0\u51fa\u7684\u6295\u8bc9\u6307\u793aPornhub\u9a73\u56de\u4e86\u4ed6\u4eec\u672a\u7ecf\u540c\u610f\u4e0a\u4f20\u89c6\u9891\u7684\u8981\u6c42\u3002 ", "note_en": "Pornhub was sued yesterday by 34 women alleging that the site hosted videos without their consent and profited from other nonconsensual content involving rape, child sexual abuse, and human trafficking.\n Of the victims involved in the lawsuit, 14 said they were victims of people charged with or convicted of sex crimes, and 14 said they were underage in the videos served on Pornhub.\n \u201cIt is time for the companies and individuals who have profited off of nonconsensual and illegal content be held liable for their crime,\u201d one of the plaintiffs said in a conference call reported by  CNN. \u201cI joined the lawsuit because I seek justice for myself and the countless victims who don&#39;t come forward.\u201d\n Pornhub\u2019s parent company, MindGeek, which owns or runs over 150 pornographic websites, was included in the lawsuit. Pornhub, which is among the largest pornography websites on the internet, drew scrutiny last December when New York Times columnist Nicholas Kristof published a feature alleging that it \u201cmonetizes child rapes, revenge pornography, spy cam videos of women showering, racist and misogynist content, and footage of women being asphyxiated in plastic bags.\u201d\n  At the time, the site reportedly received 6.8 million new videos per year, making it one of the largest video platforms on the web. In the wake of Kristof\u2019s article, MasterCard and Visa  investigated the site. The announcement sent Pornhub scrambling, and within two days, the site  blocked uploads by unidentified users and removed the ability to download videos (except for \u201cpaid downloads within the verified Model Program,\u201d the site said at the time). The changes weren\u2019t enough, though, and MasterCard and Visa both  banned it from their payment networks. Several days later, Pornhub  purged millions of user-uploaded videos, representing around two-thirds of the site\u2019s content.\n  In February, Pornhub announced that it had expanded moderation by relying on both software and \u201can extensive team of human moderators\u201d who review every upload. It also took a page from Facebook and let nonprofit groups do some of the lifting, giving them a \u201ctrusted flagger program\u201d that would disable videos those groups thought contained illegal content. Lastly, they began working with a third party, Yoti, to  verify the identities of its users. Despite those measures, Pornhub does not follow other standards that are followed in the more traditional pornography industry. It does not, for example, verify the ages of everyone in videos hosted on the site, nor does it confirm that they consented to the videos being taken or uploaded.\n    The lawsuit was filed by Brown Rudnick LLP, and several of the alleged victims who signed on were found through a site called Traffickinghub, which seeks to shut down Pornhub. The site is run by a religious organization known as Exodus Cry, and  CBS News notes the group \u201chas been criticized for its efforts to criminalize parts the sex industry and abolish pornography altogether.\u201d\n Yet Michael Bowe, the lawyer representing the women in the lawsuit, told CBS that he was not seeking to outlaw online porn but bring it in line with traditional pornography rules and regulations. \u201cThis case is not about porn, it\u2019s about rape. This is a legitimate industry that consenting people have every right to participate in. It just needs to be done legally and not with illegal content.\u201d he told CBS.\n Yesterday\u2019s lawsuit wasn\u2019t the first time Pornhub has been sued for hosting videos that allegedly featured sex trafficking. In December, shortly after MasterCard and Visa began their investigations, 40 women  filed a lawsuit saying they were victims of GirlsDoPorn, a company whose producers lured victims with \u201cfake modeling ads, false promises and deceptive front companies, ultimately devolving to threats to coerce these women into making sex videos,\u201d Acting US Attorney Randy Grossman  said after a recent sentencing hearing for one of the producers and actors who was convicted of crimes associated with his work for the site. In the February lawsuit, the plaintiffs alleged that \u201cMindGeek knew GirlsDoPorn was trafficking its victims by using fraud, coercion, and intimidation as part of its customary business practices to get the women to film the videos.\u201d\n MindGeek is also  under investigation by Canada\u2019s privacy commissioner. The inquiry came about after women filed complaints stating that Pornhub dismissed their requests to take down videos uploaded without their consent.", "posttime": "2021-06-18 21:59:22", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u636e\u79f0,sued,pornhub", "title": "Pornhub\u636e\u79f0\u636e\u79f0\u4e3a\u201c\u4e0d\u534f\u8c03\uff0c\u4e0d\u540c\u610f\u201d\u89c6\u9891\u8d77\u8bc9 ", "title_en": "Pornhub sued for allegedly serving \u201cunder-age, non-consensual\u201d videos", "transed": 1, "url": "https://arstechnica.com/tech-policy/2021/06/pornhub-hosted-rape-revenge-porn-and-child-sex-abuse-videos-lawsuit-alleges/", "via": "", "real_tags": ["\u636e\u79f0", "sued", "pornhub"]}, {"category": "", "categoryclass": "", "imagename": "eabb7d86bbddb21639a3b41a71cc6512.jpg", "infoid": 1066708, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6765\u81ea\u6c83\u5c14\u7279\u82a6\u82c7\u9646\u519b\u7814\u7a76\u6240\u548c\u6d77\u519b\u533b\u5b66\u7814\u7a76\u4e2d\u5fc3\u7684\u79d1\u5b66\u5bb6\u4e0e\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u548cAcuitas\u6cbb\u7597\u5b66\u7684\u7814\u7a76\u4eba\u5458\u5408\u4f5c\uff0c\u57fa\u4e8emRNA\u6280\u672f\u5f00\u53d1\u4e00\u79cd\u65b0\u578b\u75ab\u82d7\uff0c\u8fd9\u4e9b\u6280\u672f\u53ef\u4fdd\u62a4\u52a8\u7269\u6a21\u578b\u4e2d\u7684\u759f\u75be\uff0c\u5728NPJ\u75ab\u82d7\u4e2d\u53d1\u8868\u5b83\u4eec\u7684\u7814\u7a76\u7ed3\u679c\u3002 2019\u5e74\uff0c\u5168\u7403\u4f30\u8ba1\u67092.29\u4ebf\u4f8b\u759f\u75be\u548c409,000\u4eba\u6b7b\u4ea1\uff0c\u5728\u4eba\u7c7b\u53d1\u75c5\u7387\uff0c\u6b7b\u4ea1\u7387\uff0c\u7ecf\u6d4e\u8d1f\u62c5\u548c\u533a\u57df\u793e\u4f1a\u7a33\u5b9a\u65b9\u9762\u521b\u9020\u4e86\u975e\u51e1\u7684\u6210\u672c\u3002\u5168\u4e16\u754c\uff0c\u759f\u539f\u866b\u662f\u5bc4\u751f\u866b\u7269\u79cd\uff0c\u5bfc\u81f4\u7edd\u5927\u591a\u6570\u6b7b\u4ea1\u3002\u4e25\u91cd\u75be\u75c5\u98ce\u9669\u6700\u9ad8\u7684\u4eba\u5305\u62ec\u5b55\u5987\uff0c\u513f\u7ae5\u548c\u759f\u75be\u5929\u771f\u7684\u65c5\u884c\u8005\u3002\u759f\u75be\u5bf9\u7b56\u5386\u53f2\u4e0a\u4e00\u76f4\u662f\u56fd\u9632\u90e8\u7684\u4f18\u5148\u7814\u7a76\u9886\u57df\uff0c\u56e0\u4e3a\u8fd9\u79cd\u75be\u75c5\u4ecd\u7136\u662f\u5bf9\u7f8e\u56fd\u4e13\u4e1a\u533a\u57df\u7684\u6700\u5927\u5a01\u80c1\u3002\n  \u4e00\u4e2a\u5b89\u5168\uff0c\u6709\u6548\u7684\u759f\u75be\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u662f\u79d1\u5b66\u5bb6\u7684\u96be\u4ee5\u6349\u6478\u7684\u76ee\u6807\u3002\u6700\u5148\u8fdb\u7684\u759f\u75be\u75ab\u82d7\u662fRTS\uff0cS\uff0c\u662f\u4e0eWriair\u5408\u4f5c\u5f00\u53d1\u7684\u7b2c\u4e00\u4ee3\u4ea7\u54c1\u3002 RTS\uff0cS\u662f\u57fa\u4e8eP. falciparum\u7684\u666e\u901a\u5b62\u5b50\u86cb\u767d\uff0c\u662f\u6700\u5371\u9669\u548c\u5e7f\u6cdb\u7684\u759f\u75be\u5bc4\u751f\u866b\u3002\u867d\u7136RTS\uff0cS\u662f\u5bf9\u6297\u759f\u75be\u7684\u5f71\u54cd\uff0c\u4f46\u7530\u95f4\u7814\u7a76\u63ed\u793a\u4e86\u6709\u9650\u7684\u65e0\u83cc\u7597\u6548\u548c\u4fdd\u62a4\u6301\u7eed\u65f6\u95f4\u3002\u4e0eRTS\uff0cS\u548c\u5176\u4ed6\u7b2c\u4e00\u4ee3\u759f\u75be\u75ab\u82d7\u76f8\u5173\u7684\u5c40\u9650\u6027\u5bfc\u81f4\u79d1\u5b66\u5bb6\u8bc4\u4f30\u4e86\u759f\u75be\u75ab\u82d7\u7684\u65b0\u5e73\u53f0\u548c\u7b2c\u4e8c\u4ee3\u65b9\u6cd5\u3002\n  \uff06\uff0334;\u6700\u8fd1\u60a3\u6709Covid-19\u7684\u75ab\u82d7\u7684\u6210\u529f\u7a81\u51fa\u4e86\u57fa\u4e8eMRNA\u7684\u5e73\u53f0\u7684\u4f18\u52bf - \u7279\u522b\u662f\u9ad8\u5ea6\u9488\u5bf9\u6027\u7684\u8bbe\u8ba1\uff0c\u7075\u6d3b\uff0c\u5feb\u901f\u7684\u5236\u9020\u548c\u80fd\u529b\u4ee5\u5c1a\u672a\u63a2\u7d22\u7684\u65b9\u5f0f\u4fc3\u8fdb\u5f3a\u70c8\u7684\u514d\u75ab\u53cd\u5e94; Wrair\uff06\uff0339;\u759f\u75be\u751f\u7269\u5236\u5242\u5206\u516c\u53f8\u548c\u7eb8\u4e0a\u7684\u9ad8\u7ea7\u4f5c\u8005\uff0c\u57c3\u5f17\u91cc\u7eb3\u00b7\u74e6\u8bfa\u6c83\u535a\u58eb\uff06\uff0334;\u6211\u4eec\u7684\u76ee\u6807\u662f\u5c06\u8fd9\u4e9b\u8fdb\u6b65\u8f6c\u5316\u4e3a\u5bf9\u759f\u75be\u7684\u5b89\u5168\uff0c\u6709\u6548\u7684\u75ab\u82d7\u3002\uff06\uff0334;\n  \u4e0eRTS\uff0cS\u4e00\u6837\uff0c\u75ab\u82d7\u4f9d\u8d56\u4e8eP. falciparum\uff06\uff0339; S\u73af\u5b62\u5b50\u86cb\u767d\u5f15\u53d1\u514d\u75ab\u5e94\u7b54\u3002\u7136\u800c\uff0c\u8be5\u65b9\u6cd5\u4e0d\u5fc5\u76f4\u63a5\u65bd\u7528\u86cb\u767d\u8d28\u7684\u5f62\u5f0f\uff0c\u800c\u662f\u4f7f\u7528MRNA  - \u4f34\u6709\u8102\u8d28\u7eb3\u7c73\u9897\u7c92\uff0c\u8be5\u8102\u8d28\u7eb3\u7c73\u9897\u7c92\u514d\u53d7\u8fc7\u65e9\u964d\u89e3\uff0c\u6709\u52a9\u4e8e\u523a\u6fc0\u514d\u75ab\u7cfb\u7edf - \u4ee5\u4fc3\u4f7f\u7ec6\u80de\u4e3a\u5faa\u73af\u5b62\u5b50\u86cb\u767d\u86cb\u767d\u8d28\u7684\u7f16\u7801\u3002\u90a3\u4e9b\u86cb\u767d\u8d28\u7136\u540e\u5f15\u53d1\u9488\u5bf9\u759f\u75be\u7684\u4fdd\u62a4\u53cd\u5e94\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0d\u80fd\u5f15\u8d77\u611f\u67d3\u3002\n  \uff06\uff0334;\u6211\u4eec\u7684\u75ab\u82d7\u5b9e\u73b0\u4e86\u5bf9\u5c0f\u9f20\u759f\u75be\u611f\u67d3\u7684\u9ad8\u6c34\u5e73\u4fdd\u62a4\uff0c\uff06\uff0334;\u5728\u7eb8\u4e0a\u7684\u4e00\u540d\u8155\u5b50\u7814\u7a76\u5458\u51ef\u745f\u7433Mallory\u8bf4\uff0c\u5e76\u5728\u8bba\u6587\u4e0a\u7684\u63d0\u4ea4\u548c\u9886\u5bfc\u4f5c\u8005\u3002 \uff06\uff0334;\u867d\u7136\u66f4\u591a\u7684\u5de5\u4f5c\u4ecd\u7136\u5728\u4e34\u5e8a\u6d4b\u8bd5\u524d\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u8fd9\u4e9b\u7ed3\u679c\u662f\u4e00\u4e2a\u4ee4\u4eba\u9f13\u821e\u7684\u8ff9\u8c61\uff0c\u5373\u6709\u6548\u7684mRNA\u7684\u75ab\u82d7\u662f\u53ef\u5b9e\u73b0\u7684\u3002\uff06\uff0334;\u5f15\u7528\uff1amRNA\u75ab\u82d7\u57286\u670820\u65e5\u4eceHTTPS://medicalXpress.com/news/2021-06-mrna -vaccine-yields- forl-malaria.html\u4e2d\u68c0\u7d22\u759f\u75be\uff082021\u5e74\uff0c6\u670818\u65e5\uff09\u5bf9\u759f\u75be\u7684\u759f\u75be\uff082021\u5e746\u670818\u65e5\uff09\u5b8c\u5168\u4fdd\u62a4\n  \u672c\u6587\u4ef6\u53d7\u7248\u6743\u4fdd\u62a4\u3002\u9664\u4e86\u79c1\u4eba\u5b66\u4e60\u6216\u7814\u7a76\u76ee\u7684\u7684\u4efb\u4f55\u516c\u5e73\u4ea4\u6613\u5916\uff0c\u6ca1\u6709\u4e66\u9762\u8bb8\u53ef\uff0c\u6ca1\u6709\u4efb\u4f55\u90e8\u5206\u3002\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002 ", "note_en": "Scientists from the Walter Reed Army Institute of Research and Naval Medical Research Center partnered with researchers at the University of Pennsylvania and Acuitas Therapeutics to develop a novel vaccine based on mRNA technology that protects against malaria in animal models, publishing their findings in  npj Vaccines.    In 2019, there were an estimated 229 million cases of malaria and 409,000 deaths globally, creating an extraordinary cost in terms of human morbidity, mortality, economic burden, and regional social stability. Worldwide, Plasmodium falciparum is the parasite species which causes the vast majority of deaths. Those at highest risk of severe disease include pregnant women, children and malaria na\u00efve travelers. Malaria countermeasures development has historically been a priority research area for the Department of Defense as the disease remains a top threat to U.S.   deployed to endemic regions.\n  A safe, effective malaria   has long been an elusive target for scientists. The most advanced malaria vaccine is RTS,S, a first-generation product developed in partnership with WRAIR. RTS,S is based on the circumsporozoite protein of P. falciparum, the most dangerous and widespread species of malaria parasite. While RTS,S is an impactful countermeasure in the fight against malaria, field studies have revealed limited sterile efficacy and duration of protection. The limitations associated with RTS,S and other first-generation malaria vaccines have led scientists to evaluate new platforms and second-generation approaches for malaria vaccines.\n  &#34;Recent successes with vaccines against COVID-19 highlight the advantages of mRNA-based platforms\u2014notably highly targeted design, flexible and rapid manufacturing and ability to promote strong immune responses in a manner not yet explored,&#34; said Dr. Evelina Angov, a researcher at WRAIR&#39;s Malaria Biologics Branch and senior author on the paper. &#34;Our goal is to translate those advances to a safe, effective vaccine against malaria.&#34;\n  Like RTS,S, the vaccine relies on P. falciparum&#39;s circumsporozoite protein to elicit an immune response. However, rather than administering a version of the protein directly, this approach uses mRNA\u2014accompanied by a lipid nanoparticle which protects from premature degradation and helps stimulate the immune system\u2014 to prompt cells to code for circumsporozoite protein themselves. Those proteins then trigger a protective response against malaria but cannot actually cause infection.\n  &#34;Our vaccine achieved high levels of protection against malaria infection in mice,&#34; said Katherine Mallory, a WRAIR researcher at the time of the article&#39;s submission and lead author on the paper. &#34;While more work remains before clinical testing, these results are an encouraging sign that an effective, mRNA-based   vaccine is achievable.&#34;             Citation: mRNA vaccine yields full protection against malaria in mice (2021, June 18) retrieved 18 June 2021 from https://medicalxpress.com/news/2021-06-mrna-vaccine-yields-full-malaria.html\n  This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no part may be reproduced without the written permission. The content is provided for information purposes only.", "posttime": "2021-06-18 21:59:00", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u759f\u75be,\u75ab\u82d7,vaccine", "title": "mRNA\u75ab\u82d7\u4ea7\u751f\u5bf9\u5c0f\u9f20\u759f\u75be\u7684\u5b8c\u5168\u4fdd\u62a4 ", "title_en": "mRNA vaccine yields full protection against malaria in mice", "transed": 1, "url": "https://medicalxpress.com/news/2021-06-mrna-vaccine-yields-full-malaria.html", "via": "", "real_tags": ["\u759f\u75be", "\u75ab\u82d7", "vaccine"]}, {"category": "", "categoryclass": "", "imagename": "bb612aedcb5a2e85ff6b4b9eda0a2f53.jpg", "infoid": 1066706, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e03\u9c81\u585e\u5c14\uff0c6\u670818\u65e5\uff08\u8def\u900f\u793e\uff09 - \u5b57\u6bcd\u8868\uff08GOOGL.O\uff09\u5355\u4f4d\u8c37\u6b4c\u53ef\u80fd\u9762\u4e34\u5176\u6700\u5927\u7684\u76d1\u7ba1\u5a01\u80c1\uff0c\u6b27\u76df\u53cd\u6258\u62c9\u65af\u76d1\u7ba1\u673a\u6784\u5728\u4eca\u5e74\u5e74\u5e95\u4e4b\u524d\u5c06\u6b63\u5f0f\u8c03\u67e5\u8fdb\u5165\u5176\u5229\u6da6\u4e30\u539a\u7684\u6570\u5b57\u5e7f\u544a\u4e1a\u52a1\u3002\u8fd9\u4ef6\u4e8b\u3002\n \u5b83\u5c06\u6807\u5fd7\u7740\u6b27\u76df\u7ade\u8d5b\u6267\u6cd5\u8005\u5bf9\u8c37\u6b4c\u7684\u4e00\u4e2a\u65b0\u7684\u524d\u6cbf\u3002\u5b83\u5728\u8fc7\u53bb\u5341\u5e74\u4e2d\uff0c\u8be5\u516c\u53f8\u7f5a\u6b3e\u8d85\u8fc780\u4ebf\u6b27\u5143\uff0898\u4ebf\u7f8e\u5143\uff09\uff0c\u7528\u4e8e\u963b\u6b62\u5728\u7ebf\u8d2d\u7269\uff0cAndroid\u667a\u80fd\u624b\u673a\u548c\u5728\u7ebf\u5e7f\u544a\u4e2d\u7684\u7ade\u4e89\u5bf9\u624b\u3002\n \u5176\u4e2d\u4e00\u4e2a\u4eba\u8868\u793a\uff0c\u6b27\u76df\u63a2\u6d4b\u5c06\u91cd\u70b9\u5173\u6ce8\u8c37\u6b4c\uff06\uff0339;\u804c\u4f4d\u8fbe\u5230\u5e7f\u544a\u5546\uff0c\u51fa\u7248\u5546\uff0c\u4e2d\u95f4\u4eba\u548c\u7ade\u4e89\u5bf9\u624b\uff0c\u5176\u4e2d\u4e00\u4f4d\u4eba\u6c11\u8868\u793a\uff0c\u8fd9\u8868\u660e\u4e0a\u5468\u7684\u6cd5\u56fd\u53cd\u5784\u65ad\u5c40\u6bd4\u6cd5\u56fd\u53cd\u5784\u65ad\u5c40\uff06\uff0339;\n \u53bb\u5e74\uff0c\u8c37\u6b4c\u5728\u7ebf\u5e7f\u544a\u52df\u96c6\u4e861470\u4ebf\u7f8e\u5143\u7684\u6536\u5165\uff0c\u800c\u4e0d\u662f\u4e16\u754c\u4e0a\u4efb\u4f55\u5176\u4ed6\u516c\u53f8\u3002\u5e7f\u544a\u5728\u5176\u5c5e\u6027\uff0c\u5305\u62ec\u641c\u7d22\uff0cyoutube\u548cgmail\uff0c\u5360\u5927\u90e8\u5206\u9500\u552e\u548c\u5229\u6da6\u3002\n \u5927\u7ea616\uff05\u7684\u6536\u5165\u6765\u81ea\u5176\u663e\u793a\u6216\u7f51\u7edc\u4e1a\u52a1\uff0c\u5176\u4e2d\u5176\u4ed6\u5a92\u4f53\u516c\u53f8\u4f7f\u7528Google\u6280\u672f\u5728\u5176\u7f51\u7ad9\u548c\u5e94\u7528\u7a0b\u5e8f\u4e0a\u9500\u552e\u5e7f\u544a\u3002\n \u4e24\u4e2a\u5355\u4f4d\u90fd\u5728\u706b\u707e\u4e2d\u3002\u7f8e\u56fd\u53f8\u6cd5\u90e8\u7531\u4e00\u4e9b\u56fd\u5bb6\u52a0\u5165\u8c37\u6b4c\u53bb\u5e74\u6ee5\u7528\u5176\u5728\u641c\u7d22\u5e7f\u544a\u4e2d\u7684\u4e3b\u5bfc\u5730\u4f4d\u3002\u4e00\u7fa4\u7531\u5fb7\u514b\u8428\u65af\u5dde\u9886\u5bfc\u7684\u56fd\u5bb6\u5728\u540e\u671f\u8bc9\u8bbc\u4e2d\u91cd\u70b9\u5173\u6ce8\u623f\u5c4b\u7f51\u7edc\u4fa7\u7684\u53cd\u7ade\u4e89\u884c\u4e3a\u3002\n \u4e0a\u5468\u6cd5\u56fd\u4e0e\u8c37\u6b4c\u5b9a\u5c45\u4e862.68\u4ebf\u7f8e\u5143\uff0c\u5e76\u5bf9\u4e0e\u7f51\u7edc\u4e1a\u52a1\u76f8\u5173\u7684\u7c7b\u4f3c\u6307\u63a7\u7684\u5404\u79cd\u627f\u8bfa\uff0c\u8be5\u5355\u4f4d\u8fd8\u5fc5\u987b\u4e0e\u82f1\u56fd\u548c\uff0339;\u7ade\u4e89\u76d1\u7ba1\u673a\u6784\u5bc6\u5207\u5408\u4f5c\u5373\u5c06\u5230\u6765\u7684\u8f6f\u4ef6\u53d8\u66f4\uff0c\u4f5c\u4e3a\u7ed3\u7b97\u65e5\u671f\u7684\u7ed3\u7b97\u7684\u4e00\u90e8\u5206\u3002\u9605\u8bfb\u66f4\u591a \n\u59d4\u5458\u4f1a\u62d2\u7edd\u53d1\u8868\u8bc4\u8bba\u3002\u8c37\u6b4c\u6ca1\u6709\u7acb\u5373\u56de\u590d\u8bc4\u8bba\u8bf7\u6c42\u3002\n \u65b0\u7684\u6b27\u76df\u8be2\u95ee\u6700\u7ec8\u53ef\u80fd\u4f1a\u7784\u51c6\u6240\u6709\u8c37\u6b4c\u548c\uff0339;\u5e1d\u56fd\u3002\u5e02\u573a\u7814\u7a76\u5458Emarketer\u671f\u671b\u8c37\u6b4c\u4eca\u5e74\u63a7\u523627\uff05\u7684\u5168\u7403\u5728\u7ebf\u5e7f\u544a\u652f\u51fa\uff0c\u5176\u4e2d\u641c\u7d22\u5e7f\u544a\u548c10\uff05\u7684\u663e\u793a\u5668\u4e3a57\uff05\u3002\n \u867d\u7136\u8fd9\u4e9b\u6570\u5b57\u53ef\u80fd\u4e0d\u4f1a\u5728\u7b2c\u4e00\u4e2a\u816e\u7ea2\uff0c\u5e7f\u544a\u5546\u548c\u7ade\u4e89\u5bf9\u624b\u4e89\u593a\u8c37\u6b4c\uff06\uff0339;\u5404\u79cd\u8f6f\u4ef6\u5728\u5e02\u573a\u4e0a\u5f88\u591a\u65b9\u9762\u53d1\u6325\u4f5c\u7528\uff0c\u800c\u8be5\u516c\u53f8\u65e0\u6cd5\u907f\u514d\u3002\n \u4ed6\u4eec\u8bf4\u8c37\u6b4c\u5229\u7528\u4f9d\u8d56\u4e70\u5bb6\uff0c\u5356\u5bb6\u548c\u4e2d\u4ecb\u673a\u6784\u5df2\u7ecf\u63d0\u53d6\u4e86\u5404\u65b9\u7684\u9ad8\u8d39\u7528\uff0c\u5e76\u963b\u6b62\u7ade\u4e89\u5bf9\u624b\u4e0e\u5b83\u76f8\u5f53\u7ade\u4e89\u3002\n \u5728\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u53d1\u9001\u7ed9\u8c37\u6b4c\u7ade\u4e89\u5bf9\u624b\u548c\u7b2c\u4e09\u65b9\u7684\u8c03\u67e5\u95ee\u5377\u4e2d\uff0c\u6b27\u76df\u770b\u95e8\u72d7\u8be2\u95ee\u5e7f\u544a\u5546\u662f\u5426\u5728\u4f7f\u7528\u8c37\u6b4c\u4e2d\u95f4\u4eba\u5141\u8bb8\u5e7f\u544a\u5546\u6216\u5a92\u4f53\u673a\u6784\u8d2d\u4e70\u8bb8\u591a\u6765\u6e90\u5e7f\u544a\u5e93\u5b58\u65f6\u63a5\u53d7\u6298\u6263\u3002\u9605\u8bfb\u66f4\u591a\n \u59d4\u5458\u4f1a\u5e94\u5728\u5f8b\u5e08\u4e8b\u52a1\u6240Hausfeld\u7684\u5408\u4f5c\u4f19\u4f34\u517c\u4efb\u7684\u5408\u4f19\u4eba\u7684\u5f00\u59cb\u4e4b\u524d\u7ed3\u675f\u6301\u7eed\u7684\u6848\u4ef6\uff0c\u5e76\u4e3a\u8c37\u6b4c\u63d0\u51fa\u82e5\u5e72\u7533\u8bc9\u4eba\u3002\n \uff06\uff0334;\u6765\u81ea\u4ece\u4e1a\u8005\u548c\uff0339; S\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4ece\u884c\u4e1a\u548c\uff0339; S\u7684\u89c2\u70b9\u540c\u6837\u91cd\u8981\u7684\u662f\u5c06\u8c03\u67e5\u5e26\u5165\u5f53\u5730\u641c\u7d22\u548c\u8c37\u6b4c\uff06\uff0339;\u5728\u5176\u4ed6\u5f53\u5c40\u5df2\u5c06\u8c03\u67e5\u6253\u5f00\u5230\u8c37\u6b4c\u548c\uff0339; SDECH\uff0c\uff06\uff0334;\u4ed6\u8bf4\u3002 ", "note_en": "BRUSSELS, June 18 (Reuters) - Alphabet  (GOOGL.O) unit Google could face its biggest regulatory threat, with EU antitrust regulators set to open a formal investigation into its lucrative digital advertising business before the end of the year, said people familiar with the matter.\n It would mark a new front by the EU competition enforcer against Google. It has in the last decade fined the company more than 8 billion euros ($9.8 billion) for blocking rivals in online shopping, Android smartphones and online advertising.\n An EU probe would focus on Google&#39;s position vis-a-vis advertisers, publishers, intermediaries and rivals, one of the people said, indicating deeper scrutiny than the French antitrust agency&#39;s case concluded last week.\n Google made $147 billion in revenue from online ads last year, more than any other company in the world. Ads on its properties, including search, YouTube and Gmail, accounted for the bulk of sales and profits.\n About 16% of revenue came from its display or network business, in which other media companies use Google technology to sell ads on their website and apps.\n Both units are under fire. The U.S. Justice Department, joined by some states, sued Google last year for abusing its dominance in search ads. A group of states led by Texas in a later lawsuit focused on anti-competitive behaviour on the network side of the house.\n France last week settled with Google for $268 million and various commitments over similar allegations related to the network business, and the unit also must work closely with Britain&#39;s competition regulator on upcoming software changes as part of a settlement reached days later.  read more\n The Commission declined to comment. Google did not immediately respond to a request for comment.\n A new EU inquiry could end up targeting all of Google&#39;s ad empire. Market researcher eMarketer expects Google to control 27% of global online ad spending this year, including 57% for search ads and 10% of display.\n While the numbers may not look monopolistic at first blush, advertisers and rivals contend that Google&#39;s various software play a role in so many facets of the market that the company is impossible to avoid.\n They say Google takes advantage of the dependence buyers, sellers and intermediaries have on it to extract high fees from all sides and block rivals from fairly competing with it.\n In a questionnaire sent to Google rivals and third parties earlier this year and seen by Reuters, the EU watchdog asked if advertisers receive rebates when they use Google intermediaries which allow advertisers or media agencies to buy advertising inventory from many sources.   read more\n The Commission should conclude ongoing cases before starting new ones, said Thomas Hoppner, a partner at law firm Hausfeld, and who advises several complainants against Google.\n &#34;From the practitioner&#39;s point of view and from the industry&#39;s point of view, it appears equally important to bring investigations into local search and Google&#39;s job search to an end when other authorities have opened investigations into Google&#39;s adtech,&#34; he said.", "posttime": "2021-06-18 21:52:13", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "rust,google,\u5e7f\u544a,\u8c37\u6b4c,\u5e7f\u544a\u4e1a\u52a1", "title": "\u6765\u6e90\uff1a\u6b27\u76df\u53cd\u5784\u65ad\u76d1\u7ba1\u673a\u6784\u8ba1\u5212\u5728\u5e74\u5e95\u4e4b\u524d\u5bf9\u8c37\u6b4c\u7684\u6570\u5b57\u5e7f\u544a\u4e1a\u52a1\u8fdb\u884c\u6b63\u5f0f\u8c03\u67e5 ", "title_en": "Sources: EU antitrust regulators plan to open a formal investigation into Google's digital advertising business before the end of the year", "transed": 1, "url": "https://www.reuters.com/technology/eu-antitrust-regulators-probe-googles-adtech-business-by-year-end-sources-2021-06-18/", "via": "", "real_tags": ["rust", "google", "\u5e7f\u544a", "\u8c37\u6b4c", "\u5e7f\u544a\u4e1a\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066705, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5bf9GNU Coreutils\u7684\u754c\u9762\u548c\u64cd\u4f5c\u8fdb\u884c\u4e86\u975e\u5e38\u4ed4\u7ec6\u7684\u8003\u8651\uff0c\u4f46\u9057\u61be\u7684\u662f\u7531\u4e8e\u5012\u9000\u517c\u5bb9\u6027\uff0c\u8fd9\u4e9b\u5b9e\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u6df7\u6dc6\u4e00\u4e9b\u884c\u4e3a\u6216\u9ed8\u8ba4\u503c\u3002\u8be5\u4fe1\u606f\u5c06\u7ee7\u7eed\u66f4\u65b0\u5e76\u4e0eCoreutils FAQ\u91cd\u53e0\uff0c\u6b64\u5217\u8868\u96c6\u4e2d\u5728\u8f83\u5c11\u9891\u7e41\u7684\u6f5c\u5728\u95ee\u9898\u4e0a\u3002\n chmod -r\u662f\u5197\u4f59\u548c\u68d8\u624b\u7684\u3002\u5982\u679c\u4f8b\u5982\uff0c\u4eceVFAT\u590d\u5236\u4e00\u4e2a\u76ee\u5f55\uff0c\u5e76\u5e0c\u671b\u5728\u6587\u4ef6\u4e2d\u5173\u95edCHMOD-644\u4e0a\u7684\u53ef\u6267\u884c\u4f4d\uff0c\u8fd9\u5c06\u65e0\u6cd5\u91cd\u590d\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4eceDIR\u4e2d\u5220\u9664\u53ef\u6267\u884c\u4f4d\u3002\u8fd9\u662f\u53ef\u5b9e\u73b0\u7684\u65b9\u6cd5\uff1aCutn\uff06\uff0339; t\u4f7f\u7528\u7531\u4efb\u610f\u7a7a\u767d\u5206\u9694\u7684\u5b57\u6bb5\u548c\uff0339; s\u5f80\u5f80\u66f4\u597d\u5730\u4f7f\u7528awk oreven join -a1 -o1\u3002$\u5b57\u6bb5$ file / dev / null uct -s\u4ec5\u6291\u5236\u4e0d\u5206\u9694\u7b26\u7684\u884c\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u7f3a\u5c11\u73b0\u573a\u7684\u884c\uff0c\u5b83\u786e\u5b9e\u5305\u542b\u4e00\u4e9b\u5206\u9694\u7b26\uff0c\u5219\u8f93\u51fa\u7a7a\u884c\n \u540c\u6837\uff0c\u5982\u679c\u60a8\u60f3\u8981\u5728\u6ca1\u6709\u5206\u9694\u7b26\u65f6\u8f93\u51fa\u7a7a\u884c\u9700\u8981\u5c06\u5206\u9694\u7b26\uff08\u5982\uff1a\n  dd iflag = fullblock\u901a\u5e38\u662f\u5728\u4eceFIFO /\u7ba1\u9053\u8bfb\u53d6\u65f6\u6240\u9700\u7684\u5185\u5bb9\uff0c\u4f60\u7ecf\u5e38\u5f97\u5230\u4e00\u4e2a\u7b80\u77ed\u7684\u8bfb\u6570\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u4f60\u6307\u5b9a\uff06\uff0334\uff0c\u4f60\u4f1a\u5f97\u5230\u592a\u5c11\u7684\u6570\u636e\u3002\u5982\u679c\u60a8\u6307\u5b9a\uff06\uff0334\uff0c\u5219\u8ba1\u7b97\uff06\uff0334;\u6216\u8005\u592a\u591a\u6570\u636e;\u540c\u6b65\uff06\uff0334;\u4f8b\u5982\uff1a\u6ce8\u610f\u81ea\u7248\u672c8.10\u4ee5\u6765\uff0c\u6211\u4eec\u786e\u5b9e\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53d1\u51fa\u8b66\u544a\uff0c\u4f46\u6ca1\u6709\u8ba1\u6570= 1 aboveas\u77ed\u8bfb\u6570\u901a\u5e38\u4e0e\uff06\uff0334\u7684\u4e60\u8bed\u4e00\u8d77\u4f7f\u7528\u8ba1\u6570= 1;\u867d\u7136\u53ef\u80fd\u662fDD Iflag =\u975e\u963b\u585e\u662f\u4e00\u4e2aMoredirect\u548c\u4e00\u822c\u65b9\u5f0f\u6765\u505a\u8fd9\u4ef6\u4e8b\u5417\uff1f dd conv = noerror\u771f\u7684\u4e5f\u9700\u8981conv = syncso\u8ba4\u4e3a\uff0c\u5982\u679c\u4ece\u5931\u8d25\u78c1\u76d8\u8bfb\u53d6\uff0c\u5219\u4e00\u4e2a\u4eba\u5f97\u5230\u6b63\u786e\u5bf9\u9f50\u7684\u6570\u636e\uff0c\u7528nuls\u66ff\u6362\u4e3aunuls.note\u5982\u679c\u5757\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e\u90fd\u6709\u8bfb\u53d6\u9519\u8bef\uff0c\u5219\u5c06\u4e22\u5f03\u6574\u4e2a\u5757\u3002\u56e0\u6b64\uff0c\u5728\u901f\u5ea6\uff08\u66f4\u5927\uff09\u4e4b\u95f4\u7684\u5e73\u8861\u5e76\u6700\u5c0f\u5316\u6570\u636e\u4e22\u5931\uff08\u66f4\u5c0f\uff09\u3002\u8fd9\u5728\u66f4\u4e13\u7528\u7684toollike ddrescue\u4e2d\uff0c\u53ef\u4ee5\u66f4\u7b80\u5355\uff0c\u66f4\u4e3a\u52a8\u6001\u3002\n dd skip = 0x100\u4e0d\u8df3\u8fc7\u8df3\u8fc7\u7684\u4e1c\u897f\u548c\uff0334; 0x\uff06\uff0334;\u524d\u7f00\u88ab\u89c6\u4e3a\u96f6\u4e58\u6cd5\u5668.Coreuls\uff06gt; = 8.26\u81f3\u5c11\u4f1a\u8b66\u544a\u8fd9\u4e00\u70b9\uff0c\u5efa\u8bae\u4f7f\u7528\uff06\uff0334; 00x\uff06\uff0334;\u5982\u679c\u8fd9\u771f\u7684\u662f\u610f\u56fe\u3002\n \u6709\u5173\u5b8c\u5168\u53ef\u79fb\u690d\u6027\uff0c\u8bf7\u5728\u89e3\u6790DF\u7684\u8f93\u51fa\u65f6\uff0c\u9700\u8981-P\u9009\u9879\u3002\u907f\u514d\u4e86\u7ebf\u5305\u88c5\uff0c\u867d\u7136\u81ea\u7248\u672c8.11\uff082011\u5e744\u6708\uff09\u4ee5\u6765\uff0c\u867d\u7136DF\u5c06\u4e0d\u518d\u5305\u88c5\u7ebf\u6761\u6765\u5e2e\u52a9\u907f\u514d\u8fd9\u6b3eGOTCHA\u3002\u6b64\u5916\uff0c\u5982\u679c\u9700\u8981\u89e3\u6790\u6807\u9898\uff0c\u5219-p\u9009\u9879\u5c06\u4f7f\u7528\u66f4\u6807\u51c6\u5316\uff08\u4f46\u542b\u7cca\u4e0d\u6e05\uff09\u7684Wording.See\u4e5f\u662f\u5757\u5927\u5c0f\u95ee\u9898\u3002\u5982\u679c\u4e24\u4e2a\u6216\u591a\u4e2a\u786c\u94fe\u63a5\u6307\u5411\u540c\u4e00\u6587\u4ef6\uff0c\u5219\u4ec5\u8ba1\u7b97\u5176\u4e2d\u4e00\u4e2a\u94fe\u63a5\u3002\u6587\u4ef6\u53c2\u6570\u987a\u5e8f\u4f1a\u5f71\u54cd\u54ea\u4e9b\u94fe\u63a5\uff0c\u5e76\u66f4\u6539\u53c2\u6570\u987a\u5e8f\u53ef\u80fd\u4f1a\u66f4\u6539DU\u8f93\u51fa\u7684\u6570\u5b57\u3002\u6ce8\u610f\u8fd9\u4e5f\u5f71\u54cd\u4e86\u56f0\u60d1\u7684\u6307\u5b9a\u76ee\u5f55\uff1a$ cd git / coreutils $ du-s ./tests593120 ./tests593120 ./$ du -s ./tests ./\uff03\u6df1\u5ea6\u9996\u5148\u83b7\u53d6\u5217\u51fa\u7684\u9879\u76ee\uff08\u867d\u7136\u72ec\u7acb\u8ba1\u6570\uff0910036\u3002/tests583084 ./\uff03\u6ce8\u610f\u987a\u5e8f\u5373\u4f7f\u5177\u6709\u9690\u5f0f\u72ec\u7acb$ du -s  -  separate-dirs ./tests ./tests ./128 ./tests16268 ./$ du -s  -  separate-dirs ./tests16268 ./tests16268 ./\nNote Du Donn\uff06\uff0339; t\u7279\u6b8a\u5904\u7406Refrinked\u6587\u4ef6\uff0c\u56e0\u6b64\u5c06\u8ba1\u7b97\u56de\u6d41\u6587\u4ef6\u7684\u6240\u6709\u5b9e\u4f8b\u3002 Echo\u662f\u975e\u4fbf\u643a\u5f0f\uff0c\u5176\u884c\u4e3a\u5728\u7cfb\u7edf\u548cshell\u5185\u7f6e\u7b49\u4e2d\u53d1\u6563\u7b49\u7b49\u3002\u4e00\u4e2a\u5e94\u8be5\u771f\u6b63\u8003\u8651\u4f7f\u7528printf\u3002\u8fd9\u4e2ashell\u4f1a\u8bdd\u8bf4\u660e\u4e86\u4e00\u4e9b\u4e0d\u4e00\u81f4\u7684\u4e1c\u897f\u3002\u60a8\u770b\u5230\u7684\u4f4d\u7f6e\uff0c\u60a8\u8ba4\u4e3aCoreutilsStandlone\u7248\u672c\uff1a$ echo -e -n\uff03\u8f93\u51fa\u6ca1\u6709$ echo -n -e $ echo  -  -n\uff03\u9009\u9879\u7ec8\u7ed3\u5668\u8f93\u51fa -  -n $ posixly_correct = 1 envecho -e -ne -n\u200b\u200b $ posixly_correct = 1 envecho -n -e\uff03\u65e0\u8f93\u51fa\u65e0\u8bba\u203d \nWarning: Can only detect less than 5000 characters", "note_en": "We make very careful considerations about the interface and operationof the GNU coreutils, but unfortunately due to backwards compatibilityreasons, some behaviours or  defaultsof these utilities can be confusing. This information will continue to be updated and overlaps somewhat with the  coreutils FAQ,with this list focusing on less frequent potential issues.\n chmod -R is redundant and tricky.If for example you copy a dir from VFAT and want to turn off executable bits on filesusing  chmod -R 644,that will fail to recurse as it removes the executable bits from dirs.This is achievable in various ways:  cut doesn&#39;t work with fields separated by arbitrary whitespace.It&#39;s often better to use  awk oreven  join -a1 -o1.$field $file /dev/null cut -s only suppresses lines without delimiters.Therefore if you have a line with a missing fieldbut it does contain some delimiters, a blank line is output\n Similarly, if you want to output a blank line when there are no delimitersone needs to append a delimiter like:\n  dd  iflag=fullblock is usually what you wantbecause when reading from a fifo/pipe you often get a short read,which means you get too little data if you specify &#34; count&#34;,or too much data if you specify &#34; sync&#34;. For example: Note we do warn in certain cases since version 8.10, but not with count=1 aboveas short reads are often used with count=1 as an idiom to &#34;consume available data&#34;,though perhaps  dd iflag=nonblock would be a moredirect and general way to do that? dd  conv=noerror really also needs  conv=syncso that if reading from failing disk,one gets correctly aligned data, with unreadable bits replaced with NULs.Note if there is a read error anywhere in a block,the whole block will be discarded. So one needsto balance between speed (bigger) and minimized data loss (smaller).This is simpler and more dynamic in a more dedicated toollike  ddrescue.\n dd  skip=0x100 doesn&#39;t skip anythingas the &#34;0x&#34; prefix is treated as a zero multiplier.coreutils &gt;= 8.26 will warn about this at least,suggesting to use &#34;00x&#34; if that really was the intention.\n For full portability the  -P option is neededwhen parsing the output from df. Line wrapping is avoided, thoughdf will no longer wrap lines since version 8.11 (Apr 2011) to helpavoid this gotcha. Also if one needs to parse the header,the  -P option will use more standardised (but ambiguous) wording.See also the  Block size issue. If two or more hard links point to the same file, only one of thehard links is counted. The FILE argument order affects which links arecounted, and changing the argument order may change the numbers that du outputs. Note this also impacts specified directories which is confusing: $ cd git/coreutils$ du -s ./ ./tests593120 ./$ du -s ./tests ./  # depth first gets items listed (though counted independently)10036 ./tests583084 ./ # Note order is significant even with implicit independence$ du -s --separate-dirs ./tests ./128 ./tests16268 ./$ du -s --separate-dirs ./ ./tests16268 ./\nNote du doesn&#39;t handle  reflinked files specially,and thus will count all instances of a reflinked file.  echo is non portable and its behaviour diverges betweensystems and shell builtins etc. One should really consider using printf instead.This shell session illustrates some inconsistencies.Where you see  env being used, that is selecting the coreutilsstandalone version: $ echo -e -n  # outputs nothing$ echo -n -e$ echo -- -n  # option terminator outputted-- -n$ POSIXLY_CORRECT=1 env echo -e -n-e -n$ POSIXLY_CORRECT=1 env echo -n -e  # no output either \u203d\n The exit status of expr is a confusing gotcha.POSIX states that exit status of 1 is used if &#34;the expression evaluates to null or zero&#34;,which you can see in these examples: $ expr 2 - 1; echo $?10$ expr 2 - 2; echo $?01$ expr substr 01 1 1; echo $?01$ expr &#39; &#39; : &#39;^ *$&#39;; echo $?10$ expr &#39;&#39; : &#39;^ *$&#39;; echo $?01 # number of matched characters returned$ expr 0 : &#39;[0-9]$&#39;; echo $?10 # actual matched characters returned$ expr 0 : &#39;\\([0-9]\\)$&#39;; echo $?01\nThe string matching above is especially confusing, thoughdoes conform to POSIX, and is consistent across solaris, FreeBSD and GNU utils. As for changing the behaviour, it&#39;s probably not possible due tobackwards compatibility issues. For example the &#39;^..*$&#39; casewould need to change the handling of the &#39;*&#39; in the expression,which would break a script like: printf &#39;%s\\n&#39; 1 2 &#39;&#39; 3 |while read line; do expr &#34;$line&#34; : &#39;^[0-9]*$&#39; &gt;/dev/null || break # at first blank line echo process &#34;$line&#34;done\nNote, using a leading ^ in the expression is redundant and non portable. ls -lrt will also reverse sort names for fileswith matching timestamps (common in /dev/ and /proc/ etc.)This is as per POSIX but probably not what the user wanted.There is no way to reverse by time and have non reversed name sorting.  ln -nsf is needed to update symlinks,though note that this will overwrite existing files,and cause links to be created within existing directories.  mkdir -p --mode=... only applies the mode to theright-most directory. Any parent directories are created with&#39;u+wx&#39; modified by umask. If you want to control the mode for all created dirs,you can use a umask like Note that the user &#39;wx&#39; bits can not be cleared for parent dirs.Note also that special mode bits like setuid are not set atomically,either with --mode on the right-most directory, or a subsequent chmod requiredfor created parent directories. Note also to be careful with  chmod -R  If changing the umask before invoking mkdir is not that easy - maybebecause not called via a shell -, then an alternative to the aboveumask method is to specify each of the target directories separately,e.g.: But it is important to know that &#39;mkdir&#39; does not adjust the permissionbits if any of those directories already existed.If you do want to ensure a directory hierarchy with particular permissionsone can use the `install` command instead like:   nl defaults to  -d &#39;\\:&#39; by default.Therefore any lines that contain only  &#39;\\:&#39;,  &#39;\\:\\:&#39;or  &#39;\\:\\:\\:&#39; will reset numbering.If you want to number lines irrespective on content then you need to specify  -d &#39;&#39;,or alternatively use the less flexible  cat -n option. The checksum utilities like md5sum, sha1sum etc. add backslashes to the output namesif those names contain &#39;\\n&#39; or &#39;\\&#39; characters. Also &#39;*&#39; is added to the outputwhere O_BINARY is significant (CYGWIN). Therefore automatic processing of theseutilities require one to  unescape first.  rm -rf does not mean &#34;delete as much as possible&#34;. It only avoids prompts.For example with a non writeable dir, you will not be ableto remove any contents. Therefore this is sometimes necessary to:  A very common issue encountered is with the default ordering of the  sort utility.Usually what is required is a simple byte comparison, though by default the collationorder of the current locale is used. To use the simple comparison logic you can LC_ALL=C sort ... as detailed in the FAQ. As well as being slower, the locale based ordering can often be surprising.For example some character representations,like the full width forms of latin numbers, compare equal to each other. $ printf &#39;%s\\n&#39; \uff12 \uff11 | ltrace -e strcoll sortsort-&gt;strcoll(&#34;\\357\\274\\222&#34;, &#34;\\357\\274\\221&#34;) = 0\uff12\uff11$ printf &#39;%s\\n&#39; \uff12 \uff11 | sort -u\uff12\nThe equal comparison issue with --unique can even impact inthe &#34;C&#34; locale, for example with  --numeric-sort dropping items unexpectedly.Note this example also demonstrates that --unique implies --stable,to select the first encountered item in the matching set.  Related to locale ordering, there is the  i18n patchon Fedora/RHEL/SUSE which has its own issues. Note disabling the locale specifichandling as described above effectively avoids these issues.  Example 2: case folding results in incorrect ordering:  Fields specified with  -k are separated by default by runs of blank characters (space and tab),and by default the blank characters preceding a field are  included in the comparison,which depending on your locale could be significant to the sorting order. This is confusing enoughon its own, but is compounded with the  --field-separator and  --ignore-leading-blanks options.Ignoring leading blanks (-b) is particularly confusing, because... Also precisely specifying a particular field, requires both the start  and endfields specified. I.E. to sort on field 2 you use -k2 ,2. These field delineation issues along with others are so confusing,that the  sort --debug option was addedin version 8.6 to highlight the matching extent and other consequences of the various options.\n  sort -R does randomize the input similarlyto the shuf command, but also ensures that matching keys are grouped together.shuf also provides optimizations when outputting a subset of the input.  split produces file names that may be surprising,as it defaults to a two letter suffix for initial files, butto support an arbitrary number of files, has a feature to widen the letters inthe output file names as needed. The widening scheme ensures file names are sorted correctlywhen using standard shell sorting, when subsequently listing orconcatenating the resultant files. For example:  split behaves the same with the --numeric-suffixes/-d option, which couldlead to unexpected numeric sequences. This was done again to ease sortingof the output (which is usually not inspected by humans for large sequences),but mainly for backwards compatibility with existing concatenation scriptsthat use standard sorting. The recommended solution is to specify a -a/--suffix-length parameterwhich still allows for standard ordering at the shell,but with more natural numbers:  tac like  wc has issues dealing with files withouta last &#39;\\n&#39; character.  tail -F is probably what you want rather than -fas the latter doesn&#39;t follow log rotations etc. tee by default will exit immediately upon receiving SIGPIPEto be POSIX compliant and to support applications like yes | tee log | timeout process.Now this is problematic in the presence of &#34;early close&#34; pipes,often seen when combining tee with bash &gt;(process substitutions).Starting with coreutils 8.24 (Jul 2015), tee has the new -p, --output-erroroption to control the operation in such cases. $ seq 100000 | tee &gt;(head -n1) &gt; &gt;(tail -n1)114139$ seq 100000 | tee -p &gt;(head -n1) &gt; &gt;(tail -n1)1100000\n The mode of operation of test depends on the number of arguments.Therefore you will not get an expected error in cases like test -s $file || echo no data &gt;&amp;2,if &#34;$file&#34; is empty or unset. That&#39;s because test(1) will thenbe operating in string testing mode, which will return successdue to &#34;-s&#34; being interpreted as a true expression.Instead ensure the variable is appropriately quoted to avoid such issues: test -s &#34;$file&#34; || echo no data &gt;&amp;2.  wc -l on a file in which the last linedoesn&#39;t end with &#39;\\n&#39; character will return a value of one-less thanmight be expected as wc is standardised to just count &#39;\\n&#39; characters.POSIX in fact doesn&#39;t consider a file without a &#39;\\n&#39; as the last characterto be a text file at all. Also by only counting &#39;\\n&#39; characters resultsin consistent counts whether counting concatenated files, ortotaling individual files.  wc -L counts the maximum  display width for a line,considering only valid, printable characters, but not terminal control codes. # invalid UTF-8 sequence not counted:$ printf &#34;\\xe2\\xf2\\xa5&#34; | wc -L0 # unprintable characters  even in the C locale are not counted:$ printf &#34;\\xe2\\x99\\xa5&#34; | LC_ALL=C wc -L0 # Bytes can be counted using sed:$ printf &#34;\\xe2\\x99\\xa5&#34; | LC_ALL=C sed &#39;s/././g&#39; | wc -L3 # Terminal control chars are not handled specially:$ printf &#39;\\x1b[33mf\\bred\\x1b[m\\n&#39; | tee /dev/tty | wc -L red10\n The  df,  du,  ls --block-sizeoption is unusual in that appending a  B to the unit, changes it  from binary to decimal.I.E. KB means 1000, while K means 1024. In general the units representations in coreutils are unfortunate,but an accident of history.POSIX species &#39;k&#39; and &#39;b&#39; to mean 1024 and 512 respectively.Standards wise &#39;k&#39; should really mean 1000 and &#39;K&#39; 1024.Then extending from that we now have (which we can&#39;t change for compatibility reasons): Note there is new flexibility to consider when controlling theoutput of numeric units, by leveraging the  numfmtutility. For example to control the output of du you could definea function like:  Discussed separately at  Time zone ambiguities", "posttime": "2021-06-18 21:51:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "coreutils,\u8f93\u51fa", "title": "Coreutils Gotchas\uff082015\u5e74\uff09 ", "title_en": "Coreutils Gotchas (2015)", "transed": 1, "url": "https://www.pixelbeat.org/docs/coreutils-gotchas.html", "via": "", "real_tags": ["coreutils", "\u8f93\u51fa"]}]