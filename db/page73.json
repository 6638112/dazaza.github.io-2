[{"category": "", "categoryclass": "", "imagename": "c5d042c003b8784ac7331b4883815074.jpg", "infoid": 1071021, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\uff0c\u7f8e\u56fd\u7ee7\u7eed\u770b\u5230\u67aa\u652f\u548c\u5f39\u836f\u9500\u552e\u6fc0\u589e\u3002\u636e\u7f8e\u8054\u793e\u62a5\u9053\uff0c\u67aa\u652f\u8d2d\u4e70\u91cf\u6fc0\u589e\u5bfc\u81f4\u5168\u56fd\u5f39\u836f\u77ed\u7f3a\u3002\u56fd\u5bb6\u5c04\u51fb\u8fd0\u52a8\u57fa\u91d1\u4f1a\u544a\u8bc9\u7f8e\u8054\u793e\uff0c\u5b83\u4f30\u8ba1\u5728\u7f8e\u56fd\u9500\u552e\u4e86 2000 \u4e07\u652f\u67aa\uff0c\u5176\u4e2d 800 \u4e07\u652f\u662f\u9996\u6b21\u8d2d\u4e70\u67aa\u652f\u7684\u4eba\u3002\u8be5\u7ec4\u7ec7\u7684\u53d1\u8a00\u4eba\u9a6c\u514b\u5965\u5229\u74e6\u8bf4\uff1a\u201c\u5f53\u4f60\u8c08\u8bba\u6240\u6709\u8fd9\u4e9b\u4eba\u8d2d\u4e70\u67aa\u652f\u65f6\uff0c\u5b83\u786e\u5b9e\u5bf9\u8d2d\u4e70\u5f39\u836f\u7684\u4eba\u4ea7\u751f\u4e86\u5f71\u54cd\u3002\u201d \u201c\u5982\u679c\u4f60\u770b\u770b 840 \u4e07\u67aa\u652f\u4e70\u5bb6\uff0c\u4ed6\u4eec\u90fd\u60f3\u8d2d\u4e70\u4e00\u76d2 50 \u53d1\u5b50\u5f39\uff0c\u90a3\u4e48\u8fd9\u5c06\u662f 4.2 \u4ebf\u53d1\u5b50\u5f39\uff0c\u201d\u4ed6\u8865\u5145\u9053\u3002\u6765\u81ea\u8054\u90a6\u8c03\u67e5\u5c40\u56fd\u5bb6\u5373\u65f6\u72af\u7f6a\u80cc\u666f\u8c03\u67e5\u7cfb\u7edf\u7684\u6570\u636e\u8868\u660e\uff0c\u8fc7\u53bb\u4e00\u5e74\u534a\u67aa\u652f\u9500\u552e\u6025\u5267\u4e0a\u5347\u3002 2020 \u5e74\uff0cFBI \u5bf9\u8fd1 4000 \u4e07\u652f\u67aa\u652f\u7684\u8d2d\u4e70\u8fdb\u884c\u4e86\u80cc\u666f\u8c03\u67e5\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c2019 \u5e74\u8fdb\u884c\u4e86\u7ea6 2800 \u4e07\u6b21\u80cc\u666f\u8c03\u67e5\uff0c2018 \u5e74\u8fdb\u884c\u4e86 2600 \u4e07\u6b21\u30022010 \u5e74\uff0c\u8054\u90a6\u8c03\u67e5\u5c40\u8fdb\u884c\u4e86 1440 \u4e07\u6b21\u68c0\u67e5\u3002\u5230 2021 \u5e74\u524d\u516d\u4e2a\u6708\uff0c\u5b83\u5df2\u542f\u52a8\u4e86\u8d85\u8fc7 2200 \u4e07\u6b21\u80cc\u666f\u8c03\u67e5\u3002\u7136\u800c\uff0c\u8054\u90a6\u8c03\u67e5\u5c40\u6307\u51fa\uff0c\u5176\u6570\u636e\u5e76\u672a\u4e13\u95e8\u8ddf\u8e2a\u67aa\u652f\u8d2d\u4e70\u60c5\u51b5\uff0c\u8fd9\u610f\u5473\u7740\u201c\u67aa\u652f\u80cc\u666f\u8c03\u67e5\u548c\u67aa\u652f\u9500\u552e\u4e4b\u95f4\u65e0\u6cd5\u5efa\u7acb\u4e00\u5bf9\u4e00\u7684\u5173\u8054\u201d\u3002\n\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b5 \u6708\u62a5\u9053\u79f0\uff0c\u6765\u81ea\u4e1c\u5317\u5927\u5b66\u548c\u54c8\u4f5b\u4f24\u5bb3\u63a7\u5236\u7814\u7a76\u4e2d\u5fc3\u7684\u521d\u6b65\u6570\u636e\u663e\u793a\uff0c\u53bb\u5e74\u5728\u7f8e\u56fd\u8d2d\u4e70\u67aa\u652f\u7684\u4eba\u4e2d\u6709\u4e94\u5206\u4e4b\u4e00\u662f\u9996\u6b21\u62e5\u6709\u67aa\u652f\u3002\u6570\u636e\u8fd8\u663e\u793a\uff0c\u73b0\u5728\u6709 39% \u7684\u7f8e\u56fd\u5bb6\u5ead\u62e5\u6709\u67aa\u652f\uff0c\u6bd4 2016 \u5e74\u7684 32% \u6709\u6240\u589e\u52a0\u3002 \u4f50\u6cbb\u4e9a\u5dde\u67aa\u652f\u5546\u5e97\u8001\u677f\u8fc8\u514b\u00b7\u5a01\u514b\u65af\u53bb\u5e74 7 \u6708\u544a\u8bc9\u65b0\u95fb\u5468\u520a\uff0c\u4ed6\u5728\u4f50\u6cbb\u4e9a\u5dde\u76d6\u6069\u65af\u7ef4\u5c14\u7684\u5546\u5e97\u770b\u5230\u9996\u6b21\u8d2d\u4e70\u67aa\u652f\u7684\u4eba\u6570\u6709\u6240\u589e\u52a0. \u201c\u5728\u8fc7\u53bb\u7684\u67aa\u652f\u6050\u614c\u4e2d\uff0c\u5f53\u6211\u4eec\u62c5\u5fc3\u653f\u5e9c\u4f1a\u8bd5\u56fe\u6ca1\u6536\u6211\u4eec\u7684\u67aa\u652f\u65f6\uff0c\u4f60\u4f1a\u770b\u5230\u4e00\u7fa4\u4eba\uff0c\u5927\u591a\u6570\u662f\u67aa\u652f\u7231\u597d\u8005\u6216\u5df2\u7ecf\u62e5\u6709\u67aa\u652f\u7684\u4eba\uff0c\u60f3\u8981\u5f97\u5230\u66f4\u591a\uff0c\u201d\u5a01\u514b\u65af\u8bf4. \u201c\u8fd9\u4e00\u6b21\u975e\u5e38\u4e0d\u540c\u3002\u6211\u4eec\u770b\u5230\u51e0\u4e4e\u6ca1\u6709\u4eba\u559c\u6b22\u4e70\u67aa\uff0c\u201d\u4ed6\u8865\u5145\u9053\u3002\u968f\u7740\u67aa\u652f\u9500\u91cf\u7684\u589e\u52a0\u548c\u67aa\u652f\u7ecf\u9500\u5546\u52aa\u529b\u5c06\u5f39\u836f\u7559\u5728\u8d27\u67b6\u4e0a\uff0c\u7f8e\u8054\u793e\u62a5\u544a\u79f0\uff0c\u4ece\u4fc4\u7f57\u65af\u3001\u97e9\u56fd\u3001\u6b27\u76df\u548c\u5176\u4ed6\u56fd\u5bb6\u8fdb\u53e3\u7684\u5f39\u836f\u589e\u52a0\u4e86 225%\u3002\u897f\u96c5\u56fe\u8b66\u5bdf\u4f53\u80b2\u534f\u4f1a\u7684\u675c\u5b89\u00b7\u4ea8\u5fb7\u91cc\u514b\u65af\uff08Duane Hendrix\uff09\u544a\u8bc9\u7f8e\u8054\u793e\uff0c\u4ed6\u5df2\u7ecf\u5f00\u59cb\u9650\u5236\u987e\u5ba2\u53ea\u80fd\u8d2d\u4e70\u4e24\u76d2\u5f39\u836f\u3002 \u201c\u6211\u4ee5\u524d\u4ece\u672a\u89c1\u8fc7\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u201d\u4ea8\u5fb7\u91cc\u514b\u65af\u8bf4\u3002 \u201c\u6709\u4e9b\u4e1c\u897f\u6211\u4eec\u4e70\u4e0d\u5230\uff0c\u5c24\u5176\u662f\u6b65\u67aa\u5f39\u836f\u3002\u5982\u679c\u4f60\u7684\u5ba2\u6237\u6ca1\u6709\u5f39\u836f\uff0c\u90a3\u5c31\u6ca1\u6709\u5fc5\u8981\u5f00\u95e8\u4e86\u3002\u201d", "note_en": "The U.S. is continuing to see a spike in gun and ammunition sales that began during the COVID-19 pandemic.\n The spike in gun purchases has driven shortages of ammo across the country, according to the Associated Press.\n The National Shooting Sports Foundation told the AP that it estimates that 20 million guns were sold in the U.S. Of those, it believes 8 million sales were made by first-time firearms purchasers.\n &#34;When you talk about all these people buying guns, it really has an impact on people buying ammunition,&#34; the organization&#39;s spokesperson, Mark Oliva, said.\n &#34;If you look at 8.4 million gun buyers and they all want to buy one box with 50 rounds, that&#39;s going to be 420 million rounds,&#34; he added.\n  Data from the  FBI&#39;s National Instant Criminal Background Checks System suggests a sharp uptick in gun sales in the last year and a half. In 2020, the FBI conducted background checks for nearly 40 million gun purchases. That&#39;s compared to about 28 million background checks in 2019, and 26 million in 2018. In 2010, the FBI conducted 14.4 million checks. Through the first six months of 2021, it has initiated more than 22 million background checks.\n The FBI notes, however, that its data doesn&#39;t specifically track gun purchases, meaning &#34;a one-to-one correlation can not be made between a firearm background check and a firearm sale.&#34;\n The New York Times reported in May that preliminary data from Northeastern University and the Harvard Injury Control Research Center showed that a fifth of the people who bought guns in the U.S. last year were first-time owners.\n The data also showed that 39 percent of U.S. households now own guns, an increase from 32 percent in 2016.\n Georgia Gun Store owner Mike Weeks  told  Newsweek last July that he had seen an increase in first-time firearm buyers at his Gainsville, Georgia shop.\n  &#34;In gun scares in the past, when we&#39;re worried the government&#39;s going to try and confiscate our guns, you see a group of people, most are either gun enthusiasts or people who already own guns, want to get more,&#34; Weeks said. &#34;This time it&#39;s very different. We see almost nobody like that buying a gun,&#34; he added.\n As firearm sales have increased and gun dealers struggle to keep ammunition on the shelves, the AP reports ammo imports from Russia, South Korea, the  European Union and other countries have increased 225 percent.\n Duane Hendrix, of the Seattle  Police Athletic Association, a gun range in Tukwila, Washington, told the AP that he has started restricted customers to only buying two boxes of ammo.\n &#34;I&#39;ve never seen anything like it before,&#34; Hendrix said. &#34;There&#39;s stuff we can&#39;t get, especially rifle ammo. If you don&#39;t have ammo for your customers, there&#39;s no point in having your doors open.&#34;", "posttime": "2021-08-02 00:29:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u770b\u5230,ongoing,\u67aa\u652f", "title": "\u7f8e\u56fd\u770b\u5230\u67aa\u652f\u5f39\u836f\u9500\u552e\u6301\u7eed\u98d9\u5347\uff1a\u201c\u6211\u4ece\u672a\u89c1\u8fc7\u8fd9\u6837\u7684\u4e8b\u60c5\u201d", "title_en": "U.S. Sees Ongoing Spike in Gun, Ammo Sales: 'I've Never Seen Anything Like It'", "transed": 1, "url": "https://www.newsweek.com/us-sees-ongoing-spike-gun-ammo-sales-ive-never-seen-anything-like-it-1614952", "via": "", "real_tags": ["\u7f8e\u56fd", "\u770b\u5230", "ongoing", "\u67aa\u652f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071019, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5df2\u7ecf\u7528 C \u5b8c\u6210\u4e86\u76f8\u5f53\u6570\u91cf\u7684\u7f16\u7a0b\uff0c\u6240\u4ee5\u6211\u559c\u6b22\u8ba4\u4e3a\u6211\u76f8\u5f53\u4e86\u89e3\u5b83\u3002\u4f46\u662f\uff0c\u6211\u8fd8\u662f\u7ecf\u5e38\u5b66\u4e60\u4e00\u4e2a\u65b0\u7684 C \u6280\u5de7\uff0c\u5e76\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e86\u89e3\u5230\u6211\u5e76\u4e0d\u50cf\u6211\u60f3\u8c61\u7684\u90a3\u6837\u4e86\u89e3 Cquite\u3002\u4eca\u5929\u7684\u6280\u5de7\u662f\u4f7f\u7528 C \u8054\u5408\u5c06\u7ed3\u6784\u5b57\u6bb5\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u662f\u6211\u901a\u8fc7\u8fd9\u4e2a LWNarticle(via) \u4e86\u89e3\u5230\u7684\u3002\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u5305\u542b\u4e00\u5806\u5b57\u6bb5\u7684\u7ed3\u6784\uff0c\u5e76\u4e14\u60a8\u60f3\u5728\u540c\u4e00\u4e2a\u540d\u79f0\u4e0b\u540c\u65f6\u5904\u7406\u5176\u4e2d\u7684\u4e00\u4e9b\uff1b\u4e5f\u8bb8\u60a8\u60f3\u901a\u8fc7\u7ed3\u6784\u8d4b\u503c\u65b9\u4fbf\u5730\u5c06\u5b83\u4eec\u590d\u5236\u4e3a\u5757\u3002\u4f46\u662f\uff0c\u60a8\u8fd8\u5e0c\u671b\u4fdd\u6301\u7b80\u5355\u7684\u5b57\u6bb5\u8bbf\u95ee\uff0c\u5e76\u4e14\u4f7f\u7528\u60a8\u7684\u7ed3\u6784\u7684\u4eba\u4e0d\u5fc5\u77e5\u9053\u8fd9\u4e9b\u5b57\u6bb5\u7279\u522b\u7279\u522b\uff08\u9664\u5176\u4ed6\u5916\uff0c\u8fd9\u53ef\u80fd\u4f1a\u9632\u6b62\u5206\u7ec4\u6cc4\u6f0f\u5230\u60a8\u7684 API \u4e2d\uff09\u3002\u4f20\u7edf\u7684\u8001\u6d3e C \u65b9\u6cd5\u662f\u4e00\u4e2a\u5e26\u6709 #defines ontop \u7684\u5b50\u7ed3\u6784\uff1a struct a { int field1;\u7ed3\u6784\u5b50{ int field_2; int field_3; };};#define field2 sub.field_2#define field2 sub.field_3 \u95ee\u9898\u4e4b\u4e00\u662f#defines\uff0c\u5b83\u4f5c\u4e3a\u4e00\u79cd\u91cd\u547d\u540d\u5b57\u6bb5\u7684\u65b9\u5f0f\u5df2\u7ecf\u975e\u5e38\u5931\u5ba0\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u73b0\u4ee3 C \u901a\u8fc7\u4e3a\u547d\u540d\u7a7a\u95f4\u76ee\u7684\u6ee5\u7528\u8054\u5408\u8ba9\u60a8\u505a\u5f97\u6bd4\u8fd9\u66f4\u597d\u3002\u4f60\u6240\u505a\u7684\u662f\u5728\u4e00\u4e2a\u533f\u540d\u8054\u5408\u4e2d\u5d4c\u5165\u4e24\u4e2a\u76f8\u540c\u7684\u5b50\u7ed3\u6784\uff0c\u6bcf\u4e2a\u5b50\u7ed3\u6784\u90fd\u6709\u76f8\u540c\u7684\u5b57\u6bb5\uff0c\u7ed9\u4e00\u4e2a\u5b50\u7ed3\u6784\u4e00\u4e2a\u540d\u5b57\uff0c\u8ba9\u53e6\u4e00\u4e2a\u4fdd\u6301\u533f\u540d\u3002\u533f\u540d\u8054\u5408\u4e2d\u7684\u533f\u540d\u5b50\u7ed3\u6784\u5141\u8bb8\u60a8\u8bbf\u95ee\u5176\u5b57\u6bb5\uff0c\u800c\u65e0\u9700\u4efb\u4f55\u5176\u4ed6\u7ea7\u522b\u7684\u540d\u79f0\u3002\u975e\u533f\u540d\u7ed3\u6784\u4f7f\u60a8\u53ef\u4ee5\u6309\u540d\u79f0\u5f15\u7528\u6574\u4e2a\u4e8b\u7269\u3002 struct a { int field1;\u8054\u5408{ \u7ed3\u6784{ int field2; int field3; };\u7ed3\u6784{ int field2; int field3; } \u5b50; };};\u4eba\u4eec\u81ea\u7136\u4f1a\u521b\u5efa#define \u5b8f\u6765\u81ea\u52a8\u521b\u5efa\u6b64\u7ed3\u6784\uff0c\u4ee5\u4fbf\u6240\u6709\u5b57\u6bb5\u5728\u8054\u5408\u5185\u90e8\u7684\u4e24\u4e2a\u7ed3\u6784\u4e4b\u95f4\u4fdd\u6301\u540c\u6b65\u3002\u5426\u5219\u8fd9\u4e2a\u201c\u806a\u660e\u201d\u7684\u8bbe\u7f6e\u662f\u76f8\u5f53\u8106\u5f31\u7684\u3002\n\uff08\u6211\u8ba4\u4e3a\u8fd9\u5728\u73b0\u4ee3 C \u793e\u533a\u4e2d\u53ef\u80fd\u662f\u4f17\u6240\u5468\u77e5\u7684\u4e8b\u60c5\uff0c\u4f46\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6211\u4e0e\u73b0\u4ee3 C \u8131\u8282\uff0c\u5c24\u5176\u662f\u53cd\u5e38\u7684\u73b0\u4ee3 C\u3002\u8fd9\u7edd\u5bf9\u662f\u53cd\u5e38\u7684\u3002\uff09", "note_en": "I&#39;ve done a reasonable amount of programming in C and so I like tothink that I know it reasonably well. But still, every so often Ilearn a new C trick and in the process learn that I didn&#39;t know Cquite as well as I thought. Today&#39;s trick is using C unions to group struct fields together, which I learned about through  this LWNarticle( via).\n Suppose that you have a  struct with a bunch of fields, and youwant to deal with some of them all together at once under a singlename; perhaps you want to conveniently copy them as a block throughstruct assignment. However, you also want to keep simple fieldaccess and for people using your  struct to not have to know thatthese fields in particular are special (among other things, thismight keep the grouping from leaking into your API). The traditionalold school C approach to this is a sub-structure with  #defines ontop:\n struct a { int field1; struct sub { int field_2; int field_3; };};#define field2 sub.field_2#define field2 sub.field_3\n One of the problems with this is the  #defines, which have verymuch fallen out of favour as a way of renaming fields.\n It turns out that modern C lets you do better than this by abusingunions for namespace purposes. What you do is that you embed twoidentical sub- structs inside an anonymous union, with the samefields in each, and give one sub- struct a name and keep the otheranonymous. The anonymous sub-struct inside the anonymous union letsyou access its fields without any additional levels of names. Thenon-anonymous  struct lets you refer to the whole thing by name.\n  struct a { int field1; union { struct { int field2; int field3; }; struct { int field2; int field3; } sub; };};\n  Naturally people create  #define macros to automate creating thisstructure so that all fields stay in sync between the two  structsinside the union. Otherwise this &#34;clever&#34; setup is rather fragile.\n (I think this may be a well known thing in the modern C community,but I&#39;m out of touch with modern C for various reasons, especiallyperverse modern C. This is definitely perverse.)", "posttime": "2021-08-02 00:28:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8054\u5408,unions,\u7ed3\u6784", "title": "\u4e86\u89e3\u60a8\u53ef\u4ee5\u5728 C \u4e2d\u4f7f\u7528\u8054\u5408\u5c06\u4e8b\u7269\u5206\u7ec4\u5230\u547d\u540d\u7a7a\u95f4\u4e2d", "title_en": "Learning that you can use unions in C for grouping things into namespaces", "transed": 1, "url": "https://utcc.utoronto.ca/~cks/space/blog/programming/CUnionsForNamespaces", "via": "", "real_tags": ["\u8054\u5408", "unions", "\u7ed3\u6784"]}, {"category": "", "categoryclass": "", "imagename": "b72492eeee18422f32b791e0440fc08a.png", "infoid": 1071018, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Algolia \u9a71\u52a8\u7684 Hacker News API \u8fd4\u56de\u5d4c\u5957\u7684\u8bc4\u8bba\u7ebf\u7a0b\uff0c\u5982\u4e0b\u6240\u793a\uff1ahttps://hn.algolia.com/api/v1/items/27941108\uff08\u5bf9\u4e8e\u8fd9\u4e2a\u6545\u4e8b\uff1ahttps://news.ycombinator.com/item? id=27941108)```json{ &quot;id&quot;: 27941108, &quot;created_at&quot;: &quot;2021-07-24T14:15:05.000Z&quot;, &quot;type&quot;: &quot;story&quot;, &quot;author&quot;: &quot;edward&quot;, &quot;title&quot; &quot;: &quot;Unix \u57df\u5957\u63a5\u5b57\u7684\u4e50\u8da3&quot;, &quot;url&quot;: &quot;https://simonwillison.net/2021/Jul/13/unix-domain-sockets/&quot;, &quot;children&quot;: [ { &quot;id&quot;: 27942287, &quot; created_at&quot;: &quot;2021-07-24T16:31:18.000Z&quot;, &quot;type&quot;: &quot;comment&quot;, &quot;author&quot;: &quot;DesiLurker&quot;, &quot;text&quot;: &quot;<p>\u4e00\u4e2a\u9c9c\u4e3a\u4eba\u77e5\u7684......\u201d\uff0c\u201c\u5b69\u5b50\u201d\uff1a[] }\uff0c{\u201cid\u201d\uff1a27944615\uff0c\u201ccreated_at\u201d\uff1a\u201c2021-07-24T21\uff1a26\uff1a33.000Z\u201d\uff0c\u201c\u7c7b\u578b\u201d\uff1a\u201c\u8bc4\u8bba\u201d\uff0c\u201c\u4f5c\u8005&quot;: &quot;galaxyLogic&quot;, &quot;text&quot;: &quot;<p>\u6211\u4ece\u7ef4\u57fa\u767e\u79d1\u4e0a\u8bfb\u5230\u8fd9\u4e2a...&quot;, &quot;children&quot;: [ { &quot;id&quot;: 27944746, &quot;created_at&quot;: &quot;2021-07-24T21:49:07.000Z&quot;, &quot;type&quot;: &quot;comment&quot;, &quot;author&quot; \uff1a\u201chughrr\u201d\uff0c\u201c\u6587\u672c\u201d\uff1a\u201c<p>\u662f\u7684\uff0c\u867d\u7136\u6211...&quot;, &quot;children&quot;: [] } ] } ]}```\u6211\u60f3\u628a\u5b83\u538b\u5e73\u6210\u4e00\u4e2a\u9879\u76ee\u6570\u7ec4\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u5c06\u5b83\u53d1\u9001\u5230`sqlite-utils insert`\u3002\u8fd9\u4e2a\u914d\u65b9\u6709\u6548\uff1a` ``curl &#39;https://hn.algolia.com/api/v1/items/27941108&#39; \\ | jq &#39;[recurse(.children[]) | del(.children)]&#39; \\ | sqlite-utils \u63d2\u5165 hn. db items - --pk id```\u8fd9\u91cc\u7684`jq`\u914d\u65b9\u662f\uff1a```jq[recurse(.children[]) | del(.children)]```\u7b2c\u4e00\u4e2a`recurse(.children[]) ` \u9012\u5f52\u904d\u5386 `.children` \u6570\u7ec4\u4e2d\u6240\u6709\u5185\u5bb9\u7684\u5217\u8868\u3002`| del(.children)` \u7136\u540e\u4ece\u8fd4\u56de\u7684\u5bf9\u8c61\u4e2d\u5220\u9664\u8be5\u6570\u7ec4\u3002\u5c06\u5176\u5168\u90e8\u5305\u88c5\u5728 `[ ]` \u4e2d\u786e\u4fdd\u6574\u4f53\u7ed3\u679c\u5c06\u662f\u4e00\u4e2a\u6570\u7ec4\u3002\u5e94\u7528\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u8fd9\u5c06\u8fd4\u56de\uff1a```json[ { &quot;id&quot;: 27941108, &quot;created_at&quot;: &quot;2021-07-24T14:15:05.000Z&quot;, &quot;type&quot;: &quot;story&quot;, &quot;author&quot;: &quot;edward&quot;, &quot;title&quot;: &quot;Fun with Unix domain sockets&quot;, &quot;url&quot;: &quot;https://simonwillison.net/2021/Jul/13/unix-domain-sockets/&quot; }, { &quot;id&quot;: 27942287 , &quot;created_at&quot;: &quot;2021-07-24T16:31:18.000Z&quot;, &quot;type&quot;: &quot;comment&quot;, &quot;author&quot;: &quot;DesiLurker&quot;, &quot;text&quot;: &quot;<p>\u4e00\u4e2a\u9c9c\u4e3a\u4eba\u77e5\u7684...&quot; }, { &quot;id&quot;: 27944615, &quot;created_at&quot;: &quot;2021-07-24T21:26:33.000Z&quot;, &quot;type&quot;: &quot;comment&quot;, &quot;author&quot;: &quot;galaxyLogic&quot;, &quot;\u6587\u672c\u201d\uff1a \u201d<p>\u6211\u4ece\u7ef4\u57fa\u767e\u79d1\u4e0a\u8bfb\u5230\u8fd9\u4e2a...&quot; }, { &quot;id&quot;: 27944746, &quot;created_at&quot;: &quot;2021-07-24T21:49:07.000Z&quot;, &quot;type&quot;: &quot;comment&quot;, &quot;author&quot;: &quot;hughrr&quot; \uff0c \u201c\u6587\u672c\u201d\uff1a \u201d<p>\u662f\u7684\uff0c\u867d\u7136\u6211...&quot; }]```", "note_en": "The Algolia-powered Hacker News API returns nested comment threads that look like this: https://hn.algolia.com/api/v1/items/27941108(For this story: https://news.ycombinator.com/item?id=27941108)```json{    \"id\": 27941108,    \"created_at\": \"2021-07-24T14:15:05.000Z\",    \"type\": \"story\",    \"author\": \"edward\",    \"title\": \"Fun with Unix domain sockets\",    \"url\": \"https://simonwillison.net/2021/Jul/13/unix-domain-sockets/\",    \"children\": [        {            \"id\": 27942287,            \"created_at\": \"2021-07-24T16:31:18.000Z\",            \"type\": \"comment\",            \"author\": \"DesiLurker\",            \"text\": \"<p>one lesser known...\",            \"children\": []        },        {            \"id\": 27944615,            \"created_at\": \"2021-07-24T21:26:33.000Z\",            \"type\": \"comment\",            \"author\": \"galaxyLogic\",            \"text\": \"<p>I read this from Wikipedia...\",            \"children\": [                {                    \"id\": 27944746,                    \"created_at\": \"2021-07-24T21:49:07.000Z\",                    \"type\": \"comment\",                    \"author\": \"hughrr\",                    \"text\": \"<p>Yes although I ...\",                    \"children\": []                }            ]        }    ]}```I wanted to flatten this into an array of items so I could send it to `sqlite-utils insert`. This recipe worked:```curl 'https://hn.algolia.com/api/v1/items/27941108' \\  | jq '[recurse(.children[]) | del(.children)]' \\  | sqlite-utils insert hn.db items - --pk id```The `jq` recipe here is:```jq[recurse(.children[]) | del(.children)]```The first `recurse(.children[])` recurses through a list of everything in a `.children` array.The `| del(.children)` then deletes that array from the returned objects.Wrapping it all in `[ ]` ensures the overall result will be an array.Applied against the above example, this returns:```json[    {        \"id\": 27941108,        \"created_at\": \"2021-07-24T14:15:05.000Z\",        \"type\": \"story\",        \"author\": \"edward\",        \"title\": \"Fun with Unix domain sockets\",        \"url\": \"https://simonwillison.net/2021/Jul/13/unix-domain-sockets/\"    },    {        \"id\": 27942287,        \"created_at\": \"2021-07-24T16:31:18.000Z\",        \"type\": \"comment\",        \"author\": \"DesiLurker\",        \"text\": \"<p>one lesser known...\"    },    {        \"id\": 27944615,        \"created_at\": \"2021-07-24T21:26:33.000Z\",        \"type\": \"comment\",        \"author\": \"galaxyLogic\",        \"text\": \"<p>I read this from Wikipedia...\"    },    {        \"id\": 27944746,        \"created_at\": \"2021-07-24T21:49:07.000Z\",        \"type\": \"comment\",        \"author\": \"hughrr\",        \"text\": \"<p>Yes although I ...\"    }]```", "posttime": "2021-08-02 00:28:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9012\u5f52,objects,quot", "title": "\u7528 Jq \u9012\u5f52\u63d0\u53d6\u5bf9\u8c61", "title_en": "Extracting Objects Recursively with Jq", "transed": 1, "url": "https://til.simonwillison.net/jq/extracting-objects-recursively", "via": "", "real_tags": ["\u9012\u5f52", "objects", "quot"]}, {"category": "", "categoryclass": "", "imagename": "312fb3262c599c67c8cdaf3fd3bd303e.jpg", "infoid": 1071016, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6df1\u7a7a\u5e78\u8fd0\u6210\u50cf\u80fd\u5426\u5c06\u6211 700 \u82f1\u9551\u7684\u94bb\u673a\u53d8\u6210 7,000,000 \u82f1\u9551\u7684\u671b\u8fdc\u955c\uff1f", "note_en": "Can deep space lucky imaging turn my \u00a3700 rig into a \u00a37,000,000 telescope?\ud83d\udc83\ud83c\udffeWe'd love you to join us:Astrobiscuit Discord Server: https://discord.gg/astrob...", "posttime": "2021-08-02 00:27:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6444\u5f71,astrophotography,\u6210\u50cf", "title": "700 \u82f1\u9551 vs. 700 \u4e07\u82f1\u9551\uff1a\u5929\u6587\u6444\u5f71\u5927\u6218", "title_en": "\u00a3700 vs. \u00a37M: Astrophotography Shoot Out", "transed": 1, "url": "https://www.youtube.com/watch?v=4rCyC3_YIME", "via": "", "real_tags": ["\u6444\u5f71", "\u6210\u50cf"]}, {"category": "", "categoryclass": "", "imagename": "ff0287210796737fd34a6056d629fa7a.png", "infoid": 1071015, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7ecf\u5e38\u770b\u5230\u4eba\u4eec\u8bf4\u67d0\u4e9b\u8f6f\u4ef6\u201c\u975e\u5e38\u56fa\u6267\u201d\uff0c\u6216\u8005\u5fae\u8f6f\u503e\u5411\u4e8e\u7f16\u5199\u201c\u65e0\u4e3b\u89c1\u201d\u7684\u6846\u67b6\u3002\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u4ec0\u4e48\uff1f 1 \u5982\u679c\u4e00\u4e2a\u6846\u67b6\u56fa\u6267\u5df1\u89c1\uff0c\u5b83\u4f1a\u9501\u5b9a\u6216\u5f15\u5bfc\u60a8\u8fdb\u5165\u4ed6\u4eec\u7684\u884c\u4e8b\u65b9\u5f0f\u3002\u4f8b\u5982\uff1a\u6709\u4e9b\u4eba\u8ba4\u4e3a\u6a21\u677f\u7cfb\u7edf\u4e0d\u5e94\u8be5\u63d0\u4f9b\u5bf9\u7528\u6237\u5b9a\u4e49\u7684\u65b9\u6cd5\u548c\u51fd\u6570\u7684\u8bbf\u95ee\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7cfb\u7edf\u5bf9\u8fd4\u56de\u539f\u59cb HTML \u4fdd\u6301\u5f00\u653e\u3002\u56e0\u6b64\uff0c\u56fa\u6267\u7684\u6846\u67b6\u5f00\u53d1\u4eba\u5458\u53ea\u5141\u8bb8\u8bbf\u95ee\u6570\u636e\u7ed3\u6784\u3002\u901a\u8fc7\u8bbe\u8ba1\uff0c\u8f6f\u4ef6\u9650\u5236\u5e76\u9f13\u52b1\u8bbe\u8ba1\u5e08\u6309\u7167\u4ed6\u4eec\u7684\u65b9\u5f0f\u505a\u4e8b\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff08\u53d6\u81ea\u4fe1\u53f7\u94fe\u63a5\uff09\u662f\u7ef4\u57fa\u7684\u4f8b\u5b50\u3002 wiki \u7684\u8bbe\u8ba1\u8005\u6709\u5f88\u591a\u610f\u89c1\u3002\u4ed6\u4eec\u8ba4\u4e3a HTML \u5bf9\u4eba\u4eec\u6765\u8bf4\u592a\u590d\u6742\u4e86\uff0c\u6240\u4ee5\u4ed6\u4eec\u60f3\u51fa\u4e86\u4e00\u79cd\u4ed6\u4eec\u8ba4\u4e3a\u66f4\u81ea\u7136\u7684\u65b9\u5f0f\u6765\u66f4\u65b0\u5185\u5bb9\u3002\u4ed6\u4eec\u8fd8\u53d6\u6d88\u4e86\u82b1\u54e8\u7684\u8bbe\u8ba1\uff0c\u56e0\u4e3a\u4ed6\u4eec\u89c9\u5f97\u91cd\u70b9\u5e94\u8be5\u66f4\u591a\u5730\u653e\u5728\u5185\u5bb9\u4e0a\u800c\u4e0d\u662f\u8bbe\u8ba1\u4e0a\u3002\u65e0\u4e3b\u89c1\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u66f4\u50cf\u662f PERL/PHP\u3002\u5b83\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u5e76\u4fe1\u4efb\u5f00\u53d1\u4eba\u5458\u505a\u51fa\u6b63\u786e\u7684\u51b3\u5b9a\uff0c\u5e76\u5c06\u66f4\u591a\u7684\u63a7\u5236\u6743\u4ea4\u7ed9\u4ed6\u4eec\u3002\u6211\u8fd8\u5c06 Microsoft \u7f6e\u4e8e\u65e0\u610f\u89c1\u4e13\u680f\u4e2d\u3002 Microsoft \u6846\u67b6\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u5b83\u662f\u975e\u72ec\u7acb\u7684\uff1a.NET\u3002\u901a\u8fc7\u5f00\u653e CLR \u548c\u89c4\u8303\uff0c\u5b83\u5411\u5404\u79cd\u8bed\u8a00\u548c\u5b9e\u73b0\u98ce\u683c\u5f00\u653e\u3002\n5 \u6211\u4e0d\u4f1a\u8bf4\u201c\u9501\u5b9a\u4f60\u201d\uff0c\u800c\u662f\u8bf4\u5b83\u4e0d\u5bb9\u6613\u504f\u79bb\u201c\u9ec4\u91d1\u201d\u8def\u5f84\u3002\u9ec4\u91d1\u8def\u5f84\u901a\u5e38\u662f\u6700\u4f73\u5b9e\u8df5\uff0c\u5e94\u8be5\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5bf9\u5927\u591a\u6570\u4eba\u6709\u6548\u3002 \u2013 dpan \u6211\u540c\u610f\u9501\u6709\u70b9\u5f3a\uff0c\u4f46\u6211\u4f1a\u901a\u8fc7\u6ce8\u610f\u5230\u8bb8\u591a\u81ea\u4ee5\u4e3a\u662f\u7684\u4ea7\u54c1\u662f\u591a\u4e48\u6210\u529f\u6765\u6d88\u9664\u8fd9\u79cd\u8d1f\u9762\u542b\u4e49\u3002 \u2013 cgp \u4e00\u4e2a\u81ea\u4ee5\u4e3a\u662f\u7684\u6846\u67b6\u662f\u8fd9\u6837\u4e00\u79cd\u8bbe\u8ba1\u7684\uff0c\u5f53\u6846\u67b6\u4ee5\u4e0d\u8fdd\u53cd\u6846\u67b6\u8bbe\u8ba1\u8005\u7684\u5047\u8bbe\u7684\u65b9\u5f0f\u4f7f\u7528\u65f6\uff0c\u5b83\u7684\u7528\u6237\u5c06\u5bf9\u8be5\u6846\u67b6\u4ea7\u751f\u6700\u5c11\u7684\u6469\u64e6\u3002 \u2013 Crippledsmurf \u6211\u540c\u610f altCognito\u3002 .NET \u9f13\u52b1\u5f00\u53d1\u4eba\u5458\u5728 WinForms \u5e94\u7528\u7a0b\u5e8f\u4e2d\u6df7\u5408\u6a21\u578b\u548c\u89c6\u56fe\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u5c06\u4e1a\u52a1\u903b\u8f91\u653e\u5728\u6309\u94ae\u5355\u51fb\u4e8b\u4ef6\u751f\u6210\u7684\u65b9\u6cd5\u4e2d\u53d8\u5f97\u5bb9\u6613\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5fae\u8f6f\u95f4\u63a5\u9f13\u52b1\u77ed\u89c6\u7684\u5f00\u53d1\u4eba\u5458\u5c06\u4ed6\u4eec\u7684\u4ee3\u7801\u9501\u5b9a\u5728\u4ed6\u4eec\u7684\u6846\u67b6\u4e2d\u3002\u66f4\u7b80\u6d01\u7684\u8bbe\u8ba1\u5c06\u5f3a\u5236\u6216\u9f13\u52b1\u66f4\u597d\u7684\u5b9e\u8df5\uff0c\u4f8b\u5982\u5f3a\u5236\u6309\u94ae\u5355\u51fb\u65b9\u6cd5\u5728\u5355\u72ec\u7684\u6a21\u5757\u4e2d\u4f7f\u7528\u6a21\u578b\u903b\u8f91\u8c03\u7528\u7b2c\u4e8c\u4e2a\u51fd\u6570\u3002\u5e76\u4e0d\u662f\u5728 .NET \u4e2d\u65e0\u6cd5\u5b9e\u73b0\u7b80\u6d01\u7684\u8bbe\u8ba1\uff0c\u53ea\u662f\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u9f13\u52b1\u8fd9\u6837\u505a\u3002 \u2013 Jared Updike \u6709\u610f\u89c1\u7684\u8f6f\u4ef6\u610f\u5473\u7740\u57fa\u672c\u4e0a\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff08\u6b63\u786e\u7684\u65b9\u6cd5\u2122\uff09\u6765\u505a\u4e8b\uff0c\u800c\u5c1d\u8bd5\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u505a\u4e8b\u5c06\u662f\u56f0\u96be\u548c\u4ee4\u4eba\u6cae\u4e27\u7684\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4ee5\u6b63\u786e\u200b\u200b\u7684\u65b9\u5f0f\u505a\u4e8b\u2122 \u53ef\u4ee5\u4f7f\u8f6f\u4ef6\u5f00\u53d1\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u56e0\u4e3a\u60a8\u5fc5\u987b\u505a\u51fa\u7684\u51b3\u5b9a\u6570\u91cf\u51cf\u5c11\u4e86\uff0c\u8f6f\u4ef6\u8bbe\u8ba1\u4eba\u5458\u4e13\u6ce8\u4e8e\u4f7f\u8f6f\u4ef6\u5de5\u4f5c\u7684\u80fd\u529b\u589e\u52a0\u4e86\u3002\u5982\u679c\u505a\u5f97\u597d\uff0c\u5982\u679c\u60a8\u7684\u95ee\u9898\u5f88\u597d\u5730\u6620\u5c04\u5230\u89e3\u51b3\u65b9\u6848\u4e0a\uff0c\u5219\u6709\u610f\u89c1\u7684\u8f6f\u4ef6\u53ef\u4ee5\u5f88\u597d\u5730\u4f7f\u7528\u3002\u89e3\u51b3\u90a3\u4e9b\u672a\u6620\u5c04\u5230\u6240\u63d0\u4f9b\u5de5\u5177\u7684\u95ee\u9898\u90e8\u5206\u53ef\u80fd\u4f1a\u5f88\u75db\u82e6\u3002\u8fd9\u91cc\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f Ruby on Rails\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u65e0\u610f\u89c1\u8f6f\u4ef6\u4e3a\u7528\u6237\uff08\u5f00\u53d1\u4eba\u5458\uff09\u7559\u4e0b\u4e86\u5f88\u5927\u7684\u7075\u6d3b\u6027\u3002\u5b83\u5e76\u6ca1\u6709\u7981\u6b62\u4e00\u79cd\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u63d0\u4f9b\u4e86\u53ef\u7528\u4e8e\u4ee5\u591a\u79cd\u65b9\u5f0f\u89e3\u51b3\u95ee\u9898\u7684\u7075\u6d3b\u5de5\u5177\u3002\u8fd9\u6837\u505a\u7684\u7f3a\u70b9\u53ef\u80fd\u662f\uff0c\u7531\u4e8e\u5de5\u5177\u975e\u5e38\u7075\u6d3b\uff0c\u56e0\u6b64\u5f00\u53d1\u4efb\u4f55\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u76f8\u5bf9\u56f0\u96be\u3002\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u5fc5\u987b\u7531\u7528\u6237\uff08\u5f00\u53d1\u4eba\u5458\uff09\u624b\u52a8\u7f16\u7801\uff0c\u56e0\u4e3a\u8be5\u6846\u67b6\u6ca1\u6709\u63d0\u4f9b\u8db3\u591f\u7684\u5e2e\u52a9\u3002\u60a8\u8fd8\u5fc5\u987b\u66f4\u591a\u5730\u8003\u8651\u5982\u4f55\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\uff0c\u4e0e\u8d2d\u4e70\u67d0\u4e9b\u56fa\u6267\u5df1\u89c1\u7684\u8f6f\u4ef6\u76f8\u6bd4\uff0c\u5e73\u5eb8\u7684\u5f00\u53d1\u4eba\u5458\u6700\u7ec8\u53ef\u80fd\u4f1a\u5f97\u5230\u66f4\u7cdf\u7cd5\u7684\u89e3\u51b3\u65b9\u6848\u3002 PERL \u53ef\u80fd\u662f\u65e0\u610f\u89c1\u8f6f\u4ef6\u7684\u5178\u578b\u4f8b\u5b50\u3002\u6211\u7684\u7406\u60f3\u662f\u4e00\u4e2a\u6ca1\u6709\u610f\u89c1\u7684\u6846\u67b6\uff0c\u4f46\u6709\u5f88\u5f3a\u7684\u7ea6\u5b9a\u3002\u6211\u4f1a\u628a ASP.NET MVC \u653e\u5728\u8fd9\u4e2a\u7c7b\u522b\u4e2d\u3002\u5b9e\u9645\u4e0a\uff0c\u6240\u6709\u8f6f\u4ef6\u90fd\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u81ea\u4ee5\u4e3a\u662f\uff08\u5c3d\u7ba1\u53ef\u80fd\u4e0d\u662f PERL\uff09\u3002 MVC \u5728\u9009\u62e9\u6a21\u578b\u65b9\u9762\u6709\u5f88\u5f3a\u7684\u7ea6\u5b9a\uff0c\u4f46\u63d0\u4f9b\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e9b\u7ea6\u5b9a\u4e2d\u7684\u95ee\u9898\u3002\u5176\u4e2d\u4e00\u4e9b\u65b9\u6cd5\u751a\u81f3\u53ef\u80fd\u6253\u7834\u6a21\u578b\u3002\u7136\u800c\uff0c\u6b63\u786e\u5730\u4f7f\u7528\uff0c\u6309\u7167\u5728\u8fd9\u6837\u4e00\u4e2a\u6846\u67b6\u4e2d\u5f00\u53d1\u7684\u60ef\u4f8b\u53ef\u4ee5\u662f\u4e00\u79cd\u771f\u6b63\u7684\u4e50\u8da3\u3002\n0 \u5b83\u57fa\u672c\u4e0a\u662f\u6309\u7167\u4f5c\u8005\u8ba4\u4e3a\u5e94\u8be5\u5de5\u4f5c\u7684\u65b9\u5f0f\u5de5\u4f5c\u7684\u8f6f\u4ef6\uff0c\u800c\u4e0d\u662f\u8bd5\u56fe\u53d6\u60a6\u6240\u6709\u4eba\u3002\u8fd9\u610f\u5473\u7740\u5f88\u591a\u4eba\u4e0d\u4f1a\u559c\u6b22\u5b83\uff0c\u4f46\u559c\u6b22\u5b83\u7684\u4eba\u4f1a\u559c\u6b22\u5b83\u3002 Rails \u53ef\u80fd\u662f\u81ea\u4ee5\u4e3a\u662f\u7684\u6846\u67b6\u7684\u5178\u578b\u4f8b\u5b50\uff1a\u4f60\u6309\u7167\u4ed6\u4eec\u7684\u65b9\u5f0f\u505a\u4e8b\uff0c\u4e00\u5207\u90fd\u5f88\u987a\u5229\u3002\u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\u4f60\u4f1a\u5f88\u75db\u82e6\u3002\u4f46\u662f\u6ca1\u5173\u7cfb\u2014\u2014\u5982\u679c\u4f60\u4e0d\u60f3\u6309\u7167\u4ed6\u4eec\u7684\u65b9\u5f0f\u505a\u4e8b\uff0c\u4f60\u5c31\u4e0d\u60f3\u4f7f\u7528 Rails\u3002 1 \u6211\u540c\u610f\u8fd9\u4e00\u70b9.... \u6211\u6709\u4e00\u4e2aopiniated \u8f6f\u4ef6...\u5b83\u7684opinied \u56e0\u4e3a\u5b83\u662f\u6211\u7684\u5c0f\u5ba0\u7269\u9879\u76ee...\u6211\u4e0d\u77e5\u9053\u5b83\u4f1a\u88ab\u5e7f\u6cdb\u91c7\u7528...\u6709\u4e9b\u4eba\u559c\u6b22\u5b83\uff0c\u5176\u4ed6\u4eba\u62b1\u6028\u3002 .. \u4f46\u4ed6\u4eec\u90fd\u660e\u767d\u8fd9\u662f\u6211\u7684\u5ba0\u7269\u9879\u76ee - TimothyP \u4e3a\u4e86\u5e73\u8861\u8d77\u89c1\uff0c\u6211\u5c06\u63d0\u4f9b\u4e00\u4e2a\uff08\u76f8\u5f53\u81ea\u4ee5\u4e3a\u662f\u7684\uff09\u63cf\u8ff0\uff0c\u5b83\u66f4\u9002\u5408\u81ea\u4ee5\u4e3a\u662f\u7684\u65b9\u6cd5\uff08\u4e0e\u5176\u4ed6\u4e00\u4e9b\u7b54\u6848\u76f8\u53cd\uff09\u3002\u81ea\u4ee5\u4e3a\u662f\u7684\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u6761\u201c\u9ec4\u91d1\u8def\u5f84\u201d\uff0c\u8fd9\u5e94\u8be5\u662f\u5927\u591a\u6570\u4eba\u548c\u5927\u591a\u6570\u573a\u666f\uff08\u5728\u4f5c\u8005\u773c\u4e2d\uff09\u7684\u6700\u4f73\u5b9e\u8df5\u3002\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u9501\u5b9a\u3002\u8fd9\u610f\u5473\u7740\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u52aa\u529b\u624d\u80fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u505a\u4e8b\u3002\n\u4e0d\u90a3\u4e48\u81ea\u4ee5\u4e3a\u662f\u7684\u6846\u67b6\u63d0\u4f9b\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u5e76\u7531\u60a8\u51b3\u5b9a\u3002\u81ea\u4ee5\u4e3a\u662f\u7684\u6846\u67b6\u901a\u5e38\u4f1a\u51cf\u8f7b\u5f00\u53d1\u4eba\u5458\u91cd\u65b0\u53d1\u660e\u8f6e\u5b50\u6216\u4e00\u904d\u53c8\u4e00\u904d\u5730\u91cd\u65b0\u601d\u8003\u540c\u4e00\u95ee\u9898\u7684\u8d1f\u62c5\uff0c\u4ece\u800c\u6709\u52a9\u4e8e\u4e13\u6ce8\u4e8e\u624b\u5934\u7684\u771f\u6b63\u95ee\u9898\u3002\u5728\u5f00\u6e90\u4e16\u754c\u4e2d\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u8bb8\u591a\u56fa\u6267\u5df1\u89c1\u4f46\u76f8\u4e92\u7ade\u4e89\u7684\u6846\u67b6\uff0c\u56e0\u6b64\u60a8\u4ecd\u6709\u9009\u62e9\u7684\u4f59\u5730\u3002\u4f60\u53ea\u9700\u8981\u9009\u62e9\u4f60\u81ea\u5df1\u7684\u9ec4\u91d1\u4e4b\u8def\u3002 1 +1\uff0c\u611f\u89c9\u5c31\u50cf\u4f60\u63d0\u5230\u7684\u4f01\u4e1a\u5e94\u7528\u7a0b\u5e8f\u3002 Siebel \u6709\u4e00\u6761\u4e0d\u5bb9\u6613\u6253\u7834\u7684\u9ec4\u91d1\u4e4b\u8def\uff0c\u5c3d\u7ba1\u5b83\u53ef\u4ee5\u505a\u5230\uff0c\u800c\u4e14\u6211\u5728\u4e00\u4e2a\u5076\u5c14\u4f1a\u8fd9\u6837\u505a\u7684\u56e2\u961f\u4e2d\u5de5\u4f5c\u3002\u5b83\u53ef\u4ee5\u52a0\u5feb\u5f00\u53d1\u8fdb\u5ea6\uff0c\u56e0\u4e3a\u60a8\u4e0d\u5fc5\u4e00\u76f4\u5f00\u53d1 UI \u5143\u7d20\u3001\u6570\u636e\u5b58\u50a8\u548c\u4e1a\u52a1\u903b\u8f91\u3002 \u2013 J. Polfer Opinionated \u8f6f\u4ef6\u7684\u6784\u5efa\u548c\u8bbe\u8ba1\u65b9\u5f0f\u4f7f\u5f97\u4ee5\u67d0\u79cd\u65b9\u5f0f\u505a\u4e8b\u53d8\u5f97\u5bb9\u6613\u3002\u5b83\u6bd4\u5176\u4ed6\u8bbe\u8ba1\u6a21\u5f0f\u66f4\u504f\u7231\u67d0\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u5f88\u96be\u504f\u79bb\u5176\u5f00\u53d1\u6240\u9488\u5bf9\u7684\u8f6f\u4ef6\u5f00\u53d1\u98ce\u683c\u3002\u53e6\u4e00\u79cd\u8bf4\u6cd5\u662f\u5b83\u652f\u6301\u201c\u7ea6\u5b9a\u4f18\u4e8e\u914d\u7f6e\u201d\u3002\u5373\u914d\u7f6e\u9009\u9879\u975e\u5e38\u6709\u9650\uff0c\u56e0\u4e3a\u8f6f\u4ef6\u627f\u62c5\u4e86\u8bb8\u591a\u914d\u7f6e\u65b9\u9762\u3002\u4e00\u65e6\u7406\u89e3\u4e86\u5047\u8bbe\uff0c\u6709\u610f\u89c1\u7684\u8f6f\u4ef6\u901a\u5e38\u4f1a\u66f4\u5feb\u5730\u638c\u63e1\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6ca1\u6709\u610f\u89c1\u7684\u8f6f\u4ef6\u51e0\u4e4e\u4e0d\u505a\u4efb\u4f55\u5047\u8bbe\u3002\u56e0\u6b64\uff0c\u4e0d\u53d7\u7ea6\u675f\u7684\u8f6f\u4ef6/\u8f6f\u4ef6\u5f00\u53d1\u6846\u67b6\u5f80\u5f80\u6709\u5f88\u591a\u914d\u7f6e\u9009\u9879\u3002\u5f00\u53d1\u4eba\u5458\u901a\u5e38\u5fc5\u987b\u5c31\u8f6f\u4ef6\u7684\u5404\u4e2a\u65b9\u9762\u505a\u51fa\u5f88\u591a\u51b3\u5b9a\u3002\u901a\u5e38\uff0c\u5f00\u53d1\u4e86\u5404\u79cd\u5de5\u5177\u4ee5\u4fbf\u66f4\u8f7b\u677e\u5730\u5904\u7406\u8fd9\u4e9b\u5de8\u5927\u7684\u9009\u62e9\u3002\u4f8b\u5982\uff0c\u7528\u4e8e .NET \u7684 Visual Studio .NET\u3001\u7528\u4e8e Java \u7684 Eclipse IDE \u7b49\u3002\u4e0e\u56fa\u6267\u5df1\u89c1\u7684\u8f6f\u4ef6\u76f8\u6bd4\uff0c\u975e\u4e3b\u89c1\u7684\u8f6f\u4ef6\u901a\u5e38\u9700\u8981\u66f4\u957f\u7684\u65f6\u95f4\u6765\u638c\u63e1\u3002\u81ea\u4ee5\u4e3a\u662f\uff1a\u4f8b\u5982Ruby on Rails\u3002\u6709\u4e00\u79cd\u7279\u522b\u53d7\u6b22\u8fce\u7684\u505a\u4e8b\u65b9\u5f0f\uff0c\u4f60\u4f1a\u5728\u8fd9\u79cd\u65b9\u5f0f\u4e0b\u83b7\u5f97\u5f88\u591a\u652f\u6301\u3002\u4ee5\u5176\u4ed6\u65b9\u5f0f\u505a\u4e8b\u5f88\u56f0\u96be\uff0c\u6216\u8005\u5bf9\u4e8e\u67d0\u4e9b\u7cfb\u7edf\u6765\u8bf4\u662f\u4e0d\u53ef\u80fd\u7684\uff08\u60f3\u5230 Cassandra\uff09\u3002\n\u4e0d\u81ea\u4ee5\u4e3a\u662f\uff1a\u4f8b\u5982 Perl 5\u3002\u4f60\u53ef\u4ee5\u505a\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u4e8b\u60c5\uff0c\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u65b9\u5f0f\uff0c\u4efb\u4f55\u98ce\u683c\u3002\u6240\u6709\u6837\u5f0f\u90fd\u540c\u6837\u5f00\u653e\u3001\u6709\u6548\u548c\u53d7\u652f\u6301\u3002\u5f88\u591a\u4eba\u90fd\u5c06 ASP.NET MVC \u79f0\u4e3a\u201c\u65e0\u4e3b\u89c1\u201d\u7684\u6846\u67b6\uff0c\u6211\u53ea\u662f\u60f3\u5bf9\u6b64\u53d1\u8868\u4e00\u4e9b\u60f3\u6cd5\u3002\u786e\u5b9e\uff0cASP.NET MVC \u5e76\u6ca1\u6709\u8981\u6c42\u592a\u591a\uff1b\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u6301\u4e45\u5316\u89e3\u51b3\u65b9\u6848\uff0c\u65e0\u8bba\u662f Linq-to-SQL\u3001ADO.NET \u5b9e\u4f53\u3001NHibernate \u7b49\u3002\u53e6\u4e00\u65b9\u9762\uff0cMVC \u6846\u67b6\u786e\u5b9e\u503e\u5411\u4e8e\u201c\u7ea6\u5b9a\u4f18\u4e8e\u914d\u7f6e\u201d\uff0c\u5f15\u7528 Phil Haack \u7684\u8bdd\u5f3a\u70c8\u5efa\u8bae\u9075\u5faa\u9884\u5b9a\u4e49\u7684\u6a21\u5f0f\u6765\u5b9a\u4f4d\u63a7\u5236\u5668\u3001\u89c6\u56fe\u3001\u6a21\u578b\u548c\u5176\u4ed6\u4ee3\u7801\u3002\u5c3d\u7ba1\u60a8\u53ef\u4ee5\u6539\u53d8\u8fd9\u79cd\u884c\u4e3a\uff0c\u4f46\u987a\u6d41\u800c\u4e0b\u66f4\u5bb9\u6613\uff0c\u800c\u4e14\u5bf9\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u8fd9\u6837\u505a\u6ca1\u6709\u95ee\u9898\u3002\u56f4\u7ed5 ASP.NET MVC \u7684\u8fd8\u6709\u5f88\u591a\u56fa\u6267\u5df1\u89c1\u7684\u4eba\uff0c\u6211\u53d1\u73b0\u8fd9\u5bfc\u81f4\u4e86\u5f88\u591a\u6709\u504f\u89c1\u7684\u6559\u7a0b\uff0c\u8fd9\u4e9b\u6559\u7a0b\u575a\u6301\u8981\u6db5\u76d6\uff0c\u4f8b\u5982\u5355\u5143\u6d4b\u8bd5\u548c\u4f9d\u8d56\u6ce8\u5165\uff1b\u6211\u5b8c\u5168\u8d5e\u6210\u826f\u597d\u7684\u6d4b\u8bd5\u548c\u5173\u6ce8\u70b9\u5206\u79bb\uff0c\u4f46\u6211\u786e\u5b9e\u8ba4\u4e3a\u8fd9\u4e9b\u4e3b\u9898\u88ab\u63a8\u5230\u4e86\u5589\u5499\u91cc\uff0c\u901a\u5e38\u5728\u6db5\u76d6\u66f4\u6709\u7528\u7684\u57fa\u7840\u77e5\u8bc6\u4e4b\u524d\u3002\u518d\u6b21\uff0c\u6211\u5fc5\u987b\u627f\u8ba4\uff0c\u5728\u8fd9\u4e9b\u9886\u57df\u4e2d\uff0c\u6846\u67b6\u672c\u8eab\u5b8c\u5168\u53ef\u4ee5\u91c7\u7528\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u5355\u5143\u6d4b\u8bd5\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u53ca\u60a8\u60f3\u8981\u4f7f\u7528\u7684\u4efb\u4f55\u4f9d\u8d56\u6ce8\u5165\u548c\u6a21\u62df\u6846\u67b6\uff0c\u6240\u4ee5\u6211\u60f3\u8fd9\u63d0\u4f9b\u4e86\u53e6\u4e00\u4e2a\u4f8b\u5b50\u7075\u6d3b\u6027\uff0c\u5373\u4f7f\u5728\u5355\u5143\u6d4b\u8bd5\u7b49\u7684\u201c\u5723\u7ecf\u62a8\u51fb\u201d\u4e2d\u4e5f\u662f\u5982\u6b64\u3002\u5b83\u662f\u6846\u67b6\u4e2d\u5b9e\u65bd\u7684\u7ea6\u5b9a\u6570\u91cf\u548c\u5df2\u505a\u51fa\u7684\u51b3\u5b9a\u6570\u91cf\u3002\n\u4f8b\u5982\uff0c\u5982\u679c\u6709 5 \u79cd\uff08\u6216\u66f4\u591a\uff09\u4e0d\u540c\u7684\u65b9\u5f0f\u5c06\u8868\u5355\u6570\u636e\u63d0\u4ea4\u7ed9\u63a7\u5236\u5668\u64cd\u4f5c\uff08\u5728 ASP.NET MVC \u4e2d\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff09\uff0c\u5219\u8be5\u6846\u67b6\u4f3c\u4e4e\u975e\u5e38\u201c\u65e0\u4e3b\u89c1\u201d- \u51b3\u5b9a\u4e86\u7ed9\u4f60\uff01\u4f46\u662f\uff0c\u5982\u679c\u6846\u67b6\u4ec5\u542f\u7528\uff08\u901a\u8fc7\u76f4\u63a5\u7981\u7528\u5176\u4ed6\u65b9\u5f0f\uff0c\u6216\u901a\u8fc7\u5f3a\u70c8\u9f13\u52b1\uff09\u4ec5\u4e00\u79cd\u65b9\u5f0f\u6765\u505a\u90a3\u4ef6\u4e8b\uff08Fubu MVC \u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff09\uff0c\u60a8\u53ef\u4ee5\u8bf4\u8be5\u51b3\u5b9a\u5df2\u7531\u6846\u67b6\u505a\u51fa\uff0c\u4ece\u800c\u4f7f\u6846\u67b6\u81ea\u4ee5\u4e3a\u662f\u3002\u60a8\u73b0\u5728\u4f1a\u7ecf\u5e38\u770b\u5230\u7684\u793a\u4f8b\u662f ASP.NET MVC \u6846\u67b6\u3002\u5b83\u5177\u6709\u60ca\u4eba\u7684\u53ef\u6269\u5c55\u6027\uff0c\u4f46\u8fd9\u5728\u67d0\u4e9b\u65b9\u9762\u662f\u5b83\u7684\u7f3a\u70b9\uff0c\u5b83\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\u3002\u60f3\u505a\u6570\u636e\u8bbf\u95ee\uff1f\u4f60\u5fc5\u987b\u81ea\u5df1\u5199\u3002\u60f3\u8981\u4e00\u4e9b AJAX \u5417\uff1f\u540c\u4e0a\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5b83\u662f\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\uff0c\u5982\u679c\u4f60\u5728\u5b83\u7684\u57fa\u7840\u4e0a\u6784\u5efa\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u53d8\u6210\u4e00\u4e2a\u56fa\u6267\u5df1\u89c1\u7684\u6846\u67b6\u3002\u8fd9\u5c31\u662f MVCContrib \u4e4b\u7c7b\u7684\u5de5\u4f5c\uff0c\u5b83\u4eec\u4e3a\u60a8\u63d0\u4f9b\u4e86\u7279\u5b9a\u7684\u505a\u4e8b\u65b9\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u5fc5\u987b\u7f16\u5199\u66f4\u5c11\u7684\u4ee3\u7801\u3002\u8fd9\u786e\u5b9e\u610f\u5473\u7740\uff0c\u5982\u679c\u60a8\u60f3\u6253\u7834\u8fd9\u79cd\u89c2\u70b9\uff0c\u901a\u5e38\u6bd4\u4f7f\u7528\u9999\u8349\u7248\u672c\u6709\u66f4\u591a\u7684\u5de5\u4f5c\u8981\u505a\u3002\u4e0d\u8fc7\uff0c\u8fd9\u662f\u4e00\u4e2a 80/20 \u7684\u573a\u666f\u3002\u5982\u679c\u4f60\u6b63\u786e\u5730\u9009\u62e9\u4e86\u4f60\u7684\u81ea\u4ee5\u4e3a\u662f\u7684\u6846\u67b6\uff0c\u4f60\u53ea\u4f1a\u60f3\u5728 20% \u7684\u65f6\u95f4\u91cc\u6253\u7834\u610f\u89c1\uff0c\u800c\u5728\u5176\u4ed6 80% \u7684\u65f6\u95f4\u91cc\u4f60\u4f1a\u975e\u5e38\u9ad8\u6548\u3002 1 ASP.NET MVC \u4f3c\u4e4e\u5f88\u81ea\u7136\u5730\u9002\u5408 ASP.NET AJAX \u6846\u67b6\uff0c\u751a\u81f3\u5305\u62ec\u5bf9\u8be5\u5e93\u7684\u7279\u5b9a\u4e8e MVC \u7684\u8865\u5145\uff0c\u6240\u4ee5\u6211\u4e0d\u540c\u610f Ajax \u5b9e\u73b0\u7684\u9009\u62e9\u662f\u5b8c\u5168\u516c\u6b63\u7684\u3002\u6b64\u5916\uff0c\u8be5\u5e93\u5e76\u6ca1\u6709\u7279\u522b\u8981\u6c42\u751a\u81f3\u63a8\u8350 jQuery \u7684 ue\uff0c\u4f46\u5b83\u786e\u5b9e\u6346\u7ed1\u4e86\u5b83\uff0c\u5728\u5634\u91cc\u5077\u5077\u5730\u671d\u90a3\u4e2a\u65b9\u5411\u793a\u610f\uff0c\u201c\u770b\u770b\u8fd9\u4e2a\u201d\u3002 \u2013 Rob \u4e0d\u662f\u60a8\u8981\u627e\u7684\u7b54\u6848\uff1f\u6d4f\u89c8\u5176\u4ed6\u6807\u8bb0\u7684\u95ee\u9898\u6216\u63d0\u51fa\u60a8\u81ea\u5df1\u7684\u95ee\u9898\u3002", "note_en": "I often see people saying that certain software is &#34;very opinionated&#34; or that Microsoft tends to write &#34;un-opinionated&#34; frameworks. What does this actually mean?\n  1\n    If a framework is opinionated, it lock or guides you into their way of doing things.\n For example: some people believe that a template system shouldn&#39;t provide access to user defined methods and functions as it leaves the system open to returning raw HTML. So an opinionated framework developer only allows access to data structures. By design, the software is limiting and encourages the designer into doing things their way.\n Another example ( taken from the signals link) is that of  wiki. The designers of wiki had a lot of opinions. They thought HTML was too complicated for people to write, so they came up with what they felt was a more natural way to update content. They also stripped it of fancy design because they felt the focus ought to be more on content than design.\n  Un-opinionated software design is more like PERL/PHP. It allows the developer and trusts the developer to make the right decisions and puts more control in their hands.\n I would also place Microsoft in the non-opinionated column. A good example of a Microsoft framework which is un-opininated:  .NET. By opening the CLR and the specs, it opened it to all sorts of languages and styles of implementations.\n  5  I wouldn&#39;t say &#34;locks you&#34;, rather it doesn&#39;t make it easy to diverge from the &#34;golden&#34; path. The golden path is usually the best practice, something that should work for most of the people most of the time.\r \r\u2013\u00a0 dpan\n  I agree locks is a bit strong, but I&#39;d take away that negative connotation by noting how successful many opinionated products are.\r \r\u2013\u00a0 cgp\n    An opinionated framework is one which is designed in such a wayy that it&#39;s users will experience the least frinction with that framework when the framework is used in a way that does not violate the assumptions made by the framework designer.\r \r\u2013\u00a0 Crippledsmurf\n  I agree with altCognito. .NET  encourages the developer to mix Model and View in WinForms apps by making it brain-dead easy to put business logic in methods generated by the button click event, for example. In this way, Microsoft indirectly encourages short-sighted developers to lock their code in to their frameworks. A cleaner design would enforce or encourage better practices, like forcing the button click method to call a second function with Model logic, in a separate module. Not that clean design can&#39;t be achieved in .NET, it&#39;s just not encouraged by default.\r \r\u2013\u00a0 Jared Updike\n      Opinionated software means that there is basically one way (the  right way\u2122) to do things and trying to do it differently will be difficult and frustrating. On the other hand, doing things the  right way\u2122 can make it very easy to develop with the software as the number of decisions that you have to make is reduced and the ability of the software designers to concentrate on making the software work is increased. Opinionated software can be great to use, if done well, if your problem maps onto the solution nicely. It can be a real pain to solve those parts of your problem that don&#39;t map onto the tools provided. An example here would be Ruby on Rails.\n Non-opinionated software, on the other hand, leaves lots of flexibility to the user (developer). It doesn&#39;t proscribe one method of solving a problem, but provides flexible tools that can be used to solve the problem in many ways. The downside of this can be that because the tools are so flexible, it may be relatively hard to develop any solution. Much more of the solution may have to be hand-coded by the user (developer) because the framework doesn&#39;t provide enough help. You also have to think much more about how to provide a solution and mediocre developers may end up with poorer solutions than if they had bought into some opinionated software. PERL is probably the classic example of non-opinionated software.\n My ideal is a non-opinionated framework, but one with strong conventions. I would put ASP.NET MVC in this category. In reality all software is opinionated to some extent (though perhaps not PERL). MVC has strong conventions in its choice of model but offers many different ways to solve problems within those conventions. Some of those ways may even break the model. Used correctly, however, in accordance with the conventions developing in such a framework can be a real joy.\n  0\n    It&#39;s basically software that works the way its authors think it should work, instead of trying to please everybody. That means a lot of people will not like it, but the ones that do will love it.\n Rails is probably the canonical example of an opinionated framework: you do things their way, and everything is smooth. If you don&#39;t, you&#39;re in for some pain. But that&#39;s OK -- if you don&#39;t want to do things their way, you don&#39;t want to use Rails.\n  1  I agree with this.... I have one piece of opiniated software... and it&#39;s opiniated because it&#39;s my little pet project... I had no idea it would be widely adopted... some love it, others complain... but they all understand it&#39;s my pet project\r \r\u2013\u00a0 TimothyP\n      For balance&#39;s sake I will provide a (rather opinionated) description that is more favourable to the opinionated approach (in contrast to some of the other answers).\n Opinionated frameworks provide a &#34;golden path&#34;, which is supposed to be the best practice for most people and most scenarios (in the eyes of the authors).\n This however doesn&#39;t necessarily mean lock-in. It means that it may require some extra effort to do things differently.\n Less opinionated frameworks provide a number of different options and leave it up to you to decide.\n Opinionated frameworks usually remove the burden from developer to reinvent the wheel or rethink the same problem again and again and thus help focus on the real problem at hand.\n In the open-source world you can find many opinionated yet competing frameworks, so you still have a choice. You just have to choose your own golden path.\n  1  +1, Feels like your mentioning enterprise apps. Siebel has a golden path that is not easily broken, although it can be done and I worked on a team that did occasionally. It can make development move along quicker as you don&#39;t have to develop UI elements, data storage, and business logic all the time.\r \r\u2013\u00a0 J. Polfer\n    Opinionated software is built and designed in such a way that it makes it easy to do things in a certain way. It favors certain design patterns more than others. In the process it makes it difficult to deviate from the style of software development for which it was developed. Another way of putting it is that it favors &#34;Convention over configuration&#34;. i.e. The configuration options are very limited as the software assumes many of the configuration aspects. Opinionated software usually is quicker to master once the assumptions are understood.\n Unopinionated software on the other hand makes few assumptions. And as a result, softwares/software development frameworks that are unopinionated often tend to have a lot of configuration options. A developer typically has to make a lot of decisions regarding various aspects of the software. Often, various tools are developed so as to make dealing with these enormous options easier. e.g. Visual Studio .NET for .NET, Eclipse IDE for Java etc. Unopinionated software typically takes longer to master than opinionated software.\n    Opinionated: e.g.  Ruby on Rails. There is one particularly preferred way to do things, and you get a lot of support in doing things that way. Doing things other ways is hard, or for some systems impossible (Cassandra comes to mind).\n Un-opinionated: e.g.  Perl 5. You can do anything you like, any way you like, in any style. All styles are equally open, valid and supported.\n    A lot of people are referencing ASP.NET MVC as an &#34;unopinionated&#34; framework, and I just wanted to weigh in with a couple of thoughts on that.\n It&#39;s true that ASP.NET MVC doesn&#39;t mandate too much; you can use whatever persistence solution you like, be it Linq-to-SQL, ADO.NET Entities, NHibernate, etc.\n On the flip side, the MVC framework does tend to favour &#34;convention over configuration&#34;, to quote Phil Haack, which heavily suggests following the pre-defined pattern for locating controllers, views, models and other code. Although you can alter this behaviour, it&#39;s easier to swim with the current, and for most people, there&#39;s no problem doing that.\n Also surrounding ASP.NET MVC are a lot of opinionated people, which I find leads to a lot of biased tutorials which insist upon covering, e.g. unit testing and dependency injection; I&#39;m all for good testing and separation of concerns, but I do perceive that such topics are shoved down one&#39;s throat a little, often ahead of covering more useful basics.\n There again, I do have to concede that within those areas, the framework itself is completely open to adopting whatever unit testing solution you want, as well as whatever dependency injection and mocking frameworks you want to use, so I guess that provides another example of flexibility, even within the &#34;bible bashing&#34; of unit testing, etc. that seems to be going on.\n    It&#39;s the amount of conventions implemented in a framwork and the number of decision that have been taken.\n If, for instance, there are 5 (or more) different ways to submit form data to a controller action (which is the case in ASP.NET MVC), the framework seems to be pretty &#34;un-opinionated&#34; - the decision is up to you!\n If, however, the framework enables (either through directly disabling other ways, or by strongly encouraging it) only one way of doing that thing (which is the case with Fubu MVC), you could say that the decision has been taken by the framework, thus making the framework opinionated.\n    The example you will see a lot at the moment is the ASP.NET MVC framework. It is amazingly extensible but that is its downfall in some respects, there isn&#39;t any meat to it. Want to do data access? You&#39;ll have to write that yourself. Want some AJAX going on? Ditto.\n However, as it is highly extensible, if you build upon it you can turn it into an opinionated framework. This is what the likes of  MVCContrib do, they give you specific methods of doing things which means you have to write less code.\n This does mean that if you want to break from the opinion there is often more work to do than if you were working on the vanilla version. This is an 80/20 scenario though. If you chose your opinionated framework correctly you will only want to break from the opinions 20% of the time and you&#39;ll be highly productive the other 80% of the time.\n  1  ASP.NET MVC seems to naturally fit with the ASP.NET AJAX framework, and even includes MVC-specific additions to that library, so I&#39;d disagree that the choice of Ajax implementation is entirely unbiased. Also, the library doesn&#39;t specifically mandate or even recommend the ue of jQuery, but it does bundle it, gesturing furtively in that direction while mouthing, &#34;look at this&#34;.\r \r\u2013\u00a0 Rob\n  Not the answer you&#39;re looking for? Browse other questions tagged       or  ask your own question.", "posttime": "2021-08-02 00:26:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,\u81ea\u4ee5\u4e3a\u662f,opinionated,\u6846\u67b6", "title": "\u4ec0\u4e48\u662f\u81ea\u4ee5\u4e3a\u662f\u7684\u8f6f\u4ef6\uff1f", "title_en": "What Is Opinionated Software?", "transed": 1, "url": "https://stackoverflow.com/questions/802050/what-is-opinionated-software", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u81ea\u4ee5\u4e3a\u662f", "\u6846\u67b6"]}, {"category": "", "categoryclass": "", "imagename": "e5174a315d77a9b09632eac2e5596c46.jpg", "infoid": 1071014, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u6700\u8fd1\u5c06\u65b0\u529f\u80fd\u96c6\u6210\u5230\u4e86\u5728 Rust \u4e2d\u5b9e\u73b0\u7684 CrowdStrike Falcon \u4f20\u611f\u5668\u4e2d\u3002 Rust \u662f\u4e00\u79cd\u76f8\u5bf9\u5e74\u8f7b\u7684\u8bed\u8a00\uff0c\u6709\u51e0\u4e2a\u4e13\u6ce8\u4e8e\u5b89\u5168\u548c\u4fdd\u969c\u7684\u529f\u80fd\u3002\u4ece C++ \u8c03\u7528 Rust \u76f8\u5bf9\u7b80\u5355\uff0c\u4f46\u6211\u4eec\u9047\u5230\u7684\u4e00\u4e2a\u7eca\u811a\u77f3\u662f Rust \u5982\u4f55\u5904\u7406\u5185\u5b58\u4e0d\u8db3 (OOM) \u60c5\u51b5\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u201c\u5185\u5b58\u4e0d\u8db3\u201d\u7684\u542b\u4e49\uff1a\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u5e95\u5c42\u5206\u914d\u5668\u4e3a\u5c1d\u8bd5\u5206\u914d\u8fd4\u56de NULL\u3002\u60a8\u53ef\u80fd\u4ece\u672a\u89c1\u8fc7 malloc() \u5728\u5b9e\u8df5\u4e2d\u8fd4\u56de NULL\u3002\u5728\u9ed8\u8ba4\u914d\u7f6e\u7684 Linux \u4e0a\uff0c\u8fd9\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6b63\u5982 malloc \u7684\u624b\u518c\u9875\u6240\u8ff0\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cLinux \u9075\u5faa\u4e50\u89c2\u5185\u5b58\u5206\u914d\u7b56\u7565\u3002\u8fd9\u610f\u5473\u7740\u5f53 malloc() \u8fd4\u56de\u975e NULL \u65f6\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u5185\u5b58\u786e\u5b9e\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u5c06\u88ab OOM \u6740\u624b\u6740\u6b7b\u3002\u5982\u679c\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\uff0cmalloc \u4ecd\u5c06\u8fd4\u56de\u4e00\u4e2a\u975e NULL \u6307\u9488\uff0c\u4f46\u968f\u540e OOM \u6740\u624b\u5c06\u4ecb\u5165\u5e76\u901a\u8fc7 SIGKILL \u5f00\u59cb\u7ec8\u6b62\u8fdb\u7a0b\u200b\u200b\u3002\u5728\u8fd9\u79cd\u914d\u7f6e\u4e2d\u4f7f\u7528 Linux \u53ef\u80fd\u4f1a\u8ba9\u4eba\u5728\u5904\u7406\u5206\u914d\u9519\u8bef\u65b9\u9762\u4ea7\u751f\u4e00\u79cd\u9519\u8bef\u7684\u5b89\u5168\u611f\u3002\u4f46\u662f\uff0c\u4e16\u754c\u4e0a\u6709\u5f88\u591a\u7cfb\u7edf\u5e76\u6ca1\u6709\u8fd0\u884c\u613f\u610f\u50cf\u8fd9\u6837\u8fc7\u91cf\u4f7f\u7528\u5185\u5b58\u7684\u7cfb\u7edf\uff0c\u91cd\u8981\u7684\u662f\u8981\u77e5\u9053\u5982\u679c\u5206\u914d\u5c1d\u8bd5\u5931\u8d25\uff0c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u6267\u884c\u4ec0\u4e48\u64cd\u4f5c\u3002 Rust \u4e2d\u7684\u9519\u8bef\u5904\u7406\u901a\u5e38\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a Result\uff08\u5f3a\u5236\u8c03\u7528\u8005\u5728 API \u7ea7\u522b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5904\u7406\u9519\u8bef\uff09\u6216\u6050\u614c\uff08\u5b83\u5c55\u5f00\u5806\u6808\u5e76\u4e3b\u8981\u7528\u4e8e\u4e0d\u6253\u7b97\u51fa\u73b0\u7684\u9519\u8bef\uff09\u6765\u6db5\u76d6\u53ef\u6062\u590d\u7684\uff08\u4f8b\u5982\uff0c\u7d22\u5f15\u8d85\u51fa\u6570\u7ec4\u672b\u5c3e\u6216\u5728\u67d0\u4e9b\u524d\u7f6e\u6216\u540e\u7f6e\u6761\u4ef6\u4e0b\u4f7f\u65ad\u8a00\u5931\u8d25\uff09\u3002\u9274\u4e8e\u8fd9\u4e9b\u6a21\u5f0f\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a OOM \u4e8b\u4ef6\u4f1a\u5bfc\u81f4\u6050\u614c\uff0c\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff1a\u4eca\u5929\uff0cOOM \u4e8b\u4ef6\u5bfc\u81f4 Rust \u7acb\u5373\u7ec8\u6b62\u8fdb\u7a0b\u800c\u6ca1\u6709\u5c55\u5f00\u3002\u5bf9\u4e8e\u4e0d\u719f\u6089\u8fd9\u4e2a\u7279\u5b9a\u95ee\u9898\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u79cd\u884c\u4e3a\u53ef\u80fd\u4f1a\u4ee4\u4eba\u60ca\u8bb6\uff0c\u6211\u5728\u5185\u90e8\u770b\u5230\u5e76\u516c\u5f00\u58f0\u660e\uff08\u4f8b\u5982\uff0clibcurl \u7684\u4f5c\u8005\u5728\u4ed6\u4eec\u5bf9 Rust \u4f5c\u4e3a\u53ef\u80fd\u7684\u540e\u7aef\u7684\u8c03\u67e5\u4e2d\uff09\u3002\u6211\u7edd\u5bf9\u4e0d\u6253\u7b97\u8bfd\u8c24 Rust \u8bed\u8a00\u6216\u56e2\u961f\u3002\u5728 OOM \u4e0a\u4e2d\u6b62\u7684\u9009\u62e9\u5f53\u7136\u662f\u6709\u9053\u7406\u7684\uff0c\u4f46\u6279\u51c6\u7684 RFC \u7684\u52a8\u673a\u90e8\u5206\u5c06\u53ef\u5931\u8d25\u7684\u5206\u914d\u6dfb\u52a0\u5230\u6807\u51c6\u5e93\u96c6\u5408\u4e2d\u6307\u51fa\u5b83\u4f5c\u4e3a\u957f\u671f\u89e3\u51b3\u65b9\u6848\u662f\u4e0d\u591f\u7684\uff1a\u8bb8\u591a\u96c6\u5408\u65b9\u6cd5\u53ef\u80fd\u51b3\u5b9a\u5206\u914d\uff08\u63a8\u9001\uff0c\u63d2\u5165\u3001extend\u3001entry\u3001reserve\u3001with_capacity\u3001...) \u5e76\u4e14\u8fd9\u4e9b\u5206\u914d\u53ef\u80fd\u4f1a\u5931\u8d25\u3002\u5728 Rust \u5386\u53f2\u7684\u65e9\u671f\uff0c\u6211\u4eec\u505a\u51fa\u4e86\u4e00\u4e2a\u653f\u7b56\u51b3\u5b9a\uff0c\u4e0d\u5728 API \u7ea7\u522b\u516c\u5f00\u8fd9\u4e00\u4e8b\u5b9e\uff0c\u800c\u662f\u503e\u5411\u4e8e\u4e2d\u6b62\u3002\u8fd9\u662f\u56e0\u4e3a\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u4e0d\u51c6\u5907\u5904\u7406\u5b83\uff0c\u6216\u8005\u4e0d\u611f\u5174\u8da3\u3002\u968f\u610f\u5904\u7406\u5206\u914d\u5931\u8d25\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8bb8\u591a\u4ece\u672a\u6d4b\u8bd5\u8fc7\u7684\u4ee3\u7801\u8def\u5f84\uff0c\u4ece\u800c\u5bfc\u81f4\u9519\u8bef\u3002\u6211\u4eec\u79f0\u8fd9\u79cd\u65b9\u6cd5\u4e3a\u53ef\u9760\u7684\u96c6\u5408\u5206\u914d\uff0c\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u6a21\u578b\u662f\u5206\u914d\u4e0d\u4f1a\u5931\u8d25\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u79cd\u7acb\u573a\u5728 Rust \u8bbe\u8ba1\u7684\u4e00\u4e9b\u73af\u5883\u4e2d\u662f\u4e0d\u53ef\u6301\u7eed\u7684\u3002\u8be5 RFC \u8bd5\u56fe\u5efa\u7acb\u4e00\u4e2a\u57fa\u672c\u7684\u6613\u51fa\u9519\u96c6\u5408\u5206\u914d API\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u7684\u7528\u6237\u5728\u9700\u8981\u65f6\u5904\u7406\u5206\u914d\u5931\u8d25\u3002\u8be5 RFC \u662f\u5b9d\u8d35\u80cc\u666f\u548c\u672a\u6765\u4fe1\u606f\u7684\u91d1\u77ff\uff0c\u6211\u5f3a\u70c8\u5efa\u8bae\u60a8\u9605\u8bfb\u5168\u6587\u3002\u5b83\u7ee7\u7eed\u6982\u8ff0\u4e86\u51e0\u4e2a\u7528\u4f8b\u548c\u89e3\u51b3\u5b83\u4eec\u7684\u8ba1\u5212\u3002\u6211\u4eec\u7684\u7528\u4f8b\u7c7b\u4f3c\u4e8e RFC \u4e2d\u63cf\u8ff0\u7684\u670d\u52a1\u5668\u7528\u4f8b\u3002\u6211\u4eec\u5e0c\u671b\u5728\u6267\u884c\u591a\u4e2a\u4efb\u52a1\u7684\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f\u4e2d\u8fd0\u884c Rust \u5b9e\u73b0\u7684\u7ec4\u4ef6\uff0c\u5e76\u4e14\u5e0c\u671b\u4efb\u52a1\u4e0a\u7684 OOM \u4e8b\u4ef6\u4ec5\u5bfc\u81f4\u8be5\u4efb\u52a1\u5931\u8d25\uff1b\u5176\u4ed6\u4efb\u52a1\uff08\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d\uff09\u5e94\u8be5\u7ee7\u7eed\u7545\u901a\u65e0\u963b\u3002\u4e0d\u5e78\u7684\u662f\uff0cRFC \u4e2d\u63cf\u8ff0\u7684\u89e3\u51b3\u65b9\u6848\u5c1a\u4e0d\u53ef\u7528\uff0c\u81f3\u5c11\u5728\u7a33\u5b9a\u7684 Rust \u4e0a\u662f\u8fd9\u6837\uff08\u6709\u4e9b\uff0c\u4f46\u4e0d\u662f\u5168\u90e8\uff0c\u6bcf\u665a\u53ef\u7528\uff09\u3002\u6b64\u5916\uff0c\u5b9e\u73b0\u6240\u6709\u8fd9\u4e9b\u53ef\u80fd\u5177\u6709\u6311\u6218\u6027\uff0c\u5c24\u5176\u662f\u5c06 OOM \u66f4\u6539\u4e3a panic \u548c unwind \u800c\u4e0d\u662f abort\uff1a\u6807\u51c6\u5e93\u6216\u5df2\u53d1\u5e03\u7684 crate \u4e2d\u53ef\u80fd\u5b58\u5728\u4e0d\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u5047\u8bbe\u5206\u914d\u6c38\u8fdc\u4e0d\u4f1a\u5931\u8d25\uff0c\u5e76\u4e14\u53d8\u5f97\u4e0d\u5065\u5168\uff08\u5373\u5f15\u5165\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\uff09\u5982\u679c\u5141\u8bb8\u5206\u914d\u5931\u8d25\u89e3\u9664\u3002\u5982\u679c\u4eca\u5929\u60f3\u8981\u5904\u7406 OOM \u4e8b\u4ef6\uff0c\u5728\u7a33\u5b9a\u7684 Rust \u4e0a\uff0c\u9009\u9879\u5305\u62ec\uff1a\u8ba9 OOM \u4e8b\u4ef6\u4e2d\u6b62\u8be5\u8fc7\u7a0b\u3002\u8fd9\u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u7b80\u5355\u7684\u9009\u9879\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u989d\u5916\u7684\u5de5\u4f5c\uff1a\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b8c\u6574\u7684 Rust \u8bed\u8a00\u3001\u6807\u51c6\u5e93\u548c\u7b2c\u4e09\u65b9 crate\u3002\u6211\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u7edd\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u7684\u6b63\u786e\u89e3\u51b3\u65b9\u6848\u3002\u4efb\u4f55\u5065\u58ee\u7684\u7cfb\u7edf\u90fd\u9700\u8981\u80fd\u591f\u56e0\u5916\u90e8\u539f\u56e0\uff08\u786c\u4ef6\u6545\u969c\u3001\u7cfb\u7edf\u5e93\u5d29\u6e83\u3001root \u7528\u6237\u6740\u6b7b\u8fdb\u7a0b\uff09\u800c\u91cd\u65b0\u542f\u52a8\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u7f51\u7edc\u5b89\u5168\u516c\u53f8\u6765\u8bf4\uff0c\u5c06 Rust \u7ec4\u4ef6\u96c6\u6210\u5230\u66f4\u5927\u7684 C++ \u7a0b\u5e8f\u4e2d\u662f\u4e00\u79cd\u82e6\u679c\uff0c\u5176\u4e2d C++ \u90e8\u5206\u53ef\u4ee5\u4ece OOM \u4e2d\u6062\u590d\u800c Rust \u7ec4\u4ef6\u4e0d\u80fd\uff0c\u5e76\u4e14\u5b83\u5bf9\u6211\u4eec\u62e5\u6709\u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u4ea7\u751f\u4e0d\u5229\u5f71\u54cd\uff0c\u6b63\u5982\u6211\u4eec\u770b\u5230\u7531 Rust \u7ec4\u4ef6\u5185\u90e8\u7684 OOM \u4e8b\u4ef6\u5f15\u8d77\u7684\u5d29\u6e83\u3002\u5207\u6362\u5230 no_std \u73af\u5883\u3002\u8fd9\u901a\u5e38\u7528\u4e8e\u5fae\u63a7\u5236\u5668\u5de5\u4f5c\uff0c\u4f46\u5b83\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u73af\u5883\u3002\u5b83\u7981\u7528\u4e86\u5927\u91cf\u7684 Rust \u6807\u51c6\u5e93\uff0c\u5305\u62ec\u90a3\u4e9b\u5206\u914d\u5185\u5b58\u7684\u5e93\uff0c\u5e76\u4e14\u8fd8\u4f1a\u9650\u5236\u54ea\u4e9b\u7b2c\u4e09\u65b9 crate \u53ef\u7528\u3002\u6839\u636e\u60a8\u5df2\u7ecf\u7f16\u5199\u4e86\u591a\u5c11\u4ee3\u7801\uff0c\u8fd9\u53ef\u80fd\u4f1a\u975e\u5e38\u6602\u8d35\uff0c\u7279\u522b\u662f\u5982\u679c\u60a8\u4f7f\u7528\u4e0e no_std \u4e0d\u517c\u5bb9\u7684\u91cd\u8981 crate\u3002\u4f7f\u7528\u4e0a\u9762 RFC \u4e2d\u6982\u8ff0\u7684 try_* \u65b9\u6cd5\u5c06\u5206\u914d\u5931\u8d25\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728 API \u7ea7\u522b\u5904\u7406\u7684\u7ed3\u679c\u3002\u76ee\u524d\uff08Rust 1.48\uff09\uff0c\u8fd9\u4e9b\u4ecd\u7136\u4e0d\u7a33\u5b9a\uff0c\u56e0\u6b64\u53ea\u80fd\u5728\u591c\u95f4\u7f16\u8bd1\u5668\u4e0a\u4f7f\u7528\uff0c\u4f46\u4e5f\u6709\u7b2c\u4e09\u65b9 crate \u4f7f\u5b83\u4eec\u53ef\u7528\uff1afallible_collections \u6269\u5c55\u4e86\u8bb8\u591a\u6807\u51c6\u5e93\u7c7b\u578b\u4ee5\u6dfb\u52a0\u200b\u200b\u5efa\u8bae\u7684 RFC \u65b9\u6cd5\uff0c\u4f8b\u5982\uff0c\u548c hashbrown\uff08\u5b83\u662f\u6807\u51c6\u5e93 HashMap/HashSet \u5b9e\u73b0\uff09\u5728\u5176 HashMap \u548c HashSet \u4e0a\u516c\u5f00\u4e86\u4e00\u4e2a try_reserve \u65b9\u6cd5\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u5f15\u5165\u4e86\u4e0d\u652f\u6301 no_std \u7684\u7b2c\u4e09\u65b9\u4f9d\u8d56\u9879\uff0c\u5219\u9009\u9879 2 \u53ef\u80fd\u4f1a\u975e\u5e38\u56f0\u96be\u3002\u672c\u535a\u5ba2\u7684\u5176\u4f59\u90e8\u5206\u5c06\u6269\u5c55\u9009\u9879 3\u3002\u9009\u9879 3 \u7684\u4e00\u4e2a\u76f4\u63a5\u95ee\u9898\u662f\uff0c\u6ca1\u6709\u4e00\u79cd\u597d\u7684\u65b9\u6cd5\u53ef\u4ee5\u77e5\u9053\u60a8\u5df2\u627e\u5230\u5e76\u66f4\u65b0\u4e86\u53ef\u80fd\u5206\u914d\u7684\u6bcf\u4e2a\u547c\u53eb\u7ad9\u70b9\u3002\u4e0a\u9762\u7684 RFC \u63d0\u5230\u4e86\u5bf9\u201c\u67d0\u79cd\u7cfb\u7edf\u6765\u9632\u6b62\u51fd\u6570\u6c38\u8fdc\u6b63\u786e\u5206\u914d\u201d\u7684\u6e34\u671b\uff0c\u5b83\u63d0\u5230\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd lint \u6765\u5b9e\u73b0\u3002\u4eca\u5929\u6ca1\u6709\u8fd9\u6837\u7684 lint \u53ef\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u8bd5\u56fe\u901a\u8fc7\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5168\u5c40\u5206\u914d\u5668\u6d4b\u8bd5\u6211\u4eec\u7684 Rust \u7ec4\u4ef6\u6765\u8986\u76d6\u8fd9\u4e2a\uff0c\u8be5\u5206\u914d\u5668\u6709\u610f\u6ce8\u5165 OOM \u4e8b\u4ef6\u3002\nRust \u5141\u8bb8\u60a8\u7528\u81ea\u5df1\u7684\u5b9e\u73b0\u66ff\u6362\u5168\u5c40\u5206\u914d\u5668\u3002\u901a\u5e38\uff0c\u8fd9\u7528\u4e8e\u5728\u7cfb\u7edf\u5206\u914d\u5668\u548c jemalloc \u4e4b\u95f4\u5207\u6362\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5b83\u7528\u4e8e\u8fb9\u7f18\u6076\u610f\u76ee\u7684\uff1a\u6211\u4eec\u5c06\u7f16\u5199\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5168\u5c40\u5206\u914d\u5668\uff0c\u8be5\u5206\u914d\u5668\u6709\u65f6\u4f1a\u6545\u610f\u5931\u8d25\u3002\u5f53\u7136\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8fd9\u5c06\u662f\u4e00\u4ef6\u53ef\u6015\u7684\u4e8b\u60c5\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u5176\u4f7f\u7528\u9650\u5236\u5728\u5355\u4e2a\u6d4b\u8bd5\u4e2d\u3002\u8ba9\u6211\u4eec\u4ece\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u5e93\u5f00\u59cb\uff0c\u8be5\u5e93\u5206\u914d\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u3002\u6b64\u793a\u4f8b\u662f\u4f7f\u7528\u64b0\u5199\u672c\u6587\u65f6\u6700\u65b0\u7684\u7a33\u5b9a\u7248 Rust \u7f16\u5199\u7684\uff081.48.0\uff09\u3002 [~]% cargo new --lib oom-demo \u521b\u5efa\u5e93 `oom-demo` \u5305 [~]% cd oom-demo # ... \u7f16\u8f91 src/lib.rs ... [~/oom-demo]% cat src/ lib.rs \u4f7f\u7528 std::collections::HashMap\uff1b #[derive(Debug, Default)] pub struct Counter { items: HashMap&lt;u32, Vec&lt;u32&gt;&gt;, } impl Counter { pub fn push_key_value(&amp;mut self, key: u32, value: u32) { self.items.entry (key).or_default().push(value); } pub fn values_for_key(&amp;self, key: u32) -&gt; Option&lt;&amp;[u32]&gt; { self.items.get(&amp;key).map(Vec::as_slice) } } #[cfg(test)] mod tests { use\u6781\u597d\u7684\uff1a\uff1a*; #[\u6d4b\u8bd5] fn it_works() { let mut c = Counter::default(); c.push_key_value(0, 1); c.push_key_value(0, 2); c.push_key_value(5, 100); c.push_key_value(5, 4); assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]); assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]); assert_eq!(c.values_for_key(1), None);\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5c0f\u5e93\uff0c\u5b83\u4e3a\u7ed9\u5b9a\u7684\u952e\u7d2f\u79ef\u503c\uff0c\u4f46\u5b83\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u5206\u914d\uff0c\u6240\u4ee5\u5e94\u8be5\u8db3\u4ee5\u6f14\u793a OOM \u6ce8\u5165\u5168\u5c40\u5206\u914d\u5668\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u5168\u5c40\u5206\u914d\u5668\u662f\u5168\u5c40\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4f7f\u7528\u81ea\u5b9a\u4e49\u5206\u914d\u5668\u8fd0\u884c\u6d4b\u8bd5\u9700\u8981\u5c0f\u5fc3\uff1acargo \u6d4b\u8bd5\u5c06\u8fd0\u884c\u591a\u4e2a\u6d4b\u8bd5\u7ebf\u7a0b\uff08\u8fd9\u5bf9\u6211\u4eec\u6765\u8bf4\u53ef\u80fd\u6709\u95ee\u9898\uff09\uff0c\u66ff\u6362\u5168\u5c40\u5206\u914d\u5668\u4f1a\u5f71\u54cd\u7531\u6d4b\u8bd5\u6846\u67b6\u672c\u8eab\u8fdb\u884c\u7684\u5206\u914d\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u5c06\u6211\u4eec\u7684 OOM \u6ce8\u5165\u6d4b\u8bd5\u653e\u5165\u5b83\u81ea\u5df1\u7684\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u6765\u89e3\u51b3\u591a\u7ebf\u7a0b\u95ee\u9898\uff0c\u5176\u4e2d\u53ea\u6709\u4e00\u4e2a #[test] \u3002\u5c06\u6211\u4eec\u7684 OOM \u6ce8\u5165\u9650\u5236\u4e3a\u4ec5\u8c03\u7528\u6211\u4eec\u5e93\u4e2d\u7684\u7ad9\u70b9\u6709\u70b9\u68d8\u624b\u3002\u6211\u4eec\u5c06\u4f7f\u7528 AtomicBool \u6765\u542f\u7528/\u7981\u7528 OOM \u6ce8\u5165\uff0c\u5e76\u4e14\u4ec5\u5728\u6211\u4eec\u8c03\u7528\u5e93\u65f6\u6253\u5f00\u5b83\uff08\u8fd9\u662f\u5c06\u5176\u9650\u5236\u4e3a\u5355\u4e2a\u7ebf\u7a0b\u7684\u53e6\u4e00\u4e2a\u539f\u56e0\uff01\uff09\u3002\u521b\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u76ee\u5f55\uff0c\u5e76\u5c06\u5176\u653e\u5165 tests/oom-injection.rs: use oom_demo::Counter;\u4f7f\u7528 std::alloc::{GlobalAlloc, Layout, System};\u4f7f\u7528 std::ptr;\u4f7f\u7528 std::sync::atomic::{AtomicBool, Ordering}; struct OomAllocator { enable_oom_injection: AtomicBool, } impl OomAllocator { fn enable_oom_injection(&amp;self) { self.enable_oom_injection.store(true, Ordering::Relaxed); } fn disable_oom_injection(&amp;self) { self.enable_oom_injection.store(false, Ordering::Relaxed); } fn is_oom_injection_enabled(&amp;self) -&gt; bool { self.enable_oom_injection.load(Ordering::Relaxed) } } unsafe impl GlobalAlloc for OomAllocator { unsafe fn alloc(&amp;self, layout: Layout) -&gt; *mut u8 { if self.is_oom_injection_enabled( ) { // \u542f\u7528 OOM \u6ce8\u5165 - \u8fd4\u56de NULL return ptr::null_mut(); } else { // \u65e0 OOM \u6ce8\u5165 - \u9075\u5faa\u7cfb\u7edf\u5206\u914d\u5668 System.alloc(layout) } } unsafe fn dealloc(&amp;self, ptr: *mut u8, layout: Layout) { System.dealloc(ptr, layout) } } #[ global_allocator] static GLOBAL: OomAllocator = OomAllocator { enable_oom_injection: AtomicBool::new(false), }; // \u6ce8\u610f\uff1a\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u6211\u4eec\u53ea\u6709\u4e00\u4e2a #[test] \u662f\u5f88\u91cd\u8981\u7684 // \u4ee5\u907f\u514d\u6211\u4eec\u7684 OOM \u6ce8\u5165 // \u5168\u5c40\u5206\u914d\u5668\u548c `cargo test` \u591a\u7ebf\u7a0b\u4e4b\u95f4\u7684\u4e0d\u826f\u4ea4\u4e92\uff01 #[test] fn run_demo_with_oom_injection() { // \u73b0\u5728\uff0c\u53ea\u9700\u4ece lib.rs \u91cd\u590d\u6d4b\u8bd5\u3002\u8ba9 mut c = Counter::default(); c.push_key_value(0, 1); c.push_key_value(0, 2); c.push_key_value(5, 100); c.push_key_value(5, 4); assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]); assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]); assert_eq!(c.values_for_key(1), None);\u6211\u4eec\u4e3a\u6211\u4eec\u7684\u5e93\u8fd0\u884c\u76f8\u540c\u7684\u5355\u5143\u6d4b\u8bd5 - \u8986\u76d6\u6211\u4eec\u671f\u671b\u53ef\u80fd\u5206\u914d\u7684\u6240\u6709\u4ee3\u7801\u8def\u5f84\u5f88\u91cd\u8981\n\u4f46\u5b83\u4ecd\u7136\u4e0d\u5b8c\u6574\u3002\u6211\u4eec\u4ece\u672a\u771f\u6b63\u542f\u7528 OOM \u6ce8\u5165\uff0c\u5982\u679c\u542f\u7528\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u5c1d\u8bd5\u5206\u914d\u65f6\u8fd4\u56de NULL\uff0c\u8fd9\u4e0d\u4f1a\u7ed9\u6211\u4eec\u592a\u591a\u8986\u76d6\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u5f53\u6211\u4eec\u6ce8\u5165\u5206\u914d\u5931\u8d25\u65f6\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u5206\u914d\u5c1d\u8bd5\u7684\u6765\u6e90\u3002\u6539\u53d8\u201creturn ptr::null_mut();\u201d\u53ef\u80fd\u5f88\u8bf1\u4eba\u9677\u5165\u6050\u614c\uff0c\u4f46\u6839\u636e GlobalAlloc \u7279\u6027\u7684\u6587\u6863\uff0c\u8fd9\u662f\u660e\u786e\u4e0d\u5141\u8bb8\u7684\uff1a\u5982\u679c\u5168\u5c40\u5206\u914d\u5668\u5c55\u5f00\uff0c\u5219\u8fd9\u662f\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5c06\u6765\u53ef\u80fd\u4f1a\u53d6\u6d88\u6b64\u9650\u5236\uff0c\u4f46\u76ee\u524d\u4efb\u4f55\u8fd9\u4e9b\u529f\u80fd\u7684\u6050\u614c\u90fd\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u4e0d\u5b89\u5168\u3002\u6709\u5f88\u591a\u9009\u9879\u53ef\u4ee5\u51b3\u5b9a\u4f55\u65f6\u5b9e\u9645\u8fd4\u56de NULL\uff1b\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728\u4e00\u5b9a\u767e\u5206\u6bd4\u7684\u65f6\u95f4\u5185\u968f\u673a\u8fd4\u56de NULL\uff08\u542f\u7528 OOM \u6ce8\u5165\u65f6\uff09\u3002\u5982\u679c\u5728\u60a8\u7684\u4ee3\u7801\u4e2d\u547d\u4e2d\u7279\u5b9a\u5206\u914d\u8c03\u7528\u7ad9\u70b9\u7684\u673a\u4f1a\u5f88\u4f4e\uff0c\u90a3\u53ef\u80fd\u4e0d\u5408\u9002\u3002\u6211\u4eec\u7a0d\u540e\u4f1a\u8ba8\u8bba\u4e00\u4e9b\u9009\u9879\uff0c\u4f46\u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5b83\u5e94\u8be5\u8db3\u591f\u4e86\u3002\u5f53\u6211\u4eec\u6ce8\u5165 OOM \u65f6\uff0c\u6211\u4eec\u8fd8\u5c06\u62c9\u5165 backtrace crate \u4ee5\u8bb0\u5f55\u6211\u4eec\u5728\u8c03\u7528\u5806\u6808\u4e2d\u7684\u4f4d\u7f6e\u3002\u5c06\u6b64\u6dfb\u52a0\u5230 Cargo.toml\uff1a@@ -1,8 +1,11 @@ +use backtrace::Backtrace;\u4f7f\u7528 oom_demo::Counter;\u4f7f\u7528 std::alloc::{GlobalAlloc, Layout, System};\u4f7f\u7528 std::ptr;\u4f7f\u7528 std::sync::atomic::{AtomicBool, Ordering}; +const OOM_INJECTION_PROBABILITY: f32 = 0.1; + struct OomAllocator { enable_oom_injection: AtomicBool, } @@ -22,8 +25,14 @@ impl OomAllocator { unsafe impl GlobalAlloc for OomAllocator { unsafe fn alloc(&amp;self, layout: Layout) -&gt; *mut u8 { - if self. is_oom_injection_enabled() { - // \u542f\u7528 OOM \u6ce8\u5165 - \u8fd4\u56de NULL + if self.is_oom_injection_enabled() + &amp;&amp; rand::random:: () &lt; OOM_INJECTION_PROBABILITY + { + // \u751f\u6210\u56de\u6eaf\u5c06\u9700\u8981\u5206\u914d\u3002 + // \u751f\u6210\u65f6\u7981\u7528 OOM \u6ce8\u5165\u5e76 + // \u6253\u5370\u5b83\uff0c\u7136\u540e\u91cd\u65b0\u542f\u7528\u5b83\u3002\u5982\u679c\u6709\u591a\u4e2a\u7ebf\u7a0b\uff0c\u8fd9\u5c06\u8868\u73b0\u5f97 + // \u5947\u602a + // \u5728\u6211\u4eec\u8fd0\u884c\u6b64\u6d4b\u8bd5\u65f6\u8fdb\u884c\u5206\u914d\uff01 + self.disable_oom_injection(); + println!(&quot;\u4ece {:?} \u6ce8\u5165 OOM&quot;, + Backtrace::new()); + self.enable_oom_injection();\u8fd4\u56de ptr::null_mut(); } else { // \u65e0 OOM \u6ce8\u5165 - \u9075\u5faa\u7cfb\u7edf\u5206\u914d\u5668 @@ -42,12 +47,14 @@ static GLOBAL: OomAllocator = OomAllocator { enable_oom_injection: AtomicBool::new(false), }; #[test] fn run_demo_with_oom_injection() { - // \u73b0\u5728\uff0c\u53ea\u9700\u4ece lib.rs \u91cd\u590d\u6d4b\u8bd5\u3002 + // \u542f\u7528\u968f\u673a OOM \u6ce8\u5165\uff1b\u591a\u6b21\u91cd\u590d\u6d4b\u8bd5\u3002 + GLOBAL.enable_oom_injection(); + for _ in 0..1_000 { let mut c = Counter::default(); c.push_key_value(0, 1); c.push_key_value(0, 2); @@ -56,5 +63,6 @@ fn run_demo_with_oom_injection() { assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]); assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]); assert_eq!(c.values_for_key(1), None); + } + GLOBAL.disable_oom_injection();\u6211\u4eec\u5728\u751f\u6210\u548c\u6253\u5370\u56de\u6eaf\u65f6\u6682\u65f6\u7981\u7528 OOM \u6ce8\u5165\uff0c\u56de\u6eaf\u672c\u8eab\u5206\u914d\u5185\u5b58\u3002\u8fd9\u662f\u5bf9\u6211\u4eec\u7684\u5206\u914d\u5668\u786e\u5b9e\u662f\u5168\u5c40\u7684\u8fd9\u4e00\u4e8b\u5b9e\u7684\u8ba9\u6b65\uff1a\u5982\u679c\u6211\u4eec\u60f3\u4ece\u6211\u4eec\u7684\u5206\u914d\u5668\u672c\u8eab\u5185\u90e8\u5206\u914d\u5185\u5b58\uff0c\u6211\u4eec\u6700\u7ec8\u4f1a\u9012\u5f52\u56de\u5230\u6211\u4eec\u81ea\u5df1\u7684\u5206\u914d\u65b9\u6cd5\u4e2d\u3002\u6211\u4eec\u8fd0\u884c\u6d4b\u8bd5 1,000 \u6b21\u3002\u8fd9\u5bf9\u4e8e\u8fd9\u4e2a\u6f14\u793a\u548c\u5e93\u6765\u8bf4\u80af\u5b9a\u662f\u77eb\u6789\u8fc7\u6b63\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u968f\u673a\u6027\u6765\u51b3\u5b9a\u4f55\u65f6\u6ce8\u5165 OOM\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u5176\u8bbe\u7f6e\u5f97\u8db3\u591f\u9ad8\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u5c06\u547d\u4e2d\u6211\u4eec\u5e93\u4e2d\u7684\u6240\u6709\u5c1d\u8bd5\u5206\u914d\u3002\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c cargo test -- --nocapture\uff0c\u6211\u4eec\u5e94\u8be5\u4f1a\u770b\u5230\u4e00\u4e2a\u56de\u6eaf\uff0c\u540e\u9762\u8ddf\u7740\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u5c3d\u7ba1\u5982\u679c\u4f60\u6309\u7167\u4e0b\u9762\u7684\u64cd\u4f5c\uff0c\u4f60\u53ef\u80fd\u4f1a\u770b\u5230\u4e0d\u540c\u7684\u5185\u5b58\u5206\u914d\u91cf\uff1a\n\u8fd9\u662f\u8fdb\u6b65\uff01\u6211\u4eec\u6253\u5370\u4e86\u6211\u4eec\u5728\u4f55\u5904\u6ce8\u5165 OOM \u7684\u56de\u6eaf\uff0c\u7136\u540e\u6211\u4eec\u4ece Rust \u83b7\u5f97\u4e86\u5b83\u5728\u4e2d\u6b62\u4e4b\u524d\u6253\u5370\u7684 spartan \u65e5\u5fd7\u6d88\u606f\u3002\u5982\u679c\u60a8\u91cd\u65b0\u8fd0\u884c\u51e0\u6b21\uff0c\u60a8\u53ef\u80fd\u4f1a\u5728\u65e5\u5fd7\u6d88\u606f\u4e2d\u770b\u5230\u4e0d\u540c\u7684\u5185\u5b58\u5206\u914d\u91cf\u548c\u4e0d\u540c\u7684\u56de\u6eaf\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u5e93\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u5206\u914d\u70b9\u3002\u56de\u6eaf\u5f88\u5927\u4e14\u5608\u6742\uff0c\u4f46\u8bf7\u5c1d\u8bd5\u952e\u5165 oom_demo::Counter::push_key_value \u5468\u56f4\u7684\u5e27\u3002\u901a\u8fc7\u51e0\u6b21\u8fd0\u884c\u6765\u89e3\u91ca\u968f\u673a\u6027\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u8fd9\u4e24\u4e2a\u56de\u6eaf\u5b50\u96c6\uff1a 14: std::collections::hash::map::HashMap ::entry at std/src/collections/hash/map.rs\uff1a 704:19 15: oom_demo::Counter::push_key_value at src/lib.rs:10:9 --- 14: alloc::vec::Vec ::push at alloc/src/vec.rs:1210:13 15 : oom_demo::Counter::push_key_value at src/lib.rs:10:9 \u8fd9\u662f\u6211\u4eec\u5e93\u7684\u4e24\u4e2a\u5206\u914d\u8c03\u7528\u70b9\uff1a\u4e00\u4e2a\u662f\u6211\u4eec\u8981\u6c42\u8f93\u5165\u54c8\u5e0c\u6620\u5c04\uff08\u53ef\u80fd\u5fc5\u987b\u91cd\u65b0\u5206\u914d\u4ee5\u817e\u51fa\u7a7a\u95f4\uff09\u65b0\u7684\u952e/\u503c\u5bf9\uff09\uff0c\u4ee5\u53ca\u53e6\u4e00\u4e2a\u6211\u4eec\u5c1d\u8bd5\u63a8\u5165\u5411\u91cf\u7684\u5730\u65b9\u3002\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u66f4\u65b0\u6211\u4eec\u7684\u5e93\u5e76\u4f7f\u7528 fallible_collections \u548c hashbrown \u4ee5\u4e00\u79cd\u6211\u4eec\u53ef\u4ee5\u6355\u83b7\u5206\u914d\u9519\u8bef\u7684\u65b9\u5f0f\u6765\u589e\u957f\u6211\u4eec\u7684\u5bb9\u5668\u3002\u5c06 fallible_collections = \u201c0.3\u201d \u548c hashbrown = \u201c0.9\u201d \u6dfb\u52a0\u5230\u6211\u4eec\u5e93\u7684\u4f9d\u8d56\u9879\u4e2d\uff0c\u7136\u540e\u5bf9 src/lib.rs \u8fdb\u884c\u4ee5\u4e0b\u66f4\u6539\uff1a@@ -1,4 +1,5 @@ -use std::collections::HashMap; +\u4f7f\u7528 fallible_collections::FallibleVec; +\u4f7f\u7528 hashbrown::{HashMap, TryReserveError}; #[derive(Debug, Default)] pub struct Counter { @@ -6,8 +7,10 @@ pub struct Counter { } impl Counter { - pub fn push_key_value(&amp;mut self, key: u32, value: u32) { - self.items.entry(key).or_default().push(value); + pub fn push_key_value(&amp;mut self, key: u32, value: u32) + -&gt; Result&lt;(), TryReserveError&gt; + { + // \u4e3a\u65b0\u952e\u817e\u51fa\u7a7a\u95f4 - \u5982\u679c + // `key` \u5df2\u7ecf\u5b58\u5728\uff0c\u8fd9\u662f\u4e0d\u5fc5\u8981\u7684\u5b58\u5728\uff0c\u4f46\u6bcf\u6b21\u90fd\u8fd9\u6837\u505a\u53ef\u80fd\u6bd4\u901a\u8fc7\u67e5\u627e`key`\u6765\u4fdd\u62a4\u5b83\u66f4\u4fbf\u5b9c\uff08\u56e0\u4e3a\u5b83\u53ea\u4f1a\u5728+ //\u9700\u8981\u65f6\u589e\u957f\uff09\u3002 + // \u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\uff0c\u8981\u786e\u5b9a\u914d\u7f6e\u6587\u4ef6\uff01 + self.items.try_reserve(1)?; + // `.entry()` \u4e0d\u5e94\u518d\u5728\u6b64\u5904\u91cd\u65b0\u5206\u914d\uff0c\u5e76\u4e14 + // \u6211\u4eec\u5c06 .push() \u66ff\u6362\u4e3a .try_push() \u4f5c\u4e3a\u5411\u91cf + self.items.entry(key).or_default().try_push(value )?; + Ok(()) } pub fn values_for_key(&amp;self, key: u32) -&gt; Option&lt;&amp;[u32]&gt; { @@ -22,10 +25,10 @@ mod tests { #[test] fn it_works() { let mut c = Counter::default(); - c.push_key_value(0, 1); - c.push_key_value(0, 2); - c.push_key_value(5, 100); - c.push_key_value(5, 4); + c.push_key_value(0, 1).unwrap(); + c.push_key_value(0, 2).unwrap(); + c.push_key_value(5, 100).unwrap(); + c.push_key_value(5, 4).unwrap(); assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]); assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]); assert_eq!(c.values_for_key(1), None);\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u65b0\u6211\u4eec\u7684 OOM \u6ce8\u5165\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u66f4\u6539\u4ee5\u53ca\u6211\u4eec\u5728\u6d4b\u8bd5\u4e2d\u7684\u65ad\u8a00\u53ef\u80fd\u65e0\u6548\uff1a\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u63a8\u9001\u65b0\u7684\u952e/\u503c\u5bf9\u4f46\u5206\u914d\u5931\u8d25\uff0c\u90a3\u5bf9\u4e0d\u4f1a\u88ab\u63a8\u52a8\u3002\u5bf9 tests/oom-injection.rs \u8fdb\u884c\u4ee5\u4e0b\u66f4\u6539\uff1a\n@@ -61,12 +61,10 @@ fn run_demo_with_oom_injection() { GLOBAL.enable_oom_injection(); for _ in 0..1_000 { let mut c = Counter::default(); - c.push_key_value(0, 1); - c.push_key_value(0, 2); - c.push_key_value(5, 100); - c.push_key_value(5, 4); - assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]); - assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]); + \u8ba9 _ = c.push_key_value(0, 1); + \u8ba9 _ = c.push_key_value(0, 2); + \u8ba9 _ = c.push_key_value(5, 100); + \u8ba9 _ = c.push_key_value(5, 4); assert_eq!(c.values_for_key(1), None); GLOBAL.disable_oom_injection();\u6211\u4eec\u73b0\u5728\u5e94\u8be5\u80fd\u591f\u8fd0\u884c\u8d27\u7269\u6d4b\u8bd5\u5e76\u770b\u5230\u5355\u5143\u6d4b\u8bd5\u548c OOM \u6ce8\u5165\u6d4b\u8bd5\u90fd\u901a\u8fc7\u4e86\u3002\u6211\u4eec\u7684\u5e93\u5c06\u4e0d\u518d\u56e0 OOM \u4e8b\u4ef6\u4e2d\u6b62\uff0c\u800c\u662f\u8fd4\u56de\u9519\u8bef\u3002\u8fd9\u7bc7\u535a\u5ba2\u4ecb\u7ecd\u4e86\u4e00\u79cd\u5728\u4e0d\u4e2d\u6b62\u8fc7\u7a0b\u7684\u60c5\u51b5\u4e0b\u8c03\u6574\u5e93\u4ee5\u5904\u7406 OOM \u4e8b\u4ef6\u7684\u53ef\u80fd\u65b9\u6cd5\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4e0d\u5efa\u8bae\u5bf9\u5e93\u8fdb\u884c\u8fd9\u79cd\u5904\u7406\uff0c\u56e0\u4e3a\u5b83\u6709\u591a\u79cd\u5b9e\u9645\u6210\u672c\uff1a\u5206\u914d\u68c0\u67e5\u4f1a\u4ea7\u751f\u8fd0\u884c\u65f6\u6210\u672c\u3002\u60a8\u9700\u8981\u6ce8\u610f\u5982\u4f55\u5c06\u5206\u914d\u5931\u8d25\u8f6c\u6362\u4e3a\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u5728\u5faa\u73af\u4e2d\u8c03\u7528 try_push \u53ef\u80fd\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u4e3b\u610f\uff0c\u800c\u60a8\u5e94\u8be5\u5728\u5faa\u73af\u4e4b\u524d\u5c1d\u8bd5 try_reserve\u3002\u8fd9\u662f\u60a8\u901a\u5e38\u4e0d\u9700\u8981\u8003\u8651\u7684\u989d\u5916\u95ee\u9898\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0cAPI \u548c\u5b9e\u73b0\u590d\u6742\u6027\u6210\u672c\u4f1a\u5f71\u54cd\u7ef4\u62a4\u3002\u5982\u679c\u5408\u9002\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6050\u614c\u800c\u4e0d\u662f\u8fd4\u56de\u7ed3\u679c\u6765\u62b5\u6d88\u8fd9\u4e00\u70b9\uff0c\u5c3d\u7ba1\u8981\u6ce8\u610f\u6050\u614c\u672c\u8eab\u4f1a\u5206\u914d\u5185\u5b58\u3002\u672a\u6765\u53ef\u80fd\u4f1a\u6709\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u2014\u2014\u4f8b\u5982\uff0c\u5728 Rust \u7684\u672a\u6765\u7248\u672c\u4e2d\u5b8c\u5168\u652f\u6301\u5bf9 OOM \u7684\u6050\u614c\u3002\u6211\u60f3\u5c3d\u91cf\u51cf\u5c11\u6211\u4eec\u7684\u53d8\u901a\u65b9\u6cd5\uff0c\u5e0c\u671b\u5c3d\u5feb\u5207\u6362\u5230\u8bed\u8a00\u652f\u6301\u7684\u6280\u672f\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u6743\u8861\u6210\u672c\u5e76\u51b3\u5b9a\u4eca\u5929\u5c1d\u8bd5\u5728\u7a33\u5b9a\u7684 Rust \u4e2d\u5904\u7406 OOM \u4e8b\u4ef6\u662f\u503c\u5f97\u7684\uff0c\u90a3\u4e48\u5e0c\u671b\u8fd9\u7bc7\u535a\u5ba2\u80fd\u7ed9\u60a8\u4e00\u4e9b\u60f3\u6cd5\u3002\u5982\u679c\u60a8\u60f3\u6267\u884c\u4e0a\u9762\u6982\u8ff0\u7684 OOM \u6ce8\u5165\u5168\u5c40\u5206\u914d\u5668\u6d4b\u8bd5\u8ba1\u5212\uff0c\u8bf7\u8003\u8651\u51e0\u4e4e\u80af\u5b9a\u6709\u66f4\u6709\u7528\u7684\u65b9\u6cd5\u6765\u51b3\u5b9a\u4f55\u65f6\u6ce8\u5165 OOM \u4e8b\u4ef6\uff1a\u60a8\u53ef\u4ee5\u8ba1\u7b97\u5206\u914d\u4ee5\u8bd5\u56fe\u8986\u76d6\u6bcf\u4e00\u4e2a\uff0c\u60a8\u53ef\u4ee5\u626b\u63cf\u56de\u6eaf\n......", "note_en": "We recently integrated new functionality into our CrowdStrike Falcon sensor that was implemented in  Rust. Rust is a relatively young language with several features focused on safety and security. Calling Rust from C++ was relatively straightforward, but one stumbling block we\u2019ve run into is how Rust deals with out-of-memory (OOM) conditions.\n Let\u2019s start by defining what we mean by \u201cout of memory\u201d: Specifically, we mean that the underlying allocator returns  NULL for an attempted allocation. You may have never seen  malloc() return  NULL in practice. On Linux in its default configuration, it\u2019s nearly impossible, as noted by the  man page for malloc:\n By default, Linux follows an optimistic memory allocation strategy. This means that when  malloc() returns non- NULL there is no guarantee that the memory really is available. In case it turns out that the system is out of memory, one or more processes will be killed by the OOM killer.\n If the system is out of memory,  malloc will still return a non- NULL pointer, but then the OOM killer will get involved and start terminating processes via  SIGKILL. Working with Linux in this configuration can lull one into a false sense of security in terms of dealing with allocation errors. However, there are plenty of systems in the world that aren\u2019t running a system that\u2019s willing to overcommit memory like this, where it\u2019s important to know what your application will do if an allocation attempt fails.\n  Error handling in Rust is typically covered either by returning a  Result, which forces the caller to handle the error in some way at an API level, or by panicking, which unwinds the stack and is primarily used for errors that aren\u2019t meant to be recoverable (e.g., indexing past the end of array or failing an assertion on some pre- or post-condition). Given those patterns, one might expect OOM events to result in a panic, but they don\u2019t: Today, OOM events result in Rust immediately terminating the process without unwinding. This behavior may be surprising to people unfamiliar with this particular issue, which I\u2019ve seen internally and has been publicly stated (e.g., by the  author of libcurl in their investigations of Rust as a possible backend).\n I absolutely do not intend to cast aspersions on the Rust language or team. The choice to abort on OOM is certainly defensible, but the Motivation section of the  approved RFC to add failable allocation to the standard library collections notes that it is insufficient as a long-term solution:\n Many collection methods may decide to allocate (push, insert, extend, entry, reserve, with_capacity, \u2026) and those allocations may fail. Early on in Rust\u2019s history we made a policy decision not to expose this fact at the API level, preferring to abort. This is because most developers aren\u2019t prepared to handle it, or interested. Handling allocation failure haphazardly is likely to lead to many never-tested code paths and therefore bugs. We call this approach infallible collection allocation, because the developer model is that allocations just don\u2019t fail.\n Unfortunately, this stance is unsustainable in several of the contexts Rust is designed for. This RFC seeks to establish a basic fallible collection allocation API, which allows our users to handle allocation failures where desirable.\n That RFC is a goldmine of valuable background and future information, and I highly recommend reading it in full. It goes on to outline several use cases and a plan to address them. Our use case is similar to the  server use case described in the RFC. We want to run Rust-implemented components inside a userspace program that is executing multiple tasks, and want OOM events on a task to only result in the failure of that task; other tasks (in the same process) should continue unimpeded.\n Unfortunately, the solutions described in the RFC are not yet available, at least on stable Rust, (some, but not all, are available on nightly). Furthermore, implementing all of them may be challenging, particularly changing OOMs to panic and unwind instead of abort: There may be unsafe code in the standard library or published crates that assumes allocation never fails, and which becomes unsound (i.e., introduce undefined behavior) if allocation failures are allowed to unwind. If one wants to handle OOM events today, on stable Rust, the options include:\n Let OOM events abort the process. This is by far the simplest option as it requires no extra work: You can use the full Rust language, standard library and third-party crates. I think this is probably the right solution for the vast majority of applications. Any robust system needs to be able to restart due to external causes (hardware failure, crash in a system library, root user killing a process). However, for a cybersecurity company, it is a bitter pill to integrate a Rust component into a larger C++ program where the C++ pieces can all recover from OOM and the Rust component cannot, and it has an adverse effect on the automated tests we have, as we see crashes caused by OOM events inside the Rust component.\n Switch to a  no_std environment. This is typically used for microcontroller work, but it can be used in any context. It disables large chunks of the Rust standard library, including those that allocate memory, and will also restrict what third-party crates are usable. Depending on how much code you\u2019ve already written, this may be very costly, particularly if you\u2019re using nontrivial crates that are not  no_std-compatible.\n Use the  try_* methods outlined in the RFC above to convert allocation failures into  Results that can be handled at the API level. At the moment (Rust 1.48), these are still unstable and therefore only available on a nightly compiler, but there are also third-party crates that make them usable:  fallible_collections extends many standard library types to add the proposed RFC methods, for example, and  hashbrown (which  is the standard library HashMap/HashSet implementation) exposes a  try_reserve method on its HashMap and HashSet.\n Option 2 may be very difficult if you\u2019ve already pulled in third-party dependencies that do not support  no_std. The rest of this blog expands on Option 3. An immediate problem with Option 3 is that there isn\u2019t a good way to know that you\u2019ve found and updated every call site that might allocate. The above RFC mentions a desire for \u201csome kind of system to prevent a function from ever infallibly allocating,\u201d which it mentions could be implemented via some kind of lint. No such lint is available today, so instead we attempted to cover this by testing our Rust component with a custom global allocator that intentionally injects OOM events.\n  Rust allows you to  replace the global allocator with your own implementation. Typically, this is used to switch between the system allocator and  jemalloc, but we can also use it for borderline-nefarious purposes: We\u2019ll write a custom global allocator that intentionally fails some of the time. Of course, this would be a horrible thing to do in a real application, so we\u2019ll restrict its use to a single test.\n Let\u2019s start by writing a simple library that allocates a couple of different ways. This example was written with the most recent stable version of Rust at the time of writing (1.48.0).\n [~]% cargo new --lib oom-demo\r\u00a0 \u00a0 \u00a0Created library `oom-demo` package\r[~]% cd oom-demo\r# \u2026 edit src/lib.rs ...\r[~/oom-demo]% cat src/lib.rs\ruse std::collections::HashMap;\r\r#[derive(Debug, Default)]\rpub struct Counter {\r\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0items: HashMap&lt;u32, Vec&lt;u32&gt;&gt;,\r}\r\rimpl Counter {\r\u00a0 \u00a0 pub fn push_key_value(&amp;mut self, key: u32, value: u32) {\r\u00a0 \u00a0 \u00a0 \u00a0 self.items.entry(key).or_default().push(value);\r\u00a0 \u00a0 }\r\r\u00a0 \u00a0 pub fn values_for_key(&amp;self, key: u32) -&gt; Option&lt;&amp;[u32]&gt; {\r\u00a0 \u00a0 \u00a0 \u00a0 self.items.get(&amp;key).map(Vec::as_slice)\r\u00a0 \u00a0 }\r}\r\r#[cfg(test)]\rmod tests {\r\u00a0 \u00a0 use super::*;\r\r\u00a0 \u00a0 #[test]\r fn it_works() {\r\u00a0 \u00a0 \u00a0 \u00a0 \u00a0let mut c = Counter::default();\r\u00a0 \u00a0 \u00a0 \u00a0 \u00a0c.push_key_value(0, 1);\r\u00a0 \u00a0 \u00a0 \u00a0 \u00a0c.push_key_value(0, 2);\r\u00a0 \u00a0 \u00a0 \u00a0 \u00a0c.push_key_value(5, 100);\r\u00a0 \u00a0 \u00a0 \u00a0 \u00a0c.push_key_value(5, 4);\r\u00a0 \u00a0 \u00a0 \u00a0 \u00a0assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]);\r\u00a0 \u00a0 \u00a0 \u00a0 \u00a0assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]);\r\u00a0 \u00a0 \u00a0 \u00a0 \u00a0assert_eq!(c.values_for_key(1), None);\r\u00a0 \u00a0 }\r}\n This is a trivial little library that accumulates values for a given key, but it allocates in a couple of different places, so should be good enough to demonstrate an OOM-injecting global allocator. A global allocator is, unsurprisingly,  global, which means that running tests with a custom allocator needs to be done with a little care:  cargo test will run multiple test threads (which could be problematic for us), and replacing the global allocator will affect allocations made by the test framework itself. We\u2019ll tackle the multithreading concern by putting our OOM injection test into its own test file with just a single  #[test] inside.\n Restricting our OOM injection to just call sites inside our library is a little trickier. We\u2019ll use an  AtomicBool to enable/disable OOM injection, and only turn it on while we\u2019re calling into our library (yet another reason to restrict this to a single thread!). Make a  tests directory, and put this into  tests/oom-injection.rs:\n use oom_demo::Counter;\ruse std::alloc::{GlobalAlloc, Layout, System};\ruse std::ptr;\ruse std::sync::atomic::{AtomicBool, Ordering};\r\rstruct OomAllocator {\r enable_oom_injection: AtomicBool,\r}\r\rimpl OomAllocator {\r fn enable_oom_injection(&amp;self) {\r self.enable_oom_injection.store(true, Ordering::Relaxed);\r }\r fn disable_oom_injection(&amp;self) {\r self.enable_oom_injection.store(false,\r Ordering::Relaxed);\r }\r fn is_oom_injection_enabled(&amp;self) -&gt; bool {\r self.enable_oom_injection.load(Ordering::Relaxed)\r }\r}\r\runsafe impl GlobalAlloc for OomAllocator {\r unsafe fn alloc(&amp;self, layout: Layout) -&gt; *mut u8 {\r if self.is_oom_injection_enabled() {\r // OOM injection enabled - return NULL\r return ptr::null_mut();\r } else {\r // no OOM injection - defer to system allocator\r System.alloc(layout)\r }\r }\r\r unsafe fn dealloc(&amp;self, ptr: *mut u8, layout: Layout) {\r System.dealloc(ptr, layout)\r }\r}\r\r#[global_allocator]\rstatic GLOBAL: OomAllocator = OomAllocator {\r enable_oom_injection: AtomicBool::new(false),\r};\r\r// NOTE: It is critical that we only have one #[test] in this\r// file to avoid bad interactions between our OOM-injecting\r// global allocator and `cargo test` multithreading!\r#[test]\rfn run_demo_with_oom_injection() {\r // For now, just repeat the test from lib.rs.\r let mut c = Counter::default();\r c.push_key_value(0, 1);\r c.push_key_value(0, 2);\r c.push_key_value(5, 100);\r c.push_key_value(5, 4);\r assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]);\r assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]);\r assert_eq!(c.values_for_key(1), None);\r}\n  We run the same unit test we had for our library \u2014 it\u2019s important to cover all of the code paths we expect could possibly allocate\n But it\u2019s still incomplete. We never actually enable OOM injection, and if we did, it would return  NULL on  every attempted allocation, which isn\u2019t going to give us very much coverage. On top of that, when we inject an allocation failure we don\u2019t know the source of the allocation attempt. It may be tempting to change that \u201c return ptr::null_mut();\u201d into a panic, but that is explicitly not allowed according to the documentation of the  GlobalAlloc trait:\n It\u2019s undefined behavior if global allocators unwind. This restriction may be lifted in the future, but currently a panic from any of these functions may lead to memory unsafety.\n There are many options for deciding when to actually return  NULL; the simplest is to randomly return  NULL some percentage of the time (while OOM injection is enabled). That may not be appropriate if the chance of hitting a particular allocation call site in your code is low. We\u2019ll discuss some options for that later, but for this example it should be good enough. We\u2019ll also pull in the  backtrace crate to log where we are in the call stack when we inject an OOM. Add this to  Cargo.toml:\n   @@ -1,8 +1,11 @@\r+use backtrace::Backtrace;\r use oom_demo::Counter;\r use std::alloc::{GlobalAlloc, Layout, System};\r use std::ptr;\r use std::sync::atomic::{AtomicBool, Ordering};\r\r+const OOM_INJECTION_PROBABILITY: f32 = 0.1;\r+\r struct OomAllocator {\r enable_oom_injection: AtomicBool,\r }\r@@ -22,8 +25,14 @@ impl OomAllocator {\r\r unsafe impl GlobalAlloc for OomAllocator {\r unsafe fn alloc(&amp;self, layout: Layout) -&gt; *mut u8 {\r - if self.is_oom_injection_enabled() {\r- // OOM injection enabled - return NULL\r + if self.is_oom_injection_enabled()\r+ &amp;&amp; rand::random:: () &lt; OOM_INJECTION_PROBABILITY\r+ {\r+ // Generating a backtrace will require allocation.\r+ // Disable OOM injection while generating and\r+ // printing it, then re-enable it. This will behave\r+ // strangely if there are multiple threads \r+ // allocating while we run this test!\r+ self.disable_oom_injection();\r+ println!(&#34;injecting OOM from {:?}&#34;,\r+ Backtrace::new());\r+ self.enable_oom_injection();\r return ptr::null_mut();\r } else {\r // no OOM injection - defer to system allocator\r@@ -42,12 +47,14 @@ static GLOBAL: OomAllocator = OomAllocator {\r enable_oom_injection: AtomicBool::new(false),\r };\r\r #[test]\r fn run_demo_with_oom_injection() {\r - // For now, just repeat the test from lib.rs.\r + // Enable random OOM injection; repeat test many times.\r+ GLOBAL.enable_oom_injection();\r+ for _ in 0..1_000 {\r let mut c = Counter::default();\r c.push_key_value(0, 1);\r c.push_key_value(0, 2);\r@@ -56,5 +63,6 @@ fn run_demo_with_oom_injection() {\r assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]);\r assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]);\r assert_eq!(c.values_for_key(1), None);\r + }\r+ GLOBAL.disable_oom_injection();\r }\n  We temporarily disable OOM injection while generating and printing a backtrace, which itself allocates memory. This is a concession to the fact that our allocator is indeed global: If we want to allocate memory from  within our allocator itself, we ultimately end up recursing back into our own  alloc method.\n We run our test 1,000 times. This is certainly overkill for this demo and library. If we\u2019re using randomness to decide when to inject an OOM, we want to set this high enough to have confidence that we\u2019ll hit all the attempted allocations in our library.\n Now if we run  cargo test -- --nocapture, we should see a backtrace followed by something like this, although you may see a different memory allocation amount if you\u2019re following along:\n  This is progress! We printed a backtrace of where we were injecting an OOM, and then we got the spartan log message from Rust that it prints prior to aborting. If you rerun this a few times, you may see a different memory allocation  amount in the log message and a different backtrace, because our library has two different points where it allocates memory.\n The backtrace is large and noisy, but try keying in on the frames around  oom_demo::Counter::push_key_value. With a few runs to account for randomness, you should see both of these subsets of backtraces:\n 14: std::collections::hash::map::HashMap ::entry\r at std/src/collections/hash/map.rs:704:19\r 15: oom_demo::Counter::push_key_value\r at src/lib.rs:10:9\r\r---\r\r 14: alloc::vec::Vec ::push\r at alloc/src/vec.rs:1210:13\r 15: oom_demo::Counter::push_key_value\r at src/lib.rs:10:9\n These are the two allocation call sites of our library: one where we ask for the entry of a hash map (which may have to reallocate to make space for the new key/value pair), and another where we attempt to push onto a vector.\n We can now update our library and use  fallible_collections and  hashbrown to grow our containers in a way that we can catch allocation errors. Add  fallible_collections = \u201c0.3\u201d and  hashbrown = \u201c0.9\u201d to our library\u2019s dependencies, then make these changes to  src/lib.rs:\n @@ -1,4 +1,5 @@\r -use std::collections::HashMap;\r +use fallible_collections::FallibleVec;\r+use hashbrown::{HashMap, TryReserveError};\r\r #[derive(Debug, Default)]\r pub struct Counter {\r@@ -6,8 +7,10 @@ pub struct Counter {\r }\r\r impl Counter {\r - pub fn push_key_value(&amp;mut self, key: u32, value: u32) {\r- self.items.entry(key).or_default().push(value);\r + pub fn push_key_value(&amp;mut self, key: u32, value: u32)\r+ -&gt; Result&lt;(), TryReserveError&gt;\r+ {\r+ // Make space for a new key - this is unnecessary if\r+ // `key` is already present, but it\u2019s probably cheaper\r+ // to do this every time (since it will only grow if\r+ // needed) than to guard it with a lookup of `key`.\r+ // In real code, profile to be sure!\r+ self.items.try_reserve(1)?;\r+ // `.entry()` should not longer reallocate here, and\r+ // we replace .push() with .try_push() for the vector\r+ self.items.entry(key).or_default().try_push(value)?;\r+ Ok(())\r }\r\r pub fn values_for_key(&amp;self, key: u32) -&gt; Option&lt;&amp;[u32]&gt; {\r@@ -22,10 +25,10 @@ mod tests {\r #[test]\r fn it_works() {\r let mut c = Counter::default();\r - c.push_key_value(0, 1);\r- c.push_key_value(0, 2);\r- c.push_key_value(5, 100);\r- c.push_key_value(5, 4);\r + c.push_key_value(0, 1).unwrap();\r+ c.push_key_value(0, 2).unwrap();\r+ c.push_key_value(5, 100).unwrap();\r+ c.push_key_value(5, 4).unwrap();\r assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]);\r assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]);\r assert_eq!(c.values_for_key(1), None);\n We\u2019ll also need to update our OOM injection tests both for the change to the function\u2019s return type and because the assertions we have in the test may not be valid: If we try to push a new key/value pair but an allocation fails, that pair won\u2019t be pushed. Make these changes to  tests/oom-injection.rs:\n @@ -61,12 +61,10 @@ fn run_demo_with_oom_injection() {\r GLOBAL.enable_oom_injection();\r for _ in 0..1_000 {\r let mut c = Counter::default();\r - c.push_key_value(0, 1);\r - c.push_key_value(0, 2);\r - c.push_key_value(5, 100);\r - c.push_key_value(5, 4);\r - assert_eq!(c.values_for_key(0).unwrap(), &amp;[1, 2]);\r - assert_eq!(c.values_for_key(5).unwrap(), &amp;[100, 4]);\r + let _ = c.push_key_value(0, 1);\r + let _ = c.push_key_value(0, 2);\r + let _ = c.push_key_value(5, 100);\r + let _ = c.push_key_value(5, 4);\r assert_eq!(c.values_for_key(1), None);\r }\r GLOBAL.disable_oom_injection();\n We should now be able to run  cargo test and see both the unit tests and the OOM injection test passing. Our library will no longer abort on an OOM event and will instead return an error.\n  This blog walked through one possible way to adapt a library to handle OOM events without aborting the process. In general, I would  not recommend giving libraries this kind of treatment, as it has multiple real costs:\n There are runtime costs with allocation checking. You need to be careful with how you convert allocation failures to errors. For example, calling  try_push in a loop is probably a terrible idea, and instead you should  try_reserve prior to looping. This is an extra dimension of concern that you don\u2019t usually need to consider.\n There are API and implementation complexity costs that will affect maintenance over time. You may be able to offset this some by panicking instead of returning  Result, if appropriate, although be aware that panicking itself allocates memory.\n There may be better solutions in the future \u2014 e.g., full support for panicking on OOM in a future version of Rust. I\u2019d like to keep our workarounds to a minimum in hope of switching to the language-supported techniques as soon as possible.\n However, if you weigh the costs and decide that trying to handle OOM events in stable Rust today is worthwhile, hopefully this blog gave you some ideas. If you want to pursue the OOM-injecting-global-allocator test plan sketched out above, consider that there are almost certainly more useful ways of deciding when to inject an OOM event: You could count allocations in an attempt to cover every one, you could scan the backtrac\n......", "posttime": "2021-08-02 00:26:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u5b58,rust,\u5904\u7406,memory,\u5206\u914d", "title": "\u5982\u4f55\u5904\u7406 Rust \u4e2d\u7684\u5185\u5b58\u4e0d\u8db3\u60c5\u51b5", "title_en": "How to Deal with Out-of-Memory Conditions in Rust", "transed": 1, "url": "https://www.crowdstrike.com/blog/dealing-with-out-of-memory-conditions-in-rust/", "via": "", "real_tags": ["\u5185\u5b58", "rust", "\u5904\u7406", "memory", "\u5206\u914d"]}, {"category": "", "categoryclass": "", "imagename": "0d6d5ae574689df44b20f56a782c6344.jpg", "infoid": 1071012, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u66fe\u7ecf\u9605\u8bfb\u8fc7\u9690\u79c1\u653f\u7b56\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u5176\u4e2d\u6709\u4e00\u6bb5\u5185\u5bb9\u8bf4\u660e\u4e86\u60a8\u7684\u6570\u636e\u5c06\u5982\u4f55\u4e0e\u6267\u6cd5\u90e8\u95e8\u5171\u4eab\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u8b66\u65b9\u8981\u6c42\u5e76\u62e5\u6709\u5fc5\u8981\u7684\u6587\u4e66\u5de5\u4f5c\uff0c\u4ed6\u4eec\u5f88\u53ef\u80fd\u4f1a\u5f97\u5230\u5b83\u3002\u4f46\u4e5f\u8bb8\uff0c\u50cf\u5927\u591a\u6570\u7f8e\u56fd\u6210\u5e74\u4eba\u4e00\u6837\uff0c\u60a8\u6839\u672c\u6ca1\u6709\u4ed4\u7ec6\u9605\u8bfb\u9690\u79c1\u653f\u7b56\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u4f1a\u60ca\u8bb6\u5730\u53d1\u73b0\u60a8\u6709\u591a\u5c11\u6570\u636e\u638c\u63e1\u5728\u7b2c\u4e09\u65b9\u624b\u4e2d\uff0c\u6267\u6cd5\u90e8\u95e8\u6709\u591a\u5c11\u8bbf\u95ee\u6743\u9650\uff0c\u8fd9\u4e9b\u6570\u636e\u53ef\u80fd\u5982\u4f55\u88ab\u7528\u6765\u5bf9\u4ed8\u60a8\uff0c\u6216\u8005\u60a8\u6709\u4ec0\u4e48\u6743\u5229\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u9632\u6b62\u5b83\u3002\u8bb8\u591a\u56fd\u4f1a\u5927\u53a6\u53db\u4e71\u5206\u5b50\u73b0\u5728\u53ef\u80fd\u5df2\u7ecf\u53d1\u73b0\u4e86\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u9488\u5bf9\u4ed6\u4eec\u7684\u6848\u4ef6\u662f\u6839\u636e\u4ece Facebook \u548c\u8c37\u6b4c\u7b49\u4e92\u8054\u7f51\u670d\u52a1\u4e2d\u83b7\u53d6\u7684\u8bc1\u636e\u5efa\u7acb\u7684\u3002\u867d\u7136\u4ed6\u4eec\u4e3a\u8c03\u67e5\u4eba\u5458\uff08\u548c\u4e92\u8054\u7f51\u4fa6\u63a2\uff09\u7559\u4e0b\u4e86\u4e00\u7cfb\u5217\u6570\u5b57\u8bc1\u636e\uff0c\u4f46\u5e76\u975e\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u90fd\u662f\u516c\u5f00\u7684\u3002\u5982\u679c\u60a8\u9605\u8bfb\u4e0e 1 \u6708 6 \u65e5\u5728\u534e\u76db\u987f\u53d1\u751f\u7684\u4e8b\u4ef6\u6709\u5173\u7684\u72af\u7f6a\u6848\u4ef6\uff0c\u60a8\u4f1a\u53d1\u73b0 FBI \u8fd8\u4ece\u5404\u79cd\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u548c\u79fb\u52a8\u7535\u8bdd\u8fd0\u8425\u5546\u90a3\u91cc\u83b7\u5f97\u4e86\u5185\u90e8\u8bb0\u5f55\u3002\u4f46\u662f\uff0c\u60a8\u4e0d\u5fc5\u6210\u4e3a\u6267\u6cd5\u90e8\u95e8\u6240\u8c13\u7684\u53db\u4e71\u5206\u5b50\u5373\u53ef\u4ece\u53e6\u4e00\u5bb6\u516c\u53f8\u83b7\u53d6\u6709\u5173\u60a8\u7684\u6570\u636e\u3002\u4e8b\u5b9e\u4e0a\uff0c\u60a8\u6839\u672c\u4e0d\u5fc5\u6000\u7591\u72af\u7f6a\u3002\u8b66\u65b9\u8d8a\u6765\u8d8a\u591a\u5730\u4f7f\u7528\u53cd\u5411\u641c\u67e5\u4ee4\u7b49\u7b56\u7565\u6765\u83b7\u53d6\u8bb8\u591a\u4eba\u7684\u6570\u636e\uff0c\u4ee5\u671f\u5728\u5176\u4e2d\u627e\u5230\u5acc\u7591\u4eba\u3002\u60a8\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5728\u9519\u8bef\u7684\u65f6\u95f4\u51fa\u73b0\u5728\u9519\u8bef\u7684\u5730\u70b9\u6216\u67e5\u627e\u4e86\u9519\u8bef\u7684\u641c\u7d22\u8bcd\u800c\u9677\u5165\u56f0\u5883\u3002\u800c\u4e14\u60a8\u53ef\u80fd\u6c38\u8fdc\u4e0d\u77e5\u9053\u81ea\u5df1\u9677\u5165\u4e86\u62d6\u7f51\u3002 ACLU \u6f14\u8bb2\u7684\u76d1\u89c6\u548c\u7f51\u7edc\u5b89\u5168\u987e\u95ee\u8a79\u59ae\u5f17\u00b7\u683c\u5170\u5c3c\u514b (Jennifer Granick) \u8868\u793a\uff1a\u201c\u8c03\u67e5\u4eba\u5458\u5c06\u5728\u6ca1\u6709\u5acc\u7591\u4eba\u7684\u60c5\u51b5\u4e0b\u524d\u5f80\u8fd9\u4e9b\u4f9b\u5e94\u5546\uff0c\u5e76\u8981\u6c42\u63d0\u4f9b\u4e00\u7cfb\u5217\u975e\u9488\u5bf9\u6027\u7684\u5e7f\u6cdb\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4ece\u6839\u672c\u4e0a\u786e\u5b9a\u4ed6\u4eec\u5c1a\u672a\u60f3\u5230\u7684\u5acc\u7591\u4eba\u3002\u201d \u3001\u9690\u79c1\u548c\u6280\u672f\u9879\u76ee\uff0c\u544a\u8bc9 Recode\u3002 \u201c\u8fd9\u4e9b\u66f4\u5927\u89c4\u6a21\u7684\u76d1\u89c6\u6280\u672f\u8d8a\u6765\u8d8a\u666e\u904d\u3002\u201d\u57fa\u672c\u4e0a\uff0c\u5982\u679c\u4e00\u5bb6\u516c\u53f8\u6536\u96c6\u548c\u5b58\u50a8\u60a8\u7684\u6570\u636e\uff0c\u90a3\u4e48\u8b66\u5bdf\u53ef\u80fd\u4f1a\u5f97\u5230\u4ed6\u4eec\u7684\u624b\u3002\u5f53\u6d89\u53ca\u5230\u60a8\u7684\u6570\u5b57\u751f\u6d3b\u65f6\uff0c\u60a8\u7684\u5f88\u591a\u6570\u636e\u90fd\u7531\u7b2c\u4e09\u65b9\u6301\u6709\u4ee5\u4f9b\u83b7\u53d6\u3002\u8fd9\u662f\u4ed6\u4eec\u5982\u4f55\u83b7\u5f97\u5b83\u3002\u597d\u6d88\u606f\u662f\u6709\u4e00\u4e9b\u9690\u79c1\u6cd5\u89c4\u5b9a\u4e86\u653f\u5e9c\u662f\u5426\u4ee5\u53ca\u5982\u4f55\u83b7\u53d6\u60a8\u7684\u6570\u636e\uff1a1986 \u5e74\u9996\u6b21\u9881\u5e03\u7684\u7535\u5b50\u901a\u4fe1\u9690\u79c1\u6cd5 (ECPA) \u5236\u5b9a\u4e86\u8fd9\u4e9b\u89c4\u5219\u3002\u4f46\u8be5\u6cd5\u5f8b\u5df2\u6709\u6570\u5341\u5e74\u5386\u53f2\u3002\u867d\u7136\u5b83\u81ea 1986 \u5e74\u4ee5\u6765\u4e00\u76f4\u5728\u66f4\u65b0\uff0c\u4f46\u5b83\u7684\u8bb8\u591a\u539f\u5219\u5e76\u6ca1\u6709\u771f\u6b63\u53cd\u6620\u6211\u4eec\u4eca\u5929\u5982\u4f55\u4f7f\u7528\u4e92\u8054\u7f51\uff0c\u6216\u8005\u6211\u4eec\u6709\u591a\u5c11\u6570\u636e\u638c\u63e1\u5728\u4e3a\u6211\u4eec\u63d0\u4f9b\u8fd9\u4e9b\u670d\u52a1\u7684\u516c\u53f8\u624b\u4e2d\u3002\n\u8fd9\u610f\u5473\u7740\u5b58\u5728\u7070\u8272\u5730\u5e26\u548c\u6f0f\u6d1e\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u4e8b\u60c5\uff0c\u653f\u5e9c\u6839\u672c\u4e0d\u9700\u8981\u7ecf\u8fc7\u4efb\u4f55\u6cd5\u5f8b\u7a0b\u5e8f\u3002\u4f8b\u5982\uff0c\u6267\u6cd5\u90e8\u95e8\u53ef\u4ee5\u5e76\u4e14\u786e\u5b9e\u4ece\u6570\u636e\u7ecf\u7eaa\u4eba\u90a3\u91cc\u8d2d\u4e70\u4f4d\u7f6e\u6570\u636e\u3002\u867d\u7136\u4f4d\u7f6e\u6570\u636e\u516c\u53f8\u58f0\u79f0\u4ed6\u4eec\u7684\u6570\u636e\u5df2\u88ab\u53d6\u6d88\u8bc6\u522b\uff0c\u4f46\u4e13\u5bb6\u8868\u793a\u901a\u5e38\u53ef\u4ee5\u91cd\u65b0\u8bc6\u522b\u4e2a\u4eba\u3002\u7535\u5b50\u524d\u6cbf\u57fa\u91d1\u4f1a (EFF) \u7684\u526f\u6267\u884c\u8463\u4e8b\u517c\u603b\u6cd5\u5f8b\u987e\u95ee\u5e93\u5c14\u7279\u00b7\u5965\u666e\u8428\u5c14 (Kurt Opsahl) \u8bf4\uff1a\u201c\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u5982\u679c\u5b83\u53ef\u4ee5\u51fa\u552e\uff0c\u90a3\u5c31\u6ca1\u95ee\u9898\u4e86\u3002\u201d \u201c\u5f53\u7136\uff0c\u5176\u4e2d\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u8bb8\u591a\u8fd9\u4e9b\u6570\u636e\u7ecf\u7eaa\u4eba\u5728\u6ca1\u6709\u7ecf\u8fc7\u60a8\u53ef\u80fd\u60f3\u8981\u7684\u540c\u610f\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u83b7\u53d6\u4fe1\u606f\u3002\u201d\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4f4d\u7f6e\u6570\u636e\u3002\u9762\u90e8\u8bc6\u522b\u516c\u53f8 Clearview AI \u7684\u6574\u4e2a\u5546\u4e1a\u6a21\u5f0f\u662f\u5411\u6267\u6cd5\u673a\u6784\u51fa\u552e\u5176\u9762\u90e8\u8bc6\u522b\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u662f\u4ece Clearview \u4ece\u4e92\u8054\u7f51\u4e0a\u6293\u53d6\u7684\u516c\u5f00\u7167\u7247\u4e2d\u6311\u9009\u51fa\u6765\u7684\u3002\u9664\u975e\u60a8\u5c45\u4f4f\u5728\u7981\u6b62\u9762\u90e8\u8bc6\u522b\u7684\u57ce\u5e02\u6216\u5dde\uff0c\u5426\u5219\u76ee\u524d\u8b66\u65b9\u4e3a\u60a8\u7684\u9762\u90e8\u6570\u636e\u4ed8\u8d39\u662f\u5408\u6cd5\u7684\uff0c\u65e0\u8bba\u5176\u80cc\u540e\u7684\u6280\u672f\u6709\u591a\u5927\u7f3a\u9677\u3002\u5982\u679c\u7981\u6b62\u6267\u6cd5\u90e8\u95e8\u8d2d\u4e70\u5546\u4e1a\u53ef\u7528\u6570\u636e\u7684\u7b2c\u56db\u4fee\u6b63\u6848\u975e\u9500\u552e\u6cd5\u6848\u4e4b\u7c7b\u7684\u4e1c\u897f\u6210\u4e3a\u6cd5\u5f8b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u4f1a\u6539\u53d8\u3002\u4f46\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u6f0f\u6d1e\u662f\u5f00\u653e\u7684\u3002 \u201c\u4efb\u4f55\u6280\u672f\u6cd5\u9762\u4e34\u7684\u6311\u6218\u4e4b\u4e00\u662f\u6280\u672f\u7684\u53d1\u5c55\u901f\u5ea6\u5feb\u4e8e\u6cd5\u5f8b\uff0c\u201d\u5965\u666e\u8428\u5c14\u8bf4\u3002 \u201c\u5c06\u8fd9\u4e9b\u6cd5\u5f8b\u5e94\u7528\u4e8e\u73b0\u4ee3\u73af\u5883\u59cb\u7ec8\u662f\u4e00\u4e2a\u6311\u6218\uff0c\u4f46 [ECPA] \u5728\u51e0\u5341\u5e74\u540e\u4ecd\u7136\u63d0\u4f9b\u4e86\u53ef\u9760\u7684\u9690\u79c1\u4fdd\u62a4\u3002\u80af\u5b9a\u4f1a\u6709\u6539\u8fdb\uff0c\u4f46\u5b83\u4eca\u5929\u4ecd\u7136\u505a\u5f97\u5f88\u597d\u3002\u201d\u5982\u679c\u60a8\u6d89\u5acc\u72af\u7f6a\u5e76\u4e14\u8b66\u5bdf\u6b63\u5728\u60a8\u7684\u6570\u5b57\u751f\u6d3b\u4e2d\u5bfb\u627e\u8bc1\u636e\uff0c\u90a3\u4e48 ECPA \u8868\u793a\uff0c\u5728\u5141\u8bb8\u516c\u53f8\u63d0\u4f9b\u4ed6\u4eec\u8981\u6c42\u7684\u6570\u636e\u4e4b\u524d\uff0c\u4ed6\u4eec\u5fc5\u987b\u6709\u4f20\u7968\u3001\u6cd5\u9662\u547d\u4ee4\u6216\u6388\u6743\u4ee4\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u516c\u53f8\u4e0d\u80fd\u968f\u610f\u4ea4\u51fa\u3002\u6709\u4e00\u4e9b\u4f8b\u5916\u2014\u2014\u4f8b\u5982\uff0c\u5982\u679c\u6709\u7406\u7531\u76f8\u4fe1\u5371\u9669\u8feb\u5728\u7709\u776b\u6216\u72af\u7f6a\u6b63\u5728\u8fdb\u884c\u4e2d\u3002\u4f46\u5728\u5211\u4e8b\u8c03\u67e5\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u4f8b\u5916\u4e0d\u9002\u7528\u3002\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\u8c03\u67e5\u4eba\u5458\u5fc5\u987b\u4f7f\u7528\u7684\u6cd5\u5f8b\u7a0b\u5e8f\u53d6\u51b3\u4e8e\u4ed6\u4eec\u8981\u5bfb\u627e\u7684\u6570\u636e\uff1a\n\u4f20\u7968\uff1a\u8fd9\u5411\u8c03\u67e5\u4eba\u5458\u63d0\u4f9b\u4e86\u6240\u8c13\u7684\u8ba2\u9605\u8005\u4fe1\u606f\uff0c\u4f8b\u5982\u60a8\u7684\u59d3\u540d\u3001\u5730\u5740\u3001\u670d\u52a1\u65f6\u95f4\uff08\u4f8b\u5982\uff0c\u60a8\u62e5\u6709 Facebook \u4e2a\u4eba\u8d44\u6599\u7684\u65f6\u95f4\uff09\u3001\u65e5\u5fd7\u4fe1\u606f\uff08\u60a8\u4f55\u65f6\u62e8\u6253\u7535\u8bdd\u6216\u767b\u5f55\u548c\u4ece\u60a8\u7684 Facebook \u5e10\u6237\u4e2d\u5220\u9664\uff09\u548c\u4fe1\u7528\u5361\u4fe1\u606f\u3002\u6cd5\u9662\u547d\u4ee4\uff0c\u6216\u201cD\u201d\u547d\u4ee4\uff1aD \u6307\u7684\u662f\u7f8e\u56fd\u6cd5\u5178\u7b2c 18 \u6761\u7b2c 2703(d) \u6761\uff0c\u5176\u4e2d\u89c4\u5b9a\u6cd5\u9662\u53ef\u4ee5\u547d\u4ee4\u4e92\u8054\u7f51\u670d\u52a1\u63d0\u4f9b\u5546\u5411\u6267\u6cd5\u90e8\u95e8\u63d0\u4f9b\u6709\u5173\u8ba2\u6237\u7684\u4efb\u4f55\u8bb0\u5f55\uff0c\u4f46\u5176\u901a\u4fe1\u5185\u5bb9\u9664\u5916\u3002\u56e0\u6b64\uff0c\u8fd9\u53ef\u80fd\u5305\u62ec\u8c01\u7ed9\u60a8\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u4ee5\u53ca\u4f55\u65f6\u53d1\u9001\uff0c\u4f46\u4e0d\u5305\u62ec\u5b9e\u9645\u7535\u5b50\u90ae\u4ef6\u7684\u5185\u5bb9\u3002\u641c\u67e5\u4ee4\uff1a\u8fd9\u4f7f\u6267\u6cd5\u90e8\u95e8\u53ef\u4ee5\u8bbf\u95ee\u5185\u5bb9\u672c\u8eab\uff0c\u7279\u522b\u662f\u5b58\u50a8\u7684\u5185\u5bb9\uff0c\u5305\u62ec\u7535\u5b50\u90ae\u4ef6\u3001\u7167\u7247\u3001\u89c6\u9891\u3001\u5e16\u5b50\u3001\u76f4\u63a5\u6d88\u606f\u548c\u4f4d\u7f6e\u4fe1\u606f\u3002\u867d\u7136 ECPA \u8868\u793a\u53ef\u4ee5\u901a\u8fc7\u4f20\u7968\u83b7\u5f97\u5b58\u50a8\u8d85\u8fc7 180 \u5929\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u4f46\u8be5\u89c4\u5219\u53ef\u4ee5\u8ffd\u6eaf\u5230\u4eba\u4eec\u7ecf\u5e38\u5c06\u7535\u5b50\u90ae\u4ef6\u4fdd\u5b58\u5728\u53e6\u4e00\u5bb6\u516c\u53f8\u7684\u670d\u52a1\u5668\u4e0a\uff08\u60a8\u7684 Gmail \u6536\u4ef6\u7bb1\u53ef\u4ee5\u8ffd\u6eaf\u5230\u591a\u8fdc\uff1f\uff09\u6216\u5c06\u5176\u7528\u4f5c\u5907\u4efd\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4e00\u4e9b\u6cd5\u9662\u5df2\u7ecf\u88c1\u5b9a\uff0c\u65e0\u8bba\u7535\u5b50\u90ae\u4ef6\u7684\u5e74\u4ee3\u5982\u4f55\uff0c\u90fd\u9700\u8981\u5bf9\u7535\u5b50\u90ae\u4ef6\u5185\u5bb9\u53d1\u51fa\u6388\u6743\u4ee4\uff0c\u800c\u4e14\u670d\u52a1\u63d0\u4f9b\u5546\u901a\u5e38\u4f1a\u5728\u540c\u610f\u79fb\u4ea4\u4e4b\u524d\u8981\u6c42\u6388\u6743\u4ee4\u3002\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u653f\u5e9c\u8981\u6c42\u8fd9\u4e9b\u516c\u53f8\u63d0\u4f9b\u6570\u636e\u7684\u9891\u7387\uff0c\u5176\u4e2d\u4e00\u4e9b\u516c\u53f8\u786e\u5b9e\u4f1a\u53d1\u5e03\u900f\u660e\u5ea6\u62a5\u544a\uff0c\u5176\u4e2d\u63d0\u4f9b\u4e86\u6709\u5173\u4ed6\u4eec\u6536\u5230\u7684\u8bf7\u6c42\u6570\u91cf\u3001\u7c7b\u578b\u4ee5\u53ca\u6ee1\u8db3\u8fd9\u4e9b\u8bf7\u6c42\u7684\u6570\u91cf\u7684\u57fa\u672c\u8be6\u7ec6\u4fe1\u606f\u3002\u5b83\u4eec\u8fd8\u663e\u793a\u4e86\u8fd9\u4e9b\u8bf7\u6c42\u591a\u5e74\u6765\u589e\u52a0\u4e86\u591a\u5c11\u3002\u8fd9\u662f Facebook \u7684\u900f\u660e\u5ea6\u62a5\u544a\uff0c\u8fd9\u662f\u8c37\u6b4c\u7684\uff0c\u8fd9\u662f\u82f9\u679c\u7684\u3002 EFF \u8fd8\u5728 2017 \u5e74\u53d1\u5e03\u4e86\u4e00\u4efd\u6307\u5357\uff0c\u5c55\u793a\u4e86\u51e0\u5bb6\u79d1\u6280\u516c\u53f8\u5982\u4f55\u54cd\u5e94\u653f\u5e9c\u8981\u6c42\u3002\u60a8\u4e0d\u5fc5\u662f\u5acc\u7591\u4eba\u6216\u53c2\u4e0e\u72af\u7f6a\uff0c\u6267\u6cd5\u90e8\u95e8\u5373\u53ef\u83b7\u53d6\u60a8\u7684\u6570\u636e \u56e0\u6b64\uff0c\u5047\u8bbe\u60a8\u5df2\u51b3\u5b9a\u6c38\u8fdc\u4e0d\u4f1a\u72af\u7f6a\uff0c\u56e0\u6b64\u6267\u6cd5\u90e8\u95e8\u83b7\u53d6\u60a8\u7684\u6570\u636e\u6c38\u8fdc\u4e0d\u4f1a\u6210\u4e3a\u60a8\u7684\u95ee\u9898\u3002\u4f60\u9519\u4e86\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u60a8\u7684\u6570\u636e\u53ef\u80fd\u5305\u542b\u5728\u4ece\u6570\u636e\u7ecf\u7eaa\u4eba\u5904\u8d2d\u4e70\u7684\u5546\u54c1\u4e2d\u3002\u6216\u8005\uff0c\u5b83\u53ef\u80fd\u4f1a\u88ab\u6536\u96c6\u5230\u6570\u5b57\u62d6\u7f51\u4e2d\uff0c\u4e5f\u79f0\u4e3a\u53cd\u5411\u641c\u67e5\u4ee4\uff0c\u8b66\u65b9\u5728\u5176\u4e2d\u7d22\u53d6\u5927\u91cf\u4eba\u5458\u7684\u6570\u636e\uff0c\u5e0c\u671b\u80fd\u5728\u5176\u4e2d\u627e\u5230\u5acc\u7591\u4eba\u3002\n\u7f8e\u56fd\u516c\u6c11\u81ea\u7531\u8054\u76df\u7684\u683c\u62c9\u5c3c\u514b\u8bf4\uff1a\u201c\u8fd9\u4e9b\u662f\u53d1\u73b0\u8fc7\u53bb\u6c38\u8fdc\u4e0d\u53ef\u80fd\u53d1\u73b0\u7684\u4e8b\u7269\u7684\u65b0\u6280\u672f\uff0c\u5e76\u4e14\u6709\u80fd\u529b\u5c06\u65e0\u8f9c\u7684\u4eba\u7ef3\u4e4b\u4ee5\u6cd5\u3002\u201d\u4e24\u4e2a\u4f8b\u5b50\uff1a\u4f60\u53bb\u4e86\u54ea\u91cc\uff0c\u4f60\u641c\u7d22\u4e86\u4ec0\u4e48\u3002\u5728\u5730\u7406\u56f4\u680f\u4ee4\u4e2d\uff0c\u6267\u6cd5\u90e8\u95e8\u83b7\u53d6\u6709\u5173\u7279\u5b9a\u65f6\u95f4\u7279\u5b9a\u533a\u57df\u5185\u6240\u6709\u8bbe\u5907\u7684\u4fe1\u606f\uff08\u4f8b\u5982\uff0c\u53d1\u751f\u72af\u7f6a\u7684\u5730\u70b9\uff09\uff0c\u7136\u540e\u7f29\u5c0f\u8303\u56f4\u5e76\u83b7\u53d6\u4ed6\u4eec\u8ba4\u4e3a\u5c5e\u4e8e\u5176\u7684\u8bbe\u5907\u7684\u5e10\u6237\u4fe1\u606f\u5acc\u7591\u4eba\u3002\u5bf9\u4e8e\u5173\u952e\u5b57\u641c\u67e5\u4ee4\uff0c\u8b66\u65b9\u53ef\u80fd\u4f1a\u5411\u6d4f\u89c8\u5668\u8be2\u95ee\u641c\u7d22\u4e0e\u6848\u4ef6\u76f8\u5173\u7684\u7279\u5b9a\u672f\u8bed\u7684\u6240\u6709 IP \u5730\u5740\uff0c\u7136\u540e\u4ece\u8be5\u7ec4\u4e2d\u8bc6\u522b\u53ef\u80fd\u7684\u5acc\u7591\u4eba\u3002\u8fd9\u4e9b\u60c5\u51b5\u4ecd\u7136\u4ee3\u8868\u7740\u6cd5\u5f8b\u7684\u7070\u8272\u5730\u5e26\u3002\u867d\u7136\u4e00\u4e9b\u6cd5\u5b98\u79f0\u4ed6\u4eec\u8fdd\u53cd\u4e86\u7b2c\u56db\u4fee\u6b63\u6848\u5e76\u62d2\u7edd\u4e86\u653f\u5e9c\u7684\u902e\u6355\u4ee4\u8bf7\u6c42\uff0c\u4f46\u5176\u4ed6\u4eba\u5219\u5141\u8bb8\u4ed6\u4eec\u8fd9\u6837\u505a\u3002\u6211\u4eec\u81f3\u5c11\u770b\u5230\u8fc7\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5176\u4e2d\u53cd\u5411\u641c\u67e5\u4ee4\u5bfc\u81f4\u4e00\u540d\u65e0\u8f9c\u8005\u88ab\u6355\u3002\u591a\u5e74\u6765\uff0c\u60a8\u53ef\u80fd\u4e0d\u4f1a\u88ab\u544a\u77e5\u60a8\u7684\u6570\u636e\u5df2\u88ab\u83b7\u53d6\u2014\u2014\u5982\u679c\u60a8\u88ab\u544a\u77e5 \u53e6\u4e00\u4e2a\u4ee4\u4eba\u4e0d\u5b89\u7684\u65b9\u9762\u662f\uff0c\u6839\u636e\u8bf7\u6c42\u7684\u5185\u5bb9\u548c\u539f\u56e0\uff0c\u60a8\u53ef\u80fd\u6c38\u8fdc\u4e0d\u77e5\u9053\u8b66\u5bdf\u662f\u5426\u5411\u516c\u53f8\u7d22\u53d6\u4e86\u60a8\u7684\u6570\u636e\uff0c\u6216\u8005\u90a3\u5bb6\u516c\u53f8\u7ed9\u4e86\u4ed6\u4eec\u3002\u5982\u679c\u60a8\u88ab\u6307\u63a7\u72af\u7f6a\u5e76\u4e14\u8be5\u6570\u636e\u88ab\u7528\u4f5c\u5bf9\u60a8\u4e0d\u5229\u7684\u8bc1\u636e\uff0c\u90a3\u4e48\u60a8\u5c31\u4f1a\u77e5\u9053\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u7684\u6570\u636e\u662f\u901a\u8fc7\u4ece\u6570\u636e\u7ecf\u7eaa\u4eba\u5904\u8d2d\u4e70\u6216\u4f5c\u4e3a\u6279\u91cf\u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u83b7\u5f97\u7684\uff0c\u5219\u60a8\u53ef\u80fd\u4e0d\u4f1a\u3002\u5982\u679c\u4e00\u5bb6\u516c\u53f8\u544a\u8bc9\u60a8\u6267\u6cd5\u90e8\u95e8\u9700\u8981\u60a8\u7684\u6570\u636e\u5e76\u63d0\u524d\u901a\u77e5\u60a8\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u81ea\u5df1\u53cd\u5bf9\u4ed6\u4eec\u7684\u8981\u6c42\u3002\u4f46\u662f\u8c03\u67e5\u4eba\u5458\u53ef\u4ee5\u83b7\u5f97\u7981\u6b62\u516c\u53f8\u544a\u8bc9\u7528\u6237\u4efb\u4f55\u4e8b\u60c5\u7684\u7981\u8a00\u4ee4\uff0c\u6b64\u65f6\u60a8\u53ea\u80fd\u5e0c\u671b\u516c\u53f8\u4e3a\u60a8\u800c\u6218\u3002\u6839\u636e\u4ed6\u4eec\u7684\u900f\u660e\u5ea6\u62a5\u544a\uff0c\u8c37\u6b4c\u3001\u82f9\u679c\u548c Facebook \u6709\u65f6\u4f3c\u4e4e\u4f1a\u53cd\u51fb\u6216\u53cd\u51fb\u2014\u2014\u4f8b\u5982\uff0c\u5982\u679c\u4ed6\u4eec\u8ba4\u4e3a\u8bf7\u6c42\u8fc7\u4e8e\u5bbd\u6cdb\u6216\u8fc7\u4e8e\u7e41\u7410\u2014\u2014\u6240\u4ee5\u5e76\u975e\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u6210\u529f\u3002\u4f46\u8fd9\u5c31\u662f\u4ed6\u4eec\u3002\u4e0d\u4e00\u5b9a\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u5982\u6b64\u3002 \u201c\u5e76\u975e\u6bcf\u4e2a\u63d0\u4f9b\u5546\u90fd\u662f Google \u6216 Facebook\uff0c\u5b83\u4eec\u90fd\u62e5\u6709\u5728\u8054\u90a6\u76d1\u63a7\u6cd5\u65b9\u9762\u5177\u6709\u4e13\u4e1a\u77e5\u8bc6\u7684\u8d44\u6df1\u6cd5\u5f8b\u90e8\u95e8\uff0c\u201dGranick \u8bf4\uff0c\u201c\u6709\u4e9b\u63d0\u4f9b\u5546\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\u3002\u4e5f\u8bb8\u4ed6\u4eec\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u8fd9\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u95ee\u9898\u3002\u201d\n\u5927\u591a\u6570\u653f\u5e9c\u751a\u81f3\u5411\u4e16\u754c\u4e0a\u6700\u5927\u7684\u516c\u53f8\u63d0\u51fa\u7684\u8981\u6c42\u90fd\u4f1a\u5bfc\u81f4\u81f3\u5c11\u62ab\u9732\u4e00\u4e9b\u7528\u6237\u6570\u636e\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u67d0\u4e9b\u4eba\u7684\u6570\u636e\u88ab\u63d0\u4f9b\u7ed9\u653f\u5e9c\u800c\u8be5\u4eba\u591a\u5e74\u4e0d\u77e5\u9053\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u53f8\u6cd5\u90e8\u901a\u8fc7\u5927\u966a\u5ba1\u56e2\u4f20\u7968\u4ece Apple \u83b7\u5f97\u4e86\u6c11\u4e3b\u515a\u4f17\u8bae\u5458 Adam Schiff \u548c Eric Swalwell \u7684\u8ba2\u6237\u8bb0\u5f55\uff08\u53ca\u5176\u5bb6\u4eba\u7684\u8bb0\u5f55\uff09\u3002\u8fd9\u53d1\u751f\u5728 2017 \u5e74\u548c 2018 \u5e74\uff0c\u4f46\u56fd\u4f1a\u8bae\u5458\u76f4\u5230 2021 \u5e74 6 \u6708\u624d\u53d1\u73b0\u7981\u8a00\u4ee4\u5230\u671f\u3002\u5982\u679c\u60a8\u7684\u4fe1\u606f\u88ab\u8bf8\u5982\u53cd\u5411\u641c\u67e5\u4ee4\u4e4b\u7c7b\u7684\u4e1c\u897f\u6e05\u9664\uff0c\u4f46\u60a8\u4ece\u672a\u88ab\u786e\u5b9a\u4e3a\u5acc\u7591\u4eba\u6216\u88ab\u6307\u63a7\uff0c\u5982\u679c\u63d0\u4f9b\u4fe1\u606f\u7684\u516c\u53f8\u6ca1\u6709\u544a\u8bc9\u60a8\uff0c\u60a8\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053\u5b83\u3002 EFF \u7684 Opsahl \u8868\u793a\uff0c\u5927\u591a\u6570\u4e3b\u8981\u79d1\u6280\u516c\u53f8\u90fd\u4f1a\u53d1\u5e03\u900f\u660e\u5ea6\u62a5\u544a\uff0c\u8fd9\u88ab\u8ba4\u4e3a\u662f\u884c\u4e1a\u6700\u4f73\u5b9e\u8df5\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4ed6\u4eec\u90fd\u9075\u5faa\u5b83\uff0c\u4e5f\u4e0d\u5fc5\u8fd9\u6837\u505a\u3002\u5f53\u6d89\u53ca\u5230\u7b2c\u4e09\u65b9\u6301\u6709\u7684\u6570\u636e\u65f6\uff0c\u60a8\u5bf9\u4ed6\u4eec\u662f\u5426\u62ab\u9732\u4ee5\u53ca\u62ab\u9732\u5185\u5bb9\u6ca1\u6709\u592a\u591a\u63a7\u5236\u6743\u6216\u53d1\u8a00\u6743\u3002\u4f60\u4f9d\u8d56\u4e8e\u5728\u73b0\u4ee3\u4e92\u8054\u7f51\u51fa\u73b0\u4e4b\u524d\u5236\u5b9a\u7684\u6cd5\u5f8b\u3001\u6cd5\u5b98\u5bf9\u5b83\u4eec\u7684\u89e3\u91ca\uff08\u5047\u8bbe\u5b83\u5728\u6cd5\u5b98\u9762\u524d\u8fdb\u884c\uff0c\u4f20\u7968\u53ef\u80fd\u4e0d\u4f1a\uff09\uff0c\u4ee5\u53ca\u62e5\u6709\u4f60\u7684\u6570\u636e\u6765\u5bf9\u6297\u5b83\u4eec\u7684\u516c\u53f8\u3002\u5982\u679c\u60a8\u6536\u5230\u6709\u5173\u5f85\u5904\u7406\u8ba2\u5355\u7684\u901a\u77e5\uff0c\u60a8\u6216\u8bb8\u53ef\u4ee5\u81ea\u884c\u5904\u7406\u3002\u8fd9\u4e0d\u80fd\u4fdd\u8bc1\u4f60\u4f1a\u8d62\u3002\u4fdd\u62a4\u6570\u636e\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u4f7f\u7528\u4e00\u5f00\u59cb\u5c31\u65e0\u6cd5\u83b7\u53d6\u6570\u636e\u7684\u670d\u52a1\u3002\u9690\u79c1\u95ee\u9898\uff0c\u5305\u62ec\u4e0d\u53d7\u653f\u5e9c\u76d1\u89c6\u7684\u901a\u4fe1\u80fd\u529b\uff0c\u4f7f\u5f97 Signal \u7b49\u52a0\u5bc6\u6d88\u606f\u5e94\u7528\u7a0b\u5e8f\u548c DuckDuckGo \u7b49\u79c1\u4eba\u6d4f\u89c8\u5668\u8fd1\u5e74\u6765\u6d41\u884c\u8d77\u6765\u3002\u4ed6\u4eec\u5c3d\u91cf\u51cf\u5c11\u4ece\u7528\u6237\u90a3\u91cc\u6536\u96c6\u7684\u6570\u636e\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u8c03\u67e5\u4eba\u5458\u8bd5\u56fe\u6536\u96c6\u8fd9\u4e9b\u6570\u636e\uff0c\u4ed6\u4eec\u5c31\u6ca1\u6709\u4ec0\u4e48\u53ef\u63d0\u4f9b\u7684\u3002\u60a8\u8fd8\u53ef\u4ee5\u8981\u6c42\u670d\u52a1\u4ece\u4ed6\u4eec\u7684\u670d\u52a1\u5668\u4e2d\u5220\u9664\u60a8\u7684\u6570\u636e\uff0c\u6216\u8005\u9996\u5148\u4e0d\u5c06\u5176\u4e0a\u4f20\u7ed9\u4ed6\u4eec\uff08\u5047\u8bbe\u8fd9\u4e9b\u662f\u9009\u9879\uff09\u3002\u5982\u679c\u60a8\u6ca1\u6709\u4e0a\u4f20\u4efb\u4f55\u5185\u5bb9\uff0cFBI \u5c31\u65e0\u6cd5\u4ece Apple \u7684 iCloud \u83b7\u5f97\u592a\u591a\u4fe1\u606f\u3002\u5c4a\u65f6\uff0c\u8c03\u67e5\u4eba\u5458\u5c06\u4e0d\u5f97\u4e0d\u5c1d\u8bd5\u4ece\u60a8\u7684\u8bbe\u5907\u4e2d\u83b7\u53d6\u4ed6\u4eec\u60f3\u8981\u7684\u6570\u636e\u2026\u2026\u8fd9\u662f\u53e6\u4e00\u7c7b\u5408\u6cd5\u8815\u866b\u3002\u6570\u767e\u4e07\u4eba\u901a\u8fc7 Vox \u4e86\u89e3\u65b0\u95fb\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u7684\u4f7f\u547d\u4ece\u672a\u50cf\u73b0\u5728\u8fd9\u6837\u91cd\u8981\uff1a\u901a\u8fc7\u7406\u89e3\u8d4b\u4e88\u6743\u529b\u3002\u8bfb\u8005\u7684\u8d22\u653f\u6350\u52a9\u662f\u652f\u6301\u6211\u4eec\u8d44\u6e90\u5bc6\u96c6\u578b\u5de5\u4f5c\u7684\u5173\u952e\u90e8\u5206\uff0c\u5e76\u5e2e\u52a9\u6211\u4eec\u4fdd\u6301\u65b0\u95fb\u4e1a\u5bf9\u6240\u6709\u4eba\u514d\u8d39\u3002\u8bf7\u8003\u8651\u4ece\u4eca\u5929\u5f00\u59cb\u5411 Vox \u6350\u6b3e\u4f4e\u81f3 3 \u7f8e\u5143\u3002", "note_en": "If you\u2019ve ever read a privacy policy, you may have noticed a section that says something about how your data will be shared with law enforcement, which means if the police demand it and have the necessary paperwork, they\u2019ll likely get it. But maybe,  like most American adults, you don\u2019t read privacy policies very carefully if at all. In that case, you might be surprised to learn how much of your data is in the hands of third parties, how much access law enforcement has to it, how it might be used against you, or what your rights are \u2014 if any \u2014 to prevent it.\n Many of the Capitol insurrectionists might be discovering this now, as cases against them are built with evidence taken from internet services like Facebook and Google. While they left a  trail of  digital evidence for investigators (and  internet  detectives) to follow, not all of that data was publicly available. If you read through  cases of people charged with crimes relating to the events in Washington on January 6, you\u2019ll find the FBI also obtained internal records from various social media platforms and mobile phone carriers.\n But you don\u2019t have to be an alleged insurrectionist for law enforcement to get data about you from another company. In fact, you don\u2019t have to be suspected of a crime at all. The police are increasingly using tactics like reverse search warrants to grab the data of many people in the hope of finding their suspect among them. You might get swept up in one just because you were in the wrong place at the wrong time or looked up the wrong search term. And you might never know that you got caught in the dragnet.\n \u201cInvestigators are going to these providers without a suspect and asking for a broad set of information that is not targeted in order to basically identify suspects that they didn\u2019t already have in mind,\u201d Jennifer Granick, surveillance and cybersecurity counsel for the ACLU\u2019s speech, privacy, and technology project, told Recode. \u201cThese more mass surveillance techniques are increasingly common.\u201d\n Basically, if a company collects and stores your data, then the police can probably get their hands on it. And when it comes to your digital life, there\u2019s a lot of your data held by third parties out there to obtain. Here\u2019s how they get it.\n  The good news is there are some privacy laws that govern if and how the government can get your data: The Electronic Communications Privacy Act (ECPA), first enacted in 1986, established these rules.\n But the law is several decades old. While it has been updated since 1986, many of its tenets don\u2019t really reflect how we use the internet today, or how much of our data stays in the hands of the companies that provide those services to us.\n That means there are gray areas and loopholes, and for some things, the government doesn\u2019t have to go through any legal processes at all. Law enforcement can and does  purchase location data from data brokers, for instance. And while location data companies claim that their data has been de-identified, experts say it\u2019s often possible to re-identify individuals.\n \u201cThe notion is that if it\u2019s available for sale, then it\u2019s okay,\u201d said Kurt Opsahl, deputy executive director and general counsel for the Electronic Frontier Foundation (EFF). \u201cOf course, one of the problems is that a lot of these data brokers  are getting information without going through the consent process that you might want.\u201d\n And it\u2019s not just location data. Facial recognition company Clearview AI\u2019s  entire business model is to sell law enforcement agencies access to its facial recognition database, much of which was culled from publicly available photos Clearview scraped from the internet. Unless you live in a city or state that has outlawed facial recognition, it\u2019s currently legal for the police to pay for your face data,  regardless of how flawed the technology behind it may be.\n This could change if something like the  Fourth Amendment Is Not for Sale Act, which bans law enforcement from purchasing commercially available data, were to become law. But for now, the loophole is open.\n \u201cOne of the challenges with any technology law is technology evolves faster than the law,\u201d Opsahl said. \u201cIt is always a challenge to apply these laws to a modern setting, but [ECPA] still has, all these many decades later, provided a solid privacy protection. There definitely could be improvements, but it\u2019s still doing good work today.\u201d\n  If you\u2019re suspected of a crime and police are looking for evidence in your digital life, then ECPA says they must have a subpoena, court order, or warrant before a company is allowed to provide the data they\u2019re requesting. That is to say, the company can\u2019t just hand it over voluntarily. There are a few exceptions \u2014 for instance, if there\u2019s reason to believe there\u2019s imminent danger or a crime is in progress. But in the case of criminal investigations, those exceptions don\u2019t apply.\n Broadly, the legal process that investigators have to use depends on what data they\u2019re looking for:\n Subpoena: This gives investigators what\u2019s known as subscriber information, such as your name, address, length of service (how long you\u2019ve had your Facebook profile, for example), log information (when you\u2019ve made phone calls or logged into and out of your Facebook account), and credit card information.\n Court order, or \u201cD\u201d order: The D refers to 18 US Code \u00a7 2703(d), which says a court may order internet service providers to give law enforcement any records about the subscriber other than the content of their communications. So that could include who emailed you and when, but not the contents of the actual email.\n Search warrant: This gives law enforcement access to content itself, specifically stored content, which includes emails, photos, videos, posts, direct messages, and location information. While the ECPA says that emails stored for over 180 days can be obtained with just a subpoena, that rule dates back to before people routinely kept their emails on another company\u2019s server (how far back does your Gmail inbox go?) or used it as a backup. At this point, several courts have ruled that a warrant is necessary for email content regardless of how old the emails are, and service providers generally demand a warrant before they\u2019ll agree to hand them over.\n If you want to get an idea of how often the government requests data from these companies, some of them do release transparency reports that give basic details about how many requests they get, what type, and how many of those requests they fulfill. They also show how much those requests have increased over the years. Here\u2019s  Facebook\u2019s transparency report, here\u2019s  Google\u2019s, and here\u2019s  Apple\u2019s. The EFF also  put out a guide in 2017 showing how several tech companies respond to government requests.\n You don\u2019t have to be a suspect or involved in a crime for law enforcement to get your data\n So, let\u2019s say you\u2019ve decided that you will never commit a crime so law enforcement obtaining your data will never be an issue for you. You\u2019re wrong.\n As mentioned above, your data could be included in a purchase from a data broker. Or it may be scooped up in a digital dragnet, also known as a reverse search warrant, where police request data about a large group of people in the hope of finding their suspect within them.\n \u201cThese are novel techniques to discover things that never could have been discovered in the past, and which have the capacity to rope in innocent people,\u201d Granick, of the ACLU, said.\n Two examples of this: where you went and what you searched for. In a  geofence warrant, law enforcement gets information about all the devices that were in a certain area at a certain time \u2014 say, where a crime occurred \u2014 then narrows them down and gets account information for the device(s) they think belong to their suspect(s). For  keyword warrants, police may ask a browser for all the IP addresses that searched for a certain term related to their case and then identify a possible suspect from that group.\n These situations still represent a  legal gray area. While some judges have called them a Fourth Amendment violation and refused the government\u2019s requests for warrants, others have allowed them. And we\u2019ve seen at least one instance where reverse search warrants have led to the  arrest of an innocent person.\n You may not be told for years that your data was obtained \u2014 if you\u2019re told at all\n Another troubling aspect to this is that, depending on what\u2019s being requested and why, you may never know if police requested your data from a company or if that company gave it to them. If you\u2019re charged with a crime and that data is used as evidence against you, then you\u2019ll know. But if your data is obtained through purchase from a data broker or as part of a bulk request, you might not. If a company tells you that law enforcement wants your data and gives you advance notice, then you can try to fight their request yourself. But investigators can get gag orders that prevent companies from telling users anything, at which point you\u2019re left to hope that the company fights for you.\n According to their transparency reports, Google, Apple, and Facebook do appear to fight or push back sometimes \u2014 for example, if they think a request is  overly broad or burdensome \u2014 so not every request is successful. But that\u2019s them. It\u2019s not necessarily true of everyone.\n \u201cNot every provider is a Google or a Facebook that has a deep-bench legal department with serious expertise in federal surveillance law,\u201d Granick said \u201cSome providers, we don\u2019t know what they do. Maybe they don\u2019t do anything. That\u2019s a real issue.\u201d\n The majority of government requests even to the biggest companies in the world result in the disclosure of at least some user data, and we\u2019ve seen cases where someone\u2019s data was given to the government and that person didn\u2019t know for years. For instance, the Department of Justice obtained Democratic Reps. Adam Schiff\u2019s and Eric Swalwell\u2019s subscriber records (and that of their family members)  from Apple through a grand jury subpoena. This occurred in 2017 and 2018, but the Congress members only found out about it in June 2021, when the gag order expired.\n If your information is swept up in something like a reverse search warrant but you\u2019re never identified as a suspect or charged, you may never know about it at all if the company that provided it doesn\u2019t tell you. Opsahl, of the EFF, said that most of the major tech companies post transparency reports and it\u2019s considered an industry best practice to do so. That doesn\u2019t mean they all follow it, nor do they have to.\n  When it comes to your data held by third parties, you don\u2019t have much control or say over if and what they\u2019ll disclose. You\u2019re relying on laws written before the modern internet existed, a judge\u2019s interpretation of them (assuming it goes before a judge, which subpoenas may not), and the companies that have your data to fight them. If you\u2019re notified about a pending order, you might be able to fight it yourself. That\u2019s no guarantee you\u2019ll win.\n The best way to protect your data is to use services that don\u2019t get it in the first place. Privacy concerns, including the ability to communicate free from government surveillance, have made encrypted messaging apps like  Signal and private browsers like  DuckDuckGo popular in recent years. They minimize the data they collect from users, which means they don\u2019t have much to give if investigators try to collect it. You can also ask services to delete your data from their servers or not upload it to them in the first place (assuming those are options). The FBI can\u2019t get much from Apple\u2019s iCloud if you haven\u2019t uploaded anything to it.\n At that point, investigators will have to try to get the data they want from your device ... which is a  whole other can of legal worms.\n  Millions turn to Vox to understand what\u2019s happening in the news. Our mission has never been more vital than it is in this moment: to empower through understanding. Financial contributions from our readers are a critical part of supporting our resource-intensive work and help us keep our journalism free for all.  Please consider making a contribution to Vox today from as little as $3.", "posttime": "2021-08-02 00:25:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u83b7\u53d6,data,\u6570\u636e", "title": "\u8b66\u5bdf\u53ef\u4ee5\u83b7\u53d6\u60a8\u7684\u6570\u636e\u2014\u2014\u5373\u4f7f\u60a8\u6ca1\u6709\u72af\u7f6a\u5acc\u7591", "title_en": "Police can get your data \u2013 even if you aren\u2019t suspected of a crime", "transed": 1, "url": "https://www.vox.com/recode/22565926/police-law-enforcement-data-warrant", "via": "", "real_tags": ["\u83b7\u53d6", "data", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "697fbe8013cae197461d4af04aca59bb.jpeg", "infoid": 1071011, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6731\u8fea\u00b7\u60e0\u7279\u514b (Jodie Whittaker) \u548c\u514b\u91cc\u65af\u00b7\u5947\u5e03\u7eb3\u5c14 (Chris Chibnall) \u5c06\u5728\u4e09\u90e8\u7279\u8f91\u4e2d\u79bb\u5f00\u795e\u79d8\u535a\u58eb\uff0c\u6700\u7ec8\u5c06\u5728 2022 \u5e74\u79cb\u5b63\u64ad\u51fa\u7684\u53f2\u8bd7\u5927\u7247\u7279\u8f91\u4e2d\u4f5c\u4e3a BBC \u767e\u5e74\u5e86\u5178\u7684\u4e00\u90e8\u5206\u64ad\u51fa\u3002\u81ea 2017 \u5e74\u5f00\u59cb\u62cd\u6444\u300a\u7b2c\u5341\u4e09\u4efb\u535a\u58eb\u300b\u4ee5\u6765\u4e00\u76f4\u8d1f\u8d23 TARDIS\uff0cShowrunner Chris Chibnall \u548c\u7b2c\u5341\u4e09\u4efb\u535a\u58eb Jodie Whittaker \u5df2\u786e\u8ba4\u4ed6\u4eec\u5c06\u79bb\u5f00\u5730\u7403\u4e0a\u6700\u8457\u540d\u7684\u8b66\u5bdf\u5c40\u2014\u2014\u4ee5\u53ca\u5b87\u5b99\u3002\u968f\u7740\u79cb\u5b63\u7684\u516d\u90e8\u5206\u6d3b\u52a8\u7cfb\u5217\u5ba3\u5e03\uff0c\u5e76\u4e14\u5df2\u7ecf\u8ba1\u5212\u5728 2022 \u5e74\u63a8\u51fa\u4e24\u90e8\u7279\u522b\u8282\u76ee\uff0cBBC One \u73b0\u5728\u8981\u6c42\u4e3a\u7b2c\u5341\u4e09\u4efb\u535a\u58eb\u63d0\u4f9b\u989d\u5916\u7684\u6700\u540e\u4e00\u90e8\u957f\u7bc7\u5192\u9669\uff0c\u4ee5\u4fbf\u5728\u535a\u58eb\u91cd\u751f\u4e4b\u524d\u4e3a 2022 \u5e74\u7ec4\u5efa\u4e09\u90e8\u7279\u522b\u8282\u76ee\u518d\u4e00\u6b21\u3002\u5728\u638c\u8235\u8be5\u8282\u76ee\u540e\uff0c\u514b\u91cc\u65af\u00b7\u5947\u5e03\u7eb3\u5c14\u505a\u51fa\u4e86\u5f00\u521b\u6027\u7684\u51b3\u5b9a\uff0c\u8ba9\u6731\u8fea\u00b7\u60e0\u7279\u514b\u6210\u4e3a\u7b2c\u4e00\u4f4d\u5973\u535a\u58eb\u3002\u4ed6\u8fd8\u5e26\u6765\u4e86\u6258\u8f9b\u00b7\u79d1\u5c14\uff08\u745e\u6069\uff09\u3001\u66fc\u8fea\u666e\u00b7\u5409\u5c14\uff08\u4e9a\u5179\uff09\u548c\u5e03\u62c9\u5fb7\u5229\u00b7\u6c83\u5c14\u4ec0\uff08\u683c\u96f7\u5384\u59c6\uff09\u7684\u201c\u5bb6\u65cf\u201d\uff0c\u5e76\u5c06\u5e7f\u53d7\u8d5e\u8a89\u7684\u8428\u67e5\u00b7\u8fbe\u4e07\uff08Sacha Dhawan\uff09\u9009\u4e3a\u5927\u5e08\u7684\u6700\u65b0\u5316\u8eab\uff0c\u52a0\u4e0a\u4e54\u00b7\u9a6c\u4e01\uff08Jo Martin\uff09\u4f5c\u4e3a\u795e\u79d8\u7684\u9003\u4ea1\u533b\u751f\uff0c\u4e3a\u8282\u76ee\u7684\u795e\u8bdd\u6dfb\u52a0\u65b0\u7684\u89d2\u8272\u3001\u5c42\u6b21\u548c\u66f2\u6298\u3002 \u300a\u7f57\u838e\u300b\u3001\u300a\u65c1\u906e\u666e\u6076\u9b54\u300b\u548c\u300a\u95f4\u8c0d\u4e4b\u57ce\u300b\u7b49\u5267\u96c6\u8ba9\u5168\u7403\u89c2\u4f17\u6fc0\u52a8\u4e0d\u5df2\uff0c\u83b7\u5f97\u4e86\u597d\u8bc4\u548c\u5956\u9879\u8ba4\u53ef\uff0c\u5305\u62ec\u4e24\u9879 BAFTA \u5fc5\u770b\u65f6\u523b\u63d0\u540d\uff0c\u4ee5\u53ca\u591a\u9879\u56fd\u5bb6\u7535\u89c6\u5956\u3001BAFTA Cymru\u3001TV Choice\u3001Screen Nation\u3001Hugo\u3001\u571f\u661f\u3002\u548c\u8bc4\u8bba\u5bb6\u9009\u62e9\u63d0\u540d\u3002\u5728 Chris \u4efb\u804c\u671f\u95f4\uff0c\u8be5\u7cfb\u5217\u83b7\u5f97\u4e86\u5e74\u5ea6\u6709\u8fdc\u89c1\u5956\u7535\u89c6\u8282\u76ee\u5956\u3001BANFF \u7535\u89c6\u8282\u9881\u53d1\u7684\u52a0\u62ff\u5927\u6d1b\u57fa\u5956\u6700\u4f73\u79d1\u5e7b\u548c\u7c7b\u578b\u5267\uff0c\u800c Mandip Gill \u548c Vinay Patel \u5219\u83b7\u5f97\u4e86\u4e1c\u90e8\u5956\u9879\u7684\u8ba4\u53ef\u3002\u773c\u775b\u5956\u3002 2020 \u5e74\u7cfb\u5217\u8d62\u5f97\u4e86 Radio Times.com \u8bfb\u8005\u6295\u7968\u9009\u51fa\u7684\u6700\u4f73\u79d1\u5e7b\u8282\u76ee\uff0c\u51fb\u8d25\u4e86\u66fc\u8fbe\u6d1b\u4eba\u3001\u8def\u897f\u6cd5\u548c\u7537\u5b69\u4eec\u7684\u7ade\u4e89\uff0c\u5e76\u8d62\u5f97\u4e86 2020 \u5e74\u6570\u5b57\u95f4\u8c0d\u9605\u8bfb\u5668\u5956\u7684\u6700\u4f73\u65f6\u523b\u548c\u6700\u4e0d\u53ef\u601d\u8bae\u7684\u626d\u66f2\u3002 Judoon \u7684\u9003\u72af\u548c Cyber\u200b\u200bmen \u7684\u63d0\u5347\u3002 2019 \u5e74\uff0c\u76ee\u524d\u7684\u6240\u6709\u6f14\u5458\u548c\u5de5\u4f5c\u4eba\u5458\u90fd\u56e0\u5176\u5728\u8282\u76ee\u4e2d\u7684\u5de5\u4f5c\u800c\u88ab\u8c22\u83f2\u5c14\u5fb7\u54c8\u52d2\u59c6\u5927\u5b66\u6388\u4e88\u540d\u8a89\u535a\u58eb\u5b66\u4f4d\u3002\u4f5c\u4e3a\u7b2c\u5341\u4e09\u4efb\u535a\u58eb\uff0c\u6731\u8fea\u00b7\u60e0\u7279\u514b\u4e8e 2017 \u5e74\u767b\u4e0a TARDIS \u5f00\u59cb\u62cd\u6444\u3002 \u4f5c\u4e3a\u7b2c\u4e00\u4f4d\u626e\u6f14\u8be5\u6807\u5fd7\u6027\u89d2\u8272\u7684\u5973\u6027\uff0c\u6731\u8fea\u4ee5\u5979\u5bf9\u65f6\u95f4\u9886\u4e3b\u7684\u63cf\u7ed8\u8ba9\u89c2\u4f17\u5174\u594b\u4e0d\u5df2\uff0c\u8d62\u5f97\u4e86\u5168\u7403\u795e\u79d8\u535a\u58eb\u7c89\u4e1d\u7684\u5fc3\u3002\u6731\u8fea\u5bf9\u533b\u751f\u7684\u591a\u5c42\u6b21\u3001\u6e29\u6696\u3001\u6709\u8da3\u548c\u9f13\u821e\u4eba\u5fc3\u7684\u63cf\u7ed8\u4e0d\u4ec5\u521b\u9020\u4e86\u795e\u79d8\u535a\u58eb\u5386\u53f2\u4e0a\u7684\u7b2c\u4e00\u540d\uff0c\u800c\u4e14\u5728 2020 \u5e74\uff0c\u6731\u8fea\u88ab\u8bc4\u4e3a\u6709\u53f2\u4ee5\u6765\u6700\u53d7\u6b22\u8fce\u7684\u533b\u751f\u7b2c\u4e8c\u540d\uff0c\u4e0e\u5979\u7684\u670b\u53cb\u5927\u536b\u00b7\u5766\u5357\u7279\uff08David Tennant\uff09\u76f8\u5dee\u65e0\u51e0\u3002 Radio Times \u5bf9 50,000 \u591a\u540d\u7c89\u4e1d\u8fdb\u884c\u7684\u6c11\u610f\u8c03\u67e5\u3002 \u201c\u5728\u8fd9\u573a\u5343\u8f7d\u96be\u9022\u7684\u7206\u70b8\u5f00\u59cb\u65f6\uff0c\u6731\u8fea\u548c\u6211\u5f7c\u6b64\u8fbe\u6210\u4e86\u201c\u4e09\u8fde\u80dc\u201d\u7684\u534f\u8bae\u3002\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u7684\u73ed\u6b21\u5df2\u7ecf\u5b8c\u6210\uff0c\u6211\u4eec\u6b63\u5728\u4ea4\u8fd8 TARDIS \u94a5\u5319\u3002\n\u201c\u6731\u8fea\u51fa\u8272\u7684\u3001\u6807\u5fd7\u6027\u7684\u533b\u751f\u8d85\u51fa\u4e86\u6211\u4eec\u6240\u6709\u7684\u9ad8\u671f\u671b\u3002\u5979\u4e00\u76f4\u662f\u91d1\u672c\u4f4d\u7684\u7537\u4e3b\u89d2\uff0c\u80a9\u8d1f\u7740\u6210\u4e3a\u7b2c\u4e00\u4f4d\u517c\u5177\u98ce\u5ea6\u3001\u529b\u91cf\u3001\u6e29\u6696\u3001\u5927\u65b9\u548c\u5e7d\u9ed8\u7684\u5973\u535a\u58eb\u7684\u8d23\u4efb\u3002\u5979\u6293\u4f4f\u4e86\u516c\u4f17\u7684\u60f3\u8c61\u529b\uff0c\u5e76\u7ee7\u7eed\u6fc0\u53d1\u4e16\u754c\u5404\u5730\u4ee5\u53ca\u5236\u4f5c\u4e2d\u6bcf\u4e2a\u4eba\u7684\u5d07\u62dc\u3002\u6211\u65e0\u6cd5\u60f3\u8c61\u4e0e\u66f4\u9f13\u821e\u4eba\u5fc3\u7684\u533b\u751f\u4e00\u8d77\u5de5\u4f5c\u2014\u2014\u6240\u4ee5\u6211\u4e0d\u4f1a\uff01 \u201c\u5bf9\u6211\u6765\u8bf4\uff0c\u9886\u5bfc\u8fd9\u4e2a\u6770\u51fa\u7684\u56e2\u961f\u662f\u65e0\u4e0e\u4f26\u6bd4\u7684\u521b\u4f5c\u4e50\u8da3\uff0c\u4e5f\u662f\u6211\u804c\u4e1a\u751f\u6daf\u7684\u4e00\u5927\u4e50\u8da3\u3002\u6211\u4e3a\u6211\u4eec\u5171\u4e8b\u7684\u4eba\u548c\u6211\u4eec\u8bb2\u8ff0\u7684\u6545\u4e8b\u611f\u5230\u81ea\u8c6a\u3002\u5728\u5927\u6d41\u884c\u6539\u53d8\u5e76\u6311\u6218\u6211\u4eec\u7684\u751f\u4ea7\u8ba1\u5212\u4e4b\u540e\uff0c\u4ee5\u989d\u5916\u7684\u7279\u522b\u8282\u76ee\u7ed3\u675f\u6211\u4eec\u5728\u8282\u76ee\u4e2d\u7684\u65f6\u95f4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5956\u52b1\u3002\u5f88\u9ad8\u5174\u7b2c\u5341\u4e09\u4efb\u535a\u58eb\u6545\u4e8b\u7684\u9ad8\u6f6e\u5c06\u6210\u4e3a BBC \u767e\u5e74\u5e86\u5178\u7684\u6838\u5fc3\u3002 \u201c\u6211\u5e0c\u671b\u6211\u4eec\u7684\u7ee7\u4efb\u8005\u2014\u2014\u65e0\u8bba BBC \u548c BBC \u5de5\u4f5c\u5ba4\u9009\u62e9\u8c01\u2014\u2014\u548c\u6211\u4eec\u4e00\u6837\u5f00\u5fc3\u3002\u4ed6\u4eec\u662f\u6765\u8bf7\u5ba2\u7684\uff01\u201d \u201c2017 \u5e74\uff0c\u6211\u6253\u5f00\u4e86\u6211\u7684 13 \u53f7\u978b\u7684\u7cbe\u7f8e\u793c\u76d2\u3002\u6211\u65e0\u6cd5\u731c\u5230\u6211\u5c06\u5728\u5176\u4e2d\u770b\u5230\u7684\u7cbe\u5f69\u5192\u9669\u3001\u4e16\u754c\u548c\u5947\u8ff9\u3002\u6211\u7684\u5fc3\u5145\u6ee1\u4e86\u5bf9\u8fd9\u90e8\u5267\u3001\u5236\u4f5c\u5b83\u7684\u56e2\u961f\u3001\u89c2\u770b\u5b83\u7684\u7c89\u4e1d\u4ee5\u53ca\u5b83\u7ed9\u6211\u7684\u751f\u6d3b\u5e26\u6765\u7684\u7231\u3002\u6211\u975e\u5e38\u611f\u8c22 Chris \u5c06\u4ed6\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u6545\u4e8b\u59d4\u6258\u7ed9\u6211\u3002\u6211\u4eec\u77e5\u9053\u6211\u4eec\u8981\u5e76\u80a9\u4e58\u98ce\u7834\u6d6a\uff0c\u5171\u540c\u4f20\u9012\u63a5\u529b\u68d2\u3002\u6240\u4ee5\u6211\u4eec\u5230\u4e86\uff0c\u8ddd\u79bb\u5b8c\u6210\u6211\u505a\u8fc7\u7684\u6700\u597d\u7684\u5de5\u4f5c\u8fd8\u6709\u51e0\u5468\u7684\u65f6\u95f4\u3002\u6211\u60f3\u6211\u6c38\u8fdc\u65e0\u6cd5\u8868\u8fbe\u8fd9\u4e2a\u89d2\u8272\u7ed9\u4e86\u6211\u4ec0\u4e48\u3002\u6211\u5c06\u6c38\u8fdc\u5e26\u7740\u535a\u58eb\u548c\u6211\u5b66\u5230\u7684\u6559\u8bad\u3002 \u201c\u6211\u77e5\u9053\u53d8\u5316\u662f\u53ef\u6015\u7684\uff0c\u6211\u4eec\u8c01\u4e5f\u4e0d\u77e5\u9053\u5916\u9762\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u7ee7\u7eed\u5bfb\u627e\u7684\u539f\u56e0\u3002\u65c5\u884c\u5e0c\u671b\u3002\u5b87\u5b99\u4f1a\u7ed9\u4f60\u60ca\u559c\u3002\u4e0d\u65ad\u5730\u3002\u201d \u201c\u5728\u8fc7\u53bb\u7684\u56db\u5e74\u91cc\uff0c\u514b\u91cc\u65af\u548c\u6731\u8fea\u521b\u9020\u4e86\u795e\u79d8\u535a\u58eb\u7684\u5386\u53f2\uff0c\u4ed6\u4eec\u5728\u8282\u76ee\u4e2d\u7684\u65f6\u5149\u5728\u6211\u4eec\u7684\u8bb0\u5fc6\u4e2d\u7559\u4e0b\u4e86\u4e0d\u53ef\u78e8\u706d\u7684\u5370\u8bb0\u3002\u4ece\u7f57\u838e\u5e15\u514b\u65af\u5230\u7f51\u7edc\u4eba\u7684\u5347\u5929\uff0c\u514b\u91cc\u65af\u548c\u6731\u8fea\u4e3a\u795e\u79d8\u535a\u58eb\u5e26\u6765\u4e86\u8fc4\u4eca\u4e3a\u6b62\u6700\u4ee4\u4eba\u632f\u594b\u548c\u50ac\u4eba\u6cea\u4e0b\u7684\u65f6\u523b\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u770b\u5230\u4ed6\u4eec\u5728\u4eca\u5e74\u79cb\u5929\u7684\u65b0\u7cfb\u5217\u4e2d\u4e3a\u6211\u4eec\u51c6\u5907\u4e86\u4ec0\u4e48.\u6731\u8fea\u4e3a\u7eaa\u5ff5 2022 \u5e74 BBC \u767e\u5e74\u8bde\u8fb0\u800c\u8fdb\u884c\u7684\u6700\u540e\u4e00\u6b21\u5192\u9669\u5c06\u6210\u4e3a\u4e00\u4f4d\u503c\u5f97\u7eaa\u5ff5\u7684\u7279\u522b\u533b\u751f\u3002\u6211\u8981\u611f\u8c22\u4ed6\u4eec\u5728\u8282\u76ee\u4e2d\u6240\u505a\u7684\u4e0d\u53ef\u601d\u8bae\u7684\u5de5\u4f5c\u3002\u201d \u4e00\u5e74\u591a\u7684\u5192\u9669\u5373\u5c06\u5230\u6765\uff0c\u7b2c\u5341\u4e09\u4efb\u535a\u58eb\u4ecd\u7136\u4e3a\u7c89\u4e1d\u51c6\u5907\u4e86\u5f88\u591a\u4e1c\u897f\u3002", "note_en": "Jodie Whittaker and Chris Chibnall to leave Doctor Who in a trio of Specials, culminating in an epic blockbuster Special to air in autumn 2022 as part of the BBC\u2019s Centenary celebrations.\n  Having been in charge of the TARDIS since filming for the Thirteenth Doctor began in 2017, Showrunner Chris Chibnall and the Thirteenth Doctor, Jodie Whittaker, have confirmed they will be moving on from the most famous police box on Earth - and the universe.\n With a six-part Event Serial announced for the autumn, and two Specials already planned for 2022, BBC One has now asked for an additional final feature length adventure for the Thirteenth Doctor, to form a trio of Specials for 2022, before the Doctor regenerates once more.\n After taking the helm of the show, Chris Chibnall made the groundbreaking decision to cast Jodie Whittaker as the first female Doctor. He also brought in \u2018the fam\u2019 of Tosin Cole (Ryan), Mandip Gill (Yaz) and Bradley Walsh (Graham), and cast the acclaimed Sacha Dhawan as the latest incarnation of The Master, plus Jo Martin as the mysterious Fugitive Doctor, adding new characters, layers and twists to the mythology of the show.\n Episodes such as   Rosa,  Demons of the Punjab and   Spyfall have thrilled audiences across the globe garnering critical acclaim and award recognition, including two BAFTA Must See Moment nominations, along with multiple National Television Award, BAFTA Cymru, TV Choice, Screen Nation, Hugo, Saturn. and Critics Choice nominations. Under Chris\u2019 tenure, the series has been awarded the Visionary Awards TV Show of the Year, the Canadian Rockie Award from the BANFF Television Festival for best sci-fi and genre series, while Mandip Gill and Vinay Patel were recognised with wins from the Eastern Eye Awards. The 2020 series won Best Science Fiction Show voted for by readers at Radio Times.com, beating out competition from  The Mandalorian, Lucifer and  The Boys, as well as winning both Best Moment and Most Incredible Twist from the Digital Spy Reader Awards 2020, for   Fugitive Of The Judoon and   Ascension Of The Cybermen. In 2019, the entire current cast and crew were awarded Honorary Doctorates by Sheffield Hallam University for their work on the show.\n As the Thirteenth Doctor, Jodie Whittaker stepped aboard the TARDIS to begin filming in 2017. As the first woman to play the iconic role, Jodie has thrilled audiences with her portrayal of the Time Lord, winning the hearts of Doctor Who fans across the globe. Jodie\u2019s multi-layered, warm, funny and inspiring depiction of the Doctor not only created a first in Doctor Who history, but in 2020, Jodie was voted 2nd Most Popular Doctor of all time, coming within a whisker of her friend David Tennant, in a poll of more than 50,000 fans for Radio Times.\n  \u201cJodie and I made a \u201cthree series and out\u201d pact with each other at the start of this once-in-a-lifetime blast. So now our shift is done, and we\u2019re handing back the TARDIS keys.\n \u201cJodie\u2019s magnificent, iconic Doctor has exceeded all our high expectations. She\u2019s been the gold standard leading actor, shouldering the responsibility of being the first female Doctor with style, strength, warmth, generosity and humour. She captured the public imagination and continues to inspire adoration around the world, as well as from everyone on the production. I can\u2019t imagine working with a more inspiring Doctor \u2013 so I\u2019m not going to!\n \u201cFor me, leading this exceptional team has been unrivalled creative fun, and one of the great joys of my career. I\u2019m so proud of the people we\u2019ve worked with and the stories we\u2019ve told. To finish our time on the show with an additional Special, after the pandemic changed and challenged our production plans, is a lovely bonus. It\u2019s great that the climax of the Thirteenth Doctor\u2019s story will be at the heart(s) of the BBC\u2019s centenary celebrations.\n \u201cI wish our successors - whoever the BBC and BBC Studios choose - as much fun as we\u2019ve had. They\u2019re in for a treat!\u201d\n  \u201cIn 2017 I opened my glorious gift box of size 13 shoes. I could not have guessed the brilliant adventures, worlds and wonders I was to see in them. My heart is so full of love for this show, for the team who make it, for the fans who watch it and for what it has brought to my life. And I cannot thank Chris enough for entrusting me with his incredible stories. We knew that we wanted to ride this wave side by side, and pass on the baton together. So here we are, weeks away from wrapping on the best job I have ever had. I don\u2019t think I\u2019ll ever be able to express what this role has given me. I will carry the Doctor and the lessons I\u2019ve learnt forever.\n \u201cI know change can be scary and none of us know what\u2019s out there. That\u2019s why we keep looking. Travel Hopefully. The Universe will surprise you. Constantly.\u201d\n  \u201cOver the last four years Chris and Jodie have made Doctor Who history and their time on the show is indelibly marked on our memories. From Rosa Parks to Ascension of the Cybermen, Chris and Jodie have given Doctor Who some of its most life-affirming and tear-jerking moments to date and we are beyond excited to see what they have in store for us in the new series this Autumn. Jodie&#39;s final adventure to mark the BBC&#39;s Centenary in 2022 is set to be a Doctor Who Special to remember. I\u2019d like to thank them both for their incredible work on the show\u201d\n With over a year of adventures to come, the Thirteenth Doctor still has plenty in store for fans.", "posttime": "2021-08-01 23:26:43", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "whittaker,\u6731\u8fea", "title": "Jodie Whittaker \u548c Showrunner Chris Chibnall \u79bb\u5f00\u201c\u795e\u79d8\u535a\u58eb\u201d", "title_en": "Jodie Whittaker and Showrunner Chris Chibnall To Leave 'Doctor Who'", "transed": 1, "url": "https://www.doctorwho.tv/news/?article=jodie-whittaker-chris-chibnall-leave-doctor-who", "via": "", "real_tags": ["whittaker", "\u6731\u8fea"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071010, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ee5\u4e0b\u8868\u8fbe\u7684\u6240\u6709\u89c2\u70b9\u90fd\u662f\u4f5c\u8005\u7684\u4e2a\u4eba\u89c2\u70b9\uff0c\u5e76\u975e\u8d22\u52a1\u6216\u6295\u8d44\u5efa\u8bae\u3002\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u8ba2\u5355\u7c3f\u7684\u7ed3\u6784\u548c\u4ea4\u6613\u673a\u5236\u3002\u4eca\u5929\uff0c\u6211\u60f3\u56de\u987e\u4e00\u4e0b\u8fd9\u4e9b\u4ea4\u6613\u53d1\u751f\u540e\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u9996\u5148\uff0c\u6211\u4eec\u5982\u4f55\u4e0d\u4ec5\u8ddf\u8e2a\u6211\u4eec\u4ea4\u6613\u7684\u5185\u5bb9\uff0c\u8fd8\u8ddf\u8e2a\u6211\u4eec\u901a\u8fc7\u4ea4\u6613\u8d5a\u53d6\u4e86\u591a\u5c11\u5229\u6da6\u6216\u7d2f\u79ef\u4e86\u591a\u5c11\u635f\u5931\u3002\u548c\u4ee5\u524d\u4e00\u6837\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u4ecb\u7ecd\u6027\u6307\u5357\uff0c\u56e0\u6b64\u7ecf\u9a8c\u4e30\u5bcc\u7684\u4e13\u4e1a\u4eba\u58eb\u53ef\u80fd\u5e0c\u671b\u8df3\u8fc7\u3002\u65e0\u8bba\u60a8\u9009\u62e9\u4f55\u79cd\u4ea4\u6613\u5e73\u53f0\uff0c\u57fa\u672c\u4e0a\u5b83\u4eec\u4f3c\u4e4e\u90fd\u5728\u505a\u540c\u6837\u7684\u4e8b\u60c5\u3002\u4ed6\u4eec\u8ba9\u4f60\u4ea4\u6613\uff0c\u4ed6\u4eec\u4f1a\u7ba1\u7406\u4f60\u7684\u8d44\u91d1\u3001\u80a1\u7968\u3001\u52a0\u5bc6\u8d27\u5e01\u7b49\u3002\u4ece\u4f60\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u4e00\u5207\u4f3c\u4e4e\u90fd\u5f88\u7b80\u5355\uff0c\u4f60\u70b9\u51fb\u4e70\u5165\u6216\u5356\u51fa\uff0c\u8bc1\u5238\u6216\u52a0\u5bc6\u8d27\u5e01\u5c31\u4f1a\u51fa\u73b0\u5728\u4f60\u7684\u8d26\u6237\u4e2d\u3002\u7136\u800c\uff0c\u73b0\u5b9e\u53ef\u80fd\u6bd4\u770b\u8d77\u6765\u66f4\u590d\u6742\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u4ecb\u7ecd\u8fd9\u4e2a\u4e3b\u9898\uff0c\u4f5c\u4e3a\u7ba1\u7406\u5934\u5bf8\u7684\u6280\u672f\u65b9\u9762\u7684\u80cc\u666f\u3002\u4ea4\u6613\u6240\u662f\u53ef\u4ee5\u4e70\u5356\u8bc1\u5238\u7684\u573a\u6240\u3002\u4ea4\u6613\u6240\u5c06\u901a\u8fc7\u5217\u51fa\u80a1\u7968\u3001\u5408\u7ea6\u7b49\u5e76\u6258\u7ba1\u4ea4\u6613\u8fd9\u4e9b\u6240\u9700\u7684\u8ba2\u5355\u7c3f\u6765\u4fc3\u8fdb\u4ea4\u6613\u3002\u4ea4\u6613\u6240\u5c06\u63d0\u4f9b\u8fde\u901a\u6027\uff0c\u8fd9\u662f\u5e02\u573a\u53c2\u4e0e\u8005\u80fd\u591f\u8fde\u63a5\u548c\u4e0b\u8ba2\u5355\u4ee5\u53ca\u63a5\u6536\u5bf9\u8fd9\u4e9b\u8ba2\u5355\u7684\u54cd\u5e94\u7684\u80fd\u529b\u7684\u901a\u7528\u672f\u8bed\u3002\u4ed6\u4eec\u8fd8\u5c06\u63d0\u4f9b\u9762\u5411\u516c\u4f17\u7684\u4ea4\u6613\u6570\u636e\u548c\u4ef7\u683c\u66f4\u65b0\u3002\u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a\u5e02\u573a\u6570\u636e\u3002\u5982\u4eca\uff0c\u8fd9\u51e0\u4e4e\u5b8c\u5168\u662f\u7535\u5b50\u5316\u7684\uff0c\u901a\u8fc7\u7f51\u7edc\u8fdb\u884c\u901a\u4fe1\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u4ea4\u6613\u6240\u6765\u8bf4\uff0c\u8fd9\u57fa\u672c\u4e0a\u5c31\u662f\u4ed6\u4eec\u6240\u505a\u7684\u4e00\u5207\u3002\u5728\u4f20\u7edf\u5e02\u573a\uff08\u80a1\u7968\u3001\u503a\u5238\u7b49\uff09\u4e2d\uff0c\u4e00\u822c\u516c\u4f17\u5f88\u5c11\u6709\u673a\u4f1a\u63a5\u89e6\u4ea4\u6613\u6240\u3002\u901a\u5e38\u8f83\u5927\u7684\u516c\u53f8\u548c\u4e13\u4e1a\u673a\u6784\u5728\u5b83\u4eec\u4e0a\u9762\u8fdb\u884c\u4ea4\u6613\uff0c\u5e76\u4e14\u5728\u5176\u4e2d\u4e00\u4e2a\u4ea4\u6613\u6240\u8fdb\u884c\u4ea4\u6613\u9700\u8981\u5404\u79cd\u6cd5\u5f8b\u5b89\u6392\uff0c\u4ee5\u53ca\u975e\u5e73\u51e1\u7684\u6280\u672f\u8bbe\u7f6e\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u666e\u901a\u6295\u8d44\u8005\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u4e2d\u4ecb\u516c\u53f8\u8fdb\u5165\u4ea4\u6613\u6240\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u3002\u7ecf\u7eaa\u4eba\uff08\u901a\u5e38\uff09\u662f\u4e00\u5bb6\u5141\u8bb8\u666e\u901a\u6295\u8d44\u8005\u8fdb\u5165\u5404\u79cd\u5e02\u573a\u4ee5\u4e70\u5356\u8bc1\u5238\u7684\u516c\u53f8\u3002\u4e3a\u6b64\uff0c\u7ecf\u7eaa\u4eba\u5fc5\u987b\u662f\u4ed6\u4eec\u60f3\u8981\u4ea4\u6613\u7684\u6bcf\u4e2a\u4ea4\u6613\u6240\u7684\u53c2\u4e0e\u8005\u3002\u5f53\u5ba2\u6237\u5e0c\u671b\u8d2d\u4e70\u80a1\u7968\u65f6\uff0c\u7ecf\u7eaa\u4eba\u53ef\u4ee5\u4ee3\u8868\u5ba2\u6237\u5c06\u8be5\u8ba2\u5355\u53d1\u9001\u5230\u4ea4\u6613\u6240\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u7ecf\u7eaa\u4eba\u8fd8\u53ef\u4ee5\u4e3a\u5ba2\u6237\u63d0\u4f9b\u5404\u79cd\u201c\u589e\u503c\u201d\u670d\u52a1\u3002\u8fd9\u4e9b\u53ef\u4ee5\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u5411\u5ba2\u6237\u63d0\u4f9b\u5e02\u573a\u6570\u636e\u548c\u8ba2\u5355\u7c3f\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u4e86\u89e3\u73b0\u884c\u4ef7\u683c\u3002\u4e3a\u5ba2\u6237\u63d0\u4f9b\u6613\u4e8e\u7406\u89e3\u7684\u7528\u6237\u53cb\u597d\u4ea4\u6613\u754c\u9762\uff0c\u8ba9\u4ed6\u4eec\u53ef\u4ee5\u8bbf\u95ee\u591a\u4e2a\u4ea4\u6613\u6240\u548c\u5e02\u573a\uff08\u5927\u591a\u6570\u96f6\u552e\u5ba2\u6237\u65e2\u6ca1\u6709\u80c3\u53e3\u4e5f\u6ca1\u6709\u8d44\u91d1\u6765\u5efa\u7acb\u8fde\u63a5\u5230\u4ea4\u6613\u6240\u6240\u9700\u7684\u57fa\u7840\u8bbe\u65bd\uff09\u3002\n\u5bf9\u5ba2\u6237\u8d2d\u4e70\u7684\u8bc1\u5238\u8fdb\u884c\u6258\u7ba1\uff08\u6240\u6709\u6743\uff09\uff0c\u7ba1\u7406\u5206\u7ea2\u3001\u6295\u7968\u7b49\u4e8b\u9879\u3002\u5c06\u5176\u516c\u5f00\u7ed9\u5ba2\u6237\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u62e5\u6709\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5b83\u7684\u4ef7\u503c\u3002\u63d0\u4f9b\u4fdd\u8bc1\u91d1\uff08\u8d37\u6b3e\uff09\uff0c\u4ee5\u4fbf\u5ba2\u6237\u53ef\u4ee5\u4ea4\u6613\u6bd4\u4ed6\u4eec\u73b0\u6709\u73b0\u91d1\u66f4\u591a\u7684\u80a1\u7968\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u4f7f\u7528\u8fd9\u4e9b\u7ecf\u7eaa\u4eba\u5c06\u662f\u4ed6\u4eec\u975e\u5e38\u719f\u6089\u7684\u4e8b\u60c5\uff0c\u5373\u4f7f\u4ed6\u4eec\u7684\u80a1\u7968\u7684\u5b9e\u9645\u4ea4\u6613\u4f1a\u53d1\u751f\u5728\u540e\u53f0\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7ecf\u7eaa\u4eba\u5e76\u4e0d\u603b\u662f\u5fc5\u987b\u76f4\u63a5\u53bb\u4ea4\u6613\u6240\uff0c\u8bb8\u591a\u7ecf\u7eaa\u4eba\u4f1a\u5c06\u5ba2\u6237\u8ba2\u5355\u8def\u7531\uff08\u53d1\u9001\uff09\u7ed9\u5404\u79cd\u7b2c\u4e09\u65b9\uff0c\u4f8b\u5982\u505a\u5e02\u5546\u6216\u5176\u4ed6\u7ecf\u7eaa\u4eba\u3002\u8fd9\u5728 2020 \u5e74\u53d8\u5f97\u975e\u5e38\u660e\u663e\uff0c\u5f53\u65f6\u6ce8\u610f\u5230\u7ecf\u7eaa\u4eba RobinHood \u6b63\u5728\u5411\u5bf9\u51b2\u57fa\u91d1 Citadel \u51fa\u552e\u5ba2\u6237\u8ba2\u5355\u6d41\uff08\u5ba2\u6237\u8ba2\u5355\uff09\u3002\u73b0\u5728\u5728\u52a0\u5bc6\u5e02\u573a\u4e2d\u663e\u800c\u6613\u89c1\u7684\u662f\uff0c\u51e0\u4e4e\u6240\u6709\u4e3b\u8981\u7684\u52a0\u5bc6\u5e73\u53f0\u5b9e\u9645\u4e0a\u90fd\u5c06\u8fd9\u4e24\u4e2a\u5b9e\u4f53\u5408\u4e8c\u4e3a\u4e00\uff01\u867d\u7136\u4ed6\u4eec\u88ab\u79f0\u4e3a\u4ea4\u6613\u6240\uff0c\u4f46\u4ed6\u4eec\u5f53\u7136\u4e5f\u662f\u7ecf\u7eaa\u4eba\u3002\u4ee5\u5e01\u5b89\u4e3a\u4f8b\u3002\u4ed6\u4eec\u4e3a\u60a8\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u60a8\u7684\u8d44\u91d1\u548c\u52a0\u5bc6\u8d27\u5e01\u8f93\u5165\u4ed6\u4eec\u7684\u7cfb\u7edf\u7684\u65b9\u6cd5\uff0c\u4ed6\u4eec\u7ba1\u7406\u548c\u4fdd\u7ba1\u60a8\u62e5\u6709\u7684\u4ee3\u5e01\u548c\u5408\u7ea6\uff0c\u5e76\u5c06\u5176\u5168\u90e8\u5305\u88c5\u5728\u4e00\u4e2a\u7f51\u7edc\u754c\u9762\u4e2d\uff0c\u53ef\u4f9b\u5168\u7403\u7684\u666e\u901a\u5ba2\u6237\u4f7f\u7528\u4e16\u754c\u3002\u5728\u4ea4\u6613\u65b9\u9762\uff0c\u4ed6\u4eec\u8fd8\u63d0\u4f9b\u5e02\u573a\uff01 Binance \u6709\u6570\u767e\u4e2a\u5e01\u5bf9\uff0c\u6bcf\u4e2a\u5e01\u5bf9\u90fd\u6709\u81ea\u5df1\u7684\u8ba2\u5355\u7c3f\uff0c\u4e3a\u5ba2\u6237\u5339\u914d\u4ea4\u6613\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u540c\u65f6\u5177\u6709\u7ecf\u7eaa\u4eba\u548c\u4ea4\u6613\u6240\u7684\u529f\u80fd\u3002\u65f6\u95f4\u4f1a\u544a\u8bc9\u6211\u4eec\u8fd9\u4e00\u5207\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0c\u5df2\u7ecf\u6709\u8ff9\u8c61\u8868\u660e\u8fd9\u4e2a\u76f8\u5f53\u65b0\u9896\u7684\u6a21\u578b\u5f00\u59cb\u6f14\u53d8\u6210\u5b83\u7684\u524d\u8eab\u3002\u52a0\u5bc6\u8d27\u5e01\u5bf9\u73b0\u5728\u53ef\u4ee5\u5728 eToro \u548c RobinHood \u7b49\u51e0\u4e2a\uff08\u8f83\u65b0\u7684\uff09\u7ecf\u7eaa\u5546\u5904\u83b7\u5f97\uff0c\u751a\u81f3\u829d\u52a0\u54e5\u5546\u4e1a\u4ea4\u6613\u6240\uff08CME\uff09\u73b0\u5728\u4e5f\u5217\u51fa\u4e86\u6bd4\u7279\u5e01\u671f\u8d27\u8fdb\u884c\u4ea4\u6613\u3002\u5f53\u60a8\u4f7f\u7528\u7ecf\u7eaa\u4eba\u7684\u5e94\u7528\u7a0b\u5e8f\u8d2d\u4e70\u4e00\u4e9b\u80a1\u7968\u65f6\uff0c\u60a8\u4f1a\u7acb\u5373\u770b\u5230\u60a8\u73b0\u5728\u662f\u8fd9\u4e9b\u80a1\u7968\u7684\u6240\u6709\u8005\u3002\u7136\u800c\uff0c\u5b9e\u9645\u4e0a\uff0c\u5c3d\u7ba1\u8d2d\u4e70\u4e86\u8fd9\u4e9b\u80a1\u7968\uff0c\u60a8\u8fd8\u4e0d\u662f\u5b83\u4eec\u7684\u8bb0\u5f55\u6240\u6709\u8005\u3002\u4f8b\u5982\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u5c06\u65e0\u6cd5\u83b7\u5f97\u8be5\u80a1\u7968\u652f\u4ed8\u7684\u80a1\u606f\uff0c\u4e5f\u65e0\u6cd5\u4e0e\u4ed6\u4eec\u4e00\u8d77\u6295\u7968\u3002\u5728\u7f8e\u56fd\uff0c\u80a1\u4efd\u7684\u6240\u6709\u6743\u5728 T+2 \u6216\u6362\u8a00\u4e4b\uff0c\u4ea4\u6613\u53d1\u751f\u540e\u7684\u4e24\u4e2a\u5de5\u4f5c\u65e5\u5185\u8f6c\u79fb\u3002\u8fd9\u91cc\u7684\u7ed3\u7b97\u662f\u6307\u7528\u60a8\u8d2d\u4e70\u7684\u8bc1\u5238\u6362\u53d6\u652f\u4ed8\u7684\u73b0\u91d1\u7684\u884c\u4e3a\u3002\u5728\u52a0\u5bc6\u4e2d\uff0c\u4e8b\u60c5\u6709\u70b9\u4e0d\u540c\u3002\u8bb8\u591a\u65b0\u624b\u533a\u5757\u94fe\u7231\u597d\u8005\u60ca\u8bb6\u5730\u53d1\u73b0\uff0c\u5f53\u4ed6\u4eec\u5728\u4ea4\u6613\u6240\u8d2d\u4e70\u6bd4\u7279\u5e01\u65f6\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u5728\u201c\u81ea\u5df1\u7684\u201d\u6bd4\u7279\u5e01\u94b1\u5305\u4e2d\u4fdd\u7ba1\u5b83\u3002\u5c3d\u7ba1\u4ed6\u4eec\u5728\u6cd5\u5f8b\u610f\u4e49\u4e0a\u62e5\u6709\u5b83\uff0c\u4f46\u5b83\u53ea\u662f\u4ea4\u6613\u6240\u6570\u636e\u5e93\u4e2d\u7684\u8bb0\u5f55\u3002\u8981\u5c06\u786c\u5e01\u8f6c\u79fb\u5230\u4ed6\u4eec\u62e5\u6709\u7684\u94b1\u5305\uff08\u5b9e\u9645\u6240\u6709\u6743\uff09\uff0c\u4ed6\u4eec\u5fc5\u987b\u9996\u5148\u4ece\u4ea4\u6613\u6240\u63d0\u53d6\u786c\u5e01\u3002\u7136\u800c\uff0c\u5b9e\u9645\u4ea4\u6613\u90fd\u53d1\u751f\u5728\u4ea4\u6613\u6240\u5185\u90e8\uff0c\u51e0\u4e4e\u4ece\u4e0d\u63a5\u89e6\u533a\u5757\u94fe\uff08\u4e3b\u8981\u662f\u56e0\u4e3a\u8fd9\u5bf9\u4e8e\u6b63\u5e38\u4ea4\u6613\u6765\u8bf4\u592a\u6162\u4e86\uff09\u3002\n\u4ea4\u6613\u6240\u5931\u53bb\u4e86\u5bf9\u7269\u7406\u548c\u201c\u865a\u62df\u201d\u6bd4\u7279\u5e01\u6570\u91cf\uff08\u6570\u636e\u5e93\u4e2d\u7684\u6570\u5b57\uff09\u7684\u8ddf\u8e2a\uff0c\u8fc7\u53bb\u66fe\u7ed9\u5404\u79cd\u5ba2\u6237\u9020\u6210\u4e86\u5de8\u5927\u7684\u635f\u5931\uff08\u6211\u5f3a\u70c8\u63a8\u8350\u8fd9\u4e2a\u89c6\u9891\uff09\u3002\u4e0e\u52a0\u5bc6\u4e2d\u7684\u4efb\u4f55\u4e8b\u7269\u4e00\u6837\uff0c\u59cb\u7ec8\u503c\u5f97\u7262\u8bb0\u683c\u8a00\uff1a\u4e0d\u662f\u4f60\u7684\u94a5\u5319\uff0c\u4e0d\u662f\u4f60\u7684\u786c\u5e01\u3002\u5206\u5e03\u5f0f\u4ea4\u6613\u6240\u6216 DEX \u662f\u4e00\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4ea4\u6613\u6240\uff0c\u7eaf\u7cb9\u5b58\u5728\u4e8e\u533a\u5757\u94fe\u4e0a\uff0c\u4ea4\u6613\u786e\u5b9e\u5728\u94fe\u4e0a\u5b8c\u6210\u5e76\u7acb\u5373\u7ed3\u7b97\u3002\u8fd9\u4e9b\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u4ea4\u6613\u673a\u5236\uff0c\u4f46\u7531\u4e8e\u533a\u5757\u94fe\u4ea4\u6613\u901f\u5ea6\u7684\u9650\u5236\uff0c\u5b83\u4eec\u7684\u541e\u5410\u91cf\u76ee\u524d\u975e\u5e38\u4f4e\u3002\u5176\u4e2d\u4e00\u4e9b\u793a\u4f8b\u662f Uniswap \u548c PancakeSwap\u3002 &amp;mldr\u67d0\u4e9b\u4e2a\u4eba\u6216\u5176\u4ed6\u5b9e\u4f53\u62e5\u6709\uff08\u6216\u5356\u7a7a\uff09\u7684\u8bc1\u5238\u3001\u8d44\u4ea7\u6216\u8d22\u4ea7\u7684\u6570\u91cf\u3002\u4ea4\u6613\u8005\u6216\u6295\u8d44\u8005\u5728\u901a\u8fc7\u4e70\u5355\u8fdb\u884c\u8d2d\u4e70\u65f6\u5efa\u7acb\u5934\u5bf8\uff0c\u8868\u660e\u770b\u6da8\u610f\u56fe\uff1b\u6216\u8005\u5982\u679c\u4ed6\u4eec\u51fa\u4e8e\u770b\u8dcc\u610f\u56fe\u51fa\u552e\u5356\u7a7a\u8bc1\u5238\u3002\u56e0\u6b64\uff0c\u804c\u4f4d\u51e0\u4e4e\u53ef\u4ee5\u662f\u4efb\u4f55\u4e8b\u7269\u7684\u6240\u6709\u6743\u3002\u5982\u679c\u4f60\u4e70\u623f\u5b50\uff0c\u4f60\u5c31\u662f\u505a\u591a\u623f\u5730\u4ea7\u5e02\u573a\uff0c\u56e0\u4e3a\u4f60\u73b0\u5728\u5728\u623f\u5b50\u91cc\u6709\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u60a8\u4ee5\u7f8e\u5143\u8d5a\u53d6\u5de5\u8d44\u5e76\u5c06\u94b1\u5b58\u5165\u94f6\u884c\u8d26\u6237\uff0c\u90a3\u4e48\u65e0\u8bba\u60a8\u62e5\u6709\u591a\u5c11\u7f8e\u5143\uff0c\u60a8\u90fd\u53ef\u4ee5\u505a\u591a\u3002\u73b0\u5728\u8fd9\u5bf9\u60a8\u6765\u8bf4\u53ef\u80fd\u65e0\u5173\u7d27\u8981\uff0c\u4f46\u8bf7\u8003\u8651\u4e00\u4e0b\u60a8\u662f\u5426\u60f3\u4f4f\u5728\u82f1\u56fd\u5e76\u9700\u8981\u5c06\u6240\u6709\u8d44\u4ea7\u8f6c\u79fb\u5230\u90a3\u91cc\u3002\u7a81\u7136\u4e4b\u95f4\uff0c\u6c47\u7387\uff08\u4ee5\u7f8e\u5143\u8ba1\u7684\u82f1\u9551\u4ef7\u683c\uff09\u53d8\u5f97\u975e\u5e38\u91cd\u8981\u3002\u6b63\u5982\u5b9a\u4e49\u4e2d\u63d0\u5230\u7684\uff0c\u5934\u5bf8\u53ef\u4ee5\u662f\u591a\u5934\u4e5f\u53ef\u4ee5\u662f\u7a7a\u5934\u3002\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a\u4f4d\u7f6e\u7684\u65b9\u5411\u3002\u8fd9\u4e2a\u6982\u5ff5\u53ef\u80fd\u975e\u5e38\u5fae\u5999\uff0c\u4f46\u6211\u4eec\u5c06\u5728\u8fd9\u91cc\u5c3d\u91cf\u4fdd\u6301\u7b80\u5355\u3002\u591a\u5934\u5934\u5bf8\u662f\u60a8\u8d2d\u4e70\u5e76\u6301\u6709\u7684\u5934\u5bf8\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u591a\u5934\u5934\u5bf8\u5728\u4ef7\u683c\u4e0a\u6da8\u65f6\u6709\u5229\u53ef\u56fe\uff0c\u800c\u5728\u4ef7\u683c\u4e0b\u8dcc\u65f6\u5219\u65e0\u5229\u53ef\u56fe\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f\u8d2d\u4e70\u4e00\u5bb6\u516c\u53f8\u7684\u80a1\u7968\u3002\u5982\u679c\u80a1\u4ef7\u4e0a\u6da8\uff0c\u60a8\u7684\u80a1\u7968\u73b0\u5728\u4ef7\u503c\u66f4\u9ad8\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u4ee5\u66f4\u9ad8\u7684\u4ef7\u683c\u51fa\u552e\u5b83\uff08\u4ee5\u83b7\u53d6\u5229\u6da6\uff09\u3002\u5982\u679c\u80a1\u4ef7\u4e0b\u8dcc\uff0c\u60a8\u7684\u80a1\u7968\u73b0\u5728\u5c06\u8d2c\u503c\uff0c\u56e0\u4e3a\u60a8\u53ea\u80fd\u4ee5\u66f4\u4f4e\u7684\u4ef7\u683c\uff08\u4e8f\u635f\uff09\u51fa\u552e\u5b83\u3002\u7a7a\u5934\u5934\u5bf8\u662f\u60a8\u5356\u51fa\u7a7a\u5934\u7684\u5934\u5bf8\u3002\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u591a\u79cd\u60c5\u51b5\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u60a8\u4ea4\u6613\u7684\u91d1\u878d\u5de5\u5177\u7c7b\u578b\u3002\u5356\u7a7a\u901a\u5e38\u4e0e\u80a1\u7968\u5e02\u573a\u76f8\u5173\uff0c\u5728\u80a1\u7968\u5e02\u573a\u4e2d\uff0c\u4ea4\u6613\u8005\u80fd\u591f\u4ee5\u4e00\u79cd\u65b9\u5f0f\u5efa\u7acb\u5934\u5bf8\uff0c\u5982\u679c\u80a1\u7968\u4ef7\u683c\u4e0b\u8dcc\u800c\u4e0d\u662f\u4e0a\u6da8\uff0c\u4ed6\u4eec\u5c06\u83b7\u5229\u3002\u76f8\u53cd\uff0c\u5982\u679c\u7a7a\u5934\u5934\u5bf8\u7684\u4ef7\u683c\u4e0a\u6da8\uff0c\u5219\u8be5\u5934\u5bf8\u5c06\u65e0\u5229\u53ef\u56fe\u3002\u4e3a\u4e86\u80fd\u591f\u5356\u7a7a\u80a1\u7968\uff0c\u9700\u8981\u51e0\u4e2a\u6b65\u9aa4\uff1a\n\u4ece\u5df2\u7ecf\u62e5\u6709\u5b83\u4eec\u7684\u4eba\uff08\u4f8b\u5982\u7ecf\u7eaa\u4eba\uff09\u90a3\u91cc\u501f\u7528 100 \u80a1\u3002\u65e0\u8bba\u60a8\u501f\u591a\u4e45\uff0c\u8fd9\u6837\u505a\u901a\u5e38\u90fd\u4f1a\u82b1\u8d39\u60a8\u4e00\u4e9b\u5229\u606f\u3002\u4ee5\u73b0\u884c\u4ef7\u683c\u5728\u5e02\u573a\u4e0a\u51fa\u552e\u8fd9\u4e9b\u80a1\u7968\uff0c\u6bd4\u5982 50 \u7f8e\u5143\u3002\u8fd9\u7ed9\u6211\u4eec\u7559\u4e0b\u4e86 100 * \\$50 = \\$5,000\uff0c\u5e76\u4e14\u6ca1\u6709\u4efd\u989d\u3002\u4e0d\u8fc7\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u8fd4\u8fd8\u6211\u4eec\u501f\u6765\u7684\u90a3\u4e9b\u80a1\u7968\u3002\u5047\u8bbe\u4ef7\u683c\u964d\u81f3 45 \u7f8e\u5143\u3002\u6211\u4eec\u4ece\u5e02\u573a\u4e0a\u8d2d\u4e70 100 \u80a1\uff0c\u652f\u4ed8 100 * \\$45 = \\$4,500\u3002\u6211\u4eec\u8fd4\u8fd8 100 \u80a1\uff0c\u6211\u4eec\u5269\u4e0b \\$5,000 - \\$4,500 = \\$500 \u7684\u5229\u6da6\u3002\u5373\u4f7f\u4ef7\u683c\u4e0b\u8dcc\uff0c\u6211\u4eec\u4e5f\u83b7\u5229\u3002\u4e0d\u8fc7\uff0c\u4e0d\u4ec5\u4ec5\u662f\u80a1\u7968\u3002\u60a8\u53ef\u4ee5\u505a\u7a7a\u5404\u79cd\u4e0d\u540c\u7684\u5de5\u5177\u548c\u8bc1\u5238\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5b83\u4eec\u7684\u884c\u4e3a\u65b9\u5f0f\u3002\u5982\u679c\u60a8\u6ca1\u6709\u5934\u5bf8\uff0c\u4e70\u5165\u6216\u5356\u51fa\u7a7a\u5934\u7684\u884c\u4e3a\u79f0\u4e3a\u5f00\u4ed3\u3002\u5982\u524d\u6240\u8ff0\uff0c\u60a8\u5c06\u5728\u7279\u5b9a\u65b9\u5411\uff08\u591a\u5934\u6216\u7a7a\u5934\uff09\u5f00\u4ed3\u3002\u5982\u679c\u60a8\u6301\u6709\u672a\u5e73\u4ed3\u5934\u5bf8\uff0c\u5219\u5728\u540c\u4e00\u65b9\u5411\u4e0a\u4e70\u5165\u6216\u5356\u51fa\u66f4\u591a\uff08\u4f8b\u5982\uff0c\u591a\u5934\u5934\u5bf8\u4e70\u5165\u66f4\u591a\uff09\u79f0\u4e3a\u589e\u52a0\u60a8\u7684\u5934\u5bf8\u3002\u76f8\u53cd\uff0c\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u672a\u5e73\u4ed3\u5934\u5bf8\u5e76\u4e14\u60a8\u4ee5\u76f8\u53cd\u7684\u65b9\u5411\u4e70\u5165\u6216\u5356\u51fa\uff0c\u90a3\u4e48\u60a8\u5c31\u88ab\u8ba4\u4e3a\u662f\u5728\u51cf\u4ed3\u3002\u5982\u679c\u60a8\u51cf\u5f97\u8db3\u591f\u591a\uff0c\u60a8\u7684\u5934\u5bf8\u73b0\u5728\u51c0\u4e3a\u96f6\uff08\u5373\u60a8\u5356\u51fa\u7684\u6570\u91cf\u4e0e\u60a8\u7684\u591a\u5934\u5934\u5bf8\u76f8\u540c\uff09\uff0c\u8fd9\u79f0\u4e3a\u5e73\u4ed3\u3002\u5982\u679c\u60a8\u56e0\u4e3a\u5173\u95ed\u4e86\u73b0\u6709\u5934\u5bf8\u800c\u6ca1\u6709\u5934\u5bf8\uff0c\u5219\u60a8\u7684\u5934\u5bf8\u88ab\u89c6\u4e3a\u6301\u5e73\u3002\n\u6bcf\u6b21\u4ea4\u6613\u65f6\uff0c\u60a8\u90fd\u4f1a\u6539\u53d8\u5f53\u524d\u7684\u5934\u5bf8\u3002\u4e70\u5165 10 \u80a1\u540c\u65f6\u6301\u6709 100 \u7684\u591a\u5934\u5934\u5bf8\u4f1a\u5c06\u60a8\u7684\u5934\u5bf8\u589e\u52a0\u5230 110\u3002\u4e4b\u540e\u5356\u51fa 20 \u80a1\u5c06\u60a8\u7684\u5934\u5bf8\u51cf\u5c11\u5230 90\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u60a8\u5bf9\u8bc1\u5238\u53ea\u6709\u4e00\u4e2a\u201c\u51c0\u201d\u5934\u5bf8\uff0c\u8fd9\u610f\u5473\u7740\u968f\u7740\u60a8\u4ea4\u6613\u7684\u66f4\u591a\u4f4d\u7f6e\u4f1a\u6839\u636e\u60a8\u7684\u64cd\u4f5c\u800c\u4e0a\u4e0b\u6ce2\u52a8\u3002\u9274\u4e8e\u6211\u4eec\u6709\u4e00\u4e2a\u5934\u5bf8\uff08\u751a\u81f3\u662f\u5e73\u5934\u5bf8\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ea4\u6613\u201c\u5e94\u7528\u201d\u5230\u8be5\u5934\u5bf8\uff0c\u4ee5\u4fbf\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u66f4\u65b0\u5934\u5bf8\u6765\u8bf4\u660e\u8be5\u4ea4\u6613\u3002\u5bf9\u4e8e\u90a3\u4e9b\u66f4\u503e\u5411\u4e8e\u6570\u5b66\u7684\u4eba\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4f4d\u7f6e $P_{current}$ \u548c\u4e00\u4e2a\u4ea4\u6613 $t$ \u4ee5\u53ca\u4e00\u4e2a\u5e94\u7528\u51fd\u6570 $f$\uff0c\u6211\u4eec\u5f97\u5230\u4ee5\u4e0b\u8868\u8fbe\u5f0f\uff1a\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c06\u4e00\u4e2a\u4ea4\u6613\u5e94\u7528\u5230\u4e00\u4e2a\u4f4d\u7f6e\u7ed9\u6211\u4eec\u53e6\u4e00\u4e2a\uff08\u4e0d\u540c\u7684\uff09\u4f4d\u7f6e $P_{new}$\u3002\u5982\u679c\u6211\u4eec\u6709\u5f88\u591a\u4ea4\u6613\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u7ed3\u679c\u5934\u5bf8\u4f5c\u4e3a\u4e0b\u4e00\u7b14\u4ea4\u6613\u7684\u8f93\u5165\u7ee7\u7eed\u5e94\u7528\u8fd9\u4e9b\u4ea4\u6613\u3002\u5728\u6240\u6709\u8fd9\u4e00\u5207\u7ed3\u675f\u65f6\uff0c\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u4ee3\u8868\u6211\u4eec\u6240\u505a\u7684\u6240\u6709\u4ea4\u6613\u7684\u6700\u7ec8\u5934\u5bf8\u3002\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u7531\u51e0\u4e2a\u4e0d\u540c\u7684\u503c\u7ec4\u6210\uff0c\u8fd9\u4e9b\u503c\u90fd\u544a\u8bc9\u6211\u4eec\u6709\u5173\u8be5\u4f4d\u7f6e\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\u5728\u4ee5\u4e0b\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u6982\u8ff0\u5b83\u4eec\u5404\u81ea\u7684\u542b\u4e49\uff0c\u4ee5\u53ca\u5982\u4f55\u8ba1\u7b97\u5b83\u4eec\u3002\u5982\u524d\u6240\u8ff0\uff0c\u5934\u5bf8\u53ef\u4ee5\u662f\u591a\u5934\u6216\u7a7a\u5934\uff08\u6216\u6301\u5e73\uff09\u3002\u8fd9\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u5b57\u6765\u8868\u793a\uff0c\u5b83\u4ee3\u8868\u60a8\u62e5\u6709\u7684\u8bc1\u5238\u6570\u91cf\uff0c\u4ee5\u53ca\u60a8\u662f\u505a\u591a\u8fd8\u662f\u505a\u7a7a\u3002\u5982\u679c\u5934\u5bf8\u4e3a\u591a\u5934\uff0c\u5219\u6570\u91cf\u4e3a\u6b63\u3002\u5982\u679c\u5b83\u5f88\u77ed\uff0c\u5219\u6570\u91cf\u4e3a\u8d1f\u3002\u5982\u679c\u4ed3\u4f4d\u662f\u5e73\u7684\uff08\u6ca1\u6709\u4ed3\u4f4d\uff09\uff0c\u5219\u6570\u91cf\u4e3a 0\u3002\u5f53\u6d89\u53ca\u5230\u5404\u79cd\u8ba1\u7b97\u65f6\uff0c\u8fd9\u5728\u6570\u5b66\u4e0a\u975e\u5e38\u597d\uff0c\u6211\u4eec\u5c06\u5728\u540e\u9762\u770b\u5230\u3002\u6bd4\u5982\u4f60\u6301\u6709100\u80a1\uff0c\u4f60\u7684\u4ed3\u4f4d\u6570\u91cf\u662f100\u3002\u5982\u679c\u4f60\u505a\u7a7a100\u80a1\uff0c\u4f60\u7684\u6570\u91cf\u662f-100\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u4ed3\u4f4d\u5c31\u662f0\u3002\u4f60\u4f1a\u8bb0\u5f97\uff0c\u6bcf\u5f53\u4f60\u548c\u67d0\u4eba\u4ea4\u6613\u65f6\uff0c\u90fd\u4f1a\u5bfc\u81f4\u5728\u4e24\u4e2a\u884c\u4e1a\u3002\u4ea4\u6613\u6240\u7684\u516c\u5f00\u4ea4\u6613\u4fe1\u606f\u5c06\u516c\u5e03\u6fc0\u8fdb\u4e00\u65b9\u7684\u4ea4\u6613\uff0c\u4f46\u53cc\u65b9\u90fd\u4f1a\u6536\u5230\u4e00\u6761\u6d88\u606f\uff0c\u8bf4\u660e\u4ed6\u4eec\u8fdb\u884c\u4e86\u4ea4\u6613\u3002\u8fd9\u4e9b\u79c1\u4eba\u6d88\u606f\u901a\u5e38\u79f0\u4e3a\u6267\u884c\uff0c\u5b83\u4eec\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4ea4\u6613\u6240\u53c2\u4e0e\u8005\u7684\u66f4\u8be6\u7ec6\u7684\u79c1\u4eba\u6d88\u606f\u3002\u5c06\u4e3a\u60a8\u6267\u884c\u4e00\u6b21\uff0c\u53e6\u4e00\u6b21\u4e3a\u60a8\u7684\u4ea4\u6613\u5bf9\u624b\uff08\u4e0e\u60a8\u4ea4\u6613\u7684\u53c2\u4e0e\u8005\uff09\u6267\u884c\u3002\u4f46\u662f\uff0c\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u79f0\u4e3a\u4ea4\u6613\uff0c\u56e0\u4e3a\u5b83\u4eec\u672c\u8d28\u4e0a\u4ee3\u8868\u76f8\u540c\u7684\u4e8b\u7269\u3002\n\u4ece\u4e00\u7cfb\u5217\u4ea4\u6613\u4e2d\u8ba1\u7b97\u60a8\u7684\u603b\u6570\u91cf\u975e\u5e38\u7b80\u5355\u3002\u6bcf\u7b14\u4ea4\u6613\u90fd\u6709\u4e00\u9762\uff08\u4e70\u5165\u6216\u5356\u51fa\uff09\u4ee5\u53ca\u6570\u91cf\u548c\u4ef7\u683c\u3002\u8981\u4ece\u4e00\u7cfb\u5217\u4ea4\u6613\u4e2d\u83b7\u5f97\u6700\u7ec8\u5934\u5bf8\u6570\u91cf\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u6240\u6709\u6570\u91cf\u76f8\u52a0\uff0c\u4e58\u4ee5\u8fb9\u7684\u7b26\u53f7\u3002\u4e70\u5165\u7684\u7b26\u53f7\u901a\u5e38\u4e3a 1\uff0c\u5356\u51fa\u4ea4\u6613\u7684\u7b26\u53f7\u4e3a -1\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u6570\u91cf\u4e3a -100 \u7684\u5c0f\u7a7a\u5934\u5934\u5bf8\u3002\u6211\u4eec\u50cf\u8fd9\u6837\u8fdb\u884c\u4e09\u7b14\u4ea4\u6613\uff1a \u6210\u672c\u57fa\u7840\u662f\u4e00\u4e2a\u4ee3\u8868\u5934\u5bf8\u603b\u6210\u672c\u7684\u6570\u5b57\u3002\u5982\u679c\u8be5\u6570\u5b57\u4e3a\u6b63\u6570\uff0c\u5219\u8868\u793a\u60a8\u82b1\u94b1\u8d2d\u4e70\u4e86\u8be5\u804c\u4f4d\uff08\u8fd9\u4f7f\u60a8\u4ed8\u51fa\u4e86\u4e00\u4e9b\u4ee3\u4ef7\uff09\u3002\u5982\u679c\u6570\u5b57\u662f\u8d1f\u6570\uff0c\u5219\u610f\u5473\u7740\u60a8\u5728\u5934\u5bf8\u4e0a\u6536\u5230\u4e86\u8d44\u91d1\uff08\u4e0e\u6210\u672c\u76f8\u53cd\uff09\u3002\u8fd9\u6700\u521d\u53ef\u80fd\u6709\u6096\u5e38\u7406\uff0c\u4f46\u4e86\u89e3\u8be5\u7b26\u53f7\u6709\u52a9\u4e8e\u786e\u5b9a\u60a8\u5934\u5bf8\u7684\u73b0\u91d1\u8981\u7d20\u3002\u5982\u679c\u60a8\u589e\u52a0\u5934\u5bf8\uff0c\u5e76\u7ed9\u51fa\u4e00\u7ec4\u4ea4\u6613\uff0c\u60a8\u7684\u603b\u6210\u672c\u57fa\u7840\u662f\u6bcf\u7b14\u4ea4\u6613\u7684\u603b\u6210\u672c\u4e4b\u548c\u3002\u8bf7\u8bb0\u4f4f\uff0c\u6210\u672c\u6709\u4e00\u4e2a\u7b26\u53f7\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4ece\u4ea4\u6613\u65b9\u83b7\u5f97\u7b26\u53f7\uff0c\u5c31\u50cf\u6211\u4eec\u5bf9\u6570\u91cf\u6240\u505a\u7684\u4e00\u6837\u3002\u4e70\u5165\u7684\u6210\u672c\u4e3a\u6b63\uff0c\u800c\u5356\u51fa\u7684\u6210\u672c\u4e3a\u8d1f\u3002\u4f8b\u5982\uff0c\u8003\u8651\u6301\u5e73\u4ed3\u4f4d\uff080 \u6210\u672c\u57fa\u7840\uff09\uff0c\u4ee5\u53ca\u4ee5\u4e0b\u4e70\u5165\u4ea4\u6613\uff1a \u5bf9\u4e8e\u5356\u51fa\u4ea4\u6613\uff0c\u6211\u4eec\u51c0\u7a7a\u5934\uff08\u6211\u4eec\u7684\u4ed3\u4f4d\u6570\u91cf\u4e3a\u8d1f\uff09600 \u80a1\u3002\u6211\u4eec\u7684\u6210\u672c\u57fa\u7840\u662f -\\$80,000\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ece\u62e5\u6709\u8fd9\u4e2a\u804c\u4f4d\u4e2d\u83b7\u5f97\u4e86\u8fd9\u7b14\u94b1\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u603b\u5171\u6709 600 \u80a1\u7684\u7a7a\u5934\u5934\u5bf8\uff0c\u4ee5\u53ca\u901a\u8fc7\u51fa\u552e\u6211\u4eec\u501f\u6765\u7684\u80a1\u7968\u83b7\u5f97\u7684 8 \u4e07\u7f8e\u5143\u73b0\u91d1\uff08\u4e0d\u5148\u501f\u5165\u5c31\u51fa\u552e\u662f\u975e\u6cd5\u7684\uff0c\u8fd9\u79f0\u4e3a\u88f8\u5356\u7a7a\uff09\u3002\u7ed9\u5b9a\u4e00\u4e2a\u5177\u6709\u4e00\u5b9a\u6570\u91cf\u548c\u6210\u672c\u57fa\u7840\u7684\u804c\u4f4d\u3002\u5e73\u5747\u5165\u573a\u4ef7\u683c\u4ee3\u8868\u8ba9\u60a8\u8fdb\u5165\u5934\u5bf8\u7684\u4ea4\u6613\u4ef7\u683c\u7684\u52a0\u6743\u5e73\u5747\u503c\u3002\u8fd9\u662f\u4e00\u4e2a\u4e00\u76ee\u4e86\u7136\u7684\u503c\uff0c\u5b83\u544a\u8bc9\u60a8\u5e73\u5747\u4ee5\u4ec0\u4e48\u4ef7\u683c\u8fdb\u5165\u5934\u5bf8\u3002\u7ec6\u5fc3\u7684\u8bfb\u8005\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u4ea4\u6613\u7684\u52a0\u6743\u5e73\u5747\u4ef7\u683c\u5b9e\u9645\u4e0a\u53ea\u662f\u6210\u672c\u57fa\u7840\u9664\u4ee5\u6301\u4ed3\u6570\u91cf\uff1a\n\u4f7f\u7528\u4e4b\u524d\u7684\u8ba1\u7b97\uff0c\u6211\u4eec\u7684\u6210\u672c\u57fa\u7840\u662f $51,000\uff0c\u6211\u4eec\u7684\u5934\u5bf8\u6570\u91cf\u662f 500 \u5f20\u5408\u7ea6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u5e73\u5747\u4ef7\u683c\u662f $\\frac{\\$51000}{500} = \\$102$\u3002\u5bf9\u4e8e\u7a7a\u5934\u5934\u5bf8\uff0c\u60c5\u51b5\u662f\u4e00\u6837\u7684\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u76f8\u540c\u7684\u7a7a\u5934\u5934\u5bf8\uff0c\u6210\u672c\u57fa\u7840\u4e3a -\\$51,000\uff0c\u6570\u91cf\u4e3a -500 \u80a1\u3002\u6211\u4eec\u7684\u5e73\u5747\u4ef7\u683c\u662f $\\frac{-\\$51000}{-500} = \\$102$\uff0c\u8fd9\u662f\u76f8\u540c\u7684\u5165\u573a\u4ef7\u3002\u8bf7\u6ce8\u610f\uff0c\u6210\u672c\u57fa\u7840\u548c\u6570\u91cf\u4e0a\u7684\u8d1f\u53f7\u76f8\u62b5\u6d88\uff0c\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\u90fd\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u6b63\u4ef7\u683c\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u7814\u7a76\u4e86\u5f53\u6211\u4eec\u53ea\u589e\u52a0\u5934\u5bf8\u65f6\u6211\u4eec\u7684\u6210\u672c\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u901a\u8fc7\u53cd\u5411\u4ea4\u6613\u6765\u51cf\u5c11\u6211\u4eec\u73b0\u6709\u7684\u5934\u5bf8\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u901a\u8fc7\u51cf\u5c11\u5934\u5bf8\uff0c\u6211\u4eec\u4e0d\u4ec5\u51cf\u5c11\u4e86\u6570\u91cf\u548c\u6210\u672c\u57fa\u7840\uff0c\u800c\u4e14\u8fd8\u53ef\u80fd\u5b9e\u73b0\u76c8\u5229\u6216\u4e8f\u635f\u3002\u5728\u4ea4\u6613\u4e2d\uff0c\u672f\u8bed PnL \u6216 P&amp;L \u662f Profit and Loss \u7684\u5e38\u89c1\u7b80\u5199\u3002\u5df2\u5b9e\u73b0\u7684\u635f\u76ca\u662f\u60a8\u4ec5\u4ece\u4ea4\u6613\u4e2d\u5b9e\u9645\u4ee5\u73b0\u91d1\u83b7\u5f97\u7684\u635f\u76ca\u3002\u5178\u578b\u7684\u4f8b\u5b50\u662f\u201c\u4f4e\u4e70\u9ad8\u5356\u201d\u7684\u60f3\u6cd5\u3002\u6253\u7834\u8fd9\u4e2a\u77ed\u8bed\uff0c\u5b83\u672c\u8d28\u4e0a\u662f\u5f00\u4e00\u4e2a\u591a\u5934\u5934\u5bf8\uff0c\u7136\u540e\u4ee5\u66f4\u9ad8\u7684\u4ef7\u683c\u51cf\u5c11\uff08\u6216\u5173\u95ed\uff09\u5b83\u3002\u7531\u6b64\u4ea7\u751f\u7684\u5229\u6da6\u662f\u60a8\u5b9e\u73b0\u7684\u76c8\u4e8f\uff0c\u8ba1\u7b97\u5b83\u7684\u4e00\u822c\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d $Price_{entry}$ \u662f\u60a8\u8fdb\u5165\u5934\u5bf8\u7684\u4ef7\u683c\uff0c\u800c $Price_{exit}$ \u662f\u60a8\u5356\u51fa\u5934\u5bf8\u7684\u4ef7\u683c\u5728\u3002\u4ece\u6570\u5b66\u4e0a\u8bb2\uff0c\u5982\u679c\u60a8\u7684 PnL \u503c\u4e3a\u6b63\uff0c\u5219\u4e3a\u76c8\u5229\uff0c\u5982\u679c\u4e3a\u8d1f\uff0c\u5219\u4e3a\u4e8f\u635f\u3002\u7136\u800c\uff0c\u60a8\u5982\u4f55\u8ba1\u7b97\u5df2\u5b9e\u73b0\u5229\u6da6\u5b9e\u9645\u4e0a\u6bd4\u4e4d\u770b\u8d77\u6765\u66f4\u590d\u6742\u3002\u4e00\u4e2a\u5173\u952e\u539f\u56e0\u662f\u60a8\u4f7f\u7528\u54ea\u79cd\u5e93\u5b58\u8bc4\u4f30\u65b9\u6cd5\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u793a\u4f8b\u6765\u8bf4\u660e\u3002\u8003\u8651\u4ee5\u4e0b\u4e24\u7ec4\u4ea4\u6613\uff1a\u5bf9\u4e8e\u7b2c\u4e00\u7ec4 (A)\uff0c\u6211\u4eec\u521b\u5efa\u4e86 500 \u5f20\u5408\u7ea6\u7684\u591a\u5934\u5934\u5bf8\uff0c\u6210\u672c\u57fa\u7840\u4e3a 54,000 \u7f8e\u5143\uff0c\u5e73\u5747\u4ef7\u683c\u4e3a 108 \u7f8e\u5143\u3002\u73b0\u5728\u6211\u4eec\u9700\u8981\u6267\u884c\u7b2c\u4e8c\u7ec4\u4ea4\u6613\uff08B\uff09\uff0c\u5b83\u4eec\u90fd\u662f\u5356\u51fa\u3002\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u65e6\u8fd9\u4e9b\u4ea4\u6613\u6267\u884c\uff0c\u6211\u4eec\u5c06\u5269\u4e0b 500 - 300 = 200 \u80a1\u7684\u5934\u5bf8\u6570\u91cf\u3002\u4f46\u662f\u901a\u8fc7\u51fa\u552e\u8fd9\u4e9b\u80a1\u7968\u6211\u4eec\u80fd\u8d5a\u591a\u5c11\u94b1\uff1f\n\u6709\u8da3\u7684\u662f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6211\u4eec\u8ba1\u5212\u51fa\u552e\u54ea\u4e9b\u80a1\u7968\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u4ef7\u683c\u5728\u4e24\u7b14\u4ea4\u6613\u4e2d\u4e70\u5165\u3002\u5982\u679c\u6211\u4eec\u5c06\u8fd9\u4e9b\u4ea4\u6613\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u89c6\u4e3a\u72ec\u7acb\u7684\uff0c\u6211\u4eec\u5c06\u6839\u636e\u6211\u4eec\u51fa\u552e\u7684\u4ea4\u6613\u83b7\u5f97\u4e0d\u540c\u7684\u5229\u6da6\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u591a\u79cd\u5e93\u5b58\u4f30\u503c\u65b9\u6cd5\u53ef\u7528\u4e8e\u8ba1\u7b97\uff1a\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u6309\u7167\u83b7\u5f97\u80a1\u7968\u7684\u987a\u5e8f\u51fa\u552e\u6211\u4eec\u7684\u80a1\u7968\u3002\u6211\u4eec\u8fdb\u884c\u6bcf\u7b14\u5356\u51fa\u4ea4\u6613\uff0c\u5e76\u6309\u7167\u4e70\u5165\u7684\u76f8\u540c\u987a\u5e8f\u5c06\u5176\u4e0e\u6211\u4eec\u7684\u4e70\u5165\u8fdb\u884c\u5339\u914d\u3002\u6211\u4eec\u8ba1\u7b97\u6bcf\u4e00\u9879\u7684\u5229\u6da6\uff0c\u5e76\u8c03\u6574\u6210\u672c\u57fa\u7840\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9996\u5148\u5c06\u4ea4\u6613 C \u4e0e\u4ea4\u6613 A \u8fdb\u884c\u5339\u914d\u3002\u6211\u4eec\u83b7\u5f97\u4e86 100*(\\$100-\\$90) = \\$1000 \u7684\u5229\u6da6\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u6211\u4eec\u7684\u6210\u672c\u57fa\u7840\u51cf\u5c11\u4e86\u6211\u4eec\u4ee5\u539f\u59cb\u4ef7\u683c\u51fa\u552e\u7684\u6570\u91cf\uff0c\u6240\u4ee5 100* \\$90 = \\$9,000\u3002\u7b2c\u4e8c\u4e2a\u5356\u51fa\u4ea4\u6613 (D) \u66f4\u590d\u6742\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5339\u914d A \u5269\u4f59 100 \u80a1\u7684 200 \u80a1\u548c B \u7684 100 \u80a1\u3002\u56e0\u6b64\u603b\u5229\u6da6\u4e3a (100*(\\$110-\\$90)) + (100*(\\$110-\\$120)) = \\$2000 - \\$1000 = \\$1000 \u5229\u6da6\u3002\u6211\u4eec\u8fd8\u5c06\u6210\u672c\u57fa\u7840\u964d\u4f4e\u4e86 (100*\\$90) + (100*\\$120) = \\$21,000\u3002\u6211\u4eec\u7684\u6700\u7ec8\u5934\u5bf8\u662f 200 \u80a1\uff0c\u6210\u672c\u57fa\u7840\u4e3a 24,000 \u7f8e\u5143\uff0c\u5df2\u5b9e\u73b0\u76c8\u4e8f\u4e3a 2,000 \u7f8e\u5143\u3002\u8fd9\u79cd\u65b9\u6cd5\u672c\u8d28\u4e0a\u4e0e\u5148\u8fdb\u5148\u51fa\u65b9\u6cd5\u76f8\u53cd\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5\u4e0e\u6536\u8d2d\u76f8\u53cd\u7684\u987a\u5e8f\u51fa\u552e\u6211\u4eec\u7684\u80a1\u7968\u3002\u6211\u4eec\u9996\u5148\u5c06\u5356\u51fa\u4ea4\u6613 C \u4e0e B \u76f8\u5339\u914d\uff0c\u8fd9\u5bfc\u81f4\u51c0\u4e8f\u635f 2,000 \u7f8e\u5143\uff0c\u6210\u672c\u57fa\u7840\u51cf\u5c11 12,000 \u7f8e\u5143\u3002\u4ea4\u6613 D \u5b8c\u5168\u629b\u552e C \u4ea4\u6613\uff0c\u540c\u65f6\u51c0\u4e8f\u635f 2,000 \u7f8e\u5143\uff0c\u6210\u672c\u57fa\u7840\u51cf\u5c11 24,000 \u7f8e\u5143\u3002\u603b\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u6700\u7ec8\u5b9e\u73b0\u7684\u76c8\u4e8f\u4e3a -\\$4,000\uff08\u51c0\u4e8f\u635f\uff09\uff0c\u4ee5\u53ca 200 \u80a1\u7684\u5934\u5bf8\uff0c\u6210\u672c\u57fa\u7840\u4e3a \\$18,000\u3002\u8fd9\u79cd\u65b9\u6cd5\u5e73\u5747\u4e86\u4ea4\u6613\u6210\u672c\uff0c\u5e76\u4f7f\u7528\u5e73\u5747\u4ef7\u683c\u6765\u8ba1\u7b97\u5df2\u5b9e\u73b0\u7684\u76c8\u4e8f\u3002\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec 500 \u80a1\u7684\u5e73\u5747\u5165\u573a\u4ef7\u4e3a 108 \u7f8e\u5143\u3002\u6211\u4eec\u67e5\u770b\u6211\u4eec\u6240\u505a\u7684\u5356\u51fa\u4ea4\u6613\uff0c\u5e76\u5c06\u5b83\u4eec\u6c47\u603b\u5728\u4e00\u8d77\u4ee5\u521b\u5efa\u76f8\u53cd\u7684\u7a7a\u5934\u5934\u5bf8\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ea4\u6613 C \u548c D \u5408\u5e76\u521b\u5efa 300 \u80a1\u7684\u7a7a\u5934\u5934\u5bf8\uff0c\u5e73\u5747\u4ef7\u683c\u4e3a $106.666\u3002\u6ce8\u610f\u4ef7\u683c\u4e0a\u7684\u5faa\u73af\u5c0f\u6570\u3002\n\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u5934\u5bf8\u89c6\u4e3a\u4e00\u7b14\u4ea4\u6613\u3002\u6211\u4eec\u5b9e\u73b0\u7684\u76c8\u4e8f\u662f 300*(\\$106.666 - \\$108) = -\\$400\uff0c\u6211\u4eec\u5269\u4f59 200 \u4e2a\u6570\u91cf\u4ed3\u4f4d\u7684\u6210\u672c\u57fa\u7840\u662f \\$54,000 - (300*\\$108) = \\$21,600\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u65b9\u6cd5\u6bd4\u5176\u4ed6\u4e24\u79cd\u65b9\u6cd5\u7b80\u5355\u5f97\u591a\uff0c\u4f46\u7531\u4e8e\u60a8\u5fc5\u987b\u4f7f\u7528\u5e73\u5747\u4ef7\u683c\uff0c\u56e0\u6b64\u60a8\u4f1a\u9762\u4e34\u6d6e\u70b9\u4e0d\u7cbe\u786e\u6027\uff0c\u5373\u8ba1\u7b97\u673a\u5728\u8ba1\u7b97\u5c0f\u6570\u65f6\u7f3a\u4e4f\u51c6\u786e\u6027\u3002\u5982\u679c\u6b64\u5e73\u5747\u4ef7\u683c\u8ba1\u7b97\u5b8c\u6210\u5f97\u8db3\u591f\u591a\uff0c\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u7d2f\u79ef\u3002\u5728\u4e0d\u66b4\u9732\u4e8e\u6d6e\u70b9\u4e0d\u7cbe\u786e\u98ce\u9669\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u6b64\u65b9\u6cd5\u7559\u7ed9\u8bfb\u8005\u4f5c\u4e3a\u7ec3\u4e60\u3002\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u4e09\u79cd\u65b9\u6cd5\u5728\u5b9e\u73b0\u7684 pnl \u4e0a\u7684\u5dee\u5f02\u662f\u76f8\u5f53\u5927\u7684\u3002\u7b2c\u4e00\u6b21\u6211\u4eec\u76c8\u5229\uff08\\$2,000\uff09\uff0c\u7b2c\u4e8c\u6b21\u6211\u4eec\u4e8f\u635f\u5927\uff08-\\$4,000\uff09\uff0c\u7b2c\u4e09\u6b21\u6211\u4eec\u4e8f\u635f\u8f83\u5c0f\uff08-\\$400\uff09\u3002\u867d\u7136\u8fd9\u770b\u8d77\u6765\u6709\u70b9\u75af\u72c2\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u6240\u6709\u8fd9\u4e9b\u4e0d\u540c\u7684\u65b9\u6cd5\u6240\u505a\u7684\u90fd\u662f\u66f4\u65e9\u6216\u66f4\u65e9\u5730\u5b9e\u73b0 PnL ......", "note_en": "All the views expressed below are the personal views of the author, and are not financial or investment advice. In the  previous article we discussed the structure of order books, and the mechanics of trading. Today, I want to go through what happens after those trades occur. Primarily, how we keep track not only of what we\u2019ve traded, but how much profit we\u2019ve earned or losses we\u2019ve accrued by doing it. As before this is very much an introductory guide, so seasoned professionals may wish to skip.\n  Whatever your trading platform of choice, fundamentally they all seem to do the same thing. They let you trade, and they will manage your money, stocks, crypto, etc. From your perspective it all seems quite simple, you click buy or sell, and the securities or crypto appear in your account. The reality however can be more complicated than it seems, and we will briefly cover this topic as a backdrop to the technical aspect of managing positions.\n  An  exchange is a venue where securities can be bought or sold. An exchange will facilitate trading by listing shares, contracts, etc and hosting the order books required to trade these. Exchanges will provide  connectivity which is a generic term for the ability of market participants to be able to connect and place orders as well as receive responses to these orders. They will also provide a public facing data feed for trades, and price updates. This is commonly referred to as just  market data. These days this is almost entirely electronic, with communication going over a network. For most exchanges that is essentially all they do.\n  In traditional markets (stocks, bonds, etc) the general public rarely has access to exchanges. Generally larger firms and specialist institutions trade on them, and onboarding on one of these exchanges requires various legal arrangements, as well as a non trivial technology set up. Nevertheless, regular investors can still get access to an exchange via an intermediary firm which we will cover in the next section.\n  A  broker is (typically) a firm that allows regular investors to gain access to various markets in order to buy and sell securities. In order to do this, a broker must be a participant with each exchange that they want to trade on. When a client wishes to purchase a stock, the broker may route that order to the exchange on behalf of the client. In addition to this, there are various \u201cvalue-add\u201d services that brokers can provide to clients. These can include, but are not limited to:\n Providing market data and order book information to clients so they can see prevailing prices.\n Expose a user friendly trading interface to clients which is easy to understand and gives them access to multiple exchanges and markets (most retail clients will have neither the stomach nor the funds for setting up the infrastructure required to connect to an exchange).\n  Take  custody (ownership) of securities clients purchase, and manage things such as dividends, voting, etc. Expose this to clients so that they can see what they own, and how much it is worth.\n Provide  margin (a loan) so that clients can trade more shares than they have ready cash for.\n  For most people, using these brokers will be something that they will be quite familiar with, even though the actual trading of their shares will happen somewhere in the background. Brokers in fact do not always have to go to an exchange directly, and many will  route (send) client orders to various third parties such as market makers or other brokers. This was made quite apparent in 2020 when it was noticed that the broker RobinHood was  selling client  order flow (client orders) to the hedge fund Citadel.\n  What is readily apparent in crypto markets right now, is that nearly all of the major crypto platforms are in fact both of these entities in one! While they are called exchanges, they are also most certainly brokers as well. Take Binance for instance. They offer a way for you to get your funds and crypto into their system, they manage and take custody of your coins and contracts that you own, and they wrap it all up in a web interface that can be used by regular clients all over the world. When it comes to trading, they also provide the markets! Binance has hundreds of coin pairs, each with their own order books matching trades for customers. As such, they have both the features of a broker and of an exchange.\n Time will tell how this all plays out. At the time of writing there are already signs that this rather novel model is starting to morph into it\u2019s predecessor. Crypto pairs are now available on several (newer) brokers such as eToro and RobinHood, and even the Chicago Mercantile Exchange (CME) now  lists Bitcoin futures for trading.\n  When you go on your broker\u2019s app and purchase some shares, you will see immediately that you are now the owner of said shares. In reality however, despite having bought the shares, you are not yet the  owner of record for them. That means for instance you will not get the dividends that are paid out on that stock, nor can you vote with them. In the US, ownership of shares is transferred at  T+2 or in other words, two business days after the trade occurred.  Settlement here refers to the act of exchanging the security you bought for the cash paid.\n In crypto things are a little different. Many novice blockchain enthusiasts are surprised to find out that when they buy bitcoin on an exchange, they do not in fact have custody of it in \u201ctheir\u201d own bitcoin wallet. Though they own it in a legal sense, all it is is a record in the exchange\u2019s database. To transfer the coins to a wallet they own (physical ownership) they must first withdraw their coins from the exchange. The actual trades however, all happen within the exchange itself, and pretty much never touch the blockchain (primarily as this would be too slow for normal trading).\n Exchanges losing track of the amount of physical and \u201cvirtual\u201d bitcoin (the numbers in the database) has in the past resulted in some  outrageous losses for various clients (I highly recommend this video). As with anything in crypto, it is always worth keeping in mind the maxim:  not your keys, not your coins.\n Distributed Exchanges or  DEXs are a different type of exchange that exists purely on the blockchain, and where trades are indeed done on chain and settled immediately. These have some interesting mechanisms for trading, though due to blockchain transaction speed constraints their throughput is currently quite low. Some examples of these are Uniswap and PancakeSwap.\n   &amp;mldrthe amount of a security, asset, or property that is owned (or sold short) by some individual or other entity. A trader or investor takes a position when they make a purchase through a buy order, signaling bullish intent; or if they sell short securities with bearish intent.\n A position therefore can be the ownership of just about anything. If you buy a house you are long the housing market, since you now  have a position in a house. If you earn your salary in US Dollars and keep your money in a bank account, you are long however many USD you have. That might not matter to you now, but think about if you wanted to live in the UK and needed to move all of your assets there. Suddenly the exchange rate (the price of pounds in dollars) becomes quite important. As mentioned in the definition, a position can either be  long or  short. This is sometimes referred to as the  direction of the position. This concept can be quite nuanced, but we will try and keep it simple here.\n  A  long position is a position where you have bought something and hold it. In general a long position is profitable if the price goes up, and is unprofitable when the price goes down. A simple example is purchasing stock in a company. If the stock price goes up, your stock is now worth more because you can sell it at a higher price (for a profit). If the stock price goes down, your stock will now be worth less because you can only sell it for a lower price (for a loss).\n  A  short position is a position where you have sold something short. This can mean a variety of things, depending on what kind of financial instruments you are trading.  Short selling is normally associated with the stock market, in which a trader is able to take a position in a way that they will be profitable if the stock goes down in price, rather than up. Conversely, if the price goes up for a short position, the position will be unprofitable.\n  In order to be able to sell a stock short, it requires a few steps:\n Borrow 100 shares from someone who already owns them (such as a broker). Doing this normally costs you some money in interest for however long you borrow them for.\n Sell those shares in the market at the prevailing price, let\u2019s say \\$50. This leaves us with 100 * \\$50 = \\$5,000, and no shares.\n We still need to give those shares that we borrowed back though. Let\u2019s say the price drops to $45. We buy 100 shares from the market, paying 100 * \\$45 = \\$4,500.\n We give the 100 shares back, and we are left with \\$5,000 - \\$4,500 = \\$500 of profit. Even though the price went down, we made a profit.\n It\u2019s not just stocks though. You can go short in a variety of different instruments and securities, depending on how they behave.\n  If you have no position, the act of buying or selling something short is called to  open a position. As mentioned before, you will open your position in a particular direction (either long or short). If you have an open position, buying or selling more in the same direction (eg. buying more with a long position) is called  increasing your position.\n Conversely, if you have an open position and you buy or sell in the opposite direction, then you are said to be  reducing your position. If you reduce enough that your position is now net zero (ie. you sold the same amount as your long position), that is called  closing a position. If you have no position because you closed an existing position out, you are considered to be  flat in terms of your position.\n  Every time you trade, you will change your current position. Buying 10 shares while having a long position of 100 will  increase your position to 110. Selling 20 shares afterwards  reduces your position to 90. In general, you only have one \u201cnet\u201d position for a security, meaning that as you trade more, your position will go up and down based on what you did.\n  Given that we have a position (even a flat one), we can \u201capply\u201d trades to the position in order to get a new updated position that accounts for this trade. For those more mathematically inclined, given a position $P_{current}$ and a trade $t$ and an application function $f$ we get the following expression:\n  In other words, applying a trade to a position gives us another (different) position $P_{new}$. If we have many trades, we keep applying these trades using the resulting position as the input for the next trade. At the end of all of this, we end up with a final position that represents all of the trading that we did.\n Each position is made up of several different values that all tell us something about the position. In the following sections we will outline what each of them mean, and how they can be calculated.\n  As mentioned, a position can either be long or short (or flat). This can be represented by a single number, which will refer to the amount of securities that you own, and whether you are long or short on them. If a position is long, the quantity is positive. If it is short, the quantity is negative. If the position is flat (no position) then the quantity is 0.\n This turns out to be mathematically quite nice when it comes to various calculations, as we will see later. For instance if you own 100 shares, your  position quantity is 100. If you are short 100 shares your quantity is -100, and if you have no position it will be 0.\n As  you will recall, whenever you trade with someone this will result in two trades. The exchange\u2019s public trade feed will publish the trade for the side that was aggressive, however both participants will receive a message saying that they made a trade. These private messages are normally called  executions and they can be viewed as more detailed private messages for exchange participants. There will be one execution for you, and one with the opposite side for your  counterparty (the participant you traded with). From now on however, we will refer to these as trades for simplicity since they essentially represent the same thing.\n  Calculating your total quantity from a series of trades is quite simple. Each trade comes with both a  side (buy or sell) as well as a quantity and a price. To get the final quantity of a position from a series of trades, we simply add up all of their quantities, multiplied by the  sign of the side. The sign is normally  1 for a buy, and  -1 for a sell trade.\n  For example, let\u2019s say we have a small short position with a quantity of -100. We make three trades like so:\n      The  cost basis is a number that represents the total cost of the position. If the number is positive, that means that you paid money to acquire the position (it cost you something). If the number is negative, that means that you received money on the position (the opposite of cost). This may be initially counterintuitive but knowing the sign is useful for figuring out what the cash element of your position looks like.\n If you are  increasing the position, and given a set of trades, your total cost basis is the sum of the total cost of each trade. Remember, the cost has a sign and in this case we get the sign from the side of the trade, just like we did with the quantity. A buy has a positive cost, while a sell has a negative cost.\n  As an example, consider a flat position (0 cost basis), and the following buy trades:\n        For the sell trades, we are net short (our position quantity is negative) 600 shares. Our cost basis is -\\$80,000 meaning that we have received that money from having this position. So in total, we have a short position of 600 shares, and \\$80k in cash that we got from selling the shares that we borrowed (it is illegal to sell without borrowing first,  which is called  naked short selling).\n  Given a position with a certain quantity, and a cost basis. The  average entry price represents what was the weighted average of the prices of the trades that got you into the position. It is a value that at a glance tells you on average what price you got into a position at. Astute readers might note that the weighted average price of the trades actually is just the cost basis divided by the position quantity:\n    Using the previous calculations, our cost basis is \\$51,000 and our position quantity is 500 contracts. Therefore, our average price is $\\frac{\\$51000}{500} = \\$102$.\n For a short position the situation is the same. Assume we have an identical but short position with a cost basis of -\\$51,000 and a quantity of -500 shares. Our average price is $\\frac{-\\$51000}{-500} = \\$102$ which is the same entry price. Notice that the negative signs on the cost basis and quantity cancel out giving us a positive price in each case.\n  In the examples above we only looked at what happens to our cost when we only  increase our position. But what happens if we  reduce our existing position by making trades in the opposite direction? By reducing our position, not only are we decreasing our quantity and cost basis, but we are also potentially  realising profit or loss. In trading the term  PnL or  P&amp;L is common shorthand for  Profit and Loss.\n A  realised profit/loss is a profit or loss which you have actually acquired in cash just from trading. The quintessential example is the idea of \u201cBuy Low, Sell High\u201d. Breaking down that phrase it is essentially opening a long position, and then reducing (or closing) it at a higher price. The resultant profit is your  realised pnl, and the general formula for calculating it is as follows:\n  Where $Price_{entry}$ is the price you entered the position at, and $Price_{exit}$ is the price that you sold the position at. Mathematically, if your PnL value is positive it is a profit, and if it is negative it is a loss.\n How you calculate realised profit however is actually more complicated than it might first seem. A key reason for this is which  inventory valuation method you use. This can be illustrated by the following example. Consider the following two sets of trades:\n  For the first set (A) we create a long position with 500 contracts, with a cost basis of \\$54,000 and an average price of \\$108. Now we need to execute the second set of trades (B) which are all sells. We know that once these trades execute, we will be left with a position quantity of 500 - 300 = 200 shares. But how much money will we make by selling these shares?\n Interestingly, it depends on  which of our shares we plan to sell. Recall that we bought in two trades at two different prices. If we consider each of these trades to be separate, we will get a different profit depending on which ones we sell. In fact, there are several  inventory valuation methods that are used for calculating this:\n  In this method, we sell our shares in the order that we acquired them. We take each sell trade, and match it against our buys in the same order in which they were bought. We calculate the profit on each one, and adjust the cost basis as well. In this case, we first match trade C against trade A. We make a profit of 100*(\\$100-\\$90) = \\$1000, and we reduce our cost basis by the amount we sold at the original price, so 100*\\$90 = \\$9,000.\n The second sell trade (D) is more complicated because we need to match the 200 shares across the remaining 100 shares of A, and 100 shares of B. So the total profit from this is (100*(\\$110-\\$90)) + (100*(\\$110-\\$120)) = \\$2000 - \\$1000 = \\$1000 profit. We also reduced our cost basis by (100*\\$90) + (100*\\$120) = \\$21,000.\n Our final position is 200 shares, with a cost basis of \\$24,000 and a  realised pnl of \\$2,000.\n  This method is essentially the opposite of the FIFO method. Here, we sell our shares in the reverse order of their acquisition. We first match the sell trade C against B, which results in a net loss of \\$2,000 and a reduction in the cost basis of \\$12,000. Trade D fully sells off the C trade, also with a net loss of \\$2,000 and a reduction in cost basis of \\$24,000.\n In total, we end up with a  realised pnl of -\\$4,000 (net loss), and a position of 200 shares with a cost basis of \\$18,000.\n  This method averages out the costs of the trades and uses average prices to calculate the realised pnl. As mentioned earlier, our 500 share position has an  average entry price of \\$108. We take a look at the sell trades that we made, and aggregate them together to create an opposite short position. In this case, trades C and D when combined create a short position of 300 shares, with an average price of \\$106.666. Note the recurring decimal on the price.\n We treat the two positions as one trade. Our realised pnl is 300*(\\$106.666 - \\$108) = -\\$400, and our cost basis for the remaining 200 quantity position is \\$54,000 - (300*\\$108) = \\$21,600. Notice that this method is a lot simpler than the other two, but because you have to use average price, you are exposed to   floating point imprecision which is a lack of accuracy that computers have when computing decimals. If this average price calculation is done enough, it can result in errors building up over time.\n  Carrying out this method without being exposed to the risk of floating point imprecision is left as an exercise for the reader.\n  We note that the difference in realised pnl between these three methods is quite large. In the first we made a profit (\\$2,000), in the second we made a large loss (-\\$4,000), and in the third we made a smaller loss (-\\$400). While this may seem slightly crazy, it actually makes sense since all these different methods do is realise PnL earlier or l\n......", "posttime": "2021-08-01 23:16:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5934\u5bf8,profit,\u4ea4\u6613", "title": "\u5934\u5bf8\u3001\u635f\u76ca", "title_en": "Positions, Profit and Loss", "transed": 1, "url": "https://www.machow.ski/posts/2021-07-24-positions-profit-and-loss/", "via": "", "real_tags": ["\u5934\u5bf8", "profit", "\u4ea4\u6613"]}, {"category": "", "categoryclass": "", "imagename": "c4055989bc403b53d3644586b1250351.png", "infoid": 1071009, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u9879\u5de5\u4f5c\uff08\u663e\u7136\uff09\u57fa\u4e8ewidevine-l3-decryptor \u6269\u5c55\u3002\u8bb8\u591a\u90e8\u5206\u662f\u76f8\u540c\u7684\uff0c\u90e8\u5206\u81ea\u8ff0\u6587\u4ef6\u662f\u9010\u5b57\u590d\u5236\u7b49\u3002 Tldr\uff1a\u7ed3\u679c\u4f3c\u4e4e\u6709\u6548\uff0c\u4f46\u4f9d\u8d56\u4e8e\u5c06\u4ee3\u7801\u63d0\u5347\u5230 wasm \u6a21\u5757\u548c\u5927\u91cf\u86ee\u529b\uff0c\u5bfc\u81f4\u5927\u7ea6 15 \u5206\u949f\u7b49\u5f85\u5355\u4e2a RSA\u89e3\u5bc6\u3002\u66f4\u65b0\u5728\u7f16\u5199\u81ea\u8ff0\u6587\u4ef6\u65f6\uff0c\u6211\u53d1\u73b0\u7f16\u7801\u8868 Bignum \u7b97\u6cd5\u53d6\u81ea CryptoPP \u5e93\u3002\u6211\u53d1\u73b0\u5b83\u662f\u6700\u5bb9\u6613\u4f7f\u7528\u7684\u5e93\uff0c\u4e5f\u6700\u5bb9\u6613\u7f16\u8bd1\u6210 wasm\u3002\u9002\u7528\u4e8e 4.10.2209 \u7248\u672c\u7684 64 \u4f4d Windows \u7684widevine\u3002\u4e0d\u592a\u53ef\u80fd\u9002\u7528\u4e8e\u4efb\u4f55\u5176\u4ed6\u7248\u672c\u3002 Widevine \u662f Google \u62e5\u6709\u7684 DRM \u7cfb\u7edf\uff0c\u8bb8\u591a\u6d41\u884c\u7684\u6d41\u5a92\u4f53\u670d\u52a1\uff08Netflix\u3001Spotify \u7b49\uff09\u90fd\u5728\u4f7f\u7528\u5b83\u6765\u9632\u6b62\u5a92\u4f53\u5185\u5bb9\u88ab\u4e0b\u8f7d\u3002\u4f46\u662f\uff0cWidevine \u6700\u4e0d\u5b89\u5168\u7684\u5b89\u5168\u7ea7\u522b L3\uff0c\u5728\u5927\u591a\u6570\u6d4f\u89c8\u5668\u548c PC \u4e2d\u4f7f\u7528\uff0c\u662f 100% \u5728\u8f6f\u4ef6\u4e2d\u5b9e\u73b0\u7684\uff08\u5373\u6ca1\u6709\u786c\u4ef6 TEE\uff09\uff0c\u4ece\u800c\u4f7f\u5176\u5177\u6709\u53ef\u9006\u6027\u548c\u53ef\u7ed5\u8fc7\u6027\u3002\u8fd9\u4e2a Chrome \u6269\u5c55\u6f14\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u52ab\u6301\u5bf9\u6d4f\u89c8\u5668\u7684\u52a0\u5bc6\u5a92\u4f53\u6269\u5c55 (EME) \u7684\u8c03\u7528\u548c\uff08\u975e\u5e38\u7f13\u6162\u5730\uff09\u89e3\u5bc6\u6240\u6709\u4f20\u8f93\u7684 Widevine \u5185\u5bb9\u5bc6\u94a5\u6765\u7ed5\u8fc7 Widevine DRM - \u6709\u6548\u5730\u5c06\u5176\u8f6c\u6362\u4e3a clearkey DRM\u3002\n\u8981\u67e5\u770b\u6b64\u6982\u5ff5\u7684\u5b9e\u9645\u6548\u679c\uff0c\u53ea\u9700\u5728\u5f00\u53d1\u4eba\u5458\u6a21\u5f0f\u4e0b\u52a0\u8f7d\u6269\u5c55\u7a0b\u5e8f\u5e76\u6d4f\u89c8\u5230\u4efb\u4f55\u64ad\u653e\u53d7 Widevine \u4fdd\u62a4\u7684\u5185\u5bb9\u7684\u7f51\u7ad9\uff0c\u4f8b\u5982 https://bitmovin.com/demos/drm \u3002\u9996\u5148\uff0c\u6269\u5c55\u7a0b\u5e8f\u5c06\u5c1d\u8bd5\u66b4\u529b\u8f93\u5165\u4ee3\u7801\u63d0\u5347\u90e8\u5206\u7684\u7f16\u7801\u3002\u7136\u540e\uff0c\u5047\u8bbe\u5b83\u6210\u529f\uff0c\u5bc6\u94a5\u5c06\u4ee5\u660e\u6587\u5f62\u5f0f\u8bb0\u5f55\u5230 javascript \u63a7\u5236\u53f0\u3002 \uff08\u66f4\u65b0\uff1a\u73b0\u5728\u5c06\u907f\u514d\u66b4\u529b\u7834\u89e3\uff09\u89e3\u5bc6\u5a92\u4f53\u672c\u8eab\u53ea\u662f\u4f7f\u7528\u53ef\u4ee5\u89e3\u5bc6 MPEG-CENC \u6d41\u7684\u5de5\u5177\uff08\u5982 ffmpeg\uff09\u7684\u95ee\u9898\u3002\u8001\u5b9e\u8bf4\uff0cDRM \u662f\u5728\u5404\u79cd\u5f62\u5f0f\u7684\u5a92\u4f53\u4e0a\u6ecb\u751f\u7684\u6bd2\u7624\uff0c\u6267\u884c\u6216\u5f3a\u5236\u6267\u884c\u7684\u4eba\u5728\u9053\u5fb7\u4e0a\u662f\u53ef\u618e\u7684\uff0c\u5bf9\u793e\u4f1a\u6ca1\u6709\u597d\u5904\u3002\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u5f88\u4f24\u5fc32021\u5e745\u6708\uff0c\u539f\u6765\u7684\u6269\u5c55\u5c06\u5f88\u5feb\u8fc7\u65f6\u5b66\u4e60\u3002\u6211\u53d1\u73b0\u81ea\u5df1\u6709\u4e00\u4e9b\u7a7a\u95f2\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u5c1d\u8bd5\u590d\u5236\u539f\u59cb\u5bc6\u94a5\u63d0\u53d6\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5173\u4e8e\u539f\u59cb\u4f5c\u8005\u4f7f\u7528\u4ec0\u4e48\u8fc7\u7a0b\u7684\u6570\u636e\u5e76\u4e0d\u591a\uff0c\u751a\u81f3\u5bf9\u4e8e\u8c01\u662f\u6267\u884c\u63d0\u53d6\u7684\u4eba\u6709\u4e9b\u56f0\u60d1\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u8fd8\u662f\u51b3\u5b9a\u8bd5\u4e00\u8bd5\uff0c\u5e76\u5e0c\u671b\u80fd\u7a0d\u5fae\u589e\u5f3a\u6211\u7684\u81ea\u4fe1\u5fc3\u3002\u6211\u6ca1\u6709\u6210\u529f\u5b8c\u6210\u8fd9\u4e9b\u4efb\u52a1\uff0c\u4f46\u6211\u8bbe\u6cd5\u7f16\u5199\u4e86\u4e00\u4e2a\u51e0\u4e4e\u65e0\u6cd5\u8fd0\u884c\u7684\u89e3\u5bc6\u5668\uff0c\u5e76\u51b3\u5b9a\u8bb0\u5f55\u6211\u9075\u5faa\u7684\u6b65\u9aa4\uff0c\u4ee5\u9632\u5176\u4ed6\u4eba\u4f7f\u7528\u5b83\u4eec\u3002\u4e3a\u4e86\u5904\u7406\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u6211\u51b3\u5b9a\u4f7f\u7528 Ghidra\uff0c\u5c3d\u7ba1\u5b83\u4e0e NSA \u6709\u5173\u8054\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u662f\u514d\u8d39\u7684\u5e76\u4e14\u5177\u6709\u6211\u60f3\u8981\u7684\u5927\u591a\u6570\u529f\u80fd\u3002\u6211\u8fd8\u5199\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7247\u6bb5\u6765\u8c03\u8bd5 dll\u3002 lib = LoadLibrary(L&quot;widevinecdm_new.dll&quot;); if (lib != NULL){ InitializeCdmModule init_mod = (InitializeCdmModule)GetProcAddress(lib, &quot;InitializeCdmModule_4&quot;); CreateCdmInstance create = (CreateCdmInstance)GetProcAddress(lib, &quot;CreateCdmInstance&quot;); GetCdmVersion getver=(GetCdmVersion)GetProcAddress(lib, &quot;GetCdmVersion&quot;); printf(&quot;%d\\n&quot;, (ulonglong)init_mod); init_mod(); printf(&quot;%d %s\\n&quot;, (ulonglong)create,getver()); getchar(); printf(&quot;\u6b63\u5728\u521b\u5efa\\n&quot;); std::string keys = &quot;com.widevine.alpha&quot;; std::string clearkeys = &quot;org.w3.clearkey&quot;; ContentDecryptionModule_10* cdm =(ContentDecryptionModule_10 *) create(10, keys.c_str(), keys.length(), GetDummyHost, (void*) msg\u200b\u200b); printf(&quot;\u521b\u5efa\uff1f%d \\n&quot;, (ulonglong)cdm);\u65e0\u7b26\u53f7\u6574\u6570 pid = 10; const char* sid = &quot;Sessid&quot;; //pssh\u6846\uff1f byte initdata[92]= { 0, 0, 0, 91, 112, 115, 115, 104, 0, 0, 0, 0, 237, 239, 139, 169, 121, 214, 74, 206, 206 , 39, 220, 213, 29, 33, 237, 0, 0, 0, 59, 8, 1, 18, 16, 235, 103, 106, 187, 203, 52, 94, 150, 2708 , 102, 48, 241, 163, 218, 26, 13, 119, 105, 100, 101, 118, 105, 110, 101, 95, 116, 101, 115, 3, 17, 110 10 , 108, 106, 97, 83, 100, 102, 97, 108, 107, 114, 51, 106, 42, 2, 72, 68,50, 0}\uff1b gcdm=cdm; printf(&quot;\u7b2c\u4e00\u6b21\u6bd4\u8f83\uff1a%d\\n&quot;,(int)((byte *)gcdm)[0x92]); cdm-&gt;\u521d\u59cb\u5316\uff08\u771f\uff0c\u5047\uff0c\u5047\uff09\uff1b printf(&quot;Sc \u6bd4\u8f83\uff1a%d\\n&quot;, (int)((byte*)gcdm)[0x92]); getchar(); cdm-&gt;CreateSessionAndGenerateRequest(pid,SessionType::kTemporary,InitDataType::kCenc,initdata,91);} \u4e0a\u9762\u4ee3\u7801\u7247\u6bb5\u4e2d\u7684\u6240\u6709\u7ed3\u6784\u90fd\u662f\u4ece Chromium eme \u6e90\u4e2d\u590d\u5236\u7684\uff0c\u4f8b\u5982\u8fd9\u91cc\u3002\u9996\u5148\uff0c\u6211\u5c1d\u8bd5\u8fd0\u884c\u751f\u6210\u7684\u7a0b\u5e8f\uff0c\u751f\u6210\u6b63\u786e\u7684\u7b7e\u540d\u4f5c\u4e3a\uff08\u4e2d\u95f4\uff09\u7ed3\u679c\u3002\u7136\u800c\uff0c\u8bd5\u56fe\u5728\u8c03\u8bd5\u5668\u4e2d\u8ddf\u8e2a\u5b83\u4f1a\u5bfc\u81f4\u95ee\u9898\u3002\u8d77\u521d\uff0c\u5b83\u53ea\u662f\u56e0\u8bbf\u95ee\u51b2\u7a81\u800c\u5d29\u6e83\u3002\u4fee\u6539 PEB \u4e2d\u7684 BeingDebugged \u5b57\u6bb5\u540e\uff0c\u5b83\u53cd\u800c\u8fdb\u5165\u4e86\u65e0\u9650\u5faa\u73af\u3002\n\u67e5\u770b\u53cd\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\uff0c\u5728\u5927\u591a\u6570 API \u51fd\u6570\u4e2d\u53d1\u73b0\u4e86\u5927\u91cf\u5947\u602a\u7684 switch \u8bed\u53e5\u3002\u5b83\u770b\u8d77\u6765\u6709\u70b9\u50cf\uff08\u6765\u81ea Ghidra \u53cd\u7f16\u8bd1\u5668\uff09\uff1a while(true) { uVar5 = (longlong)puVar3 + (longlong)(int)puVar3[uVar5 &amp; 0xffffffff]; switch(uVar5) { case 0x1800f489e: uVar5 = 5;\u8f6c\u5230 LAB_1800f488e\uff1b\u6848\u4f8b 0x1800f48ad\uff1alocal_20 = local_2c + 0x47b0e7d4\uff1b uVar5 = 3;\u8f6c\u5230 LAB_1800f488e\uff1b\u6848\u4f8b 0x1800f48c1\uff1auVar5 = 0x17\uff1b\u8f6c\u5230 LAB_1800f488e\uff1b\u6848\u4f8b 0x1800f48c8\uff1alocal_28 = local_20 - local_2c\uff1b bVar1 = (int)(uint)local_21 &lt; (int)(local_28 + 0xb84f182c); unaff_RSI = (\u672a\u5b9a\u4e49 *)(ulonglong)bVar1; uVar5 = (ulonglong)((uint)bVar1 * 5 + 2);\u8f6c\u5230 LAB_1800f488e\uff1b\u6848\u4f8b0x1800f48f4\uff1alocal_28 = local_2c + 0xd689ea6\uff1b uVar5 = 0x16;\u8f6c\u5230 LAB_1800f488e\uff1b\u6848\u4f8b 0x1800f4908: uVar5 = 0x19;\u8f6c\u5230 LAB_1800f488e\uff1b\u6848\u4f8b 0x1800f491a\uff1alocal_2c = local_2c &amp; local_28\uff1b uVar5 = 1;\u8f6c\u5230 LAB_1800f488e\uff1b case 0x1800f492c: if (true) { *(undefined *)&amp;param_1-&gt;_vtable = *unaff_RSI; unaff_RSI[1] = unaff_RSI[1] - (char)(uVar5 &gt;&gt; 8); /* \u8b66\u544a\uff1a\u9519\u8bef\u6307\u4ee4 - \u5728\u6b64\u5904\u622a\u65ad\u63a7\u5236\u6d41 */halt_baddata(); }... \u7ecf\u8fc7\u51e0\u5929\u7684\u8c03\u67e5\uff0c\u5f88\u660e\u663e\u8fd9\u662f\u4e00\u79cd\u4ee3\u7801\u6df7\u6dc6\u5f62\u5f0f\uff0c\u5c06\u4ee3\u7801\u6d41\u5206\u89e3\u4e3a\u5c0f\u6bb5\uff0c\u5e76\u6309\u7167\u539f\u59cb PRNG \u5b9a\u4e49\u7684\u987a\u5e8f\u5c06\u5b83\u4eec\u6392\u5217\u5728 switch \u8bed\u53e5\u4e2d\u3002\u53ef\u4ee5\u63a7\u5236 PRNG \u6267\u884c if/else \u8bed\u53e5\u548c\u5faa\u73af\u3002\u5230\u8fbehalt_baddata \u90e8\u5206\u65f6\u4f1a\u5bfc\u81f4\u8bbf\u95ee\u51b2\u7a81\u5d29\u6e83\u3002\u4efb\u4f55\u8d85\u51fa\u8fb9\u754c\u7684\u8df3\u8f6c\u8868\u7d22\u5f15\u90fd\u4f1a\u5bfc\u81f4 while(true) \u65e0\u9650\u671f\u6267\u884c\u3002\u7531\u4e8e switch \u662f\u7531 PRNG \u9a71\u52a8\u7684\uff0c\u53cd\u7f16\u8bd1\u5668\u4f3c\u4e4e\u65e0\u6cd5\u627e\u5230\u8df3\u8f6c\u8868\u7684\u9650\u5236\uff0c\u4ece\u800c\u5bfc\u81f4\u65e0\u6548\u7684 switch \u8bed\u53e5\u6216\u635f\u574f\u7684\u53cd\u7f16\u8bd1\u3002\u6211\u8bd5\u56fe\u901a\u8fc7\u4fee\u590d\u8df3\u8f6c\u8868\u6765\u6539\u5584\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u7ed3\u679c\u5e76\u4e0d\u4ee4\u4eba\u9f13\u821e\u3002\u7136\u540e\u6211\u5c1d\u8bd5\u4f7f\u7528 Ghidra Emulator API \u6765\u9075\u5faa\u6307\u4ee4\u6d41\u3002\u7ecf\u8fc7\u5927\u91cf\u7684\u5b9e\u9a8c\uff0c\u6211\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a\u8bb8\u591a\u5f00\u5173\u6848\u4f8b\u51e0\u4e4e\u662f\u91cd\u590d\u7684\uff0c\u6709\u4e9b\u8981\u4e48\u4ece\u672a\u8fbe\u5230\uff0c\u8981\u4e48\u53ea\u6709\u5728\u68c0\u67e5\u5931\u8d25\u3001\u7a0b\u5e8f\u5d29\u6e83\u6216\u5c06\u5176\u53d1\u9001\u5230\u65e0\u9650\u5faa\u73af\u7684\u60c5\u51b5\u4e0b\u624d\u8fbe\u5230\u3002\u5927\u591a\u6570\u53cd\u8c03\u8bd5\u4ee3\u7801\u4f3c\u4e4e\u4e0e\u6b64\u5904\u63cf\u8ff0\u7684\u5185\u5bb9\u76f8\u4f3c\u3002\u8c03\u8bd5\u5668\u7a97\u53e3\u540d\u79f0\u5217\u8868\u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u5f88\u6709\u8da3\uff08\u800c\u4e14\u5df2\u7ecf\u8fc7\u65f6\uff09\u3002\u4e00\u4e9b\u51fd\u6570\u5b9e\u9645\u4e0a\u4f7f\u7528\u5185\u5b58\u6821\u9a8c\u548c\u4f5c\u4e3a PRNG \u79cd\u5b50\uff0c\u8fd9\u4f7f\u5f97\u5728\u4e0d\u77e5\u9053\u6821\u9a8c\u548c\u7684\u60c5\u51b5\u4e0b\u731c\u6d4b\u5b83\u4f1a\u53bb\u54ea\u91cc\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4ee5\u53ca\u8ba1\u7b97\u5b83\u9700\u8981\u591a\u5c11\u6b21\u8fed\u4ee3\u3002\u4ee5\u53ca\u4e2d\u95f4\u5404\u79cd\u68c0\u67e5\u7684\u7ed3\u679c\u3002\u7b49\u7b49...\u6ca1\u6709\u4efb\u4f55\u53cd\u8c03\u8bd5\u5668\u6280\u5de7\u88ab\u4eff\u771f\u6fc0\u6d3b\uff0c\u4f46\u4eff\u771f\u5b9e\u9645\u4e0a\u6bd4\u76f4\u63a5 CPU \u6267\u884c\u6162\u6570\u767e\u751a\u81f3\u6570\u5343\u500d\uff0c\u56e0\u6b64\u6821\u9a8c\u548c\u8ba1\u7b97\u53ef\u80fd\u9700\u8981\u51e0\u4e2a\u5c0f\u65f6\uff08\u53d6\u51b3\u4e8e\u65e5\u5fd7\u8be6\u7ec6\u7a0b\u5ea6\uff09\u3002\n\u4ec5\u6a21\u62df\u4e00\u4e2a\u51fd\u6570\u5e76\u6ca1\u6709\u591a\u5927\u5e2e\u52a9\uff0c\u56e0\u4e3a\u6d41\u7a0b\u53ef\u80fd\u53d6\u51b3\u4e8e\u8f93\u5165\u53c2\u6570 :( \u3002\u5728\u90a3\u4e4b\u540e\uff0c\u6211\u5c1d\u8bd5\u53cd\u8f6c\u4ee3\u7801\u4e2d\u627e\u5230\u7684 Protobuf \u7f16\u7801/\u89e3\u7801\u51fd\u6570\u3002\u867d\u7136\u6211\u786e\u5b9e\u8bbe\u6cd5\u627e\u5230\u4e86\u5176\u4e2d\u7684\u4e00\u4e9b\uff08\u4f7f\u7528 getchar \u4f5c\u4e3a\u65b9\u4fbf\u65ad\u70b9\u9644\u52a0\u8c03\u8bd5\u5668\uff09\uff0c\u5b83\u4eec\u4e0e\u539f\u59cb\u5b58\u50a8\u5e93\u4e2d\u7684 Protobuf \u51fd\u6570\u4e0d\u5339\u914d\uff0c\u5bfc\u81f4\u6211\u8ba4\u4e3a\u6e90\u6587\u4ef6\u88ab\u66f4\u6539\u4e86\u3002\u4f8b\u5982\uff0cSignedMessage \u73b0\u5728\u6709\u8d85\u8fc7 9 \u4e2a\u5b57\u6bb5\uff0c\u800c\u4e0d\u662f\u539f\u6765\u7684 5 \u4e2a\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u534f\u8bae\u4f3c\u4e4e\u843d\u540e\u8db3\u591f\u517c\u5bb9\uff0c\u6240\u4ee5\u4ecd\u7136\u53ef\u4ee5\u63d0\u53d6\u5fc5\u8981\u7684\u7b7e\u540d/\u5bc6\u94a5\u3002\u4e3a\u4e86\u89e3\u6790 protobuf \u6d88\u606f\uff0c\u6211\u4f7f\u7528\u4e86\u539f\u59cb\u6269\u5c55\u6216\u8fd9\u4e2a\u65b9\u4fbf\u7684\u7f51\u7ad9\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8be5\u8c03\u67e5\u4f3c\u4e4e\u6ca1\u6709\u4efb\u4f55\u7ed3\u679c\uff0c\u6700\u7ec8\uff08\u51e0\u5468\u540e\uff09\u548c\u5f88\u591a\u8bc5\u5492\uff09\uff0c\u6211\u51b3\u5b9a\u5728 Ghidra \u4e2d\u6a21\u62df\u6574\u4e2a\u7a0b\u5e8f\u3002\u4e3a\u6b64\uff0c\u6211\u5f00\u53d1\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6a21\u62df DLL \u8fdb\u884c\u7684\u7cfb\u7edf\u548c\u4e3b\u673a\u8c03\u7528\u3002\u53ea\u9700\u8fd0\u884c\u5373\u53ef\u63d0\u53d6\u5fc5\u8981\u7684\u7cfb\u7edf\u8c03\u7528\u76f4\u5230\u9047\u5230\u65e0\u6cd5\u6267\u884c\u7684\u4ee3\u7801\u5e76\u7528 python \u51fd\u6570\u66ff\u6362\u5b83\u4e3a\u6b62\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u811a\u672c\u4e00\u6b21\u6267\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u6240\u4ee5\u5b83\u6bd4\u4f7f\u7528 Ghidra \u65ad\u70b9\u6162\uff0c\u4f46\u5bf9\u6211\u6765\u8bf4\u66f4\u5bb9\u6613\u7ba1\u7406\u3002\u64cd\u7eb5\u5b83\u5141\u8bb8\u6211\u8f6c\u50a8\u7a0b\u5e8f\u6d41\u548c\u5185\u5b58\u5185\u5bb9\u7684\u65e5\u5fd7\uff0c\u4ee5\u53ca\u4fdd\u5b58\u548c\u6062\u590d\u6a21\u62df\u5668\u72b6\u6001\u3002\u6700\u7ec8\uff0c\u6211\u8bbe\u6cd5\u8fbe\u5230\u4e86\u6a21\u62df\u5668\u5f62\u6210\u6709\u6548\u7b7e\u540d\u5e76\u7528\u5b83\u8c03\u7528\u5047\u4e3b\u673a\u4ee3\u7801\u7684\u5730\u6b65\u3002\u4e0d\u8fc7\u82b1\u4e86\u51e0\u5929\u65f6\u95f4\uff0c\u6700\u957f\u7684\u90e8\u5206\u4f3c\u4e4e\u662f\u751f\u6210\u8df3\u8f6c\u8868\u548c\u8ba1\u7b97\u8868\u3002\u4e4b\u540e\uff0c\u5c31\u662f\u5c06\u7b7e\u540d\u8ffd\u6eaf\u5230\u751f\u6210\u51fd\u6570\u7684\u95ee\u9898\u4e86\u3002\u76ef\u7740\u53cd\u7f16\u8bd1\u4e0d\u597d\u7684\u4ee3\u7801\u5899\u770b\u4e86\u4e00\u4f1a\u513f\u540e\uff0c\u6211\u610f\u8bc6\u5230\u5b83\u7684\u4e00\u90e8\u5206\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 Bignum \u4e58\u6cd5\u7b97\u6cd5\uff0c\u4f46\u4ed6\u4eec\u6ca1\u6709\u4f7f\u7528\u7ebf\u6027\u6570\u7ec4\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u7c7b\u4f3c PRNG \u7684\u51fd\u6570\u6392\u5217\u7684\u6570\u7ec4\uff0c\u56e0\u6b64\u6bcf\u4e2a\u7b97\u672f\u8fd0\u7b97\u90fd\u5728\u7f6e\u6362\u751f\u6210\u5668\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a uint * PFUN_180119595(uint *param_1,uint *out,uint length,int param_4){ byte *pbVar1; uint uVar2; ulonglong uVar3; uint uVar4; uint uVar5; ulonglong uVar6; bool bVar7; uVar6 = (ulonglong)(\u957f\u5ea6 * 4); if (*(char *)((longlong)out + uVar6) != &#39;\\x02&#39;) { do { pbVar1 = (byte *)((longlong)out + uVar6); bVar7 = *pbVar1 == 0; *pbVar1 = *pbVar1 ^ bVar7 * (*pbVar1 ^ 1); } while ((byte)(!bVar7 * *pbVar1) == &#39;\\x01&#39;); if (bVar7) { if (length != 0) { uVar5 = param_4 * 0xe286515; uVar3 = 0;\u505a { uVar2 = param_1[uVar3]; uVar4 = uVar2 ^ uVar5;\u51fa[uVar3] = uVar4; uVar5 = uVar5 + uVar2 * uVar4\uff1b uVar3 = uVar3 + 1\uff1b } \u800c\uff08\u957f\u5ea6\uff01= uVar3\uff09\uff1b } *(undefined *)((longlong)out + uVar6) = 2; } } return out;} \u5927\u90e8\u5206\u65f6\u95f4\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u51fd\u6570\uff0c\u4f46\u5177\u6709\u4e0d\u540c\u7684\u504f\u79fb\u91cf\u548c\u521d\u59cb\u6570\u7ec4\uff0c\u4ece\u800c\u5bfc\u81f4\u5404\u79cd\u6392\u5217\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u80fd\u591f\u7c97\u7565\u5730\u8bc6\u522b\u5728 256 \u5b57\u8282\u6570\u7ec4\u4e0a\u6267\u884c\u7684\u8499\u54e5\u9a6c\u5229\u4e58\u6cd5\u3001\u51cf\u6cd5\u548c\u52a0\u6cd5\uff08\u610f\u5473\u7740\u4f7f\u7528 2048 \u4f4d\u5bc6\u94a5\uff09\u3002\u6700\u91cd\u8981\u7684\u56e0\u7d20\u4e4b\u4e00\u662f\u201cADC\u201d\u6c47\u7f16\u547d\u4ee4\u7684\u4f7f\u7528\uff0c\u4e3b\u8981\u9650\u4e8e\u4ee3\u7801\u7684\u4e24\u4e2a\u533a\u57df\uff0c\u6211\u6682\u65f6\u5c06\u5176\u786e\u5b9a\u4e3a\u201c\u7b7e\u540d\u751f\u6210\u201d\u548c\u201c\u4f1a\u8bdd\u5bc6\u94a5\u89e3\u5bc6\u201d\u3002\u6211\u4e13\u6ce8\u4e8e\u524d\u8005\uff0c\u56e0\u4e3a\u6211\u53ef\u4ee5\u8bbf\u95ee\u548c\u9a8c\u8bc1\u8f93\u51fa\u3002\u7136\u800c\uff0c\u8fd9\u786e\u5b9e\u63d0\u51fa\u4e86\u51fd\u6570\u91c7\u7528\u4ec0\u4e48\u6837\u7684\u8f93\u5165\u7684\u95ee\u9898\u3002\u7a0d\u540e\u518d\u8c08\u3002\u5f53\u7136\uff0c\u6df7\u6dc6\u80cc\u540e\u7684\u75c5\u6001\u3001\u8650\u5f85\u72c2\u5e76\u6ca1\u6709\u4f7f\u7528\u76f4\u63a5\u7684\u5e42\u8fd0\u7b97\u7b97\u6cd5\u3002\u5982\u8c37\u6b4c\u4e13\u5229 US20160328543A1 \u4e2d\u6240\u8ff0\uff0c\u5b83\u4eec\u5c06\u8f93\u5165\u4e58\u4ee5\u5e38\u6570\u5e76\u901a\u8fc7\u53cd\u8f6c\u5e38\u6570\u8f93\u51fa\uff0c\u4f7f\u7528\u7f6e\u6362\u51fd\u6570\u6765\u6df7\u6dc6\u5185\u5b58\u5e03\u5c40\uff0c\u6709\u65f6\u4f3c\u4e4e\u4f7f\u7528\u201c\u62c6\u5206\u53d8\u91cf\u201d\uff0c\u5c3d\u7ba1\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5e76\u4e0d\u5e38\u89c1\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u7684\u6c42\u5e42\u51fd\u6570\u4e5f\u6709\u4e00\u4e9b\u6700\u7ec8\u76f8\u4e92\u62b5\u6d88\u7684\u52a0\u6cd5\u3002\n\u4e3a\u4e86\u4ece\u4ee3\u7801\u4e2d\u63d0\u53d6\u6307\u6570\uff0c\u6211\u9996\u5148\u8bb0\u5f55\u4e86\u4f3c\u4e4e\u5728 bignum \u4e0a\u8fd0\u884c\u7684\u51fd\u6570\u7684\u5927\u90e8\u5206\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u4f7f\u7528\u5185\u5b58\u4e2d\u5df2\u7ecf\u751f\u6210\u7684\u8868\u6765\u89e3\u8bfb\u6392\u5217\u3002\u7136\u540e\uff0c\u6211\u4f7f\u7528 python \u811a\u672c\u6765\u731c\u6d4b\u5bf9\u6570\u5b57\u6267\u884c\u7684\u64cd\u4f5c\uff0c\u5e76\u4f7f\u7528\u5355\u72ec\u7684\u811a\u672c\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u6620\u5c04\u5230\u6811\u4e2d\u3002\u5f53\u6211\u5c1d\u8bd5\u5404\u79cd\u4e8b\u60c5\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u811a\u672c\u7ecf\u5386\u4e86\u591a\u6b21\u8fed\u4ee3\uff0c\u5305\u62ec\u6dfb\u52a0\u53cc\u6570\u652f\u6301\u4ee5\u4ece\u7ed3\u679c\u7684\u5bfc\u6570\u4e2d\u63d0\u53d6\u6307\u6570\u3002\u6700\u7ec8\uff0c\u6211\u9009\u62e9\u4e86\u7b80\u5355\u7684\u5355\u53d8\u91cf\u8ffd\u8e2a\u3002\u627e\u5230\u4e00\u6761\u4e0d\u4f1a\u5bfc\u81f4\u591a\u9879\u5f0f\u5e42\u7684\u6307\u6570\u7206\u70b8\u7684\u8def\u7ebf\u6709\u70b9\u56f0\u96be\uff0c\u4f46\u6700\u7ec8\uff08\u518d\u4e00\u6b21\uff0c\u7ecf\u8fc7\u4e00\u4e24\u4e2a\u661f\u671f\u7684\u5de5\u4f5c:|\uff09\u6211\u6210\u529f\u5730\u63d0\u53d6\u4e86\u4e00\u4e2a\u6307\u6570\u548c\u4e58\u6cd5\u5e38\u6570\uff1a\u4e00\u4e2a\u53ef\u4ee5\u5f88\u5bb9\u6613\u770b\u51fa\u6307\u6570\u7684\u957f\u5ea6\u662f 3072 \u4f4d\uff0c\u6bd4\u9884\u671f\u7684\u8981\u957f\u5f88\u591a\uff082048\uff09\u3002\u663e\u7136\uff0c\u7531\u4e8e\u6307\u6570\u662f\u5468\u671f\u6027\u7684\uff0c\u5b83\u53ef\u4ee5\u6269\u5c55\u5230\u4efb\u4f55\u957f\u5ea6\u3002\u8fd8\u53ef\u4ee5\u786e\u8ba4\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6307\u6570\uff0c\u56e0\u4e3a\u51fd\u6570\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7c7b\u4f3c bignum \u7684\u7ed3\u6784\u4e0e\u52a0\u5bc6\u8f93\u5165\u4e0d\u5339\u914d\u3002 \uff08\u4f7f\u7528\u516c\u5171\u6307\u6570 65537 \u53ef\u4ee5\u8f7b\u677e\u5b8c\u6210 RSA \u7684\u89e3\u5bc6\uff09\u3002\u4e5f\u6ca1\u6709\u7ebf\u6027\u3002\u6216\u4e8c\u6b21\u65b9\uff0c\u6216...\uff08\u6211\u5c06\u591a\u9879\u5f0f\u68c0\u67e5\u5230\u5927\u7ea6 128 \u6b21\u65b9\uff09\u4f9d\u8d56\u6027\u3002\u8fd9\u4f7f\u6211\u8fdb\u5165\u4e0b\u4e00\u4e2a\u9636\u6bb5\u3002\u5982\u679c\u8981\u67e5\u770b\u53d1\u751f\u5e42\u8fd0\u7b97\u7684\u51fd\u6570\uff0c\u60a8\u4f1a\u53d1\u73b0\u5b83\u6709\u592a\u591a\u7684\u8f93\u5165\u53c2\u6570\u3002\u5728\u90a3\u91cc\uff0c Param_1 \u4f3c\u4e4e\u662f\u6052\u5b9a\u7684\uff0c\u6216\u8005\u81f3\u5c11\u4e0e\u8f93\u5165\u65e0\u5173\u3002\u4ecd\u7136\u9700\u8981\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u4f46\u53ef\u4ee5\u7528\u9759\u6001\u6570\u7ec4\u8868\u793a\u3002\u7136\u800c\uff0c\u4ece 2 \u5230 5 \u7684\u53c2\u6570\u786e\u5b9e\u53d6\u51b3\u4e8e\u8f93\u5165......\u4e0d\u77e5\u4f55\u6545\u3002\u5b83\u4eec\u4e5f\u88ab ConstUser_18016b077 \u51fd\u6570\u5728\u5faa\u73af\u4e2d\u8fc7\u5ea6\u6392\u5217\u3002\u8fd9\u4e9b\u51fd\u6570\u4ee3\u8868\u4e86\u8f93\u5165\u6df7\u6dc6\u7684\u4e00\u534a\uff0c\u4e5f\u662f\u8fd9\u4e2a repo id \u88ab\u79f0\u4e3a\u201cguesser\u201d\u7684\u539f\u56e0\u3002\u4ed6\u4eec\u4f7f\u7528\u4e00\u7cfb\u5217\u8fd0\u884c\u65f6\u751f\u6210\u7684\u67e5\u627e\u8868\u6765\u5bf9\u5947\u602a\u7f16\u7801\u7684\u8f93\u5165\u6267\u884c\u5404\u79cd\u529f\u80fd\u3002\u5e8f\u5217\u4e5f\u662f\u8fd0\u884c\u65f6\u751f\u6210\u6216\u89e3\u5305\u7684\uff0c\u6211\u4e0d\u786e\u5b9a\u3002\u5bf9\u8be5\u51fd\u6570\u7684\u6bcf\u6b21\u8c03\u7528\u90fd\u5305\u542b\u5e8f\u5217\u504f\u79fb\u91cf\u3001\u5904\u7406\u957f\u5ea6\u7b49\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u7ec4\u5408\u5728\u4e00\u8d77\u6210\u4e3a\u4e00\u4e2a 64 \u4f4d\u6570\u5b57\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5947\u6570\u7f16\u7801\u662f\u6307\u4ee5\u4e0b\u5185\u5bb9\uff1a\u6bcf\u4e2a X \u5b57\u8282\u6570\u5b57\u88ab\u62c6\u5206\u4e3a X*4 \u4e2a 2 \u4f4d\u7684\u5757\uff0c\u53e6\u5916\u4e24\u4e2a\u5757\u9644\u52a0\u6709\u4f3c\u4e4e\u662f\u4efb\u610f\u6570\u5b57\u7684\u5185\u5bb9\uff0c\u7ed3\u679c\u901a\u8fc7\u4e0a\u8ff0 Const \u4e4b\u4e00\u4f20\u9012\u51fd\u6570\uff0c\u5bfc\u81f4\u6bcf\u4e2a\u5b57\u8282\u4e2d\u5b58\u50a8 3 \u4f4d\uff08\uff01\uff09\uff0c\u5c31\u50cf\u8fd9\u6837\uff08256 \u5b57\u8282\u6570\u7684\u5341\u516d\u8fdb\u5236\u8868\u793a\u4e3a 1026 \u5b57\u8282\uff09:\uff08\u4ece\u73b0\u5728\u5f00\u59cb\u6211\u5c06\u79f0\u5176\u4e3a\u957f\u5f62\u5f0f\uff09 ConstUser_18016b077 \u4e2d\u7684\u67e5\u627e\u8868\u672c\u8d28\u4e0a\u6620\u5c04\u4e86 11 \u4f4d\u6570\u5b57\uff08 2x3 \u4f4d+5 \u4f4d\u201c\u8fdb\u4f4d\u201d\uff09\u5230 8 \u4f4d\u6570\u5b57\uff083 \u4f4d\u8f93\u51fa\u52a0\u8fdb\u4f4d\uff09\u3002\u4ee3\u7801\u4e2d\u8fd8\u6709\u5176\u4ed6\u8868\u53ef\u4ee5\u5904\u7406\u66f4\u591a\u7684\u4f4d\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u8f93\u5165\u548c\u8f93\u51fa\u4ee5\u968f\u673a\u987a\u5e8f\u6392\u5217\uff08\u5e76\u4e14\u53ef\u80fd\u6709\u4e00\u4e2a\u8fdb\u4f4d\u4f4d\uff09\uff0c\u6211\u4e00\u751f\u90fd\u65e0\u6cd5\u5f04\u6e05\u695a\u6bcf\u4e2a\uff08\u6570\u5343\u4e2a\uff09\u8868\u5b9e\u9645\u4e0a\u505a\u4e86\u4ec0\u4e48\u3002\u6bcf\u4e2a\u64cd\u4f5c\u4f3c\u4e4e\u90fd\u8c03\u7528\u4e86\u4e00\u4e2a\u65b0\u8868\uff0c\u6216\u8005\u81f3\u5c11\u8c03\u7528\u4e86\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\u504f\u79fb\u91cf\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u4eec\u6709 4 \u4e2a\u6216\u90a3\u4e9b\u6570\u5b57\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4ece\u8f93\u5165\u751f\u6210\u5e76\u5448\u73b0\u7ed9\u5e42\u51fd\u6570\u3002\u5b83\u4eec\u88ab\u5206\u6210 18 \u5b57\u8282\u91cd\u53e0\u589e\u91cf\uff0c\u5728\u5faa\u73af\u4e2d\u5904\u7406\uff0c\u538b\u7f29\u56de 4 \u5b57\u8282\u6574\u6570\u5e76\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\uff1a\u54ea\u91cc......\u6211\u4e0d\u77e5\u9053:(\u6211\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u5bfb\u627e\u5728\u4ee3\u7801\u4e2d\uff0c\u4f46\u76f4\u5230\u4eca\u5929\u6211\u90fd\u4e0d\u77e5\u9053\u5b83\u5bf9 4 \u4e2a\u8f93\u5165\u7f13\u51b2\u533a\u7a76\u7adf\u505a\u4e86\u4ec0\u4e48\u3002\u8fd9\u4e9b\u7f13\u51b2\u533a\u4f3c\u4e4e\u4e0d\u662f 256 \u5b57\u8282 bignums \u7684\u8868\u793a\uff08\u7f13\u51b2\u533a\u957f\u5ea6\u5404\u4e0d\u76f8\u540c\uff0c\u4f46\u5927\u591a\u662f 90 \u7684\u500d\u6570\uff09\u3002\u5f88\u591a\u64cd\u4f5c\u6d89\u53ca\u51c6\u5907\u5de5\u4f5c\uff0c\u5982\ndo { *(int*)(local_8f90 + lVar6 * 4) = *(int*)(local_8f90 + lVar6 * 4) + *(int*)(local_8500 + lVar6 * 4) * *(int*)((longlong) DAT_18091b030 + (ulonglong)((uint)lVar6 &amp; 7) * 4); lVar6 = lVar6 + 1\uff1b } while (lVar6 != 0x4a);\u54ea\u4e2a\u4f3c\u4e4e\u5728\u4e22\u5f03\u8fdb\u4f4d\u65f6\u6267\u884c 4 \u5b57\u8282\u6574\u6570\u7684\u4e58\u6cd5\u548c\u52a0\u6cd5\uff1f\u7136\u540e\u6709\u8fd9\u6837\u7684\u64cd\u4f5c\uff1a do { uVar8 = (uVar8 &gt;&gt; 4) + *(longlong*)(DAT_18091af30 + (ulonglong)((uint)uVar8 &amp; 0xf) * 8); *(ulonglong*)(local_8f90 + lVar12 * 8 + 8) = uVar8; lVar12 = lVar12 + 1\uff1b } while (lVar12 != 0x10); iVar46 = (int)lVar6; lVar6 = *(longlong *)(&amp;local_8f90[128]) * 0x434c3d5000000000 + *(longlong*)(&amp;local_8f90[56]) * 0x7c7bcb1aebcb3c2b + 0x7ffc69ede4fe8\u54ea\u4f4d\u597d\u8c61\u7528\u67e5\u8868\uff08DAT_18091af30\uff09\u67e58\u5b57\u8282\u8fdb\u4f4d\uff1f\u662f\u7684\uff0c\u4ee4\u6211\u975e\u5e38\u60ed\u6127\u7684\u662f\uff0c\u6211\u4e0d\u77e5\u9053\u6211\u5728\u770b\u4ec0\u4e48\u3002\u552f\u4e00\u60f3\u5230\u7684\u662f\u9ad8\u5ea6\u6df7\u6dc6\u7684 Sch\u00f6nhage-Strassen \u7b97\u6cd5\uff0c\u6216\u8005\u6765\u81ea\u90a3\u4e2a\u5bb6\u65cf\u7684\u4e1c\u897f\uff0c\u5373\u6d89\u53ca\u5085\u7acb\u53f6\u6216\u6570\u8bba\u53d8\u6362\u7684\u4e1c\u897f\u3002\u8fd9\u5c06\u5141\u8bb8\u67d0\u4e9b\u8fd0\u7b97\u4ee5\u4e8c\u7684\u6a21\u5e42\u6216\u4e8c\u52a0\u4e00\u7684\u6a21\u5e42\u6267\u884c\uff0c\u800c\u65e0\u9700\u50cf\u66f4\u7b80\u5355\u7684\u4e58\u6cd5\u7b97\u6cd5\u90a3\u6837\u4f7f\u7528\u8fdb\u4f4d\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6709\u4eba\u6709\u4efb\u4f55\u597d\u7684\u60f3\u6cd5\uff0c\u8bf7\u63d0\u51fa\u95ee\u9898\u6216\u8bf7\u6c42\u8bf7\u6c42\uff1f\u4ee3\u7801\u53ef\u7528......\u5728\u82b1\u4e86\u592a\u591a\u65f6\u95f4\u5446\u5446\u5730\u76ef\u7740\u53cd\u7f16\u8bd1\u5668\u5e76\u5c1d\u8bd5\u5728 Ghidra \u6a21\u62df\u5668\u4e2d\u8fd0\u884c\u4ee3\u7801\u4fee\u6539\u4e4b\u540e\uff0c\u6211\u51b3\u5b9a\u5c1d\u8bd5\u5c06\u53cd\u7f16\u8bd1\u7684\u4ee3\u7801\u8f6c\u50a8\u5230 C++ \u6587\u4ef6\u4e2d\u5e76\u4f7f\u5176\u518d\u6b21\u7f16\u8bd1\uff0c\u201c\u660e\u4eae\u201d\u7684\u60f3\u6cd5\u662f\u201c\u4e5f\u8bb8\u64cd\u7eb5\u8f93\u5165\u4f1a\u7ed9\u6211\u4e00\u4e9b\u6d1e\u5bdf\u529b\u201d\u3002\u6211\u76f8\u4fe1\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u201c\u4ee3\u7801\u63d0\u5347\u201d\uff1f\u8fd9\u5e26\u6765\u4e86\u4e00\u7cfb\u5217\u6311\u6218\u3002\u4e3b\u8981\u7684\u4e00\u4e2a\u4e8b\u5b9e\u662f\u53cd\u7f16\u8bd1\u5668\u88ab\u91cd\u53e0\u7684\u7f13\u51b2\u533a\u8bbf\u95ee\u6240\u6df7\u6dc6\uff0c\u5e76\u4e14\u65e0\u6cd5\u6b63\u786e\u5206\u79bb\u5c40\u90e8\u53d8\u91cf\u3002\u53e6\u4e00\u4e2a\u662f Ghidra \u53cd\u7f16\u8bd1\u5668\u56e2\u961f\u4e2d\u7684\u67d0\u4e2a\u4eba\u8ba4\u4e3a\u8bbf\u95ee uint64 \u4e2d\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u5e94\u8be5\u8868\u793a\u4e3a variable._6_2 \u800c\u4e0d\u662f\u8bf4 ((short*)&amp;variable)[3]\u3002\u5176\u4e2d\u4e4b\u4e00\u662f\u4e0d\u6b63\u786e\u7684 C...\u6240\u4ee5\u6211\u4e0d\u5f97\u4e0d\u901a\u8fc7\u4ee3\u7801\u5e76\u66ff\u6362\u5b83\u3002\u4ee5\u53ca\u5bf9\u5806\u6808\u53d8\u91cf\u91cd\u53e0\u548c\u62c6\u5206\u7684\u731c\u6d4b\uff0c\u8fd9\u9700\u8981\u6570\u5468\u7684\u8270\u82e6\u5bc4\u5b58\u5668\u6bd4\u8f83\u3002\u4e0b\u4e00\u4e2a\u969c\u788d\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u91c7\u7528\u4e24\u4e2a\u5df2\u7f16\u7801\u4e3a\u957f\u683c\u5f0f\u7684\u7f13\u51b2\u533a\u5e76\u5410\u51fa\u51e0\u4e4e\u8f93\u51fa\u7684\u957f\u683c\u5f0f\u3002\u90a3\u4e2a\u9996\u5148\u8fd0\u884c\u8868\u751f\u6210\uff08\u89e3\u5305\uff1f\uff09\u7136\u540e\u8df3\u5230\u8fd0\u884c\u65f6\u751f\u6210\u70b9\u3002\u7136\u540e\u5b83\u4f7f\u7528\u4e00\u957f\u4e32\u5730\u5740\u548c\u503c\u6765\u8df3\u8fc7 6\uff08\uff1f\uff09\u4e2a\u53ef\u80fd\u7684\u4ee3\u7801\u70b9\u5e76\u5bf9\u6570\u636e\u6267\u884c\u5404\u79cd\u64cd\u4f5c\u3002\u6570\u7ec4\u4e2d\u7684\u7ed3\u6784\u770b\u8d77\u6765\u6709\u70b9\u50cf\uff1a \u6570\u7ec4\u5f88\u957f... 5153 \u6b21\u64cd\u4f5c\u5f88\u957f\u3002\u5982\u679c\u6211\u5bf9\u5085\u7acb\u53f6\u53d8\u6362\u7684\u731c\u6d4b\u662f\u6b63\u786e\u7684\uff0c\u90a3\u53ef\u80fd\u662f\u6267\u884c\u9006\u53d8\u6362\u7684\u51fd\u6570\uff0c\u4f46\u518d\u4e00\u6b21\uff0c\u4e0d\u77e5\u9053;(\n\u4ee3\u7801\u63d0\u5347\u7684\u6700\u540e\u4e00\u4e2a\u969c\u788d\uff0c\u4e5f\u662f\u5bf9 wasm \u5927\u5c0f\u8d21\u732e\u6700\u5927\u7684\u969c\u788d\uff0c\u662f\u4e0d\u65ad\u63d0\u53d6\u3002\u4e00\u4e9b\u5e38\u91cf\u4ece\u4e00\u5f00\u59cb\u5c31\u53ef\u7528\uff0c\u800c\u5176\u4ed6\u5e38\u91cf\uff0c\u4f8b\u5982\u67e5\u627e\u8868\uff0c\u5219\u662f\u5728\u8fd0\u884c\u65f6\u7684\u4e0d\u540c\u70b9\u751f\u6210\u7684\u3002\u4f7f\u7528\u4e86 600 \u591a\u4e2a\u5e38\u91cf\uff0c\u6240\u4ee5\u6700\u540e\u6211\u53ea\u662f\u7528 python \u811a\u672c\u81ea\u52a8\u4ece\u5185\u5b58\u8f6c\u50a8\u4e2d\u6293\u53d6\u5b83\u4eec\uff0c\u800c\u6ca1\u6709\u68c0\u67e5\u9002\u5f53\u7684\u957f\u5ea6\uff0c\u8fd9\u5bfc\u81f4\u4e86\u5f88\u591a\u91cd\u53e0\uff08\u5e38\u91cf\u592a\u957f\u6bd4\u8bbf\u95ee\u51b2\u7a81\u66f4\u597d\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\uff09\u3002\u901a\u8fc7\u5c0f\u5fc3\u5730\u53bb\u9664\u91cd\u53e0\uff08\u7136\u540e\u68c0\u67e5\uff0c\u56e0\u4e3a\u6709\u4e9b\u4f3c\u4e4e\u662f\u5fc5\u8981\u7684\uff09\uff0c\u53ef\u80fd\u53ef\u4ee5\u5c06 wasm \u5927\u5c0f\u81f3\u5c11\u51cf\u5c11\u4e00\u534a\u3002\u6267\u884c\u5b8c\u6240\u6709\u8fd9\u4e9b\u4e4b\u540e\uff0c\u6211\u8bbe\u6cd5\u7528 C++ \u4ee3\u7801\u91cd\u65b0\u521b\u5efa\u4e86 HasMulAdc_18016d24d\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u6ca1\u6709\u83b7\u5f97\u4efb\u4f55\u6d1e\u5bdf\u529b\u3002\u5b9e\u9645\u8f93\u5165\u6570\u5bf9\u8f93\u5165\u7f13\u51b2\u533a\u7684\u4f9d\u8d56\u6027\u4f3c\u4e4e\u4e5f\u662f\u9ad8\u5ea6\u975e\u7ebf\u6027\u7684\u3002\u7ecf\u8fc7\u5927\u91cf\u7684\u53cd\u590d\u8bd5\u9a8c\uff0c\u6211\u522b\u65e0\u9009\u62e9\uff0c\u53ea\u80fd\u91cd\u65b0\u521b\u5efa\u7b7e\u540d\u7684\u8f93\u5165\u51fd\u6570\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u5b83\u6ca1\u6709\u88ab switch \u8bed\u53e5\u6df7\u6dc6\u3002\u7136\u800c\uff0c\u4e0e\u4ee5\u524d\u7684\u7248\u672c\u4e0d\u540c\uff0c\u8981\u53d6\u5e42\u7684\u5b9e\u9645 RSA \u6d88\u606f\u5728\u8fd0\u884c\u65f6\u4ece\u4e0d\u5728\u5185\u5b58\u4e2d\uff0c\u56e0\u6b64\u6211\u5fc5\u987b\u4ece protobuf \u6d88\u606f\u8ddf\u8e2a\u5b83\u7684\u521b\u5efa\u3002\u6211\u63d0\u51fa\u7684\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u4e4b\u4e00\uff0c\u6700\u7ec8\u8bc1\u660e\u662f\u6700\u5bcc\u6709\u6210\u6548\u7684\uff0c\u662f\u8ddf\u8e2a SHA1 \u8c03\u7528\u3002\u6839\u636e wiki\uff0c\u6240\u6709 SHA1 \u8c03\u7528\u90fd\u5e94\u4f7f\u7528\u76f8\u540c\u7684\u8d77\u59cb\u503c\uff1a\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u641c\u7d22\u8fd9\u4e9b\u503c\u6216\u820d\u5165\u5e38\u91cf\u5e76\u8ddf\u8e2a\u5bf9\u5b83\u4eec\u7684\u5f15\u7528\uff0c\u6211\u8bbe\u6cd5\u627e\u5230\u4e86\u4e00\u4e9b\u4f3c\u4e4e\u53ef\u4ee5\u8ba1\u7b97 SHA1 \u7684\u533a\u57df\uff0c\u5176\u4e2d\u4e00\u4e2a\u975e\u5e38\u63a5\u8fd1\u6c42\u5e42\u4ee3\u7801\uff08\u5220\u8282\uff09\uff1avoid Longstringproc_18017e3b0(byte **param_1,stdstring *data,uint len,stdstring *param_4){ byte *charbuffer; longlong lVar1; undefined8 local_24b8;\u5b57\u8282\u8f93\u51fa_24b0 [512];\u5b57\u8282 local_22b0 [2056];\u5b57\u8282 local_1aa8 [2056];\u5b57\u8282 local_12a0 [1040];\u5b57\u8282 local_e90 [1040];\u5b57\u8282 local_a80 [1032];\u5b57\u8282 local_678 [1032];\u5b57\u8282\u7f57\u2026\u2026", "note_en": "This work is based (obviously) on the  widevine-l3-decryptor extension. Many parts are the same, parts of Readme are a verbatim copy, etc.\n   Tldr: The result seems to work, but relies on code lifting into wasm module and lots of brute-forcing, resulting in about 15-minute wait for a single RSA decryption.  UPDATE While writing README, I found encoding tables\n  Bignum arithmetics was taken from  CryptoPP library. I found it the easiest library to work with and easiest to compile into wasm as well.\n Should work with widevine for 64bit Windows of version 4.10.2209. Unlikely to work for any other versions.\n  Widevine is a Google-owned DRM system that&#39;s in use by many popular streaming services (Netflix, Spotify, etc.) to prevent media content from being downloaded.\n But Widevine&#39;s least secure security level, L3, as used in most browsers and PCs, is implemented 100% in software (i.e no hardware TEEs), thereby making it reversible and bypassable.\n This Chrome extension demonstrates how it&#39;s possible to bypass Widevine DRM by hijacking calls to the browser&#39;s  Encrypted Media Extensions (EME) and (very slowly) decrypting all Widevine content keys transferred - effectively turning it into a clearkey DRM.\n  To see this concept in action, just load the extension in Developer Mode and browse to any website that plays Widevine-protected content, such as  https://bitmovin.com/demos/drm .First, extension will try to brute-force input encoding for the code-lifted part. Then, assuming it succeeds, keys will be logged in plaintext to the javascript console. ( Update: will avoid brute forcing now)\n   Decrypting the media itself is then just a matter of using a tool that can decrypt MPEG-CENC streams, like  ffmpeg.\n      It is my honest opinion that DRM is a malignant tumor growing upon various forms of media, and that people that either implement or enforce implementation are morally repugnant and do no good to society. With that in mind, I was sad to learn in May 2021 that the original extension would soon be rendered obsolete. I found myself with some free time on my hands, and so I decided to try and replicate original key extraction. Unfortunately, there was not much data pertaining to what process the original&#39;s authors used, and even some confusion as to  who was the one who performed extraction. Nevertheless, I decided to give it a go, and hopefully boost my flagging self-confidence a little. I did not succeed in either of those tasks, but I managed to write a barely-functioning decryptor, and decided to document the steps I followed, in case they are of use to somebody else.\n  In order to deal with executable, I decided to use  Ghidra, despite its association with NSA, mostly because it is free and has most features that I wanted. I also wrote a simple snippet to be able to debug dll.\n lib = LoadLibrary(L&#34;widevinecdm_new.dll&#34;);if (lib != NULL){ InitializeCdmModule init_mod = (InitializeCdmModule)GetProcAddress(lib, &#34;InitializeCdmModule_4&#34;); CreateCdmInstance create = (CreateCdmInstance)GetProcAddress(lib, &#34;CreateCdmInstance&#34;); GetCdmVersion getver=(GetCdmVersion)GetProcAddress(lib, &#34;GetCdmVersion&#34;); printf(&#34;%d\\n&#34;, (ulonglong)init_mod); init_mod(); printf(&#34;%d %s\\n&#34;, (ulonglong)create,getver()); getchar(); printf(&#34;Creating\\n&#34;); std::string keys = &#34;com.widevine.alpha&#34;; std::string clearkeys = &#34;org.w3.clearkey&#34;; ContentDecryptionModule_10* cdm =(ContentDecryptionModule_10 *) create(10, keys.c_str(), keys.length(), GetDummyHost, (void*) msg); printf(&#34;Created? %d \\n&#34;, (ulonglong)cdm); unsigned int pid = 10; const char* sid = &#34;Sessid&#34;; //pssh box? byte initdata[92]= { 0, 0, 0, 91, 112, 115, 115, 104, 0, 0, 0, 0, 237, 239, 139, 169, 121, 214, 74, 206, 163, 200, 39, 220, 213, 29, 33, 237, 0, 0, 0, 59, 8, 1, 18, 16, 235, 103, 106, 187, 203, 52, 94, 150, 187, 207, 97, 102, 48, 241, 163, 218, 26, 13, 119, 105, 100, 101, 118, 105, 110, 101, 95, 116, 101, 115, 116, 34, 16, 102, 107,106, 51, 108, 106, 97, 83, 100, 102, 97, 108, 107, 114, 51, 106, 42, 2, 72, 68,50, 0}; gcdm=cdm; printf(&#34;First compare: %d\\n&#34;,(int)((byte *)gcdm)[0x92]); cdm-&gt;Initialize(true, false, false); printf(&#34;Sc compare: %d\\n&#34;, (int)((byte*)gcdm)[0x92]); getchar(); cdm-&gt;CreateSessionAndGenerateRequest(pid,SessionType::kTemporary,InitDataType::kCenc,initdata,91);}\n All structures in the above snippet are copied from Chromium eme sources, for example  here.\n First things first, I tried running the resulting program, producing proper signature as an (intermediate) result. Trying to trace it in debugger, however, caused problems. At first, it just crashed with access violation. After modifying  BeingDebugged field in PEB, it instead went into infinite loop.\n Looking at the decompiled code revealed a large amount of strange switch statements in most API functions. It looked somewhat like the following (from Ghidra decompiler):\n while(true) { uVar5 = (longlong)puVar3 + (longlong)(int)puVar3[uVar5 &amp; 0xffffffff]; switch(uVar5) { case 0x1800f489e: uVar5 = 5; goto LAB_1800f488e; case 0x1800f48ad: local_20 = local_2c + 0x47b0e7d4; uVar5 = 3; goto LAB_1800f488e; case 0x1800f48c1: uVar5 = 0x17; goto LAB_1800f488e; case 0x1800f48c8: local_28 = local_20 - local_2c; bVar1 = (int)(uint)local_21 &lt; (int)(local_28 + 0xb84f182c); unaff_RSI = (undefined *)(ulonglong)bVar1; uVar5 = (ulonglong)((uint)bVar1 * 5 + 2); goto LAB_1800f488e; case 0x1800f48f4: local_28 = local_2c + 0xd689ea6; uVar5 = 0x16; goto LAB_1800f488e; case 0x1800f4908: uVar5 = 0x19; goto LAB_1800f488e; case 0x1800f491a: local_2c = local_2c &amp; local_28; uVar5 = 1; goto LAB_1800f488e; case 0x1800f492c: if (true) { *(undefined *)&amp;param_1-&gt;_vtable = *unaff_RSI; unaff_RSI[1] = unaff_RSI[1] - (char)(uVar5 &gt;&gt; 8); /* WARNING: Bad instruction - Truncating control flow here */ halt_baddata(); }...\n After several days of investigation, it became obvious that that is a form of code obfuscation, breaking down code flow into small segments and arranging them in switch statement in order defined by a primitive PRNG. PRNG can be controlled to execute if/else statements and loops. The  halt_baddata portion causes access violation crash when reached. Any jump table index outside bounds leads to  while(true) executing indefinitely. Since switch is driven by PRNG, decompiler cannot seem to find limits of jump tables, resulting in invalid switch statements or mangled decompilation. I tried to ameliorate that by  fixing jump tables, but results were not encouraging. I then tried to  follow the instruction flow by using Ghidra Emulator API. AFter a lot of experimentation, I drew the following conclusions:\n Many of the switch cases are almost-duplicates, and some are either never reached or only reached in case of failed check, crashing program or sending it into infinite loop.\n  Most of anti-debugging code seems to be similar to what is decribed  here. The list of the debugger windows names is exactly the same, which is amusing (and outdated).\n Some functions actually use memory checksums  as PRNG seeds which makes guessing where it would go after impossible without knowing the checksum. And how many iterations it took to calculate it. And results of various checks in the middle. Etc...\n None of the anti-debugger tricks are activated by emulation, but emulation is literally hundreds, if not thousands of times slower than direct CPU execution, so that checksum calculation can take several hours (depending on log verbosity).\n Emulating just one function does not help much, since flow might depend on input parameters :( .\n After that, I tried to reverse Protobuf encoding/decoding functions found in the code. While I did manage to find some of them (using  getchar as a convenient breakpoint to attach debugger), they did not match Protobuf functions in the original repository, leading me to believe that the source file was changed. For example, SignedMessage now has more than 9 fields, rather than original 5. Luckily, protocol seems backward compatible enough, so the necessary signatures/keys can still be extracted. To parse protobuf messages, I used either original extension or this  convenient website.\n In any case, that investigation did not seem to lead anywhere, and in the end (after several weeks and lots of cursing), I decided to emulate the whole program in Ghidra. To that end, I developed a simple  script that emulated system and host calls made by DLL. Necessary system calls were extracted by just running emulation until it came to the code it could not execute and replacing that with python function. As an aside, script executes one instruction at a time, so it is slower than using Ghidra breakpoints, but easier for me to manage. Manipulating it allowed me to dump logs of program flow and memory contents, as well as save and restore simulator state. Eventually, I managed to reach point where emulator formed a valid signature and called into fake host code with it. It took several days, though, with the longest part being something that seemed to be jump table and calculation table generation. After that, it was just a matter of tracing signature back to generation function.\n   After staring at the wall of poorly decompiled code for a while, I realized that parts of it implement a simple Bignum multiplicaion algorithms, but instead of using linear arrays, they used arrays permuted by PRNG-like functions, so every arithmetic operation was preceded by permutation generator looking kind of like this:\n uint * PFUN_180119595(uint *param_1,uint *out,uint length,int param_4){ byte *pbVar1; uint uVar2; ulonglong uVar3; uint uVar4; uint uVar5; ulonglong uVar6; bool bVar7; uVar6 = (ulonglong)(length * 4); if (*(char *)((longlong)out + uVar6) != &#39;\\x02&#39;) { do { pbVar1 = (byte *)((longlong)out + uVar6); bVar7 = *pbVar1 == 0; *pbVar1 = *pbVar1 ^ bVar7 * (*pbVar1 ^ 1); } while ((byte)(!bVar7 * *pbVar1) == &#39;\\x01&#39;); if (bVar7) { if (length != 0) { uVar5 = param_4 * 0xe286515; uVar3 = 0; do { uVar2 = param_1[uVar3]; uVar4 = uVar2 ^ uVar5; out[uVar3] = uVar4; uVar5 = uVar5 + uVar2 * uVar4; uVar3 = uVar3 + 1; } while (length != uVar3); } *(undefined *)((longlong)out + uVar6) = 2; } } return out;}\n Same function was used most of the time, but with different offsets and initial arrays, resulting in a variety of permutations. Regardless, I was able to roughly identify montgomery multiplications, subtractions and additions performed on 256-byte arrays (implying the use of 2048 bit keys). One of the most important factors was the use of &#34;ADC&#34; assembler command, mostly restricted to two areas of the code, which I tentatively identified as &#34;signature generation&#34; and &#34;session key decryption&#34;. I concentrated on the former, since I could access and verify the output. Which did however raise the question about what kind of input the function took. More about that later.\n Of course, sick, sadistic minds behind the obfuscation did not use a straightforward exponentiation algorithms. As described in Google patent  US20160328543A1, they multiply input by constant and output by reversing constant, use permutation function to confuse memory layouts, and seem to use &#34;split variables&#34; at times, though not often in this case. In any case, resulting exponentiation function also has some additions which cancel each other in the end.\n In order to extract the exponent from the code, I first logged most of the inputs and outputs of the functions that seemed to operate on bignum, unscrambling the permutation using the already generated tables in memory. Then, I used  python script to guess the operations performed on the numbers, and a  separate script to map those operations into a tree. The second script went through several iterations as I tried various things, including adding  dual number support in order to extract exponent from the result&#39;s derivative. Ultimately, I settled on simple single-variable tracing. Finding a route that did not lead to exponential explosion in number of polynomial powers was somewhat of a challenge, but eventually (after,once again, a week or two of work :| ) I succeeded in extracting an exponent and multiplicative constant:\n   One can easily see that the exponent is 3072 bits in length, which is a lot longer than expected (2048). Obviously, since exponent is periodic, it can be extended to any length. It can be also confirmed that this is not a complete exponent, since the first bignum-like structure in the function does not match the encryption input. (Decryption of the RSA is easily done using public exponent, 65537). There is also no linear. or quadratic, or... (I checked polynomials to about 128th power) dependency. Which leads me to the following stage.\n  If one were to look at the function where exponentiation takes place, one would not that it has far too many input parameters.\n  In there, Param_1 seems to be constant, or at least input-independent. It is still necessary to get the correct result, but can be represented by static array. Parameters from 2 to 5, however, do depend on input... somehow. They are also permuted excessively in loops by  ConstUser_18016b077 functions. These functions represent half of the input obfuscation, and are the reason why this repo id called &#34;guesser&#34;. They use a sequence of runtime-generated lookup tables to perform a variety of functions on oddly encoded inputs. Sequences are also runtime generated or unpacked, I am not sure. Every call to that function contains sequence offset, processing length, etc, all combined together into a single 64bit number. Odd encoding in this case refers to the following: each X-byte number is split into X*4 chunks of 2 bits each, two more chunks are appended with what seems to be arbitrary numbers and the result is passed through one of the above Const functions, resulting in 3 bit(!) stored in each byte, like so (hex representation of 256-byte number into 1026 bytes):(I will call it long form from now on)\n  Lookup tables in  ConstUser_18016b077 essentially map 11 bit number(2x3 bit+5bit &#34;carry&#34;) to 8-bit number(3-bit output plus carry). There are also other tables in the code that work on larger number of bits. But, since input and outputs are permuted in random order (and possibly have a carry bit), I could not for the life of me figure out what each of the (several thousands of) tables actually  did. Each operation seemed to invoke a new table, or at least, a new sequence offset.\n In any event, we have 4 or those numbers somehow generated from input and presented to exponentiation function. Where they are split into 18-bytes overlapping increments, processed in a loop, compressed back to 4-byte integers and passed on into  yet another function:\n  Where... I have no idea :( I&#39;ve spent a lot of time looking at the code, but to this day I have no idea what  exactly it does to 4 input buffers. Those buffers do not seem to be representations of 256-byte bignums ( buffer length vary, but are mostly multiples of 90). A lot of operations involve preparations like\n do { *(int*)(local_8f90 + lVar6 * 4) = *(int*)(local_8f90 + lVar6 * 4) + *(int*)(local_8500 + lVar6 * 4) * *(int*)((longlong)DAT_18091b030 + (ulonglong)((uint)lVar6 &amp; 7) * 4); lVar6 = lVar6 + 1; } while (lVar6 != 0x4a);\n Which seem perform multiplication and addition of 4-byte integer while discarding the carry? Then there are operations like this:\n do { uVar8 = (uVar8 &gt;&gt; 4) + *(longlong*)(DAT_18091af30 + (ulonglong)((uint)uVar8 &amp; 0xf) * 8); *(ulonglong*)(local_8f90 + lVar12 * 8 + 8) = uVar8; lVar12 = lVar12 + 1; } while (lVar12 != 0x10); iVar46 = (int)lVar6; lVar6 = *(longlong *)(&amp;local_8f90[128]) * 0x434c3d5000000000 + *(longlong*)(&amp;local_8f90[56]) * 0x7c7bcb1aebcb3c2b + 0x7ffc6ede4fe88090;\n Which seem to use lookup tables (DAT_18091af30) to look up 8-byte carries? Yeah, to my great shame, I have no idea what I am looking at. The only thing that comes to mind is highly obfuscated  Sch\u00f6nhage\u2013Strassen algorithm, or something from that family, that is, something that involves Fourier or Number theoretic transform. That would allow some operations to be performed modulo power of two, or modulo power of two plus one, without using carry as much as simpler multiplication algorithms. So, if anyone has any good ideas, please raise an issue or pull request? Code is  available...\n  After spending far too much time staring dumbly on decompiler and trying to run code modifications in Ghidra emulator, I decided to try dumping decompiled code into c++ file and making it compile again, with the &#34;bright&#34; idea of &#34;maybe manipulating inputs will give me some insight&#34;. I believe that is what is called &#34;code lifting&#34;? That came with its own set of challenges. The major one was the fact that decompiler was confused by overlapping buffer accesses, and could not separate local variables properly. Other was that somebody in Ghidra decompiler team thought that accessing, say, last two bytes in uint64 should be represented as  variable._6_2 instead of, say  ((short*)&amp;variable)[3]. One of those is not proper C... So I had to go through code and replace that. As well as guess at stack variable overlaps and split those, which took weeks of painstaking register comparison.\n Next hurdle was a function that took two buffers already encoded into long form and spat out long form of almost-output. That one first ran table generation (unpacking?) and then jumped to runtime-generated point. Then it used a long array of addresses and values to jump over 6(?) possible code points and execute a variety of operations on data. The structure in the array looked somewhat like:\n  And the array was long... 5153 operations long. If my guess about Fourier transformation is correct, that would probably be the function that performs inverse transformation, but once again, no idea ;(\n The final hurdle of the code-lifting, and the one that contributed the most to the wasm size, was constant extraction. Some constants were available from the beginning, while others, such as lookup tables, were generated at various points at runtime. There were over 600 constants used, so in the end I just automatically grabbed them from  memory dumps with a python script without checking the appropriate length, which resulted in a lot of overlap (it is better to have a too-long constant than access violation of undefined behavior). It is probably possible to cut the wasm size by at least half by carefully removing overlaps (and checking afterwards, since some seem necessary).\n After performing all that, I managed to recreate  HasMulAdc_18016d24d in c++ code. Unfortunately, I did not gain any insight. The dependencies of actual input number on input buffers seemed highly non-linear as well. After a lot of trial and error(s), I was left with no recourse but to recreate input function for signature, which, luckily, was not obfuscated by switch statement. Unlike previous version, however, actual RSA message to be exponentiated was never in memory during runtime, so I had to trace its creation from protobuf message.\n One of the first ideas I came with, which eventually proved to be the most fruitful, was tracking SHA1 invocations. All SHA1 invocations should use the same starting values, as per  wiki:\n  By searching for those values or round constants in memory and tracking references to them, I managed to find a few areas that appeared to calculate SHA1, one of them quite near the exponentiation code(abridged):\n void Longstringproc_18017e3b0(byte **param_1,stdstring *data,uint len,stdstring *param_4){ byte *charbuffer; longlong lVar1; undefined8 local_24b8; byte output_24b0 [512]; byte local_22b0 [2056]; byte local_1aa8 [2056]; byte local_12a0 [1040]; byte local_e90 [1040]; byte local_a80 [1032]; byte local_678 [1032]; byte lo\n......", "posttime": "2021-08-01 23:16:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u590d\u6742\u6027,decryption", "title": "\u8f6c\u6362\u590d\u6742\u6027\u963b\u788d\u4e86\u4f7f\u7528 Ghidra \u7684 Widevine \u89e3\u5bc6", "title_en": "Widevine decryption with Ghidra stymied by transform complexity", "transed": 1, "url": "https://github.com/Satsuoni/widevine-l3-guesser", "via": "", "real_tags": ["\u590d\u6742\u6027"]}, {"category": "", "categoryclass": "", "imagename": "0a0de85169dc0d9448e155a0b600ad9c.jpeg", "infoid": 1071008, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u6211\u5728\u5199\u6211\u7684\u535a\u58eb\u8bba\u6587\u65f6\uff0c\u6211\u7684\u65e5\u5b50\u5e76\u4e0d\u7cdf\u7cd5\u3002\u6211\u5ea6\u8fc7\u4e86\u7cdf\u7cd5\u7684\u51e0\u4e2a\u6708\u3002\u90a3\u79cd\u6bcf\u5929\u9192\u6765\u90fd\u60f3\u7740\u201c\u4eca\u5929\u6211\u771f\u7684\u4f1a\u505a\u8fd9\u4ef6\u4e8b\u201d\u7136\u540e\u4f60\u2026\u2026\u4e0d\u505a\u7684\u90a3\u79cd\u3002\u4e0d\u77e5\u600e\u7684\uff0c\u4e00\u5929\u8fc7\u53bb\u4e86\uff0c\u7136\u540e\u662f\u665a\u4e0a 11 \u70b9\uff0c\u4f60\u4ecd\u7136\u6ca1\u6709\u505a\u8fd9\u4ef6\u4e8b\uff0c\u611f\u89c9\u4f60\u8fd8\u4e0d\u5982\u53bb\u7761\u89c9\u2026\u2026", "note_en": "When I was writing my PhD I didn\u2019t have bad weeks. I had bad months. The kind when each day you wake up thinking, \u201cToday I will actually do the thing\u201d and then you\u2026 don\u2019t. Somehow the day ticks by and then it\u2019s 11 pm and you still haven\u2019t done the thing and it feels like you might as well go to bed and\u2026", "posttime": "2021-08-01 23:16:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b88\u7eaa\u5f8b,lazy,\u535a\u58eb\u8bba\u6587", "title": "\u4f60\u4e0d\u61d2\u60f0\u6216\u4e0d\u5b88\u7eaa\u5f8b\u3002\u4f60\u6709\u5185\u963b", "title_en": "You Are Not Lazy or Undisciplined. You Have Internal Resistance", "transed": 1, "url": "https://medium.com/counterarts/you-are-not-lazy-or-undisciplined-you-are-experiencing-internal-resistance-755a02673aa9", "via": "", "real_tags": ["\u5b88\u7eaa\u5f8b", "lazy", "\u535a\u58eb\u8bba\u6587"]}, {"category": "", "categoryclass": "", "imagename": "8538713bc4aaa1a45d5964cb62b05f1a.jpg", "infoid": 1071007, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51fa\u5356\u4f60\u7684\u7075\u9b42\u4ece\u672a\u5982\u6b64\u7b80\u5355\u3002\u4eca\u5929\uff0c\u6709\u5f88\u591a\u6076\u9b54\u5b66\u4e66\u7c4d\u6559\u4f60\u5982\u4f55\u4e0e\u8def\u897f\u6cd5\u8ba8\u4ef7\u8fd8\u4ef7\uff0c\u8fd9\u4e9b\u4e66\u7c4d\u7684\u4f5c\u8005\u53ef\u80fd\u5df2\u7ecf\u591a\u6b21\u8fd9\u6837\u505a\u4e86\u3002\u4f46\u4e5f\u8bb8\u8fd9\u5c31\u662f\u95ee\u9898\u6240\u5728\u3002\u6709\u4e86\u8fd9\u4e48\u591a\u53ef\u7528\u7684\u4fe1\u606f\uff0c\u5f88\u96be\u77e5\u9053\u4ece\u54ea\u91cc\u5f00\u59cb\u3002\u6492\u65e6\u662f\u901a\u8fc7\u4e9a\u9a6c\u900a\u9001\u8d27\u63a5\u53d7\u60a8\u7684\u7075\u9b42\uff0c\u8fd8\u662f\u5fc5\u987b\u4eb2\u81ea\u5b8c\u6210\uff1f\u4f60\u9700\u8981\u4e66\u9762\u5408\u540c\uff0c\u8fd8\u662f\u63e1\u624b\u5c31\u591f\u4e86\uff1f\u9996\u5148\uff0c\u4e3a\u4ec0\u4e48\u8def\u897f\u6cd5\u3001\u6492\u65e6\u6216\u4efb\u4f55\u9b54\u9b3c\u60f3\u8981\u4f60\u7684\u7075\u9b42\uff1f\u6076\u9b54\u83b7\u5f97\u4f60\u7684\u7075\u9b42\u4f1a\u5f97\u5230\u4ec0\u4e48\uff1f\u5728\u57fa\u7763\u6559\u795e\u8bdd\u4e2d\uff0c\u5815\u843d\u5929\u4f7f\u8def\u897f\u6cd5\u6bcf\u4e00\u6b65\u90fd\u60f3\u7834\u574f\u4e0a\u5e1d\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7\u4ed6\u81ea\u5df1\u7684\u521b\u9020\u7269\u2014\u2014\u4eba\u7c7b\u6765\u5e72\u6d89\u4e0a\u5e1d\u7684\u8ba1\u5212\u3002\u903b\u8f91\u662f\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u6c38\u751f\u3001\u65e0\u6cd5\u4f30\u91cf\u7684\u8d22\u5bcc\u6216\u6743\u529b\uff0c\u90a3\u4e48\u4e0a\u5e1d\u5bf9\u4f60\u53e6\u6709\u8ba1\u5212\u3002\u901a\u8fc7\u4e0e\u9b54\u9b3c\u505a\u4ea4\u6613\u6765\u5f97\u5230\u8fd9\u4e9b\uff0c\u4f60\u7ed9\u4e86\u9b54\u9b3c\u4e00\u4e2a\u673a\u4f1a\u6765\u5e72\u6d89\u4e0a\u5e1d\u7cbe\u5fc3\u5e03\u7f6e\u7684\u8ba1\u5212\u3002\u53e6\u4e00\u4e2a\u7248\u672c\u662f\u4e0a\u5e1d\u548c\u6492\u65e6\u6b63\u5904\u4e8e\u4e00\u573a\u6fc0\u70c8\u7684\u5584\u4e0e\u6076\u7684\u6218\u6597\u4e2d\uff0c\u7075\u9b42\u662f\u4ed6\u4eec\u4e3a\u4e4b\u594b\u6597\u7684\u201c\u8d27\u5e01\u201d\u3002\u5728\u5bf9\u57fa\u7763\u6559\u7684\u5176\u4ed6\u7406\u89e3\u4e2d\uff0c\u9b54\u9b3c\u548c\u6076\u9b54\u5e76\u4e0d\u76f4\u63a5\u4e0e\u5584\u826f\u7684\u529b\u91cf\u8fdb\u884c\u6597\u4e89\u3002\u4ed6\u4eec\u66f4\u50cf\u662f\u8bf1\u60d1\u8005\uff0c\u4ee5\u9053\u5fb7\u548c\u81ea\u6211\u610f\u8bc6\u4e3a\u4ee3\u4ef7\uff0c\u63a5\u8fd1\u6700\u5f31\u7684\u4eba\uff0c\u5e76\u4e3a\u68d8\u624b\u7684\u95ee\u9898\u63d0\u4f9b\u5feb\u901f\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u6700\u540e\uff0c\u8bb8\u591a\u6076\u9b54\u548c\u9b54\u9b3c\u60f3\u8981\u83b7\u5f97\u4e00\u4e2a\u4eba\u7684\u7075\u9b42\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u539f\u56e0\uff0c\u9664\u4e86\u77e5\u9053\u4ed6\u4eec\u201c\u83b7\u5f97\u201d\u5b83\u7684\u6311\u6218\u548c\u6ee1\u8db3\u4e4b\u5916\u3002\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50\u6765\u81ea\u300a\u6d6e\u58eb\u5fb7\u300b\uff0c\u5176\u4e2d\u4e0a\u5e1d\u4e0e\u6885\u83f2\u65af\u7279\u6253\u8d4c\uff0c\u65e0\u8bba\u6076\u9b54\u5982\u4f55\u5c1d\u8bd5\uff0c\u6076\u9b54\u90fd\u65e0\u6cd5\u83b7\u5f97\u4eba\u7c7b\u6d6e\u58eb\u5fb7\u7684\u7075\u9b42\u3002\u6709\u4e9b\u6076\u9b54\u60f3\u8981\u7075\u9b42\u63d0\u5347\u4ed6\u4eec\u5728\u6076\u9b54\u5b9e\u754c\u4e2d\u7684\u529b\u91cf\u548c\u5730\u4f4d\u3002\u6076\u9b54\u4e5f\u6709\u7b49\u7ea7\u5236\u5ea6\uff0c\u8d44\u672c\u4e3b\u4e49\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u5730\u72f1\uff0c\u5373\u4f7f\u5728\u771f\u6b63\u7684\u5730\u72f1\u4e2d\u4e5f\u662f\u5982\u6b64\u3002\u8ba9\u6211\u4eec\u5047\u8bbe\u4f60\u5df2\u7ecf\u4e0e\u9b54\u9b3c\u8fbe\u6210\u534f\u8bae\uff0c\u5e76\u4e14\u5728\u4f60\u7684\u4f59\u751f\u4e2d\u62e5\u6709\u4f60\u60f3\u8981\u7684\u6240\u6709\u8d22\u5bcc\u3001\u8d22\u5bcc\u548c\u6743\u529b\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f60\u5728\u4e34\u7ec8\u524d\uff0c\u8def\u897f\u6cd5\u6765\u6536\u96c6\u4f60\u7684\u7075\u9b42\uff0c\u6b63\u5982\u4f60\u591a\u5e74\u524d\u8ba8\u4ef7\u8fd8\u4ef7\u3002\u597d\u5427\uff0c\u4f60\u7684\u7075\u9b42\u73b0\u5728\u5c5e\u4e8e\u8def\u897f\u6cd5\u5148\u751f\uff0c\u4ed6\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u3002\u5f53\u4ed6\u5750\u5728\u6c99\u53d1\u4e0a\u65f6\uff0c\u4ed6\u53ef\u4ee5\u628a\u4f60\u53d8\u6210\u811a\u51f3\uff0c\u6216\u8005\u7528\u5730\u72f1\u4e4b\u706b\u6c38\u8fdc\u6298\u78e8\u4f60\u3002\u5982\u679c\u4f60\u540c\u610f\u4f60\u4e0d\u80fd\u51fa\u5356\u7075\u9b42\u7684\u7406\u8bba\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u4e0d\u662f\u4f60\u7684\uff0c\u800c\u662f\u5c5e\u4e8e\u4e0a\u5e1d\u7684\uff0c\u90a3\u4e48\u5c31\u6709\u7406\u7531\u4e50\u89c2\u4e86\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u51fa\u5356\u4f60\u7684\u7075\u9b42\u53ea\u662f\u4e00\u79cd\u7f6a\u8fc7\uff0c\u975e\u5e38\u7cdf\u7cd5\uff0c\u4f46\u4ecd\u7136\u662f\u4e00\u79cd\u7f6a\u8fc7\u3002\u5728\u5929\u4e3b\u6559\u548c\u4e00\u4e9b\u65b0\u6559\u4f20\u7edf\u4e2d\uff0c\u4f60\u4f1a\u5728\u6b7b\u540e\u8fdb\u5165\u70bc\u72f1\u72b6\u6001\uff08\u6216\u7c7b\u4f3c\u70bc\u72f1\u7684\u9636\u6bb5\uff09\uff0c\u5728\u90a3\u91cc\u4f60\u7684\u7f6a\u5b7d\u88ab\u6d17\u51c0\u3002\u8fd9\u53ef\u80fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u3002\n\u51fa\u5356\u7075\u9b42\u7684\u4e00\u4e2a\u6709\u8da3\u7ed3\u679c\u662f\u52a8\u753b\u7cfb\u5217\u6b7b\u4ea1\u7b14\u8bb0\uff0c\u8be5\u7cfb\u5217\u4ee5\u65e5\u672c\u4e3a\u80cc\u666f\uff0c\u7075\u611f\u6765\u81ea\u65e5\u672c\u6c11\u95f4\u4f20\u8bf4\u548c\u4f5b\u6559\u3002\u6b7b\u795e\uff08\u65e5\u672c\u6076\u9b54\uff09\u7ed9\u4e3b\u89d2\u4e00\u672c\u6b7b\u4ea1\u7b14\u8bb0\u2014\u2014\u4e00\u672c\u53ef\u4ee5\u6740\u6b7b\u4efb\u4f55\u5199\u6709\u540d\u5b57\u7684\u4eba\u7684\u4e66\u3002\u6b7b\u4ea1\u7b14\u8bb0\u7684\u62e5\u6709\u8005\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u5b83\u3002\u4ee3\u4ef7\u662f\u4efb\u4f55\u4f7f\u7528\u6b7b\u4ea1\u7b14\u8bb0\u7684\u4eba\u90fd\u5c06\u88ab\u62d2\u7edd\u8fdb\u5165\u5929\u5802\uff0c\u5e76\u6ce8\u5b9a\u8981\u8fdb\u5165\u7eaf\u7cb9\u3001\u6c38\u6052\u7684\u9ed1\u6697\u548c\u7a7a\u865a\u7684\u6765\u4e16\u3002\u6240\u4ee5\uff0c\u4f60\u73b0\u5728\u5df2\u7ecf\u505a\u51fa\u4e86\u4e00\u4e2a\u660e\u667a\u7684\u51b3\u5b9a\uff0c\u5373\u51fa\u5356\u4f60\u7684\u7075\u9b42\u5b9e\u9645\u4e0a\u662f\u4e00\u7b14\u975e\u5e38\u5212\u7b97\u7684\u4ea4\u6613\u3002\u4f46\u662f\uff0c\u60a8\u7a76\u7adf\u5982\u4f55\u5f00\u59cb\u8fd9\u9879\u4e1a\u52a1\u4ea4\u6613\uff1f\u9996\u5148\uff0c\u60a8\u9700\u8981\u51b3\u5b9a\u8981\u4e0e\u54ea\u4e2a\u6076\u9b54\u6216\u6076\u9b54\u8ba8\u4ef7\u8fd8\u4ef7\u3002\u5f88\u6709\u53ef\u80fd\u4f60\u4e0d\u591f\u91cd\u8981\uff0c\u65e0\u6cd5\u5c06\u4f60\u7684\u7075\u9b42\u51fa\u5356\u7ed9\u5927\u8def\u897f\u6cd5\u6216\u6492\u65e6\u672c\u4eba\uff08\u5bf9\u4e0d\u8d77\uff0c\u4f46\u4ed6\u5f88\u5fd9\uff09\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u4e0d\u5f97\u4e0d\u6ee1\u8db3\u4e8e\u5176\u4ed6\u8f83\u5c0f\u7684\u6076\u9b54\uff1a\u53ec\u5524\u6d3e\u8499\u5982\u679c\u4f60\u5bfb\u6c42\u79d1\u5b66\u77e5\u8bc6\uff0c\u54f2\u5b66\u5e76\u4e86\u89e3\u5730\u7403\u7684\u5965\u79d8\u3002\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u5b87\u5b99\u7684\u5965\u79d8\u3001\u4e16\u754c\u662f\u5982\u4f55\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u88ab\u521b\u9020\u7684\uff0c\u8bf7\u53ec\u5524\u73c0\u68ee\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u6076\u9b54\u4f3c\u4e4e\u90fd\u4e0d\u662f\u6b63\u786e\u7684\u9009\u62e9\uff0c\u8bf7\u8003\u8651\u9605\u8bfb M. Belanger \u7684 The Dictionary of Demons\uff0c\u8fd9\u662f\u514d\u8d39\u7684 Audible \u8bd5\u7528\u7248\u3002\n\u63a5\u4e0b\u6765\u662f\u771f\u6b63\u7684\u53ec\u5524\u4eea\u5f0f\uff0c\u5728\u90a3\u91cc\u4f60\u53ec\u5524\u4f60\u9009\u62e9\u7684\u6076\u9b54\u6216\u6076\u9b54\u5e76\u5f00\u59cb\u8ba8\u4ef7\u8fd8\u4ef7\u3002\u53ec\u5524\u6076\u9b54\u7684\u4f20\u7edf\u65b9\u6cd5\u5305\u62ec\u5728\u5730\u9762\u4e0a\u7ed8\u5236\u60a8\u60f3\u8981\u7684\u6076\u9b54\u7684\u5370\u8bb0\u3002\u5982\u679c\u60a8\u7684\u53ec\u5524\u4eea\u5f0f\u6210\u529f\uff0c\u6076\u9b54\u5c06\u88ab\u53ec\u5524\u5230\u5370\u8bb0\u7684\u4f4d\u7f6e\u5e76\u4e14\u65e0\u6cd5\u8fdc\u79bb\u5b83\u3002\u4ed6\u4eec\u88ab\u9650\u5236\u5728\u90a3\u4e2a\u7279\u5b9a\u7684\u4f4d\u7f6e\uff0c\u4e0d\u80fd\u5f71\u54cd\u8d85\u51fa\u5b83\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u9664\u4e86\u5370\u8bb0\u4e4b\u5916\uff0c\u60a8\u53ef\u80fd\u8fd8\u9700\u8981\u4e00\u4e2a\u4fdd\u62a4\u6212\u6307\u4f9b\u60a8\u5750\u4e0b\u3002\u5982\u679c\u53ec\u5524\u5931\u8d25\u6216\u6076\u9b54\u56e0\u88ab\u53ec\u5524\u800c\u5484\u5484\u903c\u4eba\u4e14\u751f\u6c14\uff0c\u8fd9\u679a\u6212\u6307\u5c06\u4fdd\u62a4\u60a8\u514d\u53d7\u6076\u9b54\u7684\u4f24\u5bb3\u3002\u5728\u975e\u4f20\u7edf\u7248\u672c\u4e2d\uff0c\u4e0d\u6d89\u53ca\u6076\u9b54\u53ec\u5524\u8fc7\u7a0b\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6076\u9b54\u672c\u8eab\u4f1a\u611f\u89c9\u5230\u60a8\u4f55\u65f6\u5bb9\u6613\u53d7\u5230\u90aa\u6076\u7684\u8bf1\u60d1\uff0c\u5e76\u4e14\u4f3c\u4e4e\u65e0\u5904\u4e0d\u5728\uff0c\u5e76\u6162\u6162\u5f00\u59cb\u8ba8\u4ef7\u8fd8\u4ef7\u7684\u8fc7\u7a0b\u3002\u4f8b\u5982\uff0c\u6b7b\u4ea1\u7b14\u8bb0\u4e2d\u7684\u6b7b\u795e\u53ea\u662f\u5728\u4e3b\u89d2\u5728\u5927\u5b66\u6821\u56ed\u91cc\u8d70\u52a8\u65f6\uff0c\u4ece\u5929\u4e0a\u6389\u4e0b\u4e86\u88ab\u8bc5\u5492\u7684\u7b14\u8bb0\u672c\u3002\u5728\u8bd7\u300a\u6d6e\u58eb\u5fb7\u300b\u4e2d\uff0c\u6076\u9b54\u6885\u83f2\u65af\u7279\u5316\u8eab\u4e3a\u4e00\u53ea\u6d41\u6d6a\u7684\u8d35\u5bbe\u72ac\uff0c\u8ddf\u7740\u6d6e\u58eb\u5fb7\u56de\u5bb6\u3002\u4e00\u8fdb\u5165\u6d6e\u58eb\u5fb7\u7684\u4e66\u623f\uff0c\u6885\u83f2\u65af\u7279\u53d8\u56de\u6076\u9b54\u5f62\u6001\u5e76\u5f00\u59cb\u4e0e\u6d6e\u58eb\u5fb7\u8ba8\u4ef7\u8fd8\u4ef7\u3002\u4f46\u662f\uff0c\u6076\u9b54\u4e0d\u4ec5\u4f1a\u5728\u60a8\u5bb9\u6613\u53d7\u5230\u90aa\u6076\u5f71\u54cd\u65f6\u624d\u4f1a\u51fa\u73b0\u3002\u5f53\u4f60\u5373\u5c06\u505a\u4e00\u4e9b\u771f\u6b63\u597d\u7684\u548c\u6709\u9053\u5fb7\u7684\u4e8b\u60c5\u65f6\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u9760\u8fd1\uff0c\u5e76\u8bd5\u56fe\u963b\u6b62\u4f60\u5b8c\u6210\u4efb\u52a1\u3002\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u5f53\u6492\u65e6\u81ea\u5df1\u8bd5\u56fe\u5f15\u8bf1\u8036\u7a23\u79bb\u5f00\u4ed6\u7684\u4f7f\u547d\u65f6\uff0c\u6216\u8005\u5f53\u4ed6\u8bd5\u56fe\u963b\u6b62\u9a6c\u4e01\u8def\u5fb7\u5c06\u5723\u7ecf\u7ffb\u8bd1\u6210\u5fb7\u8bed\u65f6\u3002\n\u6076\u9b54\u7684\u4f20\u7edf\u5916\u89c2\u662f\u5927\u591a\u6570\u4eba\u6240\u719f\u6089\u7684\uff1a\u5b83\u4eec\u662f\u6709\u8e44\u7684\u751f\u7269\uff0c\u6709\u89d2\u3001\u8725\u8734\u9cde\u7247\uff0c\u6709\u65f6\u8fd8\u6709\u7fc5\u8180\uff0c\u901a\u8fc7\u7c7b\u4f3c\u52a8\u7269\u7684\u9f3b\u5b50\u55b7\u706b\uff0c\u6709\u4e00\u6761\u5e26\u7bad\u5c16\u7684\u5c3e\u5df4\u7b49\u3002\u51f6\u731b\u3001\u51f6\u731b\u3001\u4ee4\u4eba\u751f\u754f\u3002\u90a3\u4e2a\u7248\u672c\u7684\u6076\u9b54\u51fa\u73b0\u5728\u4e2d\u4e16\u7eaa\u665a\u671f\uff0c\u4e3b\u8981\u662f\u5f53\u65f6\u57fa\u7763\u6559\u4f1a\u7684\u4ea7\u7269\u3002\u5728\u90a3\u4e4b\u524d\uff0c\u8def\u897f\u6cd5\u4f5c\u4e3a\u6076\u9b54\u7684\u63cf\u7ed8\u4e0e\u666e\u901a\u5929\u4f7f\u60ca\u4eba\u5730\u76f8\u4f3c\u3002\u8fd9\u5e45 6 \u4e16\u7eaa\u7684\u9a6c\u8d5b\u514b\u9576\u5d4c\u5728\u610f\u5927\u5229\u62c9\u6587\u7eb3\u7684\u65b0\u5723\u963f\u6ce2\u5229\u7eb3\u5927\u6559\u5802\u4e2d\uff0c\u5c55\u793a\u4e86\u4e00\u4f4d\u8eab\u7740\u7ea2\u8272\u7684\u5929\u4f7f\u548c\u8eab\u7740\u84dd\u8272\u7684\u8def\u897f\u6cd5\u3002\u6539\u53d8\u7684\u539f\u56e0\u662f\u6559\u4f1a\u60f3\u628a\u7f6a\u6076\u4e0e\u9b54\u9b3c\u8054\u7cfb\u8d77\u6765\uff0c\u7136\u540e\u8ba9\u9b54\u9b3c\u770b\u8d77\u6765\u50cf\u4e00\u5934\u72f0\u72de\u7684\u91ce\u517d\u3002\u56e0\u6b64\uff0c\u5b83\u521b\u9020\u4e86\u4e00\u79cd\u8054\u60f3\uff0c\u5373\u72af\u7f6a\u4f1a\u5c06\u7f6a\u4eba\u53d8\u6210\u602a\u7269\u3002\u4e0d\u5fc5\u8981\u3002\u73b0\u4ee3\u5bf9\u6076\u9b54\u7684\u63cf\u8ff0\u5f3a\u8c03\u6076\u9b54\u53ef\u4ee5\u91c7\u53d6\u4efb\u4f55\u5f62\u72b6\u6216\u5f62\u5f0f\u3002\u4f8b\u5982\uff0c1997 \u5e74\u7535\u5f71\u300a\u9b54\u9b3c\u4ee3\u8a00\u4eba\u300b\u4e2d\u7684\u6076\u9b54\u770b\u8d77\u6765\u4e0e\u963f\u5c14\u5e15\u897f\u8bfa\u4e00\u6a21\u4e00\u6837\u3002\u5728\u7535\u5f71 The VVitch \u4e2d\uff0c\u6076\u9b54\u662f\u4e00\u53ea\u771f\u6b63\u7684\u5c71\u7f8a\u3002\u5728\u8bd7\u300a\u6d6e\u58eb\u5fb7\u300b\u4e2d\uff0c\u6885\u83f2\u65af\u6258\u8d39\u52d2\u65af\u5148\u53d8\u6210\u4e86\u8d35\u5bbe\u72ac\u7684\u5f62\u72b6\uff0c\u7136\u540e\u53d8\u6210\u4e86\u4eba\u7c7b\u3002\n\u8fd9\u4e2a\u60f3\u6cd5\u662f\u6492\u65e6\u548c\u6076\u9b54\u4e00\u822c\u53ef\u4ee5\u91c7\u53d6\u4efb\u4f55\u5fc5\u8981\u7684\u5f62\u5f0f\u6765\u8bf4\u670d\u4f60\u9677\u5165\u8bf1\u60d1\u3002\u6bd5\u7adf\u6709\u9053\u7406\uff0c\u5982\u679c\u4e00\u4e2a\u6076\u9b54\u60f3\u8981\u8bf4\u670d\u4f60\u51fa\u5356\u4f60\u7684\u7075\u9b42\uff0c\u5b83\u4e3a\u4ec0\u4e48\u4f1a\u53d8\u6210\u53ef\u6015\u7684\u91ce\u517d\uff1f\u6240\u4ee5\uff0c\u4f60\u73b0\u5728\u5df2\u7ecf\u6210\u529f\u53ec\u5524\u4e86\u6076\u9b54\uff0c\u8ba8\u4ef7\u8fd8\u4ef7\u5e76\u540c\u610f\u51fa\u5356\u4f60\u7684\u7075\u9b42\u7684\u6761\u6b3e\u548c\u6761\u4ef6\u4ee5\u53ca\u4f60\u5f97\u5230\u7684\u56de\u62a5\u3002\u4f60\u5982\u4f55\u5c65\u884c\u4f60\u7684\u534f\u8bae\uff1f\u4f60\u63e1\u624b\uff08\u6216\u8e44\u5b50\uff09\u5417\uff1f\u5199\u6076\u9b54\u5951\u7ea6\uff1f\u7b7e\u8840\u7ea6\uff1f\u597d\u5427\uff0c\u4f60\u4f1a\u60ca\u8bb6\u5730\u53d1\u73b0\u6492\u65e6\u548c\u5176\u4ed6\u6240\u6709\u9b54\u9b3c\u5728\u5b98\u50da\u4e3b\u4e49\u548c\u6587\u4e66\u5de5\u4f5c\u4e0a\u90fd\u6ca1\u6709\u90a3\u4e48\u5927\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4eba\u7c7b\u9700\u8981\u66f4\u6b63\u5f0f\u7684\u5408\u540c\u3002\u4f20\u7edf\u7248\u672c\u9700\u8981\u7528\u4eba\u7684\u8840\u7b7e\u7684\u5408\u540c\u3002\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u963f\u8fbe\u7eb3\u7684\u72c4\u5965\u83f2\u52d2\u65af\uff0c\u4e00\u4f4d\u4e0e\u6492\u65e6\u7b7e\u8ba2\u8840\u5951\u6210\u4e3a\u4e3b\u6559\u7684\u7267\u5e08\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e0e\u9b54\u9b3c\u4ea4\u6613\u5fc5\u987b\u4ee5\u4e66\u9762\u5f62\u5f0f\u8fdb\u884c\u7684\u60f3\u6cd5\u662f\u5982\u6b64\u6839\u6df1\u8482\u56fa\uff0c\u4ee5\u81f3\u4e8e 17 \u81f3 18 \u4e16\u7eaa\u7684\u745e\u5178\u6cd5\u9662\u5728\u6ca1\u6709\u5b9e\u9645\u5408\u540c\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u9a73\u56de\u4e86\u6d89\u5acc\u9b54\u9b3c\u4ea4\u6613\u7684\u6848\u4ef6\u3002\u5728\u6b7b\u4ea1\u7b14\u8bb0\u4e2d\uff0c\u4e3b\u89d2\u53ea\u6709\u5728\u505a\u4e00\u4e2a\u52a8\u4f5c\u540e\u624d\u4f1a\u7b7e\u8ba2\u5951\u7ea6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u6b7b\u4ea1\u7b14\u8bb0\u4e2d\u5199\u4e0b\u53d7\u5bb3\u8005\u7684\u540d\u5b57\u3002\n\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4e0e\u6076\u9b54\u7684\u4ea4\u6613\u53ef\u4ee5\u53e3\u5934\u5b8c\u6210\uff0c\u4f46\u9996\u5148\u9700\u8981\u4e00\u79cd\u7279\u6b8a\u7684\u4eea\u5f0f\u3002\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u5728\u591a\u98ce\u7684\u5341\u5b57\u8def\u53e3\u540c\u610f\u6076\u9b54\u822c\u7684\u4ea4\u6613\u3002\u7b7e\u8ba2\u5951\u7ea6\u7684\u4e00\u79cd\u66f4\u6709\u8da3\u7684\u65b9\u5f0f\u662f\u53d1\u51fa\u4e00\u4e2a\u201c\u63d0\u8bae\u201d\uff0c\u6076\u9b54\u53ef\u4ee5\u63a5\u53d7\u6216\u62d2\u7edd\u3002\u4f8b\u5982\uff0c\u5728\u4e2d\u4e16\u7eaa\u7684\u5fb7\u56fd\u571f\u5730\u4e0a\uff0c\u4e00\u4f4d\u7cbe\u75b2\u529b\u7aed\u7684\u6bcd\u4eb2\u4e3a\u5979\u5e74\u5e7c\u7684\u5a74\u513f\u65e0\u6cd5\u505c\u6b62\u54ed\u6ce3\u800c\u5fc3\u70e6\u610f\u4e71\u3002\u65e0\u5948\u4e4b\u4e0b\uff0c\u5979\u62b1\u8d77\u5b69\u5b50\uff0c\u5c06\u4ed6\u62b1\u51fa\u7a97\u5916\uff0c\u8bf4\uff1a\u201c\u4f60\u518d\u4e0d\u54ed\uff0c\u6211\u8981\u9ed1\u4e00\u5e26\u4f60\u53bb\uff01\u201d\u3002\u5c31\u5728\u8fd9\u65f6\uff0c\u6076\u9b54\u51fa\u73b0\u5728\u7a97\u4e0b\uff0c\u4ece\u5979\u624b\u4e2d\u62a2\u8d70\u4e86\u5a74\u513f\uff0c\u7136\u540e\u9003\u8dd1\u4e86\u3002\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u4f60\u4e0d\u80fd\u4ec5\u4ec5\u901a\u8fc7\u601d\u8003\u6765\u51fa\u5356\u4f60\u7684\u7075\u9b42\u3002\u9b54\u9b3c\u53ef\u80fd\u4e0d\u5728\u4e4e\u5408\u540c\u7684\u5f62\u5f0f\uff0c\u4f46\u4ed6\u786e\u5b9e\u5e0c\u671b\u53ef\u4ee5\u81ea\u7531\u5730\u7ed9\u4e88\u548c\u660e\u786e\u8868\u8fbe\u540c\u610f\uff0c\u65e0\u8bba\u662f\u53e3\u5934\u8fd8\u662f\u4e66\u9762\u3002\u6700\u540e\uff0c\u8fbe\u6210\u4ea4\u6613\u7684\u4e00\u4e2a\u5e38\u89c1\u540e\u679c\u662f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u88ab\u6076\u9b54\u6807\u8bb0\u3002\u4f8b\u5982\uff0c\u8fdb\u5165\u6076\u9b54\u4ea4\u6613\u4f46\u5728\u51fa\u5356\u7075\u9b42\u4e4b\u524d\u7ed3\u675f\u6076\u9b54\u7684\u5973\u5deb\u4f1a\u88ab\u201c\u6807\u8bb0\u201d\u3002\u5728\u7535\u5b50\u6e38\u620f\u300a\u5deb\u5e08 3\u300b\u4e2d\uff0c\u4e3b\u89d2\u5229\u7ef4\u4e9a\u7684\u6770\u6d1b\u7279\u4e0e\u6076\u9b54\u8fbe\u6210\u4ea4\u6613\uff0c\u5e76\u5728\u5951\u7ea6\u5b8c\u6210\u524d\u7559\u4e0b\u4ed6\u7684\u5370\u8bb0\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u79cd\u201c\u5e26\u6709\u9b54\u9b3c\u7684\u5370\u8bb0\u201d\u7684\u8ff7\u4fe1\u5728\u6570\u767e\u5e74\u524d\u66fe\u7ecf\u4ea7\u751f\u8fc7\u4e00\u4e9b\u975e\u5e38\u771f\u5b9e\u7684\u540e\u679c\u3002\u6709\u4e0d\u5bfb\u5e38\u80ce\u8bb0\u6216\u75a4\u75d5\u7684\u4eba\u4f1a\u88ab\u56de\u907f\u3001\u8feb\u5bb3\uff0c\u751a\u81f3\u88ab\u6307\u63a7\u4e3a\u5973\u5deb\u6216\u672f\u58eb\u3002\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u80ce\u8bb0\u751a\u81f3\u5728\u4ee5\u5904\u51b3\u544a\u7ec8\u7684\u730e\u5deb\u548c\u5ba1\u5224\u4e2d\u88ab\u7528\u4f5c\u6709\u6548\u8bc1\u636e\u3002\u65e2\u7136\u6761\u6b3e\u5df2\u7ecf\u8fbe\u6210\u4e00\u81f4\uff0c\u8840\u4e5f\u5e72\u4e86\uff0c\u4f60\u5bf9\u4f60\u4e0e\u6492\u65e6\u5148\u751f\u7684\u65b0\u5de5\u4f5c\u5173\u7cfb\u6709\u4ec0\u4e48\u671f\u5f85\uff1f\u4e00\u822c\u6765\u8bf4\uff0c\u6076\u9b54\u5c0a\u91cd\u5951\u7ea6\u7684\u6587\u5b57\uff0c\u800c\u4e0d\u662f\u5b83\u7684\u7cbe\u795e\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u6709\u821e\u8e48\u5929\u8d4b\u7684\u5973\u5b69\u5728\u805a\u4f1a\u4e0a\u8bf4\uff1a\u201c\u5982\u679c\u9b54\u9b3c\u8981\u6211\u8df3\u821e\uff0c\u6211\u4e0d\u4f1a\u62d2\u7edd\u4ed6\uff01\u201d\u3002\u8bf4\u5b8c\uff0c\u9b54\u738b\u4f2a\u88c5\u6210\u4fca\u7537\u9753\u5973\uff0c\u8d70\u8fdb\u821e\u5385\uff0c\u4e0e\u5979\u5171\u821e\uff0c\u76f4\u5230\u5979\u7cbe\u75b2\u529b\u7aed\u800c\u6b7b\u3002\u663e\u7136\uff0c\u5979\u7684\u610f\u601d\u662f\u4f5c\u4e3a\u6bd4\u55bb\u7684\u610f\u601d\uff0c\u4f46\u6076\u9b54\u5374\u628a\u5979\u653e\u5728\u4e86\u5951\u7ea6\u7684\u5b57\u9762\u4e0a\u3002\u4ece\u66f4\u79ef\u6781\u7684\u65b9\u9762\u6765\u8bf4\uff0cDevils \u662f\u51fa\u5947\u7684\u597d\u5408\u540c\u4f19\u4f34\u3002\u4ed6\u4eec\u59cb\u7ec8\u5c0a\u91cd\u5408\u540c\uff0c\u5e76\u575a\u6301\u81ea\u5df1\u7684\u90a3\u90e8\u5206\u4ea4\u6613\u3002\u5982\u679c\u4ed6\u4eec\u8bb8\u8bfa\u7ed9\u4f60\u8d22\u5bcc\u3001\u540d\u8a89\u548c\u77e5\u8bc6\uff0c\u90a3\u5c31\u662f\u4f60\u4f1a\u5f97\u5230\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6076\u9b54\u5c0a\u91cd\u5408\u540c\u7684\u8fd9\u79cd\u503e\u5411\u751a\u81f3\u4e3a\u806a\u660e\u4eba\u63d0\u4f9b\u4e86\u4e00\u79cd\u6253\u7834\u4ea4\u6613\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u8feb\u4f7f\u6076\u9b54\u5c0a\u91cd\u5408\u540c\u7684\u6587\u5b57\uff08\u800c\u4e0d\u662f\u7cbe\u795e\uff09\u3002\n\u4f8b\u5982\uff0c\u66fe\u7ecf\u6709\u4e00\u4f4d\u7267\u5e08\u8981\u6c42\u9b54\u9b3c\u5728\u6cb3\u4e0a\u5efa\u4e00\u5ea7\u6865\uff0c\u4ee5\u6362\u53d6\u7b2c\u4e00\u4e2a\u8fc7\u6865\u8005\u7684\u7075\u9b42\u3002\u9b54\u9b3c\u575a\u6301\u81ea\u5df1\u7684\u7acb\u573a\u5e76\u5efa\u9020\u4e86\u6865\u6881\uff0c\u4f46\u7267\u5e08\u968f\u540e\u6d3e\u4e86\u4e00\u53ea\u72d7\u7b2c\u4e00\u4e2a\u7a7f\u8fc7\u5b83\u3002\u6076\u9b54\u610f\u8bc6\u5230\u81ea\u5df1\u88ab\u9a97\u4e86\uff0c\u5c31\u628a\u72d7\u6254\u5230\u6865\u4e0a\u4f5c\u4e3a\u5b89\u6170\u5956\u3002\u5728\u53e6\u4e00\u4e2a\u6545\u4e8b\u4e2d\uff0c\u7ef4\u6ed5\u8d1d\u683c\u9ed1\u4eba\u5b66\u6821\u7684\u5b66\u751f\u7528\u9ed1\u9b54\u6cd5\u8bc5\u5492\u4e86\u4ed6\u4eec\u7684\u6559\u5ba4\uff0c\u4ee5\u81f3\u4e8e\u6700\u540e\u4e00\u4e2a\u79bb\u5f00\u7684\u4eba\u4e0d\u5f97\u4e0d\u5c06\u81ea\u5df1\u7684\u7075\u9b42\u4ea4\u7ed9\u9b54\u9b3c\u3002\u4e3a\u4e86\u6446\u8131\u8fd9\u79cd\u547d\u8fd0\uff0c\u6700\u540e\u4e00\u4e2a\u5b66\u751f\u6210\u529f\u5730\u4e0e\u6076\u9b54\u4e89\u8fa9\u8bf4\uff0c\u4ed6\u7684\u5f71\u5b50\u662f\u6700\u540e\u4e00\u4e2a\u79bb\u5f00\u623f\u95f4\u7684\uff0c\u56e0\u6b64\u6076\u9b54\u5e94\u8be5\u7a83\u53d6\u5b83\u7684\u7075\u9b42\u3002\u8fd9\u5c31\u5f15\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u4e00\u4e2a\u62e5\u6709\u5982\u6b64\u5f3a\u5927\u795e\u529b\u7684\u751f\u7269\u4f1a\u5982\u6b64\u8f7b\u6613\u5730\u88ab\u5951\u7ea6\u6240\u6b3a\u9a97\uff1f\u7b54\u6848\u90e8\u5206\u662f\u9053\u5fb7\u7684\uff0c\u90e8\u5206\u662f\u5b9e\u9645\u7684\uff1a\u65e0\u8bba\u4f60\u72af\u4e86\u591a\u5927\u7684\u9519\u8bef\uff0c\u806a\u660e\u90fd\u53ef\u4ee5\u89e3\u51b3\u5b83\u3002\u5982\u679c\u90a3\u4e0d\u8d77\u4f5c\u7528\uff0c\u90a3\u4e48\u53bb\u6559\u5802\u5bfb\u6c42\u6551\u8d4e\u3002\u6216\u8bb8\u771f\u4eba\u4e0e\u9b54\u9b3c\u8ba8\u4ef7\u8fd8\u4ef7\u7684\u6700\u6709\u8da3\u6545\u4e8b\u4e4b\u4e00\u662f\u5c3c\u53ef\u7f57\u00b7\u5e15\u683c\u5c3c\u5c3c (Niccol\u00f2 Paganini) \u7684\u6545\u4e8b\uff0c\u4ed6\u662f\u6709\u53f2\u4ee5\u6765\u6700\u8457\u540d\u7684\u5c0f\u63d0\u7434\u5bb6\u548c\u4f5c\u66f2\u5bb6\u4e4b\u4e00\u3002\u4eba\u4eec\u731c\u6d4b\u4ed6\u7684\u5c0f\u63d0\u7434\u8fd1\u4e4e\u8d85\u81ea\u7136\u7684\u5929\u8d4b\u662f\u4e0e\u9b54\u9b3c\u4ea4\u6613\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u79cd\u731c\u6d4b\u88ab\u8fdb\u4e00\u6b65\u5938\u5927\u4e86\uff0c\u56e0\u4e3a\u5e15\u683c\u5c3c\u5c3c\u65e2\u6ca1\u6709\u8bc1\u5b9e\u4e5f\u6ca1\u6709\u5426\u8ba4\u4f20\u95fb\u3002\u5982\u679c\u5e15\u683c\u5c3c\u5c3c\u771f\u7684\u5411\u9b54\u9b3c\u8981\u6c42\u97f3\u4e50\u80fd\u529b\uff0c\u90a3\u4e5f\u662f\u4ed8\u51fa\u4e86\u6c89\u91cd\u4ee3\u4ef7\u7684\u3002\u4ed6\u7684\u4e00\u751f\u90fd\u88ab\u6162\u6027\u75c5\u3001\u5bf9\u8d4c\u535a\u7684\u70ed\u7231\u3001\u5728\u4ed6\u751f\u547d\u5373\u5c06\u7ed3\u675f\u65f6\u7684\u8d22\u52a1\u7834\u4ea7\u4ee5\u53ca\u6559\u4f1a\u62d2\u7edd\u5728\u4ed6\u53bb\u4e16\u591a\u5e74\u540e\u63d0\u4f9b\u9002\u5f53\u7684\u846c\u793c\u6240\u6bc1\u574f\u3002\u7ea6\u7ff0\u00b7\u6c83\u5c14\u592b\u5188\u00b7\u51af\u00b7\u6b4c\u5fb7\u7684\u53f2\u8bd7\u300a\u6d6e\u58eb\u5fb7\u300b\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7 Audible \u514d\u8d39\u8bd5\u7528\u7248\u514d\u8d39\u83b7\u5f97\u6709\u58f0\u8bfb\u7269\u7248\u672c\u3002\u7075\u611f\u6765\u81ea\u4e00\u4e2a\u771f\u5b9e\u7684\u6545\u4e8b\u3002\n\u636e\u82f1\u56fd\u4eba\u8bf4\uff0c\u5723\u5973\u8d1e\u5fb7\u4e0e\u9b54\u9b3c\u6709\u5de5\u4f5c\u5173\u7cfb\u3002\u743c\u662f\u767e\u5e74\u6218\u4e89\u4e2d\u7ad9\u5728\u6cd5\u56fd\u4e00\u65b9\u7684\u519b\u4e8b\u6307\u6325\u5b98\uff0c\u5e76\u56e0\u58f0\u79f0\u62e5\u6709\u5e26\u9886\u5979\u53c2\u52a0\u6218\u6597\u7684\u795e\u5723\u5f02\u8c61\u800c\u58f0\u540d\u9e4a\u8d77\u3002\u6700\u7ec8\uff0c\u82f1\u56fd\u4eba\u6293\u4f4f\u4e86\u743c\u5e76\u4ee5\u5f02\u7aef\u7f6a\u540d\u5ba1\u5224\u5979\uff0c\u8ba4\u4e3a\u5979\u7684\u5f02\u8c61\u53ef\u80fd\u662f\u7531\u6076\u9b54\u800c\u4e0d\u662f\u4e0a\u5e1d\u6216\u5929\u4f7f\u9020\u6210\u7684\u3002\u5982\u679c\u4f60\u60f3\u51fa\u5356\u4f60\u7684\u7075\u9b42\uff0c\u5f88\u6709\u53ef\u80fd\u4f60\u65e0\u6cd5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u5f0f\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6700\u6709\u53ef\u80fd\u7684\u662f\uff0c\u5373\u4f7f\u662f\u6700\u5351\u5fae\u7684\u6076\u9b54\uff0c\u4f60\u4e5f\u65e0\u6cd5\u5f15\u8d77\u6ce8\u610f\u3002\u5728\u54f2\u5b66\u5c42\u9762\u4e0a\uff0c\u7b80\u5355\u5730\u4e0e\u9b54\u9b3c\u804a\u5929\u662f\u4e00\u79cd\u77e5\u8bc6\u7684\u795d\u798f\u3002\u8a00\u5916\u4e4b\u610f\uff0c\u5982\u679c\u9b54\u9b3c\u5b58\u5728\uff0c\u90a3\u4e48\u4e0a\u5e1d\u4e00\u5b9a\u5b58\u5728\u3002\u5982\u679c\u4e0a\u5e1d\u5b58\u5728\uff0c\u90a3\u4e48\u4e00\u5207\u90fd\u6709\u4e00\u4e2a\u76ee\u7684\uff0c\u65e0\u8bba\u662f\u5728\u751f\u6d3b\u4e2d\u8fd8\u662f\u5728\u6765\u4e16\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u662f\u4e00\u4e2a\u575a\u5b9a\u7684\u4fe1\u5f92\uff0c\u8fd9\u4e0d\u4f1a\u8ba9\u4f60\u611f\u5230\u9707\u60ca\uff0c\u800c\u53ea\u662f\u575a\u5b9a\u4e86\u4fe1\u4ef0\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u65e0\u795e\u8bba\u8005\uff0c\u90a3\u4e48\u8fd9\u79cd\u7ecf\u5386\u4f1a\u98a0\u8986\u4f60\u7684\u751f\u6d3b\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u867d\u7136\u4f60\u4e0d\u80fd\u5728\u771f\u6b63\u7684\u4ea4\u6613\u4e2d\u5c06\u4f60\u7684\u7075\u9b42\u51fa\u5356\u7ed9\u9b54\u9b3c\uff0c\u4f46\u4f60\u53ef\u4ee5\u5728\u9690\u55bb\u5c42\u9762\u4e0a\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6bcf\u5f53\u6709\u4eba\u613f\u610f\u5ffd\u89c6\u4ed6\u4eec\u7684\u4eba\u6027\u548c\u4f53\u9762\u4ee5\u6362\u53d6\u5916\u5728\u8bf1\u60d1\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff1a\u6743\u529b\u3001\u91d1\u94b1\u3001\u540d\u671b\u7b49\u3002\u6709\u65f6\u751a\u81f3\u4e0d\u5fc5\u662f\u5916\u5728\u7684\u4e50\u8da3\u3002\u4e3a\u4e86\u62a5\u590d\u3001\u6ee1\u8db3\u9a84\u50b2\u6216\u5ac9\u5992\u800c\u5ffd\u89c6\u57fa\u672c\u7684\u4eba\u7c7b\u539f\u5219\u4f1a\u5bfc\u81f4\u540c\u6837\u7684\u9053\u8def\u3002\n\u6839\u636e\u4f60\u5bf9\u6076\u9b54\u662f\u4ec0\u4e48\u7684\u7406\u89e3\uff0c\u90a3\u4e48\u53ef\u4ee5\u8bf4\u4e16\u754c\u4e0a\u6240\u6709\u7684\u90aa\u6076\u90fd\u662f\u901a\u8fc7\u4e0e\u6076\u9b54\u7684\u4ea4\u6613\u5e26\u6765\u7684\u3002", "note_en": "Selling your soul has never been easier. Today, there are plenty of demonology books that teach you how to bargain with Lucifer, written by authors who have probably done this themselves on multiple occasions.\n But perhaps this is the problem. With this much information available, it\u2019s hard to know where to start. Does Satan accept your soul through Amazon delivery, or must it be done in person? Do you need a written contract, or is it enough to shake hand-with-hoof?\n     First of all, why does Lucifer, Satan or any devil, want your soul? What would a demon gain from obtaining your soul?\n In Christian mythology, the fallen angel Lucifer wants to sabotage God at every step, and one way to do so is to interfere in God\u2019s plans through His own creations \u2013 humans.\n The logic being that if you don\u2019t have immortality, immeasurable wealth, or power, then God has other plans for you. By doing a deal with the devil to get these, you give the devil an opening to interfere with God\u2019s carefully laid plans.\n Another version is that God and Satan are in the midst of a fierce good vs. evil battle, where souls are the \u201ccurrency\u201d they fight for.\n In other understandings of Christianity, devils and demons aren\u2019t directly in a fight with the forces of Good. They are more like seducers, approaching people at their weakest and offer quick solutions for hard problems, at the cost of morality and sense of self.\n Finally, many demons and devils want to obtain a person\u2019s soul for no particular reason, other than the challenge and satisfaction of knowing they \u201cgot it\u201d.\n An example of this is from the poem Faust, where God makes a bet with Mephistopheles that the demon can\u2019t obtain the soul of the human Faust, no matter how much the demon tries.\n Some demons want souls to improve their power and position within the demon reals. Demons have a hierarchy too and capitalism is its own kind of hell, even in real Hell.\n  Let\u2019s assume you\u2019ve struck a deal with the devil, and have all the riches, wealth and power you ever want for the remainder of your mortal life.\n Some time later, you\u2019re on your deathbed and Lucifer\u2019s coming to collect your soul, as you bargained so many years ago.\n  Well, your soul now belongs to Mr. Lucifer and he can do with it whatever he pleases. He could turn you into a footrest for when he\u2019s sitting on a couch, or torture you for eternity with hellfire.\n If you subscribe to the theory that you can\u2019t sell your soul because it\u2019s not actually yours, but belongs to God, then there\u2019s reason for optimism. In this case, selling your soul is just a sin, a pretty bad one, but still a sin. In Catholicism and some Protestant traditions, you will enter into a state of Purgatory, (or purgatory-like phase) after death where you are cleansed of sins. This could potentially take a while.\n An interesting consequence to selling your soul is in the animated series Death Note, which is set in Japan and inspired by Japanese folklore and Buddhism. A Shinigami (Japanese devil) offers the main character a Death Note \u2013 a book which kills any person whose name is written in it.\n The owner of a Death Note can use it however they wish. The cost is that whoever uses the Death Note will be denied access to Heaven, and be a condemned to an afterlife of pure, eternal darkness and emptiness.\n  So, you\u2019ve now made an informed decision that selling your soul is actually a pretty sweet deal. But how exactly do you start this business transaction?\n First, you will need to decide which demon or devil you want to bargain with. Chances are you\u2019re not important enough to sell your soul to Big Lucifer or Satan himself (sorry, but he\u2019s pretty busy), so you\u2019ll likely have to settle for other, lesser demons:\n Summon  Paimon If you seek knowledge of sciences, philosophies and learn the mysteries of the Earth.\n  Summon  Purson if you seek to learn the mysteries of the universe, how and why the world was created.\n If neither of these demons seem quite right choice, consider reading  The Dictionary of Demons by M. Belanger, which is free on an Audible trial.\n Next comes the actual summoning ritual, where you call upon the devil or demon of your choice and begin bargaining your soul away.\n The  traditional method of summoning demons involves drawing the sigil of your desired demon on the ground. If your summoning ritual is successful the demon will be conjured on the location of the sigil and be unable to move away from it. They are constrained to that particular location, and cannot affect anything beyond it.\n  Besides the sigil, you might also want a ring of protection for you to sit in. This ring will shield you from the demon if the summoning was botched or if the demon\u2019s aggressive and angry at being called.\n In  non-traditional versions, there is no demon summoning process involved. Instead, the demon itself will sense when you are vulnerable to evil temptation and appear seemingly out of nowhere and slowly initiate the bargaining process.\n As an example, the Shinigami in Death Note simply dropped the cursed notebook from the sky right in front of the main character as he was walking around university campus.\n In the poem Faust, the demon Mephistopheles took the form of a stray poodle dog and followed Faust home. Once in Faust\u2019s study room, Mephistopheles shapeshifted back into his demon form and began bargaining with Faust.\n But demons don\u2019t only appear when you are vulnerable to evil. They  may approach when you\u2019re about to do something truly good and virtuous, and try to prevent you from completing the task. An example of this is when Satan himself tried to tempt Jesus away from his mission, or when he tried to stop Martin Luther from translating the Bible into German.\n  The traditional look of demons is familiar to most: they are hooved creatures, have horns, lizard scales, sometimes wings, breathe fire through animal-likes noses, have a tail with an arrow tip etc. Are fierce, ferocious and intimidating.\n   That version of demons arose in the Late Middle Ages, and was mostly a creation of the Christian Church of the time. Up until then, Lucifer-as-demon depictions were surprisingly similar to normal angels.\n  This 6 th century mosaic in the Basilica of Sant\u2019Apollinare Nuovo, Ravenna, Italy, shows an angel dressed in red, and Lucifer dressed in blue.\n The reason for the change is that the Church wanted to associate sins with the Devil, and then made the Devil look like a hideous beast. As such, it creates an association that sinning turns sinners into monsters.\n  Not necessarily. Modern depictions of demons emphasize that demons can take any shape or form.\n As an example, the demon in the 1997 film  The Devil\u2019s Advocate looks identical to Al Pacino.\n  In the film  The VVitch, the demon is an actual goat. In the poem  Faust, Mephistopheles first takes the shape of a poodle dog, and then that of a human.\n The idea is that Satan and demons in general can take any shape necessary to convince you to fall into temptation. It makes sense after all, why would a demon take the shape of a scary beast if it wants to convince you to sell your soul?\n  So, you\u2019ve now successfully summoned the demon, bargained and agreed on the terms and conditions of selling your soul and what you get in return.\n How do you make good on your agreement? Do you shake hands (or hooves)? Write a demon pact? Sign a contract in blood?\n Well, you\u2019ll be surprised to know that Satan and every other devil isn\u2019t that big on bureaucracy and paperwork. In general, it\u2019s humans that require more formal contracts.\n The traditional version requires a contract signed with the blood of the person. An example of this is Theophilus of Adana, a priest who entered a blood pact with Satan to become a Bishop.\n In fact, the idea that deals with the devil had to be done in written forms was so entrenched, that Swedish courts in the 17 th-18 th century outright dismissed suspected cases of devil dealing if there wasn\u2019t an actual contract involved.\n  In  Death Note, the main character only enters a pact after doing an action, in this case writing a victim\u2019s name in the Death Note.\n  In many cases, deals with demons can be done verbally, but require a special kind of ritual first. An example of this is agreeing to a demonic deal at a windy crossroads.\n A more interesting way of entering a pact, is by sending out an \u201coffer\u201d, that the demon can accept or refuse.\n For instance, in a medieval German land, an exhausted mother was upset her young baby couldn\u2019t stop crying. Out of frustration, she lifted her baby, held him out the window, and said \u201cIf you don\u2019t stop crying, I want the Black One to take you!\u201d. At that moment, the devil appeared under the window, snatched the baby from her, and ran away.\n  The answer is no, you cannot sell your soul just by thinking it. The devil may not care about the form of the contract, but he does want the consent to be freely given and clearly expressed, either verbally or written.\n Finally, a common consequence of entering a deal is being marked by the demon, in one way or another.\n As an example, witches that entered deals with demons but end them before selling their souls become \u201cmarked\u201d.\n In the video game Witcher 3, the main character Geralt of Rivia enters a deal with a devil, and bears his mark until the contract is completed.\n  Unfortunately, this superstition of \u201cbearing the mark of the devil\u201d used to have some very real consequences hundreds of years back. People with unusual birth marks or scars were shunned, persecuted or even accused of being witches or warlocks.\n In the worst-case scenario, these birth marks were even used as valid proof during witch hunts and trials that ended in executions.\n  Now that the terms have been agreed, and the blood has dried, what can you expect from your new working relationship with Mr. Satan?\n Generally, demons respect the letter of a contract, and not its spirit. As an example, a girl with a talent for dancing says at a party: \u201cand if the Devil himself should ask me to dance, I would not turn him down!\u201d. After that is said, the Devil himself, disguised as a handsome man, entered the ballroom and danced with her until she died of exhaustion.\n Obviously, she meant the words as a figure of speech, but the demon held her to the letter of the contract.\n On a more positive note, Devils are surprisingly good contract partners. They always respect the contract to the letter and uphold their part of the bargain. If they promised you wealth, fame and knowledge, that\u2019s what you\u2019ll get.\n In fact, this tendency of demons to respect contracts to the letter even offers clever people a way to break the deal, by forcing the demon to respect the letter (and not the spirit) of the contract.\n For example, a priest once asked the devil to build a bridge over a river, in exchange for the soul of the first one to cross the bridge. The devil upholds his side of the bargain and builds the bridge, but the priest then sends a dog to be the first one to cross it. Realizing he was tricked, the demon throws the dog over the bridge as a consolation prize.\n In another story, the students at the Black School of Wittenberg cursed their classroom with black magic, so that the last one to leave has to give his soul to the Devil. To escape this fate, the last student successfully argues with the demon that his shadow is the last one to leave the room, and thus the demon should steal its soul instead.\n This begs the question, why would a being of such great supernatural power be so easily duped out of a contract? The answer is partly moral, partly practical in nature: no matter how big a mistake you make, being smart can fix it. If that doesn\u2019t work, then go to the Church and ask for redemption.\n   Perhaps one of the most interesting stories of real people bargaining with the devil is that of Niccol\u00f2 Paganini, one of the most famous violinists and composers of all time.\n People speculated that his near supernatural talent with the violin came about as part of a deal with the devil. This speculation was further blown out of proportion because Paganini neither confirmed nor denied the rumors.\n If Paganini did ask the devil for musical ability, it came at a heavy cost. His entire life was marred by chronic illnesses, love of gambling, financial ruin near the end of his days and the Church refusing to provide a proper funeral until many years after his death.\n  The epic poem  Faust by Johann Wolfgang von Goethe. You can acquire the audiobook version for free with Audible\u2019s free trial. Inspired by a real story.\n  Joan of Arc had a working relationship with the devil, according to the English. Joan was a military commander on the side of the French in the Hundred Years War, and rose to fame because she claimed to have divine visions that lead her into battle. Eventually, the English captured Joan and put her on trial for heresy, believing her visions may have been caused by demons, instead of God or angels.\n  If you want to sell your soul, chances are very high you won\u2019t be able to do so in the ways described above. Most likely, you won\u2019t even be able to catch the attention of even the lowliest of demons.\n On a philosophical level, simply chatting with the devil is a blessing of knowledge. By implication, if the devil exist, then God must exist. If God exists, then everything has a purpose, both in life and in afterlife.\n If you\u2019re already a strong believer this will not come as a shock to you, just a strengthening of the faith. If you are an atheist, then this is the sort of experience that turns a life upside down.\n That being said, while you can\u2019t sell your soul to the devil in a real transaction, you can do so at metaphorical level.\n This happens every time someone is willing to overlook their humanity and decency in exchange for external temptations: power, money, fame etc.\n Sometimes it doesn\u2019t even have to be external pleasures. Ignoring basic human principles in order to obtain revenge, satisfy pride or envy can lead down the same path.\n Depending on your understanding of what a demon is, then it can be argued all evil present in the world has been brought upon through deals with the devil.", "posttime": "2021-08-01 23:15:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7075\u9b42,sell,\u6076\u9b54", "title": "\u5982\u4f55\u53ec\u5524\u4f60\u7684\u7075\u9b42\u5e76\u5c06\u4f60\u7684\u7075\u9b42\u5356\u7ed9\u6492\u65e6\u548c\u5176\u4ed6\u6076\u9b54", "title_en": "How to summon and sell your soul to Satan and other devils", "transed": 1, "url": "https://hastyreader.com/how-to-summon-and-sell-your-soul-to-satan-and-other-devils/", "via": "", "real_tags": ["\u7075\u9b42", "sell", "\u6076\u9b54"]}, {"category": "", "categoryclass": "", "imagename": "f73c65519e29cccb6f98def374ee4273.jpg", "infoid": 1071006, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u95ed\u4e0a\u4f60\u7684\u773c\u775b\uff0c\u6df1\u547c\u5438\uff0c\u4e0d\u8981\u671f\u5f85\u6253\u5370\u673a\u201c\u6b63\u5e38\u5de5\u4f5c\u201d\uff0c\u56e0\u4e3a\u8fd9\u5728\u4e00\u4e2a\u89e6\u6478\u5c4f\u8d85\u7ea7\u8ba1\u7b97\u673a\u53ef\u4ee5\u653e\u5728\u4f60\u7684\u886c\u886b\u53e3\u888b\u91cc\u7684\u4e16\u754c\u91cc\u662f\u6709\u610f\u4e49\u7684\u3002\u5c31\u50cf\u751f\u6d3b\u4e2d\u5927\u591a\u6570\u4f60\u65e0\u6cd5\u63a7\u5236\u7684\u4e8b\u60c5\u4e00\u6837\uff0c\u5982\u679c\u4f60\u63a5\u53d7\u6253\u5370\u673a\uff0c\u56e0\u4e3a\u5b83\u4eec\u771f\u7684\u5f88\u5783\u573e\u3002\u4f60\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u90fd\u4f1a\u8ba8\u538c\u8d2d\u4e70\u7684\u4efb\u4f55\u6253\u5370\u673a\uff0c\u5bf9\u6b64\u60a8\u65e0\u80fd\u4e3a\u529b\u3002\u4e0e\u5176\u4e0e\u4e4b\u6297\u4e89\uff0c\u4e0d\u5982\u5c1d\u8bd5\u5728\u60a8\u7684\u8111\u6d77\u4e2d\u91cd\u65b0\u5b9a\u4e49\u8fd9\u4e2a\u95ee\u9898\uff1a\u60a8\u8d2d\u4e70\u6253\u5370\u673a\u5e76\u4e0d\u662f\u56e0\u4e3a\u60a8\u5e94\u8be5\u5728\u5bb6\u4e2d\u62e5\u6709\u4e00\u53f0\u3002\u60a8\u8d2d\u4e70\u6253\u5370\u673a\u662f\u56e0\u4e3a\u5b83\uff08\u51e0\u4e4e\uff09\u6bd4\u53bb\u590d\u5370\u4e2d\u5fc3\u4e0d\u65b9\u4fbf\u3002\u611f\u89c9\u58a8\u6c34\u6216\u78b3\u7c89\u7ecf\u5e38\u9700\u8981\u66f4\u6362\u5e76\u4e14\u5728\u6700\u7cdf\u7cd5\u7684\u65f6\u5019\u4f3c\u4e4e\u603b\u662f\u7528\u5b8c \u8fc7\u65f6\u7684\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u66f4\u65b0\uff0c\u5e76\u4e14\u4f3c\u4e4e\u5728\u60a8\u66f4\u65b0\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u65f6\u6d88\u5931 \u4e00\u4e2a\u795e\u79d8\u7684\u754c\u9762\u4f7f\u5b83\u6ca1\u6709\u5ba2\u6237\u652f\u6301\u7684\u5e2e\u52a9\uff0c\u51e0\u4e4e\u4e0d\u53ef\u80fd\u89e3\u51b3\u95ee\u9898 \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u65e0\u6cd5\u89e3\u51b3\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u3002\u4f46\u662f\u6211\u4eec\u591a\u5e74\u5904\u7406\u8fd9\u4e9b\u660e\u663e\u5783\u573e\u7bb1\u7684\u7ecf\u9a8c\u8ba9\u6211\u4eec\u66f4\u597d\u5730\u7406\u89e3\u4e86\u5b83\u4eec\u5b58\u5728\u7684\u539f\u56e0\u3002\u4ee5\u4e0b\u662f\u60a8\u53ef\u80fd\u4ece\u672a\u8003\u8651\u8fc7\u7684\u5176\u4ed6\u4e00\u4e9b\u666e\u904d\u4e8b\u5b9e\uff08\u6216\u8005\u5f53\u60a8\u60f3\u5bf9\u6253\u5370\u673a\u53d1\u813e\u6c14\u65f6\u53ef\u4ee5\u968f\u610f\u5ffd\u7565\uff09\u3002\u5047\u8bbe\u8fd9\u4e9b\u9002\u7528\u4e8e\u6240\u6709\u5236\u9020\u5546\u7684\u6240\u6709\u6253\u5370\u673a\uff0c\u9664\u975e\u6211\u4eec\u53e6\u6709\u8bf4\u660e\uff1a\u60a8\u7684\u6253\u5370\u673a\u7684\u4ef7\u503c\u8fdc\u9ad8\u4e8e\u60a8\u652f\u4ed8\u7684\u4ef7\u683c\u3002\u8bf4\u771f\u7684\uff0c\u60a8\u7684\u6253\u5370\u673a\u4e2d\u6709\u4e00\u4e9b\u975e\u5e38\u590d\u6742\u7684\u6280\u672f\uff0c\u5305\u62ec\u6253\u5370\u5934\u3001\u58a8\u6c34\u548c\u6620\u5c04\u8f6f\u4ef6\u3002\u4f60\u8ba4\u4e3a\u4f60\u7684\u6253\u5370\u673a\u662f\u7406\u6240\u5f53\u7136\u7684\uff0c\u4f46\u90a3\u4e2a\u76d2\u5b50\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u5185\u7528\u6570\u767e\u4e07\u4e2a\u7cbe\u786e\u5b9a\u4f4d\u3001\u989c\u8272\u5339\u914d\u7684\u58a8\u6c34\u8986\u76d6\u4e00\u5f20\u7eb8\u3002\u60a8\u53ef\u80fd\u662f\u4e3a\u4e86\u96f6\u4ef6\u548c\u5206\u9500\u6210\u672c\u800c\u8d2d\u4e70\u6253\u5370\u673a\uff0c\u8fd9\u610f\u5473\u7740\u5236\u9020\u5546\u6b63\u5728\u6709\u6548\u5730\u8865\u8d34\u8fd9\u4ef6\u4e8b\uff0c\u524d\u63d0\u662f\u4ed6\u4eec\u5c06\u4ece\u60a8\u8d2d\u4e70\u7684\u58a8\u6c34\u4e2d\u6536\u56de\u4ed6\u4eec\u7684\u7814\u53d1\u6210\u672c\uff08\u4ee5\u53ca\u5176\u4f59\u7684\u5f00\u9500\uff09\u3002\n\u5982\u679c\u60a8\u4f7f\u7528\u4eff\u5192\u58a8\u76d2\uff0c\u60a8\u4e0d\u5e94\u671f\u671b\u83b7\u5f97\u826f\u597d\u7684\u4f53\u9a8c\u3002\u770b\u4e0a\u9762\u3002\u7814\u53d1\u7684\u4e00\u90e8\u5206\u662f\u8bbe\u8ba1\u58a8\u6c34\uff0c\u4f7f\u5176\u5177\u6709\u4e0e\u6253\u5370\u5934\u914d\u5408\u4f7f\u7528\u7684\u6b63\u786e\u7269\u7406\u7279\u6027\u3002\u4eff\u5192\u6cb9\u58a8\u53ef\u80fd\u4e0d\u5177\u5907\u8fd9\u4e9b\u7279\u6027\uff0c\u56e0\u6b64\u53ef\u80fd\u65e0\u6cd5\u5f88\u597d\u5730\u53d1\u6325\u4f5c\u7528\u3002\u6b64\u5916\uff0c\u6b63\u5982\u6211\u4eec\u6700\u8fd1\u4e86\u89e3\u5230\u7684\uff0c\u5927\u591a\u6570\u4e3a\u5bb6\u5ead\u4f7f\u7528\u800c\u8bbe\u8ba1\u7684\u55b7\u58a8\u6253\u5370\u673a\u5b9e\u9645\u4e0a\u90fd\u5c06\u6253\u5370\u5934\u5185\u7f6e\u5728\u58a8\u76d2\u4e2d\u3002\u5927\u591a\u6570\u5ec9\u4ef7\u6253\u5370\u673a\u90fd\u6ca1\u6709\u6c38\u4e45\u6027\u6253\u5370\u5934\u3002\u6240\u4ee5\u4f60\u53ef\u80fd\u4f1a\u4e70\u5e9f\u58a8\u6c34\u548c\u5e9f\u6253\u5370\u5934\u3002\u800c\u4e14\uff0c\u5982\u679c\u60a8\u5c1d\u8bd5\u7528\u4eff\u5192\u58a8\u6c34\u91cd\u65b0\u586b\u5145\u539f\u88c5\u58a8\u76d2\uff0c\u60a8\u53ef\u80fd\u4f1a\u5c06\u52a3\u8d28\u58a8\u6c34\u653e\u5165\u6253\u5370\u5934\u70e7\u574f\u7684\u5bb9\u5668\u4e2d\u3002\u53e6\u5916\uff0c\u56de\u5230\u8865\u8d34\u7684\u4e8b\u60c5\u4e0a\u3002\u6211\u4eec\u5df2\u7ecf\u8bfb\u5230\uff0c\u5982\u679c\u60a8\u5c1d\u8bd5\u4f7f\u7528\u7b2c\u4e09\u65b9\u58a8\u76d2\uff0c\u4e00\u4e9b\u5236\u9020\u5546\u6545\u610f\u5c06\u4ed6\u4eec\u7684\u6253\u5370\u673a\u8bbe\u8ba1\u4e3a\u57fa\u672c\u4e0a\u5173\u95ed\u3002\u4f60\u53ef\u80fd\u4e0d\u559c\u6b22\u5b83\uff0c\u4f46\u4ece\u4ed6\u4eec\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4ed6\u4eec\u6b63\u5728\u4fdd\u62a4\u4ed6\u4eec\u5bf9\u201c\u58a8\u6c34\u671f\u8d27\u201d\u7684\u6295\u8d44\uff0c\u8fd9\u8865\u8d34\u4e86\u4ed6\u4eec\u975e\u5e38\u4fbf\u5b9c\u7684\u786c\u4ef6\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4eff\u5192\u7852\u9f13\u6ca1\u95ee\u9898\uff01\u78b3\u7c89\u53ea\u662f\u4e00\u79cd\u5e26\u9759\u7535\u7684\u7c89\u672b\uff08\u90e8\u5206\u662f\u805a\u5408\u7269\uff0c\u90e8\u5206\u662f\u78b3\uff09\uff0c\u800c\u58a8\u76d2\u672c\u8eab\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5851\u6599\u5bb9\u5668\u3002\u6ca1\u6709\u82b1\u54e8\u7684\u6253\u5370\u5934\u6216\u7535\u8def\u3002\u5236\u9020\u5546\u4e0d\u4f1a\u52aa\u529b\u4fdd\u62a4\u7852\u9f13\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4e1c\u897f\u6ca1\u6709\u5f88\u591a\u77e5\u8bc6\u4ea7\u6743\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u503e\u5411\u4e8e\u5bf9\u6253\u5370\u673a\u672c\u8eab\u6536\u53d6\u66f4\u9ad8\u7684\u52a0\u4ef7\uff0c\u4ee5\u5f25\u8865\u66f4\u4fbf\u5b9c\u7684\u78b3\u7c89\u6210\u672c\u3002\u5982\u679c\u7f3a\u5c11\u58a8\u76d2\uff0c\u60a8\u4e0d\u5e94\u8be5\u671f\u671b\u60a8\u7684\u6253\u5370\u673a\u80fd\u591f\u6253\u5370\uff0c\u5b83\u751a\u81f3\u53ef\u80fd\u65e0\u6cd5\u626b\u63cf\u3002\u4e00\u4e9b\u6a21\u578b\u4ecd\u7136\u4f1a\u505a\u4e00\u4e2a\u6216\u4e24\u4e2a\uff0c\u8bb8\u591a\u4e0d\u4f1a\u3002\u662f\u7684\uff0c\u5f53\u4ed6\u4eec\u91c7\u7528\u8fd9\u79cd\u5373\u65f6\u4ea4\u4ed8\u7684\u58a8\u6c34\u7ba1\u7406\u65b9\u5f0f\u65f6\uff0c\u611f\u89c9\u5c31\u50cf\u662f\u4e00\u79cd\u8c03\u6574\uff0c\u4f46\u8fd9\u5728\u6574\u4e2a\u884c\u4e1a\u4e2d\u5e76\u4e0d\u5c11\u89c1\u3002\u5982\u679c\u60a8\u7684\u5bb6\u5ead\u7f51\u7edc\u6bd4\u8c03\u5236\u89e3\u8c03\u5668\u3001\u8def\u7531\u5668\u548c PC \u66f4\u590d\u6742\uff0c\u90a3\u4e48\u60a8\u5f88\u53ef\u80fd\u4f1a\u9047\u5230\u7f51\u7edc\u8fde\u63a5\u95ee\u9898\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7406\u7531\uff0c\u4f46\u6253\u5370\u673a\u884c\u4e1a\u7684\u7f51\u7edc\u72b6\u51b5\u975e\u5e38\u7cdf\u7cd5\u3002\u5728\u4e00\u4e2a\u7f51\u7edc\u4e2d\u8fd0\u884c\u826f\u597d\u7684\u6253\u5370\u673a\u5728\u53e6\u4e00\u4e2a\u7f51\u7edc\u4e2d\u53ef\u80fd\u9700\u8981\u4e94\u4e2a\u5c0f\u65f6\u7684\u6545\u969c\u6392\u9664\u65f6\u95f4\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u80fd\u80af\u5b9a\u4efb\u4f55\u7ed9\u5b9a\u7684\u6253\u5370\u673a\u80af\u5b9a\u4f1a\u5728\u60a8\u7684\u5bb6\u5ead\u7f51\u7edc\u4e0a\u8fd0\u884c\u826f\u597d\u3002\u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u60a8\u9700\u8981\u5728\u66f4\u65b0\u64cd\u4f5c\u7cfb\u7edf\u65f6\u624b\u52a8\u4e0b\u8f7d\u6253\u5370\u673a\u7684\u65b0\u9a71\u52a8\u7a0b\u5e8f\u3002\u662f\u7684\uff0c\u8fd9\u5e94\u8be5\u81ea\u52a8\u53d1\u751f\uff0c\u4f46\u901a\u5e38\u4e0d\u4f1a\u3002\u4e00\u4e9b\u516c\u53f8\u5728\u53ca\u65f6\u53d1\u5e03\u65b0\u9a71\u52a8\u7a0b\u5e8f\u65b9\u9762\u6bd4\u5176\u4ed6\u516c\u53f8\u505a\u5f97\u66f4\u597d\u3002\u6839\u636e\u6211\u4eec\u7684\u7ecf\u9a8c\uff0cBrother \u975e\u5e38\u52e4\u594b\uff0c\u800c\u4f73\u80fd\u6700\u6709\u53ef\u80fd\u7559\u4e0b\u4f7f\u7528\u51e0\u5e74\u4ee5\u4e0a\u7684\u6253\u5370\u673a\u3002\u57fa\u672c\u4e0a\uff0c\u6253\u5370\u673a\u662f\u4e00\u4e2a\u4ee4\u4eba\u6cae\u4e27\u7684\u4ea7\u54c1\u7c7b\u522b\u3002\u4f46\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e0d\u662f\u66f4\u597d\u5417\uff1f\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u60a8\u4ecd\u7136\u9700\u8981\u65f6\u4e0d\u65f6\u5730\u4f7f\u7528\u5b83\u4eec\uff0c\u56e0\u6b64\u6211\u4eec\u4ecd\u7136\u82b1\u8d39\u6570\u5341\u4e2a\u5c0f\u65f6\u8fdb\u884c\u7814\u7a76\u548c\u6d4b\u8bd5\uff0c\u4ee5\u4fbf\u4e3a\u8d85\u51fa\uff08\u516c\u8ba4\u7684\u4f4e\uff09\u6807\u51c6\u7684\u6253\u5370\u673a\u63d0\u51fa\u4e00\u4e9b\u5efa\u8bae\uff1a\n\u5982\u679c\u4f60\u53ea\u662f\u9700\u8981\u4e00\u4e9b\u4e1c\u897f\u6765\u628a\u6587\u5b57\u5199\u5728\u7eb8\u4e0a\uff0c\u90a3\u4e48\u7b80\u5355\u66f4\u597d\u3002\u4f60\u60f3\u8981\u4e00\u53f0\u4fbf\u5b9c\u7684\u6fc0\u5149\u6253\u5370\u673a\u3002\u8fd9\u4e1c\u897f\u7684\u8d2d\u4e70\u6210\u672c\u4e0d\u5230 100 \u7f8e\u5143\uff0c\u6bcf\u9875\u64cd\u4f5c\u6210\u672c\u4e0d\u5230 2 \u7f8e\u5206\uff0c\u53ef\u4ee5\u5904\u7406\u60a8\u9700\u8981\u7684\u4efb\u4f55\u9ed1\u767d\u6253\u5370\u3002\u56e0\u4e3a\u5b83\u662f\u6fc0\u5149\u6253\u5370\u673a\uff0c\u6240\u4ee5\u5b83\u4f7f\u7528\u78b3\u7c89\u800c\u4e0d\u662f\u58a8\u6c34\uff0c\u8fd9\u6709\u4e24\u4e2a\u597d\u5904\uff1a\u65e0\u8bba\u60a8\u6253\u5370\u7684\u9891\u7387\u5982\u4f55\uff0c\u78b3\u7c89\u76d2\u90fd\u4e0d\u4f1a\u53d8\u5e72\u548c\u5931\u6548\uff0c\u5e76\u4e14\u5982\u679c\u60a8\u613f\u610f\uff0c\u53ef\u4ee5\u5b89\u5168\u5730\u4f7f\u7528\u66f4\u4fbf\u5b9c\u7684\u7b2c\u4e09\u65b9\u78b3\u7c89\u5b58\u94b1\u3002\u4f46\u662f\uff0c\u56e0\u4e3a\u5b83\u53ea\u80fd\u6253\u5370\u9ed1\u767d\uff0c\u6240\u4ee5\u60a8\u4ecd\u7136\u9700\u8981\u524d\u5f80\u590d\u5370\u4e2d\u5fc3\u8fdb\u884c\u5f69\u8272\u6253\u5370\u3002\u8fd9\u4e9b\u6253\u5370\u673a\u4e0a\u7684 LCD \u5c4f\u5e55\u5f80\u5f80\u5f88\u5c0f\u4e14\u96be\u4ee5\u5bfc\u822a\u3002\u4f46\u662f\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u8fd9\u4ecd\u7136\u6bd4\u56e0\u4e3a\u9752\u8272\u58a8\u76d2\u5e72\u6db8\u800c\u65e0\u6cd5\u6253\u5370\u9ed1\u767d\u7eb3\u7a0e\u7533\u62a5\u8868\u66f4\u53ef\u53d6\u3002\u5982\u679c\u60a8\u9700\u8981\u66f4\u591a\u6253\u5370\u673a\u529f\u80fd\uff0c\u8bf7\u8003\u8651\u8d2d\u4e70\u4e00\u4f53\u5f0f\u55b7\u58a8\u6253\u5370\u673a\u3002\u8fd9\u4e9b\u6700\u9002\u5408\u5076\u5c14\u4f7f\u7528\u5f69\u8272\u6253\u5370\u3001\u626b\u63cf\u3001\u590d\u5370\u6216\u4f20\u771f\u7684\u5bb6\u5ead\u529e\u516c\u5ba4\uff0c\u4f46\u4e0d\u9700\u8981\u6bcf\u5929\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\u4e2d\u7684\u4efb\u4f55\u4e00\u9879\uff08\u4e0d\u9700\u8981\u6ce8\u518c\u4f1a\u8ba1\u5e08\uff09\u3002\u4e0e\u5ec9\u4ef7\u7684\u6fc0\u5149\u6253\u5370\u673a\u4e00\u6837\uff0c\u4e00\u4f53\u5f0f\u55b7\u58a8\u6253\u5370\u673a\u7684\u524d\u671f\u4ef7\u683c\u4e5f\u5f88\u5b9e\u60e0\uff08\u4e0d\u5230 200 \u7f8e\u5143\uff09\u4e14\u64cd\u4f5c\u6210\u672c\u4f4e\u5ec9\uff08\u9884\u8ba1\u9ed1\u767d\u6bcf\u9875 2 \u7f8e\u5206\u81f3 4 \u7f8e\u5206\uff0c\u6bcf\u9875 7 \u7f8e\u5206\u81f3 10 \u7f8e\u5206\uff09\u9875\u989c\u8272\uff09\u3002\u4f46\u662f\uff0c\u4e0e\u6fc0\u5149\u6253\u5370\u673a\u4e0d\u540c\u7684\u662f\uff0c\u60a8\u5fc5\u987b\u5b9a\u671f\u4f7f\u7528\u58a8\u6c34\u6216\u4e22\u5931\u58a8\u6c34\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u6253\u5370\u673a\u4f1a\u81ea\u52a8\u6267\u884c\u5b9a\u671f\u6e05\u6d17\u4ee5\u4fdd\u6301\u55b7\u5634\u6e05\u6d01\u5e76\u51c6\u5907\u597d\u6253\u5370\u3002\u8fd9\u4e24\u79cd\u6253\u5370\u673a\u7c7b\u578b\u5e94\u8be5\u6db5\u76d6\u5927\u591a\u6570\u5bb6\u5ead\u7528\u6237\uff0c\u4f46\u5982\u679c\u6211\u4eec\u76ee\u524d\u63a8\u8350\u7684\u4f3c\u4e4e\u4e0d\u80fd\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u67e5\u770b Computer Shopper \u548c Consumer Reports \u4e0a\u7684\u5355\u4e2a\u6253\u5370\u673a\u8bc4\u8bba\u5e93\uff08\u9700\u8981\u8ba2\u9605\u540e\u8005\uff09\u3002\u8fd9\u4e9b\u662f\u6709\u5173\u6b64\u7c7b\u522b\u7684\u6700\u5168\u9762\u7684\u4e13\u4e1a\u4fe1\u606f\u6765\u6e90\u3002\u4f46\u60a8\u8fd8\u5fc5\u987b\u9605\u8bfb\u60a8\u8ba4\u4e3a\u8981\u8d2d\u4e70\u7684\u4efb\u4f55\u6253\u5370\u673a\u7684\u7528\u6237\u8bc4\u8bba\u3002\u5f53\u7531\u7ecf\u9a8c\u4e30\u5bcc\u7684\u6d4b\u8bd5\u4eba\u5458\u4f7f\u7528\u65f6\uff0c\u67d0\u4e9b\u6253\u5370\u673a\u53ef\u80fd\u4f1a\u5728\u53d7\u63a7\u8bbe\u7f6e\u4e0b\u8fdb\u884c\u826f\u597d\u7684\u6d4b\u8bd5\uff0c\u4f46\u65e0\u6cd5\u901a\u8fc7\u5e26\u56de\u5bb6\u7684\u6d4b\u8bd5\u3002\u7efc\u5408\u8003\u8651\u7684\u7528\u6237\u8bc4\u8bba\u5c06\u63d0\u9192\u60a8\u957f\u671f\u53ef\u9760\u6027\u7684\u8d8b\u52bf\uff0c\u4e2a\u522b\u8bc4\u8bba\u53ef\u4ee5\u63ed\u793a\u4e13\u4e1a\u8bc4\u8bba\u6709\u65f6\u5ffd\u7565\u7684\u8bb8\u591a\u5c0f\u7ec6\u8282\uff1a\u5199\u5f97\u4e0d\u597d\u7684\u7528\u6237\u624b\u518c\uff0c\u662f\u5426\u5361\u5728\u5361\u7247\u7eb8\u4e0a\uff0c\u4f20\u771f\u673a\u6ca1\u6709\u4e0d\u5de5\u4f5c\u7b49\u3002HP OfficeJet Pro 9015e \u51ed\u501f\u5176\u6613\u7528\u6027\u3001\u51fa\u8272\u7684\u6253\u5370\u8d28\u91cf\u548c\u4f4e\u5ec9\u7684\u64cd\u4f5c\u6210\u672c\u6210\u4e3a\u5927\u591a\u6570\u4eba\u6700\u559c\u6b22\u7684\u4e00\u4f53\u673a\u3002\u7ecf\u8425\u5bb6\u5ead\u4f01\u4e1a\uff1f\u5bb6\u91cc\u6709\u5b66\u751f\u5417\uff1f\u6839\u636e\u60a8\u7684\u9700\u6c42\uff0c\u6211\u4eec\u4e3a\u60a8\u63a8\u8350\u4e86\u4e00\u4e9b\u6700\u9002\u5408\u60a8\u7684\u6253\u5370\u673a\u3002\u5feb\u901f\u3001\u53ef\u9760\u4e14\u6613\u4e8e\u4f7f\u7528\u7684 HP Color LaserJet Pro M255dw \u662f\u6211\u4eec\u6700\u559c\u6b22\u7684\u6fc0\u5149\u6253\u5370\u673a\u3002\u5728\u6211\u4eec\u63a8\u8350\u7684\u4e1c\u897f\u4e0a\u53d1\u73b0\u8d1f\u9762\u7684\u5ba2\u6237\u8bc4\u8bba\u53ef\u80fd\u4f1a\u4ee4\u4eba\u60ca\u8bb6\u3002\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff1f\u60c5\u51b5\u5f88\u590d\u6742\u3002", "note_en": "Close your eyes, take a deep breath, and stop expecting printers to \u201cjust work\u201d\u00a0because that would make sense in a world where a touchscreen supercomputer fits in your shirt pocket. Like most things in life that you have no control over, you\u2019ll be happier if you accept printers for the janky money pits that they really are.\n Most of you are going to hate something about any printer that you buy, and there\u2019s nothing you can do about it. Instead of fighting it, try to reframe the issue in your mind: You\u2019re not buying a printer because you\u2019re supposed to have one at home. You\u2019re buying a printer because it\u2019s (just barely) less inconvenient than going to a copy center.\n   The feeling that ink or toner constantly needs to be replaced and always seems to run out at the worst times\n  Drivers that go out of date, never to be refreshed, and seem to disappear whenever you update your computer\u2019s operating system\n A cryptic interface that makes it almost impossible to troubleshoot problems without the help of customer support\n Unfortunately, we can\u2019t solve all of these problems. But our years of experience covering these apparent boxes of junk give us a better understanding of why they exist. Here are some other general truths that you may have never considered (or willingly ignore when you feel like throwing a tantrum about your printer). Assume that these apply to all printers from all manufacturers unless we say otherwise:\n Your printer is worth a lot more than you\u2019re paying for it. Seriously, there is some amazingly complicated technology in your printer, including the printheads, the ink, and the mapping software. You take your printer\u00a0for granted, but that box can cover a piece of paper in millions of dots of precisely located, color-matched ink in a few seconds. You\u2019re probably buying the printer for the cost of parts and distribution, which means the manufacturer is effectively subsidizing the thing on the premise that they\u2019ll recoup their research and development costs (and the rest of their overhead) from\u00a0your ink purchases.\n You should not expect a good experience if you use knockoff ink cartridges. See above. Part of R&amp;D is designing ink to have the right physical properties to work with the printheads. Knockoff ink might not have those properties, and, as a result, may not work very well. Also, as we learned recently, most inkjet printers designed for home use\u00a0actually have\u00a0the printhead built into the cartridge itself. There is no permanent printhead in most cheap printers. So you might be buying crap ink and a crap printhead. And if you try to refill a genuine cartridge with knockoff ink, you\u2019re probably putting subpar ink into a container with a burnt-out printhead.\n Also, back to the subsidy thing. We\u2019ve read that some manufacturers purposely design their printers to basically shut down if you try to use third-party cartridges. You may not like it, but from their perspective, they\u2019re protecting their investment in their &#34;ink futures,&#34; which subsidizes their dirt-cheap hardware.\n Knockoff toner cartridges, on the other hand, are okay! Toner is just an electrostatically charged powder (part polymer, part carbon), and the cartridge itself is just a simple plastic container. There are no fancy printheads or circuitry. Manufacturers don\u2019t fight as hard to protect toner cartridges because there\u2019s not a lot of intellectual property in these things. However, they tend to charge a higher markup on the printers themselves to make up for the cheaper toner costs.\n If an ink cartridge is missing, you shouldn\u2019t expect your printer to print, and it may not even scan. Some models will still do either or both, many will not. Yeah, it feels like a shakedown when they employ this stand-and-deliver style of ink management, but it\u2019s not uncommon across the industry.\n If your home network is more complex than just a modem, a router, and your PC, there\u2019s a reasonable chance that you\u2019ll run into network connectivity problems. There\u2019s not a good reason for this, but  the state of networking in the printer industry is abysmal. A printer that works well in one network\u00a0might need five hours of troubleshooting in another. Unfortunately, this means we can\u2019t say for certain that any given printer will definitely work well on your home network.\n At some point you\u2019ll need to manually download new drivers for your printer when you update your operating system. Yeah, this should happen automatically, but it usually doesn\u2019t. Some companies are better than others at issuing new drivers in a timely manner. In our experience, Brother is very diligent and Canon is the most likely to leave behind printers that are more than a couple of years old.\n Basically, printers are a dismal product category. But doesn\u2019t it feel better to know why? With that in mind, we realize you still need to use them now and then, and thus we still spend dozens of hours researching and testing in order to make a few recommendations for printers that rise above the (admittedly low) bar:\n  If you just need something to put words on paper, then simpler is better. You want a  cheap laser printer. This thing will cost less than $100 to buy\u00a0and\u00a0less than 2\u00a2 per page to operate and can take care of any black-and-white\u00a0printing you need. Because it\u2019s a laser printer, it uses toner instead of ink, which has two benefits: The toner cartridge will\u00a0never dry out and become ineffective no matter how infrequently you print, and you can safely use cheaper, third-party toner if you want to save money. However, because it prints in\u00a0black-and-white only, you\u2019ll still have to make a\u00a0trip to the copy center for color prints. And the LCD screens on these printers\u00a0tend to be small and hard to navigate. But for most people that\u2019s still preferable to being unable to print your black-and-white tax returns because your cyan cartridge dried up.\n  If you need more out of your printer, look into getting an  all-in-one inkjet\u00a0printer. These are best suited for home offices that occasionally use\u00a0color printing, scanning, copying, or faxing, but don\u2019t require any particular one of these tasks on a daily basis (CPAs need not apply). Like the cheap laser printer, an all-in-one inkjet printer is also affordable up front (less than $200) and cheap to operate (expect 2\u00a2 to 4\u00a2 per page for black-and-white, 7\u00a2 to 10\u00a2 per page for color). However, unlike a laser printer, you have to use the ink regularly or lose it, though these printers automatically perform periodic purges to keep their\u00a0nozzles clean and ready to print.\n  Those two printer types should cover most home users, but if what we currently recommend does not seem like it\u2019s going to fit your needs, we suggest that you check out the libraries of individual printer reviews at  Computer Shopper and  Consumer Reports (subscription required for the latter). These are the most thorough professional sources of information about this category. But you must also read the user reviews of any printer that you think you want to buy. Some printers may test well in controlled settings when used by experienced testers, but fail the take-home test. User reviews considered in the aggregate will alert you to trends in long-term reliability, and individual reviews can reveal a lot of little details that the pro reviews sometimes overlook: poorly written owner\u2019s manuals, whether it jams on card stock, the fax machine doesn\u2019t work, etc.\n The   HP OfficeJet Pro 9015e  is our favorite all-in-one for most people thanks to its ease of use, great print quality, and low cost of operation.\n Run a home business? Have a student in the house? Depending on your needs, we have a few recommendations for the best printer for you.\n The fast, reliable, and easy-to-use  HP Color LaserJet Pro M255dw is our favorite laser printer.\n It might be surprising to find negative customer reviews on stuff we recommend. Why does this happen? It\u2019s complicated.", "posttime": "2021-08-01 22:16:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6253\u5370,\u6253\u5370\u673a,printers", "title": "\u4e3a\u4ec0\u4e48\u6240\u6709\u6253\u5370\u673a\u90fd\u5f88\u70c2\uff0c\u5373\u4f7f\u662f\u6700\u597d\u7684\u6253\u5370\u673a\uff082016 \u5e74\uff09", "title_en": "Why All Printers Suck, Even the Best Ones (2016)", "transed": 1, "url": "https://www.nytimes.com/wirecutter/blog/why-all-printers-suck-even-the-best-ones/", "via": "", "real_tags": ["\u6253\u5370", "\u6253\u5370\u673a", "printers"]}, {"category": "", "categoryclass": "", "imagename": "f8f5d529d35334f2fb264d19f656224e.png", "infoid": 1071005, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b64 PEP \u6307\u5b9a\u4e86\u4e00\u79cd\u6587\u4ef6\u683c\u5f0f\uff0c\u7528\u4e8e\u5217\u51fa\u9879\u76ee\u7684 Python \u5305\u5b89\u88c5\u8981\u6c42\u3002\u9879\u76ee\u5217\u8868\u5bf9\u4e8e\u5b89\u88c5\u76ee\u6807\u88ab\u8ba4\u4e3a\u662f\u8be6\u5c3d\u65e0\u9057\u7684\uff0c\u56e0\u6b64\u88ab\u9501\u5b9a\uff0c\u9664\u4e86\u6b63\u5728\u5b89\u88c5\u7684\u5e73\u53f0\u548c\u5217\u51fa\u6240\u9700\u4f9d\u8d56\u9879\u7684\u9501\u5b9a\u6587\u4ef6\u4e4b\u5916\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u4fe1\u606f\u6765\u6267\u884c\u4f9d\u8d56\u9879\u7684\u6210\u529f\u5b89\u88c5\u3002\u611f\u8c22 PEP 621\uff0c\u9879\u76ee\u53ef\u4ee5\u5217\u51fa\u4ed6\u4eec\u9700\u8981\u5b89\u88c5\u7684\u76f4\u63a5/\u9876\u7ea7\u4f9d\u8d56\u9879\u3002\u4f46\u662f PEP 621 \u4e5f\uff08\u6709\u76ee\u7684\u5730\uff09\u7701\u7565\u4e86\u4e24\u4e2a\u901a\u5e38\u5bf9\u9879\u76ee\u5f88\u91cd\u8981\u7684\u5173\u952e\u7ec6\u8282\uff1a\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u8fd9\u4e24\u79cd\u9700\u6c42\u90fd\u5f88\u91cd\u8981\u3002\u4e00\u4e2a\u662f\uff0c\u5982\u679c\u6ca1\u6709\u5b8c\u6574\u5217\u51fa\u6240\u6709\u4f9d\u8d56\u9879\u548c\u8981\u4f7f\u7528\u7684\u7279\u5b9a\u7248\u672c\uff0c\u540c\u4e00\u9879\u76ee\u7684\u5f00\u53d1\u4eba\u5458\u6216\u5f00\u53d1\u4eba\u5458\u548c\u7528\u6237\u4e4b\u95f4\u53ef\u80fd\u4f1a\u51fa\u73b0\u504f\u5dee\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5b89\u88c5\u65f6\u9879\u76ee\u7684\u4f9d\u8d56\u9879\u7684\u54ea\u4e9b\u7248\u672c\u53ef\u7528\u3002\u4f8b\u5982\uff0c\u5f53\u4e00\u4e2a\u5f00\u53d1\u4eba\u5458\u5b89\u88c5\u8be5\u4f9d\u8d56\u9879\u65f6\uff0c\u67d0\u4e2a\u4f9d\u8d56\u9879\u53ef\u80fd\u5728\u661f\u671f\u4e00\u5c06 v1 \u4f5c\u4e3a\u6700\u65b0\u7248\u672c\uff0c\u800c\u5f53\u53e6\u4e00\u4e2a\u5f00\u53d1\u4eba\u5458\u5b89\u88c5\u76f8\u540c\u7684\u4f9d\u8d56\u9879\u65f6\uff0cv2 \u5728\u661f\u671f\u4e09\u53d1\u5e03\u3002\u73b0\u5728\u8fd9\u4e24\u4e2a\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u9488\u5bf9\u76f8\u540c\u4f9d\u8d56\u9879\u7684\u4e24\u4e2a\u4e0d\u540c\u7248\u672c\u5de5\u4f5c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u53ef\u91cd\u590d\u5b89\u88c5\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u539f\u56e0\u662f\u51fa\u4e8e\u5b89\u5168\u76ee\u7684\u3002\u786e\u4fdd\u4e3a\u6240\u6709\u5b89\u88c5\u4e0b\u8f7d\u5e76\u5b89\u88c5\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u53ef\u786e\u4fdd\u6ca1\u6709\u6076\u610f\u8005\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6076\u610f\u66f4\u6539\u4f9d\u8d56\u9879\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u9501\u5b9a\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7\u8bb0\u5f55\u5e94\u8be5\u5b89\u88c5\u4ec0\u4e48\u7684\u786e\u5207\u7ec6\u8282\u4ee5\u53ca\u5982\u4f55\u9a8c\u8bc1\u8fd9\u4e9b\u4f9d\u8d56\u9879\u6ca1\u6709\u610f\u5916\u66f4\u6539\u4efb\u4f55\u5b57\u8282\u6765\u5e2e\u52a9\u5b9e\u73b0\u8fd9\u4e00\u4fdd\u8bc1\u3002\u57fa\u4e8e\u591a\u4e2a\u5de5\u5177\u72ec\u7acb\u521b\u5efa\u4e86\u81ea\u5df1\u7684\u9501\u6587\u4ef6\u683c\u5f0f\u8fd9\u4e00\u4e8b\u5b9e\uff0c\u793e\u533a\u672c\u8eab\u4e5f\u8868\u73b0\u51fa\u5bf9\u9501\u6587\u4ef6\u7684\u9700\u6c42\uff1a\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u793e\u533a\u4e5f\u901a\u8fc7\u5f00\u53d1\u81ea\u5df1\u7684\u89e3\u51b3\u65b9\u6848\u6765\u5c55\u793a\u9501\u6587\u4ef6\u7684\u5b9e\u7528\u6027\u3002\u5176\u4e2d\u4e00\u4e9b\u793e\u533a\u5305\u62ec\uff1a \u9996\u5148\uff0c\u5e94\u5b9a\u4e49\u4e24\u4e2a\u5173\u952e\u672f\u8bed\u3002 Locker \u662f\u4e00\u79cd\u751f\u6210\u9501\u6587\u4ef6\u7684\u5de5\u5177\u3002\u5b89\u88c5\u7a0b\u5e8f\u662f\u4e00\u79cd\u4f7f\u7528\u9501\u5b9a\u6587\u4ef6\u6765\u5b89\u88c5\u9002\u5f53\u4f9d\u8d56\u9879\u7684\u5de5\u5177\u3002\n\u6587\u4ef6\u683c\u5f0f\u5e94\u8be5\u662f\u673a\u5668\u53ef\u8bfb\u3001\u673a\u5668\u53ef\u5199\u548c\u4eba\u7c7b\u53ef\u8bfb\u7684\u3002\u7531\u4e8e\u5047\u8bbe\u7edd\u5927\u591a\u6570lockfile \u5c06\u7531locker \u5de5\u5177\u751f\u6210\uff0c\u56e0\u6b64\u8be5\u683c\u5f0f\u5e94\u8be5\u6613\u4e8e\u7531locker \u7f16\u5199\u3002\u7531\u4e8e\u5b89\u88c5\u5de5\u5177\u5c06\u4f7f\u7528\u9501\u5b9a\u6587\u4ef6\uff0c\u56e0\u6b64\u5b89\u88c5\u7a0b\u5e8f\u8fd8\u9700\u8981\u8f7b\u677e\u8bfb\u53d6\u8be5\u683c\u5f0f\u3002\u4f46\u8be5\u683c\u5f0f\u4e5f\u5e94\u8be5\u662f\u4eba\u53ef\u8bfb\u7684\uff0c\u56e0\u4e3a\u4eba\u4eec\u5c06\u4e0d\u53ef\u907f\u514d\u5730\u5bf9\u9501\u5b9a\u6587\u4ef6\u8fdb\u884c\u5ba1\u6838\u3002\u62e5\u6709\u4e0d\u9002\u5408\u88ab\u4eba\u4eec\u9605\u8bfb\u7684\u683c\u5f0f\u4f1a\u963b\u788d\u8fd9\u4e00\u70b9\u3002\u8fd9\u5305\u62ec\u5bf9\u4ee5 diff \u683c\u5f0f\u53ef\u8bfb\u7684\u9501\u5b9a\u6587\u4ef6\u7684\u66f4\u6539\uff0c\u4ee5\u4fbf\u5ba1\u6838\u66f4\u6539\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u7406\u89e3\u4e3a\u4ec0\u4e48\u67d0\u4e9b\u4e1c\u897f\u5728\u9501\u6587\u4ef6\u4e2d\u5e94\u8be5\u53ef\u4ee5\u5728 diff \u4e2d\u7406\u89e3\uff0c\u4ee5\u5e2e\u52a9\u5ba1\u8ba1\u66f4\u6539\u3002\u9501\u6587\u4ef6\u683c\u5f0f\u9700\u8981\u8db3\u591f\u901a\u7528\uff0c\u4ee5\u652f\u6301\u8de8\u5e73\u53f0\u548c\u8de8\u73af\u5883\u7684\u4f9d\u8d56\u9879\u89c4\u8303\u3002\u8fd9\u5141\u8bb8\u62e5\u6709\u4e00\u4e2a\u53ef\u4ee5\u5728\u65e0\u6570\u5e73\u53f0\u548c\u73af\u5883\u4e0a\u5de5\u4f5c\u7684\u5355\u4e2a\u9501\u6587\u4ef6\uff0c\u5982\u679c\u6709\u610f\u4e49\u7684\u8bdd\u3002\u8fd9\u5df2\u88ab Python \u5305\u88c5\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u5404\u79cd\u5de5\u5177\u663e\u793a\u4e3a\u5fc5\u8981\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b\u5de5\u5177\u5df2\u7ecf\u5177\u6709\u9501\u5b9a\u6587\u4ef6\u683c\u5f0f\uff08\u4f8b\u5982 Pipenv [10]\u3001Poetry [12]\u3001PDM [8]\uff09\u3002\u9501\u5b9a\u6587\u4ef6\u8fd8\u9700\u8981\u652f\u6301\u53ef\u91cd\u73b0\u7684\u5b89\u88c5\u3002\u5982\u679c\u6709\u4eba\u60f3\u5c06\u9501\u5b9a\u6587\u4ef6\u8986\u76d6\u7684\u5185\u5bb9\u9650\u5236\u5728\u5355\u4e2a\u5e73\u53f0\u4e0a\u4ee5\u4fdd\u8bc1\u5c06\u5b89\u88c5\u7684\u786e\u5207\u4f9d\u8d56\u9879\u548c\u6587\u4ef6\uff0c\u90a3\u5e94\u8be5\u662f\u53ef\u884c\u7684\u3002\u8fd9\u5728 SecureDrop [16] \u7b49\u9879\u76ee\u7684\u5b89\u5168\u4e0a\u4e0b\u6587\u4e2d\u53ef\u80fd\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u5f53\u53ef\u4ee5\u5728\u50a8\u7269\u67dc\u6216\u5b89\u88c5\u5668\u4e2d\u6267\u884c\u8ba1\u7b97\u65f6\uff0c\u4f18\u9009\u5728\u50a8\u7269\u67dc\u4e2d\u6267\u884c\u8ba1\u7b97\u3002\u8fd9\u662f\u56e0\u4e3a\u5047\u8bbe\u50a8\u7269\u67dc\u7684\u6267\u884c\u9891\u7387\u4f4e\u4e8e\u5b89\u88c5\u7a0b\u5e8f\u3002\u5b89\u88c5\u7a0b\u5e8f\u5e94\u8be5\u80fd\u591f\u5b8c\u5168\u6839\u636e\u5e73\u53f0/\u73af\u5883\u4fe1\u606f\u4ee5\u53ca\u9501\u5b9a\u6587\u4ef6\u4e2d\u5305\u542b\u7684\u5185\u5bb9\u6765\u89e3\u51b3\u8981\u5b89\u88c5\u7684\u5185\u5bb9\u3002\u5e94\u8be5\u4e0d\u9700\u8981\u4f7f\u7528\u7f51\u7edc\u6216\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf I/O \u6765\u89e3\u51b3\u8981\u5b89\u88c5\u7684\u5185\u5bb9\u3002\u9501\u5b9a\u6587\u4ef6\u5e94\u63d0\u4f9b\u8db3\u591f\u7684\u7075\u6d3b\u6027\u4ee5\u5141\u8bb8\u50a8\u7269\u67dc\u548c\u5b89\u88c5\u4eba\u5458\u8fdb\u884c\u521b\u65b0\u3002\u867d\u7136\u9501\u5b9a\u6587\u4ef6\u89c4\u8303\u63d0\u4f9b\u4e86\u529f\u80fd\u7684\u516c\u5206\u6bcd\uff0c\u4f46\u5b83\u4e0d\u5e94\u4f5c\u4e3a\u529f\u80fd\u7684\u4e0a\u9650\u3002\u7531\u4e8e\u9501\u5b9a\u6587\u4ef6\u7684\u9884\u671f\u5927\u5c0f\uff0c\u6ca1\u6709\u52aa\u529b\u4f7f\u9501\u5b9a\u6587\u4ef6\u53ef\u4eba\u5de5\u5199\u5165\u3002\n\u7531\u4e8e PEP 518 \u4e3a pyproject.toml \u91c7\u7528\u4e86 TOML [19] \u6587\u4ef6\u683c\u5f0f\uff0c\u9501\u5b9a\u6587\u4ef6\u5fc5\u987b\u4f7f\u7528 TOML [19] \u6587\u4ef6\u683c\u5f0f\u3002\u8fd9\u4e0d\u4ec5\u53ef\u4ee5\u9632\u6b62 Python \u6253\u5305\u751f\u6001\u7cfb\u7edf\u4e2d\u9700\u8981\u53e6\u4e00\u79cd\u6587\u4ef6\u683c\u5f0f\uff0c\u800c\u4e14\u8fd8\u6709\u52a9\u4e8e\u4f7f\u9501\u5b9a\u6587\u4ef6\u6613\u4e8e\u4eba\u7c7b\u9605\u8bfb\u3002\u9501\u5b9a\u6587\u4ef6\u5fc5\u987b\u4fdd\u5b58\u5728\u540d\u4e3a pyproject-lock.d.Lock \u6587\u4ef6\u7684\u76ee\u5f55\u4e2d\uff0c\u5fc5\u987b\u4ee5 .toml \u6587\u4ef6\u6269\u5c55\u540d\u7ed3\u5c3e\u3002\u9879\u76ee\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u9009\u62e9\u7684\u4efb\u4f55\u6587\u4ef6\u540d\u8bcd\u5e72\u62e5\u6709\u4efb\u610f\u6570\u91cf\u7684\u9501\u5b9a\u6587\u4ef6\u3002\u6b64 PEP \u6ca1\u6709\u89c4\u5b9a\u5728\u591a\u4e2a\u9501\u5b9a\u6587\u4ef6\u4e4b\u95f4\u81ea\u52a8\u9009\u62e9\u7684\u7279\u5b9a\u65b9\u6cd5\uff0c\u5b89\u88c5\u7a0b\u5e8f\u5e94\u907f\u514d\u731c\u6d4b\u54ea\u4e2a\u9501\u5b9a\u6587\u4ef6\u662f\u201c\u6700\u5408\u9002\u7684\u201d\uff08\u8fd9\u5e76\u4e0d\u6392\u9664\u9884\u671f\u4ec5\u5b58\u5728\u5177\u6709\u7279\u5b9a\u540d\u79f0\u7684\u5355\u4e2a\u9501\u5b9a\u6587\u4ef6\u5e76\u5c06\u9ed8\u8ba4\u4f7f\u7528\u7684\u60c5\u51b5\uff0c\u4f8b\u5982\uff0c\u6587\u6863\u6258\u7ba1\u7ad9\u70b9\u5728\u63d0\u4f9b\u65f6\u59cb\u7ec8\u4f7f\u7528\u540d\u4e3a pyproject-lock.d/rftd.toml \u7684\u9501\u5b9a\u6587\u4ef6\uff09\u3002\u6b63\u5728\u4f7f\u7528\u7684\u9501\u5b9a\u6587\u4ef6\u7684\u7248\u672c\u3002\u5fc5\u987b\u6307\u5b9a\u5bc6\u94a5\uff0c\u5e76\u4e14\u5fc5\u987b\u5c06\u5176\u8bbe\u7f6e\u4e3a 1\u3002\u8be5\u6570\u5b57\u5fc5\u987b\u59cb\u7ec8\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5e76\u4e14\u5b83\u5fc5\u987b\u4ec5\u5728\u89c4\u8303\u7684\u672a\u6765\u66f4\u65b0\u4e2d\u9012\u589e\u3002\u6784\u6210\u7248\u672c\u53f7\u589e\u52a0\u7684\u5185\u5bb9\u7559\u7ed9\u672a\u6765\u7684 PEP \u6216\u6807\u51c6\u66f4\u6539\u3002\u5de5\u5177\u53ef\u4ee5\u5728\u5de5\u5177\u8868\u4e0b\u521b\u5efa\u81ea\u5df1\u7684\u5b50\u8868\u3002\u6b64\u8868\u7684\u89c4\u5219\u4e0e\u6784\u5efa\u7cfb\u7edf\u58f0\u660e\u89c4\u8303 [1] \u4e2d pyproject.toml \u53ca\u5176 [\u5de5\u5177] \u8868\u7684\u89c4\u5219\u76f8\u5339\u914d\u3002\u8868\u7684\u6bcf\u4e2a\u952e\u90fd\u662f\u4e00\u4e2a\u5305\u7684\u540d\u79f0\uff0c\u5fc5\u987b\u6839\u636e\u7b80\u5355\u7684\u5b58\u50a8\u5e93 API [17] \u8fdb\u884c\u89c4\u8303\u5316\u3002\u5982\u679c\u5c06\u9644\u52a0\u9879\u6307\u5b9a\u4e3a\u8981\u5b89\u88c5\u7684\u9879\u76ee\u7684\u4e00\u90e8\u5206\uff0c\u5219\u9644\u52a0\u9879\u5c06\u5305\u542b\u5728\u952e\u540d\u4e2d\u5e76\u6309\u5b57\u5178\u987a\u5e8f\u6392\u5e8f\u3002 version = 1[tool]# Tool-specific table ala PEP 518&#39;s `[tool]` table.[metadata]marker = &quot;python_version&gt;=&#39;3.6&#39;&quot;needs = [&quot;mousebender&quot;][[package.attrs]]version = &quot;21.2.0&quot;required-by = [&quot;mousebender&quot;][[package.attrs.code]]type = &quot;wheel&quot;url = &quot;https://files.pythonhosted.org/packages/20/a9/ba6f1cd1a1517ff022b35acd6a7e4246371dfab08b7d9e4dfab08b7d9e4c -21.2.0-py2.py3-none-any.whl&quot;hash-algorithm=&quot;sha256&quot;hash-value = &quot;149e90d6d8ac20db7a955ad60cf0e6881a3f20d37096140088356da0088356da0.b.7&quot;20000000000000000000&quot; 19.3&quot;, &quot;packaging&gt;=20.3&quot;][[package.mousebender.code]]type = &quot;sdist&quot;url = &quot;https://files.pythonhosted.org/packages/35/bc/db77f8ca1ccf85f5c3324e4f62fc74bf6f6c0780d04bf6f6c0790d04bf6f6c07d80304b .tar.gz&quot;hash-algorithm = &quot;sha256&quot;hash-value = &quot;c5953026378e5dcc7090596dfcbf73aa5a9786842357273b1df974ebd79bd760&quot;[[package.mousebd760&quot;[package.mousebender/code.mousebender/org.mousebender. b3/f6fdbff6395e9b77b5619160180489410fb2f42f41272994353e7ec f5bdf/mousebender-2.0.0-py3-none-any.whl&quot;hash-algorithm = &quot;sha256&quot;hash-value = &quot;a6f9adfbd17bfb0e6bb5de9a27083e01dfb86ed9c3861e04143d.904143d7&quot;2fdpar. .2&quot;]required-by = [&quot;mousebender&quot;][[package.packaging.code]]type = &quot;git&quot;url = &quot;https://github.com/pypa/packaging.git&quot;commit = &quot;53fd698b1620aca027324001bf53c8ffda0c17d1&quot;[ [package.pyparsing]]version = &quot;2.4.7&quot;required-by = [&quot;packaging&quot;][[package.pyparsing.code]]type=&quot;wheel&quot;url = &quot;https://files.pythonhosted.org/packages /8a/bb/488841f56197b13700afd5658fc279a2025a39e22449b7cf29864669b15d/pyparsing-2.4.7-py2.py3-none-any.whl&quot;hash-algorithm=&quot;sha256&quot;hash-value=&quot;ef9d7589ef3c200abe66653d3f1ab1033c3c419ae9b9bdb1240a85b024efc88b&quot;interpreter-tag = \u201cpy2.py3\u201d ABI-\u6807\u7b7e= &quot;none&quot;platform-tag = &quot;any&quot; \u5b89\u88c5\u7a0b\u5e8f\u5fc5\u987b\u5b9e\u73b0\u5df2\u5b89\u88c5\u53d1\u884c\u7248\u89c4\u8303 [14] \u7684\u76f4\u63a5 URL \u6765\u6e90\uff0c\u56e0\u4e3a\u4ece\u9501\u5b9a\u6587\u4ef6\u5b89\u88c5\u7684\u6240\u6709\u8f6f\u4ef6\u5305\u672c\u8d28\u4e0a\u90fd\u6e90\u81ea URL\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u8f6f\u4ef6\u5305\u540d\u79f0\u548c ve \u641c\u7d22\u7d22\u5f15\u4fe1\u3002\n\u8ba9\u7528\u6237\u6307\u5b9a\u4ed6\u4eec\u60f3\u8981\u5728 pyproject-lock.d\uff08\u4f8b\u5982 dev\u3001prod\uff09\u4e2d\u4f7f\u7528\u54ea\u4e2a\u9501\u5b9a\u6587\u4ef6 \u4ece metadata.needs \u548c foreach \u5217\u51fa\u7684\u5305\u4e2d\u6536\u96c6\u5305\u540d\u79f0\u5217\u8868......\u5bf9\u4e2d\u5217\u51fa\u7684\u5305\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u627e\u5230\u8981\u5b89\u88c5\u7684\u6bcf\u4e2a\u8f6f\u4ef6\u5305\u7684\u9700\u6c42\u5bc6\u94a5 \u56e0\u4e3a\u6ca1\u6709\u5173\u4e8e\u9501\u5b9a\u6587\u4ef6\u7684\u9884\u5148\u5b58\u5728\u7684\u89c4\u8303\uff0c\u6240\u4ee5\u6ca1\u6709\u660e\u786e\u7684\u5411\u540e\u517c\u5bb9\u6027\u95ee\u9898\u3002\u5bf9\u4e8e\u5177\u6709\u81ea\u5df1\u7684\u9501\u5b9a\u6587\u4ef6\u7684\u9884\u5148\u5b58\u5728\u7684\u5de5\u5177\uff0c\u5c06\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u66f4\u65b0\u3002\u5927\u591a\u6570\u8bb0\u5f55\u9501\u5b9a\u6587\u4ef6\u540d\uff0c\u4f46\u4e0d\u8bb0\u5f55\u5176\u5185\u5bb9\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9501\u5b9a\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u662f\u91cd\u8981\u7684\u90e8\u5206\u3002\u5bf9\u4e8e\u4e0d\u63d0\u4ea4\u5176\u9501\u5b9a\u6587\u4ef6\u7248\u672c\u63a7\u5236\u7684\u9879\u76ee\uff0c\u4ed6\u4eec\u5c06\u9700\u8981\u66f4\u65b0\u5176 .gitignore \u6587\u4ef6\u7684\u7b49\u6548\u6587\u4ef6\u3002\u5bf9\u4e8e\u63d0\u4ea4\u9501\u5b9a\u6587\u4ef6\u7248\u672c\u63a7\u5236\u7684\u9879\u76ee\uff0c\u63d0\u4ea4\u7684\u6587\u4ef6\u9700\u8981\u66f4\u65b0\u3002\u5bf9\u4e8e\u50cf pipenv [10] \u90a3\u6837\u8bb0\u5f55\u9501\u5b9a\u6587\u4ef6\u683c\u5f0f\u7684\u9879\u76ee\uff0c\u4ed6\u4eec\u5f88\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u4e3b\u8981\u7248\u672c\u53d1\u5e03\u3002\u7279\u522b\u662f\u5bf9\u4e8e Poetry [12]\uff0c\u5b83\u6709\u4e00\u4e2a\u5bfc\u51fa\u547d\u4ee4\uff0c\u5373\u4f7f\u9879\u76ee\u9009\u62e9\u4e0d\u91c7\u7528\u8fd9\u79cd PEP \u4f5c\u4e3a Poetry \u7684\u4e3b\u8981\u9501\u5b9a\u6587\u4ef6\u683c\u5f0f\uff0c\u5b83\u4e5f\u5e94\u8be5\u5141\u8bb8 Poetry \u652f\u6301\u8fd9\u79cd\u9501\u5b9a\u6587\u4ef6\u683c\u5f0f\u3002\u9501\u5b9a\u6587\u4ef6\u4e0d\u5e94\u5f15\u5165\u5b89\u5168\u95ee\u9898\uff0c\u800c\u662f\u6709\u52a9\u4e8e\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002\u901a\u8fc7\u8981\u6c42\u8bb0\u5f55\u4ee3\u7801\u7684\u6563\u5217\uff0c\u9501\u5b9a\u6587\u4ef6\u80fd\u591f\u5e2e\u52a9\u9632\u6b62\u7be1\u6539\u4ee3\u7801\uff0c\u56e0\u4e3a\u8bb0\u5f55\u4e86\u6563\u5217\u8be6\u7ec6\u4fe1\u606f\u3002\u9501\u5b9a\u6587\u4ef6\u8fd8\u6709\u52a9\u4e8e\u9632\u6b62\u5b89\u88c5\u53ef\u80fd\u662f\u6076\u610f\u7684\u610f\u5916\u5305\u66f4\u65b0\u3002\n\u672c PEP \u7684\u6559\u5b66\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u65e5\u5e38\u4f7f\u7528\u7684\u50a8\u7269\u67dc\u548c\u5b89\u88c5\u4eba\u5458\u3002\u4f46\u662f\uff0c\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u53ef\u4ee5\u6559\u5bfc\u7528\u6237 pyproject-lock.d \u76ee\u5f55\u5305\u542b\u6307\u5b9a\u5e94\u8be5\u5b89\u88c5\u4ec0\u4e48\u624d\u80fd\u4f7f\u9879\u76ee\u5de5\u4f5c\u7684\u6587\u4ef6\u3002\u5e94\u8be5\u5f3a\u8c03\u4e00\u81f4\u6027\u548c\u5b89\u5168\u6027\u7684\u597d\u5904\uff0c\u4ee5\u5e2e\u52a9\u7528\u6237\u610f\u8bc6\u5230\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u5e94\u8be5\u5173\u5fc3\u9501\u5b9a\u6587\u4ef6\u3002\u51b3\u5b9a\u4e0e TOML \u5408\u4f5c\u3002\u6709\u4eba\u62c5\u5fc3 Python \u7684\u6807\u51c6\u5e93\u7f3a\u5c11 TOML \u89e3\u6790\u5668\uff0c\u4f46\u7531\u4e8e pyproject.toml\uff0c\u5927\u591a\u6570\u6253\u5305\u5de5\u5177\u5df2\u7ecf\u4f7f\u7528\u4e86 TOML \u89e3\u6790\u5668\uff0c\u56e0\u6b64\u8fd9\u4e2a\u95ee\u9898\u4f3c\u4e4e\u5e76\u6ca1\u6709\u5f15\u8d77\u8f70\u52a8\u3002\u8fc7\u53bb\uff0c\u6709\u4e9b\u4eba\u8fd8\u53cd\u5bf9\u8fd9\u79cd\u62c5\u5fe7\uff0c\u56e0\u4e3a\u5982\u679c\u6253\u5305\u5de5\u5177\u8ba8\u538c\u5b89\u88c5\u4f9d\u8d56\u9879\u5e76\u4e14\u89c9\u5f97\u4ed6\u4eec\u4e0d\u80fd\u63d0\u4f9b\u5305\uff0c\u90a3\u4e48\u6253\u5305\u751f\u6001\u7cfb\u7edf\u9700\u8981\u7ea0\u6b63\u7684\u95ee\u9898\u6bd4\u9700\u8981\u4f9d\u8d56\u7b2c\u4e09\u65b9 TOML \u89e3\u6790\u5668\u8981\u5927\u5f97\u591a\u3002\u66fe\u7ecf\u8003\u8651\u8fc7\u4e0d\u4f7f\u7528\u9501\u5b9a\u6587\u4ef6\u76ee\u5f55\u800c\u662f\u4f7f\u7528\u5305\u542b\u6240\u6709\u53ef\u80fd\u9501\u5b9a\u4fe1\u606f\u7684\u5355\u4e2a\u9501\u5b9a\u6587\u4ef6\u7684\u60f3\u6cd5\u3002\u4f46\u662f\u5f88\u5feb\u5c31\u5f88\u660e\u663e\uff0c\u8bd5\u56fe\u8bbe\u8ba1\u4e00\u79cd\u65e2\u53ef\u4ee5\u5305\u542b\u53ef\u4ee5\u652f\u6301\u591a\u79cd\u73af\u5883\u7684\u9501\u5b9a\u6587\u4ef6\u683c\u5f0f\u53c8\u53ef\u4ee5\u5305\u542b\u7528\u4e8e\u53ef\u91cd\u73b0\u6784\u5efa\u7684\u4e25\u683c\u9501\u5b9a\u7ed3\u679c\u7684\u6570\u636e\u683c\u5f0f\u5c06\u53d8\u5f97\u975e\u5e38\u590d\u6742\u548c\u9ebb\u70e6\u3002\u8fd8\u8003\u8651\u4e86\u652f\u6301\u9501\u6587\u4ef6\u76ee\u5f55\u4ee5\u53ca\u540d\u4e3a pyproject-lock.toml \u7684\u5355\u9501\u6587\u4ef6\u7684\u60f3\u6cd5\u3002\u4f46\u662f\u5728\u5355\u4e2a\u9501\u5b9a\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\u8df3\u8fc7\u76ee\u5f55\u7684\u4efb\u4f55\u53ef\u80fd\u7684\u7b80\u5355\u6027\u4f3c\u4e4e\u662f\u4e0d\u5fc5\u8981\u7684\u3002\u5c1d\u8bd5\u4e3a\u5e94\u8be5\u662f pyproject-lock.toml \u6587\u4ef6\u7684\u5185\u5bb9\u4ee5\u53ca\u5e94\u8be5\u8fdb\u5165 pyproject-lock.d \u7684\u5185\u5bb9\u5b9a\u4e49\u9002\u5f53\u7684\u903b\u8f91\u4f3c\u4e4e\u4e0d\u5fc5\u8981\u5730\u590d\u6742\u3002\u8be5 PEP \u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u63d0\u51fa\u9501\u6587\u4ef6\u6ca1\u6709\u4f9d\u8d56\u56fe\u7684\u6982\u5ff5\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u9501\u5b9a\u6587\u4ef6\u5c06\u51c6\u786e\u5217\u51fa\u5e94\u8be5\u4e3a\u7279\u5b9a\u5e73\u53f0\u5b89\u88c5\u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u5b89\u88c5\u4eba\u5458\u4e0d\u5fc5\u5c31\u5b89\u88c5\u4ec0\u4e48\u505a\u51fa\u4efb\u4f55\u51b3\u5b9a\uff0c\u53ea\u9700\u9a8c\u8bc1\u9501\u5b9a\u6587\u4ef6\u662f\u5426\u9002\u7528\u4e8e\u76ee\u6807\u5e73\u53f0\u3002\u7531\u4e8e\u6f5c\u5728 PEP 508 \u73af\u5883\u6807\u8bb0\u7684\u7ec4\u5408\u6570\u91cf\u4f17\u591a\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u6700\u7ec8\u88ab\u5426\u51b3\u3002\u5f53\u4e00\u4e2a\u9879\u76ee\u60f3\u8981\u8de8\u5e73\u53f0\u65f6\uff0c\u51b3\u5b9a\u5c1d\u8bd5\u8ba9\u50a8\u7269\u67dc\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u662f\u592a\u591a\u4e86\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u9879\u76ee\u53ef\u4ee5\u5728\u5176\u5404\u79cd\u8f6e\u6587\u4ef6\u4e4b\u95f4\u6307\u5b9a\u4e0d\u540c\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u5219\u9700\u8981\u9501\u5b9a\u6587\u4ef6\u64cd\u4f5c\u4e0d\u662f\u6bcf\u4e2a\u9879\u76ee\u800c\u662f\u6bcf\u4e2a\u6587\u4ef6\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6307\u5b9a\u4e0d\u540c\u7684\u4f9d\u8d56\u9879\u975e\u5e38\u5c11\u89c1\u4e14\u4e0d\u53d7\u6b22\u8fce\uff0c\u56e0\u6b64\u88ab\u8ba4\u4e3a\u4e0d\u503c\u5f97\u652f\u6301\u3002\n\u800c\u4e0d\u662f\u5355\u8c03\u9012\u589e\u7684\u6574\u6570\uff0c\u4f7f\u7528\u6d6e\u70b9\u6570\u88ab\u8ba4\u4e3a\u662f\u8bd5\u56fe\u4f20\u8fbe\u8bed\u4e49\u7248\u672c\u63a7\u5236\u3002\u4f46\u662f\uff0c\u6700\u7ec8\uff0c\u5b83\u88ab\u8ba4\u4e3a\u6bd4\u5b83\u7684\u4ef7\u503c\u66f4\u9ebb\u70e6\uff0c\u56e0\u4e3a\u6dfb\u52a0\u65b0\u5bc6\u94a5\u53ef\u80fd\u4f1a\u6784\u6210\u201c\u4e3b\u8981\u201d\u7248\u672c\u66f4\u6539\uff08\u53ea\u6709\u5f53\u5bc6\u94a5\u5b8c\u5168\u53ef\u9009\u65f6\u624d\u4f1a\u88ab\u89c6\u4e3a\u201c\u6b21\u8981\u201d\uff09\uff0c\u5e76\u4e14\u5177\u6709\u6838\u5fc3\u5143\u6570\u636e\u89c4\u8303\u7684\u7ecf\u9a8c[2] \u5efa\u8bae\u6709\u66f4\u5927\u7684\u673a\u4f1a\uff0c\u89e3\u6790\u5c06\u653e\u5bbd\u5e76\u53d8\u5f97\u66f4\u4e25\u683c\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u201c\u91cd\u5927\u201d\u53d8\u5316\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u6574\u6570\u7684\u7b80\u5355\u6027\u662f\u6709\u610f\u4e49\u7684\u3002\u5df2\u5efa\u8bae\u5728\u4ee3\u7801\u8868\u4e2d\u5141\u8bb8\u81ea\u5b9a\u4e49\u7c7b\u578b\u503c\u3002\u5b83\u4eec\u5c06\u4ee5 x- \u4e3a\u524d\u7f00\uff0c\u7136\u540e\u662f\u5de5\u5177\u540d\u79f0\u548c\u7c7b\u578b\uff0c\u5373 x-&lt;\u5de5\u5177&gt;-&lt;\u7c7b\u578b&gt;\u3002\u8fd9\u5c06\u4e3a\u5176\u4ed6\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u3001\u521b\u65b0\u5bb9\u5668\u683c\u5f0f\u7b49\u63d0\u4f9b\u8db3\u591f\u7684\u7075\u6d3b\u6027\uff0c\u4ee5\u4fbf\u5728\u9501\u5b9a\u6587\u4ef6\u4e2d\u6b63\u5f0f\u4f7f\u7528\u3002\u8fd9\u53ef\u80fd\u5305\u62ec\u5305\u542b pyproject-lock.d \u7684\u76ee\u5f55\u7684\u9884\u5b9a\u4e49\u53d8\u91cf\uff0c\u5982 PROJECT_ROOT\uff0c\u56e0\u6b64\u672c\u5730\u76ee\u5f55\u548c\u6587\u4ef6\u7684 URL \u53ef\u4ee5\u76f8\u5bf9\u4e8e\u9879\u76ee\u672c\u8eab\u3002\u611f\u8c22 PDM [8] \u7684 Frost Ming \u548c Poetry [12] \u7684 S\u00e9bastien Eustace \u63d0\u4f9b\u6709\u5173 PEP 508 \u8981\u6c42\u7684\u52a8\u6001\u5b89\u88c5\u65f6\u95f4\u89e3\u51b3\u65b9\u6848\u7684\u8f93\u5165\u3002\u672c\u6587\u6863\u88ab\u7f6e\u4e8e\u516c\u5171\u9886\u57df\u6216 CC0-1.0-Universal \u8bb8\u53ef\u4e0b\uff0c\u4ee5\u66f4\u5bbd\u677e\u7684\u4e3a\u51c6\u3002\u6765\u6e90\uff1ahttps://github.com/python/peps/blob/master/pep-0665.rst", "note_en": "This PEP specifies a file format to list the Python packageinstallation requirements for a project. The list of projects isconsidered exhaustive for the installation target and thus locked down, not requiring any information beyond the platform beinginstalled for and the  lock file listing the required dependenciesto perform a successful installation of dependencies.\n Thanks to  PEP 621, projects have a way to list their direct/top-leveldependencies which they need to have installed. But  PEP 621 also(purposefully) omits two key details that often become important forprojects:\n  Both needs are important for various reasons. One is that without acomplete listing of all dependencies and the specific versions to use,there can be a skew between developers of the same project, ordeveloper and user, based on what versions of a project&#39;s dependencieshappen to be available at the time of installation. For instance,a dependency may have v1 as the newest version on Monday when onedeveloper installed the dependency, while v2 comes out on Wednesdaywhen another developer installs the same dependency. Now the twodevelopers are working against two different versions of the samedependency, which can lead to different outcomes.\n Another important reason for reproducible installations is forsecurity purposes. Guaranteeing that the same binary data isdownloaded and installed for all installations makes sure that no badactor has somehow changed a dependency&#39;s binary data in a maliciousway. A lock file can assist in this guarantee by recording the exactdetails of what should be installed and how to verify that thosedependencies have not changed any bytes unexpectedly.\n The community itself has also shown a need for lock files based on thefact that multiple tools have independently created their own lockfile formats:\n  Other programming language communities have also shown the usefulnessof lock files by developing their own solution to this problem. Someof those communities include:\n To begin, two key terms should be defined. A  locker is a toolwhich  produces a lock file. An  installer is a tool which consumes a lock file to install the appropriate dependencies.\n The file format should be  machine-readable,  machine-writable, and human-readable. Since the assumption is the vast majority of lockfile will be generated by a locker tool, the format should be easyto write by a locker. As install tools will be consuming the lockfile, the format also needs to be easily read by an installer. But theformat should also be readable by a person as people will inevitablybe performing audits on lock files. Having a format that does not lenditself towards being read by people would hinder that. This includeschanges to a lock file being readable in a diff format for auditingchanges. It also means that understanding  why something is inthe lock file should be comprehensible in a diff to assist in auditingchanges.\n The lock file format needs to be general enough to support cross-platform and cross-environment specifications of dependencies.This allows having a single lock file which can work on a myriad ofplatforms and environments when that makes sense. This has been shownas a necessary feature by the various tools in the Python packagingecosystem which already have a lock file format (e.g.  Pipenv  [10], Poetry  [12],  PDM  [8]).\n The lock file also needs to support  reproducible installations. Ifone wants to restrict what the lock file covers to a single platformto guarantee the exact dependencies and files which will be installed,that should be doable. This can be critical in security contexts forprojects like  SecureDrop  [16].\n When a computation could be performed either in the locker orinstaller, the preference is to  perform the computation in thelocker. This is because the assumption is a locker will be executedless frequently than an installer.\n The installer should be able to resolve what to install based entirelyon platform/environment information and what is contained within thelock file. There should be no need to use network or other file system I/O in order to resolvewhat to install.\n The lock file should provide enough flexibility to allow lockers andinstallers to innovate. While the lock file specification provides a common denominator of functionality, it should not act as a ceilingfor functionality.\n Because of the expected size of lock files, no effort was put intomaking lock files  human-writable.\n Lock files MUST use the  TOML  [19] file format thanks to its adoption by PEP 518 for  pyproject.toml. This not only prevents the need tohave another file format in the Python packaging ecosystem, but italso assists in making lock files human-readable.\n Lock files MUST be kept in a directory named   pyproject-lock.d.Lock files MUST end with a  .toml file extension. Projects may haveas many lock files as they want using whatever file name stems theychoose. This PEP prescribes no specific way to automatically selectbetween multiple lock files and installers SHOULD avoid guessing whichlock file is &#34;best-fitting&#34; (this does not preclude situations whereonly a single lock file with a certain name is expected to exist andwill be used by default, e.g. a documentation hosting site alwaysusing a lock file named   pyproject-lock.d/rftd.toml when provided).\n  The version of the lock file being used. The key MUST be specified andit MUST be set to  1. The number MUST always be an integer and itMUST only increment in future updates to the specification. Whatconsistitutes a version number increase is left to future PEPs orstandards changes.\n Tools may create their own sub-tables under the  tool table. Therules for this table match those for  pyproject.toml and its [tool] table from the  build system declaration spec  [1].\n  Each key of the table is the name of a package which MUST benormalized according to the  simple repository API  [17]. If extras arespecified as part of the project to install, the extras are to beincluded in the key name and are to be sorted in lexicographic order.\n version = 1[tool]# Tool-specific table ala PEP 518&#39;s `[tool]` table.[metadata]marker = &#34;python_version&gt;=&#39;3.6&#39;&#34;needs = [&#34;mousebender&#34;][[package.attrs]]version = &#34;21.2.0&#34;required-by = [&#34;mousebender&#34;][[package.attrs.code]]type = &#34;wheel&#34;url = &#34;https://files.pythonhosted.org/packages/20/a9/ba6f1cd1a1517ff022b35acd6a7e4246371dfab08b8e42b829b6d07913cc/attrs-21.2.0-py2.py3-none-any.whl&#34;hash-algorithm=&#34;sha256&#34;hash-value = &#34;149e90d6d8ac20db7a955ad60cf0e6881a3f20d37096140088356da6c716b0b1&#34;[[package.mousebender]]version = &#34;2.0.0&#34;needs = [&#34;attrs&gt;=19.3&#34;, &#34;packaging&gt;=20.3&#34;][[package.mousebender.code]]type = &#34;sdist&#34;url = &#34;https://files.pythonhosted.org/packages/35/bc/db77f8ca1ccf85f5c3324e4f62fc74bf6f6c098da11d7c30ef6d0f43e859/mousebender-2.0.0.tar.gz&#34;hash-algorithm = &#34;sha256&#34;hash-value = &#34;c5953026378e5dcc7090596dfcbf73aa5a9786842357273b1df974ebd79bd760&#34;[[package.mousebender.code]]type = &#34;wheel&#34;url = &#34;https://files.pythonhosted.org/packages/f4/b3/f6fdbff6395e9b77b5619160180489410fb2f42f41272994353e7ecf5bdf/mousebender-2.0.0-py3-none-any.whl&#34;hash-algorithm = &#34;sha256&#34;hash-value = &#34;a6f9adfbd17bfb0e6bb5de9a27083e01dfb86ed9c3861e04143d9fd6db373f7c&#34;[[package.packaging]]version = &#34;20.9&#34;needs = [&#34;pyparsing&gt;=2.0.2&#34;]required-by = [&#34;mousebender&#34;][[package.packaging.code]]type = &#34;git&#34;url = &#34;https://github.com/pypa/packaging.git&#34;commit = &#34;53fd698b1620aca027324001bf53c8ffda0c17d1&#34;[[package.pyparsing]]version = &#34;2.4.7&#34;required-by = [&#34;packaging&#34;][[package.pyparsing.code]]type=&#34;wheel&#34;url = &#34;https://files.pythonhosted.org/packages/8a/bb/488841f56197b13700afd5658fc279a2025a39e22449b7cf29864669b15d/pyparsing-2.4.7-py2.py3-none-any.whl&#34;hash-algorithm=&#34;sha256&#34;hash-value=&#34;ef9d7589ef3c200abe66653d3f1ab1033c3c419ae9b9bdb1240a85b024efc88b&#34;interpreter-tag = &#34;py2.py3&#34;abi-tag = &#34;none&#34;platform-tag = &#34;any&#34;\n Installers MUST implement the direct URL origin of installed distributions spec  [14] as all packagesinstalled from a lock file inherently originate from a URL and not asearch of an index by package name and version.\n Have the user specify which lock file they would like to use in  pyproject-lock.d (e.g.  dev,  prod)\n   Gather the list of package names from  metadata.needs, and foreach listed package ... Repeat the above steps for packages listed in the  needs keyfor each package found to install\n As there is no pre-existing specification regarding lock files, thereare no explicit backwards compatibility concerns.\n As for pre-existing tools that have their own lock file, some updatingwill be required. Most document the lock file name, but not itscontents, in which case the file name of the lock file(s) is theimportant part. For projects which do not commit their lock file toversion control, they will need to update the equivalent of their .gitignore file. For projects that do commit their lock file toversion control, what file(s) get committed will need an update.\n For projects which do document their lock file format like  pipenv  [10],they will very likely need a new major version release.\n Specifically for  Poetry  [12], it has an export command whichshould allow Poetry to support this lock file format even if theproject chose not to adopt this PEP as Poetry&#39;s primary lock fileformat.\n A lock file should not introduce security issues but instead helpsolve them. By requiring the recording of hashes of code, a lock fileis able to help prevent tampering with code since the hash detailswere recorded. A lock file also helps prevent unexpected packageupdates being installed which may be malicious.\n Teaching of this PEP will very much be dependent on the lockers andinstallers being used for day-to-day use. Conceptually, though, userscould be taught that the   pyproject-lock.d directory contains fileswhich specify what should be installed for a project to work. Thebenefits of consistency and security should be emphasized to helpusers realize why they should care about lock files.\n  the decision was made to go with TOML. There was some concern overPython&#39;s standard library lacking a TOML parser, but most packagingtools already use a TOML parser thanks to  pyproject.toml so thisissue did not seem to be a showstopper. Some have also argued againstthis concern in the past by the fact that if packaging tools abhorinstalling dependencies and feel they can&#39;t vendor a package then thepackaging ecosystem has much bigger issues to rectify than needing todepend on a third-party TOML parser.\n  At one point the idea of not using a directory of lock files but asingle lock file which contained all possible lock information wasconsidered. But it quickly became apparent that trying to devise adata format which could encompass both a lock file format which couldsupport multiple environments as well as strict lock outcomes forreproducible builds would become quite complex and cumbersome.\n The idea of supporting a directory of lock files as well as a singlelock file named   pyproject-lock.toml was also considered. But anypossible simplicity from skipping the directory in the case of asingle lock file seemed unnecessary. Trying to define appropriatelogic for what should be the   pyproject-lock.toml file and whatshould go into   pyproject-lock.d seemed unnecessarily complicated.\n The first version of this PEP proposed that the lock file have noconcept of a dependency graph. Instead, the lock file would listexactly what should be installed for a specific platform such thatinstallers did not have to make any decisions about  what to install,only validating that the lock file would work for the target platform.\n This idea was eventually rejected due to the number of combinationsof potential  PEP 508 environment markers. The decision was made thattrying to have lockers generate all possible combinations when aproject wants to be cross-platform would be too much.\n It is technically possible for a project to specify differentdependencies between its various wheel files. Taking that intoconsideration would then require the lock file to operate notper-project but per-file. Luckily, specifying different dependenciesin this way is very rare and frowned upon and so it was deemed notworth supporting.\n  Instead of a monotonically increasing integer, using a float wasconsidered to attempt to convey semantic versioning. In the end,though, it was deemed more hassle than it was worth as adding a newkey would likely constitute a &#34;major&#34; version change (only if thekey was entirely optional would it be considered &#34;minor&#34;), andexperience with the  core metadata spec  [2] suggests there&#39;s a biggerchance parsing will be relaxed and made more strict which is also a&#34;major&#34; change. As such, the simplicity of using an integer madesense.\n It has been suggested to allow for custom  type values in the code table. They would be prefixed with  x- and followed bythe tool&#39;s name and then the type, i.e.   x-&lt;tool&gt;-&lt;type&gt;. Thiswould provide enough flexibility for things such as other versioncontrol systems, innovative container formats, etc. to be officiallyusable in a lock file.\n This could include predefined variables like  PROJECT_ROOT for thedirectory containing   pyproject-lock.d so URLs to local directoriesand files could be relative to the project itself.\n Thanks to Frost Ming of  PDM  [8] and S\u00e9bastien Eustace of  Poetry  [12] forproviding input around dynamic install-time resolution of  PEP 508requirements.\n  This document is placed in the public domain or under theCC0-1.0-Universal license, whichever is more permissive.\nSource:  https://github.com/python/peps/blob/master/pep-0665.rst", "posttime": "2021-08-01 22:11:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,requirements,\u6587\u4ef6", "title": "\u6307\u5b9a Python \u9879\u76ee\u7684\u5b89\u88c5\u8981\u6c42", "title_en": "Specifying Installation Requirements for Python Projects", "transed": 1, "url": "https://www.python.org/dev/peps/pep-0665/", "via": "", "real_tags": ["python", "\u6587\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "68411f7961898dcc5258f156ee2f6960.jpg", "infoid": 1071004, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5173\u4e8e\u98df\u54c1\u751f\u4ea7\u4f26\u7406\u7684\u58a8\u8ff9\u6781\u5c11\u6765\u81ea\u4e0e\u8be5\u4e3b\u9898\u6700\u63a5\u8fd1\u7684\u4eba\uff1a\u519c\u6c11\u81ea\u5df1\u3002\u611f\u8c22\u519c\u4e1a\u4e4b\u795e James Rebanks\uff0c\u4ed6\u7684\u65b0\u4e66\u201c\u7530\u56ed\u4e4b\u6b4c\uff1a\u519c\u6c11\u7684\u65c5\u7a0b\u201d\u89e3\u51b3\u4e86\u5982\u4f55\u5728\u4e0d\u7834\u574f\u571f\u5730\u7684\u60c5\u51b5\u4e0b\u4ece\u571f\u5730\u4e0a\u8d5a\u94b1\u8fd9\u4e00\u4ee4\u4eba\u56f0\u60d1\u7684\u95ee\u9898\u3002\u96f7\u73ed\u514b\u65af 2015 \u5e74\u7684\u56de\u5fc6\u5f55\u201c\u7267\u7f8a\u4eba\u7684\u751f\u6d3b\u201d\u8bb2\u8ff0\u4e86\u4ed6\u662f\u5982\u4f55\u4ece\u82f1\u683c\u5170\u6e56\u533a\u8d2b\u7620\u519c\u573a\u8f8d\u5b66\u7684\u5b69\u5b50\u843d\u5165\u725b\u6d25\uff0c\u63a5\u53d7\u9ad8\u7ea7\u6559\u80b2\uff0c\u5bf9\u571f\u5730\u548c\u7ef5\u7f8a\u6781\u5ea6\u60f3\u5bb6\uff0c\u7136\u540e\u56de\u5bb6\u7684\u6545\u4e8b\u60f3\u529e\u6cd5\u5728\u90a3\u91cc\u4e3a\u81ea\u5df1\u548c\u5bb6\u4eba\u8c0b\u751f\u3002\u5b83\u6210\u4e3a\u7545\u9500\u4e66\uff0c\u4ece\u90a3\u65f6\u8d77\uff0cRebanks \u5c31\u5229\u7528\u4ed6\u7684\u5e73\u53f0\u6765\u89e3\u51b3\u53ef\u6301\u7eed\u519c\u4e1a\u7684\u590d\u6742\u95ee\u9898\u3002\u4ed6\u7684\u60f3\u6cd5\u4ee5\u6292\u60c5\u7684\u7ecf\u5386\u8868\u8fbe\uff0c\u8ffd\u6eaf\u4e86\u4ed6\u5bb6\u65cf\u571f\u5730\u4e0a 40 \u5e74\u548c\u4e09\u4ee3\u4eba\u7684\u519c\u4e1a\uff0c\u56e0\u4e3a\u89c4\u6a21\u3001\u5e02\u573a\u3001\u65b9\u6cd5\u548c\u8d38\u6613\u89c4\u5219\u53d1\u751f\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u53d8\u5316\uff0c\u8fd9\u4e9b\u53d8\u5316\u5df2\u7ecf\u6539\u53d8\u4e86\u5168\u4e16\u754c\u7684\u519c\u4e1a\u3002\u968f\u7740\u51e0\u4e2a\u4e16\u7eaa\u4ee5\u6765\u4e00\u76f4\u662f\u4f20\u7edf\u6807\u51c6\u7684\u5c0f\u89c4\u6a21\u6df7\u5408\u519c\u4e1a\u65f6\u4ee3\u5373\u5c06\u7ed3\u675f\uff0c\u4ed6\u7684\u7956\u7236\u6559\u4ed6\u8015\u79cd\u5de5\u827a\uff0c\u4ed6\u5728\u8fd9\u7247\u571f\u5730\u4e0a\u8015\u79cd\u3002\u6211\u4eec\u901a\u8fc7 Rebanks \u4ee4\u4eba\u56de\u5473\u7684\u8bb2\u6545\u4e8b\u4f53\u9a8c\u90a3\u79cd\u6df1\u5965\u7684\u751f\u6d3b\uff0c\u4e0e\u4ed6\u4e00\u8d77\u5b66\u4e60\u4e0d\u4ec5\u8981\u6b23\u8d4f\u4ed6\u6b63\u5728\u5b66\u4e60\u7167\u6599\u7684\u7ef5\u7f8a\u548c\u5e84\u7a3c\uff0c\u8fd8\u8981\u6b23\u8d4f\u751f\u6d3b\u5728\u5b83\u4eec\u4e4b\u95f4\u548c\u5468\u56f4\u7684\u91ce\u751f\u690d\u7269\u548c\u52a8\u7269\u3002\u968f\u7740\u5168\u7403\u53d8\u5316\u5e2d\u5377\u4ed6\u4eec\u7684\u6751\u5e84\uff0c\u4ed6\u7684\u7236\u4eb2\u63a5\u7ba1\u4e86\u519c\u573a\uff0c\u5e76\u5728\u4f20\u7edf\u548c\u503a\u52a1\u7684\u91cd\u538b\u4e4b\u95f4\u6349\u895f\u89c1\u8098\uff1b\u4ed6\u8bd5\u56fe\u6269\u5927\u548c\u5f3a\u5316\u4ed6\u7684\u65b9\u6cd5\uff0c\u4ee5\u5e94\u5bf9\u5e02\u573a\u4ef7\u683c\u7684\u4e0b\u884c\u538b\u529b\uff0c\u5e76\u5728\u6b64\u8fc7\u7a0b\u4e2d\u5931\u53bb\u4e86\u4ed6\u5de5\u4f5c\u7684\u5927\u90e8\u5206\u4e50\u8da3\u548c\u7f8e\u611f\u3002\u5f53 Rebanks \u81ea\u5df1\u610f\u8bc6\u5230\u65b0\u7684\u3001\u65e0\u60c5\u7684\u6548\u7387\u7684\u540e\u679c\u65f6\uff0c\u4ed6\u6ce8\u610f\u5230\u8fd9\u4e9b\u53d8\u5316\u5982\u4f55\u5a01\u80c1\u519c\u573a\u51e0\u4e2a\u4e16\u7eaa\u4ee5\u6765\u57f9\u80b2\u7684\u6816\u606f\u5730\u548c\u751f\u6001\u7cfb\u7edf\uff0c\u5e76\u524a\u5f31\u4e86\u4ed6\u7684\u519c\u6751\u793e\u533a\u7684\u8054\u7cfb\u3002 Rebanks \u5728\u7b2c\u4e09\u4ee3\u7684\u8270\u5de8\u4efb\u52a1\u662f\u4ee5\u5e73\u8861\u751f\u6001\u3001\u793e\u4f1a\u548c\u7ecf\u6d4e\u8d26\u6237\u7684\u65b9\u5f0f\u6539\u9020\u519c\u573a\u3002\u96f7\u73ed\u514b\u65af\u5bf9\u4ed6\u7684\u63cf\u8ff0\u5f88\u6177\u6168\uff0c\u5e76\u4e14\u8010\u5fc3\u5730\u89e3\u91ca\u4e86\u519c\u6c11\u6bcf\u5929\u505a\u51fa\u7684\u51b3\u5b9a\u519c\u6751\u793e\u533a\u548c\u5730\u7403\u672c\u8eab\u547d\u8fd0\u7684\u9009\u62e9\uff0c\u8fd9\u4e9b\u9009\u62e9\u201c\u5728\u5c01\u95ed\u7684\u519c\u4e1a\u4e16\u754c\u4e4b\u5916\u5f88\u5c11\u88ab\u63d0\u53ca\u3001\u5206\u4eab\u6216\u7406\u89e3\u201d\u3002\u4ed6\u9610\u8ff0\u4e86\u53ef\u6301\u7eed\u6027\u7684\u771f\u6b63\u542b\u4e49\uff0c\u6311\u6218\u4e86\u8ba4\u4e3a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff08\u5982\u5168\u690d\u7269\u4e0d\u9972\u517b\u7272\u755c\uff0c\u6216\u4f7f\u7528\u66f4\u96c6\u7ea6\u5316\u7684\u8015\u4f5c\u65b9\u6cd5\uff09\u5c31\u80fd\u89e3\u51b3\u6211\u4eec\u7684\u73af\u5883\u95ee\u9898\u7684\u795e\u8bdd\u3002\u5bf9\u4e8e\u524d\u9762\u63d0\u51fa\u7684\u95ee\u9898\u2014\u2014\u5982\u4f55\u5728\u4e0d\u7834\u574f\u571f\u5730\u7684\u60c5\u51b5\u4e0b\u4ece\u571f\u5730\u4e0a\u8d5a\u94b1\u2014\u2014\u4ed6\u7ed9\u51fa\u7684\u7b54\u6848\u662f\u4e00\u4e2a\u8bda\u5b9e\u800c\u56f0\u96be\u7684\u7b54\u6848\uff1a\u4f60\u4e0d\u80fd\uff0c\u4ed6\u4e5f\u6ca1\u6709\u3002\u4e0d\u5728\u4ed6\u7684\u4e16\u754c\u89d2\u843d\uff0c\u5728\u73b0\u884c\u5236\u5ea6\u4e0b\u3002 \u201c\u6211\u77e5\u9053\uff0c\u5982\u679c\u6211\u4eec\u4ee5\u66f4\u53ef\u6301\u7eed\u7684\u65b9\u5f0f\u8015\u79cd\u2014\u2014\u800c\u4e14\u6ca1\u6709\u4eba\u613f\u610f\u4ed8\u94b1\u7ed9\u6211\u4eec\u8fd9\u6837\u505a\u2014\u2014\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u7834\u4ea7\u3002\u201d\u65e0\u8bba\u5982\u4f55\uff0cRebanks \u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8015\u79cd\uff0c\u5c06\u6d41\u7ecf\u4ed6\u571f\u5730\u7684\u8d1d\u514b\u4ece\u65e8\u5728\u63d0\u9ad8\u7530\u5730\u751f\u4ea7\u529b\u7684\u4eba\u9020\u5824\u575d\u4e2d\u89e3\u653e\u51fa\u6765\uff0c\u4e3a\u5404\u79cd\u52a8\u690d\u7269\u521b\u9020\u6816\u606f\u5730\uff0c\u5efa\u9020\u571f\u58e4\uff0c\u79cd\u690d\u6811\u6728\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4ed6\u548c\u4ed6\u7684\u5bb6\u4eba\u653e\u7267\u4e86\u4ed6\u5fc3\u7231\u7684\u8d6b\u5fb7\u5a01\u514b\u7f8a\u548c\u4e00\u7fa4\u65b0\u7684\u5e26\u5e26\u52a0\u6d1b\u97e6\u725b\uff0c\u6ca1\u6709\u5f3a\u8feb\u5b83\u4eec\u751f\u4ea7\u8d85\u51fa\u5408\u7406\u9650\u5ea6\uff0c\u5e76\u5728\u519c\u573a\u7684\u8fb9\u7f18\u4e3a\u5927\u81ea\u7136\u7559\u51fa\u7a7a\u95f4\u3002\u7ed3\u679c\uff0c\u9e1f\u513f\u56de\u5230\u4e86\u4ed6\u7684\u7530\u5730\uff0c\u91ce\u751f\u52a8\u7269\u586b\u8865\u4e86\u5b83\u4eec\u7684\u65e7\u58c1\u9f9b\uff0c\u690d\u7269\u666e\u67e5\u5728\u4ed6\u7684 185 \u82f1\u4ea9\u571f\u5730\u4e0a\u8ba1\u7b97\u4e86\u8fd1 200 \u79cd\u690d\u7269\u7fa4\uff0c\u800c\u540c\u6837\u5927\u5c0f\u7684\u96c6\u7ea6\u5316\u8015\u5730\u53ef\u80fd\u6709\u4e09\u56db\u4e2a\u3002 Rebanks \u56e0\u8fd9\u79cd\u5229\u6da6\u8f83\u4f4e\u7684\u5de5\u4f5c\u65b9\u5f0f\u83b7\u5f97\u4e86\u5f88\u591a\u8d5e\u8a89\uff0c\u4f46\u6b63\u5982\u4ed6\u6240\u8bf4\uff0c\u638c\u58f0\u5e76\u4e0d\u80fd\u652f\u4ed8\u8d26\u5355\u3002\u5728\u5168\u7403\u4e0d\u540c\u5730\u65b9\u91c7\u7528\u96c6\u7ea6\u5316\u65b9\u6cd5\u7684\u5927\u578b\u519c\u573a\u5728\u4ef7\u683c\u4e0a\u603b\u662f\u4f1a\u51fb\u8d25\u50cf\u4ed6\u8fd9\u6837\u7684\u5c0f\u519c\u573a\u3002\u4ece\u65b0\u897f\u5170\u8fd0\u6765\u7684\u7f8a\uff0c\u4ee5\u5176\u5e9e\u5927\u7684\u89c4\u6a21\u548c\u5de8\u5927\u7684\u673a\u5668\uff0c\u538b\u4f4e\u4e86\u82f1\u56fd\u7f8a\u8089\u7684\u5e02\u573a\u4ef7\u683c\u3002\u519c\u573a\u51e0\u4e4e\u4e0d\u6323\u94b1\uff0c\u5374\u628a\u6240\u6709\u7684\u94b1\u90fd\u5403\u5149\u4e86\u3002\u76f8\u53cd\uff0c\u4ed6\u9009\u62e9\u79bb\u5f00\u519c\u573a\u4e3a\u5bb6\u4eba\u8c0b\u751f\uff0c\u4ee5\u514d\u80cc\u53db\u4ed6\u6df1\u7231\u7684\u571f\u5730\uff0c\u76f4\u5230\u51fa\u73b0\u66f4\u597d\u7684\u7cfb\u7edf\u3002\u5bf9\u4e8e\u4ed6\u7684\u519c\u573a\u548c\u5176\u4ed6\u7c7b\u4f3c\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e2a\u66f4\u597d\u7684\u7cfb\u7edf\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\uff1f\u4ed6\u8ba4\u4e3a\uff0c\u8fd9\u5c06\u8981\u6c42\u6d88\u8d39\u8005\u504f\u7231\u9644\u8fd1\u79cd\u690d\u7684\u98df\u7269\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u80fd\u591f\u5728\u9700\u8981\u65f6\u7406\u89e3\u5e76\u53c2\u4e0e\u5176\u4e2d\u3001\u770b\u5230\u5b83\u3001\u53c2\u4e0e\u5176\u4e2d\u3001\u8d28\u7591\u548c\u6311\u6218\u5b83\u3002\u5b83\u9700\u8981\u4fdd\u62a4\u63aa\u65bd\uff0c\u4ee5\u5c06\u4e0d\u53ef\u6301\u7eed\u751f\u4ea7\u7684\u5ec9\u4ef7\u98df\u54c1\u6392\u9664\u5728\u5546\u5e97\u548c\u5e02\u573a\u4e4b\u5916\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u5b83\u5c06\u9010\u6b65\u6dd8\u6c70\u57fa\u4e8e\u5316\u77f3\u71c3\u6599\u7684\u5316\u5b66\u54c1\u3002\u8fd9\u4e9b\u60f3\u6cd5\u53ef\u80fd\u9700\u8981\u66f4\u591a\u7684\u53d1\u5c55\uff0c\u4f46 Rebanks \u6e05\u695a\u5730\u8868\u660e\uff0c\u5e0c\u671b\u53d6\u51b3\u4e8e\u8c01\u613f\u610f\u4e3a\u7cae\u98df\u548c\u826f\u597d\u519c\u4e1a\u652f\u4ed8\u5b9e\u9645\u4ef7\u683c\u3002\u5728\u6211\u4eec\u8fd9\u6837\u7684\u4e16\u754c\u4e2d\u4e3a\u50cf\u4ed6\u8fd9\u6837\u7684\u519c\u573a\u521b\u9020\u7a7a\u95f4\u2014\u2014\u4e3a\u81ea\u7136\u3001\u52a8\u7269\u798f\u5229\u3001\u5de5\u827a\u548c\u6280\u80fd\u521b\u9020\u7a7a\u95f4\u2014\u2014\u9700\u8981\u653f\u5e9c\u53ca\u5176\u7eb3\u7a0e\u4eba\u3001\u6148\u5584\u5bb6\u548c\u5f00\u660e\u7684\u6d88\u8d39\u8005\u7684\u652f\u6301\uff0c\u4ed6\u4eec\u613f\u610f\u5e76\u80fd\u591f\u652f\u4ed8\u66f4\u5927\u7684\u8d39\u7528\u3002\u5bf9\u4e8e\u5730\u7403\u548c\u5168\u4e16\u754c\u7684\u519c\u4e1a\u793e\u533a\u6765\u8bf4\uff0c\u98ce\u9669\u518d\u5927\u4e0d\u8fc7\u4e86\u3002", "note_en": "Far too little of the ink spilled on the ethics of food production has come from those who are closest to the subject: farmers themselves. Thank the gods of agriculture for  James Rebanks, whose new book, \u201cPastoral Song: A Farmer\u2019s Journey,\u201d tackles the confounding problem of how to make money from land without wrecking it.\n  Rebanks\u2019s 2015 memoir, \u201c The Shepherd\u2019s Life,\u201d told the story of how he, a dropout kid from a hardscrabble farm in England\u2019s Lake District, fell into Oxford, got a posh education, became wildly homesick for his land and sheep, and returned home to figure out how to make a life there for himself and his family. It became a best seller, and since then, Rebanks has used his platform to address the complex issues of sustainable agriculture.\n His ideas are couched in a lyrical narrative of experience, tracing 40 years and three generations of farming on his family\u2019s land as it is buffeted by the incredible shifts in scale, market, methods and trade rules that have changed farming all over the world. His grandfather, who taught him the craft of farming, worked the land as the era of small-scale mixed farming that had been the traditional standard for centuries was coming to an end. We experience that esoteric life through Rebanks\u2019s evocative storytelling, learning with him to appreciate not only the sheep and crops he\u2019s learning to tend, but the wild plants and animals that live among and around them. As global changes reach their village, his father takes over the farm and becomes pinched between tradition and the weight of debt; he tries to scale up and intensify his methods, in order to meet the downward pressure of market prices, and loses much of the joy and beauty of his work in the process. As Rebanks himself becomes aware of the consequences of the new, ruthless efficiency, he notes how these changes threaten the habitats and ecosystems that the farm had nurtured for centuries, and fray the bonds of his rural community. Rebanks\u2019s difficult job in the third generation is to reinvent the farm in a way that balances the ecological, social and economic accounts.\n Rebanks is generous with his descriptions, and patient in explaining the choices farmers make every day that will decide the fate of rural communities and the planet itself, choices \u201crarely spoken of, shared or understood outside of the closed world of farming.\u201d He addresses what sustainability really means, challenging the myth that simple solutions, like raising all plants and no livestock, or using yet more intensive farming methods, will solve our environmental problems.\n The answer he gives to the question posed up front \u2014 how to make money from land without wrecking it \u2014 is an honest and difficult one: You can\u2019t, and he doesn\u2019t. Not in his corner of the world, under the current system. \u201cI knew that if we farmed in more sustainable ways \u2014 and no one wanted to pay us to do that \u2014 then we would just go bankrupt.\u201d Rebanks farms that way anyway, freeing the beck that flows through his land from the man-made banks meant to make fields more productive, creating habitat for a wide range of plant and animal life, building the soil, planting trees. Meanwhile, he and his family graze his beloved Herdwick sheep plus a new herd of Belted Galloway cattle, without forcing them to produce beyond their reasonable limits, and leaving room at the margins of the farm for nature. As a result, the birds come back to his fields, wild animals fill their old niches and a botanical census counts nearly 200 species of flora on his 185 acres, where an intensively farmed field of the same size might hold three or four.\n Rebanks gets plenty of accolades for this less profitable style of work, but, as he says, applause doesn\u2019t pay the bills. Large-scale farms using intensive methods in different places around the globe will always beat a small farm like his on price. Shiploads of sheep from New Zealand, with its vast scale and huge machines, sink the market price of lamb in England. The farm makes almost no money, and devours it all. Instead, he chooses to make a living for his family off the farm, so as not to betray the land he loves so much, until a better system emerges.\n What would that better system look like, for his farm and others like it? He believes it would require consumers to favor food grown nearby, so they can understand and engage with it, see it, participate in it, question and challenge it when needed. It would need protections to keep unsustainably produced cheap food out of shops and markets. And it would phase out fossil fuel-based chemicals, over time. These ideas could use more development, but Rebanks shows clearly that hope hinges on who exactly is willing to pay the real price of food and good farming. Creating space for a farm like his, in a world like ours \u2014 space for nature, animal welfare, craft and skill \u2014 requires buy-in from governments and their taxpayers, philanthropists and enlightened consumers who are willing and able to foot a bigger bill. The stakes couldn\u2019t be higher for the planet, and for agricultural communities worldwide.", "posttime": "2021-08-01 22:11:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ba4\u4e3a,farmer,\u519c\u573a", "title": "\u8ba4\u4e3a\u53ef\u6301\u7eed\u6027\u5f88\u7b80\u5355\uff1f\u8fd9\u4e2a\u7267\u7f8a\u4eba\u60f3\u8bf4\u4e00\u53e5\u8bdd", "title_en": "Think Sustainability Is Simple? This Sheep Farmer Would Like a Word", "transed": 1, "url": "https://www.nytimes.com/2021/08/01/books/review/pastoral-song-james-rebanks.html", "via": "", "real_tags": ["\u8ba4\u4e3a", "farmer", "\u519c\u573a"]}]