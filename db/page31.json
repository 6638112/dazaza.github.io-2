[{"category": "", "categoryclass": "", "imagename": "ff0287210796737fd34a6056d629fa7a.png", "infoid": 1072112, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60a8\u5728\u516c\u53f8\u7684\u751f\u4ea7\u73af\u5883\u4e2d\u89c1\u8fc7\u7684\u6700\u90aa\u6076\u6216\u6700\u5371\u9669\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u4ec0\u4e48\uff1f\u6211\u4ece\u672a\u9047\u5230\u8fc7\u6211\u8ba4\u4e3a\u662f\u6545\u610f\u6076\u610f\u548c\u90aa\u6076\u7684\u751f\u4ea7\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u5f88\u60f3\u77e5\u9053\u5176\u4ed6\u4eba\u53d1\u73b0\u4e86\u4ec0\u4e48\u3002\u6211\u89c1\u8fc7\u7684\u6700\u5371\u9669\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u5b58\u50a8\u8fc7\u7a0b\uff0c\u8ddd\u79bb\u6211\u4eec\u7684\u6838\u5fc3\u751f\u4ea7\u6570\u636e\u5e93\u670d\u52a1\u5668\u6709\u4e24\u4e2a\u94fe\u63a5\u670d\u52a1\u5668\u3002\u8be5\u5b58\u50a8\u8fc7\u7a0b\u63a5\u53d7\u4efb\u4f55 NVARCHAR(8000) \u53c2\u6570\u5e76\u901a\u8fc7\u53cc\u8df3 sp_executeSQL \u547d\u4ee4\u5728\u76ee\u6807\u751f\u4ea7\u670d\u52a1\u5668\u4e0a\u6267\u884c\u8be5\u53c2\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0csp_executeSQL \u547d\u4ee4\u6267\u884c\u4e86\u53e6\u4e00\u4e2a sp_executeSQL \u547d\u4ee4\uff0c\u4ee5\u4fbf\u8df3\u8f6c\u4e24\u4e2a\u94fe\u63a5\u7684\u670d\u52a1\u5668\u3002\u54e6\uff0c\u94fe\u63a5\u670d\u52a1\u5668\u5e10\u6237\u5728\u76ee\u6807\u751f\u4ea7\u670d\u52a1\u5668\u4e0a\u5177\u6709\u7cfb\u7edf\u7ba1\u7406\u5458\u6743\u9650\u3002 1 \u6211\u5199\u8fc7\u6211\u4ee5\u524d\u5728\u8fd9\u91cc\u548c\u8fd9\u91cc\u5de5\u4f5c\u8fc7\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u6211\u516c\u53f8\u4ece\u5370\u5ea6\u7ee7\u627f\u4e8613\u4e07\u884c\u5783\u573e\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u662f\u7528 C# \u7f16\u5199\u7684\uff1b\u8fd9\u662f\u4e00\u4e2a\u67dc\u5458\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f53\u4f60\u53bb\u94f6\u884c\u65f6\uff0c\u67dc\u5458\u5728\u67dc\u53f0\u540e\u9762\u4f7f\u7528\u7684\u90a3\u79cd\u8f6f\u4ef6\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u6bcf\u5929\u5d29\u6e83 40-50 \u6b21\uff0c\u800c\u4e14\u6839\u672c\u65e0\u6cd5\u91cd\u6784\u4e3a\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u3002\u6211\u7684\u516c\u53f8\u4e0d\u5f97\u4e0d\u5728 12 \u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u91cd\u65b0\u7f16\u5199\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u90aa\u6076\u7684\uff1f\u56e0\u4e3a\u770b\u5230\u6e90\u4ee3\u7801\u5c31\u8db3\u4ee5\u8ba9\u4e00\u4e2a\u7406\u667a\u7684\u4eba\u53d1\u75af\uff0c\u4e00\u4e2a\u7406\u667a\u7684\u75af\u5b50\u3002\u7528\u4e8e\u7f16\u5199\u6b64\u5e94\u7528\u7a0b\u5e8f\u7684\u626d\u66f2\u903b\u8f91\u53ef\u80fd\u53ea\u662f\u53d7\u5230\u6d1b\u592b\u514b\u62c9\u592b\u7279\u5f0f\u5669\u68a6\u7684\u542f\u53d1\u3002\u6b64\u5e94\u7528\u7a0b\u5e8f\u7684\u72ec\u7279\u529f\u80fd\u5305\u62ec\uff1a \u5728 130,000 \u884c\u4ee3\u7801\u4e2d\uff0c\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5305\u542b 5 \u4e2a\u7c7b\uff08\u4e0d\u5305\u62ec\u8868\u5355\u6587\u4ef6\uff09\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u516c\u5171\u9759\u6001\u7c7b\u3002\u4e00\u4e2a\u7c7b\u79f0\u4e3a Globals.cs\uff0c\u5176\u4e2d\u5305\u542b 1000 \u548c 1000 \u548c 1000 \u4e2a\u516c\u5171\u9759\u6001\u53d8\u91cf\uff0c\u7528\u4e8e\u4fdd\u5b58\u5e94\u7528\u7a0b\u5e8f\u7684\u6574\u4e2a\u72b6\u6001\u3002\u8fd9\u4e94\u4e2a\u7c7b\u603b\u5171\u5305\u542b 20,000 \u884c\u4ee3\u7801\uff0c\u5176\u4f59\u4ee3\u7801\u5d4c\u5165\u5728\u8868\u5355\u4e2d\u3002\u4f60\u4e00\u5b9a\u60f3\u77e5\u9053\uff0c\u7a0b\u5e8f\u5458\u662f\u5982\u4f55\u5728\u6ca1\u6709\u4efb\u4f55\u7c7b\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u5982\u6b64\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\uff1f\u4ed6\u4eec\u7528\u4ec0\u4e48\u6765\u8868\u793a\u4ed6\u4eec\u7684\u6570\u636e\u5bf9\u8c61\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u7a0b\u5e8f\u5458\u4ec5\u4ec5\u901a\u8fc7\u7ec4\u5408 ArrayLists\u3001HashTables \u548c DataTables \u5c31\u6210\u529f\u5730\u91cd\u65b0\u53d1\u660e\u4e86\u6211\u4eec\u90fd\u5b66\u5230\u7684\u5173\u4e8e OOP \u7684\u4e00\u534a\u6982\u5ff5\u3002\u6211\u4eec\u770b\u5230\u4e86\u5f88\u591a\u8fd9\u6837\u7684\uff1a\n\u8bf7\u8bb0\u4f4f\uff0c\u4e0a\u9762\u7684\u6570\u636e\u7ed3\u6784\u90fd\u4e0d\u662f\u5f3a\u7c7b\u578b\u7684\uff0c\u56e0\u6b64\u60a8\u5fc5\u987b\u5c06\u5217\u8868\u4e2d\u7684\u4efb\u4f55\u795e\u79d8\u5bf9\u8c61\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u7c7b\u578b\u3002\u4ec5\u4f7f\u7528 ArrayLists\u3001HashTables \u548c DataTables \u5c31\u53ef\u4ee5\u521b\u5efa\u4ec0\u4e48\u6837\u7684\u590d\u6742\u7684\u3001\u7c7b\u4f3c\u4e8e Rube Goldberg \u7684\u6570\u636e\u7ed3\u6784\uff0c\u771f\u662f\u4ee4\u4eba\u60ca\u5947\u3002\u8981\u5206\u4eab\u5982\u4f55\u4f7f\u7528\u4e0a\u9762\u8be6\u8ff0\u7684\u5bf9\u8c61\u6a21\u578b\u7684\u793a\u4f8b\uff0c\u8bf7\u8003\u8651 Accounts\uff1a\u539f\u59cb\u7a0b\u5e8f\u5458\u4e3a\u5e10\u6237\u7684\u6bcf\u4e2a\u53ef\u7406\u89e3\u7684\u5c5e\u6027\u521b\u5efa\u4e86\u4e00\u4e2a\u5355\u72ec\u7684 HashTable\uff1a\u4e00\u4e2a\u540d\u4e3a hstAcctExists\u3001hstAcctNeedsOverride\u3001hstAcctFirstName \u7684 HashTable\u3002\u6240\u6709\u8fd9\u4e9b\u54c8\u5e0c\u8868\u7684\u952e\u90fd\u662f\u201c|\u201d\u5206\u9694\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u4ee5\u60f3\u5230\u7684\u952e\u5305\u62ec\u201c123456|DDA\u201d\u3001\u201c24100|SVG\u201d\u3001\u201c100|LNS\u201d\u7b49\u3002\u7531\u4e8e\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u72b6\u6001\u5f88\u5bb9\u6613\u4ece\u5168\u5c40\u53d8\u91cf\u4e2d\u8bbf\u95ee\uff0c\u7a0b\u5e8f\u5458\u53d1\u73b0\u6ca1\u6709\u5fc5\u8981\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u65b9\u6cd5\u3002\u6211\u4f1a\u8bf4 90% \u7684\u65b9\u6cd5\u91c7\u7528 0 \u53c2\u6570\u3002\u5728\u5c11\u6570\u8fd9\u6837\u505a\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6240\u6709\u53c2\u6570\u90fd\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f20\u9012\uff0c\u800c\u4e0d\u7ba1\u5b57\u7b26\u4e32\u4ee3\u8868\u4ec0\u4e48\u3002\u6ca1\u6709\u526f\u4f5c\u7528\u7684\u529f\u80fd\u4e0d\u5b58\u5728\u3002\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u4fee\u6539\u4e86 Globals \u7c7b\u4e2d\u7684 1 \u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u3002\u5e76\u975e\u6240\u6709\u7684\u526f\u4f5c\u7528\u90fd\u6709\u610f\u4e49\uff1b\u4f8b\u5982\uff0c\u5176\u4e2d\u4e00\u79cd\u8868\u5355\u9a8c\u8bc1\u65b9\u6cd5\u6709\u4e00\u4e2a\u795e\u79d8\u7684\u526f\u4f5c\u7528\uff0c\u5373\u4e3a\u5b58\u50a8 Globals.lngAcctNum \u7684\u4efb\u4f55\u5e10\u6237\u8ba1\u7b97\u8d37\u6b3e\u7684\u8d85\u989d\u548c\u77ed\u989d\u4ed8\u6b3e\u3002\u5c3d\u7ba1\u6709\u5f88\u591a\u5f62\u5f0f\uff0c\u4f46\u53ea\u6709\u4e00\u79cd\u5f62\u5f0f\u53ef\u4ee5\u7edf\u6cbb\u5b83\u4eec\uff1afrmMain.cs\uff0c\u5176\u4e2d\u5305\u542b\u9ad8\u8fbe 20,000 \u884c\u7684\u4ee3\u7801\u3002 frmMain \u505a\u4e86\u4ec0\u4e48\uff1f\u4e00\u5207\u3002\u5b83\u67e5\u5e10\u3001\u6253\u5370\u6536\u636e\u3001\u53d1\u653e\u73b0\u91d1\uff0c\u5b83\u4ec0\u4e48\u90fd\u505a\u3002\u6709\u65f6\u5176\u4ed6\u5f62\u5f0f\u9700\u8981\u8c03\u7528 frmMain \u4e0a\u7684\u65b9\u6cd5\u3002\u4e0e\u5176\u5c06\u8868\u5355\u4e2d\u7684\u4ee3\u7801\u5206\u89e3\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7c7b\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u8c03\u7528\u4ee3\u7801\uff1a\u5c3d\u7ba1\u5b83\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u4e0d\u53ef\u89c1\u7684\u8868\u5355\u6765\u6267\u884c\u4e1a\u52a1\u903b\u8f91\uff0c\u4f46\u60a8\u8ba4\u4e3a\u8868\u5355\u5982\u4f55\u77e5\u9053\u8981\u67e5\u627e\u54ea\u4e2a\u5e10\u6237\uff1f\u8fd9\u5f88\u7b80\u5355\uff1a\u8868\u5355\u53ef\u4ee5\u8bbf\u95ee Globals.lngAcctNum \u548c Globals.strAcctType\u3002 \uff08\u8c01\u4e0d\u559c\u6b22\u5308\u7259\u5229\u7b26\u53f7\uff1f\uff09\n\u4ee3\u7801\u91cd\u7528\u662f ctrl-c\u3001ctrl-v \u7684\u540c\u4e49\u8bcd\u3002\u6211\u53d1\u73b0 200 \u884c\u65b9\u6cd5\u5728 20 \u4e2a\u8868\u5355\u4e2d\u590d\u5236/\u7c98\u8d34\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5947\u602a\u7684\u7ebf\u7a0b\u6a21\u578b\uff0c\u6211\u559c\u6b22\u79f0\u4e4b\u4e3a\u7ebf\u7a0b\u548c\u8ba1\u65f6\u5668\u6a21\u578b\uff1a\u6bcf\u4e2a\u751f\u6210\u7ebf\u7a0b\u7684\u8868\u5355\u90fd\u6709\u4e00\u4e2a\u8ba1\u65f6\u5668\u3002\u4ea7\u751f\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u542f\u52a8\u4e00\u4e2a\u6709 200 \u6beb\u79d2\u5ef6\u8fdf\u7684\u8ba1\u65f6\u5668\uff1b\u4e00\u65e6\u8ba1\u65f6\u5668\u542f\u52a8\uff0c\u5b83\u4f1a\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u8bbe\u7f6e\u4e86\u4e00\u4e9b\u9b54\u6cd5\u5e03\u5c14\u503c\uff0c\u7136\u540e\u5b83\u4f1a\u4e2d\u6b62\u7ebf\u7a0b\u3002\u4ea7\u751f\u7684 ThreadAbortException \u88ab\u541e\u4e86\u3002\u60a8\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u79cd\u6a21\u5f0f\u53ea\u4f1a\u770b\u5230\u4e00\u6b21\uff0c\u4f46\u6211\u81f3\u5c11\u5728 10 \u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u53d1\u73b0\u4e86\u5b83\u3002\u8bf4\u5230\u7ebf\u7a0b\uff0c\u5173\u952e\u5b57\u201c\u9501\u201d\u4ece\u672a\u51fa\u73b0\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u7ebf\u7a0b\u65e0\u9700\u9501\u5b9a\u5373\u53ef\u81ea\u7531\u64cd\u4f5c\u5168\u5c40\u72b6\u6001\u3002\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5305\u542b\u4e00\u4e2a try/catch \u5757\u3002\u6bcf\u4e2a\u5f02\u5e38\u90fd\u88ab\u8bb0\u5f55\u5e76\u541e\u4e0b\u3002\u4e00\u4e9b\u5929\u624d\u53d1\u73b0\u60a8\u53ef\u4ee5\u5c06\u591a\u4e2a\u8868\u5355\u63a7\u4ef6\u8fde\u63a5\u5230\u540c\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002\u7a0b\u5e8f\u5458\u662f\u600e\u4e48\u5904\u7406\u7684\uff1f private void OperationButton_Click(object sender, EventArgs e){ Button btn = (Button)sender; if (blnModeIsAddMc) { AddMcOperationKeyPress(btn); } else { string strToBeAppendedLater = string.Empty; if (btn.Name != &quot;btnBS&quot;) { UpdateText(); } if (txtEdit.Text.Trim() != &quot;Error&quot;) { SaveFormState(); } switch (btn.Name) { case &quot;btnC&quot;: ResetValues();\u4f11\u606f; case &quot;btnCE&quot;: txtEdit.Text = &quot;0&quot;;\u4f11\u606f; case &quot;btnBS&quot;: if (!blnStartedNew) { string EditText = txtEdit.Text.Substring(0, txtEdit.Text.Length - 1); DisplayValue((EditText == string.Empty) ? &quot;0&quot; : EditText); } \u4f11\u606f; case &quot;btnPercent&quot;: blnAfterOp = true; if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, false); decCurrValue = decResultValue * decCurrValue / intFormatFactor; DisplayValue(GetValueString(decCurrValue)); AddToTape(GetValueString(decCurrValue), string.Empty, true, false); strToBeAppendedLater = GetValueString(decResultValue).PadLeft(20) + strOpPressed.PadRight(3); if (arrLstTapeHist.Count == 0) { arrLstTapeHist.Add(strToBeAppendedLater); blnEqualOccurred = false; blnStartedNew = true; } \u4f11\u606f; case &quot;btnAdd&quot;: case &quot;btnSubtract&quot;: case &quot;btnMultiply&quot;: case &quot;btnDivide&quot;: blnAfterOp = true; if (txtEdit.Text.Trim() == &quot;Error&quot;) { btnC.PerformClick();\u8fd4\u56de; } if (blnNumPressed || blnEqualOccurred) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (Operation()) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(GetValueString(decResultValue)); } else { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(&quot;\u9519\u8bef&quot;); strOpPressed = btn.Text; blnEqualOccurred = \u5047\uff1b blnNumPressed = \u5047\uff1b } } else { strOpPressed = btn.Text; AddToTape(GetValueString(0), (string)btn.Text, false, false); } if (txtEdit.Text.Trim() == &quot;Error&quot;) { AddToTape(&quot;Error&quot;, string.Empty, true, true); btnC.PerformClick(); txtEdit.Text = &quot;\u9519\u8bef&quot;; } \u4f11\u606f; case &quot;btnEqual&quot;: blnAfterOp = false; if (strOpPressed != string.Empty || strPrevOp != string.Empty) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (OperationEqual()) { DisplayValue(GetValueString(decResultValue)); } else { DisplayValue(&quot;\u9519\u8bef&quot;); } if (!blnEqualOccurred) { strPrevOp = strOpPressed; decHistValue = decCurrValue; blnNumPressed = \u5047\uff1b blnEqualOccurred = \u771f\uff1b strOpPressed = string.Empty; } } \u4f11\u606f; case &quot;btnSign&quot;: GetValueDecimal(txtEdit.Text, out decCurrValue); DisplayValue(GetValueString(-1 * decCurrValue));\u4f11\u606f; } }}\nstrDrCr = chkCredits.Checked &amp;&amp; chkDebits.Checked ? string.Empty : chkDebits.Checked \uff1f \u201cD\u201d\uff1achkCredits.Checked \uff1f \u201cC\u201d\uff1a\u201cN\u201d\uff1b if (strDefaultVals == strNowVals &amp;&amp; (dsTranHist == null ? true : dsTranHist.Tables.Count == 0 ? true : dsTranHist.Tables[0].Rows.Count == 0 ? true : false))\u6f14\u793a\u4e86 StringBuilder \u7684\u5178\u578b\u8bef\u7528\u3002\u8bf7\u6ce8\u610f\u7a0b\u5e8f\u5458\u5982\u4f55\u5728\u5faa\u73af\u4e2d\u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5b57\u7b26\u4e32\u9644\u52a0\u5230 StringBuilder\uff1a private string CreateGridString(){ string strTemp = string.Empty; StringBuilder strBuild = new StringBuilder(); foreach (DataGridViewRow dgrRow in dgvAcctHist.Rows) { strTemp = ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_chknum&quot;].ToString().PadLeft(8, &#39; &#39;); strTemp += &quot; &quot;; strTemp += Convert.ToDateTime(((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_trandt&quot;]).ToString(&quot;MM/dd/yyyy&quot;); strTemp += &quot; &quot;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_DrAmount&quot;].ToString().PadLeft(15, &#39; &#39;); strTemp += &quot; &quot;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_CrAmount&quot;].ToString().PadLeft(15, &#39; &#39;); strTemp += &quot; &quot;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_trancd&quot;].ToString().PadLeft(4, &#39; &#39;); strTemp += &quot; &quot;; strTemp += GetDescriptionString(((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_desc&quot;].ToString(), 30, 62); strBuild.AppendLine(strTemp); } strCreateGridString = strBuild.ToString(); return strCreateGridString;//strBuild.ToString();} \u8868\u4e0a\u4e0d\u5b58\u5728\u4e3b\u952e\u3001\u7d22\u5f15\u6216\u5916\u952e\u7ea6\u675f\uff0c\u51e0\u4e4e\u6240\u6709\u5b57\u6bb5\u90fd\u662f varchar(50) \u7c7b\u578b\uff0c\u5e76\u4e14 100% \u7684\u5b57\u6bb5\u53ef\u4ee5\u4e3a\u7a7a\u3002\u6709\u8da3\u7684\u662f\uff0c\u4f4d\u57df\u4e0d\u7528\u4e8e\u5b58\u50a8\u5e03\u5c14\u6570\u636e\uff1b\u76f8\u53cd\uff0c\u4f7f\u7528\u4e86 char(1) \u5b57\u6bb5\uff0c\u5b57\u7b26\u201cY\u201d\u548c\u201cN\u201d\u5206\u522b\u7528\u4e8e\u8868\u793a\u771f\u548c\u5047\u3002 ALTER PROCEDURE [dbo].[Get_TransHist] ( @TellerID int = null, @CashDrawer int = null, @AcctNum bigint = null, @StartDate datetime = null, @EndDate datetime = null, @StartTranAmt decimal(18,2) = null , @EndTranAmt decimal(18,2) = null, @TranCode int = null, @TranType int = null )AS \u58f0\u660e@WhereCond Varchar(1000) \u58f0\u660e@strQuery Varchar(2000) Set @WhereCond = &#39; &#39; Set @strQuery = &#39; &#39; \u5982\u679c\u4e0d\u662f@TellerID \u4e3anull Set @WhereCond = @WhereCond + &#39; AND TT.TellerID = &#39; + Cast(@TellerID as varchar) \u5982\u679c\u4e0d\u662f@CashDrawer \u4e3anull Set @WhereCond = @WhereCond + &#39; AND TT.CDId = &#39; + Cast(@CashDrawer as varchar) \u5982\u679c\u4e0d\u662f @AcctNum \u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.AcctNbr = &#39; + Cast(@AcctNum as varchar) \u5982\u679c\u4e0d\u662f @StartDate \u4e3a null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT.PostDate,121) &gt;= &#39;&#39;&#39; + Convert(varchar,@StartDate,121) + &#39;&#39;&#39;&#39; \u5982\u679c\u4e0d\u662f @EndDate \u4e3a null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT .PostDate,121) &lt;= &#39;&#39;&#39; + Convert(varchar,@EndDate,121) + &#39;&#39;&#39;&#39; \u5982\u679c\u4e0d\u662f@TranCode\u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.TranCode = &#39; + Cast(@TranCode as varchar) \u5982\u679c\u4e0d\u662f @EndTranAmt \u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &lt;= &#39; + Cast(@EndTranAmt as varchar) \u5982\u679c\u4e0d\u662f @StartTranAmt \u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &gt;= &#39; + Cast(@StartTranAmt as varchar) \u5982\u679c\u4e0d\u662f (@TranType is null or @TranType = -1) Set @WhereCond = @WhereCond + &#39; AND TT.DocType = &#39; + Cast(@TranType as varchar) -- \u6839\u636e\u8fc7\u6ee4\u5668\u83b7\u53d6\u67dc\u5458\u4ea4\u6613\u8bb0\u5f55 Set @strQuery = &#39;SELECT TT.TranAmt as [Transaction Amount], TT.TranCode as [Transaction Code], RTrim(LTrim(TT.TranDesc)) \u4f5c\u4e3a[\u4ea4\u6613\u63cf\u8ff0], TT.AcctNbr \u4f5c\u4e3a[\u8d26\u53f7], TT.TranID \u4f5c\u4e3a[\u4ea4\u6613\u7f16\u53f7], Convert(varchar,TT.ActivityDateTime,101) \u4f5c\u4e3a[\u6d3b\u52a8\u65e5\u671f] ], Convert(varchar,TT.EffDate,101) \u4e3a[\u751f\u6548\u65e5\u671f], Convert(varchar,TT.PostDate,101) \u4e3a[\u53d1\u5e03\u65e5\u671f], Convert(varchar,TT.ActivityDateTime,108) \u4e3a[\u65f6\u95f4], TT .BatchID, TT.ItemID, isnull(TT.DocumentID, 0) as DocumentID, TT\u3002 TellerName, TT.CDId, TT.ChkNbr, RTrim(LTrim(DT.DocTypeDescr)) as DocTypeDescr, (CASE WHEN TT.TranMode = &#39;&#39;F&#39;&#39; THEN &#39;&#39;Offline&#39;&#39; ELSE &#39;&#39;Online&#39;&#39; END) TranMode, DispensedYN FROM TellerTrans TT WITH (NOLOCK) LEFT OUTER JOIN DocumentTypes DT WITH (NOLOCK) on DocType = DocumentType WHERE IsNull(TT.DeletedYN, 0) = 0 &#39; + @WhereCond + &#39; Order By BatchId, TranID, ItemID&#39; Exec (@strQuery) ) \u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u4e2a 130,000 \u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u5927\u95ee\u9898\u662f\uff1a\u6ca1\u6709\u5355\u5143\u6d4b\u8bd5\u3002\n10 \u4ee4\u4eba\u6cae\u4e27\u7684\u662f\uff0c\u5728\u67d0\u4e2a\u5730\u65b9\uff0c\u4e00\u4e9b\u7f16\u5199\u4ee3\u7801\u7684\u7a0b\u5e8f\u5458\u8ba4\u4e3a\u4ed6\u4eec\u505a\u5f97\u5f88\u597d\uff0c\u5e76\u5728\u4ed6\u7684\u7b80\u5386\u4e0a\u70ab\u8000\u3002 \u201c\u4e0d\u719f\u7ec3\u800c\u4e14\u4e0d\u77e5\u9053\u5b83\u201d\u2014\u2014\u585e\u5c14\u5409\u5965\u00b7\u963f\u79d1\u65af\u5854\uff0c\u563f\uff0c\u4f60\u5199\u7684\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6211\u8ba4\u4e3a\u5b83\u5f88\u597d\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u81ea\u5df1\u505a\u5f97\u66f4\u597d\uff0c\u4f60\u5e94\u8be5\u5c1d\u8bd5\u2014\u2014\u8d1d\u65af\u5361 \u4e00\u4e9b\u7ba1\u7406\u5386\u53f2\u7684\u6de1\u5316\u7248\u672c\u6700\u7ec8\u51fa\u73b0\u5728 DailyWTF \u4e0a\u4eca\u5929\uff1athedailywtf.com/Articles/eTeller-Horror.aspx \u2013 Juliet 4 LOL \u2013 \u8fd9\u5c31\u50cf\u7528\u900f\u660e\u4fe1\u5c01\u5206\u53d1\u5de5\u8d44\u5355\u3001\u94f6\u884c\u5bf9\u8d26\u5355\u7b49\u3002 :-) \u2013 \u514b\u91cc\u65af\u8482\u5b89\u00b7\u6d77\u7279\u00b7\u7ea6\u5947\u3002\u6211\u66fe\u7ecf\u5728\u5546\u4e1a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u5e93\u4e2d\u53d1\u73b0\u4e86\u770b\u8d77\u6765\u5f88\u597d\u6563\u5217\u7684\u5bc6\u7801\u3002\u539f\u6765\u5b83\u4eec\u53ea\u662f\u5b58\u50a8\u5728 VARBINARY \u5217\u4e2d\u7684\u7eaf\u6587\u672c\uff0c\u56e0\u6b64\u60a8\u4e4d\u4e00\u770b\u65e0\u6cd5\u5206\u8fa8\u3002 - \u9a6c\u7279\u00b7\u5409\u5e03\u68ee\u8bf4\u6765\u60b2\u54c0\uff0c\u8fd9\u57fa\u672c\u4e0a\u5728\u6211\u7ee7\u627f\u4e86\u4e00\u4e2a\u9879\u76ee\u7684\u5bc6\u7801\u52a0\u5bc6\u3002\u5c3d\u7ba1\u4ed6\u4eec\u65e7\u7684\u81ea\u5b9a\u4e49\u7f16\u5199\u7684 base64 \u7f16\u7801\u51fd\u6570\u505a\u9519\u4e86\uff0c\u6240\u4ee5\u6211\u60f3\u8fd9\u6709\u4ec0\u4e48\u597d\u5904 ;-) \u2013 Allbite \u5728\u4e00\u4e2a\u63a5\u53d7\u4fe1\u7528\u5361\u4ed8\u6b3e\u7684\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u8fc7\u53bb\u5e38\u5e38\u5b58\u50a8\u5b8c\u6574\u7684\u4fe1\u7528\u5361\u53f7\u7801\u4ee5\u53ca\u59d3\u540d\u3001\u5230\u671f\u65e5\u671f\u7b49\u3002\n\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u662f\u975e\u6cd5\u7684\uff0c\u9274\u4e8e\u6211\u4eec\u5f53\u65f6\u6b63\u5728\u4e3a\u53f8\u6cd5\u90e8\u7f16\u5199\u7a0b\u5e8f\uff0c\u8fd9\u5177\u6709\u8bbd\u523a\u610f\u5473\u3002 5 \u6709\u8c01\u77e5\u9053\u4e9a\u9a6c\u900a\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\uff1f\u6216\u8005\u5982\u679c\u60a8\u8981\u6c42\u7528\u6237\u8bb8\u53ef\u662f\u5426\u5408\u6cd5\uff1f \u2013 Davy Landman @Davy \u2013 \u52a0\u5bc6\u3002\u5982\u679c\u5b83\u662f\u52a0\u5bc6\u7684\u5e76\u4e14\u53ea\u80fd\u5728\u9700\u8981\u77e5\u9053\u7684\u60c5\u51b5\u4e0b\u8bbf\u95ee\uff0c\u5219\u5b58\u50a8\u662f\u5408\u6cd5\u7684\u3002\u6709\u5f88\u591a\u5173\u4e8e\u5f3a\u5ea6\u3001\u4fdd\u7559\u3001DMZ \u7b49\u7684\u89c4\u5219\uff0c\u8bf7\u53c2\u9605\u6b64\u5904 pcisecuritystandards.org/security_standards/pci_dss.shtml \u2013 Luke Schafer 5 \u597d\u6d88\u606f\u662f\u6709\u4e00\u4e2a FIXME\uff0c\u56e0\u6b64 IDE \u53ef\u4ee5\u5c06\u60a8\u5f15\u5bfc\u81f3\u8be5\u884c\u3002 \u2013 Josh Lee @Chadworthington\uff1a\u5982\u679c\u662f\u6545\u610f\u7684\uff0c\u8bc4\u8bba\u5e94\u8be5\u662f /* DON&#39;T FIXME\uff01 */ ;P \u2013 David \u5728\u6784\u5efa\u5546\u4e1a\u7248\u672c\u65f6\uff0c\u8fd9\u79cd\u4e1c\u897f\u4e0d\u662f\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u4e86\u5417\uff1f \u2013 Attila Kun \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u6ca1\u6709\u201c\u4f18\u5316\u201d\u5faa\u73af\uff1b\u5b83\u4f1a\u201c\u4f18\u5316\u201d\u4ec0\u4e48\uff1f\u6b64\u5916\uff0c\u201c\u6545\u610f\u7834\u574f\u201d\u662f\u4e00\u4e2a\u786e\u5b9a\u7684\u53ef\u80fd\u6027\u3002 \u201cFIXME\u201d\u53ef\u80fd\u662f\u4e3a\u4e86\u5426\u8ba4\u3002 \u2013 \u675c\u5c14\u9ad8\u62f1\u95e8\n\uff08\u5728\u6211\u610f\u8bc6\u5230\u5b83\u4eec\u4e0d\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u4e4b\u524d\uff0c\u6211\u771f\u7684\u82b1\u4e86\u4e00\u4e2a\u5c0f\u65f6\u8bd5\u56fe\u5f04\u6e05\u695a\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff09\u5305\u542b 50 \u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5305\u542b 50 \u4e2a\u6587\u4ef6\uff0c\u5e76\u4e14\u5185\u5bb9\u4ee5\u6709\u6761\u4ef6\u548c\u4e0d\u53ef\u9884\u6d4b\u7684\u65b9\u5f0f\u5728\u6240\u6709 50 \u4e2a\u6587\u4ef6\u4e2d\u7ebf\u6027/\u7a0b\u5e8f\u5730\u6267\u884c.\u73b0\u5728\u8003\u8651 $x \u5305\u542b\u6765\u81ea\u60a8\u7684 URL \u7684\u503c\uff08 register globals magic \uff09\uff0c\u56e0\u6b64\u5728\u60a8\u7684\u4ee3\u7801\u4e2d\u6ca1\u6709\u4efb\u4f55\u5730\u65b9\u5f88\u660e\u663e\u60a8\u4f7f\u7528\u7684\u662f\u54ea\u4e2a\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u5168\u90e8\u7531 url \u51b3\u5b9a\u3002\u73b0\u5728\u8003\u8651\u5f53\u8be5\u53d8\u91cf\u7684\u5185\u5bb9\u53ef\u4ee5\u662f\u7f51\u7ad9\u7528\u6237\u6307\u5b9a\u7684 url \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u662f\u7684\uff0c\u8fd9\u5bf9\u60a8\u6765\u8bf4\u53ef\u80fd\u6ca1\u6709\u610f\u4e49\uff0c\u4f46\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u8be5 url \u7684\u53d8\u91cf\uff0c\u5373\uff1a\u9664\u4e86\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u4e4b\u5916\uff0c\u60a8\u5fc5\u987b\u901a\u8fc7\u4e0a\u9762\u7684\u53cc $ \u6280\u672f\u4f7f\u7528\u5b83\u3002\u6b64\u5916\uff0c\u5f53\u7528\u6237\u53ef\u4ee5\u5728 URL \u4e0a\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u6765\u6307\u793a\u8981\u5305\u542b\u54ea\u4e2a\u6587\u4ef6\u65f6\uff0c\u6709\u4e00\u4e9b\u8ba8\u538c\u7684\u6280\u5de7\uff0c\u4f8b\u5982\u201cevilcode.php\u201d\u6253\u5370\u5176\u4ee3\u7801\u660e\u6587\uff0c\u5e76\u4e14 Php \u6ca1\u6709\u5f97\u5230\u9002\u5f53\u7684\u4fdd\u62a4\uff0cphp \u53ea\u4f1a\u88ab\u6dd8\u6c70\uff0c\u4e0b\u8f7d evilcode.php\uff0c\u5e76\u4ee5 Web \u670d\u52a1\u5668\u7684\u7528\u6237\u8eab\u4efd\u6267\u884c\u5b83\u3002\n\u7f51\u7edc\u670d\u52a1\u5668\u4f1a\u7ed9\u5b83\u6240\u6709\u7684\u6743\u9650\u7b49\u7b49\uff0c\u5141\u8bb8 shell \u8c03\u7528\uff0c\u4e0b\u8f7d\u4efb\u610f\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u8fd0\u884c\u5b83\u4eec\u7b49\u7b49\uff0c\u76f4\u5230\u6700\u7ec8\u4f60\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f60\u7684\u76d2\u5b50\u7528\u5b8c\u4e86\u78c1\u76d8\u7a7a\u95f4\uff0c\u4e00\u4e2a\u76ee\u5f55\u6709 8GB \u7684\u200b\u200b\u76d7\u7248\u7535\u5f71\u610f\u5927\u5229\u8bed\u914d\u97f3\uff0c\u901a\u8fc7\u673a\u5668\u4eba\u5728 IRC \u4e0a\u5171\u4eab\u3002\u6211\u5f88\u5e86\u5e78\u6211\u5728\u8fd0\u884c\u653b\u51fb\u7684\u811a\u672c\u51b3\u5b9a\u505a\u4e00\u4e9b\u975e\u5e38\u5371\u9669\u7684\u4e8b\u60c5\u4e4b\u524d\u53d1\u73b0\u4e86\u66b4\u884c\uff0c\u6bd4\u5982\u4ece\u6216\u591a\u6216\u5c11\u4e0d\u5b89\u5168\u7684\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6781\u5176\u673a\u5bc6\u7684\u4fe1\u606f\uff1a| \uff08\u6211\u53ef\u4ee5\u7528\u90a3\u4e2a\u4ee3\u7801\u5e93\u5728 6 \u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u6bcf\u5929\u5a31\u4e50 Dailywtf\uff0c\u6211\u6ca1\u6709\u9a97\u4f60\u3002\u5f88\u9057\u61be\u6211\u5728\u6211\u9003\u8131\u4e86\u90a3\u4e2a\u4ee3\u7801\u4e4b\u540e\u53d1\u73b0\u4e86 Dailywtf\uff09 3 \u201c\u6211\u5f88\u5e86\u5e78\u6211\u5728\u811a\u672c\u51b3\u5b9a\u4e4b\u524d\u53d1\u73b0\u4e86\u66b4\u884c\u6536\u83b7\u6570\u636e\u5e93:|&quot;\u4f60\u600e\u4e48\u77e5\u9053\u7684\uff1f\u5bf9\u4e8e\u6240\u6709\u5bc6\u96c6\u7684\u6d77\u8c5a\uff0c\u5b83\u53ef\u80fd\u5df2\u7ecf\u5728\u6ca1\u6709\u4eba\u6ce8\u610f\u5230\u7684\u60c5\u51b5\u4e0b\u8fd9\u6837\u505a\u4e86...... \u2013 Piskvor \u79bb\u5f00\u4e86\u5efa\u7b51\u7269 \u5b83\u53ef\u80fd\u5df2\u7ecf\u8fd9\u6837\u505a\u4e86\uff0c\u4f46\u6570\u636e\u5e93\u65e5\u5fd7\u5e76\u6ca1\u6709\u8868\u660e\u5b83\u505a\u4e86\u591a\u5c11\u3002 \u2013 Kent Fredric \u5728\u4e3b\u9879\u76ee\u5934\u6587\u4ef6\u4e2d\uff0c\u6765\u81ea\u4e00\u4f4d\u8001\u624b COBOL \u7a0b\u5e8f\u5458\uff0c\u4ed6\u83ab\u540d\u5176\u5999\u5730\u7528 C \u7f16\u5199\u4e86\u4e00\u4e2a\u7f16\u8bd1\u5668\uff1a\u201c\u6240\u4ee5\u5982\u679c\u4f60\u5fd8\u8bb0\u58f0\u660e\u4f60\u7684\u5faa\u73af\u53d8\u91cf\uff0c\u4f60\u5c31\u4e0d\u4f1a\u5f97\u5230\u7f16\u8bd1\u5668\u9519\u8bef\u3002\u201d\n0 3 \u53ea\u8981\u60a8\u4f7f\u7528\u6b63\u786e\u7684\u5de5\u5177\u6765\u6784\u5efa\u5305 (WiX)\uff0c\u8fd9\u8fd8\u4e0d\u9519\u3002\u7136\u800c\uff0cVS \u7f16\u8f91\u5668\u548c InstallShield \u662f\u90aa\u6076\u7684\u2014\u2014erikkallen \u8fd9\u7bc7\u6587\u7ae0\u5982\u4f55\u7f16\u5199\u4e0d\u53ef\u7ef4\u62a4\u7684\u4ee3\u7801\u6db5\u76d6\u4e86\u4e00\u4e9b\u4eba\u7c7b\u5df2\u77e5\u7684\u6700\u51fa\u8272\u7684\u6280\u672f\u3002\u6211\u6700\u559c\u6b22\u7684\u4e00\u4e9b\u662f\uff1a \u8d2d\u4e70\u4e00\u672c\u5a74\u513f\u547d\u540d\u4e66\uff0c\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u5bf9\u53ef\u53d8\u540d\u79f0\u611f\u5230\u832b\u7136\u3002 Fred \u662f\u4e00\u4e2a\u7f8e\u5999\u7684\u540d\u5b57\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u6253\u5b57\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u6613\u4e8e\u8f93\u5165\u7684\u53d8\u91cf\u540d\u79f0\uff0c\u5982\u679c\u60a8\u4f7f\u7528 DSK \u952e\u76d8\u8f93\u5165\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528 adsf \u6216 aoeu\u3002\u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528\u63cf\u8ff0\u6027\u53d8\u91cf\u548c\u51fd\u6570\u540d\u79f0\uff0c\u8bf7\u62fc\u9519\u5b83\u4eec\u3002\u901a\u8fc7\u5728\u67d0\u4e9b\u51fd\u6570\u548c\u53d8\u91cf\u540d\u79f0\u4e2d\u62fc\u9519\u5e76\u5728\u5176\u4ed6\u4e2d\u6b63\u786e\u62fc\u5199\uff08\u4f8b\u5982 SetPintleOpening SetPintalClosing\uff09\uff0c\u6211\u4eec\u6709\u6548\u5730\u5426\u5b9a\u4e86 grep \u6216 IDE \u641c\u7d22\u6280\u672f\u7684\u4f7f\u7528\u3002\u5b83\u5de5\u4f5c\u5f97\u975e\u5e38\u597d\u3002\u901a\u8fc7\u5728\u4e0d\u540c\u7684\u5267\u9662/\u5267\u9662\u62fc\u5199 tory \u6216 tori \u6765\u6dfb\u52a0\u56fd\u9645\u98ce\u5473\u3002\u5728\u547d\u540d\u51fd\u6570\u548c\u53d8\u91cf\u65f6\uff0c\u5927\u91cf\u4f7f\u7528\u62bd\u8c61\u8bcd\uff0c\u5982 it\u3001everything\u3001data\u3001handle\u3001stuff\u3001do\u3001routine\u3001perform \u548c\u6570\u5b57\uff0c\u4f8b\u5982routineX48\u3001PerformDataFunction\u3001DoIt\u3001HandleStuff \u548c do_args_method\u3002\u5c06\u5355\u8bcd\u4e2d\u95f4\u7684\u97f3\u8282\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u968f\u673a\u5927\u5199\u3002\u4f8b\u5982 ComputeRasterHistoGram()\u3002\n\u4f7f\u7528\u5c0f\u5199 l \u8868\u793a\u957f\u5e38\u91cf\u3002\u4f8b\u5982\uff0c10l \u66f4\u53ef\u80fd\u88ab\u8bef\u8ba4\u4e3a\u662f 101\uff0c\u800c\u4e0d\u662f 10l\u3002\u7981\u6b62\u4efb\u4f55\u660e\u663e\u6d88\u9664 uvw wW gq9 2z 5s il17|!j oO08 `&#39;&quot; ;,. m nn rn {[()]} \u6b67\u4e49\u7684\u5b57\u4f53\u3002\u8981\u6709\u521b\u610f\u3002\u53ea\u8981\u8303\u56f4\u89c4\u5219\u5141\u8bb8\uff0c\u91cd\u590d\u4f7f\u7528\u73b0\u6709\u7684\u4e0d\u76f8\u5173\u53d8\u91cf\u540d\u79f0\u3002\u7c7b\u4f3c\u5730\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u4e34\u65f6\u53d8\u91cf\u7528\u4e8e\u4e24\u4e2a\u4e0d\u76f8\u5173\u7684\u76ee\u7684\uff08\u58f0\u79f0\u662f\u4e3a\u4e86\u8282\u7701\u5806\u6808\u69fd\uff09\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6076\u9b54\u53d8\u4f53\uff0c\u5c06\u53d8\u91cf\u53d8\u5f62\uff0c\u4f8b\u5982\uff0c\u5728\u5f88\u957f\u7684\u65b9\u6cd5\u9876\u90e8\u4e3a\u53d8\u91cf\u8d4b\u503c\uff0c\u7136\u540e\u5728\u4e2d\u95f4\u7684\u67d0\u5904\u66f4\u6539\u4ee5\u5fae\u5999\u7684\u65b9\u5f0f\u4e86\u89e3\u53d8\u91cf\u7684\u542b\u4e49\uff0c\u4f8b\u5982\u5c06\u5176\u4ece\u57fa\u4e8e 0 \u7684\u5750\u6807\u8f6c\u6362\u4e3a\u57fa\u4e8e 1 \u7684\u5750\u6807\u3002\u4e00\u5b9a\u4e0d\u8981\u8bb0\u5f55\u8fd9\u79cd\u542b\u4e49\u7684\u53d8\u5316\u3002\u5728\u53d8\u91cf\u6216\u65b9\u6cd5\u540d\u79f0\u4e2d\u4f7f\u7528\u7f29\u5199\u65f6\uff0c\u7528\u540c\u4e00\u4e2a\u8bcd\u7684\u51e0\u79cd\u53d8\u4f53\uff0c\u751a\u81f3\u5076\u5c14\u62fc\u5199\u51fa\u6765\u3002\u8fd9\u6709\u52a9\u4e8e\u6253\u8d25\u90a3\u4e9b\u4f7f\u7528\u6587\u672c\u641c\u7d22\u53ea\u7406\u89e3\u7a0b\u5e8f\u7684\u67d0\u4e9b\u65b9\u9762\u7684\u61d2\u60f0\u7684\u6d41\u6d6a\u6c49\u3002\u8003\u8651\u5c06\u53d8\u4f53\u62fc\u5199\u4f5c\u4e3a\u7b56\u7565\u7684\u53d8\u4f53\uff0c\u4f8b\u5982\u6df7\u5408\u56fd\u9645\u989c\u8272, \u5e26\u6709\u7f8e\u56fd\u8272\u5f69\u548c\u82b1\u82b1\u516c\u5b50\u7684\u9177\u4e50rz\u3002\u5982\u679c\u60a8\u5b8c\u6574\u5730\u62fc\u51fa\u59d3\u540d\uff0c\u5219\u6bcf\u4e2a\u59d3\u540d\u53ea\u6709\u4e00\u79cd\u53ef\u80fd\u7684\u62fc\u5199\u65b9\u5f0f\u3002\u8fd9\u4e9b\u5bf9\u4e8e\u7ef4\u62a4\u7a0b\u5e8f\u5458\u6765\u8bf4\u592a\u5bb9\u6613\u8bb0\u4f4f\u4e86\u3002\u56e0\u4e3a\u6709\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u7f29\u5199\u4e00\u4e2a\u8bcd\uff0c\u901a\u8fc7\u7f29\u5199\uff0c\u4f60\u53ef\u4ee5\u6709\u51e0\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\uff0c\u5b83\u4eec\u90fd\u5177\u6709\u76f8\u540c\u7684\u660e\u663e\u76ee\u7684\u3002\u4f5c\u4e3a\u989d\u5916\u7684\u597d\u5904\uff0c\u7ef4\u62a4\u7a0b\u5e8f\u5458\u751a\u81f3\u53ef\u80fd\u4e0d\u4f1a\u6ce8\u610f\u5230\u5b83\u4eec\u662f\u5355\u72ec\u7684\u53d8\u91cf\u3002\u4f7f\u7528\u8bf8\u5982 LancelotsFavouriteColour \u4e4b\u7c7b\u7684\u5e38\u91cf\u540d\u79f0\u800c\u4e0d\u662f\u84dd\u8272\uff0c\u5e76\u5c06\u5176\u6307\u5b9a\u4e3a $0204FB \u7684\u5341\u516d\u8fdb\u5236\u503c\u3002\u989c\u8272\u770b\u8d77\u6765\u4e0d\u9519......", "note_en": "What is the most evil or dangerous code fragment you have ever seen in a production environment at a company? I&#39;ve never encountered production code that I would consider to be deliberately malicious and evil, so I&#39;m quite curious to see what others have found.\n The most dangerous code I have ever seen was a stored procedure two linked-servers away from our core production database server. The stored procedure accepted any NVARCHAR(8000) parameter and executed the parameter on the target production server via an double-jump sp_executeSQL command. That is to say, the sp_executeSQL command executed another sp_executeSQL command in order to jump two linked servers. Oh, and the linked server account had sysadmin rights on the target production server.\n  1\n    I&#39;ve written about one application I&#39;ve worked on before  here and  here. To put it simply, my company inherited 130,000 lines of garbage from India. The application was written in C#; it was a teller app, the same kind of software tellers use behind the counter whenever you go to the bank. The app crashed 40-50 times a day, and it simply couldn&#39;t be refactored into working code. My company had to re-write the entire app over the course of 12 months.\n Why is this application evil? Because the sight of the source code was enough to drive a sane man mad and a mad man sane. The twisted logic used to write this application could have only been inspired by a Lovecraftian nightmare. Unique features of this application included:\n Out of 130,000 lines of code, the entire application contained 5 classes (excluding form files). All of these were public static classes. One class was called Globals.cs, which contained 1000s and 1000s and 1000s of public static variables used to hold the entire state of the application. Those five classes contained 20,000 lines of code total, with the remaining code embedded in the forms.\n You have to wonder, how did the programmers manage to write such a big application without any classes? What did they use to represent their data objects? It turns out the programmers managed to re-invent half of the concepts we all learned about OOP simply by combining ArrayLists, HashTables, and DataTables. We saw a lot of this:\n  Keep in mind, none of the data structures above are strongly typed, so you have to cast whatever mystery object you get out of the list to the correct type. It&#39;s amazing what kind of complex, Rube Goldberg-like data structures you can create using just ArrayLists, HashTables, and DataTables.\n To share an example of how to use the object model detailed above, consider Accounts: the original programmer created a seperate HashTable for each concievable property of an account: a HashTable called hstAcctExists, hstAcctNeedsOverride, hstAcctFirstName. The keys for all of those hashtables was a \u201c|\u201d separated string. Conceivable keys included \u201c123456|DDA\u201d, \u201c24100|SVG\u201d, \u201c100|LNS\u201d, etc.\n Since the state of the entire application was readily accessible from global variables, the programmers found it unnecessary to pass parameters to methods. I&#39;d say 90% of methods took 0 parameters. Of the few which did, all parameters were passed as strings for convenience, regardless of what the string represented.\n Side-effect free functions did not exist. Every method modified 1 or more variables in the Globals class. Not all side-effects made sense; for example, one of the form validation methods had a mysterious side effect of calculating over and short payments on loans for whatever account was stored Globals.lngAcctNum.\n Although there were lots of forms, there was one form to rule them all: frmMain.cs, which contained a whopping 20,000 lines of code. What did frmMain do? Everything. It looked up accounts, printed receipts, dispensed cash, it did everything.\n Sometimes other forms needed to call methods on frmMain. Rather than factor that code out of the form into a seperate class, why not just invoke the code directly:\n As bad as it already is creating an invisible form to perform business logic, how do you think the form knew which account to look up? That\u2019s easy: the form could access Globals.lngAcctNum and Globals.strAcctType. (Who doesn&#39;t love Hungarian notation?)\n Code-reuse was a synonym for ctrl-c, ctrl-v. I found 200-line methods copy/pasted across 20 forms.\n The application had a bizarre threading model, something I like to call the thread-and-timer model: each form that spawned a thread had a timer on it. Each thread that was spawned kicked off a timer which had a 200 ms delay; once the timer started, it would check to see if the thread had set some magic boolean, then it would abort the thread. The resulting ThreadAbortException was swallowed.\n You&#39;d think you&#39;d only see this pattern once, but I found it in at least 10 different places.\n Speaking of threads, the keyword &#34;lock&#34; never appeared in the application. Threads manipulated global state freely without taking a lock.\n Every method in the application contained a try/catch block. Every exception was logged and swallowed.\n  Some genius figured out that you can hook multiple form controls up to the same event handler. How did the programmer handle this?\n private void OperationButton_Click(object sender, EventArgs e){ Button btn = (Button)sender; if (blnModeIsAddMc) { AddMcOperationKeyPress(btn); } else { string strToBeAppendedLater = string.Empty; if (btn.Name != &#34;btnBS&#34;) { UpdateText(); } if (txtEdit.Text.Trim() != &#34;Error&#34;) { SaveFormState(); } switch (btn.Name) { case &#34;btnC&#34;: ResetValues(); break; case &#34;btnCE&#34;: txtEdit.Text = &#34;0&#34;; break; case &#34;btnBS&#34;: if (!blnStartedNew) { string EditText = txtEdit.Text.Substring(0, txtEdit.Text.Length - 1); DisplayValue((EditText == string.Empty) ? &#34;0&#34; : EditText); } break; case &#34;btnPercent&#34;: blnAfterOp = true; if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, false); decCurrValue = decResultValue * decCurrValue / intFormatFactor; DisplayValue(GetValueString(decCurrValue)); AddToTape(GetValueString(decCurrValue), string.Empty, true, false); strToBeAppendedLater = GetValueString(decResultValue).PadLeft(20) + strOpPressed.PadRight(3); if (arrLstTapeHist.Count == 0) { arrLstTapeHist.Add(strToBeAppendedLater); } blnEqualOccurred = false; blnStartedNew = true; } break; case &#34;btnAdd&#34;: case &#34;btnSubtract&#34;: case &#34;btnMultiply&#34;: case &#34;btnDivide&#34;: blnAfterOp = true; if (txtEdit.Text.Trim() == &#34;Error&#34;) { btnC.PerformClick(); return; } if (blnNumPressed || blnEqualOccurred) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (Operation()) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(GetValueString(decResultValue)); } else { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(&#34;Error&#34;); } strOpPressed = btn.Text; blnEqualOccurred = false; blnNumPressed = false; } } else { strOpPressed = btn.Text; AddToTape(GetValueString(0), (string)btn.Text, false, false); } if (txtEdit.Text.Trim() == &#34;Error&#34;) { AddToTape(&#34;Error&#34;, string.Empty, true, true); btnC.PerformClick(); txtEdit.Text = &#34;Error&#34;; } break; case &#34;btnEqual&#34;: blnAfterOp = false; if (strOpPressed != string.Empty || strPrevOp != string.Empty) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (OperationEqual()) { DisplayValue(GetValueString(decResultValue)); } else { DisplayValue(&#34;Error&#34;); } if (!blnEqualOccurred) { strPrevOp = strOpPressed; decHistValue = decCurrValue; blnNumPressed = false; blnEqualOccurred = true; } strOpPressed = string.Empty; } } break; case &#34;btnSign&#34;: GetValueDecimal(txtEdit.Text, out decCurrValue); DisplayValue(GetValueString(-1 * decCurrValue)); break; } }}\n strDrCr = chkCredits.Checked &amp;&amp; chkDebits.Checked ? string.Empty : chkDebits.Checked ? &#34;D&#34; : chkCredits.Checked ? &#34;C&#34; : &#34;N&#34;;\n  if (strDefaultVals == strNowVals &amp;&amp; (dsTranHist == null ? true : dsTranHist.Tables.Count == 0 ? true : dsTranHist.Tables[0].Rows.Count == 0 ? true : false))\n Here&#39;s a code snippet which demonstrates the typical misuse of the StringBuilder. Note how the programmer concats a string in a loop, then appends the resulting string to the StringBuilder:\n private string CreateGridString(){ string strTemp = string.Empty; StringBuilder strBuild = new StringBuilder(); foreach (DataGridViewRow dgrRow in dgvAcctHist.Rows) { strTemp = ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_chknum&#34;].ToString().PadLeft(8, &#39; &#39;); strTemp += &#34; &#34;; strTemp += Convert.ToDateTime(((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_trandt&#34;]).ToString(&#34;MM/dd/yyyy&#34;); strTemp += &#34; &#34;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_DrAmount&#34;].ToString().PadLeft(15, &#39; &#39;); strTemp += &#34; &#34;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_CrAmount&#34;].ToString().PadLeft(15, &#39; &#39;); strTemp += &#34; &#34;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_trancd&#34;].ToString().PadLeft(4, &#39; &#39;); strTemp += &#34; &#34;; strTemp += GetDescriptionString(((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_desc&#34;].ToString(), 30, 62); strBuild.AppendLine(strTemp); } strCreateGridString = strBuild.ToString(); return strCreateGridString;//strBuild.ToString();}\n No primary keys, indexes, or foreign key constraints existed on tables, nearly all fields were of type varchar(50), and 100% of fields were nullable. Interestingly, bit fields were not used to store boolean data; instead a char(1) field was used, and the characters &#39;Y&#39; and &#39;N&#39; used to represent true and false respectively.\n ALTER PROCEDURE [dbo].[Get_TransHist] ( @TellerID int = null, @CashDrawer int = null, @AcctNum bigint = null, @StartDate datetime = null, @EndDate datetime = null, @StartTranAmt decimal(18,2) = null, @EndTranAmt decimal(18,2) = null, @TranCode int = null, @TranType int = null )AS declare @WhereCond Varchar(1000) declare @strQuery Varchar(2000) Set @WhereCond = &#39; &#39; Set @strQuery = &#39; &#39; If not @TellerID is null Set @WhereCond = @WhereCond + &#39; AND TT.TellerID = &#39; + Cast(@TellerID as varchar) If not @CashDrawer is null Set @WhereCond = @WhereCond + &#39; AND TT.CDId = &#39; + Cast(@CashDrawer as varchar) If not @AcctNum is null Set @WhereCond = @WhereCond + &#39; AND TT.AcctNbr = &#39; + Cast(@AcctNum as varchar) If not @StartDate is null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT.PostDate,121) &gt;= &#39;&#39;&#39; + Convert(varchar,@StartDate,121) + &#39;&#39;&#39;&#39; If not @EndDate is null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT.PostDate,121) &lt;= &#39;&#39;&#39; + Convert(varchar,@EndDate,121) + &#39;&#39;&#39;&#39; If not @TranCode is null Set @WhereCond = @WhereCond + &#39; AND TT.TranCode = &#39; + Cast(@TranCode as varchar) If not @EndTranAmt is null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &lt;= &#39; + Cast(@EndTranAmt as varchar) If not @StartTranAmt is null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &gt;= &#39; + Cast(@StartTranAmt as varchar) If not (@TranType is null or @TranType = -1) Set @WhereCond = @WhereCond + &#39; AND TT.DocType = &#39; + Cast(@TranType as varchar) --Get the Teller Transaction Records according to the filters Set @strQuery = &#39;SELECT TT.TranAmt as [Transaction Amount], TT.TranCode as [Transaction Code], RTrim(LTrim(TT.TranDesc)) as [Transaction Description], TT.AcctNbr as [Account Number], TT.TranID as [Transaction Number], Convert(varchar,TT.ActivityDateTime,101) as [Activity Date], Convert(varchar,TT.EffDate,101) as [Effective Date], Convert(varchar,TT.PostDate,101) as [Post Date], Convert(varchar,TT.ActivityDateTime,108) as [Time], TT.BatchID, TT.ItemID, isnull(TT.DocumentID, 0) as DocumentID, TT.TellerName, TT.CDId, TT.ChkNbr, RTrim(LTrim(DT.DocTypeDescr)) as DocTypeDescr, (CASE WHEN TT.TranMode = &#39;&#39;F&#39;&#39; THEN &#39;&#39;Offline&#39;&#39; ELSE &#39;&#39;Online&#39;&#39; END) TranMode, DispensedYN FROM TellerTrans TT WITH (NOLOCK) LEFT OUTER JOIN DocumentTypes DT WITH (NOLOCK) on DocType = DocumentType WHERE IsNull(TT.DeletedYN, 0) = 0 &#39; + @WhereCond + &#39; Order By BatchId, TranID, ItemID&#39; Exec (@strQuery)\n With all that said, the single biggest problem with this 130,000 line application this: no unit tests.\n  10  And the depressing thing is that somewhere, some programmer that worked on that code, thinks they did a good job and is showing it off on his resume. &#34;Unskilled and Unaware of it&#34;\r \r\u2013\u00a0 Sergio Acosta\n  hey you i writted this code adn i think its prety good if you think you cuold do better you shoud try\r \r\u2013\u00a0 Beska\n  A very watered down version of some of the management history ended up on the DailyWTF today:  thedailywtf.com/Articles/eTeller-Horror.aspx\r \r\u2013\u00a0 Juliet\n      4  LOL - that&#39;s like handing out payslips, bank statements etc in transparent envelopes. :-)\r \r\u2013\u00a0 Christian Hayter\n    Yowch. I found what looked like nicely-hashed passwords in a commercial web app&#39;s database once. Turned out they were just plain text stored in a VARBINARY column so you couldn&#39;t tell at first glance.\r \r\u2013\u00a0 Matt Gibson\n  Sad to say, that&#39;s basically the password encryption in a project I inherited. Albeit their old custom written base64 encoding function did it wrong, so I guess there&#39;s solice in that ;-)\r \r\u2013\u00a0 Allbite\n    In a system which took credit card payments we used to store the full credit card number along with name, expiration date etc.\n Turns out this is illegal, which is ironic given the we were writing the program for the Justice Department at the time.\n  5  Does anybody know how amazon solves this problem? Or is it legal if you ask for the users permission?\r \r\u2013\u00a0 Davy Landman\n      @Davy - encryption. It&#39;s legal to store if it&#39;s encrypted and only accessible on need-to-know. There are lots of rules about strength, retention, DMZs etc, see here  pcisecuritystandards.org/security_standards/pci_dss.shtml\r \r\u2013\u00a0 Luke Schafer\n      5  Good thing there was a FIXME so the IDE could direct you to that line.\r \r\u2013\u00a0 Josh Lee\n  @Chadworthington: If it was intentional the comment would have been /* DON&#39;T FIXME! */ ;P\r \r\u2013\u00a0 David\n  Isn&#39;t this kind of thing optimized out by compilers when building a commercial release?\r \r\u2013\u00a0 Attila Kun\n  In this situation the compiler did not &#34;optimize out&#34; the loop; what would it &#34;optimize&#34; to? Also, &#34;intentional sabotage&#34; was a definite possibility. The &#34;FIXME&#34; could have been for deniability.\r \r\u2013\u00a0 Dour High Arch\n    ( I literally spent an hour trying to work out how that worked before I realised they  wern&#39;t the same variable )\n Include 50 files, which each include 50 files, and stuff is performed linearly/procedurally across all 50 files in conditional and unpredictable ways.\n   Now consider $x contains a value from your URL ( register globals magic ), so nowhere in your code is it obvious what variable your working with becuase its all determined by the url.\n Now consider what happens when the contents of that variable can be a url specified by the websites user. Yes, this may not make sense to you, but it creates a variable named that url, ie:\n  except it cant be directly accessed, you have to use it via the double $ technique above.\n Additionally, when its possible for a user to specify a variable on the URL which indicates which file to include, there are nasty tricks like\n   and &#39;evilcode.php&#39; prints its code plaintext, and Php is inappropriately secured, php will just trundle off, download evilcode.php, and execute it as the user of the web-server.\n The web-sever will give it all its permissions etc, permiting shell calls, downloading arbitrary binaries and running them, etc etc, until eventually you wonder why you have a box running out of disk space, and one dir has 8GB of pirated movies with italian dubbing, being shared on IRC via a bot.\n I&#39;m just thankful I discovered that atrocity before the script running the attack decided to do something really dangerous like harvest extremely confidential information from the more or less unsecured database :|\n ( I could entertain the dailywtf every day for 6 months with that codebase, I kid you not. Its just a shame I discovered the dailywtf after I escaped that code )\n  3  &#34;I&#39;m just thankful I discovered that atrocity before the script decided to harvest the database :|&#34; How would you know? For all intensive porpoises, it may already have done that without anyone noticing...\r \r\u2013\u00a0 Piskvor left the building\n  It may have, but the database logs didn&#39;t indicate much that it did.\r \r\u2013\u00a0 Kent Fredric\n    In the main project header file, from an old-hand COBOL programmer, who was inexplicably writing a compiler in C:\n  &#34;So you won&#39;t get a compiler error if you forget to declare your loop variables.&#34;\n  0\n    3  It&#39;s not so bad as long as you use the correct tools to build the package (WiX). The VS editor, and InstallShield, are evil, though\r \r\u2013\u00a0 erikkallen\n    This article  How to Write Unmaintainable Code covers some of the most brilliant techniques known to man. Some of my favorite ones are:\n   Buy a copy of a baby naming book and you&#39;ll never be at a loss for variable names. Fred is a wonderful name, and easy to type. If you&#39;re looking for easy-to-type variable names, try adsf or aoeu if you type with a DSK keyboard.\n  If you must use descriptive variable and function names, misspell them. By misspelling in some function and variable names, and spelling it correctly in others (such as SetPintleOpening SetPintalClosing) we effectively negate the use of grep or IDE search techniques. It works amazingly well. Add an international flavor by spelling tory or tori in different theatres/theaters.\n  In naming functions and variables, make heavy use of abstract words like it, everything, data, handle, stuff, do, routine, perform and the digits e.g. routineX48, PerformDataFunction, DoIt, HandleStuff and do_args_method.\n  Randomly capitalize the first letter of a syllable in the middle of a word. For example ComputeRasterHistoGram().\n  Use lower case l to indicate long constants. e.g. 10l is more likely to be mistaken for 101 that 10L is. Ban any fonts that clearly disambiguate uvw wW gq9 2z 5s il17|!j oO08 `&#39;&#34; ;,. m nn rn {[()]}. Be creative.\n  Wherever scope rules permit, reuse existing unrelated variable names. Similarly, use the same temporary variable for two unrelated purposes (purporting to save stack slots). For a fiendish variant, morph the variable, for example, assign a value to a variable at the top of a very long method, and then somewhere in the middle, change the meaning of the variable in a subtle way, such as converting it from a 0-based coordinate to a 1-based coordinate. Be certain not to document this change in meaning.\n  When using abbreviations inside variable or method names, break the boredom with several variants for the same word, and even spell it out longhand once in while. This helps defeat those lazy bums who use text search to understand only some aspect of your program. Consider variant spellings as a variant on the ploy, e.g. mixing International colour, with American color and dude-speak kulerz. If you spell out names in full, there is only one possible way to spell each name. These are too easy for the maintenance programmer to remember. Because there are so many different ways to abbreviate a word, with abbreviations, you can have several different variables that all have the same apparent purpose. As an added bonus, the maintenance programmer might not even notice they are separate variables.\n  Use constant names like LancelotsFavouriteColour instead of blue and assign it hex value of $0204FB. The color looks iden\n......", "posttime": "2021-08-08 21:50:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,\u751f\u4ea7,code,quot", "title": "\u60a8\u5728\u751f\u4ea7\u4e2d\u89c1\u8fc7\u7684\u6700\u90aa\u6076\u7684\u4ee3\u7801\u662f\u4ec0\u4e48\uff1f", "title_en": "What is the most EVIL code you have ever seen in production?", "transed": 1, "url": "https://stackoverflow.com/questions/434414/what-is-the-most-evil-code-you-have-ever-seen-in-a-production-enterprise-environ", "via": "", "real_tags": ["\u4ee3\u7801", "\u751f\u4ea7", "code", "quot"]}, {"category": "", "categoryclass": "", "imagename": "9c198ae4180f01f9f3651ce4f301a6c0.jpg", "infoid": 1072111, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7fa4\u4f53\u673a\u5668\u4eba\u662f\u4e00\u4e2a\u76f8\u5bf9\u8f83\u65b0\u4e14\u6781\u5177\u524d\u666f\u7684\u7814\u7a76\u9886\u57df\uff0c\u9700\u8981\u5f00\u53d1\u53ef\u4ee5\u4e00\u8d77\u79fb\u52a8\u548c\u5b8c\u6210\u4efb\u52a1\u7684\u591a\u673a\u5668\u4eba\u56e2\u961f\u3002\u673a\u5668\u4eba\u7fa4\u53ef\u4ee5\u6709\u8bb8\u591a\u6709\u4ef7\u503c\u7684\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u641c\u7d22\u548c\u6551\u63f4\u4efb\u52a1\u4e2d\u4e3a\u4eba\u7c7b\u63d0\u4f9b\u652f\u6301\uff0c\u6216\u8005\u5141\u8bb8\u4ed6\u4eec\u76d1\u89c6\u96be\u4ee5\u8fdb\u5165\u7684\u5730\u7406\u533a\u57df\u3002 Fraunhofer FKIE \u548c\u5fb7\u56fd\u6ce2\u6069\u5927\u5b66\u7684\u7814\u7a76\u4eba\u5458\u6700\u8fd1\u8bbe\u8ba1\u4e86\u4e00\u79cd\u7406\u8bba\u7ed3\u6784\uff0c\u53ef\u4ee5\u6307\u5bfc\u81ea\u7ec4\u7ec7\u7fa4\u7cfb\u7edf\u7684\u53d1\u5c55\u3002\u8be5\u7ed3\u6784\u5728 Sage \u7684 Adaptive Behavior \u671f\u520a\u4e0a\u53d1\u8868\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u63d0\u51fa\uff0c\u4e3a\u4eba\u4e0e\u7fa4\u4ea4\u4e92\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u7684\u6574\u4f53\u89c6\u89d2\uff0c\u8be5\u56e2\u961f\u5c06\u5176\u79f0\u4e3a\u201c\u8054\u5408\u4eba-\u7fa4\u5faa\u73af\u201d\u3002 \u201c\u6211\u4eec\u4e13\u6ce8\u4e8e\u7814\u7a76\u4eba\u4e0e\u7fa4\u4ea4\u4e92\u7684\u673a\u5668\u4eba\u6280\u672f\u5b50\u9886\u57df\uff0c\u201d\u8fdb\u884c\u8fd9\u9879\u7814\u7a76\u7684\u7814\u7a76\u4eba\u5458\u4e4b\u4e00\u4e54\u7eb3\u65af D.\u54c8\u65af\u5df4\u8d6b\u544a\u8bc9 TechXplore\u3002 \u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5bf9\u4e8e\u6211\u4eec\u5982\u4f55\u6700\u597d\u5730\u8bbe\u8ba1\u672a\u6765\u7684\u4eba\u4e0e\u7fa4\u4ea4\u4e92\uff0c\u8fd8\u6ca1\u6709\u666e\u904d\u7684\u770b\u6cd5\u3002\u6211\u4eec\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u662f\u4e3a\u7814\u7a76\u754c\u63d0\u4f9b\u4e00\u4e2a\u7406\u8bba\u57fa\u7840\uff0c\u4e00\u79cd\u601d\u7ef4\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5c06\u4eba\u7c7b\u4e2d\u7684\u5b64\u7acb\u89e3\u51b3\u65b9\u6848\u8054\u7cfb\u8d77\u6765\u2014\u2014\u7fa4\u4e92\u52a8\u3002\u201d\u5f53\u7814\u7a76\u4eba\u5458\u8bd5\u56fe\u4e3a\u5728\u73b0\u5b9e\u4e16\u754c\u73af\u5883\u4e2d\u8868\u73b0\u826f\u597d\u7684\u4eba\u4e0e\u7fa4\u4ea4\u4e92\u8bbe\u8ba1\u201c\u5faa\u73af\u201d\u65f6\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u5e94\u8be5\u5168\u9762\u8003\u8651\u8fd9\u4e9b\u4ea4\u4e92\u3002\u4f8b\u5982\uff0c\u6307\u5b9a\u4eba\u7c7b\u5982\u4f55\u5411\u673a\u5668\u4eba\u7fa4\u53d1\u51fa\u4ed6\u4eec\u7684\u610f\u56fe\u662f\u4e0d\u591f\u7684\uff0c\u65b9\u6cd5\u8fd8\u5e94\u8be5\u8003\u8651\u673a\u5668\u4eba\u7fa4\u5982\u4f55\u5411\u4eba\u7c7b\u7528\u6237\u63d0\u4f9b\u53cd\u9988\u3002 \u201c\u6211\u4eec\u4ece\u7406\u8bba\u7684\u89d2\u5ea6\u63d0\u51fa\u95ee\u9898\uff0c\u5728\u590d\u6742\u4e16\u754c\u7684\u80cc\u666f\u4e0b\uff0c\u6211\u4eec\u5982\u4f55\u5c06\u4eba\u7c7b\u8ba4\u77e5\u7684\u597d\u5904\u4e0e\u81ea\u7ec4\u7ec7\u673a\u5668\u4eba\u7fa4\u7684\u597d\u5904\u7ed3\u5408\u8d77\u6765\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u8bf4\u3002 \u201c\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e2a\u53d7\u751f\u7269\u542f\u53d1\u7684\u8bbe\u8ba1\u9690\u55bb\uff0c\u5373\u7fa4\u4f53\u653e\u5927\u7684\u4eba\u7c7b\uff0c\u5b83\u672c\u8d28\u4e0a\u63d0\u51fa\u7fa4\u4f53\u5e94\u8be5\u81ea\u6211\u7ec4\u7ec7\u6210\u4eba\u4f53\u5e76\u50cf\u4eba\u4f53\u4e00\u6837\u884c\u4e8b\u3002\u6211\u4eec\u5047\u8bbe\u8fd9\u79cd\u89c2\u70b9\u53ef\u80fd\u662f\u8bbe\u8ba1\u4eba\u7c7b\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u9690\u55bb-\u80fd\u591f\u5904\u7406\u73b0\u5b9e\u4e16\u754c\u52a8\u6001\u7684\u7fa4\u5faa\u73af\u3002\u201d\u5728\u673a\u5668\u4eba\u7fa4\u4f5c\u4e3a\u4eba\u7c7b\u7684\u5ef6\u4f38\uff08\u5373\u901a\u8fc7\u8986\u76d6\u4ed6\u4eec\u65e0\u6cd5\u8986\u76d6\u7684\u533a\u57df\u6765\u5e2e\u52a9\u4eba\u7c7b\u5b8c\u6210\u4efb\u52a1\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u7ec4\u7814\u7a76\u4eba\u5458\u5f15\u5165\u7684\u8bbe\u8ba1\u9690\u55bb\u53ef\u7528\u4e8e\u5bfc\u822a\u4eba\u7c7b\u590d\u6742\u7684\u8bbe\u8ba1\u7a7a\u95f4\u3002\u7fa4\u4e92\u52a8\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5f00\u53d1\u66f4\u9ad8\u6548\u4e14\u53ef\u5e94\u7528\u4e8e\u66f4\u590d\u6742\u573a\u666f\u7684\u4eba\u7c7b\u96c6\u7fa4\u7cfb\u7edf\u3002 \u201c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8be2\u95ee\u771f\u5b9e\u7684\u8eab\u4f53\u90e8\u4f4d\u63a7\u5236\u611f\u89c9\u5982\u4f55\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230\u4eba\u7fa4\u754c\u9762\u8bbe\u8ba1\u4e0a\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u89e3\u91ca\u9053\u3002 \u201c\u5f53\u4f60\u8d70\u5728\u8857\u4e0a\u65f6\uff0c\u4f60\u6709\u591a\u5c11\u6b21\u6709\u610f\u8bc6\u5730\u8003\u8651\u4f60\u7684\u817f\u90e8\u8fd0\u52a8\uff1f\u53ef\u80fd\u6ca1\u6709\u90a3\u4e48\u9891\u7e41\u3002\u4ece\u8fdb\u5316\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u662f\u6709\u9053\u7406\u7684\uff1b\u9648\u89c4\u5b9a\u578b\u7684\u8eab\u4f53\u63a7\u5236\u7531\u795e\u7ecf\u5b50\u7cfb\u7edf\u8d1f\u8d23\uff0c\u4ee5\u4fbf\u6709\u610f\u8bc6\u7684\u8ba4\u77e5\u7cfb\u7edf\u53ef\u4ee5\u5904\u7406\u66f4\u591a\u590d\u6742\u7684\u4e16\u754c\u52a8\u6001\u3002\u201d Hasbach \u548c\u4ed6\u7684\u540c\u4e8b\u7684\u8bba\u6587\u5f3a\u8c03\u4e86\u4f7f\u7528\u4eba\u7c7b\u72b6\u6001\u5206\u7c7b\u4f5c\u4e3a\u63d0\u4f9b\u7ed9\u673a\u5668\u4eba\u7fa4\u7684\u63a7\u5236\u8f93\u5165\u7684\u6f5c\u5728\u597d\u5904\uff0c\u800c\u4e0d\u662f\u8ba9\u4eba\u7c7b\u7528\u6237\u59cb\u7ec8\u63a7\u5236\u7fa4\u3002\u7814\u7a76\u4eba\u5458\u5f15\u5165\u7684\u8bbe\u8ba1\u6bd4\u55bb\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u7fa4\u4f53\u8ba4\u77e5\u201d\u7684\u53d1\u5c55\u7684\u7075\u611f\u3002\u8fd9\u662f\u751f\u7269\u7fa4\uff08\u4f8b\u5982\u8682\u8681\u3001\u9e1f\u7c7b\uff09\u548c\u5927\u8111\u5171\u4eab\u7c7b\u4f3c\u7684\u81ea\u7ec4\u7ec7\u539f\u5219\u7684\u60f3\u6cd5\uff0c\u8fd9\u4e9b\u539f\u5219\u5bfc\u81f4\u8ba4\u77e5\u548c\u51b3\u7b56\u3002\n\u201c\u7fa4\u4f53\u8ba4\u77e5\u201d\u7684\u601d\u60f3\u8fd8\u6ca1\u6709\u5728\u5de5\u7a0b\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u63a2\u7d22\u3002\u7814\u7a76\u4eba\u5458\u7684\u5de5\u4f5c\u53ef\u4ee5\u4e3a\u5f00\u53d1\u53d7\u5927\u8111\u548c\u751f\u7269\u7fa4\u542f\u53d1\u7684\u673a\u5668\u4eba\u7fa4\u5f00\u8f9f\u6709\u8da3\u7684\u53ef\u80fd\u6027\u3002 \u201c\u8bbe\u8ba1\u4f5c\u4e3a\u4eba\u4f53\u5ef6\u4f38\u7684\u673a\u5668\u4eba\u7fa4\u6d89\u53ca\u5728\u7f51\u7edc\u7ea7\u522b\u5c06\u795e\u7ecf\u903b\u8f91\u96c6\u6210\u5230\u673a\u5668\u4eba\u7fa4\u4e2d\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4ec5\u53d7\u5230\u6709\u9650\u7684\u5173\u6ce8\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u8bf4\u3002 \u201c\u6211\u4eec\u5df2\u7ecf\u63d0\u51fa\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u88ab\u89c6\u4e3a\u795e\u7ecf\u7cfb\u7edf\u7684\u60f3\u6cd5\u3002\u201d\u672a\u6765\uff0c\u8fd9\u7ec4\u7814\u7a76\u4eba\u5458\u8bbe\u8ba1\u7684\u7406\u8bba\u65b9\u6cd5\u53ef\u4ee5\u6fc0\u53d1\u65b0\u7cfb\u7edf\u7684\u5f00\u53d1\uff0c\u4f7f\u4eba\u7c7b\u548c\u6210\u7fa4\u7684\u200b\u200b\u673a\u5668\u4eba\u4e4b\u95f4\u80fd\u591f\u6709\u6548\u4ea4\u4e92\u3002\u5728\u4ed6\u4eec\u7684\u8bba\u6587\u4e2d\uff0cHasbach \u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u8fd8\u5c55\u793a\u4e86\u4e00\u4e2a\u6709\u8da3\u5b9e\u9a8c\u7684\u7ed3\u679c\uff0c\u8be5\u5b9e\u9a8c\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e00\u4e2a\u7fa4\u4f53\u89c6\u4e3a\u4e00\u4e2a\u81ea\u7ec4\u7ec7\u7684\u754c\u9762\u3002 \u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u7684\u6982\u5ff5\u7eaf\u5c5e\u7406\u8bba\u6027\u8d28\uff0c\u4f46\u6211\u4eec\u76ee\u524d\u6b63\u5728\u5b9e\u65bd\u539f\u578b\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u51ed\u7ecf\u9a8c\u7814\u7a76\u7fa4\u4f53\u653e\u5927\u7684\u4eba\u7c7b\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u8bf4\u3002 \u201c\u8fd9\u5c06\u7528\u4e8e\u66f4\u65b0\u7fa4\u4f53\u653e\u5927\u7684\u4eba\u7c7b\uff0c\u4f5c\u4e3a\u5173\u4e8e\u5982\u4f55\u8bbe\u8ba1\u4eba\u4e0e\u7fa4\u4f53\u4ea4\u4e92\u7684\u79d1\u5b66\u7406\u8bba\u3002\u201d\u5f15\u6587\uff1a\u4e00\u79cd\u8bbe\u8ba1\u81ea\u7ec4\u7ec7\u4eba\u7c7b\u7fa4\u7cfb\u7edf\u7684\u7406\u8bba\u65b9\u6cd5\uff082021 \u5e74\uff0c8 \u6708 5 \u65e5\uff09\uff0c2021 \u5e74 8 \u6708 8 \u65e5\u68c0\u7d22\u81ea https://techxplore.com/news/2021-08-theoretical-approach-self-organizing-human- swarm.html \u672c\u6587\u6863\u53d7\u7248\u6743\u4fdd\u62a4\u3002\u9664\u4e86\u51fa\u4e8e\u79c1\u4eba\u5b66\u4e60\u6216\u7814\u7a76\u76ee\u7684\u7684\u4efb\u4f55\u516c\u5e73\u4ea4\u6613\u5916\uff0c\u672a\u7ecf\u4e66\u9762\u8bb8\u53ef\uff0c\u4e0d\u5f97\u590d\u5236\u4efb\u4f55\u90e8\u5206\u3002\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002", "note_en": "Swarm robotics is a relatively new and highly promising research field, which entails the development of multi-robot teams that can move and complete tasks together. Robot swarms could have numerous valuable applications. For instance, they could support humans during search and rescue missions or allow them to monitor geographical areas that are difficult to access.    Researchers at Fraunhofer FKIE and University of Bonn in Germany have recently devised a theoretical construct that could guide the development of self-organizing  -swarm systems. This construct, presented in a paper published in Sage&#39;s Adaptive Behavior journal, provides a new holistic perspective to human-swarm interaction, which the team refers to as &#34;joint human-swarm loops.&#34;\n  &#34;We focus on the subfield of robotics that investigates human-swarm interaction,&#34; Jonas D. Hasbach, one of the researchers who carried out the study, told TechXplore. &#34;So far, there exists no general perspective on how we could best design future human-swarm interactions. The aim of our article was to provide the research community with a theoretical base, a way of thinking, that can relate isolated solutions in human-swarm interaction.&#34;\n  When researchers are trying to design &#34;loops&#34; for human-swarm interactions that perform well in real-world settings, they should ideally consider these interactions in their totality. For instance, specifying how humans may signal their intent to a robot swarm is not enough and approaches should also consider how the robot swarm can offer feedback to human users.\n  &#34;We asked from a theoretical point of view how we could join the benefits of human cognition with the benefits of self-organizing robot swarms in the context of a complex world,&#34; Hasbach said. &#34;This led to a bio-inspired metaphor for design, the swarm-amplified human, which essentially proposes that the swarm should self-organize itself into and act like human body parts. We hypothesize that this view may be a good metaphor for designing human-swarm loops that are capable of dealing with real-world dynamics.&#34;\n  In situations where a robot swarm acts as an extension of humans (i.e., helping humans to complete a task by covering areas they cannot cover), the design metaphor introduced by this team of researchers could be used to navigate the complex design space of human-swarm interactions. This could lead to the development of human-swarm systems that are more efficient and can be applied in more complex scenarios.\n   &#34;For example, we can ask how real body part control feels like and map this onto the human-swarm interface design,&#34; Hasbach explained. &#34;How often have you consciously thought about your leg movement when walking down the street? Probably not that often. This makes sense from an evolutionary perspective; stereotypical body control is taken care of by neural subsystems so that the conscious cognitive system can deal with more complex world dynamics.&#34;\n     The paper by Hasbach and his colleagues highlights the potential benefits of using human state classification as a control input fed to a robot swarm, rather than having a human user controlling the swarm at all times. The design metaphor introduced by the researchers could also serve as an inspiration for the development of what is sometimes referred to as &#34;swarm cognition.&#34; This is the idea that biological swarms (e.g., ants, bird folks) and the brain share similar self-organizing principles that lead to cognition and decision making.\n  The idea of &#34;swarm cognition&#34; has not yet been explored in the context of engineering. The researchers&#39; work could open interesting possibilities for the for the development of robot swarms inspired both by the brain and biological swarms.\n  &#34;Designing robot swarms that are an extension of the human body relates to integrating neural logic into robot swarms on the network level, which has received only limited attention so far,&#34; Hasbach said. &#34;We have proposed some ideas on how   could be thought of as neural systems.&#34;\n  In the future, the theoretical approach devised by this team of researchers could inspire the development of new systems that enable effective interactions between humans and swarms of robots. In their paper, Hasbach and his colleagues also presented the results of an interesting experiment that showed how a   swarm could be considered as a self-organized interface in and of itself.\n  &#34;So far, our concepts are of purely theoretical nature, but we are currently implementing prototypes so that we can empirically investigate the swarm-amplified human,&#34; Hasbach said. &#34;The   will be used to update the swarm-amplified human as a scientific theory on how to design human-swarm interaction.&#34;             Citation: A theoretical approach for designing a self-organizing human-swarm system (2021, August 5) retrieved 8 August 2021 from https://techxplore.com/news/2021-08-theoretical-approach-self-organizing-human-swarm.html\n  This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no part may be reproduced without the written permission. The content is provided for information purposes only.", "posttime": "2021-08-08 21:49:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u7ec4\u7ec7,approach,\u4eba\u7c7b", "title": "\u4e00\u79cd\u8bbe\u8ba1\u81ea\u7ec4\u7ec7\u4eba\u7fa4\u7cfb\u7edf\u7684\u7406\u8bba\u65b9\u6cd5", "title_en": "A theoretical approach for designing a self-organizing human-swarm system", "transed": 1, "url": "https://techxplore.com/news/2021-08-theoretical-approach-self-organizing-human-swarm.html", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u7ec4\u7ec7", "approach", "\u4eba\u7c7b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072110, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6211\u5173\u4e8e Zig \u8bed\u8a00\u7684\u5e16\u5b50\u4e4b\u540e\uff0c\u6211\u88ab\u6307\u5411\u4e86 Odin \u8bed\u8a00\u3002\u4ece\u8868\u9762\u4e0a\u770b\uff0c\u5965\u4e01\u548c\u9f50\u683c\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u4ed6\u4eec\u5728\u884c\u4e3a\u548c\u5fc3\u6001\u4e0a\u6709\u4e00\u4e9b\u6839\u672c\u7684\u4e0d\u540c\u3002\u6211\u5728\u8fd9\u91cc\u5199\u7684\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u662f\u57fa\u4e8e\u5bf9 Odin \u8bed\u8a00\u6587\u6863\u548c\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u7684\u7c97\u7565\u9605\u8bfb\u3002 Odin \u5728\u6761\u4ef6\u7f16\u8bd1\u65b9\u9762\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u89c2\u70b9\u3002\u5728\u7f16\u8bd1\u65f6\u8bc4\u4f30\u7684 if \u8bed\u53e5\u5f88\u96be\u533a\u5206\u3002\u6211\u66f4\u559c\u6b22 Odin \u7684 when \u5b50\u53e5\uff0c\u4f46 Zig \u4e5f\u6709 comptime if\uff0c\u8fd9\u4f7f\u5b83\u66f4\u5bb9\u6613\u3002\u6211\u5728 Zig \u4e2d\u4f7f\u7528\u6b64\u6a21\u578b\u7684\u5b9e\u9645\u95ee\u9898\u662f\uff0c\u5f88\u5bb9\u6613\u9047\u5230\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff1a\u60a8\u7f16\u5199\u7684\uff08\u65b0\uff09\u4ee3\u7801\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u4f46 Zig \u4f1a\u68c0\u6d4b\u5230\u5b83\u672a\u4f7f\u7528\u5e76\u4e14\u4e0d\u4f1a\u8d39\u5fc3\u7f16\u8bd1\u5b83\u3002\u5f53\u60a8\u5b9e\u9645\u5c1d\u8bd5\u4f7f\u7528\u5b83\u65f6\uff0c\u60a8\u4f1a\u9047\u5230\u8bb8\u591a\u9700\u8981\u4fee\u590d\u7684\u7f16\u8bd1\u9519\u8bef\u3002\u8fd9\u4e0e\u6211\u901a\u5e38\u7684\u5de5\u4f5c\u65b9\u5f0f\u5f62\u6210\u9c9c\u660e\u5bf9\u6bd4\uff0c\u5373\u51e0\u4e4e\u603b\u662f\u8ba9\u4ee3\u7801\u5904\u4e8e\u53ef\u7f16\u8bd1\u72b6\u6001\uff0c\u5e76\u4f9d\u9760\u7f16\u8bd1\u5668\u6765\u4ed4\u7ec6\u68c0\u67e5\u6211\u7684\u5de5\u4f5c\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4e0e\u535a\u5ba2\u6587\u7ae0\u548c Odin \u8bed\u8a00\u7684\u4f5c\u8005 Ginger \u5b58\u5728\u4e25\u91cd\u5206\u6b67\u3002\u6211\u53ea\u60f3\u4ece\u90a3\u7bc7\u6587\u7ae0\u4e2d\u63d0\u53d6\u6211\u8ba4\u4e3a\u6700\u91cd\u8981\u7684\u51e0\u70b9\uff1a\u6211\u4ece\u6765\u6ca1\u6709\u8ba9\u7a0b\u5e8f\u5bfc\u81f4\u7cfb\u7edf\u5728\u771f\u5b9e\u8f6f\u4ef6\u4e2d\u8017\u5c3d\u5185\u5b58\uff08\u4eba\u5de5\u538b\u529b\u6d4b\u8bd5\u9664\u5916\uff09\u3002\u5982\u679c\u60a8\u5728\u4f4e\u5185\u5b58\u73af\u5883\u4e2d\u5de5\u4f5c\uff0c\u60a8\u5e94\u8be5\u975e\u5e38\u4e86\u89e3\u5176\u5c40\u9650\u6027\u5e76\u505a\u51fa\u76f8\u5e94\u7684\u8ba1\u5212\u3002\u5982\u679c\u60a8\u662f\u53f0\u5f0f\u673a\u5e76\u4e14\u5185\u5b58\u4e0d\u8db3\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u4ece\u6050\u614c\u4e2d\u6062\u590d\uff0c\u9000\u51fa\u7a0b\u5e8f\u751a\u81f3\u5173\u95ed\u8ba1\u7b97\u673a\u3002\u81f3\u4e8e\u5176\u4ed6\u673a\u5668\uff0c\u8bf7\u76f8\u5e94\u8ba1\u5212\uff01\u8fd9\u4e0e\u81ea\u52a8\u5806\u5206\u914d\u6709\u5173\uff08\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u8fd9\u901a\u5e38\u4f1a\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u56e0\u4e3a\u6ca1\u6709\u597d\u7684\u65b9\u6cd5\u62a5\u544a\u5b83\uff09\u3002\u6211\u5bf9\u6b64\u7684\u53cd\u5e94\u662f\u201c640KB \u8db3\u591f\u4e86\u201d\uff0c\u5bf9\u5417\uff1f\u9996\u5148\uff0c\u6211\u4ee5\u7f16\u5199\u6570\u636e\u5e93\u4e3a\u751f\u3002\u5f53\u7528\u6237\u4f7f\u7528\u5927\u5c0f\u4e3a 100 GB \u7684\u6570\u636e\u5e93\u65f6\uff0c\u6211\u5728 128 MB \u7684\u5bb9\u5668\u4e0a\u8fd0\u884c\u6211\u7684\u4ee3\u7801\u3002\u5373\u4f7f\u5728\u5408\u9002\u7684\u670d\u52a1\u5668\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u6211\u51e0\u4e4e\u603b\u662f\u4e0d\u5f97\u4e0d\u5904\u7406\u5927\u4e8e\u5185\u5b58\u7684\u6570\u636e\u96c6\u3002\u6bcf\u6b21\u542f\u52a8\u7a0b\u5e8f\u65f6\uff0c\u51e0\u4e4e\u90fd\u4f1a\u53d1\u751f\u5185\u5b58\u4e0d\u8db3\u7684\u60c5\u51b5\u3002\u7a33\u5065\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u5bf9\u4e8e\u6784\u5efa\u7cfb\u7edf\u8f6f\u4ef6\u5f88\u91cd\u8981\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u6211\u770b\u6765\uff0c\u76f8\u5e94\u7684\u8ba1\u5212\u5e76\u4e0d\u662f\u4f7f\u7528\u4e00\u79cd\u4f1a\u8ba9\u6211\u9677\u5165\u56f0\u5883\u7684\u8bed\u8a00\u3002\u8fd9\u4e0d\u662f\u7406\u8bba\u4e0a\u7684\uff0c\u8fd9\u662f\u6211\u4eec\u5fc5\u987b\u5904\u7406\u7684\u771f\u5b9e\u60c5\u51b5\u3002 \u2026\u6211\u5bf9\u57fa\u4e8e\u5f02\u5e38/\u7c7b\u4f3c\u5f02\u5e38\u7684\u9519\u8bef\u7684\u95ee\u9898\u4e0d\u662f\u8bed\u6cd5\uff0c\u800c\u662f\u5b83\u4eec\u5982\u4f55\u9f13\u52b1\u9519\u8bef\u4f20\u64ad\u3002\u8fd9\u79cd\u9f13\u52b1\u4fc3\u8fdb\u4e86\u4e00\u79cd\u5c06\u9519\u8bef\u5411\u4e0a\u4f20\u9012\u7ed9\u201c\u5176\u4ed6\u4eba\u201d\u6765\u5904\u7406\u9519\u8bef\u7684\u6587\u5316\u3002\u6211\u8ba8\u538c\u8fd9\u79cd\u6587\u5316\uff0c\u6211\u4e0d\u60f3\u5728\u8bed\u8a00\u5c42\u9762\u9f13\u52b1\u5b83\u3002\u5728\u90a3\u91cc\u5904\u7406\u9519\u8bef\uff0c\u7136\u540e\u4e0d\u8981\u5c06\u5b83\u4eec\u4f20\u9012\u5230\u5806\u6808\u4e2d\u3002\u4f60\u5f04\u5f97\u4e00\u56e2\u7cdf\uff1b\u4f60\u6e05\u7406\u5b83\u3002\n\u6211\u4e00\u5f00\u59cb\u771f\u7684\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u56de\u7b54\u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u751a\u81f3\u6ca1\u6709\u610f\u4e49\uff0c\u751a\u81f3\u90fd\u4e0d\u597d\u7b11\u3002\u8003\u8651\u4e00\u4e2a\u573a\u666f\uff0c\u6211\u9700\u8981\u8c03\u7528\u4e00\u4e2a\u53ef\u4ee5\u4e3a\u6211\u8ba1\u7b97\u4e00\u4e9b\u503c\u7684\u670d\u52a1\u3002\u6211\u8fd9\u6837\u505a\u662f\u4f5c\u4e3a gRPC over TCP + SSL\u3002\u8ba9\u6211\u6570\u4e00\u6570\u8fd9\u91cc\u53ef\u80fd\u53d1\u751f\u7684\u9519\u8bef\u6570\uff0c\u597d\u5417\uff1f\u6211\u7684\u8c03\u7528\u670d\u52a1\u7684\u4ee3\u7801\u9700\u8981\u80fd\u591f\u5904\u7406\u4efb\u4f55/\u6240\u6709\u8fd9\u4e9b\u3002\u53ef\u80fd\u8fd8\u6709\u5f88\u591a\u6211\u6ca1\u6709\u8003\u8651\u5230\u3002\u5c1d\u8bd5\u6784\u5efa\u8fd9\u6837\u7684\u4e1c\u897f\u662f\u7e41\u91cd\u7684\u3001\u8106\u5f31\u7684\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u884c\u4e0d\u901a\u3002\u5c31\u6b64\u800c\u8a00\uff0c\u5982\u679c\u6211\u4e3a\u670d\u52a1\u4f20\u9012\u4e86\u9519\u8bef\u7684 URL\uff0c\u90a3\u4e48\u6267\u884c gRPC \u8c03\u7528\u7684\u4ee3\u7801\u662f\u4ec0\u4e48\uff0c\u4f46\u4f1a\u5192\u6ce1\u9519\u8bef\uff1f\u5982\u679c DNS \u8fd4\u56de\u9519\u8bef\uff0c\u6216\u8005\u5b58\u5728\u8bc1\u4e66\u95ee\u9898\uff0c\u60a8\u5982\u4f55\u6e05\u7406\u5b83\uff1f\u552f\u4e00\u5408\u7406\u7684\u505a\u6cd5\u662f\u63d0\u4f9b\u5c3d\u53ef\u80fd\u591a\u7684\u4e0a\u4e0b\u6587\u5e76\u5c06\u9519\u8bef\u62a5\u544a\u7ed9\u8c03\u7528\u8005\u3002\u5728\u6784\u5efa\u5065\u58ee\u7684\u8f6f\u4ef6\u65f6\uff0c\u5c06\u5b83\u5192\u6ce1\u4ee5\u4fbf\u8c03\u7528\u8005\u53ef\u4ee5\u51b3\u5b9a\u505a\u4ec0\u4e48\u4e0d\u662f\u56de\u4f20\uff0c\u8fd9\u662f\u6700\u4f73\u5b9e\u8df5\u3002\u60a8\u53ea\u9700\u8981\u67e5\u770b Erlang \u4ee5\u53ca\u5bf9\u53ef\u9760\u6027\u8981\u6c42\u6700\u9ad8\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5982\u4f55\u6784\u5efa\u7684\u3002\u5b83\u4eec\u6ce8\u5b9a\u4f1a\u5931\u8d25\uff0c\u9519\u8bef\u5904\u7406\u548c\u6062\u590d\u53d1\u751f\u5728\u4e13\u7528\uff08\u4e3b\u7ba1\uff09\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4f4d\u7f6e\u5177\u6709\u6b63\u786e\u7684\u4e0a\u4e0b\u6587\u6765\u505a\u51fa\u5b9e\u9645\u51b3\u5b9a\u3002\u7136\u800c\uff0c\u8fd9\u7684\u81f4\u547d\u5f71\u54cd\u662f Zig \u6709\u660e\u786e\u7684\u9519\u8bef\u6982\u5ff5\uff0c\u800c Odin \u4f9d\u8d56\u4e8e\u591a\u8fd4\u56de\u503c\u7cfb\u7edf\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230 Go \u6709\u591a\u597d\u3002\u4e8b\u5b9e\u4e0a\uff0cGo \u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\u662f\u8fdb\u884c\u6b63\u786e\u7684\u9519\u8bef\u5904\u7406\u9700\u8981\u591a\u5c11\u624b\u52a8\u5de5\u4f5c\u3002\u4f46\u6211\u8ba4\u4e3a\u8fd9\u91cc\u7684\u5173\u952e\u95ee\u9898\u662f\u9519\u8bef\u4f5c\u4e3a\u8bed\u8a00\u7684\u7b2c\u4e00\u7c7b\u65b9\u9762\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\u7684\u80fd\u529b\uff0cerrdefer\u3002\u8fd9\u4e2a\u5355\u4e00\u7684\u8bed\u8a00\u7279\u6027\u662f\u6211\u8ba4\u4e3a Zig \u662f\u4e00\u79cd\u4e86\u4e0d\u8d77\u7684\u8bed\u8a00\u7684\u539f\u56e0\u3002\u4e00\u6d41\u9519\u8bef\u7684\u6982\u5ff5\u4e0e errdefer \u76f8\u7ed3\u5408\uff0c\u4f7f\u6784\u5efa\u590d\u6742\u7ed3\u6784\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u6b63\u5728\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u5c06\u5b83\u6620\u5c04\u5230\u5185\u5b58\uff0c\u9a8c\u8bc1\u5b83\u7684\u5927\u5c0f\uff0c\u7136\u540e\u5b83\u5177\u6709\u6b63\u786e\u7684\u54c8\u5e0c\u503c\u3002\u6211\u4f7f\u7528 defer \u6765\u786e\u4fdd\u6211\u6e05\u7406\u4e86\u6587\u4ef6\u53e5\u67c4\uff0c\u4f46\u662f\u8fd4\u56de\u7684\u5185\u5b58\u5462\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6709\u9519\u8bef\uff0c\u6211\u60f3\u6e05\u7406\u5b83\uff0c\u4f46\u4e0d\u662f\u5176\u4ed6\u60c5\u51b5\u3002\u8003\u8651\u5982\u4f55\u5728\u6ca1\u6709 errdefer \u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u6b64\u4ee3\u7801\u3002\u6211\u5fc5\u987b\u5728\u6211\u60f3\u8981\u8fd4\u56de\u9519\u8bef\u7684\u4e24\u4e2a\u5730\u65b9\u6dfb\u52a0\u201c\u5173\u95ed\u5730\u56fe\u201d\u90e8\u5206\u3002\u5982\u679c\u6211\u4f7f\u7528\u591a\u4e2a\u8d44\u6e90\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6211\u53ef\u80fd\u9700\u8981\u505a\u4e00\u4e9b\u9700\u8981\u6587\u4ef6\u3001\u7f51\u7edc\u5957\u63a5\u5b57\u3001\u5185\u5b58\u7b49\u7684\u64cd\u4f5c\u3002\u8fd9\u4e9b\u64cd\u4f5c\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u80fd\u5931\u8d25\uff0c\u4f46\u6211\u53ea\u60f3\u6e05\u7406\u5b83\u4eec\u5931\u8d25\u3002\u5426\u5219\uff0c\u6211\u9700\u8981\u5c06\u5b83\u4eec\u8fd4\u56de\u7ed9\u6211\u7684\u6765\u7535\u8005\u3002\u4f7f\u7528 errdefer\uff08\u5b83\u4f9d\u8d56\u4e8e\u5e38\u89c4\u8fd4\u56de\u548c\u9519\u8bef\u4e4b\u95f4\u7684\u660e\u786e\u533a\u522b\uff09\u5c06\u786e\u4fdd\u6211\u6ca1\u6709\u95ee\u9898\u3002\u4e00\u5207\u6b63\u5e38\uff0c\u6211\u5fc5\u987b\u8bb0\u4f4f\u7684\u72b6\u6001\u6570\u91cf\u5927\u5927\u51cf\u5c11\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u8003\u8651\u4e00\u4e0b\u5728 Odin \u6216 Go \u4e2d\u4f60\u4f1a\u5982\u4f55\u5904\u7406\uff0c\u4f60\u4f1a\u770b\u5230\u9519\u8bef\u5904\u7406\u5982\u4f55\u6210\u4e3a\u4e00\u4e2a\u5de8\u5927\u7684\u91ce\u517d\u3002\u6709\u660e\u786e\u7684\u8bed\u8a00\u652f\u6301\u6765\u5e2e\u52a9\u5b9e\u73b0\u8fd9\u4e00\u70b9\u771f\u7684\u5f88\u597d\u3002", "note_en": "I was pointed to the Odin language after my post about  the Zig language. On the surface, Odin and Zig are very similar, but they have some fundamental differences in behavior and mindset. I\u2019m basing most of what I\u2019m writing here on admittedly cursory reading of the Odin language docs and  this blog post.\n Odin has a great point on conditional compilation. The  if statements that are evaluated at compile time  are hard to distinguish. I like Odin\u2019s  when clauses better, but Zig has  comptime if as well, which make it easier. The actual problem I have with this model in Zig is that it is easy to get to a situation where you write (new) code that doesn\u2019t get called, but Zig will detect that it is unused and not bother compiling it. When you are actually trying to use it, you\u2019ll hit a lot of compilation errors that you need to fix. This is in contrast to the way I would usually work, which is to almost always have the code in compliable state and leaning hard on the compiler to double check my work.\n Beyond that, I have grave disagreements with Ginger, the author of  the blog post and the Odin language. I want to pull just a couple of what I think are the most important points from that post:\n I have never had a program cause a system to run out of memory in real software (other than artificial stress tests). If you are working in a low-memory environment, you should be extremely aware of its limitations and plan accordingly. If you are a desktop machine and run out of memory, don\u2019t try to recover from the panic, quit the program or even shut-down the computer. As for other machinery, plan accordingly!\n This is in relation to automatic heap allocations (which can fail, which will usually kill the process because there is no good way to report it). My reaction to that is \u201c640KB is enough for everything\u201d, right?\n To start with, I write databases for a living. I run my code on containers with 128MB when the user uses a database that is 100s of GB in size. Even if running on proper server machines, I almost always have to deal with datasets that are bigger than memory. Running out of memory happens to us pretty much every single time we start the program. And handling this scenario robustly is  important to building system software. In this case, planning accordingly in my view is not using a language that can put me in a hole. This is  not theoretical, that is real scenario that we have to deal with.\n  \u2026my issue with exception-based/exception-like errors is not the syntax but how they encourage error propagation. This encouragement promotes a culture of pass the error up the stack for \u201csomeone else\u201d to handle the error. I hate this culture and I do not want to encourage it at the language level. Handle errors there and then and don\u2019t pass them up the stack.  You make your mess; you clean it.\n I didn\u2019t really know how to answer that at first. There are so many cases where that doesn\u2019t even make sense that it isn\u2019t even funny. Consider a scenario where I need to call a service that would compute some value for me. I\u2019m doing that as gRPC over TCP + SSL. Let me count the number of errors that can happen here, shall we?\n  My code, which is calling the service, need to be able to handle any / all of those. And probably quite a few more that I didn\u2019t account for. Trying to build something like that is onerous, fragile and doesn\u2019t really work. For that matter, if I passed the wrong URL for the service, what is the code that is doing the gRPC call supposed to do but bubble the error up? If the DNS is returning an error, or there is a certificate issue, how  do you clean it up? The only reasonable thing to do is to give as much context as possible and raise the error to the caller.\n When building robust software, bubbling it up so the caller can decide what to do isn\u2019t about passing the back, it is a b  best practice. You only need to look at Erlang and how applications with the highest requirements for reliability are structured. They are  meant to fail, error handling and recovery is something that happens in dedicated (supervisors) locations, because these places has the right context to make an actual determination.\n The killer impact of this, however, is that Zig has explicit notion of errors, while Odin relies on the multiple return values system. We have seen how good that is with Go. In fact, one of the most common issues  with Go is the issue with how much manual work it takes to do proper error handling.\n But I think that the key issue here is that errors as a first class aspect of the language gives us a very powerful ability,  errdefer. This single language feature is the reason I think that Zig is an amazing language. The concept of first class errors combine with  errdefer makes building complex structures so much easier.\n   Note that I\u2019m opening a file, mapping it to memory, validating its size and then that it has the right hash. I\u2019m using  defer to ensure that I cleanup the file handle, but what about the returned memory, in this case, I want to clean it up  if there is an error, but not otherwise.\n Consider how you would write this code without  errdefer. I would have to add the \u201cclose the map\u201d portion to both places where I want to return an error. And what happens if I\u2019m using more than a couple of resources, I may be needing to do something that require a file, network socket, memory, etc. Any of those operations can fail, but I want to clean them up only on failure. Otherwise, I need to return them to my caller. Using  errdefer (which relies on the explicit distinction between regular returns and errors) will ensure that I don\u2019t have a problem. Everything works, and the amount of state that I have to keep in my head is  greatly reduce.\n Consider how you\u2019ll that that in Odin or Go, on the other hand, and you can see how error handling become a big beast. Having explicit language support to assist in that is  really nice.", "posttime": "2021-08-08 21:49:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5965\u4e01,odin,\u9519\u8bef", "title": "\u8c03\u67e5\u5965\u4e01\u548c\u9f50\u683c", "title_en": "Looking into Odin and Zig", "transed": 1, "url": "https://ayende.com/blog/194466-A/looking-into-odin-and-zig-my-notes?key=42d23515614840bead91eca65823b9d5", "via": "", "real_tags": ["\u5965\u4e01", "odin", "\u9519\u8bef"]}, {"category": "", "categoryclass": "", "imagename": "555133b5180c351b5b2f942fc37a98fb.jpg", "infoid": 1072109, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "M \u4f1a\u5728\u5b66\u6821\u9047\u5230\u6bd5\u8fbe\u54e5\u62c9\u65af\u5173\u4e8e\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u5b9a\u7406\u2014\u2014\u659c\u8fb9\u4e0a\u7684\u5e73\u65b9\u7b49\u4e8e\u53e6\u5916\u4e24\u6761\u8fb9\u4e0a\u7684\u5e73\u65b9\u4e4b\u548c\u2014\u2014\u3002\u4f46\u4e0d\u592a\u559c\u6b22\u6570\u5b66\u7684\u4eba\u53ef\u80fd\u4f1a\u95ee\uff0c\u8fd9\u79cd\u77e5\u8bc6\u4ec0\u4e48\u65f6\u5019\u624d\u80fd\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u6709\u7528\u3002\u4e00\u4e2a\u6bd4\u6bd5\u8fbe\u54e5\u62c9\u65af\u65e9 1000 \u591a\u5e74\u7684\u7b54\u6848\u662f\u571f\u5730\u6d4b\u91cf\u3002\u6f5c\u4f0f\u5728\u4f0a\u65af\u5766\u5e03\u5c14\u535a\u7269\u9986\u4e2d\u7684\u662f\u4e00\u5757 3700 \u5e74\u5386\u53f2\u7684\u6ce5\u677f\uff0c\u540d\u4e3a Si.427\u3002\u81ea\u4ece\u5b83\u4e8e 19 \u4e16\u7eaa\u5728\u897f\u5e15\uff08Sippar\uff09\u2014\u2014\u4e00\u5ea7\u4f4d\u4e8e\u73b0\u5728\u4f0a\u62c9\u514b\u5883\u5185\u7684\u5df4\u6bd4\u4f26\u53e4\u57ce\u88ab\u6316\u6398\u51fa\u6765\u4ee5\u6765\uff0c\u5b83\u5c31\u4e00\u76f4\u5b58\u5728\u3002\u7136\u800c\uff0c\u76f4\u5230\u4eca\u5e74\uff0c\u6fb3\u5927\u5229\u4e9a\u65b0\u5357\u5a01\u5c14\u58eb\u5927\u5b66\u7684\u6570\u5b66\u5bb6\u4e39\u5c3c\u5c14\u66fc\u65af\u83f2\u5c14\u5fb7\u624d\u63ed\u793a\u4e86\u5b83\u7684\u91cd\u8981\u6027\u3002\u6b63\u5982\u4ed6\u5728\u300a\u79d1\u5b66\u57fa\u7840\u300b\u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\uff0cMansfield \u535a\u58eb\u5df2\u7ecf\u8bc1\u660e Si.427 \u523b\u6709\u4e16\u754c\u4e0a\u5df2\u77e5\u6700\u53e4\u8001\u7684\u5e94\u7528\u51e0\u4f55\u793a\u4f8b\u3002 Si.427 \u4f3c\u4e4e\u662f\u7531\u4e00\u540d\u6d4b\u91cf\u5458\u5728\u90e8\u5206\u571f\u5730\u51fa\u552e\u540e\u5b9a\u4e49\u571f\u5730\u8fb9\u754c\u800c\u521b\u5efa\u7684\u3002\u8fd9\u672c\u8eab\u5c31\u5f88\u4e0d\u8d77\u773c\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5b83\u7684\u6587\u672c\u63cf\u8ff0\u4e86\u5982\u4f55\u4f7f\u7528\u73b0\u5728\u79f0\u4e3a\u52fe\u80a1\u6570\u4e09\u5143\u7ec4\u6765\u7ed8\u5236\u51c6\u786e\u7684\u76f4\u89d2\u3002\u52fe\u80a1\u4e09\u5143\u7ec4\u662f\u52fe\u80a1\u5b9a\u7406\u7684\u7279\u4f8b\u3002\u5b83\u4eec\u662f\u4e00\u7ec4\u6574\u6570\uff0c\u5bf9\u5e94\u4e8e\u7279\u5b9a\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u8fb9\u957f\u3002\u4f8b\u5982\uff0c\u4e09\u3001\u56db\u548c\u4e94\uff0c\u6216\u4e94\u300112 \u548c 13\u3002\u53e6\u4e00\u5757\u77f3\u677f\uff0cPlimpton 322\uff0c\u5728\u51e0\u5341\u5e74\u524d\u8868\u660e\u5df4\u6bd4\u4f26\u4eba\u77e5\u9053\u8fd9\u4e9b\u4e09\u5143\u7ec4\u3002\u7814\u7a76\u4eba\u5458\u65e0\u6cd5\u5c31\u4ed6\u4eec\u611f\u5174\u8da3\u7684\u539f\u56e0\u8fbe\u6210\u4e00\u81f4\u3002\u66fc\u65af\u83f2\u5c14\u5fb7\u535a\u58eb\u7684\u56de\u7b54\u662f\u8c03\u67e5\uff0c\u56e0\u4e3a\u8fd9\u662f\u519c\u4e1a\u53d1\u5c55\u7684\u65f6\u671f\uff0c\u571f\u5730\u6240\u6709\u6743\u7684\u60f3\u6cd5\u4e5f\u968f\u4e4b\u800c\u6765\u3002\u6d4b\u91cf\u5b57\u6bb5\u5927\u5c0f\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5176\u5212\u5206\u4e3a\u77e9\u5f62\u548c\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c\u8fd9\u4e24\u79cd\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u90fd\u5f88\u5bb9\u6613\u8ba1\u7b97\u3002\u4e86\u89e3\u6bd5\u8fbe\u54e5\u62c9\u65af\u4e09\u5143\u7ec4\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u7ed8\u5236\u6784\u5efa\u8fd9\u4e9b\u56fe\u5f62\u6240\u9700\u7684\u76f4\u89d2\uff0c\u56e0\u6b64\u6709\u7528\u7684\u4fe1\u606f\u4e5f\u662f\u5982\u6b64\u3002 .\u8fd9\u7bc7\u6587\u7ae0\u51fa\u73b0\u5728\u5370\u5237\u7248\u7684\u79d1\u5b66\u4e0e\u6280\u672f\u90e8\u5206\uff0c\u6807\u9898\u4e3a\u201c\u4e0d\u9700\u8981\u91cf\u89d2\u5668\u201d", "note_en": "M  will have encountered Pythagoras\u2019s theorem about right-angled triangles\u2014that the square on the hypotenuse is equal to the sum of the squares on the other two sides\u2014at school. But the less-mathematically inclined might have been tempted to ask when such knowledge would ever be useful in real life. One answer, predating Pythagoras by over 1,000 years, is in land surveying.\n  Lurking in a museum in Istanbul is a 3,700-year-old clay tablet known as Si.427. It has been there since it was dug up in the 19th century in Sippar, an ancient Babylonian city in what is now Iraq. Only this year, however, has its significance been revealed\u2014by Daniel Mansfield, a mathematician at the University of New South Wales, in Australia. As he describes in  Foundations of Science, Dr Mansfield has shown that Si.427 is inscribed with the world\u2019s oldest known example of applied geometry.\n Si.427 seems to have been created by a surveyor defining land boundaries after part of a field was sold. This is, of itself, unremarkable. What is remarkable is that its text describes the use of what are now called Pythagorean triples to draw accurate right angles.\n  Pythagorean triples are special cases of Pythagoras\u2019s theorem. They are sets of whole numbers that correspond to the lengths of the sides of particular right-angled triangles. Three, four and five for example, or five, 12 and 13. Another tablet, Plimpton 322, showed many decades ago that the Babylonians knew about these triples. What researchers could not agree on was why they were interested.\n Dr Mansfield\u2019s answer is surveying, for this was a period when agriculture was developing, and with it the idea of land ownership. One way to measure the size of a field is to divide it into rectangles and right-angled triangles, both of which have easily calculated areas. Knowing Pythagorean triples makes drawing the right angles needed to construct these figures easier, and so is useful information.  .\n  This article appeared in the Science &amp; technology section of the print edition under the headline &#34;No need for a protractor&#34;", "posttime": "2021-08-08 20:49:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6bd5\u8fbe\u54e5\u62c9\u65af,pythagorean,\u571f\u5730", "title": "\u5df4\u6bd4\u4f26\u4eba\u65e9\u5728\u6bd5\u8fbe\u54e5\u62c9\u65af\u4e4b\u524d\u5c31\u4f7f\u7528\u4e86\u6bd5\u8fbe\u54e5\u62c9\u65af\u7684\u601d\u60f3", "title_en": "The Babylonians used Pythagorean ideas long before Pythagoras", "transed": 1, "url": "https://www.economist.com/science-and-technology/the-babylonians-used-pythagorean-ideas-long-before-pythagoras/21803301", "via": "", "real_tags": ["\u6bd5\u8fbe\u54e5\u62c9\u65af", "\u571f\u5730"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072108, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8be5\u5e93\u652f\u6301 100 \u591a\u79cd\u8bed\u8a00\u3001\u81ea\u52a8\u6587\u672c\u5b9a\u4f4d\u548c\u811a\u672c\u68c0\u6d4b\u3001\u7528\u4e8e\u9605\u8bfb\u6bb5\u843d\u3001\u5355\u8bcd\u548c\u5b57\u7b26\u8fb9\u754c\u6846\u7684\u7b80\u5355\u754c\u9762\u3002 Tesseract.js \u65e2\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u5728\u5e26\u6709 NodeJS \u7684\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u3002", "note_en": "This library supports  more than 100 languages, automatic text  orientation and script detection, a simple interface for reading paragraph, word, and character  bounding boxes. Tesseract.js can run either in a  browser and on a server with  NodeJS.", "posttime": "2021-08-08 20:49:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,javascript,pure,\u5e26\u6709", "title": "Tesseract.js \u2013 100 \u79cd\u8bed\u8a00\u7684\u7eaf JavaScript OCR", "title_en": "Tesseract.js \u2013 Pure JavaScript OCR for 100 Languages", "transed": 1, "url": "https://tesseract.projectnaptha.com/", "via": "", "real_tags": ["java", "pure", "\u5e26\u6709"]}, {"category": "", "categoryclass": "", "imagename": "116ef3932d6edf9d95eefd8dd7473ee0.jpg", "infoid": 1072105, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(CNN) \u53bb\u5e74\uff0c\u4f18\u6b65 (UBER)\u3001Lyft (LYFT)\u3001DoorDash \u548c Instacart \u6210\u529f\u5730\u8ba9\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u6295\u7968\u652f\u6301\u4e00\u9879\u6295\u7968\u63aa\u65bd\uff0c\u514d\u9664\u4ed6\u4eec\u5c06\u53f8\u673a\u548c\u9001\u8d27\u5de5\u4eba\u5f52\u7c7b\u4e3a\u96c7\u5458\u3002\u73b0\u5728\uff0c\u8fd9\u4e9b\u516c\u53f8\u6b63\u5904\u4e8e\u9a6c\u8428\u8bf8\u585e\u5dde\u91c7\u53d6\u7c7b\u4f3c\u65b9\u6cd5\u7684\u65e9\u671f\u9636\u6bb5\u3002\u4ee3\u8868\u8fd9\u4e9b\u96f6\u5de5\u516c\u53f8\u7684\u8054\u76df\u9a6c\u8428\u8bf8\u585e\u5dde\u72ec\u7acb\u5de5\u4f5c\u8054\u76df\u8868\u793a\uff0c\u5b83\u4e8e\u5468\u4e09\u63d0\u4ea4\u4e86\u4e00\u4efd\u5173\u4e8e\u8be5\u5dde 2022 \u5e74\u6295\u7968\u7684\u95ee\u9898\uff0c\u8be5\u6295\u7968\u5c06\u201c\u6388\u4e88\u5386\u53f2\u6027\u7684\u65b0\u798f\u5229\u201d\uff0c\u5e76\u5141\u8bb8\u5de5\u4eba\u201c\u4fdd\u6301\u4f5c\u4e3a\u72ec\u7acb\u627f\u5305\u5546\u7684\u7075\u6d3b\u6027\u201d\uff0c\u8fd9\u662f\u5b83\u8bf4\u5927\u591a\u6570\u53f8\u673a\u60f3\u8981\u3002 \u201c\u5982\u679c\u6ca1\u6709\u6295\u7968\u63aa\u65bd\u6216\u7acb\u6cd5\u89e3\u51b3\u65b9\u6848\uff0c\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u62fc\u8f66\u548c\u4ea4\u4ed8\u7684\u672a\u6765\u53ef\u80fd\u4f1a\u5904\u4e8e\u5371\u9669\u4e4b\u4e2d\uff0c\u201d\u8be5\u8054\u76df\u8868\u793a\uff0c\u5176\u8bed\u8a00\u8ba9\u4eba\u60f3\u8d77\u8fd9\u4e2a\u95ee\u9898\u5bf9\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u7684\u4e25\u91cd\u7a0b\u5ea6\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u770b\u5230\u4e86\u52a0\u5229\u798f\u5c3c\u4e9a\u7684\u60c5\u51b5\u5982\u4f55\uff0c\u53cd\u5bf9\u6d3e\u8fd9\u6b21\u7ad9\u5728\u4e86\u4ed6\u4eec\u8ba4\u4e3a\u4e0a\u6b21\u4f7f\u7528\u7684\u5267\u672c\u7684\u524d\u6cbf\u3002\u5305\u62ec\u52b3\u5de5\u6743\u76ca\u5021\u5bfc\u8005\u548c\u793e\u533a\u56e2\u4f53\u5728\u5185\u7684\u4fdd\u62a4\u5de5\u4eba\u6743\u5229\u8054\u76df\u672c\u5468\u8fa9\u79f0\uff0c\u9a6c\u8428\u8bf8\u585e\u5dde\u7684\u63aa\u65bd\u5c06\u4e3a\u5de5\u4eba\u201c\u6c38\u4e45\u521b\u9020\u2018\u4e8c\u7b49\u2019\u5730\u4f4d\u201d\uff0c\u5e76\u6307\u51fa\u5176\u4e2d\u5927\u591a\u6570\u662f\u9ed1\u4eba\u3001\u68d5\u8272\u4eba\u548c\u79fb\u6c11\u3002\u957f\u671f\u4ee5\u6765\uff0c\u5c06\u6309\u9700\u5458\u5de5\u5f52\u7c7b\u4e3a\u5458\u5de5\u4e00\u76f4\u88ab\u89c6\u4e3a\u5bf9 Uber \u548c Lyft \u666e\u53ca\u7684\u5546\u4e1a\u6a21\u5f0f\u7684\u6f5c\u5728\u5a01\u80c1\u3002\u8fd9\u4e9b\u516c\u53f8\u901a\u8fc7\u5927\u91cf\u88ab\u89c6\u4e3a\u72ec\u7acb\u627f\u5305\u5546\u7684\u5de5\u4eba\u6269\u5927\u4e1a\u52a1\u89c4\u6a21\uff0c\u907f\u514d\u4e86\u4e3a\u5458\u5de5\u63d0\u4f9b\u6602\u8d35\u798f\u5229\u7684\u8d23\u4efb\uff0c\u4f8b\u5982\u6700\u4f4e\u5de5\u8d44\u3001\u52a0\u73ed\u8d39\u3001\u5e26\u85aa\u75c5\u5047\u548c\u5931\u4e1a\u4fdd\u9669\u3002\u8fd9\u4e9b\u516c\u53f8\u8fd8\u8868\u660e\uff0c\u4ed6\u4eec\u51c6\u5907\u4e0d\u9057\u4f59\u529b\u5730\u4e3a\u81ea\u5df1\u5236\u5b9a\u4e00\u9879\u66f4\u6709\u5229\u7684\u6cd5\u5f8b\u200b\u200b\u3002\u5f53\u9762\u4e34\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684\u4e00\u9879\u65b0\u52b3\u52a8\u6cd5\uff0c\u5373\u7b2c 5 \u53f7\u8bae\u4f1a\u6cd5\u6848\uff0c\u8be5\u6cd5\u6848\u4f7f\u516c\u53f8\u66f4\u96be\u5c06\u5de5\u4eba\u5f52\u7c7b\u4e3a\u8be5\u5dde\u7684\u72ec\u7acb\u627f\u5305\u5546\u65f6\uff0c\u4f18\u6b65\u3001Lyft\u3001DoorDash \u548c Instacart \u5728\u4e00\u9879\u540d\u4e3a Proposition \u7684\u6295\u7968\u63aa\u65bd\u4e0a\u603b\u5171\u82b1\u8d39\u4e86 2.25 \u4ebf\u7f8e\u514322 \u6216 22 \u53f7\u63d0\u6848\u4ee5\u6709\u6548\u5730\u56de\u907f\u5b83\u3002\u4ed6\u4eec\u53d1\u8d77\u4e86\u4e00\u573a\u79ef\u6781\u7684\u7535\u89c6\u5e7f\u544a\u3001\u5e94\u7528\u5185\u4fe1\u606f\u548c\u6df7\u6dc6\u90ae\u4ef6\u6d3b\u52a8\uff0c\u7528\u5176\u4fe1\u606f\u8f70\u70b8\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u3002 22 \u53f7\u63d0\u6848\u5141\u8bb8\u516c\u53f8\u5c06\u5de5\u4eba\u5f52\u7c7b\u4e3a\u72ec\u7acb\u627f\u5305\u5546\uff0c\u540c\u65f6\u7ed9\u4e88\u4e00\u4e9b\u53f8\u673a\u67d0\u4e9b\u798f\u5229\u8ba9\u6b65\uff0c\u4f46\u5982\u679c\u4e0d\u901a\u8fc7\u8be5\u63aa\u65bd\u800c\u4ed6\u4eec\u88ab\u5f52\u7c7b\u4e3a\u96c7\u5458\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u83b7\u5f97\u7684\u5168\u5957\u4fdd\u62a4\u3002\u63a5\u4e0b\u6765\u662f\u9a6c\u8428\u8bf8\u585e\u5dde\uff0c\u5b83\u7684\u52b3\u52a8\u6cd5\u4e5f\u540c\u6837\u4e25\u683c\u3002\u9a6c\u8428\u8bf8\u585e\u5dde\u603b\u68c0\u5bdf\u957f\u76ee\u524d\u6b63\u5728\u5c31 Uber \u548c Lyft \u5bf9\u5458\u5de5\u8fdb\u884c\u5206\u7c7b\u7684\u65b9\u5f0f\u5411\u4ed6\u4eec\u63d0\u51fa\u6311\u6218\uff0c\u4e24\u5bb6\u516c\u53f8\u5df2\u8868\u793a\u6253\u7b97\u4e0e\u4e4b\u6297\u4e89\u3002\n\u4e0e 22 \u53f7\u63d0\u6848\u7c7b\u4f3c\uff0c\u62df\u8bae\u7684\u9a6c\u8428\u8bf8\u585e\u5dde\u6295\u7968\u8ba1\u5212\u63d0\u51fa\u4e86\u57fa\u4e8e\u201c\u53c2\u4e0e\u65f6\u95f4\u201d\u7684\u201c\u6700\u4f4e\u5de5\u8d44\u7684 120%\u201d\u7684\u6700\u4f4e\u6536\u5165\u4fdd\u8bc1\uff0c\u8fd9\u610f\u5473\u7740\u552f\u4e00\u8ba1\u7b97\u7684\u65f6\u95f4\u662f\u53f8\u673a\u5b8c\u6210\u4e58\u8f66\u6216\u9001\u8d27\u8bf7\u6c42\u7684\u65f6\u95f4\uff0c\u800c\u4e0d\u662f\u65f6\u95f4\u4ed6\u4eec\u82b1\u5728\u7b49\u5f85\u6f14\u51fa\u4e0a\u3002 \uff08\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\u52b3\u5de5\u4e2d\u5fc3\u7684\u4e00\u9879\u5206\u6790\u4f30\u8ba1\uff0c\u6839\u636e 22 \u53f7\u63d0\u6848\uff0c\u4f18\u6b65\u548c Lyft \u53f8\u673a\u7684\u5de5\u8d44\u4fdd\u8bc1\u76f8\u5f53\u4e8e\u6bcf\u5c0f\u65f6 5.64 \u7f8e\u5143\uff0c\u800c\u4e0d\u662f 15.60 \u7f8e\u5143\u6216 13 \u7f8e\u5143\u6700\u4f4e\u5de5\u8d44\u7684 120%\uff0c\u56e0\u4e3a\u5b58\u5728\u6b64\u7c7b\u6f0f\u6d1e\u3002\uff09\u8fd8\u5c06\u83b7\u5f97\u6bcf\u82f1\u91cc 0.26 \u7f8e\u5143\u7684\u8865\u507f\uff0c\u7528\u4e8e\u652f\u4ed8\u8f66\u8f86\u4fdd\u517b\u548c\u6c7d\u6cb9\u8d39\u7528\u3002 \uff08\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\u52b3\u5de5\u4e2d\u5fc3\u6b64\u524d\u66fe\u6307\u51fa\uff0c22 \u53f7\u63d0\u6848\u7684 0.30 \u7f8e\u5143\u8865\u507f\u4f4e\u4e8e\u7f8e\u56fd\u56fd\u7a0e\u5c40\u4f30\u8ba1\u7684\u6bcf\u82f1\u91cc\u62e5\u6709\u548c\u8fd0\u8425\u8f66\u8f86\u6210\u672c 0.58 \u7f8e\u5143\u3002\uff09\u867d\u7136\u8be5\u63d0\u6848\u5305\u62ec\u516c\u53f8\u4e3a\u67d0\u4e9b\u7b26\u5408\u6761\u4ef6\u7684\u5de5\u4eba\u63d0\u4f9b\u7684\u533b\u7597\u4fdd\u5065\u6350\u6b3e\uff0c\u4f46\u6839\u636e\u4fdd\u62a4\u5de5\u4eba\u6743\u5229\u8054\u76df\u7684\u8bf4\u6cd5\uff0c\u4e5f\u662f\u57fa\u4e8e\u201c\u5de5\u4f5c\u65f6\u95f4\u201d\uff0c\u7531\u4e8e\u6700\u4f4e\u5de5\u4f5c\u65f6\u95f4\u8981\u6c42\uff0c\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u5de5\u4eba\u53ef\u80fd\u7b26\u5408\u6761\u4ef6\u3002 \uff08\u6839\u636e\u9a6c\u8428\u8bf8\u585e\u5dde\u72ec\u7acb\u5de5\u4f5c\u8054\u76df\u7684\u8bf4\u6cd5\uff0c\u4f7f\u7528\u201c\u53c2\u4e0e\u65f6\u95f4\u201d\u4f5c\u4e3a\u8861\u91cf\u6807\u51c6\u53ef\u4ee5\u63d0\u9ad8\u5de5\u4f5c\u7684\u7075\u6d3b\u6027\uff0c\u58f0\u79f0\u201c\u5927\u591a\u6570\u53f8\u673a\u4ece\u5176\u4ed6\u6765\u6e90\u83b7\u5f97\u533b\u7597\u4fdd\u5065\uff0c\u901a\u5e38\u6765\u81ea\u5168\u804c\u5de5\u4f5c\u3002\u201d\uff09\u4e00\u4e9b\u5de5\u4eba\u8fd8\u53ef\u4ee5\u83b7\u5f97\u5e26\u85aa\u75c5\u5047\u3001\u5e26\u85aa\u63a2\u4eb2\u5047\u548c\u75c5\u5047\uff0c\u4ee5\u53ca\u5728\u5de5\u4f24\u60c5\u51b5\u4e0b\u7684\u533b\u7597\u548c\u4f24\u6b8b\u6d25\u8d34\uff0c\u4ee5\u4ee3\u66ff\u5de5\u4f24\u8d54\u507f\u3002\u5982\u679c\u4ed6\u4eec\u7684\u5e10\u6237\u88ab\u505c\u7528\uff0c\u5de5\u4eba\u5c06\u6709\u80fd\u529b\u63d0\u51fa\u4e0a\u8bc9\uff0c\u5e76\u4f1a\u63a5\u53d7\u6709\u5173\u516c\u5171\u5b89\u5168\u95ee\u9898\u7684\u57f9\u8bad\u3002\u5b83\u8fd8\u5c06\u4f7f\u96f6\u5de5\u516c\u53f8\u907f\u514d\u7f34\u7eb3\u5931\u4e1a\u91d1\u6216\u793e\u4f1a\u4fdd\u969c\u91d1\uff0c\u5e76\u62d2\u7edd\u4e3a\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5458\u5de5\u63d0\u4f9b\u66f4\u5f3a\u6709\u529b\u7684\u6b67\u89c6\u6cd5\u5f8b\u4fdd\u62a4\uff0c\u5305\u62ec\u5728\u8865\u507f\u65b9\u9762\u3002 \uff08\u9a6c\u8428\u8bf8\u585e\u5dde\u72ec\u7acb\u5de5\u4f5c\u8054\u76df\u8868\u793a\uff0c\u8be5\u5021\u8bae\u7981\u6b62\u516c\u53f8\u6839\u636e\u300a\u9a6c\u8428\u8bf8\u585e\u5dde\u6c11\u6743\u6cd5\u6848\u300b\u4fdd\u62a4\u7684\u4efb\u4f55\u7279\u5f81\u6b67\u89c6\u5de5\u4eba\uff0c\u4f46\u8be5\u5021\u8bae\u7684\u8bed\u8a00\u4e2d\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u3002\uff09\u516c\u53f8\uff0c\u4ed6\u4eec\u53d8\u5f97\u66f4\u7cdf\u3002\u8fd9\u4e2a[\u63aa\u65bd]\u5c06\u5bfc\u81f4\u8d8a\u6765\u8d8a\u591a\u7684\u53f8\u673a\u66f4\u52a0\u4f9d\u8d56\u6211\u4eec\u7eb3\u7a0e\u4eba\u4e70\u5355\u7684\u793e\u4f1a\u8ba1\u5212\uff0c\u66f4\u5c11\u7684\u94b1\u8fdb\u5165\u5931\u4e1a\u57fa\u91d1\uff0c\u793e\u4f1a\u4fdd\u969c\u57fa\u91d1\u3002\u6211\u4eec\u53ea\u662f\u538c\u5026\u4e86\u8fd9\u79cd\u5265\u524a\uff0c\u201d\u4f18\u6b65\u53f8\u673a\u517c\u6ce2\u58eb\u987f\u72ec\u7acb\u53f8\u673a\u534f\u4f1a\u4e3b\u5e2d\u8d1d\u4e1d\u683c\u91cc\u83f2\u65af\u5728\u5468\u4e8c\u7531\u4fdd\u62a4\u5de5\u4eba\u6743\u5229\u8054\u76df\u7ec4\u7ec7\u7684\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e0a\u8bf4\u3002 \u201c\u6211\u4eec\u5bf9\u6210\u4e3a\u5de5\u4eba\u7684\u6c38\u4e45\u5b50\u9636\u7ea7\u8bf4&#39;\u4e0d&#39;\u3002\u8fd9\u592a\u8352\u8c2c\u4e86\u3002\u201d Shannon Liss-Riordan \u662f\u4e00\u4f4d\u6ce2\u58eb\u987f\u5f8b\u5e08\uff0c\u4e03\u5e74\u6765\u4e00\u76f4\u901a\u8fc7\u5404\u79cd\u8bc9\u8bbc\u5c31\u5de5\u4eba\u5206\u7c7b\u95ee\u9898\u5411 Uber \u548c Lyft \u63d0\u51fa\u6311\u6218\uff0c\u5e76\u5728\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e0a\u8b66\u544a\u8bf4\uff1a\u201c\u4ed6\u4eec\u5c06\u8bd5\u56fe\u8ba9\u8fd9\u9879\u6295\u7968\u63aa\u65bd\u83b7\u5f97\u901a\u8fc7\u3002\u901a\u8fc7\u6b3a\u9a97\u516c\u4f17\u8ba4\u4e3a\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4e3a\u4e86\u5de5\u4eba\u7684\u5229\u76ca\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u4f18\u6b65\u3001Lyft\u3001DoorDash\u3001Instacart \u548c\u6240\u6709\u8fd9\u4e9b\u516c\u53f8\u4f1a\u5728\u8fd9\u80cc\u540e\u6295\u5165 1 \u4ebf\u7f8e\u5143\u6216\u66f4\u591a\uff0c\u9664\u975e\u662f\u4e3a\u4e86\u8ba9\u8fd9\u4e9b\u516c\u53f8\u53d7\u76ca\u5e76\u638f\u8170\u5305\uff1f\u201d\n\uff08\u8003\u8651\u5230\u8fd9\u4e9b\u516c\u53f8\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u901a\u8fc7 22 \u53f7\u63d0\u6848\u6240\u82b1\u8d39\u7684\u91d1\u989d\u4ee5\u53ca\u9a6c\u8428\u8bf8\u585e\u5dde\u7acb\u6cd5\u673a\u6784\u7684\u91cd\u8981\u6027\uff0c\u4fdd\u62a4\u5de5\u4eba\u6743\u5229\u8054\u76df\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8868\u793a\uff0c\u5b83\u4f30\u8ba1\u4ee3\u8868\u79d1\u6280\u516c\u53f8\u7684\u8054\u76df\u5c06\u82b1\u8d39\u8d85\u8fc7 1 \u4ebf\u7f8e\u5143\u7528\u4e8e\u5176\u5728\u5f53\u88ab\u95ee\u53ca\u8fc4\u4eca\u4e3a\u6b62\u8be5\u63aa\u65bd\u80cc\u540e\u6709\u591a\u5c11\u8d44\u91d1\u65f6\uff0c\u9a6c\u8428\u8bf8\u585e\u5dde\u72ec\u7acb\u5de5\u4f5c\u8054\u76df\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8bf4\u201c\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u4e0d\u9700\u8981\u8d21\u732e\u62a5\u544a\u3002\u201d\uff09\u4e5f\u5728\u7535\u8bdd\u4e2d\uff0c\u52b3\u5de5\u6cd5\u6559\u6388\u7ef4\u5a1c\u675c\u5df4\u5c14\u5728\u7535\u8bdd\u4e2d\u52a0\u5dde\u5927\u5b66\u9ed1\u65af\u5ef7\u65af\u5206\u6821\u548c\u52b3\u5de5\u6743\u5229\u7684\u58f0\u97f3\u5021\u5bfc\u8005\u540c\u6837\u8868\u793a\uff0c\u8fd9\u9879\u52aa\u529b\u53ef\u80fd\u4f1a\u4f9d\u8d56\u4e8e\u6df7\u4e71\u3002 \u201c\u4ed6\u4eec\u4f1a\u7ee7\u7eed\u8bf4&#39;\u6211\u4eec\u6b63\u5728\u4e3a\u8fd9\u4e9b\u5de5\u4eba\u63d0\u4f9b\u6240\u6709\u8fd9\u4e9b\u4f1f\u5927\u7684\u65b0\u798f\u5229\u548c\u798f\u5229\u3002&#39;\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u6b63\u5728\u5265\u593a\u771f\u6b63\u9700\u8981\u4ed6\u4eec\u7684\u5de5\u4eba\u7684\u6743\u5229\uff0c\u201d\u675c\u5df4\u5c14\u8bf4\uff0c\u4ed6\u6307\u51fa\uff0c\u867d\u7136\u8fd9\u4e9b\u516c\u53f8\u5728\u901a\u8fc7\u52a0\u5dde\u6cd5\u5f8b\u4e4b\u524d\u505a\u51fa\u4e86\u627f\u8bfa\u2014\u2014\u5305\u62ec\u5982\u4f55\u4fdd\u6301\u53f8\u673a\u7684\u7075\u6d3b\u6027\u2014\u2014\u5176\u4e2d\u4e00\u4e9b\u5df2\u7ecf\u81ea\u4ece\u88ab\u6253\u7834\u4e86\u3002\u4f8b\u5982\uff0c\u7075\u6d3b\u6027\u88ab\u5439\u6367\u4e3a 22 \u53f7\u63d0\u6848\u7684\u6838\u5fc3\u9700\u6c42\uff0c\u4f18\u6b65\u4e3a\u8be5\u5dde\u7684\u53f8\u673a\u5f15\u5165\u4e86\u81ea\u884c\u5b9a\u4ef7\u7684\u80fd\u529b\u3002\u4f46\u5728 22 \u53f7\u63d0\u6848\u6210\u4e3a\u6cd5\u5f8b\u51e0\u4e2a\u6708\u540e\uff0c\u4f18\u6b65\u505c\u6b62\u5141\u8bb8\u53f8\u673a\u8fd9\u6837\u505a\u3002", "note_en": "(CNN)Last year,  Uber  (  UBER),  Lyft  (  LYFT), DoorDash and Instacart  succeeded in getting Californians to vote in favor of a ballot measure exempting them from classifying drivers and delivery workers as employees. Now, the companies are in the early stages of taking a similar approach in Massachusetts.\n The  coalition representing these gig companies, Massachusetts Coalition for Independent Work, said it filed Wednesday to have a  question put on the state&#39;s 2022 ballot that would &#34;grant historic new benefits&#34; and allow workers to &#34;maintain their flexibility as independent contractors,&#34; something it says most drivers want.\n &#34;Without the ballot measure or a legislative solution, the future of app-based rideshare and delivery could be in jeopardy,&#34; the coalition said, in language reminiscent of how dire the issue was positioned to Californians.\n      But with the benefit of seeing how things played out in California, the opposition is on its front foot this time against the playbook it believes was used last time. The Coalition to Protect Workers&#39; Rights,  an alliance that includes labor advocates and community groups, argued this week that the Massachusetts measure would &#34;permanently create a &#39;second class&#39; status&#34; for the workers, noting the majority of whom are Black, Brown and immigrants.\n   Classifying on-demand workers as employees has long been viewed as a potential existential threat to the business model popularized by Uber and Lyft. The companies have scaled their businesses with massive fleets of workers who are treated as independent contractors, avoiding the responsibility of providing costly benefits entitled to employees, such as a minimum wage, overtime, paid sick leave and unemployment insurance.\n  The companies have also shown they&#39;re prepared to go to great lengths to get themselves a more favorable law. When faced with a new labor law in California, Assembly Bill 5, that made it much harder for companies to classify workers as independent contractors in the state, Uber, Lyft, DoorDash and Instacart spent a combined $225 million on a ballot measure known as Proposition 22 or Prop 22 to effectively side-step it. They waged an aggressive campaign of  television ads,  in-app messages, and  confusing mailers to bombard Californians with its messaging. Prop 22 allows the companies to classify workers as independent contractors while granting some drivers certain benefit concessions, but not the full suite of protections that they would likely have gotten had the measure not passed and they were classified as employees.\n Next up is Massachusetts, which has a similarly strict labor law. The Massachusetts Attorney General is currently challenging Uber and Lyft  over how they classify workers, an effort the companies have indicated they intend to fight.\n Similar to Prop 22, the proposed Massachusetts ballot initiative presents a minimum earnings guarantee of &#34;120 percent of minimum wage&#34; based on &#34;engaged time,&#34; meaning the only time counted is when a driver is fulfilling a ride or delivery request but not the time they spend waiting for a gig. (An  analysis from UC Berkeley Labor Center had estimated the pay guarantee under Prop 22 for Uber and Lyft drivers would be equivalent to a wage of $5.64 per hour, instead of $15.60 or 120% of a $13 minimum wage, given such loopholes.)\n Workers would also receive $0.26 reimbursement per engaged mile to cover vehicle upkeep and gas. (The UC Berkeley Labor Center previously pointed out that Prop 22&#39;s $0.30 reimbursement is lower than the IRS&#39; estimated $0.58 per mile cost of owning and operating a vehicle.)\n While the proposal includes a health care contribution from a company for certain qualifying workers, that too is based on &#34;engaged time&#34; and only a small portion of workers would likely qualify, according to the Coalition to Protect Workers&#39; Rights, due to minimum engaged time requirements. (Using &#34;engaged time&#34; as a metric allows for the flexibility of the job, according to the Massachusetts Coalition for Independent Work, claiming that the &#34;majority of drivers receive healthcare from other sources, often from a full-time job.&#34;)\n Some workers could also earn paid sick time, paid family and medical leave, and in lieu of worker&#39;s compensation, benefits for medical and disability in cases of on-the-job injuries. Workers would have the ability to appeal if their accounts are deactivated, and would receive training on public safety issues.\n It would also let gig companies avoid contributions to unemployment or Social Security, and deny app-based workers more robust  legal protections around discrimination, including when it comes to compensation. (The Massachusetts Coalition for Independent Work said the initiative prohibits companies from discriminating against the workers on any characteristic protected by the Massachusetts Civil Rights Act, but that is not expressly stated in the initiative&#39;s language.)\n &#34;Things aren&#39;t getting better with these gig companies, they&#39;re getting worse. This [measure] is going to cause more and more drivers to be even more dependent on social programs that we taxpayers foot the bill for, less money going into the unemployment fund, the social security fund. We are just sick of this exploitation,&#34; said Beth Griffith, an Uber driver and chair of the Boston Independent Drivers Guild, on a press call Tuesday organized by the Coalition to Protect Workers&#39; Rights. &#34;We say &#39;no&#39; to being a permanent sub-class of workers. This is ridiculous.&#34;\n  Shannon Liss-Riordan, a Boston-based lawyer who has challenged Uber and Lyft over worker classification through various lawsuits for more than seven years and was also on the press call, warned: &#34;They&#39;re going to try to get this ballot measure passed by deceiving the public into thinking that this is somehow for the benefit of the workers, but why would Uber, Lyft, DoorDash, Instacart and all these companies be putting $100 million or more behind this unless it was to benefit these companies and line their pockets?&#34;\n (Given the amount the companies spent on passing Prop 22 in California and the significance of the Massachusetts legislature, a spokesperson for the Coalition to Protect Workers&#39; Rights said it estimates the coalition representing the tech companies will spend upwards of $100 million on its efforts in the state. When asked how much funding is behind the measure to date, a spokesperson for the Massachusetts Coalition for Independent Work said &#34;contribution reports are not required for some time.&#34;)\n Also on the call, Veena Dubal, a labor law professor at University of California, Hastings, and a vocal advocate for labor rights, similarly said the effort will likely rely upon confusion.\n   &#34;They will continue to say &#39;we are extending all of these great new perks and benefits to these workers.&#39; In fact, they are taking rights away from workers who really need them,&#34; said Dubal, who noted that while the companies made promises ahead of passing the California law -- including around how it would preserve flexibility for drivers -- some of these have since been broken.\n For example, flexibility was touted as a core need for Prop 22, with Uber  introducing the ability for drivers in the state to set their own prices. But months after Prop 22 became law, Uber  stopped allowing drivers to do so.", "posttime": "2021-08-08 19:59:23", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u63d0\u51fa,worker,\u5de5\u4eba", "title": "\u9a6c\u8428\u8bf8\u585e\u5dde\u63d0\u51fa\u7684\u65b0\u96f6\u5de5\u4f8b\u5916\u4f1a\u6539\u53d8\u5de5\u4f5c\u7684\u672a\u6765\u5417\uff1f", "title_en": "Will a New Gig Worker Exception Proposed in Massachusetts Change the Future of Work?", "transed": 1, "url": "https://www.cnn.com/2021/08/04/tech/uber-lyft-doordash-massachusetts-ballot-gig-economy/index.html", "via": "", "real_tags": ["\u63d0\u51fa", "worker", "\u5de5\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072104, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PDP-11 BASIC \u5206\u6790\u9879\u76ee\u65e8\u5728\u9010\u884c\u5206\u89e3\u548c\u5206\u6790 PDP-11 BASIC \u4ee3\u7801\u7684\u64cd\u4f5c\u3002\u5206\u6790\u8303\u56f4\u5f88\u5e7f\uff0c\u5e76\u4e14\u5df2\u7ecf\u53d1\u5e03\u4e86\u591a\u4e2a\u535a\u5ba2\u6761\u76ee\uff0c\u63cf\u8ff0\u4e86 BASIC \u5e94\u7528\u7a0b\u5e8f\u7684\u4e0d\u540c\u7ec4\u4ef6\u3002\u63d0\u524d\u6f84\u6e05\u4e00\u4e0b\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5173\u4e8e\u5728 PDP-11 \u4e0a\u52a0\u8f7d\u6216\u4f7f\u7528 BASIC \u7684\u9879\u76ee\u3002\u5982\u679c\u60a8\u60f3\u5728\u6a21\u62df\u73af\u5883\u4e2d\u52a0\u8f7d\u548c\u4f7f\u7528 PDP-11 BASIC\uff0c\u8bf7\u8f6c\u5230\u6b64\u5904\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e PDP-11 BASIC \u4ee3\u7801\u7684\u9010\u884c\u53cd\u6c47\u7f16\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u8bbf\u95ee\uff1a\u7b2c 0 \u90e8\u5206\uff1aPDP-11 BASIC \u4ee3\u7801\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u8f6f\u4ef6 TRAP \u7684\u4f7f\u7528\u3002\u5728\u672c\u7cfb\u5217\u7684\u4efb\u4f55\u5176\u4ed6\u90e8\u5206\u53d8\u5f97\u6709\u610f\u4e49\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5bf9\u8fd9\u4e9b\u6709\u4e00\u4e2a\u6e05\u6670\u800c\u7b80\u6d01\u7684\u7406\u89e3\u3002\u6b64\u5916\uff0c\u672c\u6587\u8fd8\u4ecb\u7ecd\u4e86 PDP-11 BASIC \u7528\u4e8e\u5c06 TRAP\u201c\u8def\u7531\u201d\u5230\u4e0d\u540c\u5904\u7406\u5b50\u4f8b\u7a0b\u7684\u4ee3\u7801\u3002\u7b2c 1 \u90e8\u5206\uff1a\u5206\u6790 TTY \u4e2d\u65ad\u5904\u7406\u4f8b\u7a0b\u3001TRAP 0\u3001TRAP 2 \u548c TRAP 66\u3002 \u7b2c 5 \u90e8\u5206\uff1a\u89e3\u91ca\u957f\u683c\u5f0f\u9009\u9879\u5bf9\u8bdd\u6846\u7684\u64cd\u4f5c\u3001\u5185\u5b58\u548c\u78c1\u5e26\u9605\u8bfb\u5668\u914d\u7f6e\u3001\u5220\u9664\u6269\u5c55\u51fd\u6570\u3001\u52a0\u8f7d EXF \u51fd\u6570\u3001\u8df3\u8f6c\u5230\u663e\u793a\u201cREADY\u201d\u5e76\u8fdb\u5165\u8bed\u6cd5\u89e3\u6790\u5faa\u73af\u3002\n\u7b2c 6 \u90e8\u5206\uff1a\u901a\u8fc7\u67e5\u770b\u884c\u53f7\u7684\u6807\u8bc6\u3001\u786e\u5b9a\u5df2\u8f93\u5165\u54ea\u4e2a\u547d\u4ee4\u4ee5\u53ca BASIC \u547d\u4ee4\u7684\u6807\u8bb0\u6765\u5f00\u59cb\u5206\u6790\u8bed\u6cd5\u89e3\u6790\u4ee3\u7801\u3002\u7b2c7\u90e8\u5206\uff1a\u5206\u6790TRAP 74\u3001TRAP 76\u3001TRAP 102\u548cTRAP 104\u3002\u8fd9\u4e9b\u5728\u8bed\u6cd5\u89e3\u6790\u4ee3\u7801\u5206\u6790\u7684\u7b2c\u4e8c\u90e8\u5206\u4e2d\u4f7f\u7528\u3002\u7b2c 8 \u90e8\u5206\uff1a\u63cf\u8ff0\u8bed\u6cd5\u89e3\u6790\u4ee3\u7801\u7684\u5176\u4f59\u90e8\u5206\u3001\u7acb\u5373\u6a21\u5f0f\u4e0b BASIC \u547d\u4ee4\u7684\u6267\u884c\u4ee5\u53ca\u5ef6\u8fdf\u6a21\u5f0f\u4e0b BASIC \u547d\u4ee4\u7684\u5b58\u50a8\u3002\u7b2c 11 \u90e8\u5206\uff1a\u63cf\u8ff0 BASIC \u8fd0\u884c\u65f6\u72b6\u6001\u5b58\u50a8\u6a21\u578b\u5e76\u8be6\u7ec6\u68c0\u67e5 TRAP 130\u3001TRAP 122\u3001TRAP 112 \u548c TRAP 114\u3002\u7b2c 12 \u90e8\u5206\uff1a\u5206\u6790 GOTO\u3001GOSUB \u548c RETURN BASIC \u547d\u4ee4\uff0c\u4ee5\u53ca TRAP 120 \u548c TRAP 134\u3002\u7b2c 13 \u90e8\u5206\uff1a\u901a\u8fc7\u68c0\u67e5 TRAP 64\u3001TRAP 14 \u548c TRAP 12 \u8be6\u7ec6\u89e3\u91ca\u6574\u6570\u5230 ASCII \u529f\u80fd\u7684\u64cd\u4f5c\u3002\u7b2c 14 \u90e8\u5206\uff1a\u68c0\u67e5 PDP-11 BASIC \u4e2d\u6d6e\u70b9\u6570\u7684\u7ed3\u6784\u5e76\u67e5\u770b TRAP 36 \u548c TRAP 40\u3002\n\u7b2c 15 \u90e8\u5206\uff1a\u8fd9\u7bc7\u6587\u7ae0\u7814\u7a76\u4e86\u4e00\u4e9b\u6d6e\u70b9\u8fd0\u7b97\uff1b TRAP 24\uff08\u53d6\u53cd\u4e00\u4e2a\u6d6e\u70b9\u6570\uff09\u3001TRAP 20\uff08\u52a0\u4e24\u4e2a\u6d6e\u70b9\u6570\uff09\u548c TRAP 22\uff08\u51cf\u53bb\u4e24\u4e2a\u6d6e\u70b9\u6570\uff09\u3002\u7b2c 16 \u90e8\u5206\uff1a\u68c0\u67e5\u4e58\u6cd5\u4ee3\u7801\uff1b TRAP 62\uff0832 \u4f4d\u6574\u6570\u4e58\u6cd5\uff09\u3001TRAP 16\uff0816 \u4f4d\u6574\u6570\u4e58\u6cd5\uff09\u548c TRAP 30\uff08\u6d6e\u70b9\u4e58\u6cd5\uff09\u3002\u7b2c 17 \u90e8\u5206\uff1a\u8fd9\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u66f4\u591a\u7684\u6d6e\u70b9\u64cd\u4f5c\u9677\u9631\uff1b TRAP 26\uff08\u6d6e\u70b9\u9664\u6cd5\uff09\u548c TRAP 34\uff08\u6d6e\u70b9\u6bd4\u8f83\uff09\u3002 TRAP 34 \u4f7f\u7528\u7684 TRAP 54 \u4e5f\u4e0e TRAP 32 \u4e00\u8d77\u63cf\u8ff0\u3002 \u7b2c 19 \u90e8\u5206\uff1a\u4ecb\u7ecd\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u5e76\u63cf\u8ff0 BASIC DEF \u547d\u4ee4\uff0c\u4ee5\u53ca\u4e00\u4e9b\u652f\u6301\u5176\u64cd\u4f5c\u7684 TRAP\uff08TRAP 140\u3001TRAP 126 \u548c TRAP 110)\u3002\u7b2c 20 \u90e8\u5206\uff1a\u63cf\u8ff0\u7528\u4e8e\u7ba1\u7406\u5806\u6808\u4e0a\u548c\u8fd0\u884c\u65f6\u72b6\u6001\u5b58\u50a8\u4e2d\u7684\u6d6e\u70b9\u53d8\u91cf\u7684 TRAP \u7684\u64cd\u4f5c\u3002\u6211\u4eec\u5c06\u7814\u7a76 TRAP 142\u3001TRAP 150\u3001TRAP 146\u3001TRAP 144 \u548c TRAP 132\u3002\u7b2c 21 \u90e8\u5206\uff1a\u5206\u6790\u6570\u5b66\u8868\u8fbe\u5f0f\u6c42\u503c\u4ee3\u7801\u3002\u8868\u8fbe\u5f0f\u65e0\u5904\u4e0d\u5728\uff0c\u89e3\u6790\u5b83\u4eec\u7684\u4e3b\u8981\u5165\u53e3\u70b9\u662f TRAP 136\u3002\u7b2c 22 \u90e8\u5206\uff1a\u63cf\u8ff0 TRAP 124 \u7684\u64cd\u4f5c\u548c BASIC DIM \u548c LET \u547d\u4ee4\uff0c\u4ee5\u53ca DATA \u548c REM \u547d\u4ee4\u3002\n\u8fd9\u4e2a\u9879\u76ee\u4ecd\u5728\u8fdb\u884c\u4e2d\uff0c\u6240\u4ee5\u6211\u4f1a\u5728\u6dfb\u52a0\u65b0\u7684\u5206\u6790\u90e8\u5206\u65f6\u4fdd\u6301\u8fd9\u4e2a\u9875\u9762\u7684\u6700\u65b0\u72b6\u6001\u3002", "note_en": "The PDP-11 BASIC Analysis project is an effort to disassemble and analyse line-by-line the operation of the PDP-11 BASIC code. The analysis is extensive and multiple blog entries have been posted describing different components of the BASIC application.\n  A couple of clarifications in advance, this is not a project about loading or using BASIC on the PDP-11.\n  If you want to load and use PDP-11 BASIC in an emulated environment, go   here.\n  If, you&#39;re looking for a line-by-line disassembly of the PDP-11 BASIC code, here you go:\n  Part 0: The PDP-11 BASIC code relies heavily on the use of software TRAPs. You need a clear and concise understanding of these before any of the rest of this series is going to make sense. Also, this article describes the code used by PDP-11 BASIC to &#34;route&#34; TRAPs to different handling subroutines.\n  Part 1: Analyses the TTY interrupt handling routines, TRAP 0, TRAP 2 and TRAP 66.\n        Part 5: Explains the operation of the long-form options dialog, the memory and tape reader configuration, deleting the extended functions, loading the EXF function, jumping to display &#34;READY&#34; and entering the syntax parsing loop.\n  Part 6: Starts the analysis of the syntax parsing code by looking at the identification of line numbers, determining which command has been entered and the tokenising of the BASIC command.\n  Part 7: Analyses TRAP 74, TRAP 76, TRAP 102 and TRAP 104. These are used in the second part of the syntax parsing code analysis.\n  Part 8: Describes the remainder of the syntax parsing code, the execution of BASIC commands in immediate mode and the storage of BASIC commands in deferred mode.\n      Part 11: Describes the BASIC runtime state storage model and examines in detail TRAP 130, TRAP 122, TRAP 112 and TRAP 114.\n  Part 12: Analyses the GOTO, GOSUB and RETURN BASIC commands, as well as TRAP 120 and TRAP 134.\n  Part 13: Explains in detail the operation of the integer-to-ASCII functionality by examining TRAP 64, TRAP 14 and TRAP 12.\n  Part 14: Examines the structure of floating point numbers in PDP-11 BASIC and looks at TRAP 36 and TRAP 40.\n  Part 15: This post examines some of the floating point operations; TRAP 24 (negatate a floating point number), TRAP 20 (add two floating point numbers) and TRAP 22 (subtract two floating point numbers).\n  Part 16: Examines the multiplication code; TRAP 62 (32-bit integer multiplication), TRAP 16 (16-bit integer multiplication) and TRAP 30 (floating point multiplication).\n  Part 17: This post will take a look at some more floating point manipulation TRAPs; TRAP 26 (floating point division) and TRAP 34 (floating point comparison). TRAP 54, which is used by TRAP 34, is also described, along with TRAP 32.\n    Part 19: Introduces user-defined functions and describes the BASIC DEF command, along with some TRAPs that support its operation (TRAP 140, TRAP 126 and TRAP 110).\n  Part 20: Describe the operation of TRAPs that are used to manage floating point variables on the stack and in the runtime state storage. We&#39;ll be looking at TRAP 142, TRAP 150, TRAP 146, TRAP 144 and TRAP 132.\n  Part 21: Analyses the mathemetical expression evaluation code. Expressions are used all over the place and the main entry point to parsing them is TRAP 136.\n  Part 22: Describes the operation of TRAP 124 and the BASIC DIM and LET commands, as well as the DATA and REM commands.\n  This project is still underway, so I will keep this page up to date as I add new parts of the analysis.", "posttime": "2021-08-08 19:54:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5206\u6790,analysis,trap", "title": "PDP-11 \u57fa\u7840\u5206\u6790\u9879\u76ee", "title_en": "The PDP-11 Basic Analysis Project", "transed": 1, "url": "https://www.learningpdp11.com/pdp-11-basic-analysis", "via": "", "real_tags": ["\u5206\u6790", "analysis", "trap"]}, {"category": "", "categoryclass": "", "imagename": "fdf709714e0078137b2122afe0202c6c.png", "infoid": 1072103, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u6765\u5230\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u548c\u535a\u5ba2\uff0c\u5728\u8fd9\u91cc\u4f60\u53ef\u4ee5\u627e\u5230\u5173\u4e8e\u6211\u7684\u4e00\u4e9b\u4fe1\u606f\u3001\u8054\u7cfb\u65b9\u5f0f\u3001\u793e\u4ea4\u5a92\u4f53\u94fe\u63a5\u4ee5\u53ca\u6211\u7684\u535a\u6587", "note_en": "Welcome to my personal website and blog, here you can find some information about me, contact, social media links as well as    my blog posts", "posttime": "2021-08-08 19:53:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,operator,features,\u6765\u5230", "title": "Python \u7684 `operator` \u6a21\u5757\u7684\u672a\u77e5\u7279\u6027", "title_en": "The unknown features of Python's `operator` module", "transed": 1, "url": "https://martinheinz.dev/blog/54", "via": "", "real_tags": ["python", "operator", "features", "\u6765\u5230"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072102, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "import numpy as np from horapy import HNSWIndex dimension = 50 n = 1000 # init index instance index = HNSWIndex(dimension, &quot;usize&quot;) samples = np.float32(np.random.rand(n, dimension)) for i in range( 0, len(samples)): # \u6dfb\u52a0\u8282\u70b9 index.add(np.float32(samples[i]), i) index.build(&quot;euclidean&quot;) # \u6784\u5efa\u7d22\u5f15 target = np.random.randint(0, n) # 410 in Hora ANNIndex &lt;HNSWIndexUsize&gt; (dimension: 50, dtype: usize, max_item: 1000000, n_neigh: 32, n_neigh0: 64, ef_build: 20, ef_search: 500, has_deletion: [731, \u6709\u90bb\u5c45: [731] # 65, 36, 631, 83, 111, 254, 990, 161] print(&quot;{} in {} \u6709\u90bb\u5c45\uff1a{}&quot;.format( target, index, index.search(samples[target], 10))) \uff03 \u641c\u7d22", "note_en": "import numpy as np from horapy import HNSWIndex  dimension = 50 n = 1000  # init index instance index = HNSWIndex(dimension, &#34;usize&#34;)  samples = np.float32(np.random.rand(n, dimension)) for i in range(0, len(samples)):  # add node  index.add(np.float32(samples[i]), i)  index.build(&#34;euclidean&#34;) # build index  target = np.random.randint(0, n) # 410 in Hora ANNIndex &lt;HNSWIndexUsize&gt; (dimension: 50, dtype: usize, max_item: 1000000, n_neigh: 32, n_neigh0: 64, ef_build: 20, ef_search: 500, has_deletion: False) # has neighbors: [410, 736, 65, 36, 631, 83, 111, 254, 990, 161] print(&#34;{} in {}  has neighbors: {}&#34;.format(  target, index, index.search(samples[target], 10))) # search", "posttime": "2021-08-08 19:53:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,\u641c\u7d22\u7b97\u6cd5,ai,quot", "title": "Hora 0.1\uff0c\u53ef\u80fd\u662f\u6700\u5feb\u7684AI\u641c\u7d22\u7b97\u6cd5\u5e93", "title_en": "Hora 0.1, maybe the fastest AI search algorithm library", "transed": 1, "url": "http://horasearch.com/", "via": "", "real_tags": ["\u7b97\u6cd5", "\u641c\u7d22\u7b97\u6cd5", "ai", "quot"]}, {"category": "", "categoryclass": "", "imagename": "1070e862442bc006d3b1a3dccf5c6825.jpg", "infoid": 1072101, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u5468\uff0c\u6211\u4e00\u76f4\u8bd5\u56fe\u638c\u63e1\u4e24\u79cd\u4f7f\u5e94\u7528\u7a0b\u5e8f\u5728 Apple \u65b0 M1 \u82af\u7247\u4e0a\u8fd0\u884c\u5f97\u66f4\u5feb\u7684\u6280\u672f\uff1a\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u7684\u5e76\u884c\u5904\u7406\uff0c\u4ee5\u53ca Apple \u4e30\u5bcc\u800c\u5e7f\u6cdb\u7684 Accelerate \u5e93\u4e2d\u7684\u529f\u80fd\u3002\u4e24\u8005\u90fd\u4e0d\u662f\u76f4\u622a\u4e86\u5f53\u7684\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u6587\u6863\u3002 Arm \u63d0\u4f9b\u4e86\u5927\u91cf\u5173\u4e8e\u5176\u5904\u7406\u5668\u8bbe\u8ba1\u7279\u6027\u7684\u6587\u6863\uff0c\u5176\u4e2d\u5305\u62ec\u5bf9\u5176\u6307\u4ee4\u96c6\u548c\u67b6\u6784\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u901a\u5e38\u4ee5 50 MB \u6216\u66f4\u591a\u7684 PDF \u683c\u5f0f\u8fd0\u884c\u6570\u5343\u9875\u3002\u9664\u4e86\u5e9e\u5927\u7684\u4f53\u79ef\u4e4b\u5916\uff0c\u8fd9\u4e9b\u7684\u6700\u5927\u969c\u788d\u5728\u4e8e\u5b83\u4eec\u5728\u6bcf\u4e2a\u5904\u7406\u5668\u67b6\u6784\u4e2d\u90fd\u662f\u901a\u7528\u7684\uff0c\u800c\u4e14\u6ca1\u6709\u4e00\u4e2a\u7279\u5b9a\u4e8e Apple \u5185\u7f6e\u4e8e\u5176 M1 \u82af\u7247\u4e2d\u7684\u5185\u6838\u3002\u56e0\u6b64\uff0c\u786e\u5207\u5730\u627e\u51fa\u54ea\u4e9b\u6709\u6548\uff0c\u54ea\u4e9b\u65e0\u6548\u662f\u4e00\u6b21\u63a2\u7d22\u4e4b\u65c5\u3002\u5c3d\u7ba1\u5b83\u5f88\u5438\u5f15\u4eba\uff0c\u4f46\u5b83\u4e5f\u9700\u8981\u65f6\u95f4\u3001\u5927\u91cf\u7684 PDF \u6d4f\u89c8\u548c\u5b9e\u9a8c\u3002\u5982\u679c\u60a8\u4e0d\u76f8\u4fe1\u6211\uff0c\u90a3\u4e48\u8bf7\u9605\u8bfb Apple \u7684\u7b80\u6d01\u6587\u7ae0\uff0c\u5e76\u51c6\u786e\u544a\u8bc9\u6211 Arm \u7684\u54ea\u4e9b\u53c2\u8003\u624b\u518c\u9002\u7528\u4e8e M1 \u4e2d\u7684\u5185\u6838\u3002\u751a\u81f3 Apple \u4e5f\u56de\u907f\u8fd9\u4e00\u70b9\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6307\u5411 Arm \u5f00\u53d1\u8005\u7f51\u7ad9\u9876\u7ea7\u7684\u94fe\u63a5\u3002\u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u5c1d\u8bd5\u76f4\u63a5\u8bbf\u95ee M1 \u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u6b64\u4ed6\u4eec\u5e0c\u671b Apple \u80fd\u591f\u4fc3\u8fdb\u8fd9\u4e00\u70b9\uff1b\u5728\u8bb8\u591a\u6570\u5b57\u548c\u76f8\u5173\u529f\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u90fd\u5305\u542b\u5728 Accelerate \u548c\u76f8\u5173\u5e93\u4e2d\u3002\u8fd1\u5e74\u6765\uff0cApple \u4e00\u76f4\u5728\u4e0d\u9057\u4f59\u529b\u5730\u89e3\u91ca\u8fd9\u4e9b\u5e7f\u6cdb\u7684\u7cfb\u5217\uff0c\u8fd9\u4e9b\u7cfb\u5217\u4e3b\u8981\u7531\u5176 Vector &amp; Numerics \u56e2\u961f\u8bbe\u8ba1\u3002\u8be5\u56e2\u961f\u7684\u6210\u5458\u4e8e 2018 \u5e74\u5728 WWDC \u4e0a\u53d1\u8868\u8bb2\u8bdd\u8bf4\uff1a\u201cAccelerate \u6613\u4e8e\u4f7f\u7528\u3002\u5927\u591a\u6570\u65f6\u5019\u5b83\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u5de5\u4f5c\u5c31\u5b8c\u6210\u4e86\u3002\u201d\u7b2c\u4e8c\u5e74\uff0c\u4ed6\u4eec\u53c8\u6536\u5230\u4e86\u4e00\u4e2a\u597d\u6d88\u606f\uff1a\u201cAccelerate \u7684\u5e93\u975e\u5e38\u5f3a\u5927\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b83\u4eec\u7684\u754c\u9762\u5bf9 Swift \u5f00\u53d1\u4eba\u5458\u6765\u8bf4\u5e76\u4e0d\u662f\u90a3\u4e48\u53cb\u597d\u3002\u6211\u4eec\u7814\u7a76\u4e86\u56db\u4e2a\u5e93\u5e76\u521b\u5efa\u4e86\u65b0\u7684 Swift \u53cb\u597d\u7684 API\uff0c\u4f7f\u5728 Swift \u9879\u76ee\u4e2d\u4f7f\u7528 Accelerate \u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u3002\u8bf7\u8bbf\u95ee\u6211\u4eec\u7684\u7f51\u7ad9\uff0c\u6211\u4eec\u63d0\u4f9b\u6db5\u76d6\u6574\u4e2a Accelerate \u6846\u67b6\u7684\u793a\u4f8b\u3001\u6587\u7ae0\u548c\u5927\u91cf\u53c2\u8003\u8d44\u6599\u3002\u201d\u4ed6\u4eec\u4eca\u5e74\u518d\u6b21\u51fa\u73b0\uff0c\u5c3d\u7ba1\u8fd9\u6b21\u7b80\u77ed\u7684\u4ecb\u7ecd\u4e3b\u8981\u9488\u5bf9\u90a3\u4e9b\u4f7f\u7528 C++ \u7684\u4eba\u3002\u6240\u4ee5\u6211\u9996\u5148\u5f00\u59cb\u63a2\u7d22\u6587\u6863\uff0c\u5c31\u50cf\u4efb\u4f55\u4eba\u4e00\u6837\u3002\u4ece\u4e00\u4e9b\u5f15\u4eba\u5165\u80dc\u7684\u4f18\u79c0\u4ecb\u7ecd\u6027\u6587\u7ae0\u4e2d\uff0c\u6211\u51b3\u5b9a\u66f4\u8be6\u7ec6\u5730\u7814\u7a76\u51e0\u4e2a\u51fd\u6570\uff0c\u5305\u62ec\u4e00\u4e2a\u8ba1\u7b97\u4e24\u4e2a\u77ed\u5411\u91cf\u7684\u70b9\u79ef\u7684\u51fd\u6570\u3002\u5728\u4f60\u60ca\u6050\u5730\u4e3e\u8d77\u53cc\u624b\u5e76\u70b9\u51fb\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u4e1c\u897f\u4e4b\u524d\uff0c\u8ba9\u6211\u89e3\u91ca\u4e00\u4e0b\uff0c\u8fd9\u53ea\u4e0d\u8fc7\u662f\u57fa\u672c\u7684\u7b97\u672f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u6709\u4e24\u4e2a\u957f\u5ea6\u4e3a 4 \u7684\u5411\u91cf\uff0c\u5176\u4e2d\u5305\u542b\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u8981\u8ba1\u7b97\u5b83\u4eec\u7684\u70b9\u79ef\uff0c\u60a8\u53ea\u9700\u5c06\u56db\u5bf9\u5bf9\u5e94\u7684\u6570\u5b57\uff08\u6bcf\u4e2a\u5411\u91cf\u4e2d\u7684\u4e00\u4e2a\uff09\u76f8\u4e58\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u4e58\u79ef\u76f8\u52a0\u5230\u4e00\u5171\u3002\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u4e4f\u5473\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u666e\u904d\u7684\u8981\u6c42\uff0c\u5e76\u4e14\u975e\u5e38\u9002\u5408\u5e76\u884c\u5904\u7406\u3002\n\u56e0\u6b64\uff0c\u6211\u6253\u5f00\u4e86 Xcode \u7684\u6587\u6863\uff0c\u627e\u5230\u4e86 simd \u90e8\u5206\uff0c\u5e76\u9009\u62e9\u4e86\u6211\u611f\u5174\u8da3\u7684\u6570\u636e\u7c7b\u578b\uff0cSingle-Precision Floating-Point Vectors\uff0c\u8fd9\u5c31\u662f\u6211\u6240\u770b\u5230\u7684\u3002\u6211\u5f88\u9ad8\u5174\u5730\u62a5\u544a\uff0c\u5f53\u524d\u7684 Xcode \u6d4b\u8bd5\u7248\u786e\u5b9e\u5bf9\u6b64\u8fdb\u884c\u4e86\u6982\u8ff0\uff0c\u5c3d\u7ba1\u8fd9\u66f4\u4ee4\u4eba\u56f0\u60d1\uff0c\u56e0\u4e3a\u5b83\u6307\u51fa\u8bb8\u591a\u529f\u80fd\u4ee5\u4e09\u79cd\u53d8\u4f53\u63d0\u4f9b\uff1a\u9ed8\u8ba4\u53d8\u4f53\u3001\u7cbe\u786e\u53d8\u4f53\u548c\u5feb\u901f\u53d8\u4f53.\u7136\u540e\u5b83\u5c31\u505c\u6b62\u4e86\uff0c\u6839\u672c\u6ca1\u6709\u5217\u51fa\u6216\u8be6\u7ec6\u8bf4\u660e\u4efb\u4f55\u529f\u80fd\u3002\u4e5f\u8bb8\uff0c\u6709\u65f6\u4f1a\u53d1\u751f\uff0c\u51fd\u6570\u5217\u8868\u5728\u6587\u6863\u7684\u5176\u4ed6\u5730\u65b9\u3002\u6240\u4ee5\u6211\u641c\u7d22\u4e86\u81f3\u5c11\u51fa\u73b0\u5728\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u7684\u70b9\u5411\u91cf\u8c03\u7528\u3002\u4f46\u662f Xcode \u7684\u6587\u6863\u62a5\u544a\u6ca1\u6709\u7ed3\u679c\u3002\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u8f93\u5165\u4e00\u4e9b\u4ee3\u7801\u5e76\u4f7f\u7528 Xcode \u7684\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\u548c\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u6765\u53d1\u73b0\u54ea\u4e9b\u51fd\u6570\u77e5\u9053\u3002\u8fd9\u5f88\u4e4f\u5473\uff0c\u4f46\u73b0\u5728\u5f88\u591a\u65f6\u5019\u8ba9\u6211\u6446\u8131\u56f0\u5883\u3002\u76f8\u53cd\uff0c\u6211\u8f6c\u5411\u4e86\u51fa\u8272\u7684\u7b2c\u4e09\u65b9\u4ea7\u54c1 Dash\uff0c\u51e0\u5e74\u524d\u82f9\u679c\u516c\u53f8\u60ca\u4eba\u5730\u5c06\u5176\u8e22\u51fa\u4e86\u5176 App Store\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u5b83\u592a\u6709\u7528\u4e86\u3002 Dash\u4e5f\u4e0d\u4f8b\u5916\uff0c\u5b83\u7684\u641c\u7d22\u4e5f\u662f\u4e00\u7247\u7a7a\u767d\u3002\u6240\u4ee5\u6211\u771f\u7684\u5728\u60f3\u8c61\u8fd9\u4e00\u5207\u3002\u5c31\u5728\u90a3\u65f6\uff0c\u6211\u56de\u53bb\u91cd\u8bfb\u4e86\u5176\u4e2d\u4e00\u4f4d\u5de5\u7a0b\u5e08\u7684\u8bdd\uff0c\u4ed6\u63d0\u5230\u201c\u8bf7\u8bbf\u95ee\u6211\u4eec\u6709\u6837\u54c1\u7684\u7f51\u7ad9\u201d\u2026\u2026\u6211\u5728\u8fd9\u91cc\u627e\u5230\u4e86\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u8fd8\u6709\u90a3\u7bc7\u4ecb\u7ecd\u6027\u6587\u7ae0\uff0c\u8fd9\u8ba9\u6211\u627e\u5230\u4e86 Apple \u7684\u771f\u5b9e\u7684\u6587\u6863\u3002\u5ffd\u7565\u663e\u800c\u6613\u89c1\u7684\u4e8b\u5b9e\uff0c\u5373 Apple \u8ba4\u4e3a\u4f20\u9012\u7ed9\u6587\u6863\u7684\u5185\u5bb9\u5982\u6b64\u4e4b\u5c11\u4ee5\u81f3\u4e8e\u4ee4\u4eba\u5c34\u5c2c\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u90fd\u6ca1\u6709\u88ab\u7eb3\u5165 Xcode\uff1f\u5982\u679c\u672c\u5730\u5b58\u50a8\u7a7a\u95f4\u592a\u5927\uff0c\u4e3a\u4ec0\u4e48 Xcode \u4e0d\u94fe\u63a5\u5230\u8fd9\u4e9b\u5728\u7ebf\u9875\u9762\uff1f\n\u5728\u6700\u8fd1\u7684 WWDC \u4e0a\u4e13\u95e8\u9488\u5bf9 Accelerate \u53ca\u5176\u76f8\u5173\u4ea7\u54c1\uff08\u5982 simd\uff09\u8fdb\u884c\u4e86\u4e09\u573a\u4f1a\u8bae\uff0c\u5e76\u627f\u8bfa\u63d0\u4f9b\u201c\u5e7f\u6cdb\u7684\u53c2\u8003\u8d44\u6599\u201d\uff0c\u4e3a\u4ec0\u4e48 Apple \u4e0d\u4ec5\u5c06\u8fd9\u79cd\u5149\u9690\u85cf\u5728\u84b2\u5f0f\u8033\u4e0b\uff0c\u800c\u4e14\u8fd8\u9690\u85cf\u4e86\u84b2\u5f0f\u8033\uff1f Posted in Macs, Technology and tagged Accelerate, Apple, ARM, developer, documentation, SIMD, Xcode\u3002\u4e3a\u6c38\u4e45\u94fe\u63a5\u6dfb\u52a0\u4e66\u7b7e\u3002", "note_en": "Last week I\u2019ve been trying to get to grips with two techniques of making apps go faster on Apple\u2019s new M1 chips: using parallel processing from assembly language, and with features in Apple\u2019s rich and extensive Accelerate libraries. Neither has been straightforward, largely because of documentation.\n Arm provides copious documentation on features of its processor designs which include detailed accounts of their instruction sets and architecture, often running to thousands of pages in PDFs of 50 MB and more. The big snag with these, other than their sheer volume, is that they are generic across each processor architecture, and none is specific to the cores which Apple has built into its M1 chip.\n So finding out exactly what works and what doesn\u2019t is a journey of exploration. Fascinating though it is, it also takes time, a great deal of browsing of PDFs, and experimentation. If you don\u2019t believe me, then read  Apple\u2019s terse article and please tell me exactly which of Arm\u2019s reference manuals apply to the cores in the M1. Even Apple shies away from that, providing a link to the top level of Arm\u2019s developer site.\n For the vast majority of developers, trying to access the M1 directly is a non-starter, so they look to Apple to facilitate that; in the case of many numeric and related features, those are included in the Accelerate and related libraries. In recent years, Apple has been going out of its way to explain these extensive collections, largely engineered by its Vector &amp; Numerics team.\n Members of that team spoke at WWDC in 2018, saying: \u201cAccelerate is easy to use. Most of the time it\u2019s just one function call and the job is done.\u201d The following year they had additional good news: \u201cAccelerate\u2019s libraries are immensely powerful but up until now, their interfaces weren\u2019t that friendly to Swift developers. We\u2019ve looked at four libraries and created new Swift-friendly APIs to make using Accelerate in Swift projects really easy. Please visit our site where we have samples, articles, and extensive reference material that covers the entire Accelerate framework.\u201d They appeared again this year, although their shorter presentation was primarily aimed this time at those using C++.\n So I first set off to explore the documentation, as anyone would. From some excellent introductory articles, which whetted my appetite, I decided to look in more detail at several functions, including one which calculates the dot-product of two short vectors. Before you throw your hands up in horror and click on to something more understandable, let me explain that this is little more than basic arithmetic.\n For example, if you have two vectors of length 4, containing single-precision floating-point numbers, to calculate their dot-product all you do is multiply the four corresponding pairs of numbers, one from each vector, and add those products together to a total. This may seem dull stuff, but it\u2019s a commonplace requirement, and is highly amenable to processing in parallel.\n I therefore opened Xcode\u2019s documentation, found the simd section, and selected the data type I was interested in, Single-Precision Floating-Point Vectors, and this is what I saw.\n  I\u2019m pleased to report that the current beta version of Xcode does expand on this with an overview, although that is more confusing still as it states that many functions are provided in three variants, the default, a precise variant, and a fast variant. Then it stops dead without listing or detailing any functions at all.\n Maybe, as sometimes happens, the function listing was elsewhere in the documentation. So I searched for the dot-vector call which at least appears in an example. But Xcode\u2019s documentation reported No Results.\n  At this stage, one approach is to type in some code and use Xcode\u2019s autocomplete feature with the letters of the alphabet in order to discover which functions that knows about. It\u2019s tedious, but has got me out of a hole on many occasions now. Instead, I turned to that excellent third-party product Dash, which Apple amazingly kicked out of its App Store a couple of years ago, presumably because it was far too useful.\n  Dash was no different, and its search also drew a blank. So I really was imagining all this after all.\n It was then that I went back and re-read the words of one of those engineers, when he referred to \u201cPlease visit our site where we have samples\u201d \u2026 I found this site  here, and that  introductory article, which led me to Apple\u2019s real documentation.\n  Overlooking the obvious, that what Apple thinks passes for documentation is so minimal as to be embarrassing, why has none of this been incorporated into Xcode? If it\u2019s too expansive to store locally, why doesn\u2019t Xcode link to these online pages?\n Having devoted three sessions in recent WWDCs to Accelerate and its relatives like simd, and promised \u201cextensive reference material\u201d, why is Apple not just hiding this light under a bushel, but hiding the bushel too?\n  Posted in  Macs,  Technology and tagged  Accelerate,  Apple,  ARM,  developer,  documentation,  SIMD,  Xcode. Bookmark the  permalink.", "posttime": "2021-08-08 19:53:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u52a0\u901f\u5668,accelerator,apple", "title": "\u52a0\u901f\u5668\u5728\u54ea\u91cc\uff1f", "title_en": "Where\u2019s the Accelerator?", "transed": 1, "url": "https://eclecticlight.co/2021/08/08/last-week-on-my-mac-wheres-the-accelerator/", "via": "", "real_tags": ["\u52a0\u901f\u5668", "apple"]}, {"category": "", "categoryclass": "", "imagename": "c1edfab45795f1bcfc233ed37254796b.png", "infoid": 1072099, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u975e\u5e38\u611f\u8c22\u4ece Docker \u6620\u50cf\u4e2d\u8bbf\u95ee Nexus \u6216 GitHub \u5b58\u50a8\u5e93\u7b49\u79c1\u6709\u8d44\u6e90\uff0c\u5e76\u4e14\u4e0d\u6cc4\u9732\u4efb\u4f55\u4e0e\u5b89\u5168\u76f8\u5173\u7684\u4fe1\u606f\u3002\u9996\u5148\uff0c\u6211\u4eec\u7edd\u4e0d\u4f1a\u76f4\u63a5\u5728 Dockerfile \u4e2d\u5305\u542b\u51ed\u636e\u6216\u4efb\u4f55\u5176\u4ed6\u5b89\u5168\u4fe1\u606f\u3002\u5176\u6b21\uff0c\u53ef\u4ee5\u521b\u5efa\u591a\u9636\u6bb5\u00b9\u6784\u5efa\u5e76\u4ece\u4efb\u4f55\u79c1\u4eba\u4fe1\u606f\u4e2d\u6e05\u9664\u6700\u7ec8\u56fe\u50cf\u548c\u56fe\u5c42\u3002\u7136\u800c\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u8c01\u5728\u5f00\u53d1\u3002\u6700\u540e\uff0c\u6211\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u53ef\u4ee5\u4f9d\u9760\u4f7f\u7528\u53c2\u6570\u2014\u2014ARG\u2014\u2014\u5e76\u5728 docker build\u00b2 \u547d\u4ee4\u4e2d\u4f20\u9012\u4fe1\u606f\u3002\u7136\u800c\uff0c\u4ec5\u6b64\u800c\u5df2\uff0c\u56fe\u50cf\u5c42\u4e2d\u7684\u79d8\u5bc6\u4fe1\u606f\u53ef\u7528\u3002\u63a5\u4e0b\u6765\u6211\u5c06\u5c55\u793a\u4e00\u4e2a\u4f8b\u5b50\u3002\u4ece ubuntu ARG USERNAME ARG PASSWORD RUN apt-get update &amp;&amp; \\ apt-get upgrade &amp;&amp; \\ apt-get install -y curl RUN curl -o nginx_policy.yaml -u $USERNAME:$PASSWORD http://nexus:8081/repository/ raw/policy/nginx-policy.yaml docker build -t secret:args --build-arg USERNAME=$user --build-arg PASSWORD=$pass \u3002\u5c06\u6784\u5efa\u4e0a\u4e0b\u6587\u53d1\u9001\u5230 Docker \u5b88\u62a4\u8fdb\u7a0b 3.072kB \u6b65\u9aa4 1/5\uff1a\u4ece ubuntu ---&gt; c29284518f49 \u6b65\u9aa4 2/5\uff1aARG \u7528\u6237\u540d ---&gt; \u4f7f\u7528\u7f13\u5b58 ---&gt; 720c9732f5db \u6b65\u9aa4 3/5\uff1aARG \u5bc6\u7801 ---&gt; \u4f7f\u7528\u7f13\u5b58 ---&gt; 193f8044461b \u7b2c 4/5 \u6b65\uff1a\u8fd0\u884c apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get install -y curl ---&gt; \u4f7f\u7528\u7f13\u5b58 ---&gt; 894b791e5ec3 \u7b2c 5/5 \u6b65\uff1a\u8fd0\u884c curl -o nginx_policy .yaml -u $USERNAME:$PASSWORD http://172.17.0.2:8081/repository/raw/policy/nginx-policy.yaml ---&gt; Using cache ---&gt; e4050d5c1743 \u6210\u529f\u6784\u5efa e4050d5c1743 \u6210\u529f\u6807\u8bb0 secret:args I\u5728 build-arg \u9009\u9879\u4e2d\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u6765\u4e0d\u5b58\u50a8\u51ed\u636e\u64cd\u4f5c\u7cfb\u7edf\u5386\u53f2\u8bb0\u5f55\u3002\u6b64\u5916\uff0c\u5728\u56fe\u50cf\u4e2d\uff0c\u6211\u6ca1\u6709\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4fdd\u5b58\u5728\u4efb\u4f55\u5730\u65b9\u3002\n\u5f53\u60a8\u9488\u5bf9\u6b64\u56fe\u50cf\u8fd0\u884c docker history \u547d\u4ee4\u65f6\uff0c\u4f1a\u51fa\u73b0\u8fd9\u79cd\u65b9\u6cd5\u7684\u95ee\u9898\uff1a \u279c docker history secret:args_env IMAGE CREATED CREATED BY SIZE COMMENT f11cb0b139f3 2 \u5206\u949f\u524d |2 PASSWORD=admin123 USERNAME=admin /bin/sh ... 0B 6ca5f3fc074a |2 PASSWORD=admin123 USERNAME=admin /bin/sh \u2026 0B 193f8044461b 43 \u5206\u949f\u524d /bin/sh -c #(nop) ARG \u5bc6\u7801 0B 720c9732f5db 43 \u5206\u949f\u524d /bin/sh -c #(nop) ARG USERNAME284f51b\u51e0\u5929\u524d /bin/sh -c #(nop) CMD [&quot;bash&quot;] 0B &lt;missing&gt; 3 \u5929\u524d /bin/sh -c #(nop) ADD file:5c3d9d2597e01d1ce... 72.8MB \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u51ed\u636e\u5b58\u50a8\u5728\u56fe\u50cf\u7684\u5143\u6570\u636e\u4e2d\u3002\u5c3d\u7ba1\u6211\u4eec\u5c3d\u4e86\u6700\u5927\u7684\u52aa\u529b\uff0c\u6211\u4eec\u4ecd\u7136\u5728\u6cc4\u9732\u673a\u5bc6\u4fe1\u606f\u3002 Buildkit\u00b3 \u4e0e Docker \u7cbe\u786e\u96c6\u6210\u2074\uff0c\u4ee5\u5e2e\u52a9\u6211\u4eec\u4fdd\u6301\u5b89\u5168\u3002\u81ea 18.06 \u7248\u672c\u4ee5\u6765\uff0cBuildkit \u51fa\u73b0\u5728 Docker \u4e2d\uff0c\u76ee\u524d\u4ec5\u652f\u6301 Linux \u5bb9\u5668\u3002\u8981\u542f\u7528 Buildkit \u6784\u5efa\uff0c\u8bf7\u5728\u8c03\u7528 docker build \u547d\u4ee4\u65f6\u8bbe\u7f6e DOCKER_BUILDKIT=1 \u73af\u5883\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a docker build \u7684\u65b0 --secret \u6807\u5fd7\u5141\u8bb8\u7528\u6237\u4f20\u9012\u8981\u5728 Dockerfile \u4e2d\u4f7f\u7528\u7684\u673a\u5bc6\u4fe1\u606f\uff0c\u4ee5\u5728\u4e00\u4e2a\u4e0d\u4f1a\u6700\u7ec8\u5b58\u50a8\u5728\u6700\u7ec8\u56fe\u50cf\u4e2d\u7684\u5b89\u5168\u65b9\u5f0f\u3002\u8981\u4f7f\u7528\u6b64\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u8986\u76d6 Dockerfile \u4e2d\u7684\u9ed8\u8ba4\u524d\u7aef\u2076\u3002\u5728 Dockerfile \u7684\u7b2c\u4e00\u884c\u8f93\u5165\uff1a RUN \u547d\u4ee4\u4e2d\u6dfb\u52a0\u4e86 --mount \u6807\u5fd7\uff0c\u4ee5\u5141\u8bb8\u6784\u5efa\u5bb9\u5668\u8bbf\u95ee\u5b89\u5168\u6587\u4ef6\uff0c\u4f8b\u5982\u79c1\u94a5\uff0c\u800c\u65e0\u9700\u5c06\u5b83\u4eec\u70d8\u7119\u5230\u6620\u50cf\u4e2d\u3002\n\u5e76\u4e14\u4f7f\u7528\u6307\u5b9a\u4f7f\u7528 BuildKit \u524d\u7aef docker/dockerfile:1.2 \u7684 Dockerfile\uff0c\u5728\u6267\u884c RUN \u65f6\u53ef\u4ee5\u8bbf\u95ee\u673a\u5bc6\uff1a\u6b64 Dockerfile \u4ec5\u7528\u4e8e\u8bc1\u660e\u53ef\u4ee5\u8bbf\u95ee\u673a\u5bc6\u3002\u5982\u60a8\u6240\u89c1\uff0c\u6784\u5efa\u8f93\u51fa\u4e2d\u6253\u5370\u7684\u79d8\u5bc6\u3002\u6700\u7ec8\u6784\u5efa\u7684\u955c\u50cf\u5c06\u6ca1\u6709\u79d8\u5bc6\u6587\u4ef6\uff1a $ DOCKER_BUILDKIT=1 docker build --no-cache --progress=plain -t secret:buildkit --secret id=mysecret,src=mysecret.txt \u3002 5c65425f6fc0d6c65a5ddd6784812097b4eff778b9bcbf39bc708aacbad59abd\uff031\u8f6c\u79fbdockerfile\uff1a\u4eceDockerfile\uff031 SHA256\uff031 [\u5185\u90e8]\u8d1f\u8f7d\u751f\u6210\u5b9a\u4e49196B\u5b8c\u6210\uff031 DONE 0.0S\uff032\u5185\u90e8]\u8d1f\u8f7d.dockerignore\uff032 SHA256\uff1a35c8e51716823a06d8dbd04a2594a31a90f3d02bb55a0b8c3e9f2c1b44f901c7\uff032\u4f20\u9001\u4e0a\u4e0b\u6587\uff1a2B\u5b8c\u6210\uff032 DONE\u5bf9\u4e8edocker.io/docker/dockerfile:1.2\uff033 SHA256 0.0S\uff033\u89e3\u6790\u56fe\u50cf\u914d\u7f6e\uff1ab239a20f31d7f1e5744984df3d652780f1a82c37554dd73e1ad47c8eb05b0d69\uff033 DONE 2.5S\uff034\u642c\u8fd0\u5de5\u56fe\u50cf\uff1a//docker.io/docker/dockerfile\uff1a1.2@sha256\uff1ae2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc\uff034 SHA256\uff1a37e0c519b0431ef5446f4dd0a4588ba695f961e9b0e800cd8c7f5ba6165af727\uff034\u51b3\u5fc3docker.io/docker/dockerfile:1.2@sha256:e2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc\u5b8c\u6210\uff034\uff03CACHED 5\u5185\u90e8]\u8d1f\u8f7d\u5143\u6570\u636edocker.io/library/alpine:latest\uff035 SHA256\uff1ad4fb25f5b5c00defc20ce26f2efc4e288de8834ed5aa59dff877b495ba88fda6\uff035 DONE 0.0S #6 [1/2] \u6765\u81ea docker.io/library/alpine #6 SHA256\uff1a665ba8b2cdc0cb0200e2a42a6b3c0f8f684089f4cd1b81494fbb9805879120f7\uff036\uff03CACHED 7 [2/2] RUN --mount =\u7c7b\u578b=\u79d8\u5bc6\uff0cID = mysecret\u732b/\u8fd0\u884c/\u79d8\u5bc6/ mysecret\uff037 SHA256\uff1a75601a522ebe80ada66dedd9dd86772ca932d30d7e1b11bba94c04aa55c237de\uff037 0.494 SUPER_SECRET_PASSWORD\uff037 DONE 0.5\u79d2\uff038\u5bfc\u51fa\u5230\u56fe\u50cf\uff038 SHA256\uff1ae8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00\uff038\u5c42\u5bfc\u51fa0.0S\u505a\u8fc7\uff038\u523b\u5199\u7684\u56fe\u50cfSHA256\uff1a8df0fe20ceab547858702c32456d962b99d66fd40ab29f4e191ac0b52e383039\u505a\u8fc7\uff038 DONE 0.0S $\u642c\u8fd0\u5de5\u5386\u53f2\u79d8\u5bc6\uff1abuildkit\u7684\u5f62\u8c61\u521b\u9020\u7684\u521bSIZE\u6761\u8bc4\u8bba7da5afe4875316\u79d2\u524dRUN / bin / sh\u7684-c\u732b/run/secrets/mysecret # b... 0B buildkit.dockerfile.v0 &lt;missing&gt; 4 \u5468\u524d /bin/sh -c #(nop) CMD [&quot;/bin/sh&quot;] 0B &lt;missing&gt; 4 \u5468\u524d /bin/ sh -c #(nop) ADD file:f278386b0cef68136... 5.6MB \u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u2077\u6765\u4f20\u9012\u79d8\u5bc6\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u79d8\u5bc6\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a\u672c\u6587\u89e3\u91ca\u4e86\u4f7f\u7528\u53d7\u9650\u4fe1\u606f\u6240\u9700\u7684\u6b65\u9aa4\u5728 Docker \u5bb9\u5668\u4e2d\u66f4\u5b89\u5168\u3002\u901a\u8fc7\u5728\u201cdocker build\u201d\u4e4b\u524d\u8bbe\u7f6e\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u5e76\u5728 Dockerfile \u4e2d\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\uff0c\u60a8\u53ef\u4ee5\u9632\u6b62\u7528\u4e8e\u914d\u7f6e Docker \u5bb9\u5668\u7684\u51ed\u636e\u6cc4\u9732\u3002\nDocker Buildkit \u4e0d\u4ec5\u652f\u6301\u79d8\u5bc6\uff0c\u8fd8\u652f\u6301\u5176\u4ed6\u6784\u5efa\u6302\u8f7d\u2078\uff0c\u4f8b\u5982\u7f13\u5b58\u548c ssh\u3002\u5f00\u59cb\u6216\u7ee7\u7eed\u63a2\u7d22 Buildkit \u5e76\u4e86\u89e3\u5b83\u5982\u4f55\u5e2e\u52a9\u60a8\u63d0\u9ad8\u73af\u5883\u7684\u5b89\u5168\u6027\u3002", "note_en": "Accessing private resources like a Nexus or a GitHub repository from within a Docker image and not leaking any security-related information it\u2019s greatly appreciated.\n Firstly, we will never include credentials or any other secure information directly in the Dockerfile.\n Secondly, one can create a multi-stage\u00b9 build and clear the final image and layers from any private information. However, this is not a straightforward solution and heavily depends on who is developing.\n Finally, some of us can rely on using arguments \u2014  ARG\u2014 and pass the information in the  docker build\u00b2 command. However, this alone leaves the secret information available in the image layers. I will show an example of it next.\n   FROM ubuntu ARG USERNAME ARG PASSWORD RUN apt-get update &amp;&amp; \\ apt-get upgrade &amp;&amp; \\ apt-get install -y curl RUN curl -o nginx_policy.yaml -u $USERNAME:$PASSWORD http://nexus:8081/repository/raw/policy/nginx-policy.yaml\n  docker build -t secret:args --build-arg USERNAME=$user --build-arg PASSWORD=$pass . Sending build context to Docker daemon 3.072kB Step 1/5 : FROM ubuntu  ---&gt; c29284518f49 Step 2/5 : ARG USERNAME  ---&gt; Using cache  ---&gt; 720c9732f5db Step 3/5 : ARG PASSWORD  ---&gt; Using cache  ---&gt; 193f8044461b Step 4/5 : RUN apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get install -y curl  ---&gt; Using cache  ---&gt; 894b791e5ec3 Step 5/5 : RUN curl -o nginx_policy.yaml -u $USERNAME:$PASSWORD  http://172.17.0.2:8081/repository/raw/policy/nginx-policy.yaml  ---&gt; Using cache  ---&gt; e4050d5c1743 Successfully built e4050d5c1743 Successfully tagged secret:args\n I use environment variables in the  build-arg option to not store the credentials operating system history. Also, in the image, I am not saving this information anywhere.\n The issue with this approach appears when you run  docker history command against this image:\n \u279c docker history secret:args_env  IMAGE CREATED CREATED BY SIZE COMMENT f11cb0b139f3 2 minutes ago |2 PASSWORD=admin123 USERNAME=admin /bin/sh \u2026 0B  6ca5f3fc074a 2 minutes ago |2 PASSWORD=admin123 USERNAME=admin /bin/sh \u2026 0B  193f8044461b 43 minutes ago /bin/sh -c #(nop) ARG PASSWORD 0B  720c9732f5db 43 minutes ago /bin/sh -c #(nop) ARG USERNAME 0B  c29284518f49 3 days ago /bin/sh -c #(nop) CMD [&#34;bash&#34;] 0B  &lt;missing&gt; 3 days ago /bin/sh -c #(nop) ADD file:5c3d9d2597e01d1ce\u2026 72.8MB\n Clearly, we can see that the credentials are stored in the metadata of the image. Despite our best efforts, we are still leaking confidential information. Buildkit\u00b3 was integrated\u2074 with Docker precisely to help us to stay secure.\n  Buildkit is present in Docker since the 18.06 release and currently only supports Linux containers. To enable Buildkit builds, set the  DOCKER_BUILDKIT=1 environment variable when invoking the docker build command, such as:\n     The new  --secret flag for docker build allows the user to pass secret information to be used in the Dockerfile for building docker images in a safe way that will not end up stored in the final image.\n To use this feature we need to override the default frontend\u2076 in our Dockerfile. In the very first line of the Dockerfile enter:\n  A  --mount flag was added to the  RUN command to allow the build container to access secure files such as private keys without baking them into the image.\n     And with a Dockerfile that specifies the use of a BuildKit frontend  docker/dockerfile:1.2, the secret can be accessed when performing a  RUN:\n  This Dockerfile is only to demonstrate that the secret can be accessed. As you can see the secret printed in the build output. The final image built will not have the secret file:\n $ DOCKER_BUILDKIT=1 docker build --no-cache --progress=plain -t secret:buildkit --secret id=mysecret,src=mysecret.txt . #1 [internal] load build definition from Dockerfile #1 sha256:5c65425f6fc0d6c65a5ddd6784812097b4eff778b9bcbf39bc708aacbad59abd #1 transferring dockerfile: 196B done #1 DONE 0.0s #2 [internal] load .dockerignore #2 sha256:35c8e51716823a06d8dbd04a2594a31a90f3d02bb55a0b8c3e9f2c1b44f901c7 #2 transferring context: 2B done #2 DONE 0.0s #3 resolve image config for docker.io/docker/dockerfile:1.2 #3 sha256:b239a20f31d7f1e5744984df3d652780f1a82c37554dd73e1ad47c8eb05b0d69 #3 DONE 2.5s #4 docker-image://docker.io/docker/dockerfile:1.2@sha256:e2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc #4 sha256:37e0c519b0431ef5446f4dd0a4588ba695f961e9b0e800cd8c7f5ba6165af727 #4 resolve docker.io/docker/dockerfile:1.2@sha256:e2a8561e419ab1ba6b2fe6cbdf49fd92b95912df1cf7d313c3e2230a333fdbcc done #4 CACHED #5 [internal] load metadata for docker.io/library/alpine:latest #5 sha256:d4fb25f5b5c00defc20ce26f2efc4e288de8834ed5aa59dff877b495ba88fda6 #5 DONE 0.0s #6 [1/2] FROM docker.io/library/alpine #6 sha256:665ba8b2cdc0cb0200e2a42a6b3c0f8f684089f4cd1b81494fbb9805879120f7 #6 CACHED #7 [2/2] RUN --mount=type=secret,id=mysecret cat /run/secrets/mysecret #7 sha256:75601a522ebe80ada66dedd9dd86772ca932d30d7e1b11bba94c04aa55c237de #7 0.494 SUPER_SECRET_PASSWORD#7 DONE 0.5s #8 exporting to image #8 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00 #8 exporting layers 0.0s done #8 writing image sha256:8df0fe20ceab547858702c32456d962b99d66fd40ab29f4e191ac0b52e383039 done #8 DONE 0.0s\n  $ docker history secret:buildkit IMAGE CREATED CREATED BY SIZE COMMENT 7da5afe48753 16 seconds ago RUN /bin/sh -c cat /run/secrets/mysecret # b\u2026 0B buildkit.dockerfile.v0 &lt;missing&gt; 4 weeks ago /bin/sh -c #(nop) CMD [&#34;/bin/sh&#34;] 0B  &lt;missing&gt; 4 weeks ago /bin/sh -c #(nop) ADD file:f278386b0cef68136\u2026 5.6MB\n Instead of using a secret file, one can pass the secret information using an environment variable\u2077, like:\n   This article explained the steps necessary to make the use of restricted information safer within Docker containers.\n By setting one environment variable before your \u201cdocker build\u201d and a few changes in your Dockerfile, you can prevent the leaking of credentials used to configure your Docker containers.\n Docker Buildkit not only supports  secrets but also other build mounts\u2078 such as  cache and  ssh. Start or continue to explore Buildkit and understand how it can help you improve the security of your environments.", "posttime": "2021-08-08 19:52:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "docker,\u7528\u4e8e,secure", "title": "\u4f20\u9012\u7528\u4e8e\u6784\u5efa Docker \u955c\u50cf\u7684\u5b89\u5168\u4fe1\u606f", "title_en": "Pass secure information for building Docker images", "transed": 1, "url": "https://medium.com/marionete/pass-secure-information-for-building-docker-images-8adeafe08355", "via": "", "real_tags": ["docker", "\u7528\u4e8e", "secure"]}, {"category": "", "categoryclass": "", "imagename": "e10abcc3480c72cb1e1a210835b28b54.jpg", "infoid": 1072098, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u81ea\u5927\u6d41\u884c\u4e4b\u524d\u5c31\u6ca1\u6709\u8981\u6c42\u4e58\u8f66\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230\u76f8\u540c\u4e58\u8f66\u7684\u4ef7\u683c\u8981\u9ad8\u5f97\u591a\u3002\u6839\u636e\u5206\u6790\u516c\u53f8\u4e50\u5929\u6536\u96c6\u7684\u6570\u636e\uff0c2021 \u5e74 7 \u6708\u7f8e\u56fd\u7f51\u7ea6\u8f66\u7968\u4ef7\u6bd4 COVID \u9650\u5236\u751f\u6548\u4e4b\u524d\u7684 2020 \u5e74 1 \u6708\u9ad8 50%\u3002 \u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u7684\u4e00\u9879\u5206\u6790\u663e\u793a\uff0c\u4ece 2021 \u5e74\u521d\u5f00\u59cb\uff0c\u4e58\u8f66\u4ef7\u683c\u6bcf\u4e2a\u6708\u90fd\u5728\u5c0f\u5e45\u4e0a\u6da8\uff0c\u5373\u4f7f\u6709\u66f4\u591a\u4eba\u63a5\u79cd\u4e86\u75ab\u82d7\u3002\u4e00\u4efd\u5173\u4e8e\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u9ad8\u4e8e\u6b63\u5e38\u7968\u4ef7\u7684\u7c7b\u4f3c\u62a5\u544a\uff084 \u6708\u4efd\u4e58\u5ba2\u6210\u672c\u4e0a\u6da8\u4e86 40%\uff09\u4e3b\u8981\u5c06\u8fd9\u4e2a\u95ee\u9898\u5f52\u548e\u4e8e\u53f8\u673a\u77ed\u7f3a\u3002\u4f46\u73b0\u5728\uff0c\u51e0\u4e2a\u6708\u540e\uff0c\u4f18\u6b65\u9996\u5e2d\u6267\u884c\u5b98\u8fbe\u62c9\u00b7\u79d1\u65af\u7f57\u8428\u897f\uff08Dara Khosrowshahi\uff09\u5728\u5176\u516c\u53f8 7 \u6708\u7684\u8d22\u62a5\u7535\u8bdd\u4f1a\u8bae\u4e0a\u8868\u793a\uff0c\u4e0e 6 \u6708\u4efd\u76f8\u6bd4\uff0c7 \u6708\u4efd\u4f18\u6b65\u7684\u53f8\u673a\u589e\u52a0\u4e86 30%\u3002\u5728\u53e6\u4e00\u6b21\u8d22\u62a5\u7535\u8bdd\u4f1a\u8bae\u4e2d\uff0cLyft \u9ad8\u7ba1\u8868\u793a\uff0c\u8fd9\u5bb6\u603b\u90e8\u4f4d\u4e8e\u65e7\u91d1\u5c71\u7684\u516c\u53f8\u770b\u5230\u4e86\u540c\u6837\u7684\u8d8b\u52bf\uff0c\u4e0e 6 \u6708\u4efd\u76f8\u6bd4\uff0c7 \u6708\u4efd\u7684\u53f8\u673a\u4eba\u6570\u66f4\u591a\u3002\u8fd9\u4e0d\u591f\u3002\u5bf9\u4e58\u8f66\u7684\u9700\u6c42\u4e00\u76f4\u8d85\u8fc7\u53ef\u4f9b\u4e58\u8f66\u7684\u53f8\u673a\u7684\u4f9b\u5e94\u3002\u7968\u4ef7\u4ecd\u5728\u4e0a\u6da8\uff0c\u56e0\u4e3a\u53f8\u673a\u4eec\u4ecd\u7136\u72b9\u8c6b\u662f\u5426\u8981\u6062\u590d\u62fc\u8f66\u3002\u60c5\u51b5\u53ef\u80fd\u9010\u6708\u6539\u5584\uff0c\u4f46\u8fd8\u6ca1\u6709\u56de\u5230\u5927\u6d41\u884c\u524d\u7684\u6c34\u5e73\uff0c\u56e0\u6b64\u4e58\u5ba2\u5c06\u7ee7\u7eed\u652f\u4ed8\u66f4\u591a\u8d39\u7528\uff0c\u56e0\u4e3a Uber \u548c Lyft \u63d0\u4f9b\u4e86\u7528\u6237\u6240\u89c1\u8fc7\u7684\u6700\u9ad8\u8d39\u7387\u3002\u53f8\u673a\u4e0d\u53ea\u662f\u5750\u5728\u5bb6\u91cc\u7b49\u5f85\u5927\u6d41\u884c\u7ed3\u675f\u3002\u8bb8\u591a\u4eba\u5df2\u7ecf\u8df3\u69fd\u5230\u5916\u5356\uff0c\u5c24\u5176\u662f\u5728 Uber Eats \u7684 Uber \u5e73\u53f0\u4e0a\u3002\u5373\u4f7f\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u5f00\u59cb\u79bb\u5f00\u5bb6\u53bb\u9910\u9986\u548c\u9152\u5427\uff0c\u9001\u9910\u4e5f\u7ee7\u7eed\u4fdd\u6301\u826f\u597d\u72b6\u6001\u3002\u7ecf\u8fc7\u6570\u6708\u7684\u9650\u5236\uff0c\u4eba\u4eec\u5df2\u7ecf\u4e60\u60ef\u4e86\u5c06\u98df\u7269\u76f4\u63a5\u9001\u5230\u4ed6\u4eec\u5bb6\u95e8\u53e3\u3002 Khosrowshahi \u8bf4\uff0c\u968f\u7740\u4f20\u67d3\u6027\u75c5\u6bd2\u7684\u4f20\u64ad\uff0c\u51fa\u4e8e\u201c\u5b89\u5168\u8003\u8651\u201d\uff0c\u5927\u591a\u6570\u524d\u4f18\u6b65\u53f8\u673a\u90fd\u6ca1\u6709\u56de\u6765\u5f00\u8f66\u3002\u4f46\u662f\u5728\u540e\u5ea7\u4e0a\u6709\u6c49\u5821\u548c\u85af\u6761\u800c\u4e0d\u662f\u547c\u5438\uff0c\u6d3b\u7740\u7684\u987e\u5ba2\u611f\u89c9\u98ce\u9669\u8f83\u5c0f\u3002\u4f18\u6b65\u9996\u5e2d\u6267\u884c\u5b98\u8fd8\u6307\u51fa\uff0c\u5bf9\u4e8e Eats \u53f8\u673a\u6765\u8bf4\uff0c\u80cc\u666f\u8c03\u67e5\u66f4\u5feb\u3001\u66f4\u7b80\u5355\uff0c\u56e0\u6b64\u4e0e\u4f20\u7edf\u53f8\u673a\u76f8\u6bd4\uff0c\u5728\u5e73\u53f0\u4e0a\u66f4\u5bb9\u6613\u83b7\u5f97\u65b0\u7684\u5feb\u9012\u5458\u3002\n\u5728\u5927\u6d41\u884c\u7684\u7b2c\u4e00\u90e8\u5206\u957f\u65f6\u95f4\u5e73\u9759\u4e4b\u540e\uff1a\u8f66\u624b\u4eec\u53c8\u56de\u6765\u4e86\u3002\u5728\u5468\u4e09\u7684\u7535\u8bdd\u4f1a\u8bae\u4e0a\uff0c\u79d1\u65af\u7f57\u8428\u897f\u8868\u793a\uff0c\u8bb8\u591a\u7f8e\u56fd\u57ce\u5e02\u90fd\u6062\u590d\u4e86\u201c\u6b63\u5e38\u201d\u7684\u4e58\u8f66\u8bf7\u6c42\u6c34\u5e73\uff0c\u4e58\u5ba2\u6570\u91cf\u5728\u5927\u6d41\u884c\u524d\uff0c\u4f8b\u5982\u8fc8\u963f\u5bc6\u3001\u4e9a\u7279\u5170\u5927\u3001\u8fbe\u62c9\u65af\u3001\u4f11\u65af\u987f\u548c\u51e4\u51f0\u57ce\u3002\u4f46\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7684\u53f8\u673a\uff0c\u4ef7\u683c\u548c\u7b49\u5f85\u65f6\u95f4\u5c06\u7ee7\u7eed\u6500\u5347\u3002 Khosrowshahi \u786e\u5b9e\u6307\u51fa\uff0c\u968f\u7740\u75ab\u82d7\u63a5\u79cd\u7387\u7684\u4e0a\u5347\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u524d\u4f18\u6b65\u53f8\u673a\u91cd\u8fd4\u5de5\u4f5c\u5c97\u4f4d\u3002\u4f18\u6b65\u4e0d\u4f1a\u8981\u6c42\u5176\u53f8\u673a\u63a5\u79cd\u75ab\u82d7\uff0c\u4f46\u53f8\u673a\u548c\u4e58\u5ba2\u5fc5\u987b\u7ee7\u7eed\u6234\u53e3\u7f69\u3002", "note_en": "If you haven&#39;t requested a ride since before the pandemic, you&#39;ll notice much higher prices for the same rides. Based on data collected by analytics firm Rakuten, U.S. ride-hailing fares were 50 percent higher in July 2021 than they were in Jan. 2020, before COVID restrictions went into effect.\n A   Wall Street Journal  analysis shows that ride prices from the beginning of 2021 have been inching up each month, even as  more people are vaccinated. A similar report on higher-than-usual fares from earlier in the year (passenger costs were  up 40 percent in April) mostly blamed the issue on a driver shortage.\n But now, a few months later, Uber CEO Dara Khosrowshahi said during his company&#39;s July earnings call that there was a 30 percent increase of drivers on Uber in July compared to June. In a separate earnings call, Lyft execs said the San Francisco-based company saw  the same trend, with more drivers in July compared to June. It&#39;s not enough.\n Demand for rides keeps outpacing the supply of drivers available to give rides. Fares are still going up because drivers are still hesitant to return to ride-sharing. Things may be improving month over month, but it&#39;s not back to pre-pandemic levels, so passengers will keep paying more as Uber and Lyft offer the highest rates users have ever seen.\n Drivers aren&#39;t just sitting at home waiting for the pandemic to end. Many have jumped ship to food delivery, especially on the Uber platform with Uber Eats. Food delivery continues to do well even as more people start to leave the house to restaurants and bars. After months of restrictions, people got accustomed to food being brought right to their door.\n Khosrowshahi said the majority of former Uber drivers haven&#39;t come back to drive people because of &#34;safety concerns&#34; as the contagious virus spreads. But with a burger and fries in the backseat instead of a breathing, living customer it feels less risky.\n The Uber CEO also noted that background checks are faster and simpler for Eats drivers, so it&#39;s easier to get new couriers on the platform compared to traditional drivers.\n After long lull during the first part of the pandemic: riders are coming back. During Wednesday&#39;s call, Khosrowshahi said many American cities are back to &#34;normal&#34; ride request levels with pre-pandemic passenger numbers, like in Miami, Atlanta, Dallas, Houston, and Phoenix. But without enough drivers, prices and wait times will continue to climb.\n  Khosrowshahi did note that as vaccination rates go up, ex-Uber drivers are coming back to work more and more. Uber will  not be requiring its drivers to be vaccinated, but drivers and passengers have to  continue to mask up.", "posttime": "2021-08-08 19:08:23", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u53d1\u73b0,lyft,\u53f8\u673a", "title": "\u62a5\u544a\u53d1\u73b0\u4f18\u6b65\u3001Lyft \u7684\u4ef7\u683c\u4e0d\u65ad\u6500\u5347\u81f3\u65b0\u9ad8", "title_en": "Uber, Lyft prices keep climbing to new highs, report finds", "transed": 1, "url": "https://mashable.com/article/lyft-uber-ride-hailing-prices-record-high", "via": "", "real_tags": ["\u53d1\u73b0", "lyft", "\u53f8\u673a"]}, {"category": "", "categoryclass": "", "imagename": "bedd093666e27d87ac5b96b117c45d1a.jpg", "infoid": 1072097, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8003\u53e4\u51b6\u91d1\u5b66\uff08\u5bf9\u53e4\u4ee3\u91d1\u5c5e\u7684\u7814\u7a76\uff09\u4e2d\uff0c\u8003\u53e4\u5b66\u5bb6\u5386\u6765\u91c7\u53d6\u81ea\u4e0a\u800c\u4e0b\u7684\u65b9\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u53d1\u73b0\u7684\u73e0\u5b9d\u3001\u5de5\u5177\u3001\u6b66\u5668\u548c\u5176\u4ed6\u6587\u7269\u5df2\u7ecf\u6210\u4e3a\u4e00\u4e2a\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u7edf\u6cbb\u96c6\u56e2\uff0c\u8be5\u96c6\u56e2\u5bf9\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u4ea7\u54c1\u65bd\u52a0\u4e86\u603b\u4f53\u63a7\u5236\u3002\u8d44\u6e90\u3002\u5728\u4e9a\u6d32\u8003\u53e4\u7814\u7a76\u7684\u4e00\u7bc7\u5f00\u653e\u83b7\u53d6\u6587\u7ae0\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\uff0c\u5728\u4ed6\u4eec\u5f00\u5c55\u5927\u90e8\u5206\u5de5\u4f5c\u7684\u4e1c\u5357\u4e9a\uff0c\u793e\u533a\u5b9e\u9645\u4e0a\u91c7\u53d6\u4e86\u81ea\u4e0b\u800c\u4e0a\u7684\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u793e\u533a\u90fd\u51b3\u5b9a\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u5b9d\u8d35\u7684\u8d44\u6e90\uff0c\u800c\u4e0d\u662f\u544a\u8bc9\u4ed6\u4eec\u8be5\u600e\u4e48\u529e\u3002\u8fd9\u7bc7\u6587\u7ae0\u91cd\u70b9\u4ecb\u7ecd\u4e86 Penn Press \u51fa\u7248\u7684\u56db\u5377\u4e13\u7740\u5957\u4ef6\u7684\u4e3b\u8981\u53d1\u73b0\u3002 \u201c\u6e90\u4e8e 19 \u4e16\u7eaa\u5bf9\u6587\u5316\u8fdb\u5316\u7684\u770b\u6cd5\u7684\u4eba\u7c7b\u53d1\u5c55\u7684\u8fdb\u6b65\u89c2\u70b9\u88ab\u4e00\u904d\u53c8\u4e00\u904d\u5730\u8bb2\u8ff0\u3002\u4f46\u662f\uff0c\u5f53\u60a8\u66f4\u4ed4\u7ec6\u3001\u66f4\u7ec6\u81f4\u5730\u89c2\u5bdf\u533a\u57df\u65f6\uff0c\u6548\u679c\u4e0d\u4f73\uff0c\u201d\u535a\u7269\u9986 Ban Chiang \u9879\u76ee\u7684\u8d1f\u8d23\u4eba\u3001\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u4eba\u7c7b\u5b66\u7cfb\u7684\u517c\u804c\u6559\u6388\u6000\u7279\u8bf4\u3002 \u201c\u6211\u4eec\u5e94\u8be5\u4ee5\u7c7b\u4f3c\u4e8e\u9057\u4f20\u5b66\u3001\u81ea\u7136\u9009\u62e9\u3001\u6587\u5316\u8fdb\u5316\u7684\u672c\u8d28\u673a\u5236\u7684\u7ec6\u7c92\u5ea6\u65b9\u5f0f\u6765\u770b\u5f85\u6587\u5316\u53d1\u5c55\u3002\u201d\u6c49\u5bc6\u5c14\u987f\u8bf4\uff0c\u867d\u7136\u8fd9\u79cd\u601d\u8def\u5e76\u4e0d\u662f\u5168\u65b0\u7684\uff0c\u4f46\u5b83\u4ee5\u524d\u4ece\u672a\u5e94\u7528\u4e8e\u4e1c\u5357\u4e9a\u3002 \u201c\u4f8b\u5982\uff0c\u5728\u6b27\u6d32\u8003\u53e4\u5b66\u548c\u5176\u4ed6\u5730\u65b9\uff0c\u8fd9\u79cd\u91cd\u65b0\u8003\u8651\u4e00\u76f4\u5728\u8fdb\u884c\uff0c\u201d\u5979\u8bf4\u3002 \u201c\u4f46\u5728\u6211\u4eec\u5de5\u4f5c\u7684\u5730\u65b9\uff0c\u65e7\u7684\u601d\u7ef4\u65b9\u5f0f\u5f80\u5f80\u5360\u4e3b\u5bfc\u5730\u4f4d\u3002\u201d Penn Today \u4e0e\u6000\u7279\u548c\u6c49\u5bc6\u5c14\u987f\u8c08\u8bba\u4e86\u4ed6\u4eec\u5e0c\u671b\u901a\u8fc7\u8fd9\u9879\u7814\u7a76\u5f15\u53d1\u7684\u8003\u53e4\u5b66\u8303\u5f0f\u8f6c\u53d8\uff0c\u4ee5\u53ca\u4ed6\u4eec\u8ba4\u4e3a\u8be5\u9886\u57df\u8d70\u5411\u4f55\u65b9\u7684\u60f3\u6cd5\u3002\u6c49\u5bc6\u5c14\u987f\uff1a\u5728\u53e4\u4ee3\u4e1c\u5357\u4e9a\u53d1\u73b0\u7684\u91d1\u5c5e\u5f80\u5f80\u662f\u94dc/\u9752\u94dc\u548c\u94c1\u3002\u9752\u94dc\u662f\u94dc\u548c\u9521\u7684\u5408\u91d1\u3002\u5728\u4e16\u754c\u5927\u90e8\u5206\u5730\u533a\uff0c\u9752\u94dc\u7684\u51fa\u73b0\u5f80\u5f80\u4e0e\u793e\u4f1a\u7b49\u7ea7\u7684\u4e0a\u5347\u5927\u81f4\u76f8\u5173\uff0c\u90e8\u5206\u5047\u8bbe\u662f\u56e0\u4e3a\u9752\u94dc\u662f\u4e00\u79cd\u7f8e\u4e3d\u800c\u575a\u786c\u7684\u91d1\u5c5e\uff0c\u53ef\u7528\u4e8e\u5236\u4f5c\u6b66\u5668\u6216\u5de5\u5177\u3002\u5728\u5927\u591a\u6570\u5730\u65b9\uff0c\u9521\u662f\u6bd4\u8f83\u5c11\u89c1\u7684\uff0c\u6240\u4ee5\u4f60\u901a\u5e38\u5fc5\u987b\u4ece\u5f88\u8fdc\u7684\u5730\u65b9\u8fdb\u53e3\u3002\u6709\u4e00\u79cd\u7406\u8bba\u8ba4\u4e3a\uff0c\u4f8b\u5982\u53e4\u4ee3\u8fd1\u4e1c\u7684\u7cbe\u82f1\u4eec\u8bd5\u56fe\u63a7\u5236\u9521\u8d38\u6613\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u79cd\u58f0\u671b\u5546\u54c1\u3002\u4f46\u4e1c\u5357\u4e9a\u662f\u4e3a\u6570\u4e0d\u591a\u7684\u94dc\u548c\u9521\u90fd\u5bb9\u6613\u83b7\u5f97\u7684\u5730\u65b9\u4e4b\u4e00\u3002\u6ca1\u6709\u4eba\u9700\u8981\u63a7\u5236\u5b83\uff1b\u6ca1\u6709\u4eba\u80fd\u591f\u63a7\u5236\u5b83\u3002\n\u767d\u8272\uff1a\u8981\u751f\u4ea7\u91d1\u5c5e\uff0c\u4f60\u5fc5\u987b\u627e\u5230\u77ff\u77f3\uff0c\u7136\u540e\u521b\u9020\u5408\u9002\u7684\u7269\u7406\u6761\u4ef6\uff0c\u8fd9\u662f\u5927\u6c14\u548c\u6e29\u5ea6\u7684\u7ed3\u5408\u3002\u5bf9\u4e8e\u9752\u94dc\uff0c\u60a8\u5fc5\u987b\u540c\u65f6\u4f7f\u7528\u9521\u548c\u94dc\uff0c\u7136\u540e\u5c06\u4e24\u79cd\u77ff\u77f3\u6309\u4e00\u5b9a\u6bd4\u4f8b\u5728\u7194\u7089\u4e2d\u6216\u5769\u57da\u4e2d\u7684\u4e24\u79cd\u91d1\u5c5e\u6df7\u5408\u3002\u6000\u7279\uff1a\u751f\u4ea7\u91d1\u5c5e\u7684\u80fd\u529b\u65e0\u7591\u662f\u4eba\u7c7b\u793e\u4f1a\u7684\u4e00\u9879\u91cd\u5927\u6280\u672f\u53d1\u5c55\u3002\u6c49\u5bc6\u5c14\u987f\uff1a\u4f60\u53ef\u4ee5\u81ea\u5df1\u5236\u4f5c\u77f3\u5668\u6216\u9505\u3002\u4f46\u662f\u521b\u9020\u4e00\u4e2a\u91d1\u5c5e\u5de5\u5177\uff0c\u4e00\u4e2a\u91d1\u5c5e\u5236\u54c1\u662f\u4e00\u4e2a\u56e2\u961f\u7684\u52aa\u529b\uff0c\u4e5f\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8fc7\u7a0b\u3002\u6000\u7279\uff1a\u590d\u6742\uff0c\u8fd8\u9700\u8981\u5927\u91cf\u7684\u77e5\u8bc6\u3001\u4e13\u4e1a\u77e5\u8bc6\u548c\u8bc0\u7a8d\u3002\u6765\u81ea\u6b27\u6d32\u80cc\u666f\u7684\u5b66\u8005\u5bf9\u6cf0\u56fd\u51b6\u91d1\u4e1a\u7684\u6700\u5927\u4e0d\u5b89\u5728\u4e8e\uff0c\u6240\u6709\u8fd9\u4e9b\u590d\u6742\u6027\u90fd\u662f\u7531\u975e\u57ce\u5e02\u3001\u975e\u6218\u4e89\u3001\u975e\u7b49\u7ea7\u793e\u4f1a\u9020\u6210\u7684\u3002\u6211\u4eec\u6587\u7ae0\u7684\u90e8\u5206\u91cd\u70b9\u662f\u63d0\u4f9b\u4e00\u4e2a\u53ef\u9760\u7684\u53cd\u9762\u53d9\u8ff0\uff0c\u8bf4\u660e\u5982\u4f55\u4e0d\u4f9d\u8d56\u81ea\u4e0a\u800c\u4e0b\u7684\u6a21\u578b\u800c\u662f\u4f7f\u7528\u8003\u53e4\u5b66\u4e2d\u672a\u5145\u5206\u5229\u7528\u7684\u7ecf\u6d4e\u6a21\u578b\u6765\u5f00\u53d1\u548c\u4ea4\u6362\u8fd9\u79cd\u91d1\u5c5e\u6280\u672f\uff0c\u8be5\u6a21\u578b\u57fa\u4e8e\u793e\u533a\u51b3\u7b56\u5173\u4e8e\u5982\u4f55\u53c2\u4e0e\u533a\u57df\u4ea4\u6d41\u7cfb\u7edf\u3002\u767d\u8272\uff1a\u5728\u6cf0\u56fd\u4e1c\u5317\u90e8\u7684\u73ed\u6e05\uff0c\u624b\u956f\u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u53d7\u6b22\u8fce\u7684\u91d1\u5c5e\u5236\u54c1\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u624b\u956f\u90fd\u662f\u7528\u9521\u9752\u94dc\u5408\u91d1\u5236\u6210\u7684\u3002\u5982\u679c\u6211\u4eec\u5411\u5357\u8d70\u51e0\u767e\u516c\u91cc\u5230\u53e6\u4e00\u4e2a\u53f2\u524d\u9057\u5740\uff0c\u624b\u956f\u5c31\u4e0d\u662f\u90a3\u4e48\u7a81\u51fa\u4e86\u3002\u90a3\u4e2a\u793e\u533a\u5e76\u6ca1\u6709\u90a3\u4e48\u4e13\u6ce8\u4e8e\u73e0\u5b9d\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u6709\u8fd9\u4e9b\u5947\u602a\u5f62\u72b6\u7684\u951b\uff0c\u6211\u5728\u5176\u4ed6\u4efb\u4f55\u7f51\u7ad9\u90fd\u6ca1\u6709\u770b\u5230\u8fc7\uff0c\u8fd9\u4e9b\u5c0f\u6868\u5f62\u72b6\u3002\u5176\u4e2d\u81f3\u5c11\u6709\u4e24\u4e2a\u4e0d\u662f\u7531\u9521\u9752\u94dc\u5236\u6210\uff0c\u800c\u662f\u7531\u94dc\u5236\u6210\u3002\u4ece\u94c5\u540c\u4f4d\u7d20\u7684\u5c11\u91cf\u8bc1\u636e\u53ef\u4ee5\u770b\u51fa\uff0c\u5317\u90e8\u7ad9\u70b9\u4ece\u8001\u631d\u83b7\u53d6\u94dc\uff0c\u5357\u90e8\u7ad9\u70b9\u4ece\u6cf0\u56fd\u4e2d\u90e8\u83b7\u53d6\u94dc\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u662f\u8fc4\u4eca\u4e3a\u6b62\u6211\u4eec\u53d1\u73b0\u7684\u6700\u9177\u3001\u6700\u91cd\u8981\u7684\u4e8b\u60c5\u4e4b\u4e00\u3002\u5728\u65e9\u671f\u9636\u6bb5\uff0c\u6751\u5e84\u8fde\u63a5\u5230\u4e0d\u540c\u7684\u91d1\u5c5e\u4f9b\u5e94\u7ebf\u3002\u4ed6\u4eec\u6b63\u5728\u4f7f\u7528\u672c\u5730\u7279\u5b9a\u7684\u6280\u672f\uff0c\u5e76\u4e14\u6b63\u5728\u5236\u9020\u672c\u5730\u7279\u5b9a\u7684\u7269\u54c1\u3002\u751f\u4ea7\u4e0d\u7edf\u4e00\u3002\u6c49\u5bc6\u5c14\u987f\uff1a\u8fd8\u6709\u8bc1\u636e\u8868\u660e\uff0c\u5f88\u591a\u8fd9\u4e9b\u5c0f\u6751\u5e84\u90fd\u5728\u5236\u9020\u81ea\u5df1\u7684\u91d1\u5c5e\u5236\u54c1\u3002\u6211\u4eec\u5728\u5927\u591a\u6570\u6751\u5e84\u90fd\u53d1\u73b0\u4e86\u5769\u57da\uff0c\u4ee5\u53ca\u94f8\u9020\u6700\u7ec8\u4ea7\u54c1\uff08\u5305\u62ec\u6a21\u5177\uff09\u7684\u5176\u4ed6\u8bc1\u636e\u3002\u4ed6\u4eec\u4e0d\u662f\u4ece\u4e00\u4e9b\u751f\u4ea7\u91d1\u5c5e\u548c\u91d1\u5c5e\u4ea7\u54c1\u7684\u5927\u578b\u4e2d\u592e\u5546\u573a\u8fdb\u53e3\u5b83\u4eec\u3002\n\u6c49\u5bc6\u5c14\u987f\uff1a\u5927\u591a\u6570\u5173\u4e8e\u53e4\u4ee3\u91d1\u5c5e\u7684\u5b9e\u9a8c\u5ba4\u5de5\u4f5c\u4ecd\u7136\u662f\u5bf9\u901a\u5e38\u4ece\u575f\u5893\u4e2d\u6316\u6398\u51fa\u6765\u7684\u677e\u6563\u7684\u91d1\u5c5e\u6587\u7269\u96c6\u5408\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\u5b83\u4eec\u4fdd\u5b58\u5b8c\u597d\uff0c\u6216\u8005\u5b83\u4eec\u6070\u597d\u662f\u6316\u6398\u673a\u5141\u8bb8\u5206\u6790\u4eba\u5458\u53d6\u6837\u7684\u4e1c\u897f\u3002\u8fd9\u4e9b\u7814\u7a76\u901a\u5e38\u4e0d\u4f1a\u5bf9\u6240\u6709\u5de5\u4ef6\u7c7b\u578b\u3001\u65f6\u671f\u548c\u4e0a\u4e0b\u6587\u8fdb\u884c\u91c7\u6837\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ee5\u524d\u7684\u5927\u591a\u6570\u6280\u672f\u7814\u7a76\u90fd\u662f\u7cbe\u5fc3\u6311\u9009\u7684\u6837\u672c\u3002\u901a\u8fc7\u6211\u4eec\u4ece\u6240\u6709\u6316\u6398\u51fa\u7684\u91d1\u5c5e\u7269\u4f53\u4e2d\u53d6\u6837\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6709\u5173\u53e4\u4ee3\u793e\u4f1a\u4e2d\u5b58\u653e\u91d1\u5c5e\u7684\u5b8c\u6574\u8bc1\u636e\u7684\u56fe\u7247\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u65f6\u95f4\u3001\u4e0a\u4e0b\u6587\u548c\u5de5\u4ef6\u7c7b\u578b\u6765\u67e5\u770b\u7279\u5b9a\u7684\u53d8\u5316\u3002\u7edd\u5927\u591a\u6570\u8003\u53e4\u51b6\u91d1\u8c03\u67e5\u65e0\u6cd5\u53ef\u9760\u5730\u611f\u77e5\u8fd9\u79cd\u7ec6\u7c92\u5ea6\u7684\u7ec6\u8282\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5f88\u5e78\u8fd0\uff0c\u6211\u4eec\u6709\u4fdd\u5b58\u5b8c\u597d\u7684\u91d1\u5c5e\u5236\u54c1\u3002\u6000\u7279\uff1a\u9664\u6b64\u4e4b\u5916\uff0c\u5177\u6709\u4f20\u7edf\u503e\u5411\u7684\u8003\u53e4\u5b66\u5bb6\u5f80\u5f80\u6709\u4e00\u79cd\u79f0\u4e3a\u672c\u8d28\u4e3b\u4e49\u7684\u7279\u6b8a\u601d\u60f3\u7ed3\u6784\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4f1a\u6839\u636e\u793e\u4f1a\u53d8\u9769\u7684\u6e10\u8fdb\u89c2\u70b9\u7aed\u5c3d\u5168\u529b\u60f3\u51fa\u4e00\u4e2a\u8fde\u8d2f\u7684\u6545\u4e8b\u3002\u4ed6\u4eec\u4e0d\u65ad\u5bfb\u627e\u5e76\u5938\u5927\u5177\u4f53\u8bc1\u636e\u4ee5\u9002\u5e94\u8fd9\u79cd\u6e10\u8fdb\u5f0f\u6a21\u578b\u3002\u4e1c\u5357\u4e9a\u5219\u4e0d\u540c\u3002\u5b83\u63d0\u4f9b\u4e86\u81ea\u4e0b\u800c\u4e0a\u7684\u793e\u4f1a\u53d8\u9769\u548c\u793e\u533a\u5c42\u9762\u51b3\u7b56\u7684\u6770\u51fa\u8303\u4f8b\u3002\u8fd9\u662f\u4e00\u4e2a\u4ee5\u66f4\u7cbe\u7ec6\u7684\u65b9\u5f0f\u7814\u7a76\u53f2\u524d\u793e\u4f1a\u7684\u673a\u4f1a\uff0c\u4e5f\u662f\u8003\u53e4\u5b66\u5bb6\u7684\u6839\u672c\u8f6c\u53d8\u3002\u5728\u5c1d\u8bd5\u63a8\u5e7f\u8fd9\u79cd\u4e0d\u540c\u7684\u89c2\u70b9\u4ee5\u53ca\u4f7f\u7528\u91d1\u5c5e\u4f5c\u4e3a\u83b7\u5f97\u8fd9\u79cd\u89c2\u70b9\u7684\u5de5\u5177\u65b9\u9762\uff0c\u6211\u4eec\u4ecd\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\u3002\u6000\u7279\uff1a\u6211\u771f\u7684\u547c\u5401\u4e0b\u4e00\u4ee3\u6709\u524d\u9014\u7684\u4e1c\u5357\u4e9a\u8003\u53e4\u5b66\u5bb6\u8fdb\u4e00\u6b65\u6d4b\u8bd5\u3001\u586b\u5145\u548c\u53d1\u5c55\u65b0\u7684\u8303\u5f0f\u3002\u6211\u8fd8\u8ba4\u4e3a\uff0c\u4f5c\u4e3a\u8003\u53e4\u5b66\u5bb6\uff0c\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7814\u7a76\u53f2\u524d\u6cf0\u56fd\u7b49\u7ecf\u4e45\u4e0d\u8870\u7684\u53e4\u4ee3\u793e\u4f1a\uff0c\u4e3a\u66f4\u5e7f\u6cdb\u7684\u8ba8\u8bba\u505a\u51fa\u8d21\u732e\uff0c\u5373\u6211\u4eec\u5982\u4f55\u5728\u8fd9\u4e2a\u4e16\u754c\u4e0a\u751f\u6d3b\uff0c\u4ee5\u4fbf\u5728\u5730\u7403\u4e0a\u66f4\u6210\u529f\u5730\u751f\u5b58\uff0c\u6709\u5f39\u6027\uff0c\u548c\u548c\u5e73\u3002\u4e54\u4f0a\u65af\u00b7\u6000\u7279\uff08Joyce White\uff09\u662f\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u8003\u53e4\u4e0e\u4eba\u7c7b\u5b66\u535a\u7269\u9986\u4e2d\u6e44\u516c\u6cb3\u8003\u53e4\u9879\u76ee\u7684\u54a8\u8be2\u5b66\u8005\u548c\u9996\u5e2d\u7814\u7a76\u5458\uff0c\u535a\u7269\u9986 Ban Chiang \u9879\u76ee\u7684\u8d1f\u8d23\u4eba\uff0c\u4e1c\u5357\u4e9a\u8003\u53e4\u7814\u7a76\u6240\u7684\u6267\u884c\u4e3b\u4efb\uff0c\u4ee5\u53ca\u8be5\u9879\u76ee\u7684\u517c\u804c\u6559\u6388\u3002\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u827a\u672f\u4e0e\u79d1\u5b66\u5b66\u9662\u4eba\u7c7b\u5b66\u7cfb\u3002\u4f0a\u4e3d\u838e\u767d\u00b7\u6c49\u5bc6\u5c14\u987f (Elizabeth Hamilton) \u662f\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u535a\u7269\u9986 Ban Chiang \u9879\u76ee\u7684\u54a8\u8be2\u5b66\u8005\u548c\u7814\u7a76\u534f\u8c03\u5458\u3002", "note_en": "In archaeometallurgy, the study of ancient metal, archaeologists have historically taken a top-down approach, meaning that the jewelry, tools, weapons, and other artifacts they discover have come to signify a dominant ruling group that exerted overarching control over how to use such resources.\n  In an open-access article in   Archaeological Research in Asia, the researchers argue that in Southeast Asia, where they have conducted the bulk of their work, communities actually took a bottom-up approach, each deciding how to use these precious resources rather than being told what to do with them. The article highlights key findings from a  four-volume monograph suite being published by Penn Press.\n \u201cA progressive view of human development originating in 19th-century perceptions of cultural evolution gets told over and over again. But it doesn\u2019t work well when you look at areas in closer and finer detail,\u201d says White, director of the Museum\u2019s  Ban Chiang Project and an adjunct professor in Penn\u2019s  Department of Anthropology. \u201cWe should be looking at cultural development in fine-grained ways analogous to genetics, natural selection, the nitty gritty mechanisms by which cultures evolved.\u201d\n  Though this line of thinking isn\u2019t entirely new, it\u2019s never before been applied to Southeast Asia, Hamilton says. \u201cSuch a reconsideration has been taking place, for example, in European archaeology and other places,\u201d she says. \u201cBut where we work, the old ways of thinking tend to dominate.\u201d\n Penn Today spoke to White and Hamilton about the paradigm shift in archaeology they hope to spark with this research, plus thoughts on where they see the field heading.\n Hamilton: Metals found in ancient Southeast Asia tend to be copper/bronze and iron. Bronze is an alloy of copper and tin. In much of the world, the appearance of bronze tends to roughly correlate with the rise of social hierarchy, partly, it\u2019s assumed, because bronze is a beautiful, hard metal you can use for weapons or tools.\n In most places, tin is relatively rare, so you usually must import it from a long way away. There\u2019s this theory that elites, in the ancient Near East for example, were trying to control the tin trade because it\u2019s a prestige good. But Southeast Asia is one of the few places where both copper and tin are readily available. No one needs to control it; no one can control it.\n    White: For metal to be produced,  you must find the ores and then create the right physical conditions, which is a combination of atmosphere and temperature. In the case of bronze, you must do this with both tin and copper and then combine either the two ores in a furnace or the two metals in a crucible in certain proportions.\n  White: The ability to produce metals was undoubtedly a significant technological development in human societies.\n Hamilton: You can create a stone tool or a pot by yourself. But creating a metal tool, a metal artifact is a group endeavor and a complex one.\n White: Complex and also requiring a great deal of knowledge, expertise, know-how. The big discomfort scholars from a European background have with metallurgy in Thailand is that all this complexity was done by non-urban, non-warring, non-hierarchical societies. Part of the point of our article is to offer a solid counternarrative to how this metal technology could be developed and exchanged not reliant on a top-down model but using an economic model that has been way underutilized in archaeology, one based on communities making decisions about how to participate in regional exchange systems.\n    White: In northern northeast Thailand, at Ban Chiang, bracelets were by far the most popular metal object made, and almost all of them were made of a tin-bronze alloy. If we go a few hundred kilometers south to another prehistoric site, bangles weren\u2019t all that prominent. That community wasn\u2019t so focused on jewelry. Instead, they had these odd-shaped adzes, which I haven\u2019t seen from any other site, these little paddle shapes. At least two of them were made not of tin-bronze but of copper.\n Looking at a small amount of evidence from lead isotopes, we can see that the northern site is getting its copper from Laos, and the southern site is getting its copper from central Thailand. To me, this is one of the coolest and most significant things we have found so far. In very early stages, villages are linking to different metal supply lines. They\u2019re using locally specific technologies, and they\u2019re making locally specific items. Production was not uniform.\n Hamilton: There\u2019s also evidence that a lot of these small villages were manufacturing their own metal artifacts. We\u2019ve found crucibles in most villages, along with other evidence for casting final products including molds. They were not importing them from some big central emporium that was churning out metal and metal products.\n    Hamilton: Most laboratory work on ancient metals is still performed on a loose collection of metal artifacts that were commonly excavated from graves, so they\u2019re well-preserved, or they happen to be what the excavator allows the analyst to sample. Those studies often don\u2019t sample all artifact types, periods, and contexts. In other words, most previous technical studies cherry-picked their samples.\n Through our work, which sampled from entire  populations of excavated metal objects, we can get a picture of the full evidence for the place metals held in an ancient society. We can look at specific changes through time, in context, in artifact type. The vast majority of archaeometallurgical investigations cannot reliably perceive such fine-grained details. We were lucky, of course, that we had pretty well-preserved metal artifacts.\n White: Beyond that,  archaeologists of a traditional bent tend to have a particular thought structure called essentialism, which means that they do everything they can to come up with a coherent story according to a progressive view of social change. They keep looking for and exaggerate specific evidence to fit that progressive model. Southeast Asia is different. It offers an outstanding example of bottom-up social change, of community-level decision making. It\u2019s a chance to study prehistoric societies in a more granular way, and it\u2019s a fundamental shift for archaeologists. We\u2019re still early on in trying to promote this different point of view and in using metals as a vehicle to gain this perspective.\n    White: I really call on the next generation of up-and-coming Southeast Asian archaeologists to test, fill in, and develop the new paradigm further. I also think that as archaeologists, broadly, we can contribute to a larger discussion of how we all live in this world going forward, to have a more successful existence on this Earth, by studying ancient societies like those in prehistoric Thailand that were enduring, resilient, and peaceful.\n Joyce White  is a consulting scholar and principal investigator of the   Middle Mekong Archaeological Project  at the   University of Pennsylvania Museum of Archaeology and Anthropology , director of the Museum\u2019s   Ban Chiang Project ,\u00a0executive director of the Institute for Southeast Asian Archaeology, and an adjunct professor in the   Department of Anthropology  in the   School of Arts &amp; Sciences  at the   University of Pennsylvania .\n Elizabeth Hamilton is a consulting scholar and research coordinator of the   Ban Chiang Project  at the   Penn Museum .", "posttime": "2021-08-08 18:50:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91d1\u5c5e,artifacts", "title": "\u4e1c\u5357\u4e9a\u7684\u91d1\u5c5e\u6587\u7269\u6311\u6218\u957f\u671f\u5b58\u5728\u7684\u8003\u53e4\u7406\u8bba", "title_en": "Metal artifacts in Southeast Asia challenge long-held archaeological theory", "transed": 1, "url": "https://penntoday.upenn.edu/news/Penn-Museum-metal-artifacts-Thailand-challenge-archaeological-theory", "via": "", "real_tags": ["\u91d1\u5c5e", "artifacts"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072096, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f Napkin Math \u65f6\u4e8b\u901a\u8baf\u7684\u4e00\u4e2a\u7248\u672c\uff0c\u662f\u5173\u4e8e\u4f7f\u7528\u9910\u5dfe\u5f0f\u6570\u5b66\u548c\u7b2c\u4e00\u6027\u539f\u7406\u601d\u7ef4\u6765\u4f30\u8ba1\u7cfb\u7edf\u6027\u80fd\u7684\u65f6\u4e8b\u901a\u8baf\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u8ba2\u9605\u3002\u60a8\u662f\u5426\u77e5\u9053\uff0c\u5982\u679c\u60a8\u7684\u7f51\u7ad9\u4f4e\u4e8e 12kb\uff0c\u7b2c\u4e00\u9875\u7684\u52a0\u8f7d\u901f\u5ea6\u4f1a\u660e\u663e\u52a0\u5feb\uff1f\u5f53 TCP \u6b63\u5728\u9884\u70ed\uff08\u79f0\u4e3a TCP \u6162\u542f\u52a8\uff09\u65f6\uff0c\u670d\u52a1\u5668\u5728\u521d\u59cb\u5f80\u8fd4\u4e2d\u4ec5\u53d1\u9001\u51e0\u4e2a\u6570\u636e\u5305\uff08\u901a\u5e38\u4e3a 10 \u4e2a\uff09\u3002\u53d1\u9001\u5b8c\u7b2c\u4e00\u7ec4\u6570\u636e\u5305\u540e\uff0c\u9700\u8981\u7b49\u5f85\u5ba2\u6237\u7aef\u786e\u8ba4\u6536\u5230\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u5305\u3002\u4f7f\u7528 10 \u4e0e 30 \u7684\u521d\u59cb TCP \u6162\u542f\u52a8\u7a97\u53e3\uff08\u4e5f\u79f0\u4e3a\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u6216 initcwnd\uff09\u4f20\u8f93\u7ea6 15kb \u7684\u5feb\u901f\u8bf4\u660e\uff1a\u521d\u59cb\u7a97\u53e3\u8d8a\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c\u4e00\u6b21\u5f80\u8fd4\u4e2d\u4f20\u8f93\u7684\u8d8a\u591a\uff0c\u60a8\u7684\u7ad9\u70b9\u8d8a\u5feb\u5728\u521d\u59cb\u9875\u9762\u52a0\u8f7d\u65f6\u3002\u5bf9\u4e8e\u8f83\u957f\u7684\u5f80\u8fd4\u65f6\u95f4\uff08\u4f8b\u5982\u7a7f\u8d8a\u6d77\u6d0b\uff09\uff0c\u8fd9\u5c06\u5f00\u59cb\u53d8\u5f97\u5f88\u91cd\u8981\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u6258\u7ba1\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u521d\u59cb\u7a97\u53e3\u7684\u5927\u81f4\u5927\u5c0f\uff1a \u4e3a\u4e86\u751f\u6210\u8fd9\u4e2a\uff0c\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u811a\u672c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 sirupsen/initcwnd \u6765\u5206\u6790\u60a8\u81ea\u5df1\u7684\u7ad9\u70b9\u3002\u6839\u636e\u62a5\u544a\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u8c03\u6574\u9875\u9762\u5927\u5c0f\uff0c\u6216\u8c03\u6574\u670d\u52a1\u5668\u7684\u521d\u59cb\u6162\u542f\u52a8\u7a97\u53e3\u5927\u5c0f (initcwnd)\uff08\u53c2\u89c1\u6587\u7ae0\u5e95\u90e8\uff09\u3002\u8bf7\u7ee7\u7eed\u9605\u8bfb\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\uff01\u4eb2\u7231\u7684\u9910\u5dfe\u9a6c\u745f\u65af\uff0c\u592a\u4e45\u4e86\u3002\u81ea\u4e0a\u6b21\u4ee5\u6765\uff0c\u6211\u5728\u4ee4\u4eba\u60ca\u53f9\u7684 8 \u5e74\u4e4b\u540e\u79bb\u5f00\u4e86 Shopify\u3002\u4e00\u751f\u7684\u9a91\u884c\u3002\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u6211\u6b63\u5728\u901a\u8fc7\u8010\u529b\u51b2\u6d6a\uff08\u5728\u6211\u79bb\u5f00\u540e\u7684\u4e00\u5468\u8fdb\u884c 125K \u4e3a\u671f 3 \u5929\u7684\u65c5\u884c\uff09\u3001\u4f11\u95f2\u7f16\u7a0b\uff08\u5176\u4e2d\u9910\u5dfe\u7eb8\u6570\u5b66\u80af\u5b9a\u662f\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff09\u548c\u5b66\u4e60\u4e00\u4e9b\u975e\u8ba1\u7b97\u673a\u7684\u4e1c\u897f\u3002\u5728\u672c\u671f\u4e2d\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u4e86\u89e3\u5f53\u6211\u4eec\u901a\u8fc7 HTTP \u5bf9\u7f51\u7ad9\u8fdb\u884c\u521d\u59cb\u9875\u9762\u52a0\u8f7d\u65f6\uff0c\u5728\u7ebf\u8def\u4e0a\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u6b63\u5982\u6211\u5df2\u7ecf\u6697\u793a\u7684\u90a3\u6837\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5728\u4f18\u5316\u77ed\u671f\u3001\u7a81\u53d1 TCP \u4f20\u8f93\u65f6\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u795e\u5947\u7684\u5b57\u8282\u9608\u503c\u3002\u5982\u679c\u4f60\u4f4e\u4e8e\u8fd9\u4e2a\u9608\u503c\uff0c\u6216\u8005\u589e\u52a0\u5b83\uff0c\u5b83\u53ef\u80fd\u4f1a\u4f7f\u5ba2\u6237\u7aef\u514d\u4e8e\u591a\u6b21\u5f80\u8fd4\u3002\u7279\u522b\u662f\u5bf9\u4e8e\u7ecf\u5e38\u4ece\u9065\u8fdc\u7684\u5730\u65b9\uff08\u5373\u9ad8\u5f80\u8fd4\u65f6\u95f4\uff09\u8bf7\u6c42\u7684\u5177\u6709\u5355\u4e00\u4f4d\u7f6e\u7684\u7ad9\u70b9\uff0c\u4f8b\u5982\u7f8e\u56fd - &gt; \u6fb3\u5927\u5229\u4e9a\uff0c\u8fd9\u53ef\u4ee5\u4ea7\u751f\u5de8\u5927\u7684\u5dee\u5f02\u3002\u5982\u679c\u60a8\u6b63\u5728\u8fd0\u8425 SaaS \u98ce\u683c\u7684\u670d\u52a1\uff0c\u8fd9\u5f88\u53ef\u80fd\u5c31\u662f\u60a8\u6240\u5904\u7684\u60c5\u51b5\u3002\u867d\u7136\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u516c\u5171\u4e92\u8054\u7f51\u4e0a\u7684 HTTP\uff0c\u4f46 TCP \u6162\u542f\u52a8\u5bf9\u6570\u636e\u4e2d\u5fc3\u5185\u7684 RPC \u4e5f\u5f88\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u5b83\u4eec\u4e4b\u95f4\u3002\n\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u9996\u5148\u5c55\u793a\u5173\u4e8e\u6211\u4eec\u5728\u7b2c 4 \u5c42\u601d\u8003\u52a0\u8f7d\u7f51\u7ad9\u5982\u4f55\u5de5\u4f5c\u7684\u6734\u7d20\u5fc3\u7406\u6a21\u578b\u3002\u7136\u540e\u6211\u4eec\u5c06\u5bf9\u9884\u671f\u6027\u80fd\u8fdb\u884c\u9910\u5dfe\u7eb8\u6570\u5b66\u8ba1\u7b97\uff0c\u5e76\u5c06\u6211\u4eec\u8106\u5f31\u3001\u6734\u7d20\u7684\u6a21\u578b\u4e0e\u73b0\u5b9e\u9762\u5bf9\u9762\uff0c\u770b\u770b\u5b83\u662f\u5426\u7b26\u5408\u8981\u6c42.\u90a3\u4e48\u5f53\u6211\u4eec\u8bf7\u6c42\u4e00\u4e2a\u7ad9\u70b9\u65f6\uff0c\u6211\u4eec\u8ba4\u4e3a\u5728 TCP \u7ea7\u522b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u6392\u9664\u538b\u7f29\u3001DOM \u6e32\u67d3\u3001Javascript \u7b49\uff0c\u5e76\u4ec5\u9650\u4e8e\u4e0b\u8f7d HTML\u3002\u6362\u53e5\u8bdd\u8bf4\uff1a curl --http1.1 https://sirupsen.com &gt; /dev/null \uff08\u6ce8\u610f sirupsen/initcwnduses -- \u7528 curl \u538b\u7f29\u4ee5\u53cd\u6620\u73b0\u5b9e\uff09\u3002\u4e3a\u4e86\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u6709\u8da3\uff0c\u6211\u4eec\u5c06\u9009\u62e9\u4e00\u4e2a\u5728\u5730\u7406\u4e0a\u79bb\u6211\u66f4\u8fdc\u4f46\u6ca1\u6709\u8fc7\u5ea6\u4f18\u5316\u7684\u7ad9\u70b9\uff1ainformation.dk\uff0c\u4e00\u5bb6\u4e39\u9ea6\u62a5\u7eb8\u3002\u901a\u8fc7\u4ece\u4e0d\u540c\u5730\u7406\u533a\u57df\u7684\u670d\u52a1\u5668\u8fdb\u884c\u7684\u4e00\u4e9b DNS \u67e5\u627e\u5e76\u4f7f\u7528\u89c2\u5bdf\u955c\uff0c\u6211\u53ef\u4ee5\u786e\u5b9a\u5b83\u4eec\u7684\u6240\u6709 HTML \u6d41\u91cf\u59cb\u7ec8\u8def\u7531\u5230\u54e5\u672c\u54c8\u6839\u7684\u6570\u636e\u4e2d\u5fc3\u3002\u5982\u4eca\uff0c\u8bb8\u591a\u7ad9\u70b9\u90fd\u901a\u8fc7 Cloudflare POP \u8def\u7531\uff0c\u8fd9\u4e9b\u7ad9\u70b9\u9644\u8fd1\u6709\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3\uff0c\u4e3a\u4e86\u7b80\u5316\u6211\u4eec\u7684\u5206\u6790\uff0c\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002\u6211\u76ee\u524d\u5750\u5728\u9b41\u5317\u514b\u897f\u5357\u90e8\uff0c\u4f7f\u7528 LTE \u8fde\u63a5\u3002\u6211\u53ef\u4ee5\u901a\u8fc7 traceroute(1) \u786e\u5b9a\u6211\u7684\u6d41\u91cf\u6b63\u5728\u901a\u8fc7\u8def\u5f84\u8499\u7279\u5229\u5c14 -&gt; \u7ebd\u7ea6 -&gt; \u963f\u59c6\u65af\u7279\u4e39 -&gt; \u54e5\u672c\u54c8\u6839\u524d\u5f80\u54e5\u672c\u54c8\u6839\u3002\u5f80\u8fd4\u65f6\u95f4\u7ea6\u4e3a 140 \u6beb\u79d2\u3002\u5982\u679c\u6211\u4eec\u5c06\u4e0a\u8ff0\u9910\u5dfe\u7eb8\u6a21\u578b\u7684\u5f80\u8fd4\u6b21\u6570\u76f8\u52a0\uff08\u4e0d\u5305\u62ec DNS\uff09\uff0c\u6211\u4eec\u9884\u8ba1\u52a0\u8f7d\u4e39\u9ea6\u7ad9\u70b9\u9700\u8981 4 * 140 \u6beb\u79d2 = 560 \u6beb\u79d2\u3002\u56e0\u4e3a\u6211\u4f7f\u7528\u7684\u662f LTE \u8fde\u63a5\uff0c\u4f46\u6211\u6ca1\u6709\u5f97\u5230\u8fdc\u9ad8\u4e8e 15 mbit/s\uff0c\u6211\u4eec\u5fc5\u987b\u8003\u8651\u5230\u9664\u4e86 4 \u6b21\u5f80\u8fd4\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u5927\u7ea6 100 \u6beb\u79d2\u6765\u4f20\u8f93\u6570\u636e\u3002\u56e0\u6b64\uff0c\u6839\u636e\u6211\u4eec\u7684\u9910\u5dfe\u7eb8\u6570\u5b66\uff0c\u6211\u4eec\u671f\u671b\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u5927\u7ea6 660 \u6beb\u79d2\u7684\u65f6\u95f4\u5185\u4ece\u54e5\u672c\u54c8\u6839\u7684\u670d\u52a1\u5668\u4e0b\u8f7d 160kb \u7684 HTML\u3002\u7136\u800c\uff0c\u73b0\u5b9e\u8fd8\u6709\u5176\u4ed6\u8ba1\u5212\u3002\u5f53\u6211\u8fd0\u884c\u65f6 curl --http1.1 https://www.information.dk \u9700\u8981 1.3 \u79d2\uff01\u901a\u5e38\u6211\u4eec\u4f1a\u8bf4\uff0c\u5982\u679c\u9910\u5dfe\u6570\u5b66\u5728 ~10 \u500d\u4ee5\u5185\uff0c\u9910\u5dfe\u6570\u5b66\u53ef\u80fd\u4e0e\u73b0\u5b9e\u76f8\u7b26\uff0c\u4f46\u8fd9\u901a\u5e38\u662f\u6211\u4eec\u5904\u7406\u7eb3\u79d2\u548c\u5fae\u79d2\u7684\u60c5\u51b5\u3002\u672a\u5173\u95ed~ 640ms\uff01\u90a3\u4e48\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u5f53\u9910\u5dfe\u7eb8\u6570\u5b66\u548c\u73b0\u5b9e\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\u65f6\uff0c\u8fd9\u662f\u56e0\u4e3a\uff081\uff09\u4e16\u754c\u7684\u9910\u5dfe\u7eb8\u6a21\u578b\u4e0d\u6b63\u786e\uff0c\u6216\u8005\uff082\uff09\u7cfb\u7edf\u4e2d\u6709\u4f18\u5316\u7a7a\u95f4\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u6709\u70b9\u4e24\u8005\u517c\u800c\u6709\u4e4b\u3002\u8ba9\u6211\u4eec\u8ffd\u6355\u90a3 640 \u6beb\u79d2\u3002 \ud83d\udc40\n\u4e3a\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 Wireshark \u5206\u6790\u539f\u59cb\u7f51\u7edc\u6d41\u91cf\u3002 Wireshark \u5e26\u56de\u4e86\u8bb8\u591a\u56de\u5fc6\u2026\u2026\u6709\u4e9b\u559c\u6b22\uff0c\u4f46\u4e3b\u8981\u662f\u2026\u2026\u5728\u8bd5\u56fe\u627e\u51fa\u95f4\u6b47\u6027\u7f51\u7edc\u95ee\u9898\u7684\u539f\u56e0\u65f6\u611f\u5230\u6cae\u4e27\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e00\u6b21\u662f\u4e3a\u4e86\u597d\u73a9\u548c\u6e38\u620f\uff01\u6211\u4eec\u5c06\u5728 Wireshark \u4e2d\u8f93\u5165 host www.information.dk \u4ee5\u4f7f\u5176\u6355\u83b7\u5230\u7ad9\u70b9\u7684\u6d41\u91cf\u3002\u5728\u6211\u4eec\u7684\u7ec8\u7aef\u4e2d\uff0c\u6211\u4eec\u8fd0\u884c\u4e0a\u9762\u7684 curl \u547d\u4ee4\u8ba9 Wireshark \u6709\u4e00\u4e9b\u4e1c\u897f\u8981\u6355\u83b7\u3002 Wireshark \u7136\u540e\u4f1a\u7ed9\u6211\u4eec\u4e00\u4e2a\u5f88\u597d\u7684 GUI \u6765\u5e2e\u52a9\u6211\u4eec\u8ffd\u6355\u6211\u4eec\u6ca1\u6709\u8003\u8651\u7684\u5927\u7ea6\u534a\u79d2\u3002\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u4e3a\u4e86\u8ba9 Wireshark \u4e86\u89e3\u4f1a\u8bdd\u7684 TLS/SSL \u5185\u5bb9\uff0c\u5b83\u9700\u8981\u77e5\u9053\u4e0e\u670d\u52a1\u5668\u534f\u5546\u7684\u79d8\u5bc6\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u6307\u5357\uff0c\u4f46\u7b80\u800c\u8a00\u4e4b\uff0c\u60a8\u5c06 SSLKEYLOGFILE=log.log \u4f20\u9012\u7ed9 curl \u547d\u4ee4\uff0c\u7136\u540e\u5728 TLS \u914d\u7f6e\u4e2d\u7684 Wireshark \u4e2d\u6307\u5411\u8be5\u6587\u4ef6\u3002\u6211\u4eec\u770b\u5230\u4e86\u9884\u671f\u7684 TCP \u5f80\u8fd4\uff0c\u6765\u81ea\u5ba2\u6237\u7aef\u7684 SYN\uff0c\u7136\u540e\u6765\u81ea\u670d\u52a1\u5668\u7684 SYN+ACK\u3002\u5e03\u57c3\u8bfa\u3002\u4f46\u5728\u90a3\u4e4b\u540e\u5b83\u770b\u8d77\u6765\u5f88\u53ef\u7591\u3002\u6211\u4eec\u770b\u5230\u4e86 3 \u6b21 TLS/SSL \u5f80\u8fd4\uff0c\u800c\u4e0d\u662f\u4e0a\u9762\u56fe\u4e2d\u9884\u671f\u7684 2 \u6b21\uff01\u4e3a\u4e86\u786e\u4fdd\u6211\u6ca1\u6709\u8bef\u4f1a\uff0c\u6211\u518d\u6b21\u68c0\u67e5\u4e86 sirupsen.com\uff0c\u679c\u7136\uff0c\u5b83\u663e\u793a Wireshark \u4e2d\u7684\u4e24\u6b21\u5f80\u8fd4\u90fd\u7b26\u5408\u9884\u671f\uff1a\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u7814\u7a76\u4e0a\u9762\u4e3a\u4e39\u9ea6\u62a5\u7eb8\u5e26\u6ce8\u91ca\u7684 Wireshark \u8f6c\u50a8\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u95ee\u9898\u662f\uff0c\u65e0\u8bba\u51fa\u4e8e\u4f55\u79cd\u539f\u56e0\uff0c\u670d\u52a1\u5668\u5728\u4f20\u8f93\u8bc1\u4e66\uff08\u6570\u636e\u5305 9\uff09\u7684\u8fc7\u7a0b\u4e2d\u90fd\u5728\u7b49\u5f85 TCP \u786e\u8ba4\u3002\u4e3a\u4ec0\u4e48\u670d\u52a1\u5668\u5728\u4f20\u8f93\u7ea6 4398 \u5b57\u8282\u7684\u8bc1\u4e66\u540e\u7b49\u5f85\u6765\u81ea\u5ba2\u6237\u7aef\u7684 TCP ACK\uff1f\u4e3a\u4ec0\u4e48\u670d\u52a1\u5668\u4e0d\u4e00\u6b21\u53d1\u9001\u6574\u4e2a\u8bc1\u4e66\uff1f\u5728 TCP \u4e2d\uff0c\u670d\u52a1\u5668\u4f1a\u4ed4\u7ec6\u76d1\u63a7\u5b83\u5728\u4f20\u8f93\u4e2d\u7684\u6570\u636e\u5305/\u5b57\u8282\u6570\u3002\u901a\u5e38\uff0c\u6bcf\u4e2a\u6570\u636e\u5305\u662f\u5927\u7ea6 1460 \u5b57\u8282\u7684\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u3002\u670d\u52a1\u5668\u4e0d\u5fc5\u4e00\u6b21\u53d1\u9001\u5b83\u62e5\u6709\u7684\u6240\u6709\u6570\u636e\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u4e0d\u77e5\u9053\u7ba1\u9053\u5bf9\u5ba2\u6237\u7aef\u7684\u201c\u80d6\u201d\u7a0b\u5ea6\u3002\u5982\u679c\u5ba2\u6237\u7aef\u53ea\u80fd\u63a5\u6536 64 kbit/scurrent\uff0c\u90a3\u4e48\u53d1\u9001\u4f8b\u5982 100 \u4e2a\u6570\u636e\u5305\u53ef\u80fd\u4f1a\u5b8c\u5168\u963b\u585e\u7f51\u7edc\u3002\u7f51\u7edc\u5f88\u53ef\u80fd\u4f1a\u4e22\u5f03\u4e00\u4e9b\u968f\u673a\u6570\u636e\u5305\uff0c\u4e0e\u4ee5\u66f4\u53ef\u6301\u7eed\u7684\u901f\u5ea6\u4e3a\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\u5305\u76f8\u6bd4\uff0c\u8fd9\u4e9b\u6570\u636e\u5305\u7684\u8865\u507f\u901f\u5ea6\u751a\u81f3\u66f4\u6162\u3002\nTCP \u534f\u8bae\u7684\u4e00\u4e2a\u4e3b\u8981\u90e8\u5206\u662f\u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\u5c1d\u8bd5\u53d1\u9001\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u636e\u7684\u5e73\u8861\u884c\u4e3a\uff0c\u540c\u65f6\u786e\u4fdd\u670d\u52a1\u5668\u4e0d\u4f1a\u4f7f\u5230\u5ba2\u6237\u7aef\u7684\u8def\u5f84\u8fc7\u5ea6\u9971\u548c\u5e76\u4e22\u5931\u6570\u636e\u5305\u3002\u4e22\u5305\u5bf9 TCP \u4e2d\u7684\u5e26\u5bbd\u975e\u5e38\u4e0d\u5229\u3002\u670d\u52a1\u5668\u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\u53ea\u4fdd\u7559\u4e00\u5b9a\u6570\u91cf\u7684\u6570\u636e\u5305\u3002 TCP \u672f\u8bed\u4e2d\u7684\u201c\u4f20\u8f93\u4e2d\u201d\u610f\u5473\u7740\u201c\u672a\u786e\u8ba4\u201d\u7684\u6570\u636e\u5305\uff0c\u5373\u670d\u52a1\u5668\u5df2\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u4f46\u5ba2\u6237\u7aef\u5c1a\u672a\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u786e\u8ba4\u7684\u6570\u636e\u5305\u5b83\u6536\u5230\u7684\u670d\u52a1\u5668\u3002\u901a\u5e38\u5bf9\u4e8e\u6bcf\u4e2a\u6210\u529f\u786e\u8ba4\u7684\u6570\u636e\u5305\uff0c\u670d\u52a1\u5668\u7684 TCP \u5b9e\u73b0\u5c06\u51b3\u5b9a\u5c06\u5141\u8bb8\u7684\u4f20\u8f93\u4e2d\u6570\u636e\u5305\u7684\u6570\u91cf\u589e\u52a0 1\u3002\u60a8\u53ef\u80fd\u542c\u8bf4\u8fc7\u8fd9\u79cd\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u79f0\u4e3a\u201cTCP \u6162\u542f\u52a8\u201d\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6570\u636e\u5305\u5df2\u88ab\u4e22\u5f03\uff0c\u5219\u670d\u52a1\u5668\u5c06\u51b3\u5b9a\u4f20\u8f93\u4e2d\u7684\u5b57\u8282\u6570\u7565\u5c11\u3002\u5728 TCP \u8fde\u63a5\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\uff0c\u8fd9\u79cd\u821e\u8e48\u5c06\u4e0d\u77e5\u75b2\u5026\u5730\u8fdb\u884c\u3002\u5728 TCP \u672f\u8bed\u4e2d\uff0c\u6211\u4eec\u6240\u8bf4\u7684\u201c\u98de\u884c\u4e2d\u201d\u88ab\u79f0\u4e3a\u201c\u62e5\u585e\u7a97\u53e3\u201d\uff08\u6216\u7b80\u79f0 cwnd\uff09\u3002\u901a\u5e38\u5728\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\u4e22\u5931\u540e\uff0cTCP \u5b9e\u73b0\u4ece\u7b80\u5355\u7684 TCP \u6162\u542f\u52a8\u7b97\u6cd5\u5207\u6362\u5230\u66f4\u590d\u6742\u7684\u201c\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u201d\uff0c\u5176\u4e2d\u6709\u51e0\u5341\u4e2a\u3002\u4ed6\u4eec\u7684\u5de5\u4f5c\u662f\uff1a\u6839\u636e\u6211\u4eec\u5bf9\u7f51\u7edc\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u5e94\u8be5\u6709\u591a\u5c11\u6d41\u91cf\u624d\u80fd\u6700\u5927\u5316\u5e26\u5bbd\uff1f\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u56de\u8fc7\u5934\u6765\u7406\u89e3\u4e3a\u4ec0\u4e48 TLS \u63e1\u624b\u9700\u8981 3 \u6b21\u5f80\u8fd4\u800c\u4e0d\u662f 2 \u6b21\u3002\u5728\u5ba2\u6237\u7aef\u5f00\u59cb\u4e0e TLS HELLO \u7684 TLS \u63e1\u624b\u540e\uff0c\u4e39\u9ea6\u670d\u52a1\u5668\u771f\u7684\u3001\u771f\u7684\u60f3\u8981\u4f20\u8f93\u8fd9\u4e2a ~6908 \u5b57\u8282\u7684\u8bc1\u4e66\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5c3d\u7ba1\u670d\u52a1\u5668\u7684\u62e5\u585e\u7a97\u53e3\uff08\u5141\u8bb8\u98de\u884c\u4e2d\u7684\u6570\u636e\u5305\uff09\u5f53\u65f6\u53ea\u662f\u4e0d\u591f\u5927\uff0c\u65e0\u6cd5\u5bb9\u7eb3\u6574\u4e2a\u8bc1\u4e66\uff01\u6362\u53e5\u8bdd\u8bf4\uff0c\u670d\u52a1\u5668\u7684 TCP \u5b9e\u73b0\u5df2\u7ecf\u51b3\u5b9a\u5b83\u4e0d\u76f8\u4fe1\u53ef\u601c\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u4e00\u6b21\u63a5\u6536\u90a3\u4e48\u591a\u7f8e\u5473\u7684\u5b57\u8282\u2014\u2014\u6240\u4ee5\u5b83\u53d1\u9001\u4e86\u4e00\u4e2a 4398 \u5b57\u8282\u7684\u8bc1\u4e66\u3002\u5f53\u7136\uff0c63% \u7684\u8bc1\u4e66\u4e0d\u8db3\u4ee5\u7ee7\u7eed\u8fdb\u884c TLS \u63e1\u624b\u2026\u2026\u6240\u4ee5\u5ba2\u6237\u7aef\u53f9\u4e86\u53e3\u6c14\uff0c\u5c06 TCP ACK \u53d1\u9001\u56de\u670d\u52a1\u5668\uff0c\u7136\u540e\u670d\u52a1\u5668\u53d1\u9001\u8bc1\u4e66\u5269\u4f59\u7684 2510\uff0c\u4ee5\u4fbf\u5ba2\u6237\u7aef\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u5176TLShandshake \u7684\u4e00\u90e8\u5206\u3002\u5f53\u7136\uff0c\u8fd9\u4e00\u5207\u770b\u8d77\u6765\u6709\u70b9\u50bb\u2026\u2026\u9996\u5148\uff0c\u4e3a\u4ec0\u4e48\u8bc1\u4e66\u662f6908\u5b57\u8282\uff1f\uff01\u4e3a\u4e86\u6bd4\u8f83\uff0c\u6211\u7684\u7f51\u7ad9\u662f 2635\u3002\u867d\u7136\u8fd9\u5bf9\u6211\u6765\u8bf4\u4e0d\u662f\u592a\u6709\u8da3\u3002\u66f4\u6709\u8da3\u7684\u662f\u4e3a\u4ec0\u4e48\u670d\u52a1\u5668\u53ea\u53d1\u90016908\u4e2a\u5b57\u8282\uff1f\u5bf9\u4e8e\u73b0\u4ee3 Web \u670d\u52a1\u5668\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u5f88\u5c11\uff01\u5728 TCP \u4e2d\uff0c\u5728\u6211\u4eec\u5bf9\u5ba2\u6237\u7aef\u4e00\u65e0\u6240\u77e5\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5168\u65b0\u8fde\u63a5\u4e0a\u53d1\u9001\u591a\u5c11\u6570\u636e\u5305\u79f0\u4e3a\u201c\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u201d\u3002\u5728\u914d\u7f6e\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd9\u79f0\u4e3a initcwnd\u3002\u5982\u679c\u60a8\u5728\u98de\u884c\u4e2d\u7684\u6570\u636e\u5305\u4e2d\u5f15\u7528\u4e86\u4e0a\u9762\u7684\u9ec4\u8272\u56fe\u8868\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u7b2c\u4e00\u6b21\u5f80\u8fd4\u65f6\u7684\u503c\u3002\n\u73b0\u5728\uff0cLinux \u670d\u52a1\u5668\u7684\u9ed8\u8ba4\u503c\u662f 10 \u4e2a\u6570\u636e\u5305\uff0c\u6216 10 * 1460 = 14600 \u5b57\u8282\uff0c\u5176\u4e2d 1460 \u5927\u81f4\u662f\u6bcf\u4e2a\u6570\u636e\u5305\u7684\u6570\u636e\u8d1f\u8f7d\u3002\u90a3\u5c06\u7b26\u5408\u4e39\u9ea6\u62a5\u7eb8\u7684\u602a\u7269\u8bc1\u4e66\u3002\u5f88\u660e\u663e\uff0c\u8fd9\u4e0d\u662f\u4ed6\u4eec\u7684 initcwd\uff0c\u4ece\u90a3\u65f6\u8d77\u670d\u52a1\u5668\u5c31\u4e0d\u4f1a\u8010\u5fc3\u7b49\u5f85\u6211\u7684 ACK\u3002\u901a\u8fc7\u4e00\u4e9b\u6316\u6398\uff0c\u4f3c\u4e4e\u5728 Linux 3.0.0 \u4e4b\u524d initcwnd \u662f 3\uff0c\u6216 ~ 3 * 1460 = 4380 \u5b57\u8282\uff01\u5927\u81f4\u5bf9\u9f50\uff0c\u6240\u4ee5\u4e39\u9ea6\u62a5\u7eb8\u7684 initcwnd \u4f3c\u4e4e\u662f 3\u3002\u6211\u4eec\u4e0d\u786e\u5b9a\u5b83\u662f Linux\uff0c\u4f46\u6211\u4eec\u77e5\u9053 initcwnd \u662f 3\u3002\u7531\u4e8e\u98de\u884c\u4e2d\u7684\u6570\u636e\u5305\u5448\u6307\u6570\u589e\u957f\uff0c\u56e0\u6b64 initcwnd \u7684\u91cd\u8981\u6027\u6211\u4eec\u53ef\u4ee5\u5728\u524d\u51e0\u6b21\u5b9d\u8d35\u7684\u5f80\u8fd4\u4e2d\u53d1\u9001\u5f88\u591a\u6570\u636e\uff1a\u6b63\u5982\u6211\u4eec\u5728\u4ecb\u7ecd\u4e2d\u770b\u5230\u7684\uff0c\u5728 CDN \u4e2d\u5c06\u503c\u4ece\u9ed8\u8ba4\u503c\u63d0\u9ad8\u5230\u4f8b\u5982 32 (~46kb) \u662f\u5f88\u5e38\u89c1\u7684\u3002\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u60a8\u53ef\u80fd\u6b63\u5728\u4f20\u8f93\u8bb8\u591a\u5146\u5b57\u8282\u7684\u56fe\u50cf\u3002\u7b49\u5f85 TCP \u6162\u542f\u52a8\u5230\u8fd9\u4e00\u70b9\u53ef\u80fd\u9700\u8981\u51e0\u6b21\u5f80\u8fd4\u3002\u53e6\u4e00\u4e2a\u5176\u4ed6\u539f\u56e0\uff0c\u8fd9\u4e5f\u662f HTTP2/HTTP3 \u671d\u7740\u901a\u8fc7\u76f8\u540c\u8fde\u63a5\u79fb\u52a8\u66f4\u591a\u6570\u636e\u7684\u65b9\u5411\u53d1\u5c55\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u6709\u4e00\u4e2a\u201c\u70ed\u201d\u7684 TCP \u4f1a\u8bdd\u3002 \u201c\u6e29\u6696\u201d\u610f\u5473\u7740\u4f20\u8f93\u4e2d\u7684\u62e5\u585e\u7a97\u53e3/\u5b57\u8282\u5df2\u7ecf\u4ece\u6700\u521d\u88ab\u670d\u52a1\u5668\u6177\u6168\u5730\u589e\u52a0\u4e86\u3002 TCP \u6162\u542f\u52a8\u7a97\u53e3\u4e5f\u662f\u5b58\u5728\u70b9 (POP) \u6709\u7528\u7684\u90e8\u5206\u539f\u56e0\u3002\u5982\u679c\u60a8\u8fde\u63a5\u5230\u8ddd\u79bb\u60a8\u7f51\u7ad9\u524d 10 \u6beb\u79d2\u7684 POP\uff0c\u8bf7\u4e0e POP \u534f\u5546 TLS\uff0c\u5e76\u4e14 POP \u5df2\u7ecf\u4e0e 100 \u6beb\u79d2\u4e4b\u5916\u7684\u540e\u7aef\u670d\u52a1\u5668\u5efa\u7acb\u4e86\u70ed\u8fde\u63a5\u2014\u2014\u8fd9\u4f1a\u663e\u7740\u63d0\u9ad8\u6027\u80fd\uff0c\u6ca1\u6709\u5176\u4ed6\u53d8\u5316\u3002\u4ece 4 * 100ms = 400ms \u5230 3 * 10ms + 100ms = 130ms\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4e3a\u4ec0\u4e48\u6211\u4eec\u6709 3 \u6b21 TLS \u5f80\u8fd4\u800c\u4e0d\u662f\u9884\u671f\u7684 2 \u6b21\uff1a\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u5f88\u5c0f\u3002\u62e5\u585e\u7a97\u53e3\uff08\u670d\u52a1\u5668\u5141\u8bb8\u4f20\u8f93\u7684\u5b57\u8282\u6570\uff09\u540c\u6837\u9002\u7528\u4e8e\u670d\u52a1\u5668\u53d1\u56de\u7ed9\u6211\u4eec\u7684 HTTP \u6709\u6548\u8d1f\u8f7d\u3002\u5982\u679c\u5b83\u4e0d\u9002\u5408\u62e5\u585e\u7a97\u53e3\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u591a\u6b21\u5f80\u8fd4\u6765\u63a5\u6536\u6240\u6709 HTML\u3002\u5728 Wireshark \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u62c9\u51fa\u4e00\u4e2a TCP \u89c6\u56fe\uff0c\u5b83\u53ef\u4ee5\u8ba9\u6211\u4eec\u4e86\u89e3\u5b8c\u6210\u8bf7\u6c42\u9700\u8981\u591a\u5c11\u6b21\u5f80\u8fd4\uff08sirupsen/initcwnd \u5c1d\u8bd5\u7528\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7b97\u6cd5\u4e3a\u4f60\u731c\u6d4b\uff09\uff1a\n\u6211\u4eec\u770b\u5230 TCP \u5f80\u8fd4\u30013 \u6b21 TLS \u5f80\u8fd4\uff0c\u7136\u540e\u662f 5-6 \u4e2a HTTP \u5f80\u8fd4\u4ee5\u83b7\u53d6 ~160kb \u9875\u9762\uff01\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5c0f\u70b9\u90fd\u8868\u793a\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u56e0\u6b64\u60a8\u4f1a\u6ce8\u610f\u5230\u62e5\u585e\u7a97\u53e3\uff08\u5141\u8bb8\u4f20\u8f93\u7684\u5b57\u8282\u6570\uff09\u5728\u6bcf\u6b21\u5f80\u8fd4\u65f6\u5927\u81f4\u52a0\u500d\u3002\u670d\u52a1\u5668\u4e3a\u6bcf\u6b21\u6210\u529f\u7684\u5f80\u8fd4\u589e\u52a0\u7a97\u53e3\u7684\u5927\u5c0f\u3002 \u201c\u6210\u529f\u7684\u5f80\u8fd4\u201d\u662f\u6307\u6ca1\u6709\u4e22\u5305\u7684\u5f80\u8fd4\uff0c\u5728\u4e00\u4e9b\u8f83\u65b0\u7684\u7b97\u6cd5\u4e2d\uff0c\u662f\u6307\u4e0d\u9700\u8981\u592a\u591a\u65f6\u95f4\u7684\u5f80\u8fd4\u3002\u901a\u5e38\uff0c\u670d\u52a1\u5668\u5c06\u7ee7\u7eed\u4e3a\u6bcf\u6b21\u6210\u529f\u7684\u5f80\u8fd4\u5c06\u6570\u636e\u5305\u6570\u91cf\u52a0\u500d\uff08\u6bcf\u4e2a\u7ea6 1460 \u5b57\u8282\uff09\uff0c\u76f4\u5230\u53d1\u751f\u4e0d\u6210\u529f\u7684\u5f80\u8fd4\uff08\u6162\u901f\u6216\u4e22\u5931\u6570\u636e\u5305\uff09\uff0c\u6216\u8005\u4f20\u8f93\u4e2d\u7684\u5b57\u8282\u5c06\u8d85\u8fc7\u5ba2\u6237\u7aef\u7684\u63a5\u6536\u7a97\u53e3\u3002\u5f53 TCP \u4f1a\u8bdd\u5f00\u59cb\u65f6\uff0c\u5ba2\u6237\u7aef\u5c06\u901a\u544a\u5b83\u5141\u8bb8\u4f20\u8f93\u7684\u5b57\u8282\u6570\u3002\u8fd9\u901a\u5e38\u6bd4\u670d\u52a1\u5668\u613f\u610f\u7acb\u5373\u53d1\u9001\u7684\u8981\u5927\u5f97\u591a\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u521d\u59cb SYN \u5305\u4e2d\u63d0\u53d6\u5b83\uff0c\u5e76\u770b\u5230\u5b83\u5927\u7ea6\u4e3a 65kb\uff1a\u5982\u679c\u4f1a\u8bdd\u66f4\u957f\u5e76\u4e14\u6211\u4eec\u5c06\u5176\u63a8\u5411\u8be5\u7a97\u53e3\uff0c\u5ba2\u6237\u7aef\u5c06\u53d1\u9001\u4e00\u4e2a TCP \u5305\u66f4\u65b0\u63a5\u6536\u7684\u5927\u5c0f\u7a97\u6237\u3002\u6240\u4ee5\u6709\u4e24\u4e2a\u7a97\u53e3\u5728\u8d77\u4f5c\u7528\uff1a\u670d\u52a1\u5668\u7ba1\u7406\u4f20\u8f93\u4e2d\u7684\u6570\u636e\u5305\u6570\u91cf\uff1a\u62e5\u585e\u7a97\u53e3\u3002\u62e5\u585e\u7a97\u53e3\u7531\u670d\u52a1\u5668\u7684\u62e5\u585e\u7b97\u6cd5\u63a7\u5236\uff0c\u8be5\u7b97\u6cd5\u6839\u636e\u6210\u529f\u7684\u5f80\u8fd4\u6b21\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u4f46\u59cb\u7ec8\u4ee5\u5ba2\u6237\u7aef\u7684\u63a5\u6536\u7a97\u53e3\u4e3a\u4e0a\u9650\u3002\u6211\u4eec\u6765\u770b\u770b\u670d\u52a1\u5668\u6bcf\u6b21\u5f80\u8fd4\u4f20\u8f93\u7684\u6570\u636e\u5305\u6570\u91cf\uff1a HTTP \u5f80\u8fd4 5: 48 (~69kb\uff0c\u8fd9\u5728\u7406\u8bba\u4e0a\u4f1a\u8d85\u8fc7 64kb \u5f53\u524d\u63a5\u6536\u7a97\u53e3\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u6ca1\u6709\u653e\u5927\u5b83\u3002\u670d\u52a1\u5668\u53ea\u4f20\u8f93~ 64kb) \u62e5\u585e\u7a97\u53e3\u7684\u589e\u957f\u662f\u6559\u79d1\u4e66\u7684\u4e09\u6b21\u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a\u5b8c\u7f8e\u7684\u62df\u5408\uff1a\n\u6211\u4e0d\u5b8c\u5168\u786e\u5b9a\u4e3a\u4ec0\u4e48\u5b83\u9075\u5faa\u4e09\u6b21\u51fd\u6570\u3002\u6211\u9884\u8ba1 TCP \u6162\u542f\u52a8\u6bcf\u6b21\u5f80\u8fd4\u90fd\u4f1a\u52a0\u500d\u3002 \ud83e\udd37 \u636e\u6211\u6240\u77e5\uff0c\u5728\u73b0\u4ee3 TCP \u5b9e\u73b0\u4e2d\uff0c\u62e5\u585e\u7a97\u53e3\u6bcf\u6b21\u5f80\u8fd4\u90fd\u4f1a\u52a0\u500d\uff0c\u76f4\u5230\u6570\u636e\u5305\u4e22\u5931\uff08\u5c31\u50cf\u6211\u5206\u6790\u8fc7\u7684\u5927\u591a\u6570\u5176\u4ed6\u7ad9\u70b9\u4e00\u6837\uff0c\u4f8b\u5982\u4e0b\u9762\u5c4f\u5e55\u622a\u56fe\u4e2d\u7684\u4f1a\u8bdd\uff09\u3002\u5728\u90a3\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u8f6c\u5411\u4e09\u6b21\u589e\u957f\u3002\u8fd9\u53ef\u80fd\u540e\u6765\u6539\u53d8\u4e86\uff1f\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8e TCP \u5b9e\u73b0\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u5199\u4e86 sirupsen/initcwnd \u6765\u5410\u51fa windows \u7684\u5927\u5c0f\u7684\u90e8\u5206\u539f\u56e0\uff0c\u6240\u4ee5\u4f60\u4e0d\u5fc5\u505a\u4efb\u4f55\u6570\u5b66\u6216\u731c\u6d4b\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a Github \u5b58\u50a8\u5e93\uff08\u672a\u538b\u7f29\uff09\uff1a\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u89e3\u91ca\u6211\u4eec\u7684\u7b80\u5355\u5316\u4e4b\u95f4\u7684\u5dee\u5f02\u9910\u5dfe\u7eb8\u6570\u5b66\u6a21\u578b\u548c\u73b0\u5b9e\u3002\u6211\u4eec\u5047\u8bbe\u6709 2 \u6b21 TLS \u5f80\u8fd4\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709 3 \u6b21\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u7684\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u8f83\u4f4e\u3002\u6211\u4eec\u8fd8\u5047\u8bbe\u4e86 1 \u4e2a HTTProundtrip\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709 6 \u4e2a\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u7684\u62e5\u585e\u7a97\u53e3\u548c\u5ba2\u6237\u7aef\u7684\u63a5\u6536\u7a97\u53e3\u4e0d\u5141\u8bb8\u4e00\u6b21\u53d1\u9001\u6240\u6709\u5185\u5bb9\u3002\u8fd9\u4f7f\u6211\u4eec\u7684\u603b\u5f80\u8fd4\u6b21\u6570\u8fbe\u5230 1 + 3 + 6 = 10 \u6b21\u5f80\u8fd4\u3002\u6211\u4eec\u7684\u5f80\u8fd4\u65f6\u95f4\u4e3a 130 \u6beb\u79d2\uff0c\u8fd9\u4e0e\u6211\u4eec\u5728\u5e16\u5b50\u9876\u90e8\u89c2\u5bdf\u5230\u7684 1.3 \u79d2\u7684\u603b\u65f6\u95f4\u5b8c\u5168\u4e00\u81f4\uff01\u8fd9\u8868\u660e\u6211\u4eec\u65b0\u7684\u3001\u66f4\u65b0\u7684\u7cfb\u7edf\u5fc3\u667a\u6a21\u578b\u5f88\u597d\u5730\u53cd\u6620\u4e86\u73b0\u5b9e\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e00\u8d77\u5206\u6790\u4e86\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5206\u6790\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u5e76\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5bf9\u60a8\u7684\u7f51\u7ad9\u8fd0\u884c sirupsen/initcwnd \u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u5b83\u4f7f\u7528\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u6765\u731c\u6d4b\u7a97\u53e3\u53ca\u5176\u5927\u5c0f\u3002\u5b83\u4eec\u5e76\u4e0d\u603b\u662f\u6709\u6548\uff0c\u7279\u522b\u662f\u5982\u679c\u60a8\u7684\u8fde\u63a5\u901f\u5ea6\u8f83\u6162\u6216\u7f51\u7ad9\u5c06\u54cd\u5e94\u6d41\u5f0f\u4f20\u8f93\u56de\u5ba2\u6237\u7aef\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u53d1\u9001\u6240\u6709\u54cd\u5e94\u3002\u9700\u8981\u6ce8\u610f\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f Linux \u5185\u6838\uff08\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u5185\u6838\uff09\u901a\u8fc7\u8def\u7531\u7f13\u5b58\u4e0e\u5ba2\u6237\u7aef\u7f13\u5b58\u62e5\u585e\u7a97\u53e3\u5927\u5c0f\uff08\u9664\u5176\u4ed6\u5916\uff09\u3002\u8fd9\u5f88\u68d2\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u5f53\u5ba2\u6237\u7aef\u91cd\u65b0\u8fde\u63a5\u65f6\uff0c\u6211\u4eec\u4e0d\u5fc5\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u534f\u5546\u3002\u4f46\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u9488\u5bf9\u540c\u4e00\u4e2a\u7f51\u7ad9\u7684\u540e\u7eed\u8fd0\u884c\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u66f4\u5927\u7684 initcwnd\u3002\u6700\u4f4e\u7684youencounter\u5c06\u662f\u6b63\u786e\u7684\u3002\u8fd8\u8981\u6ce8\u610f\uff0c\u4e00\u4e2a\u7ad9\u70b9\u53ef\u80fd\u6709\u4e00\u4e2a\u961f\u5217\uff0c\u5176\u4e2d\u7684\u670d\u52a1\u5668\u5177\u6709\u4e0d\u540c\u7684 initcwnd \u503c\uff01\u5728\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 TCP \u7a97\u53e3\u7684\u5927\u5c0f\u3002 Github.com \u7684\u521d\u59cb\u7a97\u53e3\u662f 10 \u4e2a\u6570\u636e\u5305\uff0c\u7136\u540e\u6bcf\u6b21\u5f80\u8fd4\u589e\u52a0\u4e00\u500d\u3002\u6700\u540e\u4e00\u4e2a\u7a97\u53e3\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 80 \u4e2a\u6570\u636e\u5305\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u6ca1\u6709\u8db3\u591f\u7684\u5b57\u8282\u6570\u3002\u6709\u4e86\u8fd9\u4e2a\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u51b3\u5b9a\u5c06 initcwnd \u66f4\u6539\u4e3a\u66f4\u9ad8\u7684\u503c\uff0c\u4ee5\u5c1d\u8bd5\u5728\u66f4\u5c11\u7684\u5f80\u8fd4\u4e2d\u5c06\u5176\u53d1\u56de\u3002\u4f46\u662f\uff0c\u8fd9\u5bf9\u4e8e\u8fde\u63a5\u901f\u5ea6\u8f83\u6162\u7684\u5ba2\u6237\u7aef\u53ef\u80fd\u6709\u7f3a\u70b9\uff0c\u5e94\u8c28\u614e\u64cd\u4f5c\u3002 CDN \u5728 30 \u5e74\u4ee3\u5c31\u5177\u6709\u4ef7\u503c\uff0c\u8fd9\u786e\u5b9e\u8868\u660e\u4e86\u4e00\u4e9b\u627f\u8bfa\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u6ca1\u6709\u8db3\u591f\u7684\u6d41\u91cf\u6765\u4eb2\u81ea\u67e5\u770b\u6765\u7814\u7a76\u8fd9\u4e00\u70b9\uff0c\u5c31\u50cf\u8c37\u6b4c\u652f\u6301\u5c06\u9ed8\u8ba4\u503c\u4ece 3 \u66f4\u6539\u4e3a 10 \u65f6\u6240\u505a\u7684\u90a3\u6837\u3002\u8be5\u6587\u6863\u8fd8\u66f4\u8be6\u7ec6\u5730\u89e3\u91ca\u4e86\u6f5c\u5728\u7684\u7f3a\u70b9\u3002\n\u6700\u5b9e\u7528\u7684\u65e5\u5e38\u5916\u5356\u53ef\u80fd\u662f\u4f8b\u5982 base64 \u5185\u8054\u56fe\u50cf\u548c CSS\uff0c\u5982\u679c\u5b83\u4f7f\u60a8\u7684\u7ad9\u70b9\u8d85\u8fc7\u62e5\u585e\u7a97\u53e3\u9608\u503c\uff0c\u5219\u5b83\u53ef\u80fd\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u7f3a\u70b9\u3002\u60a8\u53ef\u4ee5\u5728 Linux \u4e0a\u4f7f\u7528 ip(1) \u547d\u4ee4\u66f4\u6539 initcwnd\uff0c\u4ece\u8fd9\u91cc\u5230\u9ed8\u8ba4\u7684 10 \u5230 32\uff1a simon@netherlands:~$ ip route showdefault via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric 10010.164.0. dhcp scope link src 10.164.0.2 metric 100simon@netherlands:~$ sudo ip route change default via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric 100 initcwnd 32 initrwnd 32 initrwnd 32 initrwnd.1032 initrwnd@10332 initrwnd@1000.10 dev ens4 proto dhcp src ens4 proto dhcp src 10.164.0.2 metric 100 initcwnd 32 initrwnd 3210.164.0.1 dev ens4 proto dhcp scope link src 10.164.0.2 metric 100 \u53e6\u4e00\u4e2a\u91cd\u8981\u7684 TCP \u8bbe\u7f6e\uff0c\u5b83\u503c\u5f97\u5728 .tcpslow \u4e4b\u540e\u5f00\u59cb\u8c03\u6574 TCP _ cpslow \u662f .tcpslow \u7684\u5f00\u59cb\u8fd9\u662f\u4e00\u4e2a\u597d\u540d\u5b57\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u8bbe\u7f6e\u4e3a 1 \u65f6\uff0c\u5b83\u4f1a\u5728\u51e0\u79d2\u949f\u6ca1\u6709\u6d3b\u52a8\uff08\u5f53\u60a8\u5728\u7f51\u7ad9\u4e0a\u9605\u8bfb\u65f6\uff09\u540e\u91cd\u65b0\u534f\u5546\u62e5\u585e\u7a97\u53e3\u3002\u60a8\u53ef\u80fd\u5e0c\u671b\u5728 /proc/sys/net/ipv4/tcp_slow_start_after_idle \u4e2d\u5c06\u5176\u8bbe\u7f6e\u4e3a 0\uff0c\u4ee5\u4fbf\u5b83\u8bb0\u4f4f\u4e0b\u4e00\u4e2a\u9875\u9762\u52a0\u8f7d\u7684\u62e5\u585e\u7a97\u53e3\u3002", "note_en": "This is an edition of the  Napkin Math newsletter,a newsletter about using napkin math and first-principle thinking toestimate the performance of systems.You can  subscribe through email.\n Did you know that if your site\u2019s under ~12kb the first page will loadsignificantly faster? Servers only send a few packets (typically 10)in the initial round-trip while TCP is warming up (referred to as TCP slowstart). After sending the first set of packets, it needs to wait forthe client to acknowledge it received all those packets.\n Quick illustration of transferring ~15kb with an initial TCP slow start window(also referred to as initial congestion window or  initcwnd) of 10 versus 30:\n  The larger the initial window, the more we can transfer in the first roundtrip,the faster your site is on the initial page load. For a large roundtrip time(e.g. across an ocean), this will start to matter a lot. Here is the approximatesize of the initial window for a number of common hosting providers:\n  To generate this, I wrote a script that you can use   sirupsen/initcwnd toanalyze your own site. Based on the report, you can attempt to tune your pagesize, or tune your server\u2019s initial slow start window size ( initcwnd) (seebottom of article). Read on, and we\u2019ll go into far more detail!\n   Dear Napkin Mathers, it\u2019s been too long. Since last, I\u2019ve left Shopify after 8amazing years. Ride of a lifetime. For the time being, I\u2019m passing the time withstandup paddleboarding (did a 125K 3-day trip the week after I left),recreational programming (of which napkin math surely is a part), and learningsome non-computer things.\n In this issue, we\u2019ll dig into the details of exactly what happens on the wirewhen we do the initial page load of a website over HTTP. As I\u2019ve already hintedat, we\u2019ll show that there\u2019s a magical byte threshold to be aware of whenoptimizing for short-lived, bursty TCP transfers. If you\u2019re under this threshold,or increase it, it\u2019ll potentially save the client from several roundtrips.Especially for sites with a single location that are often requested from faraway (i.e. high roundtrip times), e.g. US -&gt; Australia, this can make a  hugedifference. That\u2019s likely the situation you\u2019re in if you\u2019re operating aSaaS-style service. While we\u2019ll focus on HTTP over the public internet, TCP slowstart can also matter to RPC inside of your data-centre, and especially acrossthem.\n As always, we\u2019ll start by laying out our naive mental model about how we  thinkloading a site works at layer 4. Then we\u2019ll do the napkin math on expectedperformance, and confront our fragile, naive model with reality to see if itlines up.\n So what do we think happens at the TCP-level when we request a site? Forsimplicity, we will exclude compression, DOM rendering, Javascript, etc., andlimit ourselves exclusively to downloading the HTML. In other words:  curl --http1.1 https://sirupsen.com &gt; /dev/null (note that   sirupsen/initcwnduses  --compressed with  curl to reflect reality).\n    To make things a little more interesting, we\u2019ll choose a site that isgeographically further from me that isn\u2019t overly optimized:  information.dk, aDanish newspaper. Through some DNS lookups from servers in different geographiesand by using  a looking glass, I can determine that all their HTML trafficis always routed to a datacenter in Copenhagen. These days, many sites arerouted through e.g. Cloudflare POPs which will have a nearby data-centre, tosimplify our analysis, we want to make sure that\u2019s not the case.\n I\u2019m currently sitting in South-Western Quebec on an LTE connection. I candetermine  through  traceroute(1) that my traffic is travelling toCopenhagen through the path Montreal -&gt; New York -&gt; Amsterdam -&gt; Copenhagen. Round-trip time is ~140ms.\n  If we add up the number of round-trips from our napkin model above (excludingDNS), we\u2019d expect loading the Danish site would take us  4 * 140ms = 560ms.Since I\u2019m on an LTE connection where I\u2019m not getting much above 15 mbit/s, wehave to factor in that it takes another  ~100ms to transfer the data,in addition to the 4 round-trips. So with our napkin math, we\u2019re expecting thatwe should be able to download the 160kb of HTML from a server in Copenhagenwithin a ballpark of  ~660ms.\n Reality, however, has other plans. When I run time  curl --http1.1 https://www.information.dk it takes 1.3s! Normally we say that if the napkinmath is within ~10x, the napkin math is likely in line with reality, butthat\u2019s typically when we deal with nano and microseconds. Not off by~ 640ms!\n So what\u2019s going on here? When there\u2019s a discrepancy between the napkin math andreality, it\u2019s because either (1) the napkin model of the world is incorrect, or(2) there\u2019s room for optimization in the system. In this case, it\u2019s a bit ofboth. Let\u2019s hunt down those 640ms. \ud83d\udc40\n To do that, we have to analyze the raw network traffic with Wireshark. Wiresharkbrings back many memories.. some fond, but mostly\u2026 frustration trying tofigure out causes of intermittent network problems. In this case, for once it\u2019sfor fun and games! We\u2019ll type  host www.information.dk into Wireshark to makeit capture traffic to the site. In our terminal we run the  curl command abovefor Wireshark to have something to capture.\n Wireshark will then give us a nice GUI to help us hunt down the roughly half asecond we haven\u2019t accounted for. One thing to note is that in order to getWireshark to understand the TLS/SSL contents of the session it needs to know thesecret negotiated with the server. There\u2019s a complete guide  here, butin short you pass  SSLKEYLOGFILE=log.log to your  curl command and then pointto that file in Wireshark in the TLS configuration.\n   We see the TCP roundtrip as expected,  SYN from the client, then  SYN+ACK fromthe server. Bueno. But after that it looks fishy. We\u2019re seeing  3 round-tripsfor TLS/SSL instead of the expected 2 from our drawing above!\n  To make sure I wasn\u2019t misunderstanding something, I double-checked with sirupsen.com, and sure enough, it\u2019s showing the two roundtrips in Wireshark asanticipated:\n  If we carefully study the annotated Wireshark dump above for the Danishnewspaper, we can see that the problem is that for whatever reason the server iswaiting for a TCP ack in the middle of transmitting the certificate (packet 9).\n   Why is the server waiting for a TCP ACK from the client after transmitting ~4398bytes of the certificate? Why doesn\u2019t the server just send the whole certificateat once?\n  In TCP, the server carefully monitors how many packets/bytes it has in flight.Typically, each packet is ~1460 bytes of application data. The server doesn\u2019tnecessarily send  all the data it has at once, because the server doesn\u2019t knowhow \u201cfat\u201d the pipes are to the client. If the client can only receive 64 kbit/scurrently, then sending e.g. 100 packets could completely clog the network. Thenetwork most likely will drop some random packets which would be even slower tocompensate from than sending the packets at a more sustainable pace for theclient.\n A  major part of the TCP protocol is the balancing act of trying to send asmuch data as possible at any given time, while ensuring the server doesn\u2019tover-saturate the path to the client and lose packets. Losing packets is verybad for bandwidth in TCP.\n The server only keeps a certain amount of packets in flight at any given time.\u201cIn flight\u201d in TCP terms means \u201cunacknowledged\u201d packets, i.e. packets of datathe server has sent to the client that the client hasn\u2019t yet sent anacknowledgement to the server that it has received. Typically for everysuccessfully acknowledged packet the server\u2019s TCP implementation will decide toincrease the number of allowed in-flight packets by 1. You may have heard thissimple algorithm referred to as \u201cTCP slow start.\u201d On the flip-side, if a packethas been dropped then the server will decide to have slightly less bytes inflight. Throughout the existence of the TCP connection\u2019s lifetime this dancewill be tirelessly performed. In TCP terms what we\u2019ve called \u201cin-flight\u201d isreferred to as the \u201ccongestion window\u201d (or  cwnd in short-form).\n  Typically after the first packet has been lost the TCP implementation switchesfrom the simple TCP slow start algorithm to a more complicated  \u201cCongestionControl Algorithm\u201d of which there are dozens. Their job is: Based on whatwe\u2019ve observed about the network, how much should we have in flight to maximizebandwidth?\n Now we can go back and understand why the TLS handshake is taking 3 roundtripsinstead of 2. After the client\u2019s starts the TLS handshake with  TLS HELLO, theDanish server really, really wants to transfer this ~6908 byte certificate.Unfortunately though the server\u2019s congestion window (packets in flight allowed) atthe time just isn\u2019t large enough to accommodate the whole certificate!\n Put another way, the server\u2019s TCP implementation has decided it\u2019s  notconfident the poor client can receive that many tasty bytes all at once yet \u2013so it sends a petty 4398 bytes of the certificate. Of course, 63% of acertificate isn\u2019t enough to move on with the TLS handshake\u2026 so the clientsighs, sends a TCP ACK back to the server, which then sends the meager 2510 leftof the certificate so the client can move on to perform its part of the TLShandshake.\n Of course, this all seems a little silly\u2026 first of all, why is the certificate6908 bytes?! For comparison, it\u2019s 2635 for my site. Although that\u2019s not toointeresting to me. What\u2019s more interesting is why is the server only sending6908 bytes? That seems scanty for a modern web server!\n In TCP how many packets we can send on a brand new connection before we know anything about the client is called the \u201cinitial congestion window.\u201d In aconfiguration context, this is called  initcwnd. If you reference the yellowgraph above with the packets in flight, that\u2019s the value at the first roundtrip.\n These days, the default for a Linux server is 10 packets, or  10 * 1460 = 14600 bytes, where 1460 is roughly the data payload of each packet. That would\u2019ve fitthat monster certificate of the Danish newspaper. Clearly that\u2019s not their initcwd since then the server wouldn\u2019t have patiently waited for my ACK.Through some digging it appears that prior to  Linux 3.0.0  initcwnd was3, or ~ 3 * 1460 = 4380 bytes! That approximately lines up, so it seemsthat the Danish newspaper\u2019s  initcwnd is 3. We don\u2019t know for sure it\u2019s Linux,but we know the  initcwnd is 3.\n Because of the exponential growth of the packets in flight,  initcwnd mattersquite a bit for how much data we can send in those first few preciousroundtrips:\n  As we saw in the intro, it\u2019s common among CDNs to raise the values from thedefault to e.g. 32 (~46kb). This makes sense, as you might be transmittingimages of many megabytes. Waiting for TCP slow start to get to this point cantake a few roundtrips.\n Another other reasons, this is also why HTTP2/HTTP3 moved in the direction ofmoving more data through the same connection as it has an already \u201cwarm\u201d TCPsession. \u201cWarm\u201d meaning that the congestion window / bytes in flight has alreadybeen increased generously from the initial by the server.\n The TCP slow start window is also part of why points of presence (POPs) areuseful. If you connect to a POP in front of your website that\u2019s 10msaway, negotiate TLS with the POP, and the POP already has a warm connectionwith the backend server 100ms away \u2013 this improves performance dramatically,with no other changes. From  4 * 100ms = 400ms to  3 * 10ms + 100ms = 130ms.\n  Now we\u2019ve gotten to the bottom of why we have 3 TLS roundtrips rather than theexpected 2: the initial congestion window is small. The congestion window(allowed bytes in flight by the server) applies equally to the HTTP payloadthat the server sends back to us. If it doesn\u2019t fit inside the congestionwindow, then we need multiple round-trips to receive all the HTML.\n In Wireshark, we can pull up a TCP view that\u2019ll give us an idea of how manyroundtrips was required to complete the request (  sirupsen/initcwnd tries toguess this for you with an embarrassingly simple algorithm):\n  We see the TCP roundtrip, 3 TLS roundtrips, and then 5-6 HTTP roundtrips to getthe ~160kb page! Each little dot in the picture shows a packet, so you\u2019ll noticethat the congestion window (allowed bytes in flight) is roughly doubling everyroundtrip. The server is increasing the size of the window for every successfulroundtrip. A \u2018successful roundtrip\u2019 means a roundtrip that didn\u2019t drop packets, andin some  newer algorithms, a roundtrip that didn\u2019t take too much time.\n Typically, the server will continue to double the number of packets (~1460 bytes each) for each successful roundtrip until either an unsuccessful roundtrip happens (slow or dropped packets),  or the bytes in flight would exceed the  client\u2019s receive window.\n When a TCP session starts, the client will advertise how many bytes  it allows in flight. This typically is much larger than the server is wiling to send off the bat. We can pull this up in the initial  SYN package from the client and see that it\u2019s ~65kb:\n  If the session had been much longer and we pushed up against that window, the client would\u2019ve sent a TCP package updating the size of the receive window. So there\u2019s two windows at play: the server manages the number of packets in flight: the  congestion window. The congestion window is controlled by the server\u2019s  congestion algorithm which is adjusted based on the number of successful roundtrips, but always capped by the client\u2019s  receive window.\n Let\u2019s look at the amount of packets transmitted by the server in each roundtrip:\n HTTP roundtrip 5: 48 (~69kb, this in theory would have exceeded the 64kb currentreceive window since the client didn\u2019t enlarge it for some reason. The serveronly transmitted ~64kb)\n The growth of the congestion window is a  textbook cubic function, it has a perfect fit:\n  I\u2019m not entirely sure why it follows a cubic function. I expected TCP slow startto just double every roundtrip. \ud83e\udd37 As far as I can gather, on modern TCPimplementation the congestion window is doubled every roundtrip until a packetis lost (as is the case for most other sites I\u2019ve analyzed, e.g. the session inthe screenshot below). After  that we might move to a cubic growth. Thismight\u2019ve changed later on? It\u2019s completely up to the TCP implementation.\n This is part of why I wrote  sirupsen/initcwnd to spit out the size of thewindows, so you don\u2019t have to do any math or guesswork, here for a Github repo(uncompressed):\n   So now we can explain the discrepancy between our simplistic napkin math modeland reality. We assumed 2 TLS roundtrips, but in fact there was 3, because ofthe low initial congestion window by the server. We also assumed 1 HTTProundtrip, but in fact there was 6, because the server\u2019s congestion window andclient\u2019s receive window didn\u2019t allow sending everything at once. This brings ourtotal roundtrips to  1 + 3 + 6 = 10 roundtrips. With our roundtrip time at130ms, this lines up perfectly with the 1.3s total time we observed at the topof the post! This suggests our new, updated mental model of the system reflectsreality well.\n  Now that we\u2019ve analyzed this website together, you can use this to analyze yourown website and optimize it. You can do this by running  sirupsen/initcwnd against your website. It uses some very simpleheuristics to guess the windows and their size. They don\u2019t work always,especially not if you\u2019re on a slow connection or the website streams theresponse back to the client, rather than sending it all at once.\n Another thing to be aware of is that the Linux kernel (and likely other kernels)caches the congestion window size (among other things) with clients via theroute cache. This is great, because it means that we don\u2019t have to renegotiateit from scratch when a client reconnects. But it might mean that subsequent runsagainst the same website will give you a far larger  initcwnd. The lowest youencounter will be the right one. Note also that a site might have a fleet withservers that have different  initcwnd values!\n   Here we can see the size of the TCP windows. The initial window was 10 packetsfor Github.com, and then doubles every roundtrip. The last window isn\u2019t a full80 packets, because there wasn\u2019t enough bytes left from the server.\n With this result, we could decide to change the  initcwnd to a higher value totry to send it back in fewer roundtrips. This might, however, have drawbacksfor clients on slower connections and should be done with care. It does showsome promise that CDNs have values in the 30s. Unfortunately I don\u2019t have accessto enough traffic to see for myself to study this, as  Google did whenthey championed the change from a default of 3 to 10. That document alsoexplains potential drawbacks in more detail.\n The most practical day-to-day takeaway might be that e.g. base64 inlining imagesand CSS may come with serious drawbacks if it throws your site over a congestionwindow threshold.\n You can change  initcwnd with the  ip(1) command on Linux, from here to thedefault 10 to 32:\n simon@netherlands:~$ ip route showdefault via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric  10010.164.0.1 dev ens4 proto dhcp scope link src 10.164.0.2 metric  100simon@netherlands:~$ sudo ip route change default via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric  100 initcwnd  32 initrwnd  32simon@netherlands:~$ ip route showdefault via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric  100 initcwnd  32 initrwnd  3210.164.0.1 dev ens4 proto dhcp scope link src 10.164.0.2 metric  100\n Another key TCP setting it\u2019s worth tuning for TCP is tcp_slow_start_after_idle. It\u2019s a good name: by default when set to 1, it\u2019llrenegotiate the congestion window after a few seconds of no activity (while youread on the site). You probably want to set this to 0 in /proc/sys/net/ipv4/tcp_slow_start_after_idle so it remembers the congestionwindow for the next page load.", "posttime": "2021-08-08 17:50:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,\u521d\u59cb,http,\u670d\u52a1\u5668", "title": "\u901a\u8fc7\u9002\u5e94\u521d\u59cb TCP \u6162\u542f\u52a8\u7a97\u53e3\u6765\u63d0\u9ad8 HTTP \u6027\u80fd", "title_en": "Increase HTTP performance by fitting in the initial TCP slow start window", "transed": 1, "url": "https://sirupsen.com/napkin/problem-15/", "via": "", "real_tags": ["\u6027\u80fd", "\u521d\u59cb", "http", "\u670d\u52a1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "76417e719282d12a0889e1761958421c.png", "infoid": 1072095, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Epic \u5bf9\u8c37\u6b4c\u7684\u53cd\u5784\u65ad\u6cd5\u5ead\u6848\u4ef6\u4e2d\u65b0\u5f00\u5c01\u7684\u6587\u4ef6\u79f0\uff0c\u8fd9\u5bb6\u79d1\u6280\u5de8\u5934\u8003\u8651\u8d2d\u4e70\u201c\u90e8\u5206\u6216\u5168\u90e8\u201dEpic Games\uff0c\u51fa\u4e8e\u5bf9 Fortnite \u5f00\u53d1\u5546\u6709\u610f\u56de\u907f Google Play \u5e94\u7528\u5546\u5e97\u7684\u62c5\u5fe7\u3002\u8be5\u6587\u4ef6\u4e0d\u5305\u542b\u8003\u8651\u6b64\u7c7b\u8ba1\u5212\u7684\u4efb\u4f55\u5185\u90e8\u6d88\u606f\uff0c\u4f46\u6b63\u5982 The Verge \u6628\u5929\u62a5\u9053\u7684\u90a3\u6837\uff0c\u4e4b\u524d\u7f16\u8f91\u8fc7\u7684\u6bb5\u843d\u73b0\u5728\u5305\u542b\u5728\u6cd5\u5ead\u6587\u4ef6\u4e2d\uff1a\u201c\u4f8b\u5982\uff0c\u8c37\u6b4c\u751a\u81f3\u5206\u4eab\u4e86\u5b83\u7684\u4e0e\u5546\u4e1a\u4f19\u4f34\u7684\u5784\u65ad\u5229\u6da6\uff0c\u4ee5\u786e\u4fdd\u4ed6\u4eec\u540c\u610f\u6392\u9664\u7ade\u4e89\uff0c\u5df2\u7ecf\u5f00\u53d1\u4e86\u4e00\u7cfb\u5217\u5185\u90e8\u9879\u76ee\u6765\u89e3\u51b3\u5b83\u4ece Epic \u548c\u5176\u4ed6\u516c\u53f8\u4e3a\u6d88\u8d39\u8005\u548c\u5f00\u53d1\u5546\u63d0\u4f9b\u6709\u7ade\u4e89\u529b\u7684\u66ff\u4ee3\u54c1\u7684\u52aa\u529b\u4e2d\u611f\u53d7\u5230\u7684\u201c\u4f20\u67d3\u201d\uff0c\u751a\u81f3\u8003\u8651\u8d2d\u4e70\u4e00\u4e9b\u6216\u6574\u4e2a Epic \u6765\u538b\u5236\u8fd9\u79cd\u5a01\u80c1\u3002\u201d\u5728\u56de\u5e94 Twitter \u4e0a\u7684 Verge \u6587\u7ae0\u65f6\uff0cEpic Games \u9996\u5e2d\u6267\u884c\u5b98\u8868\u793a\uff0c\u4ed6\u4eec\u73b0\u5728\u624d\u53d1\u73b0\u201c\u5173\u4e8e\u8c37\u6b4c\u7684\u8003\u8651\u201d\uff1a\u5f53\u65f6\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u800c\u4e14\u7531\u4e8e\u6cd5\u9662\u7684\u4fdd\u62a4\u4ee4\uff0c\u6211\u4eec\u73b0\u5728\u624d\u53d1\u73b0\u8c37\u6b4c\u7684\u8003\u8651\u8d2d\u4e70 Epic \u4ee5\u7ec8\u6b62\u6211\u4eec\u4e0e Google Play \u7ade\u4e89\u7684\u52aa\u529b\u3002 https://t.co/HSS1edUrQm \u2014 Tim Sweeney (@TimSweeneyEpic) 2021 \u5e74 8 \u6708 6 \u65e5\u8981\u67e5\u770b\u6b64\u5185\u5bb9\uff0c\u8bf7\u542f\u7528\u5b9a\u4f4d cookie\u3002\u5728\u6cd5\u5ead\u6587\u4ef6\u7684\u5176\u4ed6\u5730\u65b9\uff0cEpic \u8fd8\u58f0\u79f0\u8c37\u6b4c\u5411\u4ed6\u4eec\u63d0\u4f9b\u4e86\u4e00\u9879\u201c\u7279\u522b\u4f18\u60e0\u201d\uff0c\u8ba9\u4ed6\u4eec\u5728 Google Play \u5546\u5e97\u63a8\u51fa Fortnite\uff0c\u4f46\u906d\u5230\u62d2\u7edd\uff0c\u5e76\u79f0\u5728\u5546\u5e97\u5916\u7684 Android \u624b\u673a\u4e0a\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\u7684\u4f53\u9a8c\u201c\u5766\u7387\u5730\u8bf4\u662f\u7cdf\u7cd5\u900f\u4e86\u201d .\u201d\n\u8be5\u6587\u4ef6\u7684\u5927\u90e8\u5206\u58f0\u660e\u548c\u63d0\u4f9b\u7684\u8bc1\u636e\u4ecd\u7136\u88ab\u7f16\u8f91\uff0c\u4f46 Epic \u8fdb\u4e00\u6b65\u58f0\u79f0\uff0c\u5728\u4ed6\u4eec\u4e0e\u4e09\u661f\u7684 Android \u5e94\u7528\u7a0b\u5e8f\u5546\u5e97\u7b7e\u7f72 Fortnite \u7684\u5206\u9500\u534f\u8bae\u540e\uff0c\u8c37\u6b4c\u201c\u91c7\u53d6\u884c\u52a8\u786e\u4fdd OEM \u4e0d\u4f1a\u4e0e\u50cf Epic \u8fd9\u6837\u7684\u5206\u9500\u5546\u5efa\u7acb\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u201d\u3002 Epic \u5bf9\u82f9\u679c\u5e94\u7528\u5546\u5e97\u9650\u5236\u7684\u8bc9\u8bbc\u5f15\u8d77\u4e86\u5f88\u591a\u5173\u6ce8\uff0c\u4f46\u4ed6\u4eec\u5bf9\u8c37\u6b4c\u7684\u8bc9\u8bbc\u662f\u5728\u540c\u4e00\u5929\u542f\u52a8\u7684\uff0c\u5e76\u4e14\u4e0e\u540c\u4e00\u95ee\u9898\u6709\u5173\u3002 Epic \u58f0\u79f0\u82f9\u679c\u548c\u8c37\u6b4c\u5bf9\u5176\u5e94\u7528\u5546\u5e97\u7684\u63a7\u5236\u6784\u6210\u4e86\u5784\u65ad\uff0c\u5e76\u5e0c\u671b\u80fd\u591f\u4e3a\u7528\u6237\u63d0\u4f9b\u66ff\u4ee3\u9014\u5f84\u6765\u8d2d\u4e70\u4ed6\u4eec\u7684\u6e38\u620f\uff0c\u4f8b\u5982 Fortnite\u2014\u2014\u800c\u4e0d\u5fc5\u7ed9\u82f9\u679c\u6216\u8c37\u6b4c 30% \u7684\u5206\u6210\u3002\u8fd9\u4e24\u4e2a\u6848\u4f8b\u7684\u7ed3\u679c\u5bf9\u82f9\u679c\u548c\u8c37\u6b4c\u7684\u56f4\u5899\u82b1\u56ed\u4ee5\u53ca\u5728\u8fd9\u4e9b\u5e73\u53f0\u4e0a\u53d1\u5e03\u7684\u6bcf\u4e2a\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u90fd\u4ea7\u751f\u4e86\u5de8\u5927\u7684\u5f71\u54cd\u3002\u5b83\u8fd8\u53ef\u80fd\u5bf9\u5305\u62ec\u6e38\u620f\u673a\u5728\u5185\u7684\u5176\u4ed6\u5e73\u53f0\u548c Steam \u7b49\u5176\u4ed6\u6570\u5b57\u5546\u5e97\u4ea7\u751f\u5f71\u54cd\u3002", "note_en": "Newly  unsealed documents in Epic&#39;s antitrust court case against Google allege that the tech giant considered buying &#34;some or all&#34; of Epic Games, out of concern over the Fortnite developer&#39;s intention to sidestep the Google Play app store.\n The document doesn&#39;t contain any of the internal messages where such a plan is considered, but a previously redacted paragraph is now included in court documents, as reported  by The Verge yesterday:\n &#34;For example, Google has gone so far as to share its monopoly profits with business partners to secure their agreement to fence out competition, has developed a series of internal projects to address the &#39;contagion&#39; it perceived from efforts by Epic and others to offer consumers and developers competitive alternatives, and has even contemplated buying some or all of Epic to squelch this threat.&#34;\n Responding to the Verge article on Twitter, Epic Games CEO said that they were only finding out now &#34;about Google&#39;s consideration&#34;:\n This was unbeknownst to us at the time, and because of the court\u2019s protective order we\u2019re just finding out now about Google\u2019s consideration of buying Epic to shut down our efforts to compete with Google Play. https://t.co/HSS1edUrQm\n\u2014 Tim Sweeney (@TimSweeneyEpic)  August 6, 2021\n   To see this content please enable targeting cookies.  Elsewhere in the court documents, Epic also allege that Google offered them a &#34;special deal&#34; to launch Fortnite on the Google Play store, which they rejected, and referred to the experience of installing apps on Android phones outside of the store as &#34;frankly abysmal.&#34;\n  Much of the document&#39;s claims and offered evidence remains redacted, but Epic further allege that after they signed a distribution agreement for Fortnite with Samsung&#39;s Android app store, Google &#34;took action to ensure that OEMs would not enter into partnerships with distributors like Epic.&#34;\n A lot of attention has been paid to  Epic&#39;s lawsuit against Apple regarding restrictions on the app store, but their lawsuit against Google was launched on the same day and is related to the same issue. Epic claim that Apple and Google&#39;s control of their app store&#39;s constitutes a monopoly, and want to be able to offer users alternative routes to buying their games such as Fortnite - without having to give Apple or Google a 30% cut. The outcomes of both cases have enormous ramifications for Apple and Google&#39;s walled gardens, and for every software developer who releases on those platforms. It could also have consequences for other platforms including consoles, and other digital stores such as Steam.", "posttime": "2021-08-08 17:50:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,\u8003\u8651,contemplated,epic", "title": "\u8c37\u6b4c\u201c\u8003\u8651\u8d2d\u4e70\u90e8\u5206\u6216\u5168\u90e8 Epic\u201d\u4ee5\u963b\u6b62\u201c\u4f20\u67d3\u201d", "title_en": "Google \u201ccontemplated buying some or all of Epic\u201d to stop \u201ccontagion\u201d", "transed": 1, "url": "https://www.rockpapershotgun.com/google-contemplated-buying-some-or-all-of-epic-to-stop-contagion-court-documents-say", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "\u8003\u8651", "epic"]}]