[{"category": "", "categoryclass": "", "imagename": "37d6f26584a222c81e51ba5e44b935ba.jpg", "infoid": 1071687, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u534e\u76db\u987f\u90ae\u62a5\u83b7\u5f97\u7684\u4e00\u5c01\u4fe1\uff0c\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u9a73\u56de\u4e86 Facebook \u7684\u8bf4\u6cd5\uff0c\u5373\u5b83\u5207\u65ad\u4e86\u4e00\u7ec4\u7814\u7a76\u4eba\u5458\u5bf9\u6570\u636e\u7684\u8bbf\u95ee\uff0c\u4ee5\u9075\u5b88\u4e0e\u8be5\u673a\u6784\u7684\u9690\u79c1\u534f\u8bae\uff0c\u8fd9\u662f\u201c\u4e0d\u51c6\u786e\u7684\u201d\u3002\u5468\u4e8c\uff0c\u8fd9\u5bb6\u793e\u4ea4\u5a92\u4f53\u5de8\u5934\u7981\u7528\u4e86\u7ebd\u7ea6\u5927\u5b66\u5e7f\u544a\u89c2\u5bdf\u7ad9\u7814\u7a76\u4eba\u5458\u7684\u8d26\u6237\uff0c\u8be5\u89c2\u5bdf\u7ad9\u8ddf\u8e2a\u5e73\u53f0\u4e0a\u7684\u6570\u5b57\u5e7f\u544a\uff0c\u5e76\u5728\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u8868\u793a\uff0c\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u9075\u5b88\u5b83\u4e0e\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u8fbe\u6210\u7684\u9690\u79c1\u4ee4\u3002 Facebook \u8868\u793a\uff0c\u8be5\u5de5\u5177\u672a\u7ecf\u6388\u6743\u4ece\u7f51\u7ad9\u4e0a\u6293\u53d6\u6570\u636e\uff0c\u8fdd\u53cd\u4e86\u5176\u9690\u79c1\u6807\u51c6\u3002\u8fd9\u4e00\u51b3\u5b9a\u548c Facebook \u7684\u7406\u7531\u5f15\u8d77\u4e86\u7acb\u6cd5\u8005\u7684\u5f3a\u70c8\u53cd\u5bf9\uff0c\u4ed6\u4eec\u6307\u8d23\u8be5\u516c\u53f8\u9519\u8bef\u5730\u5f15\u7528\u9690\u79c1\u95ee\u9898\u6765\u9003\u907f\u72ec\u7acb\u7814\u7a76\u4eba\u5458\u7684\u5ba1\u67e5\u3002\u8be5\u673a\u6784\u5468\u56db\u5728\u81f4 Facebook \u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c\u7684\u4e00\u5c01\u4fe1\u4e2d\u9a73\u56de\u4e86 Facebook \u7684\u8bf4\u6cd5\uff0c\u8be5\u4fe1\u7531\u6d88\u8d39\u8005\u4fdd\u62a4\u5c40\u4ee3\u7406\u5c40\u957f\u585e\u7f2a\u5c14\u00b7\u83b1\u6587 (Samuel Levine) \u6267\u7b14\u3002\u4ed6\u5199\u9053\uff1a\u201c\u5982\u679c\u4f60\u5151\u73b0\u4e86\u63d0\u524d\u4e0e\u6211\u4eec\u8054\u7cfb\u7684\u627f\u8bfa\uff0c\u6211\u4eec\u4f1a\u6307\u51fa\u540c\u610f\u4ee4\u5e76\u4e0d\u7981\u6b62 Facebook \u4e3a\u51fa\u4e8e\u516c\u5171\u5229\u76ca\u7684\u5584\u610f\u7814\u7a76\u5236\u5b9a\u4f8b\u5916\u3002\u201d\u636e\u300a\u8fde\u7ebf\u300b\u62a5\u9053\uff0cFacebook \u53d1\u8a00\u4eba\u4e54\u00b7\u5965\u65af\u672c (Joe Osborne) \u540e\u6765\u8868\u793a\uff0cFacebook \u4e0e\u8be5\u673a\u6784\u7684\u534f\u8bae\u5e76\u672a\u5f3a\u5236\u5176\u6682\u505c\u8d26\u6237\uff0c\u800c\u662f\u5f3a\u5236\u5176\u6682\u505c\u5176\u9690\u79c1\u51c6\u5219\u3002\u83b1\u6587\u5728\u4fe1\u4e2d\u5f15\u7528\u4e86 Facebook \u7684\u9006\u8f6c\uff0c\u79f0\u6700\u521d\u7684\u8bf4\u6cd5\u201c\u4e0d\u51c6\u786e\u201d\u3002\n\u4ed6\u5199\u9053\uff1a\u201c\u867d\u7136\u6211\u611f\u8c22 Facebook \u73b0\u5728\u66f4\u6b63\u4e86\u8bb0\u5f55\uff0c\u4f46\u6211\u5bf9\u8d35\u516c\u53f8\u5728\u8fd9\u4ef6\u4e8b\u4e0a\u7684\u8868\u73b0\u611f\u5230\u5931\u671b\u3002\u201d Facebook \u6ca1\u6709\u7acb\u5373\u56de\u5e94\u5c31\u8fd9\u5c01\u4fe1\u6216\u662f\u5426\u4f1a\u6062\u590d\u7814\u7a76\u4eba\u5458\u5e10\u6237\u53d1\u8868\u8bc4\u8bba\u7684\u8bf7\u6c42\u3002 Facebook \u5207\u65ad\u7814\u7a76\u4eba\u5458\u7684\u51b3\u5b9a\u5f15\u8d77\u4e86\u56fd\u4f1a\u8bae\u5458\u3001\u8a00\u8bba\u81ea\u7531\u5021\u5bfc\u8005\u548c\u5176\u4ed6 Facebook \u76d1\u7ba1\u673a\u6784\u7684\u8c34\u8d23\u3002\u5f53\u5929\u6700\u91cd\u8981\u7684\u65b0\u95fb\u62a5\u9053\uff0c\u7531\u90ae\u653f\u7f16\u8f91\u7b56\u5212\uff0c\u6bcf\u5929\u65e9\u4e0a\u53d1\u5e03\u3002", "note_en": "The Federal Trade Commission has dismissed as \u201cinaccurate\u201d Facebook\u2019s claim that it cut off a group of researchers\u2019 access to data to comply with a privacy agreement with the agency, according to a letter obtained by The Washington Post.\n  On Tuesday, the social media giant disabled the accounts of researchers at the New York University Ad Observatory, which tracks digital advertisements on the platform, saying in  a blog post it did so to comply with a privacy order it struck with the FTC.\n Facebook said the tool violated its privacy standards by scraping data from the site without authorization. The decision and Facebook\u2019s justification  drew backlash from lawmakers who accused the company of erroneously citing privacy concerns to escape scrutiny from independent researchers.\n  The agency rejected Facebook\u2019s assertion in a letter sent to Facebook CEO Mark Zuckerberg on Thursday, penned by Acting Director for the Bureau of Consumer Protection Samuel Levine.\n  \u201cHad you honored your commitment to contact us in advance, we would have pointed out that the consent decree does not bar Facebook from creating exceptions for good-faith research in the public interest,\u201d he wrote.\n According to Wired, Facebook spokesperson Joe Osborne later said that Facebook\u2019s agreement with the agency did not force it to suspend the accounts, but rather its own privacy guidelines.\n Levine cited Facebook\u2019s reversal in the letter, calling the initial claim \u201cinaccurate.\u201d\n  \u201cWhile I appreciate that Facebook has now corrected the record, I am disappointed by how your company has conducted itself in this matter,\u201d he wrote.\n Facebook did not immediately respond to a request for comment on the letter or on whether it will reinstate the researchers\u2019 accounts.\n Facebook\u2019s decision to cut off the researchers drew condemnations from lawmakers on Capitol Hill, free speech advocates and other Facebook watchdogs.\n     The most important news stories of the day, curated by Post editors and delivered every morning.", "posttime": "2021-08-06 09:02:13", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "facebook,\u5927\u5b66,\u7f8e\u56fd,\u9075\u5b88,ftc", "title": "\u5728\u7ed9\u624e\u514b\u4f2f\u683c\u7684\u4e00\u5c01\u4fe1\u4e2d\uff0c\u7f8e\u56fd\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u79f0 Facebook \u6700\u521d\u58f0\u79f0\u5b83\u5207\u65ad\u4e86\u7ebd\u7ea6\u5927\u5b66\u7814\u7a76\u4eba\u5458\u9075\u5b88\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u9690\u79c1\u534f\u8bae\u7684\u9014\u5f84\u662f\u201c\u4e0d\u51c6\u786e\u7684\u201d", "title_en": "In a letter to Zuckerberg, the FTC called Facebook's initial claim it cut off NYU researchers' access to comply with an FTC privacy agreement as \u201cinaccurate\u201d", "transed": 1, "url": "https://www.washingtonpost.com/technology/2021/08/05/facebook-nyu-ftc-dispute/", "via": "", "real_tags": ["facebook", "\u5927\u5b66", "\u7f8e\u56fd", "\u9075\u5b88", "ftc"]}, {"category": "", "categoryclass": "", "imagename": "0764848644516ed06964beaff1478dcb.png", "infoid": 1071686, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53d1\u751f\u9519\u8bef\uff0c\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u5411\u60a8\u7684\u7f51\u7edc\u6d4f\u89c8\u5668\u53d1\u9001 cookie\u3002\u6211\u4eec\u7684\u7f51\u7ad9\u4f7f\u7528 cookie \u6765\u5141\u8bb8\u8bbf\u95ee\u67d0\u4e9b\u9875\u9762\u548c\u529f\u80fd\u3002\u8bf7\u542f\u7528 cookie \u4ee5\u7ee7\u7eed\u8bbf\u95ee\u8bf7\u6c42\u7684\u9875\u9762\u3002", "note_en": "An error has occurred because we were unable to send a cookie to your web browser. Our site uses cookies to allow access to certain pages and features. Please enable cookies to continue to the requested page.", "posttime": "2021-08-06 09:01:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u83cc\u7d20,systematic,cookie", "title": "\u4f0a\u7ef4\u83cc\u7d20\u7cfb\u7edf\u7814\u7a76\uff1a\u4e0d\u786e\u5b9a", "title_en": "Ivermectin Systematic Study: Inconclusive", "transed": 1, "url": "https://www.cochranelibrary.com/cdsr/doi/10.1002/14651858.CD015017.pub2/full", "via": "", "real_tags": ["\u83cc\u7d20", "cookie"]}, {"category": "", "categoryclass": "", "imagename": "8af20cc94166675fb7d1fa5650555595.jpg", "infoid": 1071684, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u4e0e\u6280\u672f\u7814\u7a76\u9662 (NIST) \u7684\u7269\u7406\u5b66\u5bb6\u5c06\u4e00\u4e2a\u5fae\u5c0f\u84dd\u8272\u6676\u4f53\u7684\u673a\u68b0\u8fd0\u52a8\u548c\u7535\u5b50\u7279\u6027\u8054\u7cfb\u5728\u4e00\u8d77\u6216\u201c\u7ea0\u7f20\u201d\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u5728\u6d4b\u91cf\u7535\u573a\u65f6\u5177\u6709\u91cf\u5b50\u4f18\u52bf\uff0c\u5e76\u5177\u6709\u8bb0\u5f55\u7075\u654f\u5ea6\uff0c\u8fd9\u53ef\u80fd\u4f1a\u589e\u5f3a\u5bf9\u5b87\u5b99\u3002\u91cf\u5b50\u4f20\u611f\u5668\u7531 150 \u4e2a\u88ab\u9650\u5236\u5728\u78c1\u573a\u4e2d\u7684\u94cd\u79bb\u5b50\uff08\u5e26\u7535\u539f\u5b50\uff09\u7ec4\u6210\uff0c\u56e0\u6b64\u5b83\u4eec\u4f1a\u81ea\u884c\u6392\u5217\u6210\u76f4\u5f84\u4ec5\u4e3a\u767e\u4e07\u5206\u4e4b\u4e00\u7c73\u7684\u6241\u5e73\u4e8c\u7ef4\u6676\u4f53\u3002\u50cf\u8fd9\u6837\u7684\u91cf\u5b50\u4f20\u611f\u5668\u6709\u53ef\u80fd\u68c0\u6d4b\u6765\u81ea\u6697\u7269\u8d28\u7684\u4fe1\u53f7\u2014\u2014\u6697\u7269\u8d28\u662f\u4e00\u79cd\u795e\u79d8\u7684\u7269\u8d28\uff0c\u5728\u5176\u4ed6\u7406\u8bba\u4e2d\uff0c\u5b83\u53ef\u80fd\u662f\u4e9a\u539f\u5b50\u7c92\u5b50\uff0c\u901a\u8fc7\u5f31\u7535\u78c1\u573a\u4e0e\u6b63\u5e38\u7269\u8d28\u76f8\u4e92\u4f5c\u7528\u3002\u6697\u7269\u8d28\u7684\u5b58\u5728\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6676\u4f53\u4ee5\u660e\u663e\u7684\u65b9\u5f0f\u6446\u52a8\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u6676\u4f53\u79bb\u5b50\u5728\u5176\u7535\u5b50\u7279\u6027\u4e4b\u4e00\uff08\u79f0\u4e3a\u81ea\u65cb\uff09\u4e2d\u7684\u96c6\u4f53\u53d8\u5316\u6765\u63ed\u793a\u3002\u6b63\u5982 8 \u6708 6 \u65e5\u7684\u300a\u79d1\u5b66\u300b\u6742\u5fd7\u6240\u63cf\u8ff0\u7684\u90a3\u6837\uff0c\u7814\u7a76\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u76d1\u6d4b\u96c6\u4f53\u81ea\u65cb\u7684\u53d8\u5316\u6765\u6d4b\u91cf\u6676\u4f53\u7684\u632f\u52a8\u6fc0\u53d1\u2014\u2014\u5e73\u9762\u50cf\u9f13\u5934\u4e00\u6837\u4e0a\u4e0b\u79fb\u52a8\u3002\u6d4b\u91cf\u81ea\u65cb\u8868\u660e\u632f\u52a8\u6fc0\u53d1\u7684\u7a0b\u5ea6\uff0c\u79f0\u4e3a\u4f4d\u79fb\u3002\u8be5\u4f20\u611f\u5668\u53ef\u4ee5\u6d4b\u91cf\u4e0e\u6676\u4f53\u5177\u6709\u76f8\u540c\u632f\u52a8\u9891\u7387\u7684\u5916\u90e8\u7535\u573a\uff0c\u5176\u7075\u654f\u5ea6\u662f\u4e4b\u524d\u5c55\u793a\u7684\u4efb\u4f55\u539f\u5b50\u4f20\u611f\u5668\u7684 10 \u500d\u4ee5\u4e0a\u3002 \uff08\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u4f20\u611f\u5668\u53ef\u4ee5\u5728\u4e00\u79d2\u5185\u6d4b\u91cf\u51fa\u6bcf\u7c73 240 \u7eb3\u4f0f\u7684\u7535\u538b\u3002\uff09\u5728\u5b9e\u9a8c\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u5e94\u7528\u5f31\u7535\u573a\u6765\u6fc0\u53d1\u548c\u6d4b\u8bd5\u6676\u4f53\u4f20\u611f\u5668\u3002\u6697\u7269\u8d28\u641c\u7d22\u4f1a\u5bfb\u627e\u8fd9\u6837\u7684\u4fe1\u53f7\u3002 \u201c\u79bb\u5b50\u6676\u4f53\u53ef\u4ee5\u68c0\u6d4b\u67d0\u4e9b\u7c7b\u578b\u7684\u6697\u7269\u8d28\u2014\u2014\u4f8b\u5982\u8f74\u5b50\u548c\u9690\u85cf\u7684\u5149\u5b50\u2014\u2014\u5b83\u4eec\u901a\u8fc7\u5f31\u7535\u573a\u4e0e\u6b63\u5e38\u7269\u8d28\u76f8\u4e92\u4f5c\u7528\uff0c\u201dNIST \u8d44\u6df1\u4f5c\u8005\u7ea6\u7ff0\u535a\u6797\u683c\u8bf4\u3002 \u201c\u6697\u7269\u8d28\u5f62\u6210\u80cc\u666f\u4fe1\u53f7\uff0c\u5176\u632f\u8361\u9891\u7387\u53d6\u51b3\u4e8e\u6697\u7269\u8d28\u7c92\u5b50\u7684\u8d28\u91cf\u3002\u901a\u8fc7\u8d85\u5bfc\u7535\u8def\u5bfb\u627e\u8fd9\u79cd\u6697\u7269\u8d28\u7684\u5b9e\u9a8c\u5df2\u7ecf\u8fdb\u884c\u4e86\u5341\u591a\u5e74\u3002\u88ab\u56f0\u79bb\u5b50\u7684\u8fd0\u52a8\u63d0\u4f9b\u4e86\u4e0d\u540c\u9891\u7387\u8303\u56f4\u5185\u7684\u7075\u654f\u5ea6\u3002\u201d\u5341\u591a\u5e74\u6765\uff0cBollinger \u7684\u56e2\u961f\u4e00\u76f4\u5728\u7814\u7a76\u79bb\u5b50\u6676\u4f53\u3002\u65b0\u529f\u80fd\u662f\u4f7f\u7528\u7279\u5b9a\u7c7b\u578b\u7684\u6fc0\u5149\u6765\u7ea0\u7f20\u5927\u91cf\u79bb\u5b50\u7684\u96c6\u4f53\u8fd0\u52a8\u548c\u81ea\u65cb\uff0c\u4ee5\u53ca\u7814\u7a76\u4eba\u5458\u6240\u8c13\u7684\u201c\u65f6\u95f4\u53cd\u8f6c\u201d\u7b56\u7565\u6765\u68c0\u6d4b\u7ed3\u679c\u3002\u8be5\u5b9e\u9a8c\u5f97\u76ca\u4e8e\u4e0e NIST \u7406\u8bba\u5bb6 Ana Maria Rey \u7684\u5408\u4f5c\uff0c\u5979\u5728 NIST \u548c\u79d1\u7f57\u62c9\u591a\u5927\u5b66\u535a\u5c14\u5fb7\u5206\u6821\u7684\u8054\u5408\u7814\u7a76\u6240 JILA \u5de5\u4f5c\u3002 Bollinger \u8bf4\uff0c\u8fd9\u9879\u7406\u8bba\u5de5\u4f5c\u5bf9\u4e8e\u7406\u89e3\u5b9e\u9a8c\u5ba4\u8bbe\u7f6e\u7684\u9650\u5236\u81f3\u5173\u91cd\u8981\uff0c\u4e3a\u7406\u89e3\u5bf9\u5927\u91cf\u6355\u83b7\u79bb\u5b50\u6709\u6548\u7684\u5b9e\u9a8c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u6a21\u578b\uff0c\u5e76\u8bc1\u660e\u4e86\u91cf\u5b50\u4f18\u52bf\u6765\u81ea\u4e8e\u81ea\u65cb\u548c\u8fd0\u52a8\u7684\u7ea0\u7f20\u3002\nRey \u6307\u51fa\uff0c\u7ea0\u7f20\u6709\u5229\u4e8e\u6d88\u9664\u79bb\u5b50\u7684\u56fa\u6709\u91cf\u5b50\u566a\u58f0\u3002\u7136\u800c\uff0c\u5728\u4e0d\u7834\u574f\u81ea\u65cb\u548c\u8fd0\u52a8\u4e4b\u95f4\u5171\u4eab\u7684\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u6d4b\u91cf\u7ea0\u7f20\u91cf\u5b50\u6001\u662f\u5f88\u56f0\u96be\u7684\u3002 \u201c\u4e3a\u4e86\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u7ea6\u7ff0\u80fd\u591f\u5728\u65bd\u52a0\u4f4d\u79fb\u540e\u9006\u8f6c\u52a8\u529b\u5b66\u5e76\u89e3\u5f00\u81ea\u65cb\u548c\u8fd0\u52a8\uff0c\u201d\u96f7\u4f0a\u8bf4\u3002 \u201c\u8fd9\u6b21\u53cd\u8f6c\u5c06\u81ea\u65cb\u548c\u8fd0\u52a8\u89e3\u8026\uff0c\u73b0\u5728\u96c6\u4f53\u81ea\u65cb\u672c\u8eab\u5b58\u50a8\u4e86\u4f4d\u79fb\u4fe1\u606f\uff0c\u5f53\u6211\u4eec\u6d4b\u91cf\u81ea\u65cb\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u975e\u5e38\u7cbe\u786e\u5730\u786e\u5b9a\u4f4d\u79fb\u3002\u8fd9\u5f88\u6574\u6d01\uff01\u201d\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u5fae\u6ce2\u6765\u4ea7\u751f\u6240\u9700\u7684\u81ea\u65cb\u503c\u3002\u79bb\u5b50\u53ef\u4ee5\u5411\u4e0a\u65cb\u8f6c\uff08\u901a\u5e38\u88ab\u8bbe\u60f3\u4e3a\u5411\u4e0a\u7684\u7bad\u5934\uff09\u3001\u5411\u4e0b\u65cb\u8f6c\u6216\u5176\u4ed6\u89d2\u5ea6\uff0c\u5305\u62ec\u540c\u65f6\u8fdb\u884c\u7684\u7279\u6b8a\u91cf\u5b50\u6001\u3002\u5728\u8fd9\u4e2a\u5b9e\u9a8c\u4e2d\uff0c\u6240\u6709\u7684\u79bb\u5b50\u90fd\u5177\u6709\u76f8\u540c\u7684\u81ea\u65cb\u2014\u2014\u5148\u662f\u5411\u4e0a\u65cb\u8f6c\uff0c\u7136\u540e\u662f\u6c34\u5e73\u2014\u2014\u6240\u4ee5\u5f53\u53d7\u5230\u6fc0\u53d1\u65f6\uff0c\u5b83\u4eec\u4f1a\u4ee5\u9640\u87ba\u7684\u7279\u5f81\u6a21\u5f0f\u4e00\u8d77\u65cb\u8f6c\u3002\u9891\u7387\u5dee\u51e0\u4e4e\u4e0e\u8fd0\u52a8\u76f8\u540c\u7684\u4ea4\u53c9\u6fc0\u5149\u675f\u7528\u4e8e\u5c06\u96c6\u4f53\u81ea\u65cb\u4e0e\u8fd0\u52a8\u7ea0\u7f20\u5728\u4e00\u8d77\u3002\u7136\u540e\u6676\u4f53\u88ab\u632f\u52a8\u6fc0\u53d1\u3002\u4f7f\u7528\u76f8\u540c\u7684\u6fc0\u5149\u548c\u5fae\u6ce2\u6765\u89e3\u9664\u7ea0\u7f20\u3002\u4e3a\u4e86\u786e\u5b9a\u6676\u4f53\u79fb\u52a8\u4e86\u591a\u5c11\uff0c\u7814\u7a76\u4eba\u5458\u6d4b\u91cf\u4e86\u79bb\u5b50\u7684\u8367\u5149\u81ea\u65cb\u6c34\u5e73\uff08\u5411\u4e0a\u65cb\u8f6c\u6563\u5c04\u5149\uff0c\u5411\u4e0b\u65cb\u8f6c\u4e3a\u6697\uff09\u3002\u672a\u6765\uff0c\u901a\u8fc7\u5236\u9020 3D \u6676\u4f53\u5c06\u79bb\u5b50\u6570\u91cf\u589e\u52a0\u5230 100,000 \u4e2a\uff0c\u6709\u671b\u5c06\u4f20\u611f\u80fd\u529b\u63d0\u9ad8 30 \u500d\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u63d0\u9ad8\u6676\u4f53\u6fc0\u53d1\u8fd0\u52a8\u7684\u7a33\u5b9a\u6027\uff0c\u4ece\u800c\u63d0\u9ad8\u65f6\u95f4\u53cd\u8f6c\u8fc7\u7a0b\u548c\u7ed3\u679c\u7684\u7cbe\u5ea6\u3002 \u201c\u5982\u679c\u6211\u4eec\u80fd\u591f\u6539\u8fdb\u8fd9\u65b9\u9762\uff0c\u8fd9\u4e2a\u5b9e\u9a8c\u53ef\u4ee5\u6210\u4e3a\u63a2\u6d4b\u6697\u7269\u8d28\u7684\u57fa\u672c\u8d44\u6e90\uff0c\u201d\u96f7\u4f0a\u8bf4\u3002 \u201c\u6211\u4eec\u77e5\u9053\u5b87\u5b99\u4e2d 85% \u7684\u7269\u8d28\u662f\u7531\u6697\u7269\u8d28\u6784\u6210\u7684\uff0c\u4f46\u8fc4\u4eca\u4e3a\u6b62\u6211\u4eec\u8fd8\u4e0d\u77e5\u9053\u6697\u7269\u8d28\u662f\u7531\u4ec0\u4e48\u6784\u6210\u7684\u3002\u8fd9\u4e2a\u5b9e\u9a8c\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u672a\u6765\u63ed\u5f00\u8fd9\u4e2a\u8c1c\u56e2\u3002\u201d\u5408\u8457\u8005\u5305\u62ec\u6765\u81ea\u4fc4\u514b\u62c9\u8377\u9a6c\u5927\u5b66\u7684\u7814\u7a76\u4eba\u5458\u3002\u8fd9\u9879\u5de5\u4f5c\u5f97\u5230\u4e86\u7f8e\u56fd\u80fd\u6e90\u90e8\u3001\u7a7a\u519b\u79d1\u5b66\u7814\u7a76\u529e\u516c\u5ba4\u3001\u56fd\u9632\u9ad8\u7ea7\u7814\u7a76\u8ba1\u5212\u5c40\u3001\u9646\u519b\u7814\u7a76\u529e\u516c\u5ba4\u548c\u56fd\u5bb6\u79d1\u5b66\u57fa\u91d1\u4f1a\u7684\u90e8\u5206\u652f\u6301\u3002\n\u8bba\u6587\uff1aKA Gilmore\u3001M. Affolter\u3001RJ Lewis-Swan\u3001D. Barberena\u3001E. Jordan\u3001AM Rey \u548c JJ Bollinger\u3002\u4f7f\u7528\u4e8c\u7ef4\u4fd8\u83b7\u79bb\u5b50\u6676\u4f53\u5bf9\u4f4d\u79fb\u548c\u7535\u573a\u8fdb\u884c\u91cf\u5b50\u589e\u5f3a\u4f20\u611f\u3002\u79d1\u5b66\u3002 2021 \u5e74 8 \u6708 5 \u65e5\u3002DOI\uff1a10.1126/science.abi5226", "note_en": "Physicists at the National Institute of Standards and Technology (NIST) have linked together, or \u201centangled,\u201d the mechanical motion and electronic properties of a tiny blue crystal, giving it a quantum edge in measuring electric fields with record sensitivity that may enhance understanding of the universe.\n The quantum sensor consists of 150 beryllium ions (electrically charged atoms) confined in a magnetic field, so they self-arrange into a flat 2D crystal just 200 millionths of a meter in diameter. Quantum sensors such as this have the potential to detect signals from dark matter \u2014 a mysterious substance that might turn out to be, among other theories, subatomic particles that interact with normal matter through a weak electromagnetic field. The presence of dark matter could cause the crystal to wiggle in telltale ways, revealed by collective changes among the crystal\u2019s ions in one of their electronic properties, known as spin.\n As described in the Aug. 6 issue of   Science, researchers can measure the vibrational excitation of the crystal \u2014 the flat plane moving up and down like the head of a drum \u2014 by monitoring changes in the collective spin. Measuring the spin indicates the extent of the vibrational excitation, referred to as displacement.\n This sensor can measure external electric fields that have the same vibration frequency as the crystal with more than 10 times the sensitivity of any previously demonstrated atomic sensor. (Technically, the sensor can measure 240 nanovolts per meter in one second.) In the experiments, researchers apply a weak electric field to excite and test the crystal sensor. A dark matter search would look for such a signal.\n \u201cIon crystals could detect certain types of dark matter \u2014 examples are axions and hidden photons \u2014 that interact with normal matter through a weak electric field,\u201d NIST senior author John Bollinger said. \u201cThe dark matter forms a background signal with an oscillation frequency that depends on the mass of the dark matter particle. Experiments searching for this type of dark matter have been ongoing for more than a decade with superconducting circuits. The motion of trapped ions provides sensitivity over a different range of frequencies.\u201d\n Bollinger\u2019s group has been working with the ion crystal for more than a decade. What\u2019s new is the use of a specific type of laser light to entangle the collective motion and spins of a large number of ions, plus what the researchers call a \u201ctime reversal\u201d strategy to detect the results.\n The experiment benefited from a collaboration with NIST theorist Ana Maria Rey, who works at JILA, a joint institute of NIST and the University of Colorado Boulder. The theory work was critical for understanding the limits of the laboratory setup, offered a new model for understanding the experiment that is valid for large numbers of trapped ions, and demonstrated that the quantum advantage comes from entangling the spin and motion, Bollinger said.\n Rey noted that entanglement is beneficial in canceling the ions\u2019 intrinsic quantum noise. However, measuring the entangled quantum state without destroying the information shared between spin and motion is difficult.\n \u201cTo avoid this issue, John is able to reverse the dynamics and disentangle the spin and the motion after the displacement is applied,\u201d Rey said. \u201cThis time reversal decouples the spin and the motion, and now the collective spin itself has the displacement information stored on it, and when we measure the spins we can determine the displacement very precisely. This is neat!\u201d\n   The researchers used microwaves to produce desired values of the spins. Ions can be spin up (often envisioned as an arrow pointing up), spin down or other angles, including both at the same time, a special quantum state. In this experiment the ions all had the same spin \u2014 first spin up and then horizontal \u2014 so when excited they rotated together in a pattern characteristic of spinning tops.\n Crossed laser beams, with a difference in frequency that was nearly the same as the motion, were used to entangle the collective spin with the motion. The crystal was then vibrationally excited. The same lasers and microwaves were used to undo the entanglement. To determine how much the crystal moved, researchers measured the ions\u2019 spin level of fluorescence (spin up scatters light, spin down is dark).\n In the future, increasing the number of ions to 100,000 by making 3D crystals is expected to improve the sensing capability thirtyfold. In addition, the stability of the crystal\u2019s excited motion might be improved, which would enhance the time reversal process and the precision of the results.\n \u201cIf we are able to improve this aspect, this experiment can become a fundamental resource for detecting dark matter,\u201d Rey said. \u201cWe know 85% of the matter in the universe is made of dark matter, but to date we do not know what dark matter is made of. This experiment could allow us in the future to unveil this mystery.\u201d\n Co-authors included researchers from the University of Oklahoma. This work is supported in part by the U.S. Department of Energy, Air Force Office of Scientific Research, Defense Advanced Research Projects Agency, Army Research Office and National Science Foundation.\n  Paper: K.A. Gilmore, M. Affolter, R.J. Lewis-Swan, D. Barberena, E. Jordan, A.M. Rey and J.J. Bollinger. Quantum-enhanced sensing of displacements and electric fields with two-dimensional trapped-ion crystals.  Science. Aug. 5, 2021. DOI:  10.1126/science.abi5226", "posttime": "2021-08-06 09:00:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91cf\u5b50,quantum,\u6697\u7269\u8d28", "title": "NIST \u7684\u91cf\u5b50\u6676\u4f53\u53ef\u80fd\u662f\u4e00\u79cd\u65b0\u7684\u6697\u7269\u8d28\u4f20\u611f\u5668", "title_en": "NIST\u2019s Quantum Crystal Could Be a New Dark Matter Sensor", "transed": 1, "url": "https://www.nist.gov/news-events/news/2021/08/nists-quantum-crystal-could-be-new-dark-matter-sensor", "via": "", "real_tags": ["\u91cf\u5b50", "quantum", "\u6697\u7269\u8d28"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071683, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bb8\u591a\u5e74\u524d\uff0cNRI \u91c7\u7528 Elm \u4f5c\u4e3a\u524d\u7aef\u8bed\u8a00\u3002\u6211\u4eec\u4ece\u4e00\u6b21\u6027\u7684\u6982\u5ff5\u9a8c\u8bc1\u5f00\u59cb\uff0c\u968f\u7740\u5de5\u7a0b\u56e2\u961f\u8d8a\u6765\u8d8a\u591a\u5730\u63a5\u53d7 Elm \u6bd4 JavaScript \u66f4\u597d\u7684\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\uff0c\u6211\u4eec\u7684\u524d\u7aef\u5f00\u53d1\u8d8a\u6765\u8d8a\u591a\u5730\u53d1\u751f\u5728 Elm \u4e2d\u3002\u4eca\u5929\uff0c\u6211\u4eec\u51e0\u4e4e\u6240\u6709\u7684\u524d\u7aef\u90fd\u662f\u7528 Elm \u7f16\u5199\u7684\u3002\u540c\u65f6\uff0c\u5728\u540e\u7aef\uff0c\u6211\u4eec\u4f7f\u7528 Ruby on Rails\u3002 Rails \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u670d\u52a1\uff0c\u5e76\u652f\u6301\u4e86\u6211\u4eec\u7f51\u7ad9\u7684\u60ca\u4eba\u589e\u957f\uff0c\u65e0\u8bba\u662f\u5728\u5b83\u652f\u6301\u7684\u529f\u80fd\u65b9\u9762\uff0c\u8fd8\u662f\u5728\u4f7f\u7528\u5b83\u7684\u5b66\u751f\u548c\u6559\u5e08\u6570\u91cf\u65b9\u9762\u3002\u4f46\u662f\u6211\u4eec\u5f00\u59cb\u9519\u8fc7\u4e00\u4e9b\u8ba9\u6211\u4eec\u5728 Elm \u4e2d\u5982\u6b64\u9ad8\u6548\u7684\u5de5\u5177\uff1a\u50cf\u7528\u4e8e\u5efa\u6a21\u6570\u636e\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u3001\u7c7b\u578b\u68c0\u67e5\u5668\u53ca\u5176\u6709\u7528\u7684\u9519\u8bef\u6d88\u606f\u6216\u6613\u4e8e\u7f16\u5199\uff08\u5feb\u901f\uff09\u6d4b\u8bd5\u7684\u5de5\u5177\u3002\u51e0\u5e74\u524d\uff0c\u6211\u4eec\u5f00\u59cb\u5c06 Haskell \u89c6\u4e3a\u4e00\u79cd\u66ff\u4ee3\u540e\u7aef\u8bed\u8a00\uff0c\u5b83\u53ef\u4ee5\u4e3a\u6211\u4eec\u7684\u540e\u7aef\u5e26\u6765\u4e00\u4e9b\u6211\u4eec\u5728\u524d\u7aef\u7f16\u5199 Elm \u65f6\u6240\u4f53\u9a8c\u5230\u7684\u597d\u5904\u3002\u4eca\u5929\uff0c\u6211\u4eec\u540e\u7aef\u4ee3\u7801\u7684\u4e00\u4e9b\u5173\u952e\u90e8\u5206\u662f\u7528 Haskell \u7f16\u5199\u7684\u3002\u591a\u5e74\u6765\uff0c\u6211\u4eec\u5f00\u53d1\u4e86 Haskell \u7684\u5199\u4f5c\u98ce\u683c\uff0c\u5b83\u53ef\u4ee5\u88ab\u63cf\u8ff0\u4e3a\u975e\u5e38\u50cf Elm\uff08\u5b83\u4e5f\u5728\u4e0d\u65ad\u53d8\u5316\uff01\uff09\u3002 Elm \u662f\u4e00\u79cd\u5c0f\u578b\u8bed\u8a00\uff0c\u5177\u6709\u4e30\u5bcc\u7684\u9519\u8bef\u4fe1\u606f\u3001\u4e30\u5bcc\u7684\u6587\u6863\u548c\u5f3a\u5927\u7684\u793e\u533a\u3002\u8fd9\u4e9b\u5171\u540c\u4f7f Elm \u6210\u4e3a\u6700\u9002\u5408\u5b66\u4e60\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002 ElmBridge \u6d3b\u52a8\u7684\u53c2\u4e0e\u8005\u5c06\u5728 5 \u5c0f\u65f6\u5185\u4ece\u5bf9\u8bed\u8a00\u4e00\u65e0\u6240\u77e5\u5230\u4f7f\u7528 Elm \u7f16\u5199\u771f\u6b63\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u6211\u4eec\u5728 NoRedInk \u6709\u5927\u91cf Elm \u4ee3\u7801\uff0c\u5b83\u652f\u6301\u4e00\u4e9b\u975e\u5e38\u68d8\u624b\u7684 UI \u5de5\u4f5c\u3002 Elm \u53ef\u4ee5\u5f88\u597d\u5730\u6269\u5c55\u5230\u4e0d\u65ad\u589e\u957f\u4e14\u65e5\u76ca\u590d\u6742\u7684\u4ee3\u7801\u5e93\u3002\u7f16\u8bd1\u5668\u4fdd\u6301\u5feb\u901f\uff0c\u6211\u4eec\u4e0d\u4f1a\u5bf9\u66f4\u6539\u4ee3\u7801\u7684\u80fd\u529b\u5931\u53bb\u4fe1\u5fc3\u3002\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u8be6\u7ec6\u4e86\u89e3\u6211\u4eec\u7684 Elm \u6545\u4e8b\u3002 Haskell \u6709\u5f88\u591a\u6211\u4eec\u559c\u6b22 Elm \u7684\u8bed\u8a00\u7279\u6027\uff1a\u81ea\u5b9a\u4e49\u7c7b\u578b\u6765\u5e2e\u52a9\u6211\u4eec\u5bf9\u6570\u636e\u5efa\u6a21\u3002\u7eaf\u51fd\u6570\u548c\u663e\u5f0f\u526f\u4f5c\u7528\u3002\u7f16\u5199\u6ca1\u6709\u8fd0\u884c\u65f6\u5f02\u5e38\u7684\u4ee3\u7801\uff08\u4e3b\u8981\u662f\uff09\u3002\u5728\u6613\u5b66\u6027\u65b9\u9762\uff0cHaskell \u505a\u51fa\u4e86\u4e0e Elm \u4e0d\u540c\u7684\u6743\u8861\u3002\u8be5\u8bed\u8a00\u8981\u5927\u5f97\u591a\uff0c\u5c24\u5176\u662f\u5728\u5305\u542b\u8bb8\u591a\u53ef\u4ee5\u542f\u7528\u7684\u53ef\u9009\u8bed\u8a00\u529f\u80fd\u65f6\u3002\u662f\u5426\u8981\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u529f\u80fd\u5b8c\u5168\u53d6\u51b3\u4e8e\u60a8\uff0c\u4f46\u662f\u5982\u679c\u60a8\u60f3\u4f7f\u7528 Haskell \u7684\u5305\u3001\u6587\u6863\u548c\u64cd\u4f5c\u65b9\u6cd5\uff0c\u5219\u9700\u8981\u4e86\u89e3\u5176\u4e2d\u7684\u8bb8\u591a\u529f\u80fd\u3002 Haskell \u7684\u7f16\u8bd1\u5668\u9519\u8bef\u901a\u5e38\u4e0d\u5982 Elm \u7684\u6709\u7528\u3002\u6700\u540e\uff0c\u6211\u4eec\u5df2\u7ecf\u9605\u8bfb\u4e86\u8bb8\u591a Haskell \u4e66\u7c4d\u548c\u535a\u5ba2\u6587\u7ae0\uff0c\u4f46\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u4e1c\u897f\u53ef\u4ee5\u8ba9\u6211\u4eec\u4ece\u4e0d\u4e86\u89e3 Haskell \u5230\u5728\u5176\u4e2d\u7f16\u5199\u4e00\u4e2a\u771f\u6b63\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u51e0\u4e4e\u4e0e Elm \u6307\u5357\u4e00\u6837\u5c0f\u800c\u6709\u6548\u3002\n\u6211\u4eec\u5728 Elm \u4e2d\u4e60\u60ef\u7684\u8bb8\u591a\u7ec6\u8282\u4e5f\u53ef\u4ee5\u5728 Haskell \u4e2d\u83b7\u5f97\u3002\u4f46\u662f Haskell \u6709\u8bb8\u591a\u9644\u52a0\u529f\u80fd\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u6bcf\u4e00\u4e2a\u529f\u80fd\u90fd\u6dfb\u52a0\u5230 Elm \u7a0b\u5e8f\u5458\u9700\u8981\u5b66\u4e60\u7684\u5185\u5bb9\u5217\u8868\u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u91c7\u53d6\u4e86 Haskell \u793e\u533a\u4e2d\u8bb8\u591a\u4eba\u5728\u6211\u4eec\u4e4b\u524d\u8d70\u8fc7\u7684\u9053\u8def\uff1a\u5c06\u81ea\u5df1\u9650\u5236\u5728\u8bed\u8a00\u7684\u4e00\u4e2a\u5b50\u96c6\u4e0a\u3002\u6709\u591a\u79cd\u7f16\u5199 Haskell \u7684\u98ce\u683c\uff0c\u6bcf\u79cd\u98ce\u683c\u90fd\u6709\u81ea\u5df1\u7684\u6743\u8861\u3002\u793a\u4f8b\u5305\u62ec Protolude\u3001RIO\u3001\u955c\u5934\u751f\u6001\u7cfb\u7edf\u7b49\u7b49\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u53d7\u5230 Elm \u7684\u5f3a\u70c8\u542f\u53d1\u3002\u90a3\u4e48\u6211\u4eec\u53d7 Elm \u542f\u53d1\u7684 Haskell \u5199\u4f5c\u98ce\u683c\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f\u4e3a\u4e86\u4f7f\u6211\u4eec\u7684 Haskell \u4ee3\u7801\u66f4\u50cf Elm\uff0c\u6211\u4eec\u6700\u65e9\u7684\u52aa\u529b\u662f\u5c06 Elm \u6807\u51c6\u5e93\u79fb\u690d\u5230 Haskell\u3002\u6211\u4eec\u5df2\u5c06\u6b64\u7aef\u53e3\u5f00\u6e90\u4e3a\u540d\u4e3a nri-prelude \u7684\u5e93\u3002\u5b83\u5305\u542b\u4e0e Elm \u6a21\u5757\u5bf9\u5e94\u7684 Haskell \u6a21\u5757\uff0c\u7528\u4e8e\u5904\u7406\u5b57\u7b26\u4e32\u3001\u5217\u8868\u3001\u5b57\u5178\u7b49\u3002 nri-prelude \u8fd8\u5305\u62ec\u4e00\u4e2a elm-test \u7684\u7aef\u53e3\u3002\u5b83\u63d0\u4f9b\u4e86\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u672c\u5c5e\u6027\u6d4b\u8bd5\u6240\u9700\u7684\u4e00\u5207\u3002\u6700\u540e\uff0c\u5b83\u5305\u542b\u4e00\u4e2a GHC \u63d2\u4ef6\uff0c\u4f7f Haskell \u7684\u9ed8\u8ba4 Prelude\uff08\u57fa\u672c\u4e0a\u662f\u5b83\u7684\u6807\u51c6\u5e93\uff09\u8868\u73b0\u5f97\u50cf Elm \u7684\u9ed8\u8ba4\u503c\u3002\u4f8b\u5982\uff0c\u5b83\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6a21\u5757\uff08\u5982 List\uff09\u7684\u9690\u5f0f\u9650\u5b9a\u5bfc\u5165\uff0c\u7c7b\u4f3c\u4e8e Elm \u6240\u505a\u7684\u3002 Elm \u575a\u6301\u652f\u6301\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u4e00\u67b6\u6784\uff0c\u6070\u5982\u5176\u5206\u5730\u79f0\u4e3a Elm \u67b6\u6784\u3002\u5b83\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\u5b83\u5f3a\u5236\u5206\u79bb\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\uff08\u6240\u6709\u8fd9\u4e9b\u6761\u4ef6\u548c\u5faa\u73af\uff09\u548c\u6548\u679c\uff08\u6bd4\u5982\u4e0e\u6570\u636e\u5e93\u4ea4\u8c08\u6216\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff09\u3002\u6211\u4eec\u559c\u6b22\u4f7f\u7528 Elm \u67b6\u6784\u7f16\u5199\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u770b\u4e0d\u5230\u5c06\u5176 1:1 \u5e94\u7528\u4e8e\u540e\u7aef\u5f00\u53d1\u7684\u65b9\u6cd5\u3002\u5728 F# \u793e\u533a\u4e2d\uff0c\u4ed6\u4eec\u5c06 Elm \u67b6\u6784\u7528\u4e8e\u67d0\u4e9b\u540e\u7aef\u529f\u80fd\uff08\u8bf7\u53c2\u9605\uff1a\u4f55\u65f6\u4f7f\u7528 Elmish Bridge\uff09\uff0c\u4f46\u5b83\u5e76\u4e0d\u666e\u904d\u9002\u7528\u3002\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u9f13\u52b1\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u548c\u6548\u679c\u4e4b\u95f4\u7684\u5206\u79bb\uff0c\u56e0\u4e3a\u5728\u6211\u4eec\u7684\u540e\u7aef\u4ee3\u7801\u4e2d\u5df2\u7ecf\u770b\u5230\u4e86\u5931\u53bb\u8fd9\u79cd\u533a\u522b\u7684\u4e00\u4e9b\u5f71\u54cd\u3002\u9605\u8bfb\u6211\u4eec\u7684\u53e6\u4e00\u7bc7\u6587\u7ae0+\u2604\ufe0f\u6cb3\u8c5a\uff0c\u8bf7\u6269\u5927\u7f51\u7ad9\uff01\u5982\u679c\u4f60\u60f3\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u3002\u5728\u8bb8\u591a\u9009\u9879\u4e2d\uff0c\u6211\u4eec\u76ee\u524d\u4f7f\u7528\u53e5\u67c4\u6a21\u5f0f\u6765\u7ba1\u7406\u6548\u679c\u3002\u5bf9\u4e8e\u6bcf\u79cd\u7c7b\u578b\u7684\u6548\u679c\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a Handler \u7c7b\u578b\uff08\u6211\u4eec\u4ee5\u6253\u5b57\u9519\u8bef\u7684\u65b9\u5f0f\u6dfb\u52a0\u4e86\u989d\u5916\u7684 r \u5e76\u4e14\u5b83\u4e00\u76f4\u5b58\u5728\u3002\u62b1\u6b49\uff09\u3002\u6211\u4eec\u5728\u6211\u4eec\u7684\u5e93\u4e2d\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u4e0e\u5916\u90e8\u7cfb\u7edf\u5bf9\u8bdd\uff1anri-postgresql\u3001nri-http\u3001nri-redis \u548c nri-kafka\u3002\n\u5982\u679c\u6ca1\u6709 Elm \u67b6\u6784\uff0c\u6211\u4eec\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u901a\u8fc7\u6709\u72b6\u6001\u4efb\u52a1\u7c7b\u578b\u94fe\u63a5\u6392\u5217\u3002\u8fd9\u611f\u89c9\u7c7b\u4f3c\u4e8e\u547d\u4ee4\u5f0f\u7f16\u7801\uff1a\u9996\u5148\uff0c\u6267\u884c A\uff0c\u7136\u540e\u6267\u884c B\uff0c\u7136\u540e\u6267\u884c C\u3002\u5e0c\u671b\u5728\u6211\u4eec\u7a0d\u540e\u7684 Haskell \u4e4b\u65c5\u4e2d\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u5f88\u597d\u7684\u67b6\u6784\u6765\u7b80\u5316\u6211\u4eec\u7684\u540e\u7aef\u4ee3\u7801\u3002 Haskell \u4e0e Elm \u548c Rails \u4e0d\u540c\u7684\u4e00\u4e2a\u65b9\u9762\u662f\u5b83\u4e0d\u662f\u7279\u522b\u56fa\u6267\u5df1\u89c1\u3002 Haskell \u751f\u6001\u7cfb\u7edf\u901a\u5e38\u63d0\u4f9b\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u505a\u4e00\u4ef6\u7279\u5b9a\u7684\u4e8b\u60c5\u3002\u56e0\u6b64\uff0c\u65e0\u8bba\u662f\u7f16\u5199 http \u670d\u52a1\u5668\u3001\u65e5\u5fd7\u8bb0\u5f55\u8fd8\u662f\u4e0e\u6570\u636e\u5e93\u4ea4\u8c08\uff0c\u6211\u4eec\u7b2c\u4e00\u6b21\u505a\u8fd9\u4e9b\u4e8b\u60c5\u65f6\u90fd\u9700\u8981\u51b3\u5b9a\u5982\u4f55\u505a\u3002\u6709\u65f6 Haskell \u751f\u6001\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9002\u5408\u6211\u4eec Elm \u4ef7\u503c\u89c2\u7684\u9009\u9879\uff0c\u6bd4\u5982\u53e5\u67c4\u6a21\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u4e86\u5b83\u3002\u6709\u65f6\u4e00\u4e2a\u5e93\u6709\u4e0d\u540c\u7684\u503c\uff0c\u7136\u540e\u9009\u62e9\u4e0d\u4f7f\u7528\u5b83\u4e5f\u5f88\u5bb9\u6613\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u955c\u5934/\u68f1\u955c\u751f\u6001\u7cfb\u7edf\uff0c\u5b83\u5141\u8bb8\u7f16\u5199\u8d85\u7ea7\u7b80\u6d01\u7684\u4ee3\u7801\uff0c\u4f46\u51e0\u4e4e\u662f\u4e00\u79cd\u5fc5\u987b\u9996\u5148\u5b66\u4e60\u7684\u8bed\u8a00\u3002\u6700\u56f0\u96be\u7684\u51b3\u5b9a\u662f\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u6211\u4eec\u514d\u4e8e\u4ee5\u67d0\u79cd\u65b9\u5f0f\u72af\u9519\uff08\u6211\u4eec\u559c\u6b22\uff09\uff0c\u4f46\u9700\u8981\u719f\u6089\u66f4\u591a\u8bed\u8a00\u529f\u80fd\u624d\u80fd\u4f7f\u7528\uff08\u6211\u4eec\u5b81\u613f\u907f\u514d\uff09\u3002\u4e3a\u4e86\u5e2e\u52a9\u6211\u4eec\u505a\u51fa\u66f4\u597d\u7684\u51b3\u5b9a\uff0c\u6211\u4eec\u7ecf\u5e38\u5c1d\u8bd5\u4e24\u79cd\u65b9\u5f0f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u613f\u610f\u6784\u5efa\u4e00\u4e2a\u5e26\u6709\u6216\u4e0d\u5e26\u6709\u590d\u6742\u8bed\u8a00\u7279\u6027\u7684\u8f6f\u4ef6\uff0c\u4ee5\u786e\u4fdd\u590d\u6742\u6027\u7684\u6210\u672c\u503c\u5f97\u8be5\u7279\u6027\u7ed9\u6211\u4eec\u5e26\u6765\u7684\u597d\u5904\u3002\u6211\u4eec\u91c7\u53d6\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5728\u672c\u5730\u505a\u51fa\u51b3\u7b56\u3002\u4e00\u4e2a\u56e2\u961f\u53ef\u80fd\u4f1a\u8bc4\u4f30\u4e00\u4e2a\u65b0\u529f\u80fd\uff0c\u7136\u540e\u6f14\u793a\u5b83\uff0c\u5e76\u5728\u4ed6\u4eec\u5145\u5206\u610f\u8bc6\u5230\u8be5\u529f\u80fd\u503c\u5f97\u4e4b\u540e\u4e0e\u5176\u4ed6\u56e2\u961f\u5206\u4eab\u3002\u8bf7\u8bb0\u4f4f\uff1aHaskell \u7684\u8d85\u80fd\u529b\u662f\u6613\u4e8e\u91cd\u6784\u3002\u4e0e\u6211\u4eec\u7684 ruby\u200b\u200b \u4ee3\u7801\u4e0d\u540c\uff0c\u5728\u6211\u4eec\u7684 Haskell \u4ee3\u7801\u5e93\u4e2d\u8fdb\u884c\u91cd\u5927\u91cd\u5199\u901a\u5e38\u9700\u8981\u6570\u5c0f\u65f6\u6216\u6570\u5929\uff08\u800c\u4e0d\u662f\u6570\u5468\u6216\u6570\u6708\uff09\u7684\u52aa\u529b\u3002\u540c\u65f6\u91c7\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\u6210\u672c\u76f8\u5bf9\u8f83\u4f4e\uff01\u6211\u4eec\u7684\u65b9\u6cd5\u5728\u67d0\u4e9b\u65b9\u9762\u7c7b\u4f3c\u4e8e Elm \u800c\u5728\u5176\u4ed6\u65b9\u9762\u5219\u4e0d\u540c\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u6211\u4eec\u5982\u4f55\u4e0e\u6570\u636e\u5e93\u5bf9\u8bdd\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u79f0\u4e3a quasiquoting \u7684 GHC \u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u5c06 SQL \u67e5\u8be2\u5b57\u7b26\u4e32\u76f4\u63a5\u5d4c\u5165\u5230\u6211\u4eec\u7684 Haskell \u4ee3\u7801\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n{-# LANGUAGE QuasiQuotes #-}module Animals (listAll) whereimport Postgres (query, sql)listAll :: Postgres.Handler -&gt; Task Text (List (Text, Text))listAll postgres = query postgres [sql|SELECT \u7269\u79cd\uff0c\u5c5eFROM Animal|] \u4e00\u4e2a\u540d\u4e3a postgresql-typed \u7684\u5e93\u53ef\u4ee5\u9488\u5bf9\u771f\u5b9e\u7684 Postgres \u6570\u636e\u5e93\u6d4b\u8bd5\u8fd9\u4e9b\u67e5\u8be2\uff0c\u5982\u679c\u67e5\u8be2\u4e0d\u9002\u5408\u6570\u636e\uff0c\u5219\u4f1a\u5728\u7f16\u8bd1\u65f6\u5411\u6211\u4eec\u663e\u793a\u9519\u8bef\u3002\u5982\u679c\u6211\u4eec\u5728\u67e5\u8be2\u4e2d\u5f15\u7528\u7684\u8868\u6216\u5217\u5728\u6570\u636e\u5e93\u4e2d\u4e0d\u5b58\u5728\uff0c\u5219\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528\u9759\u6001\u68c0\u67e5\u6765\u6d88\u9664\u4e00\u6574\u7c7b\u6f5c\u5728\u7684\u5e94\u7528\u7a0b\u5e8f/\u6570\u636e\u5e93\u517c\u5bb9\u6027\u95ee\u9898\uff01\u7f3a\u70b9\u662f\u7f16\u5199\u8fd9\u6837\u7684\u4ee3\u7801\u9700\u8981\u6bcf\u4e2a\u4f7f\u7528\u5b83\u7684\u4eba\u5b66\u4e60\u4e00\u4e9b\u5173\u4e8e\u51c6\u5f15\u53f7\u7684\u77e5\u8bc6\uff0c\u4ee5\u53ca\u4e0d\u540c\u7c7b\u578b\u67e5\u8be2\u7684\u671f\u671b\u8fd4\u56de\u7c7b\u578b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528\u67d0\u79cd\u67e5\u8be2\u5e93\u4e5f\u6709\u4e00\u4e2a\u5b66\u4e60\u66f2\u7ebf\uff0c\u800c\u4e14\u67e5\u8be2\u5e93\u5f80\u5f80\u975e\u5e38\u5927\uff0c\u53ef\u4ee5\u652f\u6301\u6240\u6709\u4e0d\u540c\u7c7b\u578b\u7684\u67e5\u8be2\u3002\u53e6\u4e00\u4e2a\u6211\u4eec\u5728\u9009\u62e9\u7f51\u7edc\u670d\u52a1\u5668\u5e93\u65f6\u727a\u7272\u4e86\u989d\u5916\u7684\u5b89\u5168\u6027\u548c\u8bed\u8a00\u590d\u6742\u6027\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528\u4e86servant\uff0c\u8fd9\u662f\u4e00\u4e2a\u5141\u8bb8\u60a8\u4f7f\u7528\u7c7b\u578b\u8868\u8fbeREST API \u7684\u5e93\uff0c\u5982\u4e0b\u6240\u793a\uff1a import Servantdata Routes route = Routes { listTodos :: route :- &quot;todos&quot; :&gt; Get &#39;\\[JSON\\] [Todo], updateTodo :: route :- &quot;todos&quot; :&gt; Capture &quot;id&quot; Int :&gt; ReqBody &#39;[JSON] Todo :&gt; Put &#39;[JSON] NoContent, deleteTodo :: route :- &quot;todos&quot; :&gt; Capture &quot;id&quot; Int :&gt; Delete &#39;[JSON] NoContent } deriving (Generic) Servant \u662f\u4e00\u4e2a\u5927\u578b\u5e93\uff0c\u5b83\u4f7f\u7528\u4e86\u5927\u91cf\u7c7b\u578b\u7ea7\u7f16\u7a0b\u6280\u672f\uff0c\u8fd9\u5728 Elm \u4e2d\u975e\u5e38\u7f55\u89c1\uff0c\u56e0\u6b64\u4e86\u89e3\u7c7b\u578b\u9b54\u672f\u7684\u5de5\u4f5c\u539f\u7406\u9700\u8981\u5f88\u9ad8\u7684\u5b66\u4e60\u6210\u672c.\u5728\u6ca1\u6709\u6df1\u5165\u7406\u89e3\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u5b83\u662f\u76f8\u5f53\u7b80\u5355\u7684\u3002\u4f7f\u7528 Servant \u83b7\u5f97\u7684\u597d\u5904\u8d85\u8fc7\u4e86\u6269\u5c55\u590d\u6742\u6027\u7684\u6210\u672c\u3002\u57fa\u4e8e\u4e0a\u4f8b\u4e2d\u7684\u7c7b\u578b\uff0cservant \u751f\u6001\u7cfb\u7edf\u53ef\u4ee5\u751f\u6210\u5176\u4ed6\u8bed\u8a00\uff08\u5982 Elm \u6216 Ruby\uff09\u7684\u51fd\u6570\u3002\u4f7f\u7528\u8fd9\u4e9b\u529f\u80fd\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u540e\u7aef\u5230\u524d\u7aef\u6216\u670d\u52a1\u5230\u670d\u52a1\u7684\u901a\u4fe1\u6765\u8282\u7701\u65f6\u95f4\u3002\u5982\u679c\u67d0\u4e9b Haskell \u7c7b\u578b\u4ee5\u5411\u540e\u4e0d\u517c\u5bb9\u7684\u65b9\u5f0f\u66f4\u6539\uff0c\u6211\u4eec\u5c06\u751f\u6210\u65b0\u7684 Elm \u4ee3\u7801\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5728 Elm \u7aef\u5f15\u5165\u7f16\u8bd1\u5668\u9519\u8bef\u3002\n\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u4f7f\u7528servant\uff01\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u60f3\u8981\u7684\u662f\u7f16\u8bd1\u65f6\u670d\u52a1\u5668/\u5ba2\u6237\u7aef\u517c\u5bb9\u6027\u68c0\u67e5\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u541e\u4e0b Servant \u590d\u6742\u6027\u7684\u539f\u56e0\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5728\u6ca1\u6709\u4e0a\u9762\u6f14\u793a\u7684\u7c7b\u578b\u7ea7\u7f16\u7a0b\u7684\u60c5\u51b5\u4e0b\u83b7\u5f97\u540c\u6837\u7684\u597d\u5904\uff0c\u6211\u4eec\u66f4\u613f\u610f\u8fd9\u6837\u505a\u3002\u5e0c\u671b\u5728\u672a\u6765\uff0c\u53e6\u4e00\u4e2a\u5e93\u80fd\u591f\u4ece\u66f4\u50cf Elm \u7684 API \u4e2d\u63d0\u4f9b\u540c\u6837\u7684\u597d\u5904\u3002\u6211\u4eec\u6b63\u5728\u751f\u4ea7\u4e2d\u8fd0\u884c\u4e0a\u9762\u8ba8\u8bba\u7684\u5e93\u3002\u6211\u4eec\u6700\u5e38\u7528\u7684 Haskell \u5e94\u7528\u7a0b\u5e8f\u6bcf\u5206\u949f\u63a5\u6536\u6570\u5341\u4e07\u4e2a\u8bf7\u6c42\uff0c\u5e76\u4e14\u51e0\u4e4e\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u9519\u8bef\u3002\u4ee3\u7801\u53ef\u4ee5\u5728 NoRedInk/haskell-libraries \u627e\u5230\u3002\u5e93\u5df2\u53d1\u5e03\u5230 hackage \u548c stackage\u3002\u6211\u4eec\u5f88\u60f3\u77e5\u9053\u60a8\u7684\u60f3\u6cd5\uff01", "note_en": "Many years ago NRI adopted Elm as a frontend language. We started small with a disposable proof of concept, and as the engineering team increasingly was bought into Elm being a  much better developer experience than JavaScript more and more of our frontend development happened in Elm. Today almost all of our frontend is written in Elm.\n Meanwhile, on the backend, we use Ruby on Rails. Rails has served us well and has supported amazing growth of our website, both in terms of the features it supports, and the number of students and teachers who use it. But we\u2019ve come to miss some of the tools that make us so productive in Elm: Tools like custom types for modeling data, or the type checker and its helpful error messages, or the ease of writing (fast) tests.\n A couple of years ago we started looking into Haskell as an alternative backend language that could bring to our backend some of the benefits we experience writing Elm in the frontend. Today some key parts of our backend code are written in Haskell. Over the years we\u2019ve developed our style of writing Haskell, which can be described as very Elm-like (it\u2019s also still changing!).\n   Elm is a small language with great error messages, great documentation, and a great community. Together these make Elm one of the nicest programming languages  to learn. Participants in an  ElmBridge event will go from knowing nothing of the language to writing a real application using Elm in 5 hours.\n We have a huge amount of Elm code at NoRedInk, and it supports some pretty tricky UI work. Elm scales well to a growing and increasingly complicated codebase. The compiler stays fast and we don\u2019t lose confidence in our ability to make changes to our code. You can learn more about our Elm story  here.\n  Haskell shares a lot of the language features we like in Elm: Custom types to help us model our data. Pure functions and explicit side effects. Writing code without runtime exceptions (mostly).\n When it comes to ease of learning, Haskell makes different trade-offs than Elm. The language is much bigger, especially when including the many optional language features that can be enabled. It\u2019s entirely up to you whether you want to use these features in your code, but you\u2019ll need to know about many of them if you want to make use of Haskell\u2019s packages, documentation, and how-tos. Haskell\u2019s compiler errors typically aren\u2019t as helpful as Elm\u2019s are. Finally, we\u2019ve read many Haskell books and blog posts, but haven\u2019t found anything getting us from knowing no Haskell to writing a real application in it that\u2019s anywhere near as small and effective as the  Elm Guide.\n  Many of the niceties we\u2019re used to in Elm we get in Haskell too. But Haskell has many additional features, and each one we use adds to the list of things that an Elm programmer will need to learn. So instead we took a path that many in the Haskell community took before us: limit ourselves to a subset of the language.\n There are many styles of writing Haskell, each with its own trade-offs. Examples include Protolude, RIO, the lens ecosystem, and many more. Our approach differs in being strongly inspired by Elm. So what does our Elm-inspired style of writing Haskell look like?\n  Our earliest effort in making our Haskell code more Elm-like was porting the Elm standard library to Haskell. We\u2019ve open-sourced this port as a library named   nri-prelude. It contains Haskell counterparts of the Elm modules for working with  Strings,  Lists,  Dicts, and more.\n nri-prelude also includes a port of  elm-test. It provides everything you need for writing unit tests and basic property tests.\n Finally, it includes a GHC plugin that makes it so Haskell\u2019s default  Prelude (basically its standard library) behaves like Elm\u2019s defaults. For example, it adds implicit qualified imports of some modules like  List, similar to what Elm does.\n  Elm is opinionated in supporting a single architecture for frontend applications, fittingly called The Elm Architecture. One of its nice qualities is that it forces a separation of application logic (all those conditionals and loops) and effects (things like talking to a database or getting the current time). We love using The Elm Architecture writing frontend applications, but don\u2019t see a way to apply it 1:1 to backend development. In the F# community, they use the Elm Architecture for  some backend features (see:  When to use Elmish Bridge), but it\u2019s not generally applicable. We\u2019d still like to encourage that separation between application logic and effects though, having seen some of the effects of losing that distinction in our backend code. Read our other post  +\u2604\ufe0f Pufferfish, please scale the site! if you want to read more about this.\n Out of many options we\u2019re currently using  the handle pattern for managing effects. For each type of effect, we create a  Handler type (we added the extra  r in a typo way back and it has stuck around. Sorry). We use this pattern across our libraries for talking to outside systems:   nri-postgresql,   nri-http,   nri-redis, and   nri-kafka.\n Without The Elm Architecture, we depend heavily on chaining permutations through a stateful  Task type. This feels similar to imperative coding: First, do A, then B, then C. Hopefully, when we\u2019re later on in our Haskell journey, we\u2019ll discover a nice architecture to simplify our backend code.\n  One way in which Haskell is different from both Elm and Rails is that it is not particularly opinionated. Often the Haskell ecosystem offers multiple different ways to do one particular thing. So whether it\u2019s writing an http server, logging, or talking with a database, the first time we do any of these things we\u2019ll need to decide  how.\n   Sometimes the Haskell ecosystem provides an option that fits our Elm values, like with the handle pattern, and so we go with it. Other times a library has different values, and then the choice not to use it is easy as well. An example of this is lens/prism ecosystem, which allows one to write super succinct code, but is almost a language onto itself that one has to learn first.\n The hardest decisions are the ones where an approach protects us against making mistakes in some way (which we like) but requires familiarity with more language features to use (which we prefer to avoid).\n To help us make better decisions, we often  try it both ways. That is, we\u2019re willing to build a piece of software with &amp; without a complex language feature to ensure the  cost of the complexity is worth the benefit that the feature brings us.\n Another approach we take is making decisions locally. A single team might evaluate a new feature, and then demo it and share it with other teams after they have a good sense the feature is worth it. Remember: a super-power of Haskell is easy refactorability. Unlike our ruby code, going through and doing major re-writes in our Haskell codebase is often an hours-or-days-long (rather than weeks-or-months-long) endeavor. Adopting two different patterns simultaneously has a relatively small cost!\n   One example where our approach is Elm-like in some ways but not in others is how we talk to the database. We\u2019re using a GHC feature called quasiquoting for this, which allow us to embed SQL query strings directly into our Haskell code, like this:\n {-# LANGUAGE QuasiQuotes #-}module Animals (listAll) whereimport Postgres (query, sql)listAll :: Postgres.Handler -&gt; Task Text (List (Text, Text))listAll postgres = query postgres [sql|SELECT species, genus FROM animals|]\n A library called   postgresql-typed can test these queries against a real Postgres database and show us an error at compile time if the query doesn\u2019t fit the data. Such a compile-time error might happen if a table or column we reference in a query doesn\u2019t exist in the database. This way we use static checks to eliminate a whole class of potential app/database compatibility problems!\n The downside is that writing code like this requires everyone working with it to learn a bit about quasi quotes, and what return type to expect for different kinds of queries. That said, using some kind of querying library instead has a learning curve too, and query libraries tend to be pretty big to support all the different kinds of queries that can be made.\n  Another example where we traded additional safety against language complexity is in our choice of webserver library. We went with  servant here, a library that lets you express REST APIs using types, like this:\n import Servantdata Routes route = Routes { listTodos :: route :- &#34;todos&#34; :&gt; Get &#39;\\[JSON\\] [Todo], updateTodo :: route :- &#34;todos&#34; :&gt; Capture &#34;id&#34; Int :&gt; ReqBody &#39;[JSON] Todo :&gt; Put &#39;[JSON] NoContent, deleteTodo :: route :- &#34;todos&#34; :&gt; Capture &#34;id&#34; Int :&gt; Delete &#39;[JSON] NoContent } deriving (Generic)\n Servant is a big library that makes use of a lot of type-level programming techniques, which are pretty uncommon in Elm, so there\u2019s a steep learning cost associated with  understanding how the type magic works. Using it without a deep understanding is reasonably straightforward.\n The benefits gained from using Servant outweigh the cost of expanded complexity. Based on a type like the one in the example above, the servant ecosystem can generate functions in other languages like Elm or Ruby. Using these functions means we can save time with backend-to-frontend or service-to-service communication. If some Haskell type changes in a backward-incompatible fashion we will generate new Elm code, and this might introduce a compiler error on the Elm side.\n So for now we\u2019re using servant! It\u2019s important to note that what we  want is compile-time server/client compatibility checking, and that\u2019s why we swallow Servant\u2019s complexity. If we could get the same benefit without the type-level programming demonstrated above, we would prefer that. Hopefully, in the future, another library will offer the same benefits from a more Elm-like API.\n  We\u2019re running the libraries discussed above in production. Our most-used Haskell application receives hundreds of thousands of requests per minute without issue and produces hardly any errors.\n Code can be found at   NoRedInk/haskell-libraries. Libraries have been published to hackage and stackage. We\u2019d love to know what you think!", "posttime": "2021-08-06 09:00:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7231\u597d\u8005,elm", "title": "\u6986\u6811\u7231\u597d\u8005\u7684 Haskell", "title_en": "Haskell for the Elm Enthusiast", "transed": 1, "url": "https://blog.noredink.com/post/658510851000713216/haskell-for-the-elm-enthusiast", "via": "", "real_tags": ["\u7231\u597d\u8005", "elm"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071682, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\ud83d\udd76 \u5f00\u7bb1\u5373\u7528\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u5feb\u901f\u7acb\u4f53\u6e32\u67d3\u3001VR \u63a7\u5236\u5668\u3001\u624b\u90e8\u8ddf\u8e2a\u3001\u89e6\u89c9\u3001\u7a7a\u95f4\u97f3\u9891\u30013D \u7269\u7406\u3001PBR \u6750\u6599\u3001SDF \u5b57\u4f53\u3001\u591a\u4eba\u6e38\u620f\u7b49\u3002 \ud83c\udf88 \u6574\u4e2a\u5f15\u64ce\u4e3a 1MB\uff0c\u8fd0\u884c\u5728 LuaJIT \u4e0a\uff0cLuaJIT \u662f\u56f4\u7ed5\u8fd9\u4e9b\u90e8\u5206\u7684\u6700\u5feb\u7684 JIT \u7f16\u8bd1\u5668\u3002\u9879\u76ee\u53ea\u662f\u5176\u4e2d\u5305\u542b\u811a\u672c\u548c\u8d44\u4ea7\u7684\u6587\u4ef6\u5939\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8fdb\u884c\u7ec4\u7ec7\u3002 \ud83e\udd14 \u60a8\u53ef\u4ee5\u7f16\u5199 3 \u884c Lua \u5e76\u5c06\u6587\u4ef6\u5939\u62d6\u653e\u5230 exe \u4e0a\u4ee5\u83b7\u5f97\u5de5\u4f5c\u7684 VR \u573a\u666f\u3002 Lua \u4ee5\u5176\u7b80\u5355\u6027\u800c\u8457\u79f0\uff0c\u975e\u5e38\u9002\u5408\u5b66\u4e60\u3002\u4eba\u4eec\u5c06 L\u00d6VR \u7528\u4e8e\u6e38\u620f\u5236\u4f5c\u3001\u5546\u4e1a\u9879\u76ee\u3001\u5de5\u5177\u3001\u6559\u80b2\u548c VR/3D/2D \u539f\u578b\u5236\u4f5c\u3002\u4e00\u4e9b\u5927\u80c6\u7684\u4eba\u751a\u81f3\u5c06 L\u00d6VR \u5d4c\u5165\u5230 Unity \u4e2d\uff0c\u5c06\u5f15\u64ce\u79fb\u690d\u5230\u5176\u4ed6\u8bed\u8a00\uff0c\u5e76\u8ba9\u5b83\u5728\u5fae\u578b\u5fae\u63a7\u5236\u5668\u4e0a\u8fd0\u884c\u3002\u501f\u52a9 L\u00d6VR \u7684\u5f3a\u5927\u529f\u80fd\uff0c\u60a8\u51e0\u4e4e\u53ef\u4ee5\u5c06\u4efb\u4f55\u60f3\u6cd5\u53d8\u4e3a\u73b0\u5b9e\u3002\u51fd\u6570 lovr.draw() for i, hand in ipairs(lovr.headset.getHands()) \u505a\u5c40\u90e8 x, y, z = lovr.headset.getPosition(hand) lovr.graphics.sphere(x, y, z, . 1) \u7ed3\u675f\u51fd\u6570 lovr.load() \u6a21\u578b = lovr.graphics.newModel( &#39;monkey.gltf&#39;) \u7ed3\u675f\u51fd\u6570 lovr.draw() \u6a21\u578b:draw( 0, 2, -3, 2, lovr.timer.getTime( ) * .2) end \u60f3\u8981\u67e5\u770b\u66f4\u591a\u793a\u4f8b\u6216\u4e86\u89e3\u5982\u4f55\u5165\u95e8\uff1f\u67e5\u770b\u5165\u95e8\u6559\u7a0b\u3002", "note_en": "\ud83d\udd76    Out of the box you get fast stereo rendering, VR controllers, hand tracking, haptics, spatial audio, 3D physics, PBR materials, SDF fonts, multiplayer, and more.\n  \ud83c\udf88    The entire engine is 1MB and runs on LuaJIT, the fastest JIT compiler round these parts. Projects are just folders with scripts and assets in them, organized however you want.\n  \ud83e\udd14    You can write 3 lines of Lua and drag and drop a folder onto an exe to get a working VR scene. Lua is known for its simplicity, making it great for learning.\n     People are using L\u00d6VR for game jams, commercial projects, tools, education, and VR/3D/2D prototyping. Some daring souls have even embedded L\u00d6VR inside of Unity, ported the engine to other languages, and gotten it running on tiny microcontrollers. With the power of L\u00d6VR, you can turn virtually any idea into reality.\n          function lovr.draw()    for i, hand  in  ipairs(lovr.headset.getHands())  do    local x, y, z = lovr.headset.getPosition(hand)   lovr.graphics.sphere(x, y, z,  .1)    end   end\n      function lovr.load()   model = lovr.graphics.newModel( &#39;monkey.gltf&#39;)   end    function lovr.draw()   model:draw( 0,  2,  -3,  2, lovr.timer.getTime() *  .2)   end\n  Want to see more examples or learn how to get started?  Check out the  Getting Started tutorial.", "posttime": "2021-08-06 09:00:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,building,vr", "title": "L\u00d6VR \u2013 \u7528\u4e8e\u5feb\u901f\u6784\u5efa\u6c89\u6d78\u5f0f 3D \u4f53\u9a8c\u7684\u5f00\u6e90\u6846\u67b6", "title_en": "L\u00d6VR \u2013 An open source framework for rapidly building immersive 3D experiences", "transed": 1, "url": "https://lovr.org", "via": "", "real_tags": ["\u5f00\u6e90", "building", "vr"]}]