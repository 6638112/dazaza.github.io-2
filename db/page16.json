[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1074734, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bbaAMD CPU\u5206\u652f\u9884\u6d4b\u5668\u7684\u4e00\u4e9b\u6280\u672f\u7ec6\u8282\uff0c\u91cd\u70b9\u8ba8\u8bba\u5b83\u5728\u7b80\u5355\u6761\u4ef6\u5206\u652f\u4e2d\u7684\u884c\u4e3a\u3002\u6211\u4eec\u8fd8\u8ba8\u8bba\u4e86\u8fd9\u79cd\u884c\u4e3a\u4e0e\u5229\u7528\u5e38\u89c1\u548c\u4e0d\u5e38\u89c1\u7684Spectre v1\u5c0f\u5de5\u5177\u7684\u5173\u7cfb\u3002\u4f5c\u4e3a\u8ba8\u8bba\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u6765\u770b\u770bAMD&#39\uff1bs&#34\uff1b\u7ba1\u7406AMD\u5904\u7406\u5668\u6295\u673a\u7684\u8f6f\u4ef6\u6280\u672f&#34\uff1b\u767d\u76ae\u4e66[1]\u5e76\u8bc4\u4f30\u5efa\u8bae\u7684\u7f13\u89e3\u63aa\u65bd\uff08V1-1\u81f3V1-3\uff09\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u770b\u4f3c\u6e29\u548c\u7684\u4eba\u5de5\u5e7d\u7075v1\u5c0f\u5de5\u5177\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u6613\u4e8e\u4f7f\u7528\u7684\u4efb\u610f\u5185\u5b58\u6cc4\u6f0f\u539f\u8bed\u52a0\u4ee5\u5229\u7528\u3002\u6700\u540e\uff0c\u6211\u4eec\u590d\u5236\u4e86&#34\uff1b\u5bf9\u91ce\u5916\u6295\u673a\u578b\u6df7\u4e71\u8106\u5f31\u6027\u7684\u5206\u6790#34\uff1b\u8bba\u6587[2]\u5c55\u793a\u4e86\u5728AMD CPU\uff08\u4e0e\u82f1\u7279\u5c14\u76f8\u6bd4\uff09\u4e0a\u5f00\u53d1\u6b64\u7c7bSpectre v1\u5c0f\u5de5\u5177\u7684\u6613\u7528\u6027\u3002\n\u672c\u6587\u5177\u6709\u9ad8\u5ea6\u7684\u6280\u672f\u6027\uff0c\u4ee5\u56fe\u8868\u548c\u5217\u8868\u7684\u5f62\u5f0f\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7ecf\u9a8c\u6570\u636e\u3002\u5047\u8bbe\u5bf9\u73b0\u4ee3CPU\u7684\u5fae\u4f53\u7cfb\u7ed3\u6784\u7ec6\u8282\u6709\u4e2d\u7b49\u7a0b\u5ea6\u7684\u7406\u89e3\u3002\u5728\u9002\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8ba8\u8bba\u7684\u4e3b\u9898\u8fdb\u884c\u7b80\u8981\u4ecb\u7ecd\u3002\u5bf9\u4f60\u6765\u8bf4\u592a\u591a\u4e86\uff1f\u6ca1\u95ee\u9898\uff0c\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u6700\u540e\u8bc4\u8bba\u90e8\u5206\uff0c\u4e86\u89e3TL\uff1b\u535a\u58eb\n\u4e3a\u4e86\u4f7f\u672c\u6587\u66f4\u6613\u4e8e\u9605\u8bfb\u548c\u6d88\u5316\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u9075\u5faa\u7c7b\u4f3cFAQ\u7684\u6587\u6863\u7ed3\u6784\u3002\u8ba8\u8bba\u7684\u4e3b\u9898\u9010\u6e10\u5448\u73b0\u51fa\u8d8a\u6765\u8d8a\u8be6\u7ec6\u7684\u5185\u5bb9\u3002\u5e0c\u671b\u8fd9\u4e2a\u4e0d\u5bfb\u5e38\u7684\u535a\u5ba2\u5e16\u5b50\u7ed3\u6784\u4e0e\u6240\u63cf\u8ff0\u7684\u6280\u672f\u6750\u6599\u914d\u5408\u5f97\u5f88\u597d\u3002\n\u4eab\u53d7\u53e6\u4e00\u4e2a\u5173\u4e8e\u9884\u6d4b\u5931\u8bef\u7684\u5206\u652f\u3001\u5e7d\u7075v1\u5c0f\u5de5\u5177\u548c\u4e00\u4e24\u4e2aPoC\u7684\u6545\u4e8b\u5427\u3002\n\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u57282022\u5e741\u67087\u65e5\u81f32\u67082\u65e5\u671f\u95f4\u4e0eAMD PSIRT\u56e2\u961f\u8ba8\u8bba\u4e86\u6211\u4eec\u7684\u53d1\u73b0\u548c\u89c2\u5bdf\u7ed3\u679c\u3002AMD\u5f97\u51fa\u7ed3\u8bba\uff0c\u5b83\u4eec\u90fd\u662f\u5178\u578b\u7684Spectre v1\u573a\u666f\uff0c\u5e76\u5efa\u8bae\u6309\u7167\u6307\u5357[1]\u4e2d\u7684\u89e3\u91ca\u5e94\u7528\u7f13\u89e3\u63aa\u65bd\u3002AMD\uff08\u53ef\u4ee5\u7406\u89e3\uff0c\u5e76\u4e0e\u5176\u4ed6\u82af\u7247\u5236\u9020\u5546\u4fdd\u6301\u4e00\u81f4\uff09\u4e0d\u60f3\u5bf9\u5176\u5206\u652f\u9884\u6d4b\u5668\u7684\u8bbe\u8ba1\u53d1\u8868\u8bc4\u8bba\uff0c\u6211\u4eec\u8ba4\u4e3a\uff0c\u4f3c\u4e4e\u4e5f\u6ca1\u6709\u5174\u8da3\u5bf9\u62a5\u544a\u7684\u884c\u4e3a\u53ca\u5176\u5f71\u54cd\u8fdb\u884c\u66f4\u5f7b\u5e95\u7684\u5206\u6790\u3002\u6211\u4eec\u4e0d\u77e5\u9053\u8fd9\u79cd\u5206\u6790\u662f\u5728\u6211\u4eec\u7684\u62a5\u544a\u4e4b\u524d\u8fdb\u884c\u7684\uff0c\u8fd8\u662f\u5728\u62a5\u544a\u4e4b\u540e\u8fdb\u884c\u7684\u3002\n\u6709\u9274\u4e8e\u6b64\uff0c\u6211\u4eec\u51b3\u5b9a\u4eb2\u81ea\u5f7b\u5e95\u8c03\u67e5\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u5728\u8fd9\u91cc\u516c\u5f00\u5c55\u793a\u6211\u4eec\u7684\u7814\u7a76\u6210\u679c\u3002\u6211\u4eec\u8ba4\u4e3a\uff0c\u5bf9\u4e8e\u672c\u6587\u8ba8\u8bba\u7684\u573a\u666f\uff0c\u5efa\u8bae\u7684\u7f13\u89e3\u63aa\u65bd\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u56e0\u4e3a\u4e0b\u9762\u7684\u7ec6\u8282\u6709\u671b\u8bf4\u660e\u8fd9\u4e9b\u539f\u56e0\u3002\n\u6545\u4e8b\u4ece\u4e00\u4e2a\u6709\u70b9\u610f\u5916\u4f46\u51fa\u4eba\u610f\u6599\u7684\u89c2\u5bdf\u5f00\u59cb\u3002\u6709\u4e00\u6b21\u6211\u95ee\u81ea\u5df1\uff1a&#34\uff1b\u4e00\u4e2a\u53ef\u8ba1\u7b97\u3001\u65e0\u5185\u5b58\u8bbf\u95ee\u4e14\u53ef\u80fd\u65e0\u5ef6\u8fdf\u7684\u6761\u4ef6\u5206\u652f\u662f\u5426\u4f1a\u88ab\u9884\u6d4b\u5931\u8bef\uff1f\u5982\u679c\u53ef\u4ee5\uff0c\u60c5\u51b5\u4f1a\u600e\u6837&#34;. \u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u591a\u5c11\u5df2\u7ecf\u7ed9\u51fa\u4e86\u3002\u73b0\u4ee3CPU\u4f1a\u5bf9\u4efb\u4f55\u5206\u652f\u8fdb\u884c\u9519\u8bef\u9884\u6d4b\u7684\u539f\u56e0\u6709\u5f88\u591a\u3002\u5fae\u4f53\u7cfb\u7ed3\u6784\u8d44\u6e90\u4e89\u7528\u3001\u5206\u652f\u6307\u4ee4\u9519\u4f4d\u3001\u7f13\u5b58\u7ebf\u6216\u9875\u9762\u8fb9\u754c\u62c6\u5206\u53ef\u80fd\u662f\u5176\u4e2d\u7684\u4e00\u4e9b\u539f\u56e0\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u6545\u610f\u5bf9\u5e7d\u7075v1\u5c0f\u5de5\u5177\u8fdb\u884c\u5206\u652f\u8bef\u8bad\u7ec3\u7684\u6280\u672f\u3002\n\u7136\u800c\uff0c\u8bb8\u591a\u4f9b\u5e94\u5546\u548c\u5b89\u5168\u4ece\u4e1a\u4eba\u5458\u4f3c\u4e4e\u90fd\u6709\u4e00\u4e2a\u5171\u540c\u7684\u8bef\u89e3\uff0c\u5373Spectre v1\u5c0f\u5de5\u5177\u4e3b\u8981\u662f\u5173\u4e8e\u8d85\u51fa\u8303\u56f4\u7684\u9635\u5217\u5185\u5b58\u8bbf\u95ee\uff0c\u7531\u5177\u6709\u53ef\u53d8\u8ba1\u7b97\u5ef6\u8fdf\uff08\u901a\u5e38\u662f\u5185\u5b58\u8bbf\u95ee\uff09\u7684\u9635\u5217\u7ed1\u5b9a\u68c0\u67e5\u7ec4\u6210\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u60f3\u5230\u7684\u662f\u53ef\u8ba1\u7b97\u7684\u6761\u4ef6\u5206\u652f\uff0c\u5b83\u7684\u6761\u4ef6\u64cd\u4f5c\u6570\u5728\u901a\u7528\u5bc4\u5b58\u5668\u4e2d\u7acb\u5373\u53ef\u7528\u3002\u8fd9\u6837\u7684\u5206\u652f\u662f\u5426\u53ef\u80fd\u4ee5\u53ef\u63a7\u7684\u65b9\u5f0f\u9884\u6d4b\u5931\u8bef\uff1f\u5b83\u5bf9\u5b89\u5168\u6709\u5f71\u54cd\u5417\uff1f\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u6765\u770b\u770b\u3002\n\u6211\u901a\u5e38\u901a\u8fc7\u4f7f\u7528\u6211\u6700\u559c\u6b22\u7684\u5de5\u5177KTF\uff08Kernel Test Framework[3]\uff09\u5b9e\u73b0\u7b80\u5355\u7684\u5b9e\u9a8c\u6765\u5f00\u59cb\u8fd9\u7c7b\u7814\u7a76\uff0c\u6211\u5728\u4e0d\u4e45\u524d\u521b\u5efa\u4e86KTF\uff0c\u6b63\u662f\u51fa\u4e8e\u8fd9\u6837\u7684\u76ee\u7684\u3002KTF\u4f7f\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u6267\u884c\u73af\u5883\uff08\u88f8\u673a\u6216\u865a\u62df\u5316\uff09\u4e2d\u91cd\u65b0\u8fd0\u884c\u5b9e\u9a8c\u53d8\u5f97\u5f88\u5bb9\u6613\uff0c\u5e76\u914d\u5907\u4e86\u4e00\u4e9b\u7ecf\u8fc7\u826f\u597d\u6d4b\u8bd5\u7684\u57fa\u4e8e\u7f13\u5b58\u7684\u4fa7\u901a\u9053\u539f\u8bed\u3002\n0.mov$CACHE_LINE_ADDR\uff0c%rsi\uff1b\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef\u7684\u5185\u5b58\u5730\u57401\u3002clflush\uff08%rsi\uff09\uff1b\u5c06\u7f13\u5b58\u7ebf\u4ece\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u6e05\u9664\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u72b6\u60012\u3002\u7b54\u68483\u3002\u5fe0\u8bda\uff1b\u786e\u4fdd\u7f13\u5b58\u7ebf\u771f\u7684\u57284\u4e4b\u5916\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=1.5\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL6\u3002mov\uff08%rsi\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c7\u3002\u7ed3\u675f\u6807\u7b7e\uff1a8\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\n\u95ee\u9898\u662f\uff1a\u4f4d\u7f6e5\u5904\u7684\u201c\u603b\u662f\u6267\u884c\u201d\u5206\u652f\u6709\u591a\u5c11\u6b21\u4f1a\u88ab\u9884\u6d4b\u5931\u8bef\uff1f\n\u6211\u5728\u4e00\u4e2a100k\u6b21\u7684\u5faa\u73af\u4e2d\u8fd0\u884c\u4e86\u5341\u6b21\u4ee3\u7801\uff0c\u5e76\u7edf\u8ba1\u4e86\u6240\u6709\u5bf9CACHE_LINE_ADDR\u7684\u4f4e\u5ef6\u8fdf\u8bbf\u95ee\uff0c\u8fd9\u8868\u660e\u63a8\u6d4b\u6267\u884c\u7684\u5185\u5b58\u8d1f\u8f7d\u3002\u8fd9\u5c31\u662f\u6211\u5f97\u5230\u7684\uff1a\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0c\u8fed\u4ee3\u6b21\u65706100000 2100000 4100000 6100000 5100000 4100000 4100000 6100000 4100000 7100000\u603b\u8ba1\uff1a48\n\u5217CL0\uff08\u4ee5\u53ca\u540e\u9762\u7684\u5b9e\u9a8c\u4e2d\u7684CL1\uff09\u8868\u793a\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u63a8\u6d4b\u52a0\u8f7d\u6d4b\u91cf\u7f13\u5b58\u7ebf\u7684\u6b21\u6570\uff08\u5373\u9884\u6d4b\u5931\u8bef\u7684\u6b21\u6570\uff09\u4e3b\u5faa\u73af\u8fed\u4ee3\u7684\u6b21\u6570\uff0c\u5bf9\u4e8e\u5341\u6b21\u6267\u884c\u4e2d\u7684\u6bcf\u4e00\u6b21\u3002\u603b\u6570\u662f\u53d1\u751f\u7684\u6240\u6709\u9884\u6d4b\u5931\u8bef\u7684\u603b\u548c\u3002Baseline\u662f\u4ece\u7f13\u5b58\u8bbf\u95ee\u5185\u5b58\u6570\u636e\u6240\u9700\u7684\u5e73\u5747CPU\u5468\u671f\u6570\u3002\n\u6211\u6ca1\u60f3\u5230\u4f1a\u8fd9\u6837\u3002\u4e00\u4e9b\u4e0d\u89c4\u5219\u7684\u4e8b\u4ef6\u5e76\u4e0d\u4ee4\u4eba\u9707\u60ca\uff0c\u4f46\u8fd9\u662f\u5f88\u6b63\u5e38\u7684\u3002\u6211\u5728\u8fd9\u4e2a\u9886\u57df\u5ea6\u8fc7\u7684\u51e0\u5e74\u8ba9\u6211\u660e\u767d\uff0c\u8fd9\u53ef\u80fd\u6beb\u65e0\u610f\u4e49\u3002\u53ef\u80fd\u5b58\u5728\u7f13\u5b58\u566a\u97f3\uff08\u4f8b\u5982\uff0c\u7531\u4e8e\u9891\u7e41\u4e2d\u65ad\u6216\u540c\u7ea7\u8d85\u7ebf\u7a0b\u6d3b\u52a8\uff09\u3001\u57fa\u7ebf\u8ba1\u7b97\u9519\u8bef\u3001\u7531\u4e8e\u6211\u6d4b\u8bd5\u7684\u865a\u62df\u673a\u7684vCPU\u6d6e\u52a8\u800c\u4ea7\u751f\u7684\u5047\u4fe1\u53f7\uff0c\u6216\u8005\u5927\u91cf\u5176\u4ed6\u539f\u56e0\u7834\u574f\u4e86\u5b9e\u9a8c\u3002\n\u4e3a\u4e86\u5feb\u901f\u6392\u9664\u5176\u4e2d\u4e00\u4e9b\uff0c\u6211\u503e\u5411\u4e8e\u6dfb\u52a0\u53e6\u4e00\u4e2a\u975e\u51b2\u7a81\u6d4b\u91cf\u7f13\u5b58\u7ebf\uff0c\u5e76\u5728\u5b9e\u9a8c\u8fd0\u884c\u65f6\u6d4b\u91cf\u4e24\u4e2a\u7f13\u5b58\u7ebf\u3002\u5982\u679c\u4fe1\u53f7\u6ca1\u6709\u76f8\u5e94\u4e14\u53ef\u9760\u5730\u53d8\u5316\uff0c\u5219\u5b9e\u9a8c\u68c0\u6d4b\u5230\u566a\u58f0\u3002\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5fe0\u8bda\uff1b\u786e\u4fdd\u7f13\u5b58\u7ebf\u771f\u7684\u57286\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=17\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL8\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c9\u3002\u7ed3\u675f\u6807\u7b7e\uff1aA.\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\n\u6211\u5728100k\u6b21\u8fed\u4ee3\u7684\u5faa\u73af\u4e2d\u518d\u6b21\u8fd0\u884c\u4e86\u8fd9\u6bb5\u4ee3\u7801\u4e24\u6b21\uff0c\u6bcf\u6b21\u90fd\u5728\u4f4d\u7f6e8\u4f7f\u7528\u4e0d\u540c\u7684\u7f13\u5b58\u7ebf\u3002\u8fd9\u662f\u6211\u4e3a%rsi\u5f97\u5230\u7684\uff1a\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200 CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65704\uff0c0100000 2\uff0c0100000 4\uff0c0100000 1\uff0c0100000 2\uff0c0100000 3\uff0c0100000 2\uff0c0100000 4\uff0c0100000 2\uff0c0100000 4\uff0c0100000\u603b\u8ba1\uff1a28\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200 CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65700\uff0c3100000\uff0c3100000\uff0c1100000\uff0c3100000\uff0c3100000\uff0c3100000\uff0c2100000\uff0c2100000\uff0c2100000\uff0c2100000\uff0c6100000\uff0c3100000\u603b\u8ba1\uff1a28\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u5f00\u59cb\u6000\u7591\u53ef\u80fd\u771f\u7684\u51fa\u4e86\u95ee\u9898\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u6211\u8fd8\u7981\u7528\u4e86\u5faa\u73af\u4e2d\u65ad\uff08cli/sti\uff09\uff0c\u5e76\u786e\u4fdd\u7cfb\u7edf\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u50cf\u4e0a\u9762\u8fd9\u6837\u7684\u6761\u4ef6\u5206\u652f\u5728\u4e3b\u5faa\u73af\u6267\u884c\u671f\u95f4\u81f3\u5c11\u4f1a\u51fa\u73b0\u4e00\u6b21\u9884\u6d4b\u5931\u8bef\u3002\u5728\u5206\u652f\u9884\u6d4b\u5355\u5143\uff08BPU\uff09\u72b6\u6001\u975e\u5e38\u5e72\u51c0\u7684\u5047\u8bbe\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u65b0\u9047\u5230\u7684\u6761\u4ef6\u5206\u652f\u901a\u5e38\u5c5e\u4e8e\u9759\u6001\u9884\u6d4b\u7ed3\u679c\u89c4\u5219\u3002\u7136\u540e\uff0c\u5b83\u6839\u636e\u9ed8\u8ba4\u7684\u542f\u53d1\u5f0f\uff08\u4f8b\u5982\uff0c\u59cb\u7ec8\u91c7\u7528\u65b0\u7684\u524d\u5411\u5206\u652f\uff0c\u59cb\u7ec8\u4e0d\u91c7\u7528\u540e\u5411\u5206\u652f\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\u51b3\u5b9a\u8981\u505a\u4ec0\u4e48\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cb\u4f1a\u6709\u8fd9\u6837\u7684\u5206\u652f\u9884\u6d4b\uff0c\u90a3\u4e48\u7a0d\u540e\u5c31\u4f1a\u6709\u7b54\u6848\u3002\n\u6211\u5f88\u5feb\u5728\u4e0d\u540c\u7684CPU\u4e0a\u91cd\u65b0\u6d4b\u8bd5\u4e86\u76f8\u540c\u7684\u4ee3\u7801\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u82f1\u7279\u5c14\uff0c\u53e6\u4e00\u4e9b\u662fAMD\uff0c\u4e00\u4e9b\u662f\u670d\u52a1\u5668\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f\u5ba2\u6237\u7aef\u3002\u6211\u671f\u5f85\u7740\u901a\u5e38\u7684\u7ed3\u679c\uff1a\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u6ca1\u6709\u4efb\u4f55\u6e05\u6670\u53ef\u89c1\u7684\u56fe\u6848\u5f62\u6210\u3002\u4f46\u8fd9\u4e00\u6b21\uff0c\u4e0d\u540c\u5bfb\u5e38\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\u3002\n\u6211\u6d4b\u8bd5\u8fc7\u7684\u6240\u6709AMD CPU\u90fd\u663e\u793a\u51fa\u4e0e\u4e0a\u9762\u663e\u793a\u7684\u6709\u70b9\u7c7b\u4f3c\u7684\u7ed3\u679c\u6a21\u5f0f\u3002\u7136\u800c\uff0c\u65e0\u8bba\u6211\u4f7f\u7528\u7684\u7f13\u5b58\u7ebf\u662f\u4ec0\u4e48\uff0c\u6240\u6709\u82f1\u7279\u5c14CPU\u90fd\u6ca1\u6709\u663e\u793a\u4efb\u4f55\u9884\u6d4b\u5931\u8bef\u3002\nCPU:Intel\uff08R\uff09Core\uff08TM\uff09i9-10980XE CPU@3\u300200GHZ\u9891\u7387\uff1a3000 MHZ\u57fa\u7ebf\uff1a169CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65700\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\u603b\u8ba1\uff1a0\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\u603b\u8ba1\uff1a0\n\u8fd9\u4e00\u70b9\u5f88\u6709\u8da3\u3002\u6211\u4ed4\u7ec6\u68c0\u67e5\u4e86\u5185\u5b58\u8bbf\u95ee\u5ef6\u8fdf\u57fa\u7ebf\u662f\u5426\u5408\u7406\uff0c\u4ee5\u53ca\u7f13\u5b58oracle\u5b9e\u73b0\u662f\u5426\u4ecd\u7136\u6709\u6548\u3002\u6211\u8fd8\u786e\u4fdd\u4ee3\u7801\u6267\u884c\u88ab\u56fa\u5b9a\u5728\u7ed9\u5b9a\u7684\u903b\u8f91CPU\u4e0a\u3002\u6211\u8fd8\u7528\u4e00\u4e9b\u6545\u610f\u4e0d\u6b63\u786e\u7684\u57fa\u7ebf\u91cd\u65b0\u8fd0\u884c\u4e86\u5b9e\u9a8c\uff0c\u770b\u770b\u662f\u5426\u6709\u566a\u97f3\uff0c\u6211\u505a\u5230\u4e86\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6240\u6709\u8ff9\u8c61\u90fd\u8868\u660eAMD\u7684CPU\u53ca\u5176\u9884\u6d4b\u5931\u8bef\u6709\u95ee\u9898\u3002\n\u7531\u4e8e\u6211\u4eec\u6b63\u5728\u5904\u7406\u5bfc\u81f4\u63a8\u6d4b\u6027\u6267\u884c\u5185\u5b58\u52a0\u8f7d\u7684\u5206\u652f\u9884\u6d4b\u5931\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5206\u652f\u4e4b\u540e\u653e\u7f6e\u4e00\u6761\u4e32\u884c\u5316\u6307\u4ee4\u6765\u505c\u6b62\u63a8\u6d4b\u6027\u6267\u884c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u89c2\u5bdf\u7ed3\u679c\u6709\u66f4\u597d\u7684\u4fe1\u5fc3\uff0c\u56e0\u4e3a\u4e0d\u5e94\u8be5\u6709\u4efb\u4f55\u4fe1\u53f7\u3002\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5fe0\u8bda\uff1b\u786e\u4fdd\u7f13\u5b58\u7ebf\u771f\u7684\u57286\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=17\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL8\u3002\u5fe0\u8bda\uff1b\u5728AMD\u4e0a\uff0clfence\u53ef\u4ee5\u8bbe\u7f6e\u4e3adispatch Serialization mode\uff08\u8c03\u5ea6\u5e8f\u5217\u5316\u6a21\u5f0f\uff09\uff0c\u4ece\u800c\u505c\u6b62\u63a8\u6d4b9\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u6267\u884c\u67b6\u6784\u3002\u7ed3\u675f\u6807\u7b7e\uff1aB.\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65700\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000\u603b\u8ba1\uff1a0\n\u6ca1\u6709\u9884\u671f\u7684\u4fe1\u53f7\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u8bf4\u670d\u81ea\u5df1\uff0c\u6211\u770b\u5230\u8fd9\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u6761\u4ef6\u5206\u652f\u7684\u9891\u7e41\u5206\u652f\u9884\u6d4b\u5931\u8bef\u53ea\u53d1\u751f\u5728AMD CPU\u4e0a\uff0c\u800c\u4e0d\u662f\u82f1\u7279\u5c14CPU\u4e0a\u3002\n\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e9b\u6709\u5173AMD branch predictor\u5b9e\u73b0\u7684\u4fe1\u606f\u3002\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u518d\u505a\u51e0\u6b21\u5b9e\u9a8c\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u4e86\u89e3\u60c5\u51b5\u3002\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5fe0\u8bda\uff1b\u786e\u4fdd\u7f13\u5b58\u7ebf\u771f\u7684\u57286\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=17\u3002\u5fe0\u8bda\uff1b\u5728AMD\u4e0a\uff0clfence\u53ef\u4ee5\u8bbe\u7f6e\u4e3adispatch Serialization mode\uff08\u8c03\u5ea6\u4e32\u884c\u5316\u6a21\u5f0f\uff09\uff0c\u4ece\u800c\u505c\u6b62\u63a8\u6d4b\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL9\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u6267\u884c\u67b6\u6784\u3002\u7ed3\u675f\u6807\u7b7e\uff1aB.\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65706\uff0c0100000 5\uff0c0100000 7\uff0c0100000 8\uff0c0100000 12\uff0c0100000 6\uff0c0100000 9\uff0c0100000 10\uff0c0100000 8\uff0c0100000 9\uff0c0100000\u603b\u6570\uff1a80\uff0c61000000\uff0c7100000 0\uff0c8100000 0\uff0c9100000 0\uff0c5100000 0\uff0c7100000 0\uff0c8100000 0\uff0c8100000 0\uff0c8100000 9100000\u603b\u8ba1\uff1a75\n\u7531\u4e8e\u5728\u8df3\u8dc3\u4e4b\u524d\u653e\u7f6elfence\uff0c\u9884\u6d4b\u5931\u8bef\u7387\u51fa\u73b0\u4e86\u8f7b\u5fae\u4f46\u6301\u7eed\u7684\u589e\u52a0\uff0c\u8fd9\u6709\u70b9\u4ee4\u4eba\u60ca\u8bb6\u3002\u5e8f\u5217\u5316\u662f\u5426\u4e0e\u624b\u5934\u7684\u95ee\u9898\u6709\u5173\uff1f\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=16\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL7\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c8\u3002\u7ed3\u675f\u6807\u7b7e\uff1a9\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65701\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 1\uff0c0100000 0\uff0c\u603b\u8ba1\uff1a3101100000\uff0c0100000 0\uff0c1100000\uff0c0100000 0\uff0c0100000 0\uff0c1100000\u603b\u8ba1\uff1a5\n\u770b\u8d77\u6765\u4fe1\u53f7\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u660e\u663e\u8f83\u5f31\u3002\u8ba9&#39\uff1bs\u7136\u540e\u79fb\u9664sfence\uff1a\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9519\u8bef\u9884\u6d4b1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9519\u8bef\u9884\u6d4b2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=1.5\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL6\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c7\u3002\u7ed3\u675f\u6807\u7b7e\uff1a8\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65700\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000\u603b\u8ba1\uff1a0\n\u6839\u672c\u6ca1\u6709\u4fe1\u53f7\uff01\u6211\u6ca1\u6599\u5230\u3002\u6bd5\u7adf\uff0csfence\u6307\u4ee4\u5728\u8fd9\u91cc\u4e0d\u5e94\u8be5\u90a3\u4e48\u76f8\u5173\uff1b\u5b83\u4e0d\u662f\u4e32\u884c\u5316\u7684\uff0c\u5e76\u4e14\u5b8c\u5168\u4e0d\u5e94\u8be5\u5f71\u54cd\u5206\u652f\u9884\u6d4b\u5931\u8bef\u3002\u76f8\u53cd\uff0c\u5047\u8bbe\u9700\u8981sfence\u6765\u786e\u4fdd\u7f13\u5b58\u7ebf\u88ab\u5237\u65b0\u3002\u5982\u679c\u6ca1\u6709\u5b83\uff0c\u4fe1\u53f7\u5e94\u8be5\uff08\u9519\u8bef\u5730\uff09\u66f4\u5f3a\u3002\u56e0\u6b64\uff0c\u81f3\u5c11\u5728\u6709\u548c\u6ca1\u6709sfence\u7684\u60c5\u51b5\u4e0b\u83b7\u5f97\u7684\u7ed3\u679c\u5e94\u8be5\u8868\u660e\u4fe1\u53f7\u7684\u5b58\u5728\u3002\n\u6211\u5f88\u597d\u5947\uff0c\u8fd9\u79cd\u5dee\u5f02\u662f\u5426\u4ec5\u4ec5\u662f\u56e0\u4e3a\u6709\u4eba\u5728\u573a\u800c\u9020\u6210\u7684\u5ef6\u8bef\uff0c\u8fd8\u662f\u5176\u4ed6\u4ec0\u4e48\u539f\u56e0\u9020\u6210\u7684\u3002\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u5c1d\u8bd5\u4f7f\u7528\u53e6\u4e00\u6761\u65e2\u4e0d\u662f\u5e8f\u5217\u5316\u4e5f\u4e0d\u662f\u5185\u5b58\u6392\u5e8f\u7684\u6307\u4ee4\u3002\u4e3a\u6b64\uff0c\u6211\u51b3\u5b9a\u4f7f\u7528\u6682\u505c\u6307\u4ee4\u3002\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u6682\u505c5\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=16\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL7\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c8\u3002\u7ed3\u675f\u6807\u7b7e\uff1a9\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee32\uff0c0100000 1\uff0c0100000 0\uff0c0100000 1\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 2\uff0c0100000\u603b\u8ba1\uff1a9\uff0c1100000\uff0c2100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c1100000\uff0c010000\u603b\u8ba1\uff1a4\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=16\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL7\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c8\u3002\u7ed3\u675f\u6807\u7b7e\uff1a9\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee33\uff0c0100000 2\uff0c0100000 0\uff0c0100000 1\uff0c0100000 0\uff0c0100000 3\uff0c0100000 1\uff0c0100000 1\uff0c0100000 0\uff0c0100000 0\uff0c0100000\u603b\u8ba1\uff1a11000100000 0\uff0c2100000 0\uff0c2100000 0\uff0c2100000 0\uff0c1100000\uff0c0100000 0\uff0c3100000 0\uff0c1100000\uff0c2100000\uff0c11000002100000\u603b\u8ba1\uff1a14\n\u6211\u56f0\u60d1\u4e86\u4e00\u4f1a\u513f\uff0c\u4f46\u77a5\u4e86\u4e00\u773c&#34\uff1bAMD64\u4f53\u7cfb\u7ed3\u6784\u7a0b\u5e8f\u5458\u624b\u518c\u7b2c3\u5377\uff1a\u901a\u7528\u548c\u7cfb\u7edf\u8bf4\u660e&#34\uff1b[4] \u63cf\u8ff0clflush\u6307\u4ee4\u7684\u90e8\u5206\u5e2e\u52a9\u6211\u7406\u89e3\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e2a\u95ee\u9898\u662f\u7531\u5f31\u5e8fclflush\u6307\u4ee4\u5f15\u8d77\u7684\uff0c\u8fd9\u4e9b\u6307\u4ee4\u4e0e\u63a8\u6d4b\u6027\u5185\u5b58\u52a0\u8f7d\u6709\u5173\u3002\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u5f15\u7528\u624b\u518c\uff1a&#34\uff1b[...] CLFLUSH\u6307\u4ee4\u76f8\u5bf9\u4e8e\u5728\u5185\u5b58\u4e0a\u8fd0\u884c\u7684\u5176\u4ed6\u6307\u4ee4\u662f\u5f31\u987a\u5e8f\u7684\u3002\u5904\u7406\u5668\u542f\u52a8\u7684\u63a8\u6d4b\u6027\u52a0\u8f7d\uff0c\u6216\u4f7f\u7528\u7f13\u5b58\u9884\u53d6\u6307\u4ee4\u663e\u5f0f\u6307\u5b9a\u7684\u63a8\u6d4b\u6027\u52a0\u8f7d\uff0c\u53ef\u4ee5\u56f4\u7ed5CLFLUSH\u6307\u4ee4\u91cd\u65b0\u6392\u5e8f\u3002\u8fd9\u79cd\u91cd\u65b0\u6392\u5e8f\u53ef\u80fd\u4f1a\u4f7f\u63a8\u6d4b\u9884\u53d6\u7684\u7f13\u5b58\u7ebf\u65e0\u6548\uff0c\u4ece\u800c\u65e0\u610f\u4e2d\u7834\u574f\u9884\u53d6\u64cd\u4f5c&#34;\n\u663e\u7136\uff0c\u8fd9\u5c31\u662f\u8fd9\u91cc\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u63a8\u6d4b\u8d1f\u8f7d\u5728clflush\u4e2d\u91cd\u65b0\u6392\u5e8f\uff0c\u5e76\u5728clflush\u4e4b\u524d\u6267\u884c\u3002clflush\u6307\u4ee4\u65e0\u610f\u4e2d\u5c4f\u853d\u4e86\u4fe1\u53f7\u3002\u624b\u518c\u8fd8\u8bf4\uff1a\n&#34; \u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5728CLFLUSH\u6307\u4ee4\u4e4b\u540e\u4f7f\u7528MFENCE\u6307\u4ee4\uff0c\u5f3a\u5236CLFLUSH\u6307\u4ee4\u5bf9\u540e\u7eed\u5185\u5b58\u64cd\u4f5c\u8fdb\u884c\u5f3a\u6392\u5e8f&#34;\n\u5f00\u59cb\u4e86\u3002\u4ece\u73b0\u5728\u8d77\uff0c\u6211\u4eec\u5c06\u4f7f\u7528mfence\u6307\u4ee4\u6765\u8ba2\u8d2dclflush\u6307\u4ee4&#39\uff1b\u6267\u884c\u5f97\u5f53\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4e00\u76f4\u5728\u5c1d\u8bd5\u5411\u524d\u79fb\u52a8\u7684\u5206\u652f\u3002\u4f46BPU\u53ef\u80fd\u4f1a\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5bf9\u5f85\u5411\u540e\u6761\u4ef6\u5206\u652f\u3002\u8ba9&#39\uff1b\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u56de\u987e\u4e00\u4e0b\u8fc7\u53bb\u4e00\u76f4\u4ee5\u6765\u7684\u5206\u652f\u3002\n\u4e0e\u4e4b\u524d\u7684\u5b9e\u9a8c\u7c7b\u4f3c\uff0c\u6211\u4f7f\u7528\u4ee5\u4e0b\u5411\u540e\u6761\u4ef6\u5206\u652f\u4ee3\u7801\u6784\u9020\uff0c\u5728100k\u6b21\u8fed\u4ee3\u7684\u5faa\u73af\u4e2d\u8fd0\u884c\u4e86\u5341\u6b21\uff1a\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002jmp BRANCH_\u6807\u7b7e\uff1b\u5230\u540e\u9762\u7684\u5206\u652f6\u3002\u8fd4\u56de\u6807\u7b7e\uff1a\uff1b\u8fd9\u662f\u5411\u540e\u5206\u652f\u76ee\u68077\u3002jmp-END_\u6807\u7b7e\uff1b\u53bb\u6d4b\u91cf8\u3002\u5bf9\u9f5064\uff1b\u8be5\u5bf9\u9f50\u7ed3\u6784\u7528\u4e8e\u9694\u79bb\u540e\u54119\u3002ud2\uff1b\u4ece\u65e9\u671f\u7684\u5206\u652f\u4e2d\u5206\u652f\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5bc6\u5ea6A.\u5bf9\u51c664\uff1b\u6bcf\u4e2a\u7f13\u5b58\u7ebf\u7684\u5206\u652f\u6570\u5f88\u91cd\u8981\u3002B.\u5206\u652f\u673a\u6784\u6807\u7b7e\uff1aC.\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=1D\u3002jz\u8fd4\u56de_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230\u8fd4\u56de\u6807\u7b7e\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u6267\u884c\u67b6\u6784\u3002\u7ed3\u675f\u6807\u7b7e\uff1a10\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65702\uff0c0100000 2\uff0c0100000 0\uff0c0100000 1\uff0c0100000 1\uff0c0100000 1\uff0c0100000 3\uff0c0100000 1\uff0c0100000 0\u603b\u8ba1\uff1a1401100000\uff0c1100000\uff0c4100000\uff0c2100000\uff0c\n......", "note_en": "In this blog article, we discuss some technical details of the AMD CPU branch predictor, focusing on its behavior with simple conditional branches. We also discuss how the behavior relates to exploitation of common and not so common Spectre v1 gadgets. As part of this discussion, we take a look at AMD&#39;s &#34; Software Techniques for Managing Speculation on AMD Processors&#34; white paper  [1] and evaluate the recommended mitigations (V1-1 to V1-3). Next, we implement a seemingly benign, artificial Spectre v1 gadget and exploit it as an easy-to-use arbitrary memory leak primitive. Finally, we reproduce the eBPF exploit described in the &#34; An Analysis of Speculative Type Confusion Vulnerabilities in the Wild&#34; paper  [2] to demonstrate the ease of exploiting such Spectre v1 gadgets on AMD CPUs (compared to Intel).\n This article is highly technical with plenty of empirical data presented in the form of diagrams, charts and listings. An intermediate level of understanding the microarchitectural details of modern CPUs is assumed. Whenever applicable, a brief introduction to the discussed topics is provided.  Too much for you? Not a problem, check our  final remarks section for a TL;DR.\n To make this article somewhat easier to consume and digest, we aim to follow a FAQ-like document structure. The discussed topics are gradually presented with an increasing level of detail. Hopefully, this unusual blog post structure works well with the technical material described.\n Enjoy yet another story featuring mispredicted branches, Spectre v1 gadgets and a PoC or two.\n  Before this publication, we discussed our findings and observations with the AMD PSIRT team between January 7th and February 2nd 2022. AMD concluded they were all typical Spectre v1 scenarios and recommended applying mitigations as explained in their guide  [1]. AMD (understandably and consistent with other chip-makers) did not want to comment on their branch predictor design, nor, in our opinion, seem interested in performing a more thorough analysis of the reported behavior and its effects. Whether such an analysis had been performed already before or was performed after our report, we do not know.\n Given this, we decided to investigate this issue thoroughly ourselves and present our research publicly here. We believe the suggested mitigations are impractical for the scenarios discussed in this article, for the reasons that the details below hopefully illuminate.\n  The story began with a somewhat accidental, yet unexpected observation. At one point I asked myself: &#34;Can a trivially computable, memory-access-free and likely latency-free conditional branch be mispredicted? If it can, what would be the circumstances?&#34;. The answers to the questions were somewhat already given. There are many reasons why modern CPUs can mispredict any branch. Microarchitectural resource contention, branch instruction misalignment, cache line or page boundary splitting could be some of the reasons. On top of that, there is also the technique of deliberate branch mistraining for Spectre v1 gadget exploitation.\n However, many vendors and security practitioners seem to share the common misconception that Spectre v1 gadgets are mainly about out-of-bound array memory accesses and consist of array bound checks with variable computation latency (typically a memory access). Here, I was thinking of trivially computable conditional branches, whose conditions operands are immediately available in general purpose registers. Is it possible to have such branches mispredicted in a controllable manner? Does it have an impact on security? Let&#39;s find out.\n I usually begin such research by implementing simple experiments using my favorite tool KTF (Kernel Test Framework  [3]), which I created a while ago with exactly such purposes in mind. KTF makes it easy to re-run the experiments in many different execution environments (bare-metal or virtualized) and comes with a few well-tested cache-based side-channel primitives.\n   0. mov $CACHE_LINE_ADDR, %rsi ; memory address whose access latency allows to observe the mispredictions1. clflush (%rsi) ;  flush the  cache line  out  of  cache  hierarchy  to  get a clean state 2. sfence 3. lfence ; make sure the  cache line  is really  out 4.  xor %rdi, %rdi ;  set ZF= 1 5. jz END_LABEL ; if ZF==1 goto END_LABEL6. mov (%rsi), %rax ; memory  load  to the flushed  cache line; it never executes architecturally7. END_LABEL:8. measure CACHE_LINE_ADDR access time\n The question was: how many times can the trivial always-taken branch at location 5 be mispredicted?\n I ran the code ten times in a loop of 100k iterations and counted all low-latency accesses to  CACHE_LINE_ADDR, which were indicating a speculatively executed memory load. This is what I got:\n CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,Iterations  6,100000  2,100000  4,100000  6,100000  5,100000  4,100000  4,100000  6,100000  4,100000  7,100000Total:  48\n The column  CL0 (and  CL1 in later experiments) represents the number of times the measurement cache line has been speculatively loaded (i.e. the number of mispredictions) during  Iterations number of the main loop iterations, for every of the ten executions. The  Total is the sum of all the mispredictions that occurred.  Baseline is the average number of CPU ticks it takes to access memory data from cache.\n I was not expecting this. A few irregular occurrences would not be shocking, but this was quite regular. The few years I spent in this field have taught me the hard way that this might not mean anything. There could be cache noise (e.g. due to frequent interrupts or sibling hyper-thread activity), a miscalculated baseline problem, fake signal due to floating vCPU of the VM I tested this on, or a gazillion of other reasons crippling the experiment.\n To quickly rule out some of these, I tend to add another non-colliding measurement cache line and measure both of the cache lines during the experiment runtime. If the signal does not change accordingly and reliably the experiment detected noise.\n 0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. sfence 5. lfence ; make sure the  cache  lines  are really  out 6.  xor %rdi, %rdi ;  set ZF= 1 7. jz END_LABEL ; if ZF==1 goto END_LABEL8. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally9. END_LABEL:A. measure CACHE_LINE_ADDR access time\n I ran this code again in a loop of 100k iterations twice, each time using a different cache line at location 8. This is what I got for  %rsi:\n CPU: AMD EPYC 7601 32-Core Processor Baseline: 200 CL0,CL1,Iterations  4, 0,100000  2, 0,100000  4, 0,100000  1, 0,100000  2, 0,100000  3, 0,100000  2, 0,100000  4, 0,100000  2, 0,100000  4, 0,100000 Total: 28\n CPU: AMD EPYC 7601 32-Core Processor Baseline: 200 CL0,CL1,Iterations  0, 3,100000  0, 3,100000  0, 1,100000  0, 3,100000  0, 3,100000  0, 2,100000  0, 2,100000  0, 2,100000  0, 6,100000  0, 3,100000 Total: 28\n At this point, I started to suspect that something might be really off, particularly since I also disabled interrupts for the loop ( cli/ sti) and made sure the system was idle.\n On the other hand, it is expected that a conditional branch like the above gets mispredicted at least once during main loop execution. In the hypothetical, ideal case of a very clean state of the Branch Prediction Unit (BPU), a newly encountered conditional branch usually falls under the static predictor outcome ruling. It then decides what to do based on a default heuristic (e.g. new forward branch always taken and backward branch always not-taken or vice versa). If you wonder why there is any prediction in the first place for branches like these, there will be an answer later on.\n  I quickly re-tested the same code on different CPUs I had access to. Some of them were Intel, others AMD, some server and others client parts. I was expecting the usual: different results on different machines, without any clearly visible pattern forming. But this time the unusual happened.\n All AMD CPUs I tested it on displayed somewhat similar result patterns to the one presented above. Yet, all Intel CPUs displayed  no mispredictions at all, regardless of the cache line I used.\n CPU: Intel(R) Core(TM) i9- 10980XE CPU @  3. 00GHzFrequency:  3000 MHzBaseline:  169CL0,CL1,Iterations  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0\n It was getting interesting at this point. I double-checked that the memory access latency baseline was reasonable and that the cache oracle implementation still worked. I also made sure the code execution was pinned to a given logical CPU. I also re-ran the experiment with some deliberately incorrect baselines to see if I got noise, and I did.\n At this point, all signs pointed to there being something off with AMD CPUs and its mispredictions.\n Since we are dealing with a branch misprediction leading to the speculative execution of a memory load, we can put a serializing instruction right after the branch to stop the speculative execution. Thereby, we can have better confidence about the observation, since there should be no signal whatsoever.\n   0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. sfence 5. lfence ; make sure the  cache  lines  are really  out 6.  xor %rdi, %rdi ;  set ZF= 1 7. jz END_LABEL ; if ZF==1 goto END_LABEL8. lfence ; on AMD lfence can be  set  to dispatch serializing  mode, which stops speculation 9. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturallyA. END_LABEL:B. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0\n No signal as anticipated. At this point, I convinced myself that I was seeing a frequent branch misprediction of this trivial conditional branch happening  only on AMD CPUs and not on Intel CPUs.\n  To answer that, we need to learn a few things about the AMD branch predictor implementation. But before we do, let&#39;s run a few more experiments to get a better picture of the situation.\n   0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. sfence 5. lfence ; make sure the  cache  lines  are really  out 6.  xor %rdi, %rdi ;  set ZF= 1 7. lfence ; on AMD lfence can be  set  to dispatch serializing  mode, which stops speculation 8. jz END_LABEL ; if ZF==1 goto END_LABEL9. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturallyA. END_LABEL:B. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  6,  0,100000  5,  0,100000  7,  0,100000  8,  0,100000  12,  0,100000  6,  0,100000  9,  0,100000  10,  0,100000  8,  0,100000  9,  0,100000Total:  80  0,  6,100000  0,  7,100000  0,  8,100000  0,  9,100000  0,  5,100000  0,  7,100000  0,  8,100000  0,  8,100000  0,  8,100000  0,  9,100000Total:  75\n It was a bit surprising to see a slight, but consistent increase of the misprediction rate as a result of placing the  lfence before the jump. Is the serialization somehow related to issue at hand?\n   0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. sfence 5.  xor %rdi, %rdi ;  set ZF= 1 6. jz END_LABEL ; if ZF==1 goto END_LABEL7. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally8. END_LABEL:9. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  1,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  1,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  1,  0,100000Total:  3  0,  1,100000  0,  0,100000  0,  1,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  1,100000  0,  1,100000  0,  0,100000  0,  1,100000Total:  5\n It looked like the signal was still there, but noticeably weaker. Let&#39;s then remove the  sfence as well:\n  0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mis-predictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mis-predictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4.  xor %rdi, %rdi ;  set ZF= 1 5. jz END_LABEL ; if ZF==1 goto END_LABEL6. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally7. END_LABEL:8. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0\n No signal at all! I was not expecting that. After all, the  sfence instruction should not be that relevant here; it is not serializing and it should not affect the branch misprediction at all. Quite the opposite, assuming the  sfence was required to make sure the cache lines are flushed. Without it, the signal should be (falsely) stronger. So at least the results obtained with and without the  sfence should indicate presence of the signal.\n I was curious if the difference was just the result of a delay caused by the mere presence of the  sfence, or something else. So, I decided to try with another instruction that is neither serializing nor memory ordering. I decided to go with a  pause instruction for this purpose.\n  0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. pause 5.  xor %rdi, %rdi ;  set ZF= 1 6. jz END_LABEL ; if ZF==1 goto END_LABEL7. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally8. END_LABEL:9. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  2,  0,100000  1,  0,100000  0,  0,100000  1,  0,100000  2,  0,100000  0,  0,100000  1,  0,100000  0,  0,100000  0,  0,100000  2,  0,100000Total:  9  0,  1,100000  0,  2,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  1,100000  0,  0,100000Total:  4\n   0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. mfence 5.  xor %rdi, %rdi ;  set ZF= 1 6. jz END_LABEL ; if ZF==1 goto END_LABEL7. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally8. END_LABEL:9. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  3,  0,100000  2,  0,100000  0,  0,100000  1,  0,100000  0,  0,100000  0,  0,100000  3,  0,100000  1,  0,100000  1,  0,100000  0,  0,100000Total:  11  0,  0,100000  0,  2,100000  0,  2,100000  0,  1,100000  0,  0,100000  0,  3,100000  0,  1,100000  0,  2,100000  0,  1,100000  0,  2,100000Total:  14\n   I was confused for a while, but a peek at the &#34; AMD64 Architecture Programmer\u2019s Manual Volume 3: General-Purpose and System Instructions&#34;  [4] section describing the  clflush instruction helped me understand. It turned out that the problem was caused by the weakly ordered  clflush instructions with respect to speculative memory loads.Let&#39;s quote the manual: &#34; [...] the CLFLUSH instruction is weakly ordered with respect to other instructions that operate on memory. Speculative loads initiated by the processor, or specified explicitly using cache-prefetch instructions, can be reordered around a CLFLUSH instruction. Such reordering can invalidate a speculatively prefetched cache line, unintentionally defeating the prefetch operation.&#34;\n Apparently, this is what was happening here. The speculative load got reordered with the  clflush and executed before the flush. The  clflush instruction was unintentionally masking the signal. The manual also says:\n &#34; The only way to avoid this situation is to use the MFENCE instruction after the CLFLUSH instruction to force strong-ordering of the CLFLUSH instruction with respect to subsequent memory operations.&#34;\n Here we go. From now on, we will be using the  mfence instruction to order the  clflush instructions&#39; execution properly.\n  So far, I was experimenting with forward always-taken branches. But the BPU may treat backward conditional branches differently. Let&#39;s take a look at backward always-taken branches now.\n Similar to the previous experiments, I ran this one ten times in a loop of 100k iterations using the following backward conditional branch code construct:\n  0. mov CACHE_LINE_0_ADDR, %rsi ; memory address  0 whose access latency allows  to observe  the mispredictions 1. mov CACHE_LINE_1_ADDR, %rbx ; memory address  1 whose access latency allows  to observe  the mispredictions 2. clflush (%rsi) 3. clflush (%rbx) ; flush both cache  lines out  of cache hierarchy  to  get  a clean state 4. mfence 5. jmp BRANCH_LABEL ; go  to  the backward branch 6. RETURN_LABEL: ; this is  the backward branch target  7. jmp END_LABEL ; go  to  the measurements 8. ALIGN  64 ; This alignment construct serves  the purpose  of isolating  the backward  9. ud2 ; branch  from  the earlier branches. This is important, because  the density A. ALIGN  64 ;  of branches per cache  line matters.B. BRANCH_LABEL:C. xor %rdi, %rdi ;  set ZF= 1D. jz RETURN_LABEL ;  if ZF== 1 goto RETURN_LABELE. mov (%rsi / %rbx), %rax ; memory  load  to  the flushed cache  line;  it never executes architecturallyF. END_LABEL: 10. measure CACHE_LINE_ADDR access  time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  2,  0,100000  2,  0,100000  0,  0,100000  1,  0,100000  2,  0,100000  1,  0,100000  1,  0,100000  1,  0,100000  3,  0,100000  1,  0,100000Total:  14  0,  1,100000  0,  1,100000  0,  4,100000  0,  2,100000  0,\n......", "posttime": "2022-02-23 22:13:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5206\u652f,branch", "title": "AMD\u5206\u652f\uff08Mis\uff09\u9884\u6d4b\u5668\uff1a\u8bbe\u7f6e\u5b83\uff0c\u7136\u540e\u5fd8\u8bb0\u5b83", "title_en": "The AMD Branch (Mis)Predictor: Just Set It and Forget It", "transed": 1, "url": "https://grsecurity.net/amd_branch_mispredictor_just_set_it_and_forget_it", "via": "", "real_tags": ["\u5206\u652f", "branch"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074733, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4fe1#322\u3002\u5b83\u548c\u53e6\u4e00\u4e2a\u5b57\u6bcd\u5728\u8df3\u8f6c\u7684\u4e0b\u65b9\uff0c\u56e0\u4e3a\u91cc\u9762\u4ed6\u5988\u7684\u5f88\u6050\u6016\u3002\n\u7f16\u8f91\u8865\u5145\uff1a\u5766\u7387\u5730\u8bf4\uff0c\u8fd9\u7bc7\u6587\u7ae0\u5f15\u8d77\u4e86\u8fd9\u4e48\u591a\u4eba\u7684\u5171\u9e23\uff0c\u8fd9\u4ee4\u4eba\u6cae\u4e27\uff0c\u4f46\u6211\u5f88\u611f\u6fc0\uff0c\u4e5f\u5f88\u8363\u5e78\u80fd\u591f\u5e2e\u52a9\u5199\u4fe1\u4eba\uff0c\u8868\u8fbe\u8fd9\u4e48\u591a\u4eba\u7684\u611f\u53d7\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u672c\u5468\u8981\u6c42\u7f13\u548c\u8fd9\u573a\u8ba8\u8bba\u7684\u547c\u58f0\u5df2\u7ecf\u8fbe\u5230\u4e86\u538b\u5012\u6027\u7684\u7a0b\u5ea6\uff0c\u56e0\u6b64\u4ece\u5468\u4e00\u5f00\u59cb\uff0c8\u670813\u65e5\u7684\u8bc4\u8bba\u88ab\u9501\u5b9a\u3002\u6211\u4eec\u6539\u5929\u518d\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u611f\u8c22\u60a8\u7684\u6240\u6709\u6709\u89c1\u5730\u7684\u8d21\u732e\uff0c\u611f\u8c22\u60a8\u4f7f\u8fd9\u6210\u4e3a\u7f51\u7edc\u4e0a\u6700\u597d\u7684\u8bc4\u8bba\u7a7a\u95f4\u4e4b\u4e00&lt/\u7f16\u8f91&gt\uff1b\n\u6211\u4eec\u7684\u793e\u4ea4\u5708\u5b50\u91cc\u6709\u4e00\u4e2a\u722c\u866b\u3002\u4ed6\u5e73\u5747\u6bd4\u6211\u4eec\u5176\u4ed6\u4eba\u592710\u5c81\uff0c\u79bb\u8fc7\u5a5a\uff0c\u6709\u4e24\u4e2a\u5b69\u5b50\u3002\u6211\u77e5\u9053\u8fd9\u542c\u8d77\u6765\u4f1a\u50cf\u662f\u6bcf\u4e2a\u5426\u8ba4LW\u7684\u4eba\u7ed9\u4e00\u4e2a\u5efa\u8bae\u4e13\u680f\u4f5c\u5bb6\u5199\u8fc7\u4fe1\uff0c\u4f46\u4ed6\u4e0d\u662f\u574f\u4eba\u3002\u548c\u4ed6\u4e00\u8d77\u73a9\u5f88\u6709\u8da3\uff0c\u4ed6\u662f\u4e00\u4e2a\u5fe0\u8bda\u7684\u7236\u4eb2\uff0c\u4ed6\u662f\u4e00\u4e2a\u5fe0\u8bda\u7684\u670b\u53cb\u2026\u2026\u4ed6\u7528\u81ea\u5df1\u7684\u884c\u4e3a\u8d76\u8d70\u4e86\u6240\u6709\u7684\u5973\u6027\u670b\u53cb\u3002\n\u4ed6\u4e3b\u8981\u96c6\u4e2d\u5728\u5176\u4ed6\u5973\u4eba\u8eab\u4e0a\uff1a\u544a\u8bc9\u5979\u4eec\u66b4\u9732\u81ea\u5df1\uff0c\u544a\u8bc9\u5979\u4eec\u8df3\u821e\u65f6\u88d9\u5b50\u98de\u5f97\u4e0d\u591f\u9ad8\uff0c\u5f53\u4ed6\u77e5\u9053\u5979\u4eec\u6709\u7537\u670b\u53cb\u65f6\uff0c\u4ed6\u4f1a\u6253\u5979\u4eec\u3002\uff08\u6211\u4e08\u592b\u544a\u8bc9\u6211\uff0c\u722c\u884c\u52a8\u7269\u4e5f\u88ad\u51fb\u8fc7\u6211\u51e0\u6b21\uff0c\u4f46\u6211\u6ca1\u6709\u6ce8\u610f\u5230\u3002\uff09\u8fd9\u79cd\u60c5\u51b5\u5927\u591a\u53d1\u751f\u5728\u4ed6\u559d\u9189\u7684\u65f6\u5019\uff0c\u4f46\u5373\u4f7f\u662f\u6e05\u9192\u7684\u65f6\u5019\uff0c\u4ed6\u4e5f\u6709\u5f00\u6027\u522b\u6b67\u89c6\u73a9\u7b11\u6216\u6027\u73a9\u7b11\u7684\u503e\u5411\uff0c\u7136\u540e\u544a\u8bc9\u6211\u4eec\uff0c\u5982\u679c\u6211\u4eec\u89c9\u5f97\u8fd9\u4e9b\u7b11\u8bdd\u4e0d\u597d\u7b11\uff0c\u6211\u4eec\u5c31\u6ca1\u6709\u5e7d\u9ed8\u611f\u3002\u51e0\u4e2a\u6708\u524d\uff0c\u4ed6\u5f00\u59cb\u53cd\u590d\u5927\u58f0\u62b1\u6028\u8bf4\uff0c\u4ed6\u771f\u7684\u5f88\u60f3\u505a\u7231\uff0c\u56e0\u4e3a\u4ed6\u79bb\u5a5a\u540e\uff08\u5927\u7ea62-3\u5e74\u524d\uff09\u5c31\u6ca1\u6709\u8fc7\u6027\u751f\u6d3b\u3002\u65e0\u8bba\u4ec0\u4e48\u65f6\u5019\u6709\u6d3e\u5bf9\uff0c\u4ed6\u4f3c\u4e4e\u90fd\u4f1a\u62b1\u7740\u8fd9\u6837\u7684\u5fc3\u6001\uff1a\u4ed6\u4f1a\u5728\u90a3\u91cc\u9047\u5230\u4e00\u4e2a\u4ed6\u53ef\u80fd\u4f1a\u4e0e\u4e4b\u53d1\u751f\u6027\u5173\u7cfb\u7684\u4eba\uff0c\u800c\u4e0d\u662f\u548c\u4ed6\u7684\u670b\u53cb\u4e00\u8d77\u73a9\u3002\u51e0\u4e2a\u6708\u524d\uff0c\u5728\u5176\u4e2d\u4e00\u4e2a\u6d3e\u5bf9\u4e0a\uff0c\u6211\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u5929\u9ed1\u540e\u53bb\u516c\u56ed\u73a9\uff1b\u514b\u9c81\u5f17\u8d70\u8fd1\u6211\u7684\u4e00\u4e2a\u670b\u53cb\uff0c\u95ee\u5979\u7537\u670b\u53cb\u5728\u54ea\u91cc\uff0c\u5f53\u4ed6\u88ab\u544a\u77e5\u7537\u670b\u53cb\u4e0d\u5728\u57ce\u91cc\u65f6\uff0c\u4ed6\u628a\u624b\u653e\u5728\u5979\u7684\u80a9\u8180\u4e0a\uff0c\u544a\u8bc9\u5979\u7537\u670b\u53cb\u201c\u6ca1\u6536\u201d\u4e86\u5979\u4eca\u665a\u7684\u94b1\u3002\n\u6211\u548c\u722c\u884c\u8005\u8c08\u8fc7\u6700\u540e\u4e00\u4ef6\u4e8b\uff0c\u5e76\u8bd5\u56fe\u89e3\u91ca\u4ed6\u7684\u884c\u4e3a\u8ba9\u6211\u4eec\u793e\u4f1a\u7fa4\u4f53\u4e2d\u7684\u6bcf\u4e2a\u5973\u4eba\u90fd\u611f\u5230\u975e\u5e38\u4e0d\u8212\u670d\uff1b\u5728\u9ed1\u6697\u4e2d\u63a5\u8fd1\u4e00\u4e2a\u5973\u4eba\uff0c\u672a\u7ecf\u5141\u8bb8\u628a\u624b\u653e\u5728\u5979\u8eab\u4e0a\uff0c\u5e76\u6697\u793a\u56e0\u4e3a\u5979\u7684\u7537\u670b\u53cb\u4e0d\u5728\u90a3\u91cc\uff0c\u5979\u5c31\u8981\u88ab\u6293\uff0c\u8fd9\u4e00\u70b9\u4ed6\u5988\u7684\u4e0d\u9177\uff1b\u5f53\u6211\u4eec\u7684\u4e24\u4e2a\u670b\u53cb\u7ed3\u5a5a\u65f6\uff0c\u4ed6\u628a\u6574\u4e2a\u62db\u5f85\u4f1a\u90fd\u82b1\u5728\u62dc\u8bbf\u65b0\u5a18\u7684\u5bb6\u4eba\uff08\u5305\u62ec\u597916\u5c81\u7684\u8868\u59d0\uff09\u4e0a\uff0c\u4ed6\u4f3c\u4e4e\u66f4\u4e13\u6ce8\u4e8e\u505a\u7231\uff0c\u800c\u4e0d\u662f\u5e86\u795d\u4e24\u4e2a\u670b\u53cb\u7684\u5a5a\u59fb\uff1b\u5f53\u4ed6\u6e05\u9192\u7684\u65f6\u5019\uff0c\u4ed6\u5e76\u6ca1\u6709\u90a3\u4e48\u7cdf\u7cd5\uff0c\u4f46\u662f\u5f53\u4ed6\u559d\u9189\u7684\u65f6\u5019\uff0c\u4ed6\u4f1a\u53d8\u5f97\u975e\u5e38\u53ef\u6015\uff0c\u4e5f\u8bb8\u4ed6\u4e0d\u5e94\u8be5\u518d\u53bb\u53c2\u52a0\u805a\u4f1a\u548c\u559d\u9189\u4e86\u3002\u5f53\u65f6\u4ed6\u4f3c\u4e4e\u5728\u542c\u6211\u8bf4\uff0c\u4f46\u4e00\u4e2a\u6708\u540e\u7684\u4eca\u5929\uff0c\u4ed6\u5728Facebook\u4e0a\u62b1\u6028\u4eba\u4eec\u89c9\u5f97\u4ed6\u7684\u6027\u7b11\u8bdd\u4e0d\u597d\u7b11\uff0c\u8fd8\u8bf4\u4ed6\u662f\u4e2a\u722c\u866b\u3002\u201c\u6211\u77e5\u9053\u6211\u4e0d\u662f\u4e00\u4e2a\u722c\u866b\uff0c\u5176\u4ed6\u4eba\u90fd\u77e5\u9053\uff0c\u4f46\u6211\u731c\u6211\u548c\u670b\u53cb\u7684\u670b\u53cb\u4eec\u72af\u4e86\u4e00\u4e9b\u5931\u793c\u7684\u4e8b\u3002\u201d\u8fd9\u51e0\u4e4e\u662f\u5bf9\u5b83\u7684\u603b\u7ed3\u3002\u5f88\u660e\u663e\uff0c\u6211\u8bf4\u7684\u4ec0\u4e48\u90fd\u6ca1\u542c\u8fdb\u53bb\u3002\n\u6211\u60f3\u63cd\u4ed6\u3002\u6211\u5f88\u60f3\u544a\u8bc9\u4ed6\uff0c\u4ec5\u4ec5\u56e0\u4e3a\u6709\u4eba\u53eb\u4f60\u6bdb\u9aa8\u609a\u7136\uff0c\u6216\u6bdb\u9aa8\u609a\u7136\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u662f\u4e2a\u574f\u4eba\uff0c\u4f46\u5982\u679c\u4f60\u7684\u6bcf\u4e2a\u5973\u6027\u670b\u53cb\u90fd\u544a\u8bc9\u4f60\uff0c\u4f60\u8ba9\u5979\u4eec\u611f\u5230\u4e0d\u8212\u670d\uff0c\u90a3\u4e48\u4f60\u5c31\u662f\u4ed6\u5988\u7684\u95ee\u9898\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4ed6\u663e\u7136\u6ca1\u6709\u542c\u6211\u5bf9\u4ed6\u8bf4\u7684\u8bdd\uff08\u6211\u662f\u4e00\u4e2a\u6ca1\u6709\u88ab\u8d76\u8d70\u7684\u4eba\u2014\u2014\u6211\u4eec\u5176\u4ed6\u7684\u5973\u6027\u670b\u53cb\u4e3a\u4e86\u81ea\u5df1\u7684\u5b89\u5168\u800c\u5168\u529b\u4ee5\u8d74\u5730\u907f\u5f00\u4ed6\uff0c\u5bf9\u6b64\u6211\u4e00\u70b9\u4e5f\u4e0d\u80fd\u8d23\u602a\u4ed6\u4eec\uff09\uff0c\u6211\u4e0d\u77e5\u9053\u662f\u56e0\u4e3a\u6211\u662f\u5973\u6027\u8fd8\u662f\u56e0\u4e3a\u6211\u6bd4\u4ed6\u5c0f10\u5c81\u3002\u4ed6\u4e5f\u6709\u9632\u5b88\u7684\u503e\u5411\uff0c\u4ed6\u5f00\u59cb\u64a4\u9000\u5230\u597d\u4eba\u7684\u5730\u76d8\u3002\u6211\u66fe\u8003\u8651\u8fc7\u8ba9\u53e6\u4e00\u4e2a\u7537\u4eba\u548c\u4ed6\u8c08\u8c08\uff0c\u4f46\u6211\u8fd8\u662f\u62c5\u5fc3\uff0c\u4e0d\u7ba1\u8c01\u53bb\u548c\u4ed6\u8c08\u8c08\uff0c\u4ed6\u90fd\u4f1a\u89e3\u96c7\uff0c\u56e0\u4e3a\u4ed6\u6bd4\u6211\u4eec\u5176\u4ed6\u4eba\u90fd\u5927\u3002\n\u663e\u7136\uff0c\u8fd9\u91cc\u9700\u8981\u53d1\u751f\u4e00\u4e9b\u4e8b\u60c5\uff0c\u4f46\u6211\u4e0d\u77e5\u9053\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u4ed6\u7ecf\u5e38\u9080\u8bf7\u4eba\u4eec\u8fc7\u6765\u73a9\u6e38\u620f\uff08\u662f\u5c11\u6570\u51e0\u4e2a\u6709\u8db3\u591f\u5927\u7684\u684c\u5b50\u53ef\u4ee5\u73a9\u6e38\u620f\u7684\u4eba\u4e4b\u4e00\uff09\uff0c\u4ed6\u4e5f\u7ecf\u5e38\u8fc7\u6765\u73a9\uff0c\u56e2\u961f\u4e2d\u7684\u4eba\u5927\u90e8\u5206\u90fd\u53ef\u4ee5\u548c\u4ed6\u4e00\u8d77\u73a9\u3002\uff08\u4ed6\u4eec\u90fd\u540c\u610f\u9700\u8981\u5bf9\u4ed6\u7684\u884c\u4e3a\u91c7\u53d6\u63aa\u65bd\uff0c\u4f46\u6211\u60f3\u5bf9\u4ed6\u4eec\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u662f\u90a3\u4e48\u7d27\u8feb\u3002\uff09\u4ed6\u4e5f\u4f4f\u5728\u79bb\u6211\u4e00\u4e2a\u8857\u533a\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u6211\u7ecf\u5e38\u89c1\u5230\u4ed6\u3002\u6211\u77e5\u9053\uff0c\u5982\u679c\u6ca1\u6709\u620f\u5267\u6027\u3001\u4f24\u611f\u548c\u5c34\u5c2c\uff0c\u5c31\u6ca1\u6709\u51fa\u8def\u3002\u6211\u53ea\u662f\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u529e\u3002\u6211\u662f\u4e0d\u662f\u60f3\u8ba9\u5176\u4ed6\u4eba\u8ddf\u4ed6\u5bf9\u8d28\uff1f\u5b89\u6392\u67d0\u79cd\u5e72\u9884\uff1f\u544a\u8bc9\u6211\u4e08\u592b\uff0c\u722c\u884c\u52a8\u7269\u4e0d\u518d\u88ab\u9080\u8bf7\u6765\u6211\u4eec\u5bb6\u4e86\uff0c\u907f\u514d\u722c\u884c\u52a8\u7269\u4f1a\u6765\u7684\u6d3b\u52a8\uff1f\u6211\u4f1a\u81ea\u5df1\u53eb\u4ed6\u51fa\u6765\uff0c\u4f46\uff081\uff09\u6211\u4e0d\u80fd\u4ee3\u8868\u6211\u7684\u670b\u53cb\u8bf4\u8bdd\uff0c\u5c24\u5176\u662f\u5f53\u4ed6\u4eec\u53d7\u5230\u7684\u5f71\u54cd\u6bd4\u6211\u66f4\u5927\u7684\u65f6\u5019\uff0c\uff082\uff09\u4ed6\u663e\u7136\u4e0d\u542c\u6211\u7684\uff0c\u4ee5\u53ca\uff083\uff09\u6211\u5728\u5bf9\u6297\u4e2d\u5f88\u7cdf\u7cd5\uff0c\u5f80\u5f80\u4f1a\u614c\u4e71\u5e76\u5f00\u59cb\u54ed\u6ce3\u3002\u4f60\u7684\u4efb\u4f55\u5efa\u8bae\u90fd\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002\n\u6211\u7537\u670b\u53cb\u548c\u6211\u5728\u4e00\u8d77\u5df2\u7ecf\u4e24\u5e74\u591a\u4e86\uff0c\u8fd9\u6bb5\u5173\u7cfb\u603b\u4f53\u4e0a\u5f88\u597d\u3002\u7136\u800c\uff0c\u6211\u7537\u670b\u53cb\u7684\u670b\u53cb\uff08\u6211\u53eb\u4ed6\u672c\uff09\u6210\u4e86\u6211\u4eec\u7684\u4e00\u5927\u75db\u5904\u3002\u4e8b\u5b9e\u4e0a\uff0c\u672c\u5df2\u7ecf\u6210\u4e3a\u6211\u4eec\u8fd9\u7fa4\u670b\u53cb\u7684\u4e00\u5927\u75db\u5904\u3002\u7537\u670b\u53cb\u4ece\u4e2d\u5b66\u5c31\u548c\u672c\u662f\u670b\u53cb\uff0c\u6211\u77e5\u9053\u90a3\u91cc\u6709\u5f88\u591a\u5386\u53f2\uff0c\u4ed6\u89c9\u5f97\u4ed6\u9700\u8981\u5bf9\u4ed6\u5fe0\u8bda\u3002\u7136\u800c\uff0c\u672c\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u8ba8\u538c\u9b3c\uff0c\u4ed6\u63a0\u593a\u4e86\u6211\u4eec\u5c0f\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5973\u5b69\u3002\n\u6211\u7b2c\u4e00\u6b21\u89c1\u5230\u672c\u540e\u4e0d\u4e45\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u805a\u4f1a\u4e0a\uff0c\u6211\u559d\u9189\u4e86/\u559d\u9189\u4e86\uff0c\u660f\u5012\u4e86\u3002\u90a3\u5929\u665a\u4e0a\u665a\u4e9b\u65f6\u5019\uff0c\u6211\u7684\u670b\u53cb\u8d70\u8fdb\u5ba2\u5385\uff0c\u53d1\u73b0\u672c\u6402\u7740\u6211\uff0c\u629a\u6478\u7740\u6211\u7684\u817f\u3002\u5979\u88ab\u4ed6\u5413\u4e86\u4e00\u8df3\uff0c\u628a\u6211\u4ece\u8d77\u5c45\u5ba4\u642c\u51fa\u6765\uff0c\u653e\u6211\u4e0a\u5e8a\u7761\u89c9\uff0c\u7136\u540e\u544a\u8bc9\u6211\u7b2c\u4e8c\u5929\u65e9\u4e0a\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u5979\u4e0d\u77e5\u9053\u4ed6\u5728\u90a3\u91cc\u5446\u4e86\u591a\u4e45\uff0c\u4e5f\u4e0d\u77e5\u9053\u4ed6\u5230\u5e95\u505a\u4e86\u4ec0\u4e48\uff0c\u6211\u4e5f\u5931\u53bb\u4e86\u77e5\u89c9\uff0c\u4e0d\u8bb0\u5f97\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u4e0d\u7528\u8bf4\uff0c\u4ece\u90a3\u4ee5\u540e\uff0c\u6211\u5728\u4ed6\u8eab\u8fb9\u4e00\u76f4\u5f88\u4e0d\u8212\u670d\u3002\u4ed6\u8fd8\u901a\u8fc7facebook\u7ed9\u6211\u53d1\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u3001\u9732\u9aa8\u7684\u6027\u4fe1\u606f\uff0c\u5e76\u544a\u8bc9\u6211\u4e0d\u8981\u544a\u8bc9\u7537\u670b\u53cb\uff0c\u56e0\u4e3a\u4ed6\u201c\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u4f1a\u76f8\u4fe1\u6211\u201d\uff08\u663e\u7136\uff0c\u6211\u7acb\u5373\u544a\u8bc9\u4e86\u6211\u7684\u7537\u670b\u53cb\uff0c\u4e0d\u4e45\u4e4b\u540e\u5c31\u5c4f\u853d\u4e86\u672c\uff09\u3002\u672c\u8fd8\u6084\u6084\u63a5\u8fd1\u4e86\u5f88\u591a\u5176\u4ed6\u5973\u5b69\uff0c\u5305\u62ec\u6211\u5e26\u6765\u7684\u6bcf\u4e00\u4e2a\u670b\u53cb\u3002\u672c\u7684\u5176\u4ed6\u884c\u4e3a\u5305\u62ec\uff1a\n\u63d0\u8bae\u5f00\u8f66\u9001\u6211\u7684\u670b\u53cb\u4ece\u6d3e\u5bf9\u4e0a\u56de\u5bb6\uff0c\u7136\u540e\u5728\u9001\u5979\u4e0b\u8f66\u65f6\u544a\u8bc9\u5979\uff0c\u4ed6\u5e0c\u671b\u6027\u662f\u4e00\u79cd\u201c\u62a5\u916c\u201d\uff1b\u5728\u5979\u8bf4\u201c\u4e0d\u201d\u540e\u8ddf\u7740\u5979\u53bb\u4e86\u5bb6\n\u7ed9\u6211\u670b\u53cb\u53d1\u77ed\u4fe1\u8bf4\u4ed6\u5728\u60f3\u7740\u5979\u65f6\u662f\u5982\u4f55\u201c\u62bd\u6410\u201d\u7684\n\u76f4\u63a5\u629a\u6478\uff08\u5b8c\u5168\u6e05\u9192\u548c\u6709\u610f\u8bc6\u5730\uff09\u4ed6\u521a\u9047\u5230\u7684\u5973\u5b69\uff0c\u6216\u8005\u81f3\u5c11\u548c\u5979\u4eec\u5728\u4e00\u8d77\u65f6\u4f1a\u611f\u5230\u4e0d\u8212\u670d\n\u4e0d\u6b62\u4e00\u6b21\u8bd5\u56fe\u4e0e\u670b\u53cb\u7684\u5973\u53cb\u53d1\u751f\u6027\u5173\u7cfb\n\u51fa\u4e8e\u663e\u800c\u6613\u89c1\u7684\u539f\u56e0\uff0c\u6211\u4eec\u8fd9\u7fa4\u670b\u53cb\u4e2d\u7684\u6bcf\u4e2a\u5973\u5b69\u90fd\u975e\u5e38\u8ba8\u538c\u672c\uff0c\u6211\u4eec\u90fd\u4e0d\u60f3\u8ba9\u4ed6\u5728\u8eab\u8fb9\u3002\u7136\u800c\uff0c\u5f53\u6211\u8bd5\u56fe\u5411\u7537\u670b\u53cb\u548c\u6211\u4eec\u7684\u7537\u670b\u53cb\u63d0\u8d77\u8fd9\u4e2a\u8bdd\u9898\u65f6\uff0c\u4ed6\u4eec\u4f3c\u4e4e\u90fd\u4e0d\u613f\u610f\u627f\u8ba4\u4ed6\u7684\u884c\u4e3a\u5177\u6709\u63a0\u593a\u6027\u6216\u5a01\u80c1\u6027\uff0c\u800c\u4e14\u4ed6\u4eec\u4f3c\u4e4e\u4e0d\u613f\u610f\u5bf9\u4ed6\u91c7\u53d6\u5f3a\u786c\u7acb\u573a\u3002\u4ed6\u4eec\u4ece\u672a\u548c\u672c\u8c08\u8d77\u8fc7\u4ed6\u7684\u884c\u4e3a\uff1b\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u5bf9\u5f85\u4ed6\u5c31\u50cf\u5bf9\u5f85\u4e00\u4e2a\u8106\u5f31\u7684\u5b69\u5b50\uff0c\u65e0\u6cd5\u5e94\u5bf9\u81ea\u5df1\u884c\u4e3a\u7684\u540e\u679c\u3002\u4ed6\u4eec\u8fd8\u7ee7\u7eed\u8ba9\u4ed6\u53c2\u4e0e\u6211\u4eec\u7684\u6d3b\u52a8\u3002\u6211\u611f\u5230\u6124\u6012\u548c\u56f0\u60d1\uff0c\u5e76\u8bd5\u56fe\u4e0e\u6211\u7684\u7537\u670b\u53cb\u8c08\u8bba\u6b64\u4e8b\u3002\u5f53\u6211\u63d0\u8d77\u8fd9\u4e2a\u8bdd\u9898\u65f6\uff0c\u7537\u670b\u53cb\u8868\u73b0\u51fa\u4e86\u5947\u602a\u7684\u9632\u5fa1\u6027\uff0c\u4ed6\u8bf4\u672c\u662f\u4e00\u4e2a\u201c\u5f88\u597d\u76f8\u5904\u7684\u4eba\u201d\uff0c\u5e76\u8bbd\u523a\u5730\u95ee\u6211\u662f\u5426\u60f3\u8ba9\u4ed6\u201c\u53bb\u672c\u7684\u5bb6\uff0c\u56e0\u4e3a\u4e00\u5e74\u534a\u524d\u53d1\u751f\u7684\u4e8b\u60c5\u6253\u4ed6\u201d\u662f\u7684\uff0c\u8fd9\u4e0d\u662f\u4e00\u6b21\u5f88\u6709\u6210\u6548\u7684\u8c08\u8bdd\u3002\n\u540e\u6765\u6211\u4ece\u53e6\u4e00\u4e2a\u670b\u53cb\u90a3\u91cc\u5f97\u77e5\uff08\u5979\u548c\u7537\u670b\u53cb\u548c\u672c\u540c\u9f84\uff0c\u5e76\u548c\u4ed6\u4eec\u4e00\u8d77\u4e0a\u4e86\u9ad8\u4e2d\uff09\uff0c\u672c\u5f53\u65f6\u7684\u60c5\u51b5\u5b8c\u5168\u4e00\u6837\uff0c\u6709\u4e00\u6b21\u7537\u670b\u53cb\u8bd5\u56fe\u5bf9\u672c\u7684\u884c\u4e3a\u8fdb\u884c\u8c34\u8d23\u3002\u663e\u7136\uff0c\u672c\u5f97\u4e86\u67d0\u79cd\u53ef\u6015\u7684\u7cbe\u795e\u5d29\u6e83\uff0c\u4ed6\u7ee7\u7eed\u8bf4\u81ea\u5df1\u662f\u4e00\u4e2a\u591a\u4e48\u53ef\u6015\u7684\u4eba\uff0c\u5a01\u80c1\u8981\u4f24\u5bb3\u81ea\u5df1\uff0c\u6216\u8005\u81ea\u6740\uff0c\u6216\u8005\u7c7b\u4f3c\u7684\u4e8b\u60c5\u3002\u5728\u88ab\u544a\u77e5\u8fd9\u4e00\u70b9\u540e\uff0c\u6211\u5f00\u59cb\u7406\u89e3\u4e3a\u4ec0\u4e48\u7537\u670b\u53cb\u548c\u5176\u4ed6\u4eba\u4e00\u76f4\u628a\u672c\u5f53\u6210\u201c\u8106\u5f31\u7684\u4eba\u201d\uff0c\u4f46\u542c\u5230\u8fd9\u4e2a\u6545\u4e8b\u8ba9\u6211\u66f4\u52a0\u6124\u6012\u3002\u6211\u5f88\u6e05\u695a\uff0c\u672c\u4e00\u76f4\u5728\u60c5\u7eea\u4e0a\u64cd\u7eb5\u6211\u7684\u7537\u670b\u53cb\uff0c\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u4eba\uff0c\u8fd9\u6837\u4ed6\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4ed6\u7684\u53ef\u6015\u884c\u4e3a\u800c\u4e0d\u88ab\u53eb\u9192\u3002\n\u6211\u5df2\u7ecf\u505c\u6b62\u9080\u8bf7\u670b\u53cb\u53c2\u52a0\u805a\u4f1a\uff0c\u56e0\u4e3a\u6211\u4e0d\u60f3\u8ba9\u4ed6\u4eec\u53d7\u5230\u672c\u7684\u6050\u60e7\uff0c\u6211\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5728\u8bd5\u56fe\u907f\u5f00\u4ed6\u3002\u6211\u4e0d\u60f3\u6210\u4e3a\u90a3\u79cd\u8bd5\u56fe\u544a\u8bc9\u7537\u670b\u53cb\u8c01\u53ef\u4ee5\u548c\u8c01\u4e0d\u53ef\u4ee5\u4e00\u8d77\u51fa\u53bb\u73a9\u7684\u5973\u5b69\uff0c\u4f46\u5728\u672c\u8eab\u8fb9\u6211\u611f\u5230\u4e0d\u5b89\u5168\u548c\u5bb3\u6015\u3002\u6211\u4e5f\u89c9\u5f97\u6211\u7684\u7537\u670b\u53cb\u6ca1\u6709\u5bf9\u4e00\u4e2a\u8bd5\u56fe\u6027\u4fb5\u72af\u6211\u7684\u7537\u4eba\u91c7\u53d6\u5f3a\u786c\u7acb\u573a\uff0c\u8fd9\u8ba9\u6211\u611f\u5230\u5b8c\u5168\u88ab\u80cc\u53db\u4e86\u3002\u5f88\u660e\u663e\uff0c\u6211\u4e0d\u60f3\u8ba9\u4ed6\u53bb\u201c\u63cd\u4ed6\u201d\uff0c\u4f46\u5982\u679c\u6211\u7537\u670b\u53cb\u4e0d\uff0c\u4f60\u77e5\u9053\uff0c\u7ecf\u5e38\u539f\u8c05\u548c\u8fa9\u62a4\u8fd9\u4e2a\u6df7\u86cb\uff0c\u90a3\u5c31\u592a\u597d\u4e86\u3002\u6240\u4ee5\u6211\u60f3\u6211\u7684\u95ee\u9898\u662f\uff0c\u6211\u600e\u6837\u624d\u80fd\u548c\u6211\u7684\u7537\u670b\u53cb\u63a2\u8ba8\u8fd9\u4e2a\u8bdd\u9898\uff0c\u8ba9\u4ed6\u660e\u767da\uff09\u8fd9\u6709\u591a\u4e25\u91cd\uff0cb\uff09\u4ed6\u4e0d\u5bf9\u672c\u7684\u53cd\u5e94\u8d1f\u8d23\uff0c\u800c\u4e0d\u8ba9\u4ed6\u611f\u5230\u9632\u5fa1\u6027\uff1f\n\u5f53\u6211\u8bf4\u8fd9\u4e24\u5c01\u4fe1\u4e2d\u63cf\u8ff0\u7684\u60c5\u51b5\u5f88\u597d\u5730\u8bf4\u660e\u4e86\u5f3a\u5978\u6587\u5316\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5b83\u5982\u6b64\u9634\u9669\u65f6\uff0c\u6211\u5e76\u4e0d\u662f\u5728\u5730\u677f\u4e0a\u6e9c\u8fbe\uff0c\u7528\u5206\u53c9\u7684\u820c\u5934\u53d1\u51fa\u5636\u5636\u58f0\u3002\n\u7b2c\u4e09\u6b65\uff1a\u5b83\u4f1a\u88ab\u6ce8\u9500\u4e3a\u201c\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u201d\u6216\u201c\u4ed6\u53ef\u80fd\u4e0d\u662f\u6545\u610f\u7684\u201d\u6216\u201c\u4ed6\u4e0d\u662f\u574f\u4eba\uff0c\u771f\u7684\u3002\u201d\u4efb\u4f55\u5173\u4e8e\u4e0d\u826f\u884c\u4e3a\u7684\u8ba8\u8bba\u90fd\u5fc5\u987b\u7acb\u5373\u4ee5\u201c\u516c\u5e73\u201d\u7684\u540d\u4e49\u5bf9\u4ed6\u66f4\u597d\u7684\u54c1\u8d28\u6216\u4ed6\u6240\u906d\u53d7\u7684\u4e0d\u5e78\u8fdb\u884c\u5168\u9762\u5ba1\u6838\u4e00\u65e6\u955c\u5934\u79fb\u5165\u955c\u5934\uff0c\u5728\u7279\u5199\u955c\u5934\u4e2d\u770b\u5230\u4ed6\u662f\u4e00\u4e2a\u771f\u5b9e\u7684\u3001\u4eba\u7c7b\u7684\u3001\u75db\u82e6\u7684\u4eba\uff0c\u4f60\u600e\u4e48\u80fd\u5982\u6b64\u6b8b\u5fcd\u5730\u60f3\u8ba9\u4ed6\u4e3a\u81ea\u5df1\u7684\u884c\u4e3a\u8d1f\u8d23\uff08\u5728\u201c\u5ba2\u89c2\u5316\u201d\u4e2d\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u59cb\u7ec8\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6bd4\u5982\u5728\u4e00\u7ec4\u6ca1\u6709\u5b9e\u4f53\u7684\u4e73\u5934\u6216\u5c0f\u5b54\u4e2d\uff0c\u6216\u8005\u4e00\u4e2a\u6355\u730e\u8005\uff0c\u6216\u8005\u4e00\u4e2a\u6700\u559c\u6b22\u7684\u5496\u5561\u676f\u6216\u4e00\u53ea\u5ba0\u7269\u732b\uff09\uff1f\u5a4a\u5b50\uff0c\u4f19\u8ba1\u3002\n\u7b2c\u56db\u6b65\uff1a\u6bcf\u4e2a\u4eba\u90fd\u62c5\u5fc3\u4f1a\u4f24\u5bb3\u6bdb\u9aa8\u609a\u7136\u7684\u5bb6\u4f19\u7684\u611f\u60c5\uff0c\u6216\u8005\u8ba9\u6bdb\u9aa8\u609a\u7136\u7684\u5bb6\u4f19\u89c9\u5f97\u5947\u602a\u3002\u66f4\u5999\u7684\u662f\uff0c\u6bcf\u4e2a\u4eba\u90fd\u62c5\u5fc3\uff0c\u5982\u679c\u670b\u53cb\u7ec4\u4e2d\u7684\u5176\u4ed6\u4eba\u88ab\u8981\u6c42\u542f\u7528\u201c\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u5bb6\u4f19\u201d\uff0c\u4ed6\u4eec\u4f1a\u6709\u4ec0\u4e48\u611f\u89c9\u3002\u5973\u4eba\u4eec\u62c5\u5fc3\uff0c\u5982\u679c\u5979\u4eec\u63a8\u52a8\u8fd9\u4e00\u95ee\u9898\uff0c\u6574\u4e2a\u670b\u53cb\u56e2\u4f53\u4f1a\u7ad9\u5728\u201c\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u5bb6\u4f19\u201d\u4e00\u8fb9\uff0c\u6216\u8005\u5979\u4eec\u4f1a\u56e0\u4e3a\u5f15\u8d77\u201c\u620f\u5267\u6027\u201d\u800c\u53d7\u5230\u6307\u8d23\u770b\u770bLW#323\u662f\u600e\u4e48\u8bf4\u7684\uff1a\u201c\u6211\u600e\u6837\u624d\u80fd\u548c\u6211\u7684\u7537\u670b\u53cb\u63a2\u8ba8\u8fd9\u4e2a\u95ee\u9898\uff0c\u8ba9\u4ed6\u660e\u767da\uff09\u8fd9\u6709\u591a\u4e25\u91cd\uff0cb\uff09\u4ed6\u5bf9\u672c\u7684\u53cd\u5e94\u4e0d\u8d1f\u8d23\u4efb\uff0c\u540c\u65f6\u53c8\u4e0d\u8ba9\u4ed6\u611f\u5230\u9632\u5fa1\uff1f\u201d\n\u6211\u4e0d\u60f3\u8ba9\u4e00\u4e2a\u4e3a\u539f\u59cb\u5f3a\u5978\u72af\u63a9\u9970\u548c\u8fa9\u62a4\u7684\u4eba\u6709\u6027\u6b32\uff0c\u5bf9\u5427\uff1f\uff08LW\uff0c\u4f60\u8fd9\u6837\u95ee\u95ee\u9898\u4e0d\u662f\u4f60\u7684\u9519\uff0c\u53ea\u662f\u6211\u4eec\u7684\u6587\u5316\u5f88\u7cdf\u7cd5\uff0c\u4f60\u7684\u7537\u670b\u53cb\u548c\u4ed6\u7684\u670b\u53cb\u4e00\u76f4\u5728\u7ed9\u4f60\u4e0d\u65ad\u7684\u4fe1\u606f\uff0c\u672c\u5e94\u8be5\u88ab\u6eba\u7231\uff0c\u800c\u4f60\u5e94\u8be5\u88ab\u5475\u62a4\uff0c\u5e0c\u671b\u4e00\u5207\u90fd\u4f1a\u8fc7\u53bb\uff09\u3002\n\u7b2c\u4e94\u6b65\uff1a\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u5bb6\u4f19\u7ee7\u7eed\u4ed6\u7684\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u81ea\u6211\u3002\u4ed6\u660e\u767d\u4e86\u81ea\u5df1\u7684\u884c\u4e3a\u4e0d\u4f1a\u4ea7\u751f\u771f\u6b63\u7684\u540e\u679c\uff08\u5373\u201c\u6765\u81ea\u82b1\u82b1\u516c\u5b50\u548c\u82b1\u82b1\u516c\u5b50\u793e\u4f1a\u7684\u53cd\u5bf9\u548c\u62b5\u5236\u201d\uff09\u3002\u5973\u4eba\u4eec\u89c9\u5f97\u81ea\u5df1\u88ab\u5413\u8dd1\u4e86\uff0c\u4e0d\u5b89\u5168\u3002\u4ed6\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u51b3\u5b9a\u91c7\u53d6\u575a\u5b9a\u7684\u7acb\u573a\u53cd\u5bf9\u722c\u884c\uff0c\u4e0d\u518d\u53c2\u52a0\u805a\u4f1a\u3002\u4ed6\u4eec\u6162\u6162\u5730\u9000\u51fa\u4e86\u670b\u53cb\u7ec4\u3002\u6709\u4e9b\u5973\u6027\u51b3\u5b9a\u9ed8\u9ed8\u5730\u5fcd\u53d7\uff0c\u56e0\u4e3a\u5979\u4eec\u77e5\u9053\u6ca1\u6709\u4eba\u4f1a\u771f\u6b63\u7ad9\u5728\u5979\u4eec\u4e00\u8fb9\uff0c\u800c\u4e14\u4e0e\u5931\u53bb\u6574\u4e2a\u793e\u533a\u76f8\u6bd4\uff0c\u7ee7\u7eed\u4e0b\u53bb\u66f4\u5bb9\u6613\u3002\u6574\u4e2a\u56e2\u961f\u56f4\u7ed5\u7740\u8fd9\u4e2a\u7f3a\u5931\u7684\u697c\u68af\u5de5\u4f5c\u3002\n\u53ef\u80fd\u7684\u7b2c\u516d\u6b65\uff1a\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684\u5bb6\u4f19\u5f3a\u5978\u67d0\u4eba\u3002\u5982\u679c\u4ed6\u8fd9\u6837\u505a\u4e86\uff0c\u5973\u6027\u4e3e\u62a5\u7684\u53ef\u80fd\u6027\u4e0d\u523050%\u3002\u4e3a\u4ec0\u4e48\uff1f\n\u662f\u4e0d\u662f\u6240\u6709\u56f4\u7740\u5979\u7684\u4eba\u90fd\u6559\u4f1a\u4e86\u5979\uff0c\u5982\u679c\u5979\u5f00\u53e3\u8bf4\u8bdd\uff0c\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u4f1a\u6709\u4ec0\u4e48\u7ed3\u679c\uff1f\u662f\u4e0d\u662f\u56e0\u4e3a\u5979\u4e0d\u76f8\u4fe1\u5979\u7684\u670b\u53cb\u548c\u7231\u5979\u7684\u4eba\u4f1a\u652f\u6301\u5979\uff1f\u6211\u65e0\u6cd5\u60f3\u8c61\u4e3a\u4ec0\u4e48\u3002\u4ed6\u4eec\u751a\u81f3\u4e0d\u80fd\u628a\u8fd9\u5bb6\u4f19\u8e22\u51fa\u4ed6\u4eec\u6bcf\u5468\u7684\u7410\u4e8b\u5c0f\u7ec4\u3002\n\u96be\u9053\u5f53\u5c40\u3001\u8b66\u5bdf\u548c\u6cd5\u9662\u7cfb\u7edf\u4f1a\u628a\u5979\u5f53\u6210\u662f\u5979\u5bfc\u81f4\u7684\u4e8b\u60c5\u5417\uff1f\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9\u5bb6\u4f19\u7684\u6050\u6016\u53f2\u4f1a\u4e0d\u4f1a\u51fa\u73b0\uff0c\u800c\u4e0d\u662f\u88ab\u7528\u4f5c\u884c\u4e3a\u6a21\u5f0f\u7684\u8bc1\u636e\uff0c\u800c\u662f\u88ab\u7528\u4f5c\u53d7\u5bb3\u8005\u5bb9\u5fcd\u4ed6\u8fc7\u53bb\u7684\u8fdb\u6b65\u7684\u8bc1\u636e\uff1f\n\u6240\u4ee5\uff0c\u662f\u7684\uff0c\u6211\u60f3\u975e\u5e38\u6e05\u695a\uff0c\u8fd9\u4e9b\u4fe1\u4ef6\u662f\u66f4\u5927\u7684\u6587\u5316\u8303\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u662f\u7537\u6027\u7279\u6743\u7684\u76f4\u63a5\u4ea7\u7269\u3002\u5973\u4eba\u4f1a\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u5417\uff1f\u5f53\u7136\u53ef\u4ee5\u3002\u4ed6\u4eec\u662f\u4eba\uff0c\u80fd\u505a\u4efb\u4f55\u4eba\u7c7b\u80fd\u505a\u7684\u4e8b\u3002\u4f46\u5f53\u4ed6\u4eec\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u65f6\uff0c\u4ed6\u4eec\u5e76\u6ca1\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u5316\u6765\u652f\u6301\u4ed6\u4eec\uff0c\u5e76\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u7684\u6bdb\u9aa8\u609a\u7136\u6ca1\u6709\u90a3\u4e48\u7cdf\u7cd5\u3002\nLW#322\uff0c\u6211\u5148\u4ece\u4f60\u7684\u722c\u884c\u52a8\u7269\u201c\u6700\u60b2\u4f24\u7684\u718a\u732b\u201d\u5c5e\u7684\u6241\u5e73\u722c\u884c\u52a8\u7269\u5f00\u59cb\u4ed6\u7684\u54ed\u558a\u662f\uff1a\u201c\u4e3a\u4ec0\u4e48\u6709\u4eba\u4e0d\u78b0\u6211\u7684\u9999\u80a0\uff1f\u201d\u4eba\u4eec\u8ba4\u4e3a\u4ed6\u662f\u65e0\u5bb3\u7684\uff0c\u56e0\u4e3a\u4ed6\u592a\u4f24\u5fc3\u4e86\u3002\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u8fd9\u573a\u79bb\u5a5a\u540e\u7684\u540c\u60c5\u6d3e\u5bf9\u6700\u7ec8\u4f1a\u8fc7\u53bb\uff0c\u4ed6\u5c06\u4e0d\u518d\u628a\u6bcf\u4e00\u6b21\u793e\u4ea4\u805a\u4f1a\u89c6\u4e3a\u4e00\u4e2a\u4ed6\u53ef\u4ee5\u75db\u4e0d\u6b32\u751f\u5730\u4e0d\u505a\u7231\u3001\u75db\u4e0d\u6b32\u751f\u5730\u62b1\u6028\u7684\u5730\u65b9\u3002\n\u5f53\u6211\u642c\u5230\u829d\u52a0\u54e5\u65f6\uff0c\u5728\u6211\u521a\u521a\u8d77\u6b65\u7684\u793e\u4ea4\u5708\u5b50\u91cc\u6709\u4e00\u4e9b\u8fd9\u6837\u7684\u4eba\u3002\u5176\u4e2d\u4e00\u4e2a\u7279\u522b\u6027\u611f\uff0c\u8eab\u6750\u9b41\u68a7\uff0c\u7ed9\u4eba\u7684\u5370\u8c61\u662f\u4e00\u53ea\u65e0\u5bb3\u7684\u5927\u6cf0\u8fea\u718a\u3002\u4ed6\u4f1a\u8ff7\u604b\u56e2\u961f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u65b0\u5973\u5b69\uff0c\u5e76\u4e0d\u65ad\u7528\u602a\u5f02\u3001\u53ef\u7231\u7684\u7ae5\u8a00\u8d5e\u7f8e\u5979\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u62e5\u62b1\u6301\u7eed\u65f6\u95f4\u6709\u70b9\u592a\u957f\uff0c\u4e0d\u8bf7\u81ea\u6765\u7684\u80cc\u90e8\u6309\u6469\uff0c\u629a\u6478\u4f60\u7684\u5934\u53d1\uff0c\u5750\u5728\u4f60\u65c1\u8fb9\uff0c\u60f3\u8981\u4f9d\u504e\u3002\u8fd9\u4e00\u5207\u90fd\u88ab\u63cf\u7ed8\u6210\u5929\u771f\u548c\u751c\u871c\uff0c\u4f46\u4f60\u80fd\u611f\u89c9\u5230\u80cc\u540e\u7684\u75af\u72c2\u3002\n\u6211\u662f\u65b0\u6765\u7684\uff0c\u8fd8\u6ca1\u6709\u548c\u4eba\u4eb2\u8fd1\uff0c\u6240\u4ee5\u6211\u6ca1\u6709\u4efb\u4f55\u4eba\u53ef\u4ee5\u771f\u6b63\u8c08\u8bba\u8fd9\u4ef6\u4e8b\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u5982\u4f55\u5236\u5b9a\u4e00\u4e2a\u96c6\u4f53\u89e3\u51b3\u65b9\u6848\u3002\u5176\u4ed6\u5973\u6027\u4f3c\u4e4e\u5bb9\u5fcd\u8fd9\u79cd\u884c\u4e3a\uff0c\u751a\u81f3\u559c\u6b22\u8fd9\u79cd\u884c\u4e3a\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\uff0c\u53ef\u80fd\u53ea\u6709\u6211\u4e00\u4e2a\u4eba\u3002\u6211\u901a\u8fc7\u8bf4\u201c\u563f\uff0c\u4f60\u8ba9\u6211\u5f88\u4e0d\u8212\u670d\u3002\u6211\u4e0d\u559c\u6b22\u88ab\u78b0\uff0c\u6240\u4ee5\u9664\u975e\u6211\u5148\u78b0\u4f60\uff0c\u5426\u5219\u4e0d\u8981\u78b0\u6211\u3002\u53e6\u5916\uff0c\u6211\u4e0d\u60f3\u548c\u4f60\u8c03\u60c5\uff0c\u6240\u4ee5\u8bf7\u4e0d\u8981\u5728\u6211\u5468\u56f4\u606d\u7ef4\u6216\u53ef\u7231\u7684\u4e1c\u897f\uff0c\u597d\u5417\uff1f\u6211\u4e0d\u559c\u6b22\u3002\u201d\u8fd9\u771f\u662f\u592a\u5c34\u5c2c\u4e86\uff0c\u4ed6\u7684\u611f\u60c5\u53d7\u5230\u4e86\u6781\u5927\u7684\u4f24\u5bb3\uff0c\u6211\u611f\u5230\u5185\u759a\uff0c\u5e76\u5bf9\u81ea\u5df1\u8fdb\u884c\u4e86\u5f88\u591a\u4e8b\u540e\u731c\u6d4b\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u4eba\u8bd5\u56fe\u5411\u6211\u89e3\u91ca\u4ed6\u6ca1\u90a3\u4e48\u574f\uff0c\u6211\u4e5f\u4e0d\u9700\u8981\u4e3a\u6b64\u5982\u6b64\u6076\u6bd2\u3002\u201c\u4e0d\u559c\u6b22\u88ab\u89e6\u78b0\u7684\u5a4a\u5b50\u201d\u6210\u4e86\u6211\u548c\u4ed6\u4ee5\u53ca\u670b\u53cb\u7fa4\u4e2d\u5176\u4ed6\u4e00\u4e9b\u5e05\u54e5\u6253\u4ea4\u9053\u65f6\u7684\u89d2\u8272\u548c\u76d4\u7532\uff08\u6bd4\u5982\u90a3\u4e2a\u201c\u8d5e\u7f8e\u201d\u6211\uff0c\u544a\u8bc9\u6211\u4ed6\u6709\u65f6\u4f1a\u624b\u6deb\u7684\u5bb6\u4f19\uff09\u3002\u4ed6\u4eec\u77e5\u9053\uff0c\u4efb\u4f55\u8c03\u60c5\u7684\u5c1d\u8bd5\u90fd\u53ef\u80fd\u4ee5\u6211\u7528\u6700\u7c97\u9c81\u7684\u8bed\u6c14\u8bf4\u201c\u6076\u5fc3\u201d\u800c\u544a\u7ec8\uff0c\u7136\u540e\u8d70\u5f00\u3002\n\u8fd9\u7edd\u5bf9\u4e0d\u662f\u4e00\u4e2a\u795e\u5947\u7684\u89e3\u51b3\u65b9\u6848\u3002\u90a3\u5bb6\u4f19\u548c\u4f60\u7684\u722c\u884c\u52a8\u7269\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5f53\u4ed6\u88ab\u53eb\u51fa\u53bb\u5e76\u88ab\u76f4\u63a5\u544a\u77e5\u505c\u6b62\u8fd9\u79cd\u884c\u4e3a\u65f6\uff0c\u4ed6\u505a\u5230\u4e86\u3002\u4ed6\u9053\u4e86\u6b49\uff0c\u53cc\u624b\u4e0d\u653e\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4ed6\u53d8\u5f97\u66f4\u52a0\u81ea\u4fe1\uff0c\u6446\u8131\u4e86\u60b2\u4f24\u7684\u718a\u732b\u671f\uff0c\u627e\u5230\u4e86\u4e00\u4efd\u66f4\u597d\u7684\u5de5\u4f5c\uff0c\u627e\u5230\u4e86\u4e00\u4f4d\u7279\u522b\u7684#1\u771f\u68d2\u7684\u5973\u58eb\uff08\u800c\u4e0d\u662f\u5728\u6240\u6709\u6781\u5ba2\u5973\u58eb\u4e2d\u4f20\u64ad\u4ed6\u7684\u7231\uff0c\u65e0\u8bba\u5728\u54ea\u91cc\uff09\uff0c\u5e76\u51b7\u9759\u4e0b\u6765\u3002\u4ed6\u7684\u8bb8\u591a\u4f18\u79c0\u54c1\u8d28\uff0c\u6bd4\u5982\u5fe0\u8bda\u3001\u806a\u660e\u548c\u90aa\u6076\u7684\u5e7d\u9ed8\u611f\uff0c\u5728\u5f53\u65f6\u66f4\u5bb9\u6613\u88ab\u6b23\u8d4f\u3002\u5982\u679c\u4ed6\u6ca1\u6709\u653e\u5f03\u6211\uff1f\u5982\u679c\u6211\u51b3\u5b9a\u201c\u55e8\uff0c\u6211\u662f\u8a79\u59ae\u5f17\uff0c\u8bf7\u4e0d\u8981\u78b0\u6211\u201d\u7684\u51b3\u5b9a\u9002\u5f97\u5176\u53cd\uff1f\u548c\u90a3\u4e2a\u793e\u4f1a\u7fa4\u4f53\u8bf4\u518d\u89c1\u771f\u7684\u5f88\u96be\uff0c\u771f\u7684\u5f88\u96be\u8fc7\uff0c\u6211\u7684\u751f\u6d3b\u4f1a\u56e0\u6b64\u53d8\u5f97\u66f4\u7a77\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4e0d\u5bb9\u6613\u3002\n\u5c31\u5177\u4f53\u6b65\u9aa4\u800c\u8a00\uff0c\u6211\u8ba4\u4e3a\u4f60\u505a\u4e86\u6240\u6709\u6b63\u786e\u7684\u4e8b\u60c5\u2014\u2014\u6240\u6709\u6700\u597d\u7684\u8bc4\u8bba\uff0c\u795d\u8d3a\u4f60\u3002\u4f60\u8bd5\u8fc7\u76f4\u63a5\u548c\u722c\u866b\u8bf4\u8bdd\u3002\u4ed6\u6ca1\u6709\u542c\u4f60\u7684\u8bdd\uff0c\u4e5f\u6ca1\u6709\u9000\u7f29\uff0c\u800c\u662f\u51b3\u5b9a\u53d1\u7262\u9a9a\uff0c\u628a\u5b83\u5f53\u4f5c\u4e16\u754c\u5bf9\u4ed6\u7684\u6240\u4f5c\u6240\u4e3a\uff0c\u800c\u4e0d\u662f\u4ed6\u81ea\u5df1\u7684\u884c\u4e3a\u6240\u5e26\u6765\u7684\u540e\u679c\u3002\u8fd9\u662f\u4ed6\u7684\u9009\u62e9\uff0c\u800c\u4e0d\u662f\u4f60\u53ef\u4ee5\u901a\u8fc7\u8868\u73b0\u51fa\u8272\u548c\u4f7f\u7528\u4f60\u7684\u8bed\u8a00\u6765\u63a7\u5236\u7684\u4e8b\u60c5\u3002\uff08\u6ce8\uff1a\u5176\u4ed6\u6700\u60b2\u4f24\u7684\u5927\u718a\u732b\u6700\u7ec8\u88ab\u6dd8\u6c70\u51fa\u4e86\u793e\u4f1a\u7fa4\u4f53\uff0c\u4e0d\u662f\u56e0\u4e3a\u5b83\u4eec\u628a\u6bcf\u4e00\u4e2a\u6d3b\u52a8\u90fd\u5f53\u6210\u4e86\u505a\u7231\u7684\u673a\u4f1a\uff0c\u800c\u662f\u56e0\u4e3a\u5b83\u4eec\u6ca1\u5b8c\u6ca1\u4e86\u7684\u62b1\u6028\u3002\u62b1\u6028\u5b83\u4eec\u7684\u5355\u8eab\u3002\u62b1\u6028\u6ca1\u6709\u4eba\u6b23\u8d4f\u5b83\u4eec\u8ba8\u4eba\u559c\u6b22\u7684\u884c\u4e3a\u3002\u62b1\u6028\u5b83\u4eec\u6ca1\u6709\u88ab\u9080\u8bf7\u53c2\u52a0\u67d0\u4e9b\u6d3b\u52a8\u3002\u4eba\u4eec\u4f1a\u5bb9\u5fcd\u76f8\u5f53\u591a\u7684\u4e0d\u5fc5\u8981\u7684\u653b\u51fb\u548c\u6027\u8bc4\u8bba\uff0c\u4f46\u5982\u679c\u4f60\u4e0d\u505c\u6b62\u62b1\u6028\uff0c\u5b83\u4eec\u6700\u7ec8\u4f1a\u628a\u4f60\u6392\u9664\u5728\u5916\uff09\u3002\n\u6240\u4ee5\u6211\u60f3\u662f\u65f6\u5019\u548c\u8fd9\u5bb6\u4f19\u65e0\u5173\u4e86\u3002\u4f60\u65e0\u6cd5\u63a7\u5236\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u505a\u4ec0\u4e48\u2014\u2014\u663e\u7136\uff0c\u5982\u679c\u5176\u4ed6\u5973\u58eb\u90fd\u5728\u56de\u907f\u4ed6\uff0c\u800c\u4f60\u51e0\u4e4e\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u4ed6\u5df2\u7ecf\u88ab\u8ba8\u8bba\u4e86\u5f88\u591a\u3002\u5728Facebook\u4e0a\u5220\u9664\u4ed6\u7684\u597d\u53cb/\u9690\u85cf\u4ed6\u7684\u8ba2\u9605\u6e90\u3002\u4e0d\u8981\u53bb\u4ed6\u5bb6\u53c2\u52a0\u4efb\u4f55\u6d3b\u52a8\u3002\u4e0d\u8981\u9080\u8bf7\u4ed6\u53c2\u52a0\u4f60\u5bb6\u7684\u4efb\u4f55\u6d3b\u52a8\u3002\u8ba9\u4f60\u7684\u4f34\u4fa3\u975e\u5e38\u975e\u5e38\u6e05\u695a\u3002\n\u201c\u542c\u7740\uff0c\u6211\u9700\u8981\u548c\u722c\u884c\u52a8\u7269\u597d\u597d\u76f8\u5904\u4e00\u6bb5\u65f6\u95f4\u3002\u6211\u4e0d\u4f1a\u53bb\u4ed6\u5bb6\uff0c\u4ed6\u80af\u5b9a\u4e0d\u4f1a\u88ab\u9080\u8bf7\u6765\u6211\u4eec\u5bb6\u3002\u201d\u3002\n\u6211\u77e5\u9053\u4f60\u559c\u6b22\u4ed6\uff0c\u5e0c\u671b\u4ed6\u4f1a\u6539\u53d8\u3002\u6211\u4e5f\u5e0c\u671b\u4ed6\u80fd\u8fd9\u6837\u505a\uff0c\u4f46\u548c\u4ed6\u5728\u4e00\u8d77\u8ba9\u6211\u611f\u5230\u6124\u6012\u548c\u4e0d\u5b89\u5168\uff0c\u6211\u771f\u7684\u65e0\u6cd5\u5728\u5468\u56f4\u95f2\u901b\uff0c\u5e0c\u671b\u60c5\u51b5\u4f1a\u597d\u8f6c\u3002\n\u6211\u4e0d\u60f3\u544a\u8bc9\u4f60\u5982\u4f55\u5904\u7406\u4f60\u548c\u4ed6\u7684\u5173\u7cfb\uff0c\u4f46\u6211\u9700\u8981\u4f60\u505a\u4e24\u4ef6\u4e8b\u3002\n1\uff09 \u652f\u6301\u6211\u4e0d\u9080\u8bf7\u4ed6\u53bb\u4efb\u4f55\u6211\u60f3\u53bb\u7684\u5730\u65b9\uff0c\u4e5f\u7edd\u5bf9\u4e0d\u9080\u8bf7\u4ed6\u6765\u8fd9\u91cc\u3002\n2\uff09 \u5f53\u6211\u548c\u5176\u4ed6\u4eba\u5728\u670b\u53cb\u5c0f\u7ec4\u91cc\u9047\u5230\u8fd9\u79cd\u4e8b\u65f6\uff0c\u8bf7\u652f\u6301\u6211\u3002\u522b\u628a\u6211\u5f53\u6210\u5a4a\u5b50\uff0c\u8ba9\u6211\u6210\u4e3a\u4e00\u4e2a\u5411\u670b\u53cb\u63d0\u51fa\u5408\u7406\u62c5\u5fe7\u7136\u540e\u88ab\u89e3\u96c7\u7684\u4eba\u3002\u6211\u6ca1\u6709\u8fd9\u6837\u5bf9\u4ed6\u2014\u2014\u4ed6\u9009\u62e9\u4e86\u50cf\u4e2a\u6df7\u86cb\u4e00\u6837\uff0c\u7136\u540e\u62b1\u6028\u3002\n\u5982\u679c\u4e00\u5e74\u540e\u4ed6\u559d\u9152\u5c11\u4e86\uff0c\u800c\u4e14\u5df2\u7ecf\u51b7\u9759\u4e0b\u6765\uff0c\u5e76\u4e3a\u8fc7\u53bb\u7684\u884c\u4e3a\u9053\u6b49\uff0c\u6211\u4f1a\u8003\u8651\u518d\u51fa\u53bb\u73a9\u4e00\u6b21\u3002\u4f46\u73b0\u5728\u8fd9\u4e2a\u51b3\u5b9a\u4f3c\u4e4e\u662f\u6700\u540e\u7684\u51b3\u5b9a\u3002\"\n\u4e0d\u8981\u592a\u62c5\u5fc3\u8ba9\u4e00\u5207\u90fd\u53d8\u5f97\u5e73\u987a\uff0c\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u611f\u89c9\u826f\u597d\u3002\u4f20\u8fbe\u5267\u672c\uff0c\u8ba9\u4f60\u7684\u4f34\u4fa3\u611f\u53d7\u4ed6\u7684\u611f\u53d7\u3002\u4e5f\u8bb8\u4ed6\u4f1a\u89c9\u5f97\u4e0d\u8212\u670d\u548c\u5947\u602a\u3002\u722c\u884c\u52a8\u7269\u4f1a\u611f\u89c9\u4e0d\u597d\u548c\u5947\u602a\u3002\u4ed6\u4eec\u5e94\u8be5\u611f\u5230\u4e0d\u597d\u548c\u5947\u602a\uff0c\u56e0\u4e3a\u5927\u4fbf\u662f\u4e0d\u597d\u548c\u5947\u602a\u7684\u3002\u5973\u4eba\u662f\u5982\u6b64\u7684\u793e\u4f1a\u5316\u548c\u8bad\u7ec3\uff0c\u4ee5\u81f3\u4e8e\u4f60\u5f88\u96be\u4e0d\u53bb\u629a\u5e73\u522b\u4eba\u7684\u4e0d\u597d\u548c\u53e4\u602a\u3002\u4f46\u4e0d\u8981\u628a\u4e8b\u60c5\u5e73\u590d\u3002\u8ba9\u4ed6\u4eec\u53d8\u5f97\u602a\u5f02\u5427\u3002\u8ba9\u5b83\u4eec\u53d8\u5f97\u53ef\u6015\u5427\u3002\n\u201c\u662f\u7684\uff0c\u8fd9\u771f\u7684\u5f88\u5c34\u5c2c\u3002\u6211\u5f88\u60f3\u518d\u6b21\u548c\u4f60\u5728\u4e00\u8d77\u65f6\u611f\u5230\u5b89\u5168\u548c\u8212\u9002\uff0c\u4f46\u6211\u544a\u8bc9\u4e86\u4f60\u9700\u8981\u505a\u4e9b\u4ec0\u4e48\u6765\u7ea0\u6b63\u5b83\uff0c\u800c\u4f60\u5374\u65e0\u89c6\u6211\uff0c\u7136\u540e\u62b1\u6028\u3002\u6240\u4ee5\uff0c\u5728\u4f60\u7684\u884c\u4e3a\u53d1\u751f\u771f\u6b63\u7684\u9053\u6b49\u548c\u4e00\u4e9b\u660e\u663e\u7684\u5927\u53d8\u5316\u4e4b\u524d\uff0c\u6211\u4eec\u662f\u5728\u4f11\u606f\u3002\u201d\n\u8fd9\u4e0d\u662f\u4f60\u5bf9\u722c\u884c\u52a8\u7269\u505a\u7684\u4e8b\u60c5\uff0c\u800c\u662f\u4ed6\u5bf9\u81ea\u5df1\u505a\u7684\u4e8b\u60c5\uff0c\u8868\u73b0\u7cdf\u7cd5\uff0c\u7136\u540e\u4e0d\u63a5\u53d7\u4f60\u8bd5\u56fe\u4f20\u9012\u7684\u53ef\u80fd\u81ea\u6211\u610f\u8bc6\u7684\u751c\u871c\u793c\u7269\u3002\u8fd9\u4e0d\u662f\u65e0\u8f9c\u7684\uff0c\u4e5f\u4e0d\u662f\u65e0\u5bb3\u7684\uff0c\u4e5f\u4e0d\u662f\u201c\u5bb3\u7f9e\u7684\u4e66\u5446\u5b50\u65e0\u4ff1\u4e50\u90e8\u201d\u5728\u4f60\u76f4\u63a5\u544a\u8bc9\u522b\u4eba\u4ed6\u4eec\u505a\u9519\u4e86\u4ec0\u4e48\u5e76\u8981\u6c42\u4ed6\u4eec\u505c\u6b62\u7279\u5b9a\u884c\u4e3a\u540e\uff0c\u8fd9\u4e00\u70b9\u5c24\u5176\u96be\u4ee5\u65ad\u8a00\uff0c\u5bf9\u5417\uff1f\u7136\u800c\uff0c\u6bcf\u4e00\u6b21\u4ed6\u5988\u7684\u51fa\u73b0\uff0c\u4e5f\u8bb8\u8fd9\u4e0d\u662f\u4ed6\u7684\u9519\uff0c\u56e0\u4e3a\u4ed6\u53ea\u662f\u4e0d\u77e5\u9053\u66f4\u597d\u3002\u4e0d\uff0c\u5df2\u7ecf\u627e\u5230\u7ebf\u7d22\u4e86\u3002\n\u4f60\u7537\u670b\u53cb\u7684\u670b\u53cb\u672c\u51e0\u4e4e\u8981\u5f3a\u5978\u4e00\u4e2a\u4eba\uff0c\u5982\u679c\u4ed6\u8fd8\u6ca1\u6709\u3002\n\u6211\u8ba4\u4e3a\u4ed6\u5f3a\u5978\u522b\u4eba\u7684\u53ef\u80fd\u6027\u4e5f\u5f88\u9ad8\u3002\u975e\u5e38\u9ad8\u3002\u6709\u4eba\uff0c\u5728\u5927\u5b66\u91cc\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u559d\u5f97\u6709\u70b9\u9189\u4e86\uff0c\u6ca1\u6cd5\u53ca\u65f6\u9192\u6765\uff0c\u4e5f\u6ca1\u6cd5\u5b8c\u5168\u6267\u884c\u201c\u6211\u5f88\u611f\u6fc0\u4f60\u9001\u6211\u56de\u5bb6\uff0c\u4f46\u8bf7\u4e0d\u8981\u8fdb\u5165\u6211\u7684\u623f\u95f4\u3002\u201d\n......", "note_en": "Here is Letter #322. It and the other letter are below the jump because it\u2019s fucking  creepy in there.\n Edited to Add: It\u2019s frankly depressing that this post has struck a chord with so many people, but I\u2019m grateful and honored to be able to help the letter writers and to have given voice to what so many people were feeling. Unfortunately the demands of moderating this discussion have become overwhelming this week, so as of Monday, August 13th comments are locked. We\u2019ll pick up this discussion some other time. Thank you for all of your insightful contributions and for making this one of the best commentspaces on the Web. &lt;/EDIT&gt;\n   We have a creeper in our social group. \u00a0He\u2019s about 10 years older than the rest of us on average, divorced with two kids. \u00a0And I know this is going to sound like every in-denial LW who ever wrote in to an advice columnist ever, but he\u2019s not a bad guy. \u00a0He\u2019s fun to hang out with, he\u2019s a devoted dad, he\u2019s a loyal friend \u2026 and he\u2019s driving away all of his female friends with his behavior.\n He\u2019s mostly been concentrating on the other women: telling them to expose themselves, telling them their skirts weren\u2019t flying high enough while they were dancing, hitting on them when he knows they have boyfriends. \u00a0(My husband tells me Creeper has also hit on me a couple times, but I haven\u2019t noticed it.) \u00a0Most of this happens when he is drunk, but even sober he has a tendency to make sexist jokes or joke about sex and then tell us we have no sense of humor when we don\u2019t find them funny. \u00a0A couple months ago he started complaining, loudly and repeatedly, that he really wanted to get laid because he hasn\u2019t had sex since his divorce (about 2-3 years ago). \u00a0Whenever there are parties, it seems like he goes with the mindset that he will meet someone there that he might be able to have sex with, rather than to have fun with his friends. \u00a0A couple months ago at one of these parties, some of us went to the park after dark to hang out; Creeper approached one of my friends, asked where her boyfriend was, and when he was told that the BF was out of town he put his hands on her shoulders and told her that BF had \u201cforfeited\u201d her for the evening.\n I\u2019ve talked to Creeper about this last incident and tried to explain that his behavior is making every woman in our social group very uncomfortable; that approaching a woman in the dark, putting his hands on her without permission, and implying that because her boyfriend wasn\u2019t there that she was up for grabs was Not Fucking Cool; that when two of our friends got married, and he spent the entire reception hitting on the bride\u2019s family members (including her 16-year-old cousin) he appeared to be more focused on getting laid than celebrating the marriage of two of his friends; that when he is sober, he is not so bad, but when he gets drunk he gets really creepy and maybe he should not be going to parties and getting drunk anymore. \u00a0He seemed to listen to me at the time, but now, a month later, he is whining on Facebook that people aren\u2019t finding his sex jokes funny and calling him a creeper. \u00a0\u201cI know I\u2019m not a creeper, and everyone else knows, but I guess I\u2019ve made a few faux pas with friends-of-friends\u201d pretty much sums it up. \u00a0So clearly, nothing I said sank in.\n I want to punch him. \u00a0I\u2019d dearly love to tell him that just because someone calls you a creeper, or creepy, doesn\u2019t make you a bad person, but if every female friend you have is telling you that you make them uncomfortable then you are the fucking problem. \u00a0Unfortunately, he clearly isn\u2019t listening to what I\u2019ve been telling him (and I\u2019m the one who hasn\u2019t been driven off \u2013 the rest of our female friends are flat-out avoiding him for their own safety and I can\u2019t blame them one bit for it), and I can\u2019t tell if it\u2019s because I\u2019m female or if it\u2019s because I\u2019m 10 years younger than he is. \u00a0He also has a tendency to get defensive, and he\u2019s starting to retreat into Nice Guy territory. \u00a0I\u2019ve considered asking one of the other men to talk to him, but again, I\u2019m worried he\u2019ll dismiss whoever goes to talk to him because he\u2019s older than the rest of us.\n Something needs to happen here, obviously, but I have no idea what. \u00a0He invites people over for games a lot (being one of the few people who has a table big enough for gaming), and comes over a lot as well, and the guys in the group are mostly fine hanging out with him. \u00a0(They all agree that something needs to be done about his behavior, but for them it\u2019s not as urgent, I guess.) \u00a0He also lives a block away from me, so I see him quite a bit. I know there\u2019s no way out of this without drama and hurt feelings and awkwardness. I just don\u2019t know what to do. \u00a0Do I try to get the others to confront him? \u00a0Arrange some sort of intervention? \u00a0Tell my husband that Creeper\u2019s not invited to our place anymore and avoid events where Creeper will be? \u00a0I\u2019d call him out myself, but (1) I can\u2019t speak for my friends, especially when they\u2019ve been affected more than I have, (2) he clearly won\u2019t listen to me, and (3) I\u2019m shit at confrontation and tend to get flustered and start crying. \u00a0Any advice you have would be really helpful.\n     My boyfriend and I have been together for over two years, and it\u2019s been a generally great relationship. However, my boyfriend\u2019s friend (I\u2019ll call him Ben) has become a major sore point for us. In fact, Ben has become a major sore point for our whole group of friends. Boyfriend has been friends with Ben since middle school, and I understand that there is a lot of history there, and he feels he needs to be loyal to him. However, Ben is a gigantic creep who has preyed upon every single girl in our group.\n Not long after I first met Ben, we were at a party, and I got drunk/stoned and passed out. Later that night, my friend walked into the living room to find Ben cuddled up against me and stroking my leg. She freaked out at him, removed me from the living room and put me to bed, then told me what happened the next morning. She had no idea how long he\u2019d been there, and didn\u2019t know exactly what he did, and I was unconscious and have no memory of what happened. Needless to say, I have been very uncomfortable around him ever since. He\u2019s also sent me weird, sexually explicit messages over facebook, and told me not to tell Boyfriend because he \u201cwouldn\u2019t believe [me] anyway\u201d (Obviously, I immediately told my boyfriend, and blocked Ben not long after). Ben has also creeped on tons of other girls, including every friend I\u2019ve brought around. Other instances of Ben\u2019s behaviour have included:\n Offering to drive my stranded friend home from a party, then informing her that he expected sex as \u201cpayment\u201d when he dropped her off; following her to the house after she said no\n  Texting my friend about how he\u2019s \u201cjerking off\u201d while thinking about her\n Straight-up fondling (fully awake and conscious) girls that he\u2019s just met, or at the very least getting uncomfortably touchy-feely with them\n Attempting to have sex with his friend\u2019s girlfriend, on more than one occasion\n For what should be obvious reasons, every single girl in our group of friends completely hates Ben, and none of us want him around. However, when I tried to bring up the subject with Boyfriend and our guy friends, none of them seemed willing to admit that his behaviour was predatory or threatening, and they seemed reluctant to take a strong stance against him. They never spoke to Ben about his behaviour; in fact, they treated him as if he was a fragile child who was unable to deal with the consequences of his own actions. They also continued to include him in our activities. I was angered and baffled, and tried talking to my boyfriend about it. Boyfriend got weirdly defensive when I brought up the subject, saying that Ben is a \u201cgreat guy to hang out with\u201d, and sarcastically asking me if I wanted him to \u201cgo to Ben\u2019s house and beat him up over something that happened a year and a half ago.\u201d So yeah, it wasn\u2019t a very productive conversation.\n I later found out from another friend (she is the same age as Boyfriend and Ben, and went to high school with both of them) that Ben was exactly the same way back then, and there was an instance where Boyfriend had attempted to call Ben out on his behaviour. Apparently, Ben had some sort of frightening breakdown where he went on about how he\u2019s such a horrible person, and threatened to hurt himself, or commit suicide, or something along those lines. After being told this, I started to understand why Boyfriend and everyone else had been treating Ben as if he were so \u201cfragile\u201d, but hearing that story made me even more angry. It became clear to me that Ben has been emotionally manipulating my boyfriend, and probably others, so he can continue his horrible behaviour without being called out.\n I\u2019ve stopped inviting friends to parties because I don\u2019t want to subject them to Ben\u2019s creepiness, and I spend most of my time trying to avoid him when he\u2019s around. I don\u2019t want to be one of those girls who tries to tell their boyfriend who he can and can\u2019t hang out with, but I feel unsafe and afraid around Ben. I also feel completely betrayed that my boyfriend isn\u2019t taking a strong stance against a guy who, let\u2019s face it, tried to sexually assault me. I don\u2019t want him to go \u201cbeat him up\u201d, obviously, but it would be great if my boyfriend didn\u2019t, y\u2019know, constantly excuse and defend this jerk. So I guess my question is, how can I approach this subject with my boyfriend, and make him understand a) how serious this is, and b) that he is not responsible for Ben\u2019s reactions,\u00a0without\u00a0making him feel defensive?\n    I\u2019m not  slithering around on the floor and hissing with my forked tongue when I say that the situations described in these two letters are pretty good examples of what Rape Culture is and why it is so insidious.\n   Step 3: It gets written off as \u201cnot a big deal\u201d or \u201che probably didn\u2019t mean it\u201d or \u201che\u2019s not a bad guy, really.\u201d Any discussion of the bad behavior must immediately be followed by a complete audit of his better qualities or  the sad things he\u2019s suffered in the name of \u201cfairness.\u201d Once the camera has moved in and seen him in closeup as a real, human, suffering person, how can you (the object, always an object, as in \u201cobjectified,\u201d as in a disembodied set of tits or orifices, or a Trapper Keeper, or a favorite coffee mug or a pet cat) be so cruel as to want to hold him accountable for his actions? \u00a0Bitches, man.\n Step 4: Everyone is worried about hurting creepy dude\u2019s feelings or making it weird for creepy dude. Better yet, everyone is worried about how the other dudes in the friend group will feel if they are called out for enabling creepy dude. Women are worried that if they push the issue, that the entire friend group will side with creepy dude or that they\u2019ll be blamed for causing \u201cdrama.\u201d \u00a0Look at how LW #323 put it: \u00a0\u201c how can I approach this subject with my boyfriend, and make him understand a) how serious this is, and b) that he is not responsible for Ben\u2019s reactions,\u00a0 without\u00a0making him feel defensive?\u201d\n Wouldn\u2019t want someone who covers up for and defends a proto-rapist to have to have SADFEELS, right? (LW, it\u2019s not your fault you\u2019re asking the question this way, it\u2019s just that our culture sucks about this and your boyfriend and his friends have been giving you constant messages that Ben is to be coddled while you are to be shushed in the hopes that it will all blow over).\n Step 5: Creepy dude creeps on with his creepy self. He\u2019s learned that there are no real (i.e. \u201cdisapproval &amp; pushback from dudes and dude society\u201d) consequences to his actions. Women feel creeped out and unsafe.Some of them decide to take a firm stand against creeping and not come to parties anymore. They slowly slide out of the friend group. Some of the woman decide to just quietly put up with it, because they\u2019ve learned that no one will really side with them and it\u2019s easier to go along than to lose one\u2019s entire community. The whole group works around this  missing stair.\n Possible Step 6: Creepy dude rapes someone. If he does, there\u2019s  a less than 50% chance that the woman will report it. Why?\n Could it be that all the people who surround her have taught her that if she speaks up nothing will really come of it anyway? Could it be that she doesn\u2019t trust her friends and the people who love her to have her back on this? I CAN\u2019T IMAGINE WHY. They couldn\u2019t even kick this dude off their weekly trivia team.\n Could it be that the authorities, the police, and the court system will treat her like this is something she caused to happen? Worse, will the dude\u2019s history of being creepy come up and, instead of being used as evidence of a pattern of behavior, be used as evidence that the victim tolerated his advances in the past?\n So, yeah, I wanted to be very clear that these letters are part of a larger cultural paradigm that is a direct outgrowth of male privilege. Can women be creepy? Yes, for sure. They are human and capable of anything that humans are capable of. But when they are creepy, they don\u2019t have an entire culture backing them up and explaining why their creepiness isn\u2019t that bad.\n  LW #322, I\u2019ll start with your Creeper, The Creepicus Complainicus, of the genus \u201cSaddest Panda.\u201d His cry is \u201c Why won\u2019t someone just touch my wiener?\u201d People write him off as harmless because he\u2019s just so sad. They figure that this post-divorce pity party will eventually pass, and that he\u2019ll stop looking at every social gathering as a place where he can bitterly fail to get laid and bitterly whine about it.\n When I moved to Chicago, there were a few of these in my fledgling social group. One in particular was touchy-feely and huggy and came across as a big harmless teddy bear. He would develop a crush on every new girl in the group and constantly compliment her with weird, cutesy babytalk. Worse was the touching \u2013 hugs that last a little too long, uninvited backrubs, petting your hair, sitting down next to you and wanting to snuggle. It was all portrayed as innocent and sweet, but you could feel the boner behind it.\n I was new in town and not close to people yet, so I didn\u2019t have anyone to really talk to about this and I didn\u2019t know how to formulate a group solution. Other women seemed to tolerate the behavior and even enjoy it, so I decided that it was probably just me. I handled it by saying some variant of \u201c Hey, you\u2019re making me wicked uncomfortable. I don\u2019t like to be touched, so don\u2019t touch me unless I touch you first. Also, I don\u2019t want to flirt with you, so please no compliments or cutesy stuff around me, ok? I\u2019m not into it.\u201d\u00a0It was awkward as hell, and his feelings were super-hurt, and I felt guilty and second-guessed myself a lot, and at least one person tried to explain to me that he wasn\u2019t that bad and I didn\u2019t need to be such a bitch about it. \u201cBitch Who Doesn\u2019t Like To Be Touched\u201d became my persona and my armor in dealing with him and with some of the other handsy fellas (like the one who \u201ccomplimented\u201d me by telling me he masturbated about me sometimes) \u00a0in the friend group. They knew that any attempt to flirt would probably end with me saying \u201cGross,\u201d in the rudest possible tone and walking away.\n Which is not a magic solution by any means. The difference between that guy and your Creeper is that when he was called out and told directly to stop the behavior, he did. He apologized and kept his hands to himself. And over time he got more confidence and pulled himself out of his Sad Panda period, got a better job, found a specific #1 awesome lady (rather than spreading his love among All Geeky Ladies, Everywhere) and chilled the hell out. His many, many fine qualities like loyalty and smarts and a wicked sense of humor were much easier to appreciate then. \u00a0If he hadn\u2019t backed off me? And if my decision to be \u201c Hi, I\u2019m Jennifer-Please-Don\u2019t-Touch-Me\u201d had backfired? Saying goodbye to that social group would have been really, really hard and really, really sad and my life would be much poorer for it. None of this is easy.\n As far as concrete steps go, I think you\u2019ve done all the right things all the   best reviews to you, congratulations. You\u2019ve tried talking directly to the Creeper. Instead of listening to you and backing off, he\u2019s decided to whine about it and treat it as something that the world has done to him instead of something brought on by his own behavior. That was his choice and not something you can control with being awesome and using your words. ( Note: The other Saddest Pandas were eventually phased out of the social group not for treating every event like a chance to get laid, but for the endless whining. Whining about their singleness. Whining about how no one appreciates their favor-sharking behavior. Whining about how they weren\u2019t invited to certain events. \u00a0People will tolerate a fair amount of unwanted come-ons and sexual comments, but they will eventually cut you out if you won\u2019t stop whining).\n So. I think it\u2019s time to have nothing to do with this dude. You can\u2019t control what everyone will do \u2013 obviously he has been much-discussed if other ladies are avoiding him and you are pretty much the last one. De-friend him/hide his feed on Facebook. Do not go to any events at his house. Do not invite him to anything at yours. Make this very, very clear to your partner.\n  \u201cListen. I need to be done with Creeper for a good while. I\u2019m not going to things at his house, and he is definitely not invited to our place.\n I know you like him and are hopeful that he\u2019ll change. I hope he does, too, but being around him makes me feel so angry and unsafe that I can\u2019t really hang around and hope it gets better.\n I don\u2019t want to tell you how to handle your relationship with him, but there are two things I need from you.\n 1) Back me up on not inviting him anywhere I will be and definitely not inviting him here.\n 2) When it comes up in the friend group with other guys, have my back. Don\u2019t make me the bitch, make me someone who brought up legitimate concerns with a friend and then who got blown off. I didn\u2019t do this to him \u2013 he CHOSE to act like a dick and then whine about it.\n If a year from now he\u2019s drinking less and has chilled out and apologized for past behavior, I would *consider* hanging out again. But right now this decision feels pretty final.\u201d\n And don\u2019t worry so much about smoothing everything over and making everyone feel okay. Deliver that script and let your partner feel how he feels about it. Probably he\u2019ll feel bad and weird. The Creeper will feel bad and weird. They SHOULD feel bad and weird, because shit is bad and weird. Women are so socialized and trained to absorb other people\u2019s badness and weirdness for them, that it\u2019s going to be actively hard for you to NOT smooth things over. But don\u2019t smooth things over. Let them be weird. Let them be AWFUL.\n  \u201c Yeah, this is really awkward. I would love to feel safe and comfortable hanging out with you again, but I told you what you needed to do to make it right and you ignored me and then whined about it. So until there is a real apology and some big, observable changes in your behavior, we are on a break.\u201d\n This isn\u2019t something you did to the Creeper, it\u2019s something that he did to himself by acting badly and then not accepting the sweet gift of possible self-awareness that you tried to deliver. It\u2019s not innocent, it\u2019s not harmless, it\u2019s not \u201cshy dude nerdy cluelessness.\u201d That\u2019s especially hard to claim after you tell someone directly what they\u2019re doing wrong and ask them to knock off specific behaviors, right? And yet\u2026every goddamn time it comes up that maybe it\u2019s not his fault because he just didn\u2019t know better. NO. GET THE CLUE, ALREADY.\n  Your boyfriend\u2019s friend Ben is pretty much going to rape someone if he hasn\u2019t already.\n I would put the chances that he has already raped someone as high.  Very high.\u00a0Someone, somewhere back in college was a little too drunk to wake up in time or to fully enforce a \u201c I appreciate the ride home, but please don\u2019t come into my h\n......", "posttime": "2022-02-23 22:04:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u683c\u62c9\u65af,doctor,\u670b\u53cb", "title": "\u6211\u4e08\u592b\u683c\u62c9\u65af\u533b\u751f\u6700\u8fd1\u53c2\u52a0\u4e86\u4e00\u4e2a\u4e3a\u671f\u4e00\u5468\u7684\u7814\u8ba8\u4f1a\u3002(2012)", "title_en": "My husband, Doctor Glass, recently went on a weeklong workshop. (2012)", "transed": 1, "url": "https://captainawkward.com/2012/08/07/322-323-my-friend-group-has-a-case-of-the-creepy-dude-how-do-we-clear-that-up/#comment-20359", "via": "", "real_tags": ["\u683c\u62c9\u65af", "doctor", "\u670b\u53cb"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074731, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53f8\u6cd5\u90e8\u957f\u8868\u793a\uff0c\u6839\u636e\u82cf\u683c\u5170\u7684\u4ec7\u6068\u72af\u7f6a\u6cd5\uff0c\u9910\u684c\u4e0a\u717d\u52a8\u4ec7\u6068\u7684\u5bf9\u8bdd\u5fc5\u987b\u53d7\u5230\u8d77\u8bc9\u3002\nHumza Yousaf\u8bf4\uff0c\u5982\u679c\u8bb0\u8005\u548c\u620f\u5267\u5bfc\u6f14\u7684\u4f5c\u54c1\u88ab\u8ba4\u4e3a\u6545\u610f\u717d\u52a8\u504f\u89c1\uff0c\u4ed6\u4eec\u4e5f\u5e94\u8be5\u9762\u5bf9\u6cd5\u5ead\u3002\n\u4ec7\u6068\u72af\u7f6a\u548c\u516c\u5171\u79e9\u5e8f\uff08\u82cf\u683c\u5170\uff09\u6cd5\u6848\u906d\u5230\u4e86\u5305\u62ec\u82cf\u683c\u5170\u5929\u4e3b\u6559\u4f1a\u3001\u8b66\u65b9\u4ee3\u8868\u3001\u5b66\u8005\u548c\u827a\u672f\u5bb6\u5728\u5185\u7684\u6279\u8bc4\u4eba\u58eb\u7684\u8c34\u8d23\u3002\u8be5\u6cd5\u6848\u5c06\u89c4\u5b9a\u717d\u52a8\u4ec7\u6068\u5177\u6709\u53d7\u4fdd\u62a4\u7279\u5f81\uff08\u5305\u62ec\u6b8b\u75be\u3001\u6027\u53d6\u5411\u548c\u5e74\u9f84\uff09\u7684\u4eba\u7684\u7f6a\u884c\u3002\n\u8be5\u6cd5\u6848\u5927\u81f4\u4ee51986\u5e74\u300a\u516c\u5171\u79e9\u5e8f\u6cd5\u300b\u4e3a\u57fa\u7840\uff0c\u8be5\u6cd5\u5c06\u5a01\u80c1\u3001\u8fb1\u9a82\u6216\u4fae\u8fb1\u6027\u8a00\u8bba\u548c\u884c\u4e3a\u5b9a\u4e3a\u975e\u6cd5\uff0c\u4f46\u5305\u62ec\u4e00\u9879\u201c\u5c45\u4f4f\u5730\u8fa9\u62a4\u201d\uff0c\u5373\u5982\u679c\u5a01\u80c1\u6027\u8bed\u8a00\u662f\u5728\u516c\u5171\u573a\u5408\u4f7f\u7528\u7684\uff0c\u5219\u4e0d\u5f97\u8d77\u8bc9", "note_en": "Conversations over the dinner table that incite hatred must be prosecuted under Scotland\u2019s hate crime law, the justice secretary has said.\n Journalists and theatre directors should also face the courts if their work is deemed to deliberately stoke up prejudice,  Humza Yousaf said.\n  The Hate Crime and Public Order (Scotland) Bill has been condemned by critics including the Scottish Catholic Church, police representatives, academics and artists. It will introduce an offence of stirring-up of hatred against people with protected characteristics, including disability, sexual orientation and age.\n The bill is loosely based on the Public Order Act 1986, which outlaws threatening, abusive or insulting words and behaviour but includes a \u201cdwelling defence\u201d that states the threatening language cannot be prosecuted if it is spoken in a", "posttime": "2022-02-23 22:01:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u4ec7\u6068,hate,\u82cf\u683c\u5170", "title": "\u82cf\u683c\u5170\u7684\u4ec7\u6068\u72af\u7f6a\u6cd5\u6848\uff1a\u5bb6\u5ead\u4e2d\u7684\u4ec7\u6068\u8a00\u8bba\u201c\u5fc5\u987b\u88ab\u8d77\u8bc9\u201d\uff082020\u5e74\uff09", "title_en": "Scotland's Hate crime bill: Hate talk in homes \u2018must be prosecuted\u2019 (2020)", "transed": 1, "url": "https://www.thetimes.co.uk/article/hate-crime-bill-hate-talk-in-homes-must-be-prosecuted-6bcthrjdc", "via": "", "real_tags": ["2020", "\u4ec7\u6068", "hate", "\u82cf\u683c\u5170"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074730, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\u7684\u6027\u80fd\u968f\u7740\u66f4\u591a\u9ad8\u8d28\u91cf\u6807\u7b7e\u7684\u63d0\u4f9b\u800c\u63d0\u9ad8\u3002\u7136\u800c\uff0c\u6536\u96c6\u5927\u91cf\u6807\u8bb0\u6837\u672c\u7684\u6210\u672c\u5f88\u9ad8\u3002\u5f53\u6709\u8d44\u6e90\u6807\u8bb0\u66f4\u591a\u7684\u6570\u636e\u6837\u672c\u4f46\u9884\u7b97\u6709\u9650\u65f6\uff0c\u4e3b\u52a8\u5b66\u4e60\u662f\u4e00\u79cd\u5904\u7406\u6807\u8bb0\u6570\u636e\u4e0d\u8db3\u7684\u8303\u5f0f\u3002\n\u8fd9\u662f\u5728\u76d1\u7763\u5b66\u4e60\u4efb\u52a1\u4e2d\u9762\u5bf9\u6709\u9650\u6570\u91cf\u7684\u6807\u8bb0\u6570\u636e\u65f6\u8be5\u600e\u4e48\u505a\u7684\u7b2c2\u90e8\u5206\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5c06\u6d89\u53ca\u4e00\u4e9b\u4eba\u7c7b\u6807\u8bb0\u5de5\u4f5c\uff0c\u4f46\u5728\u9884\u7b97\u8303\u56f4\u5185\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728\u9009\u62e9\u8981\u6807\u8bb0\u7684\u6837\u672c\u65f6\u4fdd\u6301\u660e\u667a\u3002\n\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6807\u8bb0\u7684\u6570\u636e\u96c6\\\uff08\\mathcal{U}\\\uff09\u548c\u4e00\u4e2a\u56fa\u5b9a\u7684\u6807\u8bb0\u6210\u672c\\\uff08B\\\uff09\uff0c\u4e3b\u52a8\u5b66\u4e60\u7684\u76ee\u7684\u662f\u4ece\\\uff08\\mathcal{U}\\\uff09\u4e2d\u9009\u62e9\u4e00\u4e2a\u5b50\u96c6\\\uff08B\\\uff09\u793a\u4f8b\u8fdb\u884c\u6807\u8bb0\uff0c\u4ee5\u4fbf\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u6a21\u578b\u6027\u80fd\u3002\u8fd9\u662f\u4e00\u79cd\u6709\u6548\u7684\u5b66\u4e60\u65b9\u6cd5\uff0c\u5c24\u5176\u662f\u5728\u6570\u636e\u6807\u8bb0\u56f0\u96be\u4e14\u6210\u672c\u9ad8\u6602\u7684\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u533b\u5b66\u56fe\u50cf\u3002\u8fd9\u7bc72010\u5e74\u7684\u7ecf\u5178\u8c03\u67e5\u8bba\u6587\u5217\u51fa\u4e86\u8bb8\u591a\u5173\u952e\u6982\u5ff5\u3002\u867d\u7136\u4e00\u4e9b\u4f20\u7edf\u65b9\u6cd5\u53ef\u80fd\u4e0d\u9002\u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\uff0c\u4f46\u672c\u6587\u7684\u8ba8\u8bba\u4e3b\u8981\u96c6\u4e2d\u5728\u6df1\u5ea6\u795e\u7ecf\u6a21\u578b\u548c\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u7684\u8bad\u7ec3\u3002\n\u4e3a\u4e86\u7b80\u5316\u8ba8\u8bba\uff0c\u6211\u4eec\u5047\u8bbe\u5728\u4ee5\u4e0b\u6240\u6709\u90e8\u5206\u4e2d\uff0c\u4efb\u52a1\u90fd\u662f\u4e00\u4e2a\\\uff08K \\\uff09\u7c7b\u5206\u7c7b\u95ee\u9898\u3002\u5e26\u6709\u53c2\u6570\\\uff08\\theta\\\uff09\u7684\u6a21\u578b\u5728\u6807\u7b7e\u5019\u9009\u4e0a\u8f93\u51fa\u6982\u7387\u5206\u5e03\uff0c\u8be5\u6982\u7387\u5206\u5e03\u53ef\u80fd\u4f1a\u88ab\u6821\u51c6\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u88ab\u6821\u51c6\u3002\\\uff08P \\ \\theta\uff08y\\vert\\mathbf{x}\uff09\uff0c\u6700\u53ef\u80fd\u7684\u9884\u6d4b\u662f\\\uff08\\hat{y}=\\arg\\max\\u{y\\in\\mathcal{y}P\\utheta\uff08y\\vert\\mathbf{x}\uff09\u3002\n\u8bc6\u522b\u6700\u6709\u4ef7\u503c\u7684\u793a\u4f8b\u4ee5\u6807\u8bb0\u4e0b\u4e00\u6b65\u7684\u8fc7\u7a0b\u79f0\u4e3a\u201c\u91c7\u6837\u7b56\u7565\u201d\u6216\u201c\u67e5\u8be2\u7b56\u7565\u201d\u3002\u91c7\u6837\u8fc7\u7a0b\u4e2d\u7684\u8bc4\u5206\u51fd\u6570\u79f0\u4e3a\u201c\u91c7\u96c6\u51fd\u6570\u201d\uff0c\u8868\u793a\u4e3a\\\uff08U\uff08\\mathbf{x}\uff09\\\uff09\u3002\u5f97\u5206\u8f83\u9ad8\u7684\u6570\u636e\u70b9\u5982\u679c\u88ab\u6807\u8bb0\uff0c\u5219\u6709\u671b\u4e3a\u6a21\u578b\u8bad\u7ec3\u4ea7\u751f\u66f4\u9ad8\u7684\u4ef7\u503c\u3002\n\u4e0d\u786e\u5b9a\u6027\u62bd\u6837\u9009\u62e9\u6a21\u578b\u4ea7\u751f\u6700\u591a\u4e0d\u786e\u5b9a\u6027\u9884\u6d4b\u7684\u793a\u4f8b\u3002\u7ed9\u5b9a\u4e00\u4e2a\u5355\u4e00\u7684\u6a21\u578b\uff0c\u4e0d\u786e\u5b9a\u6027\u53ef\u4ee5\u901a\u8fc7\u9884\u6d4b\u7684\u6982\u7387\u6765\u4f30\u8ba1\uff0c\u5c3d\u7ba1\u4e00\u4e2a\u5e38\u89c1\u7684\u62b1\u6028\u662f\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u9884\u6d4b\u901a\u5e38\u6ca1\u6709\u7ecf\u8fc7\u6821\u51c6\uff0c\u5e76\u4e14\u4e0e\u771f\u5b9e\u7684\u4e0d\u786e\u5b9a\u6027\u6ca1\u6709\u5f88\u597d\u7684\u76f8\u5173\u6027\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6df1\u5ea6\u5b66\u4e60\u6a21\u5f0f\u5f80\u5f80\u8fc7\u4e8e\u81ea\u4fe1\u3002\n\u6700\u4e0d\u81ea\u4fe1\u5206\u6570\uff0c\u4e5f\u79f0\u4e3a\u53d8\u5f02\u7387\uff1a\\\uff08U\uff08\\mathbf{x}\uff09=1-P_theta\uff08\\hat{y}\\vert\\mathbf{x}\uff09\\\uff09\u3002\n\u8fb9\u9645\u5f97\u5206\uff1a\\\uff08U\uff08\\mathbf{x}\uff09=P\\theta\uff08\\hat{y}U 1\\vert\\mathbf{x}\uff09-P\\theta\uff08\\hat{y}U 2\\vert\\mathbf{x}\uff09\uff0c\u5176\u4e2d\\\uff08\\hat{y}U 1\\\uff09\u548c\\\uff08\\hat{y}U 2\\\uff09\u662f\u6700\u53ef\u80fd\u548c\u7b2c\u4e8c\u53ef\u80fd\u7684\u9884\u6d4b\u6807\u7b7e\u3002\n\u71b5\uff1a\\\uff08U\uff08\\mathbf{x}\uff09=\\mathcal{H}\uff08P\\theta\uff08y\\vert\\mathbf{x}\uff09\uff09=-\\sum\\U{y\\in\\mathcal{y}P\\theta\uff08y\\vert\\mathbf{x}\uff09\\log P\\theta\uff08y\\vert\\mathbf{x}\uff09\u3002\n\u53e6\u4e00\u79cd\u91cf\u5316\u4e0d\u786e\u5b9a\u6027\u7684\u65b9\u6cd5\u662f\u4f9d\u9760\u4e13\u5bb6\u6a21\u578b\u59d4\u5458\u4f1a\uff0c\u79f0\u4e3a\u59d4\u5458\u4f1a\u67e5\u8be2\uff08QBC\uff09\u3002QBC\u57fa\u4e8e\u4e00\u7cfb\u5217\u610f\u89c1\u6765\u8861\u91cf\u4e0d\u786e\u5b9a\u6027\uff0c\u56e0\u6b64\u4fdd\u6301\u59d4\u5458\u4f1a\u6210\u5458\u4e4b\u95f4\u7684\u5206\u6b67\u6c34\u5e73\u81f3\u5173\u91cd\u8981\u3002\u7ed9\u5b9a\u59d4\u5458\u4f1a\u6c60\u4e2d\u7684\\\uff08C\\\uff09\u6a21\u578b\uff0c\u6bcf\u4e2a\u6a21\u578b\u7531\\\uff08\\theta_1\u3001\\dots\u3001\\theta_C\\\uff09\u53c2\u6570\u5316\u3002\n\u9009\u6c11\u71b5\uff1a\\\uff08U\uff08\\mathbf{x}\uff09=\\mathcal{H}\uff08\\frac{V\uff08y\uff09}{C}\uff09\uff0c\u5176\u4e2d\\\uff08V\uff08y\uff09\\\uff09\u7edf\u8ba1\u6807\u7b7e\\\uff08y\\\uff09\u4e0a\u59d4\u5458\u4f1a\u7684\u6295\u7968\u6570\u3002\n\u591a\u6837\u6027\u62bd\u6837\u65e8\u5728\u627e\u5230\u80fd\u591f\u5f88\u597d\u5730\u4ee3\u8868\u6574\u4e2a\u6570\u636e\u5206\u5e03\u7684\u6837\u672c\u96c6\u5408\u3002\u591a\u6837\u6027\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u8be5\u6a21\u578b\u6709\u671b\u5728\u91ce\u5916\u7684\u4efb\u4f55\u6570\u636e\u4e0a\u90fd\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u800c\u4e0d\u662f\u5728\u4e00\u4e2a\u72ed\u7a84\u7684\u5b50\u96c6\u4e0a\u3002\u6240\u9009\u6837\u672c\u5e94\u4ee3\u8868\u6f5c\u5728\u5206\u5e03\u3002\u5e38\u7528\u7684\u65b9\u6cd5\u901a\u5e38\u4f9d\u8d56\u4e8e\u91cf\u5316\u6837\u672c\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\u3002\n\u9884\u671f\u6a21\u578b\u53d8\u66f4\u662f\u6307\u6837\u672c\u5bf9\u6a21\u578b\u57f9\u8bad\u4ea7\u751f\u7684\u5f71\u54cd\u3002\u5f71\u54cd\u53ef\u4ee5\u662f\u5bf9\u6a21\u578b\u6743\u91cd\u7684\u5f71\u54cd\uff0c\u4e5f\u53ef\u4ee5\u662f\u5bf9\u8bad\u7ec3\u635f\u5931\u7684\u6539\u5584\u3002\u4e0b\u4e00\u8282\u5c06\u56de\u987e\u5173\u4e8e\u5982\u4f55\u6d4b\u91cf\u9009\u5b9a\u6570\u636e\u6837\u672c\u89e6\u53d1\u7684\u6a21\u578b\u5f71\u54cd\u7684\u51e0\u9879\u5de5\u4f5c\u3002\n\u4e0a\u8ff0\u8bb8\u591a\u65b9\u6cd5\u5e76\u4e0d\u76f8\u4e92\u6392\u65a5\u3002\u6df7\u5408\u91c7\u6837\u7b56\u7565\u5bf9\u6570\u636e\u70b9\u7684\u4e0d\u540c\u5c5e\u6027\u8fdb\u884c\u4f30\u503c\uff0c\u5c06\u4e0d\u540c\u7684\u91c7\u6837\u504f\u597d\u7ec4\u5408\u4e3a\u4e00\u4e2a\u3002\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u9009\u62e9\u4e0d\u786e\u5b9a\u4f46\u4e5f\u5177\u6709\u9ad8\u5ea6\u4ee3\u8868\u6027\u7684\u6837\u672c\u3002\n\u6a21\u578b\u4e0d\u786e\u5b9a\u6027\u901a\u5e38\u5206\u4e3a\u4e24\u7c7b\uff08Der Kiureghian&Ditlevsen 2009\uff0cKendall&Gal 2017\uff09\uff1a\n\u4efb\u610f\u4e0d\u786e\u5b9a\u5ea6\u662f\u7531\u6570\u636e\u4e2d\u7684\u566a\u58f0\uff08\u4f8b\u5982\u4f20\u611f\u5668\u6570\u636e\u3001\u6d4b\u91cf\u8fc7\u7a0b\u4e2d\u7684\u566a\u58f0\uff09\u5f15\u5165\u7684\uff0c\u53ef\u4ee5\u662f\u8f93\u5165\u76f8\u5173\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u8f93\u5165\u72ec\u7acb\u7684\u3002\u5b83\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u4e0d\u53ef\u8fd8\u539f\u7684\uff0c\u56e0\u4e3a\u7f3a\u5c11\u5173\u4e8e\u5730\u9762\u771f\u76f8\u7684\u4fe1\u606f\u3002\n\u8ba4\u77e5\u4e0d\u786e\u5b9a\u6027\u662f\u6307\u6a21\u578b\u53c2\u6570\u5185\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u77e5\u9053\u6a21\u578b\u662f\u5426\u80fd\u6700\u597d\u5730\u89e3\u91ca\u6570\u636e\u3002\u8003\u8651\u5230\u66f4\u591a\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\u5728\u7406\u8bba\u4e0a\u662f\u53ef\u4ee5\u51cf\u5c11\u7684\n\u673a\u5668\u5b66\u4e60\u6709\u4e00\u4e2a\u60a0\u4e45\u7684\u4f20\u7edf\uff0c\u5373\u4f7f\u7528\u96c6\u6210\u6765\u63d0\u9ad8\u6a21\u578b\u6027\u80fd\u3002\u5f53\u6a21\u578b\u4e4b\u95f4\u5b58\u5728\u663e\u8457\u5dee\u5f02\u65f6\uff0c\u96c6\u6210\u6709\u671b\u4ea7\u751f\u66f4\u597d\u7684\u7ed3\u679c\u3002\u8bb8\u591aML\u7b97\u6cd5\u90fd\u8bc1\u660e\u4e86\u8fd9\u4e2a\u7cfb\u7efc\u7406\u8bba\u7684\u6b63\u786e\u6027\uff1b\u4f8b\u5982\uff0cAdaBoost\u805a\u5408\u4e86\u8bb8\u591a\u5f31\u5b66\u4e60\u8005\uff0c\u4f7f\u5176\u8868\u73b0\u4e0e\u5355\u4e2a\u5f3a\u5b66\u4e60\u8005\u76f8\u4f3c\uff0c\u751a\u81f3\u66f4\u597d\u3002Bootstrapping\u96c6\u6210\u4e86\u591a\u6b21\u91cd\u91c7\u6837\u8bd5\u9a8c\uff0c\u4ee5\u5b9e\u73b0\u66f4\u51c6\u786e\u7684\u5ea6\u91cf\u4f30\u8ba1\u3002\u968f\u673a\u68ee\u6797\uff08Random forests\uff09\u6216GBM\u4e5f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u8bf4\u660e\u4e86\u52a0\u5bc6\u7684\u6709\u6548\u6027\u3002\n\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u4e0d\u786e\u5b9a\u6027\u4f30\u8ba1\uff0c\u53ef\u4ee5\u76f4\u89c2\u5730\u805a\u5408\u4e00\u7ec4\u7ecf\u8fc7\u72ec\u7acb\u8bad\u7ec3\u7684\u6a21\u578b\u3002\u7136\u800c\uff0c\u8bad\u7ec3\u5355\u4e2a\u6df1\u5c42\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u6210\u672c\u5f88\u9ad8\uff0c\u66f4\u4e0d\u7528\u8bf4\u8bad\u7ec3\u5176\u4e2d\u7684\u8bb8\u591a\u6a21\u578b\u4e86\u3002\u5728\u5f3a\u5316\u5b66\u4e60\u4e2d\uff0c\u81ea\u4e3eDQN\uff08Osband\u7b49\uff0c2016\uff09\u914d\u5907\u4e86\u591a\u4e2a\u503c\u5934\uff0c\u5e76\u4f9d\u9760Q\u503c\u8fd1\u4f3c\u96c6\u5408\u4e2d\u7684\u4e0d\u786e\u5b9a\u6027\u6765\u6307\u5bfcRL\u4e2d\u7684\u63a2\u7d22\u3002\n\u5728\u4e3b\u52a8\u5b66\u4e60\u4e2d\uff0c\u66f4\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u8f8d\u5b66\u5b66\u751f\u201c\u6a21\u62df\u201d\u6982\u7387\u9ad8\u65af\u8fc7\u7a0b\uff08Gal&amp\uff1bGhahramani 2016\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u4ece\u540c\u4e00\u6a21\u578b\u4e2d\u91c7\u96c6\u7684\u591a\u4e2a\u6837\u672c\u8fdb\u884c\u6574\u5408\uff0c\u4f46\u5728\u6b63\u5411\u4f20\u9012\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e0d\u540c\u7684\u9000\u51fa\u906e\u7f69\uff0c\u4ee5\u4f30\u8ba1\u6a21\u578b\u7684\u4e0d\u786e\u5b9a\u6027\uff08\u8ba4\u77e5\u4e0d\u786e\u5b9a\u6027\uff09\u3002\u8be5\u8fc7\u7a0b\u88ab\u79f0\u4e3aMC\u8f8d\u5b66\uff08Monte Carlo\u8f8d\u5b66\uff09\uff0c\u5728\u6bcf\u4e2a\u6743\u91cd\u5c42\u4e4b\u524d\u5e94\u7528\u8f8d\u5b66\uff0c\u88ab\u6279\u51c6\u5728\u6570\u5b66\u4e0a\u7b49\u540c\u4e8e\u6982\u7387\u6df1\u9ad8\u65af\u8fc7\u7a0b\u7684\u8fd1\u4f3c\u503c\uff08Gal&Ghahramani 2016\uff09\u3002\u8fd9\u79cd\u7b80\u5355\u7684\u60f3\u6cd5\u5df2\u7ecf\u88ab\u8bc1\u660e\u5bf9\u5c0f\u6570\u636e\u96c6\u7684\u5206\u7c7b\u662f\u6709\u6548\u7684\uff0c\u5e76\u4e14\u5728\u9700\u8981\u6709\u6548\u7684\u6a21\u578b\u4e0d\u786e\u5b9a\u6027\u4f30\u8ba1\u7684\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u91c7\u7528\u3002\nDBAL\uff08Deep Bayes active learning\uff1bGal et al.2017\uff09\u4f7f\u7528MC\u8f8d\u5b66\u8fd1\u4f3c\u8d1d\u53f6\u65af\u795e\u7ecf\u7f51\u7edc\uff0c\u4ece\u800c\u5b66\u4e60\u6a21\u578b\u6743\u91cd\u7684\u5206\u5e03\u3002\u5728\u4ed6\u4eec\u7684\u5b9e\u9a8c\u4e2d\uff0cMC\u8f8d\u5b66\u8868\u73b0\u4f18\u4e8e\u968f\u673a\u57fa\u7ebf\u548c\u5e73\u5747\u6807\u51c6\u504f\u5dee\uff08mean STD\uff09\uff0c\u7c7b\u4f3c\u4e8e\u53d8\u5f02\u7387\u548c\u71b5\u6d4b\u91cf\u3002\nBeluch\u7b49\u4eba\uff082018\u5e74\uff09\u5c06\u57fa\u4e8e\u96c6\u5408\u7684\u6a21\u578b\u4e0eMC\u8f8d\u5b66\u6a21\u578b\u8fdb\u884c\u4e86\u6bd4\u8f83\uff0c\u53d1\u73b0\u6734\u7d20\u96c6\u5408\uff08\u5373\u5355\u72ec\u548c\u72ec\u7acb\u5730\u8bad\u7ec3\u591a\u4e2a\u6a21\u578b\uff09\u548c\u53d8\u5f02\u7387\u7684\u7ec4\u5408\u4ea7\u751f\u4e86\u6bd4\u5176\u4ed6\u6a21\u578b\u66f4\u597d\u7684\u6821\u51c6\u9884\u6d4b\u3002\u7136\u800c\uff0cnaive\u5957\u88c5\u975e\u5e38\u6602\u8d35\uff0c\u56e0\u6b64\u4ed6\u4eec\u63a2\u7d22\u4e86\u51e0\u79cd\u66f4\u4fbf\u5b9c\u7684\u9009\u62e9\uff1a\n\u5feb\u7167\u96c6\u6210\uff1a\u4f7f\u7528\u5faa\u73af\u5b66\u4e60\u901f\u7387\u8ba1\u5212\u6765\u8bad\u7ec3\u9690\u5f0f\u96c6\u6210\uff0c\u4f7f\u5176\u6536\u655b\u5230\u4e0d\u540c\u7684\u5c40\u90e8\u6781\u5c0f\u503c\u3002\n\u591a\u6837\u6027\u9f13\u52b1\u96c6\u6210\uff08DEE\uff09\uff1a\u4f7f\u7528\u4e00\u4e2a\u7ecf\u8fc7\u5c11\u91cf\u8bad\u7ec3\u7684\u57fa\u672c\u7f51\u7edc\u4f5c\u4e3a\\\uff08n \\\uff09\u4e2a\u4e0d\u540c\u7f51\u7edc\u7684\u521d\u59cb\u5316\uff0c\u6bcf\u4e2a\u7f51\u7edc\u90fd\u7ecf\u8fc7\u8f8d\u5b66\u8bad\u7ec3\uff0c\u4ee5\u9f13\u52b1\u591a\u6837\u6027\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u4e0a\u9762\u6240\u6709\u5ec9\u4ef7\u7684\u9690\u5f0f\u5408\u594f\u9009\u9879\u90fd\u6bd4\u5929\u771f\u7684\u5408\u594f\u6548\u679c\u5dee\u3002\u8003\u8651\u5230\u8ba1\u7b97\u8d44\u6e90\u7684\u9650\u5236\uff0cMC\u8f8d\u5b66\u4ecd\u7136\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u4e14\u7ecf\u6d4e\u7684\u9009\u62e9\u3002\u5f53\u7136\uff0c\u4eba\u4eec\u4e5f\u4f1a\u5c1d\u8bd5\u5c06\u5408\u594f\u548cMC\u8f8d\u5b66\uff08Pop&amp\uff1bFulop 2018\uff09\u7ed3\u5408\u8d77\u6765\uff0c\u901a\u8fc7\u968f\u673a\u5408\u594f\u83b7\u5f97\u4e00\u4e9b\u989d\u5916\u7684\u6027\u80fd\u589e\u76ca\u3002\nbackprop\u7684Bayes\uff08Blundell\u7b49\u4eba\uff0c2015\uff09\u76f4\u63a5\u6d4b\u91cf\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u6743\u91cd\u4e0d\u786e\u5b9a\u6027\u3002\u8be5\u65b9\u6cd5\u5728\u6743\u91cd\\\uff08\\mathbf{w}\\\uff09\u4e0a\u4fdd\u6301\u6982\u7387\u5206\u5e03\uff0c\u8be5\u6982\u7387\u5206\u5e03\u88ab\u5efa\u6a21\u4e3a\u53d8\u5206\u5206\u5e03\\\uff08q\uff08\\mathbf{w}\\vert\\theta\uff09\\\uff09\uff0c\u56e0\u4e3a\u771f\u5b9e\u540e\u9a8c\u5206\u5e03\\\uff08p\uff08\\mathbf{w}\\vert\\mathcal{D}\uff09\u4e0d\u53ef\u76f4\u63a5\u5904\u7406\u3002\u635f\u5931\u662f\u4e3a\u4e86\u6700\u5c0f\u5316\\\uff08q\uff08\\mathbf{w}\\vert\\theta\uff09\\\uff09\u548c\\\uff08p\uff08\\mathbf{w}\\vert\\mathcal{D}\uff09\\\uff09\u4e4b\u95f4\u7684KL\u5dee\u5f02\uff0c\n\\[\\begin{aligned}\\mathcal{L}\uff08\\theta\uff09&amp\uff1b=\\text{KL}[q\uff08\\mathbf{w}\\vert\\theta\uff09\\\\124; p\uff08\\mathbf{w}\\vert\\mathcal{D}\uff09]\\&amp\uff1b=\\int q\uff08\\mathbf{w}\\vert\\theta\uff09\\log\\frac{q\uff08\\mathbf{w}\\vert\\theta\uff09}{p\uff08\\mathbf{w}\uff09p\uff08\\mathcal{D}\\vert\\mathbf{w}\uff09D\\mathbf{w}\\\\\\\\&amp\uff1b=\\\u6587\u672c{KL}[q\uff08\\mathbf{w}\\vert\\theta\uff09\\\\ p\uff08w\uff09]-\\mathbb{E}{uq\uff08\\mathbf{w}\\vert\\theta\uff09}[\\log p\uff08\\mathcal{D}\\vert\\mathbf{w}\uff09]\\&amp\uff1b\\\u5927\u7ea6\\logq\uff08\\mathbf{w}\\vert\\theta\uff09-\\logp\uff08\\mathbf{w}\uff09p\uff08\\mathcal{D}\\vert\\mathbf{w}\uff09&amp\uff1b\\\u6587\u672c{\uff1b\u8499\u7279\u5361\u7f57\u62bd\u6837\uff1b}q\uff08\\mathbf{w}\\vert\\theta\uff09\\text{&amp\uff1b}p\uff08\\mathbf{w}\uff09\\text{\u63a5\u8fd1\u3002}\\\u7ed3\u675f{aligned}\\]\u53d8\u5206\u5206\u5e03\\\uff08q\\\uff09\u901a\u5e38\u662f\u5177\u6709\u5bf9\u89d2\u534f\u65b9\u5dee\u7684\u9ad8\u65af\u5206\u5e03\uff0c\u6bcf\u4e2a\u6743\u91cd\u4ece\\\uff08\\mathcal{N}\uff08\\mu_i\uff0c\\sigma_i^2\uff09\\\uff09\u4e2d\u91c7\u6837\u3002\u4e3a\u4e86\u786e\u4fdd\\\uff08\\sigma_i\\\uff09\u7684\u975e\u8d1f\u6027\uff0c\u5b83\u901a\u8fc7softplus\u8fdb\u4e00\u6b65\u53c2\u6570\u5316\uff0c\\\uff08\\sigma_i=\\log\uff081+\\exp\uff08\\rho_i\uff09\uff09\uff0c\u5176\u4e2d\u53d8\u5206\u53c2\u6570\u4e3a\\\uff08\\theta=\\{\\mu_i\\rho_i\\}^d_{i=1}\uff09\u3002\n\u8ba1\u7b97\\\uff08f\uff08\\mathbf{w}\uff0c\\theta\uff09\\\uff09w.r.t.\u5230\\\uff08\\mu\\\uff09\u548c\\\uff08\\rho\\\uff09\u7684\u68af\u5ea6\uff0c\u7136\u540e\u66f4\u65b0\\\uff08\\theta\\\uff09\u3002\n\u635f\u5931\u76ee\u6807\u6307\u5bfc\u6a21\u578b\u57f9\u8bad\u3002\u8f83\u4f4e\u7684\u635f\u5931\u503c\u8868\u660e\u6a21\u578b\u53ef\u4ee5\u505a\u51fa\u826f\u597d\u4e14\u51c6\u786e\u7684\u9884\u6d4b\u3002Yoo&amp\uff1bKweon\uff082019\uff09\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u635f\u5931\u9884\u6d4b\u6a21\u5757\uff0c\u7528\u4e8e\u9884\u6d4b\u672a\u6807\u8bb0\u8f93\u5165\u7684\u635f\u5931\u503c\uff0c\u4f5c\u4e3a\u5bf9\u7ed9\u5b9a\u6570\u636e\u7684\u6a21\u578b\u9884\u6d4b\u6548\u679c\u7684\u4f30\u8ba1\u3002\u5982\u679c\u635f\u5931\u9884\u6d4b\u6a21\u5757\u5bf9\u6570\u636e\u6837\u672c\u8fdb\u884c\u4e0d\u786e\u5b9a\u9884\u6d4b\uff08\u9ad8\u635f\u5931\u503c\uff09\uff0c\u5219\u9009\u62e9\u6570\u636e\u6837\u672c\u3002\u635f\u8017\u9884\u6d4b\u6a21\u5757\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5e26\u4e22\u5931\u7684MLP\uff0c\u5b83\u5c06\u51e0\u4e2a\u4e2d\u95f4\u5c42\u7279\u5f81\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u5728\u5168\u5c40\u5e73\u5747\u6c60\u540e\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\u3002\n\u5047\u8bbe\\\uff08\\hat{l}\\\uff09\u662f\u635f\u5931\u9884\u6d4b\u6a21\u5757\u7684\u8f93\u51fa\uff0c\\\uff08l\\\uff09\u662f\u771f\u6b63\u7684\u635f\u5931\u3002\u5728\u57f9\u8bad\u635f\u5931\u9884\u6d4b\u6a21\u5757\u65f6\uff0c\u7b80\u5355\u7684MSE\u635f\u5931\u201c\uff08=\uff08l-\\hat{l}\uff09^2\u201d\uff09\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u968f\u7740\u6a21\u578b\u5b66\u4e60\u5230\u66f4\u597d\u7684\u884c\u4e3a\uff0c\u635f\u5931\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u51cf\u5c11\u3002\u4e00\u4e2a\u597d\u7684\u5b66\u4e60\u76ee\u6807\u5e94\u8be5\u72ec\u7acb\u4e8e\u76ee\u6807\u635f\u5931\u7684\u89c4\u6a21\u53d8\u5316\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4f9d\u8d56\u4e8e\u6837\u672c\u5bf9\u7684\u6bd4\u8f83\u3002\u5728\u6bcf\u6279\u5927\u5c0f\u4e3a\\\uff08b\\\uff09\u7684\u6837\u54c1\u4e2d\uff0c\u6709\\\uff08b/2\\\uff09\u5bf9\u6837\u54c1\\\uff08\uff08\\mathbf{x}u i\u3001\\mathbf{x}u j\uff09\\\uff09\uff0c\u9884\u8ba1\u635f\u5931\u9884\u6d4b\u6a21\u578b\u80fd\u591f\u6b63\u786e\u9884\u6d4b\u54ea\u4e2a\u6837\u54c1\u7684\u635f\u5931\u66f4\u5927\u3002\n\\[bebe\u5f00\u59cb[[[be\u5f00\u59cb[[be\u5f00\u59cb[be\u5f00\u59cb[be\u5f00\u59cb[be\u5f00\u59cb[[be\u5f00\u59cb[[\u5bf9\u9f50]\u7684[[[be\u5f00\u59cb[be\u5f00\u59cb[[be\u5f00\u59cb[[be\u5f00\u59cb[be\u5f00\u59cb[[[[[\u5bf9\u9f50]]]\u7684[[be\u5f00\u59cb[[be\u5f00\u59cb[[[be\u5f00\u59cb[[be\u5f00\u59cb[be\u5f00\u59cb[be\u5f00\u59cb[[[be\u5f00\u59cb[[be\u5f00\u59cb[[[be\u5f00\u59cb[[[be\u5f00\u59cb[[[[be\u5f00\u59cb]]]]]\u53ef\u80fd[[[[[[[be\u5f00\u59cb[[[[be\u5f00\u59cb]]]]]]]\u53ef\u80fd[[[[[be\u5f00\u59cb[[[[[[[be\u5f00\u59cb[[[[[[be\u5f00\u59cb[[[[[be\u5f00\u59cb[[[[[[be\u5f00\u59cb]]]]]]]]]]]]\u53ef\u80fd[[[[[[[[[[[[[be\u5f00\u59cb]]]]]]]]]]]]]]]]]]\u7684[[[[[[[[[[[[[[[[[[i\uff0cL_j\uff09&amp\uff1b=\\begin{cases}+1&amp\uff1b\\text{if}L_i&gt\uff1bL_j\\-1&amp\uff1b\\text{other}\\end{cases}\\end{aligned}\\]\u5728\u4e09\u9879\u89c6\u89c9\u4efb\u52a1\u7684\u5b9e\u9a8c\u4e2d\uff0c\u57fa\u4e8e\u635f\u5931\u9884\u6d4b\u7684\u4e3b\u52a8\u5b66\u4e60\u9009\u62e9\u4f18\u4e8e\u968f\u673a\u57fa\u7ebf\u3001\u57fa\u4e8e\u71b5\u7684\u83b7\u53d6\u548c\u6838\u5fc3\u96c6\u3002\nSinha\u7b49\u4eba\uff082019\u5e74\uff09\u63d0\u51fa\u4e86\u4e00\u79cd\u7c7b\u4f3c\u4e8eGAN\u7684\u8bbe\u7f6e\uff0c\u540d\u4e3aVAAL\uff08\u53d8\u5206\u5bf9\u6297\u5f0f\u4e3b\u52a8\u5b66\u4e60\uff09\uff0c\u5176\u4e2d\u8bad\u7ec3\u4e86\u4e00\u4e2a\u9274\u522b\u5668\u6765\u533a\u5206\u672a\u6807\u8bb0\u6570\u636e\u548c\u6807\u8bb0\u6570\u636e\u3002\u6709\u8da3\u7684\u662f\uff0c\u4e3b\u52a8\u5b66\u4e60\u4e60\u5f97\u6807\u51c6\u5e76\u4e0d\u53d6\u51b3\u4e8eVAAL\u4e2d\u7684\u4efb\u52a1\u8868\u73b0\u3002\n\\\uff08\\beta\\\uff09-VAE\u5206\u522b\u5b66\u4e60\u6807\u8bb0\u548c\u672a\u6807\u8bb0\u6570\u636e\u7684\u6f5c\u5728\u7279\u5f81\u7a7a\u95f4\\\uff08\\mathbf{z}^l\\cup\\mathbf{z}^u\\\uff09\uff0c\u76ee\u7684\u662f\u6b3a\u9a97\u9274\u522b\u5668\\\uff08D\uff08.\uff09\\\uff09\u6240\u6709\u6570\u636e\u70b9\u90fd\u6765\u81ea\u6807\u8bb0\u7684\u6c60\uff1b\n\u9274\u522b\u5668\\\uff08D\uff08.\uff09\\\uff09\u6839\u636e\u6f5c\u5728\u8868\u793a\\\uff08\\mathbf{z}\\\uff09\u9884\u6d4b\u6837\u672c\u662f\u5426\u6807\u8bb0\u4e3a\uff081\uff09\u6216\uff080\uff09\u3002VAAL\u9009\u62e9\u5177\u6709\u4f4e\u9274\u522b\u5668\u5206\u6570\u7684\u672a\u6807\u8bb0\u6837\u672c\uff0c\u8fd9\u8868\u660e\u8fd9\u4e9b\u6837\u672c\u4e0e\u4e4b\u524d\u6807\u8bb0\u7684\u6837\u672c\u6709\u8db3\u591f\u7684\u5dee\u5f02\u3002\nVAAL\u4e2dVAE\u8868\u793a\u5b66\u4e60\u7684\u635f\u5931\u5305\u542b\u91cd\u5efa\u90e8\u5206\uff08\u6700\u5c0f\u5316\u7ed9\u5b9a\u6837\u672c\u7684ELBO\uff09\u548c\u5bf9\u6297\u90e8\u5206\uff08\u6807\u8bb0\u548c\u672a\u6807\u8bb0\u7684\u6570\u636e\u6765\u81ea\u76f8\u540c\u7684\u6982\u7387\u5206\u5e03\\\uff08q_ \\ phi\\\uff09\uff1a\n\\[\u5f00\u59cb[[[[be\u5f00\u59cb[[[[be\u5f00\u59cb[[[[[be\u5f00\u59cb[[[[[[[\u5bf9\u9f50]}}}{{[[[be\u5f00\u59cb[[[be\u5f00\u59cb[[[be\u5f00\u59cb[[[[[[[\u5bf9\u9f50]]]]\u53ef\u80fd[[be\u5f00\u59cb[[[[be\u5f00\u59cb[[[[[be\u5f00\u59cb[[[[\u5bf9\u9f50]]]]\u53ef\u80fd[[[[[[be\u5f00\u59cb[[[[[[[[be\u5f00\u59cb]]]]]]]]\u53ef\u80fd[[[[[[[[be\u5f00\u59cb]]]]]]]\u53ef\u80fd\u53ef\u80fd[[[[[[[[[[[[[[[be\u5f00\u59cb]]]]]]]]]]\u53ef\u80fd\u53ef\u80fd\u53ef\u80fd\u53ef\u80fd\u53ef\u80fd\u53ef\u80fd[[[[[[[[[[[[[[[[[[be\u5f00\u59cb]]]]]]]]]]]]]]]]]]]\u53ef\u80fd\u53ef\u80fd\u53ef\u80fd[[[[..........................^L]-\\beta\\text{KL}\uff08q\\phi\uff08\\mathbf{z}^L\\vert\\mathbf{x}^L\uff09\\\\124p\uff08\\mathbf{\\tilde{z}\uff09\uff09+\\mathbb{E}[\\log p\\uTheta\uff08\\mathbf{u}\\vert\\mathbf{z}^u\uff09]-\\beta\\text{KL}\uff08q{phi\uff08\\mathbf{z}^u\\vert\\mathbf{u}\uff09\\|p\uff08\\mathbf{\\tilde{z}\uff09\uff09\\\\\\mathcal{L}^\\text{adv}\\mathbb{E}[\\logd\uff08q_\\phi\uff08\\mathbf{z}^l\\vert\\mathbf{x}^l\uff09\uff09-\\mathbb{E}[\\logd\uff08q_\\phi\uff08\\mathbf{z}^u\\vert\\mathbf{u}\uff09\uff09\\end{aligned}]\u5176\u4e2d\\\uff08p\uff08\\mathbf{tilde{z}}\uff09\u662f\u4e00\u4e2a\u9884\u5148\u5b9a\u4e49\u7684\u9ad8\u65af\u5355\u4f4d\uff0c\\\uff09\u662f\u62c9\u683c\u6717\u65e5\u53c2\u6570\u3002\n\\\u6d88\u878d\u7814\u7a76\u8868\u660e\uff0c\u8054\u5408\u8bad\u7ec3VAE\u548c\u9274\u522b\u5668\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u4ed6\u4eec\u7684\u7ed3\u679c\u5bf9\u6709\u504f\u5dee\u7684\u521d\u59cb\u6807\u8bb0\u6c60\u3001\u4e0d\u540c\u7684\u6807\u8bb0\u9884\u7b97\u548c\u5608\u6742\u7684oracle\u5177\u6709\u9c81\u68d2\u6027\u3002\nMAL\uff08Minimax\u4e3b\u52a8\u5b66\u4e60\uff1bEbrahimiet al.2021\uff09\u662fVAAL\u7684\u4e00\u4e2a\u6269\u5c55\u3002MAL\u6846\u67b6\u7531\u71b5\u6700\u5c0f\u5316\u7279\u5f81\u7f16\u7801\u7f51\u7edc\\\uff08F\\\uff09\u548c\u71b5\u6700\u5927\u5316\u5206\u7c7b\u5668\\\uff08C\\\uff09\u7ec4\u6210\u3002\u8fd9\u79cdminimax\u8bbe\u7f6e\u51cf\u5c11\u4e86\u6807\u8bb0\u548c\u672a\u6807\u8bb0\u6570\u636e\u4e4b\u95f4\u7684\u5206\u5e03\u5dee\u8ddd\u3002\n\u7279\u5f81\u7f16\u7801\u5668\\\uff08F \\\uff09\u5c06\u6837\u672c\u7f16\u7801\u4e3a\\\uff08ell_2 \\\uff09\u5f52\u4e00\u5316\\\uff08d \\\uff09\u7ef4\u6f5c\u5728\u5411\u91cf\u3002\u5047\u8bbe\u5b58\u5728\\\uff08K\\\uff09\u7c7b\uff0c\u5206\u7c7b\u5668\\\uff08C\\\uff09\u7531\\\uff08\\mathbf{W}\\in\\mathbb{R}^{d\\times K}\\\uff09\u53c2\u6570\u5316\u3002\n\uff081\uff09 \u9996\u5148\u901a\u8fc7\u7b80\u5355\u7684\u4ea4\u53c9\u71b5\u635f\u5931\u5bf9\u6807\u8bb0\u6837\u672c\u8fdb\u884c\u8bad\u7ec3\uff0c\u4ee5\u83b7\u5f97\u826f\u597d\u7684\u5206\u7c7b\u7ed3\u679c\uff0c\n\\[[[mathbf{x}^L\uff0cy\\[[[[[[mathbf{[x}^1\uff0c1\uff0cy]\\sim\\Math[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[10]\u6570\u5b66b[[[10}}}}{{1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0c1\uff0cy\uff0c1\uff0cy\uff0cy\uff0cy\uff0cy]\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982\u6982[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[3]\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821\u5b66\u6821]\u7684[[[[[[[[[[[[[[[[[}\\mathcal{L}\\text{Ent}&amp\uff1b=-\\sum^k{k=1}p\uff08y=k\\vert\\mathbf{u}\uff09\\log p\uff08y=k\\vert\\mathbf{u}\uff09\\\\\\theta^*\\u F\u3001\\theta^*\\u C&amp\uff1b=\\min_F\\max_C\\mathcal{L}\\text{Ent}\\\\\\ theta_F&amp\uff1b\\\u83b7\u53d6\\theta_F-\\alpha_1\\nabla\\mathcal{L}\\uu\\text{Ent}\\\\\\ theta_C&amp\uff1b\\\u9996\u5148\u83b7\u53d6\\theta_C+\\alpha_2\\nabla\\mathcal{L}\\text{Ent}\\end{aligned}\\]\uff0c\u6700\u5c0f\u5316\\\uff08F\\\uff09\u4e2d\u7684\u71b5\u4f1a\u9f13\u52b1\u4e0e\u7c7b\u4f3c\u9884\u6d4b\u6807\u7b7e\u5173\u8054\u7684\u672a\u6807\u8bb0\u6837\u672c\u5177\u6709\u7c7b\u4f3c\u7684\u529f\u80fd\u3002\n\u5728\\\uff08C \\\uff09\u4e2d\u6700\u5927\u5316\u71b5\u4f1a\u4f7f\u9884\u6d4b\u9075\u5faa\u66f4\u5747\u5300\u7684\u7c7b\u5206\u5e03\u3002\uff08\u6211\u5728\u8fd9\u91cc\u7684\u7406\u89e3\u662f\uff0c\u7531\u4e8e\u672a\u6807\u8bb0\u6837\u672c\u7684\u771f\u5b9e\u6807\u7b7e\u672a\u77e5\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u4f18\u5316\u5206\u7c7b\u5668\u4ee5\u6700\u5927\u5316\u9884\u6d4b\u6807\u7b7e\u3002\uff09\n\u591a\u6837\u6027\uff1a\u5206\u6570\u4e3a\\\uff08D\\\uff09\u8868\u793a\u6837\u672c\u4e0e\u4e4b\u524d\u770b\u5230\u7684\u6837\u672c\u6709\u591a\u76f8\u4f3c\u3002\u5206\u6570\u63a5\u8fd10\u65f6\uff0c\u6700\u597d\u9009\u62e9\u4e0d\u719f\u6089\u7684\u6570\u636e\u70b9\u3002\n\u4e0d\u786e\u5b9a\u6027\uff1a\u4f7f\u7528\\\uff08C\\\uff09\u83b7\u5f97\u7684\u71b5\u3002\u71b5\u5f97\u5206\u8d8a\u9ad8\uff0c\u8868\u660e\u8be5\u6a21\u578b\u5c1a\u4e0d\u80fd\u505a\u51fa\u53ef\u9760\u7684\u9884\u6d4b\u3002\n\u5728\u56fe\u50cf\u5206\u7c7b\u548c\u5206\u5272\u4efb\u52a1\u4e0a\uff0c\u5b9e\u9a8c\u5c06MAL\u4e0e\u968f\u673a\u3001\u71b5\u3001\u6838\u5fc3\u96c6\u3001BALD\u548cVAAL\u57fa\u7ebf\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u7ed3\u679c\u770b\u8d77\u6765\u76f8\u5f53\u5f3a\u52b2\u3002\nCAL\uff08\u5bf9\u6bd4\u4e3b\u52a8\u5b66\u4e60\uff1bMargatina et al.2021\uff09\u6253\u7b97\u9009\u62e9\u5bf9\u6bd4\u4f8b\u5b50\u3002\u5982\u679c\u5177\u6709\u4e0d\u540c\u6807\u7b7e\u7684\u4e24\u4e2a\u6570\u636e\u70b9\u5171\u4eab\u76f8\u4f3c\u7684\u7f51\u7edc\u8868\u793a\\\uff08\\Phi\uff08.\uff09\\\uff09\uff0c\u5b83\u4eec\u5728CAL\u4e2d\u88ab\u89c6\u4e3a\u5bf9\u6bd4\u793a\u4f8b\u3002\u7ed9\u51fa\u4e00\u5bf9\u5bf9\u6bd4\u793a\u4f8b\\\uff08\\mathbf{x}u i\u3001\\mathbf{x}u j\uff09\\\uff09\uff0c\u5b83\u4eec\u5e94\u8be5\n\\[d\uff08p\uff08mathbf{x}{x}{x}{x}}{U j\uff09\u548c[d\uff08p\uff08mathbf{x}{x}{x}{x}{y\uff08p\uff08p\uff08y\\mathbf{x}{x{x{x{x}}i\uff09\u548c[p\uff08p\uff08mathbf{x}{x}{x}{x}{x}{x}j\uff09\u7684[j\uff09\u548c[p\uff08p\uff08p\uff08p\uff08y\uff08y\\mathbf{x{x{x{x{x{x}{x{x}{x}{x{x}{x}{x}x}x}}x}x}x}x}{x}}x}x}}x}}j\uff09\u7684[j\uff09\u7684[j\\\uff09\u3002\n\u8ba1\u7b97\\\uff08\\{mathbf{x}\\\uff09\u548c\\\uff08\\{mathbf{x}^l}\\\uff09\u4e2d\u6bcf\u4e2a\u6a21\u578b\u8f93\u51fa\u6982\u7387\u4e4b\u95f4\u7684KL\u6563\u5ea6\u3002\\\uff08\\mathbf{x}\\\uff09\u7684\u5bf9\u6bd4\u5206\u6570\u662f\u8fd9\u4e9bKL\u6563\u5ea6\u503c\u7684\u5e73\u5747\u503c\uff1a\\\uff08s\uff08\\mathbf{x}\uff09=\\frac{1}{M}\\sum{i=1}^M\\text{KL}\uff08p\uff08y\\vert\\mathbf{x}^l\\u i\\\\ 124p\uff08y\\vert\\mathbf{x}\uff09\uff09\u3002\n\u5728\u5404\u79cd\u5206\u7c7b\u4efb\u52a1\u4e0a\uff0cCAL\u7684\u5b9e\u9a8c\u7ed3\u679c\u4e0e\u71b5\u57fa\u7ebf\u76f8\u4f3c\u3002\n\u6838\u5fc3\u96c6\u662f\u8ba1\u7b97\u51e0\u4f55\u4e2d\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u6307\u7684\u662f\u8fd1\u4f3c\u4e8e\u8f83\u5927\u70b9\u96c6\u5f62\u72b6\u7684\u4e00\u5c0f\u7ec4\u70b9\u3002\u8fd1\u4f3c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u51e0\u4f55\u5ea6\u91cf\u6765\u6355\u6349\u3002\u5728\u4e3b\u52a8\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u671f\u671b\u5728\u6838\u5fc3\u96c6\u5408\u4e0a\u8bad\u7ec3\u7684\u6a21\u578b\u5728\u6574\u4e2a\u6570\u636e\u70b9\u4e0a\u7684\u8868\u73b0\u4e0e\u6a21\u578b\u76f8\u5f53\u3002\nSener&amp\uff1bSavarese\uff082018\uff09\u5c06\u4e3b\u52a8\u5b66\u4e60\u89c6\u4e3a\u6838\u5fc3\u96c6\u5408\u9009\u62e9\u95ee\u9898\u3002\u6bd4\u5982\u8bf4\uff0c\u5728\u57f9\u8bad\u671f\u95f4\u603b\u5171\u6709\\\uff08N\\\uff09\u4e2a\u6837\u672c\u53ef\u8bbf\u95ee\u3002\u5728\u4e3b\u52a8\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u65f6\u95f4\u6b65\\\uff08t\\\uff09\u90fd\u4f1a\u6807\u8bb0\u4e00\u5c0f\u90e8\u5206\u6570\u636e\u70b9\uff0c\u8868\u793a\u4e3a\\\uff08\\mathcal{S}^{\uff08t\uff09}\\\uff09\u3002\u5b66\u4e60\u76ee\u6807\u7684\u4e0a\u754c\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\uff0c\u5176\u4e2d\u6838\u5fc3\u96c6\u635f\u5931\u5b9a\u4e49\u4e3a\u6807\u8bb0\u6837\u672c\u7684\u5e73\u5747\u7ecf\u9a8c\u635f\u5931\u4e0e\u6574\u4e2a\u6570\u636e\u96c6\uff08\u5305\u62ec\u672a\u6807\u8bb0\u6837\u672c\uff09\u7684\u635f\u5931\u4e4b\u95f4\u7684\u5dee\u503c\u3002\n\\[\\begin{aligned}\\mathb{E}{\uff08\\mathbf{x}\uff0cy\uff09\\sim p}[\\mathcal{L}\uff08\\mathbf{x}\uff0cy\uff09]\\leq&amp\uff1b\\bigg\\vert\\mathbb{E}{\uff08\\mathbf{x}\uff0cy\uff09\\sim p}[\\mathcal{L}\uff08\\mathbf{x}\uff0cy\uff09]-\\frac{1}{N}\\sum{i=1}^N\\mathcal{L}\uff08\\mathbf{x}\uff0cy}\uff09bigg vert&amp\uff1b\\\u6587\u672c{\uff1b\u6cdb\u5316\u9519\u8bef}\\\\\\+&amp\uff1b\\frac{1}{\\vert\\mathcal{S}{\uff08t\uff09}\\vert}\\sum{j=1}{\\vert\\mathcal{S}{\uff08t\uff09}\\vert}\\mathcal{L}\uff08\\mathbf{x}^lj\uff0cyj\uff09&amp\uff1b\\\u6587\u672c{\uff1b\u8bad\u7ec3\u9519\u8bef}\\\\\\+&amp\uff1b\\bigg\\vert\\frac{1}{N}\\sum{i=1}^N\\mathcal{L}\uff08\\mathbf{x}i\uff0cy{u i\uff09-\\frac{1}{\\vert\\mathcal{S}\\vert}\\sum{j=1}{\\vert\\mathcal{S}{t}\\vertj}\uff1b\\\uff08t+1\uff09\u4ee5\u4e0b\u7684\uff1a\uff1a\uff1a\uff1a\uff1a{\u6838\u5fc3\u7ec4\u9519\u8bef\uff1b\u6838\u5fc3\u7ec4\u9519\u8bef\uff1b\u6838\u5fc3\u7ec4\u9519\u8bef\uff1a{{\u6838\u5fc3\u7ec4\u9519\u8bef\uff1a{\u6838\u5fc3\u7ec4\u9519\u8bef\uff1a{\u6838\u5fc3\u7ec4\u9519\u8bef\uff1a{{\u6838\u5fc3\u7ec4\u9519\u8bef\uff1a{\u6838\u5fc3\u7ec4\u9519\u8bef\uff1a{{\u6838\u5fc3\u7ec4\u9519\u8bef\uff08t+1\uff09}\\\u6838\u5fc3\u7ec4\u9519\u8bef[[[[[[[[[5 5]\u7684\u4e3b\u8981\u7ec4\u7ec4\u9519\u8bef]\u7f05\u7538\u7f05\u7538[[[[[[5]\u4e3b\u8981\u4e3b\u8981\u4e3b\u8981\u7ec4\u7ec4\u7ec4\u7ec4\u7ec4\u7ec4\u9519\u8bef\uff1a{{\uff08t+1\uff091\uff09\u7684[t+1}}}}}\\ \\ \\\u5012\u5012\u5012\u5012\u5012\u5012\u5012\u5012\u5012\u5012\u5012\u57fa\u57fa..............\u57fa\u57fa.............................................................................1\uff09}\\vert}\\sum{j=1}{\\vert\\mathcal{S}{\uff08t\uff09}\\cup\\mathcal{S}{\uff08t+1\uff09}\\vert}\\mathcal{L}\uff08\\mathbf{x}^L{j\uff0cyj\uff09\\bigg\\vert\\]\u8fd9\u76f8\u5f53\u4e8e\\\uff08k \\\uff09\u4e2d\u5fc3\u95ee\u9898\uff1a\u9009\u62e9\\\uff08b \\\uff09\u4e2d\u5fc3\u70b9\uff0c\u4f7f\u6570\u636e\u70b9\u4e0e\u5176\u6700\u8fd1\u4e2d\u5fc3\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb\u6700\u5c0f\u5316\u3002\u8fd9\u4e2a\u95ee\u9898\u662fNP\u96be\u95ee\u9898\u3002\u8fd1\u4f3c\u89e3\u53d6\u51b3\u4e8e\u8d2a\u5a6a\u7b97\u6cd5\u3002\n\u5f53\u7c7b\u6570\u8f83\u5c11\u65f6\uff0c\u5b83\u53ef\u4ee5\u5f88\u597d\u5730\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u3002\u5f53\u7c7b\u7684\u6570\u91cf\u589e\u52a0\u6216\u6570\u636e\u7ef4\u5ea6\u589e\u52a0\uff08\u201c\u7ef4\u5ea6\u8bc5\u5492\u201d\uff09\u65f6\uff0c\u6838\u5fc3\u96c6\u65b9\u6cd5\u7684\u6548\u7387\u5c31\u4f1a\u964d\u4f4e\uff08Sinha\u7b49\u4eba\uff0c2019\u5e74\uff09\u3002\n\u7531\u4e8e\u6838\u5fc3\u96c6\u9009\u62e9\u6210\u672c\u9ad8\u6602\uff0cColeman\u7b49\u4eba\uff082020\u5e74\uff09\u5bf9\u8f83\u5f31\u7684\u6a21\u578b\u8fdb\u884c\u4e86\u5b9e\u9a8c\uff08\u4f8b\u5982\uff0c\u8f83\u5c0f\u3001\u8f83\u5f31\u7684\u4f53\u7cfb\u7ed3\u6784\uff0c\u672a\u5b8c\u5168\u8bad\u7ec3\uff09\uff0c\u5e76\u53d1\u73b0\u7ecf\u9a8c\u4e0a\u4f7f\u7528\u8f83\u5f31\u7684\u6a21\u578b\u4f5c\u4e3a\u4ee3\u7406\u53ef\u4ee5\u663e\u8457\u7f29\u77ed\u8bad\u7ec3\u6a21\u578b\u548c\u9009\u62e9\u6837\u672c\u7684\u6bcf\u4e2a\u91cd\u590d\u6570\u636e\u9009\u62e9\u5468\u671f\uff0c\u4e0d\u4f1a\u5bf9\u6700\u540e\u7684\u9519\u8bef\u9020\u6210\u592a\u5927\u4f24\u5bb3\u3002\u4ed6\u4eec\u7684\u65b9\u6cd5\u88ab\u79f0\u4e3aSVP\uff08\u901a\u8fc7\u4ee3\u7406\u9009\u62e9\uff09\u3002\nBADGE\uff08\u901a\u8fc7\u4e0d\u540c\u68af\u5ea6\u5d4c\u5165\u7684\u6279\u91cf\u4e3b\u52a8\u5b66\u4e60\uff1bAsh\u7b49\u4eba\uff0c2020\uff09\u8ddf\u8e2a\u68af\u5ea6\u7a7a\u95f4\u4e2d\u7684\u6a21\u578b\u4e0d\u786e\u5b9a\u6027\u548c\u6570\u636e\u591a\u6837\u6027\u3002\u4e0d\u786e\u5b9a\u6027\u901a\u8fc7\u68af\u5ea6\u5e45\u503cw.r.t.\u6765\u6d4b\u91cf\u3002\u7f51\u7edc\u7684\u6700\u540e\u4e00\u5c42\u548c\u591a\u6837\u6027\u7531\u68af\u5ea6\u7a7a\u95f4\u4e2d\u7684\u4e00\u7ec4\u4e0d\u540c\u6837\u672c\u6355\u83b7\u3002\n\u4e0d\u786e\u5b9a\u6027\u3002\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6807\u8bb0\u7684\u6837\u672c\\\uff08\\mathbf{x}\\\uff09\uff0cBADGE\u9996\u5148\u8ba1\u7b97\u6700\u540e\u4e00\u5c42\u7684\u53c2\u6570\u5728\\\uff08\\mathbf{x}\u3001\\hat{y}\uff09\u4e0a\u7684\u635f\u5931\u7684\u9884\u6d4b\\\uff08\\hat{y}\\\uff09\u548c\u68af\u5ea6\\\uff08g\\mathbf{x}\uff09\u3002\u4ed6\u4eec\u89c2\u5bdf\u5230\uff0c\\\uff08g_\\mathbf{x}\\\uff09\u7684\u8303\u6570\u4fdd\u5b88\u5730\u4f30\u8ba1\u4e86\u793a\u4f8b\u5bf9\u6a21\u578b\u5b66\u4e60\u7684\u5f71\u54cd\uff0c\u5e76\u4e14\u9ad8\u7f6e\u4fe1\u5ea6\u6837\u672c\u5f80\u5f80\u5177\u6709\u5c0f\u5e45\u5ea6\u7684\u68af\u5ea6\u5d4c\u5165\u3002\n\u5dee\u5f02\u8003\u8651\u5230\u5f88\u591ag\n......", "note_en": "The performance of supervised learning tasks improves with more high-quality labels available. However, it is expensive to collect a large number of labeled samples. Active learning is one paradigm to deal with not enough labeled data, when there are resources for labeling more data samples but under a limited budget.\n This is part 2 of what to do when facing a limited amount of labeled data for supervised learning tasks. This time we will get some amount of human labeling work involved, but within a budget limit, and therefore we need to be smart when selecting which samples to label.\n     Given an unlabeled dataset \\(\\mathcal{U}\\) and a fixed amount of labeling cost \\(B\\), active learning aims to select a subset of \\(B\\) examples from \\(\\mathcal{U}\\) to be labeled such that they can result in maximized improvement in model performance. This is an effective way of learning especially when data labeling is difficult and costly, e.g. medical images. This classical  survey paper in 2010 lists many key concepts. While some conventional approaches may not apply to deep learning, discussion in this post mainly focuses on deep neural models and training in batch mode.\n   To simplify the discussion, we assume that the task is a \\(K\\)-class classification problem in all the following sections. The model with parameters \\(\\theta\\) outputs a probability distribution over the label candidates, which may or may not be calibrated, \\(P_\\theta(y \\vert \\mathbf{x})\\) and the most likely prediction is \\(\\hat{y} = \\arg\\max_{y \\in \\mathcal{Y}} P_\\theta(y \\vert \\mathbf{x})\\).\n  The process of identifying the most valuable examples to label next is referred to as \u201csampling strategy\u201d or \u201cquery strategy\u201d. The scoring function in the sampling process is named \u201cacquisition function\u201d, denoted as \\(U(\\mathbf{x})\\). Data points with higher scores are expected to produce higher value for model training if they get labeled.\n   Uncertainty sampling selects examples for which the model produces most uncertain predictions. Given a single model, uncertainty can be estimated by the predicted probabilities, although one common complaint is that deep learning model predictions are often not calibrated and not correlated with true uncertainty well. In fact, deep learning models are often overconfident.\n Least confident score, also known as  variation ratio: \\(U(\\mathbf{x}) = 1 - P_\\theta(\\hat{y} \\vert \\mathbf{x})\\).\n  Margin score: \\(U(\\mathbf{x}) = P_\\theta(\\hat{y}_1 \\vert \\mathbf{x}) - P_\\theta(\\hat{y}_2 \\vert \\mathbf{x})\\), where \\(\\hat{y}_1\\) and \\(\\hat{y}_2\\) are the most likely and the second likely predicted labels.\n  Entropy: \\(U(\\mathbf{x}) = \\mathcal{H}(P_\\theta(y \\vert \\mathbf{x})) = - \\sum_{y \\in \\mathcal{Y}} P_\\theta(y \\vert \\mathbf{x}) \\log P_\\theta(y \\vert \\mathbf{x})\\).\n Another way to quantify uncertainty is to rely on a committee of expert models, known as Query-By-Committee (QBC). QBC measures uncertainty based on a pool of opinions and thus it is critical to keep a level of disagreement among committee members. Given \\(C\\) models in the committee pool, each parameterized by \\(\\theta_1, \\dots, \\theta_C\\).\n Voter entropy: \\(U(\\mathbf{x}) = \\mathcal{H}(\\frac{V(y)}{C})\\), where \\(V(y)\\) counts the number of votes from the committee on the label \\(y\\).\n  Diversity sampling intend to find a collection of samples that can well represent the entire data distribution. Diversity is important because the model is expected to work well on any data in the wild, just not on a narrow subset. Selected samples should be representative of the underlying distribution. Common approaches often rely on quantifying the similarity between samples.\n  Expected model change refers to the impact that a sample brings onto the model training. The impact can be the influence on the model weights or the improvement over the training loss. A  later section reviews several works on how to measure model impact triggered by selected data samples.\n  Many methods above are not mutually exclusive. A  hybrid sampling strategy values different attributes of data points, combining different sampling preferences into one. Often we want to select  uncertain but also highly representative samples.\n   The model uncertainty is commonly categorized into two buckets ( Der Kiureghian &amp; Ditlevsen 2009,  Kendall &amp; Gal 2017):\n Aleatoric uncertainty is introduced by noise in the data (e.g. sensor data, noise in the measurement process) and it can be input-dependent or input-independent. It is generally considered as irreducible since there is missing information about the ground truth.\n  Epistemic uncertainty refers to the uncertainty within the model parameters and therefore we do not know whether the model can best explain the data. This type of uncertainty is theoretically reducible given more data\n  There is a long tradition in machine learning of using ensembles to improve model performance. When there is a significant diversity among models, ensembles are expected to yield better results. This ensemble theory is proved to be correct by many ML algorithms; for example,  AdaBoost aggregates many weak learners to perform similar or even better than a single strong learner.  Bootstrapping ensembles multiple trials of resampling to achieve more accurate estimation of metrics. Random forests or  GBM is also a good example for the effectiveness of ensembling.\n To get better uncertainty estimation, it is intuitive to aggregate a collection of independently trained models. However, it is expensive to train a single deep neural network model, let alone many of them. In reinforcement learning, Bootstrapped DQN ( Osband, et al. 2016) is equipped with multiple value heads and relies on the uncertainty among an ensemble of Q value approximation to guide  exploration in RL.\n In active learning, a commoner approach is to use  dropout to \u201csimulate\u201d a probabilistic Gaussian process ( Gal &amp; Ghahramani 2016). We thus ensemble multiple samples collected from the same model but with different dropout masks applied during the forward pass to estimate the model uncertainty (epistemic uncertainty). The process is named  MC dropout (Monte Carlo dropout), where dropout is applied before every weight layer, is approved to be mathematically equivalent to an approximation to the probabilistic deep Gaussian process ( Gal &amp; Ghahramani 2016). This simple idea has been shown to be effective for classification with small datasets and widely adopted in scenarios when efficient model uncertainty estimation is needed.\n DBAL (Deep Bayesian active learning;  Gal et al. 2017) approximates Bayesian neural networks with MC dropout such that it learns a distribution over model weights. In their experiment, MC dropout performed better than random baseline and mean standard deviation (Mean STD), similarly to variation ratios and entropy measurement.\n   Beluch et al. (2018) compared ensemble-based models with MC dropout and found that the combination of naive ensemble (i.e. train multiple models separately and independently) and variation ratio yields better calibrated predictions than others. However, naive ensembles are  very expensive, so they explored a few alternative cheaper options:\n Snapshot ensemble: Use a cyclic learning rate schedule to train an implicit ensemble such that it converges to different local minima.\n  Diversity encouraging ensemble (DEE): Use a base network trained for a small number of epochs as initialization for \\(n\\) different networks, each trained with dropout to encourage diversity.\n Unfortunately all the cheap implicit ensemble options above perform worse than naive ensembles. Considering the limit on computational resources, MC dropout is still a pretty good and economical choice. Naturally, people also try to combine ensemble and MC dropout ( Pop &amp; Fulop 2018) to get a bit of additional performance gain by stochastic ensemble.\n  Bayes-by-backprop ( Blundell et al. 2015) measures weight uncertainty in neural networks directly. The method maintains a probability distribution over the weights \\(\\mathbf{w}\\), which is modeled as a variational distribution \\(q(\\mathbf{w} \\vert \\theta)\\) since the true posterior \\(p(\\mathbf{w} \\vert \\mathcal{D})\\) is not tractable directly. The loss is to minimize the KL divergence between \\(q(\\mathbf{w} \\vert \\theta)\\) and \\(p(\\mathbf{w} \\vert \\mathcal{D})\\),\n\\[\\begin{aligned}\\mathcal{L}(\\theta)&amp;= \\text{KL}[q(\\mathbf{w}\\vert\\theta) \\| p(\\mathbf{w} \\vert \\mathcal{D})] \\\\ &amp;= \\int q(\\mathbf{w}\\vert\\theta) \\log \\frac{q(\\mathbf{w}\\vert\\theta)}{p(\\mathbf{w}) p(\\mathcal{D}\\vert \\mathbf{w})} d\\mathbf{w} \\\\ &amp;= \\text{KL}[q(\\mathbf{w}\\vert\\theta) \\| p(w)] - \\mathbb{E}_{q(\\mathbf{w}\\vert\\theta)} [\\log p(\\mathcal{D} \\vert \\mathbf{w})] \\\\&amp;\\approx \\log q(\\mathbf{w} \\vert \\theta) - \\log p(\\mathbf{w}) p(\\mathcal{D}\\vert \\mathbf{w}) &amp; \\text{; monte carlo sampling; }q(\\mathbf{w} \\vert \\theta)\\text{ &amp; }p(\\mathbf{w})\\text{ are close.}\\end{aligned}\\] The variational distribution \\(q\\) is typically a Gaussian with diagonal covariance and each weight is sampled from \\(\\mathcal{N}(\\mu_i, \\sigma_i^2)\\). To ensure non-negativity of \\(\\sigma_i\\), it is further parameterized via softplus, \\(\\sigma_i = \\log(1 + \\exp(\\rho_i))\\) where the variational parameters are \\(\\theta = \\{\\mu_i , \\rho_i\\}^d_{i=1}\\).\n  Calculate the gradient of \\(f(\\mathbf{w}, \\theta)\\) w.r.t. to \\(\\mu\\) and \\(\\rho\\) and then update \\(\\theta\\).\n  The loss objective guides model training. A low loss value indicates that a model can make good and accurate predictions.  Yoo &amp; Kweon (2019) designed a  loss prediction module to predict the loss value for unlabeled inputs, as an estimation of how good a model prediction is on the given data. Data samples are selected if the loss prediction module makes uncertain predictions (high loss value) for them. The loss prediction module is a simple MLP with dropout, that takes several intermediate layer features as inputs and concatenates them after a global average pooling.\n   Let \\(\\hat{l}\\) be the output of the loss prediction module and \\(l\\) be the true loss. When training the loss prediction module, a simple MSE loss \\(=(l - \\hat{l})^2\\) is not a good choice, because the loss decreases in time as the model learns to behave better. A good learning objective should be independent of the scale changes of the target loss. They instead rely on the comparison of sample pairs. Within each batch of size \\(b\\), there are \\(b/2\\) pairs of samples \\((\\mathbf{x}_i, \\mathbf{x}_j)\\) and the loss prediction model is expected to correctly predict which sample has a larger loss.\n\\[\\begin{aligned}\\mathcal{L}_\\text{loss}(\\mathbf{x}_i, \\mathbf{x}_j) &amp;= \\max\\big( 0, -\\mathbb{1}(l(\\mathbf{x}_i), l(\\mathbf{x}_j)) \\cdot (\\hat{l}(\\mathbf{x}_i) - \\hat{l}(\\mathbf{x}_j)) + \\epsilon \\big) \\\\ \\text{where } \\mathbb{1}(l_i, l_j) &amp;= \\begin{cases} +1 &amp; \\text{if }l_i &gt; l_j \\\\ -1 &amp; \\text{otherwise} \\end{cases} \\end{aligned}\\]  In experiments on three vision tasks, active learning selection based on the loss prediction performs better than random baseline, entropy based acquisition and  core-set.\n    Sinha et al. (2019) proposed a GAN-like setup, named  VAAL (Variational Adversarial Active Learning), where a discriminator is trained to distinguish unlabeled data from labeled data. Interestingly, active learning acquisition criteria does not depend on the task performance in VAAL.\n   The \\(\\beta\\)-VAE learns a latent feature space \\(\\mathbf{z}^l \\cup \\mathbf{z}^u\\), for labeled and unlabeled data respectively, aiming to  trick the discriminator \\(D(.)\\) that all the data points are from the labeled pool;\n  The discriminator \\(D(.)\\) predicts whether a sample is labeled (1) or not (0) based on a latent representation \\(\\mathbf{z}\\). VAAL selects unlabeled samples with low discriminator scores, which indicates that those samples are sufficiently different from previously labeled ones.\n The loss for VAE representation learning in VAAL contains both a reconstruction part (minimizing the ELBO of given samples) and an adversarial part (labeled and unlabeled data is drawn from the same probability distribution \\(q_\\phi\\)):\n\\[\\begin{aligned}\\mathcal{L}_\\text{VAE} &amp;= \\lambda_1 \\mathcal{L}^\\text{rec}_\\text{VAE} + \\lambda_2 \\mathcal{L}^\\text{adv}_\\text{VAE} \\\\\\mathcal{L}^\\text{rec}_\\text{VAE} &amp;= \\mathbb{E}[\\log p_\\theta(\\mathbf{x}^l \\vert \\mathbf{z}^l)] - \\beta \\text{KL}(q_\\phi(\\mathbf{z}^l \\vert \\mathbf{x}^l) \\| p(\\mathbf{\\tilde{z}})) + \\mathbb{E}[\\log p_\\theta(\\mathbf{u} \\vert \\mathbf{z}^u)] - \\beta \\text{KL}(q_\\phi(\\mathbf{z}^u \\vert \\mathbf{u}) \\| p(\\mathbf{\\tilde{z}})) \\\\\\mathcal{L}^\\text{adv}_\\text{VAE} &amp;= - \\mathbb{E}[\\log D(q_\\phi (\\mathbf{z}^l \\vert \\mathbf{x}^l))] - \\mathbb{E}[\\log D(q_\\phi(\\mathbf{z}^u \\vert \\mathbf{u}))]\\end{aligned}\\] where \\(p(\\mathbf{\\tilde{z}})\\) is a unit Gaussian as a predefined prior and \\(\\beta\\) is the Lagrangian parameter.\n \\[\\mathcal{L}_D = -\\mathbb{E}[\\log D(q_\\phi (\\mathbf{z}^l \\vert \\mathbf{x}^l))] - \\mathbb{E}[\\log (1 - D(q_\\phi (\\mathbf{z}^u \\vert \\mathbf{u})))]\\]   Ablation studies showed that jointly training VAE and discriminator is critical. Their results are robust to the biased initial labeled pool, different labeling budgets and noisy oracle.\n MAL (Minimax Active Learning;  Ebrahimiet al. 2021) is an extension of VAAL. The MAL framework consists of an entropy minimizing feature encoding network \\(F\\) followed by an entropy maximizing classifier \\(C\\). This minimax setup reduces the distribution gap between labeled and unlabeled data.\n   A feature encoder \\(F\\) encodes a sample into a \\(\\ell_2\\)-normalized \\(d\\)-dimensional latent vector. Assuming there are \\(K\\) classes, a classifier \\(C\\) is parameterized by \\(\\mathbf{W} \\in \\mathbb{R}^{d \\times K}\\).\n (1) First \\(F\\) and \\(C\\) are trained on labeled samples by a simple cross entropy loss to achieve good classification results,\n\\[\\mathcal{L}_\\text{CE} = -\\mathbb{E}_{(\\mathbf{x}^l, y) \\sim \\mathcal{X}} \\sum_{k=1}^K \\mathbb{1}[k=y] \\log\\Big( \\sigma(\\frac{1}{T} \\frac{\\mathbf{W}^\\top F\\big(\\mathbf{x}^l)}{\\|F(\\mathbf{x}^l)\\|}\\big) \\Big)\\] \\[\\begin{aligned}\\mathcal{L}_\\text{Ent} &amp;= -\\sum^K_{k=1} p(y=k \\vert \\mathbf{u}) \\log p(y=k\\vert \\mathbf{u}) \\\\\\theta^*_F, \\theta^*_C &amp;= \\min_F\\max_C \\mathcal{L}_\\text{Ent} \\\\\\theta_F &amp;\\gets \\theta_F - \\alpha_1 \\nabla \\mathcal{L}_\\text{Ent} \\\\\\theta_C &amp;\\gets \\theta_C + \\alpha_2 \\nabla \\mathcal{L}_\\text{Ent}\\end{aligned}\\]  First, minimizing the entropy in \\(F\\) encourages unlabeled samples associated with similar predicted labels to have similar features.\n  Maximizing the entropy in \\(C\\) adversarially makes the prediction to follow a more uniform class distribution.  (My understanding here is that because the true label of an unlabeled sample is unknown, we should not optimize the classifier to maximize the predicted labels just yet.)\n   Diversity: the score of \\(D\\) indicates how similar a sample is to previously seen examples. A score closer to 0 is better to select unfamiliar data points.\n  Uncertainty: use the entropy obtained by \\(C\\). A higher entropy score indicates that the model cannot make a confident prediction yet.\n The experiments compared MAL to random, entropy, core-set, BALD and VAAL baselines, on image classification and segmentation tasks. The results look pretty strong.\n   CAL (Contrastive Active Learning;  Margatina et al. 2021) intends to select  contrastive examples. If two data points with different labels share similar network representations \\(\\Phi(.)\\), they are considered as contrastive examples in CAL. Given a pair of contrastive examples \\((\\mathbf{x}_i, \\mathbf{x}_j)\\), they should\n\\[d(\\Phi(\\mathbf{x}_i), \\Phi(\\mathbf{x}_j)) &lt; \\epsilon \\quad\\text{and}\\quad \\text{KL}(p(y\\vert \\mathbf{x}_i) \\| p(y\\vert \\mathbf{x}_j)) \\rightarrow \\infty\\]  Select the top \\(k\\) nearest neighbors in the model feature space among the labeled samples, \\(\\{(\\mathbf{x}^l_i, y_i\\}_{i=1}^M \\subset \\mathcal{X}\\).\n  Compute the KL divergence between the model output probabilities of \\(\\mathbf{x}\\) and each in \\(\\{\\mathbf{x}^l\\}\\). The contrastive score of \\(\\mathbf{x}\\) is the average of these KL divergence values: \\(s(\\mathbf{x}) = \\frac{1}{M} \\sum_{i=1}^M \\text{KL}(p(y \\vert \\mathbf{x}^l_i \\| p(y \\vert \\mathbf{x}))\\).\n On a variety of classification tasks, the experiment results of CAL look similar to the entropy baseline.\n   A  core-set is a concept in computational geometry, referring to a small set of points that approximates the shape of a larger point set. Approximation can be captured by some geometric measure. In the active learning, we expect a model that is trained over the core-set to behave comparably with the model on the entire data points.\n Sener &amp; Savarese (2018) treats active learning as a core-set selection problem. Let\u2019s say, there are \\(N\\) samples in total accessible during training. During active learning, a small set of data points get labeled at every time step \\(t\\), denoted as \\(\\mathcal{S}^{(t)}\\). The upper bound of the learning objective can be written as follows, where the  core-set loss is defined as the difference between average empirical loss over the labeled samples and the loss over the entire dataset including unlabelled ones.\n\\[\\begin{aligned}\\mathbb{E}_{(\\mathbf{x}, y) \\sim p} [\\mathcal{L}(\\mathbf{x}, y)]\\leq&amp; \\bigg\\vert \\mathbb{E}_{(\\mathbf{x}, y) \\sim p} [\\mathcal{L}(\\mathbf{x}, y)] - \\frac{1}{N} \\sum_{i=1}^N \\mathcal{L}(\\mathbf{x}_i, y_i) \\bigg\\vert &amp; \\text{; Generalization error}\\\\+&amp; \\frac{1}{\\vert \\mathcal{S}^{(t)} \\vert} \\sum_{j=1}^{\\vert \\mathcal{S}^{(t)} \\vert} \\mathcal{L}(\\mathbf{x}^l_j, y_j) &amp; \\text{; Training error}\\\\+&amp; \\bigg\\vert \\frac{1}{N} \\sum_{i=1}^N \\mathcal{L}(\\mathbf{x}_i, y_i) - \\frac{1}{\\vert \\mathcal{S}^{(t)} \\vert} \\sum_{j=1}^{\\vert \\mathcal{S}^{(t)} \\vert} \\mathcal{L}(\\mathbf{x}^l_j, y_j) \\bigg\\vert &amp; \\text{; Core-set error}\\end{aligned}\\] \\[\\min_{\\mathcal{S}^{(t+1)} : \\vert \\mathcal{S}^{(t+1)} \\vert \\leq b} \\bigg\\vert \\frac{1}{N}\\sum_{i=1}^N \\mathcal{L}(\\mathbf{x}_i, y_i) - \\frac{1}{\\vert \\mathcal{S}^{(t)} \\cup \\mathcal{S}^{(t+1)} \\vert} \\sum_{j=1}^{\\vert \\mathcal{S}^{(t)} \\cup \\mathcal{S}^{(t+1)} \\vert} \\mathcal{L}(\\mathbf{x}^l_j, y_j) \\bigg\\vert\\] It is equivalent to  the \\(k\\)-Center problem: choose \\(b\\) center points such that the largest distance between a data point and its nearest center is minimized. This problem is NP-hard. An approximate solution depends on the greedy algorithm.\n   It works well on image classification tasks when there is a small number of classes. When the number of classes grows to be large or the data dimensionality increases (\u201ccurse of dimensionality\u201d), the core-set method becomes less effective ( Sinha et al. 2019).\n Because the core-set selection is expensive,  Coleman et al. (2020) experimented with a weaker model (e.g. smaller, weaker architecture, not fully trained) and found that empirically using a weaker model as a proxy can significantly shorten each repeated data selection cycle of training models and selecting samples, without hurting the final error much. Their method is referred to as  SVP (Selection via Proxy).\n  BADGE (Batch Active learning by Diverse Gradient Embeddings;  Ash et al. 2020) tracks both model uncertainty and data diversity in the gradient space. Uncertainty is measured by the gradient magnitude w.r.t. the final layer of the network and diversity is captured by a diverse set of samples that span in the gradient space.\n Uncertainty. Given an unlabeled sample \\(\\mathbf{x}\\), BADGE first computes the prediction \\(\\hat{y}\\) and the gradient \\(g_\\mathbf{x}\\) of the loss on \\((\\mathbf{x}, \\hat{y})\\) w.r.t. the last layer\u2019s parameters. They observed that the norm of \\(g_\\mathbf{x}\\) conservatively estimates the example\u2019s influence on the model learning and high-confidence samples tend to have gradient embeddings of small magnitude.\n  Diversity. Given many g\n......", "posttime": "2022-02-23 21:50:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6570\u636e,learning,mathbf", "title": "\u6570\u636e\u4e0d\u8db3\u7684\u5b66\u4e60\u7b2c2\u90e8\u5206\uff1a\u4e3b\u52a8\u5b66\u4e60", "title_en": "Learning with Not Enough Data Part 2: Active Learning", "transed": 1, "url": "https://lilianweng.github.io/lil-log/2022/02/20/active-learning.html", "via": "", "real_tags": ["\u6570\u636e", "learning", "mathbf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074728, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60a8\u7684Web\u6d4f\u89c8\u5668\u53ef\u80fd\u5df2\u8fc7\u65f6\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fInternet Explorer 9\u300110\u621611\uff0c\u6211\u4eec\u7684\u97f3\u9891\u64ad\u653e\u5668\u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002\u8981\u83b7\u5f97\u66f4\u597d\u7684\u4f53\u9a8c\uff0c\u8bf7\u4f7f\u7528\u8c37\u6b4cChrome\u3001Firefox\u6216\u5fae\u8f6fEdge\u3002", "note_en": "Your Web Browser may be out of date. If you are using Internet Explorer 9, 10 or 11 our Audio player will not work properly.  For a better experience use  Google Chrome,  Firefox or  Microsoft Edge.", "posttime": "2022-02-23 21:39:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u76d1\u7ba1,facing", "title": "\u7231\u5c14\u5170\u76d1\u7ba1\u673a\u6784\u4e0b\u4ee4\u6682\u505c\u5411\u7f8e\u56fd\u4f20\u8f93\u6570\u636e", "title_en": "Meta facing order from Irish regulator to suspend data transfers to US", "transed": 1, "url": "https://www.irishtimes.com/business/facebook-s-meta-facing-order-from-irish-regulator-to-suspend-data-transfers-to-us-1.4808534", "via": "", "real_tags": ["\u7f8e\u56fd", "\u76d1\u7ba1", "facing"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074727, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1\u3001\u56fd\u9632\u79d1\u6280\u5927\u5b66\u7535\u5b50\u79d1\u5b66\u4e0e\u6280\u672f\u5b66\u9662\n@\u7b2c{\u6761\uff0c", "note_en": "1. College of Electronic Science and Technology, National University of Defense Technology \r2. State Key Laboratory of Synthetical Automation for Process Industries, Northeastern University \r3. School of Information Science and Technology, ShanghaiTech University  \r4. School of Electronics and Communication Engineering, Sun Yat-sen University            Light field (LF) cameras record both intensity and directions of light rays, and encode 3D cues into 4D LF images. Recently, many convolutional neural networks (CNNs) have been proposed for various LF image processing tasks. However, it is challenging for CNNs to effectively process LF images since the spatial and angular information are highly inter-twined with varying disparities. In this paper, we propose a generic mechanism to disentangle these coupled information for LF image processing. Specifically, we first design a class of domain-specific convolutions to disentangle LFs from different dimensions, and then leverage these disentangled features by designing task-specific modules. Our disentangling mechanism can well incorporate the LF structure prior and effectively handle 4D LF data. Based on the proposed mechanism, we develop three networks (i.e., DistgSSR, DistgASR and DistgDisp) for spatial super-resolution, angular super-resolution and disparity estimation. Experimental results show that our networks achieve state-of-the-art performance on all these three tasks, which demonstrates the effectiveness, efficiency, and generality of our disentangling mechanism.\n                                                                                                                                             @Article{DistgLF, \r author = {Wang, Yingqian and Wang, Longguang and Wu, Gaochang and Yang, Jungang and An, Wei and Yu, Jingyi and Guo, Yulan}, \r title = {Disentangling Light Fields for Super-Resolution and Disparity Estimation}, \r journal = {IEEE Transactions on Pattern Analysis and Machine Intelligence (TPAMI)},  \r year = {2021}, \r }", "posttime": "2022-02-23 21:39:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5149\u573a,light,\u7535\u5b50", "title": "\u5206\u79bb\u5149\u573a\u5b9e\u73b0\u8d85\u5206\u8fa8\u7387\u548c\u89c6\u5dee\u4f30\u8ba1", "title_en": "Disentangling Light Fields for Super-Resolution and Disparity Estimation", "transed": 1, "url": "https://yingqianwang.github.io/DistgLF/", "via": "", "real_tags": ["\u5149\u573a", "light", "\u7535\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074726, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "LWN\u8ba2\u6237\u5df2\u5411\u60a8\u63d0\u4f9b\u4ee5\u4e0b\u4ec5\u9650\u8ba2\u9605\u7684\u5185\u5bb9\u3002\u6210\u5343\u4e0a\u4e07\u7684\u8ba2\u9605\u8005\u4f9d\u9760LWN\u4eceLinux\u548c\u81ea\u7531\u8f6f\u4ef6\u793e\u533a\u83b7\u5f97\u6700\u597d\u7684\u6d88\u606f\u3002\u5982\u679c\u60a8\u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\uff0c\u8bf7\u8003\u8651\u8ba2\u9605LWN\u3002\u611f\u8c22\u60a8\u8bbf\u95eeLWN\u3002\u7f51\n\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u8ba1\u7b97\u673a\u8bed\u8a00\u7684\u4e00\u4e2a\u5e38\u89c1\u529f\u80fd\uff0c\u5c24\u5176\u662fRuby\u3001Perl\u3001Python\u7b49\u9ad8\u7ea7\u8bed\u8a00\uff0c\u7528\u4e8e\u8fdb\u884c\u76f8\u5f53\u590d\u6742\u7684\u6587\u672c\u6a21\u5f0f\u5339\u914d\u3002\u6709\u4e9b\u8bed\u8a00\uff08\u5305\u62ecPerl\uff09\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u5408\u5e76\u5230\u8bed\u8a00\u672c\u8eab\u4e2d\uff0c\u800c\u53e6\u4e00\u4e9b\u8bed\u8a00\u5219\u6709\u968flanguageinstallation\u9644\u5e26\u7684\u7c7b\u6216\u5e93\u3002\u87d2\u86c7&#39\uff1bs\u7684\u6807\u51c6\u5e93\u6709re\u6a21\u5757\uff0c\u5b83\u63d0\u4f9b\u4e86\u5904\u7406\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5de5\u5177\uff1b\u7136\u800c\uff0c\u6b63\u5982\u6700\u8fd1\u5173\u4e8epython\u601d\u60f3\u90ae\u4ef6\u7684\u8ba8\u8bba\u6240\u663e\u793a\u7684\u90a3\u6837\uff0c\u8be5\u6a21\u5757\u5728\u6700\u8fd1\u51e0\u6b21\u88ab\u6401\u7f6e\u4e86\u3002\n2\u670814\u65e5\uff0cJ.B.\u5170\u65af\u987f\u767b\u4e0a\u699c\u5355\uff1b\u4ed6\u63d0\u4ea4\u4e86\u4e00\u4e2a\u5173\u4e8e\u4ed6\u5728\u4f7f\u7528re\u65f6\u9047\u5230\u7684\u4e00\u4e2a\u95ee\u9898\u7684bug\uff0c\u5e76\u5efa\u8bae\u5c06\u5176\u6dfb\u52a0\u5230\u90ae\u4ef6\u5217\u8868\u4e2d\u3002Langston\u6709\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u7f29\u5199\u4e3a&#34\uff1bregex&#34\uff1b\u6216&#34\uff1bregexp&#34\uff1b\uff09\u5f53\u5e94\u7528\u5230\u5f88\u5c11\u51fa\u73b0\u7684\u65e5\u5fd7\u6d88\u606f\u65f6\uff0c\u8fd9\u4f3c\u4e4e\u6302\u8d77\u4e86\u4ed6\u7684\u7a0b\u5e8f\uff1b\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4ed6\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u6709\u4e00\u4e2a\u7f3a\u9677\uff0c\u5bfc\u81f4\u4e86\u5927\u91cf\u7684\u56de\u6eaf\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u56de\u6eaf\u4ece\u672a\u5b8c\u6210\u3002\u5728bug\u62a5\u544a\u4e2d\uff0c\u4ed6\u8981\u6c42\u63d0\u4f9b\u4e00\u79cd\u6307\u5b9a\u8d85\u65f6\u7684\u65b9\u6cd5\uff1a\u6211\u5c06\u5c1d\u8bd5\u91cd\u5199\u6211\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u7279\u5b9a\u95ee\u9898\uff0c\u4f46\u5b83&#39\uff1bshard\u53ef\u4ee5\u9884\u6d4b\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u8f93\u5165\u5e76\u8bbe\u8ba1\u4e00\u4e2a\u9632\u5f39\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6240\u4ee5\u7c7b\u4f3c\u7684\u4e1c\u897f\u53ef\u4ee5\u7528\u4e8e\u62d2\u7edd\u670d\u52a1\u653b\u51fb\uff08\u65e0\u8bba\u662f\u6709\u610f\u8fd8\u662f\u65e0\u610f\uff09\u3002\u5728\u672c\u4f8b\u4e2d\uff0cregex\u7528\u4e8e\u81ea\u52a8\u5bfc\u5165\u8fc7\u7a0b\uff0c\u5e76\u5bfc\u81f4\u8be5\u8fc7\u7a0b\u5728\u6709\u4eba\u6ce8\u610f\u5230\u4e4b\u524d\u5907\u4efd\u4e86\u8bb8\u591a\u5c0f\u65f6\u3002\u4e5f\u8bb8\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u5728\u6b63\u5219\u8868\u8fbe\u5f0f\u5f15\u64ce\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u8d85\u65f6\u9009\u9879\uff0c\u8fd9\u6837\u5982\u679c\u6b63\u5219\u8868\u8fbe\u5f0f\u6267\u884c\u7684\u65f6\u95f4\u8d85\u8fc7\u914d\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5b83\u5c31\u4f1a\u653e\u5f03\u5e76\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\n\u4ed6\u5728\u5e16\u5b50\u4e2d\u8fdb\u4e00\u6b65\u9610\u8ff0\u4e86\u81ea\u5df1\u7684\u7528\u4f8b\uff1a\u6211\u7684\u7528\u4f8b\u662f\u65e5\u5fd7\u89e3\u6790\uff0c\u6211\u6709\u5927\u91cf\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5b83\u4eec\u8fd0\u884c\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u65e5\u5fd7\u884c\u4e0a\u3002\u6211\u6709\u5927\u91cf\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5b83\u662f&#39\uff1b\u5f88\u96be\u786e\u4fdd\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u90fd\u6ca1\u6709\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u5c24\u5176\u662f\u5f53\u75c5\u7406\u884c\u4e3a\u53ea\u53d1\u751f\u5728\u67d0\u4e9b\u8f93\u5165\u4e0a\u65f6\uff0c\u8fd9\u4e9b\u8f93\u5165\u5728\u5f00\u53d1\u6b63\u5219\u8868\u8fbe\u5f0f\u65f6\u53ef\u80fd\u6ca1\u6709\u88ab\u6fc0\u6d3b\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u4e9b\u6b63\u5219\u8868\u8fbe\u5f0f\u6b63\u5728\u89e3\u6790\u7684\u6570\u636e\u91cf\u5f88\u5927\uff0c\u6211\u51b3\u4e0d\u60f3\u8ba9\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u8fd0\u884c\u65f6\u95f4\u8d85\u8fc7\u51e0\u6beb\u79d2\uff0c\u56e0\u4e3a\u5982\u679c\u5b83\u8d85\u8fc7\u4e86\u51e0\u6beb\u79d2\uff0c\u8fd9\u5c06\u964d\u4f4e\u6211\u7684\u65e5\u5fd7\u5904\u7406\u541e\u5410\u91cf\u3002\u6211&#39\uff1b\u6211\u5b81\u613f\u5b83\u53ea\u662f\u5f15\u53d1\u4e00\u4e2a\u5f02\u5e38\u5e76\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u65e5\u5fd7\u6761\u76ee\u3002\nJonathan Slenders\u56de\u7b54\u8bf4Python\u5305\u7d22\u5f15\uff08PyPI\uff09\u4e0a\u7684regexmodule\u652f\u6301\u8d85\u65f6\u3002regex\u662f\u7528\u6765\u66ff\u4ee3re\u7684adrop\uff08\u4f7f\u7528\u5b83\u7684&#34\uff1b\u7248\u672c0&#34\uff1b\uff09\u4ee5\u53ca\u5728\u4f7f\u7528&#34\uff1b\u7248\u672c1&#34\uff1b\u3002\u8fd9\u4e9b\u7279\u6027\u5305\u62ec\u5d4c\u5957\u96c6\u3001\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b8c\u6574\u7684Unicode\u5927\u5c0f\u5199\u6298\u53e0\u3001\u5728\u5339\u914d\u5e76\u53d1\u6027\u65f6\u5220\u9664\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff08GIL\uff09\u7b49\u7b49\u3002regex\u4e3b\u9875\u5217\u51fa\u4e86\u4f7f\u7528\u7248\u672c1\u65f6\u7684\u4e00\u7cfb\u5217\u5dee\u5f02\uff0c\u5305\u62ec\u5339\u914d\u51fd\u6570\u7684\u8d85\u65f6\u53c2\u6570\u3002\nTim Peters\u4e5f\u63d0\u5230\u4e86regex\uff0c\u867d\u7136\u4e0d\u662f\u56e0\u4e3a\u5b83\u5b9e\u73b0\u4e86\u8d85\u65f6\uff08\u8fd9\u662f\u4ed6\u901a\u8fc7\u7ebf\u7a0b\u624d\u5b66\u5230\u7684\u4e1c\u897f\uff09\uff0c\u800c\u662f\u56e0\u4e3a\u5b83\u662f&#34\uff1b\u4e09\u7ea7\u6a21\u5757&#34\uff1b\u5177\u6709\u66f4\u65b0\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9e\u73b0\u7684\u8bb8\u591a\u529f\u80fd\u3002\u5b83\u662f&#34\uff1b\u4e5f\u66f4\u96be\u5f15\u53d1\u6307\u6570\u7ea7\u7684\u4e0d\u826f\u4e8b\u4ef6&#34\uff1b\u3002\u4ed6\u8ba8\u8bba\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u5e26\u6765\u7684\u4e00\u4e9b\u6298\u8877\uff0c\u5e76\u5411\u90a3\u4e9b\u52aa\u529b\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4eba\u63a8\u8350\u4e86\u7ecf\u5178\u4e66\u7c4d\u300a\u638c\u63e1\u6b63\u5219\u8868\u8fbe\u5f0f\u300b\u3002\u4ed6\u6307\u51fa\uff0cSNOBOL\u662f20\u4e16\u7eaa60\u5e74\u4ee3\u7684\u4e00\u79cd\u5b57\u7b26\u4e32\u5904\u7406\u8bed\u8a00\uff0c\u5b83\u6ca1\u6709\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5c3d\u7ba1\u5b83\uff08\u53ca\u5176\u540e\u7ee7\u8005\uff0cIcon\uff09\u80fd\u591f\u4ee5\u66f4\u81ea\u7136\u7684\u65b9\u5f0f\u8fdb\u884c\u5339\u914d\uff1a\u5929\u771f\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u65e2\u7b28\u62d9\uff0c\u53c8\u5bb9\u6613\u5728\u8bb8\u591a\u4efb\u52a1\u4e2d\u51fa\u73b0\u8ba1\u65f6\u9519\u8bef\uff0c\u8fd9\u4e9b\u4efb\u52a1&#34\uff1b\u5e94\u8be5\u662f&#34\uff1b\u5f88\u5bb9\u6613\u8868\u8fbe\u3002\u4f8b\u5982&#34\uff1b\u73b0\u5728\u5339\u914d\u5230\u4e0b\u4e00\u4e2a\u51fa\u73b0\u7684&#39\uff1bX&#39&#34;. \u5728\u65af\u8bfa\u535a\u5c14\u00b7\u5b89\u8fea\u80af\uff0c\u8fd9&#39\uff1b\u8fd9\u5f88\u7410\u788e\u300275%\u7684regexp\u7528\u6237\u4f1a\u5199&#34*X&#34\uff1b\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u6bd4\u4ed6\u4eec\u9884\u671f\u7684\u66f4\u7b26\u5408Waaay\u3002\u53e6\u591620%\u7684\u4eba\u4f1a\u5199&#34\uff1b*\uff1fX&#34\uff1b\uff0c\u7f3a\u4e4f\u7406\u89e3\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8d85\u51fa_just&#34\uff1b\u4e0b\u4e00\u4e2a&#34\uff1b\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u662fX\u3002\u8fd9\u5c31\u5269\u4e0b5%\u7684\u5e78\u798f\u4f5c\u5bb6&#34\uff1b[^X]*X&#34\uff1b\uff0c\u8fd9\u6700\u7ec8\u8bf4\u660e\u4e86\u4ed6\u4eec\u7684\u521d\u8877\u3002\n\u90a3\u4e9b\u4e0d\u7cbe\u901a\u6b63\u5219\u8868\u8fbe\u5f0f\u8bed\u6cd5\u7684\u4eba\u53ef\u80fd\u4f1a\u53d1\u73b0\u5176\u4e2d\u4e00\u4e9b\u6709\u70b9\u4ee4\u4eba\u8d39\u89e3\u3002\u867d\u7136\u672c\u6587\u4e0d\u80fd\u4ecb\u7ecd\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4f46\u6709\u65e0\u6570\u7684\u7f51\u7ad9\u3001\u4e66\u7c4d\u548c\u5176\u4ed6\u8d44\u6e90\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u4e3a\u8bfb\u8005\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u3002\u5728\u6b63\u5219\u8868\u8fbe\u5f0f\u8bed\u6cd5\u4e2d\uff0c&#34&#34; \u8868\u793a\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\uff0c\u6dfb\u52a0&#34*&#34; \u8868\u793a\u5339\u914d\u4e0a\u4e00\u4e2a\u672f\u8bed\u7684\u96f6\u6b21\u6216\u591a\u6b21\u51fa\u73b0\uff0c\u56e0\u6b64&#34*&#34; \u5339\u914d\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u800c&#34*X&#34\uff1b\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u6700\u5927\u503c\u4e3a#34\uff1bX&#34\uff1b\u3002\u4f46\u662f\uff0c\u6b63\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u6240\u793a\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u7a0b\u5e8f\u5458\u7684\u60f3\u6cd5\uff1a\n\u4ecere\u8fd4\u56de\u7684\u5bf9\u8c61\u4e2d\u7684\u5339\u914d\u503c\u3002search\uff08\uff09\u663e\u793a\u5b83\u4e00\u76f4\u5339\u914d\u5230\u7b2c\u4e8c\u6b21\u51fa\u73b0&#34\uff1bX&#34\uff1b\u5728\u5b57\u7b26\u4e32\u4e2d\u3002\u90a3\u662f\u56e0\u4e3a&#34*&#34; \u63a5\u7ebf\u5458\u662f&#34\uff1b\u8d2a\u5a6a&#34-\u5b83\u5c3d\u53ef\u80fd\u5730\u5339\u914d\u3002\u5f7c\u5f97\u65af\u548c#39\uff1bs\u6d88\u606f\u4f7f\u7528\u975e\u8d2a\u5a6a\u91cf\u8bcd#34&#34; \u4e3a\u4e86\u66f4\u63a5\u8fd1\u8981\u6c42\u7684\u7ed3\u679c\uff1a\n5%\u7684\u75c5\u4f8b\u548c#34\uff1b[^X]*X&#34\uff1b\uff0c\u4f7f\u7528\u5426\u5b9a\u5b57\u7b26\u96c6&34\uff1b[^X]&#34\uff1b\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u4e86&#34\uff1bX&#34\uff1b\u3002\u56e0\u6b64\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7406\u89e3\u4e3a&#34\uff1b\u5339\u914d\u4efb\u4f55\u4e0d\u662f&#39\u7684\u5b57\u7b26\uff1bX&#39\uff1b\uff0c\u5176\u6b21\u662f&#39\uff1bX&#39&#34;,\u4f46\u8fd9\u53ef\u80fd\u4e0d\u662f\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u3002\u53f2\u8482\u6587\u00b7D&#39\uff1b\u963f\u666e\u62c9\u8bfa\u5f88\u60ca\u8bb6&#34\uff1b*\uff1fX&#34\uff1b\u53ef\u80fd\u8d85\u8fc7\u4e0b\u4e00\u4e2a&#34\uff1bX&#34\uff1b\uff0c\u4f46Chris Angelico\u6307\u51fa\uff0c\u4e0d\u8d2a\u5a6a\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u53ea\u4f1a\u4e0e\u4e0b\u4e00\u4e2a&#34\uff1bX&#34\uff1b\uff1aNongreedy\u7684\u610f\u601d\u662f&#39\uff1bI\u2019\u6211\u66f4\u559c\u6b22\u4e0b\u4e00\u4e2aX\uff0c\u4f46\u5b83\u5fc5\u987b\u5bf9\u5176\u4ed6\u4eba\u5f00\u653e\u3002bbb\u548cccc\u4e4b\u95f4\u7684X\u8d62\u4e86#39\uff1b\u7ed3\u679c\u4e0d\u5339\u914d\uff0c\u6240\u4ee5\uff1f\u5fc5\u987b\u6355\u6349\u66f4\u591a\u3002\n\u5b50\u7ebf\u7a0b\u6269\u5c55\u4e86\u4e00\u79cd\u65b9\u5f0f\uff0c\u6df1\u5165\u7814\u7a76\u4e86\u5339\u914d\u7684\u6df1\u5c42\u6b21\u65b9\u9762&#34\uff1b\u76f4\u5230\u4e0b\u4e00\u4e2a&39\uff1b\u5b57\u7b26\u4e32&#39&#34;, \u8fd9\u663e\u793a\u4e86\u4f34\u968f\u7740\u9519\u8bef\u7684#34\uff1b\u89e3\u51b3\u65b9\u6848&#34\uff1b\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e00\u79cd\u5f3a\u5927\u7684\u673a\u5236\uff0c\u4f46\u5b83\u4eec\u5f88\u590d\u6742\uff0c\u53ef\u4ee5\u4e0d\u6070\u5f53\u5730\u4f7f\u7528\uff0c\u5e76\u4e14\u5bb9\u6613\u51fa\u73b0\u5404\u79cd\u5404\u6837\u7684\u9519\u8bef\uff1b\u5b83\u4eec\u4e5f\u5f88\u96be\u5b8c\u5168\u6d4b\u8bd5\uff0c\u9047\u5230\u95ee\u9898\u65f6\u4e5f\u5f88\u96be\u8c03\u8bd5\u3002\u4f46\u5982\u4eca\u5b83\u4eec\u5df2\u7ecf\u65e0\u5904\u4e0d\u5728&#39\uff1b\u8fd9\u662f\u8ba1\u7b97\u673a\u9886\u57df\u3002\u5f7c\u5f97\u65af\u8bf4\uff1a\u81f3\u4e8e\u4e3a\u4ec0\u4e48regexps\u5360\u4e0a\u98ce\uff0c\u7275\u5f15\u529b\uff01\u5b83\u4eec\u662f\u6709\u7528\u7684\u5de5\u5177\uff0c\u800c\u4e14u\u5f00\u59cb\u7684\u65f6\u5019\u975e\u5e38\u7b80\u5355\uff0c\u5177\u6709\u5c0f\u3001\u4f18\u96c5\u548c\u9ad8\u6548\u7684\u5b9e\u73b0\u529f\u80fd\uff0c\u5305\u62ec\u722c\u884c\u548c#34\uff1b\u5feb\u70b9\uff01\u5feb\u70b9\uff01\u5feb\u70b9&#34;\u73b0\u5728\u628a\u5b9e\u73b0\u66f4\u591a\u5730\u53d8\u6210\u4e86\u65e0\u5e95\u6d1e\uff1b-\uff09\nMatthew Barnett\uff08&#34\uff1bMRAB&#34\uff1b\uff09\uff0cregex\u7684\u5f00\u53d1\u4eba\u5458\u540c\u610f\u8fd9\u4e00\u8bc4\u4f30\uff1aregex\u4e00\u5f00\u59cb\u5f88\u7b80\u5355\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5c11\u6570\u5143\u5b57\u7b26\uff0c\u5176\u4f59\u5b57\u7b26\u88ab\u89c6\u4e3a\u6587\u672c\u3002\u968f\u7740\u65b0\u529f\u80fd\u7684\u589e\u52a0\uff0c\u73b0\u6709\u7684\u5143\u5b57\u7b26\u88ab\u4ee5\u65b0\u7684\u65b9\u5f0f\u4f7f\u7528\uff0c\u800c\u5728\u90a3\u4e4b\u524d\uff0c\u8fd9\u4e9b\u65b9\u5f0f\u90fd\u662f\u975e\u6cd5\u7684\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u91cd\u65b0\u517c\u5bb9\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u591a\u4e2a\u5177\u6709\u4e0d\u540c\uff08\u6709\u65f6\u53ea\u662f\u7565\u6709\u4e0d\u540c\uff09\u529f\u80fd\u548c\u884c\u4e3a\u7684\u5b9e\u73b0\u3002\n\u5170\u65af\u987f&#34\uff1b\u975e\u5e38\u559c\u6b22\u9605\u8bfb&#34\uff1b\u8fd9\u6761\u7ebf\u7d22\u6765\u81ea\u4ed6\u7684\u5e16\u5b50\uff0c\u4f46\u60f3\u770b\u770b\u662f\u5426\u6709\u4eba\u652f\u6301&#34\uff1b\u7528\u4e8e\u5c06timeoutfeature\u6dfb\u52a0\u5230Python re\u5e93&#34\uff1b\u3002\u4ed6\u8bf4\u4ed6\u5c06\u8c03\u67e5\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4f46\u4ecd\u7136\u8ba4\u4e3are\u53ef\u4ee5\u4ece\u963b\u6b62\u5931\u63a7\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u65b9\u6cd5\u4e2d\u83b7\u76ca\u3002Angelico\u53cd\u5bf9\u8fd9\u4e00\u60f3\u6cd5\uff0c\u5efa\u8bae\u5e94\u8be5\u91c7\u7528\u7ebf\u7a0b\u4e2d\u63a2\u7d22\u7684\u5176\u4ed6\u4e00\u4e9b\u5339\u914d\u6280\u672f&#34; \u5b83\u4f1a\u589e\u52a0\u666e\u901a\u75c5\u4f8b\u7684\u5f00\u9500\uff0c\u4ee5\u4fbf\u5728\u75c5\u6001\u75c5\u4f8b\u5468\u56f4\u52a0\u4e0a\u4e00\u9053\u5c4f\u969c\uff0c\u800c\u4e14&#39\uff1b\u5f88\u96be\u6709\u6548\u5730\u5b9a\u4e49\u622a\u6b62\u65f6\u95f4&#34;\u4e0d\u8fc7\uff0c\u6b63\u5982\u4ed6\u5728\u7b2c\u4e00\u6b21\u56de\u590d\u4e2d\u6307\u51fa\u7684\u90a3\u6837\uff0c\u5f7c\u5f97\u65af\u8ba4\u4e3a\u4e0d\u592a\u53ef\u80fd\u5728re\u7684\u529f\u80fd\u4e0a\u505a\u4efb\u4f55\u5de5\u4f5c\uff1a\u57cb\u6ca1\u5728\u6709\u8da3\u7684\u8ba8\u8bba\u4e2d\u7684\u662f\u6211\u7684\u731c\u6d4b\uff1a\u4e0d\u53ef\u80fd\u3002\u87d2\u86c7&#39\uff1bs\u5b9e\u9645\u4e0a\u662f\u6b7b\u6c14\u6c89\u6c89\u7684\u9057\u7559\u4ee3\u7801\uff0c\u6ca1\u6709\u5f53\u524d\u7684&#34\uff1b\u6240\u6709\u8005&#34\uff1b\u3002\u5b83\u7684\u59d4\u5458\u4f1a\u51e0\u5e74\u6765\u51e0\u4e4e\u6ca1\u6709\u6d3b\u52a8\u3002\u5927\u591a\u6570\u627f\u8bfa\u662f\u7531\u4e8e\u901a\u7528\u7684#34\uff1b\u4ee3\u7801\u6e05\u7406&#34\uff1b\u4e0e\u7b97\u6cd5\u65e0\u5173\u7684\u5341\u5b57\u519b\u4e1c\u5f81\u3002\u6ca1\u6709\u4eba\u9700\u8981\u5bf9\u5b9e\u73b0\u6709\u975e\u5e38\u91cd\u8981\u7684\u4e86\u89e3\u3002\nPeters\u8bf4\uff0c\u7ec4\u6210regex\u6a21\u5757\u7684\u4ee3\u7801\u6700\u521d\u7684\u76ee\u6807\u662f\u57282008\u5e74\u7531\u5176\u539f\u4f5c\u8005JeffreyC\u6210\u4e3a\u6838\u5fc3Python\u7684\u4e00\u90e8\u5206\u3002\u96c5\u5404\u5e03\u65af\uff1b\u8fd9\u9879\u5de5\u4f5c\u7531\u5df4\u5185\u7279\u6311\u9009\u5e76\u7ee7\u7eed\u8fdb\u884c\uff0c\u6700\u7ec8\u53d8\u6210\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u7531\u4e8ePyPI\u4e2d\u5b58\u5728\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5c06re\u8f6c\u6362\u4e3a\u4f7f\u7528\u5b83\u7684\u8bf7\u6c42\u4e8e2021\u5e74\u5173\u95ed&#34; \u5982\u679c\u6709\u4eba\u60f3\u628a\u5b83\u79fb\u5230Python stdlib\u4e2d\uff0c\u6211\u5efa\u8bae\u5148\u4ecePython ideaslist\u5f00\u59cb&#34;\n\u95ee\u9898\u662fregex\u6709&#34_\u6807\u51c6\u5e93\u4e2d\u6709\u51e0\u5341\u4e2a\u6709\u4ef7\u503c\u7684\u529f\u80fd&#34\uff1b\uff0c\u5f7c\u5f97\u65af\u8bf4\uff0c\u6240\u4ee5\uff1a[N]\u636e\u6211\u6240\u77e5\uff0c\u6ca1\u6709\u4e00\u4e2a\u6838\u5fc3\u5f00\u53d1\u4eba\u5458\u4f1a\u5c06\u4ed6\u4eec\u6709\u9650\u7684\u65f6\u95f4\u7528\u4e8e\u590d\u5236\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4e00\u5c0f\u90e8\u5206&#39\uff1bPython\u6709\u5f88\u591a\u6539\u8fdb&#39\uff1b\u5b83\u7684\u4f20\u7edf\u5f15\u64ce\u3002\u4e8b\u5b9e\u4e0a&#34\uff1b\u5b89\u88c5\u6b63\u5219\u8868\u8fbe\u5f0f&#34; \u5728\u8fd9\u4e00\u70b9\u4e0a\u662f\u5982\u6b64\u4e0d\u5bfb\u5e38\u7684\u9009\u62e9\uff0c\u4ee5\u81f3\u4e8e\u6211\u4e0d\u4f1a&#39\uff1b\u6211\u751a\u81f3\u6ca1\u6709\u65f6\u95f4\u56de\u987e\u4e00\u4e2a\u589e\u52a0\u4e86\u8d85\u65f6\u7684\u8865\u4e01\u3002\nBarnett\u8bf4\uff0c\u4ed6\u6700\u7ec8\u51b3\u5b9a\u4e0d\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u4ee3\u7801\u6dfb\u52a0\u5230\u6807\u51c6\u5e93\u4e2d\uff0c\u81f3\u5c11\u90e8\u5206\u539f\u56e0\u662f&#34\uff1b\u8fd9\u5c06\u628a\u4fee\u590d\u548c\u6dfb\u52a0\u7ed1\u5b9a\u5230Python\u4e2d#39\uff1bs\u53d1\u5e03\u5468\u671f&#34\uff1b\u3002Python\u4ee5&#34\uff1b\u7535\u6c60\u5305\u62ec&#34&#34; \u4f46\u4e0d\u662f\u6838\u53cd\u5e94\u5806&#34\uff1b\uff0c\u56e0\u6b64\uff0c\u5728PyPI\u4e2d\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u66f4\u6709\u610f\u4e49\uff0c\u4ed6\u8bf4\u3002\u5f7c\u5f97\u65af\u8ba4\u4e3a\uff0cregex\u4e2d\u7684\u4e00\u4e9b\u529f\u80fd\u53ef\u80fd\u65e9\u57282008\u5e74\u5c31\u5df2\u7ecf\u51fa\u73b0\u5728\u6838\u53cd\u5e94\u5806\u4e0a\uff0c\u4f46\u5982\u4eca\u88ab\u66f4\u666e\u904d\u5730\u4f7f\u7528\uff1a[\u2026\u2026]\u87d2\u86c7&#39\uff1bs re\u6a21\u5757\u88ab\u51bb\u7ed3\u5728\u4e00\u4e2a\u4e0d\u65ad\u540e\u9000\u7684\u8fc7\u53bb\u3002\u6ca1\u4eba\u60f3\u505a\u8fd9\u4ef6\u4e8b\uff0c\u56e0\u4e3a\uff0c\u55ef\uff0c&#34\uff1bregexalready\u5df2\u7ecf\u505a\u5230\u4e86\uff01\u4e8b\u5b9e\u4e0a\uff0c\u5b83&#39\uff1b\u4ed6\u5df2\u7ecf\u505a\u4e8615\u5e74\u4e86\uff1b\u3002\n\u5f7c\u5f97\u65af\u8fd8\u6307\u51fa\uff0c\u5c1d\u8bd5\u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u80fd\u6bd4\u5170\u65af\u987f\u610f\u8bc6\u5230\u7684\u8981\u5bb9\u6613\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7531\u4e8e\u7248\u672c0\u7684\u517c\u5bb9\u6027\u6a21\u5f0f\uff0c\u4ed6\u53ef\u80fd\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684\u5bfc\u5165\u6765\u8ba9\u5b83\u8fd0\u884c\u8d77\u6765\uff1a\u5728\u53e6\u4e00\u6761\u6d88\u606f\u4e2d\uff0c\u5f7c\u5f97\u65af\u8fdb\u4e00\u6b65\u63cf\u8ff0\u4e86\u4ed6\u7684\u610f\u601d\uff1a\u6211\u5728\u8fd9\u91cc\u5199\u7684\u662f\u66f4\u591a\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8fd9\u6bd4\u4ed6\u4eec\u53ef\u80fd\u60f3\u7684\u8981\u5bb9\u6613\uff1a\u4ed6\u4eec\u4e0d&#39\uff1b\u4f8b\u5982\uff0c\u4e0d\u5fc5\u91cd\u5199\u5b83\u4eec\u7684IRegexp\uff0c\u6216\u8005\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u540d\uff0c\u6216\u8005\u62c5\u5fc3\u5b83\u4eec&#39\uff1b\u6211\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u4e0einsyntax\u3001\u8bed\u4e49\u548cAPI\u9ad8\u5ea6\u517c\u5bb9\uff0c\u53ea\u8981\u4f60\u575a\u6301\u91cd\u505a\u7684\u4e8b\u60c5\u3002\u8fd9\u7edd\u4e0d\u610f\u5473\u7740\u4ed6\u4eec\u5e94\u8be5\u575a\u6301re\u7684\u505a\u6cd5\u3002\u5b83&#39\uff1b\u4ed6\u5411\u4ed6\u4eec\u4fdd\u8bc1\u201c\u5165\u95e8\u201d\u51e0\u4e4e\u65e0\u5173\u7d27\u8981\u3002\u4ed6\u4eec\u5f53\u524d\u7684\u4ee3\u7801\u5e94\u8be5\u4fdd\u6301\u4e0d\u53d8\uff0c\u9664\u4e86\u6539\u53d8#34\uff1bre&#34\uff1b\u81f3&#34\uff1bregex&#34\uff1b\u3002\n\u7ed3\u679c\u662f\u5170\u65af\u987f&#39\uff1bs\u7a0b\u5e8falreadyuses regex\u548c#34\uff1b\u901a\u8fc7\u67d0\u79cd\u8fc7\u6e21\u4f9d\u8d56\u6027#34\uff1b\uff0c\u4f46\u4e0ere\u76f8\u6bd4\uff0c\u4ed6\u7684\u8868\u73b0\u5e76\u4e0d\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\u4e00\u4e2a700MB\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\u7528re\u572877\u79d2\u5185\u5904\u7406\u5b8c\u6bd5\uff0c\u800c\u7528regex\u5904\u7406\u5219\u9700\u898192\u79d2\u3002\u5f7c\u5f97\u65af34\u5c81\uff1b\u6709\u70b9\u60ca\u8bb6&#34\uff1b\u81f3\u6b64\uff0c\u81ea\uff1a&#34\uff1b\u5927\u591a\u6570\u65f6\u5019\uff0c\u4eba\u4eec\u62a5\u544a\u8bf4regex\u81f3\u5c11\u6bd4re&#34\uff1b\u7a0d\u5fae\u5feb\u4e00\u4e9b\uff1b\u3002regex\u7684\u6027\u80fd\u4f3c\u4e4e\u9700\u8981\u6ce8\u610f\uff0c\u5c24\u5176\u662f\u5982\u679c\u5b83\u6b63\u5728\u6210\u4e3aPython\u7684\u4e8b\u5b9e\u4e0a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5757\u7684\u8bdd\u3002\u5f7c\u5f97\u65af&#39\uff1bs\u5bf9\u7a00\u571f\u73b0\u72b6\u7684\u5206\u6790\u4ee4\u4eba\u9707\u60ca\uff1b\u5b83\u663e\u7136\u6c38\u8fdc\u505c\u7559\u5728\u8fc7\u53bb\u3002\u7136\u800c\uff0c\u8fd9\u5bf9\u8bb8\u591a\u4eba\u6765\u8bf4\u53ef\u80fd\u662f\u8db3\u591f\u7684\uff0c\u4f46\u5728Python\u751f\u6001\u7cfb\u7edf\u4e2d\u6709\u4e24\u4e2a\u5355\u72ec\u7684\u90e8\u5206\uff0c\u90fd\u652f\u6301\u66f4\u6709\u9650\u7684re\u5b50\u96c6\uff0c\u8fd9\u4f3c\u4e4e\u662f\u6b21\u4f18\u7684\uff1b\u5927\u591a\u6570\u589e\u5f3a\u529f\u80fd\u53ef\u80fd\u53ea\u4f1a\u51fa\u73b0\u5728\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\uff0c\u56e0\u6b64re\u8d8a\u6765\u8d8a\u843d\u540e\u4e8e\u6700\u5148\u8fdb\u7684\u6280\u672f\u3002\n\u5728\u6807\u51c6\u5e93\u4e2d\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u53d6\u4ee3re\uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u75280\u7248\uff09\u4f3c\u4e4e\u5f88\u6709\u5438\u5f15\u529b\uff0c\u4e0d\u8fc7\u5df4\u5185\u7279\u4f3c\u4e4e\u81f3\u5c11\u5bf9\u8fd9\u6837\u505a\u6709\u4e9b\u8c28\u614e\u3002\u540c\u6837\u7684\u4e8b\u60c5\u4e5f\u53d1\u751f\u5728\u6d41\u884c\u7684Requests HTTPmodule\u4e0a\uff0c\u57282015\u5e74\u7684Python\u8bed\u8a00\u5cf0\u4f1a\u4e0a\uff0c\u5b83\u88ab\u8ba4\u4e3a\u662f\u6807\u51c6\u5e93\u7684\u4e00\u4e2a\u53ef\u80fd\u7684\u8865\u5145\u3002\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u5bf9\u4e8e\u4e0d\u5728\u6807\u51c6\u5e93\u4e2d\u7684\u8bf7\u6c42\u6765\u8bf4\uff0c\u5b83\u66f4\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u5b83\u6bd4\u6b63\u5e38\u7684Python\u53d1\u5e03\u5468\u671f\uff08\u5f53\u65f6\u662f18\u4e2a\u6708\uff0c\u4f46\u73b0\u5728\u662f\u6bcf\u5e74\u4e00\u6b21\uff09\u79fb\u52a8\u5f97\u66f4\u5feb\uff0c\u5c24\u5176\u662f\u5728\u5b89\u5168\u66f4\u65b0\u65b9\u9762\uff08\u5bf9\u8be5\u8bed\u8a00\u8fdb\u884c\u66f4\u65b0\u7684\u9891\u7387\u66f4\u9ad8\uff0c\u4f46\u4e0d\u5982\u8bf7\u6c42\u672c\u8eab\u79fb\u52a8\u7684\u901f\u5ea6\u5feb\uff09\u3002\n34\u5c81\uff1b\u7535\u6c60\u5305\u62ec&#34\uff1b\u591a\u5e74\u6765\uff0cPython\u7684\u6545\u4e8b\u4e00\u76f4\u662f\u5176\u6210\u529f\u7684\u4e00\u4e2a\u4e3b\u8981\u90e8\u5206\uff0c\u4f46\u5b83\u5f00\u59cb\u4ee5\u5404\u79cd\u65b9\u5f0f\u53d7\u5230\u5f71\u54cd\u3002\u9996\u5148\uff0c\u5927\u91cf\u7684\u7535\u6c60\u6b63\u5728\u4f7fPython\u6838\u5fc3\u5f00\u53d1\u4eba\u5458\u7684\u7ef4\u62a4\u80fd\u529b\u53d8\u5f97\u7d27\u5f20\u3002\u8fd9\u5bfc\u81f4\u4e86\u8ba8\u8bba\u3001Python\u589e\u5f3a\u8ba1\u5212\uff08PEP\uff09\uff0c\u4ee5\u53ca\u591a\u5e74\u6765\u5173\u4e8e\u5220\u9664\u5e93\u4e2d\u67d0\u4e9b\u90e8\u5206\u7684\u8fdb\u4e00\u6b65\u8ba8\u8bba\u3002\u6807\u51c6\u5e93\u4e2d\u7684\u5927\u591a\u6570\u6a21\u5757\u90fd\u662f\u5728\u5f88\u4e45\u4ee5\u524d\u6dfb\u52a0\u7684\uff0c\u4e00\u65e6\u6dfb\u52a0\u4e86\u65b9\u6cd5\uff0c\u5c31\u5f88\u96be\u5220\u9664\u5b83\uff0c\u5373\u4f7f\u5305\u542b\u5b83\u7684\u539f\u56e0\u548c\u5b83\u7684\u7ef4\u62a4\u4eba\u5458\u5df2\u7ecf\u6d88\u5931\u3002\n\u540c\u65f6\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u663e\u7136\u662fPython\u7a0b\u5e8f\u5458\u4f7f\u7528\u7684\u4e1c\u897f\u2014\u2014\u56e0\u6b64\uff0c\u5c3d\u53ef\u80fd\u5728\u4e00\u4e2a\u5730\u65b9\u4e3a\u5b83\u4eec\u63d0\u4f9b\u6700\u4f73\u652f\u6301\u4f3c\u4e4e\u662f\u6b63\u786e\u7684\u65b9\u6cd5\u3002\u6b63\u5982\u5f7c\u5f97\u65af\u6240\u6307\u51fa\u7684\uff0c\u4ed6\u4eec\u662f\u4e00\u4e2a&#34\uff1b\u4e00\u79cd\u5177\u6709\u8d85\u7b80\u6d01\u7b26\u53f7\u7684\u5de5\u5177\uff0c\u5176\u4e2d\u6b63\u786e\u7684\u8868\u8fbe\u5f0f\u51e0\u4e4e\u65e0\u6cd5\u4e0e\u7ebf\u6761\u566a\u97f3\u533a\u5206\u5f00\u6765\uff0c\u800c\u4e14\u6253\u5b57\u9519\u8bef\u5f88\u5c11\u88ab\u68c0\u6d4b\u4e3a\u8bed\u6cd5\u9519\u8bef&#34\uff1b\u3002\u5728\u6df7\u5408\u4e2d\u589e\u52a0\u4e0d\u76f8\u5bb9\u7684\u98ce\u9669\uff08\u6216\u4e0d\u540c\u7684\u6027\u80fd\uff09\u53ef\u80fd\u4e5f\u4e0d\u4f1a\u5e26\u6765\u5982\u6b64\u7684\u5feb\u4e50\u3002\u8fd9\u4e00\u5207\u90fd\u6709\u70b9\u68d8\u624b\uff0c\u4f46\u5f53\u7136\u4e0d\u662f\u90a3\u4e48\u68d8\u624b\u3002\n\u53e6\u4e00\u65b9\u9762\uff0cre\u6700\u521d\u662f\u7531FredrikLundh\uff08\u4e0d\u5e78\u5730\u572811\u6708\u53bb\u4e16\uff09\u5f00\u53d1\u7684\uff0c\u5b83\u4e0d\u9700\u8981\u4e3a\u8bb8\u591a\u4e0d\u540c\u7684\u7528\u4f8b\u505a\u4ec0\u4e48\u3002\u90a3\u4e9b\u9700\u8981\u8d85\u65f6\u3001\u539f\u5b50\u7ec4\u3001\u5d4c\u5957\u5b57\u7b26\u96c6\u3001\u6240\u6709\u683c\u91cf\u8bcd\u548c\u5176\u4ed6\u9ad8\u7ea7\u529f\u80fd\u7684\u4eba\u53ef\u4ee5\u6c42\u52a9\u3002Barnett\u4f3c\u4e4e\u70ed\u8877\u4e8e\u4fdd\u6301\u4e0ere\u7684\u517c\u5bb9\u6027\uff0c\u56e0\u6b64\u5b83\u53ef\u80fd\u4f1a\u53d8\u6210\u4e00\u79cd\u60c5\u51b5\uff0c\u6bd4\u5982\u5728\u8bf7\u6c42\u4e2d\uff0c\u5e94\u8be5\u63a8\u8350\u6807\u51c6\u5e93\u7684\u66ff\u4ee3\u54c1\uff0c\u751a\u81f3\u5728Python\u6587\u6863\u4e2d\u4e5f\u662f\u5982\u6b64\u3002\u6ca1\u6709\u660e\u786e\u800c\u660e\u663e\u7684#34\uff1b\u5bf9&#34\uff1b\u8fd9\u91cc\u4f3c\u4e4e\u6709\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u3002\n\uff08\u767b\u5f55\u53d1\u8868\u8bc4\u8bba\uff09\n\u8fd9\u7bc7\u6587\u7ae0\u548c\u8ba8\u8bba\u6ca1\u6709\u6309\u7167\u6211\u9884\u671f\u7684\u65b9\u5f0f\u8fdb\u884c\u3002\u4e5f\u8bb8\u6211\u7684\u601d\u7ef4\u65b9\u5f0f\u5e76\u4e0d\u5e38\u89c1\uff0c\u4f46\u6211\u907f\u514d\u4f7f\u7528&#34\uff1b\u975e\u5e38\u89c4&#34\uff1b\uff08\u5728\u6b63\u89c4\u8bed\u8a00\u7684\u7406\u8bba\u610f\u4e49\u4e0a\uff09\u4e0d\u60dc\u4e00\u5207\u4ee3\u4ef7\u5b9e\u73b0\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u529f\u80fd\u3002\u5f53\u7136\uff0c\u65ad\u8a00\u548c\u53cd\u5411\u5f15\u7528\u53ef\u4ee5\u7b80\u5316\u4e8b\u60c5\uff0c\u4f46\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f60&#39\uff1b\u6211\u4eec\u8bd5\u56fe\u7528\u4e00\u79cd\u76f8\u5f53\u795e\u79d8\u7684\u8bed\u8a00\u6765\u5b9e\u73b0\u903b\u8f91\uff0c\u800c\u4f60&#39\uff1b\u7528Python\u7f16\u5199\u8fd9\u79cd\u903b\u8f91\u53ef\u80fd\u4f1a\u66f4\u597d\u3002\u6211\u672c\u4ee5\u4e3a\u8fd9\u6b21\u8ba8\u8bba\u4f1a\u81ea\u7136\u800c\u7136\u5730\u6d89\u53ca\u6307\u6570\u56de\u6eaf\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u4e00\u4e2a\u5207\u6362\u5230\u771f\u6b63\u7684&#34\uff1b\u5e38\u89c4&#34\uff1b\u8868\u8fbe\u5f0f\u5f15\u64ce\uff0c\u5982\u8c37\u6b4c&#39\uff1b\u8fd9\u662fre2\u3002\uff08Russ Cox\u5bf9\u6b64\u6709\u5f88\u597d\u7684\u80cc\u666f[1]\uff09\u3002\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6001\u5ea6\uff0c\u6211\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u6709\u53d1\u73b0\u9ed8\u8ba4\u8bbe\u7f6e\u6709\u4efb\u4f55\u95ee\u9898#34\uff1bre&#34\uff1b\u6a21\u5757\uff0c\u5e76\u4e14\u6ca1\u6709&#39\uff1b\u6211\u751a\u81f3\u4e0d\u77e5\u9053&#34\u7684\u5b58\u5728\uff1b\u6b63\u5219\u8868\u8fbe\u5f0f&#34\uff1b\uff0c\u5bf9\u4e8e\u8bb8\u591aPython\u7528\u6237\u6765\u8bf4\uff0c\u5b83\u4e5f\u4e0d\u662f\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\u2014\u2014\u6211\u60f3\u6211&#39\uff1bI\u2019\u6211\u4ece\u6765\u6ca1\u6709\u89c9\u5f97\u4f60\u7f3a\u5c11\u7279\u5f81\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u6211\u90fd\u4e0d\u77e5\u9053\u6700\u521d\u7684\u7528\u4f8b\u662f\u5426\u4f1a\u7531\u4e00\u4e2a\u771f\u6b63\u7684&#34\uff1b\u5e38\u89c4&#34\uff1b\u5f15\u64ce\uff0c\u53ef\u80fd\u53ef\u4ee5\u9009\u62e9\u5207\u6362\u5230\u66f4\u590d\u6742\uff08\u548c\u66f4\u6162\uff09\u7684\u5f15\u64ce\uff0c\u4ee5\u6ee1\u8db3\u5c11\u6570\u9700\u8981\u975e\u5e38\u89c4\u529f\u80fd\u7684\u60c5\u51b5\u3002\n\u540c\u6837\uff0c\u6211\u559c\u6b22&#34\uff1b\u5bf9\u6bd4\u5ea6&#34\uff1b\u4e4b\u95f4\uff1a&gt\uff1b\u53ef\u4ee5\u770b\u51fa\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e00\u79cd\u5f3a\u5927\u7684\u673a\u5236\uff0c\u4f46\u5b83\u4eec\u5f88\u590d\u6742\uff0c\u53ef\u80fd\u4f7f\u7528\u4e0d\u5f53\uff0c\u5e76\u4e14\u5bb9\u6613\u51fa\u73b0\u5404\u79cd\u5404\u6837\u7684\u9519\u8bef\uff1b\u5728\u9047\u5230\u95ee\u9898\u65f6\uff0c\u5b83\u4eec\u4e5f\u5f88\u96be\u8fdb\u884c\u5168\u9762\u6d4b\u8bd5\u548c\u8c03\u8bd5\u3002[...] \u5b83\u4eec\u662f\u6709\u7528\u7684\u5de5\u5177\uff0c\u800c\u4e14u\u5f00\u59cb\u65f6u\u751f\u6d3b\u975e\u5e38\u7b80\u5355\uff0c\u5177\u6709\u5c0f\u3001\u4f18\u96c5\u548c\u9ad8\u6548\u7684\u5b9e\u73b0\u529f\u80fd\uff0c\u5305\u62ec\u722c\u884c\u548c#34\uff1b\u5feb\u70b9\uff01\u5feb\u70b9\uff01\u5feb\u70b9&#34; \u73b0\u5728\u628a\u5b9e\u73b0\u66f4\u591a\u5730\u53d8\u6210\u4e86\u65e0\u5e95\u6d1e\uff1b-\uff09\u548c\uff1a&gt\uff1b\u90a3\u4e9b\u9700\u8981\u8d85\u65f6\u3001\u539f\u5b50\u7ec4\u3001\u5d4c\u5957\u5b57\u7b26\u96c6\u3001\u6240\u6709\u683c\u91cf\u8bcd\u548c\u5176\u4ed6\u9ad8\u7ea7\u6b65\u5175\u7684\u4eba\u3002\u3002\u3002\n&gt\uff1b\uff08Russ Cox\u5bf9\u6b64\u6709\u5f88\u597d\u7684\u80cc\u666f[1]\uff09&gt\uff1b[1]:  https://swtch.com/~rsc/regexp/regexp1\u3002\u8c22\u8c22\u4f60\u7684\u94fe\u63a5\u3002\u8fd9\u65e0\u7591\u662f\u4e00\u672c\u542f\u53d1\u6027\u7684\u8bfb\u7269\u3002\u8ba9\u6211\u60f3\u77e5\u9053\uff0c\u771f\u6b63\u9700\u8981\u7684\u662f\u4ec0\u4e48\uff1b34\u5c81\uff1b\u7b80\u5355\u7684re&#34\uff1b\u5e26\u6709&#34\u7684\u6a21\u5757\uff1b\u6c64\u666e\u68eeNFA&#34\uff1b\u6b63\u5219\u8868\u8fbe\u5f0f\u5f15\u64ce\u3002\u6bd5\u7adf\uff0c6\u4f4d\u6570\u7684\u52a0\u901f\u5e94\u8be5\u662f\u503c\u5f97\u8ffd\u6c42\u7684\n\u6211\u89c9\u5f97\u8fd9\u91cc\u771f\u6b63\u7684\u95ee\u9898\u4e0d\u662fpython\u5177\u4f53\u5bf9regex\u505a\u4ec0\u4e48\uff0c\u800c\u662f\u4ed6\u4eec\u80fd\u5bf9&#34\uff1b\u6807\u51c6\u5e93\u662f\u6a21\u5757\u53bb\u6b7b\u7684\u5730\u65b9&#34\uff1b\u60c5\u51b5\u5c06regex\u5e93\u4e2d\u7684\u6700\u65b0\u6280\u672f\u5bfc\u5165\u5230cpython\u5b58\u50a8\u5e93\u4e2d\u4f1a\u6709\u4e00\u6bb5\u65f6\u95f4\u4e0d\u9519\uff0c\u4f46\u5b83\u6ca1\u6709&#39\uff1bI don\u2019\u6211\u771f\u7684\u6ca1\u6709\u505a\u4efb\u4f55\u4e8b\u60c5\u6765\u89e3\u51b3\u5b83\u4e00\u5f00\u59cb\u88ab\u5ffd\u89c6\u7684\u539f\u56e0\u3002\u5b83\u5c06\u6709\u6548\u5730\u6392\u6324\u4e00\u4e2a\u79ef\u6781\u7ef4\u62a4\u7684pypi\u6a21\u5757\uff0c\u800c\u518d\u6b21\u652f\u6301\u4e00\u4e2a\u5373\u5c06\u65e0\u6cd5\u7ef4\u62a4\u7684\u6807\u51c6\u5e93\u6a21\u5757\uff0c\u5c31\u50cf\u4e0d\u65ad\u53d1\u751f\u7684\u90a3\u6837\u3002\u5f53\u7136\u662f&#39\uff1b\u5b83\u4e0d\u5728\u751f\u6001\u7cfb\u7edf\u4e2d&#39\uff1b\u8fd9\u662f\u6700\u5927\u7684\u5229\u76ca\u3002\n\u4f60\u6ca1\u6709\u7406\u7531&#39\uff1bt\u4e24\u8005\u90fd\u6709\uff08stdlib\u548cpypi\uff09\u3002\u4f8b\u5982\uff0cRuby\u9ed8\u8ba4\u63d0\u4f9b\u4e00\u4e9bgem\uff0c\u60a8\u53ef\u4ee5\u5728gem\u6587\u4ef6\u4e2d\u72ec\u7acb\u5347\u7ea7\u3002\u8fd9\u4e3a\u4ecestdlib\u4e2d\u5220\u9664\u6253\u5f00\u4e86\u4e00\u6761\u8def\u5f84\uff1a\u63a8\u8350\u81f3&#34\uff1b\u53ea\u9700\u5c06foo\u6dfb\u52a0\u5230\u60a8\u7684gemfile#34\uff1b\u7136\u540e\u5728\u4ee5\u540e\u7684\u7248\u672c\u4e2d\u53ef\u4ee5\u5c06\u5176\u4ece\u9644\u5e26\u7684\u7535\u6c60\u4e2d\u79fb\u9664\u3002\u4ed6\u4eec\u662f\u5728ruby 3 iirc\u4e2d\u5b8c\u6210\u7684\u3002\n\u6211\u771f\u7684\u5e0c\u671bPython\u53d1\u884c\u7248\u80fd\u4e0e\u4e00\u4e9b\u7ba1\u7406\u826f\u597d\u7684PyPI\u5305\u7684\u7279\u5b9a\u7248\u672c\u6346\u7ed1\u5728\u4e00\u8d77\uff0c\u60a8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5347\u7ea7\u3002\u4f60\u5e94\u8be5\u80fd\u591f\u76f8\u4fe1\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e&#34\uff1b\u6b63\u5219\u8868\u8fbe\u5f0f&#34\uff1b\u5b83\u7b26\u54083.9\u7248\u672c\u53d1\u5e03\u65f6\u51bb\u7ed3\u7684\u6587\u4ef6\uff0c\u4f46\u5e76\u975e\u5982\u6b64\uff1b\u6ca1\u6709\u672a\u6765\u7684\u672a\u8bb0\u5f55\u529f\u80fd\uff0c\u6216\u8005\u5b83\u4ecd\u7136\u6709\u4ee5\u524d\u6ca1\u6709\u7684bug&#39\uff1b\u6ca1\u6709\u88ab\u53d1\u73b0\u3002AFAICT\u548c#34\uff1b\u8bf7\u6c42&#34\uff1b\u6ca1\u6709&#39\uff1b\u81ea2015\u5e74\u4ee5\u6765\uff0ct\u5220\u9664\u4e86\u4efb\u4f55\u8bb0\u5f55\u5728\u6848\u7684\u529f\u80fd\uff1b\u53e6\u4e00\u65b9\u9762&#34\uff1b\u5efa\u9020&#34\uff1b\u5373\u4f7f\u5728\u8f83\u77ed\u7684\u65f6\u95f4\u5185\uff0c\u60c5\u51b5\u4e5f\u6ca1\u6709\u90a3\u4e48\u7a33\u5b9a\u3002\n\u6211\u89c9\u5f97\u51e0\u4e4e\u6bcf\u79cd\u8bed\u8a00\u7684\u5305\u88c5\u548c\u4f9d\u8d56\u6027\u90fd\u5f88\u7cdf\u7cd5\uff0c\u5b83\u4eec\u90fd\u4f1a\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u53d8\u5f97\u7cdf\u7cd5\uff08\u5c3d\u7ba1\u5927\u591a\u6570\u8bed\u8a00\u4e5f\u6709\u4e00\u4e9b\u5f25\u8865\u7684\u54c1\u8d28\uff09\u3002\u5728Python\u7684\u4f8b\u5b50\u4e2d\uff1a*\u4e00\u65b9\u9762\uff0cimport\u8bed\u53e5\u4f7f\u7528\u4e86\u4e00\u7ec4\u76f8\u5bf9\u7b80\u5355\u6613\u61c2\u7684\u8bed\u4e49\uff08\u5373&#34\uff1b\u53ea\u9700\u5728\u76ee\u5f55\u7ed3\u6784\u4e2d\u7c98\u8d34\u4e00\u5806py\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5&#39\uff1b\u5b8c\u6210\u4e86\uff01&#34\uff1b\uff09\u3002\u8fd9\u5bf9\u4e8e\u811a\u672c\u7f16\u5199\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u60a8\u4e0d\u9700\u8981&#39\uff1bI don\u2019\u6211\u4e0d\u5fc5\u4e3a\u4e86\u6784\u5efa\u4e00\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\u800c\u53bb\u6446\u5f04\u50cfCMake\u8fd9\u6837\u7684\u4e1c\u897f\u3002*\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u4e9b\u8bed\u4e49\u53ef\u80fd\u592a\u7b80\u5355\u4e86\uff0c\u56e0\u4e3a\u65e0\u6cd5\u6307\u5b9a&#34\uff1b\u6211\u9700\u8981\u7248\u672cX\u6216\u66f4\u9ad8\u7248\u672c&#34\uff1b\u5728import\u8bed\u53e5\u672c\u8eab\u4e2d\uff0c\u4e5f\u4e0d\u662f\u6a21\u5757\u7684\u5b9e\u9645\u6765\u6e90\u3002\u56e0\u6b64\uff0c\u73b0\u5728\u8fd9\u4e9b\u4fe1\u606f\u9700\u8981\u5b58\u5728\u4e8e\u67d0\u4e2a\u5143\u6570\u636e\u4e2d\uff0c\u5e76\u901a\u8fc7Pip\u4e4b\u7c7b\u7684\u5de5\u5177\u5206\u522b\u8fdb\u884c\u8ddf\u8e2a\u548c\u7ba1\u7406\u3002*\u96ea\u4e0a\u52a0\u971c\u7684\u662f\uff0c\u4f60\u53ef\u4ee5&#39\uff1bt\u5728\u540c\u4e00\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u540c\u4e00\u4e2a\u6a21\u5757\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u7248\u672c\uff0c\u800c\u4e0d\u8fdb\u884c\u5404\u79cd\u6076\u52a3\u7684\u9ed1\u5ba2\u653b\u51fb\uff0c\u8fd9\u4e9b\u653b\u51fb\u53ef\u80fd\u4f1a\u7834\u574f\u67d0\u4e9b\u4e1c\u897f\uff0c\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u7834\u574f\u67d0\u4e9b\u4e1c\u897f\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5e95\u5c42\u6a21\u5757\u7684\u5de5\u4f5c\u65b9\u5f0f\uff08\u4f8b\u5982\uff0c\u5b83\u662f\u5426\u68c0\u67e5_name_________;\u5b83\u662f\u5426\u6446\u5f04sys.modules\uff1f\u7b49\u7b49\uff09\u3002*\u5f53\u7136\uff0c\u521d\u5b66\u8005\u5e38\u72af\u7684\u9519\u8bef\u662f\uff0c\u4e0d\u5c0f\u5fc3\u5c06Python\u811a\u672c\u547d\u540d\u4e3astdlib\u6a21\u5757\uff08Python\u66f4\u613f\u610f\u7b2c\u4e8c\u6b21\u91cd\u65b0\u5bfc\u5165\u811a\u672c\uff0c\u800c\u4e0d\u662f\u4f7f\u7528stdlib\u6a21\u5757\uff0c\u7136\u540e\u4e00\u5207\u90fd\u4f1a\u4e2d\u65ad\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u65e0\u6cd5\u5b9e\u73b0stdlib\u6a21\u5757\u7684API\uff09\u3002\u5982\u679c\u4e00\u4e2a\u65b0\u7684stdlib\u6a21\u5757\u4e0e\u60a8\u73b0\u6709\u7684\u4e00\u4e2a\u6a21\u5757\u540c\u540d\uff0c\u4f46\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u4f3c\u4e4e\u6ca1\u6709\u4eba\u4f7f\u7528\u5b83\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7834\u574fbackcompat\n......", "note_en": "The following subscription-only content has been made available to you by an LWN subscriber. Thousands of subscribers depend on LWN for the best news from the Linux and free software communities. If you enjoy this article, please consider  subscribing to LWN. Thank youfor visiting LWN.net!\n Regularexpressions are a common feature of computer languages, especially higher-level languages like Ruby, Perl, Python, and others, for doingfairly sophisticated text-pattern matching. Some languages, includingPerl, incorporate regular expressions into the language itself,while others have classes or libraries that come with the languageinstallation. Python&#39;s standard library has the   re module,which provides facilities for working with regular expressions; as a recentdiscussion on the python-ideas mailing shows, though, that module hassomewhat fallen by the wayside in recent times.\n  J.B. Langston  postedto the list on February\u00a014; he had  filed a bug about a problemhe encountered using  re, which was closed with a suggestion that hebring it to the mailing list. Langston had a regular expression (which isoften abbreviated as &#34;regex&#34; or &#34;regexp&#34;) thatseemed to hang his program when applied to a rarely occurring log message;it turned out that there was a flaw in his regular expression, which caused an enormousamount of backtracking that, effectively, never completed. In the bug report, he wasasking for a way to specify a timeout: I will try to rewrite my regex to address this specific issue, but it&#39;shard to anticipate every possible input and craft a bulletproof regex, sosomething like this kind of thing can be used for a denial of serviceattack (intentional or not). In this case the regex was used in anautomated import process and caused the process to back up for many hoursbefore someone noticed. Maybe a solution could be to add a timeout optionto the regex engine so it will give up and throw an exception if the regexexecutes for longer than the configured timeout.\n He elaborated his use case further in his post: My use case is log parsing and I have a large number of regexes that runover many different log lines. With the volume of regexes I have, it&#39;s hardto make sure every regex has no potential problems, especially when the pathological behavior only occurs on certain inputs that may not have beenanticipated when developing the regex. Also because of the volume of data these regexes are parsing, I would neverwant to allow a regex to run longer than a few milliseconds because if itdid, that would kill my log processing throughput. I&#39;d rather that it justraise an exception and move on to the next log entry.\n Jonathan Slenders  repliedthat the   regexmodule on the  Python Package Index(PyPI) has support for timeouts.  regex is meant to be both adrop-in replacement for  re (using its &#34;version\u00a00&#34;) and to providesupport for additional regular-expression features when using &#34;version\u00a01&#34;. Thosefeatures include nested sets, full Unicode case-folding by default,dropping the global interpreter lock (GIL) during matching for concurrency,and more. The  regex home page lists a whole raft of differenceswhen using version\u00a01, including a  timeout parameter for thematching functions.\n  Tim Peters also  mentioned regex, though not because it implements timeouts (which issomething he only learned via the thread), but because it is &#34; aterrific module&#34; with many features from newer regular-expression implementations.It is &#34; alsoharder to provoke into exponential-time bad cases&#34;. He discussed some of the tradeoffs that come with regular expressions and recommended theclassic book,   MasteringRegular Expressions, for those struggling to use them well. Henoted that  SNOBOL, whichis a string-processing language from the 1960s, did not have regular expressions, thoughthere were tasks where it (andits successor of sorts,  Icon)were able to do matching in more natural ways: Naive regexps are both clumsy and prone to badtiming in many tasks that &#34;should be&#34; very easy to express. Forexample, &#34;now match up to the next occurrence of &#39;X&#39;&#34;. In SNOBOL andIcon, that&#39;s trivial. 75% of regexp users will write &#34;.*X&#34;, with scantunderstanding that it may match waaaay more than they intended.Another 20% will write &#34;.*?X&#34;, with scant understanding that mayextend beyond _just_ &#34;the next&#34; X in some cases. That leaves the happy5% who write &#34;[^X]*X&#34;, which finally says what they intended from thestart.\n Those who are not well-versed in regular-expression syntax may find some of that a bitpuzzling. While this article cannot be an introduction to regular expressions\u2014there arecountless web sites, books, and other resources for that\u2014we will try togive readers a bit of a leg up. In regular-expression syntax, &#34; .&#34; represents anysingle character, adding &#34; *&#34; says to match zero or moreoccurrences of the previous term, so &#34; .*&#34; matches any string,while &#34; .*X&#34; matches any string up to a literal &#34;X&#34;. But, as thefollowing example shows, that may not be exactly what the programmer had inmind:\n The  match value in the object returned from   re.search()shows that it matched all the way up to the second occurrence of &#34;X&#34; in thestring. That is becausethe &#34; *&#34; operator is &#34; greedy&#34;\u2014itmatches as much as it can. The 20% case in Peters&#39;s message uses the non-greedy quantifier &#34; ?&#34; to get closer to the resultthat was asked for:\n The 5% case, &#34; [^X]*X&#34;, uses a negated character set,&#34; [^X]&#34;, which means to match anything  but &#34;X&#34;. So that regular expressioncan be read as &#34;match any characters that are not &#39;X&#39;, followed by &#39;X&#39;&#34;,but it may well not be the first thing that comes to mind. Steven D&#39;Aprano  wassurprised that &#34; .*?X&#34; might match beyond the next &#34;X&#34;, but Chris Angelico  pointedout that non-greedy does not mean it will only match to the next &#34;X&#34;: Nongreedy means it&#39;ll prefer the next X, but it has to be open tochecking others. The X between bbb and ccc won&#39;t result in a match, so the .*? has tocapture more.\n The sub-thread extended a ways, looking into deeper aspects of matching &#34;upto the next &#39;string&#39;&#34;, which shows the complications that canarise\u2014complete with mistaken &#34;solutions&#34;. As can be seen, regular expressions are a powerful mechanism, but they arecomplex, can beused inappropriately, and areprone to bugs of various sorts; they are also difficult to test fully andto debug when problems are encountered. But they have become ubiquitous intoday&#39;s computing landscape. Peters  said: As to why regexps prevailed, traction! They are useful tools, and_started_ life as pretty simple things, with small, elegant, andefficient implementations Feature creep and &#34;faster! faster! faster!&#34;turned the implementations more into bottomless pits now ;-)\n Matthew Barnett (&#34;MRAB&#34;), who is the developer of  regex,  agreedwith that assessment: Regexes were simple to start with, so only a few metacharacters wereneeded, the remaining characters being treated as literals. As new features were added, the existing metacharacters were used in newways that had been illegal until then in order to remainbackwards-compatible. Add to that that there are multiple implementations with differing (andsometimes only slightly differing) features and behaviours.\n  Langston &#34; quite enjoyed reading&#34; the thread that resulted fromhis post, but wanted to see if there was support &#34; for adding a timeoutfeature to the Python re library&#34;. He said that he would beinvestigating  regex but still thought  re could benefitfrom a way to stop runaway regular expressions. Angelico  wasopposed to the idea, suggesting that some of the other matchingtechniques explored in the thread should be pursued instead.&#34; Itwould add overhead to common cases in order to put a shield aroundpathological ones, and it&#39;s difficult to impossible to usefully definethe cutoff.&#34;As he noted in his first reply, though, Peters  thinksthat no work is likely to be done on features for  re: Buried in the fun discussion was my guess: no way. Python&#39;s re iseffectively dead legacy code, with no current &#34;owner&#34;. Its commithistory shows very little activity for some years already. Mostcommits are due to generic &#34;code cleanup&#34; crusades that have nothingspecific to do with the algorithms. None required non-trivialknowledge of the implementation.\n Peters said that the code that makes up the  regex module was  originally targeted at becomingpart of core Python back in 2008 by its original author, JeffreyC. Jacobs; the work was  pickedup and carried forward by Barnett, and eventually turned into regex. The request to switch  re over to using it was  closed in 2021because of the existence of  regex in PyPI; &#34; If someone wantsto move it into the Python stdlib, I suggest to start on the python-ideaslist first.&#34;\n The problem is that  regex has &#34; _dozens_ of features that would bevaluable to have in the standard library&#34;, Peters said, so: [N]o core dev I know of is going to devote theirlimited time to reproducing a tiny subset of regex&#39;s many improvementsin Python&#39;s legacy engine. In fact, &#34;install regex!&#34; is such anobvious choice at this point that I wouldn&#39;t even give time to justreviewing a patch that added timeouts.\n Barnett  saidthat he eventually decided against having the  regex code added tothe standard library, at least in part because &#34; that would tie fixesand additions to Python&#39;s release cycle&#34;. Python is known for being&#34;batteries included&#34;, &#34; but not nuclearreactors&#34;, so having  regex in PyPI makes more sense, hesaid. Peters  thoughtthat some features in  regex might have been nuclear reactors backin 2008, but are being used more commonly today: [...] Python&#39;s re module is frozen in anever-receding past. Nobody wants to work on it because, well, &#34;regexalready does that! In fact, it&#39;s been doing it for 15 years already&#34;.\n Peters also  pointedout that trying out  regex may be easier than Langstonrealized. In fact, because of the version\u00a00 compatibility mode, he couldperhaps add a simple import to give it a whirl: In another message, Peters furtherdescribedwhat he meant by that: What I wrote here is more elaboration on that _trying_ this is easierthan they might be thinking: They don&#39;t have to, e.g., rewrite theirregexps, or invoke different function or method names, or worry thatthey&#39;ll get different results. The packages are highly compatible insyntax and semantics and APIs so long as you stick to the things redoes. That in no way suggests they _should_ stick to what re does.It&#39;s assuring them that _getting started_ is close to trivial. Theircurrent code should continue to work unchanged, apart from justchanging &#34;re&#34; to &#34;regex&#34;.\n It turns out that Langston&#39;s program  alreadyuses  regex &#34; via some transitivedependency&#34;, but he was  notimpressed with its performance when compared to  re. A testdata set of 700MB was processed in\u00a077 seconds with  re but ittook\u00a092 seconds with  regex. Peters  was&#34; mildly surprised&#34; by that, since: &#34; Most timespeople report that regex is at least modestly faster than re&#34;.   The performance of  regex seems like something that might needattention, especially if it is becoming the de facto regular-expression module forPython. Peters&#39;s analysis of the status of  re is somewhatdisheartening; it is apparently permanently stuck in the past. That may besufficient for many, however, but it somehow seems suboptimal to have twoseparate pieces of the Python ecosystem that both support the more limited re subset; most enhancements are likely to only go into regex so that  re falls further and further behind thestate of the art.\n Supplanting  re with  regex in the standard library (usingversion\u00a00 by default) would seem attractive, though Barnett seems atleast somewhat cautious about doing so. A similar thing occurred with thepopular  Requests HTTPmodule, which was  considered as a possibleaddition to the standard library at the  2015Python Language Summit. The conclusion was that it made more sensefor Requests to stay out of the standard library because it moves fasterthan the normal Python release cadence (then\u00a018 months, but now yearly),especially for security updates (which are done more frequently for thelanguage, but not as quickly as Requests can move on its own).\n The &#34;batteries included&#34; story for Python has been a major part of itssuccess over the years, but it is starting to fray in various ways. Forone thing, the large number of said batteries is straining the maintenance ability ofthe Python core developers. That has led to  discussions, a  Python Enhancement Proposal (PEP), and  further discussion about removing some partsof the library over the years. Most of the modules in the standard librarywere added long ago and, oncesomething is added, it is difficult to remove it\u2014even if the reason for itsinclusion and the existence of maintainers for it have gone away.\n Meanwhile, regular expressions are clearly something that Python programmers use\u2014a lot\u2014sohaving the best support for them, in one place if possible, seems like theright approach. As Peters noted, they are a &#34; a tool with a hyper-concise notation, where acorrect expression is pretty much indistinguishable from line noise,and a typo is rarely detectable as a syntax error&#34;. Adding risks ofincompatibility (or differing performance) into the mix may not lead tomuch joy either. It is all a bit of a pickle, but not  that   pickle,of course.\n On the other hand,  re, which was originally developed by FredrikLundh (who sadly  died back in November), doeswhat it needs to do for lots of different use cases. Those who need timeouts,  atomic groups,nested character sets,  possessivequantifiers, and other advanced features have a place to turn.Barnett seems keen to maintain the compatibility with  re, so itmay turn out to be a situation, like with Requests, where alternatives tothe standard library should be recommended, perhaps even in the Pythondocumentation. There is no clear and obvious &#34;right&#34; solution here it seems.\n         ( Log in to post comments)\n  This article and discussion did not go the way I expected. Maybe my way of thinking is uncommon, but I avoid using the &#34;non-regular&#34; (in the theoretical sense of regular languages) features of regex at all costs. Sure, assertions and backreferences can simplify things, but at that point you&#39;re trying to implement logic in a quite arcane language, and you&#39;d likely be better served by writing that logic with, well, Python. I had assumed this discussion would naturally land on the issues of exponential backtracking, and a recommendation to switch to a truly &#34;regular&#34; expression engine, such as Google&#39;s re2. (A good background on this from Russ Cox is found here [1]).  Probably as a result of my attitude toward regex matching, I haven&#39;t really found any issues with the default &#34;re&#34; module, and didn&#39;t even know of the existence of &#34;regex&#34;, nor that it was a de-facto standard for many Python users -- I suppose I&#39;ve never felt that re lacked features.  In any case, I wonder of the original use case would have been solved by a truly &#34;regular&#34; engine, maybe with the option to switch to the more complex (and slower) engine for the rare cases where non-regular features are needed.\n Same, I enjoyed the &#34;contrast&#34; between:  &gt; As can be seen, regular expressions are a powerful mechanism, but they are complex, can be used inappropriately, and are prone to bugs of various sorts; they are also difficult to test fully and to debug when problems are encountered. [...] They are useful tools, and _started_ life as pretty simple things, with small, elegant, and efficient implementations Feature creep and &#34;faster! faster! faster!&#34; turned the implementations more into bottomless pits now ;-)  and:  &gt; Those who need timeouts, atomic groups, nested character sets, possessive quantifiers, and other advanced footguns ...\n  &gt; (A good background on this from Russ Cox is found here [1]).  &gt; [1]:  https://swtch.com/~rsc/regexp/regexp1.html  Thanks for that link. That is certainly an enlightening read. Make me wonder if what is *really* needed isn&#39;t a &#34;simple-re&#34; module with a &#34;Thompson NFA&#34; regex engine. A 6 digit speedup should be worth aiming for after all\n  I feel like the real question here is less what python is going to do about regex specifically, but what they can do about the &#34;The standard library is where modules go to die&#34; situation. Importing the current state of the art in regex library into the cpython repository is going to be nice for a bit, but it doesn&#39;t really do anything to address the reasons that it came to be neglected in the first place. It would effectively crowd out an actively maintained pypi module in favor of a soon-to-be-unmaintained standard library one once again, as keeps happening. Surely that&#39;s not in the ecosystem&#39;s best interest.\n There is no reason you can&#39;t have both (stdlib and pypi). Ruby, for example, ships some gems by default, which you can upgrade independently in your Gemfile. This opens a path for removal from the stdlib: recommend to &#34;just add foo to your gemfile&#34; and then it can be removed from the included batteries in a later release. They did this in ruby 3 iirc.\n  I really wish Python releases came bundled with particular versions of some well-managed PyPI packages you could upgrade further. You should be able to rely on the fact that &#34;regex&#34; is present, and that it conforms to the documentation frozen when 3.9 came out, but not that is doesn&#39;t have undocumented features from the future or that it still has bugs that hadn&#39;t been discovered.  AFAICT, &#34;requests&#34; hasn&#39;t removed any documented features since 2015; on the other hand, &#34;construct&#34; has not been as stable, even over a shorter period of time.\n I feel like almost every language does packaging and dependencies poorly, and they all just find different ways of being terrible (albeit most also have some redeeming qualities). In the case of Python:  * On the one hand, import statements use a relatively straightforward, easy to understand set of semantics (i.e. &#34;just stick a bunch of py files in a directory structure, and you&#39;re done!&#34;). This is good for scripting purposes, because you don&#39;t have to faff about with something like CMake just to build an entirely self-contained app. * On the other, those semantics are perhaps *too* simple, because there is no way to specify &#34;I need version X or greater&#34; within the import statement itself, nor where the module actually comes from. So now that information needs to live in metadata somewhere, and get tracked and managed separately by a tool like Pip. * To add insult to injury, you can&#39;t have two different versions of the same module in the same process, without doing all sorts of nasty hacks that may or may not break something depending on how the underlying module works (e.g. Does it check __name__? Does it fiddle around with sys.modules? etc.). * And, of course, you have the common beginner mistake of accidentally naming a Python script after a stdlib module (Python will prefer to re-import the script a second time, rather than using the stdlib module, and then everything breaks because it probably won&#39;t implement the stdlib module&#39;s API). This can break backcompat if a new stdlib module is introduced with the same name as one of your existing modules, but for some reason nobody seems\n......", "posttime": "2022-02-23 21:33:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,\u6b63\u5219\u8868\u8fbe\u5f0f,support", "title": "Python\u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u652f\u6301", "title_en": "Python Support for Regular Expressions", "transed": 1, "url": "https://lwn.net/SubscriberLink/885682/ebb44eea5667f358/", "via": "", "real_tags": ["python", "\u6b63\u5219\u8868\u8fbe\u5f0f", "support"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074725, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9ebb\u7701\u7406\u5de5\u5b66\u9662\uff08MIT\uff09\u7684\u5de5\u7a0b\u5e08\u5f00\u53d1\u4e86\u4e00\u79cd\u53ef\u751f\u7269\u964d\u89e3\u7684\u5916\u79d1\u80f6\u5e26\uff0c\u8fd9\u79cd\u80f6\u5e26\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5e94\u7528\u4e8e\u80c3\u80a0\u9053\uff08GI\uff09\u7684\u6495\u88c2\u5904\uff0c\u5c31\u50cf\u6e17\u6f0f\u7ba1\u9053\u5468\u56f4\u7684\u7ba1\u9053\u80f6\u5e26\u4e00\u6837\u3002\n\u80a0\u9053\u68c0\u67e5\uff1a\u80c3\u80a0\u9053\u7ea630\u82f1\u5c3a\u957f\uff0c\u5305\u542b\u6d88\u5316\u7cfb\u7edf\u7684\u4e3b\u8981\u5668\u5b98\uff0c\u5305\u62ec\u7ed3\u80a0\u3001\u80c3\u548c\u80a0\u9053\u3002\n\u67d0\u4e9b\u5065\u5eb7\u95ee\u9898\uff0c\u5982\u7ed3\u80a0\u708e\uff0c\u4f1a\u5bfc\u81f4\u80c3\u80a0\u9053\u6495\u88c2\uff0c\u8eab\u4f53\u521b\u4f24\uff0c\u5982\u4e8b\u6545\u3001\u67aa\u4f24\u6216\u5200\u4f24\u4e5f\u4f1a\u5bfc\u81f4\u6495\u88c2\u3002\u5916\u79d1\u533b\u751f\u6709\u65f6\u4e5f\u9700\u8981\u5207\u9664\u80c3\u80a0\u9053\u90e8\u5206\u6765\u6cbb\u7597\u75be\u75c5\uff0c\u6bd4\u5982\u7ed3\u80a0\u764c\u3002\n\u201c\u5916\u79d1\u533b\u751f\u53ef\u4ee5\u50cf\u5728\u975e\u5916\u79d1\u4e16\u754c\u4f7f\u7528\u5bfc\u7ba1\u80f6\u5e26\u4e00\u6837\u4f7f\u7528\u5b83\u3002\u201d\n\u8bb8\u6b66\u65ed\n\u6311\u6218\uff1a\u5728\u4efb\u4f55\u6495\u88c2\u6216\u624b\u672f\u540e\uff0c\u6b63\u786e\u5bc6\u5c01\u80c3\u80a0\u9053\u662f\u975e\u5e38\u91cd\u8981\u7684\u2014\u2014\u5982\u679c\u4e0d\u5bc6\u5c01\uff0c\u7ec6\u83cc\u53ef\u80fd\u4f1a\u6cc4\u6f0f\u5230\u8179\u8154\uff0c\u5bfc\u81f4\u5371\u53ca\u751f\u547d\u7684\u8113\u6bd2\u75c7\u3002\n\u4e0d\u8fc7\uff0c\u786e\u4fdd\u5bc6\u5c01\u7d27\u5bc6\u5e76\u4e0d\u5bb9\u6613\u3002\u5916\u79d1\u533b\u751f\u5fc5\u987b\u5c0f\u5fc3\u7cbe\u786e\u5730\u7f1d\u5408\u4f24\u53e3\uff0c\u56e0\u4e3a\u7ec4\u7ec7\u975e\u5e38\u67d4\u8f6f\uff0c\u5b83\u4ecd\u7136\u53ef\u4ee5\u5728\u5b8c\u7f8e\u5b9a\u4f4d\u7684\u7f1d\u7ebf\u4e4b\u95f4\u6495\u88c2\u3002\n\u9879\u76ee\u4e3b\u7ba1\u8d75\u5ba3\u548c\u544a\u8bc9\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u65b0\u95fb\uff1a\u201c\u5168\u4e16\u754c\u6bcf\u5e74\u6709\u6570\u4ee5\u767e\u4e07\u8ba1\u7684\u624b\u672f\u6765\u4fee\u590d\u80c3\u80a0\u9053\u7f3a\u9677\uff0c\u9ad8\u5371\u60a3\u8005\u7684\u6e17\u6f0f\u7387\u9ad8\u8fbe20%\u3002\u201d\u3002\n\u60f3\u6cd5\u662f\uff1a\u4e3a\u4e86\u964d\u4f4e\u8fd9\u4e00\u6bd4\u7387\uff0c\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684\u7814\u7a76\u56e2\u961f\u5c062019\u5e74\u7814\u53d1\u7684\u53cc\u9762\u624b\u672f\u80f6\u5e26\u8f6c\u53d8\u4e3a\u4e00\u79cd\u900f\u660e\u7684\u5355\u9762\u80f6\u5e26\uff0c\u53ef\u4ee5\u653e\u7f6e\u5728\u7f1d\u5408\u7ebf\u4e0a\uff0c\u6216\u5728\u80c3\u80a0\u9053\u4fee\u590d\u624b\u672f\u4e2d\u4ee3\u66ff\u7f1d\u5408\u7ebf\u4f7f\u7528\u3002\n\u201c\u6211\u4eec\u60f3\uff0c\u4e5f\u8bb8\u6211\u4eec\u53ef\u4ee5\u628a\u6211\u4eec\u7684\u7c98\u6027\u5143\u4ef6\u53d8\u6210\u4e00\u79cd\u4ea7\u54c1\u6765\u4fee\u590d\u80a0\u9053\u6cc4\u6f0f\uff0c\u7c7b\u4f3c\u4e8e\u7528\u7ba1\u9053\u80f6\u5e26\u5bc6\u5c01\u7ba1\u9053\uff0c\u201d\u4e3b\u8981\u4f5c\u8005\u5434\u6676\u6676\u8bf4\u3002\n\u6279\u51c6\u6807\u5fd7\uff1a\u5728\u901a\u8fc7\u5b9e\u9a8c\u5ba4\u5b9e\u9a8c\u786e\u5b9a\u624b\u672f\u80f6\u5e26\u4e0e\u4eba\u4f53\u7ec6\u80de\u5177\u6709\u751f\u7269\u76f8\u5bb9\u6027\u540e\uff0c\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684\u56e2\u961f\u7ee7\u7eed\u8fdb\u884c\u52a8\u7269\u7814\u7a76\u3002\n\u5f53\u4ed6\u4eec\u5728\u5927\u9f20\u8eab\u4e0a\u6d4b\u8bd5\u8fd9\u79cd\u80f6\u5e26\u65f6\uff0c\u4ed6\u4eec\u53d1\u73b0\u5b83\u5728\u6577\u8d34\u540e\u4e0d\u523010\u79d2\u5185\u5c31\u5728\u7ed3\u80a0\u548c\u80c3\u6495\u88c2\u5904\u5f62\u6210\u4e86\u5bc6\u5c01\uff0c\u5e76\u5728\u6574\u4e2a\u6108\u5408\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u5728\u539f\u4f4d\u3002\n\u540c\u65f6\uff0c\u4f7f\u7528\u624b\u672f\u80f6\u5e26\u4fee\u8865\u7ed3\u80a0\u7f3a\u635f\u7684\u732a\u5728\u56db\u5468\u7684\u6108\u5408\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u5065\u5eb7\u95ee\u9898\u2014\u2014\u5b83\u4eec\u6b63\u5e38\u8fdb\u98df\uff0c\u6ca1\u6709\u660f\u7761\uff0c\u6708\u5e95\u663e\u793a\u5b8c\u5168\u6108\u5408\u7684\u7f3a\u635f\uff0c\u6ca1\u6709\u6e17\u6f0f\u8ff9\u8c61\u3002\n\u5c55\u671b\u672a\u6765\uff1a\u7814\u7a76\u4eba\u5458\u73b0\u5728\u5df2\u7ecf\u6210\u7acb\u4e86\u4e00\u5bb6\u540d\u4e3aSanaHeal\u7684\u516c\u53f8\uff0c\u5f00\u53d1\u7528\u4e8e\u533b\u9662\u624b\u672f\u5ba4\u7684\u80f6\u5e26\u3002\n\u201c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u79cd\u624b\u672f\u7528\u80f6\u5e26\u662f\u4e00\u79cd\u5f88\u597d\u7684\u57fa\u7840\u6280\u672f\uff0c\u53ef\u4ee5\u5236\u6210\u5b9e\u9645\u7684\u73b0\u6210\u4ea7\u54c1\uff0c\u201d\u8054\u5408\u9996\u5e2d\u4f5c\u8005Hyunhoo Yuk\u8bf4\u3002\u201c\u5916\u79d1\u533b\u751f\u53ef\u4ee5\u50cf\u5728\u975e\u624b\u672f\u9886\u57df\u4f7f\u7528\u5bfc\u7ba1\u80f6\u5e26\u4e00\u6837\u4f7f\u7528\u5b83\u3002\u5b83\u4e0d\u9700\u8981\u4efb\u4f55\u51c6\u5907\u6216\u4e8b\u5148\u6b65\u9aa4\u3002\u53ea\u9700\u53d6\u51fa\u3001\u6253\u5f00\u5e76\u4f7f\u7528\u3002\u201d\n\u6211\u4eec\u5f88\u60f3\u542c\u5230\u4f60\u7684\u6d88\u606f\uff01\u5982\u679c\u60a8\u5bf9\u672c\u6587\u6709\u4efb\u4f55\u8bc4\u8bba\uff0c\u6216\u8005\u60a8\u5bf9\u672a\u6765\u7684\u81ea\u7531\u601d\u8003\u6545\u4e8b\u6709\u4efb\u4f55\u5efa\u8bae\uff0c\u8bf7\u53d1\u7535\u5b50\u90ae\u4ef6\u81f3tips@freethink.com .", "note_en": "MIT engineers have  developed a biodegradable surgical tape that can be applied to tears in the gastrointestinal (GI) tract as easily as duct tape around leaky pipes.\n Gut check: The GI tract is about 30 feet long and contains the major organs of the digestive system, including the colon, stomach, and intestines.\n Certain health issues, such as  colitis, can cause tears in the GI tract, as can physical trauma, such as accidents, gunshots, or knife wounds. Surgeons sometimes need to remove segments of the GI tract to treat diseases, such as  colon cancer, too.\n \u201cSurgeons could use it as they use duct tape in the nonsurgical world.\u201d\n Hyunwoo Yuk\n The challenge: It\u2019s incredibly important that the GI tract be properly sealed following any tear or surgery \u2014 if it isn\u2019t, bacteria can leak into the abdominal cavity and cause life-threatening  sepsis.\n Ensuring a tight seal isn\u2019t easy, though. Surgeons must take care to precisely  suture the wound, and because the tissue is so soft, it can still tear between perfectly positioned stitches.\n \u201cThere are millions of surgeries worldwide a year to repair gastrointestinal defects, and the leakage rate is up to 20 percent in high-risk patients,\u201d project supervisor Xuanhe Zhao  told MIT News.\n The idea: In the hope of lowering that rate, the MIT team turned a double-sided surgical tape it had developed in 2019 into a clear, single-sided tape that could be placed over sutures or used instead of them during GI repair operations.\n \u201cWe thought, maybe we could turn our sticky element into a product to repair gut leaks, similar to sealing pipes with duct tape,\u201d lead author Jingjing Wu said.\n  Seal of approval: After determining through lab experiments that the surgical tape was biocompatible with human cells, the MIT team moved on to animal studies.\n When they tested the tape in rats, they found that it formed a seal over colon and stomach tears in less than 10 seconds after application and remained in place throughout the healing process.\n Pigs whose colon defects were patched using the surgical tape, meanwhile, had no health issues during the four-week healing process \u2014 they ate normally, didn\u2019t appear lethargic, and displayed fully healed defects with no signs of leakage at the end of the month.\n Looking ahead: The researchers have now founded a company, SanaHeal, to develop the tape for use in hospital operating rooms.\n \u201cWe think this surgical tape is a good base technology to be made into an actual, off-the-shelf product,\u201d co-lead author Hyunwoo Yuk said. \u201cSurgeons could use it as they use duct tape in the nonsurgical world. It doesn\u2019t need any preparation or prior step. Just take it out, open, and use.\u201d\n We\u2019d love to hear from you! If you have a comment about this article or if you have a tip for a future Freethink story, please email us at   tips@freethink.com .", "posttime": "2022-02-23 21:29:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5de5\u7a0b\u5e08,engineers,\u80f6\u5e26", "title": "\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u5de5\u7a0b\u5e08\u53d1\u660e\u5916\u79d1\u201c\u5bfc\u7ba1\u80f6\u5e26\u201d", "title_en": "MIT engineers invent surgical \u201cduct tape\u201d", "transed": 1, "url": "https://www.freethink.com/health/surgical-tape", "via": "", "real_tags": ["\u5de5\u7a0b\u5e08", "engineers", "\u80f6\u5e26"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074724, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u8005\n\u5728\u5468\u4e00\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\uff0c\u7f8e\u56fd\u8d22\u653f\u90e8\u8868\u793a\uff0c\u5b83\u6b63\u5728\u4e0e\u7f8e\u56fd\u603b\u52a1\u7ba1\u7406\u5c40\u5408\u4f5c\uff0c\u4ee5\u8fbe\u5230\u91c7\u7528\u8be5\u5e73\u53f0\u6240\u9700\u7684\u201c\u5b89\u5168\u6807\u51c6\u548c\u89c4\u6a21\u201d\u3002\n\u6b64\u524d\uff0c\u7f8e\u56fd\u56fd\u7a0e\u5c40\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u5ba3\u5e03\u4e86\u4e00\u9879\u8ba1\u5212\uff0c\u4e0d\u518d\u4f7f\u7528\u7b2c\u4e09\u65b9\u9762\u90e8\u8bc6\u522b\u670d\u52a1\u6765\u8ba4\u8bc1\u521b\u5efa\u65b0\u5728\u7ebf\u8d26\u6237\u7684\u7eb3\u7a0e\u4eba\u3002\u636e\u62ab\u9732\uff0c\u627f\u5305\u5546ID.me\u4f7f\u7528\u4e86\u5f3a\u5927\u7684\u4e00\u5bf9\u591a\u4eba\u8138\u8bc6\u522b\u6280\u672f\uff0c\u8be5\u516c\u53f8\u88ab\u8feb\u62d2\u7edd\u4e86\u8fd9\u9879\u6280\u672f\u3002\n\u7f8e\u56fd\u56fd\u7a0e\u5c40\u8868\u793a\uff1a\u201c\u867d\u7136\u8fd9\u4e00\u77ed\u671f\u89e3\u51b3\u65b9\u6848\u5728\u4eca\u5e74\u7684\u7533\u8bf7\u5b63\u5df2\u7ecf\u5230\u4f4d\uff0c\u4f46\u7f8e\u56fd\u56fd\u7a0e\u5c40\u5c06\u4e0e\u653f\u5e9c\u5404\u90e8\u95e8\u7684\u5408\u4f5c\u4f19\u4f34\u5bc6\u5207\u5408\u4f5c\uff0c\u63a8\u51falogin.gov\u4f5c\u4e3a\u8eab\u4efd\u9a8c\u8bc1\u5de5\u5177\u3002\u201d\u3002\n\u767b\u5f55\u65f6\u3002gov\u9884\u8ba1\u4e0d\u4f1a\u5728\u5f53\u524d\u7eb3\u7a0e\u5b63\u53ca\u65f6\u51c6\u5907\u597d\u4f9b\u7eb3\u7a0e\u4eba\u4f7f\u7528\uff0c\u7528\u6237\u73b0\u5728\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528\u4efb\u4f55\u751f\u7269\u8bc6\u522b\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u6ce8\u518cIRS\u5728\u7ebf\u8d26\u6237\u3002\u636e\u7f8e\u56fd\u56fd\u7a0e\u5c40\u79f0\uff0c\u4efb\u4f55\u4e4b\u524d\u6536\u96c6\u7684\u751f\u7269\u7279\u5f81\u6570\u636e\u4e5f\u5c06\u5728\u672a\u6765\u51e0\u5468\u5185\u88ab\u5220\u9664\u3002\n\u9690\u79c1\u5021\u5bfc\u8005\u8bf4\uff0c\u5404\u79cd\u9762\u90e8\u8bc6\u522b\u5bf9\u6d88\u8d39\u8005\u6784\u6210\u5a01\u80c1\u3002\u9664\u4e86\u5927\u91cf\u7814\u7a76\u8868\u660e\u8be5\u6280\u672f\u5bf9\u975e\u767d\u8272\u80a4\u8272\u7684\u51c6\u786e\u5ea6\u8f83\u4f4e\u5916\uff0c\u79ef\u7d2f\u751f\u7269\u7279\u5f81\u6570\u636e\u53ef\u80fd\u4f1a\u5e26\u6765\u5de8\u5927\u7684\u5b89\u5168\u98ce\u9669\u3002\n\u7f8e\u56fd\u56fd\u7a0e\u5c40\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff1a\u201c\u8fd9\u7b26\u5408\u7f8e\u56fd\u56fd\u7a0e\u5c40\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u7684\u627f\u8bfa\uff0c\u5373\u4e0d\u518d\u8981\u6c42\u7eb3\u7a0e\u4eba\u521b\u5efa\u4e00\u4e2a\u7f8e\u56fd\u56fd\u7a0e\u5c40\u5728\u7ebf\u8d26\u6237\uff0c\u5411\u7b2c\u4e09\u65b9\u670d\u52a1\u63d0\u4f9b\u81ea\u62cd\uff0c\u4ee5\u5e2e\u52a9\u8ba4\u8bc1\u4ed6\u4eec\u7684\u8eab\u4efd\u3002\u201d\u3002\u201c\u7eb3\u7a0e\u4eba\u53ef\u4ee5\u9009\u62e9\u5728\u4e0e\u4ee3\u7406\u4eba\u7684\u5b9e\u65f6\u865a\u62df\u9762\u8c08\u4e2d\u9a8c\u8bc1\u5176\u8eab\u4efd\uff1b\u5982\u679c\u7eb3\u7a0e\u4eba\u9009\u62e9\u901a\u8fc7\u865a\u62df\u9762\u8c08\u9a8c\u8bc1\u5176\u8eab\u4efd\uff0c\u5219\u4e0d\u9700\u8981\u751f\u7269\u7279\u5f81\u6570\u636e\uff0c\u5305\u62ec\u9762\u90e8\u8bc6\u522b\u3002\u201d\n\u5c3d\u7ba1\u5df2\u7ecf\u5f00\u59cb\u767b\u5f55\u3002\u7eb3\u7a0e\u4eba\u4ecd\u7136\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7ID.me\u7684\u5de5\u5177\u81ea\u52a8\u9a8c\u8bc1\u8eab\u4efd\u3002\u65b0\u7684\u8981\u6c42\u5df2\u7ecf\u5230\u4f4d\uff0c\u4ee5\u786e\u4fdd\u4e3a\u6b63\u5728\u521b\u5efa\u7684\u5e10\u6237\u5220\u9664\u63d0\u4f9b\u7684\u56fe\u50cf\u3002", "note_en": "Written by\r\r\r       The  Internal Revenue Service has committed to\u00a0 Login.gov as a user authentication tool after earlier this month agreeing to  abandon the use of a commercial tool that featured third-party facial recognition technology.\n In a statement on Monday, the Treasury Department said it is working with the General Services Administration to achieve the \u201csecurity standards and scale\u201d required to adopt the platform.\n It comes after IRS earlier this month announced a plan to move away from using a third-party service for facial recognition to authenticate taxpayers creating new online accounts. It was forced to reject the technology following  revelations that contractor  ID.me uses powerful one-to-many facial recognition technology.\n \u201cWhile this short-term solution is in place for this year\u2019s filing season, the IRS will work closely with partners across government to roll out login.gov as an authentication tool,\u201d IRS said.\n While Login.gov is not expected to be ready in time for use by taxpayers during the current tax season, users are now able to sign up for IRS online accounts without the use of any biometric data. Any previously collected biometric data will also be deleted over the next few weeks, according to IRS.\n Privacy advocates say that various types of facial recognition pose a threat to consumers. In addition to numerous studies demonstrating the technology is less accurate on non-White skin tones, amassing biometric data can prove a huge security risk.\n \u201cThis is consistent with the IRS\u2019s commitment earlier this month to transition away from the requirement for taxpayers creating an IRS online account to provide a selfie to a third-party service to help authenticate their identity,\u201d IRS said in a statement. \u201cTaxpayers will have the option of verifying their identity during a live, virtual interview with agents; no biometric data \u2013 including facial recognition \u2013 will be required if taxpayers choose to authenticate their identity through a virtual interview.\u201d\n Despite the move to Login.gov, taxpayers will still have the option to verify their identity automatically through ID.me\u2019s tool if they choose. New requirements are in place to ensure images provided are deleted for the account being created.", "posttime": "2022-02-23 21:28:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91c7\u7528,adopt,\u6570\u636e", "title": "\u56fd\u7a0e\u5c40\u91c7\u7528\u767b\u5f55\u65b9\u5f0f\u3002\u653f\u5e9c\u4f5c\u4e3a\u7528\u6237\u8ba4\u8bc1\u5de5\u5177", "title_en": "IRS to adopt Login.gov as user authentication tool", "transed": 1, "url": "https://www.fedscoop.com/irs-to-adopt-login-gov-as-user-authentication-tool/", "via": "", "real_tags": ["\u91c7\u7528", "adopt", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074723, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u7248\u6743\u5c40\u518d\u6b21\u5426\u8ba4\u5bf9\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u521b\u4f5c\u7684\u827a\u672f\u4f5c\u54c1\u8fdb\u884c\u7248\u6743\u4fdd\u62a4\u3002Stephen Thaler\u535a\u58eb\u8bd5\u56fe\u4e3a\u4e00\u4ef6\u540d\u4e3a\u300a\u6700\u8fd1\u8fdb\u5165\u5929\u5802\u300b\u7684\u827a\u672f\u54c1\u7248\u6743\uff0c\u5728\u7b2c\u4e8c\u6b21\u8bf7\u6c42\u91cd\u65b0\u5ba1\u8bae2019\u5e74\u7684\u88c1\u51b3\u65f6\u58f0\u79f0\uff0cUSCO&#39\uff1b\u7f8e\u56fd\u7684\u201c\u4eba\u7c7b\u4f5c\u8005\u8eab\u4efd\u201d\u8981\u6c42\u662f\u8fdd\u5baa\u7684\u3002\n\u5728\u6700\u65b0\u7684\u88c1\u51b3\u4e2d\uff0c\u8be5\u673a\u6784\u627f\u8ba4\u8be5\u4f5c\u54c1\u662f\u7531\u4eba\u5de5\u667a\u80fd\u521b\u9020\u7684\uff0c\u6cf0\u52d2\u79f0\u4e4b\u4e3a\u521b\u9020\u529b\u673a\u5668\u3002\u6cf0\u52d2\u7533\u8bf7\u5c06\u8be5\u4f5c\u54c1\u6ce8\u518c\u4e3a&#34\uff1b\u4f5c\u4e3a\u521b\u610f\u673a\u5668\u6240\u6709\u8005\u7684\u96c7\u4f63\u5de5\u4f5c\u3002\"\n\u7136\u800c\uff0c\u8be5\u529e\u516c\u5ba4\u8868\u793a\uff0c\u73b0\u884c\u7248\u6743\u6cd5\u53ea\u5bf9&#34\uff1b\u667a\u529b\u52b3\u52a8\u7684\u6210\u679c\u5efa\u7acb\u5728[\u4eba\u7c7b]\u601d\u7ef4\u7684\u521b\u9020\u529b\u4e0a\u3002\u201c\u56e0\u6b64\uff0c\u53d7\u7248\u6743\u4fdd\u62a4\u7684\u4f5c\u54c1\u5fc5\u987b\u662f\u7531\u4eba\u521b\u4f5c\u7684\u201d\uff0c\u8be5\u529e\u516c\u5ba4\u8868\u793a\uff0c\u5b83\u8d62\u4e86\uff1bt\u6ce8\u518c\u201c\u7531\u673a\u5668\u6216\u7eaf\u7cb9\u7684\u673a\u68b0\u8fc7\u7a0b\u4ea7\u751f\u201d\u7684\u4f5c\u54c1\uff0c\u8fd9\u4e9b\u4f5c\u54c1\u7f3a\u4e4f\u4eba\u7c7b\u4f5c\u8005\u7684\u5e72\u9884\u6216\u521b\u9020\u6027\u8f93\u5165\u3002\n\u8be5\u673a\u6784\u8868\u793a\uff0c\u6cf0\u52d2\u672a\u80fd\u63d0\u4f9b\u8bc1\u636e\u8bc1\u660e\u6700\u8fd1\u4e00\u6b21\u8fdb\u5165\u5929\u5802\u662f\u4eba\u7c7b\u521b\u4f5c\u7684\u7ed3\u679c\u3002\u5b83\u8fd8\u8868\u793a\uff0c\u4ed6\u65e0\u6cd5\u8bf4\u670dUSCO&#39\uff1bs&#34\uff1b\u79bb\u5f00\u4e00\u4e2a\u4e16\u7eaa\u7684\u7248\u6743\u6cd5\u5b66&#34\uff1b-\u6362\u53e5\u8bdd\u8bf4\uff0c\u6539\u53d8\u89c4\u5219\u3002\n\u88c1\u51b3\u6307\u51fa\uff0c\u5305\u62ec\u6700\u9ad8\u6cd5\u9662\u5728\u5185\u7684\u5404\u7ea7\u6cd5\u9662\u6709&#34\uff1b\u5c06\u7248\u6743\u4fdd\u62a4\u7edf\u4e00\u9650\u5236\u5728\u4eba\u7c7b\u4f5c\u8005\u7684\u4f5c\u54c1\u4e0a#34\uff1b\u4e0b\u7ea7\u6cd5\u9662\u6709&#34\uff1b\u591a\u6b21\u62d2\u7edd\u5c06\u7248\u6743\u4fdd\u62a4\u6269\u5927\u5230\u975e\u4eba\u7c7b\u521b\u4f5c\u7684\u5c1d\u8bd5\uff0c&#34\uff1b\u6bd4\u5982\u7334\u5b50\u62cd\u7684\u7167\u7247\u3002\n\u6cf0\u52d2\u5df2\u7ecf\u5728\u591a\u4e2a\u56fd\u5bb6\u6d4b\u8bd5\u4e86\u7248\u6743\u548c\u4e13\u5229\u6cd5\u3002\u4ed6\u8bd5\u56fe\u8ba9\u540d\u4e3aDABUS\u7684\u4eba\u5de5\u667a\u80fd\u5728\u4e13\u5229\u7533\u8bf7\u4e2d\u88ab\u8ba4\u5b9a\u4e3a\u4e24\u79cd\u4ea7\u54c1\u7684\u53d1\u660e\u8005\u3002\u7f8e\u56fd\u4e13\u5229\u5546\u6807\u5c40\u3001\u82f1\u56fd\u77e5\u8bc6\u4ea7\u6743\u5c40\u548c\u6b27\u6d32\u4e13\u5229\u5c40\u62d2\u7edd\u4e86\u8fd9\u4e9b\u7533\u8bf7\uff0c\u56e0\u4e3a\u88ab\u8ba4\u53ef\u7684\u53d1\u660e\u4eba\u4e0d\u662f39\u5c81\uff1b\u4e0d\u662f\u4eba\u7c7b\u3002\u5df2\u7ecf\u9488\u5bf9\u8fd9\u4e9b\u88c1\u51b3\u4ee5\u53ca\u6fb3\u5927\u5229\u4e9a\u548c\u5fb7\u56fd\u7684\u88c1\u51b3\u63d0\u8d77\u4e0a\u8bc9\u3002\n\u7136\u800c\uff0c\u6fb3\u5927\u5229\u4e9a\u7684\u4e00\u540d\u6cd5\u5b98\u53bb\u5e74\u88c1\u5b9a\uff0c\u4eba\u5de5\u667a\u80fd\u521b\u9020\u7684\u53d1\u660e\u53ef\u4ee5\u83b7\u5f97\u4e13\u5229\u4fdd\u62a4\u3002\u5357\u975e\u53bb\u5e74\u6388\u4e88\u6cf0\u52d2\u5176\u4e2d\u4e00\u79cd\u4ea7\u54c1\u7684\u4e13\u5229\uff0c\u5e76\u6307\u51fa&#34\uff1b\u8fd9\u9879\u53d1\u660e\u662f\u7531\u4eba\u5de5\u667a\u80fd\u81ea\u4e3b\u4ea7\u751f\u7684&#34;\nEngadget\u63a8\u8350\u7684\u6240\u6709\u4ea7\u54c1\u5747\u7531\u6211\u4eec\u7684\u7f16\u8f91\u56e2\u961f\u9009\u62e9\uff0c\u72ec\u7acb\u4e8e\u6211\u4eec\u7684\u6bcd\u516c\u53f8\u3002\u6211\u4eec\u7684\u4e00\u4e9b\u6545\u4e8b\u5305\u62ec\u9644\u5c5e\u94fe\u63a5\u3002\u5982\u679c\u4f60\u901a\u8fc7\u5176\u4e2d\u4e00\u4e2a\u94fe\u63a5\u8d2d\u4e70\u4e1c\u897f\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u83b7\u5f97\u4f1a\u5458\u4f63\u91d1\u3002\n\u7531\u4e8e\u60a8\u7684\u9690\u79c1\u504f\u597d\uff0c\u6b64\u5185\u5bb9\u4e0d\u53ef\u7528\u3002\u5728\u6b64\u5904\u66f4\u65b0\u8bbe\u7f6e\uff0c\u7136\u540e\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u4ee5\u67e5\u770b\u5b83\u3002", "note_en": "The US Copyright Office has once again  denied an effort to copyright a work of art that was created by an  artificial intelligence system. Dr. Stephen Thaler attempted to copyright a piece of art titled  A Recent Entrance to Paradise, claiming in a second request for reconsideration of a 2019 ruling that the USCO&#39;s \u201chuman authorship\u201d requirement was unconstitutional.\n In its latest ruling, which was spotted by   The Verge, the agency accepted that the work was created by an AI, which Thaler calls the Creativity Machine. Thaler applied to register the work as &#34;as a work-for-hire to the owner of the Creativity Machine.\u201d\n  However, the office said that current copyright law only offers protections to &#34;the fruits of intellectual labor\u201d that \u201care founded in the creative powers of the [human] mind.\u201d As such, a copyrighted work &#34;must be created by a human being\u201d and the office says it won&#39;t register works \u201cproduced by a machine or mere mechanical process\u201d that lack intervention or creative input from a human author.\n The agency said Thaler failed to provide evidence that  A Recent Entrance to Paradise is the result of human authorship. It also stated he was unable to convince the USCO&#39;s &#34;to depart from a century of copyright jurisprudence&#34; \u2014 in other words, to change the rules.\n The ruling notes that courts at several levels, including the Supreme Court, have &#34;uniformly limited copyright protection to creations of human authors&#34; and that lower courts have &#34;repeatedly rejected attempts to extend copyright protection to non-human creations,&#34; such as for  photos taken by monkeys.\n Thaler has put copyright and patent laws to the test in a number of countries. He has attempted to have an AI called DABUS recognized as the inventor of two products in patent applications. The  US Patent and Trademark Office,  UK Intellectual Property Office and European Patent Office rejected the applications because the credited inventor wasn&#39;t human. Appeals  have been filed against those rulings and ones in Australia and Germany.\n However, a judge in Australia ruled last year that AI-created inventions  can qualify for patent protection. South Africa  granted Thaler a patent for one of the products last year and noted &#34;the invention was autonomously generated by an artificial intelligence.&#34;\n   All products recommended by Engadget are selected by our editorial team, independent of our parent company. Some of our stories include affiliate links. If you buy something through one of these links, we may earn an affiliate commission.\n   This content is not available due to your privacy preferences.  Update your settings here, then reload the page to see it.", "posttime": "2022-02-23 21:25:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u827a\u672f,\u7f8e\u56fd,\u4eba\u5de5\u667a\u80fd,\u5b98\u5458,ai", "title": "\u6839\u636e\u7f8e\u56fd\u5b98\u5458\u7684\u8bf4\u6cd5\uff0c\u4f60\u4e0d\u80fd\u4e3a\u4eba\u5de5\u667a\u80fd\u521b\u9020\u7684\u827a\u672f\u7248\u6743", "title_en": "You can\u2019t copyright AI-created art, according to US officials", "transed": 1, "url": "https://www.engadget.com/us-copyright-office-art-ai-creativity-machine-190722809.html", "via": "", "real_tags": ["\u827a\u672f", "\u7f8e\u56fd", "\u4eba\u5de5\u667a\u80fd", "\u5b98\u5458", "ai"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074722, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u84b8\u6c7d\u7532\u677f\u7684\u9a8c\u8bc1\u4e4b\u821e\u4ecd\u5728\u7ee7\u7eed\u3002\u7ecf\u8fc7\u4eca\u5929\u7684\u5927\u529b\u63a8\u52a8\uff0c\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u901a\u8fc7\u4e86720\u4e2a\u6807\u9898\uff08\u64b0\u5199\u672c\u6587\u65f6\u4e3a725\u4e2a\uff09\u3002\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a\n\u76ee\u524d\uff0c\u6211\u4eec\u5e73\u5747\u6bcf\u5929\u670922\u4e2a\u65b0\u7684\u7ecf\u9a8c\u8bc1\u7684\u6807\u9898\u6dfb\u52a0\u5230\u8be5\u5217\u8868\u4e2d\u3002\nMuv Luv\u66ff\u4ee3\u65b9\u6848(\u30de\u30d6\u30e9\u30f4 \u30aa\u30eb\u30bf\u30cd\u30a4\u30c6\u30a3\u30f4)\nBoilingSteam\u5141\u8bb8\u60a8\u514d\u8d39\u8bbf\u95ee\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u4f46\u64b0\u5199\u6587\u7ae0\u662f\u4e00\u9879\u6301\u7eed\u7684\u6295\u8d44\u3002\u6211\u4eec\u6ca1\u6709&#39\uff1b\u4e0d\u8981\u4f7f\u7528\u5e7f\u544a\u6216\u8d5e\u52a9\uff0c\u5e2e\u52a9\u6211\u4eec\u901a\u8fc7Patreon\u6216LiberPay\u6350\u6b3e\uff0c\u4f7f\u6211\u4eec\u7684\u6d3b\u52a8\u53ef\u6301\u7eed\u53d1\u5c55\uff0c\u5982\u679c\u4f60\u559c\u6b22\u533f\u540d\u6350\u6b3e\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u6211\u4eec\u7684\u65f6\u4e8b\u901a\u8baf\u3001RSS\u8ba2\u9605\u6e90\u3001\u4e73\u9f7f\u8c61\u6863\u6848\u6216Twitter\u8ba2\u9605\u6e90\u4e86\u89e3\u6211\u4eec\u7684\u5de5\u4f5c\u3002\u6211\u4eec\u8fd8\u6709Peertube\u3001Youtube\u548cLBRY\u9891\u9053\u3002\u5982\u679c\u4f60&#39\uff1bI\u2019\u6211\u60f3\u804a\u5929\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728#boilingsteam:matrix\u4e0a\u627e\u5230\u6211\u4eec\u3002\u7ec4\u7ec7\u3002\uff08\u4ec0\u4e48\u662f\u77e9\u9635\uff1f\uff09", "note_en": "The verification dance continues for the  Steam Deck. We have now passed  720 titles (725 at the time of writing) after a big push today. Now you have, split in two categories:\n      Right now we have on average  22 new validated titles added on a daily basis to that list.\n       Muv-Luv Alternative (\u30de\u30d6\u30e9\u30f4 \u30aa\u30eb\u30bf\u30cd\u30a4\u30c6\u30a3\u30f4)\n   BoilingSteam lets you access our content for free, but writing articles is a constant investment. We don&#39;t use ads or sponsporship, help us make our activities sustainable by donating via   Patreon or   LiberaPay if you prefer it anonymous. You can follow what we do via our   newsletter, our   RSS feed, our   Mastodon profile or our   Twitter feed. We also have   Peertube,   Youtube and   LBRY channels. If you&#39;d like to chat, you can also find us on #boilingsteam:matrix.org. ( what is Matrix?)", "posttime": "2022-02-23 21:24:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u53ef\u73a9,playable,\u6807\u9898", "title": "\u73b0\u5728\u5df2\u6709720\u591a\u4e2a\u6e38\u620f\uff08\u53ef\u73a9\u4e14\u7ecf\u8fc7\u9a8c\u8bc1\uff09\u51c6\u5907\u5c31\u7eea", "title_en": "More Than 720 Games (Playable and Verified) Ready for the Steam Deck Now", "transed": 1, "url": "https://boilingsteam.com/more-than-720-games-playable-and-verified-ready-for-the-steam-deck-now/", "via": "", "real_tags": ["\u6e38\u620f", "\u53ef\u73a9", "playable", "\u6807\u9898"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074721, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7b2c\u4e8c\u5927\u52a0\u5bc6\u7f51\u7edc\u4ee5\u592a\u574a\uff08Ethereum\uff09\u6240\u53d6\u5f97\u7684\u6210\u529f\u8fdc\u8fdc\u8d85\u51fa\u4e86\u5176\u521b\u59cb\u4eba\u7ef4\u5854\u5229\u514b\u00b7\u5df4\u7279\u6797\uff08Vitalik Buterin\uff09\u57282013\u5e74\u79cb\u5929\u5341\u51e0\u5c81\u65f6\u6700\u521d\u6784\u601d\u667a\u80fd\u5408\u7ea6\u5e73\u53f0\u65f6\u7684\u60f3\u8c61\u3002\n\u5b83\u7684\u5e02\u503c\u8d85\u8fc73000\u4ebf\u7f8e\u5143\uff0c\u53d7\u5230\u9a6c\u514b\u00b7\u5e93\u73ed\uff08Mark Cuban\uff09\u7b49\u4eba\u7684\u6b22\u8fce\uff0c\u662f\u8bb8\u591a\u52a0\u5bc6\u65b0\u8d8b\u52bf\u7684\u4e3b\u5bfc\u529b\u91cf\uff0c\u6bd4\u59822017\u5e74\u7b2c\u4e00\u6b21\u5927\u89c4\u6a21\u52a0\u5bc6\u70ed\u6f6e\u4e2d\u7684\u9996\u6b21\u786c\u5e01\u53d1\u884c\u548c\u4eca\u5929\u7684\u4e0d\u53ef\u66ff\u4ee3\u4ee3\u5e01\uff08NFT\uff09\u3002", "note_en": "Ethereum, the second-largest crypto network, has achieved success well beyond what its creator, Vitalik Buterin, could have imagined when he initially thought up the smart contract platform as a teenager in the fall of 2013.\n It has a market cap of over $300 billion, it\u2019s become popular with the likes of  Mark Cuban, and it\u2019s the leading force in many of the new trends in crypto, such as initial coin offerings back in the first big crypto mania in 2017 and non-fungible tokens (NFTs) today.", "posttime": "2022-02-23 21:19:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee5\u592a,dao,\u521b\u59cb\u4eba", "title": "\u662f\u8c01\u5728\u4ee5\u592a\u574a\u4e0a\u780d\u4e86\u5200\uff1f\u4ee5\u4e0b\u662f\u6211\u4eec\u5982\u4f55\u8df3\u8fc7\u4e00\u4e2a\u5173\u952e\u6b65\u9aa4", "title_en": "Who Hacked the DAO on Ethereum? Here\u2019s How We Jumped Past One Critical Step", "transed": 1, "url": "https://medium.com/@laurashin/who-hacked-the-dao-on-ethereum-heres-how-we-jumped-past-one-critical-step-60aec489a127", "via": "", "real_tags": ["\u4ee5\u592a", "dao", "\u521b\u59cb\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074720, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u65b0\u516c\u5e03\u7684\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u6570\u636e\u663e\u793a\uff0c2021\u7684\u6d88\u8d39\u8005\u5bf9\u6b3a\u8bc8\u884c\u4e3a\u7684\u635f\u5931\u8d85\u8fc758\u4ebf\u7f8e\u5143\uff0c\u6bd4\u4e0a\u4e00\u5e74\u589e\u52a0\u4e8670%\u4ee5\u4e0a\u3002\nFTC\u53bb\u5e74\u6536\u5230\u4e86\u6765\u81ea280\u591a\u4e07\u6d88\u8d39\u8005\u7684\u6b3a\u8bc8\u62a5\u544a\uff0c\u6700\u5e38\u62a5\u544a\u7684\u7c7b\u522b\u518d\u6b21\u662f\u9a97\u5b50\u6b3a\u8bc8\uff0c\u5176\u6b21\u662f\u7f51\u8d2d\u6b3a\u8bc8\u3002\n\u5956\u54c1\u3001\u62bd\u5956\u548c\u5f69\u7968\uff1b\u4e92\u8054\u7f51\u670d\u52a1\uff1b\u800c\u5546\u4e1a\u548c\u5c31\u4e1a\u673a\u4f1a\u5219\u56ca\u62ec\u4e86\u4e94\u5927\u6b3a\u8bc8\u7c7b\u522b\u3002\n\u5728\u6d88\u8d39\u8005\u62a5\u544a\u7684\u635f\u5931\u4e2d\uff0c\u53bb\u5e74\u62a5\u544a\u7684\u8d85\u8fc723\u4ebf\u7f8e\u5143\u7684\u635f\u5931\u662f\u7531\u9a97\u5b50\u6b3a\u8bc8\u9020\u6210\u7684\uff0c\u800c\u57282020\u5e74\uff0c\u8fd9\u4e00\u6570\u5b57\u4e3a12\u4ebf\u7f8e\u5143\uff0c\u800c\u5728\u6d88\u8d39\u8005\u62a5\u544a\u7684\u635f\u5931\u4e2d\uff0c\u7f51\u8d2d\u4ece2020\u5e74\u76842.46\u4ebf\u7f8e\u5143\u589e\u52a0\u5230\u4e86\u7ea63.92\u4ebf\u7f8e\u5143\u3002\nFTC\u7684\u6d88\u8d39\u8005\u54e8\u5175\u7f51\u7edc\uff08Consumer Sentinel Network\uff0cSentinel\uff09\u662f\u4e00\u4e2a\u76f4\u63a5\u4ece\u6d88\u8d39\u8005\u3001\u8054\u90a6\u3001\u5dde\u548c\u5730\u65b9\u6267\u6cd5\u673a\u6784\u3001\u66f4\u597d\u7684\u5546\u4e1a\u5c40\u3001\u884c\u4e1a\u6210\u5458\u548c\u975e\u8425\u5229\u7ec4\u7ec7\u63a5\u6536\u62a5\u544a\u7684\u6570\u636e\u5e93\u3002\u73b0\u5728\u670925\u4e2a\u5dde\u5411\u54e8\u5175\u90e8\u961f\u6350\u6b3e\u3002\u6765\u81ea\u5168\u56fd\u5404\u5730\u5173\u4e8e\u6d88\u8d39\u8005\u4fdd\u62a4\u95ee\u9898\u7684\u62a5\u544a\u662fFTC\u8c03\u67e5\u7684\u4e00\u4e2a\u5173\u952e\u8d44\u6e90\uff0cFTC\u7684\u8c03\u67e5\u65e8\u5728\u963b\u6b62\u975e\u6cd5\u6d3b\u52a8\uff0c\u5e76\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u5411\u6d88\u8d39\u8005\u63d0\u4f9b\u9000\u6b3e\u3002\n\u54e8\u5175\u57282021\u6536\u5230\u4e86570\u4e07\u591a\u4efd\u62a5\u544a\uff1b\u5176\u4e2d\u5305\u62ec\u4e0a\u6587\u8be6\u8ff0\u7684\u6b3a\u8bc8\u62a5\u544a\uff0c\u4ee5\u53ca\u8eab\u4efd\u76d7\u7a83\u62a5\u544a\u548c\u4e0e\u5176\u4ed6\u6d88\u8d39\u8005\u95ee\u9898\u6709\u5173\u7684\u6295\u8bc9\uff0c\u5982\u4e0e\u4fe1\u7528\u5c40\u3001\u94f6\u884c\u548c\u8d37\u6b3e\u4eba\u7684\u95ee\u9898\u30022021\uff0c\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u6536\u5230\u4e86\u8fd1140\u4e07\u4efd\u8eab\u4efd\u76d7\u7a83\u7684\u62a5\u544a\u3002\n\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u5c06\u901a\u8fc7Sentinel\u6536\u5230\u7684\u62a5\u544a\u4f5c\u4e3a\u5176\u8bb8\u591a\u6267\u6cd5\u8c03\u67e5\u7684\u8d77\u70b9\uff0c\u8be5\u673a\u6784\u8fd8\u4e0e\u5927\u7ea62800\u540d\u8054\u90a6\u3001\u5dde\u3001\u5730\u65b9\u548c\u56fd\u9645\u6267\u6cd5\u4e13\u4e1a\u4eba\u5458\u5206\u4eab\u8fd9\u4e9b\u62a5\u544a\u3002\u867d\u7136\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u4e0d\u5e72\u9884\u4e2a\u4eba\u6295\u8bc9\uff0c\u4f46\u54e8\u5175\u62a5\u544a\u662f\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u6267\u6cd5\u4efb\u52a1\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\nFTC\u5728FTC\u7684\u6570\u636e\u5206\u6790\u7f51\u7ad9\u4e0a\u53ef\u4ee5\u83b7\u5f972021\u7684\u62a5\u544a\u3002gov/exploredata\u3002\u90a3\u91cc\u7684\u6570\u636e\u4eea\u8868\u76d8\u5c06\u62a5\u544a\u5206\u4e3a\u591a\u4e2a\u7c7b\u522b\uff0c\u5305\u62ec\u5dde\u548c\u5927\u90fd\u4f1a\u5730\u533a\uff0c\u5e76\u63a2\u7d22\u6b3a\u8bc8\u62a5\u544a\u7684\u591a\u4e2a\u5b50\u7c7b\u522b\u3002", "note_en": "Newly released   Federal Trade Commission data\u00a0shows that consumers reported losing more than $5.8 billion to fraud in 2021, an increase of more than 70 percent over the previous year.\n The FTC received fraud reports from more than 2.8 million consumers last year, with the most commonly reported category once again being imposter scams, followed by online shopping scams.\n Prizes, sweepstakes, and lotteries; internet services; and business and job opportunities rounded out the top five fraud categories.\n Of the losses reported by consumers, more than $2.3 billion of losses reported last year were due to imposter scams\u2014up from $1.2 billion in 2020, while online shopping accounted for about $392 million in reported losses from consumers\u2014up from $246 million in 2020.\n The FTC\u2019s Consumer Sentinel Network (Sentinel) is a database that receives reports directly from consumers, as well as from federal, state, and local law enforcement agencies, the Better Business Bureau, industry members, and non-profit organizations. Twenty-five states now contribute to Sentinel. Reports from around the country about consumer protection issues are a key resource for FTC investigations that stop illegal activities and, when possible, provide refunds to consumers.\n Sentinel received more than 5.7 million reports in 2021; these include the fraud reports detailed above, as well as identity theft reports and complaints related to other consumer issues, such as problems with credit bureaus and banks and lenders. In 2021, there were nearly 1.4 million reports of identity theft received by the FTC.\n The FTC uses the reports it receives through Sentinel as the starting point for many of its law enforcement investigations, and the agency also shares these reports with approximately 2,800 federal, state, local, and international law enforcement professionals. While the FTC does not intervene in individual complaints, Sentinel reports are a vital part of the agency\u2019s law enforcement mission.\n A full breakdown of reports received in 2021 is now available on the FTC\u2019s data analysis site at  ftc.gov/exploredata. The data dashboards there break down the reports across a numbers of categories, including by state and metropolitan area, as well as exploring a number of subcategories of fraud reports.", "posttime": "2022-02-23 17:09:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u6536\u5230,fraud,\u62a5\u544a", "title": "FTC\u57282021\u5e74\u5ea6\u6536\u5230\u6765\u81ea\u6d88\u8d39\u8005\u7684280\u4e07\u4efd\u6b3a\u8bc8\u62a5\u544a\uff0c\u540c\u6bd4\u589e\u957f70%\u4e0e2020\u3002", "title_en": "FTC Received 2.8 Million Fraud Reports From Consumers in 2021, Up 70% vs. 2020", "transed": 1, "url": "https://www.ftc.gov/news-events/press-releases/2022/02/new-data-shows-ftc-received-28-million-fraud-reports-consumers", "via": "", "real_tags": ["2020", "\u6536\u5230", "fraud", "\u62a5\u544a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074719, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u4f9d\u8d56\u60a8\u7684\u652f\u6301\uff1a\u672c\u7f51\u7ad9\u4e3b\u8981\u7531\u5e7f\u544a\u652f\u6301\u3002\u5728\u8fc7\u53bb\u768416\u5e74\u91cc\uff0c\u5e7f\u544a\u8ba9\u8fd9\u4e2a\u7f51\u7ad9\u5f97\u4ee5\u7ef4\u6301\u3002\u6211\u4eec\u5c3d\u6700\u5927\u52aa\u529b\u786e\u4fdd\u53ea\u663e\u793a\u5e72\u51c0\u3001\u76f8\u5173\u7684\u5e7f\u544a\uff0c\u5f53\u53d1\u73b0\u4efb\u4f55\u6076\u610f\u5e7f\u544a\u65f6\uff0c\u6211\u4eec\u4f1a\u5c3d\u5feb\u5c06\u5176\u5220\u9664\u3002\u5982\u679c\u60a8\u60f3\u67e5\u770b\u6ca1\u6709\u5e7f\u544a\u7684\u7f51\u7ad9\uff0c\u540c\u65f6\u4ecd\u7136\u652f\u6301\u6211\u4eec\u7684\u5de5\u4f5c\uff0c\u8bf7\u8003\u8651\u6211\u4eec\u7684\u5e7f\u544a\u514d\u8d39PuroNox\u6ea2\u4ef7\u3002\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8d1d\u5b9d\u8003\u8651\u5c0f\u8d39\u3002Linux\u5185\u6838&#39\uff1b\u6700\u8fd1\uff0cWireGuard fame\u516c\u53f8\u7684\u6770\u68ee\u00b7\u591a\u6069\u83f2\u5c14\u5fb7\uff08Jason Donenfeld\uff09\u9886\u5bfc\u4e86\u4e00\u7cfb\u5217\u7684\u6539\u8fdb\u3002", "note_en": "We Rely On Your Support: This site is primarily supported by advertisements.  Ads are what have allowed this site to be maintained for the past 16 years. We do our best to ensure only clean, relevant ads are shown, when any nasty ads are detected, we work to remove them ASAP. If you would like to view the site without ads while still supporting our work,  please consider  our ad-free Phoronix Premium. You can also consider  a tip via PayPal.   The Linux kernel&#39;s random number generator code has been seeing a number of improvements recently led by Jason Donenfeld of WireGuard fame.\r   With Linux 5.17 there is  replacing SHA1 with BLAKE2s in the random code among other performance and security improvements. More improvements to the &#34;random&#34; code is on the way with Linux 5.18.\r    Donenfeld has been preparing many more random/RNG improvements intended for introduction in Linux 5.18 when that merge window kicks off in late March.\r    One exciting change to also note is the  getrandom() system call may be a hell of a lot faster with the new kernel. The getrandom() call for obtaining random bytes is yielding much faster performance with the latest code in development. Intel&#39;s kernel test robot is seeing  an 8450% improvement with the stress-ng getrandom() benchmark. Yes, an 8450% improvement.\r   Donenfeld noted in a message to Phoronix that the change should stem from  random: use simpler fast key erasure flow on per-cpu keys. Donenfeld&#39;s change explained, &#34; Rather than the clunky NUMA full ChaCha state system we had prior, this commit is closer to the original &#34;fast key erasure RNG&#34; proposal from, by simply treating ChaCha keys on a per-cpu basis...The result is a bit simpler than before and has fewer foot guns. The init time state machine also gets a lot simpler as we don&#39;t need to wait for workqueues to come online and do deferred work. And the multi-core performance should be increased significantly, by virtue of having hardly any locking on the fast path.&#34;\r   The most dramatic gains will be seen on high core count servers (such as this Intel testing) but even modern high core count desktops should stand to benefit nicely from these forthcoming changes.", "posttime": "2022-02-23 15:09:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u4ee3\u7801,getrandom,\u5e7f\u544a", "title": "Linux\u7684getrandom\uff08\uff09\u5728\u6700\u65b0\u4ee3\u7801\u4e2d\u63d0\u9ad8\u4e868450%", "title_en": "Linux's getrandom() Sees a 8450% Improvement with Latest Code", "transed": 1, "url": "https://www.phoronix.com/scan.php?page=news_item&px=Linux-getrandom-8450p", "via": "", "real_tags": ["linux", "\u4ee3\u7801", "getrandom", "\u5e7f\u544a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074717, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7279\u65af\u62c9\u9996\u5e2d\u6267\u884c\u5b98\u57c3\u9686\u00b7\u9a6c\u65af\u514b&#39\uff1bCNBC\u62a5\u9053\uff0c\u7f8e\u56fd\u5f8b\u5e08\u6307\u63a7\u7f8e\u56fd\u8bc1\u5238\u4ea4\u6613\u59d4\u5458\u4f1a\uff08SEC\uff09\u6216\u6cc4\u9732\u8054\u90a6\u8c03\u67e5\u4fe1\u606f\uff0c\u4ee5\u62a5\u590d\u4ed6&#34;\u8d8a\u6765\u8d8a\u6e05\u695a\u7684\u662f\uff0c\u8be5\u59d4\u5458\u4f1a\u662f\u4e3a\u4e86\u62a5\u590d\u6211\u7684\u5ba2\u6237\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6700\u8fd1\u884c\u4f7f\u4e86\u7b2c\u4e00\u4fee\u6b63\u6848\u7684\u6743\u5229\uff0c\u5728\u516c\u5f00\u8bc9\u8bbc\u4e2d\u6279\u8bc4\u8be5\u59d4\u5458\u4f1a\uff0c\u5e76\u5411\u672c\u6cd5\u9662\u8bf7\u6c42\u6551\u6d4e\uff1b\u9a6c\u65af\u514b\u5f8b\u5e08\u4e9a\u5386\u514b\u65af\u00b7\u65af\u76ae\u7f57\u8bf4\u3002\n\u5b83&#39\uff1b\u8fd9\u662f\u9a6c\u65af\u514b\u57282018\u5e74\u4e0e\u7f8e\u56fd\u8bc1\u5238\u4ea4\u6613\u59d4\u5458\u4f1a\uff08SEC\uff09\u7684\u6301\u7eed\u4e89\u7aef\u4e2d\u7684\u6700\u65b0\u4e00\u67aa\u3002\u5f53\u65f6\u9a6c\u65af\u514b\u8868\u793a\uff0c\u4ed6\u5df2\u83b7\u5f97\u4e86\u4ee5\u6bcf\u80a1420\u7f8e\u5143\u7684\u4ef7\u683c\u6536\u8d2d\u7279\u65af\u62c9\u7684\u8d44\u91d1\u2014\u2014\u8bb8\u591a\u4eba\uff08\u5305\u62ecSEC\uff09\u8ba4\u4e3a\u8fd9\u662f\u4ed6\u8bd5\u56fe\u5f00\u73a9\u7b11\u3002SEC\u4e3a\u6b64\u5206\u522b\u5bf9\u7279\u65af\u62c9\u548c\u9a6c\u65af\u514b\u5904\u4ee52000\u4e07\u7f8e\u5143\u7684\u7f5a\u6b3e\uff0c\u5e76\u8feb\u4f7f\u9a6c\u65af\u514b\u8f9e\u53bb\u8463\u4e8b\u957f\u4e00\u804c\u81f3\u5c11\u4e09\u5e74\u3002\u7279\u65af\u62c9\u8fd8\u5fc5\u987b\u5b9e\u65bd\u76d1\u63a7\u9e9d\u9999\u7684\u7cfb\u7edf&#39\uff1bs\u5728Twitter\u548c\u5176\u4ed6\u5a92\u4f53\u4e0a\u53d1\u8868\u4e86\u5173\u4e8e\u8be5\u516c\u53f8\u7684\u58f0\u660e\u3002\n\u7136\u800c\uff0c\u9a6c\u65af\u514b\u6700\u8fd1\u4e00\u76f4\u5728\u53cd\u5bf9\u8fd9\u4e9b\u89c4\u5b9a\u3002\u672c\u6708\u65e9\u4e9b\u65f6\u5019\uff0c\u4ed6\u6307\u8d23SEC\u8fdb\u884c\u4e86&#34\uff1b\u9a9a\u6270\u8fd0\u52a8&#34\uff1b\u548c&#34\uff1b\u4ee4\u4eba\u7a92\u606f&#34\uff1b\u62e5\u6709\u7b2c\u4e00\u4fee\u6b63\u6848\u7684\u8a00\u8bba\u81ea\u7531\u6743\u3002SEC\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u56de\u5e94\u79f0\uff0c\u76d1\u77632018\u5e74\u548c\u89e3\u534f\u8bae\u7684\u6cd5\u9662\u5b9e\u9645\u4e0a\u8981\u6c42\u5176\u4e0e\u7279\u65af\u62c9\u8fdb\u884c\u9891\u7e41\u6838\u5bf9\u3002\u5b83\u8fd8\u9a73\u65a5\u4e86\u9a6c\u65af\u514b&#39\uff1b\u8be5\u516c\u53f8\u7684\u53e6\u4e00\u9879\u6295\u8bc9\u79f0\uff0c\u5b83\u6b63\u5728\u6309\u7167\u627f\u8bfa\u5411\u80a1\u4e1c\u652f\u4ed84000\u4e07\u7f8e\u5143\u7684\u7f5a\u6b3e\u3002\n\u9e9d\u9999&#39\uff1b\u7f8e\u56fd\u5f8b\u5e08\u58f0\u79f0\uff0c\u81f3\u5c11\u6709\u4e00\u540dSEC\u6210\u5458\u6cc4\u9732\u4e86#34\uff1b\u6709\u5173\u5176\u8c03\u67e5\u7684\u67d0\u4e9b\u4fe1\u606f\uff0c&#34\uff1b\u4f46\u5b83\u6ca1\u6709&#39\uff1b\u4e0d\u8981\u8bf4\u662f\u8c01\u6216\u54ea\u4e9b\u4fe1\u606f\u3002\u7279\u65af\u62c9\u5728\u51762021\u5b63\u5ea6\u4e1a\u7ee9\u62a5\u544a\u4e2d\u900f\u9732\uff0cSEC\u4f20\u5524\u4e86\u8be5\u516c\u53f8\u548cMask\uff0c\u5bfb\u6c42\u5173\u4e8e\u4ed6\u4eec\u548c39\u7684\u4fe1\u606f\u3002\u6211\u4eec\u9075\u5b882018\u5e74\u7684\u548c\u89e3\u534f\u8bae\u3002\n\u4e00\u5e74\u540e\uff0c\u9a6c\u65af\u514b\u5728\u63a8\u7279\u4e0a\u53d1\u5e03\u4e86\u6709\u5173\u7279\u65af\u62c9\u6c7d\u8f66\u751f\u4ea7\u7684\u4fe1\u606f\uff0c\u4f46\u8be5\u4fe1\u606f\u5e76\u975e&#39\uff1bt\u7ecf\u516c\u53f8\u6279\u51c6&#39\uff1bs&#34\uff1b\u62ab\u9732\u5f8b\u5e08&#34; \u4ed6\u7684\u5f8b\u5e08\u4e5f\u6307\u8d23SEC\u4fb5\u72af\u4e86\u4ed6\u7684\u8a00\u8bba\u81ea\u7531\u6743\u3002\u9a6c\u65af\u514b\u548c\u7279\u65af\u62c9\u6700\u7ec8\u540c\u610f\u4e86\u4e00\u9879\u4fee\u6539\u540e\u7684\u548c\u89e3\u534f\u8bae\uff0c\u8981\u6c42\u4ed6\u5728\u4efb\u4f55\u63a8\u7279\u6216\u5176\u4ed6\u6765\u81ea&#34\uff1b\u7ecf\u9a8c\u4e30\u5bcc\u7684\u8bc1\u5238\u5f8b\u5e08&#34;\nEngadget\u63a8\u8350\u7684\u6240\u6709\u4ea7\u54c1\u5747\u7531\u6211\u4eec\u7684\u7f16\u8f91\u56e2\u961f\u9009\u62e9\uff0c\u72ec\u7acb\u4e8e\u6211\u4eec\u7684\u6bcd\u516c\u53f8\u3002\u6211\u4eec\u7684\u4e00\u4e9b\u6545\u4e8b\u5305\u62ec\u9644\u5c5e\u94fe\u63a5\u3002\u5982\u679c\u4f60\u901a\u8fc7\u5176\u4e2d\u4e00\u4e2a\u94fe\u63a5\u8d2d\u4e70\u4e1c\u897f\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u83b7\u5f97\u4f1a\u5458\u4f63\u91d1\u3002\n\u7531\u4e8e\u60a8\u7684\u9690\u79c1\u504f\u597d\uff0c\u6b64\u5185\u5bb9\u4e0d\u53ef\u7528\u3002\u5728\u6b64\u5904\u66f4\u65b0\u8bbe\u7f6e\uff0c\u7136\u540e\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u4ee5\u67e5\u770b\u5b83\u3002", "note_en": "Tesla CEO Elon Musk&#39;s lawyer has accused the Securities and Exchange Commission (SEC) or leaking information about a federal probe to retaliate against him,   CNBC has reported. &#34;It has become clearer and clearer that the Commission is out to retaliate against my clients for exercising their First Amendment rights\u2014most recently by criticizing the Commission on the public docket and by petitioning this Court for relief,&#34; said Musk attorney Alex Spiro.\n It&#39;s the latest shot fired by Musk in his ongoing dispute with the SEC that started in 2018 when he said that he had secured funding for a private buyout of Tesla at $420 a share \u2014 something many ( including the SEC) interpreted as an attempt at a weed joke. The SEC fined Tesla and Musk $20 million each over that and forced Musk to step down as chairman for at least three years. Tesla also had to implement a system for monitoring Musk&#39;s statements about the company on Twitter and other media.\n  Musk has been chafing against those rules lately, however. Earlier this month he  accused the SEC of conducting a &#34;harassment campaign,&#34; and &#34;stifling&#34; has First Amendment free speech rights. The SEC  responded earlier this week, saying its frequent check-ins with Tesla were effectively required by the court overseeing the 2018 settlement. It also rebutted Musk&#39;s other complaint, saying that it was making progress disbursing the $40 million fine to shareholders as it had promised.\n Musk&#39;s lawyers alleged that at least one SEC member had leaked &#34;certain information regarding its investigation,&#34; but it didn&#39;t say who or which information. Tesla revealed in its 2021 Q4 earnings report that the SEC subpoenaed the company and Musk, seeking information on how they&#39;re complying with the 2018 settlement.\n Musk previously ran afoul of the 2018 settlement a year later after tweeting information about Tesla vehicle production that wasn&#39;t approved by the company&#39;s &#34;disclosure counsel.&#34; His lawyers accused the SEC of violating his free speech rights then, too. Musk and Tesla eventually  agreed to a revised settlement that required him to get approval in advance for any tweets or other communication from an &#34;experienced securities lawyer.&#34;\n   All products recommended by Engadget are selected by our editorial team, independent of our parent company. Some of our stories include affiliate links. If you buy something through one of these links, we may earn an affiliate commission.\n   This content is not available due to your privacy preferences.  Update your settings here, then reload the page to see it.", "posttime": "2022-02-22 21:20:22", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u57c3\u9686\u00b7\u9a6c\u65af\u514b,\u9a6c\u65af\u514b,musk,sec", "title": "\u57c3\u9686\u00b7\u9a6c\u65af\u514b\u6307\u63a7SEC\u6cc4\u9732\u4e86\u9488\u5bf9\u4ed6\u7684\u4fe1\u606f", "title_en": "Elon Musk accuses the SEC of leaking information against him", "transed": 1, "url": "https://www.engadget.com/elon-musk-accuses-the-sec-of-leaking-information-to-retaliate-against-him-101031796.html", "via": "", "real_tags": ["\u57c3\u9686\u00b7\u9a6c\u65af\u514b", "\u9a6c\u65af\u514b", "musk", "sec"]}]