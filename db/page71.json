[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073687, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u8fc7\u53bb\u8ba8\u538c\u9634\u6781\u5c04\u7ebf\u7ba1\u3002\u5f53\u6211\u8fd8\u662f\u4e2a\u5b69\u5b50\u7684\u65f6\u5019\uff0c\u5728\u6b27\u6d32\uff0c\u6bcf\u6837\u4e1c\u897f\u90fd\u572850Hz\u7684\u9891\u7387\u4e0b\u95ea\u70c1\uff0c\u6216\u8005\u572815.625KHz\u7684\u9891\u7387\u4e0b\u53d1\u51fa\u54cd\u4eae\u7684\u53e3\u54e8\u58f0\uff08\u90a3\u65f6\u6211\u8fd8\u80fd\u542c\u5230\uff09\u3002CRT\u770b\u8d77\u6765\u5f88\u7c97\u7cd9\uff0c\u662f\u9600\u95e8\u65f6\u4ee3\u7684\u201c\u7535\u5b50\u6b8b\u66b4\u201d\u88c5\u7f6e\u3002\u5b83\u4eec\u6c89\u91cd\u3001\u7cbe\u81f4\u3001\u626d\u66f2\u3001\u6a21\u7cca\uff0c\u8fd8\u5439\u7740\u53e3\u54e8\uff0c\u5f53\u4eba\u4eec\u4e0d\u5fd9\u7740\u5185\u7206\u548c\u5728\u5468\u56f4\u6563\u5e03\u73bb\u7483\u788e\u7247\u65f6\uff0c\u5b83\u4eec\u4f1a\u7ed9\u4eba\u7535\u51fb\u3002\n\u5f53\u6211\u770b\u7535\u5f71\u300a\u5df4\u897f\u300b\u65f6\uff0c\u6211\u8bb0\u5f97\u6211\u5bf9\u5230\u5904\u66b4\u9732\u7684CRT\u611f\u5230\u7126\u8651\u2014\u2014\u4f3c\u4e4e\u6211\u662f\u90a3\u79cd\u66f4\u62c5\u5fc3\u6709\u4eba\u89e6\u6478\u9633\u6781\u6216\u7535\u5b50\u67aa\u7684\u5b69\u5b50\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u6240\u751f\u6d3b\u7684\u6781\u6743\u5b98\u50da\u4e16\u754c\u3002\ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f \u548c\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u79bb\u9898\u4e86\u3002\n\u73b0\u5728\u5230\u4e8620\u4e16\u7eaa20\u5e74\u4ee3\uff0c\u9634\u6781\u5c04\u7ebf\u7ba1\u51e0\u4e4e\u6d88\u5931\u4e86\u3002\u6211\u4eec\u6709\u60ca\u4eba\u7684\u5e73\u677fLCD\u548cOLED\u5c4f\u5e55\u3002\u4efb\u4f55\u4e1c\u897f\u90fd\u4e0d\u4f1a\u95ea\u70c1\uff0c\u6240\u6709\u4e1c\u897f\u90fd\u662f\u9488\u5c16\u3001\u6570\u767e\u4e07\u50cf\u7d20\u7684\u5206\u8fa8\u7387\uff0c\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u4f1a\u53d1\u51fa\u545c\u545c\u58f0\uff08\u9664\u4e86\u6211\uff09\uff0c\u5bf9\u4e8e\u6211\u4eec\u8fd9\u4e9b\u5e74\u9f84\u8db3\u591f\u5927\u3001\u80fd\u591f\u8bb0\u4f4f\u7eff\u8272\u5c4f\u5e55\u8ba1\u7b97\u7684\u4eba\uff08\u4f46\u8db3\u591f\u5e74\u8f7b\uff0c\u4ecd\u7136\u80fd\u770b\u5230\u7ec6\u8282\uff09\u6765\u8bf4\uff0c\u663e\u793a\u751f\u6d3b\u662f\u975e\u5e38\u4e0d\u53ef\u601d\u8bae\u7684\u3002\n\u4f46\u662f\uff0c\u8d70\u5411\u66f4\u597d\u7684\u9053\u8def\u8fdc\u79bb\u4e86\u53ef\u63a5\u8fd1\u6027\uff1a\u5982\u679c\u4f60\u62c6\u5f00\u4e00\u90e8\u624b\u673a\uff0cLCD\u5c31\u662f\u4e00\u4e2a\u795e\u5947\u7684\u73bb\u7483\u77e9\u5f62\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\u5982\u679c\u4f60\u628a\u5b83\u62c6\u5f00\uff0c\u4e5f\u8bb8\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e9bLED\uff0c\u4f46\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5e76\u4e0d\u660e\u663e\u3002\nCRT\u4e5f\u662f\u4e00\u79cd\u9b54\u6cd5\uff0c\u4f46\u4ee5\u4e00\u79cd\u4ee4\u4eba\u6109\u60a6\u768419\u4e16\u7eaa\u793c\u5e3d\u548c\u85e4\u6761\u79d1\u5b66\u7684\u65b9\u5f0f\u3002\u770b\u4e0d\u89c1\u7684\u5149\u675f\u5728\u4e00\u82f1\u5c3a\u7684\u7a7a\u767d\u5904\u52fe\u52d2\u51fa\u56fe\u50cf\u3002\u4ed6\u4eec\u5bf9\u597d\u5947\u7684\u5b69\u5b50\u4eec\u62ff\u5728\u5c4f\u5e55\u4e0a\u7684\u78c1\u94c1\uff08\u4e5f\u662f\u9b54\u6cd5\uff09\u505a\u51fa\u4e94\u989c\u516d\u8272\u7684\u53cd\u5e94\uff0c\u5b69\u5b50\u4eec\u7684\u6b22\u4e50\u8fc5\u901f\u53d8\u6210\u6050\u614c\uff0c\u5728\u4ed6\u4eec\u7684\u6bcd\u4eb2\u73af\u987e\u56db\u5468\u5e76\u53d1\u73b0\u4ed6\u4eec\u6240\u505a\u7684\u4e8b\u60c5\uff08\u636e\u79f0\uff09\u4e4b\u524d\uff0c\u4ed6\u4eec\u8bd5\u56fe\u7528\u53e6\u4e00\u4e2a\u78c1\u6781\u6765\u6d88\u9664\u8fd9\u79cd\u6548\u679c\u3002\n\u78c1\u94c1\u6e38\u620f\u662f\u4e00\u4e2a\u7ebf\u7d22\uff1a\uff08\u5927\u591a\u6570\uff09CRT\u4f7f\u7528\u7535\u78c1\u94c1\u626b\u63cf\u770b\u4e0d\u89c1\u7684\u7535\u5b50\u675f\u6765\u7167\u4eae\u524d\u65b9\u7684\u56fe\u50cf\u3002\u624b\u4e0a\u62ff\u7740\u78c1\u94c1\uff0c\u81ea\u5df1\u79fb\u52a8\u5149\u675f\u662f\u4e00\u4ef6\u5f88\u6709\u8da3\u7684\u4e8b\u60c5\uff0c\u4f60\u53ef\u4ee5\u51ed\u76f4\u89c9\u77e5\u9053\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\uff08\u8fd8\u8bb0\u5f97\u5de6\u624b\u6cd5\u5219\u5417\uff1f\uff09\n\u6211\u5f00\u59cb\u559c\u6b22CRT\uff0c\u5f53\u6211\u610f\u8bc6\u5230\u6211\u5df2\u7ecf\u5341\u591a\u5e74\u6ca1\u6709\u8ba4\u771f\u4f7f\u7528CRT\u65f6\uff0c\u8fd9\u53ef\u80fd\u662f\u6211\u7684\u7231\u597d\u3002\u6211\u60f3\u5efa\u9020\u4e00\u4e9b\u4e1c\u897f\u3002\u6211\u4e5f\u559c\u6b22smol\u663e\u793a\u5668\uff0c\u5e76\u627e\u5230\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u5c0f\u578bCRT\u6e90\u2014\u2014\u6444\u50cf\u673a\u53d6\u666f\u5668\u3002\u5bb6\u7528\u76f8\u673a\u6709\u5f88\u5c0f\u7684CRT\uff0c\u5927\u7ea61\u5398\u7c73\u7684\u56fe\u7247\u5927\u5c0f\uff0c\u4f46\u6211\u60f3\u627e\u4e00\u4e2a\u66f4\u9ad8\u7aef\u7684\u4e13\u4e1a\u53d6\u666f\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f80\u5f80\u6709\u66f4\u5927\u7684\u7ba1\u4ee5\u83b7\u5f97\u66f4\u9ad8\u8d28\u91cf\u7684\u56fe\u50cf\u3002\u6700\u7ec8\u6211\u627e\u5230\u4e86\u4e00\u53f0\u7d22\u5c3cHVF-2000\u53d6\u666f\u5668\uff0c\u4ea7\u81ea1980\u5e74\u3002\n\u8be5\u53d6\u666f\u5668\u5305\u542b\u4e00\u4e2a\u5355\u82721.5\u82f1\u5bf8CRT\uff0c\u5176\u9a71\u52a8\u7535\u8def\u91c7\u7528\u81ed\u70d8\u70d8\u768420\u4e16\u7eaa70\u5e74\u4ee3\u915a\u919b\u6811\u8102PCB\u3002\u5b83\u53ea\u9700\u8981\u4e24\u4e2a\u8f6c\u76d8\u3001\u4e00\u4e2a8V\u76f4\u6d41\u7535\u6e90\u548c\u590d\u5408\u89c6\u9891\u8f93\u5165\u3002\u5b83\u5728\u51c9\u723d\u7684\u767d\u8272\u8367\u5149\u7c89\u4e0a\u663e\u793a\u6f02\u4eae\u3001\u6e05\u6670\u7684\u56fe\u50cf\u3002\n\u6211\u60f3\u4ee5\u53ef\u9760\u7684\u201c\u684c\u9762\u597d\u5947\u201d\u98ce\u683c\uff0c\u4ece\u5404\u4e2a\u89d2\u5ea6\u5c55\u793aCRT\uff0c\u800c\u4e0d\u9690\u85cf\u4efb\u4f55\u5185\u5bb9\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\u4e3a\u4e86\u70ab\u8000\u8fd9\u4e2a\u6f02\u4eae\u7684\u8fc7\u65f6\u7684\u5c0f\u73bb\u7483\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u731c\u5230\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\u968f\u7740\u60a6\u8033\u7684\u5494\u55d2\u58f0\u6253\u5f00\uff0c\u5b83\u5f00\u59cb\u65e0\u58f0\u5730\u64ad\u653e20\u4e16\u7eaa80\u5e74\u4ee3\u7684\u7cbe\u9009\u7535\u89c6\u8282\u76ee\uff0c\u4e00\u904d\u53c8\u4e00\u904d\uff1a\n\u6211\u5de5\u4f5c\u65f6\u628a\u5b83\u653e\u5728\u684c\u5b50\u4e0a\uff0c\u6709\u4e00\u5929\u4e00\u4e2a\u5e74\u8f7b\u4eba\u6765\u5230\u6211\u7684\u529e\u516c\u5ba4\u95ee\u6211\u8fd9\u4ef6\u4e8b\u3002\u4ed6\u4ee5\u524d\u6ca1\u6709\u771f\u6b63\u770b\u8fc7CRT\u7279\u5199\u955c\u5934\uff0c\u6211\u4eec\u6109\u5feb\u5730\u804a\u4e86\u804a\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff08\u5305\u62ec\u5411\u5b83\u6325\u821e\u78c1\u94c1\u2014\u2014\u6bcf\u4e2a\u4eba\u7684\u529e\u516c\u684c\u4e0a\u90fd\u6709\u4e00\u5757\u5907\u7528\u78c1\u94c1\uff0c\u4e0d\u662f\u5417\uff1f\u4f60\u597d\u2026\uff1f\uff09\u3002\u8036\uff01\n\u9888\u90e8\u6709\u4e00\u6839\u52a0\u70ed\u706f\u4e1d\uff08\u50cf\u706f\u6ce1\uff09\uff0c\u5b83\u80fd\u5c06\u7535\u5b50\u53d1\u5c04\u5230\u7a7a\u9699\u4e2d\u3002\n\u8fd9\u4e2a\u201c\u7535\u5b50\u67aa\u201d\u9760\u8fd1\u4e00\u4e9b\u91d1\u5c5e\u677f\uff08\u5177\u6709\u4e0d\u540c\u7684\u9ad8\u6b63\u8d1f\u7535\u538b\uff09\uff0c\u8fd9\u4e9b\u91d1\u5c5e\u677f\u7684\u4f5c\u7528\u662f\u5c06\u7535\u5b50\u7684\u5636\u5636\u58f0\u805a\u7126\u6210\u7a84\u675f\uff0c\u5f15\u5bfc\u5b83\u5411\u524d\u3002\n\u7535\u5b50\u7ba1\u6b63\u9762\u7684\u5185\u90e8\u88ab\u78f7\u5149\u6750\u6599\u8986\u76d6\uff0c\u5f53\u88ab\u7535\u5b50\u51fb\u4e2d\u65f6\u53d1\u5149\u3002\n\u6b63\u9762\u8fde\u63a5\u5230\u9633\u6781\u7aef\u5b50\uff0c\u5373\u9ad8\u6b63\u7535\u538b\u3002\u8fd9\u4f1a\u5438\u5f15\u7535\u5b50\u675f\uff0c\u7535\u5b50\u675f\u4f1a\u52a0\u901f\u5230\u524d\u65b9\u3002\n\u5149\u675f\u51fb\u4e2d\u524d\u65b9\uff0c\u5728\u4e00\u4e2a\u5c0f\u5149\u6591\u4e2d\u4ea7\u751f\u5149\u7ebf\u3002\u4e3a\u4e86\u521b\u5efa\u56fe\u7247\uff0c\u4f7f\u7528\u7f20\u7ed5\u5728\u7ba1\u9888\u4e0a\u7684\u6c34\u5e73\u548c\u5782\u76f4\u7535\u78c1\u94c1\u5728\u5149\u6805/\u7ebf\u4e2d\u63a7\u5236\u5149\u675f\u3002\uff08\u78c1\u94c1\u88ab\u79f0\u4e3a\u201c\u78c1\u8f6d\u201d\u3002\uff09\n\u5bf9\u4e8e50Hz\u7684PAL\uff0c\u7ebf\u6bcf\u79d2\u7ed8\u523615625\u6b21\u3002\u4f9d\u9760\u89c6\u89c9\u7684\u6301\u7eed\u6027\u539f\u7406\uff0c\u8fd9\u521b\u9020\u4e86\u4e00\u4e2a\u7a33\u5b9a\u56fe\u50cf\u7684\u9519\u89c9\u3002\n\u7ba1\u5b50\u662f\u5bc6\u5c01\u7684\uff0c\u91cc\u9762\u7684\u7535\u5b50\u67aa\u57fa\u672c\u4e0a\u662f\u770b\u4e0d\u89c1\u7684\uff0c\u4f46\u5728\u8fd9\u91cc\u4f60\u53ef\u4ee5\u770b\u5230\u770b\u8d77\u6765\u5f88\u539a\u7684\u9633\u6781\u7ebf\uff0c\u4ee5\u53ca\u7ba1\u5b50\u5728\u79fb\u9664\u8f6d\u67b6\u540e\u662f\u591a\u4e48\u7cbe\u81f4\uff1a\n\u6ce8\uff1a\u6839\u636e\u8bb0\u5fc6\uff0c\u8fd9\u6839\u7ba1\u5b50\u7684\u9633\u6781\u7535\u538b\u7ea6\u4e3a2.5\u5343\u4f0f\uff0c\u6240\u4ee5\u4e0d\u592a\u8fa3\u3002\u4e00\u4e2a\u5927\u7684\u7535\u8111\u663e\u793a\u5668\u4f1a\u7ed9\u4f6025KV\uff01\u6211\u63d0\u5230X\u5149\u4e86\u5417\uff1f\n\u539f\u6765\u7684\u53d6\u666f\u5668\u662f\u4e00\u4e2a\u4e24\u5757\u677f\u7684\u4e1c\u897f\uff0c\u9002\u5408\u5728\u4e00\u4e2a\u5947\u602a\u7684\u6a2a\u5411\u5f62\u72b6\u7684\u53d6\u666f\u5668\u6848\u4ef6\u3002\u6211\u79fb\u9664\u4e86\u4e00\u4e9b\u4e0eCRT\u64cd\u4f5c\u65e0\u5173\u7684\u63a7\u4ef6\u548c\u6307\u793a\u5668\uff0c\u5e76\u7a0d\u5fae\u5ef6\u957f\u4e86\u7535\u7ebf\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u5806\u53e0\u8d77\u6765\u3002\n\u53d6\u666f\u5668\u7684\u76ee\u955c\u5bf9\u7740\u4e00\u9762\u955c\u5b50\uff0c\u4e0eCRT\u9762\u621090\u5ea6\u89d2\uff0c\u8fd9\u6837\u56fe\u50cf\u5c31\u4f1a\u6c34\u5e73\u7ffb\u8f6c\u3002\u8fd9\u662f\u901a\u8fc7\u4ea4\u6362\u6c34\u5e73\u504f\u8f6c\u7ebf\u5708\u5bfc\u7ebf\uff0c\u53cd\u8f6c\u78c1\u573a\u65b9\u5411\u6765\u5b9e\u73b0\u7684\u3002\n\u7535\u8def\u5f88\u7b80\u5355\u3002\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u76f4\u6d41\u8f93\u5165\uff089-12V\uff09\uff0c\u5e76\u4f7f\u7528\u4e24\u4e2aDC-DC\u8f6c\u6362\u5668\u6a21\u5757\u4e3aCRT\u677f\u521b\u5efa\u4e00\u4e2a8V\u7535\u6e90\uff0c\u4e3a\u5e95\u90e8\u5206\u5c42\u7684Raspberry Pi Zero\u521b\u5efa\u4e00\u4e2a5V\u7535\u6e90\u3002\u6574\u4e2a\u88c5\u7f6e\u7684\u4f7f\u7528\u529f\u7387\u4f4e\u4e8e2W\u3002Pi\u7684\u590d\u5408\u8f93\u51fa\u76f4\u63a5\u8fdb\u5165CRT\u677f\u3002Pi\u542f\u52a8\u4e00\u4e2a\u7b80\u5355\u7684shell\u811a\u672c\uff0c\u9009\u62e9\u8981\u64ad\u653e\u7684\u6587\u4ef6\u3002\u80cc\u9762\u6709\u4e00\u4e2a\u65cb\u8f6c\u7f16\u7801\u5668\uff0c\u7528\u6765\u6362\u9891\u9053\uff0c\u4f46\u6211\u8fd8\u6ca1\u628a\u5b83\u63a5\u597d\u3002\n\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u4e2a\u6848\u5b50\u662f\u6700\u597d\u7684\u3002\u6211\u521a\u521a\uff08\u540e\u6765\uff09\u5f97\u5230\u4e86\u4e00\u53f0\u50cf\u6837\u7684\u6fc0\u5149\u5207\u5272\u673a\uff0c\u60f3\u4e3a\u96f6\u4ef6\u5236\u4f5c\u4e00\u4e2a\u71d5\u5c3e\u72b6\u7684\u900f\u660e\u5916\u58f3\u3002\u5b83\u75313\u6beb\u7c73\u65e0\u8272\u548c\u5929\u84dd\u8272\u4e19\u70ef\u9178\u5236\u6210\u3002\nCRT\u7531\u4e24\u4e2a\u201c\u540a\u67b6\u201d\u652f\u6491\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u6258\u76d8\u652f\u6491\u7740\u7535\u8def\u3002\u4f7f\u7528\u69fd/\u51f8\u8033\u65b9\u6cd5\uff0c\u7528\u56fa\u5b9a\u87ba\u6bcd\u5c06\u5176\u56fa\u5b9a\u5728\u4fa7\u9762\u3002\u5728\u7279\u5199\u56fe\u7247\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5728\u4e00\u4e9b\u51f8\u8033\u5207\u53e3\u7684\u62d0\u89d2\u5904\u6709\u4e00\u4e9b\u7ec6\u7ebf\u5e94\u529b\u65ad\u88c2\uff1a\u5b83\u4eec\u663e\u7136\u4e0e\u5bbd\u51e0\u767e\u00b5m\u6709\u5173\uff01\n\u5c06\u524d/\u9876/\u540e/\u5e95\u9762\u7c98\u5728\u4e00\u8d77\uff0c\u7136\u540e\u7528M3\u87ba\u6bcd\u5c06\u5de6/\u53f3\u4fa7\u62e7\u5165\u67b6\u5b50/\u540a\u67b6\u3002\u8fd9\u4e2a\u4e09\u660e\u6cbb\u628a\u5b83\u5939\u5728\u4e00\u8d77\u3002\n\u80cc\u9762\u6709\u4e00\u4e2a\u6876\u5f62\u76f4\u6d41\u63d2\u5b54\u3001\u7535\u6e90\u5f00\u5173\u548c\uff08\u5c1a\u672a\u4f7f\u7528\u7684\uff09\u65cb\u8f6c\u7f16\u7801\u5668\u3002\u7f16\u7801\u5668\u6700\u7ec8\u5c06\u6210\u4e3a\u4e00\u79cd\u201c\u901a\u9053\u9009\u62e9\u201d\uff1a\n\u4e19\u70ef\u9178\u6811\u8102\u5bf9\u6307\u7eb9\u548c\u7070\u5c18\u6709\u7740\u5de8\u5927\u7684\u5438\u5f15\u529b\uff0c\u5982\u679c\u4f60\u5bf9\u8fd9\u7c7b\u4e1c\u897f\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u5b83\u4f1a\u975e\u5e38\u68d2\u3002\u76d2\u5b50\u91cc\u4f3c\u4e4e\u4e5f\u6709\u4e00\u4e9b\u5c0f\u6591\u70b9\uff0c\u53ef\u80fd\u662f\u4e00\u4e9b\u6c34\u85fb\u4eceCRT\u4e0a\u8131\u843d\u3002\u8fd9\u9879\u6280\u672f\u4e00\u76f4\u5728\u53d1\u6325\u4f5c\u7528\u3002\n\u8fd9\u4e2a\u7bb1\u5b50\u662f\u7528OpenSCAD\u8bbe\u8ba1\u7684\uff0c\u5e76\u4e14\u6709\u4e00\u5b9a\u7684\u53c2\u6570\u5316\uff1aXYZ\u5c3a\u5bf8\u3001\u71d5\u5c3e\u69ab\u3001\u67b6\u5b50\u95f4\u8ddd\u7b49\u53ef\u4ee5\u8c03\u6574\uff0c\u76f4\u5230\u770b\u8d77\u6765\u5f88\u597d\u3002\n\u6211\u770b\u5230\u7684\u4e00\u4e2a\u4e0d\u9519\u7684OpenSCAD\u6fc0\u5149\u5207\u5272\u6280\u5de7\u662f\uff0c\u53ef\u4ee5\u5c062D\u96f6\u4ef6\u6e32\u67d3\u6210\u201c\u9884\u89c8\u201d3D\u89c6\u56fe\uff0c\u8fdb\u884c\u8c03\u6574\u548c\u4fee\u9970\uff0c\u7136\u540e\u57282D\u5e73\u9762\u4e0a\u91cd\u65b0\u6e32\u67d3\u5e73\u9762\uff0c\u4ee5\u521b\u5efa\u7528\u4e8e\u5207\u5272\u7684\u6a21\u677f\u3002\n\u6240\u4ee5\uff0c\u5236\u4f5c\u4e00\u4e2a3D\u539f\u578b\uff0c\u6539\u53d8\u53c2\u6570\uff0c\u76f4\u5230\u5b83\u770b\u8d77\u6765\u5f88\u597d\uff08\u4e5f\u8bb8\u6253\u5370\u51fa\u6765\uff0c\u770b\u770b\u7269\u7406\u9879\u76ee\u662f\u5426\u9002\u5408\uff01\uff09\u2026\n\u2026\u7136\u540e\u66f4\u6539\u6a21\u5f0f\u53d8\u91cf\uff0c\u57282D\u4e2d\u5e03\u7f6e\u76f8\u540c\u7684\u96f6\u4ef6\u8fdb\u884c\u5207\u5272\uff1a", "note_en": "I used to hate  Cathode Ray Tubes. As a kid in Europe, everything flickered at 50Hz, or made a loud whistle at 15.625KHz (back when I could still hear it). CRTs just seemed crude, \u201celectro-brutalist\u201d contraptions from the valve era. They were heavy, and delicate, and distorted, and blurry, and whistled, and gave people electric shocks when they weren\u2019t busy imploding and spreading glass shards around the place.\n When I saw the film  Brazil, I remember getting anxious about  exposed CRTs all over the place \u2014 seems I was the kind of kid who was more worried about someone touching the anode or electron gun than the totalitarian bureaucratic world they lived in. \ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f As ever, I digress.\n Now in the 2020s, the CRT is pretty much gone. We have astonishing flat-panel LCD and OLED screens. Nothing flickers, everything\u2019s pin-sharp, multi-megapixel resolutions, nothing whines (except me), and display life is pretty incredible for those of us old enough to remember  green-screen computing (but young enough to still see the details).\n But, the march to betterness marches away from accessible: if you take apart a phone, the LCD is a magic glass rectangle, and that\u2019s it. Maybe you can see some LEDs if you tear it apart, but it\u2019s really not obvious how it works.\n CRTs are also magic, but in a pleasing 19th century top-hat-and-cane science kind of way. Invisible beams trace out images through a foot of empty space. They respond colourfully to magnets (also magic) held to their screens by curious children whose glee rapidly decays into panic, and trying to undo the effect using the other pole before their mother looks around and discovers what they\u2019ve done (allegedly).\n The magnet-game is a clue: (most) CRTs use electromagnets that scans the invisible electron beam to light an image at the front. There\u2019s something enjoyable about moving the beam yourself, with a magnet in hand, and you can  kind of intuitively figure out how it works from doing this. (Remember the  Left-hand Rule?)\n I started to warm to CRTs, maybe a fondness when I realised I hadn\u2019t had to seriously use one for over a decade. I wanted to build something. I also like smol displays, and found an excellent source for a small CRT \u2014 a video camera viewfinder. Home cameras had tiny CRTs, roughly 1cm picture size, but I looked to find a higher-end professional viewfinder because they tended to have larger tubes for a higher-quality image. Eventually I found a Sony HVF-2000 viewfinder, from ca. 1980.\n This viewfinder contained a monochrome 1.5\u201d CRT, and its drive circuitry on stinky 1970s phenolic resin PCBs. All it needs are two turntables and an 8V DC power supply and composite video input. It displays nice, sharp images on a cool white phosphor.\n   I wanted to show the CRT from all angles, without hiding any of it, in the trusty \u201cdesktop curiosity\u201d style. The idea was to show off this beautiful little obsolete glass thingy, in a way that you could sorta guess how it worked.\n Switching it on with a pleasing clack, it starts silently playing a selection of 1980s TV shows, over and over and over:\n  I had this on my desk at work, and a Young Person TM came into my office one day to ask about it. He hadn\u2019t really seen a CRT close-up before, and we had a fun chat about how it worked (including waving a magnet at it \u2013 everyone has a spare magnet on their desk for these moments, don\u2019t they? Hello\u2026?). Yay!\n  The neck contains a heating filament (like a lightbulb) which gives off electrons into the void.\n  This \u201celectron gun\u201d is near some metal plates (with variously high positive and negative voltages), which act to focus the fizz of electrons into a narrow beam, directing it forward.\n  The inside of the front face of the tube is covered by a phosphorescent material which lights up when hit with electrons.\n  The front face is connected to the anode terminal, a high positive voltage. This attracts the beam of electrons, which accelerate to the front.\n  The beam hits the front and creates light in a small spot. To create the picture, the beam is steered in rasters/lines using horizontal and vertical electromagnets wrapped around the neck of the tube. (The magnets are called the \u201cyoke\u201d.)\n  For PAL at 50Hz, lines are drawn 15625 times a second. Relying on the principle of persistence of vision, this creates the illusion of a steady image.\n  The tube is sealed and electron gun inside is largely invisible, but here you can see the malicious-looking thick anode wire, and how dainty the tube really is with the yoke removed:\n  Note: the anode voltage for this tube is, from memory, about 2.5 kilovolts, so not particularly spicy. A large computer monitor will give you 25KV! Did I mention the X-rays?\n  The original viewfinder was a two-board affair, fitting in a strange transverse shape for the viewfinder case. I removed a couple of controls and indicators unrelated to the CRT operation, and extended the wires slightly so they could be stacked.\n The viewfinder\u2019s eyepiece looks onto a mirror, turning 90\u00ba to the CRT face \u2014 so the image is horizontally flipped. This was undone by swapping the horizontal deflection coil wires, reversing the field direction.\n  The circuit\u2019s pretty trivial. It just takes a DC input (9-12V) and uses two DC-DC converter modules to create an 8V supply for the CRT board and a 5V supply for a Raspberry Pi Zero layered at the bottom. The whole thing uses under 2W. The Pi\u2019s composite output drops straight into the CRT board. The Pi starts up a simple shell script that picks a file to play. There\u2019s a rotary encoder on the back, to change channel, but I haven\u2019t wired it up yet.\n  For me, the case was the best bit. I had just got (and since lost :((( ) access to a decent laser cutter, and wanted to make a dovetailed transparent case for the parts. It\u2019s made from 3mm colourless and sky-blue acrylic.\n  The CRT is supported from two \u201changers\u201d, and two trays below hold the circuitry. These are fixed to the sides using a slot/tab approach, with captive nuts. In the close-up pictures you can see there are some hairline stress fractures around the corners of some of the tab cut-outs: they could evidently do with being a few hundred \u00b5m wider!\n The front/top/back/bottom faces are glued together, then the left/right sides are screwed into the shelves/hangers with captive M3 nuts. This sandwiches it all together.\n The back holds a barrel-style DC jack, power switch, and (as-yet unused) rotary encoder. The encoder was intended to eventually be a kind of \u201cchannel select\u201d:\n  The acrylic is a total magnet for fingerprints and dust, which is excellent if you\u2019re into that kind of thing. There seems to also be little flecks filling the case, probably some  aquadag flaking off the CRT. This technology just keeps on giving.\n  The case is designed in OpenSCAD, and is somewhat parameterised: the XYZ dimensions, dovetailing, spacing of shelves and so forth can be tweaked till it looks good.\n One nice OpenSCAD laser-cutting trick I saw is that 2D parts can be rendered into a \u201cpreview\u201d 3D view, tweaked and fettled, and then re-rendered flat on a 2D plane to create a template for cutting.\n So, make a 3D prototype, change the parameters until it looks good (maybe printing stuff out to see whether the physical items actually fit!)\u2026\n  \u2026then change the  mode variable, and the same parts are laid out in 2D for cutting:", "posttime": "2022-02-17 04:08:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9882\u6b4c,ode,crt", "title": "\u4e00\u9996\u5c0f\u9882\u6b4c", "title_en": "A Small Ode to the CRT", "transed": 1, "url": "https://axio.ms/projects/2022/02/08/CRTBox.html", "via": "", "real_tags": ["\u9882\u6b4c", "ode", "crt"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073686, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "decorator\u5141\u8bb8\u6211\u4eec\u5411TypeScript\u4e2d\u7684\u7c7b\u6216\u65b9\u6cd5\u6dfb\u52a0\u989d\u5916\u7684\u4fe1\u606f\uff0c\u7c7b\u4f3c\u4e8eJava\u4e2d\u7684\u6ce8\u91ca\u3002\u7c7b\u88c5\u9970\u5668\u5e94\u7528\u4e8eTypeScript\u4e2d\u7684\u7c7b\u5b9a\u4e49\uff0c\u53ef\u4ee5\u89c2\u5bdf\u3001\u4fee\u6539\u6216\u66ff\u6362\u7c7b\u5b9a\u4e49\u3002\n\u672c\u6587\u6df1\u5165\u63a2\u8ba8\u4e86TypeScript\u7c7b\u88c5\u9970\u5668\u7684\u5b9a\u4e49\u548c\u4f7f\u7528\u3002\u8981\u4f7f\u7528decorators\uff0c\u5fc5\u987b\u5728TypeScript\u4e2d\u542f\u7528\u5b83\u4eec\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u67e5\u770b\u672c\u7cfb\u5217\u4e2d\u7684decorators\u7b80\u4ecb\u6587\u7ae0\u3002\u7c7b\u88c5\u9970\u5668\u4e3b\u8981\u7528\u4e8e\u5411\u7c7b\u6dfb\u52a0\u5143\u6570\u636e\uff0c\u5176\u4ed6\u88c5\u9970\u5668\u5c06\u4f7f\u7528\u5143\u6570\u636e\u3002\u4f46\u662f\uff0c\u7c7b\u88c5\u9970\u5668\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6784\u9020\u51fd\u6570\u6765\u8986\u76d6\u6216\u66ff\u6362\u73b0\u6709\u7684\u6784\u9020\u51fd\u6570\u6216\u7c7b\uff0c\u4ece\u800c\u6dfb\u52a0\u65b0\u65b9\u6cd5\u6216\u5176\u4ed6\u884c\u4e3a\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728class\u5173\u952e\u5b57\u524d\u9762\u7acb\u5373\u52a0\u4e0a\u4e00\u4e2a\u6216\u591a\u4e2adecorator\u3002\u901a\u8fc7\u4e00\u4e9b\u88c5\u9970\u5668\uff0c\u53c2\u6570\u53ef\u4ee5\u914d\u7f6e\u5176\u884c\u4e3a\u3002\u5176\u4ed6\u88c5\u9970\u5e08\u4e0d\u9700\u8981\u53c2\u6570\uff0c\u8fd9\u5c06\u5728\u6587\u6863\u4e2d\u89e3\u91ca\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\u88c5\u9970\u5668\u793a\u4f8b\uff0c\u5b83\u53ea\u6253\u5370\u7ed9\u5b9a\u7684\u6570\u636e\u3002\n\u51fd\u6570\uff08\u6784\u9020\u51fd\u6570\uff1a\u51fd\u6570\uff09{const ret={constructor\uff0c\uff1a\uff08\u6784\u9020\u51fd\u6570\uff09\uff0c\uff1a\uff08\u6784\u9020\u51fd\u6570\uff09\uff0c\uff1a\uff08\u6784\u9020\u51fd\u6570\uff09\uff0c\uff1a\uff08\u6784\u9020\u51fd\u6570\uff09\uff0c\uff1a\uff08\u6784\u9020\u51fd\u6570\uff09\uff0c\uff1a{}\uff1bfor\uff08const key of.\uff08constructor.prototype\uff09\uff09{ret.members[key]=constructor.prototype[key]\uff1b}\u5b89\u6170\uff08'classdecoreExample'\uff0cret\uff09\uff1b]\u7c7b{\uff08x:number\uff0cy:number\uff09{console\uff08`classdecoreExample\uff08${x}\uff0c${y}\uff09`\uff1b}\uff08\uff09{console.\uff08`method called`\uff09\uff1b}\u65b0\u7684\uff083,4\uff09\u3002()\nlogConstructor\u662f@logConstructor decorator\u7684decorator\u51fd\u6570\uff0c\u5b83\u4e3a\u7c7bdecorators\u5b9e\u73b0\u6307\u5b9a\u7684\u65b9\u6cd5\u7b7e\u540d\u3002\u6b64\u88c5\u9970\u5668\u4e0d\u4f7f\u7528\u4efb\u4f55\u53c2\u6570\uff0c\u5e76\u4e14\u7531\u4e8e\u5176\u5b9e\u73b0\uff0c\u4e0d\u9700\u8981\u62ec\u53f7\u3002\n\u5b83\u53ea\u662f\u6253\u5370\u51fa\u6709\u5173\u6784\u9020\u51fd\u6570\u7684\u53ef\u7528\u4fe1\u606f\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u60c5\u51b5\uff0c\u6211\u4eec\u4f7f\u7528\u5bf9\u8c61\u7c7b\u4e2d\u7684\u65b9\u6cd5\u6765\u67e5\u8be2\u6709\u5173\u88ab\u4fee\u9970\u7c7b\u7684\u6570\u636e\u3002\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\uff0c\u67e5\u8be2\u662f\u9488\u5bf9\u6784\u9020\u51fd\u6570\u7684\u3002\u539f\u578b\uff0c\u56e0\u4e3a\u8be5\u5bf9\u8c61\u5305\u542b\u9644\u52a0\u5230\u7c7b\u7684\u65b9\u6cd5\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\n\u5b58\u50a8\u5e93\u4e2d\u7684decorator-inspector\u5305\u5305\u542b\u4e00\u4e2a\u66f4\u5168\u9762\u7684decorator LogClassInspector\uff0c\u5177\u6709\u7c7b\u4f3c\u7684\u7528\u9014\u3002\n$npx ts node lib/classes/first\u3002ts ClassDecoratorExample{constructor:[class ClassDecoratorExample]\uff0c\u53ef\u6269\u5c55\uff1afalse\uff0c\u51bb\u7ed3\uff1afalse\uff0c\u5bc6\u5c01\uff1afalse\uff0c\u503c\uff1a[]\uff0c\u5c5e\u6027\uff1a{length:{value:2\uff0c\u53ef\u5199\uff1afalse\uff0c\u53ef\u679a\u4e3e\uff1afalse\uff0c\u53ef\u914d\u7f6e\uff1afalse}\uff0c\u540d\u79f0\uff1a{value:&#39\uff1bClassDecoratorExample&#39\uff1b\uff0c\u53ef\u5199\uff1afalse\uff0c\u53ef\u679a\u4e3e\uff1afalse\uff0c\u53ef\u914d\u7f6e\uff1afalse}\uff0c\u539f\u578b\uff1a{value:{}\uff0c\u53ef\u5199\uff1afalse\uff0c\u53ef\u679a\u4e3e\uff1afalse\uff0c\u53ef\u914d\u7f6e\uff1afalse}\uff0c\u6210\u5458\uff1a{constructor:[classdecorexample]\uff0cmethod:[Function:method]}classdecorexample\uff083\uff0c4\uff09\u8c03\u7528\u7684\u65b9\u6cd5\n\u5c5e\u6027\u4e2d\u7684\u503c\u662fPropertyDescriptor\u5bf9\u8c61\uff0c\u6211\u4eec&#39\uff1b\u6211\u4f1a\u518d\u4e09\u770b\u7684\u3002\u6211\u4eec\u5927\u591a\u6570\u4eba\u4e0d\u9700\u8981\u5728JavaScript\u7684\u5e55\u540e\u6df1\u5165\u7814\u7a76\u8fd9\u4e00\u70b9\u3002\u4f46\u662f\uff0c\u8981\u5b9e\u73b0decorators\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u4e9b\u4e8b\u60c5\u3002\n\u4f8b\u5982\uff0c\u60a8\u77e5\u9053\u5bf9\u8c61\u4e0a\u7684\u5bc6\u5c01\u6216\u51bb\u7ed3\u8bbe\u7f6e\u5417\uff1f\u73b0\u5728\u6211\u4e86\u89e3\u4e86\u4ed6\u4eec\uff0c\u5b83&#39\uff1bIt\u2019\u542f\u7528\u8fd9\u4e24\u79cd\u8bbe\u7f6e\u770b\u8d77\u6765\u90fd\u5f88\u6709\u7528\u3002\u8fd9\u4e2a\u88c5\u9970\u5e08\u8ba9\u5b83\u53d8\u5f97\u7b80\u5355\uff1a\n\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u4e3a\u4efb\u4f55\u53ef\u88c5\u9970\u7684\u4e1c\u897f\u6dfb\u52a0\u591a\u4e2a\u88c5\u9970\u5668\u3002\u591a\u4e2a\u88c5\u9970\u5668\u6709\u4e00\u4e2a\u6267\u884c\u987a\u5e8f\uff0c\u5b83\u4eec\u4ece\u4e0b\u5f80\u4e0a\u6267\u884c\u3002\u56e0\u6b64\uff0c\u8f93\u51fa\u73b0\u5728\u5c06\u663e\u793asealed:true\uff0c\u56e0\u4e3a@sealed\u5c06\u9996\u5148\u6267\u884c\u3002\u5982\u679c\u4f60\u628a@sealed\u653e\u5728logConstructor\u4e0a\u9762\uff0c\u5b83\u4ecd\u7136\u4f1a\u8bf4sealed:false\uff0c\u56e0\u4e3a@sealed\u5c06\u5728\u7b2c\u4e8c\u4e2a\u6267\u884c\u3002\n\u88c5\u9970\u5e08\u4e5f\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\u3002\u6b63\u5982\u6211\u4eec\u5728\u4ecb\u7ecd\u4e2d\u6240\u8bf4\uff0c\u8fd9\u9700\u8981\u9075\u5faa\u4e00\u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\uff0c\u79f0\u4e3a\u88c5\u9970\u5de5\u5382\u3002\n\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\u88c5\u9970\u5668\u793a\u4f8b\uff0c\u5b83\u4e0d\u4ec5\u5c55\u793a\u4e86\u5982\u4f55\u4f20\u5165\u53c2\u6570\uff0c\u8fd8\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u4f7f\u7528\u591a\u4e2a\u88c5\u9970\u5668\u65f6\u7684\u6267\u884c\u987a\u5e8f\u3002\n\u51fd\u6570\uff08\u8def\u5f84\uff1a\u5b57\u7b26\u4e32\uff09{console\uff08`outer with param${path}`\uff09\uff1b\u8fd4\u56de\uff08\u76ee\u6807\uff1a\u51fd\u6570\uff09=&gt\uff1b{console.\uff08`internal withParam${path}`\uff09\uff1b}\uff1b}\uff08&#39\uff1b\u7b2c\u4e00&#39\uff1b\uff09\uff08&#39\uff1b\u4e2d&#39\uff1b\uff09\uff08&#39\uff1b\u6700\u540e&#39\uff1b\uff09\u7c7b{}\n\u5916\u90e8\u51fd\u6570withParam\u83b7\u53d6\u8981\u4e0e\u88c5\u9970\u5668\u4e00\u8d77\u4f7f\u7528\u7684\u53c2\u6570\u5217\u8868\u3002\u5185\u90e8\u51fd\u6570\u662fdecorator\u51fd\u6570\uff0c\u662f\u5b9e\u73b0\u6240\u9700\u7b7e\u540d\u7684\u5730\u65b9\u3002\u5b83\u662f\u5305\u542b\u5b9e\u9645\u88c5\u9970\u5668\u5b9e\u73b0\u7684\u5185\u90e8\u51fd\u6570\u3002\nwithParam\uff08parameter\uff09\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5177\u6709\u6b63\u786e\u7b7e\u540d\u7684\u51fd\u6570\u4f5c\u4e3a\u7c7b\u88c5\u9970\u5668\u3002\u8fd9\u4f7f\u5f97\u5185\u90e8\u51fd\u6570\u6210\u4e3a\u88c5\u9970\u51fd\u6570\uff0c\u800c\u5916\u90e8\u51fd\u6570\u662f\u751f\u6210\u8be5\u51fd\u6570\u7684\u5de5\u5382\u3002\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec&#39\uff1b\u6211\u5df2\u7ecf\u4e09\u6b21\u9644\u4e0aparam\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6267\u884c\u987a\u5e8f\u7684\u4fe1\u606f\u3002\n$npx ts-\u8282\u70b9\u5e93/\u7c7b/\u6784\u9020\u51fd\u6570\u3002ts outer with param first outer with param middle outer with param last inner with param last inner with param middle inner with param first\n\u6211\u4eec\u5728\u5f15\u8a00\u4e2d\u8be6\u7ec6\u8ba8\u8bba\u4e86\u8fd9\u4e00\u70b9\u3002\u8bf7\u8bb0\u4f4f\uff0c\u5de5\u5382\u51fd\u6570\u4ece\u4e0a\u5230\u4e0b\u6267\u884c\uff0c\u4e4b\u540e\u88c5\u9970\u51fd\u6570\u4ece\u4e0b\u5230\u4e0a\u6267\u884c\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u6765\u7814\u7a76\u4e00\u4e0b\u7c7b\u88c5\u9970\u5668\u7684\u4e00\u4e2a\u53ef\u80fd\u7684\u5b9e\u9645\u7528\u9014\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u6846\u67b6\u53ef\u80fd\u4f1a\u4fdd\u5b58\u67d0\u4e9b\u7c7b\u578b\u7684\u7c7b\u7684\u5217\u8868\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u6a21\u62df\u4e00\u4e2aweb\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\uff0c\u5176\u4e2d\u67d0\u4e9b\u7c7b\u5177\u6709URL\u8def\u7531\u529f\u80fd\u3002\u6bcf\u4e2a\u8def\u7531\u5668\u7c7b\u5904\u7406\u7279\u5b9aURL\u524d\u7f00\u7684\u8def\u7531\uff0c\u4ee5\u53ca\u8be5\u8def\u7531\u7684\u7279\u5b9a\u914d\u7f6e\u3002\n\u5e38\u91cf\u6ce8\u518c\u7c7b=[]\uff1b\u51fd\u6570\uff08\u8def\u5f84\uff1a\u5b57\u7b26\u4e32\uff0c\u9009\u9879\uff1f\uff1a\u5bf9\u8c61\uff09{return\uff08\u6784\u9020\u51fd\u6570\uff1a\u51fd\u6570\uff09=&gt\uff1b{registeredClasses.\uff08{constructor\uff0cpath\uff0coptions}\uff09\uff1b}\uff1b}( &#39;/&#39;) \u7c7b{//routing functions}\uff08&#39\uff1b/blog&#39\uff1b\uff0c{\uff1a&#39\uff1b/blog/rss.xml&#39\uff1b}\uff09\u7c7b{//\u8def\u7531\u51fd\u6570}\u63a7\u5236\u53f0\u3002\uff08\u6ce8\u518c\u7c7b\u522b\uff09\uff1b\nRouter\u662f\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff0c\u5b83\u751f\u6210\u4e00\u4e2a\u7c7b\u88c5\u9970\u5668\uff0c\u5c06\u7c7b\u6dfb\u52a0\u5230RegisteredClass\u6570\u7ec4\u4e2d\u3002\u8be5\u51fd\u6570\u6709\u4e24\u4e2a\u9009\u9879\uff0c\u5176\u4e2dpath\u662fURL\u8def\u5f84\u524d\u7f00\uff0coptions\u662f\u53ef\u9009\u7684configuraton\u5bf9\u8c61\u3002\n\u56e0\u4e3a\u73ed\u7ea7\u88c5\u9970\u5e08\u6392\u5728\u6700\u540e\uff0c\u6240\u4ee5&#39\uff1b\u5bf9\u4e8e\u7c7b\u4e2d\u5305\u542b\u7684\u4efb\u4f55\u65b9\u6cd5\u6216\u5c5e\u6027\uff0c\u7c7b\u88c5\u9970\u5668\u53ef\u4ee5\u9009\u62e9\u505a\u4e9b\u4ec0\u4e48\u3002\u6b64\u5916\uff0c\u66f4\u5e38\u89c1\u7684\u5b58\u50a8\u6570\u636e\u7684\u65b9\u6cd5\u4e0d\u662f\u8fd9\u6837\u7684\u6570\u7ec4\uff0c\u800c\u662f\u4f7f\u7528\u53cd\u5c04\u5143\u6570\u636eAPI\uff0c\u6211\u4eec\u5c06\u5728\u540e\u9762\u8ba8\u8bba\u3002\n$npx ts\u8282\u70b9\u5e93/\u7c7b/\u5bc4\u5b58\u5668\u3002ts[{constructor:[class HomePageRouter]\uff0c\u8def\u5f84\uff1a&#39\uff1b/&#39\uff1b\uff0c\u9009\u9879\uff1a\u672a\u5b9a\u4e49\uff0c{constructor:[class BlogRouter]\uff0c\u8def\u5f84\uff1a&#39\uff1b/blog&#39\uff1b\uff0c\u9009\u9879\uff1a{rss:&#39\uff1b/blog/rss.xml&#39\uff1b}]\n\u8fd9\u53d6\u51b3\u4e8e\u5047\u8bbe\u7684\u6846\u67b6\u6765\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u3002\u6b63\u5982\u6211\u4eec\u524d\u9762\u770b\u5230\u7684\uff0c\u4ece\u6784\u9020\u51fd\u6570\u5bf9\u8c61\u5f00\u59cb\uff0c\u6709\u5f88\u591a\u989d\u5916\u7684\u6570\u636e\u53ef\u7528\u3002\n\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5f88\u6709\u8da3\uff0c\u4f46\u8ba9\u6211\u4eec\u6765\u770b\u770b&#39\uff1b\u8ba9\u6211\u4eec\u5c1d\u8bd5\u505a\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u5b83&#39\uff1bs\u627f\u8bfa\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u6216\u66ff\u6362\u7c7b\u5b9a\u4e49\u3002\u8fd9\u9700\u8981\u4e00\u4e9b\u9b54\u6cd5\uff0c\u6240\u4ee5\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u770b\u770b\u3002\n\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u540e\u9000\u534a\u6b65\uff0c\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u2014\u2014\u7c7b\u88c5\u9970\u5668\u51fd\u6570\u63a5\u6536\u7c7b\u5bf9\u8c61\u3002\u5b83\u4e0d\u63a5\u6536\u6b63\u5728\u521b\u5efa\u7684\u5b9e\u4f8b\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Object\u6dfb\u52a0\u5c5e\u6027\u3002\u5b9a\u4e49\u5c5e\u6027\uff08\u76ee\u6807\uff0c\u2026\uff09\uff0c\u4f46\u8be5\u5c5e\u6027\u88ab\u6dfb\u52a0\u5230\u7c7b\u4e2d\uff0c\u800c\u4e0d\u662f\u6dfb\u52a0\u5230\u751f\u6210\u7684\u4efb\u4f55\u5b9e\u4f8b\u4e2d\u3002\n\u4e3a\u4e86\u6293\u4f4f\u4e00\u4e2a\u968f\u673a\u7684\u6982\u5ff5\uff0c\u8003\u8651\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8bb0\u5f55\u4e8b\u4ef6\u5728\u5458\u5de5\u7684\u4e00\u5929\u3002\u5458\u5de5\u5148\u6253\u5361\u4e0a\u73ed\uff0c\u4e0b\u73ed\u540e\u518d\u6253\u5361\u4e0b\u73ed\u3002\u8ba9&#39\uff1bs\u521b\u5efa\u4e24\u4e2a\u7c7b\u6765\u8bb0\u5f55\u8fd9\u4e9b\u4e8b\u4ef6\uff0c\u5e76\u4f7f\u7528\u88c5\u9970\u5668\u81ea\u52a8\u6dfb\u52a0\u65f6\u95f4\u6233\u548c\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n\u4ece&#39\u5bfc\u5165{v4 as uuidv4}\uff1buuid&#39\uff1b\uff1b\u529f\u80fd&lt\uff1bT\u6269\u5c55{\uff08\u2026\uff1aany[]\uff09\uff1a{}&gt\uff1b\uff08\uff1aT\uff09{return class target{uuid=\uff08\uff09\uff1bcreated=new\uff08\uff09\u3002\uff08&#34\uff1ben-US&#34\uff1b\uff09\uff1b\uff08msg:string\uff09{console.\uff08`Extended${msg}`\uff09\uff1b}}\u7c7b{//\u65b9\u6cd5\u548c\u5c5e\u6027}\u7c7b{//\u65b9\u6cd5\u548c\u5c5e\u6027}\n\u65f6\u95f4\u6233\u88c5\u9970\u5668\u6709\u4e00\u4e2a\u5947\u602a\u7684\u58f0\u660e\uff0c\u4f46\u8fd9\u786e\u5b9e\u6709\u6548\uff0c\u5b83\u6765\u81ea\u6b63\u5f0f\u7684TypeScript\u6587\u6863\uff0c\u5e76\u4e14\u4e0e\u7c7b\u88c5\u9970\u5668\u51fd\u6570\u6240\u9700\u7684\u7b7e\u540d\u5339\u914d\u3002extends\u5b50\u53e5\u4f3c\u4e4e\u4e0e\u6269\u5c55\u6cdb\u578b\u7c7b\u6709\u5173\uff0c\u56e0\u6b64\u5728\u672c\u4f8b\u4e2d\uff0cT\u5339\u914d\u4efb\u4f55\u7c7b\u5b9a\u4e49\u3002\n\u5e26\u6709&lt\uff1bT\u6269\u5c55{new\uff08\u2026args:any[]\uff09\uff1a{}}&gt\uff1b\u662f\u6cdb\u578b\uff0c\u5176\u4e2dT\u88ab\u5b9a\u4e49\u4e3a\u6269\u5c55\u4efb\u4f55\u7c7b\u7684\u4e1c\u897f\u3002\u8fd9\u79cd\u8bed\u6cd5\u76f4\u63a5\u6765\u81eaTypeScript\u6587\u6863\uff0c\u53ef\u80fd\u662f\u58f0\u660e\u7c7b\u88c5\u9970\u5668\u7684\u66f4\u7cbe\u786e\u7684\u65b9\u6cd5\u3002\n\u8fd4\u56de\u7c7bextends target\u7684\u90e8\u5206\u662f\u4e00\u4e2a\u7c7b\u64cd\u4f5c\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u6765\u6269\u5c55\u88ab\u4fee\u9970\u7684\u7c7b\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u65b0\u73ed\u7ea7\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u6dfb\u52a0\u4e86\u4e24\u4e2a\u5b57\u6bb5\u548c\u4e00\u4e2a\u51fd\u6570\u3002uuid\u5b57\u6bb5\u662f\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u521b\u5efa\u7684\u5b57\u6bb5\u662f\u4e00\u4e2a\u65f6\u95f4\u6233\u3002\n\u6211\u4eec&#39\uff1b\u91cd\u65b0\u751f\u6210ClockIn\u7684\u4e24\u4e2a\u5b9e\u4f8b\uff0c\u4ee5\u9a8c\u8bc1\u6bcf\u4e2a\u5b9e\u4f8b\u662f\u5426\u83b7\u5f97\u552f\u4e00\u6807\u8bc6\u7b26\u3002\u7136\u540e\u6211\u4eec\u6253\u5370\u51fa\u4e00\u4e9b\u6570\u636e\u3002\n$npx ts\u8282\u70b9\u5e93/\u7c7b/\u65f6\u95f4\u6233\u3002ts\u65f6\u949f{uuid:&#39\uff1bbc3e6f35-c85d-491d-82c0-c906deacc774&#39\uff1b\uff0c\u521b\u5efa\uff1a&#39\uff1b2022\u5e742\u670810\u65e5\uff0c\u4e0b\u53486:11:53&#39\uff1b}\u65f6\u949f{uuid:&#39\uff1b13eb2df6-b9e7-4735-9130-a7ee13182d33&#39\uff1b\uff0c\u521b\u5efa\uff1a&#39\uff1b2022\u5e742\u670810\u65e5\uff0c\u4e0b\u53486:11:53&#39\uff1b}\u65f6\u949f\u8f93\u51fa{uuid:&#39\uff1b31ce8e88-90e0-40d7-9eb2-cbba5c879b5d&#39\uff1b\uff0c\u521b\u5efa\uff1a&#39\uff1b2022\u5e742\u670810\u65e5\uff0c\u4e0b\u53486:11:53&#39\uff1b}\u771f\u6b63\u7684bc3e6f35-c85d-491d-82c0-c906deacc774bc3e6f35-c85d-491d-82c0-c906deacc774Extended WorldExtended World#2\n\u6211\u4eec\u7684\u5bf9\u8c61\u786e\u5b9e\u6709\u6dfb\u52a0\u7684\u5b57\u6bb5\uff0c\u4e24\u4e2a\u65f6\u949f\u5b9e\u4f8b\u6709\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u3002\n\u4ee3\u7801\u53d8\u5f97\u6709\u8da3\u7684\u5730\u65b9\u662f\u8bd5\u56fe\u76f4\u63a5\u8bbf\u95ee\u4e00\u4e2a\u5b57\u6bb5\uff0c\u6bd4\u5982ci\u3002\u4e4c\u4f0a\u5fb7\u3002\u7f16\u8bd1\u5668\u7ed9\u51fa\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u8868\u793a\u7c7b\u578b\u4e0a\u4e0d\u5b58\u5728\u547d\u540d\u5b57\u6bb5\uff0c\u53ef\u80fd\u662f\u56e0\u4e3aClockIn\u7c7b\u6ca1\u6709\u540d\u4e3auuid\u7684\u5b57\u6bb5\u3002\u4f46\u662f\u6211\u4eec\u901a\u8fc7\u8c03\u7528hasOwnProperty\u4e86\u89e3\u5230\u6dfb\u52a0\u7684\u5c5e\u6027\u786e\u5b9e\u5b58\u5728\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ci[&#39\uff1buuid&#39\uff1b]\u8bbf\u95ee\u8fd9\u4e9b\u5c5e\u6027\u6216\u8005\u901a\u8fc7\u5728\uff08&lt\uff1bany&gt\uff1bci\uff09\u4e2d\u5bf9\u4efb\u4f55ci\u8fdb\u884c\u5f3a\u5236\u8f6c\u6362\u3002\u4e4c\u4f0a\u5fb7\u3002\n\u867d\u7136\u6211\u4eec\u4f7f\u7528\u88c5\u9970\u5668\u6210\u529f\u5730\u4fee\u6539\u4e86\u8fd9\u4e2a\u7c7b\uff0c\u4f46\u7ed3\u679c\u6709\u70b9\u68d8\u624b\u3002\u8bbf\u95ee\u6dfb\u52a0\u7684\u5c5e\u6027\u662f\u4e0d\u81ea\u7136\u7684\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4f7f\u5176\u4f7f\u7528\u8d77\u6765\u6ca1\u6709\u5438\u5f15\u529b\u3002\nTypeScript\u6587\u6863\u6f14\u793a\u4e86\u540c\u6837\u7684\u95ee\u9898\u3002\u4ed6\u4eec\u7684\u793a\u4f8b\u663e\u793a\u901a\u8fc7\u76f8\u540c\u7684\u673a\u5236\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bb5reportingURL\u3002\u4f46\u662f\u8bd5\u56fe\u8bbf\u95ee\u8be5\u5c5e\u6027\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0cproperty&#39\uff1b\u7b2c39\u53f7\u62a5\u544a\uff1b\u7c7b\u578b&#39\u4e0a\u4e0d\u5b58\u5728\uff1bBugReport&#39\uff1b\u3002\u5b83&#39\uff1bs\u89e3\u91ca\u8bf4\uff0c\u56e0\u4e3aTypeScript\u7c7b\u578b\u6ca1\u6709\u66f4\u6539\uff0c\u6240\u4ee5\u7c7b\u578b\u7cfb\u7edf\u4e0d\u77e5\u9053\u6dfb\u52a0\u7684\u5c5e\u6027\u3002\u6b63\u5982\u6211\u4eec&#39\uff1b\u6211\u5df2\u7ecf\u6f14\u793a\u8fc7\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5c31\u5728\u90a3\u91cc\uff0c\u800c\u4e14\u8fd9\u4e9b\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7\u8df3\u73af\u83b7\u5f97\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u91cd\u5199\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\u3002\u8003\u8651\u4e00\u4e0b\uff1a\n\u529f\u80fd&lt\uff1bT\u6269\u5c55{\uff08\u2026\uff1aany[]\uff09\uff1a{}&gt\uff1b\uff08\uff1aT\uff09{return class target{\uff08w:number\uff0ch:number\uff09{return{w\uff0ch\uff0c\uff1aw*h}\uff1b}}\u7c7b{\uff08w:number\uff0ch:number\uff09{\u8fd4\u56dew*h\uff1b}\u5b89\u6170\uff08\u65b0\u7684\uff08\uff09\u3002( 5,  6)); \u5b89\u6170\uff08\u65b0\u7684\uff08\uff09\u3002( 6,  7));\n\u6211\u4eec\u6709\u4e00\u4e2a\u540d\u4e3aOverride\u7684\u7c7b\u548c\u4e00\u4e2a\u540d\u4e3aOverride\u7684\u88c5\u9970\u5668\u3002\u8be5\u7c7b\u6709\u4e00\u4e2a\u540d\u4e3aarea\u7684\u51fd\u6570\uff0c\u5b83\u53ea\u8fd4\u56de\u660e\u663e\u7684\u503c\uff0c\u5373\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u76f8\u4e58\u7684\u7ed3\u679c\u3002\u88ab\u91cd\u5199\u7684\u7248\u672c\u8fd4\u56de\u4e00\u4e2a\u533f\u540d\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u3002\n\u663e\u7136\uff0c\u8fd9\u786e\u5b9e\u6210\u529f\u5730\u7528\u65b0\u529f\u80fd\u53d6\u4ee3\u4e86\u539f\u6765\u7684\u529f\u80fd\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8df3\u8fc7\u4efb\u4f55\u969c\u788d\u5c31\u53ef\u4ee5\u8bbf\u95ee\u6700\u91cd\u8981\u7684\u529f\u80fd\u3002\n\u5982\u679c\u5728\u7c7b\u88c5\u9970\u5668\u4e2d\u91cd\u5199\u533f\u540d\u5b50\u7c7b\u4e2d\u7684\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\n\u4f8b\u5982\uff0cnpm/Thread\u5b58\u50a8\u5e93\u4e2d\u6709\u8bb8\u591adecorator\u5e93\u4e13\u6ce8\u4e8e\u8bb0\u5f55\u5bf9\u8c61\u521b\u5efa\u3001\u65b9\u6cd5\u8c03\u7528\u548c\u5c5e\u6027\u8bbf\u95ee\u3002\u8981\u4e86\u89e3\u8fd9\u4e00\u70b9\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u79cd\u5728\u521b\u5efa\u7c7b\u5b9e\u4f8b\u65f6\u6253\u5370\u65e5\u5fd7\u6d88\u606f\u7684\u65b9\u6cd5\u3002\n\u4ece&#39\u5bfc\u5165*\u4f5c\u4e3autil\uff1butil&#39\uff1b\uff1b\u529f\u80fd&lt\uff1bT\u6269\u5c55{\uff08\u2026\uff1aany[]\uff09\uff1a{}&gt\uff1b\uff08\uff1aT\uff09{return class target{\uff08\u2026args:any[]\uff09{super\uff08\u2026args\uff09\uff1bconsole\uff08`Create${util.inspect\uff08target\uff09}with args=`\uff0cargs\uff09\uff1b}}\u7c7b{this.height=height\uff1bthis.width=width\uff1b}\uff08\uff09{\u8fd4\u56dethis.width*this.height\uff1b}\u7c7b{\uff1a\u6570\uff1b\uff08\u76f4\u5f84\uff1a\u6570\uff09{this.diameter=diameter\uff1b}\uff08\uff09{return\uff08\uff08this.diameter/2\uff09**2\uff09*\uff08.PI\uff09\uff1b}const rect1=new\uff083,5\uff09\uff1b\u5b89\u6170\uff08`area rect1${rect1.area\uff08\uff09}`\uff09\uff1bconst rect2=\u65b0\u7684\uff085,8\uff09\uff1b\u5b89\u6170\uff08`area rect2${rect2.area\uff08\uff09}`\uff09\uff1bconst rect3=new\uff088,13\uff09\uff1b\u5b89\u6170\uff08`area rect3${rect3.area\uff08\uff09}`\uff09\uff1bconst circ1=\u65b0\u7684\uff0820\uff09\uff1b\u5b89\u6170\uff08`area circ1${circ1.area\uff08\uff09}`\uff09\uff1b\n\u6211\u4eec\u6709\u4e24\u4e2a\u7b80\u5355\u7684\u7c7b\uff0c\u77e9\u5f62\u548c\u5706\u5f62\u3002LogClassCreate\u88c5\u9970\u5668\u6269\u5c55\u8be5\u7c7b\uff0c\u4e3a\u5176\u63d0\u4f9b\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6784\u9020\u51fd\u6570\u65b9\u6cd5\u3002\u56e0\u4e3a\u8fd9\u4e2a\u65b9\u6cd5\u4f7f\u7528\u3002\u3002\u3002any\u5b83\u53ef\u4ee5\u4e0e\u5177\u6709\u4efb\u610f\u6570\u91cf\u53c2\u6570\u7684\u4efb\u4f55\u6784\u9020\u51fd\u6570\u4e00\u8d77\u4f7f\u7528\u3002\n\u5f53\u7a0b\u5e8f\u542f\u52a8\u65f6\u8c03\u7528\u7c7b\u88c5\u9970\u5668\u65f6\uff0c\u5728\u521b\u5efa\u7c7b\u5b9e\u4f8b\u65f6\u6267\u884c\u533f\u540d\u5b50\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\n$npx ts node lib/classes/override2\u3002ts Create[class]with[3,5]area rect1 15 Create[class]with[5,8]area rect2 40 Create[class]with[8,13]area rect3 104 Create[class]with[20]area circ1 314.1592653589793\n\u4ee5Create\u5f00\u5934\u7684\u6d88\u606f\u6765\u81ea\u533f\u540d\u5b50\u7c7b\u4e2d\u7684\u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u662f\u5728\u5b9e\u4f8b\u5316\u7c7b\u5b9e\u4f8b\u65f6\u6267\u884c\u7684\u88c5\u9970\u5668\u4ee3\u7801\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5b83\u6b63\u786e\u5730\u5c06\u53c2\u6570\u8bb0\u5f55\u5230\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5df2\u6b63\u786e\u521d\u59cb\u5316\uff0c\u5e76\u751f\u6210\u6b63\u786e\u7684\u7ed3\u679c\u3002\u6700\u540e\u4e00\u4e2a\u5728JavaScript\u6570\u5b66\u7684\u8303\u56f4\u5185\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u6570\u5b66\u3002PI\u662f\u4e00\u4e2a\u7c97\u7565\u7684\u4f30\u8ba1\u3002\n\u9519\u8befTS1329:&#39\uff1b\u88c5\u9970\u5e08&#39\uff1b\u8fd9\u91cc\u63a5\u53d7\u7684\u53c2\u6570\u592a\u5c11\uff0c\u65e0\u6cd5\u7528\u4f5c\u88c5\u9970\u5668\u3002\u4f60\u662f\u4e0d\u662f\u6253\u7b97\u5148\u6253\u7535\u8bdd\u5199&#39@Decorator\uff08\uff09&#39\uff1b\uff1f\n\u672c\u4f8b\u4e2d\u7684\u95ee\u9898\u662f\uff0c\u5982\u4e0a\u6240\u8ff0\uff0c\u7c7b\u88c5\u9970\u5668\u9700\u8981\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6211\u4eec\u7701\u7565\u4e86\u90a3\u4e2a\u5fc5\u9700\u7684\u53c2\u6570\uff0c\u9519\u8bef\u6d88\u606f\u53ef\u80fd\u4f1a\u544a\u8bc9\u6211\u4eec\u8fd9\u4e00\u70b9\u3002\n\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u5f88\u591a\u5173\u4e8e\u8bfe\u5802\u88c5\u9970\u5e08\u7684\u77e5\u8bc6\u3002\u88c5\u9970\u5668\u63a5\u6536\u7c7b\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u8bbf\u95ee\u5927\u91cf\u6570\u636e\u3002\ndecorator\u51fd\u6570\u5728\u521b\u5efa\u7c7b\u5bf9\u8c61\u65f6\u6267\u884c\uff0c\u800c\u4e0d\u662f\u5728\u6784\u9020\u7c7b\u5b9e\u4f8b\u65f6\u6267\u884c\u3002\u8fd9\u610f\u5473\u7740\u8981\u76f4\u63a5\u5f71\u54cd\u751f\u6210\u7684\u5b9e\u4f8b\uff0c\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u5b50\u7c7b\u3002\n\u4f7f\u7528\u533f\u540d\u5b50\u7c7b\u53ef\u80fd\u5f88\u68d8\u624b\u3002\u8bbf\u95ee\u4efb\u4f55\u6dfb\u52a0\u7684\u65b9\u6cd5\u6216\u5c5e\u6027\u90fd\u9700\u8981\u8df3\u8f6c\uff0c\u88ab\u91cd\u5199\u7684\u65b9\u6cd5\u6216\u5c5e\u6027\u5c06\u900f\u660e\u5730\u6267\u884c\u3002", "note_en": "Decorators allow us to add additional information to classes or methods in TypeScript, and are similar to annotations such as in Java. Class decorators are applied to class definitions in TypeScript, and can observe, modify, or replace the class definition.\n      This article takes a deep dive into defining and using TypeScript class decorators. To use decorators, they must be enabled in TypeScript, so be sure to  review the introduction to decorators article in this series. Primarily class decorators are used to add metadata to the class, which will be used by other decorators. But, class decorators can also return a new constructor to override or replace the existing constructor, or class, adding new methods or other behavior.\n   That is, you immediately precede the  class keyword with one or more decorators. With some decorators the parameters configure its behavior. Other decorators do not require parameters, which will be explained in the documentation.\n        Let&#39;s try a simple example of a class decorator, which simply prints the data it is given.\n function  ( constructor:  Function) {  const ret = { constructor,  :  . (constructor),  :  . (constructor),  :  . (constructor),  :  . (constructor),  :  . (constructor),  : {} };  for ( const key  of  . (constructor.  prototype)) { ret. members[key] = constructor.  prototype[key]; }  console. ( `ClassDecoratorExample `, ret);}  class   {  ( x:  number, y:  number) {  console. ( `ClassDecoratorExample( ${x},  ${y})`); }  ( ) {  console. ( `method called`); }} new  ( 3,  4). ()\n The  logConstructor is the decorator function for the  @logConstructor decorator, and it implements the prescribed method signature for class decorators. This decorator does not use any parameters, and due to its implementation no parentheses are required.\n It simply prints out available information about the constructor function. For most we used methods in the  Object class to query data about the class being decorated. In a couple cases the query was against  constructor.prototype, because that object contains implementation details of methods attached to the class.\n The     decorator-inspectors package in the repository contains a more comprehensive decorator,  LogClassInspector, with a similar purpose.\n  $ npx ts-node lib/classes/first.ts ClassDecoratorExample { constructor: [ class  ClassDecoratorExample],  extensible:  false,  frozen:  false,  sealed:  false,  values: [],  properties: { length: { value:  2, writable:  false, enumerable:  false, configurable:  false }, name: { value:  &#39;ClassDecoratorExample&#39;, writable:  false, enumerable:  false, configurable:  false }, prototype: { value: {}, writable:  false, enumerable:  false, configurable:  false } }, members: { constructor: [ class  ClassDecoratorExample],  method: [ Function:  method] }} ClassDecoratorExample( 3,  4) method  called\n The values in  properties are  PropertyDescriptor objects which we&#39;ll see again and again. Most of us do not need to delve this deeply behind the scenes of JavaScript. But, to implement decorators we will need to know a few things.\n For example, did you know about the  sealed or  frozen settings on Objects? Now that I know about them, it&#39;s sure looks useful to be able to turn on either of those settings. This decorator makes it easy:\n     We can easily add multiple decorators to any decoratable thing. There is an execution order for multiple decorators, in which they execute from the bottom upwards. Hence, the output will now say  sealed: true because  @sealed will have executed first. If you place  @sealed above  logConstructor it will still say  sealed: false because  @sealed will have executed second.\n  Decorators can also take arguments.  As we said in the introduction, this requires following a different pattern called the decorator factory.\n Here is a simple class decorator example that not only shows how to pass in parameters, but helps us understand the order of execution when using multiple decorators.\n function  ( path:  string) {  console. ( `outer withParam  ${path}`);  return  ( target:  Function) =&gt; {  console. ( `inner withParam  ${path}`); };} ( &#39;first&#39;) ( &#39;middle&#39;) ( &#39;last&#39;) class   {}\n The outer function,  withParam, takes the argument list to be used with the decorator. The inner function is the decorator function, and is where the required signature is to be implemented. It is the inner function that will contain the actual decorator implementation.\n What happens is  withParam(parameter) is an expression which returns a function with the correct signature to be a class decorator. That makes the inner function the decorator function, and the outer function is a factory that generates that function.\n In this example we&#39;ve attached  withParam three times so we can learn a bit more about the execution order.\n $ npx ts -node lib /classes /constructors.ts  outer withParam  first outer withParam middle outer withParam  last inner withParam  last inner withParam middle inner withParam  first\n We discussed this in detail  in the introduction. Remember that the factory functions execute from top to bottom, and after that the decorator functions execute from bottom to top.\n  Let&#39;s examine one possible practical use for a class decorator. Namely, a framework might keep lists of classes of certain kinds. For this example we&#39;ll mimic a web app framework where certain classes hold URL routing functions. Each router class handles routes for a certain URL prefix, along with specific configuration for that route.\n const registeredClasses = []; function  ( path:  string, options ?:  object) {  return  ( constructor:  Function) =&gt; { registeredClasses. ({ constructor, path, options }); };} ( &#39;/&#39;) class   {  // routing functions} ( &#39;/blog&#39;, {  :  &#39;/blog/rss.xml&#39;}) class   {  // routing functions} console. (registeredClasses);\n Router is a factory function producing a class decorator that adds classes to the  registeredClasses array. The function takes two options, where  path is the URL path prefix, and  options is an optional configuraton object.\n Because class decorators run last, there&#39;s an option for the class decorator do something in regard to any methods or properties contained within the class. Also, the more common approach to storing data is not an array like this, but to use the  Reflection Metadata API, which we talk about later.\n  $ npx ts-node lib /classes/register.ts [ { constructor: [ class HomePageRouter], path:  &#39;/&#39;,  options: undefined }, { constructor: [ class BlogRouter], path:  &#39;/blog&#39;,  options: { rss:  &#39;/blog/rss.xml&#39; } }]\n It is up to the hypothetical framework to do something with this data. As we saw earlier, there is quite a lot of additional data that is available by starting with the  constructor object.\n  This simple examples were interesting, but let&#39;s try doing something interesting. It&#39;s promised that we can modify or replace the class definition. This will require a bit of wizardry, so let&#39;s take a look.\n Before we start, take a half a step back and think about this - The class decorator function receives the class object. It does not receive the instance that is being created. We can add properties using  Object.defineProperty(target, ...), but that property is added to the class, and not to any instance which is generated.\n To grab onto a random concept, consider an application for recording events during the day of an employee. The employee first clocks in, then after their shift they clock out. Let&#39;s create two classes to record these events, and use a decorator to automatically add a time stamp and unique identifier.\n import { v4  as uuidv4 }  from  &#39;uuid&#39;; function  &lt;T  extends {  (... :  any[]): {}}&gt;( : T) {  return  class   target { uuid =  (); created =  new  (). ( &#34;en-US&#34;);  ( msg:  string) {  console. ( `Extended  ${msg}`); } }}  class   {  // methods and properties}  class   {  // methods and properties}\n The  TimeStamp decorator has a curious declaration, but this does work, it comes out of the official TypeScript documentation, and does match the required signature for class decorator functions. It appears the  extends clause has something to do with extending a generic class, and therefore T in this case matches any class definition.\n The part with  &lt;T extends { new(...args: any[]): {}}&gt; is a Generic, where  T is defined as something which extends any class. This syntax comes directly from the TypeScript documentation, and is perhaps a more precise way of declaring a class decorator.\n The part with  return class extends target is a class operation, and will create a new class that extends the class being decorated. To this new class we&#39;ve added two fields, and a function. The  uuid field is meant to be a unique identifier, and the  created field is a time stamp.\n    We&#39;re generating two instances of  ClockIn to verify that each instance gets a unique identifier. We then print out some pieces of data.\n  $ npx ts-node lib/classes/timestamp.ts  ClockIn {  uuid:  &#39;bc3e6f35-c85d-491d-82c0-c906deacc774&#39;, created:  &#39;2/10/2022, 6:11:53 PM&#39;} ClockIn {  uuid:  &#39;13eb2df6-b9e7-4735-9130-a7ee13182d33&#39;, created:  &#39;2/10/2022, 6:11:53 PM&#39;} ClockOut {  uuid:  &#39;31ce8e88-90e0-40d7-9eb2-cbba5c879b5d&#39;, created:  &#39;2/10/2022, 6:11:53 PM&#39;} true bc3e6f35-c85d-491d-82c0-c906deacc774bc3e6f35-c85d-491d-82c0-c906deacc774Extended WorldExtended World  #2\n Our objects do have the added fields, and the two ClockIn instances have different identifiers.\n Where the code became interesting was trying to directly access a field, such as  ci.uuid. The compiler gives us an error saying the named field does not exist on the type, presumably because the ClockIn class does not have a field named  uuid. But we learn by calling  hasOwnProperty that the added properties do exist, and we can access the properties using  ci[&#39;uuid&#39;] or by casting  ci to  any as in  (&lt;any&gt;ci).uuid.\n While we managed to modify the class using a decorator, the result is on the tricky side. Accessing the added properties is unnatural, in this case, making it unattractive to use.\n The TypeScript documentation demonstrates the same issue. Their example shows adding a field,  reportingURL, via the same mechanism. But an attempt to access that property throws an error,  Property &#39;reportingURL&#39; does not exist on type &#39;BugReport&#39;. It&#39;s explained that because the TypeScript type has not changed, the type system does not know about the added properties. As we&#39;ve demonstrated, those properties are there, and the properties are available by jumping through a hoop.\n But, what happens if we instead override a field defined in the class. Consider this:\n function  &lt;T  extends {  (... :  any[]): {} }&gt;( : T) {  return  class   target {  ( w:  number, h:  number) {  return { w, h,  : w * h }; } }}  class   {  ( w:  number, h:  number) {  return w * h; }} console. ( new  (). ( 5,  6)); console. ( new  (). ( 6,  7));\n We have a class,  Overridden, and a decorator named  Override. The class has a function named  area which simply returns the obvious value, the result of multiplying  width and  height. The overridden version returns an anonymous object containing.\n   Clearly, this did successfully replace the original function with the new one. Further, we did not have to jump through any hoops to access the overriding functionality.\n What happens if you override a class constructor in the anonymous subclass inside a class decorator?\n For example, there are many decorator libraries in the npm/yarn repository focused on logging object creation, method calls, and property accesses. To learn a little how that works, let&#39;s look at one way to print a log message when an instance of a class is created.\n import *  as util  from  &#39;util&#39;; function  &lt;T  extends {  (... :  any[]): {}}&gt;( : T) {  return  class   target {  ( ...args:  any[]) {  super(...args);  console. ( `Create  ${util.inspect(target)} with args=`, args); } }}  class   {  :  number;  :  number;  ( width:  number, height:  number) {  this. height = height;  this. width = width; }  ( ) {  return  this. width *  this. height; }}  class   {  :  number;  ( diameter:  number) {  this. diameter = diameter; }  ( ) {  return (( this. diameter /  2) **  2) * ( . PI); }} const rect1 =  new  ( 3,  5); console. ( `area rect1  ${rect1.area()}`); const rect2 =  new  ( 5,  8); console. ( `area rect2  ${rect2.area()}`); const rect3 =  new  ( 8,  13); console. ( `area rect3  ${rect3.area()}`); const circ1 =  new  ( 20); console. ( `area circ1  ${circ1.area()}`);\n We have two simple classes, Rectangle and Circle. The  LogClassCreate decorator extends the class to give it a custom  constructor method. Because this method uses  ...any it can be used with any constructor with any number of arguments.\n While the class decorator is invoked when the program launches, the constructor for the anonymous subclass is executed when class instances are created.\n  $ npx ts-node lib/classes/override2.ts  Create [  class  ]  with   [ 3, 5 ]area rect1  15 Create [  class  ]  with   [ 5, 8 ]area rect2  40 Create [  class  ]  with   [ 8, 13 ]area rect3  104 Create [  class  ]  with   [ 20 ]area circ1  314.1592653589793\n The messages starting with  Create come from inside the constructor in the anonymous subclass. Indeed, this is decorator code which is executing when instantiating a class instance.\n Notice that it correctly records the parameters to the constructor, and that each object is correctly initialized, and produces the correct results. Well, the last one is correct within the limits of JavaScript mathematics, since  Math.PI is a rough estimate.\n     error TS1329: &#39;Decorator&#39; accepts too few arguments to be used as a decorator here. Did you mean to call it first and write &#39;@Decorator()&#39;?\n The issue in this case is that class decorators are, as said above, required to take one argument, which is the constructor for a class. We left off that required parameter, and the error messages kinda-sorta-maybe-possibly is telling us so.\n  We have learned quite a bit about class decorators. The decorator receives the class object, and from it we can access quite a lot of data.\n The decorator function executes when the class object is created, rather than when class instances are constructed. It means to directly influence anything about generated instances, we must create an anonymous subclass.\n Working with the anonymous subclass can be tricky. Accessing any added methods or properties requires jumping through hoops, where overridden methods or properties execute transparently.", "posttime": "2022-02-17 03:57:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ecb\u7ecd,introduction,\u51fd\u6570", "title": "\u6df1\u5165\u4ecb\u7ecdTypeScript\u4e2d\u7684\u7c7b\u88c5\u9970\u5668", "title_en": "Deep introduction to class decorators in TypeScript", "transed": 1, "url": "https://techsparx.com/nodejs/typescript/decorators/classes.html", "via": "", "real_tags": ["\u4ecb\u7ecd", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073685, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u4e86\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\u6765\u6267\u884cN\u91cf\u5b50\u4f4dToffoli\u95e8\uff0c\u8fd9\u662f\u4e00\u79cd\u66f4\u6709\u6548\u7684\u91cf\u5b50\u64cd\u4f5c\uff0c\u6709\u52a9\u4e8e\u6269\u5c55\u91cf\u5b50\u7b97\u6cd5\n\u4eca\u5929\uff0c\u675c\u514b\u5927\u5b66\u675c\u514b\u91cf\u5b50\u4e2d\u5fc3\uff08DQC\uff09\u548cIonQ\uff08NYSE:IonQ\uff09\u5ba3\u5e03\u53d1\u660e\u4e86\u4e00\u79cd\u65b0\u7684\u91cf\u5b50\u8ba1\u7b97\u64cd\u4f5c\uff0c\u5b83\u6709\u53ef\u80fd\u52a0\u901f\u51e0\u79cd\u5173\u952e\u7684\u91cf\u5b50\u8ba1\u7b97\u6280\u672f\uff0c\u5e76\u6709\u52a9\u4e8e\u6269\u5c55\u91cf\u5b50\u7b97\u6cd5\u3002\u65b0\u7684\u91cf\u5b50\u95e8\u662f\u4e00\u79cd\u540c\u65f6\u5728\u591a\u4e2a\u8fde\u63a5\u7684\u91cf\u5b50\u6bd4\u7279\u4e0a\u8fd0\u884c\u7684\u65b0\u65b9\u6cd5\uff0c\u5b83\u5229\u7528\u4e86\u4ec5\u5728IonQ\u548cDQC\u91cf\u5b50\u8ba1\u7b97\u673a\u4e0a\u53ef\u7528\u7684\u591a\u91cf\u5b50\u6bd4\u7279\u901a\u4fe1\u603b\u7ebf\u3002\u6d47\u53e3\u6280\u672f\u7684\u5b8c\u6574\u7ec6\u8282\u53ef\u5728\u9884\u5370\u672c\u5b58\u6863arXiv\u4e0a\u627e\u5230\uff0c\u7f51\u5740\u4e3a\uff1a2202.04230\u3002\n\u65b0\u7684\u95e8\u7cfb\u5217\u5305\u62ecN\u91cf\u5b50\u4f4dToffoli\u95e8\uff0c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u5176\u4ed6\u91cf\u5b50\u4f4d\u90fd\u5904\u4e8e\u7279\u5b9a\u72b6\u6001\u65f6\uff0c\u5b83\u624d\u4f1a\u7ffb\u8f6c\u4e00\u4e2a\u9009\u5b9a\u7684\u91cf\u5b50\u4f4d\u3002\u4e0e\u6807\u51c6\u7684\u53cc\u91cf\u5b50\u4f4d\u91cf\u5b50\u8ba1\u7b97\u95e8\u4e0d\u540c\uff0cN\u91cf\u5b50\u4f4dToffoli\u95e8\u4e00\u6b21\u4f5c\u7528\u4e8e\u591a\u4e2a\u91cf\u5b50\u4f4d\uff0c\u5bfc\u81f4\u66f4\u9ad8\u6548\u7684\u64cd\u4f5c\u3002\u95e8\u5728\u8bb8\u591a\u5e38\u89c1\u7684\u91cf\u5b50\u7b97\u6cd5\u4e2d\u81ea\u7136\u51fa\u73b0\u3002\nIonQ\u548cDuke\u7684\u53d1\u73b0\u53ef\u80fd\u4f1a\u5728\u89e3\u51b3\u57fa\u672c\u91cf\u5b50\u7b97\u6cd5\uff08\u5982Grover\u7684\u641c\u7d22\u7b97\u6cd5\u3001\u53d8\u5206\u91cf\u5b50\u672c\u5f81\u89e3\u7b97\u5668\uff08VQE\uff09\u4ee5\u53ca\u52a0\u6cd5\u548c\u4e58\u6cd5\u7b49\u7b97\u672f\u8fd0\u7b97\uff09\u65b9\u9762\u5e26\u6765\u663e\u8457\u7684\u6548\u7387\u63d0\u5347\u3002\u8fd9\u4e9b\u7528\u4f8b\u5728\u91cf\u5b50\u8ba1\u7b97\u5e94\u7528\u4e2d\u65e0\u5904\u4e0d\u5728\uff0c\u662fIonQ\u5728\u91cf\u5b50\u5316\u5b66\u3001\u91cf\u5b50\u91d1\u878d\u548c\u91cf\u5b50\u673a\u5668\u5b66\u4e60\u65b9\u9762\u5de5\u4f5c\u7684\u6838\u5fc3\u3002\u5b83\u4eec\u4e5f\u662f\u516c\u8ba4\u7684\u91cf\u5b50\u8ba1\u7b97\u673a\u884c\u4e1a\u57fa\u51c6\u7684\u5173\u952e\u7ec4\u6210\u90e8\u5206\uff0c\u8fd9\u4e9b\u57fa\u51c6\u5df2\u7ecf\u8868\u660eIonQ\u7684\u8ba1\u7b97\u673a\u662f\u660e\u786e\u7684\u884c\u4e1a\u9886\u5bfc\u8005\u3002\nIonQ\u9996\u5e2d\u6267\u884c\u5b98\u5f7c\u5f97\u00b7\u67e5\u666e\u66fc\uff08Peter Chapman\uff09\u8bf4\uff1a\u201c\u8fd9\u4e00\u53d1\u73b0\u662f\u6211\u4eec\u7ee7\u7eed\u5728\u6211\u4eec\u5df2\u7ecf\u5efa\u7acb\u7684\u9886\u5148\u6280\u672f\u67b6\u6784\u57fa\u7840\u4e0a\u53d1\u5c55\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u5b83\u589e\u52a0\u4e86\u6211\u4eec\u4e3a\u91cf\u5b50\u8ba1\u7b97\u5e94\u7528\u5f00\u53d1\u7684\u72ec\u7279\u800c\u5f3a\u5927\u7684\u529f\u80fd\u3002\u201d\u3002\n\u8fd9\u9879\u7814\u7a76\u7531\u5965\u5c14\u00b7\u5361\u8328\u535a\u58eb\u3001\u9a6c\u5c14\u79d1\u00b7\u585e\u8482\u7eb3\u6559\u6388\u548cIonQ\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u79d1\u5b66\u5bb6\u514b\u91cc\u65af\u6258\u5f17\u00b7\u95e8\u7f57\u6559\u6388\u5728\u675c\u514b\u5927\u5b66\u8fdb\u884c\uff0c\u5c06\u88ab\u96c6\u6210\u5230IonQ\u7684\u91cf\u5b50\u8ba1\u7b97\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4f9b\u516c\u4f17\u4f7f\u7528\u3002\u95e8\u7f57\u6307\u51fa\uff0c\u201c\u6ca1\u6709\u5176\u4ed6\u53ef\u7528\u7684\u91cf\u5b50\u8ba1\u7b97\u67b6\u6784\uff0c\u751a\u81f3\u8fde\u5176\u4ed6\u57fa\u4e8e\u79bb\u5b50\u7684\u91cf\u5b50\u8ba1\u7b97\u673a\u90fd\u65e0\u6cd5\u5229\u7528\u8fd9\u79cd\u65b0\u7684N\u91cf\u5b50\u6bd4\u7279\u95e8\u5bb6\u65cf\u3002\u8fd9\u662f\u56e0\u4e3aIonQ\u7684\u91cf\u5b50\u8ba1\u7b97\u673a\u5177\u6709\u72ec\u7279\u7684\u5168\u8fde\u901a\u6027\u548c\u5bbd\u901a\u4fe1\u603b\u7ebf\uff0c\u5141\u8bb8\u6240\u6709\u91cf\u5b50\u6bd4\u7279\u540c\u65f6\u76f8\u4e92\u901a\u4fe1\u3002\u201d\n\u5728\u8fd9\u4e00\u53d1\u73b0\u4e4b\u524d\uff0cIonQ\u53d1\u5e03\u4e86\u4e00\u7cfb\u5217\u5173\u4e8e\u5176\u7814\u7a76\u5de5\u4f5c\u548c\u89c4\u6a21\u5316\u51c6\u5907\u7684\u516c\u544a\u3002\u53bb\u5e7412\u6708\uff0cIonQ\u5ba3\u5e03\u8ba1\u5212\u5728\u5176\u7cfb\u7edf\u4e2d\u4f7f\u7528\u94a1\u79bb\u5b50\u4f5c\u4e3a\u91cf\u5b50\u4f4d\uff0c\u8fd9\u5e26\u6765\u4e86\u4e00\u7cfb\u5217\u5b83\u8ba4\u4e3a\u80fd\u591f\u5b9e\u73b0\u9ad8\u7ea7\u91cf\u5b50\u8ba1\u7b97\u67b6\u6784\u7684\u4f18\u52bf\u3002\u53bb\u5e74\uff0c\u8be5\u56e2\u961f\u8fd8\u9996\u6b21\u63a8\u51fa\u4e86\u4e1a\u754c\u9996\u521b\u7684\u53ef\u91cd\u6784\u591a\u6838\u91cf\u5b50\u4f53\u7cfb\u7ed3\u6784\u548c\u84b8\u53d1\u73bb\u7483\u9677\u9631\u6280\u672f\uff0c\u8fd9\u4e24\u9879\u6280\u672f\u9884\u8ba1\u5c06\u6709\u52a9\u4e8e\u6269\u5927IonQ\u91cf\u5b50\u8ba1\u7b97\u673a\u4e2d\u7684\u91cf\u5b50\u4f4d\u6570\u91cf\u3002\nIonQ\uff0cInc.\u662f\u91cf\u5b50\u8ba1\u7b97\u9886\u57df\u7684\u9886\u5bfc\u8005\uff0c\u5728\u521b\u65b0\u548c\u90e8\u7f72\u65b9\u9762\u6709\u7740\u826f\u597d\u7684\u8bb0\u5f55\u3002IonQ\u7684\u4e0b\u4e00\u4ee3\u91cf\u5b50\u8ba1\u7b97\u673a\u662f\u4e16\u754c\u4e0a\u6700\u5f3a\u5927\u7684\u56da\u7981\u79bb\u5b50\u91cf\u5b50\u8ba1\u7b97\u673a\uff0cIonQ\u5df2\u7ecf\u5b9a\u4e49\u4e86\u5b83\u8ba4\u4e3a\u662f\u5b9e\u73b0\u89c4\u6a21\u5316\u7684\u6700\u4f73\u9014\u5f84\u3002\nIonQ\u662f\u552f\u4e00\u4e00\u5bb6\u901a\u8fc7Amazon Braket\u3001Microsoft Azure\u548cGoogle cloud\u4e0a\u7684\u4e91\u4ee5\u53ca\u76f4\u63a5API\u8bbf\u95ee\u63d0\u4f9b\u91cf\u5b50\u7cfb\u7edf\u7684\u516c\u53f8\u3002IonQ\u7531\u514b\u91cc\u65af\u6258\u5f17\u00b7\u95e8\u7f57\uff08Christopher Monroe\uff09\u548c\u91d1\u6b63\u751f\uff08Jungsang Kim\uff09\u572825\u5e74\u7684\u5f00\u62d3\u6027\u7814\u7a76\u57fa\u7840\u4e0a\u4e8e2015\u5e74\u6210\u7acb\u3002\u8981\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95eewww.ionq\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002\n\u672c\u65b0\u95fb\u7a3f\u5305\u542b\u7ecf\u4fee\u8ba2\u7684\u300a1933\u5e74\u8bc1\u5238\u6cd5\u300b\u7b2c27A\u8282\u548c\u7ecf\u4fee\u8ba2\u7684\u300a1934\u5e74\u8bc1\u5238\u4ea4\u6613\u6cd5\u300b\u7b2c21E\u8282\u6240\u6307\u7684\u67d0\u4e9b\u524d\u77bb\u6027\u58f0\u660e\u3002\u4e00\u4e9b\u524d\u77bb\u6027\u9648\u8ff0\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u524d\u77bb\u6027\u8bcd\u8bed\u6765\u8bc6\u522b\u3002\u975e\u5386\u53f2\u6027\u9648\u8ff0\uff0c\u5305\u62ec\u201c\u9884\u671f\u201d\u3001\u201c\u9884\u671f\u201d\u3001\u201c\u5efa\u8bae\u201d\u3001\u201c\u8ba1\u5212\u201d\u3001\u201c\u76f8\u4fe1\u201d\u3001\u201c\u6253\u7b97\u201d\u3001\u201c\u4f30\u8ba1\u201d\u3001\u201c\u76ee\u6807\u201d\u3001\u201c\u9879\u76ee\u201d\u3001\u201c\u5e94\u8be5\u201d\u3001\u201c\u53ef\u80fd\u201d\u3001\u201c\u4f1a\u201d\u3001\u201c\u53ef\u80fd\u201d\u3001\u201c\u4f1a\u201d\u3001\u201c\u9884\u6d4b\u201d\u7b49\u8bcd\u8bed\uff0c\u65e8\u5728\u8bc6\u522b\u524d\u77bb\u6027\u9648\u8ff0\u3002\u8fd9\u4e9b\u58f0\u660e\u5305\u62ec\u90a3\u4e9b\u4e0e\u5728\u89e3\u51b3\u57fa\u672c\u91cf\u5b50\u7b97\u6cd5\u65b9\u9762\u53d6\u5f97\u663e\u8457\u6548\u7387\u63d0\u9ad8\u7684\u6f5c\u5728\u6210\u5c31\u6709\u5173\u7684\u58f0\u660e\uff1b\u65b0\u7684N\u91cf\u5b50\u4f4d\u95e8\u5bb6\u65cf\u4e0eIonQ\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u96c6\u6210\uff1bIonQ\u8ba1\u5212\u5728\u5176\u7cfb\u7edf\u4e2d\u4f7f\u7528\u94a1\u79bb\u5b50\u4f5c\u4e3a\u91cf\u5b50\u4f4d\uff0c\u5e26\u6765\u4e86\u4e00\u7cfb\u5217\u5b83\u8ba4\u4e3a\u80fd\u591f\u5b9e\u73b0\u9ad8\u7ea7\u91cf\u5b50\u8ba1\u7b97\u67b6\u6784\u7684\u4f18\u52bf\uff1bIonQ\u8ba1\u5212\u4f7f\u7528\u53ef\u91cd\u65b0\u914d\u7f6e\u7684\u591a\u6838\u91cf\u5b50\u4f53\u7cfb\u7ed3\u6784\u548c\u84b8\u53d1\u73bb\u7483\u9677\u9631\u6280\u672f\uff0c\u8fd9\u4e24\u79cd\u6280\u672f\u9884\u8ba1\u90fd\u5c06\u6709\u52a9\u4e8e\u6269\u5927IonQ\u91cf\u5b50\u8ba1\u7b97\u673a\u4e2d\u7684\u91cf\u5b50\u4f4d\u6570\u91cf\uff1bIonQ\u8fdb\u4e00\u6b65\u5f00\u53d1\u548c\u63d0\u5347\u5176\u91cf\u5b50\u8ba1\u7b97\u673a\u5e76\u5b9e\u73b0\u89c4\u6a21\u5316\u7684\u80fd\u529b\uff1bIonQ\u7684\u5e02\u573a\u673a\u4f1a\u548c\u9884\u671f\u589e\u957f\uff1b\u4ee5\u53ca\u4f7f\u7528\u91cf\u5b50\u8ba1\u7b97\u89e3\u51b3\u65b9\u6848\u7ed9\u5ba2\u6237\u5e26\u6765\u7684\u5546\u4e1a\u5229\u76ca\u3002\u524d\u77bb\u6027\u9648\u8ff0\u662f\u57fa\u4e8e\u5f53\u524d\u9884\u671f\u548c\u5047\u8bbe\u7684\u5173\u4e8e\u672a\u6765\u4e8b\u4ef6\u7684\u9884\u6d4b\u3001\u9884\u6d4b\u548c\u5176\u4ed6\u9648\u8ff0\uff0c\u56e0\u6b64\u4f1a\u53d7\u5230\u98ce\u9669\u548c\u4e0d\u786e\u5b9a\u6027\u7684\u5f71\u54cd\u3002\u8bb8\u591a\u56e0\u7d20\u53ef\u80fd\u5bfc\u81f4\u5b9e\u9645\u7684\u672a\u6765\u4e8b\u4ef6\u4e0e\u672c\u65b0\u95fb\u7a3f\u4e2d\u7684\u524d\u77bb\u6027\u58f0\u660e\u5b58\u5728\u91cd\u5927\u5dee\u5f02\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u91cf\u5b50\u8ba1\u7b97\u89e3\u51b3\u65b9\u6848\u548cIonQ\u4ea7\u54c1\u3001\u670d\u52a1\u548c\u89e3\u51b3\u65b9\u6848\u7684\u5e02\u573a\u91c7\u7528\uff1bIonQ\u4fdd\u62a4\u5176\u77e5\u8bc6\u4ea7\u6743\u7684\u80fd\u529b\uff1bIonQ\u8fd0\u8425\u7684\u7ade\u4e89\u6027\u884c\u4e1a\u7684\u53d8\u5316\uff1b\u5f71\u54cdIonQ\u4e1a\u52a1\u7684\u6cd5\u5f8b\u6cd5\u89c4\u53d8\u5316\uff1bIonQ\u5b9e\u65bd\u5176\u4e1a\u52a1\u8ba1\u5212\u3001\u9884\u6d4b\u548c\u5176\u4ed6\u9884\u671f\u7684\u80fd\u529b\uff0c\u4ee5\u53ca\u8bc6\u522b\u548c\u5b9e\u73b0\u5176\u4ed6\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u548c\u673a\u4f1a\u7684\u80fd\u529b\uff1b2019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u6d41\u884c\u7684\u7ed3\u679c\uff0c\u5305\u62ec\u5e02\u573a\uff0c\u6280\u672f\u4ea7\u4e1a\u7684\u8870\u9000\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u3002\u4e0a\u8ff0\u56e0\u7d20\u6e05\u5355\u5e76\u975e\u8be6\u5c3d\u65e0\u9057\u3002\u60a8\u5e94\u8be5\u4ed4\u7ec6\u8003\u8651\u4e0a\u8ff0\u56e0\u7d20\u548c\u5176\u4ed6\u98ce\u9669\u548c\u4e0d\u786e\u5b9a\u6027\uff0c\u57282021\u5e749\u670830\u65e5\u7684\u5b63\u5ea610-Q\u7684IONQ\u5b63\u5ea6\u62a5\u544a\u7684\u201c\u98ce\u9669\u56e0\u7d20\u201d\u90e8\u5206\u548c\u7531IONQ\u63d0\u4ea4\u7684\u5176\u4ed6\u6587\u4ef6\u4e0d\u65f6\u4e0e\u7f8e\u56fd\u8bc1\u5238\u4ea4\u6613\u59d4\u5458\u4f1a\uff08SEC\uff09\u3002\u8fd9\u4e9b\u6587\u4ef6\u786e\u5b9a\u5e76\u89e3\u51b3\u4e86\u5176\u4ed6\u53ef\u80fd\u5bfc\u81f4\u5b9e\u9645\u4e8b\u4ef6\u548c\u7ed3\u679c\u4e0e\u524d\u77bb\u6027\u58f0\u660e\u4e2d\u5305\u542b\u7684\u91cd\u5927\u5dee\u5f02\u7684\u91cd\u8981\u98ce\u9669\u548c\u4e0d\u786e\u5b9a\u6027\u3002\u524d\u77bb\u6027\u58f0\u660e\u4ec5\u5728\u4f5c\u51fa\u4e4b\u65e5\u8d77\u751f\u6548\u3002\u63d0\u9192\u8bfb\u8005\u4e0d\u8981\u8fc7\u5ea6\u4f9d\u8d56\u524d\u77bb\u6027\u9648\u8ff0\uff0cIonQ\u4e0d\u627f\u62c5\u4efb\u4f55\u4e49\u52a1\uff0c\u4e5f\u4e0d\u6253\u7b97\u66f4\u65b0\u6216\u4fee\u6539\u8fd9\u4e9b\u524d\u77bb\u6027\u9648\u8ff0\uff0c\u65e0\u8bba\u662f\u7531\u4e8e\u65b0\u4fe1\u606f\u3001\u672a\u6765\u4e8b\u4ef6\u8fd8\u662f\u5176\u4ed6\u539f\u56e0\u3002IonQ\u4e0d\u4fdd\u8bc1\u5b83\u4f1a\u8fbe\u5230\u9884\u671f\u3002", "note_en": "Researchers discover a new method to perform the N-qubit Toffoli gate, a more efficient quantum operation helpful in scaling quantum algorithms\n          Today, the Duke Quantum Center (DQC) at Duke University and IonQ (NYSE: IONQ) announced the invention of a new quantum computing operation with the potential to accelerate several key quantum computing techniques and contribute to scaling quantum algorithms. The new quantum gate is a novel way to operate on many connected qubits at once and leverages the multi-qubit communication bus available only on IonQ and DQC quantum computers. Full details of the gate technique can be found on the preprint archive arXiv at  arXiv:2202.04230.\n  The new gate family includes the N-qubit Toffoli gate, which flips a select qubit if and only if all the other qubits are in a particular state. Unlike standard two-qubit quantum computing gates, the N-qubit Toffoli gate acts on many qubits at once, leading to more efficient operations. The gate appears naturally in many common quantum algorithms.\n  IonQ and Duke\u2019s discovery may lead to significant efficiency gains in solving fundamental quantum algorithms, such as Grover\u2019s search algorithm, variational quantum eigensolvers (VQEs), and arithmetic operations like addition and multiplication. These use cases are ubiquitous across quantum computing applications, and are core to IonQ\u2019s work in quantum chemistry, quantum finance, and quantum machine learning. They are also key components of commonly accepted industry benchmarks for quantum computers, which have already  shown IonQ\u2019s computers to be clear industry leaders.\n  \u201cThis discovery is an example of us continuing to build on the leading technical architecture we&#39;ve established. It adds to the unique and powerful capabilities we are developing for quantum computing applications,&#34; said Peter Chapman, CEO at IonQ.\n  This research, conducted at Duke by Dr. Or Katz, Prof. Marko Cetina, and IonQ co-Founder and Chief Scientist Prof. Christopher Monroe, will be integrated into IonQ\u2019s quantum computing operating system for the general public to use. Monroe notes that, \u201cno other available quantum computing architectures\u2014not even other ion-based quantum computers\u2014are able to utilize this new family of N-qubit gates. This is because IonQ\u2019s quantum computers uniquely feature full connectivity and a wide communication bus that allows all qubits to talk to each other simultaneously.\u201d\n  This discovery follows a series of announcements around IonQ\u2019s research efforts and preparations for scale. In December, IonQ announced that it  plans to use barium ions as qubits in its systems, bringing about a wave of advantages it believes will enable advanced quantum computing architectures. Last year, the team also debuted the industry first  Reconfigurable Multicore Quantum Architecture and Evaporated Glass Trap technology, both of which are expected to contribute to scaling the number of qubits in IonQ\u2019s quantum computers.\n    IonQ, Inc. is a leader in quantum computing, with a proven track record of innovation and deployment. IonQ\u2019s next-generation quantum computer is the world\u2019s most powerful trapped-ion quantum computer, and IonQ has defined what it believes is the best path forward to scale.\n  IonQ is the only company with its quantum systems available through the cloud on Amazon Braket, Microsoft Azure, and Google Cloud, as well as through direct API access. IonQ was founded in 2015 by Christopher Monroe and Jungsang Kim based on 25 years of pioneering research. To learn more, visit  www.ionq.com.\n    This press release contains certain forward-looking statements within the meaning of Section 27A of the Securities Act of 1933, as amended, and Section 21E of the Securities Exchange Act of 1934, as amended. Some of the forward-looking statements can be identified by the use of forward-looking words. Statements that are not historical in nature, including the words \u201canticipate,\u201d \u201cexpect,\u201d \u201csuggests,\u201d \u201cplan,\u201d \u201cbelieve,\u201d \u201cintend,\u201d \u201cestimates,\u201d \u201ctargets,\u201d \u201cprojects,\u201d \u201cshould,\u201d \u201ccould,\u201d \u201cwould,\u201d \u201cmay,\u201d \u201cwill,\u201d \u201cforecast\u201d and other similar expressions are intended to identify forward-looking statements. These statements include those related to the potential achievement of significant efficiency gains in solving fundamental quantum algorithms; the integration of the new N-qubit family of gates with IonQ\u2019s quantum computers; IonQ\u2019s plans to use barium ions as qubits in its systems, bringing about a wave of advantages it believes will enable advanced quantum computing architectures; IonQ\u2019s plans to use Reconfigurable Multicore Quantum Architecture and Evaporated Glass Trap technology, both of which are expected to contribute to scaling the number of qubits in IonQ\u2019s quantum computers; IonQ\u2019s ability to further develop and advance its quantum computers and achieve scale; IonQ\u2019s market opportunity and anticipated growth; and the commercial benefits to customers of using quantum computing solutions. Forward-looking statements are predictions, projections and other statements about future events that are based on current expectations and assumptions and, as a result, are subject to risks and uncertainties. Many factors could cause actual future events to differ materially from the forward-looking statements in this press release, including but not limited to: market adoption of quantum computing solutions and IonQ\u2019s products, services and solutions; the ability of IonQ to protect its intellectual property; changes in the competitive industries in which IonQ operates; changes in laws and regulations affecting IonQ\u2019s business; IonQ\u2019s ability to implement its business plans, forecasts and other expectations, and identify and realize additional partnerships and opportunities; and the risk of downturns in the market and the technology industry including, but not limited to, as a result of the COVID-19 pandemic. The foregoing list of factors is not exhaustive. You should carefully consider the foregoing factors and the other risks and uncertainties described in the \u201cRisk Factors\u201d section of IonQ\u2019s Quarterly Report on Form 10-Q for the quarter ended September 30, 2021 and other documents filed by IonQ from time to time with the Securities and Exchange Commission. These filings identify and address other important risks and uncertainties that could cause actual events and results to differ materially from those contained in the forward-looking statements. Forward-looking statements speak only as of the date they are made. Readers are cautioned not to put undue reliance on forward-looking statements, and IonQ assumes no obligation and does not intend to update or revise these forward-looking statements, whether as a result of new information, future events, or otherwise. IonQ does not give any assurance that it will achieve its expectations.", "posttime": "2022-02-17 03:55:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5927\u5b66,\u5f00\u53d1,ionq,university,\u91cf\u5b50", "title": "\u675c\u514b\u5927\u5b66\u548cIonQ\u5f00\u53d1\u4e86\u65b0\u7684\u91cf\u5b50\u8ba1\u7b97\u95e8", "title_en": "Duke University and IonQ Develop New Quantum Computing Gate", "transed": 1, "url": "https://ionq.com/news/february-10-2022-duke-ionq-new-qc-gate", "via": "", "real_tags": ["\u5927\u5b66", "\u5f00\u53d1", "ionq", "\u91cf\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073684, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "API\u662f\u73b0\u4ee3web\u5f00\u53d1\u7684\u57fa\u77f3\u3002\u73b0\u4ee3API\u7684\u5e7f\u6cdb\u751f\u6001\u7cfb\u7edf\u6b63\u5728\u5e2e\u52a9\u5f00\u53d1\u56e2\u961f\u629b\u5f03\u4f20\u7edf\u7684\u5355\u4e00web\u5e94\u7528\u7a0b\u5e8f\uff0c\u8f6c\u800c\u91c7\u7528\u66f4\u5feb\u3001\u66f4\u5b89\u5168\u7684\u89e3\u8026\u4f53\u7cfb\u7ed3\u6784\uff0c\u5c06\u8868\u793a\u5c42\u4e0e\u540e\u7aef\u903b\u8f91\u5206\u79bb\u5f00\u6765\u3002\u7136\u800c\uff0c\u867d\u7136API\u9996\u6b21\u5f00\u53d1\u5bf9\u5de5\u7a0b\u5e08\u6765\u8bf4\u662f\u4e00\u4e2a\u5206\u6c34\u5cad\u65f6\u523b\uff0c\u4f46\u5b83\u4e5f\u5e26\u6765\u4e86\u65b0\u7684\u590d\u6742\u6027\u3002\u53d1\u73b0\u3001\u4fdd\u62a4\u3001\u5b66\u4e60\u548c\u7ba1\u7406\u8fd9\u4e9bAPI\u7684\u8fc7\u7a0b\u4e00\u76f4\u662f\u4e00\u4e2a\u6311\u6218\u3002\n\u4eca\u5929\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03Netlify Graph\u2014\u2014\u4e00\u79cd\u57fa\u4e8eGraphQL\u7684\u4f53\u9a8c\uff0c\u65e8\u5728\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u66f4\u5feb\u5730\u6784\u5efa\u4ea4\u4e92\u5f0f\u548c\u4e92\u8054\u7684web\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u662fGraphQL\u7684\u627f\u8bfa\uff0c\u73b0\u5728\u4f5c\u4e3aNetlify web\u5f00\u53d1\u5de5\u4f5c\u6d41\u7684\u4e00\u90e8\u5206\uff0c\u6240\u6709\u5f00\u53d1\u56e2\u961f\u90fd\u53ef\u4ee5\u8f7b\u677e\u8bbf\u95ee\u5b83\u3002\u6709\u4e86Netlify Graph\uff0c\u5f00\u53d1\u4eba\u5458\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528API\uff0c\u800c\u4e0d\u7528\u82b1\u65f6\u95f4\u7f16\u5199\u65e0\u5dee\u522b\u7684\u7c98\u5408\u4ee3\u7801\uff0c\u5b66\u4e60\u6bcf\u4e00\u4e2aAPI&#39\uff1b\u5b83\u5177\u6709\u72ec\u7279\u7684\u7ed3\u6784\uff0c\u6216\u8005\u7531\u65e0\u6570\u4e2a\u7aef\u70b9\u7ec4\u6210\uff0c\u4ee5\u4fbf\u5c06\u5404\u79cdAPI\u4e2d\u7684\u6570\u636e\u8f93\u5165\u5e94\u7528\u7a0b\u5e8f\u3002\nNetlify Graph\u5df2\u8fdb\u5165\u516c\u6d4b\uff0c\u5e76\u5728\u5168\u7403\u8303\u56f4\u5185\u63d0\u4f9b\u3002\u5b83\u4ece\u4e00\u4e2a\u76ee\u5f55\u5f00\u59cb\uff0c\u5176\u4e2d\u5305\u62ec\u5f00\u53d1\u56e2\u961f\u4f7f\u7528\u7684\u4e00\u4e9b\u6700\u5e38\u88ab\u8bf7\u6c42\u7684API\uff0c\u6bd4\u5982GitHub\u3001Stripe\u548cSalesforce\u3002\u6211\u4eec\u5c06\u5728\u672a\u6765\u51e0\u4e2a\u6708\u589e\u52a0\u66f4\u591a\u3002\n\u5f53\u60a8\u5728Netlify\u4eea\u8868\u677f\u4e2d\u8fde\u63a5API\u65f6\uff0c\u5b83\u5c06\u5728\u7ad9\u70b9\u7684\u4e2d\u5fc3\u6570\u636e\u56fe\u4e2d\u81ea\u52a8\u542f\u7528\u3002\u4f5c\u4e3a\u4e00\u540d\u5f00\u53d1\u4eba\u5458\uff0c\u4f60\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u5411\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u516c\u5f00\u548c\u63d0\u4f9b\u4ec0\u4e48\u7c7b\u578b\u7684\u6570\u636e\u3002\n\u6dfb\u52a0API\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u65b0\u7684Graph Explorer\u6784\u5efa\u67e5\u8be2\u5e76\u751f\u6210\u65e0\u670d\u52a1\u5668\u529f\u80fd\u4ee3\u7801\u3002\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5c06\u66f4\u6539\u65e0\u7f1d\u540c\u6b65\u5230\u672c\u5730\u5b58\u50a8\u5e93\uff0c\u5728\u90e8\u7f72\u4e4b\u524d\u53ef\u4ee5\u5728\u672c\u5730Netlify\u73af\u5883\u4e2d\u6d4b\u8bd5\u8fd9\u4e9b\u66f4\u6539\u3002\nNetlify Graph beta\u7248\u53ef\u4f9b\u6240\u6709Netlify\u7528\u6237\u4f7f\u7528\u3002\u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u8bf7\u4eceNetlify\u56e2\u961f\u4eea\u8868\u677f\u4e2d\u9009\u62e9\u4e00\u4e2a\u7ad9\u70b9\uff0c\u7136\u540e\u4eceNetlify\u7ad9\u70b9\u4eea\u8868\u677f\u83dc\u5355\u4e2d\u9009\u62e9\u201c\u56fe\u5f62\u201d\u3002\n\u5982\u679c\u60a8\u63d0\u4f9b\u7684API\u6216\u670d\u52a1\u770b\u8d77\u6765\u5f88\u5408\u9002\uff0c\u6211\u4eec\u5c06\u4e0e\u60a8\u5408\u4f5c\uff0c\u5c06\u5176\u96c6\u6210\u5230Netlify Graph\u5de5\u4f5c\u6d41\u4e2d\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u8054\u7cfb\u6211\u4eec\u3002", "note_en": "APIs are the cornerstone of modern web development. An extensive ecosystem of modern APIs is helping development teams leave behind legacy monolithic web applications in favor of a faster, more secure decoupled architecture that separates the presentation layer from backend logic. However, while API-first development has been a watershed moment for engineers, it also introduced new complexity. The process of discovering, securing, learning, and governing these APIs has been a challenge.\n Today, we\u2019re excited to announce Netlify Graph - a GraphQL-powered experience designed to help developers build interactive and connected web applications faster. It\u2019s the promise of GraphQL, now easily accessible to all development teams as part of the Netlify web development workflow. With Netlify Graph, developers can start using APIs without spending time writing undifferentiated glue code, learning every API&#39;s unique structure, or composing endless amounts of endpoints to get data from various APIs into your app.\n  Netlify Graph is in public beta and available globally. It starts with a catalog that includes some of the most frequently requested APIs that development teams use, such as GitHub, Stripe, and Salesforce. We\u2019ll be adding more in the coming months.\n When you connect an API in the Netlify dashboard, it will automatically be enabled in your site\u2019s central data graph. As a developer, you have complete control over what type of data is exposed and made available to your app.\n  After adding APIs, you can use the new Graph Explorer to build queries and generate serverless function code. As you iterate, you can seamlessly sync changes to your local repository, where you can test them in the local Netlify environment before deploying.\n   The Netlify Graph beta is available to all Netlify users. To start using it, select a site from your  Netlify team dashboard and then select \u201cGraph\u201d from your Netlify site dashboard menu.\n   If the API or service you offer seems like a good fit, we will work with you to integrate it into the Netlify Graph workflow. You can reach out to us  here.", "posttime": "2022-02-17 03:39:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,graph,api", "title": "Netlify Graph\uff1a\u56e2\u961f\u4f7f\u7528API\u5f00\u53d1web\u5e94\u7528\u7684\u66f4\u5feb\u65b9\u6cd5", "title_en": "Netlify Graph: A faster way for teams to develop web apps with APIs", "transed": 1, "url": "https://www.netlify.com/blog/announcing-netlify-graph-a-faster-way-for-teams-to-develop-web-apps-with-apis", "via": "", "real_tags": ["\u5f00\u53d1", "graph", "api"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073683, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u5f20\u56fe\u7247\u80fd\u8bf4\u51fa\u5343\u8a00\u4e07\u8bed\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5728GitHub\u4e0a\u7684\u6807\u8bb0\u6587\u4ef6\u4e2d\u5305\u542b\u56fe\u7247\u548c\u56fe\u8868\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5d4c\u5165\u4e00\u5f20\u56fe\u7247\u3002\u6700\u8fd1\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u5bf9\u5d4c\u5165SVG\u7684\u652f\u6301\uff0c\u4f46\u6709\u65f6\u4f60\u60f3\u8ba9\u4f60\u7684\u56fe\u8868\u4e0e\u4f60\u7684\u6587\u6863\u4fdd\u6301\u6700\u65b0\uff0c\u5e76\u50cf\u521b\u5efaASCII\u827a\u672f\u4e00\u6837\u7b80\u5355\uff0c\u4f46\u8981\u6f02\u4eae\u5f97\u591a\u3002\nMermaid\u662f\u4e00\u4e2a\u57fa\u4e8eJavaScript\u7684\u56fe\u8868\u7ed8\u5236\u5de5\u5177\uff0c\u5b83\u91c7\u7528\u4e86Markdown\u98ce\u683c\u7684\u6587\u672c\u5b9a\u4e49\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u52a8\u6001\u521b\u5efa\u56fe\u8868\u3002\u7531Knut Sveidqvist\u7ef4\u62a4\uff0c\u5b83\u652f\u6301\u8f6f\u4ef6\u9879\u76ee\u7684\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u5e38\u89c1\u56fe\u8868\u7c7b\u578b\uff0c\u5305\u62ec\u6d41\u7a0b\u56fe\u3001UML\u3001Git\u56fe\u3001\u7528\u6237\u65c5\u7a0b\u56fe\uff0c\u751a\u81f3\u53ef\u6015\u7684\u7518\u7279\u56fe\u3002\n\u901a\u8fc7\u4e0eKnut\u4ee5\u53caCommonMark\u66f4\u5e7f\u6cdb\u7684\u793e\u533a\u5408\u4f5c\uff0c\u6211\u4eec\u63a8\u51fa\u4e86\u4e00\u9879\u66f4\u6539\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528Mermaid\u8bed\u6cd5\u521b\u5efa\u5185\u8054\u56fe\uff0c\u4f8b\u5982\uff1a\n\u5f53\u6211\u4eec\u9047\u5230\u6807\u8bb0\u4e3amermaid\u7684\u4ee3\u7801\u5757\u65f6\uff0c\u6211\u4eec\u4f1a\u751f\u6210\u4e00\u4e2aiframe\uff0c\u5b83\u91c7\u7528\u539f\u59cbmermaid\u8bed\u6cd5\u5e76\u5c06\u5176\u4f20\u9012\u7ed9mermaid\u3002js\uff0c\u5c06\u4ee3\u7801\u8f6c\u6362\u4e3a\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u7684\u56fe\u8868\u3002\n\u6211\u4eec\u901a\u8fc7GitHub\u7684HTML\u7ba1\u9053\u548c\u6211\u4eec\u7684\u5185\u90e8\u6587\u4ef6\u5448\u73b0\u670d\u52a1Viewscreen\u4e24\u4e2a\u9636\u6bb5\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u5728HTML\u7ba1\u9053\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u8fc7\u6ee4\u5668\uff0c\u7528\u4e8e\u67e5\u627e\u5e26\u6709\u7f8e\u4eba\u9c7c\u8bed\u8a00\u540d\u79f0\u7684\u539f\u59cb\u9884\u6807\u8bb0\uff0c\u5e76\u7528\u4e00\u4e2a\u6e10\u8fdb\u5de5\u4f5c\u7684\u6a21\u677f\u66ff\u6362\u5b83\uff0c\u8fd9\u6837\uff0c\u5728\u975eJavaScript\u73af\u5883\uff08\u5982\u5c4f\u5e55\u9605\u8bfb\u5668\u6216API\u8bf7\u6c42\uff09\u4e2d\u8bf7\u6c42\u5d4c\u5165\u7f8e\u4eba\u9c7c\u5185\u5bb9\u7684\u5ba2\u6237\u7aef\u5c06\u770b\u5230\u539f\u59cb\u6807\u8bb0\u4ee3\u7801\u3002\n\u63a5\u4e0b\u6765\uff0c\u5047\u8bbe\u5185\u5bb9\u662f\u5728\u652f\u6301JavaScript\u7684\u73af\u5883\u4e2d\u67e5\u770b\u7684\uff0c\u6211\u4eec\u5411\u9875\u9762\u4e2d\u6ce8\u5165\u4e00\u4e2aiframe\uff0c\u5c06src\u5c5e\u6027\u6307\u5411Viewscreen\u670d\u52a1\u3002\u8fd9\u6709\u51e0\u4e2a\u4f18\u70b9\uff1a\n\u5b83\u5c06\u5e93\u5378\u8f7d\u5230\u5916\u90e8\u670d\u52a1\uff0c\u4ece\u800c\u4f7f\u6211\u4eec\u9700\u8981\u4eceRails\u63d0\u4f9b\u670d\u52a1\u7684JavaScript\u8d1f\u8f7d\u66f4\u5c0f\u3002\n\u5f02\u6b65\u5448\u73b0\u56fe\u8868\u6709\u52a9\u4e8e\u6d88\u9664\u5728\u5c06\u5df2\u7f16\u8bd1\u7684ERB\u89c6\u56fe\u53d1\u9001\u5230\u5ba2\u6237\u7aef\u4e4b\u524d\u5448\u73b0\u591a\u4e2a\u56fe\u8868\u7684\u6f5c\u5728\u5f00\u9500\u3002\n\u7528\u6237\u63d0\u4f9b\u7684\u5185\u5bb9\u88ab\u9501\u5b9a\u5728iframe\u4e2d\uff0c\u5728\u52a0\u8f7d\u56fe\u8868\u7684GitHub\u9875\u9762\u4e0a\u9020\u6210\u7834\u574f\u7684\u53ef\u80fd\u6027\u8f83\u5c0f\u3002\n\u8fd9\u91cc\u662f\u4e00\u4e2a\u89c6\u89c9\u5448\u73b0\u7684\u8def\u5f84\uff0c\u4f60\u7684\u7f8e\u4eba\u9c7c\u98ce\u5473\u7684\u964d\u4ef7\u9700\u8981\u6210\u4e3a\u4e00\u4e2a\u5b8c\u5168\u5448\u73b0\u7f8e\u4eba\u9c7c\u56fe\u8868\u3002\uff08\u8fd9\u662f\u56fe\u8868\u7684\u7f8e\u4eba\u9c7c\u4ee3\u7801\u3002\uff09\n\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u5feb\u901f\u3001\u6613\u4e8e\u7f16\u8f91\uff0c\u5e76\u4e14\u57fa\u4e8e\u77e2\u91cf\u7684\u56fe\u8868\u5c31\u5728\u60a8\u9700\u8981\u5b83\u4eec\u7684\u6587\u6863\u4e2d\u3002\nMermaid\u5728\u5f00\u53d1\u4eba\u5458\u4e2d\u8d8a\u6765\u8d8a\u53d7\u6b22\u8fce\uff0c\u5e76\u4e14\u62e5\u6709\u4e00\u4e2a\u7531\u7ef4\u62a4\u4eba\u5458Knut Sveidqvist\u9886\u5bfc\u7684\u4e30\u5bcc\u7684\u8d21\u732e\u8005\u793e\u533a\u3002\u6211\u4eec\u975e\u5e38\u611f\u8c22Knut\u4e3aGitHub\u4e0a\u7684\u6bcf\u4e2a\u4eba\u63d0\u4f9b\u6b64\u529f\u80fd\u7684\u652f\u6301\u3002\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u7f8e\u4eba\u9c7c\u8bed\u6cd5\u7684\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u7f8e\u4eba\u9c7c\u7f51\u7ad9\u6216\u67e5\u770bKnut\u7684\u7b2c\u4e00\u672c\u7f8e\u4eba\u9c7c\u5b98\u65b9\u4e66\u7c4d\u3002", "note_en": "A picture tells a thousand words, but up until now the only way to include pictures and diagrams in your Markdown files on GitHub has been to embed an image. We added  support for embedding SVGs recently, but sometimes you want to keep your diagrams up to date with your docs and create something as easily as doing ASCII art, but a lot prettier.\n  Mermaid is a JavaScript based diagramming and charting tool that takes Markdown-inspired text definitions and creates diagrams dynamically in the browser. Maintained by  Knut Sveidqvist, it supports a bunch of different common diagram types for software projects, including flowcharts, UML, Git graphs, user journey diagrams, and even the dreaded Gantt chart.\n Working with Knut and also the wider community at  CommonMark, we\u2019ve rolled out a change that will allow you to create graphs inline using  Mermaid syntax, for example:\n     When we encounter code blocks marked as  mermaid, we generate an iframe that takes the raw Mermaid syntax and passes it to Mermaid.js, turning that code into a diagram in your local browser.\n We achieve this through a two-stage process\u2014GitHub\u2019s  HTML pipeline and Viewscreen, our internal file rendering service.\n First, we add a filter to the HTML pipeline that looks for raw  pre tags with the  mermaid language designation and substitutes it with a template that works progressively, such that clients requesting content with embedded Mermaid in a non-JavaScript environment (such as a screen reader or an API request) will see the original Markdown code.\n Next, assuming the content is viewed in a JavaScript-enabled environment, we inject an iframe into the page, pointing the  src attribute to the Viewscreen service. This has several advantages:\n It offloads the library to an external service, keeping the JavaScript payload we need to serve from Rails smaller.\n Rendering the charts asynchronously helps eliminate the overhead of potentially rendering several charts before sending the compiled ERB view to the client.\n User-supplied content is locked away in an iframe, where it has less potential to cause mischief on the GitHub page that the chart is loaded into.\n Here is a visual representation of the path your Mermaid-flavored Markdown takes to become a fully-rendered Mermaid chart. (Here\u2019s  the Mermaid code for the diagram.)\n The net result is fast, easily editable, and vector-based diagrams right in your documentation where you need them.\n Mermaid has been getting increasingly popular with developers and has a  rich community of contributors led by the maintainer  Knut Sveidqvist. We are very grateful for Knut\u2019s support in bringing this feature to everyone on GitHub. If you\u2019d like to learn more about the Mermaid syntax, head over to the  Mermaid website or check out Knut\u2019s first official  Mermaid book.", "posttime": "2022-02-17 03:36:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u964d\u4ef7,diagrams,\u56fe\u8868", "title": "\u5728\u7f8e\u4eba\u9c7c\u7684\u964d\u4ef7\u6587\u4ef6\u4e2d\u52a0\u5165\u56fe\u8868", "title_en": "Include diagrams in your Markdown files with Mermaid", "transed": 1, "url": "https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/", "via": "", "real_tags": ["\u964d\u4ef7", "diagrams", "\u56fe\u8868"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073681, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Twitter\u9996\u5e2d\u6267\u884c\u5b98\u5e15\u62c9\u683c\u00b7\u963f\u683c\u62c9\u74e6\u5c14\uff08Parag Agrawal\uff09\u5468\u4e09\u8bc1\u5b9e\uff0c\u4ed6\u8ba1\u5212\u4e3a\u7b2c\u4e8c\u4e2a\u5b69\u5b50\u7684\u51fa\u751f\u4f11\u201c\u51e0\u5468\u201d\u7684\u966a\u4ea7\u5047\u3002\u300a\u534e\u76db\u987f\u90ae\u62a5\u300b\u9996\u5148\u62a5\u9053\u4e86\u963f\u683c\u62c9\u74e6\u5c14\u4e0a\u5468\u5728\u4e00\u4e2a\u516c\u53f8\u5168\u4f53\u5458\u5de5\u4f1a\u8bae\u4e0a\u5ba3\u5e03\u4f11\u5047\u7684\u6d88\u606f\uff0c\u5c3d\u7ba1\u4ed6\u663e\u7136\u5c06\u5728Twitter\u63d0\u4f9b\u7684\u6574\u657420\u5468\u5185\u4f11\u5047\u3002\n\u201c\u5728Twitter\u4e0a\uff0c\u6211\u4eec\u9f13\u52b1\u5e76\u5168\u529b\u652f\u6301\u5458\u5de5\u4ee5\u6700\u9002\u5408\u6bcf\u4e2a\u4eba\u7684\u65b9\u5f0f\u4f11\u80b2\u513f\u5047\uff0c\u201dTwitter\u516c\u53f8\u4f20\u64ad\u8d1f\u8d23\u4eba\u52b3\u62c9\u00b7\u96c5\u683c\u66fc\uff08Laura Yagerman\uff09\u5728\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u7ed9Verge\u7684\u58f0\u660e\u4e2d\u8bf4\u3002\u201c\u8fd9\u662f\u4e00\u4e2a\u4e2a\u4eba\u51b3\u5b9a\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u80b2\u513f\u5047\u8ba1\u5212\uff08\u652f\u6301\u957f\u8fbe20\u5468\u7684\u5f39\u6027\u5047\u671f\uff09\uff0c\u53ef\u4e3a\u6b64\u5b9a\u5236\u3002\u201d\u5979\u8865\u5145\u8bf4\uff0c\u963f\u683c\u62c9\u74e6\u5c14\u662fTwitter\u5185\u90e8\u5bb6\u957f\u793e\u533a\u7684\u6267\u884c\u8d5e\u52a9\u5546\uff0c\u4ed6\u8ba1\u5212\u5728\u4f11\u5047\u671f\u95f4\u4e0e\u516c\u53f8\u7684\u6267\u884c\u56e2\u961f\u201c\u5efa\u7acb\u8054\u7cfb\u201d\u3002\n\u81ea\u53bb\u5e7411\u6708\u8054\u5408\u521b\u59cb\u4eba\u6770\u514b\u00b7\u591a\u5c14\u897f\u8f9e\u804c\u4ee5\u6765\uff0c\u963f\u683c\u62c9\u74e6\u5c14\u4e00\u76f4\u62c5\u4efbTwitter\u7684\u6700\u9ad8\u804c\u4f4d\u3002\u300a\u534e\u76db\u987f\u90ae\u62a5\u300b\u62a5\u9053\u79f0\uff0c\u4ed6\u8fd8\u6ca1\u6709\u4efb\u547d\u4e00\u4f4d\u4e34\u65f6\u9996\u5e2d\u6267\u884c\u5b98\u6765\u5904\u7406\u4ed6\u5916\u51fa\u671f\u95f4\u7684\u65e5\u5e38\u4e8b\u52a1\u3002\n\u867d\u7136\u8bb8\u591a\uff08\u4f46\u4e0d\u662f\u6240\u6709\uff09\u79c1\u8425\u516c\u53f8\u4e3a\u65b0\u7236\u6bcd\u63d0\u4f9b\u81f3\u5c11\u90e8\u5206\u5e26\u85aa\u5047\u671f\uff0c\u51e0\u4e2a\u5dde\u4e5f\u6709\u5e26\u85aa\u80b2\u513f\u5047\u653f\u7b56\uff0c\u4f46\u7f8e\u56fd\u4ecd\u7136\u662f\u4e16\u754c\u4e0a\u6ca1\u6709\u5168\u56fd\u5e26\u85aa\u80b2\u513f\u5047\u653f\u7b56\u7684\u6700\u5927\u56fd\u5bb6\u3002\u6839\u636e\u4e16\u754c\u653f\u7b56\u5206\u6790\u4e2d\u5fc3\u7684\u6700\u65b0\u6570\u636e\uff0c\u5168\u7403\u5e73\u5747\u5e26\u85aa\u4ea7\u5047\u4e3a29\u5468\uff0c\u5e73\u5747\u5e26\u85aa\u966a\u4ea7\u5047\u4e3a16\u5468\u3002\n\u5728\u79d1\u6280\u516c\u53f8\u4e2d\uff0c\u51e0\u4f4d\u77e5\u540d\u7684\u521b\u59cb\u4eba\u548c\u9996\u5e2d\u6267\u884c\u5b98\u90fd\u5f3a\u8c03\u8981\u4f11\u516c\u53f8\u63d0\u4f9b\u7684\u966a\u4ea7\u5047\u3002Facebook\u6bcd\u516c\u53f8Meta\u7684\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c\u57282015\u5e74\u548c2017\u5e74\u4e24\u4e2a\u5973\u513f\u51fa\u751f\u540e\u4f11\u4e86\u4e24\u4e2a\u6708\u7684\u4ea7\u5047\u30022017\u5e74\uff0cReddit\u8054\u5408\u521b\u59cb\u4eba\u4e9a\u5386\u514b\u897f\u65af\u00b7\u5965\u54c8\u5c3c\u5b89\uff08Alexis Ohanian\uff09\u7684\u59bb\u5b50\u7f51\u7403\u660e\u661f\u585e\u7433\u5a1c\u00b7\u5a01\u5ec9\u59c6\u65af\uff08Serena Williams\uff09\u751f\u4e0b\u4e86\u5973\u513f\uff0c\u4ed6\u4f11\u4e8616\u5468\u7684\u966a\u4ea7\u5047\u3002\u5728\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u7684\u4e00\u7bc7\u4e13\u680f\u6587\u7ae0\u4e2d\uff0c\u4ed6\u76f4\u8a00\u4e0d\u8bb3\u5730\u53cd\u5bf9\u7537\u6027\u4f11\u966a\u4ea7\u5047\u5e26\u6765\u7684\u803b\u8fb1\uff1a\u201c\u7238\u7238\u4eec\uff0c\u8ba9\u6211\u505a\u4f60\u4eec\u7684\u7a7a\u4e2d\u63a9\u62a4\u3002\u6211\u7528\u4e86\u6574\u657416\u5468\u7684\u65f6\u95f4\uff0c\u6211\u4ecd\u7136\u96c4\u5fc3\u52c3\u52c3\uff0c\u5173\u5fc3\u6211\u7684\u4e8b\u4e1a\u3002\u8ddf\u4f60\u4eec\u7684\u8001\u677f\u8c08\u8c08\uff0c\u544a\u8bc9\u4ed6\u4eec\u6211\u6d3e\u4f60\u4eec\u6765\u7684\u3002\u201d\n\u7814\u7a76\u8868\u660e\uff0c\u7f8e\u56fd\u7684\u56fd\u5bb6\u5e26\u85aa\u4f11\u5047\u653f\u7b56\u5c06\u4e3a\u513f\u7ae5\u548c\u5bb6\u5ead\u5e26\u6765\u8fc7\u591a\u7684\u798f\u5229\uff0c\u4f46\u5b9e\u9645\u4e0a\u4f11\u4e86\u4ed6\u4eec\u6709\u6743\u4f11\u7684\u5047\u7684\u7236\u4eb2\u4ecd\u7136\u4f1a\u5f15\u8d77\u4eba\u4eec\u7684\u4e0d\u6ee1\u548c\u51b7\u5632\u70ed\u8bbd\u3002\u53bb\u5e74\uff0c\u7f8e\u56fd\u8fd0\u8f93\u90e8\u957f\u76ae\u7279\u00b7\u5e03\u8482\u5409\u683c\uff08Pete Buttigieg\uff09\u548c\u4ed6\u7684\u4e08\u592b\u67e5\u65af\u6c40\uff08Chasten\uff09\u8fce\u6765\u4e86\u4ed6\u4eec\u521a\u51fa\u751f\u7684\u53cc\u80de\u80ce\uff0c\u5e76\u56e0\u6b64\u53d7\u5230\u653b\u51fb\u3002\u53ea\u662f\u60f3\u786e\u8ba4\u4e00\u4e0b\uff1a\u5c3d\u7ba1\u8fd9\u88ab\u79f0\u4e3a\u201c\u4f11\u5047\u201d\uff0c\u7167\u987e\u5c0f\u5b9d\u5b9d\u662f\u4e00\u9879\u8270\u5de8\u7684\u5de5\u4f5c\uff0c\u4e0d\u7ba1\u4f60\u662f\u5426\u751f\u4e0b\u4e86\u8fd9\u4e9b\u5c0f\u5b9d\u5b9d\u3002", "note_en": "Twitter CEO Parag Agrawal plans to take \u201ca few weeks\u201d of paternity leave for the birth of his second child, the company confirmed Wednesday. First reported by   The Washington Post,  Agrawal announced he was taking the leave at a company all-hands meeting last week, although he apparently will take less than the full 20 weeks that Twitter provides.\n \u201cAt Twitter, we encourage and fully support employees taking parental leave in whatever way works best for each person,\u201d Laura Yagerman, head of corporate communications at Twitter, said in a statement emailed to  The Verge. \u201cIt\u2019s a personal decision, and we created a parental leave program (supporting up to 20 weeks of flexible leave) that is customizable for that reason.\u201d She added that Agrawal, who is the executive sponsor of Twitter\u2019s internal parents\u2019 community, plans to be \u201cconnected\u201d with the company\u2019s executive team during his leave.\n Agrawal has been in the top job at Twitter since November when  co-founder Jack Dorsey resigned. The  Post reports he has not named an interim CEO to handle the day-to-day while he is out.\n While many (but not all) private companies offer at least some paid leave for new parents, and several states have paid parental leave policies, the United States continues to be the largest country in the world that  does not have a national paid parental leave policy.  According to the most recent data from the World Policy Analysis Center, the average paid maternity leave around the world is 29 weeks, and the average paid paternity leave is 16 weeks.\n Among tech companies, several high-profile founders and CEOs have made a point of taking the paternal leave their companies provide. Mark Zuckerberg, CEO of Facebook parent company Meta, took two months of paternal leave after the births of his daughters in  2015 and  2017. And Reddit co-founder  Alexis Ohanian took 16 weeks of paternity leave in 2017 when his wife, tennis star Serena Williams, gave birth to their daughter. He spoke out against the stigma attached to men taking their full paternity leave in a  New York Times op-ed: \u201c...dads, let me be your air cover. I took my full 16 weeks and I\u2019m still ambitious and care about my career. Talk to your bosses and tell them I sent you.\u201d\n Research shows that a national paid leave policy in the US would have a plethora of benefits for children and families, but fathers actually taking the leave they\u2019re entitled to can still draw raised eyebrows and snide comments. US Secretary of Transportation Pete  Buttigieg took paternity leave when he and his husband, Chasten, welcomed their newborn twins last year and was predictably  attacked for doing so. Just to confirm: even though it\u2019s called \u201cleave,\u201d taking care of small babies is a lot of work, whether or not you gave birth to the small babies in question.", "posttime": "2022-02-17 03:28:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65b0\u4efb,ceo,\u5e26\u85aa", "title": "Twitter\u65b0\u4efb\u9996\u5e2d\u6267\u884c\u5b98\u5c06\u4f11\u201c\u51e0\u5468\u201d\u7684\u80b2\u513f\u5047", "title_en": "Twitter\u2019s new CEO is taking \u2018a few weeks\u2019 of parental leave", "transed": 1, "url": "https://www.theverge.com/2022/2/16/22937113/twitter-ceo-paternity-leave-tech", "via": "", "real_tags": ["\u65b0\u4efb", "ceo", "\u5e26\u85aa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073680, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u57282000\u5e74\u7684GDC\u4e3b\u9898\u6f14\u8bb2\u4e2d\uff0c\u9ed1\u4eba\u548c\u767d\u4eba\u521b\u4f5c\u8005\u5f7c\u5f97\u00b7\u83ab\u5229\u7ebd\u65af\uff08Peter Molyneux\uff09\u5206\u4eab\u4e86\u4ed6\u7684\u7075\u611f\u548c\u8bbe\u8ba1\u8fc7\u7a0b\uff0c\u8fd9\u662f\u6211\u56fd\u6700\u53d7\u597d\u8bc4\u7684\u4f5c\u54c1\u4e4b\u4e00\u3002\u3002\u3002", "note_en": "In this 2000 GDC Keynote, Black and White creator Peter Molyneux shares his inspiration and design process for one of the most critically acclaimed entries i...", "posttime": "2022-02-17 03:28:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,molyneux,\u4e3b\u9898", "title": "Peter Molyneux\u89e3\u91ca\u4e86\u9ed1\u767d\u8bbe\u8ba1", "title_en": "Peter Molyneux Explains the Design of Black and White", "transed": 1, "url": "https://www.youtube.com/watch?v=69HTviSeQeE", "via": "", "real_tags": ["\u8bbe\u8ba1", "molyneux", "\u4e3b\u9898"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073679, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u00a92022\u7f8e\u56fd\u79d1\u5b66\u4fc3\u8fdb\u4f1a\u3002\u7248\u6743\u6240\u6709\u3002AAAS\u662fHINARI\u3001AGORA\u3001OARE\u3001Chouse\u3001CLOCKSS\u3001CrossRef\u548cCOUNTER\u7684\u5408\u4f5c\u4f19\u4f34\u3002", "note_en": "\u00a9 2022 American Association for the Advancement of Science. All rights reserved. AAAS is a partner of HINARI, AGORA, OARE, CHORUS, CLOCKSS, CrossRef and COUNTER.", "posttime": "2022-02-17 03:27:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4fa6\u63a2,sleuths,\u79d1\u5b66", "title": "\u516c\u6c11\u4fa6\u63a2\u63ed\u9732\u4e86\u5bc6\u6b47\u6839\u4e00\u5bb6\u767e\u5e74\u8001\u65e7\u5de5\u5382\u7684\u6c61\u67d3\uff082019\u5e74\uff09", "title_en": "Citizen sleuths exposed pollution from a century-old Michigan factory (2019)", "transed": 1, "url": "https://www.science.org/content/article/citizen-sleuths-exposed-pollution-century-old-michigan-factory-nationwide-implications", "via": "", "real_tags": ["\u4fa6\u63a2", "sleuths", "\u79d1\u5b66"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073678, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u77e5\u8bc6\u5e93\u8bd5\u56fe\u56de\u7b54\u4e00\u4e2a\u7531\u6765\u5df2\u4e45\u7684\u9762\u8bd5\u95ee\u9898#34\uff1b\u5f53\u4f60\u8f93\u5165\u8c37\u6b4c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u8fdb\u5165\u4f60\u7684\u6d4f\u89c8\u5668&#39\uff1bs\u5730\u5740\u6846\uff0c\u7136\u540e\u6309Enter&#34;\n\u9664\u4e86\u901a\u5e38\u7684\u6545\u4e8b\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u5c3d\u53ef\u80fd\u8be6\u7ec6\u5730\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u3002\u4efb\u4f55\u4e8b\u90fd\u4e0d\u80fd\u6f0f\u6389\u3002\n\u8fd9\u662f\u4e00\u4e2a\u534f\u4f5c\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u8bf7\u6df1\u5165\u6316\u6398\u5e76\u5c1d\u8bd5\u5e2e\u52a9\uff01\u6709\u4e00\u4e9b\u7ec6\u8282\u7f3a\u5931\uff0c\u53ea\u662f\u5728\u7b49\u5f85\u4f60\u6dfb\u52a0\u5b83\u4eec\uff01\u6240\u4ee5\u8bf7\u7ed9\u6211\u4eec\u53d1\u4e00\u4e2a\u8bf7\u6c42\uff01\n\u8bfb\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u7b80\u4f53\u4e2d\u6587 \uff08\u7b80\u4f53\u4e2d\u6587\uff09\uff0c\u65e5\u672c\u8a9e \uff08\u65e5\u8bed\uff09\uff0c\ud55c\uad6d\uc5b4\uff08\u97e9\u8bed\uff09\u548c\u897f\u73ed\u7259\u8bed\u3002\u6ce8\uff1aalex\u672a\u5bf9\u8fd9\u4e9b\u8fdb\u884c\u5ba1\u67e5/\u7ef4\u62a4\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\n\u4ee5\u4e0b\u90e8\u5206\u89e3\u91ca\u4e86\u7269\u7406\u952e\u76d8\u64cd\u4f5c\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u65ad\u3002\u5f53\u4f60\u6309\u4e0b&#34\uff1bg&#34\uff1b\u6d4f\u89c8\u5668\u63a5\u6536\u4e8b\u4ef6\u548c\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\u3002\u53d6\u51b3\u4e8e\u4f60\u7684\u6d4f\u89c8\u5668&#39\uff1bs\u7b97\u6cd5\uff0c\u5982\u679c\u60a8\u5904\u4e8e\u79c1\u5bc6/\u533f\u540d\u6a21\u5f0f\u6216\u6ca1\u6709\uff0c\u5404\u79cd\u5efa\u8bae\u5c06\u5728URL\u680f\u4e0b\u65b9\u7684\u4e0b\u62c9\u5217\u8868\u4e2d\u5448\u73b0\u7ed9\u60a8\u3002\u8fd9\u4e9b\u7b97\u6cd5\u5927\u591a\u57fa\u4e8e\u641c\u7d22\u5386\u53f2\u3001\u4e66\u7b7e\u3001cookie\u548c\u6574\u4e2a\u4e92\u8054\u7f51\u4e0a\u7684\u70ed\u95e8\u641c\u7d22\u5bf9\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\u548c\u6392\u5e8f\u3002\u5f53\u4f60\u8f93\u5165&#34\uff1b\u8c37\u6b4c\u3002com&#34\uff1b\u8bb8\u591a\u4ee3\u7801\u5757\u4f1a\u8fd0\u884c\uff0c\u5efa\u8bae\u4f1a\u968f\u7740\u6bcf\u6b21\u6309\u952e\u800c\u7ec6\u5316\u3002\u5b83\u751a\u81f3\u53ef\u80fd\u6697\u793a&#34\uff1b\u8c37\u6b4c\u3002com&#34\uff1b\u5728\u4f60\u5b8c\u6210\u6253\u5b57\u4e4b\u524d\u3002\n\u8981\u9009\u62e9\u4e00\u4e2a\u96f6\u70b9\uff0c\u8ba9&#39\uff1bs\u9009\u62e9\u952e\u76d8\u4e0a\u7684Enter\u952e\uff0c\u70b9\u51fb\u5176\u8303\u56f4\u7684\u5e95\u90e8\u3002\u6b64\u65f6\uff0c\u7279\u5b9a\u4e8eenterkey\u7684\u7535\u8def\u95ed\u5408\uff08\u76f4\u63a5\u6216\u7535\u5bb9\uff09\u3002\u8fd9\u5141\u8bb8\u5c11\u91cf\u7535\u6d41\u6d41\u5165\u952e\u76d8\u7684\u903b\u8f91\u7535\u8def\uff0c\u8be5\u7535\u8def\u626b\u63cf\u6bcf\u4e2a\u6309\u952e\u5f00\u5173\u7684\u72b6\u6001\uff0c\u6d88\u9664\u5f00\u5173\u5feb\u901f\u95f4\u6b47\u6027\u95ed\u5408\u7684\u7535\u6c14\u566a\u58f0\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6309\u952e\u4ee3\u7801\u6574\u6570\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a13\u3002\u7136\u540e\uff0c\u952e\u76d8\u63a7\u5236\u5668\u5bf9\u952e\u76d8\u4ee3\u7801\u8fdb\u884c\u7f16\u7801\uff0c\u4ee5\u4fbf\u4f20\u8f93\u5230\u8ba1\u7b97\u673a\u3002\u73b0\u5728\uff0c\u8fd9\u51e0\u4e4e\u666e\u904d\u901a\u8fc7\u901a\u7528\u4e32\u884c\u603b\u7ebf\uff08USB\uff09\u6216\u84dd\u7259\u8fde\u63a5\u5b9e\u73b0\uff0c\u4f46\u5386\u53f2\u4e0a\u4e00\u76f4\u901a\u8fc7PS/2\u6216ADB\u8fde\u63a5\u5b9e\u73b0\u3002\n\u952e\u76d8\u7684USB\u7535\u8def\u7531\u8ba1\u7b97\u673a\u63d0\u4f9b\u76845V\u7535\u6e90\u4f9b\u7535&#39\uff1bUSB\u4e3b\u673a\u63a7\u5236\u5668\u3002\n\u4e3b\u673aUSB\u63a7\u5236\u5668\u8f6e\u8be2&#34\uff1b\u7ec8\u70b9#34\uff1b\u6bcf\u969410\u6beb\u79d2\uff08\u952e\u76d8\u58f0\u660e\u7684\u6700\u5c0f\u503c\uff09\uff0c\u5b83\u5c31\u4f1a\u83b7\u5f97\u5b58\u50a8\u5728\u952e\u76d8\u4e0a\u7684\u952e\u7801\u503c\u3002\n\u8be5\u503c\u5c06\u4f20\u8f93\u81f3USB SIE\uff08\u4e32\u884c\u63a5\u53e3\u5f15\u64ce\uff09\uff0c\u4ee5\u4fbf\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u9075\u5faa\u4f4e\u7ea7USB\u534f\u8bae\u7684USB\u6570\u636e\u5305\u4e2d\u8fdb\u884c\u8f6c\u6362\u3002\n\u8fd9\u4e9b\u6570\u636e\u5305\u901a\u8fc7\u5dee\u5206\u7535\u4fe1\u53f7\u901a\u8fc7D+\u548cD-\u5f15\u811a\uff08\u4e2d\u95f42\uff09\u4ee51.5 Mb/s\u7684\u6700\u5927\u901f\u5ea6\u53d1\u9001\uff0c\u56e0\u4e3aHID\uff08\u4eba\u673a\u754c\u9762\u8bbe\u5907\uff09\u8bbe\u5907\u603b\u662f\u88ab\u58f0\u660e\u4e3aa&#34\uff1b\u4f4e\u901f\u88c5\u7f6e&#34\uff1b\uff08\u7b26\u5408USB 2.0\u6807\u51c6\uff09\u3002\n\u7136\u540e\u5728\u8ba1\u7b97\u673a\u4e0a\u5bf9\u8be5\u4e32\u884c\u4fe1\u53f7\u8fdb\u884c\u89e3\u7801&#39\uff1b\u4e3b\u673aUSB\u63a7\u5236\u5668\uff0c\u5e76\u7531\u8ba1\u7b97\u673a#39\uff1bs\u4eba\u673a\u754c\u9762\u8bbe\u5907\uff08HID\uff09\u901a\u7528\u952e\u76d8\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3002\u7136\u540e\u952e\u7684\u503c\u88ab\u4f20\u9012\u5230\u64cd\u4f5c\u7cfb\u7edf&#39\uff1b\u786c\u4ef6\u62bd\u8c61\u5c42\u3002\n\u5f53\u7528\u6237\u5c06\u624b\u6307\u653e\u5728\u73b0\u4ee3\u7535\u5bb9\u5f0f\u89e6\u6478\u5c4f\u4e0a\u65f6\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u7535\u6d41\u90fd\u4f1a\u4f20\u8f93\u5230\u624b\u6307\u4e0a\u3002\u8fd9\u5c31\u5b8c\u6210\u4e86\u901a\u8fc7\u5bfc\u7535\u5c42\u9759\u7535\u573a\u7684\u7535\u8def\uff0c\u5e76\u5728\u5c4f\u5e55\u4e0a\u7684\u8be5\u70b9\u4ea7\u751f\u7535\u538b\u964d\u3002\u7136\u540e\uff0c\u5c4f\u5e55\u63a7\u5236\u5668\u89e6\u53d1\u4e00\u4e2a\u4e2d\u65ad\uff0c\u62a5\u544a\u6309\u952e\u7684\u5750\u6807\u3002\n\u7136\u540e\uff0c\u79fb\u52a8\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5176GUI\u5143\u7d20\u4e4b\u4e00\uff08\u73b0\u5728\u662f\u865a\u62df\u952e\u76d8\u5e94\u7528\u7a0b\u5e8f\u6309\u94ae\uff09\u4e2d\u7684\u6309\u4e0b\u4e8b\u4ef6\u901a\u77e5\u5f53\u524d\u5173\u6ce8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u865a\u62df\u952e\u76d8\u73b0\u5728\u53ef\u4ee5\u5f15\u53d1\u8f6f\u4ef6\u4e2d\u65ad\uff0c\u4ee5\u53d1\u9001&#39\uff1b\u6309\u952e&#39\uff1b\u6d88\u606f\u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u952e\u76d8\u5728\u5176\u4e2d\u65ad\u8bf7\u6c42\u884c\uff08IRQ\uff09\u4e0a\u53d1\u9001\u4fe1\u53f7\uff0c\u4e2d\u65ad\u63a7\u5236\u5668\u5c06\u5176\u6620\u5c04\u4e3a\u4e2d\u65ad\u5411\u91cf\uff08\u6574\u6570\uff09\u3002CPU\u4f7f\u7528\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff08IDT\uff09\u5c06\u4e2d\u65ad\u5411\u91cf\u6620\u5c04\u5230\u5185\u6838\u63d0\u4f9b\u7684\u51fd\u6570\uff08\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff09\u3002\u5f53\u4e2d\u65ad\u5230\u8fbe\u65f6\uff0cCPU\u7528\u4e2d\u65ad\u5411\u91cf\u5bf9IDT\u8fdb\u884c\u7d22\u5f15\uff0c\u5e76\u8fd0\u884c\u76f8\u5e94\u7684\u5904\u7406\u7a0b\u5e8f\u3002\u8fd9\u6837\uff0c\u5c31\u8fdb\u5165\u4e86\u5185\u6838\u3002\nHID\u4f20\u8f93\u5c06\u6309\u952e\u5411\u4e0b\u4e8b\u4ef6\u4f20\u9012\u7ed9KBDHID\u3002\u5c06HID\u4f7f\u7528\u8f6c\u6362\u4e3a\u626b\u63cf\u7801\u7684sys\u9a71\u52a8\u7a0b\u5e8f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u626b\u63cf\u4ee3\u7801\u4e3aVK_RETURN\uff080x0D\uff09\u3002KBDHID\u3002sys\u9a71\u52a8\u7a0b\u5e8f\u4e0eKBDCLASS\u63a5\u53e3\u3002sys\uff08\u952e\u76d8\u7c7b\u9a71\u52a8\u7a0b\u5e8f\uff09\u3002\u8be5\u9a71\u52a8\u7a0b\u5e8f\u8d1f\u8d23\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u5904\u7406\u6240\u6709\u952e\u76d8\u548c\u5c0f\u952e\u76d8\u8f93\u5165\u3002\u7136\u540e\u8c03\u7528Win32K\u3002sys\uff08\u53ef\u80fd\u901a\u8fc7\u5b89\u88c5\u7684\u7b2c\u4e09\u65b9\u4e3b\u677f\u8fc7\u6ee4\u5668\u4f20\u9012\u6d88\u606f\u540e\uff09\u3002\u8fd9\u4e00\u5207\u90fd\u53d1\u751f\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u3002\nWin32K\u3002sys\u901a\u8fc7getForeGroundIndow\uff08\uff09API\u786e\u5b9a\u54ea\u4e2a\u7a97\u53e3\u662f\u6d3b\u52a8\u7a97\u53e3\u3002\u8fd9\u4e2aAPI\u63d0\u4f9b\u4e86\u6d4f\u89c8\u5668\u7684\u7a97\u53e3\u53e5\u67c4#39\uff1bs\u7684\u5730\u5740\u6846\u3002\u4e3b\u7a97\u53e3&#34\uff1b\u4fe1\u606f\u6cf5&#34\uff1b\u7136\u540e\u8c03\u7528SendMessage\uff08hWnd\u3001WM_KEYDOWN\u3001VK_RETURN\u3001lParam\uff09\u3002lParam\u662f\u4e00\u4e2a\u4f4d\u63a9\u7801\uff0c\u8868\u793a\u6709\u5173\u6309\u952e\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\uff1a\u91cd\u590d\u8ba1\u6570\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a0\uff09\u3001\u5b9e\u9645\u626b\u63cf\u4ee3\u7801\uff08\u53ef\u80fd\u53d6\u51b3\u4e8eOEM\uff0c\u4f46\u901a\u5e38\u5728VK#U\u8fd4\u56de\u4e4b\u524d\u4e0d\u4f1a\u51fa\u73b0\uff09\uff0c\u662f\u5426\u4e5f\u6309\u4e0b\u4e86\u6269\u5c55\u952e\uff08\u4f8b\u5982alt\u3001shift\u3001ctrl\uff09\uff08\u5b83\u4eec\u6ca1\u6709\u51fa\u73b0\uff09\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u72b6\u6001\u3002\nWindows SendMessage API\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\uff0c\u5b83\u5c06\u6d88\u606f\u6dfb\u52a0\u5230\u7279\u5b9a\u7a97\u53e3\u53e5\u67c4\uff08hWnd\uff09\u7684\u961f\u5217\u4e2d\u3002\u968f\u540e\uff0c\u8c03\u7528\u5206\u914d\u7ed9hWnd\u7684\u4e3b\u6d88\u606f\u5904\u7406\u51fd\u6570\uff08\u79f0\u4e3aWindowProc\uff09\uff0c\u4ee5\u4fbf\u5904\u7406\u961f\u5217\u4e2d\u7684\u6bcf\u6761\u6d88\u606f\u3002\n\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u7684\u7a97\u53e3\uff08hWnd\uff09\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7f16\u8f91\u63a7\u4ef6\uff0c\u5728\u672c\u4f8b\u4e2d\uff0cWindowProc\u6709\u4e00\u4e2a\u7528\u4e8eWM_KEYDOWN\u6d88\u606f\u7684\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u3002\u8fd9\u6bb5\u4ee3\u7801\u5728\u4f20\u9012\u7ed9SendMessage\uff08wParam\uff09\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e2d\u67e5\u627e\uff0c\u56e0\u4e3a\u5b83\u662fVK_RETURN\uff0c\u6240\u4ee5\u77e5\u9053\u7528\u6237\u5df2\u7ecf\u70b9\u51fb\u4e86ENTERkey\u3002\n\u4e2d\u65ad\u4fe1\u53f7\u89e6\u53d1I/O Kit kext\u952e\u76d8\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u7684\u4e2d\u65ad\u4e8b\u4ef6\u3002\u9a71\u52a8\u7a0b\u5e8f\u5c06\u4fe1\u53f7\u8f6c\u6362\u4e3a\u5bc6\u94a5\u4ee3\u7801\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9theOS X Windows Server\u8fdb\u7a0b\u3002\u7ed3\u679c\uff0cWindows\u670d\u52a1\u5668\u901a\u8fc7\u5176RMACH\u7aef\u53e3\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u4efb\u4f55\u9002\u5f53\u7684\uff08\u4f8b\u5982\uff0c\u6d3b\u52a8\u6216\u4fa6\u542c\uff09\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5c06\u5176\u653e\u5165\u4e8b\u4ef6\u961f\u5217\u4e2d\u3002\u7136\u540e\uff0c\u5177\u6709\u8db3\u591f\u6743\u9650\u7684\u7ebf\u7a0b\u53ef\u4ee5\u8c03\u7528mach_ipc_dispatch\u51fd\u6570\u4ece\u8be5\u961f\u5217\u8bfb\u53d6\u4e8b\u4ef6\u3002\u8fd9\u901a\u5e38\u901a\u8fc7NSEventType KeyDown\u7684NSEvent\u901a\u8fc7NSApplication\u4e3b\u4e8b\u4ef6\u5faa\u73af\u53d1\u751f\uff0c\u5e76\u7531\u5176\u5904\u7406\u3002\n\u5f53\u4f7f\u7528\u56fe\u5f62X\u670d\u52a1\u5668\u65f6\uff0cX\u5c06\u4f7f\u7528\u901a\u7528\u4e8b\u4ef6\u9a71\u52a8\u7a0b\u5e8fevdev\u83b7\u53d6\u6309\u952e\u3002\u4f7f\u7528X\u670d\u52a1\u5668\u7279\u5b9a\u7684\u5bc6\u94a5\u6620\u5c04\u548c\u89c4\u5219\u5c06\u5bc6\u94a5\u7801\u91cd\u65b0\u6620\u5c04\u5230\u626b\u63cf\u7801\u3002\u5f53\u6309\u4e0b\u952e\u7684\u626b\u63cf\u7801\u6620\u5c04\u5b8c\u6210\u65f6\uff0cX\u670d\u52a1\u5668\u5c06\u5b57\u7b26\u53d1\u9001\u5230\u7a97\u53e3\u7ba1\u7406\u5668\uff08DWM\u3001metacity\u3001i3\u7b49\uff09\uff0c\u56e0\u6b64\u7a97\u53e3\u7ba1\u7406\u5668\u4f9d\u6b21\u5c06\u5b57\u7b26\u53d1\u9001\u5230\u805a\u7126\u7a97\u53e3\u3002\u63a5\u6536\u5b57\u7b26\u7684\u7a97\u53e3\u7684\u56fe\u5f62API\u4f1a\u5728\u76f8\u5e94\u7684\u805a\u7126\u5b57\u6bb5\u4e2d\u6253\u5370\u76f8\u5e94\u7684\u5b57\u4f53\u7b26\u53f7\u3002\n\u5f53\u6ca1\u6709\u63d0\u4f9b\u534f\u8bae\u6216\u6709\u6548\u57df\u540d\u65f6\uff0c\u6d4f\u89c8\u5668\u7ee7\u7eed\u5c06\u5730\u5740\u6846\u4e2d\u7ed9\u51fa\u7684\u6587\u672c\u53cd\u9988\u7ed9\u6d4f\u89c8\u5668&#39\uff1b\u9ed8\u8ba4\u7684\u7f51\u7edc\u641c\u7d22\u5f15\u64ce\u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0cURL\u4f1a\u9644\u52a0\u4e00\u6bb5\u7279\u6b8a\u7684\u6587\u672c\uff0c\u544a\u8bc9\u641c\u7d22\u5f15\u64ce\u5b83\u6765\u81ea\u7279\u5b9a\u7684\u6d4f\u89c8\u5668#39\uff1bs\u7684URL\u680f\u3002\n\u6d4f\u89c8\u5668\u4f1a\u68c0\u67e5\u4e3b\u673a\u540d\u4e2d\u662f\u5426\u6709\u4e0d\u5728a-z\u3001a-z\u30010-9\u3001\u3001\u3001\u6216..\u4e2d\u7684\u5b57\u7b26\u3002\u3002\n\u56e0\u4e3a\u4e3b\u673a\u540d\u662fgoogle\u3002com\u90a3\u91cc\u8d62\u4e86&#39\uff1b\u6ca1\u6709\uff0c\u4f46\u5982\u679c\u6709\uff0c\u6d4f\u89c8\u5668\u4f1a\u5bf9URL\u7684\u4e3b\u673a\u540d\u90e8\u5206\u5e94\u7528Punycode\u7f16\u7801\u3002\n\u6d4f\u89c8\u5668\u68c0\u67e5\u5176&#34\uff1b\u9884\u88c5HST\uff08HTTP\u4e25\u683c\u4f20\u8f93\u5b89\u5168\uff09\u548c#34\uff1b\u5217\u8868\u8fd9\u662f\u4e00\u4e2a\u53ea\u8981\u6c42\u901a\u8fc7HTTPS\u8054\u7cfb\u7684\u7f51\u7ad9\u5217\u8868\u3002\n\u5982\u679c\u7f51\u7ad9\u5728\u5217\u8868\u4e2d\uff0c\u6d4f\u89c8\u5668\u5c06\u901a\u8fc7HttpSin\u800c\u4e0d\u662fHTTP\u53d1\u9001\u5176\u8bf7\u6c42\u3002\u5426\u5219\uff0c\u521d\u59cb\u8bf7\u6c42\u5c06\u901a\u8fc7HTTP\u53d1\u9001\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u7f51\u7ad9\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528HSTS\u7b56\u7565\uff0c\u800c\u4e0d\u5728HSTS\u5217\u8868\u4e2d\u3002\u7528\u6237\u5bf9\u7f51\u7ad9\u7684\u7b2c\u4e00\u4e2aHTTP\u8bf7\u6c42\u5c06\u6536\u5230\u4e00\u4e2a\u5e94\u7b54\uff0c\u8bf7\u6c42\u7528\u6237\u53ea\u53d1\u9001HTTPS\u8bf7\u6c42\u3002\u4f46\u662f\uff0c\u8fd9\u4e2aHTTP\u8bf7\u6c42\u53ef\u80fd\u4f1a\u8ba9\u7528\u6237\u5bb9\u6613\u53d7\u5230\u964d\u7ea7\u653b\u51fb\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48HSTS\u5217\u8868\u5305\u542b\u5728mo\u4e2d\u3002\uff09\u5fb7\u6069\u00b7\u97e6\u4f2f\u00b7\u514b\u9c81\u65af\u3002\uff09\n\u6d4f\u89c8\u5668\u68c0\u67e5\u57df\u662f\u5426\u5728\u5176\u7f13\u5b58\u4e2d\u3002\uff08\u8981\u67e5\u770b\u7f57\u9a6c\u7684DNS\u7f13\u5b58\uff0c\u8bf7\u8f6c\u5230chrome://net-internals/#dns).\n\u5982\u679c\u627e\u4e0d\u5230\uff0c\u6d4f\u89c8\u5668\u5c06\u8c03\u7528gethostbyname\u5e93\u51fd\u6570\uff08\u4e0d\u540c\u7684byOS\uff09\u8fdb\u884c\u67e5\u627e\u3002\ngethostbyname\u5728\u5c1d\u8bd5\u901a\u8fc7DNS\u89e3\u6790\u4e3b\u673a\u540d\u4e4b\u524d\uff0c\u68c0\u67e5\u4e3b\u673a\u540d\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u672c\u5730\u4e3b\u673a\u6587\u4ef6\uff08\u5176\u4f4d\u7f6e\u56e0\u64cd\u4f5c\u7cfb\u7edf\u800c\u5f02\uff09\u4e2d\u7684\u5f15\u7528\u89e3\u6790\u3002\n\u5982\u679cgethostbyname\u6ca1\u6709\u7f13\u5b58\u5b83\uff0c\u4e5f\u65e0\u6cd5\u5728hostsfile\u4e2d\u627e\u5230\u5b83\uff0c\u90a3\u4e48\u5b83\u4f1a\u5411\u7f51\u7edc\u5806\u6808\u4e2d\u914d\u7f6e\u7684DNS\u670d\u52a1\u5668\u53d1\u51fa\u8bf7\u6c42\u3002\u8fd9\u901a\u5e38\u662f\u672c\u5730\u8def\u7531\u5668\u6216ISP&#39\uff1b\u6b63\u5728\u7f13\u5b58DNS\u670d\u52a1\u5668\u3002\n\u5982\u679cDNS\u670d\u52a1\u5668\u4f4d\u4e8e\u540c\u4e00\u5b50\u7f51\u4e0a\uff0c\u5219\u7f51\u7edc\u5e93\u5c06\u9075\u5faa\u4e0b\u9762\u9488\u5bf9DNS\u670d\u52a1\u5668\u7684ARP\u8fc7\u7a0b\u3002\n\u5982\u679cDNS\u670d\u52a1\u5668\u4f4d\u4e8e\u4e0d\u540c\u7684\u5b50\u7f51\u4e2d\uff0c\u5219\u7f51\u7edc\u5e93\u5c06\u9075\u5faa\u4ee5\u4e0b\u9ed8\u8ba4\u7f51\u5173IP\u7684ARP\u8fc7\u7a0b\u3002\n\u4e3a\u4e86\u53d1\u9001ARP\uff08\u5730\u5740\u89e3\u6790\u534f\u8bae\uff09\u5e7f\u64ad\uff0cnetworkstack\u5e93\u9700\u8981\u67e5\u627e\u76ee\u6807IP\u5730\u5740\u3002\u5b83\u8fd8\u9700\u8981\u77e5\u9053\u7528\u4e8e\u53d1\u9001ARP\u5e7f\u64ad\u7684\u63a5\u53e3\u7684MAC\u5730\u5740\u3002\nARP\u7f13\u5b58\u9996\u5148\u68c0\u67e5\u76ee\u6807IP\u7684ARP\u6761\u76ee\u3002\u5982\u679c\u5b83\u5728\u7f13\u5b58\u4e2d\uff0c\u5e93\u51fd\u6570\u5c06\u8fd4\u56de\u7ed3\u679c\uff1aTarget IP=MAC\u3002\n\u67e5\u627e\u8def\u7531\u8868\uff0c\u67e5\u770b\u76ee\u6807IP\u5730\u5740\u662f\u5426\u4f4d\u4e8e\u672c\u5730\u8def\u7531\u8868\u4e0a\u7684\u4efb\u4f55\u5b50\u7f51\u4e0a\u3002\u5982\u679c\u662f\uff0c\u5e93\u5c06\u4f7f\u7528\u4e0e\u8be5\u5b50\u7f51\u5173\u8054\u7684\u63a5\u53e3\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5e93\u5c06\u4f7f\u7528\u5305\u542b\u9ed8\u8ba4\u7f51\u5173\u5b50\u7f51\u7684\u63a5\u53e3\u3002\n\u7f51\u7edc\u5e93\u53d1\u9001\u7b2c2\u5c42\uff08OSI\u6a21\u578b\u7684\u6570\u636e\u94fe\u8def\u5c42\uff09ARP\u8bf7\u6c42\uff1a\n\u5982\u679c\u8ba1\u7b97\u673a\u76f4\u63a5\u8fde\u63a5\u5230\u8def\u7531\u5668\uff0c\u8def\u7531\u5668\u4f1a\u7528ARP\u5e94\u7b54\uff08\u89c1\u4e0b\u6587\uff09\n\u5982\u679c\u8ba1\u7b97\u673a\u8fde\u63a5\u5230\u96c6\u7ebf\u5668\uff0c\u96c6\u7ebf\u5668\u5c06\u4ece\u6240\u6709\u5176\u4ed6\u7aef\u53e3\u5e7f\u64adARP\u8bf7\u6c42\u3002\u5982\u679c\u8def\u7531\u5668\u8fde\u63a5\u5728\u540c\u4e00\u4e2a&#34\uff1b\u7535\u7ebf&#34\uff1b\uff0c\u5b83\u5c06\u4ee5ARP\u56de\u590d\uff08\u89c1\u4e0b\u6587\uff09\u8fdb\u884c\u56de\u590d\u3002\n\u5982\u679c\u8ba1\u7b97\u673a\u8fde\u63a5\u5230\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u5c06\u68c0\u67e5\u5176localCAM/MAC\u8868\uff0c\u4ee5\u67e5\u770b\u54ea\u4e2a\u7aef\u53e3\u5177\u6709\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684MAC\u5730\u5740\u3002\u5982\u679c\u4ea4\u6362\u673a\u6ca1\u6709MAC\u5730\u5740\u6761\u76ee\uff0c\u5b83\u4f1a\u5c06ARP\u8bf7\u6c42\u91cd\u65b0\u5e7f\u64ad\u5230\u6240\u6709\u5176\u4ed6\u7aef\u53e3\u3002\n\u5982\u679c\u4ea4\u6362\u673a\u5728MAC/CAM\u8868\u4e2d\u6709\u4e00\u4e2a\u6761\u76ee\uff0c\u5b83\u4f1a\u5c06ARP\u8bf7\u6c42\u53d1\u9001\u5230\u5177\u6709\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684MAC\u5730\u5740\u7684\u7aef\u53e3\u3002\n\u5982\u679c\u8def\u7531\u5668\u5728\u540c\u4e00\u4e2a&#34\uff1b\u7535\u7ebf&#34\uff1b\uff0c\u5b83\u5c06\u4ee5ARP\u56de\u590d\uff08\u89c1\u4e0b\u6587\uff09\u8fdb\u884c\u56de\u590d\n\u73b0\u5728\uff0c\u7f51\u7edc\u5e93\u5177\u6709\u6211\u4eec\u7684DNS\u670d\u52a1\u5668\u6216\u9ed8\u8ba4\u7f51\u5173\u7684IP\u5730\u5740\uff0c\u5b83\u53ef\u4ee5\u6062\u590d\u5176DNS\u8fdb\u7a0b\uff1a\nDNS\u5ba2\u6237\u7aef\u4f7f\u75281023\u4ee5\u4e0a\u7684\u6e90\u7aef\u53e3\u5728DNS\u670d\u52a1\u5668\u4e0a\u5efa\u7acb\u5230UDP\u7aef\u53e353\u7684\u5957\u63a5\u5b57\u3002\n\u5982\u679c\u672c\u5730/ISP DNS\u670d\u52a1\u5668\u6ca1\u6709\uff0c\u5219\u9700\u8981\u8fdb\u884c\u9012\u5f52\u641c\u7d22\uff0c\u8be5\u641c\u7d22\u5c06\u6cbf\u7740DNS\u670d\u52a1\u5668\u5217\u8868\u5411\u4e0a\u6d41\u52a8\uff0c\u76f4\u5230\u5230\u8fbeSOA\uff0c\u5982\u679c\u627e\u5230\uff0c\u5219\u8fd4\u56de\u7b54\u6848\u3002\n\u4e00\u65e6\u6d4f\u89c8\u5668\u63a5\u6536\u5230\u76ee\u6807\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff0c\u5b83\u5c31\u4f1a\u4eceURL\u83b7\u53d6\u8be5\u5730\u5740\u548c\u7ed9\u5b9a\u7684\u7aef\u53e3\u53f7\uff08HTTP\u534f\u8bae\u9ed8\u8ba4\u4e3aport80\uff0cHTTPS\u9ed8\u8ba4\u4e3aPort443\uff09\uff0c\u5e76\u8c03\u7528\u540d\u4e3asocket\u7684\u7cfb\u7edf\u5e93\u51fd\u6570\uff0c\u8bf7\u6c42TCP\u5957\u63a5\u5b57\u6d41\u2014\u2014AF_INET/AF_INET6\u548cSOCK_\u6d41\u3002\n\u8be5\u8bf7\u6c42\u9996\u5148\u88ab\u4f20\u9012\u5230\u4f20\u8f93\u5c42\uff0c\u5728\u4f20\u8f93\u5c42\u4e2d\u8d77\u8349\u4e86\u4e00\u4e2aTCP\u6bb5\u3002\u76ee\u6807\u7aef\u53e3\u88ab\u6dfb\u52a0\u5230\u62a5\u5934\u4e2d\uff0c\u6e90\u7aef\u53e3\u4ece\u5185\u6838\u4e2d\u88ab\u5173\u95ed&#39\uff1bs\u52a8\u6001\u7aef\u53e3\u8303\u56f4\uff08ip_local_port_range inLinux\uff09\u3002\n\u8fd9\u4e2a\u7247\u6bb5\u88ab\u53d1\u9001\u5230\u7f51\u7edc\u5c42\uff0c\u7f51\u7edc\u5c42\u5c01\u88c5\u4e86\u4e00\u4e2a\u989d\u5916\u7684iPhone\u9605\u8bfb\u5668\u3002\u63d2\u5165\u76ee\u6807\u670d\u52a1\u5668\u548c\u5f53\u524d\u673a\u5668\u7684IP\u5730\u5740\u4ee5\u5f62\u6210\u6570\u636e\u5305\u3002\n\u6570\u636e\u5305\u63a5\u4e0b\u6765\u5230\u8fbe\u94fe\u8def\u5c42\u3002\u6dfb\u52a0\u4e00\u4e2a\u5e27\u5934\uff0c\u5176\u4e2d\u5305\u62ec\u673a\u5668\u7684MAC\u5730\u5740#39\uff1bs NIC\u4ee5\u53ca\u7f51\u5173\uff08\u672c\u5730\u8def\u7531\u5668\uff09\u7684MAC\u5730\u5740\u3002\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c\u5982\u679c\u5185\u6838\u4e0d\u77e5\u9053\u7f51\u5173\u7684MACaddress\uff0c\u5b83\u5fc5\u987b\u5e7f\u64ad\u4e00\u4e2aARP\u67e5\u8be2\u6765\u627e\u5230\u5b83\u3002\n\u5bf9\u4e8e\u5927\u591a\u6570\u5bb6\u5ead\u6216\u5c0f\u578b\u4f01\u4e1a\u7684\u4e92\u8054\u7f51\u8fde\u63a5\uff0c\u6570\u636e\u5305\u5c06\u4ece\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u4f20\u9001\uff0c\u53ef\u80fd\u4f1a\u901a\u8fc7\u672c\u5730\u7f51\u7edc\uff0c\u7136\u540e\u901a\u8fc7\u8c03\u5236\u89e3\u8c03\u5668\uff08\u8c03\u5236\u5668/\u89e3\u8c03\u5668\uff09\u8f6c\u6362\u6570\u5b571\u548c#39\uff1bs\u548c0&#39\uff1b\u8f6c\u6362\u6210\u9002\u5408\u901a\u8fc7\u7535\u8bdd\u3001\u7535\u7f06\u6216\u65e0\u7ebf\u7535\u8bdd\u8fde\u63a5\u4f20\u8f93\u7684\u6a21\u62df\u4fe1\u53f7\u3002\u5728\u8fde\u63a5\u7684\u53e6\u4e00\u7aef\u662f\u53e6\u4e00\u4e2a\u8c03\u5236\u89e3\u8c03\u5668\uff0c\u5b83\u5c06\u6a21\u62df\u4fe1\u53f7\u8f6c\u6362\u56de\u6570\u5b57\u6570\u636e\uff0c\u7531\u4e0b\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\u8fdb\u884c\u5904\u7406\uff0c\u5728\u4e0b\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\u4e0a\uff0c\u5c06\u8fdb\u4e00\u6b65\u5206\u6790from\u548cto\u5730\u5740\u3002\n\u5927\u591a\u6570\u5927\u578b\u4f01\u4e1a\u548c\u4e00\u4e9b\u8f83\u65b0\u7684\u4f4f\u5b85\u8fde\u63a5\u5c06\u91c7\u7528\u5149\u7ea4\u6216\u76f4\u63a5\u4ee5\u592a\u7f51\u8fde\u63a5\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u4ecd\u7136\u662f\u6570\u5b57\u7684\uff0c\u5e76\u76f4\u63a5\u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\u8fdb\u884c\u5904\u7406\u3002\n\u6700\u7ec8\uff0c\u6570\u636e\u5305\u5c06\u5230\u8fbe\u7ba1\u7406\u672c\u5730\u5b50\u7f51\u7684\u8def\u7531\u5668\u3002\u4ece\u90a3\u91cc\uff0c\u5b83\u5c06\u7ee7\u7eed\u8fdb\u5165\u81ea\u6cbb\u7cfb\u7edf#39\uff1bs\uff08AS\uff09\u8fb9\u754c\u8def\u7531\u5668\u3001\u5176\u4ed6ASE\uff0c\u6700\u540e\u8fde\u63a5\u5230\u76ee\u6807\u670d\u52a1\u5668\u3002\u6cbf\u9014\u7684\u6bcf\u4e2a\u8def\u7531\u5668\u4eceIP\u62a5\u5934\u4e2d\u63d0\u53d6\u76ee\u6807\u5730\u5740\uff0c\u5e76\u5c06\u5176\u8def\u7531\u5230\u9002\u5f53\u7684\u4e0b\u4e00\u8df3\u3002IP\u62a5\u5934\u4e2d\u7684\u751f\u5b58\u65f6\u95f4\uff08TTL\uff09\u5b57\u6bb5\u5bf9\u4e8e\u901a\u8fc7\u7684\u6bcf\u4e2a\u8def\u7531\u5668\u51cf\u5c11\u4e00\u4e2a\u3002\u5982\u679cTTL\u5b57\u6bb5\u4e3a\u96f6\u6216\u5f53\u524d\u8def\u7531\u5668\u961f\u5217\u4e2d\u6ca1\u6709\u7a7a\u95f4\uff08\u53ef\u80fd\u662f\u7531\u4e8e\u7f51\u7edc\u62e5\u585e\uff09\uff0c\u5219\u6570\u636e\u5305\u5c06\u88ab\u4e22\u5f03\u3002\n\u5ba2\u6237\u673a\u9009\u62e9\u4e00\u4e2a\u521d\u59cb\u5e8f\u5217\u53f7\uff08ISN\uff09\uff0c\u5e76\u5c06\u8bbe\u7f6e\u4e86SYN\u4f4d\u7684\u6570\u636e\u5305\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u4ee5\u6307\u793a\u5176\u6b63\u5728\u8bbe\u7f6eISN\n\u670d\u52a1\u5668\u5c06\uff08\u5ba2\u6237\u673aISN+1\uff09\u590d\u5236\u5230\u5176ACK\u5b57\u6bb5\uff0c\u5e76\u6dfb\u52a0ACK\u6807\u5fd7\uff0c\u4ee5\u6307\u793a\u5176\u6b63\u5728\u786e\u8ba4\u6536\u5230\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\n\u5f53\u53e6\u4e00\u65b9\u786e\u8ba4\u6536\u5230\u8be5\u6570\u636e\u5305\uff08\u6216\u4e00\u4e32\u6570\u636e\u5305\uff09\u65f6\uff0c\u5b83\u53d1\u9001\u4e00\u4e2aACK\u6570\u636e\u5305\uff0c\u5176ACK\u503c\u7b49\u4e8e\u4ece\u53e6\u4e00\u65b9\u6536\u5230\u7684\u6700\u540e\u4e00\u4e2a\u5e8f\u5217\n\u5ba2\u6237\u7aef\u8ba1\u7b97\u673a\u5411\u670d\u52a1\u5668\u53d1\u9001ClientHello\u6d88\u606f\uff0c\u5176\u4e2d\u5305\u542b\u5176\u4f20\u8f93\u5c42\u5b89\u5168\u6027\uff08TLS\uff09\u7248\u672c\u3001\u5bc6\u7801\u7b97\u6cd5\u5217\u8868\u548c\u53ef\u7528\u7684\u538b\u7f29\u65b9\u6cd5\u3002\n\u670d\u52a1\u5668\u7528ServerHello\u6d88\u606f\u5411\u5ba2\u6237\u7aef\u56de\u590dTLS\u7248\u672c\u3001\u6240\u9009\u5bc6\u7801\u3001\u6240\u9009\u538b\u7f29\u65b9\u6cd5\u548c\u670d\u52a1\u5668&#39\uff1b\u7531CA\uff08\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff09\u7b7e\u7f72\u7684spublic\u8bc1\u4e66\u3002\u8bc1\u4e66\u5305\u542b\u4e00\u4e2a\u516c\u94a5\uff0c\u5ba2\u6237\u7aef\u5c06\u4f7f\u7528\u8be5\u516c\u94a5\u52a0\u5bc6\u63e1\u624b\u7684\u5176\u4f59\u90e8\u5206\uff0c\u76f4\u5230\u53ef\u4ee5\u5546\u5b9a\u4e00\u4e2a\u5bf9\u79f0\u5bc6\u94a5\u3002\n\u5ba2\u6237\u7aef\u6839\u636e\u5176\u53d7\u4fe1\u4efb\u7684CA\u5217\u8868\u9a8c\u8bc1\u670d\u52a1\u5668\u6570\u5b57\u8bc1\u4e66\u3002\u5982\u679c\u53ef\u4ee5\u57fa\u4e8eCA\u5efa\u7acb\u4fe1\u4efb\uff0c\u5ba2\u6237\u7aef\u5c06\u751f\u6210\u4e00\u4e2a\u4f2a\u968f\u673a\u5b57\u8282\u5b57\u7b26\u4e32\uff0c\u5e76\u4f7f\u7528\u670d\u52a1\u5668\u5bf9\u5176\u8fdb\u884c\u52a0\u5bc6&#39\uff1bspublic\u94a5\u5319\u3002\u8fd9\u4e9b\u968f\u673a\u5b57\u8282\u53ef\u7528\u4e8e\u786e\u5b9a\u5bf9\u79f0\u5bc6\u94a5\u3002\n\u670d\u52a1\u5668\u4f7f\u7528\u5176\u79c1\u94a5\u89e3\u5bc6\u968f\u673a\u5b57\u8282\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e9b\u5b57\u8282\u751f\u6210\u81ea\u5df1\u7684\u5bf9\u79f0\u4e3b\u5bc6\u94a5\u526f\u672c\u3002\n\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u6761\u5b8c\u6210\u7684\u6d88\u606f\uff0c\u5e76\u4f7f\u7528\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u4f20\u8f93\u54c8\u5e0c\u3002\n\u670d\u52a1\u5668\u751f\u6210\u81ea\u5df1\u7684\u54c8\u5e0c\uff0c\u7136\u540e\u5bf9\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u54c8\u5e0c\u8fdb\u884c\u89e3\u5bc6\uff0c\u4ee5\u9a8c\u8bc1\u5176\u5339\u914d\u6027\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u5b83\u4f1a\u5c06\u81ea\u5df1\u5b8c\u6210\u7684\u6d88\u606f\u53d1\u9001\u5230\u5ba2\u6237\u7aef\uff0c\u5e76\u4f7f\u7528\u5bf9\u79f0\u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\u3002\n\u4ece\u73b0\u5728\u8d77\uff0cTLS\u4f1a\u8bdd\u5c06\u4f20\u8f93\u4f7f\u7528\u7ea6\u5b9a\u7684\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u7684\u5e94\u7528\u7a0b\u5e8f\uff08HTTP\uff09\u6570\u636e\u3002\n\u6709\u65f6\uff0c\u7531\u4e8e\u7f51\u7edc\u62e5\u585e\u6216\u786c\u4ef6\u8fde\u63a5\u4e0d\u826f\uff0cTLS\u5305\u5728\u5230\u8fbe\u6700\u7ec8\u76ee\u7684\u5730\u4e4b\u524d\u4f1a\u88ab\u4e22\u5f03\u3002\u7136\u540e\uff0c\u53d1\u9001\u8005\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u53cd\u5e94\u3002\u8fd9\u79cd\u7b97\u6cd5\u79f0\u4e3aTCP\u62e5\u585e\u63a7\u5236\u3002\u8fd9\u53d6\u51b3\u4e8e\u53d1\u9001\u8005\uff1b\u6700\u5e38\u89c1\u7684\u7b97\u6cd5\u662f\u65b0\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u7684cubic\u7b97\u6cd5\u548c\u51e0\u4e4e\u6240\u6709\u5176\u4ed6\u7cfb\u7edf\u4e0a\u7684New Reno\u7b97\u6cd5\u3002\n\u5bf9\u4e8e\u6bcf\u4e2a\u5df2\u786e\u8ba4\u7684\u6570\u636e\u5305\uff0c\u7a97\u53e3\u7684\u5927\u5c0f\u90fd\u4f1a\u7ffb\u500d\uff0c\u76f4\u5230\u8fbe\u5230&#39\uff1b\u6162\u542f\u52a8\u9608\u503c&#39\uff1b\u3002\u5728\u67d0\u4e9b\u5b9e\u73b0\u4e2d\uff0c\u8be5\u9608\u503c\u662f\u81ea\u9002\u5e94\u7684\u3002\n\u5728\u8fbe\u5230\u6162\u542f\u52a8\u9608\u503c\u540e\uff0c\u6bcf\u4e2a\u5df2\u786e\u8ba4\u7684\u6570\u636e\u5305\u7684\u7a97\u53e3\u90fd\u4f1a\u589e\u52a0\u3002\u5982\u679c\u4e00\u4e2a\u6570\u636e\u5305\u88ab\u4e22\u5f03\uff0c\u7a97\u53e3\u5c06\u4ee5\u6307\u6570\u5f62\u5f0f\u7f29\u5c0f\uff0c\u76f4\u5230\u53e6\u4e00\u4e2a\u6570\u636e\u5305\u88ab\u786e\u8ba4\u3002\n\u5982\u679c\u4f7f\u7528\u7684\u7f51\u7edc\u6d4f\u89c8\u5668\u662f\u7531\u8c37\u6b4c\u7f16\u5199\u7684\uff0c\u5b83\u5c06\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5c1d\u8bd5\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u534f\u5546\uff0c\u800c\u4e0d\u662f\u53d1\u9001\u4e00\u4e2aHTTPrequest\u6765\u68c0\u7d22\u9875\u9762\uff1b\u5347\u7ea7&#34\uff1b\u4eceHTTP\u5230SPDY\u534f\u8bae\u3002\n\u5982\u679c\u5ba2\u6237\u7aef\u4f7f\u7528HTTP\u534f\u8bae\u4e14\u4e0d\u652f\u6301SPDY\uff0c\u5219\u4f1a\u5411\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a\n\u5176\u4e2d\uff0c[other Header]\u6307\u7684\u662f\u4e00\u7cfb\u5217\u6309HTTP\u89c4\u8303\u683c\u5f0f\u5316\u7684\u4ee5\u5192\u53f7\u5206\u9694\u7684\u952e\u503c\u5bf9\uff0c\u5e76\u7531\u5355\u4e2a\u6362\u884c\u7b26\u5206\u9694\u3002\uff08\u8fd9\u5047\u8bbe\u6b63\u5728\u4f7f\u7528\u7684web\u6d4f\u89c8\u5668\u6ca1\u6709\u4efb\u4f55\u8fdd\u53cdHTTP\u89c4\u8303\u7684\u9519\u8bef\u3002\u8fd9\u8fd8\u5047\u8bbeweb\u6d4f\u89c8\u5668\u6b63\u5728\u4f7f\u7528HTTP/1.1\uff0c\u5426\u5219\u5b83\u53ef\u80fd\u4e0d\u4f1a\u5728\u8bf7\u6c42\u4e2d\u5305\u542b\u4e3b\u673a\u5934\uff0cGET\u8bf7\u6c42\u4e2d\u6307\u5b9a\u7684\u7248\u672c\u5c06\u662fHTTP/1.0\u6216HTTP/0.9\u3002\uff09\nHTTP/1.1\u5b9a\u4e49\u4e86&#34\uff1b\u5173\u95ed&#34\uff1b\u8fde\u63a5\u9009\u9879\uff0c\u7528\u4e8e\u53d1\u9001\u65b9\u5728\u54cd\u5e94\u5b8c\u6210\u540e\u53d1\u51fa\u8fde\u63a5\u5c06\u5173\u95ed\u7684\u4fe1\u53f7\u3002\u4f8b\u5982\n\u4e0d\u652f\u6301\u6301\u4e45\u8fde\u63a5\u7684HTTP/1.1\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5305\u62ec&#34\uff1b\u5173\u95ed&#34\uff1b\u6bcf\u4e2a\u6d88\u606f\u4e2d\u90fd\u6709\u8fde\u63a5\u9009\u9879\u3002\n\u5728\u53d1\u9001\u8bf7\u6c42\u548c\u6807\u9898\u540e\uff0cweb\u6d4f\u89c8\u5668\u4f1a\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u884c\u7a7a\u767d\u6362\u884c\u7b26\uff0c\u6307\u793a\u8bf7\u6c42\u7684\u5185\u5bb9\u5df2\u5b8c\u6210\u3002\n\u670d\u52a1\u5668\u7528\u8868\u793a\u8bf7\u6c42\u72b6\u6001\u7684\u54cd\u5e94\u4ee3\u7801\u8fdb\u884c\u54cd\u5e94\uff0c\u5e76\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684\u54cd\u5e94\u8fdb\u884c\u54cd\u5e94\uff1a\n\u540e\u8ddf\u4e00\u6761\u6362\u884c\uff0c\u7136\u540e\u53d1\u9001www.google\u7684HTML\u5185\u5bb9\u7684\u6709\u6548\u8d1f\u8f7d\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002\u7136\u540e\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u5173\u95ed\u8fde\u63a5\uff0c\u6216\u8005\u5982\u679c\u5ba2\u6237\u673a\u53d1\u9001\u4e86\u8bf7\u6c42\u8fde\u63a5\u7684\u5934\uff0c\u5219\u4fdd\u6301\u8fde\u63a5\u6253\u5f00\uff0c\u4ee5\u4fbf\u91cd\u65b0\u7528\u4e8e\u8fdb\u4e00\u6b65\u7684\u8bf7\u6c42\u3002\n\u5982\u679cweb\u6d4f\u89c8\u5668\u53d1\u9001\u7684HTTP\u5934\u5305\u542b\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u4f7fweb\u670d\u52a1\u5668\u80fd\u591f\u786e\u5b9a\u81ea\u4e0a\u6b21\u68c0\u7d22\u4ee5\u6765\uff0cwebbrowser\u7f13\u5b58\u7684\u6587\u4ef6\u7248\u672c\u662f\u5426\u672a\u88ab\u4fee\u6539\uff08\u5373\uff0c\u5982\u679cweb\u6d4f\u89c8\u5668\u5305\u542bETag\u5934\uff09\uff0c\u5219\u5b83\u53ef\u80fd\u4f1a\u6539\u4e3a\u54cd\u5e94\u4ee5\u4e0b\u8bf7\u6c42\uff1a\n\u89e3\u6790HTML\u540e\uff0cweb\u6d4f\u89c8\u5668\uff08\u548c\u670d\u52a1\u5668\uff09\u5bf9HTML\u9875\u9762\u5f15\u7528\u7684\u6bcf\u4e2a\u8d44\u6e90\uff08\u56fe\u50cf\u3001CSS\u3001favicon.ico\u7b49\uff09\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u9664\u4e86GET/HTTP/1.1\u4e4b\u5916\uff0c\u8bf7\u6c42\u5c06\u662fGET/$\uff08\u76f8\u5bf9\u4e8ewww.google.com\u7684URL\uff09HTTP/1.1\u3002\n\u5982\u679cHTML\u5f15\u7528\u4e86\u4e0ewww.google\u4e0d\u540c\u7684\u57df\u4e0a\u7684\u8d44\u6e90\u3002com\uff0cweb\u6d4f\u89c8\u5668\u8fd4\u56de\u5230\u89e3\u6790\u53e6\u4e00\u4e2a\u57df\u6240\u6d89\u53ca\u7684\u6b65\u9aa4\uff0c\u5e76\u9075\u5faa\u8be5\u57df\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u6240\u6709\u6b65\u9aa4\u3002\u8bf7\u6c42\u4e2d\u7684\u4e3b\u673a\u5934\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u9002\u5f53\u7684\u670d\u52a1\u5668\u540d\uff0c\u800c\u4e0d\u662fgoogle\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002\nHTTPD\uff08HTTP\u5b88\u62a4\u8fdb\u7a0b\uff09\u670d\u52a1\u5668\u662f\u5728\u670d\u52a1\u5668\u7aef\u5904\u7406\u8bf7\u6c42/\u54cd\u5e94\u7684\u670d\u52a1\u5668\u3002\u6700\u5e38\u89c1\u7684HTTPD\u670d\u52a1\u5668\u662f\u7528\u4e8elinux\u7684Apache\u6216nginx\uff0c\u4ee5\u53ca\u7528\u4e8eWindows\u7684IIS\u3002\nHTTP\u8bf7\u6c42\u65b9\u6cd5\uff08GET\u3001HEAD\u3001POST\u3001PUT\u3001PATCH\u3001DELETE\u3001CONNECT\u3001OPTIONS\u6216TRACE\uff09\u3002\u5982\u679c\u76f4\u63a5\u5728\u5730\u5740\u680f\u4e2d\u8f93\u5165URL\uff0c\u5219\u5c06\u83b7\u53d6\u8be5URL\u3002\n\u8bf7\u6c42\u7684\u8def\u5f84/\u9875\u9762\uff0c\u5728\u672c\u4f8b\u4e2d-/\uff08\u56e0\u4e3a\u6ca1\u6709\u8bf7\u6c42\u7279\u5b9a\u7684\u8def\u5f84/\u9875\u9762\uff0c/\u662f\u9ed8\u8ba4\u8def\u5f84\uff09\u3002\n\u670d\u52a1\u5668\u9a8c\u8bc1\u670d\u52a1\u5668\u4e0a\u662f\u5426\u914d\u7f6e\u4e86\u4e0egoogle\u5bf9\u5e94\u7684\u865a\u62df\u4e3b\u673a\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002\n\u670d\u52a1\u5668\u9a8c\u8bc1\u662f\u5426\u5141\u8bb8\u5ba2\u6237\u7aef\u4f7f\u7528\u6b64\u65b9\u6cd5\uff08\u901a\u8fc7IP\u3001\u8eab\u4efd\u9a8c\u8bc1\u7b49\uff09\u3002\n\u5982\u679c\u670d\u52a1\u5668\u5b89\u88c5\u4e86\u91cd\u5199\u6a21\u5757\uff08\u5982Apache\u7684mod_rewrite\u6216IIS\u7684URL rewrite\uff09\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u6839\u636e\u914d\u7f6e\u7684\u89c4\u5219\u4e4b\u4e00\u5339\u914d\u8bf7\u6c42\u3002\u5982\u679c\u627e\u5230\u5339\u914d\u89c4\u5219\uff0c\u670d\u52a1\u5668\u5c06\u4f7f\u7528\u8be5\u89c4\u5219\u5199\u5165\u8bf7\u6c42\u3002\n\u670d\u52a1\u5668\u53bb\u63d0\u53d6\u4e0e\u8bf7\u6c42\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u5b83\u5c06\u8fd4\u56de\u5230\u7d22\u5f15\u6587\u4ef6\uff0c\u5982&#34/&#34; \u662f\u4e3b\u6587\u4ef6\uff08\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8986\u76d6\u6b64\u6587\u4ef6\uff0c\u4f46\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\uff09\u3002\n\u670d\u52a1\u5668\u6839\u636e\u5904\u7406\u7a0b\u5e8f\u89e3\u6790\u6587\u4ef6\u3002\u5982\u679cGoogle\u5728PHP\u4e0a\u8fd0\u884c\uff0c\u670d\u52a1\u5668\u5c06\u4f7f\u7528PHP\u89e3\u91ca\u7d22\u5f15\u6587\u4ef6\uff0c\u5e76\u5c06\u8f93\u51fa\u6d41\u5f0f\u4f20\u8f93\u5230\u5ba2\u6237\u7aef\u3002\n\u4e00\u65e6\u670d\u52a1\u5668\u5411\u6d4f\u89c8\u5668\u63d0\u4f9b\u8d44\u6e90\uff08HTML\u3001CSS\u3001JS\u3001\u56fe\u50cf\u7b49\uff09\uff0c\u5b83\u5c06\u7ecf\u5386\u4ee5\u4e0b\u8fc7\u7a0b\uff1a\n\u6e32\u67d3-\u6784\u9020DOM\u6811\u2192 \u6e32\u67d3\u6811\u2192 \u6e32\u67d3\u6811\u7684\u5e03\u5c40\u2192\u7ed8\u5236\u6e32\u67d3\u6811\n\u6d4f\u89c8\u5668&#39\uff1bs\u7684\u529f\u80fd\u662f\u901a\u8fc7\u4ece\u670d\u52a1\u5668\u8bf7\u6c42\u5e76\u5728\u6d4f\u89c8\u5668\u7a97\u53e3\u4e2d\u663e\u793a\u6240\u9009\u7684web\u8d44\u6e90\u6765\u5448\u73b0\u8be5\u8d44\u6e90\u3002\u8d44\u6e90\u901a\u5e38\u662fHTML\u6587\u6863\uff0c\u4f46\u4e5f\u53ef\u80fd\u662fPDF\u3001\u56fe\u50cf\u6216\u5176\u4ed6\u7c7b\u578b\u7684\u5185\u5bb9\u3002\u8d44\u6e90\u7684\u4f4d\u7f6e\u662f\u6307\u5b9a\u7684\n......", "note_en": "This repository is an attempt to answer the age-old interview question &#34;Whathappens when you type google.com into your browser&#39;s address box and pressenter?&#34;\n Except instead of the usual story, we&#39;re going to try to answer this questionin as much detail as possible. No skipping out on anything.\n This is a collaborative process, so dig in and try to help out! There are tonsof details missing, just waiting for you to add them! So send us a pullrequest, please!\n  Read this in  \u7b80\u4f53\u4e2d\u6587 (simplified Chinese),  \u65e5\u672c\u8a9e (Japanese),  \ud55c\uad6d\uc5b4(Korean) and  Spanish. NOTE: these have not been reviewed by the alex/what-happens-whenmaintainers.\n      The following sections explain the physical keyboard actionsand the OS interrupts. When you press the key &#34;g&#34; the browser receives theevent and the auto-complete functions kick in.Depending on your browser&#39;s algorithm and if you are inprivate/incognito mode or not various suggestions will be presentedto you in the dropdown below the URL bar. Most of these algorithms sortand prioritize results based on search history, bookmarks, cookies, andpopular searches from the internet as a whole. As you are typing&#34;google.com&#34; many blocks of code run and the suggestions will be refinedwith each keypress. It may even suggest &#34;google.com&#34; before you finish typingit.\n   To pick a zero point, let&#39;s choose the Enter key on the keyboard hitting thebottom of its range. At this point, an electrical circuit specific to the enterkey is closed (either directly or capacitively). This allows a small amount ofcurrent to flow into the logic circuitry of the keyboard, which scans the stateof each key switch, debounces the electrical noise of the rapid intermittentclosure of the switch, and converts it to a keycode integer, in this case 13.The keyboard controller then encodes the keycode for transport to the computer.This is now almost universally over a Universal Serial Bus (USB) or Bluetoothconnection, but historically has been over PS/2 or ADB connections.\n  The USB circuitry of the keyboard is powered by the 5V supply provided overpin 1 from the computer&#39;s USB host controller.\n  The host USB controller polls that &#34;endpoint&#34; every ~10ms (minimum valuedeclared by the keyboard), so it gets the keycode value stored on it.\n This value goes to the USB SIE (Serial Interface Engine) to be converted inone or more USB packets that follow the low-level USB protocol.\n Those packets are sent by a differential electrical signal over D+ and D-pins (the middle 2) at a maximum speed of 1.5 Mb/s, as an HID(Human Interface Device) device is always declared to be a &#34;low-speed device&#34;(USB 2.0 compliance).\n This serial signal is then decoded at the computer&#39;s host USB controller, andinterpreted by the computer&#39;s Human Interface Device (HID) universal keyboarddevice driver. The value of the key is then passed into the operatingsystem&#39;s hardware abstraction layer.\n  When the user puts their finger on a modern capacitive touch screen, atiny amount of current gets transferred to the finger. This completes thecircuit through the electrostatic field of the conductive layer andcreates a voltage drop at that point on the screen. The screen controller then raises an interrupt reporting the coordinate ofthe keypress.\n Then the mobile OS notifies the currently focused application of a press eventin one of its GUI elements (which now is the virtual keyboard applicationbuttons).\n The virtual keyboard can now raise a software interrupt for sending a&#39;key pressed&#39; message back to the OS.\n   The keyboard sends signals on its interrupt request line (IRQ), which is mappedto an  interrupt vector (integer) by the interrupt controller. The CPU usesthe  Interrupt Descriptor Table (IDT) to map the interrupt vectors tofunctions ( interrupt handlers) which are supplied by the kernel. When aninterrupt arrives, the CPU indexes the IDT with the interrupt vector and runsthe appropriate handler. Thus, the kernel is entered.\n   The HID transport passes the key down event to the  KBDHID.sys driver whichconverts the HID usage into a scancode. In this case, the scan code is VK_RETURN ( 0x0D). The  KBDHID.sys driver interfaces with the KBDCLASS.sys (keyboard class driver). This driver is responsible forhandling all keyboard and keypad input in a secure manner. It then calls into Win32K.sys (after potentially passing the message through 3rd partykeyboard filters that are installed). This all happens in kernel mode.\n Win32K.sys figures out what window is the active window through the GetForegroundWindow() API. This API provides the window handle of thebrowser&#39;s address box. The main Windows &#34;message pump&#34; then calls SendMessage(hWnd, WM_KEYDOWN, VK_RETURN, lParam).  lParam is a bitmaskthat indicates further information about the keypress: repeat count (0 in thiscase), the actual scan code (can be OEM dependent, but generally wouldn&#39;t befor  VK_RETURN), whether extended keys (e.g. alt, shift, ctrl) were alsopressed (they weren&#39;t), and some other state.\n The Windows  SendMessage API is a straightforward function thatadds the message to a queue for the particular window handle ( hWnd).Later, the main message processing function (called a  WindowProc) assignedto the  hWnd is called in order to process each message in the queue.\n The window ( hWnd) that is active is actually an edit control and the WindowProc in this case has a message handler for  WM_KEYDOWN messages.This code looks within the 3rd parameter that was passed to  SendMessage( wParam) and, because it is  VK_RETURN knows the user has hit the ENTERkey.\n   The interrupt signal triggers an interrupt event in the I/O Kit kext keyboarddriver. The driver translates the signal into a key code which is passed to theOS X  WindowServer process. Resultantly, the  WindowServer dispatches anevent to any appropriate (e.g. active or listening) applications through theirMach port where it is placed into an event queue. Events can then be read fromthis queue by threads with sufficient privileges calling the mach_ipc_dispatch function. This most commonly occurs through, and ishandled by, an  NSApplication main event loop, via an  NSEvent of NSEventType  KeyDown.\n   When a graphical  X server is used,  X will use the generic eventdriver  evdev to acquire the keypress. A re-mapping of keycodes to scancodesis made with  X server specific keymaps and rules.When the scancode mapping of the key pressed is complete, the  X serversends the character to the  window manager (DWM, metacity, i3, etc), so the window manager in turn sends the character to the focused window.The graphical API of the window that receives the character prints theappropriate font symbol in the appropriate focused field.\n      When no protocol or valid domain name is given the browser proceeds to feedthe text given in the address box to the browser&#39;s default web search engine.In many cases the URL has a special piece of text appended to it to tell thesearch engine that it came from a particular browser&#39;s URL bar.\n   The browser checks the hostname for characters that are not in  a-z, A-Z,  0-9,  -, or  ..\n Since the hostname is  google.com there won&#39;t be any, but if there werethe browser would apply  Punycode encoding to the hostname portion of theURL.\n   The browser checks its &#34;preloaded HSTS (HTTP Strict Transport Security)&#34;list. This is a list of websites that have requested to be contacted viaHTTPS only.\n If the website is in the list, the browser sends its request via HTTPSinstead of HTTP. Otherwise, the initial request is sent via HTTP.(Note that a website can still use the HSTS policy  without being in theHSTS list. The first HTTP request to the website by a user will receive aresponse requesting that the user only send HTTPS requests. However, thissingle HTTP request could potentially leave the user vulnerable to a downgrade attack, which is why the HSTS list is included in modern webbrowsers.)\n   Browser checks if the domain is in its cache. (to see the DNS Cache inChrome, go to chrome://net-internals/#dns).\n If not found, the browser calls  gethostbyname library function (varies byOS) to do the lookup.\n gethostbyname checks if the hostname can be resolved by reference in thelocal  hosts file (whose location  varies by OS) before trying toresolve the hostname through DNS.\n If  gethostbyname does not have it cached nor can find it in the  hostsfile then it makes a request to the DNS server configured in the networkstack. This is typically the local router or the ISP&#39;s caching DNS server.\n If the DNS server is on the same subnet the network library follows the ARP process below for the DNS server.\n If the DNS server is on a different subnet, the network library followsthe  ARP process below for the default gateway IP.\n   In order to send an ARP (Address Resolution Protocol) broadcast the networkstack library needs the target IP address to lookup. It also needs to know theMAC address of the interface it will use to send out the ARP broadcast.\n The ARP cache is first checked for an ARP entry for our target IP. If it is inthe cache, the library function returns the result: Target IP = MAC.\n  The route table is looked up, to see if the Target IP address is on any ofthe subnets on the local route table. If it is, the library uses theinterface associated with that subnet. If it is not, the library uses theinterface that has the subnet of our default gateway.\n  The network library sends a Layer 2 (data link layer of the  OSI model)ARP request:\n     If the computer is directly connected to the router the router responsewith an  ARP Reply (see below)\n  If the computer is connected to a hub, the hub will broadcast the ARPrequest out of all other ports. If the router is connected on the same &#34;wire&#34;,it will respond with an  ARP Reply (see below).\n  If the computer is connected to a switch, the switch will check its localCAM/MAC table to see which port has the MAC address we are looking for. Ifthe switch has no entry for the MAC address it will rebroadcast the ARPrequest to all other ports.\n If the switch has an entry in the MAC/CAM table it will send the ARP requestto the port that has the MAC address we are looking for.\n If the router is on the same &#34;wire&#34;, it will respond with an  ARP Reply(see below)\n   Now that the network library has the IP address of either our DNS server orthe default gateway it can resume its DNS process:\n The DNS client establishes a socket to UDP port 53 on the DNS server,using a source port above 1023.\n  If the local/ISP DNS server does not have it, then a recursive search isrequested and that flows up the list of DNS servers until the SOA is reached,and if found an answer is returned.\n   Once the browser receives the IP address of the destination server, it takesthat and the given port number from the URL (the HTTP protocol defaults to port80, and HTTPS to port 443), and makes a call to the system library functionnamed  socket and requests a TCP socket stream -  AF_INET/AF_INET6 and SOCK_STREAM.\n This request is first passed to the Transport Layer where a TCP segment iscrafted. The destination port is added to the header, and a source port ischosen from within the kernel&#39;s dynamic port range (ip_local_port_range inLinux).\n This segment is sent to the Network Layer, which wraps an additional IPheader. The IP address of the destination server as well as that of thecurrent machine is inserted to form a packet.\n The packet next arrives at the Link Layer. A frame header is added thatincludes the MAC address of the machine&#39;s NIC as well as the MAC address ofthe gateway (local router). As before, if the kernel does not know the MACaddress of the gateway, it must broadcast an ARP query to find it.\n   For most home or small business Internet connections the packet will pass fromyour computer, possibly through a local network, and then through a modem(MOdulator/DEModulator) which converts digital 1&#39;s and 0&#39;s into an analogsignal suitable for transmission over telephone, cable, or wireless telephonyconnections. On the other end of the connection is another modem which convertsthe analog signal back into digital data to be processed by the next  networknode where the from and to addresses would be analyzed further.\n Most larger businesses and some newer residential connections will have fiberor direct Ethernet connections in which case the data remains digital andis passed directly to the next  network node for processing.\n Eventually, the packet will reach the router managing the local subnet. Fromthere, it will continue to travel to the autonomous system&#39;s (AS) borderrouters, other ASes, and finally to the destination server. Each router alongthe way extracts the destination address from the IP header and routes it tothe appropriate next hop. The time to live (TTL) field in the IP header isdecremented by one for each router that passes. The packet will be dropped ifthe TTL field reaches zero or if the current router has no space in its queue(perhaps due to network congestion).\n  Client chooses an initial sequence number (ISN) and sends the packet to theserver with the SYN bit set to indicate it is setting the ISN\n Server copies the (client ISN +1) to its ACK field and adds the ACK flagto indicate it is acknowledging receipt of the first packet\n  When the other side acknowledges receipt of that packet (or a string ofpackets), it sends an ACK packet with the ACK value equal to the lastreceived sequence from the other\n   The client computer sends a  ClientHello message to the server with itsTransport Layer Security (TLS) version, list of cipher algorithms andcompression methods available.\n The server replies with a  ServerHello message to the client with theTLS version, selected cipher, selected compression methods and the server&#39;spublic certificate signed by a CA (Certificate Authority). The certificatecontains a public key that will be used by the client to encrypt the rest ofthe handshake until a symmetric key can be agreed upon.\n The client verifies the server digital certificate against its list oftrusted CAs. If trust can be established based on the CA, the clientgenerates a string of pseudo-random bytes and encrypts this with the server&#39;spublic key. These random bytes can be used to determine the symmetric key.\n The server decrypts the random bytes using its private key and uses thesebytes to generate its own copy of the symmetric master key.\n The client sends a  Finished message to the server, encrypting a hash ofthe transmission up to this point with the symmetric key.\n The server generates its own hash, and then decrypts the client-sent hashto verify that it matches. If it does, it sends its own  Finished messageto the client, also encrypted with the symmetric key.\n From now on the TLS session transmits the application (HTTP) data encryptedwith the agreed symmetric key.\n   Sometimes, due to network congestion or flaky hardware connections, TLS packetswill be dropped before they get to their final destination. The sender then hasto decide how to react. The algorithm for this is called  TCP congestioncontrol. This varies depending on the sender; the most common algorithms are cubic on newer operating systems and  New Reno on almost all others.\n For each packet acknowledged, the window doubles in size until it reaches the&#39;slow-start threshold&#39;. In some implementations, this threshold is adaptive.\n After reaching the slow-start threshold, the window increases additively foreach packet acknowledged. If a packet is dropped, the window reducesexponentially until another packet is acknowledged.\n   If the web browser used was written by Google, instead of sending an HTTPrequest to retrieve the page, it will send a request to try and negotiate withthe server an &#34;upgrade&#34; from HTTP to the SPDY protocol.\n If the client is using the HTTP protocol and does not support SPDY, it sends arequest to the server of the form:\n  where  [other headers] refers to a series of colon-separated key-value pairsformatted as per the HTTP specification and separated by single newlines.(This assumes the web browser being used doesn&#39;t have any bugs violating theHTTP spec. This also assumes that the web browser is using  HTTP/1.1,otherwise it may not include the  Host header in the request and the versionspecified in the  GET request will either be  HTTP/1.0 or  HTTP/0.9.)\n HTTP/1.1 defines the &#34;close&#34; connection option for the sender to signal thatthe connection will be closed after completion of the response. For example,\n  HTTP/1.1 applications that do not support persistent connections MUST includethe &#34;close&#34; connection option in every message.\n After sending the request and headers, the web browser sends a single blanknewline to the server indicating that the content of the request is done.\n The server responds with a response code denoting the status of the request andresponds with a response of the form:\n  Followed by a single newline, and then sends a payload of the HTML content of www.google.com. The server may then either close the connection, or ifheaders sent by the client requested it, keep the connection open to be reusedfor further requests.\n If the HTTP headers sent by the web browser included sufficient information forthe webserver to determine if the version of the file cached by the webbrowser has been unmodified since the last retrieval (ie. if the web browserincluded an  ETag header), it may instead respond with a request ofthe form:\n   After parsing the HTML, the web browser (and server) repeats this processfor every resource (image, CSS, favicon.ico, etc) referenced by the HTML page,except instead of  GET / HTTP/1.1 the request will be GET /$(URL relative to www.google.com) HTTP/1.1.\n If the HTML referenced a resource on a different domain than www.google.com, the web browser goes back to the steps involved inresolving the other domain, and follows all steps up to this point for thatdomain. The  Host header in the request will be set to the appropriateserver name instead of  google.com.\n   The HTTPD (HTTP Daemon) server is the one handling the requests/responses onthe server-side. The most common HTTPD servers are Apache or nginx for Linuxand IIS for Windows.\n HTTP Request Method (either  GET,  HEAD,  POST,  PUT, PATCH,  DELETE,  CONNECT,  OPTIONS, or  TRACE). In thecase of a URL entered directly into the address bar, this will be  GET.\n  Requested path/page, in this case - / (as no specific path/page wasrequested, / is the default path).\n The server verifies that there is a Virtual Host configured on the serverthat corresponds with google.com.\n  The server verifies that the client is allowed to use this method(by IP, authentication, etc.).\n If the server has a rewrite module installed (like mod_rewrite for Apache orURL Rewrite for IIS), it tries to match the request against one of theconfigured rules. If a matching rule is found, the server uses that rule torewrite the request.\n The server goes to pull the content that corresponds with the request,in our case it will fall back to the index file, as &#34;/&#34; is the main file(some cases can override this, but this is the most common method).\n The server parses the file according to the handler. If Googleis running on PHP, the server uses PHP to interpret the index file, andstreams the output to the client.\n   Once the server supplies the resources (HTML, CSS, JS, images, etc.)to the browser it undergoes the below process:\n Rendering - Construct DOM Tree \u2192 Render Tree \u2192 Layout of Render Tree \u2192Painting the render tree\n   The browser&#39;s functionality is to present the web resource you choose, byrequesting it from the server and displaying it in the browser window.The resource is usually an HTML document, but may also be a PDF,image, or some other type of content. The location of the resource isspecified\n......", "posttime": "2022-02-17 03:12:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,\u6d4f\u89c8\u5668,press,\u670d\u52a1\u5668", "title": "\u5f53\u4f60\u8f93\u5165\u8c37\u6b4c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u8fdb\u5165\u6d4f\u89c8\u5668\uff0c\u7136\u540e\u6309enter\uff1f", "title_en": "What happens when you type google.com into the browser and press enter?", "transed": 1, "url": "https://github.com/alex/what-happens-when", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "\u6d4f\u89c8\u5668", "press", "\u670d\u52a1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073677, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u5141\u8bb8\u4f7f\u7528\u7528\u6237\u5b9a\u4e49\u7684\u8ba1\u7b97\u6548\u679c\u8fdb\u884c\u7f16\u7a0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u5305\u62ec\u81ea\u5b9a\u4e49\u8f7b\u91cf\u7ea7\u5e76\u53d1\uff08\u7ebf\u7a0b\u3001\u5f02\u6b65\u7b49\u5f85\u3001\u53c2\u4e0e\u8005\u3001\u751f\u6210\u5668\uff09\u3001\u9519\u8bef\u5904\u7406\u3001\u4f9d\u8d56\u9879\u6ce8\u5165\u7b49\u3002\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u8d77\u6e90\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\u9886\u57df\uff0c\u8fd9\u4e2a\u9ad8\u5ea6\u5b9e\u9a8c\u6027\u7684\u5e93\u7684\u4e3b\u8981\u76ee\u6807\u662f\u63a2\u7d22\u5b83\u4eec\u5982\u4f55\u9002\u5408\u4e8e\u9762\u5411\u5bf9\u8c61\u7684C++\u8bbe\u7f6e\u3002\n\u8be5\u5e93\u4f9d\u8d56\u4e8e\u73b0\u4ee3C++\u7279\u6027\uff08\u79fb\u52a8\u8bed\u4e49\u3001\u53ef\u53d8\u6a21\u677f\u3001\u7f16\u8bd1\u65f6\u8bc4\u4f30\uff09\uff0c\u4ee5\u5b9e\u73b0\u4f18\u96c5\u7684\u7a0b\u5e8f\u5458\u7ea7\u63a5\u53e3\u3001\u5904\u7406\u7a0b\u5e8f\u7684\u5185\u5b58\u7ba1\u7406\u548c\u76f8\u5bf9\u7c7b\u578b\u5b89\u5168\u6027\u3002\u5728\u5185\u90e8\uff0c\u5b83\u4f7f\u7528boost:\uff1acontext\u5e93\u8fdb\u884c\u8c03\u7528\u5806\u6808\u64cd\u4f5c\uff0c\u56e0\u6b64\u5b83\u53ea\u5b9e\u73b0\u4e86\u4e00\u6b21\u6027\u5904\u7406\u7a0b\u5e8f\u3002\n\u53c2\u8003\u8d44\u6599\u2014\u2014\u56fe\u4e66\u9986\u7684\u8be6\u7ec6\u8bf4\u660e&#39\uff1bs API\u548c\u5173\u4e8e\u5e93\u7684\u603b\u4f53\u8bbe\u8ba1\u7684\u7b80\u77ed\u8ba8\u8bba\u3002\u5bf9\u4e8e\u5df2\u7ecf\u719f\u6089\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u7684\u8bfb\u8005\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5408\u9002\u7684\u4ecb\u7ecd\uff08\u4f8b\u5982\uff0c\u901a\u5e38\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u8ba8\u8bba\u6548\u679c\u5904\u7406\u7a0b\u5e8f\uff09\u3002\n\u5373\u5c06\u5230\u6765\uff1a\u6559\u7a0b-\u4ecb\u7ecd\u4f7f\u7528\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u7f16\u7a0b\u3002\u9002\u5408\u4e0d\u719f\u6089\u5904\u7406\u7a0b\u5e8f\u7684\u8bfb\u8005\u3002\n\u4f5c\u4e3a\u4e00\u4e2a\u9884\u89c8\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u4e3a\u534f\u4f5c\u8f7b\u91cf\u7ea7\u7ebf\u7a0b\u5b9a\u4e49\u6211\u4eec\u81ea\u5df1\u7684\u5c0f\u5e93\u3002\u7a0b\u5e8f\u5458&#39\uff1bs\u63a5\u53e3\u5c06\u5305\u62ec\u4e24\u4e2a\u51fd\u6570\uff0cyield\u548cfork\uff0c\u4ee5\u53ca\u4e00\u4e2a\u5b9e\u73b0\u8c03\u5ea6\u5668\u7684\u7c7b\uff1a\n\u7a7a\u9699\u7387\uff08\uff09\uff1b//\u7ebf\u7a0b\u7528\u6765\u653e\u5f03\u63a7\u5236void fork\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bproc\uff09\uff1b//\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u7c7b\u8c03\u5ea6\u7a0b\u5e8f{public:static void Start\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bf\uff09\uff1b}\uff1b\n\u9759\u6001\u6210\u5458\u51fd\u6570Start\u4ee5f\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u4e3b\u4f53\u542f\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u3002\u5f53\u6240\u6709\u7ebf\u7a0b\u5b8c\u6210\u4efb\u52a1\u65f6\uff0c\u5b83\u8fd4\u56de\u3002\n\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e24\u4e2a\u547d\u4ee4\uff0c\u5b83\u4eec\u662f\u7528\u4e8e\u5c06\u63a7\u5236\u4ece\u5ba2\u6237\u673a\u4ee3\u7801\u4f20\u8f93\u5230\u5904\u7406\u7a0b\u5e8f\u7684\u6570\u636e\u7ed3\u6784\u3002\u6211\u4eec\u5b9e\u73b0\u4e86yield\u548cfork\u6765\u8c03\u7528\u8fd9\u4e9b\u547d\u4ee4\u3002\uff08OneShot\u7c7b\u7684\u540d\u79f0\u5e94\u8be5\u662f\u63d0\u9192\u7a0b\u5e8f\u5458\uff0c\u6211\u4eec\u53ea\u5904\u7406\u5355\u6b21\u5904\u7406\u7a0b\u5e8f\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u80fd\u4e24\u6b21\u6062\u590d\u76f8\u540c\u7684\u6062\u590d\uff09\u3002\n#\u5305\u62ec&#34\uff1bcpp\u6548\u5e94/cpp\u6548\u5e94\u3002h&#34\uff1b\u4f7f\u7528\u540d\u79f0\u7a7a\u95f4\u6548\u679c\uff1b\u7ed3\u6784\u5c48\u670d\uff1a\u547d\u4ee4&lt\uff1bvoid&gt\uff1b{ }; struct Fork:Command&lt\uff1bvoid&gt\uff1b{std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bproc\uff1b}\uff1bvoid yield\uff08\uff09{OneShot:\uff1aInvokeCmd\uff08yield{}\uff09\uff1b}void fork\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bproc\uff09{OneShot:\uff1aInvokeCmd\uff08Fork{}\uff0cproc}\uff09\uff1b}\n\u6211\u4eec\u5b9a\u4e49\u4e86\u8c03\u5ea6\u5668\uff0c\u5b83\u662f\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u6062\u590d\uff08\u5373\u6355\u83b7\u7684\u7ee7\u7eed\uff09\u63a8\u9001\u5230\u961f\u5217\u6765\u89e3\u91ca\u8fd9\u4e24\u4e2a\u547d\u4ee4\u3002\n//Res\u662f\u4f7f\u7528Res=std:\uff1aunique_ptr&lt\uff1b\u6062\u590d&lt\uff1bvoid\uff0cvoid&gt&gt\uff1b\uff1b\u7c7b\u8c03\u5ea6\u7a0b\u5e8f\uff1a\u516c\u5171\u5904\u7406\u7a0b\u5e8f&lt\uff1b\u65e0\u6548\uff0c\u65e0\u6548\uff0c\u5c48\u670d\uff0c\u5206\u53c9&gt\uff1b{public:static void Start\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bf\uff09{Run\uff08f\uff09\uff1bwhile\uff08\uff01queue.empty\uff08\uff09\uff09{//\u5faa\u73af\u8c03\u5ea6\u81ea\u52a8\u6062\u590d=std:\uff1amove\uff08queue.front\uff08\uff09\uff09\uff1bqueue.pop_front\uff08\uff09\uff1bOneShot:\uff1aResume\uff08std:\uff1amove\uff08Resume\uff09\uff09\uff1b}\u79c1\u6709\uff1a\u9759\u6001\u6807\u51c6\uff1a\uff1a\u5217\u8868&lt\uff1bRes&gt\uff1b\u961f\u5217\u9759\u6001void\u8fd0\u884c\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1b\uff09{OneShot:\uff1aHandle&lt\uff1bScheduler&gt\uff1b\uff08f\uff09\uff1b}void CommandClause\uff08Yield\uff0cRes r\uff09\u91cd\u5199{queue.push_back\uff08std:\uff1amove\uff08r\uff09\uff09\uff1b}void CommandClause\uff08Fork f\uff0cRes r\uff09\u91cd\u5199{queue.push_back\uff08std:\uff1amove\uff08r\uff09\uff09\uff1bqueue.push_back\uff08OneShot:\uff1amakerestoration&lt\uff1bvoid&gt\uff1b\uff08std:\uff1abind\uff08Run\uff0cf.proc\uff09\uff09\uff1b}void ReturnClause\uff08\uff09\u8986\u76d6{}\uff1b\u6807\u51c6\uff1a\u5217\u8868&lt\uff1bRes&gt\uff1b\u8c03\u5ea6\u7a0b\u5e8f\uff1a\uff1a\u961f\u5217\uff1b\n\u90a3&#39\uff1b\u8fd9\u5c31\u662f\u4e00\u5207\uff01\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u51e0\u4e2a\u7ebf\u7a0b\u6765\u6d4b\u8bd5\u6211\u4eec\u7684\u5e93\uff1a\nvoid worker\uff08intk\uff09{for\uff08inti=0\uff1bi&lt\uff1b10\uff1b++i\uff09{std:\uff1acout&lt\uff1b&lt\uff1bk\uff1byield\uff08\uff09\uff1b}void starter\uff08\uff09{for\uff08int i=0\uff1bi&lt\uff1b5\uff1b++i\uff09{fork\uff08std:\uff1abind\uff08worker\uff0ci\uff09\uff09\uff1b}int main\uff08\uff09{Scheduler:\uff1aStart\uff08starter\uff09\uff1b//Output://0102103210432104321043210432104321043210432104432434}\n[1] -\u5728\u5e93\u4e2d\uff0c\u5904\u7406\u7a0b\u5e8f\u662f\u5bf9\u8c61\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u81ea\u7136\u5730\u5305\u542b\u4efb\u4f55\u6570\u636e\u3001\u8f85\u52a9\u51fd\u6570\u548c\u989d\u5916\u7684\u7a0b\u5e8f\u5458&#39\uff1bs\u63a5\u53e3\u3002\n\u7f16\u8bd1\u5e93\u548c\u793a\u4f8b\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u7528cmake\u3002\u5728\u4efb\u4f55\u975e\u53e4\u4ee3\u7248\u672c\u4e2d\u90fd\u9700\u8981cmake\u548cboost\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u5185\u5bb9\u53ef\u4ee5\u5728macOS\u4e0a\u5b9e\u73b0\uff1a\n\u8fd9\u5c06\u6784\u5efa\u5e93\u548c\u793a\u4f8b\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u4e00\u4e2a\u793a\u4f8b\u6765\u68c0\u67e5\u5b83\u662f\u5426\u6709\u6548\u3002\u4e0b\u9762\u5c06\u8fd0\u884c\u7ebf\u7a0b\u793a\u4f8b-\u60a8\u53ef\u4ee5\u5728\u8f93\u51fa\u4e2d\u770b\u5230\u7ebf\u7a0b\u7684\u4ea4\u9519\uff1a", "note_en": "Effect handlers allow for programming with user-defined computational effects, with applications including custom lightweight concurrency (threads, async-await, actors, generators), error handling, dependency injection, etc. Effect handlers originate from the realm of functional programming, and the main goal of this  highly experimental library is to explore how they fit in the more object-oriented setting of C++.\n The library relies on modern C++ features (move semantics, variadic templates, compile-time evaluation) to achieve elegant programmer-level interface, memory management of handlers, and relative type-safety. Internally, it uses the  boost::context library for call-stack manipulation, and so it implements one-shot handlers only.\n  Reference - A detailed explanation of the library&#39;s API and a short discussion about the overall design of the library. It is a suitable introduction for a reader already familiar with effect handlers (for example, as they are usually discussed in the context of functional programming).\n Coming soon: Tutorial - An introduction to programming with effect handlers. Suitable for readers not familiar with handlers.\n  As a sneak preview, we can use effect handlers to define our own tiny library for cooperative lightweight threads. The programmer&#39;s interface will consist of two functions,  yield and  fork, together with a class that implements a scheduler:\n void  yield();   // Used by a thread to give up control void  fork(std::function&lt; void()&gt; proc);   // Start a new thread class  Scheduler { public:  static  void  Start(std::function&lt; void()&gt; f);};\n The static member function  Start initiates the scheduler with  f as the body of the first thread. It returns when all threads finish their jobs.\n To implement this interface, we first define two  commands, which are data structures used for transferring control from the client code to the handler. We implement  yield and  fork to invoke these commands. (The name of the class  OneShot is supposed to remind the programmer that we&#39;re dealing with one-shot handlers only, meaning you cannot resume the same resumption twice).\n # include   &#34;cpp-effects/cpp-effects.h &#34; using  namespace  CppEffects ; struct  Yield : Command&lt; void&gt; { }; struct  Fork : Command&lt; void&gt; { std::function&lt; void()&gt; proc;}; void  yield(){  OneShot::InvokeCmd(Yield{});} void  fork(std::function&lt; void()&gt; proc){  OneShot::InvokeCmd(Fork{{}, proc});}\n We define the scheduler, which is a  handler that can interpret the two commands by pushing the resumptions (i.e., captured continuations) to the queue.\n // Res is the type of suspended threads using Res = std::unique_ptr&lt;Resumption&lt; void,  void&gt;&gt;; class  Scheduler :  public  Handler&lt; void,  void, Yield, Fork&gt; { public:  static  void  Start(std::function&lt; void()&gt; f) {  Run(f);  while (!queue. empty()) {   // Round-robin scheduling  auto resumption =  std::move(queue. front()); queue. pop_front();  OneShot::Resume( std::move(resumption)); } } private:  static std::list&lt;Res&gt; queue;  static  void  Run(std::function&lt; void()&gt;) { OneShot:: Handle&lt;Scheduler&gt;(f); }  void  CommandClause(Yield, Res r)  override { queue. push_back( std::move(r)); }  void  CommandClause(Fork f, Res r)  override { queue. push_back( std::move(r)); queue. push_back(OneShot::MakeResumption&lt; void&gt;( std::bind(Run, f. proc))); }  void  ReturnClause()  override { }};std::list&lt;Res&gt; Scheduler::queue;\n And that&#39;s all it takes! We can now test our library by starting a few threads:\n void  worker( int k){  for ( int i =  0; i &lt;  10; ++i) { std::cout &lt;&lt; k;  yield(); }} void  starter(){  for ( int i =  0; i &lt;  5; ++i) {  fork( std::bind(worker, i)); }} int  main(){  Scheduler::Start(starter);   // Output:   // 01021032104321043210432104321043210432104321432434}\n   [1] - In the library handlers are objects, so they can naturally contain any data, auxiliary functions, and additional programmer&#39;s interface.\n  The easiest way to compile the library and the examples is to use  cmake. You will need  cmake and  boost in any non-ancient versions. For example, the following should do the trick on macOS:\n  This will build the library and the examples. You can check that it works by running an example. The following will run the  threads example - you can see the interleaving of threads in the output:", "posttime": "2022-02-17 03:08:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "c++,\u7a0b\u5e8f,\u5904\u7406\u7a0b\u5e8f,effect", "title": "C++\u4e2d\u7684\u51fd\u6570\u5904\u7406\u7a0b\u5e8f\u5e93", "title_en": "A library for effect handlers in C++", "transed": 1, "url": "https://github.com/maciejpirog/cpp-effects", "via": "", "real_tags": ["c++", "\u7a0b\u5e8f", "\u5904\u7406\u7a0b\u5e8f", "effect"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073676, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5927\u5bb6\u597d\uff0c\u6211&#39\uff1b\u6211\u4e0d\u719f\u6089\u8fd9\u4e9b\u8bba\u575b\uff0c\u4f46\u6211&#39\uff1b\u6211\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u5728\u641e6502\u7ec4\u88c5\u3002\u3002\u3002\u51e0\u5e74\u524d\uff0c\u6211\u6709\u4e00\u4e2a\u75af\u72c2\u7684\u60f3\u6cd5\uff0c\u5c1d\u8bd5\u5c06Commodore 64\u5185\u6838\u548c\u57fa\u672cROM\u79fb\u690d\u5230NES\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684CPU\u57fa\u672c\u76f8\u540c\u3002\u4f46\u5f53PPU\u7684\u4e8b\u60c5\u53d8\u5f97\u590d\u6742\u65f6\uff0c\u6211\u653e\u5f03\u4e86\u3002\u51e0\u5468\u524d\uff0c\u6211\u770b\u5230\u6709\u4eba\u628a\u5b83\u79fb\u690d\u5230Atari 1200XL\u4e0a\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a&#39\uff1b\u6211\u4f1a\u518d\u8bd5\u4e00\u6b21\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u80fd\u591f\u5236\u4f5c\u4e00\u4e2a\uff08\u5927\u90e8\u5206\uff09\u5de5\u4f5c\u7cfb\u7edf\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u89c6\u9891\uff1a\u6211\u53ef\u4ee5&#39\uff1b\u6211\u4eec\u65e0\u6cd5\u5728\u786c\u4ef6\u4e0a\u6d4b\u8bd5\u5b83\uff0c\u4f46\u5728\u4eff\u771f\u4e2d\u4f3c\u4e4e\u8fd8\u53ef\u4ee5\u3002\u56e0\u4e3a\u5b83\u9700\u8981\u5bb6\u5ead\u57fa\u672c\u952e\u76d8\u652f\u6301\uff0c\u6211\u60f3\u6211&#39\uff1b\u6211\u53ea\u9650\u4e8eFCEUX\u548cBizHawk\uff0c\u5c3d\u7ba1\u6211\u53ef\u4ee5&#39\uff1b\u6211\u5f97\u4e0d\u5230BizHawk&#39\uff1b\u5b83\u7684\u952e\u76d8\u652f\u6301\u6839\u672c\u4e0d\u8d77\u4f5c\u7528\u3002FCEUX 2.6.2\u4f3c\u4e4e\u4e5f\u6709\u70b9\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4e0d\u5f97\u4e0d\u4e3a\u5b83\u7f16\u5199\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\u3002\u6211&#39\uff1b\u6211\u4e5f\u4e0d\u786e\u5b9a\u662f\u5426\u53d1\u5e03\u8be5\u9879\u76ee\u7684\u4ee3\u7801\u3002\u867d\u7136\u4f3c\u4e4e\u6ca1\u6709\u4eba\u5173\u5fc3github\u5468\u56f4\u5df2\u7ecf\u5b58\u5728\u7684\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\u3002\u3002\u3002\u5b9e\u73b0\u7ec6\u8282\u6211\u4f7f\u7528\u4e86MMC5\u6620\u5c04\u5668\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u5728\u6587\u672c\u5c4f\u5e55\u4e0a\u4f7f\u7528ExRAM\uff0c\u800c\u4e0d\u7528\u62c5\u5fc3\u5728PPU\u4e2d\u8bfb/\u5199\u5b57\u8282\u3002\u5185\u6838\u548c\u57fa\u672cROM\u6bcf\u4e2a\u90fd\u662f8KB\uff0c\u6240\u4ee5\u6211\u628a\u5b83\u4eec\u653e\u5728\u6700\u540e\u4e24\u4e2a\u5b58\u50a8\u5e93\u4e2d\uff08C000-$FFFF\uff09\uff0c\u5e76\u7528PRG RAM\uff086000-$BFFF\uff09\u586b\u5145\u5176\u4ed6\u5b58\u50a8\u5e93\u3002OS RAM\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u662f\u4fdd\u7559\u7684\uff0c\u5176\u4f59\u5b57\u8282\u53ef\u4f9bBASIC\u4f7f\u7528\u3002\u56e0\u6b64&#34\uff1b24575\u5b57\u8282\u7a7a\u95f2&#34\uff1b\u5728\u542f\u52a8\u5c4f\u5e55\u4e2d\uff1a$C000-$6001=$5FFF=24575\u3002CHR ROM\u53ea\u5305\u542bC64\u4e2d\u7684\u9ed8\u8ba4all caps\u5b57\u7b26\u96c6\u3002\u6211\u7981\u7528\u4e86\u6240\u6709\u7684\u6620\u5c04\u5668&#39\uff1bs\u4e2d\u65ad\uff0c\u4f46\u64cd\u4f5c\u7cfb\u7edf\u7528\u4e8e\u952e\u76d8\u626b\u63cf\u7684\u5149\u6805\u626b\u63cf\u9664\u5916\uff0c\u56e0\u4e3a\u5b83&#39\uff1b\u5982\u679c\u4f7f\u7528MMC5\uff0c\u5b83\u5c06\u514d\u8d39\u83b7\u5f978\u4f4d\u523016\u4f4d\u7684\u4e58\u6cd5\u5668\u3002\u6211\u6d4b\u8bd5\u4e86\u5b83\uff0c\u5b83\u5f88\u6709\u6548\uff0c\u4f46\u6211\u53ef\u4ee5&#39\uff1b\u6211\u627e\u4e0d\u5230\u5b83\u7684\u5b9e\u9645\u7528\u9014\u3002\uff08\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e2a\u9879\u76ee\u6709\u4efb\u4f55\u5b9e\u9645\u7528\u9014\uff01\uff09\u539f\u59cb\u4ee3\u7801\u6765\u81ea\u6211\u5728github\u4e0a\u53d1\u73b0\u7684\u4e00\u4e2a\u5e26\u5927\u91cf\u6ce8\u91ca\u7684\u53cd\u6c47\u7f16\u3002\u6211\u9700\u8981\u505a\u4e00\u4e9b\u5c0f\u7684\u4fee\u6539\uff0c\u8ba9\u5b83\u4e0eca65\u7ec4\u88c5\u5728\u4e00\u8d77\uff0c\u4e3b\u8981\u662f\u5728\u6807\u7b7e\u540e\u6dfb\u52a0\u5192\u53f7\u3002\u4e3a\u4e86\u7ed9\u65b0\u4ee3\u7801\u817e\u51fa\u7a7a\u95f4\uff0c\u6211\u5220\u9664\u4e86\u4e0e\u6570\u636e\u76d2\u5e26\u3001\u8c03\u5236\u89e3\u8c03\u5668\u3001RS232\u8bbe\u5907\u548c\u5f69\u8272RAM\u76f8\u5173\u7684\u90e8\u5206\u3002\u6ce8\u610f\u4e8b\u9879/\u672a\u6765\u5de5\u4f5cFCEUX\u4f3c\u4e4e\u53ea\u652f\u6301\u5b57\u6bcd\u7684shift\u952e\u3002\u4f8b\u5982\uff0c&#34\uff1bshift+A&#34\uff1b\u5de5\u4f5c\uff0c\u4f46\u662f&#34\uff1bshift+1\u548c#34\uff1b\u4e0d&#39\uff1b\u4e0d\u8981\u6ce8\u518c\u4e3a\u6309\u952e\u3002\u56e0\u6b64&#39\uff1bIt\u2019\u6ca1\u529e\u6cd5\u6253&#34&#34;, \u6216\u8005\u5927\u591a\u6570\u5176\u4ed6\u7b26\u53f7&#39\uff1bd.\u57fa\u672c\u7684\u9700\u6c42\u3002\u7136\u800c\uff0c\u63a7\u5236\u952e\u7ec4\u5408\u662f\u6709\u6548\u7684\uff0c\u6240\u4ee5\u6211\u8ba9\u952e\u76d8\u4ee3\u7801\u8868\u73b0\u5f97\u597d\u50cf\u63a7\u5236\u952e\u548cshift\u952e\u4e00\u6837\u3002C64\u6587\u672c\u5c4f\u5e55\u662f40\u5217\u4e5825\u884c\u3002\u6211\u628a\u5b83\u6539\u4e3a32x30\uff0c\u8fd9\u5bf9\u6a21\u62df\u5668\u6765\u8bf4\u5f88\u597d\uff0c\u4f46\u6211\u610f\u8bc6\u5230\u5b83&#39\uff1b\u5b83\u8d85\u51fa\u4e86\u7535\u89c6\u7684\u663e\u793a\u8303\u56f4\u3002\uff08Family BASIC\u7684\u6587\u672c\u5c4f\u5e55\u53ea\u670928x24\u3002\uff09\u8fdb\u4e00\u6b65\u7f29\u5c0f\u5b83\u5c06\u9700\u8981\u5927\u91cf\u4ee3\u7801\u66f4\u6539\uff0c\u4ee5\u5ffd\u7565\u6bcf\u4e2a\u5c4f\u5e55\u884c\u524d\u540e\u7684\u5c4f\u5e55RAM\u5b57\u8282\u3002\u56e0\u6b64&#39\uff1b\u8fd9\u5c31\u662f\u6211\u73b0\u5728\u7684\u5168\u90e8\u3002\u6211\u5e0c\u671b\u4f60\u559c\u6b22\u8fd9\u672c\u4e66\uff01\u6211\u4ecd\u7136\u53ef\u4ee5&#39\uff1bI don\u2019\u6211\u6839\u672c\u4e0d\u76f8\u4fe1\u5b83\u80fd\u8d77\u4f5c\u7528\u3002", "note_en": "Hi everyone,  I&#39;m new to these forums, but I&#39;ve been messing around with 6502 assembly for decades...  A few years ago, I got the crazy idea to try porting the Commodore 64 KERNAL and BASIC ROMs to the NES, since their CPUs are mostly the same. But I gave up when things got complicated with the PPU. Then a couple weeks ago, I saw that someone ported it to the Atari 1200XL, so I decided I&#39;d give it another shot. This time, I was able to make a (mostly) working system.     Here are some videos of it in action: I can&#39;t test it on hardware, but it seems fine in emulation. Since it requires Family BASIC keyboard support, I think I&#39;m limited to just FCEUX and BizHawk, though I can&#39;t get BizHawk&#39;s keyboard support working at all. FCEUX 2.6.2 seems a bit buggy too, so I had to write some workarounds for it.  I&#39;m also not sure about publishing the code for the project. Though it seems that nobody cares about the various disassemblies already floating around github...   Implementation Details I went with the MMC5 mapper so that I could use ExRAM for the text screen, and not worry as much about reading/writing bytes in the PPU. The KERNAL an BASIC ROM are 8 kB each, so I put them in the last two banks ($C000-$FFFF), and filled the other banks with PRG RAM ($6000-$BFFF). The first byte of OS RAM is reserved, and the rest is available to BASIC. Hence the &#34;24,575 bytes free&#34; in the splash screen: $C000 - $6001 = $5FFF = 24,575.  The CHR ROM just contains the default all-caps character set from the C64.   I disabled all the mapper&#39;s interrupts except for the raster one, which the OS uses for keyboard scans, etc.  Because it&#39;s using the MMC5, it gets an 8-bit-to-16-bit multiplier for free. I tested it, and  it works, but I can&#39;t find a practical use for it. (Not that this project has any practically uses!   )  The original code comes from a heavily annotated disassembly I found on github. I needed to make some minor changes to get it assembled with ca65, mostly adding colons after labels. To free up space for new code, I removed pieces related to datacassettes, modems, RS232 devices and color RAM.   Caveats / Future Work FCEUX only seems to support the shift key for letters. E.g., &#34;shift+A&#34; works, but &#34;shift+1&#34; doesn&#39;t register as a keypress. So there&#39;s no way to type &#34;!&#34;, or most other symbols you&#39;d need for BASIC. However, control key combos work, so I made the keyboard code act as if control were the same as shift.  The C64 text screen is 40 columns by 25 rows. I changed it to 32x30, which is fine for emulators, but I realize it&#39;s outside what TVs would display. (Family BASIC&#39;s text screen is just 28x24.) Shrinking it further would require substantial code changes to ignore the screen RAM bytes before and after each screen line.  So that&#39;s all I have now. I hope you enjoyed the writeup! I still can&#39;t believe that it works at all.", "posttime": "2022-02-17 03:08:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u672c,basic,\u4ee3\u7801", "title": "NES 64\u2013Commodore 64\u5185\u6838\u548c\u57fa\u672cROM\u79fb\u690d\u5230NES", "title_en": "NES 64 \u2013 Commodore 64 Kernal and Basic ROMs Ported to the NES", "transed": 1, "url": "https://forums.nesdev.org/viewtopic.php?t=23693", "via": "", "real_tags": ["\u57fa\u672c", "basic", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073675, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8f6f\u4ef6\u7684\u6bcf\u4e2a\u5b50\u9886\u57df\u4e2d\uff0c\u6211\u4eec\u4e00\u904d\u53c8\u4e00\u904d\u5730\u770b\u5230\u76f8\u540c\u7684\u6545\u4e8b\u3002\u4ea7\u54c1\u4e00\u5f00\u59cb\u89c4\u6a21\u5c0f\uff0c\u65f6\u95f4\u957f\uff0c\u5728\u5176\u4ea7\u54c1\u4e2d\u6dfb\u52a0\u76f8\u90bb\u7684\u5782\u76f4\u9886\u57df\u548c\u529f\u80fd\uff0c\u6700\u7ec8\u6210\u4e3a\u4e00\u4e2a\u5e73\u53f0\u3002\u4e00\u65e6\u8fd9\u4e9b\u5e73\u53f0\u53d8\u5f97\u8db3\u591f\u5927\uff0c\u4eba\u4eec\u5c31\u5f00\u59cb\u601d\u8003\u5982\u4f55\u66f4\u597d\u5730\u4e3a\u88ab\u5ffd\u89c6\u7684\u5782\u76f4\u9886\u57df\u670d\u52a1\uff0c\u6216\u8005\u62bd\u8c61\u51fa\u529f\u80fd\uff0c\u4ee5\u4fbf\u5c06\u5176\u5206\u89e3\u4e3a\u4e13\u95e8\u6784\u5efa\u7684\u5757\uff0c\u7136\u540e\u5f00\u59cb\u5206\u89e3\u3002\u6700\u7ecf\u5178\u7684\u4f8b\u5b50\u5c31\u662fCraigslist\u7684\u62c6\u5206\u3002\u4f60\u53ef\u80fd\u5728\u7f51\u4e0a\u7684\u67d0\u4e2a\u5730\u65b9\u770b\u5230\u8fc7\u8fd9\u4e2a\u56fe\u8868\u7684\u4e00\u4e2a\u7248\u672c\uff1a\n\u5728\u6570\u636e\u4e16\u754c\u91cc\uff0c\u5b83&#39\uff1b\u5f88\u96be\u7406\u89e3\u662f\u4ec0\u4e48\u6784\u6210\u4e86\u4e00\u4e2a\u5e73\u53f0\uff0c\u4f46\u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e9b\u5de5\u5177\u81ea\u6211\u5ba3\u4f20\u3002\u6c14\u6d41\u662f\u5176\u4e2d\u4e4b\u4e00\uff1a\nAirflow\u662f\u7531\u793e\u533a\u521b\u5efa\u7684\u4e00\u4e2a\u5e73\u53f0\uff0c\u7528\u4e8e\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u7f16\u5199\u3001\u5b89\u6392\u548c\u76d1\u63a7\u5de5\u4f5c\u6d41\u3002\n\u4eba\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u5de5\u4f5c\u6d41\u662f\u5de5\u4f5c\u6d41\u7ba1\u7406\u5668\uff0c\u4f46\u6beb\u65e0\u7591\u95ee\uff0c\u4ea7\u54c1\u7684\u7075\u6d3b\u6027\u5141\u8bb8\u5b83\u627f\u62c5\u989d\u5916\u7684\u8d23\u4efb\u3002\u5927\u91cf\u4f7f\u7528Airflow\u7684\u7528\u6237\u53ef\u4ee5\u5728\u4e0d\u79bb\u5f00\u5e73\u53f0\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u5927\u91cf\u4e0e\u6570\u636e\u76f8\u5173\u7684\u4efb\u52a1\uff1b\u4ece\u63d0\u53d6\u548c\u52a0\u8f7d\u811a\u672c\u5230\u751f\u6210\u62a5\u544a\uff0c\u518d\u5230\u4f7f\u7528Python\u548cSQL\u8fdb\u884c\u8f6c\u6362\uff0c\u518d\u5230\u5c06\u6570\u636e\u540c\u6b65\u56deBI\u5de5\u5177\u3002\n\u5728\u6570\u636e\u5806\u6808\u788e\u7247\u5316\u4e4b\u524d\uff0c\u521b\u5efa\u5e26\u6709\u6c14\u6d41\u7684\u7aef\u5230\u7aef\u7ba1\u9053\u5e76\u4e0d\u7f55\u89c1\u3002\u8fc7\u53bb\uff0c\u4f01\u4e1a\u901a\u5e38\u5c06\u51e0\u4e4e\u6574\u4e2a\u6570\u636e\u5de5\u4f5c\u6d41\u6784\u5efa\u4e3a\u5185\u90e8\u6570\u636e\u5de5\u7a0b\u5e08\u5f00\u53d1\u7684\u5b9a\u5236\u811a\u672c\u3002\u66f4\u5927\u7684\u516c\u53f8\u751a\u81f3\u5728Airflow\u5185\u90e8\u6784\u5efa\u4e86\u81ea\u5df1\u7684\u6846\u67b6\uff0c\u4f8b\u5982\u5177\u6709\u7c7b\u4f3cdbt\u7684SQL\u8f6c\u6362\u529f\u80fd\u7684\u6846\u67b6\uff0c\u4ee5\u4fbf\u6570\u636e\u5206\u6790\u5e08\u66f4\u5bb9\u6613\u7f16\u5199\u8fd9\u4e9b\u7ba1\u9053\u3002\n\u5982\u4eca\uff0c\u6570\u636e\u4ece\u4e1a\u8005\u62e5\u6709\u8bb8\u591a\u5de5\u5177\uff0c\u4ed6\u4eec\u5f88\u5c11\u9700\u8981\u4f7f\u7528\u6c14\u6d41\u4e4b\u7c7b\u7684\u5de5\u5177\u3002Fivetran\u548cAirbyte\u8d1f\u8d23\u4f7f\u7528Airflow\u7f16\u5199\u7684\u63d0\u53d6\u548c\u52a0\u8f7d\u811a\u672c\u3002dbt\u7528\u4e8e\u6570\u636e\u8f6c\u6362\uff0c\u4eba\u53e3\u666e\u67e5\u548cHightouch\u7528\u4e8e\u53cd\u5411ETL\u3002\u5ea6\u91cf\u548c\u5b9e\u9a8c\u5c42\u4e5f\u6709\u81ea\u5df1\u7684\u4e13\u6ce8\u5de5\u5177\uff1b\u4f7f\u7528Transform\u3001Metriql\u3001Supergrain\u548cEppo\u5b9e\u9a8c\u7b49\u5de5\u5177\u8fdb\u884c\u5ea6\u91cf\u3002\u67d0\u4e9b\u516c\u53f8\u5728\u6570\u636e\u79d1\u5b66\u548cML\u5de5\u4f5c\u8d1f\u8f7d\u65b9\u9762\u4f9d\u8d56\u6c14\u6d41\uff0c\u4f46\u968f\u7740MLOP\u7684\u666e\u53ca\uff0c\u8fd9\u4e00\u5c42\u4e5f\u88ab\u62bd\u8c61\u51fa\u6765\u3002\u50cfFeast\u8fd9\u6837\u7684\u5f00\u653e\u6e90\u4ee3\u7801\u5de5\u5177\u6b63\u5728\u5c06\u8fc7\u53bb\u4f5c\u4e3a\u72ec\u7acbPython\u811a\u672c\u5b58\u5728\u7684\u529f\u80fd\u7ba1\u7406\u6700\u4f73\u5b9e\u8df5\u5206\u89e3\u5f00\u6765\u3002\n\u5982\u679c\u6c14\u6d41\u7684\u5206\u79bb\u610f\u5473\u7740\u6240\u6709\u7684\u91cd\u7269\u90fd\u662f\u7531\u5355\u72ec\u7684\u5de5\u5177\u5b8c\u6210\u7684\uff0c\u90a3\u4e48\u5269\u4e0b\u4ec0\u4e48\u5462\uff1f\n\u7f3a\u5c11\u7684\u5dee\u8ddd\u662f\uff0c\u5bf9\u4e8e\u9700\u8981\u5728\u975eSQL\u8bed\u8a00\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u4ecd\u7136\u6ca1\u6709\u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u4f8b\u5982\uff0c\u5728dbt DAG\u4e2d\u6dfb\u52a0\u6570\u636e\u8f6c\u6362\u4ecd\u7136\u662f\u4e00\u9879\u975e\u5e38\u91cd\u8981\u7684\u4efb\u52a1\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662fdbt\u5b9e\u9a8c\u5ba4\u7684\u7279\u91cc\u65af\u6c40\u6307\u51fa\u7684\u5b9e\u4f53\u89e3\u6790\u573a\u666f\u3002DAG\u4e2d\u7684Python\u8282\u70b9\u4e0d\u662f\u8f6c\u6362\u4e5f\u662f\u5f88\u5e38\u89c1\u7684\u3002\u8fd9\u6837\u7684\u8282\u70b9\u53ef\u80fd\u4f1a\u4f7f\u7528ML\u6a21\u578b\u8ba1\u7b97\u98ce\u9669\u7528\u6237\uff0c\u5c06\u9884\u6d4b\u5199\u5165\u8868\u4e2d\uff0c\u7136\u540e\u7531SQL\u8f6c\u6362\u8fdb\u4e00\u6b65\u5904\u7406\u3002\u6211\u4eec\u5728Features and Labels\u4e0a\u901a\u8fc7\u5411dbt\u6dfb\u52a0\u53cc\u8bed\u652f\u6301\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u53e6\u4e00\u9879\u91cd\u8981\u804c\u8d23\u662f\u5b89\u6392\u65f6\u95f4\uff0c\u4f46\u8fd9\u662f\u4e00\u9879\u76f8\u5bf9\u7b80\u5355\u7684\u4efb\u52a1\u3002EL\u901a\u5e38\u662f\u6570\u636e\u7ba1\u9053\u7684\u8d77\u70b9\uff0c\u6240\u4ee5\u6211\u53ef\u4ee5\u770b\u5230EL\u5de5\u5177\uff08\u751a\u81f3\u662fdbt Cloud\uff09\u5728\u6ca1\u6709\u6c14\u6d41\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4eba\u4eec\u975e\u5e38\u559c\u6b22Airflow UI\uff0c\u5b83\u63d0\u4f9b\u4e86\u6574\u4e2a\u7cfb\u7edf\u7684\u6574\u4f53\u89c6\u56fe\uff0c\u53ef\u4ee5\u8f7b\u677e\u53d1\u73b0\u5931\u8d25\u7684\u5730\u65b9\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u91cd\u65b0\u8fd0\u884c\u4f5c\u4e1a\u3002\u8fd9\u662f\u4e00\u4e2a\u6b63\u786e\u7684\u89c2\u70b9\uff0c\u4f46\u968f\u7740\u66f4\u591a\u7684\u590d\u6742\u6027\u88ab\u8f6c\u79fb\u5230\u5176\u4ed6\u5de5\u5177\u4e2d\uff0c\u6574\u4f53\u89c2\u70b9\u7684\u56de\u62a5\u8d8a\u6765\u8d8a\u5c0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6c14\u6d41\u5de5\u4f5c\u6d41\u6b63\u5728\u8c03\u7528\u590d\u6742\u7684dbt\u4e91\u4f5c\u4e1a\uff0c\u5219\u65e0\u6cd5\u4ece\u6c14\u6d41UI\u4e2d\u89c2\u5bdf\u5230dbt DAG\u7684\u590d\u6742\u6027\u3002\n\u8fd8\u6709\u4e00\u4e9b\u5de5\u5177\u6b63\u8bd5\u56fe\u901a\u8fc7\u66f4\u5bb9\u6613\u5730\u90e8\u7f72\u4efb\u52a1\u6216\u66f4\u5177\u53ef\u6269\u5c55\u6027\u3001\u5bb9\u5668\u5316\u6216\u8d44\u4ea7\u9a71\u52a8\uff0c\u6210\u4e3a\u66f4\u597d\u7684\u5de5\u5177\u3002\u3002\u3002\u5728\u4e0d\u65ad\u53d8\u5316\u7684\u6570\u636e\u73af\u5883\u4e2d\u5f88\u96be\u505a\u51fa\u9884\u6d4b\uff0c\u4f46\u6211\u4e0d\u786e\u5b9a\u6211\u4eec\u662f\u5426\u9700\u8981\u66f4\u597d\u7684\u6c14\u6d41\u3002\u6784\u5efa\u66f4\u597d\u7684\u6c14\u6d41\u611f\u89c9\u5c31\u50cf\u662f\u8bd5\u56fe\u4f18\u5316\u7f16\u5199\u672c\u6765\u4e0d\u5e94\u8be5\u7f16\u5199\u7684\u4ee3\u7801\u3002\n\u5404\u79cd\u5404\u6837\u7684\u5de5\u5177\u6b63\u5728\u5206\u89e3\u6c14\u6d41\uff0c\u8fd9\u79cd\u591a\u6837\u6027\u6b63\u5728\u73b0\u4ee3\u6570\u636e\u5806\u6808\u4e2d\u9020\u6210\u5927\u91cf\u788e\u7247\u3002\u548c\u5176\u4ed6\u4eba\u4e00\u6837\uff0c\u6211\u4e5f\u9884\u6d4b\u8fd9\u4e9b\u5de5\u5177\u5728\u672a\u6765\u51e0\u5e74\u4f1a\u5f97\u5230\u4e00\u4e9b\u6574\u5408\u3002\u6211\u76f8\u4fe1dbt\u4e91\u662f\u5b9e\u73b0\u6574\u5408\u7684\u6700\u4f73\u4f4d\u7f6e\u3002\u4e0b\u4e00\u7bc7\u6587\u7ae0\u5c06\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd\uff01", "note_en": "In each subdomain of software, we have seen the same story over and over again. Products start small, in time, add adjacent verticals and functionality to their offerings and end up becoming a  platform. Once these platforms become big enough, people start to figure out how to better serve neglected verticals or abstract out functionality in order to break it down into purpose-built chunks, and  the unbundling starts. The most classic example of this is the unbundling of Craigslist. You have probably seen a version of this diagram on the internet somewhere:\n  In data world, it&#39;s hard to figure out what makes a platform, but luckily some tools self-advertise themselves as such. Airflow is one of them:\n Airflow is a platform created by the community to programmatically author, schedule and monitor workflows.\n One might consider Airflow a workflow manager, but undoubtedly the flexibility of the product allowed it to take on additional responsibilities. Heavy users of Airflow can do a vast variety of data related tasks without leaving the platform; from extract and load scripts to generating reports, transformations with Python and SQL to syncing back data to BI tools.\n Before the fragmentation of the data stack, it wasn\u2019t uncommon to create end-to-end pipelines with Airflow. Organizations used to build almost entire data workflows as custom scripts developed by in-house data engineers. Bigger companies even built their own frameworks inside Airflow, for example frameworks with dbt-like functionality for SQL transformations in order to make it easier for data analysts to write these pipelines.\n   Today, data practitioners have many tools under their belt and only very rarely they have to reach for a tool like Airflow.  Fivetran and  Airbyte took care of the extract and load scripts that one might write with Airflow.  dbt came for the data transformations,  Census and  Hightouch for Reverse ETL. Metrics and experimentation layers are also getting their own focused tooling; metrics with tools like  Transform,  Metriql,  Supergrain \u00a0and experimentation with  Eppo.  Certain companies relied on Airflow for data science and ML workloads, but with the popularity of MLOps, that layer is also being abstracted out. Open source tools like  Feast are unbundling best practices for feature management that used to exist as independent Python scripts.\n   If the unbundling of Airflow means all the heavy lifting is done by separate tools, what is left behind?\n The missing gap is that we still don\u2019t have a good solution for things that need to happen in non-SQL languages. For example, adding pandas data transformations within a dbt DAG is still a non-trivial task. Another example is the  entity resolution scenario that Tristian from dbt Labs points out. It is also very common to have Python nodes in a DAG that are not transformations. Such nodes might calculate risky users with an ML model, write predictions to a table that is then further processed by SQL transformations. We are working on this problem at  Features and Labels by  adding bilingual support to dbt.\n Another big responsibility is scheduling, but this is a relatively simple task. EL is usually the starting point of a data pipeline so I can see EL tools (or even dbt Cloud) taking this on without Airflow. People really like the Airflow UI, it provides a holistic view of the whole system to easily discover what has failed, and re-run jobs when necessary. This is a valid point, but the holistic view has diminishing returns as more complexity is moved inside other tools. For example if an Airflow workflow is invoking a complicated dbt Cloud job the complexity of the dbt DAG is not observable from the Airflow UI.\n Then there are tools that are trying to become a better Airflow by making it easier to deploy tasks or being more scalable or containerized or asset driven... It\u2019s hard to make predictions in the ever evolving data landscape, but I am not sure if we need a better Airflow. Building a better Airflow feels like trying to optimize writing code that shouldn\u2019t have been written in the first place.\n A diverse set of tools is unbundling Airflow and this diversity is causing substantial fragmentation in modern data stack. Like everyone else, I also predict some consolidation of these tools in the coming years. I believe dbt Cloud is the best positioned place for this consolidation to happen. More on this in the next post!", "posttime": "2022-02-17 03:06:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6c14\u6d41,unbundling,\u6570\u636e", "title": "\u6c14\u6d41\u7684\u5206\u79bb", "title_en": "The Unbundling of Airflow", "transed": 1, "url": "https://blog.fal.ai/the-unbundling-of-airflow-2/", "via": "", "real_tags": ["\u6c14\u6d41", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073674, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u572820\u4e16\u7eaa80\u5e74\u4ee3\u548c90\u5e74\u4ee3\u7684\u9f0e\u76db\u65f6\u671f\uff0cP.J.O'Rourke\u62e5\u6709\u5176\u4e2d\u4e00\u4e2a\u7f72\u540d\u2014\u2014\u6bd4\u5982\u8bfa\u62c9\u00b7\u57c3\u5f17\u9f99\u3001\u8fc8\u514b\u5c14\u00b7\u91d1\u65af\u5229\u6216\u5361\u5c14\u6587\u00b7\u7279\u91cc\u6797\u7684\u7f72\u540d\u2014\u2014\u8fd9\u8ba9\u5305\u62ec\u8fd9\u4e00\u4f4d\u5728\u5185\u7684\u8bb8\u591a\u8bfb\u8005\u90fd\u5145\u6ee1\u4e86\u671f\u5f85\u3002\n\u5468\u4e8c\u53bb\u4e16\uff0c\u4eab\u5e7474\u5c81\u7684\u5965\u6d1b\u514b\u6765\u81ea\u653f\u754c\u7684\u53f3\u7ffc\uff0c\u8fd9\u8ba9\u4ed6\u500d\u611f\u5174\u8da3\u3002\u4ed6\u662f\u4e00\u4f4d\u7f55\u89c1\u7684\u4fdd\u5b88\u4e3b\u4e49\u8005\uff0c\u4f3c\u4e4e\u6bd4\u5176\u4ed6\u4eba\u8fc7\u5f97\u66f4\u597d\uff0c\u5438\u6bd2\u4e5f\u66f4\u597d\u3002\u4ed6\u535a\u89c8\u7fa4\u4e66\uff1b\u4ed6\u4f3c\u4e4e\u662f\u552f\u4e00\u6d3b\u7740\u7684\u641e\u7b11\u5171\u548c\u515a\u4eba\u3002\n\u4ed6\u7684\u4e66\u2014\u2014\u300a\u5730\u72f1\u7684\u5047\u65e5\u300b\uff081988\uff09\u3001\u300a\u5a3c\u5993\u8bae\u4f1a\u300b\uff081991\uff09\u548c\u300a\u5e74\u9f84\u548c\u72e1\u8bc8\u6253\u8d25\u4e86\u9752\u6625\u3001\u5929\u771f\u548c\u7cdf\u7cd5\u7684\u53d1\u578b\u300b\uff081995\uff09\u7b49\u2014\u2014\u7ecf\u5e38\u6536\u96c6\u4ed6\u7684\u65b0\u95fb\u62a5\u9053\u3002\u8fd9\u4e9b\u4e66\u6e05\u695a\u5730\u8868\u660e\uff0c\u4ed6\u4eec\u7684\u4f5c\u8005\u559c\u6b22\u8d70\u51fa\u5bb6\u95e8\u3002\n\u4ed6\u7684\u4e00\u4e9b\u6700\u597d\u7684\u4f5c\u54c1\u662f\u5173\u4e8e\u5f00\u9614\u7684\u9053\u8def\u7684\u3002\u65e9\u671f\u7684\u4e00\u7bc7\u6587\u7ae0\u6709\u4e00\u4e2a\u4ee4\u4eba\u96be\u5fd8\u7684\u6807\u9898\uff1a\u201c\u5982\u4f55\u5728\u5438\u98df\u6bd2\u54c1\u7684\u540c\u65f6\u5feb\u901f\u9a7e\u9a76\uff0c\u540c\u65f6\u8ba9\u4f60\u7684\u7ffc\u738b\u53d7\u5230\u6324\u538b\uff0c\u800c\u4e0d\u8ba9\u4f60\u7684\u996e\u6599\u6d12\u51fa\u6765\u3002\u201d1980\u5e74\uff0c\u4f5c\u4e3a\u6c7d\u8f66\u548c\u53f8\u673a\uff0c\u4ed6\u5f00\u7740\u4e00\u8f86\u8840\u7ea2\u8272\u6cd5\u62c9\u5229308GTS\u8d8a\u91ce\u8f66\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u5173\u4e8e\u8d85\u8d8a\u4fdd\u65f6\u6377\u7684\u6b22\u5feb\u6bb5\u843d\uff0c\u662f\u5965\u6d1b\u514b\u9ad8\u96c5\u98ce\u683c\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u7247\u6bb5\uff1a\n\u6211\u4eec\u5728\u5854\u62c9\u5fb7\u52a0\u51fa\u53e3\u9644\u8fd1\u7ecf\u8fc7\u4e00\u8f86930\u6da1\u8f6e\u4fdd\u65f6\u6377\u3002\u5f53\u6211\u4eec\u8d85\u8fc7\u4ed6\u7684\u65f6\u5019\uff0c\u4ed6\u8dd1\u4e86\u5927\u7ea690\u82f1\u91cc\uff0c\u4ed6\u8dd1\u4e86\u6211\u4eec\u4e00\u5c0f\u6bb5\u8ddd\u79bb\uff0c\u5728\u5927\u7ea6110\u82f1\u91cc\u7684\u65f6\u5019\u8d85\u8fc7\u4e86\u6211\u4eec\uff0c\u7136\u540e\u6211\u4eec\u53c8\u8d85\u8fc7\u4e86\u4ed6\u3002\u4ed6\u548c\u6211\u4eec\u9047\u5230\u7684\u4efb\u4f55\u4eba\u4e00\u6837\u52c7\u6562\uff0c\u5728120\u5c81\u7684\u65f6\u5019\u7d27\u7d27\u5730\u6293\u4f4f\u6211\u4eec\u3002\u554a\uff0c\u4f46\u540e\u6765\u2014\u2014\u7136\u540e\u6211\u4eec\u5c31\u79bb\u5f00\u4e86\u4ed6\u3002\u4e94\u79d2\u949f\u540e\uff0c\u4ed6\u53ea\u4e0d\u8fc7\u662f\u955c\u4e2d\u4e00\u4e2a\u7ffb\u8f6c\u7684\u8239\u5f62\u5706\u70b9\u3002\u6211\u60f3\u4ed6\u672c\u53ef\u4ee5\u8ddf\u4e0a\u7684\uff0c\u4f46\u5728\u9650\u901f225%\u5de6\u53f3\u7684\u60c5\u51b5\u4e0b\uff0c\u9a7e\u9a76\u4e00\u8f86\u88c5\u6709\u7eb3\u7cb9\u8001\u864e\u673a\u7684\u8822\u8f66\u80af\u5b9a\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\u3002\u4f46\u5bf9\u6211\u4eec\u6765\u8bf4\u4e0d\u662f\u3002\u6211\u7684\u7535\u52a8\u6253\u5b57\u673a\u6bd4\u6211\u4eec\u5728\u90a3\u4e2a\u7f8e\u4e3d\u7684\u65e9\u6668\u5f00\u7740\u90a3\u8f86\u6f02\u4eae\u7684\u6c7d\u8f66\u51b2\u8fdb\u4f2f\u660e\u7ff0\u65f6\u9707\u52a8\u66f4\u5927\u3002\u5728\u8fd9\u4e2a\u7f8e\u5999\u7684\u56fd\u5bb6\uff0c\u6211\u6b63\u5728\u8fdb\u884c\u4e00\u6b21\u7f8e\u4e3d\u7684\u65c5\u884c\uff0c\u4ece\u66fc\u54c8\u987f\u7684\u5854\u697c\u5230\u6258\u6f58\u52a0\u5ce1\u8c37\u7684\u60ac\u5d16\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4ece\u4eba\u7fa4\u4e2d\u586b\u5199\u4e8630\u4e2a\u57ce\u5e02\u7684\u9a8c\u5149\u5e08\u529e\u516c\u5ba4\u7684\u9884\u7ea6\u65e5\u5fd7\u68c0\u67e5\u4ed6\u4eec\u7684\u773c\u775b\u662f\u5426\u6709\u6761\u7eb9\uff0c\u56e0\u4e3a\u4ed6\u4eec\u770b\u7740\u6211\u4eec\u7ecf\u8fc7\u3002\n\u591a\u5e74\u6765\uff0c\u5965\u6d1b\u514b\u4e00\u76f4\u662f\u6eda\u77f3\u96c6\u56e2\u7684\u5916\u4ea4\u4e8b\u52a1\u4e3b\u7ba1\u3002\u5f53\u4ed6\u4e0d\u50cf\u683c\u96f7\u5384\u59c6\u00b7\u683c\u6797\u90a3\u6837\u5728\u9152\u5e97\u9152\u5427\u9732\u8425\u65f6\uff0c\u4ed6\u662f\u4e00\u4e2a\u4e8c\u5206\u6cd5\u7684\u63a2\u7d22\u8005\u3002\u201c\u6bcf\u4e2a\u7f8e\u56fd\u5927\u4f7f\u9986\u90fd\u6709\u4e24\u4e2a\u6c38\u4e45\u6027\u7279\u5f81\uff0c\u201d\u4ed6\u5199\u9053\uff1a\u201c\u4e00\u4e2a\u5de8\u5927\u7684\u53cd\u7f8e\u793a\u5a01\u548c\u4e00\u6761\u5de8\u5927\u7684\u7f8e\u56fd\u7b7e\u8bc1\u7ebf\u3002\u201d\n\u8ba3\u544a\uff1a\u5965\u9c81\u514b\u4ee5\u53f3\u7ffc\u58f0\u97f3\u800c\u95fb\u540d\uff0c\u4ed6\u5728\u653f\u5e9c\u6216\u6587\u5316\u4e2d\u6563\u5e03\u4ed6\u8ba4\u4e3a\u9700\u8981\u7684\u4efb\u4f55\u4e1c\u897f\u3002\n\u8bc4\u4ef7\uff1a\u6211\u4eec\u7684\u8bc4\u8bba\u5bb6\u5199\u9053\uff0c\u8fd9\u4f4d\u5c16\u523b\u7684\u8bbd\u523a\u4f5c\u5bb6\u7684\u4fdd\u5b88\u4e3b\u4e49\u5e76\u975e\u6559\u6761\u4e3b\u4e49\u3002\n\u65f6\u62a5\u91c7\u8bbf\uff1a2012\u5e74\uff0c\u5965\u9c81\u514b\u8bf4\u4ed6\u4e0d\u559c\u6b22\u8bfb\u5173\u4e8e\u65f6\u4e8b\u7684\u4e66\u3002\u201c\u6211\u53ef\u4ee5\u81ea\u5df1\u5199\u90a3\u4e9b\u5e9f\u8bdd\uff0c\u201d\u4ed6\u6253\u8da3\u9053\u3002\n\u6863\u6848\uff1a\u5bf9\u8bb8\u591a\u7c89\u4e1d\u6765\u8bf4\uff0c\u5965\u9c81\u514b\u7684\u7b7e\u540d\u4e66\u662f\u300a\u5993\u5973\u8bae\u4f1a\u300b\u9605\u8bfb\u6211\u4eec1991\u5e74\u7684\u8bc4\u8bba\u3002\n\u5965\u6d1b\u514b\u7684\u4fdd\u5b88\u4e3b\u4e49\u5e76\u975e\u6559\u6761\u4e3b\u4e49\u3002\u5c31\u50cf\u5f71\u54cd\u4e86\u4ed6\u7684\u5199\u4f5c\u7684H.L.\u95e8\u80af\u4e00\u6837\uff0c\u4ed6\u6700\u538c\u6076\u7684\u662f\u5723\u6d01\u3002\u5728\u5965\u6d1b\u514b\u770b\u6765\uff0c\u81ea\u7531\u4e3b\u4e49\u8005\u662f\u81ea\u547d\u4e0d\u51e1\u7684\u8ba8\u538c\u9b3c\uff0c\u4ed6\u4eec\u60f3\u201c\u8ba9\u6211\u4eec\u7528\u53e3\u628a\u6742\u8d27\u5e26\u56de\u5bb6\u201d\n\u201c\u901a\u8fc7\u5927\u58f0\u8c34\u8d23\u4e00\u5207\u574f\u4e8b\u2014\u2014\u6218\u4e89\u3001\u9965\u997f\u548c\u7ea6\u4f1a\u5f3a\u5978\u2014\u2014\u81ea\u7531\u4e3b\u4e49\u8005\u8bc1\u660e\u4e86\u4ed6\u4eec\u81ea\u5df1\u7684\u4f1f\u5927\u5584\u826f\uff0c\u201d\u4ed6\u5199\u9053\u3002\u4ed6\u8865\u5145\u9053\uff1a\u201c\u8fd9\u662f\u4e00\u79cd\u5929\u751f\u7684\u8d35\u65cf\uff0c\u8fd9\u79cd\u8d35\u65cf\u7684\u5947\u5999\u4e4b\u5904\u5728\u4e8e\uff0c\u4f60\u4e0d\u5fc5\u52c7\u6562\u3001\u806a\u660e\u3001\u575a\u5f3a\uff0c\u751a\u81f3\u5e78\u8fd0\u5730\u52a0\u5165\u5b83\uff0c\u4f60\u53ea\u9700\u8981\u81ea\u7531\u3002\u201d\n\u7136\u800c\uff0c\u4ed6\u628a\u7968\u6295\u7ed9\u4e86\u5e0c\u62c9\u91cc\u00b7\u514b\u6797\u987f\u3002\u201c\u5979\u5bf9\u4efb\u4f55\u4e8b\u60c5\u90fd\u662f\u9519\u7684\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u4f46\u5728\u6b63\u5e38\u8303\u56f4\u5185\u5979\u662f\u9519\u7684\u3002\u201d\u5173\u4e8e\u7279\u6717\u666e\uff0c\u4ed6\u8bf4\uff0c\u201c\u8fd9\u4e2a\u4eba\u4e0d\u53ef\u80fd\u6210\u4e3a\u603b\u7edf\u3002\u4f60\u77e5\u9053\uff0c\u4ed6\u4eec\u7684\u516c\u6587\u5305\u91cc\u6709\u8fd9\u4e2a\u6309\u94ae\u3002\u4ed6\u4f1a\u627e\u5230\u7684\u3002\u201d\n\u4ed6\u4ee5\u5176\u4ed6\u65b9\u5f0f\u6fc0\u6012\u4e86\u53f3\u7ffc\u3002\u4ed6\u8ba4\u4e3a\uff0c\u63a5\u53d7\u5bfb\u6c42\u5e87\u62a4\u8005\u7b26\u5408\u4fdd\u5b88\u4e3b\u4e49\u539f\u5219\uff1a\u201c\u6211\u4eec\u4e0d\u662f\u652f\u6301\u751f\u547d\u5417\uff1f\u201d\u4ed6\u95ee\u9053\u3002\u201c\u96be\u6c11\u4e0d\u662f\u751f\u547d\u5417\uff1f\u201d\n\u5965\u6d1b\u514b\u7ecf\u5e38\u5728\u6876\u91cc\u6253\u9c7c\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4ed6\u7684\u53e5\u5b50\u5931\u53bb\u4e86\u4e00\u4e9b\u8fde\u8d2f\u6027\u3002\u4ed6\u6210\u4e86\u4e00\u4e2a\u6a21\u4eff\u81ea\u5df1\u7684\u4eba\uff0c\u4e00\u4e2a\u5927\u4eba\u7269\u7684\u804c\u4e1a\u5371\u5bb3\u3002\u67d0\u79cd\u96fe\u53f7-\u6765\u822a\u53f7\u7684\u54c1\u8d28\u6084\u7136\u800c\u81f3\u3002\u90a3\u4e9b\u81ea\u5927\u7684\u96ea\u8304\u6ca1\u7528\u3002\n\u5854\u514b\u00b7\u5361\u5c14\u68ee\uff08Tucker Carlson\uff09\u62a2\u8d70\u4e86\u5965\u6d1b\u514b\uff08O\u2019Rourke\uff09\u5b66\u9662\u6d3e\u7684\u5916\u8868\uff08\u5361\u5176\u88e4\u3001\u84dd\u8272\u8fd0\u52a8\u886b\uff09\uff0c\u4f46\u62a2\u8d70\u4e86\u4ed6\u7684\u667a\u6167\u3001\u51b7\u9759\u6216\u5bf9\u72c2\u5420\u7684\u4e0d\u5bb9\u5fcd\u3002\n\u5173\u4e8e\u4ed6\u7684\u7a7f\u7740\u65b9\u5f0f\uff0cO'Rourke\u8bc4\u8bba\u9053\uff1a\u201c\u4f60\u8868\u73b0\u5f97\u8d8a\u53e4\u602a\uff0c\u4f60\u5e94\u8be5\u770b\u8d77\u6765\u8d8a\u6b63\u5e38\u3002\u53cd\u8fc7\u6765\u4e5f\u662f\u5982\u6b64\u3002\u5f53\u6211\u770b\u5230\u4e00\u4e2a\u9f3b\u5b50\u4e0a\u6234\u7740\u4e09\u56db\u4e2a\u6212\u6307\u7684\u5b69\u5b50\u65f6\uff0c\u6211\u77e5\u9053\u8fd9\u4e2a\u4eba\u7edd\u5bf9\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904\u3002\u201d\n\u5965\u6d1b\u514b\u7684\u6b7b\u5f88\u91cd\u8981\uff0c\u4e0d\u4ec5\u4ec5\u56e0\u4e3a\u4ed6\u662f\u4e00\u4e2a\u6d3b\u6cfc\u7684\u4eba\uff0c\u4e00\u4e2a\u53e4\u602a\u7684\u539f\u521b\u8005\u3002\u4ed6\u7684\u7f3a\u5e2d\u5728\u4fdd\u5b88\u4e3b\u4e49\u7684\u77e5\u8bc6\u548c\u6587\u5316\u6d3e\u522b\u4e2d\u7559\u4e0b\u4e86\u4e00\u4e2a\u9a6c\u63d0\u5c3c\u676f\u5927\u5c0f\u7684\u7f3a\u53e3\u3002\n\u4e3a\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u64b0\u7a3f\u7684\u6709\u5f71\u54cd\u529b\u7684\u4fdd\u5b88\u6d3e\u6279\u8bc4\u5bb6\u7279\u91cc\u00b7\u8482\u5947\u5965\u7279\u4e8e\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u53bb\u4e16\u3002\u743c\u00b7\u8fea\u8fea\u7fc1\u7684\u8ba3\u544a\u63d0\u9192\u6211\u4eec\uff0c\u5979\u5728\u300a\u56fd\u5bb6\u8bc4\u8bba\u300b\u4e0a\u53d1\u8868\u4e86\u8bb8\u591a\u65e9\u671f\u4f5c\u54c1\u3002\u67d0\u79cd\u51b0\u5ddd\u51e0\u4e4e\u5b8c\u5168\u878d\u5316\u4e86\u3002\n\u5965\u6d1b\u514b\u662f\u4e00\u4e2a\u9b45\u529b\u56db\u5c04\u7684\u4eba\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u558b\u558b\u4e0d\u4f11\u7684\u4eba\u3002\u6211\u731c\uff0c\u4ed6\u7684\u6bcf\u4e00\u7bc7\u6587\u7ae0\u90fd\u6bd4\u67e5\u5c14\u65af\u00b7\u514b\u52b3\u8428\u9ed8\u6216\u7c73\u6b47\u5c14\u00b7\u9a6c\u5c14\u91d1\u4e00\u751f\u7684\u4e13\u680f\u6587\u7ae0\u8d62\u5f97\u4e86\u66f4\u591a\u7684\u4fdd\u5b88\u4e3b\u4e49\u8005\u3002\u51e0\u4e4e\u4efb\u4f55\u4eba\u90fd\u80fd\u6253\u96f7\u3002\u51e0\u4e4e\u6ca1\u6709\u4eba\u80fd\u53ef\u9760\u5730\u8f7b\u8d77\u811a\u6765\u3002\n\u5965\u6d1b\u514b\u5199\u4e86\u4e00\u672c\u534a\u8bbd\u523a\u6027\u7684\u793c\u4eea\u4e66\u300a\u73b0\u4ee3\u793c\u4eea\u300b\uff0c\u8be5\u4e66\u4e8e1983\u5e74\u51fa\u7248\u3002\u6211\u4e00\u76f4\u89c9\u5f97\u4ed6\u7684\u5efa\u8bae\u975e\u5e38\u597d\u3002\n\u5f53\u6211\u59bb\u5b50\u4e3a\u6211\u4eec\u7684\u7a0e\u52a1\u503a\u52a1\u611f\u5230\u7126\u8651\uff0c\u4f46\u6211\u975e\u5e38\u60f3\u51fa\u53bb\u5403\u996d\u65f6\uff0c\u6211\u63d0\u9192\u5979\uff0c\u6b63\u5982\u5965\u6d1b\u514b\u6240\u5199\u7684\u90a3\u6837\uff0c\u201c\u4e0d\u5982\u50cf\u6ca1\u6709\u660e\u5929\u4e00\u6837\u82b1\u94b1\uff0c\u800c\u4e0d\u662f\u50cf\u6ca1\u6709\u94b1\u4e00\u6837\u5728\u4eca\u665a\u82b1\u94b1\u3002\u201d\n\u8fd9\u7edd\u975e\u4fdd\u5b88\u7684\u51b2\u52a8\u3002\u5965\u6d1b\u514b\u7684\u77db\u76fe\u4f7f\u4ed6\u6210\u4e3a\u503c\u5f97\u62e5\u6709\u7684\u670b\u53cb\u3002", "note_en": "During the 1980s and \u201990s, his heyday, P.J. O\u2019Rourke owned one of those bylines \u2014 like Nora Ephron\u2019s, or Michael Kinsley\u2019s, or Calvin Trillin\u2019s \u2014 that made many readers, including this one, tingle with anticipation.\n O\u2019Rourke, who  died on Tuesday at 74, came bombing in from the right side of the political spectrum, which made him doubly interesting. He was that rare conservative who appeared to be having a better time, and doing better drugs, than everyone else. He was well-read; he was, it often seemed, the only funny Republican alive.\n His books \u2014 \u201cHolidays in Hell\u201d (1988),  \u201cParliament of Whores\u201d (1991) and \u201cAge and Guile Beat Youth, Innocence, and a Bad Haircut\u201d (1995) among them \u2014 often collected his journalism. Their author, these books made clear, liked to get out of the house.\n Some of his best writing was about the open road. One early piece was memorably titled, \u201cHow to Drive Fast on Drugs While Getting Your Wing-Wang Squeezed and Not Spill Your Drink.\u201d In 1980, for Car and Driver, he drove cross country in a blood-red Ferrari 308GTS.\n  This euphoric passage from that piece, about overtaking a Porsche, is as good a snippet of O\u2019Rourke\u2019s high style as any:\n We came by a 930 Turbo Porsche near the Talladega exit. He was going about 90 when we passed him, and he gave us a little bit of a run, passed us at about 110, and then we passed him again. He was as game as anybody we came across and was hanging right on our tail at 120. Ah, but then \u2014 then we just  walked away from him. Five seconds and he was nothing but a overturned-boat-shaped dot in the mirrors. I suppose he could have kept up, but driving one of those ass-engined Nazi slot cars must be a task at around 225 percent of the speed limit. But not for us. I\u2019ve got more vibration here on my electric typewriter than we had blasting into Birmingham that beautiful morning in that beautiful car on a beautiful tour across this wonderful country from the towers of Manhattan to the bluffs of Topanga Canyon so fast we filled the appointment logs of optometrists\u2019 offices in 30 cities just from people getting their eyes checked for seeing streaks because they\u2019d watched us go by.\n For many years O\u2019Rourke was Rolling Stone\u2019s foreign-affairs desk chief. He was a detector of dichotomies, when he wasn\u2019t camped out like Graham Greene in a hotel bar. \u201cEach American embassy comes with two permanent features,\u201d he wrote: \u201ca giant anti-American demonstration and a giant line for American visas.\u201d\n Obituary : Known for being a voice from the right,  Mr. O\u2019Rourke skewered whatever in government or culture he thought needed it.\n An Appraisal : The sharp-toothed satirist\u2019s  conservatism wasn\u2019t doctrinaire, our critic writes.\n Times \u00a0Interview: In 2012, Mr. O\u2019Rourke said he doesn\u2019t like to read books about current affairs.  \u201cI can write that junk myself,\u201d he quipped.\n From the Archives: For many fans, Mr. O\u2019Rourke\u2019s signature book was \u201cParliament of Whores.\u201d  Read our review from 1991.\n O\u2019Rourke\u2019s conservatism wasn\u2019t doctrinaire. Like H.L. Mencken, who influenced his writing, his bedrock loathing was for sanctimony. Liberals, to O\u2019Rourke, were pretentious bores who want to \u201cmake us carry our groceries home in our mouths.\u201d\n \u201cBy loudly denouncing all bad things \u2014 war and hunger and date rape \u2014 liberals testify to their own terrific goodness,\u201d he wrote. He added: \u201cIt\u2019s a kind of natural aristocracy, and the wonderful thing about this aristocracy is that you don\u2019t have to be brave, smart, strong or even lucky to join it, you just have to be liberal.\u201d\n Yet he voted for Hillary Clinton. \u201cShe\u2019s wrong about absolutely everything,\u201d he said, \u201cbut she\u2019s wrong within normal parameters.\u201d About Trump he said, \u201cThis man just can\u2019t be president. They\u2019ve got this button, you know, in the briefcase. He\u2019s going to find it.\u201d\n He provoked the right in other ways. Accepting asylum seekers was consistent with conservative principles, he argued: \u201cAren\u2019t we pro-life?\u201d he asked. \u201cAren\u2019t refugees life?\u201d\n  Too often, O\u2019Rourke shot fish in a barrel. His sentences lost some of their snap over time. He became an imitation of himself, an occupational hazard for a big personality. A certain Foghorn Leghorn quality crept in. The cocky cigars didn\u2019t help.\n Tucker Carlson stole O\u2019Rourke\u2019s preppy look (khakis, blue blazers) but not his wit, his cool or his intolerance for the barking mad.\n About the way he dressed, O\u2019Rourke commented: \u201cThe weirder you\u2019re going to behave, the more normal you should look. It works in reverse, too. When I see a kid with three or four rings in his nose, I know there is absolutely nothing extraordinary about that person.\u201d\n O\u2019Rourke\u2019s death matters not just because he was a lively presence, a cranky original. His absence leaves a martini-glass-size gap in what remains of conservatism\u2019s huddled and surrounded intellectual and cultural wing.\n The influential  conservative critic Terry Teachout, who wrote for The Wall Street Journal, died earlier this month.  Joan Didion\u2019s obituaries reminded us that she published much of her early work in The National Review. A glacier of a sort has almost entirely melted.\n O\u2019Rourke was a charmer, not a haranguer. Each of his essays, I\u2019d guess, won more converts to conservatism than a lifetime of columns by Charles Krauthammer or Michelle Malkin. Almost anyone can thunder. Almost no one is reliably light on their feet.\n O\u2019Rourke wrote a semi-satirical book of etiquette, \u201cModern Manners,\u201d which appeared in 1983. I\u2019ve always found his advice to be completely excellent.\n  When my wife is anxious about our tax debt but I badly want to go out to dinner, I remind her, as O\u2019Rourke wrote, that it\u2019s \u201cbetter to spend money like there\u2019s no tomorrow than to spend tonight like there\u2019s no money.\u201d\n That\u2019s hardly a conservative impulse. O\u2019Rourke\u2019s contradictions are what made him a friend, on the page, worth having.", "posttime": "2022-02-17 03:01:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4f20\u7edf,wrote,\u6d1b\u514b", "title": "P.J.O'Rourke\u4ee5\u4e00\u79cd\u9ad8\u5ea6\u3001\u53e4\u602a\u7684\u98ce\u683c\uff0c\u4ee5\u4e00\u79cd\u840e\u7f29\u7684\u4f20\u7edf\u5199\u4f5c", "title_en": "P.J. O\u2019Rourke Wrote with High, Cranky Style in a Shrinking Tradition", "transed": 1, "url": "https://www.nytimes.com/2022/02/16/books/pj-orourke-books-essays.html", "via": "", "real_tags": ["\u4f20\u7edf", "wrote", "\u6d1b\u514b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073672, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e24\u4e2a\u5c16\u5cf0\u795e\u7ecf\u5143\u4e2d\u57fa\u4e8e\u4e8b\u4ef6\u7684\u53cd\u5411\u4f20\u64ad\u548c\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u5c16\u5cf0\u65f6\u95f4\u7684\u635f\u5931\u51fd\u6570\\\uff08\\mathcal{L}\\\uff09\u3002\u6700\u540e\u7684\u7d2f\u79ef\u503c\u662f\\\uff08\\frac{\\mathrm{d}\\mathcal{L}}{\\mathrm{d}w}\\\uff09\u3002\u8fd9\u662f\u6a21\u62df\u6570\u636e\u7684\u53ef\u89c6\u5316\u3002\u5c16\u5cf0\u795e\u7ecf\u5143\u4f7f\u7528\u79bb\u6563\u7684\u5c16\u5cf0\u4e8b\u4ef6\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u795e\u7ecf\u5143\u6a21\u578b\u7684\u52a8\u529b\u5b66\u4e0d\u8fde\u7eed\u3002\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u6211\u4eec\u80fd\u6709\u68af\u5ea6\u5417\uff1f\u5728\u7531\u6f0f\u79ef\u5206\u795e\u7ecf\u5143\u548c\u6fc0\u53d1\u795e\u7ecf\u5143\u7ec4\u6210\u7684\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u819c\u7535\u4f4d\u68af\u5ea6\u548c\u5c16\u5cf0\u65f6\u95f4\u51e0\u4e4e\u5728\u91cd\u91cf\u7a7a\u95f4\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u662f\u6709\u9650\u7684\uff0c\u76f4\u5230\u5c16\u5cf0\u88ab\u6dfb\u52a0\u6216\u4e22\u5931\u7684\u8d85\u66f2\u9762\u3002\u6b63\u5982Christian Pehle\u548c\u4f5c\u8005[20]\u6700\u8fd1\u6240\u793a\uff0c\u63a8\u5bfc\u53cd\u5411\u4f20\u64ad\u6765\u8ba1\u7b97\u8fd9\u4e9b\u68af\u5ea6\u4e0d\u9700\u8981\u4efb\u4f55\u4efb\u610f\u9009\u62e9\u6216\u8fd1\u4f3c\u3002\u6b64\u5916\uff0c\u6700\u8fd1\u7684\u4e00\u4e9b\u51fa\u7248\u7269\u5c55\u793a\u4e86\u4f7f\u7528\u7cbe\u786e\u68af\u5ea6\u8bad\u7ec3\u591a\u5c42\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc[20][20][20][20]\u3002\u57fa\u4e8e\u4e8b\u4ef6\u7684\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u901a\u4fe1\u65b9\u6848\u53ef\u4ee5\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u4fdd\u7559\uff08\u5982\u52a8\u753b\u6240\u793a\uff09\u3002\u4e0e\u5728\u4f20\u7edf\u6570\u5b57\u786c\u4ef6\u4e0a\u8bad\u7ec3\u65e0\u5c16\u5cf0\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\u76f8\u6bd4\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u65b0\u578b\u795e\u7ecf\u5f62\u6001\u786c\u4ef6\u5b9e\u73b0\u66f4\u597d\u7684\u53ef\u6269\u5c55\u6027\u548c\u80fd\u6548\u3002\u4e0d\u8fde\u7eed\u7cfb\u7edf\u600e\u4e48\u53ef\u80fd\u6709\u5b9a\u4e49\u826f\u597d\u7684\u53c2\u6570\u5bfc\u6570\uff1f\u5bf9\u4e8e\u5b9a\u4e49\u5728\u8fde\u7eed\u65f6\u95f4\u4e2d\u7684\u7cfb\u7edf\uff0c\u5982\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\uff0c\u4e0e\u79bb\u6563\u65f6\u95f4\u76f8\u6bd4\uff0c\u53cd\u5411\u4f20\u64ad\u6709\u4ec0\u4e48\u76f8\u4f3c\u4e4b\u5904\uff1f\u8fd9\u7bc7\u535a\u6587\u6309\u987a\u5e8f\u56de\u7b54\u4e86\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002\u5c16\u5cf0-\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u7684\u5bfc\u6570\u662f\u6df7\u5408\u52a8\u529b\u7cfb\u7edf\uff1a\u5b83\u4eec\u5c06\u8fde\u7eed\u52a8\u529b\u4e0e\u4e8b\u4ef6\u89e6\u53d1\u7684\u4e0d\u8fde\u7eed\u72b6\u6001\u53d8\u5316\u7ed3\u5408\u8d77\u6765\u3002\u8fd9\u7c7b\u7cfb\u7edf\u901a\u5e38\u4f7f\u7528\u77ac\u65f6\u4e8b\u4ef6\u5bf9\u77ed\u65f6\u95f4\u5185\u53d1\u751f\u7684\u73b0\u8c61\u8fdb\u884c\u5efa\u6a21\u3002\u5728\u68d8\u7a81\u795e\u7ecf\u5143\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u795e\u7ecf\u5143\u7684\u68d8\u7a81\u673a\u5236\uff1b\u5176\u4ed6\u4f8b\u5b50\u5305\u62ec\u5f39\u7403\u5728\u649e\u51fb\u5730\u9762\u65f6\u53cd\u5c04\uff0c\u53d1\u52a8\u673a\u53d8\u901f\u5668\u5728\u4e00\u5b9a\u8f6c\u901f\u4e0b\u6539\u53d8\u6863\u4f4d\uff0c\u6216\u8005\u6052\u6e29\u5668\u5728\u8fbe\u5230\u6e29\u5ea6\u9608\u503c\u65f6\u5207\u6362\u52a0\u70ed\u5143\u4ef6\u3002\u6df7\u5408\u7cfb\u7edf\u5df2\u7ecf\u5728\u6700\u4f18\u63a7\u5236\u7406\u8bba[20]\u7684\u80cc\u666f\u4e0b\u7814\u7a76\u4e86\u534a\u4e2a\u4e16\u7eaa\uff0c\u5305\u62ec\u8ba1\u7b97\u72b6\u6001\u53d8\u91cf\u7684\u53c2\u6570\u5bfc\u6570[20][20]\u3002\u76f4\u89c9\u662f\uff0c\u5982\u679c\u53c2\u6570\u7684\u5fae\u5c0f\u53d8\u5316\u5bfc\u81f4\u4e8b\u4ef6\u65f6\u95f4\u7684\u5fae\u5c0f\u53d8\u5316\uff0c\u5219\u4f1a\u5bfc\u81f4\u4e8b\u4ef6\u540e\u72b6\u6001\u53d8\u91cf\u7684\u5fae\u5c0f\u53d8\u5316\u3002\u5982\u4e0b\u6587\u6240\u8ff0\uff0c\u4e00\u79cd\u5f62\u5f0f\u5316\u7684\u6570\u5b66\u5904\u7406\u65b9\u6cd5\u4f7f\u4e4b\u7cbe\u786e\uff1a\u5b83\u5c06\u4e8b\u4ef6\u524d\u540e\u7684\u53c2\u6570\u5bfc\u6570\u8054\u7cfb\u8d77\u6765\uff0c\u5e76\u8bf4\u660e\u8fd9\u79cd\u5173\u7cfb\u6210\u7acb\u7684\u6761\u4ef6\u3002\u5173\u7cfb\\\uff08V\uff08t\uff0cw\uff09-\\vartheta=0\\\uff09\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9690\u5f0f\u51fd\u6570\uff08\u9ed1\u7ebf\uff09\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u786e\u5b9a\u5c16\u5cf0\u65f6\u95f4\u5bfc\u6570\\\uff08\\frac{\\partial t{\\mathrm{spike}}}{\\partial w}\\\uff09\u3002\u5728\u6df7\u5408\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u4ef6\u7531\u4e8b\u4ef6\u51fd\u6570\u7684\u8fc7\u96f6\u89e6\u53d1\u3002\u8003\u8651\u4e00\u4e2a\u6cc4\u6f0f\u7684\u79ef\u5206\u548c\u6fc0\u53d1\u795e\u7ecf\u5143\uff0c\u5176\u4e2d\u4e8b\u4ef6\u51fd\u6570\u7b80\u5355\u5730\u5f00\u59cb{{Al}} V\uff08t\uff0cw\uff09-Valtheta\uff0c\\{{ } } } }\uff08v\uff08t\uff0cw\uff09\uff09\u662f\u4ee5\u7a81\u89e6\u6743\u91cd\uff08w\uff09\u548c\\\uff08\\Valtheta\uff09\u4e3a\u65f6\u95f4\u9608\u503c\u7684\u819c\u7535\u4f4d\u3002\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u5728A\uff08T\uff1d0\uff09\u65f6\u8003\u8651\u5355\u4e2a\u8f93\u5165\u5c16\u5cf0\u3002\u5173\u7cfb\\\uff08V\uff08t\uff0cw\uff09-\\vartheta=0\\\uff09\u5728\\\uff08t\uff0cw\\\uff09\u5e73\u9762\u4e0a\u523b\u51fa\u4e00\u6761\u7ebf\uff0c\u8be5\u5173\u7cfb\u5728\u6b64\u5e73\u9762\u4e0a\u6210\u7acb\uff08\u53c2\u89c1\u5de6\u56fe\uff09\u3002\u8fd9\u4e00\u884c\u7531\u51fd\u6570\\\uff08t{\\mathrm{spike}\uff08w\uff09\\\uff09\u5c40\u90e8\u63cf\u8ff0\u3002\u9690\u5f0f\u51fd\u6570\u5b9a\u7406[20]\u5141\u8bb8\u6211\u4eec\u7528\u819c\u52bf\u5bfc\u6570\u6765\u8868\u793a\u5b83\u7684\u5bfc\u6570\uff0c\u5373\u5c16\u5cf0\u65f6\u95f4\u5bfc\u6570\\\uff08\\frac{\\partial t{\\mathrm{spike}}}{\\partial w}\uff09\uff0c\u5373\uff1abegin{align}\\boxed{\\frac{\\partial t{\\mathrm{spike}}{\\partial w}=-\\frac{1}{\\frac{\\partial V}{\\partial t}{\\\u7ed3\u675f{align}\u76f4\u89c2\u5730\u8bf4\uff0c\\\uff08w\\\uff09\u7684\u53d8\u5316\u9700\u8981\u901a\u8fc7\\\uff08t\\\uff09\u7684\u53d8\u5316\u6765\u8865\u507f\uff0c\u4ee5\u4fbf\u4fdd\u6301\u5728\\\uff08V\uff08t\uff0cw\uff09-\\vartheta=0\\\uff09\u7684\u7ebf\u4e0a\u3002\u8fd9\u79cd\u53d8\u5316\u7387\uff082\uff09\u7684\u5de6\u4fa7\uff09\u7531\u6cbft\u8f74\u548cw\u8f74\uff082\uff09\u7684V\u7684\u53d8\u5316\u7387\u7684\u8d1f\u6bd4\u7387\u7ed9\u51fa\u3002\u5728\u5cf0\u503c\u5904\uff0c\u6211\u4eec\u5c06\u819c\u7535\u4f4d\u91cd\u7f6e\u4e3a\u96f6\u3002\u7528\\\uff08V^+\\\uff09\u8868\u793a\u8dc3\u8fc1\u540e\u7684\u819c\u7535\u4f4d\uff0c\u6211\u4eec\u5f97\u5230\u4e86begin{align}V^+\uff08t{mathrm{spike}\uff0cw\uff09=0\u3002\\end{align}\u6211\u4eec\u77e5\u9053\\\uff08t{\\mathrm{spike}}\uff09\u662f\u6743\u91cd\\\uff08w\\\uff09\u7684\u51fd\u6570\uff0c\u5176\u5bfc\u6570\u6ee1\u8db3\\\uff08\uff082\uff09\\\uff09\u3002\u7531\u4e8e\u6211\u4eec\u7684\u8981\u6c42\u662f\\\uff08\uff083\uff09\\\uff09\u5728\u6211\u4eec\u6539\u53d8\\\uff08w\\\uff09\uff08\u9690\u5f0f\u6539\u53d8\\\uff08t{mathrm{spike}}\uff09\u65f6\u4fdd\u6301\u4e0d\u53d8\uff0c\\\uff08V^+\\\uff09\u76f8\u5bf9\u4e8e\\\uff08w\\\uff09\u7684\u603b\u5bfc\u6570\u5fc5\u987b\u6d88\u5931\uff1a\\begin{align}\\frac{partial V^+}{\\partial w}+\\frac{\\partial t{\\mathrm{spike}}{\\partial w}\\frac{\u3002\\\u7ed3\u675f{align}\u5728\\\uff08\uff082\uff09\\\uff09\u4e2d\u63d2\u5165\\\uff08V^-\\\uff09\u8868\u793a\u5c16\u5cf0\u524d\u7684\u8bc4\u4f30\uff0c\u5e76\u89e3\u51b3\\\uff08\\frac{\\partial V^+}{\\partial w}\uff09\u4ea7\u751f\u6240\u9700\u7684\u7ed3\u679c\uff1a\\begin{align}\\frac{\\partial V^+}{\\partial w}=\\frac{\\frac{\\partial V^+}{\\partial t}{\\frac{\\partial V^-}{\\partial t}\u3002\\end{align}\u5728\u4e00\u4e2a\u6709\u7535\u6d41\u7a81\u89e6\u548c\u819c\u65f6\u95f4\u5e38\u6570\u7684\u6cc4\u6f0f\u6574\u5408\u548c\u6fc0\u53d1\u795e\u7ecf\u5143\u4e2d\uff08\\tau{mathrm{mem}\uff09\uff0c\u8fd9\u53ef\u4ee5\u5199\u6210[20]\u3002\\begin{align}\\boxed{\\frac{\\partial V^+}{\\partial w}=\\left\uff081+\\frac{\\vartheta}{\\tau{\\mathrm{mem}\\frac}\\partial V^-\\frac}\\\u7aef\u70b9{align}\u5728\u5c16\u5cf0\u4e4b\u95f4\uff0c\\\uff08\\frac{\\partial V}{\\partial w}\\\uff09\u7684\u52a8\u529b\u5b66\u7531\u5b9a\u4e49\\\uff08V\\\uff09\u52a8\u529b\u5b66\u7684\u5fae\u5206\u65b9\u7a0b\u7684\\\uff08w\\\uff09\u5fae\u5206\u7ed9\u51fa\u3002\u5728\u5cf0\u503c\u65f6\uff0c\u5bfc\u6570\u6839\u636e\\\uff08\uff086\uff09\\\uff09\u8df3\u8dc3\u3002\u8fd9\u4e9b\u7ed3\u679c\u63a8\u5e7f\u5230\u5177\u6709\u4efb\u610f\u591a\u4e2a\u5c16\u5cf0\u7684\u5468\u671f\u6027\u5c16\u5cf0\u795e\u7ecf\u5143\u7f51\u7edc[20]\u3002\u9690\u51fd\u6570\u5b9a\u7406\u8981\u6c42\\\uff08\\dot{V}^-\\neq 0\\\uff09\u624d\u80fd\u4fdd\u6301\\\uff08\uff082\uff09\\\uff09\u3002\u5f53\u819c\u7535\u4f4d\u4e0e\u9608\u503c\u76f8\u5207\uff0c\u6211\u4eec\u6709\\\uff08\\dot{V}^-\\\u52300\\\uff09\u65f6\uff0c\\\uff08\uff082\uff09\\\uff09\u4e2d\u7684\u5c16\u5cf0\u65f6\u95f4\u5bfc\u6570\u53d1\u6563\u3002\u7531\u4e8e\\\uff08\\dot V^-=0\\\uff09\u548c\\\uff08V^-=\\vartheta\\\uff09\u4fdd\u6301\u7684\u70b9\u7531\\\uff08N\uff09\u7ef4\u6743\u91cd\u7a7a\u95f4\u4e2d\u7684\\\uff08\uff08N-1\uff09\u7ef4\u8d85\u66f2\u9762\u7ed9\u51fa\uff08\u4f8b\u5982\uff0c\u56fe1\u4e2d\u7684\u7ea2\u8272\u70b9\uff09\uff0c\u57fa\u4e8e\\\uff08V\\\uff09\u6216\\\uff08t{mathrm{spike}}}\u7684\u635f\u5931\u51fd\u6570\u51e0\u4e4e\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u662f\u53ef\u5fae\u7684\uff08\u7c7b\u4f3c\u4e8e\u5728\u6fc0\u6d3b\u7684\u201c\u626d\u7ed3\u201d\u5904\u4e0d\u53ef\u5fae\u7684\u5e26ReLUs\u7684\u975e\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\uff09\u3002\u5df2\u53d1\u5e03\u7684\u6a21\u62df\u7ed3\u679c\u8868\u660e\uff0c\u68af\u5ea6\u53ef\u7528\u4e8e\u4f18\u5316\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc[20][20][20][20]\u3002\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5728\u8ba1\u7b97\u53c2\u6570\u5bfc\u6570\u65f6\u5982\u4f55\u5904\u7406\u5c16\u5cf0\u4e0d\u8fde\u7eed\u6027\uff0c\u90a3\u4e48\u53cd\u5411\u4f20\u64ad\u662f\u4ec0\u4e48\u6837\u7684\u7c7b\u6bd4\u4f7f\u6211\u4eec\u80fd\u591f\u6709\u6548\u5730\u8ba1\u7b97\u8fd9\u4e9b\u5bfc\u6570\u5462\uff1f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u4f7f\u7528\u7684\u4f34\u968f\u65b9\u6cd5\u53cd\u5411\u4f20\u64ad\u672c\u8d28\u4e0a\u662f\u4f34\u968f\u65b9\u6cd5[20]\u7684\u7279\u4f8b\uff0c\u5b83\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u8fde\u7eed\u65f6\u95f4\u7cfb\u7edf\uff0c\u5982\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u6216\u6700\u8fd1\u5f15\u5165\u7684\u795e\u7ecf\u5e38\u5fae\u5206\u65b9\u7a0b[20]\u3002\u7ed9\u5b9a\u4e00\u7ec4\u7531\u5e38\u5fae\u5206\u65b9\u7a0b\u548c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u7684\u52a8\u6001\u53d8\u91cf\uff0c\u5b83\u6307\u5b9a\u4e86\u4e00\u7ec4\u4ee5\u53cd\u5411\u65f6\u95f4\uff08\u201c\u65f6\u95f4\u53cd\u5411\u4f20\u64ad\u201d\uff09\u8ba1\u7b97\u7684\u4f34\u968f\u53d8\u91cf\uff0c\u5e76\u8ddf\u8e2a\u6bcf\u4e2a\u53d8\u91cf\u5bf9\u603b\u635f\u5931\u7684\u8d21\u732e\u3002\u4f34\u968f\u53d8\u91cf\u7684\u6570\u91cf\u7b49\u4e8e\u539f\u59cb\u53d8\u91cf\u7684\u6570\u91cf\uff0c\u91cd\u8981\u7684\u662f\uff0c\u72ec\u7acb\u4e8e\u53c2\u6570\u7684\u6570\u91cf\uff0c\u5141\u8bb8\u5728\u53c2\u6570\u591a\u4e8e\u72b6\u6001\u53d8\u91cf\u7684\u7cfb\u7edf\uff08\u4f8b\u5982\uff0c\u795e\u7ecf\u7f51\u7edc\uff09\u4e2d\u8fdb\u884c\u6709\u6548\u7684\u68af\u5ea6\u8ba1\u7b97\u3002\u5386\u53f2\uff1aBackprop\u4e4b\u524d\u7684Backprop\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u800c\u4f34\u968f\u5fae\u5206\u65b9\u7a0b\u7684\u6982\u5ff5\u53ef\u4ee5\u8ffd\u6eaf\u5230\u62c9\u683c\u6717\u65e5\uff0c\u62c9\u683c\u6717\u65e5\u57281766\u5e74\u7684\u7ebf\u6027\u60c5\u51b5\u4e0b\u8bc1\u660e\u4e86\u5b83\u4eec\u7684\u5b58\u5728\u6027\u548c\u552f\u4e00\u6027\uff08\u65b9\u7a0b\u4f34\u968f[20]\uff09\uff0c\u5b83\u4eec\u5728\u6700\u4f18\u63a7\u5236\u7406\u8bba\u548c\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u5e94\u7528\u662f\u6700\u8fd1\u624d\u51fa\u73b0\u7684\u30021956\u5e74\uff0c\u5217\u592b\u00b7\u5e9e\u7279\u91cc\u4e9a\u91d1\uff08Lev Pontryagin\uff09\u8457\u540d\u5730\u4f7f\u7528\u4e86\u4f34\u968f\u6cd5\uff0c\u56e0\u4e3a\u4ed6\u7684\u6700\u5927\u539f\u7406\u4e3a\u63a7\u5236\u8f68\u8ff9\u7684\u4f18\u5316\u63d0\u4f9b\u4e86\u5fc5\u8981\u6761\u4ef6[20]\u3002\u4f7f\u7528\u4f34\u968f\u65b9\u6cd5\u8ba1\u7b97\u53c2\u6570\u68af\u5ea6\u7684\u7b2c\u4e00\u6279\u51fa\u7248\u7269\u4f3c\u4e4e\u662f\u4ea8\u5229\u00b7J\u00b7\u51ef\u5229\uff08Henry J.Kelley\uff09\u57281960\u5e74[20]\u548c\u963f\u745f\u00b7E\u00b7\u5e03\u83b1\u68ee\uff08Arthur E.Bryson\uff09\u57281961\u5e74[20]\u64b0\u5199\u7684\u3002\u8fd9\u4e24\u4e2a\u51fa\u7248\u7269\u90fd\u63d0\u4f9b\u4e86\u53cd\u5411\u4f20\u64ad\u8bef\u5dee\u7684\u65b9\u7a0b\uff0c\u8fd9\u4e9b\u8bef\u5dee\u76f8\u5f53\u4e8e\u540e\u4f20\u64ad\uff0820\uff09[20 ] [20 ]\u4e2d\u63a8\u5bfc\u51fa\u7684\u90a3\u4e9b\u8bef\u5dee\uff0c\u8fd9\u4f7f\u5f97\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u540e\u8005\u662f\u201cKelle\u5e03\u83b1\u68ee\u68af\u5ea6\u8fc7\u7a0b\u201d[20 ] [20 ]\u7684\u72ec\u7acb\u53d1\u73b0\u3002\u4f34\u968f\u53d8\u91cf=\u53cd\u5411\u4f20\u64ad\u8bef\u5dee\u5728\u975e\u5c16\u5cf0\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u4f34\u968f\u53d8\u91cf\u4ec5\u5bf9\u5e94\u4e8e\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u901a\u5e38\u79f0\u4e3a\u4e2d\u95f4\u53d8\u91cf\u6216\u8bef\u5dee\uff08\\\uff08\\delta\\\uff09\u3002\u8003\u8651\u5177\u6709\uff08L\uff09\u5c42\u548c\u8f93\u5165\uff08x0 0\uff09\u7684\u524d\u9988\u7f51\u7edc\u3002\u901a\u8fc7\u6fc0\u6d3b\\\uff08x_i \\\uff09\u3001\u5c42\\\uff08i\\\uff09\u7684\u91cd\u91cf\\\uff08w_i \\\uff09\uff0c\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u7684\uff08i<L\uff09\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u6211\u4eec\u6709\uff1a\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u6211\u4eec\u6709\uff1a\u6211\u4eec\u6709\uff1a\uff1a\uff1a\uff1a\u4ee5\u4e0b\u4ee5\u4e0b\u6211\u4eec\u5f00\u59cb\u5f00\u59cb\u5f00\u59cb{{\u6570\u7ec4\u6570\u7ec4{{lr}}{lr}}{{lr}}}{{1}}\u5b66\u6821\u5b66\u6821\u5b66\u6821....\u5411\u524d......\u5411\u524d.....\u5411\u524d..\u5411\u524d.\u5411\u524d.........\u548c...\u548c...........\u548c..................................................................................................\u548c\\delta_{L}=\\frac{\\partial\\mathcal{L}\uff08x_L\uff09}{\\partial x_L}f'\uff08w_Lx_{L-1}\uff09\\end{array}]\u7136\u540e\u5c06\\\uff08\\mathcal{L}\uff08x_L\uff09\\\uff09\u76f8\u5bf9\u4e8e\u6743\u91cd\\\uff08w_i\\\uff09\u4e0e\\\uff081\\leq i\\leq L\\\uff09\u7684\u5bfc\u6570\u8868\u793a\u4e3a\\begin{align}\\frac{\\mathrm{d}\\mathcal{L}\uff08x_L\uff09{\\mathrm{d}w_i}=\\delta_i x{i-1}\u3002\\end{align}Backprop\u5728\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u4e0d\u662f\u50cf\u8fd9\u6837\u7684\u79bb\u6563\u65b9\u7a0b\uff0c\u800c\u662f\u7531\u8fde\u7eed\u65f6\u95f4\u7684\u5fae\u5206\u65b9\u7a0b\u5b9a\u4e49\uff0c\u5e76\u4f7f\u7528\u5c16\u5cf0\u4e8b\u4ef6\u6765\u8026\u5408\u795e\u7ecf\u5143\u3002\u8003\u8651\u4e00\u4e2aN\uff08n\uff09\u6cc4\u6f0f\u79ef\u5206\u7f51\u7edc\u548c\u706b\u707e\u795e\u7ecf\u5143\u8026\u5408\u7684\u6743\u91cd\u77e9\u9635\uff08W\uff09\u3002\u5bf9\u4e8e\u819c\u7535\u4f4d\\\uff08V\\\uff09\u3001\u7a81\u89e6\u8f93\u5165\\\uff08I\\\uff09\uff08\u4e24\u4e2a\u5927\u5c0f\u7684\u5411\u91cf\\\uff08N\\\uff09\uff09\u548c\u635f\u5931\u51fd\u6570begin{align}\\mathcal{L}=L_p\uff08t{mathrm{spike}}\uff09+\\int_0^t L_V\uff08V\uff08t\uff09\uff0ct\uff09\\mathrm{d}t\\end{align}\u4f9d\u8d56\u4e8e\u5c16\u5cf0\u65f6\u95f4\u548c\u819c\u7535\u4f4d\u7684\u5411\u91cf\uff0c\u5c16\u5cf0\u4e4b\u95f4\u7684\u81ea\u7531\u52a8\u529b\u5b66\u4e3a[20]\uff0c\u7528\\\uff08\\lambda\\\uff09\u8868\u793a\u4f34\u968f\u53d8\u91cf\uff0c[\\begin{array}{lr}\\textrm{Forward}&\\textrm{Backward/adjunct}\\tau{mathrm{mem}}\\dot{V}=-V+I\\quad\\quad&\\quad\\quad\\tau{mem}\\tau{mathrm{mem V}-\\lambda{V}{\\", "note_en": "Event-based backpropagation in two spiking neurons and a spike-time dependent loss function \\(\\mathcal{L}\\). The final accumulated value is \\(\\frac{\\mathrm{d}\\mathcal{L}}{\\mathrm{d}w}\\). This is a visualization of simulation data. Spiking neurons communicate using discrete spike events which cause discontinuities in the neuron model\u2019s dynamics. What are the implications for gradient-based optimization? Can we even have gradients? In a spiking neural network composed of leaky integrate-and-fire neurons, gradients of membrane potentials and spike times exist and are finite almost everywhere in weight space, up to the hypersurfaces where spikes are added or lost. As recently shown by Christian Pehle and the author [20], deriving backpropagation to compute these gradients does not require any arbitrary choices or approximations. Furthermore, several recent publications demonstrate training of multi-layer spiking neural networks using exact gradients [20] [20] [20] [20] [20]. The event-based communication scheme of spiking neural networks can be retained during backpropagation (illustrated in the animation). This could allow novel neuromorphic hardware to achieve better scalability and energy efficiency compared to training non-spiking artificial neural networks on traditional digital hardware. How is it possible that a discontinuous system can have well-defined parameter derivatives? What is the analogy to backpropagation for systems defined in continuous time such as spiking neural networks, as opposed to discrete time? This blog post answers these two questions, in that order. Derivatives at Spikes Spiking neural networks are hybrid dynamical systems: they combine continuous dynamics with event-triggered discontinuous state changes. Such systems typically model phenomena occuring on short timescales using instantaneous events. In the case of spiking neurons, this is the neuronal spike mechanism; other examples are a bouncing ball that is reflected upon hitting the ground, an engine transmission that changes its gear at a certain rotational speed or a thermostat that switches a heating element when a temperature threshold is reached. Hybrid systems have been studied for the better half of a century within the context of optimal control theory [20], including the computation of parameter derivatives of state variables [20] [20]. The intuition is that if a small change to a parameter causes a small change of an event time, it causes a small change to state variables after the event. A formal mathematical treatment, as sketched in the following, makes this precise: it relates parameter derivatives before and after an event and states the conditions for when this relation holds. The relation \\(V(t, w)-\\vartheta=0\\) defines an implicit function (the black line) which allows us determine the spike time derivative \\(\\frac{\\partial t_{\\mathrm{spike}}}{\\partial w}\\). In hybrid systems, events are triggered by zero-crossings of an event function. Consider a leaky integrate-and-fire neuron where the event function is simply \\begin{align} V(t, w) - \\vartheta, \\end{align} where \\(V(t, w)\\) is the membrane potential at time \\(t\\) using synaptic weight \\(w\\) and \\(\\vartheta\\) is the spike threshold. For simplicity, consider a single input spike at \\(t=0\\). The relation \\(V(t, w) -\\vartheta=0\\) carves out a line in the \\(t, w\\) plane on which this relation holds (see figure on the left). This line is locally described by a function \\(t_{\\mathrm{spike}}(w)\\). The implicit function theorem [20] allows us to express its derivative, the spike time derivative \\(\\frac{\\partial t_{\\mathrm{spike}}}{\\partial w}\\), in terms of the membrane potential derivatives: \\begin{align} \\boxed{\\frac{\\partial t_{\\mathrm{spike}}}{\\partial w} = - \\frac{1}{\\frac{\\partial V}{\\partial t}} \\frac{\\partial V}{\\partial w}.} \\end{align} Intuitively, changes of \\(w\\) need to be compensated by a change of \\(t\\) in order to stay on the line where \\(V(t, w)-\\vartheta=0\\) holds. The rate of this change (left side of \\((2)\\)) is given by the negative ratio of the rates of change of \\(V\\) along the \\(t\\) and \\(w\\) axis (\\(\\frac{\\partial V}{\\partial t}\\) and \\(\\frac{\\partial V}{\\partial w}\\) in the right side of \\((2)\\)). At a spike, we reset the membrane potential to zero. Denoting the membrane potential after the transition using \\(V^+\\), we have \\begin{align} V^+(t_{\\mathrm{spike}}, w) = 0. \\end{align} We know that \\(t_{\\mathrm{spike}}\\) is a function of the weight \\(w\\) and that its derivative satisfies \\((2)\\). Since our demand is that \\((3)\\) holds as we change \\(w\\) (implicitly changing \\(t_{\\mathrm{spike}}\\)), the total derivative of \\(V^+\\) with respect to \\(w\\) must vanish: \\begin{align} \\frac{\\partial V^+}{\\partial w} + \\frac{\\partial t_{\\mathrm{spike}}}{\\partial w} \\frac{\\partial V^+}{\\partial t} = 0. \\end{align} Plugging in \\((2)\\) with \\(V^-\\) denoting evaluation before the spike and solving for \\(\\frac{\\partial V^+}{\\partial w}\\) yields the desired result: \\begin{align} \\frac{\\partial V^+}{\\partial w} = \\frac{\\frac{\\partial V^+}{\\partial t}}{\\frac{\\partial V^-}{\\partial t}} \\frac{\\partial V^-}{\\partial w}. \\end{align} In a leaky integrate-and-fire neuron with current-based synapses and membrane time constant \\(\\tau_{\\mathrm{mem}}\\), this can be written as [20] \\begin{align} \\boxed{\\frac{\\partial V^+}{\\partial w} = \\left(1+\\frac{\\vartheta}{\\tau_{\\mathrm{mem}}\\frac{\\partial V^-}{\\partial t}}\\right)\\frac{\\partial V^-}{\\partial w}.} \\end{align} Inbetween spikes, the dynamics of \\(\\frac{\\partial V}{\\partial w}\\) are given by differentiation with respect to \\(w\\) of the differential equations defining the dynamics of \\(V\\). At spikes, the derivatives jump according to \\((6)\\). These results generalize to a recurrent network of spiking neurons with arbitrarily many spikes [20]. The implicit function theorem requires that \\(\\dot{V}^- \\neq 0\\) in order for \\((2)\\) to hold. As the membrane potential becomes tangent to the threshold and we have \\(\\dot{V}^-\\to 0\\), the spike time derivative in \\((2)\\) diverges. Since the points where \\(\\dot V^- = 0\\) and \\(V^-=\\vartheta\\) holds are given by \\((N-1)\\)-dimensional hypersurfaces in the \\(N\\)-dimensional weight space (e.g., the red point in fig. 1), loss functions based on \\(V\\) or \\(t_{\\mathrm{spike}}\\) are differentiable almost everywhere (similar to non-spiking neural networks with ReLUs that are non-differentiable at the \u201ckink\u201d of the activation). Published simulation results demonstrate that gradients can be used to optimize spiking neural networks [20] [20] [20] [20] [20]. Now that we have an idea of how to deal with spike discontinuities when computing parameter derivatives, what is the analogy to backpropagation that allows us to efficiently compute these derivatives? The Adjoint Method Backpropagation as used in deep learning is essentially a special case of the adjoint method [20] which can also be applied to continuous-time systems such as spiking neural networks or the recently introduced neural ordinary differential equations [20]. Given a set of dynamic variables defined by ordinary differential equations and a loss function, it specifies a set of adjoint variables that are computed in reverse time (\u201cbackpropagation through time\u201d) and track the contribution of each variable to the total loss. The number of adjoint variables is equal to the number of original variables and, importantly, independent of the number of parameters, allowing for efficient gradient computation in systems with more parameters than state variables (e.g., neural networks). History: Backprop Before Backprop Was a Thing While the concept of adjoint differential equations can be traced back to Lagrange who showed their existence and uniqueness in the linear case in 1766 (\u00e9quation adjointe, [20]), their use in optimal control theory and machine learning is more recent. The adjoint method was famously used by Lev Pontryagin in 1956 for his maximum principle that provides neccessary conditions for the optimality of control trajectories [20]. The first publications using the adjoint method to compute parameter gradients seem to be those written by Henry J. Kelley in 1960 [20] and Arthur E. Bryson in 1961 [20]. Both publications provide equations to backpropagate errors that are equivalent to those given in later derivations of backpropagation [20] [20] [20], which causes some to consider the latter to be independent discoveries of the \u201cKelley-Bryson gradient procedure\u201d [20] [20]. Adjoint Variables = Backpropagated Errors In non-spiking artificial neural networks, the adjoint variables simply correspond to what are typically called the intermediate variables or errors (\\(\\delta\\)s) during backpropagation. Consider a feed-forward network with \\(L\\) layers and input \\(x_0\\). With activation \\(x_i\\), weight \\(w_i\\) at layer \\(i\\), activation function \\(f\\) and loss function \\(\\mathcal{L}(x_L)\\) we have for \\(i<L\\): [\\begin{array}{lr} \\textrm{Forward} & \\textrm{Backward/Adjoint} x_{i+1} = f(w_{i+1}x_i)\\quad\\quad&\\quad\\quad\\delta_{i} = w_{i+1}\\delta_{i+1} f\u2019(w_{i}x_{i-1}) \\mathcal{L}(x_L)&\\delta_{L} = \\frac{\\partial \\mathcal{L}(x_L)}{\\partial x_L}f\u2019(w_Lx_{L-1}) \\end{array}] The derivative of \\(\\mathcal{L}(x_L)\\) with respect to the weight \\(w_i\\) with \\(1\\leq i\\leq L\\) is then given as \\begin{align} \\frac{\\mathrm{d}\\mathcal{L}(x_L)}{\\mathrm{d}w_i} = \\delta_i x_{i-1}. \\end{align} Backprop in a Spiking Neural Network Instead of discrete equations like these, spiking neural networks are defined by differential equations in continuous time and use spike events to couple neurons. Consider a network of \\(N\\) leaky integrate-and-fire neurons coupled with weight matrix \\(W\\). With membrane potential \\(V\\), synaptic input \\(I\\) (both vectors of size \\(N\\)) and a loss function \\begin{align} \\mathcal{L}=l_p(t_{\\mathrm{spike}})+\\int_0^T l_V(V(t), t)\\mathrm{d}t \\end{align} that depends on the vector of spike times and membrane potentials, the free dynamics inbetween spikes are [20], denoting the adjoint variables using \\(\\lambda\\), [\\begin{array}{lr} \\textrm{Forward} & \\textrm{Backward/Adjoint} \\tau_{\\mathrm{mem}}\\dot{V} = -V + I\\quad\\quad&\\quad\\quad \\tau_{\\mathrm{mem}}\\lambda_{V}\u2019 = -\\lambda_{V} - \\frac{\\partial l_V}{\\partial V} \\tau_{\\mathrm{syn}}\\dot{I} = - I\\quad\\quad&\\tau_{\\mathrm{syn}}\\lambda_{I}\u2019 = -\\lambda_{I} + \\lambda_{V} \\end{array}] where a dot denotes the time derivative \\(\\frac{\\mathrm{d}}{\\mathrm{d}t}\\) and a dash denotes the reverse time derivative \\(-\\frac{\\mathrm{d}}{\\mathrm{d}t}\\). Spikes cause the synaptic input \\(I\\) to jump as \\begin{align} I^+ = I^- + We_n \\end{align} where \\(n\\) is the index of the spiking neuron and \\(e_n\\) is the unit vector with a \\(1\\) at index \\(n\\). Using the partial derivative jumps such as those presented in the previous section, the jump of the \\(n\\)th component of \\(\\lambda_V\\) turns out to be [20], with spike time \\(t_{\\mathrm{spike}}^k\\), \\begin{align} (\\lambda_V^-)n = (\\lambda_V^+)_n +\\frac{1}{\\tau{\\mathrm{mem}}(\\dot{V}^-)n}\\left[\\underbrace{\\vartheta\\lambda_V^+}{\\textrm{reset}}+\\underbrace{\\left(W^{\\mathsf{T}}(\\lambda_V^+-\\lambda_I)\\right)n}{\\textrm{backpropagated errors}}+\\underbrace{\\frac{\\partial l_p}{\\partial t_{\\mathrm{spike}}^k}}{\\textrm{spike time loss}}+\\underbrace{l_V^\u2013l_V^+}{\\textrm{voltage loss jump}}\\right]. \\end{align} This equation couples adjoint variables at spike times using the term representing backpropagated errors. The only quantities that need to be stored during the forward pass are the \\(n\\)th component of \\(\\dot{V}^-\\) and the spike time \\(t_{\\mathrm{spike}}^k\\). The derivative of \\(\\mathcal{L}\\) with respect to weight \\(w_{ji}\\) that connects neuron \\(i\\) to neuron \\(j\\) is then given as a sum of the \\(j\\)th component of \\(\\lambda_I\\) evaluated at the spike times of neuron \\(i\\), \\begin{align} \\frac{\\mathrm{d}\\mathcal{L}}{\\mathrm{d}w_{ji}} = \\sum_{\\textrm{spikes from } i} (\\lambda_I)_j. \\end{align} Since the adjoint variables are coupled only at spike times and gradients are computed by accumulating \\(\\lambda_I\\) at spike times, the backward pass can be computed in an event-based fashion. Conclusion Gradients of spiking neural networks are well-defined and finite almost everywhere in weight space, up to the hypersurfaces where spikes are added or lost. These gradients can be efficiently computed using event-based backpropagation and used for gradient-based optimization. The event-based nature of backpropagation in spiking neural networks could allow neuromorphic hardware to retain the efficiency of spike-based processing during training. References Event-based backpropagation can compute exact gradients for spiking neural networks. By Wunderlich, Timo C. and Pehle, Christian. Published in Scientific Reports 2021 11:1, 11:1-17, Nature Publishing Group, 2021. Fast and energy-efficient neuromorphic deep learning with first-spike times. By G\u00f6ltz, J. and Kriener, L. and Baumbach, A. and Billaudelle, S. and Breitwieser, O. and Cramer, B. and Dold, D. and Kungl, A. F. and Senn, W. and Schemmel, J. and Meier, K. and Petrovici, M. A.. Published in Nature Machine Intelligence 2021 3:9, 3:823-835, Nature Publishing Group, 2021. Temporal Coding in Spiking Neural Networks with Alpha Synaptic Function. By Comsa, Iulia M. and Fischbacher, Thomas and Potempa, Krzysztof and Gesmundo, Andrea and Versari, Luca and Alakuijala, Jyrki. Published in ICASSP, IEEE International Conference on Acoustics, Speech and Signal Processing - Proceedings, 2020-May:8529-8533, Institute of Electrical and Electronics Engineers Inc., 2020. Supervised learning based on temporal coding in spiking neural networks. By Mostafa, Hesham. Published in IEEE Transactions on Neural Networks and Learning Systems, 29:3227-3235, Institute of Electrical and Electronics Engineers Inc., 2018. Temporal Backpropagation for Spiking Neural Networks with One Spike per Neuron. By Kheradpisheh, Saeed Reza and Masquelier, Timoth\u00e9e. Published in International Journal of Neural Systems, 30, World Scientific Publishing Company, 2020. Modeling, simulation, sensitivity analysis, and optimization of hybrid systems. By Barton, Paul I. and Lee, Cha Kun. Published in ACM Transactions on Modeling and Computer Simulation (TOMACS), 12:256-289, ACM PUB27 New York, NY, USA , 2002. Parametric sensitivity functions for hybrid discrete/continuous systems. By Gal\u00e1n, Santos and Feehery, William F. and Barton, Paul I.. Published in Applied Numerical Mathematics, 31:17-47, North-Holland, 1999. General sensitivity equations of discontinuous systems. By Rozenvasser, E. N.. Published in Autom. Remote Control, 1967:400\u2013404, Springer US, New York, NY; Pleiades Publishing, New York, NY; MAIK \u201cNauka/Interperiodica\u201d, Moscow, 1967. The Implicit Function Theorem: History, Theory, and Applications. By Krantz, Steven G. and Parks, Harold R.. Springer New York, 2013. ISBN: 9781461459811. A theoretical framework for back-propagation. By Lecun, Yann. In Proceedings of the 1988 Connectionist Models Summer School, CMU, Pittsburg, PA, pages 21\u201328, Morgan Kaufmann, 1988. Neural Ordinary Differential Equations. By Chen, Ricky T. Q. and Rubanova, Yulia and Bettencourt, Jesse and Duvenaud, David K. In Advances in Neural Information Processing Systems, 31, pages , Curran Associates, Inc., 2018. Solution de diff\u00e9rents probl\u00e8mes de calcul int\u00e9gral. By Lagrange, Joseph-Louis. In Miscellanea taurinensia, Soci\u00e9t\u00e9 royale de Turin, 1766. The maximum principle in the theory of optimal processes of control. By Boltyanski, V.G. and Gamkrelidze, R.V. and Mishchenko, E.F. and Pontryagin, L.S.. Published in IFAC Proceedings Volumes, 1(1):464-469, 1960. Gradient Theory of Optimal Flight Paths. By Kelley, Henry J.. Published in ARS Journal, 30(10):947-954, 1960. A gradient method for optimizing multi-stage allocation processes. By Bryson, A.E.. In Proceedings of a Harvard Symposium on Digital Computers and Their Applications, 1961. Taylor expansion of the accumulated rounding error. By Linnainmaa, Seppo. Published in BIT Numerical Mathematics, 16:146-160, 1976. Applications of advances in nonlinear sensitivity analysis. By Werbos, Paul J.. In System Modeling and Optimization, pages 762\u2013770, Springer Berlin Heidelberg, 1982. Learning Internal Representations by Error Propagation. By Rumelhart, David E. and McClelland, James L.. In Parallel Distributed Processing: Explorations in the Microstructure of Cognition: Foundations, pages 318-362, 1987. Artificial neural networks, back propagation, and the Kelley-Bryson gradient procedure. By Dreyfus, Stuart E.. Published in Journal of Guidance, Control, and Dynamics, 13(5):926-928, 1990. On derivation of MLP backpropagation from the Kelley-Bryson optimal-control gradient formula and its application. By Mizutani, E. and Dreyfus, S.E. and Nishio, K.. In Proceedings of the IEEE-INNS-ENNS International Joint Conference on Neural Networks. IJCNN 2000. Neural Computing: New Challenges and Perspectives for the New Millennium, 2, pages 167-172 vol.2, 2000.", "posttime": "2022-02-17 02:50:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u795e\u7ecf\u7f51\u7edc,\u7b97\u6cd5,\u53cd\u5411,based,\u5c16\u5cf0", "title": "\u57fa\u4e8e\u4e8b\u4ef6\u7684\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u5728\u8109\u51b2\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u5e94\u7528", "title_en": "Event-Based Backpropagation for Exact Gradients in Spiking Neural Networks", "transed": 1, "url": "https://timowunderlich.github.io/jekyll/update/2022/02/05/backprop.html", "via": "", "real_tags": ["\u795e\u7ecf\u7f51\u7edc", "\u7b97\u6cd5", "\u53cd\u5411", "based", "\u5c16\u5cf0"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073671, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e86\u89e3\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f2\u300b\u53ca\u5176\u65e5\u672c\u7248\u300aYume K\u014dj\u014d\uff1aDoki Doki\u6050\u614c\u300b\u80cc\u540e\u7684\u5b8c\u6574\u5386\u53f2\u3002\u7b2c1\u90e8\u5206-\u4e3a\u8d85\u7ea7\u7403\u5458\uff081:17\uff09\u7b2c2\u90e8\u5206-A\u4e50\u3002\u3002\u3002", "note_en": "Learn the complete history behind Super Mario Bros. 2 and its Japanese counterpart, Yume K\u014dj\u014d: Doki Doki Panic.Part 1 - For Super Players (1:17)Part 2 - A Le...", "posttime": "2022-02-17 02:49:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9a6c\u91cc\u5965,mario,doki", "title": "\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f2\u300b\uff082015\uff09[\u89c6\u9891]", "title_en": "Super Mario Bros. 2 (2015) [video]", "transed": 1, "url": "https://www.youtube.com/watch?v=2EUYSN5aFcE", "via": "", "real_tags": ["\u9a6c\u91cc\u5965", "mario", "doki"]}]