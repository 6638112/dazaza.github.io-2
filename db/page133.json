[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1068481, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b83\uff06\uff0339; S\u8f6f\u4ef6\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528\u4ee3\u7801\u5b9a\u4e493D CAD\u6a21\u578b\u3002\u5b83\uff06\uff0339;\u5728\u8f6f\u4ef6Devs\u4e2d\u6d41\u884c\u7684\u7406\u60f3\u539f\u56e0\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u5b83\u51e0\u4e4e\u9ed8\u8ba4\u4e3a\u60a8\u63d0\u4f9b\u4e86\u53c2\u6570\u6a21\u578b\uff0c\u5b83\u6613\u4e8e\u7ef4\u62a4\uff0c\u5e76\u5728\u4e0eGit\u914d\u5bf9\u65f6\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u5728\u56e2\u961f\u4e2d\u5ef6\u957f\u6a21\u578b\u3002\u5b83\u7684\u7f16\u7801\u6027\u8d28\u5141\u8bb8\u56e2\u961f\u5efa\u7acb\u81ea\u5df1\u7684\u62bd\u8c61\u4ee5\u4fbf\u91cd\u590d\u4f7f\u7528\u548c\u5feb\u901f\u539f\u578b\u8bbe\u8ba1\u3002 Cadhub\u4e3b\u9875\u5177\u6709\u4ee3\u7801CAD\u8303\u5f0f\u7684\u6f5c\u529b\u7684\u826f\u597d\u6545\u969c\u3002 Code-CAD\u4e0d\u4e0e3D\u51e0\u4f55\u5e93\u6df7\u6dc6\uff0c\u4ee3\u7801CAD\u76f8\u53cd\uff0c\u4ee3\u66ff\u5177\u6709\u81ea\u4ee5\u4e3a\u662f\u5feb\u901f\u5f00\u53d1\u673a\u68b0\u90e8\u4ef6\u7684\u62bd\u8c61\u3002\n  \u6211\u5efa\u8bae\u9605\u8bfb\u4e0b\u9762\u7684\u6574\u4e2a\u5217\u8868\uff0c\u770b\u770b\u662f\u5426\u6709\u4e00\u4e2a\u5174\u594b\u5242\u548c\u60a8\u7684\u9700\u6c42\uff0c\u8d85\u51fa\u6211\u53ef\u4ee5\u63d0\u51fa\u4ee5\u4e0b\u5efa\u8bae\u548c\u70b9\uff1a\n \u6211\u7684\u4e3b\u8981\u63a8\u8350\u662f\u4f7f\u7528\u4e00\u4e2a\u4f7f\u7528B-REP Kernal\u7684\u8f6f\u4ef6\u5305\uff08\u4ee5\u53ca\u4e3aOpenCascade\uff0c\u4e00\u4e2a\u6210\u719f\u7684C ++ CAD\u5e93\u7684\u5f00\u653e\u5de5\u5177\uff09\u3002\u8fd9\u4e9b\u5305\u88c5\u662fCadquery\uff0cCascadeStudio\uff0c\u7d22\u8d54\u548cPythonocc\u3002\u63a8\u8350\u8fd9\u4e9b\u7684\u539f\u56e0\u5982\u4e0b\uff1a\n \u5927\u591a\u6570Code-CAD\u5de5\u5177\u90fd\u56f0\u6270\u7740CSG Mindset\uff08\u5373\u539f\u59cb\u5f62\u72b6\u7684\u5de5\u4f1a\uff0c\u51cf\u6cd5\u548c\u4ea4\u53c9\u70b9;\u7acb\u65b9\u4f53\u7403\u4f53\u7b49\uff09\u3002\u8fd9\u662f\u4e00\u4e2a\u56fa\u6709\u7684\u6709\u9650\u8303\u5f0f\uff08\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f\u5185\u90e8\u5706\u89d2\u7684\u65b9\u5f0f\uff0c\u8fd9\u5bf9\u4e8e\u51cf\u5c11\u96f6\u4ef6\u4e2d\u7684\u5e94\u529b\u6d53\u5ea6\u5f88\u91cd\u8981\uff0c\u53d8\u5f97\u975e\u5e38\u56f0\u96be\uff09\u3002\u867d\u7136Cadquery\uff0cCascadeStudio\uff0cSONCEDACAD\u548cPythonocc\u4ecd\u7136\u63d0\u4f9bCSG\u529f\u80fd\uff0c\uff06\uff0339; re\u4e5f\u80fd\u591f\u8d85\u8d8a\u3002\n OpenCascade\u4f7f\u7528B-Rep\uff08\u8fb9\u754c\u8868\u793a\uff09\u5185\u6838\uff0c\u5728\u6211\u770b\u6765\uff0c\u8fd9\u610f\u5473\u7740\u4f60\uff06\uff0339; LL\u5b66\u4e60\u8d62\u5f97\uff06\uff0339; t\u9650\u5236\u4e86\u60a8\u53ef\u4ee5\u6a21\u62df\u7684\u5e94\u7528\u7c7b\u578b\u7684\u672a\u6765\u8bc1\u660e\u5de5\u5177\uff0c\u8fd9\u53ef\u80fd\u662f\u7f51\u773c\u4ec1\u7684\u6848\u4f8b\uff0c\u8fd9\u5c06\u5bf9\u5149\u5b66\u548c\u6ce8\u5851\u7b49\u5e94\u7528\u9020\u6210\u9ebb\u70e6\u3002\n OpenSCAD\u662f\u9a8c\u8bc1\u548c\u771f\u5b9e\u7684\uff0c\u5177\u6709\u8bb8\u591a\u56f4\u7ed5\u4e92\u8054\u7f51\u6f02\u6d6e\u7684\u793a\u4f8b\u548c\u6559\u7a0b\u3002\u5b83\u8fd8\u5177\u6709\u975e\u5e38\u76f4\u89c2\u7684\u8bed\u6cd5\uff0c\u5373\u6ca1\u6709\u5148\u524d\u7f16\u7a0b\u7ecf\u9a8c\u7684\u4eba\u80fd\u591f\u5feb\u901f\u63a5\u6536\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u80fd\u60f3\u8981\u5bfb\u627e\u5176\u4ed6\u5730\u65b9\u7684\u67d0\u4e9b\u539f\u56e0\u662f\uff1a\n \u81ea\u4ece\u5b83\u4eec\u5377\u8d77\u81ea\u5df1\u7684\u8bed\u8a00\u4ee5\u6765\uff0c\u53ef\u4ee5\u96be\u4ee5\u5efa\u7acb\u5f3a\u5927\u7684\u62bd\u8c61\u3002\u8fd9\u5305\u62ec\u5b83\u7684\u540e\u679c\u5305\u62ec\u5b83\u5e76\u6ca1\u6709\u50cf\u8bb8\u591a\u73b0\u4ee3\u8bed\u8a00\u4e00\u6837\u62e5\u6709\u5305\u88f9\u7ecf\u7406\uff0c\u4ee5\u53ca\u5177\u6709\u8bed\u8a00\u7684\u602a\u7656\u7684\u5b58\u5728\uff0c\u4f8b\u5982\u9003\u79bb\u7684\u51fd\u6570\u5b9a\u4e49\uff06\uff0339; t\u7b26\u5408\u4eba\u4f53\u5de5\u7a0b\u5b66\u3002 \n\u67e5\u770b\u9e1f\u820d\u793a\u4f8b\uff0c\u800c\u8f76\u4e8b\uff0c\u770b\u5230\u7528\u4e09\u4e2a\u4e0d\u540c\u7684\u5de5\u5177\u5236\u4f5c\u7684\u76f8\u540c\u90e8\u5206\u53ef\u80fd\u4f1a\u5e2e\u52a9\u60a8\u51b3\u5b9a\u6700\u559c\u6b22\u54ea\u79cd\u8bed\u6cd5\u3002\n \u60a8\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u60a8\u7684\u9009\u62e9\u8bed\u8a00\u9009\u62e9\u5de5\u5177\u3002 Clojure\uff0cEnaml\uff0cGo\uff0cHaskell\uff0cLisp\uff0cJavaScript\u548cPython\u90fd\u5728\u4e0b\u9762\u8868\u793a\u3002\n \u5982\u679c\u4f60\u60f3\u5236\u4f5c3D\u827a\u672f\uff0c\u66f2\u7ebf\u4e13\u95e8\u8bd5\u56fe\u51fb\u4e2d\u90a3\u4e2a\u5229\u57fa\u3002\n \u65e0\u8bba\u54ea\u4e00\u4e2a\u662f\u4f60\u7684\u9009\u62e9\u5de5\u5177\uff0c\u5982\u679c\u4f60\uff06\uff0339;\u5728\u8fd9\u91cc\u548c\u4f60\u559c\u6b22\u4ee3\u7801cad\u548c\u4f60\uff06\uff0339; ll\u60f3\u7ed3\u8d26cadhub\u3002\u628a\u5b83\u60f3\u8c61\u6210Codepen\u4e0e\u4e1c\u897f\u6c47\u7f16\uff0c\u5b83\u548c\u6211\u4eec\u7684\u60c5\u4e66\u7ed9\u4e86\u5236\u9020\u5546\u793e\u533a\u3002\u76ee\u524d\uff0cCascadeStudio\u662f\u552f\u4e00\u7684\u4ee3\u7801CAD\u96c6\u6210\uff0c\u4f46\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5de5\u4f5c\u66f4\u591a\u3002\u7f51\u7ad9\uff0c\u56de\u8d2d\u3002\n    \u5269\u4e0b\u7684\u5305\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\uff0c\u4f46OpenSCAD\u83b7\u5f97\u4e86\u7279\u522b\u63d0\u53ca\uff0c\u56e0\u4e3a\u5b83\uff06\uff0339; og\u3002\u4ee5\u4e0b\u8bb8\u591a\u9879\u76ee\u7531Openscad\u542f\u53d1\uff0c\u662f\u6700\u7740\u540d\u7684\u9009\u62e9\u3002\u5982\u679c\u60a8\uff06\uff0339; refo-cod-cad\uff0c\u8fd9\u662f\u6700\u5b89\u5168\u7684\u9009\u62e9\u3002\u8bed\u6cd5\u5f88\u5bb9\u6613\u62fe\u53d6\uff0c\u4e92\u8054\u7f51\u5468\u56f4\u6709\u5f88\u591a\u6307\u5357\u3002\n   \u5b83\uff06\uff0339; s\u4e00\u4e2ac ++\u5e93\uff0c\u5b83\u662f\u5305\u88f9\u4e0b\u9762\u7684\u9879\u76ee\u3002 OpenCascade\u4f7f\u7528\u8fb9\u754c\u8868\u793a\uff08B-rep\uff09\u5185\u6838\uff0c\u8fd9\u662f\u4e00\u79cd\u4ee3\u8868\u5b9e\u4f53\u51e0\u4f55\u5f62\u72b6\u7684\u5f3a\u5927\u65b9\u5f0f\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528\u591a\u8fb9\u5f62\u7f51\u683c\u7684\u8bb8\u591a\u5176\u4ed6\u9879\u76ee\u7684\u5dee\u5f02\u3002\n   \u4e86\u89e3\u6211\u4eec\u9519\u8fc7\u7684\u5305\u88f9\u5417\uff1f\u544a\u8bc9\u6211\u4eec\u4e00\u4e2a\u95ee\u9898\u6216\u5f00\u653e\u516c\u5173\u3002 \n\u60a8\u8ba4\u4e3a\u6211\u4eec\u9519\u8fc7\u4e86\u5176\u4e2d\u4e00\u4e2a\u9879\u76ee\u7684\u91cd\u8981\u70b9\uff0c\u5efa\u8bae\u66f4\u591a\u7ec6\u8282\u3002\n    AngelCad\u7684\u76ee\u6807\u662f\u505a\u4e24\u4ef6\u4e8b\uff1a1\uff09\u901a\u8fc7Angelscript\u63d0\u4f9b\u5d4c\u5165\u5f0f\uff0c\u4f46\u901a\u7528\u7684\u811a\u672c\u8bed\u8a00\uff0c\u7528\u4e8e\u5efa\u8bbe\u6027\u5b9e\u4f53\u51e0\u4f55\u5f62\u72b6\u3002\u8fd9\u5141\u8bb8\u81ea\u7136\u7f16\u7a0b\u6837\u5f0f\u5177\u6709\u771f\u6b63\u7684\u53d8\u91cf\uff0c\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u751a\u81f3\u7c7b\u3002\u7a0b\u5e8f\u5458\u5e94\u8be5\u611f\u53d7\u5230\u5bb6\u91cc\u3002\u67e5\u770bAngelcad\u793a\u4f8b\u811a\u672c\u3002\n 2\uff09\u63d0\u4f9b\u5feb\u901f\u5e03\u5c14\u5f15\u64ce\uff0c\u7531\u96d5\u523b\u4f9b\u7535\uff0c\u7528\u4e8e\u6b64\u76ee\u7684\u3002\u8fd9\u610f\u5473\u7740Angelcad\u901a\u5e38\u6bd4\u5176\u4ed6\u57fa\u4e8e\u7f51\u683c\u7684\u7cfb\u7edf\u5feb\u591a\u500d\u3002\n AngelCad\u80fd\u591f\u4e3a\u4e92\u64cd\u4f5c\u6027\u8fd0\u884cOpenSCAD\u811a\u672c\uff0c\u5e76\u5177\u6709\u6587\u672c\u652f\u6301\u548cDXF Import\u7684\u529f\u80fd\u5373\u5c06\u63a8\u51fa\u3002\n   BitBybit\u65e2\u662f\u8282\u70b9\u7f16\u8f91\u5668\u548cCode-cad\uff0c\u56e0\u4e3a\u5b83\u4eec\u66b4\u9732\u4e86\u53ef\u4ee5\u5728\u5176\u5e94\u7528\u4e2d\u4f7f\u7528\u7684\u53ef\u9009\u754c\u9762\u3002\n   \u5171\u4eab\u4ee3\u7801CAD\u9879\u76ee\u7684\u793e\u533a\u96c6\u7ebf\u5668\u3002\u76ee\u524d\u4e0eCadquery\u548cOpenSCAD\u96c6\u6210\u3002\u771f\u6b63\u7684\u5efa\u9020\u548c\u7ef4\u62a4\u3002\n    Cadquery\u662f\u4e00\u4e2a\u5305\u88c5\u5e76\u6269\u5c55OpenCascade\u7684Python\u5e93\u3002\u5b83\u5177\u6709\u6355\u83b7\u8bbe\u8ba1\u610f\u56fe\u7684\u54f2\u5b66\u3002 API\u65e8\u5728\u5c3d\u53ef\u80fd\u63a5\u8fd1\u60a8\u5c06\u5bf9\u8c61\u63cf\u8ff0\u4e3a\u4eba\u7c7b\u3002\u8fd9\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u5b83\u7684\u80fd\u529b\uff06\uff0334;\u9009\u62e9\uff06\uff0334;\u6a21\u578b\u7684\u90e8\u5206\uff06\uff0339; s\u51e0\u4f55\u8981\u8fd0\u884c\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u4ee5\u4e0b\u4ee3\u7801\uff0c\u53ea\u9009\u62e9\u6cbfz\u8f74\u8fd0\u884c\u7684\u8fb9\u7f18\u5e76\u586b\u5145\u5b83\u4eec\u3002 \n\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684Opencascade\u7684JavaScript\u5305\u88c5\u5668\u3002 \uff08opencascade\u5728\u7f16\u8bd1\u5230\u7f51\u9875\u7ec4\u4ef6\u65f6\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\uff09\u3002 Cadhub\u4e0eCascadeStudio\u96c6\u6210\u3002\n   Curv\u662f\u4e00\u79cd\u7528\u4e8e\u4f7f\u7528\u6570\u5b66\u521b\u5efa\u827a\u672f\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u662f\u4e00\u4e2a2D\u548c3D\u51e0\u4f55\u5efa\u6a21\u5de5\u5177\uff0c\u652f\u6301\u5168\u5f69\u8272\uff0c\u52a8\u753b\u548c3D\u6253\u5370\u3002\u5b83\u662f\u7531openscad\u548cshadertoy\u7684\u542f\u53d1\u3002\n      FreeCad\u662f\u4e00\u79cd\u66f4\u4f20\u7edf\u7684CAD\u5305\uff0c\u652f\u6301Python\u811a\u672c\uff0c\u65e0\u8bba\u662f\u4e3a\u5efa\u6a21\u8fd8\u662f\u63a7\u5236Freecad GUI\u672c\u8eab\u3002\u5b83\u4e0d\u4ec5\u62e5\u6709\u5185\u7f6eOpenSCAD\u5de5\u4f5c\u53f0\u4ee5\u53ca\u5916\u90e8Cadquery Workbench\uff0c\u53ef\u4ee5\u5728\u4e92\u64cd\u4f5c\u6027\u7684\u6b64\u5217\u8868\u4e2d\u6700\u4f73\u3002 Freecad\u5728\u5f15\u64ce\u76d6\u4e0b\u4f7f\u7528OpenCascade\u3002\n   \u7531OpenSCAD\u5f15\u53d1\u4e86\u4e00\u79cd\u975e\u5e38\u76f8\u4f3c\u7684\u8bed\u8a00\uff0c\u5728Haskell\u5b9e\u73b0\uff0c\u5305\u62ec\u5728Haskell\u4e2d\u7f16\u5199\u5b9a\u4e49\u7684\u80fd\u529b\uff0c\u800c\u4e0d\u662foppenscad\uff0c\u800c\u662fAn\uff06\uff0339\u7684\u4e00\u90e8\u5206;\u51e0\u4e4e\u5806\u53e0\uff06\uff0339;\u5305\u62ecSexicicicCAD\uff08\u5bf9\u4e8eGUI\uff09\u548cHSLICE\uff08\u7528\u4e8eSTL Slicer\uff09\u7684\u5de5\u5177\u3002\n   JSCAD\uff08\u6b63\u5f0f\u77e5\u9053\u4e3aOpenJscad\uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u7a0b\u5e8f\u5458\u7684\u65b9\u6cd5\u6765\u5f00\u53d13D\u6a21\u578b\u3002\u7279\u522b\u662f\uff0c\u8be5\u529f\u80fd\u88ab\u8c03\u6574\u671d\u5411\u4e3a3D\u6253\u5370\u521b\u5efa\u7cbe\u786e\u6a21\u578b\u3002\n     JSCAD\u5141\u8bb8\u4efb\u4f55\u4eba\u901a\u8fc7\u7ec4\u5408\u7b80\u5355\u7684\u5f62\u72b6\u6765\u521b\u5efa3D\uff08\u62162D\uff09\u8bbe\u8ba1\u3002\u5e76\u4e14\u4efb\u4f55\u5f62\u72b6\u90fd\u53ef\u4ee5\u65cb\u8f6c\uff0c\u79fb\u52a8\uff0c\u7f29\u653e\u7b49\u3002\u590d\u6742\u7684\u5f62\u72b6\u53ef\u4ee5\u4fdd\u5b58\u4e3a\u96f6\u4ef6\uff0c\u53ef\u4ee5\u5728\u4ee5\u540e\u4f7f\u7528\u3002\u6700\u7ec8\u8bbe\u8ba1\u53ef\u4ee5\u5bfc\u51fa\u4e3a\u5404\u79cd\u6807\u51c6\u683c\u5f0f\uff0c\u5373STL\uff0cDXF\uff0cSVG\u7b49\u3002\n   libfive\u662f\u4e00\u79cd\u8f6f\u4ef6\u5e93\u548c\u7528\u4e8e\u5b9e\u4f53\u5efa\u6a21\u7684\u4e00\u7ec4\u5de5\u5177\uff0c\u7279\u522b\u9002\u7528\u4e8e\u53c2\u6570\u548c\u7a0b\u5e8f\u8bbe\u8ba1\u3002\u57fa\u4e8eLISP\u7684\u8bed\u8a00\uff08\u5982\u6b64\uff08\uff08\uff08\uff08\uff08\uff08\uff08\uff08\uff08\uff08\u53ef\u4ee5\u671f\u5f85\uff09\u5927\u91cf\u62ec\u53f7\uff09\uff09\uff09\uff09\uff09\u3002 \n\u53e6\u4e00\u4e2a\u7531openscad\u542f\u53d1\u7684\u9879\u76ee\u3002\u4f5c\u8005\u8ba4\u4e3a\u5173\u952e\u5dee\u5f02\u662f\u7a0b\u5e8fVS\u529f\u80fd\u7f16\u7a0b\u8bed\u8a00\u6837\u5f0f\uff0c\uff08\u5373\u53ef\u4ee5\u4fee\u6539\u53d8\u91cf\uff09\uff0c\u5e76\u4e14\u5728\u6574\u4e2a\u4e2d\u4f7f\u7528\u4efb\u610f\u7cbe\u5ea6\u7b97\u672f\uff08\u610f\u5473\u7740\u6ca1\u6709\u610f\u5916\u7684\u53cc/\u6d6e\u52a8\u820d\u5165\u9519\u8bef\uff09\u3002 RAPCAD\uff0cOpenSCAD\u548cImblicicCAD\u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u65b9\u4fbf\u7684\u529f\u80fd\u77e9\u9635\u3002\n         \u57fa\u4e8eGo-Code-CAD\u5305\uff0c\u7528\u4e8e\u4f7f\u7528\u7b26\u53f7\u8ddd\u79bb\u51fd\u6570\uff08SDFS\uff09\u5185\u6838\u3002\u80fd\u591f\u505a\u9c7c\u7247\u548c\u5012\u89d2\u3002 repo\u5305\u62ec\u6807\u51c6\u5e93\u3002\n      Tovero\u662fLibfive\u5bf9\u5e38\u89c1LISP\u7684\u7ed1\u5b9a\uff0c\u5305\u62ec\u72ec\u7acb\u7684\u57fa\u4e8eRepl-Viewer\u3002 Tovero\u53ef\u4ee5\u4e0eClive\uff0c\u4e00\u4e2a\u5e38\u89c1\u7684LISP\u573a\u666f\u56fe\u548c3D GUI\u96c6\u6210\uff0c\u4ee5\u6784\u5efa\u66f4\u590d\u6742\u7684\u5efa\u6a21\u5e94\u7528\u7a0b\u5e8f\u3002\n        \u53d1\u7535\u673a\u662f\uff0c\u975e\u5e38\u5b57\u9762\u610f\u601d\uff0c\u4f60\u505a\u4e86\u4ec0\u4e48\u3002\u4f7f\u7528Dynamo\u53ef\u4ee5\u5305\u62ec\u4f7f\u7528\u8be5\u5e94\u7528\u7a0b\u5e8f\uff0c\u65e0\u8bba\u662f\u4e0e\u5176\u4ed6Autodesk\u8f6f\u4ef6\u5982\u4f55\uff0c\u4e5f\u53ef\u4ee5\u53c2\u4e0e\u89c6\u89c9\u7f16\u7a0b\u8fc7\u7a0b\uff0c\u6216\u53c2\u4e0e\u5e7f\u6cdb\u7684\u7528\u6237\u548c\u8d21\u732e\u8005\u793e\u533a\u3002\u4e0eFreeCad\u5408\u4f5c\n   MakeCode\uff06\uff0339; S\u5757\u7f16\u8f91\u5668\u63d0\u4f9b\u4e86\u8bb8\u591a\u5927\u91cf\u5e2e\u52a9\u8005\uff0c\u4f7f\u5176\u6210\u4e3a\u5236\u4f5c\u529f\u80fd3D\u6253\u5370\u7684\u6700\u4f73\u52a9\u624b\uff0c\u4f8b\u5982\uff0c\u6709\u5e2e\u52a9\u5806\u6808\u548c\u5e03\u5c40\u96f6\u4ef6\u4ee5\u53ca\u5706\u89d2Umer\uff08\u79f0\u4e3a\u6837\u5f0f\u8fb9\u7f18\uff09\u7684\u529f\u80fd\u3002\u5b83\u8fd8\u5177\u6709\u5feb\u901f\u8239\u4f53\u529f\u80fd\uff08\u79f0\u4e3a\u5305\u88c5\u5f62\u72b6\uff09\u3002 MakeCode\u7531FirstBee\u8d5e\u52a9\u3002\n   \u6405\u62cc\u673a\u7684\u9644\u52a0\u7ec4\u4ef6\u3002 Sverchok\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u67b6\u6784\u5e08\u7684\u53c2\u6570\u5de5\u5177\uff0c\u5141\u8bb8\u4f7f\u7528\u8282\u70b9\u5728\u89c6\u89c9\u4e0a\u7f16\u7a0b\u51e0\u4f55\u3002 ", "note_en": "It&#39;s software that allows you to define 3D CAD models with code. It&#39;s a niche popular amongst software devs for obvious reasons \u2014 it gives you parametric models almost by default and it&#39;s easy to maintain and extend models within a team over time when paired with git. The coding nature of it allows teams to build their own abstraction for re-use and quick prototyping. The  Cadhub homepage has a good breakdown of the potential of the Code-CAD paradigm. Code-CAD is not to be confused with 3d geometry libraries, Code-CAD instead has opinionated abstractions for quickly developing mechanical parts.\n  I recommend reading through the entire list below to see if one chimes with you and your needs, beyond that I can make the following recommendation and points:\n My main recommendation is to use one of the packages that uses a B-rep kernal (and for opensounce tools that means OpenCascade, a mature C++ CAD library). Packages that do so are CadQuery, CascadeStudio, DeclaraCAD and pythonOCC. My reasons for recommending these are as follows:\n Most of Code-CAD tools are plagued with a CSG mindset (that is unions, subtractions and intersections of primitive shapes; cubes spheres etc). This is an inherently limited paradigm (one simple example of this is how internal fillets, which are important for reducing stress concentrations in parts, become very difficult). While CadQuery, CascadeStudio, DeclaraCAD and pythonOCC still offer CSG functionality, you&#39;re also able to move beyond.\n OpenCascade uses a B-rep (boundary representation) kernel, In my opinion, this means you&#39;ll be learning a future-proof tool that won&#39;t limit the types of applications you can model for, which is likely the case for mesh kernels, which will cause trouble in for some applications like optics and injection moulding.\n OpenSCAD is tried and true, with lots of examples and tutorials floating around the internet. It also has a very intuitive syntax that folks without prior programming experience have been able to quickly pick up. However, some reasons you might want to look elsewhere are:\n It can be hard to build powerful abstractions since they&#39;ve rolled their own language. Consequences of this include that it doesn&#39;t have a package manager like many modern languages, and the presence of quirks with the language, such as function definitions that aren&#39;t ergonomic.\n Check out the birdhouse example, while anecdotal, seeing the same part made with three different tools might help you decide which syntax you like the most.\n You might want to simply pick a tool based on your language of choice. Clojure, enaml, Go, Haskell, Lisp, Javascript and Python are all represented below.\n If you want to make 3D art, Curv is specifically trying to hit that niche.\n No matter which one is your tool of choice, if you&#39;re here and you love Code-CAD and you&#39;ll want to checkout  Cadhub. Think of it as Codepen crossed with a thing repository, and it&#39;s our love letter to the Maker community. Currently, CascadeStudio is the only Code-CAD integration, but we&#39;re working on more.  Site,  repo.\n    The rest of the packages are in alphabetical order, but OpenSCAD gets a special mention because it&#39;s the OG. Many of the projects below were inspired by OpenSCAD and is the most well-known choice. If you&#39;re new to code-cad this is the safest choice. The syntax is easy to pick up and there lots of guides around the internet.\n   It&#39;s a c++ library that a number the projects below wrap. OpenCascade uses a Boundary representation (B-rep) kernel, which is a powerful way representing solid geometry, this is a point of difference for some many of the other projects that use a polygon mesh.\n   Know of a package that we missed? tell us with an issue or open up a PR.\n  Do you think we missed an important point for one of the projects, suggest more details.\n    AngelCAD aim to do two things:1) Offer an embedded, but general-purpose scripting language for Constructive Solid Geometry, via  AngelScript. This allows for a natural programming style with true variables, user-defined functions and even classes. Programmers should feel at home. See  AngelCAD sample scripts.\n 2) Offer a fast boolean engine, which is powered by  Carve is used for this purpose. This means that AngelCAD is generally many times faster than other mesh-based systems.\n AngelCAD is capable of running OpenSCAD script for interoperability and has features like text support and DXF import coming soon.\n   bitbybit is both a node editor and Code-CAD as they have exposed a  typescript interface that can be used in their app.\n   A community hub for sharing code-cad projects. Currently integrates with  CadQuery and  OpenScad. Built and maintained by yours truly.\n    CadQuery is a Python library that wraps and extends  OpenCascade. It has a philosophy of capturing design intent. The API has been designed to be as close as possible to how you\u2019d describe the object to a human. An example of this is its ability to &#34;select&#34; parts of the model&#39;s geometry to run operations on, such as the following code that selects only the edges running along the Z-axis and fillets them.\n     A javascript wrapper for  OpenCascade that runs in the browser. (OpenCascade can run in the browser when compiled to web-assembly).  CadHub integrates with CascadeStudio.\n   Curv is a programming language for creating art using mathematics. It\u2019s a 2D and 3D geometric modelling tool that supports full colour, animation and 3D printing. It was inspired by OpenSCAD and  shadertoy.\n      FreeCad is a more traditional CAD package that supports python scripting, Both for modelling as well as controlling the FreeCAD GUI itself. Not only that it has a built in  OpenSCAD workbench as well as an external  CadQuery workbench, making it the best in this list at interoperability. FreeCAD uses OpenCascade under-the-hood.\n   Inspired by OpenSCAD with a very similar language, implemented in Haskell and includes the ability to write definitions in Haskell, instead of just OpenSCAD, and is part of an &#39;almost stack&#39; of tools including ExplicitCAD (for a GUI), and HSlice (for an STL slicer).\n   JSCAD (formally know as OpenJSCAD) provides a programmer\u2019s approach to develop 3D models. In particular, this functionality is tuned towards creating precise models for 3D printing.\n     JSCAD allows anyone to create 3D (or 2D) designs by combining simple shapes. And any shape can be rotated, moved, scaled, etc. Complex shapes can be saved as parts, which can used later. And the final design can be exported into various standard formats, i.e. STL, DXF, SVG, etc.\n   Libfive is a software library and set of tools for solid modelling, especially suited for parametric and procedural design. Lisp based language, (so (you (((((can expect ) lots of parentheses))))).\n      Another project inspired by OpenSCAD. The author considers key differences to be procedural vs functional programming language style, (i.e variables can be modified) and the use of arbitrary precision arithmetic throughout (meaning there are no unexpected double/float rounding errors). There is a handy  feature matrix between RapCAD, OpenSCAD and ImplicitCad.\n         Go-based Code-CAD package that uses a signed distance functions (SDFs) kernel. Is capable of doing fillets and chamfering. The repo includes a  standard-library.\n      Tovero is a binding of Libfive to Common Lisp, including a standalone REPL-based viewer. Tovero can be integrated with  Clive, a Common Lisp scene graph and 3D GUI, to build more complex modelling applications.\n        Dynamo is, quite literally, what you make it. Working with Dynamo may include using the application, either in connection with other Autodesk software or not, engaging a Visual Programming process, or participating in a broad community of users and contributors. Works with  FreeCad\n   MakeCode&#39;s block editor supplies many great deal of helpers that make it perfect for making functional 3d prints, for example, there are functions that help stack and layout parts, as well as fillet utils (called styled edges). It also has a fast hull function (called wrap shapes). MakeCode is sponsored by  BuildBee.\n   Add-on for blender. Sverchok is a powerful parametric tool for architects, allowing geometry to be programmed visually with nodes.", "posttime": "2021-06-29 22:51:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,2020,code", "title": "\u7b56\u5212\u4ee3\u7801CAD\uff082020\uff09 ", "title_en": "Curated Code CAD (2020)", "transed": 1, "url": "https://learn.cadhub.xyz/blog/curated-code-cad/", "via": "", "real_tags": ["\u4ee3\u7801", "2020", "code"]}, {"category": "", "categoryclass": "", "imagename": "a6501d42b8c4da83721d51a9facf0d33.jpg", "infoid": 1068480, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SafeDollar\uff08SDO\uff09\u7684\u4ef7\u683c\u662f\u57fa\u4e8e\u591a\u8fb9\u5f62\uff08MICT\uff09\u533a\u5757\u94fe\u7684\u7b97\u6cd5\u5206\u6563\u91d1\u878d\uff08DECII\uff09StableCoin\uff0c\u7531\u4e8e\u4eca\u5929\u4f3c\u4e4e\u662f\u6f0f\u6d1e\u7684\u7ed3\u679c\uff0c\u5b83\u5df2\u7ecf\u5927\u8dcc\u81f3\u4e8e\u3002\n   \u867d\u7136\u7ec6\u8282\u5c1a\u672a\u7a00\u7f3a\uff0c\u4f46\u8857\u533a\u63a2\u9669\u5bb6\u591a\u8fb9\u5f62\u5ba3\u5e03\u663e\u793a\uff0c202,000\u7f8e\u5143\u548c46,000\u7f8e\u5143\u7684\u65af\u7279\u5e03\u5207\u65af\u7a81\u7136\u4ece\u4eca\u65e5SDO\u7684\u667a\u80fd\u5408\u540c\u4e2d\u6392\u51fa - \u603b\u5171\u4ef7\u503c\u7ea6248,000\u7f8e\u5143\u3002\n \u56e0\u6b64\uff0c\u6839\u636e\u201c\u534f\u8bae\u201d\u81ea\u5df1\u7684\u7f51\u7ad9\uff0cSafeDollar\u7684\u4ef7\u683c - \u5b83\u5e94\u8be5\u59cb\u7ec8\u7b49\u4e8e1\u7f8e\u5143\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2aStablecoin-\u5df2\u7ecf\u66b4\u8dcc\u5230\u96f6\u3002\n  StableCoins\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u52a0\u5bc6\u8d27\u5e01\uff0c\u9489\u5728\u67d0\u4e9b\u83f2\u4e9a\u7279\u8d27\u5e01\uff0c\u901a\u5e38\u662f\u7f8e\u56fd\u7f8e\u5143\u3002\u5b83\u4eec\u65e8\u5728\u59cb\u7ec8\u4fdd\u7559\u5176\u76f8\u5e94\u8d44\u4ea7\u7684\u4ef7\u503c\uff0c\u7406\u8bba - \u5e94\u59cb\u7ec8\u4ee5\u4e00\u5bf9\u4e00\u7684\u6bd4\u4f8b\u8fdb\u884c\u53ef\u4ea4\u6613\u6216\u53ef\u8d4e\u56de\u3002\n \u5728SafeDollar\u7684\u60c5\u51b5\u4e0b\uff0cStableCoin\u4f7f\u7528\u201cSeigniorage\uff0c\u901a\u8d27\u7d27\u7f29\u534f\u8bae\u548c\u5408\u6210\u8d44\u4ea7\u7684\u72ec\u7279\u7279\u5f81\u201d\u7684\u7ec4\u5408\u4f5c\u4e3a\u5176\u57fa\u7840\u3002\n  \u6b64\u6b21\u653b\u51fb\u8fd8\u5728\u4eca\u5929\u7684\u7535\u62a5\u9891\u9053\u4e2d\u786e\u8ba4\uff0c\u968f\u7740\u201cSafeDollar\u516c\u544a\u201d\u7684\u7535\u62a5\u9891\u9053\uff0c\u5f00\u53d1\u4eba\u5458\u6566\u4fc3\u7528\u6237\u963b\u6b62\u6240\u6709\u4e0eSDO\u7684\u8fd0\u8425\uff0c\u5e76\u8868\u9762\u4e0a\u6709\u5e0c\u671b\u63d0\u51fa\u672a\u6765\u8d54\u507f\u8ba1\u5212\u3002\n \u201cSafeDollar\u4e00\u76f4\u5728\u653b\u51fb\u3002\u6211\u4eec\u6682\u505c\u4e86SafeDollar\u7684\u6d3b\u52a8\u5e76\u8c03\u67e5\u6b64\u4e8b\u3002\u91cd\u8981\u63d0\u793a\uff1a\u8bf7\u505c\u6b62\u6240\u6709\u4e0e$ SDO\u76f8\u5173\u7684\u4ea4\u6613\u3002\u5ba3\u5e03\u8bf4\uff0c\u6211\u4eec\u5c06\u5728\u8c03\u67e5\u8d54\u507f\u8ba1\u5212\u540e\u5ba3\u5e03\u9a8c\u5c38\u540e\uff0c\u201c\u5ba3\u5e03\u3002 \n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u751a\u81f3\u4e0d\u662f\u7b2c\u4e00\u6b21SDO\u88ab\u5265\u524a\u3002\u5728\u4e00\u5468\u524d\uff0cSafeDollar\u5f00\u53d1\u5546\u51fa\u7248\u4e86\u4e00\u4e2a\u5173\u4e8e\u6f0f\u6d1e\u7684\u201c\u6dd8\u6c70\u7684\u5206\u6790\u201d\uff0c\u5bfc\u81f4\u8bae\u5b9a\u4e66\u76849,959\u4e2aSDS\u4ee4\u724c\u635f\u5931 - \u5f53\u65f6\u4ef7\u503c\u7ea6\u4e3a95,000\u7f8e\u5143\u3002\n \u4f5c\u4e3a6\u670817\u65e5\u62a5\u544a\u7684\u52a0\u5bc6\u7cd6\uff0c\u94c1\u91d1\u878d\uff0c\u53e6\u4e00\u4e2a\u76ee\u524d\u8fc1\u79fb\u5230\u591a\u8fb9\u5f62\u7684\u89e3\u5bc6\u9879\u76ee\uff0c\u5c06\u5176\u94c1\u949b\uff08\u6cf0\u5766\uff09\u6807\u8bb0\u8dcc\u783499\uff05\u7684\u6f0f\u6d1e\u5229\u7528\u7684\u4ef7\u683c\u3002\n \uff08\u66f4\u6b63\uff1a\u672c\u6587\u7684\u65e9\u671f\u7248\u672c\u8868\u793a\uff0c\u5229\u6da6\u989d\u4e3a2.48\u4ebf\u7f8e\u5143\u3002\u8fd9\u4e9b\u6570\u5b57\u5df2\u66f4\u65b0\u3002\uff09\n  \u5728\u6bcf\u7bc7\u6587\u7ae0\u4e2d\u8bbf\u95ee\u66f4\u591a\u7684\u52a0\u5bc6\u6d1e\u5bdf\u529b\u548c\u4e0a\u4e0b\u6587\u4f5c\u4e3a\u5bc6\u7801\u8fb9\u7f18\u7684\u4ed8\u8d39\u6210\u5458\u3002\n   \u73b0\u5728\u52a0\u516519\u7f8e\u5143/\u6708\u63a2\u7d22\u6240\u6709\u4f18\u60e0\n     \u5bf9\u900f\u660e\u5ea6\u7684\u627f\u8bfa\uff1a\u672c\u6587\u7684\u4f5c\u8005\u88ab\u6295\u5165\u548c/\u6216\u5bf9\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u8ba8\u8bba\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u8d44\u4ea7\u611f\u5174\u8da3\u3002\u5bc6\u7801\u7d20\u6ca1\u6709\u8ba4\u53ef\u4efb\u4f55\u53ef\u4ee5\u63d0\u53ca\u6216\u94fe\u63a5\u5230\u672c\u6587\u4e2d\u7684\u4efb\u4f55\u9879\u76ee\u6216\u8d44\u4ea7\u3002\u5728\u8bc4\u4f30\u672c\u6587\u4e2d\u7684\u5185\u5bb9\u65f6\uff0c\u8bf7\u8003\u8651\u5230\u8003\u8651\u3002\n \u514d\u8d23\u58f0\u660e\uff1a\u6211\u4eec\u7684\u4f5c\u5bb6\uff06\uff0339;\u610f\u89c1\u4ec5\u4ec5\u662f\u4ed6\u4eec\u81ea\u5df1\u7684\uff0c\u4e0d\u53cd\u6620\u4e86\u5bc6\u7801\u7684\u610f\u89c1\u3002\u60a8\u5728\u5bc6\u7801\u7d20\u5185\u8bfb\u53d6\u7684\u4fe1\u606f\u90fd\u4e0d\u5e94\u4f5c\u4e3a\u6295\u8d44\u5efa\u8bae\uff0c\u672a\u52a0\u5bc6\u8ba8\u8bba\u672c\u6587\u4e2d\u53ef\u80fd\u63d0\u53ca\u6216\u94fe\u63a5\u7684\u4efb\u4f55\u9879\u76ee\u3002\u8d2d\u4e70\u548c\u4ea4\u6613\u52a0\u5bc6\u8d27\u5e01\u5e94\u88ab\u89c6\u4e3a\u9ad8\u98ce\u9669\u7684\u6d3b\u52a8\u3002\u5728\u91c7\u53d6\u4e0e\u672c\u6587\u4e2d\u7684\u5185\u5bb9\u76f8\u5173\u7684\u4efb\u4f55\u884c\u52a8\u4e4b\u524d\uff0c\u8bf7\u6267\u884c\u81ea\u5df1\u7684\u5c3d\u804c\u8c03\u67e5\u3002\u6700\u540e\uff0c\u4f60\u5e94\u8be5\u4e22\u5931\u8d27\u5e01\u4ea4\u6613\u52a0\u5bc6\u8d27\u5e01\u4e0d\u627f\u62c5\u8d23\u4efb\u3002 ", "note_en": "The price of SafeDollar (SDO), an algorithmic decentralized finance ( DeFi) stablecoin based on the  Polygon (MATIC) blockchain, has plummeted to literally zero as a result of what appears to be an exploit today.\n   While details are yet scarce, block explorer   Polygonscan  shows that 202,000 USDC and 46,000 USDT stablecoins were suddenly drained from SDO\u2019s smart contract today\u2014worth around $248,000 in total.\n As a result, SafeDollar\u2019s price\u2014which was supposed to always be equal to $1 since it\u2019s a stablecoin\u2014has plummeted to zero, according to the protocol\u2019s   own website .\n  Stablecoins are a special type of cryptocurrency tokens that are pegged to certain fiat currencies, usually the U.S. dollar. They are designed to always retain the value of their corresponding assets and\u2014in theory\u2014should always be tradeable or redeemable in a one-to-one ratio.\n In SafeDollar\u2019s case, the stablecoin uses a combination of \u201cunique features of seigniorage, deflation protocol and synthetic assets\u201d as its basis.\n  The attack was also confirmed in a Telegram channel called \u201cSafeDollar Announcements\u201d today, with developers urging users to stop all operations with SDO and ostensibly promising to come up with a compensation plan in the future.\n \u201cSafeDollar has been under attack. We have paused activities on SafeDollar and investigating the matter. IMPORTANT: PLEASE STOP ALL TRADING RELATED TO $SDO. We will announce the post-mortem after the investigation done with compensation plan for Liquidity Providers,\u201d said the announcement.\n  Notably, this is not even the first time SDO was exploited. Just a week ago, SafeDollar developers published a \u201c  Postmortem Analysis \u201d about an exploit that resulted in the loss of the protocol\u2019s 9,959 SDS tokens\u2014worth around $95,000 at the time.\n As   CryptoSlate  reported on June 17, Iron Finance, another DeFi project that is currently migrating to Polygon, saw the price of its   Iron Titanium (TITAN) token plummet by 99%  on the heels of an exploit.\n (Correction: An earlier version of this article said the exploit amounted to $248 million. The figures have been updated.)\n  Access more crypto insights and context in every article as a paid member of  CryptoSlate Edge.\n   Join now for $19/month  Explore all benefits\n     Commitment to Transparency: The author of this article is invested and/or has an interest in one or more assets discussed in this post. CryptoSlate does not endorse any project or asset that may be mentioned or linked to in this article. Please take that into consideration when evaluating the content within this article.\n Disclaimer: Our writers&#39; opinions are solely their own and do not reflect the opinion of CryptoSlate. None of the information you read on CryptoSlate should be taken as investment advice, nor does CryptoSlate endorse any project that may be mentioned or linked to in this article. Buying and trading cryptocurrencies should be considered a high-risk activity. Please do your own due diligence before taking any action related to content within this article. Finally, CryptoSlate takes no responsibility should you lose money trading cryptocurrencies.", "posttime": "2021-06-29 22:51:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "exploit,stablecoin,safedollar", "title": "\u5728Polygon\u4e0a\u7684Defi Exploit\u540e\uff0cSafeDollar'StableCoin'\u8dcc\u81f30\u7f8e\u5143 ", "title_en": "SafeDollar \u2018stablecoin\u2019 drops to $0 following DeFi exploit on Polygon", "transed": 1, "url": "https://cryptoslate.com/safedollar-stablecoin-drops-to-0-following-248000-defi-exploit-on-polygon/", "via": "", "real_tags": ["exploit"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068479, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u82f1\u7279\u5c14\u5c06\u7981\u7528\u4e8b\u52a1\u6027\u540c\u6b65\u6269\u5c55\uff08TSX\uff09\u901a\u8fc7\u5496\u5561\u6e56\u5904\u7406\u5668\uff0c\u5373\u5373\u5c06\u7ed3\u4ea4\u7684\u5fae\u7801\u66f4\u65b0\u3002\u662f\u7684\uff0c\u8fd9\u8868\u660e\u5bf9\u53d7\u76ca\u4e8eTSX\u7684\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6027\u80fd\u5f71\u54cd\u3002\u8fd9\u4e00\u53d8\u5316\u4f3c\u4e4e\u6ca1\u6709\u516c\u5f00\u8c08\u8bba\u5927\u91cf\u8c08\u8bba\uff0c\u6211\u521a\u521a\u5728\u901a\u8fc7\u65b0\u7684\u5185\u6838\u8865\u4e01\u65f6\u521a\u521a\u610f\u8bc6\u5230\u5b83\u3002\r   \u81ea\u52a8\u540c\u6b65\u6269\u5c55\uff08TSX\uff09\u81ea\u54c8\u65af\u97e6\u5c14\u4e3a\u786c\u4ef6\u4e8b\u52a1\u5185\u5b58\u652f\u6301\u5e76\u8fdb\u884cIntel\uff06\uff0339;\u5728\u7279\u5b9a\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u7684\u901f\u5ea6\u901f\u5ea6\u901f\u5ea6\u7ea6\u4e3a40\uff05\uff0c\u6216\u8005\u5728\u6570\u636e\u5e93\u4e8b\u52a1\u57fa\u51c6\u4e2d\u66f4\u5feb\u76844\u301c5\u500d\u3002\u8fc7\u53bb\u53d1\u73b0\u4e86TSX\u95ee\u9898\uff0c\u5982\u53ef\u80fd\u7684\u4fa7\u901a\u9053\u5b9a\u65f6\u653b\u51fb\uff0c\u53ef\u80fd\u5bfc\u81f4KASLR\u88ab\u51fb\u8d25\u548cCVE-2019-11135\uff08TSX Async\u4e2d\u6b62\uff09\u8fdb\u884cMDS\u5f0f\u6f0f\u6d1e\u3002\u73b0\u5728\uff0c\u57282021\u5e74\uff0c\u82f1\u7279\u5c14\u6a2a\u8de8\u5496\u5561\u6e56\u7684Skylake\u7684\u591a\u4e2aIntel CPU\u7684\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7981\u7528TSX\u3002\r   \u6ca1\u6709\u5bf9\u53d8\u9769\u7684\u5e7f\u6cdb\u516c\u544a\u4f3c\u4e4e\u5df2\u7ecf\u53d6\u5f97\u4e86\u8fd9\u4e00\u53d8\u5316\uff0c\u56e0\u4e3a\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u542c\u5230\u8fd9\u4e2a\u5f03\u7528/\u7981\u7528\uff0c\u800c\u4e0d\u662f\u5728\u5176\u4ed6\u65b0\u95fb\u7f51\u7ad9\u4e0a\u63d0\u5230\uff0c\u4f46\u6ce8\u610f\u5230\u5b83\u4e0e\u65b0\u7684Linux 5.14\u5468\u671f\u8fdb\u5165\u65b0\u7684\u8865\u4e01\u3002 Linux\u5185\u6838\u6b63\u5728\u4e3a\u672c\u65e9\u6668\u4e3a5.14\u5408\u5e76\u7a97\u53e3\u7684\u65b0\u8865\u4e01\u6d41\u7a0b\u8fdb\u884c\u51c6\u5907\u3002\r    \u8bb0\u5fc6\u8ba2\u5355\u95ee\u9898\u662f\u636e\u62a5\u9053\uff0c\u636e\u62a5\u9053\uff0c\u82f1\u7279\u5c14\u73b0\u5728\u8d2c\u4f4e\u4e86\u5404\u79cd\u5904\u7406\u5668\u7684TSX\u3002\u672c\u6708\u6709\u8fd9\u4e2a\u82f1\u7279\u200b\u200b\u5c14\u767d\u76ae\u4e66\u66f4\u65b0\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u95f4\u3002\u5982\u5728\u4fee\u8ba2\u5386\u53f2\u8bb0\u5f55\u4e2d\u6240\u6307\u51fa\u7684\uff0c\u81ea\u4ece2018\u5e7410\u6708\u4e4b\u524d\u7684\u81f3\u5c11\u57282018\u5e7410\u6708\u4e4b\u524d\u7684\u5185\u5bb9\u4e2d\u5df2\u77e5\u5185\u5b58\u6392\u5e8f\u95ee\u9898\uff0c\u4f46\u73b0\u5728\u53ea\u57282021\u5e746\u67082021\u5e74\u9ed8\u8ba4\u63a8\u51faMicrocode\u66f4\u65b0\u4ee5\u7981\u7528Microcode\u66f4\u65b0\u4ee5\u9ed8\u8ba4\u7981\u7528TSX\u3002\r   \u5728\u8fdb\u884c\u65b0\u7684Linux\u8865\u4e01\u65f6\uff0c\u4ece6\u670812\u65e5\u53c2\u8003\u8fd9\u4e00\u6307\u5bfc\u6982\u8ff0\u4e86\u9884\u671f\u7684\u53d8\u5316\u3002\u8be5\u66f4\u65b0\u5728\u82f1\u7279\u5c14\uff06\uff0339\u7684\u6700\u65b0CPU\u5fae\u7801\u66f4\u65b0\u540e\u51e0\u5929\u53d1\u5e03\u4e86\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u6ca1\u6709\u6ce8\u610f\u5230\u4efb\u4f55TSX\u7684\u66f4\u6539\uff0c\u4f46\u6ce8\u610f\u5230\u5176\u4ed6\u5b89\u5168\u66f4\u65b0\u3002 \uff08\u5c1d\u8bd5\u5728\u5176\u4e2d\u4e00\u4e2a\u53d7\u5f71\u54cd\u7684CPU\u4e0a\u7684\u6700\u65b0\u7684\u5fae\u7801\u66f4\u65b0\u4ecd\u7136\u663e\u793aTSX\u4e0eTAA\u7f13\u89e3\u4ecd\u7136\u6709\u6548\u3002\uff09\u5373\u5c06\u5230\u6765\u7684Microcode\u66f4\u65b0\u5c06\u5728\u8e29\u8e0f5\u4e4b\u524d\u6709\u6548\u5730\u8d2c\u4f4e\u6240\u6709Skylake Xeon CPU\u7684TSX\uff08\u5305\u62ecXeon D\u548c\u7b2c1 Gen Xeon\u53ef\u6269\u5c55\uff09\uff0c\u6240\u6709\u7b2c6\u578bXeon E3-1500M V5 / E3-1200 V5 Skylake\u52a0\u5de5\u5668\uff0c\u6240\u67097\u65e5/\u7b2c8\u6b21\u6838\u5fc3\u548c\u78f7\u8102/\u5496\u5561/\u5a01\u58eb\u5fcc/\u5a01\u58eb\u5fccCPU\u57280x8\u9636\u68af\u4e4b\u524d\uff0c\u4ee5\u53ca\u6240\u67098\u65e5/\u7b2c9\u6bb5\u6838\u5fc3/\u5954\u817e\u5496\u5561\u6e56CPU\u4e4b\u524d\u52300xC\u8e29\u8e0f\u5c06\u53d7\u5230\u5f71\u54cd\u3002\u6700\u7ec8\u901a\u8fc7\u5496\u5561\u6e56\u4ece\u5404\u79cd\u5929\u7a97\u7684\u5e73\u53f0\u8de8\u8d8a;\u5b83\u662f\u7b2c10\u65cf\u5f57\u661f\u6e56\u548c\u51b0\u6e56\uff0c\u968f\u540e\u53d6\u4e0b\u4e86TSX / TSX-Ni\u3002\r    \u9664\u4e86\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7981\u7528TSx\u5e76\u9ed8\u8ba4\u5f3a\u5236\u4e0b\u964d\u6240\u6709RTM\u4e8b\u52a1\uff0c\u5c06\u679a\u4e3e\u65b0\u7684\u5fae\u7801\uff0c\u4ee5\u6307\u793aRTM\u4e8b\u52a1\u7684\u529b\u4e2d\u6b62\u3002\u5b83\uff06\uff0339; s\u7531\u4e8eLinux\u5185\u6838\u770b\u5230\u4fee\u8865\u7a0b\u5e8f\u7684\u65b0CPUID\u4f4d\u3002\u4ee5\u524dLinux\u548c\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u5e94\u7528\u4e86TSX\u5185\u5b58\u6392\u5e8f\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u4f46\u73b0\u5728\u7981\u7528\u6b64\u529f\u80fd\u65f6\uff0c\u5185\u6838\u53ef\u4ee5\u4e22\u5f03\u6240\u8ff0\u89e3\u51b3\u65b9\u6cd5\u3002\u8fd9\u4e9b\u8865\u4e01\u968f\u7740Linux 5.14\u5faa\u73af\u800c\u6765\uff0c\u4e5f\u53ef\u80fd\u4f1a\u6062\u590d\u7a33\u5b9a\u3002\r    \u82f1\u7279\u5c14\u901a\u8fc7\u5fae\u7801\u66f4\u65b0\u7981\u7528TSX ISN\uff06\uff0339; T\u5b8c\u5168\u662f\u91cd\u65b0\u7684\uff0c\u5f53\u7279\u5f81\u9996\u6b21\u51fa\u73b0\u54c8\u65af\u97e6\u5c14\u65f6\uff0c\u4ed6\u4eec\u6700\u7ec8\u9009\u62e9\u6027\u5730\u7981\u6b62\u7531\u4e8e\u65e9\u671f\u9519\u8bef\u800c\u5728\u8be5\u539f\u59cb\u5b9e\u65bd\u4e2d\u7684\u65e9\u671f\u9519\u8bef\uff0c\u4f46\u73b0\u5728\u8fd9\u4f1a\u6709\u6548\u5730\u6740\u6b7b\u5b83\u8de8\u8d8a\u591a\u4e2a\u4ea7\u54c1\u4ee3\u6570\u548c\u5c81\u6708\u8f6f\u4ef6\u9002\u7528\u4e8e\u5141\u8bb8\u4f7f\u7528\u4e8b\u52a1\u540c\u6b65\u6269\u5c55\u3002 Linux\u4e0a\u7684TSX\u6027\u80fd\u5df2\u7ecf\u4e3a\u8f83\u65b0\u7684\u5904\u7406\u5668\u52a3\u5316\uff0c\u56e0\u4e3a2019\u5e74\u5e95\u9881\u5e03\u7684Taa\u7f13\u89e3\u6e90\u3002\r   \u82f1\u7279\u5c14\uff06\uff0339;\u5728\u5373\u5c06\u4e3e\u884c\u7684\u5fae\u7801\u53d8\u5316\u5468\u56f4\u672c\u6708\u7684\u6307\u5bfc\u786e\u5b9e\u786e\u8ba4\uff06\uff0334;\u53d7\u76ca\u4e8e\u82f1\u7279\u5c14TSX\u7684\u5de5\u4f5c\u8d1f\u8f7d\u53ef\u80fd\u4f1a\u9047\u5230\u6027\u80fd\u53d8\u5316\u3002\uff06\uff0334;\u56e0\u6b64\uff0c\u6709\u65f6\u95f4\u5c04\u51fb\u4e00\u4e9b\u65b0\u7684\u57fa\u51c6\u3002 ", "note_en": "Intel is going to be disabling Transactional Synchronization Extensions (TSX) by default for various Skylake through Coffee Lake processors with forthcoming microcode updates. Yes, this does mean performance implications for workloads benefiting from TSX. This change has seemingly not been talked about much at all publicly and I just happened to become aware of it when looking through new kernel patches.\r   Transactional Synchronization Extensions (TSX) have been around since Haswell for hardware transactional memory support and going off Intel&#39;s own past numbers can be around 40% faster in specific workloads or as much 4~5 times faster in database transaction benchmarks. TSX issues have been found in the past such as a possible side channel timing attack that could lead to KASLR being defeated and CVE-2019-11135 (TSX Async Abort) for an MDS-style flaw. Now in 2021 Intel is disabling TSX by default across multiple families of Intel CPUs from Skylake through Coffee Lake.\r   No widespread announcement on the change seems to have been made as this is the first time I have heard of this deprecation/disabling and not mentioned on other news sites, but noticed it with the fresh round of patches going into the new  Linux 5.14 cycle. The Linux kernel is preparing for this microcode change as seen in the flow of new patches this morning for the 5.14 merge window.\r    A memory ordering issue is what is reportedly leading Intel to now deprecate TSX on various processors. There is  this Intel whitepaper updated this month that outlines the problem at length. As noted in the revision history, the memory ordering issue has been known to Intel since at least before October 2018 but only now in June 2021 are they pushing out microcode updates to disable TSX by default.\r   When going through the new Linux patches, there was reference to this  guidance from 12 June that outlines the intended change. That update was published a few days after  Intel&#39;s latest CPU microcode update earlier this month that did not note any TSX changes but noted other security updates. (Trying this latest microcode update on one of the affected CPUs still shows TSX as active with TAA mitigations still active.) With forthcoming microcode updates will effectively deprecate TSX for all Skylake Xeon CPUs prior to Stepping 5 (including Xeon D and 1st Gen Xeon Scalable), all 6th Gen Xeon E3-1500m v5 / E3-1200 v5 Skylake processors, all 7th/8th Gen Core and Pentium Kaby/Coffee/Whiskey CPUs prior to 0x8 stepping, and all 8th/9th Gen Core/Pentium Coffee Lake CPUs prior to 0xC stepping will be affected. That ultimately spans from various Skylake steppings through Coffee Lake; it was with 10th Gen Comet Lake and Ice Lake where TSX/TSX-NI was subsequently removed.\r    In addition to disabling TSX by default and force-aborting all RTM transactions by default, a new CPUID bit is being enumerated with the new microcode to indicate that the force aborting of RTM transactions. It&#39;s due to that new CPUID bit that the Linux kernel is seeing patches. Previously Linux and other operating systems applied a workaround for the TSX memory ordering issue but now when this feature is disabled, the kernel can drop said workaround. These patches are coming with the Linux 5.14 cycle and will likely be back-ported to stable too.\r    Intel disabling TSX via microcode updates isn&#39;t entirely new as back when the feature first appeared with Haswell they ended up selectively disabling the feature due to early bugs in that original implementation but now this effectively killing it off spans multiple product generations and years after software has been adapted to allow making use of Transactional Synchronization Extensions. TSX performance on Linux has already been degraded for newer processors as well stemming from  the TAA mitigations enacted back in late 2019. \r   Intel&#39;s guidance this month around the forthcoming microcode change does acknowledge &#34; Workloads that were benefited from Intel TSX might experience a change in performance.&#34; Thus time to fire up some new benchmarks.", "posttime": "2021-06-29 22:50:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ed8\u8ba4,disable,tsx", "title": "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cIntel\u9ed8\u8ba4\u7981\u7528TSX\uff0c\u5e76\u4f7f\u7528\u65b0\u7684\u5fae\u7801\u66f4\u591a\u7684CPU ", "title_en": "Intel to disable TSX by default on more CPUs with new microcode", "transed": 1, "url": "https://www.phoronix.com/scan.php?page=news_item&px=Intel-TSX-Off-New-Microcode", "via": "", "real_tags": ["\u9ed8\u8ba4", "disable", "tsx"]}, {"category": "", "categoryclass": "", "imagename": "7a53792b19d63d2ee4aeb74637d0edae.jpg", "infoid": 1068477, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\uff0c\u6211\u4eec\u6b63\u5728\u5411Windows 11\u53d1\u5e03\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u5185\u5e55\u5efa\u7acb\uff0c\u6211\u4eec\u671f\u5f85\u7740\u60a8\u7684\u6d1e\u5bdf\u529b\u6765\u5b89\u88c5\u548c\u4f7f\u7528\u5404\u79cdPC\u3002\u4e0a\u5468\u7684\u4ecb\u7ecd11\u4ecb\u7ecd\u4e86\u6211\u4eec\u5728\u4e0b\u4e00\u4ee3Windows\u7684\u6388\u6743\u4eba\u4eec\u7684\u65c5\u7a0b\u4e2d\u7684\u7b2c\u4e00\u6b65\u3002\u901a\u8fc7\u65b0\u4e00\u4ee3\uff0c\u6709\u673a\u4f1a\u8c03\u6574\u8f6f\u4ef6\u548c\u786c\u4ef6\uff0c\u4ee5\u8ddf\u4e0a\u4eca\u5929\u548c\u672a\u6765\u4eba\u6c11\u7684\u8ba1\u7b97\u9700\u6c42\u3002\n \u4eca\u5929\u7684\u5e16\u5b50\u7684\u610f\u56fe\u662f\u8981\u627f\u8ba4\u5e76\u6f84\u6e05\u6211\u4eec\u7684PC\u5065\u5eb7\u68c0\u67e5\u5de5\u5177\u5f15\u8d77\u7684\u6df7\u6dc6\uff0c\u5206\u4eab\u66f4\u591a\u7ec6\u8282\uff0c\u4e86\u89e3\u4e3a\u4ec0\u4e48\u6211\u4eec\u66f4\u65b0Windows 11\u7684\u7cfb\u7edf\u8981\u6c42\uff0c\u5e76\u4e3a\u6211\u4eec\u7684\u5b66\u4e60\u548c\u8c03\u6574\u65b9\u5f0f\u8bbe\u7f6e\u8def\u5f84\u3002\u5728\u4e0b\u9762\u60a8\u5c06\u6839\u636e\u8be5\u53cd\u9988\u53d1\u73b0\u6211\u4eec\u6b63\u5728\u8fdb\u884c\u7684\u66f4\u6539\uff0c\u5305\u62ec\u786e\u4fdd\u6211\u4eec\u6709\u80fd\u529b\u5728\u7b2c7\u4ee3\u5904\u7406\u5668\u4e0a\u5b89\u88c5Windows 11\uff0c\u4e3a\u6211\u4eec\u63d0\u4f9b\u6709\u5173\u6027\u80fd\u548c\u5b89\u5168\u6027\u7684\u66f4\u591a\u6570\u636e\uff0c\u66f4\u65b0\u6211\u4eec\u7684PC\u8fd0\u884c\u72b6\u51b5\u68c0\u67e5\u5e94\u7528\u7a0b\u5e8f\u4ee5\u63d0\u4f9b\u66f4\u591a\u7684\u6e05\u6670\u5ea6\uff0c\u5e76\u4e3a\u6211\u4eec\u51b3\u5b9a\u80cc\u540e\u7684\u539f\u5219\u63d0\u4f9b\u66f4\u591a\u6280\u672f\u7ec6\u8282\u3002\u4f7f\u7528Windows 11\uff0c\u6211\u4eec\u4e13\u6ce8\u4e8e\u589e\u52a0\u5b89\u5168\u6027\uff0c\u63d0\u9ad8\u53ef\u9760\u6027\u548c\u786e\u4fdd\u517c\u5bb9\u6027\u3002\u8fd9\u662f\u63a8\u52a8\u6211\u4eec\u7684\u51b3\u5b9a\u7684\u539f\u56e0\u3002\n  Windows 11\u88ab\u8bbe\u8ba1\u548c\u6784\u5efa\u4e3a\u4e00\u5957\u5b8c\u6574\u7684\u7ecf\u9a8c\uff0c\u89e3\u9501\u4e86PC\u7684\u5168\u90e8\u7535\u529b\u6211\u4eec\u7684\u5ba2\u6237\u5df2\u7ecf\u4f9d\u9760\uff0c\u5305\u62ec\u5728\u5b89\u5168\u6027\uff0c\u53ef\u9760\u6027\uff0c\u517c\u5bb9\u6027\uff0c\u89c6\u9891\u4f1a\u8bae\uff0c\u591a\u4efb\u52a1\uff0c\u64ad\u653e\uff0c\u521b\u9020\uff0c\u5efa\u7b51\uff0c\u5b66\u4e60\u548c\u66f4\u591a\u3002\u6211\u4eec\u9700\u8981\u6700\u4f4e\u7684\u7cfb\u7edf\u8981\u6c42\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u8c03\u6574\u8f6f\u4ef6\u548c\u786c\u4ef6\uff0c\u4ee5\u8ddf\u4e0a\u4eba\u4eec\u7684\u671f\u671b\uff0c\u9700\u6c42\u548c\u5229\u7528PC\u7684\u771f\u6b63\u4ef7\u503c\u548c\u529b\u91cf\uff0c\u4ee5\u63d0\u4f9b\u6700\u4f73\u7ecf\u9a8c\uff0c\u73b0\u5728\u548c\u5c06\u6765\u63d0\u4f9b\u6700\u4f73\u4f53\u9a8c\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u88ab\u4ee5\u4e0b\u539f\u5219\u4e3a\u6307\u5bfc\uff1a\n \u5b89\u5168\u3002 Windows 11\u901a\u8fc7\u8981\u6c42\u786c\u4ef6\u4e3a\u5b89\u5168\u6027\u63d0\u9ad8\u680f\uff0c\u8be5\u786c\u4ef6\u53ef\u4ee5\u542f\u7528Windows Hello\uff0c\u8bbe\u5907\u52a0\u5bc6\uff0c\u57fa\u4e8e\u865a\u62df\u5316\u7684\u5b89\u5168\u6027\uff08VBS\uff09\uff0c\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u4fdd\u62a4\u4ee3\u7801\u5b8c\u6574\u6027\uff08HVCI\uff09\u548c\u5b89\u5168\u5f15\u5bfc\u3002\u8fd9\u4e9b\u529f\u80fd\u7684\u7ec4\u5408\u5df2\u88ab\u8bc1\u660e\u5728\u6d4b\u8bd5\u7684\u8bbe\u5907\u4e0a\u5c06\u6076\u610f\u8f6f\u4ef6\u51cf\u5c1160\uff05\u3002\u4e3a\u4e86\u6ee1\u8db3\u539f\u7406\uff0c\u6240\u6709Windows 11\u652f\u6301\u7684CPU\u90fd\u6709\u4e00\u4e2a\u5d4c\u5165\u5f0fTPM\uff0c\u652f\u6301\u5b89\u5168\u5f15\u5bfc\uff0c\u652f\u6301VB\u548c\u7279\u5b9a\u7684VBS\u529f\u80fd\u3002\n \u53ef\u9760\u6027\u3002\u5347\u7ea7\u5230Windows 11\u7684\u8bbe\u5907\u5c06\u5904\u4e8e\u652f\u6301\u4e14\u53ef\u9760\u7684\u72b6\u6001\u3002\u901a\u8fc7\u9009\u62e9\u91c7\u7528\u65b0Windows\u9a71\u52a8\u7a0b\u5e8f\u6a21\u578b\u7684CPU\uff0c\u5e76\u7531\u6211\u4eec\u7684OEM\u548cSilicon Partners\u63d0\u4f9b\u652f\u6301\uff0c\u4ed6\u4eec\u5b9e\u73b0\u4e8699.8\uff05\u7684\u5d29\u6e83\u4f53\u9a8c\u3002\n \u517c\u5bb9\u6027\u3002 Windows 11\u65e8\u5728\u4e0e\u60a8\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u517c\u5bb9\u3002\u5b83\u5177\u6709\uff06gt; 1Ghz\uff0c2\u6838\u5904\u7406\u5668\uff0c4GB\u5185\u5b58\u548c64GB\u5b58\u50a8\u7684\u57fa\u672c\u9762\uff0c\u4e0e\u6211\u4eec\u7684\u529e\u516c\u5ba4\u548c\u5fae\u8f6f\u56e2\u961f\u7684\u6700\u4f4e\u7cfb\u7edf\u8981\u6c42\u4fdd\u6301\u4e00\u81f4\u3002\n \u4f7f\u7528\u4e0a\u8ff0\u539f\u7406\uff0c\u6211\u4eec\u76f8\u4fe1\u5728\u82f1\u7279\u5c14\u7b2c8\u4ee3\u5904\u7406\u5668\u548cAMD ZEN 2\u4e0a\u8fd0\u884c\u7684\u8bbe\u5907\u4ee5\u53caQualcomm 7\u548c8\u7cfb\u5217\u5c06\u7b26\u5408Windows 11\u7684\u5b89\u5168\u6027\u548c\u53ef\u9760\u6027\u548c\u6700\u4f4e\u7cfb\u7edf\u8981\u6c42\u7684\u539f\u5219\u3002\u6211\u4eec\u91ca\u653e\u5230Windows\u5185\u90e8\u4eba\u5458\u548c\u6211\u4eec\u7684OEM\u5408\u4f5c\uff0c\u6211\u4eec\u5c06\u6d4b\u8bd5\u8bc6\u522b\u5728\u82f1\u7279\u5c14\u7b2c7\u4ee3\u548cAMD ZEN 1\u4e0a\u8fd0\u884c\u7684\u8bbe\u5907\uff0c\u53ef\u4ee5\u6ee1\u8db3\u6211\u4eec\u7684\u539f\u5219\u3002\u6211\u4eec\u81f4\u529b\u4e8e\u4e0e\u60a8\u5206\u4eab\u66f4\u65b0\uff0c\u5e76\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4ee5\u53ca\u5206\u4eab\u5176\u4ed6\u6280\u672f\u535a\u5ba2\u7684\u7ed3\u679c\u3002 \n\u901a\u8fc7\u4ee5\u4e0b\u6700\u4f4e\u7cfb\u7edf\u8981\u6c42\uff0cPC\u8fd0\u884c\u72b6\u51b5\u68c0\u67e5\u5e94\u7528\u7a0b\u5e8f\u65e8\u5728\u5e2e\u52a9\u4eba\u4eec\u68c0\u67e5\u4ed6\u4eec\u5f53\u524d\u7684Windows 10 PC\u662f\u5426\u53ef\u4ee5\u5347\u7ea7\u5230Windows 11.\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u627f\u8ba4\u5b83\u6ca1\u6709\u5b8c\u5168\u51c6\u5907\u5206\u4eab\u8be5\u7ea7\u522b\u60a8\u9884\u8ba1Windows 10 PC\u7684\u8be6\u7ec6\u4fe1\u606f\u6216\u51c6\u786e\u6027\u60a8\u9884\u8ba1Windows 10 PC\u4e0d\u7b26\u5408\u5347\u7ea7\u8981\u6c42\u3002\u6211\u4eec\u6682\u65f6\u5220\u9664\u8be5\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u6211\u4eec\u7684\u56e2\u961f\u53ef\u4ee5\u89e3\u51b3\u53cd\u9988\u3002\u6211\u4eec\u5c06\u5728\u7ebf\u5907\u4efd\uff0c\u51c6\u5907\u666e\u904d\u53ef\u7528\u6027\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u8bbf\u95ee\u6211\u4eec\u7684\u6700\u4f4e\u7cfb\u7edf\u8981\u6c42\u9875\u9762\u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\n  \u4eca\u5929\uff0c\u6211\u4eec\u5c06\u91ca\u653eWindows 11\u7684\u7b2c\u4e00\u4e2a\u9884\u89c8\u7248\u5230Windows Insider\u793e\u533a\u3002\u5728\u652f\u6301Windows 11\u7cfb\u7edf\u8981\u6c42\u4e2d\uff0c\u6211\u4eec\u5c06\u680f\u8bbe\u7f6e\u4e3a\u5728Windows Insider\u7a0b\u5e8f\u4e2d\u9884\u89c8\u4ee5\u5339\u914dWindows 11\u7684\u6700\u5c0f\u7cfb\u7edf\u8981\u6c42\uff0c\u4f46TPM 2.0\u548cCPU\u7cfb\u5217/\u578b\u53f7\u7684\u4f8b\u5916\u3002\u901a\u8fc7\u5728Windows Insider\u8ba1\u5212\u4e2d\u63d0\u4f9b\u9884\u89c8\u7248\u672c\uff0c\u6211\u4eec\u5c06\u5b66\u4e60Windows 11\u5982\u4f55\u66f4\u5168\u9762\u5730\u8de8CPU\u6a21\u578b\u8fdb\u884cWindows 11\uff0c\u6211\u4eec\u5c06\u6765\u5e94\u5728\u672a\u6765\u7684\u6700\u4f4e\u7cfb\u7edf\u8981\u6c42\u4e0a\u8fdb\u884c\u4efb\u4f55\u8c03\u6574\u3002\u6211\u4eec\u671f\u5f85\u4ea7\u54c1\u53cd\u9988\u548c\u5b66\u4e60\uff0c\u56e0\u4e3a\u8fd9\u662f\u51c6\u5907Windows 11\u7684\u4e00\u4e2a\u91cd\u8981\u6b65\u9aa4\uff0c\u4ee5\u4fbf\u4eca\u5e74\u666e\u901a\u53ef\u7528\u6027 - \u611f\u8c22Windows Inside\u793e\u533a\uff0c\u4e3a\u60a8\u5174\u594b\u548c\u53cd\u9988\u5230\u76ee\u524d\u4e3a\u6b62\uff01 ", "note_en": "Today we\u2019re releasing our first  Insider build for Windows 11, and we\u2019re looking forward to the insight that comes from you installing and using on a variety of your PCs. Last week\u2019s  introduction of Windows 11 signaled the first step on our journey to empower people with the next generation of Windows. With a new generation comes an opportunity to adapt software and hardware to keep pace with people\u2019s computing needs today and in the future.\n The intention of today\u2019s post is to acknowledge and clarify the confusion caused by our PC Health Check tool, share more details as to why we updated the system requirements for Windows 11 and set the path for how we will learn and adjust. Below you will find changes we are making based on that feedback, including ensuring we have the ability for Windows Insiders to install Windows 11 on 7th generation processors to give us more data about performance and security, updating our PC Health check app to provide more clarity, and committing to more technical detail on the principles behind our decisions. With Windows 11, we are focused on increasing security, improving reliability, and ensuring compatibility. This is what drives our decisions.\n  Windows 11 is designed and built as a complete set of experiences, unlocking the full power of the PC our customers have come to rely on, including in areas like security, reliability, compatibility, video conferencing, multitasking, playing, creating, building, learning and more. We need a minimum system requirement that enables us to adapt software and hardware to keep pace with people\u2019s expectations, needs and harness the true value and power of the PC to deliver the best experiences, now and in the future. To do that, we were guided by the following principles:\n Security. Windows 11 raises the bar for security by requiring hardware that can enable protections like Windows Hello, Device Encryption, virtualization-based security (VBS), hypervisor-protected code integrity (HVCI) and Secure Boot. The combination of these features has been shown to  reduce malware by 60% on tested devices. To meet the principle, all Windows 11 supported CPUs have an embedded TPM, support secure boot, and support VBS and specific  VBS capabilities.\n Reliability. Devices upgraded to Windows 11 will be in a supported and reliable state. By choosing CPUs that have adopted the new  Windows Driver model and are supported by our OEM and silicon partners who are achieving a 99.8% crash free experience.\n Compatibility. Windows 11 is designed to be compatible with the apps you use. It has the fundamentals of &gt;1GHz, 2-core processors, 4GB memory, and 64GB of storage, aligning with our minimum system requirements for Office and Microsoft Teams.\n Using the principles above, we are confident that devices running on Intel 8th generation processors and AMD Zen 2 as well as Qualcomm 7 and 8 Series will meet our principles around security and reliability and minimum system requirements for Windows 11. As we release to Windows Insiders and partner with our OEMs, we will test to identify devices running on Intel 7th generation and AMD Zen 1 that may meet our principles. We\u2019re committed to sharing updates with you on the results of our testing over time, as well as sharing additional technical blogs.\n  With these minimum system requirements in mind, the PC Health Check app was intended to help people check if their current Windows 10 PC could upgrade to Windows 11. Based on the feedback so far, we acknowledge that it was not fully prepared to share the level of detail or accuracy you expected from us on why a Windows 10 PC doesn\u2019t meet upgrade requirements. We are temporarily removing the app so that our teams can address the feedback. We will get it back online in preparation for general availability this fall. In the meantime, you can visit our  minimum system requirements page here to learn more.\n  Today, we\u2019re releasing the  first preview build of Windows 11 to the Windows Insider community. In support of the Windows 11 system requirements, we\u2019ve set the bar for  previewing in our Windows Insider Program to match the minimum system requirements for Windows 11, with the exception for TPM 2.0 and CPU family/model. By providing preview builds to the diverse systems in our Windows Insider Program, we will learn how Windows 11 performs across CPU models more comprehensively, informing any adjustments we should make to our minimum system requirements in the future. We look forward to the product feedback and learnings as it\u2019s an important step to prepare Windows 11 for general availability this year \u2013 thank you to the Windows Insider community for your excitement and feedback thus far!", "posttime": "2021-06-29 22:45:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "windows,\u7cfb\u7edf,system", "title": "\u66f4\u65b0Windows 11\u6700\u4f4e\u7cfb\u7edf\u8981\u6c42 ", "title_en": "Update on Windows 11 minimum system requirements", "transed": 1, "url": "https://blogs.windows.com/windows-insider/2021/06/28/update-on-windows-11-minimum-system-requirements/", "via": "", "real_tags": ["windows", "\u7cfb\u7edf", "system"]}, {"category": "", "categoryclass": "", "imagename": "ab44f4c3edc604980a93c0aa5664efbb.png", "infoid": 1068476, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5199\u81ea\u5df1\u7684TCP / IP\u5806\u6808\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u4ee4\u4eba\u751f\u754f\u7684\u4efb\u52a1\u3002\u5b9e\u9645\u4e0a\uff0cTCP\u79ef\u7d2f\u4e86\u8d85\u8fc7\u4e09\u5341\u5e74\u7684\u5bff\u547d\u7684\u8bb8\u591a\u89c4\u683c\u3002\u7136\u800c\uff0c\u6838\u5fc3\u89c4\u8303\u770b\u4f3c\u7d27\u51d11  -  TCP\u6807\u9898\u89e3\u6790\u7684\u91cd\u8981\u90e8\u5206\uff0c\u72b6\u6001\u673a\uff0c\u62e5\u585e\u63a7\u5236\u548c\u91cd\u4f20\u8d85\u65f6\u8ba1\u7b97\u3002\n \u5206\u522b\u662f\u6700\u5e38\u89c1\u7684\u7b2c2\u5c42\u548c\u7b2c3\u5c42\u534f\u8bae\uff0c\u4ee5\u592a\u7f51\u548cIP\uff0c\u4e0eTCP\u7684\u590d\u6742\u6027\u76f8\u6bd4\uff0c\u82cd\u767d\u3002\u5728\u6b64\u535a\u5ba2\u7cfb\u5217\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3aLinux\u5b9e\u65bd\u6700\u5c0f\u7684\u7528\u6237\u7a7a\u95f4TCP / IP\u5806\u6808\u3002\n \u8fd9\u4e9b\u5e16\u5b50\u7684\u76ee\u7684\u548c\u751f\u6210\u7684\u8f6f\u4ef6\u7eaf\u7cb9\u662f\u6559\u80b2 - \u4ee5\u66f4\u6df1\u5c42\u6b21\u7684\u7ea7\u522b\u5b66\u4e60\u7f51\u7edc\u548c\u7cfb\u7edf\u7f16\u7a0b\u3002\n    \u8981\u4eceLinux\u5185\u6838\u62e6\u622a\u4f4e\u7ea7\u7f51\u7edc\u6d41\u91cf\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Linux Tap\u8bbe\u5907\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u7f51\u7edc\u7528\u6237\u7a7a\u95f4\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u4f7f\u7528TUN / TAP\u8bbe\u5907\u5206\u522b\u7528\u4e8e\u64cd\u7eb5L3 / L2\u6d41\u91cf\u3002\u4e00\u4e2a\u6d41\u884c\u7684\u4f8b\u5b50\u662f\u96a7\u9053\uff0c\u5176\u4e2d\u6570\u636e\u5305\u5728\u53e6\u4e00\u4e2a\u6570\u636e\u5305\u7684\u6709\u6548\u8f7d\u8377\u5185\u5305\u88c5\u3002\n TUN / TAP\u8bbe\u5907\u7684\u4f18\u52bf\u5728\u4e8e\u5b83\u4eec\u6613\u4e8e\u5728\u7528\u6237\u7a7a\u95f4\u7a0b\u5e8f\u4e2d\u8bbe\u7f6e\uff0c\u5e76\u4e14\u5b83\u4eec\u5df2\u5728\u591a\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982OpenVPN\u3002\n \u6b63\u5982\u6211\u4eec\u60f3\u8981\u4ece\u7b2c2\u5c42\u6784\u5efa\u7f51\u7edc\u5806\u6808\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u70b9\u51fb\u8bbe\u5907\u3002\u6211\u4eec\u5c06\u5176\u5b9e\u4f8b\u5316\uff1a\n / * *\u4ece\u5185\u6838\u6587\u6863/ networking / tuntap.txt * / int tun_alloc\uff08char * dev\uff09{struct ifreq ifr; int fd\uff0cerr; if\uff08\uff08fd =\u6253\u5f00\uff08\uff06\uff0334; / dev / net / tap / tap\uff06\uff0334;\uff0co_rdwr\uff09\uff09\uff06lt; 0\uff09{print_error\uff08\uff06\uff0334;\u65e0\u6cd5\u6253\u5f00tun / tap dev\uff06\uff0334;\uff09;\u51fa\u53e3\uff081\uff09; }\u6e05\u9664\uff08IFR\uff09; / *\u6807\u5fd7\uff1aIFF_TUN  -  TUN\u8bbe\u5907\uff08\u65e0\u4ee5\u592a\u7f51\u6807\u9898\uff09* IFF_TAP  - \u70b9\u51fb\u8bbe\u5907* * IFF_NO_PI  - \u4e0d\u63d0\u4f9b\u6570\u636e\u5305\u4fe1\u606f* / IFR\u3002 ifr_flags = iff_tap | iff_no_pi; if\uff08* dev\uff09{strncpy\uff08ifr\u3002ifr_name\uff0cdev\uff0cifnamsiz\uff09;\u5982\u679c\uff08\uff08eroctl\uff08fd\uff0ctunsetiff\uff0c\uff08void *\uff09\uff06amp; ifr\uff09\uff09\uff06lt; 0\uff09{print_error\uff08\uff06\uff0334; err\uff1a\u4e0d\u80fdioctl tun\uff1a\uff05s \\ n\uff06\uff0334;\uff0csterror\uff08 errno\uff09\uff09;\u5173\u95ed\uff08FD\uff09;\u8fd4\u56de\u9519\u8bef; strcpy\uff08dev\uff0cifr\u3002ifr_name\uff09;\u8fd4\u56deFD; } \n\u5728\u6b64\u4e4b\u540e\uff0c\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26FD\u53ef\u7528\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u865a\u62df\u8bbe\u5907\u7684\u4ee5\u592a\u7f51\u7f13\u51b2\u533a\u3002\n FLAG IFF_NO_PI\u5728\u6b64\u5904\u81f3\u5173\u91cd\u8981\uff0c\u5426\u5219\u6211\u4eec\u6700\u7ec8\u4f1a\u6709\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u5305\u4fe1\u606f\u5411\u4ee5\u592a\u7f51\u5e27\u3002\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u67e5\u770b\u6838\u5fc3\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u7684\u5185\u6838\u6e90\u4ee3\u7801\uff0c\u5e76\u9a8c\u8bc1\u6b64\u64cd\u4f5c\u3002\n  \u4f17\u591a\u4e0d\u540c\u7684\u4ee5\u592a\u7f51\u7f51\u7edc\u6280\u672f\u662f\u5728\u5c40\u57df\u7f51\uff08LAN\uff09\u4e2d\u8fde\u63a5\u8ba1\u7b97\u673a\u7684\u9aa8\u5e72\u3002\u4e0e\u6240\u6709\u7269\u7406\u6280\u672f\u4e00\u6837\uff0c\u4ee5\u592a\u7f51\u6807\u51c6\u4ece1980\u5e74\u7531\u6570\u5b57\u8bbe\u5907\u516c\u53f8\uff0c\u82f1\u7279\u5c14\u548c\u65bd\u4e50\u53d1\u5e03\u7684\u7b2c\u4e00\u4e2a\u7248\u672c2\u3002\n \u4ee5\u592a\u7f51\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u5728\u5f53\u4eca\u6807\u51c6\u4e2d\u7f13\u6162 - \u7ea6\u4e3a10MB / s\uff0c\u5b83\u4f7f\u7528\u4e86\u534a\u53cc\u5de5\u901a\u4fe1\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u8981\u4e48\u53d1\u9001\u6216\u63a5\u6536\u6570\u636e\uff0c\u4f46\u4e0d\u540c\u65f6\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5fc5\u987b\u5408\u5e76\u5a92\u4f53\u8bbf\u95ee\u63a7\u5236\uff08MAC\uff09\u534f\u8bae\u4ee5\u7ec4\u7ec7\u6570\u636e\u6d41\u3002\u5373\u4f7f\u5230\u4e86\u8fd9\u4e00\u5929\uff0c\u5982\u679c\u5728\u534a\u53cc\u5de5\u6a21\u5f0f\u4e0b\u8fd0\u884c\u4ee5\u592a\u7f51\u63a5\u53e3\uff0c\u5219\u9700\u8981\u4f7f\u7528\u78b0\u649e\u68c0\u6d4b\uff08CSMA / CD\uff09\u7684\u591a\u6b21\u8bbf\u95ee\u3002\n 100Base-T\u4ee5\u592a\u7f51\u6807\u51c6\u4f7f\u7528\u53cc\u7ede\u7ebf\u63a5\u7ebf\u7684\u53d1\u660e\uff0c\u5b9e\u73b0\u5168\u53cc\u5de5\u901a\u4fe1\u548c\u8f83\u9ad8\u7684\u541e\u5410\u91cf\u901f\u5ea6\u3002\u6b64\u5916\uff0c\u4ee5\u592a\u7f51\u4ea4\u6362\u673a\u7684\u666e\u53ca\u540c\u65f6\u589e\u52a0\uff0c\u4f7fCSMA / CD\u5f88\u5927\u9648\u65e7\u3002\n  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u67e5\u770b\u4ee5\u592a\u7f51\u5e27\u5934\u3002\u5b83\u53ef\u4ee5\u8ddf\u8e2aC\u7ed3\u6784\u58f0\u660e\uff1a\n #include\uff06lt; linux / if_ether.h\uff06gt; struct eth_hdr {unsigned char dmac [6]; unsigned char smac [6]; uint16_t\u4ee5\u592a\u7f51; unsigned char payload []; } __attribute__\uff08\uff08\u5305\u88c5\uff09\uff09; \nDMAC\u548cSMAC\u662f\u975e\u5e38\u81ea\u6211\u89e3\u91ca\u7684\u9886\u57df\u3002\u5b83\u4eec\u5305\u542b\u4f20\u9001\u65b9\u7684MAC\u5730\u5740\uff08\u5206\u522b\u4e3a\u76ee\u7684\u5730\u548c\u6765\u6e90\uff09\u3002\n \u91cd\u8f7d\u7684\u5b57\u6bb5\u4ee5\u592a\u7f51\u662f\u4e00\u4e2a2\u4e2a\u516b\u4f4d\u5b57\u8282\u5b57\u6bb5\uff0c\u5373\u6839\u636e\u5176\u503c\uff0c\u6307\u793a\u6709\u6548\u8f7d\u8377\u7684\u957f\u5ea6\u6216\u7c7b\u578b\u3002\u5177\u4f53\u800c\u8a00\uff0c\u5982\u679c\u5b57\u6bb5\u7684\u503c\u66f4\u5927\u6216\u7b49\u4e8e1536\uff0c\u5219\u8be5\u5b57\u6bb5\u5305\u542b\u6709\u6548\u8f7d\u8377\u7684\u7c7b\u578b\uff08\u4f8b\u5982IPv4\uff0cARP\uff09\u3002\u5982\u679c\u503c\u5c0f\u4e8e\u8be5\u503c\uff0c\u5219\u5b83\u5305\u542b\u6709\u6548\u8f7d\u8377\u7684\u957f\u5ea6\u3002\n \u5728\u7c7b\u578b\u5b57\u6bb5\u4e4b\u540e\uff0c\u4ee5\u592a\u7f51\u5e27\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u6807\u7b7e\u3002\u8fd9\u4e9b\u6807\u7b7e\u53ef\u7528\u4e8e\u63cf\u8ff0\u865a\u62dfLAN\uff08VLAN\uff09\u6216\u5e27\u7684\u670d\u52a1\u8d28\u91cf\uff08QoS\uff09\u7c7b\u578b\u3002\u4ee5\u592a\u7f51\u5e27\u6807\u8bb0\u88ab\u6392\u9664\u5728\u6211\u4eec\u7684\u5b9e\u73b0\u4e4b\u5916\uff0c\u56e0\u6b64\u76f8\u5e94\u7684\u5b57\u6bb5\u4e5f\u4e0d\u4f1a\u663e\u793a\u5728\u6211\u4eec\u7684\u534f\u8bae\u58f0\u660e\u4e2d\u3002\n \u73b0\u573a\u6709\u6548\u8d1f\u8f7d\u5305\u542b\u6307\u5411\u4ee5\u592a\u7f51\u5e27\u7684\u6709\u6548\u8f7d\u8377\u7684\u6307\u9488\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5c06\u5305\u542bARP\u6216IPv4\u6570\u636e\u5305\u3002\u5982\u679c\u6709\u6548\u8f7d\u8377\u957f\u5ea6\u5c0f\u4e8e\u6240\u9700\u768448\u5b57\u8282\uff08\u6ca1\u6709\u6807\u7b7e\uff09\uff0c\u5219\u586b\u5145\u5b57\u8282\u5c06\u9644\u52a0\u5230\u6709\u6548\u8f7d\u8377\u7684\u672b\u5c3e\u4ee5\u6ee1\u8db3\u8981\u6c42\u3002\n \u6211\u4eec\u8fd8\u5305\u62ecIF_ETHER.H Linux\u6807\u9898\uff0c\u4ee5\u63d0\u4f9b\u4ee5\u592a\u7f51\u7c7b\u578b\u548c\u5176\u5341\u516d\u8fdb\u5236\u503c\u4e4b\u95f4\u7684\u6620\u5c04\u3002\n \u6700\u540e\uff0c\u4ee5\u592a\u7f51\u5e27\u683c\u5f0f\u8fd8\u5305\u62ec\u7ed3\u5c3e\u7684\u5e27\u68c0\u67e5\u5e8f\u5217\u5b57\u6bb5\uff0c\u5176\u4e0e\u5faa\u73af\u5197\u4f59\u6821\u9a8c\uff08CRC\uff09\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u68c0\u67e5\u5e27\u7684\u5b8c\u6574\u6027\u3002\u6211\u4eec\u5c06\u5728\u6211\u4eec\u7684\u5b9e\u65bd\u4e2d\u7701\u7565\u5904\u7406\u8be5\u9886\u57df\u3002\n  \u5728STRACH\u7684\u58f0\u660e\u4e2d\u5305\u88c5\u7684\u5c5e\u6027\u662f\u5b9e\u73b0\u8be6\u7ec6\u4fe1\u606f - \u5b83\u7528\u4e8e\u6307\u793aGNU C\u7f16\u8bd1\u5668\u4e0d\u4f18\u5316\u4e0e\u586b\u5145\u5b57\u8282\u7684\u6570\u636e\u5bf9\u9f50\u7684\u7ed3\u6784\u5b58\u50a8\u5668\u5e03\u5c404.\u4f7f\u7528\u6b64\u5c5e\u6027\u7eaf\u7cb9\u7b26\u5408\u6211\u4eec\u7684\u65b9\u5f0f\u201c\u89e3\u6790\u201c\u534f\u8bae\u7f13\u51b2\u533a\uff0c\u8be5\u534f\u8bae\u7f13\u51b2\u533a\u53ea\u662f\u4f7f\u7528\u6b63\u786e\u7684\u534f\u8bae\u7ed3\u6784\u5728\u6570\u636e\u7f13\u51b2\u533a\u4e0a\u4f20\u9012\u7684\u7c7b\u578b\uff1a \n\u4e00\u4e2a\u4fbf\u643a\u5f0f\uff0c\u5c3d\u7ba1\u7a0d\u5fae\u66f4\u52a0\u8d39\u529b\u7684\u65b9\u6cd5\uff0c\u662f\u624b\u52a8\u5e8f\u5217\u5316\u534f\u8bae\u6570\u636e\u3002\u8fd9\u6837\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u81ea\u7531\u5730\u6dfb\u52a0\u586b\u5145\u5b57\u8282\u4ee5\u66f4\u597d\u5730\u7b26\u5408\u4e0d\u540c\u7684\u5904\u7406\u5668\u7684\u6570\u636e\u5bf9\u9f50\u8981\u6c42\u3002\n  if\uff08tun_read\uff08buf\uff0cbuflen\uff09\uff06lt; 0\uff09{print_error\uff08\uff06\uff0334; err\uff1a\u4ecetun_fd\u8bfb\u53d6\uff1a\uff05s \\ n\uff06\uff0334;\uff0csterror\uff08errno\uff09\uff09; struct eth_hdr * hdr = init_eth_hdr\uff08buf\uff09; handle_frame\uff08\uff06amp; netdev\uff0chdr\uff09;\n handle_frame\u51fd\u6570\u53ea\u67e5\u770b\u4ee5\u592a\u7f51\u6807\u9898\u7684EtherType\u5b57\u6bb5\uff0c\u5e76\u6839\u636e\u503c\u51b3\u5b9a\u5176\u4e0b\u4e00\u4e2a\u64cd\u4f5c\u3002\n  \u5730\u5740\u89e3\u6790\u534f\u8bae\uff08ARP\uff09\u7528\u4e8e\u5c0648\u4f4d\u4ee5\u592a\u7f51\u5730\u5740\uff08MAC\u5730\u5740\uff09\u52a8\u6001\u6620\u5c04\u5230\u534f\u8bae\u5730\u5740\uff08\u4f8b\u5982IPv4\u5730\u5740\uff09\u3002\u8fd9\u91cc\u7684\u5173\u952e\u662f\u901a\u8fc7ARP\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u4e0d\u540c\u7684L3\u534f\u8bae\uff1a\u4e0d\u4ec5\u4ec5\u662fIPv4\uff0c\u800c\u662f\u6df7\u6c8c\u7b49\u5176\u4ed6\u534f\u8bae\uff0c\u5b83\u58f0\u660e\u4e8616\u4f4d\u534f\u8bae\u5730\u5740\u3002\n \u901a\u5e38\u7684\u60c5\u51b5\u662f\u60a8\u77e5\u9053LAN\u4e2d\u67d0\u4e9b\u670d\u52a1\u7684IP\u5730\u5740\uff0c\u4f46\u8981\u5efa\u7acb\u5b9e\u9645\u901a\u4fe1\uff0c\u8fd8\u9700\u8981\u77e5\u9053\u786c\u4ef6\u5730\u5740\uff08MAC\uff09\u3002\u56e0\u6b64\uff0cARP\u7528\u4e8e\u5e7f\u64ad\u548c\u67e5\u8be2\u7f51\u7edc\uff0c\u8be2\u95eeIP\u5730\u5740\u7684\u6240\u6709\u8005\u62a5\u544a\u5176\u786c\u4ef6\u5730\u5740\u3002\n  struct arp_hdr {uint16_t hwtype; UINT16_T\u578b\u710a\u63a5; unsigned char hwsize;\u672a\u7b7e\u540d\u7684\u70ad\u8fb1; UINT16_T OPCODE; unsigned char\u6570\u636e[]; } __attribute__\uff08\uff08\u5305\u88c5\uff09\uff09;\n ARP\u6807\u9898\uff08ARP_HDR\uff09\u5305\u542b2-OCTET HWTYPE\uff0c\u8be5HWTYPE\u786e\u5b9a\u4f7f\u7528\u7684\u94fe\u8def\u5c42\u7c7b\u578b\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4ee5\u592a\u7f51\uff0c\u5b9e\u9645\u503c\u4e3a0x0001\u3002 \n2-octet Prolype\u5b57\u6bb5\u8868\u793a\u534f\u8bae\u7c7b\u578b\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662fIPv4\uff0c\u5b83\u4e0e\u503c0x0800\u901a\u4fe1\u3002\n HWSIZE\u548cPRESIZE FIALES\u7684\u5927\u5c0f\u5747\u4e3a1\u516b\u4f4d\u5b57\u8282\uff0c\u5b83\u4eec\u5206\u522b\u5305\u542b\u786c\u4ef6\u548c\u534f\u8bae\u5b57\u6bb5\u7684\u5927\u5c0f\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0cMAC\u5730\u5740\u4e3a6\u4e2a\u5b57\u8282\uff0cIP\u5730\u5740\u4e3a4\u4e2a\u5b57\u8282\u3002\n 2-octet\u5b57\u6bb5\u64cd\u4f5c\u7801\u58f0\u660eARP\u6d88\u606f\u7684\u7c7b\u578b\u3002\u5b83\u53ef\u4ee5\u662fARP\u8bf7\u6c42\uff081\uff09\uff0cARP\u56de\u590d\uff082\uff09\uff0cRARP\u8bf7\u6c42\uff083\uff09\u6216RARP\u56de\u590d\uff084\uff09\u3002\n \u6570\u636e\u5b57\u6bb5\u5305\u542bARP\u6d88\u606f\u7684\u5b9e\u9645\u6709\u6548\u8f7d\u8377\uff0c\u5e76\u4e14\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5c06\u5305\u542bIPv4\u7279\u5b9a\u4fe1\u606f\uff1a\n  \u8fd9\u4e9b\u7530\u5730\u975e\u5e38\u81ea\u6211\u89e3\u91ca\u3002 SMAC\u548cDMAC\u5206\u522b\u5305\u542b\u53d1\u4ef6\u4eba\u548c\u63a5\u6536\u8005\u76846\u5b57\u8282MAC\u5730\u5740\u3002 SIP\u548cDIP\u5206\u522b\u5305\u542b\u53d1\u4ef6\u4eba\u548c\u63a5\u6536\u5668\u7684IP\u5730\u5740\u3002\n   \uff1f\u6211\u662f\u5426\u5728AR $ HRD\u4e2d\u6709\u786c\u4ef6\u7c7b\u578b\uff1f\u662f\u7684:(\u51e0\u4e4e\u80af\u5b9a\uff09[\u53ef\u9009\u5730\u68c0\u67e5\u786c\u4ef6\u957f\u5ea6AR $ HLN]\uff1f\u6211\u662f\u5426\u5728AR $ PRO\u4e2d\u8bb2\u534f\u8bae\uff1f\u662f\uff1a[\u53ef\u9009\u5730\u68c0\u67e5\u534f\u8bae\u957f\u5ea6AR $ PLN] merge_flag\uff1a= false\u5982\u679c\u8be5\u5bf9\uff06lt;\u534f\u8bae\u7c7b\u578b\uff0c\u53d1\u4ef6\u4eba\u534f\u8bae\u5730\u5740\uff06gt;\u5df2\u7ecf\u5728\u6211\u7684\u7ffb\u8bd1\u8868\u4e2d\uff0c\u4f7f\u7528\u6570\u636e\u5305\u4e2d\u7684\u65b0\u4fe1\u606f\u66f4\u65b0\u6761\u76ee\u7684\u53d1\u4ef6\u4eba\u786c\u4ef6\u5730\u5740\u5b57\u6bb5\uff0c\u5e76\u5c06merge_flag\u8bbe\u7f6e\u4e3atrue\u3002\u6211\u662f\u76ee\u6807\u534f\u8bae\u5730\u5740\u5417\uff1f\u662f\uff1a\u5982\u679cmerge_flag\u4e3afalse\uff0c\u5219\u6dfb\u52a0\u4e09\u6001\u7ec4\uff06lt;\u534f\u8bae\u7c7b\u578b\uff0c\u53d1\u4ef6\u4eba\u534f\u8bae\u5730\u5740\uff0c\u53d1\u4ef6\u4eba\u786c\u4ef6\u5730\u5740\uff06gt;\u5230\u7ffb\u8bd1\u8868\u3002 \uff1f\u64cd\u4f5c\u7801ares_op $\u7533\u8bf7\u5417\uff1f \uff08\u73b0\u5728\u770b\u770bOpcode !!\uff09\u662f\uff1a\u4ea4\u6362\u786c\u4ef6\u548c\u534f\u8bae\u5b57\u6bb5\uff0c\u5c06\u672c\u5730\u786c\u4ef6\u548c\u534f\u8bae\u5730\u5740\u653e\u5728\u53d1\u4ef6\u4eba\u5b57\u6bb5\u4e2d\u3002\u5c06AR $ OP\u5b57\u6bb5\u8bbe\u7f6e\u4e3aARES_OP $ REPLY\u5c06\u6570\u636e\u5305\u53d1\u9001\u5230\u6536\u5230\u8bf7\u6c42\u7684\u540c\u4e00\u786c\u4ef6\u4e0a\u7684\uff08\u65b0\uff09\u76ee\u6807\u786c\u4ef6\u5730\u5740\u3002\n \u5373\uff0c\u7ffb\u8bd1\u8868\u7528\u4e8e\u5b58\u50a8ARP\u7684\u7ed3\u679c\uff0c\u4ee5\u4fbf\u4e3b\u673a\u53ef\u4ee5\u67e5\u770b\u5b83\u4eec\u662f\u5426\u5df2\u5728\u5176\u7f13\u5b58\u4e2d\u6709\u6761\u76ee\u3002\u8fd9\u907f\u514d\u4e86\u5783\u573e\u7b7e\u53d1\u5197\u4f59ARP\u8bf7\u6c42\u7684\u7f51\u7edc\u3002 \n\u6700\u540e\uff0cARP\u5b9e\u73b0\u7684\u6700\u7ec8\u6d4b\u8bd5\u662f\u770b\u5b83\u662f\u5426\u6b63\u786e\u5730\u8fd4\u56deARP\u8bf7\u6c42\uff1a\n [saminiir @ localhost lvl-ip] $ arping -i tap0 10.0.0.4arping 10.0.4\u8d77\u4ece192.168.1.32 Tap 0unicast\u56de\u590d\u4ece10.0.0.4\u4ece10.0.0.4 [00\uff1a0C\uff1a29\uff1a6D\uff1a50\uff1a25] 3.170msunicast\u56de\u590d\u4ece10.0.0.4 [00\uff1a0C\uff1a29\uff1a6D\uff1a50\uff1a25] 13.309MS [Saminiir @ localhost lvl-IP] $ Arpaddress HWTYPE HWAddress Flags Mask iFace10.0.0.4 ether00\uff1a0C\uff1a29\uff1a6D\uff1a50\uff1a25 C Tap0\n \u5185\u6838\u7684\u7f51\u7edc\u5806\u6808\u8bc6\u522b\u6765\u81ea\u81ea\u5b9a\u4e49\u7f51\u7edc\u5806\u6808\u7684ARP\u56de\u590d\uff0c\u56e0\u6b64\u4f7f\u7528\u6211\u4eec\u7684\u865a\u62df\u7f51\u7edc\u8bbe\u5907\u7684\u6761\u76ee\u586b\u5145\u5176ARP\u7f13\u5b58\u3002\u6210\u529f\uff01\n  \u4ee5\u592a\u7f51\u5e27\u5904\u7406\u548cARP\u7684\u6700\u5c0f\u5b9e\u73b0\u76f8\u5bf9\u5bb9\u6613\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u51e0\u884c\u4ee3\u7801\u4e2d\u5b8c\u6210\u3002\u76f8\u53cd\uff0c\u5956\u52b1\u56e0\u7d20\u975e\u5e38\u9ad8\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u7684\u5236\u4f5c\u4fe1\u5ff5\u4ee5\u592a\u7f51\u8bbe\u5907\u586b\u5145Linux\u4e3b\u673a\u7684ARP\u7f13\u5b58\uff01\n  \u5728\u4e0b\u4e00\u4e2a\u5e16\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u6267\u884cICMP Echo\uff06amp;\u56de\u590d\uff08ping\uff09\u548cIPv4\u6570\u636e\u5305\u89e3\u6790\u3002\n \u5982\u679c\u60a8\u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\uff0c\u60a8\u53ef\u4ee5\u4e0e\u60a8\u7684\u8ffd\u968f\u8005\u5206\u4eab\u5e76\u8ddf\u968f\u6211\u7684\u63a8\u7279\uff01\n Kudos\u5230Xiaochen Wang\uff0c\u5176\u7c7b\u4f3c\u7684\u5b9e\u73b0\u5bf9\u6211\u6765\u8bf4\uff0c\u5728\u52a0\u5febC\u7f51\u7edc\u7f16\u7a0b\u548c\u534f\u8bae\u5904\u7406\u65f6\uff0c\u5bf9\u6211\u6765\u8bf4\u662f\u975e\u5e38\u5b9d\u8d35\u7684\u3002\u6211\u53d1\u73b0\u4ed6\u7684\u6e90\u4ee3\u78015\u6613\u4e8e\u7406\u89e3\uff0c\u6211\u7684\u4e00\u4e9b\u8bbe\u8ba1\u9009\u62e9\u4ece\u4ed6\u7684\u5b9e\u65bd\u4e2d\u76f4\u63a5\u590d\u5236\u3002 ", "note_en": "Writing your own TCP/IP stack may seem like a daunting task. Indeed, TCP has accumulated many specifications over its lifetime of more than thirty years. The core specification, however, is seemingly compact  1 - the important parts being TCP header parsing, the state machine, congestion control and retransmission timeout computation.\n The most common layer 2 and layer 3 protocols, Ethernet and IP respectively, pale in comparison to TCP\u2019s complexity. In this blog series, we will implement a minimal userspace TCP/IP stack for Linux.\n The purpose of these posts and the resulting software is purely educational - to learn network and system programming at a deeper level.\n    To intercept low-level network traffic from the Linux kernel, we will use a Linux TAP device. In short, a TUN/TAP device is often used by networking userspace applications to manipulate L3/L2 traffic, respectively. A popular example is  tunneling, where a packet is wrapped inside the payload of another packet.\n The advantage of TUN/TAP devices is that they\u2019re easy to set up in a userspace program and they are already being used in a multitude of programs, such as  OpenVPN.\n As we want to build the networking stack from the layer 2 up, we need a TAP device. We instantiate it like so:\n /* * Taken from Kernel Documentation/networking/tuntap.txt */ int  tun_alloc ( char  * dev ) {  struct  ifreq  ifr ;  int  fd ,  err ;  if (  ( fd  =  open ( &#34;/dev/net/tap&#34; ,  O_RDWR ))  &lt;  0  )  {  print_error ( &#34;Cannot open TUN/TAP dev&#34; );  exit ( 1 );  }  CLEAR ( ifr );  /* Flags: IFF_TUN - TUN device (no Ethernet headers) * IFF_TAP - TAP device * * IFF_NO_PI - Do not provide packet information */  ifr . ifr_flags  =  IFF_TAP  |  IFF_NO_PI ;  if (  * dev  )  {  strncpy ( ifr . ifr_name ,  dev ,  IFNAMSIZ );  }  if (  ( err  =  ioctl ( fd ,  TUNSETIFF ,  ( void  * )  &amp; ifr ))  &lt;  0  ){  print_error ( &#34;ERR: Could not ioctl tun: %s \\n &#34; ,  strerror ( errno ));  close ( fd );  return  err ;  }  strcpy ( dev ,  ifr . ifr_name );  return  fd ; }\n After this, the returned file descriptor  fd can be used to  read and  write data to the virtual device\u2019s ethernet buffer.\n The flag  IFF_NO_PI is crucial here, otherwise we end up with unnecessary packet information prepended to the Ethernet frame. You can actually take a look at the kernel\u2019s  source code of the tun-device driver and verify this yourself.\n  The multitude of different Ethernet networking technologies are the backbone of connecting computers in  Local Area Networks (LANs). As with all physical technology, the Ethernet standard has greatly evolved from its first version  2, published by Digital Equipment Corporation, Intel and Xerox in 1980.\n The first version of Ethernet was slow in today\u2019s standards - about 10Mb/s and it utilized half-duplex communication, meaning that you either sent or received data, but not at the same time. This is why a  Media Access Control (MAC) protocol had to be incorporated to organize the data flow. Even to this day,  Carrier Sense, Multiple Access with Collision Detection (CSMA/CD) is required as the MAC method if running an Ethernet interface in half-duplex mode.\n The invention of the  100BASE-T Ethernet standard used twisted-pair wiring to enable full-duplex communication and higher throughput speeds. Additionally, the simultaneous increase in popularity of Ethernet switches made CSMA/CD largely obsolete.\n  Next, we\u2019ll take a look at the Ethernet Frame header. It can be declared as a C struct followingly:\n #include &lt;linux/if_ether.h&gt; struct  eth_hdr {  unsigned  char  dmac [ 6 ];  unsigned  char  smac [ 6 ];  uint16_t  ethertype ;  unsigned  char  payload []; }  __attribute__ (( packed ));\n The  dmac and  smac are pretty self-explanatory fields. They contain the MAC addresses of the communicating parties (destination and source, respectively).\n The overloaded field,  ethertype, is a 2-octet field, that depending on its value, either indicates the length or the type of the payload. Specifically, if the field\u2019s value is greater or equal to 1536, the field contains the type of the payload (e.g. IPv4, ARP). If the value is less than that, it contains the length of the payload.\n After the type field, there is a possibility of several different  tags for the Ethernet frame. These tags can be used to describe the  Virtual LAN (VLAN) or the  Quality of Service (QoS) type of the frame. Ethernet frame tags are excluded from our implementation, so the corresponding field also does not show up in our protocol declaration.\n The field  payload contains a pointer to the Ethernet frame\u2019s payload. In our case, this will contain an ARP or IPv4 packet. If the payload length is smaller than the minimum required 48 bytes (without tags), pad bytes are appended to the end of the payload to meet the requirement.\n We also include the  if_ether.h Linux header to provide a mapping between ethertypes and their hexadecimal values.\n Lastly, the Ethernet Frame Format also includes the  Frame Check Sequence field in the end, which is used with  Cyclic Redundancy Check (CRC) to check the integrity of the frame. We will omit the handling of this field in our implementation.\n  The attribute  packed in a struct\u2019s declaration is an implementation detail - It is used to instruct the GNU C compiler not to optimize the struct memory layout for data alignment with padding bytes  4. The use of this attribute stems purely out of the way we are \u201cparsing\u201d the protocol buffer, which is just a type cast over the data buffer with the proper protocol struct:\n  A portable, albeit slightly more laborious approach, would be to serialize the protocol data manually. This way, the compiler is free to add padding bytes to conform better to different processor\u2019s data alignment requirements.\n  if  ( tun_read ( buf ,  BUFLEN )  &lt;  0 )  {  print_error ( &#34;ERR: Read from tun_fd: %s \\n &#34; ,  strerror ( errno )); } struct  eth_hdr  * hdr  =  init_eth_hdr ( buf ); handle_frame ( &amp; netdev ,  hdr );\n The  handle_frame function just looks at the  ethertype field of the Ethernet header, and decides its next action based upon the value.\n  The  Address Resolution Protocol (ARP) is used for dynamically mapping a 48-bit Ethernet address (MAC address) to a protocol address (e.g. IPv4 address). The key here is that with ARP, multitude of different L3 protocols can be used: Not just IPv4, but other protocols like CHAOS, which declares 16-bit protocol addresses.\n The usual case is that you know the IP address of some service in your LAN, but to establish actual communications, also the hardware address (MAC) needs to be known. Hence, ARP is used to broadcast and query the network, asking the owner of the IP address to report its hardware address.\n  struct  arp_hdr {  uint16_t  hwtype ;  uint16_t  protype ;  unsigned  char  hwsize ;  unsigned  char  prosize ;  uint16_t  opcode ;  unsigned  char  data []; }  __attribute__ (( packed ));\n The ARP header ( arp_hdr) contains the 2-octet  hwtype, which determines the link layer type used. This is Ethernet in our case, and the actual value is  0x0001.\n The 2-octet  protype field indicates the protocol type. In our case, this is IPv4, which is communicated with the value  0x0800.\n The  hwsize and  prosize fields are both 1-octet in size, and they contain the sizes of the hardware and protocol fields, respectively. In our case, these would be 6 bytes for MAC addresses, and 4 bytes for IP addresses.\n The 2-octet field  opcode declares the type of the ARP message. It can be ARP request (1), ARP reply (2), RARP request (3) or RARP reply (4).\n The  data field contains the actual payload of the ARP message, and in our case, this will contain IPv4 specific information:\n  The fields are pretty self explanatory.  smac and  dmac contain the 6-byte MAC addresses of the sender and receiver, respectively.  sip and  dip contain the sender\u2019s and receiver\u2019s IP addresses, respectively.\n   ?Do I have the hardware  type  in ar $hrd?Yes:  (almost definitely )  [optionally check the hardware length ar $hln ] ?Do I speak the protocol  in ar $pro? Yes:  [optionally check the protocol length ar $pln ] Merge_flag : =  false If the pair &lt;protocol  type, sender protocol address&gt; is already  in my translation table, update the sender hardware address field of the entry with the new information  in the packet and  set Merge_flag to true. ?Am I the target protocol address? Yes: If Merge_flag is  false, add the triplet &lt;protocol  type, sender protocol address, sender hardware address&gt; to the translation table. ?Is the opcode ares_op $REQUEST?  (NOW look at the opcode!! ) Yes: Swap hardware and protocol fields, putting the  local hardware and protocol addresses  in the sender fields. Set the ar $op field to ares_op $REPLY Send the packet to the  (new ) target hardware address on the same hardware on which the request was received.\n Namely, the  translation table is used to store the results of ARP, so that hosts can just look up whether they already have the entry in their cache. This avoids spamming the network for redundant ARP requests.\n  Finally, the ultimate test for an ARP implementation is to see whether it replies to ARP requests correctly:\n [saminiir@localhost lvl-ip] $ arping  -I tap0 10.0.0.4ARPING 10.0.0.4 from 192.168.1.32 tap0Unicast reply from 10.0.0.4  [00:0C:29:6D:50:25] 3.170msUnicast reply from 10.0.0.4  [00:0C:29:6D:50:25] 13.309ms [saminiir@localhost lvl-ip] $ arpAddress HWtype HWaddress Flags Mask Iface10.0.0.4 ether 00:0c:29:6d:50:25 C tap0\n The kernel\u2019s networking stack recognized the ARP reply from our custom networking stack, and consequently populated its ARP cache with the entry of our virtual network device. Success!\n  The minimal implementation of Ethernet Frame handling and ARP is relatively easy and can be done in a few lines of code. On the contrary, the reward-factor is quite high, since you get to populate a Linux host\u2019s ARP cache with your own make-belief Ethernet device!\n  In the next post, we\u2019ll continue the implementation with ICMP echo &amp; reply (ping) and IPv4 packet parsing.\n If you liked this post, you can  share it with your followers and   follow me on Twitter!\n Kudos to Xiaochen Wang, whose similar implementation proved invaluable for me in getting up to speed with C network programming and protocol handling. I find his  source code  5 easy to understand and some of my design choices were straight-out copied from his implementation.", "posttime": "2021-06-29 22:45:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,tcp,\u534f\u8bae", "title": "\u8ba9\u6211\u4eec\u4ee3\u7801TCP / IP\u5806\u6808\uff082016\uff09 ", "title_en": "Let's code a TCP/IP stack (2016)", "transed": 1, "url": "https://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/", "via": "", "real_tags": ["\u4ee3\u7801", "tcp", "\u534f\u8bae"]}]