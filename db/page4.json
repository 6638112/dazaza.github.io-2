[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073679, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u00a92022\u7f8e\u56fd\u79d1\u5b66\u4fc3\u8fdb\u4f1a\u3002\u7248\u6743\u6240\u6709\u3002AAAS\u662fHINARI\u3001AGORA\u3001OARE\u3001Chouse\u3001CLOCKSS\u3001CrossRef\u548cCOUNTER\u7684\u5408\u4f5c\u4f19\u4f34\u3002", "note_en": "\u00a9 2022 American Association for the Advancement of Science. All rights reserved. AAAS is a partner of HINARI, AGORA, OARE, CHORUS, CLOCKSS, CrossRef and COUNTER.", "posttime": "2022-02-17 03:27:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4fa6\u63a2,sleuths,\u79d1\u5b66", "title": "\u516c\u6c11\u4fa6\u63a2\u63ed\u9732\u4e86\u5bc6\u6b47\u6839\u4e00\u5bb6\u767e\u5e74\u8001\u65e7\u5de5\u5382\u7684\u6c61\u67d3\uff082019\u5e74\uff09", "title_en": "Citizen sleuths exposed pollution from a century-old Michigan factory (2019)", "transed": 1, "url": "https://www.science.org/content/article/citizen-sleuths-exposed-pollution-century-old-michigan-factory-nationwide-implications", "via": "", "real_tags": ["\u4fa6\u63a2", "sleuths", "\u79d1\u5b66"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073678, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u77e5\u8bc6\u5e93\u8bd5\u56fe\u56de\u7b54\u4e00\u4e2a\u7531\u6765\u5df2\u4e45\u7684\u9762\u8bd5\u95ee\u9898#34\uff1b\u5f53\u4f60\u8f93\u5165\u8c37\u6b4c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u8fdb\u5165\u4f60\u7684\u6d4f\u89c8\u5668&#39\uff1bs\u5730\u5740\u6846\uff0c\u7136\u540e\u6309Enter&#34;\n\u9664\u4e86\u901a\u5e38\u7684\u6545\u4e8b\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u5c3d\u53ef\u80fd\u8be6\u7ec6\u5730\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u3002\u4efb\u4f55\u4e8b\u90fd\u4e0d\u80fd\u6f0f\u6389\u3002\n\u8fd9\u662f\u4e00\u4e2a\u534f\u4f5c\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u8bf7\u6df1\u5165\u6316\u6398\u5e76\u5c1d\u8bd5\u5e2e\u52a9\uff01\u6709\u4e00\u4e9b\u7ec6\u8282\u7f3a\u5931\uff0c\u53ea\u662f\u5728\u7b49\u5f85\u4f60\u6dfb\u52a0\u5b83\u4eec\uff01\u6240\u4ee5\u8bf7\u7ed9\u6211\u4eec\u53d1\u4e00\u4e2a\u8bf7\u6c42\uff01\n\u8bfb\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u7b80\u4f53\u4e2d\u6587 \uff08\u7b80\u4f53\u4e2d\u6587\uff09\uff0c\u65e5\u672c\u8a9e \uff08\u65e5\u8bed\uff09\uff0c\ud55c\uad6d\uc5b4\uff08\u97e9\u8bed\uff09\u548c\u897f\u73ed\u7259\u8bed\u3002\u6ce8\uff1aalex\u672a\u5bf9\u8fd9\u4e9b\u8fdb\u884c\u5ba1\u67e5/\u7ef4\u62a4\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\n\u4ee5\u4e0b\u90e8\u5206\u89e3\u91ca\u4e86\u7269\u7406\u952e\u76d8\u64cd\u4f5c\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u65ad\u3002\u5f53\u4f60\u6309\u4e0b&#34\uff1bg&#34\uff1b\u6d4f\u89c8\u5668\u63a5\u6536\u4e8b\u4ef6\u548c\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\u3002\u53d6\u51b3\u4e8e\u4f60\u7684\u6d4f\u89c8\u5668&#39\uff1bs\u7b97\u6cd5\uff0c\u5982\u679c\u60a8\u5904\u4e8e\u79c1\u5bc6/\u533f\u540d\u6a21\u5f0f\u6216\u6ca1\u6709\uff0c\u5404\u79cd\u5efa\u8bae\u5c06\u5728URL\u680f\u4e0b\u65b9\u7684\u4e0b\u62c9\u5217\u8868\u4e2d\u5448\u73b0\u7ed9\u60a8\u3002\u8fd9\u4e9b\u7b97\u6cd5\u5927\u591a\u57fa\u4e8e\u641c\u7d22\u5386\u53f2\u3001\u4e66\u7b7e\u3001cookie\u548c\u6574\u4e2a\u4e92\u8054\u7f51\u4e0a\u7684\u70ed\u95e8\u641c\u7d22\u5bf9\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\u548c\u6392\u5e8f\u3002\u5f53\u4f60\u8f93\u5165&#34\uff1b\u8c37\u6b4c\u3002com&#34\uff1b\u8bb8\u591a\u4ee3\u7801\u5757\u4f1a\u8fd0\u884c\uff0c\u5efa\u8bae\u4f1a\u968f\u7740\u6bcf\u6b21\u6309\u952e\u800c\u7ec6\u5316\u3002\u5b83\u751a\u81f3\u53ef\u80fd\u6697\u793a&#34\uff1b\u8c37\u6b4c\u3002com&#34\uff1b\u5728\u4f60\u5b8c\u6210\u6253\u5b57\u4e4b\u524d\u3002\n\u8981\u9009\u62e9\u4e00\u4e2a\u96f6\u70b9\uff0c\u8ba9&#39\uff1bs\u9009\u62e9\u952e\u76d8\u4e0a\u7684Enter\u952e\uff0c\u70b9\u51fb\u5176\u8303\u56f4\u7684\u5e95\u90e8\u3002\u6b64\u65f6\uff0c\u7279\u5b9a\u4e8eenterkey\u7684\u7535\u8def\u95ed\u5408\uff08\u76f4\u63a5\u6216\u7535\u5bb9\uff09\u3002\u8fd9\u5141\u8bb8\u5c11\u91cf\u7535\u6d41\u6d41\u5165\u952e\u76d8\u7684\u903b\u8f91\u7535\u8def\uff0c\u8be5\u7535\u8def\u626b\u63cf\u6bcf\u4e2a\u6309\u952e\u5f00\u5173\u7684\u72b6\u6001\uff0c\u6d88\u9664\u5f00\u5173\u5feb\u901f\u95f4\u6b47\u6027\u95ed\u5408\u7684\u7535\u6c14\u566a\u58f0\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6309\u952e\u4ee3\u7801\u6574\u6570\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a13\u3002\u7136\u540e\uff0c\u952e\u76d8\u63a7\u5236\u5668\u5bf9\u952e\u76d8\u4ee3\u7801\u8fdb\u884c\u7f16\u7801\uff0c\u4ee5\u4fbf\u4f20\u8f93\u5230\u8ba1\u7b97\u673a\u3002\u73b0\u5728\uff0c\u8fd9\u51e0\u4e4e\u666e\u904d\u901a\u8fc7\u901a\u7528\u4e32\u884c\u603b\u7ebf\uff08USB\uff09\u6216\u84dd\u7259\u8fde\u63a5\u5b9e\u73b0\uff0c\u4f46\u5386\u53f2\u4e0a\u4e00\u76f4\u901a\u8fc7PS/2\u6216ADB\u8fde\u63a5\u5b9e\u73b0\u3002\n\u952e\u76d8\u7684USB\u7535\u8def\u7531\u8ba1\u7b97\u673a\u63d0\u4f9b\u76845V\u7535\u6e90\u4f9b\u7535&#39\uff1bUSB\u4e3b\u673a\u63a7\u5236\u5668\u3002\n\u4e3b\u673aUSB\u63a7\u5236\u5668\u8f6e\u8be2&#34\uff1b\u7ec8\u70b9#34\uff1b\u6bcf\u969410\u6beb\u79d2\uff08\u952e\u76d8\u58f0\u660e\u7684\u6700\u5c0f\u503c\uff09\uff0c\u5b83\u5c31\u4f1a\u83b7\u5f97\u5b58\u50a8\u5728\u952e\u76d8\u4e0a\u7684\u952e\u7801\u503c\u3002\n\u8be5\u503c\u5c06\u4f20\u8f93\u81f3USB SIE\uff08\u4e32\u884c\u63a5\u53e3\u5f15\u64ce\uff09\uff0c\u4ee5\u4fbf\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u9075\u5faa\u4f4e\u7ea7USB\u534f\u8bae\u7684USB\u6570\u636e\u5305\u4e2d\u8fdb\u884c\u8f6c\u6362\u3002\n\u8fd9\u4e9b\u6570\u636e\u5305\u901a\u8fc7\u5dee\u5206\u7535\u4fe1\u53f7\u901a\u8fc7D+\u548cD-\u5f15\u811a\uff08\u4e2d\u95f42\uff09\u4ee51.5 Mb/s\u7684\u6700\u5927\u901f\u5ea6\u53d1\u9001\uff0c\u56e0\u4e3aHID\uff08\u4eba\u673a\u754c\u9762\u8bbe\u5907\uff09\u8bbe\u5907\u603b\u662f\u88ab\u58f0\u660e\u4e3aa&#34\uff1b\u4f4e\u901f\u88c5\u7f6e&#34\uff1b\uff08\u7b26\u5408USB 2.0\u6807\u51c6\uff09\u3002\n\u7136\u540e\u5728\u8ba1\u7b97\u673a\u4e0a\u5bf9\u8be5\u4e32\u884c\u4fe1\u53f7\u8fdb\u884c\u89e3\u7801&#39\uff1b\u4e3b\u673aUSB\u63a7\u5236\u5668\uff0c\u5e76\u7531\u8ba1\u7b97\u673a#39\uff1bs\u4eba\u673a\u754c\u9762\u8bbe\u5907\uff08HID\uff09\u901a\u7528\u952e\u76d8\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3002\u7136\u540e\u952e\u7684\u503c\u88ab\u4f20\u9012\u5230\u64cd\u4f5c\u7cfb\u7edf&#39\uff1b\u786c\u4ef6\u62bd\u8c61\u5c42\u3002\n\u5f53\u7528\u6237\u5c06\u624b\u6307\u653e\u5728\u73b0\u4ee3\u7535\u5bb9\u5f0f\u89e6\u6478\u5c4f\u4e0a\u65f6\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u7535\u6d41\u90fd\u4f1a\u4f20\u8f93\u5230\u624b\u6307\u4e0a\u3002\u8fd9\u5c31\u5b8c\u6210\u4e86\u901a\u8fc7\u5bfc\u7535\u5c42\u9759\u7535\u573a\u7684\u7535\u8def\uff0c\u5e76\u5728\u5c4f\u5e55\u4e0a\u7684\u8be5\u70b9\u4ea7\u751f\u7535\u538b\u964d\u3002\u7136\u540e\uff0c\u5c4f\u5e55\u63a7\u5236\u5668\u89e6\u53d1\u4e00\u4e2a\u4e2d\u65ad\uff0c\u62a5\u544a\u6309\u952e\u7684\u5750\u6807\u3002\n\u7136\u540e\uff0c\u79fb\u52a8\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5176GUI\u5143\u7d20\u4e4b\u4e00\uff08\u73b0\u5728\u662f\u865a\u62df\u952e\u76d8\u5e94\u7528\u7a0b\u5e8f\u6309\u94ae\uff09\u4e2d\u7684\u6309\u4e0b\u4e8b\u4ef6\u901a\u77e5\u5f53\u524d\u5173\u6ce8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u865a\u62df\u952e\u76d8\u73b0\u5728\u53ef\u4ee5\u5f15\u53d1\u8f6f\u4ef6\u4e2d\u65ad\uff0c\u4ee5\u53d1\u9001&#39\uff1b\u6309\u952e&#39\uff1b\u6d88\u606f\u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u952e\u76d8\u5728\u5176\u4e2d\u65ad\u8bf7\u6c42\u884c\uff08IRQ\uff09\u4e0a\u53d1\u9001\u4fe1\u53f7\uff0c\u4e2d\u65ad\u63a7\u5236\u5668\u5c06\u5176\u6620\u5c04\u4e3a\u4e2d\u65ad\u5411\u91cf\uff08\u6574\u6570\uff09\u3002CPU\u4f7f\u7528\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff08IDT\uff09\u5c06\u4e2d\u65ad\u5411\u91cf\u6620\u5c04\u5230\u5185\u6838\u63d0\u4f9b\u7684\u51fd\u6570\uff08\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff09\u3002\u5f53\u4e2d\u65ad\u5230\u8fbe\u65f6\uff0cCPU\u7528\u4e2d\u65ad\u5411\u91cf\u5bf9IDT\u8fdb\u884c\u7d22\u5f15\uff0c\u5e76\u8fd0\u884c\u76f8\u5e94\u7684\u5904\u7406\u7a0b\u5e8f\u3002\u8fd9\u6837\uff0c\u5c31\u8fdb\u5165\u4e86\u5185\u6838\u3002\nHID\u4f20\u8f93\u5c06\u6309\u952e\u5411\u4e0b\u4e8b\u4ef6\u4f20\u9012\u7ed9KBDHID\u3002\u5c06HID\u4f7f\u7528\u8f6c\u6362\u4e3a\u626b\u63cf\u7801\u7684sys\u9a71\u52a8\u7a0b\u5e8f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u626b\u63cf\u4ee3\u7801\u4e3aVK_RETURN\uff080x0D\uff09\u3002KBDHID\u3002sys\u9a71\u52a8\u7a0b\u5e8f\u4e0eKBDCLASS\u63a5\u53e3\u3002sys\uff08\u952e\u76d8\u7c7b\u9a71\u52a8\u7a0b\u5e8f\uff09\u3002\u8be5\u9a71\u52a8\u7a0b\u5e8f\u8d1f\u8d23\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u5904\u7406\u6240\u6709\u952e\u76d8\u548c\u5c0f\u952e\u76d8\u8f93\u5165\u3002\u7136\u540e\u8c03\u7528Win32K\u3002sys\uff08\u53ef\u80fd\u901a\u8fc7\u5b89\u88c5\u7684\u7b2c\u4e09\u65b9\u4e3b\u677f\u8fc7\u6ee4\u5668\u4f20\u9012\u6d88\u606f\u540e\uff09\u3002\u8fd9\u4e00\u5207\u90fd\u53d1\u751f\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u3002\nWin32K\u3002sys\u901a\u8fc7getForeGroundIndow\uff08\uff09API\u786e\u5b9a\u54ea\u4e2a\u7a97\u53e3\u662f\u6d3b\u52a8\u7a97\u53e3\u3002\u8fd9\u4e2aAPI\u63d0\u4f9b\u4e86\u6d4f\u89c8\u5668\u7684\u7a97\u53e3\u53e5\u67c4#39\uff1bs\u7684\u5730\u5740\u6846\u3002\u4e3b\u7a97\u53e3&#34\uff1b\u4fe1\u606f\u6cf5&#34\uff1b\u7136\u540e\u8c03\u7528SendMessage\uff08hWnd\u3001WM_KEYDOWN\u3001VK_RETURN\u3001lParam\uff09\u3002lParam\u662f\u4e00\u4e2a\u4f4d\u63a9\u7801\uff0c\u8868\u793a\u6709\u5173\u6309\u952e\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\uff1a\u91cd\u590d\u8ba1\u6570\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a0\uff09\u3001\u5b9e\u9645\u626b\u63cf\u4ee3\u7801\uff08\u53ef\u80fd\u53d6\u51b3\u4e8eOEM\uff0c\u4f46\u901a\u5e38\u5728VK#U\u8fd4\u56de\u4e4b\u524d\u4e0d\u4f1a\u51fa\u73b0\uff09\uff0c\u662f\u5426\u4e5f\u6309\u4e0b\u4e86\u6269\u5c55\u952e\uff08\u4f8b\u5982alt\u3001shift\u3001ctrl\uff09\uff08\u5b83\u4eec\u6ca1\u6709\u51fa\u73b0\uff09\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u72b6\u6001\u3002\nWindows SendMessage API\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\uff0c\u5b83\u5c06\u6d88\u606f\u6dfb\u52a0\u5230\u7279\u5b9a\u7a97\u53e3\u53e5\u67c4\uff08hWnd\uff09\u7684\u961f\u5217\u4e2d\u3002\u968f\u540e\uff0c\u8c03\u7528\u5206\u914d\u7ed9hWnd\u7684\u4e3b\u6d88\u606f\u5904\u7406\u51fd\u6570\uff08\u79f0\u4e3aWindowProc\uff09\uff0c\u4ee5\u4fbf\u5904\u7406\u961f\u5217\u4e2d\u7684\u6bcf\u6761\u6d88\u606f\u3002\n\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u7684\u7a97\u53e3\uff08hWnd\uff09\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7f16\u8f91\u63a7\u4ef6\uff0c\u5728\u672c\u4f8b\u4e2d\uff0cWindowProc\u6709\u4e00\u4e2a\u7528\u4e8eWM_KEYDOWN\u6d88\u606f\u7684\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u3002\u8fd9\u6bb5\u4ee3\u7801\u5728\u4f20\u9012\u7ed9SendMessage\uff08wParam\uff09\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e2d\u67e5\u627e\uff0c\u56e0\u4e3a\u5b83\u662fVK_RETURN\uff0c\u6240\u4ee5\u77e5\u9053\u7528\u6237\u5df2\u7ecf\u70b9\u51fb\u4e86ENTERkey\u3002\n\u4e2d\u65ad\u4fe1\u53f7\u89e6\u53d1I/O Kit kext\u952e\u76d8\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u7684\u4e2d\u65ad\u4e8b\u4ef6\u3002\u9a71\u52a8\u7a0b\u5e8f\u5c06\u4fe1\u53f7\u8f6c\u6362\u4e3a\u5bc6\u94a5\u4ee3\u7801\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9theOS X Windows Server\u8fdb\u7a0b\u3002\u7ed3\u679c\uff0cWindows\u670d\u52a1\u5668\u901a\u8fc7\u5176RMACH\u7aef\u53e3\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u4efb\u4f55\u9002\u5f53\u7684\uff08\u4f8b\u5982\uff0c\u6d3b\u52a8\u6216\u4fa6\u542c\uff09\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5c06\u5176\u653e\u5165\u4e8b\u4ef6\u961f\u5217\u4e2d\u3002\u7136\u540e\uff0c\u5177\u6709\u8db3\u591f\u6743\u9650\u7684\u7ebf\u7a0b\u53ef\u4ee5\u8c03\u7528mach_ipc_dispatch\u51fd\u6570\u4ece\u8be5\u961f\u5217\u8bfb\u53d6\u4e8b\u4ef6\u3002\u8fd9\u901a\u5e38\u901a\u8fc7NSEventType KeyDown\u7684NSEvent\u901a\u8fc7NSApplication\u4e3b\u4e8b\u4ef6\u5faa\u73af\u53d1\u751f\uff0c\u5e76\u7531\u5176\u5904\u7406\u3002\n\u5f53\u4f7f\u7528\u56fe\u5f62X\u670d\u52a1\u5668\u65f6\uff0cX\u5c06\u4f7f\u7528\u901a\u7528\u4e8b\u4ef6\u9a71\u52a8\u7a0b\u5e8fevdev\u83b7\u53d6\u6309\u952e\u3002\u4f7f\u7528X\u670d\u52a1\u5668\u7279\u5b9a\u7684\u5bc6\u94a5\u6620\u5c04\u548c\u89c4\u5219\u5c06\u5bc6\u94a5\u7801\u91cd\u65b0\u6620\u5c04\u5230\u626b\u63cf\u7801\u3002\u5f53\u6309\u4e0b\u952e\u7684\u626b\u63cf\u7801\u6620\u5c04\u5b8c\u6210\u65f6\uff0cX\u670d\u52a1\u5668\u5c06\u5b57\u7b26\u53d1\u9001\u5230\u7a97\u53e3\u7ba1\u7406\u5668\uff08DWM\u3001metacity\u3001i3\u7b49\uff09\uff0c\u56e0\u6b64\u7a97\u53e3\u7ba1\u7406\u5668\u4f9d\u6b21\u5c06\u5b57\u7b26\u53d1\u9001\u5230\u805a\u7126\u7a97\u53e3\u3002\u63a5\u6536\u5b57\u7b26\u7684\u7a97\u53e3\u7684\u56fe\u5f62API\u4f1a\u5728\u76f8\u5e94\u7684\u805a\u7126\u5b57\u6bb5\u4e2d\u6253\u5370\u76f8\u5e94\u7684\u5b57\u4f53\u7b26\u53f7\u3002\n\u5f53\u6ca1\u6709\u63d0\u4f9b\u534f\u8bae\u6216\u6709\u6548\u57df\u540d\u65f6\uff0c\u6d4f\u89c8\u5668\u7ee7\u7eed\u5c06\u5730\u5740\u6846\u4e2d\u7ed9\u51fa\u7684\u6587\u672c\u53cd\u9988\u7ed9\u6d4f\u89c8\u5668&#39\uff1b\u9ed8\u8ba4\u7684\u7f51\u7edc\u641c\u7d22\u5f15\u64ce\u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0cURL\u4f1a\u9644\u52a0\u4e00\u6bb5\u7279\u6b8a\u7684\u6587\u672c\uff0c\u544a\u8bc9\u641c\u7d22\u5f15\u64ce\u5b83\u6765\u81ea\u7279\u5b9a\u7684\u6d4f\u89c8\u5668#39\uff1bs\u7684URL\u680f\u3002\n\u6d4f\u89c8\u5668\u4f1a\u68c0\u67e5\u4e3b\u673a\u540d\u4e2d\u662f\u5426\u6709\u4e0d\u5728a-z\u3001a-z\u30010-9\u3001\u3001\u3001\u6216..\u4e2d\u7684\u5b57\u7b26\u3002\u3002\n\u56e0\u4e3a\u4e3b\u673a\u540d\u662fgoogle\u3002com\u90a3\u91cc\u8d62\u4e86&#39\uff1b\u6ca1\u6709\uff0c\u4f46\u5982\u679c\u6709\uff0c\u6d4f\u89c8\u5668\u4f1a\u5bf9URL\u7684\u4e3b\u673a\u540d\u90e8\u5206\u5e94\u7528Punycode\u7f16\u7801\u3002\n\u6d4f\u89c8\u5668\u68c0\u67e5\u5176&#34\uff1b\u9884\u88c5HST\uff08HTTP\u4e25\u683c\u4f20\u8f93\u5b89\u5168\uff09\u548c#34\uff1b\u5217\u8868\u8fd9\u662f\u4e00\u4e2a\u53ea\u8981\u6c42\u901a\u8fc7HTTPS\u8054\u7cfb\u7684\u7f51\u7ad9\u5217\u8868\u3002\n\u5982\u679c\u7f51\u7ad9\u5728\u5217\u8868\u4e2d\uff0c\u6d4f\u89c8\u5668\u5c06\u901a\u8fc7HttpSin\u800c\u4e0d\u662fHTTP\u53d1\u9001\u5176\u8bf7\u6c42\u3002\u5426\u5219\uff0c\u521d\u59cb\u8bf7\u6c42\u5c06\u901a\u8fc7HTTP\u53d1\u9001\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u7f51\u7ad9\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528HSTS\u7b56\u7565\uff0c\u800c\u4e0d\u5728HSTS\u5217\u8868\u4e2d\u3002\u7528\u6237\u5bf9\u7f51\u7ad9\u7684\u7b2c\u4e00\u4e2aHTTP\u8bf7\u6c42\u5c06\u6536\u5230\u4e00\u4e2a\u5e94\u7b54\uff0c\u8bf7\u6c42\u7528\u6237\u53ea\u53d1\u9001HTTPS\u8bf7\u6c42\u3002\u4f46\u662f\uff0c\u8fd9\u4e2aHTTP\u8bf7\u6c42\u53ef\u80fd\u4f1a\u8ba9\u7528\u6237\u5bb9\u6613\u53d7\u5230\u964d\u7ea7\u653b\u51fb\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48HSTS\u5217\u8868\u5305\u542b\u5728mo\u4e2d\u3002\uff09\u5fb7\u6069\u00b7\u97e6\u4f2f\u00b7\u514b\u9c81\u65af\u3002\uff09\n\u6d4f\u89c8\u5668\u68c0\u67e5\u57df\u662f\u5426\u5728\u5176\u7f13\u5b58\u4e2d\u3002\uff08\u8981\u67e5\u770b\u7f57\u9a6c\u7684DNS\u7f13\u5b58\uff0c\u8bf7\u8f6c\u5230chrome://net-internals/#dns).\n\u5982\u679c\u627e\u4e0d\u5230\uff0c\u6d4f\u89c8\u5668\u5c06\u8c03\u7528gethostbyname\u5e93\u51fd\u6570\uff08\u4e0d\u540c\u7684byOS\uff09\u8fdb\u884c\u67e5\u627e\u3002\ngethostbyname\u5728\u5c1d\u8bd5\u901a\u8fc7DNS\u89e3\u6790\u4e3b\u673a\u540d\u4e4b\u524d\uff0c\u68c0\u67e5\u4e3b\u673a\u540d\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u672c\u5730\u4e3b\u673a\u6587\u4ef6\uff08\u5176\u4f4d\u7f6e\u56e0\u64cd\u4f5c\u7cfb\u7edf\u800c\u5f02\uff09\u4e2d\u7684\u5f15\u7528\u89e3\u6790\u3002\n\u5982\u679cgethostbyname\u6ca1\u6709\u7f13\u5b58\u5b83\uff0c\u4e5f\u65e0\u6cd5\u5728hostsfile\u4e2d\u627e\u5230\u5b83\uff0c\u90a3\u4e48\u5b83\u4f1a\u5411\u7f51\u7edc\u5806\u6808\u4e2d\u914d\u7f6e\u7684DNS\u670d\u52a1\u5668\u53d1\u51fa\u8bf7\u6c42\u3002\u8fd9\u901a\u5e38\u662f\u672c\u5730\u8def\u7531\u5668\u6216ISP&#39\uff1b\u6b63\u5728\u7f13\u5b58DNS\u670d\u52a1\u5668\u3002\n\u5982\u679cDNS\u670d\u52a1\u5668\u4f4d\u4e8e\u540c\u4e00\u5b50\u7f51\u4e0a\uff0c\u5219\u7f51\u7edc\u5e93\u5c06\u9075\u5faa\u4e0b\u9762\u9488\u5bf9DNS\u670d\u52a1\u5668\u7684ARP\u8fc7\u7a0b\u3002\n\u5982\u679cDNS\u670d\u52a1\u5668\u4f4d\u4e8e\u4e0d\u540c\u7684\u5b50\u7f51\u4e2d\uff0c\u5219\u7f51\u7edc\u5e93\u5c06\u9075\u5faa\u4ee5\u4e0b\u9ed8\u8ba4\u7f51\u5173IP\u7684ARP\u8fc7\u7a0b\u3002\n\u4e3a\u4e86\u53d1\u9001ARP\uff08\u5730\u5740\u89e3\u6790\u534f\u8bae\uff09\u5e7f\u64ad\uff0cnetworkstack\u5e93\u9700\u8981\u67e5\u627e\u76ee\u6807IP\u5730\u5740\u3002\u5b83\u8fd8\u9700\u8981\u77e5\u9053\u7528\u4e8e\u53d1\u9001ARP\u5e7f\u64ad\u7684\u63a5\u53e3\u7684MAC\u5730\u5740\u3002\nARP\u7f13\u5b58\u9996\u5148\u68c0\u67e5\u76ee\u6807IP\u7684ARP\u6761\u76ee\u3002\u5982\u679c\u5b83\u5728\u7f13\u5b58\u4e2d\uff0c\u5e93\u51fd\u6570\u5c06\u8fd4\u56de\u7ed3\u679c\uff1aTarget IP=MAC\u3002\n\u67e5\u627e\u8def\u7531\u8868\uff0c\u67e5\u770b\u76ee\u6807IP\u5730\u5740\u662f\u5426\u4f4d\u4e8e\u672c\u5730\u8def\u7531\u8868\u4e0a\u7684\u4efb\u4f55\u5b50\u7f51\u4e0a\u3002\u5982\u679c\u662f\uff0c\u5e93\u5c06\u4f7f\u7528\u4e0e\u8be5\u5b50\u7f51\u5173\u8054\u7684\u63a5\u53e3\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5e93\u5c06\u4f7f\u7528\u5305\u542b\u9ed8\u8ba4\u7f51\u5173\u5b50\u7f51\u7684\u63a5\u53e3\u3002\n\u7f51\u7edc\u5e93\u53d1\u9001\u7b2c2\u5c42\uff08OSI\u6a21\u578b\u7684\u6570\u636e\u94fe\u8def\u5c42\uff09ARP\u8bf7\u6c42\uff1a\n\u5982\u679c\u8ba1\u7b97\u673a\u76f4\u63a5\u8fde\u63a5\u5230\u8def\u7531\u5668\uff0c\u8def\u7531\u5668\u4f1a\u7528ARP\u5e94\u7b54\uff08\u89c1\u4e0b\u6587\uff09\n\u5982\u679c\u8ba1\u7b97\u673a\u8fde\u63a5\u5230\u96c6\u7ebf\u5668\uff0c\u96c6\u7ebf\u5668\u5c06\u4ece\u6240\u6709\u5176\u4ed6\u7aef\u53e3\u5e7f\u64adARP\u8bf7\u6c42\u3002\u5982\u679c\u8def\u7531\u5668\u8fde\u63a5\u5728\u540c\u4e00\u4e2a&#34\uff1b\u7535\u7ebf&#34\uff1b\uff0c\u5b83\u5c06\u4ee5ARP\u56de\u590d\uff08\u89c1\u4e0b\u6587\uff09\u8fdb\u884c\u56de\u590d\u3002\n\u5982\u679c\u8ba1\u7b97\u673a\u8fde\u63a5\u5230\u4ea4\u6362\u673a\uff0c\u4ea4\u6362\u673a\u5c06\u68c0\u67e5\u5176localCAM/MAC\u8868\uff0c\u4ee5\u67e5\u770b\u54ea\u4e2a\u7aef\u53e3\u5177\u6709\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684MAC\u5730\u5740\u3002\u5982\u679c\u4ea4\u6362\u673a\u6ca1\u6709MAC\u5730\u5740\u6761\u76ee\uff0c\u5b83\u4f1a\u5c06ARP\u8bf7\u6c42\u91cd\u65b0\u5e7f\u64ad\u5230\u6240\u6709\u5176\u4ed6\u7aef\u53e3\u3002\n\u5982\u679c\u4ea4\u6362\u673a\u5728MAC/CAM\u8868\u4e2d\u6709\u4e00\u4e2a\u6761\u76ee\uff0c\u5b83\u4f1a\u5c06ARP\u8bf7\u6c42\u53d1\u9001\u5230\u5177\u6709\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684MAC\u5730\u5740\u7684\u7aef\u53e3\u3002\n\u5982\u679c\u8def\u7531\u5668\u5728\u540c\u4e00\u4e2a&#34\uff1b\u7535\u7ebf&#34\uff1b\uff0c\u5b83\u5c06\u4ee5ARP\u56de\u590d\uff08\u89c1\u4e0b\u6587\uff09\u8fdb\u884c\u56de\u590d\n\u73b0\u5728\uff0c\u7f51\u7edc\u5e93\u5177\u6709\u6211\u4eec\u7684DNS\u670d\u52a1\u5668\u6216\u9ed8\u8ba4\u7f51\u5173\u7684IP\u5730\u5740\uff0c\u5b83\u53ef\u4ee5\u6062\u590d\u5176DNS\u8fdb\u7a0b\uff1a\nDNS\u5ba2\u6237\u7aef\u4f7f\u75281023\u4ee5\u4e0a\u7684\u6e90\u7aef\u53e3\u5728DNS\u670d\u52a1\u5668\u4e0a\u5efa\u7acb\u5230UDP\u7aef\u53e353\u7684\u5957\u63a5\u5b57\u3002\n\u5982\u679c\u672c\u5730/ISP DNS\u670d\u52a1\u5668\u6ca1\u6709\uff0c\u5219\u9700\u8981\u8fdb\u884c\u9012\u5f52\u641c\u7d22\uff0c\u8be5\u641c\u7d22\u5c06\u6cbf\u7740DNS\u670d\u52a1\u5668\u5217\u8868\u5411\u4e0a\u6d41\u52a8\uff0c\u76f4\u5230\u5230\u8fbeSOA\uff0c\u5982\u679c\u627e\u5230\uff0c\u5219\u8fd4\u56de\u7b54\u6848\u3002\n\u4e00\u65e6\u6d4f\u89c8\u5668\u63a5\u6536\u5230\u76ee\u6807\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff0c\u5b83\u5c31\u4f1a\u4eceURL\u83b7\u53d6\u8be5\u5730\u5740\u548c\u7ed9\u5b9a\u7684\u7aef\u53e3\u53f7\uff08HTTP\u534f\u8bae\u9ed8\u8ba4\u4e3aport80\uff0cHTTPS\u9ed8\u8ba4\u4e3aPort443\uff09\uff0c\u5e76\u8c03\u7528\u540d\u4e3asocket\u7684\u7cfb\u7edf\u5e93\u51fd\u6570\uff0c\u8bf7\u6c42TCP\u5957\u63a5\u5b57\u6d41\u2014\u2014AF_INET/AF_INET6\u548cSOCK_\u6d41\u3002\n\u8be5\u8bf7\u6c42\u9996\u5148\u88ab\u4f20\u9012\u5230\u4f20\u8f93\u5c42\uff0c\u5728\u4f20\u8f93\u5c42\u4e2d\u8d77\u8349\u4e86\u4e00\u4e2aTCP\u6bb5\u3002\u76ee\u6807\u7aef\u53e3\u88ab\u6dfb\u52a0\u5230\u62a5\u5934\u4e2d\uff0c\u6e90\u7aef\u53e3\u4ece\u5185\u6838\u4e2d\u88ab\u5173\u95ed&#39\uff1bs\u52a8\u6001\u7aef\u53e3\u8303\u56f4\uff08ip_local_port_range inLinux\uff09\u3002\n\u8fd9\u4e2a\u7247\u6bb5\u88ab\u53d1\u9001\u5230\u7f51\u7edc\u5c42\uff0c\u7f51\u7edc\u5c42\u5c01\u88c5\u4e86\u4e00\u4e2a\u989d\u5916\u7684iPhone\u9605\u8bfb\u5668\u3002\u63d2\u5165\u76ee\u6807\u670d\u52a1\u5668\u548c\u5f53\u524d\u673a\u5668\u7684IP\u5730\u5740\u4ee5\u5f62\u6210\u6570\u636e\u5305\u3002\n\u6570\u636e\u5305\u63a5\u4e0b\u6765\u5230\u8fbe\u94fe\u8def\u5c42\u3002\u6dfb\u52a0\u4e00\u4e2a\u5e27\u5934\uff0c\u5176\u4e2d\u5305\u62ec\u673a\u5668\u7684MAC\u5730\u5740#39\uff1bs NIC\u4ee5\u53ca\u7f51\u5173\uff08\u672c\u5730\u8def\u7531\u5668\uff09\u7684MAC\u5730\u5740\u3002\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c\u5982\u679c\u5185\u6838\u4e0d\u77e5\u9053\u7f51\u5173\u7684MACaddress\uff0c\u5b83\u5fc5\u987b\u5e7f\u64ad\u4e00\u4e2aARP\u67e5\u8be2\u6765\u627e\u5230\u5b83\u3002\n\u5bf9\u4e8e\u5927\u591a\u6570\u5bb6\u5ead\u6216\u5c0f\u578b\u4f01\u4e1a\u7684\u4e92\u8054\u7f51\u8fde\u63a5\uff0c\u6570\u636e\u5305\u5c06\u4ece\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u4f20\u9001\uff0c\u53ef\u80fd\u4f1a\u901a\u8fc7\u672c\u5730\u7f51\u7edc\uff0c\u7136\u540e\u901a\u8fc7\u8c03\u5236\u89e3\u8c03\u5668\uff08\u8c03\u5236\u5668/\u89e3\u8c03\u5668\uff09\u8f6c\u6362\u6570\u5b571\u548c#39\uff1bs\u548c0&#39\uff1b\u8f6c\u6362\u6210\u9002\u5408\u901a\u8fc7\u7535\u8bdd\u3001\u7535\u7f06\u6216\u65e0\u7ebf\u7535\u8bdd\u8fde\u63a5\u4f20\u8f93\u7684\u6a21\u62df\u4fe1\u53f7\u3002\u5728\u8fde\u63a5\u7684\u53e6\u4e00\u7aef\u662f\u53e6\u4e00\u4e2a\u8c03\u5236\u89e3\u8c03\u5668\uff0c\u5b83\u5c06\u6a21\u62df\u4fe1\u53f7\u8f6c\u6362\u56de\u6570\u5b57\u6570\u636e\uff0c\u7531\u4e0b\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\u8fdb\u884c\u5904\u7406\uff0c\u5728\u4e0b\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\u4e0a\uff0c\u5c06\u8fdb\u4e00\u6b65\u5206\u6790from\u548cto\u5730\u5740\u3002\n\u5927\u591a\u6570\u5927\u578b\u4f01\u4e1a\u548c\u4e00\u4e9b\u8f83\u65b0\u7684\u4f4f\u5b85\u8fde\u63a5\u5c06\u91c7\u7528\u5149\u7ea4\u6216\u76f4\u63a5\u4ee5\u592a\u7f51\u8fde\u63a5\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u4ecd\u7136\u662f\u6570\u5b57\u7684\uff0c\u5e76\u76f4\u63a5\u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u7f51\u7edc\u8282\u70b9\u8fdb\u884c\u5904\u7406\u3002\n\u6700\u7ec8\uff0c\u6570\u636e\u5305\u5c06\u5230\u8fbe\u7ba1\u7406\u672c\u5730\u5b50\u7f51\u7684\u8def\u7531\u5668\u3002\u4ece\u90a3\u91cc\uff0c\u5b83\u5c06\u7ee7\u7eed\u8fdb\u5165\u81ea\u6cbb\u7cfb\u7edf#39\uff1bs\uff08AS\uff09\u8fb9\u754c\u8def\u7531\u5668\u3001\u5176\u4ed6ASE\uff0c\u6700\u540e\u8fde\u63a5\u5230\u76ee\u6807\u670d\u52a1\u5668\u3002\u6cbf\u9014\u7684\u6bcf\u4e2a\u8def\u7531\u5668\u4eceIP\u62a5\u5934\u4e2d\u63d0\u53d6\u76ee\u6807\u5730\u5740\uff0c\u5e76\u5c06\u5176\u8def\u7531\u5230\u9002\u5f53\u7684\u4e0b\u4e00\u8df3\u3002IP\u62a5\u5934\u4e2d\u7684\u751f\u5b58\u65f6\u95f4\uff08TTL\uff09\u5b57\u6bb5\u5bf9\u4e8e\u901a\u8fc7\u7684\u6bcf\u4e2a\u8def\u7531\u5668\u51cf\u5c11\u4e00\u4e2a\u3002\u5982\u679cTTL\u5b57\u6bb5\u4e3a\u96f6\u6216\u5f53\u524d\u8def\u7531\u5668\u961f\u5217\u4e2d\u6ca1\u6709\u7a7a\u95f4\uff08\u53ef\u80fd\u662f\u7531\u4e8e\u7f51\u7edc\u62e5\u585e\uff09\uff0c\u5219\u6570\u636e\u5305\u5c06\u88ab\u4e22\u5f03\u3002\n\u5ba2\u6237\u673a\u9009\u62e9\u4e00\u4e2a\u521d\u59cb\u5e8f\u5217\u53f7\uff08ISN\uff09\uff0c\u5e76\u5c06\u8bbe\u7f6e\u4e86SYN\u4f4d\u7684\u6570\u636e\u5305\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u4ee5\u6307\u793a\u5176\u6b63\u5728\u8bbe\u7f6eISN\n\u670d\u52a1\u5668\u5c06\uff08\u5ba2\u6237\u673aISN+1\uff09\u590d\u5236\u5230\u5176ACK\u5b57\u6bb5\uff0c\u5e76\u6dfb\u52a0ACK\u6807\u5fd7\uff0c\u4ee5\u6307\u793a\u5176\u6b63\u5728\u786e\u8ba4\u6536\u5230\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\n\u5f53\u53e6\u4e00\u65b9\u786e\u8ba4\u6536\u5230\u8be5\u6570\u636e\u5305\uff08\u6216\u4e00\u4e32\u6570\u636e\u5305\uff09\u65f6\uff0c\u5b83\u53d1\u9001\u4e00\u4e2aACK\u6570\u636e\u5305\uff0c\u5176ACK\u503c\u7b49\u4e8e\u4ece\u53e6\u4e00\u65b9\u6536\u5230\u7684\u6700\u540e\u4e00\u4e2a\u5e8f\u5217\n\u5ba2\u6237\u7aef\u8ba1\u7b97\u673a\u5411\u670d\u52a1\u5668\u53d1\u9001ClientHello\u6d88\u606f\uff0c\u5176\u4e2d\u5305\u542b\u5176\u4f20\u8f93\u5c42\u5b89\u5168\u6027\uff08TLS\uff09\u7248\u672c\u3001\u5bc6\u7801\u7b97\u6cd5\u5217\u8868\u548c\u53ef\u7528\u7684\u538b\u7f29\u65b9\u6cd5\u3002\n\u670d\u52a1\u5668\u7528ServerHello\u6d88\u606f\u5411\u5ba2\u6237\u7aef\u56de\u590dTLS\u7248\u672c\u3001\u6240\u9009\u5bc6\u7801\u3001\u6240\u9009\u538b\u7f29\u65b9\u6cd5\u548c\u670d\u52a1\u5668&#39\uff1b\u7531CA\uff08\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff09\u7b7e\u7f72\u7684spublic\u8bc1\u4e66\u3002\u8bc1\u4e66\u5305\u542b\u4e00\u4e2a\u516c\u94a5\uff0c\u5ba2\u6237\u7aef\u5c06\u4f7f\u7528\u8be5\u516c\u94a5\u52a0\u5bc6\u63e1\u624b\u7684\u5176\u4f59\u90e8\u5206\uff0c\u76f4\u5230\u53ef\u4ee5\u5546\u5b9a\u4e00\u4e2a\u5bf9\u79f0\u5bc6\u94a5\u3002\n\u5ba2\u6237\u7aef\u6839\u636e\u5176\u53d7\u4fe1\u4efb\u7684CA\u5217\u8868\u9a8c\u8bc1\u670d\u52a1\u5668\u6570\u5b57\u8bc1\u4e66\u3002\u5982\u679c\u53ef\u4ee5\u57fa\u4e8eCA\u5efa\u7acb\u4fe1\u4efb\uff0c\u5ba2\u6237\u7aef\u5c06\u751f\u6210\u4e00\u4e2a\u4f2a\u968f\u673a\u5b57\u8282\u5b57\u7b26\u4e32\uff0c\u5e76\u4f7f\u7528\u670d\u52a1\u5668\u5bf9\u5176\u8fdb\u884c\u52a0\u5bc6&#39\uff1bspublic\u94a5\u5319\u3002\u8fd9\u4e9b\u968f\u673a\u5b57\u8282\u53ef\u7528\u4e8e\u786e\u5b9a\u5bf9\u79f0\u5bc6\u94a5\u3002\n\u670d\u52a1\u5668\u4f7f\u7528\u5176\u79c1\u94a5\u89e3\u5bc6\u968f\u673a\u5b57\u8282\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e9b\u5b57\u8282\u751f\u6210\u81ea\u5df1\u7684\u5bf9\u79f0\u4e3b\u5bc6\u94a5\u526f\u672c\u3002\n\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u6761\u5b8c\u6210\u7684\u6d88\u606f\uff0c\u5e76\u4f7f\u7528\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u4f20\u8f93\u54c8\u5e0c\u3002\n\u670d\u52a1\u5668\u751f\u6210\u81ea\u5df1\u7684\u54c8\u5e0c\uff0c\u7136\u540e\u5bf9\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u54c8\u5e0c\u8fdb\u884c\u89e3\u5bc6\uff0c\u4ee5\u9a8c\u8bc1\u5176\u5339\u914d\u6027\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u5b83\u4f1a\u5c06\u81ea\u5df1\u5b8c\u6210\u7684\u6d88\u606f\u53d1\u9001\u5230\u5ba2\u6237\u7aef\uff0c\u5e76\u4f7f\u7528\u5bf9\u79f0\u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\u3002\n\u4ece\u73b0\u5728\u8d77\uff0cTLS\u4f1a\u8bdd\u5c06\u4f20\u8f93\u4f7f\u7528\u7ea6\u5b9a\u7684\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u7684\u5e94\u7528\u7a0b\u5e8f\uff08HTTP\uff09\u6570\u636e\u3002\n\u6709\u65f6\uff0c\u7531\u4e8e\u7f51\u7edc\u62e5\u585e\u6216\u786c\u4ef6\u8fde\u63a5\u4e0d\u826f\uff0cTLS\u5305\u5728\u5230\u8fbe\u6700\u7ec8\u76ee\u7684\u5730\u4e4b\u524d\u4f1a\u88ab\u4e22\u5f03\u3002\u7136\u540e\uff0c\u53d1\u9001\u8005\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u53cd\u5e94\u3002\u8fd9\u79cd\u7b97\u6cd5\u79f0\u4e3aTCP\u62e5\u585e\u63a7\u5236\u3002\u8fd9\u53d6\u51b3\u4e8e\u53d1\u9001\u8005\uff1b\u6700\u5e38\u89c1\u7684\u7b97\u6cd5\u662f\u65b0\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u7684cubic\u7b97\u6cd5\u548c\u51e0\u4e4e\u6240\u6709\u5176\u4ed6\u7cfb\u7edf\u4e0a\u7684New Reno\u7b97\u6cd5\u3002\n\u5bf9\u4e8e\u6bcf\u4e2a\u5df2\u786e\u8ba4\u7684\u6570\u636e\u5305\uff0c\u7a97\u53e3\u7684\u5927\u5c0f\u90fd\u4f1a\u7ffb\u500d\uff0c\u76f4\u5230\u8fbe\u5230&#39\uff1b\u6162\u542f\u52a8\u9608\u503c&#39\uff1b\u3002\u5728\u67d0\u4e9b\u5b9e\u73b0\u4e2d\uff0c\u8be5\u9608\u503c\u662f\u81ea\u9002\u5e94\u7684\u3002\n\u5728\u8fbe\u5230\u6162\u542f\u52a8\u9608\u503c\u540e\uff0c\u6bcf\u4e2a\u5df2\u786e\u8ba4\u7684\u6570\u636e\u5305\u7684\u7a97\u53e3\u90fd\u4f1a\u589e\u52a0\u3002\u5982\u679c\u4e00\u4e2a\u6570\u636e\u5305\u88ab\u4e22\u5f03\uff0c\u7a97\u53e3\u5c06\u4ee5\u6307\u6570\u5f62\u5f0f\u7f29\u5c0f\uff0c\u76f4\u5230\u53e6\u4e00\u4e2a\u6570\u636e\u5305\u88ab\u786e\u8ba4\u3002\n\u5982\u679c\u4f7f\u7528\u7684\u7f51\u7edc\u6d4f\u89c8\u5668\u662f\u7531\u8c37\u6b4c\u7f16\u5199\u7684\uff0c\u5b83\u5c06\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5c1d\u8bd5\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u534f\u5546\uff0c\u800c\u4e0d\u662f\u53d1\u9001\u4e00\u4e2aHTTPrequest\u6765\u68c0\u7d22\u9875\u9762\uff1b\u5347\u7ea7&#34\uff1b\u4eceHTTP\u5230SPDY\u534f\u8bae\u3002\n\u5982\u679c\u5ba2\u6237\u7aef\u4f7f\u7528HTTP\u534f\u8bae\u4e14\u4e0d\u652f\u6301SPDY\uff0c\u5219\u4f1a\u5411\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a\n\u5176\u4e2d\uff0c[other Header]\u6307\u7684\u662f\u4e00\u7cfb\u5217\u6309HTTP\u89c4\u8303\u683c\u5f0f\u5316\u7684\u4ee5\u5192\u53f7\u5206\u9694\u7684\u952e\u503c\u5bf9\uff0c\u5e76\u7531\u5355\u4e2a\u6362\u884c\u7b26\u5206\u9694\u3002\uff08\u8fd9\u5047\u8bbe\u6b63\u5728\u4f7f\u7528\u7684web\u6d4f\u89c8\u5668\u6ca1\u6709\u4efb\u4f55\u8fdd\u53cdHTTP\u89c4\u8303\u7684\u9519\u8bef\u3002\u8fd9\u8fd8\u5047\u8bbeweb\u6d4f\u89c8\u5668\u6b63\u5728\u4f7f\u7528HTTP/1.1\uff0c\u5426\u5219\u5b83\u53ef\u80fd\u4e0d\u4f1a\u5728\u8bf7\u6c42\u4e2d\u5305\u542b\u4e3b\u673a\u5934\uff0cGET\u8bf7\u6c42\u4e2d\u6307\u5b9a\u7684\u7248\u672c\u5c06\u662fHTTP/1.0\u6216HTTP/0.9\u3002\uff09\nHTTP/1.1\u5b9a\u4e49\u4e86&#34\uff1b\u5173\u95ed&#34\uff1b\u8fde\u63a5\u9009\u9879\uff0c\u7528\u4e8e\u53d1\u9001\u65b9\u5728\u54cd\u5e94\u5b8c\u6210\u540e\u53d1\u51fa\u8fde\u63a5\u5c06\u5173\u95ed\u7684\u4fe1\u53f7\u3002\u4f8b\u5982\n\u4e0d\u652f\u6301\u6301\u4e45\u8fde\u63a5\u7684HTTP/1.1\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5305\u62ec&#34\uff1b\u5173\u95ed&#34\uff1b\u6bcf\u4e2a\u6d88\u606f\u4e2d\u90fd\u6709\u8fde\u63a5\u9009\u9879\u3002\n\u5728\u53d1\u9001\u8bf7\u6c42\u548c\u6807\u9898\u540e\uff0cweb\u6d4f\u89c8\u5668\u4f1a\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u884c\u7a7a\u767d\u6362\u884c\u7b26\uff0c\u6307\u793a\u8bf7\u6c42\u7684\u5185\u5bb9\u5df2\u5b8c\u6210\u3002\n\u670d\u52a1\u5668\u7528\u8868\u793a\u8bf7\u6c42\u72b6\u6001\u7684\u54cd\u5e94\u4ee3\u7801\u8fdb\u884c\u54cd\u5e94\uff0c\u5e76\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7684\u54cd\u5e94\u8fdb\u884c\u54cd\u5e94\uff1a\n\u540e\u8ddf\u4e00\u6761\u6362\u884c\uff0c\u7136\u540e\u53d1\u9001www.google\u7684HTML\u5185\u5bb9\u7684\u6709\u6548\u8d1f\u8f7d\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002\u7136\u540e\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u5173\u95ed\u8fde\u63a5\uff0c\u6216\u8005\u5982\u679c\u5ba2\u6237\u673a\u53d1\u9001\u4e86\u8bf7\u6c42\u8fde\u63a5\u7684\u5934\uff0c\u5219\u4fdd\u6301\u8fde\u63a5\u6253\u5f00\uff0c\u4ee5\u4fbf\u91cd\u65b0\u7528\u4e8e\u8fdb\u4e00\u6b65\u7684\u8bf7\u6c42\u3002\n\u5982\u679cweb\u6d4f\u89c8\u5668\u53d1\u9001\u7684HTTP\u5934\u5305\u542b\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u4f7fweb\u670d\u52a1\u5668\u80fd\u591f\u786e\u5b9a\u81ea\u4e0a\u6b21\u68c0\u7d22\u4ee5\u6765\uff0cwebbrowser\u7f13\u5b58\u7684\u6587\u4ef6\u7248\u672c\u662f\u5426\u672a\u88ab\u4fee\u6539\uff08\u5373\uff0c\u5982\u679cweb\u6d4f\u89c8\u5668\u5305\u542bETag\u5934\uff09\uff0c\u5219\u5b83\u53ef\u80fd\u4f1a\u6539\u4e3a\u54cd\u5e94\u4ee5\u4e0b\u8bf7\u6c42\uff1a\n\u89e3\u6790HTML\u540e\uff0cweb\u6d4f\u89c8\u5668\uff08\u548c\u670d\u52a1\u5668\uff09\u5bf9HTML\u9875\u9762\u5f15\u7528\u7684\u6bcf\u4e2a\u8d44\u6e90\uff08\u56fe\u50cf\u3001CSS\u3001favicon.ico\u7b49\uff09\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u9664\u4e86GET/HTTP/1.1\u4e4b\u5916\uff0c\u8bf7\u6c42\u5c06\u662fGET/$\uff08\u76f8\u5bf9\u4e8ewww.google.com\u7684URL\uff09HTTP/1.1\u3002\n\u5982\u679cHTML\u5f15\u7528\u4e86\u4e0ewww.google\u4e0d\u540c\u7684\u57df\u4e0a\u7684\u8d44\u6e90\u3002com\uff0cweb\u6d4f\u89c8\u5668\u8fd4\u56de\u5230\u89e3\u6790\u53e6\u4e00\u4e2a\u57df\u6240\u6d89\u53ca\u7684\u6b65\u9aa4\uff0c\u5e76\u9075\u5faa\u8be5\u57df\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u6240\u6709\u6b65\u9aa4\u3002\u8bf7\u6c42\u4e2d\u7684\u4e3b\u673a\u5934\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u9002\u5f53\u7684\u670d\u52a1\u5668\u540d\uff0c\u800c\u4e0d\u662fgoogle\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002\nHTTPD\uff08HTTP\u5b88\u62a4\u8fdb\u7a0b\uff09\u670d\u52a1\u5668\u662f\u5728\u670d\u52a1\u5668\u7aef\u5904\u7406\u8bf7\u6c42/\u54cd\u5e94\u7684\u670d\u52a1\u5668\u3002\u6700\u5e38\u89c1\u7684HTTPD\u670d\u52a1\u5668\u662f\u7528\u4e8elinux\u7684Apache\u6216nginx\uff0c\u4ee5\u53ca\u7528\u4e8eWindows\u7684IIS\u3002\nHTTP\u8bf7\u6c42\u65b9\u6cd5\uff08GET\u3001HEAD\u3001POST\u3001PUT\u3001PATCH\u3001DELETE\u3001CONNECT\u3001OPTIONS\u6216TRACE\uff09\u3002\u5982\u679c\u76f4\u63a5\u5728\u5730\u5740\u680f\u4e2d\u8f93\u5165URL\uff0c\u5219\u5c06\u83b7\u53d6\u8be5URL\u3002\n\u8bf7\u6c42\u7684\u8def\u5f84/\u9875\u9762\uff0c\u5728\u672c\u4f8b\u4e2d-/\uff08\u56e0\u4e3a\u6ca1\u6709\u8bf7\u6c42\u7279\u5b9a\u7684\u8def\u5f84/\u9875\u9762\uff0c/\u662f\u9ed8\u8ba4\u8def\u5f84\uff09\u3002\n\u670d\u52a1\u5668\u9a8c\u8bc1\u670d\u52a1\u5668\u4e0a\u662f\u5426\u914d\u7f6e\u4e86\u4e0egoogle\u5bf9\u5e94\u7684\u865a\u62df\u4e3b\u673a\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002\n\u670d\u52a1\u5668\u9a8c\u8bc1\u662f\u5426\u5141\u8bb8\u5ba2\u6237\u7aef\u4f7f\u7528\u6b64\u65b9\u6cd5\uff08\u901a\u8fc7IP\u3001\u8eab\u4efd\u9a8c\u8bc1\u7b49\uff09\u3002\n\u5982\u679c\u670d\u52a1\u5668\u5b89\u88c5\u4e86\u91cd\u5199\u6a21\u5757\uff08\u5982Apache\u7684mod_rewrite\u6216IIS\u7684URL rewrite\uff09\uff0c\u5b83\u4f1a\u5c1d\u8bd5\u6839\u636e\u914d\u7f6e\u7684\u89c4\u5219\u4e4b\u4e00\u5339\u914d\u8bf7\u6c42\u3002\u5982\u679c\u627e\u5230\u5339\u914d\u89c4\u5219\uff0c\u670d\u52a1\u5668\u5c06\u4f7f\u7528\u8be5\u89c4\u5219\u5199\u5165\u8bf7\u6c42\u3002\n\u670d\u52a1\u5668\u53bb\u63d0\u53d6\u4e0e\u8bf7\u6c42\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u5b83\u5c06\u8fd4\u56de\u5230\u7d22\u5f15\u6587\u4ef6\uff0c\u5982&#34/&#34; \u662f\u4e3b\u6587\u4ef6\uff08\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8986\u76d6\u6b64\u6587\u4ef6\uff0c\u4f46\u8fd9\u662f\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\uff09\u3002\n\u670d\u52a1\u5668\u6839\u636e\u5904\u7406\u7a0b\u5e8f\u89e3\u6790\u6587\u4ef6\u3002\u5982\u679cGoogle\u5728PHP\u4e0a\u8fd0\u884c\uff0c\u670d\u52a1\u5668\u5c06\u4f7f\u7528PHP\u89e3\u91ca\u7d22\u5f15\u6587\u4ef6\uff0c\u5e76\u5c06\u8f93\u51fa\u6d41\u5f0f\u4f20\u8f93\u5230\u5ba2\u6237\u7aef\u3002\n\u4e00\u65e6\u670d\u52a1\u5668\u5411\u6d4f\u89c8\u5668\u63d0\u4f9b\u8d44\u6e90\uff08HTML\u3001CSS\u3001JS\u3001\u56fe\u50cf\u7b49\uff09\uff0c\u5b83\u5c06\u7ecf\u5386\u4ee5\u4e0b\u8fc7\u7a0b\uff1a\n\u6e32\u67d3-\u6784\u9020DOM\u6811\u2192 \u6e32\u67d3\u6811\u2192 \u6e32\u67d3\u6811\u7684\u5e03\u5c40\u2192\u7ed8\u5236\u6e32\u67d3\u6811\n\u6d4f\u89c8\u5668&#39\uff1bs\u7684\u529f\u80fd\u662f\u901a\u8fc7\u4ece\u670d\u52a1\u5668\u8bf7\u6c42\u5e76\u5728\u6d4f\u89c8\u5668\u7a97\u53e3\u4e2d\u663e\u793a\u6240\u9009\u7684web\u8d44\u6e90\u6765\u5448\u73b0\u8be5\u8d44\u6e90\u3002\u8d44\u6e90\u901a\u5e38\u662fHTML\u6587\u6863\uff0c\u4f46\u4e5f\u53ef\u80fd\u662fPDF\u3001\u56fe\u50cf\u6216\u5176\u4ed6\u7c7b\u578b\u7684\u5185\u5bb9\u3002\u8d44\u6e90\u7684\u4f4d\u7f6e\u662f\u6307\u5b9a\u7684\n......", "note_en": "This repository is an attempt to answer the age-old interview question &#34;Whathappens when you type google.com into your browser&#39;s address box and pressenter?&#34;\n Except instead of the usual story, we&#39;re going to try to answer this questionin as much detail as possible. No skipping out on anything.\n This is a collaborative process, so dig in and try to help out! There are tonsof details missing, just waiting for you to add them! So send us a pullrequest, please!\n  Read this in  \u7b80\u4f53\u4e2d\u6587 (simplified Chinese),  \u65e5\u672c\u8a9e (Japanese),  \ud55c\uad6d\uc5b4(Korean) and  Spanish. NOTE: these have not been reviewed by the alex/what-happens-whenmaintainers.\n      The following sections explain the physical keyboard actionsand the OS interrupts. When you press the key &#34;g&#34; the browser receives theevent and the auto-complete functions kick in.Depending on your browser&#39;s algorithm and if you are inprivate/incognito mode or not various suggestions will be presentedto you in the dropdown below the URL bar. Most of these algorithms sortand prioritize results based on search history, bookmarks, cookies, andpopular searches from the internet as a whole. As you are typing&#34;google.com&#34; many blocks of code run and the suggestions will be refinedwith each keypress. It may even suggest &#34;google.com&#34; before you finish typingit.\n   To pick a zero point, let&#39;s choose the Enter key on the keyboard hitting thebottom of its range. At this point, an electrical circuit specific to the enterkey is closed (either directly or capacitively). This allows a small amount ofcurrent to flow into the logic circuitry of the keyboard, which scans the stateof each key switch, debounces the electrical noise of the rapid intermittentclosure of the switch, and converts it to a keycode integer, in this case 13.The keyboard controller then encodes the keycode for transport to the computer.This is now almost universally over a Universal Serial Bus (USB) or Bluetoothconnection, but historically has been over PS/2 or ADB connections.\n  The USB circuitry of the keyboard is powered by the 5V supply provided overpin 1 from the computer&#39;s USB host controller.\n  The host USB controller polls that &#34;endpoint&#34; every ~10ms (minimum valuedeclared by the keyboard), so it gets the keycode value stored on it.\n This value goes to the USB SIE (Serial Interface Engine) to be converted inone or more USB packets that follow the low-level USB protocol.\n Those packets are sent by a differential electrical signal over D+ and D-pins (the middle 2) at a maximum speed of 1.5 Mb/s, as an HID(Human Interface Device) device is always declared to be a &#34;low-speed device&#34;(USB 2.0 compliance).\n This serial signal is then decoded at the computer&#39;s host USB controller, andinterpreted by the computer&#39;s Human Interface Device (HID) universal keyboarddevice driver. The value of the key is then passed into the operatingsystem&#39;s hardware abstraction layer.\n  When the user puts their finger on a modern capacitive touch screen, atiny amount of current gets transferred to the finger. This completes thecircuit through the electrostatic field of the conductive layer andcreates a voltage drop at that point on the screen. The screen controller then raises an interrupt reporting the coordinate ofthe keypress.\n Then the mobile OS notifies the currently focused application of a press eventin one of its GUI elements (which now is the virtual keyboard applicationbuttons).\n The virtual keyboard can now raise a software interrupt for sending a&#39;key pressed&#39; message back to the OS.\n   The keyboard sends signals on its interrupt request line (IRQ), which is mappedto an  interrupt vector (integer) by the interrupt controller. The CPU usesthe  Interrupt Descriptor Table (IDT) to map the interrupt vectors tofunctions ( interrupt handlers) which are supplied by the kernel. When aninterrupt arrives, the CPU indexes the IDT with the interrupt vector and runsthe appropriate handler. Thus, the kernel is entered.\n   The HID transport passes the key down event to the  KBDHID.sys driver whichconverts the HID usage into a scancode. In this case, the scan code is VK_RETURN ( 0x0D). The  KBDHID.sys driver interfaces with the KBDCLASS.sys (keyboard class driver). This driver is responsible forhandling all keyboard and keypad input in a secure manner. It then calls into Win32K.sys (after potentially passing the message through 3rd partykeyboard filters that are installed). This all happens in kernel mode.\n Win32K.sys figures out what window is the active window through the GetForegroundWindow() API. This API provides the window handle of thebrowser&#39;s address box. The main Windows &#34;message pump&#34; then calls SendMessage(hWnd, WM_KEYDOWN, VK_RETURN, lParam).  lParam is a bitmaskthat indicates further information about the keypress: repeat count (0 in thiscase), the actual scan code (can be OEM dependent, but generally wouldn&#39;t befor  VK_RETURN), whether extended keys (e.g. alt, shift, ctrl) were alsopressed (they weren&#39;t), and some other state.\n The Windows  SendMessage API is a straightforward function thatadds the message to a queue for the particular window handle ( hWnd).Later, the main message processing function (called a  WindowProc) assignedto the  hWnd is called in order to process each message in the queue.\n The window ( hWnd) that is active is actually an edit control and the WindowProc in this case has a message handler for  WM_KEYDOWN messages.This code looks within the 3rd parameter that was passed to  SendMessage( wParam) and, because it is  VK_RETURN knows the user has hit the ENTERkey.\n   The interrupt signal triggers an interrupt event in the I/O Kit kext keyboarddriver. The driver translates the signal into a key code which is passed to theOS X  WindowServer process. Resultantly, the  WindowServer dispatches anevent to any appropriate (e.g. active or listening) applications through theirMach port where it is placed into an event queue. Events can then be read fromthis queue by threads with sufficient privileges calling the mach_ipc_dispatch function. This most commonly occurs through, and ishandled by, an  NSApplication main event loop, via an  NSEvent of NSEventType  KeyDown.\n   When a graphical  X server is used,  X will use the generic eventdriver  evdev to acquire the keypress. A re-mapping of keycodes to scancodesis made with  X server specific keymaps and rules.When the scancode mapping of the key pressed is complete, the  X serversends the character to the  window manager (DWM, metacity, i3, etc), so the window manager in turn sends the character to the focused window.The graphical API of the window that receives the character prints theappropriate font symbol in the appropriate focused field.\n      When no protocol or valid domain name is given the browser proceeds to feedthe text given in the address box to the browser&#39;s default web search engine.In many cases the URL has a special piece of text appended to it to tell thesearch engine that it came from a particular browser&#39;s URL bar.\n   The browser checks the hostname for characters that are not in  a-z, A-Z,  0-9,  -, or  ..\n Since the hostname is  google.com there won&#39;t be any, but if there werethe browser would apply  Punycode encoding to the hostname portion of theURL.\n   The browser checks its &#34;preloaded HSTS (HTTP Strict Transport Security)&#34;list. This is a list of websites that have requested to be contacted viaHTTPS only.\n If the website is in the list, the browser sends its request via HTTPSinstead of HTTP. Otherwise, the initial request is sent via HTTP.(Note that a website can still use the HSTS policy  without being in theHSTS list. The first HTTP request to the website by a user will receive aresponse requesting that the user only send HTTPS requests. However, thissingle HTTP request could potentially leave the user vulnerable to a downgrade attack, which is why the HSTS list is included in modern webbrowsers.)\n   Browser checks if the domain is in its cache. (to see the DNS Cache inChrome, go to chrome://net-internals/#dns).\n If not found, the browser calls  gethostbyname library function (varies byOS) to do the lookup.\n gethostbyname checks if the hostname can be resolved by reference in thelocal  hosts file (whose location  varies by OS) before trying toresolve the hostname through DNS.\n If  gethostbyname does not have it cached nor can find it in the  hostsfile then it makes a request to the DNS server configured in the networkstack. This is typically the local router or the ISP&#39;s caching DNS server.\n If the DNS server is on the same subnet the network library follows the ARP process below for the DNS server.\n If the DNS server is on a different subnet, the network library followsthe  ARP process below for the default gateway IP.\n   In order to send an ARP (Address Resolution Protocol) broadcast the networkstack library needs the target IP address to lookup. It also needs to know theMAC address of the interface it will use to send out the ARP broadcast.\n The ARP cache is first checked for an ARP entry for our target IP. If it is inthe cache, the library function returns the result: Target IP = MAC.\n  The route table is looked up, to see if the Target IP address is on any ofthe subnets on the local route table. If it is, the library uses theinterface associated with that subnet. If it is not, the library uses theinterface that has the subnet of our default gateway.\n  The network library sends a Layer 2 (data link layer of the  OSI model)ARP request:\n     If the computer is directly connected to the router the router responsewith an  ARP Reply (see below)\n  If the computer is connected to a hub, the hub will broadcast the ARPrequest out of all other ports. If the router is connected on the same &#34;wire&#34;,it will respond with an  ARP Reply (see below).\n  If the computer is connected to a switch, the switch will check its localCAM/MAC table to see which port has the MAC address we are looking for. Ifthe switch has no entry for the MAC address it will rebroadcast the ARPrequest to all other ports.\n If the switch has an entry in the MAC/CAM table it will send the ARP requestto the port that has the MAC address we are looking for.\n If the router is on the same &#34;wire&#34;, it will respond with an  ARP Reply(see below)\n   Now that the network library has the IP address of either our DNS server orthe default gateway it can resume its DNS process:\n The DNS client establishes a socket to UDP port 53 on the DNS server,using a source port above 1023.\n  If the local/ISP DNS server does not have it, then a recursive search isrequested and that flows up the list of DNS servers until the SOA is reached,and if found an answer is returned.\n   Once the browser receives the IP address of the destination server, it takesthat and the given port number from the URL (the HTTP protocol defaults to port80, and HTTPS to port 443), and makes a call to the system library functionnamed  socket and requests a TCP socket stream -  AF_INET/AF_INET6 and SOCK_STREAM.\n This request is first passed to the Transport Layer where a TCP segment iscrafted. The destination port is added to the header, and a source port ischosen from within the kernel&#39;s dynamic port range (ip_local_port_range inLinux).\n This segment is sent to the Network Layer, which wraps an additional IPheader. The IP address of the destination server as well as that of thecurrent machine is inserted to form a packet.\n The packet next arrives at the Link Layer. A frame header is added thatincludes the MAC address of the machine&#39;s NIC as well as the MAC address ofthe gateway (local router). As before, if the kernel does not know the MACaddress of the gateway, it must broadcast an ARP query to find it.\n   For most home or small business Internet connections the packet will pass fromyour computer, possibly through a local network, and then through a modem(MOdulator/DEModulator) which converts digital 1&#39;s and 0&#39;s into an analogsignal suitable for transmission over telephone, cable, or wireless telephonyconnections. On the other end of the connection is another modem which convertsthe analog signal back into digital data to be processed by the next  networknode where the from and to addresses would be analyzed further.\n Most larger businesses and some newer residential connections will have fiberor direct Ethernet connections in which case the data remains digital andis passed directly to the next  network node for processing.\n Eventually, the packet will reach the router managing the local subnet. Fromthere, it will continue to travel to the autonomous system&#39;s (AS) borderrouters, other ASes, and finally to the destination server. Each router alongthe way extracts the destination address from the IP header and routes it tothe appropriate next hop. The time to live (TTL) field in the IP header isdecremented by one for each router that passes. The packet will be dropped ifthe TTL field reaches zero or if the current router has no space in its queue(perhaps due to network congestion).\n  Client chooses an initial sequence number (ISN) and sends the packet to theserver with the SYN bit set to indicate it is setting the ISN\n Server copies the (client ISN +1) to its ACK field and adds the ACK flagto indicate it is acknowledging receipt of the first packet\n  When the other side acknowledges receipt of that packet (or a string ofpackets), it sends an ACK packet with the ACK value equal to the lastreceived sequence from the other\n   The client computer sends a  ClientHello message to the server with itsTransport Layer Security (TLS) version, list of cipher algorithms andcompression methods available.\n The server replies with a  ServerHello message to the client with theTLS version, selected cipher, selected compression methods and the server&#39;spublic certificate signed by a CA (Certificate Authority). The certificatecontains a public key that will be used by the client to encrypt the rest ofthe handshake until a symmetric key can be agreed upon.\n The client verifies the server digital certificate against its list oftrusted CAs. If trust can be established based on the CA, the clientgenerates a string of pseudo-random bytes and encrypts this with the server&#39;spublic key. These random bytes can be used to determine the symmetric key.\n The server decrypts the random bytes using its private key and uses thesebytes to generate its own copy of the symmetric master key.\n The client sends a  Finished message to the server, encrypting a hash ofthe transmission up to this point with the symmetric key.\n The server generates its own hash, and then decrypts the client-sent hashto verify that it matches. If it does, it sends its own  Finished messageto the client, also encrypted with the symmetric key.\n From now on the TLS session transmits the application (HTTP) data encryptedwith the agreed symmetric key.\n   Sometimes, due to network congestion or flaky hardware connections, TLS packetswill be dropped before they get to their final destination. The sender then hasto decide how to react. The algorithm for this is called  TCP congestioncontrol. This varies depending on the sender; the most common algorithms are cubic on newer operating systems and  New Reno on almost all others.\n For each packet acknowledged, the window doubles in size until it reaches the&#39;slow-start threshold&#39;. In some implementations, this threshold is adaptive.\n After reaching the slow-start threshold, the window increases additively foreach packet acknowledged. If a packet is dropped, the window reducesexponentially until another packet is acknowledged.\n   If the web browser used was written by Google, instead of sending an HTTPrequest to retrieve the page, it will send a request to try and negotiate withthe server an &#34;upgrade&#34; from HTTP to the SPDY protocol.\n If the client is using the HTTP protocol and does not support SPDY, it sends arequest to the server of the form:\n  where  [other headers] refers to a series of colon-separated key-value pairsformatted as per the HTTP specification and separated by single newlines.(This assumes the web browser being used doesn&#39;t have any bugs violating theHTTP spec. This also assumes that the web browser is using  HTTP/1.1,otherwise it may not include the  Host header in the request and the versionspecified in the  GET request will either be  HTTP/1.0 or  HTTP/0.9.)\n HTTP/1.1 defines the &#34;close&#34; connection option for the sender to signal thatthe connection will be closed after completion of the response. For example,\n  HTTP/1.1 applications that do not support persistent connections MUST includethe &#34;close&#34; connection option in every message.\n After sending the request and headers, the web browser sends a single blanknewline to the server indicating that the content of the request is done.\n The server responds with a response code denoting the status of the request andresponds with a response of the form:\n  Followed by a single newline, and then sends a payload of the HTML content of www.google.com. The server may then either close the connection, or ifheaders sent by the client requested it, keep the connection open to be reusedfor further requests.\n If the HTTP headers sent by the web browser included sufficient information forthe webserver to determine if the version of the file cached by the webbrowser has been unmodified since the last retrieval (ie. if the web browserincluded an  ETag header), it may instead respond with a request ofthe form:\n   After parsing the HTML, the web browser (and server) repeats this processfor every resource (image, CSS, favicon.ico, etc) referenced by the HTML page,except instead of  GET / HTTP/1.1 the request will be GET /$(URL relative to www.google.com) HTTP/1.1.\n If the HTML referenced a resource on a different domain than www.google.com, the web browser goes back to the steps involved inresolving the other domain, and follows all steps up to this point for thatdomain. The  Host header in the request will be set to the appropriateserver name instead of  google.com.\n   The HTTPD (HTTP Daemon) server is the one handling the requests/responses onthe server-side. The most common HTTPD servers are Apache or nginx for Linuxand IIS for Windows.\n HTTP Request Method (either  GET,  HEAD,  POST,  PUT, PATCH,  DELETE,  CONNECT,  OPTIONS, or  TRACE). In thecase of a URL entered directly into the address bar, this will be  GET.\n  Requested path/page, in this case - / (as no specific path/page wasrequested, / is the default path).\n The server verifies that there is a Virtual Host configured on the serverthat corresponds with google.com.\n  The server verifies that the client is allowed to use this method(by IP, authentication, etc.).\n If the server has a rewrite module installed (like mod_rewrite for Apache orURL Rewrite for IIS), it tries to match the request against one of theconfigured rules. If a matching rule is found, the server uses that rule torewrite the request.\n The server goes to pull the content that corresponds with the request,in our case it will fall back to the index file, as &#34;/&#34; is the main file(some cases can override this, but this is the most common method).\n The server parses the file according to the handler. If Googleis running on PHP, the server uses PHP to interpret the index file, andstreams the output to the client.\n   Once the server supplies the resources (HTML, CSS, JS, images, etc.)to the browser it undergoes the below process:\n Rendering - Construct DOM Tree \u2192 Render Tree \u2192 Layout of Render Tree \u2192Painting the render tree\n   The browser&#39;s functionality is to present the web resource you choose, byrequesting it from the server and displaying it in the browser window.The resource is usually an HTML document, but may also be a PDF,image, or some other type of content. The location of the resource isspecified\n......", "posttime": "2022-02-17 03:12:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,\u6d4f\u89c8\u5668,press,\u670d\u52a1\u5668", "title": "\u5f53\u4f60\u8f93\u5165\u8c37\u6b4c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u8fdb\u5165\u6d4f\u89c8\u5668\uff0c\u7136\u540e\u6309enter\uff1f", "title_en": "What happens when you type google.com into the browser and press enter?", "transed": 1, "url": "https://github.com/alex/what-happens-when", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "\u6d4f\u89c8\u5668", "press", "\u670d\u52a1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073677, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u5141\u8bb8\u4f7f\u7528\u7528\u6237\u5b9a\u4e49\u7684\u8ba1\u7b97\u6548\u679c\u8fdb\u884c\u7f16\u7a0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u5305\u62ec\u81ea\u5b9a\u4e49\u8f7b\u91cf\u7ea7\u5e76\u53d1\uff08\u7ebf\u7a0b\u3001\u5f02\u6b65\u7b49\u5f85\u3001\u53c2\u4e0e\u8005\u3001\u751f\u6210\u5668\uff09\u3001\u9519\u8bef\u5904\u7406\u3001\u4f9d\u8d56\u9879\u6ce8\u5165\u7b49\u3002\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u8d77\u6e90\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\u9886\u57df\uff0c\u8fd9\u4e2a\u9ad8\u5ea6\u5b9e\u9a8c\u6027\u7684\u5e93\u7684\u4e3b\u8981\u76ee\u6807\u662f\u63a2\u7d22\u5b83\u4eec\u5982\u4f55\u9002\u5408\u4e8e\u9762\u5411\u5bf9\u8c61\u7684C++\u8bbe\u7f6e\u3002\n\u8be5\u5e93\u4f9d\u8d56\u4e8e\u73b0\u4ee3C++\u7279\u6027\uff08\u79fb\u52a8\u8bed\u4e49\u3001\u53ef\u53d8\u6a21\u677f\u3001\u7f16\u8bd1\u65f6\u8bc4\u4f30\uff09\uff0c\u4ee5\u5b9e\u73b0\u4f18\u96c5\u7684\u7a0b\u5e8f\u5458\u7ea7\u63a5\u53e3\u3001\u5904\u7406\u7a0b\u5e8f\u7684\u5185\u5b58\u7ba1\u7406\u548c\u76f8\u5bf9\u7c7b\u578b\u5b89\u5168\u6027\u3002\u5728\u5185\u90e8\uff0c\u5b83\u4f7f\u7528boost:\uff1acontext\u5e93\u8fdb\u884c\u8c03\u7528\u5806\u6808\u64cd\u4f5c\uff0c\u56e0\u6b64\u5b83\u53ea\u5b9e\u73b0\u4e86\u4e00\u6b21\u6027\u5904\u7406\u7a0b\u5e8f\u3002\n\u53c2\u8003\u8d44\u6599\u2014\u2014\u56fe\u4e66\u9986\u7684\u8be6\u7ec6\u8bf4\u660e&#39\uff1bs API\u548c\u5173\u4e8e\u5e93\u7684\u603b\u4f53\u8bbe\u8ba1\u7684\u7b80\u77ed\u8ba8\u8bba\u3002\u5bf9\u4e8e\u5df2\u7ecf\u719f\u6089\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u7684\u8bfb\u8005\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5408\u9002\u7684\u4ecb\u7ecd\uff08\u4f8b\u5982\uff0c\u901a\u5e38\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u8ba8\u8bba\u6548\u679c\u5904\u7406\u7a0b\u5e8f\uff09\u3002\n\u5373\u5c06\u5230\u6765\uff1a\u6559\u7a0b-\u4ecb\u7ecd\u4f7f\u7528\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u7f16\u7a0b\u3002\u9002\u5408\u4e0d\u719f\u6089\u5904\u7406\u7a0b\u5e8f\u7684\u8bfb\u8005\u3002\n\u4f5c\u4e3a\u4e00\u4e2a\u9884\u89c8\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u4e3a\u534f\u4f5c\u8f7b\u91cf\u7ea7\u7ebf\u7a0b\u5b9a\u4e49\u6211\u4eec\u81ea\u5df1\u7684\u5c0f\u5e93\u3002\u7a0b\u5e8f\u5458&#39\uff1bs\u63a5\u53e3\u5c06\u5305\u62ec\u4e24\u4e2a\u51fd\u6570\uff0cyield\u548cfork\uff0c\u4ee5\u53ca\u4e00\u4e2a\u5b9e\u73b0\u8c03\u5ea6\u5668\u7684\u7c7b\uff1a\n\u7a7a\u9699\u7387\uff08\uff09\uff1b//\u7ebf\u7a0b\u7528\u6765\u653e\u5f03\u63a7\u5236void fork\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bproc\uff09\uff1b//\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u7c7b\u8c03\u5ea6\u7a0b\u5e8f{public:static void Start\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bf\uff09\uff1b}\uff1b\n\u9759\u6001\u6210\u5458\u51fd\u6570Start\u4ee5f\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u4e3b\u4f53\u542f\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u3002\u5f53\u6240\u6709\u7ebf\u7a0b\u5b8c\u6210\u4efb\u52a1\u65f6\uff0c\u5b83\u8fd4\u56de\u3002\n\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e24\u4e2a\u547d\u4ee4\uff0c\u5b83\u4eec\u662f\u7528\u4e8e\u5c06\u63a7\u5236\u4ece\u5ba2\u6237\u673a\u4ee3\u7801\u4f20\u8f93\u5230\u5904\u7406\u7a0b\u5e8f\u7684\u6570\u636e\u7ed3\u6784\u3002\u6211\u4eec\u5b9e\u73b0\u4e86yield\u548cfork\u6765\u8c03\u7528\u8fd9\u4e9b\u547d\u4ee4\u3002\uff08OneShot\u7c7b\u7684\u540d\u79f0\u5e94\u8be5\u662f\u63d0\u9192\u7a0b\u5e8f\u5458\uff0c\u6211\u4eec\u53ea\u5904\u7406\u5355\u6b21\u5904\u7406\u7a0b\u5e8f\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u80fd\u4e24\u6b21\u6062\u590d\u76f8\u540c\u7684\u6062\u590d\uff09\u3002\n#\u5305\u62ec&#34\uff1bcpp\u6548\u5e94/cpp\u6548\u5e94\u3002h&#34\uff1b\u4f7f\u7528\u540d\u79f0\u7a7a\u95f4\u6548\u679c\uff1b\u7ed3\u6784\u5c48\u670d\uff1a\u547d\u4ee4&lt\uff1bvoid&gt\uff1b{ }; struct Fork:Command&lt\uff1bvoid&gt\uff1b{std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bproc\uff1b}\uff1bvoid yield\uff08\uff09{OneShot:\uff1aInvokeCmd\uff08yield{}\uff09\uff1b}void fork\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bproc\uff09{OneShot:\uff1aInvokeCmd\uff08Fork{}\uff0cproc}\uff09\uff1b}\n\u6211\u4eec\u5b9a\u4e49\u4e86\u8c03\u5ea6\u5668\uff0c\u5b83\u662f\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u6062\u590d\uff08\u5373\u6355\u83b7\u7684\u7ee7\u7eed\uff09\u63a8\u9001\u5230\u961f\u5217\u6765\u89e3\u91ca\u8fd9\u4e24\u4e2a\u547d\u4ee4\u3002\n//Res\u662f\u4f7f\u7528Res=std:\uff1aunique_ptr&lt\uff1b\u6062\u590d&lt\uff1bvoid\uff0cvoid&gt&gt\uff1b\uff1b\u7c7b\u8c03\u5ea6\u7a0b\u5e8f\uff1a\u516c\u5171\u5904\u7406\u7a0b\u5e8f&lt\uff1b\u65e0\u6548\uff0c\u65e0\u6548\uff0c\u5c48\u670d\uff0c\u5206\u53c9&gt\uff1b{public:static void Start\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1bf\uff09{Run\uff08f\uff09\uff1bwhile\uff08\uff01queue.empty\uff08\uff09\uff09{//\u5faa\u73af\u8c03\u5ea6\u81ea\u52a8\u6062\u590d=std:\uff1amove\uff08queue.front\uff08\uff09\uff09\uff1bqueue.pop_front\uff08\uff09\uff1bOneShot:\uff1aResume\uff08std:\uff1amove\uff08Resume\uff09\uff09\uff1b}\u79c1\u6709\uff1a\u9759\u6001\u6807\u51c6\uff1a\uff1a\u5217\u8868&lt\uff1bRes&gt\uff1b\u961f\u5217\u9759\u6001void\u8fd0\u884c\uff08std:\uff1afunction&lt\uff1bvoid\uff08\uff09&gt\uff1b\uff09{OneShot:\uff1aHandle&lt\uff1bScheduler&gt\uff1b\uff08f\uff09\uff1b}void CommandClause\uff08Yield\uff0cRes r\uff09\u91cd\u5199{queue.push_back\uff08std:\uff1amove\uff08r\uff09\uff09\uff1b}void CommandClause\uff08Fork f\uff0cRes r\uff09\u91cd\u5199{queue.push_back\uff08std:\uff1amove\uff08r\uff09\uff09\uff1bqueue.push_back\uff08OneShot:\uff1amakerestoration&lt\uff1bvoid&gt\uff1b\uff08std:\uff1abind\uff08Run\uff0cf.proc\uff09\uff09\uff1b}void ReturnClause\uff08\uff09\u8986\u76d6{}\uff1b\u6807\u51c6\uff1a\u5217\u8868&lt\uff1bRes&gt\uff1b\u8c03\u5ea6\u7a0b\u5e8f\uff1a\uff1a\u961f\u5217\uff1b\n\u90a3&#39\uff1b\u8fd9\u5c31\u662f\u4e00\u5207\uff01\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u51e0\u4e2a\u7ebf\u7a0b\u6765\u6d4b\u8bd5\u6211\u4eec\u7684\u5e93\uff1a\nvoid worker\uff08intk\uff09{for\uff08inti=0\uff1bi&lt\uff1b10\uff1b++i\uff09{std:\uff1acout&lt\uff1b&lt\uff1bk\uff1byield\uff08\uff09\uff1b}void starter\uff08\uff09{for\uff08int i=0\uff1bi&lt\uff1b5\uff1b++i\uff09{fork\uff08std:\uff1abind\uff08worker\uff0ci\uff09\uff09\uff1b}int main\uff08\uff09{Scheduler:\uff1aStart\uff08starter\uff09\uff1b//Output://0102103210432104321043210432104321043210432104432434}\n[1] -\u5728\u5e93\u4e2d\uff0c\u5904\u7406\u7a0b\u5e8f\u662f\u5bf9\u8c61\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u81ea\u7136\u5730\u5305\u542b\u4efb\u4f55\u6570\u636e\u3001\u8f85\u52a9\u51fd\u6570\u548c\u989d\u5916\u7684\u7a0b\u5e8f\u5458&#39\uff1bs\u63a5\u53e3\u3002\n\u7f16\u8bd1\u5e93\u548c\u793a\u4f8b\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u7528cmake\u3002\u5728\u4efb\u4f55\u975e\u53e4\u4ee3\u7248\u672c\u4e2d\u90fd\u9700\u8981cmake\u548cboost\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u5185\u5bb9\u53ef\u4ee5\u5728macOS\u4e0a\u5b9e\u73b0\uff1a\n\u8fd9\u5c06\u6784\u5efa\u5e93\u548c\u793a\u4f8b\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u4e00\u4e2a\u793a\u4f8b\u6765\u68c0\u67e5\u5b83\u662f\u5426\u6709\u6548\u3002\u4e0b\u9762\u5c06\u8fd0\u884c\u7ebf\u7a0b\u793a\u4f8b-\u60a8\u53ef\u4ee5\u5728\u8f93\u51fa\u4e2d\u770b\u5230\u7ebf\u7a0b\u7684\u4ea4\u9519\uff1a", "note_en": "Effect handlers allow for programming with user-defined computational effects, with applications including custom lightweight concurrency (threads, async-await, actors, generators), error handling, dependency injection, etc. Effect handlers originate from the realm of functional programming, and the main goal of this  highly experimental library is to explore how they fit in the more object-oriented setting of C++.\n The library relies on modern C++ features (move semantics, variadic templates, compile-time evaluation) to achieve elegant programmer-level interface, memory management of handlers, and relative type-safety. Internally, it uses the  boost::context library for call-stack manipulation, and so it implements one-shot handlers only.\n  Reference - A detailed explanation of the library&#39;s API and a short discussion about the overall design of the library. It is a suitable introduction for a reader already familiar with effect handlers (for example, as they are usually discussed in the context of functional programming).\n Coming soon: Tutorial - An introduction to programming with effect handlers. Suitable for readers not familiar with handlers.\n  As a sneak preview, we can use effect handlers to define our own tiny library for cooperative lightweight threads. The programmer&#39;s interface will consist of two functions,  yield and  fork, together with a class that implements a scheduler:\n void  yield();   // Used by a thread to give up control void  fork(std::function&lt; void()&gt; proc);   // Start a new thread class  Scheduler { public:  static  void  Start(std::function&lt; void()&gt; f);};\n The static member function  Start initiates the scheduler with  f as the body of the first thread. It returns when all threads finish their jobs.\n To implement this interface, we first define two  commands, which are data structures used for transferring control from the client code to the handler. We implement  yield and  fork to invoke these commands. (The name of the class  OneShot is supposed to remind the programmer that we&#39;re dealing with one-shot handlers only, meaning you cannot resume the same resumption twice).\n # include   &#34;cpp-effects/cpp-effects.h &#34; using  namespace  CppEffects ; struct  Yield : Command&lt; void&gt; { }; struct  Fork : Command&lt; void&gt; { std::function&lt; void()&gt; proc;}; void  yield(){  OneShot::InvokeCmd(Yield{});} void  fork(std::function&lt; void()&gt; proc){  OneShot::InvokeCmd(Fork{{}, proc});}\n We define the scheduler, which is a  handler that can interpret the two commands by pushing the resumptions (i.e., captured continuations) to the queue.\n // Res is the type of suspended threads using Res = std::unique_ptr&lt;Resumption&lt; void,  void&gt;&gt;; class  Scheduler :  public  Handler&lt; void,  void, Yield, Fork&gt; { public:  static  void  Start(std::function&lt; void()&gt; f) {  Run(f);  while (!queue. empty()) {   // Round-robin scheduling  auto resumption =  std::move(queue. front()); queue. pop_front();  OneShot::Resume( std::move(resumption)); } } private:  static std::list&lt;Res&gt; queue;  static  void  Run(std::function&lt; void()&gt;) { OneShot:: Handle&lt;Scheduler&gt;(f); }  void  CommandClause(Yield, Res r)  override { queue. push_back( std::move(r)); }  void  CommandClause(Fork f, Res r)  override { queue. push_back( std::move(r)); queue. push_back(OneShot::MakeResumption&lt; void&gt;( std::bind(Run, f. proc))); }  void  ReturnClause()  override { }};std::list&lt;Res&gt; Scheduler::queue;\n And that&#39;s all it takes! We can now test our library by starting a few threads:\n void  worker( int k){  for ( int i =  0; i &lt;  10; ++i) { std::cout &lt;&lt; k;  yield(); }} void  starter(){  for ( int i =  0; i &lt;  5; ++i) {  fork( std::bind(worker, i)); }} int  main(){  Scheduler::Start(starter);   // Output:   // 01021032104321043210432104321043210432104321432434}\n   [1] - In the library handlers are objects, so they can naturally contain any data, auxiliary functions, and additional programmer&#39;s interface.\n  The easiest way to compile the library and the examples is to use  cmake. You will need  cmake and  boost in any non-ancient versions. For example, the following should do the trick on macOS:\n  This will build the library and the examples. You can check that it works by running an example. The following will run the  threads example - you can see the interleaving of threads in the output:", "posttime": "2022-02-17 03:08:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "c++,\u7a0b\u5e8f,\u5904\u7406\u7a0b\u5e8f,effect", "title": "C++\u4e2d\u7684\u51fd\u6570\u5904\u7406\u7a0b\u5e8f\u5e93", "title_en": "A library for effect handlers in C++", "transed": 1, "url": "https://github.com/maciejpirog/cpp-effects", "via": "", "real_tags": ["c++", "\u7a0b\u5e8f", "\u5904\u7406\u7a0b\u5e8f", "effect"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073676, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5927\u5bb6\u597d\uff0c\u6211&#39\uff1b\u6211\u4e0d\u719f\u6089\u8fd9\u4e9b\u8bba\u575b\uff0c\u4f46\u6211&#39\uff1b\u6211\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u5728\u641e6502\u7ec4\u88c5\u3002\u3002\u3002\u51e0\u5e74\u524d\uff0c\u6211\u6709\u4e00\u4e2a\u75af\u72c2\u7684\u60f3\u6cd5\uff0c\u5c1d\u8bd5\u5c06Commodore 64\u5185\u6838\u548c\u57fa\u672cROM\u79fb\u690d\u5230NES\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684CPU\u57fa\u672c\u76f8\u540c\u3002\u4f46\u5f53PPU\u7684\u4e8b\u60c5\u53d8\u5f97\u590d\u6742\u65f6\uff0c\u6211\u653e\u5f03\u4e86\u3002\u51e0\u5468\u524d\uff0c\u6211\u770b\u5230\u6709\u4eba\u628a\u5b83\u79fb\u690d\u5230Atari 1200XL\u4e0a\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a&#39\uff1b\u6211\u4f1a\u518d\u8bd5\u4e00\u6b21\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u80fd\u591f\u5236\u4f5c\u4e00\u4e2a\uff08\u5927\u90e8\u5206\uff09\u5de5\u4f5c\u7cfb\u7edf\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u89c6\u9891\uff1a\u6211\u53ef\u4ee5&#39\uff1b\u6211\u4eec\u65e0\u6cd5\u5728\u786c\u4ef6\u4e0a\u6d4b\u8bd5\u5b83\uff0c\u4f46\u5728\u4eff\u771f\u4e2d\u4f3c\u4e4e\u8fd8\u53ef\u4ee5\u3002\u56e0\u4e3a\u5b83\u9700\u8981\u5bb6\u5ead\u57fa\u672c\u952e\u76d8\u652f\u6301\uff0c\u6211\u60f3\u6211&#39\uff1b\u6211\u53ea\u9650\u4e8eFCEUX\u548cBizHawk\uff0c\u5c3d\u7ba1\u6211\u53ef\u4ee5&#39\uff1b\u6211\u5f97\u4e0d\u5230BizHawk&#39\uff1b\u5b83\u7684\u952e\u76d8\u652f\u6301\u6839\u672c\u4e0d\u8d77\u4f5c\u7528\u3002FCEUX 2.6.2\u4f3c\u4e4e\u4e5f\u6709\u70b9\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4e0d\u5f97\u4e0d\u4e3a\u5b83\u7f16\u5199\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\u3002\u6211&#39\uff1b\u6211\u4e5f\u4e0d\u786e\u5b9a\u662f\u5426\u53d1\u5e03\u8be5\u9879\u76ee\u7684\u4ee3\u7801\u3002\u867d\u7136\u4f3c\u4e4e\u6ca1\u6709\u4eba\u5173\u5fc3github\u5468\u56f4\u5df2\u7ecf\u5b58\u5728\u7684\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\u3002\u3002\u3002\u5b9e\u73b0\u7ec6\u8282\u6211\u4f7f\u7528\u4e86MMC5\u6620\u5c04\u5668\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u5728\u6587\u672c\u5c4f\u5e55\u4e0a\u4f7f\u7528ExRAM\uff0c\u800c\u4e0d\u7528\u62c5\u5fc3\u5728PPU\u4e2d\u8bfb/\u5199\u5b57\u8282\u3002\u5185\u6838\u548c\u57fa\u672cROM\u6bcf\u4e2a\u90fd\u662f8KB\uff0c\u6240\u4ee5\u6211\u628a\u5b83\u4eec\u653e\u5728\u6700\u540e\u4e24\u4e2a\u5b58\u50a8\u5e93\u4e2d\uff08C000-$FFFF\uff09\uff0c\u5e76\u7528PRG RAM\uff086000-$BFFF\uff09\u586b\u5145\u5176\u4ed6\u5b58\u50a8\u5e93\u3002OS RAM\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u662f\u4fdd\u7559\u7684\uff0c\u5176\u4f59\u5b57\u8282\u53ef\u4f9bBASIC\u4f7f\u7528\u3002\u56e0\u6b64&#34\uff1b24575\u5b57\u8282\u7a7a\u95f2&#34\uff1b\u5728\u542f\u52a8\u5c4f\u5e55\u4e2d\uff1a$C000-$6001=$5FFF=24575\u3002CHR ROM\u53ea\u5305\u542bC64\u4e2d\u7684\u9ed8\u8ba4all caps\u5b57\u7b26\u96c6\u3002\u6211\u7981\u7528\u4e86\u6240\u6709\u7684\u6620\u5c04\u5668&#39\uff1bs\u4e2d\u65ad\uff0c\u4f46\u64cd\u4f5c\u7cfb\u7edf\u7528\u4e8e\u952e\u76d8\u626b\u63cf\u7684\u5149\u6805\u626b\u63cf\u9664\u5916\uff0c\u56e0\u4e3a\u5b83&#39\uff1b\u5982\u679c\u4f7f\u7528MMC5\uff0c\u5b83\u5c06\u514d\u8d39\u83b7\u5f978\u4f4d\u523016\u4f4d\u7684\u4e58\u6cd5\u5668\u3002\u6211\u6d4b\u8bd5\u4e86\u5b83\uff0c\u5b83\u5f88\u6709\u6548\uff0c\u4f46\u6211\u53ef\u4ee5&#39\uff1b\u6211\u627e\u4e0d\u5230\u5b83\u7684\u5b9e\u9645\u7528\u9014\u3002\uff08\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e2a\u9879\u76ee\u6709\u4efb\u4f55\u5b9e\u9645\u7528\u9014\uff01\uff09\u539f\u59cb\u4ee3\u7801\u6765\u81ea\u6211\u5728github\u4e0a\u53d1\u73b0\u7684\u4e00\u4e2a\u5e26\u5927\u91cf\u6ce8\u91ca\u7684\u53cd\u6c47\u7f16\u3002\u6211\u9700\u8981\u505a\u4e00\u4e9b\u5c0f\u7684\u4fee\u6539\uff0c\u8ba9\u5b83\u4e0eca65\u7ec4\u88c5\u5728\u4e00\u8d77\uff0c\u4e3b\u8981\u662f\u5728\u6807\u7b7e\u540e\u6dfb\u52a0\u5192\u53f7\u3002\u4e3a\u4e86\u7ed9\u65b0\u4ee3\u7801\u817e\u51fa\u7a7a\u95f4\uff0c\u6211\u5220\u9664\u4e86\u4e0e\u6570\u636e\u76d2\u5e26\u3001\u8c03\u5236\u89e3\u8c03\u5668\u3001RS232\u8bbe\u5907\u548c\u5f69\u8272RAM\u76f8\u5173\u7684\u90e8\u5206\u3002\u6ce8\u610f\u4e8b\u9879/\u672a\u6765\u5de5\u4f5cFCEUX\u4f3c\u4e4e\u53ea\u652f\u6301\u5b57\u6bcd\u7684shift\u952e\u3002\u4f8b\u5982\uff0c&#34\uff1bshift+A&#34\uff1b\u5de5\u4f5c\uff0c\u4f46\u662f&#34\uff1bshift+1\u548c#34\uff1b\u4e0d&#39\uff1b\u4e0d\u8981\u6ce8\u518c\u4e3a\u6309\u952e\u3002\u56e0\u6b64&#39\uff1bIt\u2019\u6ca1\u529e\u6cd5\u6253&#34&#34;, \u6216\u8005\u5927\u591a\u6570\u5176\u4ed6\u7b26\u53f7&#39\uff1bd.\u57fa\u672c\u7684\u9700\u6c42\u3002\u7136\u800c\uff0c\u63a7\u5236\u952e\u7ec4\u5408\u662f\u6709\u6548\u7684\uff0c\u6240\u4ee5\u6211\u8ba9\u952e\u76d8\u4ee3\u7801\u8868\u73b0\u5f97\u597d\u50cf\u63a7\u5236\u952e\u548cshift\u952e\u4e00\u6837\u3002C64\u6587\u672c\u5c4f\u5e55\u662f40\u5217\u4e5825\u884c\u3002\u6211\u628a\u5b83\u6539\u4e3a32x30\uff0c\u8fd9\u5bf9\u6a21\u62df\u5668\u6765\u8bf4\u5f88\u597d\uff0c\u4f46\u6211\u610f\u8bc6\u5230\u5b83&#39\uff1b\u5b83\u8d85\u51fa\u4e86\u7535\u89c6\u7684\u663e\u793a\u8303\u56f4\u3002\uff08Family BASIC\u7684\u6587\u672c\u5c4f\u5e55\u53ea\u670928x24\u3002\uff09\u8fdb\u4e00\u6b65\u7f29\u5c0f\u5b83\u5c06\u9700\u8981\u5927\u91cf\u4ee3\u7801\u66f4\u6539\uff0c\u4ee5\u5ffd\u7565\u6bcf\u4e2a\u5c4f\u5e55\u884c\u524d\u540e\u7684\u5c4f\u5e55RAM\u5b57\u8282\u3002\u56e0\u6b64&#39\uff1b\u8fd9\u5c31\u662f\u6211\u73b0\u5728\u7684\u5168\u90e8\u3002\u6211\u5e0c\u671b\u4f60\u559c\u6b22\u8fd9\u672c\u4e66\uff01\u6211\u4ecd\u7136\u53ef\u4ee5&#39\uff1bI don\u2019\u6211\u6839\u672c\u4e0d\u76f8\u4fe1\u5b83\u80fd\u8d77\u4f5c\u7528\u3002", "note_en": "Hi everyone,  I&#39;m new to these forums, but I&#39;ve been messing around with 6502 assembly for decades...  A few years ago, I got the crazy idea to try porting the Commodore 64 KERNAL and BASIC ROMs to the NES, since their CPUs are mostly the same. But I gave up when things got complicated with the PPU. Then a couple weeks ago, I saw that someone ported it to the Atari 1200XL, so I decided I&#39;d give it another shot. This time, I was able to make a (mostly) working system.     Here are some videos of it in action: I can&#39;t test it on hardware, but it seems fine in emulation. Since it requires Family BASIC keyboard support, I think I&#39;m limited to just FCEUX and BizHawk, though I can&#39;t get BizHawk&#39;s keyboard support working at all. FCEUX 2.6.2 seems a bit buggy too, so I had to write some workarounds for it.  I&#39;m also not sure about publishing the code for the project. Though it seems that nobody cares about the various disassemblies already floating around github...   Implementation Details I went with the MMC5 mapper so that I could use ExRAM for the text screen, and not worry as much about reading/writing bytes in the PPU. The KERNAL an BASIC ROM are 8 kB each, so I put them in the last two banks ($C000-$FFFF), and filled the other banks with PRG RAM ($6000-$BFFF). The first byte of OS RAM is reserved, and the rest is available to BASIC. Hence the &#34;24,575 bytes free&#34; in the splash screen: $C000 - $6001 = $5FFF = 24,575.  The CHR ROM just contains the default all-caps character set from the C64.   I disabled all the mapper&#39;s interrupts except for the raster one, which the OS uses for keyboard scans, etc.  Because it&#39;s using the MMC5, it gets an 8-bit-to-16-bit multiplier for free. I tested it, and  it works, but I can&#39;t find a practical use for it. (Not that this project has any practically uses!   )  The original code comes from a heavily annotated disassembly I found on github. I needed to make some minor changes to get it assembled with ca65, mostly adding colons after labels. To free up space for new code, I removed pieces related to datacassettes, modems, RS232 devices and color RAM.   Caveats / Future Work FCEUX only seems to support the shift key for letters. E.g., &#34;shift+A&#34; works, but &#34;shift+1&#34; doesn&#39;t register as a keypress. So there&#39;s no way to type &#34;!&#34;, or most other symbols you&#39;d need for BASIC. However, control key combos work, so I made the keyboard code act as if control were the same as shift.  The C64 text screen is 40 columns by 25 rows. I changed it to 32x30, which is fine for emulators, but I realize it&#39;s outside what TVs would display. (Family BASIC&#39;s text screen is just 28x24.) Shrinking it further would require substantial code changes to ignore the screen RAM bytes before and after each screen line.  So that&#39;s all I have now. I hope you enjoyed the writeup! I still can&#39;t believe that it works at all.", "posttime": "2022-02-17 03:08:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57fa\u672c,basic,\u4ee3\u7801", "title": "NES 64\u2013Commodore 64\u5185\u6838\u548c\u57fa\u672cROM\u79fb\u690d\u5230NES", "title_en": "NES 64 \u2013 Commodore 64 Kernal and Basic ROMs Ported to the NES", "transed": 1, "url": "https://forums.nesdev.org/viewtopic.php?t=23693", "via": "", "real_tags": ["\u57fa\u672c", "basic", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073675, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8f6f\u4ef6\u7684\u6bcf\u4e2a\u5b50\u9886\u57df\u4e2d\uff0c\u6211\u4eec\u4e00\u904d\u53c8\u4e00\u904d\u5730\u770b\u5230\u76f8\u540c\u7684\u6545\u4e8b\u3002\u4ea7\u54c1\u4e00\u5f00\u59cb\u89c4\u6a21\u5c0f\uff0c\u65f6\u95f4\u957f\uff0c\u5728\u5176\u4ea7\u54c1\u4e2d\u6dfb\u52a0\u76f8\u90bb\u7684\u5782\u76f4\u9886\u57df\u548c\u529f\u80fd\uff0c\u6700\u7ec8\u6210\u4e3a\u4e00\u4e2a\u5e73\u53f0\u3002\u4e00\u65e6\u8fd9\u4e9b\u5e73\u53f0\u53d8\u5f97\u8db3\u591f\u5927\uff0c\u4eba\u4eec\u5c31\u5f00\u59cb\u601d\u8003\u5982\u4f55\u66f4\u597d\u5730\u4e3a\u88ab\u5ffd\u89c6\u7684\u5782\u76f4\u9886\u57df\u670d\u52a1\uff0c\u6216\u8005\u62bd\u8c61\u51fa\u529f\u80fd\uff0c\u4ee5\u4fbf\u5c06\u5176\u5206\u89e3\u4e3a\u4e13\u95e8\u6784\u5efa\u7684\u5757\uff0c\u7136\u540e\u5f00\u59cb\u5206\u89e3\u3002\u6700\u7ecf\u5178\u7684\u4f8b\u5b50\u5c31\u662fCraigslist\u7684\u62c6\u5206\u3002\u4f60\u53ef\u80fd\u5728\u7f51\u4e0a\u7684\u67d0\u4e2a\u5730\u65b9\u770b\u5230\u8fc7\u8fd9\u4e2a\u56fe\u8868\u7684\u4e00\u4e2a\u7248\u672c\uff1a\n\u5728\u6570\u636e\u4e16\u754c\u91cc\uff0c\u5b83&#39\uff1b\u5f88\u96be\u7406\u89e3\u662f\u4ec0\u4e48\u6784\u6210\u4e86\u4e00\u4e2a\u5e73\u53f0\uff0c\u4f46\u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e9b\u5de5\u5177\u81ea\u6211\u5ba3\u4f20\u3002\u6c14\u6d41\u662f\u5176\u4e2d\u4e4b\u4e00\uff1a\nAirflow\u662f\u7531\u793e\u533a\u521b\u5efa\u7684\u4e00\u4e2a\u5e73\u53f0\uff0c\u7528\u4e8e\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u7f16\u5199\u3001\u5b89\u6392\u548c\u76d1\u63a7\u5de5\u4f5c\u6d41\u3002\n\u4eba\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u5de5\u4f5c\u6d41\u662f\u5de5\u4f5c\u6d41\u7ba1\u7406\u5668\uff0c\u4f46\u6beb\u65e0\u7591\u95ee\uff0c\u4ea7\u54c1\u7684\u7075\u6d3b\u6027\u5141\u8bb8\u5b83\u627f\u62c5\u989d\u5916\u7684\u8d23\u4efb\u3002\u5927\u91cf\u4f7f\u7528Airflow\u7684\u7528\u6237\u53ef\u4ee5\u5728\u4e0d\u79bb\u5f00\u5e73\u53f0\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u5927\u91cf\u4e0e\u6570\u636e\u76f8\u5173\u7684\u4efb\u52a1\uff1b\u4ece\u63d0\u53d6\u548c\u52a0\u8f7d\u811a\u672c\u5230\u751f\u6210\u62a5\u544a\uff0c\u518d\u5230\u4f7f\u7528Python\u548cSQL\u8fdb\u884c\u8f6c\u6362\uff0c\u518d\u5230\u5c06\u6570\u636e\u540c\u6b65\u56deBI\u5de5\u5177\u3002\n\u5728\u6570\u636e\u5806\u6808\u788e\u7247\u5316\u4e4b\u524d\uff0c\u521b\u5efa\u5e26\u6709\u6c14\u6d41\u7684\u7aef\u5230\u7aef\u7ba1\u9053\u5e76\u4e0d\u7f55\u89c1\u3002\u8fc7\u53bb\uff0c\u4f01\u4e1a\u901a\u5e38\u5c06\u51e0\u4e4e\u6574\u4e2a\u6570\u636e\u5de5\u4f5c\u6d41\u6784\u5efa\u4e3a\u5185\u90e8\u6570\u636e\u5de5\u7a0b\u5e08\u5f00\u53d1\u7684\u5b9a\u5236\u811a\u672c\u3002\u66f4\u5927\u7684\u516c\u53f8\u751a\u81f3\u5728Airflow\u5185\u90e8\u6784\u5efa\u4e86\u81ea\u5df1\u7684\u6846\u67b6\uff0c\u4f8b\u5982\u5177\u6709\u7c7b\u4f3cdbt\u7684SQL\u8f6c\u6362\u529f\u80fd\u7684\u6846\u67b6\uff0c\u4ee5\u4fbf\u6570\u636e\u5206\u6790\u5e08\u66f4\u5bb9\u6613\u7f16\u5199\u8fd9\u4e9b\u7ba1\u9053\u3002\n\u5982\u4eca\uff0c\u6570\u636e\u4ece\u4e1a\u8005\u62e5\u6709\u8bb8\u591a\u5de5\u5177\uff0c\u4ed6\u4eec\u5f88\u5c11\u9700\u8981\u4f7f\u7528\u6c14\u6d41\u4e4b\u7c7b\u7684\u5de5\u5177\u3002Fivetran\u548cAirbyte\u8d1f\u8d23\u4f7f\u7528Airflow\u7f16\u5199\u7684\u63d0\u53d6\u548c\u52a0\u8f7d\u811a\u672c\u3002dbt\u7528\u4e8e\u6570\u636e\u8f6c\u6362\uff0c\u4eba\u53e3\u666e\u67e5\u548cHightouch\u7528\u4e8e\u53cd\u5411ETL\u3002\u5ea6\u91cf\u548c\u5b9e\u9a8c\u5c42\u4e5f\u6709\u81ea\u5df1\u7684\u4e13\u6ce8\u5de5\u5177\uff1b\u4f7f\u7528Transform\u3001Metriql\u3001Supergrain\u548cEppo\u5b9e\u9a8c\u7b49\u5de5\u5177\u8fdb\u884c\u5ea6\u91cf\u3002\u67d0\u4e9b\u516c\u53f8\u5728\u6570\u636e\u79d1\u5b66\u548cML\u5de5\u4f5c\u8d1f\u8f7d\u65b9\u9762\u4f9d\u8d56\u6c14\u6d41\uff0c\u4f46\u968f\u7740MLOP\u7684\u666e\u53ca\uff0c\u8fd9\u4e00\u5c42\u4e5f\u88ab\u62bd\u8c61\u51fa\u6765\u3002\u50cfFeast\u8fd9\u6837\u7684\u5f00\u653e\u6e90\u4ee3\u7801\u5de5\u5177\u6b63\u5728\u5c06\u8fc7\u53bb\u4f5c\u4e3a\u72ec\u7acbPython\u811a\u672c\u5b58\u5728\u7684\u529f\u80fd\u7ba1\u7406\u6700\u4f73\u5b9e\u8df5\u5206\u89e3\u5f00\u6765\u3002\n\u5982\u679c\u6c14\u6d41\u7684\u5206\u79bb\u610f\u5473\u7740\u6240\u6709\u7684\u91cd\u7269\u90fd\u662f\u7531\u5355\u72ec\u7684\u5de5\u5177\u5b8c\u6210\u7684\uff0c\u90a3\u4e48\u5269\u4e0b\u4ec0\u4e48\u5462\uff1f\n\u7f3a\u5c11\u7684\u5dee\u8ddd\u662f\uff0c\u5bf9\u4e8e\u9700\u8981\u5728\u975eSQL\u8bed\u8a00\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u4ecd\u7136\u6ca1\u6709\u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u4f8b\u5982\uff0c\u5728dbt DAG\u4e2d\u6dfb\u52a0\u6570\u636e\u8f6c\u6362\u4ecd\u7136\u662f\u4e00\u9879\u975e\u5e38\u91cd\u8981\u7684\u4efb\u52a1\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662fdbt\u5b9e\u9a8c\u5ba4\u7684\u7279\u91cc\u65af\u6c40\u6307\u51fa\u7684\u5b9e\u4f53\u89e3\u6790\u573a\u666f\u3002DAG\u4e2d\u7684Python\u8282\u70b9\u4e0d\u662f\u8f6c\u6362\u4e5f\u662f\u5f88\u5e38\u89c1\u7684\u3002\u8fd9\u6837\u7684\u8282\u70b9\u53ef\u80fd\u4f1a\u4f7f\u7528ML\u6a21\u578b\u8ba1\u7b97\u98ce\u9669\u7528\u6237\uff0c\u5c06\u9884\u6d4b\u5199\u5165\u8868\u4e2d\uff0c\u7136\u540e\u7531SQL\u8f6c\u6362\u8fdb\u4e00\u6b65\u5904\u7406\u3002\u6211\u4eec\u5728Features and Labels\u4e0a\u901a\u8fc7\u5411dbt\u6dfb\u52a0\u53cc\u8bed\u652f\u6301\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u53e6\u4e00\u9879\u91cd\u8981\u804c\u8d23\u662f\u5b89\u6392\u65f6\u95f4\uff0c\u4f46\u8fd9\u662f\u4e00\u9879\u76f8\u5bf9\u7b80\u5355\u7684\u4efb\u52a1\u3002EL\u901a\u5e38\u662f\u6570\u636e\u7ba1\u9053\u7684\u8d77\u70b9\uff0c\u6240\u4ee5\u6211\u53ef\u4ee5\u770b\u5230EL\u5de5\u5177\uff08\u751a\u81f3\u662fdbt Cloud\uff09\u5728\u6ca1\u6709\u6c14\u6d41\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4eba\u4eec\u975e\u5e38\u559c\u6b22Airflow UI\uff0c\u5b83\u63d0\u4f9b\u4e86\u6574\u4e2a\u7cfb\u7edf\u7684\u6574\u4f53\u89c6\u56fe\uff0c\u53ef\u4ee5\u8f7b\u677e\u53d1\u73b0\u5931\u8d25\u7684\u5730\u65b9\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u91cd\u65b0\u8fd0\u884c\u4f5c\u4e1a\u3002\u8fd9\u662f\u4e00\u4e2a\u6b63\u786e\u7684\u89c2\u70b9\uff0c\u4f46\u968f\u7740\u66f4\u591a\u7684\u590d\u6742\u6027\u88ab\u8f6c\u79fb\u5230\u5176\u4ed6\u5de5\u5177\u4e2d\uff0c\u6574\u4f53\u89c2\u70b9\u7684\u56de\u62a5\u8d8a\u6765\u8d8a\u5c0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6c14\u6d41\u5de5\u4f5c\u6d41\u6b63\u5728\u8c03\u7528\u590d\u6742\u7684dbt\u4e91\u4f5c\u4e1a\uff0c\u5219\u65e0\u6cd5\u4ece\u6c14\u6d41UI\u4e2d\u89c2\u5bdf\u5230dbt DAG\u7684\u590d\u6742\u6027\u3002\n\u8fd8\u6709\u4e00\u4e9b\u5de5\u5177\u6b63\u8bd5\u56fe\u901a\u8fc7\u66f4\u5bb9\u6613\u5730\u90e8\u7f72\u4efb\u52a1\u6216\u66f4\u5177\u53ef\u6269\u5c55\u6027\u3001\u5bb9\u5668\u5316\u6216\u8d44\u4ea7\u9a71\u52a8\uff0c\u6210\u4e3a\u66f4\u597d\u7684\u5de5\u5177\u3002\u3002\u3002\u5728\u4e0d\u65ad\u53d8\u5316\u7684\u6570\u636e\u73af\u5883\u4e2d\u5f88\u96be\u505a\u51fa\u9884\u6d4b\uff0c\u4f46\u6211\u4e0d\u786e\u5b9a\u6211\u4eec\u662f\u5426\u9700\u8981\u66f4\u597d\u7684\u6c14\u6d41\u3002\u6784\u5efa\u66f4\u597d\u7684\u6c14\u6d41\u611f\u89c9\u5c31\u50cf\u662f\u8bd5\u56fe\u4f18\u5316\u7f16\u5199\u672c\u6765\u4e0d\u5e94\u8be5\u7f16\u5199\u7684\u4ee3\u7801\u3002\n\u5404\u79cd\u5404\u6837\u7684\u5de5\u5177\u6b63\u5728\u5206\u89e3\u6c14\u6d41\uff0c\u8fd9\u79cd\u591a\u6837\u6027\u6b63\u5728\u73b0\u4ee3\u6570\u636e\u5806\u6808\u4e2d\u9020\u6210\u5927\u91cf\u788e\u7247\u3002\u548c\u5176\u4ed6\u4eba\u4e00\u6837\uff0c\u6211\u4e5f\u9884\u6d4b\u8fd9\u4e9b\u5de5\u5177\u5728\u672a\u6765\u51e0\u5e74\u4f1a\u5f97\u5230\u4e00\u4e9b\u6574\u5408\u3002\u6211\u76f8\u4fe1dbt\u4e91\u662f\u5b9e\u73b0\u6574\u5408\u7684\u6700\u4f73\u4f4d\u7f6e\u3002\u4e0b\u4e00\u7bc7\u6587\u7ae0\u5c06\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd\uff01", "note_en": "In each subdomain of software, we have seen the same story over and over again. Products start small, in time, add adjacent verticals and functionality to their offerings and end up becoming a  platform. Once these platforms become big enough, people start to figure out how to better serve neglected verticals or abstract out functionality in order to break it down into purpose-built chunks, and  the unbundling starts. The most classic example of this is the unbundling of Craigslist. You have probably seen a version of this diagram on the internet somewhere:\n  In data world, it&#39;s hard to figure out what makes a platform, but luckily some tools self-advertise themselves as such. Airflow is one of them:\n Airflow is a platform created by the community to programmatically author, schedule and monitor workflows.\n One might consider Airflow a workflow manager, but undoubtedly the flexibility of the product allowed it to take on additional responsibilities. Heavy users of Airflow can do a vast variety of data related tasks without leaving the platform; from extract and load scripts to generating reports, transformations with Python and SQL to syncing back data to BI tools.\n Before the fragmentation of the data stack, it wasn\u2019t uncommon to create end-to-end pipelines with Airflow. Organizations used to build almost entire data workflows as custom scripts developed by in-house data engineers. Bigger companies even built their own frameworks inside Airflow, for example frameworks with dbt-like functionality for SQL transformations in order to make it easier for data analysts to write these pipelines.\n   Today, data practitioners have many tools under their belt and only very rarely they have to reach for a tool like Airflow.  Fivetran and  Airbyte took care of the extract and load scripts that one might write with Airflow.  dbt came for the data transformations,  Census and  Hightouch for Reverse ETL. Metrics and experimentation layers are also getting their own focused tooling; metrics with tools like  Transform,  Metriql,  Supergrain \u00a0and experimentation with  Eppo.  Certain companies relied on Airflow for data science and ML workloads, but with the popularity of MLOps, that layer is also being abstracted out. Open source tools like  Feast are unbundling best practices for feature management that used to exist as independent Python scripts.\n   If the unbundling of Airflow means all the heavy lifting is done by separate tools, what is left behind?\n The missing gap is that we still don\u2019t have a good solution for things that need to happen in non-SQL languages. For example, adding pandas data transformations within a dbt DAG is still a non-trivial task. Another example is the  entity resolution scenario that Tristian from dbt Labs points out. It is also very common to have Python nodes in a DAG that are not transformations. Such nodes might calculate risky users with an ML model, write predictions to a table that is then further processed by SQL transformations. We are working on this problem at  Features and Labels by  adding bilingual support to dbt.\n Another big responsibility is scheduling, but this is a relatively simple task. EL is usually the starting point of a data pipeline so I can see EL tools (or even dbt Cloud) taking this on without Airflow. People really like the Airflow UI, it provides a holistic view of the whole system to easily discover what has failed, and re-run jobs when necessary. This is a valid point, but the holistic view has diminishing returns as more complexity is moved inside other tools. For example if an Airflow workflow is invoking a complicated dbt Cloud job the complexity of the dbt DAG is not observable from the Airflow UI.\n Then there are tools that are trying to become a better Airflow by making it easier to deploy tasks or being more scalable or containerized or asset driven... It\u2019s hard to make predictions in the ever evolving data landscape, but I am not sure if we need a better Airflow. Building a better Airflow feels like trying to optimize writing code that shouldn\u2019t have been written in the first place.\n A diverse set of tools is unbundling Airflow and this diversity is causing substantial fragmentation in modern data stack. Like everyone else, I also predict some consolidation of these tools in the coming years. I believe dbt Cloud is the best positioned place for this consolidation to happen. More on this in the next post!", "posttime": "2022-02-17 03:06:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6c14\u6d41,unbundling,\u6570\u636e", "title": "\u6c14\u6d41\u7684\u5206\u79bb", "title_en": "The Unbundling of Airflow", "transed": 1, "url": "https://blog.fal.ai/the-unbundling-of-airflow-2/", "via": "", "real_tags": ["\u6c14\u6d41", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073674, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u572820\u4e16\u7eaa80\u5e74\u4ee3\u548c90\u5e74\u4ee3\u7684\u9f0e\u76db\u65f6\u671f\uff0cP.J.O'Rourke\u62e5\u6709\u5176\u4e2d\u4e00\u4e2a\u7f72\u540d\u2014\u2014\u6bd4\u5982\u8bfa\u62c9\u00b7\u57c3\u5f17\u9f99\u3001\u8fc8\u514b\u5c14\u00b7\u91d1\u65af\u5229\u6216\u5361\u5c14\u6587\u00b7\u7279\u91cc\u6797\u7684\u7f72\u540d\u2014\u2014\u8fd9\u8ba9\u5305\u62ec\u8fd9\u4e00\u4f4d\u5728\u5185\u7684\u8bb8\u591a\u8bfb\u8005\u90fd\u5145\u6ee1\u4e86\u671f\u5f85\u3002\n\u5468\u4e8c\u53bb\u4e16\uff0c\u4eab\u5e7474\u5c81\u7684\u5965\u6d1b\u514b\u6765\u81ea\u653f\u754c\u7684\u53f3\u7ffc\uff0c\u8fd9\u8ba9\u4ed6\u500d\u611f\u5174\u8da3\u3002\u4ed6\u662f\u4e00\u4f4d\u7f55\u89c1\u7684\u4fdd\u5b88\u4e3b\u4e49\u8005\uff0c\u4f3c\u4e4e\u6bd4\u5176\u4ed6\u4eba\u8fc7\u5f97\u66f4\u597d\uff0c\u5438\u6bd2\u4e5f\u66f4\u597d\u3002\u4ed6\u535a\u89c8\u7fa4\u4e66\uff1b\u4ed6\u4f3c\u4e4e\u662f\u552f\u4e00\u6d3b\u7740\u7684\u641e\u7b11\u5171\u548c\u515a\u4eba\u3002\n\u4ed6\u7684\u4e66\u2014\u2014\u300a\u5730\u72f1\u7684\u5047\u65e5\u300b\uff081988\uff09\u3001\u300a\u5a3c\u5993\u8bae\u4f1a\u300b\uff081991\uff09\u548c\u300a\u5e74\u9f84\u548c\u72e1\u8bc8\u6253\u8d25\u4e86\u9752\u6625\u3001\u5929\u771f\u548c\u7cdf\u7cd5\u7684\u53d1\u578b\u300b\uff081995\uff09\u7b49\u2014\u2014\u7ecf\u5e38\u6536\u96c6\u4ed6\u7684\u65b0\u95fb\u62a5\u9053\u3002\u8fd9\u4e9b\u4e66\u6e05\u695a\u5730\u8868\u660e\uff0c\u4ed6\u4eec\u7684\u4f5c\u8005\u559c\u6b22\u8d70\u51fa\u5bb6\u95e8\u3002\n\u4ed6\u7684\u4e00\u4e9b\u6700\u597d\u7684\u4f5c\u54c1\u662f\u5173\u4e8e\u5f00\u9614\u7684\u9053\u8def\u7684\u3002\u65e9\u671f\u7684\u4e00\u7bc7\u6587\u7ae0\u6709\u4e00\u4e2a\u4ee4\u4eba\u96be\u5fd8\u7684\u6807\u9898\uff1a\u201c\u5982\u4f55\u5728\u5438\u98df\u6bd2\u54c1\u7684\u540c\u65f6\u5feb\u901f\u9a7e\u9a76\uff0c\u540c\u65f6\u8ba9\u4f60\u7684\u7ffc\u738b\u53d7\u5230\u6324\u538b\uff0c\u800c\u4e0d\u8ba9\u4f60\u7684\u996e\u6599\u6d12\u51fa\u6765\u3002\u201d1980\u5e74\uff0c\u4f5c\u4e3a\u6c7d\u8f66\u548c\u53f8\u673a\uff0c\u4ed6\u5f00\u7740\u4e00\u8f86\u8840\u7ea2\u8272\u6cd5\u62c9\u5229308GTS\u8d8a\u91ce\u8f66\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u5173\u4e8e\u8d85\u8d8a\u4fdd\u65f6\u6377\u7684\u6b22\u5feb\u6bb5\u843d\uff0c\u662f\u5965\u6d1b\u514b\u9ad8\u96c5\u98ce\u683c\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u7247\u6bb5\uff1a\n\u6211\u4eec\u5728\u5854\u62c9\u5fb7\u52a0\u51fa\u53e3\u9644\u8fd1\u7ecf\u8fc7\u4e00\u8f86930\u6da1\u8f6e\u4fdd\u65f6\u6377\u3002\u5f53\u6211\u4eec\u8d85\u8fc7\u4ed6\u7684\u65f6\u5019\uff0c\u4ed6\u8dd1\u4e86\u5927\u7ea690\u82f1\u91cc\uff0c\u4ed6\u8dd1\u4e86\u6211\u4eec\u4e00\u5c0f\u6bb5\u8ddd\u79bb\uff0c\u5728\u5927\u7ea6110\u82f1\u91cc\u7684\u65f6\u5019\u8d85\u8fc7\u4e86\u6211\u4eec\uff0c\u7136\u540e\u6211\u4eec\u53c8\u8d85\u8fc7\u4e86\u4ed6\u3002\u4ed6\u548c\u6211\u4eec\u9047\u5230\u7684\u4efb\u4f55\u4eba\u4e00\u6837\u52c7\u6562\uff0c\u5728120\u5c81\u7684\u65f6\u5019\u7d27\u7d27\u5730\u6293\u4f4f\u6211\u4eec\u3002\u554a\uff0c\u4f46\u540e\u6765\u2014\u2014\u7136\u540e\u6211\u4eec\u5c31\u79bb\u5f00\u4e86\u4ed6\u3002\u4e94\u79d2\u949f\u540e\uff0c\u4ed6\u53ea\u4e0d\u8fc7\u662f\u955c\u4e2d\u4e00\u4e2a\u7ffb\u8f6c\u7684\u8239\u5f62\u5706\u70b9\u3002\u6211\u60f3\u4ed6\u672c\u53ef\u4ee5\u8ddf\u4e0a\u7684\uff0c\u4f46\u5728\u9650\u901f225%\u5de6\u53f3\u7684\u60c5\u51b5\u4e0b\uff0c\u9a7e\u9a76\u4e00\u8f86\u88c5\u6709\u7eb3\u7cb9\u8001\u864e\u673a\u7684\u8822\u8f66\u80af\u5b9a\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\u3002\u4f46\u5bf9\u6211\u4eec\u6765\u8bf4\u4e0d\u662f\u3002\u6211\u7684\u7535\u52a8\u6253\u5b57\u673a\u6bd4\u6211\u4eec\u5728\u90a3\u4e2a\u7f8e\u4e3d\u7684\u65e9\u6668\u5f00\u7740\u90a3\u8f86\u6f02\u4eae\u7684\u6c7d\u8f66\u51b2\u8fdb\u4f2f\u660e\u7ff0\u65f6\u9707\u52a8\u66f4\u5927\u3002\u5728\u8fd9\u4e2a\u7f8e\u5999\u7684\u56fd\u5bb6\uff0c\u6211\u6b63\u5728\u8fdb\u884c\u4e00\u6b21\u7f8e\u4e3d\u7684\u65c5\u884c\uff0c\u4ece\u66fc\u54c8\u987f\u7684\u5854\u697c\u5230\u6258\u6f58\u52a0\u5ce1\u8c37\u7684\u60ac\u5d16\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4ece\u4eba\u7fa4\u4e2d\u586b\u5199\u4e8630\u4e2a\u57ce\u5e02\u7684\u9a8c\u5149\u5e08\u529e\u516c\u5ba4\u7684\u9884\u7ea6\u65e5\u5fd7\u68c0\u67e5\u4ed6\u4eec\u7684\u773c\u775b\u662f\u5426\u6709\u6761\u7eb9\uff0c\u56e0\u4e3a\u4ed6\u4eec\u770b\u7740\u6211\u4eec\u7ecf\u8fc7\u3002\n\u591a\u5e74\u6765\uff0c\u5965\u6d1b\u514b\u4e00\u76f4\u662f\u6eda\u77f3\u96c6\u56e2\u7684\u5916\u4ea4\u4e8b\u52a1\u4e3b\u7ba1\u3002\u5f53\u4ed6\u4e0d\u50cf\u683c\u96f7\u5384\u59c6\u00b7\u683c\u6797\u90a3\u6837\u5728\u9152\u5e97\u9152\u5427\u9732\u8425\u65f6\uff0c\u4ed6\u662f\u4e00\u4e2a\u4e8c\u5206\u6cd5\u7684\u63a2\u7d22\u8005\u3002\u201c\u6bcf\u4e2a\u7f8e\u56fd\u5927\u4f7f\u9986\u90fd\u6709\u4e24\u4e2a\u6c38\u4e45\u6027\u7279\u5f81\uff0c\u201d\u4ed6\u5199\u9053\uff1a\u201c\u4e00\u4e2a\u5de8\u5927\u7684\u53cd\u7f8e\u793a\u5a01\u548c\u4e00\u6761\u5de8\u5927\u7684\u7f8e\u56fd\u7b7e\u8bc1\u7ebf\u3002\u201d\n\u8ba3\u544a\uff1a\u5965\u9c81\u514b\u4ee5\u53f3\u7ffc\u58f0\u97f3\u800c\u95fb\u540d\uff0c\u4ed6\u5728\u653f\u5e9c\u6216\u6587\u5316\u4e2d\u6563\u5e03\u4ed6\u8ba4\u4e3a\u9700\u8981\u7684\u4efb\u4f55\u4e1c\u897f\u3002\n\u8bc4\u4ef7\uff1a\u6211\u4eec\u7684\u8bc4\u8bba\u5bb6\u5199\u9053\uff0c\u8fd9\u4f4d\u5c16\u523b\u7684\u8bbd\u523a\u4f5c\u5bb6\u7684\u4fdd\u5b88\u4e3b\u4e49\u5e76\u975e\u6559\u6761\u4e3b\u4e49\u3002\n\u65f6\u62a5\u91c7\u8bbf\uff1a2012\u5e74\uff0c\u5965\u9c81\u514b\u8bf4\u4ed6\u4e0d\u559c\u6b22\u8bfb\u5173\u4e8e\u65f6\u4e8b\u7684\u4e66\u3002\u201c\u6211\u53ef\u4ee5\u81ea\u5df1\u5199\u90a3\u4e9b\u5e9f\u8bdd\uff0c\u201d\u4ed6\u6253\u8da3\u9053\u3002\n\u6863\u6848\uff1a\u5bf9\u8bb8\u591a\u7c89\u4e1d\u6765\u8bf4\uff0c\u5965\u9c81\u514b\u7684\u7b7e\u540d\u4e66\u662f\u300a\u5993\u5973\u8bae\u4f1a\u300b\u9605\u8bfb\u6211\u4eec1991\u5e74\u7684\u8bc4\u8bba\u3002\n\u5965\u6d1b\u514b\u7684\u4fdd\u5b88\u4e3b\u4e49\u5e76\u975e\u6559\u6761\u4e3b\u4e49\u3002\u5c31\u50cf\u5f71\u54cd\u4e86\u4ed6\u7684\u5199\u4f5c\u7684H.L.\u95e8\u80af\u4e00\u6837\uff0c\u4ed6\u6700\u538c\u6076\u7684\u662f\u5723\u6d01\u3002\u5728\u5965\u6d1b\u514b\u770b\u6765\uff0c\u81ea\u7531\u4e3b\u4e49\u8005\u662f\u81ea\u547d\u4e0d\u51e1\u7684\u8ba8\u538c\u9b3c\uff0c\u4ed6\u4eec\u60f3\u201c\u8ba9\u6211\u4eec\u7528\u53e3\u628a\u6742\u8d27\u5e26\u56de\u5bb6\u201d\n\u201c\u901a\u8fc7\u5927\u58f0\u8c34\u8d23\u4e00\u5207\u574f\u4e8b\u2014\u2014\u6218\u4e89\u3001\u9965\u997f\u548c\u7ea6\u4f1a\u5f3a\u5978\u2014\u2014\u81ea\u7531\u4e3b\u4e49\u8005\u8bc1\u660e\u4e86\u4ed6\u4eec\u81ea\u5df1\u7684\u4f1f\u5927\u5584\u826f\uff0c\u201d\u4ed6\u5199\u9053\u3002\u4ed6\u8865\u5145\u9053\uff1a\u201c\u8fd9\u662f\u4e00\u79cd\u5929\u751f\u7684\u8d35\u65cf\uff0c\u8fd9\u79cd\u8d35\u65cf\u7684\u5947\u5999\u4e4b\u5904\u5728\u4e8e\uff0c\u4f60\u4e0d\u5fc5\u52c7\u6562\u3001\u806a\u660e\u3001\u575a\u5f3a\uff0c\u751a\u81f3\u5e78\u8fd0\u5730\u52a0\u5165\u5b83\uff0c\u4f60\u53ea\u9700\u8981\u81ea\u7531\u3002\u201d\n\u7136\u800c\uff0c\u4ed6\u628a\u7968\u6295\u7ed9\u4e86\u5e0c\u62c9\u91cc\u00b7\u514b\u6797\u987f\u3002\u201c\u5979\u5bf9\u4efb\u4f55\u4e8b\u60c5\u90fd\u662f\u9519\u7684\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u4f46\u5728\u6b63\u5e38\u8303\u56f4\u5185\u5979\u662f\u9519\u7684\u3002\u201d\u5173\u4e8e\u7279\u6717\u666e\uff0c\u4ed6\u8bf4\uff0c\u201c\u8fd9\u4e2a\u4eba\u4e0d\u53ef\u80fd\u6210\u4e3a\u603b\u7edf\u3002\u4f60\u77e5\u9053\uff0c\u4ed6\u4eec\u7684\u516c\u6587\u5305\u91cc\u6709\u8fd9\u4e2a\u6309\u94ae\u3002\u4ed6\u4f1a\u627e\u5230\u7684\u3002\u201d\n\u4ed6\u4ee5\u5176\u4ed6\u65b9\u5f0f\u6fc0\u6012\u4e86\u53f3\u7ffc\u3002\u4ed6\u8ba4\u4e3a\uff0c\u63a5\u53d7\u5bfb\u6c42\u5e87\u62a4\u8005\u7b26\u5408\u4fdd\u5b88\u4e3b\u4e49\u539f\u5219\uff1a\u201c\u6211\u4eec\u4e0d\u662f\u652f\u6301\u751f\u547d\u5417\uff1f\u201d\u4ed6\u95ee\u9053\u3002\u201c\u96be\u6c11\u4e0d\u662f\u751f\u547d\u5417\uff1f\u201d\n\u5965\u6d1b\u514b\u7ecf\u5e38\u5728\u6876\u91cc\u6253\u9c7c\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4ed6\u7684\u53e5\u5b50\u5931\u53bb\u4e86\u4e00\u4e9b\u8fde\u8d2f\u6027\u3002\u4ed6\u6210\u4e86\u4e00\u4e2a\u6a21\u4eff\u81ea\u5df1\u7684\u4eba\uff0c\u4e00\u4e2a\u5927\u4eba\u7269\u7684\u804c\u4e1a\u5371\u5bb3\u3002\u67d0\u79cd\u96fe\u53f7-\u6765\u822a\u53f7\u7684\u54c1\u8d28\u6084\u7136\u800c\u81f3\u3002\u90a3\u4e9b\u81ea\u5927\u7684\u96ea\u8304\u6ca1\u7528\u3002\n\u5854\u514b\u00b7\u5361\u5c14\u68ee\uff08Tucker Carlson\uff09\u62a2\u8d70\u4e86\u5965\u6d1b\u514b\uff08O\u2019Rourke\uff09\u5b66\u9662\u6d3e\u7684\u5916\u8868\uff08\u5361\u5176\u88e4\u3001\u84dd\u8272\u8fd0\u52a8\u886b\uff09\uff0c\u4f46\u62a2\u8d70\u4e86\u4ed6\u7684\u667a\u6167\u3001\u51b7\u9759\u6216\u5bf9\u72c2\u5420\u7684\u4e0d\u5bb9\u5fcd\u3002\n\u5173\u4e8e\u4ed6\u7684\u7a7f\u7740\u65b9\u5f0f\uff0cO'Rourke\u8bc4\u8bba\u9053\uff1a\u201c\u4f60\u8868\u73b0\u5f97\u8d8a\u53e4\u602a\uff0c\u4f60\u5e94\u8be5\u770b\u8d77\u6765\u8d8a\u6b63\u5e38\u3002\u53cd\u8fc7\u6765\u4e5f\u662f\u5982\u6b64\u3002\u5f53\u6211\u770b\u5230\u4e00\u4e2a\u9f3b\u5b50\u4e0a\u6234\u7740\u4e09\u56db\u4e2a\u6212\u6307\u7684\u5b69\u5b50\u65f6\uff0c\u6211\u77e5\u9053\u8fd9\u4e2a\u4eba\u7edd\u5bf9\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904\u3002\u201d\n\u5965\u6d1b\u514b\u7684\u6b7b\u5f88\u91cd\u8981\uff0c\u4e0d\u4ec5\u4ec5\u56e0\u4e3a\u4ed6\u662f\u4e00\u4e2a\u6d3b\u6cfc\u7684\u4eba\uff0c\u4e00\u4e2a\u53e4\u602a\u7684\u539f\u521b\u8005\u3002\u4ed6\u7684\u7f3a\u5e2d\u5728\u4fdd\u5b88\u4e3b\u4e49\u7684\u77e5\u8bc6\u548c\u6587\u5316\u6d3e\u522b\u4e2d\u7559\u4e0b\u4e86\u4e00\u4e2a\u9a6c\u63d0\u5c3c\u676f\u5927\u5c0f\u7684\u7f3a\u53e3\u3002\n\u4e3a\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u64b0\u7a3f\u7684\u6709\u5f71\u54cd\u529b\u7684\u4fdd\u5b88\u6d3e\u6279\u8bc4\u5bb6\u7279\u91cc\u00b7\u8482\u5947\u5965\u7279\u4e8e\u672c\u6708\u65e9\u4e9b\u65f6\u5019\u53bb\u4e16\u3002\u743c\u00b7\u8fea\u8fea\u7fc1\u7684\u8ba3\u544a\u63d0\u9192\u6211\u4eec\uff0c\u5979\u5728\u300a\u56fd\u5bb6\u8bc4\u8bba\u300b\u4e0a\u53d1\u8868\u4e86\u8bb8\u591a\u65e9\u671f\u4f5c\u54c1\u3002\u67d0\u79cd\u51b0\u5ddd\u51e0\u4e4e\u5b8c\u5168\u878d\u5316\u4e86\u3002\n\u5965\u6d1b\u514b\u662f\u4e00\u4e2a\u9b45\u529b\u56db\u5c04\u7684\u4eba\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u558b\u558b\u4e0d\u4f11\u7684\u4eba\u3002\u6211\u731c\uff0c\u4ed6\u7684\u6bcf\u4e00\u7bc7\u6587\u7ae0\u90fd\u6bd4\u67e5\u5c14\u65af\u00b7\u514b\u52b3\u8428\u9ed8\u6216\u7c73\u6b47\u5c14\u00b7\u9a6c\u5c14\u91d1\u4e00\u751f\u7684\u4e13\u680f\u6587\u7ae0\u8d62\u5f97\u4e86\u66f4\u591a\u7684\u4fdd\u5b88\u4e3b\u4e49\u8005\u3002\u51e0\u4e4e\u4efb\u4f55\u4eba\u90fd\u80fd\u6253\u96f7\u3002\u51e0\u4e4e\u6ca1\u6709\u4eba\u80fd\u53ef\u9760\u5730\u8f7b\u8d77\u811a\u6765\u3002\n\u5965\u6d1b\u514b\u5199\u4e86\u4e00\u672c\u534a\u8bbd\u523a\u6027\u7684\u793c\u4eea\u4e66\u300a\u73b0\u4ee3\u793c\u4eea\u300b\uff0c\u8be5\u4e66\u4e8e1983\u5e74\u51fa\u7248\u3002\u6211\u4e00\u76f4\u89c9\u5f97\u4ed6\u7684\u5efa\u8bae\u975e\u5e38\u597d\u3002\n\u5f53\u6211\u59bb\u5b50\u4e3a\u6211\u4eec\u7684\u7a0e\u52a1\u503a\u52a1\u611f\u5230\u7126\u8651\uff0c\u4f46\u6211\u975e\u5e38\u60f3\u51fa\u53bb\u5403\u996d\u65f6\uff0c\u6211\u63d0\u9192\u5979\uff0c\u6b63\u5982\u5965\u6d1b\u514b\u6240\u5199\u7684\u90a3\u6837\uff0c\u201c\u4e0d\u5982\u50cf\u6ca1\u6709\u660e\u5929\u4e00\u6837\u82b1\u94b1\uff0c\u800c\u4e0d\u662f\u50cf\u6ca1\u6709\u94b1\u4e00\u6837\u5728\u4eca\u665a\u82b1\u94b1\u3002\u201d\n\u8fd9\u7edd\u975e\u4fdd\u5b88\u7684\u51b2\u52a8\u3002\u5965\u6d1b\u514b\u7684\u77db\u76fe\u4f7f\u4ed6\u6210\u4e3a\u503c\u5f97\u62e5\u6709\u7684\u670b\u53cb\u3002", "note_en": "During the 1980s and \u201990s, his heyday, P.J. O\u2019Rourke owned one of those bylines \u2014 like Nora Ephron\u2019s, or Michael Kinsley\u2019s, or Calvin Trillin\u2019s \u2014 that made many readers, including this one, tingle with anticipation.\n O\u2019Rourke, who  died on Tuesday at 74, came bombing in from the right side of the political spectrum, which made him doubly interesting. He was that rare conservative who appeared to be having a better time, and doing better drugs, than everyone else. He was well-read; he was, it often seemed, the only funny Republican alive.\n His books \u2014 \u201cHolidays in Hell\u201d (1988),  \u201cParliament of Whores\u201d (1991) and \u201cAge and Guile Beat Youth, Innocence, and a Bad Haircut\u201d (1995) among them \u2014 often collected his journalism. Their author, these books made clear, liked to get out of the house.\n Some of his best writing was about the open road. One early piece was memorably titled, \u201cHow to Drive Fast on Drugs While Getting Your Wing-Wang Squeezed and Not Spill Your Drink.\u201d In 1980, for Car and Driver, he drove cross country in a blood-red Ferrari 308GTS.\n  This euphoric passage from that piece, about overtaking a Porsche, is as good a snippet of O\u2019Rourke\u2019s high style as any:\n We came by a 930 Turbo Porsche near the Talladega exit. He was going about 90 when we passed him, and he gave us a little bit of a run, passed us at about 110, and then we passed him again. He was as game as anybody we came across and was hanging right on our tail at 120. Ah, but then \u2014 then we just  walked away from him. Five seconds and he was nothing but a overturned-boat-shaped dot in the mirrors. I suppose he could have kept up, but driving one of those ass-engined Nazi slot cars must be a task at around 225 percent of the speed limit. But not for us. I\u2019ve got more vibration here on my electric typewriter than we had blasting into Birmingham that beautiful morning in that beautiful car on a beautiful tour across this wonderful country from the towers of Manhattan to the bluffs of Topanga Canyon so fast we filled the appointment logs of optometrists\u2019 offices in 30 cities just from people getting their eyes checked for seeing streaks because they\u2019d watched us go by.\n For many years O\u2019Rourke was Rolling Stone\u2019s foreign-affairs desk chief. He was a detector of dichotomies, when he wasn\u2019t camped out like Graham Greene in a hotel bar. \u201cEach American embassy comes with two permanent features,\u201d he wrote: \u201ca giant anti-American demonstration and a giant line for American visas.\u201d\n Obituary : Known for being a voice from the right,  Mr. O\u2019Rourke skewered whatever in government or culture he thought needed it.\n An Appraisal : The sharp-toothed satirist\u2019s  conservatism wasn\u2019t doctrinaire, our critic writes.\n Times \u00a0Interview: In 2012, Mr. O\u2019Rourke said he doesn\u2019t like to read books about current affairs.  \u201cI can write that junk myself,\u201d he quipped.\n From the Archives: For many fans, Mr. O\u2019Rourke\u2019s signature book was \u201cParliament of Whores.\u201d  Read our review from 1991.\n O\u2019Rourke\u2019s conservatism wasn\u2019t doctrinaire. Like H.L. Mencken, who influenced his writing, his bedrock loathing was for sanctimony. Liberals, to O\u2019Rourke, were pretentious bores who want to \u201cmake us carry our groceries home in our mouths.\u201d\n \u201cBy loudly denouncing all bad things \u2014 war and hunger and date rape \u2014 liberals testify to their own terrific goodness,\u201d he wrote. He added: \u201cIt\u2019s a kind of natural aristocracy, and the wonderful thing about this aristocracy is that you don\u2019t have to be brave, smart, strong or even lucky to join it, you just have to be liberal.\u201d\n Yet he voted for Hillary Clinton. \u201cShe\u2019s wrong about absolutely everything,\u201d he said, \u201cbut she\u2019s wrong within normal parameters.\u201d About Trump he said, \u201cThis man just can\u2019t be president. They\u2019ve got this button, you know, in the briefcase. He\u2019s going to find it.\u201d\n He provoked the right in other ways. Accepting asylum seekers was consistent with conservative principles, he argued: \u201cAren\u2019t we pro-life?\u201d he asked. \u201cAren\u2019t refugees life?\u201d\n  Too often, O\u2019Rourke shot fish in a barrel. His sentences lost some of their snap over time. He became an imitation of himself, an occupational hazard for a big personality. A certain Foghorn Leghorn quality crept in. The cocky cigars didn\u2019t help.\n Tucker Carlson stole O\u2019Rourke\u2019s preppy look (khakis, blue blazers) but not his wit, his cool or his intolerance for the barking mad.\n About the way he dressed, O\u2019Rourke commented: \u201cThe weirder you\u2019re going to behave, the more normal you should look. It works in reverse, too. When I see a kid with three or four rings in his nose, I know there is absolutely nothing extraordinary about that person.\u201d\n O\u2019Rourke\u2019s death matters not just because he was a lively presence, a cranky original. His absence leaves a martini-glass-size gap in what remains of conservatism\u2019s huddled and surrounded intellectual and cultural wing.\n The influential  conservative critic Terry Teachout, who wrote for The Wall Street Journal, died earlier this month.  Joan Didion\u2019s obituaries reminded us that she published much of her early work in The National Review. A glacier of a sort has almost entirely melted.\n O\u2019Rourke was a charmer, not a haranguer. Each of his essays, I\u2019d guess, won more converts to conservatism than a lifetime of columns by Charles Krauthammer or Michelle Malkin. Almost anyone can thunder. Almost no one is reliably light on their feet.\n O\u2019Rourke wrote a semi-satirical book of etiquette, \u201cModern Manners,\u201d which appeared in 1983. I\u2019ve always found his advice to be completely excellent.\n  When my wife is anxious about our tax debt but I badly want to go out to dinner, I remind her, as O\u2019Rourke wrote, that it\u2019s \u201cbetter to spend money like there\u2019s no tomorrow than to spend tonight like there\u2019s no money.\u201d\n That\u2019s hardly a conservative impulse. O\u2019Rourke\u2019s contradictions are what made him a friend, on the page, worth having.", "posttime": "2022-02-17 03:01:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4f20\u7edf,wrote,\u6d1b\u514b", "title": "P.J.O'Rourke\u4ee5\u4e00\u79cd\u9ad8\u5ea6\u3001\u53e4\u602a\u7684\u98ce\u683c\uff0c\u4ee5\u4e00\u79cd\u840e\u7f29\u7684\u4f20\u7edf\u5199\u4f5c", "title_en": "P.J. O\u2019Rourke Wrote with High, Cranky Style in a Shrinking Tradition", "transed": 1, "url": "https://www.nytimes.com/2022/02/16/books/pj-orourke-books-essays.html", "via": "", "real_tags": ["\u4f20\u7edf", "wrote", "\u6d1b\u514b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073672, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e24\u4e2a\u5c16\u5cf0\u795e\u7ecf\u5143\u4e2d\u57fa\u4e8e\u4e8b\u4ef6\u7684\u53cd\u5411\u4f20\u64ad\u548c\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u5c16\u5cf0\u65f6\u95f4\u7684\u635f\u5931\u51fd\u6570\\\uff08\\mathcal{L}\\\uff09\u3002\u6700\u540e\u7684\u7d2f\u79ef\u503c\u662f\\\uff08\\frac{\\mathrm{d}\\mathcal{L}}{\\mathrm{d}w}\\\uff09\u3002\u8fd9\u662f\u6a21\u62df\u6570\u636e\u7684\u53ef\u89c6\u5316\u3002\u5c16\u5cf0\u795e\u7ecf\u5143\u4f7f\u7528\u79bb\u6563\u7684\u5c16\u5cf0\u4e8b\u4ef6\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u795e\u7ecf\u5143\u6a21\u578b\u7684\u52a8\u529b\u5b66\u4e0d\u8fde\u7eed\u3002\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u6211\u4eec\u80fd\u6709\u68af\u5ea6\u5417\uff1f\u5728\u7531\u6f0f\u79ef\u5206\u795e\u7ecf\u5143\u548c\u6fc0\u53d1\u795e\u7ecf\u5143\u7ec4\u6210\u7684\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u819c\u7535\u4f4d\u68af\u5ea6\u548c\u5c16\u5cf0\u65f6\u95f4\u51e0\u4e4e\u5728\u91cd\u91cf\u7a7a\u95f4\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u662f\u6709\u9650\u7684\uff0c\u76f4\u5230\u5c16\u5cf0\u88ab\u6dfb\u52a0\u6216\u4e22\u5931\u7684\u8d85\u66f2\u9762\u3002\u6b63\u5982Christian Pehle\u548c\u4f5c\u8005[20]\u6700\u8fd1\u6240\u793a\uff0c\u63a8\u5bfc\u53cd\u5411\u4f20\u64ad\u6765\u8ba1\u7b97\u8fd9\u4e9b\u68af\u5ea6\u4e0d\u9700\u8981\u4efb\u4f55\u4efb\u610f\u9009\u62e9\u6216\u8fd1\u4f3c\u3002\u6b64\u5916\uff0c\u6700\u8fd1\u7684\u4e00\u4e9b\u51fa\u7248\u7269\u5c55\u793a\u4e86\u4f7f\u7528\u7cbe\u786e\u68af\u5ea6\u8bad\u7ec3\u591a\u5c42\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc[20][20][20][20]\u3002\u57fa\u4e8e\u4e8b\u4ef6\u7684\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u901a\u4fe1\u65b9\u6848\u53ef\u4ee5\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u4fdd\u7559\uff08\u5982\u52a8\u753b\u6240\u793a\uff09\u3002\u4e0e\u5728\u4f20\u7edf\u6570\u5b57\u786c\u4ef6\u4e0a\u8bad\u7ec3\u65e0\u5c16\u5cf0\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\u76f8\u6bd4\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u65b0\u578b\u795e\u7ecf\u5f62\u6001\u786c\u4ef6\u5b9e\u73b0\u66f4\u597d\u7684\u53ef\u6269\u5c55\u6027\u548c\u80fd\u6548\u3002\u4e0d\u8fde\u7eed\u7cfb\u7edf\u600e\u4e48\u53ef\u80fd\u6709\u5b9a\u4e49\u826f\u597d\u7684\u53c2\u6570\u5bfc\u6570\uff1f\u5bf9\u4e8e\u5b9a\u4e49\u5728\u8fde\u7eed\u65f6\u95f4\u4e2d\u7684\u7cfb\u7edf\uff0c\u5982\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\uff0c\u4e0e\u79bb\u6563\u65f6\u95f4\u76f8\u6bd4\uff0c\u53cd\u5411\u4f20\u64ad\u6709\u4ec0\u4e48\u76f8\u4f3c\u4e4b\u5904\uff1f\u8fd9\u7bc7\u535a\u6587\u6309\u987a\u5e8f\u56de\u7b54\u4e86\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002\u5c16\u5cf0-\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u7684\u5bfc\u6570\u662f\u6df7\u5408\u52a8\u529b\u7cfb\u7edf\uff1a\u5b83\u4eec\u5c06\u8fde\u7eed\u52a8\u529b\u4e0e\u4e8b\u4ef6\u89e6\u53d1\u7684\u4e0d\u8fde\u7eed\u72b6\u6001\u53d8\u5316\u7ed3\u5408\u8d77\u6765\u3002\u8fd9\u7c7b\u7cfb\u7edf\u901a\u5e38\u4f7f\u7528\u77ac\u65f6\u4e8b\u4ef6\u5bf9\u77ed\u65f6\u95f4\u5185\u53d1\u751f\u7684\u73b0\u8c61\u8fdb\u884c\u5efa\u6a21\u3002\u5728\u68d8\u7a81\u795e\u7ecf\u5143\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u795e\u7ecf\u5143\u7684\u68d8\u7a81\u673a\u5236\uff1b\u5176\u4ed6\u4f8b\u5b50\u5305\u62ec\u5f39\u7403\u5728\u649e\u51fb\u5730\u9762\u65f6\u53cd\u5c04\uff0c\u53d1\u52a8\u673a\u53d8\u901f\u5668\u5728\u4e00\u5b9a\u8f6c\u901f\u4e0b\u6539\u53d8\u6863\u4f4d\uff0c\u6216\u8005\u6052\u6e29\u5668\u5728\u8fbe\u5230\u6e29\u5ea6\u9608\u503c\u65f6\u5207\u6362\u52a0\u70ed\u5143\u4ef6\u3002\u6df7\u5408\u7cfb\u7edf\u5df2\u7ecf\u5728\u6700\u4f18\u63a7\u5236\u7406\u8bba[20]\u7684\u80cc\u666f\u4e0b\u7814\u7a76\u4e86\u534a\u4e2a\u4e16\u7eaa\uff0c\u5305\u62ec\u8ba1\u7b97\u72b6\u6001\u53d8\u91cf\u7684\u53c2\u6570\u5bfc\u6570[20][20]\u3002\u76f4\u89c9\u662f\uff0c\u5982\u679c\u53c2\u6570\u7684\u5fae\u5c0f\u53d8\u5316\u5bfc\u81f4\u4e8b\u4ef6\u65f6\u95f4\u7684\u5fae\u5c0f\u53d8\u5316\uff0c\u5219\u4f1a\u5bfc\u81f4\u4e8b\u4ef6\u540e\u72b6\u6001\u53d8\u91cf\u7684\u5fae\u5c0f\u53d8\u5316\u3002\u5982\u4e0b\u6587\u6240\u8ff0\uff0c\u4e00\u79cd\u5f62\u5f0f\u5316\u7684\u6570\u5b66\u5904\u7406\u65b9\u6cd5\u4f7f\u4e4b\u7cbe\u786e\uff1a\u5b83\u5c06\u4e8b\u4ef6\u524d\u540e\u7684\u53c2\u6570\u5bfc\u6570\u8054\u7cfb\u8d77\u6765\uff0c\u5e76\u8bf4\u660e\u8fd9\u79cd\u5173\u7cfb\u6210\u7acb\u7684\u6761\u4ef6\u3002\u5173\u7cfb\\\uff08V\uff08t\uff0cw\uff09-\\vartheta=0\\\uff09\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9690\u5f0f\u51fd\u6570\uff08\u9ed1\u7ebf\uff09\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u786e\u5b9a\u5c16\u5cf0\u65f6\u95f4\u5bfc\u6570\\\uff08\\frac{\\partial t{\\mathrm{spike}}}{\\partial w}\\\uff09\u3002\u5728\u6df7\u5408\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u4ef6\u7531\u4e8b\u4ef6\u51fd\u6570\u7684\u8fc7\u96f6\u89e6\u53d1\u3002\u8003\u8651\u4e00\u4e2a\u6cc4\u6f0f\u7684\u79ef\u5206\u548c\u6fc0\u53d1\u795e\u7ecf\u5143\uff0c\u5176\u4e2d\u4e8b\u4ef6\u51fd\u6570\u7b80\u5355\u5730\u5f00\u59cb{{Al}} V\uff08t\uff0cw\uff09-Valtheta\uff0c\\{{ } } } }\uff08v\uff08t\uff0cw\uff09\uff09\u662f\u4ee5\u7a81\u89e6\u6743\u91cd\uff08w\uff09\u548c\\\uff08\\Valtheta\uff09\u4e3a\u65f6\u95f4\u9608\u503c\u7684\u819c\u7535\u4f4d\u3002\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u5728A\uff08T\uff1d0\uff09\u65f6\u8003\u8651\u5355\u4e2a\u8f93\u5165\u5c16\u5cf0\u3002\u5173\u7cfb\\\uff08V\uff08t\uff0cw\uff09-\\vartheta=0\\\uff09\u5728\\\uff08t\uff0cw\\\uff09\u5e73\u9762\u4e0a\u523b\u51fa\u4e00\u6761\u7ebf\uff0c\u8be5\u5173\u7cfb\u5728\u6b64\u5e73\u9762\u4e0a\u6210\u7acb\uff08\u53c2\u89c1\u5de6\u56fe\uff09\u3002\u8fd9\u4e00\u884c\u7531\u51fd\u6570\\\uff08t{\\mathrm{spike}\uff08w\uff09\\\uff09\u5c40\u90e8\u63cf\u8ff0\u3002\u9690\u5f0f\u51fd\u6570\u5b9a\u7406[20]\u5141\u8bb8\u6211\u4eec\u7528\u819c\u52bf\u5bfc\u6570\u6765\u8868\u793a\u5b83\u7684\u5bfc\u6570\uff0c\u5373\u5c16\u5cf0\u65f6\u95f4\u5bfc\u6570\\\uff08\\frac{\\partial t{\\mathrm{spike}}}{\\partial w}\uff09\uff0c\u5373\uff1abegin{align}\\boxed{\\frac{\\partial t{\\mathrm{spike}}{\\partial w}=-\\frac{1}{\\frac{\\partial V}{\\partial t}{\\\u7ed3\u675f{align}\u76f4\u89c2\u5730\u8bf4\uff0c\\\uff08w\\\uff09\u7684\u53d8\u5316\u9700\u8981\u901a\u8fc7\\\uff08t\\\uff09\u7684\u53d8\u5316\u6765\u8865\u507f\uff0c\u4ee5\u4fbf\u4fdd\u6301\u5728\\\uff08V\uff08t\uff0cw\uff09-\\vartheta=0\\\uff09\u7684\u7ebf\u4e0a\u3002\u8fd9\u79cd\u53d8\u5316\u7387\uff082\uff09\u7684\u5de6\u4fa7\uff09\u7531\u6cbft\u8f74\u548cw\u8f74\uff082\uff09\u7684V\u7684\u53d8\u5316\u7387\u7684\u8d1f\u6bd4\u7387\u7ed9\u51fa\u3002\u5728\u5cf0\u503c\u5904\uff0c\u6211\u4eec\u5c06\u819c\u7535\u4f4d\u91cd\u7f6e\u4e3a\u96f6\u3002\u7528\\\uff08V^+\\\uff09\u8868\u793a\u8dc3\u8fc1\u540e\u7684\u819c\u7535\u4f4d\uff0c\u6211\u4eec\u5f97\u5230\u4e86begin{align}V^+\uff08t{mathrm{spike}\uff0cw\uff09=0\u3002\\end{align}\u6211\u4eec\u77e5\u9053\\\uff08t{\\mathrm{spike}}\uff09\u662f\u6743\u91cd\\\uff08w\\\uff09\u7684\u51fd\u6570\uff0c\u5176\u5bfc\u6570\u6ee1\u8db3\\\uff08\uff082\uff09\\\uff09\u3002\u7531\u4e8e\u6211\u4eec\u7684\u8981\u6c42\u662f\\\uff08\uff083\uff09\\\uff09\u5728\u6211\u4eec\u6539\u53d8\\\uff08w\\\uff09\uff08\u9690\u5f0f\u6539\u53d8\\\uff08t{mathrm{spike}}\uff09\u65f6\u4fdd\u6301\u4e0d\u53d8\uff0c\\\uff08V^+\\\uff09\u76f8\u5bf9\u4e8e\\\uff08w\\\uff09\u7684\u603b\u5bfc\u6570\u5fc5\u987b\u6d88\u5931\uff1a\\begin{align}\\frac{partial V^+}{\\partial w}+\\frac{\\partial t{\\mathrm{spike}}{\\partial w}\\frac{\u3002\\\u7ed3\u675f{align}\u5728\\\uff08\uff082\uff09\\\uff09\u4e2d\u63d2\u5165\\\uff08V^-\\\uff09\u8868\u793a\u5c16\u5cf0\u524d\u7684\u8bc4\u4f30\uff0c\u5e76\u89e3\u51b3\\\uff08\\frac{\\partial V^+}{\\partial w}\uff09\u4ea7\u751f\u6240\u9700\u7684\u7ed3\u679c\uff1a\\begin{align}\\frac{\\partial V^+}{\\partial w}=\\frac{\\frac{\\partial V^+}{\\partial t}{\\frac{\\partial V^-}{\\partial t}\u3002\\end{align}\u5728\u4e00\u4e2a\u6709\u7535\u6d41\u7a81\u89e6\u548c\u819c\u65f6\u95f4\u5e38\u6570\u7684\u6cc4\u6f0f\u6574\u5408\u548c\u6fc0\u53d1\u795e\u7ecf\u5143\u4e2d\uff08\\tau{mathrm{mem}\uff09\uff0c\u8fd9\u53ef\u4ee5\u5199\u6210[20]\u3002\\begin{align}\\boxed{\\frac{\\partial V^+}{\\partial w}=\\left\uff081+\\frac{\\vartheta}{\\tau{\\mathrm{mem}\\frac}\\partial V^-\\frac}\\\u7aef\u70b9{align}\u5728\u5c16\u5cf0\u4e4b\u95f4\uff0c\\\uff08\\frac{\\partial V}{\\partial w}\\\uff09\u7684\u52a8\u529b\u5b66\u7531\u5b9a\u4e49\\\uff08V\\\uff09\u52a8\u529b\u5b66\u7684\u5fae\u5206\u65b9\u7a0b\u7684\\\uff08w\\\uff09\u5fae\u5206\u7ed9\u51fa\u3002\u5728\u5cf0\u503c\u65f6\uff0c\u5bfc\u6570\u6839\u636e\\\uff08\uff086\uff09\\\uff09\u8df3\u8dc3\u3002\u8fd9\u4e9b\u7ed3\u679c\u63a8\u5e7f\u5230\u5177\u6709\u4efb\u610f\u591a\u4e2a\u5c16\u5cf0\u7684\u5468\u671f\u6027\u5c16\u5cf0\u795e\u7ecf\u5143\u7f51\u7edc[20]\u3002\u9690\u51fd\u6570\u5b9a\u7406\u8981\u6c42\\\uff08\\dot{V}^-\\neq 0\\\uff09\u624d\u80fd\u4fdd\u6301\\\uff08\uff082\uff09\\\uff09\u3002\u5f53\u819c\u7535\u4f4d\u4e0e\u9608\u503c\u76f8\u5207\uff0c\u6211\u4eec\u6709\\\uff08\\dot{V}^-\\\u52300\\\uff09\u65f6\uff0c\\\uff08\uff082\uff09\\\uff09\u4e2d\u7684\u5c16\u5cf0\u65f6\u95f4\u5bfc\u6570\u53d1\u6563\u3002\u7531\u4e8e\\\uff08\\dot V^-=0\\\uff09\u548c\\\uff08V^-=\\vartheta\\\uff09\u4fdd\u6301\u7684\u70b9\u7531\\\uff08N\uff09\u7ef4\u6743\u91cd\u7a7a\u95f4\u4e2d\u7684\\\uff08\uff08N-1\uff09\u7ef4\u8d85\u66f2\u9762\u7ed9\u51fa\uff08\u4f8b\u5982\uff0c\u56fe1\u4e2d\u7684\u7ea2\u8272\u70b9\uff09\uff0c\u57fa\u4e8e\\\uff08V\\\uff09\u6216\\\uff08t{mathrm{spike}}}\u7684\u635f\u5931\u51fd\u6570\u51e0\u4e4e\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u662f\u53ef\u5fae\u7684\uff08\u7c7b\u4f3c\u4e8e\u5728\u6fc0\u6d3b\u7684\u201c\u626d\u7ed3\u201d\u5904\u4e0d\u53ef\u5fae\u7684\u5e26ReLUs\u7684\u975e\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\uff09\u3002\u5df2\u53d1\u5e03\u7684\u6a21\u62df\u7ed3\u679c\u8868\u660e\uff0c\u68af\u5ea6\u53ef\u7528\u4e8e\u4f18\u5316\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc[20][20][20][20]\u3002\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5728\u8ba1\u7b97\u53c2\u6570\u5bfc\u6570\u65f6\u5982\u4f55\u5904\u7406\u5c16\u5cf0\u4e0d\u8fde\u7eed\u6027\uff0c\u90a3\u4e48\u53cd\u5411\u4f20\u64ad\u662f\u4ec0\u4e48\u6837\u7684\u7c7b\u6bd4\u4f7f\u6211\u4eec\u80fd\u591f\u6709\u6548\u5730\u8ba1\u7b97\u8fd9\u4e9b\u5bfc\u6570\u5462\uff1f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u4f7f\u7528\u7684\u4f34\u968f\u65b9\u6cd5\u53cd\u5411\u4f20\u64ad\u672c\u8d28\u4e0a\u662f\u4f34\u968f\u65b9\u6cd5[20]\u7684\u7279\u4f8b\uff0c\u5b83\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u8fde\u7eed\u65f6\u95f4\u7cfb\u7edf\uff0c\u5982\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u6216\u6700\u8fd1\u5f15\u5165\u7684\u795e\u7ecf\u5e38\u5fae\u5206\u65b9\u7a0b[20]\u3002\u7ed9\u5b9a\u4e00\u7ec4\u7531\u5e38\u5fae\u5206\u65b9\u7a0b\u548c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u7684\u52a8\u6001\u53d8\u91cf\uff0c\u5b83\u6307\u5b9a\u4e86\u4e00\u7ec4\u4ee5\u53cd\u5411\u65f6\u95f4\uff08\u201c\u65f6\u95f4\u53cd\u5411\u4f20\u64ad\u201d\uff09\u8ba1\u7b97\u7684\u4f34\u968f\u53d8\u91cf\uff0c\u5e76\u8ddf\u8e2a\u6bcf\u4e2a\u53d8\u91cf\u5bf9\u603b\u635f\u5931\u7684\u8d21\u732e\u3002\u4f34\u968f\u53d8\u91cf\u7684\u6570\u91cf\u7b49\u4e8e\u539f\u59cb\u53d8\u91cf\u7684\u6570\u91cf\uff0c\u91cd\u8981\u7684\u662f\uff0c\u72ec\u7acb\u4e8e\u53c2\u6570\u7684\u6570\u91cf\uff0c\u5141\u8bb8\u5728\u53c2\u6570\u591a\u4e8e\u72b6\u6001\u53d8\u91cf\u7684\u7cfb\u7edf\uff08\u4f8b\u5982\uff0c\u795e\u7ecf\u7f51\u7edc\uff09\u4e2d\u8fdb\u884c\u6709\u6548\u7684\u68af\u5ea6\u8ba1\u7b97\u3002\u5386\u53f2\uff1aBackprop\u4e4b\u524d\u7684Backprop\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u800c\u4f34\u968f\u5fae\u5206\u65b9\u7a0b\u7684\u6982\u5ff5\u53ef\u4ee5\u8ffd\u6eaf\u5230\u62c9\u683c\u6717\u65e5\uff0c\u62c9\u683c\u6717\u65e5\u57281766\u5e74\u7684\u7ebf\u6027\u60c5\u51b5\u4e0b\u8bc1\u660e\u4e86\u5b83\u4eec\u7684\u5b58\u5728\u6027\u548c\u552f\u4e00\u6027\uff08\u65b9\u7a0b\u4f34\u968f[20]\uff09\uff0c\u5b83\u4eec\u5728\u6700\u4f18\u63a7\u5236\u7406\u8bba\u548c\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u5e94\u7528\u662f\u6700\u8fd1\u624d\u51fa\u73b0\u7684\u30021956\u5e74\uff0c\u5217\u592b\u00b7\u5e9e\u7279\u91cc\u4e9a\u91d1\uff08Lev Pontryagin\uff09\u8457\u540d\u5730\u4f7f\u7528\u4e86\u4f34\u968f\u6cd5\uff0c\u56e0\u4e3a\u4ed6\u7684\u6700\u5927\u539f\u7406\u4e3a\u63a7\u5236\u8f68\u8ff9\u7684\u4f18\u5316\u63d0\u4f9b\u4e86\u5fc5\u8981\u6761\u4ef6[20]\u3002\u4f7f\u7528\u4f34\u968f\u65b9\u6cd5\u8ba1\u7b97\u53c2\u6570\u68af\u5ea6\u7684\u7b2c\u4e00\u6279\u51fa\u7248\u7269\u4f3c\u4e4e\u662f\u4ea8\u5229\u00b7J\u00b7\u51ef\u5229\uff08Henry J.Kelley\uff09\u57281960\u5e74[20]\u548c\u963f\u745f\u00b7E\u00b7\u5e03\u83b1\u68ee\uff08Arthur E.Bryson\uff09\u57281961\u5e74[20]\u64b0\u5199\u7684\u3002\u8fd9\u4e24\u4e2a\u51fa\u7248\u7269\u90fd\u63d0\u4f9b\u4e86\u53cd\u5411\u4f20\u64ad\u8bef\u5dee\u7684\u65b9\u7a0b\uff0c\u8fd9\u4e9b\u8bef\u5dee\u76f8\u5f53\u4e8e\u540e\u4f20\u64ad\uff0820\uff09[20 ] [20 ]\u4e2d\u63a8\u5bfc\u51fa\u7684\u90a3\u4e9b\u8bef\u5dee\uff0c\u8fd9\u4f7f\u5f97\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u540e\u8005\u662f\u201cKelle\u5e03\u83b1\u68ee\u68af\u5ea6\u8fc7\u7a0b\u201d[20 ] [20 ]\u7684\u72ec\u7acb\u53d1\u73b0\u3002\u4f34\u968f\u53d8\u91cf=\u53cd\u5411\u4f20\u64ad\u8bef\u5dee\u5728\u975e\u5c16\u5cf0\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u4f34\u968f\u53d8\u91cf\u4ec5\u5bf9\u5e94\u4e8e\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u901a\u5e38\u79f0\u4e3a\u4e2d\u95f4\u53d8\u91cf\u6216\u8bef\u5dee\uff08\\\uff08\\delta\\\uff09\u3002\u8003\u8651\u5177\u6709\uff08L\uff09\u5c42\u548c\u8f93\u5165\uff08x0 0\uff09\u7684\u524d\u9988\u7f51\u7edc\u3002\u901a\u8fc7\u6fc0\u6d3b\\\uff08x_i \\\uff09\u3001\u5c42\\\uff08i\\\uff09\u7684\u91cd\u91cf\\\uff08w_i \\\uff09\uff0c\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u7684\uff08i<L\uff09\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u6211\u4eec\u6709\uff1a\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u6211\u4eec\u6709\uff1a\u6211\u4eec\u6709\uff1a\uff1a\uff1a\uff1a\u4ee5\u4e0b\u4ee5\u4e0b\u6211\u4eec\u5f00\u59cb\u5f00\u59cb\u5f00\u59cb{{\u6570\u7ec4\u6570\u7ec4{{lr}}{lr}}{{lr}}}{{1}}\u5b66\u6821\u5b66\u6821\u5b66\u6821....\u5411\u524d......\u5411\u524d.....\u5411\u524d..\u5411\u524d.\u5411\u524d.........\u548c...\u548c...........\u548c..................................................................................................\u548c\\delta_{L}=\\frac{\\partial\\mathcal{L}\uff08x_L\uff09}{\\partial x_L}f'\uff08w_Lx_{L-1}\uff09\\end{array}]\u7136\u540e\u5c06\\\uff08\\mathcal{L}\uff08x_L\uff09\\\uff09\u76f8\u5bf9\u4e8e\u6743\u91cd\\\uff08w_i\\\uff09\u4e0e\\\uff081\\leq i\\leq L\\\uff09\u7684\u5bfc\u6570\u8868\u793a\u4e3a\\begin{align}\\frac{\\mathrm{d}\\mathcal{L}\uff08x_L\uff09{\\mathrm{d}w_i}=\\delta_i x{i-1}\u3002\\end{align}Backprop\u5728\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u4e0d\u662f\u50cf\u8fd9\u6837\u7684\u79bb\u6563\u65b9\u7a0b\uff0c\u800c\u662f\u7531\u8fde\u7eed\u65f6\u95f4\u7684\u5fae\u5206\u65b9\u7a0b\u5b9a\u4e49\uff0c\u5e76\u4f7f\u7528\u5c16\u5cf0\u4e8b\u4ef6\u6765\u8026\u5408\u795e\u7ecf\u5143\u3002\u8003\u8651\u4e00\u4e2aN\uff08n\uff09\u6cc4\u6f0f\u79ef\u5206\u7f51\u7edc\u548c\u706b\u707e\u795e\u7ecf\u5143\u8026\u5408\u7684\u6743\u91cd\u77e9\u9635\uff08W\uff09\u3002\u5bf9\u4e8e\u819c\u7535\u4f4d\\\uff08V\\\uff09\u3001\u7a81\u89e6\u8f93\u5165\\\uff08I\\\uff09\uff08\u4e24\u4e2a\u5927\u5c0f\u7684\u5411\u91cf\\\uff08N\\\uff09\uff09\u548c\u635f\u5931\u51fd\u6570begin{align}\\mathcal{L}=L_p\uff08t{mathrm{spike}}\uff09+\\int_0^t L_V\uff08V\uff08t\uff09\uff0ct\uff09\\mathrm{d}t\\end{align}\u4f9d\u8d56\u4e8e\u5c16\u5cf0\u65f6\u95f4\u548c\u819c\u7535\u4f4d\u7684\u5411\u91cf\uff0c\u5c16\u5cf0\u4e4b\u95f4\u7684\u81ea\u7531\u52a8\u529b\u5b66\u4e3a[20]\uff0c\u7528\\\uff08\\lambda\\\uff09\u8868\u793a\u4f34\u968f\u53d8\u91cf\uff0c[\\begin{array}{lr}\\textrm{Forward}&\\textrm{Backward/adjunct}\\tau{mathrm{mem}}\\dot{V}=-V+I\\quad\\quad&\\quad\\quad\\tau{mem}\\tau{mathrm{mem V}-\\lambda{V}{\\", "note_en": "Event-based backpropagation in two spiking neurons and a spike-time dependent loss function \\(\\mathcal{L}\\). The final accumulated value is \\(\\frac{\\mathrm{d}\\mathcal{L}}{\\mathrm{d}w}\\). This is a visualization of simulation data. Spiking neurons communicate using discrete spike events which cause discontinuities in the neuron model\u2019s dynamics. What are the implications for gradient-based optimization? Can we even have gradients? In a spiking neural network composed of leaky integrate-and-fire neurons, gradients of membrane potentials and spike times exist and are finite almost everywhere in weight space, up to the hypersurfaces where spikes are added or lost. As recently shown by Christian Pehle and the author [20], deriving backpropagation to compute these gradients does not require any arbitrary choices or approximations. Furthermore, several recent publications demonstrate training of multi-layer spiking neural networks using exact gradients [20] [20] [20] [20] [20]. The event-based communication scheme of spiking neural networks can be retained during backpropagation (illustrated in the animation). This could allow novel neuromorphic hardware to achieve better scalability and energy efficiency compared to training non-spiking artificial neural networks on traditional digital hardware. How is it possible that a discontinuous system can have well-defined parameter derivatives? What is the analogy to backpropagation for systems defined in continuous time such as spiking neural networks, as opposed to discrete time? This blog post answers these two questions, in that order. Derivatives at Spikes Spiking neural networks are hybrid dynamical systems: they combine continuous dynamics with event-triggered discontinuous state changes. Such systems typically model phenomena occuring on short timescales using instantaneous events. In the case of spiking neurons, this is the neuronal spike mechanism; other examples are a bouncing ball that is reflected upon hitting the ground, an engine transmission that changes its gear at a certain rotational speed or a thermostat that switches a heating element when a temperature threshold is reached. Hybrid systems have been studied for the better half of a century within the context of optimal control theory [20], including the computation of parameter derivatives of state variables [20] [20]. The intuition is that if a small change to a parameter causes a small change of an event time, it causes a small change to state variables after the event. A formal mathematical treatment, as sketched in the following, makes this precise: it relates parameter derivatives before and after an event and states the conditions for when this relation holds. The relation \\(V(t, w)-\\vartheta=0\\) defines an implicit function (the black line) which allows us determine the spike time derivative \\(\\frac{\\partial t_{\\mathrm{spike}}}{\\partial w}\\). In hybrid systems, events are triggered by zero-crossings of an event function. Consider a leaky integrate-and-fire neuron where the event function is simply \\begin{align} V(t, w) - \\vartheta, \\end{align} where \\(V(t, w)\\) is the membrane potential at time \\(t\\) using synaptic weight \\(w\\) and \\(\\vartheta\\) is the spike threshold. For simplicity, consider a single input spike at \\(t=0\\). The relation \\(V(t, w) -\\vartheta=0\\) carves out a line in the \\(t, w\\) plane on which this relation holds (see figure on the left). This line is locally described by a function \\(t_{\\mathrm{spike}}(w)\\). The implicit function theorem [20] allows us to express its derivative, the spike time derivative \\(\\frac{\\partial t_{\\mathrm{spike}}}{\\partial w}\\), in terms of the membrane potential derivatives: \\begin{align} \\boxed{\\frac{\\partial t_{\\mathrm{spike}}}{\\partial w} = - \\frac{1}{\\frac{\\partial V}{\\partial t}} \\frac{\\partial V}{\\partial w}.} \\end{align} Intuitively, changes of \\(w\\) need to be compensated by a change of \\(t\\) in order to stay on the line where \\(V(t, w)-\\vartheta=0\\) holds. The rate of this change (left side of \\((2)\\)) is given by the negative ratio of the rates of change of \\(V\\) along the \\(t\\) and \\(w\\) axis (\\(\\frac{\\partial V}{\\partial t}\\) and \\(\\frac{\\partial V}{\\partial w}\\) in the right side of \\((2)\\)). At a spike, we reset the membrane potential to zero. Denoting the membrane potential after the transition using \\(V^+\\), we have \\begin{align} V^+(t_{\\mathrm{spike}}, w) = 0. \\end{align} We know that \\(t_{\\mathrm{spike}}\\) is a function of the weight \\(w\\) and that its derivative satisfies \\((2)\\). Since our demand is that \\((3)\\) holds as we change \\(w\\) (implicitly changing \\(t_{\\mathrm{spike}}\\)), the total derivative of \\(V^+\\) with respect to \\(w\\) must vanish: \\begin{align} \\frac{\\partial V^+}{\\partial w} + \\frac{\\partial t_{\\mathrm{spike}}}{\\partial w} \\frac{\\partial V^+}{\\partial t} = 0. \\end{align} Plugging in \\((2)\\) with \\(V^-\\) denoting evaluation before the spike and solving for \\(\\frac{\\partial V^+}{\\partial w}\\) yields the desired result: \\begin{align} \\frac{\\partial V^+}{\\partial w} = \\frac{\\frac{\\partial V^+}{\\partial t}}{\\frac{\\partial V^-}{\\partial t}} \\frac{\\partial V^-}{\\partial w}. \\end{align} In a leaky integrate-and-fire neuron with current-based synapses and membrane time constant \\(\\tau_{\\mathrm{mem}}\\), this can be written as [20] \\begin{align} \\boxed{\\frac{\\partial V^+}{\\partial w} = \\left(1+\\frac{\\vartheta}{\\tau_{\\mathrm{mem}}\\frac{\\partial V^-}{\\partial t}}\\right)\\frac{\\partial V^-}{\\partial w}.} \\end{align} Inbetween spikes, the dynamics of \\(\\frac{\\partial V}{\\partial w}\\) are given by differentiation with respect to \\(w\\) of the differential equations defining the dynamics of \\(V\\). At spikes, the derivatives jump according to \\((6)\\). These results generalize to a recurrent network of spiking neurons with arbitrarily many spikes [20]. The implicit function theorem requires that \\(\\dot{V}^- \\neq 0\\) in order for \\((2)\\) to hold. As the membrane potential becomes tangent to the threshold and we have \\(\\dot{V}^-\\to 0\\), the spike time derivative in \\((2)\\) diverges. Since the points where \\(\\dot V^- = 0\\) and \\(V^-=\\vartheta\\) holds are given by \\((N-1)\\)-dimensional hypersurfaces in the \\(N\\)-dimensional weight space (e.g., the red point in fig. 1), loss functions based on \\(V\\) or \\(t_{\\mathrm{spike}}\\) are differentiable almost everywhere (similar to non-spiking neural networks with ReLUs that are non-differentiable at the \u201ckink\u201d of the activation). Published simulation results demonstrate that gradients can be used to optimize spiking neural networks [20] [20] [20] [20] [20]. Now that we have an idea of how to deal with spike discontinuities when computing parameter derivatives, what is the analogy to backpropagation that allows us to efficiently compute these derivatives? The Adjoint Method Backpropagation as used in deep learning is essentially a special case of the adjoint method [20] which can also be applied to continuous-time systems such as spiking neural networks or the recently introduced neural ordinary differential equations [20]. Given a set of dynamic variables defined by ordinary differential equations and a loss function, it specifies a set of adjoint variables that are computed in reverse time (\u201cbackpropagation through time\u201d) and track the contribution of each variable to the total loss. The number of adjoint variables is equal to the number of original variables and, importantly, independent of the number of parameters, allowing for efficient gradient computation in systems with more parameters than state variables (e.g., neural networks). History: Backprop Before Backprop Was a Thing While the concept of adjoint differential equations can be traced back to Lagrange who showed their existence and uniqueness in the linear case in 1766 (\u00e9quation adjointe, [20]), their use in optimal control theory and machine learning is more recent. The adjoint method was famously used by Lev Pontryagin in 1956 for his maximum principle that provides neccessary conditions for the optimality of control trajectories [20]. The first publications using the adjoint method to compute parameter gradients seem to be those written by Henry J. Kelley in 1960 [20] and Arthur E. Bryson in 1961 [20]. Both publications provide equations to backpropagate errors that are equivalent to those given in later derivations of backpropagation [20] [20] [20], which causes some to consider the latter to be independent discoveries of the \u201cKelley-Bryson gradient procedure\u201d [20] [20]. Adjoint Variables = Backpropagated Errors In non-spiking artificial neural networks, the adjoint variables simply correspond to what are typically called the intermediate variables or errors (\\(\\delta\\)s) during backpropagation. Consider a feed-forward network with \\(L\\) layers and input \\(x_0\\). With activation \\(x_i\\), weight \\(w_i\\) at layer \\(i\\), activation function \\(f\\) and loss function \\(\\mathcal{L}(x_L)\\) we have for \\(i<L\\): [\\begin{array}{lr} \\textrm{Forward} & \\textrm{Backward/Adjoint} x_{i+1} = f(w_{i+1}x_i)\\quad\\quad&\\quad\\quad\\delta_{i} = w_{i+1}\\delta_{i+1} f\u2019(w_{i}x_{i-1}) \\mathcal{L}(x_L)&\\delta_{L} = \\frac{\\partial \\mathcal{L}(x_L)}{\\partial x_L}f\u2019(w_Lx_{L-1}) \\end{array}] The derivative of \\(\\mathcal{L}(x_L)\\) with respect to the weight \\(w_i\\) with \\(1\\leq i\\leq L\\) is then given as \\begin{align} \\frac{\\mathrm{d}\\mathcal{L}(x_L)}{\\mathrm{d}w_i} = \\delta_i x_{i-1}. \\end{align} Backprop in a Spiking Neural Network Instead of discrete equations like these, spiking neural networks are defined by differential equations in continuous time and use spike events to couple neurons. Consider a network of \\(N\\) leaky integrate-and-fire neurons coupled with weight matrix \\(W\\). With membrane potential \\(V\\), synaptic input \\(I\\) (both vectors of size \\(N\\)) and a loss function \\begin{align} \\mathcal{L}=l_p(t_{\\mathrm{spike}})+\\int_0^T l_V(V(t), t)\\mathrm{d}t \\end{align} that depends on the vector of spike times and membrane potentials, the free dynamics inbetween spikes are [20], denoting the adjoint variables using \\(\\lambda\\), [\\begin{array}{lr} \\textrm{Forward} & \\textrm{Backward/Adjoint} \\tau_{\\mathrm{mem}}\\dot{V} = -V + I\\quad\\quad&\\quad\\quad \\tau_{\\mathrm{mem}}\\lambda_{V}\u2019 = -\\lambda_{V} - \\frac{\\partial l_V}{\\partial V} \\tau_{\\mathrm{syn}}\\dot{I} = - I\\quad\\quad&\\tau_{\\mathrm{syn}}\\lambda_{I}\u2019 = -\\lambda_{I} + \\lambda_{V} \\end{array}] where a dot denotes the time derivative \\(\\frac{\\mathrm{d}}{\\mathrm{d}t}\\) and a dash denotes the reverse time derivative \\(-\\frac{\\mathrm{d}}{\\mathrm{d}t}\\). Spikes cause the synaptic input \\(I\\) to jump as \\begin{align} I^+ = I^- + We_n \\end{align} where \\(n\\) is the index of the spiking neuron and \\(e_n\\) is the unit vector with a \\(1\\) at index \\(n\\). Using the partial derivative jumps such as those presented in the previous section, the jump of the \\(n\\)th component of \\(\\lambda_V\\) turns out to be [20], with spike time \\(t_{\\mathrm{spike}}^k\\), \\begin{align} (\\lambda_V^-)n = (\\lambda_V^+)_n +\\frac{1}{\\tau{\\mathrm{mem}}(\\dot{V}^-)n}\\left[\\underbrace{\\vartheta\\lambda_V^+}{\\textrm{reset}}+\\underbrace{\\left(W^{\\mathsf{T}}(\\lambda_V^+-\\lambda_I)\\right)n}{\\textrm{backpropagated errors}}+\\underbrace{\\frac{\\partial l_p}{\\partial t_{\\mathrm{spike}}^k}}{\\textrm{spike time loss}}+\\underbrace{l_V^\u2013l_V^+}{\\textrm{voltage loss jump}}\\right]. \\end{align} This equation couples adjoint variables at spike times using the term representing backpropagated errors. The only quantities that need to be stored during the forward pass are the \\(n\\)th component of \\(\\dot{V}^-\\) and the spike time \\(t_{\\mathrm{spike}}^k\\). The derivative of \\(\\mathcal{L}\\) with respect to weight \\(w_{ji}\\) that connects neuron \\(i\\) to neuron \\(j\\) is then given as a sum of the \\(j\\)th component of \\(\\lambda_I\\) evaluated at the spike times of neuron \\(i\\), \\begin{align} \\frac{\\mathrm{d}\\mathcal{L}}{\\mathrm{d}w_{ji}} = \\sum_{\\textrm{spikes from } i} (\\lambda_I)_j. \\end{align} Since the adjoint variables are coupled only at spike times and gradients are computed by accumulating \\(\\lambda_I\\) at spike times, the backward pass can be computed in an event-based fashion. Conclusion Gradients of spiking neural networks are well-defined and finite almost everywhere in weight space, up to the hypersurfaces where spikes are added or lost. These gradients can be efficiently computed using event-based backpropagation and used for gradient-based optimization. The event-based nature of backpropagation in spiking neural networks could allow neuromorphic hardware to retain the efficiency of spike-based processing during training. References Event-based backpropagation can compute exact gradients for spiking neural networks. By Wunderlich, Timo C. and Pehle, Christian. Published in Scientific Reports 2021 11:1, 11:1-17, Nature Publishing Group, 2021. Fast and energy-efficient neuromorphic deep learning with first-spike times. By G\u00f6ltz, J. and Kriener, L. and Baumbach, A. and Billaudelle, S. and Breitwieser, O. and Cramer, B. and Dold, D. and Kungl, A. F. and Senn, W. and Schemmel, J. and Meier, K. and Petrovici, M. A.. Published in Nature Machine Intelligence 2021 3:9, 3:823-835, Nature Publishing Group, 2021. Temporal Coding in Spiking Neural Networks with Alpha Synaptic Function. By Comsa, Iulia M. and Fischbacher, Thomas and Potempa, Krzysztof and Gesmundo, Andrea and Versari, Luca and Alakuijala, Jyrki. Published in ICASSP, IEEE International Conference on Acoustics, Speech and Signal Processing - Proceedings, 2020-May:8529-8533, Institute of Electrical and Electronics Engineers Inc., 2020. Supervised learning based on temporal coding in spiking neural networks. By Mostafa, Hesham. Published in IEEE Transactions on Neural Networks and Learning Systems, 29:3227-3235, Institute of Electrical and Electronics Engineers Inc., 2018. Temporal Backpropagation for Spiking Neural Networks with One Spike per Neuron. By Kheradpisheh, Saeed Reza and Masquelier, Timoth\u00e9e. Published in International Journal of Neural Systems, 30, World Scientific Publishing Company, 2020. Modeling, simulation, sensitivity analysis, and optimization of hybrid systems. By Barton, Paul I. and Lee, Cha Kun. Published in ACM Transactions on Modeling and Computer Simulation (TOMACS), 12:256-289, ACM PUB27 New York, NY, USA , 2002. Parametric sensitivity functions for hybrid discrete/continuous systems. By Gal\u00e1n, Santos and Feehery, William F. and Barton, Paul I.. Published in Applied Numerical Mathematics, 31:17-47, North-Holland, 1999. General sensitivity equations of discontinuous systems. By Rozenvasser, E. N.. Published in Autom. Remote Control, 1967:400\u2013404, Springer US, New York, NY; Pleiades Publishing, New York, NY; MAIK \u201cNauka/Interperiodica\u201d, Moscow, 1967. The Implicit Function Theorem: History, Theory, and Applications. By Krantz, Steven G. and Parks, Harold R.. Springer New York, 2013. ISBN: 9781461459811. A theoretical framework for back-propagation. By Lecun, Yann. In Proceedings of the 1988 Connectionist Models Summer School, CMU, Pittsburg, PA, pages 21\u201328, Morgan Kaufmann, 1988. Neural Ordinary Differential Equations. By Chen, Ricky T. Q. and Rubanova, Yulia and Bettencourt, Jesse and Duvenaud, David K. In Advances in Neural Information Processing Systems, 31, pages , Curran Associates, Inc., 2018. Solution de diff\u00e9rents probl\u00e8mes de calcul int\u00e9gral. By Lagrange, Joseph-Louis. In Miscellanea taurinensia, Soci\u00e9t\u00e9 royale de Turin, 1766. The maximum principle in the theory of optimal processes of control. By Boltyanski, V.G. and Gamkrelidze, R.V. and Mishchenko, E.F. and Pontryagin, L.S.. Published in IFAC Proceedings Volumes, 1(1):464-469, 1960. Gradient Theory of Optimal Flight Paths. By Kelley, Henry J.. Published in ARS Journal, 30(10):947-954, 1960. A gradient method for optimizing multi-stage allocation processes. By Bryson, A.E.. In Proceedings of a Harvard Symposium on Digital Computers and Their Applications, 1961. Taylor expansion of the accumulated rounding error. By Linnainmaa, Seppo. Published in BIT Numerical Mathematics, 16:146-160, 1976. Applications of advances in nonlinear sensitivity analysis. By Werbos, Paul J.. In System Modeling and Optimization, pages 762\u2013770, Springer Berlin Heidelberg, 1982. Learning Internal Representations by Error Propagation. By Rumelhart, David E. and McClelland, James L.. In Parallel Distributed Processing: Explorations in the Microstructure of Cognition: Foundations, pages 318-362, 1987. Artificial neural networks, back propagation, and the Kelley-Bryson gradient procedure. By Dreyfus, Stuart E.. Published in Journal of Guidance, Control, and Dynamics, 13(5):926-928, 1990. On derivation of MLP backpropagation from the Kelley-Bryson optimal-control gradient formula and its application. By Mizutani, E. and Dreyfus, S.E. and Nishio, K.. In Proceedings of the IEEE-INNS-ENNS International Joint Conference on Neural Networks. IJCNN 2000. Neural Computing: New Challenges and Perspectives for the New Millennium, 2, pages 167-172 vol.2, 2000.", "posttime": "2022-02-17 02:50:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u795e\u7ecf\u7f51\u7edc,\u7b97\u6cd5,\u53cd\u5411,based,\u5c16\u5cf0", "title": "\u57fa\u4e8e\u4e8b\u4ef6\u7684\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u5728\u8109\u51b2\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u5e94\u7528", "title_en": "Event-Based Backpropagation for Exact Gradients in Spiking Neural Networks", "transed": 1, "url": "https://timowunderlich.github.io/jekyll/update/2022/02/05/backprop.html", "via": "", "real_tags": ["\u795e\u7ecf\u7f51\u7edc", "\u7b97\u6cd5", "\u53cd\u5411", "based", "\u5c16\u5cf0"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073671, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e86\u89e3\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f2\u300b\u53ca\u5176\u65e5\u672c\u7248\u300aYume K\u014dj\u014d\uff1aDoki Doki\u6050\u614c\u300b\u80cc\u540e\u7684\u5b8c\u6574\u5386\u53f2\u3002\u7b2c1\u90e8\u5206-\u4e3a\u8d85\u7ea7\u7403\u5458\uff081:17\uff09\u7b2c2\u90e8\u5206-A\u4e50\u3002\u3002\u3002", "note_en": "Learn the complete history behind Super Mario Bros. 2 and its Japanese counterpart, Yume K\u014dj\u014d: Doki Doki Panic.Part 1 - For Super Players (1:17)Part 2 - A Le...", "posttime": "2022-02-17 02:49:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9a6c\u91cc\u5965,mario,doki", "title": "\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f2\u300b\uff082015\uff09[\u89c6\u9891]", "title_en": "Super Mario Bros. 2 (2015) [video]", "transed": 1, "url": "https://www.youtube.com/watch?v=2EUYSN5aFcE", "via": "", "real_tags": ["\u9a6c\u91cc\u5965", "mario", "doki"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073670, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6355\u83b7\u9690\u85cf\u7684\u62a5\u544a\u3002c\u662f\u4e00\u4e2aUSB\u4e3b\u673a\u793a\u4f8b\u7a0b\u5e8f\uff0c\u7528\u4e8e\u6253\u5370\u4ece\u8bbe\u5907\u63a5\u6536\u7684HID\u62a5\u544a\u3002\u6253\u5f00\u4e32\u884c\u7aef\u53e3\u5e76\u5c06\u8bbe\u5907\u8fde\u63a5\u5230pico\u3002\u9ed8\u8ba4\u7684D+/D-\u662fgp0/gp1\u3002\u8c03\u7528pio_usb_add_port\uff08\uff09\u4ee5\u4f7f\u7528\u5176\u4ed6\u7aef\u53e3\u3002\nusb_\u8bbe\u5907\u3002c\u662f\u4e00\u4e2aHID USB FS\u8bbe\u5907\u793a\u4f8b\uff0c\u6bcf0.5s\u79fb\u52a8\u4e00\u6b21\u9f20\u6807\u5149\u6807\u3002D+\u5f15\u811a\u9700\u8981\u5916\u90e81.5\u6b27\u59c6\u4e0a\u62c9\u5bc4\u5b58\u5668\uff08\u9ed8\u8ba4\u4e3agp0\uff09\u3002", "note_en": "capture_hid_report.c is a USB host sample program which print HID reports received from device. Open serial port and connect devices to pico. Default D+/D- is gp0/gp1. Call  pio_usb_add_port() to use additional ports.\n usb_device.c is a HID USB FS device sample which moves mouse cursor every 0.5s. External 1.5kohm pull-up register is necessary to D+ pin (Default is gp0).", "posttime": "2022-02-17 02:49:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,raspberry-pi,\u5b9a\u4e49,defined,\u8bbe\u5907", "title": "\u8f6f\u4ef6\u5b9a\u4e49\u7684USB\u7aef\u53e3\uff08Raspberry Pi pico RP2040\uff09", "title_en": "Software defined USB port (Raspberry Pi pico RP2040)", "transed": 1, "url": "https://github.com/sekigon-gonnoc/Pico-PIO-USB", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u5b9a\u4e49", "defined", "\u8bbe\u5907"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073669, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5728\u4e8b\u6545\u73b0\u573a\u5de5\u4f5c\u3002io\u662f\u4f26\u6566\u7684\u4e00\u5bb6\u521d\u521b\u516c\u53f8\uff0c\u5b83\u521a\u521a\u4f7f\u7528Fivetran\u8fdb\u884cETL\uff0c\u4f7f\u7528dbt\u8fdb\u884c\u8f6c\u6362\uff0c\u6784\u5efa\u4e86\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5806\u6808\u3002\n\u867d\u7136\u6211\u4eec\u6784\u5efa\u7684\u7ba1\u9053\u4ec5\u4f9b\u5185\u90e8\u4f7f\u7528\uff0c\u4f46\u6211\u4eec\u5f88\u5feb\u610f\u8bc6\u5230\uff0cMetabase\u53ef\u4ee5\u4e3a\u6211\u4eec\u7684\u5185\u90e8\u4ea7\u54c1\u63d0\u4f9b\u6bd4\u6211\u4eec\u96f6\u788e\u7684\u57fa\u672cJavascript\u56fe\u5f62\u66f4\u597d\u7684\u4eea\u8868\u76d8\u3002\n\u8fd9\u5f88\u597d\uff0c\u4f46\u6211\u4eec\u5728\u4e3a\u81ea\u5df1\u5efa\u8bbe\u65f6\u63a5\u53d7\u4e86\u4e00\u4e9b\u59a5\u534f\uff0c\u5982\u679c\u6211\u4eec\u5411\u5ba2\u6237\u63d0\u4f9b\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u7684dbt\u6d4b\u8bd5\u662f\u8106\u5f31\u7684\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u53d1\u5e03\u4e00\u4e2a\u6d4b\u8bd5\u7ecf\u5e38\u5931\u8d25\u7684\u6570\u636e\u4ea7\u54c1\u3002\n---\u7248\u672c\uff1a2\u4e2a\u6a21\u578b\uff1a-\u540d\u79f0\uff1a\u884c\u52a8\u63cf\u8ff0\uff1a\u4e8b\u4ef6\u884c\u52a8\u5217\uff1a-\u540d\u79f0\uff1a\u7ec4\u7ec7id\u63cf\u8ff0\uff1a&#34\uff1b\u7ec4\u7ec7ID&#34\uff1b\u6d4b\u8bd5\uff1a-\u975e\u7a7a-\u5173\u7cfb\uff1ato:ref\uff08&#39\uff1b\u7ec4\u7ec7&#39\uff1b\uff09\u5b57\u6bb5\uff1a\u7ec4\u7ec7id\n\u8be5\u6d4b\u8bd5\u8ba9dbt\u786e\u8ba4\u884c\u52a8\u8868\u4e2d\u7684\u6240\u6709\u7ec4\u7ec7id\u503c\u90fd\u51fa\u73b0\u5728\u7ec4\u7ec7\u4e2d\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u5728\u52a0\u5165\u65f6\u641e\u7838\u4e86\u4ec0\u4e48\uff0c\u8fd8\u662f\u6570\u636e\u770b\u8d77\u6765\u4e0d\u9519\uff1f\n\u6839\u636e\u6211\u4eec\u7684\u6d4b\u8bd5\u5957\u4ef6\uff0c\u6570\u636e\u770b\u8d77\u6765\u4e0d\u592a\u597d\u3002\u4f46\u53ea\u6709\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6d4b\u8bd5\u5957\u4ef6\u6bcf\u4e09\u6b21\u8fd0\u884c\u4e00\u6b21\uff0c\u6211\u4eec\u5c31\u4f1a\u770b\u5230\u5982\u4e0b\u9519\u8bef\uff1a\n\u6d4b\u8bd5\u5173\u7cfb\u5931\u8d25_\u4e8b\u4ef6_\u884c\u52a8_\u7ec4\u7ec7_id u\u53c2\u8003u\u7ec4\u7ec7uu\uff08models/staging/product/stg_product.yml\uff09\u5f97\u52301\u4e2a\u7ed3\u679c\uff0c\u5982\u679c\uff01=0\u76ee\u6807/\u5df2\u7f16\u8bd1/\u5206\u6790/\u6a21\u578b/\u767b\u53f0/\u4ea7\u54c1/stg_\u4ea7\u54c1\u7684\u5b8c\u6574SQL\u3002yml/relationships_inc_e2d88f3fd5bd723431990564532e121c\u3002sql\n\u8fd9\u4e0d\u662f\u6700\u6e05\u6670\u7684\u8f93\u51fa\uff0c\u4f46\u53ef\u4ee5\u7406\u89e3\u4e3a\u201cactions\u8868\u4e2d\u7684Organization ID\u4e0eOrganization Stable\u4e2d\u7684ID\u4e0d\u5339\u914d\u201d\u3002\n\u6211\u4eec\u4f7f\u7528Fivetran\u5c06Postgres\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff08\u7ec4\u7ec7\u548c\u4e8b\u4ef6\u884c\u52a8\u7684\u6765\u6e90\uff09\u62c9\u5165BigQuery\u6570\u636e\u4ed3\u5e93\u3002\n\u5728Postgres land\u4e2d\uff0c\u60a8\u53ef\u4ee5\u671f\u671b\u5728\u6240\u6709\u8868\u4e2d\u4ee5\uff08\u57fa\u672c\u4e0a\uff09\u4e00\u81f4\u7684\u6570\u636e\u89c6\u56fe\u8fd0\u884c\u3002\u5373\u4f7f\u5bf9\u4e8e\u5355\u4e2a\u67e5\u8be2\uff0c\u6570\u636e\u4e5f\u662f\u4ee5\u539f\u5b50\u65b9\u5f0f\u63d2\u5165\u548c\u66f4\u65b0\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5728\u53e6\u4e00\u4e2a\u8868\u4e2d\u627e\u5230\u4e00\u4e2a\u5f15\u7528\u4e86\u4e0d\u5b58\u5728\u8be5\u5f15\u7528\u7684\u5185\u5bb9\u7684\u6e90\uff0c\u90a3\u5c06\u662f\u975e\u5e38\u5947\u602a\u7684\u3002\n\u8fd9\u5c31\u5f15\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u6211\u4eec\u4ecePostgres\u83b7\u53d6\u6570\u636e\uff0c\u8fd9\u662f\u4e00\u81f4\u7684\uff0c\u90a3\u4e48\u8fd9\u4e9b\u65ad\u88c2\u7684\u5173\u7cfb\u4f1a\u5e26\u6765\u4ec0\u4e48\uff1f\n\u867d\u7136Postgres\u53ef\u80fd\u662f\u4e00\u81f4\u7684\uff0c\u4f46\u7531\u6b64\u4ea7\u751f\u7684BigQuery\u6570\u636e\u4ed3\u5e93\u5374\u4e0d\u4e00\u81f4\u3002Fivetran\u7684\u540c\u6b65\u8fc7\u7a0b\u53ef\u4ee5\u7b80\u5316\u4e3a\u4ee5\u4e0bpsuedo\u4ee3\u7801\uff1a\n\u6bcf15\u5206\u949f\uff1a\u7528\u4e8e\u6570\u636e\u5e93\u4e2d\u7684\u8868\u3002\u6240\u6709\u8868\u683c\uff1a\u81ea\u4e0a\u6b21\u540c\u6b65\u4ee5\u6765\u7684\u66f4\u6539\u3002\u83b7\u53d6\u81ea\uff08table.last_Synched\uff09\u8868\u4ee5\u6765\u7684\u66f4\u6539\u3002last_synced=now\uff08\uff09\u4ed3\u5e93\u3002\u63d2\u5165\uff08\u8868\u683c\uff0c\u81ea\u4e0a\u6b21\u540c\u6b65\u4ee5\u6765\u5df2\u66f4\u6539\uff09\nBigQuery\u4e0d\u63d0\u4f9b\u8de8\u591a\u4e2a\u8868\u7684\u4e00\u81f4\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u6700\u7ec8\u751f\u6210\u4e86\u4e00\u4e2a\u201c\u952f\u9f7f\u201d\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8868\u5728\u540c\u4e00\u65f6\u95f4\u540c\u6b65\u5230\u4e0d\u540c\u7684\u70b9\u3002\n\u5982\u679c\u5728t0\u4e4b\u540e\uff0c\u4f46\u5728t2\u4e4b\u524d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7ec4\u7ec7\u548c\u4e00\u4e9b\u4e0e\u4e4b\u76f8\u5173\u7684\u4e8b\u4ef6\u64cd\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u540c\u6b65\u5c06\u8df3\u8fc7\u8be5\u7ec4\u7ec7\uff0c\u4f46\u5305\u542b\u8fd9\u4e9b\u64cd\u4f5c\u3002\n\u8fd9\u5c31\u662f\u6211\u4eec\u6d4b\u8bd5\u5931\u8d25\u7684\u539f\u56e0\uff0c\u4e5f\u662f\u5b83\u4eec\u968f\u673a\u5931\u8d25\u7684\u539f\u56e0\uff08flake\uff09\uff1a\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8eFivetran\u4f55\u65f6\u6267\u884c\u4e86\u540c\u6b65\uff0c\u4ee5\u53ca\u6d4b\u8bd5\u662f\u5426\u5931\u8d25\u53ef\u80fd\u9057\u6f0f\u4e86\u54ea\u4e9b\u6570\u636e\u3002\n\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7684BigQuery\u4ed3\u5e93\u4e2d\u7684\u8868\u5305\u542b\u4e00\u81f4\u622a\u6b62\u7684\u66f4\u65b0\uff0c\u5728\u6240\u6709\u8868\u4e2d\u5e94\u7528\u76f8\u540c\u3002\u8fd9\u5c06\u907f\u514d\u6211\u4eec\u7684\u5173\u7cfb\u4e0d\u534f\u8c03\uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u4f9d\u9760\u6211\u4eec\u7684\u6d4b\u8bd5\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2adbt\u6a21\u578bsync_\u6c34\u5370\uff0c\u8be5\u6a21\u578b\u4f30\u8ba1\u5728\u6700\u540e\u4e00\u6b21Fivetran\u8fd0\u884c\u5f00\u59cb\u4e4b\u524d\u5b89\u5168\u7684\u65f6\u95f4\u6233\u3002\n--\u6a21\u578b/\u540c\u6b65_\u6c34\u5370\u3002sql{config\uff08\u7269\u5316=&#34\uff1b\u8868&#34\uff1b\uff0c\uff09}\u2014\u2014\u8fd9\u4e2a\u8868\u6807\u8bb0\u4e86\u6211\u4eec&#39\uff1b\u6211\u8fd0\u884cdbt\u3002--cutoff\u7528\u4e8e\u8fc7\u6ee4\u6bcf\u4e2a--database\u8868\u4e2d\u6700\u8fd1\u7684\u4efb\u4f55\u66f4\u6539\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u786e\u4fdd--dataset\u4e2d\u7684\u6bcf\u4e2a\u8868\u662f\u4e00\u81f4\u7684\uff0c\u5373\u4f7f\u540c\u6b65\u53d1\u751f\u5728\u4e0d\u540c\u7684--period\u3002---\u5f53Fivetran\u6bcf15\u7c73\u5c1d\u8bd5\u540c\u6b65\u4e00\u6b21\u65f6\uff0c\u9009\u62e920\u7c73\uff0c\u8fd9\u5e94\u8be5\u5728&lt\uff1b100\u4e07\u3002\u8fd4\u56de20\u7c73\u53ef\u4ee5\u786e\u4fdd\u6211\u4eec\u5728\u6700\u540e\u4e00\u6b21\u5b8c\u6574\u540c\u6b65\u5f00\u59cb\u540e\u5b89\u5168\u5730\u5207\u65ad\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u8868\u90fd\u662f\u4e00\u81f4\u7684\u3002\u9009\u62e9\u65f6\u95f4\u6233_sub\uff08\u5f53\u524d\u65f6\u95f4\u6233\uff08\uff09\uff0c\u95f4\u969420\u5206\u949f\uff09\u4f5c\u4e3a\u622a\u6b62\u65f6\u95f4\n\u7531\u4e8e\u6211\u4eec\u7684Fivetran\u6bcf15\u7c73\u540c\u6b65\u4e00\u6b21\uff0c\u5e76\u4e14\u6bcf\u6b21\u540c\u6b65\u5728\u5927\u7ea61\u7c73\u7684\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u6211\u4eec\u77e5\u9053\u6240\u6709\u8868\u90fd\u5c06\u5b8c\u6210\u4e00\u6b21\u540c\u6b65&lt\uff1b2000\u4e07\u5e74\u524d\uff0c\u5c4a\u65f6\u5b83\u5c06\u5305\u542b\u622a\u6b62\u65e5\u671f\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u6240\u6709\u6570\u636e\u3002\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5c06\u622a\u6b62\u5e94\u7528\u4e8e\u6240\u6709\u8868\uff0c\u5ffd\u7565\u8d85\u51fa\u8be5\u70b9\u7684\u4efb\u4f55\u4e0d\u4e00\u81f4\u7684\u540c\u6b65\u8fdb\u5ea6\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06\u8fd9\u4e2a\u8868\u5177\u4f53\u5316\uff0c\u6240\u4ee5\u5728dbt\u8fd0\u884c\u5f00\u59cb\u65f6\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\u8fd9\u4e0e\u89c6\u56fe\u76f8\u53cd\uff0c\u5728\u89c6\u56fe\u4e2d\uff0c\u6bcf\u5f53\u6211\u4eec\u67e5\u8be2\u8868\u65f6\uff0ccurrent_timestamp\uff08\uff09\u7684\u503c\u90fd\u4f1a\u6539\u53d8\u3002\n\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8868\u6a21\u578b\uff0c\u6211\u4eec\u5bf9createdat\u884c\u5e94\u7528\u622a\u6b62\u503c\uff1a\n\u6e90\u4ee3\u7801\u4e3a\uff08\u4ece{source\uff08&#39\uff1bcore#u production#u public&#39\uff1b\uff0c&#39\uff1borganizations&#39\uff1b\uff09}\u4e2d\u9009\u62e9*\uff0c{{ref\uff08&#39\uff1bsync#u\u6c34\u5370&#39\uff1b\uff09}\u540c\u6b65_\u6c34\u5370\uff0c\u5176\u4e2d_fivetran _deleted\u4e3a\u7a7a\uff0c\u5e76\u5728&lt\uff1b\u540c\u6b65\u6c34\u5370\u3002\u622a\u6b62\u65f6\u95f4\uff09\uff0c\u91cd\u547d\u540d\u4e3a\uff08\u9009\u62e9/*\u2026*/\u4ece\u6e90\u4ee3\u7801\uff09\u9009\u62e9*\u4ece\u91cd\u547d\u540d\n\u4f7f\u7528ref\uff08&#39\uff1bsync#u\u6c34\u5370&#39\uff1b\uff09\u8fd9\u610f\u5473\u7740dbt\u5c06\u77e5\u9053\u5728\u6211\u4eec\u7684\u6a21\u578b\u4e4b\u524d\u6784\u5efa\u6c34\u5370\uff0c\u56e0\u4e3a\u5b83\u5c06\u8ddf\u8e2adbt\u56fe\u5f62\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\n\u6211\u4eec\u5bf9\u5176\u4f59\u7684\u6570\u636e\u5e93\u8868\u5e94\u7528\u76f8\u540c\u7684\u6a21\u5f0f\uff0c\u786e\u4fdd\u6bcf\u4e2a\u8868\u90fd\u6709\u4e00\u4e2a\u4e00\u81f4\u7684\u622a\u6b62\u70b9\u3002\n\u6211\u4eec\u4e0d\u53ea\u662f\u4ece\u6211\u4eec\u7684Postgres\u6570\u636e\u5e93\u540c\u6b65\u6570\u636e\uff1a\u6211\u4eec\u4ece\u5404\u79cd\u8d44\u6e90\u4e2d\u63d0\u53d6\u6570\u636e\uff0c\u6bd4\u5982\u7ec6\u5206\u5e02\u573a\u6216\u793e\u4ea4\u5a92\u4f53\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u80fd\u5f15\u7528corePostgres\u8d44\u6e90\u3002\n\u5982\u679c\u6211\u4eec\u770b\u5230\u7c7b\u4f3c\u7684\u7247\u72b6\u6d4b\u8bd5\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e9bModelsTo\u4e0a\u91cd\u590d\u4f7f\u7528\u622a\u6b62\u3002\u6211\u4eec\u5bf9BigQuery\u4e8b\u4ef6\u8868\u5c31\u662f\u8fd9\u6837\u505a\u7684\uff0c\u8fd9\u4e9b\u8868\u662f\u4ece\u4ea7\u54c1\u5b9e\u65f6\u5199\u5165\u7684\u3002\n\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u8fd9\u662f\u7b80\u5355\u800c\u5feb\u901f\u7684\uff0c\u5e76\u4e14\u5982\u679c\u9700\u8981\u5f15\u7528\u6216\u68c0\u67e5\u6570\u636e\u4ed3\u5e93\uff0c\u53ef\u4ee5\u5c06\u4e2d\u65ad\u4fdd\u5b58\u5230\u6570\u636e\u4ed3\u5e93\u4e2d\u3002\n\u4e0d\u7ba1\u4f60\u662f\u7528\u8fd9\u4e2a\u8fd8\u662f\u522b\u7684\u4ec0\u4e48\uff0c\u907f\u514d\u4e0d\u53ef\u9760\u7684\u6d4b\u8bd5\u90fd\u5f88\u91cd\u8981\u3002\u5f53\u6211\u7b2c\u4e00\u6b21\u5e94\u7528\u4e2d\u65ad\u65f6\uff0c\u6211\u53d1\u73b0\u4e0e\u4e2d\u65ad\u65e0\u5173\u7684\u6545\u969c\u662f\u5408\u6cd5\u7684\u9519\u8bef\uff0c\u8fd9\u5e76\u4e0d\u5947\u602a\u3002\n\u867d\u7136\u5728\u539f\u578b\u8bbe\u8ba1\u65f6\u5ffd\u7565\u8fd9\u4e9b\u5931\u8d25\u662f\u6b63\u786e\u7684\u51b3\u5b9a\uff0c\u4f46\u6211\u5efa\u8bae\u5728\u5411\u5ba2\u6237\u516c\u5f00\u8fd9\u4e9b\u6570\u636e\u4e4b\u524d\u5148\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\u3002\n\u5f53\u4f60\u6709\u4e00\u5957\u53ef\u4ee5\u4f9d\u8d56\u7684\u6d4b\u8bd5\u5957\u4ef6\u65f6\uff0c\u751f\u6d3b\u7684\u538b\u529b\u5c31\u66f4\u5c0f\u4e86\uff01\n\u5728Hackernews\u4e0a\u8ba8\u8bba\u8fd9\u7bc7\u5e16\u5b50\u3002\u5982\u679c\u4f60\u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\uff0c\u60f3\u770b\u5230\u66f4\u591a\uff0c\u8bf7\u70b9\u51fb@lawrjones\u8ddf\u6211\u6765\u3002", "note_en": "I work at  incident.io, a start-up in London that just built our first data stack using  Fivetran for ETL and dbt for transformations.\n While we built the pipeline for internal use only, we soon realised Metabase could provide much better dashboards for our internalproduct than our  scrappy  basic Javascript graphs.\n   This would be fine, except we\u2019d accepted some compromises while building forourselves that we couldn\u2019t if we were to provide this data to our customers.Namely, our dbt tests were flaky, and there was no way we\u2019d ship a data productwhere our tests would regularly fail.\n   --- version :  2 models :  -  name :  actions  description :  Incident actions  columns :  -  name :  organisation_id  description :  &#34; Organisation   ID&#34;  tests :  -  not_null  -  relationships :  to :  ref(&#39;organisations&#39;)  field :  organisation_id\n This test gets dbt to confirm all  organisation_id values in the actions table appear in  organisations. Put simply,have we screwed something up in our join, or does the data look good?\n According to our test suite, the data  did not look good. But only on someruns, where about once every three runs of the test suite we\u2019d see an error likethis:\n Failure in test relationships_incident_actions_organisation_id__ref_organisations_ (models/staging/product/stg_product.yml)Got 1 result, configured to fail if != 0compiled SQL at target/compiled/analytics/models/staging/product/stg_product.yml/relationships_inc_e2d88f3fd5bd723431990564532e121c.sql\n This isn\u2019t the clearest output, but it can understood as \u201cthere wereorganisation IDs in the actions table that had no match in the organisationstable\u201d.\n   We use Fivetran to pull data from our Postgres database, the source of theorganisation and incident actions, into our BigQuery data warehouse.\n In Postgres-land, you can expect to be running with a (mostly) consistent viewof data across all tables. Even with respect to individual queries, data isinserted and updated atomically, so it would be very strange for you to find aresource that references something in another table where that reference doesnot exist.\n That begs the question: if we\u2019re sourcing our data from Postgres, which isconsistent, what gives with these broken relations?\n Well, while Postgres might be consistent, the resulting BigQuery data warehouseis not. The syncing process for Fivetran can be reduced to this psuedo-code:\n every 15 minutes: for table in database.all_tables: changes_since_last_sync = table.get_changes_since(table.last_synced) table.last_synced = now() warehouse.insert(table, changed_since_last_sync)\n BigQuery does not provide consistency across multiple tables, so we end upproducing a \u2018jagged\u2019 dataset, where each table is synced to a different point intime.\n     If after t0, but before t2, we add an organisation and some incident actionsthat relate to it, then our sync will have skipped the organisation but includedthe actions.\n That\u2019s the cause of our failing tests, and why they fail randomly (flake): itentirely depends on when Fivetran has performed a sync and what data may havebeen missed on whether the test fails.\n  In an ideal world, our BigQuery warehouse would have tables that contain updatesup-to a consistent cutoff, applied equally across all tables. That would avoidus having patchy relations, and allow us to lean on our tests.\n  First, we create a dbt model  sync_watermarks that estimates a timestamp thatis safely before the start of the last Fivetran run.\n  -- models/sync_watermarks.sql {{  config (  materialized  =  &#34;table&#34; ,  ) }} -- This table marks the point at which we&#39;ve run dbt. The -- cutoff is used to filter any very recent changes from each -- database table, allowing us to ensure each table in the -- dataset is consistent, even when syncs happen at different -- periods. --  -- 20m is chosen as Fivetran attempts to sync every 15m, which -- should complete in &lt;1m. Going back 20m ensures we cutoff -- safely after the start of the last complete sync, meaning -- each table will be consistent. select  timestamp_sub ( current_timestamp (),  interval  20  minute )  as  cutoff_at\n As our Fivetran syncs every 15m, and each sync completes in ~1m, we know alltables will have completed a sync &lt;20m ago, at which point it will contain alldata up-to and beyond that cutoff.\n This means we can apply the cutoff to all tables, ignoring any inconsistent syncprogress beyond that point.\n Note that we\u2019ve materialised this table so it gets calculated just once, at thestart of our dbt run. This is as opposed to a view, where any time we query thetable, the value of  current_timestamp() would change.\n Then for each of our table models, we apply the cutoff against the row createdat:\n with source  as  (  select  *  from  {{  source ( &#39;core_production_public&#39; ,  &#39;organisations&#39; )  }} ,  {{  ref ( &#39;sync_watermarks&#39; )  }}  sync_watermarks  where  _fivetran_deleted  is  null  and  created_at  &lt;  sync_watermarks . cutoff_at ), renamed  as  (  select  /* ... */  from  source ) select  *  from  renamed\n Using  ref(&#39;sync_watermarks&#39;) means dbt will know to build thewatermark before our model, as it will track the dependency in dbt\u2019s graph.\n We apply the same pattern to the rest of our database tables, ensuring eachtable has a consistent cutoff.\n   We don\u2019t just sync data from our Postgres database: we pull it from a variety ofsources, such as Segment or social media, all of which might reference corePostgres resources.\n If we see similar flaky test issues, we can reuse the cutoff on these modelstoo. We do just that for our BigQuery event tables which are written to inrealtime from the product.\n   There\u2019s many ways to solve this problem, but this is simple and quick, and hasthe advantage of saving the cutoff into your data warehouse if you ever need toreference or check it.\n Whether you use this or something else, it\u2019s important to avoid flaky tests.When first applying the cutoff, I was unsurprised to discover failures that wereunrelated to the cutoff, and were legitimate bugs.\n While it was the right decision to ignore these failures when prototyping, I\u2019mglad we sorted it before exposing this data to our customers.\n Life is just less stress when you have a test suite you can depend on!\n  Discuss this post on  Hackernews. If you liked this post and want to see more, follow me at  @lawrjones.", "posttime": "2022-02-17 02:42:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e2d\u65ad,flaky,\u6570\u636e", "title": "\u7528\u540c\u6b65\u4e2d\u65ad\u4fee\u590d\u8106\u5f31\u7684dbt\u6d4b\u8bd5", "title_en": "Fixing flaky dbt tests with a sync cutoff", "transed": 1, "url": "https://blog.lawrencejones.dev/flaky-dbt-tests/", "via": "", "real_tags": ["\u4e2d\u65ad", "flaky", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073667, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53e4\u5df4\u536b\u751f\u5b98\u54582019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u75ab\u82d7\u63a5\u79cd\u7533\u8bf7\uff0c\u4ed6\u4eec\u5c06\u7533\u8bf7\u4e16\u754c\u536b\u751f\u7ec4\u7ec7\u6279\u51c6\u7684\u4e00\u79cd\u56fd\u4ea7CVID-19\u75ab\u82d7\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5ba3\u5e03\u4ed6\u4eec\u5df2\u7ecf\u83b7\u5f97\u8d44\u91d1\uff0c\u4e3a\u4f4e\u6536\u5165\u56fd\u5bb6\u751f\u4ea72\u4ebf\u79cd\u75ab\u82d7\u3002\n\u53e4\u5df4\u536b\u751f\u76d1\u7ba1\u673a\u6784\uff08CECMED\uff09\u5df2\u6279\u51c6\u4f7f\u7528\u8be5\u56fd\u4e09\u79cd\u56fd\u4ea7\u75ab\u82d7\uff0c\u8fd9\u4e9b\u75ab\u82d7\u51fa\u53e3\u5230\u56db\u4e2a\u56fd\u5bb6\uff0c\u4f46\u5c1a\u672a\u83b7\u5f97\u4e16\u536b\u7ec4\u7ec7\u7684\u6279\u51c6\u30021\u53e4\u5df4\u56fd\u6709\u5236\u836f\u96c6\u56e2BioCubaFarma\u7684\u79d1\u5b66\u548c\u521b\u65b0\u4e3b\u7ba1\u7f57\u5170\u591a\u00b7\u4f69\u96f7\u65af\u00b7\u7f57\u5fb7\u91cc\u683c\u65af\u8bf4\uff0c\u4eca\u5e74\u5e94\u8be5\u4f1a\u6709\u6240\u6539\u53d8\u3002\n1\u670825\u65e5\uff0c\u7f57\u5fb7\u91cc\u683c\u65af\u5728\u54c8\u74e6\u90a3\u7684\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e0a\u8bf4\uff1a\u201c\u6211\u4eec\u6b63\u5f0f\u8981\u6c42\u5bf9\u4e00\u79cd\u75ab\u82d7\u8fdb\u884c\u8d44\u683c\u9884\u5ba1\uff1a\u963f\u535c\u675c\u62c9\u3002\u201d\u3002\u201c\u6211\u4eec\u6b63\u5728\u5bf9\u8fd9\u4e9b\u6587\u4ef6\u8fdb\u884c\u6700\u540e\u5ba1\u67e5\uff0c\u5e94\u8be5\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5929\u5185\u5c06\u5176\u53d1\u9001\u7ed9\u4e16\u536b\u7ec4\u7ec7\u3002\u201d\n\u54c8\u74e6\u90a3\u82ac\u83b1\u75ab\u82d7\u7814\u7a76\u6240\u7684\u8fbe\u683c\u739b\u00b7\u52a0\u897f\u4e9a\u00b7\u91cc\u7ef4\u62c9\u8bf4\uff0c\u4e16\u536b\u7ec4\u7ec7\u6279\u51c6\u7b2c\u4e8c\u79cd\u53e4\u5df4\u75ab\u82d7Soberana 2\u7684\u7533\u8bf7\u5e94\u5728\u672a\u6765\u51e0\u5468\u5185\u53d1\u51fa\uff0c\u5e76\u6709\u671b\u5728\u4eca\u5e74\u83b7\u5f97\u4f7f\u7528\u8bb8\u53ef\u3002\n\u53bb\u5e74\u590f\u5929\uff0c\u53e4\u5df42019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u7684\u8bb0\u5f55\u7387\u5df2\u7ecf\u6062\u590d\u3002\u963f\u5e03\u8fbe\u62c9\u3001\u7d22\u5df4\u62c9\u90a32\u53f7\u548c\u4e00\u79cd\u589e\u5f3a\u75ab\u82d7SoeSuraPlus\u7684\u63a8\u51fa\uff0c\u57282021\u5e748\u6708\u62a5\u544a\u4e86\u6bcf\u767e\u4e07\u4eba\u53e3\u4e2d861\u4e2a\u65b0\u7684\u6bcf\u65e5\u611f\u67d3\u91cf\u4e4b\u540e\uff0c\u4fdd\u6301\u4e86\u66f4\u5177\u611f\u67d3\u529b\u7684OmiCon\u53d8\u5f02\u4f53\u7684\u63a7\u5236\uff0c\u8fd9\u662f\u4e16\u754c\u4e0a\u6700\u9ad8\u7684\u30022\u76f8\u6bd4\u4e4b\u4e0b\uff0c1\u670824\u65e5\uff0c\u53e4\u5df4\u62a5\u544a\u4e86\u6bcf\u767e\u4e07\u4eba\u6bcf\u5929284\u4f8b\u65b0\u75c5\u4f8b\u3002\n\u975e\u540c\u884c\u8bc4\u5ba1\u7684\u7814\u7a76\u663e\u793a\uff0c\u4e09\u5242Abdala\u5bf9\u75c7\u72b6\u6027\u611f\u67d3\u7684\u6709\u6548\u7387\u4e3a92.3%\uff0c\u4e24\u5242\u548c\u989d\u5916\u4e00\u5242Soberana Plus\u540e\uff0cSoberana 2\u5bf9\u75c7\u72b6\u6027\u611f\u67d3\u7684\u6709\u6548\u7387\u4e3a92.4%\u30023.4\u53e4\u5df4\u8fd8\u6709\u5176\u4ed6\u5019\u9009\u75ab\u82d7\u5728\u8bd5\u9a8c\u4e2d\uff0c\u5305\u62ecSoberana 1\u548cMambisa\u9f3b\u5185\u75ab\u82d7\uff0c\u4ee5\u53ca\u9488\u5bf9\u65b0\u751fomicron\u53d8\u79cd\u7684\u75ab\u82d7\u30025.\n\u8fd9\u4e2a\u5c9b\u56fd\u5df2\u7ecf\u4e3a86%\u7684\u4eba\u53e3\u63a5\u79cd\u4e86\u75ab\u82d7\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u4eba\u63a5\u79cd\u4e862.97\u5242\uff0c\u6bd4\u4e16\u754c\u4e0a\u4efb\u4f55\u5730\u65b9\u90fd\u591a\u30026.\n\u7f57\u5fb7\u91cc\u683c\u65af\u8bf4\uff0c\u53e4\u5df4\u5411\u4f0a\u6717\u3001\u5c3c\u52a0\u62c9\u74dc\u3001\u59d4\u5185\u745e\u62c9\u548c\u8d8a\u5357\u51fa\u53e3\u75ab\u82d7\uff0c\u5e76\u6b63\u5728\u4e0e15\u591a\u4e2a\u56fd\u5bb6\u8fdb\u884c\u8ba8\u8bba\uff0c\u5176\u4e2d\u5927\u591a\u6570\u662f\u4f4e\u6536\u5165\u56fd\u5bb6\u3002\u6700\u8fd1\uff0c2019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u75ab\u82d7\u6350\u8d60\u7ed9\u53d9\u5229\u4e9a\u3001\u5723\u6587\u68ee\u7279\u548cGrenadines\uff0c\u5e76\u4e0e\u5176\u4ed6\u56fd\u5bb6\u5206\u4eab\u77e5\u8bc6\u548c\u6280\u672f\u77e5\u8bc6\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u5728\u5f53\u5730\u751f\u4ea7\u75ab\u82d7\u3002\n\u7f57\u5fb7\u91cc\u683c\u65af\u8bf4\uff0c\u201c\u6211\u4eec\u5bf9\u4efb\u4f55\u6697\u793a\u6211\u4eec\u7684\u75ab\u82d7\u5bf9\u4e16\u754c\u4ea7\u751f\u66f4\u5927\u5f71\u54cd\u7684\u63d0\u8bae\u6301\u5f00\u653e\u6001\u5ea6\u2026\u2026\u5bf9\u5bf9\u53e4\u5df4\u75ab\u82d7\u611f\u5174\u8da3\u7684\u56fd\u5bb6\u6765\u8bf4\uff0c\uff08\u7f3a\u4e4f\u4e16\u536b\u7ec4\u7ec7\u6279\u51c6\uff09\u5e76\u4e0d\u662f\u4e00\u4e2a\u969c\u788d\u3002\u201d\u4ed6\u8865\u5145\u8bf4\uff0c\u75ab\u82d7\u7684\u9500\u552e\u4ef7\u683c\u4e0eCovax\u8ba1\u5212\u76f8\u5f53\uff0cCovax\u8ba1\u5212\u5411\u4e2d\u4f4e\u6536\u5165\u56fd\u5bb6\u5206\u53d1\u75ab\u82d7\u3002\u8be5\u56fd\u7684\u751f\u4ea7\u80fd\u529b\u4f7f\u5176\u80fd\u591f\u6bcf\u5e74\u751f\u4ea7\u7ea61.2\u4ebf\u5242\u75ab\u82d7\u30027.\n\u7136\u800c\uff0c\u4e16\u536b\u7ec4\u7ec7\u7684\u6279\u51c6\u662f\u65b0\u51a0\u80ba\u708e\u75ab\u82d7\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u65b0\u51a0\u80ba\u708e\u75ab\u82d7\u963b\u6b62\u53e4\u5df4\u75ab\u82d7\u901a\u8fc7\u4e16\u536b\u7ec4\u7ec7\u5171\u540c\u9886\u5bfc\u7684\u673a\u5236\u63a5\u79cd\u3002\u7f57\u5fb7\u91cc\u683c\u65af\u8bf4\uff1a\u201c\u4e5f\u8bb8\u5f53\u6388\u6743\u5b58\u5728\u65f6\uff0c\u8fd9\u5c06\u4fc3\u8fdb\u6216\u52a0\u901f\u5206\u9500\u3002\u201d\u3002\n\u53e4\u5df4\u516c\u5171\u536b\u751f\u90e8\u79d1\u6280\u521b\u65b0\u4e3b\u4efb\u4f0a\u83b1\u5b89\u5a1c\u00b7\u83ab\u62c9\u83b1\u65af\u00b7\u82cf\u4e9a\u96f7\u65af\u8bf4\uff0c\u521d\u6b65\u7814\u7a76\u8868\u660e\uff0c\u75ab\u82d7\u5bf9\u5965\u7c73\u514b\u9f99\u6709\u6548\u3002\n\u201c\u63a5\u79cdSoberana\u548cAbdala\u75ab\u82d7\u7684\u4eba\u5bf9omicron\u53d8\u79cd\u7684\u8840\u6e05\u8f6c\u5316\u7387\u5f88\u9ad8\uff0c\u201d\u5979\u8bf4\u3002\u7ed3\u679c\u201c\u975e\u5e38\u4ee4\u4eba\u9f13\u821e\u548c\u6709\u5229\u201d\uff0c\u5e94\u8be5\u5728\u672c\u5468\u516c\u5e03\n\u6839\u636eBMJ\u548c#39\u7684\u89c4\u5b9a\uff0c\u672c\u6587\u514d\u8d39\u63d0\u4f9b\u7ed9\u4e2a\u4eba\u4f7f\u7528\uff1b2019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u6d41\u884c\u671f\u95f4\u7684\u7f51\u7ad9\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u6216\u7531BMJ\u53e6\u884c\u786e\u5b9a\u3002\u60a8\u53ef\u4ee5\u51fa\u4e8e\u4efb\u4f55\u5408\u6cd5\u7684\u975e\u5546\u4e1a\u76ee\u7684\uff08\u5305\u62ec\u6587\u672c\u548c\u6570\u636e\u6316\u6398\uff09\u4e0b\u8f7d\u548c\u6253\u5370\u672c\u6587\uff0c\u524d\u63d0\u662f\u4fdd\u7559\u6240\u6709\u7248\u6743\u58f0\u660e\u548c\u5546\u6807\u3002\nhttps://bmj.com/coronavirus/usage\n\u89c6\u56fe\u6458\u8981", "note_en": "Cuban health officials have said that they will apply for World Health Organization approval for one of the country\u2019s homegrown covid-19 vaccines, as they announced that they had secured funding to produce 200 million vaccine doses for low income countries.\n Cuba\u2019s health regulator (CECMED) has approved the use of three of the country\u2019s homegrown vaccines, which are exported to four countries, but none has been yet been approved by WHO. 1 That should change this year, said Rolando P\u00e9rez Rodr\u00edguez, director of science and innovation at Cuba\u2019s state run pharmaceutical conglomerate, BioCubaFarma.\n \u201cWe have formally requested the prequalification of one vaccine: Abdala,\u201d Rodriguez told a press conference in Havana on 25 January. \u201cWe are in the final review of the documents, and it should be sent in the following days to the WHO.\u201d\n The application for WHO approval of a second Cuban vaccine, Soberana 2, should be sent in the coming weeks and is also expected to gain authorisation for use this year, said Dagmar Garc\u00eda Rivera at the Finlay Institute of Vaccines in Havana.\n Cuba has regained control of the record rate of covid-19 infections seen last summer. Its rollout of Abdala, Soberana 2, and a booster vaccine, Soberana Plus, has kept the more infectious omicron variant under control after it reported 861 new daily infections per million population in August 2021, the highest in the world. 2 On 24 January, by contrast, Cuba reported 284 new cases per day per million people.\n Abdala is 92.3% effective against symptomatic infection after three doses, and Soberana 2 is 92.4% effective after two doses and an additional dose of Soberana Plus, non-peer-reviewed studies have shown. 3 4 Cuba has other vaccine candidates in trials, including Soberana 1 and Mambisa\u2014an intranasal vaccine\u2014as well as one that targets the nascent omicron variant. 5\n The island nation has fully vaccinated 86% of its population and administered 2.97 doses for every person, more than anywhere else in the world. 6\n Cuba exports its vaccines to Iran, Nicaragua, Venezuela, and Vietnam and is in discussion with more than 15 countries, most of which are low income nations, said Rodr\u00edguez. It recently donated covid-19 vaccines to Syria and to St Vincent and the Grenadines and is sharing knowledge and technical know-how with other countries to help them manufacture the vaccines locally.\n Rodr\u00edguez said, \u201cWe are open to any proposal that implies a greater impact of our vaccines on the world . . . [Lack of WHO approval] has not been an obstacle for countries interested in the Cuban vaccines.\u201d He added that the vaccines had been sold at a \u201cprice of solidarity\u201d comparable to the Covax scheme, which distributes vaccines to low and middle income countries. The country\u2019s manufacturing capacity allows it to produce around 120 million vaccine doses a year. 7\n However, WHO approval is a requisite for Covax vaccines, which has prevented Cuban shots from being administered through the WHO co-led mechanism. \u201cPerhaps when the authorisation is there, that will facilitate or accelerate distribution,\u201d said Rodr\u00edguez.\n Preliminary studies show that the vaccines hold up well against omicron, said Ileana Morales Su\u00e1rez, director of science and technology innovation at Cuba\u2019s Ministry of Public Health.\n \u201cThose vaccinated with Soberana and Abdala have high percentages of seroconversion against the omicron variant,\u201d she said. The results, which should be published this week, were \u201cvery encouraging and favourable.\u201d\n This article is made freely available for personal use in accordance with BMJ&#39;s website terms and conditions for the duration of the covid-19 pandemic or until otherwise determined by BMJ. You may download and print the article for any lawful, non-commercial purpose (including text and data mining) provided that all copyright notices and trade marks are retained.\n  https://bmj.com/coronavirus/usage\n View Abstract", "posttime": "2022-02-17 02:23:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56fd\u4ea7,request,\u75ab\u82d7", "title": "Covid-19\uff1a\u53e4\u5df4\u5c06\u8bf7\u6c42\u4e16\u536b\u7ec4\u7ec7\u6279\u51c6\u56fd\u4ea7\u75ab\u82d7", "title_en": "Covid-19: Cuba will request WHO approval for homegrown vaccine", "transed": 1, "url": "https://www.bmj.com/content/376/bmj.o230", "via": "", "real_tags": ["\u56fd\u4ea7", "request", "\u75ab\u82d7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073666, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81eaJAX\u4e8e2018\u5e74\u5e95\u95ee\u4e16\u4ee5\u6765\uff0c\u5b83\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u4e00\u76f4\u5728\u7a33\u6b65\u589e\u957f\uff0c\u8fd9\u662f\u6709\u5145\u5206\u7406\u7531\u7684\u3002DeepMind\u57282020\u5e74\u5ba3\u5e03\uff0c\u5b83\u6b63\u5728\u4f7f\u7528JAX\u6765\u52a0\u901f\u5176\u7814\u7a76\uff0c\u6765\u81eaGoogle Brain\u548c\u5176\u4ed6\u516c\u53f8\u7684\u8d8a\u6765\u8d8a\u591a\u7684\u51fa\u7248\u7269\u548c\u9879\u76ee\u6b63\u5728\u4f7f\u7528JAX\u3002\u6709\u4e86\u8fd9\u4e48\u591a\u7684\u70ed\u8bae\uff0cJAX\u4f3c\u4e4e\u662f\u4e0b\u4e00\u4e2a\u5927\u578b\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5bf9\u5427\uff1f\n\u9519\u8bef\u7684\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u9610\u660eJAX\u662f\u4ec0\u4e48\uff08\u4e0d\u662f\uff09\uff0c\u4e3a\u4ec0\u4e48\u5e94\u8be5\u5173\u5fc3\uff08\u6216\u4e0d\u5e94\u8be5\uff0c\u4f46\u53ef\u80fd\u5e94\u8be5\uff09\uff0c\u4ee5\u53ca\u662f\u5426\u5e94\u8be5\uff08\u6216\u4e0d\u5e94\u8be5\uff09\u4f7f\u7528\u5b83\u3002\n\u5982\u679c\u4f60&#39\uff1b\u5982\u679c\u60a8\u5df2\u7ecf\u719f\u6089JAX\uff0c\u5e76\u4e14\u60f3\u8df3\u8fc7\u57fa\u51c6\u6d4b\u8bd5\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u8df3\u8f6c\u5230\u6211\u4eec\u5173\u4e8e\u4f55\u65f6\u4f7f\u7528\u5b83\u7684\u5efa\u8bae\n\u6700\u597d\u4eceJAX\u4e0d\u662f\u7684\u4e1c\u897f\u5f00\u59cb\u3002JAX\u4e0d\u662f\u4e00\u4e2a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u6216\u5e93\uff0c\u5b83\u672c\u8eab\u4e5f\u4e0d\u662f\u4e00\u4e2a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u6216\u5e93\u3002\u603b\u4e4b\uff0cJAX\u662f\u4e00\u4e2a\u6570\u5b57\u8ba1\u7b97\u5e93\uff0c\u5b83\u5305\u542b\u4e86\u53ef\u7ec4\u5408\u51fd\u6570\u8f6c\u6362[1]\u3002\u6b63\u5982\u6211\u4eec\u6240\u89c1\uff0c\u6df1\u5ea6\u5b66\u4e60\u53ea\u662fJAX\u6240\u80fd\u505a\u7684\u4e00\u5c0f\u90e8\u5206\uff1a\n\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u901f\u5ea6\u3002\u8fd9\u662fJAX\u7684\u901a\u7528\u65b9\u9762\uff0c\u4e0e\u4efb\u4f55\u7528\u4f8b\u90fd\u76f8\u5173\u3002\n\u8ba9&#39\uff1bs\u7528NumPy\u548cJAX\u6c42\u77e9\u9635\u7684\u524d\u4e09\u6b21\u5e42\u7684\u548c\uff08\u6309\u5143\u7d20\uff09\u3002\u9996\u5148\u662f\u6211\u4eec\u7684NumPy\u5b9e\u73b0\uff1a\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8ba1\u7b97\u5927\u7ea6\u9700\u8981478\u6beb\u79d2\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7528JAX\u5b9e\u73b0\u8fd9\u4e2a\u8ba1\u7b97\uff1a\nJAX\u53ea\u97005.54\u6beb\u79d2\u5373\u53ef\u5b8c\u6210\u6b64\u8ba1\u7b97\uff0c\u6bd4NumPy\u5feb86\u500d\u591a\u3002\n\u4e8b\u60c5\u5e76\u4e0d\u50cf&#34\u90a3\u4e48\u7b80\u5355\uff1b\u4f7f\u7528JAX\uff0c\u4f60\u7684\u7a0b\u5e8f\u4f1a\u5feb86\u500d\uff1b\uff0c\u4f46\u4f7f\u7528JAX\u4ecd\u7136\u6709\u5f88\u591a\u7406\u7531\u3002\u7531\u4e8eJAX\u4e3a\u79d1\u5b66\u8ba1\u7b97\u63d0\u4f9b\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u57fa\u7840\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u9886\u57df\uff0c\u4e0d\u540c\u7684\u4eba\u6709\u4e0d\u540c\u7684\u539f\u56e0\u3002\u57fa\u672c\u4e0a\uff0c\u5982\u679c\u4f60\u5728\u4efb\u4f55\u4e0e\u79d1\u5b66\u8ba1\u7b97\u76f8\u5173\u7684\u9886\u57df\uff0c\u4f60\u90fd\u5e94\u8be5\u5173\u5fc3JAX\u3002\n1.\u52a0\u901f\u5668\u4e0a\u7684NumPy\u2014\u2014NumPy\u662f\u4f7f\u7528Python\u8fdb\u884c\u79d1\u5b66\u8ba1\u7b97\u7684\u57fa\u672c\u8f6f\u4ef6\u5305\u4e4b\u4e00\uff0c\u4f46\u5b83\u53ea\u4e0eCPU\u517c\u5bb9\u3002JAX\u63d0\u4f9b\u4e86NumPy\u7684\u4e00\u4e2a\u5b9e\u73b0\uff08\u5177\u6709\u51e0\u4e4e\u76f8\u540c\u7684API\uff09\uff0c\u53ef\u4ee5\u975e\u5e38\u8f7b\u677e\u5730\u5728GPU\u548cTPU\u4e0a\u5de5\u4f5c\u3002\u5bf9\u4e8e\u8bb8\u591a\u7528\u6237\u6765\u8bf4\uff0c\u4ec5\u6b64\u4e00\u70b9\u5c31\u8db3\u4ee5\u8bc1\u660e\u4f7f\u7528JAX\u7684\u5408\u7406\u6027\u3002\n2\u3001XLA\u2014XLA\uff0c\u6216\u52a0\u901f\u7ebf\u6027\u4ee3\u6570\uff0c\u662f\u4e00\u4e2a\u4e13\u95e8\u4e3a\u7ebf\u6027\u4ee3\u6570\u8bbe\u8ba1\u7684\u5b8c\u6574\u7684\u7a0b\u5e8f\u4f18\u5316\u7f16\u8bd1\u5668\u3002Jax\u662f\u57fa\u4e8eXLA\u6784\u5efa\u7684\uff0c\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u8ba1\u7b97\u901f\u5ea6\u4e0a\u9650[1 ]\u3002\n3\u3001JIT JAX\u5141\u8bb8\u60a8\u4f7f\u7528XLA\uff087\uff09\u5c06\u60a8\u81ea\u5df1\u7684\u51fd\u6570\u8f6c\u6362\u6210\u5373\u65f6\uff08JIT\uff09\u7f16\u8bd1\u7248\u672c\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u8ba1\u7b97\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u88c5\u9970\u5668\uff0c\u5c06\u8ba1\u7b97\u901f\u5ea6\u6f5c\u5728\u5730\u63d0\u9ad8\u51e0\u4e2a\u6570\u91cf\u7ea7\u3002\n4.\u81ea\u52a8\u533a\u5206\u2014\u2014JAX\u6587\u6863\u5c06JAX\u79f0\u4e3a&#34\uff1bAutoGrad\u548cXLA\uff0c\u6c47\u96c6\u4e8634\u4e2a\uff1b[ 1]. \u81ea\u52a8\u533a\u5206\u7684\u80fd\u529b\u5728\u79d1\u5b66\u8ba1\u7b97\u7684\u8bb8\u591a\u9886\u57df\u90fd\u81f3\u5173\u91cd\u8981\uff0cJAX\u63d0\u4f9b\u4e86\u51e0\u79cd\u5f3a\u5927\u7684\u81ea\u52a8\u533a\u5206\u5de5\u5177\u3002\n5\u3001\u6df1\u5ea6\u5b66\u4e60\u2014\u2014\u867d\u7136\u4e0d\u662f\u4e00\u4e2a\u6df1\u523b\u7684\u5b66\u4e60\u6846\u67b6\u672c\u8eab\uff0c\u4f46JAX\u5f53\u7136\u4e3a\u6df1\u5165\u5b66\u4e60\u7684\u76ee\u7684\u63d0\u4f9b\u4e86\u8db3\u591f\u591a\u7684\u57fa\u7840\u3002\u6709\u8bb8\u591a\u57fa\u4e8eJAX\u6784\u5efa\u7684\u5e93\u5bfb\u6c42\u6784\u5efa\u6df1\u5ea6\u5b66\u4e60\u80fd\u529b\uff0c\u5305\u62ecFlax\u3001\u4ff3\u53e5\u548c\u633d\u6b4c\u3002\u5728\u6700\u8fd1\u7684PyTorch vs TensorFlow\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u751a\u81f3\u5f3a\u8c03JAX\u662f\u4e00\u4e2a\u503c\u5f97\u5173\u6ce8\u7684\u201c\u6846\u67b6\u201d\uff0c\u5efa\u8bae\u5c06\u5176\u7528\u4e8e\u57fa\u4e8eTPU\u7684\u6df1\u5ea6\u5b66\u4e60\u7814\u7a76\u3002JAX&#39\uff1bHessians\u7684\u9ad8\u6548\u8ba1\u7b97\u4e5f\u4e0e\u6df1\u5ea6\u5b66\u4e60\u76f8\u5173\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f7f\u9ad8\u9636\u4f18\u5316\u6280\u672f\u66f4\u52a0\u53ef\u884c\u3002\n6.\u901a\u7528\u53ef\u5fae\u7f16\u7a0b\u8303\u5f0f\u2014\u2014\u867d\u7136\u4f7f\u7528JAX\u6765\u6784\u5efa\u548c\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u5f53\u7136\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u5b83\u4e5f\u4e3a\u901a\u7528\u53ef\u5fae\u7f16\u7a0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6846\u67b6\u3002\u8fd9\u610f\u5473\u7740\uff0c\u901a\u8fc7\u4f7f\u7528\u57fa\u4e8e\u6a21\u578b\u7684\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u6765\u89e3\u51b3\u95ee\u9898\uff0cJAX\u53ef\u4ee5\u5229\u7528\u7ecf\u8fc7\u51e0\u5341\u5e74\u7814\u7a76\u79ef\u7d2f\u8d77\u6765\u7684\u7279\u5b9a\u9886\u57df\u7684\u5148\u9a8c\u77e5\u8bc6\u3002\nXLA\uff0c\u6216\u52a0\u901f\u7ebf\u6027\u4ee3\u6570\uff0c\u6b63\u662fJAX\u5f3a\u5927\u7684\u57fa\u7840\u3002\u7531\u8c37\u6b4c\u5f00\u53d1\u7684XLA\u662f\u4e00\u79cd\u57fa\u4e8e\u9886\u57df\u7684\u3001\u57fa\u4e8e\u56fe\u5f62\u7684\u3001\u5373\u65f6\u7684\u7ebf\u6027\u4ee3\u6570\u7f16\u8bd1\u5668[2 ]\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u5168\u5c40\u7a0b\u5e8f\u4f18\u5316\u663e\u8457\u5730\u63d0\u9ad8\u8ba1\u7b97\u901f\u5ea6[3 ]\u3002\n\u5728\u4e00\u4e2a\u4f8b\u5b50\uff082\uff09\u4e2d\uff0cXLA\u5355\u72ec\u4ece\u8ba1\u7b97\u89d2\u5ea6\u63d0\u9ad8\u4e86\u4f2f\u7279\u8bad\u7ec3\u901f\u5ea6\u51e0\u4e4e7.3\u500d\uff0c\u4f46\u662f\u7531\u4e8e\u4f7f\u7528XLA\u4e5f\u4f7f\u5f97\u5b58\u50a8\u5668\u4f7f\u7528\u7387\u964d\u4f4e\uff0c\u4ece\u800c\u4f7f\u5f97\u68af\u5ea6\u7d2f\u52a0\uff0c\u5bfc\u81f4\u8ba1\u7b97\u541e\u5410\u91cf\u7684\u60ca\u4eba\u589e\u957f12\u500d\u3002\nXLA\u88ab\u70d8\u70e4\u6210JAX\u7684DNA\uff0c\u4ece\u4ed6\u4eec\u7684\u6807\u5fd7\u4e2d\u4f60\u53ef\u4ee5\u770b\u5230JAX\u7684\u6210\u529f\u4f9d\u8d56XLA\u3002\n\u6b63\u786e\u56de\u7b54\u4e3a\u4ec0\u4e48XLA\u662f\u5982\u6b64\u5927\u7684\u4ea4\u6613\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u975e\u5e38\u6280\u672f\u6027\u7684\uff08\u548c\u957f\u671f\u7684\uff09\u8ba8\u8bba\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u76ee\u7684\uff0c\u8db3\u591f\u7684XLA\u662f\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u5b83\u5927\u5927\u63d0\u9ad8\u4e86\u6267\u884c\u901f\u5ea6\uff0c\u5e76\u901a\u8fc7\u878d\u5408\u4f4e\u7ea7\u64cd\u4f5c\u964d\u4f4e\u5185\u5b58\u4f7f\u7528\u3002\nXLA\u4e0d\u9884\u5148\u5c06\u5355\u4e2a\u64cd\u4f5c\u7f16\u8bd1\u6210\u8ba1\u7b97\u6838\uff0c\u800c\u662f\u5c06\u6574\u4e2a\u56fe\u7f16\u8bd1\u6210\u4e00\u4e2a\u4e13\u95e8\u4e3a\u8be5\u56fe\u751f\u6210\u7684\u8ba1\u7b97\u5185\u6838\u5e8f\u5217\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u901a\u8fc7\u4e0d\u6267\u884c\u4e0d\u5fc5\u8981\u7684\u5185\u6838\u542f\u52a8\u4ee5\u53ca\u5229\u7528\u5c40\u90e8\u4fe1\u606f\u8fdb\u884c\u4f18\u5316\u6765\u63d0\u9ad8\u901f\u5ea6[3]\u3002\u7531\u4e8eXLA\u4e0d\u5728\u64cd\u4f5c\u5e8f\u5217\u4e2d\u5b9e\u73b0\u4e2d\u95f4\u6570\u7ec4\uff08\u800c\u662f\u5728GPU\u5bc4\u5b58\u5668\u4e2d\u4fdd\u6301\u503c\u5e76\u5c06\u5b83\u4eec\u6d41\u52303\uff09\uff0c\u4f7f\u7528XLA\u4e5f\u51cf\u5c11\u4e86\u5185\u5b58\u6d88\u8017\u3002\n\u8fd9\u79cd\u964d\u4f4e\u7684\u5185\u5b58\u6d88\u8017\u4f1a\u4ea7\u751f\u8fdb\u4e00\u6b65\u7684\u901f\u5ea6\u63d0\u5347\uff0c\u56e0\u4e3a\uff08i\uff09\u5185\u5b58\u901a\u5e38\u662f\u7528GPU\u8ba1\u7b97\u7684\u9650\u5236\u56e0\u7d20\uff0c\u5e76\u4e14\uff08ii\uff09XLA\u4e0d\u4f1a\u6d6a\u8d39\u6267\u884c\u65e0\u5173\u6570\u636e\u79fb\u52a8\u7684\u65f6\u95f4\u3002\n\u867d\u7136\u64cd\u4f5c\u878d\u5408\uff08\u6216\u6838\u878d\u5408\uff09\u662fXLA\u7684\u65d7\u8230\u7279\u5f81\uff0c\u4f46\u5e94\u8be5\u6ce8\u610f\u5230XLA\u8fd8\u6267\u884c\u4e86\u5927\u91cf\u5176\u4ed6\u7684\u6574\u4f53\u7a0b\u5e8f\u4f18\u5316\uff0c\u4f8b\u5982\u4e13\u95e8\u9488\u5bf9\u5df2\u77e5\u5f20\u91cf\u5f62\u72b6\uff08\u5141\u8bb8\u66f4\u79ef\u6781\u7684\u6052\u5b9a\u4f20\u64ad\uff09\uff0c\u5206\u6790\u548c\u8c03\u5ea6\u5185\u5b58\u4f7f\u7528\u4ee5\u6d88\u9664\u4e2d\u95f4\u5b58\u50a8\u7f13\u51b2\u5668[4 ]\uff0c\u6267\u884c\u5185\u5b58\u5e03\u5c40\u64cd\u4f5c\uff0c\u5e76\u4ec5\u8ba1\u7b97\u8bf7\u6c42\u503c\u7684\u5b50\u96c6\uff08\u5982\u679c\u4e0d\u662f\u5168\u90e8\u8fd4\u56de\u7684\u8bdd\uff09[5]\u3002\n\u7531\u4e8e\u6240\u6709Jax\u64cd\u4f5c\u90fd\u662f\u5728XLA\u7684\u64cd\u4f5c\u4e2d\u5b9e\u73b0\u7684\uff0cJAX\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u8ba1\u7b97\u8bed\u8a00\uff0c\u5141\u8bb8\u5b83\u5728CPU\u3001TPU\u548cGPU\u4e4b\u95f4\u65e0\u7f1d\u8fd0\u884c\uff0c\u800c\u5e93\u8c03\u7528\u53ca\u65f6\u7f16\u8bd1\u548c\u6267\u884c\uff081\uff09\u3002\n\u5982\u679c\u4e0a\u9762\u7684\u672f\u8bed\u6ca1\u6709\u4e00\u4e2a\u5bf9\u4f60\u6709\u610f\u4e49\uff0c\u4e0d\u8981\u62c5\u5fc3\u2014\u2014\u53ea\u77e5\u9053XLA\u662f\u4e00\u4e2a\u975e\u5e38\u5feb\u7684\u7f16\u8bd1\u5668\uff0c\u5b83\u662fJAX\u5728\u5404\u79cd\u5404\u6837\u7684\u786c\u4ef6\u4e0a\u4f7f\u7528\u7684\u552f\u4e00\u5f3a\u5927\u548c\u7b80\u5355\u7684\u57fa\u7840\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8c08\u5230\u4e86XLA\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u5141\u8bb8JAX\u5728\u52a0\u901f\u5668\u4e0a\u5b9e\u73b0NoMPY\uff1b\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u53ea\u662f\u6211\u4eec\u5bf9JAX\u5b9a\u4e49\u7684\u4e00\u534a\u3002JAX\u4e0d\u4ec5\u4e3a\u5f3a\u5927\u7684\u79d1\u5b66\u8ba1\u7b97\u63d0\u4f9b\u4e86\u5de5\u5177\uff0c\u8fd8\u4e3a\u53ef\u7ec4\u5408\u7684\u51fd\u6570\u8f6c\u6362\u63d0\u4f9b\u4e86\u5de5\u5177\u3002\n\u7b80\u5355\u5730\u8bf4\uff0c\u51fd\u6570\u53d8\u6362\u662f\u4e00\u4e2a\u51fd\u6570\u4e0a\u7684\u8fd0\u7b97\u7b26\uff0c\u5176\u8f93\u51fa\u662f\u53e6\u4e00\u4e2a\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u5bf9\u6807\u91cf\u503c\u51fd\u6570f\uff08x\uff09\u4f7f\u7528\u68af\u5ea6\u51fd\u6570\u53d8\u6362\uff0c\u90a3\u4e48\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u5411\u91cf\u503c\u51fd\u6570f&#39\uff1b\uff08x\uff09 \u5b83\u7ed9\u51fa\u4e86\u51fd\u6570\u5728f\uff08x\uff09\u57df\u4e2d\u4efb\u610f\u70b9\u7684\u68af\u5ea6\u3002\nJAX\u4e3a\u6b64\u7c7b\u529f\u80fd\u8f6c\u6362\u6574\u5408\u4e86\u4e00\u4e2a\u53ef\u6269\u5c55\u7cfb\u7edf\uff0c\u5e76\u6709\u56db\u4e2a\u5178\u578b\u7528\u6237\u611f\u5174\u8da3\u7684\u4e3b\u8981\u8f6c\u6362\uff1a\n\u8ba9\u6211\u4eec\u4f9d\u6b21\u770b\u770b\u8fd9\u4e9b\u8f6c\u53d8\uff0c\u5e76\u8ba8\u8bba\u5b83\u4eec\u7684\u539f\u56e0&#39\uff1b\u4f60\u592a\u6fc0\u52a8\u4eba\u5fc3\u4e86\u3002\n\u4e3a\u4e86\u80fd\u591f\u8bad\u7ec3\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u9700\u8981\u80fd\u591f\u6267\u884c\u53cd\u5411\u4f20\u64ad\u3002\u4e0eTensorFlow\u6216Pytork\u901a\u8fc7\u5728\u8ba1\u7b97\u56fe\u4e2d\u53cd\u5411\u4f20\u64ad\u6765\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5728\u67d0\u4e00\u70b9\u7684\u68af\u5ea6\u4e0d\u540c\uff0cJAX grad\uff08\uff09\u51fd\u6570\u53d8\u6362\u8f93\u51fa\u68af\u5ea6\u51fd\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u5176\u57df\u4e2d\u7684\u4efb\u4f55\u70b9\u5bf9\u5176\u8fdb\u884c\u8ba1\u7b97\u3002\nJAX\u4e2d\u7684\u81ea\u52a8\u533a\u5206\u529f\u80fd\u975e\u5e38\u5f3a\u5927\uff0c\u8fd9\u90e8\u5206\u6e90\u4e8eJAX\u5728\u201c\u4f55\u5904\u201d\u53ef\u4ee5\u8ba1\u7b97\u68af\u5ea6\u65b9\u9762\u7684\u7075\u6d3b\u6027\u3002\u4f7f\u7528grad\uff08\uff09\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u672c\u673aPython\u548cNumPy\u51fd\u6570[6]\u8fdb\u884c\u533a\u5206\uff0c\u4f8b\u5982\u5faa\u73af\u3001\u5206\u652f\u3001\u9012\u5f52\u3001\u95ed\u5305\u548c\u201cPyTrees\u201d\uff08\u4f8b\u5982\u5b57\u5178\uff09\u3002\n\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u2014\u2014\u6211\u4eec\u5c06\u7528Python\u63a7\u5236\u6d41\u5b9a\u4e49\u4e00\u4e2a\u7ecf\u8fc7\u4fee\u6b63\u7684\u7acb\u65b9\u4f53\u51fd\u6570f\uff08x\uff09=abs\uff08x3\uff09\u3002\u8fd9\u4e2a\u5b9e\u73b0\u663e\u7136\u4e0d\u662f\u8ba1\u7b97\u6548\u7387\u6700\u9ad8\u7684\u65b9\u6cd5\uff0c\u4f46\u5b83\u5e2e\u52a9\u6211\u4eec\u5f3a\u8c03grad\uff08\uff09\u5982\u4f55\u901a\u8fc7\u539f\u751fPython\u63a7\u5236\u6d41\u548c\u5d4c\u5957\u5728\u6761\u4ef6\u4e2d\u7684\u5faa\u73af\u5de5\u4f5c\u3002\ndef_\u7acb\u65b9\u4f53\uff08x\uff09\uff1a\u5982\u679cx&lt\uff1b0.\uff1a\u5bf9\u4e8e\u8303\u56f4\uff083\uff09\u4e2d\u7684i:r*=xr=-r\u5176\u4ed6\uff1a\u5bf9\u4e8e\u8303\u56f4\uff083\uff09\u4e2d\u7684i:r*=x\u8fd4\u56dergradient_\u51fd\u6570=grad\uff08\u77eb\u6b63\u7684_\u7acb\u65b9\u4f53\uff09\u6253\u5370\uff08f&#34\uff1bx=2f\uff08x\uff09={\u77eb\u6b63\u7684_\u7acb\u65b9\u4f53\uff082.\uff09}f&#39\uff1b\uff08x\uff09 =3*x^2={gradient_\u51fd\u6570\uff082.\uff09}&#34;)\u6253\u5370\uff08f&#34\uff1bx=-3F\uff08x\uff09={\u6b63\u65b9\u4f53\uff08-3.\uff09}f&#39\uff1b\uff08x\uff09 =-3*x^2={gradient_\u51fd\u6570\uff08-3.\uff09}&#34;)\nx=2f\uff08x\uff09=8.0f&#39\uff1b\uff08x\uff09 =3*x^2=12.0x=-3f\uff08x\uff09=27.0f&#39\uff1b\uff08x\uff09 =-3*x^2=-27.0\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728x=2\u548cx=-3\u65f6\u8ba1\u7b97\u51fd\u6570\u53ca\u5176\u5bfc\u6570\u65f6\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u9884\u671f\u7684\u7ed3\u679c\u3002\n\u901a\u8fc7\u91cd\u590d\u5e94\u7528grad\uff08\uff09\uff0cJAX\u53ef\u4ee5\u8f7b\u677e\u533a\u5206\u4efb\u4f55\u987a\u5e8f\u3002\n#\u5bf9\u4e8ex&gt\uff1b=0:f\uff08x\uff09=x^3=&gt\uff1bf&#39\uff1b\uff08x\uff09 =3*x^2=&gt\uff1bf&#39&#39;\uff08x\uff09 =3*2*x=&gt\uff1bf&#39&#39;&#39;\uff08x\uff09 =6third_deriv=grad\uff08grad\uff08grad\uff08grad\uff08rectived_cube\uff09\uff09\uff09\u8868\u793a\u8303\u56f4\uff085\uff09\u4e2d\u7684i\uff1a\u6253\u5370\uff08third_deriv\uff08float\uff08i\uff09\uff09\uff09\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u51fd\u6570\u7684\u4e09\u9636\u5bfc\u6570\u7684\u51e0\u4e2a\u8f93\u5165\u6c42\u503c\u5f97\u5230f&#39\u7684\u6052\u5b9a\u9884\u671f\u8f93\u51fa&#39;&#39;\uff08x\uff09 =6\u3002\n\u4ece\u66f4\u4e00\u822c\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5feb\u901f\u3001\u7b80\u5355\u5730\u83b7\u53d6\u591a\u4e2a\u5bfc\u6570\u7684\u80fd\u529b\u5bf9\u4e8e\u6df1\u5ea6\u5b66\u4e60\u4ee5\u5916\u7684\u8bb8\u591a\u66f4\u4e00\u822c\u7684\u8ba1\u7b97\u9886\u57df\u90fd\u6709\u5b9e\u9645\u7528\u9014\uff0c\u4f8b\u5982\u52a8\u529b\u7cfb\u7edf\u7684\u7814\u7a76\u3002\n\u6b63\u5982\u60a8\u6240\u6599\uff0cgrad\uff08\uff09\u91c7\u7528\u6807\u91cf\u503c\u51fd\u6570\u7684\u68af\u5ea6\uff0c\u8fd9\u610f\u5473\u7740\u5c06\u6807\u91cf/\u5411\u91cf\u6620\u5c04\u5230\u6807\u91cf\u7684\u51fd\u6570\u3002\u8fd9\u79cd\u51fd\u6570\u7684\u68af\u5ea6\u5bf9\u4e8e\u53cd\u5411\u4f20\u64ad\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u901a\u8fc7\u4ece\uff08\u6807\u91cf\uff09\u635f\u5931\u51fd\u6570\u53cd\u5411\u4f20\u64ad\u6765\u66f4\u65b0\u6a21\u578b\u6743\u91cd\u6765\u8bad\u7ec3\u6a21\u578b\u3002\n\u867d\u7136grad\uff08\uff09\u5bf9\u4e8e\u5404\u79cd\u9879\u76ee\u6765\u8bf4\u90fd\u8db3\u591f\u4e86\uff0c\u4f46\u5b83\u5e76\u4e0d\u662fJAX\u53ef\u4ee5\u6267\u884c\u7684\u552f\u4e00\u4e00\u79cd\u5dee\u5f02\u5316\u7c7b\u578b\u3002\n\u5bf9\u4e8e\u5c06\u5411\u91cf\u6620\u5c04\u5230\u5411\u91cf\u7684\u5411\u91cf\u503c\u51fd\u6570\uff0c\u4e0e\u68af\u5ea6\u7c7b\u4f3c\u7684\u662f\u96c5\u53ef\u6bd4\u77e9\u9635\u3002\u901a\u8fc7\u51fd\u6570\u8f6c\u6362jacfwd\uff08\uff09\u548cjacrev\uff08\uff09\uff0cJAX\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u5f53\u5728\u57df\u4e2d\u7684\u67d0\u4e2a\u70b9\u6c42\u503c\u65f6\uff0c\u8be5\u51fd\u6570\u5c06\u751f\u6210\u96c5\u53ef\u6bd4\u77e9\u9635\u3002\ndef\u6620\u5c04\uff08v\uff09\uff1ax=v[0]y=v[1]z=v[2]\u8fd4\u56dejnp\u3002\u6570\u7ec4\uff08[x*x\uff0cy*z]\uff09#3\u4e2a\u8f93\u5165\uff0c2\u4e2a\u8f93\u51fa#[d/dx x^2\uff0cd/dy x^2\uff0cd/dz x^2]#[d/dx y*z\uff0cd/dy*z\uff0cd/dz y*z]#[2*x\uff0c0\uff0c0]#[0\uff0cz\uff0cy]f=jax\u3002jacfwd\uff08\u6620\u5c04\uff09v=jnp\u3002\u6570\u7ec4\uff08[4,5,9.]\uff09\uff09\u5370\u5237\u54c1\uff08f\uff08v\uff09\uff09\n\u4f8b\u5982\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u96c5\u53ef\u6bd4\u77e9\u9635\uff0c\u4ee5\u4fbf\u66f4\u6709\u6548\u5730\u8ba1\u7b97\u51fd\u6570\u76f8\u5bf9\u4e8e\u6570\u636e\u77e9\u9635\u4e2d\u6bcf\u4e2a\u57fa\u51c6\u7684\u6743\u91cd\u77e9\u9635\u7684\u68af\u5ea6\u3002\n\u4ece\u6df1\u5ea6\u5b66\u4e60\u7684\u89d2\u5ea6\u6765\u770b\uff0cJAX\u6700\u4ee4\u4eba\u5174\u594b\u7684\u4e00\u4e2a\u65b9\u9762\u53ef\u80fd\u662f\uff0c\u5b83\u4f7f\u8ba1\u7b97\u9ed1\u68ee\u4eba\u53d8\u5f97\u6781\u5176\u7b80\u5355\u548c\u9ad8\u6548\u3002\u7531\u4e8eXLA\uff0cJAX\u53ef\u4ee5\u6bd4PyTrac\u8ba1\u7b97Hessian\u7684\u901f\u5ea6\u5feb\u5f97\u591a\uff0c\u8fd9\u4f7f\u5f97\u5b9e\u73b0\u9ad8\u9636\u4f18\u5316\u6280\u672f\u5982AdHessian\u66f4\u52a0\u5b9e\u7528\u3002\u8fd9\u4e00\u4e8b\u5b9e\u672c\u8eab\u5c31\u8db3\u4ee5\u4e3a\u4e00\u4e9b\u4ece\u4e1a\u8005\u63d0\u4f9b\u4f7f\u7528JAX\u7684\u7406\u7531\u3002\n\u6700\u6162\u7684\u8dd1\u6b65\u6bd4\u6700\u5feb\u7684\u8dd1\u957f8.14\u500d\u3002\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u6b63\u5728\u7f13\u5b58\u4e2d\u95f4\u7ed3\u679c\u300210\u6b21\u5faa\u73af\uff0c\u6700\u4f735\u6b21\uff1a\u6bcf\u6b21\u5faa\u73af16.3\u6beb\u79d2\n\u5982\u6211\u4eec\u6240\u89c1\uff0c\u8ba1\u7b97\u5927\u7ea6\u9700\u898116.3\u6beb\u79d2\u3002Let&#39\uff1b\u8ba9\u6211\u4eec\u5728JAX\u4e2d\u5c1d\u8bd5\u540c\u6837\u7684\u8ba1\u7b97\uff1a\n\u6700\u6162\u7684\u8dd1\u6b65\u6bd4\u6700\u5feb\u7684\u8dd1\u957f47.27\u500d\u3002\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u6b63\u5728\u7f13\u5b58\u4e2d\u95f4\u7ed3\u679c\u30021000\u5708\uff0c\u6700\u4f735\u5708\uff1a\u6bcf\u57081.55\u6beb\u79d2\nJAX\u751a\u81f3\u53ef\u4ee5\u8ba1\u7b97\u96c5\u53ef\u6bd4\u77e2\u91cf\u79ef\u548c\u96c5\u53ef\u6bd4\u77e2\u91cf\u79ef\u3002\u8003\u8651\u5149\u6ed1\u6d41\u5f62\u4e4b\u95f4\u7684\u5149\u6ed1\u6620\u5c04\u3002JAX\u53ef\u4ee5\u8ba1\u7b97\u8fd9\u4e2a\u6620\u5c04\u7684\u63a8\u8fdb\uff0c\u5c06\u4e00\u4e2a\u6d41\u5f62\u4e0a\u7684\u70b9\u7684\u5207\u5411\u91cf\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u6d41\u5f62\u4e0a\u7684\u5207\u5411\u91cf\u3002\n\u5982\u679c\u8fd9\u90e8\u5206\u4ee4\u4eba\u56f0\u60d1\u6216\u4e0d\u719f\u6089\uff0c\u4e0d\u8981\u62c5\u5fc3\uff01\u8fd9\u662f\u4e00\u4e2a\u9ad8\u7ea7\u4e3b\u9898\uff0c\u53ef\u80fd\u4e0e\u5178\u578b\u7528\u6237\u65e0\u5173\u3002\u6211\u4eec\u6307\u51fa\u8fd9\u79cd\u80fd\u529b\u7684\u5b58\u5728\u53ea\u662f\u4e3a\u4e86\u5f3a\u8c03JAX\u4e3a\u5404\u79cd\u5404\u6837\u7684\u8ba1\u7b97\u4efb\u52a1\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\u7684\u57fa\u7840\u3002\u4f8b\u5982\uff0c\u5411\u524d\u63a8\u5728\u5fae\u5206\u51e0\u4f55\u9886\u57df\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528JAX\u6765\u7814\u7a76\u3002\n\u901a\u8fc7\u6570\u5b66\u8f6c\u6362\u5230\u66f4\u5b9e\u9645\u7684/\u8ba1\u7b97\u8f6c\u6362\uff0c\u6211\u4eec\u5f97\u5230\u4e86vmap\uff08\uff09\u3002\u8003\u8651\u4e00\u4e0b\u6211\u4eec\u60f3\u5728\u4e00\u7ec4\u5bf9\u8c61\u4e0a\u91cd\u590d\u5e94\u7528\u4e00\u4e2a\u51fd\u6570\u7684\u60c5\u51b5\u3002\u8ba9\u6211\u4eec\u8003\u8651\uff0c\u4f8b\u5982\uff0c\u6dfb\u52a0\u4e24\u4e2a\u6570\u5b57\u5217\u8868\u7684\u4efb\u52a1\u3002\u5b9e\u73b0\u8fd9\u79cd\u64cd\u4f5c\u7684\u7b80\u5355\u65b9\u6cd5\u662f\u7b80\u5355\u5730\u4f7f\u7528for\u5faa\u73af\uff0c\u5373\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u7b2c\u4e8c\u4e2a\u5217\u8868\u4e2d\u7684\u76f8\u5e94\u503c\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5165\u4e00\u4e2a\u65b0\u5217\u8868\u3002\n\u901a\u8fc7vmap\uff08\uff09\u8f6c\u6362\uff0cJAX\u6267\u884c\u76f8\u540c\u7684\u8ba1\u7b97\uff0c\u4f46\u5c06\u5faa\u73af\u5411\u4e0b\u63a8\u5230\u57fa\u672c\u64cd\u4f5c\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd[6]\uff0c\u4ece\u800c\u751f\u6210\u8ba1\u7b97\u7684\u81ea\u52a8\u77e2\u91cf\u5316\u7248\u672c\u3002\n\u5f53\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u5217\u8868\u5b9a\u4e49\u4e3aJAX\u6570\u7ec4\uff0c\u5e76\u4f7f\u7528JAX&#39\uff1bs\u6570\u7ec4\u6dfb\u52a0\uff0c\u4f46\u7531\u4e8e\u8bb8\u591a\u539f\u56e0\uff0cvmap\uff08\uff09\u4ecd\u7136\u5f88\u6709\u7528\u3002\n\u4e00\u4e2a\u57fa\u672c\u539f\u56e0\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u66f4\u591a\u7684\u672c\u5730Python\u4ee3\u7801\u7f16\u5199\u64cd\u4f5c\uff0c\u7136\u540e\u4f7f\u7528vmap\uff08\uff09\u7f16\u5199\u64cd\u4f5c\uff0c\u4ece\u800c\u751f\u6210\u9ad8\u5ea6Pythonic\u7684\u3001\u53ef\u80fd\u66f4\u53ef\u8bfb\u7684\u4ee3\u7801\u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u5f53\u7136\u662f\u63a8\u5e7f\u5230\u6ca1\u6709\u7b80\u5355\u7684\u77e2\u91cf\u5316\u66ff\u4ee3\u65b9\u6848\u6765\u5b9e\u73b0\u7684\u60c5\u51b5\u3002\n\u5206\u5e03\u5f0f\u8ba1\u7b97\u4e00\u5e74\u6bd4\u4e00\u5e74\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\uff0c\u8fd9\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u5c24\u5176\u5982\u6b64\uff0c\u6b63\u5982\u4e0b\u56fe\u6240\u793a\uff0cSOTA\u6a21\u578b\u5df2\u7ecf\u53d1\u5c55\u5230\u7edd\u5bf9\u5929\u6587\u6570\u5b57\u3002\u4f8b\u5982\uff0cGPT-4\u5c06\u6709\u8d85\u8fc7100\u4e07\u4ebf\u4e2a\u53c2\u6570\u3002\n\u6211\u4eec&#39\uff1b\u4ee5\u4e0a\u8ba8\u8bba\u4e86\u5982\u4f55\u5229\u7528XLA\uff0cJAX\u53ef\u4ee5\u8f7b\u677e\u5730\u8ba1\u7b97\u52a0\u901f\u5668\uff0c\u4f46JAX\u4e5f\u53ef\u4ee5\u5bb9\u6613\u5730\u7528\u591a\u4e2a\u52a0\u901f\u5668\u8ba1\u7b97\uff0c\u7528\u5355\u4e2a\u547d\u4ee4PMAP-\uff08\uff09\u6765\u6267\u884cSPMD\u7a0b\u5e8f\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\n\u8003\u8651\u5411\u91cf\u77e9\u9635\u4e58\u6cd5\u7684\u4f8b\u5b50\u3002\u5047\u8bbe\u6211\u4eec\u901a\u8fc7\u987a\u5e8f\u8ba1\u7b97\u5411\u91cf\u4e0e\u77e9\u9635\u6bcf\u4e00\u884c\u7684\u70b9\u79ef\u6765\u6267\u884c\u8fd9\u4e2a\u8ba1\u7b97\u3002\u6211\u4eec\u9700\u8981\u4e00\u6b21\u4e00\u4e2a\u5730\u901a\u8fc7\u786c\u4ef6\u5b8c\u6210\u8fd9\u4e9b\u8ba1\u7b97\u3002\n\u4f7f\u7528JAX\uff0c\u53ea\u9700\u5c06\u64cd\u4f5c\u5305\u88c5\u5728pmap\uff08\uff09\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8fd9\u4e9b\u8ba1\u7b97\u5206\u5e03\u52304\u4e2aTPU\u4e2d\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u5728\u6bcf\u4e2aTPU\u4e0a\u540c\u65f6\u6267\u884c\u4e00\u4e2a\u70b9\u79ef\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u8ba1\u7b97\u901f\u5ea6\uff08\u5bf9\u4e8e\u5927\u578b\u8ba1\u7b97\uff09\u3002\n\u8fd9\u91cc\u975e\u5e38\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u6211\u4eec\u7684\u4ee3\u7801\u6240\u505a\u7684\u66f4\u6539\u662f\u5982\u6b64\u4e4b\u5c0f\u3002\u7531\u4e8eJAX\u662f\u5efa\u7acb\u5728XLA\u4e0a\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8ba1\u7b97\u6620\u5c04\u5230\u786c\u4ef6\u3002\n\u5373\u65f6\u7f16\u8bd1\uff08Just-in-time\uff0c\u7b80\u79f0JIT\u7f16\u8bd1\uff09\u662f\u4e00\u79cd\u6267\u884c\u4ecb\u4e8e\u89e3\u91ca\u548c\u63d0\u524d\u7f16\u8bd1\uff08AoT\uff09\u4e4b\u95f4\u7684\u4ee3\u7801\u7684\u65b9\u6cd5\u3002\u91cd\u8981\u7684\u4e8b\u5b9e\u662f\uff0cJIT\u7f16\u8bd1\u5668\u4f1a\u5728\u8fd0\u884c\u65f6\u5c06\u4ee3\u7801\u7f16\u8bd1\u6210\u5feb\u901f\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4ee3\u4ef7\u662f\u7b2c\u4e00\u6b21\u8fd0\u884c\u7684\u901f\u5ea6\u8f83\u6162\u3002\n\u5728JIT\u7f16\u8bd1\u4e2d\uff0c\u4ee3\u7801\u662f\u5728\u8fd0\u884c\u65f6\u7f16\u8bd1\u7684\uff0c\u56e0\u6b64\u5728\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\uff0c\u7531\u4e8e\u9700\u8981\u7f16\u8bd1\u548c\u6267\u884c\u4ee3\u7801\uff0c\u56e0\u6b64\u4f1a\u6709\u4e00\u4e9b\u521d\u59cb\u5f00\u9500\u3002\u56e0\u6b64\uff0cAoT\u7f16\u8bd1\u5728\u7b2c\u4e00\u6b21\u901a\u8fc7\u65f6\u53ef\u80fd\u4f1a\u4f18\u4e8eJIT\uff1b\u7136\u800c\uff0c\u5bf9\u4e8e\u91cd\u590d\u6267\u884c\uff0cJIT\u7f16\u8bd1\u7684\u7a0b\u5e8f\u5c06\u4f7f\u7528\u4e4b\u524d\u7f16\u8bd1\u7684\u7f13\u5b58\u4ee3\u7801\u6765\u5feb\u901f\u6267\u884c\u3002JIT\u7f16\u8bd1\u7684\u7a0b\u5e8f\u5728\u7406\u8bba\u4e0a\u53ef\u4ee5\u6bd4AoT\u7f16\u8bd1\u7684\u540c\u4e00\u7a0b\u5e8f\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u56e0\u4e3aJIT\u7f16\u8bd1\u5668\u53ef\u4ee5\u5229\u7528\u4ee3\u7801\u5728\u5c06\u5728\u5176\u4e0a\u6267\u884c\u7684\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u7f16\u8bd1\u7684\u4e8b\u5b9e\uff0c\u4f7f\u7528\u672c\u5730\u4fe1\u606f\u8fdb\u884c\u4f18\u5316\u3002\n\u7ebf\u6761\u4f1a\u53d8\u5f97\u6a21\u7cca\u3002\u4f8b\u5982\uff0c\u5f53Python\u8fd0\u884c\u65f6\uff0c\u5b83\u88ab\u7f16\u8bd1\u6210\u5b57\u8282\u7801\uff0c\u7136\u540e\u7531Python\u7684\u865a\u62df\u673a\uff08\u4f8b\u5982CPython\uff09\u89e3\u91ca\u5b57\u8282\u7801\uff0c\u6216\u8005\u7f16\u8bd1\u6210\u673a\u5668\u7801\uff08PyPy\uff09\u3002\u5982\u679c\u8fd9\u4e9b\u7ec6\u8282\u4ee4\u4eba\u56f0\u60d1\uff0c\u8bf7\u4e0d\u8981&#39\uff1b\u522b\u62c5\u5fc3\u3002\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0cJIT\u7f16\u8bd1JAX\u7a0b\u5e8f\u5141\u8bb8\u5b83\u4eec\u4ee5\u6781\u5feb\u7684\u901f\u5ea6\u6267\u884c\u3002\nXLA\u539f\u8bed\u662fJIT\u7f16\u8bd1\u7684\uff0c\u4f46\u662fJAX\u4e5f\u5141\u8bb8JIT\u5c06\u81ea\u5df1\u7684Python\u51fd\u6570\u7f16\u8bd1\u6210XLA\u4f18\u5316\u5185\u6838\uff0c\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u88c5\u9970\u5668JIT\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u672c\u8eabJITE\uff08\uff091\u3002\nJIT\u5c06\u4e00\u6b21\u4e00\u6b21\u7684\u64cd\u4f5c\u8c03\u5ea6\u5230GPU\u4e2d\uff0c\u800c\u4e0d\u662f\u4f7f\u7528XLA\u5c06\u64cd\u4f5c\u5e8f\u5217\u7f16\u8bd1\u6210\u4e00\u4e2a\u5185\u6838\uff0c\u7ed9\u51fa\u4e86\u51fd\u6570\u7684\u7aef\u5230\u7aef\u7f16\u8bd1\u7684\u3001\u9ad8\u6548\u7684XLA\u5b9e\u73b0[6 ] [7 ]\u3002\n\u4e3a\u4e86\u63d0\u4f9b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u4e00\u4e2a\u503c\u77e9\u9635\u7684\u524d\u4e09\u6b21\u5e42\u4e4b\u548c\u3002\u6211\u4eec\u5728\u4e00\u4e2a5000 x 5000\u7684\u77e9\u9635\u4e0a\u8ba1\u7b97\u8fd9\u4e2a\u51fd\u6570\u4e09\u6b21\u2014\u2014\u4e00\u6b21\u4f7f\u7528NumPy\uff0c\u4e00\u6b21\u4f7f\u7528JAX\uff0c\u4e00\u6b21\u4f7f\u7528JIT\u7f16\u8bd1\u7248\u672c\u7684JAX\u3002\u9996\u5148\uff0c\u6211\u4eec\u5728CPU\u4e0a\u8fdb\u884c\u5b9e\u9a8c\uff1a\ndef fn\uff08x\uff09\uff1a\u8fd4\u56dex+x*x+x*x*xx_np=np\u3002\u968f\u673a\u7684\u5170\u767b\uff085000\uff0c5000\uff09\u3002aType\uff08dtype=&#39\uff1bfloat32&#39\uff1b\uff09x_jnp=jnp\u3002\u6570\u7ec4\uff08x_np\uff09%timeit-n5-r5 fn\uff08x_np\uff09%timeit fn\uff08x_jnp\uff09\u3002\u963b\u585e_\uff0c\u76f4\u5230_ready\uff08\uff09jitted=jit\uff08fn\uff09jitted\uff08x_jnp\uff09%timeit jitted\uff08x_jnp\uff09\u3002\u963b\u585e_\u76f4\u5230_\u5c31\u7eea\uff08\uff09\n\u8b66\u544a\uff1aabsl\uff1a\u672a\u627e\u5230GPU/TPU\uff0c\u6b63\u5728\u8fd4\u56deCPU\u3002\uff08\u5c06TF_CPP_MIN_LOG_LEVEL\u8bbe\u7f6e\u4e3a0\uff0c\u7136\u540e\u91cd\u65b0\u8fd0\u884c\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002\uff095\u5708\uff0c\u6700\u4f735:151\u6beb\u79d2/\u570810\u5708\uff0c\u6700\u4f735:109\u6beb\u79d2/\u5708100\u5708\uff0c\u6700\u4f735:17.7\u6beb\u79d2/\u5708\n\u6211\u4eec\u770b\u5230JAX\u6bd4NumPy\u5feb\u8fd140%\uff0c\u5f53\u6211\u4eec\u5bf9\u51fd\u6570\u8fdb\u884cJIT\u65f6\uff0c\u6211\u4eec\u53d1\u73b0JAX\u6bd4NumPy\u5feb8.5\u500d\u3002\u8fd9\u4e9b\u7ed3\u679c\u5df2\u7ecf\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u4f46\u8ba9\u6211\u4eec&#39\uff1b\u63d0\u9ad8\u8d4c\u6ce8\uff0c\u8ba9JAX\u5728TPU\u4e0a\u8ba1\u7b97\uff1a\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u770b\u5230JAX\u6bd4NumPy\u5feb9.3\u500d\uff0c\u5982\u679c\u6211\u4eec\u90fd\u5728TPU\u4e0aJIT\u51fd\u6570\u548c\u8ba1\u7b97\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0JAX\u6bd4NumPy\u5feb57\u500d\u3002\n\u5f53\u7136\uff0c\u901f\u5ea6\u7684\u5927\u5e45\u63d0\u9ad8\u5e76\u975e\u6ca1\u6709\u4ee3\u4ef7\u3002JAX\u5bf9JIT\u5141\u8bb8\u4f7f\u7528\u54ea\u4e9b\u51fd\u6570\u8fdb\u884c\u4e86\u9650\u5236\uff0c\u5c3d\u7ba1\u901a\u5e38\u5141\u8bb8\u4f7f\u7528\u53ea\u6d89\u53ca\u4e0a\u8ff0NumPy\u64cd\u4f5c\u7684\u51fd\u6570\u3002\u6b64\u5916\uff0c\u901a\u8fc7Python\u63a7\u5236\u6d41\u8fdb\u884cJITting\u4e5f\u6709\u4e00\u4e9b\u9650\u5236\uff0c\u56e0\u6b64&#39\uff1b\u5728\u7f16\u5199\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u3002\n\u5728\u4f7f\u7528jit\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u786e\u4fdd\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u5141\u8bb8\u4f7f\u7528\u5b83\u3002\u5982\u679c\u4f60\u4e0d\u4e86\u89e3\u8fd9\u4e00\u70b9\uff0c\u4f46\u65e0\u8bba\u5982\u4f55\u90fd\u8981\u5c1d\u8bd5\u4f7f\u7528jit\uff0c\u4f60\u8981\u4e48\u4f1a\u6536\u5230\u8ba9\u4f60\u56f0\u60d1\u7684\u9519\u8bef\u6d88\u606f\uff08\u5982\u679c\u4f60\u5e78\u8fd0\u7684\u8bdd\uff09\uff0c\u8981\u4e48\u4f1a\u6536\u5230\u672a\u7ecf\u8ddf\u8e2a\u4e14\u4e0d\u53d7\u6b22\u8fce\u7684\u526f\u4f5c\u7528\uff0c\u8fd9\u4e9b\u526f\u4f5c\u7528\u4f1a\u6084\u6084\u5730\u5f71\u54cd\u7ed3\u679c\u7684\u51c6\u786e\u6027\uff08\u5982\u679c\u4f60\u4e0d\u5e78\u8fd0\u7684\u8bdd\uff09\u3002\nJAX\u67094\u79cd\u4e3b\u8981\u7684\u51fd\u6570\u8f6c\u6362\u2014\u2014grad\uff08\uff09\u7528\u4e8e\u81ea\u52a8\u533a\u5206\u51fd\u6570\uff0cvmap\uff08\uff09\u7528\u4e8e\u81ea\u52a8\u77e2\u91cf\u5316\u64cd\u4f5c\uff0cpmap\uff08\uff09\u7528\u4e8eSPMD\u7a0b\u5e8f\u7684\u5e76\u884c\u8ba1\u7b97\uff0cjit\uff08\uff09\u7528\u4e8e\u5c06\u51fd\u6570\u8f6c\u6362\u4e3ajit\u7f16\u8bd1\u7248\u672c\u3002\u8fd9\u4e9b\u8f6c\u6362\uff08\u5927\u90e8\u5206\uff09\u662f\u53ef\u7ec4\u5408\u7684\uff0c\u975e\u5e38\u5f3a\u5927\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u4f7f\u60a8\u7684\u7a0b\u5e8f\u52a0\u901f\u51e0\u500d\u3002\n\u6211\u4eec\u770b\u5230\u4e86XLA\u548c\u57fa\u672cJAX\u8f6c\u6362\u5982\u4f55\u6709\u53ef\u80fd\u663e\u8457\u5730\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\u867d\u7136JAX\u975e\u5e38\u5f3a\u5927\uff0c\u6709\u53ef\u80fd\u5728\u8bb8\u591a\u9886\u57df\u663e\u8457\u63d0\u9ad8\u751f\u4ea7\u7387\uff0c\u4f46\u5b83\u7684\u4f7f\u7528\u9700\u8981\u8c28\u614e\u3002\u7279\u522b\u662f\u5982\u679c\u60a8\u6b63\u5728\u8003\u8651\u4ecePyTorch\u6216TensorFlow\u8f6c\u79fb\u5230JAX\uff0c\u60a8\u5e94\u8be5\u4e86\u89e3JAX\u7684\u57fa\u672c\u7406\u5ff5\u4e0e\u4e24\u4e2a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u622a\u7136\u4e0d\u540c\u3002\u6211\u4eec&#39\uff1b\u6211\u73b0\u5728\u6765\u8c08\u8c08\u4e3b\u8981\u7684\u533a\u522b\u3002\nJAX\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u5b83\u7684\u8f6c\u6362\u548c\u7f16\u8bd1\u53ea\u9002\u7528\u4e8e\u529f\u80fd\u7eaf\u7cb9\u7684\u7a0b\u5e8f\u3002\u867d\u7136\u5982\u679c\u4f60\u53ea\u662f\u60f3\u4f7f\u7528JAX\u5728GPU\u6216TPU\u4e0a\u8fdb\u884cNumPy\u8ba1\u7b97\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u53ef\u80fd\u5e76\u4e0d\u91cd\u8981\uff0c\u4f46\u5b83\u4e0e\u5927\u91cf\u6f5c\u5728\u7684JAX\u5e94\u7528\u7a0b\u5e8f\u6709\u5173\uff0c\u56e0\u6b64\u4f60\u5e94\u8be5\u786e\u4fdd\u5728\u5f00\u59cb\u4e4b\u524d\u7406\u89e3\u91c7\u7528\u8fd9\u79cd\u8303\u5f0f\u7684\u542b\u4e49\u3002\n\u7eaf\u51fd\u6570\u7684\u4e2d\u5fc3\u7279\u5f81\u662f\u5f15\u7528\u900f\u660e\u6027\u2014\u2014\u7eaf\u51fd\u6570\u53ef\u4ee5\u968f\u65f6\u7528\u5176\u6c42\u503c\u7ed3\u679c\u66ff\u6362\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u5206\u8fa8\u4e24\u8005\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u5728\u7ed9\u5b9a\u76f8\u540c\u8f93\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u5e94\u59cb\u7ec8\u5bf9\u7a0b\u5e8f\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\uff0c\u800c\u4e0d\u7ba1\u5b83\u662f\u5728\u4ec0\u4e48\u65f6\u95f4\u6216\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u7684\u3002\n\u8fd9\u5728\u539f\u5219\u4e0a\u542c\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u786e\u5b9e\u5b58\u5728\n......", "note_en": "Since  JAX hit the scene in late 2018, it has been steadily growing in popularity, and for good reason. DeepMind  announced in 2020 that it is using JAX to accelerate its research, and a growing number of publications and projects from Google Brain and others are using JAX.  With all of this buzz, it seems like JAX is the next big Deep Learning framework, right?\n Wrong. In this article we\u2019ll clarify what JAX is (and isn\u2019t), why you should care (or shouldn&#39;t, but you probably should), and whether you should (or shouldn\u2019t) use it.\n  If you&#39;re already familiar with JAX and want to skip the benchmarks, you can jump ahead to our recommendations on when to use it  here\n  It may be best to start off with what JAX is  not. JAX is  not a Deep Learning framework or library, and it is not designed to ever be a Deep Learning framework or library in and of itself. In a sentence,  JAX is a numerical computing library which incorporates composable function transformations [ 1]. As we can see, Deep Learning is just a small subset of what JAX can do:\n   In short -   speed. This is the universal aspect of JAX that is relevant for any use case.\n Let&#39;s sum the first three powers of a matrix (element-wise) with both NumPy and JAX. First up is our NumPy implementation:\n   We find that this calculation takes about  478 ms. Next, we implement this calculation with JAX:\n   JAX performs this calculation in only  5.54 ms - over  86 times faster than NumPy.\n    Things are not quite as simple as &#34;use JAX and your programs will be 86 times faster&#34;, but there are still a ton of reasons to use JAX. Since JAX provides a general foundation for scientific computing, it will be useful to different people in different fields for different reasons. Fundamentally,  if you are in  any field relating to scientific computing,  you should care about JAX.\n  1. NumPy on Accelerators - NumPy is one of the fundamental packages for scientific computing with Python, but it is compatible only with CPU. JAX provides an implementation of NumPy (with a near-identical API) that works on  both GPU  and TPU extremely easily. For many users, this  alone is sufficient to justify the use of JAX.\n 2. XLA - XLA, or Accelerated Linear Algebra, is a whole-program optimizing compiler, designed specifically for linear algebra. JAX is built on XLA, raising the computational-speed ceiling significantly [ 1].\n 3. JIT - JAX allows you to transform your  own functions into just-in-time (JIT) compiled versions using XLA [ 7]. This means that you can increase computation speed by potentially  orders of magnitude by adding a simple function decorator to your computational functions.\n 4. Auto-differentiation - The JAX documentation refers to JAX as &#34;Autograd and XLA, brought together&#34; [ 1]. The ability to automatically differentiate is crucial in many areas of scientific computing, and JAX provides several powerful auto-differentiation tools.\n 5. Deep Learning - While not a Deep Learning framework itself, JAX certainly provides a more-than-sufficient foundation for Deep Learning purposes. There are many libraries built on top of JAX that seek to build out Deep Learning capabilities, including  Flax,  Haiku, and  Elegy. We even highlighted JAX as a \u201cframework\u201d to watch in our recent  PyTorch vs TensorFlow article,  recommending its use for TPU-based Deep Learning research. JAX&#39;s highly efficient computations of Hessians are also relevant for Deep Learning, given that they make higher-order optimization techniques much more feasible.\n 6. General Differentiable Programming Paradigm - While it is certainly possible to use JAX in order to build and train Deep Learning models, it also provides a framework for  general Differentiable Programming. This means that JAX can exploit  prior knowledge in a given field, built up through decades of research, by using a model-based Machine Learning approach to solving a problem.\n     XLA, or Accelerated Linear Algebra, lies at the foundation of what makes JAX so powerful. Developed by Google, XLA is a domain-specific, graph-based, just-in-time compiler [ 2] for linear algebra that can significantly increase computation speed through a variety of whole-program optimizations [ 3].\n In one example [ 2], XLA boosts BERT training speed by almost  7.3 times from a  computational standpoint alone, but lowered memory usage as a result of using XLA  also enables gradient accumulation, resulting in a staggering  12 times increase to computational throughput.\n  XLA is baked into the very DNA of JAX - from their logos alone you can see how much the successes of JAX rely on XLA.\n   Answering exactly why XLA is such a big deal can yield a very technical (and long) discussion. For our purposes, it suffices to say that XLA is important because it  significantly increases execution speed and lowers memory usage by  fusing low-level operations.\n XLA doesn\u2019t precompile individual operations into compute kernels, but instead compiles the  entire graph into a sequence of compute kernels generated  specifically for that graph.\n  This approach increases speed by not performing needless kernel launches, as well as taking advantage of local information for optimization  [3]. Since XLA doesn\u2019t materialize intermediate arrays in an operation sequence (instead keeping values in GPU registers and streaming them  [3], using XLA also reduces memory consumption.\n  This lowered memory consumption yields a  further speed boost given that (i) memory is often the limiting factor in computing with GPUs, and (ii) XLA does not waste time performing extraneous data movement.\n While operation fusion (or  kernel fusion) is the flagship feature of XLA, it should be noted that XLA also performs a  ton of other whole-program optimizations, like specializing to known tensor shapes (allowing for more aggressive constant propagation), analyzing and scheduling memory usage to eliminate intermediate storage buffers [ 4], performing memory layout operations, and only computing subsets of requested values if not all of them are being returned [ 5].\n Since all JAX operations are implemented in terms of operations in XLA, JAX has a unified language for computation that allows it to run seamlessly across CPU, TPU, and GPU, with library calls getting just-in-time compiled and executed [ 1].\n  If none of the jargon above makes sense to you, don\u2019t worry - just know that XLA is a very fast compiler which lies at the foundation of what makes JAX uniquely powerful and simple to use on a diverse range of hardware.\n    So far, we\u2019ve talked about XLA and how it allows JAX to implement NumPy on accelerators; but recall that this was only one half of our definition of JAX. JAX provides tools not only for powerful scientific computing, but also for  composable function transformations.\n Quite simply, a function transformation is an  operator on a function whose output is  another function. If we use the gradient function transformation on a scalar-valued function  f(x), then we get a vector-valued function  f &#39;(x) which gives the gradient of the function at any point in the domain of  f(x).\n  JAX incorporates an extensible system for such function transformations, and has four main transformations of interest to the typical user:\n  Let\u2019s take a look at each of these transformations in turn and talk about why they&#39;re so exciting.\n  To be able to train Machine Learning models, one needs to be able to perform backpropagation. Rather than compute the gradient of the loss function at a certain  point as TensorFlow or PyTorch does by backpropagating through the computation graph, the JAX  grad() function transformation outputs the gradient  function, which can then be evaluated at any point in its domain.\n  Automatic differentiation in JAX is  extremely powerful, which stems partially from JAX\u2019s flexibility in \u201cwhere\u201d you can compute gradients. With  grad(), you can  differentiate through native Python and NumPy functions [ 6], such as loops, branches, recursion, closures, and \u201c PyTrees\u201d (e.g. dictionaries).\n Let\u2019s look at an example - we\u2019ll define a rectified cube function  f(x) = abs(x 3) with Python control flow. This implementation is obviously not the most computationally efficient approach, but it helps us highlight how  grad() works through native Python control flow and loops nested in conditionals.\n def rectified_cube(x): r = 1 if x &lt; 0.: for i in range(3): r *= x r = -r else: for i in range(3): r *= x return rgradient_function = grad(rectified_cube)print(f&#34;x = 2 f(x) = {rectified_cube(2.)} f&#39;(x) = 3*x^2 = {gradient_function(2.)}&#34;)print(f&#34;x = -3 f(x) = {rectified_cube(-3.)} f&#39;(x) = -3*x^2 = {gradient_function(-3.)}&#34;)\n x = 2 f(x) = 8.0 f&#39;(x) = 3*x^2 = 12.0x = -3 f(x) = 27.0 f&#39;(x) = -3*x^2 = -27.0\n We can see that we get the expected results when evaluating the function and its derivative at  x=2 and \u00a0 x=-3 .\n  JAX makes it easy to differentiate to  any order by the repeated application of  grad().\n # for x &gt;= 0: f(x)=x^3 =&gt; f&#39;(x)=3*x^2 =&gt; f&#39;&#39;(x)=3*2*x =&gt; f&#39;&#39;&#39;(x)=6third_deriv = grad(grad(grad(rectified_cube)))for i in range(5): print(third_deriv(float(i)))\n  We can see that the evaluation of several inputs to the third derivative of our function gives the constant expected output of  f &#39;&#39;&#39;(x)=6 .\n From a more general perspective, the ability to take multiple derivatives in a fast and easy manner is of practical use to many more general computational fields beyond Deep Learning, such as the study of Dynamical Systems.\n   As you would expect,  grad() takes the  gradient of a  scalar-valued function, meaning a function which maps scalars/vectors to scalars. The gradient of such a function is useful for e.g. backpropagation, where we train a model by backpropagating from a (scalar) loss function to update our model weights.\n While  grad() is sufficient for a variety of projects, it is not the only type of differentiation JAX can perform.\n  For  vector-valued  functions which map vectors to vectors, the analogue to the gradient is the  Jacobian. With the function transformations  jacfwd() and  jacrev(), JAX returns a function which yields the Jacobian when evaluated at a point in the domain.\n def mapping(v): x = v[0] y = v[1] z = v[2] return jnp.array([x*x, y*z])# 3 inputs, 2 outputs# [d/dx x^2 , d/dy x^2, d/dz x^2]# [d/dx y*z , d/dy y*z, d/dz y*z]# [2*x , 0, 0]# [0 , z, y]f = jax.jacfwd(mapping)v = jnp.array([4., 5., 9.])print(f(v))\n  You can alternatively use a Jacobian, for example, in order to more-efficiently compute the gradient of a function with respect to a weight matrix for each datum in a data matrix.\n  Perhaps one of the most exciting aspects of JAX from a Deep Learning perspective is that it makes computing  Hessians exceedingly  easy  and efficient. Because of XLA,  JAX can compute Hessians remarkably faster than PyTorch, which makes it much more practical to implement  higher-order optimization  techniques like  AdaHessian. This fact  alone could be justification enough to use JAX for some practitioners.\n   The slowest run took 8.14 times longer than the fastest. This could mean that an intermediate result is being cached.10 loops, best of 5: 16.3 ms per loop\n As we can see, the calculation takes about  16.3 ms. Let&#39;s try the same calculation in JAX:\n  The slowest run took 47.27 times longer than the fastest. This could mean that an intermediate result is being cached.1000 loops, best of 5: 1.55 ms per loop\n    JAX can even compute  Jacobian-vector products and  vector-Jacobian products. Consider a smooth map between smooth manifolds. JAX can compute the pushforward of this map, mapping tangent vectors at points on the one manifold to tangent vectors on another.\n  If this part is confusing or unfamiliar, don\u2019t worry! This is an advanced topic and probably not (in and of itself) of relevance or interest to the typical user. We point out the existence of this capability simply to highlight the fact that JAX provides a  very powerful foundation for a  wide variety of computational tasks. For example, pushforwards are important in the field of  Differential Geometry, which we might use JAX to study.\n  Moving past the mathematical to a more practical/computational transformation, we arrive at  vmap(). Consider the case in which we want to repeatedly apply a function to a set of objects. Let\u2019s consider, for example, the task of adding two lists of numbers. The naive way to implement such an operation is to simply utilize a  for loop - i.e. for each number in the first list, add it to the corresponding value in the second list, and write the result to a new list.\n  With the  vmap() transformation, JAX performs the same computation but  pushes the loop down to primitive operations for better performance [ 6], resulting in an automatically vectorized version of the computation.\n  Of course, we could\u2019ve simply defined our lists as JAX arrays and used JAX&#39;s array addition, but  vmap() is still useful for many reasons.\n One basic reason is that we can write operations in more native Python code and then  vmap() it, leading to highly Pythonic and possibly more readable code. Another reason is of course  generalizing to the cases in which there is  no simple vectorized alternative to implement.\n  Distributed computing has become increasingly important year-over-year, and this holds especially true in Deep Learning, where SOTA models have grown to absolutely astronomical sizes as you can see in the graph below.  GPT-4, for example, will have over  100  trillion parameters.\n  We&#39;ve discussed above how, thanks to XLA, JAX can compute on  an accelerator easily, but JAX can also compute with  multiple accelerators easily,  performing distributed training of SPMD programs  with a single command -  pmap().\n Consider the example of vector-matrix multiplication. Let\u2019s say we are performing this computation by sequentially computing the dot product of the vector with each row of the matrix. We would need to push these computations through our hardware one at a time.\n  With JAX, we can  easily distribute these computations across 4 TPUs by  simply wrapping our operation in  pmap(). This allows us to concurrently perform one dot product on each TPU, significantly increasing our computation speed (for large computations).\n  What is very noticeable here is how absolutely minimal the change to our code was. Since JAX is built on XLA, we can change how we map computations to hardware with ease.\n   Just-in-time, or JIT compilation, is a method of executing code that lies between interpretation and ahead-of-time (AoT) compilation. The important fact is that a  JIT-compiler will compile code at runtime into a fast executable, at the cost of a slower first run.\n With JIT compilation, code is compiled at runtime, so there is some  initial overhead during the first run of a program given that the code needs to be compiled  and executed. AoT compilation therefore may outperform JIT on a first pass; however, for repeated execution, a JIT-compiled program will use the  previously-compiled, cached code to execute very quickly.  A JIT-compiled program can theoretically run even  faster than the same program if it were AoT compiled given that JIT compilers can use local information for increased optimization by exploiting the fact that the code is compiled on the same machine it will be executed on.\n Lines can get blurry. For example, when Python is run, it is compiled into bytecode, which is then either interpreted by Python\u2019s virtual machine (e.g. CPython), or compiled to machine code (PyPy). If these details are confusing, don&#39;t worry. The important point is that  JIT-compiling JAX programs allows them to execute extremely quickly.\n  XLA primitives are JIT compiled, but JAX  also lets you  JIT compile your own Python functions into XLA-optimized kernels, either as a function decorator  @jit or as a function itself  jit() [ 1].\n Rather than dispatch kernels to a GPU one operations at a time, JIT will  compile the sequence of operations together into one kernel using XLA, giving an end-to-end compiled, efficient XLA implementation  of your function [ 6][ 7].\n To provide an example, let\u2019s define a function which computes the sum of the first three powers of a matrix of values. We compute this function on a 5000 x 5000 matrix three times - once with NumPy, once with JAX, and once with JAX on a JIT-compiled version of the function. First, we perform the experiment on CPU:\n def fn(x): return x + x*x + x*x*xx_np = np.random.randn(5000, 5000).astype(dtype=&#39;float32&#39;)x_jnp = jnp.array(x_np)%timeit -n5 -r5 fn(x_np)%timeit fn(x_jnp).block_until_ready()jitted = jit(fn)jitted(x_jnp)%timeit jitted(x_jnp).block_until_ready()\n WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)5 loops, best of 5: 151 ms per loop10 loops, best of 5: 109 ms per loop100 loops, best of 5: 17.7 ms per loop\n  We see that  JAX is almost 40% faster than NumPy, and when we JIT the function we find that  JAX is an insane 8.5 times faster than NumPy. These results are already impressive, but let&#39;s up the ante and let JAX compute on a TPU:\n  In this case, we see that JAX is a staggering  9.3 times faster than NumPy, and if we both JIT the function and compute on TPU we see find that JAX is an  obscene  57 times faster than NumPy.\n This drastic increase in speed is, of course, not without a cost. JAX places restrictions on which functions are permissible to JIT, although functions involving only NumPy operations like the one above are generally permissible. Further, there are limitations regarding JITting through Python control flow, so you&#39;ll have to keep this in mind when writing your functions.\n Before using  jit, you should make sure that you understand how it works and in what scenarios its use is permissible. If you do not have this understanding but try to use  jit anyway, you will either get error messages that are confusing to you (if you\u2019re lucky), or  untracked and undesirable side-effects that can quietly throw off the accuracy of your results (if you\u2019re unlucky).\n   JAX has 4 main function transformations -  grad() to automatically differentiate a function,  vmap() to automatically vectorize operations,  pmap() for parallel computation of SPMD programs, and  jit() to transform a function into a JIT-compiled version. These transformations are (mostly) composable, very powerful, and have the potential to expedite your programs several times over.\n   We saw above how XLA and fundamental JAX transformations have the potential to significantly increase the performance of your programs. While JAX is very powerful and has the potential to dramatically improve productivity in a great many areas, its use requires some care. Especially if you are considering moving from  PyTorch or TensorFlow to JAX, you should understand that JAX\u2019s underlying philosophy is quite different from the two Deep Learning frameworks. We&#39;ll talk about the main difference now.\n  The main characteristic that differentiates JAX is that its  transformations and compilation are designed to work only for functionally pure programs. While this fact may not be relevant if you just want to use JAX to put NumPy computations on GPU or TPU, it is relevant to a huge number of potential JAX applications, so you should make sure you understand the implications of adopting this paradigm before getting started.\n The central characteristic of a pure function  is that of  referential transparency - a pure function can be  replaced with the result of its evaluation at any time, and the program cannot tell the difference. The function should always have the same effect on the program given the same inputs  regardless of the time or context in which it is executed.\n This sounds simple in principle, but there certainly exists\n......", "posttime": "2022-02-17 02:09:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "jax", "title": "2022\u5e74\u4f7f\u7528JAX", "title_en": "Using JAX in 2022", "transed": 1, "url": "https://www.assemblyai.com/blog/why-you-should-or-shouldnt-be-using-jax-in-2022/", "via": "", "real_tags": ["jax"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073664, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bde\u751f\u4e8eLinux\u5185\u6838\u7684Bcachefs\u6587\u4ef6\u7cfb\u7edf&#39\uff1bs\u7684\u5757\u7f13\u5b58\u4ee3\u7801\u5728\u8fc7\u53bb\u51e0\u5e74\u4e2d\u5df2\u7ecf\u975e\u5e38\u6210\u719f\u3002\u73b0\u5728\u52302022\u5e74\uff0c\u6587\u4ef6\u7cfb\u7edf\u7684\u6838\u5fc3\u57fa\u7840\u662f&#34\uff1b\u975e\u5e38\u63a5\u8fd1\u5b8c\u6210&#34\uff1b\u5e76\u4e14\u6709\u671b\u5728\u8fd9\u4e2a\u65e5\u5386\u5e74\u8fdb\u5165Linux\u5185\u6838\u3002\n\u8fd9\u91cc&#39\uff1b\u5e0c\u671bBcachefs\u57282022\u5e74\u6210\u529f\u6210\u719f\u5230\u53ef\u4ee5\u5728Linux\u5185\u6838\u4e2d\u8fdb\u884c\u7ef4\u62a4\u7684\u72b6\u6001\uff0c\u8fd9\u5c06\u6709\u52a9\u4e8e\u6269\u5c55\u6587\u4ef6\u7cfb\u7edf\u7684\u6d4b\u8bd5\u4eba\u5458\u5e93\uff0c\u5e76\u4f7f\u6587\u4ef6\u7cfb\u7edf\u80fd\u591f\u66f4\u597d\u5730\u8bc1\u660e\u81ea\u5df1\u3002", "note_en": "The  Bcachefs file-system that was born out of the Linux kernel&#39;s block cache code has over the past few years matured greatly. Now in 2022 the core fundamentals of the file-system are &#34;pretty close to done&#34; and will hopefully be mainlined this calendar year into the Linux kernel.\r   Bcachefs has been in development since the mid-2010s and  aims for speed while having ZFS/Btrfs-like features. It&#39;s been under heavy feature development and with time picking up features such as  Btrfs-like snapshots or referred to as   [email\u00a0protected]$$ snapshots, among other promising feature work to allow it to compete as a next-gen file-system. \r    Lead Bcachefs developer Kent Overstreet posted this morning an update on  the LKML about the state of this open-source file-system:\r  It&#39;s been a long road going from bcache, and starting with what was essentially a prototype for a new filesystem, and turning it into a real (scalable, robust, full featured) filesystem.\r   Over the past few years, we&#39;ve added reflink, subvolumes and snapshots. I&#39;m particularly proud of how snapshots turned out - it&#39;s roughly a versioned btree approach, and it&#39;s scalable and fast, even fsck is O(number of keys of metadata), not O(number of snapshots). I&#39;ve got it up to a million snapshots in a test VM.\r   The bigger thing though is that the core fundamentals are pretty close to done - replacing all the &#34;periodically walk the world&#34; algorigthms with real persistent data structures that scale. A big allocator rewrite is about to land, and after that will be backpointers - to fix copygc scanning.\r   Things are in flux lately with all the allocator work, but I&#39;m hoping once that settles down and I&#39;ve worked through the backlog of bug reports and performance regressions, we might be ready for upstreaming sometime this year...\n  Here&#39;s to hoping that Bcachefs will successfully mature to a state of readiness for mainlining in the Linux kernel in 2022, which should help in expanding the pool of testers of the file-system and allow the file-system to better prove itself.", "posttime": "2022-02-17 02:01:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,bcachefs,ready,\u6587\u4ef6\u7cfb\u7edf", "title": "\u4eca\u5e74\uff0cBcachefs\u53ef\u80fd\u5df2\u7ecf\u4e3aLinux\u7684\u5347\u7ea7\u505a\u597d\u4e86\u51c6\u5907", "title_en": "Bcachefs Might Be Ready for Upstreaming in Linux This Year", "transed": 1, "url": "https://www.phoronix.com/scan.php?page=news_item&px=Bcachefs-2022-Hopes", "via": "", "real_tags": ["linux", "bcachefs", "ready", "\u6587\u4ef6\u7cfb\u7edf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073662, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u970d\u6069\u4f2f\u683c\u548c\u79d1\u6069\u7684\u5de5\u4f5c\u8bc1\u660e\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u4e3b\u65b9\u7a0b\u2014\u2014\u666e\u9002\u5bc6\u5ea6\u6cdb\u51fd\u7684\u5b58\u5728\u3002\u8be5\u65b9\u7a0b\u5c06\u4ee5\u7535\u5b50\u6c64\u4e3a\u4f8b\uff0c\u8ba1\u7b97\u5176\u80fd\u91cf\uff0c\u5f15\u5bfc\u7269\u7406\u5b66\u5bb6\u627e\u5230\u6700\u81ea\u7136\u7684\u7535\u5b50\u6392\u5217\uff08\u80fd\u91cf\u6700\u4f4e\u7684\u7535\u5b50\uff09\u3002\u4ece\u539f\u7406\u4e0a\u8bb2\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u63cf\u8ff0\u4efb\u4f55\u7cfb\u7edf\uff0c\u4ece\u7845\u7816\u5230\u6c34\u5206\u5b50\uff0c\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u5b83\u662f\u901a\u7528\u7684\u3002\n\u552f\u4e00\u7684\u95ee\u9898\u662f\uff0c\u6ca1\u6709\u4eba\u77e5\u9053\u8fd9\u4e2a\u7b49\u5f0f\u662f\u4ec0\u4e48\u6837\u5b50\u3002\n\u4e0d\u4e45\uff0cKohn\u548c\u53e6\u4e00\u4f4d\u7269\u7406\u5b66\u5bb6Lu Jeu Sham\u9996\u6b21\u6210\u529f\u5730\u5199\u51fa\u4e86\u4e00\u4e2a\u5b9e\u7528\u7684\u5bc6\u5ea6\u6cdb\u51fd\u3002\u4e00\u4e2a\u7cbe\u786e\u7684\u51fd\u6570\u6355\u6349\u7535\u5b50\u884c\u4e3a\u7684\u6240\u6709\u7ec6\u5fae\u65b9\u9762\u5e94\u8be5\u662f\u96be\u4ee5\u5f62\u5bb9\u7684\u590d\u6742\uff0c\u6240\u4ee5\u4ed6\u4eec\u628a\u5b83\u4e00\u5206\u4e3a\u4e8c\u3002\u4e0a\u534a\u573a\u662f\u4ed6\u4eec\u77e5\u9053\u600e\u4e48\u505a\u7684\u90e8\u5206\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u7535\u5b50\u7684\u80fd\u91cf\uff0c\u8fd9\u4e9b\u7535\u5b50\u53ea\u80fd\u5e73\u5747\u611f\u77e5\u5f7c\u6b64\u3002\u5176\u4ed6\u4e00\u5207\u2014\u2014\u62dc\u5360\u5ead\u91cf\u5b50\u6548\u5e94\u548c\u975e\u5c40\u57df\u76f8\u4e92\u4f5c\u7528\u4ea7\u751f\u7684\u591a\u4f59\u80fd\u91cf\u2014\u2014\u90fd\u8fdb\u5165\u4e86\u4e0b\u534a\u90e8\u5206\uff1a\u4e00\u4e2a\u88ab\u79f0\u4e3a\u4ea4\u6362\u548c\u5173\u8054\u6cdb\u51fd\u7684\u6a21\u7cca\u56e0\u5b50\u3002\n\u5c3c\u987f\u8bf4\uff0c\u4ed6\u4eec\u201c\u628a\u6211\u4eec\u4e0d\u4e86\u89e3\u7684\u529f\u80fd\u7b80\u5316\u4e3a\u4e00\u5c0f\u90e8\u5206\u3002\u201d\u3002\n\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5341\u5e74\u91cc\uff0c\u79d1\u5b66\u5bb6\u4eec\u4ee5\u79d1\u6069\u548c\u6c99\u59c6\u7684\u5de5\u4f5c\u4e3a\u57fa\u7840\uff0c\u7528\u8d8a\u6765\u8d8a\u806a\u660e\u7684\u65b9\u6cd5\u6765\u4f30\u7b97\u798f\u5409\u56e0\u5b50\uff0c\u5bc6\u5ea6\u6cdb\u51fd\u6210\u4e3a\u4e86\u7406\u89e3\u7535\u5b50\u7684\u4e8b\u5b9e\u4e0a\u7684\u65b9\u6cd5\u3002\u7814\u7a76\u4eba\u5458\u5229\u7528\u5b83\u4eec\u6765\u9884\u6d4b\u539f\u5b50\u6355\u83b7\u6216\u91ca\u653e\u7535\u5b50\u7684\u53ef\u80fd\u6027\u3001\u5206\u5b50\u632f\u52a8\u7684\u65b9\u5f0f\uff08\u597d\u5947\u53f7\u63a2\u6d4b\u5668\u7528\u6765\u5bfb\u627e\u706b\u661f\u4e0a\u751f\u547d\u8ff9\u8c61\u7684\u4fe1\u606f\uff09\u3001\u6676\u683c\u4e2d\u539f\u5b50\u7684\u6392\u5217\u3001\u6750\u6599\u4e2d\u7684\u58f0\u901f\u7b49\u7b49\u3002\u8be5\u7406\u8bba\u6e90\u6e90\u4e0d\u65ad\u7684\u5e94\u7528\u4e3a\u79d1\u6069\u8d62\u5f97\u4e861998\u5e74\u7684\u8bfa\u8d1d\u5c14\u5956\u3002\n\u5f53\u7814\u7a76\u4eba\u5458\u8981\u6c42DFT\u5177\u6709\u66f4\u9ad8\u7684\u7cbe\u5ea6\u65f6\uff0c\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u8003\u8651\u5230\u6cdb\u51fd\u7684\u4ea4\u6362\u9879\u548c\u5173\u8054\u9879\u4e2d\u6240\u5305\u542b\u7684\u65e0\u77e5\uff0c\u4ece\u800c\u4f7f\u8349\u56fe\u7684\u7ec6\u8282\u66f4\u7b26\u5408\u666e\u9002\u5bc6\u5ea6\u6cdb\u51fd\u3002\n\u4eba\u5de5\u667a\u80fd\u516c\u53f8DeepMind\u7684\u7406\u8bba\u5316\u5b66\u5bb6\u963f\u4f26\u00b7\u79d1\u6069\uff08Aron Cohen\uff09\u662f\u5bfb\u627e\u795e\u79d8\u5b87\u5b99\u65b9\u7a0b\u5f0f\u7684\u4eba\u4e4b\u4e00\u3002\u4e3a\u4e86\u624e\u6839\u4e8e\u7406\u8bba\u91cf\u5b50\u5316\u5b66\u7684\u62bd\u8c61\u9886\u57df\uff0c\u4ed6\u624b\u8fb9\u653e\u7740\u4e00\u4e2a\u84dd\u8272\u76843D\u6253\u5370\u684c\u9762\u73a9\u5177\u3002\u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5851\u6599\u5e78\u8fd0\u997c\uff0c\u5b83\u7684\u66f2\u7ebf\u52fe\u52d2\u51fa\u4e86\u4e00\u4e2a\u5177\u6709\u666e\u904d\u6027\u7684\u51fd\u6570\u7684\u786e\u5207\u5f62\u72b6\uff0c\u4f46\u53ea\u9002\u7528\u4e8e\u6700\u7b80\u5355\u7684\u7cfb\u7edf\uff1a\u5b83\u53ef\u4ee5\u7528\u6765\u63ed\u793a\u4eba\u4eec\u53ef\u80fd\u60f3\u77e5\u9053\u7684\u5173\u4e8e\u4efb\u610f\u4e24\u4e2a\u539f\u5b50\u4e4b\u95f4\u5171\u4eab\u7684\u4e24\u4e2a\u7535\u5b50\u7684\u4efb\u4f55\u4fe1\u606f\u3002\u4e0d\u8fc7\uff0c\u5b83\u63d0\u9192\u4ed6\uff0c\u53ef\u80fd\u5b58\u5728\u4e00\u79cd\u53ef\u4ee5\u5904\u7406\u4efb\u610f\u6570\u91cf\u7684\u7535\u5b50\u548c\u539f\u5b50\u7684\u6cdb\u51fd\u3002\u201c\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684\u662f\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u201d\u4ed6\u8bf4\uff1b\u53ea\u662f\u8981\u590d\u6742\u5f97\u591a\u3002\u201c\u8fd9\u662f\u771f\u7684\u3002\u201d\nDFT\u7814\u7a76\u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u662f\u627e\u5230\u66f4\u7cbe\u786e\u7684\u6cdb\u6cdb\u51fd\u8fd1\u4f3c\u3002\u5766\u666e\u5c14\u5927\u5b66\uff08Temple University\uff09\u7684\u7269\u7406\u5b66\u5bb6\u3001\u9886\u5148\u7684\u51fd\u6570\u5f00\u53d1\u4eba\u5458\u7ea6\u7ff0\u00b7\u73c0\u5fb7\uff08John Perdew\uff09\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u662f\u8fd9\u9879\u5de5\u4f5c\u7684\u5e26\u5934\u4eba\u3002\u4ed6\u5c06\u901a\u5f80\u901a\u7528\u529f\u80fd\u7684\u9053\u8def\u63cf\u8ff0\u4e3a\u722c\u68af\u5b50\u4e0a\u7684\u68af\u7ea7\u3002\u5728\u6bcf\u4e00\u4e2a\u68af\u7ea7\u4e0a\uff0c\u7269\u7406\u5b66\u5bb6\u90fd\u4f1a\u7ed9\u51fd\u6570\u6dfb\u52a0\u65b0\u7684\u6210\u5206\u3002\u6700\u7b80\u5355\u7684\u914d\u6599\u5c31\u662f\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u7535\u5b50\u7096\u83dc\u7684\u539a\u5ea6\u3002\u5728\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u529f\u80fd\u8fd8\u8003\u8651\u4e86\u539a\u5ea6\u5728\u4e0d\u540c\u4f4d\u7f6e\u7684\u53d8\u5316\u901f\u5ea6\uff0c\u4e3a\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u4e86\u66f4\u5e7f\u9614\u7684\u89c6\u91ce\uff0c\u5e76\u4f7f\u529f\u80fd\u66f4\u7cbe\u786e\u3002\nPerdew\u7b56\u7565\u7684\u4e00\u4e2a\u5173\u952e\u90e8\u5206\u662f\u4f7f\u7528\u7269\u7406\u63a8\u7406\u6765\u786e\u5b9a\u597d\u7684\u8fd1\u4f3c\u5fc5\u987b\u9075\u5b88\u7684\u67d0\u4e9b\u6570\u5b66\u7279\u6027\uff0c\u5373\u201c\u7cbe\u786e\u7ea6\u675f\u201d\u66f4\u9ad8\u7684\u68af\u7ea7\u6ee1\u8db3\u66f4\u591a\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u7814\u7a76\u4eba\u5458\u5fc5\u987b\u66f4\u52aa\u529b\u5730\u5bfb\u627e\u7b26\u5408\u8fd9\u4e9b\u7ea6\u675f\u6761\u4ef6\u7684\u65b9\u7a0b\u5f0f\u3002\nPerdew\u7684\u56e2\u961f\u4e8e1999\u5e74\u5f00\u59cb\u7814\u7a76\u6df7\u5408\u4e86\u516d\u79cd\u6210\u5206\u7684\u4e09\u7ea7\u529f\u80fd\uff0c2015\u5e74\uff0c\u4ed6\u53d1\u5e03\u4e86\u4e00\u6b3e\u540d\u4e3aSCAN\u7684\u6700\u65b0\u529f\u80fd\u3002\u8fd9\u662f\u4ed6\u7b2c\u516b\u6b21\u5c1d\u8bd5\uff0c\u4e5f\u662f\u7b2c\u4e00\u6b21\u9075\u5b88\u4e0e\u7b2c\u4e09\u7ea7\u76f8\u5173\u7684\u6240\u670917\u4e2a\u5df2\u77e5\u7ea6\u675f\u3002\u626b\u63cf\u65e2\u9002\u7528\u4e8e\u5206\u5b50\uff0c\u4e5f\u9002\u7528\u4e8e\u56fa\u4f53\uff0c\u5df2\u8bc1\u660e\u662f\u8fc4\u4eca\u4e3a\u6b62\u53d1\u73b0\u7684\u6700\u6709\u80fd\u529b\u7684\u666e\u9002\u6cdb\u51fd\u8fd1\u4f3c\u4e4b\u4e00\u3002\n\u201c\u7b2c\u4e09\u7ea7\u6cdb\u51fd\u6709\u975e\u5e38\u4e30\u5bcc\u7684\u53ef\u80fd\u6027\uff0c\u201d\u73c0\u5fb7\u8bf4\u3002\u201c\u5f04\u6e05\u695a\u4ec0\u4e48\u662f\u91cd\u8981\u7684\uff0c\u4ec0\u4e48\u662f\u6709\u6548\u7684\u9700\u8981\u65f6\u95f4\u3002\u201d\n\u968f\u7740\u73c0\u5fb7\u7528\u7269\u7406\u76f4\u89c9\u6539\u8fdb\u5bc6\u5ea6\u6cdb\u51fd\u7684\u827a\u672f\uff0c\u4e00\u573a\u9769\u547d\u6b63\u5728\u915d\u917f\u4e4b\u4e2d\u3002\u7b97\u6cd5\u80fd\u5426\u627e\u51fa\u7535\u5b50\u884c\u4e3a\u4e2d\u8fc7\u4e8e\u5fae\u5999\u7684\u6a21\u5f0f\uff0c\u8ba9\u4eba\u7c7b\u65e0\u6cd5\u7528\u6570\u5b66\u65b9\u6cd5\u8bb0\u5f55\u4e0b\u6765\uff1f\n2012\u5e74\uff0c\u4f2f\u514b\u548c\u4ed6\u7684\u5408\u4f5c\u8005\u9996\u6b21\u5c1d\u8bd5\u5c06\u673a\u5668\u5b66\u4e60\u5e94\u7528\u4e8e\u4e00\u7ec4\u7b80\u5316\u7684\u7535\u5b50\u3002\u4ed6\u7684\u4e00\u7ef4\u539f\u578b\u4fc3\u4f7f\u4ed6\u548c\u5176\u4ed6\u7814\u7a76\u5c0f\u7ec4\u7814\u7a76\u7b97\u6cd5\u662f\u5426\u80fd\u8ba9\u7814\u7a76\u4eba\u5458\u66f4\u4e0a\u4e00\u5c42\u697c\u3002\n\u4e00\u4e2a\u7a81\u7834\u51fa\u73b0\u57282021\u5e74\u521d\uff0c\u5f53Burke\u548c\u5408\u4f5c\u8005\u5efa\u7acb\u4e86\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u7684\u73a9\u5177\u95ee\u9898\uff0c\u53ef\u4ee5\u8ddf\u8e2a\u5bc6\u5ea6\u8bef\u5dee\uff0c\u4ee5\u53ca\u80fd\u6e90\u9519\u8bef\u7684\u65b9\u5f0f\uff0c\u5927\u591a\u6570\u4ee5\u524d\u7684\u5c1d\u8bd5\u5ffd\u7565\u3002\u5362\u68ee\u5821\u5927\u5b66\u7684\u4e00\u4f4d\u7406\u8bba\u5316\u5b66\u5bb6Alexandre Tkatchenko\u8bf4\uff1a\u201c\u4e3a\u4e86\u83b7\u5f97\u4e00\u79cd\u65e2\u80fd\u7ed9\u4f60\u5e26\u6765\u5bc6\u5ea6\u53c8\u80fd\u7ed9\u4f60\u5e26\u6765\u80fd\u91cf\u7684\u529f\u80fd\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u975e\u5e38\u7075\u6d3b\u7684\u4f53\u7cfb\u7ed3\u6784\u3002\u201d\u201c\u7528\u4f60\u7684\u5934\u8111\u5199\u4e00\u4e2a\u51fd\u6570\u5f62\u5f0f\u5e76\u4e0d\u5bb9\u6613\u3002\u201d\nStony Brook\u7684\u8d39\u5c14\u5357\u5fb7\u65af\u00b7\u585e\u62c9\uff08Fern\u00e1ndez Serra\uff09\u4f7f\u7528\u7c7b\u4f3c\u7684\u7b56\u7565\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u5c06\u7814\u7a76\u4e00\u7cfb\u5217\u5206\u5b50\u548c\u80fd\u91cf\uff0c\u5e76\u641c\u7d22\u7b26\u5408\u5927\u591a\u6570\u5df2\u77e5\u7ea6\u675f\u6761\u4ef6\u7684\u7b2c\u4e09\u7ea7\u51fd\u6570\uff0c\u57fa\u672c\u4e0a\u662f\u4f7f\u7528\u4e00\u53f0\u673a\u5668\u6765\u8ffd\u6eaf\u73c0\u5fb7\u7684\u8db3\u8ff9\u3002\n\u57282021\u79cb\u5b63\u7684\u7269\u7406\u8bc4\u8bbaB\u4e2d\uff0c\u5979\u548cSebastian Dick\u5728\u300a\u7269\u7406\u8bc4\u8bbaB\u300b\u4e2d\u62a5\u9053\uff0c\u7531\u6b64\u4ea7\u751f\u7684\u4ea4\u6362\u548c\u76f8\u5173\u529f\u80fd\u6027\u7684\u8282\u62cd\u626b\u63cf\u53ef\u4ee5\u5c06\u4e0d\u719f\u6089\u7684\u5206\u5b50\u7684\u80fd\u91cf\u9884\u6d4b\u5927\u7ea610%\u3002\u4f46\u8fd9\u4e00\u9002\u5ea6\u7684\u6536\u76ca\u8868\u660e\uff0c\u73c0\u5fb7\u7684\u5de5\u4f5c\u5df2\u7ecf\u63a5\u8fd1\u627e\u5230\u7b2c\u4e09\u4e2a\u9636\u68af\u7684\u4e0a\u9650\u3002\n\u8d39\u5c14\u5357\u5fb7\u65af\u00b7\u585e\u62c9\u8bf4\uff1a\u201c\u7269\u7406\u76f4\u89c9\u4e0d\u77e5\u4f55\u6545\u8017\u5c3d\u4e86\u4f60\u6240\u80fd\u8fbe\u5230\u7684\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u3002\u201d\u3002\u201cPerdew\u7684\u529f\u80fd\u771f\u7684\u5f88\u597d\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u3002\u201d\n\u722c\u5f97\u66f4\u9ad8\u9700\u8981\u66f4\u590d\u6742\u7684\u8f93\u5165\u2014\u2014\u4ee5\u53ca\u7406\u89e3\u8fd9\u4e9b\u8f93\u5165\u7684\u7b97\u6cd5\u3002\n\u5728\u75ab\u60c5\u7206\u53d1\u524d\u4e0d\u4e45\uff0cDeepMind\u7684\u7814\u7a76\u4eba\u5458\u5f81\u670d\u4e86\u68cb\u76d8\u6e38\u620f\u56f4\u68cb\uff0c\u6b63\u5728\u5bfb\u627e\u65b0\u7684\u6311\u6218\u3002\u4ed6\u4eec\u5bf9\u79d1\u5b66\u673a\u5668\u5b66\u4e60\u95ee\u9898\u7279\u522b\u611f\u5174\u8da3\uff0c\u79d1\u6069\u628a\u5b83\u4eec\u79f0\u4e3aDFT\u3002\u4ed6\u82b1\u4e86\u6570\u5e74\u65f6\u95f4\u7814\u7a76\u7b80\u5355\u7cfb\u7edf\u7684\u7cbe\u786e\u51fd\u6570\uff0c\u6bd4\u5982\u4ed6\u653e\u5728\u684c\u4e0a\u7684\u90a3\u4e2a\u3002\u4f46\u5b83\u4eec\u8fdc\u6ca1\u6709\u590d\u6742\u5230\u8db3\u4ee5\u63cf\u8ff0\u73b0\u5b9e\u4e16\u754c\u3002\n\u4ed6\u8bf4\uff1a\u201c\u60f3\u8981\u627e\u5230\u5bf9\u5316\u5b66\u6709\u7528\u7684\u4e1c\u897f\uff0c\u611f\u89c9\u662f\u4e00\u6761\u6f2b\u957f\u7684\u9053\u8def\u3002\u201d\u3002\nDFT\u7684\u4e00\u4e2a\u6838\u5fc3\u5f31\u70b9\u5c24\u5176\u4fb5\u8680\u4e86\u79d1\u6069\u3002\u7535\u6d41\u5bc6\u5ea6\u6cdb\u51fd\u901a\u5e38\u4f1a\u8fc7\u591a\u5730\u62b9\u53bb\u7535\u5b50\u3002\u5bf9\u4e8e\u4e0d\u5e73\u8861\u7684\u7cfb\u7edf\u6765\u8bf4\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c24\u5176\u7a81\u51fa\uff0c\u56e0\u4e3a\u7535\u5b50\u5e94\u8be5\u4e3b\u8981\u805a\u96c6\u5728\u4e00\u4e2a\u5206\u5b50\u4e0a\u3002DFT\u503e\u5411\u4e8e\u5c06\u7535\u5b50\u6c64\u66f4\u5747\u5300\u5730\u5206\u5e03\u5728\u4e24\u4e2a\u5206\u5b50\u4e0a\u3002\u4e00\u4e2a\u76f8\u5173\u7684\u95ee\u9898\u51fa\u73b0\u5728\u5316\u5b66\u53cd\u5e94\u4e2d\uff0c\u5f53DFT\u4e3a\u7c92\u5b50\u5408\u5e76\u548c\u5206\u79bb\u7ed9\u51fa\u9519\u8bef\u7684\u80fd\u91cf\u65f6\uff0c\u5373\u4f7f\u662f\u50cf\u6c22\u539f\u5b50\u8fd9\u6837\u7b80\u5355\u7684\u60c5\u51b5\u3002\u79d1\u6069\u8bf4\uff1a\u201c\u8fd9\u662f\u4e00\u5339\u4e3b\u529b\u9a6c\uff0c\u4f46\u6211\u77e5\u9053\u5b83\u6709\u8fd9\u4e9b\u5de8\u5927\u7684\u5931\u8d25\u3002\u201d\n\u4e3a\u4e86\u8bbe\u8ba1\u4ed6\u4eec\u7684\u4e0b\u4e00\u4ee3\u529f\u80fd\uff0c\u79d1\u6069\u548cDeepMind\u56e2\u961f\u9009\u62e9\u4e0d\u592a\u62c5\u5fc3\u6ee1\u8db3\u4e00\u957f\u4e32\u7269\u7406\u539f\u7406\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4f1a\u4f9d\u8d56\u6570\u636e\uff0c\u5927\u91cf\u6570\u636e\u3002\u4ed6\u4eec\u5728\u6587\u732e\u4e2d\u641c\u5bfb\u6570\u5343\u4e2a\u5177\u6709\u5df2\u77e5\u80fd\u91cf\u7684\u5206\u5b50\u7684\u6570\u636e\u5e93\uff08\u4f7f\u7528\u859b\u5b9a\u8c14\u65b9\u7a0b\u6216\u7c7b\u4f3c\u65b9\u6cd5\u8fdb\u884c\u4e86\u5927\u91cf\u8ba1\u7b97\uff09\u3002\u7136\u540e\u4ed6\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u4f7f\u7528\u8d85\u7ea7\u8ba1\u7b97\u673a\u6765\u8ba1\u7b97\u6570\u767e\u4e2a\u989d\u5916\u5206\u5b50\u7684\u80fd\u91cf\u2014\u2014\u5176\u4e2d\u8bb8\u591a\u9700\u8981\u6570\u5929\u7684\u65f6\u95f4\u6765\u8ba1\u7b97\u3002\n\u5f53\u8be5\u56e2\u961f\u6536\u96c6\u4e86\u4e00\u4e2a\u8be6\u5c3d\u7684\u793a\u4f8b\u5206\u5b50\u5e93\u65f6\uff0c\u79d1\u6069\u548c\u5176\u4ed6\u5316\u5b66\u5bb6\u51b3\u5b9a\u4e86\u529f\u80fd\u6027\u5206\u5b50\u7684\u7ed3\u6784\u3002\n\u4ed6\u4eec\u91c7\u7528\u4e86\u4e00\u79cd\u8bf1\u4eba\u7684\u591a\u624d\u591a\u827a\u7684\u65b9\u6cd5\u3002\u7ecf\u8fc7\u591a\u5e74\u7684\u53cd\u590d\u8bd5\u9a8c\uff0c\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u4e86\u4e00\u79cd\u4f30\u7b97\u90e8\u5206\u4ea4\u6362\u548c\u76f8\u5173\u51fd\u6570\u7684\u7279\u6b8a\u65b9\u6cd5\u3002\u5f53\u4e00\u4e2a\u529f\u80fd\u90e8\u4ef6\u768480%\u80fd\u91cf\u4ee5\u4e00\u79cd\u65b9\u5f0f\u8ba1\u7b97\uff0c\u53e6\u4e00\u79cd\u65b9\u5f0f\u768420%\u80fd\u91cf\u8ba1\u7b97\u65f6\uff0c\u6027\u80fd\u6709\u4e00\u4e2a\u6700\u4f73\u70b9\u3002\u957f\u671f\u4ee5\u6765\uff0c\u7814\u7a76\u4eba\u5458\u4e00\u76f4\u6000\u7591\u4e0b\u4e00\u6b65\u5c06\u662f\u8ba9\u5206\u5b50\u5468\u56f4\u768480/20\u6bd4\u4f8b\u5728\u70b9\u4e0e\u70b9\u4e4b\u95f4\u53d8\u5316\uff0c\u4f46\u6ca1\u6709\u4eba\u5b8c\u5168\u6210\u529f\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u4f2f\u514b\u57281998\u5e74\u4ecb\u7ecd\u4e86\u8fd9\u79cd\u51fd\u6570\u5f0f\uff0c\u4ed6\u8bf4\uff1a\u201c\u53ef\u80fd\u6709100\u7bc7\u8bba\u6587\uff0c\u4eba\u4eec\u5728\u5176\u4e2d\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u4f46\u4ed6\u4eec\u6ca1\u6709\u5236\u4f5c\u51fa\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u7684\u4e1c\u897f\u3002\u201d\u3002\u201c\u4e5f\u8bb8\u8fd9\u5bf9\u4e00\u4e2a\u4eba\u6765\u8bf4\u592a\u96be\u4e86\u3002\u201d\n\u51ed\u501f\u5927\u91cf\u7684\u793a\u4f8b\u5206\u5b50\u548cDeepMind\u56e2\u961f\u7684\u673a\u5668\u5b66\u4e60\u4e13\u4e1a\u77e5\u8bc6\uff0c\u8be5\u56e2\u961f\u7684\u795e\u7ecf\u7f51\u7edc\u80fd\u591f\u8bad\u7ec3\u51fa\u4e00\u79cd\u7075\u6d3b\u7684\u7b2c\u56db\u7ea7\u529f\u80fd\u3002\u4e0e\u626b\u63cf\u548c\u5176\u4ed6\u9876\u7ea7\u7ade\u4e89\u5bf9\u624b\u76f8\u6bd4\uff0c\u5b83\u80fd\u66f4\u597d\u5730\u4f30\u8ba1\u5927\u91cf\u5206\u5b50\u7684\u80fd\u91cf\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u80fd\u66f4\u51c6\u786e\u5730\u653e\u7f6e\u7535\u5b50\uff0c\u66f4\u597d\u5730\u63cf\u8ff0\u5b83\u4eec\u7684\u81ea\u65cb\u3002\u8fd9\u4e00\u529f\u80fd\u88ab\u79f0\u4e3aDM21\uff0c\u662f\u7b2c\u4e00\u4e2a\u80fd\u591f\u5904\u7406\u5316\u5b66\u952e\u65ad\u88c2\u548c\u5f62\u6210\u7684\u901a\u7528\u529f\u80fd\u300212\u67089\u65e5\uff0c\u8be5\u7ec4\u7ec7\u63cf\u8ff0\u4e86\u5b83\u4eec\u5728\u79d1\u5b66\u4e0a\u7684\u529f\u80fd\u3002\n\u201c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u5408\u7406\u7684\u901a\u7528\u529f\u80fd\uff0c\u201d\u4f2f\u514b\u8bf4\uff0c\u4ed6\u6ca1\u6709\u53c2\u4e0e\u3002\u201c\u5982\u679c\u8fd9\u4e2a\u4e1c\u897f\u50cf\u5b83\u770b\u8d77\u6765\u90a3\u4e48\u597d\uff0c\u4e00\u5e74\u4e4b\u5185\u5c31\u4f1a\u6709\u6210\u5343\u4e0a\u4e07\u7684\u4eba\u5f00\u59cb\u4f7f\u7528\u5b83\u3002\u201d\n\u7136\u800c\uff0c\u4f2f\u514b\u63d0\u9192\u8bf4\uff0c\u5168\u9762\u6d4b\u8bd5\u529f\u80fd\u9700\u8981\u65f6\u95f4\u3002\u8be5\u9886\u57df\u5230\u5904\u90fd\u662f\u6700\u521d\u770b\u8d77\u6765\u5f88\u6709\u5e0c\u671b\u4f46\u9690\u85cf\u4e86\u81f4\u547d\u7f3a\u9677\u7684\u529f\u80fd\u7684\u6b8b\u9ab8\uff0c\u7814\u7a76\u4eba\u5458\u624d\u521a\u521a\u5f00\u59cb\u5206\u79bbDM21\u3002\nDM21\u7684\u4e00\u4e2a\u7f3a\u70b9\u662f\uff0c\u5b83\u5bf9\u5468\u671f\u8868\u524d\u4e09\u884c\u7684\u5206\u5b50\u8fdb\u884c\u8bad\u7ec3\uff0c\u800c\u5468\u671f\u8868\u4e2d\u7684\u6570\u636e\u66f4\u4e30\u5bcc\u3002\u8fd9\u610f\u5473\u7740\u5b83\u5b66\u5230\u7684\u7535\u5b50\u884c\u4e3a\u53ef\u80fd\u4e0d\u4f1a\u4f20\u9012\u5230\u91d1\u5c5e\u539f\u5b50\u6216\u56fa\u4f53\u6750\u6599\u4e0a\uff0c\u4f8b\u5982\uff0c\u8fd9\u4e24\u79cd\u6750\u6599\u5bf9\u4e8e\u5206\u6790\u94dc\u57fa\u9ad8\u6e29\u8d85\u5bfc\u4f53\u5bb6\u65cf\u81f3\u5173\u91cd\u8981\u3002\u76ee\u524d\uff0c\u4ee3\u8868\u8fd9\u4e9b\u7cfb\u7edf\u7684\u901a\u7528\u6cdb\u51fd\u7684\u7ec6\u8282\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u626b\u63cf\u548c\u5176\u4ed6\u6cdb\u51fd\u66f4\u597d\u5730\u8fd1\u4f3c\u3002\n\u201c\u5728\u53ef\u9884\u89c1\u7684\u672a\u6765\uff0c\u6211\u8ba4\u4e3a\u4e0d\u4f1a\u6709\u4e00\u4e2a\u529f\u80fd\u6027\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u201d\u7279\u5361\u7279\u7434\u79d1\u8bf4\u3002\nFern\u00e1ndez Serra\u548cDeepMind\u7b49\u65b0\u6cdb\u51fd\u7684\u53d1\u5c55\u8868\u660e\uff0c\u673a\u5668\u5b66\u4e60\u53ef\u4ee5\u6210\u4e3a\u63a2\u7d22\u5b87\u5b99\u5bc6\u5ea6\u6cdb\u51fd\u65b0\u533a\u57df\u7684\u5f3a\u5927\u5de5\u5177\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u4e0e\u5206\u5b50\u548c\u5316\u5b66\u76f8\u5bf9\u5e94\u7684\u533a\u57df\u3002\nTkatchenko\u8bf4\uff0c\u8fd9\u6709\u52a9\u4e8e\u201c\u771f\u6b63\u8c03\u6574\u4f60\u60f3\u8981\u89e3\u51b3\u7684\u5316\u5b66\u7a7a\u95f4\u90e8\u5206\uff0c\u5e76\u4f7f\u5176\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u53d1\u6325\u4f5c\u7528\u201d\u3002\u201c\u6211\u8ba4\u4e3a\u673a\u5668\u5b66\u4e60\u6280\u672f\u771f\u7684\u4f1a\u7559\u4e0b\u6765\u3002\u201d\n\u4f46\u6539\u8fdb\u540e\u7684\u5316\u5b66\u529f\u80fd\u662f\u5426\u80fd\u63ed\u793a\u4ece\u539f\u5b50\u5230\u6750\u6599\u7684\u4e00\u5207\u76f8\u5173\u7684\u4e00\u822c\u7279\u5f81\u4ecd\u6709\u5f85\u89c2\u5bdf\u3002\u4f8b\u5982\uff0cPerdew\u7ee7\u7eed\u5bfb\u627e\u65b0\u7684\u76f4\u89c9\u54c1\u8d28\uff0c\u4ee5\u4f20\u7edf\u65b9\u5f0f\u8fdb\u4e00\u6b65\u5b8c\u5584\u6cdb\u51fd\u3002\u201c\u6211\u53ef\u80fd\u4e0d\u4f1a\u82b1\u592a\u591a\u65f6\u95f4\u5728\u673a\u5668\u5b66\u4e60\u4e0a\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u56e0\u4e3a\u867d\u7136\u673a\u5668\u53ef\u4ee5\u5b66\u4e60\uff0c\u4f46\u5b83\u4eec\u8fd8\u4e0d\u80fd\u5411\u6211\u4eec\u89e3\u91ca\u5b83\u4eec\u6240\u5b66\u7684\u4e1c\u897f\u3002\u201d\n\u79d1\u6069\u5e0c\u671bDM21\u5df2\u7ecf\u77a5\u89c1\u4e86\u666e\u904d\u7684\u7279\u5f81\uff0c\u8fd9\u4e9b\u7279\u5f81\u53ef\u80fd\u6210\u4e3a\u672a\u6765\u8fd1\u4f3c\u503c\u7684\u6301\u4e45\u5143\u7d20\uff0c\u65e0\u8bba\u5b83\u4eec\u662f\u7531\u4eba\u7c7b\u5927\u8111\u8fd8\u662f\u795e\u7ecf\u7f51\u7edc\u751f\u6210\u7684\u3002\n\u201c\u529f\u80fd\u662f\u65e0\u9650\u590d\u6742\u7684\uff0c\u6240\u4ee5\u5bf9\u5b83\u8fdb\u884c\u4efb\u4f55\u653b\u51fb\u90fd\u662f\u597d\u7684\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u5b83\u4eec\u7edf\u4e00\u8d77\u6765\u3002\u201d", "note_en": "Hohenberg and Kohn\u2019s work proved the existence of a powerful master equation \u2014 the universal density functional. The equation would take some instance of an electron soup and calculate its energy, guiding physicists to the most natural arrangement of electrons (the one with the lowest possible energy). The functional would be universal in the sense that it could, in principle, describe any system \u2014 from silicon bricks down to water molecules.\n The only catch was that no one had any idea what the equation looked like.\n Soon Kohn and another physicist, Lu Jeu Sham,  made a first pass at writing down a practical density functional. An exact functional capturing all subtle aspects of electron behavior should be unspeakably complicated, so they split it in two. The first half was the part they knew how to do. It provided the energy of a group of electrons that could sense each other only on average. Everything else \u2014 the excess energy from the byzantine quantum effects and nonlocal interactions \u2014 went into the second half: a fudge factor known as the exchange and correlation functional.\n They \u201creduced the thing that we don\u2019t understand about the functional to one small part of it,\u201d Neaton said.\n Over the following decades, scientists built on Kohn and Sham\u2019s work with increasingly clever ways of estimating the fudge factor, and density functionals became the de facto way to understand electrons. Researchers use them to predict how likely an atom is to grab or release an electron, the ways in which molecules vibrate (information the Curiosity rover uses to look for signs of life on Mars), the arrangement of atoms in crystal lattices, the speed of sound in a material, and much more. The theory\u2019s endless stream of applications  won Kohn a Nobel prize in 1998.\n  As researchers ask for more precision from DFT, they\u2019ve had to reckon with the ignorance stuffed into the exchange and correlation term of the functional, sharpening the details of their sketch to bring it more in line with the universal density functional.\n Aron Cohen, a theoretical chemist at the artificial intelligence company DeepMind, is among those searching for the mythical universal equation. To stay grounded in the abstract landscape of theoretical quantum chemistry, he keeps a blue 3D-printed desk toy on hand. It looks like a plastic fortune cookie, and its curves trace out the exact shape of a functional that is universal, but only for the simplest of systems: It can be used to reveal anything one might wish to know about two electrons shared between any two atoms. Still, it reminds him that a functional that can handle any number of electrons and atoms may exist. \u201cThe thing we\u2019re looking for is like this,\u201d he said; it\u2019s just much more complicated. \u201cIt\u2019s a real thing.\u201d\n  A major goal of DFT research is to find more accurate approximations of that universal functional.  John Perdew, a physicist at Temple University and a leading functional developer, has long spearheaded this work. He describes the path toward the universal functional as like climbing the rungs on a ladder. On each rung, physicists add new ingredients to the functional. The simplest ingredient is just the thickness of the electron stew in each location. On the next rung, the functional also considers how quickly the thickness changes from place to place, giving researchers a broader view and making the functional more precise.\n A key part of Perdew\u2019s strategy is to use physical reasoning to identify certain mathematical properties that good approximations must obey, known as \u201cexact constraints.\u201d Higher rungs satisfy more of these constraints, and researchers have to search harder to find equations that obey them all.\n Perdew\u2019s group started tackling third-rung functionals, which blend six ingredients, in 1999, and in 2015, he released a  state-of-the-art functional called SCAN. It was his eighth attempt, and the first to obey all 17 known constraints relevant on the third rung. Applicable to both molecules and solids, SCAN has proved one of the most capable approximations of the universal functional yet discovered.\n \u201cThere are very rich possibilities for third-rung functionals,\u201d Perdew said. \u201cIt takes time to figure out what is important and what works.\u201d\n  As Perdew refined the art of improving density functionals with physical intuition, a revolution was brewing. Could algorithms ferret out patterns in electron behavior too subtle for humans to write down mathematically?\n In 2012, Burke and his collaborators made the first modern attempt to  apply machine learning to a set of simplified electrons. His one-dimensional prototype motivated him and other groups to see if algorithms could hoist researchers further up the ladder.\n One breakthrough came  in early 2021, when Burke and collaborators set up a neural network for a toy problem that could keep track of density errors as well as energy errors in a way that most previous attempts had ignored. \u201cTo get a functional which gives you both density and energy, you need a very flexible architecture,\u201d said  Alexandre Tkatchenko, a theoretical chemist at the University of Luxembourg. \u201cIt\u2019s not easy to write a functional form with your mind.\u201d\n Fern\u00e1ndez-Serra at Stony Brook used a similar strategy to design a neural network that would study a range of molecules and energies and search for a third-rung functional obeying most known constraints, essentially using a machine to retrace Perdew\u2019s footsteps.\n The resulting exchange and correlation functional beat SCAN in predicting the energies of unfamiliar molecules by roughly 10%, as she and Sebastian Dick  reported in  Physical Review B in the fall of 2021. But the modest gain suggested that Perdew\u2019s work had already come close to finding the third rung\u2019s ceiling.\n \u201cPhysical intuition has somehow exhausted almost all that you can reach,\u201d Fern\u00e1ndez-Serra said. \u201cPerdew\u2019s functional really is as good as you can get without using machine learning.\u201d\n Climbing higher would require more complicated inputs \u2014 and algorithms to make sense of them.\n  Shortly before the pandemic, researchers at DeepMind, having conquered the board game Go, were searching for new challenges. They were especially interested in scientific machine learning problems, and Cohen pitched them DFT. He had spent years studying exact functionals of simple systems, like the one he keeps on his desk. But they were nowhere near complex enough to describe the real world.\n \u201cIt felt like a long path to get to something that would be useful for chemistry,\u201d he said.\n One weakness at the heart of DFT ate away at Cohen in particular. Current density functionals often smear out electrons too much. The problem is especially glaring for lopsided systems, where electrons should gather mostly on one molecule. DFT tends to spread out the electron soup more evenly across both molecules. A related problem appears in chemical reactions, when DFT gives incorrect energies for particles merging and pulling apart, even for cases as simple as hydrogen atoms. \u201cIt\u2019s this workhorse,\u201d Cohen said, \u201cbut I know it has these massive failures.\u201d\n  To design their next-generation functional, Cohen and the DeepMind team opted not to worry so much about satisfying a long list of physical principles. Instead, they\u2019d lean on data, lots of data. They scoured the literature for databases of thousands of molecules with known energies (calculated at great cost using the Schr\u00f6dinger equation or similar methods). Then they went further, using supercomputers to crunch the energies of hundreds of additional molecules \u2014 many of which took days to calculate.\n While the team assembled an exhaustive library of example molecules, Cohen and other chemists decided how the functional should be structured.\n They landed on a tantalizingly versatile approach. Over years of trial and error, researchers had found a special recipe for estimating part of the exchange and correlation functional. There was a sweet spot in performance when 80% of the energy for one piece of the functional was calculated in one way and 20% in another. Researchers had long suspected that the next step would be to let the 80/20 ratio vary from point to point around a molecule, but no one had fully succeeded in doing this.\n There have been \u201c100 papers maybe where people played with this form, but they hadn\u2019t produced something that everybody could use,\u201d said Burke, who  introduced this type of functional in 1998. \u201cMaybe it\u2019s too hard for a person.\u201d\n With its sea of example molecules and the machine learning expertise of the DeepMind team, the group\u2019s neural network was able to train a flexible fourth-rung functional of just that type. It can estimate the energies of a wide array of molecules better than SCAN and other top competitors, largely because it places electrons more accurately and better describes their spins. The functional, dubbed DM21, is the first general-purpose functional capable of handling the breaking and forming of chemical bonds. On December 9, the group  described their functional in  Science.\n \u201cThis is the first reasonably general-purpose functional,\u201d said Burke, who was not involved. \u201cIf this thing is as good as it looks, thousands of people will start using it within a year.\u201d\n However, Burke cautions that fully testing the functional will take time. The field is littered with the wreckage of functionals that initially looked promising but hid fatal flaws, and researchers have only just begun to pick apart DM21.\n One weakness is that DM21 trained on molecules from the first three rows of the periodic table, where data is more plentiful. That means the electron behavior it learned may not carry over to metal atoms or solid materials, both of which are crucial for analyzing the  copper-based family of high-temperature superconductors, for instance. The details of the universal functional representing those systems remain, for now, better approximated by SCAN and other functionals.\n \u201cFor the foreseeable future, I don\u2019t think there will be one functional that will do it all,\u201d Tkatchenko said.\n  The development of new functionals like those of Fern\u00e1ndez-Serra and DeepMind suggests that machine learning can be a powerful tool for exploring new regions of the universal density functional, particularly those corresponding to molecules and chemistry.\n It\u2019s good for \u201creally adjusting for the part of chemical space you want to address and making this functional as efficient as possible,\u201d said Tkatchenko. \u201cI think machine learning techniques really are here to stay.\u201d\n  But whether improved chemistry functionals will reveal general features relevant to everything from atoms to materials remains to be seen. Perdew, for example, continues to search for new intuitive qualities that can further refine functionals in the traditional way. \u201cI probably won\u2019t put a lot of time into machine learning efforts,\u201d he said, \u201cbecause although machines can learn, they can\u2019t yet explain to us what they have learned.\u201d\n Cohen hopes that DM21 has glimpsed universal features that could become enduring elements of future approximations, whether they\u2019re generated by human minds or neural networks.\n \u201cThe functional is infinitely complicated, so making any attack on it is good,\u201d he said. \u201cIdeally we\u2019d like to unify them all.\u201d", "posttime": "2022-02-17 01:51:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b66\u4e60,complexity,\u7535\u5b50", "title": "\u7528\u673a\u5668\u5b66\u4e60\u9a6f\u670d\u91cf\u5b50\u590d\u6742\u6027", "title_en": "Quantum complexity tamed by machine learning", "transed": 1, "url": "https://www.quantamagazine.org/quantum-complexity-tamed-by-machine-learning-20220207/", "via": "", "real_tags": ["\u5b66\u4e60", "\u7535\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073661, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f13\u5b58\u5185\u5b58\u7684\u5de5\u4f5c\u539f\u7406\u662f\u80e1\u841d\u535c\u52a0\u5927\u68d2\u3002\u5361\u7f57\u662f\u5730\u65b9\u6027\u539f\u5219\uff0c\u68cd\u5b50\u662f\u963f\u59c6\u8fbe\u5c14&#39\uff1b\u8fd9\u662f\u6cd5\u5f8b\u3002\u5c40\u90e8\u6027\u539f\u5219\u8ba4\u4e3a\u7a0b\u5e8f\u503e\u5411\u4e8e\u5c06\u5b83\u4eec\u7684\u5185\u5b58\u5f15\u7528\u805a\u96c6\u5728\u4e00\u8d77\u3002\u4e00\u6b21\u5f15\u7528\u7684\u5185\u5b58\u4f4d\u7f6e\u53ef\u80fd\u4f1a\u518d\u6b21\u88ab\u5f15\u7528\uff1a\u65f6\u95f4\u4f4d\u7f6e\u3002\u53c2\u8003\u4f4d\u7f6e\u9644\u8fd1\u7684\u8bb0\u5fc6\u4f4d\u7f6e\u5f88\u53ef\u80fd\u5f88\u5feb\u5c31\u4f1a\u88ab\u5f15\u7528\uff1a\u7a7a\u95f4\u6027\u3002\u963f\u59c6\u8fbe\u5c14&#39\uff1bs Law\u8868\u793a\uff0c\u4f7f\u7528\u901f\u5ea6\u66f4\u5feb\u7684\u7ec4\u4ef6\u6240\u83b7\u5f97\u7684\u6027\u80fd\u6539\u5584\u53d7\u5230\u4f7f\u7528\u901f\u5ea6\u66f4\u5feb\u7ec4\u4ef6\u7684\u65f6\u95f4\u7684\u9650\u5236\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cCPU\u548c\u7f13\u5b58\u662f\u5feb\u901f\u7ec4\u4ef6\uff0c\u800c\u5185\u5b58\u5219\u662f\u7f13\u6162\u7684\u3002\n\u5982\u679c\u60a8\u7684\u7a0b\u5e8f\u9075\u5faa\u5c40\u90e8\u6027\u539f\u5219\uff0c\u5b83\u5c06\u53d7\u76ca\u4e8e\u5feb\u901f\u7f13\u5b58\u5e76\u4ee5\u5904\u7406\u5668\u901f\u5ea6\u8fd0\u884c\u3002\u5982\u679c\u6ca1\u6709&#39\uff1bt\u3001 \u5b83\u5bf9\u963f\u59c6\u8fbe\u5c14\u548c#39\u8d1f\u8d23\uff1bs\u5b9a\u5f8b\u5e76\u4ee5\u5185\u5b58\u901f\u5ea6\u8fd0\u884c\u3002\u547d\u4e2d\u7387\u5fc5\u987b\u975e\u5e38\u9ad8\uff0c\u6bd4\u5982\u8bf498%\uff0c\u7136\u540e\u5904\u7406\u5668\u901f\u5ea6\u624d\u80fd\u663e\u8457\u589e\u52a0\u3002\n\u963f\u59c6\u8fbe\u5c14\u548c#39\uff1bs\u5b9a\u5f8b\u5bf9\u591a\u5904\u7406\u5668\u6709\u7279\u6b8a\u60c5\u51b5\u60e9\u7f5a[Schimmel94]\u3002\u5728\u591a\u5904\u7406\u5668\u4e0a\u8fdb\u884c\u6296\u52a8\u4f1a\u964d\u4f4e\u6240\u6709\u5904\u7406\u5668\u7684\u901f\u5ea6\u3002\u5b83\u4eec\u5404\u81ea\u7b49\u5f85\u5bf9\u65b9\u7b49\u5f85\u5185\u5b58\uff0c\u800c\u591a\u5904\u7406\u5668\u63d0\u4f9b\u7684\u5185\u5b58\u5219\u76f8\u53cd\u3002\u9075\u5b88\u591a\u5904\u7406\u5668\u7684\u5c40\u90e8\u6027\u539f\u5219\uff0c\u4f46\u4e0d\u9075\u5b88\u8f6f\u4ef6\u5171\u4eab\u7684\u539f\u5219\uff0c\u4e0d\u662f\u5417&#39\uff1b\u8fd9\u4e0d\u4ec5\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u4e5f\u662f\u4e00\u79cd\u5fc5\u9700\u54c1\u3002\n\u7f13\u5b58\u7f16\u7a0b\u98ce\u683c\u7684\u76ee\u6807\u662f\u589e\u52a0\u672c\u5730\u6027\u3002\u4e86\u89e3\u7f13\u5b58\u7684\u7ed3\u6784\u548c\u884c\u4e3a\u5f88\u91cd\u8981\uff0c\u4f46\u66f4\u91cd\u8981\u7684\u662f\u4e86\u89e3\u8981\u5229\u7528\u7684\u57fa\u672c\u5c5e\u6027\u548c\u8981\u907f\u514d\u7684\u6700\u574f\u60c5\u51b5\u3002\u672c\u6587\u5c06\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u6458\u8981\u5c06\u63d0\u4f9b\u6307\u5bfc\u3002\n\u4f5c\u4e3a\u4e00\u4e2a\u8fd0\u884c\u793a\u4f8b\uff0c\u6211\u5c06\u7814\u7a76Linux[Maxwell99]\uff0c\u5c24\u5176\u662f\u8c03\u5ea6\u7a0b\u5e8f\u3002\u5176\u60f3\u6cd5\u662f\u7a0d\u5fae\u4fee\u6539\u6570\u636e\u7ed3\u6784\u548c\u4ee3\u7801\uff0c\u5c1d\u8bd5\u66f4\u6709\u6548\u5730\u4f7f\u7528\u7f13\u5b58\u3002\u5e0c\u671b\u6211\u80fd\u5b9e\u73b0\u4e24\u4e2a\u76ee\u6807\uff1a\u4e00\u4e2a\u5b9e\u7528\u7684\u7f13\u5b58\u6559\u7a0b\u548c\u4e00\u4e9bLinux\u6027\u80fd\u6539\u8fdb\u3002\n\u6211\u5c06\u4e3b\u8981\u4f7f\u7528circa 1998 350 MHz Deschutes Pentium II\u7cfb\u7edf\u4f5c\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u800c\u4e0d\u662f\u4e00\u822c\u6027\u5730\u8ba8\u8bba\u9ad8\u901f\u7f13\u5b58\u7cfb\u7edf\u3002\u5b83\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\n\u5b58\u50a8\u5927\u5c0f\u5ef6\u8fdf\u6ce8\u91ca-------------------------------------------------------------------\u5bc4\u5b58\u566832\u5b57\u82823ns\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u6587\u4ef6L1 32K 6ns\u7247\u4e0a\uff0c\u534a\u5954\u817eII\u65f6\u949f\u901f\u7387L2 256K 57 ns\u7247\u5916\uff0c\u5728[Intel99a]\u5c01\u88c5\u5185\u5b5864 MB 162 ns 100 MHz SDRAM\u3001\u5355\u94f6\u884c\u78c1\u76d810GB 9ms DMA IDE\u7f51\u7edc\u4e0a\uff0c56K PPP\n\u8fd9\u4e9b\u6570\u5b57\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002CPU\u6027\u80fd\u6bcf\u5e74\u63d0\u9ad8\u7ea655%\uff0c\u5185\u5b58\u6bcf\u5e74\u63d0\u9ad8\u7ea67%\u3002\u5185\u5b58\u5927\u3001\u6210\u672c\u4f4e\u3001\u901f\u5ea6\u6162\uff0c\u800c\u7f13\u5b58\u5c0f\u3001\u901f\u5ea6\u5feb\u3001\u6210\u672c\u9ad8\u3002\u53cc\u6570\u636e\u901f\u7387SDRAM\u548cRambus\uff08\u5982\u679c\u53ef\u7528\uff09\u5c06\u6539\u5584\u5185\u5b58\u5e26\u5bbd\uff0c\u4f46\u4e0d\u4f1a\u6539\u5584\u5ef6\u8fdf\u3002\u8fd9\u4e9b\u6539\u8fdb\u5c06\u6709\u52a9\u4e8e\u591a\u5a92\u4f53\u7b49\u66f4\u5177\u53ef\u9884\u6d4b\u6027\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cdLinux\u7b49\u53ef\u9884\u6d4b\u6027\u8f83\u5dee\u7684\u7a0b\u5e8f\u3002\n\u9996\u5148\uff0c\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u7f13\u5b58\u3002\u7f13\u5b58\u5728\u5927\u5c0f\u548c\u901f\u5ea6\u65b9\u9762\u90fd\u4e0e\u5b58\u50a8\u5c42\u6b21\u7ed3\u6784\u76f8\u5339\u914d\u3002\u7f13\u5b58\u7ebf\u672a\u547d\u4e2d\u3001\u9875\u9762\u9519\u8bef\u548cHTTP\u8bf7\u6c42\u5728\u8fd9\u4e2a\u5c42\u6b21\u7ed3\u6784\u7684\u4e0d\u540c\u7ea7\u522b\u4e0a\u662f\u76f8\u540c\u7684\u3002\u5f53Squid\u4ee3\u7406\u6ca1\u6709&#39\uff1b\u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\u5bf9\u8c61\uff0c\u5b83\u4f1a\u5c06HTTP\u8bf7\u6c42\u8f6c\u53d1\u5230\u539f\u59cb\u670d\u52a1\u5668\u3002\u5f53CPU\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u662f&#39\uff1bt\u5728\u5185\u5b58\u4e2d\uff0c\u51fa\u73b0\u9875\u9762\u9519\u8bef\uff0c\u4ece\u78c1\u76d8\u8bfb\u53d6\u9875\u9762\u3002\u5f53CPU\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u662f&#39\uff1bt\u5728\u7f13\u5b58\u4e2d\uff0c\u5305\u542b\u7684\u7f13\u5b58\u7ebf\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u3002LRU\u3001\u5de5\u4f5c\u96c6\u3001\u5173\u8054\u6027\u3001\u4e00\u81f4\u6027\u3001\u54c8\u5e0c\u3001\u9884\u53d6\u90fd\u662f\u5b58\u50a8\u5c42\u6b21\u7ed3\u6784\u7684\u6bcf\u4e00\u5c42\u4e2d\u4f7f\u7528\u7684\u6280\u672f\u548c\u672f\u8bed\u3002\n\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c42\u6b21\u7ed3\u6784\u4e2d\u4e00\u4e2a\u8f83\u5c0f\u7684\u8f83\u5feb\u7ea7\u522b\u90fd\u6709\u53e6\u4e00\u4e2a\u8f83\u5927\u7684\u8f83\u6162\u7ea7\u522b\u4f5c\u4e3a\u540e\u76fe\u3002\u5982\u679c\u6027\u80fd\u53d7\u5230\u8fc7\u5ea6\u4f7f\u7528\u8f83\u6162\u7ea7\u522b\u7684\u9650\u5236\uff0c\u5219\u6839\u636eAmdahl\u548c#39\uff1b\u6839\u636es\u5b9a\u5f8b\uff0c\u53ea\u9700\u52a0\u5feb\u901f\u5ea6\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5fae\u5c0f\u7684\u6539\u8fdb\u3002\n\u5173\u4e8e\u7f13\u5b58[Handy98]\uff0c\u6700\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\u7f13\u5b58\u7ebf\u3002\u901a\u5e38\uff0c\u7f13\u5b58\u7ebf\u7684\u957f\u5ea6\u4e3a32\u5b57\u8282\uff0c\u5e76\u4e0e32\u5b57\u8282\u7684\u504f\u79fb\u91cf\u5bf9\u9f50\u3002\u9996\u5148\uff0c\u5c06\u5185\u5b58\u5757amemory line\u52a0\u8f7d\u5230\u7f13\u5b58\u7ebf\u4e2d\u3002\u8fd9\u4e2a\u4ee3\u4ef7\u662f\u7f13\u5b58\u4e22\u5931\uff0c\u5373\u5185\u5b58\u5ef6\u8fdf\u3002\u7136\u540e\uff0c\u52a0\u8f7d\u540e\uff0c\u53ea\u8981\u7f13\u5b58\u7ebf\u4e2d\u7684\u5b57\u8282\u4ecd\u5728\u7f13\u5b58\u4e2d\uff0c\u5c31\u53ef\u4ee5\u5f15\u7528\u5b83\uff0c\u800c\u4e0d\u4f1a\u53d7\u5230\u60e9\u7f5a\u3002\u5982\u679c\u7f13\u5b58\u7ebf\u4e0d\u662f&#39\uff1b\u5f53\u9700\u8981\u52a0\u8f7d\u53e6\u4e00\u4e2a\u5185\u5b58\u884c\u65f6\uff0c\u5b83\u6700\u7ec8\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u4fee\u6539\u4e86\u7f13\u5b58\u7ebf\uff0c\u5219\u9700\u8981\u5148\u5199\u5165\u7f13\u5b58\u7ebf\uff0c\u7136\u540e\u624d\u80fd\u5220\u9664\u7f13\u5b58\u7ebf\u3002\n\u8fd9\u662f\u6700\u7b80\u5355\u4e5f\u662f\u6700\u91cd\u8981\u7684\u7f13\u5b58\u89c6\u56fe\u3002\u5b83\u7684\u6559\u8bad\u6709\u4e24\u4e2a\uff1a\u5c06\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u636e\u6253\u5305\u5230\u7f13\u5b58\u7ebf\u4e2d\uff0c\u5e76\u4f7f\u7528\u5c3d\u53ef\u80fd\u5c11\u7684\u7f13\u5b58\u7ebf\u3002\u672a\u6765\u5185\u5b58\u5e26\u5bbd\u7684\u589e\u52a0\uff08DDR\u548cRambus\uff09\u5c06\u5956\u52b1\u8fd9\u79cd\u505a\u6cd5\u3002\u7f13\u5b58\u66f4\u590d\u6742\u7684\u7279\u6027\uff0c\u5373\u7ed3\u6784\u548c\u884c\u4e3a\uff0c\u5bf9\u4e8e\u7406\u89e3\u548c\u907f\u514d\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u7f13\u5b58\u884c\u4e3a\uff1a\u6296\u52a8\u975e\u5e38\u91cd\u8981\u3002\n\u7ade\u4e89\u548c\u5171\u4eab\u7f13\u5b58\u7ebf\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u76f4\u5230apoint\u6210\u4e3a\u4e00\u4ef6\u574f\u4e8b\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5feb\u901f\u7f13\u5b58\u5c06\u5177\u6709\u8f83\u9ad8\u7684\u7f13\u5b58\u547d\u4e2d\u7387\uff0c\u5e76\u4e14\u6027\u80fd\u4e0d\u53d7\u5185\u5b58\u901f\u5ea6\u7684\u9650\u5236\u3002\u4f46\u662f\uff0c\u5f53\u7f13\u5b58\u7ebf\u592a\u5c11\u800c\u7ade\u4e89\u592a\u6fc0\u70c8\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u4e00\u4ef6\u975e\u5e38\u7cdf\u7cd5\u7684\u4e8b\u60c5\uff0c\u5373\u6296\u52a8\u3002\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u6570\u636e\u7ed3\u6784\u7684\u6700\u574f\u60c5\u51b5\u4e0b\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5f53\u524d\u7684\u5206\u6790\u5de5\u5177\u5173\u6ce8\u7684\u662f\u6307\u4ee4\u800c\u4e0d\u662f\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5458\u5fc5\u987b\u4e86\u89e3\u6570\u636e\u7ed3\u6784\u7684\u6700\u574f\u60c5\u51b5\uff0c\u5e76\u907f\u514d\u5b83\u4eec\u3002\u67e5\u627e\u70ed\u70b9\u7684\u6709\u7528\u5de5\u5177\u662fcacheprof[Seward]\u3002\n\u5954\u817eII[Shanley97]32K\u4e00\u7ea7\u7f13\u5b58\u75311024\u676132\u5b57\u8282\u7f13\u5b58\u7ebf\u7ec4\u6210\uff0c\u8fd9\u4e9b\u7f13\u5b58\u7ebf\u88ab\u5212\u5206\u4e3a512\u884c\u7f13\u5b58\u7684\u6307\u4ee4\u548c\u6570\u636e\u5e93\u3002\u5b83\u4f7f\u7528\u989c\u8272\u4f4d5-11\u7d22\u5f15\u6210\u4e00\u7ec4\u7f13\u5b58\u7ebf\u3002\u5e76\u884c\u5730\uff0c\u5b83\u6bd4\u8f83\u7d22\u5f15\u96c6\u4e2d\u6bcf\u4e2a\u7f13\u5b58\u7ebf\u7684\u6807\u8bb0\u4f4d12-31\uff0812-35\u4e0ePentium III\u7269\u7406\u5730\u5740\u6269\u5c55\uff09\u3002L1\u4f7f\u75284\u8def\u96c6\u5408\u5173\u8054\u6620\u5c04\uff0c\u5c06512\u884c\u5212\u5206\u4e3a128\u7ec44\u6761\u7f13\u5b58\u7ebf\u3002\n\u8fd9\u4e9b\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u6700\u8fd1\u4f7f\u7528\u6700\u5c11\u7684\uff08LRU\uff09\u5217\u8868\u3002\u5982\u679c\u6709\u5339\u914d\u9879\uff0c\u5219\u4f7f\u7528\u5339\u914d\u7684\u7f13\u5b58\u7ebf\uff0c\u5e76\u5c06\u5176\u79fb\u52a8\u5230\u5217\u8868\u7684\u524d\u9762\u3002\u5982\u679c\u6ca1\u6709&#39\uff1b\u5982\u679c\u5339\u914d\uff0c\u5219\u4ece\u4e8c\u7ea7\u83b7\u53d6\u6570\u636e\uff0c\u66ff\u6362\u5217\u8868\u672b\u5c3e\u7684\u7f13\u5b58\u7ebf\uff0c\u5e76\u5c06\u65b0\u6761\u76ee\u653e\u5728\u5217\u8868\u7684\u524d\u9762\u3002\n\u540c\u4e00\u989c\u8272\u7684\u4e24\u6761\u5185\u5b58\u7ebf\u7ade\u4e89\u540c\u4e00\u7ec44\u6761\u7f13\u5b58\u7ebf\u3002\u5982\u679c\u5b83\u4eec\u7684\u989c\u8272\u4f4d\uff085-11\uff09\u76f8\u540c\uff0c\u5219\u5b83\u4eec\u7684\u989c\u8272\u4e0d\u76f8\u540c\u3002\u6216\u8005\uff0c\u5982\u679c\u5b83\u4eec\u7684\u8863\u670d\u76f8\u5dee4096:2^\uff087\u4e2a\u989c\u8272\u4f4d+5\u4e2a\u504f\u79fb\u4f4d\uff09\u7684\u500d\u6570\uff0c\u5219\u5b83\u4eec\u7684\u989c\u8272\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u5730\u574064\u548c12352\u7684\u5dee\u503c\u4e3a12288\uff0c\u53733*4096\u3002\u56e0\u6b64\uff0c64\u548c12352\u7ade\u4e89\u603b\u51714\u6761\u4e00\u7ea7\u7f13\u5b58\u7ebf\u3002\u4f46\u662f64\u548c12384\u7684\u5dee\u503c\u662f12320\uff0c\u4e0d\u662f4096\u7684\u500d\u6570\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0d&#39\uff1bt\u5bf9\u76f8\u540c\u7684\u4e00\u7ea7\u7f13\u5b58\u7ebf\u8fdb\u884c\u8865\u507f\u3002\n\u6307\u4ee4\u4e5f\u88ab\u7f13\u5b58\u3002\u5954\u817eII\u4e00\u7ea7\u7f13\u5b58\u662f\u54c8\u4f5b\uff08Harvard\uff09\u6216\u5206\u5272\u6307\u4ee4/\u6570\u636e\u7f13\u5b58\u3002\u8fd9\u610f\u5473\u7740\u6307\u4ee4\u548c\u6570\u636e\u6c38\u8fdc\u4e0d\u4f1a\u7ade\u4e89\u76f8\u540c\u7684\u4e00\u7ea7\u7f13\u5b58\u7ebf\u3002L2\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u7f13\u5b58\u3002\u7edf\u4e00\u610f\u5473\u7740\u53ea\u6709\u4e00\u4e2a\u7f13\u5b58\u5e93\uff0c\u6307\u4ee4\u548c\u6570\u636e\u7ade\u4e89\u7f13\u5b58\u7ebf\u3002\nL2\u4e0eL1\u76f8\u4f3c\uff0c\u53ea\u662f\u66f4\u5927\u3001\u901f\u5ea6\u66f4\u6162\u3002\u6211\u7684\u5954\u817eII\u4e0a\u7684\u8054\u673a\u5305256K\u4e8c\u7ea7\u7f13\u5b58\u67098192\u6761\u7f13\u5b58\u7ebf\u3002\u5b83\u4e5f\u662f4\u8def\u96c6\u5173\u8054\u7684\uff0c\u4f46\u662f\u7edf\u4e00\u7684\u3002\u6709\u5954\u817eII&#39\uff1b\u4f7f\u7528512K ofL2\u5c06\u96c6\u5408\u5927\u5c0f\u589e\u52a0\u52308\u3002\u8fd8\u6709PIII&#39\uff1b\u5177\u6709\u9ad8\u8fbe2MB\u7684L2\u7684s\u3002\u5982\u679c\u4e8c\u7ea7\u7f13\u5b58\u7ebf\u672a\u547d\u4e2d\uff0c\u5c06\u4ece\u5185\u5b58\u4e2d\u63d0\u53d6\u7f13\u5b58\u7ebf\u3002\u5982\u679c\u4e24\u6761\u5185\u5b58\u7ebf\u76f8\u5dee64K:2^\uff0811\u4e2a\u7f13\u5b58\u8272\u4f4d+5\u4e2a\u504f\u79fb\u4f4d\uff09\u7684\u500d\u6570\uff0c\u5219\u5b83\u4eec\u5c06\u7ade\u4e89\u76f8\u540c\u7684L2cache\u7ebf\u3002\n\u6211\u4eec\u5c06\u4ece\u7b80\u5355\u7684\u4e8b\u60c5\u5f00\u59cb\u3002\u6700\u597d\u662f\u628a\u6bcf\u4ef6\u4e8b\u90fd\u548c\u4e00\u4e2a\u957f\u5355\u8bcd\u7684\u8fb9\u754c\u5bf9\u9f50\u3002Linux\u662f\u7528gcc\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u5e76\u4e14\u4ed4\u7ec6\u7814\u7a76\u4e86gcc\u6807\u51c6\u6587\u6863&#34\uff1b\u4f7f\u7528\u548c\u79fb\u690dGNU CC&#34\uff1b[Stallman 00]\u56e0\u6b64\u662f\u5fc5\u8981\u7684\uff1a\u6ca1\u6709\u4eba\u50cfRichardStallman\u90a3\u6837\u62e5\u62b1\u548c\u5ef6\u4f38\u3002gcc\u5bf9\u667a\u80fd\u81ea\u52a8\u5bf9\u9f50\u7684\u7ed3\u6784\u5b57\u6bb5\u5bf9\u9f50\u7279\u522b\u6709\u7528\u3002ANSI C\u6807\u51c6\u5141\u8bb8\u6839\u636e\u5b9e\u65bd\u60c5\u51b5\u8fdb\u884c\u5305\u88c5\u6216\u586b\u5145\u3002\ngcc\u81ea\u52a8\u5c06d_Recen\u4e0e\u957f\u8fb9\u754c\u5bf9\u9f50\u3002\u8fd9\u9002\u7528\u4e8e\u65e0\u7b26\u53f7short\uff0c\u4f46\u5bf9\u4e8ex86\u4e0a\u7684short\uff0c\u7f16\u8bd1\u5668\u5fc5\u987b\u63d2\u5165\u7b26\u53f7\u6269\u5c55\u6307\u4ee4\u3002\u5982\u679c\u4f7f\u7528\u7684\u662fSaveSaveStEdStudio\uff0c\u8bf7\u8003\u8651\u4f7f\u7528\u65e0\u7b26\u53f7\u77ed\u3002\u4f8b\u5982\uff0c\u5728&lt\uff1blinux/mm\u3002h&gt\uff1b\u5c06vm_avl_height\u5b57\u6bb5\u66f4\u6539\u4e3aunsignedshort\u53ef\u4ee5\u4e3a\u5178\u578b\u6784\u5efa\u8282\u770132\u5b57\u8282\u7684\u6307\u4ee4\u3002\u5b83\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2aint\u3002\n\u5b57\u7b26\u4e32\u4e5f\u5e94\u8be5\u5bf9\u9f50\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6e90\u548c\u76ee\u6807\u90fd\u662f\u957f\u5b57\u5bf9\u9f50\u7684\uff0c\u5219strncmp\uff08\uff09\u53ef\u4ee5\u4e00\u6b21\u6bd4\u8f83\u4e24\u4e2a\u957f\u5b57\uff0c\u5373\u5ec9\u4ef7\u7684SIMD\u3002egcs2\u7684x86\u4ee3\u7801\u751f\u6210\u5668\u300295.2\u6709\u4e00\u4e2a\u4e0d\u9519\u7684\u5c0fbug\uff0c\u5b83\u4e0d&#39\uff1bt ALL\u5bf9\u9f50\u77ed\u5b57\u7b26\u4e32\u5e76\u5c06\u957f\u5b57\u7b26\u4e32\u4e0e\u7f13\u5b58\u7ebf\u5bf9\u9f50\uff1a\nchar*short_string=&#34\uff1b\u77ed\u4e32&#34\uff1b\uff1b\u5b57\u7b26*\u957f\u5b57\u7b26\u4e32=&#34\uff1ba_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_\u5723\u6212\u6307&#34\u3002LC0:\u3002\u5b57\u7b26\u4e32&#34\uff1b\u4e00\u6839\u77ed\u7ebf&#34\uff1b//\u672a\u5bf9\u9f50\u7684\u5b57\u7b26\u4e32\u3002\u3002\u3002\u00a0\u00a0\u00a0 .\u5bf9\u9f5032\u3002LC1://\u4e0e\u7f13\u5b58\u7ebf\u5bf9\u9f50\u3002\u5b57\u7b26\u4e32&#34\uff1ba_long_long_long_long_long_long_long_long_long_long_long_\u5723\u6212\u6307&#34\uff1b\n\u8fd9\u91cc\u9700\u8981\u7684\u662f\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0e\u957f\u5355\u8bcd\u5bf9\u9f50\u3002\u5bf9\u9f504\u3002\u8fd9\u6837\u4f7f\u7528\u7684\u7a7a\u95f4\u66f4\u5c11\uff0c\u5bf9\u9f50\u6548\u679c\u66f4\u597d\u3002\u5728\u975e\u5178\u578bLinux\u6784\u5efa\u4e2d\uff0c\u8fd9\u8282\u7701\u4e86\u5927\u7ea68K\u3002\n\u6570\u7ec4\u548c\u7ed3\u6784\u5217\u8868\u63d0\u4f9b\u4e86\u7f13\u5b58\u5927\u91cf\u6570\u636e\u7684\u673a\u4f1a\u3002\u5982\u679c\u9891\u7e41\u8bbf\u95ee\u7684\u5b57\u6bb5\u88ab\u6536\u96c6\u5230\u5355\u4e2a\u7f13\u5b58\u7ebf\u4e2d\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5355\u5185\u5b58\u8bbf\u95ee\u52a0\u8f7d\u5b83\u4eec\u3002\u8fd9\u53ef\u4ee5\u51cf\u5c11\u5ef6\u8fdf\u548c\u7f13\u5b58\u5360\u7528\u3002\u7136\u800c\uff0c\u5982\u679c\u8bbf\u95ee\u5927\u91cf\u6570\u636e\uff0c\u5b83\u4e5f\u4f1a\u589e\u52a0\u7f13\u5b58\u5360\u7528\u7a7a\u95f4\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5305\u88c5\u6548\u7387\u548c\u6c61\u67d3\u66f4\u4e3a\u91cd\u8981\u3002\n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u9635\u5217\uff0c\u9635\u5217\u7684\u5e95\u90e8\u5e94\u8be5\u4e0e\u7f13\u5b58\u5bf9\u9f50\u3002\u7ed3\u6784\u7684\u5927\u5c0f\u5fc5\u987b\u662f\u7f13\u5b58\u7ebf\u5927\u5c0f\u7684\u6574\u6570\u500d\u6216\u6574\u6570\u9664\u6570\u3002\u5982\u679c\u8fd9\u4e9b\u6761\u4ef6\u4fdd\u6301\u4e0d\u53d8\uff0c\u90a3\u4e48\u901a\u8fc7\u5f52\u7eb3\uff0c\u7f13\u5b58\u7ebf\u9635\u5217\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c06\u5bf9\u9f50\u6216\u538b\u7f29\u3002\u8fde\u63a5\u7ed3\u6784\u5728\u5bf9\u9f50\u65b9\u9762\u7c7b\u4f3c\uff0c\u4f46don&#39\uff1b\u6709\u5c3a\u5bf8\u9650\u5236\u3002\nmem_map_t\u7c7b\u578b\u7684\u7ed3\u6784\u6570\u7ec4\u88abpageallocator\u7528\u4f5c\u8f6f\u4ef6\u9875\u8868\uff1a\n/**\u5c1d\u8bd5\u5c06\u6700\u5e38\u8bbf\u95ee\u7684\u5b57\u6bb5\u4fdd\u5b58\u5728\u5355\u4e2a\u7f13\u5b58\u7ebf*\u4e2d\uff0816\u5b57\u8282\u6216\u66f4\u5927\uff09\u3002\u8fd9\u79cd\u6392\u5e8f\u572832\u4f4d\u5904\u7406\u5668\u4e0a\u5e94\u8be5\u7279\u522b\u6709\u76ca\u7c7b\u578b\u5b9a\u4e49\u7ed3\u6784\u9875{//from linux-2.4.0-test2 structlist_head list\uff1b//2,4 struct address_space*\u6620\u5c04\uff1b//1,2 unsignedlong index\uff1b//1,2 structpage*next_hash\uff1b//1,2 atomic_t\u8ba1\u6570\uff1b//1,1+1\u4e2a\u65e0\u7b26\u53f7\u957f\u6807\u5fd7\uff1b//1,2\u7ed3\u6784\u5217\u8868\\u\u5934lru\uff1b//2,4\u7b49\u5f85\u961f\u5217\u5934\u7b49\u5f85\uff1b//5,10\u7ed3\u6784\u9875**pprev_\u6563\u5217\uff1b//1,2 struct buffer_head*buffers\uff1b//1,2\u4e2a\u65e0\u7b26\u53f7\u957f\u865a\u62df\uff1b//1,2 struct zone_struct*zone\uff1b//1,2}mem_map_t\uff1b//18*4==72 x86//36*4==144 Alpha\n\u572832\u4f4d\u5954\u817e\u4e0a\uff0cmem_map_t\u7684\u5927\u5c0f\u4e3a72\u5b57\u8282\u3002\u57282.2.16\u4e2d\u662f40\u5b57\u8282\u3002\u7531\u4e8e\u9635\u5217\u5206\u914d\u4ee3\u7801\u4f7f\u7528SSIZEOF\uff08mem_map___t\uff09\u6765\u5bf9\u9f50\u9635\u5217\uff0c\u56e0\u6b64\u57fa\u5ea7\u5bf9\u9f50\u4e0d\u6b63\u786e\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0cMAP_ALIGN\uff08\uff09\u90fd\u53ef\u4ee5\u66ff\u6362\u4e3aL1_CACHE_ALIGN\uff08\uff09\uff0c\u5b83\u4f7f\u7528\u66f4\u7b80\u5355\u7684\u4ee3\u7801\uff1a\n#\u5b9a\u4e49\u6620\u5c04\u5bf9\u9f50\uff08x\uff09\uff08\uff08\uff08x\uff09%sizeof\uff08mem_MAP_t\uff09\uff09=0\uff09\\\uff1f\uff08x\uff09 \uff1a\uff08\uff08x\uff09+sizeof\uff08mem_map_t\uff09-\uff08x\uff09%sizeof\uff08mem_map_t\uff09\uff09\uff09lmem_map=\uff08\u7ed3\u6784\u9875\u9762*\uff09\uff08\u9875\u9762\u504f\u79fb+\u8d34\u56fe\u5bf9\u9f50\uff08\uff08\u65e0\u7b26\u53f7\u957f\uff09lmem_\u8d34\u56fe-\u9875\u9762\u504f\u79fb\uff09#\u5b9a\u4e49\u4e00\u7ea7\u7f13\u5b58\u5bf9\u9f50\uff08x\uff09\uff08\uff08x\uff09+\uff08\u4e00\u7ea7\u7f13\u5b58\u5b57\u8282-1\uff09\uff09\\&amp~\uff08\u4e00\u7ea7\u7f13\u5b58\u5b57\u8282-1\uff09\uff09lmem_\u6620\u5c04=\uff08\u7ed3\u6784\u9875*\uff09\u4e00\u7ea7\u7f13\u5b58\u5bf9\u9f50\uff08\uff08\u65e0\u7b26\u53f7\u957f\uff09lmem_\u6620\u5c04\uff09\uff1b\n\u572864\u4f4dAlpha\u4e0a\uff0clong\u662f8\u5b57\u8282\uff0c\u5e26\u67098\u5b57\u8282\u5bf9\u9f50\uff0csizeof\uff08mem_map__t\uff09\u662f144\u5b57\u8282\u3002flags\u5b57\u6bb5\u6ca1\u6709&#39\uff1bt\u4e0d\u9700\u8981\u662f\u957f\u7684\uff0c\u5b83\u5e94\u8be5\u662f\u4e00\u4e2aint\u3002\u56e0\u4e3a\u539f\u5b50_t\u4e5f\u662f\u4e00\u4e2aint\uff0c\u800c\u4e14\u4e24\u4e2a\u5b57\u6bb5\u76f8\u90bb\uff0c\u6240\u4ee5\u5b83\u4eec\u4f1a\u7ec4\u5408\u6210\u4e00\u4e2a\u957f\u5355\u8bcd\u3002Page wait\u961f\u5217\u5934\u8fc7\u53bb\u662f\u4e00\u4e2a\u6307\u9488\u3002\u5c06\u5176\u66f4\u6539\u56de\u539f\u6765\u7684\u7248\u672c\u5c06\u8282\u7701\u8db3\u591f\u7684\u5185\u5b58\uff0c\u4ee5\u5141\u8bb8\u7f13\u5b58\u5bf9\u9f5032\u4f4d\u548c64\u4f4d\u7248\u672c\u3002\n\u53ef\u4ee5\u9488\u5bf9\u7279\u5b9a\u7684\u5904\u7406\u5668\u8fdb\u884c\u6709\u6761\u4ef6\u7684\u7f16\u8bd1\u3002Linux\u6709\u4e00\u4e2a\u5305\u542b\u6587\u4ef6&lt\uff1basm-i386/\u9ad8\u901f\u7f13\u5b58\u3002h&gt\uff1b\uff0c\u5b9a\u4e49x86\u4f53\u7cfb\u7ed3\u6784\u7cfb\u5217\u7684\u4e00\u7ea7\u7f13\u5b58\u7ebf\u5927\u5c0f\uff0c\u5373\u4e00\u7ea7\u7f13\u5b58\u5b57\u8282\u3002slab\u5206\u914d\u5668[Bonwick94]\u4ece\u5185\u5b58\u9875\u5206\u914d\u5c0f\u5bf9\u8c61\uff0c\u5f53\u5ba2\u6237\u673a\u8bf7\u6c42\u5e26\u6709Lab_HWCACHE_ALIGN\u6807\u5fd7\u7684\u7f13\u5b58\u5bf9\u9f50\u5bf9\u8c61\u65f6\uff0c\u5b83\u4f7f\u75281_CACHE_\u5b57\u8282\u3002\n/**\u5305\u62ec/asm-i386/\u7f13\u5b58\u3002h*/#\u5982\u679cCPU==586 | CPU==686#\u5b9a\u4e49\u4e00\u7ea7\u7f13\u5b58\u5b57\u828232#\u5426\u5219#\u5b9a\u4e49\u4e00\u7ea7\u7f13\u5b58\u5b57\u828216#endif#endif#\n\u5982\u679c\u6709\u4eba\u5f97\u5230\u4e86\u4e00\u4e2a\u4ee5486\u4e3a\u76ee\u6807\u7684\u3001\u7ecf\u8fc7\u4fdd\u5b88\u7f16\u8bd1\u7684Red Hat\u5185\u6838\uff0c\u90a3\u4e48\u5b83\u5c31\u5047\u5b9a\u670916\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\u3002\u8fd9\u5bf9\u96c5\u5178\u4eba\u6765\u8bf4\u4e5f\u662f\u4e00\u4ef6\u597d\u4e8b\u3002\u57282.4\u4e2d\uff0c\u901a\u8fc7\u5728&lt\uff1blinux/autoconf\u3002h&gt\uff1b\u3002\n\u5982\u679c\u5728\u8bbe\u8ba1\u7528\u4e8e\u4fbf\u643a\u8f6f\u4ef6\u7684\u7ed3\u6784\u7684fieldsinside\u65f6\u5fc5\u987b\u5047\u5b9a\u4e00\u4e2a\u7f13\u5b58\u7ebf\u5927\u5c0f\uff0c\u8bf7\u4f7f\u752832\u5b57\u8282\u7f13\u5b58\u7ebf\u3002\u4f8b\u5982\uff0cmem_map_t\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u3002\u8bf7\u6ce8\u610f\uff0c32\u5b57\u8282\u5bf9\u9f50\u7684\u7f13\u5b58\u7ebf\u4e5f\u662f16\u5b57\u8282\u5bf9\u9f50\u7684\u3002PowerPC 601\u540d\u4e49\u4e0a\u6709\u4e00\u4e2a64\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709\u4e24\u4e2a\u8fde\u63a5\u768432\u5b57\u8282\u7f13\u5b58\u7ebf\u3002Sparc64\u6709\u4e00\u4e2a32\u5b57\u8282\u7684L1\u548c\u4e00\u4e2a64\u5b57\u8282\u7684L2\u7f13\u5b58\u7ebf\u3002\u5c06\u6240\u6709\u7cfb\u7edf\u90fd\u89c6\u4e3a\u5177\u670932\u4e2a\u5b57\u8282\u7f13\u5b58\u7ebf\u5e76\u679a\u4e3e\u5f02\u5e38\uff08\u5982\u679c\u6709\uff09\u8981\u5bb9\u6613\u5f97\u591a\u3002Alpha\u548cSparc64\u670932\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\uff0c\u4f46Athlon\u548c\u5b89\u817e\uff08\u8bc1\u660e\u8fd9\u4e00\u89c4\u5219\u7684\u4f8b\u5916\uff09\u670964\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\u3002IBM S/390 G6\u6709\u4e00\u4e2a256K\u7684\u4e00\u7ea7\u7f13\u5b58\uff0c\u5e26\u6709128\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\u3002\n\u5728\u7edd\u5927\u591a\u6570\u5904\u7406\u5668\u4e0a\uff0c32\u5b57\u8282\u7f13\u5b58\u7ebf\u662f\u6b63\u786e\u7684\u9009\u62e9\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u5982\u679c\u572832\u5b57\u8282\u7684\u60c5\u51b5\u4e0b\u89e3\u51b3\u5e76\u907f\u514d\u4e86\u8db3\u8ff9\u548c\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u98a0\u7c38\u573a\u666f\uff0c\u90a3\u4e48\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u5c31\u53ef\u4ee5\u907f\u514d\u5b83\u4eec\u3002\nLinux\u7528\u5206\u914d\u4e86\u4e24\u4e2a4K\u9875\u9762\u7684task_\u7ed3\u6784\u8868\u793a\u6bcf\u4e2a\u8fdb\u7a0b\u3002\u4efb\u52a1\u5217\u8868\u662f\u4efb\u52a1\u7ed3\u6784\u7684\u5217\u8868&#39\uff1bsof\u6240\u6709\u73b0\u6709\u6d41\u7a0b\u3002runqueue\u662f\u4efb\u52a1\u7ed3\u6784\u7684\u5217\u8868&#39\uff1b\u8fd9\u662f\u6240\u6709\u53ef\u8fd0\u884c\u8fdb\u7a0b\u7684\u4e00\u90e8\u5206\u3002\u6bcf\u6b21\u8c03\u5ea6\u7a0b\u5e8f\u9700\u8981\u67e5\u627e\u53e6\u4e00\u4e2a\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b\u65f6\uff0c\u5b83\u90fd\u4f1a\u5728\u6574\u4e2a\u8fd0\u884c\u961f\u5217\u4e2d\u641c\u7d22\u6700\u503c\u5f97\u8fd0\u884c\u7684\u8fdb\u7a0b\u3002\nIBM[Bryant00]\u7684\u4e00\u4e9b\u4eba\u6ce8\u610f\u5230\uff0c\u82e5\u6709\u51e0\u4e2a\u7ebf\u7a0b\uff0c\u8c03\u5ea6\u5360\u7528\u4e86\u76f8\u5f53\u5927\u7684\u53ef\u7528CPU\u65f6\u95f4\u3002\u5728\u4e00\u53f0\u5177\u6709\u6570\u767e\u4e2a\u672c\u5730Java\u7ebf\u7a0b\u7684\u5355\u5904\u7406\u5668\u673a\u5668\u4e0a\uff0c\u4ec5\u8c03\u5ea6\u7a0b\u5e8f\u5c31\u5360\u7528\u4e86\u8d85\u8fc725%\u7684\u53ef\u7528CPU\u3002\u8fd9\u5728sharedmemory SMP\u673a\u5668\u4e0a\u53d8\u5f97\u66f4\u7cdf\uff0c\u56e0\u4e3a\u5185\u5b58\u603b\u7ebf\u4e89\u7528\u589e\u52a0\u3002\u8fd9\u4e0d\u662f&#39\uff1bt\u523b\u5ea6\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8c03\u5ea6\u5668\u4e2d\u7684goodness\uff08\uff09\u4f8b\u7a0b\u5f15\u7528\u4e86task_\u7ed3\u6784\u4e2d\u7684\u51e0\u4e2a\u4e0d\u540c\u7f13\u5b58\u7ebf\u3002\u5728\u91cd\u65b0\u7ec4\u7ec7\u4efb\u52a1\u7ed3\u6784\u4e4b\u540e\uff0cgoodness\uff08\uff09\u73b0\u5728\u53ea\u5f15\u7528\u4e00\u6761\u7f13\u5b58\u7ebf\uff0cCPU\u5468\u671f\u8ba1\u6570\u4ece179\u4e2a\u5468\u671f\u51cf\u5c11\u5230115\u4e2a\u5468\u671f\u3002\u8fd9\u4ecd\u7136\u5f88\u591a\u3002\n\u4e0b\u9762\u662f\u91cd\u8981\u7684\u7f13\u5b58\u7ebf\u3001Linux\u8c03\u5ea6\u5faa\u73af\u548cthegoodness\uff08\uff09\u4f8b\u7a0b\u3002\u8c03\u5ea6\u5668\u5faa\u73af\u904d\u5386entirerunqueue\uff0c\u7528goodness\uff08\uff09\u8ba1\u7b97\u6bcf\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u627e\u5230\u4e0b\u4e00\u4e2a\u8981\u8fd0\u884c\u7684\u6700\u4f73\u8fdb\u7a0b\u3002\n\u7ed3\u6784\u4efb\u52a1{\u2026long counter\uff1b//\u5173\u952e2cd\u7f13\u5b58\u7ebf\u957f\u4f18\u5148\u7ea7\uff1b\u65e0\u7b26\u53f7\u957f\u7b56\u7565\uff1b\u7ed3\u6784mm_struct*mm\uff0c*active_mm\uff1bint\u6709_cpu\uff1bint\u5904\u7406\u5668\uff1b\u7ed3\u6784\u5217\u8868_headrun_lisT//\u53ea\u6709\u7b2c\u4e00\u4e2a\u957f\u5355\u8bcd\u2026}\uff1btmp=\u8fd0\u884c\u961f\u5217\u5934\u3002\u4e0b\u4e00\u4e2awhile\uff08tmp\uff01=&amp\uff1brunqueue_head\uff09{p=list_entry\uff08tmp\uff0cstruct task_struct\uff0crun_list\uff09\uff1bif\uff08can_schedule\uff08p\uff09\uff09{//\u5728\u53e6\u4e00\u4e2aCPU\u4e0a\u8fd0\u884cint weight=goodness\uff08p\uff0cthis_CPU\uff0cprev-&gt\uff1bactive_mm\uff09\uff1bif\uff08weight&gt\uff1bc\uff09c=weight\uff0cnext=p\uff1b}tmp=tmp-&gt\uff1b\u4e0b\u4e00\u6b65\uff1b}#\u5b9a\u4e49\u8fdb\u7a0b\u66f4\u6539\u60e9\u7f5a15//\u5904\u7406\u5668\u5173\u8054\u9759\u6001\u5185\u8054int goodness\uff08struct task_struct*p\uff0cint this_cpu\uff0cstruct mm_struct*this_mm\uff09{int weight\uff1b\u5982\u679c\uff08p-&gt\uff1bpolicy\uff01=SCHED_OTHER\uff09{weight=1000+p-&gt\uff1brt_priority\uff1b//\u5b9e\u65f6\u8fdb\u7a0b\u9000\u51fa\uff1b}\u91cd\u91cf=p-&gt\uff1b\u67dc\u53f0\u5982\u679c\uff08\uff01\u91cd\u91cf\uff09\u6389\u51fa\u6765\uff1b//\u6ca1\u6709\u5269\u4f59\u7684\u91cf\u5b50#ifdef _usmp _; if\uff08p-&gt\uff1b\u5904\u7406\u5668==\u6b64cpu\uff09\u6743\u91cd+=\u7a0b\u5e8f\u66f4\u6539U\u60e9\u7f5a\uff1b//\u5904\u7406\u5668\u5173\u8054\u6027#endif\uff08p-&gt\uff1bmm==this_-mm\uff09//\u76f8\u540c\u7ebf\u7a0b\u7c7b\u6743\u91cd+=1\uff1b//\u7535\u6d41\uff1f\u91cd\u91cf+=p-&gt\uff1b\u4f18\u5148\u4e8b\u9879out\uff1a\u8fd4\u56de\u6743\u91cd\uff1b}\n\u5373\u4f7f\u5bf9\u4e8e\u8d1f\u8f7d\u5f88\u91cd\u7684\u670d\u52a1\u5668\uff0c\u957f\u8fd0\u884c\u961f\u5217\u4e5f\u80af\u5b9a\u4e0d\u662f\u5e38\u89c1\u7684\u60c5\u51b5\u3002\u8fd9\u662f\u56e0\u4e3a\u4e8b\u4ef6\u9a71\u52a8\u7684\u7a0b\u5e8f\u4f7f\u7528poll\uff08\uff09\u8fdb\u884c\u81ea\u6211\u8c03\u5ea6\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cJava\u3001Apache\u548cTUX\u66f4\u559c\u6b22\u7ebf\u7a0b\u5316\u98ce\u683c\u3002\u8bbd\u523a\u7684\u662f\uff0cpoll\uff08\uff09\u4e5f\u5b58\u5728\u53ef\u4f38\u7f29\u6027\u95ee\u9898\uff0c\u5728\u5176\u4ed6Unix\u7cfb\u7edf\u4e0a\u4e5f\u662f\u5982\u6b64[Honeyman 99]\u3002\u6b64\u5916\uff0cLinux 2.4 x86\u5185\u6838\u5c06\u6700\u5927\u7ebf\u7a0b\u6570\u589e\u52a0\u52304000\u4e2a\u4ee5\u4e0a\u3002\n\u5728SMP\u673a\u5668\u4e0a\uff0c\u8fdb\u7a0b\u4e0e\u5b83\u4eec\u8fd0\u884c\u7684\u6700\u540e\u4e00\u4e2aCPU\u5177\u6709\u8c03\u5ea6\u5173\u8054\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u4e00\u4e9b\u5de5\u4f5c\u96c6\u4ecd\u7136\u5728\u672c\u5730\u7f13\u5b58\u4e2d\u3002\u4f46\u662f\u8c03\u5ea6\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5fae\u5999\u7684SMP\u9519\u8bef\u3002\u5f53\u4e00\u4e2aCPU\u5728\u8fd0\u884c\u961f\u5217\u4e0a\u6ca1\u6709\u8fdb\u7a0b\u65f6\uff0c\u8c03\u5ea6\u7a0b\u5e8f\u5c06\u628a\u5b83\u5206\u914d\u7ed9\u4e00\u4e2a\u4e0e\u53e6\u4e00\u4e2aCPU\u6709\u4eb2\u7f18\u5173\u7cfb\u7684\u53ef\u547d\u540d\u8fdb\u7a0b\u3002\u660e\u667a\u7684\u505a\u6cd5\u662f\u9996\u5148\u5411\u8fd0\u884c\u961f\u5217\u4e0a\u7684\u8fdb\u7a0b\u5206\u914d\u66f4\u591a\u91cf\u5b50\uff0c\u4e5f\u8bb8\u662f\u90a3\u4e9b\u4e0eCPU\u6709\u5173\u8054\u7684\u8fdb\u7a0b\u3002\u5373\u4f7f\u8fd9\u6837\uff0c\u7a7a\u95f2\u4e5f\u53ef\u80fd\u66f4\u597d\uff0c\u5c24\u5176\u662f\u5728\u8fd0\u884c\u961f\u5217\u8f83\u77ed\u7684\u60c5\u51b5\u4e0b\u3002\n\u73b0\u4ee3CPU\u79ef\u6781\u5730\u9884\u53d6\u6307\u4ee4\uff0c\u4f46\u6570\u636e\u5462\uff1fCPU\u4e0d&#39\uff1bt\u9884\u53d6\u6570\u636e\u7f13\u5b58\u7ebf\uff0c\u4f46\u77e2\u91cf\u5316\u7f16\u8bd1\u5668\u548c\u7a0b\u5e8f\u53ef\u4ee5\u3002\u6839\u636eCPU\u5bf9\u7f13\u5b58\u7ebf\u7684\u5904\u7406\u91cf\uff0c\u53ef\u80fd\u9700\u8981\u63d0\u524d\u9884\u53d6\u591a\u6761\u7f13\u5b58\u7ebf\u3002\u5982\u679c\u9884\u56de\u8fc1\u63d0\u524d\u4e86\u8db3\u591f\u957f\u7684\u65f6\u95f4\uff0c\u5b83\u5c31\u8d62\u4e86&#39\uff1bt\u5224\u65ad\u7f13\u5b58\u7ebf\u662f\u5426\u5728\u5185\u5b58\u4e2d\uff0c\u800c\u4e0d\u662fL2[Intel99a]\u3002\n\u901a\u5e38\uff0c\u9884\u53d6\u7528\u4e8e\u591a\u5a92\u4f53\u5185\u6838\u548c\u77e9\u9635\u64cd\u4f5c\uff0c\u5176\u4e2d\u9884\u53d6\u5730\u5740\u53ef\u4ee5\u8f7b\u677e\u8ba1\u7b97\u3002\u5728\u6570\u636e\u7ed3\u6784\u4e0a\u8fd0\u884c\u7684\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9884\u53d6\u3002\u9664\u4e86\u9884\u53d6\u5730\u5740\u5c06\u9075\u5faaalink\u800c\u4e0d\u662f\u5730\u5740\u8ba1\u7b97\u4e4b\u5916\uff0c\u5176\u4ed6\u65b9\u6cd5\u4e5f\u9002\u7528\u3002\u6570\u636e\u7ed3\u6784\u7684\u9884\u53d6\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5185\u5b58\u5e26\u5bbd\u7684\u589e\u52a0\u6bd4\u5ef6\u8fdf\u7684\u51cf\u5c11\u66f4\u5feb\u3002\u904d\u5386\u6570\u636e\u7ed3\u6784\u66f4\u5bb9\u6613\u51fa\u73b0\u5ef6\u8fdf\u95ee\u9898\u3002\u901a\u5e38\u53ea\u4f7f\u7528\u7ed3\u6784\u4e2d\u7684\u51e0\u4e2a\u5b57\u6bb5\uff0c\u800c\u4f7f\u7528\u591a\u5a92\u4f53\u65f6\uff0c\u901a\u5e38\u4f1a\u68c0\u67e5\u6bcf\u4e2a\u5b57\u6bb5\u3002\n\u5982\u679c\u4e00\u6761\u9884\u53d6\u6307\u4ee4\u53ef\u4ee5\u5728\u4f7f\u7528\u7f13\u5b58\u7ebf\u4e4b\u524d\u8c03\u5ea620-25\u6b21\u6216SOI\u6307\u4ee4\uff0c\u5219\u53d6\u6570\u53ef\u4ee5\u5b8c\u5168\u91cd\u53e0\u6307\u4ee4\u6267\u884c\u3002\u7cbe\u786e\u7684\u9884\u53d6\u8c03\u5ea6\u8ddd\u79bb\u662f\u5904\u7406\u5668\u548c\u5185\u5b58\u7684\u4e00\u4e2a\u7279\u5f81\u3002\u8d85\u6807\u91cf\u5904\u7406\u5668\u4e00\u6b21\u6267\u884c\u591a\u6761\u6307\u4ee4\u3002\n\u5982\u679c\u7b97\u6cd5\u6b63\u5728\u904d\u5386\u53ef\u80fd\u662finL2\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4f7f\u7528\u7f13\u5b58\u7ebf\u4e4b\u524d\u5b89\u6392\u9884\u53d66-10\u6761\u6307\u4ee4\uff0c\u5219\u53d6\u6570\u53ef\u4ee5\u5b8c\u5168\u4e0e\u6307\u4ee4\u6267\u884c\u91cd\u53e0\u3002\nLinux\u8c03\u5ea6\u7a0b\u5e8f\u5faa\u73af\u662f\u4ece\u4e8c\u7ea7\u7f13\u5b58\u7ebf\u9884\u53d6\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u5019\u9009\u8005\uff0c\u56e0\u4e3agoodness\uff08\uff09\u5f88\u77ed\uff0c\u5728IBMpatch\u4e4b\u540e\uff0c\u5b83\u53ea\u89e6\u53ca\u4e00\u6761\u7f13\u5b58\u7ebf\u3002\n\u8fd9\u662f\u8c03\u5ea6\u7a0b\u5e8f\u7684\u9884\u53d6\u7248\u672c\u3002\u5728goodness\uff08\uff09\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4e0e\u4e8c\u7ea7\u7f13\u5b58\u7ebf\u7684\u9884\u53d6\u91cd\u53e0\u3002\ntmp=\u8fd0\u884c\u961f\u5217\u5934\u3002\u4e0b\u4e00\u4e2awhile\uff08tmp\uff01=&amp\uff1brunqueue_head\uff09{p=list_entry\uff08tmp\uff0cstruct task_struct\uff0crun_list\uff09\uff1btmp=tmp-&gt\uff1bnext\uff1bCacheLine_Prefetch\uff08tmp-&gt\uff1bnext\uff09//movl xx\uff08%ebx\uff09\uff0c%eax if\uff08can_schedule\uff08p\uff09\uff09{int weight=goods\uff08p\uff0cthis_cpu\uff0cprev-&gt\uff1bactive_mm\uff09\uff1bif\uff08weight&gt\uff1bc\uff09c=\u91cd\u91cf\uff0cnext=p\uff1b\u00a0\u00a0\u00a0 } }\n\u534e\u76db\u987f\n......", "note_en": "Cache memories work on the carrot and stick principle. Thecarrot is the Principle of Locality and the stick is Amdahl&#39;s Law.The Principle of Locality says that programs tend to cluster theirmemory references. A memory location referenced once is likely to bereferenced again: temporal locality. A memory location nearby areferenced location is likely to be referenced soon: spatiallocality. And Amdahl&#39;s Law says that the performance improvement tobe gained from using some faster component is limited by the fractionof time the faster component is used. In this case, CPU and cache arefast components and memory is slow.\n If your program adheres to the Principle of Locality, it benefitsfrom fast cache memory and runs at processor speed. If it doesn&#39;t, itis held accountable to Amdahl&#39;s Law and runs at memory speed. Hitrates have to be very high, say 98%, before incremental increases inprocessor speed are even noticeable.\n Amdahl&#39;s Law has a special circumstances penalty for multiprocessors[Schimmel94]. Thrashing on a multiprocessor can slow down all of theprocessors. They each wait for each other waiting for memory and theleverage a multiprocessor offers works in reverse. Adherence to thePrinciple of Locality for multiprocessors, but not to the point ofFalse Sharing, isn&#39;t just a nicety, it is a necessity.\n The object of cache programming style is to increase this locality.It is important to understand the structure and behavior of caches,but it is more important to know the basic properties to takeadvantage of and the worst cases to avoid. This article goes intodetails and the summary provides guidelines.\n   As a running example, I am going to look at Linux [Maxwell99]and at the scheduler in particular. The idea is to modify datastructures and code just slightly, trying to use the cache moreeffectively. Hopefully I will achieve two goals: a practical tutorialon caches and some performance improvements for Linux.\n Instead of talking about cache memory systems in general, I willmostly use my circa 1998 350 MHz Deschutes Pentium II system as aspecific example. It has these characteristics:\n  Storage\u00a0\u00a0\u00a0 Size\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Latency\u00a0\u00a0\u00a0 Notes ----------------------------------------- ---------------------------- register\u00a0\u00a0 32 bytes\u00a0\u00a0 3ns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 register renaming file L1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 32K\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 6ns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 on-chip, half Pentium-II clockrate L2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 256K\u00a0\u00a0\u00a0\u00a0\u00a0 57 ns\u00a0\u00a0\u00a0\u00a0\u00a0off-chip, on-package [Intel99a] memory\u00a0\u00a0\u00a0\u00a0 64 MB\u00a0\u00a0\u00a0\u00a0\u00a0162 ns\u00a0\u00a0\u00a0\u00a0 100 MHz SDRAM, single bank disk\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 10GB\u00a0\u00a0\u00a0\u00a0\u00a0 9ms\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 DMA IDE network\u00a0\u00a0\u00a0 whatever\u00a0\u00a0 whenever\u00a0\u00a056K PPP\n   These numbers are subject to change. CPU performance improves atabout 55%/year and memory improves at about 7%/year. Memory is big,cheap and slow while cache is small, fast and expensive. Double DataRate SDRAM and Rambus, when available, will improve memory bandwidthbut not latency. These improvements will help more predictableapplications like multimedia but not less predictable programs suchas Linux.\n   First, a few words about caches in general. Cache memory fitsinto the storage hierarchy in terms of both size and speed. Cacheline misses, page faults and HTTP requests are the same thing atdifferent levels of this hierarchy. When a Squid proxy doesn&#39;t havean object in its cache, it forwards the HTTP request to the originserver. When a CPU requests an address which isn&#39;t in memory, a pagefault occurs and the page is read from disk. When a CPU requests anaddress which isn&#39;t in cache, the containing cache line is read frommemory. LRU, working set, associative, coherency, hashing,prefetching are all techniques and terminology which are used in eachlevel of the storage hierarchy.\n In each case, one smaller faster level in the hierarchy is backed byanother bigger slower level. If performance is limited by excessiveuse of the slower level, then according to Amdahl&#39;s Law, littleimprovement can be made by just making the faster level faster.\n With respect to cache memory [Handy98], the most important thing tounderstand is the cache line. Typically a cache line is 32 bytes longand it is aligned to a 32 byte offset. First a block of memory, amemory line, is loaded into a cache line. This cost is a cache miss,the latency of memory. Then, after loading, bytes within a cache linecan be referenced without penalty as long as it remains in the cache.If the cache line isn&#39;t used it will be dropped eventually whenanother memory line needs to be loaded. If the cache line ismodified, it will need to be written before it is dropped.\n This is the simplest and most important view of a cache memory. Itslesson is two-fold: pack as much into a cache line as possible anduse as few cache lines as possible. Future memory bandwidth increases(DDR and Rambus) will reward this practice. The more complexcharacteristics of cache, the structure and behavior, are importantfor understanding and avoiding worst case cache behavior:thrashing.\n Competing for and sharing of cache lines is a good thing, up to apoint, when it becomes a bad thing. Ideally a fast cache will have ahigh cache hit rate and the performance will not be bound to thespeed of the memory. But a really bad thing, thrashing, happens whenthere is too much competition for too few cache lines. This happensin worst case scenarios for data structures. Unfortunately thecurrent profiling tools look at the instructions rather than data.This means that a programmer must be aware of worst case scenariosfor data structures and avoid them. A useful tool for finding a hotspot is cacheprof [Seward].\n   The Pentium II [Shanley97] 32K L1 cache consists of 1024 32 bytecache lines partitioned into instruction and data banks of 512 lineseach. It uses the color bits 5-11 to index into an array of sets ofcache lines. In parallel, it compares the tag bits 12-31 (12-35 withPentium III Physical Address Extension) for each of the cache linesin the indexed set. L1 uses a 4-way set associative mapping whichdivides the 512 lines into 128 sets of 4 cache lines.\n Each of these sets is really a least recently used (LRU) list. Ifthere is a match, the matching cache line is used and it is moved tothe front of the list. If there isn&#39;t a match, the data is fetchedfrom L2, the cache line at the end of the list is replaced and thenew entry is put at the front of the list.\n Two memory lines of the same color compete for the same set of 4 L1cache lines. They are off the same color if their color bits (5-11)are the same. Alternatively they are of the same color if theiraddresses differ by a multiple of 4096: 2 ^ (7 color bits + 5 offsetbits). For example, address 64 and 12352 differ by 12288 which is3*4096. So, 64 and 12352 compete for a total of 4 L1 cache lines. But64 and 12384 differ by 12320, not a multiple of 4096, so they don&#39;tcompete for the same L1 cache lines.\n Instructions are also cached. The Pentium II L1 cache is a Harvard,or split instruction/data cache. This means that instructions anddata never compete for the same L1 cache lines. L2 is a unifiedcache. Unified means that there is a single cache bank and thatinstructions and data compete for cache lines.\n L2 is similar to L1 except larger and much slower. The on-package256K L2 cache on my Pentium II has 8192 cache lines. It is also 4-wayset associative but is unified. There are Pentium II&#39;s with 512K ofL2 which increase the set size to 8. Also, there are PIII&#39;s with upto 2 MB of L2. If there is a cache line miss for L2, the cache lineis fetched from memory. Two memory lines compete for the same L2cache lines if they differ by a multiple of 64K: 2 ^ (11 cache colorbits + 5 offset bits).\n      We will start with the simple stuff. It is better to align justabout everything to a long word boundary. Linux is written in the gccprogramming language and a careful study of the gcc standardsdocument, &#34;Using and Porting GNU CC&#34; [Stallman00], istherefore necessary: no one embraces and extends quite like RichardStallman. gcc is particularly helpful with structure field alignmentwhich are intelligently and automatically aligned. ANSI C Standardallows for packing or padding according to the implementation.\n     gcc automatically aligns d_reclen to a long boundary. This workswell for unsigned short, but for short on the x86 the compiler mustinsert sign extension instructions. If you are using a short to savespace, consider using an unsigned short. For example, in&lt;linux/mm.h&gt; changing the field vm_avl_height into an unsignedshort saves 32 bytes of instructions for a typical build. It couldjust as well be an int.\n     Strings should be aligned as well. For example, strncmp() cancompare two long words at a time, cheap SIMD, if both source anddestination are long word aligned. The x86 code generator for egcs2.95.2 has a nice little bug that doesn&#39;t align short strings at alland aligns long strings to the cache line:\n  char* short_string = &#34;a_short_string&#34;; char* long_string = &#34;a_long_long_long_long_long_long_long_st ring&#34;;  .LC0: \u00a0\u00a0\u00a0 .string\u00a0\u00a0\u00a0&#34;a_short_string&#34;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 // an unaligned string \u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 .align 32 .LC1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // aligned to cacheline \u00a0\u00a0\u00a0 .string\u00a0\u00a0\u00a0&#34;a_long_long_long_long_long_long_long_st ring&#34;\n   What is necessary here is to align both strings to long wordswith .align 4. This uses less space and has better alignment. On atypical Linux build, this saves about 8K.\n   Arrays and lists of structures offer an opportunity to cachealign large amounts of data. If the frequently accessed fields arecollected into a single cache line, they can be loaded with a singlememory access. This can reduce latency and cache footprint. However,it can also increase cache footprint if large amounts of data arebeing accessed. In this case, packing efficiency and also cachepollution are more important.\n So for arrays, the base of an array should be cache aligned. The sizeof a structure must be either an integer multiple or an integerdivisor of the cache line size. If these conditions hold, then byinduction, each element of the array the cache line will be alignedor packed. Linked structures are analogous for alignment but don&#39;thave the size constraint.\n An array of structures of type mem_map_t is used by the pageallocator as a software page table:\n  /*  * Try to keep the most commonly accessed fields in single cachelines  * here (16 bytes or greater).\u00a0 This ordering should beparticularly  * beneficial on 32-bit processors. ...  */ typedef struct page{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //from linux-2.4.0-test2 \u00a0\u00a0\u00a0 structlist_head\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 2,4 \u00a0\u00a0\u00a0 struct address_space*\u00a0\u00a0mapping;\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 unsignedlong\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 structpage*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 next_hash;\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0atomic_t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 1,1+1 \u00a0\u00a0\u00a0 unsignedlong\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flags;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 structlist_head\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lru;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 2,4 \u00a0\u00a0\u00a0wait_queue_head_t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wait;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 5,10 \u00a0\u00a0\u00a0 structpage**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pprev_hash;\u00a0 // 1,2 \u00a0\u00a0\u00a0 struct buffer_head*\u00a0\u00a0\u00a0\u00a0buffers;\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 unsignedlong\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual;\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 struct zone_struct*\u00a0\u00a0\u00a0\u00a0zone;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 1,2 }mem_map_t;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 18* 4 ==\u00a0 72 x86 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 36 * 4 == 144 Alpha\n   On a 32-bit Pentium, the size of mem_map_t is 72 bytes. It was40 bytes in 2.2.16. Since the array allocation code usessizeof(mem_map_t) to align the array, the base is aligned incorrectlyas well. In any case MAP_ALIGN() can be replaced withL1_CACHE_ALIGN() which uses simpler code:\n  #define MAP_ALIGN(x) ((((x) % sizeof(mem_map_t)) ==0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \\ \u00a0\u00a0\u00a0 ? (x) : ((x) + sizeof(mem_map_t) - ((x) %sizeof(mem_map_t))))  lmem_map = (struct page *)(PAGE_OFFSET + \u00a0\u00a0 MAP_ALIGN((unsigned long)lmem_map - PAGE_OFFSET));  #define L1_CACHE_ALIGN(x)(((x)+(L1_CACHE_BYTES-1))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \\ \u00a0\u00a0\u00a0 &amp;~(L1_CACHE_BYTES-1))  lmem_map = (struct page*) L1_CACHE_ALIGN((unsigned long)lmem_map);\n   On a 64-bit Alpha, a long is 8 bytes with an 8 byte alignmentand sizeof(mem_map_t) is 144 bytes. The flags field doesn&#39;t need tobe a long, it should be an int. Since atomic_t is also an int and thetwo fields are adjacent, they would pack into a single long word. Thepage wait queue head used to be a pointer. Changing it back wouldsave enough to allow cache aligning both 32-bit and 64-bitversions.\n   It is possible to target and conditionally compile for aparticular processor. Linux has an include file,&lt;asm-i386/cache.h&gt;, defining the L1 cache line size,L1_CACHE_BYTES, for the x86 architecture family. The slab allocator[Bonwick94], which allocates small objects from memory pages, usesL1_CACHE_BYTES when a client requests a cache aligned object with theSLAB_HWCACHE_ALIGN flag.\n  /*  * include/asm-i386/cache.h  */ #ifndef __ARCH_I386_CACHE_H #define __ARCH_I386_CACHE_H /* bytes per L1 cache line */ #if\u00a0\u00a0\u00a0 CPU==586 || CPU==686 #define\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0L1_CACHE_BYTES\u00a0 32 #else #define\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0L1_CACHE_BYTES\u00a0 16 #endif #endif\n   If someone got a Red Hat kernel conservatively compiledtargeting the 486, then it assumed 16 byte cache lines. It was alsowrong for the Athlon. This has been fixed in 2.4 by defining andusing the kernel configuration macro CONFIG_X86_L1_CACHE_BYTES in&lt;linux/autoconf.h&gt;.\n If you must assume one cache line size when laying out the fieldsinside of structs intended for portable software, use 32 byte cachelines. For example, mem_map_t could use this. Notice that 32 bytealigned cache lines are also 16 byte aligned. The PowerPC 601nominally has a 64 byte cache line but it really has two connected 32byte cache lines. The Sparc64 has a 32 byte L1 and a 64 byte L2 cacheline. It is much easier to think of all systems as having 32 bytecache lines and enumerate the exceptions, if any. Alpha and Sparc64have 32 byte cache lines but the Athlon and Itanium, the exceptionsthat proves the rule, have 64 byte cache lines. And the IBM S/390 G6has a 256K L1 cache with 128 byte cache lines.\n On the vast majority of processors, 32 byte cache lines is the rightthing to do. And most importantly, if you have addressed and avoidedthe footprint and worst case thrashing scenarios in the 32 byte case,you will have avoided them for the other cases.\n   Linux represents each process with a task_struct which isallocated two 4K pages. The task list is a list of the task_struct&#39;sof all existing processes. The runqueue is a list of thetask_struct&#39;s of all runnable processes. Each time the schedulerneeds to find another process to run, it searches the entire runqueuefor the most deserving process.\n Some folks at IBM [Bryant00] noticed that if there were a couple ofthousand threads that scheduling took a significant percentage of theavailable CPU time. On a uniprocessor machine with a couple ofthousand native Java threads, just the scheduler alone was taking upmore than 25% of the available CPU. This gets worse on a sharedmemory SMP machine because memory bus contention goes up. Thisdoesn&#39;t scale.\n It turned out that the goodness() routine in the scheduler referencedseveral different cache lines in the task_struct. After reorganizingtask_struct, goodness() now references only a single cache line andthe CPU cycle count was reduced from 179 cycles to 115 cycles. Thisis still a lot.\n Here is the important cache line, the Linux scheduling loop and thegoodness() routine. The scheduler loop iterates through the entirerunqueue, evaluates each process with goodness() and finds the bestprocess to run next.\n  struct task_struct { \u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0long\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0counter;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// critical 2cd cache line \u00a0\u00a0\u00a0long\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 priority; \u00a0\u00a0\u00a0 unsigned long\u00a0\u00a0\u00a0 policy; \u00a0\u00a0\u00a0 struct mm_struct *mm, *active_mm; \u00a0\u00a0\u00a0int\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 has_cpu; \u00a0\u00a0\u00a0int\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 processor; \u00a0\u00a0\u00a0 struct list_headrun_list;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //only first long word \u00a0\u00a0\u00a0 ... };  tmp = runqueue_head.next; while (tmp != &amp;runqueue_head) { \u00a0\u00a0\u00a0 p = list_entry(tmp, struct task_struct,run_list); \u00a0\u00a0\u00a0 if (can_schedule(p)){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 // running on another CPU \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int weight = goodness(p,this_cpu, prev-&gt;active_mm); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (weight &gt; c) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 c= weight, next = p; \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 tmp = tmp-&gt;next; }  #define PROC_CHANGE_PENALTY\u00a0\u00a015\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // processor affinity  static inline int goodness(struct task_struct *p, \u00a0\u00a0\u00a0 int this_cpu, struct mm_struct *this_mm) { \u00a0\u00a0\u00a0 int weight; \u00a0\u00a0\u00a0 if (p-&gt;policy != SCHED_OTHER) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weight = 1000 +p-&gt;rt_priority; // realtime processes \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 goto out; \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 weight = p-&gt;counter; \u00a0\u00a0\u00a0 if (!weight) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 gotoout;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 // no quanta left #ifdef __SMP__ \u00a0\u00a0\u00a0 if (p-&gt;processor == this_cpu) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weight +=PROC_CHANGE_PENALTY;\u00a0 // processor affinity #endif \u00a0\u00a0\u00a0 if (p-&gt;mm ==this_mm)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0 // same thread class \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weight +=1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // ascurrent? \u00a0\u00a0\u00a0 weight += p-&gt;priority; out: \u00a0\u00a0\u00a0 return weight; }\n   A long runqueue is certainly not the common case even forheavily loaded servers. This is because event driven programsessentially self schedule with poll(). The contrasting style,threading, is preferred by Java, Apache and TUX. It is ironic thatpoll() also had scalability problems, and on other Unix systems aswell [Honeyman99]. Also, the Linux 2.4 x86 kernels increase themaximum number of threads past 4000.\n On SMP machines, processes have a scheduling affinity with the lastCPU they ran on. The idea is that some of the working set is still inthe local cache. But the scheduler has a subtle SMP bug. When a CPUhas no processes on the runqueue, the scheduler will assign it arunnable process with an affinity to another CPU. It would be wiserto first dole out more quanta to processes on the runqueue, perhapsonly those with an affinity to that CPU. Even then it may be betterto idle, particularly with a short runqueue.\n   Modern CPUs aggressively prefetch instructions but what aboutdata? CPUs don&#39;t prefetch data cache lines, but vectorizing compilersdo and programs can. Depending on the amount of CPU processing percache line, you may need to prefetch more than one cache line ahead.If the prefetch is scheduled sufficiently far in advance, it won&#39;tmatter if the cache line is in memory rather than L2 [Intel99a].\n Typically prefetching is used in multimedia kernels and matrixoperations where the prefetched address can be easily calculated.Algorithms operating on data structures can use prefetch as well. Thesame methods apply except that the prefetched address will follow alink rather than an address calculation. Prefetching for datastructures is important since memory bandwidth is increasing fasterthan latency is decreasing. Traversing a data structure is morelikely to suffer from a latency problem. Often only a few fields in astructure are used whereas with multimedia usually every bit isexamined.\n   If a prefetch instruction can be scheduled 20-25 or soinstructions before the cache line will be used, the fetch cancompletely overlap instruction execution. The exact prefetchscheduling distance is a characteristic of the processor and memory.Superscalar processors execute more than one instruction at atime.\n   If an algorithm is traversing a data structure likely to be inL2, and it can schedule a prefetch 6-10 instructions before the cacheline will be used, the fetch can completely overlap instructionexecution.\n The Linux scheduler loop is a good candidate for cache lineprefetching from L2 because goodness() is short and after the IBMpatch, it only touches a single cache line.\n Here is a prefetching version of the scheduler. It overlaps theprefetch of the next cache line from L2 during the execution ofgoodness().\n  tmp = runqueue_head.next; while (tmp != &amp;runqueue_head) { \u00a0\u00a0\u00a0 p = list_entry(tmp, struct task_struct,run_list); \u00a0\u00a0\u00a0 tmp = tmp-&gt;next; \u00a0\u00a0\u00a0CacheLine_Prefetch(tmp-&gt;next);\u00a0\u00a0\u00a0\u00a0\u00a0 //movl xx(%ebx),%eax \u00a0\u00a0\u00a0 if (can_schedule(p)) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int weight = goodness(p,this_cpu, prev-&gt;active_mm); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (weight &gt; c) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 c= weight, next = p; \u00a0\u00a0\u00a0 } }\n   By the wa\n......", "posttime": "2022-02-17 01:41:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u7f13\u5b58,\u7f16\u7a0b,cache", "title": "\u7f13\u5b58\u7f16\u7a0b\u98ce\u683c\u7684\u8981\u7d20\uff082000\uff09", "title_en": "The Elements of Cache Programming Style (2000)", "transed": 1, "url": "https://www.usenix.org/legacy/publications/library/proceedings/als00/2000papers/papers/full_papers/sears/sears_html/index.html", "via": "", "real_tags": ["\u7f13\u5b58", "\u7f16\u7a0b", "cache"]}]