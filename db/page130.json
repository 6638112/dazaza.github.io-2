[{"category": "", "categoryclass": "", "imagename": "828885d3ddfdc0495cd09016ded2f853.jpg", "infoid": 1072191, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6cd5\u56fd\u963f\u5c14\u5351\u65af\u5c71\u4e0a\u8d8a\u6765\u8d8a\u591a\u7684\u5f69\u8272\u96ea\u5757\u53ef\u80fd\u662f\u6c14\u5019\u53d8\u5316\u5bf9\u5c71\u533a\u4ea7\u751f\u5f71\u54cd\u7684\u4e00\u4e2a\u8ff9\u8c61\u3002\u5728\u5b81\u9759\u7684\u5c71\u8170\u4e0a\u9047\u5230\u8fd9\u79cd\u666f\u8c61\u4ee4\u4eba\u9707\u60ca\uff0c\u4ee4\u4eba\u773c\u82b1\u7f2d\u4e71\u3002\u5728\u6625\u672b\u590f\u521d\uff0c\u5728\u6cd5\u56fd\u963f\u5c14\u5351\u65af\u5c71\u5f92\u6b65\u8db3\u591f\u9ad8\uff0c\u60a8\u5f88\u6709\u53ef\u80fd\u4f1a\u5728\u7070\u8272\u7684\u77f3\u7070\u5ca9\u548c\u77ee\u5c0f\u7684\u690d\u88ab\u4e1b\u4e2d\u9047\u5230\u4e00\u4e9b\u76f8\u5f53\u5947\u602a\u7684\u96ea\u5757\u3002\u8fd9\u96ea\u4e0d\u662f\u767d\u7684\uff0c\u800c\u662f\u8840\u7ea2\u8272\u7684\u3002\u8fd9\u79cd\u5947\u7279\u7684\u73b0\u8c61\u2014\u2014\u6709\u65f6\u88ab\u79f0\u4e3a\u8840\u96ea\u2014\u2014\u662f\u751f\u957f\u5728\u9ad8\u5c71\u96ea\u4e2d\u7684\u5fae\u5c0f\u85fb\u7c7b\u4ea7\u751f\u7684\u9632\u5fa1\u673a\u5236\u7684\u7ed3\u679c\u3002\u901a\u5e38\uff0c\u8fd9\u4e9b\u5fae\u85fb\u5448\u7eff\u8272\uff0c\u56e0\u4e3a\u5b83\u4eec\u542b\u6709\u53f6\u7eff\u7d20\uff0c\u8fd9\u662f\u5927\u591a\u6570\u690d\u7269\u4ea7\u751f\u7684\u8272\u7d20\u5bb6\u65cf\uff0c\u53ef\u5e2e\u52a9\u5b83\u4eec\u4ece\u9633\u5149\u4e2d\u5438\u6536\u80fd\u91cf\u3002\u7136\u800c\uff0c\u5f53\u96ea\u85fb\u5927\u91cf\u751f\u957f\u5e76\u66b4\u9732\u5728\u5f3a\u70c8\u7684\u592a\u9633\u8f90\u5c04\u4e0b\u65f6\uff0c\u5b83\u4eec\u4f1a\u4ea7\u751f\u88ab\u79f0\u4e3a\u7c7b\u80e1\u841d\u535c\u7d20\u7684\u7ea2\u8272\u8272\u7d20\u5206\u5b50\uff0c\u4f5c\u4e3a\u906e\u9633\u677f\u6765\u4fdd\u62a4\u5b83\u4eec\u7684\u53f6\u7eff\u7d20\u3002\u867d\u7136\u7ea2\u96ea\u85fb\u65e9\u5df2\u4e3a\u4eba\u6240\u77e5\uff08\u5728 1819 \u5e74\u51fa\u7248\u7684\u4e00\u672c\u4e66\u4e2d\u63d0\u5230\u5b83\u662f\u5728 1818 \u5e74\u7684\u5317\u6781\u63a2\u9669\u4e2d\u53d1\u73b0\u7684\uff09\uff0c\u4f46\u5b83\u4ecd\u7136\u6c89\u6d78\u5728\u79d1\u5b66\u5bb6\u4eec\u8bd5\u56fe\u89e3\u5f00\u7684\u8c1c\u56e2\u4e2d\u3002\u5c31\u5728\u4e24\u5e74\u524d\uff0c\u6377\u514b\u5171\u548c\u56fd\u5e03\u62c9\u683c\u67e5\u5c14\u65af\u5927\u5b66\u7684\u690d\u7269\u5b66\u5bb6\u53d1\u73b0\u4e86\u4e00\u79cd\u5168\u65b0\u7684\u5fae\u85fb\u5c5e\uff0c\u5b83\u662f\u5bfc\u81f4\u4e16\u754c\u4e0d\u540c\u5730\u533a\u51fa\u73b0\u7ea2\u8272\u548c\u6a59\u8272\u96ea\u7684\u539f\u56e0\uff0c\u4ed6\u4eec\u5c06\u5176\u547d\u540d\u4e3a\u201cSanguina\u201d\uff0c\u4ee5\u53c2\u8003\u5b83\u4eec\u4ea7\u751f\u7684\u8840\u7ea2\u8272\u3002\u7814\u7a76\u4eba\u5458\u5728\u6b27\u6d32\u3001\u5317\u7f8e\u3001\u5357\u7f8e\u4ee5\u53ca\u4e24\u4e2a\u6781\u5730\u5730\u533a\u53d1\u73b0\u4e86\u5bfc\u81f4\u7ea2\u8272\u96ea\u6837\u7684\u8840\u7ea2\u85fb\u5f62\u5f0f\u3002\u5728\u65af\u74e6\u5c14\u5df4\u7fa4\u5c9b\u8fd8\u53d1\u73b0\u4e86\u4e00\u79cd\u5bfc\u81f4\u4e0d\u5bfb\u5e38\u7684\u6a59\u8272\u96ea\u7684 Sanguina \u7269\u79cd\u3002\u4e0d\u8fc7\uff0c\u5b83\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u79cd\u5bfc\u81f4\u7ea2\u96ea\u7684\u5fae\u85fb\u3002\u5176\u4ed6\u51e0\u79cd\u7c7b\u578b\uff0c\u4f8b\u5982\u96ea\u82b1\u8863\u85fb\u548c\u4e00\u79cd\u751f\u957f\u5728\u5357\u6781\u4f01\u9e45\u7fa4\u843d\u9644\u8fd1\u7684\u85fb\u7c7b\uff0c\u79f0\u4e3a\u591a\u7fc5\u76ee\u7eff\u5355\u80de\u83cc\uff0c\u4e5f\u4f1a\u4ea7\u751f\u8272\u7d20\u4ee5\u4ea7\u751f\u7ea2\u8272\u548c\u7c89\u7ea2\u8272\u7684\u96ea\u3002\u4f46\u662f\uff0c\u66f4\u591a\u5730\u4e86\u89e3\u7ea2\u96ea\u85fb\u7684\u610f\u4e49\u8fdc\u5927\u4e8e\u7b80\u5355\u5730\u89e3\u91ca\u963f\u5c14\u5351\u65af\u5c71\u548c\u4e24\u6781\u9644\u8fd1\u5b58\u5728\u5947\u602a\u989c\u8272\u7684\u6591\u5757\u3002\u5b83\u7684\u51fa\u73b0\u548c\u6d88\u5931\u662f\u6c14\u5019\u53d8\u5316\u4ee5\u53ca\u5b83\u5982\u4f55\u5f71\u54cd\u53d1\u73b0\u85fb\u7c7b\u7684\u8106\u5f31\u751f\u6001\u7cfb\u7edf\u7684\u91cd\u8981\u6807\u5fd7\u3002\n\u6839\u636e\u4f4d\u4e8e\u6ce2\u8328\u5766\u7684\u5fb7\u56fd\u5730\u7403\u79d1\u5b66\u7814\u7a76\u4e2d\u5fc3\u754c\u9762\u5730\u7403\u5316\u5b66\u6559\u6388 Liane G Benning \u7684\u8bf4\u6cd5\uff0c\u7531\u4e8e\u5168\u7403\u53d8\u6696\uff0c\u7ea2\u96ea\u53d8\u5f97\u8d8a\u6765\u8d8a\u666e\u904d\u3002 \u201c\u5927\u6c14\u4e2d\u4e8c\u6c27\u5316\u78b3\u542b\u91cf\u7684\u4e0a\u5347\u4f1a\u63d0\u9ad8\u6e29\u5ea6\uff0c\u4ece\u800c\u5bfc\u81f4\u66f4\u591a\u7684\u96ea\u878d\u5316\uff0c\u201d\u5979\u8bf4\u3002 \u201c\u96ea\u4e0a\u6709\u6db2\u6001\u6c34\u7684\u90a3\u4e00\u523b\uff0c\u85fb\u7c7b\u5c31\u5f00\u59cb\u751f\u957f\u3002\u201d\u8d8a\u6765\u8d8a\u591a\u7684\u7ea2\u96ea\u85fb\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6c14\u5019\u53d8\u5316\u3002\u7ea2\u8272\u989c\u6599\u4f7f\u96ea\u9762\u53d8\u6697\uff0c\u51cf\u5c11\u4e86\u5b83\u53cd\u5c04\u56de\u592a\u7a7a\u7684\u5149\u548c\u70ed\u91cf\u2014\u2014\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u53cd\u7167\u7387\u6548\u5e94\u3002\u901a\u8fc7\u5438\u6536\u66f4\u591a\u7684\u592a\u9633\u70ed\u91cf\uff0c\u96ea\u878d\u5316\u5f97\u66f4\u5feb\uff0c\u4f7f\u85fb\u7c7b\u8fdb\u4e00\u6b65\u589e\u6b96\u3002 \u201c\u6709\u4e00\u79cd\u5931\u63a7\u7684\u6548\u679c\uff0c\u85fb\u7c7b\u878d\u5316\u4e86\u5b83\u4eec\u559c\u6b22\u7684\u6816\u606f\u5730\uff0c\u201d\u672c\u5b81\u8bf4\u3002 \u201c\u5c31\u597d\u50cf\u4ed6\u4eec\u5728\u6467\u6bc1\u81ea\u5df1\u7684\u623f\u5b50\u4e00\u6837\u3002\u201d\u5728\u66f4\u5e7f\u6cdb\u7684\u8303\u56f4\u5185\uff0c\u6709\u8272\u96ea\u5438\u6536\u7684\u989d\u5916\u70ed\u91cf\u53ef\u4ee5\u6539\u53d8\u66f4\u5e7f\u6cdb\u73af\u5883\u7684\u6e29\u5ea6\uff0c\u52a0\u901f\u79ef\u96ea\u548c\u51b0\u5ddd\u7684\u878d\u5316\u3002\u4e00\u9879\u7814\u7a76\u4f30\u8ba1\uff0c\u5728\u4e00\u4e2a\u878d\u5316\u7684\u5b63\u8282\u91cc\uff0c\u7ea2\u8272\u85fb\u534e\u53ef\u4ee5\u5c06\u79ef\u96ea\u53cd\u7167\u7387\u964d\u4f4e 13%\uff0c\u8fd9\u8868\u660e\u5b83\u5728\u6c14\u5019\u53d8\u5316\u7684\u5f71\u54cd\u5982\u4f55\u5728\u5c71\u533a\u73af\u5883\u4e2d\u88ab\u653e\u5927\u65b9\u9762\u53d1\u6325\u7740\u91cd\u8981\u4f5c\u7528\u3002\u7814\u7a76\u8868\u660e\uff0c\u4ece\u5357\u6781\u6d32\u5230\u559c\u9a6c\u62c9\u96c5\u5c71\u518d\u5230\u5317\u6781\uff0c\u4e16\u754c\u5404\u5730\u7684\u51b0\u5ddd\u4e0a\u90fd\u4f1a\u51fa\u73b0\u7ea2\u85fb\u5927\u91cf\u7e41\u6b96\u3002\u56e0\u6b64\uff0c\u50cf Benning \u548c\u6cd5\u56fd\u683c\u52d2\u8bfa\u5e03\u5c14\u7ec6\u80de\u4e0e\u690d\u7269\u751f\u7406\u5b66\u5b9e\u9a8c\u5ba4\u4e3b\u4efb Eric Mar\u00e9chal \u7b49\u79d1\u5b66\u5bb6\u6025\u5207\u5730\u60f3\u8981\u56de\u7b54\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u7ea2\u96ea\u85fb\u534e\u662f\u5426\u6b63\u5728\u53d8\u5f97\u66f4\u52a0\u666e\u904d\u548c\u53d1\u751f\u5f97\u66f4\u52a0\u9891\u7e41\u3002\u8fd9\u6837\u505a\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u536b\u661f\u56fe\u50cf\u6765\u7814\u7a76\u7ea2\u96ea\u7684\u53cd\u7167\u7387\u964d\u4f4e\u6548\u679c\u3002\u4e00\u9879\u4f7f\u7528\u536b\u661f\u56fe\u50cf\u7684\u7814\u7a76\u663e\u793a\uff0c2017 \u5e74 1 \u6708\uff0c26% \u7684\u96ea\u56e0\u85fb\u7c7b\u800c\u53d8\u6697\u3002\u5c3d\u7ba1\u51e0\u4e4e\u6ca1\u6709\u5e7f\u6cdb\u7684\u6570\u636e\u8868\u660e\u7ea2\u85fb\u662f\u5426\u5728\u5168\u7403\u8303\u56f4\u5185\u53d8\u5f97\u8d8a\u6765\u8d8a\u666e\u904d\uff0c\u4f46 Benning \u548c Mar\u00e9chal \u90fd\u8ba4\u4e3a\uff0c\u968f\u7740\u5730\u7403\u53d8\u6696\uff0c\u5b83\u4eec\u4f1a\u66f4\u9891\u7e41\u5730\u53d1\u751f\uff0c\u5728\u79d1\u5b66\u5bb6\u4eec\u8bd5\u56fe\u4f30\u8ba1\u8fd9\u4e9b\u5f71\u54cd\u65f6\uff0c\u9700\u8981\u8003\u8651\u5230\u8fd9\u4e00\u70b9\u662f\u3002\u4f46\u5373\u4f7f\u629b\u5f00\u5b83\u4eec\u5728\u6c14\u5019\u53d8\u5316\u4e2d\u7684\u4f5c\u7528\uff0c\u79d1\u5b66\u5bb6\u4eec\u4e5f\u5728\u63ed\u5f00\u56f4\u7ed5\u7ea2\u96ea\u7684\u5176\u4ed6\u8c1c\u56e2\u3002\nMar\u00e9chal \u548c\u4ed6\u7684\u540c\u4e8b\u6700\u8fd1\u53d1\u73b0\uff0c\u7ea2\u96ea\u85fb\u4f3c\u4e4e\u53ea\u5728\u6cd5\u56fd\u963f\u5c14\u5351\u65af\u5c71 2,000m\uff086,562 \u82f1\u5c3a\uff09\u4ee5\u4e0a\u7684\u6d77\u62d4\u5904\u751f\u957f\uff0c\u5e76\u4e14\u5728 2,400m\uff087,874 \u82f1\u5c3a\uff09\u9644\u8fd1\u7279\u522b\u7e41\u76db\u3002\u6839\u636e Mar\u00e9chal \u7684\u8bf4\u6cd5\uff0c\u7531\u4e8e\u8fd9\u4e9b\u9ad8\u5ea6\u5b58\u5728\u7684\u79ef\u96ea\u7684\u6570\u91cf\u3001\u8d28\u91cf\u548c\u5bff\u547d\uff0c\u5728\u9ad8\u6d77\u62d4\u5730\u533a\u53d1\u73b0\u4e86 Sanguina \u85fb\u7c7b\u3002\u4ee4\u4eba\u8d39\u89e3\u7684\u662f\uff0c\u8fc4\u4eca\u4e3a\u6b62\uff0c\u79d1\u5b66\u5bb6\u4eec\u672a\u80fd\u5728\u5b9e\u9a8c\u5ba4\u4e2d\u5728\u771f\u6b63\u7684\u96ea\u4e0a\u79cd\u690d\u8fd9\u4e9b\u85fb\u7c7b\u3002 \u201c\u6b63\u662f\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u7814\u7a76\u4eba\u5458\u9700\u8981\u6536\u96c6\u5c3d\u53ef\u80fd\u591a\u7684\u6837\u672c\u4ee5\u8fdb\u884c\u66f4\u7cbe\u7ec6\u7684\u7814\u7a76\uff0c\u201dMar\u00e9chal \u8bf4\u3002\u4eca\u5e74 6 \u6708\uff0c\u5728\u6700\u8fd1\u5bf9\u6cd5\u56fd\u4e1c\u5357\u90e8\u4e0a\u963f\u5c14\u5351\u65af\u7684\u52b3\u5854\u96f7\u5c71\u53e3\u8fdb\u884c\u7684\u4e3a\u671f\u4e24\u5929\u7684\u63a2\u9669\u4e2d\uff0cMar\u00e9chal \u548c\u4ed6\u7684\u540c\u4e8b\u5728\u7531\u4e94\u4e2a\u81f4\u529b\u4e8e\u7814\u7a76\u5c71\u5730\u85fb\u7c7b\u7684\u6cd5\u56fd\u7814\u7a76\u6240\u7ec4\u6210\u7684 ALPALGA \u8d22\u56e2\u4e2d\u6536\u96c6\u4e86\u4ed6\u4eec 2021 \u5e74\u7684\u7b2c\u4e00\u6279\u6837\u672c\u3002\u7136\u800c\uff0c\u4e0e\u5f80\u5e74\u4e0d\u540c\u7684\u662f\uff0c\u96ea\u6ca1\u6709\u5178\u578b\u7684\u7ea2\u8272\u3002\u76f8\u53cd\uff0c\u5b83\u4ee5\u8d6d\u9ec4\u8272\u4e3a\u4e3b\u3002\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u9ec4\u8272\u662f\u7531\u4e8e\u96ea\u4e0a\u7684\u6c99\u5b50\u5e72\u6270\u4e86\u85fb\u7c7b\u8d4b\u4e88\u7684\u989c\u8272\u3002\u867d\u7136\u4e0d\u662f\u4e00\u4e2a\u4e0d\u5bfb\u5e38\u7684\u73b0\u8c61\uff0c\u4f46\u4eca\u5e74\u5f88\u7279\u522b\uff0c\u56e0\u4e3a\u5f3a\u98ce\u5c06\u5927\u91cf\u7684\u6492\u54c8\u62c9\u6c99\u5e26\u5230\u4e86\u963f\u5c14\u5351\u65af\u5c71\u7684\u9ad8\u5730\u3002 \u201c\u8fd9\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u673a\u4f1a\u6765\u8bc4\u4f30\u6c99\u5b50\u4e0e\u96ea\u85fb\u751f\u957f\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u201dMar\u00e9chal \u8bf4\u3002 \u201c\u901a\u8fc7\u5206\u6790\u8fd9\u4e9b\u9897\u7c92\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u786e\u5b9a\u6c99\u5b50\u662f\u5426\u63d0\u4f9b\u517b\u5206\u3001\u91d1\u5c5e\u6216\u4efb\u4f55\u53ef\u80fd\u5bf9\u85fb\u7c7b\u751f\u957f\u4ea7\u751f\u79ef\u6781\u6216\u6d88\u6781\u5e72\u6270\u7684\u7279\u5b9a\u5143\u7d20\u3002\u201d\u8be5\u56e2\u961f\u5e0c\u671b\u6269\u5927\u4ed6\u4eec\u7684\u7406\u89e3\u8303\u56f4\uff0c\u4ee5\u4e86\u89e3\u96ea\u4e2d\u7684\u94c1\u542b\u91cf\u548c\u9178\u5ea6\u6c34\u5e73\u5982\u4f55\u5f71\u54cd\u7ea2\u85fb\u7684\u751f\u957f\u3002\u4ed6\u4eec\u8fd8\u5728\u7814\u7a76\u4e0e\u96ea\u85fb\u4e00\u8d77\u751f\u6d3b\u7684\u5176\u4ed6\u5fae\u751f\u7269\u548c\u52a8\u7269\u662f\u5426\u53ef\u80fd\u53d1\u6325\u4f5c\u7528\u3002\n\u6839\u636e Mar\u00e9chal \u7684\u8bf4\u6cd5\uff0c\u5bf9 6 \u6708\u4efd\u6536\u96c6\u7684\u65b0\u6837\u672c\u8fdb\u884c\u7684\u9996\u6b21\u6d4b\u8bd5\u8868\u660e\uff0c\u5b58\u5728\u5e26\u6709\u85fb\u7c7b\u7ec6\u80de\u7684\u5355\u7ec6\u80de\u52a8\u7269\uff0c\u79f0\u4e3a\u6d6e\u6e38\u52a8\u7269\u3002\u867d\u7136\u901a\u5e38\u4e0e\u6d77\u6d0b\u548c\u6e56\u6cca\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u5b83\u4eec\u6784\u6210\u4e86\u98df\u7269\u94fe\u7684\u5173\u952e\u5143\u7d20\uff0c\u4f46\u6d6e\u6e38\u52a8\u7269\u4e5f\u53ef\u4ee5\u5728\u51b0\u5ddd\u548c\u79ef\u96ea\u7684\u878d\u6c34\u4e2d\u751f\u5b58\u3002\u4ed6\u4eec\u7684\u7814\u7a76\u6b63\u5728\u5e2e\u52a9\u6784\u5efa\u4e00\u5e45\u56fe\u666f\uff0c\u5c3d\u7ba1\u96ea\u53ef\u80fd\u770b\u8d77\u6765\u662f\u60f0\u6027\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u5145\u6ee1\u4e86\u751f\u547d\u3002 \u201c\u5f53\u964d\u96ea\u65f6\uff0c\u5b83\u7ecf\u5e38\u4f1a\u6355\u83b7\u4eba\u4e3a\u548c\u81ea\u7136\u4ea7\u751f\u7684\u77ff\u7269\u8d28\u548c\u5143\u7d20\uff0c\u5982\u6c2e\u548c\u78f7\uff0c\u201d\u672c\u5b81\u8bf4\u3002\u7136\u540e\u96ea\u85fb\u53ef\u4ee5\u4ee5\u8fd9\u4e9b\u4e3a\u98df\uff0c\u800c\u96ea\u4e2d\u7684\u7ec6\u83cc\u4e5f\u4e0e\u85fb\u7c7b\u5f62\u6210\u8425\u517b\u5173\u7cfb\u3002 \u201c\u5728\u8fd9\u4e2a\u751f\u6001\u7cfb\u7edf\u4e2d\uff0c\u96ea\u85fb\u662f\u4e3b\u8981\u751f\u4ea7\u8005\uff0c\u201d\u672c\u5b81\u8bf4\u3002 \u201c\u5f53\u5b83\u4eec\u5f00\u82b1\u65f6\uff0c\u5b83\u4eec\u8fdb\u884c\u5149\u5408\u4f5c\u7528\uff0c\u6d88\u8017\u8425\u517b\uff0c\u540c\u65f6\u4ea7\u751f\u7cd6\u548c\u5176\u4ed6\u6210\u5206\u7b49\u5e9f\u7269\uff0c\u8fd9\u4e9b\u5e9f\u7269\u53ef\u80fd\u6210\u4e3a\u7ec6\u83cc\u548c\u5176\u4ed6\u5fae\u751f\u7269\u7684\u98df\u7269\u3002\u201d\u6839\u636e Mar\u00e9chal \u7684\u8bf4\u6cd5\uff0c\u85fb\u7c7b\u53ea\u9700\u8981\u4e8c\u6c27\u5316\u78b3\u548c\u5149\uff0c\u4f3c\u4e4e\u6784\u6210\u4e86\u4e00\u4e2a\u66f4\u590d\u6742\u548c\u6210\u719f\u7684\u751f\u6001\u7cfb\u7edf\u7684\u57fa\u7840\uff0c\u8be5\u751f\u6001\u7cfb\u7edf\u6d89\u53ca\u7ec6\u83cc\u3001\u771f\u83cc\u548c\u5355\u7ec6\u80de\u52a8\u7269\u7ec6\u80de\uff0c\u5982\u6d6e\u6e38\u52a8\u7269\u3002\u4f46\u662f\uff0c\u867d\u7136\u8fd9\u4e9b\u5f69\u8272\u96ea\u5757\u968f\u7740\u751f\u547d\u800c\u84ec\u52c3\u53d1\u5c55\u2014\u2014\u4f46\u5b83\u4eec\u7684\u5bff\u547d\u4e5f\u5f88\u77ed\uff0c\u4e00\u5e74\u4e2d\u53ea\u51fa\u73b0\u51e0\u5468\u3002\u5f53\u5929\u6c14\u518d\u6b21\u53d8\u51b7\u65f6\uff0c\u989c\u8272\u5c31\u4f1a\u6d88\u5931\uff0c\u96ea\u53c8\u6062\u590d\u5230\u901a\u5e38\u7684\u767d\u8272\u3002\u8fd9\u63d0\u51fa\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\u2014\u2014\u7ea2\u85fb\u5728\u51ac\u5929\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\n\u201c\u4e00\u79cd\u7406\u8bba\u662f\u5b83\u4eec\u8fdb\u5165\u4f11\u7720\u72b6\u6001\uff0c\u5e76\u5728\u51bb\u7ed3\u65f6\u53d8\u5f97\u51e0\u4e4e\u900f\u660e\uff0c\u201d\u672c\u5b81\u8bf4\u3002 \u201c\u5f53\u4e0d\u518d\u9700\u8981\u5b83\u65f6\uff0c\u5b83\u4eec\u4f1a\u5931\u53bb\u8272\u7d20\u6c89\u7740\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6d88\u8017\u80fd\u91cf\u7684\u8fc7\u7a0b\u3002\u201d\u867d\u7136\u7ea2\u8272\u7d20\u6bcf\u5e74\u90fd\u4f1a\u968f\u7740\u6625\u672b\u590f\u521d\u7684\u9633\u5149\u548c\u708e\u70ed\u800c\u56de\u5f52\uff0c\u4f46\u672c\u5b81\u548c\u5979\u7684\u79d1\u5b66\u5bb6\u4eec\u5c06\u5bc6\u5207\u5173\u6ce8\u96ea\u4e0a\u7684\u6c61\u6e0d\uff0c\u770b\u770b\u5b83\u4eec\u8fd8\u80fd\u6559\u7ed9\u6211\u4eec\u4ec0\u4e48\u3002\u901a\u8fc7\u5728 Facebook \u4e0a\u70b9\u8d5e\u6211\u4eec\uff0c\u6216\u5728 Twitter \u6216 Instagram \u4e0a\u5173\u6ce8\u6211\u4eec\uff0c\u52a0\u5165\u4e00\u767e\u4e07\u672a\u6765\u7684\u7c89\u4e1d\u3002\u5982\u679c\u60a8\u559c\u6b22\u8fd9\u4e2a\u6545\u4e8b\uff0c\u8bf7\u6ce8\u518c\u6bcf\u5468 bbc.com \u4e13\u9898\u901a\u8baf\uff0c\u79f0\u4e3a\u201c\u57fa\u672c\u6e05\u5355\u201d\u3002\u4ece BBC \u672a\u6765\u3001\u6587\u5316\u3001\u5de5\u4f5c\u751f\u6d3b\u548c\u65c5\u884c\u4e2d\u7cbe\u5fc3\u6311\u9009\u7684\u6545\u4e8b\uff0c\u6bcf\u5468\u4e94\u53d1\u9001\u5230\u60a8\u7684\u6536\u4ef6\u7bb1\u3002", "note_en": "Growing patches of coloured snow in the French Alps could be a sign of the impact climate change is having in the mountains.\n It is a shocking, garish sight to come across on a peaceful mountainside. Hike high enough in the French alps during the late spring and early summer, and there is a good chance that\u00a0you will come across some rather strange patches of snow among the grey limestone and stunted clumps of vegetation. This snow isn&#39;t white \u2013 it&#39;s blood red.\n The peculiar phenomenon \u2013 sometimes known as blood snow \u2013 is the result of a defence mechanism produced by microscopic algae that grow in the Alpine snow. Normally these microalgae have a green colour as they contain chlorophyll, the family of pigments produced by most plants to help them absorb energy from sunlight.\u00a0However, when the snow algae grow prolifically and are exposed to strong solar radiation, they produce red-coloured pigment molecules known as carotenoids, which act as a sunshield to protect their chlorophyll.\n While red snow algae\u00a0has been known for a long time (it is mentioned in a book published in  1819 as having been discovered during an expedition to the Arctic in 1818) it is still steeped in mysteries that scientists are attempting to unravel.\n Just two years ago, botanists at Charles University, Prague, in the Czech Republic,  identified an entirely new genus of microalgae that is responsible for causing red and orange snow in different parts of the world, which they named &#34;Sanguina&#34; in reference to the blood-red colour they produce. The researchers found forms of Sanguina algae that cause red snow samples from Europe, North America, South America along with both polar regions. A species of Sanguina that causes an unusual orange snow was also found in Svalbard.\n  It isn&#39;t the only type of microalgae responsible for red snow though. Several other types, such as   Chlamydomonas\u00a0nivalis and an  algae found growing close to Antarctic penguin colonies called   Chloromonas polyptera, also produce pigments to create red and pink stained snow.\n But understanding more about red snow algae carries a significance far greater than simply explaining the existence of strange-coloured patches in the Alps and near the poles. Its appearance and disappearance are important markers of climate change and how it is affecting the delicate ecosystems where the algae are found.\n According to Liane G Benning, professor of interface geochemistry at the German Research Centre for Geosciences in Potsdam, red snow is becoming more common due to global warming. &#34; The rise in the atmospheric carbon dioxide levels increases the temperature, which leads to more snow melting,&#34; she says. &#34;The moment there is liquid water on the snow, the algae start growing.&#34;\n This increasing abundance of red snow algae may also be contributing to climate change too. The red pigment turns the snow surface dark, reducing the amount of light and heat it reflects back into space \u2013 something known as the albedo effect. By trapping more of the Sun&#39;s heat, the snow melts even faster, allowing the algae to proliferate further. &#34;There is a runaway effect in which the algae melt their preferred habitat,&#34; says Benning. &#34;It\u2019s as if they are destroying their own house.&#34;\n On a wider scale, the extra heat absorbed by the tinted snow can alter the temperature in the wider environment, speeding up the melting of snow packs and glaciers. One study estimated that over a single melt season, red pigmented algal blooms could  reduce the snow albedo by 13%, suggesting it plays an important role in how the effects of climate change can be amplified within mountain environments.\n  Studies have shown red algal blooms occur on glaciers all over the world, from  Antarctica to  the Himalayas and  in the Arctic. So one question that scientists like Benning and Eric Mar\u00e9chal, director of the Cell and Plant Physiology Laboratory in Grenoble, France, are keen to answer is whether red snow algal blooms are becoming more widespread and occurring more often.\n One way of doing this would be to use satellite imagery to study the albedo-reducing effect of the red snow. A study using satellite imagery of snow fields on Fildes Peninsula on King George Island, off the coast of Antarctica, revealed that in January 2017,  26% of the snow was darkened by algae.\n Although there is little widespread data to show if red algae are becoming more common globally, both Benning and Mar\u00e9chal believe they will occur more often as our planet warms, and this will need to be taken into account as scientists try to estimate what the impacts will be.\n But even laying aside their role in climate change, scientists are unpicking other mysteries surrounding red snow.\n   Mar\u00e9chal and his colleagues recently found that red snow algae appear to only grow  at elevations above 2,000m (6,562ft) in the French Alps, and particularly flourish at around 2,400m (7,874ft). According to Mar\u00e9chal, the Sanguina algae is found at high elevations because of the quantity, quality and longevity of the snowpacks present at these heights.\n Puzzlingly, scientists have so far failed to grow these algae on real snow in a laboratory.\n &#34;It is for this reason that researchers need to collect as many samples as possible for a more refined study,&#34; Mar\u00e9chal says.\n  During a recent two-day expedition\u00a0to the Lautaret pass in Hautes-Alpes, southeastern France, in June this year Mar\u00e9chal and his colleagues in the  ALPALGA consortium of five French institutes dedicated to the study of mountain algae, collected their first samples of 2021. Unlike previous years, however, the snow didn&#39;t have its typical red hue. Instead, it was dominated by ochre yellow.\n The yellow tinge, they believe, was due to the presence of sand on the snow that interfered with the colour imparted by the algae. While not an unusual phenomenon, this year was exceptional as strong winds carried plenty of Saharan sand to the Alpine heights.\n &#34;This has provided us a great opportunity to evaluate the relationship between sand and the growth of snow algae,&#34; says Mar\u00e9chal. &#34;By analysing these particles, we will try to determine if sand provides nutrients, metals or any specific elements that may interfere, positively or negatively, with the algae growth.&#34;\n The team hopes to increase the ambit of their understanding to see how iron levels in the snow and acidity levels affect the red algae growth. They are also studying whether other microorganisms and animals living alongside the snow algae may play a role.\n  According to Mar\u00e9chal, the first tests on the new samples collected in June have revealed the presence of unicellular animals, called zooplankton, with the algae cells. Although more normally associated with oceans and lakes, where they form a key element of the food chain, zooplankton can also survive in the meltwaters from glaciers and snow packs.\n Their research is helping to build a picture that although snow might appear to be inert, it is in fact teeming with life.\n &#34;As snow falls, quite often it traps minerals and elements like nitrogen and phosphorus, both anthropogenic and naturally occurring,&#34; Benning says. The snow algae can then feed on these while bacteria in the snow also form a trophic relationship with the algae.\n &#34;In this ecosystem, the snow algae are primary producers,&#34; says Benning. &#34;When they bloom, they photosynthesise, consume nutrients while producing waste products such as sugars and other components, which serve as possible food for bacteria and other microorganisms.&#34;\n  According to Mar\u00e9chal, the algae, which need just carbon dioxide and light, appear to form the basis of a more complex and mature ecosystem that involves bacteria, fungi and unicellular animal cells such as the zooplankton.\n But while these patches of coloured snow flourish with life \u2013 they are also short lived, appearing only for a few weeks of the year. When the weather turns cold again, the colour disappears and the snow returns to its usual white colour.\n It raises an intriguing question \u2013 what actually happens to the red algae over the winter?\n &#34;One theory is that they go dormant and become almost transparent as they freeze in,&#34; says Benning. &#34;When it&#39;s no longer needed, they lose the pigmentation as it is an energy consuming process.&#34;\n While the red pigment returns each year with the sunshine and heat of the late spring and early summer, Benning and her fellow scientists will be watching the stains in the snow closely for what else they can teach us.\n  Join one million Future fans by liking us on\u00a0   Facebook , or follow us on\u00a0   Twitter \u00a0or\u00a0   Instagram .\n If you liked this story,\u00a0   sign up for the weekly bbc.com features newsletter , called &#34;The Essential List&#34;. A handpicked selection of stories from\u00a0   BBC Future ,\u00a0   Culture ,\u00a0  Worklife, and\u00a0   Travel , delivered to your inbox every Friday.", "posttime": "2021-08-09 06:03:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u963f\u5c14\u5351\u65af\u5c71,alps,\u85fb\u7c7b", "title": "\u4e3a\u4ec0\u4e48\u963f\u5c14\u5351\u65af\u5c71\u7684\u96ea\u53d8\u7ea2\u4e86", "title_en": "Why Snow in the Alps Is Turning Red", "transed": 1, "url": "https://www.bbc.com/future/article/20210729-why-snow-in-the-alps-is-turning-red", "via": "", "real_tags": ["\u963f\u5c14\u5351\u65af\u5c71", "alps", "\u85fb\u7c7b"]}, {"category": "", "categoryclass": "", "imagename": "f1652b5e3202f62a36a3343aeb4fe94e.jpg", "infoid": 1072189, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "NBC News \u7684\u4e00\u9879\u8c03\u67e5\u53d1\u73b0\uff0c\u54e5\u4f26\u6bd4\u4e9a\u547c\u53eb\u4e2d\u5fc3\u7684\u5de5\u4f5c\u4eba\u5458\u5411\u8be5\u56fd\u4e00\u4e9b\u6700\u5927\u7684\u516c\u53f8\u63d0\u4f9b\u5916\u5305\u5ba2\u6237\u670d\u52a1\uff0c\u4ed6\u4eec\u6b63\u88ab\u8feb\u7b7e\u7f72\u4e00\u4efd\u5408\u540c\uff0c\u8ba9\u4ed6\u4eec\u7684\u96c7\u4e3b\u5728\u5bb6\u4e2d\u5b89\u88c5\u6444\u50cf\u5934\u4ee5\u76d1\u63a7\u5de5\u4f5c\u7ee9\u6548\u3002 Teleperformance \u662f\u5168\u7403\u6700\u5927\u7684\u547c\u53eb\u4e2d\u5fc3\u516c\u53f8\u4e4b\u4e00\uff0c\u603b\u90e8\u4f4d\u4e8e\u54e5\u4f26\u6bd4\u4e9a\u7684\u516d\u540d\u5458\u5de5\u8868\u793a\uff0c\u4ed6\u4eec\u5bf9 3 \u6708\u4efd\u9996\u6b21\u53d1\u5e03\u7684\u65b0\u5408\u540c\u611f\u5230\u62c5\u5fe7\u3002\u8be5\u516c\u53f8\u7684\u5ba2\u6237\u5305\u62ec\u82f9\u679c\u3001\u4e9a\u9a6c\u900a\u548c\u4f18\u6b65\u3002\u8be5\u5408\u540c\u5141\u8bb8\u901a\u8fc7\u5de5\u4eba\u5bb6\u4e2d\u7684\u4eba\u5de5\u667a\u80fd\u6444\u50cf\u5934\u8fdb\u884c\u76d1\u63a7\u3001\u8bed\u97f3\u5206\u6790\u548c\u5b58\u50a8\u4ece\u5de5\u4eba\u5bb6\u5ead\u6210\u5458\uff08\u5305\u62ec\u672a\u6210\u5e74\u4eba\uff09\u6536\u96c6\u7684\u6570\u636e\u3002 Teleperformance \u5728\u5168\u7403\u62e5\u6709\u8d85\u8fc7 380,000 \u540d\u5458\u5de5\uff0c\u5176\u4e2d\u54e5\u4f26\u6bd4\u4e9a\u6709 39,000 \u540d\u5458\u5de5\u3002 \u201c\u5408\u540c\u5141\u8bb8\u5bf9\u6211\u4eec\u6b63\u5728\u505a\u7684\u4e8b\u60c5\u4ee5\u53ca\u6211\u4eec\u7684\u5bb6\u4eba\u8fdb\u884c\u6301\u7eed\u76d1\u63a7\uff0c\u201d\u82f9\u679c\u8d26\u6237\u4e0a\u7684\u4e00\u540d\u6ce2\u54e5\u5927\u5de5\u4f5c\u4eba\u5458\u8bf4\uff0c\u4ed6\u6ca1\u6709\u88ab\u6388\u6743\u5bf9\u65b0\u95fb\u5a92\u4f53\u53d1\u8a00\u3002 \u201c\u6211\u8ba4\u4e3a\u8fd9\u771f\u7684\u5f88\u7cdf\u7cd5\u3002\u6211\u4eec\u4e0d\u5728\u529e\u516c\u5ba4\u5de5\u4f5c\u3002\u6211\u5728\u6211\u7684\u5367\u5ba4\u5de5\u4f5c\u3002\u6211\u4e0d\u60f3\u5728\u5367\u5ba4\u91cc\u653e\u76f8\u673a\u3002\u201d\u8fd9\u540d\u5de5\u4eba\u8bf4\u5979\u7b7e\u7f72\u4e86\u8fd9\u4efd\u5408\u540c\uff0cNBC \u65b0\u95fb\u5df2\u7ecf\u5ba1\u67e5\u4e86\u4e00\u4efd\u5408\u540c\uff0c\u56e0\u4e3a\u5979\u5bb3\u6015\u5931\u53bb\u5de5\u4f5c\u3002\u5979\u8bf4\uff0c\u5979\u7684\u4e3b\u7ba1\u544a\u8bc9\u5979\uff0c\u5982\u679c\u5979\u62d2\u7edd\u7b7e\u7f72\u6587\u4ef6\uff0c\u5979\u5c06\u88ab\u4ece\u82f9\u679c\u8d26\u6237\u4e2d\u5220\u9664\u3002\u5979\u8bf4\uff0c\u5c1a\u672a\u5b89\u88c5\u989d\u5916\u7684\u76d1\u63a7\u6280\u672f\u3002\u7531\u4e8e\u65e0\u6743\u5bf9\u5a92\u4f53\u53d1\u8a00\u800c\u8981\u6c42\u533f\u540d\u7684\u5de5\u4eba\u4eec\u7684\u62c5\u5fe7\u51f8\u663e\u4e86\u4e00\u79cd\u4e0e\u6d41\u884c\u75c5\u76f8\u5173\u7684\u8d8b\u52bf\uff0c\u4ee4\u9690\u79c1\u548c\u52b3\u5de5\u4e13\u5bb6\u611f\u5230\u9707\u60ca\uff1a\u7531\u4e8e\u8bb8\u591a\u5de5\u4eba\u5df2\u8f6c\u5411\u5728\u5bb6\u4e2d\u5c65\u884c\u804c\u8d23\uff0c\u4e00\u4e9b\u516c\u53f8\u6b63\u5728\u63a8\u52a8\u63d0\u9ad8\u5bf9\u5176\u5458\u5de5\u7684\u6570\u5b57\u76d1\u63a7\u6c34\u5e73\uff0c\u4ee5\u91cd\u5efa\u5bf9\u5bb6\u5ead\u529e\u516c\u5ba4\u7684\u76d1\u7763\u3002\u8fd9\u4e2a\u95ee\u9898\u5e76\u4e0d\u4ec5\u4ec5\u53d1\u751f\u5728\u54e5\u4f26\u6bd4\u4e9a\u7684 Teleperformance \u5458\u5de5\u8eab\u4e0a\u3002\u8be5\u516c\u53f8\u5728\u5176\u7f51\u7ad9\u4e0a\u8868\u793a\uff0c\u5b83\u901a\u8fc7\u5176 TP Cloud Campus \u4ea7\u54c1\u63d0\u4f9b\u7c7b\u4f3c\u7684\u76d1\u63a7\uff0c\u8be5\u8f6f\u4ef6\u4f7f\u5458\u5de5\u80fd\u591f\u5728\u8d85\u8fc7 19 \u4e2a\u5e02\u573a\u8fdb\u884c\u8fdc\u7a0b\u5de5\u4f5c\u3002 2021 \u5e74 1 \u6708\u7684 TP Cloud Campus \u5b98\u65b9 Teleperformance \u5ba3\u4f20\u89c6\u9891\u63cf\u8ff0\u4e86\u5b83\u5982\u4f55\u901a\u8fc7\u5206\u6790\u6444\u50cf\u5934\u53cd\u9988\uff0c\u5728\u8fdc\u7a0b\u5458\u5de5\u4e2d\u4f7f\u7528\u201c\u4eba\u5de5\u667a\u80fd\u6765\u76d1\u63a7\u6e05\u6d01\u684c\u9762\u653f\u7b56\u548c\u6b3a\u8bc8\u201d\u3002\u5728 6 \u6708\u4efd\u53d1\u5e03\u7684\u6700\u65b0\u8d22\u62a5\u4e2d\uff0cTeleperformance \u8868\u793a\uff0c\u7531\u4e8e TP Cloud Campus \u4ea7\u54c1\uff0c\u5b83\u5df2\u5c06\u5176\u7ea6 380,000 \u540d\u5458\u5de5\u4e2d\u7684 240,000 \u4eba\u8f6c\u79fb\u5230\u5728\u5bb6\u5de5\u4f5c\u3002 2020 \u5e74\u5e95\uff0c\u963f\u5c14\u5df4\u5c3c\u4e9a Teleperformance \u7684\u5458\u5de5\uff0c\u5305\u62ec\u5728 Apple UK \u8d26\u6237\u4e0a\u5de5\u4f5c\u7684\u5458\u5de5\uff0c\u5411\u8be5\u56fd\u7684\u4fe1\u606f\u548c\u6570\u636e\u4fdd\u62a4\u4e13\u5458\u6295\u8bc9\u8be5\u516c\u53f8\u5728\u5176\u5bb6\u4e2d\u5f15\u5165\u89c6\u9891\u76d1\u63a7\u7684\u63d0\u8bae\u3002\u4e13\u5458\u540e\u6765\u88c1\u5b9a Teleperformance \u4e0d\u80fd\u4f7f\u7528\u7f51\u7edc\u6444\u50cf\u5934\u6765\u76d1\u63a7\u5bb6\u4e2d\u7684\u963f\u5c14\u5df4\u5c3c\u4e9a\u5de5\u4eba\u3002\n\u52a0\u5dde\u5927\u5b66\u9ed1\u65af\u5ef7\u65af\u5206\u6821\u52b3\u52a8\u6cd5\u6559\u6388\u7ef4\u5a1c\u00b7\u675c\u5df4\u5c14 (Veena Dubal) \u8bf4\uff1a\u201c\u5728\u5927\u6d41\u884c\u7684\u80cc\u666f\u4e0b\uff0c\u5728\u5bb6\u4e2d\u7684\u76d1\u63a7\u786e\u5b9e\u5df2\u7ecf\u6b63\u5e38\u5316\u4e86\u3002\u201d \u201c\u516c\u53f8\u770b\u5230\u5b89\u88c5\u8f6f\u4ef6\u8fdb\u884c\u5404\u79cd\u76d1\u63a7\u7684\u597d\u5904\u5f88\u591a\uff0c\u5426\u5219\u4ed6\u4eec\u539f\u672c\u5e0c\u671b\u4ed6\u4eec\u7684\u4eba\u5de5\u7ecf\u7406\u4f1a\u8fd9\u6837\u505a\uff0c\u4f46\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u5b83\u6bd4\u8001\u677f\u8fdb\u884c\u7684\u76d1\u63a7\u66f4\u5177\u4fb5\u5165\u6027\u3002\u201d Teleperformance \u53d1\u8a00\u4eba\u9a6c\u514b\u00b7\u83f2\u4f5b (Mark Pfeiffer) \u8868\u793a\uff0c\u8be5\u516c\u53f8\u201c\u4e00\u76f4\u5728\u5bfb\u627e\u65b9\u6cd5\u6765\u589e\u5f3a\u6211\u4eec\u7684\u5458\u5de5\u548c\u5ba2\u6237\u7684 Teleperformance \u54e5\u4f26\u6bd4\u4e9a\u4f53\u9a8c\uff0c\u9690\u79c1\u548c\u5c0a\u91cd\u662f\u6211\u4eec\u6240\u505a\u7684\u4e00\u5207\u7684\u5173\u952e\u56e0\u7d20\u3002\u201d \u201c\u6211\u4eec\u81f4\u529b\u4e8e\u516c\u5e73\u5b9e\u8df5\u3001\u5e73\u7b49\u3001\u5305\u5bb9\u3001\u591a\u6837\u6027\u3001\u975e\u6b67\u89c6\u3001\u52b3\u5de5\u53ef\u6301\u7eed\u6027\u3001\u9053\u5fb7\u548c\u900f\u660e\u5ea6\uff0c\u201dPfeiffer \u8bf4\uff0c\u201c\u6211\u4eec\u5c06\u7ee7\u7eed\u5c3d\u4e00\u5207\u52aa\u529b\u4e3a\u6211\u4eec\u7684\u56e2\u961f\u548c\u6240\u6709\u4eba\u7ef4\u62a4\u8fd9\u4e9b\u4ef7\u503c\u89c2\u3002\u6211\u4eec\u7684\u4e3b\u8981\u5229\u76ca\u76f8\u5173\u8005\u3002\u201d\u4ed6\u8bf4\uff0c\u8be5\u5408\u540c\u5bfb\u6c42\u5bf9\u5404\u79cd\u53ef\u80fd\u60c5\u51b5\u7684\u540c\u610f\uff0c\u4ee5\u786e\u4fdd Teleperformance \u5728\u7ee7\u7eed\u5f00\u53d1\u5de5\u5177\u4ee5\u4f18\u5316\u5458\u5de5\u548c\u5ba2\u6237\u5728\u5bb6\u4e2d\u7684\u957f\u671f\u5de5\u4f5c\u65f6\u9075\u5b88\u6570\u636e\u9690\u79c1\u6cd5\u3002\u4ed6\u8865\u5145\u8bf4\uff0cTeleperformance \u521a\u521a\u5728\u54e5\u4f26\u6bd4\u4e9a\u88ab\u8ba4\u8bc1\u4e3a\u6700\u4f73\u5de5\u4f5c\u573a\u6240\uff0c\u8fd9\u662f\u4e00\u9879\u57fa\u4e8e\u5bf9\u6570\u5343\u540d\u5458\u5de5\u7684\u4fdd\u5bc6\u8c03\u67e5\u7684\u7b2c\u4e09\u65b9\u8ba4\u8bc1\uff0c\u8fde\u7eed\u7b2c\u56db\u5e74\uff0c\u4ed6\u8bf4\uff0c\u201c\u8bc1\u5b9e\u4e86\u6211\u4eec\u7684\u7edd\u5927\u591a\u6570\u5c3d\u7ba1\u6211\u4eec\u90fd\u751f\u6d3b\u5728\u5145\u6ee1\u6311\u6218\u7684\u65f6\u4ee3\uff0c\u4f46\u54e5\u4f26\u6bd4\u4e9a\u7684\u5458\u5de5\u8ba4\u4e3a\u6211\u4eec\u662f\u4e00\u4e2a\u516c\u5e73\u3001\u6709\u7231\u5fc3\u548c\u503c\u5f97\u4fe1\u8d56\u7684\u96c7\u4e3b\u3002\u201d\u4f46\u8fd9\u79cd\u538b\u529b\u4f3c\u4e4e\u5e76\u4e0d\u662f\u76f4\u63a5\u6765\u81ea\u82f9\u679c\u7b49\u4e00\u4e9b\u516c\u53f8\u3002 Apple \u53d1\u8a00\u4eba Nick Leahy \u8868\u793a\uff0c\u8be5\u516c\u53f8\u201c\u7981\u6b62\u6211\u4eec\u7684\u4f9b\u5e94\u5546\u4f7f\u7528\u89c6\u9891\u6216\u6444\u5f71\u76d1\u63a7\uff0c\u5e76\u786e\u8ba4 Teleperformance \u4e0d\u4f1a\u5bf9\u5176\u4e0e Apple \u5408\u4f5c\u7684\u4efb\u4f55\u56e2\u961f\u4f7f\u7528\u89c6\u9891\u76d1\u63a7\u3002\u201d Leahy \u8868\u793a\uff0c\u82f9\u679c\u4eca\u5e74\u5728\u54e5\u4f26\u6bd4\u4e9a\u5bf9 Teleperformance \u8fdb\u884c\u4e86\u5ba1\u8ba1\uff0c\u5e76\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u201c\u8fdd\u53cd\u6211\u4eec\u4e25\u683c\u6807\u51c6\u7684\u6838\u5fc3\u884c\u4e3a\u201d\u3002 \u201c\u6211\u4eec\u8c03\u67e5\u6240\u6709\u7d22\u8d54\uff0c\u5e76\u5c06\u7ee7\u7eed\u786e\u4fdd\u6211\u4eec\u4f9b\u5e94\u94fe\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u5f97\u5230\u5c0a\u4e25\u548c\u5c0a\u91cd\uff0c\u201d\u4ed6\u8865\u5145\u8bf4\u3002\n\u5728\u5927\u6d41\u884c\u671f\u95f4\uff0cTeleperformance \u4e0e\u8bb8\u591a\u5176\u4ed6\u516c\u53f8\u4e00\u6837\uff0c\u5c06\u5176\u5168\u7403\u5927\u90e8\u5206\u5458\u5de5\u8f6c\u79fb\u5230\u5728\u5bb6\u5de5\u4f5c\u3002\u8d77\u521d\uff0c\u8be5\u516c\u53f8\u5728\u83f2\u5f8b\u5bbe\u7684\u4e00\u4e9b\u5458\u5de5\u7684\u7167\u7247\u88ab\u6cc4\u9732\u7ed9\u65b0\u95fb\u5a92\u4f53\u540e\u9762\u4e34\u5de5\u4f1a\u7684\u56fd\u9645\u5ba1\u67e5 - \u83f2\u5f8b\u5bbe\u662f Teleperformance \u5458\u5de5\u4eba\u6570\u6700\u591a\u7684\u56fd\u5bb6 - \u5728\u5de5\u4f5c\u4e2d\u7761\u89c9\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u53ef\u4ee5\u5728\u529e\u516c\u5ba4\u505a\u51fa\u56de\u5e94\u7ed9\u7f8e\u56fd\u65f6\u533a\u7684 Amazon Ring \u5ba2\u6237\u3002\u5f53\u65f6\uff0c\u4e00\u4e9b\u5de5\u4eba\u62b1\u6028\u529e\u516c\u5ba4\u7684\u6761\u4ef6\uff0c\u5e76\u8868\u793a\u4ed6\u4eec\u60f3\u8981\u5728\u5bb6\u5de5\u4f5c\u7684\u65b9\u4fbf\u548c\u5b89\u5168\u3002\u6ca1\u6709\u8ff9\u8c61\u8868\u660e\u54e5\u4f26\u6bd4\u4e9a\u5de5\u4eba\u5728\u529e\u516c\u5ba4\u7761\u89c9\u3002\u7136\u800c\uff0c\u5de5\u4f5c\u4eba\u5458\u8868\u793a\uff0c\u8fd9\u79cd\u4fbf\u5229\u548c\u5b89\u5168\u4f3c\u4e4e\u4f34\u968f\u7740\u4fb5\u72af\u9690\u79c1\u7684\u95ee\u9898\u3002\u5458\u5de5\u8bf4\uff0c\u4eca\u5e74 3 \u6708\uff0cTeleperformance \u7684\u5168\u7403\u5458\u5de5\uff08\u5305\u62ec\u5176 39,000 \u540d\u8fdc\u7a0b\u5de5\u4f5c\u7684\u54e5\u4f26\u6bd4\u4e9a\u5458\u5de5\u4e2d\u7684 95%\uff09\u6536\u5230\u4e86\u4e00\u4efd 8 \u9875\u7684\u73b0\u6709\u96c7\u4f63\u5408\u540c\u9644\u5f55\uff0c\u8981\u6c42\u4ed6\u4eec\u540c\u610f\u65b0\u7684\u5bb6\u5ead\u76d1\u63a7\u89c4\u5219\u3002\u5de5\u4eba\u4eec\u8bf4\uff0c\u7ba1\u7406\u5c42\u544a\u8bc9\u4ed6\u4eec\uff0c\u5ba2\u6237\u8981\u6c42\u8fdb\u884c\u989d\u5916\u7684\u76d1\u63a7\uff0c\u4ee5\u63d0\u9ad8\u5b89\u5168\u6027\u5e76\u9632\u6b62\u4ed6\u4eec\u5728\u5bb6\u5de5\u4f5c\u65f6\u56e0\u5927\u6d41\u884c\u800c\u53d1\u751f\u4efb\u4f55\u6570\u636e\u6cc4\u9732\u3002\u8be5\u6587\u4ef6\u8981\u6c42\u5de5\u4eba\u540c\u610f\u5728\u4ed6\u4eec\u7684\u5bb6\u4e2d\u6216\u8ba1\u7b97\u673a\u4e0a\u5b89\u88c5\u6444\u50cf\u673a\uff0c\u6307\u5411\u4ed6\u4eec\u7684\u5de5\u4f5c\u533a\uff0c\u5b9e\u65f6\u8bb0\u5f55\u548c\u76d1\u63a7\u5de5\u4eba\u3002\u5b83\u8fd8\u6307\u51fa\uff0c\u5de5\u4f5c\u4eba\u5458\u540c\u610f\u4f7f\u7528\u57fa\u4e8e\u4eba\u5de5\u667a\u80fd\u7684\u89c6\u9891\u5206\u6790\u5de5\u5177\u8fdb\u884c Teleperformance\uff0c\u8be5\u5de5\u5177\u53ef\u4ee5\u8bc6\u522b\u5de5\u4f5c\u533a\u5468\u56f4\u7684\u7269\u4f53\uff0c\u5305\u62ec\u624b\u673a\u3001\u7eb8\u5f20\u548c\u5176\u4ed6\u53d7 Teleperformance \u5b89\u5168\u7b56\u7565\u9650\u5236\u7684\u7269\u54c1\u3002\u4ed6\u4eec\u8fd8\u5fc5\u987b\u540c\u610f\u5171\u4eab\u4e0e\u4ed6\u4eec\u6240\u62e5\u6709\u7684\u4efb\u4f55 18 \u5c81\u4ee5\u4e0b\u513f\u7ae5\u76f8\u5173\u7684\u6570\u636e\u548c\u56fe\u50cf\u2014\u2014\u4ed6\u4eec\u53ef\u80fd\u4f1a\u88ab\u89c6\u9891\u548c\u97f3\u9891\u76d1\u63a7\u5de5\u5177\u53d1\u73b0\u2014\u2014\u5e76\u5171\u4eab\u751f\u7269\u8bc6\u522b\u6570\u636e\uff0c\u5305\u62ec\u6307\u7eb9\u548c\u7167\u7247\u3002\u8fd8\u6709\u4e00\u4e2a\u6761\u6b3e\u8981\u6c42\u5de5\u4eba\u6839\u636e\u8981\u6c42\u8fdb\u884c\u6d4b\u8c0e\u6d4b\u8bd5\u3002 Teleperformance \u53d1\u8a00\u4eba Pfeiffer \u8868\u793a\uff0c\u6444\u50cf\u5934\u7528\u4e8e\u62bd\u67e5\u516c\u53f8\u7684\u6e05\u6d01\u529e\u516c\u684c\u653f\u7b56\uff0c\u5076\u5c14\u8fd8\u7528\u4e8e\u786e\u4fdd\u9075\u5b88\u6570\u636e\u5b89\u5168\u6d41\u7a0b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u8bb0\u5f55\u5458\u5de5\u7684\u4efb\u4f55\u6570\u636e\u3002\u4ed6\u8bf4\uff0c\u76ee\u524d\u4ec5\u5728 Teleperformance \u7684\u4e09\u4e2a\u5e02\u573a\u4e2d\u6d4b\u8bd5\u4e86\u57fa\u4e8e\u4eba\u5de5\u667a\u80fd\u7684\u89c6\u9891\u5206\u6790\u3002\u4ed6\u8bf4\uff0c\u5458\u5de5\u540c\u610f\u5171\u4eab\u751f\u7269\u8bc6\u522b\u6570\u636e\uff0c\u5e76\u4e14\u5728\u5458\u5de5\u540c\u610f\u7684\u60c5\u51b5\u4e0b\uff0c\u6d4b\u8c0e\u4eea\u7528\u4e8e\u7279\u5b9a\u7684\u5b89\u5168\u7814\u7a76\u3002\u8be5\u516c\u53f8\u627f\u8ba4\u8981\u6c42\u5458\u5de5\u540c\u610f\u5171\u4eab\u4e0e\u672a\u6210\u5e74\u4eba\u6709\u5173\u7684\u6570\u636e\uff0c\u4f46\u8868\u793a\u4e0d\u4f1a\u5728 Teleperformance \u4e4b\u5916\u5171\u4eab\u8fd9\u4e9b\u6570\u636e\u3002\u4e0e\u82f9\u679c\u4e0d\u540c\u7684\u662f\uff0c\u4f18\u6b65\u8868\u793a\uff0c\u5b83\u8981\u6c42\u76d1\u63a7\u5458\u5de5\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u5458\u5de5\u3002\u4f18\u6b65\u53d1\u8a00\u4eba Lois Van Der Laan \u8868\u793a\uff0c\u5176\u5ba2\u6237\u670d\u52a1\u4ee3\u7406\u53ef\u4ee5\u8bbf\u95ee\u79c1\u4eba\u548c\u654f\u611f\u7684\u7528\u6237\u4fe1\u606f\uff0c\u5305\u62ec\u4fe1\u7528\u5361\u8be6\u7ec6\u4fe1\u606f\u548c\u884c\u7a0b\u6570\u636e\uff0c\u800c\u4fdd\u62a4\u8fd9\u4e9b\u4fe1\u606f\u662f\u4f18\u6b65\u7684\u9996\u8981\u4efb\u52a1\u3002\u56e0\u6b64\uff0c\u4f18\u6b65\u8981\u6c42 Teleperformance \u76d1\u63a7\u5728\u5176\u5e10\u6237\u4e0a\u5de5\u4f5c\u7684\u5458\u5de5\uff0c\u4ee5\u9a8c\u8bc1\u53ea\u6709\u53d7\u96c7\u7684\u5458\u5de5\u624d\u80fd\u8bbf\u95ee\u6570\u636e\uff1b\u5916\u5305\u5458\u5de5\u6ca1\u6709\u5728\u624b\u673a\u7b49\u5176\u4ed6\u8bbe\u5907\u4e0a\u8bb0\u5f55\u5c4f\u5e55\u6570\u636e\uff1b\u5e76\u4e14\u6ca1\u6709\u672a\u7ecf\u6388\u6743\u7684\u4eba\u9760\u8fd1\u8ba1\u7b97\u673a\u3002\u5979\u8bf4\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u4f18\u6b65\u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u7684\u76d1\u63a7\u3002\u5408\u540c\u4e2d\u8be6\u7ec6\u8bf4\u660e\u7684\u5bb6\u5ead\u76d1\u63a7\u6c34\u5e73\u7684\u524d\u666f\uff0c\u5f53\u547c\u53eb\u5df2\u7ecf\u88ab\u8f6f\u4ef6\u5bc6\u5207\u76d1\u63a7\u65f6\uff0c\u8ba9 Teleperformance \u7684\u4e00\u4e9b\u5ba2\u6237\u670d\u52a1\u4ee3\u7406\u611f\u5230\u9707\u60ca\u3002\u4e9a\u9a6c\u900a\u8d26\u6237\u4e0a\u7684\u4e00\u540d\u5458\u5de5\u5728\u54e5\u4f26\u6bd4\u4e9a\u4e0a\u591c\u73ed\uff0c\u4ee5\u4fbf\u4e3a\u897f\u73ed\u7259\u7684\u5ba2\u6237\u63d0\u4f9b\u670d\u52a1\u3002\u5979\u516c\u5bd3\u91cc\u552f\u4e00\u5b89\u9759\u5230\u53ef\u4ee5\u63a5\u542c\u5ba2\u6237\u7535\u8bdd\u7684\u623f\u95f4\u662f\u5979\u548c\u4e08\u592b\u5171\u7528\u7684\u5367\u5ba4\u3002\u5f53\u4ed6\u7761\u5728\u5e8a\u4e0a\u65f6\uff0c\u5979\u4ece\u529e\u516c\u684c\u4e0a\u63a5\u542c\u7535\u8bdd\u3002\u5979\u544a\u8bc9 NBC \u65b0\u95fb\uff0c\u5979\u62c5\u5fc3\u9ea6\u514b\u98ce\u53ef\u80fd\u4f1a\u542c\u5230\u4ed6\u6253\u9f3e\u7684\u58f0\u97f3\u3002\n\u5979\u88ab\u8981\u6c42\u5728\u8bad\u7ec3\u671f\u95f4\u4fdd\u6301\u7535\u8111\u7684\u6444\u50cf\u5934\u6253\u5f00\uff0c\u4f46\u8868\u793a Teleperformance \u5c1a\u672a\u5728\u5979\u5bb6\u4e2d\u5b89\u88c5\u989d\u5916\u7684\u6444\u50cf\u5934\u6216\u76d1\u63a7\u3002 \u201c\u8fd9\u4fb5\u72af\u4e86\u6211\u7684\u9690\u79c1\u6743\uff0c\u4ee5\u53ca\u4e0e\u6211\u540c\u4f4f\u7684\u4e08\u592b\u548c\u5cb3\u6bcd\u7684\u6743\u5229\uff0c\u201d\u5979\u8bf4\u3002\u4e9a\u9a6c\u900a\u53d1\u8a00\u4eba Alyssa Bronikowski \u8868\u793a\uff0c\u4e9a\u9a6c\u900a\u6ca1\u6709\u8981\u6c42\u5bf9\u5728\u5bb6\u5de5\u4f5c\u7684\u5458\u5de5\u8fdb\u884c\u4efb\u4f55\u989d\u5916\u76d1\u63a7\u3002 \u201c\u8bf4\u6211\u4eec\u8981\u6c42\u6216\u8981\u6c42\u91c7\u53d6\u8fd9\u4e9b\u63aa\u65bd\u662f\u4e0d\u771f\u5b9e\u7684\uff0c\u201d\u5979\u8bf4\uff0c\u5e76\u8865\u5145\u8bf4\u4e9a\u9a6c\u900a\u201c\u4e0d\u5bb9\u5fcd\u201d\u8fdd\u53cd\u5176\u4f9b\u5e94\u5546\u884c\u4e3a\u51c6\u5219\u7684\u884c\u4e3a\uff0c\u8be5\u51c6\u5219\u89c4\u5b9a\u627f\u5305\u5546\u5fc5\u987b\u5c0a\u91cd\u52b3\u5de5\u6743\u5229\uff0c\u5305\u62ec\u5efa\u7acb\u6216\u52a0\u5165\u5de5\u4f1a\uff0c\u201c\u6211\u4eec\u4f1a\u5b9a\u671f\u5ba1\u6838\u4f9b\u5e94\u5546\u7684\u5408\u89c4\u6027\u3002\u201d\u4e00\u4e9b Teleperformance \u5458\u5de5\u975e\u5e38\u62c5\u5fc3\u540c\u610f\u5168\u9762\u76d1\u63a7\u7684\u538b\u529b\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u4eec\u5f00\u59cb\u7ec4\u7ec7\u8d77\u6765\u6539\u5584\u4ed6\u4eec\u7684\u5de5\u4f5c\u6761\u4ef6\u3002\u5468\u4e00\uff0c\u4ed6\u4eec\u5411 Utraclaro y TIC \u5de5\u4f1a\u63d0\u4ea4\u4e86\u4e00\u7cfb\u5217\u8981\u6c42\uff0c\u8be5\u5de5\u4f1a\u901a\u5e38\u7ec4\u7ec7 IT \u90e8\u95e8\u7684\u5de5\u4eba\uff0c\u5e76\u4e14\u5df2\u7ecf\u5728\u547c\u53eb\u4e2d\u5fc3\u5de8\u5934 Atento\uff08Teleperformance \u7684\u7ade\u4e89\u5bf9\u624b\uff09\u7684\u54e5\u4f26\u6bd4\u4e9a\u4e1a\u52a1\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5de5\u4f1a\u3002\u8fd9\u4e9b\u8981\u6c42\u5305\u62ec\u4eab\u6709\u96c6\u4f1a\u81ea\u7531\u800c\u4e0d\u5fc5\u62c5\u5fc3\u906d\u5230\u62a5\u590d\u7684\u6743\u5229\u3001\u8f83\u5c11\u7684\u4fb5\u5165\u6027\u76d1\u89c6\u3001\u52a0\u73ed\u8d39\u3001\u901a\u8bdd\u95f4\u9694 30 \u79d2\u3001\u66f4\u660e\u786e\u7684\u7eaa\u5f8b\u7a0b\u5e8f\u4ee5\u53ca\u652f\u4ed8\u7528\u4e8e\u5728\u5bb6\u5de5\u4f5c\u7684\u8bbe\u5907\u7684\u8d39\u7528\uff0c\u5305\u62ec\u6905\u5b50\u548c\u684c\u5b50\uff0c\u4f5c\u4e3a\u4ee5\u53ca\u53ef\u9760\u7684\u4e92\u8054\u7f51\u8fde\u63a5\u3002 \u201c\u6211\u4eec\u5e0c\u671b Teleperformance \u7684\u5458\u5de5\u53ef\u4ee5\u81ea\u7531\u52a0\u5165\u5de5\u4f1a\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u5931\u53bb\u5de5\u4f5c\uff0c\u201d\u5de5\u4f1a\u4e3b\u5e2d Yuli Higuera \u8bf4\uff0c\u8be5\u5de5\u4f1a\u5728\u54e5\u4f26\u6bd4\u4e9a\u62e5\u6709\u7ea6 1,200 \u540d\u6210\u5458\u3002\u5979\u8bf4\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5927\u7ea6\u6709 100 \u540d Teleperformance \u5458\u5de5\u52a0\u5165\u4e86\u5de5\u4f1a\u3002\u53d1\u8a00\u4eba Pfeiffer \u8868\u793a\uff0c\u5de5\u4f1a\u63d0\u51fa\u7684\u8981\u6c42\u201c\u5e76\u975e\u5168\u90e8\u57fa\u4e8e\u60ef\u4f8b\u6216\u4e8b\u5b9e\u201d\uff0c\u516c\u53f8\u6253\u7b97\u76f4\u63a5\u4e0e\u5de5\u4f1a\u89e3\u51b3\u6bcf\u4e00\u4e2a\u95ee\u9898\u3002 \u201c\u6211\u4eec\u91cd\u89c6\u6211\u4eec\u7684\u5458\u5de5\u53ca\u5176\u798f\u7949\u3001\u5b89\u5168\u548c\u5e78\u798f\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u6211\u4eec\u662f\u4e00\u5bb6\u4ee5\u4eba\u4e3a\u672c\u7684\u4f01\u4e1a\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u5728\u96c6\u4f53\u8c08\u5224\u7684\u5404\u4e2a\u65b9\u9762\u771f\u8bda\u5730\u884c\u4e8b\u3002\u201d\u54e5\u4f26\u6bd4\u4e9a\u7684\u7ec4\u7ec7\u8005\u9762\u4e34\u7684\u98ce\u9669\u5c24\u5176\u9ad8\uff0c\u56e0\u4e3a\u9488\u5bf9\u5de5\u4f1a\u6210\u5458\u7684\u66b4\u529b\u884c\u4e3a\u5f88\u666e\u904d\uff0c\u800c\u4e14\u52b3\u5de5\u4fdd\u62a4\u63aa\u65bd\u8584\u5f31\u3002\u6839\u636e\u56fd\u9645\u5de5\u4f1a\u8054\u5408\u4f1a\u7684 2021 \u5e74\u5168\u7403\u6743\u5229\u6307\u6570\uff0c\u4ece 2020 \u5e74 3 \u6708\u5230 4 \u6708\uff0c\u54e5\u4f26\u6bd4\u4e9a\u6709 22 \u540d\u5de5\u4f1a\u6210\u5458\u88ab\u6740\u3002\u7535\u89c6\u8868\u6f14\u4e0e\u4efb\u4f55\u6b64\u7c7b\u66b4\u529b\u4e8b\u4ef6\u90fd\u6ca1\u6709\u5173\u8054\u3002\n\u201c\u7531\u4e8e\u6211\u7684\u7ec4\u7ec7\uff0c\u6211\u81ea\u5df1\u66fe\u4e24\u6b21\u53d7\u5230\u6b7b\u4ea1\u5a01\u80c1\uff0c\u201d\u4f0a\u683c\u62c9\u8bf4\u3002 \u201c\u5728\u54e5\u4f26\u6bd4\u4e9a\u6210\u7acb\u5de5\u4f1a\u5e76\u4e0d\u5bb9\u6613\uff0c\u4f46\u8fd9\u662f\u6211\u5fc5\u987b\u505a\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u6709\u4fe1\u5fc3\u3001\u6027\u683c\u548c\u4fe1\u5ff5\uff0c\u6211\u4eec\u5c06\u901a\u8fc7 Teleperformance \u53d6\u5f97\u826f\u597d\u7684\u7ed3\u679c\u3002\u201d Higuera \u7684\u4e3b\u8981\u91cd\u70b9\u662f\u8ba9 Teleperformance \u8ba4\u53ef\u5de5\u4f1a\u5e76\u540c\u610f\u5141\u8bb8\u5de5\u4eba\u7ec4\u7ec7\u8d77\u6765\u800c\u4e0d\u4f1a\u9762\u4e34\u62a5\u590d\u3002 7 \u6708\uff0c\u7ecf\u6d4e\u5408\u4f5c\u4e0e\u53d1\u5c55\u7ec4\u7ec7\u7684\u6cd5\u56fd\u56fd\u5bb6\u8054\u7edc\u70b9\u4ee3\u8868\u7ecf\u5408\u7ec4\u7ec7\u4f5c\u4e3a\u8d1f\u8d23\u4efb\u7684\u8de8\u56fd\u4f01\u4e1a\u7684\u76d1\u7763\u673a\u6784\uff0c\u5411\u603b\u90e8\u4f4d\u4e8e\u5df4\u9ece\u7684 Teleperformance \u53d1\u5e03\u4e86\u4e00\u7cfb\u5217\u5efa\u8bae\uff0c\u5176\u4e2d\u5305\u62ec\u8be5\u516c\u53f8\u5e94\u8be5\u201c\u5c0a\u91cd\u5de5\u4eba\u7684\u7ed3\u793e\u81ea\u7531\u548c\u96c6\u4f53\u8c08\u5224\u7684\u6743\u5229\u201d\u3002\u8fd9\u4e9b\u5efa\u8bae\u662f\u5728 Teleperformance \u5728\u5927\u6d41\u884c\u671f\u95f4\u5f00\u59cb\u7ec4\u7ec7\u540e\u4e8e 2020 \u5e74\u7ec8\u6b62\u4e86\u51e0\u540d\u54e5\u4f26\u6bd4\u4e9a\u5de5\u4eba\u7ec4\u7ec7\u8005\u4e4b\u540e\u63d0\u51fa\u7684\u3002\u6cd5\u56fd\u56fd\u5bb6\u8054\u7edc\u70b9\uff08NCP\uff09\u5c06\u89e3\u96c7\u63cf\u8ff0\u4e3a\u201c\u7c7b\u4f3c\u4e8e\u53cd\u5de5\u4f1a\u505a\u6cd5\u201d\u3002 Teleperformance \u7684 Pfeiffer \u8868\u793a\uff0cNCP \u6d41\u7a0b\u4ec5\u6d89\u53ca\u8fd1 39,000 \u540d\u5458\u5de5\u4e2d\u7684 9 \u4e2a\u6848\u4f8b\uff0c\u5e76\u4e14\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u8bc1\u636e\u8868\u660e Teleperformance \u53c2\u4e0e\u4e86\u7cfb\u7edf\u7684\u53cd\u5de5\u4f1a\u6d3b\u52a8\u3002\u4ed6\u8bf4\uff0cTeleperformance \u54e5\u4f26\u6bd4\u4e9a\u9075\u5b88\u5f53\u5730\u52b3\u52a8\u6cd5\u548c\u56fd\u9645\u52b3\u5de5\u51c6\u5219\u3002 \u201c\u6211\u4eec\u6b22\u8fce NCP \u63d0\u51fa\u7684\u6539\u8fdb\u6211\u4eec\u65b9\u6cd5\u7684\u5efa\u8bae\uff0c\u201dPfeiffer \u8bf4\u3002 \u201c\u6211\u4eec\u5b8c\u5168\u81f4\u529b\u4e8e\u7ef4\u62a4\u5de5\u4eba\u7684\u7ec4\u7ec7\u6743\u3002\u201d\u5de5\u4eba\u4eec\u5bf9\u76d1\u63a7\u7684\u62c5\u5fe7\u5efa\u7acb\u5728\u300a\u536b\u62a5\u300b\u7684\u62a5\u9053\u4e4b\u4e0a\uff0c\u8be5\u62a5\u9053\u6839\u636e\u53d1\u9001\u7ed9\u5458\u5de5\u7684\u6587\u4ef6\u8be6\u7ec6\u8bf4\u660e\u4e86 Teleperformance \u8ba1\u5212\u5982\u4f55\u4f7f\u7528\u8fde\u63a5\u5230\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u7684\u4e13\u4e1a\u7f51\u7edc\u6444\u50cf\u5934\uff0c\u8be5\u7cfb\u7edf\u5c06\u5728\u8f6e\u73ed\u671f\u95f4\u626b\u63cf\u5b9e\u65f6\u89c6\u9891\u662f\u5426\u8fdd\u53cd\u5de5\u4f5c\u89c4\u5219\u5e76\u4e14\uff0c\u5982\u679c\u68c0\u6d4b\u5230\uff0c\u5c06\u8fdd\u89c4\u7684\u9759\u6001\u7167\u7247\u53d1\u9001\u7ed9\u7ecf\u7406\u3002\u6839\u636e\u8be5\u62a5\u544a\uff0c\u5982\u679c\u5458\u5de5\u60f3\u79bb\u5f00\u529e\u516c\u684c\uff0c\u5fc5\u987b\u5728\u516c\u53f8\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5355\u51fb\u201c\u4f11\u606f\u6a21\u5f0f\u201d\u5e76\u6dfb\u52a0\u89e3\u91ca\uff0c\u4f8b\u5982\u201c\u53d6\u6c34\u201d\uff0c\u4ee5\u786e\u4fdd\u7cfb\u7edf\u4e0d\u4f1a\u62a5\u544a\u4ed6\u4eec\u3002\u7cfb\u7edf\u8fd8\u4f1a\u68c0\u6d4b\u5de5\u4f5c\u4eba\u5458\u662f\u5426\u5728\u6b64\u671f\u95f4\u6ca1\u6709\u8f93\u5165\u6216\u70b9\u51fb\u9f20\u6807\u5e76\u5c06\u5de5\u4f5c\u4eba\u5458\u6807\u8bb0\u4e3a\u7a7a\u95f2\u3002 Teleperformance \u8868\u793a\uff0c\u82f1\u56fd\u4e0d\u4f1a\u4f7f\u7528\u8fdc\u7a0b\u626b\u63cf\u8fdd\u89c4\u884c\u4e3a\uff0c\u7f51\u7edc\u6444\u50cf\u5934\u53ea\u4f1a\u7528\u4e8e\u4f1a\u8bae\u548c\u57f9\u8bad\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5176\u4ed6\u56fd\u5bb6\u7684\u8fdc\u7a0b\u76d1\u63a7\u6c34\u5e73\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u76d1\u63a7\u5df2\u63a8\u5e7f\u5230\u5370\u5ea6\u3001\u58a8\u897f\u54e5\u548c\u83f2\u5f8b\u5bbe\u3002\nUNI Global \u7684\u5168\u7403\u79d8\u4e66 Christy Hoffman \u652f\u6301\u4e16\u754c\u5404\u5730\u5de5\u4eba\u7684\u5de5\u4f1a\u6743\u5229\uff0c\u5e76\u4e00\u76f4\u5728\u4e0e Teleperformance \u7684\u7ec4\u7ec7\u8005\u8fdb\u884c\u534f\u8c03\uff0c\u5979\u8bf4\uff0c\u5728\u5927\u6d41\u884c\u671f\u95f4\u547c\u53eb\u4e2d\u5fc3\u884c\u4e1a\u4e00\u76f4\u5728\u84ec\u52c3\u53d1\u5c55\u3002\u8fd9\u662f\u56e0\u4e3a\u8d8a\u6765\u8d8a\u591a\u7684\u5de5\u4f5c\u5df2\u7ecf\u8f6c\u79fb\u5230\u7f51\u4e0a\uff0c\u7f8e\u56fd\u7684\u5927\u578b\u516c\u53f8\u8d8a\u6765\u8d8a\u4f9d\u8d56\u4e8e\u50cf Teleperformance \u8fd9\u6837\u7684\u516c\u53f8\u7684\u5916\u5305\u5de5\u4eba\uff0c\u8fd9\u4e9b\u516c\u53f8\u603b\u90e8\u4f4d\u4e8e\u54e5\u4f26\u6bd4\u4e9a\u548c\u83f2\u5f8b\u5bbe\u7b49\u52b3\u52a8\u529b\u66f4\u4fbf\u5b9c\u7684\u56fd\u5bb6\u3002 \u201c\u5de5\u4f5c\u4eba\u5458\u4ece\u547c\u53eb\u4e2d\u5fc3\u8f6c\u79fb\u5230\u4eba\u4eec\u7684\u5bb6\u4e2d\uff0c\u5e76\u4e14\u56e0\u6b64\u589e\u52a0\u4e86\u76d1\u63a7\u548c\u6570\u636e\u91c7\u96c6\uff0c\u8fd9\u786e\u5b9e\u964d\u4f4e\u4e86\u4ed6\u4eec\u7684\u5de5\u4f5c\u6761\u4ef6\uff0c\u201d\u5979\u8bf4\u3002\u970d\u592b\u66fc\u547c\u5401\u82f9\u679c\u548c\u4e9a\u9a6c\u900a\u7b49 Teleperformance \u7684\u5ba2\u6237\u5229\u7528\u4ed6\u4eec\u7684\u5f71\u54cd\u529b\u6765\u6539\u5584\u5916\u5305\u5de5\u4eba\u7684\u5de5\u4f5c\u6761\u4ef6\u3002 \u201c\u4ece\u54e5\u4f26\u6bd4\u4e9a\u6cd5\u5f8b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4ed6\u4eec\u4e0d\u76f4\u63a5\u8d1f\u8d23\uff0c\u201d\u5979\u8bf4\u3002 \u201c\u4f46\u4ed6\u4eec\u6709\u5f71\u54cd\u529b\uff0c\u4ed6\u4eec\u6700\u7ec8\u63a7\u5236\u7740\u4e3a\u4ed6\u4eec\u7684\u4e1a\u52a1\u5c65\u884c\u804c\u8d23\u7684\u5de5\u4eba\u7684\u6761\u4ef6\u3002\u201d", "note_en": "Colombia-based call center workers who provide outsourced customer service to some of the nation\u2019s largest companies are being pressured to sign a contract that lets their employer install cameras in their homes to monitor work performance, an NBC News investigation has found.\n Six workers based in Colombia for Teleperformance, one of the world\u2019s largest call center companies, which counts Apple, Amazon and Uber among its clients, said that they are concerned about the new contract, first issued in March. The contract allows monitoring by AI-powered cameras in workers\u2019 homes, voice analytics and storage of data collected from the worker\u2019s family members, including minors. Teleperformance employs more than 380,000 workers globally, including 39,000 workers in Colombia.\n   \u201cThe contract allows constant monitoring of what we are doing, but also our family,\u201d said a Bogota-based worker on the Apple account who was not authorized to speak to the news media. \u201cI think it\u2019s really bad. We don\u2019t work in an office. I work in my bedroom. I don\u2019t want to have a camera in my bedroom.\u201d\n The worker said that she signed the contract, a copy of which NBC News has reviewed, because she feared losing her job. She said that she was told by her supervisor that she would be moved off the Apple account if she refused to sign the document. She said the additional surveillance technology has not yet been installed.\n The concerns of the workers, who all spoke on the condition of anonymity because they were not authorized to speak to the media, highlight a pandemic-related trend that has alarmed privacy and labor experts: As many workers have shifted to performing their duties at home, some companies are pushing for increasing levels of digital monitoring of their staff in an effort to recreate the oversight of the office at home.\n The issue is not isolated to Teleperformance\u2019s workers in Colombia. The company states on its website that it offers similar monitoring through its  TP Cloud Campus product, the software it uses to enable staff to work remotely in more than 19 markets. An official Teleperformance  promotional video for TP Cloud Campus from January 2021 describes how it uses \u201cAI to monitor clean desk policy and fraud\u201d among its remote workers by analyzing camera feeds. And in its  latest earnings statement, released in June, Teleperformance said it has shifted 240,000 of its approximately 380,000 employees to working from home thanks to the TP Cloud Campus product.\n  At the end of 2020, workers at Teleperformance in Albania, including those working on the Apple U.K. account, complained to the country\u2019s Information and Data Protection Commissioner about the company\u2019s proposal to introduce video monitoring in their homes. The commissioner  later ruled that Teleperformance could not use webcams to monitor Albanian workers in their homes.\n \u201cSurveillance at home has really been normalized in the context of the pandemic,\u201d said Veena Dubal, a labor law professor at the University of California, Hastings. \u201cCompanies see a lot of benefit in putting in software to do all kinds of monitoring they would have otherwise expected their human managers to do, but the reality is that it\u2019s much more intrusive than surveillance conducted by a boss.\u201d\n Teleperformance spokesman Mark Pfeiffer said that the company is \u201cconstantly looking for ways to enhance the Teleperformance Colombia experience for both our employees and our customers, with privacy and respect as key factors in everything we do.\u201d\n \u201cWe are committed to fair practices, equality, inclusion, diversity, non-discrimination, labor sustainability, ethics, and transparency,&#34; Pfeiffer said, &#34;and we will continue to do everything we can to uphold these values for both our teams and all our key stakeholders.\u201d\n  The contract seeks consent for a wide range of possible scenarios to ensure that Teleperformance complies with data privacy laws as it continues to develop tools to optimize long-term work from home for employees and clients, he said.\n He added Teleperformance has just been certified in Colombia as a  Great Place to Work, a third-party certification that\u2019s based on confidential surveys of thousands of employees, for the fourth consecutive year, which, he said, \u201cvalidated that the vast majority of our employees in Colombia view us favorably as a fair, caring and trustworthy employer, despite the challenging times we are all living in.\u201d\n But it does not appear that this pressure is directly coming from some companies like Apple. Apple spokesperson Nick Leahy said that the company \u201cprohibits the use of video or photographic monitoring by our suppliers and have confirmed Teleperformance does not use video monitoring for any of their teams working with Apple.\u201d Leahy said that Apple had audited Teleperformance in Colombia this year and did not find any \u201ccore violations of our strict standards.\u201d\n \u201cWe investigate all claims and will continue to ensure everyone across our supply chain is treated with dignity and respect,\u201d he added.\n   During the pandemic, Teleperformance, like many other companies, shifted the majority of its employees globally to working from home. At the start, the company faced  international scrutiny from  labor unions after photos were leaked to news outlets of some of its staff in the Philippines \u2014 the country with the highest number of Teleperformance workers \u2014 sleeping at work so they could be in the office to respond to Amazon Ring customers in U.S. time zones. At the time,  some workers complained about the office conditions and said they wanted the convenience and safety of working at home. There are no signs that workers from Colombia slept at the office.\n  However, that convenience and safety appears to have come with a privacy infringing catch, said workers. In March, members of Teleperformance\u2019s global workforce, including 95 percent of its 39,000 Colombian employees who were working remotely, were sent an eight-page addendum to their existing employment contracts that asked them to agree to new home surveillance rules, workers said. Workers said that management told them clients requested the additional monitoring to improve security and prevent any data breaches while they were working from home because of the pandemic.\n The document asks workers to agree to having video cameras installed in their home or on their computers, pointing at their workspace, to record and monitor workers in real time. It also states that workers agree to Teleperformance using AI-powered video analysis tools that can identify objects around the workspace, including mobile phones, paper and other items that are restricted by Teleperformance\u2019s security policies. They must also agree to sharing data and images related to any children they have under the age of 18 \u2014 who might get picked up by video and audio monitoring tools \u2014 and to sharing biometric data including fingerprints and photos. There is also a clause that requires workers to take polygraph tests if requested.\n Pfeiffer, the Teleperformance spokesperson, said that cameras were used for spot checks of the company\u2019s clean desk policy and occasionally to ensure compliance with data security processes and that no data is recorded from employees. He said that the AI-powered video analysis was currently being tested in just three of Teleperformance\u2019s markets. He said that employees consented to sharing biometric data and that polygraphs are used in specific security studies with employees\u2019 consent. The company acknowledged asking workers to consent to sharing data relating to minors, but said that it did not share this data outside of Teleperformance.\n Unlike Apple, Uber said that it requested monitoring for its workers, but not the entire workforce. Uber spokesperson Lois Van Der Laan said that its customer service agents have access to private and sensitive user information, including credit card details and trip data, and that protecting that information is a priority for Uber. As a result, Uber requested Teleperformance to monitor staff working on its accounts to verify that only a hired employee is accessing the data; that outsourced staff weren\u2019t recording screen data on another device such as a phone; and that no unauthorized person was near the computer. Uber does not require any additional monitoring beyond that, she said.\n   The prospect of the level of surveillance at home detailed in the contract, when calls are already closely monitored by software, alarmed some of Teleperformance\u2019s customer service agents.\n  One worker on the Amazon account works night shifts from Colombia so she can serve customers in Spain. The only room in her apartment that is quiet enough to take customer calls is the bedroom she shares with her husband. She takes calls from a desk while he sleeps on the bed. She\u2019s worried the microphones might pick up the sound of him snoring, she told NBC News.\n   She was required to keep her computer\u2019s camera on during training, but said Teleperformance has not yet installed additional cameras or monitoring in her home.\n \u201cIt\u2019s a violation of my privacy rights, and the rights of my husband and mother-in-law who live with me,\u201d she said.\n Amazon spokesperson Alyssa Bronikowski said that Amazon did not request any additional monitoring for at-home workers. \u201cIt is not true to say we required or asked for these measures,\u201d she said, adding that Amazon \u201cdoes not tolerate violations\u201d of its  vendor code of conduct, which stipulates that contractors must respect labor rights, including the right to establish or join a union, \u201cand we routinely audit our vendors for compliance.\u201d\n   Some Teleperformance workers have become so concerned about the pressure to agree to sweeping surveillance that they have started to organize to improve their working conditions. On Monday they submitted a set of demands to their employer with the Utraclaro y TIC union, which typically organizes workers in the IT sector and has already created a union within the Colombian operations of call center giant Atento, a Teleperformance competitor. The demands include the right to freedom of assembly without fear of retaliation, less intrusive surveillance, overtime pay, 30-second breaks between calls, clearer disciplinary processes and covering the cost of equipment used to work from home, including a chair and desk, as well as a reliable internet connection.\n  \u201cWe want workers at Teleperformance to have the freedom to join a trade union without fear of losing their jobs,\u201d said Yuli Higuera, president of the union, which has about 1,200 members in Colombia. So far, about 100 Teleperformance workers have joined the union, she said.\n Pfeiffer, the spokesperson, said that the demands submitted by the union were \u201cnot all based on practice or facts\u201d and that the company intends to address each one with the union directly. \u201cWe value our people and their well being, safety and happiness,\u201d he said. \u201cWe are a people-centric business and we will continue to act in good faith regarding all aspects of collective bargaining.\u201d\n The stakes for organizers in Colombia are particularly high, as violence against trade unionists is common and labor protections are weak. From March 2020 to April, 22 trade unionists were killed in Colombia, according to the International Trade Union Confederation\u2019s Global Rights Index 2021. Teleperformance has not been linked to any of this violence.\n \u201cI myself have been threatened with death twice because of my organizing,\u201d said Higuera. \u201cMaking a union in Colombia is not easy, but it\u2019s work I have to do and we have the confidence, disposition and faith that we are going to achieve a good outcome with Teleperformance.\u201d\n  Higuera\u2019s primary focus is to get Teleperformance to recognize the union and agree to allow workers to organize without facing retaliation. In July, the French National Contact Point to the Organization for Economic Cooperation and Development, which acts as a watchdog for responsible multinational businesses on behalf of the OECD,  issued a set of recommendations to Teleperformance, which is based in Paris, including that the company should have \u201crespect for the right of freedom of association and collective bargaining of workers.\u201d\n The recommendations came after Teleperformance  terminated several Colombian worker organizers in 2020 after they started to organize during the pandemic. The French National Contact Point, or NCP, described the dismissals as  \u201cakin to anti-union practices.\u201d\n Teleperformance\u2019s Pfeiffer said that the NCP process referred to just 9 cases out of almost 39,000 employees and that it found no evidence that Teleperformance was engaging in systematic anti-union activities. Teleperformance Colombia complies with local labor law and international labor guidelines, he said. \u201cWe welcome the NCP\u2019s recommendations for enhancing our approach,\u201d Pfeiffer said. \u201cWe are fully committed to the workers\u2019 right to organize.\u201d\n The workers\u2019 concerns over surveillance builds on  reporting by The Guardian, which detailed, based on documents sent to staff, how Teleperformance planned to use specialist webcams connected to an artificial intelligence system that would scan live video for breaches of work rules during the work shift and, if detected, send a still photo of the infraction to a manager.\n  According to the report, workers would have to click \u201cbreak mode\u201d in a company app if they wanted to leave their desks and add an explanation, such as \u201cgetting water,\u201d to ensure the system didn\u2019t report them. The system would also detect if the worker had not typed or clicked the mouse and mark the worker as idle during that time.\n Teleperformance said that the remote scans for infractions would not be used in the U.K. and that webcams would only be used for meetings and training. Levels of remote monitoring would be different in other countries, the company said. The company said that the monitoring had been rolled out to India, Mexico and the Philippines.\n   Christy Hoffman, global secretary of UNI Global, which supports workers\u2019 rights to unionize across the world and has been coordinating with organizers at Teleperformance, said that the call center industry has been booming during the pandemic. That\u2019s because more work has shifted online and large, U.S.-based companies are increasingly relying on outsourced workers at companies like Teleperformance based in countries like Colombia and the Philippines where labor is cheaper.\n  \u201cThe shift of workers out of call centers and into people\u2019s homes and the increased monitoring and data capture as a result has really degraded their working conditions,\u201d she said.\n Hoffman called on Teleperformance\u2019s clients such as Apple and Amazon to use their influence to improve the working conditions of their outsourced workers.\n \u201cThey are not directly responsible from the point of view of Colombian laws,\u201d she said. \u201cBut they have leverage and they ultimately control the conditions for workers who perform duties for their operations.\u201d", "posttime": "2021-08-09 05:04:17", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4eba\u5de5\u667a\u80fd,amazon,\u82f9\u679c,\u4e9a\u9a6c\u900a,apple", "title": "\u4ee5\u82f9\u679c\u3001\u4e9a\u9a6c\u900a\u548c\u4f18\u6b65\u4e3a\u5ba2\u6237\u7684\u547c\u53eb\u4e2d\u5fc3\u8fd0\u8425\u5546 Teleperformance \u5e0c\u671b\u901a\u8fc7\u4eba\u5de5\u667a\u80fd\u6444\u50cf\u5934\u76d1\u63a7\u5728\u54e5\u4f26\u6bd4\u4e9a\u5728\u5bb6\u5de5\u4f5c\u7684\u5458\u5de5", "title_en": "Call center operator Teleperformance, which counts Apple, Amazon, and Uber as clients, wants to monitor staff working from home in Colombia, via AI-powered cams", "transed": 1, "url": "https://www.nbcnews.com/tech/tech-news/big-tech-call-center-workers-face-pressure-accept-home-surveillance-n1276227", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "amazon", "\u82f9\u679c", "\u4e9a\u9a6c\u900a", "apple"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072186, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6ce8\u610f\uff1a\u8fd9\u7bc7\u6587\u7ae0\u5df2\u66f4\u65b0\u4e3a\u9002\u7528\u4e8e Julia 1.x\uff08\u539f\u59cb\u7248\u672c\u4f7f\u7528 Julia 0.1 \u8bed\u6cd5\uff09\u3002\u5728\u4e4b\u524d\u7684\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u8c08\u5230\u4e86\u4e3a\u4ec0\u4e48\u901a\u8fc7\u4e2d\u95f4 shell \u751f\u6210\u5916\u90e8\u7a0b\u5e8f\u7ba1\u9053\u662f\u5bfc\u81f4\u9519\u8bef\u3001\u5b89\u5168\u6f0f\u6d1e\u3001\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u548c\u9759\u9ed8\u6545\u969c\u7684\u5e38\u89c1\u539f\u56e0\u3002\u4f46\u662f\u5b9e\u5728\u662f\u592a\u65b9\u4fbf\u4e86\uff01\u4e3a\u4ec0\u4e48\u8fd0\u884c\u5916\u90e8\u7a0b\u5e8f\u7684\u7ba1\u9053\u4e0d\u80fd\u65b9\u4fbf\u548c\u5b89\u5168\uff1f\u597d\u5427\uff0c\u5b9e\u9645\u4e0a\u6ca1\u6709\u771f\u6b63\u7684\u539f\u56e0\u3002 shell \u672c\u8eab\u80fd\u591f\u5f88\u597d\u5730\u6784\u5efa\u548c\u6267\u884c\u7ba1\u9053\u3002\u539f\u5219\u4e0a\uff0c\u6ca1\u6709\u4ec0\u4e48\u80fd\u963b\u6b62\u9ad8\u7ea7\u8bed\u8a00\u81f3\u5c11\u50cf shell \u90a3\u6837\u505a\u2014\u2014\u666e\u901a\u7684\u53ea\u662f\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u8fd9\u6837\u505a\uff0c\u800c\u662f\u8981\u6c42\u7528\u6237\u4ed8\u51fa\u989d\u5916\u7684\u52aa\u529b\u6765\u5b89\u5168\u6b63\u786e\u5730\u4f7f\u7528\u5916\u90e8\u7a0b\u5e8f\u3002\u6709\u4e24\u4e2a\u4e3b\u8981\u969c\u788d\uff1a \u4f7f\u7528\u7ba1\u9053\u3001dup2\u3001fork\u3001close \u548c exec \u7cfb\u7edf\u8c03\u7528\u7684\u4e00\u4e9b\u4e2d\u7b49\u68d8\u624b\u7684\u4f4e\u7ea7 UNIX \u7ba1\u9053\uff1b\u8fd9\u7bc7\u6587\u7ae0\u63cf\u8ff0\u4e86\u6211\u4eec\u4e3a Julia \u8bbe\u8ba1\u548c\u5b9e\u73b0\u7684\u7cfb\u7edf\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u907f\u514d\u5176\u4ed6\u8bed\u8a00\u7684\u4e3b\u8981\u7f3a\u9677\u3002\u9996\u5148\uff0c\u6211\u5c06\u5c55\u793a\u4e0a\u4e00\u7bc7\u6587\u7ae0\u793a\u4f8b\u7684 Julia \u7248\u672c\u2014\u2014\u8ba1\u7b97\u7ed9\u5b9a\u76ee\u5f55\u4e2d\u5305\u542b\u5b57\u7b26\u4e32\u201cfoo\u201d\u7684\u884c\u6570\u3002\u5f53\u7ba1\u9053\u51fa\u73b0\u6545\u969c\u65f6\uff0cJulia \u4f1a\u63d0\u4f9b\u5b8c\u6574\u3001\u5177\u4f53\u7684\u8bca\u65ad\u9519\u8bef\u6d88\u606f\u8fd9\u4e00\u4e8b\u5b9e\u8bc1\u660e\u4e86\u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u4e14\u5fae\u5999\u7684\u9519\u8bef\uff0c\u6f5c\u4f0f\u5728\u4e00\u4e2a\u770b\u4f3c\u5b8c\u5168\u65e0\u5bb3\u7684 UNIX \u7ba1\u9053\u4e2d\u3002\u4fee\u590d\u6b64\u9519\u8bef\u540e\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd Julia \u7684\u5916\u90e8\u547d\u4ee4\u6267\u884c\u548c\u7ba1\u9053\u6784\u5efa\u7cfb\u7edf\u7684\u5b9e\u9645\u5de5\u4f5c\u65b9\u5f0f\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5b83\u6bd4\u4f7f\u7528\u4e2d\u95f4\u58f3\u6765\u5b8c\u6210\u6240\u6709\u7e41\u91cd\u5de5\u4f5c\u7684\u4f20\u7edf\u65b9\u6cd5\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u548c\u5b89\u5168\u6027\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u7f16\u5199\u5728 Julia \u4e2d\u8ba1\u7b97\u5305\u542b\u5b57\u7b26\u4e32\u201cfoo\u201d\u7684\u76ee\u5f55\u4e2d\u7684\u884c\u6570\u7684\u793a\u4f8b\uff08\u5982\u679c\u60a8\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5\u4e86 Julia\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5c06\u76ee\u5f55\u66f4\u6539\u4e3a Julia \u6e90\u76ee\u5f55\u5e76\u6267\u884c cp -a src &quot;source code&quot;; mkdir tmp \u7136\u540e\u542f\u52a8 Julia repl): julia&gt; dir = &quot;src&quot;; # \u5728 Juliajulia \u7684 git repo \u4e2d\u5de5\u4f5c&gt; parse(Int, readchomp(pipeline( `find $dir -type f -print0`, `xargs -0 grep foo`, `wc -l`, )))5 \u8fd9\u4e2a Julia \u547d\u4ee4\u770b\u8d77\u6765\u53ef\u7591\u5730\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u5f00\u59cb\u7684\u539f\u59cb Ruby \u7248\u672c\uff1a\njulia&gt; dir = &quot;source code&quot;;julia&gt; parse(Int, readchomp(pipeline(`find $dir -type f -print0`, `xargs -0 grep foo`, `wc -l`, )))5julia&gt; dir = &quot;\u4e0d\u5b58\u5728&quot;;julia&gt; parse(Int, readchomp(pipeline(`find $dir -type f -print0`, `xargs -0 grep foo`, `wc -l`, )))find: &#39;nonexistent&#39;: No\u6b64\u7c7b\u6587\u4ef6\u6216\u76ee\u5f55\u9519\u8bef\uff1a\u8fdb\u7a0b\u5931\u8d25\uff1a\u8fdb\u7a0b\uff08`find nonexistent -type f -print0`, ProcessExited(1)) [1] Process(`xargs -0 grep foo`, ProcessExited(123)) [123]julia&gt; dir = &quot;foo&#39;; echo \u6076\u610f\u653b\u51fb; echo &#39;&quot;;julia&gt; parse(Int, readchomp(pipeline(`find $dir -type f -print0`, `xargs -0 grep foo`, `wc -l`, )))\u627e\u5230\uff1a&#39;\u5bcc&#39;;\u56de\u58f0\u6076\u610f\u653b\u51fb\uff1b echo &#39;&#39;\uff1a\u6ca1\u6709\u8fd9\u6837\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u9519\u8bef\uff1a\u8fdb\u7a0b\u5931\u8d25\uff1a\u8fdb\u7a0b\uff08`find &quot;foo&#39;; echo \u6076\u610f\u653b\u51fb; echo &#39;&quot; -type f -print0`, ProcessExited(1)) [1] Process(`xargs -0 grep foo`, ProcessExited(123)) [123] \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5373\u4f7f dir \u5305\u542b\u7a7a\u683c\u6216\u5f15\u53f7\uff0c\u8868\u8fbe\u5f0f\u7684\u884c\u4e3a\u4ecd\u7136\u5b8c\u5168\u7b26\u5408\u9884\u671f\u2014\u2014dir \u7684\u503c\u4f5c\u4e3a\u5355\u4e2a\u53c2\u6570\u63d2\u5165\u5230 find \u547d\u4ee4\u4e2d.\u5f53 dir \u4e0d\u662f\u5b58\u5728\u7684\u76ee\u5f55\u7684\u540d\u79f0\u65f6\uff0c find \u5931\u8d25 - \u5e94\u8be5\u5982\u6b64 - \u5e76\u4e14\u4f1a\u68c0\u6d4b\u5230\u6b64\u5931\u8d25\u5e76\u81ea\u52a8\u8f6c\u6362\u4e3a\u4fe1\u606f\u5f02\u5e38\uff0c\u5305\u62ec\u5931\u8d25\u7684\u5b8c\u5168\u5c55\u5f00\u7684\u547d\u4ee4\u884c\u3002\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u5bf9 Bash \u4f7f\u7528 pipefail \u9009\u9879\u53ef\u4ee5\u68c0\u6d4b\u7ba1\u9053\u6545\u969c\uff0c\u4f8b\u5982\u5728\u7ba1\u9053\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u8fdb\u7a0b\u4e4b\u524d\u53d1\u751f\u7684\u7ba1\u9053\u6545\u969c\u3002\u7136\u800c\uff0c\u5b83\u53ea\u5141\u8bb8\u6211\u4eec\u68c0\u6d4b\u5230\u7ba1\u9053\u4e2d\u81f3\u5c11\u6709\u4e00\u4ef6\u4e8b\u60c5\u5931\u8d25\u4e86\u3002\u6211\u4eec\u4ecd\u7136\u9700\u8981\u731c\u6d4b\u7ba1\u9053\u7684\u54ea\u4e9b\u90e8\u5206\u5b9e\u9645\u4e0a\u5931\u8d25\u4e86\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728 Julia \u793a\u4f8b\u4e2d\uff0c\u4e0d\u9700\u8981\u731c\u6d4b\uff1a\u5f53\u7ed9\u51fa\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u76ee\u5f55\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 find \u548c xargs \u90fd\u5931\u8d25\u4e86\u3002\u867d\u7136\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b find \u5931\u8d25\u5e76\u4e0d\u5947\u602a\uff0c\u4f46\u51fa\u4e4e\u610f\u6599\u7684\u662f xargs \u4e5f\u5931\u8d25\u4e86\u3002\u4e3a\u4ec0\u4e48 xargs \u5931\u8d25\uff1f\u68c0\u67e5\u7684\u4e00\u79cd\u53ef\u80fd\u6027\u662f xargs \u7a0b\u5e8f\u5728\u6ca1\u6709\u8f93\u5165\u7684\u60c5\u51b5\u4e0b\u5931\u8d25\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Julia \u7684\u6210\u529f\u8c13\u8bcd\u6765\u5c1d\u8bd5\u4e00\u4e0b\uff1a\u597d\u7684\uff0c\u6240\u4ee5 xargs \u5728\u6ca1\u6709\u8f93\u5165\u7684\u60c5\u51b5\u4e0b\u4f3c\u4e4e\u975e\u5e38\u6ee1\u610f\u3002\u4e5f\u8bb8 grep \u4e0d\u559c\u6b22\u6ca1\u6709\u4efb\u4f55\u8f93\u5165\uff1f\u554a\u54c8\uff01\u5f53 grep \u6ca1\u6709\u5f97\u5230\u4efb\u4f55\u8f93\u5165\u65f6\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u975e\u96f6\u72b6\u6001\u3002\u5f88\u9ad8\u5174\u77e5\u9053\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0cgrep \u6307\u793a\u5b83\u662f\u5426\u4e0e\u8fd4\u56de\u72b6\u6001\u5339\u914d\u4efb\u4f55\u5185\u5bb9\u3002\u5927\u591a\u6570\u7a0b\u5e8f\u4f7f\u7528\u5b83\u4eec\u7684\u8fd4\u56de\u72b6\u6001\u6765\u6307\u793a\u6210\u529f\u6216\u5931\u8d25\uff0c\u4f46\u6709\u4e9b\u7a0b\u5e8f\uff0c\u5982 grep\uff0c\u4f7f\u7528\u5b83\u6765\u6307\u793a\u5176\u4ed6\u4e00\u4e9b\u5e03\u5c14\u6761\u4ef6\u2014\u2014\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u201c\u627e\u5230\u4e86\u4e00\u4e9b\u4e1c\u897f\u201d\u4e0e\u201c\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u4e1c\u897f\u201d\uff1a\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e3a\u4ec0\u4e48 grep \u662f\u201c\u5931\u8d25\u201d \u2013 \u548c xargs \u4e5f\u662f\u5982\u6b64\uff0c\u56e0\u4e3a\u5982\u679c\u5b83\u8fd0\u884c\u7684\u7a0b\u5e8f\u8fd4\u56de\u975e\u96f6\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u975e\u96f6\u72b6\u6001\u3002\u8fd9\u610f\u5473\u7740\u5f53\u6211\u4eec\u641c\u7d22\u4e00\u4e2a\u73b0\u6709\u76ee\u5f55\u65f6\uff0c\u6211\u4eec\u7684 Julia \u7ba1\u9053\u548c\u201c\u8d1f\u8d23\u4efb\u7684\u201dRuby \u7248\u672c\u90fd\u5bb9\u6613\u53d7\u5230\u865a\u5047\u6545\u969c\u7684\u5f71\u54cd\uff0c\u800c\u8be5\u76ee\u5f55\u78b0\u5de7\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u4e0d\u5305\u542b\u5b57\u7b26\u4e32\u201cflippity\u201d\uff1a\njulia&gt; dir = &quot;src&quot;;julia&gt; parse(Int, readchomp(pipeline(`find $dir -type f -print0`, `xargs -0 grep flippity`, `wc -l`, ))) \u9519\u8bef\uff1a\u8fdb\u7a0b\u5931\u8d25: Process(`xargs -0 grep flippity`, ProcessExited(123)) [123] \u7531\u4e8e grep \u4f7f\u7528\u975e\u96f6\u8fd4\u56de\u72b6\u6001\u6307\u793a\u672a\u627e\u5230\u4efb\u4f55\u5185\u5bb9\uff0c\u56e0\u6b64 readchomp \u51fd\u6570\u5f97\u51fa\u7ed3\u8bba\uff0c\u5176\u7ba1\u9053\u5931\u8d25\u5e76\u5f15\u53d1\u76f8\u5e94\u7684\u9519\u8bef\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u9ed8\u8ba4\u884c\u4e3a\u662f\u4e0d\u53ef\u53d6\u7684\uff1a\u6211\u4eec\u5e0c\u671b\u8868\u8fbe\u5f0f\u53ea\u8fd4\u56de 0 \u800c\u4e0d\u4f1a\u5f15\u53d1\u9519\u8bef\u3002 Julia \u4e2d\u7684\u7b80\u5355\u4fee\u590d\u662f\u8fd9\u6837\u7684\uff1a julia&gt; parse(Int, readchomp(pipeline( `find $dir -type f -print0`, ignorestatus(`xargs -0 grep flippity`), `wc -l`, )))0\u8fd9\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u89e3\u91ca\u6240\u6709\u8fd9\u4e9b\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4f46\u73b0\u5728\u53ea\u9700\u6ce8\u610f\uff0c\u5f53\u6211\u4eec\u7684\u7ba1\u9053\u5931\u8d25\u65f6\u63d0\u4f9b\u7684\u8be6\u7ec6\u9519\u8bef\u6d88\u606f\u66b4\u9732\u4e86\u4e00\u4e2a\u76f8\u5f53\u5fae\u5999\u7684\u9519\u8bef\uff0c\u6700\u7ec8\u4f1a\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528\u65f6\u5bfc\u81f4\u5fae\u5999\u4e14\u96be\u4ee5\u8c03\u8bd5\u7684\u95ee\u9898\u3002\u5982\u679c\u6ca1\u6709\u5982\u6b64\u8be6\u7ec6\u7684\u9519\u8bef\u62a5\u544a\uff0c\u8fd9\u4e2a\u9519\u8bef\u5c06\u5f88\u96be\u8ffd\u8e2a\u3002 Julia \u4ece Perl \u548c Ruby \u501f\u7528\u4e86\u5916\u90e8\u547d\u4ee4\u7684\u53cd\u5f15\u53f7\u8bed\u6cd5\uff0c\u800c\u8fd9\u4e24\u8005\u53c8\u662f\u4ece shell \u4e2d\u83b7\u5f97\u7684\u3002\u7136\u800c\uff0c\u4e0e\u8fd9\u4e9b\u524d\u8f88\u4e0d\u540c\u7684\u662f\uff0c\u5728 Julia \u4e2d\u53cd\u5f15\u53f7\u4e0d\u4f1a\u7acb\u5373\u8fd0\u884c\u547d\u4ee4\uff0c\u4e5f\u4e0d\u4e00\u5b9a\u8868\u660e\u60a8\u60f3\u8981\u6355\u83b7\u547d\u4ee4\u7684\u8f93\u51fa\u3002\u76f8\u53cd\uff0c\u53cd\u5f15\u53f7\u53ea\u662f\u6784\u9020\u4e00\u4e2a\u8868\u793a\u547d\u4ee4\u7684\u5bf9\u8c61\uff1a\uff08\u5728 Julia repl \u4e2d\uff0c ans \u81ea\u52a8\u7ed1\u5b9a\u5230\u6700\u540e\u4e00\u4e2a\u8bc4\u4f30\u8f93\u5165\u7684\u503c\u3002\uff09\u4e3a\u4e86\u5b9e\u9645\u8fd0\u884c\u547d\u4ee4\uff0c\u60a8\u5fc5\u987b\u5bf9\u547d\u4ee4\u5bf9\u8c61\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\u3002\u8981\u8fd0\u884c\u547d\u4ee4\u5e76\u5c06\u5176\u8f93\u51fa\u6355\u83b7\u5230\u5b57\u7b26\u4e32\u4e2d - \u5176\u4ed6\u8bed\u8a00\u4f1a\u81ea\u52a8\u4f7f\u7528\u53cd\u5f15\u53f7 - \u60a8\u53ef\u4ee5\u5e94\u7528\u5e26\u6709 String \u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684 read \u51fd\u6570\uff0c\u6307\u793a\u60a8\u60f3\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u5b57\u8282\u6570\u7ec4\uff1a\u56e0\u4e3a\u60f3\u8981\u4e22\u5f03\u547d\u4ee4\u8f93\u51fa\u672b\u5c3e\u7684\u5c3e\u968f\u6362\u884c\u7b26\uff0cJulia \u63d0\u4f9b\u4e86 readchomp(x) \u547d\u4ee4\uff0c\u5b83\u7b49\u6548\u4e8e\u7f16\u5199 chomp(read(x, String))\uff1a\n\u8981\u5728\u4e0d\u6355\u83b7\u5176\u8f93\u51fa\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u547d\u4ee4\uff0c\u8ba9\u5b83\u53ea\u6253\u5370\u5230\u4e0e\u4e3b\u8fdb\u7a0b\u76f8\u540c\u7684 stdout \u6d41 - \u5373\u5f53\u5c06\u547d\u4ee4\u4f5c\u4e3a\u5176\u4ed6\u8bed\u8a00\u7684\u5b57\u7b26\u4e32\u7ed9\u51fa\u65f6\u7cfb\u7edf\u51fd\u6570\u4f1a\u505a\u4ec0\u4e48 - \u4f7f\u7528\u8fd0\u884c\u51fd\u6570\uff1a\u201cHello\u201d\u4e4b\u540ereadchomp \u547d\u4ee4\u662f\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u800c run \u547d\u4ee4\u540e\u7684 Hello \u662f\u6253\u5370\u8f93\u51fa\u3002 Process(`echo Hello`, ProcessExited(0)) \u662f run \u8fd4\u56de\u7684\u503c\u3002 \uff08\u5982\u679c\u60a8\u7684\u7ec8\u7aef\u652f\u6301\u989c\u8272\uff0c\u5219\u5b83\u4eec\u7684\u989c\u8272\u4e0d\u540c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u89c6\u89c9\u4e0a\u533a\u5206\u5b83\u4eec\u3002\uff09\u5982\u679c\u51fa\u73b0\u95ee\u9898\uff0c\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\uff1ajulia&gt; run(`false`)ERROR: failed process: Process(`false`, ProcessExited(1)) [1]julia&gt; run(`notaprogram`)ERROR: IOError: could not spawn `notaprogram`: no such file or directory (ENOENT) \u4e0e\u4e0a\u9762\u7684 xargs \u548c grep \u4e00\u6837\uff0c\u8fd9\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u53ef\u53d6\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 ignorestatus \u6765\u6307\u793a\u4e0d\u5e94\u5c06\u8fd4\u56de\u975e\u96f6\u503c\u7684\u547d\u4ee4\u89c6\u4e3a\u9519\u8bef\uff1a julia&gt; run(ignorestatus(`false`))Process(`false`, ProcessExited(1))julia&gt; run(ignorestatus(`notaprogram`))ERROR: IOError: could not spawn `notaprogram`: no such file or directory (ENOENT) \u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u7236\u8fdb\u7a0b\u4e2d\u4ecd\u7136\u4f1a\u5f15\u53d1\u9519\u8bef\uff0c\u56e0\u4e3a\u95ee\u9898\u662f\u53ef\u6267\u884c\u6587\u4ef6\u6ca1\u6709&#39;\u751a\u81f3\u4e0d\u5b58\u5728\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5b83\u8fd0\u884c\u5e76\u8fd4\u56de\u975e\u96f6\u72b6\u6001\u3002\u5c3d\u7ba1 Julia \u7684\u53cd\u5f15\u53f7\u8bed\u6cd5\u6709\u610f\u5c3d\u53ef\u80fd\u5730\u6a21\u4eff shell\uff0c\u4f46\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u533a\u522b\uff1a\u547d\u4ee4\u5b57\u7b26\u4e32\u6c38\u8fdc\u4e0d\u4f1a\u4f20\u9012\u7ed9 shell \u4ee5\u4f9b\u89e3\u91ca\u548c\u6267\u884c\uff1b\u76f8\u53cd\uff0c\u5b83\u5728 Julia \u4ee3\u7801\u4e2d\u88ab\u89e3\u6790\uff0c\u4f7f\u7528\u4e0e shell \u7528\u6765\u786e\u5b9a\u547d\u4ee4\u548c\u53c2\u6570\u662f\u4ec0\u4e48\u76f8\u540c\u7684\u89c4\u5219\u3002\u547d\u4ee4\u5bf9\u8c61\u770b\u8d77\u6765\u6709\u70b9\u50cf\u5b57\u7b26\u4e32\uff0c\u4f46\u5b83\u4eec\u5b9e\u9645\u4e0a\u66f4\u50cf\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5982\u679c\u4f60\u6536\u96c6\u4e00\u4e2a\u547d\u4ee4\u5c31\u53ef\u4ee5\u770b\u5230\uff1a\njulia&gt; cmd = `perl -e &#39;print &quot;Hello\\n&quot;&#39;``perl -e &#39;print &quot;Hello\\n&quot;&#39;`julia&gt; collect(cmd)3-element Array{String,1}: &quot;perl&quot; &quot; -e&quot; &quot;print \\&quot;Hello\\\\n\\&quot;&quot; \u6240\u4ee5\u547d\u4ee4\u53ea\u662f\u4e00\u79cd\u6709\u8da3\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\u3002\u5982\u679c\u60a8\u7684\u7ec8\u7aef\u652f\u6301\u4e0b\u5212\u7ebf\uff0c\u547d\u4ee4\u4e2d\u7684\u5355\u4e2a\u5355\u8bcd\u5c06\u5e26\u6709\u4e0b\u5212\u7ebf\uff0c\u5e2e\u52a9\u60a8\u8f7b\u677e\u67e5\u770b\u5355\u8bcd\u4e4b\u95f4\u7684\u4e2d\u65ad\u4f4d\u7f6e\u3002 Julia \u4e2d\u53cd\u5f15\u53f7\u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u719f\u6089\u7684\u3001\u7c7b\u4f3c\u4e8e shell \u7684\u8bed\u6cd5\uff0c\u7528\u4e8e\u4f7f\u5bf9\u8c61\u8868\u793a\u5e26\u6709\u53c2\u6570\u7684\u547d\u4ee4\u3002\u4e3a\u6b64\uff0c\u5f15\u53f7\u548c\u7a7a\u683c\u7684\u4f5c\u7528\u4e0e\u5b83\u4eec\u5728 shell \u4e2d\u7684\u4f5c\u7528\u4e00\u6837\u3002\u7136\u800c\uff0c\u5728\u6211\u4eec\u5f00\u59cb\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u6784\u5efa\u547d\u4ee4\u4e4b\u524d\uff0c\u53cd\u5f15\u53f7\u8bed\u6cd5\u7684\u771f\u6b63\u5a01\u529b\u4e0d\u4f1a\u663e\u73b0\u3002\u5c31\u50cf\u5728 shell \u4e2d\uff08\u4ee5\u53ca\u5728 Julia \u5b57\u7b26\u4e32\u4e2d\uff09\u4e00\u6837\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u7f8e\u5143\u7b26\u53f7 ($) \u5c06\u503c\u63d2\u5165\u5230\u547d\u4ee4\u4e2d\uff1a\u7136\u800c\uff0c\u4e0e\u5728 shell \u4e2d\u4e0d\u540c\u7684\u662f\uff0c\u63d2\u5165\u5230\u547d\u4ee4\u4e2d\u7684 Julia \u503c\u88ab\u63d2\u5165\u4e3a\u5355\u4e2a\u9010\u5b57\u53c2\u6570 - \u91cc\u9762\u6ca1\u6709\u5b57\u7b26\u503c\u88ab\u63d2\u5165\u540e\u88ab\u89e3\u91ca\u4e3a\u7279\u6b8a\u503c\uff1a julia&gt; dir = &quot;two words&quot;;julia&gt; collect(`find $dir -type f`)4-element Array{String,1}: &quot;find&quot; &quot;two words &quot; &quot;-type&quot; &quot;f&quot;julia&gt; dir = &quot;foo&#39;bar&quot;;julia&gt; collect(`find $dir -type f`)4-element Array{String,1}: &quot;find&quot; &quot;foo&#39;bar&quot; &quot; -type&quot; &quot;f&quot; \u65e0\u8bba\u5185\u63d2\u503c\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\uff0c\u8fd9\u90fd\u6709\u6548\uff0c\u5141\u8bb8\u5bf9\u5373\u4f7f\u5728 shell \u4e2d\u4e5f\u5f88\u96be\u4f5c\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u7684\u4e00\u90e8\u5206\u4f20\u9012\u7684\u5b57\u7b26\u8fdb\u884c\u7b80\u5355\u5185\u63d2\uff08\u5bf9\u4e8e\u4ee5\u4e0b\u793a\u4f8b\uff0ctmp/a .tsv \u548c tmp/b.tsv \u53ef\u4ee5\u5728 shell \u4e2d\u4f7f\u7528 echo -e &quot;foo\\tbar\\nbaz\\tqux&quot; &gt; tmp/a.tsv; echo -e &quot;foo\\t1\\nbaz\\t2&quot; &gt; tmp/b \u521b\u5efa.tsv): julia&gt; tab = &quot;\\t&quot;;julia&gt; cmd = `join -t$tab tmp/a.tsv tmp/b.tsv`;julia&gt; c ollect(cmd)4-element Array{String,1}: &quot;join&quot; &quot;-t\\t&quot; &quot;tmp/a.tsv&quot; &quot;tmp/b.tsv&quot;julia&gt; run(cmd)foo bar 1baz qux 2Process(`\u52a0\u5165&#39;-t&#39; tmp/a.tsv tmp/b.tsv`, ProcessExited(0))\n\u6b64\u5916\uff0c$ \u540e\u9762\u7684\u5185\u5bb9\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4efb\u4f55\u6709\u6548\u7684 Julia \u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u53d8\u91cf\u540d\uff1a\u5236\u8868\u7b26\u5728 shell \u4e2d\u6709\u70b9\u96be\u4ee5\u4f20\u9012\uff0c\u9700\u8981\u547d\u4ee4\u63d2\u503c\u548c\u4e00\u4e9b\u68d8\u624b\u7684\u5f15\u7528\uff1a\u540c\u65f6\u7528\u7a7a\u683c\u548c\u5176\u4ed6\u5947\u602a\u7684\u5b57\u7b26\u63d2\u503c\u503c\u975e\u5e38\u9002\u5408\u547d\u4ee4\u7684\u975e\u8106\u5f31\u6784\u9020\uff0cshell \u9996\u5148\u5728\u7a7a\u683c\u4e0a\u62c6\u5206\u503c\u662f\u6709\u539f\u56e0\u7684\uff1a\u5141\u8bb8\u63d2\u5165\u591a\u4e2a\u53c2\u6570\u3002\u5927\u591a\u6570\u73b0\u4ee3 shell \u90fd\u5177\u6709\u4e00\u6d41\u7684\u6570\u7ec4\u7c7b\u578b\uff0c\u4f46\u8f83\u65e7\u7684 shell \u4f7f\u7528\u7a7a\u683c\u5206\u9694\u6765\u6a21\u62df\u6570\u7ec4\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5c06\u201cfoo bar\u201d\u4e4b\u7c7b\u7684\u503c\u63d2\u5165\u5230 shell \u4e2d\u7684\u547d\u4ee4\u4e2d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4f1a\u88ab\u89c6\u4e3a\u4e24\u4e2a\u5355\u72ec\u7684\u5355\u8bcd\u3002\u4f46\u662f\uff0c\u5728\u5177\u6709\u4e00\u6d41\u6570\u7ec4\u7c7b\u578b\u7684\u8bed\u8a00\u4e2d\uff0c\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9\uff1a\u59cb\u7ec8\u5c06\u5355\u4e2a\u503c\u4f5c\u4e3a\u5355\u4e2a\u53c2\u6570\u8fdb\u884c\u63d2\u503c\uff0c\u5e76\u5c06\u6570\u7ec4\u4f5c\u4e3a\u591a\u4e2a\u503c\u8fdb\u884c\u63d2\u503c\u3002\u8fd9\u6b63\u662f Julia \u7684\u53cd\u5f15\u53f7\u63d2\u503c\u6240\u505a\u7684\uff1a julia&gt; dirs = [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;];julia&gt; collect(`find $dirs -type f`)6-element Array{String,1}\uff1a &quot;find&quot; &quot;foo&quot; &quot;bar&quot; &quot;baz&quot; &quot;-type&quot; &quot;f&quot; \u5f53\u7136\uff0c\u65e0\u8bba\u5305\u542b\u5728\u5185\u63d2\u6570\u7ec4\u4e2d\u7684\u5b57\u7b26\u4e32\u591a\u4e48\u5947\u602a\uff0c\u5b83\u4eec\u90fd\u4f1a\u6210\u4e3a\u9010\u5b57\u53c2\u6570\uff0c\u65e0\u9700\u4efb\u4f55 shell \u89e3\u91ca\u3002\u6731\u8389\u5a05\u7684\u53cd\u5f15\u53f7\u8fd8\u6709\u4e00\u4e2a\u82b1\u54e8\u7684\u6280\u5de7\u3002\u6211\u4eec\u4e4b\u524d\u770b\u5230\uff08\u6ca1\u6709\u771f\u6b63\u8bc4\u8bba\u5b83\uff09\u60a8\u53ef\u4ee5\u5c06\u5355\u4e2a\u503c\u63d2\u5165\u5230\u66f4\u5927\u7684\u53c2\u6570\u4e2d\uff1aJulia \u6267\u884c shell \u4f1a\u6267\u884c\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u60a8\u7f16\u5199\u4e86 echo foo{bar,baz}\u3002\u8fd9\u751a\u81f3\u9002\u7528\u4e8e\u63d2\u5165\u5230\u540c\u4e00\u4e2a shell \u5355\u8bcd\u4e2d\u7684\u591a\u4e2a\u503c\uff1a\u5982\u679c\u5728\u540c\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4f7f\u7528\u591a\u4e2a {...} \u8868\u8fbe\u5f0f\uff0c\u8fd9\u4e0e shell \u6240\u505a\u7684\u7b1b\u5361\u5c14\u79ef\u6269\u5c55\u76f8\u540c\u3002\n\u60a8\u53ef\u4ee5\u5728 Julia \u7684\u5728\u7ebf\u624b\u518c\u4e2d\u9605\u8bfb\u66f4\u591a\u5185\u5bb9\uff0c\u5305\u62ec\u5982\u4f55\u6784\u5efa\u590d\u6742\u7684\u7ba1\u9053\uff0c\u4ee5\u53ca Julia \u53cd\u5f15\u53f7\u8bed\u6cd5\u4e2d\u4e0e shell \u517c\u5bb9\u7684\u5f15\u7528\u548c\u63d2\u503c\u89c4\u5219\u5982\u4f55\u4f7f\u5c06 shell \u547d\u4ee4\u526a\u5207\u5e76\u7c98\u8d34\u5230 Julia \u4ee3\u7801\u4e2d\u53d8\u5f97\u65e2\u7b80\u5355\u53c8\u5b89\u5168\u3002\u6574\u4e2a\u7cfb\u7edf\u7684\u8bbe\u8ba1\u539f\u5219\u662f\u6700\u7b80\u5355\u7684\u4e8b\u60c5\u4e5f\u5e94\u8be5\u662f\u6b63\u786e\u7684\u4e8b\u60c5\u3002\u6700\u7ec8\u7ed3\u679c\u662f\u5728 Julia \u4e2d\u542f\u52a8\u548c\u4e0e\u5916\u90e8\u8fdb\u7a0b\u4ea4\u4e92\u65e2\u65b9\u4fbf\u53c8\u5b89\u5168\u3002", "note_en": "Note: This post has been updated to work with Julia 1.x (the original version used Julia 0.1 syntax).\n  In a  previous post, I talked about why &#34;shelling out&#34; to spawn a pipeline of external programs via an intermediate shell is a common cause of bugs, security holes, unnecessary overhead, and silent failures. But it&#39;s so convenient! Why can&#39;t running pipelines of external programs be convenient  and safe? Well, there&#39;s no real reason, actually. The shell itself manages to construct and execute pipelines quite well. In principle, there&#39;s nothing stopping high-level languages from doing it at least as well as shells do \u2013 the common ones just don&#39;t by default, instead requiring users to make the extra effort to use external programs safely and correctly. There are two major impediments:\n  Some moderately tricky low-level UNIX plumbing using the   pipe,   dup2,   fork,   close, and   exec system calls;\n  This post describes the system we designed and implemented for Julia, and how it avoids the major flaws of shelling out in other languages. First, I&#39;ll present the Julia version of the previous post&#39;s example \u2013 counting the number of lines in a given directory containing the string &#34;foo&#34;. The fact that Julia provides complete, specific diagnostic error messages when pipelines fail turns out to reveal a surprising and subtle bug, lurking in what appears to be a perfectly innocuous UNIX pipeline. After fixing this bug, we go into details of how Julia&#39;s external command execution and pipeline construction system actually works, and why it provides greater flexibility and safety than the traditional approach of using an intermediate shell to do all the heavy lifting.\n    Here&#39;s how you write the example of counting the number of lines in a directory containing the string &#34;foo&#34; in Julia (you can follow along at home if you have Julia installed from source by changing directories into the Julia source directory and doing  cp -a src &#34;source code&#34;; mkdir tmp and then firing up the Julia repl):\n  julia&gt; dir = &#34;src&#34;; # works in the git repo for Juliajulia&gt; parse(Int, readchomp(pipeline( `find $dir -type f -print0`, `xargs -0 grep foo`, `wc -l`, )))5\n  This Julia command looks suspiciously similar to the na\u00efve Ruby version we started with in the previous post:\n    julia&gt; dir = &#34;source code&#34;;julia&gt; parse(Int, readchomp(pipeline( `find $dir -type f -print0`, `xargs -0 grep foo`, `wc -l`, )))5julia&gt; dir = &#34;nonexistent&#34;;julia&gt; parse(Int, readchomp(pipeline( `find $dir -type f -print0`, `xargs -0 grep foo`, `wc -l`, )))find: \u2018nonexistent\u2019: No such file or directoryERROR: failed processes: Process(`find nonexistent -type f -print0`, ProcessExited(1)) [1] Process(`xargs -0 grep foo`, ProcessExited(123)) [123]julia&gt; dir = &#34;foo&#39;; echo MALICIOUS ATTACK; echo &#39;&#34;;julia&gt; parse(Int, readchomp(pipeline( `find $dir -type f -print0`, `xargs -0 grep foo`, `wc -l`, )))find: \u2018foo&#39;; echo MALICIOUS ATTACK; echo &#39;\u2019: No such file or directoryERROR: failed processes: Process(`find &#34;foo&#39;; echo MALICIOUS ATTACK; echo &#39;&#34; -type f -print0`, ProcessExited(1)) [1] Process(`xargs -0 grep foo`, ProcessExited(123)) [123]\n   In the above examples, we can see that even when  dir contains spaces or quotes, the expression still behaves exactly as intended \u2013\u00a0the value of  dir is interpolated as a single argument to the  find command. When  dir is not the name of a directory that exists,  find fails \u2013 as it should \u2013 and this failure is detected and automatically converted into an informative exception, including the fully expanded command-lines that failed.\n In the previous post, we observed that using the  pipefail option for Bash allows detection of pipeline failures, like this one, occurring before the last process in the pipeline. However, it only allows us to detect that at least one thing in the pipeline failed. We still have to guess at what parts of the pipeline actually failed. In the Julia example, on the other hand, there is no guessing required: when a non-existent directory is given, we can see that both  find and  xargs fail. While it is unsurprising that  find fails in this case, it is unexpected that  xargs also fails. Why  does  xargs fail?\n One possibility to check for is that the  xargs program fails with no input. We can use Julia&#39;s  success predicate to try it out:\n  Ok, so  xargs seems perfectly happy with no input. Maybe grep doesn&#39;t like not getting any input?\n  Aha!  grep returns a non-zero status when it doesn&#39;t get any input. Good to know. It turns out that  grep indicates whether it matched anything or not with its return status. Most programs use their return status to indicate success or failure, but some, like  grep, use it to indicate some other boolean condition \u2013\u00a0in this case &#34;found something&#34; versus &#34;didn&#39;t find anything&#34;:\n  Now we know why  grep is &#34;failing&#34; \u2013 and  xargs too, since it returns a non-zero status if the program it runs returns non-zero. This means that our Julia pipeline and the &#34;responsible&#34; Ruby version are both susceptible to bogus failures when we search an existing directory that happens not to contain the string &#34;flippity&#34; anywhere:\n julia&gt; dir = &#34;src&#34;;julia&gt; parse(Int, readchomp(pipeline( `find $dir -type f -print0`, `xargs -0 grep flippity`, `wc -l`, )))ERROR: failed process: Process(`xargs -0 grep flippity`, ProcessExited(123)) [123]\n Since  grep indicates not finding anything using a non-zero return status, the  readchomp function concludes that its pipeline failed and raises an error to that effect. In this case, this default behavior is undesirable: we want the expression to just return  0 without raising an error. The simple fix in Julia is this:\n julia&gt; parse(Int, readchomp(pipeline( `find $dir -type f -print0`, ignorestatus(`xargs -0 grep flippity`), `wc -l`, )))0\n This works correctly in all cases. Next I&#39;ll explain  how all of this works, but for now it&#39;s enough to note that the detailed error message provided when our pipeline failed exposed a rather subtle bug that would eventually cause subtle and hard-to-debug problems when used in production. Without such detailed error reporting, this bug would be pretty difficult to track down.\n  Julia borrows the backtick syntax for external commands from Perl and Ruby, both of which in turn got it from the shell. Unlike in these predecessors, however, in Julia backticks don&#39;t immediately run commands, nor do they necessarily indicate that you want to capture the output of the command. Instead, backticks just construct an object representing a command:\n  (In the Julia repl,  ans is automatically bound to the value of the last evaluated input.) In order to actually run a command, you have to  do something with a command object. To run a command and capture its output into a string \u2013\u00a0what other languages do with backticks automatically \u2013\u00a0you can apply the  read function with  String as the second argument indicating that you want a string not a byte array:\n  Since it&#39;s very common to want to discard the trailing line break at the end of a command&#39;s output, Julia provides the  readchomp(x) command which is equivalent to writing  chomp(read(x, String)):\n  To run a command without capturing its output, letting it just print to the same  stdout stream as the main process \u2013\u00a0i.e. what the  system function does when given a command as a string in other languages \u2013 use the  run function:\n  The  &#34;Hello&#34; after the  readchomp command is a returned value, whereas the  Hello after the  run command is printed output. The  Process(`echo Hello`, ProcessExited(0)) is the value returned by  run. (If your terminal supports color, these are colored differently so that you can easily distinguish them visually.) If something goes wrong, an exception is raised:\n julia&gt; run(`false`)ERROR: failed process: Process(`false`, ProcessExited(1)) [1]julia&gt; run(`notaprogram`)ERROR: IOError: could not spawn `notaprogram`: no such file or directory (ENOENT)\n As with  xargs and  grep above, this may not always be desirable. In such cases, you can use  ignorestatus to indicate that the command returning a non-zero value should not be considered an error:\n julia&gt; run(ignorestatus(`false`))Process(`false`, ProcessExited(1))julia&gt; run(ignorestatus(`notaprogram`))ERROR: IOError: could not spawn `notaprogram`: no such file or directory (ENOENT)\n In the latter case, an error is still raised in the parent process since the problem is that the executable doesn&#39;t even exist, rather than merely that it ran and returned a non-zero status.\n Although Julia&#39;s backtick syntax intentionally mimics the shell as closely as possible, there is an important distinction: the command string is never passed to a shell to be interpreted and executed; instead it is parsed in Julia code, using the same rules the shell uses to determine what the command and arguments are. Command objects look a bit like strings, but they&#39;re actually more like an array of strings, which can be seen if you collect a command:\n julia&gt; cmd = `perl -e &#39;print &#34;Hello\\n&#34;&#39;``perl -e &#39;print &#34;Hello\\n&#34;&#39;`julia&gt; collect(cmd)3-element Array{String,1}: &#34;perl&#34; &#34;-e&#34; &#34;print \\&#34;Hello\\\\n\\&#34;&#34;\n   So commands are very much just a funny kind of string array. If your terminal supports underlines, the individual words in the command will be underlined, helping you to easily see where the breaks between words are.\n  The purpose of the backtick notation in Julia is to provide a familiar, shell-like syntax for making objects representing commands with arguments. To that end, quotes and spaces work just as they do in the shell. The real power of backtick syntax doesn&#39;t emerge, however, until we begin constructing commands programmatically. Just as in the shell (and in Julia strings), you can interpolate values into commands using the dollar sign ( $):\n  Unlike in the shell, however, Julia values interpolated into commands are interpolated as a single verbatim argument \u2013\u00a0no characters inside the value are interpreted as special after the value has been interpolated:\n julia&gt; dir = &#34;two words&#34;;julia&gt; collect(`find $dir -type f`)4-element Array{String,1}: &#34;find&#34; &#34;two words&#34; &#34;-type&#34; &#34;f&#34;julia&gt; dir = &#34;foo&#39;bar&#34;;julia&gt; collect(`find $dir -type f`)4-element Array{String,1}: &#34;find&#34; &#34;foo&#39;bar&#34; &#34;-type&#34; &#34;f&#34;\n This works no matter what the contents of the interpolated value is, allowing simple interpolation of characters that are quite difficult to pass as parts of command-line arguments even in the shell (for the following examples,  tmp/a.tsv and  tmp/b.tsv can be created in the shell with  echo -e &#34;foo\\tbar\\nbaz\\tqux&#34; &gt; tmp/a.tsv; echo -e &#34;foo\\t1\\nbaz\\t2&#34; &gt; tmp/b.tsv):\n julia&gt; tab = &#34;\\t&#34;;julia&gt; cmd = `join -t$tab tmp/a.tsv tmp/b.tsv`;julia&gt; collect(cmd)4-element Array{String,1}: &#34;join&#34; &#34;-t\\t&#34; &#34;tmp/a.tsv&#34; &#34;tmp/b.tsv&#34;julia&gt; run(cmd)foo bar 1baz qux 2Process(`join &#39;-t &#39; tmp/a.tsv tmp/b.tsv`, ProcessExited(0))\n Moreover, what comes after the  $ can actually be any valid Julia expression,\u00a0not just a variable name:\n  A tab character is somewhat harder to pass in the shell, requiring command interpolation and some tricky quoting:\n  While interpolating values with spaces and other strange characters is great for non-brittle construction of commands, there was a reason why the shell split values on spaces in the first place: to allow interpolation of multiple arguments. Most modern shells have first-class array types, but older shells used space-separation to simulate arrays. Thus, if you interpolate a value like &#34;foo bar&#34; into a command in the shell, it&#39;s treated as two separate words by default. In languages with first-class array types, however, there&#39;s a much better option: consistently interpolate single values as single arguments and interpolate arrays as multiple values. This is precisely what Julia&#39;s backtick interpolation does:\n julia&gt; dirs = [&#34;foo&#34;, &#34;bar&#34;, &#34;baz&#34;];julia&gt; collect(`find $dirs -type f`)6-element Array{String,1}: &#34;find&#34; &#34;foo&#34; &#34;bar&#34; &#34;baz&#34; &#34;-type&#34; &#34;f&#34;\n And of course, no matter how strange the strings contained in an interpolated array are, they become verbatim arguments, without any shell interpretation. Julia&#39;s backticks have one more fancy trick up their sleeve. We saw earlier (without really remarking on it) that you could interpolate single values into a larger argument:\n    Julia does what the shell would do if you wrote  echo foo{bar,baz}. This even works correctly for multiple values interpolated into the same shell word:\n  This is the same Cartesian product expansion that the shell does if multiple  {...} expressions are used in the same word.\n  You can read more in Julia&#39;s  online manual, including how to construct complex pipelines, and how shell-compatible quoting and interpolation rules in Julia&#39;s backtick syntax make it both simple and safe to cut-and-paste shell commands into Julia code. The whole system is designed on the principle that the easiest thing to do should also be the right thing. The end result is that starting and interacting with external processes in Julia is both convenient and safe.", "posttime": "2021-08-09 05:03:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u653e\u8fdb,put,julia", "title": "\u628a\u5b83\u653e\u8fdb\u4f60\u7684\u70df\u6597 (2013)", "title_en": "Put This In Your Pipe (2013)", "transed": 1, "url": "https://julialang.org/blog/2013/04/put-this-in-your-pipe/", "via": "", "real_tags": ["\u653e\u8fdb", "put", "julia"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072185, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7d PDF \u6458\u8981\uff1a\u4e0e\u4e95\u5b57\u68cb\u6216\u8df3\u68cb\u4e0d\u540c\uff0c\u6700\u4f73\u73a9\u6cd5\u4f1a\u5bfc\u81f4\u5e73\u5c40\uff0c\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u56fd\u9645\u8c61\u68cb\u4e2d\u7684\u6700\u4f73\u73a9\u6cd5\u662f\u4ee5\u767d\u65b9\u83b7\u80dc\u3001\u9ed1\u65b9\u83b7\u80dc\u8fd8\u662f\u5e73\u5c40\u544a\u7ec8\u3002\u4f46\u662f\u5728\u56fd\u9645\u8c61\u68cb\u4e2d\uff0c\u5728\u767d\u65b9\u5148\u8d70\u4e4b\u540e\uff0c\u5982\u679c\u9ed1\u65b9\u5148\u53cc\u6b65\uff0c\u7136\u540e\u767d\u65b9\u53cc\u6b65\uff0c\u7136\u540e\u4ea4\u66ff\u4e0b\u68cb\uff0c\u5219\u4e0b\u68cb\u4f1a\u66f4\u52a0\u5e73\u8861\uff0c\u56e0\u4e3a\u767d\u65b9\u5e76\u4e0d\u603b\u662f\u8d70\u5e73\u6216\u9886\u5148\u3002\u8c61\u5f81\u6027\u5730\uff0c\u5e73\u8861\u4ea4\u66ff\u7ed9\u51fa\u4ee5\u4e0b\u79fb\u52a8\u987a\u5e8f\uff1a\u5728\u767d\uff08W\uff09\u7684\u521d\u59cb\u79fb\u52a8\u4e4b\u540e\uff0c\u9996\u5148\u9ed1\uff08B\uff09\u7136\u540e\u767d\u5404\u6709\u8fde\u7eed\u4e24\u6b65\uff08BBWW\uff09\uff0c\u7136\u540e\u662f\u4ea4\u66ff\u987a\u5e8f\uff0c\u4ee5W\u5f00\u59cb\uff0c\u5b83\u4eec\u603b\u5171\u53ef\u4ee5\u662f\u5199\u6210 WB/BW/WB/WB/WB...\uff08\u659c\u7ebf\u5206\u9694\u6210\u5bf9\u7684\u4ea4\u66ff\u79fb\u52a8\uff09\u3002\u9664\u4e86\u5c06\u7b2c 3 \u6b65\u548c\u7b2c 4 \u6b65\u4ece WB \u53cd\u8f6c\u4e3a BW \u4e4b\u5916\uff0c\u8fd9\u662f\u6807\u51c6\u7684\u56fd\u9645\u8c61\u68cb\u987a\u5e8f\u3002\u56e0\u4e3a\u5e73\u8861\u4ea4\u66ff\u5728\u6709\u5229\u4e8e\u767d\u68cb\u7684\u6807\u51c6\u5e8f\u5217\u548c\u6709\u5229\u4e8e\u9ed1\u68cb\u7684\u53ef\u6bd4\u8f83\u5e8f\u5217\u4e4b\u95f4\uff0c\u6781\u6709\u53ef\u80fd\u4ea7\u751f\u5177\u6709\u6700\u4f73\u73a9\u6cd5\u7684\u5e73\u5c40\uff0c\u4ece\u800c\u4f7f\u56fd\u9645\u8c61\u68cb\u66f4\u52a0\u516c\u5e73\u3002\u8fd9\u4e00\u7ed3\u8bba\u5f97\u5230\u4e86\u5bf9\u56fd\u9645\u8c61\u68cb\u5f00\u5c40\u53ca\u5176\u5728\u5e73\u8861\u4ea4\u66ff\u4e0b\u5982\u4f55\u53d1\u6325\u4f5c\u7528\u7684\u8ba1\u7b97\u673a\u5206\u6790\u7684\u652f\u6301\u3002", "note_en": "Download PDF  Abstract: Unlike tic-tac-toe or checkers, in which optimal play leads to a draw, it isnot known whether optimal play in chess ends in a win for White, a win forBlack, or a draw. But after White moves first in chess, if Black has a doublemove followed by a double move of White and then alternating play, play is morebalanced because White does not always tie or lead in moves. Symbolically,Balanced Alternation gives the following move sequence: After White&#39;s (W)initial move, first Black (B) and then White each have two moves in a row(BBWW), followed by the alternating sequence, beginning with W, whichaltogether can be written as WB/BW/WB/WB/WB... (the slashes separatealternating pairs of moves). Except for reversal of the 3rd and 4th moves fromWB to BW, this is the standard chess sequence. Because Balanced Alternationlies between the standard sequence, which favors White, and a comparablesequence that favors Black, it is highly likely to produce a draw with optimalplay, rendering chess fairer. This conclusion is supported by a computeranalysis of chess openings and how they would play out under BalancedAlternation.", "posttime": "2021-08-09 05:02:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u52a8\u4f5c,chess,\u4ea4\u66ff", "title": "\u66f4\u516c\u5e73\u7684\u56fd\u9645\u8c61\u68cb\uff1a\u56fd\u9645\u8c61\u68cb\u4e2d\u4e24\u4e2a\u5f00\u5c40\u52a8\u4f5c\u7684\u9006\u8f6c\u521b\u9020\u5e73\u8861", "title_en": "Fairer Chess: A Reversal of Two Opening Moves in Chess Creates Balance", "transed": 1, "url": "https://arxiv.org/abs/2108.02547", "via": "", "real_tags": ["\u52a8\u4f5c", "chess", "\u4ea4\u66ff"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072184, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u6d41\u884c\u7684\u6d88\u8d39\u8005\u5e94\u7528\u7a0b\u5e8f\u7ecf\u5e38\u51fa\u4e4e\u610f\u6599\u5730\u53d8\u5f97\u66f4\u7cdf\uff1a\u4e00\u4e9b\u96be\u4ee5\u4f7f\u7528\u3001\u7f3a\u5c11\u529f\u80fd\u548c\u901f\u5ea6\u8f83\u6162\u7684\u7ec4\u5408\u3002\u5728\u5386\u53f2\u4e0a\u8f6f\u4ef6\u6b63\u5728\u5927\u91cf\u541e\u566c\u4e16\u754c\u7684\u65f6\u4ee3\uff0c\u8fd9\u662f\u8352\u8c2c\u7684\u3002\u8fd9\u4e5f\u4f1a\u635f\u5bb3\u4f9d\u8d56\u8fd9\u4e9b\u4ea7\u54c1\u7684\u4eba\u4eec\u7684\u751f\u6d3b\u3002\u9996\u5148\uff0c\u4e3e\u51e0\u4e2a\u4f8b\u5b50\u6765\u6f84\u6e05\u6211\u6b63\u5728\u8c08\u8bba\u7684\u4e8b\u60c5\u3002\u8fd9\u4e9b\u53ea\u662f\u6211\u4eb2\u8eab\u7ecf\u5386\u7684\u90a3\u4e9b\u3002\u5728 iMovie &#39;08 \u63a8\u51fa\u591a\u5e74\u540e\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u83b7\u53d6\u548c\u4f7f\u7528 &#39;06 \u7248\u672c\uff0c\u800c\u4e14\u5f88\u591a\u4eba\u90fd\u8fd9\u6837\u505a\u4e86\uff0c\u56e0\u4e3a\u5b83\u7b80\u5355\u660e\u4e86\uff0c\u800c\u4e14\u60a8\u9700\u8981\u505a\u7684\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\u603b\u662f\u89e6\u624b\u53ef\u53ca\u3002\u90a3\u65f6\u6211\u6b63\u5728\u4f7f\u7528\u8be5\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u6211\u662f\u4e00\u4e2a\u6280\u672f\u6781\u5ba2\uff0c\u66f4\u65b0\u5230\u4e86\u6700\u65b0\u6700\u597d\u7684\uff0c\u7136\u540e\u5728 08 \u5e74\u6ca6\u4e3a\u65e9\u671f\u7684\u6124\u6012\u5c16\u53eb\u3002\u6211\u65e0\u6cd5\u5f04\u6e05\u695a\u5982\u4f55\u505a\u5f88\u591a\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\uff0c\u4e00\u5207\u90fd\u5f88\u7b28\u62d9\u3002\u6ca1\u6709\u54ea\u4e2a\u7ef4\u5ea6\u6bd4 &#39;08 \u66f4\u597d\u3002\u81f3\u4e8e iPhoto\uff0c\u6211\u4ece\u6765\u6ca1\u6709\u7528\u8fc7\u5b83\uff0c\u4f46\u6211\u516b\u5341\u591a\u5c81\u7684\u5988\u5988\u7528\u8fc7\u5b83\uff0c\u7528\u6211\u653e\u5f03\u8896\u73cd\u76f8\u673a\u65f6\u9001\u7ed9\u5979\u7684 Sony RX100 \u62cd\u4e86\u5f88\u591a\u5f88\u68d2\u7684\u7167\u7247\u3002\u5979\u4e0d\u662f\u6781\u5ba2\uff0c\u4f46\u62e5\u6709\u79d1\u5b66\u5b66\u58eb\u5b66\u4f4d\uff0c\u800c\u4e14\u975e\u5e38\u806a\u660e\u3002\u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u4ed6\u4eec\u7834\u574f\u4e86 iPhoto\uff0c\u6240\u4ee5\u5979\u65e0\u6cd5\u5f04\u6e05\u695a\u5982\u4f55\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5f53\u5979\u5411\u6211\u5bfb\u6c42\u5e2e\u52a9\u65f6\uff0c\u5979\u7684\u773c\u91cc\u542b\u7740\u6cea\u6c34\u3002\u6211\u8bd5\u56fe\u8ba9\u5979\u4fee\u597d\uff0c\u4f46\u5979\u4e0d\u518d\u62cd\u7167\u4e86\u3002\u6211\u60f3\u5ff5\u4ed6\u4eec\u3002\u7ecf\u6d4e\u5b66\u5bb6\u7684\u75db\u82e6\u00b7\u5f53\u300a\u7ecf\u6d4e\u5b66\u4eba\u300b\u53d1\u5e03\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u6211\u4ecd\u7136\u662f Android \u5c0f\u7ec4\u7684\u4e00\u540d\u5f00\u53d1\u8005\u5021\u5bfc\u8005\u3002\u6211\u8ba4\u4e3a\u5b83\u62e5\u6709\u6709\u53f2\u4ee5\u6765\u6700\u597d\u7684\u7528\u6237\u4f53\u9a8c\u4e4b\u4e00\u3002\u60a8\u4ece\u5f53\u524d\u95ee\u9898\u7684\u5f00\u5934\u5f00\u59cb\uff0c\u5c06\u4e00\u7bc7\u6587\u7ae0\u5411\u4e0b\u6ed1\u52a8\u5230\u5e95\u90e8\uff0c\u7136\u540e\u5207\u6362\u4ee5\u4ece\u53f3\u4fa7\u5f15\u5165\u4e0b\u4e00\u7bc7\u6587\u7ae0\u3002\u5b83\u4f1a\u8bb0\u4f4f\u4f60\u8981\u53bb\u54ea\u91cc\uff0c\u8fd9\u652f\u6301\u4e86\u300a\u7ecf\u6d4e\u5b66\u4eba\u300b\u6210\u4e3a\u5468\u62a5\u7684\u613f\u666f\uff1b\u4e00\u6b21\u901a\u8fc7\uff0c\u4f60\u5c31\u5728\u90a3\u4e00\u5468\u8d76\u4e0a\u4e86\u4e16\u754c\u3002\u603b\u6709\u4e00\u4e2a\u8fdb\u5165\u76ee\u5f55\u7684\u624b\u52bf\uff0c\u4f46\u6211\u53d1\u73b0\u6211\u901a\u5e38\u4e0d\u9700\u8981\u5b83\uff0c\u53ea\u662f\u5237\u8fc7\u6211\u4e0d\u5173\u5fc3\u7684\u4e1c\u897f\u3002\u6211\u5f53\u65f6\u5bf9\u5b83\u8d5e\u4e0d\u7edd\u53e3\uff0c\u5e76\u4e14\uff08\u65e0\u53ef\u5426\u8ba4\uff09\u540e\u6765\u6279\u8bc4\u4e86\u5b83\u7684\u201c\u540e\u9000\u201d\u53ef\u4f9b\u6027\uff0c\u4f46\u8fd9\u53ea\u662f\u4e00\u4e2a\u5c0f\u5c0f\u7684\u62b1\u6028\u3002\u6700\u65b0\u7248\u672c\u5df2\u88ab\u5e7b\u60f3\u548c\u6b8b\u5e9f\u3002\u9996\u5148\uff0c\u5f53\u60a8\u6253\u5f00\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u5b83\u4e0d\u4f1a\u5c06\u60a8\u5e26\u5230\u4e0a\u6b21\u9605\u8bfb\u7684\u4f4d\u7f6e\u3002\u5b83\u575a\u6301\u4ece\u201c\u6bcf\u65e5\u65b0\u95fb\u201d\u5f00\u59cb\uff08\u6709\u5f88\u591a\u5176\u4ed6\u7f51\u7ad9\u53ef\u4ee5\u63d0\u4f9b\u8fd9\u4e9b\u5185\u5bb9\uff09\uff0c\u60a8\u5fc5\u987b\u6309\u201c\u5468\u201d\u624d\u80fd\u8fd4\u56de\u5b9e\u9645\u51fa\u7248\u7269\u3002\u5f53\u4f60\u8fd9\u6837\u505a\u65f6\uff0c\u5373\u4f7f\u5b83\u77e5\u9053\u4f60\u8bfb\u8fc7\u54ea\u4e9b\u6587\u7ae0\uff08\u5728\u76ee\u5f55\u4e2d\u7528\u590d\u9009\u6807\u8bb0\u6807\u8bb0\u5b83\u4eec\uff09\u5b83\u4e5f\u4e0d\u4f1a\u5e26\u4f60\u5230\u4e0a\u6b21\u9605\u8bfb\u7684\u5730\u65b9\u3002\u56e0\u6b64\uff0c\u60a8\u5fc5\u987b\u6d4f\u89c8\u76ee\u5f55\u624d\u80fd\u91cd\u65b0\u542f\u52a8\u3002\u5f53\u4f60\u5230\u8fbe\u4e00\u7bc7\u6587\u7ae0\u7684\u5e95\u90e8\u65f6\uff0c\u5b83\u4e0d\u4f1a\u505c\u6b62\uff0c\u5b83\u4f1a\u8ba9\u4f60\u8fdb\u5165\u4e00\u4e9b\u5947\u602a\u7684\u6df7\u86cb\u90e8\u5206\u7279\u5b9a\u7684\u76ee\u5f55\u8868\u3002\u6211\u60f3\u8981\u7684\u53ea\u662f\u5411\u4e0b\u7ffb\u8f6c\u7136\u540e\u5411\u53f3\u7ffb\u8f6c\uff0c\u76f4\u5230\u6211\u5230\u8fbe\u8be5\u6b7b\u7684\u6742\u5fd7\u7684\u672b\u5c3e\u3002\u4e3a\u4ec0\u4e48\uff1f\uff01\nMLB \u00b7 \u6211\u591a\u5e74\u6765\u4e00\u76f4\u4f7f\u7528 Roku/MLB \u7ec4\u5408\u5728\u6211\u4eec\u7684\u5927\u7535\u89c6\u4e0a\u89c2\u770b\u7403\u8d5b\u3002\u591a\u5e74\u6765\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u4e0d\u65ad\u53d1\u5c55\uff0c\u800c\u4e14\u5927\u591a\u53d8\u5f97\u66f4\u597d\u3002\u6211\u53d1\u73b0 Roku \u4e0a\u7684\u4e8b\u60c5\u5f80\u5f80\u6709\u70b9\u8fdf\u949d\uff0c\u4f46 MLB \u8fd8\u4e0d\u9519\uff1b\u5b83\u4f1a\u5f88\u5feb\u8ba9\u4f60\u8fdb\u5165\u4e00\u4e2a\u5305\u542b\u68d2\u7403\u573a\u6f02\u4eae\u56fe\u7247\u7684\u5c4f\u5e55\uff0c\u7136\u540e\u8986\u76d6\u4e00\u4e2a\u6b63\u5728\u8fdb\u884c\u7684\u6bd4\u8d5b\u7f51\u683c\uff1b\u9009\u62e9\u4f60\u60f3\u8981\u7684\uff0c\u7136\u540e\u79bb\u5f00\u3002\u7a81\u7136\u95f4\uff0c\u5b83\u53d8\u5f97\u975e\u5e38\u6162\uff0c\u663e\u7136\u662f\u5728\u82b1\u65f6\u95f4\u5c1d\u8bd5\u4f7f\u7528\u4e00\u4e9b AI \u5deb\u672f\u6765\u786e\u5b9a\u6211\u60f3\u770b\u54ea\u4e2a\u6e38\u620f\u3002\u5728\u65e0\u4f11\u6b62\u7684\u5ef6\u8fdf\u4e4b\u540e\uff0c\u60a8\u4f1a\u770b\u5230\u5b83\u8ba4\u4e3a\u60a8\u60f3\u89c2\u770b\u7684\u6e38\u620f\u7684\u5b9e\u65f6\u89c6\u9891\uff0c\u5e76\u5728\u8fb9\u7f18\u8986\u76d6\u4e86\u4e00\u4e9b\u5176\u4ed6\u6e38\u620f\u548c\u83dc\u5355\u9009\u9879\u3002\u5b83\u76f8\u5f53\u64c5\u957f\u731c\u6d4b\u6211\u60f3\u770b\u54ea\u573a\u6bd4\u8d5b\uff0c\u4f46\u6bd4\u4ee5\u524d\u66f4\u6162\u4e86\u3002\u5f53\u5b83\uff08\u7ecf\u5e38\uff09\u51fa\u9519\u65f6\uff0c\u6709\u4e24\u4e2a\uff08\u7f13\u6162\u7684\uff09\u83dc\u5355\u8f6c\u6362\u53ef\u4ee5\u8fd4\u56de\u5230\u6240\u6709\u6e38\u620f\u7684\u7f51\u683c\u3002\u6b64\u5916\uff0c\u4ed6\u4eec\u641e\u7838\u4e86 Android Auto \u5e94\u7528\u7a0b\u5e8f\u2014\u2014\u6211\u53d1\u73b0\u542c\u6e38\u620f\u662f\u5728\u8def\u4e0a\u6253\u53d1\u65f6\u95f4\u7684\u597d\u65b9\u6cd5\u3002\u5b83\u603b\u662f\u6709\u4e00\u4e2a\u7f3a\u9677\uff0c\u5b83\u8bd5\u56fe\u731c\u6d4b\u4f60\u60f3\u770b\u54ea\u573a\u6bd4\u8d5b\u5e76\u5f00\u59cb\u73a9\u2014\u2014\u731c\u6d4b\u5f88\u7cdf\u7cd5\uff0c\u6211\u7ecf\u5e38\u4ee5\u897f\u73ed\u7259\u8bed\u7684\u8fc8\u963f\u5bc6\u9a6c\u6797\u9c7c\u961f\u7ed3\u675f\u3002\u4f46\u662f\uff0c\u60a8\u8ddd\u79bb\u63d0\u4f9b\u7684\u6240\u6709\u5185\u5bb9\u7684\u6e05\u5355\u4ec5\u4e00\u6b65\u4e4b\u9065\u3002\u6700\u8fd1\uff0c\u542f\u52a8\u5c4f\u5e55\u6b63\u5728\u5c1d\u8bd5\u53d8\u5f97\u66f4\u667a\u80fd\uff0c\u56e0\u6b64\u5728\u5448\u73b0\u60a8\u53ef\u80fd\u60f3\u542c\u5230\u7684\u5185\u5bb9\u65f6\u8981\u6162\u5f97\u591a\uff0c\u5e76\u63d0\u4f9b\u4e86\u5176\u4ed6\u4e00\u4e9b\uff08\u4e0d\u662f\u5168\u90e8\uff09\u9009\u9879\u3002\u6240\u4ee5\u6211\u5fc5\u987b\u6c38\u8fdc\u7b49\u5f85\u8fd9\u4e00\u70b9\u51fa\u73b0\uff0c\u7136\u540e\u70b9\u51fb\u4e00\u4e2a\u5f88\u5c0f\u7684\u201c\u66f4\u591a\u2026\u2026\u201d\u76ee\u6807\u6765\u83b7\u5f97\u6240\u6709\u63d0\u4f9b\u7684\u6e38\u620f\u7684\u5b9e\u9645\u5217\u8868\u3002\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff1f \u00b7 \u5f88\u660e\u663e\u3002\u6bcf\u4e2a\u9ad8\u79d1\u6280\u516c\u53f8\u90fd\u6709\u88ab\u79f0\u4e3a\u201c\u4ea7\u54c1\u7ecf\u7406\u201d\uff08PM\uff09\u7684\u4eba\uff0c\u4ed6\u4eec\u7684\u5de5\u4f5c\u662f\u4e0e\u5ba2\u6237\u3001\u7ba1\u7406\u5c42\u548c\u5de5\u7a0b\u5e08\u5408\u4f5c\uff0c\u5b9a\u4e49\u4ea7\u54c1\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\u5386\u53f2\u4e0a\u6ca1\u6709\u4e00\u4f4d\u603b\u7406\u8bf4\u8fc7\u201c\u8fd9\u4f3c\u4e4e\u8fd0\u4f5c\u5f97\u5f88\u597d\uff0c\u8ba9\u6211\u4eec\u4fdd\u6301\u73b0\u72b6\u3002\u201d\u56e0\u4e3a\u8fd9\u5e76\u4e0d\u5927\u80c6\u3002\u8fd9\u4e0d\u662f\u6709\u8fdc\u89c1\u7684\u3002\u90a3\u4e0d\u4f1a\u8ba9\u4f60\u5347\u804c\u3002\u63d0\u51fa\u4e00\u4e2a\u5927\u80c6\u7684 UX \u521b\u65b0\u5e76\u83b7\u5f97\u8d5e\u8a89\u662f\u6bcf\u4e2a PM \u7684\u68a6\u60f3\uff0c\u8bb8\u591a\u4eba\u76f8\u4fe1\u8f6f\u4ef6\u6bd4\u5ba2\u6237\u66f4\u64c5\u957f\u5f04\u6e05\u695a\u5ba2\u6237\u60f3\u8981\u4ec0\u4e48\u7684\u798f\u97f3\u3002\u8fd9\u4e9b\u5929\u4f60\u4f1a\u56e0\u4e3a\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u800c\u83b7\u5f97\u52a0\u5206\u3002\u6b64\u5916\uff0c\u6bcf\u5f53\u60a8\u5bf9\u6d41\u884c\u4ea7\u54c1\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\u65f6\uff0c\u60a8\u90fd\u4f1a\u5bf9\u5176\u7528\u6237\u8fdb\u884c\u518d\u57f9\u8bad\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u4ed6\u4eec\u7684\u8bc4\u4f30\u4e2d\uff0cPM \u8ba4\u4e3a\u5ba2\u6237\u518d\u57f9\u8bad\u65f6\u95f4\u7684\u6210\u672c\u4e3a\u96f6\u3002\n\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f\u597d\u5427\uff0c\u5728\u6211\u5728 Amazon Web Services \u7684\u65e5\u5b50\u91cc\uff0c\u6211\u770b\u5230\u4e3b\u8981\u670d\u52a1\u53d1\u5e03\u7684\u5b9e\u4f8b\u6070\u597d\u4e3a\u96f6\uff0c\u5728\u5ba2\u6237\u770b\u6765\uff0c\u8fd9\u4e9b\u5b9e\u4f8b\u4f7f\u4ea7\u54c1\u762b\u75ea\u6216\u635f\u574f\u3002\u6211\u4e0d\u4f1a\u58f0\u79f0\u6211\u4eec\u7684\u7528\u6237\u4f53\u9a8c\u603b\u4f53\u4e0a\u975e\u5e38\u51fa\u8272\uff0c\u56e0\u4e3a\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff1b\u5927\u591a\u6570\u7528\u6237\u90fd\u662f\u6781\u5ba2\u8fd9\u4e00\u4e8b\u5b9e\u8ba9\u6211\u4eec\u6709\u4e9b\u63aa\u624b\u4e0d\u53ca\u3002\u4e3a\u4ec0\u4e48\u6ca1\u6709\u7834\u635f\uff1f\u56e0\u4e3a\u8fd9\u4e9b\u662f\u4f01\u4e1a\u4ea7\u54c1\uff0c\u6240\u4ee5\u5ba2\u6237\u6570\u91cf\u6bd4 iAnything \u5c11\u51e0\u4e2a\u6570\u91cf\u7ea7\uff0c\u6240\u4ee5 PM \u53ef\u4ee5\u4e0e\u4ed6\u4eec\u4ea4\u8c08\u5e76\u4ece\u4ed6\u4eec\u90a3\u91cc\u83b7\u5f97\u6539\u8fdb\u7684\u60f3\u6cd5\u3002\u5ba2\u6237\u975e\u5e38\u5584\u4e8e\u53d1\u73b0\u6b63\u5728\u5f62\u6210\u7684 UX \u9519\u8bef\u3002\u8bc1\u636e\u8868\u660e\uff0c\u5bf9\u4e8e\u5927\u7ea6 10 7 \u4eba\u4f7f\u7528\u7684\u5927\u4f17\u5e02\u573a\u4ea7\u54c1\uff0c\u771f\u7684\u5f88\u96be\u9884\u6d4b\u54ea\u4e9b\u53d8\u5316\u4f1a\u88ab\u8ba4\u4e3a\u662f\u611a\u8822\u7684\u3001\u7834\u788e\u7684\u548c\u4fae\u8fb1\u6027\u7684\u3002\u4e5f\u8bb8\u6211\u4eec\u5e94\u8be5\u5f00\u59cb\u63d0\u62d4\u90a3\u4e9b\u613f\u610f\u5fcd\u53d7\u5076\u5c14\u53d1\u5e03\u4e00\u4e09\u4e2a\u7248\u672c\u7684 PM\u3002\u4e5f\u8bb8\u6211\u4eec\u5e94\u8be5\u89e3\u96c7\u6240\u6709\u6d88\u8d39\u54c1 PM\u3002\u4e5f\u8bb8\u6211\u4eec\u5e94\u8be5\u5f00\u59cb\u5728\u6211\u4eec\u7684\u4ea7\u54c1\u89c4\u5212\u8fc7\u7a0b\u4e2d\u5305\u62ec\u73b0\u5b9e\u7684\u5ba2\u6237\u518d\u57f9\u8bad\u6210\u672c\u4f30\u7b97\u3002", "note_en": "Too often, a popular consumer app unexpectedly gets worse: Some combination of harder to use, missing features, and slower. At a time in history where software is significantly eating the world, this is nonsensical. It\u2019s also damaging to the lives of the people who depend on these products.\n First, a few examples to clarify the kind of thing I\u2019m talking about. These are just the ones I\u2019ve had personal experience with.\n  For years after the introduction of iMovie \u201908, you could still get and use the \u201906 version and lots of people did, because it was simple, straightforward, and the obvious things you needed to do were always within reach. I was using the program back then and since I\u2019m a tech geek updated to the newest and greatest, then was reduced to inchoate screams of rage by \u201908. I couldn\u2019t figure out how to do lots of obvious things, everything was klunky. There wasn\u2019t a single dimension along which \u201908 was better.\n As for iPhoto, I never used it much, but my eighty-something mother did, and took lots of great photos with the Sony RX100 I gave her when I gave up on pocket cams. She\u2019s not geeky but has a Bachelor\u2019s in the sciences and is really smart. At some point they broke iPhoto so she couldn\u2019t figure out how to do anything, and when she asked me for help she had tears in her eyes. I tried to get her fixed up, but she doesn\u2019t take pictures much any more. I miss them.\n Economist pain \u00b7 I was still a Developer Advocate in the Android group when  The Economist shipped their app. I thought it had one of the best user experiences ever. You started at the beginning of the current issue, swiped down through an article to the bottom, then swapped to bring the next article in from the right. It remembered where you\u2019d got to, which supports  The Economist\u2019s vision of being a weekly newspaper; one pass through and you\u2019re caught up on the world that week. There was always a gesture to get to the Table of Contents, but I found I usually didn\u2019t need it much, just swiped over the things I didn\u2019t care about. I  praised it to the skies at the time, and (admittedly) since  criticized its \u201cBack\u201d affordance, but that was a minor gripe.\n The most recent version has been fancified and crippled. First of all, when you open the app, it doesn\u2019t take you to where you were last reading. It insists on starting with \u201cnews of the day\u201d (there are lots of other sites for that stuff) and you have to press \u201cweek\u201d to get back into the actual publication. When you do that, even though it knows which articles you\u2019ve read (marking them with a check-mark in the table of contents) it maddeningly doesn\u2019t take you to where you were last. So you have to hunt through the table of contents to get yourself restarted.\n And when you get to the bottom of an article, it doesn\u2019t stop, it drops you into some weird bastardized section-specific table of contents thingie. All I want is to flip down then flip right until I get to the damn end of the damn magazine.  Why?!\n MLB \u00b7 I\u2019ve used the Roku/MLB combo for years to watch ball games on our big TV. The app has evolved over the years and mostly gotten better. I find things on Roku tend to be a little sluggish, but MLB wasn\u2019t too bad; it\u2019d drop you, pretty quickly, into a screen containing a nice picture of a baseball stadium, then overlay a grid of games that were on; pick the one you want and away you go.\n Suddenly, it\u2019s become immensely slower, and apparently is spending that time trying to use some AI voodoo to figure out which game I\u2019d like to watch. After an endless delay, you get live video of the game it thinks you want to watch, with a few other games and menu choices overlaid around the edge. It\u2019s reasonably good at guessing which game I want to watch, but way slower at getting me there than it used to be. When\u2019s it\u2019s (regularly) wrong, there are two (slow) menu transitions to get back to the grid of all the games.\n Also, they screwed up the Android Auto app \u2009\u2014\u2009I find listening to a game a good way to pass the time on the road. It\u2019s always had a flaw in that it tries to guess which game you want to watch and starts playing that \u2009\u2014\u2009the guesses are laughably bad and I often end up with something like Miami Marlins in Spanish. But, you were one tap away from a nice list of everything on offer.\n Recently, the startup screen is trying be smarter, thus much slower, in presenting its guess as to what you might want to hear, with a few others (not all) offered as options. So I have to wait forever for this to manifest then hit a teeny little \u201cMore\u2026\u201d target to get the actual list of all the games on offer.\n Why does this happen? \u00b7 It\u2019s obvious. Every high-tech company has people called \u201cProduct Managers\u201d (PMs) whose job it is to work with customers and management and engineers to define what products should do. No PM in history has ever said \u201cThis seems to be working pretty well, let\u2019s leave it the way it is.\u201d Because that\u2019s not bold. That\u2019s not visionary. That doesn\u2019t get you promoted.\n It is the dream of every PM to come up with a bold UX innovation that gets praise, and many believe the gospel that the software is better at figuring out what the customer wants than the customer is. And you get extra points these days for using ML.\n Also, any time you make any change to a popular product, you\u2019ve imposed a retraining cost on its users. Unfortunately, in their evaluations, PMs consider the cost of customer retraining time to be zero.\n How to fix this? Well, in my days at Amazon Web Services, I saw exactly zero instances of major service releases that, in the opinion of customers, crippled or broke the product. I\u2019m not going to claim that our UX was generally excellent because it wasn\u2019t; the fact that most users were geeks let us somewhat off the hook.\n Why no breakage? Because these were Enterprise products, so the number of customers was orders of magnitude smaller than iAnything, so the PM could go talk to them and bounce improvement ideas off them. Customers are pretty good at spotting UX goofs in the making.\n The evidence suggests that for mass-market products used by on the order of 10 7 people, it\u2019s really difficult to predict which changes will be experienced as stupid, broken, and insulting.\n Maybe we ought to start promoting PMs who are willing to stand pat for an occasional release or three. Maybe we ought to fire all the consumer-product PMs. Maybe we ought to start including realistic customer-retraining-cost estimates in our product planning process.", "posttime": "2021-08-09 05:02:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,apps,\u4ea7\u54c1", "title": "\u5e94\u7528\u7a0b\u5e8f\u53d8\u5f97\u66f4\u7cdf", "title_en": "Apps Getting Worse", "transed": 1, "url": "https://www.tbray.org/ongoing/When/202x/2021/08/07/Apps-Get-Worse", "via": "", "real_tags": ["\u7a0b\u5e8f", "apps", "\u4ea7\u54c1"]}, {"category": "", "categoryclass": "", "imagename": "7ee8051cee40a9bd36c93eba68cd506b.png", "infoid": 1072183, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u89e3\u51b3\u901a\u8fc7\u667a\u80fd\u624b\u673a\u6444\u50cf\u5934\u5236\u4f5c\u53ef\u70b9\u51fb\u7684\u5370\u5237\u94fe\u63a5\uff08\u5373\u4e66\u7c4d\u6216\u6742\u5fd7\u4e2d\u7684\u94fe\u63a5\uff09\u7684\u95ee\u9898\u3002\u6211\u4eec\u5c06\u4f7f\u7528 TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API \u6765\u8bad\u7ec3\u81ea\u5b9a\u4e49\u5bf9\u8c61\u68c0\u6d4b\u5668\u6a21\u578b\uff0c\u4ee5\u5728\u6587\u672c\u56fe\u50cf\uff08\u5373\u667a\u80fd\u624b\u673a\u76f8\u673a\u6d41\uff09\u4e2d\u67e5\u627e\u5b50\u5b57\u7b26\u4e32\uff08\u5982 https://\uff09\u7684\u4f4d\u7f6e\u548c\u8fb9\u754c\u6846\u3002\u6bcf\u4e2a\u94fe\u63a5\u7684\u6587\u672c\uff08https:// \u8fb9\u754c\u6846\u7684\u53f3\u4fa7\u5ef6\u7eed\uff09\u5c06\u4f7f\u7528 Tesseract \u5e93\u8fdb\u884c\u8bc6\u522b\u3002\u672c\u6587\u4e0d\u4f1a\u6d89\u53ca\u8bc6\u522b\u90e8\u5206\uff0c\u4f46\u60a8\u53ef\u4ee5\u5728 links-detector \u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b\u3002 \ud83d\udcdd \u5728 GitHub \u4e0a\u6253\u5f00 links-detector \u5b58\u50a8\u5e93\u4ee5\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\u3002 \u26a0\ufe0f \u76ee\u524d\u8be5\u5e94\u7528\u7a0b\u5e8f\u5904\u4e8e\u5b9e\u9a8c Alpha \u9636\u6bb5\uff0c\u5b58\u5728\u8bb8\u591a\u95ee\u9898\u548c\u9650\u5236\u3002\u6240\u4ee5\u5728\u8fd9\u4e9b\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u4e4b\u524d\uff0c\u4e0d\u8981\u628a\u4f60\u7684\u671f\u671b\u503c\u63d0\u9ad8\u5f97\u592a\u9ad8\ud83e\udd37\ud83c\udffb\u200d\u3002\u6b64\u5916\uff0c\u672c\u6587\u7684\u76ee\u7684\u66f4\u591a\u662f\u5173\u4e8e\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API\uff0c\u800c\u4e0d\u662f\u60f3\u51fa\u4e00\u4e2a\u751f\u4ea7\u5c31\u7eea\u7684\u6a21\u578b\u3002\u5982\u679c\u672c\u6587\u4e2d\u7684 Python \u4ee3\u7801\u5757\u5728\u6b64\u5e73\u53f0\u4e0a\u7f3a\u4e4f\u6b63\u786e\u7684\u683c\u5f0f\uff0c\u8bf7\u968f\u65f6\u9605\u8bfb GitHub \u4e0a\u7684\u6587\u7ae0\u6211\u662f\u4e00\u540d\u8f6f\u4ef6\u5de5\u7a0b\u5e08\uff0c\u5728\u6211\u81ea\u5df1\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u5c06\u5b66\u4e60\u673a\u5668\u5b66\u4e60\u4f5c\u4e3a\u4e00\u79cd\u7231\u597d\u3002\u4f46\u8fd9\u8fd8\u4e0d\u662f\u95ee\u9898\u3002\n\u6211\u6700\u8fd1\u4e70\u4e86\u4e00\u672c\u5173\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u5370\u5237\u4e66\uff0c\u5f53\u6211\u9605\u8bfb\u524d\u51e0\u7ae0\u65f6\uff0c\u6211\u5728\u6587\u672c\u4e2d\u9047\u5230\u4e86\u8bb8\u591a\u770b\u8d77\u6765\u50cf https://tensorflow.org/ \u6216 https://some-url.com \u7684\u5370\u5237\u94fe\u63a5/which/may/be/even/longer?and_with_params=true\u3002\u6211\u770b\u5230\u4e86\u6240\u6709\u8fd9\u4e9b\u94fe\u63a5\uff0c\u4f46\u7531\u4e8e\u5b83\u4eec\u88ab\u6253\u5370\u51fa\u6765\uff0c\u6211\u65e0\u6cd5\u70b9\u51fb\u5b83\u4eec\uff08\u8c22\u8c22\uff0c\u5e3d\u5b50\uff01\uff09\u3002\u8981\u8bbf\u95ee\u8fd9\u4e9b\u94fe\u63a5\uff0c\u6211\u9700\u8981\u5728\u6d4f\u89c8\u5668\u7684\u5730\u5740\u680f\u4e2d\u9010\u4e2a\u5b57\u7b26\u5730\u952e\u5165\u5b83\u4eec\uff0c\u8fd9\u975e\u5e38\u70e6\u4eba\u4e14\u5bb9\u6613\u51fa\u9519\u3002\u6240\u4ee5\uff0c\u6211\u5728\u60f3\uff0c\u5982\u679c\u7c7b\u4f3c\u4e8e\u4e8c\u7ef4\u7801\u68c0\u6d4b\uff0c\u6211\u4eec\u4f1a\u5c1d\u8bd5\u201c\u6559\u201d\u667a\u80fd\u624b\u673a\uff081\uff09\u68c0\u6d4b\u548c\uff082\uff09\u4e3a\u6211\u4eec\u8bc6\u522b\u6253\u5370\u7684\u94fe\u63a5\u5e76\u4f7f\u5b83\u4eec\u53ef\u70b9\u51fb\uff1f\u8fd9\u6837\uff0c\u60a8\u53ea\u9700\u5355\u51fb\u4e00\u6b21\uff0c\u800c\u4e0d\u662f\u591a\u6b21\u51fb\u952e\u3002 \u201c\u70b9\u51fb\u201d\u6253\u5370\u94fe\u63a5\u7684\u64cd\u4f5c\u590d\u6742\u5ea6\u4ece O(N) \u5230 O(1)\u3002\u6b63\u5982\u6211\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u6211\u53ea\u662f\u5c06\u673a\u5668\u5b66\u4e60\u4f5c\u4e3a\u4e00\u79cd\u7231\u597d\u6765\u5b66\u4e60\u3002\u56e0\u6b64\uff0c\u672c\u6587\u7684\u76ee\u7684\u66f4\u591a\u662f\u5173\u4e8e\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API\uff0c\u800c\u4e0d\u662f\u60f3\u51fa\u4e00\u4e2a\u751f\u4ea7\u5c31\u7eea\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5728 iPhone X \u8fd9\u6837\u7684\u8bbe\u5907\u4e0a\uff0c\u68c0\u6d4b\u548c\u8bc6\u522b\u8fc7\u7a0b\u5e94\u8be5\u5177\u6709\u63a5\u8fd1\u5b9e\u65f6\u7684\u6027\u80fd\uff08\u5373\u6bcf\u79d2 0.5-1 \u5e27\uff09\u3002\u8fd9\u610f\u5473\u7740\u6574\u4e2a\u68c0\u6d4b + \u8bc6\u522b\u8fc7\u7a0b\u6700\u591a\u9700\u8981 2 \u79d2\uff08\u76f8\u5f53\u53ef\u4ee5\u5fcd\u53d7\uff09\u81f3\u4e8e\u4e1a\u4f59\u9879\u76ee\uff09\u3002\u4ec5\u5e94\u652f\u6301\u6d45\u8272\u80cc\u666f\uff08\u5373\u767d\u8272\u6216\u6d45\u7070\u8272\uff09\u4e0a\u7684\u6df1\u8272\u6587\u672c\uff08\u5373\u9ed1\u8272\u6216\u6df1\u7070\u8272\uff09\u3002\u76ee\u524d\u53ea\u652f\u6301 https:// \u94fe\u63a5\uff08\u5982\u679c\u6211\u4eec\u7684\u6a21\u578b\u65e0\u6cd5\u8bc6\u522b http://\u3001ftp://\u3001tcp:// \u6216\u5176\u4ed6\u7c7b\u578b\u7684\u94fe\u63a5\uff0c\u4e5f\u53ef\u4ee5\uff09\u3002\n\u5728\u540e\u7aef\u8fdb\u884c\u94fe\u63a5\u68c0\u6d4b\u548c\u8bc6\u522b\uff0c\u5e76\u5c06\u54cd\u5e94\u53d1\u9001\u56de\u5ba2\u6237\u7aef\u3002 \ud83d\udc9a \u68c0\u6d4b\u6027\u80fd\u4e0d\u53d7\u5ba2\u6237\u7aef\u8bbe\u5907\u9650\u5236\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6c34\u5e73\uff08\u6dfb\u52a0\u66f4\u591a\u5b9e\u4f8b\uff09\u548c\u5782\u76f4\uff08\u6dfb\u52a0\u66f4\u591a\u5185\u6838/GPU\uff09\u6269\u5c55\u670d\u52a1\u6765\u52a0\u5feb\u68c0\u6d4b\u901f\u5ea6\u3002 \ud83d\udc9a \u6a21\u578b\u53ef\u80fd\u66f4\u5927\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u4e0a\u4f20\u5230\u5ba2\u6237\u7aef\u3002\u5728\u5ba2\u6237\u7aef\u4e0b\u8f7d ~10Mb \u6a21\u578b\u53ef\u80fd\u6ca1\u95ee\u9898\uff0c\u4f46\u52a0\u8f7d ~100Mb \u6a21\u578b\u5bf9\u4e8e\u5ba2\u6237\u7aef\u7684\u7f51\u7edc\u548c\u5e94\u7528\u7a0b\u5e8f UX\uff08\u7528\u6237\u4f53\u9a8c\uff09\u6765\u8bf4\u53ef\u80fd\u662f\u4e00\u4e2a\u5927\u95ee\u9898\u3002 \ud83d\udc9a \u53ef\u4ee5\u63a7\u5236\u8c01\u5728\u4f7f\u7528\u6a21\u578b\u3002\u6a21\u578b\u53d7 API \u4fdd\u62a4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u5176\u8c03\u7528\u65b9/\u5ba2\u6237\u7aef\u3002 \ud83d\udc94 \u7cfb\u7edf\u590d\u6742\u6027\u589e\u957f\u3002\u5e94\u7528\u7a0b\u5e8f\u6280\u672f\u5806\u6808\u4ece JavaScript \u53d1\u5c55\u5230 JavaScript + Python\u3002\u6211\u4eec\u9700\u8981\u6ce8\u610f\u81ea\u52a8\u7f29\u653e\u3002 \ud83d\udc94 \u5e94\u7528\u7a0b\u5e8f\u7684\u79bb\u7ebf\u6a21\u5f0f\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u4e92\u8054\u7f51\u8fde\u63a5\u624d\u80fd\u5de5\u4f5c\u3002 \ud83d\udc94 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u8fc7\u591a\u7684 HTTP \u8bf7\u6c42\u53ef\u80fd\u4f1a\u5728\u67d0\u4e2a\u65f6\u5019\u6210\u4e3a\u74f6\u9888\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u63d0\u9ad8\u68c0\u6d4b\u7684\u6027\u80fd\uff0c\u6bd4\u65b9\u8bf4\uff0c\u4ece\u6bcf\u79d2 1 \u5e27\u5230 10+ \u5e27\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u5ba2\u6237\u7aef\u6bcf\u79d2\u5c06\u53d1\u9001 10 \u4e2a\u4ee5\u4e0a\u7684\u8bf7\u6c42\u3002\u5bf9\u4e8e 10 \u4e2a\u5e76\u53d1\u5ba2\u6237\u7aef\uff0c\u6bcf\u79d2\u5df2\u7ecf\u6709 100 \u591a\u4e2a\u8bf7\u6c42\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cHTTP/2 \u53cc\u5411\u6d41\u548c gRPC \u53ef\u80fd\u5f88\u6709\u7528\uff0c\u4f46\u6211\u4eec\u5c06\u56de\u5230\u8fd9\u91cc\u589e\u52a0\u7684\u7cfb\u7edf\u590d\u6742\u6027\u3002\n\ud83d\udc94 \u7cfb\u7edf\u53d8\u5f97\u66f4\u52a0\u6602\u8d35\u3002\u51e0\u4e4e\u6240\u6709\u6765\u81ea Pros \u90e8\u5206\u7684\u79ef\u5206\u90fd\u9700\u8981\u652f\u4ed8\u3002 \ud83d\udc9a \u7cfb\u7edf\u4e0d\u90a3\u4e48\u590d\u6742\u3002\u6211\u4eec\u4e0d\u9700\u8981\u8bbe\u7f6e\u670d\u52a1\u5668\u3001\u6784\u5efa API \u4ee5\u53ca\u5411\u7cfb\u7edf\u5f15\u5165\u989d\u5916\u7684 Python \u5806\u6808\u3002 \ud83d\udc9a \u79bb\u7ebf\u6a21\u5f0f\u662f\u53ef\u80fd\u7684\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u4e0d\u9700\u8981\u4e92\u8054\u7f51\u8fde\u63a5\u5373\u53ef\u5de5\u4f5c\uff0c\u56e0\u4e3a\u6a21\u578b\u5df2\u5b8c\u5168\u52a0\u8f7d\u5230\u8bbe\u5907\u4e0a\u3002\u56e0\u6b64\uff0c\u53ef\u80fd\u4f1a\u6784\u5efa\u6e10\u8fdb\u5f0f Web \u5e94\u7528\u7a0b\u5e8f (PWA) \u6765\u652f\u6301\u8fd9\u4e00\u70b9\u3002 \ud83d\udc9a \u7cfb\u7edf\u201c\u6709\u70b9\u201d\u81ea\u52a8\u7f29\u653e\u3002\u60a8\u62e5\u6709\u7684\u5ba2\u6237\u7aef\u8d8a\u591a\uff0c\u5b83\u4eec\u5e26\u6765\u7684\u5185\u6838\u548c GPU \u5c31\u8d8a\u591a\u3002\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5408\u9002\u7684\u7f29\u653e\u89e3\u51b3\u65b9\u6848\uff08\u66f4\u591a\u5173\u4e8e\u4e0b\u9762\u7684\u7f3a\u70b9\u90e8\u5206\uff09\u3002 \ud83d\udc9a \u7cfb\u7edf\u66f4\u4fbf\u5b9c\u3002\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u7528\u4e8e\u9759\u6001\u8d44\u4ea7\uff08HTML\u3001JS\u3001CSS\u3001\u6a21\u578b\u6587\u4ef6\u7b49\uff09\u7684\u670d\u52a1\u5668\u3002\u8fd9\u53ef\u80fd\u662f\u514d\u8d39\u7684\uff0c\u6bd4\u65b9\u8bf4\uff0c\u5728 GitHub \u4e0a\u3002 \ud83d\udc9a \u6bcf\u79d2\u53d1\u9001\u5230\u670d\u52a1\u5668\u7aef\u7684 HTTP \u8bf7\u6c42\u6570\u91cf\u4e0d\u65ad\u589e\u52a0\uff0c\u8fd9\u6ca1\u6709\u95ee\u9898\u3002 \ud83d\udc94 \u53ea\u80fd\u8fdb\u884c\u6c34\u5e73\u7f29\u653e\uff08\u6bcf\u4e2a\u5ba2\u6237\u7aef\u90fd\u6709\u81ea\u5df1\u7684 CPU/GPU\uff09\u3002\u5782\u76f4\u7f29\u653e\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u5f71\u54cd\u5ba2\u6237\u7aef\u7684\u8bbe\u5907\u6027\u80fd\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u5bf9\u4f4e\u6027\u80fd\u8bbe\u5907\u8fdb\u884c\u5feb\u901f\u68c0\u6d4b\u3002\n\ud83d\udc94 \u65e0\u6cd5\u4fdd\u62a4\u6a21\u578b\u7684\u4f7f\u7528\u5e76\u63a7\u5236\u6a21\u578b\u7684\u8c03\u7528\u8005/\u5ba2\u6237\u7aef\u3002\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4e0b\u8f7d\u6a21\u578b\u5e76\u91cd\u65b0\u4f7f\u7528\u5b83\u3002 \ud83d\udc94 \u5ba2\u6237\u7aef\u8bbe\u5907\u7684\u7535\u6c60\u6d88\u8017\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\u3002\u4e3a\u4e86\u4f7f\u6a21\u578b\u5de5\u4f5c\uff0c\u5b83\u9700\u8981\u8ba1\u7b97\u8d44\u6e90\u3002\u56e0\u6b64\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u5ba2\u6237\u53ef\u80fd\u4e0d\u6ee1\u610f\u4ed6\u4eec\u7684 iPhone \u8d8a\u6765\u8d8a\u70ed\u3002\u7531\u4e8e\u8be5\u9879\u76ee\u7684\u76ee\u7684\u66f4\u591a\u662f\u5173\u4e8e\u5b66\u4e60\u800c\u4e0d\u662f\u63d0\u51fa\u751f\u4ea7\u5c31\u7eea\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u6b64\u6211\u51b3\u5b9a\u91c7\u7528\u4ece\u5ba2\u6237\u7aef\u4e3a\u6a21\u578b\u63d0\u4f9b\u670d\u52a1\u7684\u7b2c\u4e8c\u79cd\u9009\u62e9\u3002\u8fd9\u4f7f\u6574\u4e2a\u9879\u76ee\u7684\u6210\u672c\u5927\u5927\u964d\u4f4e\uff08\u5b9e\u9645\u4e0a\uff0c\u4f7f\u7528 GitHub \u53ef\u4ee5\u514d\u8d39\u6258\u7ba1\u5b83\uff09\uff0c\u800c\u4e14\u6211\u53ef\u4ee5\u5c06\u66f4\u591a\u7cbe\u529b\u653e\u5728\u673a\u5668\u5b66\u4e60\u4e0a\uff0c\u800c\u4e0d\u662f\u81ea\u52a8\u7f29\u653e\u540e\u7aef\u57fa\u7840\u8bbe\u65bd\u4e0a\u3002\u597d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u51b3\u5b9a\u91c7\u7528\u65e0\u670d\u52a1\u5668\u89e3\u51b3\u65b9\u6848\u3002\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u6765\u81ea\u76f8\u673a\u6d41\u7684\u56fe\u50cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\u7b2c\u4e00\u4e2a\u4e5f\u662f\u6700\u660e\u663e\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u4f7f\u7528\u8bc6\u522b\u56fe\u50cf\u7684\u6574\u4e2a\u6587\u672c\u6765\u89e3\u51b3\u5149\u5b66\u5b57\u7b26\u8bc6\u522b (OCR) \u4efb\u52a1\uff0c\u6bd4\u65b9\u8bf4, Tesseract.js \u5e93\u3002\u5b83\u8fd4\u56de\u6bb5\u843d\u3001\u6587\u672c\u884c\u548c\u6587\u672c\u5757\u7684\u8fb9\u754c\u6846\u4ee5\u53ca\u8bc6\u522b\u7684\u6587\u672c\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u8fd9\u6837\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4ece\u8bc6\u522b\u7684\u6587\u672c\u884c\u6216\u6587\u672c\u5757\u4e2d\u63d0\u53d6\u94fe\u63a5\uff08\u793a\u4f8b\u5728 TypeScript \u4e0a\uff09\uff1a const URL_REG_EXP = / https?:\\/\\/(www\\.)?[-a -zA-Z0-9@:%._+~#=]{2,256}\\.[az]{2,4}\\b([-a-zA-Z0-9@:%_+.~#? &amp;/=]*) / gi ; const extractLinkFromText = (text : string ) : string | null =&gt; { const urls : string [] |\u7a7a = \u6587\u672c\u3002\u5339\u914d ( URL_REG_EXP ) ; if ( !urls || !urls .length ) { return null ; } \u8fd4\u56de\u7f51\u5740 [ 0 ] ; };\n\ud83d\udc94 \u95ee\u9898\u662f\u8bc6\u522b+\u68c0\u6d4b\u65f6\u95f4\u53ef\u80fd\u4f1a\u4ece 2 \u79d2\u5230 20+ \u79d2\u4e0d\u7b49\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6587\u672c\u7684\u5927\u5c0f\u3001\u56fe\u50cf\u4e0a\u201c\u770b\u8d77\u6765\u50cf\u6587\u672c\u7684\u4e1c\u897f\u201d\u7684\u6570\u91cf\u3001\u56fe\u50cf\u8d28\u91cf\u548c\u5176\u4ed6\u56e0\u7d20.\u56e0\u6b64\uff0c\u8981\u8fbe\u5230\u6bcf\u79d2 0.5-1 \u5e27\u4ee5\u8ba9\u7528\u6237\u4f53\u9a8c\u81f3\u5c11\u63a5\u8fd1\u5b9e\u65f6\u5c06\u975e\u5e38\u56f0\u96be\u3002 \ud83d\udc94 \u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c\u6211\u4eec\u8981\u6c42\u56fe\u4e66\u9986\u4e3a\u6211\u4eec\u8bc6\u522b\u56fe\u50cf\u4e2d\u7684\u6574\u4e2a\u6587\u672c\uff0c\u5373\u4f7f\u5b83\u53ef\u80fd\u53ea\u5305\u542b\u4e00\u4e24\u4e2a\u94fe\u63a5\uff08\u5373\u53ea\u6709\u7ea6 10% \u7684\u6587\u672c\u53ef\u80fd\u5bf9\u6211\u4eec\u6709\u7528\uff09\u6211\u4eec\uff09\uff0c\u6216\u8005\u5b83\u751a\u81f3\u53ef\u80fd\u6839\u672c\u4e0d\u5305\u542b\u94fe\u63a5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u542c\u8d77\u6765\u50cf\u662f\u5728\u6d6a\u8d39\u8ba1\u7b97\u8d44\u6e90\u3002\u5982\u679c\u6211\u4eec\u5728\u94fe\u63a5\u6587\u672c\u8bc6\u522b\u4e4b\u524d\u4f7f\u7528\u4e00\u4e9b\u989d\u5916\u7684\u201c\u987e\u95ee\u201d\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f Tesseract \u5de5\u4f5c\u5f97\u66f4\u5feb\u3002\u8fd9\u4e2a\u201c\u987e\u95ee\u201d\u7b97\u6cd5\u5e94\u8be5\u68c0\u6d4b\u4f46\u4e0d\u8bc6\u522b\u56fe\u50cf\u4e0a\u6bcf\u4e2a\u94fe\u63a5\u7684\u6700\u5de6\u8fb9\u4f4d\u7f6e\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002\u8fd9\u5c06\u4f7f\u6211\u4eec\u80fd\u591f\u901a\u8fc7\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\u6765\u52a0\u901f\u8bc6\u522b\u90e8\u5206\uff1a\u5982\u679c\u56fe\u50cf\u4e0d\u5305\u542b\u4efb\u4f55\u94fe\u63a5\uff0c\u6211\u4eec\u6839\u672c\u4e0d\u5e94\u8c03\u7528 Tesseract \u68c0\u6d4b/\u8bc6\u522b\u3002\u5982\u679c\u56fe\u50cf\u786e\u5b9e\u6709\u94fe\u63a5\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u8ba9 Tesseract \u4ec5\u8bc6\u522b\u56fe\u50cf\u4e2d\u5305\u542b\u94fe\u63a5\u7684\u90a3\u4e9b\u90e8\u5206\u3002\u6211\u4eec\u4e0d\u60f3\u82b1\u65f6\u95f4\u8bc6\u522b\u4e0d\u5305\u542b\u94fe\u63a5\u7684\u4e0d\u76f8\u5173\u6587\u672c\u3002\u5c06\u5728 Tesseract \u4e4b\u524d\u53d1\u751f\u7684\u201c\u987e\u95ee\u201d\u7b97\u6cd5\u5e94\u8be5\u4ee5\u6052\u5b9a\u7684\u65f6\u95f4\u5de5\u4f5c\uff0c\u65e0\u8bba\u56fe\u50cf\u8d28\u91cf\u5982\u4f55\uff0c\u6216\u8005\u56fe\u50cf\u4e0a\u662f\u5426\u5b58\u5728\u6587\u672c\u3002\u5b83\u4e5f\u5e94\u8be5\u975e\u5e38\u5feb\uff0c\u5e76\u4e14\u5728\u4e0d\u5230 1 \u79d2\u7684\u65f6\u95f4\u5185\u68c0\u6d4b\u5230\u94fe\u63a5\u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u6211\u4eec\u80fd\u591f\u6ee1\u8db3\u201c\u63a5\u8fd1\u5b9e\u65f6\u201d\u7684\u8981\u6c42\uff08\u5373\u5728 iPhone X \u4e0a\uff09\u3002 \ud83d\udca1 \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u53e6\u4e00\u4e2a\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u6765\u5e2e\u52a9\u6211\u4eec\u627e\u5230\u56fe\u50cf\u4e2d\u6240\u6709\u51fa\u73b0\u7684 https:// \u5b50\u5b57\u7b26\u4e32\uff08\u6bcf\u4e2a\u5b89\u5168\u94fe\u63a5\u90fd\u6709\u8fd9\u4e2a\u524d\u7f00\uff0c\u4e0d\u662f\u5417\uff09\u600e\u4e48\u529e\uff1f\u7136\u540e\uff0c\u5728\u6587\u672c\u4e2d\u6709\u8fd9\u4e9b https:// \u8fb9\u754c\u6846\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u5b83\u4eec\u7684\u53f3\u4fa7\u5ef6\u7eed\u5e76\u5c06\u5b83\u4eec\u53d1\u9001\u5230 Tesseract \u8fdb\u884c\u6587\u672c\u8bc6\u522b\u3002\n\u60a8\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230 Tesseract \u9700\u8981\u505a\u7684\u5de5\u4f5c\u8981\u5c11\u5f97\u591a\uff0c\u4ee5\u9632\u4e07\u4e00\u5b83\u6709\u4e00\u4e9b\u5173\u4e8e\u94fe\u63a5\u53ef\u80fd\u4f4d\u4e8e\u4f55\u5904\u7684\u63d0\u793a\uff08\u8bf7\u53c2\u9605\u4e24\u5f20\u56fe\u7247\u4e0a\u7684\u84dd\u8272\u6846\u7684\u6570\u91cf\uff09\u3002\u6240\u4ee5\u73b0\u5728\u7684\u95ee\u9898\u662f\u6211\u4eec\u5e94\u8be5\u9009\u62e9\u54ea\u79cd\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u4ee5\u53ca\u5982\u4f55\u91cd\u65b0\u8bad\u7ec3\u5b83\u4ee5\u652f\u6301\u81ea\u5b9a\u4e49 https:// \u5bf9\u8c61\u7684\u68c0\u6d4b\u3002\u8bad\u7ec3\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u5728\u6211\u4eec\u7684\u4e0a\u4e0b\u6587\u4e2d\u4e0d\u662f\u4e00\u4e2a\u5408\u7406\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u4ee5\u4e0b\u539f\u56e0\uff1a\ud83d\udc94\u6211\u4eec\u5f88\u53ef\u80fd\u65e0\u6cd5\u6536\u96c6\u6570\u5341\u4e07\u5f20\u5e26\u6709\u94fe\u63a5\u7684\u4e66\u7c4d\u7684\u6807\u8bb0\u56fe\u50cf\uff08\u6211\u4eec\u53ef\u80fd\u4f1a\u867d\u7136\u751f\u6210\u5b83\u4eec\uff0c\u4f46\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\u3002\u56e0\u6b64\uff0c\u4e0e\u5176\u521b\u5efa\u65b0\u6a21\u578b\uff0c\u4e0d\u5982\u6559\u4e00\u4e2a\u73b0\u6709\u7684\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u4e3a\u6211\u4eec\u8fdb\u884c\u81ea\u5b9a\u4e49\u5bf9\u8c61\u68c0\u6d4b\uff08\u8fdb\u884c\u8fc1\u79fb\u5b66\u4e60\uff09\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u201c\u81ea\u5b9a\u4e49\u5bf9\u8c61\u201d\u5c06\u662f\u5e26\u6709 https:// \u6587\u672c\u7684\u56fe\u50cf\u3002\u8fd9\u79cd\u65b9\u6cd5\u6709\u4ee5\u4e0b\u597d\u5904\uff1a \ud83d\udc9a \u6570\u636e\u96c6\u53ef\u80fd\u8981\u5c0f\u5f97\u591a\u3002\u6211\u4eec\u4e0d\u9700\u8981\u6536\u96c6\u6210\u5343\u4e0a\u4e07\u7684\u6807\u8bb0\u56fe\u50cf\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u505a\u5927\u7ea6 100 \u5f20\u56fe\u7247\u5e76\u624b\u52a8\u6807\u8bb0\u5b83\u4eec\u3002\u8fd9\u662f\u56e0\u4e3a\u6a21\u578b\u5df2\u7ecf\u5728 COCO \u6570\u636e\u96c6\u7b49\u901a\u7528\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u4e86\u9884\u8bad\u7ec3\uff0c\u5e76\u4e14\u5df2\u7ecf\u5b66\u4f1a\u4e86\u5982\u4f55\u63d0\u53d6\u901a\u7528\u56fe\u50cf\u7279\u5f81\u3002 \ud83d\udc9a \u8bad\u7ec3\u8fc7\u7a0b\u4f1a\u66f4\u5feb\uff08GPU \u4e0a\u7684\u5206\u949f/\u5c0f\u65f6\u800c\u4e0d\u662f\u51e0\u5929/\u51e0\u5468\uff09\u3002\u540c\u6837\uff0c\u8fd9\u662f\u56e0\u4e3a\u8f83\u5c0f\u7684\u6570\u636e\u96c6\uff08\u8f83\u5c0f\u7684\u6279\u6b21\uff09\u548c\u8f83\u5c11\u7684\u53ef\u8bad\u7ec3\u53c2\u6570\u3002\n\u6211\u4eec\u53ef\u4ee5\u4ece TensorFlow 2 Detection Model Zoo \u4e2d\u9009\u62e9\u73b0\u6709\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5728 COCO 2017 \u6570\u636e\u96c6\u4e0a\u9884\u8bad\u7ec3\u7684\u68c0\u6d4b\u6a21\u578b\u3002\u73b0\u5728\u5b83\u5305\u542b\u5927\u7ea6 40 \u4e2a\u6a21\u578b\u53d8\u4f53\u53ef\u4f9b\u9009\u62e9\u3002\u4e3a\u4e86\u5728\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4e0a\u91cd\u65b0\u8bad\u7ec3\u548c\u5fae\u8c03\u6a21\u578b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API\u3002 TensorFlow \u5bf9\u8c61\u68c0\u6d4b API \u662f\u4e00\u4e2a\u6784\u5efa\u5728 TensorFlow \u4e4b\u4e0a\u7684\u5f00\u6e90\u6846\u67b6\uff0c\u53ef\u4ee5\u8f7b\u677e\u6784\u5efa\u3001\u8bad\u7ec3\u548c\u90e8\u7f72\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u3002\u5982\u679c\u60a8\u70b9\u51fb Model Zoo \u94fe\u63a5\uff0c\u60a8\u5c06\u627e\u5230\u6bcf\u4e2a\u6a21\u578b\u7684\u68c0\u6d4b\u901f\u5ea6\u548c\u51c6\u786e\u5ea6\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u9009\u62e9\u6a21\u578b\u65f6\u5728\u68c0\u6d4b\u901f\u5ea6\u548c\u51c6\u786e\u6027\u4e4b\u95f4\u627e\u5230\u9002\u5f53\u7684\u5e73\u8861\u3002\u4f46\u662f\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u53ef\u80fd\u66f4\u91cd\u8981\u7684\u662f\u6a21\u578b\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u5b83\u5c06\u88ab\u52a0\u8f7d\u5230\u5ba2\u6237\u7aef\u3002\u5b58\u6863\u6a21\u578b\u7684\u5927\u5c0f\u53ef\u80fd\u5728 ~20Mb \u5230 ~1Gb \u4e4b\u95f4\u53d8\u5316\u5f88\u5927\u3002\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50\uff1a \ud83d\udc9a \u5b83\u4f7f\u7528 MobileNet v2 \u7f51\u7edc\u4f5c\u4e3a\u7279\u5f81\u63d0\u53d6\u5668\uff0c\u8be5\u7f51\u7edc\u9488\u5bf9\u79fb\u52a8\u8bbe\u5907\u7684\u4f7f\u7528\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u4ee5\u964d\u4f4e\u80fd\u8017\u3002 \ud83d\udc9a \u65e0\u8bba\u56fe\u50cf\u5185\u5bb9\u5982\u4f55\uff0c\u200b\u200b\u5b83\u90fd\u4f1a\u4e00\u6b21\u6027\u5bf9\u6574\u4e2a\u56fe\u50cf\u548c\u5176\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u8fdb\u884c\u5bf9\u8c61\u68c0\u6d4b\uff08\u4e0d\u6d89\u53ca\u533a\u57df\u63d0\u8bae\u6b65\u9aa4\uff0c\u8fd9\u4f7f\u5f97\u68c0\u6d4b\u901f\u5ea6\u66f4\u5feb\uff09\u3002\n\ud83d\udc94 \u867d\u7136\u5b83\u4e0d\u662f\u6700\u51c6\u786e\u7684\u6a21\u578b\uff08\u4e00\u5207\u90fd\u662f\u6743\u8861\u2696\ufe0f\uff09\u3002\u6a21\u578b\u540d\u79f0\u7f16\u7801\u4e86\u4e00\u4e9b\u91cd\u8981\u7279\u5f81\uff0c\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb\u66f4\u591a\u76f8\u5173\u4fe1\u606f\uff1a \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u628a Tensorflow 2 \u5bf9\u8c61\u68c0\u6d4b API \u4f5c\u4e3a Python \u5305\u5b89\u88c5\u3002\u5982\u679c\u60a8\u5728 Google Colab\uff08\u63a8\u8350\uff09\u6216 Jupyter \u4e2d\u8fdb\u884c\u8bd5\u9a8c\uff0c\u8fd9\u4f1a\u5f88\u65b9\u4fbf\u3002\u5bf9\u4e8e\u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u90fd\u4e0d\u9700\u8981\u672c\u5730\u5b89\u88c5\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728\u6d4f\u89c8\u5668\u4e2d\u8fdb\u884c\u8bd5\u9a8c\u3002\u5982\u679c\u60a8\u66f4\u559c\u6b22\u901a\u8fc7 Docker \u5b89\u88c5\u5bf9\u8c61\u68c0\u6d4b API\uff0c\u60a8\u4e5f\u53ef\u4ee5\u9075\u5faa\u5b98\u65b9\u6587\u6863\u3002\u5982\u679c\u60a8\u5728 API \u5b89\u88c5\u6216\u6570\u636e\u96c6\u51c6\u5907\u671f\u95f4\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u5c1d\u8bd5\u901a\u8bfb TensorFlow 2 \u5bf9\u8c61\u68c0\u6d4b API \u6559\u7a0b\uff0c\u5176\u4e2d\u4e3a\u8be5\u8fc7\u7a0b\u6dfb\u52a0\u4e86\u8bb8\u591a\u6709\u7528\u7684\u7ec6\u8282\u3002\u514b\u9686\u5230\u201c\u6a21\u578b\u201d...\u8fdc\u7a0b\uff1a\u679a\u4e3e\u5bf9\u8c61\uff1a2301\uff0cdone.remote\uff1a\u8ba1\u6570\u5bf9\u8c61\uff1a100%\uff082301/2301\uff09\uff0cdone.remote\uff1a\u538b\u7f29\u5bf9\u8c61\uff1a100%\uff082000/2000\uff09\uff0cdone.remote\uff1a\u603b\u8ba12301 (delta 561), \u91cd\u7528 922 (delta 278), \u6253\u5305\u91cd\u7528 0Receiving objects: 100% (2301/2301), 30.60 MiB | 13.90 MiB/s\uff0c\u5b8c\u6210\u3002\u89e3\u6790\u589e\u91cf\uff1a100% (561/561)\uff0c\u5b8c\u6210\u3002\u7531\u4e8e\u67d0\u4e9b\u4f9d\u8d56\u9879\u9519\u8bef\uff0c\u6700\u540e\u4e00\u6b65\u53ef\u80fd\u4f1a\u5931\u8d25\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8fd0\u884c pip install \u3002 \u2014\u2014\u518d\u5b89\u9759\u4e00\u6b21\u3002\nTensorFlow \u5bf9\u8c61\u68c0\u6d4b API \u5df2\u5b89\u88c5\uff01\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 API \u63d0\u4f9b\u7684\u811a\u672c\u8fdb\u884c\u6a21\u578b\u63a8\u7406\u3001\u8bad\u7ec3\u6216\u5fae\u8c03\u3002\u8ba9\u6211\u4eec\u4ece TensorFlow Model Zoo \u4e0b\u8f7d\u6211\u4eec\u9009\u62e9\u7684 ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8 \u6a21\u578b\uff0c\u5e76\u68c0\u67e5\u5b83\u5982\u4f55\u8fdb\u884c\u4e00\u822c\u5bf9\u8c61\u68c0\u6d4b\uff08\u4ece COCO \u6570\u636e\u96c6\u4e2d\u68c0\u6d4b\u7c7b\u7684\u5bf9\u8c61\uff0c\u5982\u201c\u732b\u201d\u3001\u201c\u72d7\u201d\u3001\u201c\u6c7d\u8f66\u201d\u7b49\uff09\u3002\u6211\u4eec\u5c06\u4f7f\u7528 get_file() TensorFlow \u5e2e\u52a9\u7a0b\u5e8f\u4ece URL \u4e0b\u8f7d\u5b58\u6863\u6a21\u578b\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u3002\u5c06\u5f20\u91cf\u6d41\u5bfc\u5165\u4e3a tf \u5bfc\u5165\u8def\u5f84libMODEL_NAME = &#39;ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8&#39;TF_MODELS_BASE_PATH = &#39;http://download.tensorflow.org/models/object_detection/tf2/202007111/202007111/202007111/202007111/20200711_model_cache_model_cache_model_cache_model_cache_model_fpnlite_640x640_coco17_tpu-8&#39;TF_MODELS_BASE_PATH = &#39;http://download.tensorflow.org/models/object_detection/tf2 = TF_MODELS_BASE_PATH + model_name + &#39;.tar.gz&#39; model_dir = tf .keras .utils .get_file ( fname =model_name , origin =model_url , untar = True , cache_dir =pathlib .Path (cache_folder ) .absolute ( ) ) return model_dir #\u5f00\u59cb\u6a21\u578b download.model_dir = download_tf_model (MODEL_NAME , CACHE_FOLDER ) \u6253\u5370 (model_dir ) pipeline.config \u6587\u4ef6\u5305\u542b\u6a21\u578b\u7684\u68c0\u6d4b\u8bbe\u7f6e\u3002\u5f53\u6211\u4eec\u9700\u8981\u5fae\u8c03\u6a21\u578b\u65f6\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u56de\u5230\u8fd9\u4e2a\u6587\u4ef6\u3002\u76ee\u524d\uff0c\u8be5\u6a21\u578b\u53ef\u4ee5\u68c0\u6d4b 90 \u4e2a COCO \u6570\u636e\u96c6\u7c7b\u7684\u5bf9\u8c61\uff0c\u5982\u6c7d\u8f66\u3001\u9e1f\u3001\u70ed\u72d7\u7b49\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6a21\u578b\u5728\u5305\u542b\u8fd9\u4e9b\u7c7b\u5bf9\u8c61\u7684\u4e00\u4e9b\u901a\u7528\u56fe\u50cf\u4e0a\u7684\u8868\u73b0\u5982\u4f55\u3002\nObject Detection API \u5df2\u7ecf\u4e3a\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u5957\u5b8c\u6574\u7684 COCO \u6807\u7b7e\uff08\u7c7b\uff09\u3002 import os # \u5bfc\u5165\u5bf9\u8c61\u68c0\u6d4b API \u52a9\u624b\u3002 from object_detection .utils import label_map_util # \u52a0\u8f7d COCO \u6807\u7b7e\u6570\u636e\uff08\u7c7b\u540d\u548c\u7d22\u5f15\u5173\u7cfb\uff09\u3002 def load_coco_labels() : # Object Detection API \u5df2\u7ecf\u4e3a\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u5957\u5b8c\u6574\u7684 COCO \u7c7b\u3002 label_map_path = os .path .join ( &#39;models/research/object_detection/data&#39; , &#39;mscoco_complete_label_map.pbtxt&#39; ) label_map = label_map_util .load_labelmap (label_map_path ) # \u7c7b ID \u5230\u7c7b\u540d\u7684\u6620\u5c04\u3002 category = label_map_util .convert_label_map_to_categories ( label_map , max_num_classes =label_map_util .get_max_label_map_index (label_map ) , use_display_name = True ) category_index = label_map_util .create_category_index (categories) #Class Name to Class ID mapping label_map_dict = label_map_util .get_label_map_dict (label_map , use_display_name = True ) return category_index , label_map_dict # \u52a0\u8f7d COCO \u6807\u7b7e.coco_category_index , coco_label_map_dict = load_coco_labels ( ) print ( &#39;coco_category_index :&#39;coco_category_index :&#39;coco_category_index_codict_index:&#39;coco_category_index_codict_map_index:&#39;coco_categ_c : {&#39;id&#39;: 1, &#39;name&#39;: &#39;person&#39;}, 2: {&#39;id&#39;: 2, &#39;name&#39;: &#39;bicycle&#39;}, ... 90: {&#39;id&#39;: 90, &#39;name&#39; : &#39;toothbrush&#39;},}coco_label_map_dict:{ &#39;background&#39;: 0, &#39;person&#39;: 1, &#39;bicycle&#39;: 2, &#39;car&#39;: 3, ... &#39;toothbrush&#39;: 90,} \u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u68c0\u6d4b\u8be5\u51fd\u6570\u5c06\u4f7f\u7528\u6211\u4eec\u4e0b\u8f7d\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u5bf9\u8c61\u68c0\u6d4b\u3002 import tensorflow as tf # \u5bfc\u5165\u5bf9\u8c61\u68c0\u6d4b API \u52a9\u624b\u3002 from object_detection .utils import config_util from object_detection .builders import model_builder # \u4e3a\u7279\u5b9a\u6a21\u578b\u548c\u7279\u5b9a\u6a21\u578b\u7684\u68c0\u67e5\u70b9\u751f\u6210\u68c0\u6d4b\u51fd\u6570 def detection_fn_from_checkpoint (config_path , checkpoint_path ) : # \u6784\u5efa\u6a21\u578b\u3002 pipeline_config = config_util .get_configs_from_pipeline_file (config_path) model_config = pipeline_config [ &#39;model&#39; ] model = model_builder .build ( model_config =model_config , is_training = False , ) # \u6062\u590d\u68c0\u67e5\u70b9\u3002 ckpt = tf .compat .v2 .train .Checkpoint (model =model ) ckpt .restore (checkpoint_path ) .expect_partial ( ) # \u8fd9\u662f\u4e00\u4e2a\u8fdb\u884c\u68c0\u6d4b\u7684\u51fd\u6570\u3002 @tf .function def detect_fn\uff08\u56fe\u50cf\uff09\uff1a\u56fe\u50cf\uff0c\u5f62\u72b6=\u6a21\u578b.\u9884\u5904\u7406\uff08\u56fe\u50cf\uff09\u9884\u6d4b_dict=\u6a21\u578b.\u9884\u6d4b\uff08\u56fe\u50cf\uff0c\u5f62\u72b6\uff09\u68c0\u6d4b=\u6a21\u578b.\u540e\u5904\u7406\uff08\u9884\u6d4b_dict\uff0c\u5f62\u72b6\uff09\u8fd4\u56de\u68c0\u6d4b\uff0c\u9884\u6d4b_dict\uff0ctf .reshape\uff08\u5f62\u72b6\uff09 , [ - 1 ] ) return detect_fninference_detect_fn = detection_fn_from_checkpoint ( config_path =os .path .join ( &#39;cache&#39; , &#39;datasets&#39; , MODEL_NAME , &#39;pipeline.config&#39; ) , checkpoint_path =os .path .join (&#39;datasets&#39; , &#39;datasets&#39; &#39; , MODEL_NAME , &#39;checkpoint&#39; , &#39;ckpt-0&#39; ) , ) \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u5c06\u56fe\u50cf\u4fdd\u5b58\u5230\u6211\u4eec\u9879\u76ee\u7684 inference/test/ \u6587\u4ef6\u5939\u4e2d\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Google Colab\uff0c\u5219\u53ef\u4ee5\u521b\u5efa\u6b64\u6587\u4ef6\u5939\u5e76\u624b\u52a8\u4e0a\u4f20\u56fe\u50cf\u3002 import matplotlib .pyplot as plt %matplotlib inline # \u521b\u5efa\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a image.inference_ds = tf .keras .p\u200b\u200breprocessing .image_dataset_from_directory ( directory = &#39;inference&#39; , image_size = ( 640 , 640 ) , batch_size = 1 , False shuffle \u7684 TensorFlow \u6570\u636e\u96c6, label_mode = None ) # Numpy \u7248\u672c\u7684\u6570\u636e\u96c6.inference_ds_numpy = list (inference_ds .as_numpy_iterator() ) # \u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u9884\u89c8\u6570\u636e\u96c6\u4e2d\u7684\u56fe\u50cf.plt .figure (figsize = ( 14 , 14 ) ) for i , image in\u679a\u4e3e\uff08inference_ds_numpy\uff09\uff1aplt.subplot\uff082,2,i+1\uff09plt.imshow\uff08image[0].astype\uff08\u201cuint8\u201d\uff09\uff09plt.axis\uff08\u201coff\u201d\uff09plt.show\uff08\uff09\n\u73b0\u5728\u6211\u4eec\u5df2\u51c6\u5907\u597d\u8fd0\u884c\u68c0\u6d4b\u3002 inference_ds_numpy[0] \u6570\u7ec4\u4ee5 Numpy \u683c\u5f0f\u5b58\u50a8\u7b2c\u4e00\u5f20\u56fe\u50cf\u7684\u50cf\u7d20\u6570\u636e\u3002 box = detections [&#39;detection_boxes&#39;] .numpy ()scores = detections [&#39;detection_scores&#39;] .numpy()classes = detections [&#39;detection_classes&#39;] .numpy()num_detections = detections [&#39;num_detections&#39;] .numpy() [0 ] \u6253\u5370\uff08&#39;boxes.shape\uff1a&#39;\uff0cboxes .shape\uff09\u6253\u5370\uff08&#39;scores.shape\uff1a&#39;\uff0cscores.shape\uff09\u6253\u5370\uff08&#39;classes.shape\uff1a&#39;\uff0cclasses.shape\uff09\u6253\u5370\uff08&#39;num_detections\uff1a&#39;\uff0cnum_detections\uff09\u6a21\u578b\u4e3a\u6211\u4eec\u505a\u4e86 100 \u6b21\u68c0\u6d4b\u3002\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u5728\u56fe\u50cf\u4e0a\u627e\u5230\u4e86 100 \u4e2a\u5bf9\u8c61\u3002\u8fd9\u610f\u5473\u7740\u8be5\u6a21\u578b\u6709 100 \u4e2a\u69fd\uff0c\u5e76\u4e14\u5b83\u6700\u591a\u53ef\u4ee5\u5728\u5355\u4e2a\u56fe\u50cf\u4e0a\u68c0\u6d4b 100 \u4e2a\u5bf9\u8c61\u3002\u6bcf\u4e2a\u68c0\u6d4b\u90fd\u6709\u4e00\u4e2a\u5206\u6570\uff0c\u4ee3\u8868\u6a21\u578b\u5bf9\u5176\u7684\u7f6e\u4fe1\u5ea6\u3002\u6bcf\u4e2a\u68c0\u6d4b\u7684\u8fb9\u754c\u6846\u90fd\u5b58\u50a8\u5728 box \u6570\u7ec4\u4e2d\u3002\u6a21\u578b\u5173\u4e8e\u6bcf\u6b21\u68c0\u6d4b\u7684\u5206\u6570\u6216\u7f6e\u4fe1\u5ea6\u662f......", "note_en": "In this article we will start solving the issue of making the printed links (i.e. in a book or in a magazine) clickable via your smartphone camera.\n We will use  TensorFlow 2 Object Detection API to train a custom object detector model to find positions and bounding boxes of the sub-strings like  https:// in the text image (i.e. in smartphone camera stream).\n The text of each link (right continuation of  https:// bounding box) will be recognized by using  Tesseract library. The recognition part will not be covered in this article, but you may find the complete code example of the application in  links-detector repository.\n  \ud83d\udcdd  Open links-detector repository on GitHub to see the complete source code of the application.\n   \u26a0\ufe0f Currently the application is in  experimental  Alpha stage and has  many issues and limitations. So don&#39;t raise your expectations level too high until these issues are resolved \ud83e\udd37\ud83c\udffb\u200d. Also, the purpose of this article is more about learning how to work with TensorFlow 2 Object Detection API rather than coming up with a production-ready model.\n In case if Python code blocks in this article will lack proper formatting on this platform feel free to  to read the article on GitHub\n  I work as a software engineer and in my own time, I learn Machine Learning as a hobby. But this is not the problem yet.\n I bought a printed book about Machine Learning recently and while I was reading through the first several chapters I&#39;ve encountered many printed links in the text that looked like  https://tensorflow.org/ or  https://some-url.com/which/may/be/even/longer?and_with_params=true.\n  I saw all these links, but I couldn&#39;t click on them since they were printed (thanks, cap!). To visit these links I needed to start typing them character by character in the browser&#39;s address bar, which was pretty annoying and error-prone.\n  So, I was thinking, what if, similarly to QR-code detection, we will try to &#34;teach&#34; the smartphone to  (1)  detect and  (2)  recognize printed links for us and to make them  clickable? This way you would do just one click instead of multiple keystrokes. The operational complexity of &#34;clicking&#34; the printed links goes from  O(N) to  O(1).\n    As I&#39;ve mentioned earlier I&#39;m just studying Machine Learning as a hobby. Thus, the purpose of this article is more about  learning how to work with TensorFlow 2 Object Detection API rather than coming up with a production-ready application.\n  The detection and recognition processes should have a  close-to-real-time performance (i.e.  0.5-1 frames per second) on a device like iPhone X. It means that the whole  detection + recognition process should take up to  2 seconds (pretty bearable as for the amateur project).\n  Only  dark text (i.e. black or dark-grey) on  light background (i.e. white or light-grey) should be supported.\n Only  https:// links should be supported for now (it is ok if our model will not recognize the  http://,  ftp://,  tcp:// or other types of links).\n      Do link detection and recognition on the back-end and send the response back to the client.\n   \ud83d\udc9a The detection performance is not limited by the client&#39;s device. We may speed the detection up by scaling the service horizontally (adding more instances) and vertically (adding more cores/GPUs).\n \ud83d\udc9a The model might be bigger since there is no need to upload it to the client-side. Downloading the  ~10Mb model on the client-side may be ok, but loading the  ~100Mb model might be a big issue for the client&#39;s network and application UX (user experience) otherwise.\n \ud83d\udc9a It is possible to control who is using the model. Model is guarded behind the API, so we would have complete control over its callers/clients.\n  \ud83d\udc94 System complexity growth. The application tech stack grew from just  JavaScript to, let&#39;s say,  JavaScript + Python. We need to take care of the autoscaling.\n \ud83d\udc94 Offline mode for the app is not possible since it needs an internet connection to work.\n \ud83d\udc94 Too many HTTP requests between the client and the server may become a bottleneck at some point. Imagine if we would want to improve the performance of the detection, let&#39;s say, from  1 to  10+ frames per second. This means that each client will send  10+ requests per second. For  10 simultaneous clients it is already  100+ requests per second. The  HTTP/2 bidirectional streaming and  gRPC might be useful in this case, but we&#39;re going back to the increased system complexity here.\n \ud83d\udc94 System becomes more expensive. Almost all points from the Pros section need to be paid for.\n      \ud83d\udc9a System is less complex. We don&#39;t need to set up the servers, build the API, and introduce an additional Python stack to the system.\n \ud83d\udc9a Offline mode is possible. The app doesn&#39;t need an internet connection to work since the model is fully loaded to the device. So the Progressive Web Application ( PWA) might be built to support that.\n \ud83d\udc9a System is &#34;kind of&#34; scaling automatically. The more clients you have, the more cores and GPUs they bring. This is not a proper scaling solution though (more about that in a Cons section below).\n \ud83d\udc9a System is cheaper. We only need a server for static assets ( HTML,  JS,  CSS, model files, etc.). This may be done for free, let&#39;s say, on GitHub.\n \ud83d\udc9a No issue with the growing number of HTTP requests per second to the server-side.\n  \ud83d\udc94 Only horizontal scaling is possible (each client will have its own CPU/GPU). Vertical scaling is not possible since we can&#39;t influence the client&#39;s device performance. As a result, we can&#39;t guarantee fast detection for low performant devices.\n \ud83d\udc94 It is not possible to guard the model usage and control the callers/clients of the model. Everyone could download the model and re-use it.\n \ud83d\udc94 Battery consumption of the client&#39;s device might become an issue. For the model to work it needs computational resources. So clients might not be happy with their iPhone getting warmer and warmer while the app is working.\n  Since the purpose of the project was more about learning and not coming up with a production-ready solution  I decided to go with the second option of serving the model from the client side. This made the whole project much cheaper (actually with GitHub it was free to host it), and I could focus more on Machine Learning than on the autoscaling back-end infrastructure.\n  Ok, so we&#39;ve decided to go with the serverless solution. Now we have an image from the camera stream as an input that looks something like this:\n     The first and the most obvious approach would be to solve the  Optical Character Recognition ( OCR) task by recognizing the whole text of the image by using, let&#39;s say,  Tesseract.js library. It returns the bounding boxes of the paragraphs, text lines, and text blocks along with the recognized text.\n  We may try then to extract the links from the recognized text lines or text blocks with a regular expression like  this one (example is on TypeScript):\n const  URL_REG_EXP  =   / https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_+.~#?&amp;/=]*) / gi ; const extractLinkFromText  =  (text :  string ) :  string  |  null  =&gt;  {  const urls :  string [ ]  |  null  = text . match ( URL_REG_EXP ) ;  if  ( !urls  ||  !urls .length )  {  return  null ;  }  return urls [ 0 ] ; } ;\n   \ud83d\udc94 The thing is that the  recognition + detection time may vary from  2 to  20+ seconds depending on the size of the text, on the amount of &#34;something that looks like a text&#34; on the image, on the image quality and on other factors. So it will be really hard to achieve those  0.5-1 frames per second to make the user experience at least  close to real-time.\n \ud83d\udc94 Also if we would think about it, we&#39;re asking the library to recognize the  whole text from the image for us even though it might contain only one or two links in it (i.e. only ~10% of the text might be useful for us), or it may even not contain the links at all. In this case, it sounds like a waste of computational resources.\n  We could make Tesseract work faster if we used some  additional &#34;adviser&#34; algorithm prior to the links text recognition. This &#34;adviser&#34; algorithm should detect, but not recognize,  the leftmost position of each link on the image if there are any. This will allow us to speed up the recognition part by following these rules:\n If the image does not contain any link we should not call Tesseract detection/recognition at all.\n If the image does have the links then we need to ask Tesseract to recognize only those parts of the image that contains the links. We&#39;re not interested in spending the time for recognition of the irrelevant text that does not contain the links.\n The &#34;adviser&#34; algorithm that will take place before the Tesseract should work with a constant time regardless of the image quality, or the presence/absence of the text on the image. It also should be pretty fast and detect the leftmost positions of the links for less than  1s so that we could satisfy the &#34;close-to-real-time&#34; requirement (i.e. on iPhone X).\n \ud83d\udca1 So what if we will use another object detection model to help us find all occurrences of the  https:// substrings (every secure link has this prefix, doesn&#39;t it) in the image? Then, having these  https:// bounding boxes in the text we may extract the right-side continuation of them and send them to the Tesseract for text recognition.\n   You may notice that Tesseract needs to do  much less work in case if it would have some hints about where are the links might be located (see the number of blue boxes on both pictures).\n So the question now is which object detection model we should choose and how to re-train it to support the detection of the custom  https:// objects.\n   Training a new object detection model is not a reasonable option in our context because of the following reasons:\n \ud83d\udc94 We most probably won&#39;t be able to collect hundreds of thousands of  labeled images of the books that have links in them (we might try to generate them though, but more about that later).\n So instead of creating a new model, we should better teach an existing object detection model to do the custom object detection for us (to do the  transfer learning). In our case, the &#34;custom objects&#34; would be the images with  https:// text drawn in them. This approach has the following benefits:\n \ud83d\udc9a The dataset might be much smaller. We don&#39;t need to collect hundreds of thousands of the labeled images. Instead, we may do  ~100 pictures and label them manually. This is because the model is already pre-trained on the general dataset like  COCO dataset and already learned how to extract general image features.\n \ud83d\udc9a The training process will be much faster (minutes/hours on GPU instead of days/weeks). Again, this is because of a smaller dataset (smaller batches) and because of fewer trainable parameters.\n We may choose the existing model from  TensorFlow 2 Detection Model Zoo which provides a collection of detection models pre-trained on the  COCO 2017 dataset. Now it contains  ~40 model variations to choose from.\n To re-train and fine-tune the model on the custom dataset we will use a  TensorFlow 2 Object Detection API. The TensorFlow Object Detection API is an open-source framework built on top of  TensorFlow that makes it easy to construct, train, and deploy object detection models.\n If you follow the  Model Zoo link you will find the  detection speed and  accuracy for each model.\n   Of course, we would want to find the right balance between the detection  speed and  accuracy while picking the model. But what might be even more important in our case is the  size of the model since it will be loaded to the client-side.\n The size of the archived model might vary drastically from  ~20Mb to  ~1Gb. Here are several examples:\n   \ud83d\udc9a It uses the MobileNet v2 network as a feature extractor which is optimized for usage on mobile devices to reduce energy consumption.\n \ud83d\udc9a It does the object detection for the whole image and for all objects in it  in one go regardless of the image content (no  regions proposal step is involved which makes the detection faster).\n \ud83d\udc94 It is not the most accurate model though (everything is a tradeoff \u2696\ufe0f).\n The model name encodes some several important characteristics that you may read more about if you want:\n   In this article, we&#39;re going to install the Tensorflow 2 Object Detection API  as a Python package. It is convenient in case if you&#39;re experimenting in  Google Colab (recommended) or in  Jupyter. For both cases no local installation is needed, you may experiment right in your browser.\n You may also follow the  official documentation if you would prefer to install Object Detection API via Docker.\n If you stuck with something during the API installation or during the dataset preparation try to read through the  TensorFlow 2 Object Detection API tutorial which adds a lot of useful details to this process.\n    Cloning into &#39;models&#39;...remote: Enumerating objects: 2301, done.remote: Counting objects: 100% (2301/2301), done.remote: Compressing objects: 100% (2000/2000), done.remote: Total 2301 (delta 561), reused 922 (delta 278), pack-reused 0Receiving objects: 100% (2301/2301), 30.60 MiB | 13.90 MiB/s, done.Resolving deltas: 100% (561/561), done.\n     It is possible that the last step will fail because of some dependency errors. In this case, you might want to run  pip install . --quiet one more time.\n     The TensorFlow Object Detection API is installed! You may now use the scripts that API provides for doing the model  inference,  training or  fine-tuning.\n  Let&#39;s download our selected  ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8 model from the TensorFlow Model Zoo and check how it does the general object detection (detection of the objects of classes from COCO dataset like &#34;cat&#34;, &#34;dog&#34;, &#34;car&#34;, etc.).\n We will use the  get_file() TensorFlow helper to download the archived model from the URL and unpack it.\n import tensorflow  as tf import pathlibMODEL_NAME  =  &#39;ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8&#39;TF_MODELS_BASE_PATH  =  &#39;http://download.tensorflow.org/models/object_detection/tf2/20200711/&#39;CACHE_FOLDER  =  &#39;./cache&#39; def  download_tf_model (model_name , cache_folder ) : model_url  = TF_MODELS_BASE_PATH  + model_name  +  &#39;.tar.gz&#39; model_dir  = tf .keras .utils .get_file ( fname =model_name , origin =model_url , untar = True , cache_dir =pathlib .Path (cache_folder ) .absolute ( )  )  return model_dir # Start the model download.model_dir  = download_tf_model (MODEL_NAME , CACHE_FOLDER ) print (model_dir )\n      The  pipeline.config file contains the detection settings of the model. We&#39;ll come back to this file later when we will need to fine-tune the model.\n  For now, the model can detect the object of  90 COCO dataset classes like a  car,  bird,  hot dog etc.\n   Let&#39;s see how the model performs on some general images that contain the objects of these classes.\n  Object Detection API already has a complete set of COCO labels (classes) defined for us.\n import os # Import Object Detection API helpers. from object_detection .utils  import label_map_util # Loads the COCO labels data (class names and indices relations). def  load_coco_labels ( ) :  # Object Detection API already has a complete set of COCO classes defined for us. label_map_path  = os .path .join (  &#39;models/research/object_detection/data&#39; ,  &#39;mscoco_complete_label_map.pbtxt&#39;  ) label_map  = label_map_util .load_labelmap (label_map_path )  # Class ID to Class Name mapping. categories  = label_map_util .convert_label_map_to_categories ( label_map , max_num_classes =label_map_util .get_max_label_map_index (label_map ) , use_display_name = True  ) category_index  = label_map_util .create_category_index (categories )  # Class Name to Class ID mapping. label_map_dict  = label_map_util .get_label_map_dict (label_map , use_display_name = True )  return category_index , label_map_dict # Load COCO labels.coco_category_index , coco_label_map_dict  = load_coco_labels ( ) print ( &#39;coco_category_index:&#39; , coco_category_index ) print ( &#39;coco_label_map_dict:&#39; , coco_label_map_dict )\n  coco_category_index:{ 1: {&#39;id&#39;: 1, &#39;name&#39;: &#39;person&#39;}, 2: {&#39;id&#39;: 2, &#39;name&#39;: &#39;bicycle&#39;}, ... 90: {&#39;id&#39;: 90, &#39;name&#39;: &#39;toothbrush&#39;},}coco_label_map_dict:{ &#39;background&#39;: 0, &#39;person&#39;: 1, &#39;bicycle&#39;: 2, &#39;car&#39;: 3, ... &#39;toothbrush&#39;: 90,}\n  We need to create a detection function that will use the pre-trained model we&#39;ve downloaded to do the object detection.\n import tensorflow  as tf # Import Object Detection API helpers. from object_detection .utils  import config_util from object_detection .builders  import model_builder # Generates the detection function for specific model and specific model&#39;s checkpoint def  detection_fn_from_checkpoint (config_path , checkpoint_path ) :  # Build the model. pipeline_config  = config_util .get_configs_from_pipeline_file (config_path ) model_config  = pipeline_config [ &#39;model&#39; ] model  = model_builder .build ( model_config =model_config , is_training = False ,  )  # Restore checkpoints. ckpt  = tf .compat .v2 .train .Checkpoint (model =model ) ckpt .restore (checkpoint_path ) .expect_partial ( )  # This is a function that will do the detection.  @tf .function  def  detect_fn (image ) : image , shapes  = model .preprocess (image ) prediction_dict  = model .predict (image , shapes ) detections  = model .postprocess (prediction_dict , shapes )  return detections , prediction_dict , tf .reshape (shapes ,  [ - 1 ] )  return detect_fninference_detect_fn  = detection_fn_from_checkpoint ( config_path =os .path .join ( &#39;cache&#39; ,  &#39;datasets&#39; , MODEL_NAME ,  &#39;pipeline.config&#39; ) , checkpoint_path =os .path .join ( &#39;cache&#39; ,  &#39;datasets&#39; , MODEL_NAME ,  &#39;checkpoint&#39; ,  &#39;ckpt-0&#39; ) , )\n      To do that let&#39;s save the image to the  inference/test/ folder of our project. If you&#39;re using Google Colab you may create this folder and upload the image manually.\n   import matplotlib .pyplot  as plt %matplotlib inline # Creating a TensorFlow dataset of just one image.inference_ds  = tf .keras .preprocessing .image_dataset_from_directory ( directory = &#39;inference&#39; , image_size = ( 640 ,  640 ) , batch_size = 1 , shuffle = False , label_mode = None ) # Numpy version of the dataset.inference_ds_numpy  =  list (inference_ds .as_numpy_iterator ( ) ) # You may preview the images in dataset like this.plt .figure (figsize = ( 14 ,  14 ) ) for i , image  in  enumerate (inference_ds_numpy ) : plt .subplot ( 2 ,  2 , i  +  1 ) plt .imshow (image [ 0 ] .astype ( &#34;uint8&#34; ) ) plt .axis ( &#34;off&#34; )plt .show ( )\n  Now we&#39;re ready to run the detection. The  inference_ds_numpy[0] array stores the pixel data for the first image in  Numpy format.\n   boxes  = detections [ &#39;detection_boxes&#39; ] .numpy ( )scores  = detections [ &#39;detection_scores&#39; ] .numpy ( )classes  = detections [ &#39;detection_classes&#39; ] .numpy ( )num_detections  = detections [ &#39;num_detections&#39; ] .numpy ( ) [ 0 ] print ( &#39;boxes.shape: &#39; , boxes .shape ) print ( &#39;scores.shape: &#39; , scores .shape ) print ( &#39;classes.shape: &#39; , classes .shape ) print ( &#39;num_detections:&#39; , num_detections )\n   The model has made a  100 detections for us. It doesn&#39;t mean that it found  100 objects on the image though. It means that the model has  100 slots, and it can detect  100 objects at max on a single image. Each detection has a score that represents the confidence of the model about it. The bounding boxes for each detection are stored in the  boxes array. The scores or confidences of the model about each detection are\n......", "posttime": "2021-08-09 04:59:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6253\u5370,\u94fe\u63a5,printed,\u6a21\u578b", "title": "\u5c1d\u8bd5\u4f7f\u6253\u5370\u7684\u94fe\u63a5\u53ef\u70b9\u51fb", "title_en": "Attempt to make printed links clickable", "transed": 1, "url": "https://trekhleb.dev/blog/2020/printed-links-detection/", "via": "", "real_tags": ["\u6253\u5370", "\u94fe\u63a5", "printed", "\u6a21\u578b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072181, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Microsoft Windows 98/98 SP1/98 SE Shell Unchecked BufferArbitrary Code Execution SHELL32.DLL 4.72.3812.600 \u5b89\u5168\u6f0f\u6d1e\u4fee\u590d\uff1a\u76f4\u63a5\u4e0b\u8f7d [834 KB\uff0c\u82f1\u6587]\u3002\u66f4\u591a\u4fe1\u606f\u3002 BUG\uff1a\u6b64SHELL32.DLL \u4fee\u590d\u7834\u574f\u4e86\u4ece\u684c\u9762\u5feb\u6377\u65b9\u5f0f\u56fe\u6807\u4e2d\u5220\u9664\u607c\u4eba\u7bad\u5934\u7684\u80fd\u529b\uff01\u4fee\u590d\uff1a\u8bf7\u53c2\u9605\u201cPATCHED SHELL32.DLL BUG + FIX\u201d\uff0c\u4e5f\u5728 TIPS98.TXT\uff08W95-11D.EXE \u7684\u4e00\u90e8\u5206\uff09\u4e2d\u4e86\u89e3\u5b8c\u6574\u7684\u7ec6\u8282\u3002", "note_en": "Microsoft Windows 98/98 SP1/98 SE Shell Unchecked BufferArbitrary Code Execution SHELL32.DLL 4.72.3812.600 Security Vulnerability Fix:  Direct download [834 KB,English].  More info.   BUG: ThisSHELL32.DLL fix breaks the ability of removing annoying arrows from Desktop shortcut icons!  FIX:See &#34; PATCHED SHELL32.DLL BUG + FIX&#34;, also in TIPS98.TXT (part of  W95-11D.EXE), for complete details.", "posttime": "2021-08-09 04:58:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,windows,\u514d\u8d39,free,\u4fee\u590d", "title": "MDGx \u514d\u8d39 Windows \u8f6f\u4ef6\u7cbe\u534e", "title_en": "MDGx Free WinDOwS Software Essentials", "transed": 1, "url": "https://web.archive.org/web/20210723001556/http://www.mdgx.com/web.htm", "via": "", "real_tags": ["\u8f6f\u4ef6", "windows", "\u514d\u8d39", "free", "\u4fee\u590d"]}, {"category": "", "categoryclass": "", "imagename": "5008ae44d7cdb4cb32b734f11e026b4e.jpg", "infoid": 1072179, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e95\u7279\u5f8b\u5386\u6765\u662f\u7f8e\u56fd\u8fde\u63a5\u6700\u5c11\u7684\u57ce\u5e02\u4e4b\u4e00\uff0c\u5927\u7ea6 40% \u7684\u5e95\u7279\u5f8b\u5c45\u6c11\u6839\u672c\u6ca1\u6709\u4efb\u4f55\u5bb6\u5ead\u4e92\u8054\u7f51\u63a5\u5165\u3002\u7136\u800c\uff0c\u4e8b\u60c5\u6b63\u5728\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u8981\u5f52\u529f\u4e8e\u516c\u5e73\u4e92\u8054\u7f51\u5021\u8bae (EII) \u7b49\u9879\u76ee\uff0c\u8fd9\u662f\u5e95\u7279\u5f8b\u793e\u533a\u6280\u672f\u9879\u76ee\u548c\u793e\u533a\u7ec4\u7ec7\u7f51\u7edc\u4e4b\u95f4\u7684\u5408\u4f5c\u3002 EII \u6709\u4e00\u4e2a\u96c4\u5fc3\u52c3\u52c3\u7684\u76ee\u6807\uff1a\u901a\u8fc7\u4e3a\u5e95\u7279\u5f8b\u670d\u52a1\u6b20\u7f3a\u7684\u793e\u533a\u5efa\u8bbe\u4f4e\u6210\u672c\u3001\u9ad8\u901f\u7684\u4e92\u8054\u7f51\u6765\u52a0\u5f3a\u793e\u533a\uff0c\u63d0\u9ad8\u6570\u5b57\u7d20\u517b\uff0c\u5e76\u57f9\u8bad\u5c45\u6c11\u6210\u4e3a\u201c\u6570\u5b57\u7ba1\u5bb6\u201d\u3002\u6392\u9664\u4e07\u96be\uff0c\u4ed6\u4eec\u53d6\u5f97\u4e86\u6210\u529f\u3002\u5728\u8fc7\u53bb\u7684\u516d\u5e74\u4e2d\uff0cEII \u5728\u5e95\u7279\u5f8b\u7684\u5927\u7247\u571f\u5730\u4e0a\u5efa\u7acb\u5e76\u7ef4\u62a4\u4e86\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u4e92\u8054\u7f51\u7f51\u7edc\uff0c\u57f9\u8bad\u6765\u81ea\u793e\u533a\u7684\u6570\u5b57\u7ba1\u7406\u5458\u8bbe\u7f6e\u548c\u5b89\u88c5\u65e0\u7ebf\u63a5\u5165\u70b9\u3001\u5149\u7ea4\u8fde\u63a5\u548c\u70ed\u70b9\uff0c\u5e76\u6559\u80b2\u5c45\u6c11\u5982\u4f55\u5b89\u5168\u6709\u6548\u5730\u4f7f\u7528\u4e92\u8054\u7f51\u3002 COVID-19 \u7684\u51b2\u51fb\u4ee5\u53ca\u968f\u540e\u5728\u5168\u56fd\u8303\u56f4\u5185\u7684\u5c01\u9501\u52a0\u5267\u4e86\u6570\u5341\u5e74\u6765\u666e\u904d\u5b58\u5728\u7684\u95ee\u9898\uff1a\u6570\u5b57\u9e3f\u6c9f\u3002\u5f53\u8bb8\u591a\u7f8e\u56fd\u4eba\u767b\u5f55 Zoom \u5f00\u5c55\u4e1a\u52a1\u3001\u4e0e\u5bb6\u4eba\u804a\u5929\u548c\u89c2\u770b Netflix \u65f6\uff0c\u6570\u4ee5\u767e\u4e07\u8ba1\u7684\u4eba\u5904\u4e8e\u79bb\u7ebf\u72b6\u6001\uff0c\u65e0\u6cd5\u8fde\u63a5\uff0c\u52aa\u529b\u5bfb\u627e\u6709\u5173 COVID-19 \u7684\u4fe1\u606f\u3001\u5b89\u6392\u75ab\u82d7\u9884\u7ea6\u548c\u7533\u8bf7\u5931\u4e1a\u3002\u8fd9\u5c31\u662f\u6570\u5b57\u9e3f\u6c9f\uff1a\u62e5\u6709\u6570\u5b57\u8fde\u63a5\u7684\u4eba\u548c\u6ca1\u6709\u6570\u5b57\u8fde\u63a5\u7684\u4eba\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002\u8fd9\u79cd\u5dee\u5f02\u5728\u6709\u8272\u4eba\u79cd\u793e\u533a\u4ee5\u53ca\u4f4e\u6536\u5165\u793e\u533a\u4e2d\u5c24\u4e3a\u660e\u663e\u3002\u6839\u636e\u5e95\u7279\u5f8b\u897f\u5357\u90e8 Grace in Action \u7f51\u7edc\u7ecf\u7406 Nyasia Valdez \u7684\u8bf4\u6cd5\uff0c\u5e95\u7279\u5f8b\u6570\u5b57\u9e3f\u6c9f\u80cc\u540e\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u5c45\u6c11\u7684\u8d1f\u62c5\u80fd\u529b\u3002 \u201c\u5728\u897f\u5357\u7684\u67d0\u4e9b\u5730\u533a\uff0c\u53ea\u6709\u4e00\u4e2a\u4e92\u8054\u7f51\u63d0\u4f9b\u5546\uff0c\u800c\u5728\u5176\u4ed6\u5730\u533a\u5219\u6709\u4e09\u56db\u4e2a\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4ed6\u4eec\u552f\u4e00\u7684\u9009\u62e9\u662f\u6bcf\u6708 100 \u7f8e\u5143\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4ed6\u4eec\u5fc5\u987b\u652f\u4ed8\u7684\u8d39\u7528\u3002\u201d\u516c\u5e73\u4e92\u8054\u7f51\u5021\u8bae\u670d\u52a1\u7684\u9886\u57df\u4e3b\u8981\u662f\u6709\u8272\u4eba\u79cd\u793e\u533a\uff0cEII \u57f9\u8bad\u548c\u96c7\u7528\u7684\u6570\u5b57\u7ba1\u7406\u5458\u6765\u81ea\u8fd9\u4e9b\u793e\u533a\u3002 \u201c\u8ba9\u793e\u533a\u6210\u5458\u6210\u4e3a\u6280\u672f\u4eba\u5458\u6bd4\u8ba9\u6280\u672f\u4eba\u5458\u6210\u4e3a\u793e\u533a\u6210\u5458\u66f4\u5bb9\u6613\uff0c\u201d\u6570\u5b57\u7ba1\u5bb6 Shiva Shahmir \u8868\u793a\u3002\u7ba1\u7406\u5458\u5e2e\u52a9\u5b89\u88c5\u548c\u7ef4\u62a4 EII \u7684\u9ad8\u901f\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u662f\u65e0\u7ebf\u7684\u3001\u70b9\u5bf9\u70b9\u7684\u5e76\u63d0\u4f9b 25mbps \u7684\u4e0a\u4e0b\u901f\u5ea6\u3002\u5b83\u5229\u7528\u6765\u81ea\u4f01\u4e1a ISP \u7684 123Net \u6350\u8d60\u7684\u8fde\u63a5\uff0c\u4ece\u5e95\u7279\u5f8b\u6700\u9ad8\u70b9\u6587\u827a\u590d\u5174\u4e2d\u5fc3\u7684\u9876\u90e8\u5411\u4e09\u4e2a\u4e3b\u8981\u7ec4\u7ec7\u5408\u4f5c\u4f19\u4f34\u4f20\u9001\u5343\u5146\u8fde\u63a5\uff1aGrace in Action\u3001Church of the Messiah \u548c North End Woodward\u793e\u533a\u8054\u76df\u3002\u4ece\u90a3\u91cc\uff0c\u7ba1\u7406\u5458\u521b\u5efa\u65e0\u7ebf\u5206\u914d\u7f51\u7edc\u5230\u793e\u533a\u4e2d\u5fc3\uff0c\u7136\u540e\u5230\u4f4f\u5b85\u3002\n\u73b0\u5728\uff0cEII \u6b63\u5728\u5236\u5b9a\u672a\u6765\u7684\u5f39\u6027\u8ba1\u5212\u3002\u9996\u5148\u662f\u592a\u9633\u80fd\u5145\u7535\u7ad9\uff0c\u5b83\u5efa\u5728\u5e95\u7279\u5f8b\u5468\u56f4\uff0c\u63d0\u4f9b\u514d\u8d39\u7684\u9ad8\u901f\u4e92\u8054\u7f51\u63a5\u5165\u4ee5\u53ca\u8bbe\u5907\u5145\u7535\u3002 EII \u8fd8\u5f00\u53d1\u4e86\u4fbf\u643a\u5f0f\u7f51\u7edc\u5957\u4ef6\uff0c\u8fd9\u4e9b\u5957\u4ef6\u662f\u7535\u6c60\u4f9b\u7535\u7684\u673a\u7bb1\uff0c\u53ef\u5411\u534a\u5f84\u56db\u4e2a\u8857\u533a\u63d0\u4f9b\u65e0\u7ebf\u4fe1\u53f7\uff0c\u53ef\u5728\u7f51\u7edc\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u3002\u6700\u540e\uff0cEII \u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u5185\u90e8\u7f51\uff0c\u4e00\u4e2a\u7528\u4e8e\u79bb\u7ebf\u4e14\u4ec5\u901a\u8fc7\u5176\u7f51\u7edc\u8fdb\u884c\u901a\u4fe1\u7684\u7cfb\u7edf\u3002\u8fd9\u5141\u8bb8\u4eba\u4eec\u79c1\u4e0b\u548c\u79bb\u7ebf\u4ea4\u6d41\u3002 \u201c\u6267\u6cd5\u673a\u6784\u7ecf\u5e38\u95ee\u6211\uff0c\u4ed6\u4eec\u80fd\u5426\u6210\u4e3a\u6211\u4eec\u7f51\u7edc\u7684\u4e00\u90e8\u5206\uff0c\u201dEII \u9879\u76ee\u7ecf\u7406\u6c83\u5229\u5409\u5c14\u4f2f\u7279\u7267\u5e08\u8bf4\u3002 \u201c\u6211\u8bf4\u4e0d\uff0c\u6211\u4eec\u4fdd\u8bc1\u7528\u6237\u5bf9\u6211\u4eec\u7f51\u7edc\u7684\u9690\u79c1\uff0c\u6211\u4eec\u4e0d\u505a\u4efb\u4f55\u6570\u636e\u6536\u96c6\u3002\u6211\u4eec\u5e0c\u671b\u793e\u533a\u5728\u4ea4\u6d41\u65f6\u611f\u5230\u5b89\u5168\u3002\u201d \u201c\u83b7\u53d6\u4fe1\u606f\u5c31\u50cf\u81ea\u7531\u3002\u6bcf\u5f53\u4e3a\u4e86\u8d44\u672c\u4e3b\u4e49\u800c\u53d7\u5230\u9650\u5236\u6216\u9650\u5236\u65f6\uff0c\u5b83\u5c31\u662f\u538b\u8feb\u7684\u8c61\u5f81\uff0c\u56e0\u4e3a\u4eba\u4eec\u65e0\u6cd5\u4e0b\u5b9a\u51b3\u5fc3\uff0c\u201d\u6c99\u7c73\u5c14\u8bf4\u3002 \u201c\u5f53\u4ed6\u4eec\u6ca1\u6709\u8fd9\u4e9b\u4fe1\u606f\u65f6\uff0c\u4ed6\u4eec\u771f\u7684\u53ef\u4ee5\u4e3a\u81ea\u5df1\u505a\u51fa\u6700\u597d\u7684\u51b3\u5b9a\u5417\uff1f\u201d", "note_en": "Detroit has historically been one of the least connected cities in America, with about 40 percent of Detroit residents lacking any home internet access at all. Things are changing, though, thanks in large part to projects like the Equitable Internet Initiative (EII), a collaboration between the Detroit Community Technology Project and a network of community organizations.\n EII has an ambitious goal: to strengthen neighborhoods by building\u00a0low-cost, high-speed internet for the underserved communities of Detroit, to increase digital literacy, and to train residents to be \u201cdigital stewards.\u201d And against all odds, they are succeeding.\n Over the past six years, EII has built and maintained an impressive internet network across large swaths of Detroit, training digital stewards from the community to set up and install wireless access points, fiber hookups and hotspots, and educating residents on how to safely and effectively use the internet.\n The onslaught of COVID-19 and the subsequent lockdowns around the country exacerbated an issue that has been pervasive for decades: the digital divide. As many Americans logged into Zoom to conduct business, chat with their family and watch Netflix, millions of others were offline and disconnected, struggling to find information about COVID-19, schedule vaccine appointments and apply for unemployment. This is the digital divide: the gap between those who have digital connectivity, and those who do not. This disparity is especially pronounced in communities of color, as well as low income communities.\n According to Nyasia Valdez, network manager for Grace in Action in Southwest Detroit, one issue behind the digital divide in Detroit is affordability for residents. \u201cIn some areas of Southwest, there is only one internet provider, versus in other areas where there are three or four. So if their only option is $100 a month, then that\u2019s what they have to pay.\u201d\n The areas that the Equitable Internet Initiative serves are predominantly communities of color, and the digital stewards that EII train and employ come from these communities. \u201cIt\u2019s easier to make a community member a technician than a technician a community member,\u201d according to digital steward Shiva Shahmir.\n The stewards help install and maintain EII\u2019s high speed network, which is wireless, point-to-point and provides a 25mbps up and down speed. It utilizes donated connections from 123Net, an enterprise ISP, who beams a gigabit connection from the top of the Renaissance Center, the highest point in Detroit, to the three anchor organization partners: Grace in Action, Church of the Messiah, and North End Woodward Community Coalition. From there, the stewards create wireless distribution networks to community hubs, and then to residential homes.\n Now, EII is working on resilience plans for the future. First are solar charging stations, which are set up around Detroit and provide free, high speed internet access, as well as device-charging.\n EII is also creating portable network kits, which are battery-powered cases that provide wireless signal to a four block radius, and can be used in situations where there is a network outage.\n Finally, EII is developing an intranet, a system\u00a0for communicating offline and solely via their network. This allows people to communicate privately and offline. \u201cLaw enforcement agencies are often asking me, can they become a part of our network,\u201d says the Rev. Wally Gilbert, project manager for EII. \u201cI say no, we guarantee the users of our network privacy, we don\u2019t do any data collection. We want the community to feel safe communicating.\u201d\n \u201cAccess to information is like liberty. Whenever that is restricted or limited for the sake of capitalism, it\u2019s so symbolic of oppression because people can\u2019t make up their own minds,\u201d says Shahmir. \u201cWhen they don\u2019t have that information, can they really make the best decisions for themselves?\u201d", "posttime": "2021-08-09 04:58:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5c45\u6c11,residents,\u793e\u533a", "title": "\u5e95\u7279\u5f8b\u5c45\u6c11\u5982\u4f55\u5efa\u7acb\u81ea\u5df1\u7684\u4e92\u8054\u7f51", "title_en": "How Detroit residents are building their own internet", "transed": 1, "url": "https://thehill.com/changing-america/video/555961-how-detroit-residents-are-building-their-own-internet", "via": "", "real_tags": ["\u5c45\u6c11", "residents", "\u793e\u533a"]}, {"category": "", "categoryclass": "", "imagename": "73be1c667c04bf037561fb16681edfdc.jpg", "infoid": 1072177, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u66fe\u7ecf\u68a6\u60f3\u8fc7\u201c\u5f88\u4e45\u4ee5\u524d\uff0c\u4f4f\u5728\u4e00\u4e2a\u9065\u8fdc\u7684\u661f\u7cfb\u4e2d\u201d\uff0c\u90a3\u4e48\u73b0\u5728\u5c31\u662f\u4f60\u7684\u673a\u4f1a\u2014\u2014\u53ea\u8981\u4f60\u6709\u95f2\u7f6e\u7684\u56db\u5230\u516d\u5343\u7f8e\u5143\u3002\u672c\u5468\uff0c\u6c83\u5c14\u7279\u8fea\u65af\u5c3c\u4e16\u754c\u516c\u5e03\u4e86\u6709\u5173\u5176\u6625\u5b63\u65b0\u94f6\u6cb3\u661f\u9645\u5de1\u6d0b\u8230\u9152\u5e97\u5f00\u4e1a\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u8fd9\u662f\u4e00\u573a\u4e3a\u671f\u4e24\u5929\u7684\u6c89\u6d78\u5f0f\u201c\u661f\u7403\u5927\u6218\u201d\u4f53\u9a8c\uff0c\u5524\u8d77\u4e86\u7f6e\u8eab\u4e8e\u7535\u5f71\u4e2d\u7684\u611f\u89c9\u3002\u8be5\u6280\u672f\u5c06\u6bd4\u4efb\u4f55\u5176\u4ed6\u8fea\u58eb\u5c3c\u4f53\u9a8c\u90fd\u66f4\u5148\u8fdb\uff0c\u5305\u62ec\u8fea\u58eb\u5c3c\u4e50\u56ed\u7684\u62b5\u6297\u8fd0\u52a8\u7684\u5174\u8d77\u548c\u661f\u7403\u5927\u6218\uff1a\u94f6\u6cb3\u8fb9\u7f18\u7684\u571f\u5730\u3002\u6b63\u5982\u60a8\u6240\u6599\uff0c\u6210\u672c\u4e5f\u5c06\u9ad8\u4e8e\u51e0\u4e4e\u4efb\u4f55\u5176\u4ed6\u8fea\u58eb\u5c3c\u4f53\u9a8c\uff0c\u9664\u4e86\u5927\u578b\u5a5a\u793c\u6216\u665a\u4e0a\u79df\u7528\u672a\u6765\u4e16\u754c\u3002 \u201c\u661f\u7403\u5927\u6218\uff1a\u94f6\u6cb3\u661f\u9645\u5de1\u6d0b\u8230\u662f\u4e00\u79cd\u9769\u547d\u6027\u7684\u5168\u65b0 2 \u665a\u4f53\u9a8c\uff0c\u60a8\u5c06\u6210\u4e3a\u82f1\u96c4\uff0c\u201d\u6c83\u5c14\u7279\u8fea\u65af\u5c3c\u4e16\u754c\u7f51\u7ad9\u79f0\u3002 \u201c\u60a8\u548c\u60a8\u7684\u56e2\u961f\u5c06\u8e0f\u4e0a\u5c5e\u4e8e\u60a8\u81ea\u5df1\u7684\u53f2\u65e0\u524d\u4f8b\u7684\u661f\u7403\u5927\u6218\u5192\u9669\u3002\u8fd9\u662f\u6709\u53f2\u4ee5\u6765\u6700\u8eab\u4e34\u5176\u5883\u7684\u661f\u7403\u5927\u6218\u6545\u4e8b\u2014\u2014\u4f60\u53ef\u4ee5\u4f53\u9a8c\u5b9a\u5236\u7684\u4f53\u9a8c\uff0c\u5e76\u6bd4\u4f60\u60f3\u8c61\u7684\u66f4\u6df1\u5165\u5730\u8fdb\u884c\u661f\u7403\u5927\u6218\u5192\u9669\u3002\u201d\u6709\u5149\u5251\u4f53\u9a8c\u3001\u661f\u9645\u5a31\u4e50\u3001\u89d2\u8272\u56db\u5904\u6e38\u8361\uff0c\u4ee5\u53ca\u60a8\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u63a5\u8fd1\u661f\u7403\u5927\u6218\u7684\u6574\u4f53\u611f\u89c9\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u4f60\u4f4f\u5728\u8c6a\u534e\u7684\u592a\u7a7a\u5de1\u822a\u4e2d\uff0c\u6c89\u6d78\u5728\u9152\u5e97\u200b\u200b\u7684\u7a97\u6237\u91cc\u53ef\u4ee5\u770b\u5230\u201c\u592a\u7a7a\u201d\uff0c\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u79bb\u5f00\u9152\u5e97\uff0c\u9664\u975e\u201c\u767b\u4e0a\u4ea4\u901a\u5de5\u5177\u201d\u5230\u5df4\u56fe\uff0c\u661f\u7403\u5927\u6218\uff1a\u94f6\u6cb3\u7cfb\u7684\u571f\u5730\u8fb9\u7f18\u53d1\u751f\u3002\u597d\u83b1\u575e\u5f71\u57ce\u7684\u5165\u573a\u8d39\u5df2\u5305\u542b\u5728\u4ef7\u683c\u4e2d\uff0c\u60a8\u7684\u6240\u6709\u98df\u7269\u548c\u975e\u9152\u7cbe\u996e\u6599\u4e5f\u662f\u5982\u6b64\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u5728\u5de5\u4f5c\u5ba4\u4e2d\u4e3a\u4e24\u540d\u5ba2\u4eba\u63d0\u4f9b\u4e24\u665a\u4f4f\u5bbf\u7684\u8d39\u7528\u4e3a 4,809 \u7f8e\u5143\uff0c\u4ed6\u4eec\u53ef\u4ee5\u6295\u5165\u4e00\u4e24\u676f\u592a\u7a7a\u5564\u9152\u3002\u5982\u679c\u60a8\u6dfb\u52a0\u4e00\u4e2a\u5b69\u5b50\uff0c\u540c\u4e00\u4e2a\u623f\u95f4\u7684\u4ef7\u683c\u5c06\u9ad8\u8fbe 5,299 \u7f8e\u5143\uff0c\u5982\u679c\u623f\u95f4\u4e2d\u6709\u4e00\u4e2a\u5b69\u5b50\u548c\u7b2c\u4e09\u4e2a\u6210\u4eba\uff0c\u5219\u4ef7\u683c\u9ad8\u8fbe 5,999 \u7f8e\u5143\u3002\u5957\u623f\u4f4f\u5bbf\u751a\u81f3\u66f4\u9ad8\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8fea\u58eb\u5c3c\u6280\u672f\u6700\u5148\u8fdb\u7684\u6e38\u8f6e\u65b0\u8fea\u58eb\u5c3c\u613f\u671b\u53f7\u5305\u62ec\u201c\u6c34\u4e0a\u8fc7\u5c71\u8f66\u201d\u6ed1\u6c34\u9053\u3001\u661f\u7403\u5927\u6218\u9152\u5427\u548c\u6f2b\u5a01\u9910\u5385\uff0c\u60a8\u53ef\u4ee5\u5728\u90a3\u91cc\u54c1\u5c1d\u9ed1\u8c79\u7684 Wakanda \u548c\u7329\u7ea2\u5973\u5deb\u7684 Sokovia \u7684\u98df\u7269\u3002\u660e\u5e74\u590f\u5929\u542f\u822a\u65f6\uff0c\u5e26\u9633\u53f0\u7684\u6d77\u666f\u623f\u4e24\u4e2a\u4eba\u6bcf\u665a\u7684\u4ef7\u683c\u7ea6\u4e3a1000\u7f8e\u5143\u3002\u636e TripAdvisor \u79f0\uff0c\u534e\u7279\u8fea\u58eb\u5c3c\u4e16\u754c\u6700\u6602\u8d35\u7684\u8fea\u58eb\u5c3c\u5927\u4f5b\u7f57\u91cc\u8fbe\u9152\u5e97\u7684\u5e73\u5747\u6bcf\u665a\u623f\u4ef7\u7ea6\u4e3a 675 \u7f8e\u5143\uff0c\u7565\u4f4e\u4e8e\u8fea\u58eb\u5c3c\u4e50\u56ed\u7684\u8fea\u58eb\u5c3c\u5927\u52a0\u5dde\u9152\u5e97\u3002\u4f46\u8bdd\u53c8\u8bf4\u56de\u6765\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u661f\u7403\u5927\u6218\u7684\u7c89\u4e1d\u6765\u8bf4\uff0c\u4f60\u4e0d\u80fd\u4e3a\u5b8c\u5168\u6c89\u6d78\u5728\u540c\u4eba\u5708\u4e2d\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u4ece\u6f14\u5458\u8868\u73b0\u5f97\u597d\u50cf\u4ed6\u4eec\u771f\u7684\u662f\u661f\u9645\u65c5\u884c\u8005\u5230\u80fd\u591f\u5728\u4e0d\u53d7\u4e25\u683c\u5224\u65ad\u7684\u60c5\u51b5\u4e0b\u5236\u4f5c\u65e0\u9650\u7684\u4f0d\u57fa\u7b11\u8bdd\u4e0d\u613f\u82b1 4,000 \u7f8e\u5143\u7761\u5728\u201c\u5b87\u5b99\u98de\u8239\u201d\u4e0a\u7684\u4eba\u3002", "note_en": "If you\u2019ve ever dreamed of living \u201ca long time ago in a galaxy far, far away,\u201d now is your chance \u2014 as long as you\u2019ve got a spare four to six thousand dollars sitting around.\n  This week, Walt Disney World announced more details about its new  Galactic Starcruiser hotel opening in the spring, an immersive, two-day \u201cStar Wars\u201d experience that evokes the feeling of being in the movies. The tech will be more advanced than any other Disney experience, including Rise of the Resistance at Disneyland and the Star Wars: Galaxy\u2019s Edge lands.\n  The cost, as you might expect, is going to be higher than almost any other Disney experience, too, with the exception of, say,  a grand-scale wedding or  renting out Epcot for the night.\n    \u201cStar Wars: Galactic Starcruiser is a revolutionary new 2-night experience where you are the hero,\u201d according to Walt Disney World\u2019s website. \u201cYou and your group will embark on a first-of-its-kind Star Wars adventure that\u2019s your own. It\u2019s the most immersive Star Wars story ever created \u2014 one where you live a bespoke experience and journey further into a Star Wars adventure than you ever dreamed possible.\u201d\n     There are lightsaber experiences, interstellar entertainment, characters hanging around and an overall feeling that you\u2019re closer to being in Star Wars than you\u2019ve ever been in your life.\n       The idea is that you\u2019re staying on a luxury space cruise, so immersive that the hotel\u2019s windows look out into \u201cspace\u201d and you never leave the property unless it\u2019s to \u201cboard a transport\u201d to Batuu, the land where Star Wars: Galaxy\u2019s Edge takes place. Admission to Hollywood Studios is included in the price, as is all of your food and non-alcoholic beverages. But really, for $4,809 for two nights\u2019 accommodations for two guests in a studio, they could throw in a space beer or two.\n   Prices go up to $5,299 for that same room if you add a kid, and up to $5,999 if there\u2019s a kid and a third adult in the room. Suite accommodations are even higher.\n      By comparison, Disney\u2019s most technologically advanced cruise ship,  the new Disney Wish, includes an \u201caqua coaster\u201d waterslide ride, a Star Wars bar and  a Marvel restaurant where you can eat foods from Black Panther\u2019s Wakanda and the Scarlet Witch\u2019s Sokovia. When it sets sail next summer, prices will be about $1,000 a night for two people in an ocean view room with a balcony.\n   According to TripAdvisor, the  average nightly rate at Disney\u2019s Grand Floridian Hotel, the most expensive hotel at Walt Disney World, is about $675, and  just slightly under that for Disney\u2019s Grand Californian at Disneyland.\n  But then again, for some Star Wars fans, you can\u2019t put a price on total immersion in the fandom, from cast members acting as though they\u2019re really intergalactic travelers to the ability to make infinite Wookee jokes free from the harsh judgements of people who wouldn\u2019t spend $4,000 to sleep in a \u201cspaceship.\u201d", "posttime": "2021-08-09 04:03:38", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u661f\u7403\u5927\u6218,\u4e16\u754c,world", "title": "\u5728\u8fea\u65af\u5c3c\u4e16\u754c\u7684\u661f\u7403\u5927\u6218\u4e3b\u9898\u9152\u5e97\uff0c\u5468\u672b\u4e24\u4eba\u8d39\u7528 4,800 \u7f8e\u5143", "title_en": "At Disney World's Star Wars-Themed Hotel, a Weekend for Two Costs $4,800", "transed": 1, "url": "https://www.sfgate.com/disneyland/article/disney-world-star-wars-hotel-prices-reservations-16372866.php", "via": "", "real_tags": ["\u661f\u7403\u5927\u6218", "\u4e16\u754c", "world"]}, {"category": "", "categoryclass": "", "imagename": "e64f4a5b50980f737d6f15c9dd1d5eb1.jpg", "infoid": 1072176, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56db\u5341\u5e74\u524d\u7684 8 \u6708 10 \u65e5\uff0c\u4e00\u4f4d\u8eab\u6750\u9b41\u68a7\u7684\u8001\u4eba\u5728\u80af\u8f9b\u987f\u5bab\u53bb\u4e16\uff0c\u4eab\u5e74 94 \u5c81\u3002 .\u4ed6\u5728\u53bb\u94f6\u884c\u53c2\u52a0\u4f1a\u8bae\u65f6\u5728\u5730\u94c1\u4e0a\u9605\u8bfb\u838e\u58eb\u6bd4\u4e9a\uff0c\u5e76\u5199\u4e86\u4e1a\u4f59\u8bd7\u6b4c\u3002\u5076\u5c14\u7687\u5ba4\u6210\u5458\u4f1a\u5728\u4ed6\u4eec\u7ecf\u8fc7\u7684\u8def\u4e0a\u505c\u4e0b\u6765\u95f2\u804a\uff0c\u5c31\u50cf\u739b\u683c\u4e3d\u7279\u516c\u4e3b\u66fe\u7ecf\u548c\u5979\u7684\u65b0\u751f\u513f\u4e00\u6837\u3002\u665a\u5e74\u9690\u5c45\u7684\u4ed6\uff0c\u7528\u4ed6\u81ea\u5df1\u7684\u8bdd\u6765\u8bf4\uff0c\u5c31\u662f\u4e2a\u201c\u5927\u809a\u8001\u6cb3\u72f8\u201d\uff0c\u7559\u7740\u96be\u770b\u7684\u80e1\u987b\u3002\u8fd9\u4e2a\u4eba\u662f\u827e\u4f26\u201c\u6c64\u7c73\u201d\u62c9\u585e\u5c14\u65af\uff0c\u4e54\u6cbb\u516d\u4e16\u548c\u4f0a\u4e3d\u838e\u767d\u5973\u738b\u4e8c\u4e16\u7684\u524d\u79c1\u4eba\u79d8\u4e66\uff0c\u7231\u5fb7\u534e\u516b\u4e16\u7684\u52a9\u7406\u79c1\u4eba\u79d8\u4e66\uff0c\u5f53\u65f6\u4ed6\u662f\u5a01\u5c14\u58eb\u4eb2\u738b\u3002\u81ea 1953 \u5e74\u9000\u4f11\u4ee5\u6765\uff0c\u4ed6\u4e00\u76f4\u5728\u80af\u8f9b\u987f\u5bab\u7684\u65e7\u9a6c\u53a9\uff08\u4ed6\u8ba4\u4e3a\u90a3\u662f\u82f1\u683c\u5170\u6700\u597d\u7684\u623f\u5b50\u4e4b\u4e00\uff09\u4e00\u76f4\u751f\u6d3b\u5728\u4f18\u96c5\u548c\u5ba0\u7231\u4e4b\u4e2d\u3002\u4ece 1920 \u5e74\u5230 1953 \u5e74\uff0c\u4ed6\u65ad\u65ad\u7eed\u7eed\u5730\u5f53\u8fc7\u671d\u81e3\uff0c\u4ed6\u5bf9\u5982\u4f55\u5728\u6c11\u4e3b\u56fd\u5bb6\u7ef4\u62a4\u541b\u4e3b\u5236\u63d0\u51fa\u4e86\u5f15\u4eba\u5165\u80dc\u7684\u89c1\u89e3\u3002 Lascelles \u5728\u300a\u738b\u51a0\u300b\u4e2d\u88ab\u8bbd\u523a\u4e3a\u4e00\u4e2a\u987d\u56fa\u3001\u786c\u7740\u5934\u76ae\u3001\u813e\u6c14\u66b4\u8e81\u7684\u53ef\u6015\u89c4\u5219\u7684\u6267\u884c\u8005\uff0c\u6c38\u8fdc\u963b\u788d\u4e86\u771f\u7231\u7684\u8fdb\u7a0b\u3002\u9664\u4e86\u5728\u7231\u5fb7\u534e\u516b\u4e16\u7684\u9000\u4f4d\u4e2d\u53d1\u6325\u4f5c\u7528\u5916\uff0c\u62c9\u585e\u5c14\u65af\u8fd8\u88ab\u89c6\u4e3a\u51b3\u5b9a\u739b\u683c\u4e3d\u7279\u516c\u4e3b\u4e0d\u80fd\u4e0e\u5f7c\u5f97\u6c64\u68ee\u7ed3\u5a5a\u7684\u5f53\u6743\u6d3e\u4eba\u58eb\u4e4b\u4e00\u3002\u4f46\u662f\uff0c\u5c3d\u7ba1\u5728\u73b0\u4ee3\u7687\u5bb6\u5386\u53f2\u4e0a\u626e\u6f14\u7740\u5982\u6b64\u91cd\u8981\u7684\u89d2\u8272\uff0c\u4f46\u771f\u6b63\u7684 Lascelles \u4ecd\u7136\u5728\u6211\u4eec\u7684\u89c6\u7ebf\u4e4b\u5916\u3002\u6ca1\u6709\u4f20\u8bb0\u3002\u4ed6\u5728\u5251\u6865\u4e18\u5409\u5c14\u5b66\u9662\u7684\u6863\u6848\u57fa\u672c\u4e0a\u662f\u5c01\u95ed\u7684\u2014\u2014\u5c24\u5176\u662f\u4e0e\u541b\u4e3b\u5236\u6709\u5173\u7684\u8d44\u6599\u3002\u6700\u8fd1\u5199\u4e86\u4e00\u672c\u5173\u4e8e\u738b\u5ba4\u548c\u5927\u4f17\u5a92\u4f53\u7684\u4e66\u7684\u7231\u5fb7\u534e\u6b27\u6587\u65af\u88ab\u62d2\u7edd\u63a5\u89e6\u4ed6\u4eec\u3002\u4ed6\u7684\u65e5\u8bb0\u867d\u7136\u51fa\u8272\uff0c\u4f46\u8fd8\u662f\u7531\u4ed6\u7684\u670b\u53cb\u9c81\u4f2f\u7279\u00b7\u54c8\u7279-\u6234\u7ef4\u65af\uff08Rupert Hart-Davis\uff09\u6709\u9009\u62e9\u5730\u7f16\u8f91\u3002\u4e0e\u6d41\u884c\u7684\u5f62\u8c61\u76f8\u6bd4\uff0c\u4ed6\u4eec\u63ed\u793a\u4e86\u4e00\u4e2a\u66f4\u60c5\u7eea\u5316\u3001\u66f4\u660e\u667a\u3001\u66f4\u8ba8\u4eba\u559c\u6b22\u7684\u7537\u4eba\u3002\u56e0\u6b64\uff0c\u5173\u4e8e Lascelles \u7684\u771f\u5b9e\u6027\u683c\u5e76\u6ca1\u6709\u8fbe\u6210\u5171\u8bc6\u3002\u5bf9\u4e8e\u8eab\u4e3a\u6e29\u838e\u516c\u7235\u6d41\u4ea1\u6d77\u5916\u7684\u7231\u5fb7\u534e\u516b\u4e16\u6765\u8bf4\uff0c\u62c9\u585e\u5c14\u65af\u6c38\u8fdc\u662f\u201c\u90a3\u6761\u86c7\u201d\u3002\u8fd9\u79cd\u611f\u89c9\u662f\u76f8\u4e92\u7684\u3002\u9000\u4f4d\u4e09\u5929\u540e\uff0c\u54c8\u7f57\u5fb7\u00b7\u5c3c\u79d1\u5c14\u68ee\u4e0e\u62c9\u585e\u5c14\u65af\u5171\u8fdb\u5348\u9910\u65f6\uff0c\u671d\u81e3\u8bf4\u8fd9\u4f4d\u524d\u56fd\u738b\u201c\u5c31\u50cf\u7ae5\u8bdd\u6545\u4e8b\u4e2d\u7684\u5b69\u5b50\uff0c\u9664\u4e86\u7075\u9b42\u4e4b\u5916\uff0c\u6240\u6709\u793c\u7269\u90fd\u5f97\u5230\u4e86\u201d\u3002\u4ed6\u8fd8\u5bf9\u7231\u5fb7\u534e\u516b\u4e16\u4e0d\u591f\u7231\u56fd\u8fd9\u4e00\u4e8b\u5b9e\u5927\u53d1\u96f7\u9706\uff1a\u201c\u4ed6\u4ece\u4e0d\u5173\u5fc3\u82f1\u683c\u5170\u6216\u82f1\u56fd\u4eba\u3002\u201d Ferdinand Mount \u8bb0\u5f97 Lascelles \u53c2\u89c2\u4e86\u4ed6\u7684\u5b66\u6821\uff0c\u5728\u90a3\u91cc\uff0cMount\u201c\u88ab\u4ed6\u5bf9\u6e29\u838e\u516c\u7235\u7684\u6bd2\u6db2\u7684\u7206\u70b8\u9707\u60ca\u4e86......\u4ed6\u4ee4\u4eba\u96be\u5fd8\u3002\u201d\u4f46 Lascelles \u4e0d\u53ea\u662f\u575a\u6301\u795e\u79d8\u548c\u52bf\u5229\u7684\u6807\u51c6\uff0c\u4ed6\u4e5f\u4e0d\u4f1a\u5728\u6267\u884c\u8fd9\u4e9b\u6807\u51c6\u65f6\u83b7\u5f97\u6b8b\u9177\u7684\u4e50\u8da3\u3002\u4ed6\u4e3b\u5f20\u516c\u5e73\u7ade\u4e89\u548c\u52a1\u5b9e\u3002\u5f53\u8bfa\u57c3\u5c14\u00b7\u8003\u6c83\u5fb7\u88ab\u63a8\u8350\u4e3a\u7235\u58eb\u65f6\uff0c\u62c9\u585e\u5c14\u65af\u5efa\u8bae\u4e54\u6cbb\u516d\u4e16\u4e0d\u8981\u3002\u56fd\u738b\u4e0d\u65ad\u6279\u51c6\u5bf9\u5f00\u51fa\u65e0\u6548\u652f\u7968\u7684\u5e74\u8f7b\u82f1\u56fd\u7687\u5bb6\u7a7a\u519b\u519b\u5b98\u8fdb\u884c\u519b\u4e8b\u6cd5\u5ead\u5ba1\u5224\uff0c\u800c\u8003\u6c83\u5fb7\u6700\u8fd1\u56e0\u6b3a\u9a97\u6240\u5f97\u7a0e\u800c\u88ab\u7f5a\u6b3e\u3002\u90a3\u4e9b\u5e74\u8f7b\u4eba\u5728\u8003\u6c83\u5fb7\u53d7\u5230\u5c0a\u91cd\u7684\u540c\u65f6\u53d7\u5230\u60e9\u7f5a\u662f\u9519\u8bef\u7684\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u4ee4\u4eba\u96be\u5fd8\uff0c\u4f46\u672c\u8d28\u4e0a\u662f\u5149\u8363\u7684\u3002\u62c9\u585e\u5c14\u65af\u660e\u767d\uff0c\u867d\u7136\u541b\u4e3b\u5236\u5fc5\u987b\u4e0a\u6f14\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u662f\u5047\u7684\u3002\u516c\u5171\u666f\u89c2\u5fc5\u987b\u662f\u5b83\u6240\u575a\u6301\u7684\u4ef7\u503c\u89c2\u7684\u771f\u5b9e\u8868\u8fbe\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5fc5\u987b\u62d2\u7edd\u7235\u4f4d\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u534e\u83b1\u58eb\u8f9b\u666e\u68ee\u4e0d\u80fd\u6210\u4e3a\u5973\u738b\u3002 \uff08\u5728\u4ed6\u66f4\u6076\u6bd2\u7684\u4e00\u4e2a\u65f6\u523b\uff0c\u62c9\u585e\u5c14\u65af\u5199\u9053\uff0c\u56fd\u738b\u7684\u81e3\u6c11\u4e0d\u4f1a\u5bb9\u5fcd\u201c\u4e00\u4e2a\u88ab\u5546\u5e97\u5ba0\u574f\u7684\u7f8e\u56fd\u4eba\uff0c\u6709\u4e24\u4e2a\u6d3b\u7740\u7684\u4e08\u592b\uff0c\u58f0\u97f3\u5c31\u50cf\u751f\u9508\u7684\u952f\u5b50\u201d\u3002\uff09\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u9000\u4f4d\u540e\uff0c\u62c9\u585e\u5c14\u65af\u53bb\u4e86\u7aed\u5c3d\u5168\u529b\u8ba9\u7231\u5fb7\u534e\u8fdc\u79bb\u8fd9\u4e2a\u56fd\u5bb6\uff0c\u8bd5\u56fe\u4ece\u516c\u4f17\u7684\u8111\u6d77\u4e2d\u6839\u9664\u6574\u4e2a\u4e8b\u4ef6\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\uff0c\u65e0\u8bba\u53d1\u751f\u7684\u65b9\u5f0f\u5982\u4f55\uff0cLascelles \u5f00\u59cb\u76f8\u4fe1\u9000\u4f4d\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u4ed6\u8bf4\uff0c\u7231\u5fb7\u534e\u201c\u4e60\u60ef\u6027\u5730\u51c6\u5907\u4e3a\u4ed6\u4e2a\u4eba\u7684\u597d\u6076\u800c\u727a\u7272\u771f\u76f8\u201d\uff1b\u7231\u5fb7\u534e\u7684\u540d\u6c14\u4e0d\u8db3\u4ee5\u7ef4\u6301\u541b\u4e3b\u5236\u3002 Lascelles \u76f8\u4fe1\u8be5\u673a\u6784\uff0c\u4f46\u8bf4\uff1a\u201c\u6211\u4ece\u672a\u5c06\u6e29\u838e\u5bb6\u65cf\u7684\u4efb\u4f55\u6210\u5458\u7406\u60f3\u5316\u201d\u3002\u5f53\u54c8\u7f57\u5fb7\u00b7\u5c3c\u79d1\u5c14\u68ee\u53d7\u547d\u64b0\u5199\u4e54\u6cbb\u200b\u200b\u4e94\u4e16\u7684\u4f20\u8bb0\u65f6\uff0c\u62c9\u585e\u5c14\u65af\u544a\u8bc9\u4ed6\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u673a\u6784\u7684\u4f20\u8bb0\uff0c\u4e0d\u9700\u8981\u201c\u4e0b\u964d\u4e3a\u4e2a\u6027\u201d\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u5439\u5618\u3002\u5ba3\u5e03\u9000\u4f4d\u7684\u90a3\u5929\u665a\u4e0a\uff0c\u62c9\u585e\u5c14\u65af\u7ed5\u7740\u5723\u8a79\u59c6\u65af\u516c\u56ed\u8d70\u6765\u8d70\u53bb\uff0c\u60f3\u7740\u8a79\u59c6\u65af\u4e8c\u4e16\u3002\u541b\u4e3b\u5236\u7684\u7a33\u5b9a\u5bf9\u4ed6\u6765\u8bf4\u5f88\u91cd\u8981\u3002\u4ed6\u5c06\u9000\u4f4d\u63cf\u8ff0\u4e3a\u201c\u6211\u751f\u547d\u4e2d\u771f\u6b63\u7684\u60b2\u5267\u201d\u3002\n\u7136\u800c\u5bf9\u4e8e\u6709\u7740\u5982\u6b64\u5f3a\u70c8\u539f\u5219\u7684\u4eba\u6765\u8bf4\uff0c\u62c9\u585e\u5c14\u65af\u5374\u7f3a\u4e4f\u65b9\u5411\u611f\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5e74\u8f7b\u7684\u6bd5\u4e1a\u751f\uff0c\u4ed6\u76f8\u5f53\u61d2\u6563\u3002\u5c3d\u7ba1\u4ed6\u548c\u4f2f\u8482\u00b7\u4f0d\u65af\u7279\uff08Bertie Wooster\uff09\u6240\u8bf4\u7684\u4e00\u4e9b\u66f4\u597d\u7684\u5143\u7d20\u4e00\u8d77\u5728\u4f26\u6566\u5403\u996d\uff0c\u4f46\u4ed6\u7684\u65e5\u8bb0\u4ece\u672a\u50cf\u4ed6\u5c04\u6740\u7b2c\u4e00\u53ea\u96c4\u9e7f\u6216\u9a91\u9a6c\u65f6\u90a3\u6837\u751f\u52a8\u3002 \uff08\u4ed6\u611f\u8c22\u4ed6\u7ee7\u627f\u4e86\u201c\u53c8\u957f\u53c8\u5e73\u7684 Lascelles \u5927\u817f\u201d\u3002\uff09\u4ed6\u5e74\u8f7b\u65f6\u7684\u4e3b\u8981\u5174\u8da3\u2014\u2014\u5c31\u50cf\u7231\u5fb7\u534e\u516b\u4e16\u4e00\u6837\u2014\u2014\u662f\u6d3b\u8dc3\u3002\u4e00\u7cfb\u5217\u53ef\u80fd\u7684\u804c\u4e1a\u2014\u2014\u5916\u4ea4\u90e8\u3001\u80a1\u7968\u7ecf\u7eaa\u4eba\u3001\u8bb0\u8005\u2014\u2014\u88ab\u5c1d\u8bd5\u3001\u618e\u6068\u3001\u5931\u8d25\u6216\u6839\u672c\u6ca1\u6709\u5f00\u59cb\u3002\u5982\u679c\u6ca1\u6709\u6218\u4e89\uff0c\u4ed6\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u6d41\u6d6a\u8005\u3002\u76f8\u53cd\uff0c\u5c3d\u7ba1\u6218\u4e89\u6709\u70b9\u4e0d\u6d3b\u8dc3\uff0c\u4ed6\u8fd8\u662f\u88ab\u6388\u4e88\u519b\u4e8b\u5341\u5b57\u52cb\u7ae0\u3002\u505c\u6218\u540e\uff0c\u4ed6\u4e3a\u4ed6\u7684\u59d0\u592b\u5b5f\u4e70\u603b\u7763\u5de5\u4f5c\u3002\u4ed6\u5728\u7ed9\u4ed6\u7684\u53d4\u53d4\u963f\u9053\u592b\u00b7\u5229\u5fb7\u5c14\uff08Adolphous Liddell\uff09\uff08\u53e6\u4e00\u4e2a\u7a0d\u5fae\u6709\u70b9\u5931\u843d\u7684\u7075\u9b42\uff09\u5199\u4fe1\u65f6\u8bf4\uff1a\u201c\u5373\u4f7f\u7ecf\u8fc7\u957f\u671f\u7684\u519b\u7eaa\u8bad\u7ec3\uff0c\u5728\u6240\u6709\u7684\u9686\u91cd\u548c\u4eea\u5f0f\u4e2d\u4e5f\u6709\u5f88\u591a\u4e1c\u897f\u6df1\u6df1\u5730\u6fc0\u6012\u4e86\u6211\u3002\u201d\u6211\u4eec\u53ef\u80fd\u4f1a\u60ca\u8bb6\u4e8e\u8fd9\u79cd\u5bf9\u5e1d\u738b\u98ce\u4e91\u7684\u7f3a\u4e4f\u94a6\u4f69\u3002\u6bd5\u7adf\uff0c\u8fd9\u5c31\u662f Alan Lascelles\uff1a\u53cd\u52a8\u7684\u3001\u6743\u5a01\u7684\u3001\u5a5a\u59fb\u7684\u6740\u624b\u3001\u65e7\u79e9\u5e8f\u7684\u4e3b\u8981\u634d\u536b\u8005\u3002\u4f46\u4e5f\u6b63\u662f\u8fd9\u79cd\u7565\u663e\u8d85\u7136\u7684\u770b\u6cd5\uff0c\u8ba9\u4ed6\u6210\u4e3a\u4e86\u5982\u6b64\u4f18\u79c0\u7684\u81e3\u5b50\u3002 Lascelles \u76f8\u4fe1\u7687\u5ba4\u7684\u5b9e\u8d28\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5c55\u793a\u3002\u4e54\u6cbb\u4e94\u4e16\u53bb\u4e16\u540e\u7684\u7b2c\u4e8c\u5929\uff0c\u4e5f\u5c31\u662f\u90a3\u6b21\u62b1\u6028\u7687\u5bb6\u98ce\u6d41\u7684\u8fd1 20 \u5e74\u540e\uff0c\u56fd\u738b\u7684\u9057\u4f53\u88ab\u5e26\u5230\u6851\u5fb7\u7075\u5384\u59c6\u82b1\u56ed\u5c3d\u5934\u7684\u4e00\u4e2a\u5c0f\u6559\u5802\uff0c\u5728\u5927\u578b\u516c\u5171\u8868\u6f14\u4e4b\u524d\u4e3e\u884c\u4e86\u4e00\u4e2a\u5c0f\u578b\u7684\u79c1\u4eba\u4eea\u5f0f\uff1a\u201c\u536b\u5175\u4eec\u51e0\u4e4e\u4e00\u58f0\u4e0d\u54cd\uff0c\u5c06\u68fa\u6750\u625b\u5728\u80a9\u4e0a\uff0c\u653e\u5728\u796d\u575b\u524d\uff1b\u5728\u90a3\u91cc\uff0c\u7ecf\u8fc7\u975e\u5e38\u77ed\u6682\u7684\u670d\u52a1\u540e\uff0c\u6211\u4eec\u79bb\u5f00\u4e86\u5b83\uff0c\u8ba9\u6851\u5fb7\u7075\u5384\u59c6\u5e84\u56ed\u7684\u4eba\u770b\u5b88\u4e09\u5341\u516d\u5c0f\u65f6\u3002\u6211\u6562\u8bf4\uff0c\u5f53\u6240\u6709\u7684\u55a7\u56a3\u548c\u558a\u53eb\u90fd\u6d88\u901d\u540e\uff0c\u90a3\u4e2a\u5c0f\u5c0f\u7684\u4eea\u5f0f\u5c06\u4f5c\u4e3a\u6700\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u4eea\u5f0f\u7559\u5728\u6211\u7684\u8111\u6d77\u4e2d\u3002\u201d Lascelles \u4e0d\u662f\u90a3\u79cd\u4e3a\u4e86\u7eaa\u5ff5\u724c\u548c\u5728\u516c\u56ed\u91cc\u51fa\u53bb\u73a9\u7684\u4fdd\u7687\u515a\u3002\u4ed6\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u4fe1\u5f92\u3002\u4ed6\u53ef\u4ee5\u6beb\u4e0d\u5938\u5f20\u5730\u5c06\u56fd\u738b\u79f0\u4e3a\u795e\u3002\u4ed6\u57cb\u846c\u4e86\u90e8\u843d\u7684\u9996\u9886\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u65b0\u56fd\u738b\u4f1a\u53d1\u751f\u5982\u6b64\u6df7\u4e71\u7684\u539f\u56e0\u3002\u7231\u5fb7\u534e\u516b\u4e16\u60f3\u8981\u7ecf\u8425\u4e00\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u90e8\u843d\u3002 Lascelles \u4e0e\u7231\u5fb7\u534e\u516b\u4e16\u7684\u5386\u53f2\u5bf9\u4e8e\u4e86\u89e3\u540e\u6765\u7684\u4e8b\u4ef6\u81f3\u5173\u91cd\u8981\u3002 1920 \u5e74\uff0c\u5f53\u4ed6\u4ece\u5370\u5ea6\u56de\u6765\u65f6\uff0c\u4ed6\u7684\u670b\u53cb\u83b1\u8482\u00b7\u57c3\u5c14\u4e54 (Letty Elcho) \u7ed9\u4ed6\u5e26\u6765\u4e86\u4e00\u5c01\u4fe1\uff0c\u9080\u8bf7\u4ed6\u4e0e\u65f6\u4efb\u5a01\u5c14\u58eb\u4eb2\u738b\u7684\u7231\u5fb7\u534e\u516b\u4e16\u4e00\u8d77\u5de5\u4f5c\u3002 Lascelles \u88ab\u8fd9\u4efd\u5de5\u4f5c\u5438\u5f15\uff0c\u90e8\u5206\u539f\u56e0\u662f\u56e0\u4e3a\u5723\u8a79\u59c6\u65af\u5bab\u79bb\u4ed6\u5bb6\u534a\u82f1\u91cc\uff0c\u79bb\u4ed6\u7684\u4ff1\u4e50\u90e8\u6709\u56db\u5206\u4e4b\u4e00\u82f1\u91cc\uff0c\u4f46\u4e3b\u8981\u662f\u56e0\u4e3a\u201c\u6211\u5bf9\u738b\u5b50\u975e\u5e38\u94a6\u4f69\uff0c\u6211\u76f8\u4fe1\u82f1\u683c\u5170\u7684\u672a\u6765\u548c\u4efb\u4f55\u4e2a\u4eba\u4e00\u6837\uff0c\u90fd\u638c\u63e1\u5728\u4ed6\u7684\u624b\u4e2d\u3002\u201d\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4efd\u5de5\u4f5c\uff0c\u4ed6\u53ef\u80fd\u4f1a\u7b7e\u7ea6\u5230\u4e00\u5bb6\u5370\u5237\u516c\u53f8\u5f53\u5b66\u5f92\u3002\u8fd9\u79cd\u6df1\u6df1\u7684\u94a6\u4f69\u4e0d\u4f1a\u6301\u4e45\uff0c\u800c\u62c9\u585e\u5c14\u65af\u770b\u5230\u7687\u5ba4\u4e2d\u7684\u8352\u8c2c\u7684\u80fd\u529b\u5bf9\u4ed6\u4f5c\u4e3a\u671d\u81e3\u7684\u89d2\u8272\u5f88\u91cd\u8981\u3002\u5728\u76ee\u7779\u4e86\u738b\u5b50\u559d\u9152\u3001\u8d4c\u535a\u3001\u505a\u5973\u4eba\u3001\u73a9\u5ffd\u804c\u5b88\u3001\u5bf9\u82f1\u56fd\u5f53\u6743\u6d3e\u6210\u5458\u7c97\u9c81\u4ee5\u53ca\u2014\u2014\u4ee4\u4eba\u9707\u60ca\u7684\u662f\u5c01\u5efa\u7684\u827e\u4f26\u2014\u2014\u5728\u4e54\u6cbb\u4e94\u4e16\u53ef\u80fd\u4f1a\u6b7b\u7684\u6050\u60e7\u65f6\u8868\u73b0\u51fa\u5f88\u5c11\u5174\u8da3\u540e\uff0c\u4ed61929 \u5e74\uff0c\u4ee5\u6211\u4eec\u8bb8\u591a\u4eba\u68a6\u5bd0\u4ee5\u6c42\u7684\u65b9\u5f0f\u8f9e\u804c\uff1a\n\u5f53\u4ed6\u95ee\u6211\u4e3a\u4ec0\u4e48\u8981\u79bb\u5f00\u4ed6\u65f6\uff0c\u6211\u5728\u4ed6\u7684\u623f\u95f4\u91cc\u8e31\u6b65\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u544a\u8bc9\u4ed6\uff0c\u5c31\u50cf\u6211\u53ef\u80fd\u544a\u8bc9\u4e00\u4e2a\u5f1f\u5f1f\u4e00\u6837\uff0c\u6211\u5bf9\u4ed6\u548c\u4ed6\u7684\u6574\u4e2a\u751f\u6d3b\u8ba1\u5212\u7684\u770b\u6cd5\uff0c\u5e76\u9884\u8a00\u51c6\u786e\u5730\u8bf4\uff0c\u4ed6\u5c06\u5931\u53bb\u82f1\u683c\u5170\u7684\u738b\u4f4d\uff0c\u8fd9\u5728\u5f53\u65f6\u53ef\u80fd\u4f1a\u8ba9\u6211\u611f\u5230\u60ca\u8bb6\u3002\u6211\u4eec\u5927\u591a\u6570\u4eba\uff0c\u5728\u8fd9\u6837\u7684\u9000\u51fa\u4e4b\u540e\uff0c\u5c31\u518d\u4e5f\u4e0d\u4f1a\u56de\u53bb\u4e86\u3002\u800c Lascelles \u53ea\u662f\u9010\u6e10\u878d\u5165\u4e86\u8fd9\u4e2a\u89d2\u8272\u3002\u4e0d\u5e72\u4e86\uff0c\u4ed6\u79f0\u81ea\u5df1\u4e3a\u201c\u5012\u7f6e\u7684\u798f\u65af\u5854\u592b\u201d\uff08\u56e0\u4e3a\u4ed6\u5f88\u7626\uff0c\u4e2d\u5e74\u65f6\u548c\u5e74\u8f7b\u65f6\u4e00\u6837\u7626\uff09\uff0c\u8ba9\u54c8\u5c14\u738b\u5b50\u201c\u81ea\u5bfb\u6b7b\u8def\u201d\u3002\u4f46\u662f\uff0c\u5728\u4e0e\u4ed6\u7684\u5bb6\u4eba\u5728\u8be5\u56fd\u9605\u8bfb\u548c\u56ed\u827a\u4e24\u5e74\u540e\uff0c\u5e76\u5728\u52a0\u62ff\u5927\u4e3a\u603b\u7763\u5de5\u4f5c\u4e86\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4ed6\u88ab\u8981\u6c42\u91cd\u65b0\u52a0\u5165\u7687\u5bb6\u5de5\u4f5c\u4eba\u5458\u3002\u8d77\u521d\uff0c\u4ed6\u62d2\u7edd\u4e86\u3002\u8fd9\u4efd\u5de5\u4f5c\u662f\u4e0e\u4e54\u6cbb\u4e94\u4e16\u4e00\u8d77\u5de5\u4f5c\u7684\uff0c\u4ed6\u66fe\u5c06\u4ed6\u63cf\u8ff0\u4e3a\u201c\u795e\u683c\u201d\u2014\u2014\u4f46\u62c9\u585e\u5c14\u65af\u5728\u4ed6\u7684\u8f9e\u804c\u4fe1\u4e2d\u8bf4\uff1a\u201c\u5f88\u5c11\u6709\u4eba\u80fd\u4e00\u8f88\u5b50\u505a\u79c1\u4eba\u79d8\u4e66\uff0c\u6211\u4e0d\u662f\u4ed6\u4eec\u4e2d\u7684\u4e00\u5458\u3002\u201d\u6b64\u5916\uff0c\u4ed6\u6307\u51fa\uff0c\u5f53\u56fd\u738b\u53bb\u4e16\u65f6\uff0c\u4ed6\u4f1a\u5904\u4e8e\u4e00\u4e2a\u975e\u5e38\u56f0\u96be\u7684\u5883\u5730\uff0c\u8bf4\u5f97\u5ba2\u6c14\u4e00\u70b9\uff0c\u5df2\u7ecf\u5c06\u4ed6\u5bf9\u4ed6\u7684\u60f3\u6cd5\u544a\u8bc9\u4e86\u4e0b\u4e00\u4f4d\u3002\u4e54\u6cbb\u4e94\u4e16\u7684\u79c1\u4eba\u79d8\u4e66\u514b\u83b1\u592b\u00b7\u5a01\u683c\u62c9\u59c6\uff08Clive Wigram\uff09\u66fe\u8058\u8bf7\u62c9\u585e\u5c14\u65af\u4f5c\u4e3a\u4ed6\u7684\u52a9\u624b\uff0c\u4ed6\u544a\u8bc9\u4ed6\u4e0d\u8981\u62c5\u5fc3\u3002\u56fd\u738b\u8eab\u4f53\u5f88\u597d\uff0c\u8fd8\u6709\u51e0\u5e74\u7684\u5bff\u547d\u3002 Lascelles \u5199\u4fe1\u7ed9\u4ed6\u7684\u59bb\u5b50\u743c\u8bf4\u4ed6\u5c06\u63a5\u53d7\u8fd9\u4efd\u5de5\u4f5c\uff1a\u201c\u5982\u679c\u4e00\u4e2a\u4eba\u4e0d\u51c6\u5907\u5728\u88ab\u53ec\u5524\u65f6\u534f\u52a9\u795e\u7075\uff0c\u90a3\u4e48\u5728\u4e16\u754c\u5404\u5730\u5531\u2018\u5929\u4f51\u56fd\u738b\u2019\u662f\u6ca1\u6709\u7528\u7684\u3002\u201d\u56e0\u6b64\uff0c\u5728 1936 \u5e74 1 \u6708\uff0c\u4ed6\u524d\u5f80\u8bfa\u798f\u514b\u5f00\u59cb\u4ed6\u7684\u65b0\u5de5\u4f5c\u3002\u4ed6\u5728\u5229\u7269\u6d66\u8857\u627e\u5230\u4e86\u4e00\u8f86\u4e3a\u4ed6\u9884\u7559\u7684\u5934\u7b49\u8f66\u53a2\u3002\u65c5\u7a0b\u5f00\u59cb\u540e\uff0c\u201c\u4e00\u4e2a\u5e74\u8f7b\u4eba\u51fa\u73b0\u5728\u6211\u7684\u9a6c\u8f66\u95e8\u53e3\u3002\u5f53\u6211\u8ba4\u51fa\u4ed6\u662f\u7ea6\u514b\u516c\u7235\u65f6\uff0c\u6211\u6b63\u8981\u544a\u8bc9\u4ed6\u8d70\u5f00\u3002\u201d\u4ed6\u80fd\u8ba4\u51fa\u4ed6\u662f\u4ef6\u597d\u4e8b\u3002 12 \u4e2a\u6708\u5185\uff0c\u8fd9\u4e2a\u5e74\u8f7b\u4eba\u5c06\u6210\u4e3a\u4e54\u6cbb\u516d\u4e16\uff0c\u800c 1943 \u5e74\uff0c\u62c9\u585e\u5c14\u65af\u5c06\u6210\u4e3a\u4ed6\u7684\u79c1\u4eba\u79d8\u4e66\u3002 \u7ea6\u514b\u516c\u7235\u5728\u65c5\u9014\u4e2d\u9014\u5bf9\u4ed6\u8bf4\uff1a\u201c\u56fd\u738b\u8eab\u4f53\u4e0d\u597d\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u201d\u4e54\u6cbb\u4e94\u4e16\u5728\u56db\u5929\u5185\u53bb\u4e16\u3002\u6ca1\u6709\u7075\u9b42\u7684\u7231\u5fb7\u534e\u662f\u56fd\u738b\u3002\u56e0\u6b64\uff0c\u51fa\u4e8e\u5026\u6020\u3001\u8d23\u4efb\u548c\u70ed\u8840\u7231\u56fd\u4e3b\u4e49\u7684\u7ed3\u5408\uff0c\u62c9\u585e\u5c14\u65af\u6700\u7ec8\u6210\u4e3a\u4e86\u4e00\u4e2a\u5728\u9053\u5fb7\u4e0a\u88ab\u4ed6\u6392\u65a5\u7684\u4eba\u7684\u52a9\u7406\u79c1\u4eba\u79d8\u4e66\u3002\u7ec5\u58eb\u4eec\u4e0d\u53ea\u662f\u56e0\u4e3a\u4e0d\u559c\u6b22\u65b0\u56fd\u738b\u800c\u9000\u51fa\u7687\u5bb6\u670d\u52a1\u3002\u7231\u5fb7\u534e\u8ba9 Lascelles \u575a\u6301\u4e0b\u53bb\uff0c\u8fd9\u4e5f\u8bb8\u4ee4\u4eba\u60ca\u8bb6\u3002\u4f46\u4ece\u8fd9\u4e2a\u8ddd\u79bb\u770b\u6765\u5f88\u660e\u663e\u2014\u2014\u6b63\u5982\u5f53\u65f6\u62c9\u585e\u5c14\u65af\u6240\u8ba4\u4e3a\u7684\u90a3\u6837\u2014\u2014\u7231\u5fb7\u534e\u4ece\u6765\u6ca1\u6709\u6253\u7b97\u8d70\u90a3\u4e48\u8fdc\uff0c\u4e5f\u4e0d\u4f1a\u5f85\u592a\u4e45\u3002\u738b\u5ba4\u65e8\u5728\u901a\u8fc7\u5c55\u793a\u4ed6\u4eec\u7684\u751f\u6d3b\u6765\u4e3a\u6211\u4eec\u7684\u751f\u6d3b\u5e26\u6765\u5947\u89c2\uff1a\u51fa\u751f\u3001\u6b7b\u4ea1\u548c\u5a5a\u59fb\u7684\u8f89\u714c\u76db\u4f1a\u3002\u968f\u7740\u541b\u4e3b\u5236\u5728 19 \u4e16\u7eaa\u5931\u53bb\u6743\u529b\uff0c\u4ed6\u4eec\u7528\u8868\u6f14\u53d6\u800c\u4ee3\u4e4b\u3002\u516c\u4f17\u53c2\u4e0e\u6210\u4e3a\u7ef4\u591a\u5229\u4e9a\u5973\u738b\u4fdd\u6301\u5176\u76f8\u5173\u6027\u7684\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b0\u7684\u7687\u5ba4\u751f\u6d3b\u6a21\u5f0f\u662f\u8ba9\u7231\u5fb7\u534e\u516b\u4e16\u6210\u4e3a\u5a01\u5c14\u58eb\u4eb2\u738b\u8fd9\u6837\u7684\u660e\u661f\u7684\u4e00\u90e8\u5206\uff1a\u4ed6\u5728\u7f8e\u56fd\u3001\u52a0\u62ff\u5927\u548c\u5357\u975e\u7684\u65c5\u884c\u53d6\u5f97\u4e86\u5de8\u5927\u7684\u6210\u529f\u3002\u4f46\u5230\u4e54\u6cbb\u4e94\u4e16\u7edf\u6cbb\u672b\u671f\uff0c\u82f1\u56fd\u7687\u5ba4\u4e0e\u4eba\u6c11\u8fbe\u6210\u4e86\u65b0\u7684\u76df\u7ea6\uff1a\u201c\u79c1\u4eba\u8bda\u4fe1\uff0c\u516c\u5171\u666f\u89c2\u201d\u3002 Lascelles \u662f\u683c\u9c81\u5409\u4e9a\u6a21\u5f0f\u7684\u5927\u796d\u53f8\uff0c\u4ed6\u4eb2\u773c\u76ee\u7779\u4e86\u7231\u5fb7\u534e\u5168\u662f\u516c\u4f17\u4eba\u7269\uff0c\u6ca1\u6709\u79c1\u4eba\u6b63\u76f4\u3002\u4f5c\u4e3a\u4e00\u540d\u5931\u804c\u7684\u671d\u81e3\uff08\u5e76\u4e14\u56e0\u4e3a\u4ed6\u627e\u4e0d\u5230\u5176\u4ed6\u4e8b\u60c5\u53ef\u505a\uff09\uff0c\u4ed6\u610f\u8bc6\u5230\u9664\u975e\u738b\u5ba4\u575a\u6301\u81ea\u5df1\u7684\u539f\u5219\u2014\u2014\u575a\u6301\u4e0d\u65ad\u53d8\u5316\u7684\u4e16\u754c\u5f3a\u52a0\u7ed9\u5b83\u7684\u539f\u5219\u2014\u2014\u5426\u5219\u5c31\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u4ed6\u662f\u5ba3\u4f20\u5458\uff0c\u662f\u7231\u5fb7\u534e\u516b\u4e16\u7684\u654c\u4eba\uff0c\u662f\u53cd\u52a8\u6d3e\uff0c\u4ee5\u53ca\u4ed6\u58f0\u79f0\u7684\u4e00\u5207\uff0c\u56e0\u4e3a\u4ed6\u610f\u8bc6\u5230\u738b\u5ba4\u522b\u65e0\u9009\u62e9\u3002\u968f\u7740\u541b\u4e3b\u5236\u9002\u5e94\u6c11\u4e3b\u5236\uff0c\u636e\u8bf4\u62c9\u585e\u5c14\u65af\u5e26\u6765\u7684\u5927\u90e8\u5206\u4e8b\u60c5\u5f88\u53ef\u80fd\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\n\u4ed6\u4e00\u76f4\u662f\u4e00\u4e2a\u7565\u663e\u4e0d\u7518\u7684\u671d\u81e3\u3002 \uff08\u4ed6\u9000\u4f11\u540e\u5f88\u4e45\u5c31\u544a\u8bc9\u4ed6\u7684\u5973\u513f\uff0c\u5982\u679c\u4ed6\u80fd\u91cd\u6765\uff0c\u4ed6\u4f1a\u517b\u9a6c\u3002\u201c\u8d5b\u9a6c\uff0c\u6216\u9a6c\u8f66\uff1a\u4efb\u4f55\u79cd\u7c7b\u7684\u9a6c\u3002\u201d\uff09\u4e0d\u8fc7\uff0c\u4ed6\u5f88\u64c5\u957f\u3002\u4ed6\u6700\u7ec8\u4f1a\u88ab\u8bb0\u4f4f\u662f\u6700\u540e\u4e00\u4e2a\u5e2e\u52a9\u541b\u4e3b\u5236\u8fc7\u6e21\u5230\u73b0\u4ee3\u529f\u80fd\u7684\u8001\u6d3e\uff0c\u8fd8\u662f\u4e00\u4e2a\u987d\u56fa\u7684\u8001\u53cd\u52a8\u5206\u5b50\uff0c\u65e0\u8c13\u5730\u7834\u574f\u4e86\u4e00\u4e9b\u5e78\u798f\u751f\u6d3b\uff0c\u8fd8\u6709\u5f85\u89c2\u5bdf\u3002\u4f46\u662f\u5f53\u4ed6\u7684\u6863\u6848\u6700\u7ec8\u88ab\u6e05\u7406\u5e72\u51c0\u65f6\uff0c\u6211\u6000\u7591\u6211\u4eec\u4f1a\u5728\u90a3\u91cc\u627e\u5230\u4efb\u4f55\u9ed1\u6697\u7684\u79d8\u5bc6\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u57fa\u672c\u539f\u7406\u3002\u4ed6\u662f\u4e00\u4e2a\u76f8\u4fe1\u738b\u5ba4\u9053\u5fb7\u652f\u6491\u7740\u738b\u5ba4\u773c\u955c\u7684\u4eba\u3002\u4ed6\u4f1a\u600e\u6837\u770b\u5f85\u73b0\u4ee3\u541b\u4e3b\u5236\uff1f\u5728 1990 \u5e74\u5bf9\u83f2\u5229\u666e\u00b7\u9f50\u683c\u52d2 (Philip Ziegler) \u7684\u7231\u5fb7\u534e\u516b\u4e16 (Edward VIII) \u7684\u8bc4\u8bba\u4e2d\uff0c\u514b\u91cc\u65af\u6258\u5f17\u00b7\u5e0c\u94a6\u65af (Christopher Hitchens) \u89c2\u5bdf\u5230\u201c\u738b\u4f4d\u7684\u9b54\u529b\u73b0\u5728\u4e0e\u67e5\u5c14\u65af\u548c\u5b89\u5ae9\u4f2f\u683c\u3001\u6234\u5b89\u5a1c\u548c\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e\u5bc6\u4e0d\u53ef\u5206\u2014\u2014\u7231\u5fb7\u534e\u7684\u56fd\u9645\u767d\u8272\u5783\u573e\u4e60\u60ef\u5ef6\u4f38\u5230\u73b0\u4ee3\u5a31\u4e50\u5708\u548c\u540d\u4eba\u6587\u5316\u4e2d\u3002 \u201d\u8fd9\u53e5\u8bdd\u53ef\u80fd\u662f\u5bf9 Lascelles \u5b66\u6821\u7684\u60bc\u8bcd\uff1a\u9664\u975e\u4ed6\u4eec\u575a\u6301\u67d0\u4e9b\u56f0\u96be\u7684\u3001\u6709\u65f6\u662f\u8fc7\u65f6\u7684\u539f\u5219\uff0c\u5426\u5219\u62e5\u6709\u738b\u5ba4\u6beb\u65e0\u610f\u4e49\u3002\u5bf9\u4e8e\u62c9\u585e\u5c14\u65af\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5f53\u65f6\u7684\u516c\u4f17\u6765\u8bf4\uff0c\u8fd9\u4e9b\u539f\u5219\u90fd\u662f\u5173\u4e8e\u5a5a\u59fb\u7684\u3002\u4ed6\u505a\u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u662f\u5750\u5728\u80af\u8f9b\u987f\u5bab\u7684\u82b1\u56ed\u91cc\u89c2\u770b\u67e5\u5c14\u65af\u548c\u6234\u5b89\u5a1c\u5a5a\u793c\u7684\u70df\u82b1\u5e86\u795d\u6d3b\u52a8\u3002\u7b2c\u4e8c\u5929\uff0c\u4ed6\u6bcf\u9694\u51e0\u5206\u949f\u5c31\u8be2\u95ee\u6709\u5173\u4e8b\u4ef6\u7684\u6d88\u606f\uff0c\u62c5\u5fc3\u4e00\u5207\u90fd\u4f1a\u987a\u5229\u3002\u4e24\u5468\u540e\u4ed6\u53bb\u4e16\u4e86\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u6211\u4eec\u4ece\u90a3\u4ee5\u540e\u542c\u5230\u7684\u5173\u4e8e\u7687\u5ba4\u7684\u90a3\u4e9b\u7206\u6599\u4f1a\u4ee4\u4ed6\u7684\u793c\u4eea\u611f\u5230\u538c\u6076\u3002\u4f46\u6c64\u7c73\u6ca1\u6709\u63a8\u6d4b\u3002 BBC \u7684\u4e00\u4f4d\u5e74\u8f7b\u4eba\u66fe\u8bd5\u56fe\u8bf4\u670d\u4ed6\u53c2\u52a0 Lascelles \u6240\u8bf4\u7684\u201c\u5173\u4e8e\u82f1\u56fd\u541b\u4e3b\u5236\u672a\u6765\u7684\u7535\u89c6\u72c2\u6b22\u201d\u3002 Lascelles \u76f4\u622a\u4e86\u5f53\u5730\u56de\u7b54\u8bf4\uff1a\u201c\u6211\u544a\u8bc9\u4ed6\u6211\u5f88\u5feb\u5c31\u4f1a\u8d64\u8eab\u88f8\u4f53\u5730\u8d70\u5728\u76ae\u5361\u8fea\u5229\u5927\u8857\u4e0a\u3002\u201d\u6211\u4eec\u53ef\u80fd\u4f1a\u53d1\u73b0\u5f88\u5bb9\u6613\u5c06\u4ed6\u89c6\u4e3a\u8001\u987d\u56fa\u800c\u4e0d\u4e88\u7406\u4f1a\u3002\u4f46\u662f\uff0c\u6211\u4eec\u5982\u4f55\u81ea\u4fe1\u5730\u8bf4\u6211\u4eec\u8d85\u8d8a\u4e86\u4ed6\u5bf9\u79c1\u4eba\u8bda\u4fe1\u7684\u62c5\u5fe7\uff1f\u6211\u4eec\u662f\u5426\u62c5\u5fc3\u4ec0\u4e48\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u738b\u5ba4\u914d\u5076\uff1f\u8981\u53c2\u4e0e\u8ba8\u8bba\u5e76\u4fdd\u6301\u6700\u65b0\u72b6\u6001\uff0c\u8bf7\u6210\u4e3a\u6ce8\u518c\u7528\u6237\u3002\u6ce8\u518c\u6211", "note_en": "Forty years ago, on 10 August, a tall and wiry old man died at Kensington Palace, aged 94. He had been a cultivated chap \u2014 a former Director of the Midland Bank, Secretary of the Literary Society and Director of the Royal Academy of Music. He read Shakespeare on the Tube as he travelled to meetings at the bank, and wrote amateur poetry. Occasionally royalty stopped to chit chat on their way past, as Princess Margaret once did with her new baby. In later retirement, he had become something of a hermit, looking like \u201ca pot-bellied old beaver\u201d, to use his own words, and growing an ungainly beard.\n This man was Alan \u201cTommy\u201d Lascelles, former Private Secretary to George VI and Queen Elizabeth II, and the Assistant Private Secretary to Edward VIII when he was Prince of Wales. He had lived, grace-and-favour, at the Old Stables at Kensington Palace (he thought it was one of the nicest houses in England) since he retired in 1953. Having been a courtier, on and off, from 1920-1953, he gives a fascinating insight into how to preserve a monarchy in a democracy.\n  Lascelles gets caricatured as a stiff-arsed, hard-bristled, curmudgeonly enforcer of horrible rules in  The Crown , forever thwarting true love\u2019s course. As well as playing a role in Edward VIII\u2019s abdication, Lascelles is seen as one of the Establishment men who decided Princess Margaret couldn\u2019t marry Peter Townsend. But despite this crucial role in modern Royal history, the real Lascelles remains slightly out of sight to us. There is no biography. His archives in Churchill College, Cambridge are largely closed \u2014 especially material relating to the monarchy. Edward Owens, who recently wrote a book about the royal family and the mass media, was denied access to them. His diaries, although excellent, were selectively edited by his friend Rupert Hart-Davis; they reveal a much more emotional, sensible, likeable man than the popular image.\n There is no consensus, then, on Lascelles\u2019s true character. To Edward VIII, living in exile as the Duke of Windsor, Lascelles was always \u201cthat snake\u201d. The feeling was mutual. When Harold Nicolson had lunch with Lascelles three days after the Abdication, the courtier said the former King was \u201clike a child in the fairy stories who had been given every gift except a soul\u201d. He was also spitting with rage about the fact that Edward VIII was not patriotic enough: \u201cHe never cared about England or the English.\u201d Ferdinand Mount  remembers Lascelles visiting his school, where Mount \u201cwas startled by his explosion of venom against the Duke of Windsor \u2026 He was memorably unpleasant.\u201d\n  But Lascelles wasn\u2019t just a stickler for arcane and snobbish standards, nor did he take a cruel pleasure in enforcing them. He stood for fair play and pragmatism. When No\u00ebl Coward was recommended for a knighthood, Lascelles advised George VI against. The King was constantly approving court martials against young RAF officers who had written dud cheques, and Coward had recently been fined for cheating his Income Tax. It would have been wrong for those young men to be punished while Coward was honoured.\n Essentially honourable, then, despite being memorably unpleasant. Lascelles understood that although monarchy must be staged, that doesn\u2019t mean it can be fake. The public spectacle has to be a true enough expression of the values it upholds. That is why the knighthood had to be refused, and why Wallace Simpson couldn\u2019t be Queen. (In one of his more venomous moments, Lascelles wrote that the King\u2019s subjects would not tolerate \u201ca shop-spoiled American, with two living husbands and a voice like a rusty saw\u201d.) That is why, after the abdication, Lascelles went to some lengths to keep Edward out of the country, to try and eradicate the whole affair from the public mind. It is also why, irrespective of the way it happened, Lascelles came to believe the abdication was inevitable. Edward, he said, was \u201chabitually ready to sacrifice truth to his personal likes or dislikes\u201d; Edward\u2019s celebrity wasn\u2019t enough to maintain the monarchy.\n Lascelles believed in the institution but said, \u201cI have never idealised any member of the House of Windsor\u201d. When Harold Nicolson was commissioned to write George V\u2019s biography, Lascelles told him it would be the biography of an institution, and that there would be no need to \u201cdescend into personalities\u201d. This isn\u2019t just bluster. The night the abdication was announced, Lascelles walked round and round St James\u2019s Park, thinking about James II. The stability of the monarchy mattered to him. He described the abdication as \u201ca real tragedy in my life\u201d.\n  And yet for someone with such strong principles, Lascelles lacked a sense of direction. As a young graduate, he was rather louche. Although he was skittling around London dining with what Bertie Wooster would call some of the better elements, his diary never comes alive like it does when he shoots his first stag, or when he\u2019s riding a horse. (He gives thanks that he inherited the \u201clong, flat Lascelles thighs.\u201d) His main interest as a young man \u2014 just like Edward VIII\u2019s \u2014 was to be active. A series of possible careers \u2014 Foreign Office, stockbroker, journalist \u2014 were tried, hated, failed or simply never started. Without the war, he would have been edging towards becoming a drifter. Instead, despite a somewhat inactive war, he was awarded the Military Cross.\n After the Armistice, he worked for his brother-in-law, the Governor of Bombay. Writing to his uncle  Adolphous Liddell (another slightly lost soul) he said: \u201cthere is much in all the flummery and ceremonial which, even after a long course of military discipline, irritates me profoundly.\u201d We might be surprised at this lack of admiration for imperial flummery. This is, after all, Alan Lascelles: reactionary, establishment stalwart, slayer of marriages, arch defender of the old order. But it was precisely this slightly detached view that made him such a good courtier.\n Lascelles believed in the substance of royalty, not just the display. The day after George V died, nearly 20 years after that complaint about imperial flummery, the King\u2019s body was taken to a little church at the end of the garden at Sandringham for a small private ceremony ahead of the large, public spectacle:\n \u201cThe guardsmen, with scarcely a sound, slung the coffin on their shoulders and laid it before the altar; and there, after a very brief service, we left it, to be watched for thirty-six hours by the men of the Sandringham Estate. I daresay when all the tumult and shouting dies, that little ceremony will remain in my mind as the most impressive of all.\u201d\n Lascelles was not the sort of Royalist who was in it for the memorial plates and days out at the park. He was a genuine believer. He could talk of the King as a Deity with little exaggeration. He was burying the head of his tribe. This is why there was such a kerfuffle with the new King. Edward VIII wanted to run a very different sort of tribe.\n  Lascelles\u2019s history with Edward VIII is essential to understanding later events. When he returned from India in 1920, his friend Letty Elcho brought him a letter offering a job with Edward VIII, then Prince of Wales. Lascelles was attracted to the job partly because St. James\u2019s Palace was half a mile from his house and a quarter of a mile from his club, but mostly because \u201cI have got a very deep admiration for the Prince, and I am convinced that the future of England is as much in his hands as in any individual\u201d. Remarkably, had this job not come along, he would have signed on as an apprentice to a printing firm.\n This deep admiration would not last, and Lascelles\u2019s ability to see the ridiculous in the Royal was important to his role as a courtier. After nine years of watching the Prince drink, gamble, womanise, neglect his duties, be rude to members of the British establishment, and \u2014 shockingly for the feudal Alan \u2014 show very little interest when there was a scare that George V might die, he stormed out in 1929, in the sort of resignation so many of us have dreamed of making:\n When he asked me why I wanted to leave him, I paced his room for the best part of an hour, telling him, as I might have told a younger brother, exactly what I thought of him and his whole scheme of life, and foretelling, with an accuracy that might have surprised me at the time, that he would lose the throne of England.\n Most of us, after such an exit, would never go back. And Lascelles had only drifted into the role. Quitting it, he called himself \u201can inverted Falstaff\u201d (because he was thin, just as thin in middle age as when he was young), leaving Prince Hal to \u201cwork out his own damnation\u201d. But, after two years of reading and gardening with his family in the country, and a stint working for the Governor General in Canada, he was asked to re-join the Royal staff.\n At first, he refused. The job was with George V, who he once described as \u201cthe godhead\u201d \u2014 but Lascelles had said in his resignation letter: \u201cVery few men can go on being private secretaries all their lives, and I am not one of them.\u201d And besides, he pointed out, when the king died, he would be in a very difficult position, to put it mildly, having told the next-in-line exactly what he thought of him. Clive Wigram, George V\u2019s Private Secretary \u2014\u00a0who was hiring Lascelles to be his assistant \u2014 told him not to worry. The King was in splendid health and had years left in him. Lascelles wrote to his wife Joan saying he was going to take the job: \u201cIt is no use going about the world singing \u2018God Save the King\u2019 if one isn\u2019t prepared to assist the Deity when called upon.\u201d\n  And so, in January 1936, he travelled to Norfolk to start his new job. He had found a first-class carriage reserved for him at Liverpool Street. Once the journey was underway, \u201ca young man appeared in the doorway of my carriage. I was about to tell him to go away when I recognised him as the Duke of York.\u201d It was a good thing he recognised him. The young man would accede as George VI within 12 months, and Lascelles would become his Private Secretary in 1943. The Duke of York said to him halfway through the journey, \u201cWhat\u2019s all this about the King not being well?\u201d George V died within four days. The soulless Edward was king.\n And so, from a combination of lassitude, duty, and blue-blooded patriotism, Lascelles ended up as Assistant Private Secretary to a man he was morally repulsed by. Gentlemen do not just drop out of Royal service because they dislike the new King. It is perhaps surprising that Edward kept Lascelles on. But it seems obvious from this distance \u2014 as it seemed to Lascelles then\u00a0\u2014 that Edward had never planned to make it that far and wasn\u2019t going to stay long.\n The royal family is meant to bring spectacle to our lives by displaying theirs: a glittering pageant of Births, Deaths, and Marriages. As the monarchy lost power through the nineteenth century, they replaced it with performance. Public engagement became Queen Victoria\u2019s way of maintaining her relevance. And this new mode of royal existence is part of what made Edward VIII such a star as Prince of Wales: his tours of America, Canada, and South Africa were massive successes. But by the end of George V\u2019s reign, British royalty had consolidated a new covenant with the people: \u201cprivate probity, public spectacle.\u201d\n Lascelles was the high priest of the Georgian model and had seen first-hand that Edward was all public spectacle and no private probity. A courtier out of duty (and because he found nothing else to do), he realised that unless the royal family stuck to its principles \u2014 to the principles forced on it by a changing world \u2014 it would suffer. To the extent that he was a propagandist, an enemy of Edward VIII, a reactionary, and everything else he is claimed to be, it was because he realised the royal family had very little choice. Much of what Lascelles is said to have brought about may well have been inevitable as monarchy adjusted to democracy.\n He had always been a slightly unwilling courtier. (He told his daughter long after he retired that, if he could have his life again, he would breed horses. \u201cRacehorses, or cart-horses: any sort of horses.\u201d) He was good at it, though. It remains to be seen whether he will eventually be remembered as the last of the old school who helped the monarchy transition to its modern function \u2014 or as a crusty old reactionary who needlessly destroyed a clutch of happy lives. But when his archives are eventually dusted off, I doubt we will find any dark secrets in there. We already know the fundamentals. He was a man who believed in royal morals underpinning royal spectacles.\n  What would he make of the modern monarchy? In his 1990 review of Philip Ziegler\u2019s  Edward VIII, Christopher Hitchens  observed that \u201cthe magic of the throne is now inextricable from Charles and the Annenbergs, Diana and Donald Trump \u2014 the extension of Edward\u2019s international white-trash habit into modern showbiz and celeb culture.\u201d This line might stand as a eulogy for the Lascelles\u2019s school: that there is little point in having a Royal Family unless they adhere to certain difficult and sometimes out-of-date principles. For Lascelles, as for the public at that time, those principles were about marriage. One of the last things he did was sit in the garden of Kensington Palace to watch the firework celebrations of Charles and Diana\u2019s wedding. The next day, he asked for news about the event every few minutes, anxious it should all be going well. He died two weeks later.\n Undoubtedly, the sort of revelations we have heard about the Royal Family since would have been anathema to his sense of decorum. But Tommy didn\u2019t speculate. A young man from the BBC once tried to persuade him to appear in what Lascelles called \u201ca television orgy on The Future of the British Monarchy\u201d. Lascelles gave a forthright reply: \u201cI told him I would as soon walk stark naked down Piccadilly.\u201d We might find it easy to dismiss him as an old fogey. But how confidently can we say that we are beyond his concerns about private probity? Are we above worrying about what makes an acceptable royal spouse?\n To get involved in the discussion and stay up to date, become a registered user.\n    Sign me up", "posttime": "2021-08-09 03:58:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u541b\u4e3b\u5236,saved,\u7231\u5fb7\u534e", "title": "\u62ef\u6551\u541b\u4e3b\u5236\u7684\u201c\u86c7\u201d", "title_en": "The 'snake' who saved the monarchy", "transed": 1, "url": "https://unherd.com/2021/08/the-snake-who-saved-the-monarchy/", "via": "", "real_tags": ["\u541b\u4e3b\u5236", "saved", "\u7231\u5fb7\u534e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072175, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u6211\u53d1\u8868\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u5c55\u793a\u4e86\u6211\u4eec\u4f7f\u7528\u827e\u4f26\u671b\u8fdc\u955c\u9635\u5217\u5728 4.9 GHz \u9891\u7387\u4e0b\u5bf9\u4ed9\u540e\u5ea7 A \u548c\u5929\u9e45\u5ea7 A \u8fdb\u884c\u5e72\u6d89\u6210\u50cf\u7684\u7ed3\u679c\u3002\u63a5\u8fd1\u4e03\u6708\u5e95\uff0c\u6211\u51b3\u5b9a\u4ee5\u66f4\u9ad8\u7684\u9891\u7387\u5bf9\u5929\u9e45\u5ea7 A \u8fdb\u884c\u66f4\u591a\u7684\u5e72\u6d89\u89c2\u6d4b\uff0c\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u5206\u8fa8\u7387\u3002\u6211\u9009\u62e9\u4e86 8.45 GHz \u7684\u9891\u7387\uff0c\u56e0\u4e3a\u5b83\u901a\u5e38\u662f\u4e00\u4e2a\u6ca1\u6709\u5e72\u6270\u7684\u9891\u6bb5\uff08\u56e0\u4e3a\u5b83\u88ab\u5206\u914d\u7ed9\u6df1\u7a7a\u901a\u4fe1\uff09\uff0c\u5b83\u88ab\u5176\u4ed6\u65e0\u7ebf\u7535\u5929\u6587\u53f0\u4f7f\u7528\uff0c\u56e0\u6b64\u901a\u91cf\u5bc6\u5ea6\u53ef\u4ee5\u76f4\u63a5\u4e0e\u4ee5\u524d\u7684\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5e76\u4e14\u56e0\u4e3a\u66f4\u9ad8\u968f\u7740\u9891\u7387\u7684\u589e\u52a0\uff0cATA \u4e0a\u65e7\u9988\u9001\u7684\u7075\u654f\u5ea6\u5f00\u59cb\u4e0b\u964d\u3002\u8fd9\u7bc7\u6587\u7ae0\u662f\u5bf9\u89c2\u5bdf\u548c\u7ed3\u679c\u7684\u603b\u7ed3\u3002\u4ee3\u7801\u548c\u6570\u636e\u5305\u542b\u5728\u5e16\u5b50\u7684\u672b\u5c3e\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u89c2\u5bdf\uff0c\u6211\u4f7f\u7528\u4e86\u6700\u8fd1\u6295\u5165\u4f7f\u7528\u7684 6 \u6839\u5929\u7ebf\u3002 USRP \u7684\u914d\u7f6e\u4e0e\u6211\u5728 3 \u6708\u4efd\u7684\u5e16\u5b50\u4e2d\u63cf\u8ff0\u7684\u76f8\u540c\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u80fd\u5173\u8054\u4e00\u4e2a\u57fa\u7ebf\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f62\u6210\u7684\u4e00\u7ec4\u57fa\u7ebf\u4ec5\u9650\u4e8e\u901a\u8fc7\u9009\u62e9\u53ef\u7528\u4e8e USRP1 \u7684\u5929\u7ebf\u83b7\u5f97\u7684\u90a3\u4e9b\u548c USRP2 \u53ef\u7528\u7684\u5929\u7ebf\u4e4b\u4e00\uff0c\u5982\u4e0b\u6240\u793a\uff1a J2007+404 \u4f5c\u4e3a\u4e3b\u76f8\u4f4d\u6821\u51c6\u5668\uff1b\u8fd9\u662f\u4e00\u4e2a\u88ab\u5217\u4e3a VLA \u6821\u51c6\u5668\u7684 2.85 Jy \u6e90 Cygnus A \u4e0e\u6821\u51c6\u5668 J2007+404 \u4ec5\u76f8\u8ddd 1.59 \u5ea6\u3002\u4e0b\u56fe\u53d6\u81ea VLASS 2-4 GHz VLA \u5929\u7a7a\u8c03\u67e5\u663e\u793a\u4e86\u4e24\u8005\u3002\u5929\u9e45\u5ea7 A \u4f4d\u4e8e\u9ed1\u5323\u5b50\u5185\uff0c\u56e0\u4e3a VLASS \u6392\u9664\u4e86\u975e\u5e38\u5f3a\u7684\u6e90\uff0c\u5e76\u4e14\u5728\u5929\u9e45\u5ea7 A \u7684\u5de6\u4fa7\u53ef\u4ee5\u770b\u5230 J2007+404\uff0c\u7531\u4e8e\u5176\u76f8\u5f53\u9ad8\u7684\u901a\u91cf\u5bc6\u5ea6\uff08\u4e0e\u6b64\u6c11\u610f\u8c03\u67e5\uff09\u3002\u8be5\u56fe\u50cf\u662f\u901a\u8fc7 VLASS2.1 HiPS \u6570\u636e\u7684 Web \u754c\u9762\u83b7\u5f97\u7684\uff0c\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u8f7b\u677e\u63a2\u7d22\u65e0\u7ebf\u7535\u5929\u7a7a\u3002\u6211\u4f7f\u7528\u4e86\u4e0e\u4e09\u6708\u4efd\u76f8\u540c\u7684 GNU Radio \u8f6f\u4ef6\u76f8\u5173\u5668\u3002\u8fd9\u5305\u542b\u5728 ata_interferometry Github \u5b58\u50a8\u5e93\u4e2d\u3002\u89c2\u5bdf\u5230\u7684\u5e26\u5bbd\u4e3a 40.96 MHz\uff0c\u4f7f\u7528 X \u548c Y \u6781\u5316\u3002\u6240\u6709\u6781\u5316\u81ea\u76f8\u5173\u548c\u4e92\u76f8\u5173\u90fd\u662f\u5b9e\u65f6\u8ba1\u7b97\u7684\uff0c\u5e76\u5728\u540e\u5904\u7406\u4e2d\u5206\u9636\u6bb5\u8fdb\u884c\uff0c\u5e76\u7b80\u5316\u4e3a\u5177\u6709 64 \u4e2a\u9891\u9053\u548c 1 \u79d2\u79ef\u5206\u65f6\u95f4\u7684 UVFITS \u6587\u4ef6\u3002\u89c2\u5bdf\u662f\u5728\u8fde\u7eed\u4e09\u5929\u5185\u8fdb\u884c\u7684\uff1a7 \u6708 23\u300124 \u65e5\u548c 25 \u65e5\u3002\u7b2c\u4e00\u5929\u4ec5\u5bf9 3C286 \u8fdb\u884c\u4e86\u5b8c\u6574\u7684\u8ddf\u8e2a\u89c2\u5bdf\u3002\u8fd9\u6b21\u89c2\u5bdf\u7684\u76ee\u7684\u662f\u6536\u96c6\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u636e\u7528\u4e8e\u504f\u632f\u6821\u51c6\uff0c\u6b64\u5916\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u7cfb\u7edf\u7684\u68c0\u67e5\u3002\n\u7b2c\u4e8c\u5929\uff0c\u5bf9\u6240\u6709\u76ee\u6807\u8fdb\u884c\u89c2\u5bdf\uff0c\u987a\u5e8f\u5982\u4e0b\uff1a\u5929\u9e45\u5ea7A\u548cJ2007+404\u4e0a\u5347\u65f6\u4ea4\u66ff\u626b\u63cf\uff0c3C286\u4e0d\u9891\u7e41\u626b\u63cf\uff1b3C84\u4e0a\u5347\u65f6\uff0c\u626b\u63cf\u5929\u9e45\u5ea7A\u548cJ2007+\u7684\u56fe\u6848404\u7ee7\u7eed\uff0c\u4f463C286\u7684\u4e0d\u9891\u7e41\u626b\u63cf\u88ab3C84\u7684\u4e0d\u9891\u7e41\u626b\u63cf\u53d6\u4ee3 \u5f53\u5929\u9e45\u5ea7A\u548cJ2007+404\u8bbe\u7f6e\u65f6\uff0c3C84\u53c8\u89c2\u5bdf\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u76ee\u7684\u662f\u4f7f\u7528\u8fd9\u6700\u540e\u4e00\u6bb5\u8fdb\u884c\u5e26\u901a\u6821\u51c6 \u4e0d\u5e78\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u5728\u5929\u9e45\u5ea7 A \u5347\u8d77\u4e4b\u524d\uff0c\u6574\u4e2a\u665a\u4e0a\u90fd\u6709\u89c2\u5bdf\u811a\u672c\uff0c\u56e0\u6b64\u4e22\u5931\u4e86\u51e0\u4e2a\u5c0f\u65f6\u7684\u6570\u636e\u3002\u7b2c\u4e09\u5929\u9075\u5faa\u76f8\u540c\u7684\u65f6\u95f4\u8868\uff0c\u89c2\u5bdf\u811a\u672c\u5df2\u7ecf\u66f4\u6b63\uff0c\u56e0\u6b64\u6536\u96c6\u4e86\u6240\u6709\u6570\u636e\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u6574\u6574\u4e09\u5929\u7684\u6821\u51c6\u80fd\u89c1\u5ea6\u5e45\u5ea6\u3002\u6309\u573a\u7740\u8272\uff0c\u9ed1\u8272\u4e3a 3C286\uff0c\u7c89\u7ea2\u8272\u4e3a J2007+404\uff0c\u6a59\u8272\u4e3a\u5929\u9e45\u5ea7 A\uff0c\u7eff\u8272\u4e3a 3C84\u3002\u8be5\u56fe\u663e\u793a\u4e86\u5149\u6e90\u4eae\u5ea6\u7684\u5de8\u5927\u5dee\u5f02\uff0c\u5929\u9e45\u5ea7 A \u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u4eae\u7684\u3002\u4f7f\u6821\u51c6\u5668\u9760\u8fd1\u901a\u91cf\u5bc6\u5ea6\u81f3\u5c11\u4e3a\u51e0 Jy \u7684\u79d1\u5b66\u76ee\u6807\u901a\u5e38\u5e76\u4e0d\u5bb9\u6613\uff0c\u8fd9\u5bf9\u4e8e\u4f7f\u7528 ATA 6.1 m \u789f\u5f62\u5929\u7ebf\u4ee5\u4e00\u6b21\u4ec5 40 MHz \u7684\u5e26\u5bbd\u548c\u4e00\u6761\u57fa\u7ebf\u8fdb\u884c\u89c2\u6d4b\u65f6\u83b7\u5f97\u826f\u597d\u7ed3\u679c\u662f\u5fc5\u8981\u7684.\u56e0\u6b64\uff0cJ2007+404 \u7684\u5b58\u5728\u4e0e\u5929\u9e45\u5ea7 A \u5982\u6b64\u63a5\u8fd1\u662f\u4e00\u4e2a\u5e78\u798f\u7684\u5de7\u5408\u3002\n3C84 \u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u5f3a\u7684\u7d27\u51d1\u578b\u6821\u51c6\u5668\u4e4b\u4e00\uff0c\u56e0\u6b64\u5b83\u5bf9\u4e8e\u5e26\u901a\u6821\u51c6\u548c\u5176\u4ed6\u53d7\u76ca\u4e8e\u9ad8 SNR \u7684\u6821\u51c6\u975e\u5e38\u6709\u7528\u3002\u6821\u51c6\u548c\u6210\u50cf\u5728 CASA 6.2.0 \u4e2d\u8fdb\u884c\u3002\u9996\u5148\uff0c\u4e00\u4e9b\u5e72\u6270\u6807\u8bb0\u662f\u7528 tfcrop \u5b8c\u6210\u7684\u3002\u7136\u540e\u624b\u52a8\u6807\u8bb0\u5728\u4f7f\u7528 msview \u68c0\u67e5\u5e45\u5ea6\u6216\u76f8\u4f4d\u65f6\u660e\u663e\u4e0d\u597d\u7684\u6570\u636e\u3002\u5728 Cygnus A \u8bbe\u7f6e\u4e4b\u540e\uff0c\u5728\u7b2c\u4e8c\u5929\u548c\u7b2c\u4e09\u5929\u7ed3\u675f\u65f6\u4f7f\u7528 3C84 \u7684\u626b\u63cf\u8fdb\u884c\u4e86\u4e24\u6b21\u5355\u72ec\u7684\u5e26\u901a\u6821\u51c6\u3002\u7ed3\u679c\u8bc1\u660e\u7b2c\u4e8c\u5929\u7684\u6821\u51c6\u8981\u597d\u5f97\u591a\uff0c\u56e0\u4e3a\u5728\u7b2c\u4e09\u5929\u51fa\u73b0\u4e86\u4e00\u4e9b\u5bfc\u81f4\u7075\u654f\u5ea6\u4e0b\u964d\u7684\u672a\u77e5\u95ee\u9898\u3002\u4e92\u76f8\u5173\u7684\u5e45\u5ea6\u7a81\u7136\u4e0b\u964d\uff0c\u800c\u81ea\u76f8\u5173\u7684\u5e45\u5ea6\u6ca1\u6709\u53d7\u5230\u5f71\u54cd\u3002\u6b64\u5916\uff0c\u80fd\u89c1\u5ea6\u7684\u65b9\u5dee\u663e\u7740\u589e\u52a0\u3002\u56e0\u6b64\uff0c\u9009\u62e9\u7b2c\u4e8c\u5929\u7684\u5e26\u901a\u89e3\u51b3\u65b9\u6848\u5e94\u7528\u4e8e\u6240\u6709\u6570\u636e\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u5e26\u901a\u89e3\u51b3\u65b9\u6848\u3002\u6b63\u5982\u6211\u5728 3 \u6708\u4efd\u7684\u5e16\u5b50\u4e2d\u6240\u8bf4\uff0c\u7531\u4e8e\u9010\u57fa\u7ebf\u626b\u63cf\uff0c\u4e0d\u53ef\u80fd\u4f7f\u7528 CASA \u8fdb\u884c\u5ef6\u8fdf\u6821\u51c6\u3002\u56e0\u6b64\uff0c\u5c0f\u7684\u5ef6\u8fdf\u88ab\u5e26\u901a\u76f8\u4f4d\u5438\u6536\u3002\u6709\u8da3\u7684\u662f\uff0c\u53c2\u8003\u5929\u7ebf 2j \u5728 X \u548c Y \u6781\u5316\u4e0a\u5177\u6709\u660e\u663e\u7684\u5ef6\u8fdf\u5dee\u5f02\uff0c\u800c\u5176\u4f59\u5929\u7ebf\u5177\u6709\u66f4\u76f8\u4f3c\u7684\u5ef6\u8fdf\u3002\u9664\u4e86\u6821\u51c6\u5e26\u901a\u4e4b\u5916\uff0c3C84 \u7684\u8fd9\u4e9b\u626b\u63cf\u8fd8\u7528\u4e8e\u6267\u884c\u4e0e\u65f6\u95f4\u65e0\u5173\u7684\u76f8\u4f4d\u6821\u51c6\uff0c\u7136\u540e\u5c06\u5176\u7528\u4f5c X \u548c Y \u504f\u632f\u4e4b\u95f4\u7684\u76f8\u4f4d\u504f\u79fb\u3002\u8fd9\u5141\u8bb8\u4ee5\u4e0e\u6781\u5316\u65e0\u5173\u7684\u65b9\u5f0f\u6267\u884c\u6240\u6709\u8fdb\u4e00\u6b65\u7684\u76f8\u4f4d\u6821\u51c6\uff0c\u4ece\u800c\u63d0\u9ad8 SNR\u3002\u63a5\u4e0b\u6765\uff0c\u5bf9\u6bcf\u4e2a\u7d27\u51d1\u578b\u6821\u51c6\u5668\u8fdb\u884c\u504f\u632f\u65e0\u5173\u76f8\u4f4d\u6821\u51c6\u3002\u5728\u5927\u591a\u6570\u89c2\u5bdf\u671f\u95f4\u624b\u52a8\u9009\u62e9\u6c42\u89e3\u95f4\u9694\uff0c\u4ee5\u4fbf\u4e0e 8 \u4e2a\u57fa\u7ebf\u5468\u671f\u5f88\u597d\u5730\u62df\u5408\u3002\n\u4e0b\u56fe\u663e\u793a\u4e86\u5c06\u8fd9\u79cd\u76f8\u4f4d\u6821\u51c6\u4ee5\u53ca\u5e26\u901a\u548c XY \u76f8\u4f4d\u504f\u79fb\u5e94\u7528\u4e8e\u4e09\u4e2a\u7d27\u51d1\u578b\u5149\u6e90 3C286\uff08\u9ed1\u8272\uff09\u3001J2007+404\uff08\u7c89\u8272\uff09\u548c 3C84\uff08\u7eff\u8272\uff09\u7684\u7ed3\u679c\u3002 J2007+404 \u76f8\u4f4d\u7684\u566a\u58f0\u5728\u7b2c\u4e09\u5929\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u7075\u654f\u5ea6\u4e0b\u964d\u5f88\u660e\u663e\u3002\u5728\u76f8\u4f4d\u6821\u51c6\u4e4b\u540e\uff0c\u5b8c\u6210\u5e45\u5ea6\u6821\u51c6\u3002\u8fd9\u662f\u4ee5\u504f\u632f\u76f8\u5173\u7684\u65b9\u5f0f\u8fdb\u884c\u7684\uff0c\u56e0\u4e3a\u4e24\u4e2a\u901a\u9053\u7684\u589e\u76ca\u53ef\u4ee5\u72ec\u7acb\u53d8\u5316\u3002\u60f3\u6cd5\u662f\u4f7f\u7528 3C286 \u4f5c\u4e3a\u901a\u91cf\u5bc6\u5ea6\u6821\u51c6\u5668\u5e76\u5c06\u901a\u91cf\u523b\u5ea6\u8f6c\u79fb\u5230\u5176\u4ed6\u6821\u51c6\u5668\u3002\u4f46\u662f\uff0c\u6709\u4ee5\u4e0b\u4e24\u4e2a\u602a\u7656\u9700\u8981\u5904\u7406\u3002\u7b2c\u4e8c\u5929\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u7a7a\u7f3a\u6ca1\u6709\u6570\u636e\uff0c\u5c063C286\u548c\u5176\u4ed6\u6765\u6e90\u5206\u5f00\u3002\u8fd9\u610f\u5473\u7740 3C286 \u7684\u5e45\u5ea6\u6807\u5ea6\u4e0d\u80fd\u8f6c\u79fb\u5230\u5176\u4ed6\u6765\u6e90\uff0c\u56e0\u4e3a\u589e\u76ca\u5728\u90a3\u4e2a\u95f4\u9699\u671f\u95f4\u53ef\u80fd\u4f1a\u53d1\u751f\u4e00\u4e9b\u53d8\u5316\uff08\u5b9e\u9645\u4e0a\uff0c\u6b63\u786e\u7684\u5e45\u5ea6\u8f6c\u79fb\u8868\u660e\u5b83\u5df2\u7ecf\u53d1\u751f\u4e86\u53d8\u5316\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4eca\u5929\u8981\u505a\u7684\u5c31\u662f\u4f7f\u75283C84\u4f5c\u4e3a\u5e45\u5ea6\u6807\u5ea6\uff0c\u5f3a\u5236\u6821\u51c6\u65f6\u7b2c\u4e09\u5929\u6d4b\u91cf\u7684\u901a\u91cf\u3002\u5728\u7b2c\u4e09\u5929\uff0c\u6211\u4eec\u9047\u5230\u4e86\u7075\u654f\u5ea6\u53d8\u5316\u7684\u95ee\u9898\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u80fd\u89c1\u5ea6\u5e45\u5ea6\u7a81\u7136\u4e0b\u964d\u3002\u66f4\u6539\u524d\u540e\u7684\u6bb5\u5206\u522b\u6821\u51c6\u548c\u4f20\u8f93\uff0c\u8fd9\u4f3c\u4e4e\u8fd0\u4f5c\u826f\u597d\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u6bcf\u4e2a\u6821\u51c6\u5668\u7684\u6821\u51c6\u5e45\u5ea6\u3002\u4e0e\u7b2c\u4e8c\u5929\u548c\u7b2c\u4e09\u5929\u76f8\u6bd4\uff0c3C84 \u7684\u632f\u5e45\u53ef\u80fd\u7565\u6709\u4e0d\u540c\u3002\u8fd9\u662f\u7531\u4e0a\u9762\u89e3\u91ca\u7684\u7279\u6b8a\u6821\u51c6\u8fc7\u7a0b\u5f15\u8d77\u7684\uff0c\u4f46\u5b83\u662f\u6b21\u8981\u7684\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u6e90\u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u90fd\u4f7f\u7528\u4e86\u7b2c\u4e8c\u5929 3C84 \u7684\u5e26\u901a\u548c XY \u76f8\u4f4d\u504f\u79fb\u4ee5\u53ca\u6765\u81ea\u5176\u81ea\u8eab\u7684\u5e45\u5ea6\u548c\u76f8\u4f4d\u6821\u51c6\u3002\u5bf9\u4e8e Cygnus A\uff0c\u5e26\u901a\u548c XY \u76f8\u4f4d\u504f\u79fb\u4e5f\u53d6\u81ea 3C84\uff0c\u5e45\u5ea6\u548c\u76f8\u4f4d\u6821\u51c6\u53d6\u81ea J2007+404\u3002\u6210\u50cf\u662f\u4f7f\u7528\u591a\u5c3a\u5ea6\u6e05\u6d01\u5b8c\u6210\u7684\uff0c\u53c2\u6570\u4e0e\u6211 3 \u6708\u4efd\u7684\u5e16\u5b50\u5927\u81f4\u76f8\u540c\u3002\u4f7f\u7528 4 \u5f27\u79d2\u7684\u50cf\u7d20\u5927\u5c0f\u3002\u4e0e\u90a3\u7bc7\u6587\u7ae0\u76f8\u6bd4\uff0c512\u00d7512 \u50cf\u7d20\u7684\u56fe\u50cf\u5927\u5c0f\u7528\u4e8e\u5bf9\u6574\u4e2a\u4e3b\u5149\u675f\u8fdb\u884c\u6210\u50cf\uff0c\u5c3d\u7ba1\u6211\u4eec\u4e0d\u5e0c\u671b\u5728\u6bcf\u4e2a\u573a\u4e2d\u770b\u5230\u8fdc\u79bb\u76f8\u4f4d\u4e2d\u5fc3\u7684\u4efb\u4f55\u5176\u4ed6\u7269\u4f53\u3002\n\u4e0b\u56fe\u663e\u793a\u4e86 Cygnus A \u7684 UV \u8986\u76d6\u8303\u56f4\u3002\u8986\u76d6\u8303\u56f4\u5927\u7ea6\u5728 0.2k\u03bb \u5230 7\u03bb \u4e4b\u95f4\uff0c\u5bf9\u5e94\u4e8e 30 \u5f27\u79d2\u548c 17 \u5f27\u5206\u4e4b\u95f4\u7684\u5206\u8fa8\u7387\u3002\u4e0b\u56fe\u663e\u793a\u4e86 (U,V) \u7684\u5e45\u5ea6\u4e0e\u6a21\u91cf\u7684\u5173\u7cfb\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6709\u51e0\u4e2a\u57fa\u7ebf\u6b63\u5728\u63a2\u6d4b Cygnus A \u53ef\u89c1\u6027\u7684\u7b2c\u4e00\u4e2a\u96f6\u70b9\u3002\u5728\u4e00\u4e9b\u57fa\u7ebf\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u8fd9\u6761\u7ebf\u662f\u53cc\u500d\u7684\u3002\u8fd9\u4e24\u5929\u7684\u6bcf\u4e00\u5929\u90fd\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u589e\u76ca\u6821\u51c6\u3002\u8fd9\u5c06\u901a\u8fc7\u6210\u50cf\u540e\u7684\u81ea\u6821\u51c6\u6765\u89e3\u51b3\u3002\u5bf9\u4e8e\u7d27\u51d1\u6e90\uff0c\u9996\u5148\u5728\u6ca1\u6709\u591a\u6b21\u6e05\u6d01\u8fed\u4ee3\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u56fe\u50cf\u4ee5\u751f\u6210\u6a21\u578b\uff0c\u7136\u540e\u8fdb\u884c\u76f8\u4f4d\u548c\u5e45\u5ea6\u81ea\u6821\u51c6\uff0c\u5e76\u4e14\u901a\u8fc7\u66f4\u591a\u6b21\u8fed\u4ee3\u6e05\u6d01\u7b2c\u4e8c\u5e45\u56fe\u50cf\u3002\u56fe\u50cf\u4e0d\u662f\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u6765\u6e90\u5c1a\u672a\u89e3\u6790\uff0c\u4f46\u6210\u50cf\u662f\u68c0\u67e5\u4e00\u5207\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u7684\u597d\u65b9\u6cd5\u3002\u5bf9\u4e8eCygnus A\uff0c\u9996\u5148\u5bf9\u56fe\u50cf\u8fdb\u884c\u6e05\u6d17\uff0c\u7136\u540e\u8fdb\u884c\u76f8\u4f4d\u81ea\u6821\u51c6\uff0c\u518d\u8fdb\u884c\u65b0\u7684\u6e05\u6d01\u56fe\u50cf\uff0c\u6700\u540e\u5bf9\u65b0\u56fe\u50cf\u8fdb\u884c\u76f8\u4f4d\u548c\u5e45\u5ea6\u81ea\u6821\u51c6\uff0c\u4ece\u800c\u751f\u6210\u6700\u7ec8\u7684\u81ea\u6821\u51c6\u56fe\u50cf.\u6bcf\u4e2a\u56fe\u50cf\u7684 SNR \u5982\u4e0b\u6240\u793a\u3002\u8fd9\u88ab\u8ba1\u7b97\u4e3a\u6700\u5927\u50cf\u7d20\u4eae\u5ea6\u4e0e\u4e0d\u5305\u542b\u5bf9\u8c61\u7684\u533a\u57df\u4e2d\u7684 RMS \u7684\u5546\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u52303C84\u548cCygnus A\u7684SNR\u5728\u81ea\u6821\u51c6\u540e\u6709\u5f88\u5927\u7684\u63d0\u9ad8\u3002\u7531\u4e8e\u8fd9\u4e9b\u7269\u4f53\u975e\u5e38\u660e\u4eae\uff0c\u56fe\u50cf SNR \u4e3b\u8981\u53d7\u6821\u51c6\u8bef\u5dee\u7684\u9650\u5236\u3002 3C84.image SNR\uff1aSNR 163.433C84_selfcal1.image\uff1a406.753C286.image SNR\uff1aSNR 409.763C286_selfcal1.image\uff1a474.12J2007 + 404.image SNR\uff1a182.80J2007 + 404_selfcal1.image SNR\uff1aSNR 189.06CygA.image\uff1a168.43CygA_selfcal1.image SNR : 230.08CygA_selfcal2.image SNR: 539.46 \u4e0b\u56fe\u663e\u793a\u4e86 Cygnus A \u7684\u56fe\u50cf\u3002\u6211\u4eec\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\u53cc\u6e90\u7ed3\u6784\u3002\n\u653e\u5927\u6b64\u56fe\u50cf\u5e76\u6dfb\u52a0\u7b49\u9ad8\u7ebf\u56fe\u53ef\u663e\u793a\u66f4\u591a\u7ec6\u8282\u3002\u8f6e\u5ed3\u8bbe\u7f6e\u4e3a 2.5\u30015\u300110\u300120\u300130\u300140\u300150\u300160\u300170\u300180 \u548c 90% \u7684\u6c34\u5e73\u3002\u5728\u4e24\u4e2a\u6ce2\u74e3\u4e4b\u95f4\u7684\u4e2d\u5fc3\u90e8\u5206\u6709\u5927\u7ea6 3 Jy/\u5149\u675f\u7684\u901a\u91cf\u3002\u8fd9\u660e\u663e\u9ad8\u4e8e\u672c\u5e95\u566a\u58f0\uff0c\u5b83\u662f Jy/\u5149\u675f\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u5b83\u63d0\u4f9b\u4e86\u8bc1\u636e\uff0c\u8868\u660e\u6211\u4eec\u6b63\u5728\u68c0\u6d4b\u5230\u4e0e\u6d3b\u52a8\u661f\u7cfb\u4e2d\u7684\u8d85\u5927\u8d28\u91cf\u9ed1\u6d1e\u76f8\u5bf9\u5e94\u7684\u5c0f\u7684\u4e2d\u5fc3\u6210\u5206\u3002\u4e0b\u56fe\u53d6\u81ea\u6b64\u9875\u9762\uff0c\u663e\u793a\u4e86\u4f7f\u7528 VLA \u5728 5 GHz \u4e0b\u5b8c\u6210\u7684\u56fe\u50cf\uff0c\u5206\u8fa8\u7387\u63d0\u9ad8\u4e86 60 \u500d\uff0c\u5e76\u6e05\u695a\u5730\u663e\u793a\u4e86\u4e2d\u5fc3\u7ec4\u4ef6\u3002\u5929\u9e45\u5ea7 A \u56fe\u50cf\u4e2d\u7684\u603b\u901a\u91cf\u5bc6\u5ea6\u4e3a 201.6 Jy\uff0c\u6700\u5927\u4eae\u5ea6\u4e3a 79.7 Jy/\u5149\u675f\u3002\u6211\u5e0c\u671b\u5229\u7528\u8fd9\u4e9b\u89c2\u6d4b\u6765\u7814\u7a76\u5929\u9e45\u5ea7 A \u7684\u6781\u5316\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u5929\u4e13\u95e8\u5bf9 3C286 \u8fdb\u884c\u5168\u8f68\u9053\u89c2\u6d4b\u7684\u539f\u56e0\u3002\u4f46\u662f\uff0c\u6211\u4e00\u76f4\u65e0\u6cd5\u83b7\u5f97\u4ee4\u4eba\u6ee1\u610f\u7684\u504f\u632f\u6821\u51c6\u3002\u7531\u4e8e\u5927\u6cc4\u6f0f\u548c\u4f4e\u4fe1\u566a\u6bd4\uff0c\u5f88\u96be\u68c0\u6d4b\u5341\u5b57\u624b\u4e2d\u7684\u6781\u5316\u7279\u5f81\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u67d0\u4e9b\u672a\u77e5\u539f\u56e0\uff0c\u5e73\u884c\u624b\u76f8\u5bf9\u5e45\u5ea6\u7684\u53d8\u5316\u5728\u4e0d\u540c\u57fa\u7ebf\u4e4b\u95f4\u4f3c\u4e4e\u4e0d\u592a\u4e00\u81f4\u3002\u6211\u4ec0\u81f3\u4e00\u76f4\u5728\u5173\u6ce8\u4f7f\u7528 ALMA \u5bf9 3C286 \u8fdb\u884c\u504f\u632f\u6210\u50cf\u7684 CASA \u6559\u7a0b\uff08\u56e0\u4e3a ALMA \u4e5f\u4f7f\u7528\u7ebf\u6027\u504f\u632f\u57fa\u7840\uff0c\u4e0e VLA \u4e0d\u540c\uff09\uff0c\u8bd5\u56fe\u6539\u8fdb\u6211\u7684\u6280\u672f\u3002\u4f46\u662f\uff0c\u5728\u5c1d\u8bd5\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6570\u636e\u540e\uff0c\u6211\u8ba4\u4e3a\u5b83\u4e0d\u591f\u597d\uff0c\u9700\u8981\u6536\u96c6\u66f4\u597d\u7684\u6570\u636e\u3002\u672c\u6587\u4e2d\u7528\u4e8e\u76f8\u5173\u548c\u5b9a\u76f8\u7684\u4ee3\u7801\u662f\u6765\u81ea ata_interferometry \u5b58\u50a8\u5e93\u7684\u5e38\u7528 GNU Radio FX \u8f6f\u4ef6\u76f8\u5173\u5668\u7ba1\u9053\u3002 CASA \u4e2d\u7684\u6821\u51c6\u548c\u6210\u50cf\u662f\u4f7f\u7528\u6b64\u811a\u672c\u5b8c\u6210\u7684\u3002\u8be5\u6570\u636e\u5df2\u5728 Zenodo \u4e2d\u4f5c\u4e3a\u6570\u636e\u96c6\u201cCygnus A 8.45 GHz \u5e72\u6d89\u6d4b\u91cf\u89c2\u6d4b\u4e0e\u827e\u4f26\u671b\u8fdc\u955c\u9635\u5217\u201d\u53d1\u5e03\u3002", "note_en": "Earlier this year, I published a post showing our results of the  interferometric imaging of Cassiopeia A and Cygnus A at 4.9 GHz with the Allen Telescope Array. Near the end of July, I decided to perform more interferometric observations of Cygnus A at a higher frequency, in order to obtain better resolution. I chose a frequency of 8.45 GHz because it is usually a band clean of interference (since it is allocated to deep space communications), it is used by other radio observatories, so flux densities can be compared directly with previous results, and because going higher up in frequency the sensitivity of the old feeds at ATA starts to decrease.\n This post is a summary of the observations and results. The code and data is included at the end of the post.\n   For these observations, I used 6 antennas that have recently entered into service. The configuration of the USRPs is the same as I described in my  post from March, so only one baseline can be correlated at a time and the set of baselines that can be formed is limited to those obtained by choosing one of the antennas available for USRP1 and one of the antennas available for USRP2, as follows:\n    J2007+404 as primary phase calibrator; this is a 2.85 Jy source  listed as a VLA calibrator\n Cygnus A is located at only 1.59 degrees separation from the calibrator J2007+404. The image below, taken from the  VLASS 2-4 GHz VLA sky survey shows both of them. Cygnus A is inside the black box, since VLASS excludes very strong sources, and J2007+404 can be seen towards the left of Cygnus A, showing large sidelobes in this  quicklook image due to its rather high flux density (compared with the sensitivity of this survey). This image has been obtained with the web interface to the  VLASS2.1 HiPS data, which allows us to explore the radio sky easily.\n  I used the same GNU Radio software correlator as back in March. This is contained in the  ata_interferometry Github repository. The observed bandwidth was 40.96 MHz, using the X and Y polarizations. All the polarimetric autocorrelations and cross-correlations were computed in real time, and phased in post-processing and reduced to UVFITS files with 64 frequency channels and 1 second integration time.\n  The observations were carried out during three consecutive days: 23, 24 an 25 July. The first day was a full track observation of 3C286 only. The goal of this observation was to gather as much data as possible for polarization calibration, and additionally to serve as a check of the system.\n The second day, the observation of all the targets was carried out, following this order:\n When Cygnus A and J2007+404 rose, they were scanned alternatively, with infrequent scans of 3C286\n When 3C84 rose, the pattern of scanning Cygnus A and J2007+404 continued, but the infrequent scans of 3C286 were replaced by infrequent scans of 3C84\n When Cygnus A and J2007+404 set, 3C84 was observed for an hour more, with the goal of using this final segment for bandpass calibration\n Unfortunately, there was a problem with the observation script throughout the night, before Cygnus A rose, so several hours of data were lost. The third day the same schedule was followed, with the observation script already corrected, so all the data was gathered.\n The figure below shows the calibrated visibility amplitudes of the whole three days. Colouring is by field, with 3C286 in black, J2007+404 in pink, Cygnus A in orange, and 3C84 in green.\n  The plot shows the great differences in brightness of the sources, with Cygnus A being by far the brightest. It is often not easy to get calibrators close to the science target that have a flux density of at least a few Jy, which is necessary for good results with the ATA 6.1 m dishes observing with only 40 MHz of bandwidth and one baseline at a time. Therefore, the presence of J2007+404 so close to Cygnus A is a happy coincidence.\n 3C84 is by far one of the strongest compact calibrators, so it is quite useful for bandpass calibration and other calibrations that benefit from high SNR.\n  Calibration and imaging was performed in  CASA 6.2.0. First, some flagging of interference was done with  tfcrop. Then data that was visibly bad when examining the amplitudes or phases with  msview was manually flagged.\n Two separated bandpass calibrations were performed using the scans of 3C84 at the end of the second and third day, after Cygnus A had set. The calibration from the second day turned out to be much better because there was some unknown problem during the third day that caused a loss in sensitivity. The amplitude of the cross-correlations decreased suddenly, while the amplitude of the autocorrelations wasn\u2019t affected. Moreover, the variance of the visibilities increased significantly. Therefore, the bandpass solution from the second day was chosen to be applied to all the data.\n The figures below show the bandpass solutions. As I remarked in my post from March, it is not possible to use CASA for a delay calibration because of the baseline-by-baseline scans. Therefore, the delays, which are small, are absorbed by the bandpass phase.\n  It is interesting that the reference antenna, 2j, has a noticeable delay difference in the X and Y polarizations, whereas the rest of the antennas have more similar delays.\n   Besides calibrating the bandpass, these scans of 3C84 are used to perform a time-independent phase calibration, which is then used as the phase offset between the X and Y polarizations. This allows all further phase calibrations to be performed in a polarization-independent way, which increases the SNR.\n Next, a polarization-independent phase calibration is done on each compact calibrator. The solution intervals are chosen manually during most of the observations in order to fit well with the 8 baseline cycle.\n The figure below shows the results of applying this phase calibration, together with the bandpass and X-Y phase offset to the three compact sources 3C286 (black), J2007+404 (pink) and 3C84 (green). The decrease in sensitivity at some point during the third day is apparent in the noise in the phase of J2007+404.\n  After phase calibration, amplitude calibration is done. This is carried out in a polarization-dependent way, since the gains of the two channels can change independently. The idea is to use 3C286 as the flux density calibrator and to transfer the flux scale to the other calibrators. However, there are the following two quirks to handle.\n On the second day there is a long gap without data, separating 3C286 and the other sources. This means that the amplitude scale from 3C286 can\u2019t be transferred to the other sources, since the gains can have changed somewhat during that gap (and in fact the correct amplitude transfer shows that it has changed). Therefore, what we do for this day is to use 3C84 as the amplitude scale, forcing the flux measured on the third day during calibration.\n On the third day we have the problem with the change in sensitivity, that causes a sudden decrease of visibility amplitudes. The segments before and after the change are calibrated and transferred separately, and this seems to work well.\n The figures below show the calibrated amplitudes of each of the calibrators. There is perhaps a slight difference in amplitude for 3C84 comparing the second and third days. This is caused by the peculiar calibration process explained above, but it is something minor.\n    For each of these sources, the bandpass and X-Y phase offset from 3C84 on the second day and the amplitude and phase calibration from itself are used. For Cygnus A, the bandpass and X-Y phase offset are also taken from 3C84 and the amplitude and phase calibration is taken from J2007+404.\n  Imaging is done using multi-scale cleaning and roughly the same parameters as in my post from March. A pixel size of 4 arcseconds is used. In contrast to that post, an image size of 512\u00d7512 pixels is used to image the whole primary beam, though we don\u2019t expect to see any other objects away from the phase centre in each field.\n The figure below shows the UV coverage for Cygnus A. There is coverage between approximately 0.2k\u03bb to 7\u03bb, which corresponds to resolutions between 30 arcsec and 17 arcmin.\n  The next figure shows the amplitude versus modulus of (U,V). We can see that several baselines are probing the first nulls of the visibility of Cygnus A. In some of the baselines we see that the line is double. There are somewhat different gain calibrations on each of the two days. This will be fixed with self-calibration after imaging.\n  For the compact sources, first an image is done without many clean iterations to generate a model, then phase and amplitude self-calibration is made, and a second image is cleaned with more iterations. The images are not very interesting, since the sources are unresolved, but imaging is a good way to check that everything is working correctly.\n For Cygnus A, first an image is cleaned, then a phase self-calibration is done, a new clean image is done, and finally a phase and amplitude self-calibration is done with the new image, thus producing a final self-calibrated image.\n The SNR for each of the images is shown below. This is computed as the quotient of the maximum pixel brightness and the RMS in an area that does not contain the object. We can see how the SNRs of 3C84 and Cygnus A increase greatly after self-calibration. Since these objects are very bright, the image SNR is mainly limited by calibration errors.\n 3C84.image SNR: 163.433C84_selfcal1.image SNR: 406.753C286.image SNR: 409.763C286_selfcal1.image SNR: 474.12J2007+404.image SNR: 182.80J2007+404_selfcal1.image SNR: 189.06CygA.image SNR: 168.43CygA_selfcal1.image SNR: 230.08CygA_selfcal2.image SNR: 539.46\n     The next figure shows the image for Cygnus A. We can clearly see the double source structure.\n  A zoom to this image and the addition of a contour plot reveal more detail. The contours are set at 2.5, 5, 10, 20, 30, 40, 50, 60, 70, 80 and 90% levels.\n  In the central part between the two lobes there is a flux of around 3 Jy/beam. This is significantly higher than the noise floor, which is a fraction of a Jy/beam. It provides evidence that we are detecting the small central component, that corresponds to the supermassive black hole in the active galaxy. The figure below, taken from  this page, shows an image done with VLA at 5 GHz that has 60 times more resolution and shows the central component clearly.\n  The total flux density in the image of Cygnus A is 201.6 Jy, and the maximum brightness is 79.7 Jy/beam.\n  I hoped to use these observations to study the polarization of Cygnus A. This is the reason why the first day was devoted to a full track observation of 3C286. However, I have not been able to obtain a satisfactory polarization calibration. It is difficult to detect the polarized signature in the cross-hands due to the large leakages and low SNR. Moreover, the changes in the relative amplitudes of the parallel-hands do not seem so consistent between different baselines, for some unknown reason.\n I have even been following the  CASA tutorial for polarimetric imaging of 3C286 with ALMA (since ALMA also uses a linear polarization basis, unlike the VLA), trying to improve my techniques. However, after trying to do something with the data for a while, I think that it is not good enough, and better data needs to be gathered.\n  The code used in this post for correlation and phasing is the usual GNU Radio FX software correlator pipeline from the  ata_interferometry repository. The calibration and imaging in CASA was done with  this script.\n The data has been published as the dataset \u201c Cygnus A 8.45 GHz interferometric observation with Allen Telescope Array\u201d in  Zenodo.", "posttime": "2021-08-09 03:57:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "cygnus,imaging", "title": "\u4f7f\u7528 ATA \u4ee5 8.45 GHz \u5bf9 Cygnus a \u6210\u50cf", "title_en": "Imaging Cygnus a at 8.45 GHz with ATA", "transed": 1, "url": "https://destevez.net/2021/08/imaging-cygnus-a-at-8-45-ghz-with-ata/", "via": "", "real_tags": ["cygnus", "imaging"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072174, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5728\u5de5\u4f5c\u4e2d\u5e7f\u53d7\u8d5e\u8a89\uff0c\u56e0\u4e3a\u6211\u80fd\u591f\u6253\u5f00\u8bb8\u591a\u6d4f\u89c8\u5668\u9009\u9879\u5361\u3002 \uff08\u81f3\u5c11\uff0c\u8fd9\u662f\u6211\u4ece\u201c\u5929\u54ea\uff0c\u4f19\u8ba1\uff0c\u770b\u770b\u4f60\u7684\u6d4f\u89c8\u5668\uff01\u201d\u7684\u9891\u7e41\u547c\u558a\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\uff09\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4e00\u76f4\u8ba4\u4e3a\u503c\u5f97\u8ba9\u6211\u7684\u6807\u7b7e\u603b\u6570\u5012\u8ba1\u65f6\u3002\u51fa\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6211\u6253\u5f00\u4e86\u6807\u7b7e\u3002\u6211\u6b63\u5728\u5904\u7406\u4f46\u5e94\u8be5\u5728\u67d0\u4e2a\u65f6\u5019\u5b8c\u6210\u7684\u4e8b\u60c5 \u8fd9\u91cc\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4e00\u65e6\u9009\u9879\u5361\u7684\u6570\u91cf\u8db3\u591f\u5927\uff0c\u201c\u6e05\u7406 uptabs\u201d\u5c31\u4f1a\u4ece\u201c\u627e\u51fa\u54ea\u4e2a\u9009\u9879\u5361\u662f\u54ea\u79cd\u9009\u9879\u5361\u201d\u7684\u6574\u4e2a\u6b65\u9aa4\u5f00\u59cb. \u6211\u53ef\u4ee5\u5173\u95ed\u5b83\uff0c\u56e0\u4e3a\u6211\u5df2\u7ecf\u5b8c\u6210\u4e86\u5417\uff1f\u8fd9\u662f\u6211\u5e94\u8be5\u9605\u8bfb\u7684\u4e1c\u897f\u5417\uff1f\u5f88\u5feb\uff1f\u603b\u6709\u4e00\u5929\uff1f\u6211\u9700\u8981\u6539\u8fdb\u6211\u7684\u5b9e\u65f6\u4e60\u60ef\uff1a\u5b8c\u6210\u540e\u5173\u95ed\u4e8b\u60c5\uff0c\u6309\u76ee\u7684\u5c06\u4e8b\u60c5\u5206\u7ec4\u7b49\u7b49\u3002\u4e0d\u8fc7\uff0c\u5728\u90a3\u4e4b\u524d\uff0c\u6211\u9700\u8981\u770b\u770b\u6211\u4ec0\u4e48\u65f6\u5019\u8ba9\u4e8b\u60c5\u5931\u63a7\u4e86\u3002\u591a\u5e74\u6765\uff0c\u6211\u4e00\u76f4\u8ba4\u4e3a\uff0c\u201c\u6211\u5e94\u8be5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u53ef\u89c6\u5316\u6211\u7684\u6807\u7b7e\u8ba1\u6570\u3002\u201d\u6709\u4e00\u6b21\u6211\u4ec0\u81f3\u5199\u4e86\u4e00\u4e9b\u7a0b\u5e8f\u6765\u63d0\u4f9b\u5e2e\u52a9\uff0c\u4f46\u5927\u7ea6\u4e00\u5468\u524d\u6211\u7ec8\u4e8e\u5b8c\u6210\u4e86\u6574\u4e2a\u4e8b\u60c5\u3002\u5f53\u6211\u53d1\u63a8\u6587\u65f6\uff0c\u6211\u6536\u5230\u4e86\u4e00\u4e9b\u201c\u4f60\u662f\u600e\u4e48\u505a\u5230\u7684\uff1f\u201d\uff0c\u6240\u4ee5\u6211\u60f3\u6211\u4f1a\u5199\u4e0b\u6765\u3002\u8fd9\u5f88\u7b80\u5355\uff0c\u9664\u4e86\u6709\u70b9\u4e0d\u3002\u5982\u679c\u4f60\u770b\u4e0d\u51fa\u6765\uff0c\u8fd9\u5f20\u56fe\u662f\u7531 Grafana \u751f\u6210\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u6570\u636e\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u53ef\u4ee5\u751f\u6210\u5404\u79cd\u7cfb\u7edf\u6570\u636e\u7684\u56fe\u8868\u548c\u8bb8\u591a\u5176\u4ed6\u53ef\u89c6\u5316\u3002\u6240\u4ee5\uff0c\u6211\u9700\u8981\u8bbe\u7f6e Grafana\u3002\u8fd9\u5f88\u7b80\u5355\uff0c\u6211\u4f7f\u7528\u4e86\u4ed6\u4eec\u7684\u514d\u8d39\u4e91\u6258\u7ba1\uff0c\u4f46\u5728 Linode \u4e0a\u8bbe\u7f6e Grafana \u4e5f\u975e\u5e38\u7b80\u5355\u3002\u57fa\u672c\u4e0a\uff0c\u60a8\u5b89\u88c5\u5e76\u544a\u8bc9\u5b83\u4ece\u54ea\u91cc\u83b7\u53d6\u6570\u636e\u3002\u6709\u5f88\u591a Grafanatutorials\u3002\u6211\u7684 Grafana \u6307\u5411 Prometheus\u3002 Prometheus \u662f\u4e00\u4e2a\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e93\uff0c\u5b83\u901a\u8fc7\u70b9\u51fb HTTP \u7aef\u70b9\u6765\u6536\u96c6\u6570\u636e\u3002\u4e3a\u4e86\u5f7b\u5e95\u7b80\u5316\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u5e94\u7528\u7a0b\u5e8f\u516c\u5f00\u8981\u6536\u96c6\u7684\u6307\u6807\u5e76\u5728\u4ee5\u540e\u8fdb\u884c\u5206\u6790\uff0c\u60a8\u53ef\u4ee5\u4e3a\u5176\u63d0\u4f9b HTTP \u4fa6\u542c\u5668\uff0c\u8be5\u4fa6\u542c\u5668\u4ee5\u7279\u5b9a\u683c\u5f0f\u56de\u590d\u6570\u636e\u3002\u6709\u5f88\u591a Prometheustutorials\u3002\u6211\u9700\u8981\u505a\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u63d0\u4f9b tabcounts \u7684 HTTP \u670d\u52a1\u3002\u6211\u9009\u62e9\u4e86\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u63d0\u4f9b\u8be5\u8ba1\u6570\uff0c\u610f\u601d\u662f\u8fd9\u6837\u7684\u54cd\u5e94\uff1a\n\u51e0\u5e74\u524d\uff0c\u5f53\u6211\u6700\u521d\u8003\u8651\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4f7f\u7528\u7684\u662f Firefox\u3002\u6211\u503e\u5411\u4e8e\u6bcf\u9694\u51e0\u5e74\u5728 Chrome \u548c Firefox \u4e4b\u95f4\u6765\u56de\u5207\u6362\u3002\u5728 Firefox \u4e2d\uff0c\u83b7\u53d6\u6807\u7b7e\u8ba1\u6570\u975e\u5e38\u5bb9\u6613\u3002\u5728\u914d\u7f6e\u6587\u4ef6\u76ee\u5f55\u4e2d\uff0c\u6709\u4e00\u4e2a\u540d\u4e3a sessionstore-backups/recovery.jsonlz4 \u4e4b\u7c7b\u7684\u6587\u4ef6\u3002\u5b83\u7684\u786e\u5207\u4f4d\u7f6e\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u6539\u53d8\uff0c\u4f46\u901a\u5e38\u5728\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u6709\u4e00\u4e2a JSON \u6587\u4ef6\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb\u8be5\u6587\u4ef6\u4ee5\u67e5\u770b\u9009\u9879\u5361\u3002 Chrome \u4ee5\u4e00\u79cd\u770b\u4f3c\u4ee4\u4eba\u8ba8\u538c\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\u5b58\u50a8\u5176\u4f1a\u8bdd\uff0c\u79f0\u4e3a SSNS\u3002\u6211\u770b\u7740\u51b3\u5b9a\u5e76\u547b\u541f\u7740\u3002\u6211\u77e5\u9053\u6211\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u6d4f\u89c8\u5668\u6269\u5c55\u7a0b\u5e8f\u6765\u83b7\u53d6\u6807\u7b7e\u8ba1\u6570\uff0c\u4f46\u6211\u5bf9\u4e24\u4ef6\u4e8b\u6709\u4e00\u79cd\u6a21\u7cca\u7684\u4e0d\u5b89\u611f\u3002\u9996\u5148\uff0c\u6211\u4e0d\u786e\u5b9a\u6211\u662f\u5426\u6709\u529e\u6cd5\u5728 Chrome \u4e2d\u5d4c\u5165\u7f51\u7edc\u670d\u52a1\u5668\u6765\u63d0\u4f9b\u8fd9\u4e9b\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u6211\u60f3\u5c06\u6570\u636e\u5199\u5165\u6587\u4ef6\u4ee5\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u4f5c\u4e3a\u670d\u52a1\u5668\u3002\u8fd9\u5f15\u8d77\u4e86\u6211\u7684\u7b2c\u4e8c\u4e2a\u62c5\u5fe7\uff1a\u6211\u6000\u7591\u6211\u662f\u5426\u80fd\u591f\u53ef\u9760\u5730\u5c06\u9009\u9879\u5361\u8ba1\u6570\u4ece\u6269\u5c55\u5199\u5165\u6587\u4ef6\u3002\u4e0d\u8fc7\uff0c\u6211\u6709\u4e00\u4e2a\u95ea\u73b0\u7684\u7075\u611f\u3002\u5982\u679c\u51fa\u4e8e\u67d0\u79cd\u4ec1\u6148\uff0cChrome \u53ef\u4ee5\u901a\u8fc7 AppleScript \u5b9e\u73b0\u81ea\u52a8\u5316\uff0c\u6211\u53ef\u4ee5\u8bd5\u4e00\u8bd5\u3002\u6211\u6253\u5f00\u4e86 macOSScript \u7f16\u8f91\u5668\uff0c\u6309 Cmd-Shift-O \u5230\u201c\u6253\u5f00\u5b57\u5178\u201d\uff0c\u7136\u540e\u5bfb\u627e GoogleChrome\u3002\u5b83\u5728\u90a3\u91cc\uff01\u5b83\u7684\u81ea\u52a8\u5316\u5957\u4ef6\u5f88\u5c0f\uff0c\u4f46\u5b83\u66b4\u9732\u4e86\u7a97\u53e3\u548c\u9009\u9879\u5361\u3002\u6211\u80fd\u591f\u7f16\u5199\u8fd9\u4e2a AppleScript\uff1a\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u201cGoogle Chrome\u201d\u6b63\u5728\u8fd0\u884c\uff0c\u5219\u5c06 tabcount \u8bbe\u7f6e\u4e3a 0\uff0c\u7136\u540e\u544a\u8bc9\u5e94\u7528\u7a0b\u5e8f\u201cGoogle Chrome\u201d\u5728 Windows \u4e2d\u91cd\u590d w \u5c06 tabcount \u8bbe\u7f6e\u4e3a tabcount +\uff08w \u7684\u6807\u7b7e\u8ba1\u6570\uff09 end repeat end tellend \u5982\u679c AppleScript \u662f\u5f88\u5947\u602a\uff0c\u4f46\u6211\u8fc7\u53bb\u5728\u5c06\u5b83\u7528\u4e8e\u8bb8\u591a\u5c0f\u4efb\u52a1\u65b9\u9762\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6210\u529f\u3002\u73b0\u5728\uff0c\u6211\u503e\u5411\u4e8e\u505a\u7684\u662f\u8bc1\u660e\u67d0\u4e9b\u4e1c\u897f\u53ef\u4ee5\u5728 AppleScript \u4e2d\u5de5\u4f5c\uff0c\u7136\u540e\u4f7f\u7528 JXA \u5c06\u5176\u79fb\u690d\u5230 JavaScript\u3002 JXA \u662f\u201c\u7528\u4e8e\u81ea\u52a8\u5316\u7684 JavaScript\u201d\uff0c\u5b83\u53ea\u662f\u201c\u5982\u679c\u4f60\u53ef\u4ee5\u7f16\u5199 JavaScript \u800c\u4e0d\u662f AppleScript \u6765\u505a\u540c\u6837\u7684\u4e8b\u60c5\u4f1a\u600e\u6837\uff1f\u201d\u8fd9\u975e\u5e38\u5438\u5f15\u4eba\uff01JavaScript \u662f\u4e00\u79cd\u4e0d\u90a3\u4e48\u5947\u602a\u7684\u8bed\u8a00\uff0c\u60a8\u53ef\u4ee5\u5c06 macOS \u81ea\u52a8\u5316\u4e0e\u60a8\u7528 JavaScript \u7f16\u5199\u7684\u5176\u4ed6\u4ee3\u7801\u7ed3\u5408\u8d77\u6765\u3002\u4e0d\u8fc7\uff0c\u5b83\u5e76\u4e0d\u5b8c\u7f8e\u3002\u7528\u6765\u8868\u793a AppleScriptableentities \u7684\u5bf9\u8c61\u975e\u5e38\u7b28\u62d9\u3002\u4ed6\u4eec\u4e0d\u8ba9\u4f60\u5f97\u5230\u4ed6\u4eec\u7684\u5c5e\u6027\u5217\u8868\uff0c\u5982\u679c\u4f60\u731c\u6d4b\uff0c\u5b83\u4e0d\u4f1a\u6709\u592a\u5927\u5e2e\u52a9\u3002 object.foo \u5c06\u59cb\u7ec8\u5bf9\u51fd\u6570\u6c42\u503c\uff0c\u4f46\u8be5\u51fd\u6570\u5728\u8c03\u7528\u65f6\u53ef\u80fd\u4f1a\u629b\u51fa\u201c\u65e0\u6b64\u7c7b\u51fd\u6570\u201d\u5f02\u5e38\u3002\u7c7b\u6570\u7ec4\u5bf9\u8c61\u4e0d\u53ef\u8fed\u4ee3\uff0c\u56e0\u6b64\u60a8\u5c06\u6267\u884c\u5927\u91cf\u5faa\u73af\u7d22\u5f15\u800c\u4e0d\u662f\u8fed\u4ee3\u503c\u3002\u4e0d\u8fc7\uff0c\u8fd9\u8fd8\u4e0d\u9519\uff1a let tabcount = 0;const Chrome = new Application(&quot;Google Chrome&quot;);if (Chrome.running()) { for (i in Chrome.windows) { tabcount += Chrome.windows [i].tabs.length; }}\n\u201c\u68c0\u67e5 Chrome \u662f\u5426\u6b63\u5728\u8fd0\u884c\u201d\u8fd9\u4e00\u6b65\u5f88\u91cd\u8981\u3002\u4e00\u65b9\u9762\uff0c\u8868\u73b0\u5f97\u597d\u50cf\u9000\u51fa Chrome \u5e76\u6ca1\u6709\u771f\u6b63\u6d88\u9664\u5176\u6807\u7b7e\u7684\u5fc3\u7406\u8d1f\u62c5\u4e00\u6837\u597d\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4f7f\u7528 AppleScript \u4e0e\u672a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8bdd\u5c06\u542f\u52a8\u8be5\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u80af\u5b9a\u4e0d\u5e0c\u671b\u90a3\u6837\u3002\u73b0\u5728\u6211\u6709\u4e86\u8ba1\u7b97\u6807\u7b7e\u7684\u65b9\u6cd5\u3002\u6211\u5b9e\u9645\u7f16\u5199\u7684\u4ee3\u7801\u6709\u70b9\u4e0d\u540c\uff0c\u56e0\u4e3a\u6211\u6536\u96c6\u4e86\u6bcf\u4e2a\u7a97\u53e3\u9009\u9879\u5361\u8ba1\u6570\u7684\u6570\u7ec4\uff0c\u4ee5\u9632\u4e07\u4e00\u6211\u4e5f\u60f3\u7ed8\u5236\u5b83\uff0c\u4f46\u5b83\u5f88\u50cf\u4e0a\u9762\u7684\u4ee3\u7801\u3002\u73b0\u5728\u6211\u9700\u8981\u8ba9\u5b83\u5b9a\u671f\u8fd0\u884c\u3002\u6700\u660e\u663e\u7684\u9009\u62e9\u662f\u8ba9\u5b83\u5728 macOS \u670d\u52a1\u7ba1\u7406\u5668 launchd \u4e0b\u8fd0\u884c\u3002\u8fd9\u5c06\u662f\u975e\u5e38\u660e\u667a\u7684\uff0c\u4f46\u9700\u8981\u6211\u8003\u8651launchdconfiguration\uff0c\u6211\u4e0d\u559c\u6b22\u8fd9\u6837\u505a\u3002\u6211\u60f3\u8fc7\u8bbe\u7f6e daemontools \u6765\u8fd0\u884c\u6211\u7684\u4e3b\u76ee\u5f55\u4e4b\u5916\u7684\u4e1c\u897f\u3002\u6211\u5fc5\u987b\u4ecelaunchd\u8fd0\u884c\u5b83\uff0c\u4f46\u662f\u4e00\u65e6\u8bbe\u7f6e\u4e86\u5b83\uff0c\u6211\u5c31\u4e0d\u5fc5\u518d\u8003\u8651\u5b83\u4e86\u3002\u6211\u4ec0\u81f3\u4e0d\u60f3\u8003\u8651\u4e00\u6b21\uff0c\u60f3\uff01\u6211\u6709\u53e6\u4e00\u4e2a\u5947\u602a\u7684\u8ba4\u8bc6\u3002\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a\u540d\u4e3a Hammerspoon \u7684\u7a0b\u5e8f\uff0c\u5b83\u662f\u4e00\u79cd\u7528\u4e8e\u6267\u884c macOS \u81ea\u52a8\u5316\u7684\u901a\u7528\u5de5\u5177\u3002\u6211\u7528\u5b83\u6765\u6ce8\u5165\u4e00\u4e9b\u83dc\u5355\u680f\u56fe\u6807\u6765\u91cd\u65b0\u7ec4\u7ec7\u6211\u7684\u684c\u9762\u6216\u8fd0\u884c\u8ba1\u65f6\u5668\uff0c\u5e76\u4e3a\u4e00\u4e9b\u4e1c\u897f\u8bbe\u7f6e\u952e\u76d8\u5feb\u6377\u952e\u3002\u5728\u5b83\u7684\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u4e2d\uff0c\u5b83\u5177\u6709\u7528\u4e8e\u5d4c\u5165\u5f0f HTTP \u670d\u52a1\u7684\u8bbe\u65bd\u3002\u5b83\u8fd8\u53ef\u4ee5\u4f7f\u7528 JXA \u8fd0\u884c JavaScript\u3002\u6211\u5199\u4e86\u8fd9\u4e2a\uff1a tabulator = hs.httpserver.new()tabulator:setPort(9876)tabulator:setCallback(function (method, path, headers, body) if (method == &quot;GET&quot;) and (path == &quot;/metrics &quot;) then bool, tabcounts, descriptor = hs.osascript.javascript([[ const Chrome = new Application(&quot;/Applications/Google Chrome.app&quot;); let tabCounts = []; if (Chrome.running()) { for (i \u5728 Chrome.windows \u4e2d) { tabCounts.push(Chrome.windows[i].tabs.length); } tabCounts.sort((a,b) =&gt; b - a); } tabCounts; ]]) \u5982\u679c\u4e0d\u662f bool\u7136\u540e\u8fd4\u56de &quot;Error\\n&quot;, 500, {} end local sum = 0 for i, tabs in ipairs(tabcounts) do sum = sum + tabs end return &quot;chrome_open_tabs &quot; .. sum .. &quot;\\n&quot;, 200, { } else return &quot;No good.\\n&quot;, 404, {} endend)tabulator:start() \u8fd9\u4f1a\u5728\u7aef\u53e3 9876 \u4e0a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 HTTP \u4fa6\u542c\u5668\u3002\u5982\u679c\u5b83\u6536\u5230 /metrics \u7684 GET \u8bf7\u6c42\uff0c\u5b83\u4f1a\u8fd0\u884c\u6211\u7684 JXA \u6765\u8be2\u95ee Chrome\uff08\u5982\u679c\u8fd0\u884c\uff09\u5173\u4e8e\u5b83\u7684\u6807\u7b7e\u8ba1\u6570\u3002 hs.osascript.javascript \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u7b2c\u4e8c\u9879 init \u662f JavaScript \u4ee3\u7801\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\uff0c\u6211\u4eec\u5df2\u7ecf\u7ed3\u675f\u4e86\u673a\u667ah tabCounts\u3002\u5982\u679c\u4ee3\u7801\u8fd0\u884c\u6ca1\u6709\u9519\u8bef\uff0c\u6211\u4f1a\u5728 200 \u54cd\u5e94\u4e2d\u8fd4\u56de\u6211\u7684\u6307\u6807\u3002\u4e3a\u4e86\u5728\u672c\u5730\u6536\u96c6\u8fd9\u4e9b\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u8ba9\u4e92\u8054\u7f51\u4e0a\u7684\u4efb\u4f55\u4eba\u90fd\u89e6\u53d1\u6b64 JavaScript \u8fd0\u884c\uff0c\u6211\u5728 MacBook \u4e0a\u6709\u4e00\u4e2a\u672c\u5730\u8fd0\u884c\u7684 Prometheus \u5b9e\u4f8b\u3002\u5b83\u547d\u4e2d\u8fd9\u4e2a\u7aef\u70b9\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4e2d\u7ee7\u5230\u6211\u5728\u4e91\u4e2d\u7684 Prometheus \u5b9e\u4f8b\u3002 Grafana \u770b\u7740\u5b83\uff0c\u5411\u6211\u5c55\u793a\u4e86\u6211\u7684\u6807\u7b7e\u8ba1\u6570\u3002\u5f53\u5b83\u5728\u7ea2\u8272\u65f6\uff0c\u6211\u53f9\u4e86\u53e3\u6c14\uff0c\u7ffb\u9605\u6211\u7684\u6807\u7b7e\uff0c\u5c3d\u6211\u6240\u80fd\u5173\u95ed\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u6211\u7684\u6807\u7b7e\u8ba1\u6570\u5d29\u6e83\u4e86\u51e0\u6b21\u3002\u9996\u5148\uff0c\u6211\u5173\u95ed\u4e86\u660e\u663e\u7684\u91cd\u590d\u6216\u6b7b\u6587\u4ef6\u3002\u540e\u6765\uff0c\u6211\u5b8c\u6210\u4e86\u4ee5 opentabs \u4e3a\u4ee3\u8868\u7684\u7b80\u5355\u4efb\u52a1\u3002\u5468\u672b\uff0c\u6211\u9605\u8bfb\u4e86\u5f88\u591a\u79ef\u538b\u7684\u6587\u7ae0\u5e76\u5173\u95ed\u4e86\u5b83\u4eec\u3002\u73b0\u5728\u6211\u5927\u7ea6\u6709 30 \u4e2a\u6807\u7b7e\uff0c\u8fd9\u5bf9\u6211\u6765\u8bf4\u53ef\u80fd\u662f\u6b63\u786e\u7684\u6570\u5b57\u3002\n\u6211\u6253\u7b97\u6784\u5efa\u5b83\u6765\u5e2e\u52a9\u6211\u66f4\u597d\u5730\u5728 Prometheus \u548c Grafana \u4e2d\u505a\u4e8b\u60c5\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u4e3b\u8981\u662f\u4e00\u79cd\u6709\u8da3\u7684\u5947\u602a\u7684\u901a\u7528\u7f16\u7a0b\uff0c\u6211\u5f88\u559c\u6b22\u5b83\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u63d0\u9192\uff0c\u8bb8\u591a\u4e4f\u5473\u7684\u95ee\u9898\u90fd\u6709\u611a\u8822\u7684\u89e3\u51b3\u65b9\u6848\u3002", "note_en": "I am widely admired at work for my ability to have many, many browser tabsopen. (That, at least, is what I take from the frequent shouts of &#34;holy cow,man, look at your browser!&#34;) Nonetheless, I have long thought that it would beworth getting my total tab count down. I have tabs open for a bunch ofreasons.\n thing I am in the middle of working on but should finish at some point\n One problem here is that once the count of tabs is large enough, &#34;clean uptabs&#34; starts with a whole step of &#34;figure out which tab is what kind of tab&#34;.Can I just close it because I&#39;m done? Is it a thing I should read? Soon?Someday? I need to improve my real time habits: closing things when done,grouping things by purpose, and so on. Until then, though, I need to see whenI&#39;ve let things get out of control.\n For years, I&#39;ve thought, &#34;I should visualize my tab count over time.&#34; Once ortwice I even wrote programs to help, but about a week ago I finally made thewhole thing go. When I Tweeted about it, I got a couple &#34;how&#39;d you do thats?&#34;,so I thought I&#39;d write it up. It&#39;s simple, except sort of not.\n   If you can&#39;t tell, this graph is generated by Grafana, a data visualizer that canproduce graphs and many other visualizations of data from all kinds of systems.So, I needed to set up Grafana. That was easy, I used their free cloudhosting, but setting up Grafana on a Linode is also dead simple. Basically,you install and tell it where to get the data. There are a lot of Grafanatutorials.\n I have my Grafana pointed at Prometheus. Prometheus is a  time seriesdatabase that gathers databy hitting HTTP endpoints. To grossly simplify, if you want your applicationto expose metrics to be gathered and later analyzed, you give it HTTP listenerthat replies with data in a specific format. There are a lot of Prometheustutorials.\n What I needed to do was to provide an HTTP service that would provide tabcounts. I picked the simplest possible way to provide that count, meaning aresponse like this:\n   When I originally looked at doing this, years ago, I was using Firefox. I tendto switch back and forth between Chrome and Firefox every few years. InFirefox, it was pretty easy to get tab counts. In the profile directory,there&#39;s a file called something like  sessionstore-backups/recovery.jsonlz4.The exact place this lives has changed over time, but generally there has beena JSON file in your profile that you could read to see tabs.\n Chrome stores its sessions in a seemingly obnoxious binary format called SSNS.I looked at deciding it and groaned. I knew I could write a browser extensionto get at the tab counts, but I had a vague sense of unease about two things.First, I wasn&#39;t sure I&#39;d have any means to embed a web server in Chrome toserve this data. That meant I&#39;d want to write the data to a file to be serverby something else. That gets to my second concern: I doubted I&#39;d be able toreliably write the tab count to a file from an extension.\n I had a flash of inspiration, though. If, by some great mercy, Chrome wasautomatable by AppleScript, I could make a go of it. I opened up the macOSScript Editor, hit Cmd-Shift-O to &#34;Open Dictionary&#34;, and looked for GoogleChrome. It was there! Its automation suite is tiny, but it exposes windowsand tabs. I was able to write this AppleScript:\n set tabcount to 0if application &#34;Google Chrome&#34; is running then tell application &#34;Google Chrome&#34; repeat with w in windows set tabcount to tabcount + (count of tabs of w) end repeat end tellend if\n AppleScript is weird, but I have had decent success in using it for lots oflittle tasks in the past. These days, what I tend to do is prove somethingwill work in AppleScript, then port it to JavaScript, using JXA. JXA is&#34;JavaScript for Automation&#34;, which is just &#34;what if you could write JavaScriptinstead of AppleScript to do the same stuff?&#34; This is pretty appealing!JavaScript is a much less weird language, and you can combine your macOSautomation with other code you&#39;ve written in JavaScript.\n It&#39;s not perfect, though. The objects you get to represent AppleScriptableentities are pretty clumsy. They don&#39;t let you get a list of their properties,and if you make a guess, it won&#39;t help much.  object.foo will always evaluatetoa function, but that function may throw a &#34;no such function&#34; exception whencalled. Array-like objects aren&#39;t iterable, so you&#39;ll do a lot of looping overindexes instead of iterating over value. Still, this isn&#39;t so bad:\n let tabcount = 0;const Chrome = new Application(&#34;Google Chrome&#34;);if (Chrome.running()) { for (i in Chrome.windows) { tabcount += Chrome.windows[i].tabs.length; }}\n That &#34;check if Chrome is running&#34; step is important. On one hand, it would benice to act like quitting Chrome didn&#39;t really eliminate the mental weight ofits tabs. On the other, using AppleScript to talk to an application that isn&#39;trunning will launch that application, and I sure don&#39;t want that.\n  Now I had a means to count tabs. The code I actually wrote was a littledifferent, because I gathered an array of per-window tab counts, in case Iwanted to graph that, too, but it was a lot like code above. Now I needed toget it running regularly. The most obvious option for this was to have it rununder  launchd, the macOS servicemanager. This would be very sensible, but would require I think about launchdconfiguration, which I don&#39;t like doing. I thought about setting up daemontools to run things out ofmy home directory. I&#39;d have to run it from launchd, but having set that uponce, I wouldn&#39;t have to think about it again. I didn&#39;t even want to thinkabout it once, thought!\n I had another weird realization. I use a program called Hammerspoon, which is sort of an all-purposetool for doing macOS automation. I use it to inject some menu bar icons thatreorganize my desktop or run timers, and to set up keyboard shortcuts for a fewthings. Among its many other functions, it has facilities for embedded HTTPservice. It can  also run JavaScript using JXA. I wrote this:\n tabulator = hs.httpserver.new()tabulator:setPort(9876)tabulator:setCallback(function (method, path, headers, body) if (method == &#34;GET&#34;) and (path == &#34;/metrics&#34;) then bool, tabcounts, descriptor = hs.osascript.javascript([[ const Chrome = new Application(&#34;/Applications/Google Chrome.app&#34;); let tabCounts = []; if (Chrome.running()) { for (i in Chrome.windows) { tabCounts.push(Chrome.windows[i].tabs.length); } tabCounts.sort((a,b) =&gt; b - a); } tabCounts; ]]) if not bool then return &#34;Error\\n&#34;, 500, {} end local sum = 0 for i, tabs in ipairs(tabcounts) do sum = sum + tabs end return &#34;chrome_open_tabs &#34; .. sum .. &#34;\\n&#34;, 200, {} else return &#34;No good.\\n&#34;, 404, {} endend)tabulator:start()\n This creates a new HTTP listener on port 9876. If it receives a GET requestfor  /metrics, it runs my JXA to ask Chrome (if running) about its tab count.The  hs.osascript.javascript function returns a tuple, and the second item init is the final statement of the JavaScript code, where we&#39;ve ended with tabCounts. If the code ran without an error, I return my metrics in a 200response.\n To collect this locally and not let just anybody on the internet trigger thisJavaScript running, I have a locally running Prometheus instance on my MacBook.It hits this endpoing and then relays the results to my Prometheus instance inthe cloud. Grafana looks at that and shows me my tab count. When it&#39;s in thered, I sigh, look through my tabs, and close what I can.\n You can see my tab count crashing a few times. First, I closed obviousduplicates or dead documents. Later, I finished easy tasks represented by opentabs. On the weekend, I read a lot of backlogged articles and closed them.Now I&#39;m around 30 tabs, which seems like it&#39;s probably about the right numberfor me.\n I meant to build this to help me get better at doing things in Prometheus andGrafana, but I think mostly it was just sort of fun weird general purposeprogramming, and I enjoyed it. It was a nice reminder that lots of tediousproblems have silly solutions.", "posttime": "2021-08-09 03:57:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d4f\u89c8\u5668,lot,chrome", "title": "\u6211\u5173\u95ed\u4e86\u5f88\u591a\u6d4f\u89c8\u5668\u6807\u7b7e", "title_en": "I closed a lot of browser tabs", "transed": 1, "url": "https://rjbs.manxome.org/rubric/entry/2126", "via": "", "real_tags": ["\u6d4f\u89c8\u5668", "lot", "chrome"]}, {"category": "", "categoryclass": "", "imagename": "e62a4218021729fb5efe58f9e9bb1f2b.png", "infoid": 1072173, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6676\u4f53\u7ba1\u662f\u6211\u4eec\u7535\u5b50\u4ea7\u54c1\u7684\u7ec4\u6210\u90e8\u5206\uff1a\u4ece\u667a\u80fd\u624b\u673a\u5230\u7535\u8111\u3001\u73a9\u5177\u3001\u70f9\u996a\u8bbe\u5907\u3001\u6e05\u6d01\u5de5\u5177\u7b49\u3002\u5c3d\u7ba1\u6676\u4f53\u7ba1\u65e0\u5904\u4e0d\u5728\uff0c\u4f46\u53ea\u6709\u5c11\u6570\u4eba\u77e5\u9053\u5b83\u4eec\u7684\u5de5\u4f5c\u539f\u7406\u3002\u5176\u5b9e\uff0c\u4e86\u89e3\u5b83\u4eec\u7684\u64cd\u4f5c\u539f\u7406\u5e76\u6ca1\u6709\u90a3\u4e48\u96be\u3002\u4e3a\u4e86\u4e86\u89e3\u6676\u4f53\u7ba1\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e8c\u6781\u7ba1\u662f\u4ec0\u4e48\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6676\u4f53\u7ba1\uff0c\u5728\u2026", "note_en": "Transistors are the building blocks of our electronic gadgets: from smartphones to computers, toys, cooking devices, cleaning tools, etc.\n Despite their ubiquity, only a few people know about how they work. In fact, understanding their principles of operation is not so hard.\n  In order to understand how a transistor work, we need to understand what a  diode is. In fact, a transistor, in\u2026", "posttime": "2021-08-09 03:57:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6676\u4f53\u7ba1,transistors", "title": "\u6676\u4f53\u7ba1\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\u50cf\u62bd\u6c34\u9a6c\u6876", "title_en": "How do transistors work? Like a flush toilet", "transed": 1, "url": "https://medium.com/swlh/how-transistors-work-b63358b95180", "via": "", "real_tags": ["\u6676\u4f53\u7ba1"]}, {"category": "", "categoryclass": "", "imagename": "a2b5abdfd496c1019634efb2e46e3542.jpg", "infoid": 1072172, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5e74\u524d\uff0c\u5f53\u661f\u5ea7\u8ba1\u5212\u8fd8\u6d3b\u7740\u7684\u65f6\u5019\uff0c\u7f8e\u56fd\u5b87\u822a\u5c40\u7684\u5de5\u7a0b\u5e08\u53d1\u73b0\u6218\u795e\u4e00\u53f7\u706b\u7bad\u6709\u4e00\u4e2a\u5173\u952e\u7684\u7f3a\u9677\uff0c\u4e00\u4e2a\u53ef\u80fd\u5371\u53ca\u6574\u4e2a\u9879\u76ee\u7684\u7f3a\u9677\u3002\u4ed6\u4eec\u60ca\u614c\u5931\u63aa\u3002\u4ed6\u4eec\u5bc6\u8c0b\u3002\u4ed6\u4eec\u4e3a\u628a\u4e8b\u60c5\u505a\u597d\u9700\u8981\u82b1\u8d39\u6570\u4ebf\u7f8e\u5143\u505a\u597d\u51c6\u5907\u3002\u66fe\u51e0\u4f55\u65f6\uff0c\u4e00\u4f4d\u603b\u7edf\u8ba4\u4e3a\u5c06\u4eba\u7c7b\u201c\u5e26\u5230\u6708\u7403\u548c\u66f4\u8fdc\u7684\u884c\u661f\u201d\u662f\u2026\u2026 \u9605\u8bfb\u66f4\u591a \u7136\u540e\u4ed6\u4eec\u627e\u5230\u4e86\u5982\u4f55\u4ee5\u8d85\u503c\u9910\u8d39\u7684\u65b9\u5f0f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 Ares 1 \u9762\u4e34\u7684\u95ee\u9898\u4e0d\u662f\u52a9\u63a8\u5668\u6545\u969c\u6216\u8ba1\u7b97\u673a\u6545\u969c\u3002\u8fd9\u662f\u7b80\u5355\u7684\u56e0\u679c\u7269\u7406\u5b66\u3002\u5728\u53d1\u5c04\u7684\u6700\u540e\u9636\u6bb5\uff0c\u5f53\u56fa\u4f53\u52a9\u63a8\u706b\u7bad\u71c3\u70e7\u65f6\uff0c\u5b83\u4f1a\u4f7f\u6574\u4e2a\u98de\u884c\u5668\u5feb\u901f\u632f\u8361\u3002\u5c06\u8fd9\u79cd\u632f\u8361\u6dfb\u52a0\u5230\u5206\u9694\u52a9\u63a8\u5668\u548c\u4e58\u5458\u8231\u7684\u5927\u7ba1\u7684\u5171\u632f\u9891\u7387\u4e0a\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u75af\u72c2\u632f\u52a8\u7684\u4e58\u5458\u8231\u3002\u5f53\u4eba\u7c7b\u632f\u52a8\u5230\u8fd9\u79cd\u7a0b\u5ea6\u65f6\uff0c\u4ed6\u4eec\u5c31\u4e0d\u53ef\u80fd\u9605\u8bfb\u6570\u5b57\u663e\u793a\u3002\u5982\u679c\u5b87\u822a\u5458\u4e0d\u4f1a\u9605\u8bfb\uff0c\u4ed6\u4eec\u5c31\u65e0\u6cd5\u5b8c\u6210\u4ed6\u4eec\u7684\u5de5\u4f5c\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u80fd\u5b8c\u6210\u4ed6\u4eec\u7684\u5de5\u4f5c\uff0c\u5c31\u6ca1\u6709\u66f4\u591a\u7684\u4f7f\u547d\u3002\u4e3a\u4e86\u8bc4\u4f30\u95ee\u9898\u7684\u4e25\u91cd\u7a0b\u5ea6\uff0c\u7f8e\u56fd\u5b87\u822a\u5c40\u53ec\u96c6\u4e86\u5176\u4eba\u4e3a\u56e0\u7d20\u90e8\u95e8\u3002\u4ed6\u4eec\u662f\u7814\u7a76\u4eba\u7c7b\u611f\u77e5\u548c\u8868\u73b0\u7684\u4eba\uff0c\u4ece\u975e\u5e38\u57fa\u7840\u7684\u7814\u7a76\u5230\u975e\u5e38\u5e94\u7528\u7684\u7814\u7a76\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u5b8c\u6210\u4e86\u6700\u8fd1\u4e00\u8f6e\u7684\u632f\u52a8\u6d4b\u8bd5\uff1a50 \u5e74\u524d\uff0c\u5bf9\u4e8e Gemini \u9879\u76ee\uff0c\u5f53\u65f6\u663e\u793a\u5668\u662f\u6a21\u62df\u7684\u3001\u84b8\u6c7d\u9a71\u52a8\u7684\u8868\u76d8\u548c\u4eea\u8868\uff0c\u800c\u4e0d\u662f\u4eca\u5929\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u3002\u4e0e\u5176\u4ed6\u4e00\u5207\u4e00\u6837\uff0c\u9a7e\u9a76\u8231\u4ece\u90a3\u65f6\u8d77\u53d1\u751f\u4e86\u5f88\u5927\u53d8\u5316\u3002\u662f\u65f6\u5019\u8fdb\u884c\u4e00\u4e9b\u65b0\u7684\u6d4b\u8bd5\u4e86\u3002\u7b2c\u4e00\u6b65\u662f\u8bbe\u7f6e\u4e00\u628a\u6905\u5b50\uff0c\u8ba9\u5b83\u5b8c\u5168\u4e0a\u4e0b\u632f\u52a8\uff08\u6216\u8005\uff0c\u5982\u679c\u4f60\u50cf\u5b87\u822a\u5458\u4e00\u6837\u4ef0\u5367\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u632f\u52a8\uff09\uff0c\u8fd9\u5c31\u662f\u8fd0\u8f7d\u706b\u7bad\u88ab\u9884\u6d4b\u7684\u6447\u6643\u65b9\u5f0f.\u706b\u7bad\u7684\u632f\u52a8\u9891\u7387\u4e3a 12 \u8d6b\u5179\uff08\u5e73\u5747\u800c\u8a00\uff0c\u4f46\u4f1a\u5728 10 \u8d6b\u5179\u548c 13 \u8d6b\u5179\u4e4b\u95f4\u6ce2\u52a8\uff09\uff0c\u56e0\u6b64\u4ed6\u4eec\u9700\u8981\u80fd\u591f\u51c6\u786e\u8fbe\u5230\u8be5\u8303\u56f4\u7684\u4e1c\u897f\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u9879\u6280\u672f\u5df2\u7ecf\u5b58\u5728\u3002\u76f8\u540c\u7684\u673a\u5236\u4f1a\u5bfc\u81f4\u60a8\u7684\u6905\u5b50\u5728\u6e38\u4e50\u56ed\u7684\u6a21\u62df\u6e38\u4e50\u8bbe\u65bd\u4e2d\u6643\u52a8\uff0c\u4ece\u800c\u6253\u9020\u51fa\u5b8c\u7f8e\u7684\u539f\u578b\u3002\n\u5de5\u7a0b\u5e08\u4eec\u4e5f\u77e5\u9053\u968f\u7740\u6218\u795e\u6211\u7684\u901f\u5ea6\u589e\u52a0\uff0c\u9707\u52a8\u4f1a\u589e\u52a0\u3002\u4ed6\u4eec\u8ba1\u7b97\u51fa\uff0c\u5728\u6700\u540e\u9636\u6bb5\uff0c\u5f53\u5b87\u822a\u5458\u5df2\u7ecf\u627f\u53d7 4 G \u7684\u52a0\u901f\u5ea6\u65f6\uff0c\u4ed6\u4eec\u5c06\u83b7\u5f97\u989d\u5916 0.7 G \u7684\u632f\u52a8\u3002\u968f\u7740 NASA \u5728\u6905\u5b50\u4e0a\u6162\u6162\u52a0\u5927\u6d4b\u8bd5\u529b\u5ea6\uff0c\u4ed6\u4eec\u53d1\u73b0\u5728 0.7 G \u65f6\uff0c\u5373\u4f7f\u662f\u6570\u5b57\u5316\u663e\u793a\u5668\u4e0a\u7684\u6700\u5927\u6570\u5b57\u4e5f\u51e0\u4e4e\u5b8c\u5168\u65e0\u6cd5\u8fa8\u8ba4\u3002\u5236\u5b9a\u4e86\u51cf\u5c11\u632f\u52a8\u7684\u8ba1\u5212\u3002\u5f39\u7c27\u548c\u53cd\u70b9\u706b\u7535\u673a\u3002\u6570\u4ebf\u7f8e\u5143\u6765\u5b9e\u65bd\u3002\u6dfb\u52a0\u4e86\u591a\u5e74\u7684\u5f00\u53d1\u548c\u5b9e\u65bd\u3002\u51e0\u4e4e\u65e0\u6cd5\u514b\u670d\u7684\u632b\u6298\u3002\u7136\u540e\u632f\u52a8\u5b9e\u9a8c\u5ba4\u7684\u4eba\u6709\u4e86\u4e00\u4e2a\u975e\u5e38\u975e\u5e38\u597d\u7684\u4e3b\u610f\uff1a\u901a\u8fc7\u7b80\u5355\u5730\u6839\u636e\u632f\u52a8\u53ca\u65f6\u5bf9\u663e\u793a\u5c4f\u8fdb\u884c\u9891\u95ea\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5f7b\u5e95\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4ed6\u4eec\u53ea\u82b1\u4e86\u51e0\u7f8e\u5143\u4e70\u4e86\u4e00\u4e9b\u7535\u8def\uff0c\u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u5c4f\u5e55\u4e0a\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a 12Hz \u9891\u95ea\u3002\u5b83\u594f\u6548\u4e86\uff01\u53ef\u8bfb\u6027\u5927\u5927\u63d0\u9ad8\uff0c\u4f46\u5e76\u4e0d\u5b8c\u7f8e\u3002\u6905\u5b50\u4ee5 12Hz \u632f\u52a8\uff0c\u5c4f\u5e55\u4ee5 12Hz \u9891\u95ea\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u5b8c\u5168\u540c\u6b65\u3002\u5f53\u7136\uff0c\u6587\u5b57\u66f4\u660e\u663e\uff0c\u4f46\u5b83\u770b\u8d77\u6765\u50cf\u662f\u5728\u56db\u5904\u6e38\u52a8\u3002 NASA \u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002\u6240\u4ee5\u4ed6\u4eec\u6293\u8d77\u51e0\u4e2a\u52a0\u901f\u5ea6\u8ba1\uff0c\u628a\u5b83\u4eec\u56fa\u5b9a\u5728\u6905\u5b50\u4e0a\u3002\u968f\u7740\u632f\u52a8\u548c\u9891\u95ea\u73b0\u5728\u5b8c\u5168\u540c\u6b65\uff0c\u663e\u793a\u53d8\u5f97\u6676\u83b9\u5254\u900f\u3002\u6700\u7ec8\u7684\u6210\u672c\u53ea\u662f\u4ed6\u4eec\u9884\u671f\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u80dc\u5229\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u592a\u7b80\u5355\u800c\u65e0\u6cd5\u5b9e\u9645\u5de5\u4f5c\uff0c\u76f8\u4fe1\u6211\uff0c\u6211\u4e5f\u6709\u540c\u6837\u7684\u611f\u89c9\uff0c\u76f4\u5230\u6211\u6700\u8fd1\u5728\u8bbf\u95ee NASA Ames \u65f6\u4eb2\u773c\u770b\u5230\u4e86\u5b83\u3002\u6211\u7684\u5411\u5bfc\u53ea\u613f\u610f\u5e26\u6211\u5230 0.5 G\uff0c\u4f46\u5373\u4f7f\u6309\u7167\u8fd9\u4e2a\u901f\u5ea6\uff0c\u6700\u5c0f\u7684\u4e00\u5217\u6570\u5b57\u4e5f\u5b8c\u5168\u96be\u4ee5\u8fa8\u8ba4\u3002\u4e00\u65e6\u4ed6\u4eec\u6253\u5f00\u9891\u95ea\uff1f\u6211\u53ef\u4ee5\u5b8c\u7f8e\u5730\u770b\u5230\u5b83\u3002\u6548\u679c\u60ca\u4eba\u3002\u6211\u4eec\u5c3d\u6700\u5927\u52aa\u529b\u901a\u8fc7\u5c06\u76f8\u673a\u653e\u5728\u96ea\u6a47\u4e0a\u6765\u5c55\u793a\u4e4b\u524d/\u4e4b\u540e\uff0c\u4f46\u56fe\u50cf\u7a33\u5b9a\u6027\u5b9e\u5728\u662f\u592a\u597d\u4e86\uff08\u73a9\u5f97\u597d\uff0c\u7d22\u5c3c\u3002\u73a9\u5f97\u597d\uff09\u3002\u4f60\u5fc5\u987b\u76f8\u4fe1\u6211\u7684\u8bdd\u3002\u56e0\u4e3a\u4e86\u89e3\u7cfb\u7edf\u5728\u632f\u52a8\u548c\u611f\u53d7\u5b87\u822a\u5458\u4f53\u9a8c\u5230\u7684\u771f\u5b9e\u7684\u3001\u9762\u90e8\u878d\u5316\u7684 G \u529b\u7684\u540c\u65f6\u662f\u5426\u5de5\u4f5c\u4e5f\u5f88\u91cd\u8981\uff0c\u7f8e\u56fd\u5b87\u822a\u5c40\u7684\u5927\u5927\u8111\u5df2\u5c06\u7c7b\u4f3c\u7684\u9891\u95ea/\u632f\u52a8\u88c5\u7f6e\u96c6\u6210\u5230\u6807\u5fd7\u6027\u7684 G \u529b\u6a21\u62df\u79bb\u5fc3\u673a\u4e2d\u3002\u5982\u679c\u6ca1\u6709\u5404\u79cd\u533b\u5b66\u8bc4\u4f30\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u8ba9\u6211\u9760\u8fd1\u90a3\u4e1c\u897f\u3002\u4e5e\u8ba8\u3001\u8d3f\u8d42\u548c\u6cea\u6d41\u6ee1\u9762\u7684\u8868\u6f14\u88ab\u8bc1\u660e\u662f\u65e0\u6548\u7684\u3002\u4e5f\u8bb8\u6709\u4e00\u5929\u3002 NASA \u6b63\u5728\u7533\u8bf7\u8fd9\u9879\u6280\u672f\u7684\u4e13\u5229\uff0c\u5c3d\u7ba1\u5b83\u89e3\u51b3\u7684\u95ee\u9898\u663e\u7136\u4e0d\u662f NASA \u7279\u6709\u7684\u3002\u76f4\u5347\u673a\u3001\u98de\u673a\u548c\u5feb\u901f\u79fb\u52a8\u7684\u8239\u53ea\u90fd\u6709\u7c7b\u4f3c\u7684\u632f\u52a8\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u5728\u5176\u4ed6\u5730\u65b9\u770b\u5230\u8fd9\u79cd\u60c5\u51b5\u3002\u6211\u53ea\u60f3\u5c06\u6211\u7684\u7535\u89c6\u540c\u6b65\u5230\u6307\u538b\u6309\u6469\u6905\u4e0a\u3002\u6ca1\u6709\u4eba\u6a21\u7cca\u6211\u7684\u78a7\u6602\u4e1d\u3002\n\u56e0\u6b64\uff0c\u867d\u7136\u6218\u795e\u4e00\u53f7\u706b\u7bad\u5df2\u7ecf\u505c\u98de\uff0c\u4f46\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u9879\u7814\u7a76\u5c06\u7ee7\u7eed\u5b58\u5728\u5e76\u5728 NASA \u7684\u4e0b\u4e00\u4e2a\u8fd0\u8f7d\u706b\u7bad\u4e2d\u5b9e\u65bd\u3002\u5f88\u9ad8\u5174\u77e5\u9053\u4e0b\u4e00\u4ee3\u5b87\u822a\u5458\u5c06\u80fd\u591f\u770b\u5230\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\uff0c\u5e76\u4e14\u6ca1\u6709\u82b1\u8d39\u7eb3\u7a0e\u4eba\u6570\u4ebf\u7f8e\u5143\u3002\u597d\u4ea4\u6613\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u4f7f\u7528\u624b\u673a\u6d4b\u8bd5\u7a7a\u6c14\u4e2d\u7684\u6bd2\u7d20\u4f1a\u600e\u6837\uff1f\u5982\u679c\u60a8\u53ef\u4ee5\u76d1\u63a7\u81ea\u5df1\u7684\u5065\u5eb7\u72b6\u51b5\u4f1a\u600e\u6837\u2026\u2026\u9605\u8bfb\u66f4\u591a Space Camp \u5b8c\u5168\u662f\u5173\u4e8e NASA \u672a\u5145\u5206\u63a2\u7d22\u7684\u4e00\u9762\u3002\u4ece\u673a\u5668\u4eba\u5230\u533b\u5b66\uff0c\u4ece\u6df1\u7a7a\u671b\u8fdc\u955c\u5230\u827a\u672f\u3002\u5728\u8fd9\u51e0\u5468\u5185\uff0c\u6211\u4eec\u5c06\u76f4\u63a5\u4ece NASA JPL \u548c NASA Ames \u5411\u60a8\u8d70\u6765\uff0c\u5411\u60a8\u5c55\u793a\u8fd9\u4e2a\u795e\u5947\u7684\u4e16\u754c\u3002\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u5173\u6ce8\u6574\u4e2a\u7cfb\u5217\u3002\u7279\u522b\u611f\u8c22 Mark Rober\u3001Jessica Culler\u3001Dan Goods\u3001Val Bunnell \u4ee5\u53ca NASA JPL \u548c NASA Ames \u7684\u6bcf\u4e2a\u4eba\u8ba9\u8fd9\u4e00\u5207\u6210\u4e3a\u73b0\u5b9e\u3002\u611f\u8c22\u540d\u5355\u5c06\u5360\u636e\u6570\u9875\uff0c\u4f46\u4e3a\u4e86\u8ba9\u6211\u4eec\u8bbf\u95ee\uff0c\u5e76\u4e3a\u4ed6\u4eec\u5982\u6b64\u6177\u6168\u7684\u65f6\u95f4\uff0c\u6211\u4eec\u975e\u5e38\u611f\u8c22\u90a3\u91cc\u7684\u6bcf\u4e2a\u4eba\u3002 Space Camp\u00ae \u662f\u7f8e\u56fd\u592a\u7a7a\u4e0e\u706b\u7bad\u4e2d\u5fc3\u7684\u6ce8\u518c\u5546\u6807/\u670d\u52a1\u3002\u672c\u6587\u53ca\u540e\u7eed\u5e16\u5b50\u672a\u7ecf\u7f8e\u56fd\u592a\u7a7a\u4e0e\u706b\u7bad\u4e2d\u5fc3\u6216\u592a\u7a7a\u8425\u00ae \u64b0\u5199\u6216\u8ba4\u53ef\u3002\u8981\u8bbf\u95ee\u5b98\u65b9\u592a\u7a7a\u8425\u7f51\u7ad9\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\u3002", "note_en": "A few years ago, back when the   Constellation Program was still alive, NASA engineers discovered that the Ares I rocket had a crucial flaw, one that could have jeopardized the entire project. They panicked. They plotted. They steeled themselves for the hundreds of millions of dollars it was going to take to make things right.\n  Once upon a time, a President thought that taking humans &#34;to the Moon and the planets beyond&#34; was\u2026\n Read more\n And then they found out how to fix it for the cost of an extra value meal.\n The problem facing Ares 1 wasn&#39;t a booster malfunction or a computer glitch. It was simple cause-and-effect physics. During the final stages of a launch, as the solid booster rocket burns down it makes the entire vehicle oscillate rapidly. Add that oscillation to the resonant frequency of the large tube that separates the booster and the crew cabin, and you get a crew capsule that vibrates like crazy. When humans are vibrating to that extent, it&#39;s impossible for them to read a digital display. If the astronauts can&#39;t read, they can&#39;t do their jobs. If they can&#39;t do their jobs, no more mission.\n     To evaluate the extent of the problem, NASA called in its Human Factors Division. They&#39;re the ones who study human perception and performance, from very basic research to very applied research. In fact, they were the ones who had done the most recent round of vibration tests: 50 years ago, for the Gemini project, back when displays were analog, steam-actuated dials and gauges instead of the computer screens of today. Cockpits, like everything else, have changed a lot since those days. It was time for some new tests.\n  Step one was to set up a chair so it would vibrate purely in an up-down motion (or in-out, if you&#39;re lying on your back like an astronaut would be), which is how the launch vehicle was predicted to shake. The vibrational frequency of the rocket would be 12 hertz (on average, but it would fluctuate between 10Hz and 13Hz) so they needed something that could hit that range exactly. Luckily, that technology already existed; the same mechanism that causes your chair to shake in simulation rides at amusement park made for a perfect prototype.\n  The engineers also knew that as Ares I gained speed the shake would increase. They calculated that toward the final stage, when astronauts would be already subjected to 4 G&#39;s of acceleration, they would be getting an additional 0.7 G&#39;s of vibration. As NASA slowly ramped up testing in the chair, they discovered that at 0.7 G&#39;s even the largest numbers on the digitized display were almost entirely illegible.\n  Plans were drawn up to reduce the vibrations. Spring and counter-firing motors. Hundreds of millions of dollars to implement. Added years of development and implementation. A nearly insurmountable setback.\n  And then the people in the Vibration Lab had a really, really good idea: By simply strobing the display in time with the vibration, they could kill this problem altogether. They bought a handful of circuits that only cost a few bucks, hooked them up to the screen, and set it to strobe at 12Hz. And it worked!\n  The readability was vastly improved, but it wasn&#39;t perfect. The chair was vibrating at 12Hz and the screen was strobing at 12Hz, but they weren&#39;t perfectly in sync. The text was more visible, sure, but it looked like it was swimming around. NASA could do better. So they grabbed a few accelerometers and attached them to the chair. With the vibration and the strobing now perfectly in sync, the display became crystal clear. And the final cost was a fraction of a fraction of a fraction of what they&#39;d anticipated. Victory.\n  If it sounds too simple to actually work, believe me, I felt the same way until I saw it with my own eyes during a recent visit to NASA Ames. My guides were only willing to take me up to 0.5 G&#39;s, but even at that rate the smallest column of numbers was completely illegible. As soon as they flipped on strobing? I could see it perfectly. The effect was stunning. We did our best to show the before/after by putting our camera on the sled, but the image-stabilization was just too damn good (well played, Sony. Well played). You&#39;ll have to take my word for it.\n Because it was also important to know if the system worked while vibrating and feeling the real, face-melting G-forces that astronauts experience, NASA&#39;s big brains have incorporated a similar strobing/vibrating rig into the iconic G-force simulation centrifuge. They wouldn&#39;t let me anywhere near that thing without all kinds of medical evaluations. Begging, bribery, and tearful theatrics proved ineffective. Maybe someday.\n  NASA has a patent pending on the technology, although the problems it solves are decidedly not NASA-specific; helicopters, planes, and fast-moving boats have similar vibrational issues, so it&#39;s very possible we&#39;ll see this implemented elsewhere. I just want to sync my TV up to a shiatsu massage chair. Nobody blurs my Beyonce.\n So while the the Ares I rocket has been   grounded, there&#39;s no question this research will live on and be implemented in NASA&#39;s next launch vehicle. It&#39;s nice to know that the next generation of astronauts will be able to see what they&#39;re doing, and that it didn&#39;t cost the tax-payers hundreds of millions of dollars. Good deal.\n   What if you could use your phone to test the air for toxins? What if you could monitor your health\u2026\n Read more\n   Space Camp  is all about the under-explored side of NASA. From robotics to medicine to deep-space telescopes to art. For these couple of weeks we&#39;ll be coming at you direct from NASA JPL and NASA Ames, shedding a light on this amazing world. You can follow the whole series    here .\n   Special thanks to Mark Rober, Jessica Culler, Dan Goods, Val Bunnell, and everybody at NASA JPL and NASA Ames for making this happen. The list of thank yous would take up pages, but for giving us access, and for being so generous with their time, we are extremely grateful to everyone there.\n  Space Camp\u00ae is a registered trademark/service of the U.S. Space &amp; Rocket Center. This article and subsequent postings have not been written or endorsed by the U.S. Space &amp; Rocket Center or Space Camp\u00ae. To visit the official space camp website, click   here.", "posttime": "2021-08-09 03:56:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "nasa,\u663e\u793a\u5c4f,problem,\u632f\u52a8", "title": "NASA \u901a\u8fc7\u5bf9\u663e\u793a\u5c4f\u8fdb\u884c\u9891\u95ea\uff0c\u4ee5\u4f4e\u6210\u672c\u89e3\u51b3\u4e86\u4ef7\u503c 1 \u4ebf\u7f8e\u5143\u7684\u632f\u52a8\u95ee\u9898", "title_en": "NASA solved a $100M vibration problem cheaply by strobing the display", "transed": 1, "url": "https://gizmodo.com/how-nasa-solved-a-100-million-problem-for-five-bucks-5880850", "via": "", "real_tags": ["nasa", "\u663e\u793a\u5c4f", "problem", "\u632f\u52a8"]}, {"category": "", "categoryclass": "", "imagename": "f680568a1e68479966efd3c0c9c48d61.jpeg", "infoid": 1072170, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u4e00\u5929\u8fc7\u5f97\u5f88\u987a\u5229\uff0c\u5728\u67e5\u770b\u6211\u4eec\u5728 Stripe \u4e0a\u6700\u65b0\u66f4\u65b0\u7684 MRR \u540e\uff0c\u6211\u5fc3\u60c5\u5f88\u597d\uff0c\u6211\u51b3\u5b9a\u6253\u5f00\u6211\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u770b\u770b\u5ba2\u6237\u662f\u5426\u6709\u4efb\u4f55\u95ee\u9898\u9700\u8981\u56de\u7b54\u3002\u5c31\u5728\u90a3\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u4e00\u5c01\u6765\u81ea Google \u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u6807\u9898\u4e3a\u201cGoogle Cloud Platform &amp; APIs: Payment received\u201d\uff0c\u7136\u540e\u6211\u7684\u4e00\u5929\u5c31\u53d1\u751f\u4e86\u5fae\u5999\u7684\u53d8\u5316\u3002\u6211\u6253\u5f00\u7535\u5b50\u90ae\u4ef6\u3002 \u201c\u4ed8\u6b3e\u5df2\u6536\u5230\u201d\uff0c\u5b83\u7528\u7c97\u4f53\u5927\u5199\u3002 \u201c\u592a\u597d\u4e86\u201d\uff0c\u4e00\u5207\u90fd\u5f88\u987a\u5229\uff0c\u5bf9\u5427\uff1f\u9519\u8bef\u7684\u3002\u60a8\u5df2\u4e8e 2021 \u5e74 6 \u6708 21 \u65e5\u5411 Google Cloud Platform \u548c API \u652f\u4ed8\u4e86 1,000.00 \u7f8e\u5143\u3002\u201c\u597d\u5427\uff0c\u8fd9\u53ef\u80fd\u53ea\u662f\u4e00\u4e2a\u9519\u8bef\u201d\uff0c\u5f53\u6211\u6253\u5f00 Developer API \u63a7\u5236\u53f0\u65f6\uff0c\u6211\u5fc3\u91cc\u60f3\u3002\u4f46\u662f\uff0c\u4e0d\uff0c\u4f60\u77a7\uff0c\u5728\u6253\u5f00 15 \u4e2a\u4e0d\u540c\u7684\u8d26\u5355\u5c0f\u8282\u4e4b\u540e\uff0c\u6bcf\u4e2a\u5c0f\u8282\u7684\u63cf\u8ff0\u6027\u540d\u79f0\u90fd\u6bd4\u4e0b\u4e00\u4e2a\uff08\u201c\u6210\u672c\u8868\u201d\u3001\u201c\u6210\u672c\u5206\u89e3\u201d\u3001\u201c\u627f\u8bfa\u201d\u3001\u201c\u627f\u8bfa\u5206\u6790\u201d\uff09\u5c11\uff0c\u5e76\u4e14\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u7b80\u5355\u95ee\u9898\u7684\u7b54\u6848\u201c\u8fd9\u4e2a\u6708API\u8c03\u7528\u4e86\u591a\u5c11\u6b21\uff1f\u201d\uff0c\u6211\u7ec8\u4e8e\u770b\u5230\u4e86\u6211\u4eec\u8fd9\u4e2a\u6708\u7684\u6d88\u8d39\u60c5\u51b5\uff08\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u65f6\u5019\u8bd5\u7740\u627e\u56de\u6765\uff0c\u540e\u6765\u627e\u4e0d\u5230\u4e86\uff09 .\u4f3c\u4e4e\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u4e3a\u6211\u4eec\u6d88\u8d39\u7684\u4e1c\u897f\u4e70\u5355\u3002\u53ea\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u4ec0\u4e48\uff1f\u4ec0\u4e48\uff1f\u4ec0\u4e48\uff1f\u8fd9\u600e\u4e48\u53ef\u80fd\uff1f\u6211\u4ecd\u7136\u4e0d\u660e\u767d\uff0c\u4f46\u663e\u7136\u5b83\u5e94\u8be5\u662f\u6709\u9053\u7406\u7684\uff1a\n\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u4e3a\u5927\u6c14\u6570\u636e\u4ed8\u8d39\uff0c\u8fd9\u5230\u5e95\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u6211\u731c\u8c37\u6b4c\u89c9\u5f97\u4ed6\u4eec\u53ef\u4ee5\u5728\u201c\u8054\u7cfb\u6570\u636e\u201d\u4e0a\u591a\u82b1 100 \u7f8e\u5143\uff0c\u4e0d\u7ba1\u90a3\u662f\u4ec0\u4e48\u3002\u5927\u6c14\u6570\u636e 165.01 \u7f8e\u5143\uff1a\u6211\u4e00\u76f4\u5728\u4f7f\u7528\u5730\u70b9/\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\uff0c\u4e3a\u4ec0\u4e48\u6211\u8fd8\u8981\u4e3a\u5927\u6c14\u6570\u636e\u4ed8\u8d39\uff1f\u5728\u201c\u8054\u7cfb\u6570\u636e\u201d\u4e0a\u989d\u5916\u6295\u5165 99 \u7f8e\u5143\uff0c\u6b64\u65f6\u989d\u5916\u7684 100 \u7f8e\u5143\u662f\u591a\u5c11\uff1f\u55ef...\u4e5f\u8bb8\u8fd9\u53ef\u4ee5\u89e3\u91ca\u4e3a\u4ec0\u4e48 Google \u7684 API \u4ea7\u54c1\u7684\u5b9a\u4ef7\u9875\u9762\u5982\u6b64\u6666\u6da9\u3002\u4f46\u6211\u6700\u559c\u6b22\u7684\u90e8\u5206\u662f\u6211\u4eec\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u652f\u4ed8\u5168\u4ef7\uff0c\u8fd9\u662f\u6211\u4eec\u7684\u6298\u6263\u4ef7\uff01\u4ed6\u4eec\u591a\u4e48\u6177\u6168\uff01\u54e6\uff0c\u5982\u679c\u8fd9\u4ecd\u7136\u6ca1\u6709\u610f\u4e49\uff0c\u8fd9\u91cc\u4e3a\u60a8\u63d0\u4f9b\u53e6\u4e00\u79cd\u5b9a\u4ef7\u660e\u7ec6\u3002\u662f\u7684\uff0c\u5728\u4efb\u4f55\u5730\u65b9\u6dfb\u52a0\u4e00\u4e9b\u4e0b\u62c9\u83dc\u5355\uff0c\u8fd9\u4f1a\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u6e05\u695a\uff1a\u90a3\u662f\u6211\u5f00\u59cb\u5bfb\u627e\u66ff\u4ee3\u65b9\u6848\u7684\u65f6\u5019\u3002\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u5230 2021 \u5e74\u4f1a\u6709\u76f8\u5f53\u6570\u91cf\u7684\u8fd9\u4e9b\uff1aMapbox\u3001OpenCageData\u3001LocationIQ \u548c GeoCod.IO \u4ec5\u4e3e\u51e0\u4f8b\u3002\n\u6700\u540e\uff0c\u6211\u9009\u62e9\u4e86 Mapbox\uff1a\u5b83\u4e0d\u662f\u6240\u6709\u9009\u9879\u4e2d\u6700\u4fbf\u5b9c\u7684\uff0c\u4f46\u5b83\u4f3c\u4e4e\u5728\u53ef\u8d1f\u62c5\u6027\u548c\u6570\u636e\u76f8\u5173\u6027\u4e4b\u95f4\u53d6\u5f97\u4e86\u826f\u597d\u7684\u5e73\u8861\uff0c\u5728\u6574\u4e2a\u7a7a\u95f4\u7684\u81ea\u52a8\u5b8c\u6210\u4e2d\u83b7\u5f97\u4e86\u6700\u76f8\u5173\u7684\u7ed3\u679c\u3002\u6765\u81ea\u8c37\u6b4c\u6df7\u4e71\u7684\u63a7\u5236\u53f0\uff0c\u4ed6\u4eec\u4e25\u8083\u7684\u4eea\u8868\u677f\u4e5f\u975e\u5e38\u4ee4\u4eba\u8033\u76ee\u4e00\u65b0\uff1a\u73b0\u5728\uff0c\u6211\u4eec\u6bcf\u4e2a\u6708\u7684\u524d 100,000 \u6b21\u901a\u8bdd\u90fd\u662f\u514d\u8d39\u7684\uff0c\u6211\u4eec\u6700\u591a\u4e3a\u6bcf\u989d\u5916 1000 \u6b21\u901a\u8bdd\u652f\u4ed8 0.75 \u7f8e\u5143\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u5df2\u7ecf\u731c\u5230\u6211\u80af\u5b9a\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55 Google \u7684 API\uff0c\u9664\u975e\u5bf9\u5b9a\u4ef7\u548c\u672a\u6765\u7684\u66ff\u4ee3\u65b9\u6848\u8fdb\u884c\u4e25\u683c\u5ba1\u67e5\u3002\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u53ef\u4ee5\u5e2e\u52a9\u66f4\u591a\u4eba\u5728\u76f2\u76ee\u9009\u62e9\u9ed8\u8ba4\u9009\u9879\u4e4b\u524d\u4e09\u601d\u800c\u540e\u884c\u3002\u811a\u6ce8\uff1a\u867d\u7136\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u5bf9 Mapbox \u7684\u670d\u52a1\u548c\u4ea7\u54c1\u975e\u5e38\u6ee1\u610f\uff0c\u4f46\u672c\u6587\u7edd\u4e0d\u662f Mapbox \u8d5e\u52a9\u6216\u8bf7\u6c42\u7684\u3002\u6211\u53ea\u662f\u4e00\u4e2a\u5e7b\u60f3\u7834\u706d\u7684\u8c37\u6b4c\u5ba2\u6237\uff0c\u5728\u5730\u72f1\u4e2d\u627e\u5230\u4e86\u4e00\u676f\u6c34\u3002\u60f3\u8981\u4e3a\u60a8\u7684\u793e\u533a\u5efa\u7acb\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u5de5\u4f5c\u59d4\u5458\u4f1a\uff1f\u524d\u5f80 Niceboard.co \u5f00\u59cb\u60a8\u7684 7 \u5929\u514d\u8d39\u8bd5\u7528\uff01", "note_en": "My day was going great, I was in a good mood after checking our newly updated MRR on Stripe, and I decided to open my email to see if there were any questions from customers to answer.\n That&#39;s when I noticed an email from Google, entitled &#34; Google Cloud Platform &amp; APIs: Payment received&#34;, and my day took a slightly different turn.\n I open the email. &#34; Payment Received&#34;, it says in big bold letters. &#34;Great&#34;, everything&#39;s running smoothly, right?  Wrong.\n Your payment of $1,000.00 was applied to Google Cloud Platform &amp; APIs on Jun 21, 2021.\n  &#34;Well maybe it&#39;s just a mistake&#34; I think to myself, as I open the Developer API console.\n   But no, lo and behold, after opening 15 different Billing subsections each with less descriptive names than the next (&#34; Cost table&#34;, &#34; Cost breakdown&#34;, &#34; Commitments&#34;, &#34; Commitments analysis&#34;) and not finding an answer to the simple question &#34; How many calls did we make on the API this month?&#34;, I finally manage to view what our consumption for the month was (I tried to get back to it as I wrote this article, and couldn&#39;t even find it anymore). It seems that we are  in fact paying for what we consumed. There&#39;s only one little issue:\n  What? What? What? How could this be? I still don&#39;t understand it, but apparently it should make sense:\n  Why are we paying for Atmosphere Data and what the hell does that even mean? I guess Google felt they could use an extra $100 bucks on &#34;Contact Data&#34;, whatever that is.\n  $165.01 on Atmosphere Data: I&#39;ve been using Places/Autocomplete, why am I even paying for Atmosphere Data?\n Throw in an extra  $99 on &#34;Contact Data&#34;, what&#39;s an extra $100 at this point?\n Well...  Maybe this explains why the pricing pages are so obscure on Google&#39;s API products.\n But my favorite part is that we weren&#39;t actually paying the full price, this is our  discounted price! How generous of them!\n Oh, and if that still doesn&#39;t make sense, here&#39;s another breakdown of the pricing for you. Yeah add a few dropdowns everywhere, that&#39;ll make it clearer:\n   That&#39;s when I started looking into alternatives. And thankfully, there are a decent amount of them out there in 2021:  Mapbox,  OpenCageData,  LocationIQ and  GeoCod.IO just to name a few.\n In the end, I settled on Mapbox: it&#39;s not the cheapest of all options but it seemed to strike a good balance between affordability and data relevance, with the most relevant results in Autocomplete across the space.\n And coming from Google&#39;s mess of a console, their no-nonsense dashboard is also extremely refreshing:\n   Now, our first 100,000 calls are free every month, and we&#39;ll be paying $0.75 per extra 1000 calls,  at a maximum.\n   By now you&#39;ve guessed I surely won&#39;t be using any of Google&#39;s APIs without heavy scrutiny of the pricing and the alternatives moving forward.\n Hopefully this article can help a few more people think twice before blindly heading for the default choice.\n Footnote : While I&#39;m highly satisfied with Mapbox&#39;s service and offering so far, this article was   in no way sponsored or requested by Mapbox .I am merely a disillusioned Google customer who found a glass of water in hell.\n  Looking to set up your own custom job board for your community?  Head over to    Niceboard.co  to start your free 7 day trial!", "posttime": "2021-08-09 03:56:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,places,api", "title": "\u4e3a\u4ec0\u4e48\u6211\u4eec\u4ece Google Places \u5207\u6362\u5230\u6211\u4eec\u7684 Autocomplete API", "title_en": "Why we switched away from Google Places for our Autocomplete API", "transed": 1, "url": "https://hackernoon.com/heres-why-we-switched-from-google-places-to-mapbox-for-our-autocomplete-api-i2y37yw", "via": "", "real_tags": ["google", "places", "api"]}]