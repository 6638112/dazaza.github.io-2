[{"category": "", "categoryclass": "", "imagename": "b5d0f1167a86fdbbb8945644fc4c54f6.png", "infoid": 1028427, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1+1\u7b49\u4e8e2\u8fd9\u4e00\u4e8b\u5b9e\u975e\u5e38\u660e\u663e\uff0c\u53ef\u80fd\u5f88\u96be\u89e3\u91ca\u4e3a\u4ec0\u4e48\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6570\u5b66\u5bb6\u4eec\u5df2\u7ecf\u8bbe\u8ba1\u51fa\u4e86\u4e00\u79cd\u5c06\u7b97\u672f\u5f62\u5f0f\u5316\u5e76\u968f\u540e\u8bc1\u660e1+1=2\u7684\u65b9\u6cd5\u3002\u81ea\u7136\u6570\u662f\u57fa\u4e8e\u76ae\u4e9a\u8bfa\u516c\u7406\u7684\u3002\u5b83\u4eec\u662f\u4e00\u7ec4\u7b80\u5355\u7684\u89c4\u5219\uff0c\u5b9a\u4e49(\u4e0e\u6b63\u5f0f\u7cfb\u7edf\u4e00\u8d77)\u4ec0\u4e48\u662f\u81ea\u7136\u6570\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u8bc1\u660eRust\u4e2d\u76841+1=2\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u5904\u7406\u903b\u8f91\u7684\u5f62\u5f0f\u7cfb\u7edf\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u7684\u6b63\u5f0f\u7cfb\u7edf\u4e0d\u662f\u67d0\u4e2a\u968f\u673a\u7684\u677f\u6761\u7bb1\uff0c\u800c\u662f\u94c1\u9508\u7684\u7c7b\u578b\u7cfb\u7edf\u672c\u8eab\uff01\u6211\u4eec\u5c06\u4e0d\u4f1a\u6709\u4efb\u4f55\u8fd0\u884c\u65f6\u4ee3\u7801\uff0c\u76f8\u53cd\uff0c\u7c7b\u578b\u68c0\u67e5\u5668\u5c06\u4e3a\u6211\u4eec\u5b8c\u6210\u6240\u6709\u5de5\u4f5c\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u76ae\u4e9a\u8bfa\u516c\u7406\u3002\u7b2c\u4e00\u4e2a\u516c\u7406\u662f\u96f6\u662f\u4e00\u4e2a\u81ea\u7136\u6570\u3002\u57fa\u672c\u4e0a\u5b83\u8bf4\u7684\u662f\u96f6\u7684\u5b58\u5728\u3002\u4e3a\u4e86\u5728\u7c7b\u578b\u7cfb\u7edf\u4e2d\u8868\u8fbe\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u7f16\u5199\uff1a\n\u7b2c\u516d\u548c\u7b2c\u4e03\u516c\u7406\u6307\u51fa\uff0c\u6bcf\u4e2a\u81ea\u7136\u6570\u90fd\u6709\u552f\u4e00\u7684\u540e\u7ee7\u8005\u3002\u6b64\u540e\u7eed\u51fd\u6570\u5728\u6570\u5b66\u4e0a\u5199\u4e3aS(N)\uff0c\u5e76\u4e14(\u6839\u636e\u52a0\u6cd5\u7684\u5b9a\u4e49)S(N)=n+1\u3002\u8fd9\u4e9b\u516c\u7406\u53ef\u4ee5\u7528\u5982\u4e0b\u6240\u793a\u7684\u6cdb\u578b\u7c7b\u578b\u7f16\u5199\uff1a\n\u7c7b\u578b\u4e00=\u540e\u7eed&lt\uff1b\u96f6\uff1b\u7c7b\u578b\u4e8c=\u540e\u7eed&lt\uff1b\u4e00&&gt;\uff1b\u7c7b\u578b\u4e09=\u540e\u7eed&lt\uff1b\u4e24&&gt;\uff1b\u7c7b\u578b\u56db=\u540e\u7eed&lt\uff1b\u4e09&&gt;\uff1b\u7c7b\u578b\u4e94=\u540e\u7eed&lt\uff1b\u56db&&gt;\uff1b\uff1b\n\u8fd9\u4e2a\u5b9a\u4e49\u4e5f\u6ee1\u8db3\u7b2c\u516b\u6761\u516c\u7406\uff0c\u5373\u4e0d\u5b58\u5728\u5c0f\u4e8e\u96f6\u7684\u81ea\u7136\u6570\u3002\u7b2c\u4e8c\u6761\u3001\u7b2c\u4e09\u6761\u3001\u7b2c\u56db\u6761\u548c\u7b2c\u4e94\u6761\u516c\u7406\u90fd\u5b9a\u4e49\u4e86\u7b49\u5f0f\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u6211\u4eec\u4e0d\u5fc5\u5c06\u5b83\u4eec\u8f6c\u6362\u6210Rust\uff0c\u56e0\u4e3aRust\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u7c7b\u578b\u4e4b\u95f4\u76f8\u7b49\u7684\u7cfb\u7edf\u3002\n\u7b2c\u4e5d\u6761\u516c\u7406\u6709\u70b9\u68d8\u624b\u3002\u5b83\u8bf4\u4f60\u53ef\u4ee5\u7528\u5f52\u7eb3\u6cd5\u6765\u8bc1\u660e\u5173\u4e8e\u81ea\u7136\u6570\u7684\u4e1c\u897f\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u8fd9\u6837\u7b80\u5355\u7684\u8bc1\u660e\uff0c\u6ca1\u6709\u5fc5\u8981\u7528\u94c1\u9508\u6765\u8868\u793a\u5b83\u3002\n\u7ed3\u679c\u5173\u8054\u7c7b\u578b\u53ea\u662f\u52a0\u6cd5\u7684\u503c\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0AddHelper\u7684\u6dfb\u52a0\u7279\u5f81\uff1a\n\u7b2c\u4e00\u4e2aIml\u7b80\u5355\u5730\u8bf4\u660ea+0=a\u3002\u5bf9\u4e8e\u975e\u96f6\u52a0\u6cd5\uff0c\u6211\u4eec\u5199\u9053\uff1a\n\u5b9e\u65bd&lt\uff1bA\uff0cB&&gt;\uff1b\u4e3aAddHelper&lt\uff1bA\uff0c\u7ee7\u4efb\u8005&lt\uff1b\u6dfb\u52a0\uff1a\u5176\u4e2dAddHelper&lt\uff1bA\uff0cB&&gt;\uff1b\uff1a\u6dfb\u52a0{type Result=\u7ee7\u4efb\u8005&lt\uff1b&lt\uff1bAddHelper&lt\uff1bA\uff0cB&&gt;\uff1bAs Add&&gt;\uff1b\uff1a\uff1aResult&&gt;\uff1b}\u3002\n\u5b83\u53ef\u80fd\u6709\u70b9\u96be\u8bfb\uff0c\u4f46\u662f\u8fd9\u4e2a\u7279\u6027\u662f\u5728AddHelper&lt\uff1bA\u3001\u7ee7\u627f\u8005&lt\uff1bB&gt\uff1b&gt\uff1b\u4e2d\u5b9e\u73b0\u7684\u3002\u6240\u4ee5\u5b83\u8ba1\u7b97a+(b+1)\u7684\u7ed3\u679c\u3002\u5982\u679c\u6211\u4eec\u968f\u540e\u67e5\u770b\u7ed3\u679c\uff0c\u5b83\u7684\u7c7b\u578b\u662f\u540e\u7eed&lt\uff1b&lt\uff1bAddHelper&lt\uff1bA\uff0cB&&gt;\uff1bAs Add&gt\uff1b\uff1a\uff1aResult&&gt;\uff1b\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u662fS(a+b)+1\uff0c\u6240\u4ee5\u8fd9\u4e2aIml\u5b9e\u9645\u4e0a\u662f\u8bf4a+(b+1)=(a+b)+1\uff0c\u6216\u8005\u5982\u679c\u4f60\u60f3\u7528S(X)\u6765\u8868\u793a\u540e\u7ee7\u8005\uff0ca+S(B)=S(a+b)\u3002\n\u8fd9\u4e2a\u9012\u5f52\u5b9a\u4e49\u8d77\u4f5c\u7528\u7684\u539f\u56e0\u662f\u5b83\u672c\u8d28\u4e0a\u51cf\u5c11\u4e86\u53f3\u4fa7\uff0c\u76f4\u5230\u5b83\u51cf\u5c11\u5230\u5fae\u4e0d\u8db3\u9053\u7684a+0\u60c5\u51b5\u3002\u4f8b\u59823+2=3+S(S(0))=S(3+S(0))=S(S(3+0))=S(S(3))=5\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e1+1=2\u3002\u8981\u8bc1\u660e\u4e24\u79cd\u7c7b\u578b\u76f8\u7b49\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0bConst\u58f0\u660e\uff1a\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u9009\u9879\u6765\u5305\u88c5\u7c7b\u578b\uff0c\u56e0\u4e3a\u4f7f\u7528\u9009\u9879\u4e0d\u9700\u8981\u521b\u5efa\u5305\u88c5\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f46\u662f\u7c7b\u578b\u68c0\u67e5\u5668\u4ecd\u7136\u68c0\u67e5\u7c7b\u578b\u662f\u5426\u76f8\u7b49\u3002\n\u5de6\u8fb9\u7684\u7c7b\u578b\u662f&lt\uff1bAddHelper&lt\uff1bone\uff0cone&gt\uff1bas add&gt\uff1b\uff1a\uff1aresult\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f1+1\u3002\u53f3\u8fb9\u6709\u4e24\u4e2a\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c1+1=2\u3002\n\u5982\u679c\u6211\u4eec\u5c06\u4e24\u4e2a\u66f4\u6539\u4e3a\u4e09\u4e2a\uff0c\u5219\u4f1a\u5f97\u5230\u9884\u671f\u7684\u9519\u8bef\u3002\u5982\u679c\u6211\u4eec\u5c1d\u8bd52+2=5\uff0c\u6211\u4eec\u4e5f\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u3002\n\u4e3aMulHelper&lt\uff1bA\u3001\u7ee7\u4efb\u8005&lt\uff1bB&&gt;\uff1b&gt\uff1b\u5b9e\u65bd&lt\uff1bA\uff0cB&&gt;\uff1bMUL\uff0c\u5176\u4e2dAddHelper&lt\uff1bA\uff0c&lt\uff1bMulHelper&lt\uff1bA\uff0c&lt\uff1bMulHelper&lt\uff1bAS MUL&lt\uff1b\uff1a\uff1aResult&&gt;\uff1b\uff1aAdd{type Result=&lt\uff1bAddHelper&lt\uff1bA\uff0c&lt\uff1bMulHelper&lt\uff1bAS MUL&&gt;\uff1b\uff1a\uff1aResult&&gt;\uff1bAS Add&gt\uff1b\uff1a\uff1aResult\uff1b}\n\u8fd9\u91cc\u5b9e\u73b0\u4e86MulHelper&lt\uff1bA\uff0c\u7ee7\u627f\u8005&lt\uff1bB&&gt;t\uff1b&gt\uff1b\u7684\u4e58\u6cd5\uff0c\u5b83\u53ea\u8868\u793aa*S(B)\u3002\u7ed3\u679c\u7684\u7c7b\u578b\u53ef\u80fd\u6bd4\u8f83\u96be\u8bfb\uff0c\u4f46\u5b83\u7b49\u540c\u4e8ea+a*b\u3002\u6362\u8a00\u4e4b\uff0ca*(b+1)=a+a*b\u3002\n\u95ee\u9898\u662f\uff0c\u8fd9\u5b9e\u9645\u4e0a\u5e76\u4e0d\u8d77\u4f5c\u7528\uff0c\u76f8\u53cd\uff0c\u5b83\u5728\u8ba1\u7b97\u7279\u5f81\u754c\u9650\u65f6\u4f1a\u5bfc\u81f4\u67d0\u79cd\u65e0\u9650\u9012\u5f52\u3002\u6211\u53ef\u4ee5\u82b1\u51e0\u4e2a\u5c0f\u65f6\u6765\u8bd5\u56fe\u7406\u89e3Rust\u662f\u5982\u4f55\u8ba1\u7b97\u6027\u72b6\u754c\u9650\u5e76\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\uff0c\u4f46\u662f\u6211\u4f1a\u9009\u62e9\u61d2\u60f0\u7684\u65b9\u5f0f\uff0c\u4ee5\u4e00\u79cdRust\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u5f62\u5f0f\u91cd\u5199\u4e58\u6cd5\u3002\n\u5728\u6570\u5b66\u4e0a\uff0c\u8fd9\u8868\u793aacc+a*b\u3002\u7136\u540e\uff0c\u6211\u4eec\u9012\u5f52\u5b9a\u4e49\u4e58\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u7279\u6027MUL{type Result\uff1b}//S(ACC)+A*B=S(ACC+A*B)\u5bf9\u4e8eMulImplHelper&lt\uff1b\u7ee7\u4efb\u8005&lt\uff1b\u7ee7\u4efb\u8005&lt\uff1b\uff0cA\uff0cB&&gt;\uff1b\u5b9e\u65bd&lt\uff1bMUL\uff1b\u5176\u4e2dMulImplHelper&lt\uff1bACC\uff0cA\uff0cB&&gt;\uff1b\uff1a\uff1aMUL{type Result=\u7ee7\u4efb\u8005&lt\uff1b&lt\uff1bMulImplHelper&lt\uff1bACC\uff0cA\uff0cB&gt\uff1bAS MUL&&gt;\uff1b\uff1a\uff1aResult&&gt;\uff1b}//0+A*S(B)=A+A*B\u5b9e\u65bd&lt\uff1bA\uff0cB&gt\uff1bMUL\u5bf9\u4e8eMulImplHelper&lt\uff1b\u96f6\uff0cA\uff0c\u540e\u7eed&lt\uff1bB&gt\uff1b\uff1b\u5176\u4e2d\uff0cMulImplHelper&lt\uff1bA\uff0cA\uff0cB&gt\uff1b\uff1aMUL{type result=&lt\uff1bMulImplHelper&lt\uff1bA\uff0cA\uff0cB&gt\uff1bAs Mul&gt\uff1b\uff1a\uff1aResult\uff1b}//0+A*0=0 Iml&lt\uff1bA&gt\uff1bMull for ImplHelper&lt\uff1b\u96f6\uff0cA\uff0cB&gt\uff1bMUL{type Result=&lt\uff1bMulImplHelper&lt\uff1bA\uff0cA\uff0cB&gt\uff1bAs Mul&gt\uff1b\uff1a\uff1aResult\uff1b}//0+A*0=0 Iml&lt\uff1bA&gt\uff1bMull for ImplHelper&lt\uff1bA\uff0cA\uff0cB&gt\uff1b{type result=Zero\uff1b}struct MulHelper&lt\uff1bA\uff0cB&&gt;\uff1b(A\uff0cB)\uff1b//A*B=0+A*B Impl&lt\uff1bA\uff0cB&&gt;\uff1bMUL\u8868\u793aMulHelper&lt\uff1bA\uff0cB&&gt;\uff1b\u5176\u4e2dMulplImplHelper&lt\uff1b\u96f6\uff0cA\uff0cB&&gt;\uff1b\uff1aMUL{type Result=&lt\uff1bMulImplHelper&lt\uff1b\u96f6\uff0cA\uff0cB&gt\uff1bAS MUL&&gt;\uff1b\uff1a\uff1aResult\uff1b}\u3002\n\u6211\u4e0d\u786e\u5b9a\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u5b9a\u4e49\u6bd4\u524d\u9762\u7684\u5b9a\u4e49\u5de5\u4f5c\u5f97\u66f4\u597d\uff0c\u4f46\u6211\u731c\u8fd9\u4e0e\u8fd9\u91cc\u7684\u9012\u5f52\u7c7b\u578b\u7b80\u5355\u5f97\u591a\u6709\u5173\u3002\n//\u5355\u72ec\u5b9a\u4e49\u6e05\u6670\u5ea6\u7c7b\u578bThreeSquared=&lt\uff1bMulHelper&lt\uff1bThree\uff0cThree&gt\uff1bAs MUL&gt\uff1b\uff1a\uff1aresult\uff1btype FourSquared=&lt\uff1bMulHelper&lt\uff1bFour\uff0cFour&gt\uff1bAs MUL&gt\uff1b\uff1a\uff1aresult\uff1b\u952e\u5165FiveSquared=&lt\uff1bMulHelper&lt\uff1bFiveSquared=&lt\uff1bFiveSquared&lt\uff1b\uff1a\uff1aResult\uff1bConst QED\uff1aOption&lt\uff1b&lt\uff1bAddHelper&lt\uff1bThreeSquared\uff0cFourSquared&gt\uff1bAs Add&gt\uff1b\uff1a\uff1aResult&gt\uff1bOption\uff1a&lt\uff1bFiveSquared&gt\uff1bAs MUL&gt\uff1b\uff1a\uff1aResult&gt\uff1bAs Add&gt\uff1b\uff1a\uff1aResult&gt\uff1b=Option\uff1a&lt\uff1bFiveSquared&gt\uff1bAs Add&gt\uff1b\uff1a\uff1aResult&gt\uff1b=Option\uff1a&lt\uff1bFiveSquared&gt\uff1b*\u65e0\uff1b\nRust\u7684\u7c7b\u578b\u7cfb\u7edf\u662f\u56fe\u7075\u5b8c\u6210\u7684\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u5b9e\u73b0\u4efb\u4f55\u6b63\u5f0f\u7684\u7cfb\u7edf\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u3002\u4f7f\u7528\u9999\u8349\u7c7b\u578b\u7684\u7cfb\u7edf\uff0c\u5b83\u53ef\u4ee5\u5efa\u8bbe\u6027\u5730\u8bc1\u660e\u5b58\u5728\u8bba\u65ad\u3002\u4e5f\u5e94\u8be5\u6709\u53ef\u80fd\u7528\u77db\u76fe\u7684\u8bc1\u636e\u6765\u8bc1\u660e\u67d0\u4e9b\u4e1c\u897f\u662f\u4e0d\u5b58\u5728\u7684\u3002\u77db\u76fe\u8bc1\u660e\u4e4b\u6240\u4ee5\u662f\u53ef\u80fd\u7684\uff0c\u662f\u56e0\u4e3a\u5f53\u4f7f\u7528\u6cdb\u578b\u5b9e\u73b0\u7279\u5f81\u65f6\uff0c\u60a8\u5b9e\u8d28\u4e0a\u662f\u5728\u8bf4\u5047\u8bbeX(\u6cdb\u578b\u53c2\u6570\u6ee1\u8db3\u67d0\u4e9b\u7279\u5f81)\uff0c\u90a3\u4e48Y(\u7c7b\u578b\u6ee1\u8db3\u60a8\u6b63\u5728\u5b9e\u73b0\u7684\u7279\u5f81)\u3002\u5982\u679cY\u662f\u903b\u8f91\u77db\u76fe\uff0c\u90a3\u4e48X\u4e00\u5b9a\u4e5f\u662f\uff0c\u56e0\u6b64X\u4e0d\u53ef\u80fd\u5b58\u5728\u3002", "note_en": "The fact that 1 + 1 is equal to 2 is one of those things that is so obvious it may be hard to justify why.Fortunately mathematicians have devised a way of formalizing arithmetic and subsequently proving that 1 + 1 = 2.Natural numbers are based on the  Peano axioms. They are a set of simple rules that define (along with a formal system) what natural numbers are. So in order to prove 1 + 1 = 2 in Rust we first need a formal system capable of handling logic. The formal system that we&#39;ll be using is not some random crate, but Rust&#39;s type system itself! We will not have any runtime code, instead the type checker will do all the work for us.\n  First let&#39;s go trough the Peano axioms. The first axiom is that &#34;Zero is a natural number&#34;. Basically what it says is that zero exists. In order to express that in the type system, we just write:\n  The sixth and seventh axioms state that every natural number has a unique successor. Mathematically this successor function is written as  S(n), and (by definition of addition)  S(n) = n + 1. These axioms can be written with a generic type that looks like this:\n   type  One = Successor&lt;Zero&gt;; type  Two = Successor&lt;One&gt;; type  Three = Successor&lt;Two&gt;; type  Four = Successor&lt;Three&gt;; type  Five = Successor&lt;Four&gt;;\n This definition also satisfies the eighth axiom which states that there doesn&#39;t exist a natural number smaller than zero.The second, third, fourth and fifth axiom all define how equality works. We don&#39;t have to translate them to Rust, because Rust already has a system of equality between types.\n The ninth axiom is a bit more tricky. It states that you can use induction to prove things about natural numbers. However it is not necessary to express it in Rust for simple proofs like these.\n    The  Result associated type is simply the value of the addition. Next we&#39;ll implement the  Add trait for  AddHelper:\n  This first  impl simply states that  a + 0 = a. For non-zero addition we write:\n impl&lt;A, B&gt;  Add  for  AddHelper&lt;A, Successor&lt;B&gt;&gt;  where  AddHelper&lt;A, B&gt; :  Add {  type  Result = Successor&lt;&lt;AddHelper&lt;A, B&gt; as Add&gt;:: Result&gt;;}\n It may be a bit harder to read but this trait is implemented for  AddHelper&lt;A, Successor&lt;B&gt;&gt;. So it calculates the result of  a + (b + 1). If we then look at  Result, it&#39;s type is  Successor&lt;&lt;AddHelper&lt;A, B&gt; as Add&gt;::Result&gt;. In other words it&#39;s  (a + b) + 1. So what this  impl is really saying is that  a + (b + 1) = (a + b) + 1. Or if you want to use  S(x) to denote the successor,  a + S(b) = S(a + b).\n The reason why this recursive definition works is that it essentially decrements the right hand side, until it&#39;s reduced to the trivial  a + 0 case. For example  3 + 2 = 3 + S(S(0)) = S(3 + S(0)) = S(S(3 + 0)) = S(S(3)) = 5.\n Now we can prove that  1 + 1 = 2. To prove that two types are equal we can use a const declaration like so:\n  Here we use an Option to wrap the types, because with Option you don&#39;t have to create an instance of the wrapped type, but the type checker still checks if the types are equal.\n The left type is  &lt;AddHelper&lt;One, One&gt; as Add&gt;::Result, which is in other words  1 + 1. On the right side we have  Two. In other words  1 + 1 = 2.\n If we change  Two to  Three we get an error as expected. We also get an error if we try  2 + 2 = 5. Take that Ingsoc!\n       impl&lt;A, B&gt;  Mul  for  MulHelper&lt;A, Successor&lt;B&gt;&gt;  where  AddHelper&lt;A, &lt;MulHelper&lt;A, B&gt; as Mul&gt;:: Result&gt; :  Add {  type  Result = &lt;AddHelper&lt;A, &lt;MulHelper&lt;A, B&gt; as Mul&gt;:: Result&gt; as Add&gt;:: Result;}\n Here multiplication is implemented for  MulHelper&lt;A, Successor&lt;B&gt;&gt;, which just means  a * S(b).The type of the result may be a bit harder to read, but it is equivalent to  a + a * b. So in other words  a * (b + 1) = a + a * b\n The problem is that this doesn&#39;t actually work, instead it causes some sort of infinite recursion when calculating trait bounds. I could spend a few hours trying to understand how Rust calculates trait bounds and fix the problem, but instead I&#39;m just gonna take the lazy route and rewrite multiplication in a form that is slightly easier for Rust to understand.\n   Mathematically this represents  acc + a * b. We then define multiplication recursively as follows:\n       trait  Mul {  type  Result;} // S(Acc) + A * B = S(Acc + A * B) impl&lt;Acc, A, B&gt;  Mul  for  MulImplHelper&lt;Successor&lt;Acc&gt;, A, B&gt;  where  MulImplHelper&lt;Acc, A, B&gt; :  Mul {  type  Result = Successor&lt;&lt;MulImplHelper&lt;Acc, A, B&gt; as Mul&gt;:: Result&gt;;} // 0 + A * S(B) = A + A * B impl&lt;A, B&gt;  Mul  for  MulImplHelper&lt;Zero, A, Successor&lt;B&gt;&gt;  where  MulImplHelper&lt;A, A, B&gt; :  Mul {  type  Result = &lt;MulImplHelper&lt;A, A, B&gt; as Mul&gt;:: Result;} // 0 + A * 0 = 0 impl&lt;A&gt;  Mul  for  MulImplHelper&lt;Zero, A, Zero&gt; {  type  Result = Zero;} struct  MulHelper&lt;A, B&gt;(A, B); // A * B = 0 + A * B impl&lt;A, B&gt;  Mul  for  MulHelper&lt;A, B&gt;  where  MulImplHelper&lt;Zero, A, B&gt; :  Mul {  type  Result = &lt;MulImplHelper&lt;Zero, A, B&gt; as Mul&gt;:: Result;}\n I&#39;m not sure why this works better than the previous definition, but my guess is that it has to do something with the fact that the type of recursion here is much simpler.\n  // Define separatly for clarity type  ThreeSquared = &lt;MulHelper&lt;Three, Three&gt; as Mul&gt;:: Result; type  FourSquared = &lt;MulHelper&lt;Four, Four&gt; as Mul&gt;:: Result; type  FiveSquared = &lt;MulHelper&lt;Five, Five&gt; as Mul&gt;:: Result; const QED :  Option &lt;&lt;AddHelper &lt;ThreeSquared, FourSquared &gt;  as Add &gt; :: Result &gt;  =  Option :: &lt;FiveSquared &gt; :: None;\n  Rust&#39;s type system is turing complete, so in theory you could implement any formal system in it and then use that. Using the vanilla type system, it&#39;s possible to constructively prove existential statements. It should also be possible to prove that something can&#39;t exist, using proof by contradiction. The reason why proofs by contradiction should be possible is that when implementing a trait with generics you are essentially saying that assuming X (the generic parameters satisfy some traits), then Y (the type satisfies the trait you are implementing). If Y is a logical contradiction, then X must be also, therefore X can&#39;t exist.", "posttime": "2020-10-13 20:07:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u94c1\u9508,proving,\u7c7b\u578b", "title": "\u94c1\u9508\u4e2d1\u548c1=2\u7684\u8bc1\u660e", "title_en": "Proving that 1 and 1 = 2 in Rust", "transed": 1, "url": "https://gist.github.com/gretingz/bc194c20a2de2c7bcc0f457282ba2662", "via": "", "real_tags": ["rust", "\u94c1\u9508", "proving", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1028426, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u8c03\u67e5\u4e91\u7cfb\u7edf\u63d0\u4f9b\u7684\u8010\u7528\u6027\u7684\u4e00\u90e8\u5206\uff0c\u6211\u60f3\u786e\u4fdd\u6211\u7406\u89e3\u4e86\u57fa\u7840\u77e5\u8bc6\u3002\u6211\u4ece\u9605\u8bfbNVMe\u89c4\u8303\u5f00\u59cb\uff0c\u4ee5\u4e86\u89e3\u78c1\u76d8\u63d0\u4f9b\u7684\u4fdd\u8bc1\u3002\u603b\u7ed3\u662f\uff0c\u60a8\u5e94\u8be5\u5047\u8bbe\u60a8\u7684\u6570\u636e\u5728\u53d1\u51fa\u5199\u5165\u65f6\u5230\u5237\u65b0\u6216\u5f3a\u5236\u5355\u5143\u8bbf\u95ee\u5199\u5165\u5b8c\u6210\u4e4b\u540e\u8fd9\u6bb5\u65f6\u95f4\u5185\u5df2\u635f\u574f\u3002\u4f46\u662f\uff0c\u5927\u591a\u6570\u7a0b\u5e8f\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u6765\u5199\u5165\u6570\u636e\u3002\u672c\u6587\u4ecb\u7ecdLinux\u6587\u4ef6API\u63d0\u4f9b\u7684\u4fdd\u8bc1\u3002\u8fd9\u770b\u8d77\u6765\u5e94\u8be5\u5f88\u7b80\u5355\uff1a\u7a0b\u5e8f\u8c03\u7528write()\uff0c\u5728\u5b83\u5b8c\u6210\u4e4b\u540e\uff0c\u6570\u636e\u662f\u6301\u4e45\u7684\u3002\u7136\u800c\uff0cwrite()\u53ea\u5c06\u6570\u636e\u4ece\u5e94\u7528\u7a0b\u5e8f\u590d\u5236\u5230\u5185\u6838\u7684\u5185\u5b58\u7f13\u5b58\u4e2d\u3002\u8981\u5f3a\u5236\u6570\u636e\u6301\u4e45\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u989d\u5916\u7684\u673a\u5236\u3002\u8fd9\u7bc7\u6587\u7ae0\u662f\u5173\u4e8e\u6211\u6240\u5b66\u5230\u7684\u6742\u4e71\u65e0\u7ae0\u7684\u7b14\u8bb0\u96c6\u3002(\u771f\u6b63\u7b80\u77ed\u7684\u603b\u7ed3\u662f\uff1a\u4f7f\u7528fdatync\u6216OPEN WITH O_DSYNC\u3002)\u3002\u6709\u5173\u66f4\u597d\u3001\u66f4\u6e05\u6670\u7684\u6982\u8ff0\uff0c\u8bf7\u53c2\u9605LWN&#39\uff1b\u7684\u300a\u786e\u4fdd\u6570\u636e\u5230\u8fbe\u78c1\u76d8\u300b\uff0c\u5176\u4e2d\u4ecb\u7ecd\u4e86\u5982\u4f55\u4ece\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u904d\u5386\u5230\u78c1\u76d8\u3002\n\u5728IEEE POSIX\u6807\u51c6\u4e2d\uff0cWrite\u7cfb\u7edf\u8c03\u7528\u5b9a\u4e49\u4e3a\u5c1d\u8bd5\u5c06\u6570\u636e\u5199\u5165\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u5728\u6210\u529f\u8fd4\u56de\u4e4b\u540e\uff0c\u9700\u8981\u8bfb\u53d6\u4ee5\u8fd4\u56de\u5199\u5165\u7684\u5b57\u8282\uff0c\u5373\u4f7f\u5728\u5176\u4ed6\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u8bfb\u53d6\u6216\u5199\u5165\u65f6\u4e5f\u662f\u5982\u6b64(POSIX\u6807\u51c6write()\uff1b\u539f\u7406)\u3002\u5728\u201c\u4e0e\u5e38\u89c4\u6587\u4ef6\u64cd\u4f5c\u7684\u7ebf\u7a0b\u4ea4\u4e92\u201d\u4e0b\u9762\u6709\u4e00\u4e2a\u9644\u52a0\u8bf4\u660e\uff0c\u8bf4\u660e\u5982\u679c\u4e24\u4e2a\u7ebf\u7a0b\u5206\u522b\u8c03\u7528\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\uff0c\u5219\u6bcf\u4e2a\u8c03\u7528\u8981\u4e48\u4f1a\u770b\u5230\u53e6\u4e00\u4e2a\u8c03\u7528\u7684\u6240\u6709\u6307\u5b9a\u6548\u679c\uff0c\u8981\u4e48\u4e00\u4e2a\u4e5f\u770b\u4e0d\u5230\u3002&#34\uff1b\u8fd9\u8868\u660e\u6240\u6709\u6587\u4ef6I/O\u90fd\u5fc5\u987b\u6709\u6548\u5730\u6301\u6709\u4e00\u4e2a\u9501\u3002\n\u8fd9\u662f\u5426\u610f\u5473\u7740\u4e66\u5199\u662f\u539f\u5b50\u7684\uff1f\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u53ef\u4ee5\uff1a\u5c06\u6765\u7684\u8bfb\u53d6\u5fc5\u987b\u8fd4\u56de\u5199\u5165\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u6216\u8005\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u5199\u5165\u4e0d\u9700\u8981\u5b8c\u6210\uff0c\u53ea\u5141\u8bb8\u4f20\u8f93\u90e8\u5206\u6570\u636e\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u4e24\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5c061024\u5b57\u8282\u9644\u52a0\u5230\u5355\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u4e24\u6b21\u5199\u5165\u6bcf\u4e00\u6b21\u4ec5\u5199\u5165\u4e00\u4e2a\u5b57\u8282\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u8fd9\u4ecd\u7136\u662f\u539f\u5b50\u7684\uff0c\u4f46\u4e5f\u4f1a\u5bfc\u81f4\u4e0d\u9700\u8981\u7684\u4ea4\u9519\u8f93\u51fa\u3002\u6709\u4e00\u4e2a\u5f88\u68d2\u7684StackOverflow\u7b54\u6848\uff0c\u6709\u66f4\u591a\u7ec6\u8282\u3002\n\u5c06\u6570\u636e\u653e\u5230\u78c1\u76d8\u4e0a\u7684\u6700\u76f4\u63a5\u65b9\u6cd5\u662f\u8c03\u7528fsync()\u3002\u5b83\u8bf7\u6c42\u64cd\u4f5c\u7cfb\u7edf\u5c06\u7f13\u5b58\u4e2d\u6240\u6709\u5df2\u4fee\u6539\u7684\u5757\u8fde\u540c\u6240\u6709\u6587\u4ef6\u5143\u6570\u636e(\u4f8b\u5982\u8bbf\u95ee\u65f6\u95f4\u3001\u4fee\u6539\u65f6\u95f4\u7b49)\u4e00\u8d77\u4f20\u8f93\u5230\u78c1\u76d8\u3002\u5728\u6211\u770b\u6765\uff0c\u5143\u6570\u636e\u5f88\u5c11\u6709\u7528\uff0c\u6240\u4ee5\u9664\u975e\u60a8\u77e5\u9053\u9700\u8981\u5143\u6570\u636e\uff0c\u5426\u5219\u5e94\u8be5\u4f7f\u7528fdatync\u3002Fdatync\u624b\u518c\u9875\u6307\u51fa\uff0c\u4e3a\u4e86\u6b63\u786e\u5904\u7406\u540e\u7eed\u6570\u636e\u8bfb\u53d6\uff0c\u9700\u8981\u5237\u65b0\u5c3d\u53ef\u80fd\u591a\u7684\u5143\u6570\u636e\uff0c\u8fd9\u662f\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u6240\u5173\u5fc3\u7684\u3002\n\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u8fd9\u4e0d\u80fd\u4fdd\u8bc1\u60a8\u53ef\u4ee5\u518d\u6b21\u627e\u5230\u8be5\u6587\u4ef6\u3002\u7279\u522b\u662f\uff0c\u5f53\u60a8\u7b2c\u4e00\u6b21\u521b\u5efa\u6587\u4ef6\u65f6\uff0c\u60a8\u9700\u8981\u5728\u5305\u542b\u8be5\u6587\u4ef6\u7684\u76ee\u5f55\u4e0a\u8c03\u7528fsync\uff0c\u5426\u5219\u5931\u8d25\u540e\u8be5\u6587\u4ef6\u53ef\u80fd\u4e0d\u5b58\u5728\u3002\u539f\u56e0\u57fa\u672c\u4e0a\u662f\uff0c\u5728UNIX\u4e2d\uff0c\u7531\u4e8e\u786c\u94fe\u63a5\uff0c\u4e00\u4e2a\u6587\u4ef6\u53ef\u4ee5\u5b58\u5728\u4e8e\u591a\u4e2a\u76ee\u5f55\u4e2d\uff0c\u56e0\u6b64\u5f53\u60a8\u5bf9\u6587\u4ef6\u8c03\u7528fsync\u65f6\uff0c\u65e0\u6cd5\u77e5\u9053\u5e94\u8be5\u5199\u51fa\u54ea\u4e9b\u76ee\u5f55(\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f)\u3002\u770b\u8d77\u6765ext4\u5b9e\u9645\u4e0a\u53ef\u4ee5\u81ea\u52a8\u5bf9\u76ee\u5f55\u8fdb\u884cfsync\uff0c\u4f46\u5bf9\u4e8e\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u53ef\u80fd\u5e76\u975e\u5982\u6b64\u3002\n\u6839\u636e\u6587\u4ef6\u7cfb\u7edf\u7684\u4e0d\u540c\uff0c\u5b9e\u73b0\u6b64\u529f\u80fd\u7684\u65b9\u5f0f\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u6211\u4f7f\u7528blktrace\u68c0\u67e5ext4\u548cXFS\u4f7f\u7528\u54ea\u4e9b\u78c1\u76d8\u64cd\u4f5c\u3002\u5b83\u4eec\u90fd\u4e3a\u6587\u4ef6\u6570\u636e\u548c\u6587\u4ef6\u7cfb\u7edf\u65e5\u5fd7\u53d1\u51fa\u6b63\u5e38\u7684\u78c1\u76d8\u5199\u5165\uff0c\u4f7f\u7528\u7f13\u5b58\u5237\u65b0\uff0c\u7136\u540e\u4ee5FUA\u5199\u5165\u65e5\u5fd7\u7ed3\u675f\uff0c\u8fd9\u53ef\u80fd\u662f\u4e3a\u4e86\u6307\u793a\u64cd\u4f5c\u5df2\u63d0\u4ea4\u3002\u5728\u4e0d\u652f\u6301FUA\u7684\u78c1\u76d8\u4e0a\uff0c\u8fd9\u6d89\u53ca\u4e24\u6b21\u7f13\u5b58\u5237\u65b0\u3002\u6211\u7684\u5b9e\u9a8c\u8868\u660e\uff0cfdatync\u6bd4fsync\u7a0d\u5fae\u5feb\u4e00\u4e9b\uff0cblktrace\u663e\u793afdatync\u503e\u5411\u4e8e\u5199\u5165\u66f4\u5c11\u7684\u6570\u636e(ext4\uff1afsync\u4e3a20KiB\uff0c\u800cfDatync\u4e3a16KiB)\u3002\u6211\u7684\u5b9e\u9a8c\u8fd8\u663e\u793a\uff0cXFS\u6bd4ext4\u7a0d\u5fae\u5feb\u4e00\u4e9b\uff0c\u540c\u6837\uff0cblktrace\u663e\u793a\u5b83\u503e\u5411\u4e8e\u5237\u65b0\u66f4\u5c11\u7684\u6570\u636e(XFS\uff1afdatync\u4e3a4KiB)\u3002\n\u5728\u6211\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\uff0c\u6211\u8bb0\u5f97\u6709\u4e09\u6b21\u4e0efsync\u76f8\u5173\u7684\u4e89\u8bae\u3002\u7b2c\u4e00\u6b21\u662f\u57282008\u5e74\uff0c\u706b\u72d03\u7684\u7528\u6237\u754c\u9762\u5728\u5199\u5165\u5927\u91cf\u6587\u4ef6\u65f6\u4f1a\u6302\u8d77\u3002\u95ee\u9898\u662fUI\u4f7f\u7528SQLite\u6570\u636e\u5e93\u4fdd\u5b58\u72b6\u6001\uff0c\u8fd9\u901a\u8fc7\u5728\u6bcf\u6b21\u63d0\u4ea4\u540e\u8c03\u7528fsync\u6765\u63d0\u4f9b\u5f3a\u5927\u7684\u6301\u4e45\u6027\u4fdd\u8bc1\u3002\u5728\u5f53\u65f6\u7684ext3\u6587\u4ef6\u7cfb\u7edf\u4e0a\uff0cfsync\u5199\u51fa\u7cfb\u7edf\u4e0a\u7684\u6240\u6709\u810f\u9875\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u76f8\u5173\u6587\u4ef6\u3002\u8fd9\u610f\u5473\u7740\u70b9\u51fbFirefox\u4e2d\u7684\u4e00\u4e2a\u6309\u94ae\u53ef\u80fd\u4f1a\u7b49\u5f85\u6570\u5146\u5b57\u8282\u7684\u6570\u636e\u5199\u5165\u78c1\u76d8\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u3002\u6211\u4ece\u4e00\u7bc7\u535a\u5ba2\u4e2d\u4e86\u89e3\u5230\uff0c\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u8bb8\u591a\u6570\u636e\u5e93\u63d0\u4ea4\u79fb\u52a8\u5230\u5f02\u6b65\u540e\u53f0\u4efb\u52a1\u3002\u8fd9\u610f\u5473\u7740Firefox\u4e4b\u524d\u4f7f\u7528\u4e86\u6bd4\u5b83\u9700\u8981\u7684\u66f4\u5f3a\u7684\u6301\u4e45\u6027\u4fdd\u8bc1\uff0c\u5c3d\u7ba1ext3\u6587\u4ef6\u7cfb\u7edf\u4f7f\u95ee\u9898\u53d8\u5f97\u66f4\u52a0\u4e25\u91cd\u3002\n2009\u5e74\u7684\u7b2c\u4e8c\u4e2a\u4e89\u8bae\u662f\uff0c\u5728\u7cfb\u7edf\u5d29\u6e83\u540e\uff0c\u65b0\u7684ext4\u6587\u4ef6\u7cfb\u7edf\u7684\u7528\u6237\u53d1\u73b0\u8bb8\u591a\u6700\u8fd1\u521b\u5efa\u7684\u6587\u4ef6\u957f\u5ea6\u4e3a\u96f6\uff0c\u800c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\n2018\u5e74\u7684\u7b2c\u4e09\u4e2a\u4e89\u8bae\u662f\uff0cPostgres\u53d1\u73b0\uff0c\u5f53fsync\u9047\u5230\u9519\u8bef\u65f6\uff0c\u5b83\u53ef\u4ee5\u5c06\u810f\u9875\u6807\u8bb0\u4e3a\u5e72\u51c0\uff0c\u56e0\u6b64\u4ee5\u540e\u8c03\u7528fsync\u4e0d\u4f1a\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u8fd9\u4f1a\u5728\u5185\u5b58\u4e2d\u7559\u4e0b\u4ece\u672a\u5199\u5165\u78c1\u76d8\u7684\u4fee\u6539\u8fc7\u7684\u9875\u9762\u3002\u8fd9\u662f\u76f8\u5f53\u707e\u96be\u6027\u7684\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u8ba4\u4e3a\u4e00\u4e9b\u6570\u636e\u5df2\u7ecf\u5199\u5165\uff0c\u4f46\u5b83\u6ca1\u6709\u3002\u5728\u8fd9\u79cd\u7f55\u89c1\u7684\u60c5\u51b5\u4e0b\uff0c\u5f53fsync\u5931\u8d25\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u505a\u7684\u4e8b\u60c5\u5f88\u5c11\u3002\u73b0\u5728\uff0cPostgres\u548c\u8bb8\u591a\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u5728\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u65f6\u4f1a\u5d29\u6e83\u3002\u4e00\u7bc7\u9898\u4e3a\u201c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4ecefsync\u6545\u969c\u4e2d\u6062\u590d\u5417\uff1f\u201d\u7684\u8bba\u6587\u3002\u53d1\u8868\u5728USENIX ATC 2020\u4e0a\u7684\u6587\u7ae0\u8be6\u7ec6\u7814\u7a76\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u76ee\u524d\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06Direct I/O\u4e0eO_SYNC\u6216O_DSYNC\u4e00\u8d77\u4f7f\u7528\uff0c\u8fd9\u5c06\u62a5\u544a\u7279\u5b9a\u5199\u5165\u64cd\u4f5c\u7684\u9519\u8bef\uff0c\u4f46\u9700\u8981\u5e94\u7528\u7a0b\u5e8f\u81ea\u5df1\u7ba1\u7406\u7f13\u51b2\u533a\u3002\u6709\u5173fsync\u9519\u8bef\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605LWN\u6587\u7ae0\u6216Postgres wiki\u9875\u9762\u3002\n\u56de\u5230\u7cfb\u7edf\u8c03\u7528\u4ee5\u5b9e\u73b0\u6301\u4e45\u6027\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u5c06O_SYNC\u6216O_DSYNC\u9009\u9879\u4e0eopen()\u7cfb\u7edf\u8c03\u7528\u4e00\u8d77\u4f7f\u7528\u3002\u8fd9\u4f1a\u5bfc\u81f4\u6bcf\u6b21\u5199\u5165\u7684\u8bed\u4e49\u5206\u522b\u4e0e\u540e\u8ddffsync/fdatync\u7684\u5199\u5165\u76f8\u540c\u3002POSIX\u89c4\u8303\u5c06\u8fd9\u79cd\u540c\u6b65I/O\u6587\u4ef6\u5b8c\u6574\u6027\u5b8c\u6210\u548c\u6570\u636e\u5b8c\u6574\u6027\u5b8c\u6210\u79f0\u4e3a\u540c\u6b65I/O\u6587\u4ef6\u5b8c\u6574\u6027\u5b8c\u6210\u548c\u6570\u636e\u5b8c\u6574\u6027\u5b8c\u6210\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e3b\u8981\u4f18\u70b9\u662f\uff0c\u60a8\u53ea\u9700\u8981\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u5728\u5199\u5165\u4e4b\u540e\u518d\u6267\u884cfdatync\u3002\u6700\u5927\u7684\u7f3a\u70b9\u662f\u4f7f\u7528\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6240\u6709\u5199\u5165\u90fd\u5c06\u540c\u6b65\uff0c\u8fd9\u53ef\u80fd\u4f1a\u9650\u5236\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u7684\u7ed3\u6784\u3002\nOpen()\u7cfb\u7edf\u8c03\u7528\u6709\u4e00\u4e2aO_DIRECT\u9009\u9879\uff0c\u8be5\u9009\u9879\u65e8\u5728\u7ed5\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u800c\u76f4\u63a5\u5bf9\u78c1\u76d8\u6267\u884cI/O\u64cd\u4f5c\u3002\u8fd9\u610f\u5473\u7740\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684WRITE\u8c03\u7528\u5c06\u76f4\u63a5\u8f6c\u6362\u4e3a\u78c1\u76d8\u547d\u4ee4\u3002\u4f46\u662f\uff0c\u901a\u5e38\u8fd9\u4e0d\u80fd\u66ff\u4ee3fsync\u6216fdatync\uff0c\u56e0\u4e3a\u78c1\u76d8\u672c\u8eab\u53ef\u4ee5\u81ea\u7531\u5730\u5ef6\u8fdf\u6216\u7f13\u5b58\u8fd9\u4e9b\u5199\u5165\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u6709\u4e00\u4e9b\u8fb9\u7f18\u60c5\u51b5\u610f\u5473\u7740O_DIRECT I/O\u4f1a\u9000\u56de\u5230\u4f20\u7edf\u7684\u7f13\u51b2I/O\u3002\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u8fd8\u4f7f\u7528O_DSYNC\u9009\u9879\u6253\u5f00\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u6b21\u5199\u5165\u540e\u90fd\u4f1a\u6709\u6548\u5730\u8ddf\u968ffdatync\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0cXFS\u6700\u8fd1\u4e3aO_DIRECT|O_DSYNC\u5199\u5165\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5feb\u901f\u8def\u5f84\u3002\u5982\u679c\u4f7f\u7528O_DIRECT|O_DSYNC\u8986\u76d6\u5757\uff0cXFS\u5c06\u53d1\u51faFua\u5199\u5165(\u5982\u679c\u8bbe\u5907\u652f\u6301)\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u7f13\u5b58\u5237\u65b0\u3002\u6211\u4f7f\u7528blktrace\u786e\u8ba4\u5728\u6211\u7684Linux5.4/Ubuntu20.04\u7cfb\u7edf\u4e0a\u53d1\u751f\u4e86\u8fd9\u79cd\u60c5\u51b5\u3002\u8fd9\u5e94\u8be5\u4f1a\u66f4\u6709\u6548\u7387\uff0c\u56e0\u4e3a\u5b83\u5c06\u6700\u5c11\u7684\u6570\u636e\u5199\u5165\u78c1\u76d8\uff0c\u5e76\u4e14\u4f7f\u7528\u5355\u4e2a\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u5148\u5199\u540e\u5237\u65b0\u7f13\u5b58\u3002\u6211\u627e\u5230\u4e862018\u5e74\u5b9e\u73b0\u6b64\u529f\u80fd\u7684\u5185\u6838\u8865\u4e01\u7684\u94fe\u63a5\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u5173\u4e8e\u4e3a\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u6b64\u4f18\u5316\u7684\u8ba8\u8bba\uff0c\u4f46\u636e\u6211\u6240\u77e5\uff0cXFS\u662f\u552f\u4e00\u8fd9\u6837\u505a\u7684\u3002\nLinux\u8fd8\u6709SYNC_FILE_RANGE\uff0c\u5b83\u5141\u8bb8\u5c06\u6587\u4ef6\u7684\u4e00\u90e8\u5206(\u800c\u4e0d\u662f\u6574\u4e2a\u6587\u4ef6)\u5237\u65b0\u5230\u78c1\u76d8\uff0c\u5e76\u89e6\u53d1\u5f02\u6b65\u5237\u65b0\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u3002\u7136\u800c\uff0c\u624b\u518c\u9875\u58f0\u660e\u5b83\u662f\u6781\u5176\u5371\u9669\u7684\uff0c\u5e76\u4e0d\u9f13\u52b1\u4f7f\u7528\u5b83\u3002\u5bf9sync_file_range\u7684\u4e00\u4e9b\u5dee\u5f02\u548c\u5371\u9669\u7684\u6700\u597d\u63cf\u8ff0\u662f\u677e\u68ee\u5409\u5178\u5173\u4e8e\u5b83\u5982\u4f55\u5de5\u4f5c\u7684\u5e16\u5b50\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cRocksDB\u4f3c\u4e4e\u4f7f\u7528\u5b83\u6765\u63a7\u5236\u5185\u6838\u4f55\u65f6\u5c06\u810f\u6570\u636e\u5237\u65b0\u5230\u78c1\u76d8\uff0c\u5e76\u4e14\u4ecd\u7136\u4f7f\u7528fdatync\u6765\u786e\u4fdd\u6301\u4e45\u6027\u3002\u5b83\u7684\u6e90\u4ee3\u7801\u4e2d\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u6ce8\u91ca\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8eZFS\uff0cSYNC_FILE_RANGE\u8c03\u7528\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5237\u65b0\u6570\u636e\u3002\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u5f88\u5c11\u4f7f\u7528\u7684\u4ee3\u7801\u53ef\u80fd\u6709bug\uff0c\u6211\u5efa\u8bae\u5728\u6ca1\u6709\u975e\u5e38\u597d\u7684\u7406\u7531\u7684\u60c5\u51b5\u4e0b\u907f\u514d\u6b64\u7cfb\u7edf\u8c03\u7528\u3002\n\u6211\u7684\u7ed3\u8bba\u662f\uff0c\u6301\u4e45I/O\u57fa\u672c\u4e0a\u6709\u4e09\u79cd\u65b9\u6cd5\uff0c\u5b83\u4eec\u90fd\u8981\u6c42\u60a8\u5728\u7b2c\u4e00\u6b21\u521b\u5efa\u6587\u4ef6\u65f6\u5bf9\u5305\u542b\u76ee\u5f55\u8c03\u7528fsync()\u3002\n\u6211\u6ca1\u6709\u4ed4\u7ec6\u8861\u91cf\u8fd9\u4e9b\uff0c\u5176\u4e2d\u8bb8\u591a\u5dee\u5f02\u975e\u5e38\u5c0f\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u80fd\u662f\u9519\u8bef\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u6781\u6709\u53ef\u80fd\u6539\u53d8\u7684\u3002\u8fd9\u4e9b\u5927\u81f4\u4ece\u6700\u5927\u5f71\u54cd\u5230\u6700\u5c0f\u5f71\u54cd\u6392\u5e8f\u3002\n\u8986\u76d6\u6bd4\u8ffd\u52a0\u66f4\u5feb(\u5927\u7ea6\u5feb2-100%)\uff1a\u8ffd\u52a0\u6d89\u53ca\u989d\u5916\u7684\u5143\u6570\u636e\u66f4\u65b0\uff0c\u5373\u4f7f\u5728\u9519\u8bef\u5b9a\u4f4d\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\u4e5f\u662f\u5982\u6b64\uff0c\u4f46\u6548\u679c\u7684\u5927\u5c0f\u6709\u6240\u4e0d\u540c\u3002\u6211\u7684\u5efa\u8bae\u662f\u4e3a\u4e86\u83b7\u5f97\u6700\u4f73\u6027\u80fd\uff0c\u8bf7\u8c03\u7528falocate()\u9884\u5148\u5206\u914d\u6240\u9700\u7684\u7a7a\u95f4\uff0c\u7136\u540e\u663e\u5f0f\u5730\u5c06\u5176\u586b\u96f6\u5e76\u6267\u884cfsync\u3002\u8fd9\u53ef\u786e\u4fdd\u6570\u636e\u5757\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6807\u8bb0\u4e3a&#34\uff1b\u5df2\u5206\u914d&#34\uff1b\uff0c\u800c\u4e0d\u662f&#34\uff1b\u672a\u5206\u914d&#34\uff1b\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684(~2%)\u6539\u8fdb\u3002\u6b64\u5916\uff0c\u67d0\u4e9b\u78c1\u76d8\u5728\u9996\u6b21\u8bbf\u95ee\u6570\u636e\u5757\u65f6\u53ef\u80fd\u4f1a\u964d\u4f4e\u6027\u80fd\uff0c\u8fd9\u610f\u5473\u7740\u586b\u96f6\u53ef\u80fd\u4f1a\u5e26\u6765\u5f88\u5927\u7684\u6539\u8fdb(~100%)\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cAWS EBS\u78c1\u76d8(\u975e\u5b98\u65b9\u78c1\u76d8\uff0c\u6211\u5c1a\u672a\u786e\u8ba4)\u548cGCP\u6c38\u4e45\u78c1\u76d8(\u5b98\u65b9\u78c1\u76d8\uff1b\u57fa\u51c6\u78c1\u76d8\u5df2\u786e\u8ba4)\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002\u5176\u4ed6\u4eba\u4e5f\u7528\u4e0d\u540c\u7684\u5706\u76d8\u505a\u4e86\u540c\u6837\u7684\u89c2\u5bdf\u3002\n\u7cfb\u7edf\u8c03\u7528\u8d8a\u5c11\uff0c\u901f\u5ea6\u5c31\u8d8a\u5feb(\u5927\u7ea6\u5feb5%)\uff1a\u4f7f\u7528OPEN WITH O_DSYNC\u6216pwritev2 WITH RWF_SYNC\u4f3c\u4e4e\u6bd4\u663e\u5f0f\u8c03\u7528fdatync\u8981\u5feb\u4e00\u4e9b\u3002\u6211\u6000\u7591\u8fd9\u662f\u56e0\u4e3a\u7cfb\u7edf\u8c03\u7528\u5f00\u9500\u7565\u4f4e(\u53ea\u8c03\u7528\u4e00\u6b21\u800c\u4e0d\u662f\u4e24\u6b21)\u3002\u4f46\u662f\uff0c\u5dee\u522b\u5f88\u5c0f\uff0c\u6240\u4ee5\u53ea\u8981\u80fd\u8ba9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u66f4\u7b80\u5355\uff0c\u5c31\u505a\u4ec0\u4e48\u90fd\u884c\u3002\nI/O\u8bbf\u95ee\u65b9\u6cd5\uff1aI/O\u57fa\u7840\u77e5\u8bc6\u6982\u8ff0\uff0c\u5305\u62ec\u6709\u5173\u5982\u4f55\u5728\u78c1\u76d8\u3001\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\u7684\u4e00\u4e9b\u91cd\u8981\u56fe\u8868\u3002\n\u786e\u4fdd\u6570\u636e\u5230\u8fbe\u78c1\u76d8\uff1a\u6df1\u5165\u6982\u8ff0\u5728Linux\u4e2d\u5c06\u6570\u636e\u4ece\u5e94\u7528\u7a0b\u5e8f\u83b7\u53d6\u5230\u78c1\u76d8\u3002\n\u4f55\u65f6\u5e94\u8be5fsync\u5305\u542b\u7684\u76ee\u5f55\uff1a\u4e00\u4e2a\u5f88\u597d\u7684\u6458\u8981(\u5f53\u60a8\u6709\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u6587\u4ef6&#34\uff1b\u65f6)\u4ee5\u53ca\u4e3a\u4ec0\u4e48(&#34\uff1b\u56e0\u4e3aUNIX\u6587\u4ef6\u7cfb\u7edf\u94fe\u63a5\u53ef\u80fd\u904d\u53ca\u6574\u4e2a\u4f4d\u7f6e&#34\uff1b)\u3002\nLinux\u4e0a\u7684SQL Server\uff1aFUA\u5185\u90e8\uff1a\u63cf\u8ff0SQL Server\u5982\u4f55\u5728Linux\u4e0a\u5b9e\u73b0\u6301\u4e45\u5199\u5165\u3002\u8fd9\u5728Windows\u548cLinux\u7cfb\u7edf\u8c03\u7528\u4e4b\u95f4\u8fdb\u884c\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u6bd4\u8f83\u3002\u6211\u975e\u5e38\u80af\u5b9a\u8fd9\u5c31\u662f\u6211\u53d1\u73b0XFS Fua\u4f18\u5316\u7684\u539f\u56e0\u3002", "note_en": "As part of investigating the durability provided by cloud systems, I wanted to make sure I understood the basics. I started by  reading the NVMe specification, to understand the guarantees provided by disks. The summary is that you should assume your data is corrupt between when a write is issued until after a flush or force unit access write completes. However, most programs use system calls to write data. This article looks at the guarantees provided by the Linux file APIs. It seems like this should be simple: a program calls  write() and after it completes, the data is durable. However,  write() only copies data from the application into the kernel&#39;s cache in memory. To force the data to be durable you need to use some additional mechanism. This article is a messy collection of notes about what I&#39;ve learned. (The really brief summary: use fdatasync or open with O_DSYNC.) For a better and clearer overview, see LWN&#39;s  Ensuring data reaches disk, which walks from application code through to the disk.\n  The write system call is defined in the  IEEE POSIX standard as attempting to write data to a file descriptor. After it successfully returns, reads are required to return the bytes that were written, even when read or written by other processes or threads ( POSIX standard write(); Rationale). There is an addition note under  Thread Interactions with Regular File Operations that says &#34;If two threads each call one of these functions, each call shall either see all of the specified effects of the other call, or none of them.&#34; This suggests that all file I/O must effectively hold a lock.\n Does that mean write is atomic? Technically, yes: future reads must return the entire contents of the write, or none of it. However, write is not required to be  complete, and is allowed to only transfer  part of the data. For example, we could have two threads, each appending 1024-bytes to a single file descriptor. It would be acceptable for the two writes to each only write a single byte. This is still &#34;atomic&#34;, but also results in undesirable interleaved output. There is a great  StackOverflow answer with more details.\n  The most straightforward way to get your data on disk is to call  fsync(). It requests the operating system to transfer all modified blocks in cache to disk, along with all file metadata (e.g. access time, modification time, etc). In my opinion, that metadata is rarely useful, so you should use fdatasync unless you know you need the metadata. The  fdatasync man page says it is required to flush as much metadata as necessary &#34;for a subsequent data read to be handled correctly&#34;, which is what most applications care about.\n One issue is this is not guaranteed to ensure you can  find the file again. In particular, when you first create a file, you need to call fsync on the directory that contains it, otherwise it might not exist after a failure. The reason is basically that in UNIX, a file can exist in multiple directories due to hard links, so when you call fsync on a file, there is no way to tell which directories should be written out ( more details). It appears that ext4 may actually  fsync the directory automatically, but that might not be true for other filesystems.\n The way this is implemented will vary depending on the file system. I used  blktrace to examine what disk operations ext4 and xfs use. They both issue normal disk writes for both the file data and the file system journal, use a cache flush, then finish with a FUA write to the journal, probably to indicate the operation has committed. On disks that do not support FUA, this involves two cache flushes. My experiments show that fdatasync is slightly faster than fsync, and blktrace shows fdatasync tends to write a bit less data (ext4: 20 kiB for fsync vs 16 kiB for fdatasync). My experiments also show that xfs is slightly faster than ext4, and again blktrace shows it tends to flush less data (xfs: 4 kiB for fdatasync).\n  In my professional career, I can remember three fsync-related controversies. The first, in 2008, was that Firefox 3&#39;s UI would hang when lots of files were being written. The problem is the UI used the SQLite database to save state, which provides strong durability guarantees by calling fsync after each commit. On the ext3 filesystem of the time, fsync wrote out  all dirty pages on the system, rather than just the relevant file. This meant that clicking a button in Firefox could wait for many megabytes of data to be written on magnetic disks, which could take seconds. The solution, as I understand  from a blog, was to move many database commits to asynchronous background tasks. This means Firefox was previously using stronger durability guarantees than it needed, although the problem was made much worse by the ext3 filesystem.\n The second controversy, in 2009, was that after a system crash, users of the new ext4 filesystem found many recently created files would have zero length, which did not happen with the older ext3 filesystem. In the previous controversy, ext3 was flushing too much data, which caused really slow fsync calls. To fix it, ext4 flushes only the relevant dirty pages to disk. For other files, it keeps them in memory for much longer to improve performance (defaulting to 30 seconds, configured with  dirty_expire_centiseconds;  note). This means after a crash, lots of data might be missing. The solution is to add fsyncs to applications that want to ensure data will survive crashes, since fsyncs are much more efficient with ext4. The downside is this still makes operations like installing software slower. For more details, see  LWN&#39;s article, or  Ted Ts&#39;o&#39;s explaination.\n The third controversy, in 2018, is that Postgres discovered that when fsync encounters an error, it can mark dirty pages as &#34;clean&#34;, so future calls to fsync do nothing. This leaves modified pages in memory that are never written to disk. This is pretty catastrophic, since the application thinks some data has been written, but it has not. There are very few things an application can do in this rare case when fsync fails. Postgres and many other applications now crash when it happens. A paper titled  Can Applications Recover from fsync Failures? published in USENIX ATC 2020 investigates the issue in detail. The best solution at the moment is to use Direct I/O with O_SYNC or O_DSYNC, which will report errors on specific write operations, but requires the application to manage buffers itself. For more details, see the  LWN article or the  Postgres wiki page about fsync errors.\n  Back to system calls for durability. Another option is to use the O_SYNC or O_DSYNC options with the  open() system call. This causes every write to have the same semantics as a write followed by fsync/fdatasync, respectively. The POSIX specification calls this  Synchronized I/O File Integrity Completion and Data Integrity Completion. The main advantage of this approach is that you need a single system call, instead of write followed by fdatasync. The biggest disadvantage is that all writes using that file descriptor will be synchronized, which may limit how the application code is structured.\n  The open() system call has an O_DIRECT option which is intended to bypass the operating system&#39;s cache, and instead do I/O directly with the disk. This means in many cases, an application&#39;s write call will translate directly into a disk command. However, in general this is not a replacement for fsync or fdatasync, since the  disk itself is free to delay or cache those writes. Even worse, there are  edge cases that mean O_DIRECT I/O falls back to traditional buffered I/O. The easiest solution is to also use the O_DSYNC option to open, which means each write is effectively followed by fdatasync.\n It turns out that XFS somewhat recently added a &#34;fast path&#34; for O_DIRECT|O_DSYNC writes. If you are overwriting blocks with O_DIRECT|O_DSYNC, XFS will issue a FUA write if the device supports it, rather than using a cache flush. I used blktrace to confirm this happens on my Linux 5.4/Ubuntu 20.04 system. This should be more efficient, since it writes the minimum amount of data to disk, and uses a single operation instead of a write followed by a cache flush. I found a link to the  kernel patch that implemented this in 2018, which has some discussion about implementing this optimization for other filesystems, but as far as I know XFS is the only one that does.\n  Linux also has  sync_file_range, which can allow flushing  part of a file to disk, rather than the entire file, and triggering an asynchronous flush, rather than waiting for it. However, the man page states that it is &#34;extremely dangerous&#34; and discourages its use. The best description of some of the differences and dangers with sync_file_range is  Yoshinori Matsunobu&#39;s post about how it works. Notably, it seems that RocksDB uses this to control when the kernel flushes dirty data to disk, and still uses fdatasync to ensure durability. It  has some interesting comments in its source code. For example, it appears that with zfs, the sync_file_range call does not actually flush data. Given my experience that code that is rarely used probably has bugs, I would recommend avoiding this system call without very good reasons.\n  My conclusion is there are basically three approaches for durable I/O. All of them require you to call fsync() on the containing directory when you first create a file.\n   I have not measured these carefully, and many of these differences are very small, which means they could be false, or are highly likely to change. These are roughly ordered from largest to smallest effects.\n Overwriting is faster than appending (~2-100% faster): Appending involves additional metadata updates, even after an fallocate system call, but the size of the effect varies. My recommendation is for best performance, call fallocate() to pre-allocate the space you need, then explicitly zero-fill it and fsync. This ensures the blocks are marked as &#34;allocated&#34; rather than &#34;unallocated&#34; in the file system, which is a small (~2%) improvement. Additionally, some disks may have a performance penalty for the first access to a block, which means zero filling can cause large improvements (~100%). Notably, this may happen to  AWS EBS disks (not official, I have not confirmed) and  GCP Persistent Disk (official; confirmed with benchmark).  Others have made the same observation with different disks.\n Fewer system calls are faster (~5% faster): It seems to be slightly faster to use open with O_DSYNC or pwritev2 with RWF_SYNC instead of explicitly calling fdatasync. I suspect this is because there is slightly less system call overhead (one call instead of two). However, the difference is pretty small, so do whatever makes your application logic simpler.\n  I/O Access methods: A great overview of I/O basics, including some great diagrams of how data is transferred between disk, operating system, and application.\n Ensuring data reaches disk: An in-depth overview of getting data from an application to disk in Linux.\n When should you fsync the containing directory: A nice summary (&#34;when you have a newly created file&#34;) and why (&#34;because UNIX file system links could be all over the place&#34;).\n SQL Server on Linux: FUA Internals: A description of how SQL Server implements durable writes on Linux. This has some interesting comparisons between Windows and Linux system calls. I&#39;m pretty sure this is how I found out about the XFS FUA optimization.", "posttime": "2020-10-13 20:07:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u78c1\u76d8", "title": "\u6301\u4e45\u6027\uff1aLinux\u6587\u4ef6API", "title_en": "Durability: Linux File APIs", "transed": 1, "url": "https://www.evanjones.ca/durability-filesystem.html", "via": "", "real_tags": ["linux", "\u78c1\u76d8"]}, {"category": "", "categoryclass": "", "imagename": "ba0de7008b531d0b476e6a2c022f16e3.jpeg", "infoid": 1028425, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u6709\u8fc7Raspberry Pi 4\u7684\u4f7f\u7528\u7ecf\u9a8c\uff0c\u7279\u522b\u662f\u5728\u5b83\u53d1\u5e03\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u610f\u8bc6\u5230\u8fd9\u4e00\u4ee3\u7684Raspberry Pi\u5728\u9002\u5ea6\u7684\u8d1f\u8f7d\u4e0b\u4f1a\u53d8\u5f97\u76f8\u5f53\u8212\u9002\u3002\u8fd9\u6700\u521d\u5bfc\u81f4\u4e86\u4e00\u4e9b\u76f8\u5f53\u75af\u72c2\u7684\u4e3b\u52a8\u51b7\u5374\u8bbe\u8ba1\u5728\u5e02\u573a\u4e0a\u7684\u6811\u8393\u6d3e4\u3002\n\u867d\u7136\u8bb8\u591a\u56f0\u6270Raspberry Pi 4\u7684\u6563\u70ed\u95ee\u9898\u5df2\u7ecf\u901a\u8fc7\u56fa\u4ef6\u66f4\u65b0\u5f97\u5230\u7f13\u89e3\uff0c\u4ee5\u663e\u8457\u964d\u4f4e\u7a7a\u95f2\u548c\u4e2d\u7b49\u8d1f\u8f7d\u65f6\u7684\u529f\u8017\uff0c\u4f46Raspberry Pi 4\u5728\u8f83\u9ad8\u8d1f\u8f7d\u4e0b\u4ecd\u7136\u4f1a\u53d8\u5f97\u9177\u70ed\u3002\u8fd9\u4f1a\u5bfc\u81f4ARM\u56db\u6838\u82af\u7247\u7ec4\u901a\u8fc7\u4f7f\u7528\u52a8\u6001\u9891\u7387\u8c03\u6574(DFS)\u548c\u52a8\u6001\u7535\u538b\u8c03\u6574(DVS)\u964d\u4f4e\u6027\u80fd\u6765\u4fdd\u62a4\u81ea\u8eab\u3002DFS\u548cDVS\u662f\u7528\u4e8e\u964d\u4f4e\u82af\u7247\u7ec4\u6027\u80fd\u4ee5\u964d\u4f4e\u7ed3\u6e29\u7684\u65b9\u6cd5\uff0c\u901a\u5e38\u7b80\u79f0\u4e3a\u70ed\u8282\u6d41\u3002\u5728\u6811\u8393PI 4\u4e0a\uff0c\u8fd9\u79cd\u70ed\u8282\u6d41\u5927\u7ea6\u572880\u00b0C\u5de6\u53f3\u5f00\u59cb\u3002\n\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u5f53\u6211\u4eec\u542c\u8bf4\u6811\u8393PI\u6709\u4e00\u79cd\u88ab\u52a8\u51b7\u5374\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u5c06\u6e29\u5ea6\u4fdd\u6301\u5728\u8db3\u591f\u4f4e\u7684\u6c34\u5e73\uff0c\u4ee5\u9632\u6b62\u5e93\u5b58\u901f\u5ea6\u4e0b\u7684\u70ed\u8282\u6d41\u65f6\uff0c\u6211\u4eec\u6709\u70b9\u6000\u7591\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u6211\u4eec\u8fd8\u662f\u5bf9GemPro\u7684\u6848\u4f8b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u770b\u770b\u5b83\u662f\u5426\u5982\u5176\u58f0\u79f0\u7684\u90a3\u6837\u3002\n\u8868\u58f3\u672c\u8eab\u7531\u953b\u9020\u6216\u94f8\u94dd\u5236\u6210\uff0c\u5f53\u88c5\u8f7d\u8986\u76c6\u5b50PI\u548cSD\u5361\u65f6\uff0c\u91cd\u91cf\u60ca\u4eba\u5730\u9ad8\u8fbe262.7\u514b\u3002\u8fd9\u4e00\u5206\u91cf\u662f\u4e00\u4e2a\u597d\u8ff9\u8c61\uff0c\u589e\u52a0\u4e86\u76f8\u5f53\u591a\u7684\u51c6\u786e\u6027\uff0c\u4ee5\u652f\u6301\u4e0e\u6b64\u6848\u6709\u5173\u7684\u8bf4\u6cd5\u7684\u51b7\u5374\u80fd\u529b\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u88ab\u52a8\u51b7\u5374\u7bb1\u4f7f\u7528\u6574\u4e2a\u5916\u58f3\u672c\u8eab\u4f5c\u4e3a\u6563\u70ed\u5668\uff0c\u56e0\u6b64\uff0c\u6750\u6599\u548c\u8868\u9762\u79ef\u8d8a\u5927\uff0c\u51b7\u5374\u6f5c\u529b\u5c31\u8d8a\u597d\u3002\n\u5916\u58f3\u7531\u4e24\u4e2a\u4e3b\u8981\u90e8\u4ef6\u7ec4\u6210\uff0c\u5b83\u4eec\u62e7\u5728\u4e00\u8d77\uff0c\u90fd\u6709\u55b7\u7802\u7eb9\u7406\u7684\u8868\u9762\u3002\u5916\u58f3\u7684\u9876\u90e8\u6709\u4e00\u4e2a\u56fe\u6848\uff0c\u770b\u8d77\u6765\u50cf\u662f\u78e8\u8fdb\u4e86\u8868\u9762\uff0c\u6709\u70b9\u50cf\u4e00\u6761\u9e45\u5375\u77f3\u5c0f\u8def\uff0c\u8fd9\u65e0\u7591\u4f7f\u8bbe\u8ba1\u770b\u8d77\u6765\u5f88\u72ec\u7279\u3002\n\u5fae\u578bHDMI\u3001\u97f3\u9891\u548cUSB-C\u8fde\u63a5\u5668\u7684\u5b54\u88ab\u7cbe\u5bc6\u5207\u5272\u5230\u5b58\u50a8\u6a21\u5757\u7684\u4fa7\u9762\uff0c\u5e76\u4e14\u5fae\u578bHDMI\u8f93\u5165\u5468\u56f4\u6ca1\u6709\u51f9\u69fd\uff0c\u4ee5\u5bb9\u7eb3\u67d0\u4e9b\u5fae\u578bHDMI\u8fde\u63a5\u5668\u4e0a\u7684\u8fc7\u5ea6\u6210\u578b\u3002\u867d\u7136\u8fd9\u53ef\u80fd\u4f1a\u5728\u8bb8\u591a\u7c7b\u578b\u7684\u5fae\u578bHDMI\u7535\u7f06\u4e0a\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u6211\u4eec\u7684\u7535\u7f06\u5f88\u96be\u5b9e\u73b0\u53ef\u9760\u7684\u8fde\u63a5\u3002\u649e\u51fb\u7535\u7f06\u5c06\u5bfc\u81f4\u5c4f\u5e55\u4e0a\u7684\u56fe\u50cf\u4e22\u5931\u3002\u8fd9\u4e5f\u53ef\u80fd\u662f\u7535\u7f06\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u5b58\u50a8\u6a21\u5757\u7684\u95ee\u9898\uff0c\u4f46\u5f53\u7136\u503c\u5f97\u4e00\u63d0\u7684\u662f\u3002\n\u7136\u800c\uff0c\u6709\u51e0\u4ef6\u4e8b\u662f\u6211\u4eec\u5e0c\u671b\u770b\u5230\u7684\u3002\u7b2c\u4e00\u79cd\u662f\u4e00\u4e9b\u9632\u6ed1\u6a61\u80f6\u811a\u3002\u7bb1\u5b50\u5e95\u90e8\u7684\u87ba\u4e1d\u662f\u6c89\u5934\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0e\u7bb1\u5b50\u5e73\u9f50\uff0c\u4e0d\u4f1a\u522e\u4f24\u60a8\u7684\u684c\u5b50\u8868\u9762\uff0c\u7136\u800c\uff0c\u6211\u4eec\u8ba4\u4e3a\u6a61\u80f6\u811a\u5c06\u5b83\u4fdd\u6301\u5728\u60a8\u7684\u684c\u5b50\u8868\u9762\u4e0a\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8865\u5145\uff0c\u65e2\u53ef\u4ee5\u8ba9\u7bb1\u5b50\u4e0b\u9762\u7684\u7a7a\u6c14\u6d41\u52a8\uff0c\u4e5f\u53ef\u4ee5\u8ba9\u7bb1\u5b50\u4e0a\u65b9\u7684\u7a7a\u6c14\u6d41\u901a\u3002\n\u8fd9\u4e5f\u5c06\u662f\u5f88\u597d\u7684\u6709\u4e00\u4e9b\u9884\u5148\u653b\u4e1d\u5b89\u88c5\u5b54\u5728\u540e\u65b9\u6216\u5e95\u90e8\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5b89\u88c5\u5916\u58f3\u3002\u8fd9\u5c06\u4f7f\u521b\u5efaVESA\u652f\u67b6\u53d8\u5f97\u5bb9\u6613\u5f97\u591a\uff0c\u4f8b\u5982\uff0c\u5b83\u5c06\u5141\u8bb8\u60a8\u5c06Raspberry PI\u5b89\u88c5\u5230\u60a8\u7684\u663e\u793a\u5668\u6216\u7535\u89c6\u673a\u7684\u80cc\u9762\u3002\n\u6211\u4eec\u6ce8\u610f\u5230\u7684\u6700\u4e25\u91cd\u7684\u95ee\u9898\u662fGPIO\u63a5\u5934\u5728\u5916\u58f3\u7684\u4e0b\u4fa7\u65ad\u5f00\uff0c\u9700\u8981\u4ee5\u5947\u602a\u7684\u89d2\u5ea6\u64cd\u4f5c\u8fde\u63a5\u7684\u7535\u7f06\u624d\u80fd\u79bb\u5f00\u673a\u7bb1\u3002\u8fd9\u4f3c\u4e4e\u6709\u70b9\u4e8b\u540e\u7684\u60f3\u6cd5\u3002\n\u6700\u540e\uff0c\u867d\u7136\u7ec4\u88c5\u76f8\u5f53\u7b80\u5355\uff0c\u4f46\u662f\u5305\u542b\u7684\u8bf4\u660e\u53ef\u4ee5\u8ba9\u60a8\u8f7b\u677e\u5730\u8fdb\u884c\u3002\n\u8fd9\u4e2a\u5916\u58f3\u5728\u4f7f\u7528\u524d\u9700\u8981\u7a0d\u5fae\u7ec4\u88c5\u4e00\u4e0b\u3002\u5b83\u6709\u4e24\u4e2a\u673a\u68b0\u52a0\u5de5\u7684\u94dd\u5757\uff0c\u65e8\u5728\u4ece\u6811\u8393PI\u7684\u4e0d\u540c\u533a\u57df\u5438\u6536\u70ed\u91cf\uff0c\u5e76\u8fdb\u5165\u5916\u58f3\u672c\u8eab\u7684\u94dd\u4e2d\u3002\u8fd9\u4e9b\u5757\u901a\u8fc7\u70ed\u7cca\u5242\u8fde\u63a5\u5230\u5916\u58f3\u4e0a\u3002\n\u8fd9\u662fGemPro\u5916\u58f3\u4e0e\u6211\u4eec\u5728Raspberry PI 4\u4e2d\u770b\u5230\u7684\u4e00\u4e9b\u66f4\u6781\u7aef\u7684\u4e3b\u52a8\u51b7\u5374\u65b9\u6cd5\u4e4b\u95f4\u7684\u4e00\u4e2a\u91cd\u8981\u533a\u522b\u3002\u4e00\u4e9b\u6d41\u884c\u7684\u4e3b\u52a8\u51b7\u5374\u8bbe\u8ba1\u4ec5\u7528\u4e8e\u51b7\u5374\u5904\u7406\u5668\u672c\u8eab\u3002\u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u89c2\u5bdf\u6811\u8393PI\u7684\u6e29\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6709\u51e0\u4e2a\u533a\u57df\u5728\u8d1f\u8f7d\u4e0b\u53d8\u70ed\u3002\u5927\u7684\u767d\u8272\u6b63\u65b9\u5f62\u662f\u6700\u70ed\u7684\u533a\u57df\uff0c\u8fbe\u523075\u00b0C\uff0c\u8fd9\u5e76\u4e0d\u4ee4\u4eba\u60ca\u8bb6\u7684\u662fBroadcom BCM2711\u5904\u7406\u5668\u3002\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230USB-C\u8f93\u5165\u63a5\u53e3\u65c1\u8fb9\u6709\u4e00\u4e2a\u70ed\u70b9\u3002PCB\u7684\u8fd9\u4e00\u90e8\u5206\u662fMaxlineMxL7704\u7535\u6e90\u7ba1\u7406\u96c6\u6210\u7535\u8def(PMIC)\u548c\u968f\u9644\u7684\u7535\u611f\u5668\u3002\u8be5IC\u8d1f\u8d23\u5411\u5904\u7406\u5668\u548c\u76f8\u5173\u786c\u4ef6\u63d0\u4f9b\u8c03\u8282\u7535\u6e90\u3002\u6b63\u5982\u6211\u4eec\u4ece\u70ed\u50cf\u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0c\u5728\u6b63\u5e38\u64cd\u4f5c\u4e0b\uff0c\u8fd9\u4e9b\u6e29\u5ea6\u5f88\u5bb9\u6613\u8fbe\u523070\u00b0C\u5de6\u53f3\u7684\u6e29\u5ea6\uff0c\u8fd9\u4f1a\u968f\u7740\u8d85\u9891\u800c\u589e\u52a0\uff0c\u5982\u679c\u60a8\u50cf\u8fd9\u4e2a\u8c03\u8282\u5668\u90a3\u6837\u4eceGPIO\u6c72\u53d6\u5f88\u5927\u7684\u7535\u6d41\uff0c\u90a3\u4e48\u5c31\u4f1a\u627f\u53d7\u66f4\u5927\u7684\u538b\u529b\u3002\nGemPro\u5916\u58f3\u6709\u4e00\u4e2aL\u5f62\u5757\uff0c\u5b83\u8fde\u63a5\u5230\u8fd9\u4e2a\u533a\u57df\u548c\u4e3b\u5904\u7406\u5668\u3002\nGemPro\u8fd8\u914d\u5907\u4e86\u4e00\u4e2a\u8f83\u5c0f\u7684\u65b9\u5f62\u6a21\u5757\uff0c\u53ef\u8fde\u63a5VI Labs VL805USB\u63a7\u5236\u5668\u3002\u6709\u8da3\u7684\u662f\uff0c\u8fd9\u5728\u70ed\u50cf\u4e2d\u5e76\u6ca1\u6709\u663e\u793a\u51fa\u592a\u70ed\uff0c\u7136\u800c\uff0c\u5982\u679c\u4f60\u8fd0\u884c\u51e0\u4e2aUSB\u8bbe\u5907\uff0c\u82af\u7247\u5f88\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u70ed\u3002\u56e0\u6b64\uff0c\u6709\u9644\u52a0\u7269\u662f\u975e\u5e38\u597d\u7684\u3002\n\u603b\u800c\u8a00\u4e4b\uff0c\u8be5\u6848\u4f8b\u4f3c\u4e4e\u6db5\u76d6\u4e86\u6240\u6709\u7684\u8981\u6c42\uff0c\u4ee5\u4fdd\u6301\u6811\u8393PI\u5e73\u7a33\u8fd0\u884c\uff0c\u800c\u4e0d\u662f\u70ed\u8282\u6d41\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u8bc1\u636e\u5c31\u5728\u7ed3\u679c\u4e2d\uff0c\u6211\u4eec\u6e34\u671b\u8ba9\u6848\u4ef6\u901a\u8fc7\u5b83\u7684\u6b65\u8c03\u3002\n\u4e3a\u4e86\u5f7b\u5e95\u6d4b\u8bd5\u5916\u58f3\u5e76\u6839\u636e\u7ed3\u679c\u5f97\u51fa\u6709\u610f\u4e49\u7684\u7ed3\u8bba\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u6d4b\u8bd5\u5916\u58f3\u7684\u70ed\u6027\u80fd\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u65b0\u7684Raspberry PI OS SD\u5361\uff0c\u5e76\u5b89\u88c5\u4e86Stressberry\u7a0b\u5e8f\uff0c\u53ef\u4ecehttps://pypi.org/project/stressberry/\u83b7\u5f97\u3002\n\u8be5\u7a0b\u5e8f\u5c06\u5141\u8bb8\u6211\u4eec\u6a21\u62df\u5904\u7406\u5668\u4e0a\u7684\u8d1f\u8f7d\u4e00\u6bb5\u9884\u5b9a\u7684\u65f6\u95f4\uff0c\u5e76\u5c06\u8fc7\u7a0b\u4e2d\u7684\u6e29\u5ea6\u7ed8\u5236\u6210\u56fe\u8868\u3002\u8fd9\u5c06\u5411\u6211\u4eec\u5c55\u793a\u8986\u76c6\u5b50PI 4\u5728\u73af\u5883\u6e29\u5ea6\u4e4b\u4e0a\u7684\u6e29\u5ea6\u6709\u591a\u9ad8\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u7528\u6765\u8861\u91cf\u7279\u5b9a\u56f4\u680f\u7684\u6709\u6548\u6027\u3002\n\u4e3a\u4e86\u5c06\u53d8\u91cf\u964d\u81f3\u6700\u4f4e\uff0c\u6211\u4eec\u5c06\u529e\u516c\u5ba4\u7684\u7a7a\u8c03\u8bbe\u7f6e\u4e3a25\u00b0C\uff0c\u5e76\u786e\u4fdd\u6d4b\u8bd5\u4e2d\u7684\u8bbe\u5907\u4e0d\u5728\u6253\u5f00\u7684\u95e8\u6216\u7a7a\u8c03\u8bbe\u5907\u7684\u4efb\u4f55\u901a\u98ce\u8def\u5f84\u4e0a\u3002\nStressberry\u6d4b\u8bd5\u5c06\u52a0\u8f7d\u5904\u7406\u5668\uff0c\u4f7f\u5176\u572830\u5206\u949f\u5185\u8fbe\u5230\u6700\u5927\u8d1f\u8f7d\u3002\u6d4b\u8bd5\u524d\u3001\u540e5\u5206\u949f\u6d4b\u91cf\u5e76\u663e\u793a\u6020\u901f\u6e29\u5ea6\uff0c\u663e\u793a\u6020\u901f\u6e29\u5ea6\u53ca\u6062\u590d\u60c5\u51b5\u3002\n\u6211\u4eec\u7684\u7b2c\u4e00\u6b65\u662f\u83b7\u5f97\u4e00\u4e2a\u57fa\u7ebf\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u8861\u91cf\u6709\u6548\u6027\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u6d4b\u8bd5\u4e86\u6811\u8393\u6d3e4\u6ca1\u6709\u4efb\u4f55\u51b7\u5374\u6216\u5916\u58f3\u548c\u5e93\u5b58\u901f\u5ea6\u3002\n\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u5904\u7406\u5668\u6e29\u5ea6\u5728\u7a7a\u95f2\u65f6\u5f00\u59cb\u65f6\u7ea6\u4e3a47\u00b0C(\u9ad8\u4e8e\u73af\u588322\u00b0C)\uff0c\u5728\u7a7a\u95f2\u65f6\u4e0a\u5347\u4e861\u52302\u5ea6\u3002\u5f53\u65bd\u52a0\u8d1f\u8f7d\u65f6\uff0c\u6e29\u5ea6\u8fc5\u901f\u4e0a\u5347\u523080\u00b0C\uff0c\u8bbe\u5907\u4f1a\u5bf9\u5904\u7406\u5668\u8fdb\u884c\u70ed\u8282\u6d41\uff0c\u4ee5\u9632\u6b62\u635f\u574f\u3002\u5728\u65bd\u52a0\u8d1f\u8f7d\u768415\u5206\u949f\u5185\uff0c\u6811\u8393PI\u5df2\u8fbe\u523080\u00b0C\u3002\u4e00\u65e6\u4ece\u5904\u7406\u5668\u79fb\u9664\u8d1f\u8f7d\uff0c\u6e29\u5ea6\u8fc5\u901f\u4e0b\u964d\u523060\u00b0C\uff0c\u7136\u540e\u5728\u7a7a\u95f2\u7ea65\u5206\u949f\u540e\u8fbe\u523052\u00b0C\u3002\n\u57fa\u7ebf\u6d4b\u8bd5\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u5c06\u76f8\u540c\u7684Raspberry PI\u5b89\u88c5\u5230GemPro\u673a\u7bb1\u4e2d\uff0c\u5e76\u91cd\u590d\u5b8c\u5168\u76f8\u540c\u7684\u6d4b\u8bd5\u3002\u8fd9\u4ea7\u751f\u4e86\u4ee5\u4e0b\u7ed3\u679c\u3002\n\u4f7f\u7528GemPro\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7684\u7a7a\u95f2\u6e29\u5ea6\u572830\u00b0C\u5df2\u7ecf\u663e\u8457\u964d\u4f4e\uff0c\u4ec5\u6bd4\u73af\u5883\u6e29\u5ea6\u9ad85\u00b0C\u3002\u5f53\u65bd\u52a0\u8d1f\u8f7d\u65f6\uff0c\u6e29\u5ea6\u6700\u9ad8\u53ef\u8fbe36\u00b0C\u5de6\u53f3\u3002\u6ee1\u8f7d15\u5206\u949f\u540e\uff0c\u6e29\u5ea6\u5df2\u8fbe\u5230\u6bd4\u73af\u5883\u6e29\u5ea6\u9ad8\u51fa\u7ea643\u00b0C\u621618\u00b0C\u7684\u6700\u9ad8\u6e29\u5ea6\u3002\u8fd9\u6bd4\u6811\u8393PI 4\u5728\u7a7a\u95f2\u65f6\u6ca1\u6709\u4efb\u4f55\u51b7\u5374\u7684\u60c5\u51b5\u4e0b\u8981\u51b7\u53745\u00b0C\uff01\u4e00\u65e6\u5378\u4e0b\u8d1f\u8f7d\uff0c\u5904\u7406\u5668\u7684\u6e29\u5ea6\u5c06\u4ece\u6700\u9ad8\u6e29\u5ea643\u00b0C\u8fc5\u901f\u964d\u81f3\u7ea637\u00b0C\uff0c\u5e76\u4fdd\u6301\u8be5\u6e29\u5ea6\u76f4\u5230\u6d4b\u8bd5\u7ed3\u675f\u3002\n\u8fd9\u662f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5174\u594b\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u60f3\u5230\u88ab\u52a8\u51b7\u5374\u7684\u5916\u58f3\u4f1a\u4ea7\u751f\u5982\u6b64\u663e\u8457\u7684\u51b7\u5374\u6548\u679c\u3002\u8be5\u88c5\u7f6e\u8fdc\u672a\u8fbe\u5230\u5bfc\u81f4\u70ed\u8282\u6d41\u7684\u6e29\u5ea6\uff0c\u4ec5\u6bd4\u73af\u5883\u6e29\u5ea6\u9ad818\u00b0C\u3002\u8fd9\u4fc3\u4f7f\u6211\u4eec\u4e3a\u6811\u8393Pi 4\u5c1d\u8bd5\u4e86\u4e00\u79cd\u6781\u7aef\u7684\u4e3b\u52a8\u51b7\u5374\u65b9\u5f0f\uff0c\u8fd9\u662f\u4e00\u6b3e\u6765\u81eaSeeed\u5de5\u4f5c\u5ba4\u7684ICE\u5854\u5f0f\u51b7\u5374\u5668\u3002\n\u7528\u8fd9\u4e2a\u602a\u517d\u56fa\u5b9a\u5728\u6811\u8393PI\u4e0a\uff0c\u5728\u76f8\u540c\u7684\u6d4b\u8bd5\u6761\u4ef6\u4e0b\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u4ee5\u4e0b\u7ed3\u679c\u3002\n\u6b63\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u5728\u7a7a\u95f2\u65f6\uff0c\u51b0\u5854\u4f7f\u6811\u8393PI 4\u6bd4GemPro\u5916\u58f3\u7565\u6709\u964d\u6e29\u3002\u5728\u6ee1\u8f7d\u65f6\uff0c\u5b83\u7684\u6e29\u5ea6\u4ec5\u6bd4\u88ab\u52a8\u51b7\u5374\u7684GemPro\u4f4e5\u00b0C\u5de6\u53f3\u3002\n\u8fd9\u4e2a\u7ed3\u679c\u5b8c\u5168\u662f\u4ee4\u4eba\u9707\u60ca\u7684\uff0c\u5b8c\u5168\u4e0d\u662f\u6211\u4eec\u9884\u671f\u7684\u5b9e\u9a8c\u7ed3\u679c\u3002\u8fd9\u8ba9\u6211\u4eec\u601d\u8003\u5982\u679c\u6211\u4eec\u5ef6\u957f\u6d4b\u8bd5\u65f6\u95f4\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002GemPro\u673a\u7bb1\u662f\u5426\u4f1a\u7ee7\u7eed\u5347\u6e29\uff1f\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u6d4b\u8bd5\u4fee\u6539\u4e3a\u6ee1\u8d1f\u8377\u8fd0\u884c1.5\u5c0f\u65f6\u3002\u8fd9\u9879\u6d4b\u8bd5\u4ea7\u751f\u4e86\u4ee5\u4e0b\u7ed3\u679c\u3002\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cGemPro\u5728\u6ee1\u8d1f\u8377\u5de5\u4f5c\u4e86\u4e00\u4e2a\u534a\u5c0f\u65f6\u540e\uff0c\u80fd\u591f\u572845\u00b0C\u5de6\u53f3\u7684\u6700\u9ad8\u6e29\u5ea6\u4e0b\u4fdd\u6301\u5904\u7406\u5668\u7684\u51b7\u5374\u80fd\u529b\u3002\n\u5766\u7387\u5730\u8bf4\uff0c\u8fd9\u771f\u662f\u4ee4\u4eba\u60ca\u53f9\u3002\u8fd9\u4fc3\u4f7f\u6211\u4eec\u770b\u770b\u6211\u4eec\u53ef\u4ee5\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u63a8\u52a8\u6848\u4ef6\u548c\u786c\u4ef6\u7684\u53d1\u5c55\u3002\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5fc5\u987b\u505a\u4ec0\u4e48\u3002\u662f\u65f6\u5019\u7ed9\u5904\u7406\u5668\u8d85\u9891\u4e86\uff0c\u770b\u770b\u6211\u4eec\u80fd\u628a\u5b83\u63a8\u5230\u4ec0\u4e48\u7a0b\u5ea6\uff01\n\u91cd\u8981\u8bf4\u660e\uff1a\u8d85\u9891\u60a8\u7684\u6811\u8393PI\u5c06\u4f7f\u60a8\u7684\u4fdd\u4fee\u65e0\u6548\uff0c\u5e76\u53ef\u80fd\u6f5c\u5728\u5730\u635f\u574f\u8bbe\u5907\u3002\u6211\u4eec\u4e0d\u5efa\u8bae\u60a8\u8fd9\u6837\u505a\uff0c\u9664\u975e\u60a8\u63a5\u53d7\u6b64\u98ce\u9669\u3002\n\u6211\u4eec\u8d85\u9891\u7684\u6811\u8393PI 4\u52302 GHz(500 MHz\u6bd4\u5e93\u5b58\u901f\u5ea6\u589e\u52a0)\uff0c\u5e76\u91cd\u590d\u4e86\u4e4b\u524d30\u5206\u949f\u7684\u6ee1\u8f7d\u5b9e\u9a8c\u3002\u8fd9\u4ea7\u751f\u4e86\u4ee5\u4e0b\u7ed3\u679c\u3002\n\u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u8fd9\u5bf9\u6811\u8393PI 4\u7684\u70ed\u6027\u80fd\u6709\u660e\u663e\u7684\u5f71\u54cd\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u7a7a\u8f6c\u65f6\uff0c\u6e29\u5ea6\u73b0\u5728\u7ea6\u4e3a35\u6444\u6c0f\u5ea6\uff0c\u6bd4\u5e93\u5b58\u901f\u5ea6\u9ad8\u51fa\u7ea65\u6444\u6c0f\u5ea6\uff0c\u6bd4\u73af\u5883\u6e29\u5ea6\u9ad8\u51fa10\u6444\u6c0f\u5ea6\u3002\u4e00\u65e6\u65bd\u52a0\u8d1f\u8f7d\uff0c\u6e29\u5ea6\u5c31\u4f1a\u8fbe\u5230\u6bd4\u5e93\u5b58\u901f\u5ea6\u9ad8\u51fa\u7ea658\u00b0C\u621615\u00b0C\u7684\u6700\u9ad8\u6e29\u5ea6\uff0c\u6bd4\u73af\u5883\u6e29\u5ea6\u9ad8\u51fa33\u00b0C\u3002\n\u8fd9\u7b80\u76f4\u4ee4\u4eba\u60ca\u53f9\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u5373\u4f7f\u5728\u6700\u6076\u52a3\u7684\u60c5\u51b5\u4e0b\uff0cGemPro\u8868\u58f3\u4e5f\u53ef\u4ee5\u8ba9\u60a8\u7684Raspberry PI\u5904\u7406\u5668\u3001\u7535\u6e90\u7ba1\u7406\u548cUSB\u63a7\u5236\u5668\u4fdd\u6301\u51b7\u5374\uff0c\u5373\u4f7f\u5728\u4e25\u91cd\u8d85\u9891\u7684\u60c5\u51b5\u4e0b\u4e5f\u662f\u5982\u6b64\u3002\n\u66f4\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5b83\u53ef\u4ee5\u9759\u9ed8\u5730\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff0c\u800c\u4e0d\u9700\u8981\u4e3a\u5176\u4ed6\u7535\u8def(\u5982\u98ce\u6247)\u4f9b\u7535\u3002\u5982\u679c\u60a8\u5728\u5e02\u573a\u4e0a\u5bfb\u627e\u4e00\u79cd\u673a\u7bb1\uff0c\u4ee5\u9ed8\u9ed8\u5730\u4fdd\u6301\u60a8\u7684PI\u51c9\u723d\uff0c\u7279\u522b\u662f\u5982\u679c\u60a8\u60f3\u8d85\u9891\u4ee5\u6324\u51fa\u66f4\u591a\u7684\u6027\u80fd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6848\u4f8b\u5f53\u7136\u503c\u5f97\u4e00\u770b\u3002\n\u4e00\u4e2a\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u91d1\u5c5e\u5916\u58f3\u4e3a\u60a8\u7684\u6811\u8393PI\u662f\u7cdf\u7cd5\u7684WiFi\u6027\u80fd\u3002\u91d1\u5c5e\u5916\u58f3\u4f1a\u8870\u51cf\u4f20\u5165\u7684WiFi\u4fe1\u53f7\uff0c\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u548c\u4e22\u5931\u3002\n\u6211\u4eec\u5728Gem Pro\u5916\u58f3\u4e2d\u4f7f\u7528www.speedtest.net\u7b49\u7f51\u7ad9\u548c\u4e0b\u8f7d\u5927\u6587\u4ef6\u7684\u65b9\u5f0f\u5728\u6211\u4eec\u7684Raspberry PI 4\u4e0a\u6d4b\u8bd5\u4e86WiFi\u8fde\u63a5\u3002\u5c06\u7ed3\u679c\u4e0e\u4e0d\u4f7f\u7528\u76d8\u67dc\u6267\u884c\u7684\u76f8\u540c\u6d4b\u8bd5\u8fdb\u884c\u6bd4\u8f83\u65f6\uff0c\u4e0b\u8f7d\u901f\u5ea6\u6ca1\u6709\u663e\u8457\u6216\u660e\u663e\u4e0b\u964d\u3002\nGemPro\u5916\u58f3\u662f\u4efb\u4f55\u6b63\u5728\u4e3a\u4ed6\u4eec\u7684\u6811\u8393PI\u5bfb\u627e\u88ab\u52a8\u51b7\u5374\u5916\u58f3\u800c\u53c8\u4e0d\u5f71\u54cd\u51b7\u5374\u80fd\u529b\u7684\u4eba\u7684\u7406\u60f3\u9009\u62e9\u3002\u5982\u679c\u60a8\u60f3\u8981\u4e00\u4e2a\u88ab\u52a8\u51b7\u5374\u7684\u5916\u58f3\u6765\u4fdd\u6301\u60a8\u7684\u6811\u8393PI 4\u7684\u51c9\u723d(\u8d85\u9891\u6216\u975e\u8d85\u9891)\uff0c\u90a3\u4e48\u6211\u4eec\u975e\u5e38\u6709\u4fe1\u5fc3\u8fd9\u4e2a\u5916\u58f3\u4f1a\u7ed9\u60a8\u7559\u4e0b\u6df1\u523b\u7684\u5370\u8c61\u3002\n\u201c\u55e8\uff0c\u4f0a\u6069\uff0c\u8c22\u8c22\u4f60\u7684\u8bc4\u8bba\u3002\u5c31\u50cf\u73b0\u5728\u4e00\u6837\uff0c\u4f20\u611f\u5668\u662f\u786c\u8fde\u7ebf\u7684\uff0c\u5b89\u88c5\u5728\u2026\u2026\u201c\u3002\n\u201c\u5173\u4e8e\u6e29\u5ea6\u4f20\u611f\u5668\u6709\u4e00\u4e2a\u95ee\u9898\u3002\u80fd\u4e0d\u80fd\u628a\u5b83\u88c5\u5728\u4e00\u5757\u5355\u72ec\u7684\u677f\u4e0a\uff0c\u8fd9\u6837\u2026\u2026\u201c\n\u60a8\u597d\uff0cEd\uff0c\u6211\u53ea\u662f\u60f3\u6f84\u6e05\u4e00\u4e0b\uff0c\u60a8\u4f7f\u7528\u7684array_fix\u8f6f\u4ef6\u4e0e...", "note_en": "If you have had any experience with the Raspberry Pi 4 and especially closer to its launch, you would have likely become aware that this iteration of the Raspberry Pi gets quite toasty under a moderate load. This initially resulted in some pretty crazy active cooling designs on the market for the Raspberry Pi 4.\n  Whilst many of the heat issues plaguing the Raspberry Pi 4 have been alleviated with firmware updates to dramatically reduce the power dissipation at idle and medium loads, the Raspberry Pi 4 still gets blisteringly hot when pushed with higher loads. This causes the  ARM quad-core chipset to protect itself by reducing performance using dynamic frequency scaling (DFS) and dynamic voltage scaling (DVS). DFS and DVS are the methods used to reduce the performance of a chipset in order to reduce the junction temperature, and are often simply referred to as thermal throttling. On the Raspberry Pi 4, this thermal throttling begins at around 80\u00b0C.\n  With this in mind, when we heard that there was a passive cooling solution for the Raspberry Pi which would keep the temperatures low enough to prevent thermal throttling at stock speeds, we were a little dubious. With that said, we put the GemPro case to the test to see if it did what it claimed.\n      The case itself is made from forged or cast aluminium and is a surprisingly hefty 262.7 grams when loaded with the Raspberry Pi and  SD card. This heft is a good sign and adds quite a bit of veracity to support the claims made in relation to this case&#39;s cooling abilities. Simply put, this style of passive cooling case uses the entire enclosure itself as a heatsink, and thus, the more material and surface area the better the cooling potential.\n  The enclosure consists of two main pieces that are screwed together, and both have a sandblasted textured finish. The top of the enclosure has a pattern that appears to be milled into its surface that somewhat resembles a cobblestone path and certainly makes the design unique looking.\n  The holes to the micro  HDMI, audio, and  USB-C connectors are precision cut into the side of the enclosure, and there is no recess around the micro HDMI inputs to accommodate the overmolding on some micro HDMI connectors. Whilst this will likely work fine with many types of micro HDMI cables, ours struggled to make a reliable connection. Bumping the cable would result in losing the image on the screen. This could also be an issue with the cable rather than the enclosure, but it is certainly worth mentioning.\n    There are, however, a couple of things missing that we would have liked to have seen included. The first is some non-slip rubber feet. The screws in the bottom of the case are countersunk so they fit flush with the case and won\u2019t scratch your desk\u2019s surface, however, we think rubber feet to hold it off your desk\u2019s surface would be a great addition allowing airflow under the case as well as over.\n  It would also be nice to have some pre-tapped mounting holes in the rear or bottom of the case so you could mount the enclosure. This would make it much easier to create a  VESA bracket, for example, which would allow you to mount the Raspberry Pi to the back of your monitor or Television.\n  The most egregious issue we noticed was that the GPIO header was broken out on the lower side of the case, requiring the connected cables to be manipulated at odd angles to exit the enclosure. This seems to have been a bit of an afterthought.\n    Finally, while assembly is fairly straight forward, instructions are included to get you going without too much fuss.\n  The enclosure requires a little assembly before use. It has two machined aluminium blocks designed to draw heat from various areas of the Raspberry Pi and into the aluminium of the enclosure itself. The blocks are attached to the case via a thermal paste.\n    This is a significant point of difference between the GemPro case and some of the more extreme active cooling methods we have seen for the Raspberry Pi 4. Some of the popular active cooling designs are only designed to cool the processor itself. However, if we look at the Raspberry Pi thermals, we can see there are several areas which get hot under load. The large white square is the hottest area reaching 75\u00b0C. This is not surprisingly the Broadcom BCM2711 processor.\n    We can also see there is a hot spot beside the USB-C input connector. This section of the  PCB is the MaxLinear MxL7704 power management integrated circuit (PMIC) and the accompanying inductor. This  IC is responsible for delivering the regulated supply to the processor and associated hardware. As we can see from the thermal image, under normal operation, these can easily reach temperatures around 70\u00b0C. This would increase with overclocking and if you are drawing a significant current from the GPIO, as this regulator would, then be under even more stress.\n  The GemPro case has an L-shaped block which connects to this area as well as the main processor.\n    The GemPro also comes with a smaller square block which connects to the VI Labs VL805 USB controller. Interestingly, this was not shown to get too hot in the thermal image, however, if you\u2019re running several USB devices it&#39;s very likely that the chip will become incredibly hot. Thus, very much a nice to have addition.\n    All in all, the case appears to cover all of the requirements to keep the Raspberry Pi running smoothly without thermal throttling. With that said, the proof is in the results and we were itching to put the case through its paces.\n    To thoroughly test the enclosure and reach meaningful conclusions based on the results, we needed a way to test the enclosure\u2019s thermal capabilities. For this, we created a fresh new Raspberry Pi OS SD card and installed the Stressberry program, available from:  https://pypi.org/project/stressberry/\n  This program will allow us to simulate a load on the processor for a predetermined period and graph the temperature during the process. This will show us how hot the Raspberry Pi 4 gets above ambient temperature, and thus, can be used to gauge the effectiveness of a particular enclosure.\n     To minimise variables, we set the air-conditioning in the office to 25\u00b0C and ensured that the unit under test was not in the path of any draughts from opening doors or the air-conditioning unit.\n  The Stressberry test will load the processor so that it is maxed out for 30 minutes. It will measure and display the temperature at idle for 5 minutes prior and after the test to show the idle temperature and the recovery.\n  Our first step was to obtain a baseline result which we can use to gauge the effectiveness. For this, we tested the Raspberry Pi 4 without any cooling or enclosure and at stock speeds.\n    As we can see, the processor temperature started at around 47\u00b0C (22\u00b0C above ambient) at idle and rose a degree or two at idle. When the load was applied, the temperature rapidly rose to 80\u00b0C and the device thermally throttled the processor to prevent damage. Within 15 minutes of the load being applied, the Raspberry Pi had reached 80\u00b0C. Once the load was removed from the processor, the temperature dropped quickly down to 60\u00b0C. It then reached a temperature of 52\u00b0C after about 5 mins at idle.\n  With the baseline test done, we installed the same Raspberry Pi into the GemPro enclosure and repeated the exact same test. This produced the following results.\n    With the GemPro case, our idle temperature is already significantly lower at 30\u00b0C, which is only 5\u00b0C above ambient temperature. When the load is applied, the temperature shoots up to around 36\u00b0C. After 15 minutes at full load, the temperature has reached the maximum temperature of around 43\u00b0C or 18\u00b0C above ambient temperature. This is 5\u00b0C cooler than the Raspberry Pi 4 without any cooling at idle!!! Once the load is removed, the temperature of the processor rapidly drops from the max temperature of 43\u00b0C to about 37\u00b0C and holds that temperature until the test ends.\n  This was incredibly exciting, as we did not expect such significant cooling results from a passively cooled enclosure. The device was nowhere near reaching temperatures to cause thermal throttling, and was only 18\u00b0C above ambient temperature. This prompted us to try an extreme style of active cooling for the Raspberry Pi 4, which was an  ICE tower cooler from Seeed studios.\n    With this monster bolted to the Raspberry Pi and under the same test conditions, we achieved the following results.\n    As we can see, at idle the ICE tower kept the Raspberry Pi 4 just a little bit cooler than the GemPro enclosure. At full load, it only achieved temperatures about 5\u00b0C less than the passively cooled GemPro.\n  This result was completely mind blowing and was not at all how we expected the experiment to go. This made us ponder what would happen if we extended the duration of the test. Would the GemPro enclosure continue to heat up? For this, we modified the test to run at full load for 1.5 hours. This test produced the following results.\n    We can see that the GemPro is more than capable of keeping the processor cool with a maximum temperature of around 45\u00b0C after being at full load for an hour and a half.\n  This was quite frankly just amazing. It prompted us to see how far we could push the case and hardware. We knew what we had to do... time to overclock the processor and see just how far we can push it!\n    IMPORTANT NOTE: Overclocking your Raspberry Pi will void your warranty and could potentially damage the device. We don\u2019t recommend you do this unless you accept this risk.\n     We overclocked the Raspberry Pi 4 to 2GHz (500MHz increase from stock speeds) and repeated the previous 30-minute full load experiment. This produced the following results.\n    As expected, this had an obvious effect on the Raspberry Pi 4\u2019s thermal performance. We can see at idle the temperature now sits at about 35\u00b0C, which is about 5\u00b0C warmer than at stock speeds, and 10\u00b0C above ambient temperature. \r Once the load is applied, the temperature reaches a maximum temperature of around 58\u00b0C or 15\u00b0C higher than at stock speeds, and 33\u00b0C above ambient.\n  This is simply amazing and means that, in even the most hostile of situations, the GemPro case can keep your Raspberry Pi processor, power management and USB controller cool, even under heavy overclocking.\n    More amazingly, it does this silently and without needing to power other circuitry such as a fan. If you\u2019re on the market for an enclosure to silently keep your Pi cool, especially if you\u2019re wanting to overclock to squeeze out more performance, then this case is certainly worth a look.\n    A potential issue with metal enclosures for your Raspberry Pi is poor WiFi performance. The metal enclosure can attenuate the incoming WiFi signal, resulting in poor performance and dropouts.\n  We tested the WiFi connection on our Raspberry Pi 4 while in the Gem Pro enclosure using sites such as  www.speedtest.net and by downloading large files. When comparing the results with the same tests performed without an enclosure, there was no significant or noticeable degradation in the download speed.\n    The GemPro enclosure is ideal for anyone who is looking for a passively cooled enclosure for their Raspberry Pi without compromising on cooling ability. If you want a passively cooled enclosure to keep your Raspberry Pi 4 cool (overclocked or not), then we are very confident that you will be impressed with this enclosure.\n        \u201cHi Ian,Thanks for the comment. As it stands the sensor is hardwired being mounted to the...\u201d\n \u201cOne question on the Temperature sensor. Is it feasible to mount it on a separate board so...\u201d\n \u201cHi Ed,So just to clarify, you were using the array_fix software unchanged from the...\u201d", "posttime": "2020-10-13 20:06:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "raspberry-pi,\u56de\u987e,review,\u6d4b\u8bd5", "title": "\u52a8\u624b\u56de\u987e\uff1a\u7528\u4e8e\u6811\u8393\u6d3e\u7684GemPro\u5916\u58f3", "title_en": "Hands-On Review: GemPro Enclosure for Raspberry Pi", "transed": 1, "url": "https://diyodemag.com/reviews/hands_on_review_gempro_enclosure_for_raspberry_pi", "via": "", "real_tags": ["\u56de\u987e", "review", "\u6d4b\u8bd5"]}, {"category": "", "categoryclass": "", "imagename": "f4f5d72218e93b16ec400a0428ad24bf.jpg", "infoid": 1028424, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6a61\u5b50\u5728\u4eba\u7c7b\u793e\u4f1a\u7684\u53f2\u524d\u9636\u6bb5\u4ee3\u8868\u7740\u4e00\u79cd\u4e3b\u98df\uff0c\u4f8b\u5982\u5728\u7f8e\u6d32\u539f\u4f4f\u6c11\u548c\u8fdc\u4e1c\u5730\u533a(\u5728\u90a3\u91cc\uff0c\u6a61\u5b50\u4ecd\u7136\u5f88\u53d7\u6b22\u8fce)\u3002\u7136\u800c\uff0c\u5728\u53e4\u4ee3\u6b27\u6d32\uff0c\u4eba\u4eec\u5bf9\u6a61\u5b50\u6709\u4e0d\u540c\u7684\u770b\u6cd5\u3002\n\u5728\u53e4\u5178\u4e16\u754c\uff0c\u77e5\u8bc6\u5206\u5b50\u7ecf\u5e38\u5c06\u6a61\u5b50\u6d88\u8d39\u4e0e\u539f\u59cb\u7684\u7530\u56ed\u5386\u53f2\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u65e0\u8bba\u662f\u79ef\u6781\u7684\u8fd8\u662f\u6d88\u6781\u7684\u3002\u4f8b\u5982\uff0c\u5e0c\u814a\u5386\u53f2\u5b66\u5bb6\u65af\u7279\u62c9\u535a(\u516c\u5143\u524d64/63\u5e74-\u516c\u514324\u5e74)\u6307\u51fa\uff0c\u5362\u897f\u5854\u5c3c\u4e9a\u7684\u767b\u5c71\u8005\u8fc7\u53bb\u5e38\u5e38\u7528\u6a61\u5b50\u9762\u7c89\u5236\u4f5c\u9762\u5305\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6ca1\u6709\u592a\u591a\u5176\u4ed6\u53ef\u7528\u7684\u8d44\u6e90(\u5373\u8c37\u7c89)\u3002\u5176\u4ed6\u4eba\uff0c\u5982\u5e0c\u7f57\u591a\u5fb7(\u516c\u5143\u524d484-425\u5e74)\uff0c\u5c06\u6a61\u5b50\u6d88\u8d39\u4e0e\u795e\u8bdd\u4e2d\u7684\u963f\u5361\u8fea\u4e9a(Arcadia)\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u963f\u5361\u8fea\u4e9a\u662f\u4e00\u7247\u5c45\u4f4f\u7740\u539f\u59cb\u800c\u51f6\u731b\u7684\u4eba\u7684\u571f\u5730\u3002\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u539f\u59cb\u7684\u60f3\u6cd5\u6697\u793a\u7740\u963f\u5361\u8fea\u4e9a\u4eba\u53ef\u80fd\u662f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u96be\u4ee5\u5f81\u670d\u7684\uff0c\u5373\u4f7f\u662f\u5bf9\u65af\u5df4\u8fbe\u4eba\u6765\u8bf4\u4e5f\u662f\u5982\u6b64(\u81f3\u5c11\u6839\u636e\u5fb7\u5c14\u83f2\u5148\u77e5\u7684\u8bf4\u6cd5\u662f\u8fd9\u6837)\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u5730\u4e2d\u6d77\u6587\u660e\u7684\u6982\u5ff5\u5e76\u4e0d\u662f\u57fa\u4e8e\u6a61\u5b50\uff0c\u800c\u662f\u57fa\u4e8e\u5730\u4e2d\u6d77\u7684\u4e09\u4f4d\u4e00\u4f53\uff1a\u9762\u5305\u3001\u77f3\u6cb9\u548c\u8461\u8404\u9152\u3002\u201c\u6587\u660e\u201d\u4e0e\u201c\u519c\u4e1a\u201d\u4e0d\u8c0b\u800c\u5408\uff0c\u6a61\u5b50\u53ea\u88ab\u8ba4\u4e3a\u662f\u732a\u7684\u98df\u7269\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7279\u522b\u63a8\u8350\u7ed9\u732a\u7684\u98df\u7269\u662f\uff1a\u60f3\u60f3Jamo\u0301n Ibe\u0301Rico de Bellota\u5c31\u8db3\u591f\u4e86\uff0c\u8fd9\u662f\u4e00\u79cd\u8457\u540d\u7684\u3001\u53d7\u4eba\u6b23\u8d4f\u7684\u706b\u817f\uff0c\u5177\u6709\u72ec\u7279\u7684\u5473\u9053\uff0c\u81f3\u4eca\u4ecd\u662f\u4e00\u79cd\u897f\u73ed\u7259\u7f8e\u98df\uff0c\u800c\u4e14\u6709\u7740\u76f8\u5f53\u53e4\u8001\u7684\u4f20\u7edf\u3002\u5927\u7ea6\u572817\u4e16\u7eaa\u4e0b\u534a\u53f6\uff0c\u610f\u5927\u5229\u519c\u5b66\u5bb6\u548c\u7f8e\u98df\u5b66\u5bb6\u6587\u68ee\u4f50\u00b7\u5854\u7eb3\u62c9(\u20201667\u5e74)\u8bf4\uff0c\u6a61\u5b50\u5c5e\u690d\u7269(\u201c\u505a\u66f4\u597d\u7684\u8089\u201d\uff0c\u660e\u786e\u6307\u7684\u662f\u732a\u8089)\u3002\n\u5728\u4e2d\u4e16\u7eaa\u65e9\u671f\uff0c\u732a\u548c\u6a61\u5b50\u5728\u5c0f\u519c\u7ecf\u6d4e\u4e2d\u53d8\u5f97\u5982\u6b64\u91cd\u8981\uff0c\u4ee5\u81f3\u4e8e\u7f16\u5e74\u53f2\u5bb6\u683c\u96f7\u6208\u91cc\u00b7\u56fe\u5c14\u65af(538-594\u5e74)\u751a\u81f3\u8bb0\u5f55\u4e86\u4e00\u79cd\u9965\u8352-\u201c\u68ee\u6797\u9965\u8352\u201d-\u7f57\u9a6c\u5386\u53f2\u5b66\u5bb6\u5b8c\u5168\u5ffd\u89c6\u4e86\u8fd9\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u683c\u96f7\u6208\u91cc\u5199\u9053\uff0c\u516c\u5143591\u5e74\uff0c\u6d2a\u6c34\u548c\u8fde\u7ef5\u4e0d\u65ad\u7684\u96e8\u6c34\u6467\u6bc1\u4e86\u5e72\u8349\uff0c\u6cd5\u5170\u514b\u738b\u56fd\u7684\u5e84\u7a3c\u6b49\u6536\uff1b\u6b64\u5916\uff0c\u4ed6\u8865\u5145\u8bf4\uff0c\u201c\u6a61\u5b50\u4f1a\u751f\u957f\uff0c\u4f46\u4ece\u672a\u6210\u719f\u3002\u201d\n\u5728\u53e4\u4ee3\u548c\u4e2d\u4e16\u7eaa\uff0c\u6a61\u5b50\u5076\u5c14\u4e5f\u88ab\u7528\u4f5c\u4eba\u7c7b\u7684\u98df\u7269\uff0c\u5728\u7d27\u6025\u60c5\u51b5\u4e0b\uff1a\u666e\u6797\u5c3c\u5728\u201c\u81ea\u7136\u53f2\u201d(Naturalis History Oria)\u4e2d\u6307\u51fa\uff0c\u201c\u5f53\u7389\u7c73\u7a00\u7f3a\u65f6\u201d\uff0c\u4eba\u4eec\u8fc7\u53bb\u5e38\u5e38\u628a\u6a61\u5b50\u667e\u5e72\uff0c\u78e8\u6210\u9762\u7c89\uff0c\u7136\u540e\u7528Panis usum\u63c9\u634f(\u201c\u505a\u9762\u5305\u201d)\u3002\u8fd9\u6b63\u662f\u6a61\u5b50\u5728\u897f\u65b9\u6587\u660e\u53f2\u4e0a\u7684\u67d0\u4e2a\u65f6\u523b\u5f00\u59cb\u5728\u519c\u6c11\u4e2d\u626e\u6f14\u7684\u89d2\u8272\uff1a\u66ff\u4ee3\u98df\u7269\uff0c\u6216\u8005\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u66ff\u4ee3\u9762\u7c89\u3002\u8fd9\u79cd\u66ff\u4ee3\u5728\u8fc7\u53bb\u7684\u8bb8\u591a\u573a\u5408\u90fd\u4f1a\u51fa\u73b0\uff0c\u5305\u62ec\u4e2d\u4e16\u7eaa\u65f6\u671f\uff1a\u6218\u4e89\u3001\u9965\u8352\u3001\u7cdf\u7cd5\u7684\u5b63\u8282\u7b49\u7b49\u3002\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4eba\u7c7b\u6001\u5ea6\u7684\u7f8e\u4e3d\u8868\u73b0\uff1a\u65e0\u8bba\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u90fd\u8981\u575a\u6301\u4e60\u60ef\u3002\n\u5c0f\u9ea6\u9762\u5305\u662f\u4e00\u79cd\u6807\u5fd7\u8eab\u4efd\u7684\u98df\u7269\uff0c\u4eba\u4eec\u5728\u56f0\u96be\u65f6\u671f\u4ecd\u7136\u4f1a\u5236\u4f5c\u9762\u5305\uff1a\u5982\u679c\u6709\u52a3\u8d28\u8c37\u7269\u7c89(\u5927\u9ea6\u3001\u9ed1\u9ea6\u3001\u71d5\u9ea6\u3001\u5c0f\u7c73\u7b49)\uff0c\u6216\u8005\u4f7f\u7528\u5176\u4ed6\u4efb\u4f55\u53ef\u4ee5\u5728\u6781\u7aef\u7d27\u6025\u60c5\u51b5\u4e0b\u78e8\u6210\u7c89\u7684\u4e1c\u897f(\u677f\u6817\u3001\u91ce\u8349\u3001\u6839\u830e\u3001\u6a61\u5b50)\u3002\u4f8b\u5982\uff0c11\u4e16\u7eaa\u7684\u7f16\u5e74\u53f2\u4f5c\u5bb6\u6208\u5f17\u96f7\u00b7\u9a6c\u62c9\u7279\u62c9(Godfrey Malaterra)\u8bb0\u5f55\u4e86\u57281058\u5e74\u7684\u4e00\u573a\u53ef\u6015\u7684\u9965\u8352\u4e2d\uff0c\u610f\u5927\u5229\u5357\u90e8\u7684\u8bb8\u591a\u4eba\u4e0d\u5f97\u4e0d\u4ece\u732a\u8eab\u4e0a\u5077\u6a61\u5b50\u6765\u505a\u9762\u5305\uff1a\u4ed6\u4eec\u628a\u6a61\u5b50\u667e\u5e72\u3001\u78e8\u788e\uff0c\u7136\u540e\u4e0e\u5c0f\u7c73\u9762\u7c89\u6df7\u5408\u3002\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u4ed6\u4eec\u663e\u7136\u4e0d\u662f\u5728\u626e\u6f14\u201c\u52a8\u7269\u201d\u7684\u89d2\u8272\uff1a\u8fd9\u662f\u4e00\u79cd\u6587\u660e\u7684\u6050\u614c\u884c\u4e3a\u3002\u522b\u5fd8\u4e86\uff1a\u9762\u5305\u662f\u6587\u660e\u601d\u60f3\u7684\u57fa\u77f3\uff0c\u4e0d\u7ba1\u5b83\u662f\u7528\u4ec0\u4e48\u539f\u6599\u5236\u6210\u7684\u3002\n\u8fd9\u88ab\u8bc1\u660e\u662f\u4e00\u6b21\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u6210\u529f\u7684\u5b9e\u9a8c\uff0c\u4ee5\u81f3\u4e8e\u76f4\u523019\u4e16\u7eaa\u7684\u8bb8\u591a\u8bba\u6587\u4e2d\u90fd\u6709\u5b83\u7684\u7279\u8272\uff0c\u6240\u6709\u8fd9\u4e9b\u8bba\u6587\u90fd\u5efa\u8bae\u5728\u9700\u8981\u7684\u60c5\u51b5\u4e0b\u7528\u540c\u6837\u7684\u65b9\u5f0f\u5236\u4f5c\u9762\u5305\u30021936\u5e74\u81f31939\u5e74\u897f\u73ed\u7259\u5185\u6218\u671f\u95f4\uff0c\u4eba\u4eec\u4ecd\u7136\u6d88\u8d39\u6a61\u5b50\u9762\u5305\uff1b\u540c\u6837\uff0c\u5728\u6492\u4e01\u5c9b\uff0c\u6f58\u4f0a\u65af\u8d1d\u5229(\u201c\u6a61\u5b50\u9762\u5305\u201d)\u76f4\u5230\u4e0a\u4e2a\u4e16\u7eaa\u4e0b\u534a\u53f6\u5728\u56f0\u96be\u65f6\u671f\u624d\u88ab\u6d88\u8d39\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6a61\u5b50\u4ee3\u8868\u4e86\u4eba\u7c7b\u8425\u517b\u53f2\u7684\u8fd9\u4e00\u65b9\u9762\uff1a\u6e90\u4e8e\u9700\u8981\u7684\u521b\u9020\u6027\u3002\n\u7136\u800c\uff0c\u7531\u4e8e\u5b83\u4eec\u4e0e\u8d2b\u7a77\u548c\u7f3a\u4e4f\u66f4\u53ef\u53d6\u7684\u98df\u7269\u7684\u6982\u5ff5\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u5b83\u4eec\u4e5f\u4ee3\u8868\u4e86\u4e2d\u4e16\u7eaa\u7684\u5fcf\u6094\u548c\u5c48\u8fb1\u3002\u90a3\u4e9b\u51b3\u5b9a\u4e0e\u793e\u533a\u5206\u9053\u626c\u9573\uff0c\u4f4f\u5728\u6811\u6797\u91cc\u7684\u7279\u522b\u8654\u8bda\u7684\u4e0a\u5e1d\u7684\u4eba-\u9690\u58eb-\u4f1a\u4ee5\u4ed6\u4eec\u5728\u68ee\u6797\u4e2d\u80fd\u627e\u5230\u7684\u4efb\u4f55\u4e1c\u897f\u4e3a\u98df\u3002\u56e0\u6b64\uff0c\u6a61\u5b50-\u4e0e\u6839\u3001\u836f\u8349\u7b49\u4e00\u8d77-\u4e5f\u6210\u4e3a\u7f9e\u8fb1\u8eab\u4f53\u4ece\u800c\u51c0\u5316\u7075\u9b42\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\n\u6709\u8da3\u7684\u662f\uff0c\u6a61\u5b50\u4e5f\u767b\u4e0a\u4e86\u7cbe\u82f1\u4eec\u7684\u9910\u684c\u3002\u9996\u5148\uff0c\u56e0\u4e3a\u77e5\u8bc6\u5206\u5b50\u5f00\u59cb\u8ba4\u8bc6\u5230\u4ed6\u4eec\u6240\u8c13\u7684\u533b\u5b66\u7f8e\u5fb7\u3002\u4f8b\u5982\uff0c15\u4e16\u7eaa\u65e9\u671f\u7248\u672c\u7684Tacuinum Sanitatis-\u7531\u963f\u62c9\u4f2f\u57fa\u7763\u6559\u533b\u751fIbn Butla\u0302n\u572811\u4e16\u7eaa\u4e0b\u534a\u53f6\u64b0\u5199\uff0c\u5e76\u5728\u4e2d\u4e16\u7eaa\u7684\u6b27\u6d32\u53cd\u590d\u7ffb\u8bd1\u548c\u590d\u5236-\u5efa\u8bae\u5728\u65b0\u9c9c\u548c\u5927\u7684\u65f6\u5019\u98df\u7528\u6a61\u5b50\uff0c\u5e76\u6307\u51fa\u5b83\u4eec\u6709\u52a9\u4e8e\u4fdd\u6301\u4f53\u578b\uff0c\u9632\u6b62\u6708\u7ecf\u3002\u540e\u4e00\u79cd\u6548\u5e94\u53ef\u4ee5\u901a\u8fc7\u5403\u52a0\u7cd6\u70e4\u8fc7\u7684\u5b83\u4eec\u6765\u4e2d\u548c\u3002\u4e0d\u7528\u8bf4\uff0c\u63d0\u5230\u7cd6\u662f\u8fd9\u7bc7\u8bba\u6587\u9762\u5411\u7684\u53d7\u4f17\u7c7b\u578b\u7684\u4e00\u4e2a\u6307\u6807\uff1a\u7cbe\u82f1\u3001\u8d35\u65cf\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6a61\u5b50\u5728\u4e2d\u4e16\u7eaa\u672b\u671f\u88ab\u63d0\u5347\u4e3a\u7cbe\u82f1\u7f8e\u98df\u7684\u5730\u4f4d\u3002\u4f46\u662f\u600e\u4e48\u505a\u5230\u7684\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\n\u4e8b\u5b9e\u4e0a\uff0c\u519c\u6c11\u70f9\u996a\u548c\u7cbe\u82f1\u70f9\u996a\u662f\u4e25\u683c\u8054\u7cfb\u5728\u4e00\u8d77\u7684\u3002\u7cbe\u82f1\u53a8\u5e08\u6b23\u8d4f\u5178\u578b\u7684\u519c\u6c11\u4e16\u754c\u7684\u7f8e\u98df\uff0c\u4e2d\u4e16\u7eaa\u665a\u671f\u7684\u8d35\u65cf\u548c\u65b0\u7684\u57ce\u5e02\u4e0a\u5c42\u9636\u7ea7\u4e5f\u662f\u5982\u6b64\u3002\u8fd9\u53ea\u662f\u4e00\u4e2a\u8ba9\u8fd9\u4e9b\u7f8e\u5473\u53d8\u5f97\u9ad8\u8d35\uff0c\u5e76\u4f7f\u5b83\u4eec\u9002\u5408\u5bcc\u4eba\u9910\u684c\u7684\u95ee\u9898\u3002\u6709\u4e24\u79cd\u4e3b\u8981\u7684\u6280\u672f\u4f7f\u4ed6\u4eec\u80fd\u591f\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5176\u4e00\uff0c\u662f\u5728\u98df\u8c31\u4e2d\u52a0\u5165\u519c\u6c11\u548c\u4e0b\u5c42\u9636\u7ea7\u65e0\u6cd5\u63a5\u89e6\u5230\u7684\u67d0\u4e9b\u7279\u6b8a\u914d\u6599\uff1a\u4f8b\u5982\u9999\u6599\u3002\u6216\u8005\uff0c\u53a8\u5e08\u4f1a\u5c06\u519c\u6c11\u70f9\u996a\u7684\u5143\u7d20\u4f5c\u4e3a\u5c0f\u83dc\uff0c\u6216\u8005\u4f5c\u4e3a\u98df\u8c31\u4e2d\u519c\u6c11\u4e70\u4e0d\u8d77\u7684\u98df\u7269\u7684\u6b21\u8981\u914d\u6599\uff0c\u6bd4\u5982\u5927\u578b\u91ce\u5473\u3002\n\u5176\u7ed3\u679c\u662f\uff0c\u7cbe\u82f1\u98df\u8c31\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4ee5\u519c\u6c11\u70f9\u996a\u4e3a\u57fa\u7840\u7684\u3002\u4ee5\u81f3\u4e8e\u6a61\u5b50\u5f00\u59cb\u51fa\u73b0\u5728\u8fd9\u6837\u7684\u98df\u8c31\u4e2d\u30021549\u5e74\uff0c\u57c3\u65af\u7279\u5bb6\u65cf\u7684\u7ba1\u5bb6\u514b\u91cc\u65af\u6258\u798f\u7f57\u00b7\u6885\u897f\u5e03\u6208(\u20201548\u5e74)\u6b7b\u540e\u51fa\u7248\u4e86\u4e00\u672c\u91cd\u8981\u7684\u98df\u8c31\uff0c\u5728\u4e66\u4e2d\u6211\u4eec\u627e\u5230\u4e86\u6a61\u5b50\u6d3e\u7684\u98df\u8c31\u3002\u4ed6\u5efa\u8bae\u628a\u6a61\u5b50\u653e\u5728\u8089\u6c64\u91cc\u716e\uff0c\u7136\u540e\u8ba9\u5b83\u4eec\u901a\u8fc7\u8fc7\u6ee4\u5668\u3002\u7136\u540e\uff0c\u53a8\u5e08\u52a0\u5165\u78e8\u788e\u7684\u5e72\u916a\u3001\u7cd6\u3001\u8089\u6842\u3001\u80e1\u6912\u3001\u9ec4\u6cb9\u548c\u9e21\u86cb\u3002\u505a\u597d\u9985\u997c\u540e\uff0c\u7528\u70e4\u7bb1\u70e4\uff0c\u6700\u540e\u6492\u4e0a\u7cd6\u3002\u540c\u6837\uff0c\u57281570\u5e74\uff0c\u8457\u540d\u53a8\u5e08\u5df4\u6258\u6d1b\u6885\u5965\u00b7\u65af\u5361\u76ae(Bartolomeo Scappi\uff0c1500-1577\u5e74)\u4e3a\u4ed6\u90a3\u4e2a\u65f6\u4ee3\u6700\u91cd\u8981\u7684\u610f\u5927\u5229\u6cd5\u9662\u63d0\u4f9b\u670d\u52a1\uff0c\u4ed6\u5728\u5176\u6781\u5177\u5f71\u54cd\u529b\u7684\u98df\u8c31\u6536\u85cf\u4e2d\u5305\u62ec\u4e86\u4e00\u4e2a\u6a61\u5b50\u6d3e\u3002\n\u5f15\u4eba\u6ce8\u76ee\u7684\u662f\uff0c\u8fd9\u4e9b\u51c6\u5907\u7684\u6838\u5fc3\u4e0e\u666e\u6797\u5c3c\u6216\u65af\u7279\u62c9\u6ce2\u65f6\u4ee3\u5236\u4f5c\u6a61\u5b50\u7684\u65b9\u5f0f\u6ca1\u6709\u592a\u5927\u4e0d\u540c\u3002\u4e3b\u8981\u7684\u60f3\u6cd5\u662f\uff0c\u6a61\u6811\u575a\u679c(\u6700\u597d\u662f\u90a3\u4e9b\u6765\u81ea\u571f\u8033\u5176\u6a61\u6811\u7684\u575a\u679c\uff0cQuercus cerris)\u8981\u7ecf\u8fc7\u5904\u7406\uff0c\u4ee5\u53bb\u9664\u5b83\u4eec\u7684\u5355\u5b81\uff0c\u5e76\u5728\u8089\u6c64\u6216\u54b8\u6c34\u4e2d\u716e\u719f\u3002\u7136\u540e\uff0c\u4ed6\u4eec\u88ab\u7814\u78e8\u5728\u8feb\u51fb\u70ae\u4e2d\uff0c\u5e76\u901a\u8fc7\u8fc7\u6ee4\u5668\u3002\u8fd9\u6837\uff0c\u5de1\u56de\u8d5b\u5c31\u662f\u5c06\u8fd9\u79cd\u7c89\u672b\u4e0e\u65b0\u9c9c\u7684\u9ec4\u6cb9\u3001\u725b\u5976\u3001\u5976\u6cb9\u548c\u78e8\u788e\u7684\u5e72\u916a\u3001\u7cd6\u3001\u4e73\u6e05\u4e73\u916a\u6216\u666e\u7f57\u74e6\u56fe\u62c9\u5976\u916a\u3001\u8089\u6842\u3001\u80e1\u6912\u548c\u672a\u716e\u719f\u7684\u86cb\u9ec4\u6df7\u5408\u800c\u6210\u7684\u3002\u6700\u540e\uff0c\u9985\u997c\u88ab\u653e\u5165\u70e4\u7bb1\uff0c\u5e76\u7528\u7cd6\u3001\u8089\u6842\u548c\u73ab\u7470\u6c34\u4e0a\u91c9\u3002\n\u8fd9\u5c31\u662f\u6a61\u5b50-\u5728\u56f0\u96be\u65f6\u671f\u519c\u6c11\u70f9\u996a\u7684\u4e00\u79cd\u5143\u7d20-\u662f\u5982\u4f55\u88ab\u201c\u4eba\u4e3a\u5730\u5c0a\u5d07\u201d\u7684\u3002\u81f3\u5c11\u53ef\u4ee5\u8bf4\uff0c\u901a\u8fc7\u6218\u4e89\u3001\u9965\u8352\u3001\u5929\u624d\u3001\u7126\u8651\u548c\u5b9e\u9a8c\uff0c\u6b27\u6d32\u6a61\u5b50\u7684\u70f9\u996a\u5386\u53f2\u53d7\u5230\u4e86\u56f0\u6270\u3002\u4ed6\u4eec\u80af\u5b9a-\u4f46\u5f88\u5c11-\u5145\u5f53\u7a77\u4eba\u548c\u5bcc\u4eba\u3001\u4e0b\u5c42\u548c\u4e0a\u5c42\u4e4b\u95f4\u7684\u6865\u6881\uff0c\u8fd9\u4f3c\u4e4e\u5728\u4e2d\u4e16\u7eaa\u665a\u671f\u7684\u67d0\u4e2a\u65f6\u5019\u53d1\u751f\u8fc7\u3002\n\u5b89\u5fb7\u91cc\u4e9a\u00b7\u9a6c\u62c9\u65af\u57fa(Andrea Maraschi)\u662f\u5df4\u91cc\u5927\u5b66(University\u00e0degli Studi di Bari)\u4e2d\u4e16\u7eaa\u5386\u53f2\u8bb2\u5e08\u3002\u4ed6\u6559\u6388\u8fc7\u4e2d\u4e16\u7eaa\u98df\u54c1\u53f2\u3001\u98df\u54c1\u4eba\u7c7b\u5b66\u7b49\u8bfe\u7a0b\uff0c\u53d1\u8868\u8fc7\u5bb4\u8bf7\u3001\u5b97\u6559\u8c61\u5f81\u3001\u9b54\u672f\u5b9e\u8df5\u7b49\u4e0e\u4e2d\u4e16\u7eaa\u98df\u54c1\u76f8\u5173\u7684\u8bf8\u591a\u65b9\u9762\u7684\u6587\u7ae0\uff0c\u70b9\u51fb\u6b64\u5904\u67e5\u770b\u4ed6\u7684academia.edu\uff0c\u6216\u5173\u6ce8\u4ed6\u7684\u63a8\u7279\uff1a@andrea_maraschi\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u6700\u65e9\u53d1\u8868\u5728\u300a\u4e2d\u4e16\u7eaa\u6742\u5fd7\u300b\u4e0a--\u8fd9\u662f\u4e00\u672c\u8bb2\u8ff0\u4e2d\u4e16\u7eaa\u6545\u4e8b\u7684\u6570\u5b57\u6708\u520a\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u4ed6\u4eec\u7684\u7f51\u7ad9\u6765\u4e86\u89e3\u5982\u4f55\u8ba2\u9605\u3002", "note_en": "Acorns represented a staple food in the prehistoric stage of human society, for instance among the Native Americans, and in the Far East (where they are still quite popular). However, there were discordant opinions about acorns in ancient Europe.\n In the classical world, intellectuals often linked acorn consumption with a primitive bucolic past, in either a positive or a negative sense. The Greek historian Strabo (64/63 BC \u2013 AD 24), for example, noted that the mountaineers of Lusitania used to make bread with acorn flour because they did not have many other resources available (i.e., grain flours). Others, like Herodotus (484\u2013 425 BC), associated acorn consumption with the mythical Arcadia, a land populated by primitive and fierce men. In this case, however, the idea of primitiveness implied that the Arcadians could be incredibly hard to conquer, even for the Spartans (at least according to the Oracle of Delphi).\n  Be that as it may, the Mediterranean notion of civilization was not based on acorns whatsoever, but rather on the Mediterranean triad: bread, oil, and wine. \u201cCivilization\u201d coincided with \u201cagriculture\u201d, and acorns were merely considered a food for swine. A particularly recommended food for swine, actually: it will suffice to think of  jamo\u0301n ibe\u0301rico de bellota, a well-known and appreciated ham with a unique flavour which is still a Spanish delicacy, and which has a considerably old tradition. Acorns  generano miglior carne (\u201cmake better meat\u201d, with clear reference to pork), stated the Italian agronomist and gastronome Vincenzo Tanara (\u20201667), around the second half of the seventeenth century.\n In the early Middle Ages, pigs and acorns became so important in the peasant economy that the chronicler Gregory of Tours (538-594) even recorded a kind of famine \u2013 \u201cforest famine\u201d \u2013 which Roman historians totally neglected. For instance, Gregory writes that, in 591, floods and incessant rain destroyed the hay, and the crops were poor in the Frankish kingdom; furthermore, he added, \u201cacorns grew, but they never ripened.\u201d\n   In ancient and in medieval times, acorns were also occasionally employed as food for man, in cases of emergency: \u201cwhen there is scarcity of corn\u201d, Pliny noted in the  Naturalis Historia, that people used to dry acorns and grind them into flour, and knead this in  panis usum (\u201cto make bread\u201d). This was exactly the role that acorns began to play at some point in the history of Western civilization among peasants: replacement food or \u2013 even more precisely \u2013 replacement flour. This substitution would be made on numerous occasions in the past, medieval times included: wars, famines, bad seasons, etc. This is a beautiful demonstration of a peculiar human attitude: that of sticking to habits, no matter the context.\n  Wheat bread was an identity-marking food, and people would still make bread in times of hardship: with inferior grain flours if these were available (barley, rye, oat, millet, etc.), or with anything else that could be ground into powder in case of extreme emergency (chestnuts, wild grasses, roots, acorns). For instance, the eleventh-century chronicler Godfrey Malaterra recorded that during a terrible famine in 1058, many people in southern Italy had to steal acorns from pigs to make bread: they dried, ground, and mixed them with millet flour. By doing so, they were not acting as \u201canimals\u201d, evidently: this was an act of civilized panic. Don\u2019t forget: bread was a cornerstone of the idea of civilization, regardless of the ingredients it was made of.\n This turned out to be an incredibly successful experiment, so much so that it would be featured in a number of treatises up until the nineteenth century, all of which suggested to make bread in the same manner in case of need. Acorn bread was still consumed during the Spanish Civil War of 1936-1939; likewise,  pan\u2019ispeli (\u201cacorn bread\u201d) was consumed in Sardinia until the half of the last century in times of hardship. In fact, acorns represented this facet of the history of human nutrition: inventiveness which arose from need.\n  However, since they were associated with the idea of poverty, and a lack of more desirable foods, they also came to represent that of penitence and mortification in medieval times. Those particularly pious men of God who decided to part ways from the community and live in the woods \u2013 the hermits \u2013 would feed on whatever they could find in the forest. Consequently, acorns \u2013 alongside roots, herbs, etc. \u2013 also became a way of humiliating one\u2019s body and thus purify the soul.\n   Interestingly though, acorns made it to the tables of the elite as well. Firstly, because intellectuals started to recognize their supposed medicinal virtues. For instance, an early fifteenth-century version of the Tacuinum Sanitatis \u2013 composed by the Arab Christian physician Ibn Butla\u0302n in the second half of the eleventh century and repeatedly translated and copied in medieval Europe \u2013 suggested eating acorns when they were fresh and large, and noted that they helped retention, and prevented menstruation. The latter effect could be neutralized by eating them roasted with sugar. Needless to say, the mention of sugar is an indicator of the kind of audience the treatise was addressing: the elite, the aristocracy. In fact, acorns were upgraded to the status of elite delicacy towards the end of the Middle Ages. But how, and why?\n Actually, peasant and elite cooking were strictly connected with each other. Elite chefs appreciated the delicacies which were typical of the peasant world, and so did aristocrats and the new urban upper class of the late Middle Ages. It was just a matter of ennobling such delicacies and make them fit for the tables of the wealthy. There were two main techniques which allowed them to achieve this. One, was to add certain special ingredients to the recipe that were inaccessible to peasants and to the lower classes: spices, for example. Alternatively, chefs would use elements of peasant\u2019s cooking as side dishes, or as secondary ingredients in recipes featuring foods which peasants could not afford, such as large game.\n  The result of this was that elite cookbooks were heavily based on peasant cooking. So much so that acorns started to appear in such cookbooks. In 1549, the steward of the House of Este, Cristoforo Messisbugo (\u20201548) has an important cookbook posthumously published where we find a recipe for an acorn pie. He suggested taking the acorns and boiling them in broth, and then passing them through a filter. Then, the cook was to add grated dry cheese, sugar, cinnamon, pepper, butter, and eggs. After making the pie, it was cooked in the oven, and finally sprinkled with sugar. Similarly, in 1570, the famous chef Bartolomeo Scappi (1500\u20131577), who served the most important Italian courts of his times, included an acorn pie in his extremely influential recipe collection.\n  What is striking, is that the core of these preparations were not much different than the way in which acorns were prepared at the time of Pliny or Strabo. The main idea was that oak nuts (preferably those from Turkey oaks, Quercus cerris) were to be treated in order to deprive them of tannins, and were parboiled in meat broth, or salted water. They were then ground in a mortar and passed through a filter. With that, the tourte was made by mixing this powder with fresh butter, milk, creamy and grated dry cheese, sugar, ricotta or provatura, cinnamon, pepper, and uncooked egg yolks. Eventually, the pie was was put in the oven and glazed with sugar, cinnamon and rose water.\n  And that is how acorns \u2013 an element of peasant cooking in times of hardship \u2013 were \u201cartificially ennobled\u201d. Through wars, famines, genius, anxiety, and experiments, the culinary history of acorns in Europe has been troubled, to say the least. They surely \u2013 but rarely \u2013 acted as a bridge between the poor and the wealthy, the lower and the upper classes, and this seems to have happened at some point during the late Middle Ages.\n Andrea Maraschi is a Lecturer in Medieval History at Universit\u00e0 degli Studi di Bari. He has taught courses on Food history in the Middle Ages and Anthropology of Food, and he has published on many aspects connected with food in medieval times such as banqueting, religious symbolism, and magic practice.\u00a0  Click here to see him on Academia.edu\u00a0or follow him on Twitter\u00a0  @Andrea_Maraschi\n This article was first published in\u00a0 The Medieval Magazine\u00a0\u2013 a monthly digital magazine that tells the story of the Middle Ages.\u00a0  Learn how to subscribe by visiting their website.", "posttime": "2020-10-13 20:05:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e2d\u4e16\u7eaa,middle,\u6a61\u5b50", "title": "\u4e2d\u4e16\u7eaa\u7684\u6a61\u5b50", "title_en": "Acorns in the Middle Ages", "transed": 1, "url": "https://www.medievalists.net/2020/10/acorns-middle-ages/", "via": "", "real_tags": ["\u4e2d\u4e16\u7eaa", "middle", "\u6a61\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "d0cb57be003a452d3a09dc0f6530719e.jpg", "infoid": 1028423, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0d\u8d77\u773c\u7684\u7a7a\u538b\u673a\u662f\u73b0\u4ee3\u8f66\u95f4\u7684\u5fc5\u9700\u54c1\uff0c\u652f\u6491\u7740\u4ece\u8f6e\u80ce\u5145\u6c14\u5230\u5145\u6c14\u5de5\u5177\u3001\u5de5\u5382\u8bbe\u5907\u3001\u7814\u7a76\u8bbe\u5907\u548c\u55b7\u6f06\u5668\u7684\u4e00\u5207\u3002\u4f46\u603b\u6709\u66f4\u597d\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u52a0\u5dde\u7684\u4e00\u5bb6\u516c\u53f8\u76f8\u4fe1\uff0c\u5b83\u63d0\u51fa\u4e86\u4e00\u79cd\u8bbe\u8ba1\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u53ef\u4ee5\u663e\u8457\u964d\u4f4e\u566a\u97f3\uff0c\u4f7f\u7528\u5bff\u547d\u66f4\u957f\uff0c\u66f4\u597d\u5730\u7ba1\u7406\u70ed\u91cf\uff0c\u5728\u4e0d\u4f7f\u7528\u77f3\u6cb9\u7684\u60c5\u51b5\u4e0b\u5c06\u603b\u62e5\u6709\u6210\u672c\u964d\u4f4e\u591a\u8fbe20%\u3002\u5728\u4e0d\u4f7f\u7528\u77f3\u6cb9\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u53ef\u4ee5\u663e\u8457\u964d\u4f4e\u566a\u97f3\uff0c\u5ef6\u957f\u4f7f\u7528\u5bff\u547d\uff0c\u66f4\u597d\u5730\u7ba1\u7406\u70ed\u91cf\uff0c\u5e76\u5728\u4e0d\u4f7f\u7528\u77f3\u6cb9\u7684\u60c5\u51b5\u4e0b\u964d\u4f4e\u603b\u62e5\u6709\u6210\u672c20%\u3002\n\u5361\u8bfa\u538b\u7f29\u673a\u4f7f\u7528\u4e86\u4e00\u79cd\u5947\u602a\u7684\u79bb\u5fc3\u8fc7\u7a0b\uff0c\u5927\u5927\u51cf\u5c11\u4e86\u8bbe\u5907\u4e2d\u7684\u6d3b\u52a8\u90e8\u4ef6\u6570\u91cf\u3002\u7814\u7a76\u5c0f\u7ec4\u544a\u8bc9\u6211\uff0c\u5b83\u7684\u7075\u611f\u6765\u81ea\u4e8e16\u4e16\u7eaa\u7684\u4e00\u79cd\u540d\u4e3a\u7ef3\u7d22\u7684\u88c5\u7f6e\uff0c\u8fd9\u79cd\u88c5\u7f6e\u5229\u7528\u5145\u65a5\u7740\u6c14\u6ce1\u7684\u843d\u6c34\u7684\u529b\u91cf\u548c\u91cd\u91cf\u6765\u538b\u7f29\u7a7a\u6c14\uff0c\u5e76\u8feb\u4f7f\u7a7a\u6c14\u901a\u8fc7\u6ca1\u6709\u4efb\u4f55\u79fb\u52a8\u90e8\u4ef6\u7684\u7ba1\u5b50\u3002\u8fd9\u4e00\u88c5\u7f6e\u88ab\u79f0\u4e3a\u7ef3\u7d22\uff0c\u5b83\u5229\u7528\u4e0b\u843d\u7684\u6c34\u7684\u529b\u91cf\u548c\u91cd\u91cf\uff0c\u5f25\u6f2b\u7740\u6c14\u6ce1\uff0c\u5c06\u7a7a\u6c14\u538b\u7f29\u5e76\u8feb\u4f7f\u5176\u901a\u8fc7\u6ca1\u6709\u4efb\u4f55\u79fb\u52a8\u90e8\u4ef6\u7684\u7ba1\u9053\u3002\u8fd9\u4e9b\u901a\u5e38\u7528\u4e8e\u91c7\u77ff\uff0c\u4e5f\u662f\u52a0\u6cf0\u7f57\u5c3c\u4e9a\u953b\u9020\u7684\u6807\u5fd7\u6027\u5143\u7d20\u3002\n\u7136\u800c\uff0c\u8981\u4ea7\u751f\u4efb\u4f55\u771f\u6b63\u7684\u538b\u529b\uff0c\u4e00\u4e2a\u7279\u9c81\u59c6\u9700\u8981\u5f88\u5927\u7684\u538b\u529b-\u4e00\u4e2a\u5efa\u5728\u5b89\u5927\u7565\u7701\u62c9\u683c\u00b7\u4e18\u7279\u7684\u7279\u9c81\u59c6\uff0c\u4f7f\u7528345\u82f1\u5c3a(105\u7c73)\u7684\u843d\u5dee\u53ea\u4ea7\u751f128\u78c5/\u5e73\u65b9\u82f1\u5bf8\u7684\u538b\u529b\uff0c\u6240\u4ee5\u5361\u8bfa\u56e2\u961f\u5bfb\u627e\u4e86\u53e6\u4e00\u79cd\u52a0\u901f\u6ce1\u72b6\u6c34\u7684\u65b9\u6cd5\u6765\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c\u5e76\u7814\u5236\u51fa\u4e86\u79bb\u5fc3\u673a\u3002\n\u56e0\u6b64\uff0c\u5361\u8bfa\u538b\u7f29\u673a\u901a\u8fc7\u9876\u90e8\u7684\u8fc7\u6ee4\u5668\u5438\u5165\u7a7a\u6c14\uff0c\u5e76\u5728\u5feb\u901f\u65cb\u8f6c\u7684\u8f6c\u9f13\u9876\u90e8\u5c06\u5176\u4e0e\u6c34\u6df7\u5408\u3002\u4f60\u8f6c\u5f97\u8d8a\u5feb\uff0c\u6c34\u5c31\u53d8\u5f97\u8d8a\u91cd\uff0c\u5c31\u50cf\u5728\u4f60\u5934\u4e0a\u6446\u52a8\u4e00\u6876\u6c34\u4e00\u6837\u3002\u56e0\u6b64\uff0c\u6c34\u6324\u538b\u548c\u538b\u7f29\u7a7a\u6c14\uff0c\u6df7\u5408\u7269\u88ab\u6324\u51fa\u5e95\u90e8\uff0c\u901a\u8fc7\u51fa\u53e3\u901a\u9053\u65f6\u88ab\u5206\u79bb\u4e3a\u538b\u7f29\u7a7a\u6c14\u548c\u6c34\u3002\n\u538b\u7f29\u7a7a\u6c14\u50cf\u5f80\u5e38\u4e00\u6837\u8fdb\u5165\u6c34\u7bb1\u3002\u6c34\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5438\u6536\u4e86\u5927\u91cf\u7684\u538b\u7f29\u70ed\uff0c\u7136\u540e\u901a\u8fc7\u70ed\u4ea4\u6362\u5668\u8f93\u9001\uff0c\u70ed\u4ea4\u6362\u5668\u51b7\u5374\u6c34\uff0c\u5c06\u70ed\u91cf\u6563\u53d1\u51fa\u53bb\uff0c\u5e76\u5c06\u51b7\u5374\u6c34\u56de\u9988\u5230\u8f6c\u9f13\u4e2d\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u6c34\u5438\u6536\u4e86\u5927\u90e8\u5206\u538b\u7f29\u70ed\uff0c\u7136\u540e\u901a\u8fc7\u70ed\u4ea4\u6362\u5668\u51b7\u5374\u6c34\uff0c\u5c06\u70ed\u91cf\u6563\u53d1\u51fa\u53bb\uff0c\u5e76\u5c06\u51b7\u5374\u6c34\u53cd\u9988\u5230\u8f6c\u9f13\u4e2d\u3002\u4efb\u52a1\u5b8c\u6210\u4e86\u3002\u552f\u4e00\u7684\u6d3b\u52a8\u90e8\u4ef6\u662f\u7531\u76f8\u5bf9\u5b89\u9759\u7684\u7535\u52a8\u673a\u9a71\u52a8\u7684\u8f6c\u9f13\uff0c\u4ee5\u53ca\u6563\u70ed\u5668\u4e0a\u53ef\u80fd\u9700\u8981\u7684\u4efb\u4f55\u6392\u6c14\u6247(\u5982\u679c\u4f60\u9700\u8981\u7684\u8bdd)\u3002\n\u5361\u8bfa\u538b\u7f29\u516c\u53f8\u9996\u5e2d\u6267\u884c\u5b98\u6258\u5fb7\u00b7\u6c64\u666e\u68ee\u8bf4\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u6392\u6c14\u6247\u662f\u6574\u4e2a\u88c5\u7f6e\u4e2d\u566a\u97f3\u6700\u5927\u7684\u90e8\u5206\uff0c\u56e0\u4e3a\u538b\u7f29\u9f13\u672c\u8eab\u5728\u88c5\u7f6e\u4e2d\u975e\u5e38\u5b89\u9759\u5730\u65cb\u8f6c\uff1a\u5bf9\u4e8e\u5177\u6709\u9002\u5f53\u5916\u58f3\u548c\u98ce\u6247\u5e03\u7f6e\u7684\u5546\u4e1a\u8bbe\u8ba1\uff0c\u8be5\u7cfb\u7edf\u5c06\u80fd\u591f\u5728\u5ba4\u5185\u4ee5\u4f4e\u4e8e70\u5206\u8d1d\u7684\u901f\u5ea6\u8fd0\u884c\u3002\n\u5361\u8bfa\u6709\u4e00\u4e2a\u539f\u578b\uff0c\u4e00\u79cd\u6b63\u5728\u91cc\u8bfa\u5f00\u53d1\u548c\u6d4b\u8bd5\u7684\u5b8c\u5168\u96c6\u6210\u7684\u673a\u5668\uff0c\u6c64\u666e\u68ee\u8bf4\u8fd9\u662f\u7531\u52a0\u5dde\u80fd\u6e90\u59d4\u5458\u4f1a\u7684\u62e8\u6b3e\u8d44\u52a9\u7684\u3002\u8be5\u516c\u53f8\u6700\u521d\u8ba1\u5212\u53d1\u5e03\u4e00\u6b3e\u529f\u7387\u572810-20\u9a6c\u529b\u7684\u4ea7\u54c1\uff0c\u4f46\u968f\u7740\u6280\u672f\u7684\u6210\u719f\uff0c\u5b83\u5c06\u5f88\u5bb9\u6613\u6269\u5c55\u5230100\u9a6c\u529b\u4ee5\u4e0a\u7684\u5e94\u7528\u3002\u6c64\u666e\u68ee\u8bf4\uff0c\u6211\u4eec\u4e5f\u770b\u5230\u4e86\u538b\u7f29\u4e0d\u540c\u4e8e\u7a7a\u6c14\u7684\u6c14\u4f53\u7684\u6f5c\u529b\u3002\n\u5361\u8bfa\u8868\u793a\uff0c\u4e0e\u4f20\u7edf\u7684\u6d3b\u585e\u5f3a\u5236\u7a7a\u538b\u673a\u76f8\u6bd4\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u7528\u7684\u80fd\u6e90\u8981\u5c11\u5f97\u591a\uff0c\u5bff\u547d\u4e5f\u66f4\u957f\uff0c\u6b64\u5916\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u4e0d\u4f7f\u7528\u6cb9\u7684\u4e8b\u5b9e\u672c\u8eab\u4e5f\u6709\u597d\u5904\uff0c\u56e0\u4e3a\u5b83\u786e\u4fdd\u4e86\u6c14\u6d41\u4e2d\u6ca1\u6709\u6cb9\u6c61\u67d3\uff0c\u8fd9\u5728\u4e00\u4e9b\u7a7a\u6c14\u7eaf\u5ea6\u975e\u5e38\u91cd\u8981\u7684\u5236\u9020\u3001\u7814\u7a76\u3001\u7ed8\u753b\u3001\u98df\u54c1\u548c\u996e\u6599\u4f7f\u7528\u6848\u4f8b\u4e2d\u81f3\u5173\u91cd\u8981\u3002\n\u5361\u8bfa\u4ecd\u5904\u4e8e\u5f00\u53d1\u9636\u6bb5\uff0c\u6b63\u5728\u5bfb\u627e\u6295\u8d44\u8005\u5c06\u8fd9\u9879\u6280\u672f\u5e26\u5230\u4e00\u4e2a\u9884\u8ba1\u52302025\u5e74\u4ef7\u503c\u7ea6400\u4ebf\u7f8e\u5143\u7684\u5e02\u573a\u3002\u4e00\u9879\u6709\u8da3\u800c\u6709\u524d\u9014\u7684\u6280\u672f\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u89c6\u9891\u3002", "note_en": "The humble air compressor is a staple of the modern workshop, underpinning everything from tire inflation to air tools, factory equipment, research gear and paint sprayers. But there&#39;s always a better way to do things, and one California company believes it&#39;s come up with a design that cuts down markedly on noise, lasts longer, manages heat better and drops the total cost of ownership as much as 20 percent while using no oil.\n The Carnot compressor uses a strange centrifugal process to vastly cut down the number of moving parts in the device. It&#39;s inspired, the team tells me, by  a sixteenth-century device called a trompe, which used the force and weight of falling water, suffused with air bubbles, to compress the air and force it through a pipe with no moving parts whatsoever. These were commonly used in mining, as well as being a signature element of forges in Catalonia.\n A trompe needs to be huge to create any real pressure, though \u2013 one built at Ragged Chute, Ontario, uses a 345-foot (105-meter) drop to create just 128 psi, so the Carnot team looked to another way of accelerating bubbly water to achieve the same effect, and arrived at a centrifuge.\n So, the Carnot compressor sucks in air through a filter at the top, and mixes it with water at the top of a fast-spinning drum. The faster you spin it, the heavier the water gets, much like swinging a bucket of water around your head. Thus, the water squashes and compresses the air, and the mixture is forced out the bottom, getting separated into compressed air and water as it passes through the exit channels.\n  The compressed air goes into a tank as per usual. The water, which through this process absorbs much of the heat of compression, is then fed through a heat exchanger, which cools the water, radiates the heat out, and feeds the cool water back into the drum. Job done. The only moving parts are the spinning drum, powered by a relatively quiet electric motor, and any exhaust fan you might need on the radiator, if you need one at all.\n Indeed this exhaust fan, says Carnot Compression CEO Todd Thompson, is the noisiest part of the whole device, as the compressor drum itself spins very quietly in the device: &#34;For a commercial design with the proper enclosure and fan arrangement, the system will be able to operate indoors at below 70 dB.&#34;\n Carnot has a prototype, a fully integrated machine being developed and tested in Reno that Thompson says was funded by a grant from the California Energy Commission. The company initially plans to release a product in the 10-20 horsepower range, but it&#39;ll easily scale for applications over 100 horsepower as the technology matures. &#34;We also see the potential to compress different gases than air,&#34; says Thompson.\n On top of using significantly less energy and lasting longer than a traditional piston-forced air compressor, Carnot says the fact that this design uses no oil has benefits of its own, as it ensures no oil contamination in the airstream, which is critical in some manufacturing, research, painting, food and beverage use cases where air purity is a big deal.\n Carnot is still in the development stage and  seeking investors to take this technology to a market expected to be worth around US$40+ billion by 2025. An interesting and promising technology. Check out a video below.", "posttime": "2020-10-13 20:05:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u7a7a\u6c14\u538b\u7f29\u673a,puts", "title": "\u5361\u8bfa\u5bf9\u4e00\u53f0\u6709500\u5e74\u5386\u53f2\u7684\u7a7a\u6c14\u538b\u7f29\u673a\u7684\u8bbe\u8ba1\u8fdb\u884c\u4e86\u79bb\u5fc3\u65cb\u8f6c", "title_en": "Carnot puts a centrifugal spin on a 500-year-old air compressor design", "transed": 1, "url": "https://newatlas.com/good-thinking/carnot-centrifugal-air-compressor/", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u7a7a\u6c14\u538b\u7f29\u673a", "puts"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1028422, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Xonsh\u662f\u4e00\u6b3e\u8d85\u5f3a\u7684\u5916\u58f3\uff0c\u53ef\u4ee5\u8ba9\u60a8\u5feb\u901f\u9ad8\u6548\u5730\u5de5\u4f5c\uff01\u5e2e\u52a9xonsh\u8131\u9896\u800c\u51fa\u7684\u4e00\u4e9b\u529f\u80fd\u5305\u62ec\uff1a\n\u6587\u4ef6\u3002\n\u6211\u4eec\u76f8\u4fe1\u822a\u7ad9\u697c\u5e94\u8be5\u5bf9\u6240\u6709\u4eba\u5f00\u653e\uff01\u9664\u4e86\u662f\u4e00\u79cd\u6bd4\u5176\u4ed6shell\u66f4\u5e73\u6613\u8fd1\u4eba\u7684\u8bed\u8a00\u4e4b\u5916\uff0cxonsh\u8fd8\u52aa\u529b\u6210\u4e3a\u5f00\u53d1\u4eba\u5458\u548c\u7528\u6237\u6b22\u8fce\u548c\u63a5\u53d7\u7684\u793e\u533a\u3002\u8bf7\u7ed9\u6211\u4eec\u5199\u4fe1\uff0c\u5730\u5740\u662f\uff1a", "note_en": "Xonsh is a super-charged shell that enables you to work quickly and effectively! Some of the features that help set xonsh apart are:\n    Documentation\n  We believe that the terminal should be accessible to all! In addition to being a more approachable language than other shells, xonsh also strives to be a welcoming and accepting community of developers &amp; users. Please drop us a line at:", "posttime": "2020-10-13 20:05:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,xonsh", "title": "Xonsh Python Shell", "title_en": "The Xonsh Python Shell", "transed": 1, "url": "http://xon.sh", "via": "", "real_tags": ["python", "xonsh"]}, {"category": "", "categoryclass": "", "imagename": "41e0da3ee68e3647da9335d995e96951.jpeg", "infoid": 1028421, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u9ad8\u53ef\u89c1\u5ea6\u8863\u670d\u662f\u63d0\u9ad8\u80fd\u89c1\u5ea6\u548c\u8ba9\u4f60\u5728\u8def\u4e0a\u66f4\u5b89\u5168\u7684\u597d\u65b9\u6cd5\uff0c\u4f46\u6700\u8fd1\u7684\u4e00\u9879\u7814\u7a76\u53d1\u73b0\uff0c\u7a7f\u8fd9\u6837\u9c9c\u8273\u7684\u8863\u670d\u5bf9\u51cf\u5c11\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u53d1\u751f\u649e\u8f66\u4e8b\u4ef6\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002\n\u535a\u6d1b\u5c3c\u4e9a\u5927\u5b66(University Of Bologna)\u5fc3\u7406\u5b66\u5bb6\u7684\u4e00\u9879\u7814\u7a76\u53d1\u8868\u57283\u6708\u7248\u7684\u201c\u8fd0\u8f93\u4e0e\u5065\u5eb7\u6742\u5fd7\u201d(Journal of Transport&amp\uff1bHealth)\u4e0a\u3002\u8be5\u7814\u7a76\u8003\u5bdf\u4e86\u5f3a\u5236\u8981\u6c42\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u7a7f\u9ad8\u8ddf\u978b\u7684\u7acb\u6cd5\uff0c\u5e76\u5c06\u5176\u4e0e2001\u5e74\u81f32015\u5e7415\u5e74\u95f4\u7684\u4e8b\u6545\u7edf\u8ba1\u6570\u636e\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\n\u52a0\u5e03\u91cc\u57c3\u52d2\u00b7\u666e\u62c9\u8482\u6559\u6388\u7684\u7814\u7a76\u7ed3\u679c\u662f\u51b3\u5b9a\u6027\u7684\uff0c\u4ed6\u7684\u7814\u7a76\u53d1\u73b0\uff0c\u201c\u5f3a\u5236\u8981\u6c42\u9a91\u8f66\u4eba\u7a7f\u9ad8\u80fd\u89c1\u5ea6\u670d\u88c5\u7684\u7acb\u6cd5\u7684\u5b9e\u65bd\u5e76\u6ca1\u6709\u5f71\u54cd\u6d89\u53ca\u9053\u8def\u4ea4\u901a\u4e8b\u6545\u7684\u81ea\u884c\u8f66\u7684\u6570\u91cf\u53ca\u5176\u5728\u6d89\u53ca\u9053\u8def\u4ea4\u901a\u4e8b\u6545\u7684\u8f66\u8f86\u603b\u6570\u4e2d\u6240\u5360\u7684\u6bd4\u4f8b\u3002\u201d\n\u7814\u7a76\u8fd8\u53d1\u73b0\uff0c\u65e0\u8bba\u4f60\u662f\u5728\u7acb\u6cd5\u51fa\u53f0\u540e\u7acb\u5373\u89c2\u5bdf\u4e00\u6bb5\u65f6\u95f4\uff0c\u8fd8\u662f\u4ece\u66f4\u957f\u7684\u65f6\u95f4\u6765\u770b\uff0c\u90fd\u4e0d\u4f1a\u5bf9\u649e\u8f66\u4e8b\u4ef6\u7684\u6570\u91cf\u4ea7\u751f\u5f71\u54cd\u3002\n\u8fd9\u662f\u4e00\u7cfb\u5217\u7814\u7a76\u4e2d\u7684\u6700\u65b0\u4e00\u9879\uff0c\u8fd9\u4e9b\u7814\u7a76\u8d28\u7591\u8fd9\u6837\u7684\u89c2\u70b9\uff0c\u5373\u8ba9\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u7a7f\u9ad8\u53ef\u89c1\u5149\u8863\u670d\u4f1a\u8ba9\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u66f4\u5b89\u5168\uff0c\u5373\u4f7f\u6709\u66f4\u591a\u8bc1\u636e\u8868\u660e\uff0c\u7a7f\u9ad8\u53ef\u89c1\u5149\u6216\u53cd\u5149\u8863\u670d\u4f1a\u8ba9\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u66f4\u5bb9\u6613\u88ab\u53f8\u673a\u770b\u5230\u3002", "note_en": "You might think of hi-vis clothing as a good way to improve your visibility and make you safer on the road, but a recent study has found that wearing such bright clothing has no impact on reducing the number of crashes involving cyclists.\n A study by a psychologist at the University of Bologna, and published in the March edition of the   Journal of Transport &amp; Health, looked at legislation making hi-vis clothing mandatory for cyclists and compared this with accident statistics over a 15 year period between 2001 and 2015.\n  The findings by professor Gabriele Prati were conclusive, with his study finding \u201cthe implementation of legislation imposing high-visibility clothing for cyclist did not influence the number of bicycles involved in road crashes as well as its proportion in the total vehicles involved in road crashes.\u201d\n  The study also found that there was no impact on the number of crashes whether you looked at the period immediately after the legislation was introduced, or in the longer term.\n  This is the latest in a number of studies to cast doubt on the idea that making cyclists wear hi-vis clothing has an impact on making cyclists safer, even if there is more evidence that wearing hi-vis or reflective clothing makes cyclists more visible to drivers.", "posttime": "2020-10-13 20:05:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e8b\u6545,clothing,\u7814\u7a76", "title": "\u9a91\u81ea\u884c\u8f66\u7684\u4eba\u7a7f\u9ad8\u6e05\u670d\u88c5\u5e76\u4e0d\u80fd\u51cf\u5c11\u649e\u8f66\u4e8b\u6545\u7684\u6570\u91cf", "title_en": "Hi-vis clothing for cyclists does not reduce number of crashes", "transed": 1, "url": "https://www.cyclingweekly.com/news/latest-news/making-high-vis-compulsory-reduce-number-crashes-study-finds-374898", "via": "", "real_tags": ["\u4e8b\u6545", "clothing", "\u7814\u7a76"]}, {"category": "", "categoryclass": "", "imagename": "723519142c492bfd2b7bcd05d5385e66.png", "infoid": 1028420, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bb8\u591a\u73b0\u4ee3\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5728\u4f01\u4e1a\u89c4\u6a21\u4e0a\u6784\u5efa\uff0c\u6709\u65f6\u751a\u81f3\u9700\u8981\u5728\u4e92\u8054\u7f51\u89c4\u6a21\u4e0a\u6784\u5efa\u3002\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u9700\u8981\u6ee1\u8db3\u53ef\u6269\u5c55\u6027\u3001\u53ef\u7528\u6027\u3001\u5b89\u5168\u6027\u3001\u53ef\u9760\u6027\u548c\u6062\u590d\u80fd\u529b\u8981\u6c42\u3002\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u8ba8\u8bba\u4e00\u4e9b\u53ef\u4ee5\u5e2e\u52a9\u60a8\u8f7b\u677e\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\u6211\u5c06\u8ba8\u8bba\u6bcf\u79cd\u6a21\u5f0f\uff0c\u5982\u4f55\u5728\u4e91\u672c\u5730\u73af\u5883\u4e2d\u4f7f\u7528\u8be5\u6a21\u5f0f\uff0c\u4ee5\u53ca\u4f55\u65f6\u4f7f\u7528\u548c\u4f55\u65f6\u4e0d\u4f7f\u7528\u3002\n\u5176\u4e2d\u4e00\u4e9b\u6a21\u5f0f\u5e76\u4e0d\u662f\u5f88\u65b0\uff0c\u4f46\u5728\u5f53\u524d\u4e92\u8054\u7f51\u89c4\u6a21\u7684\u4e91\u4e16\u754c\u4e2d\u975e\u5e38\u6709\u7528\u3002\n\u4ee5\u4e0b\u662f\u6211\u5c06\u5728\u672c\u6587\u4e2d\u8ba8\u8bba\u7684\u6a21\u5f0f\u5217\u8868\uff1a\n\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u8bbe\u8ba1\u5e94\u8be5\u8003\u8651\u5230\u6545\u969c\u3002\u5982\u4eca\uff0c\u4e16\u754c\u5df2\u7ecf\u91c7\u7528\u4e86\u5fae\u670d\u52a1\uff0c\u800c\u8fd9\u4e9b\u670d\u52a1\u5927\u591a\u4f9d\u8d56\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u670d\u52a1\u3002\u8fd9\u4e9b\u8fdc\u7a0b\u670d\u52a1\u53ef\u80fd\u4f1a\u7531\u4e8e\u7f51\u7edc\u3001\u5e94\u7528\u7a0b\u5e8f\u8d1f\u8f7d\u7b49\u5404\u79cd\u539f\u56e0\u800c\u65e0\u6cd5\u53ca\u65f6\u54cd\u5e94\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b9e\u73b0\u91cd\u8bd5\u5e94\u8be5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002\n\u4f46\u6709\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u670d\u52a1\u964d\u7ea7\u6216\u670d\u52a1\u672c\u8eab\u5b8c\u5168\u6545\u969c\u7b49\u91cd\u5927\u95ee\u9898\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u65ad\u91cd\u5ba1\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u8fd9\u5c31\u662f\u65ad\u8def\u5668\u6a21\u5f0f\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u7684\u5730\u65b9\u3002\n\u4e0a\u56fe\u663e\u793a\u4e86\u65ad\u8def\u5668\u6a21\u5f0f\u7684\u5b9e\u65bd\uff0c\u5728\u8be5\u6a21\u5f0f\u4e2d\uff0c\u5f53\u670d\u52a11\u4e86\u89e3\u5230\u8c03\u7528\u670d\u52a12\u65f6\u5b58\u5728\u8fde\u7eed\u6545\u969c/\u8d85\u65f6\u65f6\uff0c\u670d\u52a11\u4e0d\u4f1a\u91cd\u8bd5\uff0c\u800c\u662f\u4f1a\u5c06\u547c\u53eb\u8df3\u8f6c\u5230\u670d\u52a12\uff0c\u5e76\u8fd4\u56de\u56de\u9000\u54cd\u5e94\u3002\n\u6709\u4e00\u4e9b\u6d41\u884c\u7684\u5f00\u6e90\u5e93\uff0c\u6bd4\u5982Netflix\u7684hystrix\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u7528\u6765\u5b9e\u73b0\u8fd9\u79cd\u6a21\u5f0f\u3002\n\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528API\u7f51\u5173\u6216\u8bf8\u5982\u7279\u4f7f\u4e4b\u7c7b\u7684SideCar\u4ee3\u7406\uff0c\u90a3\u4e48\u8fd9\u53ef\u4ee5\u5728\u4ee3\u7406\u7ea7\u522b\u672c\u8eab\u5b9e\u73b0\u3002\n\u6ce8\u610f\uff1a\u5728\u7535\u8def\u6253\u5f00\u65f6\u5b9e\u65bd\u5145\u5206\u7684\u65e5\u5fd7\u8bb0\u5f55\u548c\u8b66\u62a5\u975e\u5e38\u91cd\u8981\uff0c\u4ee5\u4fbf\u8ddf\u8e2a\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\u6536\u5230\u7684\u8bf7\u6c42\uff0c\u5e76\u4e14\u8fd0\u8425\u56e2\u961f\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u3002\n\u60a8\u8fd8\u53ef\u4ee5\u5728\u534a\u7535\u8def\u6253\u5f00\u7684\u60c5\u51b5\u4e0b\u5b9e\u65bd\u65ad\u8def\u5668\uff0c\u4ee5\u7ee7\u7eed\u4e3a\u670d\u52a1\u964d\u7ea7\u7684\u5ba2\u6237\u7aef\u63d0\u4f9b\u670d\u52a1\u3002\n\u5f53\u4e00\u4e2a\u670d\u52a1\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u8fdc\u7a0b\u670d\u52a1\uff0c\u5e76\u4e14\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u5931\u8d25\u3002\n\u5f53\u60a8\u5904\u7406\u672c\u5730\u4f9d\u8d56\u5173\u7cfb\u65f6-\u65ad\u8def\u5668\u53ef\u80fd\u4f1a\u4ea7\u751f\u5f00\u9500\u3002\n\u5bf9\u4e8e\u6d89\u53ca\u4f7f\u7528\u6570\u636e\u5b58\u50a8\u7684\u73b0\u4ee3\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0cCQRS\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u6a21\u5f0f\u3002\u5b83\u57fa\u4e8e\u5206\u79bb\u6570\u636e\u5b58\u50a8\u4e2d\u7684\u8bfb(\u67e5\u8be2)\u548c\u5199/\u66f4\u65b0(\u547d\u4ee4)\u64cd\u4f5c\u7684\u539f\u5219\u3002\n\u5047\u8bbe\u60a8\u6b63\u5728\u6784\u5efa\u4e00\u4e2a\u9700\u8981\u5c06\u6570\u636e\u5b58\u50a8\u5728MySQL/PostgreSQL\u7b49\u6570\u636e\u5e93\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u4f17\u6240\u5468\u77e5\uff0c\u5f53\u5c06\u6570\u636e\u5199\u5165\u6570\u636e\u5b58\u50a8\u533a\u65f6\uff0c\u4e00\u4e2a\u64cd\u4f5c\u9700\u8981\u51e0\u4e2a\u6b65\u9aa4-\u5982\u9a8c\u8bc1\u3001\u5efa\u6a21\u548c\u6301\u4e45\u6027-\u56e0\u6b64\u5178\u578b\u7684\u5199/\u66f4\u65b0\u64cd\u4f5c\u6bd4\u7b80\u5355\u7684\u8bfb\u64cd\u4f5c\u82b1\u8d39\u66f4\u957f\u7684\u65f6\u95f4\u3002\n\u5f53\u60a8\u4f7f\u7528\u5355\u4e2a\u6570\u636e\u5b58\u50a8\u540c\u65f6\u5927\u89c4\u6a21\u6267\u884c\u8bfb\u5199\u64cd\u4f5c\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u5f00\u59cb\u770b\u5230\u6027\u80fd\u95ee\u9898\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cCQRS\u6a21\u5f0f\u53ef\u80fd\u5f88\u6709\u7528\u3002CQRS\u6a21\u5f0f\u5efa\u8bae\u5bf9\u8bfb\u5199\u64cd\u4f5c\u4f7f\u7528\u5355\u72ec\u7684\u6570\u636e\u5b58\u50a8\u3002\n\u6ce8\u610f\uff1a\u5982\u4eca\u5927\u591a\u6570PaaS\u6570\u636e\u5e93\u90fd\u63d0\u4f9b\u521b\u5efa\u8bfb\u526f\u672c\u7684\u529f\u80fd(Google Cloud SQL\u3001Azure SQL DB\u3001Amazon RDS\u7b49)\u3002\u5728\u5e2e\u52a9\u5b9e\u73b0CQRS\u7684\u6570\u636e\u5b58\u50a8\u4e2d\uff0cCQRS\u7684\u5b9e\u73b0\u8981\u5bb9\u6613\u5f97\u591a\u3002\n\u5982\u679c\u60a8\u5904\u7406\u7684\u662f\u672c\u5730\u6570\u636e\u5e93\uff0c\u8bb8\u591a\u4f01\u4e1a\u6570\u636e\u5e93\u4e5f\u63d0\u4f9b\u6b64\u529f\u80fd\u3002\n\u6ce8\u610f\uff1a\u73b0\u5728\u6709\u4e9b\u4eba\u4e5f\u66f4\u559c\u6b22\u5c06\u8bfb\u526f\u672c\u5b9e\u73b0\u4e3a\u5feb\u901f\u3001\u9ad8\u6027\u80fd\u7684NoSQL\u6570\u636e\u5e93\uff0c\u5982MongoDB\u548cElasticsearch\u3002\n\u5f53\u60a8\u8003\u8651\u6269\u5c55\u9700\u8981\u5927\u91cf\u8bfb\u5199\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\u3002\n\u5f53\u60a8\u6b63\u5728\u6784\u5efa\u4e00\u4e2a\u5e38\u89c4\u7684CRUD\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u4e14\u8be5\u5e94\u7528\u7a0b\u5e8f\u4e0d\u9700\u8981\u4e00\u6b21\u8fdb\u884c\u5927\u91cf\u7684\u8bfb\u5199\u64cd\u4f5c\u65f6\u3002\nEvent Sourcing\u662f\u4e00\u79cd\u6709\u8da3\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5176\u4e2d\u57df\u4e8b\u4ef6\u5e8f\u5217\u5b58\u50a8\u4e3a\u65e5\u5fd7\uff0c\u65e5\u5fd7\u7684\u805a\u5408\u89c6\u56fe\u63d0\u4f9b\u5e94\u7528\u7a0b\u5e8f\u7684\u5f53\u524d\u72b6\u6001\u3002\n\u6b64\u6a21\u5f0f\u901a\u5e38\u7528\u4e8e\u8d1f\u62c5\u4e0d\u8d77\u6570\u636e\u5b58\u50a8\u9501\u7684\u7cfb\u7edf\uff0c\u4ee5\u53ca\u9700\u8981\u7ef4\u62a4\u4e8b\u4ef6\u7684\u5ba1\u6838\u548c\u5386\u53f2\u8bb0\u5f55\u7684\u7cfb\u7edf-\u4f8b\u5982\uff0c\u9152\u5e97/\u4f1a\u8bae/\u5ea7\u4f4d\u9884\u8ba2\u7b49\u5e94\u7528\u7a0b\u5e8f\u3002\n\u8003\u8651\u5176\u4e2d\u671f\u671b\u7528\u6237\u9884\u8ba2\u6216\u53d6\u6d88\u9884\u8ba2\u7684\u9152\u5e97\u623f\u95f4\u9884\u8ba2\u7cfb\u7edf\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u9700\u8981\u5c06\u9884\u8ba2\u548c\u53d6\u6d88\u5b58\u50a8\u4e3a\u4e00\u7cfb\u5217\u4e8b\u4ef6\u3002\u5728\u6bcf\u6b21\u9884\u8ba2\u4e4b\u524d\uff0c\u6c47\u603b\u89c6\u56fe\u901a\u8fc7\u67e5\u770b\u6d3b\u52a8\u65e5\u5fd7\u663e\u793a\u53ef\u7528\u623f\u95f4\u3002\n\u6ce8\u610f\uff1a\u5927\u591a\u6570\u4e91\u670d\u52a1\u63d0\u4f9b\u5546\u90fd\u652f\u6301\u6d88\u606f\u4f20\u9012\u670d\u52a1\uff0c\u5982Google Pub/Sub\u3001Azure Service Bus\u3001AWS SQS\u7b49\u3002\u8fd9\u4e9b\u670d\u52a1\u4e0e\u5f3a\u5927\u7684\u4e00\u81f4\u6027\u6570\u636e\u5b58\u50a8\u76f8\u7ed3\u5408\uff0c\u53ef\u7528\u4e8e\u5b9e\u73b0\u6b64\u6a21\u5f0f\u3002\n\u901a\u5e38\u9002\u7528\u4e8e\u5ea7\u4f4d\u9884\u8ba2\u7cfb\u7edf-\u5982\u516c\u4ea4\u8f66\u3001\u706b\u8f66\u3001\u4f1a\u8bae\u3001\u7535\u5f71\u5385\u7b49-\u6216\u7531\u8d2d\u7269\u8f66\u64cd\u4f5c\u3001\u652f\u4ed8\u7b49\u6d3b\u52a8\u7ec4\u6210\u7684\u7535\u5b50\u5546\u52a1\u7cfb\u7edf\u3002\n\u5f53\u9700\u8981\u5f3a\u5927\u7684\u5ba1\u6838\u548c\u4e8b\u4ef6\u91cd\u653e\u6765\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u7684\u5f53\u524d\u548c\u8fc7\u53bb\u72b6\u6001\u65f6\u3002\n\u968f\u7740\u5fae\u670d\u52a1\u7684\u5174\u8d77\uff0cSidecar\u6a21\u5f0f\u53d8\u5f97\u6d41\u884c\u8d77\u6765\u3002\u5728\u6b64\u6a21\u5f0f\u4e2d\uff0c\u60a8\u5c06\u5e94\u7528\u7a0b\u5e8f\u7684\u7ec4\u4ef6\u90e8\u7f72\u5230\u5355\u72ec\u7684\u6d41\u7a0b\u6216\u5bb9\u5668\u4e2d\u3002\u8fd9\u6709\u52a9\u4e8e\u5b9e\u73b0\u62bd\u8c61\u548c\u5c01\u88c5\u3002\n\u7279\u4f7f\u4ee3\u7406\u662f\u76ee\u524d\u5e94\u7528\u6700\u5e7f\u6cdb\u3001\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u4fa7\u8f66\u4ee3\u7406\u4e4b\u4e00\u3002\u5b83\u5e2e\u52a9\u60a8\u4fdd\u6301\u5e94\u7528\u7a0b\u5e8f\u7684\u6838\u5fc3\u529f\u80fd\u72ec\u7acb\uff0c\u4f7f\u7528SideCar\u9694\u79bb\u7f51\u7edc\u3001\u53ef\u89c2\u5bdf\u6027\u548c\u5b89\u5168\u6027\u7b49\u5e38\u89c1\u529f\u80fd\u3002\n\u8fd9\u79cd\u7c7b\u578b\u4fa7\u8f66\u53ef\u4ee5\u5e2e\u52a9\u62bd\u8c61L4/L7\u7c7b\u578b\u7684\u901a\u4fe1\u3002\u50cf\u7279\u4f7f\u4ee3\u7406\u8fd9\u6837\u7684\u65c1\u89c2\u8005\u751a\u81f3\u901a\u8fc7\u5b9e\u65bd\u5171\u540cTLS\u6765\u5e2e\u52a9\u5b9e\u73b0\u66f4\u9ad8\u7684\u5b89\u5168\u6027\u3002\n\u60a8\u53ef\u4ee5\u5c06\u5176\u4e0e\u670d\u52a1\u7f51\u683c\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u5b9e\u73b0\u5404\u79cd\u5fae\u670d\u52a1\u4e4b\u95f4\u66f4\u597d\u7684\u901a\u4fe1\u548c\u5b89\u5168\u6027\u3002\u60a8\u53ef\u4ee5\u5728\u6211\u7684\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u5185\u5bb9\u3002\n\u5f53\u60a8\u5728\u5904\u7406\u901a\u5e38\u65e0\u6cd5\u5e94\u5bf9\u65b0\u65f6\u4ee3\u901a\u4fe1\u548c\u5b89\u5168\u6311\u6218\u7684\u65e7\u5f0f\u5e94\u7528\u7a0b\u5e8f\u65f6\u3002\n\u5f53\u60a8\u5904\u7406\u9700\u8981\u76f8\u4e92\u901a\u4fe1\u7684\u6709\u9650\u6570\u91cf\u7684\u670d\u52a1\u65f6\u3002\n\u5728\u5178\u578b\u7684\u4ea7\u54c1\u5f00\u53d1\u5468\u671f\u4e2d\uff0c\u540e\u7aef\u5de5\u7a0b\u5e08\u8d1f\u8d23\u521b\u5efa\u4e0e\u6570\u636e\u5b58\u50a8\u4ea4\u4e92\u7684\u670d\u52a1\uff0c\u524d\u7aef\u5de5\u7a0b\u5e08\u8d1f\u8d23\u6784\u5efa\u7528\u6237\u754c\u9762\u3002\u5982\u4eca\uff0c\u5728\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u9700\u8981\u540c\u65f6\u8003\u8651\u79fb\u52a8\u548c\u684c\u9762\u4f7f\u7528\u60c5\u51b5\u3002\n\u5c3d\u7ba1\u79fb\u52a8\u8bbe\u5907\u548c\u53f0\u5f0f\u8bbe\u5907\u5728\u786c\u4ef6\u65b9\u9762\u7684\u5dee\u8ddd\u8d8a\u6765\u8d8a\u8fd1\uff0c\u4f46\u79fb\u52a8\u8bbe\u5907\u7684\u8fde\u63a5\u548c\u4f7f\u7528\u4ecd\u7136\u9762\u4e34\u6311\u6218\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cBFF\u6a21\u5f0f\u53d8\u5f97\u76f8\u5f53\u65b9\u4fbf\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u9700\u8981\u4e3a\u7279\u5b9a\u7684\u524d\u7aef\u6784\u5efa/\u5b9a\u5236\u540e\u7aef\u670d\u52a1\u3002\n\u8981\u4f18\u5316\u79fb\u52a8\u5ba2\u6237\u7aef\u7684\u6027\u80fd\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u6784\u5efa\u5355\u72ec\u7684\u540e\u7aef\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u4f7f\u7528\u8f7b\u91cf\u7ea7\u548c\u5206\u9875\u54cd\u5e94\u8fdb\u884c\u54cd\u5e94\u3002\n\u60a8\u53ef\u80fd\u8fd8\u5e0c\u671b\u5c06\u6b64\u6a21\u5f0f\u7528\u4e8e\u5404\u79cd\u670d\u52a1\u7684\u805a\u5408\uff0c\u4ee5\u51cf\u5c11\u95f2\u804a\u7684\u901a\u4fe1\u3002\n\u6ce8\u610f\uff1a\u73b0\u5728\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fAPI\u7f51\u5173\uff0c\u90a3\u4e48BFF\u6a21\u5f0f\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5728\u7f51\u5173\u672c\u8eab\u4e2d\u5b9e\u73b0\uff0c\u5e76\u4e14\u60a8\u4e0d\u9700\u8981\u7ef4\u62a4\u5355\u72ec\u7684\u670d\u52a1\u3002\n\u5f53\u60a8\u60f3\u8981\u4e3a\u4e0d\u540c\u7684\u5ba2\u6237\u7aef(\u5982\u53f0\u5f0f\u673a\u548c\u79fb\u52a8\u5ba2\u6237\u7aef)\u4ea4\u4ed8\u4ea7\u54c1/\u670d\u52a1\u65f6\u3002\n\u5f53\u671f\u671b\u79fb\u52a8\u548c\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u663e\u793a\u76f8\u4f3c\u7684\u4fe1\u606f\u5e76\u63d0\u4f9b\u76f8\u4f3c\u7684\u529f\u80fd\u65f6\u3002\n\u5982\u679c\u60a8\u5728\u4e00\u4e2a\u6b63\u5728\u8fc8\u5411\u5e94\u7528\u7a0b\u5e8f\u73b0\u4ee3\u5316\u4e4b\u65c5\u7684\u7ec4\u7ec7\u4e2d\u5de5\u4f5c\uff0c\u90a3\u4e48\u627c\u6740\u8bbe\u8ba1\u6a21\u5f0f\u662f\u5fc5\u987b\u7684\u3002\u627c\u6740\u8bbe\u8ba1\u6a21\u5f0f\u4e3b\u5f20\u5728\u60a8\u7684\u9057\u7559\u5e94\u7528\u7a0b\u5e8f\u548c\u65b0\u5e94\u7528\u7a0b\u5e8f\u4e4b\u4e0a\u521b\u5efa\u5916\u89c2\uff0c\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u62bd\u8c61\u7684\u89c6\u56fe\u3002\n\u6ce8\u610f\uff1a\u5728\u5178\u578b\u7684IT\u7ec4\u7ec7\u4e2d\uff0c\u5982\u679c\u60a8\u8981\u4ece\u4e00\u4e2aERP\u8fc1\u79fb\u5230\u53e6\u4e00\u4e2aERP\uff0c\u5219\u6b64\u7c7b\u578b\u7684\u6a21\u5f0f\u975e\u5e38\u6709\u7528\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fAPI\u7f51\u5173\uff0c\u90a3\u4e48\u5728\u7f51\u5173\u4ee3\u7406\u672c\u8eab\u4e2d\u5b9e\u73b0\u8fd9\u4e00\u70b9\u5c31\u4f1a\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\n\u60a8\u9700\u8981\u51b3\u5b9a\u662f\u8981\u5728\u8fc1\u79fb\u7ed3\u675f\u65f6\u4fdd\u7559\u8fd8\u662f\u5220\u9664\u5916\u89c2\u3002\n\u5f53\u60a8\u8fc1\u79fb\u6216\u73b0\u4ee3\u5316\u590d\u6742\u7684\u3001\u9ad8\u5ea6\u4f9d\u8d56\u7684\u5e94\u7528\u7a0b\u5e8f(\u5982ERP\u8fc1\u79fb)\u65f6", "note_en": "Many modern-day applications need to be built at an enterprise scale, sometimes even at an internet scale. Each application needs to meet scalability, availability, security, reliability, and resiliency demands.\n In this article, I\u2019m going to talk about some design patterns that can help you achieve the above-mentioned abilities with ease. I\u2019ll be talking about each pattern, how to use that pattern in a cloud-native environment, and when to use it and when not.\n Some of these patterns aren\u2019t so new but are very useful in the current internet-scale cloud world.\n Here\u2019s the list of patterns I\u2019ll be discussing in this article:\n  Distributed systems should be designed by taking failures into consideration. These days the world has adopted microservices, and these services are mostly dependent on other remote services. These remote services could fail to respond in time due to various reasons like network, application load, etc. In most cases, implementing retries should be able to solve the issues.\n But sometimes there may be major issues like service degradation or complete service failure in and of itself. It\u2019s pointless to keep retrying in such cases. That\u2019s where the Circuit Breaker pattern can be useful.\n  The above diagram showcases the implementation of the Circuit Breaker pattern, where when a Service 1 understands there are continuous failures/ timeouts when Service 2 is called, instead of retrying, Service 1 trips the calls to Service 2 and returns the fallback response.\n There are popular open-source libraries, like  Netflix\u2019s Hystrix, that can be used to implement this pattern very easily.\n If you\u2019re using API gateways or sidecar proxies like Envoy, then this can be achieved at the proxy level itself.\n Note: It\u2019s very important that there\u2019s sufficient logging and alerting implemented when the circuit is open in order to keep track of requests received during this time and that the operations team is aware of this.\n You can also implement a circuit breaker with the half circuit open to continue to service clients with degraded service.\n  When a service is dependent on another remote service, and it\u2019s likely to fail in some scenarios\n  When you\u2019re dealing with local dependencies \u2014 a Circuit Breaker might create overhead\n  CQRS is a very useful pattern for modern-day applications that involve using data stores. It\u2019s based on a principle of segregating the read (query) and write/updates (command) operations in a data store.\n Say you\u2019re building an application that requires you to store data in a database like MySQL/PostgreSQL etc. As everyone knows, when writing data into the data store, an operation needs to take several steps \u2014 like validation, model, and persistence \u2014 and hence typical write/update operations take longer than the simple read operations.\n When you\u2019re using a single data store to perform both read and write operations at the same time and at scale, then you may start seeing performance issues.\n In such cases, the CQRS pattern can be useful. CQRS patterns suggest using separate data stores for the read and write operations.\n  Note: Most PaaS databases these days provide the ability to create  read replicas  ( Google Cloud SQL,  Azure SQL DB,  Amazon RDS, etc.) of the data stores which help to achieve CQRS much easier.\n A lot of enterprise databases also provide this capability if you\u2019re dealing with on-prem databases.\n Note: These days some people also prefer to implement read replicas as fast and performant NoSQL databases, like MongoDB and Elasticsearch.\n  When you\u2019re looking at scaling an application expecting a huge number of reads and writes\n  When you\u2019re building a regular CRUD application that doesn\u2019t expect a huge number of reads and writes at a time\n  Event Sourcing is an interesting design pattern where a sequence of domain events is stored as a journal, and an aggregated view of the journal gives the current state of the application.\n This pattern is typically used for systems that can\u2019t afford data store locks and that need to maintain the audit and history of the events \u2014 for instance, applications like hotel/conference/seat bookings.\n  Considering a hotel room reservation system in which the users are expected to book or cancel reservations. Here you need to store the bookings and cancellations as a series of events. Before every booking, an aggregated view shows the available rooms by looking at the events journals.\n Note: Most cloud-service providers support messaging services like Google Pub/Sub, Azure Service Bus, AWS SQS, etc. These services, in combination with strong consistent data stores, can be used to implement this pattern.\n  Typically suitable for seat-reservation systems \u2014 like bus, train, conferences, movie halls, etc. \u2014 or e-commerce systems that consist of events like cart operations, payments, etc.\n When there\u2019s a requirement of strong auditing and events replay to create a current and past state of applications\n  The Sidecar pattern became popular with the rise of microservices. In this pattern, you deploy a component of an application into a separate process or a container. This helps to achieve abstraction and encapsulation.\n Envoy Proxy is one of the most popular sidecar proxies and is widely used. It helps you keep the core functionality of the application separate, using the sidecar to isolate common features like networking, observability, and security.\n  Such type of sidecars can help abstract L4/L7 type of communication. Sidecars like Envoy Proxies even help achieve higher security by implementing mutual TLS.\n You can use this in a combination with a service mesh to achieve better communication and security among the various microservices. You can read more about it in my  previous article.\n  When you\u2019re dealing with legacy applications that typically fall short of coping up with new-age communication and security challenges\n  When you\u2019re dealing with a limited number of services that need to communicate with each other\n  In a typical product development cycle, back-end engineers are responsible for creating services that interact with data stores, and front-end engineers take care of building user interfaces. These days applications need to be built keeping mobile as well as desktop usage in mind.\n Even though the gap between mobile and desktop devices in terms of hardware is getting closer, connectivity and usage continue to be challenging for mobile devices.\n In such scenarios, BFF patterns become quite handy. Here, you\u2019re expected to build/customize back-end services for the specific front end.\n  To optimize the performance of mobile clients, you may want to build a separate back-end service that responds with lightweight and paginated responses.\n You may also want to use this pattern for the aggregation of various services in order to reduce the chatty communication.\n Note: These days if you\u2019re using an API gateway, the BFF pattern can be easily implemented in the gateway itself, and you don\u2019t need to maintain separate services.\n  When you want to deliver a product/service for different clients, like desktop and mobile clients\n  When mobile and desktop applications are expected to showcase similar information and provide similar functionality\n  If you\u2019re working in an organization that\u2019s on a journey toward application modernization, then the Strangler design pattern is a must. The Strangler design pattern advocates creating a facade on top of your legacy and a new application, providing an abstracted view to the consumers.\n   Note: In a typical IT organization, if you\u2019re migrating from one ERP to another, this type of pattern is extremely useful. If you\u2019re using an API gateway, it becomes even easier to implement this in the gateway proxy itself.\n You need to decide if you want to keep the facade at the end of migration or remove it.\n  When you\u2019re migrating or modernizing a complex, highly dependent application like ERP migrations", "posttime": "2020-10-13 20:04:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,\u8bbe\u8ba1,day,\u670d\u52a1", "title": "\u9762\u5411\u8f6f\u4ef6\u4e13\u4e1a\u4eba\u5458\u7684\u73b0\u4ee3\u67b6\u6784\u8bbe\u8ba1\u6a21\u5f0f", "title_en": "Modern-Day Architecture Design Patterns for Software Professionals", "transed": 1, "url": "https://medium.com/better-programming/modern-day-architecture-design-patterns-for-software-professionals-9056ee1ed977", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u8bbe\u8ba1", "day", "\u670d\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "fd5122326ea062cc6207fdfaa34145e7.jpg", "infoid": 1028419, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5251\u6865\u5927\u5b66\u80fd\u6e90\u4e0e\u53ef\u6301\u7eed\u53d1\u5c55\u6559\u6388\u6b27\u6587\u00b7\u8d56\u65af\u7eb3\u6307\u51fa\uff0c\u592a\u9633\u4ea7\u751f\u7684\u80fd\u91cf\u8db3\u4ee5\u6ee1\u8db3\u4eba\u7c7b\u6d3b\u52a8\u7684\u9700\u8981\uff0c\u4f46\u6211\u4eec\u4ecd\u7136\u65e0\u6cd5\u6355\u6349\u5230\u8db3\u591f\u7684\u80fd\u91cf\u3002\n\u867d\u7136\u592a\u9633\u80fd\u7535\u6c60\u677f\u8fd1\u5e74\u6765\u53d6\u5f97\u4e86\u5f88\u5927\u7684\u8fdb\u6b65\uff0c\u53d8\u5f97\u66f4\u4fbf\u5b9c\u3001\u66f4\u9ad8\u6548\uff0c\u4f46\u5b83\u4eec\u53ea\u63d0\u4f9b\u7535\u529b\uff0c\u800c\u4e0d\u662f\u53ef\u50a8\u5b58\u7684\u6db2\u4f53\u71c3\u6599\uff0c\u540e\u8005\u4ecd\u7136\u9700\u6c42\u5f88\u5927\u3002\n\u5982\u679c\u4f60\u770b\u770b\u5168\u7403\u7684\u80fd\u6e90\u7ec4\u5408\u548c\u9700\u6c42\uff0c\u7535\u529b\u53ef\u80fd\u53ea\u536020-25%\u3002\u56e0\u6b64\uff0c\u95ee\u9898\u662f\uff0c\u5f53\u6211\u4eec\u8986\u76d6\u4e86\u8fd925%\u4e4b\u540e\uff0c\u6211\u4eec\u4e0b\u4e00\u6b65\u8be5\u600e\u4e48\u505a\uff1f\u8d56\u65af\u7eb3\u6559\u6388\u95ee\u9053\u3002\n\u4ed6\u7684\u7b54\u6848\u662f\u4ef0\u671b\u5927\u81ea\u7136\uff1a\u690d\u7269\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u7075\u611f\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u6570\u767e\u4e07\u5e74\u7684\u65f6\u95f4\u91cc\u5df2\u7ecf\u5b66\u4f1a\u4e86\u5982\u4f55\u5438\u6536\u9633\u5149\u5e76\u5c06\u80fd\u91cf\u50a8\u5b58\u5728\u80fd\u6e90\u8f7d\u4f53\u4e2d\u3002\n\u6211\u771f\u7684\u76f8\u4fe1\u5728\u63a5\u4e0b\u6765\u7684\u4e8c\u5341\u5e74\u91cc\uff0c\u4eba\u5de5\u5149\u5408\u4f5c\u7528\u5c06\u6210\u4e3a\u80fd\u6e90\u7ec4\u5408\u7684\u4e00\u90e8\u5206\u3002\n\u5f53\u690d\u7269\u8fdb\u884c\u5149\u5408\u4f5c\u7528\u65f6\uff0c\u5b83\u4eec\u5438\u6536\u6c34\u548c\u4e8c\u6c27\u5316\u78b3\uff0c\u5e76\u5229\u7528\u6765\u81ea\u592a\u9633\u7684\u5149\u7ebf\u5c06\u8fd9\u4e9b\u539f\u6750\u6599\u8f6c\u5316\u4e3a\u751f\u957f\u6240\u9700\u7684\u78b3\u6c34\u5316\u5408\u7269\u3002\n\u8d56\u65af\u7eb3\u6559\u6388\u8868\u793a\uff1a\u6211\u4eec\u60f3\u590d\u5236\u8fd9\u4e00\u6a21\u5f0f\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u662f\u771f\u7684\u60f3\u751f\u4ea7\u78b3\u6c34\u5316\u5408\u7269\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u71c3\u6599\u8d28\u91cf\u5f88\u5dee\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u751f\u4ea7\u78b3\u6c34\u5316\u5408\u7269\uff0c\u800c\u662f\u5c1d\u8bd5\u751f\u4ea7\u66f4\u5bb9\u6613\u4f7f\u7528\u7684\u4ea7\u54c1\u3002\n\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u690d\u7269\u5b9e\u9645\u4e0a\u5e76\u4e0d\u64c5\u957f\u5149\u5408\u4f5c\u7528\uff0c\u53ea\u5c06\u5927\u7ea61%\u62162%\u7684\u592a\u9633\u80fd\u8f6c\u5316\u4e3a\u71c3\u6599\u3002\u7f8e\u56fd\u80fd\u6e90\u90e8\u7684\u7ed3\u8bba\u662f\uff0c\u8981\u4f7f\u4eba\u5de5\u5149\u5408\u4f5c\u7528\u5728\u7ecf\u6d4e\u4e0a\u53ef\u884c\uff0c\u6548\u7387\u9700\u8981\u63d0\u9ad8\u52305%\u523010%\u4e4b\u95f4\u3002\n\u8d56\u65af\u7eb3\u6559\u6388\u7684\u56e2\u961f\u5df2\u7ecf\u7814\u7a76\u4e86\u8bb8\u591a\u65b9\u6cd5\uff0c\u5305\u62ec\u4e00\u79cd\u6a21\u62df\u81ea\u7136\u5149\u5408\u4f5c\u7528\u7684\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u4f7f\u7528\u9176\u6765\u5206\u89e3\u6c34\u5e76\u4ea7\u751f\u71c3\u6599\u6240\u9700\u7684\u6c22\u6c14\u3002\n\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u6216\u8bb8\u66f4\u6709\u5e0c\u671b\u7684\u662f\u4ed6\u7684\u56e2\u961f\u6700\u8fd1\u5f00\u53d1\u7684\u4e00\u79cd\u5c0f\u578b\u8bbe\u5907\uff0c\u53ef\u4ee5\u5c06\u9633\u5149\u3001\u4e8c\u6c27\u5316\u78b3\u548c\u6c34\u8f6c\u5316\u4e3a\u6c27\u6c14\u548c\u7532\u9178\uff0c\u7532\u9178\u662f\u4e00\u79cd\u5177\u6709\u9ad8\u80fd\u91cf\u5bc6\u5ea6\u7684\u6db2\u4f53\u71c3\u6599\u3002\n\u8be5\u8bbe\u5907\u5305\u542b\u4e00\u4e2a\u7535\u6c60\u677f\uff0c\u8be5\u7535\u6c60\u677f\u4f4d\u4e8e\u6c34\u548c\u4e8c\u6c27\u5316\u78b3\u7684\u6d74\u7f38\u4e2d\u3002\u5728\u9633\u5149\u4e0b\uff0c\u7535\u6c60\u677f\u91ca\u653e\u7535\u5b50\uff0c\u7535\u5b50\u4e0e\u4e8c\u6c27\u5316\u78b3\u548c\u6c34\u4e2d\u7684\u8d28\u5b50\u7ed3\u5408\uff0c\u751f\u6210\u7532\u9178\u3002\n\u8fd9\u4e9b\u7cfb\u7edf\u5c31\u50cf\u9762\u677f\u6216\u8584\u677f\u3002\u96f7\u65af\u7eb3\u6559\u6388\u8868\u793a\uff1a\u8fd9\u662f\u4e00\u6b3e\u975e\u5e38\u8584\u7684\u8bbe\u5907\uff0c\u4f60\u51e0\u4e4e\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u4e00\u5f20\u7eb8\u3002\n\u4e5f\u8bb8\u8fd9\u6b3e\u8bbe\u5907\u5411\u524d\u8fc8\u51fa\u7684\u6700\u5927\u4e00\u6b65\u662f\u5b83\u662f\u72ec\u7acb\u7684\u3002\u5b83\u4e0d\u9700\u8981\u5916\u90e8\u7535\u6e90\uff0c\u4e5f\u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u50ac\u5316\u5242\u7684\u8865\u5145\u3002\n\u5c3d\u7ba1\u9762\u4e34\u6311\u6218\uff0c\u4eba\u5de5\u5149\u5408\u4f5c\u7528\u8fd8\u662f\u5438\u5f15\u4e86\u91cd\u91cf\u7ea7\u6295\u8d44\u3002\u5728\u7f8e\u56fd\uff0c\u80fd\u6e90\u90e8\u6700\u8fd1\u5ba3\u5e03\u5728\u4e94\u5e74\u5185\u62e8\u6b3e1\u4ebf\u7f8e\u5143(7600\u4e07\u82f1\u9551)\u3002\n\u8fd9\u7b14\u94b1\u5c06\u7528\u4e8e\u4e24\u4e2a\u72ec\u7acb\u7684\u9879\u76ee\uff1a\u592a\u9633\u80fd\u5230\u6db2\u4f53\u71c3\u6599\u6df7\u5408\u65b9\u6cd5\u4e2d\u5fc3(Chase)\u548c\u6db2\u4f53\u9633\u5149\u8054\u76df(LISA)\u3002\n\u7531\u5317\u5361\u7f57\u6765\u7eb3\u5927\u5b66\u6559\u5802\u5c71\u5206\u6821(UNC)\u9886\u5bfc\u7684\u5927\u901a\u94f6\u884c\u6b63\u5728\u7814\u7a76\u4e0e\u5251\u6865\u5927\u5b66\u7684\u8bbe\u5907\u7c7b\u4f3c\u7684\u5b9e\u9645\u5e94\u7528\uff0c\u65b9\u6cd5\u662f\u5f00\u53d1\u7cfb\u7edf\uff0c\u5982\u592a\u9633\u80fd\u7535\u6c60\u677f\uff0c\u4f7f\u7528\u534a\u5bfc\u4f53\u5438\u6536\u5149\u7ebf\uff0c\u7136\u540e\u4f7f\u7528\u5404\u79cd\u4e0d\u540c\u7684\u50ac\u5316\u5242\u5c06\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u4e3a\u71c3\u6599\u3002\n\u5927\u901a\u526f\u4e3b\u4efb\u5409\u8389\u5b89\u00b7\u9093\u666e\u897f(Jillian Dempsey)\u6559\u6388\u8868\u793a\uff0c\u7814\u7a76\u7684\u4e00\u4e2a\u7279\u522b\u91cd\u70b9\u662f\u7ea7\u8054\u50ac\u5316\u5242\u7684\u6982\u5ff5\u3002\u5c06\u4e8c\u6c27\u5316\u78b3\u8f6c\u5316\u4e3a\u53ef\u7528\u7684\u71c3\u6599\u9700\u8981\u8fdb\u884c\u4e0d\u6b62\u4e00\u6b21\u7684\u5316\u5b66\u8f6c\u5316\uff0c\u800c\u50ac\u5316\u5242\u4e00\u6b21\u53ea\u80fd\u5904\u7406\u4e00\u6b21\u3002\n\u5979\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u662f\u7b2c\u4e00\u6b65\uff0c\u7136\u540e\u628a\u4ea7\u54c1\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u50ac\u5316\u5242\u3002\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u8fd0\u884c\u4e00\u4e2a\u975e\u5e38\u6709\u9009\u62e9\u6027\u7684\u8fc7\u7a0b\uff0c\u5e76\u5728\u8fd9\u4e00\u5355\u72ec\u7684\u6b65\u9aa4\u4e4b\u540e\u5c06\u5176\u79fb\u4ea4\u7ed9\u672a\u6765\u7684\u5408\u4f5c\u4f19\u4f34\u3002\nLISA\u9879\u76ee\u91c7\u53d6\u4e86\u66f4\u5177\u7406\u8bba\u6027\u7684\u65b9\u6cd5\uff0c\u4e13\u6ce8\u4e8e\u6539\u8fdb\u4eba\u5de5\u5149\u5408\u4f5c\u7528\u7684\u6bcf\u4e2a\u9636\u6bb5\u548c\u7ec4\u6210\u90e8\u5206\u3002\u6f5c\u5728\u7684\u50ac\u5316\u5242\u548c\u5de5\u827a\u5728\u8bd5\u7528\u4e4b\u524d\u7531\u8ba1\u7b97\u673a\u6a21\u62df\u3002\n\u9879\u76ee\u8d1f\u8d23\u4eba\u3001\u52a0\u5dde\u7406\u5de5\u5b66\u9662\u7684\u54c8\u91cc\u00b7\u963f\u7279\u6c83\u7279(Harry Atwwater)\u6559\u6388\u8868\u793a\uff1a\u6211\u4eec\u8fdb\u884c\u4e86\u79ef\u6781\u7684\u7406\u8bba\u52aa\u529b\uff0c\u7406\u8bba\u548c\u5b9e\u9a8c\u662f\u9f50\u5934\u5e76\u8fdb\u7684\u3002\u6211\u4eec\u73b0\u5728\u6709\u4e86\u5b9e\u9645\u4e0a\u662f\u4e16\u754c\u4e0a\u6700\u5927\u7684\u6570\u636e\u5e93\uff0c\u53e5\u53f7\u3002\n\u574f\u6d88\u606f\u662f\uff0c\u6211\u4eec\u4e0d\u592a\u53ef\u80fd\u5728\u77ed\u671f\u5185\u770b\u5230\u5145\u6ee1\u5149\u5408\u4f5c\u7528\u9762\u677f\u7684\u7530\u91ce\u3002\u6839\u636e\u9093\u666e\u897f\u6559\u6388\u7684\u8bf4\u6cd5\uff0c\u4ecd\u7136\u5b58\u5728\u4e3b\u8981\u7684\u7eca\u811a\u77f3\u3002\n\u5979\u8bf4\uff0c\u5728\u91c7\u5149\u3001\u5236\u9020\u71c3\u6599\u7684\u50ac\u5316\u4f5c\u7528\u548c\u7ba1\u7406\u7cfb\u7edf\u65b9\u9762\uff0c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e9b\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u79d1\u5b66\u3002\n\u4f46\u662f\uff0c\u5c06\u8fd9\u4e9b\u5355\u72ec\u7684\u7ec4\u4ef6\u96c6\u6210\u5230\u4e00\u4e2a\u80fd\u591f\u8fdb\u884c\u4eba\u5de5\u5149\u5408\u4f5c\u7528\u7684\u7cfb\u7edf\u4e2d\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6311\u6218\u3002\n\u8fd9\u4e5f\u5f88\u96be\u786e\u4fdd\u53cd\u5e94\u4ea7\u751f\u4e00\u79cd\u5546\u4e1a\u4e0a\u53ef\u884c\u7684\u71c3\u6599\uff0c\u8bb8\u591a\u80fd\u591f\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u50ac\u5316\u5242\u5bf9\u4e8e\u5927\u89c4\u6a21\u4f7f\u7528\u6765\u8bf4\u8fc7\u4e8e\u6602\u8d35\u6216\u6548\u7387\u592a\u4f4e\u3002\n\u6700\u540e\uff0c\u9093\u666e\u897f\u6559\u6388\u8868\u793a\uff0c\u8010\u4e45\u6027\u662f\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u4f60\u5728\u5904\u7406\u6301\u7eed\u4e0d\u65ad\u7684\u8f90\u5c04(\u9633\u5149)\u65f6\uff0c\u8fd9\u79cd\u8f90\u5c04\u53ef\u80fd\u4f1a\u5f15\u8d77\u6781\u5177\u7834\u574f\u6027\u548c\u8150\u8680\u6027\u7684\u53cd\u5e94\u3002\n\u56e0\u6b64\uff0c\u4eba\u5de5\u5149\u5408\u4f5c\u7528\u4ecd\u7136\u4e0d\u80fd\u4ee5\u8db3\u591f\u4f4e\u7684\u6210\u672c\u751f\u4ea7\u6db2\u4f53\u71c3\u6599\uff0c\u65e0\u6cd5\u4e0e\u5316\u77f3\u71c3\u6599\u7ade\u4e89\u3002\n\u6cb9\u4ef7\u4f1a\u53d8\uff0c\u7a0e\u6536\u4e5f\u4f1a\u53d8\u3002\u5f53\u60c5\u51b5\u5f00\u59cb\u8f6c\u53d8\u65f6\uff0c\u5728\u672a\u6765\u7684\u67d0\u4e2a\u65f6\u5019\uff0c\u4eba\u5de5\u5149\u5408\u4f5c\u7528\u7684\u4ef7\u683c\u5c06\u4f1a\u4e0b\u964d\uff0c\u800c\u5316\u77f3\u71c3\u6599\u7684\u4ef7\u683c\u5c06\u4f1a\u4e0a\u5347\u3002\u95ee\u9898\u662f\u8fd9\u4e9b\u7ebf\u4ec0\u4e48\u65f6\u5019\u76f8\u4ea4\u3002\n\u5982\u679c\u4f60\u56de\u523010\u5e74\u524d\uff0c\u5373\u4f7f\u662f\u5bf9\u5149\u4f0f\u53d1\u7535\u6210\u672c\u6700\u4e50\u89c2\u7684\u9884\u6d4b\u4e5f\u4e0e\u5b9e\u9645\u60c5\u51b5\u4e0d\u7b26\u3002\u6210\u672c\u4e0b\u964d\u4e8685%\uff0c\u8fd9\u662f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u3002\u4e00\u65e6\u51fa\u73b0\u89c4\u6a21\u7ecf\u6d4e\uff0c\u5f88\u591a\u4e8b\u60c5\u90fd\u662f\u53ef\u80fd\u7684\u3002\u6240\u4ee5\u6211\u975e\u5e38\u4e50\u89c2\u3002", "note_en": "The sun produces more than enough energy for human activities, but we still can&#39;t capture enough of it, points out Erwin Reisner, energy and sustainability professor at Cambridge University.\n  While solar panels have made big advances in recent years, becoming cheaper and more efficient, they just provide electricity, not storable liquid fuels, which are still in great demand.\n &#34;If you look at the global energy portfolio and what&#39;s needed, electricity only covers maybe 20-25%. So the question is when we have covered that 25%, what do we do next?&#34; asks Prof Reisner.\n His answer is to look to nature: &#34;Plants are a huge inspiration, because they have learned over millions of years how to take up sunlight and store the energy in energy carriers.\n &#34;I really believe that artificial photosynthesis will be one part of that energy portfolio over the next two decades.&#34;\n When plants photosynthesise, they take up water and carbon dioxide, and use light from the sun to convert these raw materials into the carbohydrates they need for growth.\n  &#34;We want to replicate this, but we don&#39;t really want to make carbohydrates because they make a lousy fuel, so instead of making carbohydrates we try to make something that can be more readily used,&#34; says Prof Reisner.\n An added problem is that plants aren&#39;t actually terribly good at photosynthesis, converting only around one or two per cent of solar energy into fuel. The US Department of Energy has concluded that for artificial photosynthesis to be viable economically, efficiency needs to rise to between five and 10%.\n Prof Reisner&#39;s team has worked on a number of approaches, including a system that mimics natural photosynthesis, using enzymes to split water and create hydrogen for fuel.\n      Perhaps more promising in the long term is his team&#39;s recent development of a small device that converts sunlight, carbon dioxide and water into oxygen and formic acid, a liquid fuel that has a high energy density.\n The device contains a panel which sits in a bath of water and carbon dioxide. Under sunlight the panel releases electrons which combine with the carbon dioxide and the protons in the water to make formic acid.\n &#34;These systems are like panels or sheets. It&#39;s a very thin device - you can almost think of it as like a sheet of paper,&#34; says Prof Reisner.\n Perhaps the biggest step forward with the device is the fact that it is standalone. It doesn&#39;t require an external power source, nor any top-ups of additional catalysts.\n  Despite the challenges artificial photosynthesis is attracting heavyweight investment. In the US, the Department of Energy recently announced funding of $100m (\u00a376m) over five years.\n The money is going to two separate projects: the Center for Hybrid Approaches in Solar Energy to Liquid Fuels (Chase) and the Liquid Sunlight Alliance (Lisa).\n Chase, led by the University of North Carolina at Chapel Hill (UNC), is working on practical applications similar to the Cambridge device by developing systems that, like solar panels, use semiconductors to absorb light, and then use various different catalysts to convert the carbon dioxide to fuel.\n A particular focus of research, says Chase deputy director Prof Jillian Dempsey, is the concept of cascade catalysts. Turning carbon dioxide into a usable fuel involves making more than one chemical transformation - and catalysts can handle only one at a time.\n &#34;The first one does the first step, and then passes its product off to the next catalyst,&#34; she says. &#34;Each one would be operating a very highly selective process, and handing off after that individual step to the partner down the road.&#34;\n  The Lisa project is taking a more theoretical approach, focused on improving every stage and component of artificial photosynthesis. Potential catalysts and processes are modelled by computer before they&#39;re tried out.\n &#34;We have a vigorous theory effort, and the theory and the experiment go hand in hand,&#34; says project leader, Prof Harry Atwater of Caltech. &#34;We now have what&#39;s actually the world&#39;s largest database, full stop.&#34;\n The bad news is that we&#39;re not likely to see fields full of photosynthesis panels any time soon. According to Prof Dempsey, there are still major stumbling blocks.\n  &#34;There&#39;s been some incredible science in terms of light harvesting, in terms of the catalysis that makes the fuel and in terms of managing systems,&#34; she says.\n &#34;But the integration of these individual components into a system capable of artificial photosynthesis is a huge challenge.&#34;\n It&#39;s also difficult to ensure that the reactions produce a commercially-viable fuel, with many of the catalysts that can achieve this being too expensive or too inefficient for large-scale use.\n Finally, says Prof Dempsey, durability is a problem: &#34;When you&#39;re dealing with constant radiation [sunlight] that can cause a reaction that can be highly detrimental and corrosive.&#34;\n As a result, artificial photosynthesis still can&#39;t produce liquid fuel cheaply enough to compete with fossil fuels.\n  &#34;The oil price can change, taxation can change. And when things start shifting, at some point in the future the price of artificial photosynthesis will go down and the price of fossil fuels will go up. The question is just when these lines cross.\n &#34;If you go back 10 years, even the most optimistic predictions for the cost of photovoltaic-derived electricity did not match what happened. The cost came down by 85%, which is incredible. Once economy of scale comes in, a lot is possible. So I&#39;m very optimistic.&#34;", "posttime": "2020-10-13 20:03:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u9020,fuel,\u6559\u6388", "title": "\u7528\u4eba\u9020\u6811\u53f6\u4ece\u7a00\u8584\u7684\u7a7a\u6c14\u4e2d\u5236\u9020\u71c3\u6599", "title_en": "Creating fuel from thin air with artificial leaves", "transed": 1, "url": "https://www.bbc.com/news/business-54390932", "via": "", "real_tags": ["\u4eba\u9020", "fuel", "\u6559\u6388"]}, {"category": "", "categoryclass": "", "imagename": "95f4b8ae90244a1c5559f43a3e0e46fa.jpg", "infoid": 1028418, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u9762\u662fKubernetes\u5de5\u5177\u548c\u8d44\u6e90\u7684\u5927\u91cf\u7cbe\u9009\u5217\u8868\u3002\u8fd9\u662f\u4e00\u4e2a\u201c\u6d3b\u8dc3\u201d\u7684\u5e16\u5b50\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u8bc6\u522b\u51fa\u65b0\u7684\u5de5\u5177\u65f6\uff0c\u6211\u4f1a\u6dfb\u52a0\u5230\u8fd9\u4e2a\u5e16\u5b50\u4e2d\uff0c\u5e76\u5728\u8fd9\u91cc\u63d0\u4f9b\u66f4\u65b0\u3002\nK9S-K9S\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ec8\u7aefUI\u6765\u4e0e\u60a8\u7684Kubernetes\u96c6\u7fa4\u4ea4\u4e92\u3002[\u5f3a\u70c8\u63a8\u8350]\u3002\nKubediff-Kubediff\u662fKubernetes\u7684\u4e00\u4e2a\u5de5\u5177\uff0c\u7528\u4e8e\u5411\u60a8\u663e\u793a\u8fd0\u884c\u914d\u7f6e\u548c\u7248\u672c\u63a7\u5236\u914d\u7f6e\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\nHelm-Helm\u662f\u4e00\u4e2a\u7ba1\u7406\u56fe\u8868\u7684\u5de5\u5177\u3002\u56fe\u8868\u662f\u9884\u5148\u914d\u7f6e\u7684Kubernetes\u8d44\u6e90\u5305\u3002\nKubePrompt-\u9694\u79bb\u6bcf\u4e2ashell\u4e2d\u7684KUBECONFIG\uff0c\u5e76\u5728\u63d0\u793a\u7b26\u4e2d\u663e\u793a\u5f53\u524d\u7684Kubernetes\u4e0a\u4e0b\u6587/\u540d\u79f0\u7a7a\u95f4\u3002\nKubectx+kubens-Kubectx\u5e2e\u52a9\u60a8\u5728\u96c6\u7fa4\u4e4b\u95f4\u6765\u56de\u5207\u6362\uff0ckubens\u5e2e\u52a9\u60a8\u5728Kubernetes\u547d\u540d\u7a7a\u95f4\u4e4b\u95f4\u5e73\u6ed1\u5207\u6362\u3002\nKTunes-KTunes\u662f\u4e00\u4e2aCLI\u5de5\u5177\uff0c\u7528\u4e8e\u5728Kubernetes\u96c6\u7fa4\u548c\u60a8\u7684\u672c\u5730\u8ba1\u7b97\u673a\u4e4b\u95f4\u5efa\u7acb\u53cd\u5411\u96a7\u9053\u3002\nKubectl-aliases-\u8fd9\u4e2a\u5b58\u50a8\u5e93\u5305\u542b\u4e00\u4e2a\u811a\u672c\uff0c\u53ef\u4ee5\u4e3akubectl\u751f\u6210\u6570\u767e\u4e2a\u65b9\u4fbf\u7684shell\u522b\u540d\u3002\nKubetail-Bash\u811a\u672c\uff0c\u5141\u8bb8\u60a8\u5c06\u591a\u4e2aPod\u4e2d\u7684\u65e5\u5fd7\u805a\u5408(\u5c3e\u968f)\u5230\u4e00\u4e2a\u6d41\u4e2d\u3002\nStern-Stern\u5141\u8bb8\u60a8\u8ddf\u8e2aKubernetes\u4e0a\u7684\u591a\u4e2aPod\u548cPod\u5185\u7684\u591a\u4e2a\u5bb9\u5668\u3002\nKubectl tree-\u4e00\u4e2akubectl\u63d2\u4ef6\uff0c\u7528\u4e8e\u901a\u8fc7\u6240\u6709\u8005\u63a2\u7d22Kubernetes\u5bf9\u8c61\u4e4b\u95f4\u7684\u6240\u6709\u6743\u5173\u7cfb\u3002\nNova-Nova\u626b\u63cf\u60a8\u7684\u96c6\u7fa4\u4ee5\u67e5\u627e\u5df2\u5b89\u88c5\u7684Helm\u56fe\u8868\uff0c\u7136\u540e\u5bf9\u7167\u6240\u6709\u5df2\u77e5\u7684Helm\u5b58\u50a8\u5e93\u5bf9\u5b83\u4eec\u8fdb\u884c\u4ea4\u53c9\u68c0\u67e5\u3002\nKind-Kind\u662f\u4e00\u4e2a\u4f7f\u7528Docker\u5bb9\u5668\u201c\u8282\u70b9\u201d\u8fd0\u884c\u672c\u5730Kubernetes\u96c6\u7fa4\u7684\u5de5\u5177\u3002\nK3S-\u8f7b\u91cf\u7ea7\u5e93\u4f2f\u5185\u65af\u3002\u5b89\u88c5\u65b9\u4fbf\uff0c\u5185\u5b58\u53ea\u6709\u4e00\u534a\uff0c\u90fd\u662f\u4e8c\u8fdb\u5236\u7684\uff0c\u4e0d\u5230100MB\u3002\nEksctl-eksctl\u662f\u4e00\u4e2a\u7b80\u5355\u7684CLI\u5de5\u5177\uff0c\u7528\u4e8e\u5728EKS-Amazon\u9488\u5bf9EC2\u7684\u65b0\u7684\u6258\u7ba1Kubernetes\u670d\u52a1-\u4e0a\u521b\u5efa\u96c6\u7fa4\u3002\nKops-Kops\u53ef\u5e2e\u52a9\u60a8\u4ece\u547d\u4ee4\u884c\u521b\u5efa\u3001\u9500\u6bc1\u3001\u5347\u7ea7\u548c\u7ef4\u62a4\u751f\u4ea7\u7ea7\u3001\u9ad8\u53ef\u7528\u6027\u7684Kubernetes\u96c6\u7fa4\u3002\nKubeadm-kubeadm\u6267\u884c\u542f\u52a8\u5e76\u8fd0\u884c\u6700\u5c0f\u53ef\u884c\u7fa4\u96c6\u6240\u9700\u7684\u64cd\u4f5c\u3002\nConjure-up-\u7531Canonical\u63d0\u4f9b\u7684\u4e00\u4e2a\u5de5\u5177\uff0c\u5141\u8bb8\u60a8\u5c06Kubernetes\u90e8\u7f72\u5230Ubuntu\u3002\nFlux-Flux\u662f\u4e00\u4e2a\u81ea\u52a8\u786e\u4fdd\u96c6\u7fa4\u72b6\u6001\u4e0egit\u4e2d\u7684\u914d\u7f6e\u76f8\u5339\u914d\u7684\u5de5\u5177\u3002\nArgo\u5377\u5c55\u53f0-Argo\u5377\u5c55\u53f0\u63a7\u5236\u5668\uff0c\u4f7f\u7528\u5377\u5c55\u53f0\u81ea\u5b9a\u4e49\u8d44\u6e90\u4e3aKubernetes\u63d0\u4f9b\u989d\u5916\u7684\u90e8\u7f72\u7b56\u7565\uff0c\u5982\u84dd\u7eff\u548c\u91d1\u4e1d\u96c0\u3002\nHelm\u64cd\u4f5c\u7b26-Helm\u64cd\u4f5c\u7b26\u662fKubernetes\u64cd\u4f5c\u7b26\uff0c\u5141\u8bb8\u4ee5\u58f0\u660e\u65b9\u5f0f\u7ba1\u7406Helm\u56fe\u8868\u53d1\u5e03\u3002\nFlagger-Flagger\u662f\u4e00\u79cd\u6e10\u8fdb\u5f0f\u4ea4\u4ed8\u5de5\u5177\uff0c\u53ef\u4ee5\u81ea\u52a8\u5316Kubernetes\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u53d1\u5e03\u8fc7\u7a0b\u3002\nArgo\u5de5\u4f5c\u6d41-Argo\u5de5\u4f5c\u6d41\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5bb9\u5668\u539f\u751f\u5de5\u4f5c\u6d41\u5f15\u64ce\uff0c\u7528\u4e8e\u5728Kubernetes\u4e0a\u7f16\u6392\u5e76\u884c\u4f5c\u4e1a\u3002\nKEDA-KEDA\u5141\u8bb8\u5bf9\u4e8b\u4ef6\u9a71\u52a8\u7684Kubernetes\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u7ec6\u7c92\u5ea6\u7684\u81ea\u52a8\u7f29\u653e(\u5305\u62ec\u4ece\u96f6\u5230\u96f6\u6216\u4ece\u96f6\u5f00\u59cb)\u3002\nKubeSphere-KubeSphere\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u63d0\u4f9b\u4ee5Kubernetes\u4e3a\u5185\u6838\u7684\u4e91\u539f\u751f\u5806\u6808\uff0c\u65e8\u5728\u6210\u4e3a\u7b2c\u4e09\u65b9\u5e94\u7528\u65e0\u7f1d\u96c6\u6210\u7684\u5373\u63d2\u5373\u7528\u67b6\u6784\uff0c\u4ee5\u63d0\u5347\u5176\u751f\u6001\u7cfb\u7edf\u3002\nSkaffold-Skaffold\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u53ef\u4fc3\u8fdbKubernetes\u5e94\u7528\u7a0b\u5e8f\u7684\u6301\u7eed\u5f00\u53d1\u3002\nApollo-Apollo\u662f\u57fa\u4e8eKubernetes\u7684\u7b80\u5355\u3001\u8f7b\u91cf\u7ea7\u3001\u6301\u7eed\u90e8\u7f72(CD)\u89e3\u51b3\u65b9\u6848\u3002\nSpinnaker-Spinnaker\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6301\u7eed\u4ea4\u4ed8\u5e73\u53f0\uff0c\u7528\u4e8e\u9ad8\u901f\u3001\u53ef\u9760\u5730\u53d1\u5e03\u8f6f\u4ef6\u53d8\u66f4\u3002\nArgo Events-Argo Events\u662f\u4e00\u4e2a\u9488\u5bf9Kubernetes\u7684\u4e8b\u4ef6\u9a71\u52a8\u7684\u5de5\u4f5c\u6d41\u81ea\u52a8\u5316\u6846\u67b6\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u89e6\u53d1K8s\u5bf9\u8c61\u3001Argo\u5de5\u4f5c\u6d41\u3001\u65e0\u670d\u52a1\u5668\u5de5\u4f5c\u8d1f\u8f7d\u7b49\u3002\n\u91cd\u65b0\u52a0\u8f7d\u5668-\u91cd\u65b0\u52a0\u8f7d\u5668\u53ef\u4ee5\u67e5\u770bConfigMap\u548cSecret\u4e2d\u7684\u66f4\u6539\uff0c\u5e76\u5728Pod\u53ca\u5176\u5173\u8054\u7684DeploymentConfigs\u3001Deployment\u3001Daemonset\u548cStatefulsets\u4e0a\u8fdb\u884c\u6eda\u52a8\u5347\u7ea7\u3002\nKruise-Kruise\u7531\u591a\u4e2a\u63a7\u5236\u5668\u7ec4\u6210\uff0c\u8fd9\u4e9b\u63a7\u5236\u5668\u6269\u5c55\u548c\u8865\u5145\u4e86Kubernetes\u6838\u5fc3\u63a7\u5236\u5668\uff0c\u7528\u4e8e\u5de5\u4f5c\u8d1f\u8f7d\u7ba1\u7406\u3002\nGrafana Tanka-\u4e3a\u60a8\u7684Kubernetes\u96c6\u7fa4\u63d0\u4f9b\u5e72\u51c0\u3001\u7b80\u6d01\u548c\u8d85\u7ea7\u7075\u6d3b\u7684YAML\u66ff\u4ee3\u65b9\u6848\u3002\nKubeDirector-KubeDirector\u4f7f\u7528\u6807\u51c6\u7684Kubernetes(K8)\u81ea\u5b9a\u4e49\u8d44\u6e90\u548cAPI\u6269\u5c55\u529f\u80fd\u6765\u5b9e\u73b0\u6709\u72b6\u6001\u7684\u6a2a\u5411\u6269\u5c55\u5e94\u7528\u96c6\u7fa4\u3002\n\u5206\u5c42\u547d\u540d\u7a7a\u95f4\u63a7\u5236\u5668-\u901a\u8fc7\u4f7f\u547d\u540d\u7a7a\u95f4\u66f4\u52a0\u5f3a\u5927\uff0c\u5206\u5c42\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u5171\u4eab\u60a8\u7684\u96c6\u7fa4\u3002\nKubernetes External Secrets-Kubernetes External Secrets\u5141\u8bb8\u60a8\u4f7f\u7528\u5916\u90e8\u79d8\u5bc6\u7ba1\u7406\u7cfb\u7edf(\u5982AWS Secrets Manager\u6216HashiCorp Vault)\u5728Kubernetes\u4e2d\u5b89\u5168\u5730\u6dfb\u52a0\u79d8\u5bc6\u3002\nSeal Secrets-\u5c06\u60a8\u7684Secret\u52a0\u5bc6\u4e3aSealedSecret\uff0c\u5373\u4f7f\u5b58\u50a8\u5230\u516c\u5171\u5b58\u50a8\u5e93\u4e5f\u662f\u5b89\u5168\u7684\u3002\nIngress-nginx-inress-nginx\u662fKubernetes\u7684\u5165\u53e3\u63a7\u5236\u5668\uff0c\u4f7f\u7528nginx\u4f5c\u4e3a\u53cd\u5411\u4ee3\u7406\u548c\u8d1f\u8f7d\u5747\u8861\u5668\u3002\nCalico Networking-Calico\u662f\u9002\u7528\u4e8e\u5bb9\u5668\u3001\u865a\u62df\u673a\u548c\u88f8\u673a\u5de5\u4f5c\u8d1f\u8f7d\u7684\u5f00\u6e90\u7f51\u7edc\u548c\u7f51\u7edc\u5b89\u5168\u89e3\u51b3\u65b9\u6848\u3002\n\u5728\u9999\u6e2f\u4e3aKubernetes\u670d\u52a1\u914d\u7f6e\u63d2\u4ef6\u3001\u5065\u5eb7\u68c0\u67e5\u3001\u8d1f\u8f7d\u5e73\u8861\u7b49\u3002\nCert-manager-cert-manager\u662fKubernetes\u63d2\u4ef6\uff0c\u7528\u4e8e\u81ea\u52a8\u7ba1\u7406\u548c\u53d1\u5e03\u6765\u81ea\u5404\u79cd\u53d1\u884c\u6e90\u7684TLS\u8bc1\u4e66\u3002\nKsniff-\u4e00\u4e2akubectl\u63d2\u4ef6\uff0c\u5b83\u5229\u7528tcpdump\u548cWireshark\u5728Kubernetes\u96c6\u7fa4\u4e2d\u7684\u4efb\u4f55Pod\u4e0a\u542f\u52a8\u8fdc\u7a0b\u6355\u83b7\u3002\nKubectl trace-kubectl trace\u662f\u4e00\u4e2akubectl\u63d2\u4ef6\uff0c\u5141\u8bb8\u60a8\u5728Kubernetes\u96c6\u7fa4\u4e2d\u8c03\u5ea6bpftrace\u7a0b\u5e8f\u7684\u6267\u884c\u3002\nOpenEBS-OpenEBS\u662fKubernetes\u90e8\u7f72\u6700\u5e7f\u6cdb\u3001\u4f7f\u7528\u6700\u7b80\u5355\u7684\u5f00\u6e90\u5b58\u50a8\u89e3\u51b3\u65b9\u6848\u3002\nAmazon EBS CSI\u9a71\u52a8\u7a0b\u5e8f-Amazon Elastic Block Store Container Storage Interface(CSI)\u9a71\u52a8\u7a0b\u5e8f\u63d0\u4f9bContainer Orchestrator\u7528\u6765\u7ba1\u7406Amazon EBS\u5377\u751f\u547d\u5468\u671f\u7684CSI\u63a5\u53e3\u3002\nAmazon EFS CSI\u9a71\u52a8\u7a0b\u5e8f-Amazon Elastic File System Container Storage Interface(CSI)\u9a71\u52a8\u7a0b\u5e8f\u4e3a\u5bb9\u5668\u534f\u8c03\u5668\u5b9e\u65bdCSI\u89c4\u8303\uff0c\u4ee5\u7ba1\u7406Amazon EFS\u6587\u4ef6\u7cfb\u7edf\u7684\u751f\u547d\u5468\u671f\u3002\nAmazon FSX for Lustre CSI\u9a71\u52a8\u7a0b\u5e8f-Amazon FSX for Lustre Container Storage Interface(CSI)\u9a71\u52a8\u7a0b\u5e8f\u4e3a\u5bb9\u5668\u534f\u8c03\u5668(CO)\u5b9e\u65bdCSI\u89c4\u8303\uff0c\u4ee5\u7ba1\u7406Amazon FSX for Lustre\u6587\u4ef6\u7cfb\u7edf\u7684\u751f\u547d\u5468\u671f\u3002\nKube-Money-\u5b83\u968f\u673a\u5220\u9664\u96c6\u7fa4\u4e2d\u7684Kubernetes(K8)\u5b9e\u4f8b\uff0c\u9f13\u52b1\u548c\u9a8c\u8bc1\u6545\u969c\u5f39\u6027\u670d\u52a1\u7684\u5f00\u53d1\u3002\nKubetest-Kubetest\u662f\u4e00\u4e2a\u6700\u706b\u7206\u7684\u63d2\u4ef6\uff0c\u5b83\u4f7f\u5f97\u5728\u96c6\u6210\u6d4b\u8bd5\u4e2d\u7ba1\u7406Kubernetes\u96c6\u7fa4\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\nLitmus-Litmus\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\u6765\u534f\u8c03Kubernetes\u4e0a\u7684\u6df7\u4e71\uff0c\u4ee5\u5e2e\u52a9SRE\u53d1\u73b0\u5176\u90e8\u7f72\u4e2d\u7684\u5f31\u70b9\u3002\nPowerfulSeal-PowerfulSeal\u5c06\u6545\u969c\u6ce8\u5165\u5230\u60a8\u7684Kubernetes\u96c6\u7fa4\u4e2d\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u53ca\u65e9\u53d1\u73b0\u95ee\u9898\u3002\u5b83\u548c\u5e93\u6bd4\u7334\u975e\u5e38\u76f8\u4f3c\u3002\nKubectl-debug-kubectl-debug\u8fd9\u662f\u4e00\u4e2a\u6811\u5916\u89e3\u51b3\u65b9\u6848\uff0c\u7528\u4e8e\u6392\u9664\u6b63\u5728\u8fd0\u884c\u7684\u5b9e\u4f8b\u7684\u6545\u969c\uff0c\u5141\u8bb8\u60a8\u5728\u8fd0\u884c\u5b9e\u4f8b\u4e2d\u8fd0\u884c\u65b0\u7684\u5bb9\u5668\u4ee5\u8fdb\u884c\u8c03\u8bd5\u3002\nKsniff-\u4e00\u4e2akubectl\u63d2\u4ef6\uff0c\u5b83\u5229\u7528tcpdump\u548cWireshark\u5728Kubernetes\u96c6\u7fa4\u4e2d\u7684\u4efb\u4f55Pod\u4e0a\u542f\u52a8\u8fdc\u7a0b\u6355\u83b7\u3002\nK6-K6\u662f\u4e00\u6b3e\u73b0\u4ee3\u5316\u7684\u8d1f\u8f7d\u6d4b\u8bd5\u5de5\u5177\uff0c\u57fa\u4e8eLoad Impact\u5728\u8d1f\u8f7d\u548c\u6027\u80fd\u6d4b\u8bd5\u884c\u4e1a\u591a\u5e74\u7684\u7ecf\u9a8c\u3002\nChaos Mesh-Chaos Mesh\u00ae\u662f\u4e91\u4e0a\u539f\u751f\u7684\u6df7\u6c8c\u5de5\u7a0b\u5e73\u53f0\uff0c\u7528\u4e8e\u534f\u8c03Kubernetes\u73af\u5883\u4e2d\u7684\u6df7\u6c8c\u3002\nPopye-Popye\u662f\u4e00\u4e2a\u5b9e\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u626b\u63cf\u5b9e\u65f6Kubernetes\u96c6\u7fa4\uff0c\u5e76\u62a5\u544a\u90e8\u7f72\u7684\u8d44\u6e90\u548c\u914d\u7f6e\u7684\u6f5c\u5728\u95ee\u9898\u3002\nKube-Score-Kube-Score\u662f\u4e00\u4e2a\u5bf9Kubernetes\u5bf9\u8c61\u5b9a\u4e49\u6267\u884c\u9759\u6001\u4ee3\u7801\u5206\u6790\u7684\u5de5\u5177\u3002\nKubeInvaders-\u901a\u8fc7KubeInvaders\uff0c\u60a8\u53ef\u4ee5\u4ee5\u4e00\u79cd\u6709\u8da3\u7684\u65b9\u5f0f\u5f3a\u8c03Kubernetes\u96c6\u7fa4\uff0c\u5e76\u68c0\u67e5\u5b83\u7684\u5f39\u6027\u3002\n\u666e\u7f57\u7c73\u4fee\u65af-\u666e\u7f57\u7c73\u4fee\u65af(Prometheus-Prometheus)\u662f\u4e91\u539f\u751f\u8ba1\u7b97\u57fa\u91d1\u4f1a\u9879\u76ee\uff0c\u662f\u4e00\u4e2a\u7cfb\u7edf\u548c\u670d\u52a1\u76d1\u63a7\u7cfb\u7edf\u3002\nGrafana-Grafana\u5141\u8bb8\u60a8\u67e5\u8be2\u3001\u53ef\u89c6\u5316\u3001\u63d0\u9192\u548c\u4e86\u89e3\u60a8\u7684\u6307\u6807\uff0c\u65e0\u8bba\u5b83\u4eec\u5b58\u50a8\u5728\u54ea\u91cc\u3002\nKube-state-metrics-kube-state-metrics\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u670d\u52a1\uff0c\u5b83\u4fa6\u542cKubernetes API\u670d\u52a1\u5668\u5e76\u751f\u6210\u6709\u5173\u5bf9\u8c61\u72b6\u6001\u7684\u6307\u6807\u3002\nKubernetes Metrics Server-Metrics Server\u662fKubernetes\u5185\u7f6e\u81ea\u52a8\u7f29\u653e\u7ba1\u9053\u7684\u53ef\u4f38\u7f29\u3001\u9ad8\u6548\u7684\u5bb9\u5668\u8d44\u6e90\u6307\u6807\u6765\u6e90\u3002\nKubernetes Operational View-\u4e00\u4e2a\u65e8\u5728\u4e3a\u591a\u4e2aKubernetes\u96c6\u7fa4\u63d0\u4f9b\u516c\u5171\u64cd\u4f5c\u753b\u9762\u7684\u5de5\u5177\u3002\nThanos-Thanos\u662f\u4e00\u7ec4\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u7ec4\u5408\u6210\u5177\u6709\u65e0\u9650\u5b58\u50a8\u5bb9\u91cf\u7684\u9ad8\u5ea6\u53ef\u7528\u7684\u516c\u5236\u7cfb\u7edf\u3002\n\u91d1\u53d1\u5973\u5b69--\u8fd9\u4e2a\u5de5\u5177\u4e3a\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u90e8\u7f72\u521b\u5efa\u4e00\u4e2a\u5782\u76f4\u7684Pod\u81ea\u52a8\u7f29\u653e\u5668\uff0c\u7136\u540e\u5411\u5b83\u4eec\u67e5\u8be2\u4fe1\u606f\u3002\nSearchlight-Searchlight/Icinga\u5b9a\u671f\u5bf9Kubernetes\u7fa4\u96c6\u8fd0\u884c\u5404\u79cd\u68c0\u67e5\uff0c\u5e76\u5728\u68c0\u6d4b\u5230\u95ee\u9898\u65f6\u53d1\u9001\u901a\u77e5\u3002\nPopye-Popye\u662f\u4e00\u4e2a\u5b9e\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u626b\u63cf\u5b9e\u65f6Kubernetes\u96c6\u7fa4\uff0c\u5e76\u62a5\u544a\u90e8\u7f72\u7684\u8d44\u6e90\u548c\u914d\u7f6e\u7684\u6f5c\u5728\u95ee\u9898\u3002\nKubewatch-KubeWatch\u662f\u4e00\u4e2aKubernetes\u89c2\u5bdf\u8005\uff0c\u76ee\u524d\u5411\u53ef\u7528\u7684\u534f\u4f5c\u4e2d\u5fc3/\u901a\u77e5\u6e20\u9053\u53d1\u5e03\u901a\u77e5\u3002\nSloop-Sloop\u76d1\u63a7Kubernetes\uff0c\u8bb0\u5f55\u4e8b\u4ef6\u548c\u8d44\u6e90\u72b6\u6001\u66f4\u6539\u7684\u5386\u53f2\uff0c\u5e76\u63d0\u4f9b\u53ef\u89c6\u5316\u4ee5\u5e2e\u52a9\u8c03\u8bd5\u8fc7\u53bb\u7684\u4e8b\u4ef6\u3002\nBotKube-BotKube\u4e0eSlake\u6216Matterest\u7684\u96c6\u6210\u53ef\u4ee5\u5e2e\u52a9\u60a8\u76d1\u63a7Kubernetes\u96c6\u7fa4\uff0c\u8c03\u8bd5\u5173\u952e\u90e8\u7f72\uff0c\u5e76\u901a\u8fc7\u68c0\u67e5Kubernetes\u8d44\u6e90\u7ed9\u51fa\u6807\u51c6\u5b9e\u8df5\u5efa\u8bae\u3002\nKube-Capacity-\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684CLI\uff0c\u5b83\u6982\u8ff0\u4e86Kubernetes\u96c6\u7fa4\u4e2d\u7684\u8d44\u6e90\u8bf7\u6c42\u3001\u9650\u5236\u548c\u5229\u7528\u7387\u3002\n\u955c\u5934-\u955c\u5934\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u3001\u5438\u5f15\u4eba\u7684\u3001\u5f00\u6e90\u7684\u7528\u6237\u754c\u9762(UI)\uff0c\u7528\u4e8e\u5904\u7406Kubernetes\u96c6\u7fa4\u3002\n\u624e\u6bd4\u514b\u65af\u6216\u7eb3\u5409\u5965\u65af\u68c0\u67e5\u5e93\u4f2f\u5185\u65af-\u6839\u636e\u4ed6\u4eec\u7684\u63cf\u8ff0\u2026\u3002Nagios\u98ce\u683c\u7684\u5bf9Kubernetes API\u7684\u68c0\u67e5\u3002\u4e13\u4e3a\u4e0eNagios\u3001Icinga\u548cZabbix\u914d\u5408\u4f7f\u7528\u800c\u8bbe\u8ba1\u3002\nWeave Scope-\u662fDocker\u548cKubernetes\u96c6\u7fa4\u7684\u6545\u969c\u6392\u9664\u548c\u76d1\u63a7\u5de5\u5177\u3002\u5b83\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u5e94\u7528\u7a0b\u5e8f\u548c\u57fa\u7840\u67b6\u6784\u62d3\u6251\uff0c\u5e2e\u52a9\u60a8\u8f7b\u677e\u8bc6\u522b\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u74f6\u9888\u3002\nDynatrace OneAgent-\u4e00\u4e2a\u5bb9\u5668\u611f\u77e5\u4ee3\u7406\uff0c\u53ef\u4ee5\u53d1\u73b0\u548c\u76d1\u63a7Kubernetes\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u4e00\u76f4\u5230\u57fa\u7840\u8bbe\u65bd\u7ea7\u522b\u3002\nKatafygio-katafygio\u53d1\u73b0Kubernetes\u5bf9\u8c61(\u90e8\u7f72\u3001\u670d\u52a1\u3001\u2026)\u3002\uff0c\u5e76\u5c06\u5176\u6301\u7eed\u4fdd\u5b58\u4e3aGIT\u5b58\u50a8\u5e93\u4e2d\u7684YAML\u6587\u4ef6\u3002\nVelero-Velero(\u4ee5\u524d\u79f0\u4e3aHeptio Ark)\u4e3a\u60a8\u63d0\u4f9b\u4e86\u5907\u4efd\u548c\u6062\u590dKubernetes\u96c6\u7fa4\u8d44\u6e90\u548c\u6301\u4e45\u5377\u7684\u5de5\u5177\u3002\nKube-bench-kube-bench\u662f\u4e00\u4e2aGO\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u901a\u8fc7\u8fd0\u884cCIS Kubernetes\u57fa\u51c6\u4e2d\u8bb0\u5f55\u7684\u68c0\u67e5\u6765\u68c0\u67e5Kubernetes\u662f\u5426\u88ab\u5b89\u5168\u5730\u90e8\u7f72\u3002\nKonstraint-Konstraint\u662f\u4e00\u79cdCLI\u5de5\u5177\uff0c\u7528\u4e8e\u5728\u4f7f\u7528GateKeeper\u65f6\u5e2e\u52a9\u521b\u5efa\u548c\u7ba1\u7406\u7ea6\u675f\u3002\nKUBE-SCAN-KUBE-SCAN\u4e3a\u6bcf\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u63d0\u4f9b\u4ece0(\u65e0\u98ce\u9669)\u523010(\u9ad8\u98ce\u9669)\u7684\u98ce\u9669\u5206\u6570\u3002\n\u6743\u9650\u7ba1\u7406\u5668-\u6743\u9650\u7ba1\u7406\u5668\u662f\u7531SIGHUP\u5f00\u53d1\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4e3aKubernetes\u63d0\u4f9b\u8d85\u7ea7\u7b80\u5355\u548c\u7528\u6237\u53cb\u597d\u7684RBAC\u7ba1\u7406\u3002\nK-ail-k-ail\u662fKubernetes\u7684\u5de5\u4f5c\u8d1f\u8f7d\u7b56\u7565\u5b9e\u65bd\u5de5\u5177\u3002\u5b83\u53ef\u4ee5\u5e2e\u52a9\u60a8\u4ee5\u6700\u5c0f\u7684\u4e2d\u65ad\u548c\u6700\u5927\u7684\u901f\u5ea6\u4fdd\u62a4\u591a\u79df\u6237\u7fa4\u96c6\u3002\nFalco-Falco\u662f\u4e00\u4e2a\u884c\u4e3a\u6d3b\u52a8\u76d1\u89c6\u5668\uff0c\u65e8\u5728\u68c0\u6d4b\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5f02\u5e38\u6d3b\u52a8\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528Falco\u6765\u76d1\u63a7Kubernetes\u5e94\u7528\u7a0b\u5e8f\u548c\u5185\u90e8\u7ec4\u4ef6\u7684\u8fd0\u884c\u65f6\u5b89\u5168\u6027\u3002\nKubespy-\u662f\u4e00\u4e2a\u5de5\u5177\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u5b9e\u65f6\u89c2\u5bdfKubernetes\u8d44\u6e90\u7684\u53d8\u5316\u3002\nTwistlock(\u88abPalo Alto\u6536\u8d2d\uff0c\u73b0\u5728\u88abPrisma Cloud\u6536\u8d2d)-\u662f\u4e00\u4e2a\u5168\u751f\u547d\u5468\u671f\u7684\u96c6\u88c5\u7bb1\u5b89\u5168\u89e3\u51b3\u65b9\u6848\u3002\u5b83\u6709\u4e00\u4e2aVMS\uff0c\u53ef\u4ee5\u626b\u63cf\u4efb\u4f55\u6613\u53d7\u653b\u51fb\u7684\u533a\u57df\u3002\u81ea\u4ece\u6536\u8d2dPalto Alto\u4ee5\u6765\uff0c\u8be5\u4ea7\u54c1\u5df2\u7ecf\u91cd\u65b0\u547d\u540d\u3002\nLinkerd-Linkerd\u662f\u4e00\u4e2a\u900f\u660e\u7684\u670d\u52a1\u7f51\uff0c\u65e8\u5728\u4f7f\u73b0\u4ee3\u5e94\u7528\u7a0b\u5e8f\u5b89\u5168\u53ef\u9760\u3002\nAWS App Mesh-AWS\u63d0\u4f9b\u7684\u4e00\u79cd\u670d\u52a1\u7f51\u72b6\u670d\u52a1\uff0c\u5728EKS\u548cFargate\u7b49AWS\u57fa\u7840\u8bbe\u65bd\u670d\u52a1\u4e0a\u8fd0\u884c\u3002\nOpen Service Mesh-Open Service Mesh(OSM)\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u3001\u53ef\u6269\u5c55\u7684\u4e91\u672c\u5730\u670d\u52a1\u7f51\u683c\uff0c\u5141\u8bb8\u7528\u6237\u4e3a\u9ad8\u5ea6\u52a8\u6001\u7684\u5fae\u670d\u52a1\u73af\u5883\u7edf\u4e00\u7ba1\u7406\u3001\u4fdd\u62a4\u548c\u83b7\u53d6\u5f00\u7bb1\u5373\u7528\u7684\u53ef\u89c2\u5bdf\u6027\u529f\u80fd\u3002\n\u8fd9\u4e2a\u9879\u76ee\u65e8\u5728\u4e3a\u672c\u5730\u6d4b\u8bd5\u3001\u5b9e\u9a8c\u548c\u5f00\u53d1\u76ee\u7684\u63d0\u4f9b\u5355\u4e00\u4f9d\u8d56Kubernetes\u96c6\u7fa4\u3002\nMakisu-Makisu\u662f\u4e00\u6b3e\u5feb\u901f\u7075\u6d3b\u7684Docker\u6620\u50cf\u6784\u5efa\u5de5\u5177\uff0c\u4e13\u4e3aMesos\u6216Kubernetes\u7b49\u975e\u7279\u6743\u96c6\u88c5\u7bb1\u5316\u73af\u5883\u800c\u8bbe\u8ba1\u3002\nTYE-TYE\u662f\u4e00\u4e2a\u5f00\u53d1\u4eba\u5458\u5de5\u5177\uff0c\u5b83\u4f7f\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u90e8\u7f72\u5fae\u670d\u52a1\u548c\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\nKubectl-warp-Kubernetes CLI\u63d2\u4ef6\uff0c\u7528\u4e8e\u5728Kubernetes\u4e0a\u7684Pod\u4e2d\u540c\u6b65\u548c\u6267\u884c\u672c\u5730\u6587\u4ef6\u3002\nKubeflow-Kubeflow\u662f\u4e00\u4e2a\u57fa\u4e8eGoogle\u5185\u90e8\u673a\u5668\u5b66\u4e60\u7ba1\u9053\u7684\u673a\u5668\u5b66\u4e60\u4e91\u539f\u751f\u5e73\u53f0\u3002\nStrimzi-Strimzi\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728Kubernetes\u6216OpenShift\u4e0a\u4ee5\u5404\u79cd\u90e8\u7f72\u914d\u7f6e\u8fd0\u884cApache Kafka\u96c6\u7fa4\u7684\u65b9\u6cd5\u3002\nCrossPlane-CrossPlane\u662f\u4e00\u4e2a\u5f00\u6e90\u7684Kubernetes\u9644\u52a0\u7ec4\u4ef6\uff0c\u5b83\u6269\u5c55\u4e86\u4efb\u4f55\u96c6\u7fa4\uff0c\u4f7f\u5176\u80fd\u591f\u8c03\u914d\u548c\u7ba1\u7406\u4e91\u57fa\u7840\u8bbe\u65bd\u3001\u670d\u52a1\u548c\u5e94\u7528\u7a0b\u5e8f\u3002\nKubeEdge-KubeEdge\u6784\u5efa\u4e8eKubernetes\u4e4b\u4e0a\uff0c\u5e76\u5c06\u672c\u673a\u5bb9\u5668\u5316\u5e94\u7528\u7a0b\u5e8f\u534f\u8c03\u548c\u8bbe\u5907\u7ba1\u7406\u6269\u5c55\u5230\u8fb9\u7f18\u4e3b\u673a\u3002\nKubeless-Kubeless\u662f\u4e00\u4e2aKubernetes\u539f\u751f\u65e0\u670d\u52a1\u5668\u6846\u67b6\uff0c\u5b83\u5141\u8bb8\u60a8\u90e8\u7f72\u5c11\u91cf\u4ee3\u7801\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u5e95\u5c42\u57fa\u7840\u8bbe\u65bd\u7ba1\u9053\u3002\nAgones-Agones\u662f\u4e00\u4e2a\u5728Kubernetes\u4e0a\u6258\u7ba1\u3001\u8fd0\u884c\u548c\u6269\u5c55\u4e13\u7528\u6e38\u620f\u670d\u52a1\u5668\u7684\u5e93\u3002\nKubecost-Kubecost\u6a21\u578b\u4e3a\u56e2\u961f\u63d0\u4f9b\u4e86\u5bf9\u5f53\u524d\u548c\u5386\u53f2Kubernetes\u82b1\u8d39\u548c\u8d44\u6e90\u5206\u914d\u7684\u53ef\u89c1\u6027\u3002\n\u6211\u9519\u8fc7\u4e86\u60a8\u5728Kubernetes\u96c6\u7fa4\u4e2d\u4f7f\u7528\u7684\u5de5\u5177\u6216\u8d44\u6e90\u5417\uff1f\u5728\u4e0b\u9762\u7684\u8bc4\u8bba\u533a\u8ba9\u6211\u77e5\u9053\uff01\u53e6\u5916\uff0c\u8ba9\u6211\u77e5\u9053\u4f60\u5bf9\u8fd9\u4efd\u6e05\u5355\u7684\u770b\u6cd5\uff0c\u4ee5\u53ca\u5b83\u662f\u5426\u5bf9\u4f60\u6709\u5e2e\u52a9\uff01\n\u4f60\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u8981\u6c42\u63d0\u4f9b\u6211\u662f\u5982\u4f55\u83b7\u5f97\u8fd9\u4efd\u540d\u5355\u7684\u6765\u6e90\u3002\u4ee5\u4e0b\u662f\u6211\u76ee\u524d\u80fd\u56de\u5fc6\u8d77\u7684\u4e00\u4e9b\u8d44\u6e90\uff0c\u5b83\u4eec\u5e2e\u52a9\u6211\u5b9e\u73b0\u4e86\u8fd9\u4efd\u6e05\u5355\u3002\u6ca1\u6709\u7279\u5b9a\u987a\u5e8f\u7684\u2026", "note_en": "Below is a large, curated list of Kubernetes tools and resources. This is an \u201cactive\u201d post which means as new tools are identified I will add to this and provide the update here.\n  K9s \u2013 K9s provides a terminal UI to interact with your Kubernetes clusters.  [Highly Recommend]\n kubediff \u2013 Kubediff is a tool for Kubernetes to show you the differences between your running configuration and your version controlled configuration.\n Helm \u2013 Helm is a tool for managing Charts. Charts are packages of pre-configured Kubernetes resources.\n kubeprompt \u2013 Isolates KUBECONFIG in each shell and shows the current Kubernetes context/namespace in your prompt\n kubectx + kubens \u2013 Kubectx helps you switch between clusters back and forth, and  kubens helps you switch between Kubernetes namespaces smoothly.\n  Ktunnel \u2013 Ktunnel is a CLI tool that establishes a reverse tunnel between a kubernetes cluster and your local machine.\n kubectl-aliases \u2013 This repository contains a script to generate hundreds of convenient shell aliases for kubectl.\n Kubetail \u2013 Bash script that enables you to aggregate (tail/follow) logs from multiple pods into one stream.\n stern \u2013 Stern allows you to tail multiple pods on Kubernetes and multiple containers within the pod.\n kubectl tree \u2013 A kubectl plugin to explore ownership relationships between Kubernetes objects through owners.\n nova \u2013 Nova scans your cluster for installed Helm charts, then cross-checks them against all known Helm repositories.\n   kind \u2013 kind is a tool for running local Kubernetes clusters using Docker container \u201cnodes\u201d.\n k3s \u2013 Lightweight Kubernetes. Easy to install, half the memory, all in a binary less than 100 MB.\n eksctl \u2013 eksctl is a simple CLI tool for creating clusters on EKS \u2013 Amazon\u2019s new managed Kubernetes service for EC2.\n  kops \u2013 kops helps you create, destroy, upgrade and maintain production-grade, highly available, Kubernetes clusters from the command line.\n    Kubeadm \u2013 kubeadm performs the actions necessary to get a minimum viable cluster up and running.\n Conjure-Up \u2013 A tool provided by Canonical that will allow you to deploy Kubernetes to Ubuntu.\n   Flux \u2013 Flux is a tool that automatically ensures that the state of a cluster matches the config in git.\n  Argo Rollouts \u2013 Argo Rollouts controller, uses the Rollout custom resource to provide additional deployment strategies such as Blue Green and Canary to Kubernetes.\n Helm Operator \u2013 The Helm Operator is a Kubernetes operator, allowing one to declaratively manage Helm chart releases.\n Flagger \u2013 Flagger is a progressive delivery tool that automates the release process for applications running on Kubernetes.\n Argo Workflows \u2013 Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes.\n KEDA \u2013 KEDA allows for fine grained autoscaling (including to/from zero) for event driven Kubernetes workloads.\n KubeSphere \u2013 KubeSphere is a distributed operating system providing cloud native stack with Kubernetes as its kernel, and aims to be plug-and-play architecture for third-party applications seamless integration to boost its ecosystem.\n Skaffold \u2013 Skaffold is a command line tool that facilitates continuous development for Kubernetes applications.\n Apollo \u2013 Apollo is a simple, lightweight, Continuous Deployment (CD) solution on top of Kubernetes.\n Spinnaker \u2013 Spinnaker is an open-source continuous delivery platform for releasing software changes with high velocity and confidence.\n Argo Events \u2013 Argo Events is an event-driven workflow automation framework for Kubernetes which helps you trigger K8s objects, Argo Workflows, Serverless workloads, etc.\n Reloader \u2013 Reloader can watch changes in  ConfigMap and  Secret and do rolling upgrades on Pods with their associated  DeploymentConfigs,  Deployments,  Daemonsets and  Statefulsets.\n   Kruise \u2013 Kruise consists of several controllers which extend and complement the Kubernetes core controllers for workload management.\n Grafana Tanka\u2013 The clean, concise and super flexible alternative to YAML for your Kubernetes cluster.\n KubeDirector \u2013 KubeDirector uses standard Kubernetes (K8s) facilities of custom resources and API extensions to implement stateful scaleout application clusters.\n The Hierarchical Namespace Controller \u2013 Hierarchical namespaces make it easier to share your cluster by making namespaces more powerful.\n   Kubernetes External Secrets \u2013 Kubernetes External Secrets allows you to use external secret management systems, like AWS Secrets Manager or HashiCorp Vault, to securely add secrets in Kubernetes.\n Sealed Secrets \u2013 Encrypt your Secret into a SealedSecret, which is safe to store \u2013 even to a public repository.\n   ingress-nginx \u2013  ingress-nginx is an Ingress controller for Kubernetes using NGINX as a reverse proxy and load balancer.\n  Calico Networking \u2013 Calico is an open source networking and network security solution for containers, virtual machines, and bare-metal workloads\n  Kong for Kubernetes \u2013 Configure plugins, health checking, load balancing and more in Kong for Kubernetes Services.\n cert-manager \u2013 cert-manager is a Kubernetes add-on to automate the management and issuance of TLS certificates from various issuing sources.\n ksniff \u2013 A kubectl plugin that utilize tcpdump and Wireshark to start a remote capture on any pod in your Kubernetes cluster.\n kubectl trace \u2013  kubectl trace is a kubectl plugin that allows you to schedule the execution of bpftrace programs in your Kubernetes cluster.\n   OpenEBS \u2013 OpenEBS is the most widely deployed and easy to use open-source storage solution for Kubernetes.\n  Amazon EBS CSI Driver \u2013 The Amazon Elastic Block Store Container Storage Interface (CSI) Driver provides a CSI interface used by Container Orchestrators to manage the lifecycle of Amazon EBS volumes.\n Amazon EFS CSI Driver \u2013 The Amazon Elastic File System Container Storage Interface (CSI) Driver implements the CSI specification for container orchestrators to manage the lifecycle of Amazon EFS filesystems.\n Amazon FSx for Lustre CSI Driver \u2013 The Amazon FSx for Lustre Container Storage Interface (CSI) Driver implements CSI specification for container orchestrators (CO) to manage lifecycle of Amazon FSx for Lustre filesystems.\n   kube-monkey \u2013 It randomly deletes Kubernetes (k8s) pods in the cluster encouraging and validating the development of failure-resilient services.\n Kubetest\u2013 Kubetest is a pytest plugin that makes it easier to manage a Kubernetes cluster within your integration tests.\n Litmus \u2013 Litmus provides tools to orchestrate chaos on Kubernetes to help SREs find weaknesses in their deployments.\n PowerfulSeal \u2013 PowerfulSeal injects failure into your Kubernetes clusters, so that you can detect problems as early as possible. It is very Similar to Kube-Monkey.\n Kubectl-debug \u2013 Kubectl-debug an out-of-tree solution for troubleshooting running pods, which allows you to run a new container in running pods for debugging purpose.\n ksniff \u2013 A kubectl plugin that utilize tcpdump and Wireshark to start a remote capture on any pod in your Kubernetes cluster.\n k6 \u2013 k6 is a modern load testing tool, building on Load Impact\u2019s years of experience in the load and performance testing industry.\n   Chaos Mesh \u2013 Chaos Mesh\u00ae is a cloud-native Chaos Engineering platform that orchestrates chaos on Kubernetes environments.\n popeye \u2013 Popeye is a utility that scans live Kubernetes cluster and reports potential issues with deployed resources and configurations.\n kube-score \u2013  kube-score is a tool that performs static code analysis of your Kubernetes object definitions.\n KubeInvaders \u2013 Through KubeInvaders you can stress Kubernetes cluster in a fun way and check how it is resilient.\n   Prometheus \u2013 Prometheus, a Cloud Native Computing Foundation project, is a systems and service monitoring system.\n Grafana \u2013 Grafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored.\n kube-state-metrics \u2013 kube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects.\n Kubernetes Metrics Server \u2013 Metrics Server is a scalable, efficient source of container resource metrics for Kubernetes built-in autoscaling pipelines.\n Kubernetes Operational View \u2013 A tool that aims to provide a common operational picture for multiple Kubernetes clusters.\n  Thanos \u2013 Thanos is a set of components that can be composed into a highly available metric system with unlimited storage capacity.\n  Goldilocks \u2013 This tool creates a vertical pod autoscaler for each deployment in a namespace and then queries them for information.\n  Searchlight \u2013 Searchlight/Icinga periodically runs various checks on a Kubernetes cluster and sends notifications if detects an issue.\n Popeye \u2013 Popeye is a utility that scans live Kubernetes cluster and reports potential issues with deployed resources and configurations.\n kubewatch \u2013 KubeWatch is a Kubernetes watcher that currently publishes notification to available collaboration hubs/notification channels.\n Sloop \u2013 Sloop monitors Kubernetes, recording histories of events and resource state changes and providing visualizations to aid in debugging past events.\n BotKube \u2013 BotKube integration with Slack or Mattermost helps you monitor your Kubernetes cluster, debug critical deployments and gives recommendations for standard practices by running checks on the Kubernetes resources.\n kube-capacity \u2013 This is a simple CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster.\n Lens \u2013 Lens it\u2019s an useful, attractive, open source user interface (UI) for working with Kubernetes clusters.\n Zabbix or Nagios Check Kubernetes \u2013 According to their description\u2026 Nagios-style checks against Kubernetes API. Designed for usage with Nagios, Icinga, and Zabbix.\n Weave Scope \u2013 Is a troubleshooting and monitoring tool for Docker and Kubernetes clusters. It automatically generates applications and infrastructure topologies which can help you to identify application performance bottlenecks easily.\n DynaTrace OneAgent \u2013 A container aware agent that discovers and monitors Kubernetes workloads down to the infrastructure level.\n   katafygio \u2013 katafygio discovers Kubernetes objects (deployments, services, \u2026), and continuously save them as yaml files in a git repository.\n Velero \u2013 Velero (formerly Heptio Ark) gives you tools to back up and restore your Kubernetes cluster resources and persistent volumes.\n   kube-bench \u2013 kube-bench is a Go application that checks whether Kubernetes is deployed securely by running the checks documented in the CIS Kubernetes Benchmark.\n  Konstraint \u2013 Konstraint is a CLI tool to assist with the creation and management of constraints when using Gatekeeper.\n  Kube-Scan \u2013 Kube-Scan gives a risk score, from 0 (no risk) to 10 (high risk) for each workload.\n Permission manager \u2013 Permission Manager is an application developed by SIGHUP that enables a super-easy and user-friendly RBAC management for Kubernetes.\n  k-rail \u2013 k-rail is a workload policy enforcement tool for Kubernetes. It can help you secure a multi tenant cluster with minimal disruption and maximum velocity.\n Falco \u2013 Falco is a behavioral activity monitor designed to detect anomalous activity in your applications. You can use Falco to monitor run-time security of your Kubernetes applications and internal components.\n kubespy \u2013 Is a tool that makes it easy to observe how Kubernetes resources change in real time.\n Twistlock (acquired by Palo Alto and now Prisma Cloud) \u2013 Is a full-lifecycle container security solution. It has a VMS that scans for any areas that are vulnerable. Since the Palto Alto acquisition, the product has been re-branded.\n   Linkerd \u2013 Linkerd is a transparent service mesh, designed to make modern applications safe and sane.\n  AWS App Mesh \u2013 A service mesh service offered by AWS that works on AWS infrastructure services such as EKS and Fargate.\n Open Service Mesh \u2013 Open Service Mesh (OSM) is a lightweight, extensible, Cloud Native service mesh that allows users to uniformly manage, secure, and get out-of-the-box observability features for highly dynamic microservice environments.\n   kubernix \u2013 This project aims to provide single dependency Kubernetes clusters for local testing, experimenting and development purposes.\n  Makisu \u2013 Makisu is a fast and flexible Docker image build tool designed for unprivileged containerized environments such as Mesos or Kubernetes.\n Tye \u2013 Tye is a developer tool that makes developing, testing, and deploying microservices and distributed applications easier.\n kubectl-warp \u2013 Kubernetes CLI plugin for syncing and executing local files in Pod on Kubernetes\n   Kubeflow \u2013 Kubeflow is a Cloud Native platform for machine learning based on Google\u2019s internal machine learning pipelines.\n Strimzi \u2013 Strimzi provides a way to run an Apache Kafka cluster on Kubernetes or OpenShift in various deployment configurations.\n   Crossplane \u2013 Crossplane is an open source Kubernetes add-on that extends any cluster with the ability to provision and manage cloud infrastructure, services, and applications.\n  KubeEdge \u2013 KubeEdge is built upon Kubernetes and extends native containerized application orchestration and device management to hosts at the Edge.\n   Kubeless \u2013 Kubeless is a Kubernetes-native serverless framework that lets you deploy small bits of code without having to worry about the underlying infrastructure plumbing.\n Agones \u2013 Agones is a library for hosting, running and scaling dedicated game servers on Kubernetes.\n  Kubecost \u2013 Kubecost models give teams visibility into current and historical Kubernetes spend and resource allocation.\n    Did I miss a tool or resource that you use in your Kubernetes cluster? Let me know in the comment section below! Also, let me know what you think about this list and if it helped you!\n   Some of you have asked to provide the sources on how I was able to get this list. Here are some resources that I can currently recall that helped me achieve this list. In no specific order\u2026", "posttime": "2020-10-13 20:02:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5de5\u5177,curated,kubernetes", "title": "Kubernetes\uff1a\u5de5\u5177\u548c\u8d44\u6e90\u7684\u7cbe\u9009\u5217\u8868", "title_en": "Kubernetes: Curated List of Tools and Resources", "transed": 1, "url": "https://devopsunlocked.com/kubernetes-curated-list-of-tools-and-resources/", "via": "", "real_tags": ["\u5de5\u5177", "curated"]}, {"category": "", "categoryclass": "", "imagename": "8521999cfd6e3998640c4512a4178666.jpg", "infoid": 1028417, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u4f60\u60f3\u8d77\u6765\u7684\u65f6\u5019\uff0c\u5976\u916a\u662f\u4e00\u4ef6\u5f88\u5947\u602a\u7684\u4e8b\u60c5\u3002\u6709\u4eba\u4e0d\u5f97\u4e0d\u60f3\u51fa\u4e00\u4e2a\u4e3b\u610f\uff0c\u53d6\u4e00\u5806\u725b\u5976\uff0c\u52a0\u5165\u7ec6\u83cc\uff0c\u57fa\u672c\u4e0a\u8ba9\u5b83\u53d8\u574f\uff0c\u7136\u540e\u7b49\u7740\u5403\uff0c\u76f4\u5230\u4e0a\u9762\u957f\u51fa\u9709\u83cc\u3002\n\u5982\u679c\u8fd9\u8ba9\u4f60\u89c9\u5f97\u6076\u5fc3\uff0c\u90a3\u5c31\u7b49\u7740\u5427\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u50cf\u84dd\u5976\u916a\u8fd9\u6837\u7684\u5976\u916a\u4e2d\u7684\u771f\u83cc\u5e76\u4e0d\u662f\u53ea\u662f\u5750\u5728\u90a3\u91cc\uff0c\u7b49\u7740\u4f60\u5403\u5b83\u4eec\u3002\u4ed6\u4eec\u6b63\u5728\u4e0a\u6f14\u3002\u4e0b\u9762\u662f\u5173\u4e8e\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u771f\u76f8\u79d1\u5b66\uff1a\n\u76f4\u5230\u6700\u8fd1\uff0c\u4eba\u4eec\u8fd8\u8ba4\u4e3a\u5f88\u5927\u4e00\u90e8\u5206\u771f\u83cc\u7269\u79cd\u53ef\u4ee5\u65e0\u6027\u7e41\u6b96--\u76f4\u5230\u4eba\u4eec\u771f\u6b63\u5f00\u59cb\u89c2\u5bdf\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u771f\u83cc\u4e16\u754c(\u5e95\u5c42)\u53d1\u751f\u7684\u6027\u884c\u4e3a\u6bd4\u4eba\u4eec\u60f3\u8c61\u7684\u8981\u591a\u5f97\u591a\u3002\u8fd9\u5305\u62ec\u7528\u6765\u5236\u4f5c\u7f8e\u5473\u84dd\u8272\u5976\u916a\u7684\u771f\u83cc\u3002\u73cd\u59ae\u00b7\u7f57\u5e15\u65af(Jeanne Ropars)\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u5728\u7f57\u514b\u798f\u5976\u916a\u7684\u6545\u4e61\u6cd5\u56fd\uff0c\u7814\u7a76\u4e86\u8fd9\u79cd\u7279\u6b8a\u5976\u916a\u4e2d\u4f7f\u7528\u7684\u9709\u83cc\u7269\u79cd\u7684\u57fa\u56e0\u7ec4\uff0c\u770b\u770b\u4ed6\u4eec\u9009\u62e9\u7684\u96f6\u98df\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u4ed6\u4eec\u53d1\u73b0\u7684\u591a\u6837\u6027\u6bd4\u65e0\u6027\u7e41\u6b96\u6240\u80fd\u89e3\u91ca\u7684\u8981\u591a\u5f97\u591a\u3002\u66f4\u80fd\u8bf4\u660e\u95ee\u9898\u7684\u662f\uff0c\u771f\u83cc\u7528\u6765\u5bfb\u627e\u4ea4\u914d\u4f34\u4fa3\u7684\u57fa\u56e0\u5728\u8fdb\u5316\u8fc7\u7a0b\u4e2d\u4e00\u76f4\u4fdd\u6301\u5b8c\u597d\u5e76\u53d1\u6325\u4f5c\u7528\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u6027\u884c\u4e3a\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u5bf9\u5976\u916a\u5236\u9020\u5546\u6765\u8bf4\u5b9e\u9645\u4e0a\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u56e0\u4e3a\u751f\u4ea7\u65b0\u5f62\u5f0f\u7684\u5976\u916a\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u751f\u4ea7\u65b0\u5f62\u5f0f\u7684\u6a21\u5177\u3002\u5f53\u9709\u83cc\u65e0\u6027\u7e41\u6b96\u65f6\uff0c\u65b0\u7684\u5f62\u5f0f\u6765\u81ea\u4e00\u4e2a\u83cc\u682a\u5185\u7684\u968f\u673a\u7a81\u53d8\uff0c\u8fd9\u4e2a\u83cc\u682a\u53ea\u662f\u7b80\u5355\u5730\u590d\u5236\u81ea\u5df1\u3002\u4f46\u662f\uff0c\u5f53\u4e0d\u540c\u7684\u9709\u83cc\u83cc\u682a\u5f00\u59cb\u751f\u957f\u65f6\uff0c\u5b83\u4eec\u4f1a\u4ea7\u751f\u66f4\u591a\u7684\u65b0\u83cc\u682a\uff0c\u4ea7\u751f\u66f4\u591a\u7684\u65b0\u5976\u916a\u3002\n\u8fd9\u4e00\u5207\u80cc\u540e\u7684\u8bba\u6587(\u6807\u9898\u4e3a\u201c\u5976\u916a\u4e2d\u7684\u6027\uff1a\u771f\u83cc\u9752\u9709\u4e2d\u7684\u6027\u884c\u4e3a\u8bc1\u636e\u201d)\u5199\u9053\uff1a\n\u5728\u8fd9\u79cd\u5177\u6709\u9ad8\u5ea6\u5de5\u4e1a\u91cd\u8981\u6027\u7684\u7269\u79cd\u4e2d\uff0c\u6709\u6027\u5468\u671f\u7684\u8bf1\u5bfc\u5c06\u5f00\u542f\u4ea7\u751f\u65b0\u57fa\u56e0\u578b\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u5c06\u5bf9\u5976\u916a\u4ea7\u54c1\u7684\u591a\u6837\u5316\u6781\u5176\u6709\u7528\u3002\n\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0c\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u771f\u83cc\u62e5\u6709\u6709\u6027\u7e41\u6b96\u6240\u9700\u7684\u6240\u6709\u57fa\u56e0\u548c\u673a\u68b0\u90e8\u5206\u3002\u4e0d\u4ec5\u56e0\u4e3a\u5b83\u6709\u6027\u884c\u4e3a\u7684\u80fd\u529b\uff0c\u800c\u4e14\u6709\u8bc1\u636e\u8868\u660e\u5b83\u786e\u5b9e\u5728\u505a\u8fd9\u79cd\u4e8b\u3002\u8fd9\u91cc\u53c8\u662f\u201c\u5b9e\u4e8b\u6c42\u662f\u7684\u79d1\u5b66\u201d\u8282\u76ee\uff1a\n\u5176\u6b21\uff0c\u8fdb\u5316\u7559\u4e0b\u4e86\u5927\u91cf\u7684\u7ebf\u7d22\uff0c\u8981\u4e48\u5c31\u5728\u4f60\u7684\u5976\u916a\u91cc\u53d1\u751f\u6027\u884c\u4e3a\uff0c\u8981\u4e48\u76f4\u5230\u6700\u8fd1\u624d\u53d1\u751f\u3002\u524d\u9762\u63d0\u5230\u7684\u6027\u611f\u65f6\u95f4\u57fa\u56e0\u662f\u901a\u8fc7\u51c0\u5316\u9009\u62e9\u6765\u8fdb\u5316\u7684\u3002\u8fd9\u662f\u4e00\u79cd\u9632\u6b62\u4e8b\u7269\u6539\u53d8\u7684\u8fdb\u5316(\u6211\u77e5\u9053\uff0c\u542c\u8d77\u6765\u50cf\u662f\u8fdb\u5316\u7684\u53cd\u9762)\u3002\u5bf9\u751f\u547d(\u6216\u8005\u6027)\u975e\u5e38\u91cd\u8981\u7684\u57fa\u56e0\uff0c\u771f\u7684\u6709\u533a\u522b\u5417\uff1f\u4e0d\u5e94\u8be5\u6539\u53d8\u3002\u4f46\u662f\u7a81\u53d8\u662f\u4f1a\u53d1\u751f\u7684\uff0c\u6240\u4ee5\u8fdb\u5316\u5fc5\u987b\u8fdb\u5165\u5176\u4e2d\uff0c\u5e76\u5c06\u6240\u6709\u643a\u5e26\u8fd9\u4e9b\u7a81\u53d8\u7684\u4eba\u4ece\u79cd\u7fa4\u4e2d\u79fb\u9664\u3002\u57fa\u672c\u4e0a\uff0c\u5728\u975e\u5e38\u91cd\u8981\u7684\u57fa\u56e0\u4e2d\u53d1\u751f\u7a81\u53d8\uff0c\u8fd9\u4e9b\u57fa\u56e0\u4e0d\u518d\u8d77\u4f5c\u7528\uff0c\u4f60\u5c31\u4f1a\u6b7b\u4ea1\u3002\u5982\u679c\u4e0d\u518d\u9700\u8981\u6027\u611f\u65f6\u95f4\u57fa\u56e0\uff0c\u90a3\u4e48\u7a81\u53d8\u7684\u79ef\u7d2f\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\n\u57fa\u56e0\u7ec4\u4e2d\u4e5f\u6709\u6027\u522b\u7684\u8db3\u8ff9\u3002\u5f53\u53d1\u751f\u6027\u884c\u4e3a\u65f6\uff0cDNA\u4f1a\u88ab\u91cd\u65b0\u6d17\u724c\u3002\u7814\u7a76\u4eba\u5458\u5728\u4ed6\u4eec\u89c2\u5bdf\u7684\u4e00\u4e9bDNA\u7247\u6bb5\u4e2d\u53d1\u73b0\u4e86\u8fd9\u79cd\u91cd\u65b0\u6d17\u724c\u7684\u8bc1\u636e\uff0c\u8fd9\u610f\u5473\u7740\u6027\u884c\u4e3a\u5fc5\u987b\u5728\u6700\u8fd1\u7684\u67d0\u4e2a\u65f6\u5019\u53d1\u751f\u3002\n\u5f53\u7136\uff0c\u6ca1\u6709\u4eba\u771f\u7684\u89c1\u8fc7\u5976\u916a\u9709\u83cc\u505a\u7231\u3002\u4f46\u662f\u9057\u4f20\u5b66\u5e76\u4e0d\u503e\u5411\u4e8e\u6492\u8c0e\u3002\u4e5f\u8bb8\u8fd9\u662f\u83ab\u91cc\u79c0\u7684\u4eb2\u5b50\u9274\u5b9a\u6848\u4ef6\u3002", "note_en": "Cheese is a pretty weird thing when you think about it. Someone had to come up with the idea of taking a bunch of milk, adding bacteria, letting it basically go bad, and waiting to eat it until mold had grown on it.\n  And, if that grosses you out, just wait. It turns out that the fungi in cheeses like blue cheese aren\u2019t just sitting there, waiting for you to eat them. They\u2019re getting it on.\u00a0 Here\u2019s Nitty Gritty Science on what\u2019s going on:\n  Until pretty recently, a big chunk of fungal species were thought to reproduce without sex\u2013until people really started to look. It turns out, there\u2019s a lot more sex going on in the fungal world (on the down-low) than people thought. And that includes fungi that are used to make delicious blue cheese. Jeanne Ropars and colleagues in France, the home of Roquefort cheese, looked at the genomes of the mold species used in this particular cheese to see what kind of funny business was going on in their snack of choice. They found much more diversity than could be explained by asexual reproduction. And even more telling, the genes used by fungi to find mating partners have been kept intact and functional by evolution, meaning there\u2019s probably some sex going on.\n  It turns out that this is actually a good thing for cheese makers, since producing new forms of cheese really means producing new forms of mold. When the mold is reproducing asexually, new forms come from random mutations within one strain that\u2019s simply duplicating itself. But when different mold strains are getting it on, they create way more new strains and way more new cheeses.\n  The paper behind all this (titled \u201cSex in Cheese: Evidense for Sexuality in the Fungus Penicillium requeforti\u201d) says:\n  In this species of high industrial importance, the induction of a sexual cycle would open the possibility of generating new genotypes that would be extremely useful to diversify cheese products.\n  Essentially, the researchers discovered that a fungus has all the genes and mechanical bits that it would need for sex. And not only is it capable of sex, there is evidence that it\u2019s actually doing the deed. Here\u2019s Nitty Gritty Science again:\n  Next, there were plenty of clues left by evolution that sex is either happening\u00a0 right now in your cheese, or that it had been happening until fairly recently. The aforementioned sexy-time genes were evolving by purifying selection. This is a kind of evolution that keeps things from changing (I know, sounds like the opposite of evolution). Genes that are really important for life (or sex, and really is there a difference?) shouldn\u2019t change. But mutations will happen, so evolution has to get in there and remove anyone carrying those mutations from the population. Basically, get mutations in really important genes, those genes no longer work, and you die. If there was no need for sexy-time genes anymore, then there would be no problem with mutations building up.\n There were also footprints of sex in the genome. When sex occurs, DNA gets reshuffled. The researchers found evidence of this kind of reshuffling in some of the chunks of DNA they looked at, meaning that sex had to occur at some point in the recent past.\n  Of course, no one has actually seen cheese mold having sex. But genetics doesn\u2019t tend to lie. Perhaps this is a paternity case for the  Maury Show.", "posttime": "2020-10-13 20:01:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5947\u602a,cheese,\u5976\u916a", "title": "\u4f60\u5976\u916a\u91cc\u7684\u771f\u83cc\u6709\u5947\u602a\u7684\u6027\u884c\u4e3a", "title_en": "The Fungus in Your Cheese Is Having Weird Sex", "transed": 1, "url": "https://www.smithsonianmag.com/smart-news/the-fungus-in-your-cheese-is-having-weird-sex-156095258", "via": "", "real_tags": ["\u5947\u602a", "cheese", "\u5976\u916a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1028416, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u589e\u52a0\u4e86\u8c03\u7528\u70b9\u5c5e\u6027Vector-Function-ABI-Variant\u6765\u63cf\u8ff0\u6807\u91cf\u51fd\u6570\u548c\u5411\u91cf\u51fd\u6570\u4e4b\u95f4\u7684\u6620\u5c04\uff0c\u4ee5\u5b9e\u73b0\u8c03\u7528\u70b9\u7684\u77e2\u91cf\u5316\u3002\u5c5e\u6027\u63d0\u4f9b\u7684\u4fe1\u606f\u901a\u8fc7VFDatabase\u7c7b\u63d0\u4f9b\u7684API\u8fdb\u884c\u63a5\u53e3\u3002\u5f53\u626b\u63cf\u4e0e\u6807\u91cf\u8c03\u7528\u76f8\u5173\u8054\u7684\u5411\u91cf\u51fd\u6570\u96c6\u65f6\uff0c\u5faa\u73af\u5411\u91cf\u5668\u73b0\u5728\u4f9d\u8d56\u4e8eVFDatabase\uff0c\u800c\u4e0d\u662fTargetLibraryInfo\u3002\n\u6307\u9488\u4e0a\u7684\u53ef\u89e3\u9664\u5f15\u7528\u7684\u5c5e\u6027\u548c\u5143\u6570\u636e\u4e0d\u518d\u9690\u542b\u4efb\u4f55\u6709\u5173\u6709\u95ee\u9898\u7684\u6307\u9488\u5bf9\u9f50\u7684\u5185\u5bb9\u3002\u4ee5\u524d\uff0c\u4e00\u4e9b\u4f18\u5316\u4f1a\u6839\u636e\u6307\u9488\u7684\u7c7b\u578b\u8fdb\u884c\u5047\u8bbe\u3002\u8fd9\u79cd\u884c\u4e3a\u6ca1\u6709\u8bb0\u5f55\u5728\u6848\u3002\u4e3a\u4e86\u4fdd\u6301\u4f18\u5316\uff0c\u53ef\u80fd\u9700\u8981\u66f4\u65b0\u524d\u7aef\u4ee5\u751f\u6210\u9002\u5f53\u7684\u5bf9\u9f50\u5c5e\u6027\u548c\u5143\u6570\u636e\u3002\n\u6269\u5c55DIModule\u5143\u6570\u636e\u4ee5\u5305\u542b\u6587\u4ef6\u548c\u884c\u53f7\u4fe1\u606f\u3002\u6b64\u4fe1\u606f\u7528\u4e8e\u8868\u793aIR\u7ea7\u7684Fortran\u6a21\u5757\u8c03\u8bd5\u4fe1\u606f\u3002\nLLVM IR\u73b0\u5728\u652f\u6301\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684llvm\uff1a\uff1aFixedVectorType\u548cllvm\uff1a\uff1aScalableVectorType\u5411\u91cf\u7c7b\u578b\uff0c\u4e24\u8005\u90fd\u6d3e\u751f\u81ea\u57fa\u7c7bllvm\uff1a\uff1aVectorType\u3002\u8bb8\u591a\u5904\u7406IR\u77e2\u91cf\u7c7b\u578b\u7684\u7b97\u6cd5\u5df2\u7ecf\u66f4\u65b0\uff0c\u4ee5\u786e\u4fdd\u5b83\u4eec\u65e2\u9002\u7528\u4e8e\u53ef\u7f29\u653e\u77e2\u91cf\u7c7b\u578b\uff0c\u4e5f\u9002\u7528\u4e8e\u56fa\u5b9a\u77e2\u91cf\u7c7b\u578b\u3002\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u57fa\u7c7b\u4f7f\u4ee3\u7801\u6cdb\u578b\u4ee5\u6db5\u76d6\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u4ee5\u524d\u4f7f\u7528\u7c7b\u578bUNSIGNED\u6765\u8ba1\u7b97\u5411\u91cf\u7ffc\u6570\u7684\u4f4d\u7f6e\u73b0\u5728\u4f7f\u7528llvm\uff1a\uff1aElementCount\u3002\u5728\u4f7f\u7528uint64_t\u8868\u793aIR\u7c7b\u578b\u7684\u4f4d\u6570\u7684\u5730\u65b9\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06\u4ee3\u7801\u5e93\u90e8\u5206\u8fc1\u79fb\u5230\u4f7f\u7528llvm\uff1a\uff1aTypeSize\u3002\n\u5728undef/\u6bd2\u6027\u4e0a\u8fdb\u884c\u5206\u652f\u662f\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5b83\u662f\u6839\u636e\u5206\u652f\u6761\u4ef6\u6b63\u786e\u5206\u6790\u53d6\u503c\u8303\u56f4\u6240\u5fc5\u9700\u7684\u3002\u8fd9\u4e5f\u4e0eMSAN\u7684\u884c\u4e3a\u4e00\u81f4\u3002\n\u5c06undef/posis\u4f20\u9012\u7ed9\u6807\u51c6I/O\u5e93\u51fd\u6570\u8c03\u7528(printf/fputc/\u2026)\u3002\u662f\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u65b0\u7684noundef\u5c5e\u6027\u9644\u52a0\u5230\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u3002\u5b8c\u6574\u5217\u8868\u4f4d\u4e8ellvm\uff1a\uff1ainherLibFuncAttributes\u3002\nLLVM\u9879\u76ee\u5df2\u7ecf\u5f00\u59cb\u5411Python3\u8fc1\u79fb\uff0c\u800cbuildsystem\u73b0\u5728\u66f4\u559c\u6b22Python3\u3002\u5982\u679c\u627e\u4e0d\u5230Python 3\u89e3\u91ca\u5668(\u6216\u5e93)\uff0c\u6784\u5efa\u7cfb\u7edf\u5c06\u6682\u65f6\u56de\u9000\u5230Python 2\u3002\u5efa\u8bae\u4e0b\u6e38\u9879\u76ee\u8fc1\u79fb\u5230Python 3\uff0c\u56e0\u4e3aPython 2\u5df2\u88abPython Software Foundation\u6dd8\u6c70\u3002\n\u5f53\u4ee5COFF\u4e3a\u76ee\u6807\u65f6\uff0c\u5bf9\u4e8e\u4e0d\u652f\u6301\u7684\u4f4d\u7f6e\u8c03\u6574\u663e\u7136\u662f\u9519\u8bef\u7684\uff0c\u800c\u4e0d\u662f\u9ed8\u9ed8\u63a5\u53d7\u4e00\u4e9b(\u65e0\u6cd5\u6267\u884c\u6240\u8bf7\u6c42\u7684\u64cd\u4f5c)\u3002\n\u4e3aSVE(00bet5\u7248)\u7684ARM C\u8bed\u8a00\u6269\u5c55(ACLE)\u4e2d\u8bb0\u5f55\u7684SVE C\u8bed\u8a00\u5185\u90e8\u5b9e\u73b0\u4e86\u4ee3\u7801\u751f\u6210\u652f\u6301\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605clang 11\u53d1\u884c\u8bf4\u660e\u3002\n\u652f\u6301ARMv8.2-BF16BFloat16\u6269\u5c55\u3002\u8fd9\u5305\u62ec\u4e00\u4e2a\u65b0\u7684\u4ec5\u652f\u6301C\u7ea7\u5b58\u50a8\u7684__bf16\u7c7b\u578b\u3001\u4e00\u4e2aBFloat IR\u7c7b\u578b\u3001\u4e00\u4e2abf16 MVT\uff0c\u4ee5\u53ca\u5bf9\u6c47\u7f16\u548c\u5185\u90e8\u7684\u652f\u6301\u3002\n\u4e3a\u5b8c\u6574\u7684ARM v8.1-M MVE\u6307\u4ee4\u96c6\u5b9e\u73b0\u4e86C\u8bed\u8a00\u5185\u90e8\u529f\u80fd\u3002&lt\uff1barm_mve.h&gt\uff1b\u73b0\u5728\u652f\u6301ARM CLanguage\u6269\u5c55\u4e2d\u5b9a\u4e49\u7684\u5b8c\u6574API\u3002\n\u5728\u542f\u7528\u4f18\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u9488\u5bf9ARM\u548cThumb\u7684\u975eAndroidLinux\u65f6\uff0cclang\u73b0\u5728\u9ed8\u8ba4\u4e3a-fomit-frame-Pointer\u3002\u4ee5\u524d\u6ca1\u6709\u6307\u5b9a\u503c\u5e76\u4f9d\u8d56\u9690\u5f0f\u7f16\u8bd1\u5668\u7f3a\u7701\u503c\u7684\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u6307\u5b9a-fno-omit-frame-pointer\u6765\u83b7\u53d6\u65e7\u884c\u4e3a\u3002\u8fd9\u63d0\u9ad8\u4e86\u4e0eGCC\u7684\u517c\u5bb9\u6027\u3002\n\u652f\u6301ARMv8.2-AA32BF16 BFloat16\u6269\u5c55\u3002\u8fd9\u5305\u62ec\u65b0\u7684\u7eaf\u5b58\u50a8__bf16\u7c7b\u578b\u3001BFloat IR\u7c7b\u578b\u3001bf16 MVT\u4ee5\u53ca\u6c47\u7f16\u548c\u5185\u90e8\u652f\u6301\u3002\n\u73b0\u5728\uff0cARM\u548cThumb2\u652f\u6301\u673a\u5668\u5927\u7eb2\u89c6\u56fe\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528-mOutline clang\u6807\u5fd7\u542f\u7528\u3002\n\u6539\u8fdb\u7684\u5faa\u73af\u5c55\u5f00\u548c\u963b\u585e\u5408\u6cd5\u6027\u68c0\u67e5\uff0c\u5141\u8bb8\u5b83\u5904\u7406\u4e24\u4e2a\u4ee5\u4e0a\u7ea7\u522b\u7684\u5faa\u73af\u5d4c\u5957\u3002\n\u5b9e\u73b0\u4e86\u5141\u8bb8\u5faa\u73af\u878d\u5408\u5728\u5177\u6709\u4e0d\u540c\u6052\u5b9a\u8df3\u95f8\u8ba1\u6570\u7684\u5faa\u73af\u4e0a\u5de5\u4f5c\u7684\u9009\u9879\n\u542f\u7528\u7f16\u8bd1\u548c\u94fe\u63a5\uff0c\u4ee5\u4fbf\u7b80\u5355\u7684&lt\uff1bstdio.h&gt\uff1b\u201cHello World\u201d\u7a0b\u5e8f\u4f7f\u7528\u6807\u51c6\u6807\u5934\u3002\n\u5728llvm-objdump\u4e2d\uff0c\u6dfb\u52a0\u4e86\u5bf9\u91cd\u65b0\u5b9a\u4f4d\u7684\u652f\u6301\uff0c\u6539\u8fdb\u4e86\u7b26\u53f7\u6807\u7b7e\u7684\u9009\u62e9\uff0c\u5e76\u6dfb\u52a0\u4e86-Symbol-Description\u9009\u9879\u3002\n\u901a\u8fc7RFC\u534f\u5546\u540e\uff0cRISC-V\u540e\u7aef\u73b0\u5728\u63a5\u53d7\u5c1a\u672a\u6279\u51c6\u7684\u5efa\u8bae\u6307\u4ee4\u96c6\u6269\u5c55\u7684\u8865\u4e01\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u5b9e\u9a8c\u6027\u6269\u5c55\uff0c\u4e0d\u4f1a\u671f\u671b\u6301\u7eed\u7684\u652f\u6301-\u7f16\u8bd1\u5668\u652f\u6301\u5c06\u7ee7\u7eed\u66f4\u6539\uff0c\u76f4\u5230\u89c4\u8303\u6700\u7ec8\u786e\u5b9a\u3002\u6839\u636e\u8fd9\u4e00\u653f\u7b56\uff0c\u4e3a\u5efa\u8bae\u7684\u4f4d\u64cd\u4f5c\u6269\u5c55\u76840.92\u7248\u6dfb\u52a0\u4e86MC\u5c42\u548c\u4ee3\u7801\u751f\u6210\u652f\u6301\uff0c\u4e3a\u5efa\u8bae\u7684RISC-V\u77e2\u91cf\u6307\u4ee4\u96c6\u6269\u5c55\u76840.8\u7248\u6dfb\u52a0\u4e86MC\u5c42\u652f\u6301\u3002\u7531\u4e8e\u8fd9\u4e9b\u6269\u5c55\u5c1a\u672a\u83b7\u5f97\u6279\u51c6\uff0c\u7f16\u8bd1\u5668\u652f\u6301\u5c06\u7ee7\u7eed\u66f4\u6539\u4ee5\u4e0e\u89c4\u8303\u76f8\u5339\u914d\uff0c\u76f4\u5230\u6700\u7ec8\u786e\u5b9a\u4e3a\u6b62\u3002\n\u5982\u679c\u53ef\u4ee5\u4f7f\u7528\u4e00\u5bf9ADDI\u6307\u4ee4\u751f\u6210\u7acb\u5373\u6570\uff0c\u5219\u5c06\u9009\u62e9\u8be5\u5bf9\uff0c\u800c\u4e0d\u662f\u5c06\u7acb\u5373\u6570\u5177\u4f53\u5316\u5230\u5177\u6709LUI\u548cADDI\u5bf9\u7684\u72ec\u7acb\u5bc4\u5b58\u5668\u4e2d\u3002\nADDI\u6307\u4ee4\u73b0\u5728\u88ab\u6298\u53e0\u5230\u52a0\u8f7d/\u5b58\u50a8\u6307\u4ee4\u7684\u504f\u79fb\u91cf\u4e2d\uff0c\u5373\u4f7f\u52a0\u8f7d/\u5b58\u50a8\u672c\u8eab\u5177\u6709\u975e\u96f6\u504f\u79fb\u91cf\uff0c\u5f53\u53ef\u4ee5\u5b89\u5168\u5730\u6267\u884cDOSO\u65f6\u4e5f\u662f\u5982\u6b64\u3002\nRISC-V\u540e\u7aef\u7684\u52a0\u8f7d/\u5b58\u50a8\u7aa5\u5b54\u4f18\u5316\u901a\u9053\u73b0\u5728\u652f\u6301\u6d6e\u70b9\u5e38\u91cf\u6c60\uff0c\u4ece\u800c\u6539\u8fdb\u4e86\u6d6e\u70b9\u5e38\u91cf\u7684\u4ee3\u7801\u751f\u6210\u3002\n\u9664\u4f20\u7edf\u6570\u636e\u6682\u5b58\u5bc4\u5b58\u5668\u540d\u79f0\u5916\uff0c\u73b0\u5728\u8fd8\u53ef\u4ee5\u8bc6\u522b\u8c03\u8bd5\u6682\u5b58\u5bc4\u5b58\u5668\u540d\u79f0dscrch0\u548cdscrch1\u3002\n\u73b0\u5728\uff0c\u7a0b\u5e8f\u96c6\u4e2d\u652f\u6301.option pic\u548c.option ntop.relocWAS\u6269\u5c55\u4e3a\u652f\u6301\u4efb\u610f\u91cd\u5b9a\u4f4d\u7c7b\u578b\u3002\n\u8ba1\u7b97\u51fa\u7684\u539f\u5b50\u4f2a\u64cd\u4f5c\u5c55\u5f00\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u907f\u514d\u4e86\u67d0\u4e9b\u8f93\u5165\u5728\u5206\u652f\u677e\u5f1b\u65f6\u51fa\u73b0\u201c\u4fee\u6b63\u503c\u8d85\u51fa\u8303\u56f4\u201d\u7684\u9519\u8bef\u3002\n\u73b0\u5728\u53d1\u51fa\u6b63\u786e\u7684\u5e93\u8c03\u7528\uff0c\u4ee5\u4fbf\u5728\u6ca1\u6709F\u6216D\u6269\u5c55\u540d\u7684RV64\u76ee\u6807\u4e0a\u5c06\u6d6e\u70b9/\u53cc\u7cbe\u5ea6\u6570\u8f6c\u6362\u4e3a32\u4f4d\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\u6574\u6570\u3002\n\u589e\u5f3a\u4e86\u6c47\u7f16\u5668\u89e3\u6790\u5668\uff0c\u5373\u4f7f\u5728\u5730\u5740\u5bc4\u5b58\u5668\u4e0a\u4e0b\u6587\u4e2d\u4e5f\u5141\u8bb8\u4f7f\u7528%r0\uff0c\u5e76\u5141\u8bb8\u4f7f\u7528\u7eaf\u6574\u6570\u6765\u6307\u5b9a\u5bc4\u5b58\u5668\uff0c\u800c\u4e0d\u662f\u5230\u5904\u4f7f\u7528\u5bc4\u5b58\u5668\u540d\u79f0\u3002\n\u4fee\u590d\u4e86\u5728\u4f20\u9012\u4ec5\u5177\u6709\u5355\u4e2a\u6210\u5458\u79bb\u6563\u70b9\u7c7b\u578b\u7684C++\u7c7b(\u975e\u7ed3\u6784)\u7c7b\u578b\u65f6\u8fdd\u53cd\u5e73\u53f0ABI\u7684\u9519\u8bef\u4ee3\u7801\u751f\u6210\u3002\n\u4fee\u590d\u4e86\u4f7f\u7528\u5177\u670916\u6216\u66f4\u5927\u7acb\u5373\u957f\u5ea6\u53c2\u6570\u7684vec_store_len_r\u6216vec_load_len_r\u5185\u90e8\u51fd\u6570\u65f6\u9519\u8bef\u7684\u4ee3\u7801\u751f\u6210\u3002\n\u63a2\u6d4b\u5806\u6808\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u201cinline-asm\u201d\u7684\u51fd\u6570\u73b0\u5728\u53d7\u5230\u4fdd\u62a4\uff0c\u4e0d\u4f1a\u53d1\u751f\u5806\u6808\u51b2\u7a81\uff0c\u4e0d\u9700\u8981\u7b2c\u4e09\u65b9\u63a2\u6d4b\u51fd\u6570\uff0c\u5e76\u4e14\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u6709\u9650\u3002\n-x86-enable-old-knl-abi\u547d\u4ee4\u884c\u5f00\u5173\u5df2\u5220\u9664\u3002\u5f53avx512f\u4f7f\u80fd\u800cavx512bwis\u7981\u7528\u65f6\uff0cv32i16/v64i8\u77e2\u91cf\u59cb\u7ec8\u4f20\u9012\u5230ZMM\u5bc4\u5b58\u5668\u4e2d\u3002\n\u542f\u7528avx512f\u65f6\uff0ci16\u6216i8\u5143\u7d20\u7684\u5927\u4e8e512\u4f4d\u7684\u5411\u91cf\u5c06\u5728\u591a\u4e2aZMM\u5bc4\u5b58\u5668\u4e2d\u4f20\u9012\u3002\u4ee5\u524d\uff0c\u8fd9\u9700\u8981davx512bw\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u88ab\u5206\u6210\u591a\u4e2aYMM\u5bc4\u5b58\u5668\u3002\u8fd9\u610f\u5473\u7740\u5c06vxi16/vxi8\u77e2\u91cf\u4e00\u81f4\u5730\u89c6\u4e3a\u603b\u5bbd\u5ea6\u76f8\u540c\u7684vxi32/vxi64/vxf64/vxf32\u77e2\u91cf\u3002\n\u6dfb\u52a0\u4e86\u63a8\u6d4b\u6027\u6267\u884c\u526f\u4f5c\u7528\u6291\u5236\u901a\u9053\uff0c\u53ef\u5c06\u5176\u7528\u4f5c\u4e0e\u63a8\u6d4b\u6027\u6267\u884c\u76f8\u5173\u7684CPU\u6f0f\u6d1e\u7684\u6700\u540e\u624b\u6bb5\u7f13\u89e3\u3002\n\u6269\u5c55\u4e86\u65cb\u8f6c\u6a21\u5f0f\u8bc6\u522b\u4ee5\u5904\u7406\u6f0f\u6597\u79fb\u52a8\uff0c\u5141\u8bb8\u6211\u4eec\u5220\u9664\u73b0\u6709\u7684\u7279\u5b9a\u4e8ex86\u7684SHLD/SHRD\u7ec4\u5408\u3002\n\u5bf9\u4e8e\u6240\u6709\u8ba1\u7b97\u51fd\u6570\u7c7b\u578b\u7684\u6240\u6709\u76ee\u6807\uff0c\u540e\u7aef\u9ed8\u8ba4\u975e\u6b63\u89c4\u5904\u7406\u6a21\u5f0f\u5df2\u5207\u6362\u4e3aON\u3002\u5e0c\u671b\u4fdd\u7559\u65e7\u884c\u4e3a\u7684\u524d\u7aef\u5e94\u660e\u786e\u8bf7\u6c42F32\u53cd\u6b63\u5e38\u5237\u65b0\u3002\n\u4ece\u5b9e\u9a8c\u540e\u7aef\u8f6c\u79fb\u5230\u5b98\u65b9\u540e\u7aef\u3002AVR\u652f\u6301\u73b0\u5728\u9ed8\u8ba4\u5305\u542b\u5728\u6240\u6709LLVM\u6784\u5efa\u548c\u53d1\u5e03\u4e2d\uff0c\u5e76\u4e14\u5728\u201cAVR-UNKNOWN-UNKNOWN\u201d\u76ee\u6807\u4e09\u5143\u7ec4\u4e0b\u53ef\u7528\u3002\n\u6ca1\u6709\u201c\u4e3b\u201d\u51fd\u6570(\u79f0\u4e3a\u201c\u53cd\u5e94\u5668\u201d)\u7684\u7a0b\u5e8f\u73b0\u5728\u53ef\u4ee5\u6b63\u786e\u652f\u6301\uff0c\u5e76\u5e26\u6709\u4e00\u4e2a\u65b0\u7684-mexec-model=\u53cd\u5e94\u5668\u6807\u5fd7\u3002\u4ee5\u524d\u4f7f\u7528-wl\uff0c-no-entry\u6765\u907f\u514d\u4e3b\u51fd\u6570\u7684\u7a0b\u5e8f\u5e94\u8be5\u5207\u6362\u5230\u8fd9\u4e2a\u65b0\u6807\u5fd7\uff0c\u4ee5\u4fbf\u6b63\u786e\u5730\u6267\u884c\u9759\u6001\u521d\u59cb\u5316\u3002\n__ATTRIBUTE__((Visibility(\u201cProtected\u201d)\u73b0\u5728\u4f1a\u53d1\u51fa\u8b66\u544a\uff0c\u56e0\u4e3aWebAssembly\u4e0d\u652f\u6301\u201cProtected\u201d\u53ef\u89c1\u6027\u3002\n\u4e3a\u6ca1\u6709COMDAT\u7684IR\u7ea7\u5f31\u7b26\u53f7\u751f\u6210COFF\u5f31\u5916\u90e8\u7b26\u53f7(\u4f8b\u5982\uff0c\u5bf9\u4e8eC\u4e2d\u7684__ATTRIBUTE__((\u5f31)\u3002\nSelDag\u7ea7\u51bb\u7ed3\u6307\u4ee4\u5df2\u843d\u5730\u3002\u5b83\u88ab\u7b80\u5355\u5730\u964d\u4f4e\u4e3a\u5bf9MachineIR\u7684\u590d\u5236\u64cd\u4f5c\uff0c\u4f46\u662f\u8981\u4f7f\u5176\u5b8c\u5168\u6b63\u786e\uff0c\u8981\u4e48\u5e94\u8be5\u4fee\u590dIMPLICIT_DEF\uff0c\u8981\u4e48\u5e94\u8be5\u5c06\u7b49\u6548\u7684\u51bb\u7ed3\u64cd\u4f5c\u6dfb\u52a0\u5230MachineIR\u3002\n--plugin-opt=Whole-Program-Visibility\u7528\u4e8e\u6307\u5b9a\u7c7b\u5728\u4f7f\u7528-fall-program-vtables\u7f16\u8bd1\u7684\u6e90\u6587\u4ef6\u7684LTO\u548cThinLTO\u94fe\u63a5\u4e2d\u5177\u6709\u9690\u85cf\u7684LTO\u53ef\u89c1\u6027\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605LTOVisibility\u3002(D71913)\u3002\n\u5411llvm-dwarfdump\u6dfb\u52a0\u4e86\u4e00\u4e2a\u9009\u9879(-show-Section-size)\uff0c\u4ee5\u663e\u793a\u6587\u4ef6\u4e2d\u6240\u6709\u8c03\u8bd5\u8282\u7684\u5927\u5c0f\u3002\nLlvm-nm\u73b0\u5728\u5b9e\u73b0\u4e86\u6807\u5fd7--Special-syms\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u8fc7\u6ee4\u6389\u7279\u6b8a\u7b26\u53f7\uff0c\u5373\u6620\u5c04ARM\u548cAArch64\u4e0a\u7684\u7b26\u53f7\u3002\u8fd9\u4e0eGNU nm\u7684\u884c\u4e3a\u76f8\u5339\u914d\u3002\nLlvm-rc\u73b0\u5728\u5141\u8bb8-1\u4f5c\u4e3a\u83dc\u5355\u9879ID\uff0c\u652f\u6301\u8bed\u8a00ID\u9009\u9879\uff0c\u5e76\u5141\u8bb8\u5c06\u5b57\u7b26\u4e32\u8868\u503c\u62c6\u5206\u4e3a\u591a\u4e2a\u5b57\u7b26\u4e32\u6587\u5b57", "note_en": "The callsite attribute  vector-function-abi-variant has beenadded to describe the mapping between scalar functions and vectorfunctions, to enable vectorization of call sites. The informationprovided by the attribute is interfaced via the API provided by the  VFDatabase class. When scanning through the set of vectorfunctions associated with a scalar call, the loop vectorizer nowrelies on   VFDatabase, instead of   TargetLibraryInfo.\n dereferenceable attributes and metadata on pointers no longer implyanything about the alignment of the pointer in question. Previously, someoptimizations would make assumptions based on the type of the pointer. Thisbehavior was undocumented. To preserve optimizations, frontends may need tobe updated to generate appropriate  align attributes and metadata.\n The DIModule metadata is extended to contain file and line numberinformation. This information is used to represent Fortran modules debuginfo at IR level.\n LLVM IR now supports two distinct   llvm::FixedVectorType and  llvm::ScalableVectorType vector types, both derived from thebase class   llvm::VectorType. A number of algorithms dealing withIR vector types have been updated to make sure they work for bothscalable and fixed vector types. Where possible, the code has beenmade generic to cover both cases using the base class. Specifically,places that were using the type   unsigned to count the number oflanes of a vector are now using   llvm::ElementCount. In placeswhere   uint64_t was used to denote the size in bits of a IR typewe have partially migrated the codebase to using   llvm::TypeSize.\n Branching on   undef/  poison is undefined behavior. It is needed forcorrectly analyzing value ranges based on branch conditions. This isconsistent with MSan\u2019s behavior as well.\n  Passing   undef/  poison to a standard I/O library function call( printf/ fputc/\u2026) is undefined behavior. The new   noundef attributeis attached to the functions\u2019 arguments. The full list is available at  llvm::inferLibFuncAttributes.\n The LLVM project has started the migration towards Python 3, and the buildsystem now prefers Python 3 whenever available. If the Python 3 interpreter(or libraries) are not found, the build system will, for the time being, fallback to Python 2. It is recommended that downstream projects migrate toPython 3 as Python 2 has been end-of-life\u2019d by the Python SoftwareFoundation.\n  Clearly error out on unsupported relocations when targeting COFF, insteadof silently accepting some (without being able to do what was requested).\n Implemented codegen support for the SVE C-language intrinsicsdocumented in  Arm C Language Extensions (ACLE) for SVE (version  00bet5). For more information, see the   clang 11 releasenotes.\n Support for the ARMv8.2-BF16 BFloat16 extension. This includes a new C-levelstorage-only  __bf16 type, a  BFloat IR type, a  bf16 MVT, and assemblyand intrinsics support.\n Implemented C-language intrinsics for the full Arm v8.1-M MVE instructionset.   &lt;arm_mve.h&gt; now supports the complete API defined in the Arm CLanguage Extensions.\n   Clang now defaults to   -fomit-frame-pointer when targeting non-AndroidLinux for arm and thumb when optimizations are enabled. Users that werepreviously not specifying a value and relying on the implicit compilerdefault may wish to specify   -fno-omit-frame-pointer to get the oldbehavior. This improves compatibility with GCC.\n Support for the ARMv8.2-AA32BF16 BFloat16 extension. This includes a newC-level storage-only  __bf16 type, a  BFloat IR type, a  bf16 MVT, andassembly and intrinsics support.\n   The Machine Outliner is now supported for ARM and Thumb2, it is notturned on by default and can be enabled with the   -moutline clang flag.\n Improved Loop Unroll-and-Jam legality checks, allowing it to handle more than two level loop nests\n  Implemented an option to allow loop fusion to work on loops with different constant trip counts\n    Enabled compile and link such that a simple &lt;stdio.h&gt; \u201cHello World\u201d program works with standard headers\n   In llvm-objdump, added support for relocations, improved selection of symbol labels, and added the \u2013symbol-description option\n After consultation through an RFC, the RISC-V backend now accepts patches forproposed instruction set extensions that have not yet been ratified. For theseexperimental extensions, there is no expectation of ongoing support - thecompiler support will continue to change until the specification is finalised.In line with this policy, MC layer and code generation support was added forversion 0.92 of the proposed Bit Manipulation Extension and MC layer supportwas added for version 0.8 of the proposed RISC-V Vector instruction setextension. As these extensions are not yet ratified, compiler support willcontinue to change to match the specifications until they are finalised.\n  If an immediate can be generated using a pair of  addi instructions, thatpair will be selected rather than materialising the immediate into aseparate register with an  lui and  addi pair.\n  addi instructions are now folded into the offset of a load/store instructioneven if the load/store itself has a non-zero offset, when it is safe to doso.\n  The RISC-V backend\u2019s load/store peephole optimisation pass now supportsconstant pools, improving code generation for floating point constants.\n Debug scratch register names  dscratch0 and  dscratch1 are now recognised inaddition to the legacy  dscratch register name.\n   .option pic and  .option nopic are now supported in assembly and  .relocwas extended to support arbitrary relocation types.\n  The calculated expanded size of atomic pseudo operations was fixed, avoiding\u201cfixup value out of range\u201d errors during branch relaxation for some inputs.\n  The correct libcall is now emitted for converting a float/double to a 32-bitsigned or unsigned integer on RV64 targets lacking the F or D extensions.\n Enhanced the assembler parser to allow using  %r0 even in an addressregister context, and to allow specifying registers using plain integernumbers instead of register names everywhere.\n Fixed wrong code generation violating the platform ABI when passinga C++ class (not struct) type having only a single member offloating-point type.\n Fixed wrong code generation when using the  vec_store_len_r or vec_load_len_r intrinsics with an immediate length argument of16 or larger.\n Functions with the probe-stack attribute set to \u201cinline-asm\u201d are now protectedagainst stack clash without the need of a third-party probing function andwith limited impact on performance.\n -x86-enable-old-knl-abi command line switch has been removed. v32i16/v64i8vectors are always passed in ZMM register when avx512f is enabled and avx512bwis disabled.\n Vectors larger than 512 bits with i16 or i8 elements will be passed inmultiple ZMM registers when avx512f is enabled. Previously this requiredavx512bw otherwise they would split into multiple YMM registers. This meansvXi16/vXi8 vectors are consistently treated the same asvXi32/vXi64/vXf64/vXf32 vectors of the same total width.\n    The Speculative Execution Side Effect Suppression pass was added which canbe used to as a last resort mitigation for speculative execution relatedCPU vulnerabilities.\n  Exteded recognition of rotation patterns to handle funnel shift as well,allowing us to remove the existing x86-specific SHLD/SHRD combine.\n The backend default denormal handling mode has been switched to onfor all targets for all compute function types. Frontends wishing toretain the old behavior should explicitly request f32 denormalflushing.\n Moved from an experimental backend to an official backend. AVR support is nowincluded by default in all LLVM builds and releases and is available underthe \u201cavr-unknown-unknown\u201d target triple.\n Programs which don\u2019t have a \u201cmain\u201d function, called \u201creactors\u201d are nowproperly supported, with a new  -mexec-model=reactor flag. Programs whichpreviously used  -Wl,\u2013no-entry to avoid having a main function shouldswitch to this new flag, so that static initialization is properlyperformed.\n __attribute__((visibility(\u201cprotected\u201d))) now evokes a warning, asWebAssembly does not support \u201cprotected\u201d visibility.\n Produce COFF weak external symbols for IR level weak symbols without a comdat(e.g. for  __attribute__((weak)) in C)\n A SelDag-level freeze instruction has landed. It is simply lowered as a copyoperation to MachineIR, but to make it fully correct either IMPLICIT_DEFshould be fixed or the equivalent FREEZE operation should be added toMachineIR.\n  --plugin-opt=whole-program-visibility is added to specify that classes have hidden LTO visibility in LTO and ThinLTO links of source files compiled with   -fwhole-program-vtables. See  LTOVisibility for details.( D71913)\n Added an option (\u2013show-section-sizes) to llvm-dwarfdump to show the sizesof all debug sections within a file.\n llvm-nm now implements the flag   --special-syms and will filter out specialsymbols, i.e. mapping symbols on ARM and AArch64, by default. This matchesthe GNU nm behavior.\n llvm-rc now tolerates -1 as menu item ID, supports the language id optionand allows string table values to be split into multiple string literals", "posttime": "2020-10-13 20:00:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "llvm,\u73b0\u5728", "title": "LLVM 11.0", "title_en": "LLVM 11.0", "transed": 1, "url": "https://releases.llvm.org/11.0.0/docs/ReleaseNotes.html", "via": "", "real_tags": ["llvm", "\u73b0\u5728"]}, {"category": "", "categoryclass": "", "imagename": "b8e6f973b550a673e39c683f4e2797a6.jpg", "infoid": 1028415, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u63a7\u52362019\u5e74\u51a0\u72b6\u75c5\u6bd2\u75c5(\u65b0\u51a0\u80ba\u708e)\u5927\u6d41\u884c\u800c\u91c7\u53d6\u7684\u884c\u52a8\u660e\u663e\u51cf\u5c11\u4e86\u673a\u52a8\u8f66\u6d41\u91cf\uff0c\u6f5c\u5728\u5730\u7f13\u89e3\u4e86\u4f9d\u8d56\u58f0\u97f3\u751f\u5b58\u548c\u7e41\u6b96\u7684\u52a8\u7269\u7684\u542c\u89c9\u538b\u529b\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u6bd4\u8f83\u65e7\u91d1\u5c71\u6e7e\u533a\u5728\u6700\u8fd1\u5168\u5dde\u8303\u56f4\u5185\u5173\u95ed\u4e4b\u524d\u548c\u671f\u95f4\u7684\u97f3\u666f\u548c\u6b4c\u66f2\uff0c\u6765\u8bc4\u4f30\u4e00\u53ea\u666e\u901a\u7684\u9e23\u9e1f\u662f\u5426\u54cd\u5e94\u5730\u5229\u7528\u4e86\u65b0\u817e\u7a7a\u7684\u58f0\u97f3\u7a7a\u95f4\u3002\u6211\u4eec\u663e\u793a\uff0c\u57ce\u5e02\u5730\u533a\u7684\u566a\u97f3\u6c34\u5e73\u5728\u5173\u95ed\u671f\u95f4\u663e\u8457\u964d\u4f4e\uff0c\u8fd9\u662f20\u4e16\u7eaa50\u5e74\u4ee3\u4e2d\u671f\u4ea4\u901a\u7684\u7279\u5f81\u3002\u6211\u4eec\u8fd8\u8868\u660e\uff0c\u9e1f\u7c7b\u7684\u53cd\u5e94\u662f\u4ee5\u8f83\u4f4e\u7684\u632f\u5e45\u4ea7\u751f\u66f4\u9ad8\u6027\u80fd\u7684\u6b4c\u66f2\uff0c\u6709\u6548\u5730\u6700\u5927\u5316\u4ea4\u6d41\u8ddd\u79bb\u548c\u663e\u8457\u6027\u3002\u8fd9\u4e9b\u53d1\u73b0\u8868\u660e\uff0c\u884c\u4e3a\u7279\u5f81\u53ef\u4ee5\u5728\u65b0\u7684\u6709\u5229\u6761\u4ef6\u4e0b\u8fc5\u901f\u6539\u53d8\uff0c\u8868\u660e\u5bf9\u957f\u671f\u5b58\u5728\u7684\u4eba\u4e3a\u538b\u529b(\u5982\u566a\u97f3\u6c61\u67d3)\u5177\u6709\u5185\u5728\u7684\u5f39\u6027\u3002", "note_en": "Actions taken to control the coronavirus disease 2019 (COVID-19) pandemic have conspicuously reduced motor vehicle traffic, potentially alleviating auditory pressures on animals that rely on sound for survival and reproduction. Here we evaluate whether a common songbird responsively exploited newly emptied acoustic space by comparing soundscapes and songs across the San Francisco Bay Area prior to and during the recent statewide shutdown. We show that noise levels in urban areas were dramatically lower during the shutdown, characteristic of traffic in the mid-1950s. We also show that birds responded by producing higher performance songs at lower amplitudes, effectively maximizing communication distance and salience. These findings illustrate that behavioral traits can change rapidly in response to newly favorable conditions, indicating an inherent resilience to long-standing anthropogenic pressures like noise pollution.", "posttime": "2020-10-13 20:00:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6062\u590d,respond,\u8868\u660e", "title": "\u5728COVID19\u5173\u95ed\u671f\u95f4\uff0c\u9e1f\u7c7b\u5bf9\u534a\u4e2a\u4e16\u7eaa\u4ee5\u6765\u7684\u58f0\u666f\u6062\u590d\u505a\u51fa\u53cd\u5e94", "title_en": "Birds respond to a half-century soundscape reversion during the COVID19 shutdown", "transed": 1, "url": "https://science.sciencemag.org/content/early/2020/09/23/science.abd5777", "via": "", "real_tags": ["\u6062\u590d", "respond", "\u8868\u660e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1028414, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u6bcf\u6b21\u4f60\u60f3\u5b66\u4e00\u9053\u65b0\u98df\u8c31\u65f6\uff0c\u4f60\u90fd\u5fc5\u987b\u91cd\u65b0\u5b66\u4e60\u5982\u4f55\u5207\u3001\u5265\u548c\u6405\u62cc\u3002\u5728\u8bb8\u591a\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u4e2d\uff0c\u5f53\u9762\u5bf9\u65b0\u7684\u6311\u6218\u65f6\uff0cAgent\u5f80\u5f80\u4e0d\u5f97\u4e0d\u5b8c\u5168\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\u3002\u7136\u800c\uff0c\u5f88\u660e\u663e\uff0c\u4eba\u4eec\u5b66\u4e60\u7684\u6548\u7387\u6bd4\u8fd9\u66f4\u9ad8\uff1a\u4ed6\u4eec\u53ef\u4ee5\u5c06\u4ee5\u524d\u5b66\u5230\u7684\u80fd\u529b\u7ed3\u5408\u8d77\u6765\u3002\u5c31\u50cf\u6709\u9650\u7684\u8bcd\u5178\u53ef\u4ee5\u91cd\u65b0\u7ec4\u5408\u6210\u610f\u4e49\u8fd1\u4e4e\u65e0\u9650\u7684\u53e5\u5b50\u4e00\u6837\uff0c\u4eba\u4eec\u91cd\u65b0\u8c03\u6574\u7528\u9014\uff0c\u91cd\u65b0\u7ec4\u5408\u4ed6\u4eec\u5df2\u7ecf\u62e5\u6709\u7684\u6280\u80fd\uff0c\u4ee5\u5e94\u5bf9\u65b0\u7684\u6311\u6218\u3002\n\u5728\u81ea\u7136\u754c\u4e2d\uff0c\u5f53\u52a8\u7269\u63a2\u7d22\u5e76\u4e0e\u5176\u73af\u5883\u4e92\u52a8\u4ee5\u6536\u96c6\u98df\u7269\u548c\u5176\u4ed6\u5956\u52b1\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u5b66\u4e60\u3002\u8fd9\u662f\u5f3a\u5316\u5b66\u4e60(RL)\u6355\u6349\u5230\u7684\u8303\u4f8b\uff1a\u4e0e\u73af\u5883\u7684\u76f8\u4e92\u4f5c\u7528\u6839\u636e\u7ed3\u679c\u5956\u52b1(\u6216\u60e9\u7f5a)\u5f3a\u5316\u6216\u6291\u5236\u7279\u5b9a\u7684\u884c\u4e3a\u6a21\u5f0f\u3002\u6700\u8fd1\uff0cRL\u4e0e\u6df1\u5ea6\u5b66\u4e60\u7684\u7ed3\u5408\u5df2\u7ecf\u5e26\u6765\u4e86\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u7ed3\u679c\uff0c\u6bd4\u5982\u53ef\u4ee5\u5b66\u4e60\u5982\u4f55\u73a9\u68cb\u76d8\u6e38\u620f\u7684\u4ee3\u7406\uff0c\u5168\u7cfb\u5217\u7684\u96c5\u8fbe\u5229\u6e38\u620f\uff0c\u4ee5\u53ca\u66f4\u73b0\u4ee3\u3001\u66f4\u56f0\u96be\u7684\u89c6\u9891\u6e38\u620f\uff0c\u5982Dota\u548cStarCraft II\u3002\nRL\u7684\u4e00\u4e2a\u4e3b\u8981\u9650\u5236\u662f\u76ee\u524d\u7684\u65b9\u6cd5\u9700\u8981\u5927\u91cf\u7684\u57f9\u8bad\u7ecf\u9a8c\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u5b66\u4e60\u5982\u4f55\u73a9\u5355\u4e2aAtari\u6e38\u620f\uff0cRL\u4ee3\u7406\u901a\u5e38\u6d88\u8017\u5bf9\u5e94\u4e8e\u51e0\u5468\u4e0d\u95f4\u65ad\u6e38\u620f\u7684\u6570\u636e\u91cf\u3002\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u548c\u54c8\u4f5b\u5927\u5b66\u7684\u7814\u7a76\u4eba\u5458\u9886\u5bfc\u7684\u4e00\u9879\u7814\u7a76\u8868\u660e\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4eba\u7c7b\u80fd\u591f\u5728\u77ed\u77ed15\u5206\u949f\u7684\u6e38\u620f\u4e2d\u8fbe\u5230\u540c\u6837\u7684\u8868\u73b0\u6c34\u5e73\u3002\n\u8fd9\u79cd\u5dee\u5f02\u7684\u4e00\u4e2a\u53ef\u80fd\u539f\u56e0\u662f\uff0c\u4e0e\u4eba\u7c7b\u4e0d\u540c\uff0cRL\u4ee3\u7406\u901a\u5e38\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\u4e00\u9879\u65b0\u4efb\u52a1\u3002\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684\u4ee3\u7406\u5229\u7528\u5728\u4ee5\u524d\u7684\u4efb\u52a1\u4e2d\u83b7\u5f97\u7684\u77e5\u8bc6\u6765\u66f4\u5feb\u5730\u5b66\u4e60\u65b0\u4efb\u52a1\uff0c\u5c31\u50cf\u53a8\u5e08\u6bd4\u4ee5\u524d\u4ece\u672a\u51c6\u5907\u8fc7\u83dc\u80b4\u7684\u4eba\u66f4\u5bb9\u6613\u5b66\u4e60\u65b0\u98df\u8c31\u4e00\u6837\u3002\u5728\u6700\u8fd1\u53d1\u8868\u5728\u201c\u7f8e\u56fd\u56fd\u5bb6\u79d1\u5b66\u9662\u9662\u520a\u201d(PNAS)\u4e0a\u7684\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u4e00\u4e2a\u65e8\u5728\u8d4b\u4e88\u6211\u4eec\u7684\u7814\u7a76\u4eba\u5458\u8fd9\u79cd\u80fd\u529b\u7684\u6846\u67b6\u3002\n\u4e3a\u4e86\u8bf4\u660e\u6211\u4eec\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u4e00\u4e2a\u65e5\u5e38\u6d3b\u52a8\u7684\u4f8b\u5b50\uff1a\u901a\u52e4\u4e0a\u73ed\u3002\u60f3\u8c61\u4e00\u4e0b\u4e0b\u9762\u7684\u573a\u666f\uff1a\u5ea7\u5e2d\u5fc5\u987b\u6bcf\u5929\u4ece\u5bb6\u91cc\u901a\u52e4\u5230\u529e\u516c\u5ba4\uff0c\u800c\u4e14\u5728\u8def\u4e0a\u603b\u80fd\u559d\u5230\u4e00\u676f\u5496\u5561\u3002\u5728\u4ee3\u7406\u4eba\u7684\u5bb6\u548c\u529e\u516c\u5ba4\u4e4b\u95f4\u6709\u4e24\u5bb6\u5496\u5561\u9986\uff1a\u4e00\u5bb6\u5496\u5561\u5f88\u597d\uff0c\u4f46\u8def\u7a0b\u8f83\u957f\uff0c\u53e6\u4e00\u5bb6\u5496\u5561\u4e0d\u9519\uff0c\u4f46\u901a\u52e4\u65f6\u95f4\u8f83\u77ed(\u56fe1)\u3002\u6839\u636e\u4ee3\u7406\u5bf9\u5496\u5561\u8d28\u91cf\u7684\u91cd\u89c6\u7a0b\u5ea6\u4e0e\u7ed9\u5b9a\u65e5\u671f\u7684\u5306\u5fd9\u7a0b\u5ea6\uff0c\u5b83\u53ef\u80fd\u4f1a\u9009\u62e9\u4e24\u6761\u8def\u7ebf\u4e2d\u7684\u4e00\u6761(\u56fe1\u6240\u793a\u5730\u56fe\u4e0a\u7684\u9ec4\u8272\u548c\u84dd\u8272\u8def\u5f84)\u3002\n\u4f20\u7edf\u4e0a\uff0cRL\u7b97\u6cd5\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a\u57fa\u4e8e\u6a21\u578b\u7684\u4ee3\u7406\u548c\u65e0\u6a21\u578b\u4ee3\u7406(\u56fe2\u548c\u56fe3)\u3002\u57fa\u4e8e\u6a21\u578b\u7684\u4ee3\u7406(\u56fe2)\u6784\u5efa\u4e86\u73af\u5883\u7684\u8bb8\u591a\u65b9\u9762\u7684\u8868\u793a\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u5ea7\u5e2d\u53ef\u80fd\u77e5\u9053\u4e0d\u540c\u4f4d\u7f6e\u662f\u5982\u4f55\u8fde\u63a5\u7684\uff0c\u6bcf\u4e2a\u5496\u5561\u9986\u7684\u5496\u5561\u8d28\u91cf\uff0c\u4ee5\u53ca\u4efb\u4f55\u5176\u4ed6\u88ab\u8ba4\u4e3a\u76f8\u5173\u7684\u4fe1\u606f\u3002\u65e0\u6a21\u578b\u4ee3\u7406(\u56fe3)\u5bf9\u5176\u73af\u5883\u7684\u8868\u793a\u8981\u7d27\u51d1\u5f97\u591a\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u57fa\u4e8e\u4ef7\u503c\u7684\u975e\u6a21\u578b\u4ee3\u7406\u5c06\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e0e\u6bcf\u6761\u53ef\u80fd\u7684\u79bb\u5bb6\u8def\u7ebf\u76f8\u5173\u8054\uff1b\u8fd9\u662f\u6bcf\u6761\u8def\u7ebf\u7684\u671f\u671b\u503c\uff0c\u53cd\u6620\u4e86\u5496\u5561\u8d28\u91cf\u4e0e\u901a\u52e4\u957f\u5ea6\u4e4b\u95f4\u7684\u5177\u4f53\u6743\u8861\u3002\u4ee5\u56fe1\u6240\u793a\u7684\u84dd\u8272\u8def\u5f84\u4e3a\u4f8b\u3002\u5047\u8bbe\u8fd9\u6761\u8def\u5f84\u7684\u957f\u5ea6\u4e3a4\uff0c\u4ee3\u7406\u6cbf\u7740\u5b83\u83b7\u5f97\u7684\u5496\u5561\u88ab\u8bc4\u4e3a3\u661f\u3002\u5982\u679c\u5ea7\u5e2d\u5173\u5fc3\u901a\u52e4\u8ddd\u79bb\u6bd4\u5173\u5fc3\u5496\u5561\u8d28\u91cf\u591a50%\uff0c\u5219\u6b64\u8def\u5f84\u7684\u503c\u5c06\u4e3a1(-1.5 x 4)+(1 X 3)=-3(\u6211\u4eec\u4f7f\u7528\u4e0e\u8ddd\u79bb\u76f8\u5173\u7684\u8d1f\u6743\u91cd\u6765\u8868\u793a\u4e0d\u5e0c\u671b\u901a\u52e4\u65f6\u95f4\u66f4\u957f)\u3002\n\u6211\u4eec\u53ef\u4ee5\u5c06\u5496\u5561\u8d28\u91cf\u76f8\u5bf9\u4e8e\u901a\u52e4\u8ddd\u79bb\u7684\u76f8\u5bf9\u6743\u91cd\u89e3\u91ca\u4e3a\u4ee3\u7406\u4eba\u7684\u504f\u597d\u3002\u5bf9\u4e8e\u4efb\u4f55\u56fa\u5b9a\u7684\u9996\u9009\u9879\u96c6\uff0c\u65e0\u6a21\u578b\u4ee3\u7406\u548c\u57fa\u4e8e\u6a21\u578b\u4ee3\u7406\u5c06\u9009\u62e9\u76f8\u540c\u7684\u8def\u7531\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6700\u7ec8\u7ed3\u679c\u662f\u76f8\u540c\u7684\uff0c\u4e3a\u4ec0\u4e48\u8981\u6709\u66f4\u590d\u6742\u7684\u4e16\u754c\u8868\u793a\uff0c\u5c31\u50cf\u57fa\u4e8e\u6a21\u578b\u7684\u4ee3\u7406\u6240\u4f7f\u7528\u7684\u90a3\u6837\uff1f\u5982\u679c\u4ee3\u7406\u4eba\u6700\u7ec8\u559d\u7684\u662f\u540c\u4e00\u676f\u5496\u5561\uff0c\u4e3a\u4ec0\u4e48\u8981\u4e86\u89e3\u8fd9\u4e48\u591a\u5173\u4e8e\u73af\u5883\u7684\u77e5\u8bc6\u5462\uff1f\n\u504f\u597d\u6bcf\u5929\u90fd\u4f1a\u6539\u53d8\uff1a\u5ea7\u5e2d\u5728\u8ba1\u5212\u53bb\u529e\u516c\u5ba4\u7684\u8def\u7ebf\u65f6\uff0c\u53ef\u80fd\u4f1a\u8003\u8651\u5b83\u6709\u591a\u997f\uff0c\u6216\u8005\u5f00\u4f1a\u662f\u5426\u8fdf\u5230\u3002\u65e0\u6a21\u578b\u4ee3\u7406\u5904\u7406\u8fd9\u4e00\u95ee\u9898\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5b66\u4e60\u4e0e\u6bcf\u4e00\u7ec4\u53ef\u80fd\u7684\u9996\u9009\u9879\u76f8\u5173\u8054\u7684\u6700\u4f73\u8def\u7ebf\u3002\u8fd9\u5e76\u4e0d\u7406\u60f3\uff0c\u56e0\u4e3a\u5b66\u4e60\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u504f\u597d\u7ec4\u5408\u90fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u5982\u679c\u6709\u65e0\u9650\u591a\u7684\u504f\u597d\uff0c\u4e5f\u4e0d\u53ef\u80fd\u5b66\u4e60\u5230\u4e0e\u6bcf\u4e00\u7ec4\u53ef\u80fd\u7684\u504f\u597d\u76f8\u5173\u8054\u7684\u8def\u7ebf\u3002\n\u76f8\u53cd\uff0c\u57fa\u4e8e\u6a21\u578b\u7684\u4ee3\u7406\u53ef\u4ee5\u9002\u5e94\u4efb\u4f55\u4e00\u7ec4\u504f\u597d\uff0c\u800c\u65e0\u9700\u5b66\u4e60\uff0c\u53ea\u9700\u60f3\u8c61\u6240\u6709\u53ef\u80fd\u7684\u8def\u7ebf\uff0c\u5e76\u8be2\u95ee\u5b83\u4eec\u5c06\u5982\u4f55\u5f88\u597d\u5730\u5b9e\u73b0\u5176\u5f53\u524d\u7684\u601d\u7ef4\u6a21\u5f0f\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u6709\u7f3a\u70b9\u3002\u9996\u5148\uff0c\u201c\u5fc3\u667a\u201d\u5730\u751f\u6210\u548c\u8bc4\u4f30\u6240\u6709\u53ef\u80fd\u7684\u8f68\u8ff9\u53ef\u80fd\u9700\u8981\u5927\u91cf\u7684\u8ba1\u7b97\u3002\u5176\u6b21\uff0c\u5728\u590d\u6742\u7684\u73af\u5883\u4e2d\u6784\u5efa\u6574\u4e2a\u4e16\u754c\u7684\u6a21\u578b\u53ef\u80fd\u975e\u5e38\u56f0\u96be\u3002\n\u65e0\u6a21\u578b\u4ee3\u7406\u5b66\u4e60\u5f97\u66f4\u5feb\uff0c\u4f46\u5f88\u96be\u6539\u53d8\u3002\u57fa\u4e8e\u6a21\u578b\u7684\u4ee3\u7406\u5f88\u7075\u6d3b\uff0c\u4f46\u5b66\u4e60\u8d77\u6765\u53ef\u80fd\u5f88\u6162\u3002\u6709\u4e2d\u95f4\u89e3\u51b3\u65b9\u6848\u5417\uff1f\n\u884c\u4e3a\u79d1\u5b66\u548c\u795e\u7ecf\u79d1\u5b66\u6700\u8fd1\u7684\u4e00\u9879\u7814\u7a76\u8868\u660e\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4eba\u7c7b\u548c\u52a8\u7269\u6839\u636e\u7b97\u6cd5\u6a21\u578b\u505a\u51fa\u51b3\u5b9a\uff0c\u8be5\u7b97\u6cd5\u6a21\u578b\u662f\u65e0\u6a21\u578b\u65b9\u6cd5\u548c\u57fa\u4e8e\u6a21\u578b\u7684\u65b9\u6cd5(\u8fd9\u91cc\u548c\u8fd9\u91cc)\u4e4b\u95f4\u7684\u6298\u8877\u3002\u5047\u8bbe\u662f\uff0c\u5c31\u50cf\u6ca1\u6709\u6a21\u578b\u7684\u4ee3\u7406\u4eba\u4e00\u6837\uff0c\u4eba\u7c7b\u4e5f\u4ee5\u6570\u5b57\u7684\u5f62\u5f0f\u8ba1\u7b97\u66ff\u4ee3\u7b56\u7565\u7684\u4ef7\u503c\u3002\u4f46\u662f\uff0c\u4eba\u7c7b\u4e0d\u662f\u603b\u7ed3\u4e00\u4e2a\u5355\u4e00\u7684\u6570\u91cf\uff0c\u800c\u662f\u603b\u7ed3\u63cf\u8ff0\u4ed6\u4eec\u5468\u56f4\u4e16\u754c\u7684\u8bb8\u591a\u4e0d\u540c\u7684\u6570\u91cf\uff0c\u8fd9\u8ba9\u4eba\u60f3\u8d77\u57fa\u4e8e\u6a21\u578b\u7684\u4ee3\u7406\u4eba\u3002\n\u8d4b\u4e88RL\u7279\u5de5\u540c\u6837\u7684\u80fd\u529b\u662f\u53ef\u80fd\u7684\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8def\u7ebf\uff0c\u8fd9\u6837\u7684\u4ee3\u7406\u5c06\u6709\u4e00\u4e2a\u8868\u793a\u9884\u671f\u5496\u5561\u8d28\u91cf\u7684\u6570\u5b57\u548c\u4e00\u4e2a\u8868\u793a\u5230\u529e\u516c\u5ba4\u8ddd\u79bb\u7684\u6570\u5b57\u3002\u5b83\u4e5f\u53ef\u80fd\u6709\u4e0e\u4ee3\u7406\u5546\u4e0d\u662f\u6545\u610f\u8bd5\u56fe\u4f18\u5316\u7684\u4e1c\u897f\u76f8\u5173\u7684\u6570\u5b57\uff0c\u4f46\u4ecd\u53ef\u4f9b\u5176\u5c06\u6765\u53c2\u8003(\u4f8b\u5982\uff0c\u6bcf\u5bb6\u5496\u5561\u9986\u7684\u98df\u7269\u8d28\u91cf)\u3002\u4ee3\u7406\u5173\u5fc3\u548c\u8ddf\u8e2a\u7684\u4e16\u754c\u65b9\u9762\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u7279\u5f81\u201d\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u8fd9\u79cd\u5bf9\u4e16\u754c\u7684\u8868\u793a\u88ab\u79f0\u4e3a\u540e\u7ee7\u7279\u5f81(\u4ee5\u524d\u5728\u5176\u6700\u521d\u7684\u5316\u8eab\u4e2d\u88ab\u79f0\u4e3a\u201c\u540e\u7ee7\u8868\u793a\u201d)\u3002\n\u540e\u7eed\u7279\u5f81\u53ef\u4ee5\u770b\u4f5c\u662f\u65e0\u6a21\u578b\u8868\u793a\u548c\u57fa\u4e8e\u6a21\u578b\u8868\u793a\u4e4b\u95f4\u7684\u4e2d\u95f4\u5730\u5e26\u3002\u4e0e\u540e\u8005\u4e00\u6837\uff0c\u540e\u7eed\u529f\u80fd\u603b\u7ed3\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u6570\u91cf\uff0c\u6355\u6349\u5230\u4e86\u8d85\u8d8a\u5355\u4e00\u4ef7\u503c\u7684\u4e16\u754c\u3002\u7136\u800c\uff0c\u5c31\u50cf\u5728\u65e0\u6a21\u578b\u8868\u793a\u4e2d\u4e00\u6837\uff0c\u4ee3\u7406\u8ddf\u8e2a\u7684\u91cf\u662f\u603b\u7ed3\u5176\u6240\u5173\u5fc3\u7684\u7279\u6027\u7684\u7b80\u5355\u7edf\u8ba1\u6570\u636e\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u540e\u7eed\u529f\u80fd\u5c31\u50cf\u662f\u65e0\u6a21\u578b\u4ee3\u7406\u7684\u201c\u89e3\u5305\u201d\u7248\u672c\u3002\u56fe4\u8bf4\u660e\u4e86\u4f7f\u7528\u540e\u7eed\u529f\u80fd\u7684\u4ee3\u7406\u5c06\u5982\u4f55\u770b\u5230\u6211\u4eec\u7684\u793a\u4f8b\u73af\u5883\u3002\n\u540e\u7eed\u7279\u5f81\u662f\u4e00\u79cd\u6709\u7528\u7684\u8868\u793a\uff0c\u56e0\u4e3a\u5b83\u4eec\u5141\u8bb8\u5728\u4e0d\u540c\u7684\u9996\u9009\u9879\u96c6\u4e0b\u8bc4\u4f30\u8def\u7531\u3002\u8ba9\u6211\u4eec\u518d\u6b21\u4f7f\u7528\u56fe1\u4e2d\u7684\u84dd\u8272\u8def\u7531\u4f5c\u4e3a\u793a\u4f8b\u3002\u4f7f\u7528\u540e\u7eed\u529f\u80fd\uff0c\u4ee3\u7406\u5c06\u6709\u4e09\u4e2a\u6570\u5b57\u4e0e\u6b64\u8def\u5f84\u76f8\u5173\u8054\uff1a\u5176\u957f\u5ea6(4)\u3001\u5496\u5561\u8d28\u91cf(3)\u548c\u98df\u7269\u8d28\u91cf(5)\u3002\u5982\u679c\u4ee3\u7406\u5546\u5df2\u7ecf\u5403\u8fc7\u65e9\u9910\uff0c\u5b83\u53ef\u80fd\u4e0d\u4f1a\u592a\u5728\u610f\u98df\u7269\uff1b\u800c\u4e14\uff0c\u5982\u679c\u8fdf\u5230\uff0c\u5b83\u53ef\u80fd\u66f4\u5173\u5fc3\u901a\u52e4\u8ddd\u79bb\uff0c\u800c\u4e0d\u662f\u5496\u5561\u7684\u8d28\u91cf--\u6bd4\u5982\u8bf4\uff0c\u50cf\u4ee5\u524d\u4e00\u6837\u591a50%\u3002\u5728\u6b64\u573a\u666f\u4e2d\uff0c\u84dd\u8272\u8def\u5f84\u7684\u503c\u5c06\u662f(-1.5x4)+(1x3)+(0x5)=-3\uff0c\u5982\u4e0a\u9762\u7ed9\u51fa\u7684\u793a\u4f8b\u6240\u793a\u3002\u4f46\u73b0\u5728\uff0c\u5728\u4ee3\u7406\u997f\u4e86\u7684\u4e00\u5929\uff0c\u56e0\u6b64\u5b83\u50cf\u5173\u5fc3\u5496\u5561\u4e00\u6837\u5173\u5fc3\u98df\u7269\uff0c\u5b83\u53ef\u4ee5\u7acb\u5373\u5c06\u6b64\u8def\u7ebf\u7684\u503c\u66f4\u65b0\u4e3a(-1.5x4)+(1x3)+(1x5)=2\u3002\u4f7f\u7528\u76f8\u540c\u7684\u7b56\u7565\uff0c\u4ee3\u7406\u53ef\u4ee5\u6839\u636e\u4efb\u4f55\u4e00\u7ec4\u504f\u597d\u6765\u8bc4\u4f30\u4efb\u4f55\u8def\u7ebf\u3002\n\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u4ee3\u7406\u5728\u8def\u7531\u4e4b\u95f4\u8fdb\u884c\u9009\u62e9\u3002\u66f4\u5e7f\u6cdb\u5730\u8bf4\uff0c\u4ee3\u7406\u5c06\u641c\u7d22\u4e00\u9879\u7b56\u7565\uff1a\u5728\u6bcf\u79cd\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u90fd\u8981\u505a\u4ec0\u4e48\u7684\u89c4\u5b9a\u3002\u7b56\u7565\u548c\u8def\u7ebf\u5bc6\u5207\u76f8\u5173\uff1a\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u5982\u679c\u7b56\u7565\u9009\u62e9\u4ece\u5bb6\u91cc\u8d70\u5230\u5496\u5561\u9986A\u7684\u8def\uff0c\u7136\u540e\u9009\u62e9\u4ece\u5496\u5561\u9986A\u5230\u529e\u516c\u5ba4\u7684\u8def\uff0c\u5219\u4f1a\u7a7f\u8fc7\u84dd\u8272\u8def\u5f84\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4e92\u6362\u5730\u8c08\u8bba\u7b56\u7565\u548c\u8def\u7531(\u5982\u679c\u73af\u5883\u4e2d\u5b58\u5728\u4e00\u4e9b\u968f\u673a\u6027\uff0c\u8fd9\u5c31\u4e0d\u662f\u771f\u7684\u4e86\uff0c\u4f46\u6211\u4eec\u5c06\u628a\u8fd9\u4e2a\u7ec6\u8282\u653e\u5728\u4e00\u8fb9)\u3002\u6211\u4eec\u8ba8\u8bba\u4e86\u540e\u7eed\u529f\u80fd\u5982\u4f55\u5141\u8bb8\u5728\u4e0d\u540c\u7684\u504f\u597d\u96c6\u4e0b\u8bc4\u4f30\u8def\u7531(\u6216\u7b56\u7565)\u3002\u6211\u4eec\u79f0\u8fd9\u4e00\u8fc7\u7a0b\u4e3a\u5e7f\u4e49\u653f\u7b56\u8bc4\u4f30\uff0c\u7b80\u79f0GPE\u3002\n\u4e3a\u4ec0\u4e48GPE\u6709\u7528\uff1f\u5047\u8bbe\u4ee3\u7406\u6709\u4e00\u672c\u7b56\u7565\u5b57\u5178(\u4f8b\u5982\uff0c\u5230\u529e\u516c\u5ba4\u7684\u5df2\u77e5\u8def\u7531)\u3002\u7ed9\u5b9a\u4e00\u7ec4\u9996\u9009\u9879\uff0c\u4ee3\u7406\u53ef\u4ee5\u4f7f\u7528GPE\u7acb\u5373\u8bc4\u4f30\u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u7b56\u7565\u5728\u8fd9\u4e9b\u9996\u9009\u9879\u4e0b\u7684\u6267\u884c\u60c5\u51b5\u3002\u73b0\u5728\u771f\u6b63\u6709\u8da3\u7684\u90e8\u5206\u662f\uff1a\u57fa\u4e8e\u5bf9\u5df2\u77e5\u7b56\u7565\u7684\u5feb\u901f\u8bc4\u4f30\uff0c\u4ee3\u7406\u53ef\u4ee5\u52a8\u6001\u521b\u5efa\u5168\u65b0\u7684\u7b56\u7565\u3002\u5b83\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff1a\u6bcf\u6b21\u4ee3\u7406\u5fc5\u987b\u505a\u51fa\u51b3\u5b9a\u65f6\uff0c\u5b83\u90fd\u4f1a\u95ee\u4ee5\u4e0b\u95ee\u9898\uff1a\u201c\u5982\u679c\u6211\u505a\u51fa\u8fd9\u4e2a\u51b3\u5b9a\uff0c\u7136\u540e\u9075\u5faa\u5177\u6709\u6700\u5927\u503c\u7684\u7b56\u7565\uff0c\u90a3\u4e48\u54ea\u4e2a\u51b3\u5b9a\u4f1a\u5bfc\u81f4\u6700\u5927\u7684\u6574\u4f53\u503c\uff1f\u201d\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5982\u679c\u4ee3\u7406\u9009\u62e9\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\u5bfc\u81f4\u6700\u5927\u603b\u4f53\u503c\u7684\u51b3\u7b56\uff0c\u5219\u6700\u7ec8\u5f97\u5230\u7684\u7b56\u7565\u901a\u5e38\u6bd4\u7528\u4e8e\u521b\u5efa\u5b83\u7684\u5355\u4e2a\u7b56\u7565\u66f4\u597d\u3002\n\u8fd9\u79cd\u5c06\u4e00\u7cfb\u5217\u653f\u7b56\u201c\u7f1d\u5408\u5728\u4e00\u8d77\u201d\u4ee5\u521b\u9020\u66f4\u597d\u653f\u7b56\u7684\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u201c\u4e00\u822c\u6027\u653f\u7b56\u6539\u8fdb\u201d\uff0c\u7b80\u79f0GPI\u3002\u56fe5\u4f7f\u7528\u6211\u4eec\u7684\u8fd0\u884c\u793a\u4f8b\u8bf4\u660e\u4e86GPI\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\u901a\u8fc7GPI\u521b\u5efa\u7684\u7b56\u7565\u7684\u6027\u80fd\u5c06\u53d6\u51b3\u4e8e\u4ee3\u7406\u77e5\u9053\u591a\u5c11\u7b56\u7565\u3002\u4f8b\u5982\uff0c\u5728\u6211\u4eec\u7684\u8fd0\u884c\u793a\u4f8b\u4e2d\uff0c\u53ea\u8981\u4ee3\u7406\u77e5\u9053\u84dd\u8272\u548c\u9ec4\u8272\u7684\u8def\u5f84\uff0c\u5b83\u5c31\u4f1a\u6839\u636e\u5496\u5561\u8d28\u91cf\u548c\u901a\u52e4\u957f\u5ea6\u7684\u4efb\u4f55\u504f\u597d\u627e\u5230\u6700\u4f73\u8def\u5f84\u3002\u4f46GPI\u653f\u7b56\u5e76\u4e0d\u603b\u662f\u80fd\u627e\u5230\u6700\u4f73\u8def\u7ebf\u3002\u5728\u56fe1\u4e2d\uff0c\u5982\u679c\u4ee3\u7406\u4e0d\u77e5\u9053\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fde\u63a5\u5b83\u4eec\u7684\u7b56\u7565(\u5982\u56fe\u4e2d\u7684\u6a59\u8272\u8def\u7531)\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u8bbf\u95ee\u5496\u5561\u9986A\uff0c\u7136\u540e\u8bbf\u95ee\u5496\u5561\u9986B\u3002\n\u4e3a\u4e86\u8bf4\u660eGPE\u548cGPI\u7684\u597d\u5904\uff0c\u6211\u4eec\u73b0\u5728\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u6211\u4eec\u6700\u8fd1\u53d1\u8868\u7684\u4e00\u4e2a\u5b9e\u9a8c(\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8bba\u6587)\u3002\u8fd9\u4e2a\u5b9e\u9a8c\u4f7f\u7528\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u73af\u5883\uff0c\u5b83\u4ee5\u62bd\u8c61\u7684\u65b9\u5f0f\u8868\u793a\u4e86\u6211\u4eec\u7684\u65b9\u6cd5\u53ef\u4ee5\u6709\u7528\u7684\u95ee\u9898\u7c7b\u578b\u3002\u5982\u56fe6\u6240\u793a\uff0c\u73af\u5883\u662f\u4e00\u4e2a10x10\u7f51\u683c\uff0c\u5176\u4e2d\u5206\u5e03\u774010\u4e2a\u5bf9\u8c61\u3002\u4ee3\u7406\u53ea\u6709\u5728\u6361\u5230\u4e00\u4e2a\u5bf9\u8c61\u65f6\u624d\u4f1a\u83b7\u5f97\u975e\u96f6\u5956\u52b1\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f1a\u5728\u968f\u673a\u4f4d\u7f6e\u5f39\u51fa\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002\u4e0e\u5bf9\u8c61\u76f8\u5173\u8054\u7684\u5956\u52b1\u53d6\u51b3\u4e8e\u5176\u7c7b\u578b\u3002\u5bf9\u8c61\u7c7b\u578b\u65e8\u5728\u8868\u793a\u5177\u4f53\u6216\u62bd\u8c61\u7684\u6982\u5ff5\uff1b\u4e3a\u4e86\u4e0e\u6211\u4eec\u7684\u8fd0\u884c\u793a\u4f8b\u76f8\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u8003\u8651\u6bcf\u4e2a\u5bf9\u8c61\u8981\u4e48\u662f\u201c\u5496\u5561\u201d\uff0c\u8981\u4e48\u662f\u201c\u98df\u7269\u201d(\u8fd9\u4e9b\u662f\u4ee3\u7406\u8ddf\u8e2a\u7684\u7279\u6027)\u3002\n\u663e\u7136\uff0c\u5bf9\u4e8e\u4ee3\u7406\u5546\u6765\u8bf4\uff0c\u6700\u597d\u7684\u7b56\u7565\u53d6\u51b3\u4e8e\u5b83\u76ee\u524d\u5bf9\u5496\u5561\u6216\u98df\u7269\u7684\u504f\u597d\u3002\u4f8b\u5982\uff0c\u5728\u56fe6\u4e2d\uff0c\u53ea\u5173\u5fc3\u5496\u5561\u7684\u4ee3\u7406\u53ef\u80fd\u4f1a\u6cbf\u7740\u7ea2\u8272\u7684\u8def\u5f84\u524d\u8fdb\uff0c\u800c\u4e13\u95e8\u5173\u6ce8\u98df\u7269\u7684\u4ee3\u7406\u53ef\u80fd\u4f1a\u6cbf\u7740\u84dd\u8272\u7684\u8def\u5f84\u524d\u8fdb\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\u4e2d\u95f4\u60c5\u51b5\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7406\u4eba\u60f3\u8981\u4e0d\u540c\u91cd\u91cf\u7684\u5496\u5561\u548c\u98df\u7269\uff0c\u5305\u62ec\u4ee3\u7406\u4eba\u60f3\u8981\u907f\u514d\u5176\u4e2d\u4e00\u79cd\u91cd\u91cf\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4ee3\u7406\u60f3\u8981\u5496\u5561\uff0c\u4f46\u771f\u7684\u4e0d\u60f3\u8981\u98df\u7269\uff0c\u56fe6\u4e2d\u7684\u7070\u8272\u8def\u5f84\u53ef\u80fd\u6bd4\u7ea2\u8272\u8def\u5f84\u66f4\u597d\u3002\n\u8fd9\u4e2a\u95ee\u9898\u7684\u6311\u6218\u662f\u5feb\u901f\u9002\u5e94\u4e00\u7ec4\u65b0\u7684\u504f\u597d(\u6216\u201c\u4efb\u52a1\u201d)\u3002\u5728\u6211\u4eec\u7684\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528GPE\u548cGPI\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u7684\u4ee3\u7406\u4e86\u89e3\u4e86\u4e24\u6761\u7b56\u7565\uff1a\u4e00\u6761\u662f\u5bfb\u627e\u5496\u5561\uff0c\u53e6\u4e00\u6761\u662f\u5bfb\u627e\u98df\u7269\u3002\u7136\u540e\uff0c\u6211\u4eec\u6d4b\u8bd5\u7531GPE\u548cGPI\u8ba1\u7b97\u7684\u7b56\u7565\u5728\u4e0e\u4e0d\u540c\u9996\u9009\u9879\u76f8\u5173\u8054\u7684\u4efb\u52a1\u4e0a\u7684\u6267\u884c\u60c5\u51b5\u3002\u5728\u56fe7\u4e2d\uff0c\u6211\u4eec\u5c06\u6211\u4eec\u7684\u65b9\u6cd5\u4e0e\u4efb\u52a1\u4e2d\u7684\u65e0\u6a21\u578b\u4ee3\u7406\u8fdb\u884c\u4e86\u6bd4\u8f83\uff0c\u8be5\u4efb\u52a1\u7684\u76ee\u6807\u662f\u5728\u907f\u514d\u98df\u7269\u7684\u540c\u65f6\u5bfb\u627e\u5496\u5561\u3002\u89c2\u5bdf\u4f7f\u7528GPE\u548cGPI\u7684\u4ee3\u7406\u5982\u4f55\u5373\u65f6\u5408\u6210\u5408\u7406\u7684\u7b56\u7565\uff0c\u5373\u4f7f\u5b83\u4ece\u672a\u5b66\u4e60\u5982\u4f55\u6545\u610f\u907f\u5f00\u5bf9\u8c61\u3002\u5f53\u7136\uff0c\u7531GPE\u548cGPI\u8ba1\u7b97\u7684\u7b56\u7565\u53ef\u4ee5\u7528\u4f5c\u521d\u59cb\u89e3\u51b3\u65b9\u6848\uff0c\u7a0d\u540e\u901a\u8fc7\u5b66\u4e60\u8fdb\u884c\u6539\u8fdb\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5c06\u4e0e\u65e0\u6a21\u578b\u4ee3\u7406\u7684\u6700\u7ec8\u6027\u80fd\u76f8\u5339\u914d\uff0c\u4f46\u53ef\u80fd\u4f1a\u66f4\u5feb\u5730\u5b9e\u73b0\u3002\n\u56fe7\u663e\u793a\u4e86GPE\u548cGPI\u5728\u4e00\u4e2a\u7279\u5b9a\u4efb\u52a1\u4e0a\u7684\u6027\u80fd\u3002\u6211\u4eec\u8fd8\u5728\u8bb8\u591a\u5176\u4ed6\u4efb\u52a1\u4e2d\u6d4b\u8bd5\u4e86\u540c\u4e00\u4ee3\u7406\u3002\u56fe8\u663e\u793a\u4e86\u5f53\u6211\u4eec\u6539\u53d8\u5496\u5561\u548c\u98df\u7269\u7684\u76f8\u5bf9\u91cd\u8981\u6027\u65f6\uff0c\u65e0\u6a21\u578b\u4ee3\u7406\u548cGPE-GPI\u4ee3\u7406\u7684\u6027\u80fd\u53d1\u751f\u4e86\u4ec0\u4e48\u53d8\u5316\u3002\u8bf7\u6ce8\u610f\uff0c\u5c3d\u7ba1\u65e0\u6a21\u578b\u4ee3\u7406\u5fc5\u987b\u4ece\u5934\u5f00\u59cb\u5206\u522b\u5b66\u4e60\u6bcf\u4e2a\u4efb\u52a1\uff0c\u4f46GPE-GPI\u4ee3\u7406\u53ea\u5b66\u4e60\u4e24\u4e2a\u7b56\u7565\uff0c\u7136\u540e\u5feb\u901f\u9002\u5e94\u6240\u6709\u4efb\u52a1\u3002\n\u4e0a\u9762\u7684\u5b9e\u9a8c\u4f7f\u7528\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u73af\u5883\uff0c\u65e8\u5728\u5c55\u793aGPE\u548cGPI\u6240\u9700\u7684\u7279\u6027\uff0c\u800c\u6ca1\u6709\u4e0d\u5fc5\u8981\u7684\u6df7\u6742\u56e0\u7d20\u3002\u4f46GPE\u548cGPI\u4e5f\u5df2\u7ecf\u89c4\u6a21\u5316\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u5728\u4ee5\u524d\u7684\u8bba\u6587(\u8fd9\u91cc\u548c\u8fd9\u91cc)\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5f53\u6211\u4eec\u7528\u4e09\u7ef4\u73af\u5883\u53d6\u4ee3\u7f51\u683c\u4e16\u754c\u65f6\uff0c\u540c\u6837\u7684\u7b56\u7565\u4e5f\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u5728\u4e09\u7ef4\u73af\u5883\u4e2d\uff0c\u4ee3\u7406\u4ece\u7b2c\u4e00\u4eba\u79f0\u7684\u89d2\u5ea6\u63a5\u6536\u89c2\u5bdf(\u53c2\u89c1\u8fd9\u91cc\u548c\u8fd9\u91cc\u7684\u8bf4\u660e\u6027\u89c6\u9891)\u3002\u6211\u4eec\u8fd8\u4f7f\u7528GPE\u548cGPI\u6765\u5141\u8bb8\u56db\u6761\u817f\u7684\u6a21\u62df\u673a\u5668\u4eba\u5728\u5b66\u4e60\u4e86\u5982\u4f55\u53ea\u6cbf\u7740\u4e09\u4e2a\u65b9\u5411\u5bfc\u822a\u4e4b\u540e\uff0c\u6cbf\u7740\u4efb\u4f55\u65b9\u5411\u5bfc\u822a(\u53c2\u89c1\u6b64\u5904\u7684\u8bba\u6587\u548c\u89c6\u9891)\u3002\n\u5173\u4e8eGPE\u548cGPI\u7684\u5de5\u4f5c\u662f\u4e24\u4e2a\u72ec\u7acb\u7684\u7814\u7a76\u5206\u652f\u7684\u4ea4\u53c9\u70b9\uff0c\u8fd9\u4e24\u4e2a\u5206\u652f\u5206\u522b\u4e0e\u8fd9\u4e9b\u64cd\u4f5c\u76f8\u5173\u3002\u7b2c\u4e00\u4e2a\u662f\u4e0eGPE\u76f8\u5173\u7684\u5de5\u4f5c\uff0c\u662f\u5173\u4e8e\u7ee7\u4efb\u8005\u4ee3\u8868\u7684\u5de5\u4f5c\uff0c\u59cb\u4e8e1993\u5e74\u5927\u71d5\u7684\u5f00\u521b\u6027\u8bba\u6587\u3002\u8fbe\u626c\u7684\u8bba\u6587\u5f00\u521b\u4e86\u795e\u7ecf\u79d1\u5b66\u7684\u4e00\u7cfb\u5217\u5de5\u4f5c\uff0c\u81f3\u4eca\u4ecd\u975e\u5e38\u6d3b\u8dc3(\u53c2\u89c1\u8fdb\u4e00\u6b65\u9605\u8bfb\uff1a\u795e\u7ecf\u79d1\u5b66\u7684\u7ee7\u4efb\u8005\u4ee3\u8868\u4f5c)\u3002\u6700\u8fd1\uff0c\u540e\u7ee7\u8005\u8868\u793a\u91cd\u65b0\u51fa\u73b0\u5728RL(\u8fd9\u91cc\u548c\u8fd9\u91cc\u7684\u94fe\u63a5)\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5728\u90a3\u91cc\u5b83\u4e5f\u88ab\u79f0\u4e3a\u201c\u540e\u7ee7\u8005\u7279\u5f81\u201d\uff0c\u5e76\u6210\u4e3a\u90a3\u91cc\u7684\u4e00\u4e2a\u6d3b\u8dc3\u7684\u7814\u7a76\u65b9\u5411(\u53c2\u89c1\u8fdb\u4e00\u6b65\u9605\u8bfb\uff1aGPE\u3001\u540e\u7ee7\u8005\u7279\u5f81\u548c\u76f8\u5173\u65b9\u6cd5)\u3002\u540e\u7ee7\u7279\u5f81\u4e5f\u4e0e\u4e00\u822c\u4ef7\u503c\u51fd\u6570\u5bc6\u5207\u76f8\u5173\uff0c\u8be5\u6982\u5ff5\u57fa\u4e8eSutton\u7b49\u4eba\u7684\u5047\u8bbe\uff0c\u5373\u76f8\u5173\u77e5\u8bc6\u53ef\u4ee5\u7528\u8bb8\u591a\u5173\u4e8e\u4e16\u754c\u7684\u9884\u6d4b\u7684\u5f62\u5f0f\u6765\u8868\u793a(\u8fd9\u91cc\u4e5f\u8ba8\u8bba\u4e86)\u3002\u5fb7\n\u7b2c\u4e8c\u4e2a\u5206\u652f\u7814\u7a76GPE\u548cGPI\u7684\u8d77\u6e90\uff0c\u4e0e\u540e\u8005\u76f8\u5173\uff0c\u6d89\u53ca\u5408\u6210\u884c\u4e3a\u4ee5\u521b\u9020\u65b0\u7684\u884c\u4e3a\u3002\u591a\u5e74\u6765\uff0c\u6267\u884c\u5b50\u63a7\u5236\u5668\u7684\u5206\u6563\u63a7\u5236\u5668\u7684\u60f3\u6cd5\u88ab\u591a\u6b21\u63d0\u51fa(\u4f8b\u5982\uff0cBrooks\uff0c1986)\uff0c\u5176\u4f7f\u7528\u503c\u51fd\u6570\u7684\u5b9e\u73b0\u81f3\u5c11\u53ef\u4ee5\u8ffd\u6eaf\u52301997\u5e74\uff0c\u6c49\u5f17\u83b1\u65af\u548c\u5361\u5c14\u677e\u7684\u535a\u58eb\u8bba\u6587\u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\u3002GPI\u4e5f\u4e0e\u7b49\u7ea7RL\u5bc6\u5207\u76f8\u5173\uff0c\u5b83\u7684\u57fa\u7840\u662f\u57281990\u5e74\u548c2000\u5e74\u521d\u7531Dayan\u548cHinton\uff0cParr\u548cRussell\uff0cSutton\uff0cPrecup\u548cSingh\uff0c\u4ee5\u53caDietterich\u7684\u4f5c\u54c1\u5960\u5b9a\u7684\u3002\u884c\u4e3a\u7684\u6784\u6210\u548c\u7b49\u7ea7\u5173\u7cfb\u5b66\u4e60\u90fd\u662f\u5f53\u4eca\u52a8\u6001\u7684\u7814\u7a76\u9886\u57df(\u53c2\u89c1\u8fdb\u4e00\u6b65\u9605\u8bfb\uff1aGPI\u3001\u7b49\u7ea7\u5173\u7cfb\u5b66\u4e60\u548c\u76f8\u5173\u65b9\u6cd5)\u3002\nMehta\u7b49\u4eba\u3002\u53ef\u80fd\u662f\u7b2c\u4e00\u6279\u8054\u5408\u4f7f\u7528GPE\u548cGPI\u7684\u516c\u53f8\uff0c\u5c3d\u7ba1\u5728\u4ed6\u4eec\u8ba4\u4e3aGPI\u4ece\u4e00\u5f00\u59cb\u5c31\u51cf\u5c11\u5230\u5355\u4e00\u9009\u62e9\u7684\u60c5\u51b5\u4e0b(\u4e5f\u5c31\u662f\u8bf4\uff0c\u6ca1\u6709\u653f\u7b56\u7684\u201c\u7f1d\u5408\u201d)\u3002\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u8ba8\u8bba\u7684GPE\u548cGPI\u7248\u672c\u662f\u57282016\u5e74\u9996\u6b21\u63d0\u51fa\u7684\uff0c\u4f5c\u4e3a\u4e00\u79cd\u4fc3\u8fdb\u8fc1\u79fb\u5b66\u4e60\u7684\u673a\u5236\u3002RL\u4e2d\u7684\u8fc1\u79fb\u53ef\u4ee5\u8ffd\u6eaf\u5230\u8f9b\u683c1992\u5e74\u7684\u5de5\u4f5c\uff0c\u6700\u8fd1\u5728\u6df1\u5ea6RL\u7684\u80cc\u666f\u4e0b\u7ecf\u5386\u4e86\u4e00\u6b21\u590d\u5174\uff0c\u5728\u90a3\u91cc\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a\u6d3b\u8dc3\u7684\u7814\u7a76\u9886\u57df(\u53c2\u89c1\u8fdb\u4e00\u6b65\u9605\u8bfb\uff1aGPE+GPI\uff0c\u8fc1\u79fb\u5b66\u4e60\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u65b9\u6cd5)\u3002\n\u8bf7\u770b\u4e0b\u9762\u5173\u4e8e\u8fd9\u4e9b\u4f5c\u54c1\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u8fdb\u4e00\u6b65\u9605\u8bfb\u7684\u5efa\u8bae\u5217\u8868\u3002\n\u603b\u800c\u8a00\u4e4b\uff0c\u65e0\u6a21\u578b\u4ee3\u7406\u4e0d\u80fd\u5bb9\u6613\u5730\u9002\u5e94\u65b0\u7684\u60c5\u51b5\uff0c\u4f8b\u5982\uff0c\u8981\u9002\u5e94\u5b83\u4ee5\u524d\u6ca1\u6709\u7ecf\u5386\u8fc7\u7684\u504f\u597d\u96c6\u3002\u57fa\u4e8e\u6a21\u578b\u7684\u4ee3\u7406\u53ef\u4ee5\u9002\u5e94\u4efb\u4f55\u65b0\u7684\u60c5\u51b5\uff0c\u4f46\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u5b83\u9996\u5148\u5fc5\u987b\u5b66\u4e60\u6574\u4e2a\u4e16\u754c\u7684\u6a21\u578b\u3002\u57fa\u4e8eGPE\u548cGPI\u7684Agent\u63d0\u4f9b\u4e86\u4e00\u79cd\u4e2d\u95f4\u89e3\u51b3\u65b9\u6848\uff1a\u867d\u7136\u5b83\u5b66\u4e60\u7684\u4e16\u754c\u6a21\u578b\u6bd4\u57fa\u4e8e\u6a21\u578b\u7684Agent\u5c0f\u5f97\u591a\uff0c\u4f46\u5b83\u53ef\u4ee5\u5feb\u901f\u9002\u5e94\u67d0\u4e9b\u60c5\u51b5\uff0c\u901a\u5e38\u6027\u80fd\u826f\u597d\u3002\n\u6211\u4eec\u8ba8\u8bba\u4e86GPE\u548cGPI\u7684\u5177\u4f53\u5b9e\u4f8b\uff0c\u4f46\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u662f\u66f4\u4e00\u822c\u7684\u6982\u5ff5\u3002\u5728\u62bd\u8c61\u7ea7\u522b\uff0c\u4f7f\u7528GPE\u548cGPI\u7684\u4ee3\u7406\u5206\u4e24\u6b65\u8fdb\u884c\u3002\u9996\u5148\uff0c\u5f53\u9762\u5bf9\u65b0\u4efb\u52a1\u65f6\uff0c\u5b83\u4f1a\u95ee\uff1a\u201c\u5df2\u77e5\u4efb\u52a1\u7684\u89e3\u51b3\u65b9\u6848\u5728\u8fd9\u4e2a\u65b0\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u5982\u4f55\uff1f\u201d\u8fd9\u662fGPE\u3002\u7136\u540e\uff0c\u57fa\u4e8e\u6b64\u8bc4\u4f30\uff0c\u4ee3\u7406\u7ec4\u5408\u4ee5\u524d\u7684\u89e3\u51b3\u65b9\u6848\u6765\u6784\u5efa\u65b0\u4efb\u52a1\u7684\u89e3\u51b3\u65b9\u6848--\u5373\uff0c\u5b83\u6267\u884cGPI\u3002GPE\u548cGPI\u80cc\u540e\u7684\u5177\u4f53\u673a\u5236\u4e0d\u5982\u539f\u7406\u672c\u8eab\u91cd\u8981\uff0c\u5bfb\u627e\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u7684\u66ff\u4ee3\u65b9\u6cd5\u53ef\u80fd\u662f\u4e00\u4e2a\u4ee4\u4eba\u5174\u594b\u7684\u7814\u7a76\u65b9\u5411\u3002\u6709\u8da3\u7684\u662f\uff0c\u884c\u4e3a\u79d1\u5b66\u7684\u4e00\u9879\u65b0\u7814\u7a76\u63d0\u4f9b\u4e86\u521d\u6b65\u8bc1\u636e\uff0c\u8868\u660e\u4eba\u7c7b\u5728\u591a\u4efb\u52a1\u60c5\u51b5\u4e0b\u505a\u51fa\u51b3\u5b9a\u65f6\u9075\u5faa\u7684\u539f\u5219\u4e0eGPE\u548cGPI\u975e\u5e38\u76f8\u4f3c\u3002\nGPE\u548cGPI\u63d0\u4f9b\u7684\u5feb\u901f\u81ea\u9002\u5e94\u4e3a\u6784\u5efa\u66f4\u5feb\u7684\u5b66\u4e60RL\u4ee3\u7406\u63d0\u4f9b\u4e86\u5e0c\u671b\u3002\u66f4\u5e7f\u6cdb\u5730\u8bf4\uff0c\u5b83\u63d0\u51fa\u4e86\u4e00\u79cd\u5b66\u4e60\u7075\u6d3b\u7684\u95ee\u9898\u89e3\u51b3\u65b9\u6848\u7684\u65b0\u65b9\u6cd5\u3002\u4ee3\u7406\u53ef\u4ee5\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u66f4\u5c0f\u3001\u66f4\u5bb9\u6613\u7ba1\u7406\u7684\u5b50\u4efb\u52a1\uff0c\u800c\u4e0d\u662f\u5c06\u95ee\u9898\u4f5c\u4e3a\u5355\u4e00\u7684\u3001\u5355\u4e00\u7684\u4efb\u52a1\u6765\u5904\u7406\u3002\u7136\u540e\uff0c\u5b50\u4efb\u52a1\u7684\u89e3\u51b3\u65b9\u6848\u53ef\u4ee5\u88ab\u91cd\u7528\u548c\u91cd\u65b0\u7ec4\u5408\uff0c\u4ece\u800c\u66f4\u5feb\u5730\u89e3\u51b3\u6574\u4f53\u4efb\u52a1\u3002\u8fd9\u5bfc\u81f4\u4e86\u5bf9RL\u7684\u7ec4\u6210\u65b9\u6cd5\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u66f4\u591a\u53ef\u4f38\u7f29\u7684\u4ee3\u7406\u3002\u81f3\u5c11\uff0c\u8fd9\u4e9b\u4ee3\u7406\u5546\u4e0d\u4f1a\u56e0\u4e3a\u4e00\u676f\u5496\u5561\u800c\u8fdf\u5230\u3002\n\u611f\u8c22\u5409\u59c6\u00b7\u80af\u6587(Jim Kynvin)\u3001\u4e9a\u5f53\u00b7\u51ef\u6069(Adam Cain)\u548c\u591a\u7c73\u5c3c\u514b\u00b7\u5df4\u6d1b(Dominic Barlow)\u63d0\u4f9b\u7684\u6570\u5b57\uff0c\u91d1\u4f2f\u5229\u00b7\u65af\u5854\u80af\u83f2\u5c14\u5fb7(Kimberly Stachenfeld)\u63d0\u4f9b\u795e\u7ecf\u79d1\u5b66\u6587\u732e\u7684\u6307\u5bfc\uff0c\u51ef\u5229\u00b7\u514b\u5170\u897f(Kelly Clancy)\u5e2e\u52a9\u7f16\u5199\u6587\u672c\u3002\n\u57fa\u4e8e\u53cd\u5411\u5f3a\u5316\u5b66\u4e60\u7684\u5b66\u5f92\u5236\u5b66\u4e60\u3002Pieter Abbeel\u548cAndrew Y.Ng\u3002\u56fd\u9645\u673a\u5668\u5b66\u4e60\u4f1a\u8bae\u8bba\u6587\u96c6(ICML)\uff0c2004\u5e74\u3002\nHORDE\uff1a\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u5b9e\u65f6\u67b6\u6784\uff0c\u7528\u4e8e\u4ece\u65e0\u76d1\u7763\u7684\u611f\u89c9\u8fd0\u52a8\u4ea4\u4e92\u4e2d\u5b66\u4e60\u77e5\u8bc6\u3002\u7406\u67e5\u5fb7\u00b7S\u00b7\u8428\u987f\uff0c\u7ea6\u745f\u592b\u00b7\u83ab\u8fbe\u4f0a\u5c14\uff0c\u8fc8\u514b\u5c14\u00b7\u5fb7\u5c14\u666e\uff0c\u6258\u9a6c\u65af\u00b7\u5fb7\u683c\u91cc\u65af\uff0c\u5e15\u7279\u91cc\u514b\u00b7M\u00b7\u76ae\u62c9\u5c14\u65af\u57fa\uff0c\u4e9a\u5f53\u00b7\u6000\u7279\u3002\u81ea\u6cbb\u4ee3\u7406\u548c\u591a\u4ee3\u7406\u7cfb\u7edf\u56fd\u9645\u4f1a\u8bae(AAMAS)\u4f1a\u8bae\u8bba\u6587\u96c6\uff0c2011\u5e74\u3002\n\u5f3a\u5316\u5b66\u4e60\u673a\u5668\u4eba\u4e2d\u7684\u591a\u65f6\u95f4\u5c3a\u5ea6\u5173\u8054\u3002\u7ea6\u745f\u592b\u00b7\u83ab\u4ee3\u4f0a\u5c14\uff0c\u4e9a\u5f53\u00b7\u6000\u7279\uff0c\u7406\u67e5\u5fb7\u00b7S\u00b7\u8428\u987f\u3002\u4ece\u52a8\u7269\u5230\u52a8\u7269\uff0c2012\u3002\n\u6cdb\u503c\u51fd\u6570\u903c\u8fd1\u5668\u3002\u6c64\u59c6\u00b7\u7ecd\u5c14\uff0c\u4e39\u00b7\u970d\u6839\uff0c\u5361\u7f57\u5c14\u00b7\u683c\u96f7\u6208\u5c14\uff0c\u5927\u536b\u00b7\u897f\u5c14\u5f17\u3002\u56fd\u9645\u673a\u5668\u5b66\u4e60\u4f1a\u8bae\u8bba\u6587\u96c6(ICML)\uff0c2015\u5e74\u3002\n\u6df1\u5ea6\u540e\u7ee7\u5f3a\u5316\u5b66\u4e60\u3002\u4e66\u540d/\u4f5c\u8005\u58f0\u660e\uff1a[by]A.\u3002Arxiv\uff0c2017\u5e74\u3002\n\u4f7f\u7528\u6df1\u5ea6\u540e\u7ee7\u8868\u793a\u7684\u53ef\u89c6\u5316\u8bed\u4e49\u89c4\u5212\u3002\u6731\u5b87\u79d1\uff0c\u4e39\u5c3c\u5c14\u00b7\u6208\u767b\uff0c\u57c3\u91cc\u514b\u00b7\u79d1\u5c14\u592b\uff0c\u8fea\u7279\u5c14\u00b7\u798f\u514b\u65af\uff0c\u674e\u6590-\u83f2\uff0c\u963f\u6bd4\u7eb3\u592b\u00b7\u53e4\u666e\u5854\uff0c\u9c81\u5179\u8d1d\u00b7\u83ab\u5854\u5409\uff0c\u963f\u91cc\u00b7\u6cd5\u54c8\u8fea\u3002IEEE\u56fd\u9645\u8ba1\u7b97\u673a\u89c6\u89c9\u4f1a\u8bae\u8bb0\u5f55(ICCV)\uff0c2017\u5e74\u3002\n\u5177\u6709\u540e\u7eed\u529f\u80fd\u7684\u6df1\u5ea6\u5f3a\u5316\u5b66\u4e60\uff0c\u53ef\u5728\u76f8\u4f3c\u73af\u5883\u4e2d\u5bfc\u822a\u3002\u5f20\u7ecf\u7eac\uff0cJost Tobias Springenberg\uff0cJoschka Boedecker\uff0cWolfram Burgard\u3002IEEE/RSJ\u667a\u80fd\u673a\u5668\u4eba\u56fd\u9645\u4f1a\u8bae\u3002\n.", "note_en": "Imagine if you had to learn how to chop, peel and stir all over again every time you wanted to learn a new recipe. In many machine learning systems, agents often have to learn entirely from scratch when faced with new challenges. It\u2019s clear, however, that people learn more efficiently than this: they can combine abilities previously learned. In the same way that a finite dictionary of words can be reassembled into sentences of near infinite meanings, people repurpose and re-combine skills they already possess in order to tackle novel challenges.\n In nature, learning arises as an animal explores and interacts with its environment in order to gather food and other rewards. This is the paradigm captured by  reinforcement learning (RL): interactions with the environment reinforce or inhibit particular patterns of behavior depending on the resulting reward (or penalty). Recently, the combination of RL with  deep learning has led to impressive results, such as agents that can learn how to play boardgames like  Go and  chess, the full spectrum of  Atari games, as well as more modern, difficult video games like  Dota and  StarCraft II.\n A major limitation in RL is that current methods require vast amounts of training experience. For example, in order to learn how to play a single Atari game, an RL agent typically consumes an amount of data corresponding to several weeks of uninterrupted playing. A  study led by researchers at MIT and Harvard indicated that in some cases, humans are able to reach the same performance level in just fifteen minutes of play.\n One possible reason for this discrepancy is that, unlike humans, RL agents usually learn a new task from scratch. We would like our agents to leverage knowledge acquired in previous tasks to learn a new task more quickly, in the same way that a cook will have an easier time learning a new recipe than someone who has never prepared a dish before. In  an article recently published in the Proceedings of the National Academy of Sciences (PNAS), we describe a framework aimed at endowing our RL agents with this ability.\n  To illustrate our approach, we will explore an example of an activity that is (or at least used to be) an everyday routine: the commute to work. Imagine the following scenario: an agent must commute every day from its home to its office, and it always gets a coffee on the way. There are two cafes between the agent&#39;s house and the office: one has great coffee but is on a longer path, and the other one has decent coffee but a shorter commute (Figure 1). Depending on how much the agent values the quality of the coffee versus how much of a rush it is in on a given day, it may choose one of two routes (the yellow and blue paths on the map shown in Figure 1).\n      Traditionally, RL algorithms fall into two broad categories:  model-based and model-free agents (Figures 2 &amp; 3). A model-based agent (Figure 2) builds a representation of many aspects of the\u00a0 environment. An agent of this type might know how the different locations are connected, the quality of the coffee in each cafe, and anything else that is considered relevant. A model-free agent (Figure 3) has a much more compact representation of its environment. For instance, a value-based model-free agent would have a single number associated with each possible route leaving its home; this is the expected &#34;value&#34; of each route, reflecting a specific weighing of coffee quality vs. commute length. Take the blue path shown in Figure 1 as an example. Say this path has length 4, and the coffee the agent gets by following it is rated 3 stars. If the agent cares about the commute distance 50% more than it cares about the quality of the coffee, the value of this path will be\u00a0 (-1.5 x 4) + (1 x 3) = -3\u00a0 (we use a negative weight associated with the distance to indicate that longer commutes are undesirable).\n       We can interpret the relative weighting of the coffee quality versus the commute distance as the agent\u2019s  preferences. For any fixed set of preferences, a model-free and a model-based agent would choose the same route. Why then have a more complicated representation of the world, like the one used by a model-based agent, if the end result is the same? Why learn so much about the environment if the agent ends up sipping the same coffee?\n Preferences can change day to day: an agent might take into account how hungry it is, or whether it\u2019s running late to a meeting, in planning its route to the office. One way for a model-free agent to handle this is to learn the best route associated with every possible set of preferences. This is not ideal because learning every possible combination of preferences will take a long time. It is also impossible to learn a route associated with every possible set of preferences if there are infinitely many of them.\n In contrast, a model-based agent can adapt to any set of preferences, without any learning, by &#34;imagining&#34; all possible routes and asking how well they would fulfill its current mindset. However, this approach also has drawbacks. Firstly, \u201dmentally\u201d generating and evaluating all possible trajectories can be computationally demanding. Secondly, building a model of the entire world can be very difficult in complex environments.\n Model-free agents learn faster but are brittle to change. Model-based agents are flexible but can be slow to\u00a0 learn. Is there an intermediate solution?\n  A recent  study in behavioural science and neuroscience suggests that in certain situations, humans and animals make decisions based on an algorithmic model that is a compromise between the model-free and model-based approaches ( here and  here). The hypothesis is that, like model-free agents, humans also compute the value of alternative strategies in the form of a number. But, instead of summarising a single quantity, humans summarise many different quantities describing the world around them, reminiscent of model-based agents.\n It\u2019s possible to endow an RL agent with the same ability. In our example, such an agent would have, for each route, a number representing the expected quality of coffee and a number representing the distance to the office. It could also have numbers associated with things the agent is not deliberately trying to optimise but are nevertheless available to it for future reference (for example, the quality of the food in each cafe). The aspects of the world the agent cares about and keeps track of are sometimes referred to as \u201cfeatures\u201d. Because of that, this representation of the world is called  successor features (previously termed the \u201csuccessor representation\u201d in its  original incarnation).\n Successor features can be thought of as a middle ground between the model-free and model-based representations. Like the latter, successor features summarise many different quantities, capturing the world beyond a single value. However, like in the model-free representation, the quantities the agent keeps track of are simple statistics summarising the features it cares about. In this way, successor features are like an \u201cunpacked\u201d version of the model-free agent. Figure 4 illustrates how an agent using successor features would see our example environment.\n      Successor features are a useful representation because they allow for a route to be evaluated under different sets of preferences. Let\u2019s use the blue route in Figure 1 as an example again. Using successor features, the agent would have three numbers associated with this path: its length (4), the quality of the coffee (3) and the quality of the food (5). If the agent already ate breakfast it will probably not care much about the food; also, if it is late, it might care about the commute distance more than the quality of the coffee --say, 50% more, as before. In this scenario the value of the blue path would be\u00a0 (-1.5 x 4) + (1 x 3) + (0 x 5) = -3, as in the example given above. But now, on a day when the agent is hungry, and thus cares about the food as much as it cares about the coffee, it can immediately update the value of this route to\u00a0 (-1.5 x 4) + (1 x 3) + (1 x 5) = 2. Using the same strategy, the agent can evaluate any route according to any set of preferences.\n In our example, the agent is choosing between routes. More generally, the agent will be searching for a policy: a prescription of what to do in every possible situation. Policies and routes are closely related: in our example, a policy that chooses to take the road to cafe A from home and then chooses the road to the office from cafe A would traverse the blue path. So, in this case, we can talk about policies and routes interchangeably (this would not be true if there were some randomness in the environment, but we will leave this detail aside).\u00a0 We discussed how successor features allow a route (or policy) to be evaluated under different sets of preferences. We call this process  generalised policy evaluation, or GPE.\n Why is GPE useful? Suppose the agent has a dictionary of policies (for example, known routes to the office). Given a set of preferences, the agent can use GPE to immediately evaluate how well each policy in the dictionary would perform under those preferences. Now the really interesting part: based on this quick evaluation of known policies,  the agent can create entirely new policies on the fly. The way it does it is simple: every time the agent has to make a decision, it asks the following question: \u201cif I were to make this decision and then follow the policy with the maximum value thereafter, which decision would lead to the maximum overall value?\u201d Surprisingly, if the agent picks the decision leading to the maximum overall value in each situation, it ends up with a policy that is often better than the individual policies used to create it.\n This process of \u201cstitching together\u201d a set of policies to create a better policy is called  generalised policy improvement, or GPI. Figure 5 illustrates how GPI works using our running example.\n      The performance of a policy created through GPI will depend on how many policies the agent knows. For instance, in our running example, as long as the agent knows the blue and yellow\u00a0 paths, it will find the best route for any preferences over coffee quality and commute length. But the GPI policy will not always find the best route. In Figure 1, the agent would never visit cafe A and then cafe B if it did not already know a policy that connected them in this way (like the orange route in the figure).\n  To illustrate the benefits of GPE and GPI, we now give a glimpse of one of the experiments from our recent publication (see  paper for full details). The experiment uses a simple environment that represents in an abstract way the type of problem in which our approach can be useful. As shown in Figure 6, the environment is a 10 x 10 grid with 10 objects spread across it. The agent only gets a non-zero reward if it picks up an object, in which case another object pops up in a random location. The reward associated with an object depends on its type. Object types are meant to represent concrete or abstract concepts; to connect with our running example, we will consider that each object is either \u201ccoffee\u201d or \u201cfood\u201d (these are the features the agent keeps track of).\n      Clearly, the best strategy for the agent depends on its current preferences over coffee or food. For example, in Figure 6, an agent that only cares about coffee may follow the path in red, while an agent focused exclusively on food would follow the blue path. We can also imagine intermediate situations in which the agent wants coffee and food with different weights, including the case in which the agent wants to avoid one of them. For example, if the agent wants coffee but really does not want food, the gray path in Figure 6 may be a better alternative to the red one.\n The challenge in this problem is to quickly adapt to a new set of preferences (or a \u201ctask\u201d). In our experiments we showed how one can do so using GPE and GPI. Our agent learned two policies: one that seeks coffee and one that seeks food. We then tested how well the policy computed by GPE and GPI performed on tasks associated with different preferences. In figure 7 we compare our method with a model-free agent on the task whose goal is to seek coffee while avoiding food. Observe how the agent using GPE and GPI instantaneously synthesises a reasonable policy, even though it never learned how to deliberately avoid objects. Of course, the policy computed by GPE and GPI can be used as an initial solution to be later refined through learning, which means that it would match the final performance of a model-free agent but would probably get there faster.\n      Figure 7 shows the performance of GPE and GPI on one specific task. We have also tested the same agent across many other tasks. Figure 8 shows what happens with the performance of the model-free and GPE-GPI agents when we change the relative importance of coffee and food. Note that, while the model-free agent has to learn each task separately, from scratch, the GPE-GPI agent only learns two policies and then quickly adapts to all of the tasks.\n      The experiments above used a simple environment designed to exhibit the properties needed by GPE and GPI without unnecessary confounding factors. But GPE and GPI have also been applied at scale. For example, in previous papers ( here and  here) we showed how the same strategy also works when we replace a grid world with a three dimensional environment in which the agent receives observations from a first-person perspective (see illustrative videos  here and  here). We have also used GPE and GPI to allow a four-legged simulated robot to navigate along any direction after having learned how to do so along three directions only (see paper  here and video  here).\n  The work on GPE and GPI is at the intersection of two separate branches of research related to these operations individually. The first, related to GPE, is the work on the successor representation, initiated with Dayan\u2019s  seminal paper from 1993. Dayan\u2019s paper inaugurated a line of work in neuroscience that is very active  to this day  (see further reading: &#34;The successor representation in neuroscience&#34;) . Recently, the successor representation reemerged in the context of RL (links  here  and  here ), where it is also referred to as \u201csuccessor features\u201d, and became an active line  of research there as well  ( see further reading: &#34;GPE, successor features, and related approaches&#34;) . Successor features are also closely related to  general value functions , a concept based on Sutton et al.\u2019s hypothesis that relevant knowledge can be expressed in the form of many predictions about the world (also discussed  here ). The definition of successor features has independently emerged in  other contexts  within RL, and is also related to more  recent approaches  normally associated with deep RL.\n The second branch of research at the origins of GPE and GPI, related to the latter, is concerned with composing behaviours to create new behaviours. The idea of a decentralised controller that executes sub-controllers has come up multiple times over the years (e.g.,  Brooks, 1986), and its implementation using value functions can be traced back to at least as far as 1997, with  Humphrys\u2019 and  Karlsson\u2019s PhD theses. GPI is also closely related to hierarchical RL, whose foundations were laid down in the 1990&#39;s and early 2000\u2019s in the works by  Dayan and Hinton,  Parr and Russell,  Sutton, Precup and Singh, and  Dietterich. Both the composition of behaviours and hierarchical RL are today dynamic areas of research  (see further reading: &#34;GPI, hierarchical RL, and related approaches&#34;) .\n Mehta  et al. were probably the first ones to jointly use GPE and GPI, although in the scenario they considered GPI reduces to a single choice at the outset (that is, there is no \u201cstitching\u201d of policies). The version of GPE and GPI discussed in this blog post was first  proposed in 2016 as a mechanism to promote  transfer learning. Transfer in RL dates back to  Singh\u2019s work in 1992 and has recently experienced a  resurgence in the context of deep RL, where it continues to be an active area of research ( see further reading: &#34; GPE + GPI, transfer learning, and related approaches &#34;).\n See more information about these works below, where we also provide a list of suggestions for further readings.\n  In summary, a model-free agent cannot easily adapt to new situations, for example to accommodate sets of preferences it has not experienced before. A model-based agent can adapt to any new situation, but in order to do so it first has to learn a model of the entire world. An agent based on GPE and GPI offers an intermediate solution: although the model of the world it learns is considerably smaller than that of a model-based agent, it can quickly adapt to certain situations, often with good performance.\n We discussed specific instantiations of GPE and GPI, but these are in fact more general concepts. At an abstract level, an agent using GPE and GPI proceeds in two steps. First, when faced with a new task, it asks: \u201cHow well would solutions to known tasks perform on this new task?\u201d This is GPE. Then, based on this evaluation, the agent combines the previous solutions to construct a solution for the new task --that is, it performs GPI. The specific mechanics behind GPE and GPI are less important than the principle itself, and finding alternative ways to carry out these operations may be an exciting research direction. Interestingly, a new  study in behavioural sciences provides preliminary evidence that humans make decisions in multitask scenarios following a principle that closely resembles GPE and GPI.\n The fast adaptation provided by GPE and GPI is promising for building faster learning RL agents. More generally, it suggests a new approach to learning flexible solutions to problems.\u00a0 Instead of tackling a problem as a single, monolithic, task, an agent can break it down into smaller, more manageable, sub-tasks. The solutions of the sub-tasks can then be reused and recombined to solve the overall task faster. This results in a compositional approach to RL that may lead to more scalable agents. At the very least, these agents will not be late because of a cup of coffee.\n  With thanks to Jim Kynvin, Adam Cain and Dominic Barlow for the figures, Kimberly Stachenfeld for the pointers to the neuroscience literature, and Kelly Clancy for the help with the text.\n   Apprenticeship Learning Via Inverse Reinforcement Learning. Pieter Abbeel and Andrew Y. Ng. Proceedings of the International Conference on Machine learning (ICML), 2004.\n Horde: A Scalable Real-time Architecture for Learning Knowledge from Unsupervised Sensorimotor Interaction. Richard S. Sutton, Joseph Modayil, Michael Delp, Thomas Degris, Patrick M. Pilarski, Adam White. Proceedings of the International Conference on Autonomous Agents and Multiagent Systems (AAMAS), 2011.\n Multi-timescale Nexting in a Reinforcement Learning Robot. Joseph Modayil, Adam White, Richard S. Sutton. From Animals to Animats, 2012.\n Universal Value Function Approximators. Tom Schaul, Dan Horgan, Karol Gregor, David Silver. Proceedings of the International Conference on Machine learning (ICML), 2015.\n Deep Successor Reinforcement Learning. Tejas D. Kulkarni, Ardavan Saeedi, Simanta Gautam, Samuel J. Gershman. arXiv, 2017.\n Visual Semantic Planning Using Deep Successor Representations. Yuke Zhu, Daniel Gordon, Eric Kolve, Dieter Fox, Li Fei-Fei, Abhinav Gupta, Roozbeh Mottaghi, Ali Farhadi. Proceedings of the IEEE International Conference on Computer Vision (ICCV), 2017.\n Deep Reinforcement Learning with Successor Features for Navigation Across Similar Environments. Jingwei Zhang, Jost Tobias Springenberg, Joschka Boedecker, Wolfram Burgard. IEEE/RSJ International Conference on Intelligent Robots a\n......", "posttime": "2020-10-13 19:59:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u884c\u4e3a,reinforcement,\u4ee3\u7406", "title": "\u57fa\u4e8e\u884c\u4e3a\u7ec4\u5408\u7684\u5feb\u901f\u5f3a\u5316\u5b66\u4e60", "title_en": "Fast reinforcement learning through composition of behavior", "transed": 1, "url": "https://deepmind.com/blog/article/fast-reinforcement-learning-through-the-composition-of-behaviours", "via": "", "real_tags": ["\u884c\u4e3a", "\u4ee3\u7406"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1028413, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7dPDF\u6458\u8981\uff1a\u89c6\u9891\u6e38\u620f\u4e2d\u7684\u8fc7\u7a0b\u6027\u5185\u5bb9\u751f\u6210\u7531\u6765\u5df2\u4e45\u3002\u73b0\u6709\u7684\u8fc7\u7a0b\u6027\u5185\u5bb9\u751f\u6210\u65b9\u6cd5\uff0c\u5982\u57fa\u4e8e\u641c\u7d22\u3001\u57fa\u4e8e\u89e3\u7b97\u5668\u3001\u57fa\u4e8e\u89c4\u5219\u548c\u57fa\u4e8e\u8bed\u6cd5\u7684\u65b9\u6cd5\uff0c\u5df2\u88ab\u5e94\u7528\u4e8e\u5404\u79cd\u5185\u5bb9\u7c7b\u578b\uff0c\u5982\u7ea7\u522b\u3001\u6620\u5c04\u3001\u89d2\u8272\u6a21\u578b\u548c\u7eb9\u7406\u3002\u4ee5\u6e38\u620f\u5185\u5bb9\u751f\u6210\u4e3a\u4e2d\u5fc3\u7684\u7814\u7a76\u9886\u57df\u5df2\u7ecf\u5b58\u5728\u4e86\u5341\u591a\u5e74\u3002\u6700\u8fd1\uff0c\u6df1\u5ea6\u5b66\u4e60\u63a8\u52a8\u4e86\u5185\u5bb9\u5236\u4f5c\u4e2d\u4e00\u7cfb\u5217\u503c\u5f97\u6ce8\u610f\u7684\u53d1\u660e\uff0c\u8fd9\u4e9b\u53d1\u660e\u9002\u7528\u4e8e\u6e38\u620f\u3002\u867d\u7136\u4e00\u4e9b\u524d\u6cbf\u7684\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u662f\u5355\u72ec\u5e94\u7528\u7684\uff0c\u4f46\u53e6\u4e00\u4e9b\u65b9\u6cd5\u662f\u4e0e\u66f4\u4f20\u7edf\u7684\u65b9\u6cd5\u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u6216\u8005\u662f\u5728\u4e92\u52a8\u7684\u73af\u5883\u4e2d\u5e94\u7528\u7684\u3002\u672c\u6587\u7efc\u8ff0\u4e86\u76f4\u63a5\u6216\u95f4\u63a5\u5e94\u7528\u4e8e\u751f\u6210\u5185\u5bb9\u7684\u5404\u79cd\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\uff0c\u8ba8\u8bba\u4e86\u53ef\u4ee5\u7528\u4e8e\u5185\u5bb9\u751f\u6210\u4f46\u76ee\u524d\u5f88\u5c11\u4f7f\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\uff0c\u5e76\u5c55\u671b\u4e86\u7528\u4e8e\u8fc7\u7a0b\u6027\u5185\u5bb9\u751f\u6210\u7684\u6df1\u5ea6\u5b66\u4e60\u7684\u4e00\u4e9b\u5c40\u9650\u6027\u548c\u6f5c\u5728\u7684\u672a\u6765\u53d1\u5c55\u65b9\u5411\u3002", "note_en": "Download PDF  Abstract: Procedural content generation in video games has a long history. Existingprocedural content generation methods, such as search-based, solver-based,rule-based and grammar-based methods have been applied to various content typessuch as levels, maps, character models, and textures. A research field centeredon content generation in games has existed for more than a decade. Morerecently, deep learning has powered a remarkable range of inventions in contentproduction, which are applicable to games. While some cutting-edge deeplearning methods are applied on their own, others are applied in combinationwith more traditional methods, or in an interactive setting. This articlesurveys the various deep learning methods that have been applied to generategame content directly or indirectly, discusses deep learning methods that couldbe used for content generation purposes but are rarely used today, andenvisages some limitations and potential future directions of deep learning forprocedural content generation.", "posttime": "2020-10-13 19:59:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6df1\u5ea6\u5b66\u4e60,\u7a0b\u5e8f,\u5185\u5bb9,learning", "title": "\u7a0b\u5e8f\u5185\u5bb9\u751f\u6210\u7684\u6df1\u5ea6\u5b66\u4e60--\u4e00\u9879\u8c03\u67e5", "title_en": "Deep Learning for Procedural Content Generation \u2013 a survey", "transed": 1, "url": "https://arxiv.org/abs/2010.04548", "via": "", "real_tags": ["\u6df1\u5ea6\u5b66\u4e60", "\u7a0b\u5e8f", "\u5185\u5bb9", "learning"]}]