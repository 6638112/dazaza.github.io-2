[{"category": "", "categoryclass": "", "imagename": "e6f434c0e1d5bc0a38e59db5848d3cbb.png", "infoid": 1066784, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u65c5\u7a0b\u4e8e1987\u5e74\u4e0eC64\u4e00\u8d77\u5f00\u59cb\uff0c\u6211\u7684\u57fa\u672c\u5efa\u9020\u4e86\u7b2c\u4e00\u4e2a\u6e38\u620f\u3002 \u572890\uff06\uff0339; s\uff0cpascal\u6210\u4e86\u6211\u7684\u4f34\u4fa3\uff0cAmiga 500\u548cPC-at\u9075\u5faa\u3002 1997\u5e74\uff0c\u6211\u5207\u6362\u5230Linux\uff0c\u6211\u7684CS\u7814\u7a76\u6765\u81eaPerl\u548cJava\u3002 \u4ece2006\u5e74\u8d77\uff0c\u6211\u521b\u7acb\u4e86\u51e0\u4e2a\u57fa\u4e8eRails\u548cRuby\u7684\u521d\u521b\u516c\u53f8 - \u4ecd\u7136\u662f\u6211\u6700\u559c\u6b22\u7684\u3002 JavaScript\uff0cNode\uff0cELM\u548c\u5176\u4ed6\u6280\u672f\u4ee5\u53ca\u5bf9Devops\u7684\u5174\u8da3\uff0c\u5851\u9020\u4e86\u6211\u76842010\uff06\uff0339; s\uff0c\u6211\u6709\u673a\u4f1a\u4e3a\u8bb8\u591a\u516c\u53f8\u62c5\u4efb\u987e\u95ee\u3002 \u6211\u559c\u6b22\u6280\u672f\u7784\u51c6\u6b63\u786e\u7684\u76ee\u6807\uff0c\u5e76\u4eab\u53d7\u5411\u4ed6\u4eba\u7684\u6570\u5b57\u9886\u57df\u7684\u77e5\u8bc6\u3002 \u4eca\u5929\uff0c\u6211\u559c\u6b22\u82b1\u8d39\u5927\u90e8\u5206\u65f6\u95f4\u4e0e8bit\u4e3b\u9898\uff0c\u521b\u5efa\u76f8\u5173\u7684\u5c4f\u5e55Ccast\uff0c\u5982\u6b64\u7ea6\u4e3a\u516d\u5341\u4e94\uff0c\u5e76\u4e0e\u5df4\u65af\u8482\u5b89\u4e00\u8d77\u5171\u540c\u8fd0\u884c8bitnews\u3002 ", "note_en": "My journey began in 1987 with a C64, and I built first games in Basic. An Amiga 500 and PC-AT followed in the 90&#39;s, Pascal became my companion. In 1997 I switched to Linux and with my CS studies came Perl and Java. From 2006 I founded several StartUps based on Rails and Ruby - still my favorite. Javascript, Node, Elm and other technologies as well as interest in DevOps shaped my 2010&#39;s, where I had the chance to work as a consultant for many companies. I love technology when aimed at the right goals, and enjoy imparting knowledge in the digital realm to others. Today I enjoy spending most of my time with 8bit topics, create related screencasts like  this one about Sixty5o2 and co-run 8bitnews together with Bastian.", "posttime": "2021-06-19 06:46:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ba1\u7b97,curated,\u6280\u672f", "title": "8bitnews\u4e3a70-80\u548c\u5bb6\u7528\u5fae\u8ba1\u7b97\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u7b56\u5212\u5185\u5bb9 ", "title_en": "8bitnews provides well curated content for 70-80's and homebrew micro-computing", "transed": 1, "url": "https://8bitnews.io", "via": "", "real_tags": ["\u8ba1\u7b97", "curated", "\u6280\u672f"]}, {"category": "", "categoryclass": "", "imagename": "780ac86276c2a872d911b1d8f1f68c7c.jpeg", "infoid": 1066783, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u975e\u5a31\u4e50\u4ee4\u724c\u6216NFTS\uff0c\u4eca\u5e74\u901a\u8fc7\u98ce\u66b4\u91c7\u53d6\u4e86\u827a\u672f\u5e02\u573a\u53ca\u5176\u8bb8\u591a\u90bb\u8fd1\u884c\u4e1a\u3002\u5176\u6781\u5176\u4e0d\u7a33\u5b9a\u7684\u4ea4\u6613\u6d3b\u52a8\u4f7f\u5176\u4ecd\u7136\u592a\u65e9\u8bf4\u5b83\u662f\u5982\u4f55\u53d1\u6325\u7684\u3002\u4f46\u6839\u636e\u6700\u65e9\u7684\u52a0\u5bc6\u8d27\u5e01\u7684\u4f9b\u5e94\u5546\u4e4b\u4e00\uff0c\u4eca\u5929\u5e02\u573a\u4e0a\u7edd\u5927\u591a\u6570NFT\u5c06\u5728\u51e0\u5e74\u5185\u6beb\u65e0\u4ef7\u503c\u3002\u5728\u672c\u5468\u5bf9Bloomberg TV\u7684\u91c7\u8bbf\u4e2d\uff0cCoinbase Cofounder Fred Ehrsam\u5728\u52a0\u5bc6\u8d27\u5e01\u7684\u5174\u8d77\u4e0e20\u4e16\u7eaa90\u5e74\u4ee3\u7684Dotcom\u7e41\u8363\u4e4b\u95f4\u6c72\u53d6\u4e86\u76f8\u4f3c\u4e4b\u5904\u3002 \u201c\u6211\u8981\u8bf490\uff05\u7684NFT\u4ea7\u751f\u4e86\uff0c\u4ed6\u4eec\u53ef\u80fd\u5728\u4e09\u5230\u4e94\u5e74\u5185\u6ca1\u6709\u4efb\u4f55\u4ef7\u503c\uff0c\u201dEhrsam\u8bf4\u3002 \u201c\u4f60\u53ef\u4ee5\u572890\u5e74\u4ee3\u672b\u671f\u7684\u65e9\u671f\u4e92\u8054\u7f51\u516c\u53f8\u8bf4\u540c\u6837\u7684\u4e8b\u60c5\u3002\u201d\u5bf9\u4ed6\u800c\u8a00\uff0cNFT\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u4e8e\u7092\u4f5c\u8fc7\u591c\u7684\u4efb\u4f55\u5176\u4ed6\u52a0\u5bc6\u9879\u76ee\u3002\u53e6\u8bf7\u53c2\u9605\uff1aElon Musk\u7684\u6bd4\u7279\u5e01\u63a8\u6587\u8ba9\u4ed6\u6210\u4e3a\u201cCrypto\u6700\u8ba8\u538c\u7684\u4eba\u201d\uff0c'\u5b66\u4e60\u53d1\u73b0\u201c\u4eba\u4eec\u4f1a\u5c1d\u8bd5\u5404\u79cd\u5404\u6837\u7684\u4e8b\u60c5\u3002\u5c31\u50cf\u6709\u6570\u767e\u4e07\u548c\u6570\u767e\u4e07\u4e2a\u7f51\u7ad9\u4e00\u6837\uff0c\u6709\u6570\u767e\u4e07\u7f8e\u5143\u7684\u52a0\u5bc6\u8d27\u5e01\u548c\u52a0\u5bc6\u8d44\u4ea7\u3002\u5927\u591a\u6570\u4eba\u90fd\u4e0d\u4f1a\u8d77\u4f5c\u7528\uff0c\u201cEhrsam\u89e3\u91ca\u9053\u3002 EHRSAM\u4e8e2010\u5e74\u5f00\u59cb\u8d38\u6613\u6bd4\u7279\u5e01\uff0c\u540c\u65f6\u62c5\u4efbGoldman Sachs\u7684\u5916\u6c47\u4ea4\u6613\u5458\u3002\u4ed6\u5c06\u6295\u8d44\u94f6\u884c\u4e0eBrian Armstrong\u57282012\u5e74\u5c06Cryptocurrency Exchange\u6597\u9e21\u961f\u8054\u7cfb\u8d77\u6765\u30022017\u5e74\uff0cEHRSAM\u4e0eArmstrong\u7684\u65b9\u5f0f\u5206\u5f00\u4e86\u4e00\u7cfb\u5217\uff0c\u5e76\u57282018\u5e74\u63a8\u51fa\u4e86\u4e00\u4e2a\u533a\u5757Convent Investment\u516c\u53f8\u7684\u5212\u5206\u3002Coinbase\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u5728\u5e9e\u5927\u7684\u4f30\u4ef7\u4e0a\u516c\u5e03\u4e861000\u4ebf\u7f8e\u5143\u3002\u7531\u4e8e\u52a0\u5bc6\u4ea4\u6613\u5728\u5168\u7403\u76d1\u7ba1\u538b\u529b\u548c\u540d\u4eba\u8bf1\u5bfc\u7684\u629b\u552e\u4e2d\uff0c\u5b83\u7684\u5e02\u573a\u4e0a\u9650\u5df2\u7ecf\u7f29\u51cf\u4e86\u4e00\u534a\u3002\u9664\u4e86\u77ed\u671f\u6ce2\u52a8\u4e4b\u5916\uff0cEHRSAM\u8ba4\u4e3a\uff0c\u52a0\u5bc6\u8d27\u5e01\u771f\u6b63\u201c\u7f8e\u56fd\u7684\u4e0b\u4e00\u4e2a\u4e92\u8054\u7f51\u5927\u5c0f\u7684\u673a\u4f1a\u201d\u3002 \u201c\u4e16\u754c\u5728\u4e00\u591c\u4e4b\u95f4\u6ca1\u6709\u6539\u53d8\uff0c\u4f46\u4f60\u53ef\u4ee5\u770b\u5230\u767e\u6708\u7684\u6307\u6570\u589e\u957f\u7684\u79cd\u5b50\uff0c\u201d\u4ed6\u5728\u5f6d\u535a\u8bbf\u8c08\u4e2d\u8bf4\u9053\u3002 \u201c\u6211\u8ba4\u4e3a\u6211\u4eec\u5c06\u5728\u672a\u6765\u751f\u6d3b\u5728\u6211\u4eec\u534f\u8c03\u7684\u5730\u65b9\uff0c\u6211\u4eec\u4eca\u5929\u4e0d\u9700\u8981\u8fd9\u4e9b\u96c6\u4e2d\u5e73\u53f0\u3002\u8fd9\u5df2\u7ecf\u662f\u771f\u6b63\u7684\u91d1\u878d\u670d\u52a1\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u6210\u4e3a\u81ea\u5df1\u7684\u94f6\u884c\u3002\u4f60\u4e0d\u9700\u8981\u4e00\u4e2a\u4e2d\u592e\u673a\u6784\u6765\u62ff\u5230\u4f60\u7684\u94b1\u4e86\u3002\u201c ", "note_en": "Non-fungible tokens, or NFTs, have  taken the art market and its many adjacent industries by storm this year. And its extremely volatile trading activities make it still too early to say how it\u2019s going to play out. But according to one of the earliest purveyors of cryptocurrencies, the vast majority of NFTs in the market today will be worthless in just a few years. In an  interview on Bloomberg TV this week, Coinbase cofounder Fred Ehrsam drew parallels between the rise of cryptocurrencies and the dotcom boom of the 1990s. \u201cI go so far as to say that 90% of NFTs produced, they probably will have little to no value in three to five years,\u201d Ehrsam said. \u201cYou could say the same thing about early internet companies in the late \u201990s.\u201d   To him, NFTs are no different than any other crypto project born out of the hype overnight. SEE ALSO:  Elon Musk\u2019s Bitcoin Tweets Make Him \u2018Most Hated Person in Crypto,\u2019 Study Finds \u201cPeople are going to try all sorts of things. There\u2019ll be millions and millions of cryptocurrencies and crypto assets, just like there were millions and millions of websites. Most of them won\u2019t work,\u201d Ehrsam explained.  Ehrsam  began trading Bitcoin around 2010 while working as a foreign exchange trader at Goldman Sachs. He left the investment bank to cofound the cryptocurrency exchange Coinbase with  Brian Armstrong in 2012. Ehrsam parted ways with Armstrong in 2017 and launched Paradigm, a blockchain investment firm, in 2018. Coinbase  went public earlier this year at a colossal valuation of $100 billion. Its market cap has since shrunk by half as crypto trading cools down amid global regulatory pressure and  celebrity-induced sell-off, among other factors. Short-term fluctuation aside, Ehrsam believes that cryptocurrency is truly \u201cthe next internet-sized opportunity for the United States.\u201d   \u201cThe world doesn\u2019t change overnight, but you can see the seeds of exponential growth occurring already,\u201d he said in the Bloomberg interview. \u201cI do think we will live in a future where for us to coordinate, we won\u2019t need these centralized platforms today. That\u2019s already true of financial services, in that you can be your own bank. You don\u2019t need a central institution to hold your money anymore.\u201d", "posttime": "2021-06-19 06:09:55", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "cofounder,worthless,ehrsam", "title": "Coinbase Cofounder\u8b66\u544a\uff0c90\uff05\u7684NFT\u5c06\u57283\u52305\u5e74\u5185\u6beb\u65e0\u4ef7\u503c ", "title_en": "90% of NFTs Will Be Worthless in 3 to 5 Years, Coinbase Cofounder Warns", "transed": 1, "url": "https://observer.com/2021/06/coinbase-cofounder-warn-nfts-worthless-interview/", "via": "", "real_tags": ["cofounder", "worthless", "ehrsam"]}, {"category": "", "categoryclass": "", "imagename": "54d4cbfe26f9a777524369f48dcf3d05.png", "infoid": 1066781, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b64\u6269\u5c55\u5c06\u81ea\u52a8\u4eceURL\u4e2d\u5220\u9664\u8ddf\u8e2a\u5143\u7d20\uff0c\u4ee5\u5e2e\u52a9\u4fdd\u62a4\u60a8\u7684\u9690\u79c1\u65f6\u6d4f\u89c8Internet\u3002 [\u9605\u8bfb\u66f4\u591a] ", "note_en": "This extension will automatically remove tracking elements from URLs to help protect your privacy when browse through the Internet.  [Read\u00a0More]", "posttime": "2021-06-19 06:02:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ddf\u8e2a,urls,\u6d4f\u89c8", "title": "\u6e05\u6d01URL  - \u8ddf\u8e2a\u89c4\u5219\u68c0\u6d4b\u5668\u548c\u6e05\u6d01\u5242 ", "title_en": "Clean URLs \u2013 tracking rule detector and cleaner", "transed": 1, "url": "https://clearurls.xyz", "via": "", "real_tags": ["\u8ddf\u8e2a", "urls", "\u6d4f\u89c8"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066780, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Verkle\u6811\u662f\u5851\u9020\u7684\uff0c\u6210\u4e3aEthereum\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff06\uff0339;\u5347\u7ea7\u5347\u7ea7\u3002\u5b83\u4eec\u4e0emerkle\u6811\u76f8\u540c\u7684\u529f\u80fd\uff1a\u60a8\u53ef\u4ee5\u5c06\u5927\u91cf\u6570\u636e\u653e\u5165Verkle\u6811\u4e2d\uff0c\u5e76\u5236\u4f5c\u8be5\u6570\u636e\u7684\u4efb\u4f55\u5355\u4ef6\u6216\u4e00\u7ec4\u788e\u7247\u7684\u77ed\u7f3a\uff08\uff06\uff0334;\u8bc1\u4eba\uff06\uff0334;\uff09\u53ef\u4ee5\u7531\u53ea\u6709\u6811\u6839\u7684\u4eba\u9a8c\u8bc1\u3002\u7136\u800c\uff0cVerkle Tree\u63d0\u4f9b\u7684\u5173\u952e\u5c5e\u6027\u662f\u5b83\u4eec\u5728\u8bc1\u660e\u5c3a\u5bf8\u65b9\u9762\u66f4\u6709\u6548\u3002\u5982\u679c\u4e00\u68f5\u6811\u5305\u542b\u5341\u4ebf\u6761\u6570\u636e\uff0c\u5219\u5728\u4f20\u7edf\u7684\u4e8c\u8fdb\u5236Merkle\u6811\u4e2d\u5448\u73b0\u9a8c\u8bc1\u9700\u8981\u5927\u7ea61\u5343\u5b57\u8282\uff0c\u4f46\u5728Verkle\u6811\u4e2d\uff0c\u8bc1\u636e\u5c06\u5c0f\u4e8e150\u5b57\u8282 - \u51cf\u5c11\u8db3\u4ee5\u4f7f\u65e0\u56fd\u7c4d\u5ba2\u6237\u5728\u5b9e\u8df5\u4e2d\u6700\u7ec8\u53ef\u884c\u7684\u51cf\u5c11\u3002\n \u8fd9\u7bc7\u6587\u7ae0\u5c06\u89e3\u91ca\u9a8c\u5c38\u6811\u662f\u4ec0\u4e48\u4ee5\u53ca\u5b83\u4eec\u80cc\u540e\u7684\u52a0\u5bc6\u9b54\u6cd5\u3002\u5b83\u4eec\u7684\u77ed\u5c3a\u5bf8\u7684\u4ef7\u683c\u662f\u5bf9\u66f4\u590d\u6742\u7684\u5bc6\u7801\u5b66\u7684\u4f9d\u8d56\u7a0b\u5ea6\u66f4\u9ad8\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6211\u770b\u6765\uff0c\u5bc6\u7801\u672f\u4ecd\u7136\u6bd4\u73b0\u4ee3ZK Snark\u65b9\u6848\u4e2d\u53d1\u73b0\u7684\u9ad8\u7ea7\u5bc6\u7801\u66f4\u7b80\u5355\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6211\uff06\uff0339; ll\u505a\u5230\u6700\u597d\u7684\u5de5\u4f5c\uff0c\u6211\u53ef\u4ee5\u5728\u89e3\u91ca\u5b83\u3002\n  \u5c31\u6811\u7684\u7ed3\u6784\uff08\u6811\u4e2d\u7684\u8282\u70b9\u88ab\u5b89\u6392\u7684\u8282\u70b9\u4ee5\u53ca\u5b83\u4eec\u5305\u542b\u7684\u4e1c\u897f\uff09\u800c\u8a00\uff0cVerkle\u6811\u975e\u5e38\u76f8\u4f3c\u4e8e\u5f53\u524d\u5728Ethereum\u4e2d\u4f7f\u7528\u7684Merkle Patricia\u6811\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\uff08i\uff09\u7a7a\uff0c\uff08ii\uff09\u5305\u542b\u952e\u548c\u503c\u7684\u53f6\u8282\u70b9\uff0c\u6216\uff08iii\uff09\u5177\u6709\u4e00\u4e9b\u56fa\u5b9a\u6570\u91cf\u7684\u513f\u7ae5\u7684\u4e2d\u95f4\u8282\u70b9\uff08\uff06\uff0334;\u5bbd\u5ea6\uff06\uff0334;\u6811\u7684\u5bbd\u5ea6\uff06\uff0334\uff09\u3002\u4e2d\u95f4\u8282\u70b9\u7684\u503c\u88ab\u8ba1\u7b97\u4e3a\u5176\u5b50\u5b50\u7684\u503c\u7684\u54c8\u5e0c\u503c\u3002\n \u6811\u4e2d\u503c\u7684\u4f4d\u7f6e\u57fa\u4e8e\u5176\u5bc6\u94a5\uff1a\u5728\u4e0b\u56fe\u4e2d\uff0c\u8981\u4f7f\u7528\u952e4cc\u5230\u8fbe\u8282\u70b9\uff0c\u4ece\u6839\u5f00\u59cb\uff0c\u7136\u540e\u5411\u4e0b\u5230\u7b2c4\u4f4d\u7684\u5b50\u9879\uff0c\u7136\u540e\u5411\u4e0b\u5230\u5b69\u5b50\u5728\u4f4d\u7f6eC\uff08\u8bb0\u4f4f\uff1aC = 12\u5728\u5341\u516d\u8fdb\u5236\u4e2d\uff09\uff0c\u7136\u540e\u518d\u6b21\u4e0b\u964d\u5230\u4f4d\u7f6eC\u3002\u8981\u4f7f\u7528key baaa\u5230\u8fbe\u8282\u70b9\uff0c\u8bf7\u8f6c\u5230\u6839\u7684\u4f4d\u7f6e -  b\u5b50\u9879\uff0c\u7136\u540e\u662f\u8be5\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\u8def\u5f84\uff08b\uff0ca\uff09\u5904\u7684\u8282\u70b9\u76f4\u63a5\u5305\u542b\u5e26\u6709key baaa\u7684\u8282\u70b9\uff0c\u56e0\u4e3a\u6811\u4e2d\u6ca1\u6709\u5176\u4ed6\u952e\u5728ba\u5f00\u59cb\u3002\n           Verkle\u6811\u548cMerkle Patricia\u6811\u7ed3\u6784\u7684\u552f\u4e00\u771f\u6b63\u5dee\u5f02\u662f\u9a8c\u8bc1\u6811\u5728\u5b9e\u8df5\u4e2d\u66f4\u5e7f\u6cdb\u3002\u66f4\u5bbd\u3002\u5f53\u5bbd\u5ea6= 2\uff08\u56e0\u6b64Evereum\uff06\uff0339; Seexary Patricia\u6811\u5b9e\u9645\u4e0a\u975e\u5e38\u6b21\u4f18\uff09\u65f6\uff0c\u5e15\u7279\u91cc\u590f\u6811\u662f\u6700\u6709\u6548\u7684\u3002\u53e6\u4e00\u65b9\u9762\uff0cVerkle\u6811\u8d8a\u6765\u8d8a\u77ed\uff0c\u8f83\u77ed\u7684\u8bc1\u636e\u8d8a\u9ad8\uff0c\u5bbd\u5ea6\u8d8a\u9ad8;\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5982\u679c\u5bbd\u5ea6\u53d8\u5f97\u592a\u9ad8\uff0c\u5219\u8bc1\u660e\u5f00\u59cb\u82b1\u8d39\u592a\u957f\u4ee5\u521b\u5efa\u3002\u4e3aEtereum\u63d0\u51fa\u7684Verkle\u6811\u7684\u5bbd\u5ea6\u4e3a256\uff0c\u6709\u4e9b\u4eba\u751a\u81f3\u6709\u5229\u4e8e\u5c06\u5176\u63d0\u5347\u52301024\uff08!!\uff09\u3002\n  \u5728Merkle\u6811\uff08\u5305\u62ecMerkle Patricia\u6811\uff09\u4e2d\uff0c\u503c\u7684\u8bc1\u660e\u5305\u62ec\u6574\u5957\u59d0\u59b9\u8282\u70b9\uff1a\u8bc1\u660e\u5fc5\u987b\u5305\u542b\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u4e0e\u8def\u5f84\u4e2d\u7684\u8def\u5f84\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u5171\u4eab\u4e00\u4e2a\u7236\u8282\u70b9\u60a8\u6b63\u5728\u5c1d\u8bd5\u8bc1\u660e\u7684\u8282\u70b9\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u590d\u6742\u7684\u7406\u89e3\uff0c\u6240\u4ee5\u8fd9\u91cc\uff06\uff0339;\uff06\uff0339; s\u7684\u6821\u6837\u57284CE\u4f4d\u7f6e\u7684\u8ff9\u8c61\u3002\u5fc5\u987b\u5305\u542b\u5728\u8bc1\u660e\u4e2d\u7684\u59d0\u59b9\u8282\u70b9\u4ee5\u7ea2\u8272\u7a81\u51fa\u663e\u793a\u3002\n         \u90a3\u4e2a\u8282\u70b9\uff06\uff0339;\u5f88\u591a\u8282\u70b9\uff01\u60a8\u9700\u8981\u5728\u6bcf\u4e2a\u7ea7\u522b\u63d0\u4f9b\u59d0\u59b9\u8282\u70b9\uff0c\u56e0\u4e3a\u60a8\u9700\u8981\u8282\u70b9\u7684\u6574\u5957\u5b50\u7ec4\u6765\u8ba1\u7b97\u8be5\u8282\u70b9\u7684\u503c\uff0c\u5e76\u4e14\u60a8\u9700\u8981\u7ee7\u7eed\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u76f4\u5230\u60a8\u5230\u8fberoot\u3002\u60a8\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8fd9\u5e76\u4e0d\u7cdf\u7cd5\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u8282\u70b9\u90fd\u662f\u96f6\uff0c\u4f46\u662f\uff06\uff0339;\u25a0\u4ec5\u662f\u56e0\u4e3a\u8fd9\u68f5\u6811\u7684\u8282\u70b9\u5f88\u5c11\u3002\u5982\u679c\u6b64\u6811\u6709256\u4e2a\u968f\u673a\u5206\u914d\u7684\u8282\u70b9\uff0c\u5219\u9876\u5c42\u51e0\u4e4e\u80af\u5b9a\u4f1a\u6709\u6240\u670916\u4e2a\u8282\u70b9\u6ee116\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u7b2c\u4e8c\u5c42\u5e73\u5747\u5c06\u5e73\u5747\u4e3a\u301c63.3\uff05\u3002 \n\u53e6\u4e00\u65b9\u9762\uff0c\u5728Verkle\u6811\u4e2d\uff0c\u60a8\u4e0d\u9700\u8981\u63d0\u4f9b\u59d0\u59b9\u8282\u70b9;\u76f8\u53cd\uff0c\u60a8\u53ea\u9700\u63d0\u4f9b\u8def\u5f84\uff0c\u7a0d\u5fae\u66ff\u4ee3\u8bc1\u660e\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48Verkle\u6811\u4ece\u66f4\u5927\u7684\u5bbd\u5ea6\u548cMerkle Patricia\u6811\u4e2d\u53d7\u76ca\u4e8e\uff1a\u4e00\u68f5\u6811\u5bbd\u5ea6\u66f4\u5927\u7684\u6811\u5bfc\u81f4\u4e24\u79cd\u60c5\u51b5\u4e0b\u7684\u8f83\u77ed\u8def\u5f84\uff0c\u4f46\u5728Merkle Patricia\u6811\u4e2d\uff0c\u8fd9\u79cd\u6548\u679c\u88ab\u9700\u8981\u63d0\u4f9b\u6240\u6709\u5bbd\u5ea6\u7684\u66f4\u9ad8\u6210\u672c\u6240\u6df9\u6ca1 - \u51ed\u8bc1\u4e2d\u76841\u4e2a\u59d0\u59b9\u8282\u70b9\u3002\u5728Verkle\u6811\u4e2d\uff0c\u8be5\u6210\u672c\u4e0d\u5b58\u5728\u3002\n \u90a3\u4e48\u6211\u4eec\u9700\u8981\u4f5c\u4e3a\u8bc1\u636e\u7684\u989d\u5916\u989d\u5916\u7684\u989d\u5916\u662f\u4ec0\u4e48\uff1f\u8981\u4e86\u89e3\u5230\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5708\u56de\u4e00\u4e2a\u5173\u952e\u7ec6\u8282\uff1a\u7528\u4e8e\u4ece\u5176\u5b50\u8282\u70b9\u8ba1\u7b97\u5185\u90e8\u8282\u70b9\u7684\u54c8\u5e0c\u51fd\u6570\u4e0d\u662f\u5e38\u89c4\u54c8\u5e0c\u3002\u76f8\u53cd\uff0c\u5b83\uff06\uff0339;\u662f\u77e2\u91cf\u627f\u8bfa\u3002\n \u77e2\u91cf\u627f\u8bfa\u65b9\u6848\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u6563\u5217\u5217\u8868\\\uff08h\uff08z_1\uff0cz_2 ... z_n\uff09\\ lightarrow c \\\uff09\u3002\u4f46\u662f\u77e2\u91cf\u627f\u8bfa\u5177\u6709\u627f\u8bfa\\\uff08c \\\uff09\u548c\u4e00\u4e2a\u503c\\\uff08z_i \\\uff09\uff0c\u5b83\u548c\uff0339; s\u7684\u7279\u6b8a\u5c5e\u6027\uff0c\uff06\uff0339; s\u53ef\u80fd\u505a\u51fa\\\uff08c \\\uff09\u662f\u5bf9\u67d0\u4e9b\u5217\u8868\u7684\u627f\u8bfaI\uff06\uff0339\u7684\u503c; Th\u4f4d\u7f6e\u662f\\\uff08z_i \\\uff09\u3002\u5728Verkle\u9a8c\u8bc1\u4e2d\uff0c\u6b64\u7b80\u77ed\u7684\u8bc1\u660e\u66ff\u6362\u4e86Merkle Patricia\u8bc1\u660e\u4e2d\u7684\u59d0\u59b9\u8282\u70b9\u7684\u529f\u80fd\uff0c\u4f7f\u9a8c\u8bc1\u8005\u4fe1\u5fc3\u4e3a\u5b50\u8282\u70b9\u786e\u5b9e\u662f\u5176\u7236\u8282\u70b9\u7684\u7ed9\u5b9a\u4f4d\u7f6e\u7684\u5b50\u8282\u70b9\u3002\n           \u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6bd4\u77e2\u91cf\u627f\u8bfa\u66f4\u5f3a\u5927\u7684\u539f\u59cb\uff0c\u79f0\u4e3a\u591a\u9879\u5f0f\u627f\u8bfa\u3002\u591a\u9879\u5f0f\u627f\u8bfa\u8ba9\u60a8\u6563\u5217\u591a\u9879\u5f0f\uff0c\u5e76\u5728\u4efb\u4f55\u65f6\u5019\u8fdb\u884c\u8bc4\u4f30\u6563\u5217\u591a\u9879\u5f0f\u7684\u8bc1\u636e\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u591a\u9879\u5f0f\u627f\u8bfa\u4f5c\u4e3a\u77e2\u91cf\u627f\u8bfa\uff1a\u5982\u679c\u6211\u4eec\u540c\u610f\u4e00\u7ec4\u6807\u51c6\u5316\u534f\u8c03\\\uff08\uff08C_1\uff0cC_2 ... C_N\uff09\uff0c\u5219\u7ed9\u51fa\u5217\u8868\\\uff08\uff08y_1\uff0cy_2 ... y_n\uff09\\\uff09\u60a8\u53ef\u4ee5\u63d0\u4ea4\u591a\u9879\u5f0f\\\uff08p \\\uff09\uff0c\u5176\u4e2d\\\uff08p\uff08c_i\uff09= y_i \\\uff09\u6240\u6709\\\uff08i \\\u5728[1..n] \\\u4e2d\uff09\uff08\u60a8\u53ef\u4ee5\u4f7f\u7528Lagrange\u63d2\u503c\u627e\u5230\u6b64\u591a\u9879\u5f0f\uff09\u3002\u6211\u8c08\u8bba\u6211\u5173\u4e8eZK-Snark\u7684\u6587\u7ae0\u4e2d\u7684\u957f\u5ea6\u7684\u591a\u9879\u5f0f\u627f\u8bfa\u3002\u8fd9\u4e24\u4e2a\u591a\u9879\u5f0f\u627f\u8bfa\u65b9\u6848\u662f\u6700\u5bb9\u6613\u4f7f\u7528\u7684\u662fKZG\u627f\u8bfa\u548c\u9632\u5f39\u5f0f\u627f\u8bfa\uff08\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u627f\u8bfa\u662f\u4e00\u4e2a32-48\u5b57\u8282\u692d\u5706\u66f2\u7ebf\u70b9\uff09\u3002\u591a\u9879\u5f0f\u627f\u8bfa\u7ed9\u4e86\u6211\u4eec\u66f4\u591a\u7684\u7075\u6d3b\u6027\uff0c\u8ba9\u6211\u4eec\u63d0\u9ad8\u6548\u7387\uff0c\u5c31\u662f\u8fd9\u6837\uff0c\u5b83\u5c31\u4f1a\u53d1\u751f\u6700\u7b80\u5355\uff0c\u6700\u6709\u6548\u7684\u77e2\u91cf\u627f\u8bfa\u662f\u591a\u9879\u5f0f\u627f\u8bfa\u3002\n \u8fd9\u4e2a\u65b9\u6848\u5df2\u7ecf\u975e\u5e38\u5f3a\u5927\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528KZG\u627f\u8bfa\u548c\u8bc1\u660e\uff0c\u8bc1\u660e\u5c3a\u5bf8\u4e3a96\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u5bbd\u5ea6= 256\uff0c\u5219\u6bd4\u7b80\u5355\u7684Merkle\u9a8c\u8bc1\u66f4\u9ad83\u500d\u3002\u4f46\u662f\uff0c\u5b83\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63d0\u9ad8\u7a7a\u95f4\u6548\u7387\u3002\n        \u901a\u8fc7\u4f7f\u7528\u591a\u9879\u5f0f\u627f\u8bfa\u7684\u989d\u5916\u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u591a\u9879\u5f0f\u627f\u8bfa\u7684\u989d\u5916\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u5bf9\u8def\u5f84\u7684\u6bcf\u4e2a\u627f\u8bfa\u8fdb\u884c\u4e00\u4e2a\u8bc1\u636e\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u6cbf\u7740\u65e0\u9650\u6570\u91cf\u5bc6\u94a5\u7684\u8def\u5f84\u4e4b\u95f4\u8bc1\u660e\u627f\u8bfa\u4e4b\u95f4\u7684\u6240\u6709\u7236\u5b50\u94fe\u63a5\u3002\u6211\u4eec\u4f7f\u7528\u901a\u8fc7\u968f\u673a\u8bc4\u4f30\u5b9e\u73b0\u591a\u4f53\u7684\u65b9\u6848\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\n \u4f46\u8981\u4f7f\u7528\u6b64\u65b9\u6848\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u95ee\u9898\u8f6c\u6362\u4e3a\u66f4\u5177\u7ed3\u6784\u5316\u7684\u95ee\u9898\u3002\u6211\u4eec\u5728Verkle\u6811\u4e2d\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u503c\u7684\u8bc1\u660e\u3002\u6b64\u8bc1\u660e\u7684\u4e3b\u8981\u90e8\u5206\u5305\u62ec\u6cbf\u6bcf\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u7684\u4e2d\u95f4\u8282\u70b9\u7ec4\u6210\u3002\u5bf9\u4e8e\u6211\u4eec\u63d0\u4f9b\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u8fd8\u5fc5\u987b\u8bc1\u660e\u5b83\u5b9e\u9645\u4e0a\u662f\u5b83\u4e0a\u65b9\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff08\u4ee5\u53ca\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\uff09\u3002\u5728\u4e0a\u9762\u7684\u5355\u503c\u9632\u8303\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u8bc1\u660e\u8bc1\u660e\uff1a \n\u5173\u952e\uff1a4CE\u8282\u70b9\u5b9e\u9645\u4e0a\u662f\u524d\u7f00\uff1a4C\u4e2d\u95f4\u8282\u70b9\u7684\u4f4d\u7f6e -  e\u5b50\u8282\u70b9\u3002\n \u524d\u7f00\uff1a4C\u4e2d\u95f4\u8282\u70b9\u5b9e\u9645\u4e0a\u662f\u524d\u7f00\u7684\u4f4d\u7f6e\uff1a4\u4e2d\u95f4\u8282\u70b9\u3002\n \u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u8bc1\u660e\u591a\u4e2a\u503c\u7684\u8bc1\u636e\uff08\u4f8b\u5982\uff0c4CE\u548c420\uff09\uff0c\u6211\u4eec\u5c06\u5177\u6709\u66f4\u591a\u8282\u70b9\u751a\u81f3\u66f4\u591a\u7684\u94fe\u63a5\u3002\u4f46\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u8bc1\u660e\u662f\u4e00\u7cfb\u5217\u8868\u5355\uff06\uff0334\u7684\u9648\u8ff0;\u8282\u70b9A\u5b9e\u9645\u4e0a\u662f\u8282\u70b9B\uff06\uff0334\u7684\u4f4d\u7f6e-I\u5b69\u5b50;\u5982\u679c\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u591a\u9879\u5f0f\u627f\u8bfa\uff0c\u5219\u8fd9\u53d8\u6210\u4e86\u65b9\u7a0b\u5f0f\uff1a\\\uff08a\uff08x_i\uff09= y \\\uff09\uff0c\u5176\u4e2d\\\uff08y \\\uff09\u662f\u5bf9\\\uff08b \\\uff09\u7684\u627f\u8bfa\u7684\u54c8\u5e0c\u3002\n \u8fd9\u4e2a\u8bc1\u636e\u7684\u7ec6\u8282\u662f\u7531Dankrad Feist\u7684\u6280\u672f\u548c\u66f4\u597d\u7684\u89e3\u91ca\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8bc1\u660e\u751f\u6210\u4e2d\u6700\u7c97\u58ee\u548c\u8017\u65f6\u7684\u6b65\u9aa4\u6d89\u53ca\u8ba1\u7b97\u5f62\u5f0f\u7684\u591a\u9879\u5f0f\\\uff08g \\\uff09\uff1a\n \\\uff08g\uff08x\uff09= r ^ 0 \\ frac {a_0\uff08x\uff09 -  y_0} {x  -  x_0} + r ^ 1 \\ frac {a_1\uff08x\uff09 -  y_1} {x  -  x_1} + ... + r ^ n \\ frac {a_n\uff08x\uff09 -  y_n} {x  -  x_n} \\\uff09\n \u5982\u679c\u8be5\u8868\u8fbe\u5f0f\u662f\u591a\u9879\u5f0f\uff08\u800c\u4e0d\u662f\u5206\u6570\uff09\uff0c\u5219\u53ea\u80fd\u8ba1\u7b97\u6bcf\u4e2a\u672f\u8bed\\\uff08r ^ i \\ frac {a_i\uff08x\uff09 -  y_i} {x-x_i} \\\uff09\u3002\u5e76\u4e14\u5728\u70b9\\\uff08x_i \\\uff09\u5904\u9700\u8981\\\uff08a_i\uff08x\uff09\\\uff09\u5230\u7b49\u4e8e\\\uff08y_i \\\uff09\u3002\n  \u6211\u4eec\u6b63\u5728\u8bc1\u660e\\\uff08\uff08x_i = 2\uff0cy_i = 9\uff09\\\uff09\u3002 \\\uff08a_i\uff082\uff09\\\uff09\u7b49\u4e8e\\\uff089 \\\uff09\u6240\u4ee5\u8fd9\u5c06\u6709\u6548\u3002 \n\\\uff08a_i\uff08x\uff09 -  9 = x ^ 2 + x-6 \\\uff09\uff0c\\\uff08\\ frac {x ^ 2 + x  -  6} {x  -  2} \\\uff09\u7ed9\u51fa\u4e00\u4e2aclean \\\uff08x  -  3 \\\uff09 \u3002\u4f46\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u9002\u5408\\\uff08\uff08x_i = 2\uff0cy_i = 10\uff09\\\uff09\uff0c\u8fd9\u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c; \\\uff08x ^ 2 + x-7 \\\uff09\u65e0\u6cd5\u5e72\u51c0\u5730\u9664\u4ee5\\\uff08x  -  2 \\\uff09\u800c\u6ca1\u6709\u5206\u6570\u4f59\u6570\u3002\n \u5176\u4f59\u8bc1\u636e\u6d89\u53ca\u4e3a\\\uff08g\uff08x\uff09\\\uff09\u63d0\u4f9b\u591a\u9879\u5f0f\u627f\u8bfa\uff0c\u7136\u540e\u8bc1\u660e\u627f\u8bfa\u5b9e\u9645\u4e0a\u662f\u6b63\u786e\u7684\u3002\u518d\u6b21\uff0c\u89c1Dankrad\uff06\uff0339;\u5bf9\u5269\u4e0b\u7684\u8bc1\u636e\u8fdb\u884c\u4e86\u66f4\u591a\u6280\u672f\u63cf\u8ff0\u3002\n             Dankrad\uff06\uff0339; S\u591a\u968f\u673a\u8bc4\u4f30\u8bc1\u660e\u5141\u8bb8\u5148\u9a71\u8bc1\u660e\u4efb\u610f\u6570\u91cf\u7684\u8bc4\u4f30\\\uff08a_i\uff08x_i\uff09= y_i \\\uff09\uff0c\u7ed9\u5b9a\u6bcf\u4e2a\\\uff08a_i \\\uff09\u7684\u627f\u8bfa\u4ee5\u53ca\u88ab\u8bc1\u660e\u7684\u503c\u3002\u6b64\u8bc1\u660e\u662f\u6052\u5b9a\u5c3a\u5bf8\uff08\u4e00\u4e2a\u591a\u9879\u5f0f\u627f\u8bfa\uff0c\u4e00\u4e2a\u6570\u5b57\u548c\u4e24\u4e2a\u8bc1\u636e;\u6839\u636e\u6b63\u5728\u4f7f\u7528\u7684\u65b9\u6848\uff0c128-1000\u5b57\u8282\uff09\u3002\n \u4e0d\u9700\u8981\u663e\u5f0f\u63d0\u4f9b\\\uff08y_i \\\uff09\u503c\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u4eceVerkle\u6821\u6837\u4e2d\u7684\u5176\u4ed6\u503c\u76f4\u63a5\u8ba1\u7b97\uff1a\u6bcf\u4e2a\\\uff08y_i \\\uff09\u672c\u8eab\u662f\u8def\u5f84\u4e2d\u4e0b\u4e00\u4e2a\u503c\u7684\u6563\u5217\uff08\u65e0\u8bba\u662f\u627f\u8bfa\u6216\u53f6\u5b50\uff09\u3002\n \u4e5f\u4e0d\u9700\u8981\u660e\u786e\u5730\u63d0\u4f9b\\\uff08x_i \\\uff09\u503c\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4ece\u952e\u548c\u4ece\u8def\u5f84\u6d3e\u751f\u7684\u5750\u6807\u8ba1\u7b97\u8def\u5f84\uff08\u5e76\u4e14\u56e0\u6b64\\\uff08x_i \\\uff09\u503c\uff09\u3002\n \u56e0\u6b64\uff0c\u6211\u4eec\u6240\u9700\u8981\u7684\u53ea\u662f\u6211\u4eec\u8bc1\u660e\u7684\u53f6\u5b50\uff08\u952e\u548c\u503c\uff09\uff0c\u4ee5\u53ca\u6cbf\u7740\u6bcf\u4e2a\u53f6\u5b50\u5230\u6839\u7684\u8def\u5f84\u7684\u627f\u8bfa\u3002\n \u5047\u8bbe\u5bbd\u5ea6-256\u6811\u548c\\\uff082 ^ {32} \\\uff09\u8282\u70b9\uff0c\u8bc1\u660e\u9700\u8981\u88ab\u8bc1\u660e\u7684\u952e\u548c\u503c\uff0c\u4ee5\u53ca\u6cbf\u7740\u8be5\u503c\u7684\u8def\u5f84\u7684\u6bcf\u4e2a\u503c\u7684\u4e09\u4e2a\u627f\u8bfa\u6839\u3002 \n\u5982\u679c\u6211\u4eec\u8bc1\u660e\u8bb8\u591a\u503c\uff0c\u8fd8\u8282\u7701\u4e86\u8fdb\u4e00\u6b65\u7684\u8282\u7701\uff1a\u65e0\u8bba\u60a8\u8bc1\u660e\u591a\u5c11\u503c\uff0c\u90fd\u4e0d\u9700\u8981\u5728\u9876\u7ea7\u63d0\u4f9b\u8d85\u8fc7256\u4e2a\u503c\u3002\n   \u5047\u8bbe\u5bbd\u5ea6256\u548c48\u5b57\u8282KZG\u627f\u8bfa/\u8bc1\u660e\u3002\u8fd8\u8981\u6ce8\u610f\uff0c\u8fd9\u5047\u5b9a\u4e86\u6700\u5927\u7684\u6811\u6728;\u5bf9\u4e8e\u4e00\u4e2a\u771f\u5b9e\u7684\u968f\u673a\u6811\uff0c\u6df1\u5ea6\u4e3a\u301c0.6\uff08\u6bcf\u4e2a\u5143\u7d20\u6240\u4ee5\u301c30\u4e2a\u5b57\u8282\uff09\u3002\u5982\u679c\u4f7f\u7528\u9632\u5f39\u5f0f\u627f\u8bfa\u800c\u4e0d\u662fKZG\uff0c\u5b83\u7684\u5b89\u5168\u6027\u5c06\u964d\u81f332\u5b57\u8282\uff0c\u56e0\u6b64\u8fd9\u4e9b\u5c3a\u5bf8\u53ef\u4ee5\u51cf\u5c111/3\u3002\n  \u751f\u6210\u8bc1\u636e\u7684\u5927\u90e8\u5206\u662f\u8ba1\u7b97\u6bcf\u4e2a\\\uff08r ^ i \\ frac {a_i\uff08x\uff09 -  y_i} {x-x_i} \\\uff09\u8868\u8fbe\u5f0f\u3002\u8fd9\u9700\u8981\u5927\u81f4\u56db\u4e2a\u73b0\u573a\u64cd\u4f5c\uff08\u5373256\u4f4d\u6a21\u5757\u5316\u7b97\u672f\u8fd0\u7b97\uff09\u6811\u7684\u5bbd\u5ea6\u3002\u8fd9\u662f\u4e3b\u8981\u7ea6\u675f\u9650\u5236Verkle\u6811\u5bbd\u5ea6\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u56db\u4e2a\u73b0\u573a\u64cd\u4f5c\u662f\u4e00\u79cd\u5c0f\u6210\u672c\uff1a\u5355\u4e2a\u692d\u5706\u66f2\u7ebf\u4e58\u6cd5\u901a\u5e38\u9700\u8981\u6570\u767e\u4e2a\u73b0\u573a\u64cd\u4f5c\u3002\u56e0\u6b64\uff0cVerkle\u6811\u5bbd\u53ef\u4ee5\u5f88\u9ad8;\u5bbd\u5ea6256-1024\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6700\u4f73\u8303\u56f4\u3002\n \u8981\u7f16\u8f91\u6811\uff0c\u6211\u4eec\u9700\u8981\uff06\uff0334;\u8d70\u4e0a\u6811\uff06\uff0334;\u4ece\u53f6\u5b50\u5230\u6839\u90e8\uff0c\u6539\u53d8\u6bcf\u4e2a\u6b65\u9aa4\u7684\u4e2d\u95f4\u627f\u8bfa\uff0c\u53cd\u6620\u53d1\u751f\u8f83\u4f4e\u7684\u53d8\u5316\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u5fc5\u91cd\u65b0\u8ba1\u7b97\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u8ba1\u7b97\u6bcf\u4e2a\u627f\u8bfa\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5229\u7528\u4e86\u540c\u6027\u604b\u6027\u8d28\uff1a\u7ed9\u5b9a\u591a\u9879\u5f0f\u627f\u8bfa\\\uff08c = com\uff08f\uff09\\\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\\\uff08c\uff06\uff0339\u6765\u8ba1\u7b97\\\uff08c\uff06\uff0339; = com\uff08f + g\uff09\\\uff09 ; = C + COM\uff08g\uff09\\\uff09\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\\\uff08g = l_i *\uff08v_ {new}  -  v_ {old}\uff09\\\uff09\uff0c\u5176\u4e2d\\\uff08l_i \\\uff09\u662f\u5bf9\u591a\u9879\u5f0f\u7684\u9884\u5148\u8ba1\u7b97\u7684\u627f\u8bfa\uff0c\u5176\u5728\u6211\u4eec\uff06\uff0339\u7684\u4f4d\u7f6e\u7b49\u4e8e1; Re\u8bd5\u56fe\u5728\u5176\u4ed6\u5730\u65b9\u6539\u53d8\u548c0\u3002\n \u56e0\u6b64\uff0c\u5355\u4e2a\u7f16\u8f91\u9700\u8981\u301c4\u4e2a\u692d\u5706\u66f2\u7ebf\u4e58\u6cd5\uff08\u53f6\u7247\u4e4b\u95f4\u7684\u6bcf\u4e2a\u627f\u8bfa\uff0c\u8fd9\u6b21\u5305\u62ec\u6839\uff09\uff0c\u4f46\u662f\u901a\u8fc7\u9884\u5148\u8ba1\u7b97\u548c\u5b58\u50a8\u6bcf\u4e2a\\\uff08L_I \\\u7684\u8bb8\u591a\u500d\u6570\uff0c\u5b83\u4eec\u53ef\u4ee5\u5927\u5927\u52a0\u901f\u8fd9\u4e9b\u65f6\u95f4\uff09\u3002\n \u8bc1\u660e\u9a8c\u8bc1\u975e\u5e38\u6709\u6548\u3002\u5bf9\u4e8eN\u503c\u7684\u8bc1\u660e\uff0c\u9a8c\u8bc1\u8005\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u6240\u6709\u8fd9\u4e9b\u6b65\u9aa4\u90fd\u53ef\u4ee5\u5728\u6570\u5343\u6beb\u79d2\u5185\u5b8c\u6210\uff0c\u4ee5\u4fbf\u6570\u5343\u4e2a\u503c\uff1a\n \u4e0d\u4f9d\u8d56\u4e8e\u8bc1\u660e\u7684\u89c4\u6a21\u7684\u5c0f\u6301\u7eed\u5de5\u4f5c\u91cf \n\u53e6\u8bf7\u6ce8\u610f\uff0c\u4e0eMerkle Patricia\u8bc1\u660e\u4e00\u6837\uff0cVerkle\u51ed\u8bc1\u4e3a\u9a8c\u8bc1\u8005\u63d0\u4f9b\u4e86\u8db3\u591f\u7684\u4fe1\u606f\u4ee5\u4fee\u6539\u5728\u5e94\u7528\u66f4\u6539\u540e\u88ab\u8bc1\u660e\u7684\u6811\u4e2d\u7684\u503c\u5e76\u8ba1\u7b97\u65b0\u7684\u6839\u54c8\u5e0c\u503c\u3002\u8fd9\u5bf9\u4e8e\u9a8c\u8bc1\u4f8b\u5982\u3002\u6b63\u786e\u5904\u7406\u5757\u7684\u72b6\u6001\u53d8\u5316\u3002\n  Verkle\u6811\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5347\u7ea7\u5230Merkle\u8bc1\u636e\uff0c\u5141\u8bb8\u66f4\u5c0f\u7684\u6821\u6837\u5c3a\u5bf8\u3002\u800c\u4e0d\u662f\u9700\u8981\u63d0\u4f9b\u6240\u6709\uff06\uff0334;\u59d0\u59b9\u8282\u70b9\uff06\uff0334;\u5728\u6bcf\u4e2a\u7ea7\u522b\uff0cPROVER\u4ec5\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u5355\u4e00\u7684\u8bc1\u636e\uff0c\u8fd9\u4e9b\u8bc1\u660e\u8bc1\u660e\u4e86\u6cbf\u7740\u6bcf\u4e2a\u53f6\u8282\u70b9\u7684\u8def\u5f84\u5230\u6839\u76ee\u5f55\u7684\u6240\u6709\u627f\u8bfa\u4e4b\u95f4\u7684\u6240\u6709\u7236\u5b50\u5173\u7cfb\u3002\u4e0e\u7406\u60f3\u7684Merkle\u6811\u76f8\u6bd4\uff0c\u8fd9\u5141\u8bb8\u8bc1\u660e\u5c3a\u5bf8\u51cf\u5c0f\u301c6-8\u500d\uff0c\u4e0eEthereum\u4f7f\u7528\u4eca\u5929\uff08!!\uff09\u76f8\u6bd4\uff0c\u76f8\u6bd4\u4e4b\u4e0b\u8d85\u8fc720-30\u500d\u3002\n \u4ed6\u4eec\u786e\u5b9e\u9700\u8981\u66f4\u590d\u6742\u7684\u52a0\u5bc6\u6765\u5b9e\u73b0\uff0c\u4f46\u5b83\u4eec\u5448\u73b0\u51fa\u5927\u91cf\u589e\u957f\u7684\u673a\u4f1a\u3002\u5728\u4e2d\u671f\uff0cSnarks\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6539\u8fdb\u5185\u5bb9\uff1a\u6211\u4eec\u53ef\u4ee5\u5c06\u5df2\u7ecf\u6709\u6548\u7684Verkle\u9a8c\u8bc1\u9a8c\u8bc1\u8005\u6269\u5c55\u5230\u63a5\u8fd1\u96f6\u7684\u8bc1\u4eba\u5927\u5c0f\uff0c\u6216\u8005\u5982\u679c/\u5f53SNARKS\u66f4\u597d\u65f6\uff0c\u8bf7\u5207\u6362\u56deSNARKED Merkle\u6821\u6837\uff08\u4f8b\u5982\uff0c\u901a\u8fc7GKR \uff0c\u6216\u975e\u5e38\u72e1\u733e\u7684\u54c8\u5e0c\u51fd\u6570\u6216asics\uff09\u3002\u8fdb\u4e00\u6b65\u4e0b\u884c\uff0c\u91cf\u5b50\u8ba1\u7b97\u7684\u5174\u8d77\u5c06\u8feb\u4f7f\u6539\u53d8\u4e0e\u54c8\u91cc\u65af\u7684\u54c8\u5c14\u514b\u52d2\u8bc1\u636e\u7684\u53d8\u5316\uff0c\u56e0\u4e3a\u5b83\u4f7f\u5f97Verkle\u6811\u53d6\u51b3\u4e8e\u4e0d\u5b89\u5168\u7684\u7ebf\u6027\u540c\u6001\u3002\u4f46\u662f\uff0c\u73b0\u5728\uff0c\u4ed6\u4eec\u5411\u6211\u4eec\u63d0\u4f9b\u4e86\u6211\u4eec\u5c06\u83b7\u5f97\u8fd9\u79cd\u66f4\u5148\u8fdb\u7684\u6280\u672f\u7684\u76f8\u540c\u7f29\u653e\u589e\u76ca\uff0c\u6211\u4eec\u5df2\u7ecf\u62e5\u6709\u4e86\u6240\u6709\u7684\u5de5\u5177\uff0c\u6211\u4eec\u9700\u8981\u6709\u6548\u5730\u5b9e\u73b0\u5b83\u4eec\u3002 ", "note_en": "Verkle trees are shaping up to be an important part of Ethereum&#39;s upcoming scaling upgrades. They serve the same function as Merkle trees: you can put a large amount of data into a Verkle tree, and make a short proof (&#34;witness&#34;) of any single piece, or set of pieces, of that data that can be verified by someone who only has the root of the tree. The key property that Verkle trees provide, however, is that they are  much more efficient in proof size. If a tree contains a billion pieces of data, making a proof in a traditional binary Merkle tree would require about 1 kilobyte, but in a Verkle tree the proof would be  less than 150 bytes - a reduction sufficient to make  stateless clients finally viable in practice.\n This post will explain what Verkle trees are and how the cryptographic magic behind them works. The price of their short proof size is a higher level of dependence on more complicated cryptography. That said, the cryptography still much simpler, in my opinion, than the advanced cryptography found in  modern ZK SNARK  schemes. In this post I&#39;ll do the best job that I can at explaining it.\n  In terms of the  structure of the tree (how the nodes in the tree are arranged and what they contain), a Verkle tree is very similar to the  Merkle Patricia tree currently used in Ethereum. Every node is either (i) empty, (ii) a leaf node containing a key and value, or (iii) an intermediate node that has some fixed number of children (the &#34;width&#34; of the tree). The value of an intermediate node is computed as a hash of the values of its children.\n The location of a value in the tree is based on its key: in the diagram below, to get to the node with key  4cc, you start at the root, then go down to the child at position  4, then go down to the child at position  c (remember:  c = 12 in hexadecimal), and then go down again to the child at position  c. To get to the node with key  baaa, you go to the position- b child of the root, and then the position- a child of  that node. The node at path  (b,a) directly contains the node with key  baaa, because there are no other keys in the tree starting with  ba.\n           The only real difference in the  structure of Verkle trees and Merkle Patricia trees is that Verkle trees are wider in practice.  Much wider. Patricia trees are at their most efficient when  width = 2 (so Ethereum&#39;s hexary Patricia tree is actually quite suboptimal). Verkle trees, on the other hand, get shorter and shorter proofs the higher the width; the only limit is that if width gets  too high, proofs start to take too long to create. The  Verkle tree proposed for Ethereum has a width of 256, and some even favor raising it to 1024 (!!).\n  In a Merkle tree (including Merkle Patricia trees), the proof of a value consists of the entire set of  sister nodes: the proof must contain all nodes in the tree that  share a parent with any of the nodes in the path going down to the node you are trying to prove. That may be a little complicated to understand, so here&#39;s a picture of a proof for the value in the  4ce position. Sister nodes that must be included in the proof are highlighted in red.\n         That&#39;s a lot of nodes! You need to provide the sister nodes at each level, because you need the entire set of children of a node to compute the value of that node, and you need to keep doing this until you get to the root. You might think that this is not that bad because most of the nodes are zeroes, but that&#39;s only because this tree has very few nodes. If this tree had 256 randomly-allocated nodes, the top layer would almost certainly have all 16 nodes full, and the second layer would on average be ~63.3% full.\n In a Verkle tree, on the other hand, you do not need to provide sister nodes; instead, you just provide the path, with a little bit extra as a proof. This is why Verkle trees benefit from greater width and Merkle Patricia trees do not: a tree with greater width leads to shorter paths in both cases, but in a Merkle Patricia tree this effect is overwhelmed by the higher cost of needing to provide all the  width - 1 sister nodes per level in a proof. In a Verkle tree, that cost does not exist.\n So what is this little extra that we need as a proof? To understand that, we first need to circle back to one key detail: the hash function used to compute an inner node from its children is not a regular hash. Instead, it&#39;s a  vector commitment.\n A vector commitment scheme is a special type of hash function, hashing a list  \\(h(z_1, z_2 ... z_n) \\rightarrow C\\). But vector commitments have the special property that for a commitment  \\(C\\) and a value  \\(z_i\\), it&#39;s possible to make a short proof that  \\(C\\) is the commitment to some list where the value at the i&#39;th position is  \\(z_i\\). In a Verkle proof, this short proof replaces the function of the sister nodes in a Merkle Patricia proof, giving the verifier confidence that a child node really is the child at the given position of its parent node.\n           In practice, we use a primitive even more powerful than a vector commitment, called a  polynomial commitment. Polynomial commitments let you hash a polynomial, and make a proof for the evaluation of the hashed polynomial at  any point. You can use polynomial commitments as vector commitments: if we agree on a set of standardized coordinated  \\((c_1, c_2 ... c_n)\\), given a list  \\((y_1, y_2 ... y_n)\\) you can commit to the polynomial  \\(P\\) where  \\(P(c_i) = y_i\\) for all  \\(i \\in [1..n]\\) (you can find this polynomial with  Lagrange interpolation). I talk about polynomial commitments at length  in my article on ZK-SNARKs. The two polynomial commitment schemes that are the easiest to use are  KZG commitments and  bulletproof-style commitments (in both cases, a commitment is a single 32-48 byte elliptic curve point). Polynomial commitments give us more flexibility that lets us improve efficiency, and it just so happens that the simplest and most efficient vector commitments available  are the polynomial commitments.\n This scheme is already very powerful as it is:  if you use a KZG commitment and proof, the proof size is 96 bytes per intermediate node, nearly 3x more space-efficient than a simple Merkle proof if we set width = 256. However, it turns out that we can increase space-efficiency even further.\n        Instead of requiring one proof for each commitment along the path,  by using the extra properties of polynomial commitments we can make a single fixed-size proof that proves  all parent-child links between commitments along the paths for an unlimited number of keys. We do this using a  scheme that implements multiproofs through random evaluation.\n But to use this scheme, we first need to convert the problem into a more structured one. We have a proof of one or more values in a Verkle tree. The main part of this proof consists of the intermediary nodes along the path to each node. For each node that we provide, we also have to prove that it actually is the child of the node above it (and in the correct position). In our single-value-proof example above, we needed proofs to prove:\n That the  key: 4ce node actually is the position- e child of the  prefix: 4c intermediate node.\n That the  prefix: 4c intermediate node actually is the position- c child of the  prefix: 4 intermediate node.\n If we had a proof proving multiple values (eg. both  4ce and  420), we would have even more nodes and even more linkages. But in any case,  what we are proving is a sequence of statements of the form &#34;node A actually is the position-i child of node B&#34;. If we are using polynomial commitments, this turns into equations:  \\(A(x_i) = y\\), where  \\(y\\) is the hash of the commitment to  \\(B\\).\n The details of this proof are technical and better  explained by Dankrad Feist than myself. By far the bulkiest and time-consuming step in the proof generation involves computing a polynomial  \\(g\\) of the form:\n \\(g(X) = r^0\\frac{A_0(X) - y_0}{X - x_0} + r^1\\frac{A_1(X) - y_1}{X - x_1} + ... + r^n\\frac{A_n(X) - y_n}{X - x_n}\\)\n It is only possible to compute each term  \\(r^i\\frac{A_i(X) - y_i}{X - x_i}\\) if that expression is a polynomial (and not a fraction). And that requires  \\(A_i(X)\\) to equal  \\(y_i\\) at the point  \\(x_i\\).\n  We are proving for  \\((x_i = 2, y_i = 9)\\).  \\(A_i(2)\\) does equal  \\(9\\) so this will work.\n \\(A_i(X) - 9 = X^2 + X - 6\\), and  \\(\\frac{X^2 + X - 6}{X - 2}\\) gives a clean  \\(X - 3\\). But if we tried to fit in  \\((x_i = 2, y_i = 10)\\), this would not work;  \\(X^2 + X - 7\\)  cannot be cleanly divided by  \\(X - 2\\) without a fractional remainder.\n The rest of the proof involves providing a polynomial commitment to  \\(g(X)\\) and then proving that the commitment is actually correct. Once again, see  Dankrad&#39;s more technical description for the rest of the proof.\n             Dankrad&#39;s multi-random-evaluation proof allows the prover to  prove an arbitrary number of evaluations  \\(A_i(x_i) = y_i\\), given commitments to each  \\(A_i\\) and the values that are being proven.  This proof is constant size (one polynomial commitment, one number, and two proofs; 128-1000 bytes depending on what scheme is being used).\n The  \\(y_i\\) values do not need to be provided explicitly, as they can be directly computed from the other values in the Verkle proof: each  \\(y_i\\) is itself the hash of the next value in the path (either a commitment or a leaf).\n The  \\(x_i\\) values also do not need to be provided explicitly, since the paths (and hence the  \\(x_i\\) values) can be computed from the keys and the coordinates derived from the paths.\n Hence,  all we need is the leaves (keys and values) that we are proving, as well as the commitments along the path from each leaf to the root.\n Assuming a width-256 tree, and  \\(2^{32}\\) nodes, a proof would require the keys and values that are being proven, plus (on average)  three commitments for each value along the path from that value to the root.\n If we are proving many values, there are further savings: no matter how many values you are proving, you will not need to provide more than the 256 values at the top level.\n   Assuming width 256, and 48-byte KZG commitments/proofs. Note also that this assumes a maximally even tree; for a realistic randomized tree, add a depth of ~0.6 (so ~30 bytes per element). If bulletproof-style commitments are used instead of KZG, it&#39;s safe to go down to 32 bytes, so these sizes can be reduced by 1/3.\n  The bulk of the  cost of generating a proof is computing each  \\(r^i\\frac{A_i(X) - y_i}{X - x_i}\\) expression. This requires roughly four field operations (ie. 256 bit modular arithmetic operations) times the width of the tree. This is the main constraint limiting Verkle tree widths. Fortunately, four field operations is a small cost: a single elliptic curve multiplication typically takes hundreds of field operations. Hence, Verkle tree widths can go quite high; width 256-1024 seems like an optimal range.\n To  edit the tree, we need to &#34;walk up the tree&#34; from the leaf to the root, changing the intermediate commitment at each step to reflect the change that happened lower down. Fortunately, we don&#39;t have to re-compute each commitment from scratch. Instead, we take advantage of the homomorphic property: given a polynomial commitment  \\(C = com(F)\\), we can compute  \\(C&#39; = com(F + G)\\) by taking  \\(C&#39; = C + com(G)\\). In our case,  \\(G = L_i * (v_{new} - v_{old})\\), where  \\(L_i\\) is a pre-computed commitment for the polynomial that equals 1 at the position we&#39;re trying to change and 0 everywhere else.\n Hence, a single edit requires ~4 elliptic curve multiplications (one per commitment between the leaf and the root, this time including the root), though these can be sped up considerably by pre-computing and storing  many multiples of each  \\(L_i\\).\n Proof verification is quite efficient. For a proof of N values, the verifier needs to do the following steps, all of which can be done within a hundred milliseconds for even thousands of values:\n A small constant amount of work that does not depend on the size of the proof\n Note also that, like Merkle Patricia proofs, a Verkle proof gives the verifier enough information to  modify the values in the tree that are being proven and compute the new root hash after the changes are applied. This is critical for verifying that eg. state changes in a block were processed correctly.\n  Verkle trees are a powerful upgrade to Merkle proofs that allow for much smaller proof sizes. Instead of needing to provide all &#34;sister nodes&#34; at each level, the prover need only provide a single proof that proves  all parent-child relationships between all commitments along the paths from each leaf node to the root. This allows proof sizes to decrease by a factor of ~6-8 compared to ideal Merkle trees, and by a factor of over 20-30 compared to the hexary Patricia trees that Ethereum uses today (!!).\n They do require more complex cryptography to implement, but they present the opportunity for large gains to scalability. In the medium term, SNARKs can improve things further: we can either SNARK the already-efficient Verkle proof verifier to reduce witness size to near-zero, or switch back to SNARKed Merkle proofs if/when SNARKs get much better (eg.  through GKR, or very-SNARK-friendly hash functions, or ASICs). Further down the line, the rise of quantum computing will force a change to STARKed Merkle proofs with hashes as it makes the linear homomorphisms that Verkle trees depend on insecure. But for now, they give us the same scaling gains that we would get with such more advanced technologies, and we already have all the tools that we need to implement them efficiently.", "posttime": "2021-06-19 06:02:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6811\u6728,verkle,\u8bc1\u660e", "title": "\u5de7\u5999\u7684\u6811\u6728 ", "title_en": "Verkle Trees", "transed": 1, "url": "https://vitalik.ca/general/2021/06/18/verkle.html", "via": "", "real_tags": ["\u6811\u6728", "verkle", "\u8bc1\u660e"]}, {"category": "", "categoryclass": "", "imagename": "aa96f35ab6da82e2ca576cd21291fbf3.jpg", "infoid": 1066777, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Qiang\u7b49\u4eba\u8fdb\u884c\u7684\u7814\u7a76\u5df2\u7ecf\u53d1\u73b0\u4e86\u7ea2\u7ec6\u80de\u86cb\u767d\u8d28\u4e0e\u8ba4\u77e5\u6027\u80fd\u7684\u5e74\u9f84\u76f8\u5173\u7684\u86cb\u767d\u8d28\u4e4b\u95f4\u7684\u8054\u7cfb\u3002\u57282021\u5e746\u670817\u65e5\u5728\u5f00\u653e\u5f0f\u901a\u9053\u671f\u520aPLOS\u751f\u7269\u5b66\u4e0a\u53d1\u8868\uff0c\u7814\u7a76\u8868\u660e\uff0c\u86cb\u767d\u8d28ADORA2B\u7684\u8017\u5c3d\u5c0f\u9f20\u8840\u6db2\u5bfc\u81f4\u8bb0\u5fc6\u4e2d\u7684\u901f\u5ea6\u66f4\u5feb\uff0c\u542c\u89c9\u5904\u7406\u5ef6\u8fdf\uff0c\u4ee5\u53ca\u5927\u8111\u4e2d\u7684\u708e\u75c7\u589e\u52a0\u3002\u6b63\u5982\u4e16\u754c\u5404\u5730\u7684\u589e\u52a0\uff0c\u90a3\u4e9b\u4f1a\u9047\u5230\u7684\u4eba\u6570\u4e5f\u662f\u5982\u6b64\u3002\u7531\u4e8e\u8840\u6db2\u4e2d\u7684\u6c27\u6c14\u91cf\u968f\u7740\u5e74\u9f84\u7684\u589e\u957f\uff0c\u8be5\u56e2\u961f\u5047\u8bbe\u5927\u8111\u4e2d\u7684\u8001\u5316\u53ef\u4ee5\u901a\u8fc7\u817a\u82f7\u53d7\u4f53A2b\uff08adora2b\uff09\uff0c\u5176\u819c\u4e0a\u7684\u86cb\u767d\u8d28\u662f\u5df2\u77e5\u4ece\u4e2d\u91ca\u653e\u6c27\u6c14\u7684\u86cb\u767d\u8d28\u8840\u7ec6\u80de\u4f7f\u5176\u53ef\u4ee5\u7528\u8eab\u4f53\u4f7f\u7528\u3002\u4e3a\u4e86\u6d4b\u8bd5\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u4ed6\u4eec\u521b\u9020\u4e86\u7f3a\u4e4f\u8840\u6db2\u7684\u5c0f\u9f20\uff0c\u5e76\u4e0e\u5bf9\u7167\u5c0f\u9f20\u8fdb\u884c\u6bd4\u8f83\u884c\u4e3a\u548c\u751f\u7406\u63aa\u65bd\u3002\n  \u8be5\u56e2\u961f\u53d1\u73b0\uff0c\u968f\u7740\u8001\u9f20\u7684\u8001\u9f20\uff0c\u8ba4\u77e5\u62d2\u7edd\u8bb0\u5fc6\uff0c\u542c\u529b\u7f3a\u9677\u548c\u5927\u8111\u4e2d\u7684\u6807\u5fd7 - \u5728\u7f3a\u4e4fadora2b\u7684\u5c0f\u9f20\u4e2d\u7f3a\u4e4f\u6bd4\u5bf9\u7167\u5c0f\u9f20\u66f4\u5927\u3002\u6b64\u5916\uff0c\u5728\u7ecf\u5386\u4e00\u6bb5\u65f6\u95f4\u7684\u7f3a\u6c27\u671f\u540e\uff0c\u6ca1\u6709adora2b\u7684\u5e7c\u5c0f\u5c0f\u9f20\u7684\u884c\u4e3a\u548c\u751f\u7406\u4f5c\u7528\u8fdc\u5927\u4e8e\u6b63\u5e38\u5e7c\u5c0f\u5c0f\u9f20\u7684\u5c0f\u9f20\u3002\n  \u56e0\u6b64\uff0c\u8111\u4e2d\u7684\u8001\u5316\u5929\u7136\u88abAdora2b\u81ea\u7136\u51cf\u5c11\uff0c\u8fd9\u6709\u52a9\u4e8e\u5728\u9700\u8981\u65f6\u5bf9\u5927\u8111\u8fdb\u884c\u6c27\u6c14\u3002\u5c06\u9700\u8981\u8fdb\u4e00\u6b65\u6d4b\u8bd5\u4ee5\u786e\u5b9aAdora2b\u6c34\u5e73\u662f\u5426\u81ea\u7136\u5730\u968f\u7740\u5e74\u9f84\u7684\u5e74\u9f84\u548c\u6fc0\u6d3badora2b\u7684\u836f\u7269\u6cbb\u7597\uff0c\u53ef\u4ee5\u964d\u4f4e\u6b63\u5e38\u5c0f\u9f20\u7684\u8ba4\u77e5\u4e0b\u964d\u3002\n  \u590f\u535a\u58eb\uff0c\u7814\u7a76\u7684\u9886\u5bfc\u8005\uff0c\u8bc4\u8bba\u9053\u548c\uff0334;\u7ea2\u8272\u5177\u6709\u4e0d\u53ef\u66ff\u4ee3\u7684\u529f\u80fd\uff0c\u53ef\u63d0\u4f9b\u6c27\u6c14\uff0c\u4ee5\u7ef4\u6301\u6211\u4eec\u8eab\u4f53\u5185\u6bcf\u79cd\u7ec6\u80de\u7684\u751f\u7269\u7ec8\u4f53\u5b66\u3002\u7136\u800c\uff0c\u5b83\u4eec\u5728\u4e0e\u5e74\u9f84\u76f8\u5173\u7684\u8ba4\u77e5\u548c\u542c\u529b\u529f\u80fd\u4e2d\u7684\u529f\u80fd\u4ecd\u7136\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u672a\u77e5\u7684\u3002\u6211\u4eec\u7684\u7814\u7a76\u7ed3\u679c\u8868\u660e\uff0c\u901a\u8fc7\u4fc3\u8fdb\u5c0f\u9f20\u7684\u6c27\u8f93\u9001\u5e76\u7acb\u5373\u7a81\u51fa\u591a\u4e2a\u65b0\u7684\u6062\u590d\u76ee\u6807\uff06\uff0334\uff0c\u7ea2\u7ec6\u80deAdora2b\u4fe1\u53f7\u4f20\u5bfc\u7ea7\u8054\u7fa4\u4f53\u5bf9\u6297\u8ba4\u77e5\uff0c\u8bb0\u5fc6\u548c\u542c\u529b\u7684\u65e9\u671f\u53d1\u4f5c\uff0c\u5e76\u7acb\u5373\u5f3a\u8c03\u591a\u4e2a\u65b0\u7684\u6062\u590d\u76ee\u6807\uff06\uff0334;\u66f4\u591a\u4fe1\u606f\uff1a\u5f3aQ\uff0cManalo JM\uff0cSun H\uff0cZhang Y\uff0cSong A\uff0cWen AQ\u7b49\u3002 \uff082021\uff09\u7ea2\u7ec6\u80de\u817a\u82f7A2B\u53d7\u4f53\u901a\u8fc7\u4fc3\u8fdb\u7f3a\u6c27\u548c\u4ee3\u8c22\u91cd\u7f16\u7a0b\u6765\u9632\u6b62\u8ba4\u77e5\u548c\u542c\u89c9\u529f\u80fd\u969c\u788d\u3002 Plos Biol 19\uff086\uff09\uff1aE3001239\u3002 doi.org/10.1371/journal.pbio.3001239 ", "note_en": "Research conducted by Qiang et al has discovered a link between a protein in red blood cells and age-related decline in cognitive performance. Published in the open access journal  PLOS Biology on 17th June 2021, the study shows that depleting mouse blood of the protein ADORA2B leads to faster declines in memory, delays in auditory processing, and increased inflammation in the brain.    As   around the world increase, so are the number of people who will experience  . Because the amount of oxygen in the blood also declines with age, the team hypothesized that aging in the brain might be naturally held at bay by adenosine receptor A2B (ADORA2B), a protein on the membrane of   which is known to help release oxygen from the blood cells so it can be used by the body. To test this idea, they created mice that lacked ADORA2B in their blood and compared behavioral and physiological measures with control mice.\n  The team found that as the mice got older, the hallmarks of cognitive decline\u2014poor memory, hearing deficits, and   in the brain\u2014were all greater in the mice lacking ADORA2B than in the control mice. Additionally, after experiencing a period of oxygen deprivation, the behavioral and physiological effects on young mice without ADORA2B were much greater than those on normal young mice.\n  Thus, aging in the brain is naturally reduced by ADORA2B, which helps get oxygen to the brain when needed. Further testing will be needed to determine whether ADORA2B levels naturally decline with age and whether treatment with drugs that activate ADORA2B can reduce cognitive decline in normal mice.\n  Dr. Xia, the leader of the study, commented &#34;Red   have an irreplaceable function to deliver oxygen to maintain bioenergetics of every single cell within our body. However, their function in age-related cognition and hearing function remains largely unknown. Our findings reveal that the red blood cell ADORA2B signaling cascade combats early onset of   in cognition, memory and hearing by promoting oxygen delivery in mice and immediately highlight multiple new rejuvenating targets&#34;.        More information:\t\t\t\t\t\t\t\t\t\t\t\tQiang Q, Manalo JM, Sun H, Zhang Y, Song A, Wen AQ, et al. (2021) Erythrocyte adenosine A2B receptor prevents cognitive and auditory dysfunction by promoting hypoxic and metabolic reprogramming.  PLoS Biol 19(6): e3001239.  doi.org/10.1371/journal.pbio.3001239", "posttime": "2021-06-19 06:01:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ba4\u77e5,\u86cb\u767d,aging,adora2b", "title": "\u7ea2\u7ec6\u80de\u4e2d\u7684\u6297\u8870\u8001\u86cb\u767d\u6709\u52a9\u4e8e\u907f\u514d\u8ba4\u77e5\u4e0b\u964d ", "title_en": "Anti-aging protein in red blood cells helps stave off cognitive decline", "transed": 1, "url": "https://medicalxpress.com/news/2021-06-anti-aging-protein-red-blood-cells.html", "via": "", "real_tags": ["\u8ba4\u77e5", "\u86cb\u767d", "aging", "adora2b"]}]