[{"category": "", "categoryclass": "", "imagename": "b488ec38c57227f3e65988857ac12d0f.jpg", "infoid": 1009976, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ed9\u5b9a\u5b9e\u6570$x$\uff0c\u521d\u7b49\u4ee3\u6570\u4e2d\u7684\u6311\u6218\u4e4b\u4e00\u662f\u5c06$x$\u8868\u793a\u4e3a\u53e6\u4e00\u4e2a\u6570\u5b57$b$\u7684\u5e42(\u79f0\u4e3a\u57fa\u6570)\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u627e\u5230\u4e00\u4e2a\u7f16\u53f7$\\Box$\uff0c\u4ee5\u4fbf\uff1a\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e2a\u95ee\u9898-\u81f3\u5c11\u662f\u76ee\u524d\u7684\u7c97\u66b4\u5f62\u5f0f-\u9700\u8981\u9996\u5148\u89e3\u51b3\uff0c\u7136\u540e\u624d\u80fd\u8fdb\u884c\u4efb\u4f55\u6709\u610f\u4e49\u7684\u8ba8\u8bba\u3002\u4f8b\u5982\uff1a\n\u5982\u679c\u57fa\u6570\u4e3a\u8d1f\uff0c\u5219\u5176\u5e42\u4e0d\u5fc5\u5b9a\u4e49\u5f97\u5f88\u6e05\u695a(\u4f8b\u5982\uff0c$\\displaystyle(-e)^{\\frac{1}{2}}$)\u3002\n\u5982\u679c\u57fa\u6570\u662f$\\DisplayStyle 1$\uff0c\u90a3\u4e48\u5b83\u7684\u4efb\u4f55\u5e42\u90fd\u53ea\u6709$1$\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e0d\u53ef\u80fd\u751f\u6210\u4efb\u4f55\u4e0d\u662f$1$\u7684\u6570\u5b57\u3002\u7c7b\u4f3c\u7684\u8bf4\u6cd5\u4e5f\u9002\u7528\u4e8e\u57fa\u6570\u7b49\u4e8e0\u7f8e\u5143\u7684\u60c5\u51b5\u3002\n\u51fa\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u5728\u6743\u529b\u786e\u5b9a\u7684\u80cc\u666f\u4e0b\uff0c\u4e60\u60ef\u4e0a\u8981\u6c42\u57fa\u6570$b$\u4e3a\u6b63\u6570-\u8fd9\u4e0d\u7b49\u4e8e$1$\u3002\u867d\u7136\u5728\u8fd9\u4e00\u5047\u8bbe\u4e0b\uff0c\u4efb\u4f55$b$\u7684\u5e42\u90fd\u5fc5\u7136\u662f\u6b63\u7684\uff0c\u4f46\u5b83\u4e5f\u4f1a-\u5728\u8fd9\u79cd\u8bbe\u7f6e\u4e0b-\u4efb\u4f55\u4e00\u4e2a\u6b63\u6570\u90fd\u53ef\u4ee5\u4ee5\u4e00\u79cd\u72ec\u7279\u7684\u65b9\u5f0f\u8868\u793a\u4e3a$b$\u7684\u5e42\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981$x$\u662f\u6b63\u6570\uff0c\u5c31\u4f1a\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u5b57$\\Box$(\u79f0\u4e3a\u6307\u6570)\uff0c\u8fd9\u6837\uff1a\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u5730\u5c06$\\Box$\u79f0\u4e3a$x$\u7684\u5bf9\u6570(\u4ee5$b$\u4e3a\u5e95)\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5bf9\u6570\u57fa\u672c\u4e0a\u662f\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u4e3a\u5e42\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u5e42\u4e2d\u53d6\u6307\u6570\u65f6\u53d1\u751f\u7684\u4e8b\u60c5-\u5b83\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6570\u5b57\u76f8\u5bf9\u4e8e\u6240\u8ba8\u8bba\u7684\u5e95\u6570\u7684\u5927\u5c0f\u3002\n\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u5c06\u6570\u5b57$64$\u8868\u793a\u4e3a$2$\u7684\u5e42\u65f6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f$64=2^6$\u3002\u4ec5\u6b64\u4e00\u9879\u5c31\u8868\u660e\uff0c$6$\u662f$64$-1\u76f8\u5bf9\u4e8e\u5e95\u6570$2$\u7684\u5bf9\u6570\u3002\n\u5c31\u8bb0\u6570\u6cd5\u800c\u8a00\uff0c\u4ee5$b$\u4e3a\u5e95\u7684$x$\u7684\u5bf9\u6570\u7531$\\log_b x$\u8868\u793a\uff0c$x$\u4e5f\u79f0\u4e3a\u5bf9\u6570\u7684\u81ea\u53d8\u91cf\u3002\u5c06$\\log_b x$\u89c6\u4e3a\u51fd\u6570\u65f6\uff0c$\\log_b x$\u5b9a\u4e49\u5728\u6240\u6709\u6b63\u6570\u4e0a-\u53ea\u8981\u57fa\u6570$b$\u6709\u6548(\u5373\uff0c$0\\displaystyle b&gt\uff1b0\uff0cb\\ne 1$)\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u9996\u5148\u6ce8\u610f\u5230\uff0c\u65e0\u8bba\u57fa\u672c$b$\u7684\u503c\u662f\u591a\u5c11\uff0c\u6211\u4eec\u603b\u662f\u6709\uff1a\n$\\displaystyle\\log_b 1=0$(\u56e0\u4e3a$0$\u662f\u9700\u8981\u589e\u52a0$b$\u4ee5\u4ea7\u751f$1$\u7684\u6570\u5b57)\u3002\n$\\displaystyle\\log_b b$=1$(\u56e0\u4e3a$1$\u662f\u9700\u8981\u589e\u52a0$b$\u624d\u80fd\u4ea7\u751f$b$\u7684\u6570\u5b57)\u3002\n$\\displaystyle\\log_b\\frac{1}{b}=-1$(\u56e0\u4e3a$-1$\u662f\u751f\u6210$\\displaystyle\\frac{1}{b}$\u6240\u9700\u7684\u6570\u5b57$b$)\u3002\n\u56e0\u4e3a\u8fd9\u4e9b\u7ed3\u679c\u51e0\u4e4e\u662f\u7acb\u7aff\u89c1\u5f71\u7684\uff0c\u6211\u4eec\u5c06\u7b80\u5355\u5730\u5c06\u5b83\u4eec\u79f0\u4e3a\u5e73\u51e1\u7684\u5bf9\u6570\u6052\u7b49\u5f0f\u3002\n\u6b64\u5916\uff0c\u7531\u4e8e$\\log_b x$\u4ee3\u8868\u4e0e$x$\u6210\u6307\u6570\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u6839\u636e\u5b9a\u4e49\uff0c\u6211\u4eec\u4e5f\u6709\uff1a\n\u56e0\u4e3a\u901a\u8fc7\u68c0\u67e5\u53ef\u4ee5\u770b\u5230\uff0c$x$\u6b63\u662f\u6307\u6570\u5316\u4e3a$b^x$\u7684\u6570\u5b57\u3002\n\u4f8b\u5982\uff0c\u7531\u4e8e$\\displaystyle\\log_2 53$\u662f$2$\u9700\u8981\u589e\u52a0\u624d\u80fd\u4ea7\u751f$53$\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u6211\u4eec\u6709$\\displaystyle 2^{\\log_2 53}=53$\u3002\u540c\u6837\uff0c\u7531\u4e8e$\\displaystyle 10^{-\\pi}$\u662f$10$\u7684\u5e42\uff0c\u6307\u6570\u4e3a$-\\pi$\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad$\\displaystyle\\log_{10}\\Left(10^{-\\pi}\\right)=-\\pi$\u3002\n\u4f5c\u4e3a\u6307\u6570\u51fd\u6570$\\displaystyle 10^x$\u7684\u9006\u6570\uff0c\u4ee5$10\u4e3a\u5e95\u7684\u5bf9\u6570\u51fd\u6570-\u4e5f\u79f0\u4e3a\u6700\u5e38\u89c1\u7684\u5bf9\u6570-\u901a\u5e38\u7531$\\log_{10}x$\u3001$\\log x$\u6216\u7b80\u79f0$\\lg x$\u8868\u793a\u3002\u5e38\u89c1\u7684\u5bf9\u6570\u662f\u6211\u4eec\u975e\u5e38\u611f\u5174\u8da3\u7684\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5341\u8fdb\u5236\u6570\u7cfb\u7edf\u5728\u4e16\u754c\u5404\u5730\u7684\u5404\u79cd\u6587\u5316\u4e2d\u90fd\u5f88\u6d41\u884c\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5728\u8f83\u65e9\u7684\u79d1\u5b66\u8bfe\u672c\u548c\u4e00\u4e9b\u9ad8\u7b49\u6570\u5b66\u6559\u79d1\u4e66\u4e2d\uff0c$\\logx$\u4e5f\u53ef\u4ee5\u6307(\u901a\u5e38\u662f)\u4ee5$e$\u4e3a\u5e95\u7684\u81ea\u7136\u5bf9\u6570\u3002\n\u5728\u8ba1\u7b97\u6570\u5b57\u7684\u5e38\u89c1\u5bf9\u6570\u65f6\uff0c\u901a\u5e38\u5c06\u5bf9\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u6574\u6570\u90e8\u5206(\u53c8\u540d\uff0c\u7279\u5f81)\u548c\u5c0f\u6570\u90e8\u5206(\u53c8\u540d\uff0c\u5c3e\u6570)\u3002\u5728\u8ba1\u7b97\u65f6\uff0c\u901a\u5e38\u4f1a\u5c06\u5bf9\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u5206\u6210\u4e24\u90e8\u5206\uff1a\u6574\u6570\u90e8\u5206(\u53c8\u540d\uff0c\u7279\u5f81)\u548c\u5c0f\u6570\u90e8\u5206(\u53c8\u540d\uff0c\u5c3e\u6570)\u3002\u672c\u8d28\u4e0a\u7684\u7279\u5f81\u544a\u8bc9\u6211\u4eec\uff0c\u539f\u59cb\u6570\u5b57\u6709\u591a\u5c11\u4f4d\u6570\uff0c\u5c3e\u6570\u6697\u793a\u4e86\u8fd9\u4e2a\u6570\u5b57\u63a5\u8fd1\u517610\u7f8e\u5143\u7684\u4e0b\u4e00\u4e2a\u5e42\u7684\u7a0b\u5ea6\u3002\u8fd9\u4e9b\u4e8b\u5b9e\u4f7f\u666e\u901a\u5bf9\u6570\u6210\u4e3a\u786e\u5b9a\u5f02\u5e38\u5927(\u6216\u5c0f)\u6570\u5b57\u7684\u6570\u91cf\u7ea7\u7684\u4e00\u4e2a\u7279\u522b\u65b9\u4fbf\u7684\u5de5\u5177\u3002\n\u4f8b\u5982\uff0c\u4e3a\u4e86\u8ba1\u7b97\u6570\u5b57$50\uff01$(\u5373$50\\x\\cdots\\x 1$)\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u7ee7\u7eed\u8ba1\u7b97\u5b83\u7684\u5bf9\u6570\uff0c\u7ed3\u679c\u662f\uff1a\\[\\log(50\uff01)\\\u7ea664.483\\]\uff0c\u8fd9\u610f\u5473\u7740$50\uff01\\\u7ea610^{64.483}=$10^{64}10^{0.483}\\\u7ea6$10^{64}\\CDOT3.04$\uff0c\u8fd9\u610f\u5473\u7740$50\uff01$\u662f\u4e00\u4e2a$65$\u4f4d\u6570\uff0c\u4ee5\u3002\u5c3e\u6570$0.483\u7f8e\u5143\u63ed\u793a\u4e86\u5176\u4f59\u7684\u5173\u4e8e\u6570\u5b57\u672c\u8eab\u7684\u4fe1\u606f\u3002\n\u628a\u4fe1\u606f\u5e26\u56de\u5bb6\u5417\uff1f\u6ca1\u6709\u5fc5\u8981\u628a\u4e00\u4e2a\u6570\u5b57\u5168\u90e8\u5199\u51fa\u6765\uff0c\u5c31\u80fd\u7b97\u51fa\u5b83\u7684\u5927\u6982\u5927\u5c0f\uff01\n\u4f5c\u4e3a\u6307\u6570\u51fd\u6570$2^x$\u7684\u9006\u51fd\u6570\uff0c\u4e8c\u8fdb\u5236\u5bf9\u6570\u51fd\u6570$\\log_2x$\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u8ba1\u7b97\u673a\u4ee5\u4f4d(\u5373\u4ee5$0$\u6216$1$\u4e3a\u53ef\u80fd\u7684\u503c\u7684\u6570\u5b57)\u6765\u5b58\u50a8\u4fe1\u606f\u3002\n\u4e0e\u4ee5$10\u4e3a\u5e95\u7684$$\u4e2d\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e8c\u8fdb\u5236\u5bf9\u6570\u6765\u8ba1\u7b97\u6b63\u6574\u6570\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u7684\u4f4d\u6570\u3002\u6b64\u5916\uff0c\u4e8c\u8fdb\u5236\u5bf9\u6570\u8fd8\u88ab\u7528\u6765\u8ba1\u7b97\u51fa\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\uff0c\u751a\u81f3\u662f\u67d0\u4e9b\u8ba1\u7b97\u673a\u7b97\u6cd5\u6240\u9700\u7684\u8fd0\u7b97\u91cf(\u8fd9\u5c5e\u4e8e\u4e00\u4e2a\u88ab\u79f0\u4e3a\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bdd\u9898)\u3002\n\u5728\u8ba1\u7b97\u673a\u4e16\u754c\u4e4b\u5916\uff0c\u97f3\u4e50\u7406\u8bba\u4e2d\u4e5f\u4f7f\u7528\u4e8c\u8fdb\u5236\u5bf9\u6570\u6765\u6982\u5ff5\u5316\u97f3\u7b26\u7684\u9ad8\u5ea6\uff0c\u8fd9\u662f\u57fa\u4e8e\u8fd9\u6837\u7684\u57fa\u672c\u89c2\u5bdf\uff1a\u5c06\u97f3\u7b26\u63d0\u9ad8\u516b\u5ea6\u53ef\u4ee5\u4f7f\u97f3\u7b26\u7684\u9891\u7387\u589e\u52a0\u4e24\u500d\u3002\u5728\u97f3\u4e50\u7406\u8bba\u4e2d\uff0c\u4e8c\u8fdb\u5236\u5bf9\u6570\u4e5f\u662f\u7528\u6765\u6982\u5ff5\u5316\u97f3\u7b26\u7684\u9ad8\u5ea6\u7684\uff0c\u8fd9\u662f\u57fa\u4e8e\u8fd9\u6837\u7684\u57fa\u672c\u89c2\u5bdf\uff1a\u5c06\u97f3\u7b26\u63d0\u9ad8\u516b\u5ea6\u53ef\u4ee5\u4f7f\u97f3\u7b26\u7684\u9891\u7387\u589e\u52a0\u4e24\u500d\u3002\u56e0\u6b64\uff0c\u901a\u5e38\u53ef\u4ee5\u65b9\u4fbf\u5730\u5c06\u9891\u7387\u6bd4\u7684\u4e8c\u8fdb\u5236\u5bf9\u6570\u8bbe\u60f3\u4e3a\u4e00\u4e2a\u8f83\u5c0f\u7684\u97f3\u4e50\u97f3\u7a0b\u3002\n\u5728\u4e00\u4e9b\u6d89\u53ca\u8d85\u8d8a\u51fd\u6570\u66f4\u4e25\u683c\u53d1\u5c55\u7684\u6559\u79d1\u4e66\u4e2d\uff0c\u57fa\u6570$\\displaystyle e$\u5bf9\u6570\u51fd\u6570-\u4e5f\u88ab\u79f0\u4e3a\u81ea\u7136\u5bf9\u6570\uff0c$\\log_e x$\u6216\u7b80\u79f0$\\ln x$-\u6709\u65f6\u88ab\u5b9a\u4e49\u4e3a\u5012\u6570\u51fd\u6570$\\frac{1}{x}$\u4e0ex\u8f74\u4ece$1$\u5230$x$\u4e4b\u95f4\u7684\u9762\u79ef(\u56e0\u6b64\u79f0\u4e3a\u81ea\u7136)\u3002\n\u5728\u8fd9\u4e2a\u5b9a\u4e49\u4e0b\uff0c\u53ef\u4ee5\u8bc1\u660e$\\ln x$\u7684\u9006\u6b63\u597d\u662f\u81ea\u7136\u6307\u6570\u51fd\u6570$e^x$\uff0c\u4ece\u800c\u5f97\u51fa\u81ea\u7136\u5bf9\u6570\u7684\u4ee5\u4e0b\u6807\u51c6\u5b9a\u4e49\uff1a\n\u7ed9\u5b9a\u6b63\u6570$x$\uff0c\u5219$\\ln x$\u8868\u793a\u9700\u8981\u63d0\u9ad8$e$\u624d\u80fd\u53d8\u4e3a$x$\u7684\u6570\u5b57\u3002\n\u4e0e\u6570\u5b57$10$\u4e0d\u540c-\u7531\u4e8e\u5341\u8fdb\u5236\u7684\u6d41\u884c\uff0c\u6570\u5b57$\\Displaystyle e$\u662f\u51fa\u4eba\u610f\u6599\u5730\u7ecf\u5e38\u51fa\u73b0\u5728\u5404\u79cd\u6570\u5b66\u8bba\u8ff0\u4e2d\u7684\u7279\u6b8a\u5e38\u91cf\u4e4b\u4e00-\u65e0\u8bba\u9009\u62e9\u54ea\u79cd\u6570\u5b57\u7cfb\u7edf\u3002\u56e0\u6b64\uff0c\u6570\u5b66\u5bb6\u503e\u5411\u4e8e\u8ba4\u4e3a\u57fa\u6570$e$\u6bd4\u57fa\u6570$10$\u66f4\u81ea\u7136-\u5c3d\u7ba1\u4e00\u4e9b\u6770\u51fa\u7684\u5e94\u7528\u79d1\u5b66\u5bb6\u548c\u5de5\u7a0b\u5e08\u5728\u4e0d\u540c\u573a\u5408\u63d0\u51fa\u4e86\u4e0d\u540c\u610f\u89c1\u3002\u2026\u3002\n\u5b9e\u9645\u4e0a\uff0c\u4e3a\u4e86\u8bf4\u660e\u79d1\u5b66\u754c\u8fd9\u4e9b\u65b0\u7684\u667a\u529b\u504f\u89c1\u7684\u8303\u56f4\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u6765\u81ea\u7ef4\u57fa\u767e\u79d1\u7684\u6709\u8da3\u7684\u63cf\u8ff0\uff0c\u5185\u5bb9\u662f\u5173\u4e8e\u5bf9\u6570\u7b26\u53f7\u7684\u5386\u53f2\u53d1\u5c55\u5386\u53f2\uff1a\n\u56e0\u4e3a\u4ee510\u4e3a\u5e95\u7684\u5bf9\u6570\u5bf9\u8ba1\u7b97\u6700\u6709\u7528\uff0c\u6240\u4ee5\u5de5\u7a0b\u5e08\u901a\u5e38\u5728\u8868\u793alog10(X)\u65f6\u7b80\u5355\u5730\u5199\u4e0b\u201clog(X)\u201d\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6570\u5b66\u5bb6\u5728\u8868\u793a\u81ea\u7136\u5bf9\u6570\u7684loge(X)\u65f6\u5199\u4e0b\u4e86\u201clog(X)\u201d\u3002\u4eca\u5929\uff0c\u8fd9\u4e24\u79cd\u7b26\u53f7\u90fd\u627e\u5230\u4e86\u3002\u7531\u4e8e\u624b\u6301\u5f0f\u7535\u5b50\u8ba1\u7b97\u5668\u662f\u7531\u5de5\u7a0b\u5e08\u800c\u4e0d\u662f\u6570\u5b66\u5bb6\u8bbe\u8ba1\u7684\uff0c\u6240\u4ee5\u4e60\u60ef\u4e0a\u5b83\u4eec\u9075\u5faa\u5de5\u7a0b\u5e08\u7684\u8bb0\u6cd5\u3002\u56e0\u6b64\uff0c\u6839\u636e\u81ea\u7136\u5bf9\u6570\u7684\u610f\u601d\u5199\u6210\u201cln(X)\u201d\u7684\u8bb0\u6570\u6cd5\uff0c\u53ef\u80fd\u5df2\u7ecf\u88ab\u7535\u5b50\u8ba1\u7b97\u5668\u8fd9\u9879\u53d1\u660e\u8fdb\u4e00\u6b65\u666e\u53ca\u4e86\uff0c\u8fd9\u9879\u53d1\u660e\u4f7f\u5f97\u201c\u666e\u901a\u5bf9\u6570\u201d\u7684\u4f7f\u7528\u53d8\u5f97\u4e0d\u90a3\u4e48\u5e38\u89c1\u3002\n\u9664\u4e86\u524d\u9762\u4ecb\u7ecd\u7684\u4e09\u4e2a\u6700\u6d41\u884c\u7684\u5bf9\u6570\u51fd\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6709\u6548\u7684\u5e95\u6570\u6765\u5b9a\u4e49\u5bf9\u6570\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u901a\u5e38\u4f7f\u7528\u5bf9\u6570\u7684\u76ee\u7684\u662f\u5c06\u5927\u6570(\u5373\u5927\u4e8e$1$)\u538b\u7f29\u6210\u8f83\u5c0f\u7684\u6570\uff0c\u56e0\u6b64\u57fa\u6570\u8d8a\u5927\uff0c\u5bf9\u6570\u5c31\u8d8a\u5c0f\u3002\n\u7136\u800c\uff0c\u8fd9\u53ea\u662f\u6545\u4e8b\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u4e3a\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u9047\u5230\u7684\u6240\u6709\u5bf9\u6570\u51fd\u6570\u7684\u57fa\u6570\u90fd\u8d85\u8fc7\u4e861\u7f8e\u5143\u7684\u6570\u5b57(\u5373\u5927\u57fa\u6570)\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u57fa\u6570\u4e25\u683c\u5728$0$\u548c$1$\u4e4b\u95f4(\u5373\u5c0f\u57fa)\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u6570\u51fd\u6570\u7684\u56fe\u5f62\u4f1a\u51fa\u73b0\u5012\u6302\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e0e\u6807\u51c6\u5bf9\u6570\u51fd\u6570\u4ece$-\\infty$\u589e\u52a0\u5230$\\infty$\u76f8\u53cd\uff0c\u5c0f\u57fa\u6570\u5bf9\u6570\u51fd\u6570\u5b9e\u9645\u4e0a\u968f\u7740\u53c2\u6570\u7684\u589e\u52a0\u4ece$+\\infty$\u51cf\u5c11\u5230$-\\infty$\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u5f88\u5c11\u9700\u8981\u6c42\u52a9\u4e8e\u8fd9\u79cd\u5bf9\u6570\u51fd\u6570\u3002\u6b63\u5982\u6211\u4eec\u7a0d\u540e\u5c06\u770b\u5230\u7684\u90a3\u6837\uff0c\u968f\u7740\u57fa\u672c\u89c4\u5219\u7684\u6539\u53d8\uff0c\u6bcf\u5bf9\u5bf9\u6570\u51fd\u6570\u51e0\u4e4e\u76f8\u8ddd\u4e00\u4e2a\u500d\u6570\uff0c\u56e0\u6b64\u5728\u5e94\u7528\u548c\u65b9\u7a0b/\u4e0d\u7b49\u5f0f\u6c42\u89e3\u65b9\u9762\uff0c\u8fd9\u4e09\u4e2a\u6807\u51c6\u5bf9\u6570\u901a\u5e38\u8db3\u4ee5\u8ba9\u4e8b\u60c5\u7ee7\u7eed\u8fdb\u884c\u3002\n\u7531\u4e8e\u5bf9\u6570\u5141\u8bb8\u5c06\u6307\u6570\u6807\u5ea6\u6620\u5c04\u4e3a\u7ebf\u6027\u6807\u5ea6\uff0c\u56e0\u6b64\u5f53\u6d89\u53ca\u5230\u5982\u4f55\u6c9f\u901a\u6570\u91cf\u53ef\u80fd\u5448\u6307\u6570\u7ea7\u589e\u957f\u6216\u6307\u6570\u7ea7\u840e\u7f29\u7684\u6570\u503c\u53d8\u91cf\u65f6\uff0c\u5b83\u6210\u4e3a\u4e00\u4e2a\u81f3\u5173\u91cd\u8981\u7684\u6982\u5ff5\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u53ea\u53d6\u8fd9\u4e2a\u53d8\u91cf\u7684\u5bf9\u6570\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u8fd9\u4e2a\u53d8\u91cf\u53d8\u6210\u4e86\u4eba\u4eec\u6240\u8bf4\u7684\u5bf9\u6570\u6807\u5ea6\u3002\n\u867d\u7136\u5bf9\u6570\u6807\u5ea6\u4f3c\u4e4e\u662f\u4e00\u4e2a\u9ad8\u5ea6\u7406\u8bba\u6027\u7684\u6982\u5ff5\uff0c\u4f46\u5982\u679c\u91c7\u7528\u5f97\u5f53\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u5730\u89e3\u91ca/\u7406\u89e3\u81ea\u7136\u754c\u4e2d\u53d1\u73b0\u7684\u6570\u91cf\u60ca\u4eba\u7684\u73b0\u8c61\u3002\u8303\u56f4\u4ece\u58f0\u97f3\u7684\u54cd\u5ea6\u3001\u5730\u9707\u7684\u9707\u7ea7\u5230\u6eb6\u6db2\u7684\u9178\u5ea6\u548c\u97f3\u9ad8\uff1a\n\u5728\u4e00\u67b6\u8c03\u6027\u76f8\u540c\u7684\u94a2\u7434\u4e2d\uff0c\u94a2\u7434\u4e2d\u7684\u6bcf\u4e2a\u952e\u90fd\u53ef\u4ee5\u88ab\u8bbe\u60f3\u4e3a\u5176\u76f8\u5bf9\u58f0\u97f3\u9891\u7387\u7684\u4e8c\u8fdb\u5236\u5bf9\u6570\uff0c\u8fd9\u6837\uff0c\u6bcf\u5f53\u6211\u4eec\u5728\u94a2\u7434\u4e0a\u6309\u4e0b\u66f4\u9ad8\u7684\u952e\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u5c31\u662f\u5c06\u58f0\u97f3\u9891\u7387\u589e\u52a0\u4e86\u4e00\u4e2a\u56fa\u5b9a\u7684\u56e0\u5b50($\\displaystyle\\sqrt[12]{2}$\uff0c\u51c6\u786e\u5730\u8bf4\u662f$\\displaystyle\\sqrt[12]{2}$)\u3002\n\u5728\u5316\u5b66\u4e2d\uff0c\u6eb6\u6db2\u7684\u9178\u5ea6\u662f\u7528pH\u6765\u6d4b\u91cf\u7684\uff0cpH\u88ab\u5b9a\u4e49\u4e3a\u6c22\u79bb\u5b50\u6d53\u5ea6\u7684\u8d1f\u5bf9\u6570\u3002\u8fd9\u57fa\u672c\u4e0a\u610f\u5473\u7740\uff0c\u5f53pH\u503c\u589e\u52a01\u7f8e\u5143\u65f6\uff0c\u6c22\u79bb\u5b50\u7684\u6d53\u5ea6\u5c31\u4f1a\u4e0b\u964d10\u500d\uff0c\u4ece\u800c\u5bfc\u81f4\u9178\u6027\u5927\u5927\u964d\u4f4e\u3002\n\u5728\u5730\u9707\u5b66\u4e2d\uff0c\u53ef\u4ee5\u7528\u91cc\u6c0f\u9707\u7ea7\u6765\u91cf\u5316\u5730\u9707\u7684\u4e25\u91cd\u7a0b\u5ea6\uff0c\u91cc\u6c0f\u9707\u7ea7\u672c\u8d28\u4e0a\u662f\u5730\u9707\u6ce2\u632f\u5e45(\u76f8\u5bf9\u4e8e\u9608\u503c\u632f\u5e45)\u7684\u5bf9\u6570\uff0c\u56e0\u6b64\u91cc\u6c0f\u9707\u7ea7\u7684\u6570\u5b57\u6bcf\u589e\u52a01\u7f8e\u5143\uff0c\u5730\u9707\u7684\u4e25\u91cd\u7a0b\u5ea6\u5c31\u589e\u52a010\u500d\u3002\n\u5728\u58f0\u5b66\u4e2d\uff0c\u58f0\u97f3\u7684\u54cd\u5ea6\u901a\u5e38\u7528\u5206\u8d1d(DB)\u6765\u91cf\u5316\uff0c\u5206\u8d1d\u662f1/10\u7684\u5206\u8d1d(B)\uff0c\u540e\u8005\u662f\u58f0\u529f\u7387\u7684\u5bf9\u6570(\u76f8\u5bf9\u4e8e\u542c\u9608)\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u589e\u52a010\u5206\u8d1d(\u76f8\u5f53\u4e8e1B)\uff0c\u58f0\u6e90\u7684\u58f0\u529f\u7387\u5c31\u4f1a\u589e\u52a010\u500d\u3002\n\u867d\u7136\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5bf9\u6570\u523b\u5ea6\u90fd\u6709\u76f8\u540c\u7684\u57fa\u6570\uff0c\u4f46\u4eba\u4eec\u53ef\u4ee5\u5c06\u5bf9\u6570\u8fd9\u6837\u7684\u6982\u5ff5-\u6700\u521d\u662f\u4e00\u79cd\u7eaf\u7cb9\u7684\u8ba1\u7b97\u8bbe\u5907-\u52ab\u6301\u5230\u4e00\u4e2a\u7edf\u4e00\u7684\u62bd\u8c61\u6846\u67b6\u4e2d\uff0c\u5c06\u81ea\u7136\u754c\u4e2d\u53d1\u73b0\u7684\u5404\u79cd\u770b\u4f3c\u65e0\u5173\u7684\u73b0\u8c61\u4e32\u8054\u5728\u4e00\u8d77\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u8bf4\u660e\u4e86\u4eba\u7c7b\u601d\u7ef4\u7684\u529b\u91cf\uff0c\u8fdb\u800c\u8bf4\u660e\u4e86\u6570\u5b66\u539f\u7406\u53d1\u660e\u548c\u53d1\u73b0\u4e4b\u95f4\u7684\u7ec6\u7ebf\u3002\n\u5bf9\u6570\u5728\u65e7\u65f6\u4ee3-\u5728\u8ba1\u7b97\u673a\u6216\u8ba1\u7b97\u5668\u53d1\u660e\u4e4b\u524d-\u662f\u4e00\u79cd\u5982\u6b64\u5f3a\u5927\u7684\u8ba1\u7b97\u5de5\u5177\uff0c\u5176\u539f\u56e0\u4e4b\u4e00\u5728\u4e8e\uff0c\u4eba\u4eec\u603b\u662f\u53ef\u4ee5\u5229\u7528\u5bf9\u6570\u7684\u67d0\u4e9b\u6027\u8d28\u6765\u51cf\u5c11\u4e0e\u5176\u4e2a\u522b\u6210\u5206\u76f8\u5173\u7684\u590d\u6742\u8bba\u70b9-\u800c\u4e14\u8fd9\u6837\u505a\u4e0e\u6240\u8ba8\u8bba\u7684\u57fa\u6570\u65e0\u5173\u3002\u5728\u8fc7\u53bb\uff0c\u5bf9\u6570\u662f\u4e00\u79cd\u5f3a\u5927\u7684\u8ba1\u7b97\u5de5\u5177\uff0c\u5728\u8ba1\u7b97\u673a\u6216\u8ba1\u7b97\u5668\u53d1\u660e\u4e4b\u524d\uff0c\u4eba\u4eec\u603b\u662f\u53ef\u4ee5\u5229\u7528\u5bf9\u6570\u7684\u67d0\u4e9b\u6027\u8d28\u6765\u51cf\u5c11\u4e0e\u5176\u4e2a\u522b\u6210\u5206\u76f8\u5173\u7684\u590d\u6742\u8bba\u70b9\u3002\u5728\u4e0b\u9762\uff0c\u6211\u4eec\u5c06\u5217\u51fa\u4e94\u4e2a\u8fd9\u6837\u7684\u6027\u8d28\uff0c\u5b83\u4eec\u5206\u522b\u4e0e\u5bf9\u6570\u7684\u4e58\u79ef\u3001\u5012\u6570\u3001\u5546\u6570\u3001\u5e42\u51fd\u6570\u548c\u5e73\u65b9\u6839\u6709\u5173\u3002\n\u7ed9\u5b9a\u4e58\u79ef$xy$\u548c\u5e95\u6570$b$\uff0c\u6211\u4eec\u80fd\u627e\u5230\u5173\u4e8e$x$\u548c$y$\u5bf9\u6570\u7684$xy$\u7684\u5bf9\u6570\u5417\uff1f\u7ed3\u679c\u662f\uff0c\u7b54\u6848\u5b8c\u5168\u662f\u80af\u5b9a\u7684\uff0c\u7a0d\u5fae\u68c0\u67e5\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0$\\logx+\\logy$\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u6570\u5b57\u3002\u600e\u4e48\u4f1a\u8fd9\u6837\uff1f\u56e0\u4e3a\u8fd9\u662f\u9700\u8981\u589e\u52a0$b$\u624d\u80fd\u8fbe\u5230$xy$\u7684\u6570\u5b57\uff1a\n\u8fd9\u4e00\u4e8b\u5b9e-\u4e58\u79ef\u7684\u5bf9\u6570\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u5176\u6210\u5206\u7684\u5bf9\u6570\u548c-\u4ea7\u751f\u4e86\u901a\u5e38\u88ab\u79f0\u4e3a\u4e58\u79ef\u89c4\u5219\u7684\u6027\u8d28\u3002\n\u7279\u522b\u662f\uff0c\u5f53\u57fa\u6570\u4e3a$10$\u65f6\uff0cProduct Rule\u53ef\u4ee5\u8f6c\u6362\u4e3a\u4ee5\u4e0b\u8bed\u53e5\uff1a\n\u4f8b\u5982\uff0c\u8981\u6d4b\u91cf\u7c7b\u4f3c$365435\\cdot 43223$\u8fd9\u6837\u7684\u6570\u5b57\u7684\u8fd1\u4f3c\u5927\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u5e38\u89c1\u7684\u5bf9\u6570\uff0c\u7136\u540e\u5e94\u7528\u4e58\u79ef\u89c4\u5219\uff0c\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u679c\uff1a\n\\BEGIN{ALIGN*}\\LOG(365435\\cdot 43223)&amp\uff1b=\\LOG 365435+\\LOG 43223\\\\&amp\uff1b\\\u7ea65.56+4.63\\\\&amp\uff1b=10.19\\END{ALIGN*}\u3002\n\u8fd9\u8868\u660e$\\DISPLAY STYLE$365435\\cdot 43223$\u662f\u4e00\u4e2a\u63a5\u8fd1$\\DISPLAY STYLE$10^{10.19}$\\\u7ea6\u4e3a$1.55(10^{10})$\u7684\u6570\u5b57\u3002\n\u4ec5\u5728\u6ee1\u8db3\u524d\u63d0\u6761\u4ef6\u65f6\u5e94\u7528\u4ea7\u54c1\u89c4\u5219\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4e0d\u80fd\u505a\u7684\u4e00\u4ef6\u4e8b\u662f\u5c06$9$\u5206\u89e3\u4e3a$-1$\u548c$-9$\uff0c\u5e76\u58f0\u79f0$\\ln 9=\\ln(-1)+n\\ln(-9)$\u3002\n\u56e0\u4e3a\u7b49\u5f0f\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u53cc\u5411\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u53ef\u4ee5\u4ece\u53f3\u5230\u53f3\u4f7f\u7528\u5b83\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u4ece\u5de6\u5230\u5de6\u7684\u4e58\u79ef\u89c4\u5219\u6765\u7834\u574f\u4e58\u79ef\uff0c\u4ece\u800c\u5c06\u5bf9\u6570\u548c\u8f6c\u5316\u4e3a\u4e58\u79ef\u3002\u4f8b\u5982\uff1a\n\\BEGIN{ALIGN*}\\LOG 25+\\LOG 4=\\LOG(25\\CDOT 4)=\\LOG 100=2\\END{ALIGN*}\u3002\n\u7136\u800c\uff0c\u4e0d\u5229\u7684\u4e00\u9762\u662f\uff0c\u7531\u4e8e\u5bf9\u6570\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ea\u5c06\u6b63\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u56e0\u6b64\u5c06\u5bf9\u6570\u53ca\u5176\u5c5e\u6027\u5e94\u7528\u4e8e\u51fd\u6570\u6216\u65b9\u7a0b\u53ef\u80fd\u4f1a\u663e\u8457\u9650\u5236\u5176\u53ef\u884c\u6027\u8303\u56f4\u3002\u4f8b\u5982\uff0c\u867d\u7136\u51fd\u6570$x^2$\u5b9a\u4e49\u5728\u6240\u6709\u5b9e\u6570\u4e0a\uff0c\u4f46\u4e00\u65e6\u6211\u4eec\u53d6\u5bf9\u6570\u5e76\u5e94\u7528\u4e58\u79ef\u89c4\u5219\uff0c\u6240\u4ea7\u751f\u7684\u7b49\u5f0f\u4ecd\u7136\u9002\u7528-\u4f46\u73b0\u5728\u4ec5\u9002\u7528\u4e8e\u6b63\u6570\uff1a\n\u8fd9\u5f88\u597d\u5730\u63d0\u9192\u4eba\u4eec\uff0c\u4efb\u4f55\u57fa\u4e8e\u5bf9\u6570\u7684\u4ee3\u6570\u6280\u672f-\u65e0\u8bba\u662f\u6c42\u89e3\u5bf9\u6570\u65b9\u7a0b\u3001\u6c42\u89e3\u5bf9\u6570\u4e0d\u7b49\u5f0f\u8fd8\u662f\u5bf9\u6570\u5fae\u5206-\u90fd\u5e94\u8be5\u8003\u8651\u5230\u8fd9\u4e00\u6f5c\u5728\u7684\u9650\u5236\u3002\n\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u6b63\u6570\u90fd\u6709\u4e00\u4e2a\u4e58\u6cd5\u5012\u6570(\u5373\u5012\u6570)\uff0c\u90a3\u4e48\u6216\u8bb8\u4e5f\u6709\u4e00\u6761\u6c42\u5012\u6570\u7684\u5bf9\u6570\u7684\u6377\u5f84\uff1f\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u7b54\u6848\u53c8\u662f\u54cd\u4eae\u7684\u662f\u80af\u5b9a\u7684\u3002\u8981\u4e86\u89e3\u539f\u56e0\uff0c\u5047\u8bbe\u7ed9\u6211\u4eec\u4e00\u4e2a\u6b63\u6570$x$\uff0c\u90a3\u4e48\u6839\u636eProduct Rule\uff0c\u6211\u4eec\u6709\uff1a\n\\BEGIN{ALIGN*}\\LOG\\LEFT(x\\\\CDOT)\\FRAC{1}{x}\\RIGHT)&amp\uff1b=\\LOG x+\\LOG\\LEFT(\\FRAC{1}{x}\\RIGHT)\\END{ALIGN*}\u3002\n\u60ca\u559c\uff01\u6211\u4eec\u521a\u521a\u53d1\u73b0\u4e86\u5012\u6570\u6cd5\u5219\uff0c\u5373\u8981\u627e\u51fa\u5012\u6570\u7684\u5bf9\u6570\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u539f\u6570\u7684\u5bf9\u6570\u53d6\u53cd\u5373\u53ef\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u5fc5\u4ece\u5934\u5f00\u59cb\u8ba1\u7b97$\\displaystyle\\frac{1}{512}$\u7684\u4e8c\u8fdb\u5236\u5bf9\u6570\uff0c\u800c\u662f\u8f6c\u8fc7\u5934\u6765\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u73b0\u5728\u4e58\u79ef\u89c4\u5219\u548c\u5012\u6570\u89c4\u5219\u90fd\u5df2\u5c31\u7eea\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5c06\u5b83\u4eec\u5e94\u7528\u4e8e\u6b63\u6570$x$\u548c$y$\u7684\u5546\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff1a\n\\BEGIN{ALIGN*}\\log\\Left(\\frac{x}{y}\\Right)&amp\uff1b=\\log\\Left(x\\cot\\frac{1}{y}\\Right)\\\\&amp\uff1b=\\log x+\\log\\Left(\\frac{1}{y}\\Right)\\\\&amp\uff1b=\\log x-\\log y\\end{Align*}\u3002\n\u5bf9\u5570!\u3002\u6211\u4eec\u521a\u521a\u8bc1\u660e\uff0c\u5546\u7684\u5bf9\u6570\u6b63\u597d\u662f\u539f\u59cb\u5bf9\u6570\u4e4b\u95f4\u7684\u5dee-\u8fd9\u4e00\u6027\u8d28\u901a\u5e38\u88ab\u79f0\u4e3a\u5546\u89c4\u5219\u3002\n\u4f8b\u5982\uff0c\u4e0e\u4ece\u5934\u5f00\u59cb\u8ba1\u7b97$\\displaystyle\\frac{2}{e}$\u7684\u81ea\u7136\u5bf9\u6570\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u5546\u89c4\u5219\uff0c\u5e76\u83b7\u5f97\u4ee5\u4e0b\u7ed3\u679c\uff1a\n\\BEGIN{ALIGN*}*\\ln\\LEFT(\\frac{2}{e}\\RIGHT)=\\ln 2*-\\ln e=\\ln 2-1\\END{ALIGN*}\u3002\n\u5c31\u50cf\u5e42\u89c4\u5219\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4ece\u53f3\u5230\u5de6\u4f7f\u7528\u5546\u89c4\u5219\uff0c\u800c\u4e0d\u662f\u7834\u5546\uff0c\u4ece\u800c\u5c06\u5dee\u53d8\u6210\u5546\u3002\u4f8b\u5982\uff1a\n\\BEGIN{ALIGN*}*\\LOG 45-\\LOG 9=\\LOG\\LEFT(\\frac{45}{9}\\RIGHT)=\\LOG 5\\END{ALIGN*}\u3002\n\u8fd9\u5c31\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u5728\u81ea\u7136\u79d1\u5b66\u4e2d\uff0c\u4e00\u4e2a\u91cf\u7ecf\u5e38\u7528\u5bf9\u6570\u6807\u5ea6\u6765\u8868\u793a\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u53d6\u6240\u8ff0\u91cf\u4e0e\u53c2\u8003\u70b9\u4e4b\u95f4\u7684\u6bd4\u7387\u7684\u5bf9\u6570\u6765\u8868\u793a\u3002\n\u81f3\u4e8e\u4e00\u4e2a\u6570\u7684\u6574\u6570\u6b21\u65b9\u7684\u5bf9\u6570\uff0c\u6211\u4eec\u9996\u5148\u6ce8\u610f\u5230\u4e00\u4e2a\u6570\u88ab\u63d0\u5347\u5230$0$\u7684\u60c5\u51b5\uff1a\n\u5728\u5c06\u4e00\u4e2a\u6570\u5b57\u63d0\u5347\u5230\u6b63\u6574\u6570$n$\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u590d\u5e94\u7528\u4e58\u79ef\u89c4\u5219\u6765\u83b7\u5f97\u5bf9\u6570\uff1a\n\\BEGIN{ALIGN*}\\log(x^n)&amp\uff1b=\\log\\\u4e0b\u62ec\u53f7{x\\Left(x\\cdots x x\\right)}_{n\\text{Times}}\\\\&amp\uff1b=\\\u4e0b\u62ec\u53f7{\\log x+\\\uff0c\\dots+\\log x}_{n\\text{Times}}\\\\&amp\uff1b=End{ign*}\u3002\n\u5728\u5c06\u6570\u5b57\u63d0\u9ad8\u5230$-n$\u5f62\u5f0f\u7684\u8d1f\u6574\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u4e58\u79ef\u89c4\u5219\u548c\u5012\u6570\u89c4\u5219\u7684\u6df7\u5408\u5c31\u53ef\u4ee5\u4e86\uff1a\n\\BEGIN{ALIGN*}\\log(x^{-n})&amp\uff1b=\\log\\Left[\\Left(\\frac{1}{x}\\Right)^n\\Right]\\\\&amp\uff1b=n\\log\\Left(\\frac{1}{x}\\Right)\\\\&amp\uff1b=-n\\log x\\end{Align*}\u3002\n\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u521a\u521a\u5c55\u793a\u4e86\uff0c\u5f53\u4e00\u4e2a\u6570\u5b57\u88ab\u63d0\u5347\u5230\u6574\u6570\u6b21\u65b9\u65f6\uff0c\u5f97\u5230\u7684\u5bf9\u6570\u4e5f\u4f1a\u88ab\u8be5\u5e42\u7cbe\u786e\u5730\u91cd\u65b0\u7f29\u653e\u3002\u8fd9\u4e00\u6709\u8da3\u7684\u53d1\u73b0\u5c06\u5bfc\u81f4\u5bf9\u6570\u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\uff0c\u88ab\u79f0\u4e3a\u5e42\u89c4\u5219\u3002\n\u6b63\u5982\u4e00\u4e9b\u4eba\u53ef\u80fd\u9884\u671f\u7684\u90a3\u6837\uff0c\u6743\u529b\u89c4\u5219\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u5c5e\u6027\u3002\u9996\u5148\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u4ece\u5bf9\u6570\u7684\u81ea\u53d8\u91cf\u4e2d\u63d0\u53d6\u6307\u6570\uff0c\u4ece\u800c\u5f52\u4e00\u5316\u53ef\u80fd\u975e\u5e38\u5de8\u5927\u7684\u663e\u793a\u6837\u5f0f/\u6700\u5c0f\u7684\u6570\u5b57(\u4f8b\u5982\uff0c$\\displaystyle\\log_2(3^{15})=15\\log_2(3^{15})=15\\log_2$)\uff0c\u76f8\u53cd\uff0c\u5e42\u89c4\u5219\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5c06\u6307\u6570\u63a8\u5165\u5bf9\u6570\u7684\u81ea\u53d8\u91cf\u4e2d\uff0c\u4ece\u800c\u4ea7\u751f\u6f5c\u5728\u66f4\u7b80\u5355\u7684\u8868\u8fbe\u5f0f(\u4f8b\u5982\uff0c$\\displaystyle 3\\ln 5=\\\u3002\n\u5728\u5e94\u7528\u7535\u6e90\u89c4\u5219\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u6ee1\u8db3\u524d\u63d0\u6761\u4ef6\u3002\u4f8b\u5982\uff0c\u867d\u7136$\\ln(x^8)$\u5b9a\u4e49\u5728\u6240\u6709\u975e\u96f6\u6570\u4e0a\uff0c\u4f46\u7b49\u5f0f$\\ln(x^8)=8\\ln x$\u53ea\u6709\u5728$x&gt\uff1b0$\u65f6\u624d\u6210\u7acb\u3002\u4f46\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u7edd\u5bf9\u5316$x$\u6765\u89e3\u51b3\uff0c\u4ece\u800c\u4ea7\u751f\u7b49\u5f0f$\\ln(|x|^8)=8\\ln|x|$\u3002\n\u4e0e\u4e58\u79ef\u89c4\u5219\u548c\u5546\u89c4\u5219\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u5e42\u89c4\u5219\u53ef\u4ee5\u7528\u57fa\u672c$10$\u6765\u89e3\u91ca\u5982\u4e0b\uff1a\n\u5f53\u4e00\u4e2a\u6570\u5b57\u88ab\u5e42\u65f6\uff0c\u5f97\u5230\u7684\u6570\u5b57\u7684\u5927\u5c0f\u6070\u597d\u7b49\u4e8e\u539f\u59cb\u6570\u5b57\u7684\u5927\u5c0f-\u4e58\u4ee5\u8be5\u5e42\u3002\u5355\u51fb\u4ee5\u53d1\u5e03\u63a8\u6587\u3002\n\u4e3a\u4e86\u5728\u6c42\u6839\u7684\u5bf9\u6570\u65f6\u627e\u5230\u4e00\u4e9b\u6377\u5f84\uff0c\u6211\u4eec\u9996\u5148\u89c2\u5bdf\u5230\uff0c\u5bf9\u4e8e\u6240\u6709\u6b63\u6574\u6570$n$\uff0c\u5e42\u89c4\u5219\u89c4\u5219\u7684\u5e94\u7528\u8868\u660e\uff1a\n\u592a\u68d2\u4e86\uff01\u8fd9\u8868\u660e\uff0c\u8981\u8ba1\u7b97\u51fa$n$\u6b21\u6839\u7684\u5bf9\u6570\uff0c\u6211\u4eec\u6240\u8981\u505a\u7684\u5c31\u662f\u5c06\u539f\u59cb\u6570\u5b57\u7684\u5bf9\u6570\u9664\u4ee5$n$-\u8fd9\u4e00\u89c1\u89e3\u5bfc\u81f4\u4e86\u5bf9\u6570\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\uff0c\u5373\u6240\u8c13\u7684\u6839\u89c4\u5219\uff1a\n\u4e0e\u5e42\u89c4\u5219\u975e\u5e38\u7c7b\u4f3c\uff0c\u6839\u89c4\u5219\u4e0d\u4ec5\u56e0\u4e3a\u5b83\u80fd\u591f\u4ece\u5bf9\u6570\u4e2d\u62d4\u51fa\u6839(\u5982$\\displaystyle\\log(\\sqrt[12]{6})=\\frac{\\log 6}{12}$)\uff0c\u800c\u4e14\u8fd8\u56e0\u4e3a\u5b83\u80fd\u591f\u4ece\u65e0\u5230\u6709\u5730\u521b\u5efa\u6839(\u5982$\\displaystyle\\frac{\\ln 2}{5}=\\ln(\\sqrt[5]{2})$)\u3002\n\u5f53\u4e00\u4e2a\u6570\u5b57\u662f\u6839\u503c\u65f6\uff0c\u6700\u7ec8\u4ea7\u751f\u7684\u91cf\u503c\u5c06\u7cbe\u786e\u5730\u6309\u95ee\u9898\u6839\u503c\u7684\u7a0b\u5ea6\u8fdb\u884c\u91cd\u65b0\u8c03\u6574\u3002\n\u5f53\u6211\u4eec\u5c06\u5e42\u89c4\u5219\u548c\u6839\u89c4\u5219\u7ec4\u5408\u5728\u4e00\u8d77\u65f6\uff0c\u5bf9\u4e8e\u5f62\u5f0f\u4e3a$\\displaystyle\\frac{m}{n}$($m\\in\\mathbb{Z}\uff0cn\\in\\mathbb{N}$)\u7684\u4efb\u4f55\u6709\u7406\u6570\uff0c\u6211\u4eec\u90fd\u4f1a\u5f97\u5230\uff1a\n\\BEGIN{ALIGN*}\\log x^{\\frac{m}{n}}&amp\uff1b=\\log\\Left[(\\sqrt[n]{x})^m\\right]\\\\&amp\uff1b=m\\log(\\sqrt[n]x)\\\\&amp\uff1b=\\frac{m}{n}\\log x\\end{ign*}\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u65e0\u975e\u662f\u5e7f\u4e49\u6743\u529b\u89c4\u5219\u7684\u4e00\u4e2a\u7279\u4f8b\uff1a\n\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8bc1\u660e$p\\log x$\u786e\u5b9e\u662f\u57fa\u6570$b$\u9700\u8981\u63d0\u9ad8\u5230\u7684\u6307\u6570\u6765\u8bc1\u660e-\u4ee5\u4ea7\u751f$x^p$\uff1a\n\u6700\u540e\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bf4\u660e\u4e86\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u770b\u5230\u7684\u5bf9\u6570\u7684\u6240\u6709\u4e0e\u81ea\u53d8\u91cf\u76f8\u5173\u7684\u5c5e\u6027\uff1a\n\\BEGIN{ALIGN*}\\LOG\\LEFT(\\frac{5^3\\cdot\\sqrt[4]{15}}{10^{66}\\cdot e^{\\pi}}\\right)&amp\uff1b=\\log\\Left(5^3\\cdot\\sqrt[4]{15}\\right)-s\\log\\Left(10^{66}\\cdot e^{\\pi}\\right)\\\\&amp\uff1b=\\Left[\\log 5^3+\\log\\sqrt[4]{15}\\right]-\\Left[\\log(10^{66})+\\log(e^{\\pi})\\ri\u3002\n..", "note_en": "Given a  real number $x$, one of the challenges in  elementary algebra is to express $x$ as a  power of another number $b$ (known as the  base). More specifically, we are interested in finding a\u00a0number $\\Box$ such that:\n  As it turns out, this problem \u2014 in the  crude form that it currently is at least \u2014 needs to be patched up first\u00a0before any meaningful discussion can take place. For example:\n If the base is  negative, then its powers need not be necessarily\u00a0  well-defined (e.g., $\\displaystyle (-e)^{\\frac{1}{2}}$).\n If the base is $\\displaystyle 1$, then any power of it would be just $1$, in which case, it would be  impossible\u00a0for it to generate any\u00a0number that\u2019s not $1$. A\u00a0similar remark applies to the case\u00a0where\u00a0the base is equal to $0$.\n For these reasons, in the context of  power determination, it\u2019s customary to require\u00a0the\u00a0base $b$ to be a  positive number \u2014 that is not equal to $1$. While under this assumption, any power of $b$ would necessarily have to be  positive, it would also transpire \u2014under this setup \u2014 that  any\u00a0positive number can be expressed as a power of $b$ in a  unique way. That is, as long as $x$ is  positive, there will be a  unique number $\\Box$ (known as the\u00a0 exponent) such that:\n  in which case, we will simply call $\\Box$ the  logarithm of $x$ (in base $b$). In other words, logarithm is basically what happens when we expressed a number as a  power, and then take the  exponent from that power \u2014\u00a0It gives\u00a0us the  magnitude of a number, with respect to the base in question.\n For example, when we try to express the number $64$ as a power of $2$, we get that $64= 2^6$. This alone shows that $6$ is the logarithm of $64$ \u2014 \u00a0with respect to the base $2$.\n Notation-wise, the logarithm of $x$ in  base $b$ is denoted by $\\log_b x$, with $x$ also being called\u00a0the  argument of the logarithm. When considered as a function, $\\log_b x$ is defined on all  positive numbers \u2014 as long as\u00a0the base $b$ is  valid (i.e.,\u00a0\u00a0$\\displaystyle b&gt;0, b \\ne 1$) .\n To begin,\u00a0we first note that  regardless of the value of the base $b$, we always have that:\n $\\displaystyle \\log_b 1 = 0$ (since $0$ is the number $b$ needs to be raised to yield $1$)\n $\\displaystyle \\log_b b\u00a0= 1$ (since $1$ is the number $b$ needs to be raised to yield $b$)\n $\\displaystyle \\log_b \\frac{1}{b} = -1$ (since $-1$ is the number $b$ needs to be raised to yield $\\displaystyle \\frac{1}{b}$)\n Because these results are almost immediate and sufficiently notable, we\u2019ll simply\u00a0refer to\u00a0them as the\u00a0 trivial logarithmic identities.\n In addition,\u00a0since $\\log_b x$ stands for the number which\u00a0 exponentiates to $x$, we also have that by definition:\n    Since one can see by inspection that $x$ is precisely the number which exponentiates to $b^x$.\n For\u00a0example, since $\\displaystyle \\log_2 53$ is the number that $2$ needs to raise to yield $53$, we have that $\\displaystyle 2^{\\log_2 53} =53$. Similarly, since $\\displaystyle 10^{-\\pi}$ is a power of $10$ with the exponent $-\\pi$, we can infer\u00a0that $\\displaystyle \\log_{10} \\left(10^{-\\pi}\\right) = -\\pi$.\n  Being the inverse of the exponential function $\\displaystyle 10^x$, the base-$10$ logarithmic function \u2014 also known as the\u00a0  common logarithm \u2014 is customarily denoted by $\\log_{10} x$, $\\log x$, or simply $\\lg x$ for short. The common logarithm is of great interest to us, primarily\u00a0due to the prevalence of the\u00a0 decimal number system in various cultures around the world.\n Note that in older scientific texts and some textbooks in higher mathematics, $\\log x$ can also refer to \u2014 and usually is \u2014 the  natural logarithm of base $e$.\n When the common logarithm of a number is calculated, the\u00a0 decimal representation of the logarithm is usually split into two parts: the integer component\u00a0(a.k.a.,  characteristic) and the fractional component\u00a0(a.k.a.,  mantissa). The characteristic in essence tells us \u00a0the  number of digits the original number has, and the mantissa hints at the extent to which this\u00a0number is close to its next power of $10$. These are the facts that make common logarithm a\u00a0particularly handy tool in determining the  order of magnitude of an  exceptionally\u00a0large (or  small) number.\n For example, to figure out the magnitude of the number $50!$ (i.e., $50 \\times \\cdots \\times 1$), we proceed to calculate its logarithm, yielding that: \\[ \\log (50!) \\approx 64.483 \\] which means that $50! \\approx 10^{64.483} =$ $10^{64}10^{0.483} \\approx$ $10^{64} \\cdot 3.04$, suggesting that $50!$ is a $65$ -digit number which starts with $3$ \u2014 the  characteristic $64$ gives away the number of digits, and the  mantissa $0.483$ reveals\u00a0the rest about the number itself.\n Take home message? There is no need to\u00a0write out a number in full to figure out its  approximate size!\n  Being the inverse of the exponential function $2^x$, the   binary logarithm\u00a0function $\\log_2 x$ is extensively used in the field of  computer science, primarily due to the fact that computers store information in  bits (i.e., digits which takes $0$ or $1$ as possible values).\n Similar to the case in base $10$, binary logarithm can be used to figure out\u00a0the number of digits\u00a0of a positive integer\u00a0in   binary representation. In addition, binary logarithm is also used to figure out the  depth of a   binary tree, or even the  number of operations required by certain  computer algorithms\u00a0(this falls into a topic known as\u00a0  algorithmic time complexity).\n Beyond\u00a0the world of computers, binary logarithm is also used in\u00a0 music theory to conceptualize the  highness\u00a0of\u00a0musical notes, based\u00a0on the fundamental\u00a0observation\u00a0that  raising\u00a0a note by an  octave\u00a0increases the frequency of the note by\u00a0 twofold. As a result, it is often convenient to conceive a\u00a0 musical interval\u00a0as the binary logarithm of the   frequency ratio.\n  In some textbooks concerned with a more rigorous development\u00a0of\u00a0  transcendental functions, the base-$\\displaystyle e$ logarithmic function \u2014 otherwise known as\u00a0 natural logarithm, $\\log_e x$ or simply $\\ln x$ \u2014 are sometimes defined as the  area\u00a0between the  reciprocal function\u00a0$\\frac{1}{x}$ and the x-axis from $1$ to $x$ (hence the term  natural).\n  Under this definition, it could be shown that the inverse of $\\ln x$ is precisely the  natural\u00a0exponential function $e^x$, leading to the\u00a0following\u00a0 standard\u00a0definition of\u00a0natural logarithm:\n Given a positive number $x$,\u00a0$\\ln x$ denotes the number that $e$ needs to be raised, to\u00a0become $x$.\n Unlike the number $10$ \u2014 which is preferred due to the prevalence of\u00a0 decimal numbering system \u2014 the number $\\displaystyle e$ is one of the  special constants\u00a0that\u00a0pops up surprisingly often in various mathematical discourses \u2014\u00a0 irrespective of the\u00a0number system being chosen.\u00a0As a result, mathematicians tend to consider base $e$ as more  natural than base $10$ \u2014 even though some\u00a0applied scientists and engineers beg to differ in various occasions\u2026\n Actually, to illustrate the scope of these\u00a0 intellectual biases\u00a0among the scientific community, here\u2019s an interesting account from  Wikipedia\u00a0on the  historical development\u00a0of the\u00a0notations for logarithms:\n Because base 10 logarithms were most useful for computations, engineers generally simply wrote \u201clog(x)\u201d when they meant log 10(x). Mathematicians, on the other hand, wrote \u201clog(x)\u201d when they meant log e(x) for the natural logarithm. Today, both notations are found. Since hand-held electronic calculators are designed by engineers rather than mathematicians, it became customary that they follow engineers\u2019 notation. So the notation, according to which one writes \u201cln(x)\u201d when the natural logarithm is intended, may have been further popularized by the very invention that made the use of \u201ccommon logarithms\u201d far less common, electronic calculators.\n   In addition to the three most popular logarithmic functions introduced earlier, one can also define logarithm using other  valid\u00a0bases as well. In practice, logarithm is generally employed with the intention of  condensing large numbers (i.e., greater than $1$) into smaller numbers, so that the  larger the base, the  smaller the logarithm.\n However, that\u2019s only part of the story, as all\u00a0the logarithmic functions we have encountered so far have bases exceeding\u00a0the number\u00a0$1$ (i.e.,  large  base). In\u00a0fact, in the cases where the\u00a0base is  strictly between $0$ and $1$ (i.e.,  small  base), the graph of the logarithmic function will be turned\u00a0 upside down. Indeed, as opposed to a standard logarithmic function which  increases from $-\\infty$ to $\\infty$, a small-base logarithmic function actually  decreases from\u00a0$+\\infty$ to $-\\infty$\u00a0as the argument increases.\n Fortunately though, we rarely have to resort to this kind of logarithmic function in practice. As we shall see later with the   Change of Base Rule, every\u00a0pair\u00a0of logarithmic functions are all but a  multiple apart, so that in terms of  applications and  equation/inequality solving, the three standard logarithms are.generally more than enough to get things going.\n  Since logarithm allows for mapping an exponential scale into a  linear scale, it became\u00a0an vital\u00a0concept\u00a0when it comes to\u00a0communicating about a numerical variable whose quantities either\u00a0 grow\u00a0exponentially, or  shrink exponentially. Why? Because if we just take the logarithm of that variable, we are in effect turning\u00a0that variable into something people refer to as a  logarithmic scale.\n While seemingly a highly-theoretical concept, logarithmic scale \u2014 when adopted  appropriately \u2014\u00a0can be used to help us better explain/understand a\u00a0surprising amount of phenomena found in  nature.\u00a0ranging from stuffs such as the  loudness of a sound, the\u00a0 magnitude of an earthquake to the  acidity of a solution and the  highness of a musical pitch:\n In\u00a0an   equal-tempered\u00a0piano, each key in the piano can be conceived as the  binary\u00a0 logarithm of its  relative sound frequency,\u00a0so that\u00a0every time we press a higher key on the piano, we are in effect increasing the sound frequency by a\u00a0fixed factor\u00a0($\\displaystyle \\sqrt[12]{2}$ to be precise).\n In  chemistry, the acidity of a solution is measured in\u00a0  pH, which is defined as the  negative logarithm of the  concentration of hydrogen ions. This basically means that as pH increases by $1$, the concentration of hydrogen ions decreases  tenfold, leading to a substantially less acidic solution in return.\n In  seismology, the severity of an earthquake can be quantified using the   Richter scale, which is essentially the  logarithm of the  amplitude of seismic waves (relative to a  threshold amplitude), so that every time the number on Richter scale increases by $1$, severity of the earthquake increases  tenfold.\n In  acoustics, the loudness of a sound is generally quantified using   decibel (dB), which is a tenth of a  bel (B), the latter of which is the  logarithm of the  sound power (relative to the  threshold of hearing). In practice, this\u00a0means that every increase of 10 dB (equiv., 1B), increases the sound power of a source by  tenfold.\n  While not all logarithmic scales share\u00a0the same base, the fact that one can hijack a concept such as logarithm \u2014 originally a  purely-computational device \u2014 into an  unifying abstract framework\u00a0stringing together various seemingly unrelated phenomena found in nature,\u00a0illustrates the power of the human mind and by extension, the thin line between  mathematical\u00a0invention and  discovery.\n   One of the reasons why logarithm was such\u00a0a powerful  computational tool back\u00a0in the old days \u2014 before the invention of  computers or  calculators \u2014 lies in the fact that\u00a0one can always leverage certain\u00a0 properties of logarithm\u00a0to reduce a  complicated argument\u00a0to its  individual constituents\u00a0\u2014 and doing so irrespective of the base in question. In what follows, we lay out  five of such properties, which pertains\u00a0to the\u00a0 product, the\u00a0 reciprocal, the\u00a0 quotient, the\u00a0 power\u00a0and the\u00a0 root\u00a0of a logarithm, respectively.\n  Given a product $xy$ and a base $b$, can we find the logarithm of $xy$ in terms of the logarithms of $x$ and $y$? As it turns out, the answer is a resounding  yes, and a bit of inspection shows that $\\log x + \\log y$ is the number we are looking for. How so? Because that\u2019s the number $b$ needs to be raised to get to $xy$:\n  This fact \u2014 that logarithm of a product can be reduced into sum of logarithms of its constituents \u2014 gives rise to a\u00a0property commonly known as the  Product Rule.\n  In particular, when the base is $10$, the Product Rule can be translated into the following statement:\n  For example, to gauge the approximate size of numbers like $365435 \\cdot 43223$, we could take the\u00a0 common logarithm, and then apply the  Product Rule, yielding that:\n \\begin{align*} \\log (365435 \\cdot 43223) &amp; = \\log 365435 + \\log 43223 \\\\ &amp; \\approx 5.56 + 4.63 \\\\ &amp; = 10.19 \\end{align*}\n which shows that\u00a0$\\displaystyle\u00a0365435 \\cdot 43223$ is a  11-digit number close to $\\displaystyle \u00a010^{10.19}\u00a0\\approx\u00a01.55 (10^{10})$.\n Only apply the Product Rule when the preconditions are met. For example, one thing we cannot do is to break down $9$ into $-1$ and $-9$, and claim that $\\ln 9 = \\ln(-1) +\u00a0\\ln (-9)$.\n And because an equality is by default  bidirectional, instead of  breaking the product by using the Product Rule  from the left to the right, we can also use it  from the right to the left, thereby turning a sum of logarithms into a product instead. For example:\n \\begin{align*} \\log 25 + \\log 4 = \\log (25 \\cdot 4) = \\log 100 = 2 \\end{align*}\n On the downside however, since logarithm by default takes only  positive numbers as arguments, applying logarithm and its properties to a  function or an  equation can significantly\u00a0restrict its  domain of feasibility. For example, while the function $x^2$ is defined on all  real numbers, once we take the logarithm and apply the  Product Rule, the resulting\u00a0equality is still applicable \u2014 but now to the  positive numbers  only:\n  which serves as\u00a0a good reminder that\u00a0any  logarithm-based algebraic technique \u2014 be it\u00a0 logarithmic equation solving,   logarithmic inequality solving or   logarithmic differentiation\u00a0\u2014 should\u00a0be carried out\u00a0with this potential restriction in mind.\n  We know that every positive number has a multiplicative inverse (i.e.,  reciprocal), so perhaps there is also a  shortcut\u00a0in finding the logarithm of a reciprocal? Here again, the answer is a resounding  yes. To see why, suppose that we are are given a positive number $x$, then by  Product Rule, we have that:\n \\begin{align*} \\log \\left(x \\ \\cdot\u00a0\\frac{1}{x} \\right) &amp; = \\log x + \\log \\left( \\frac{1}{x} \\right) \\end{align*}\n       Surprise! We just discovered the  Reciprocal Rule, which states that to find the logarithm of a reciprocal, we just have to  negate the logarithm of the original number.\n  So instead of calculating the  binary logarithm of $\\displaystyle \\frac{1}{512}$ from scratch, we could  turn its head around and do:\n   Now that both  Product Rule and  Reciprocal Rule are in order, let\u2019s see what happens if we apply them\u00a0to a  quotient of  positive numbers $x$ and $y$:\n \\begin{align*} \\log \\left( \\frac{x}{y} \\right) &amp; = \\log \\left( x \\cdot \\frac{1}{y} \\right) \\\\ &amp; = \\log x + \\log \\left( \\frac{1}{y} \\right) \\\\ &amp; = \\log x \u2013 \\log y \\end{align*}\n Bingo! We have just shown that the logarithm of a quotient is precisely\u00a0the  difference between the original logarithms \u2014 a property commonly\u00a0known as the  Quotient Rule.\n  For example, instead to computing the  natural logarithm of $\\displaystyle \\frac{2}{e}$ from scratch, we could apply the  Quotient Rule, and get that:\n \\begin{align*} \u00a0 \\ln \\left( \\frac{2}{e}\\right) = \\ln 2\u00a0\u2013 \\ln e = \\ln 2 \u2013 1\u00a0\u00a0\\end{align*}\n As\u00a0in\u00a0the case with\u00a0 Power Rule,\u00a0instead of  breaking the quotient, we can also use the Quotient Rule  from the right to the left, thereby turning a  difference into a  quotient instead. For example:\n \\begin{align*} \u00a0\\log 45 \u2013 \\log 9 = \\log \\left( \\frac{45}{9} \\right) = \\log 5 \\end{align*}\n   which explains why in natural science, a quantity is often expressed in  logarithmic scale, \u00a0by taking the logarithm of the  ratio between the  said\u00a0quantity and a  reference point.\n  As for the logarithm of a number raised to an\u00a0 integer power, we begin by noting the case where a number is raised to\u00a0$0$:\n  In the case where\u00a0a number is raised to a  positive integer $n$, the logarithm can be obtained through the  repeated applications of\u00a0 Product Rule:\n \\begin{align*} \\log (x^n) &amp; = \\log \\underbrace{\u00a0\\left(x \\cdots x\u00a0\\right)}_{n \\text{ times}} \u00a0\\\\ &amp; = \\underbrace{\\log x + \\, \\dots + \\log x}_{n \\text{ times}} \\\\ &amp; =\u00a0n \\log x\u00a0\\end{align*}\n And in the case where a number is raised to\u00a0a  negative integer of the form $-n$, a mix of  Product Rule and  Reciprocal Rule will do:\n \\begin{align*} \\log (x^{-n}) &amp; = \\log \\left[ \\left( \\frac{1}{x}\\right)^n \\right] \\\\ &amp; = n \\log \\left( \\frac{1}{x}\\right) \\\\ &amp; = -n \\log x \\end{align*}\n Either way, we\u2019ve just shown that when\u00a0a number is raised to a  integer power,\u00a0the resulting logarithm is  rescaled precisely by\u00a0that power as well.\u00a0This interesting finding would result\u00a0in\u00a0a\u00a0 key\u00a0property of logarithm known as the  Power Rule.\n  As some might have expected, the  Power Rule is by itself a very  powerful property. For one, it allows\u00a0us to\u00a0 pull\u00a0out the exponent from the argument of a logarithm, thereby  normalizing\u00a0a potentially\u00a0 gigantic\u00a0/\u00a0 minuscule\u00a0number (e.g.,\u00a0$\\displaystyle \\log_2 (3^{15}) = 15 \\log_2 3$), Conversely, the Power Rule can also be used to  push\u00a0an exponent inside the argument of a logarithm, thereby producing a  potentially-simpler expression\u00a0(e.g., $\\displaystyle 3 \\ln 5 = \\ln (5^3) = \\ln 125$).\n Make sure that the precondition is met before applying the Power Rule. For example, while $\\ln (x^8)$ is defined on all  non-zero numbers, the equation\u00a0$\\ln (x^8)=8 \\ln x$ is only true when $x&gt;0$.\u00a0In this case though, the issue can be resolved by\u00a0 absolutizing $x$, yielding the equality $\\ln (|x|^8) = 8 \\ln |x|$ instead.\n Similar to the case with  Product Rule and  Quotient Rule, Power Rule\u00a0can be interpreted\u00a0as follows in base $10$:\n When a number is powered, the magnitude of the resulting number is precisely equal to the magnitude of the original number \u2014 times that power.    Click to Tweet\n  To find some  shortcut\u00a0in evaluating the logarithm of a  root, we begin by observing that for all  positive integer $n$, an application of \u00a0Power\u00a0Rule\u00a0shows that:\n        Awesome! This shows that to figure out the logarithm of a $n$ th root, all we have to do is to divide the logarithm of the original number by $n$ \u2014 An insight which results in\u00a0another\u00a0property of logarithm known as\u00a0the  Root Rule:\n  Much like the  Power Rule, the Root Rule is not only useful for its ability to\u00a0 pull out the root from the logarithm (as in $\\displaystyle \\log (\\sqrt[12]{6}) = \\frac{\\log 6}{12}$), but for its ability to\u00a0 create a root out of nothing as well (as in $\\displaystyle \\frac{\\ln 2}{5}=\\ln (\\sqrt[5]{2})$).\n  When a number is rooted, the\u00a0resulting magnitude is rescaled precisely by the degree of the\u00a0root in question.\n And when we combine  Power\u00a0Rule and  Root\u00a0Rule\u00a0together, we get that for any  rational number of the form $\\displaystyle \\frac{m}{n}$ ($m \\in \\mathbb{Z}, n \\in \\mathbb{N}$):\n \\begin{align*} \\log x^{\\frac{m}{n}} &amp; = \\log \\left[ (\\sqrt[n]{x})^m \\right] \\\\ &amp; = m \\log (\\sqrt[n] x) \\\\ &amp; = \\frac{m}{n} \\log x \\end{align*}\n In fact, this is nothing more than\u00a0a  special instance of the  Generalized\u00a0Power Rule:\n  which can be proved\u00a0by showing that $p \\log x$ is indeed the  exponent to which the base $b$ needs to be raised \u2014 \u00a0to produce $x^p$:\n  And finally, here is an example illustrating\u00a0 all the  argument-related properties of logarithm we have seen thus far:\n \\begin{align*} \\log \\left( \\frac{5^3 \\cdot \\sqrt[4]{15}} {10^{66} \\cdot e^{\\pi}} \\right) &amp; = \\log \\left( 5^3 \\cdot \\sqrt[4]{15} \\right) \u2013 \u00a0\\log \\left(\u00a010^{66} \\cdot e^{\\pi} \\right) \\\\ &amp; = \\left [\\log 5^3 + \\log \\sqrt[4]{15} \\right] \u2013 \\left[ \\log (10^{66}) + \\log (e^{\\pi})\\ri\n......", "posttime": "2020-07-06 03:22:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7406\u8bba,logarithm,\u5bf9\u6570", "title": "\u5bf9\u6570\u7684\u4e5d\u4e2a\u6027\u8d28\uff1a\u7406\u8bba\u548c\u5b9e\u4f8b", "title_en": "Nine properties of logarithm: theory and examples", "transed": 1, "url": "https://mathvault.ca/logarithm-theory/#Properties_of_Logarithm", "via": "", "real_tags": ["\u7406\u8bba", "logarithm", "\u5bf9\u6570"]}, {"category": "", "categoryclass": "", "imagename": "f0dea99ea84bae1dbcfaae35b2b5f8a6.jpg", "infoid": 1009975, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e9\u5728\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u4e4b\u524d\uff0c\u684c\u9762\u68cb\u76d8\u6e38\u620f\u5c31\u5f00\u59cb\u4e86\u67d0\u79cd\u7a0b\u5ea6\u7684\u590d\u5174\uff0c\u6d41\u884c\u7684\u6e38\u620f\uff0c\u5982\u5361\u5766\u5c9b\u7684\u5b9a\u5c45\u8005\u548cRide\u7684\u95e8\u7968\uff0c\u6210\u4e3a\u5bb6\u5ead\u6e38\u620f\u4e4b\u591c\u7684\u4e3b\u6d41\u8865\u5145\u3002\n\u7136\u540e\uff0c\u65b0\u51a0\u80ba\u708e\u6210\u529f\u4e86\uff0c\u6b63\u5982Quartz\u62a5\u9053\u7684\u90a3\u6837\uff0c\u5b83\u6539\u53d8\u4e86\u6709\u591a\u5c11\u4e1a\u4f59\u68cb\u76d8\u6e38\u620f\u521b\u5efa\u8005\u63a5\u8fd1\u8fd9\u4e2a\u884c\u4e1a\u3002\u4f46\u5bf9\u4e8e\u8bb8\u591a\u7a81\u7136\u53d1\u73b0\u81ea\u5df1\u88ab\u5c01\u9501\u5728\u5bb6\u91cc\u7684\u4eba\u6765\u8bf4\uff0c\u5927\u6d41\u884c\u4e5f\u6fc0\u53d1\u4e86\u4eba\u4eec\u5bf9\u9700\u8981\u521b\u9020\u529b\u548c\u6ce8\u610f\u529b\u7684\u6218\u7565\u6e38\u620f\u7684\u65b0\u5174\u8da3\u3002\u68cb\u7c7b\u6e38\u620f\u7231\u597d\u8005\u6709\u4e86\u66f4\u591a\u7684\u65f6\u95f4\u6765\u5b66\u4e60\u65b0\u6e38\u620f\u7684\u95ee\u4e16\uff0c\u800c\u6765\u5230\u73b0\u573a\u7684\u65b0\u624b\u4eec\u5219\u53d1\u73b0\u4e86\u4e00\u4e2a\u8d85\u8d8a\u7ecf\u5178\u6e38\u620f(\u5982\u5927\u5bcc\u7fc1\u548c\u7ebf\u7d22)\u7684\u4e16\u754c\u3002\n\u7136\u540e\uff0c\u57283\u670830\u65e5\uff0c\u68cb\u7c7b\u6e38\u620fFrosthaven-\u70ed\u95e8\u6e38\u620fGloomaven\u7684\u7eed\u96c6-\u5730\u4e0b\u57ce\u722c\u884c-\u5728Kickstarter\u4e0a\u77ed\u77ed\u51e0\u4e2a\u5c0f\u65f6\u5c31\u8d85\u8fc7\u4e8650\u4e07\u7f8e\u5143\u7684\u878d\u8d44\u76ee\u6807\u3002\u4eca\u5929\uff0c\u5b83\u662f\u8be5\u7f51\u7ad9\u4e0a\u8d44\u91d1\u6700\u591a\u7684\u68cb\u7c7b\u6e38\u620f\uff0c\u627f\u8bfa\u4e3a\u6e38\u620f\u7684\u5f00\u53d1\u63d0\u4f9b\u8fd11300\u4e07\u7f8e\u5143\u7684\u8d44\u91d1\u3002\u53ea\u6709\u4e24\u4e2a\u9879\u76ee\u5728\u8be5\u7f51\u7ad9\u4e0a\u4f17\u5305\u4e86\u66f4\u591a\u7684\u8d44\u91d1\u3002\nFrosthaven\u7684\u6210\u529f\u4f3c\u4e4e\u4f53\u73b0\u4e86\u684c\u9762\u6e38\u620f\u754c\u591a\u5e74\u6765\u4e00\u76f4\u5728\u53d1\u751f\u7684\u8f6c\u53d8\uff1a\u6e38\u620f\u4e0d\u4ec5\u6ce8\u91cd\u6218\u7565\u548c\u5192\u9669\uff0c\u800c\u4e14\u662f\u4e00\u79cd\u65b0\u578b\u7684\u878d\u8d44\u6a21\u5f0f\uff0c\u7c89\u4e1d\u4eec\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u6709\u66f4\u591a\u7684\u8bdd\u8bed\u6743\uff0c\u6e38\u620f\u4ece\u521b\u610f\u9636\u6bb5\u8f6c\u79fb\u5230\u4ed6\u4eec\u7684\u8d77\u5c45\u5ba4\u3002\u800c\u4e1a\u4f59\u684c\u9762\u6e38\u620f\u5219\u5b8c\u5168\u662f\u4e00\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5a31\u4e50\u3002\nComicpalooza\u7684\u7f16\u7a0b\u548c\u684c\u9762\u6e38\u620f\u7ecf\u7406\u514b\u91cc\u00b7\u5a01\u5c14\u900a(Cree Wilson)\u8bf4\uff0c\u4f60\u6709\u5927\u4f17\u5e02\u573a\u7684\u6e38\u620f\uff0c\u6bd4\u5982\u5927\u5bcc\u7fc1(Monopoly)\uff0c\u4ee5\u53ca\u4f60\u5728\u5854\u5409\u7279(Target)\u6216\u73a9\u5177\u53cd\u6597\u57ce(Toys&34\uff1bUs)\u627e\u5230\u7684\u6240\u6709\u6e38\u620f\uff0c\u8fd8\u6709\u4e1a\u4f59\u6e38\u620f\uff0c\u4f60\u901a\u5e38\u4f1a\u5728\u4f60\u7684Flgs-\u4f60\u5f53\u5730\u53cb\u597d\u7684\u6e38\u620f\u5e97-\u627e\u5230\u8fd9\u4e9b\u6e38\u620f\u3002\u7136\u540e\u662f\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684\u8fd9\u6761\u6a21\u7cca\u7684\u7ebf\uff0c\u6211\u6709\u65f6\u542c\u8bf4\u8fc7\u8fd9\u79cd\u4e1c\u897f\u53eb\u505a\u5a31\u4e50\u6e38\u620f\uff0c\u5b83\u7684\u6e38\u620f\u5356\u51fa\u4e86\u6570\u4e07\u4efd\uff0c\u4e5f\u8bb8\u662f\u6570\u5341\u4e07\u4efd\uff0c\u4f46\u8fd8\u6ca1\u6709\u5356\u51fa\u6570\u767e\u4e07\u4efd\u3002\n\u5bf9\u4e8e\u8bb8\u591a\u8fd9\u6837\u7684\u5c0f\u6e38\u620f\u6765\u8bf4\uff0c\u6765\u81ea\u7403\u8ff7\u7684\u8d44\u91d1\u88ab\u8bc1\u660e\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u5b69\u4e4b\u5b9d(Hasbro)\u662f\u4e00\u5bb6\u5236\u4f5c\u201c\u5927\u5bcc\u7fc1\u201d(Monopoly)\u548c\u201c\u8fde\u63a54\u201d(Connect 4)\u7b49\u6e38\u620f\u7684\u516c\u53f8\uff0c\u4ece\u6e38\u620f\u9500\u552e\u548c\u6388\u6743\u534f\u8bae\u5230\u7535\u89c6\u548c\u7535\u5f71\u4e1a\u52a1\uff0c\u6bcf\u5e74\u90fd\u80fd\u8d5a\u53d6\u6570\u4ebf\u7f8e\u5143\u7684\u6536\u5165\u3002\u4f46\u5bf9\u4e8e\u8f83\u65b0\u7684\u6216\u8f83\u5c0f\u7684\u6e38\u620f\u5f00\u53d1\u5546\u6765\u8bf4\uff0c\u878d\u8d44\u6a21\u5f0f\u622a\u7136\u4e0d\u540c\u3002\u8fd9\u4e9b\u5236\u9020\u5546\u5df2\u7ecf\u6210\u4e3a\u8fd9\u4e2a\u56fd\u5bb6\u6700\u53d7\u6b22\u8fce\u7684\u68c0\u75ab\u7231\u597d\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u4ed6\u4eec\u662f\u901a\u8fc7\u4f9d\u8d56Kickstarter\u7b49\u4f17\u7b79\u7f51\u7ad9\u7684\u5fae\u578b\u7ecf\u6d4e\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\n\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u72ec\u7279\u7684\u4f53\u9a8c\uff0c\u53ef\u4ee5\u8ba9\u521b\u5efa\u8005\u6392\u961f\u7b49\u5f85\u6210\u529f-\u800c\u4e14\u5b83\u5e76\u4e0d\u662fFrosthaven\u6240\u7279\u6709\u7684\u3002\u50cf\u201c\u9ed1\u6697\u7075\u9b42\u201d\u3001\u201c\u5b89\u514b\uff1a\u57c3\u53ca\u4e4b\u795e\u201d\u3001\u201c\u514b\u82cf\u9c81\uff1a\u6b7b\u4ea1\u53ef\u80fd\u6b7b\u4ea1\u201d\u548c\u201c\u88ab\u6c61\u67d3\u7684\u5723\u676f\uff1a\u963f\u74e6\u9686\u7684\u9668\u843d\u201d\u7b49\u6e38\u620f\u90fd\u662f\u901a\u8fc7\u4f17\u7b79\u8d5a\u53d6\u4e86\u6570\u767e\u4e07\u7f8e\u5143\u7684\u6e38\u620f\u3002\n\u521b\u4f5c\u8005\u5c06Kickstarter\u96c6\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\u3001\u5e7f\u544a\u548c\u7b79\u6b3e\u5de5\u5177\u4e8e\u4e00\u8eab\uff0c\u800c\u4e14\u4ed6\u4eec\u6bd4\u7f51\u7ad9\u4e0a\u51e0\u4e4e\u4efb\u4f55\u5176\u4ed6\u6e38\u620f\u521b\u5efa\u8005\u90fd\u66f4\u6210\u529f\u5730\u4f7f\u7528Kickstarter\u3002\u6839\u636e\u5a31\u4e50\u7f51\u7ad9Polygon\u6536\u96c6\u7684Kickstarter\u6570\u636e\uff0c2019\u5e74\uff0c\u7403\u8ff7\u4e3a\u684c\u9762\u6e38\u620f\u627f\u8bfa\u4e86\u8d85\u8fc71.76\u4ebf\u7f8e\u5143-\u6bd4\u524d\u4e00\u5e74\u589e\u957f\u4e866.8%\u3002\u53bb\u5e74\uff0c\u603b\u5171\u6709100\u591a\u4e07\u4eba\u5728\u8be5\u7f51\u7ad9\u4e0a\u627f\u8bfa\u73a9\u6e38\u620f\u3002\n\u5bf9\u4e8e\u7403\u8ff7\u6765\u8bf4\uff0c\u627f\u8bfa\u7684\u597d\u5904\u53ef\u80fd\u4e0d\u4ec5\u4ec5\u662f\u6e38\u620f\u672c\u8eab\u3002\u7c89\u4e1d\u53ef\u4ee5\u4ece\u6e38\u620f\u5236\u4f5c\u4eba\u90a3\u91cc\u83b7\u5f97\u7279\u6b8a\u793c\u7269\uff0c\u4ee5\u6362\u53d6\u4ed6\u4eec\u7684\u652f\u6301\u3002\u800c\u4e14\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u627f\u8bfa\u8d2d\u4e70\u4e00\u6b3e\u6e38\u620f\u6700\u7ec8\u53ef\u80fd\u6bd4\u5728\u5546\u5e97\u7b49\u5f85\u8d2d\u4e70\u7684\u6210\u672c\u66f4\u4f4e\u3002\n\u5a01\u5c14\u900a\u8bf4\uff0cKickstarter\u4e0a\u7684\u201c\u4fe1\u606f\u81ea\u7531\u6cd5\u201d\u662f\u771f\u5b9e\u7684\uff0c\u4ed6\u8865\u5145\u8bf4\uff0c\u4eba\u4eec\u901a\u5e38\u4f1a\u5ba3\u8a93\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u60f3\u9519\u8fc7\u670b\u53cb\u4eec\u4f1a\u5f97\u5230\u7684\u4e00\u573a\u6bd4\u8d5b\u3002\n\u8fd9\u662f\u4e00\u79cd\u963f\u4ec0\u00b7\u6885\u8d6b\u62c9(Ash Mehra)\u53ef\u4ee5\u8ba4\u540c\u7684\u611f\u89c9\u300227\u5c81\u7684\u6885\u8d6b\u62c9(Mehra)\u662f\u8fc8\u963f\u5bc6\u7684\u4e00\u540d\u68cb\u76d8\u6e38\u620f\u8ff7\uff0c\u4e5f\u662f\u8fc8\u963f\u5bc6\u7684\u4e00\u540d\u4f4f\u9662\u533b\u751f\u3002\u5979\u8bf4\uff0c\u5979\u6bcf\u5929\u90fd\u4f1a\u67e5\u770bKickstarter\uff0c\u5e76\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\u82b1\u8d39\u4e86\u5927\u7ea61200\u7f8e\u5143\uff0c\u627f\u8bfa\u63a8\u51fa\u50cfTerraform Mars Big Box\u548cThe Age Of Atlantis\u8fd9\u6837\u7684\u6e38\u620f\u3002\u5979\u8bf4\uff0c\u8fd9\u7edd\u5bf9\u662f\u4e00\u79cd\u53d1\u81ea\u5185\u5fc3\u7684\u5174\u594b\uff0c\u4e00\u79cd\u89c2\u770b\u6bd4\u8d5b\u7684\u5185\u5561\u80bd\u70ed\u6f6e\u3002\u5979\u627f\u8bfa\u63d0\u4f9b\u8d44\u91d1\uff0c\u4e0d\u4ec5\u662f\u4e3a\u4e86\u8fbe\u5230\u65e9\u671f\u7684\u7b79\u6b3e\u76ee\u6807\uff0c\u8fd8\u56e0\u4e3a\u7f51\u7ad9\u4e0a\u7684\u52bf\u5934\u800c\u5ef6\u957f\u4e86\u8fd9\u4e9b\u76ee\u6807\u3002\n\u50cfMehra\u8fd9\u6837\u7684\u7c89\u4e1d\u5df2\u7ecf\u5728Kickstarter\u4e0a\u4e86-\u8981\u4e48\u7b49\u5f85\u4ed6\u4eec\u6700\u559c\u6b22\u7684\u6e38\u620f\u5236\u4f5c\u4eba\u7684\u4e0b\u4e00\u6b65\u884c\u52a8\uff0c\u8981\u4e48\u5bfb\u627e\u65b0\u7684\u6e38\u620f\u6765\u8bd5\u7528-\u6240\u4ee5\u4e0e\u4ed6\u4eec\u5efa\u7acb\u8054\u7cfb\u5e76\u7b79\u96c6\u8d44\u91d1\u627f\u8bfa\u51e0\u4e4e\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\n\u5bf9\u4e8e\u68cb\u76d8\u6e38\u620f\u793e\u533a\u6765\u8bf4\uff0c\u6709\u4e00\u79cd\u5728Kickstarter\u4e0a\u89c2\u770b\u7684\u6587\u5316\u2026\u2026\u3002Cephalofair Games\u7684\u9996\u5e2d\u6267\u884c\u5b98\u3001Forge War\u3001Gloomaven\u548cFroshaaven\u7684\u521b\u5efa\u8005\u827e\u8428\u514b\u00b7\u8521\u5c14\u5fb7\u96f7\u65af(Isaac Childres)\u8bf4\uff0c\u4eba\u4eec\u66f4\u613f\u610f\u4e3a\u4e8b\u60c5\u63d0\u4f9b\u8d44\u91d1\u3002\u5b83\u5c31\u50cf\u662f\u68cb\u76d8\u6e38\u620f\u521b\u4f5c\u8005\u53ef\u4ee5\u4f7f\u7528\u7684\u66f4\u5927\u7684\u4e00\u6761\u5927\u9053\uff0c\u53ef\u4ee5\u81ea\u52a8\u83b7\u5f97\u8ffd\u968f\u8005\u3002\n\u8fd9\u5c31\u662fKickstarter\u5bf9\u4e2a\u4eba\u5236\u9020\u5546\u5982\u6b64\u6709\u5438\u5f15\u529b\uff0c\u800c\u5bf9\u5176\u4ed6\u6e38\u620f\u884c\u4e1a-\u5982\u89c6\u9891\u6e38\u620f\u5236\u9020\u5546-\u4e0d\u90a3\u4e48\u6709\u5438\u5f15\u529b\u7684\u539f\u56e0\u3002\u4f8b\u5982\uff0c\u521b\u5efa\u81ea\u5df1\u7684\u89c6\u9891\u6e38\u620f\u9700\u8981\u5f88\u5927\u7684\u521b\u4e1a\u4ef7\u503c\uff0c\u4f46\u5bf9\u4e8e\u68cb\u76d8\u6e38\u620f\u6765\u8bf4\uff0c\u4f60\u53ea\u9700\u8981\u4e00\u4e2a\u8db3\u591f\u597d\u7684\u60f3\u6cd5\u548c\u4e00\u4e2a\u4f4d\u7f6e\u826f\u597d\u7684Kickstarter\u9875\u9762\u5c31\u53ef\u4ee5\u8861\u91cf\u516c\u4f17\u7684\u5174\u8da3\u3002\n\u4e00\u65e6\u5236\u9020\u5546\u88ab\u8bc1\u660e\u662f\u6210\u529f\u7684\uff0c\u5c31\u66f4\u5bb9\u6613\u5728\u8fd9\u79cd\u6210\u529f\u7684\u57fa\u7840\u4e0a\u518d\u63a5\u518d\u5389\u3002\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u6c83\u987f\u5546\u5b66\u9662(Wharton School Of The University Of Pennsylvania)\u7814\u7a76\u4f17\u7b79\u3001\u521b\u4e1a\u548c\u6e38\u620f\u7684\u526f\u6559\u6388\u4f0a\u6851\u00b7\u83ab\u91cc\u514b(Ethan Mollick)\u8868\u793a\uff0c\u4ece\u7c89\u4e1d\u90a3\u91cc\u7b79\u96c6\u6570\u767e\u4e07\u7f8e\u5143\u662f\u4e00\u4e2a\u76f8\u5f53\u5f3a\u70c8\u7684\u8ff9\u8c61\uff0c\u8868\u660e\u4e86\u90a3\u91cc\u7684\u9700\u6c42\u3002\u6211\u53ef\u4ee5\u53bb\u627e\u6295\u8d44\u8005\u3002\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u6253\u51fa\u4e86\u4e00\u573a\u7cbe\u5f69\u7684\u6bd4\u8d5b\uff0c\u6211\u5c31\u53ef\u4ee5\u56de\u53bb\u505a\uff0c[\u4f8b\u5982]\u201c\u70c8\u706b\u6e2f\u201d(Fire Haven)\u3002&#34\uff1b\n\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5b8c\u7f8e\u7684\u7cfb\u7edf\u3002\u8521\u5c14\u5fb7\u96f7\u65af\u8bf4\uff0c\u4ed6\u628a\u5927\u90e8\u5206\u6210\u529f\u90fd\u732e\u7ed9\u4e86Kickstarter\uff0c\u4f46\u4ed6\u8865\u5145\u8bf4\uff0c\u7f51\u7ad9\u4e0a\u7684\u793e\u533a\u89c4\u6a21\u662f\u6709\u4e0a\u9650\u7684\u3002\u4ed6\u8bf4\uff0c\u867d\u7136\u4ed6\u4eec\u7684\u63a5\u89e6\u5f88\u6df1\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\u53ea\u80fd\u8fdb\u884c\u4e00\u573a\u6bd4\u8d5b\u3002\n\u5f53GloomHaven\u51fa\u7248\u540e\uff0cKickstarter\u4e0a\u7684\u6240\u6709\u4eba\u90fd\u62ff\u5230\u4e86\u4ed6\u4eec\u7684\u7248\u672c[\u5e76\u5f00\u59cb]\u5bf9\u5b83\u8d5e\u4e0d\u7edd\u53e3\uff0c\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u5c31\u662f\u5b83\u80fd\u591f\u63a5\u89e6\u5230Kickstarter\u4ee5\u5916\u7684\u66f4\u5e7f\u6cdb\u53d7\u4f17\u7684\u65f6\u5019\u3002\n\u800c\u4e14\uff0c\u878d\u8d44\u6280\u672f\u4e5f\u5b58\u5728\u7f3a\u9677\u3002\u5982\u679c\u8fbe\u5230\u4e86\u4ed6\u4eec\u7684\u76ee\u6807\uff0c\u521b\u4f5c\u8005\u5c31\u5bf9\u4e00\u5207\u8d1f\u8d23\u3002\u4ed6\u4eec\u5fc5\u987b\u81ea\u884c\u6253\u5370\u6e38\u620f\u5e76\u5c06\u5176\u53d1\u9001\u7ed9\u5ba2\u6237-\u8fd9\u4e00\u8fc7\u7a0b\u53ef\u80fd\u4ee4\u4eba\u7cbe\u75b2\u529b\u7aed\u3001\u8017\u65f6\u751a\u81f3\u6709\u5bb3\u3002\u4e00\u4f4d\u68cb\u76d8\u6e38\u620f\u7684\u521b\u5efa\u8005\u9519\u8bef\u5730\u8ba1\u7b97\u4e86\u8fd0\u9001\u6e38\u620f\u7684\u6210\u672c\uff0c\u7531\u4e8e\u610f\u60f3\u4e0d\u5230\u7684\u7ecf\u6d4e\u8d1f\u62c5\uff0c\u4ed6\u5931\u53bb\u4e86\u623f\u5b50\u3002\n\u67e5\u5c14\u5fb7\u96f7\u65af\u8bf4\uff0c\u5f88\u96be\u60f3\u8c61\u5982\u679c\u6ca1\u6709\u4f17\u7b79\uff0c\u4ed6\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u3002\u4ed6\u4e3e\u4e86\u4ed6\u7684\u6e38\u620f\u201c\u953b\u9020\u6218\u4e89\u201d\u4e3a\u4f8b\uff0c\u4ed6\u8bf4\uff0c\u5982\u679c\u4ed6\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u7b79\u5230\u94b1\u81ea\u5df1\u51fa\u7248\u5e76\u5c06\u5176\u6295\u5165\u5546\u5e97\uff0c\u6211\u60f3\u6ca1\u6709\u4eba\u4f1a\u6ce8\u610f\u5230\u5b83\u3002\n\u73b0\u5728\uff0c\u4ed6\u662f\u8fd9\u4e2a\u56fd\u5bb6\u6700\u6210\u529f\u7684\u4e1a\u4f59\u684c\u4e0a\u684c\u4e0a\u6e38\u620f\u521b\u5efa\u8005\u4e4b\u4e00\u3002", "note_en": "Long before the coronavirus pandemic, tabletop board games were having  something of a renaissance, with popular games like The Settlers of Catan and Ticket to Ride  becoming mainstream additions to family game nights.\n  Then, COVID-19 hit and,  as Quartz reported, it changed how many hobbyist board game creators approached the industry. But for many people who suddenly found themselves stuck at home under lockdown, the pandemic also spurred newfound interest in strategy games that require creativity and concentration. Board game hobbyists had more time to spend learning about new games coming out, while newbies to the scene were discovering a world beyond classics like Monopoly and Clue.\n  Then, on March 30, the board game Frosthaven \u2014 the dungeon crawling, highly-anticipated sequel to the hit game Gloomhaven \u2014  surpassed its funding goal of $500,000 on Kickstarter in mere hours. Today, it is the most-funded board game on the site ever, with nearly  $13 million pledged toward funding the game&#39;s development. Only  two projects have ever crowdsourced more funding on the site.\n  Frosthaven&#39;s success seemed to exemplify a shift that has been happening in the tabletop gaming community for years: toward games that are not only focused on strategy and adventure, but also a new type of funding model where fans have more say than ever in which games move from the idea stage to their living rooms. And hobbyist tabletop games are a different breed of entertainment altogether.\n    &#34;You have mass market games, which are Monopoly and everything that you find at Target or Toys &#34;R&#34; Us, and you have hobbyist games, which you typically find at your FLGS \u2014 your friendly local gaming store,&#34; said Cree Wilson, the programming and tabletop gaming manager for Comicpalooza. &#34;Then there&#39;s this blurry line of stuff in between, which I&#39;ve heard sometimes called entertainment gaming, and it&#39;s games selling tens of thousands, maybe hundreds of thousands of copies, but isn&#39;t selling millions yet.&#34;\n  For many of these smaller games, funding from fans has proved essential. Hasbro, the company that makes games like Monopoly and Connect 4, earns hundreds of millions each year through everything from game sales and licensing deals to its TV and film business. But funding models are far different for newer or smaller game makers. These makers have become part of one of the country&#39;s most popular quarantine hobbies, but they&#39;ve done so through a mini-economy that relies on crowdfunding sites like Kickstarter.\n  It makes for a unique experience that can line creators up for success \u2014 and it isn&#39;t specific to Frosthaven. Games like  Dark Souls,  Ankh: Gods of Egypt,  Cthulhu: Death May Die and  Tainted Grail: The Fall of Avalon are among those that earned multiple millions through crowdfunding.\n  Creators use Kickstarter like a social media site, an advertisement and a fundraising tool all in one, and they use it more successfully than nearly any other game creators on the site. In 2019, fans pledged more than  $176 million toward tabletop games \u2014 up 6.8% over the previous year, according to Kickstarter data gathered by the entertainment site Polygon. In all, more than 1 million people pledged to games on the site last year.\n  For fans, the benefits of pledging can go beyond the games themselves. Fans can earn special gifts from game makers in exchange for their support. And often, pledging toward a game can end up costing less than waiting to buy it in a store.\n    &#34;The FOMO on Kickstarter is real,&#34; Wilson said, adding that often people will pledge because they don&#39;t want to miss out on a game their friends will be getting.\n  It&#39;s a feeling that Ash Mehra can identify with. Mehra, a 27-year-old board game fan and medical resident in Miami, said she checks Kickstarter every day, and has spent about $1,200 on the site, pledging to games like the  Terraforming Mars Big Box and  The Age of Atlantis. She said there &#34;definitely is a visceral thrill, an endorphin rush&#34; to watching games she has pledged money to not only reach early fundraising targets, but then stretch them due to momentum on the site.\n  Fans like Mehra are already on Kickstarter \u2014 either awaiting their favorite game-makers next move or looking for new games to try out \u2014 so connecting with them and pulling in funding pledges is almost inevitable.\n  &#34;For the board game community, there&#39;s a culture of looking on Kickstarter ... and being more willing to fund things,&#34; said Isaac Childres, the CEO of Cephalofair Games and creator of Forge War, Gloomhaven and Frosthaven. &#34;It&#39;s like a larger avenue for board game creators to use that automatically picks up a following.&#34;\n  This is what makes Kickstarter so attractive to individual makers and less attractive to other gaming industries \u2014 like video game makers. It takes a lot of startup value to create your own video game, for instance, but for board games, you only need a good enough idea and a well-placed Kickstarter page to gauge public interest.\n  Once a maker has proven success, it&#39;s easier to build on that success. Raising millions from fans &#34;is a pretty strong sign of there&#39;s demand,&#34; said Ethan Mollick, an associate professor at the Wharton School of the University of Pennsylvania who has studied crowdfunding, entrepreneurship and games. &#34;And I can go to investors. And that also means that if I deliver a good game, I can go back and do, [for example] Fire Haven.&#34;\n  It&#39;s not a perfect system. Childres says he devotes much of his success to Kickstarter, but adds that there are &#34;upper limits&#34; to the size of the community on the site. While their engagement is deep, he said, it can only carry a game so far.\n  &#34;When GloomHaven was published and all those people on Kickstarter got their copy [and started] raving about it, that&#39;s when it sort of was able to reach a wider audience outside of Kickstarter.&#34;\n  And there are drawbacks to the funding technique, too. Creators are responsible for everything if their goals are reached. They have to print the games and send them to their customers on their own \u2014 a process that can be grueling, time-consuming and even detrimental.  One board game creator miscalculated the amount of money it would cost to ship games and lost his house due to the unexpected financial burden.\n    Childres said it&#39;s hard to imagine where he might be without crowdfunding. Offering his game Forge War as an example, he said had he &#34;somehow found the money to publish it on my own and get it into stores, I don&#39;t think anyone would have paid attention to it.&#34;\n  Now, he&#39;s one of the most successful hobbyist tabletop board game creators in the country.", "posttime": "2020-07-06 03:04:18", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6e38\u620f,\u6539\u53d8,transformed", "title": "\u4f17\u7b79\u5982\u4f55\u6539\u53d8\u684c\u9762\u68cb\u76d8\u6e38\u620f", "title_en": "How Crowdfunding Transformed Tabletop Board Games", "transed": 1, "url": "https://www.npr.org/2020/07/05/887283058/a-look-into-the-wild-economy-of-tabletop-board-game-funding", "via": "", "real_tags": ["\u6e38\u620f", "\u6539\u53d8"]}, {"category": "", "categoryclass": "", "imagename": "8a22057e3bc06f6de1eb90f1474d55fe.jpg", "infoid": 1009974, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Python\u53ca\u5176\u6700\u53d7\u6b22\u8fce\u7684\u6570\u636e\u4e89\u8bae\u5e93Pandas\u4eba\u6c14\u98d9\u5347\u3002\u4e0eJava\u7b49\u7ade\u4e89\u5bf9\u624b\u76f8\u6bd4\uff0cPython\u548cPandas\u4f7f\u6570\u636e\u63a2\u7d22\u548c\u8f6c\u6362\u53d8\u5f97\u7b80\u5355\u3002\nPython\u7acb\u523b\u5931\u53bb\u4e86\u4e00\u4e9b\u6548\u7387\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u79cd\u89e3\u91ca\u6027\u7684\u3001\u52a8\u6001\u7c7b\u578b\u7684\u8bed\u8a00\u3002\u4f46\u66f4\u91cd\u8981\u7684\u662f\uff0cPython\u4e00\u76f4\u6ce8\u91cd\u7b80\u5355\u6027\u548c\u53ef\u8bfb\u6027\uff0c\u800c\u4e0d\u662f\u539f\u59cb\u529f\u80fd\u3002\u540c\u6837\uff0cPandas\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u7b80\u5355\u3001\u9ad8\u7ea7\u7684API\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5ffd\u7565\u4e86\u6027\u80fd\u3002\u4e8b\u5b9e\u4e0a\uff0c\u718a\u732b\u7684\u521b\u9020\u8005\u5199\u4e86\u201c\u6211\u8ba8\u538c\u718a\u732b\u768410\u4ef6\u4e8b\u201d\uff0c\u603b\u7ed3\u4e86\u8fd9\u4e9b\u95ee\u9898\uff1a\n\u56e0\u6b64\uff0c\u8bb8\u591a\u5f00\u53d1\u4eba\u5458\u8bd5\u56fe\u4ee5\u5404\u79cd\u65b9\u5f0f\u5411Python\u548cPandas\u6dfb\u52a0\u66f4\u591a\u529f\u80fd\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\u4e00\u4e9b\u6700\u503c\u5f97\u6ce8\u610f\u7684\u9879\u76ee\u662f\uff1a\ndask\uff1a\u4e00\u4e2a\u4f4e\u7ea7\u8c03\u5ea6\u5668\u548c\u4e00\u4e2a\u9ad8\u7ea7\u90e8\u5206Pandas\u66ff\u4ee3\u7a0b\u5e8f\uff0c\u7528\u4e8e\u5728\u8ba1\u7b97\u96c6\u7fa4\u4e0a\u8fd0\u884c\u4ee3\u7801\u3002\nVAEX\uff1a\u90e8\u5206Pandas\u7684\u66ff\u4ee3\u54c1\uff0c\u5b83\u4f7f\u7528\u60f0\u6027\u8ba1\u7b97\u548c\u5185\u5b58\u6620\u5c04\uff0c\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u5728\u6807\u51c6\u673a\u5668\u4e0a\u5904\u7406\u5927\u578b\u6570\u636e\u96c6\u3002\nRapids\uff1a\u5728GPU\u4e0a\u8fd0\u884c\u7684\u6570\u636e\u79d1\u5b66\u5e93\u7684\u96c6\u5408\uff0c\u5305\u62ec\u90e8\u5206\u66ff\u4ee3\u718a\u732b\u7684cuDF\u3002\n\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u6b63\u5728\u5904\u7406\u5927\u91cf\u6570\u636e\uff0c\u5e76\u4e14\u9700\u8981\u66f4\u5feb\u7684\u7ed3\u679c\uff0c\u90a3\u4e48\u60a8\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u4e2a\u5462\uff1f\n\u5728\u60a8\u51b3\u5b9a\u4f7f\u7528\u54ea\u79cd\u5de5\u5177\u4e4b\u524d\uff0c\u6700\u597d\u5bf9\u4ed6\u4eec\u7684\u6bcf\u79cd\u65b9\u6cd5\u6709\u66f4\u591a\u7684\u4e86\u89e3\u3002\u6211\u4eec\u5c06\u4ed4\u7ec6\u6bd4\u8f83\u5b83\u4eec\uff0c\u4f46\u60a8\u53ef\u80fd\u5e0c\u671b\u6309\u4ee5\u4e0b\u987a\u5e8f\u8fdb\u884c\u5c1d\u8bd5\uff1a\nModin\uff0c\u4ee5Ray\u4f5c\u4e3a\u540e\u7aef\u3002\u901a\u8fc7\u5b89\u88c5\u8fd9\u4e9b\u5de5\u5177\uff0c\u53ea\u9700\u66f4\u6539\u4e00\u884c(\u5c06\u2018import padas pd`\u6539\u4e3a`import modin.padas as pd`)\uff0c\u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u663e\u8457\u7684\u597d\u5904\u3002\u4e0e\u5176\u4ed6\u5de5\u5177\u4e0d\u540c\uff0cModin\u7684\u76ee\u6807\u662f\u4e0e\u718a\u732b\u5b8c\u5168\u517c\u5bb9\u3002\nDask\uff0c\u8fd9\u662f\u4e00\u4e2a\u66f4\u5927\u7684\u9879\u76ee\uff0c\u56e0\u6b64\u4e5f\u66f4\u590d\u6742\u3002\u4f46\u662fDask\u8fd8\u63d0\u4f9b\u4e86Dask.dataframe\uff0c\u8fd9\u662f\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u7c7b\u4f3c\u718a\u732b\u7684\u5e93\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u5904\u7406\u5185\u6838\u5916\u7684\u6570\u636e\u96c6\u3002\nVAEX\uff0c\u65e8\u5728\u5e2e\u52a9\u60a8\u5728\u6807\u51c6\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u5904\u7406\u5927\u91cf\u6570\u636e\u3002\u5b83\u53d6\u4ee3\u4e86Pandas\uff0c\u6db5\u76d6\u4e86\u4e00\u4e9bPandas API\uff0c\u4f46\u5b83\u66f4\u4e13\u6ce8\u4e8e\u63a2\u7d22\u548c\u53ef\u89c6\u5316\u3002\n\u6211\u4eec\u68c0\u67e5\u7684\u6bcf\u4e2a\u5e93\u90fd\u6709\u4e0d\u540c\u7684\u4f18\u70b9\u3001\u7f3a\u70b9\u548c\u6269\u5c55\u7b56\u7565\u3002\u4e0b\u8868\u63d0\u4f9b\u4e86\u8fd9\u4e9b\u65b9\u9762\u7684\u5e7f\u6cdb\u6982\u8ff0\u3002\u5f53\u7136\uff0c\u5c31\u50cf\u5f88\u591a\u4e8b\u60c5\u4e00\u6837\uff0c\u4e0b\u9762\u7684\u5927\u90e8\u5206\u5206\u6570\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u4f60\u7684\u5b9e\u9645\u60c5\u51b5\u3002\n\u8fd9\u4e9b\u90fd\u662f\u4e3b\u89c2\u5206\u6570\uff0c\u6839\u636e\u4f60\u7684\u5177\u4f53\u60c5\u51b5\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u5728\u5206\u914d\u8fd9\u4e9b\u804c\u7cfb\u65f6\uff0c\u6211\u4eec\u8003\u8651\u5230\uff1a\n\u6613\u91c7\u6027\uff1a\u7528\u6237\u9884\u671f\u7684\u77e5\u8bc6\u91cf\u3001\u5047\u5b9a\u7684\u786c\u4ef6\u8d44\u6e90\u548c\u5b89\u88c5\u7684\u7b80\u6613\u6027\u3002\n\u6269\u5c55\u80fd\u529b\uff1a\u6bcf\u4e2a\u5de5\u5177\u7684\u5e7f\u6cdb\u6570\u636e\u96c6\u5927\u5c0f\u9650\u5236\uff0c\u53d6\u51b3\u4e8e\u5b83\u662f\u4e3b\u8981\u4f9d\u8d56\u4e8eRAM\u3001\u5355\u4e2a\u673a\u5668\u4e0a\u7684\u786c\u76d8\u7a7a\u95f4\uff0c\u8fd8\u662f\u53ef\u4ee5\u5411\u4e0a\u6269\u5c55\u5230\u673a\u5668\u7fa4\u96c6\u3002\n\u7528\u4f8b\uff1a\u65e0\u8bba\u8fd9\u4e9b\u5e93\u662f\u4e3a\u63d0\u9ad8Python\u8f6f\u4ef6\u7684\u603b\u4f53\u901f\u5ea6\u800c\u8bbe\u8ba1\u7684(\u201c\u901a\u7528\u201d)\uff0c\u8fd8\u662f\u4e13\u6ce8\u4e8e\u6570\u636e\u79d1\u5b66\u548c\u673a\u5668\u5b66\u4e60(\u201c\u6570\u636e\u79d1\u5b66\u201d)\uff0c\u8fd8\u662f\u4ec5\u9650\u4e8e\u66ff\u6362\u718a\u732b\u7684\u201cDataFrame\u201d\u529f\u80fd(\u201cDataFrame\u201d)\u3002\n\u5982\u679c\u6570\u636e\u96c6\u592a\u5927\uff0c\u65e0\u6cd5\u5728\u5355\u53f0\u8ba1\u7b97\u673a\u4e0a\u9ad8\u6548\u4f7f\u7528\uff0c\u5219\u4e3b\u8981\u9009\u62e9\u662f\u8de8\u2026\u8fd0\u884c\u4ee3\u7801\u3002\n\u591a\u7ebf\u7a0b\u6216\u5904\u7406\u5668\uff1a\u73b0\u4ee3CPU\u6709\u51e0\u4e2a\u72ec\u7acb\u7684\u5185\u6838\uff0c\u6bcf\u4e2a\u5185\u6838\u53ef\u4ee5\u8fd0\u884c\u591a\u4e2a\u7ebf\u7a0b.\u3002\u901a\u8fc7\u8de8\u5185\u6838\u5e76\u884c\u6765\u786e\u4fdd\u60a8\u7684\u7a0b\u5e8f\u4f7f\u7528\u6240\u6709\u6f5c\u5728\u7684\u5904\u7406\u80fd\u529b\u901a\u5e38\u662f\u6700\u5bb9\u6613\u7684\u8d77\u70b9\u3002\nGPU\u5185\u6838\uff1a\u663e\u5361\u6700\u521d\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u9ad8\u6548\u5730\u5e76\u884c\u6267\u884c\u6570\u767e\u4e07\u50cf\u7d20\u7684\u57fa\u672c\u8fd0\u7b97.\u3002\u7136\u800c\uff0c\u5f00\u53d1\u4eba\u5458\u5f88\u5feb\u5c31\u770b\u5230\u4e86\u8fd9\u79cd\u80fd\u529b\u7684\u5176\u4ed6\u7528\u9014\uff0c\u201cGP-GPU\u201d(\u56fe\u5f62\u5904\u7406\u5355\u5143\u4e0a\u7684\u901a\u7528\u5904\u7406)\u73b0\u5728\u662f\u4e00\u79cd\u6d41\u884c\u7684\u52a0\u901f\u4e25\u91cd\u4f9d\u8d56\u77e9\u9635\u64cd\u4f5c\u7684\u4ee3\u7801\u7684\u65b9\u6cd5\u3002\n\u8ba1\u7b97\u96c6\u7fa4\uff1a\u4e00\u65e6\u60a8\u8fbe\u5230\u4e86\u5355\u53f0\u673a\u5668\u7684\u6781\u9650\uff0c\u60a8\u5c31\u9700\u8981\u4e00\u4e2a\u8054\u7f51\u7684\u673a\u5668\u96c6\u7fa4\uff0c\u534f\u540c\u5de5\u4f5c\u3002\n\u9664\u4e86\u589e\u52a0\u66f4\u591a\u7684\u786c\u4ef6\u8d44\u6e90\u5916\uff0c\u806a\u660e\u7684\u7b97\u6cd5\u8fd8\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387\u3002\u50cfVAEX\u8fd9\u6837\u7684\u5de5\u5177\u4e25\u91cd\u4f9d\u8d56\u4e8e\u60f0\u6027\u8ba1\u7b97(\u5728\u786e\u5b9a\u9700\u8981\u7ed3\u679c\u4e4b\u524d\u4e0d\u8fdb\u884c\u4efb\u4f55\u8ba1\u7b97)\u548c\u5185\u5b58\u6620\u5c04(\u5c06\u786c\u76d8\u4e0a\u7684\u6587\u4ef6\u89c6\u4e3a\u52a0\u8f7d\u5230RAM\u4e2d)\u3002\n\u8fd9\u4e9b\u7b56\u7565\u5728\u672c\u8d28\u4e0a\u90fd\u4e0d\u6bd4\u5176\u4ed6\u7b56\u7565\u597d\uff0c\u60a8\u5e94\u8be5\u9009\u62e9\u9002\u5408\u60a8\u7279\u5b9a\u95ee\u9898\u7684\u7b56\u7565\u3002\n\u5e76\u884c\u7f16\u7a0b(\u65e0\u8bba\u60a8\u4f7f\u7528\u7684\u662f\u7ebf\u7a0b\u3001CPU\u6838\u5fc3\u3001GPU\u8fd8\u662f\u96c6\u7fa4)\u63d0\u4f9b\u4e86\u8bb8\u591a\u597d\u5904\uff0c\u4f46\u5b83\u4e5f\u76f8\u5f53\u590d\u6742\uff0c\u5e76\u4e14\u4f7f\u8c03\u8bd5\u7b49\u4efb\u52a1\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\n\u73b0\u4ee3\u56fe\u4e66\u9986\u53ef\u4ee5\u9690\u85cf\u90e8\u5206(\u4f46\u4e0d\u662f\u5168\u90e8)\u8fd9\u79cd\u589e\u52a0\u7684\u590d\u6742\u6027\u3002\u65e0\u8bba\u60a8\u4f7f\u7528\u54ea\u79cd\u5de5\u5177\uff0c\u60a8\u90fd\u4f1a\u5192\u7740\u671f\u671b\u4e00\u5207\u90fd\u80fd\u987a\u5229\u89e3\u51b3\u7684\u98ce\u9669(\u5de6\u4e0b)\uff0c\u4f46\u7ed3\u679c\u5374\u662f\u6df7\u4e71(\u53f3\u4e0b)\u3002\n\u867d\u7136\u4e0d\u662f\u6240\u6709\u8fd9\u4e9b\u5e93\u90fd\u662f\u5f7c\u6b64\u7684\u76f4\u63a5\u66ff\u4ee3\u54c1\uff0c\u4f46\u5728\u51b3\u5b9a\u9879\u76ee\u4f7f\u7528\u54ea\u4e2a\u5e93\u65f6\uff0c\u9010\u4e2a\u6bd4\u8f83\u5b83\u4eec\u662f\u5f88\u6709\u7528\u7684\u3002\n\u6025\u6d41\u662f\u4e00\u4e2a\u56fe\u4e66\u9986\u7684\u96c6\u5408\u3002\u4e3a\u4e86\u8fdb\u884c\u6b64\u6bd4\u8f83\uff0c\u6211\u4eec\u53ea\u8003\u8651\u4e86cuDF\u7ec4\u4ef6\uff0c\u5b83\u76f8\u5f53\u4e8ePandas\u7684Rapids\u3002\nDask\u66f4\u597d\u5730\u88ab\u8ba4\u4e3a\u662f\u4e24\u4e2a\u9879\u76ee\uff1a\u4e00\u4e2a\u4f4e\u7ea7Python\u8c03\u5ea6\u5668(\u5728\u67d0\u4e9b\u65b9\u9762\u7c7b\u4f3c\u4e8eRay)\u548c\u4e00\u4e2a\u9ad8\u7ea7Dataframe\u6a21\u5757(\u5728\u8bb8\u591a\u65b9\u9762\u7c7b\u4f3c\u4e8ePandas)\u3002\nDask(\u4f5c\u4e3a\u4e00\u4e2a\u8f83\u4f4e\u7ea7\u522b\u7684\u8c03\u5ea6\u5668)\u548cRay\u5728\u4f7f\u8de8\u673a\u5668\u96c6\u7fa4\u5e76\u884c\u6267\u884cPython\u4ee3\u7801\u53d8\u5f97\u66f4\u5bb9\u6613\u7684\u76ee\u6807\u4e0a\u6709\u5f88\u591a\u91cd\u53e0\u4e4b\u5904\u3002Dask\u66f4\u4e13\u6ce8\u4e8e\u6570\u636e\u79d1\u5b66\u9886\u57df\uff0c\u9664\u4e86\u4e00\u4e2a\u4f4e\u7ea7\u8c03\u5ea6\u548c\u96c6\u7fa4\u7ba1\u7406\u6846\u67b6\u4e4b\u5916\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u66f4\u9ad8\u7ea7\u522b\u7684API\uff0c\u8fd9\u4e9bAPI\u53cd\u8fc7\u6765\u53c8\u4e3aPandas\u3001NumPy\u548cSCRICKIT-LEARN\u63d0\u4f9b\u4e86\u90e8\u5206\u66ff\u4ee3\u3002\nDask\u548cRay\u7684\u521b\u5efa\u8005\u8ba8\u8bba\u4e86\u8fd9\u4e24\u4e2a\u5e93\u5728\u8fd9\u4e2aGitHub\u7ebf\u7a0b\u4e2d\u7684\u6bd4\u8f83\u60c5\u51b5\uff0c\u4ed6\u4eec\u5f97\u51fa\u7ed3\u8bba\uff0c\u8c03\u5ea6\u7b56\u7565\u662f\u5173\u952e\u7684\u533a\u522b\u4e4b\u4e00\u3002Dask\u4f7f\u7528\u96c6\u4e2d\u5f0f\u8c03\u5ea6\u5668\u5728\u591a\u4e2a\u5185\u6838\u4e4b\u95f4\u5171\u4eab\u5de5\u4f5c\uff0c\u800cRay\u4f7f\u7528\u5206\u5e03\u5f0f\u81ea\u4e0b\u800c\u4e0a\u8c03\u5ea6\u3002\nDask(\u66f4\u9ad8\u7ea7\u522b\u7684Dataframe)\u627f\u8ba4Pandas API\u7684\u5c40\u9650\u6027\uff0c\u867d\u7136\u5b83\u4e3a\u4e86\u719f\u6089\u800c\u90e8\u5206\u6a21\u62df\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u5b83\u7684\u76ee\u6807\u5e76\u4e0d\u662f\u5b8c\u5168\u517c\u5bb9Pandas\u3002\u5982\u679c\u60a8\u6709\u590d\u6742\u7684\u73b0\u6709Pandas\u4ee3\u7801\uff0c\u60a8\u4e0d\u592a\u53ef\u80fd\u7b80\u5355\u5730\u5c06Pandas\u66ff\u6362\u4e3aDask.Dataframe\u5e76\u8ba9\u4e00\u5207\u6309\u9884\u671f\u5de5\u4f5c\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8fd9\u6b63\u662f\u83ab\u4e01\u52aa\u529b\u5b9e\u73b0\u7684\u76ee\u6807\uff1a100%\u7684\u718a\u732b\u8986\u76d6\u7387\u3002Modin\u53ef\u4ee5\u5728Dask\u4e4b\u4e0a\u8fd0\u884c\uff0c\u4f46\u6700\u521d\u662f\u4e3a\u4e0eRay\u4e00\u8d77\u5de5\u4f5c\u800c\u6784\u5efa\u7684\uff0c\u800c\u4e14\u8fd9\u79cd\u96c6\u6210\u4ecd\u7136\u6bd4\u8f83\u6210\u719f\u3002\nDask(Dataframe)\u4e0ePandas\u4e0d\u5b8c\u5168\u517c\u5bb9\uff0c\u4f46\u975e\u5e38\u63a5\u8fd1\u3002\u8fd9\u4e9b\u5bc6\u5207\u7684\u5173\u7cfb\u610f\u5473\u7740\u8fbe\u65af\u514b\u4e5f\u80cc\u8d1f\u7740\u718a\u732b\u56fa\u6709\u7684\u4e00\u4e9b\u5305\u88b1\u3002VAEX\u4e0ePandas\u7684\u5dee\u5f02\u66f4\u5927(\u5c3d\u7ba1\u5bf9\u4e8e\u8bfb\u53d6\u6570\u636e\u548c\u8ba1\u7b97\u6c47\u603b\u7edf\u8ba1\u7b49\u57fa\u672c\u64cd\u4f5c\u800c\u8a00\uff0cVAEX\u975e\u5e38\u76f8\u4f3c)\uff0c\u56e0\u6b64\u4e5f\u8f83\u5c11\u53d7\u5230\u5b83\u7684\u9650\u5236\u3002\n\u5f52\u6839\u7ed3\u5e95\uff0cDask\u66f4\u4e13\u6ce8\u4e8e\u8ba9\u60a8\u6269\u5c55\u4ee3\u7801\u4ee5\u8ba1\u7b97\u96c6\u7fa4\uff0c\u800cVaex\u4f7f\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u5904\u7406\u5927\u578b\u6570\u636e\u96c6\u53d8\u5f97\u66f4\u5bb9\u6613\u3002VAEX\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\u6765\u5e2e\u52a9\u60a8\u8f7b\u677e\u5730\u53ef\u89c6\u5316\u548c\u7ed8\u5236\u5927\u578b\u6570\u636e\u96c6\uff0c\u800cDask\u5219\u66f4\u5173\u6ce8\u6570\u636e\u5904\u7406\u548c\u4e89\u8bba\u3002\n\u8fbe\u65af\u514b\u548c\u62c9\u76ae\u5179\u901a\u8fc7\u62c9\u76ae\u5179\u63d0\u4f9b\u7684\u6574\u5408\u5728\u4e00\u8d77\u73a9\u5f97\u5f88\u597d\u3002\u5982\u679c\u60a8\u6709\u8ba1\u7b97\u96c6\u7fa4\uff0c\u5219\u5e94\u8be5\u4f7f\u7528Dask\u3002\u5982\u679c\u60a8\u6709NVIDIA\u663e\u5361\uff0c\u5219\u5e94\u4f7f\u7528Rapids\u3002\u5982\u679c\u60a8\u6709NVIDIA GPU\u8ba1\u7b97\u7fa4\u96c6\uff0c\u5219\u5e94\u540c\u65f6\u4f7f\u7528\u4e24\u8005\u3002\n\u5c06\u96f7\u4e0e\u83ab\u4e01\u3001Vaex\u6216Rapids\u76f8\u63d0\u5e76\u8bba\u5e76\u4e0d\u90a3\u4e48\u6709\u610f\u4e49\u3002\u4e0e\u5176\u4ed6\u5e93\u4e0d\u540c\uff0cRay\u6ca1\u6709\u63d0\u4f9b\u9ad8\u7ea7API\u6216Pandas\u7b49\u6548\u9879\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0cRay\u4e3aModin\u63d0\u4f9b\u52a8\u529b\uff0c\u5e76\u4ee5\u7c7b\u4f3c\u4e8eDask\u7684\u65b9\u5f0f\u4e0eRapids\u96c6\u6210\u3002\n\u4e0eDask\u548cVaex\u7684\u6bd4\u8f83\u4e00\u6837\uff0cModin\u7684\u76ee\u6807\u662f\u63d0\u4f9b\u5b8c\u6574\u7684\u718a\u732b\u66ff\u4ee3\u54c1\uff0c\u800cVaex\u4e0e\u718a\u732b\u7684\u5dee\u5f02\u66f4\u5927\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u4e00\u79cd\u5feb\u901f\u65b9\u6cd5\u6765\u52a0\u901f\u73b0\u6709\u7684Pandas\u4ee3\u7801\uff0c\u90a3\u4e48Modin\u5e94\u8be5\u662f\u60a8\u7684\u7b2c\u4e00\u7ad9\uff0c\u800cVaex\u66f4\u53ef\u80fd\u5bf9\u65b0\u9879\u76ee\u6216\u7279\u5b9a\u7528\u4f8b\u611f\u5174\u8da3(\u7279\u522b\u662f\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u53ef\u89c6\u5316\u5927\u578b\u6570\u636e\u96c6)\u3002\nModin\u901a\u8fc7\u4f7f\u7528\u591a\u4e2aCPU\u5185\u6838(\u901a\u8fc7Ray\u6216Dask)\u6269\u5c55\u718a\u732b\u4ee3\u7801\u3002Rapids\u901a\u8fc7\u5728GPU\u4e0a\u8fd0\u884c\u718a\u732b\u4ee3\u7801\u6765\u6269\u5c55\u5b83\u3002\u5982\u679c\u4f60\u6709\u53ef\u7528\u7684\u56fe\u5f62\u5904\u7406\u5668\uff0c\u8bd5\u8bd5\u201c\u6025\u6d41\u201d\u5427\u3002\u4f46\u6700\u5bb9\u6613\u7684\u80dc\u5229\u53ef\u80fd\u6765\u81ea\u83ab\u4e01\uff0c\u4f60\u53ef\u80fd\u53ea\u6709\u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u8fc7\u83ab\u4e01\u4e4b\u540e\u624d\u5e94\u8be5\u8f6c\u5411\u6025\u6d41\u3002\nVAEX\u548cRapids\u7684\u76f8\u4f3c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u63d0\u4f9b\u6027\u80fd\u63d0\u5347\uff1aVAex\u901a\u8fc7\u66f4\u597d\u5730\u5229\u7528\u8ba1\u7b97\u673a\u7684\u786c\u76d8\u548c\u5904\u7406\u5668\u5185\u6838\uff0c\u800cRapids\u901a\u8fc7\u4f7f\u7528\u8ba1\u7b97\u673a\u7684GPU(\u5982\u679c\u5b83\u53ef\u7528\u4e14\u517c\u5bb9)\u3002Rapids\u9879\u76ee\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u7684\u76ee\u6807\u662f\u6bd4Vaex\u5e7f\u6cdb\u5f97\u591a\uff0c\u8ba9\u4f60\u5728\u4e0d\u79bb\u5f00GPU\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u7aef\u5230\u7aef\u7684\u673a\u5668\u5b66\u4e60\u3002VAEX\u66f4\u9002\u5408\u4e8e\u539f\u578b\u548c\u6570\u636e\u63a2\u7d22\uff0c\u8ba9\u60a8\u53ef\u4ee5\u5728\u6d88\u8d39\u7ea7\u673a\u5668\u4e0a\u63a2\u7d22\u5927\u578b\u6570\u636e\u96c6\u3002\n\u73a9\u65b0\u7684\u3001\u4e13\u95e8\u7684\u5de5\u5177\u5f88\u6709\u8da3\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8bb8\u591a\u9879\u76ee\u90fd\u5b58\u5728\u8fc7\u5ea6\u5de5\u7a0b\u548c\u8fc7\u65e9\u4f18\u5316\u7684\u95ee\u9898\u3002\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u9047\u5230\u53ef\u4f38\u7f29\u6027\u6216\u6548\u7387\u95ee\u9898\uff0c\u5355\u72ec\u4f7f\u7528Python\u548cPandas\u6ca1\u6709\u4ec0\u4e48\u9519\u3002\u5b83\u4eec\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86\u6210\u719f\u5ea6\u548c\u7a33\u5b9a\u6027\uff0c\u4ee5\u53ca\u7b80\u5355\u6027\u3002\n\u53ea\u6709\u5728\u8fbe\u5230Python\u548cPandas\u672c\u8eab\u7684\u9650\u5236\u4e4b\u540e\uff0c\u624d\u5e94\u8be5\u5f00\u59cb\u7814\u7a76\u8fd9\u91cc\u8ba8\u8bba\u7684\u5e93\u3002\u5426\u5219\uff0c\u60a8\u53ef\u80fd\u4f1a\u82b1\u8d39\u592a\u591a\u65f6\u95f4\u6765\u9009\u62e9\u548c\u914d\u7f6e\u5e93\uff0c\u800c\u4e0d\u662f\u5728\u9879\u76ee\u4e0a\u53d6\u5f97\u8fdb\u5c55\u3002\n\u5728DataRevenue\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u8fd9\u4e9b\u5e93\u6784\u5efa\u4e86\u8bb8\u591a\u9879\u76ee\uff0c\u5e76\u4e14\u77e5\u9053\u4f55\u65f6\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u3002\u5982\u679c\u60a8\u9700\u8981\u5176\u4ed6\u610f\u89c1\uff0c\u8bf7\u4e0e\u6211\u4eec\u8054\u7cfb\u3002\u6211\u4eec\u5f88\u4e50\u610f\u5e2e\u5fd9\u3002", "note_en": "Python and its most popular data wrangling library, Pandas, are soaring in popularity. Compared to competitors like Java, Python and Pandas make data exploration and transformation  simple.\n  Python loses some efficiency right off the bat because it\u2019s an interpreted, dynamically typed language. But more importantly, Python has always focused on simplicity and readability over raw power. Similarly, Pandas focuses on offering a simple, high-level API, largely ignoring performance. In fact, the creator of Pandas wrote \u201c The 10 things I hate about pandas,\u201d which summarizes these issues:\n  So it\u2019s no surprise that many developers are trying to add more power to Python and Pandas in various ways. Some of the most notable projects are:\n Dask : a low-level scheduler and a high-level partial Pandas replacement, geared toward running code on compute clusters.\n   Vaex : a partial Pandas replacement that uses lazy evaluation and memory mapping to allow developers to work with large datasets on standard machines.\n RAPIDS : a collection of data-science libraries that run on GPUs and include  cuDF, a partial replacement for Pandas.\n   So if you\u2019re working with a lot of data and need faster results, which should you use?\n  Before you can make a decision about which tool to use, it\u2019s good to have some more context about each of their approaches. We\u2019ll compare each of them closely, but you\u2019ll probably want to try them out in the following order:\n Modin, with  Ray as a backend. By installing these, you might see significant benefit by changing just a single line (`import pandas as pd` to `import modin.pandas as pd`). Unlike the other tools, Modin aims to reach full compatibility with Pandas.\n Dask,  a larger and hence more complicated project. But Dask also provides  Dask.dataframe, a higher-level, Pandas-like library that can help you deal with  out-of-core datasets.\n Vaex, which is designed to help you work with large data on a standard laptop. Its Pandas replacement covers some of the Pandas API, but it\u2019s more focused on exploration and visualization.\n  Each of the libraries we examine has different strengths, weaknesses, and scaling strategies. The following table gives a broad overview of these. Of course, as with many things, most of the scores below are heavily dependent on your exact situation.\n  These are subjective grades, and they may vary widely given your specific circumstances. When assigning these grades, we considered:\n Ease of Adoption: The amount of knowledge expected from users, presumed hardware resources, and ease of installation.\n Scaling ability: The broad dataset size limits for each tool, depending on whether it relies mainly on RAM, hard drive space on a single machine, or can scale up to clusters of machines.\n Use case: Whether the libraries are designed to speed up Python software in general (\u201c General\u201d), are focused on data science and machine learning (\u201c Data science\u201d), or are limited to simply replacing Pandas\u2019 \u2018DataFrame\u2019 functionality (\u201c DataFrame\u201d).\n  If your dataset is too large to work with efficiently on a single machine, your main options are to run your code across\u2026\n ...multiple threads or processors: Modern CPUs have several independent cores, and each core can run many threads. Ensuring that your program uses all the potential processing power by parallelizing across cores is often the easiest place to start.\n ...GPU cores: Graphics cards were originally designed to efficiently carry out basic operations on millions of pixels in parallel. However, developers soon saw other uses for this power, and \u201cGP-GPU\u201d (general processing on a graphics processing unit) is now a popular way to speed up code that relies heavily on matrix manipulations.\n ...compute clusters: Once you hit the limits of a single machine, you need a networked cluster of machines, working cooperatively.\n Apart from adding more hardware resources, clever algorithms can also improve efficiency. Tools like Vaex rely heavily on   lazy evaluation  (not doing any computation until it\u2019s certain the results are needed) and   memory mapping  (treating files on hard drives as if they were loaded into RAM).\n None of these strategies is inherently better than the others, and you should choose the one that suits your specific problem.\n Parallel programming (no matter whether you\u2019re using threads, CPU cores, GPUs, or clusters) offers many benefits, but it\u2019s also quite complex, and it makes tasks such as debugging far more difficult.\n Modern libraries can hide some \u2013 but not all \u2013 of this added complexity. No matter which tools you use, you\u2019ll run the risk of expecting everything to work out neatly (below left), but getting chaos instead (below right).\n   While not all of these libraries are direct alternatives to each other, it\u2019s useful to compare them each head-to-head when deciding which one(s) to use for a project.\n  RAPIDS is a collection of libraries. For this comparison, we consider only the  cuDF component, which is the RAPIDS equivalent of Pandas.\n Dask is better thought of as two projects: a low-level Python scheduler (similar in some ways to Ray) and a higher-level Dataframe module (similar in many ways to Pandas).\n  Dask (as a lower-level scheduler) and Ray overlap quite a bit in their goal of making it easier to execute Python code in parallel across clusters of machines. Dask focuses more on the data science world, providing higher-level APIs that in turn provide partial replacements for Pandas, NumPy, and scikit-learn, in addition to a low-level scheduling and cluster management framework.\n The creators of Dask and Ray discuss how the libraries compare in  this GitHub thread, and they conclude that the scheduling strategy is one of the key differentiators. Dask uses a centralized scheduler to share work across multiple cores, while Ray uses distributed bottom-up scheduling.\n  Dask (the higher-level Dataframe) acknowledges the limitations of the Pandas API, and while it partially emulates this for familiarity, it doesn\u2019t aim for full Pandas compatibility. If you have complicated existing Pandas code, it\u2019s unlikely that you can simply switch out Pandas for Dask.Dataframe and have everything work as expected. By contrast, this is exactly the goal Modin is working toward: 100% coverage of Pandas. Modin can run on top of Dask but was originally built to work with Ray, and that integration remains more mature.\n  Dask (Dataframe) is not fully compatible with Pandas, but it\u2019s pretty close. These close ties mean that Dask also carries some of the baggage inherent to Pandas. Vaex deviates more from Pandas (although for basic operations, like reading data and computing summary statistics, it\u2019s very similar) and therefore is also less constrained by it.\n Ultimately, Dask is more focused on letting you scale your code to compute clusters, while Vaex makes it easier to work with large datasets on a single machine. Vaex also provides features to help you easily visualize and plot large datasets, while Dask focuses more on data processing and wrangling.\n  Dask and RAPIDS play nicely together via an integration  provided by RAPIDS. If you have a compute cluster, you should use Dask. If you have an NVIDIA graphics card, you should use RAPIDS. If you have a compute cluster of NVIDIA GPUs, you should use both.\n  It\u2019s not that meaningful to compare Ray to Modin, Vaex, or RAPIDS. Unlike the other libraries, Ray doesn\u2019t offer high-level APIs or a Pandas equivalent. Instead, Ray powers Modin and  integrates with RAPIDS in a similar way to Dask.\n  As with the Dask and Vaex comparison, Modin\u2019s goal is to provide a full Pandas replacement, while Vaex deviates more from Pandas. Modin should be your first port of call if you\u2019re looking for a quick way to speed up existing Pandas code, while Vaex is more likely to be interesting for new projects or specific use cases (especially visualizing large datasets on a single machine).\n  Modin scales Pandas code by using many CPU cores, via Ray or Dask. RAPIDS scales Pandas code by running it on GPUs. If you have GPUs available, give RAPIDS a try. But the easiest win is likely to come from Modin, and you should probably turn to RAPIDS only after you\u2019ve tried Modin first.\n  Vaex and RAPIDS are similar in that they can both provide performance boosts on a single machine: Vaex by better utilizing your computer\u2019s hard drive and processor cores, and RAPIDS by using your computer\u2019s GPU (if it\u2019s available and compatible). The RAPIDS project as a whole aims to be much broader than Vaex, letting you do machine learning end-to-end without the data leaving your GPU. Vaex is better for prototyping and data exploration, letting you explore large datasets on consumer-grade machines.\n  It\u2019s fun to play with new, specialized tools. That said, many projects suffer from over-engineering and premature optimization. If you haven\u2019t run into scaling or efficiency problems yet, there\u2019s nothing wrong with using Python and Pandas on their own. They are widely used and offer maturity and stability, along with simplicity.\n You should only start looking into the libraries discussed here once you\u2019ve reached the limitations of Python and Pandas on their own. Otherwise you risk spending too much time choosing and configuring libraries instead of making progress on your project.\n At DataRevenue, we\u2019ve built many projects with these libraries and know when and how to use them. If you need a second opinion,  reach out to us. We\u2019re happy to help.", "posttime": "2020-07-06 03:03:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ray,pandas", "title": "\u7f29\u653e\u718a\u732b\uff1a\u6bd4\u8f83Dask\u3001Ray\u3001Modin\u3001Vaex\u548cRapids", "title_en": "Scaling Pandas: Comparing Dask, Ray, Modin, Vaex, and Rapids", "transed": 1, "url": "https://datarevenue.com/en-blog/pandas-vs-dask-vs-vaex-vs-modin-vs-rapids-vs-ray", "via": "", "real_tags": ["ray", "pandas"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1009973, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u719f\u6089JIT\u7684\u4e00\u822c\u5de5\u4f5c\u65b9\u5f0f(\u5982\u679c\u60a8\u7406\u89e3\u4e86\u6807\u9898\u6240\u6307\u7684\u5185\u5bb9)\uff0c\u6211\u5efa\u8bae\u60a8\u7565\u8bfb\u8fd9\u7bc7\u6587\u7ae0\uff0c\u6216\u8005\u76f4\u63a5\u9605\u8bfbJIT\u7f16\u8bd1\u5668\u662f\u5982\u4f55\u5b9e\u73b0\u548c\u5feb\u901f\u7684\uff1aJulia\u3001PyPy\u3001LuaJIT\u3001Graal\u7b49\u3002\n\u6211\u7684\u5bfc\u5e08\u514b\u91cc\u65af\u628a\u6211\u4ece\u201c\u4ec0\u4e48\u662fJIT\u201d\u5e26\u5230\u4e86\u6211\u73b0\u5728\u6240\u5904\u7684\u4f4d\u7f6e\uff0c\u4ed6\u66fe\u7ecf\u544a\u8bc9\u6211\uff0c\u7f16\u8bd1\u5668\u53ea\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u8f93\u51fa\u7684\uff0c\u6839\u672c\u4e0d\u662f\u4f4e\u7ea7\u7684\u548c\u53ef\u6015\u7684\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u76f8\u5f53\u6b63\u786e\u7684\uff0c\u4e86\u89e3\u7f16\u8bd1\u5668\u5185\u90e8\u662f\u5f88\u6709\u8da3\u7684\uff0c\u800c\u4e14\u901a\u5e38\u5bf9\u5404\u5730\u7684\u7a0b\u5e8f\u5458\u90fd\u5f88\u6709\u7528\uff01\n\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4ecb\u7ecd\u4e86\u7f16\u7a0b\u8bed\u8a00\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff0c\u4ee5\u53caJIT\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u5b83\u5c06\u4ecb\u7ecdJulia\u8bed\u8a00\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u4f46\u4e0d\u4f1a\u8ba8\u8bba\u66f4\u4f20\u7edf\u7684JIT\u6240\u505a\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u6216\u4f18\u5316\u3002\u67e5\u770bJIT\u7f16\u8bd1\u5668\u662f\u5982\u4f55\u5b9e\u73b0\u548c\u5feb\u901f\u7684\uff1aJulia\u3001PyPy\u3001LuaJIT\u3001Graal\u7b49\uff0c\u4e86\u89e3\u5143\u8ddf\u8e2a\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3001Graal\u5982\u4f55\u652f\u6301C\u6269\u5c55\u3001JIT\u4e0eLLVM\u7684\u5173\u7cfb\u7b49\uff01\n\u5f53\u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u5b83\u8981\u4e48\u4ee5\u67d0\u79cd\u65b9\u5f0f\u89e3\u91ca\uff0c\u8981\u4e48\u4ee5\u67d0\u79cd\u65b9\u5f0f\u7f16\u8bd1\u3002\u7f16\u8bd1\u5668/\u89e3\u91ca\u5668\u6709\u65f6\u88ab\u79f0\u4e3a\u4e00\u79cd\u8bed\u8a00\u7684\u5b9e\u73b0\uff0c\u4e00\u79cd\u8bed\u8a00\u53ef\u4ee5\u6709\u591a\u4e2a\u5b9e\u73b0\u3002\u60a8\u53ef\u80fd\u542c\u8bf4\u8fc7\u8fd9\u6837\u7684\u4e8b\u60c5\uff1a\u89e3\u91caPython\uff0c\u4f46\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740Python\u7684\u5f15\u7528(\u6807\u51c6/\u9ed8\u8ba4)\u5b9e\u73b0\u662f\u89e3\u91ca\u5668\u3002Python\u662f\u4e00\u79cd\u8bed\u8a00\u89c4\u8303\uff0cCPython\u662fPython\u7684\u89e3\u91ca\u5668\u548c\u5b9e\u73b0\u3002\n\u89e3\u91ca\u5668\u662f\u76f4\u63a5\u6267\u884c\u4ee3\u7801\u7684\u7a0b\u5e8f\u3002\u4f17\u6240\u5468\u77e5\u7684\u89e3\u91ca\u5668\u901a\u5e38\u662f\u7528C\u7f16\u5199\u7684\u3002Ruby\u3001Python\u548cPHP\u90fd\u662f\u7528C\u7f16\u5199\u7684\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u677e\u6563\u5730\u6a21\u62df\u89e3\u91ca\u5668\u5de5\u4f5c\u65b9\u5f0f\u7684\u51fd\u6570\uff1a\n\u51fd\u6570\u89e3\u91ca(\u4ee3\u7801\u5b57\u7b26\u4e32){IF code==&#34\uff1bprint(&#39\uff1bHello\uff0cWorld\uff01&#39\uff1b)&#34\uff1b{print(&#34\uff1bhello\uff0cWorld&#34\uff1b)\uff1b}Else if code==\u201cx=0\uff1bx+=4\uff1bprint(X)\u201d{Variable_x\uff1a=0 Variable_x+=4 print(X)}}\u3002\n\u7f16\u8bd1\u5668\u662f\u5c06\u4ee3\u7801\u4ece\u4e00\u79cd\u8bed\u8a00\u7ffb\u8bd1\u6210\u53e6\u4e00\u79cd\u8bed\u8a00\u7684\u7a0b\u5e8f\uff0c\u5c3d\u7ba1\u5b83\u901a\u5e38\u6307\u7684\u662f\u76ee\u6807\u8bed\u8a00\uff0c\u5373\u673a\u5668\u4ee3\u7801\u3002\u7f16\u8bd1\u8bed\u8a00\u7684\u4f8b\u5b50\u6709C\u3001GO\u548cRust\u3002\n\u7f16\u8bd1\u8bed\u8a00\u548c\u89e3\u91ca\u8bed\u8a00\u4e4b\u95f4\u7684\u533a\u522b\u5b9e\u9645\u4e0a\u8981\u7ec6\u5fae\u5f97\u591a\u3002Go\u548cRust\u90fd\u7ecf\u8fc7\u4e86\u6e05\u6670\u7684\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u4eec\u8f93\u51fa\u7684\u662f\u673a\u5668\u4ee3\u7801\u6587\u4ef6--\u8fd9\u662f\u8ba1\u7b97\u673a\u672c\u8eab\u5c31\u80fd\u7406\u89e3\u7684\u3002\u7f16\u8bd1\u548c\u8fd0\u884c\u6b65\u9aa4\u5b8c\u5168\u4e0d\u540c\u3002\n\u4f46\u662f\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u7ffb\u8bd1\u6210\u4efb\u4f55\u76ee\u6807\u8bed\u8a00(\u8fd9\u6709\u65f6\u79f0\u4e3a\u8f6c\u6362)\u3002\u4f8b\u5982\uff0cJava\u6709\u4e24\u4e2a\u6b65\u9aa4\u7684\u5b9e\u73b0\u3002\u7b2c\u4e00\u79cd\u662f\u5c06Java\u6e90\u4ee3\u7801\u7f16\u8bd1\u6210\u5b57\u8282\u7801\uff0c\u8fd9\u662f\u4e00\u79cd\u4e2d\u95f4\u8868\u793a(IR)\u3002\u7136\u540e\u5bf9\u5b57\u8282\u7801\u8fdb\u884cJIT\u7f16\u8bd1-\u8fd9\u6d89\u53ca\u5230\u89e3\u91ca\u3002\nPython\u548cRuby\u4e5f\u5206\u4e24\u6b65\u6267\u884c\u3002\u5c3d\u7ba1\u5b83\u4eec\u88ab\u79f0\u4e3a\u89e3\u91ca\u578b\u8bed\u8a00\uff0c\u4f46\u5b83\u4eec\u7684\u53c2\u8003\u5b9e\u73b0\u5b9e\u9645\u4e0a\u5c06\u6e90\u4ee3\u7801\u7f16\u8bd1\u6210\u5b57\u8282\u7801\u3002\u60a8\u53ef\u80fd\u5df2\u7ecf\u770b\u5230\u5305\u542bPython\u5b57\u8282\u7801\u7684.pyc\u6587\u4ef6(\u5728Python3\u4e2d\u4e0d\u518d\u662f\u8fd9\u6837)\uff01\u7136\u540e\u7531\u865a\u62df\u673a\u89e3\u91ca\u8be5\u5b57\u8282\u7801\u3002\u8fd9\u4e9b\u89e3\u91ca\u5668\u4f7f\u7528\u5b57\u8282\u7801\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5458\u5f80\u5f80\u4e0d\u592a\u5173\u5fc3\u7f16\u8bd1\u65f6\u95f4\uff0c\u800c\u521b\u5efa\u5b57\u8282\u7801\u8bed\u8a00\u5141\u8bb8\u5de5\u7a0b\u5e08\u6307\u5b9a\u5c3d\u53ef\u80fd\u9ad8\u6548\u7684\u89e3\u91ca\u5b57\u8282\u7801\u3002\n\u4f7f\u7528\u5b57\u8282\u7801\u662f\u8bed\u8a00\u5728\u6267\u884c\u524d\u68c0\u67e5\u8bed\u6cd5\u7684\u65b9\u5f0f(\u5c3d\u7ba1\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u4eec\u53ef\u4ee5\u53ea\u5728\u542f\u52a8\u89e3\u91ca\u5668\u4e4b\u524d\u6267\u884c\u4e00\u904d)\u3002\u4e0b\u9762\u7684\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u4e3a\u4ec0\u4e48\u8981\u5728\u8fd0\u884c\u524d\u68c0\u67e5\u8bed\u6cd5\u3002\n\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u6ce8\u610f\u4e8b\u9879\u662f\uff0c\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u89e3\u91ca\u8bed\u8a00\u901a\u5e38\u901f\u5ea6\u8f83\u6162\uff0c\u6700\u660e\u663e\u7684\u539f\u56e0\u662f\u5b83\u4eec\u662f\u7528\u6267\u884c\u65f6\u95f4\u5f00\u9500\u8f83\u5927\u7684\u9ad8\u7ea7\u8bed\u8a00\u6267\u884c\u7684\u3002\u4e3b\u8981\u539f\u56e0\u662f\u4ed6\u4eec\u503e\u5411\u4e8e\u5b9e\u73b0\u7684\u8bed\u8a00\u7684\u52a8\u6001\u6027\u610f\u5473\u7740\u4ed6\u4eec\u9700\u8981\u5f88\u591a\u989d\u5916\u7684\u6307\u4ee4\u6765\u51b3\u5b9a\u4e0b\u4e00\u6b65\u505a\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u8def\u7531\u6570\u636e\u3002\u4eba\u4eec\u4ecd\u7136\u9009\u62e9\u6784\u5efa\u89e3\u91ca\u5668\u800c\u4e0d\u662f\u7f16\u8bd1\u5668\uff0c\u56e0\u4e3a\u89e3\u91ca\u5668\u66f4\u5bb9\u6613\u6784\u5efa\uff0c\u5e76\u4e14\u66f4\u9002\u5408\u5904\u7406\u52a8\u6001\u7c7b\u578b\u3001\u4f5c\u7528\u57df\u7b49\u4e8b\u60c5(\u5c3d\u7ba1\u60a8\u53ef\u4ee5\u6784\u5efa\u5177\u6709\u76f8\u540c\u529f\u80fd\u7684\u7f16\u8bd1\u5668)\u3002\nJIT\u7f16\u8bd1\u5668\u4e0d\u4f1a\u63d0\u524d\u7f16\u8bd1\u4ee3\u7801(AOT)\uff0c\u4f46\u4ecd\u4f1a\u5c06\u6e90\u4ee3\u7801\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\uff0c\u56e0\u6b64\u4e0d\u662f\u89e3\u91ca\u5668\u3002\u5f53\u60a8\u7684\u7a0b\u5e8f\u6b63\u5728\u6267\u884c\u65f6\uff0cJIT\u5728\u8fd0\u884c\u65f6\u7f16\u8bd1\u4ee3\u7801\u3002\u8fd9\u4e3aJIT\u63d0\u4f9b\u4e86\u52a8\u6001\u8bed\u8a00\u529f\u80fd\u7684\u7075\u6d3b\u6027\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u4f18\u5316\u673a\u5668\u4ee3\u7801\u8f93\u51fa\u7684\u901f\u5ea6\u3002JIT\u7f16\u8bd1C\u4f1a\u4f7f\u5b83\u53d8\u6162\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u662f\u5c06\u7f16\u8bd1\u65f6\u95f4\u52a0\u5230\u6267\u884c\u65f6\u95f4\u4e0a\u3002JIT\u7f16\u8bd1Python\u4f1a\u66f4\u5feb\uff0c\u56e0\u4e3a\u7f16\u8bd1+\u6267\u884c\u673a\u5668\u7801\u901a\u5e38\u6bd4\u89e3\u91ca\u66f4\u5feb\uff0c\u7279\u522b\u662f\u56e0\u4e3aJIT\u4e0d\u9700\u8981\u5199\u5165\u6587\u4ef6(\u78c1\u76d8\u5199\u5165\u5f88\u6602\u8d35\uff0c\u5185\u5b58/RAM/\u5bc4\u5b58\u5668\u5199\u5165\u5f88\u5feb)\u3002JIT\u8fd8\u901a\u8fc7\u80fd\u591f\u4f18\u5316\u4ec5\u5728\u8fd0\u884c\u65f6\u53ef\u7528\u7684\u4fe1\u606f\u6765\u63d0\u9ad8\u901f\u5ea6\u3002\n\u7f16\u8bd1\u8bed\u8a00\u4e4b\u95f4\u7684\u4e00\u4e2a\u5171\u540c\u4e3b\u9898\u662f\u5b83\u4eec\u90fd\u662f\u9759\u6001\u952e\u5165\u7684\u3002\u8fd9\u610f\u5473\u7740\u5f53\u7a0b\u5e8f\u5458\u521b\u5efa\u6216\u4f7f\u7528\u4e00\u4e2a\u503c\u65f6\uff0c\u4ed6\u4eec\u4f1a\u544a\u8bc9\u8ba1\u7b97\u673a\u5b83\u662f\u4ec0\u4e48\u7c7b\u578b\uff0c\u5e76\u4e14\u8be5\u4fe1\u606f\u5728\u7f16\u8bd1\u65f6\u662f\u6709\u4fdd\u8bc1\u7684\u3002\n\u8fd9\u91cc\u6709\u4e00\u4e2ajulia\u51fd\u6570\u7684\u4f8b\u5b50\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u4e58\u4ee5\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5411\u91cf\u3001\u5b57\u7b26\u4e32\u7b49(julia\u5141\u8bb8\u64cd\u4f5c\u7b26\u91cd\u8f7d)\u3002\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u7f16\u8bd1\u51fa\u6240\u6709\u8fd9\u4e9b\u60c5\u51b5\u7684\u673a\u5668\u4ee3\u7801\u90fd\u4e0d\u662f\u5f88\u6709\u6548\u7387\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8ba9Julia\u6210\u4e3a\u4e00\u79cd\u7f16\u8bd1\u8bed\u8a00\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5fc5\u987b\u505a\u7684\u3002\u60ef\u7528\u7f16\u7a0b\u610f\u5473\u7740\u51fd\u6570\u53ef\u80fd\u53ea\u4f1a\u88ab\u51e0\u79cd\u7c7b\u578b\u7684\u7ec4\u5408\u4f7f\u7528\uff0c\u6211\u4eec\u4e0d\u60f3\u7f16\u8bd1\u6211\u4eec\u8fd8\u6ca1\u6709\u7528\u5230\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u90a3\u4e0d\u662f\u5f88\u7d27\u5f20(\u8fd9\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u672f\u8bed)\u3002\n\u5982\u679c\u6211\u8981\u7f16\u5199Multiply(1\uff0c2)\uff0c\u90a3\u4e48Julia\u5c06\u7f16\u8bd1\u4e00\u4e2a\u6574\u6570\u76f8\u4e58\u7684\u51fd\u6570\u3002\u5982\u679c\u6211\u968f\u540e\u7f16\u5199\u4e86Multiply(2\uff0c3)\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528\u5df2\u7ecf\u7f16\u8bd1\u7684\u4ee3\u7801\u3002\u5982\u679c\u6211\u968f\u540e\u6dfb\u52a0\u4e86Multiply(1.4\uff0c4)\uff0c\u5219\u5c06\u7f16\u8bd1\u8be5\u51fd\u6570\u7684\u53e6\u4e00\u4e2a\u7248\u672c\u3002\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u7f16\u8bd1\u5bf9@code_llvm multiply(1\uff0c1)\u505a\u4e86\u4ec0\u4e48\uff0c\u5b83\u751f\u6210LLVM\u4f4d\u7801(\u4e0d\u5b8c\u5168\u662f\u673a\u5668\u7801\uff0c\u800c\u662f\u4e00\u4e2a\u8f83\u4f4e\u7ea7\u522b\u7684\u4e2d\u95f4\u8868\u793a)\u3002\n\u5b9a\u4e49i64@julia_multiply_17232(i64\uff0ci64){TOP\uff1a\uff1b\u250c@INT\u3002JL\uff1a54\u5728`*&#39\uff1b%2=mul i64%1\uff0c%0\uff1b\u2514\u8fd4\u56dei64%2}\u3002\n\u4f7f\u7528Multiply(1.4\uff0c4)\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u5373\u4f7f\u518d\u7f16\u8bd1\u4e00\u4e2a\u51fd\u6570\u4e5f\u4f1a\u53d8\u5f97\u591a\u4e48\u590d\u6742\u3002\u5728AOT\u7f16\u8bd1\u7684Julia\u4e2d\uff0c\u6240\u6709\u8fd9\u4e9b\u7ec4\u5408(\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u4f18\u5316\u4ee5\u51cf\u5c11)\u90fd\u5fc5\u987b\u5b58\u5728\u4e8e\u7f16\u8bd1\u7684\u4ee3\u7801\u4e2d\uff0c\u5373\u4f7f\u53ea\u4f7f\u7528\u4e86\u4e00\u4e2a\uff0c\u4ee5\u53ca\u8981\u59d4\u6258\u7684\u63a7\u5236\u6d41\u3002\n\u5b9a\u4e49DOUBLE@julia_multiply_17042(DOUBLE\uff0ci64){TOP\uff1a\uff1b\u250c@Promotion\u3002JL\uff1a312`*&#39\uff1b\uff1b\u2502\u250c@\u4fc3\u9500\u3002JL\uff1a\u5728`Promote&#39\uff1b\uff1b\u2502\u2502\u250c@Promotion\u5185\u3002jl\uff1a259\u5728`_Promote&#39\uff1b\uff1b\u2502\u250c@Number\u5185\u3002JL\uff1a7\u5728`Convert&#39\uff1b\uff1b\u2502\u250c@Float\u5185\u3002JL\uff1a60\u5728`Float64&#39\uff1b%2=sitofp i64%1\u5230Double\uff1b\u2502\u2514\uff1b\u2502@\u4fc3\u9500\u3002JL\uff1a312\uff0c`*&#39\uff1b@Float\u5185\u3002JL\uff1a405%3=fmul Double%2\uff0c%0\uff1b\u2514ret Double%3}\u3002\n\u201c\u5047\u5b9a\u4e00\u4e2a\u7c7b\u578b\u5e76\u57fa\u4e8e\u8be5\u7c7b\u578b\u8fdb\u884c\u7f16\u8bd1/\u884c\u4e3a\u201d\u7684\u4e00\u822c\u7b56\u7565\u79f0\u4e3a\u7c7b\u578b\u63a8\u7406\uff0cJulia\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u6e29\u548c\u5730\u4f7f\u7528\u4e86\u5b83\u3002\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u7684\u7f16\u8bd1\u5668\u4f18\u5316\uff0c\u5c3d\u7ba1\u5b83\u4eec\u90fd\u4e0d\u662f\u975e\u5e38\u7279\u5b9a\u4e8eJIT\u7684\uff0c\u56e0\u4e3aJulia\u53ef\u4ee5\u66f4\u597d\u5730\u63cf\u8ff0\u4e3a\u4e00\u4e2a\u61d2\u60f0\u7684AOT\u7f16\u8bd1\u5668\u3002\n\u8fd9\u79cd\u8df3\u8f6c\u7684\u7b80\u5355\u6027\u4f7f\u5f97Julia\u4e5f\u53ef\u4ee5\u8f7b\u677e\u5730\u63d0\u4f9bAOT\u7f16\u8bd1\u3002\u5b83\u8fd8\u5e2e\u52a9Julia\u5f88\u597d\u5730\u8fdb\u884c\u4e86\u57fa\u51c6\u6d4b\u8bd5\uff0c\u7edd\u5bf9\u6bd4Python\u7b49\u8bed\u8a00\u9ad8\u51fa\u4e00\u5c42\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e0eC\u8bed\u8a00\u76f8\u5ab2\u7f8e(\u6211\u5f15\u7528\u4e86\u4e00\u4e9b\u6570\u5b57\uff0c\u4f46\u8fd9\u4e9b\u6570\u5b57\u603b\u662f\u6709\u7ec6\u5fae\u5dee\u522b\uff0c\u6211\u4e0d\u60f3\u6df1\u5165\u8ba8\u8bba\u8fd9\u4e00\u70b9)\u3002\n\u6731\u8389\u5a05\u5b9e\u9645\u4e0a\u662f\u6211\u5c06\u8981\u8ba8\u8bba\u7684\u6700\u7d27\u5f20\u7684JIT\uff0c\u4f46\u4e0d\u662f\u6700\u6709\u8da3\u7684JIT\u3002\u5b83\u5b9e\u9645\u4e0a\u6b63\u597d\u5728\u9700\u8981\u4f7f\u7528\u4ee3\u7801\u4e4b\u524d\u7f16\u8bd1\u4ee3\u7801--\u975e\u5e38\u53ca\u65f6\u3002\u7136\u800c\uff0c\u5927\u591a\u6570JIT(PyPy\u3001Java\u3001JS\u5f15\u64ce)\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u5373\u65f6\u7f16\u8bd1\u4ee3\u7801\uff0c\u800c\u662f\u5728\u6700\u4f73\u65f6\u95f4\u7f16\u8bd1\u6700\u4f73\u4ee3\u7801\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6bb5\u65f6\u95f4\u5b9e\u9645\u4e0a\u662f\u6c38\u8fdc\u4e0d\u4f1a\u6709\u7684\u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u4f1a\u591a\u6b21\u8fdb\u884c\u3002\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u76f4\u5230\u6e90\u4ee3\u7801\u88ab\u591a\u6b21\u6267\u884c\u4e4b\u540e\u624d\u4f1a\u53d1\u751f\uff0cJIT\u5c06\u505c\u7559\u5728\u89e3\u91ca\u5668\u4e2d\uff0c\u56e0\u4e3a\u7f16\u8bd1\u7684\u5f00\u9500\u592a\u9ad8\u800c\u6ca1\u6709\u4ef7\u503c\u3002\n\u53d1\u6325\u4f5c\u7528\u7684\u53e6\u4e00\u4e2a\u65b9\u9762\u662f\u751f\u6210\u6700\u4f73\u4ee3\u7801\u3002\u6c47\u7f16\u6307\u4ee4\u7684\u751f\u6210\u5e76\u4e0d\u5e73\u7b49\uff0c\u7f16\u8bd1\u5668\u5c06\u6295\u5165\u5927\u91cf\u7cbe\u529b\u6765\u751f\u6210\u4f18\u5316\u826f\u597d\u7684\u673a\u5668\u7801\u3002\u901a\u5e38\uff0c\u4eba\u7c7b\u7f16\u5199\u6bd4\u7f16\u8bd1\u5668\u66f4\u597d\u7684\u6c47\u7f16\u8bed\u8a00\u662f\u53ef\u80fd\u7684(\u5c3d\u7ba1\u8fd9\u9700\u8981\u76f8\u5f53\u806a\u660e\u548c\u77e5\u8bc6\u6e0a\u535a\u7684\u4eba\u7c7b)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4e0d\u80fd\u52a8\u6001\u5206\u6790\u60a8\u7684\u4ee3\u7801\u3002\u6211\u7684\u610f\u601d\u662f\u77e5\u9053\u6574\u6570\u7684\u53ef\u80fd\u8303\u56f4\u6216\u6620\u5c04\u4e2d\u7684\u952e\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u90fd\u662f\u8ba1\u7b97\u673a\u53ea\u6709\u5728(\u90e8\u5206)\u6267\u884c\u7a0b\u5e8f\u540e\u624d\u80fd\u77e5\u9053\u7684\u3002JIT\u7f16\u8bd1\u5668\u5b9e\u9645\u4e0a\u53ef\u4ee5\u505a\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u56e0\u4e3a\u5b83\u9996\u5148\u89e3\u91ca\u60a8\u7684\u4ee3\u7801\u5e76\u4ece\u6267\u884c\u4e2d\u6536\u96c6\u6570\u636e\u3002\u56e0\u6b64\uff0cJIT\u7684\u4ee3\u4ef7\u5f88\u9ad8\uff0c\u56e0\u4e3a\u5b83\u4eec\u8fdb\u884c\u89e3\u91ca\uff0c\u5e76\u589e\u52a0\u4e86\u6267\u884c\u65f6\u95f4\u7684\u7f16\u8bd1\u65f6\u95f4\uff0c\u4f46\u5b83\u4eec\u662f\u5728\u9ad8\u5ea6\u4f18\u5316\u7684\u7f16\u8bd1\u4ee3\u7801\u4e2d\u7ec4\u6210\u7684\u3002\u56e0\u6b64\uff0c\u7f16\u8bd1\u7684\u65f6\u95f4\u4e5f\u53d6\u51b3\u4e8eJIT\u662f\u5426\u6536\u96c6\u4e86\u8db3\u591f\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u3002\n\u5173\u4e8eJIT\u6700\u9177\u7684\u90e8\u5206\u662f\uff0c\u5f53\u6211\u8bf4C\u7684JIT\u5b9e\u73b0\u4e0d\u53ef\u80fd\u6bd4\u73b0\u6709\u7684\u7f16\u8bd1\u5b9e\u73b0\u66f4\u5feb\u65f6\uff0c\u6211\u591a\u5c11\u662f\u5728\u6492\u8c0e\u3002\u5c1d\u8bd5\u4e00\u4e0b\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u4f46\u662f\u4ee5\u6211\u521a\u624d\u63cf\u8ff0\u7684\u65b9\u5f0f\u8fdb\u884cJIT\u7f16\u8bd1C\u5e76\u4e0d\u662f\u7f16\u8bd1\u8bed\u8a00\u7684\u4e25\u683c\u8d85\u96c6\uff0c\u56e0\u6b64\u5728\u903b\u8f91\u4e0a\u4e0d\u53ef\u80fd\u4ee5\u8db3\u591f\u5feb\u7684\u901f\u5ea6\u7f16\u8bd1\u4ee3\u7801\u6765\u5f25\u8865\u7f16\u8bd1+\u914d\u7f6e\u6587\u4ef6+\u89e3\u91ca\u65f6\u95f4\u3002\u5982\u679c\u6211\u50cfJulia\u90a3\u6837\u7f16\u8bd1C(\u9759\u6001\u7f16\u8bd1\u6bcf\u4e2a\u51fd\u6570\uff0c\u5c31\u50cf\u5b83\u88ab\u8c03\u7528\u7684\u90a3\u6837)\uff0c\u90a3\u4e48\u5c31\u4e0d\u53ef\u80fd\u4f7f\u5b83\u6bd4\u7f16\u8bd1-C\u66f4\u5feb\uff0c\u56e0\u4e3a\u7f16\u8bd1\u65f6\u95f4\u662f\u975e\u8d1f\u7684\uff0c\u5e76\u4e14\u751f\u6210\u7684\u673a\u5668\u7801\u672c\u8d28\u4e0a\u662f\u76f8\u540c\u7684\u3002\n\u867d\u7136\u4f7f\u7528C\u8bed\u8a00\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u5256\u9762\u5f15\u5bfc\u4f18\u5316(PGO\uff0c\u975e\u5e38\u53ef\u7231\u5730\u53d1\u97f3\u4e3a\u201cpogo\u201d)\u627e\u5230\u4e00\u4e2a\u6298\u4e2d\u65b9\u6848\u3002\u4e0d\u662f\u5728\u6267\u884c\u65f6\u8fdb\u884c\u6027\u80fd\u5206\u6790\uff0c\u800c\u662f\u4f7f\u7528PGO\u6027\u80fd\u5206\u6790\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff0c\u7136\u540e\u4f7f\u7528\u4f20\u5165\u7684\u6027\u80fd\u5206\u6790\u6570\u636e\u91cd\u65b0\u7f16\u8bd1\u539f\u59cb\u7a0b\u5e8f\u3002\u8fd9\u5728\u51cf\u5c11\u7f16\u8bd1\u4ee3\u7801\u5927\u5c0f\u548c\u6539\u8fdb\u5206\u652f\u9884\u6d4b\u65b9\u9762\u975e\u5e38\u6709\u6548\u3002\nJIT\u6709\u70ed\u8eab\u7684\u6982\u5ff5\u3002\u56e0\u4e3a\u89e3\u91ca\u548c\u5206\u6790\u65f6\u95f4\u5f88\u6602\u8d35\uff0cJIT\u5c06\u4ece\u7f13\u6162\u6267\u884c\u7a0b\u5e8f\u5f00\u59cb\uff0c\u7136\u540e\u671d\u7740\u6027\u80fd\u6700\u9ad8\u7684\u65b9\u5411\u52aa\u529b\u3002\u5bf9\u4e8e\u50cfPyPy\u8fd9\u6837\u5177\u6709\u89e3\u91ca\u578b\u526f\u672c\u7684JIT\uff0c\u7531\u4e8e\u6027\u80fd\u5206\u6790\u7684\u5f00\u9500\uff0c\u6ca1\u6709\u9884\u70ed\u7684JIT\u5728\u5f00\u59cb\u6267\u884c\u65f6\u7684\u6027\u80fd\u8981\u5dee\u5f97\u591a\u3002\u8fd9\u4e5f\u662fJIT\u5c06\u6d88\u8017\u66f4\u591a\u5185\u5b58\u7684\u539f\u56e0\u3002\n\u70ed\u8eab\u589e\u52a0\u4e86\u6d4b\u91cfJIT\u6548\u7387\u7684\u590d\u6742\u6027\uff01\u5982\u679c\u60a8\u6b63\u5728\u6d4b\u91cf\u751f\u6210mandelbrot\u96c6\u7684\u6027\u80fd\uff0c\u8fd9\u662f\u5f88\u597d\u7684\uff0c\u4f46\u662f\u5982\u679c\u60a8\u6b63\u5728\u4e3aWeb\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u670d\u52a1\uff0c\u5e76\u4e14\u524dN\u4e2a\u8bf7\u6c42\u975e\u5e38\u6162\uff0c\u5219\u4f1a\u5f88\u75db\u82e6\u3002\u7531\u4e8e\u6027\u80fd\u5e76\u6ca1\u6709\u4e25\u683c\u63d0\u9ad8\uff0c\u60c5\u51b5\u53d8\u5f97\u590d\u6742\u8d77\u6765\u3002\u5982\u679cPyPy\u5728JIT\u7f16\u8bd1\u67d0\u4e9b\u51fd\u6570\u4e4b\u540e\u51b3\u5b9a\u9700\u8981\u4e00\u6b21\u7f16\u8bd1\u5f88\u591a\u4e1c\u897f\uff0c\u90a3\u4e48\u4e2d\u95f4\u53ef\u80fd\u4f1a\u53d8\u6162\u3002\u8fd9\u8fd8\u4f1a\u4f7f\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u66f4\u52a0\u6a21\u7cca\uff0c\u56e0\u4e3a\u60a8\u5fc5\u987b\u68c0\u67e5\u662f\u5426\u7ed9\u4e86jit\u8bed\u8a00\u9884\u70ed\u65f6\u95f4\uff0c\u4f46\u60a8\u8fd8\u60f3\u77e5\u9053\u9884\u70ed\u65f6\u95f4\u662f\u5426\u8fc7\u957f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4f18\u5316\u7f16\u8bd1\u4ee3\u7801\u548c\u9884\u70ed\u901f\u5ea6\u672c\u8d28\u4e0a\u662f\u96f6\u548c\u6e38\u620f(\u6216\u8005\u81f3\u5c11\u662f\u5c0f\u548c\u6e38\u620f)\u3002\u5982\u679c\u60a8\u8bd5\u56fe\u66f4\u5feb\u5730\u7f16\u8bd1\u4ee3\u7801\uff0c\u53ef\u7528\u7684\u6570\u636e\u4f1a\u66f4\u5c11\uff0c\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u6548\u7387\u4f1a\u964d\u4f4e\uff0c\u5cf0\u503c\u6027\u80fd\u4e5f\u4f1a\u964d\u4f4e\u3002\u5f53\u7136\uff0c\u8ffd\u6c42\u66f4\u9ad8\u7684\u5cf0\u503c\u6027\u80fd\u901a\u5e38\u610f\u5473\u7740\u66f4\u9ad8\u7684\u6027\u80fd\u5206\u6790\u6210\u672c\u3002\nJava\u548cJavascript\u5f15\u64ce\u90fd\u662fJIT\u7684\u4f8b\u5b50\uff0c\u5b83\u4eec\u975e\u5e38\u6ce8\u91cd\u9884\u70ed\u65f6\u95f4\uff0c\u4f46\u662f\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u4e3a\u5b66\u672f\u7528\u9014\u6784\u5efa\u7684\u8bed\u8a00\u6709\u60ca\u4eba\u7684\u9884\u70ed\u65f6\u95f4\uff0c\u800c\u504f\u5411\u4e8e\u65f6\u9ae6\u7684\u5cf0\u503c\u6027\u80fd\u3002\n\u4ecb\u7ecdGraalVM\u3001HotSpot\u548c\u66f4\u6df1\u5165\u7684Javascript\u5f15\u64ce\u3002\u7ecf\u8fc7\u5206\u5c42\u3001\u8282\u70b9\u6d77\u3001\u53d6\u6d88\u4f18\u5316\u548c\u5185\u8054\u3002", "note_en": "If you are familiar with how JITs generally work (if you get what the title is referring to), I recommend skimming this or going straight to reading  How JIT Compilers are Implemented and Fast: Julia, Pypy, LuaJIT, Graal and More\n My mentor,  Chris, who took me from \u201cwhat is a JIT\u201d to where I am now once told me that compilers were just bytes in bytes out and not at all low-level and scary. This is actually fairly true, and it&#39;s fun to learn about compiler internals and often useful for programmers everywhere!\n This blog post gives background on how programming languages are implemented and how JITs work. It&#39;ll introduce the implementation details of the Julia language, though it won&#39;t talk about specific implementation details or optimizations made by more traditional JITs. Check out  How JIT Compilers are Implemented and Fast: Julia, Pypy, LuaJIT, Graal and More to read about how meta-tracing is implemented, how Graal supports C extensions, the relationship of JITs with LLVM and more!\n  When we run a program, it\u2019s either interpreted or compiled in some way. The compiler/interpreter is sometimes referred to as the &#34;implementation&#34; of a language, and one language can have many implementations. You may have heard things like &#34;Python is interpreted&#34;, but that really means the reference(standard/default) implementation of Python is an interpreter. Python is a language specification and  CPython is the interpreter and implementation of Python.\n An interpreter is a program that directly executes your code. Well-known interpreters are usually written in C. Ruby, Python and PHP are written in C. Below is a function that loosely models how an interpreter might work:\n func  interpret ( code  string ) {  if  code  ==  &#34;print(&#39;Hello, World!&#39;)&#34;  {  print ( &#34;Hello, World&#34; ); }  else if  code  ==  \u201c x  =  0 ;  x  +=  4 ;  print ( x )\u201d { variable_x  :=  0  variable_x  +=  4  print ( x ) }}\n A compiler is a program that translates code from some language to another language, though it usually refers to a destination language that is a machine code. Examples of compiled languages are C, Go and Rust.\n  The difference between a compiled and interpreted language is actually much more nuanced. C, Go and Rust are clearly compiled, as they output a machine code file - which can be understood natively by the computer. The compile and run steps are fully distinct.\n However, compilers can translate to any target language (this is sometimes called transpiling). Java for example, has a two-step implementation. The first is compiling Java source to bytecode, which is an Intermediate Representation (IR). The bytecode is then JIT compiled - which involves interpretation.\n Python and Ruby also execute in two steps. Despite being known as interpreted languages, their reference implementations actually compile the source down to a bytecode. You may have seen .pyc files (not anymore in Python3) which contain Python bytecode! The bytecode is then interpreted by a virtual machine. These interpreters use bytecode because programmers tend to care less about compile time, and creating a bytecode language allows the engineers to specify a bytecode that is as efficient to interpret as possible.\n Having bytecode is how languages check syntax before execution (though they could technically just do a pass before starting the interpreter). An example below shows why you would want to check syntax before runtime.\n  Another important note is that interpreted languages are typically slower for various reasons, the most obvious being that they&#39;re executed in a higher level language that has overhead execution time. The main reason is that the dynamic-ness of the languages they tend to implement means that they need many extra instructions to decide what to do next and how to route data. People still choose to build interpreters over compilers because they&#39;re easier to build and are more suited to handle things like dynamic typing, scopes etc (though you could build a compiler that has the same features).\n  A JIT compiler doesn&#39;t compile code Ahead-Of-Time (AOT), but still compiles source code to machine code and therefore is not an interpreter. JITs compile code at runtime, while your program is executing. This gives the JITs flexibility for dynamic language features, while maintaining speed from optimized machine code output. JIT-compiling C would make it slower as we&#39;d just be adding the compilation time to the execution time. JIT-compiling Python would be fast, as compilation + executing machine code can often be faster than interpreting, especially since the JIT has no need to write to a file (disk writing is expensive, memory/RAM/register writing is fast). JITs also improve in speed by being able to optimize on information that is only available at runtime.\n  A common theme between compiled languages is that they&#39;re statically typed. That means when the programmer creates or uses a value, they\u2019re telling the computer what type it is and that information is guaranteed at compile time.\n   Here is an example of a Julia function, which could be used to multiply integers, floats, vectors, strings etc (Julia allows operator overloading). Compiling out the machine code for  all these cases is not very productive for a variety of reasons, which is what we&#39;d have to do if we wanted Julia to be a compiled language. Idiomatic programming means that the function will probably only be used by a few combinations of types and we don&#39;t want to compile something that we don&#39;t use yet since that&#39;s not very jitty (this is not a real term).\n If I were to code  multiply(1, 2), then Julia will compile a function that multiplies integers. If I then wrote  multiply(2, 3), then the already-compiled code will be used. If I then added  multiply(1.4, 4), another version of the function will be compiled. We can observe what the compilation does with  @code_llvm multiply(1, 1), which generates LLVM Bitcode (not quite machine code, but a lower-level Intermediate Representation).\n define i64 @julia_multiply_17232(i64, i64) {top : ; \u250c @ int . jl : 54  within `*&#39;  % 2  =  mul i64  % 1 ,  % 0 ; \u2514 ret i64  % 2 }\n And with  multiply(1.4, 4), you can see how complicated it can get to compile even one more function. In AOT compiled Julia, all (some optimizations can be made to reduce) of these combinations would have to live in the compiled code even if only one was used, along with the control flow to delegate.\n define double @julia_multiply_17042(double, i64) {top : ; \u250c @ promotion . jl : 312  within `*&#39;; \u2502\u250c @ promotion . jl : 282  within `promote&#39;; \u2502\u2502\u250c @ promotion . jl : 259  within `_promote&#39;; \u2502\u2502\u2502\u250c @ number . jl : 7  within `convert&#39;; \u2502\u2502\u2502\u2502\u250c @ float . jl : 60  within ` Float64 &#39;  % 2  =  sitofp i64  % 1  to double; \u2502\u2514\u2514\u2514\u2514; \u2502 @ promotion . jl : 312  within `*&#39; @ float . jl : 405  % 3  =  fmul double  % 2 ,  % 0 ; \u2514 ret double  % 3 }\n The general strategy of \u201cassume a type and compile/behave based on that\u201d is called type inferencing, which Julia mildly uses in the examples above. There are a lot of other compiler optimizations that are made, though none of them are very specific to JITs as Julia may be better described as a lazy AOT compiler.\n The simplicity of this kind of jitting makes it easy for Julia to also supply AOT compilation. It also helps Julia to benchmark very well, definitely a tier above languages like Python and comparable to C (I&#39;d cite numbers, but those are always nuanced and I don&#39;t want to get into that).\n  Julia is actually the jittiest JIT I&#39;ll discuss, but not the most interesting as a &#34;JIT&#34;. It actually compiles code right before the code needs to be used -- just in time. Most JITs however (Pypy, Java, JS Engines), are not actually about compiling code just-in-time, but compiling  optimal code at an optimal time. In some cases that time is actually never. In other cases, compilation occurs more than once. In a vast majority of the cases compilation doesn&#39;t occur until after the source code has been executed numerous times, and the JIT will stay in an interpreter as the overhead to compilation is too high to be valuable.\n  The other aspect at play is generating  optimal code. Assembly instructions are not created equal, and compilers will put a lot of effort into generating well-optimized machine code. Usually, it is possible for a human to write better assembly than a compiler (though it would take a fairly smart and knowledgeable human), because the compiler cannot dynamically analyze your code. By that, I mean things like knowing the possible range of your integers or what keys are in your map, as these are things that a computer could only know after (partially) executing your program. A JIT compiler can actually do those things because it interprets your code first and gathers data from the execution. Thus, JITs are expensive in that they interpret, and add compilation time to execution time, but they make it up in highly optimised compiled code. With that, the timing of compilation is also dependent on whether the JIT has gathered enough valuable information.\n The cool part about JITs is that I was sort of lying when I said a JIT implementation of C could not be faster than existing compiled implementations. It would not be feasible to try, but jit-compiling C in the way I just described is not a strict superset of compiling a language and thus it is not logically impossible to compile code fast enough to make up for the compile+profile+interpreting time. If I &#34;JIT compiled&#34; C similarly to how Julia does it (statically compile each function as it&#39;s called), it would be impossible to make it faster than compiled-C as the compile-time is non-negative and the generated machine code is essentially the same.\n Though jitting C is not feasible, one can find a middle ground through Profile Guided Optimization (PGO, cutely [and uncommonly] pronounced \u201cpogo\u201d). Instead of profiling while executing, you compile a program with PGO profiling, run that program and then recompile the original program with profiled data passed in. This is effective at reducing compiled-code size and improving branch prediction.\n  JITs have a concept of warming up. Because intepretation and profiling time is expensive, JITs will start by executing a program slowly and then work towards &#34;peak performance&#34;. For JITs with interpreted counterparts like Pypy, the JIT without warmup performs much worse at the beginning of execution due to the overhead of profiling. It&#39;s also the reason that JITs will consume signifcantly more memory.\n  Warmup adds complexity to measuring efficiency of a JIT! It&#39;s fine if you&#39;re measuring the performance of generating the mandelbrot set, but becomes painful if you&#39;re serving a web application and the first N requests are painfully slow. It\u2019s complicated by the fact that the performance doesn\u2019t strictly increase. If Pypy decides it needs to compile many things all at once after JITs compiling som functions, then you might have a slow-down in the middle. It also makes benchmark results more ambiguous, as you have to check if the jitted languages were given time to warmup, but you\u2019d also want to know if it took an unseemly amount of time to warmup. Optimizing your compiled code  and warmup speed is unfortunately zero-sum(or at least small-sum) by nature. If you try to get your code to compile sooner, less data will be available, the compiled code will not be as efficient and peak performance will be lower. Aiming for higher peak performance of course, often means higher profiling costs.\n Java and Javascript engines are examples of JITs that have put really good care into warmup time, but you may find that languages built for academic uses have monstrous warmup times in favour of snazzy peak performances.\n  Introduces GraalVM, Hotspot and goes deeper into Javascript Engines. Goes through Tiering, Seas of Nodes, deoptimization and inlining.", "posttime": "2020-07-06 03:02:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u8bd1,jit,introduction", "title": "JIT\u7f16\u8bd1\u5668\u6df1\u5ea6\u4ecb\u7ecd\uff1aJIT\u4e0d\u662f\u5373\u65f6\u7684", "title_en": "A Deep Introduction to JIT Compilers: JITs Are Not Just-in-Time", "transed": 1, "url": "https://carolchen.me/blog/jits-intro/", "via": "", "real_tags": ["\u7f16\u8bd1", "jit"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1009972, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e0d\u65f6\u542c\u8bf4\u6211\u7684\u5e16\u5b50\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\u6709\u70b9\u592a\u6df1\u5965\u548c\u590d\u6742\u4e86\u3002\u6211\u5b8c\u5168\u540c\u610f\uff1a\u5c24\u5176\u662f\u5728\u6211\u5173\u4e8e\u5982\u4f55\u4ece\u5934\u5f00\u59cb\u6784\u5efa\u7ea6\u675f\u89e3\u7b97\u5668\u7684\u6700\u65b0\u7cfb\u5217\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u6c38\u65e0\u6b62\u5883\u7684\u7cfb\u5217\u3002\u6211\u786e\u5b9e\u559c\u6b22\u5199\u535a\u5ba2\uff0c\u800c\u4e14\u8fd8\u4f1a\u7ee7\u7eed\u5199\u4e0b\u53bb\uff0c\u4f46\u8fd9\u4e2a\u7cfb\u5217\u4e0d\u540c\u3002\n\u6731\u8389\u5a05\u662f\u4e00\u79cd\u76f8\u5bf9\u5e74\u8f7b\u7684\u8bed\u8a00\uff0c\u4f7f\u7528\u5b83\u7684\u4eba\u4e0d\u662f\u592a\u591a\u3002\u5b83\u5728\u79d1\u5b66\u8ba1\u7b97\u4e2d\u84ec\u52c3\u53d1\u5c55\uff0c\u4f46\u6211\u76f8\u4fe1\u5b83\u53ef\u4ee5\u7528\u4e8e\u901a\u7528\u8ba1\u7b97(\u53ef\u80fd\u5728\u542f\u52a8\u65f6\u95f4\u4e0d\u592a\u76f8\u5173\u7684\u5730\u65b9)\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u786e\u5b9e\u4f7f\u7528\u5b83\u4e0eFranklin\u4e00\u8d77\u521b\u5efa\u4e86\u8fd9\u4e2a\u535a\u5ba2\uff0c\u6211\u5728\u8fd9\u91cc\u4e5f\u5199\u4e86\u4e00\u4e9b\u5173\u4e8e\u5b83\u7684\u5185\u5bb9\u3002\n\u672c\u7cfb\u5217\u8bd5\u56fe\u5411\u521d\u5b66\u8005\u89e3\u91caJulia\u7684\u4e00\u4e9b\u6838\u5fc3\u6982\u5ff5\uff0c\u4e5f\u8bb8\u8fd8\u6709\u4e00\u4e9b\u5305\u3002\u6211\uff0c\u8fd9\u91cc\u89e3\u91ca\u8fd9\u4e9b\u4e1c\u897f\u7684\u4eba\uff0c\u7edd\u5bf9\u4e0d\u662f\u8fd9\u4e9b\u65b9\u9762\u7684\u4e13\u5bb6\u3002\u5982\u679c\u4f60\u8bfb\u8fc7\u8fd9\u4e2a\u535a\u5ba2\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u77e5\u9053\uff0c\u5728\u6211\u5b66\u4f1a\u4e86\u8ba9\u4ed6\u4eec\u6bd4\u90a3\u4e9b\u4e00\u8f88\u5b50\u90fd\u5728\u505a\u8fd9\u4ef6\u4e8b\u5e76\u4e14\u662f\u8fd9\u65b9\u9762\u7684\u4e13\u5bb6\u7684\u4eba\u66f4\u597d\u5730\u6c9f\u901a\u4e4b\u540e\uff0c\u6211\u6b63\u8bd5\u7740\u76f4\u63a5\u89e3\u91ca\u4ed6\u4eec\u7684\u4e8b\u60c5\u3002\u4e13\u5bb6\u7684\u535a\u5ba2\u6709\u65f6\u5bf9\u6211\u6765\u8bf4\u5f88\u96be\u7406\u89e3\uff0c\u4e5f\u8bb8\u5bf9\u4f60\u6765\u8bf4\u4e5f\u662f\u5982\u6b64\u3002\u6211\u4f1a\u8ba9\u4ed6\u4eec\u6821\u5bf9\u6211\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u4ee5\u786e\u4fdd\u6211\u7684\u89e3\u91ca\u6ca1\u6709\u9519\uff1b)\u3002\n\u5728\u6bcf\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u6709\u4e00\u4e9b\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4ee3\u7801\u7684\u7ed3\u6784\u548c\u53ef\u91cd\u7528\u6027\u3002\u8fd9\u4e9b\u51fd\u6570\u6709\u4e00\u4e2a\u540d\u79f0\u548c\u4e00\u4e9b\u53c2\u6570\u3002\u5b83\u4eec\u7684\u5b9a\u4e49\u5982\u4e0b\u3002\n\u5728Python\u4e2d\uff0c\u53ef\u4ee5\u7528add(2\uff0c3)\u8c03\u7528\u5b83\uff0c\u5b83\u4f1a\u7ed9\u51fa\u9884\u671f\u76845\uff0c\u4f46\u4e5f\u4f1a\u7ed9\u51fa&#39\uff1b23&#34\uff1b\uff0c&#34\uff1b2&#34\uff1b\uff0c&#34\uff1b23&#34\uff1b\u8fd9\u53d6\u51b3\u4e8e\u60a8\u8be2\u95ee\u7684\u662f\u8c01\uff1ad\u3002\n\u8fd9\u4f1a\u5bfc\u81f4\u9519\u8befTypeError\uff1a\u53ea\u80fd\u5c06\u5b57\u7b26\u4e32(\u4e0d\u662f\u6574\u578b)\u8fde\u63a5\u5230\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e5f\u662f\u6709\u610f\u4e49\u7684\u3002\u55ef\uff0c\u6211\u60f3\u8bf4\u786e\u5b9e\u662f\u8fd9\u6837\uff0c\u4f46\u662fJavascript\u505a\u4e86\u4e00\u4e9b\u4e0d\u540c\u7684\u4e8b\u60c5\uff1a\n\u5f53\u7136\uff0c\u5728\u50cfC++\u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e00\u5207\u5e76\u4e0d\u90a3\u4e48\u7b80\u5355\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5f15\u5165\u7c7b\u578b\uff1a\n\u6bcf\u4e2a\u4eba\u90fd\u5f88\u6e05\u695a\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2aint\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2aint\u3002\u56e0\u4e3a\u5b83\u662f\u4e00\u79cd\u7f16\u8bd1\u8bed\u8a00\uff0c\u6240\u4ee5\u5f53\u5c1d\u8bd5\u4f7f\u7528add(&#34\uff1b2&#34\uff1b\uff0c3)\u8c03\u7528\u5b83\u65f6\uff0c\u6211\u4eec\u4f1a\u76f4\u63a5\u6536\u5230\u9519\u8bef\u3002\n\u73b0\u5728\u6709\u4ec0\u4e48\u610f\u4e49\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230\u4e0d\u540c\u7684\u6982\u5ff5\uff0c\u6bd4\u5982C++\u4e2d\u7684\u9759\u6001\u7c7b\u578b\u548cJS\u548cPython\u4e2d\u7684\u52a8\u6001\u7c7b\u578b\u3002\u4ed6\u4eec\u90fd\u6709\u5229\u6709\u5f0a\uff0c\u8fd9\u53ef\u80fd\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\u5176\u4e2d\u4e00\u4e2a\u66f4\u5bb9\u6613\u63a8\u7406\uff0c\u5176\u4ed6\u7684\u53ef\u80fd\u66f4\u5bb9\u6613\u8ba8\u4ef7\u8fd8\u4ef7\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u53d1\u73b0\u8be5\u51fd\u6570\u4e0d\u50cfadd(&#34\uff1b2&#34\uff1b\uff0c3)\u90a3\u6837\u5de5\u4f5c\uff0c\u7136\u540e\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u6216\u8005\u5b83\u4f1a\u89e3\u51b3\u95ee\u9898\u5e76\u8fd4\u56de\u7b54\u6848\u3002\nJS\u4e2d\u7684\u60c5\u51b5\u57fa\u672c\u76f8\u540c\u3002\u6709\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u6269\u5c55\u540d\uff0c\u6bd4\u5982TypeScript\uff0c\u4e8b\u60c5\u53ef\u80fd\u4f1a\u53d1\u751f\u4e0d\u540c\u7684\u60c5\u51b5\u3002\u6211\u6700\u8fd1\u6ca1\u6709\u7528\u8fd9\u4e9b\u8bed\u8a00\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u7f16\u7a0b\uff0c\u6240\u4ee5\u8bf7\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u3002\n\u5728C++\u4e2d\uff0c\u7531\u4e8e\u6bcf\u4e2a\u53d8\u91cf\u90fd\u6709\u4e00\u4e2a\u9759\u6001\u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u6709\u66f4\u591a\u7684\u4e8b\u60c5\u53d1\u751f\uff0c\u4eba\u4eec\u53ef\u4ee5\u76f4\u63a5\u68c0\u67e5\u8fd9\u662f\u5426\u5408\u9002\u3002\u8fd9\u610f\u5473\u7740\uff0c\u6b63\u5982\u6211\u4eec\u7a0d\u540e\u53ef\u4ee5\u770b\u5230\u7684\u90a3\u6837\uff0c\u53ef\u4ee5\u6709\u66f4\u591a\u540c\u540d\u7684\u51fd\u6570\u3002\u6211\u5c06\u5728\u8be5\u90e8\u5206\u89e3\u91ca\u51fd\u6570\u91cd\u8f7d\u548c\u591a\u6b21\u5206\u6d3e\u4e4b\u95f4\u7684\u533a\u522b\uff1b)\u3002\n\u5728\u6240\u6709\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6709\u8fd9\u6837\u7684\u7c7b\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u4e00\u4e2a\u7c7b\u5236\u9020\u5546\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49add(self\uff0cthing)\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528Manufacturer.add(Thing)\u8c03\u7528\u51fd\u6570\u3002\u8fd9\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u5355\u4e00\u7684\u8c03\u5ea6\u3002\u8c03\u5ea6\u57fa\u672c\u4e0a\u662f\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\u7684\u8fc7\u7a0b\u3002\u5728\u8fd9\u91cc\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5236\u9020\u5546\u7684\u7c7b\u578b\u3002\u662f\u5236\u9020\u5546\u8fd8\u662f\u76d2\u5b50\uff1f\u5bf9\u4e8eBox\uff0c\u6211\u4eec\u53ef\u80fd\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7bBox\uff0c\u5e76\u5728\u5176\u4e2d\u6dfb\u52a0(self\uff0cbox)\u3002\n\u5bf9\u4e8e\u5728Julia\u4e2d\u7f16\u5199\u4ee3\u7801\u65f6\u95f4\u66f4\u957f\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u542c\u8d77\u6765\u53ef\u80fd\u662f\u4e2a\u5947\u602a\u7684\u6982\u5ff5\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u5199\u5230\u8fd9\u4e2a\u95ee\u9898\u65f6\uff0c\u6211\u5728\u60f3\uff1a\u5982\u679c\u6211\u4e00\u76f4\u5728\u4f7f\u7528\u5176\u4e2d\u4e00\u79cd\u8bed\u8a00\u7684\u591a\u4e2a\u5206\u6d3e(\u5c31\u50cf\u5728ConstraintSolver\u4e2d)\uff0c\u6211\u8be5\u5982\u4f55\u505a\u4e00\u4e9b\u4e8b\u60c5\u5462\uff1f\n\u662f\u7684\uff0c\u5728Python\u4e2d\u6709@SingleDispatch\u8fd9\u6837\u7684\u5355\u4e00\u5206\u6d3e\u65b9\u5f0f\uff0c\u4f46\u8003\u8651\u5230\u6211\u5728\u641c\u7d22\u65f6\u53d1\u73b0\u7684\u4e3b\u8981\u5e16\u5b50\u90fd\u662f3-4\u5e74\u524d\u7684\uff0c\u6211\u6000\u7591\u662f\u5426\u6709\u5f88\u591a\u4eba\u5728\u4f7f\u7528\u5b83\uff1ad\u3002\n\u65e2\u7136\u8fd9\u6837\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u201c\u6731\u8389\u5a05\u201d\u4e2d\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\u53ea\u662f\u4e3a\u4e86\u5c55\u793a\u4e00\u4e0b\u5b9a\u4e49\u5355\u884c\u51fd\u6570\u7684\u4e00\u79cd\u7b80\u6d01\u7684\u5c0f\u65b9\u6cd5\u2026\u2026\u3002(\u6216\u8005\u5728Julia\u4e2d\u8fd9\u6837\u79f0\u547c\uff1a\u65b9\u6cd5)\u3002\n\u6709\u8da3\u7684\u662f\uff0c\u5f53\u60a8\u5728Julia REPL(read-eval-print\u5faa\u73af)\u4e2d\u952e\u5165\u4ee5\u4e0b\u5185\u5bb9\u65f6\uff0c\u60a8\u4f1a\u5f97\u5230\uff1a\n\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0ePython\u57fa\u672c\u76f8\u540c(\u76ee\u524d\u4ece\u7528\u6237\u89d2\u5ea6\u6765\u770b)\u3002\u4e0d\u8fc7\uff0c\u5b83\u5bf9\u5b57\u7b26\u4e32\u4e0d\u8d77\u4f5c\u7528\u3002\nJulia\u548c+\u8868\u793a\u5b57\u7b26\u4e32\uff1aJulia\u662f\u4e00\u79cd\u6570\u5b66\u8bed\u8a00\uff0c+\u662f\u53ef\u4ea4\u6362\u7684\uff0c\u800c\u8fde\u63a5\u5b57\u7b26\u4e32\u4e0d\u662f\u3002\u56e0\u6b64&#34\uff1b2&#34\uff1b+&#34\uff1b3&#34\uff1b\u4e0d\u662f&#34\uff1b3&#34\uff1b+&#34\uff1b2&#34\uff1b\u3002\u56e0\u6b64\uff0c\u6731\u8389\u5a05\u51b3\u5b9a\u7528*\u4ee3\u66ff\u3002\u4f8b\u5982\uff0c\u5b83\u5bf9\u4e8e\u6570\u5b57\u662f\u53ef\u4ea4\u6362\u7684\uff0c\u4f46\u5bf9\u4e8e\u77e9\u9635\u662f\u4e0d\u53ef\u4ea4\u6362\u7684\u3002\n\u597d\u7684\uff0c\u6211\u5728\u54ea\u91cc\u6253\u65ad\u6211\u81ea\u5df1\u4e86\uff1f.\u3002\u554a\uff0c\u662f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u5728REPL\u4e2d\u6709\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\u7684Add\u51fd\u6570\u3002\u770b\u8d77\u6765\u6211\u4eec\u53ef\u4ee5\u52a0\u4e00\u4e2a\u65b0\u7684\uff0c\u5bf9\u5417\uff1f\n\u6b63\u5982Reddit\u4e0a\u6b63\u786e\u6307\u51fa\u7684\u90a3\u6837\uff1a\u6211\u4e3b\u8981\u4f7f\u7528\u201c\u529f\u80fd\u201d\u8fd9\u4e2a\u8bcd\u3002\u5728Julia\u4e2d\uff0c\u51fd\u6570\u548c\u65b9\u6cd5\u5b9e\u9645\u4e0a\u662f\u4e0d\u540c\u7684\u3002\u6709\u4e00\u4e2a\u5177\u6709\u8bb8\u591a\u4e0d\u540c\u5b9e\u73b0\u7684+\u51fd\u6570\uff1a\u79f0\u4e3a\u65b9\u6cd5\u3002\n\u597d\u5427\uff0c\u8fd9\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u5b83\u4ecd\u7136\u5141\u8bb8\u6240\u6709\u7c7b\u578b\u7684\u8f93\u5165(\u5e76\u5728\u7a0d\u540e\u5f53\u5b83\u4e0d\u8d77\u4f5c\u7528\u65f6\u629b\u51fa\u4e00\u4e2a\u9519\u8bef)\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u65e0\u6cd5\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\u65b9\u6cd5\u3002\n\u518d\u6b21\u6267\u884c\u4e00\u4e2a\u5c0f\u6b65\u9aa4\uff1a\u8ba9&#39\uff1b\u68c0\u67e5\u8c03\u7528Add(&#34\uff1b2&#34\uff1b\uff0c&#34\uff1b3&#34\uff1b)Julia&&gt;\uff1bAdd(&#34\uff1ba&#34\uff1b\uff0c&#34\uff1bb&#34\uff1b)\u9519\u8bef\uff1aMethodError\uff1a\u6ca1\u6709\u5339\u914d*(\uff1a\uff1aInt64\uff0c\uff1a\uff1aString)\u7684\u65b9\u6cd5\u6700\u63a5\u8fd1\u7684\u5019\u9009\u9879\u662f\uff1a*(\uff1a\uff1aAny\uff0c\uff1aAny.)\u3002at operators.jl\uff1a529*(\uff1a\uff1aMissing\uff0c\uff1a\uff1aAbstractString)at missing.jl\uff1a174*(\uff1a\uff1at\uff0c\uff1a\uff1at)WHERE T&lt\uff1b\uff1aUnion{Int128\uff0cInt16\uff0cInt32\uff0cInt64\uff0cInt8\uff0cUInt128\uff0cUInt16\uff0cUInt32\uff0cUInt64\uff0cUInt8}at int.jl\uff1a54.Stacktrace\uff1a[1]Add(\uff1a\uff1aString\uff0c\uff1a\uff1aString)at int.jl\uff1a54.Stacktrace\uff1a[1]Add(\uff1a\uff1aString\uff0c\uff1a\uff1aString)at int.jl\uff1a54.Stacktrace\uff1a[1]Add(\uff1a\uff1aString\uff0c\uff1a\uff1aString)at int.jl\uff1a54.\n\u8be5\u9519\u8bef\u53d1\u751f\u5728\u8c03\u75282x\u65f6\uff0c\u5176\u4e2d\u5b83\u8ba4\u4e3a2\u662f\u6574\u6570\uff0c\u800cx=&#34\uff1b2&#34\uff1b\u662f\u5b57\u7b26\u4e32\u3002\u5b83\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u5b83\u53ef\u4ee5\u7e41\u6b96\u54ea\u79cd\u7c7b\u578b\u7684\u4fe1\u606f\u3002\n\u8ba9\u6211\u4eec\u5728int.jl\uff1a54\u5904\u9009\u62e9\u4e00\u4e2a\uff1a*(\uff1a\uff1at\uff0c\uff1a\uff1at)\u5176\u4e2dT&lt\uff1b\uff1aUnion{Int128\uff0cInt16\uff0cInt32\uff0cInt64\uff0cInt8\uff0cUInt128\uff0cUInt16\uff0cUInt32\uff0cUInt64\uff0cUInt8}\u3002\n\u8fd9\u544a\u8bc9\u6211\u4eec\uff0c\u5f53\u8fd9\u4e9b\u7c7b\u578b\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\u76f8\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u76f8\u4e58\u3002\u6240\u4ee5UInt8\u548cUInt8\uff0c\u4f46\u7a0d\u540e\u6211\u4f1a\u4ecb\u7ecd\u90a3\u4e2a\u8bed\u6cd5\u3002\n\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u8fd9\u4e9b*\u51fd\u6570\u65b9\u6cd5\u4e2d\u6709\u591a\u5c11\uff1a357\u662f\u60a8\u5728\u952e\u5165\u4ee5\u4e0b\u547d\u4ee4\u65f6\u5f97\u5230\u7684\u7b54\u6848\u3002\n\u8fd9\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u5f88\u957f\u7684\u5217\u8868\uff0c\u91cc\u9762\u6709\u5404\u79cd\u5947\u602a\u7684\u7c7b\u578b\uff0c\u6709\u65f6\u4f1a\u5206\u5e03\u5728\u51e0\u884c\u4e2d\u3002\u6211\u662f\u8bf4\u8fd9\u662f\u4ec0\u4e48\uff1f\uff1aD\u3002\n[345]*(A\uff1a\uff1aLinearAlgebra.LQ{TA\uff0cS}\u5176\u4e2dS&lt\uff1b\uff1aAbstractArray{TA\uff0c2}\uff0cB\uff1a\uff1aUnion{DenseArray{tb\uff0c1}\uff0cDenseArray{tb\uff0c2}\uff0cBase.Re\u89e3\u91catArray{TB\uff0c1\uff0cS\uff0cA}where S where A&lt\uff1b\uff1aUnion{SubArray{T\uff0cN\uff0cA\uff0cI\uff0ctrue}\u5176\u4e2di&lt\uff1b\uff1aUnion{Tuple{Vararg{Real\uff0c\u7528\u6cd5\uff1aDenseArray WHERE N WHERE T\uff0cDenseArray}\uff0cBase.Re\u89e3\u91catArray{TB\uff0c2\uff0cS\uff0cA}WHERE A&lt\uff1b\uff1aUNION{SubArray{T\uff0cN\uff0cA\uff0cI\uff0cTRUE}WHERE I&lt\uff1b\uff1aUNION{Tuple{Varg{Real\uff0cN}where N}\uff0cTuple{AbstractUnitRange\uff0cVarg{Any\uff0cN}where N}WHERE A&lt\uff1b\uff1aDenseArray WHERE N WHERE T\uff0cDenseArray\u3002\uff1aTuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}\uff0cN}WHERE N}WHERE A&lt\uff1b\uff1aUNION{Base.Re\u89e3\u91catArray{T\uff0cN\uff0cS\uff0cA}WHERE S WHERE A&lt\uff1b\uff1aUNION{\u5b50\u6570\u7ec4{T\uff0cN\uff0cA\uff0cI\uff0cTRUE}WHERE I&lt\uff1b\uff1aUNION{\u5143\u7ec4{\u53d8\u91cf{\u5b9e\u6570\uff0cN}WHERN}\uff0c\u5143\u7ec4{AbstractUnitRange\uff0cVarg{Any\uff0cN}WHERN}WHERE A&lt\uff1b\uff1aDenseArray WHERE N WHERE T\uff0cDenseseArray\u3002\u7528\u6cd5\uff1aUNION{tuple{vararg{Real\uff0cN}where N}\uff0ctuple{AbstractUnitRange\uff0cvararg{any\uff0cN}where N}where A&lt\uff1b\uff1aDenseArray where N where T\uff0cDenseArray}\uff0cBase.ReshapedArray{TB\uff0c2\uff0cA\uff0cMI}where Base.2\uff0cA\uff0cMI}where MI&lt\uff1b\uff1aTuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}\uff0cN}where A&lt\uff1b\uff1aUnion{Base.Re\u89e3\u91catArray{T\uff0cN\uff0cS\uff0cA}where S where A&lt\uff1b\uff1aUnion{\u3002\u7528\u6cd5\uff1aUNION{Tuple{Vararg{Real\uff0cN}where N}\uff0cTuple{AbstractUnitRange\uff0cVararg{Any\uff0cN}where N}where A&lt\uff1b\uff1aDenseArray where N where T\uff0cDenseArray}where N where T\uff0cSubArray{T\uff0cN\uff0cA\uff0cI\uff0ctrue}where I&lt\uff1b\uff1aUnion{Tuple{Varg{Real\uff0cN}where N}\uff0cTuple{AbstractUnitRange\uff0cVararg\u3002\uff1atuple{Vararg{Union{Int64\uff0cAbstractRange{Int64}\uff0cBase.AbstractCartesianIndex}\uff0cN}WHERE N}WHERE A&lt\uff1b\uff1aUNION{Base.Re\u89e3\u91catArray{T\uff0cN\uff0cS\uff0cA}WHERE S WHERE A&lt\uff1b\uff1aUNION{SubArray{T\uff0cN\uff0cA\uff0cI\uff0cTRUE}WHERE I&lt\uff1b\uff1aUNION{{Varg{Real\uff0cN}where N}\uff0cTuple{Abt\u3002\u7528\u6cd5\uff1aDenseArray WHERE N WHERE T\uff0cDenseArray}WHERE N WHERE T\uff0cBase.ReshapedArray{T\uff0cN\uff0cA\uff0cMI}WHERE MI&lt\uff1b\uff1aTuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}\uff0cN}WHERE A&lt\uff1b\uff1aUNION{Base.Re\u89e3\u91catArray{T\uff0cN\uff0cS\uff0cA}WHERE S WHERE A&lt\uff1b\uff1aUNION{\u5b50\u6570\u7ec4{T\uff0cN\uff0cA\uff0cI\uff0cTRUE}WHERE I&lt\uff1b\uff1aUNION{\u5143\u7ec4{\u53ef\u53d8{\u5b9e\u6570\uff0cN}WHERE N}\uff0c\u5143\u7ec4{\u62bd\u8c61\u672a\u3002\u7528\u6cd5\uff1aDenseArray where N where T\uff0cDenseArray}where N where T\uff0cSubArray{T\uff0cN\uff0cA\uff0cI\uff0ctrue}where I&lt\uff1b\uff1aUnion{Tuple{Vararg{Real\uff0cN}where N}\uff0cTuple{AbstractUnitRange\uff0cVararg{Any\uff0cN}where N}where A&lt\uff1b\uff1aDenseArray where N where T\uff0cDenseArray}where N where T\uff0cDenseArray}\uff0cSubArray{TB\uff0c2\uff0cA\uff0cI\uff0c\u7528\u6cd5\uff1aUnion{Base.Re\u89e3\u91catArray{T\uff0cN\uff0cS\uff0cA}where S where A&lt\uff1b\uff1aUnion{SubArray{T\uff0cN\uff0cA\uff0cI\uff0ctrue}where I&lt\uff1b\uff1aUnion{Tuple{Varg{Real\uff0cN}where N}\uff0cTuple{AbstractUnitRange\uff0cVarg{Any\uff0cN}where N}where A&lt\uff1b\uff1aDenseArray where N where T\uff0cDenseArray}where N where T\uff0cBase.Reshaped\u3002\u7528\u6cd5\uff1aUnion{Base.Re\u89e3\u91catArray{T\uff0cN\uff0cS\uff0cA}where S where A&lt\uff1b\uff1aUnion{SubArray{T\uff0cN\uff0cA\uff0cI\uff0ctrue}where I&lt\uff1b\uff1aUnion{Tuple{Varg{Real\uff0cN}where N}\uff0cTuple{AbstractUnitRange\uff0cVarg{Any\uff0cN}where N}where A&lt\uff1b\uff1aDenseArray where N where T\uff0cDenseArray}where N where T\uff0cSubArray{T\uff0c\uff1aUNION{Tuple{vararg{Real\uff0cN}where N}\uff0cTuple{AbstractUnitRange\uff0cVararg{Any\uff0cN}where N}\u5176\u4e2dA&lt\uff1b\uff1aDenseArray where N where T\uff0cDenseArray}where N where T\uff0cDenseArray}})where{TA\uff0cTB}in LinearAlgebra at/home/ole/packages/julia-1.4.1/share/julia/stdlib/v1.4/LinearAlgebra/src/lq.jl:180\u3002\n\u4f60\u770b\u5230\u90a3\u4e2a\u6eda\u52a8\u6761\u4e86\u5417\uff1f\u592a\u795e\u5947\u4e86\uff01\u56e0\u4e3a\u6211\u73b0\u5728\u5c31\u5728\u8fd9\u91cc\uff0c\u6211\u60f3\u4e0d\u7ba1\u600e\u6837\u5411\u66f4\u591a\u7684\u4eba\u63d0\u53ca\u8fd9\u4e2a\u8bc0\u7a8d\u3002\n\u60a8\u53ef\u80fd\u60f3\u770b\u770b\u90a3\u4e2a\u7279\u5b9a\u7684\u65b9\u6cd5\u5b9a\u4e49\u3002\u81f3\u5c11\u6211\u5bf9\u770b\u5230\u8fd9\u79cd\u75af\u72c2\u5f88\u611f\u5174\u8da3\u3002\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u90a3\u5f20\u5355\u5b50\uff0c\u7136\u540e\u62ff\u5230\u53f7\u7801\u3002\u8fd9\u91cc\u662f345\u3002\u5728REPL\u4e2d\u952e\u5165\u8be5\u6570\u5b57\u5e76\u4f7f\u7528CTRL+Q\uff0c\u7136\u540e\u5b83\u5c31\u4f1a\u4e3a\u60a8\u6253\u5f00\u3002\u53ef\u80fd\u662fVim\u6216Nano\u6216\u5176\u4ed6\u683c\u5f0f(\u53d6\u51b3\u4e8e\u60a8\u7684\u8bbe\u7f6e)\u3002\n\u5982\u679c\u60a8\u5e0c\u671b\u5728\u7f16\u8f91\u5668\u4e2d\u67e5\u770b\u5b83\uff0c\u5219\u9700\u8981\u5728~/.julia/config/Startup.jl\u6587\u4ef6\u4e2d\u66f4\u6539ENV[&#34\uff1bjulia_edit&#34\uff1b]\u3002\u6211\u7528\u4e86\u8be5\u6b7b\u7684\u8ba9\u6211\u4eec\u518d\u8c08\u4e00\u6b21\u591a\u91cd\u6d3e\u5355\u3002\u8fd9\u57fa\u672c\u4e0a\u662f\u591a\u4e2a\u5206\u6d3e\uff1a\uff0c\u8fd9\u4e2a\u51fd\u6570\u6709357\u4e2a\u65b9\u6cd5\uff0c\u5b83\u4eec\u90fd\u88ab\u79f0\u4e3a*\uff0c\u5b83\u4eec\u5c31\u5728\u90a3\u91cc\uff0c\u5468\u56f4\u6ca1\u6709\u4efb\u4f55\u7c7b\u3002\u4ecd\u7136\u53ef\u4ee5\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u662f\u91cd\u8981\u7684\u90e8\u5206\u3002\n\u5728\u5355\u4e00\u5206\u6d3e\u8bed\u8a00\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ea\u80fd\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u7136\u540e\u7f16\u8bd1\u5668\u68c0\u67e5\u54ea\u4e2a\u51fd\u6570/\u65b9\u6cd5\u9002\u5408\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002\u5728Julia\u4e2d\uff0c\u6b63\u5982\u540d\u79f0Multiple Dispatch\u6240\u6697\u793a\u7684\u90a3\u6837\uff1a\u5b83\u67e5\u770b\u6240\u6709\u53c2\u6570\u3002\n\u51fd\u6570add(x\uff1a\uff1astring\uff0cy\uff1a\uff1astring)x&lt\uff1by\uff1f&#34\uff1b$x$y&#34\uff1b\uff1a&#34\uff1b$y$x&#34\uff1bendfunction add(x\uff0cy\uff1a\uff1astring)\u8fd4\u56deadd(y\uff0cx)endadd(x\uff1a\uff1astring\uff0cy)=&#34\uff1b$x$y&#34\uff1b\n\u5728\u6211\u4eec\u7ee7\u7eed\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u7b80\u77ed\u5730\u63d0\u4e00\u4e0b\uff1a\u4f7f\u7528\u5185\u8054IF\uff0c\u5176\u8bed\u6cd5\u4e0e\u5176\u4ed6\u4e00\u4e9b\u8bed\u8a00\u7684\u8bed\u6cd5\u76f8\u540c\u3002\u53ca\uff1a\u5b83\u4f7f\u7528$\u8fdb\u884c\u53d8\u91cf\u63d2\u503c\uff0c\u5e76\u4e14\u5728Julia\u4e2d\u8fd4\u56de\u6700\u540e\u8c03\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u56e0\u6b64\u5728\u672c\u4f8b\u4e2d\u6211\u4eec\u4e0d\u9700\u8981\u8fd4\u56de\u3002\nJulia&&gt;Methods(Add)#4\u6cdb\u578b\u51fd\u6570\u7684\u65b9\u6cd5&#34\uff1bAdd&#34\uff1b\uff1a[1]Add(x\uff1a\uff1aString\uff0cy\uff1a\uff1aString)in Main at REPL[9]\uff1a2[2]Add(x\uff0cy\uff1a\uff1aString)in Main at REPL[10]\uff1a2[3]Add(x\uff1a\uff1aString\uff0cy)in Main at REPL[13]\uff1a1[4]Add(x\uff0cy)in Main at REPL[3]\uff1a1\u3002\n\u6211\u51b3\u5b9a\u5728\u8fd9\u91cc\u628aadd\u53d8\u6210\u53ef\u4ea4\u6362\u7684\uff0c\u5c3d\u7ba1\u5b83\u53eb\u505aadd\uff0c\u800c\u4e0d\u662f+\uff0c\u4f46\u4e0d\u7ba1\u600e\u6837\u2026\u3002\u5728\u514b\u670d\u8fd9\u4e00\u70b9\u7684\u540c\u65f6\uff0c\u8ba9\u6211\u4eec\u8c03\u7528\u5176\u4e2d\u7684\u4e00\u4e9b\u65b9\u6cd5\uff1a\n\u8fd9\u4ecd\u7136\u6709\u6548\uff0c\u5373\u4f7f\u7528\u6237\u53ef\u80fd\u60f3\u8981\u5f97\u5230\u7ed3\u679c5\uff1ad\u3002\n\u5de5\u4f5c\u5f97\u548c\u6211\u5b9a\u4e49\u5b83\u7684\u65b9\u5f0f\u4e00\u6837\u597d\uff0c\u5373\u5b57\u7b26\u4e32\u4f4d\u4e8e\u5176\u4ed6\u5b57\u7b26\u4e32\u7684\u524d\u9762\u3002\u56e0\u6b64\uff0c\u5b83\u4ea7\u751f\u7684\u7ed3\u679c\u4e0eadd(&#34\uff1babc&#34\uff1b\uff0c2)\u76f8\u540c\u3002\n\u5982\u4f55\u8ba9\u50cfadd(&#34\uff1bHello&#34\uff1b\uff0c&#34\uff1bWorld&#34\uff1b)\u8fd9\u6837\u7684\u4e1c\u897f\u6210\u4e3a\u53ef\u4ea4\u6362\u7684\uff1f\u597d\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u68c0\u67e5\u54ea\u4e00\u4e2a\u5728\u5b57\u5178\u987a\u5e8f\u4e0a\u66f4\u5c0f\u3002\n\u4f46\u600e\u4e48\u505a\u5462\uff1f\u55ef\uff0c\u5b83\u53ea\u662f\u591a\u4e2a\u5206\u6d3e\uff0c\u4f46\u4e3b\u8981\u8bed\u8a00\u4e0d\u652f\u6301\u8fd9\u4e00\u70b9\u3002\u5b83\u68c0\u67e5\u4e86\u8fd94\u79cd\u65b9\u6cd5\u4e2d\u7684\u54ea\u4e00\u79cd\u9002\u5408\uff0c\u54ea\u4e00\u79cd\u662f\u6700\u4e13\u4e1a\u7684\u3002\n\u5982\u679c\u60a8\u67e5\u770b\u8f93\u5165&#34\uff1bHello&#34\uff1b\u3001&#34\uff1bWorld&#34\uff1b\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u60a8\u4f1a\u53d1\u73b0\u8fd9\u56db\u4e2a\u65b9\u6cd5\u90fd\u53ef\u4ee5\u8c03\u7528\uff1a\n[1]ADD(x\uff1a\uff1aString\uff0cy\uff1a\uff1aString)in Main at REPL[9]\uff1a2[2]Add(x\uff0cy\uff1a\uff1aString)in Main at REPL[10]\uff1a2[3]Add(x\uff1a\uff1aString\uff0cy)in Main at REPL[13]\uff1a1[4]Add(x\uff0cy)in Main at REPL[3]\uff1a1\u3002\n\u4f46\u662f[1]\u662f\u6700\u4e13\u4e1a\u7684\u7248\u672c\u3002[4]\u57fa\u672c\u4e0a\u662f\u540e\u5907\u7684\u3002(\u6ca1\u6709\u8981\u6c42\u5fc5\u987b\u5b58\u5728\u8fd9\u6837\u7684\u540e\u5907)\u3002\n\u5728\u5355\u4e00\u5206\u6d3e\u8bed\u8a00\u4e2d\uff0c\u53ea\u8003\u8651\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u6837[1]&amp\uff1b[3]\u5c06\u662f\u4e0d\u660e\u786e\u7684\u3002\n\u5982\u679c\u60a8\u5f88\u597d\u5947\uff0c\u60a8\u53ef\u80fd\u60f3\u68c0\u67e5\u4e00\u4e0b\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\u6765\u8c03\u7528&#34\uff1bHello&34\uff1b&lt\uff1b&34\uff1bWorld&#34\uff1b\u3002\n\u5728Julia\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u540d\u4e3a\u201cWhich\u201d\u7684\u5b8f\u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002(\u5b8f\u662f\u53e6\u4e00\u4e2a\u5e16\u5b50\u7684\u4e3b\u9898\uff0c\u6211\u8fd8\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e9b\u7684\u7ecf\u9a8c)\n\u6211\u53d1\u73b0\u5728\u8fd9\u91cc\u8c03\u7528\u6cdb\u578b\u65b9\u6cd5\u5b9e\u9645\u4e0a\u76f8\u5f53\u6709\u8da3\u3002\u4e5f\u8bb8\u6211\u4eec\u60f3\u770b\u770b\u6e90\u4ee3\u7801\u3002\n\u8fd9\u91cc\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u6211\u4eec\u7684CTRL+Q\u6280\u5de7\u4e0d\u518d\u7528\u4e8e\u68c0\u67e5\u83b7\u53d6\u6e90\u4ee3\u7801\uff0c\u56e0\u4e3a\u6ca1\u6709[number]\uff0c\u800c\u4e14\u5b83\u65e0\u8bba\u5982\u4f55\u90fd\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u5b8f\uff0c\u5e76\u4e14\u6211\u4eec\u4e0d\u80fd\u5355\u51fbOperators.jl\uff0c\u56e0\u4e3a\u6ca1\u6709\u7ed9\u51fa\u5b8c\u6574\u7684\u8def\u5f84\u3002\u4e5f\u8bb8\u662f\u53e6\u4e00\u4e2a\u628a\u620f\uff1f\n\u5c06\u6211\u4eec\u5e26\u5230&lt\uff1b(x\uff0cy)=isless(x\uff0cy)\uff0c\u8fd9\u53ea\u4f1a\u7ed9\u6211\u4eec\u5e26\u6765\u4e00\u70b9\u70b9\u66f4\u591a\u7684\u771f\u76f8\uff1aD\u3002\n\u544a\u8bc9\u6211\u4eec\u73b0\u5728\u6d3e\u5230AbstractString\u7684\u4f4d\u7f6e\uff0c\u8fd9\u53ef\u80fd\u4e5f\u662f\u4ec0\u4e48\u662fAbstractString\u548c\u4ec0\u4e48\u662fString\u7684\u53e6\u4e00\u4e2a\u4e3b\u9898\u7684\u4e00\u90e8\u5206\u3002\n\u51fd\u6570cmp(a\uff1a\uff1astring\uff0cb\uff1a\uff1astring)al\uff0cbl=sizeof(A)\uff0csizeof(B)c=_memcmp(a\uff0cb\uff0cmin(al\uff0cbl))\u8fd4\u56dec&lt\uff1b0\uff1f-1\uff1ac&gt\uff1b0\uff1f+1\uff1acmp(al\uff0cbl)end\u3002\n\u597d\u7684\uff0c\u4e5f\u8bb8\u6211\u4eec\u4e5f\u5e94\u8be5\u8c08\u8c08\u8fd9\u4ef6\u4e8b\u3002\u6211\u5fc5\u987b\u627f\u8ba4\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u6211\u4e0d\u592a\u559c\u6b22\u5728\u5927\u5b66\u91cc\u7528\u6ca1\u4eba\u7528\u8fc7\u7684\u602a\u5f02\u8bfe\u7a0b\u6559\u6388\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u548c\u611a\u8822\u7684\u4f8b\u5b50\uff0c\u4f46\u4f60\u770b\uff1a\u6211\u81ea\u5df1\u5c31\u662f\u8fd9\u79cd\u7c7b\u578b\u7684\u611a\u8822\u4f8b\u5b50\uff01\n(\u597d\u7684\uff0c\u5b83\u57fa\u672c\u4e0a\u662f\u76f8\u540c\u7684\uff0c\u53ea\u662f\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u52a8\u7269\u548c\u4e0d\u540c\u7684\u529f\u80fd\u540d\u79f0)\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u5728\u8fd9\u91cc\u662f\u535a\u5ba2\u683c\u5f0f\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u590d\u5236\u548c\u7c98\u8d34\u4ee3\u7801\u3002\n\u6458\u8981\u7c7b\u578bAnimal endstruct Lizard&lt\uff1b\uff1a\u52a8\u7269\u540d\u79f0\uff1a\uff1aString endstruct Rabbit&lt\uff1b\uff1a\u52a8\u7269\u540d\u79f0\uff1a\uff1aString endrace(l\uff1a\uff1alizard\uff0cr\uff1a\uff1aRabb)=&#34\uff1b$(l.name)\u5728\u722c\u5899\u6bd4\u8d5b\u4e2d\u83b7\u80dc\u3002&#34\uff1brace(r\uff1a\uff1a\u5154\u5b50\uff0cl\uff1a\uff1alizard)=&#34\uff1b$(r.name)\u5728\u6b63\u5e38\u6bd4\u8d5b\u4e2d\u83b7\u80dc\u3002&#34\uff1brace(a\uff1a\uff1at\uff0cb\uff1a\uff1at)\u5176\u4e2dT&llt\u3002$(a.name)\u548c$(b.name)\u6c38\u8fdc\u8fd0\u884c\u3002&#34\uff1b\u51fd\u6570\u76f8\u9047(a\uff1a\uff1aAnimal\uff0cb\uff1a\uff1aAnimal)println(&#34\uff1b$(a.name)\u4e0e$(b.name)\u76f8\u9047\uff01&#34\uff1b)println(&#34\uff1b)println(&#34\uff1b\u7ed3\u679c\uff1a$(race(a\uff0cb))&#34\uff1b)endbayi=\u8725\u8734(&#34\uff1bbayi&#34\uff1b)Sally=Rabbit(&#34\uff1bSally&#34\uff1b\n\u5728\u6211\u4eec\u8c08\u5230\u5b83\u7684\u8f93\u51fa\u662f\u4ec0\u4e48\u4e4b\u524d\uff0c\u8fd9\u5e94\u8be5\u662f\u6211\u4eec\u6240\u671f\u671b\u7684\uff0c\u8ba9\u6211\u5148\u63d0\u4e00\u4e0b\uff0c\u8725\u8734\u6709\u4e00\u79cd\u611f\u89c9\uff0c\u5b83\u4eec\u975e\u5e38\u5feb\uff0c\u56e0\u4e3a\u5b83\u4eec\u592a\u5c0f\u4e86\u3002\n#include&lt\uff1biostream&gt\uff1b#include&lt\uff1bstring&gt\uff1busing&lt\uff1bclass Animal{public\uff1astring name\uff1b}\uff1bstring race(Animal a\uff0cAnimal b){return a.name+&#34\uff1band&#34\uff1b+b.name+&#34\uff1b\u4e00\u76f4\u8fd0\u884c\u5230\u4e00\u4e2a\u4eba\u83b7\u80dc&#34\uff1b\uff1b}void Meet(Animal a\uff0cAnimal b){cout&lt\uff1b&lt\uff1ba.name&lt\uff1b&lt\uff1b&#34\uff1bEndl\uff1b\u7ed3\u679c\uff1a&#34\uff1b&lt\uff1b&lt\uff1brace(a\uff0cb)&lt\uff1b&lt\uff1bEndl\uff1b}\u7c7b\u8725\u8734\uff1a\u516c\u5171\u52a8\u7269{}\uff1b\u7c7b\u5154\u5b50\uff1a\u516c\u5171\u52a8\u7269{}\uff1b\u4e32\u5f0f\u7ade\u8d5b(\u8725\u8734l\uff0c\u5154\u5b50r){return l.name+#34\uff1b\u5728\u722c\u5899\u6bd4\u8d5b\u4e2d\u83b7\u80dc\uff1b}\u4e32\u5f0f\u7ade\u8d5b(Rabbit r\uff0c\u8725\u8734l){return r.name+&34\uff1b\uff1b\u83b7\u80dc\u3002bayi.name=&#34\uff1b\u516b\u4e00\uff1b\uff1b\u5154\u5b50Sally\uff1bSally.name=&#34\uff1bSally&34\uff1b\uff1bMeet(\u516b\u4e00\uff0cSally)\uff1bMeet(Sally\uff0c\u516b\u4e00)\uff1bMeet(Sally\uff0cSally)\uff1bReturn 0\uff1b}\u3002\n\u6b64\u5904\u5b57\u7b26\u4e32race(Animal a\uff0cAnimal b){return a.name+&#34\uff1band&#34\uff1b+b.name+&#34\uff1b\u4e00\u76f4\u8fd0\u884c\uff0c\u76f4\u5230\u4e00\u4e2a\u4eba\u8d62\u5f97&#34\uff1b}\u3002\n\u57fa\u672c\u4e0a\u662f\u4e00\u79cd\u9000\u8def\uff0c\u800c\u4e0d\u662f\u50cf\u6731\u8389\u5a05\u90a3\u6837\uff0c\u4e24\u79cd\u52a8\u7269\u5fc5\u987b\u662f\u540c\u4e00\u7c7b\u578b\u7684\u3002\n\u516b\u4e00\u9047\u5230\u8428\u5229\u7ed3\u679c\uff1a\u516b\u4e00\u548c\u8428\u5229\u8dd1\u5230\u4e00\u573a\u80dc\u5229\u8428\u5229\u548c\u516b\u4e00\u8dd1\u5230\u4e00\u573a\u80dc\u5229\u8428\u5229\u548c\u516b\u4e00\u8dd1\u5230\u4e00\u573a\u80dc\u5229\u8428\u5229\u548c\u8428\u5229\u8dd1\u5230\u4e00\u573a\u80dc\u5229\u3002\nMeet\u793a\u4f8b\u7684\u95ee\u9898\u5728\u4e8e\u5b83\u662f\u51fd\u6570\u91cd\u8f7d\uff0c\u800c\u4e0d\u662f\u591a\u6b21\u5206\u6d3e\u3002\u4e0d\u540c\u4e4b\u5904\uff1a\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u800c\u4e0d\u662f\u5b9e\u9645\u7c7b\u578b\u7684\u51fd\u6570\u91cd\u8f7d\u3002\u57fa\u672c\u4f1a\u8bae\u5c06\u59cb\u7ec8\u8c03\u7528\u51fd\u6570\u5b57\u7b26\u4e32RACE(Animal a\uff0cAnimal b){return a.name+&#34\uff1band&#34\uff1b+b.name+&#34\uff1b\u4e00\u76f4\u8fd0\u884c\u5230\u4e00\u4e2a\u4eba\u83b7\u80dc\uff1b\uff1b}\u3002\n\u56e0\u4e3a\u5b83\u5728Meet\u4e2d\u4f7f\u7528\u7684\u662f\u9759\u6001\u7c7b\u578b\u7684a\u548cb\uff0c\u5728\u90a3\u91cc\u5b83\u53ea\u77e5\u9053\u81ea\u5df1\u662f\u4e00\u53ea\u52a8\u7269\u3002\n\u7ed3\u679c\uff1a\u516b\u4e00\u9047\u5230\u8428\u5229\uff0c\u4ed6\u4eec\u6bd4\u8d5b\uff01\u7ed3\u679c\uff1a\u516b\u4e00\u5728\u722c\u5899\u6bd4\u8d5b\u4e2d\u83b7\u80dc\u3002\u8428\u5229\u9047\u5230\u516b\u4e00\uff0c\u4ed6\u4eec\u6bd4\u8d5b\uff01\u7ed3\u679c\uff1a\u8428\u5229\u5728\u4e00\u573a\u6b63\u5e38\u7684\u6bd4\u8d5b\u4e2d\u83b7\u80dc\u3002\u8428\u5229\u9047\u5230\u8428\u5229\uff0c\u4ed6\u4eec\u6bd4\u8d5b\uff01\u7ed3\u679c\uff1a\u8428\u5229\u548c\u8428\u5229\u6c38\u8fdc\u5954\u8dd1\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u53ef\u80fd\u5e94\u8be5\u63d0\u5230\u5728\u6700\u540e\u4e00\u6b65\u4e2d\u8c03\u7528\u7684\u65b9\u6cd5\u7684\u5b9a\u4e49\uff1a\n\u8fd9\u91ccT\u662fAnimal\u7684\u4e00\u4e2a\u5b50\u7c7b\u578b\uff0c\u901a\u8fc7\u4e24\u6b21\u4f7f\u7528T\uff0c\u6211\u4eec\u5b9a\u4e49\u5b83\u4eec\u5fc5\u987b\u662f\u540c\u4e00\u7c7b\u578b\u3002\u8fd9\u610f\u5473\u7740\u5f53\u5b9a\u4e49struct Cat\u548c\u8c03\u7528RACE(\uff1a\uff1aCAT\uff0c\uff1a\uff1aCAT)\u65f6\uff0c\u6211\u4eec\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u4f46\u662fRACE(\uff1a\uff1aCAT\uff0c\uff1a\uff1alizard)\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684Animal\u5b50\u7c7b\u578b\u3002\n\u8fd9\u662f\u76f8\u5f53\u4e3b\u89c2\u7684\uff0c\u4f46\u6211\u7684\u4e00\u4e2a\u666e\u904d\u611f\u89c9\u662f\uff0c\u5982\u679c\u4e00\u95e8\u8bed\u8a00\u6709\u591a\u4e2a\u5206\u6d3e\uff0c\u5b83\u5c31\u4e0d\u9700\u8981\u5b83\u3002\nOOP\u4e3a\u4ee3\u7801\u63d0\u4f9b\u4e86\u7ed3\u6784\uff0c\u6709\u65f6\u5b83\u88ab\u7528\u6765\u901a\u8fc7\u5f15\u5165\u81f3\u5c11\u4e00\u4e2a\u5206\u6d3e\u6765\u514b\u670d\u8fd9\u4e9b\u8bed\u8a00\u4e2d\u5206\u6d3e\u7684\u9650\u5236\u3002\u6211\u7ecf\u5e38\u5f88\u96be\u5728OOP\u4e2d\u6269\u5c55\u4ee3\u7801\uff0c\u56e0\u4e3a\u6709\u65f6\u60a8\u60f3\u4f7f\u7528\u4e00\u4e2a\u7c7b\uff0c\u4f46\u4e0d\u77e5\u4f55\u6545\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u90e8\u5206\uff0c\u5b83\u5fc5\u987b\u5728\u60a8\u6ca1\u6709\u76f4\u63a5\u8bbf\u95ee\u6743\u9650\u7684\u7c7b\u4e2d\u3002\u8fd9\u5bf9\u6211\u6765\u8bf4\u6709\u70b9\u9650\u5236\uff0c\u522b\u4eba\u4f1a\u8bf4\uff0c\u5f53\u4f60\u4e0d\u88ab\u5141\u8bb8\u505a\u6240\u6709\u4e8b\u60c5\u7684\u65f6\u5019\uff0c\u6709\u65f6\u4f1a\u8bf4\u8fd9\u5f88\u597d\u3002\u540c\u6837\u7684\u4eba\u8bf4\uff0c\u4e0d\u5e94\u8be5\u5728Javascript\u4e2d\u5de5\u4f5c\uff0c\u662f\u7684\uff0c\u597d\u7684\uff0c\u6211\u53ef\u80fd\u4f1a\u540c\u610f\u6700\u540e\u4e00\u70b9\uff0c\u4f46\u6709\u65f6\u770b\u770b\u4e00\u4e9b\u4e1c\u897f\u662f\u5426\u4e0d\u8f6c\u6362\u7c7b\u578b\u5c31\u53ef\u4ee5\u5de5\u4f5c\uff0c\u8fd9\u771f\u662f\u592a\u68d2\u4e86\uff1ad\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u4e0d\u60f3\u8bf4\u6731\u8389\u5a05\u5728\u4efb\u4f55\u65b9\u9762\u90fd\u66f4\u597d\uff0c\u4e5f\u4e0d\u60f3\u8bf4\u4e0d\u8981\u4f7f\u7528C++\u3002\u4ed6\u4eec\u53ea\u662f\u6709\u4e0d\u540c\u7684\u6982\u5ff5\u3002\n\u8fd9\u7bc7\u5e16\u5b50\u5e0c\u671b\u80fd\u8ba9\u4f60\u77e5\u9053\u6731\u8389\u5a05\u505a\u4e86\u4ec0\u4e48\u4e0d\u540c\u7684\u4e8b\u60c5\uff0c\u4ee5\u53ca\u8fd9\u662f\u5982\u4f55\u6709\u7528\u7684\u3002\u6211\u9f13\u52b1\u60a8\u81ea\u5df1\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u4e00\u5b9a\u8981\u770b\u770bStefan Karpinski\u7684\u6f14\u793a\u6587\u7a3f\uff0c\u56e0\u4e3a\u4ed6\u4e5f\u5c55\u793a\u4e86\u8fd9\u662f\u5982\u4f55\u8ba9\u5305\u4e4b\u95f4\u7684\u5bf9\u8bdd\u53d8\u5f97\u66f4\u5bb9\u6613\u7684\u3002\u6211\u4e0d\u60f3\u5728\u8fd9\u91cc\u91cd\u590d\u8fd9\u4e00\u70b9\uff0c\u4e5f\u4e0d\u60f3\u4e3e\u5176\u4ed6\u4f8b\u5b50\u3002\u5728\u4ee5\u540e\u7684\u5e16\u5b50\u4e2d\uff0c\u6211\u5e0c\u671b\u5728\u505a\u4e00\u4e9b\u6bd4\u6211\u7ecf\u5e38\u4f7f\u7528\u7684ConstraintSolver\u66f4\u7b80\u5355\u7684\u4e8b\u60c5\u65f6\uff0c\u80fd\u7528\u6211\u7684\u4ee3\u7801\u5c55\u793a\u4e00\u4e9b\u771f\u5b9e\u4e16\u754c\u7684\u4f8b\u5b50\u3002\n\u6211\u5f88\u4e50\u610f\u5728\u535a\u5ba2\u4e0a\u518d\u6b21\u89c1\u5230\u4f60\uff0c\u5e76\u8bf7\u5728\u8bc4\u8bba\u4e2d\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\uff01\n\u6bcf\u6708\u6350\u6b3e\u4e00\u7f8e\u5143\uff0c\u4f60\u5c31\u53ef\u4ee5\u63d0\u524d\u8bbf\u95ee\u8fd9\u4e9b\u5e16\u5b50\u3002\u5728\u6708\u521d\u8bd5\u7528\u4e00\u4e0b\uff0c\u5982\u679c\u4f60\u4e0d\u559c\u6b22\uff0c\u5c31\u5728\u53d1\u85aa\u65e5(\u6708\u5e95)\u4e4b\u524d\u53d6\u6d88\u8ba2\u9605\u3002\n\u6211\u4f1a\u8ba9\u60a8\u968f\u65f6\u4e86\u89e3Twitter OpenSourcES\u4ee5\u53ca\u6211\u4e2a\u4eba\u7684Twitter Wikunia_de\u7684\u6700\u65b0\u52a8\u6001", "note_en": "From time to time I hear that my posts are a little bit too deep and complicated for beginners. I totally agree: especially in my newest series on  &#34;How to build a constraint solver from scratch?&#34; which is probably a never ending series. I do like to blog about it and will continue but this series is different.\n Julia is a relatively young language and not too many people are using it. It thrives in scientific computing but I believe that it can be used for general computing (probably where start up time is not that relevant) i.e. I do use it for creating this blog with  Franklin which I blogged a bit about as well  here.\n This series tries to explain some of the core concepts of Julia and maybe some packages to beginners. I, the explainer of this stuff here, am by no means an expert in any of these. If you know this blog then you might know that I&#39;m trying to explain stuff directly after I&#39;ve learned them to hopefully be able to communicate better than some people who do this their entire life and are experts in it. Blogs from experts are sometimes hard to follow for me, so maybe also for you. I&#39;ll let them proof read my blog post just to be sure that there is nothing wrong with what I explain ;)\n      In every programming language there are  functions which have the purpose of providing structure and reusability of code. The functions have a  name and some  arguments. They are defined like\n  In Python this can be called with  add(2,3) which gives the expected  5 but also  add(&#34;2&#34;,&#34;3&#34;) gives  &#39;23&#39; which might make sense or not depending on who you ask :D\n  This results in an error  TypeError: can only concatenate str (not &#34;int&#34;) to str which again can make sense. Well I would say it does but Javascript does something different:\n   Then there are of course languages like  C++ where this all is not that simple because we need to introduce types:\n  There it is clear for everyone that it takes two  int and returns one  int. Because it is a compiled language we would get an error directly when trying to call it with  add(&#34;2&#34;, 3).\n Now what is the point? We can see different concepts here with having static types as in C++ and dynamic typing in JS and Python. They both have pros and cons which is probably obvious. The one is easier to reason about and the others are maybe easier to hack around with.\n    Then we might get to the point where the function doesn&#39;t work like for  add(&#34;2&#34;, 3) and throw an error or it works out and the answer is returned.\n It is basically the same in JS. There are possibility some &#34;extensions&#34; like Typescript where things might happen differently. I haven&#39;t programmed with any of those languages lately so keep that in mind.\n In  C++ more things are going on as each variable has a static type and one can check directly whether this fits or not. This means as we can later see that there can be more functions with the same name. I&#39;ll explain the difference between function overloading and multiple dispatch in that part ;)\n In all of these languages we can have classes such that we might have a class  Manufacturer and we can define  add(self, thing) or something like that and can call the function with  manufacturer.add(thing). This can be kind of seen as single dispatch. Dispatch is basically the process of deciding which function to call. Here it depends on the type of  manufacturer. Is it a  Manufacturer or a  Box? For a  Box we might have defined a class  Box and  add(self, box) inside of it.\n  For people coding in Julia for longer this might sound like a weird concept. Actually writing about it, I am thinking: How would I do some things, where I use multiple dispatch all the time (like in the ConstraintSolver) in one of those languages?\n  Yes there are ways in Python for single dispatching like  @singledispatch but given that the main posts I found when searching are 3-4 years old I doubt that a lot are using it :D\n   Now that there is that out of our way let us have a look at one example in Julia:\n  just to show a neat little way of defining one-line functions... (or as they are called in Julia: Methods)\n The interesting things is when you type this in the Julia REPL (Read-eval-print loop) you get:\n  calling that function works basically like in Python (from the user perspective for now). It doesn&#39;t work for strings though.\n Julia and  + for strings: Julia is a mathematical language and  + is commutative whereas concatenating strings is not. So  &#34;2&#34;+&#34;3&#34; is not  &#34;3&#34;+&#34;2&#34;. Therefore Julia decided to use  * instead. Which is commutative for numbers but not matrices for example.\n Okay where did I interrupt myself? ... Ah yeah so we have an  add function with one method now in the REPL. That looks like we might be able to add a new one, right?\n As correctly pointed out on  Reddit: I use mostly the word function. In Julia there is actually a difference between functions and methods. There is one  + function with a lot of different implementations: called methods.\n  okay that did not work because it still allows all types of inputs (and throws an error later when it doesn&#39;t work) because the compiler had no way to decide which   functionmethod to call.\n  A small side step again: Let&#39;s check what happens when we call  add(&#34;2&#34;, &#34;3&#34;) julia&gt; add(&#34;a&#34;, &#34;b&#34;)ERROR: MethodError: no method matching *(::Int64, ::String)Closest candidates are: *(::Any, ::Any, ::Any, ::Any...) at operators.jl:529 *(::Missing, ::AbstractString) at missing.jl:174 *(::T, ::T) where T&lt;:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8} at int.jl:54 ...Stacktrace: [1] add(::String, ::String) at ./REPL[3]:1 [2] top-level scope at REPL[4]:1\n That error occurs when calling  2x where it figured that  2 is an integer and  x = &#34;2&#34; is a string. It gives us information of what kind of types it can multiply.\n Let&#39;s pick one:  *(::T, ::T) where T&lt;:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8} at int.jl:54\n This tells us that we can multiply two numbers of those types when they are the same. So  UInt8 with  UInt8 but I come to that syntax later.\n You might wonder how many of those  *   functionsmethods there are:  357 is the answer which you get when typing\n  which gives you a long list with all kind of weird types where it sometimes spreads over several lines. I mean what is this? :D\n [345] *(A::LinearAlgebra.LQ{TA,S} where S&lt;:AbstractArray{TA,2}, B::Union{DenseArray{TB,1}, DenseArray{TB,2}, Base.ReinterpretArray{TB,1,S,A} where S where A&lt;:Union{SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray}, Base.ReinterpretArray{TB,2,S,A} where S where A&lt;:Union{SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray}, Base.ReshapedArray{TB,1,A,MI} where MI&lt;:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A&lt;:Union{Base.ReinterpretArray{T,N,S,A} where S where A&lt;:Union{SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray}, Base.ReshapedArray{TB,2,A,MI} where MI&lt;:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A&lt;:Union{Base.ReinterpretArray{T,N,S,A} where S where A&lt;:Union{SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray}, SubArray{TB,1,A,I,L} where L where I&lt;:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A&lt;:Union{Base.ReinterpretArray{T,N,S,A} where S where A&lt;:Union{SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI&lt;:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A&lt;:Union{Base.ReinterpretArray{T,N,S,A} where S where A&lt;:Union{SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray} where N where T, DenseArray}, SubArray{TB,2,A,I,L} where L where I&lt;:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex},N} where N} where A&lt;:Union{Base.ReinterpretArray{T,N,S,A} where S where A&lt;:Union{SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI&lt;:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A&lt;:Union{Base.ReinterpretArray{T,N,S,A} where S where A&lt;:Union{SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I&lt;:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A&lt;:DenseArray where N where T, DenseArray} where N where T, DenseArray}}) where {TA, TB} in LinearAlgebra at /home/ole/packages/julia-1.4.1/share/julia/stdlib/v1.4/LinearAlgebra/src/lq.jl:180\n Do you see that scrollbar? Amazing! As I&#39;m currently here and wanted to mention that trick to more people anyway.\n You might wanna have a look at that specific method definition. At least I&#39;m interested to see that madness. At the end you get       see that list and get the number. Here  345. Type that number into the REPL and use  CTRL+Q and then it gets opened for you. Maybe in  vim or  nano or something (depending on your settings).\n If you want to see it in your editor you need to change  ENV[&#34;JULIA_EDITOR&#34;] in your  ~/.julia/config/startup.jl file. I use   Damn let&#39;s talk about multiple dispatch again. This is basically multiple dispatch :D You have 357 methods for that function which are all called  * and they are just there without having any classes around them. It is still possible to decide which method to call and that is the important part.\n In single dispatch languages it is only possible to have a different type for the first argument and then the compiler checks which function/method fits the first argument. In Julia as the name &#34;multiple dispatch&#34; suggests: it looks at all arguments.\n  function add(x::String, y::String) x &lt; y ? &#34;$x$y&#34; : &#34;$y$x&#34;endfunction add(x, y::String) return add(y, x)endadd(x::String,y) = &#34;$x$y&#34;\n   Before we continue let&#39;s shortly mention that:   uses an inline  if with the same syntax as some other languages with  ? and  :. It uses  $ for variable interpolation and in Julia the last called expression is returned so we don&#39;t need  return in this case.\n  julia&gt; methods(add)# 4 methods for generic function &#34;add&#34;:[1] add(x::String, y::String) in Main at REPL[9]:2[2] add(x, y::String) in Main at REPL[10]:2[3] add(x::String, y) in Main at REPL[13]:1[4] add(x, y) in Main at REPL[3]:1\n I decided to make  add commutative here even though it is called  add and not  + but anyway... While getting over that lets call some of those methods:\n  That still &#34;works&#34; even though a user maybe would like to get the result  5 instead :D\n  works as well as I defined it in such a way that the string comes in front of the  else. Therefore it produces the same as  add(&#34;abc&#34;, 2).\n How to make things like  add(&#34;Hello &#34;, &#34;World&#34;) be commutative? Well we can compare the two strings and check which is lexicographically smaller.\n   But how? Well It was just multiple dispatching but the major languages don&#39;t support that. It checked which of those 4 methods fit and which one is the most specialized.\n If you have a look at the input  &#34;Hello &#34;, &#34;World&#34; which are two strings you actually see that all of those four methods could be called:\n [1] add(x::String, y::String) in Main at REPL[9]:2[2] add(x, y::String) in Main at REPL[10]:2[3] add(x::String, y) in Main at REPL[13]:1[4] add(x, y) in Main at REPL[3]:1\n but  [1] is the most specialized version.  [4] is basically the fallback one. (There is no requirement that such a fallback exists)\n In single dispatch languages only the first argument would be considered such that  [1] &amp;  [3] would be ambiguous.\n If you&#39;re curious you might wanna check which method is called for  &#34;Hello&#34; &lt; &#34;World&#34;.\n In Julia you can do this with a macro called  @which. (Macros are a topic for another post and I&#39;m really not experienced with those yet)\n  I found it actually quite interesting that the generic method is called here. Maybe we want to see the source code.\n A problem here is that our  CTRL+Q trick doesn&#39;t work anymore to check get to the source because there is no  [number] and it&#39;s a different macro anyway and we can&#39;t click on  operators.jl as not the full path is given. Maybe another trick?\n  brings us to  &lt;(x, y) = isless(x, y) which only brings us a tiny bit more to the truth :D\n  gives us   where we have dispatched to  AbstractString now which is probably also part for another topic of what is an  AbstractString and what a  String.\n  function cmp(a::String, b::String) al, bl = sizeof(a), sizeof(b) c = _memcmp(a, b, min(al,bl)) return c &lt; 0 ? -1 : c &gt; 0 ? +1 : cmp(al,bl)end\n    Okay we maybe should talk about that as well. I have to admit that I&#39;m in general not a huge fan of OOP and silly examples taught in university with weird classes that nobody ever uses but here you go: My own stupid example of such type!\n  (Okay it&#39;s basically the same with some different animals and a different function name). Nevertheless it&#39;s in a blog format here so you can easier copy and paste code.\n   abstract type Animal endstruct Lizard &lt;: Animal name :: String endstruct Rabbit &lt;: Animal name :: String endrace(l::Lizard, r::Rabbit) = &#34;$(l.name) wins in wall climbing.&#34;race(r::Rabbit, l::Lizard) = &#34;$(r.name) wins in a normal race.&#34;race(a::T, b::T) where T &lt;: Animal = &#34;$(a.name) and $(b.name) run forever.&#34;function meet(a::Animal, b::Animal) println(&#34;$(a.name) meets $(b.name) and they race!&#34;) println(&#34;Outcome: $(race(a,b))&#34;)endbayi = Lizard(&#34;Bayi&#34;)sally = Rabbit(&#34;Sally&#34;)meet(bayi, sally)meet(sally, bayi)meet(sally, sally)\n before we come to what it outputs, which should be what we expect, let me just mention that lizards have a feeling that they are very fast because they are so small.\n  #include &lt;iostream&gt;#include &lt;string&gt;using namespace std;class Animal { public: \tstring name;};string race(Animal a, Animal b) { return a.name + &#34; and &#34; + b.name + &#34; run until one wins&#34;; }void meet(Animal a, Animal b) { cout &lt;&lt; a.name &lt;&lt; &#34; meets &#34; &lt;&lt; b.name &lt;&lt; endl; cout &lt;&lt; &#34;Outcome: &#34; &lt;&lt; race(a, b) &lt;&lt; endl;}class Lizard : public Animal {};class Rabbit : public Animal {};string race(Lizard l, Rabbit r) { return l.name + &#34; wins in wall climbing&#34;; }string race(Rabbit r, Lizard l) { return r.name + &#34; wins in a normal race&#34;; }int main() { Lizard bayi; bayi.name = &#34;Bayi&#34;; Rabbit sally; sally.name = &#34;Sally&#34;; meet(bayi, sally); meet(sally, bayi); meet(sally, sally); return 0;}\n Here  string race(Animal a, Animal b) { return a.name + &#34; and &#34; + b.name + &#34; run until one wins&#34;; }\n is basically a fallback and not as in the julia case where both animals must be of the same type.\n  Bayi meets SallyOutcome: Bayi and Sally run until one winsSally meets BayiOutcome: Sally and Bayi run until one winsSally meets SallyOutcome: Sally and Sally run until one wins\n     The problem of the  meet example is that it is function overloading and not multiple dispatch.  Difference: Function overloading using the static type and not the actual type. Basically  meet will always call the function  string race(Animal a, Animal b) { return a.name + &#34; and &#34; + b.name + &#34; run until one wins&#34;; }\n because all it uses is the static type of of  a and  b in  meet where it only knows it is an  Animal.\n  Bayi meets Sally and they race!Outcome: Bayi wins in wall climbing.Sally meets Bayi and they race!Outcome: Sally wins in a normal race.Sally meets Sally and they race!Outcome: Sally and Sally run forever.\n here I should probably mention the definition of the method which gets called in the last step:\n  Here  T is a subtype of  Animal and by using  T both times we define that they have to be the same type. This means when defining a struct  Cat and call  race(::Cat, ::Cat) we would get the same result but  race(::Cat, ::Lizard) would not work as they are different subtypes of  Animal.\n   This is quite subjective but a general feeling of me is that a language doesn&#39;t need it if it has multiple dispatch.\n OOP gives structure to code and sometimes it is used to overcome the limitations of dispatching in those languages by introducing at least single dispatch. I often struggled to extend code in OOP because sometimes you want to use a class but somehow need an extra bit there, which has to be inside a class, that you don&#39;t have direct access to. It felt a bit restrictive for me and others will say it&#39;s sometimes good when you&#39;re not allowed to do everything. Same people say  &#34;2&#34;+3 shouldn&#39;t work in Javascript and yeah okay I might agree on the last point but sometimes it&#39;s damn awesome to see if something just works without converting types :D\n Anyway I don&#39;t want to say Julia is better in any way or &#34;DON&#39;T USE C++&#34;. They just have different concepts.\n This post hopefully gave you an idea on what Julia is doing different and how that can be useful. I encourage to try it out a bit for yourself and definitely watch that presentation by Stefan Karpinski as he also shows how this makes talking between packages easier. I don&#39;t want to repeat that here or give other examples just yet. In future posts I hopefully can show some real world examples in my code when doing something simpler than my ConstraintSolver where I use it all the time.\n I would love to see you again on the blog and please share your thoughts in the comments!\n        For a donation of a single dollar per month you get early access to the posts. Try it out at the start of a month and if you don&#39;t enjoy it just cancel your subscription before pay day (end of month).\n I&#39;ll keep you updated on  Twitter OpenSourcES as well as my more personal one:  Twitter Wikunia_de", "posttime": "2020-07-06 03:02:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "julia,dispatch,\u53ef\u80fd", "title": "\u6731\u8389\u5a05\u7684\u591a\u91cd\u6d3e\u5355", "title_en": "Multiple Dispatch in Julia", "transed": 1, "url": "https://opensourc.es/blog/basics-multiple-dispatch/", "via": "", "real_tags": ["julia", "dispatch", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "2888f827ad0be828a1f593e7fa9804d3.jpeg", "infoid": 1009970, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PANAAS\u5e93\u662fPython\u6700\u6d41\u884c\u7684\u6570\u636e\u64cd\u4f5c\u5e93\u3002\u53d7R\u6570\u636e\u5e27\u7684\u542f\u53d1\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u901a\u8fc7\u5176\u6570\u636e\u5e27API\u64cd\u4f5c\u6570\u636e\u7684\u7b80\u5355\u65b9\u6cd5\u3002\n\u5f88\u597d\u5730\u7406\u89e3\u718a\u732b\u7684\u5173\u952e\u4e4b\u4e00\u662f\u7406\u89e3\u718a\u732b\u4e3b\u8981\u662f\u4e00\u7cfb\u5217\u5176\u4ed6Python\u5e93\u7684\u5305\u88c5\u5668\u3002\u4e3b\u8981\u6709Numpy\u3001SQL\u70bc\u91d1\u672f\u3001Matlot\u5e93\u548copenpyxl\u3002\n\u6570\u636e\u6846\u7684\u6838\u5fc3\u5185\u90e8\u6a21\u578b\u662f\u4e00\u7cfb\u5217NumPy\u6570\u7ec4\u548cPANDA\u51fd\u6570\uff0c\u4f8b\u5982\u73b0\u5728\u4e0d\u63a8\u8350\u4f7f\u7528\u7684\u201cas_Matrix\u201d\u51fd\u6570\uff0c\u5b83\u4eec\u4ee5NumPy\u7684\u5185\u90e8\u8868\u793a\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\u3002\n\u718a\u732b\u5229\u7528\u5176\u4ed6\u5e93\u5c06\u6570\u636e\u4f20\u5165\u548c\u4f20\u51fa\u6570\u636e\u6846\u3002\u4f8b\u5982\uff0cSQL\u70bc\u91d1\u672f\u901a\u8fc7read_sql\u548cto_sql\u51fd\u6570\u4f7f\u7528\uff0c\u800copenpyxl\u548cxlsx\u7f16\u5199\u5668\u7528\u4e8eread_excel\u548cto_excel\u51fd\u6570\u3002\n\u800cMatplotlib\u548cSeborn\u5219\u7528\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u7684\u754c\u9762\uff0c\u4f7f\u7528df.lot()\u7b49\u547d\u4ee4\u7ed8\u5236\u6570\u636e\u6846\u5185\u53ef\u7528\u7684\u4fe1\u606f\u3002\n\u60a8\u7ecf\u5e38\u542c\u5230\u7684\u62b1\u6028\u4e4b\u4e00\u662fPython\u901f\u5ea6\u6162\u6216\u96be\u4ee5\u5904\u7406\u5927\u91cf\u6570\u636e\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u7531\u4e8e\u7f16\u5199\u7684\u4ee3\u7801\u6548\u7387\u8f83\u4f4e\u9020\u6210\u7684\u3002\u539f\u751fPython\u4ee3\u7801\u786e\u5b9e\u6bd4\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u8981\u6162\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u50cfPandas\u8fd9\u6837\u7684\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2aPython\u63a5\u53e3\u6765\u7f16\u8bd1\u4ee3\u7801\uff0c\u5e76\u4e14\u77e5\u9053\u5982\u4f55\u6b63\u786e\u4f7f\u7528\u8be5\u63a5\u53e3\uff0c\u8ba9\u6211\u4eec\u5145\u5206\u5229\u7528Pandas/Python\u3002\n\u718a\u732b\u548c\u5b83\u7684\u5e95\u5c42\u5e93Numpy\u4e00\u6837\uff0c\u6267\u884c\u77e2\u91cf\u5316\u64cd\u4f5c\u6bd4\u6267\u884c\u5faa\u73af\u66f4\u6709\u6548\u3002\u8fd9\u4e9b\u6548\u7387\u7684\u63d0\u9ad8\u5f52\u529f\u4e8e\u77e2\u91cf\u5316\u64cd\u4f5c\u662f\u901a\u8fc7C\u7f16\u8bd1\u4ee3\u7801\u6267\u884c\u7684\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u672c\u673aPython\u4ee3\u7801\u6267\u884c\u7684\u3002\u53e6\u4e00\u4e2a\u56e0\u7d20\u662f\u77e2\u91cf\u5316\u64cd\u4f5c\u80fd\u591f\u5728\u6574\u4e2a\u6570\u636e\u96c6\u4e0a\u64cd\u4f5c\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5f53\u65f6\u7684\u4e00\u4e2a\u5b50\u90e8\u5206\u3002\nApply\u63a5\u53e3\u5141\u8bb8\u901a\u8fc7\u4f7f\u7528CPython\u63a5\u53e3\u6267\u884c\u5faa\u73af\u6765\u83b7\u5f97\u4e00\u4e9b\u6548\u7387\uff1a\n\u4f46\u662f\uff0c\u5927\u90e8\u5206\u7684\u6027\u80fd\u63d0\u5347\u5c06\u4ece\u4f7f\u7528\u77e2\u91cf\u5316\u64cd\u4f5c\u672c\u8eab\u83b7\u5f97\uff0c\u65e0\u8bba\u662f\u76f4\u63a5\u5728\u718a\u732b\u4e2d\u4f7f\u7528\uff0c\u8fd8\u662f\u901a\u8fc7\u76f4\u63a5\u8c03\u7528\u5176\u5185\u90e8\u7684Numpy\u6570\u7ec4\u6765\u83b7\u5f97\u3002\n\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528\u77e2\u91cf\u5316\u64cd\u4f5c\u5904\u7406\u5b83(3.53ms)\u548c\u4f7f\u7528Apply\u8fdb\u884c\u52a0\u6cd5\u5faa\u73af(27.8s)\u4e4b\u95f4\u7684\u6027\u80fd\u5dee\u5f02\u53ef\u80fd\u975e\u5e38\u5927\u3002\u901a\u8fc7\u76f4\u63a5\u8c03\u7528NumPy\u7684\u6570\u7ec4\u548cAPI\u53ef\u4ee5\u83b7\u5f97\u989d\u5916\u7684\u6548\u7387\uff0c\u4f8b\u5982\uff1a\nSwifter\uff1aSwifter\u662f\u4e00\u4e2aPython\u5e93\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u5411\u91cf\u5316\u6570\u636e\u6846\u4e0a\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u64cd\u4f5c\uff0c\u5176API\u4e0eApply\u51fd\u6570\u7684API\u6709\u4e9b\u7c7b\u4f3c\u3002\n\u5728\u5c06\u6570\u636e\u5e27\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u65f6\uff0c\u65e0\u8bba\u662f\u901a\u8fc7READ_CSV\u3001READ_EXCEL\u6216\u5176\u4ed6\u6570\u636e\u5e27\u8bfb\u53d6\u51fd\u6570\uff0cPANDA\u90fd\u4f1a\u8fdb\u884c\u7c7b\u578b\u63a8\u65ad\uff0c\u8fd9\u53ef\u80fd\u88ab\u8bc1\u660e\u662f\u4f4e\u6548\u7684\u3002\u8fd9\u4e9bAPI\u5141\u8bb8\u60a8\u663e\u5f0f\u5730\u5229\u7528\u6570\u636e\u7c7b\u578b\u6307\u5b9a\u6bcf\u5217\u7684\u7c7b\u578b\u3002\u6307\u5b9adtype\u5141\u8bb8\u5728\u5185\u5b58\u4e2d\u66f4\u6709\u6548\u5730\u5b58\u50a8\u6570\u636e\u3002\nDtype\u662f\u6765\u81eaNumpy\u7684\u672c\u673a\u5bf9\u8c61\uff0c\u5b83\u5141\u8bb8\u60a8\u5b9a\u4e49\u7528\u4e8e\u5b58\u50a8\u67d0\u4e9b\u4fe1\u606f\u7684\u786e\u5207\u7c7b\u578b\u548c\u4f4d\u6570\u3002\n\u4f8b\u5982\uff0cNumpy\u7684\u7c7b\u578bnp.dtype(\u2018int32\u2019)\u5c06\u8868\u793a\u4e00\u4e2a32\u4f4d\u957f\u7684\u6574\u6570\u3002\u718a\u732b\u9ed8\u8ba4\u4e3a64\u4f4d\u6574\u6570\uff0c\u4f7f\u752832\u4f4d\u53ef\u4ee5\u8282\u7701\u4e00\u534a\u7684\u7a7a\u95f4\uff1a\nMEMORY_USAGE()\u663e\u793a\u6bcf\u5217\u4f7f\u7528\u7684\u5b57\u8282\u6570\uff0c\u56e0\u4e3a\u6bcf\u5217\u53ea\u6709\u4e00\u4e2a\u6761\u76ee(\u884c)\uff0c\u6240\u4ee5\u6bcf\u4e2aint64\u5217\u7684\u5927\u5c0f\u662f8\u5b57\u8282\uff0cint32\u662f4\u5b57\u8282\u3002\nPandas\u8fd8\u5f15\u5165\u4e86\u5206\u7c7bdtype\uff0c\u5b83\u5141\u8bb8\u5bf9\u9891\u7e41\u51fa\u73b0\u7684\u503c\u8fdb\u884c\u9ad8\u6548\u7684\u5185\u5b58\u5229\u7528\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u6211\u4eec\u5c06\u5b57\u6bb5POSTING_DATE\u8f6c\u6362\u4e3a\u5206\u7c7b\u503c\u65f6\uff0c\u5b83\u7684\u5185\u5b58\u4f7f\u7528\u7387\u964d\u4f4e\u4e8628\u500d\u3002\n\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u4ec5\u901a\u8fc7\u66f4\u6539\u6b64\u6570\u636e\u7c7b\u578b\uff0c\u6570\u636e\u5e27\u7684\u603b\u5927\u5c0f\u5c31\u51cf\u5c11\u4e863\u500d\u4ee5\u4e0a\uff1a\n\u4f7f\u7528\u6b63\u786e\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u4ec5\u5141\u8bb8\u60a8\u5728\u5185\u5b58\u4e2d\u5904\u7406\u8f83\u5927\u7684\u6570\u636e\u96c6\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u63d0\u9ad8\u67d0\u4e9b\u8ba1\u7b97\u7684\u6548\u7387\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528\u5206\u7c7b\u7c7b\u578b\u53ef\u4ee5\u5c06GROUPBY/SUM\u64cd\u4f5c\u7684\u901f\u5ea6\u63d0\u9ad83\u500d\u3002\n\u5728PANDA\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5728\u6570\u636e\u52a0\u8f7d\u671f\u95f4\u5b9a\u4e49\u6570\u636e\u7c7b\u578b(READ_)\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u5b9a\u4e49\u4e3a\u7c7b\u578b\u8f6c\u6362(ASTYPE)\u3002\nCyberPandas\uff1aCyber Pandas\u662f\u4e0d\u540c\u7684\u5e93\u6269\u5c55\u4e4b\u4e00\uff0c\u5b83\u652f\u6301IPv4\u548cIPv6\u6570\u636e\u7c7b\u578b\u5e76\u6709\u6548\u5730\u5b58\u50a8\u5b83\u4eec\uff0c\u4ece\u800c\u652f\u6301\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u7c7b\u578b\u3002\n\u718a\u732b\u5141\u8bb8\u4ee5\u5757\u4e3a\u5355\u4f4d\u52a0\u8f7d\u6570\u636e\u5e27\u4e2d\u7684\u6570\u636e\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u5e27\u4f5c\u4e3a\u8fed\u4ee3\u5668\u6765\u5904\u7406\uff0c\u5e76\u4e14\u80fd\u591f\u5904\u7406\u5927\u4e8e\u53ef\u7528\u5b58\u50a8\u5668\u7684\u6570\u636e\u5e27\u3002\n\u5728\u8bfb\u53d6\u6570\u636e\u6e90\u65f6\u5b9a\u4e49\u5757\u5927\u5c0f\u548cget_chunk\u65b9\u6cd5\u7684\u7ec4\u5408\u5141\u8bb8\u718a\u732b\u4f5c\u4e3a\u8fed\u4ee3\u5668\u5904\u7406\u6570\u636e\uff0c\u4f8b\u5982\u5728\u4e0a\u9762\u6240\u793a\u7684\u793a\u4f8b\u4e2d\uff0c\u6570\u636e\u5e27\u4e00\u6b21\u8bfb\u53d6\u4e24\u884c\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u8fd9\u4e9b\u5757\uff1a\n\u5bf9\u4e8edf_iter\u4e2d\u7684a\uff0ci=0\uff1a#do ome chunk=df_iter.get_chunk()i+=1new_chunk=chunk.Apply(\u03bbx\uff1ado_omething(X)\uff0cnew_chunk.to_csv(&#34\uff1bchunk_output_%i.csv&#34\uff1b=1)\u3002\n\u7136\u540e\u53ef\u4ee5\u5c06\u5176\u8f93\u51fa\u9988\u9001\u5230csv\u6587\u4ef6\u3001\u814c\u5236\u3001\u5bfc\u51fa\u5230\u6570\u636e\u5e93\u7b49\u3002\u2026\nDask\uff1a\u662f\u4e00\u4e2a\u6784\u5efa\u5728Pandas\u4e4b\u4e0a\u7684\u6846\u67b6\uff0c\u6784\u5efa\u65f6\u8003\u8651\u5230\u4e86\u591a\u5904\u7406\u548c\u5206\u5e03\u5f0f\u5904\u7406\u3002\u5b83\u5229\u7528\u5185\u5b58\u548c\u78c1\u76d8\u4e0a\u7684\u718a\u732b\u6570\u636e\u5e27\u5757\u96c6\u5408\u3002\n\u718a\u732b\u4e5f\u5efa\u7acb\u5728SQL\u70bc\u91d1\u672f\u7684\u57fa\u7840\u4e0a\uff0c\u4ee5\u4e0e\u6570\u636e\u5e93\u8fde\u63a5\u3002\u56e0\u6b64\uff0c\u5b83\u53ef\u4ee5\u4ece\u5404\u79cdSQL\u7c7b\u578b\u7684\u6570\u636e\u5e93\u4e0b\u8f7d\u6570\u636e\u96c6\uff0c\u5e76\u5411\u5176\u4e2d\u63a8\u9001\u8bb0\u5f55\u3002\u4f7f\u7528SQL\u70bc\u91d1\u672f\u63a5\u53e3\u800c\u4e0d\u662f\u718a\u732b\u7684API\u76f4\u63a5\u5141\u8bb8\u6211\u4eec\u6267\u884c\u67d0\u4e9b\u5728\u718a\u732b\u4e2d\u4e0d\u53d7\u672c\u5730\u652f\u6301\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u4e8b\u52a1\u6216upsert\uff1a\n\u718a\u732b\u8fd8\u53ef\u4ee5\u5229\u7528SQL\u4e8b\u52a1\u6765\u5904\u7406\u63d0\u4ea4\u548c\u56de\u6eda\u3002\u4f69\u5fb7\u7f57\u00b7\u5361\u4f69\u62c9\u65af\u7279\u5409(Pedro Capelastegui)\u5728\u4ed6\u7684\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u7279\u522b\u89e3\u91ca\u4e86\u718a\u732b\u5982\u4f55\u901a\u8fc7SQL\u70bc\u91d1\u672f\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5229\u7528\u4e8b\u52a1\u3002\n\u4f7f\u7528SQL\u4e8b\u52a1\u7684\u4f18\u52bf\u5728\u4e8e\uff0c\u5982\u679c\u6570\u636e\u52a0\u8f7d\u5931\u8d25\uff0c\u4e8b\u52a1\u5c06\u56de\u6eda\u3002\nPandas\u6709\u4e00\u4e9bSQL\u6269\u5c55\uff0c\u6bd4\u5982Pandasql\uff0c\u8fd9\u662f\u4e00\u4e2a\u5141\u8bb8\u5728\u6570\u636e\u5e27\u4e0a\u6267\u884cSQL\u67e5\u8be2\u7684\u5e93\u3002\u901a\u8fc7panasql\uff0c\u53ef\u4ee5\u50cf\u67e5\u8be2\u6570\u636e\u5e93\u8868\u4e00\u6837\u67e5\u8be2\u6570\u636e\u6846\u5bf9\u8c61\u3002\nPANDA\u672c\u8eab\u4e0d\u652f\u6301\u5728\u652f\u6301\u6b64\u529f\u80fd\u7684\u6570\u636e\u5e93\u4e0a\u5411\u4e0a\u63d2\u5165\u5230SQL\u7684\u5bfc\u51fa\u3002\u718a\u732b\u7684\u8865\u4e01\u5b58\u5728\uff0c\u4ee5\u5141\u8bb8\u8fd9\u4e00\u529f\u80fd\u3002\n\u6709\u4e9bData Frame API\u5df2\u7ecf\u96c6\u6210\u4e86Matplotlib\u548cSeborn\uff0c\u4f8b\u5982.lot\u547d\u4ee4\u3002\u5728\u718a\u732b\u7684\u7f51\u7ad9\u4e0a\uff0c\u6709\u4e00\u4e2a\u76f8\u5f53\u5168\u9762\u7684\u5173\u4e8e\u754c\u9762\u5982\u4f55\u5de5\u4f5c\u7684\u6587\u6863\u3002\n\u6269\u5c55\uff1a\u5b58\u5728\u4e0d\u540c\u7684\u6269\u5c55\uff0c\u5982Bokeh\u548cPloly\uff0c\u7528\u4e8e\u5728Jupyter\u7b14\u8bb0\u672c\u4e2d\u63d0\u4f9b\u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u6269\u5c55matplotlib\u4ee5\u5904\u74063D\u56fe\u5f62\u3002\n\u718a\u732b\u8fd8\u6709\u76f8\u5f53\u591a\u7684\u5176\u4ed6\u6269\u5c55\uff0c\u5b83\u4eec\u662f\u7528\u6765\u5904\u7406\u975e\u6838\u5fc3\u529f\u80fd\u7684\u3002\u5176\u4e2d\u4e4b\u4e00\u662ftqdm\uff0c\u5b83\u4e3a\u67d0\u4e9b\u64cd\u4f5c\u63d0\u4f9b\u4e86\u8fdb\u5ea6\u6761\u529f\u80fd\uff1b\u53e6\u4e00\u4e2a\u662fPretty Pandas\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u683c\u5f0f\u5316\u6570\u636e\u5e27\u5e76\u6dfb\u52a0\u6458\u8981\u4fe1\u606f\u3002\ntqdm\u662fPython\u4e2d\u4e0e\u718a\u732b\u4ea4\u4e92\u7684\u8fdb\u5ea6\u6761\u6269\u5c55\u3002\u7528\u6237\u5728\u4f7f\u7528\u76f8\u5173\u51fd\u6570(PROGRESS_MAP\u548cPROGRESS_APPLY)\u65f6\uff0c\u53ef\u4ee5\u770b\u5230\u5730\u56fe\u7684\u8fdb\u5ea6\uff0c\u5e76\u5bf9\u718a\u732b\u6570\u636e\u6846\u8fdb\u884c\u64cd\u4f5c\uff1a\nPrettyPandas\u662f\u4e00\u4e2a\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u683c\u5f0f\u5316\u6570\u636e\u6846\u5e76\u5411\u5176\u4e2d\u6dfb\u52a0\u8868\u683c\u6458\u8981\uff1a", "note_en": "The pandas library is the most popular data manipulation library for Python. It provides an easy way to manipulate data through its data-frame API, inspired by R\u2019s data frames.\n   One of the keys to getting a good understanding of pandas, is to understand that pandas are mostly a wrapper around a series of other python libraries. The main ones being Numpy, SQL alchemy, Matplot lib, and openpyxl.\n The core internal model of the data frame is a series of NumPy arrays, and pandas functions, such as the now deprecated \u201cas_matrix\u201d function, which return results in NumPy\u2019s  internal representation.\n Pandas leverages other libraries to get data in and out of data-frames. SQL Alchemy, for instance, is used through the read_sql, and to_sql functions while openpyxl and xlsx writer are used for read_excel and to_excel functions.\n Matplotlib and Seaborn, in turn, are used to provide an easy interface, to plot information available within a data frame, using a command such as df.plot()\n  One of the complaints that you often hear is that Python is slow or that it is difficult to handle large amounts of data. Most often than not, this is due to the poor efficiency of the code written. Native Python code indeed tends to be slower than compiled code. Still, libraries like Pandas provides a python interface to compiled code and knowing how to use this interface properly, let us get the best out of pandas/python.\n  Pandas, like its underlying library Numpy, performs vectorized operations more efficiently than performing loops. These efficiencies are due to vectorized operations are performed through C compiled code, rather than native python code. Another factor is the ability of vectorized operations to operate on entire datasets rather than just a sub-portion at the time.\n The apply interface allows to gain some of the efficiency by using a CPython interface to do the looping:\n  But most of the performance gain would be obtained from the use of vectorized operation themselves, be it directly in pandas or by calling its\u2019 internal Numpy arrays directly.\n  As you can see from the picture above, the difference in performance can be drastic, between processing it with a vectorized operation (3.53ms) and looping with apply to do an addition (27.8s). Additional efficiencies can be obtained by directly invoking the NumPy\u2019s arrays and API, e.g.:\n  Swifter: swifter is a python library that makes it easy to vectorize different types of operations on a data frame, its API is somewhat similar to that of the apply function\n   When loading a data-frame into memory, be it through read_csv, or read_excel or some other data-frame read function, pandas makes type inference, which might prove to be inefficient. These APIs allow you to specify the types of each column explicitly leveraging dtypes. Specifying dtypes allows for a more efficient storage of data in memory.\n  Dtypes are native objects from  Numpy, which allows you to define the exact type and number of bits used to store certain pieces of information.\n Numpy\u2019s type  np.dtype(\u2018int32\u2019) would, for instance, represent a 32 bits long integer. Pandas default to 64 bits integer, we could save half the space by using 32 bits:\n  memory_usage() shows the number of bytes used by each of the columns, since there is only one entry (row) per column, the size of each int64 column is 8bytes and of int32 4bytes.\n Pandas also introduces the categorical dtype, that allows for efficient memory utilization for frequently occurring values. In the example below, we can see a 28x decrease in memory utilization for the field posting_date when we converted it to a categorical value.\n  In our example, the overall size of the data-frame drops by more than 3X by just changing this data type:\n  Not only using the right dtypes allows you to handle larger datasets in memory, but it also makes some computations more efficient. In the example below, we can see that using the categorical type brought a 3X speed improvement for the groupby / sum operation.\n  Within pandas, you can define the dtypes, either during the data load (read_ ) or as a type conversion (astype).\n CyberPandas:  Cyber pandas is one of the different library extension that enables a wider variety of data types by supporting ipv4 and ipv6 data types and storing them efficiently.\n  Pandas allows for the loading of data in a data-frame by chunks. It is, therefore, possible to process data-frames as iterators and be able to handle data-frames larger than the available memory.\n  The combination of defining a chunk size when reading a data source and the get_chunk method allows pandas to process data as an  iterator, such as in the example shown above, where the data frame is read two rows at the time. We can then iterate through these chunks:\n i = 0 for a in df_iter:  # do some processing chunk = df_iter.get_chunk()  i += 1  new_chunk = chunk.apply(lambda x: do_something(x), axis=1)  new_chunk.to_csv(&#34;chunk_output_%i.csv&#34; % i )\n The output of which can then be fed to a CSV file, pickled, exported to a database, etc.\u2026\n  Dask:  is a framework built on top of Pandas and build with multi-processing and distributed processing in mind. It makes use of collections of chunks of pandas data-frames both in memory and on disk.\n  Pandas also is built up on top of SQL Alchemy to interface with databases. As such, it can download datasets from diverse SQL types of databases as well as push records to it. Using the SQL Alchemy interface rather than the Pandas\u2019 API directly allows us to do certain operations not natively supported within pandas such as transactions or upserts:\n  Pandas can also make use of SQL transactions, handling commits and rollbacks. Pedro Capelastegui explained in one of his blog posts,  notably, how pandas could take advantage of transactions through a SQL alchemy context manager.\n  The advantage of using a SQL transaction, is the fact that the transaction would roll back should the data load fail.\n   Pandas has a few SQL extension such as  pandasql a library that allows to perform SQL queries on top of data-frames. Through pandasql, the data-frame object can be queried as if they were database tables.\n   Pandas doesn\u2019t natively support upsert exports to SQL on databases supporting this function.  Patches to pandas exist to allow this feature.\n  Some of the data frame API already integrate Matplotlib and Seaborn, such as the .plot command. There is a reasonably comprehensive documentation as to how the interface works, on  pandas\u2019 website.\n Extensions: Different extensions exist, such as Bokeh and Plotly, to provide interactive visualization within Jupyter notebooks, while it is also possible to extend matplotlib to handle  3D graphs.\n  Quite a few other extensions for pandas exist, which are there to handle no-core functionalities. One of them is tqdm, which provides a progress bar functionality for certain operations; another is pretty pandas, which allows us to format data frames and add summary informations.\n  tqdm is a progress bar extension in Python that interacts with pandas. It will enable the user to see the progress of maps and apply operations on pandas data frame when using the relevant function (progress_map and progress_apply):\n   PrettyPandas is a library that provides an easy way to format data-frames and to add table summaries to them:", "posttime": "2020-07-06 03:01:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,pandas,\u6570\u636e", "title": "\u6210\u4e3aPython\u6570\u636e\u64cd\u4f5c\u5e93Pandas\u7684\u4e13\u4e1a\u4eba\u58eb", "title_en": "Become a Pro at Pandas, Python\u2019s Data Manipulation Library", "transed": 1, "url": "https://medium.com/analytics-and-data/become-a-pro-at-pandas-pythons-data-manipulation-library-264351b586b1", "via": "", "real_tags": ["python", "pandas", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "7224e7140ae938a3866f91c5ccb3d781.jpeg", "infoid": 1009969, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "FarmBot\u662f\u4eba\u4eec\u5728\u51e0\u4e4e\u4efb\u4f55\u540e\u9662\u79cd\u690d\u852c\u83dc\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f46\u5b83\u4e5f\u50cf\u4e00\u6b3e\u7535\u5b50\u6e38\u620f\u3002\u5728\u4ecb\u7ecd\u4e86FarmBot\u6709\u53f2\u4ee5\u6765\u6700\u5927\u7684\u4e24\u4e2a\u5de5\u5177\u5305\u540e\uff0cFarmBot\u8868\u793a\uff0c\u5b83\u5df2\u7ecf\u88ab\u6210\u5343\u4e0a\u4e07\u7684\u513f\u7ae5\u3001\u5bb6\u5ead\u548c\u79d1\u5b66\u5bb6\u4f7f\u7528\u3002\n\u8fd9\u4e2a\u60f3\u6cd5\u662f\u4e00\u4e2a\u9ad8\u79d1\u6280\u82b1\u56ed\u6216\u5c0f\u519c\u573a\uff0c\u53ef\u4ee5\u76d1\u63a7\u690d\u7269\u7684\u51e0\u4e4e\u6bcf\u4e00\u4e2a\u65b9\u9762\uff0c\u540c\u65f6\u50cf\u6e38\u620f\u4e00\u6837\u63a7\u5236\u5b83\u4eec\u30023D\u6253\u5370\u7684\u673a\u5668\u4eba\u624b\u81c2\u79cd\u690d\u852c\u83dc\uff0c\u7ed9\u852c\u83dc\u6d47\u6c34\uff0c\u76d1\u6d4b\u571f\u58e4\u72b6\u51b5\uff0c\u5e76\u62cd\u6444\u56fe\u50cf\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u519c\u6c11\u53ef\u4ee5\u901a\u8fc7\u5e26\u6709\u865a\u62df\u82b1\u56ed\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u6240\u6709\u5de5\u5177\uff0c\u5176\u529f\u80fd\u6709\u70b9\u50cf\u519c\u573a\u6a21\u62df\u5668\u89c6\u9891\u6e38\u620fStardew Valley\u6709\u4e00\u4e2a\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u540c\u4f34\u3002\n\u6240\u6709\u7684FarmBot\u4ea7\u54c1\u4e5f\u662f\u5b8c\u5168\u5f00\u6e90\u7684\uff0c\u660e\u786e\u9f13\u52b1\u4e70\u5bb63D\u6253\u5370\u81ea\u5df1\u7684\u4f5c\u54c1\u6216\u8fdb\u884c\u4ed6\u4eec\u80fd\u60f3\u5230\u7684\u4efb\u4f55\u5176\u4ed6\u4fee\u6539\u3002\n\u70b9\u51fb\u201c\u6ce8\u518c\u201d\uff0c\u5373\u8868\u793a\u60a8\u540c\u610f\u63a5\u6536\u6765\u81eaBusiness Insider\u7684\u8425\u9500\u7535\u5b50\u90ae\u4ef6\u4ee5\u53ca\u5176\u4ed6\u5408\u4f5c\u4f19\u4f34\u4f18\u60e0\uff0c\u5e76\u63a5\u53d7\u6211\u4eec\u7684\u670d\u52a1\u6761\u6b3e\u548c\u9690\u79c1\u653f\u7b56\u3002", "note_en": "FarmBot is a way for people to grow vegetables in almost any backyard, but it&#39;s also like a video game. After introducing it&#39;s two largest kits ever, FarmBot says it has been used by thousands of children, families, and scientists.\n The idea is a high-tech garden or small farm that can monitor just about every aspect of plants while controlling them like a game. A 3D printed robot arm plants vegetables, waters them, monitors soil conditions, and captures images. Meanwhile, the farmer can control all the tools from a web app with a virtual garden that functions a bit like if\u00a0 the farm simulator video game &#34;Stardew Valley&#34; had a real-life companion.\n All FarmBot products are also completely open source, with explicit encouragement for buyers to 3D print their own pieces or make any other modifications they can think of.\n  By clicking \u2018Sign up\u2019, you agree to receive marketing emails from Business Insider as well as other partner offers and accept our  Terms of Service and  Privacy Policy.", "posttime": "2020-07-06 02:43:27", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6e38\u620f,\u81ea\u52a8,automates,farmbot", "title": "FarmBot\u81ea\u52a8\u7167\u6599\u3001\u9664\u8349\u548c\u7ed9\u82b1\u56ed\u6d47\u6c34\uff0c\u5c31\u50cf\u73a9\u89c6\u9891\u6e38\u620f\u4e00\u6837\u5bb9\u6613\u517b\u6d3b\u4e00\u4e2a4\u53e3\u4e4b\u5bb6-\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\u8fd9\u6837\u7684", "title_en": "FarmBot automates tending, weeding, and watering a garden and makes it as easy as playing a video game to feed a family of 4 \u2014 here's how it works", "transed": 1, "url": "https://www.businessinsider.com/farmbot-automated-farm-kits-controlled-through-app-2020-6", "via": "", "real_tags": ["\u6e38\u620f", "\u81ea\u52a8", "automates", "farmbot"]}, {"category": "", "categoryclass": "", "imagename": "bcb518387d04f618d78ee9693dd05e1f.jpg", "infoid": 1009968, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ebd\u7ea6(CNN\u5546\u4e1a\u62a5\u9053)\u592a\u9633\u80fd\u548c\u98ce\u80fd\u6b63\u5728\u84ec\u52c3\u53d1\u5c55\u3002\u7535\u52a8\u6c7d\u8f66\u524d\u666f\u770b\u597d\uff0c\u4ee5\u81f3\u4e8e\u7279\u65af\u62c9\u73b0\u5728\u7684\u4ef7\u503c\u8d85\u8fc7\u4e86\u57c3\u514b\u68ee\u7f8e\u5b5a(ExxonMobil)\u3002\u7164\u6b63\u5728\u584c\u9677\u3002\n\u7136\u800c\uff0c\u80fd\u6e90\u76d1\u7763\u673a\u6784\u8b66\u544a\u8bf4\uff0c\u5728\u5e94\u5bf9\u6c14\u5019\u5371\u673a\u65b9\u9762\u505a\u5f97\u8fd8\u8fdc\u8fdc\u4e0d\u591f\u3002\n\u5468\u56db\uff0c\u56fd\u9645\u80fd\u6e90\u7f72\u5c31\u8fc5\u901f\u52a0\u5feb\u6e05\u6d01\u80fd\u6e90\u521b\u65b0\u7684\u8feb\u5207\u9700\u8981\u6572\u54cd\u4e86\u8b66\u949f\u3002\u8fd9\u662f\u56e0\u4e3a\u4e16\u754c\u5404\u56fd\u653f\u5e9c\u548c\u516c\u53f8\u5236\u5b9a\u7684\u6c14\u5019\u76ee\u6807\u4f9d\u8d56\u4e8e\u5c1a\u672a\u4e0a\u5e02\u7684\u6280\u672f\u3002\n\u56fd\u9645\u80fd\u6e90\u7f72\u6267\u884c\u4e3b\u4efb\u6cd5\u63d0\u8d6b\u00b7\u6bd4\u7f57\u5c14(Fatih Birol)\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff1a\u4fe1\u606f\u975e\u5e38\u660e\u786e\uff1a\u5982\u679c\u6ca1\u6709\u66f4\u5feb\u7684\u6e05\u6d01\u80fd\u6e90\u521b\u65b0\uff0c\u57282050\u5e74\u5b9e\u73b0\u51c0\u96f6\u76ee\u6807\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e16\u754c\u7ecf\u6d4e\u7684\u4e3b\u8981\u90e8\u5206\u8fd8\u6ca1\u6709\u6e05\u6d01\u80fd\u6e90\u7684\u9009\u62e9\u3002\u7535\u529b\u516c\u53f8\u6b63\u5728\u629b\u552e\u7164\u70ad\uff0c\u8f6c\u800c\u4f7f\u7528\u4ef7\u683c\u8d8a\u6765\u8d8a\u5b9e\u60e0\u7684\u592a\u9633\u80fd\u548c\u98ce\u80fd\u3002\u6240\u6709\u4e3b\u8981\u6c7d\u8f66\u5236\u9020\u5546\u90fd\u5728\u7ade\u76f8\u5f00\u53d1\u6700\u597d\u7684\u7535\u52a8\u6c7d\u8f66\uff0c\u4e0e\u7279\u65af\u62c9\u7ade\u4e89\u3002\n\u7136\u800c\uff0c\u56fd\u9645\u80fd\u6e90\u7f72\u8868\u793a\uff0c\u5728\u822a\u8fd0\u3001\u5361\u8f66\u8fd0\u8f93\u548c\u822a\u7a7a\u7b49\u9886\u57df\uff0c\u51e0\u4e4e\u6ca1\u6709\u53ef\u7528\u7684\u6280\u672f\u5c06\u6392\u653e\u964d\u81f3\u96f6\u3002\u94a2\u94c1\u3001\u6c34\u6ce5\u548c\u5316\u5de5\u7b49\u91cd\u5de5\u4e1a\u4e5f\u5b58\u5728\u540c\u6837\u7684\u95ee\u9898\u3002\n\u62a5\u544a\u79f0\uff0c\u8981\u5b9e\u73b0\u8fd9\u4e9b\u9886\u57df\u7684\u8131\u78b3\uff0c\u5f88\u5927\u7a0b\u5ea6\u4e0a\u9700\u8981\u5f00\u53d1\u76ee\u524d\u5c1a\u672a\u6295\u5165\u5546\u4e1a\u4f7f\u7528\u7684\u65b0\u6280\u672f\u3002\n\u8fd9\u4e0d\u662f\u704c\u7bee\u3002\u5b83\u82b1\u4e86\u51e0\u5341\u5e74\u7684\u65f6\u95f4\u6765\u6269\u5927\u592a\u9633\u80fd\u7535\u6c60\u677f\u548c\u7535\u6c60\u7684\u89c4\u6a21\uff0c\u4f7f\u5b83\u4eec\u53d8\u5f97\u7ecf\u6d4e\u3002\u5728\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\uff0c\u8bb8\u591a\u6280\u672f\u90fd\u5931\u8d25\u4e86\u3002\n\u53bb\u5e74\u5e74\u5e95\uff0c\u6bd4\u5c14\u00b7\u76d6\u8328(Bill Gates)\u652f\u6301\u7684\u6e05\u6d01\u80fd\u6e90\u521d\u521b\u516c\u53f8Heliogen\u53d1\u73b0\u4e86\u4e00\u79cd\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u548c\u4e00\u7247\u955c\u5b50\u4ece\u592a\u9633\u4ea7\u751f\u6781\u5927\u91cf\u70ed\u91cf\u7684\u65b9\u6cd5\u3002\u5176\u76ee\u6807\u662f\u5728\u67d0\u4e9b\u91cd\u6c61\u67d3\u7684\u5de5\u4e1a\u8fc7\u7a0b\u4e2d\uff0c\u5982\u5236\u9020\u6c34\u6ce5\u3001\u73bb\u7483\u548c\u94a2\u94c1\uff0c\u4f7f\u7528\u8fd9\u79cd\u65e0\u78b3\u9633\u5149\u6765\u53d6\u4ee3\u5316\u77f3\u71c3\u6599\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u56fd\u9645\u80fd\u6e90\u7f72\u8868\u793a\uff0c\u8981\u8ba9\u4e16\u754c\u8d70\u4e0a\u53ef\u6301\u7eed\u7684\u51c0\u96f6\u6392\u653e\u9053\u8def\uff0c\u6ca1\u6709\u5355\u4e00\u6216\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u62a5\u544a\u79f0\uff0c\u8981\u8d70\u4e0a\u8fd9\u6761\u9053\u8def\uff0c\u7d2f\u8ba1\u51cf\u5c11\u7684\u78b3\u6392\u653e\u4e2d\uff0c\u7ea6\u56db\u5206\u4e4b\u4e09\u9700\u8981\u6765\u81ea\u5c1a\u672a\u5b8c\u5168\u6210\u719f\u7684\u6280\u672f\u3002\n\u4f8b\u5982\uff0c\u5c3d\u7ba1\u7535\u6c60\u6280\u672f\u6709\u4e86\u5f88\u5927\u7684\u53d1\u5c55\uff0c\u4f46\u56fd\u9645\u80fd\u6e90\u7f72\u8868\u793a\uff0c\u9700\u8981\u5feb\u901f\u8fdb\u6b65\u624d\u80fd\u5c06\u7535\u6c60\u539f\u578b\u8f6c\u53d8\u4e3a\u6ee1\u8db3\u4e16\u754c\u957f\u9014\u8fd0\u8f93\u9700\u6c42\u7684\u7535\u6c60\u539f\u578b\u3002\n\u7136\u800c\uff0c\u516c\u53f8\u6216\u516c\u5171\u90e8\u95e8\u6ca1\u6709\u8db3\u591f\u7684\u8d44\u91d1\u7528\u4e8e\u7814\u7a76\u4e0b\u4e00\u4ee3\u80fd\u6e90\u89e3\u51b3\u65b9\u6848\u3002\n\u56fd\u9645\u80fd\u6e90\u7f72\u7684\u6bd4\u7f57\u5c14\u8868\u793a\uff0c\u653f\u5e9c\u548c\u516c\u53f8\u4e3a\u81ea\u5df1\u8bbe\u5b9a\u7684\u6c14\u5019\u76ee\u6807\uff0c\u4e0e\u4e3a\u5b9e\u73b0\u8fd9\u4e9b\u76ee\u6807\u800c\u5f00\u53d1\u66f4\u597d\u3001\u66f4\u4fbf\u5b9c\u7684\u6280\u672f\u7684\u52aa\u529b\u4e4b\u95f4\u5b58\u5728\u8131\u8282\u3002\n\u5c3d\u7ba1\u793e\u4f1a\u8ddd\u79bb\u548c\u5065\u5eb7\u9650\u5236\u5bfc\u81f4\u78b3\u6392\u653e\u5927\u5e45\u4e0b\u964d\uff0c\u4f46\u80fd\u6e90\u6295\u8d44\u4e5f\u5728\u5927\u5e45\u4e0b\u964d\u3002IEA\u6b64\u524d\u4f30\u8ba1\uff0c\u4eca\u5e74\u80fd\u6e90\u884c\u4e1a\u652f\u51fa\u6599\u9aa4\u964d\u521b\u7eaa\u5f55\u76844,000\u4ebf\u7f8e\u5143\uff0c\u621620%\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u5bf9\u7ecf\u6d4e\u672a\u6765\u7684\u8d28\u7591\uff0c\u7279\u522b\u662f\u80fd\u6e90\u548c\u4ea4\u901a\u884c\u4e1a\uff0c\u5c06\u4f7f\u521d\u521b\u4f01\u4e1a\u66f4\u96be\u5438\u5f15\u8d44\u672c\u3002\u6b63\u5728\u52aa\u529b\u5e94\u5bf9\u5065\u5eb7\u548c\u7ecf\u6d4e\u5371\u673a\u53cc\u91cd\u5371\u673a\u7684\u653f\u5e9c\u53ef\u80fd\u4f1a\u53d7\u5230\u8bf1\u60d1\uff0c\u5728\u6070\u597d\u9519\u8bef\u7684\u65f6\u95f4\u5c06\u8d44\u91d1\u4ece\u5f00\u53d1\u6e05\u6d01\u80fd\u6e90\u4e0a\u8f6c\u79fb\u51fa\u6765\u3002\n\u56fd\u9645\u80fd\u6e90\u7f72\u7684\u62a5\u544a\u79f0\uff0c\u5982\u679c\u73b0\u5728\u4e0d\u80fd\u52a0\u5feb\u8fdb\u5c55\uff0c\u5c31\u6709\u53ef\u80fd\u5c06\u5411\u51c0\u96f6\u6392\u653e\u7684\u8fc7\u6e21\u8fdb\u4e00\u6b65\u63a8\u5411\u672a\u6765\u3002", "note_en": "New York (CNN Business)Solar and wind power are  booming. Electric vehicles are so promising that  Tesla is now worth more than ExxonMobil. Coal is collapsing.\n And yet energy watchdogs are warning that  not nearly enough is being done to fight the climate crisis.\n The International Energy Agency sounded the alarm Thursday about the &#34;critical need&#34; to rapidly accelerate clean energy innovation. That&#39;s because the climate goals set by governments and corporations around the world depend on technologies that have not yet reached the market.\n    &#34;The message is very clear: in the absence of much faster clean energy innovation, achieving net-zero goals in 2050 will be all but impossible,&#34; Fatih Birol, the IEA&#39;s executive director, said in a statement.\n Major parts of the world economy don&#39;t have clean energy options as yet. Power companies are dumping coal in favor of increasingly affordable solar and wind power. And all the major auto makers are racing to develop the best electric vehicles to compete with Tesla.\n  Yet there are few technologies available to bring emissions down to zero in areas such as shipping, trucking and aviation, the IEA said. The same problem exists in heavy industries like steel, cement and chemicals.\n &#34;Decarbonizing these sectors will largely require the development of new technologies that are not currently in commercial use,&#34; the report said.\n And that is no slam dunk. It took decades to scale up solar panels and batteries to make them economical. And plenty of technologies failed along the way.\n    Late last year, Heliogen, a  clean energy startup backed by Bill Gates, discovered a way to use artificial intelligence and a field of mirrors to generate extreme amounts of heat from the sun. The goal is to use that carbon-free sunlight to replace fossil fuels in certain heavy pollution industrial processes, such as making cement, glass and steel.\n Still, the IEA said there are &#34;no single or simple solutions to putting the world on a sustainable path to net-zero emissions.&#34;\n  About three-quarters of the cumulative reductions in carbon emissions to get on that path will need to come from technologies that have &#34;not yet reached full maturity,&#34; the report said.\n For instance, while battery technology has evolved significantly, the IEA said &#34;rapid progress&#34; is required to transition battery prototypes to the world&#39;s long-distance transportation needs.\n Yet there isn&#39;t enough money being deployed by corporations or the public sector toward researching next-generation energy solutions.\n &#34;There is a disconnect between the climate goals that governments and companies have set for themselves and the efforts underway to develop better and cheaper technologies to realize those goals,&#34; the IEA&#39;s Birol said.\n   Although social distancing and health restrictions are causing carbon emissions to tumble, investment in energy is also falling sharply. Spending in the energy industry is expected to  plunge by a record $400 billion, or 20%, this year, the IEA previously estimated.\n    At the same time, questions about the future of the economy, especially the energy and transportation sectors, will make it harder for startups to attract capital. Governments grappling with dual  health and  economic crises may be tempted to divert money away from developing clean energy at exactly the wrong time.\n &#34;Failure to accelerate progress now,&#34; the IEA report said, &#34;risks pushing the transition to net-zero emissions further into the future.&#34;", "posttime": "2020-07-06 02:42:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e16\u754c,won,\u80fd\u6e90", "title": "\u9664\u975e\u80fd\u6e90\u521b\u65b0\u8fc5\u901f\u52a0\u901f\uff0c\u5426\u5219\u4e16\u754c\u4e0d\u4f1a\u5b9e\u73b0\u6c14\u5019\u76ee\u6807", "title_en": "The world won't hit climate goals unless energy innovation rapidly accelerated", "transed": 1, "url": "https://www.cnn.com/2020/07/02/business/climate-change-clean-energy-iea/index.html", "via": "", "real_tags": ["\u4e16\u754c", "won", "\u80fd\u6e90"]}, {"category": "", "categoryclass": "", "imagename": "9f85206018e1310c45116b314cb6df27.jpg", "infoid": 1009967, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u5468\uff0c\u5fae\u8f6f\u53d1\u5e03\u4e86\u4e00\u4e2a\u65b0\u7684\u535a\u5ba2\uff0c\u4e13\u95e8\u4ecb\u7ecdWindows\u5185\u6838\u7684\u5185\u90e8\u7ed3\u6784\u3002\u8be5\u535a\u5ba2\u7684\u76ee\u7684\u662f\u8de8\u5404\u79cd\u67b6\u6784\u6df1\u5165\u7814\u7a76\u5185\u6838\uff0c\u5e76\u6df1\u5165\u7814\u7a76\u5185\u6838\u3001\u7ec4\u4ef6\u3001\u7ec4\u7ec7\u7b49\u5143\u7d20\uff0c\u5728\u672c\u6587\u4e2d\uff0c\u91cd\u70b9\u653e\u5728\u8c03\u5ea6\u5668\u4e0a\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\u5f00\u53d1\u8fd9\u4e2a\u535a\u5ba2\uff0c\u6df1\u5165\u4e86\u89e3\u5e55\u540e\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u4ee5\u53ca\u5b83\u505a\u8fd9\u4e9b\u4e8b\u60c5\u7684\u539f\u56e0\u3002\u7136\u800c\uff0c\u6211\u4eec\u5bf9\u5fae\u8f6f\u770b\u8d77\u6765\u6b63\u5728\u5f00\u53d1\u7684\u4e00\u4e2a\u5927\u7cfb\u7edf\u6709\u4e86\u4e00\u4e2a\u521d\u6b65\u4e86\u89e3\u3002\n\u5bf9\u4e8e\u90a3\u4e9b\u60f3\u770b\u535a\u5ba2\u7684\u4eba\u6765\u8bf4\uff0c\u5b83\u771f\u7684\u5f88\u68d2\u3002\u8bf7\u770b\u8fd9\u91cc\uff1a\n\u5728\u8ba8\u8bbaWindows\u7684\u53ef\u4f38\u7f29\u6027\u65f6\uff0cWindows\u6838\u5fc3\u5185\u6838\u5e73\u53f0\u7684\u9996\u5e2d\u7a0b\u5e8f\u7ecf\u7406Hari Pulapaka\u5c55\u793a\u4e86\u4efb\u52a1\u7ba1\u7406\u5668\u7684\u5c4f\u5e55\u622a\u56fe\uff0c\u8be5\u622a\u56fe\u6765\u81ea\u4ed6\u6240\u63cf\u8ff0\u7684\u8fd0\u884cWindows\u7684\u201c\u9884\u53d1\u5e03Windows\u6570\u636e\u4e2d\u5fc3\u7c7b\u673a\u5668\u201d\u3002\u56fe\u7247\u5982\u4e0b\uff1a\n\u5982\u679c\u60a8\u5bf9\u4efb\u52a1\u7ba1\u7406\u5668\u4e2d\u7684\u7ebf\u7a0b\u6570\u91cf\u5e76\u4e0d\u611f\u5230\u60ca\u8bb6\uff0c\u60a8\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\uff0c\u5728\u4efb\u52a1\u7ba1\u7406\u5668\u7684\u4fa7\u9762\u6709\u4e00\u4e2a\u6eda\u52a8\u6761\u3002\u6ca1\u9519\uff1a\u5728\u542f\u7528\u8d85\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\uff0c896\u4e2a\u5185\u6838\u610f\u5473\u77401792\u4e2a\u7ebf\u7a0b\uff0c\u8fd9\u5bf9\u4e8e\u4efb\u52a1\u7ba1\u7406\u5668\u6765\u8bf4\u592a\u591a\u4e86\uff0c\u65e0\u6cd5\u540c\u65f6\u663e\u793a\uff0c\u800c\u4e14\u8fd9\u79cd\u65b0\u578b\u7684\u201c\u6570\u636e\u4e2d\u5fc3\u7c7b\u673a\u5668\u201d\u770b\u8d77\u6765\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7ebf\u7a0b\u3002\u4f46\u662f\uff0c\u9664\u4e86\u6bcf\u4e2a\u7ebf\u7a0b100%\u52a0\u8f7d\u4e4b\u5916\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u771f\u6b63\u770b\u5230\u7684\u662f\u4ec0\u4e48\u5462\uff1f\n\u56e0\u6b64\uff0c\u9996\u5148\u5217\u51fa\u7684CPU\u662f\u81f3\u5f3a\u767d\u91d18180\uff0c\u8fd9\u662f\u82f1\u7279\u5c14\u5185\u6838\u6570\u91cf\u6700\u9ad8\u3001\u6027\u80fd\u6700\u9ad8\u7684Xeon Scalable\u2018Skylake-SP\u2019\u5904\u7406\u5668\u3002\u5b83\u670928\u4e2a\u5185\u6838\u548c56\u4e2a\u7ebf\u7a0b\uff0c\u901a\u8fc7\u6570\u5b66\u8ba1\u7b97\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a32\u63d2\u69fd\u7cfb\u7edf\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u6240\u6709\u4ee5100%\u901f\u5ea6\u8fd0\u884c\u7684\u7ebf\u7a0b\u4e0b\u9762\u7684\u51f8\u5757\u4e2d\uff0c\u5b57\u9762\u4e0a\u5199\u7740\u201c\u5957\u63a5\u5b57\uff1a32\u201d\u3002\u8fd9\u662f32\u4e2a\u5b8c\u6574\u768428\u6838\u5904\u7406\u5668\uff0c\u5728\u4e00\u4e2a\u7248\u672c\u7684Windows\u4e0b\u4e00\u8d77\u8fd0\u884c\u3002\u540c\u6837\uff0c\u95ee\u9898\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff1f\n\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u82f1\u7279\u5c14\u6700\u591a\u53ea\u5bf98\u4e2a\u63d2\u69fd\u4f7f\u7528\u81f3\u5f3a\u767d\u91d1\u5904\u7406\u5668\u8fdb\u884c\u8bc4\u7ea7\u3002\u5b83\u901a\u8fc7\u6bcf\u4e2a\u5904\u7406\u5668\u4f7f\u7528\u4e09\u4e2aQPI\u94fe\u8def\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4ee5\u5f62\u6210\u53cc\u76d2\u914d\u7f6e\u3002Xeon Gold 6100\u7cfb\u5217\u6700\u591a\u652f\u6301\u56db\u4e2a\u63d2\u5ea7\u548c\u4e09\u4e2aQPI\u94fe\u8def\uff0c\u786e\u4fdd\u6bcf\u4e2a\u5904\u7406\u5668\u5f7c\u6b64\u94fe\u63a5\uff0c\u7136\u540e\u8be5\u7cfb\u5217\u7684\u5176\u4f59\u5904\u7406\u5668\u652f\u6301\u5355\u63d2\u69fd\u6216\u53cc\u63d2\u69fd\u3002\n\u82f1\u7279\u5c14\u6ca1\u6709\u63d0\u5230\u7684\u662f\uff0c\u6709\u4e86\u5408\u9002\u7684\u8fde\u63a5\u7ed3\u6784\uff0c\u7cfb\u7edf\u5efa\u9020\u5546\u548c\u539f\u59cb\u8bbe\u5907\u5236\u9020\u5546\u53ef\u4ee5\u5c06\u51e0\u4e2a4\u63d2\u69fd\u62168\u63d2\u69fd\u7cfb\u7edf\u94fe\u63a5\u5230\u4e00\u4e2a\u5355\u4e00\u7684\u591a\u63d2\u69fd\u63a5\u53e3\u4e2d\u3002\u9664\u4e86\u8981\u4f7f\u7528\u7684\u4ea4\u6362\u77e9\u9635\u548c\u6d88\u606f\u4f20\u9012\u4e4b\u5916\uff0c\u8fd9\u91cc\u8fd8\u6709\u5176\u4ed6\u56e0\u7d20\u5728\u8d77\u4f5c\u7528\uff0c\u4f8b\u5982\u5ef6\u8fdf\u548c\u5185\u5b58\u4f53\u7cfb\u7ed3\u6784\uff0c\u5b83\u4eec\u5df2\u7ecf\u5b58\u5728\u4e8e2-8\u63d2\u69fd\u5e73\u53f0\u4e2d\uff0c\u4f46\u5728\u8d85\u8fc78\u4e2a\u63d2\u69fd\u540e\u4f1a\u5927\u5e45\u589e\u52a0\u3002\u5982\u679c\u4e00\u4e2a\u5904\u7406\u5668\u9700\u8981\u4e24\u4e2a\u4ea4\u6362\u77e9\u9635\u8df3\u8dc3\u7684\u5185\u5b58\uff0c\u800c\u5904\u7406\u5668\u8df3\u8dc3\u8ddd\u79bb\u5f88\u8fdc\uff0c\u90a3\u4e48\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5c06\u8be5\u6570\u636e\u5b58\u50a8\u5728\u672c\u5730SDD\u4e2d\u53ef\u80fd\u4f1a\u66f4\u5feb\u3002\n\u81f3\u4e8e\u9762\u6599\uff1a\u6211\u5b9e\u9645\u4e0a\u8981\u5728\u8fd9\u91cc\u6253\u4e2a\u6bd4\u65b9\u3002AMD\u7684EPYC\u5e73\u53f0\u6700\u9ad8\u53ef\u8fbe\u4e24\u4e2a\u63d2\u69fd\uff0c\u4f46\u5bf9\u4e8e\u63d2\u69fd\u4e4b\u95f4\u7684\u4e92\u8fde\uff0c\u5b83\u4f7f\u7528\u6765\u81ea\u6bcf\u4e2a\u5904\u7406\u5668\u768464\u4e2aPCIe\u901a\u9053\u6765\u6258\u7ba1AMD\u7684Infinity Fabric\u534f\u8bae\u4f5c\u4e3a\u94fe\u8def\uff0c\u5e76\u5177\u6709128\u4e2aPCIe\u901a\u9053\u7684\u7ec4\u5408\u5e26\u5bbd\u4f18\u52bf\u3002\u4f8b\u5982\uff0c\u5982\u679cEPYC\u6709256\u4e2aPCIe\u901a\u9053\uff0c\u6216\u8005\u5c06\u6bcf\u4e2a\u94fe\u8def\u7684PCIe\u901a\u9053\u6570\u51cf\u5c11\u523032\u4e2a\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u53ef\u80fd\u4f1a\u5f97\u5230\u5728Infinity Fabric\u4e0a\u6784\u5efa\u4e86\u4e24\u4e2a\u4ee5\u4e0a\u63d2\u69fd\u7684EPYC\u670d\u52a1\u5668\u3002\u5bf9\u4e8e\u82f1\u7279\u5c14CPU\uff0c\u6211\u4eec\u4ecd\u5728\u4f7f\u7528PCIe\u901a\u9053\uff0c\u4f46\u6211\u4eec\u91c7\u7528\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\u4e4b\u4e00\uff1a\u4f7f\u7528PCIe\u63a7\u5236\u5168\u8def\u5f84\uff0c\u4f7f\u7528PCIe\u63a7\u5236Infiniband\uff0c\u6216\u8005\u4f7f\u7528\u81ea\u5b9a\u4e49FPGA\u63a7\u5236\uff0c\u518d\u6b21\u63a7\u5236PCIe\u3002\u8fd9\u57fa\u672c\u4e0a\u5c31\u662f\u73b0\u4ee3\u8d85\u7ea7\u8ba1\u7b97\u673a\u7684\u8fd0\u884c\u65b9\u5f0f\uff0c\u5c3d\u7ba1\u4e0d\u662f\u4f5c\u4e3a\u4e00\u4e2a\u7edf\u4e00\u7684\u7cfb\u7edf\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u8d85\u51fa\u4e86\u6211\u7684\u6df1\u5ea6\u7684\u5730\u65b9\u3002\u53bb\u5e74\uff0c\u5f53\u6211\u4e0e\u4e00\u5bb6\u5927\u578b\u670d\u52a1\u5668OEM\u4ea4\u8c08\u65f6\uff0c\u4ed6\u4eec\u8868\u793a\uff0c\u56db\u63d2\u69fd\u548c\u516b\u63d2\u69fd\u7cfb\u7edf\u6b63\u53d8\u5f97\u8d8a\u6765\u8d8a\u7f55\u89c1\uff0c\u56e0\u4e3a\u6bcf\u4e2aCPU\u672c\u8eab\u90fd\u6709\u66f4\u591a\u7684\u5185\u6838\uff0c\u5bf9\u8fd9\u6837\u5927\u7684\u7cfb\u7edf\u7684\u9700\u6c42\u5df2\u7ecf\u4e0d\u590d\u5b58\u5728\u3002\u5728Nehalem\u95ee\u4e16\u4e4b\u524d\u7684\u65e5\u5b50\u91cc\uff0c\u5927\u578b\u76848\u63d2\u69fd32\u6838\u670d\u52a1\u5668\u975e\u5e38\u6d41\u884c\uff0c\u4f46\u4eca\u5929\u5df2\u7ecf\u4e0d\u662f\u90a3\u4e48\u6d41\u884c\u4e86\uff0c\u9664\u975e\u6709\u4e00\u5bb6\u516c\u53f8\u613f\u610f\u82b125\u4e07\u7f8e\u5143\u4ee5\u4e0a(\u5728\u7b7e\u8ba2\u652f\u6301\u5408\u540c\u6216DRAM/NAND\u4e4b\u524d)\u8d2d\u4e70\u4e00\u59578\u63d2\u69fd\u7cfb\u7edf\uff0c\u5426\u5219\u8fd9\u662f\u4e3a\u57ce\u91cc\u7684\u5927\u516c\u53f8\u4fdd\u7559\u7684\u3002\u4eca\u5929\uff0c\u8fd9\u4e9b\u90fd\u662f\u4e91\u63d0\u4f9b\u5546\u3002\n\u4e3a\u4e86\u83b7\u5f9732\u4e2a\u63d2\u69fd\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u770b\u52308\u4e2a\u56db\u63d2\u69fd\u7cfb\u7edf\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fde\u63a5\u5230\u4e00\u4e2a\u5927\u578b\u5200\u7247\u5f0f\u57fa\u7840\u8bbe\u65bd\u4e2d\u3002\u5b83\u53ef\u80fd\u9700\u8981\u534a\u4e2a\u673a\u67b6\uff0c\u4e0d\u662f\u6574\u4e2a\u673a\u67b6\uff0c\u4f60\u7684\u731c\u6d4b\u5728\u4ef7\u683c\u6216\u8017\u7535\u91cf\u65b9\u9762\u548c\u6211\u7684\u4e00\u6837\u597d\u3002\u5728\u4e0a\u9762\u7684\u5c4f\u5e55\u622a\u56fe\u4e2d\uff0c\u5b83\u786e\u5b9e\u5199\u7740\u2018\u865a\u62df\u5316\uff1a\u542f\u7528\u2019\uff0c\u9274\u4e8e\u6211\u4eec\u8c08\u8bba\u7684\u662f\u5fae\u8f6f\uff0c\u8fd9\u53ef\u80fd\u662f\u4ed6\u4eec\u5185\u90e8\u8ba1\u5212\u7684Azure\u7cfb\u7edf\u4e4b\u4e00\uff0c\u8981\u4e48\u51fa\u79df\u7ed9\u9632\u52a1\u7c7b\u627f\u5305\u5546\uff0c\u8981\u4e48\u5728\u5b9e\u4f8b\u4e2d\u5206\u5272\u7ed9\u5176\u4ed6\u4eba\u3002\n\u6211\u8bd5\u7740\u8054\u7cfb\u54c8\u91cc\uff0c\u4ee5\u83b7\u5f97\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u7cfb\u7edf\u7684\u4fe1\u606f\uff0c\u5982\u679c\u6211\u4eec\u5f97\u5230\u4efb\u4f55\u4fe1\u606f\uff0c\u6211\u4f1a\u62a5\u544a\u7684\u3002\u5982\u679c\u8fd9\u4e9b\u5927\u578b32\u63d2\u69fd\u7cfb\u7edf\u5c06\u5728Azure\u4e0a\u5e7f\u6cdb\u4f7f\u7528(\u4ece\u6700\u7cbe\u7b80\u7684\u610f\u4e49\u4e0a\u8bb2)\uff0c\u5fae\u8f6f\u53ef\u80fd\u4f1a\u53d1\u5e03\u5b98\u65b9\u58f0\u660e\u3002\n\u53d1\u8868\u8bc4\u8bba\u6211\u731c\u8fd9\u662f\u5fae\u8f6f\u548c\u82f1\u7279\u5c14\u7684\u5408\u8d44\u4f01\u4e1a\u3002\u82f1\u7279\u5c14\u79f0\u65b0\u7684\u81f3\u5f3a\u662f\u53ef\u6269\u5c55\u7684\u662f\u6709\u539f\u56e0\u7684\uff0c\u6211\u76f8\u4fe1\u8fd9\u6b3e\u7cfb\u7edf\u6709\u65b0\u7684\u82af\u7247\u7ec4\uff0c\u53ef\u4ee5\u6269\u5c55\u52308\u523016\u523032\u4e2aCPU\uff0c\u751a\u81f3\u66f4\u591a\u3002\u5341\u591a\u5e74\u6765\uff0c\u82f1\u7279\u5c14\u62e5\u67098\u4e2aCPU\u7cfb\u7edf--\u81ea\u4ece\u591a\u6838CPU\u95ee\u4e16\u4ee5\u6765\uff0c\u6211\u6700\u5927\u7684\u95ee\u9898\u662f8\u4e2a\u5355\u6838\u76d2\u548c8\u6838CPU\u5728\u6027\u80fd\u4e0a\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u5f53\u7136\uff0c\u840c\u82bd\u4e2d\u7684Zen\u67b6\u6784\u7cfb\u7edf\u6709\u4e00\u4e9b\u7269\u7406\u9650\u5236\uff0c\u6bd4\u5982\u4f7f\u7528896\u8fdb\u7a0b\u7cfb\u7edf\u548c112\u4e2a8\u6838ZEN\u8fdb\u7a0b\u7cfb\u7edf\uff0c\u6211\u8ba4\u4e3a\u82f1\u7279\u5c14/\u5fae\u8f6f\u5df2\u7ecf\u627e\u5230\u4e86\u4e00\u79cd\u4e92\u8fde\u53ef\u4f38\u7f29\u7684\u65b9\u6cd5\uff0c\u8fd9\u5e26\u6765\u4e86\u5728CPU\u4e0a\u62e5\u6709\u66f4\u591a\u5185\u6838\u7684\u4ef7\u503c\u7684\u6709\u8da3\u601d\u8003\u3002\u7279\u522b\u662f\u5982\u679c\u7cfb\u7edf\u8bbe\u8ba1\u4e3a\u53ef\u63d2\u62d4\uff0c\u5e76\u4e14\u5176\u4e2d\u4e00\u4e2aCPU\u51fa\u73b0\u6545\u969c\uff0c\u5219\u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u7cfb\u7edf\u505c\u673a\u3002\u56de\u8986\u3002\n\u8fd9\u91cc\u5230\u5e95\u627f\u8bfa\u4e86\u4ec0\u4e48\uff1f\u4e00\u4e2a\u753128\u4e2a\u6838\u5fc3\u5143\u7d20\u7ec4\u6210\u768432\u4e2a\u5143\u7d20\u7684\u96c6\u7fa4\uff0c\u751a\u81f3\u662f\u4e00\u4e2a\u75318*28\u4e2a\u6838\u5fc3\u5143\u7d20\u7ec4\u6210\u76844\u4e2a\u5143\u7d20\u7684\u96c6\u7fa4\u4e5f\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff1b\u96c6\u7fa4\u64cd\u4f5c\u7cfb\u7edf\u65e0\u7591\u5bf9MS\u6709\u7528\uff0c\u4f46\u4e0d\u662f\u4ec0\u4e48\u91cd\u5927\u7a81\u7834\u3002\u90a3\u4e48\uff0c\u8fd9\u662f\u4e0d\u662f\u58f0\u79f0\u8fd9\u662f\u5355\u4e2a\u4e00\u81f4\u7684\u5730\u5740\u7a7a\u95f4\u5462\uff1f\u5c31\u50cf\u585e\u91d1\u4e0b\u9762\u8bf4\u7684\uff0c\u4e3a\u4ec0\u4e48\uff1f\u8fde\u8d2f\u6027\u5728\u8fd9\u91cc\u7ed9\u60a8\u5e26\u6765\u4e86\u4ec0\u4e48\uff1f\u5982\u679c\u5b83\u4e0d\u8fde\u8d2f\uff0c\u90a3\u4e48\u4ec0\u4e48\u662f\u65b0\u7684\u5462\uff1f\u4ed6\u4eec\u6210\u529f\u5b9e\u73b0\u5927\u89c4\u6a21\u4e00\u81f4\u6027\u7684\u5173\u952e\u662f\u4e0d\u4f1a\u5728\u5ef6\u8fdf\u548c\u989d\u5916\u786c\u4ef6(\u76ee\u5f55\u7b49)\u65b9\u9762\u4ed8\u51fa\u5de8\u5927\u4ee3\u4ef7\u5417\uff1f\u56de\u8986\u3002\n\u90a3\u4e4832\u6838\u5355CPU\u548c\u53cc16\u6838\u7cfb\u7edf\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f\u5728\u5355\u4e00\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u5fc5\u987b\u8fd0\u884c\u591a\u4e2aCPU\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u6709\u4e86\u591a\u6838\u7cfb\u7edf\uff0c\u8fd9\u5bf9\u7b14\u8bb0\u672c\u7535\u8111\u6765\u8bf4\u5f88\u68d2\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u8c08\u5230\u670d\u52a1\u5668\u65f6-\u4e3a\u4ec0\u4e48\u4e0d\u5728\u5305\u88c5\u76d2\u4e2d\u4e5f\u670932\u4e2aCPU\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u6838\u5fc3\u57fa\u672c\u4e0a\u53ef\u4ee5\u662f\u6bcf\u4e2aCPU\u6838\u5fc3\u591a\u4e2a\u5957\u63a5\u5b57\u5e94\u7b54\u3002\n\u4f60\u6b63\u5728\u65b9\u4fbf\u5730\u62bd\u8c61\u51fa\u6240\u6709\u80fd\u56de\u7b54\u4f60\u95ee\u9898\u7684\u5b9e\u9645\u7ec6\u8282\u3002\u56de\u8986\u3002\n\u90a3\u4e48\uff0c\u8fd9\u662f\u4e0d\u662f\u8bf4\u8fd9\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u8fde\u8d2f\u5730\u5740\u7a7a\u95f4\u5462\uff1f\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u3002\u6b63\u5982\u585e\u91d1\u59c6\u4e0b\u9762\u8bf4\u7684\uff0c\u4e3a\u4ec0\u4e48\uff1f\u8fde\u8d2f\u5728\u8fd9\u91cc\u7ed9\u4f60\u5e26\u6765\u4e86\u4ec0\u4e48\uff1f&#34\uff1b\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u597d\u7684\u3002\u4f7f\u7528SMP\u751a\u81f32\u8282\u70b9\u4f18\u5316\u7684NUMA\u8f6f\u4ef6\u7684\u8bf1\u60d1\uff0c\u7ed3\u679c\u5374\u53d1\u73b0\u5b83\u7684\u53ef\u4f38\u7f29\u6027\u4e0d\u8d85\u8fc716-32\u4e2a\u7ebf\u7a0b\u3002\u56de\u8986\n\u6b22\u8fce\u6765\u523020\u5e74\u524d\u7684SSI\uff0cSKMD\uff0cMOSIX\u7b49\u2026\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u6761\u5efa\u7b51\u5927\u9053\u4e0a\u6709\u4e00\u6761\u8eab\u4f53\u7684\u8e2a\u8ff9\u3002\u4e0e\u4efb\u52a1\u8fc1\u79fb\u3001\u8d1f\u8f7d\u5171\u4eab\u3001MPI\u7b49\u7684\u5176\u4ed6\u53d8\u4f53\u76f8\u6bd4\uff0c\u6ca1\u6709\u4ec0\u4e48\u663e\u8457\u7684\u6539\u8fdb\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u572899.99999999999%\u7684\u7528\u4f8b\u4e2d\u8bc1\u660e\u4e86\u590d\u6742\u6027\u662f\u5408\u7406\u7684\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0cWindows\u5728\u65e5\u7a0b\u5b89\u6392\u548c\u7a33\u5b9a\u6027\u65b9\u9762\u6709\u7740\u5982\u6b64\u575a\u5b9e\u7684\u8bb0\u5f55\uff0c\u6211\u80af\u5b9a\u4e00\u6709\u673a\u4f1a\u5c31\u4f1a\u7b7e\u7ea6\u63a5\u53d7\u66f4\u591a\u7684\u75db\u82e6\u2026\u2026\u3002/\u8bbd\u523a\u56de\u590d\u3002\n\u6709\u4e00\u70b9\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u53ea\u91ce\u517d\u7684896\u4e2a\u5185\u6838\u4e2d\u7684\u4e00\u4e2a\u6bd420\u5e74\u524d\u7684\u5927\u578b\u673a\u66f4\u5f3a\u5927\uff0c\u73b0\u5728\u4f60\u6709896\u4e2a\uff0c\u5927\u5c0f\u81f3\u5c11\u662f\u5b83\u7684\u5341\u5206\u4e4b\u4e00\u3002\u56de\u8986\u3002\n\u8fd9\u4e0e\u5355\u4e00\u7cfb\u7edf\u6620\u50cf\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u53ea\u662f\u5bc6\u5ea6\u66f4\u9ad8\u800c\u5df2\u3002\u50cfCRAY\uff0cSGI\uff0c\u5bcc\u58eb\u901a\u7b49\u516c\u53f8\u3002\u6211\u4e00\u76f4\u5728\u4f7f\u7528\u4ed6\u4eec\u80fd\u62ff\u5230\u7684\u4efb\u4f55\u5904\u7406\u5668\uff0c\u5e76\u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u9ad8\u901f\u3001\u4f4e\u5ef6\u8fdf\u7ed3\u6784\uff0c\u5e76\u4ece\u64cd\u4f5c\u5458\u7ea7\u522b\u63d0\u4f9b\u6b64\u7c7b\u673a\u5668\u7684\u5355\u4e00\u7cfb\u7edf\u6620\u50cf\u89c6\u56fe\u3002\u5f53CRAY/SGI\u4f7f\u7528\u5177\u67091-N\u6838\u7684Alpha\u3001MIPS opteron\u548cXeons\u8fdb\u884c\u6b64\u64cd\u4f5c\u65f6\u3002\u4e00\u65e6Beowulf\u51fa\u73b0\uff0c\u4e8b\u60c5\u5c31\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fc1\u79fb\u5230\u4f7f\u7528\u5546\u54c1\u6216\u524d\u6cbf\uff0c\u4f46\u4ecd\u7136\u662f\u73b0\u6210\u7684\u5177\u6709\u4e2d\u592e\u63a7\u5236\u5668\u8282\u70b9\u7684\u72ec\u7acb\u8282\u70b9\u7f51\u7edc\u2026\u2026\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u8fd9\u662f\u4e00\u6761\u76f8\u5f53\u9648\u65e7\u7684\u9053\u8def\u3002\u95ee\u9898\u662f\uff0cMSFT\u80fd\u5426\u63d0\u4f9b\u4ee4\u4eba\u4fe1\u670d\u7684\u8bb8\u53ef\u9009\u9879\uff0c\u5e76\u4f7f\u5176\u771f\u6b63\u53d1\u6325\u4f5c\u7528\uff1f\u56de\u8986\u3002\n\u4e00\u4e2a\u53ef\u80fd\u7684\u5dee\u5f02\u53ef\u80fd\u662f\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff0c\u8fd9\u53d6\u51b3\u4e8e\u603b\u7ebf\u662f\u5982\u4f55\u54cd\u5e94\u7684\u3002\n\u5443\uff0c\u4e0d\u3002\u5185\u5b58\u4f7f\u7528\u7387\u5fc5\u987b\u662f\u6bcf\u4e2a\u5200\u7247\u7684\u672c\u5730\u5185\u5b58\u4f7f\u7528\u7387\uff0c\u5426\u5219\u5b83\u5c06\u8868\u73b0\u5f97\u50cf\u5783\u573e\u4e00\u6837\u3002\u7535\u529b\u6548\u7387\u4e5f\u4f1a\u66f4\u5dee\u3002\u56de\u8986", "note_en": "This week Microsoft released a new blog dedicated to the Windows Kernel internals. The purpose of the blog is to dive into the Kernel across a variety of architectures and delve into the elements, such as the evolution of the kernel, the components, the organization, and in this post, the focus was on the scheduler. The goal is to develop the blog over the next few months with insights into what goes on behind the scenes, and the reasons why it does what it does. However, we got a sneak peek into a big system that Microsoft looks like it is working on.\n  For those that want to read the blog, it\u2019s really good. Take a look here:\n  When discussing the scalability of Windows, the author Hari Pulapaka, Lead Program Manager in the Windows Core Kernel Platform, showcases a screenshot of Task Manager from what he describes as a \u2018pre-release Windows DataCenter class machine\u2019 running Windows. Here\u2019s the image:\n    If you weren\u2019t amazed by the number of threads in task manager, you might notice that on the side there\u2019s a  scroll bar. That\u2019s right: 896 cores means 1792 threads when hyperthreading is enabled, which is too much for task manager to show at once, and this new type of \u2018DataCenter class machine\u2019 looks like it has access to them all. But what are we really seeing here, aside from every single thread loaded at 100%?\n  So to start, the CPU listed is a Xeon Platinum 8180, Intel\u2019s highest core count, highest performing Xeon Scalable \u2018Skylake-SP\u2019 processor. It has 28 cores and 56 threads, and by math we get a 32 socket system. In fact in the bumf below the threads all running at 100%, it literally says \u2018Sockets: 32\u2019. So this is 32 full 28 core processors all acting together under one version of Windows. Again, the question is how?\n  Normally, Intel only rates Xeon Platinum processors for up to 8 sockets. It does this by using three QPI links per processor to form a dual-box configuration. The Xeon Gold 6100 range does up to four sockets with three QPI links, ensuring each processor is linked to each other processor, and then the rest of the range does single socket or dual socket.\n    What Intel doesn\u2019t mention is that with an appropriate fabric connecting them, system builders and OEMs can chain together several 4-socket or 8-socket systems into a single, many-socket interface. Aside from the fabric to be used and the messaging, there are other factors in play here, such as latency and memory architecture, which are already present in 2-8 socket platforms but get substantially increased going beyond eight sockets. If one processor needs memory that is two fabric hops and a processor hop is away, to a certain extent having that data in a local SDD might be quicker.\n  As for the fabric: I\u2019m actually going to use an analogy here. AMD\u2019s EPYC platform goes up to two sockets, but for the interconnect between sockets, it uses 64 PCIe lanes from each processor to host AMD\u2019s Infinity Fabric protocol to act as links, and has the benefit of the combined bandwidth of 128 PCIe lanes. If EPYC had 256 PCIe lanes for example, or cut the number of PCIe lanes down to 32 per link, then we could end up with EPYC servers with more than two sockets built on Infinity Fabric. With Intel CPUs, we\u2019re still using the PCIe lanes, but we\u2019re doing it in one of three ways: control over Omni-Path using PCIe, control over Infiniband using PCIe, or control using custom FPGAs, again over PCIe. This is essentially how modern supercomputers are run, albeit not as one unified system.\n  Unfortunately this is where we go out of my depth. When I spoke to a large server OEM last year, they said quad socket and eight socket systems are becoming rarer and rarer\u00a0as each CPU by itself has more cores the need for systems that big just doesn&#39;t exist anymore. Back in the days pre-Nehalem, the big eight socket 32-core servers were all the rage, but today not so much, and unless a company is willing to spend $250k+ (before support contracts or DRAM/NAND) on a single 8-socket system, it\u2019s reserved for the big players in town. Today, those are the cloud providers.\n  In order to get 32 sockets, we\u2019re likely seeing eight quad-socket systems connected in this way in one big blade infrastructure. It likely takes up half a rack, of not a whole one, and your guess is as good as mine on the price, or power consumption. In our screenshot above it does say \u2018Virtualization: Enabled\u2019, and given that this is Microsoft we\u2019re talking about, this might be one of their internal planned Azure systems that is either rented to defence-like contractors or partitioned off in instances to others.\n  I\u2019ve tried reaching out to Hari to get more information on the system this is, and will report back if we get anything. Microsoft may make an official announcement if these large 32-socket systems are going to be &#39;widespread&#39; (meant in the leanest sense) offerings on Azure.\n  POST A COMMENT      My guess is this is joint venture between Microsoft and Intel. Intel called the new Xeon&#39;s scalable for a reason and I believe this system has new chipset that allows it to scalable to from 8 to 16 to 32 cpus&#39;s and maybe any more.  Intel has 8 cpu systems for over a decade - my biggest question since the occurance of multi-core cpu&#39;s is what is difference between 8 single core box and 8-core cpu in performance.  Of course there is some physical limitations of budding say using Zen architecture system with 896 process system with 112 8-core zen&#39;s  I think Intel / Microsoft have found a way to interconnects scalable and this comes interesting thought on value of have more cores on cpu. Especially if system was designed to be pluggable and if one of cpu&#39;s failed than it does not bring entire system down.  Reply\n  What EXACTLY is promised here? A 32-element cluster of 28 core elements, or even a 4-element cluster of 8*28 core elements is no big deal; a cluster OS is doubtless useful for MS, but no great breakthrough. So is the claim that this is a SINGLE COHERENT address space?  As cekim says below, why? What does coherency buy you here? And if it&#39;s not coherent, then what&#39;s new? Is the point that they managed to get massive-scale coherency without a dramatic cost in latency and extra hardware (directories and suchlike)?  Reply\n  what is then the difference of 32 core single cpu and dual 16 core system? In single OS we usued have to run multiple CPU but now we have multiple core system which is great for laptop but when we talking about servers - why not have 32 cpus in the boxed also. In that world core could is basically cores per cpu multiple sockets  Reply\n  You&#39;re conveniently abstracting away all of the practical details that would answer your question.  Reply\n  &#34;So is the claim that this is a SINGLE COHERENT address space?&#34;  Almost certainly.  &#34;As cekim says below, why? What does coherency buy you here?&#34;  Nothing particularly good. A temptation to use SMP or even 2-node-optimized NUMA software, only to discover that it does not scale beyond 16-32 threads.  Reply\n  Welcome to 20 years ago with SSI, SKMD, MOSIX, etc... This avenue of architecture has a trail of bodies on it so far. Just no compelling improvement over other variations of task migration, load sharing, MPI, etc... thus far demonstrated to justify the complexity in 99.99999999999% of use cases. Windows has such a solid track record on scheduling and stability so far, I\u2019d be sure to sign up for more pain the first chance I got... /sarcasm  Reply\n  One thing different, is that a single one of these 896 cores in this beast is more power than main frame computers from 20 years ago and now you have 896 of these in at least 1/10 the size.  Reply\n  That\u2019s not different than single system image... just higher density. Companies like cray, SGI, Fujitsu etc... have been taking any processor they can get their hands on and connecting them up to high speed low latency fabrics and providing a single system image view of such machines from the operator level. When cray/sgi used alphas, mips opterons and xeons with 1-N cores for this. Once Beowulf showed up things migrated that way to using commodity or leading edge but still Off-the-shelf networks of independent nodes with a central director node....  This is a pretty well worn path at this point. The question is whether MSFT can provide a compelling licensing option and make it actually perform?  Reply\n  One difference possibly could be memory usage depending on how the bus is made   Reply\n  Um, no. Memory usage must be local to each blade, or else it will perform like garbage. Power efficiency would be much worse, as well.  Reply", "posttime": "2020-07-06 02:23:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5fae\u8f6f,microsoft,\u6570\u636e\u4e2d\u5fc3,cores,\u7cfb\u7edf", "title": "\u4e00\u53f0PC\u4e2d\u7684\u81f3\u5f3a\u5185\u6838\uff1a\u5fae\u8f6f\u65b0\u7684x86\u6570\u636e\u4e2d\u5fc3\u7ea7\u8ba1\u7b97\u673a", "title_en": "Xeon Cores in One PC: Microsoft\u2019s New x86 DataCenter Class Machines", "transed": 1, "url": "https://www.anandtech.com/show/13522/896-xeon-cores-in-one-pc-microsofts-new-x86-datacenter-class-machines-running-windows", "via": "", "real_tags": ["\u5fae\u8f6f", "microsoft", "\u6570\u636e\u4e2d\u5fc3", "cores", "\u7cfb\u7edf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1009966, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u5e02\u516c\u53f8\uff1a1988\u5e74\u5458\u5de5\uff1a200\u4ebf\u9500\u552e\u989d\uff1a2.078\u4ebf\u7f8e\u5143(1998\u5e74)\u8bc1\u5238\u4ea4\u6613\u6240\uff1a\u7eb3\u65af\u8fbe\u514b\u4ea4\u6613\u5e02\u573a\u4ee3\u7801\uff1a\u9e21\u86cb\u516c\u53f8\uff1a45411\u7535\u5b50\u8d2d\u7269\u548c\u90ae\u8d2d\u516c\u53f8\u3002\n\u6211\u4eec\u6bcf\u6708\u63a5\u5f85700\u591a\u4e07\u5ba2\u6237\u8bbf\u95ee\u3002\u6bcf\u4e2a\u5ba2\u6237\u90fd\u6709\u4e00\u5957\u72ec\u7279\u7684\u9700\u6c42\u548c\u9884\u7b97\u3002\u4e3a\u4e86\u9002\u5e94\u6211\u4eec\u591a\u6837\u5316\u7684\u5ba2\u6237\u57fa\u7840\uff0cEgghead\u63d0\u4f9b\u5404\u79cd\u670d\u52a1\u548c\u798f\u5229\u3002\u5173\u952e\u65e5\u671f\uff1a\nEgghead.com\uff0cInc.\u3002\u662f\u4e00\u5bb6\u9886\u5148\u7684\u57fa\u4e8e\u4e92\u8054\u7f51\u7684\u8ba1\u7b97\u673a\u786c\u4ef6\u3001\u8f6f\u4ef6\u3001\u5916\u56f4\u8bbe\u5907\u548c\u914d\u4ef6\u6298\u6263\u96f6\u552e\u5546\u3002\u5728\u5176\u5386\u53f2\u7684\u5927\u90e8\u5206\u65f6\u95f4\u91cc\uff0c\u8be5\u516c\u53f8\u4ee5Egghead\uff0cInc.\u7684\u540d\u4e49\u7ecf\u8425\u7740\u4e00\u7cfb\u5217\u7279\u8272\u96f6\u552e\u5e97\u3002\u7136\u800c\uff0c\u6765\u81ea\u5927\u4f17\u9500\u552e\u5546\u548c\u6d88\u8d39\u7535\u5b50\u4ea7\u54c1\u8d85\u5e02\u7684\u65e5\u76ca\u6fc0\u70c8\u7684\u7ade\u4e89\u572820\u4e16\u7eaa90\u5e74\u4ee3\u4fb5\u8680\u4e86Egghead\u7684\u9500\u552e\u548c\u5229\u6da6\uff0c\u8feb\u4f7f\u8be5\u516c\u53f8\u91cd\u65b0\u8bc4\u4f30\u5176\u6218\u7565\u30021998\u5e74\uff0cEgghead\u505a\u51fa\u4e86\u4e00\u4e2a\u5927\u80c6\u7684\u51b3\u5b9a\uff0c\u5173\u95ed\u4e86\u5b83\u7684\u5b9e\u4f53\u96f6\u552e\u4e1a\u52a1\u3002\u5728\u91cd\u65b0\u547d\u540d\u4e3aEgghead.com\u540e\uff0c\u8be5\u516c\u53f8\u9009\u62e9\u4e86\u4e3b\u8981\u901a\u8fc7\u4e92\u8054\u7f51\u4ee5\u53ca\u7535\u8bdd\u548c\u76ee\u5f55\u9500\u552e\u5176\u4ea7\u54c1\u3002\u9664\u4e86\u8fd0\u8425\u5176\u540c\u540d\u7f51\u7ad9Egghead.com\u5916\uff0c\u8be5\u516c\u53f8\u8fd8\u8fd0\u8425\u4e00\u4e2a\u4e92\u8054\u7f51\u62cd\u5356\u7f51\u7ad9(www.surplusuction.com)\uff0c\u5e76\u5728\u5176\u4f4e\u4ef7\u7f51\u4e0a\u4ed3\u5e93(www.surplusdirect.com)\u8f6c\u552e\u8ba1\u7b97\u673a\u786c\u4ef6\u3001\u8f6f\u4ef6\u548c\u914d\u4ef6\u3002\u6b64\u5916\uff0cEgghead.com\u62e5\u6709Elekom Corporation 25%\u7684\u80a1\u4efd\uff0cElekom Corporation\u662f\u4e00\u5bb6\u5f00\u53d1\u7535\u5b50\u5546\u52a1\u5e94\u7528\u7a0b\u5e8f\u7684\u516c\u53f8\u30021999\u5e74\uff0c\u5f53Egghead.com\u4e0e\u5728\u7ebf\u62cd\u5356\u5546Onsell Inc\u5408\u5e76\u540e\uff0c\u8be5\u516c\u53f8\u7684\u4e92\u8054\u7f51\u5e1d\u56fd\u518d\u6b21\u6269\u5f20\u3002\n\u7ef4\u514b\u591a\u00b7D\u00b7\u963f\u5c14\u54c8\u5fb7\u592b\u4e8e1984\u5e74\u521b\u7acb\u4e86Egghead\u3002Alhadeff\u4e00\u76f4\u53c2\u4e0e\u77f3\u6cb9\u548c\u5929\u7136\u6c14\u6709\u9650\u5408\u4f19\u4f01\u4e1a\uff0c\u76f4\u52301983\u5e74\u4ef7\u683c\u4e0b\u8dcc\u8feb\u4f7f\u4ed6\u7834\u4ea7\u3002\u90a3\u5e74\u665a\u4e9b\u65f6\u5019\uff0c\u4ed6\u5728\u8d2d\u4e70\u8f6f\u4ef6\u65f6\u53d1\u73b0\uff0c\u7535\u8111\u5546\u5e97\u7684\u9500\u552e\u4eba\u5458\u4f7f\u7528\u7684\u6280\u672f\u672f\u8bed\u7ecf\u5e38\u8ba9\u666e\u901a\u987e\u5ba2\u611f\u5230\u56f0\u60d1\u3002Alhadeff\u5728\u5927\u5b66\u671f\u95f4\u5356\u8fc7\u978b\uff0c\u6709\u4e86\u8fd9\u6b21\u96f6\u552e\u7ecf\u9a8c\uff0c\u4ed6\u51b3\u5b9a\u53ef\u4ee5\u7528\u4f20\u7edf\u7684\u5ba2\u6237\u53cb\u597d\u65b9\u5f0f\u66f4\u6709\u6548\u5730\u9500\u552e\u8f6f\u4ef6\u3002\n\u963f\u5c14\u54c8\u5fb7\u592b\u75285\u4e07\u7f8e\u5143\u7684\u81ea\u6709\u8d44\u91d1\u548c\u5f53\u5730\u6295\u8d44\u8005(\u5305\u62ec\u5fae\u8f6f(Microsoft Corp.)\u8054\u5408\u521b\u59cb\u4eba\u4fdd\u7f57\u00b7\u827e\u4f26(Paul Allen))\u7684100\u4e07\u7f8e\u5143\uff0c\u5728\u534e\u76db\u987f\u5dde\u8d1d\u5c14\u7ef4\u5c24\u5f00\u8bbe\u4e86\u4ed6\u7684\u7b2c\u4e00\u5bb6\u9e21\u86cb\u5934\u5e97\u3002\u4ece\u4e00\u5f00\u59cb\uff0cEgghead\u5c31\u52aa\u529b\u8ba9\u7535\u8111\u8f6f\u4ef6\u5bf9\u666e\u901a\u6d88\u8d39\u8005\u4e0d\u90a3\u4e48\u53ef\u6015\uff0c\u901a\u8fc7\u5546\u5e97\u7684\u5409\u7965\u7269-\u4e00\u4e2a\u540d\u53ebEgghead\u6559\u6388\u7684\u5361\u901a\u4eba\u7269-\u6295\u5c04\u51fa\u6e29\u6696\u7684\u56fe\u50cf\u3002\u9500\u552e\u4eba\u5458\u63a5\u53d7\u4e86\u5f3a\u5316\u57f9\u8bad\uff0c\u4ee5\u4fbf\u719f\u6089\u5e7f\u6cdb\u7684\u8f6f\u4ef6\u5e76\u7528\u7b80\u5355\u7684\u672f\u8bed\u8fdb\u884c\u89e3\u91ca\u3002Egghead\u643a\u5e26\u7684\u8f6f\u4ef6\u8303\u56f4\u5f88\u5e7f\uff0c\u591a\u8fbe1300\u79cd\uff0c\u800c\u5b83\u7684\u4ed3\u5e93\u8fd8\u4fdd\u7559\u4e861000\u79cd\u8f6f\u4ef6\u3002\u987e\u5ba2\u88ab\u5141\u8bb8\u5c06\u8f6f\u4ef6\u5e26\u56de\u5bb6\u8fdb\u884c30\u5929\u7684\u8bd5\u7528\u671f\uff0c\u5546\u5e97\u6709\u591a\u8fbe4\u53f0\u7535\u8111\u53ef\u4f9b\u5e97\u5185\u6f14\u793a\u3002\u6b64\u5916\uff0cEgghead\u7684\u4ef7\u683c\u975e\u5e38\u4f4e\uff0c\u6709\u65f6\u4f1a\u5728\u6807\u4ef7\u7684\u57fa\u7840\u4e0a\u6253\u56db\u6298\u3002\n\u51ed\u501f\u5176\u72ec\u7279\u7684\u8f6f\u4ef6\u96f6\u552e\u65b9\u5f0f\uff0cEgghead\u7684\u9500\u552e\u989d\u8fc5\u901f\u4e0a\u5347\uff0c\u5e76\u5f88\u5feb\u589e\u52a0\u4e86\u65b0\u7684\u95e8\u5e97\u3002\u516c\u53f8\u5ba2\u6237\u5360\u4e86Egghead&#39\uff1b\u9500\u552e\u989d\u7684\u4e3b\u8981\u767e\u5206\u6bd4\uff0c\u8be5\u516c\u53f8\u57281985\u5e74\u5efa\u7acb\u4e86\u4e00\u652f\u5e9e\u5927\u7684\u76f4\u9500\u961f\u4f0d\u3002\u5f88\u5feb\uff0c\u5b83\u5c31\u5356\u7ed9\u4e86\u50cfIBM\u548c\u6ce2\u97f3\u8fd9\u6837\u7684\u8d22\u5bcc500\u5f3a\u516c\u53f8\u3002\u5c3d\u7ba1\u589e\u957f\u4e86\uff0c\u4f46Egghead\u4fdd\u6301\u4e86\u8f83\u4f4e\u7684\u6210\u672c\uff0c\u5c06\u8282\u7701\u4e0b\u6765\u7684\u8d44\u91d1\u6295\u8d44\u4e8e\u65b0\u7684\u95e8\u5e97\u3002\u8be5\u516c\u53f8\u7684\u5feb\u901f\u589e\u957f\u5f15\u8d77\u4e86\u4eba\u4eec\u7684\u6ce8\u610f\u548c\u6295\u8d44\u8005\u7684\u5174\u8da3\u3002\u7136\u800c\uff0c\u7531\u4e8e\u56f4\u7ed5Alhadeff\u524d\u4e00\u5bb6\u516c\u53f8\u7834\u4ea7\u7684\u4e89\u8bae\uff0c\u4e00\u4e9b\u6295\u8d44\u8005\u6301\u8c28\u614e\u6001\u5ea6\u3002\u51e0\u540d\u6295\u8d44\u8005\u5bf9Alhadeff\u63d0\u8d77\u8bc9\u8bbc\uff0c\u79f0Alhadeff\u5728\u516c\u53f8\u8d22\u52a1\u65b9\u9762\u8bef\u5bfc\u4e86\u4ed6\u4eec\u3002\n1987\u5e74\uff0cEgghead\u51c6\u5907\u4e0a\u5e02\u3002\u7136\u800c\uff0c\u5f53\u5f53\u5e7410\u6708\u7f8e\u56fd\u80a1\u5e02\u5927\u5e45\u4e0b\u8dcc\u65f6\uff0c\u6b64\u6b21\u53d1\u884c\u5728\u6700\u540e\u4e00\u523b\u88ab\u53d6\u6d88\u3002\u76f8\u53cd\uff0cAlhadeff\u4ece\u7f8e\u56fd\u534e\u76db\u987f\u94f6\u884c(U.S.Bank Of Washington)\u83b7\u5f97\u4e862500\u4e07\u7f8e\u5143\u7684\u4fe1\u8d37\uff0c\u5e76\u4ece\u5305\u62ec\u4fdd\u8bda\u98ce\u9669\u6295\u8d44(Prudential Venture Capital)\u5728\u5185\u7684\u79c1\u4eba\u6295\u8d44\u8005\u90a3\u91cc\u7b79\u96c6\u4e86\u6570\u767e\u4e07\u7f8e\u5143\uff0c\u603b\u5171\u5411Egghead\u6295\u8d44\u4e864700\u4e07\u7f8e\u5143\u7684\u98ce\u9669\u8d44\u672c\u30021987\u5e74\uff0c\u86cb\u5934\u7684\u9500\u552e\u989d\u8fbe\u52307750\u4e07\u7f8e\u5143\uff0c\u51e0\u4e4e\u662f\u524d\u4e00\u5e74\u7684\u4e24\u500d\u3002\u4e5f\u8bb8\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8be5\u516c\u53f8\u57281985\u5e74\u548c1986\u5e74\u4e8f\u635f\u8fd1100\u4e07\u7f8e\u5143\u540e\uff0c\u83b7\u5f97\u4e86200\u4e07\u7f8e\u5143\u7684\u5229\u6da6\u3002\u7136\u800c\uff0c\u5728\u77ac\u606f\u4e07\u53d8\u7684\u8ba1\u7b97\u673a\u884c\u4e1a\uff0c\u8be5\u516c\u53f8\u9762\u4e34\u7740\u65b0\u7684\u7ade\u4e89\u5bf9\u624b\u3002\u9053\u5c14\u987f\u56fe\u4e66\u516c\u53f8\u6b63\u5728\u6269\u5c55\u5176\u8f6f\u4ef6\u7b49\u4e1a\u52a1\u3002\u5206\u90e8\u62e5\u6709100\u591a\u5bb6\u7cbe\u54c1\u5e97\uff0c\u5176\u4e2d\u8bb8\u591a\u4f4d\u4e8e\u4e66\u5e97\uff0cBabbages Inc.\u63d0\u4f9b\u7c7b\u4f3c\u7684\u5546\u54c1\uff0c1987\u5e74\u95e8\u5e97\u6570\u91cf\u7ffb\u4e86\u4e00\u756a\uff0c\u8fbe\u523058\u5bb6\u3002\n\u52301988\u5e74\u521d\uff0cEgghead\u572813\u4e2a\u57ce\u5e02\u7ecf\u8425\u7740107\u5bb6\u95e8\u5e97\uff0c\u5e76\u4fdd\u6301\u77404000\u4e07\u7f8e\u5143\u7684\u8f6f\u4ef6\u5e93\u5b58\u30021988\u5e746\u6708\uff0cEgghead\u7ec8\u4e8e\u4e0a\u5e02\uff0c\u9996\u6b21\u53d1\u884c\u4e86360\u4e07\u80a1\u7968\uff0c\u4ef7\u683c\u9ad8\u4e8e\u8be5\u516c\u53f81987\u5e74\u6536\u76ca\u768450\u500d\u3002Egghead\u7528\u6b64\u6b21\u53d1\u884c\u52df\u96c6\u7684\u8fd12,400\u4e07\u7f8e\u5143\u589e\u52a0\u4e86\u7ea6100\u5bb6\u65b0\u5e97\uff0c\u5e76\u5c06\u5176\u4f59\u90e8\u5206\u6295\u5165\u8425\u8fd0\u8d44\u91d1\u3002\u4e00\u7f51\u6253\u5c3d\n\u7136\u800c\uff0c\u5c3d\u7ba1\u5e74\u9500\u552e\u989d\u6500\u5347\u81f33.5\u4ebf\u7f8e\u5143\uff0c\u4f46\u7531\u4e8e\u6269\u5f20\u901f\u5ea6\u8f83\u5feb\uff0c\u5229\u6da6\u6709\u6240\u4e0b\u964d\u3002\u9664\u4e86\u5f00\u8bbe\u65b0\u5e97\u5916\uff0cEgghead\u8fd8\u5728132\u540d\u76f4\u9500\u4eba\u5458\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e8660\u540d\u9500\u552e\u4eba\u5458\u3002\u8fd9\u610f\u5473\u7740\u4e00\u5e74\u5185\u603b\u5171\u589e\u52a01600\u540d\u5458\u5de5\uff0c\u800c\u65b0\u7684\u9500\u552e\u4eba\u5458\u9700\u8981\u5e7f\u6cdb\u7684\u57f9\u8bad\u3002\u56e0\u6b64\uff0c\u8be5\u516c\u53f8\u7684\u884c\u653f\u548c\u9500\u552e\u6210\u672c\u5728\u4e00\u5e74\u5185\u7ffb\u4e86\u4e00\u756a\uff0c\u8425\u4e1a\u5229\u6da6\u7387\u4ece1988\u5e74\u76844.5%\u4e0b\u964d\u52301989\u5e74\u76843.7%\u5de6\u53f3\u3002Egghead\u8bd5\u56fe\u901a\u8fc7\u4ece\u8f6f\u4ef6\u5236\u9020\u5546\u90a3\u91cc\u83b7\u5f97\u6279\u91cf\u6298\u6263\uff0c\u4ece\u5176\u4f4e\u5229\u6da6\u7387\u4e2d\u83b7\u5f97\u6700\u5927\u5229\u6da6\u3002\u7136\u800c\uff0c\u8fd9\u610f\u5473\u7740\u589e\u52a0\u5e93\u5b58\uff0c\u5728\u4e00\u4e2a\u65e5\u76ca\u4e0d\u7a33\u5b9a\u7684\u8f6f\u4ef6\u5e02\u573a\u4e0a\uff0c\u8fd9\u65e2\u6602\u8d35\u53c8\u6709\u98ce\u9669\u3002\n\u8fd9\u573a\u9a9a\u4e71\u5bfc\u81f4Egghead\u8fde\u7eed\u4e24\u5e74\u4e8f\u635f\uff0c\u8be5\u516c\u53f8\u88ab\u8feb\u5173\u95ed29\u5bb6\u95e8\u5e97\u4ee5\u524a\u51cf\u6210\u672c\u3002\u968f\u7740\u5927\u91cf\u8f6f\u4ef6\u5728\u5176\u4ed3\u5e93\u4e2d\u5feb\u901f\u6d41\u52a8\uff0cEgghead\u7684\u5e93\u5b58\u7cfb\u7edf\u5931\u63a7\uff0c\u76d7\u7a83\u884c\u4e3a\u589e\u52a0\u30021989\u5e74\uff0c\u5728\u6b64\u671f\u95f4\uff0c\u963f\u5c14\u54c8\u5fb7\u592b\u8058\u8bf7\u4e86\u65af\u56fe\u5c14\u7279\u00b7\u65af\u9686(Stuart Sloan)\u548c\u9a6c\u4fee\u00b7\u683c\u91cc\u82ac(Matthew Griffin)\u5e2e\u52a9\u516c\u53f8\u626d\u4e8f\u4e3a\u76c8\u3002\u6210\u4e3a\u9996\u5e2d\u6267\u884c\u5b98\u7684\u65af\u9686\u6709\u534e\u5c14\u8857\u7684\u80cc\u666f\uff0c\u5728\u90a3\u91cc\u4ed6\u9886\u5bfc\u4e86\u5bf9Quality Food Center Inc.\u7684\u6760\u6746\u6536\u8d2d\u30021986\u5e74\u3002\u683c\u91cc\u82ac\u63a5\u66ff\u963f\u5c14\u54c8\u5fb7\u592b\u62c5\u4efb\u8463\u4e8b\u957f\uff0c\u5728\u623f\u5730\u4ea7\u9886\u57df\u8d5a\u4e86\u6570\u767e\u4e07\u7f8e\u5143\u3002\u8fd9\u4e24\u5bb6\u516c\u53f8\u90fd\u5b9e\u65bd\u4e86\u5185\u90e8\u63a7\u5236\uff0c\u8981\u6c42\u6bcf\u4e2a\u95e8\u5e97\u7ecf\u7406\u5bf9\u4ed6\u6216\u5979\u7684\u95e8\u5e97\u7684\u4e1a\u7ee9\u8d1f\u8d23\u3002\u96f6\u552e\u5e97\u7ecf\u7406\u6bcf\u6708\u90fd\u4f1a\u6536\u5230\u95e8\u5e97\u7684\u635f\u76ca\u62a5\u8868\uff0c\u800c\u5730\u533a\u7ecf\u7406\u5219\u4f1a\u6536\u5230\u5404\u81ea\u5730\u533a\u7684\u62a5\u8868\u3002\u6b64\u5916\uff0c\u65af\u9686\u548c\u683c\u91cc\u82ac\u5c06\u516c\u53f8\u7684\u5de5\u4f5c\u91cd\u70b9\u91cd\u65b0\u653e\u5728\u76f4\u63a5\u5411\u5360\u9500\u552e\u989d60%\u7684\u4f01\u4e1a\u5ba2\u6237\u9500\u552e\u8f6f\u4ef6\u4e0a\u3002\u8fd9\u4e9b\u4e3e\u63aa\u52a0\u5f3a\u4e86Egghead&#39\uff1b\u7684\u5e95\u7ebf\u3002\n\u7136\u800c\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4e00\u4e2a\u65b0\u7684\u7ade\u4e89\u5bf9\u624b\u6b63\u5728\u51fa\u73b0\uff1a\u7535\u8111\u8fde\u9501\u8d85\u5e02\uff0c\u5b83\u4eec\u7684\u4ef7\u683c\u4e0eEgghead\u7684\u8f6f\u4ef6\u4e0d\u76f8\u4e0a\u4e0b\uff0c\u751a\u81f3\u8d85\u8fc7\u4e86Egghead\u7684\u8f6f\u4ef6\u4ef7\u683c\uff0c\u800c\u4e14\u8fd8\u9500\u552e\u8ba1\u7b97\u673a\u786c\u4ef6\u3002\u4f5c\u4e3a\u56de\u5e94\uff0c\u86cb\u5934\u52a0\u5f3a\u4e86\u5176\u4fc3\u9500\u673a\u5236\u3002\u5f53\u5fae\u8f6f\u7684MS-DOS5\u64cd\u4f5c\u7cfb\u7edf\u95ee\u4e16\u65f6\uff0cEgghead\u8fdb\u884c\u4e86\u5e7f\u6cdb\u7684\u4fc3\u9500\u6d3b\u52a8\uff0c\u5e76\u4ee539.99\u7f8e\u5143\u7684\u4ef7\u683c\u51fa\u552e\uff0c\u6bd499.95\u7f8e\u5143\u7684\u6807\u4ef7\u4f4e\u4e8660%\u3002\u4e3a\u4e86\u5229\u7528\u5176\u66f4\u9ad8\u6c34\u5e73\u7684\u5ba2\u6237\u670d\u52a1\uff0cEgghead\u6295\u8d44300\u4e07\u7f8e\u5143\u57f9\u8bad\u5176\u9500\u552e\u4e13\u5bb6\u3002\u5b83\u8fd8\u5411\u5546\u5e97\u7684\u5e93\u5b58\u589e\u52a0\u4e86300\u79cd\u5546\u54c1\uff0c\u4f7f\u666e\u901a\u5546\u5e97\u7684\u9009\u62e9\u589e\u52a0\u52301600\u79cd\u3002\n\u52301990\u5e74\uff0c\u86cb\u5934\u518d\u6b21\u5b9e\u73b0\u76c8\u5229\uff0c\u9500\u552e\u989d\u4e3a5.19\u4ebf\u7f8e\u5143\uff0c\u5229\u6da6\u4e3a1540\u4e07\u7f8e\u5143\u3002\u7136\u800c\uff0c\u65e5\u76ca\u4e25\u91cd\u7684\u7ecf\u6d4e\u8870\u9000\u6b63\u5728\u5f71\u54cd\u4e2a\u4eba\u7535\u8111\u548c\u4e2a\u4eba\u7535\u8111\u8f6f\u4ef6\u7684\u9500\u552e\uff0c\u7535\u8111\u8d85\u5e02\u53d8\u5f97\u8d8a\u6765\u8d8a\u53d7\u6b22\u8fce\u3002\u6b64\u5916\uff0c\u786c\u4ef6\u5236\u9020\u5546\u5f00\u59cb\u5728\u8d2d\u4e70\u786c\u4ef6\u65f6\u63d0\u4f9b\u514d\u8d39\u8f6f\u4ef6\uff0c\u5b8c\u5168\u7ed5\u8fc7\u4e86\u8f6f\u4ef6\u96f6\u552e\u5546\u3002\u968f\u7740\u8f6f\u4ef6\u53d8\u5f97\u66f4\u52a0\u6807\u51c6\u5316\u548c\u6613\u4e8e\u4f7f\u7528\uff0cEgghead\u7684\u5ba2\u6237\u670d\u52a1\u53d8\u5f97\u4e0d\u90a3\u4e48\u660e\u663e\u7684\u4f18\u52bf\uff0c\u5176\u4ed6\u96f6\u552e\u5e97\uff0c\u5982\u4e66\u5e97\u548c\u529e\u516c\u7528\u54c1\u5546\u5e97\uff0c\u5f00\u59cb\u8fdb\u8d27\u8f6f\u4ef6\u3002\u4e3a\u4e86\u4fc3\u8fdb\u9500\u552e\uff0cEgghead\u5f00\u59cb\u63a8\u5e7f\u548c\u6388\u6743\u8be5\u56fd\u7b2c\u4e8c\u5927\u8f6f\u4ef6\u516c\u53f8Computer Associates\u7684\u5546\u4e1a\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4e0eSalePoint Systems\u7b7e\u7f72\u4e86\u4e00\u4efd\u4ef7\u503c350\u4e07\u7f8e\u5143\u7684\u5408\u540c\uff0c\u5c06\u5176\u9500\u552e\u70b9(POS)\u8f6f\u4ef6\u8f6c\u79fb\u5230IBM\u7684OS/2\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u3002POS\u7cfb\u7edf\u8fde\u63a5\u4e86\u516c\u53f8\u7684\u5546\u5e97\u3001\u914d\u9001\u4e2d\u5fc3\u548c\u603b\u90e8\u3002\u5927\u591a\u6570\u8f6f\u4ef6\u4ea7\u54c1\u5728\u516c\u53f8\u6536\u5230\u65f6\u90fd\u662f\u6309\u7248\u672c\u8fdb\u884c\u6761\u5f62\u7801\u7f16\u7801\u7684\uff0c\u8fd9\u6709\u52a9\u4e8e\u5176\u9500\u552e\u548c\u5206\u9500\u3002\n\u622a\u81f31991\u5e74\u5e95\uff0c\u8be5\u516c\u53f8\u572820\u4e2a\u5dde\u62e5\u6709205\u5bb6\u95e8\u5e97\uff0c\u9500\u552e\u989d\u4e3a6.65\u4ebf\u7f8e\u5143\u3002\u5b83\u4ecd\u7136\u76c8\u5229\uff0c\u6536\u76ca\u4e3a1570\u4e07\u7f8e\u5143\u3002\u968f\u7740Egghead\u7ee7\u7eed\u5feb\u901f\u6269\u5f20\uff0c1992\u5e74\u7b2c\u4e00\u5b63\u5ea6\u5f00\u8bbe\u4e8612\u5bb6\u95e8\u5e97\uff0c\u5173\u95ed\u4e862\u5bb6\uff0c\u6536\u76ca\u518d\u6b21\u4e0b\u964d\u3002\u6b64\u5916\uff0c\u8be5\u516c\u53f8\u5728\u79ef\u538b\u5fae\u8f6f(Microsoft)\u65b0\u7684Windows 3.1\u8f6f\u4ef6\u65f6\u72af\u4e86\u4e00\u4e2a\u4ee3\u4ef7\u9ad8\u6602\u7684\u9519\u8bef\uff0c\u9884\u6d4b\u9700\u6c42\u65fa\u76db\uff0c\u4f46\u8fd9\u79cd\u9700\u6c42\u4ece\u672a\u51fa\u73b0\u8fc7\uff0c\u90e8\u5206\u539f\u56e0\u662f\u51e0\u5bb6\u7535\u8111\u5236\u9020\u5546\u5df2\u7ecf\u5c06\u8be5\u7a0b\u5e8f\u4f5c\u4e3a\u4e00\u9879\u9644\u52a0\u529f\u80fd\u52a0\u8f7d\u5230\u4ed6\u4eec\u7684\u786c\u4ef6\u4e0a\u3002\u201c\u86cb\u5934\u201d\u901a\u8fc7\u79ef\u6781\u7684\u8425\u9500\u6d3b\u52a8\u8fdb\u884c\u4e86\u53cd\u51fb\uff0c\u5e76\u8ba1\u5212\u57281993\u5e74\u590f\u5929\u4e4b\u524d\u5f00\u8bbe20\u523040\u5bb6\u95e8\u5e97\u3002\n1992\u5e74\uff0c\u8f6f\u4ef6\u884c\u4e1a\u4ef7\u683c\u6218\u6108\u6f14\u6108\u70c8\uff0c\u5bfc\u81f4\u5229\u6da6\u7387\u8fdb\u4e00\u6b65\u4e0b\u964d\uff0c1993\u5e74\u521d\uff0cEgghead\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u7ba1\u7406\u56e2\u961f\u3002\u897f\u96c5\u56feSeafirst\u94f6\u884c\u524d\u526f\u8463\u4e8b\u957f\u517c\u8fd0\u8425\u7ecf\u7406\u8482\u83ab\u897f\u00b7E\u00b7\u7279\u6069\u6ce2(Timothy E.Turnpaugh)\u6210\u4e3a\u603b\u88c1\u517c\u9996\u5e2d\u6267\u884c\u5b98\u3002\u683c\u91cc\u82ac\u5728\u524d\u4e00\u5e74\u8f9e\u804c\uff0c\u7531Seafirst\u8463\u4e8b\u517c\u9000\u4f11\u8463\u4e8b\u957f\u7406\u67e5\u5fb7\u00b7P\u00b7\u5e93\u5229(Richard P.Cooley)\u63a5\u66ff\u3002\n\u4e66\u5446\u5b50\u7684\u95ee\u9898\u4e0d\u662f\u7b80\u5355\u5730\u901a\u8fc7\u66f4\u6362\u7ba1\u7406\u5c42\u5c31\u80fd\u89e3\u51b3\u7684\u3002\u968f\u7740\u6fc0\u70c8\u7684\u7ade\u4e89\u7ee7\u7eed\u6253\u51fb\u516c\u53f8\u7684\u5e95\u7ebf\uff0cEgghead\u57281993\u8d22\u5e74\u7684\u6536\u76ca\u6bd41992\u5e74\u66b4\u8dcc\u4e8656%\u3002\u5728\u8fd9\u4e9b\u4ee4\u4eba\u6cae\u4e27\u7684\u62a5\u544a\u4e4b\u540e\uff0c\u57c3\u683c\u9ed1\u5fb7\u518d\u6b21\u5f15\u5165\u4e86\u65b0\u7684\u9886\u5bfc\u5c42\u3002\u7279\u6069\u6ce2\u88ab\u4efb\u547d\u4e3a\u7b2c\u4e00\u4e3b\u5e2d\n\u7531\u4e8eEgghead\u7684\u7cbe\u54c1\u8f6f\u4ef6\u5546\u5e97\u7684\u9500\u552e\u989d\u7ee7\u7eed\u88abFry\u2018s Electronics\u7b49\u4e00\u7ad9\u5f0f\u8d2d\u7269\u8d85\u5e02\u62a2\u8d70\uff0c\u65af\u7279\u7f57\u59c6\u5e26\u9886\u516c\u53f8\u5b9e\u73b0\u4e86\u91cd\u5927\u7684\u6218\u7565\u8f6c\u53d8\u30021995\u5e747\u6708\uff0cEgghead\u5ba3\u5e03\u5c06\u5f00\u8bbe\u66f4\u5927\u89c4\u6a21\u7684\u95e8\u5e97\uff0c\u4e0e\u5176\u5927\u578b\u7ade\u4e89\u5bf9\u624b\u66f4\u76f8\u4f3c\u3002\u867d\u7136\u5178\u578b\u7684Egghead\u95e8\u5e97\u53ea\u67092000\u5e73\u65b9\u82f1\u5c3a\u5de6\u53f3\uff0c\u4f46\u65af\u7279\u7f57\u59c6\u8ba1\u5212\u5efa\u902010000\u5e73\u65b9\u82f1\u5c3a\u7684\u95e8\u5e97\uff0c\u73b0\u5728\u8fd9\u4e9b\u95e8\u5e97\u5c06\u63d0\u4f9b\u7535\u8111\u548c\u5916\u56f4\u8bbe\u5907\uff0c\u4ee5\u914d\u5408\u8be5\u516c\u53f8\u4f20\u7edf\u7684\u91cd\u70b9\u8f6f\u4ef6\u3002\u540c\u5e74\uff0cEgghead\u6210\u7acb\u4e86Elekom\uff0c\u4e13\u6ce8\u4e8eB2B\u7535\u5b50\u4ea4\u6613\u3002\n\u5c3d\u7ba11995\u5e74\u88ab\u8bc1\u660e\u662fEgghead\u6210\u529f\u7684\u4e00\u5e74--\u90e8\u5206\u539f\u56e0\u662f\u5fae\u8f6f\u65b0\u63a8\u51fa\u7684Windows95\u9500\u552e\u65fa\u76db--\u4f46Egghead\u7684\u5229\u6da6\u57281996\u5e74\u518d\u6b21\u4e0b\u6ed1\u3002Egghead\u5df2\u7ecf\u5265\u79bb\u4e86\u5b83\u7684\u76f4\u9500\u90e8\u95e8\uff0c\u5265\u593a\u4e86\u5b83\u5411\u4f01\u4e1a\u3001\u653f\u5e9c\u548c\u6559\u80b2\u5ba2\u6237\u9500\u552e\u8f6f\u4ef6\u6240\u4ea7\u751f\u7684\u6536\u5165\u3002\u6b64\u5916\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5411\u66f4\u5927\u89c4\u6a21\u7684\u95e8\u5e97\u8fc7\u6e21\u4ee3\u4ef7\u9ad8\u6602\uff0c\u8be5\u516c\u53f8\u62a5\u544a\u51c0\u4e8f\u635f\u8fd11100\u4e07\u7f8e\u5143\u30021997\u5e741\u6708\uff0c\u65af\u7279\u7f57\u59c6\u5ba3\u5e03\u8f9e\u804c\uff0c\u957f\u671f\u62c5\u4efbEgghead\u8463\u4e8b\u4f1a\u6210\u5458\u7684\u4e54\u6cbb\u00b7\u6b27\u5c14\u73ed(George Orban)\u63a5\u7ba1\u4e86\u8fd9\u5bb6\u9677\u5165\u56f0\u5883\u7684\u516c\u53f8\u3002\n\u4e3a\u4e86\u63d0\u9ad8Egghead\u7684\u76c8\u5229\u80fd\u529b\uff0c\u6b27\u5c14\u73ed\u5173\u95ed\u4e86\u8be5\u516c\u53f8158\u5bb6\u95e8\u5e97\u7684\u8fd1\u4e00\u534a\uff0c\u5e76\u5b8c\u5168\u9000\u51fa\u4e86\u4e00\u4e9b\u5e02\u573a\u3002\u636e1997\u5e742\u670824\u65e5\u7684\u201c\u4e2a\u4eba\u7535\u8111\u5468\u520a\u201d\u62a5\u9053\uff0c\u6b27\u5c14\u73ed\u8ba4\u4e3a\uff0cEgghead\u5df2\u7ecf\u6269\u5c55\u5230\u4e86\u592a\u591a\u7684\u5730\u7406\u5e02\u573a--\u8d85\u51fa\u4e86\u5b83\u5728\u8fd9\u4e9b\u5e02\u573a\u505a\u5e7f\u544a\u548c\u5206\u9500\u7684\u80fd\u529b\u3002\u5728\u6b27\u5c14\u73ed\u51cf\u5c11Egghead\u96f6\u552e\u4e1a\u52a1\u7684\u540c\u65f6\uff0c\u4ed6\u8fd8\u5411\u8be5\u516c\u53f8\u7684\u4e92\u8054\u7f51\u4e1a\u52a1\u6295\u5165\u4e86\u5927\u91cf\u8d44\u91d1\u30021996\u5e7411\u6708\uff0c\u8be5\u516c\u53f8\u5f00\u59cb\u5728\u4e07\u7ef4\u7f51\u4e0a\u76f4\u63a5\u5411\u5ba2\u6237\u9500\u552e\u8f6f\u4ef6\u30021997\u5e742\u67081\u65e5\uff0c\u6b27\u5c14\u73ed\u5728\u63a5\u53d7\u201c\u534e\u76db\u987f\u90ae\u62a5\u201d\u91c7\u8bbf\u65f6\u8868\u793a\uff0c\u8fd9\u9879\u4e1a\u52a1\u8fd8\u5904\u4e8e\u521d\u7ea7\u9636\u6bb5\uff0c\u4f46\u5b83\u6b63\u663e\u793a\u51fa\u826f\u597d\u7684\u589e\u957f\u524d\u666f\u548c\u6d88\u8d39\u8005\u8ba4\u53ef\u5ea6\u3002\n1997\u5e745\u6708\uff0cEgghead\u901a\u8fc7\u6536\u8d2d\u5bcc\u4f59\u8f6f\u4ef6\u8fdb\u4e00\u6b65\u52a0\u5f3a\u4e86\u5176\u5728\u7ebf\u4e1a\u52a1\uff0c\u8be5\u516c\u53f8\u901a\u8fc7\u76ee\u5f55\u548c\u4e92\u8054\u7f51\u76f4\u63a5\u5411\u6d88\u8d39\u8005\u9500\u552e\u8ba1\u7b97\u673a\u786c\u4ef6\u548c\u8f6f\u4ef6\u3002\u6b64\u6b21\u6536\u8d2d\u6807\u5fd7\u7740Egghead\u7684\u5546\u4e1a\u8ba1\u5212\u591a\u6837\u5316\u3002\u6b64\u524d\uff0c\u8be5\u516c\u53f8\u7684\u76ee\u6807\u53ea\u662f\u5728\u9ad8\u7aef\u96f6\u552e\u5e02\u573a\u63d0\u4f9b\u6700\u65b0\u7684\u8f6f\u4ef6\u3002\u7136\u800c\uff0c\u51ed\u501f\u591a\u4f59\u7684\u8f6f\u4ef6\uff0cEgghead\u8fdb\u5165\u4e86\u8be5\u884c\u4e1a\u7684\u975e\u5e02\u573a\u9886\u57df\u3002\u975e\u5e02\u573a\u4ea7\u54c1\u7684\u6d88\u8d39\u8005\u5bf9\u6700\u65b0\u4e00\u4ee3\u7684\u7a0b\u5e8f\u4e0d\u592a\u611f\u5174\u8da3\uff0c\u800c\u66f4\u559c\u6b22\u4ee5\u66f4\u4f4e\u7684\u4ef7\u683c\u83b7\u5f97\u8fc7\u65f6\u4f46\u4ecd\u7136\u5b9e\u7528\u7684\u4ea7\u54c1\u3002\u901a\u8fc7\u5bcc\u4f59\u8f6f\u4ef6\uff0cEgghead\u4ece\u5236\u9020\u5546\u90a3\u91cc\u8d2d\u4e70\u4e86\u4e0d\u826f\u5e93\u5b58(\u8fc7\u65f6\u7684\u4ea7\u54c1\u6216\u79ef\u538b\u7684\u4ea7\u54c1)\uff0c\u5e76\u901a\u8fc7\u4e92\u8054\u7f51\u5c06\u5b83\u4eec\u8f6c\u552e\u7ed9\u6d88\u8d39\u8005\u3002\u52301997\u5e7411\u6708\uff0cEgghead\u5df2\u7ecf\u6709\u4e09\u4e2a\u4e92\u8054\u7f51\u7f51\u7ad9\u6295\u5165\u8fd0\u8425\u3002\u9664\u4e86\u5728\u5176\u76c8\u9980\u76f4\u63a5\u7f51\u7ad9(www.surplusdirect.com)\u4e0a\u9500\u552e\u6253\u6298\u7684\u7535\u8111\u4ea7\u54c1\u5916\uff0cEgghead\u8fd8\u63a8\u51fa\u4e86\u4e00\u4e2a\u6d88\u8d39\u8005\u62cd\u5356\u7f51\u7ad9(www.surplusuction.com)\uff0c\u6d88\u8d39\u8005\u53ef\u4ee5\u5728\u8be5\u7f51\u7ad9\u4e0a\u5bf9\u7ffb\u65b0\u6216\u6253\u6298\u7684\u6280\u672f\u4ea7\u54c1\u8fdb\u884c\u6295\u6807\u3002\u8be5\u516c\u53f8\u7684\u65d7\u8230\u7f51\u7ad9(www.egghead.com)\u63d0\u4f9b\u4e00\u7cfb\u5217\u786c\u4ef6\u3001\u8f6f\u4ef6\u548c\u914d\u4ef6\u3002\u4e0e\u6b64\u540c\u65f6\uff0cEgghead\u5c06\u5176Elekom\u90e8\u95e8\u5265\u79bb\u4e3a\u4e00\u5bb6\u72ec\u7acb\u7684\u516c\u53f8\uff0c\u5c3d\u7ba1\u5b83\u4fdd\u7559\u4e8625%\u7684\u80a1\u4efd\u3002\n\u867d\u7136Egghead\u7684\u5b9e\u4f53\u96f6\u552e\u989d\u57281997\u5e74\u4ecd\u7136\u75b2\u8f6f\uff0c\u4f46\u5176\u4e92\u8054\u7f51\u4e1a\u52a1\u5374\u84ec\u52c3\u53d1\u5c55\u3002\u57281997\u4f1a\u8ba1\u5e74\u5ea6\u7684\u7b2c\u4e00\u5b63\u5ea6\u548c\u7b2c\u4e09\u5b63\u5ea6\u4e4b\u95f4\uff0cEgghead.com\u7684\u6d41\u91cf\u4ece60\u4e07\u589e\u52a0\u5230600\u591a\u4e07\u5ba2\u6237\u3002Egghead\u8ba4\u8bc6\u5230\u54ea\u4e2a\u65b9\u5411\u4e3a\u5176\u672a\u6765\u7684\u76c8\u5229\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u673a\u4f1a\uff0c\u4e8e\u662f\u57281998\u5e741\u6708\u505a\u51fa\u4e86\u5927\u80c6\u7684\u51b3\u5b9a\uff0c\u5173\u95ed\u4e86\u5176\u5269\u4f59\u768485\u5bb6\u96f6\u552e\u5e97\uff0c\u5e76\u5b8c\u5168\u6210\u4e3a\u4e00\u5bb6\u4e92\u8054\u7f51\u4f01\u4e1a\u3002\u4e3a\u4e86\u5f3a\u5316\u8fd9\u4e00\u65b0\u65b9\u5411\uff0c\u8be5\u516c\u53f8\u66f4\u540d\u4e3aEgghead.com\u30021998\u5e741\u670829\u65e5\uff0c\u6b27\u5c14\u73ed\u544a\u8bc9\u201c\u4ee4\u4eba\u60ca\u8bb6\u7684\u53d1\u8a00\u4eba\u8bc4\u8bba\u201d\uff0c\u6211\u4eec\u51b3\u5b9a\u9009\u62e9\u4e92\u8054\u7f51\uff0c\u56e0\u4e3a\u4e92\u8054\u7f51\u7684\u589e\u957f\u901f\u5ea6\u6bd4\u96f6\u552e\u6e20\u9053\u5feb\u5f97\u591a\u3002\u901a\u8fc7\u5173\u95ed\u96f6\u552e\u4e1a\u52a1\uff0cEgghead\u5c06\u83b7\u5f97\u5927\u91cf\u8282\u7701\u3002\u9664\u4e86\u88c1\u5458800\u4eba\u5916\uff0c\u8be5\u516c\u53f8\u8fd8\u6446\u8131\u4e86\u79df\u8d41\u548c\u5efa\u8bbe\u6210\u672c\u3002\u6b64\u5916\uff0c\u5206\u9500\u8d39\u7528\u5c06\u53ea\u662f\u5b83\u4eec\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u56e0\u4e3a\u652f\u4ed8\u5546\u54c1\u8fd0\u8f93\u8d39\u7528\u7684\u662f\u4e2a\u4eba\u4e92\u8054\u7f51\u5ba2\u6237\uff0c\u800c\u4e0d\u662f\u516c\u53f8\u3002\u5bf9Egghead\u6765\u8bf4\uff0c\u66f4\u6709\u5e0c\u671b\u7684\u662f\u7535\u5b50\u5546\u52a1\u63d0\u4f9b\u7684\u6f5c\u5728\u5229\u6da6\u3002\u4e1a\u5185\u4eba\u58eb\u9884\u8ba1\uff0c\u8ba1\u7b97\u673a\u786c\u4ef6\u548c\u8f6f\u4ef6\u4ea7\u54c1\u7684\u4e92\u8054\u7f51\u9500\u552e\u989d\u5c06\u4ece1998\u5e74\u768420\u4ebf\u7f8e\u5143\u589e\u957f\u52302000\u5e74\u7684110\u4ebf\u7f8e\u5143\u3002\n\u867d\u7136\u5e02\u573a\u5206\u6790\u5e08\u5bf9Egghead.com\u7684\u5927\u80c6\u4e3e\u52a8\u8868\u793a\u8d5e\u8d4f\uff0c\u4f46\u8be5\u516c\u53f8\u5411\u7eaf\u4e92\u8054\u7f51\u8fd0\u8425\u7684\u8f6c\u578b\u5145\u6ee1\u4e86\u6311\u6218\u3002\u6211\u4eec\u9884\u8ba1\u5c06\u5728\u5e02\u573a\u8425\u9500\u548c\u6280\u672f\u65b9\u9762\u6295\u5165\u5de8\u8d44\uff0c\u56e0\u6b64\u9884\u8ba1\u5728\u53ef\u9884\u89c1\u7684\u672a\u6765\u5c06\u51fa\u73b0\u5de8\u989d\u8fd0\u8425\u4e8f\u635f\u3002", "note_en": "Public Company    Incorporated:  1988    Employees: 200    Sales: $207.8 million (1998)    Stock Exchanges: NASDAQ    Ticker Symbol:  EGGS    NAIC: 45411 Electronic Shopping and Mail-Order Houses\n    We receive more than 7 million customer visits per month. Each customer has a unique set of needs and budgets. To accommodate our diverse customer base, Egghead offers a variety of services and benefits. \r\rKey Dates:\n            Egghead.com, Inc. is a leading Internet-based discount retailer of computer hardware, software, peripherals, and accessories. For most of its history, the company operated a chain of specialty retail stores under the name Egghead, Inc. However, increased competition from mass merchandisers and consumer electronics &#39;superstores&#39; eroded Egghead&#39;s sales and profits during the 1990s and forced the company to re-evaluate its strategy. In 1998, Egghead made the bold decision to close its &#39;bricks and mortar&#39; retail operation. After re-christening itself Egghead.com, the company opted to sell its products primarily through the Internet, as well as by phone and catalogue. In addition to running its eponymous web site--Egghead.com--the company also operates an Internet auction site (www .surplusauction.com) and re-sells computer hardware, software, and accessories at its off-price web warehouse (www.surplusdirect .com). Moreover, Egghead.com owns a 25 percent stake in Elekom Corporation, which creates electronic commerce applications. In 1999, Egghead.com&#39;s Internet empire expanded again when the company merged with on-line auctioneer Onsale Inc.\n    Victor D. Alhadeff founded Egghead in 1984. Alhadeff had been involved in an oil and gas limited partnership until a drop in prices drove him out of business in 1983. Shopping for software later that year he found that salespeople at computer stores spoke in technical jargon that often confused the average customer. Alhadeff had sold shoes while in college, and with this retail experience, he decided that he could sell software far more effectively using traditional customer-friendly methods.\n  Using $50,000 of his own money along with $1 million from local investors--including Paul Allen, a co-founder of  Microsoft Corp.--Alhadeff opened his first Egghead store in Bellevue, Washington. From the beginning, Egghead made an effort to make computer software less intimidating to the average consumer, projecting a warm image through the store mascot, a cartoon character named Professor Egghead. Salespeople received intensive training in order to become familiar with a wide range of software and explain it in simple terms. Egghead carried a wide range of software, as many as 1,300 titles, while its warehouse maintained a further 1,000. Customers were allowed to take software home for a 30-day trial period, and stores had up to four computers available for in-store demonstrations. Furthermore, Egghead featured extremely low prices, sometimes 40 percent off the list price.\n  With its unique approach to software retailing, Egghead&#39;s sales rose quickly, and it soon was adding new stores. Corporate customers accounted for a major percentage of Egghead&#39;s sales, and the company established a large direct-sales force in 1985. Soon it was selling to Fortune 500 companies like IBM and Boeing. Despite its growth, Egghead kept its costs down, investing its savings in new stores. The firm&#39;s quick growth attracted attention and investor interest. Some investors were cautious, however, due to a controversy surrounding the bankruptcy of Alhadeff&#39;s previous company, against which several investors filed suit claiming Alhadeff had misled them about the company&#39;s finances.\n    In 1987, Egghead prepared to go public. The offering was called off at the last minute, however, when the U.S. stock market fell dramatically in October of that year. Alhadeff instead raised $25 million in credit from the U.S. Bank of Washington, and several million more from private investors, including Prudential Venture Capital, for a total of $47 million in venture capital invested in Egghead. Egghead&#39;s sales came to $77.5 million in 1987, nearly doubling sales of the previous year. Perhaps more importantly, the firm had profits of $2 million, after losing nearly $1 million in 1985 and 1986. However, in the rapidly changing computer industry, the firm faced new competitors. B. Dalton Books was expanding its Software Etc. division, which had over 100 boutiques, many of them in the bookstores, and Babbages Inc., carrying similar merchandise, doubled its stores in 1987 to 58.\n  By early 1988, Egghead operated 107 stores in 13 cities and maintained $40 million of software inventory. In June 1988, Egghead finally went public, with an initial offering of 3.6 million shares at prices above 50 times the firm&#39;s 1987 earnings. Egghead used nearly $24 million raised in the offering to add about 100 new stores and put the rest into working capital. In one nine-month period, 64 new Egghead stores were opened as the chain tried to saturate the market before it was filled by competitors. As a result of this growth, Egghead stores and corporate sales staff accounted for about ten percent of U.S. software sales in 1988.\n  Despite annual sales climbing toward $350 million, however, profits declined due to the swiftness of expansion. In addition to opening the new stores, Egghead added 60 salespeople to the direct sales staff of 132. That meant an addition of 1,600 total employees in one year, and new salespeople required extensive training. As a result, the firm&#39;s administrative and selling costs doubled in a year and its operating margins sunk from 4.5 percent in 1988 to about 3.7 percent in 1989. Egghead tried to obtain maximum profits from its low margins by getting volume discounts from software manufacturers. That meant increasing inventory, however, which was both expensive and risky in an increasingly unstable software market.\n  This tumult lead to two straight years of losses for Egghead, and the company was forced to close 29 stores to cut costs. With large volumes of software flowing quickly through its warehouses, control over Egghead&#39;s inventory system slipped and theft increased. In 1989, in the midst of this period, Alhadeff hired Stuart Sloan and Matthew Griffin to help turn around the company. Sloan, who became chief executive officer, had a background on Wall Street, where he had led the leveraged buyout of Quality Food Centers Inc. in 1986. Griffin, who replaced Alhadeff as chairman, had made millions in real estate. The two put internal controls into effect that made each store manager responsible for the performance of his or her store. Retail store managers were sent monthly profit-and-loss statements for their stores, while district managers were sent statements for their areas. Furthermore, Sloan and Griffen refocused company efforts on selling software directly to corporate customers, who accounted for 60 percent of sales. The moves strengthened Egghead&#39;s bottom line.\n  During this time, however, a new rival was emerging: chains of computer superstores that matched or beat the prices of Egghead&#39;s software and also sold computer hardware. Egghead responded by strengthening its promotional machinery. When Microsoft&#39;s MS-DOS 5 operating system came out, Egghead promoted it extensively, and sold it for $39.99, which was 60 percent lower than the $99.95 list price. Seeking to take advantage of its higher level of customer service, Egghead invested $3 million into training its sales experts. It also added 300 items to the store&#39;s inventory, increasing the selection in the average store to 1,600 items.\n    Egghead was profitable again by 1990, with sales of $519 million and profits of $15.4 million. However, a growing recession was affecting the sale of personal computers as well as PC software, and computer superstores were becoming more popular. Furthermore, hardware manufacturers were beginning to offer free software with hardware purchases, circumventing software retailers altogether. As software became more standardized and easier to use, Egghead&#39;s customer service became a less significant advantage, and other retail outlets, such as bookstores and office supply stores, began to stock software. Attempting to boost sales, Egghead began promoting and licensing business applications by Computer Associates, the country&#39;s second largest software firm. It signed a $3.5 million contract with SalePoint Systems to shift its point-of-sales (POS) software to IBM&#39;s OS/2 operating system. The POS system linked the firm&#39;s stores, distribution centers, and headquarters. Most software products were bar coded by version when the firm received them, helping its sales and distribution.\n  By the end of 1991, the firm had 205 stores in 20 states and sales of $665 million. It remained profitable, with earnings of $15.7 million. As Egghead continued to expand rapidly, opening 12 stores and closing two during the first quarter of 1992, earnings again declined. Furthermore, the company made a costly error when it overstocked Microsoft&#39;s new Windows 3.1 software, predicting heavy demand that never appeared, in part because several computer manufacturers had already loaded the program onto their hardware as an added feature. Egghead fought back with an aggressive marketing campaign and planned to open between 20 and 40 stores by the summer of 1993.\n  Software industry price wars intensified during 1992, driving margins still lower, and Egghead brought in a new management team in early 1993. Timothy E. Turnpaugh, previously vice-chairman and operations manager at Seafirst Bank in Seattle, became president and chief executive. Griffin, who had resigned the year before, was replaced by Richard P. Cooley, a director and retired chairman at Seafirst.\n  Egghead&#39;s problems could not be solved simply by changing management. As fierce competition continued to batter the company&#39;s bottom line, Egghead&#39;s earnings for the fiscal year of 1993 plummeted 56 percent from 1992. In the wake of these dismal reports, Egghead once again brought in new leadership. Turnpaugh was named chairman in July 1993, while Terence Strom, the former chief of electronics retailer Best Buy Co., was chosen as Egghead&#39;s new president.\n  Strom quickly trimmed the company&#39;s workforce and led Egghead into the rapidly growing catalogue sector with the purchase of the mail-order business, Mac&#39;s Place. He also cut software prices by five percent in an effort to make Egghead more competitive with electronics superstores. Although cheaper software prices drove Egghead&#39;s sales for fiscal 1994, the company&#39;s profits suffered as a result. Upon reporting a net loss of $500,000 for the year, Turnpaugh resigned. Strom and former Egghead vice-chairman Ronald Erickson jointly assumed leadership of the company.\n    Since Egghead&#39;s boutique software stores continued to lose sales to one-stop-shopping superstores such as Fry&#39;s Electronics, Strom stewarded the company through a major shift in strategy. In July 1995, Egghead announced that it would open larger stores more akin to its giant competitors. While the typical Egghead outlet was only about 2,000 square feet, Strom planned to build 10,000 square foot stores that would now offer computers and peripherals to go along with the software that had been the company&#39;s traditional focus. That same year, Egghead formed Elekom, which concentrated on business-to-business electronic transactions.\n  Though 1995 proved to be a successful year for Egghead--due in part to brisk sales of Microsoft&#39;s newly launched Windows 95--Egghead&#39;s profits sunk once again in 1996. Egghead had shed its direct sales unit, depriving it of the revenue generated by software sales to corporate, government, and education clients. Moreover, the transition to larger-format stores had proved costly, and the company reported a net loss of nearly $11 million. In January 1997, Strom announced his resignation, and George Orban, a long-time Egghead board member, took the reigns of the troubled company.\n  In an effort to improve Egghead&#39;s profitability, Orban closed nearly half of the company&#39;s 158 stores and pulled out of a number of markets altogether. According to the February 24, 1997, edition of  PC Week, Orban believed that Egghead had &#39;expanded into too many geographic markets--more than it could afford to advertise and distribute in.&#39; At the same time that Orban decreased Egghead&#39;s retail presence, he poured money into the company&#39;s Internet business, which had begun to sell software directly to customers over the world wide web in November of 1996. &#39;This business is in its infancy, but it is showing promising growth and consumer acceptance,&#39; Orban told the  Washington Post on February 1, 1997.\n  In May 1997, Egghead further bolstered its on-line operations by acquiring Surplus Software, which sold computer hardware and software directly to consumers through catalogues and the Internet. This purchase marked a diversification of Egghead&#39;s business plan. Previously, the company had simply aimed to supply the latest software at the high end of the retail market. However, with Surplus Software, Egghead entered the &#39;off market&#39; sector of the industry. Consumers of &#39;off market&#39; products were less interested in the newest generation of program and more so in obtaining outdated but still functional products at lower prices. Through Surplus Software, Egghead purchased &#39;distressed inventories&#39; (outdated products or overstock) from manufacturers and resold them to consumers over the Internet. By November 1997, Egghead had three Internet sites operational. In addition to selling discount computer products on its Surplus Direct web site (www.surplusdirect .com), Egghead also launched a consumer auction web site (www.surplusauction.com), whereby consumers made bids on refurbished or off-price technology products. The company&#39;s flagship web site (www.egghead.com) offered a range of hardware, software, and accessories. At the same time, Egghead spun off its Elekom division into an independent company, albeit one in which it retained a 25 percent stake.\n    While Egghead&#39;s &#39;bricks and mortar&#39; retail sales remained weak in 1997, its Internet business thrived. Between the first and third quarters of the 1997 fiscal year, traffic at Egghead.com increased from 600,000 to over six million customers. Recognizing which direction offered it a better chance at future profitability, Egghead made the bold decision in January of 1998 to close its remaining 85 retail stores and become exclusively an Internet business. To reinforce this new direction, the company changed its name to Egghead.com. &#39;We decided on the Internet, which is growing much more rapidly than the retail channels,&#39; Orban told the surprised  Spokesman Review on January 29, 1998. By shuttering its retail operation, Egghead stood to reap substantial savings. In addition to reducing its workforce by 800 employees, the company also was freed from both leasing and construction costs. Moreover, distribution expenses would be only a fraction of what they were, since the individual Internet customer--not the company--paid merchandise shipping costs. Even more promising for Egghead was the potential profits e-commerce offered. Industry insiders predicted that Internet sales in computer hardware and software products would grow from $2 billion in 1998 to $11 billion in 2000.\n  While market analysts applauded Egghead.com&#39;s brave move, the company&#39;s transition to an Internet-only operation was fraught with challenges. &#39;We expect to invest heavily in marketing and technology and therefore expect to incur substantial operating losses in the foreseeable future,&#39; Orban announced to the  Spokesman Review on May 6, 1998. To develop its Internet presence, Egghead.com entered into several alliances with major Internet portals. For instance, in February 1998, Egghead.com became the premier computer and software merchant on Yahoo! Internet guide. Its efforts were successful. Egghead&#39;s three web sites collectively ranked sixth among major Internet commerce sites as measured by Media Matrix in May 1998.\n  Although Egghead.com reported significant losses in fiscal 1998 and 1999 ($50.2 million and $34.4 million, respectively), the company&#39;s outlook was positive. As the  Portland Oregonian explained, &#39;in the developing e-commerce world, the bottom line [was] replaced with new performance indicators,&#39; in which Egghead.com &#39;scored well.&#39; The company&#39;s inventory costs had plummeted as expected from $100 million to about $14 million. With over 40,000 products for sale, Egghead.com enjoyed seven million customer visits per month.\n  Demonstrating its continued desire to strengthen its position in the on-line market, Egghead.com merged with a leading cyber auctioneer in November, 1999. This new partner, Onsale Inc., sold a variety of computer hardware and software products, as well as vacation packages, consumer electronics, and fitness equipment. Onsale&#39;s AtCost site was rolled into the Egghead.com site, while Surplus Auction and Surplus Direct were moved to Onsale&#39;s auction area. With the merger, Egghead.com had the size and strength to leverage better prices from its providers. Even more promising was the fact that Egghead.com could cease its price war with Onsale (which had undermined both companies&#39; profits) and could compete more effectively with the likes of Gateway Computer and Buy.Com. Egghead.com moved its headquarters to Onsale&#39;s offices in Menlo Park, California. Orban was named chairman of the new company, while Onsale CEO Jerry Kaplan became president of Egghead.com.\n    Principal Competitors: Beyond.com Corporation; BID.COM International Inc.; CNET, Inc.; CompUSA Inc.; Cyberian Outpost, Inc.;  Dell Computer Corporation; Micro Warehouse, Inc.; Multiple Zones International, Inc.\n    Hafner, Katherine M., &#39;Selling Software High and Low: Two Winning Formulas,&#39;  Business Week, February 29, 1988.\n              Norr, Henry, &#39;Egghead Whips Up a $400 Million Deal with Onsale,&#39;  San Francisco Chronicle, July 15, 1999.\n            Yang, Dori Jones, and Stephanie Anderson Forest, &#39;Egghead Scrambles Back,&#39;  Business Week, July 29, 1991.", "posttime": "2020-07-06 02:22:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,egghead", "title": "Egghead\u8f6f\u4ef6\u5546\u5e97\u7684\u5386\u53f2", "title_en": "History of Egghead Software Stores", "transed": 1, "url": "http://www.fundinguniverse.com/company-histories/egghead-com-inc-history/", "via": "", "real_tags": ["\u8f6f\u4ef6", "egghead"]}, {"category": "", "categoryclass": "", "imagename": "7cf484ceeae6bc7fc2161eddc603cd15.jpg", "infoid": 1009964, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5a01\u5ec9\u00b7\u5409\u5e03\u68ee(William Gibson)\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u672a\u6765\u5df2\u7ecf\u5728\u8fd9\u91cc-\u53ea\u662f\u5206\u5e03\u4e0d\u592a\u5747\u5300\u3002\n\u8fd9\u4e5f\u9002\u7528\u4e8e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6bd4\u5982\u5728\u5e7f\u6cdb\u7684\u8ba8\u8bba\u4e2d\u627e\u51fa\u8c01\u5728\u8bf4\u5b9e\u8bdd\u3002\u6839\u636e\u5409\u5e03\u68ee\u7684\u683c\u8a00\uff0c\u6211\u4eec\u5e94\u8be5\u671f\u5f85\u627e\u5230\u89e3\u51b3\u65b9\u6848\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u4f46\u4e0d\u662f\u5728\u4e00\u8d77\uff0c\u800c\u4e14\u53ef\u80fd\u5728\u5404\u79cd\u610f\u60f3\u4e0d\u5230\u7684\u5730\u65b9\u3002\u8fd9\u53d6\u51b3\u4e8e\u6211\u4eec\u628a\u5b83\u4eec\u90fd\u627e\u51fa\u6765\uff0c\u7136\u540e\u628a\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\u3002\n\u4e4d\u4e00\u770b\uff0c\u627e\u5230\u771f\u76f8\u4f3c\u4e4e\u662f\u4e00\u4e2a\u90aa\u6076\u7684\u95ee\u9898\uff0c\u5b83\u5b9e\u9645\u4e0a\u66f4\u50cf\u662f\u4e00\u79cd\u7eb5\u6df1\u9632\u5fa1\uff0c\u50cf\u4fdd\u62a4\u8a00\u8bba\u81ea\u7531\u8fd9\u6837\u7684\u9650\u5236\u53d8\u6210\u4e86\u8fc7\u6ee4\u6389\u4e0d\u8d77\u4f5c\u7528\u7684\u65b9\u6cd5\u7684\u65b9\u6cd5\u3002\n\u6211\u4eec\u4ece\u53e4\u5e0c\u814a\u4eba\u5f00\u59cb\u5c31\u8fd9\u6837\u505a\u4e86\uff0c\u800c\u53e6\u4e00\u65b9\u4e00\u76f4\u5728\u53cd\u51fb\uff1a\u4f8b\u5982\uff0c\u8be1\u8fa9\u6d3e\u8ba9\u96c5\u5178\u653f\u5e9c\u5904\u51b3\u4e86\u82cf\u683c\u62c9\u5e95\u3002\n\u6211\u4e4b\u524d\u5728\u535a\u5ba2\u4e2d\u5199\u8fc7\u5173\u4e8e\u5176\u4e2d\u4e00\u4e2a\u90e8\u5206\uff0c\u7eb3\u65af\u8fbe\u514b\u662f\u5982\u4f55\u5904\u7406\u4ed6\u4eec\u4ea4\u6613\u6240\u7684\u975e\u6cd5\u548c\u4ec5\u4ec5\u662f\u4e0d\u6b63\u5f53\u7684\u80a1\u7968\u4ea4\u6613\u7684\u3002\n\u518d\u8005\uff0c\u4ed6\u4eec\u5de5\u4f5c\u7684\u57fa\u7840\u662f\u6cd5\u5f8b\uff1a\u5077\u7a83\u80a1\u7968\u662f\u975e\u6cd5\u7684\u3002\u6492\u8c0e\u717d\u52a8\u9a9a\u4e71\u4e5f\u662f\u8fdd\u6cd5\u7684\u3002\u7136\u800c\uff0c\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u4e0d\u662f\u7279\u522b\u5e38\u89c1\u3002\u66f4\u5e38\u89c1\u7684\u662f\u8bda\u5b9e\u7684\u9519\u8bef\u6216\u70ed\u60c5\u7684\u9519\u8bef\u9648\u8ff0\u3002\n\u4e0b\u4e00\u5c42\u201c\u5411\u4e0a\u201d\u662f\u6240\u6709\u4ea4\u6613\u5458\u7b7e\u7f72\u7684\u6210\u4e3a\u4ea4\u6613\u6240\u4f1a\u5458\u5e76\u8fdb\u884c\u80a1\u7968\u4ea4\u6613\u7684\u534f\u8bae\u3002\u5b83\u89c4\u5b9a\u4e86\u89c4\u5219\uff0c\u8fd9\u4e9b\u89c4\u5219\u5c31\u50cf\u57ce\u5e02\u9644\u4f8b\u4e00\u6837\uff0c\u5fc5\u987b\u7b26\u5408\u57fa\u672c\u6cd5\u3002\n\u5982\u679c\u6709\u4eba\u505a\u4e86\u4e0d\u6b63\u5f53\u7684\u4ea4\u6613\uff0c\u53ef\u4ee5\u7b2c\u4e00\u6b21\u8b66\u544a\u4ed6\u4eec\uff0c\u7b2c\u4e8c\u6b21\u5904\u4ee5\u5c11\u91cf\u7f5a\u6b3e\uff0c\u7b2c\u4e09\u6b21\u5904\u4ee5\u5de8\u989d\u7f5a\u6b3e\u3002\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u524d\u4e24\u79cd\u60c5\u51b5\u5360\u5927\u591a\u6570\uff1a\u53ea\u6709\u6781\u5c11\u6570\u4eba\u5b9e\u9645\u4e0a\u662f\u641e\u80a1\u7968\u9a97\u5c40\u6216\u8bd5\u56fe\u64cd\u7eb5\u9009\u4e3e\u7684\u90aa\u6076\u5929\u624d\uff0c\n\u6b64\u5916\uff0c\u76d1\u7ba1\u8d38\u6613\u7684\u5de5\u4f5c\u88ab\u5206\u6210\u51e0\u5927\u5757\uff0c\u4ea4\u6613\u6240\u4e00\u5f00\u59cb\u89c4\u6a21\u5f88\u5c0f\uff0c\u7ecf\u5e38\u53d1\u751f\u4e8b\u6545\u3002\u4ed6\u4eec\u628a\u8fd9\u4e9b\u4ece\u4e25\u91cd\u7684\u90aa\u6076\u4e2d\u5206\u79bb\u51fa\u6765\uff0c\u5e76\u6839\u636e\u67d0\u4e9b\u4e1c\u897f\u662f\u96be\u53d1\u73b0\u7684\u8fd8\u662f\u5bb9\u6613\u53d1\u73b0\u7684\u4f9d\u6b21\u5bf9\u5176\u8fdb\u884c\u7ec6\u5206\u3002\n\u4ed6\u4eec\u6700\u5927\u7684\u4f18\u52bf\u662f\u684c\u4e0a\u6709\u94b1\uff0c\u800c\u4e14\u4eba\u4eec\u5df2\u7ecf\u540c\u610f\u4e86\u89c4\u5219\u3002\u6293\u6355\u548c\u7f5a\u6b3e\u9a97\u5b50\u548c\u5c0f\u4e11\u8ba9\u5b83\u81ea\u5df1\u4ed8\u51fa\u4e86\u4ee3\u4ef7\uff0c\u8fd9\u4f7f\u5f97\u4ed6\u4eec\u7684\u65b9\u6cd5\u672c\u8eab\u5c31\u53ef\u4ee5\u88ab\u50cf\u201c\u8d27\u5e01\u5316\u201d\u7684YouTube\u9891\u9053\u8fd9\u6837\u7684\u8d5a\u94b1\u64cd\u4f5c\u6240\u5229\u7528\u3002\n\u4ee5\u4e0a\u6240\u6709\u8fd9\u4e9b\u90fd\u9002\u7528\u4e8e\u5bfb\u627e\u8c0e\u8a00\uff0c\u9664\u4e86\u94b1\u3002\u8fd9\u4f7f\u5f97\u4ece\u5c0f\u4e8b\u505a\u8d77\uff0c\u800c\u4e0d\u662f\u8bd5\u56fe\u4e00\u4e0b\u5b50\u716e\u719f\u6574\u4e2a\u6d77\u6d0b\u53d8\u5f97\u52a0\u500d\u91cd\u8981\u3002\n\u4e00\u65e6\u53d1\u73b0\u4e00\u4e9b\u4e0d\u53d7\u6b22\u8fce\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u717d\u52a8\u8c0b\u6740\u7684\u72d7\u53e3\u54e8\u6587\u7ae0\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u6240\u6709\u7684\u526f\u672c\uff0c\u52a0\u4e0a\u6240\u6709\u7684\u70b9\u8d5e\u548c\u6240\u6709\u7684\u5206\u4eab\u3002\u751a\u81f3\u53ef\u80fd\u5305\u62ec\u6240\u6709\u770b\u8fc7\u5b83\u7684\u4eba\u3002\n\u8fd9\u8ba9\u4e00\u5c0f\u90e8\u5206\u5458\u5de5\u53ef\u4ee5\u5904\u7406\u5e7f\u544a\u5546\u7684\u5927\u91cf\u5de5\u4f5c\uff0c\u6216\u8005\u662f\u8fc5\u901f\u6269\u5f20\u7684\u201c\u75c5\u6bd2\u201d\u8ff7\u56e0\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u673a\u5668\u5b66\u4e60(ML)\u53ef\u4ee5\u88ab\u8bad\u7ec3\u6210\u8bc6\u522b\u88ab\u7981\u6587\u7ae0\u7684\u6b21\u8981\u53d8\u4f53\uff0c\u5e76\u5c06\u5b83\u4eec\u63a8\u8350\u7ed9\u5de5\u4f5c\u4eba\u5458\uff0c\u4ee5\u786e\u4fdd\u8fd9\u662f\u88ab\u8bc6\u522b\u7684\u3002\u8fd9\u4e9b\u5185\u5bb9\u53ef\u4ee5\u6309\u7167\u4e0e\u539f\u59cb\u5e16\u5b50\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u3002\n\u4f46\u6211\u4eec\u5982\u4f55\u624d\u80fd\u53ca\u65f6\u53ef\u4fe1\u5730\u8bc6\u7834\u8c0e\u8a00\u5462\uff1f\u4e00\u4e2a\u7f51\u7ad9\u80fd\u591f\u8d1f\u62c5\u5f97\u8d77\u7684\u56e2\u961f\u603b\u662f\u4f1a\u843d\u5728\u540e\u9762\u3002\n\u8fd9\u89e3\u51b3\u4e86\u4e00\u4e2a\u9065\u8fdc\u7684\u76f8\u5173\u95ee\u9898\uff0c\u8fd9\u4e2a\u95ee\u9898\u548c\u76d1\u7ba1\u80a1\u7968\u4ea4\u6613\u4e00\u6837\u51fa\u4eba\u610f\u6599\u5730\u6709\u5e2e\u52a9\u3002\n\u5386\u53f2\u8f83\u957f\u7684\u5927\u578b\u8ba8\u8bba\u5c0f\u7ec4\u4e4b\u4e00Slashdot\u81ea1997\u5e74\u6210\u7acb\u4ee5\u6765\uff0c\u5c31\u9700\u8981\u4e0e\u8fc7\u4e8e\u70ed\u60c5\u7684\u8bc4\u8bba\u5458\u3001\u717d\u52a8\u8005\u548c\u5de8\u9b54\u6253\u4ea4\u9053\u3002\u57282020\u5e74\uff0c\u4ecd\u7136\u5f88\u5bb9\u6613\u201c4\u30015\u5c81\u9605\u8bfb\u201d\uff0c\u5e76\u770b\u5230\u5bf9\u4e00\u4e2a\u56f0\u96be\u7684\u4e3b\u9898\u8fdb\u884c\u6709\u8282\u5236\u3001\u5408\u7406\u548c\u5185\u5bb9\u4e30\u5bcc\u7684\u8ba8\u8bba\u3002\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u201c\u5728-1\u9605\u8bfb\u201d\uff0c\u503e\u542c\u90a3\u4e9b\u5728\u5176\u4ed6\u5730\u65b9\u4f1a\u6df9\u6ca1\u6709\u6d1e\u5bdf\u529b\u7684\u8bc4\u8bba\u7684\u75af\u5b50\u548c\u717d\u52a8\u8005\u7684\u8bdd\u3002\n\u8fd9\u4e2a\u7f51\u7ad9\u662f\u7531\u8bc4\u8bba\u5458\u4f5c\u4e3a\u4e3b\u6301\u4eba\u7684\u7cfb\u7edf\u9a71\u52a8\u7684\u3002\u5982\u679c\u4f60\u7684\u8bc4\u8bba\u88ab\u5ba1\u6838\u4e3a\u4fe1\u606f\u91cf\u5927\u3001\u6709\u6d1e\u5bdf\u529b\u6216\u6709\u8da3\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u56e0\u679c\u62a5\u5e94\uff0c\u5e76\u4f1a\u5f97\u523010\u523015\u4e2a\u7248\u4e3b\u70b9\u6570\u3002\u6709\u4e86\u5b83\u4eec\uff0c\u4f60\u53ef\u4ee5\u7ed9\u597d\u7684\u5e16\u5b50\u52a0\u5206\uff0c\u6bcf\u6761\u8bc4\u8bba\u52a01\u5206\uff0c\u628a\u4e0d\u597d\u7684\u5e16\u5b50\u8bb0\u4e0b\u6765\u3002\u8282\u5236\u7684\u79cd\u7c7b\u4ece\u201c\u6709\u6d1e\u5bdf\u529b\u7684\u201d\u548c\u201c\u89c1\u591a\u8bc6\u5e7f\u7684\u201d\uff0c\u5230\u201c\u4f4e\u4f30\u201d\u548c\u201c\u9ad8\u4f30\u201d\u7684\uff0c\u518d\u5230\u201c\u5de8\u9b54\u201d\u6216\u201c\u706b\u836f\u9975\u201d\uff0c\u4e0d\u4e00\u800c\u8db3\u3002\n\u4f5c\u4e3a\u5bf9\u7248\u4e3b\u7684\u68c0\u67e5\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u201c\u5143\u7248\u4e3b\u201d\uff0c\u5e76\u5c31\u7248\u4e3b\u662f\u5426\u516c\u5e73\u8fdb\u884c\u6295\u7968\u3002\n\u5f53\u7136\uff0c\u4f60\u4e0d\u80fd\u4e3a\u4e86\u907f\u514d\u81ea\u79c1\u81ea\u5229\u7684\u884c\u4e3a\u800c\u9002\u5ea6\u5730\u8bc4\u8bba\u4f60\u5bf9\u81ea\u5df1\u8bc4\u8bba\u7684\u6587\u7ae0\u3002\n\u8bfb\u8005\u53ef\u4ee5\u8bbe\u7f6e\u4ed6\u4eec\u60f3\u8981\u67e5\u770b\u7684\u8d28\u91cf\u7ea7\u522b\uff0c\u4ece-1\u52305\u3002\u201c\u56db\u70b9\u9605\u8bfb\u201d\u5c06\u5411\u4f60\u5c55\u793a\u5907\u53d7\u63a8\u5d07\u7684\u8bc4\u8bba\uff0c\u8bc4\u5206\u4e3a4\u52305\u5206\u3002\n\u4ece\u90a3\u4e9b\u88ab\u540c\u884c\u8bc4\u4e3a\u8bda\u5b9e\u7684\u4eba\u7c7b\u8bc4\u8bba\u5458\u5f00\u59cb\uff0c\u7ed9\u4ed6\u4eec\u6bcf\u4eba\u6253\u51e0\u5206\uff0c\u4ece\u201c\u4f18\u96c5\u5730\u8bba\u8bc1\u771f\u76f8\u201d\u5230\u201c\u72e1\u733e\u7684\u8a00\u8f9e\u201d\u6216\u201c\u516c\u5173\u201d\uff0c\u518d\u5230\u201c\u4e0d\u5408\u903b\u8f91\u201d\u3001\u201c\u6b6a\u66f2\u201d\u3001\u201c\u8be1\u8fa9\u201d\u6216\u201c\u76f4\u63a5\u6492\u8c0e\u201d\u3002\n\u5141\u8bb8\u4efb\u4f55\u4eba\u5bf9\u7248\u4e3b\u8fdb\u884c\u7ba1\u7406\uff0c\u5e76\u7981\u6b62\u5bf9\u540c\u4e00\u7bc7\u6587\u7ae0\u8fdb\u884c\u5ba1\u9605\u548c\u8bc4\u8bba\u3002\n\u73b0\u5728\uff0c\u5c06\u4e3b\u6301\u4eba\u7684\u610f\u89c1\u53cd\u9988\u7ed9\u4eba\u7c7b\u5de5\u4f5c\u4eba\u5458\uff0c\u4ed6\u4eec\u5145\u5f53\u5ba1\u6838\u5458\uff0c\u800c\u4e0d\u662f\u4e3b\u6301\u4eba\u3002\n\u5982\u679c\u5ba1\u6838\u5458\u540c\u610f\u4e00\u9879\u58f0\u660e\u662f\u72d7\u53e3\u54e8\uff0c\u5c31\u4f7f\u7528\u81ea\u52a8\u5316\u6765\u6807\u8bb0\u5b83\uff0c\u5e76\u5728\u5176\u4ed6\u5e16\u5b50\u4e2d\u5bfb\u627e\u76f8\u540c\u7684\u201c\u542b\u84c4\u8a00\u8bba\u201d\u7684\u5176\u4ed6\u4f8b\u5b50\u3002\n\u628a\u8fd9\u4e9b\u5019\u9009\u4eba\u53cd\u9988\u7ed9\u5ba1\u8ba1\u5e08\uff0c\u4ee5\u9632\u6b62ML\u628a\u81ea\u5df1\u53d8\u6210\u5de8\u9b54\uff01\n\u5bf9\u4e8e\u4eba\u7c7b\uff0c\u5ba1\u8ba1\u5e08\u53ef\u4ee5\u8b66\u544a\u548c\u6559\u5bfc\u8bda\u5b9e\u7684\u9519\u8bef\uff0c\u5c3d\u7ba1\u4ec5\u4ec5\u662f\u7f13\u548c\u4e00\u4e0b\u5c31\u53ef\u4ee5\u7f13\u548c\u8fc7\u5ea6\u7684\u70ed\u60c5\u3002\u5982\u679c\u4ed6\u4eec\u505a\u4e0d\u5230\uff0c\u4ed6\u4eec\u7684\u4f1a\u5458\u8d44\u683c\u53ef\u4ee5\u88ab\u6682\u505c\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u53ef\u4ee5\u88ab\u79fb\u4ea4\u7ed9\u8b66\u65b9\u3002\n\u8fd9\u5c31\u662f\u6211\u7684\u4e09\u90e8\u5206\u4f5c\u6587\uff1a\u6211\u76f8\u4fe1\u8fd8\u6709\u66f4\u591a\u6211\u4ece\u672a\u542c\u8bf4\u8fc7\u7684\u3002\n\u8ba9\u4eba\u7c7b\u4fdd\u6301\u8bda\u5b9e\uff0c\u628a\u8be1\u8fa9\u6d3e\u6254\u5230\u6865\u7684\u4e00\u8fb9\uff0c\u6254\u7ed9\u5de8\u9b54\u3002", "note_en": "William Gibson once said  The future is already here\u2014It\u2019s just not very evenly distributed.\n That also applies to the solutions to problems, like that of finding out who\u2019s telling the truth in widespread discussion. By Gibson\u2019s dictum, we should expect to find different parts of the solution, but not together, and likely in all  sorts of unexpected places. It\u2019s up to us to find them all and compose them together.\n  Finding the truth looks like a wicked problem at first glance, it\u2019s really more like a defense in depth, with constraints like preserving free speech turning into ways to filter out approaches that won\u2019t work.\n We\u2019ve been doing it since the ancient Greeks, and the other side\u2019s been fighting back that whole time: the Sophists got Socrates execute by the government of Athens, for instance.\n   I wrote before in the blog about one part, how NASDAQ dealt with illegal and merely improper stock trades on their exchange.\n To reprise, the underpinnings of their work was the law: stealing stock is illegal. Lying to incite a riot is also illegal. However, neither is particularly common. Much more common is honest error or enthusiastic mis-statement.\n The next layer \u201cup\u201d is the agreement all the traders signed to be members of the exchange, and to trade stock. It provides for rules, which like city by-laws, have to be in compliance with the basic law.\n If someone makes an improper trade, they can be cautioned the first time, given a small fine the second, and a whopping fine the third. Historically, the first two are the majority of the cases: Only a very few people are actually evil geniuses running stock scams or trying to fix an election,\n In addition, the work of policing trades was broken into chunks, with the exchange starting small, with accidents. They split those off from gross evils, and broke that group down in turn by whether something was hard or easy to detect.\n Their big advantage was that there was money on the table, and that people had agreed to the rules. Catching and fining crooks and crooklets made it pay for itself, which makes their approach, all by itself, something that could be used by a for-money operation like \u201cmonetized\u201d YouTube channels\n All of the above applies to finding lies, except for the money. That makes it doubly important to start small, and not try to boil the whole ocean at once.\n   Once something is found to be undesirable, such as a dog-whistle article inciting murder, all the copies can be found, plus all the likes and all the shares. Probably even including everyone who has seen it.\n That let a small staff deal with a large effort by an advertiser or a \u201cvirtal\u201d meme that expands quickly.\n With luck, machine learning (ML) be trained to recognize minor variants of a banned article, and refer them to the staff to be sure that\u2019s what is being recognized. Those can be treated the same way as the original posting\n But how can we credibly detect the lies in time? The kind of team a site can afford are always going to be behind.\n That is solved for a distantly related problem, one that is as as unexpectedly helpful as looking at policing stock trades\n  One of the older big discussion groups, slashdot, from its inception in 1997 needed to deal with overenthusiastic commentators, flamers and trolls. In 2020, it\u2019s still easy to \u201cread at 4 or 5\u201d, and see a measured, reasonable and informative discussion of a difficult subject. Or you could \u201cread at -1\u201d, and listen to the madmen and flamers that elsewhere would drown out the insightful comments.\n The site is driven by a commentator-as-moderator system. If your comments are moderated as informative, insightful or funny, you gain karma, and are given ten or fifteen moderator points. With them, you can mark good posts up, by 1 point per comment, and the bad posts down. The kinds of moderation range from \u201cinsightful\u201d and \u201cinformative, through \u201cunderrated\u201d and \u201coverrated\u201d, down to \u201ctroll\u201d or \u201cflamebait\u201d\n As a check in the moderators, anyone can \u201cmeta-moderate\u201d, and vote on whether the moderators were being fair.\n Of course, you can\u2019t moderate comments on an arrtcle you\u2019e commented on yourself, to avoid self-serving behavior.\n Readers can set the level of quality they want to see, from -1 to 5. \u201cReading at four\u201d will show you just the well-respected comments, rated at four to five.\n  Start with human commentators who have been moderated as truthful by their peers, and give them each a handful of points, to rate comments from \u201celegantly argues truths\u201d to \u201cweasel-worded or \u201cpublic relations\u201d down to \u201cillogical\u201d, \u201ctwisted\u201d \u201csophistry\u201d or \u201cthe lie direct\u201d\n Allow anyone to meta-moderate, to police the moderators, and prohibit moderating and commenting on the same article.\n Now, feed the opinions of the moderators to the human staff, who act as auditors, not moderators.\n If the auditors agree that a statement is a dog-whistle, use automation to flag it, and to look for other examples of the same \u201cveiled speech\u201d in other posts.\n Feed those as candidates back to the auditors, to keep the ML from turning itself into a troll!\n With humans, the auditors can warn and teach the honestly mistaken, although just being moderated down can moderate the over-enthusiastic. If they can\u2019t, their membership can be suspended, and in extreme cases, they can be turned over to the police\n That\u2019s my three-part composition: I\u2019m sure there are more that I\u2019ve never heard of.\n Keep the humans honest, and throw the Sophists over the side of the bridge, to the the trolls.", "posttime": "2020-07-06 02:00:25", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "facebook,answer,\u8fdb\u884c", "title": "Slashdot\u662fFacebook\u5047\u65b0\u95fb\u95ee\u9898\u7684\u7b54\u6848\u5417\uff1f", "title_en": "Is Slashdot the Answer to Facebook's Fake News Problem?", "transed": 1, "url": "https://leaflessca.wordpress.com/2020/06/21/composing-an-arbiter-of-truth/", "via": "", "real_tags": ["facebook", "answer", "\u8fdb\u884c"]}, {"category": "", "categoryclass": "", "imagename": "266534afd2860ee4071d5ef1902d9615.png", "infoid": 1009963, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65b0\u7684\u201cPKG\u548c\u5b58\u50a8\u534f\u8bae\u201d\u548c\u968f\u4e4b\u800c\u6765\u7684\u4e3b\u673a\u5305\u96c6\u4e2d\u670d\u52a1\u5df2\u7ecf\u5408\u5e76\uff0c\u5e76\u51fa\u73b0\u5728JuliaV1.5.0-RC1\u4e2d\u3002\u65b0\u7684PKG\u5c06\u7531\u7279\u5b9a\u4e8e\u7528\u6237\u7684UUID\u548c\u5176\u4ed6\u4fe1\u606f\u7ec4\u6210\u7684\u9065\u6d4b\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u5728\u90a3\u91cc\u5b83\u7528\u4e8e\u7edf\u8ba1\u7528\u6237\u6570\u548c\u5176\u4ed6\u7edf\u8ba1\u6570\u636e\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u56de\u7b54\u201c\u6709\u591a\u5c11Julia\u7528\u6237\uff1f\u201d\u5728\u7b79\u6b3e\u65b9\u9762\u3002\u5f53\u524d\u534f\u8bae\u662f\u9009\u62e9\u9000\u51fa\uff0c\u8fd9\u610f\u5473\u7740\u9664\u975e\u7528\u6237\u66f4\u6539\u914d\u7f6e\uff0c\u5426\u5219\u5c06\u6536\u96c6\u8fd9\u4e9b\u7edf\u8ba1\u6570\u636e.", "note_en": "New \u201cPkg & Storage protocols\u201d and an accompanying centralized service to host packages have been merged and are present in Julia v1.5.0-rc1. The new Pkg sends telemetry consisting of a user-specific UUID and other information to the server, where it is used to count the number of users and other stats. The goal is to answer the question \u201cHow many Julia users are there?\u201d in fundraising.  The current protocol is opt-out, meaning that these stats are collected unless a user changes a configuration ...", "posttime": "2020-07-06 01:59:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "julia,language,\u534f\u8bae", "title": "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6253\u5f00Julia\u8bed\u8a00\u9065\u6d4b", "title_en": "Julia Language Telemetry on by Default", "transed": 1, "url": "https://discourse.julialang.org/t/pkg-jl-telemetry-should-be-opt-in/", "via": "", "real_tags": ["julia", "language", "\u534f\u8bae"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1009962, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u539f\u672c\u662fZero to Production\u7684\u4e00\u90e8\u5206\uff0c\u7528\u6765\u89e3\u91ca\u6211\u4eec\u9009\u62e9\u6280\u672f\u80cc\u540e\u7684\u539f\u56e0\u3002\u5b83\u6700\u7ec8\u53d8\u5f97\u5982\u6b64\u4e4b\u5927\uff0c\u6210\u4e3a\u4e86\u81ea\u5df1\u7684\u6587\u7ae0\uff01\n\u5982\u679c\u60a8\u8981\u5f00\u59cb\u5728Rust\u4e2d\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u53ef\u6295\u5165\u751f\u4ea7\u7684API\uff0c\u60a8\u5e94\u8be5\u9009\u62e9\u54ea\u4e00\u4e2a\uff1f\n\u5f53\u6d89\u53ca\u5230\u4ee5\u4e0b\u95ee\u9898\u65f6\uff0c\u6211\u5c06\u5206\u6790\u6bcf\u4e2aWeb\u6846\u67b6\u6240\u5904\u7684\u4f4d\u7f6e\uff1a\n\u6700\u540e\uff0c\u6211\u4f1a\u63d0\u51fa\u6211\u7684\u5efa\u8bae\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6ca1\u6709\u7edd\u5bf9\u7684\u9009\u62e9\uff1a\u4e0d\u540c\u7684\u73af\u5883(\u548c\u54c1\u5473)\u53ef\u80fd\u4f1a\u8ba9\u4f60\u505a\u51fa\u4e0d\u540c\u7684\u9009\u62e9\u3002\nActix-web\u3001Tend\u548cWARP\u90fd\u662f\u8f7b\u8584\u7684Web\u6846\u67b6\uff1a\u5b83\u4eec\u4e3a\u60a8\u63d0\u4f9bHTTP Web\u670d\u52a1\u5668\u3001\u8def\u7531\u903b\u8f91\u3001\u4e2d\u95f4\u4ef6\u57fa\u7840\u8bbe\u65bd\u4ee5\u53ca\u7528\u4e8e\u89e3\u6790\u3001\u64cd\u4f5c\u548c\u54cd\u5e94HTTP\u8bf7\u6c42\u7684\u57fa\u672c\u6784\u5efa\u5757\u548c\u62bd\u8c61\u3002\nRocket\u91c7\u53d6\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5-\u5b83\u7684\u76ee\u6807\u662f\u5305\u62ec\u7535\u6c60\uff1a\u6700\u5e38\u89c1\u7684\u9700\u6c42\u5e94\u8be5\u7531\u706b\u7bad\u672c\u8eab\u63d0\u4f9b\u7684\u5f00\u7bb1\u5373\u7528\u7684\u529f\u80fd\u6765\u6ee1\u8db3\uff0c\u5982\u679c\u60a8\u7684\u7528\u4f8b\u9700\u8981\uff0c\u53ef\u4ee5\u4f7f\u7528\u6302\u94a9\u6765\u6269\u5c55Rocket\u3002\u56e0\u6b64\uff0cRocket\u53d1\u5e03\u4e86\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u96c6\u6210\u6765\u7ba1\u7406\u51e0\u4e2a\u6d41\u884c\u6570\u636e\u5e93(\u4f8b\u5982Postgres\u3001Redis\u3001Memcache\u7b49)\u7684\u8fde\u63a5\u6c60\uff0c\u8fd9\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\u4ee5\u53ca\u5b83\u81ea\u5df1\u7684\u914d\u7f6e\u7cfb\u7edf\u5728\u706b\u7bad-Conrib\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b58\u653e\u5728\u706b\u7bad\u81ea\u5df1\u7684\u50a8\u5b58\u5e93\u4e2d\u7684\u8f85\u52a9\u677f\u6761\u7bb1\u3002\nActix-web\u3001\u6d6a\u6f6e\u548cWARP\u5728\u672c\u8d28\u4e0a\u66f4\u63a5\u8fd1Python\u4e2d\u7684Flask\u6216Javascript\u4e2d\u7684Express-\u5b83\u4eec\u53ef\u80fd\u6709\u4e9b\u56fa\u6267\u5df1\u89c1\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u63d0\u4f9b\u914d\u7f6e\u7ba1\u7406\u7cfb\u7edf\u6216ORM\u96c6\u6210\u3002\u60a8\u8d1f\u8d23\u6784\u5efa\u60a8\u8ba4\u4e3a\u5408\u9002\u7684API\uff0c\u5c06\u6240\u6709\u5fc5\u8981\u7684\u677f\u6761\u7bb1\u548c\u56fe\u6848\u5e26\u5230\u753b\u9762\u4e2d\uff1b\nRocket\u66f4\u63a5\u8fd1Python\u4e2d\u7684Django\u6216PHP\u4e2d\u7684Symphony\uff1a\u4e00\u4e2a\u7a33\u5b9a\u800c\u575a\u5b9e\u7684\u6838\u5fc3\uff0c\u5e26\u6709\u4e00\u7ec4\u9ad8\u8d28\u91cf\u7684\u6811\u5185\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u6ee1\u8db3\u60a8\u6784\u5efa\u53ef\u9760Web\u5e94\u7528\u7a0b\u5e8f\u65f6\u7684\u65e5\u5e38\u9700\u6c42\u3002\u8981\u60f3\u5728\u5e7f\u5ea6\u548c\u8303\u56f4\u4e0a\u8d76\u4e0a\u540c\u884c\uff0c\u706b\u7bad\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\uff0c\u4f46\u5b83\u80af\u5b9a\u6709\u4e86\u4e00\u4e2a\u826f\u597d\u7684\u5f00\u7aef\u3002\n\u5f53\u7136\uff0c\u8fd9\u662f\u76ee\u524d\u60c5\u51b5\u7684\u5feb\u7167\uff0c\u4f46\u60c5\u51b5\u6b63\u5728\u6839\u636e\u7ef4\u62a4\u4eba\u5458\u7684\u610f\u56fe\u4e0d\u65ad\u53d8\u5316-\u4f8b\u5982\uff0c\u5728Actix GitHub\u7ec4\u7ec7\u7684\u4fdd\u62a4\u4f1e\u4e0b\uff0cActix-web\u5728Actix-Extras\u4e2d\u6162\u6162\u79ef\u7d2f\u4e86\u8d8a\u6765\u8d8a\u591a\u7684\u652f\u6301\u529f\u80fd(\u4ece\u5b89\u5168\u5230\u4f1a\u8bdd\u7ba1\u7406)\u3002\u6b64\u5916\uff0c\u4f7f\u7528\u8f7b\u8584\u7684Web\u6846\u67b6\u5e76\u4e0d\u4f1a\u5f3a\u8feb\u60a8\u5728\u6846\u67b6\u4e0d\u80fd\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\u65f6\u7acb\u5373\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u6240\u6709\u5185\u5bb9\uff1a\u60a8\u53ef\u4ee5\u5229\u7528\u5176\u5468\u56f4\u793e\u533a\u6784\u5efa\u7684\u751f\u6001\u7cfb\u7edf\u6765\u907f\u514d\u5728\u6bcf\u4e2a\u9879\u76ee\u4e0a\u91cd\u590d\u53d1\u660e\u8f6e\u5b50\u3002\n\u6570\u5b57\u53ef\u80fd\u4f1a\u8bef\u5bfc\u4eba\uff0c\u4f46\u5b83\u4eec\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8c08\u8bdd\u8d77\u70b9\u3002\u770b\u770bcrates.io\uff0c\u6211\u4eec\u6709\uff1a\n\u603b\u4e0b\u8f7d\u91cf\u660e\u663e\u53d7\u5230\u6846\u67b6\u5b58\u5728\u65f6\u95f4\u7684\u5f71\u54cd(\u4f8b\u5982\uff0cActix-web\uff1a0.1.0\u662f\u57282017\u5e74\u5e95\u53d1\u5e03\u7684\uff01)\u3002\u867d\u7136\u6bcf\u5929\u7684\u4e0b\u8f7d\u91cf\u662f\u8861\u91cf\u5f53\u524d\u4eba\u4eec\u5bf9\u5b83\u7684\u5174\u8da3\u7a0b\u5ea6\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u6807\u51c6\u3002\n\u591a\u5e74\u7684\u6301\u7eed\u751f\u4ea7\u4f7f\u7528\u4f7f\u5f97\u60a8\u4e0d\u592a\u53ef\u80fd\u6210\u4e3a\u7b2c\u4e00\u4e2a\u53d1\u73b0\u91cd\u5927\u7f3a\u9677\u7684\u4eba\u3002\u5176\u4ed6\u4eba\u54ed\u662f\u4e3a\u4e86\u8ba9\u4f60\u7b11(\u5927\u591a\u6570\u65f6\u5019)\uff1b\n\u5b83\u4e0e\u4f60\u5728\u82e6\u82e6\u6323\u624e\u65f6\u53ef\u80fd\u627e\u5230\u7684\u6559\u7a0b\u3001\u6587\u7ae0\u548c\u5e2e\u624b\u7684\u6570\u91cf\u76f8\u5173\u3002\n\u7b2c\u4e8c\u70b9\u5bf9\u4e8e\u8d85\u8584\u6846\u67b6\u5c24\u5176\u91cd\u8981\u3002\u901a\u8fc7\u5728\u641c\u7d22\u6846\u67b6\u540d\u79f0\u65f6\u67e5\u770bcrates.io\u4e0a\u5f39\u51fa\u7684\u7ed3\u679c\u6570\u91cf\uff0c\u60a8\u53ef\u4ee5\u518d\u6b21\u611f\u53d7\u5230\u793e\u533a\u5927\u5c0f\u7684\u5f71\u54cd\uff1a\n\u6240\u6709\u8fd9\u4e9b\u677f\u6761\u7bb1\u90fd\u662f\u76f8\u5173\u7684\u5417\uff1f\u4e0d\u592a\u53ef\u80fd\u3002\u5b83\u4eec\u4e2d\u4f1a\u6709\u76f8\u5f53\u4e00\u90e8\u5206\u662f\u8fc7\u65f6\u7684\u6216\u672a\u7ecf\u8bc1\u5b9e\u7684\u5417\uff1f\u4e00\u5b9a\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u5728\u5f00\u59cb\u4e00\u4e2a\u9879\u76ee\u4e4b\u524d\uff0c\u5feb\u901f\u67e5\u770b\u4e00\u4e0b\u60a8\u6240\u77e5\u9053\u7684\u529f\u80fd\u4ee5\u4e86\u89e3\u60a8\u5c06\u9700\u8981\u7684\u529f\u80fd\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u8ba9\u6211\u4eec\u5feb\u901f\u4e3e\u4f8b\u8bf4\u660e\u6211\u4eec\u5728Zero to Production\u6784\u5efa\u7684\u7535\u5b50\u90ae\u4ef6\u65f6\u4e8b\u901a\u8baf\u5b9e\u73b0\u4e2d\u5c06\u4f9d\u8d56\u7684\u529f\u80fd\uff1a\n\u5982\u679c\u60a8\u9700\u8981\u5c06\u666e\u7f57\u7c73\u4fee\u65af\u7684\u6307\u6807\u6dfb\u52a0\u5230\u60a8\u7684API\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528Actix-web-PROM\u6216Rocket-Prometheus\u5728\u51e0\u5206\u949f\u5185\u4e0a\u624b\uff0c\u4e24\u8005\u90fd\u6709\u6570\u5343\u7684\u4e0b\u8f7d\u91cf\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7fd8\u66f2\u6216\u6f6e\u6c50\uff0c\u4f60\u5c06\u4e0d\u5f97\u4e0d\u4ece\u5934\u5f00\u59cb\u5199\u79ef\u5206\uff1b\n\u5982\u679c\u60a8\u60f3\u6dfb\u52a0\u5206\u5e03\u5f0f\u8ddf\u8e2a\uff0cActix-web-opentelemeter\u5c06\u4e3a\u60a8\u63d0\u4f9b\u652f\u6301\u3002\u5982\u679c\u60a8\u9009\u62e9\u4efb\u4f55\u5176\u4ed6\u6846\u67b6\uff0c\u5219\u5fc5\u987b\u91cd\u65b0\u5b9e\u73b0\u5b83\u3002\n\u8fd9\u4e9b\u529f\u80fd\u4e2d\u7684\u5927\u591a\u6570\u90fd\u4e0d\u662f\u5f88\u96be\u5b9e\u73b0\u7684\u5de5\u4f5c\uff0c\u4f46\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8fd9\u4e9b\u5de5\u4f5c(\u7279\u522b\u662f\u7ef4\u62a4)\u4f1a\u53d8\u5f97\u590d\u6742\u3002\u60a8\u9700\u8981\u7741\u5927\u773c\u775b\u9009\u62e9\u60a8\u7684\u6846\u67b6\uff0c\u4e86\u89e3\u5b83\u5c06\u9700\u8981\u7684\u627f\u8bfa\u7ea7\u522b\u3002\nRust\u57281.39\u7248\u672c\u4e2d\u5f15\u5165\u4e86Async/Await\u8bed\u6cd5--\u5728\u5f02\u6b65\u7f16\u7a0b\u7684\u4eba\u673a\u5de5\u7a0b\u5b66\u65b9\u9762\u6539\u53d8\u4e86\u6e38\u620f\u89c4\u5219\u3002\u6574\u4e2aRust\u751f\u6001\u7cfb\u7edf\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u624d\u8d76\u4e0a\u5e76\u91c7\u7528\u5b83\uff0c\u4f46\u516c\u5e73\u5730\u8bf4\uff0c\u73b0\u5728\u5904\u7406IO\u7ed1\u5b9a\u5de5\u4f5c\u8d1f\u8f7d\u7684\u677f\u6761\u7bb1\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u5f02\u6b65\u4f18\u5148\u7684(\u4f8b\u5982\uff0creqwest)\u3002\n\u90a3\u4e48Web\u6846\u67b6\u5462\uff1fActix-web\u5728\u51760.2.x\u7248\u672c\u4e2d\u91c7\u7528\u4e86\u5f02\u6b65/\u7b49\u5f85\uff0c\u4e0eWARP\u76f8\u540c\uff0c\u800c\u6d6a\u6f6e\u5728\u7a33\u5b9a\u4e4b\u524d\u4f7f\u7528\u5f02\u6b65/\u7b49\u5f85\uff0c\u8fd9\u4f9d\u8d56\u4e8eNightly Rust\u7f16\u8bd1\u5668\u3002\u76f8\u53cd\uff0cRocket\u4ecd\u7136\u516c\u5f00\u540c\u6b65\u63a5\u53e3\u3002\u5f02\u6b65/\u7b49\u5f85\u652f\u6301\u9884\u8ba1\u5c06\u4f5c\u4e3a\u5176\u4e0b\u4e00\u4e2a0.5\u7248\u672c\u7684\u4e00\u90e8\u5206\uff0c\u81ea\u53bb\u5e74\u590f\u5929\u4ee5\u6765\u4e00\u76f4\u5728\u915d\u917f\u4e4b\u4e2d\u3002\n\u60a8\u662f\u5426\u5e94\u8be5\u6392\u9664Rocket\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u884c\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u8fd8\u4e0d\u652f\u6301\u5f02\u6b65\u7f16\u7a0b\uff1f\u90a3\u5f97\u770b\u60c5\u51b5\u3002\u5982\u679c\u60a8\u6b63\u5728\u5b9e\u73b0\u4e00\u4e2a\u5177\u6709\u4e25\u683c\u6027\u80fd\u8981\u6c42\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u5904\u7406\u5927\u91cf\u6d41\u91cf\uff0c\u90a3\u4e48\u9009\u62e9\u5f02\u6b65web\u6846\u67b6\u53ef\u80fd\u4f1a\u66f4\u597d\u3002\u5982\u679c\u4e0d\u662f\u8fd9\u6837\uff0c\u706b\u7bad\u7f3a\u4e4f\u5f02\u6b65\u652f\u6301\u4e0d\u5e94\u8be5\u662f\u4f60\u4e3b\u8981\u5173\u5fc3\u7684\u95ee\u9898\u4e4b\u4e00\u3002\n\u5f02\u6b65/\u7b49\u5f85\u5e76\u4e0d\u90fd\u662f\u9633\u5149\u548c\u73ab\u7470\u3002Rust\u4e2d\u7684\u5f02\u6b65\u7f16\u7a0b\u6784\u5efa\u5728Future\u7279\u6027\u4e4b\u4e0a\uff1aFuture\u516c\u5f00\u4e00\u4e2aPoll\u65b9\u6cd5\uff0c\u5fc5\u987b\u8c03\u7528\u8be5\u65b9\u6cd5\u624d\u80fd\u4f7f\u5c06\u6765\u53d6\u5f97\u8fdb\u5c55\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3aRust\u7684\u672a\u6765\u662f\u61d2\u60f0\u7684\uff1a\u9664\u975e\u8fdb\u884c\u6295\u7968\uff0c\u5426\u5219\u4e0d\u80fd\u4fdd\u8bc1\u4ed6\u4eec\u4f1a\u6267\u884c\u5230\u5b8c\u6210\u3002\u4e0e\u5176\u4ed6\u8bed\u8a001\u91c7\u7528\u7684\u63a8\u6a21\u578b\u76f8\u6bd4\uff0c\u8fd9\u901a\u5e38\u88ab\u63cf\u8ff0\u4e3a\u62c9\u6a21\u578b\uff0c\u5f53\u6d89\u53ca\u5230\u6027\u80fd\u548c\u4efb\u52a1\u53d6\u6d88\u65f6\uff0c\u8fd9\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u542b\u4e49\u3002\n\u4e0d\u8fc7\uff0c\u8bf7\u7a0d\u7b49\u7247\u523b--\u5982\u679c\u671f\u8d27\u662f\u61d2\u60f0\u7684\uff0c\u5e76\u4e14Rust\u6ca1\u6709\u5728\u5176\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u8fd0\u884c\u65f6\uff0c\u90a3\u4e48\u8c01\u8d1f\u8d23\u8c03\u7528Poll\u65b9\u6cd5\u5462\uff1fBRON-\u81ea\u5e26\u8fd0\u884c\u65f6\uff01\u5f02\u6b65\u8fd0\u884c\u65f6\u5b9e\u9645\u4e0a\u662f\u9879\u76ee\u7684\u4f9d\u8d56\u9879\uff0c\u4f5c\u4e3a\u677f\u6761\u7bb1\u5f15\u5165\u3002\u8fd9\u4e3a\u60a8\u63d0\u4f9b\u4e86\u6781\u5927\u7684\u7075\u6d3b\u6027\uff1a\u60a8\u786e\u5b9e\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u8fd0\u884c\u5e93\uff0c\u8fd9\u4e9b\u8fd0\u884c\u5e93\u7ecf\u8fc7\u4f18\u5316\u4ee5\u6ee1\u8db3\u60a8\u7684\u7528\u4f8b\u7684\u7279\u5b9a\u9700\u6c42(\u8bf7\u53c2\u9605Fuchsia\u9879\u76ee\u6216\u5821\u5792\u7684\u53c2\u4e0e\u8005\u6846\u67b6)\uff0c\u6216\u8005\u6839\u636e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u9700\u8981\u7b80\u5355\u5730\u6839\u636e\u5177\u4f53\u60c5\u51b5\u9009\u62e9\u6700\u5408\u9002\u7684\u8fd0\u884c\u5e93\u3002\u8fd9\u5728\u7406\u8bba\u4e0a\u542c\u8d77\u6765\u5f88\u68d2\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u5374\u6ca1\u6709\u90a3\u4e48\u5438\u5f15\u4eba\uff1a\u76ee\u524d\u8fd0\u884c\u65f6\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u5f88\u5dee\uff1b\u6df7\u5408\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u5f88\u75db\u82e6\uff0c\u901a\u5e38\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u76f4\u63a5\u5206\u7c7b\u3001\u68c0\u6d4b\u6216\u89e3\u51b3\u7684\u95ee\u9898\u3002\u867d\u7136\u5927\u591a\u6570\u5e93\u4e0d\u5e94\u8be5\u76f4\u63a5\u4f9d\u8d56\u4e8e\u8fd0\u884c\u65f6\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e\u672a\u6765\u673a\u7bb1\u516c\u5f00\u7684\u63a5\u53e3\uff0c\u4f46\u7531\u4e8e\u5386\u53f2\u5305\u88b1(\u4f8b\u5982Tokio\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u662f\u751f\u6001\u7cfb\u7edf\u4e2d\u552f\u4e00\u53ef\u7528\u7684\u8fd0\u884c\u65f6)\u3001\u5b9e\u9645\u9700\u8981(\u4f8b\u5982\u6846\u67b6\u5fc5\u987b\u80fd\u591f\u751f\u6210\u4efb\u52a1)\u6216\u7f3a\u4e4f\u6807\u51c6\u5316(\u4f8b\u5982\u6b63\u5728\u8fdb\u884c\u7684\u5173\u4e8eAsyncRead/AsyncWrite\u7279\u5f81\u7684\u8ba8\u8bba-\u53c2\u89c1\u6b64\u5904\u548c\u6b64\u5904)\uff0c\u60c5\u51b5\u5f80\u5f80\u5e76\u975e\u5982\u6b64\u3002\u56e0\u6b64\uff0c\u9009\u62e9\u4e00\u4e2a\u5f02\u6b65web\u6846\u67b6\u8d85\u8d8a\u4e86\u6846\u67b6\u672c\u8eab\uff1a\u60a8\u9009\u62e9\u4e86\u4e00\u4e2a\u677f\u6761\u7bb1\u751f\u6001\u7cfb\u7edf\uff0c\u7a81\u7136\u95f4\u4f7f\u5f97\u4f9d\u8d56\u4e0d\u540c\u7684\u5f02\u6b65\u8fd0\u884c\u65f6\u4f7f\u7528\u5e93\u53d8\u5f97\u66f4\u52a0\u9ebb\u70e6\u3002\n\u76ee\u524d\u7684\u60c5\u51b5\u5e76\u4e0d\u7406\u60f3\uff0c\u4f46\u662f\u5982\u679c\u60a8\u73b0\u5728\u7f16\u5199\u7684\u662f\u5f02\u6b65Rust\uff0c\u6211\u5efa\u8bae\u60a8\u5728\u7f16\u5199\u5f02\u6b65\u8fd0\u884c\u65f6\u8981\u614e\u91cd\u9009\u62e9\u3002\n\u76ee\u524d\u5728Rust\u4e2d\u53ef\u7528\u7684\u4e24\u4e2a\u4e3b\u8981\u901a\u7528\u5f02\u6b65\u8fd0\u884c\u65f6\u662fTokio\u548cAsync-STD\u3002Tokio\u5df2\u7ecf\u5b58\u5728\u4e86\u76f8\u5f53\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\uff0c\u5b83\u5df2\u7ecf\u770b\u5230\u4e86\u5e7f\u6cdb\u7684\u751f\u4ea7\u7528\u9014\u3002\u5b83\u662f\u76f8\u5f53\u53ef\u8c03\u7684\uff0c\u5c3d\u7ba1\u8fd9\u4f1a\u4ea7\u751f\u66f4\u5927\u3001\u66f4\u590d\u6742\u7684API\u8868\u9762\u3002Async-STD\u5927\u7ea6\u5728\u4e00\u5e74\u524d\u53d1\u5e03\uff0c\u5927\u7ea6\u5728\u5f02\u6b65/\u7b49\u5f85\u7a33\u5b9a\u7684\u65f6\u5019\u53d1\u5e03\u3002\u5b83\u63d0\u4f9b\u4e86\u5f88\u597d\u7684\u4eba\u4f53\u5de5\u7a0b\u5b66\uff0c\u800c\u7559\u7ed9\u914d\u7f6e\u65cb\u94ae\u7684\u7a7a\u95f4\u8f83\u5c0f\u3002\n\u5fc5\u987b\u94bb\u7814\u6e90\u4ee3\u7801\u6765\u7406\u89e3\u67d0\u4e9b\u4e1c\u897f\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u8da3(\u4e5f\u5f88\u6709\u6559\u80b2\u610f\u4e49\uff01)\uff0c\u4f46\u8fd9\u5e94\u8be5\u662f\u4e00\u79cd\u9009\u62e9\uff0c\u800c\u4e0d\u662f\u5fc5\u987b\u7684\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u5b81\u613f\u4f9d\u8d56\u4e8e\u8bb0\u5f55\u826f\u597d\u7684\u6846\u67b6\uff0c\u5305\u62ec\u76f8\u5173\u4f7f\u7528\u6a21\u5f0f\u7684\u91cd\u8981\u793a\u4f8b\u3002\u5982\u679c\u60a8\u662f\u56e2\u961f\u7684\u4e00\u5458\uff0c\u597d\u7684\u6587\u6863\u3001\u6559\u7a0b\u548c\u529f\u80fd\u9f50\u5168\u7684\u793a\u4f8b\u5bf9\u4e8e\u4efb\u52a1\u81f3\u5173\u91cd\u8981\uff0c\u7279\u522b\u662f\u5982\u679c\u4e00\u4e2a\u6216\u591a\u4e2a\u56e2\u961f\u6210\u5458\u4e0d\u662f\u7ecf\u9a8c\u4e30\u5bcc\u7684Rust\u5f00\u53d1\u4eba\u5458\u3002\nRust\u7684\u5de5\u5177\u5c06\u6587\u6863\u89c6\u4e3a\u4e00\u7ea7\u6982\u5ff5(\u53ea\u9700\u8fd0\u884cCargo doc--open\u5373\u53ef\u83b7\u5f97\u9879\u76ee\u7684\u81ea\u52a8\u751f\u6210\u6587\u6863\uff01)\u3002\u5b83\u9010\u6e10\u6210\u4e3a\u94c1\u9508\u793e\u533a\u81ea\u8eab\u6587\u5316\u7684\u4e00\u90e8\u5206\u3002\u56fe\u4e66\u9986\u4f5c\u8005\u901a\u5e38\u4f1a\u8ba4\u771f\u5bf9\u5f85\u5b83\uff0cWeb\u6846\u67b6\u4e5f\u4e0d\u4f8b\u5916\uff1a\u4f60\u53ef\u4ee5\u5728docs.rs\u4e0a\u627e\u5230\u76f8\u5f53\u5168\u9762\u7684\u4e1c\u897f\uff0c\u5728\u9700\u8981\u7684\u5730\u65b9\u8fd8\u4f1a\u63d0\u4f9b\u4e0a\u4e0b\u6587\u76f8\u5173\u7684\u4f8b\u5b50\u3002Rocket\u548cActix-web\u5728\u5404\u81ea\u7684\u7f51\u7ad9\u4e0a\u63d0\u4f9b\u9ad8\u7ea7\u6307\u5357\uff0c\u6240\u6709\u6846\u67b6\u90fd\u7ef4\u62a4\u4e30\u5bcc\u7684\u793a\u4f8b\u96c6\u5408\u4f5c\u4e3a\u5176\u4ee3\u7801\u5e932\u7684\u4e00\u90e8\u5206\u3002\n\u9879\u76ee\u6587\u6863\u4e4b\u5916\u7684\u6559\u7a0b\u4e3b\u8981\u662f\u5e74\u9f84\u7684\u51fd\u6570\uff1a\u5728Actix-web\u548cRocket\u4e0a\u5f88\u5bb9\u6613\u627e\u5230\u6750\u6599(\u6587\u7ae0\u3001\u6f14\u8bb2\u3001\u7814\u8ba8\u4f1a)\uff0c\u800c\u63d0\u4f9b\u7684\u5185\u5bb9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53d7\u5230\u4e86\u66f4\u591a\u7684\u9650\u5236\u3002\u53e6\u4e00\u65b9\u9762\uff0cActix-web\u548cRocket\u7684\u4e00\u4e9b\u529f\u80fd\u53ef\u80fd\u9488\u5bf9\u7684\u662f\u8f83\u8001\u7684\u7248\u672c\uff0c\u8fd9\u7ed9\u4eba\u4eec\u7559\u4e0b\u4e86\u6df7\u6dc6\u7684\u7a7a\u95f4\u3002\n\u55ef\uff0c\u5f88\u96be\u7ed9\u51fa\u4e00\u4e2a\u542c\u8d77\u6765\u5408\u7406\u5ba2\u89c2\u7684\u5173\u4e8eAPI\u8bbe\u8ba1\u7684\u610f\u89c1\u3002\u5f53\u8c08\u5230\u6211\u4eec\u6240\u8ba4\u4e3a\u7684\u4ee4\u4eba\u6109\u5feb\u7684API\u65f6\uff0c\u6211\u4eec\u90fd\u6709\u975e\u5e38\u4e0d\u540c\u7684\u54c1\u5473\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u4ee3\u66ff\u5feb\u901f\u7684\u6742\u4e71\u65e0\u7ae0\uff0c\u6765\u771f\u6b63\u611f\u53d7\u4e00\u4e0b\u4f7f\u7528\u67d0\u4e2aWeb\u6846\u67b6\u662f\u4ec0\u4e48\u6837\u5b50\u3002\n\u5982\u679c\u4f60\u65f6\u95f4\u4e0d\u591a\uff0c\u4f60\u53ef\u4ee5\u770b\u770b\u505a\u597d\u7684\u4f8b\u5b50\uff1aactix-web\u7684\u4f8b\u5b50\uff0cwarp\u7684\u4f8b\u5b50\uff0c\u6d6a\u6f6e\u7684\u4f8b\u5b50\u548c\u706b\u7bad\u7684\u4f8b\u5b50\u3002\n\u5982\u679c\u60a8\u5bf9\u626d\u66f2\u548c\u6f6e\u6c50\u611f\u5174\u8da3\uff0cImage Decay as a service\u63d0\u4f9b\u4e86\u5bf9\u5b83\u4eec\u7684API\u7684\u6df1\u5165\u5206\u6790\u3002\n\u4ece2020\u5e747\u6708\u5f00\u59cb\uff0c\u5982\u679c\u60a8\u6b63\u5728\u7528Rust\u7f16\u5199\u751f\u4ea7API\uff0c\u6211\u5efa\u8bae\u60a8\u9009\u62e9Actix-web\u3002\n\u4f9d\u8d56Tokio\u4f5c\u4e3a\u5176\u5f02\u6b65\u8fd0\u884c\u65f6\uff0c\u4ece\u800c\u5c06\u4e0e\u5f02\u6b65\u751f\u6001\u7cfb\u7edf\u4e2d\u6700\u6d41\u884c\u7684\u677f\u6761\u7bb1\u7684\u517c\u5bb9\u6027\u95ee\u9898\u7684\u53ef\u80fd\u6027\u964d\u81f3\u6700\u4f4e\uff1b\n\u867d\u7136\u5b83\u7684\u4e00\u4e9bAPI\u7edd\u5bf9\u4e0d\u662f\u6700\u7b26\u5408\u4eba\u4f53\u5de5\u7a0b\u5b66\u7684(\u6211\u770b\u7740\u4f60\uff0cTransform Character)\uff0c\u4f46\u4ece\u5404\u65b9\u9762\u8003\u8651\uff0c\u4e0d\u4fbf\u80af\u5b9a\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6ca1\u6709\u4eba\u613f\u610f\u62bc\u6ce8\u4e8e\u4e00\u9879\u524d\u666f\u5149\u660e\u4f46\u9a8c\u8bc1\u7a0b\u5ea6\u8f83\u4f4e\u7684\u6280\u672f\uff0c\u94c1\u9508\u672c\u8eab\u5c31\u4e0d\u4f1a\u6709\u4eca\u5929\u7684\u5730\u4f4d\uff1a\n\u6f6e\u6c50\u548c\u7fd8\u66f2\u6b63\u5728\u63a8\u52a8\u4f7f\u7528\u5f02\u6b65\u751f\u9508\u5728\u4eba\u4f53\u5de5\u7a0b\u5b66\u65b9\u9762\u53ef\u80fd\u5b9e\u73b0\u7684\u6781\u9650\uff1b\n\u5373\u5c06\u53d1\u5e03\u7684\u706b\u7bad\u5c06\u662f\u5927\u89c4\u6a21\u7684\uff0c\u56e0\u4e3a\u5b83\u91c7\u7528\u4e86\u5f02\u6b65/\u7b49\u5f85\uff0c\u4ee5\u53ca\u4ece\u591c\u95f4\u5230\u7a33\u5b9a\u7684Rust\u7f16\u8bd1\u5668\u7684\u8fc1\u79fb\u3002\n\u8fd9\u5c31\u662f\u8bf4\uff0c\u5b83\u7684\u540d\u5b57\u6765\u81ea\u4e8e\u54ea\u80a1\u6d6a\u6f6e\uff0c\u6574\u4e2a\u94c1\u9508\u5f02\u6b65\u751f\u6001\u7cfb\u7edf\u7684\u524d\u8fdb\u65b9\u5411\u3002\u4e00\u5e74\u540e\u518d\u6765\u770b\u53e6\u4e00\u7bc7\u7efc\u8ff0\uff01\n\u611f\u8c22o0igition0o\u548cvertexcique\u82b1\u65f6\u95f4\u5ba1\u9605\u4e86\u672c\u6587\u7684\u8349\u7a3f\u3002\n\u5982\u679c\u60a8\u60f3\u5728\u672c\u535a\u5ba2\u53d1\u5e03\u65b0\u6587\u7ae0\u65f6\u6536\u5230\u901a\u77e5\uff0c\u8bf7\u8ba2\u9605\u7535\u5b50\u90ae\u4ef6\u65f6\u4e8b\u901a\u8baf\u3002\n\u8bf7\u67e5\u770b\u5f02\u6b65/\u7b49\u5f85\u7684\u53d1\u884c\u8bf4\u660e\u4ee5\u4e86\u89e3\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002\u5728Rust LATAM 2019\u4e0a\u7684\u65e0\u8239\u6f14\u8bb2\u662f\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u53e6\u4e00\u4e2a\u6781\u597d\u7684\u53c2\u8003\u3002\u5982\u679c\u4f60\u66f4\u559c\u6b22\u4e66\u800c\u4e0d\u662f\u6f14\u8bb2\uff0c\u90a3\u5c31\u53bb\u770b\u770b\u201c200\u884c\u751f\u9508\u201d\u4e2d\u89e3\u91ca\u7684\u671f\u8d27\u5427\u3002[\u8fd4\u56de]", "note_en": "This post was originally meant as a section of   Zero To Production to explain the reasoning behind our technology choice. It eventually grew so large to be its own article!\n   Which one should you pick if you are about to start building a new  production-ready API in Rust?\n I will break down where each of those web frameworks stands when it comes to:\n  I will in the end make  my recommendation. Worth remarking that there are no absolutes: different circumstances (and taste) might lead you to a different pick.\n  actix-web,  tide and  warp are  slim web frameworks: they offer you an HTTP web server, routing logic, middleware infrastructure and basic building blocks and abstractions to parse, manipulate and respond to HTTP requests.\n rocket takes a different approach - it aims to be batteries-included: the most common needs should be covered by functionality provided out-of-the-box by  rocket itself, with hooks for you to extend  rocket if your usecase needs it. It should not come as a surprise then that  rocket ships an easy-to-use  integration to manage connection pools for several popular database (e.g. Postgres, Redis, Memcache, etc.) as well as its own  configuration system in   rocket-contrib, an ancillary crate hosted in  rocket\u2019s own repository.\n  actix-web,  tide and  warp are closer in spirit to   Flask from Python or   Express from Javascript - they might be opinionated, but they do not ship a configuration management system or an ORM integration out of the box. You are in charge of structuring your API as you deem appropriate, bringing all the necessary crates and patterns into the picture;\n rocket is closer to   Django from Python or   Symphony from PHP: a stable and solid core with a set of high-quality in-tree components to fulfill your every day needs when building a solid web application.  rocket has still a long way to go to match its peers in breadth and scope, but it is definitely off to a good start.\n Of course this is a snapshot of the landscape as of today, but the situation is continuously shifting according to the maintainers\u2019 intentions - e.g.  actix-web has slowly been accumulating more and more supporting functionality (from security to session management) in   actix-extras, under the umbrella of the  actix GitHub organization. Furthermore, using a slim web framework does not force you to write everything from scratch as soon as the framework is falling short of your needs: you can leverage the ecosystem built by the community around it to avoid re-inventing the wheel on every single project.\n  Numbers can be misleading, but they are a good conversation starting point. Looking at  crates.io, we have:\n  The number of total downloads is obviously influenced by how long a framework has been around (e.g.  actix-web:0.1.0 came out at the end of 2017!) while daily downloads are a good gauge for the current level of interest around it.\n  consistent production usage over years makes it way less likely that you are going to be the first one to spot a major defect. Others cried so that you could smile (most of the time);\n  it correlates with the amount of tutorials, articles and helping hands you are likely to find if you are struggling.\n The second point is particularly important for slim frameworks. You can get a feel of the impact of community size, once again, by looking at the number of results popping up on  crates.io when searching a framework name:\n  Will all those crates be relevant? Unlikely. Will a fair share of them be outdated or unproven? Definitely.\n Nonetheless it is a good idea, before starting a project, to have a quick look for functionality you know for a fact you will need. Let\u2019s make a couple of quick examples with features we will be relying on in the email newsletter implementation we are building in  Zero To Production:\n if you need to add Prometheus\u2019 metrics to your API you can get off the ground in a couple of minutes with   actix-web-prom or   rocket-prometheus, both with thousands of downloads. If you are using  warp or  tide you will have to write the integration from scratch;\n if you want to add distributed tracing,   actix-web-opentelemetry has your back. You will have to re-implement it if you choose any other framework.\n Most of these features are not too much work to implement, but the effort (especially maintenance) compounds over time. You need to choose your framework with your eyes wide open on the level of commitment it is going to require.\n  Rust landed its  async/ await syntax in version  1.39 - a game changer in terms of ergonomics for asynchronous programming. It took some time for the whole Rust ecosystem to catch up and adopt it, but it\u2019s fair to say that crates dealing with IO-bound workloads are now generally expected to be async-first (e.g.  reqwest).\n What about web frameworks?  actix-web adopted  async/ await with its  0.2.x release, same as  warp, while  tide was using  async/ await before its stabilisation relying on the  nightly Rust compiler.  rocket, instead, still exposes a synchronous interface.  async/ await support is expected as part of its next  0.5 release,  in the making since last summer.\n Should you rule out  rocket as a viable option because it does not yet support asynchronous programming? It depends. If you are implementing an application to handle high volumes of traffic with strict performance requirements it might be better to opt for an async web framework. If that is not the case, the lack of async support in  rocket should not be one of your primary concerns.\n  async/ await is not all sunshine and roses. Asynchronous programming in Rust is built on top of the  Future trait: a future exposes a  poll method which has to be called to allow the future to make progress. You can think of Rust\u2019s futures as  lazy: unless polled, there is no guarantee that they will execute to completion. This is often been described as a  pull model compared to the  push model adopted by other languages  1, which has some interesting implications when it comes to performance and task cancellation.\n Wait a moment though - if futures are lazy and Rust does not ship a runtime in its standard library, who is in charge to call the  poll method?  BRON -  Bring  Your  Own  Runtime! The async runtime is literally a dependency of your project, brought in as a crate. This provides you with a great deal of flexibility: you could indeed implement your own runtime optimised to cater for the specific requirements of your usecase (see  the Fuchsia project or   bastion\u2019s actor framework) or simply choose the most suitable on a case-by-case basis according to the needs of your application. That sounds amazing on paper, but reality is a bit less glamorous: interoperability between runtimes is quite poor at the moment; mixing runtimes can be painful, often causing issues that are not straight-forward either to triage, detect or solve. While most libraries should not depend on runtimes directly, relying instead on the interfaces exposed by the   futures crate, this is often not the case due to historical baggage (e.g.  tokio was for a long time the only available runtime in the ecosystem), practical needs (e.g. a framework has to be able to spawn tasks) or lack of standardisation (e.g. the ongoing discussion on the  AsyncRead/ AsyncWrite traits - see  here and  here). Therefore picking an async web framework goes beyond the framework itself: you are choosing an ecosystem of crates, suddenly making it much more cumbersome to consume libraries relying on a different async runtime.\n The current state of affairs is far from ideal, but if you are writing async Rust today I\u2019d recommend you to make a  deliberate choice when it comes to your async runtime.\n The two main general-purpose async runtimes currently available in Rust are   tokio and   async-std.  tokio has been around for quite some time and it has seen extensive production usage. It is fairly tunable, although this results in a larger and more complex API surface.  async-std was released almost a year ago, around the time of  async/ await stabilization. It provides great ergonomics, while leaving less room for configuration knobs.\n      Having to dive into the source code to understand how something works can be fun (and educational!), but it should be a choice, not a necessity. In most situations I\u2019d rather rely on the framework being well-documented, including non-trivial examples of relevant usage patterns. Good documentation, tutorials and fully-featured examples are  mission-critical if you are working as part of a team, especially if one or more teammates are not experienced Rust developers.\n Rust\u2019s tooling treats documentation as a first class concept (just run  cargo doc --open to get auto-generated docs for your project!) and it grew to be part of the culture of the Rust community itself. Library authors generally take it seriously and web frameworks are no exception to the general tendency: what you can find on  docs.rs is quite thorough, with contextual examples where needed.  rocket and  actix-web provide high-level guides on the respective websites and all frameworks maintain a rich collection of examples as part of their codebases  2.\n Tutorials outside of the project documentation are mostly a function of age: it\u2019s very easy to find material (articles, talks, workshops) on  actix-web and  rocket while the offering is somewhat more limited for  warp and  tide. On the flip side, some of what is out there for  actix-web and  rocket might target older versions, leaving room for confusion.\n  Well, difficult to give an opinion on API design that sounds legitimately objective. We all have wildly different tastes when it comes to what we consider a pleasant API and there is no substitute for a quick hack-and-go to really get a feel for what it is like to use a certain web framework.\n If you are short on time, you can have a look at worked out examples:  actix-web\u2019s examples,  warp\u2019s examples,  tide\u2019s examples and  rocket\u2019s examples.\n If you are curious about  warp and  tide,   Image decay as a service provides an in-depth analysis of their APIs.\n  As of July 2020, I\u2019d suggest picking  actix-web if you are writing a production API in Rust.\n  relies on  tokio as its async runtime, thus minimising the likelihood of compatibility issues with the most popular crates in the async ecosystem;\n While some of its APIs are definitely not the most ergonomic (I am looking at you,  Transform trait), the inconvenience is definitely minor all things considered.\n On the flip side, Rust itself would not be where it is today if nobody had been willing to take a bet on a promising but less proven technology:\n tide and  warp are pushing the boundary of what is possible in terms of ergonomics using async Rust;\n the upcoming  rocket release is going to be massive, both for its adoption of  async/ await as well as for the migration from  nightly to the stable Rust compiler.\n  The way of saying from which  tide takes its name, the way forward for the whole Rust async ecosystem. See you again in a year for another overview!\n Thanks to  o0Ignition0o and  vertexclique for taking the time to review the draft of this article.\n  If you want to be notified when new articles are released on this blog,  subscribe to the email newsletter.\n Check out  the release notes of  async/ await for more details. The  talk by  withoutboats at Rust LATAM 2019 is another excellent reference on the topic. If you prefer books to talks, check out  Futures Explained in 200 Lines of Rust.    [return]", "posttime": "2020-07-06 01:59:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,rust,\u9508\u8680,\u6846\u67b6", "title": "\u9009\u62e9\u9508\u8680Web\u6846\u67b6\uff0c2020\u7248", "title_en": "Choosing a Rust web framework, 2020 edition", "transed": 1, "url": "https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/", "via": "", "real_tags": ["2020", "rust", "\u9508\u8680", "\u6846\u67b6"]}, {"category": "", "categoryclass": "", "imagename": "20f8ecf87d857c0cf6ab9c33bc560d32.jpg", "infoid": 1009961, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5b\u7f57\u91cc\u8fbe\u5dde\u5468\u4e09\u6210\u4e3a\u7f8e\u56fd\u7b2c\u4e00\u4e2a\u9881\u5e03DNA\u9690\u79c1\u6cd5\u7684\u5dde\uff0c\u7981\u6b62\u4eba\u5bff\u3001\u6b8b\u75be\u548c\u957f\u671f\u62a4\u7406\u4fdd\u9669\u516c\u53f8\u5c06\u57fa\u56e0\u6d4b\u8bd5\u7528\u4e8e\u4fdd\u9669\u76ee\u7684\u3002\n\u5dde\u957f\u7f57\u6069\u00b7\u5fb7\u6851\u8482\u65af(Ron DeSantis)\u7b7e\u7f72\u4e86\u7531\u68d5\u6988\u6e2f\u5171\u548c\u515a\u4f17\u8bae\u5458\u514b\u91cc\u65af\u00b7\u65af\u666e\u7f57\u5c14\u65af(Chris Sprowls)\u53d1\u8d77\u76841189\u53f7\u4f17\u8bae\u9662\u6cd5\u6848\u3002\u5b83\u5c06\u8054\u90a6\u653f\u5e9c\u7981\u6b62\u533b\u7597\u4fdd\u9669\u63d0\u4f9b\u5546\u8bbf\u95eeDNA\u6d4b\u8bd5\u7ed3\u679c\u7684\u7981\u4ee4\u6269\u5927\u5230\u5176\u4ed6\u4e09\u5bb6\u4fdd\u9669\u516c\u53f8\uff0c\u6bd4\u598223andMe\u6216AncestryDNA\u63d0\u4f9b\u7684\u7ed3\u679c\u3002\n\u5019\u4efb\u4f17\u8bae\u9662\u8bae\u957f\u65af\u666e\u52b3\u65af(Sprowls)\u79f0\u8fd9\u9879\u7acb\u6cd5\u662f\u201c\u4f5b\u7f57\u91cc\u8fbe\u5dde\u4eba\u7684\u91cd\u5927\u80dc\u5229\u201d\uff0c\u201c\u5c06\u4f7f\u4f5b\u7f57\u91cc\u8fbe\u5dde\u6210\u4e3a\u5168\u56fd\u4fdd\u62a4\u6211\u4eec\u5c45\u6c11\u548c\u516c\u6c11\u57fa\u56e0\u4fe1\u606f\u7684\u9886\u5bfc\u8005\u201d\uff0c\u4f17\u8bae\u9662\u4ee5110\u7968\u5bf90\u7968\u548c\u53c2\u8bae\u9662\u4ee535\u7968\u5bf93\u7968\u901a\u8fc7\u4e86\u8fd9\u9879\u6cd5\u6848\u3002\n\u201c\u9274\u4e8eDNA\u68c0\u6d4b\u8bd5\u5242\u76d2\u7684\u4eba\u6c14\u6301\u7eed\u4e0a\u5347\uff0c\u201d\u65af\u666e\u52b3\u65af\u5468\u4e8c\u8868\u793a\uff0c\u201c\u6211\u4eec\u5fc5\u987b\u91c7\u53d6\u884c\u52a8\uff0c\u4fdd\u62a4\u4f5b\u7f57\u91cc\u8fbe\u4eba\u7684DNA\u6570\u636e\u4e0d\u4f1a\u843d\u5165\u4fdd\u9669\u516c\u53f8\u624b\u4e2d\uff0c\u4fdd\u9669\u516c\u53f8\u53ef\u80fd\u4f1a\u4ee5\u63d0\u9ad8\u5229\u7387\u6216\u6392\u9664\u4fdd\u5355\u7684\u5f62\u5f0f\uff0c\u5c06\u8fd9\u4e9b\u4fe1\u606f\u6b66\u5668\u5316\uff0c\u5bf9\u6297\u5f53\u524d\u6216\u6f5c\u5728\u7684\u6295\u4fdd\u4eba\u3002\u201d\n\u8054\u90a6\u6cd5\u5f8b\u7981\u6b62\u5065\u5eb7\u4fdd\u9669\u516c\u53f8\u5728\u627f\u4fdd\u4fdd\u5355\u548c\u8bbe\u5b9a\u4fdd\u8d39\u65f6\u4f7f\u7528\u57fa\u56e0\u4fe1\u606f\uff0c\u4f46\u8fd9\u4e00\u7981\u4ee4\u4e0d\u9002\u7528\u4e8e\u4eba\u5bff\u3001\u6b8b\u75be\u6216\u957f\u671f\u62a4\u7406\u4fdd\u9669\u3002\n\u4fdd\u9669\u516c\u53f8\u8fa9\u79f0\uff0c\u4ece\u57fa\u56e0\u6d4b\u8bd5\u4e2d\u6536\u96c6\u7684\u4fe1\u606f\uff0c\u5982\u4e00\u4e2a\u4eba\u7684\u533b\u7597\u503e\u5411\uff0c\u53ef\u80fd\u4f1a\u5168\u9762\u964d\u4f4e\u4fdd\u9669\u8d39\u3002\u7136\u800c\uff0c\u8bae\u5458\u4eec\u8868\u793a\uff0c\u540c\u6837\u7684\u7406\u7531\u4e5f\u53ef\u4ee5\u7528\u6765\u63d0\u9ad8\u5229\u7387\u3002\n\u4ed6\u8bf4\uff0c\u764c\u75c7\u5e78\u5b58\u8005\u65af\u666e\u7f57\u5c14\u65af\u57282017\u5e74\u7ed9\u4e00\u5bb6\u4eba\u5bff\u4fdd\u9669\u516c\u53f8\u6253\u7535\u8bdd\u65f6\u53d1\u73b0\uff0c\u4fdd\u9669\u516c\u53f8\u53ef\u80fd\u4f1a\u5229\u7528\u8fd9\u4e2a\u201c\u5de8\u5927\u7684\u6f0f\u6d1e\u201d\uff0c\u7a7a\u6c14\u4e2d\u5145\u6ee1\u4e86DNA\u6d4b\u8bd5\u516c\u53f8\u7684\u5546\u4e1a\u5e7f\u544a\uff0c\u4ed6\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u201c\u5de8\u5927\u7684\u6f0f\u6d1e\u201d\uff0c\u4fdd\u9669\u516c\u53f8\u5728\u6253\u7535\u8bdd\u7ed9\u4e00\u5bb6\u4eba\u5bff\u4fdd\u9669\u516c\u53f8\u65f6\uff0c\u53d1\u73b0\u4e86\u8fd9\u4e2a\u201c\u5de8\u5927\u7684\u6f0f\u6d1e\u201d\u3002\n\u6839\u636eHB 1189\uff0c\u4fdd\u9669\u516c\u53f8\u88ab\u7981\u6b62\u4f7f\u7528\u57fa\u56e0\u4fe1\u606f\u4e3a\u4fdd\u5355\u548c\u4ea7\u54c1\u5b9a\u4ef7\u3002\u8be5\u6cd5\u6848\u963b\u6b62\u516c\u53f8\u8981\u6c42\u6216\u7d22\u53d6\u7533\u8bf7\u4eba\u7684\u57fa\u56e0\u4fe1\u606f\uff0c\u5e76\u7981\u6b62DNA\u68c0\u6d4b\u516c\u53f8\u5728\u672a\u7ecf\u5ba2\u6237\u8bb8\u53ef\u7684\u60c5\u51b5\u4e0b\u5411\u4fdd\u9669\u516c\u53f8\u63d0\u4f9b\u57fa\u56e0\u4fe1\u606f\u3002\n\u53c2\u8bae\u9662\u7248Sprowls\u6cd5\u6848\u7684\u53d1\u8d77\u4eba\u3001R-Lakeland\u53c2\u8bae\u5458\u51ef\u5229\u00b7\u65af\u5854\u683c\u5c14(Kelli Stargel)\u8868\u793a\uff0c\u8be5\u6cd5\u6848\u5c06\u201c\u6b63\u5f53\u5730\u4fdd\u62a4\u4f5b\u7f57\u91cc\u8fbe\u4eba\u514d\u53d7\u9690\u79c1\u4fb5\u72af\u201d\u3002\n\u65af\u5854\u683c\u5c14\u8bf4\uff1a\u201c\u6211\u4e3a\u6211\u4eec\u5dde\u662f\u5168\u56fd\u7b2c\u4e00\u4e2a\u4fdd\u62a4\u6211\u4eec\u7684\u516c\u6c11\u514d\u53d7\u8fd9\u4e00\u5a01\u80c1\u7684\u5dde\u800c\u611f\u5230\u81ea\u8c6a\u3002\u201d\u201c\u6211\u5e0c\u671b\uff0c\u968f\u7740\u8fd9\u9879\u7acb\u6cd5\u7b7e\u7f72\u6210\u4e3a\u6cd5\u5f8b\uff0c\u5b83\u5c06\u6210\u4e3a\u5168\u56fd\u5176\u4ed6\u5730\u533a\u7684\u5178\u8303\uff0c\u56e0\u4e3aDNA\u68c0\u6d4b\u53d8\u5f97\u66f4\u52a0\u666e\u904d\uff0c\u5bf9\u9690\u79c1\u6cd5\u7684\u9700\u6c42\u4e5f\u53d8\u5f97\u66f4\u52a0\u8feb\u5207\u3002\u201d\n\u5728\u7f3a\u4e4f\u5168\u9762\u7684\u8054\u90a6\u57fa\u56e0\u9690\u79c1\u76d1\u7ba1\u7684\u60c5\u51b5\u4e0b\uff0c\u5dde\u7acb\u6cd5\u673a\u6784\u901a\u8fc7\u4e86\u4e00\u7cfb\u5217\u5e7f\u6cdb\u7684\u6cd5\u5f8b\uff0c\u901a\u5e38\u9650\u5236\u7b2c\u4e09\u65b9-\u5982\u4fdd\u9669\u516c\u53f8\u6216\u96c7\u4e3b-\u5728\u672a\u7ecf\u540c\u610f\u7684\u60c5\u51b5\u4e0b\u83b7\u53d6\u57fa\u56e0\u6570\u636e\u3002\n\u6839\u636e\u5168\u56fd\u5dde\u8bae\u4f1a\u4f1a\u8bae(NCSL)\u7684\u8bf4\u6cd5\uff0c\u4f5b\u7f57\u91cc\u8fbe\u5dde\u662f\u8981\u6c42\u7b2c\u4e09\u65b9\u6267\u884c\u3001\u8981\u6c42\u6216\u83b7\u5f97\u57fa\u56e0\u4fe1\u606f\u7684\u77e5\u60c5\u540c\u610f\u768416\u4e2a\u5dde\u4e4b\u4e00\uff0c\u8981\u6c42\u77e5\u60c5\u540c\u610f\u624d\u80fd\u62ab\u9732\u57fa\u56e0\u4fe1\u606f\u768424\u4e2a\u5dde\uff0c\u4ee5\u53ca\u5c06\u57fa\u56e0\u4fe1\u606f\u5b9a\u4e49\u4e3a\u4e2a\u4eba\u8d22\u4ea7\u76845\u4e2a\u5dde\u4e4b\u4e00\u3002\n\u5c3d\u7ba1\u6709\u8fd9\u9879\u7acb\u6cd5\uff0c\u5982\u679cDNA\u6d4b\u8bd5\u7ed3\u679c\u6700\u7ec8\u51fa\u73b0\u5728\u4e00\u4e2a\u4eba\u7684\u5065\u5eb7\u8bb0\u5f55\u4e2d\uff0c\u4fdd\u9669\u63d0\u4f9b\u8005\u53ef\u4ee5\u5408\u6cd5\u5730\u83b7\u53d6\u5b83\uff0c\u5c3d\u7ba1\u8054\u90a62008\u5e74\u9057\u4f20\u975e\u6b67\u89c6\u6cd5\u6848(GINA)\u7981\u6b62\u4ed6\u4eec\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\u6765\u62d2\u7edd\u4fdd\u9669\u6216\u63d0\u9ad8\u8d39\u7387\u3002\n\u968f\u7740\u76f4\u63a5\u9762\u5411\u6d88\u8d39\u8005\u7684\u68c0\u6d4b\u8d8a\u6765\u8d8a\u53d7\u6b22\u8fce\uff0c\u57fa\u56e0\u9690\u79c1\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u51e0\u5e74\u7ee7\u7eed\u4fdd\u7559\u5728\u7acb\u6cd5\u8005\u7684\u8bae\u4e8b\u65e5\u7a0b\u4e0a\u3002\n\u7acb\u6cd5\u8005\u53ef\u80fd\u4f1a\u89e3\u51b3\u7684\u62c5\u5fe7\u4e4b\u4e00\u662f\uff0c\u6709\u7206\u6599\u79f0\uff0c\u4f5b\u7f57\u91cc\u8fbe\u5dde\u7684\u51e0\u4e2a\u516c\u5bd3\u534f\u4f1a\u8981\u6c42\u6f5c\u5728\u5c45\u6c11\u63d0\u4ea4DNA\u6d4b\u8bd5\u7ed3\u679c\uff0c\u8bc1\u660e\u4ed6\u4eec\u6ca1\u6709\u963f\u5c14\u8328\u6d77\u9ed8\u6c0f\u75c7\u7684\u9057\u4f20\u6613\u611f\u6027\u3002\u9664\u4e86\u52a0\u5dde\uff0c\u963f\u5c14\u8328\u6d77\u9ed8\u6c0f\u75c7\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u662f\u5408\u6cd5\u7684\u3002", "note_en": "Florida on Wednesday became the nation\u2019s first state to enact a DNA privacy law, prohibiting life, disability and long-term care insurance companies from using genetic tests for coverage purposes.\n  Gov. Ron DeSantis signed   House Bill 1189, sponsored by Rep. Chris Sprowls, R-Palm Harbor. It extends federal prohibitions against health insurance providers accessing results from DNA tests, such as those offered by 23andMe or AncestryDNA, to the three other insurers.\n  Sprowls, the House speaker-designate, called the legislation a \u201cmajor victory for Floridians\u201d that \u201cwill make Florida the leader in the nation in protecting our residents and our citizens\u2019 genetic information\u201d when it was adopted by the House, 110-0, and the Senate, 35-3.\n  \u201cGiven the continued rise in popularity of DNA testing kits,\u201d Sprowls said Tuesday, \u201cit was imperative we take action to protect Floridians\u2019 DNA data from falling into the hands of an insurer who could potentially weaponize that information against current or prospective policyholders in the form of rate increases or exclusionary policies.\u201d\n  Federal law prevents health insurers from using genetic information in underwriting policies and in setting premiums, but the prohibition doesn\u2019t apply to life, disability or long-term care coverage.\n  Insurers argue information gleaned from genetic testing, such as a person\u2019s medical predispositions, could lower insurance premiums across-the-board. Lawmakers, however, said the same rationale could be used to raise rates.\n  Sprowls, a cancer survivor, discovered the \u201cmassive loophole\u201d could be exploited by insurers while on hold during a phone call to a life insurance company in 2017 and the dead air was filled with commercials from DNA-testing companies, he said.\n  Under HB 1189, insurers are prohibited from using genetic information to price policies and offerings. The bill blocks companies from requiring or soliciting genetic information from applicants and forbids DNA testing companies provide genetic information to insurers without the customer\u2019s permission.\n    Sen. Kelli Stargel, R-Lakeland, who sponsored the Senate version of Sprowls\u2019 bill, said it will \u201crightfully protect Floridians from violations of privacy.\u201d\n  \u201cI am proud of our state for being the first in the nation to protect our citizens from this threat,\u201d Stargel said. \u201cIt is my hope that with this legislation signed into law that it will become a model for the rest of the country as DNA testing becomes more ubiquitous and the need for privacy laws becomes even greater.\u201d\n  In the absence of comprehensive federal genetic privacy regulation, state legislatures have adopted a wide-ranging matrix of laws that typically restrict third parties \u2013 such as insurers or employers \u2013 from accessing genetic data without consent.\n  According to the National Conference of State Legislatures (NCSL), Florida is among 16 states that require informed consent for a third party to perform, require or obtain genetic information, among 24 states that require informed consent to disclose genetic information, and among five states that define genetic information as personal property.\n  Despite the legislation, if DNA test results end up in a person\u2019s health records, insurance providers legally can access it, although the federal 2008 Genetic Nondiscrimination Act (GINA) prohibits them from using that information to deny coverage or increase rates.\n    Genetic privacy likely will remain on lawmakers&#39; agendas in coming years as direct-to-consumer testing gain in popularity.\n  Among concerns lawmakers may address is revelations several Florida condo associations require prospective residents to submit DNA test results showing they don\u2019t have genetic predispositions to Alzheimer\u2019s, which is legal everywhere but California.", "posttime": "2020-07-06 01:58:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u963b\u6b62,state,\u57fa\u56e0", "title": "\u4f5b\u7f57\u91cc\u8fbe\u5dde\u6210\u4e3a\u7b2c\u4e00\u4e2a\u9881\u5e03DNA\u9690\u79c1\u6cd5\u7684\u5dde\uff0c\u963b\u6b62\u4fdd\u9669\u516c\u53f8\u4f7f\u7528\u5b83", "title_en": "Florida becomes first state to enact DNA privacy law, blocking insurers from it", "transed": 1, "url": "https://www.washingtonexaminer.com/politics/florida-becomes-first-state-to-enact-dna-privacy-law-blocking-insurers-from-genetic-data", "via": "", "real_tags": ["\u963b\u6b62", "state", "\u57fa\u56e0"]}, {"category": "", "categoryclass": "", "imagename": "e8d1f1fb3c4e1f04312c27c941ef2707.jpg", "infoid": 1009960, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u665a\u6625\u5c0f\u5e45\u6de1\u9759\u4e4b\u540e\uff0c\u7f8e\u56fd\u786e\u8bca\u7684\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u6570\u91cf\u518d\u6b21\u4e0a\u5347\u3002\u4e9a\u5229\u6851\u90a3\u5dde\u3001\u4f5b\u7f57\u91cc\u8fbe\u5dde\u548c\u5fb7\u514b\u8428\u65af\u5dde\u7b49\u5dde\u7684\u4eba\u6570\u8fbe\u5230\u4e86\u8fc4\u4eca\u4e3a\u6b62\u7684\u6700\u9ad8\u6c34\u5e73\uff0c\u968f\u7740\u7f8e\u56fd\u8fdb\u5165\u590f\u5b63\u7684\u8fdb\u4e00\u6b65\u6df1\u5165\uff0c\u6fc0\u589e\u51e0\u4e4e\u6ca1\u6709\u505c\u6b62\u7684\u8ff9\u8c61\u3002\n\u7136\u800c\uff0c\u8fd9\u79cd\u75c5\u6bd2\u4f3c\u4e4e\u6740\u6b7b\u4e86\u5b83\u611f\u67d3\u7684\u4eba\u4e2d\u8f83\u5c11\u7684\u4eba\u3002\u57284\u6708\u548c5\u6708\uff0c\u7531\u51a0\u72b6\u75c5\u6bd2\u5f15\u8d77\u7684\u75be\u75c5\u65b0\u51a0\u80ba\u708e\u6bcf\u5929\u5bfc\u81f4\u591a\u8fbe3,000\u4eba\u6b7b\u4ea1\uff0c\u5e76\u593a\u8d70\u4e86\u5927\u7ea67%\u52308%\u7684\u5df2\u77e5\u611f\u67d3\u7684\u7f8e\u56fd\u4eba\u7684\u751f\u547d\u3002\u73b0\u5728\u6bcf\u5929\u7684\u6b7b\u4ea1\u4eba\u6570\u63a5\u8fd1600\u4eba\uff0c\u6b7b\u4ea1\u7387\u4e0d\u52305%\u3002\n\u603b\u4f53\u800c\u8a00\uff0c\u4e13\u5bb6\u4eec\u8ba4\u4e3a\u51a0\u72b6\u75c5\u6bd2\u6b7b\u4ea1\u7387\u4e0b\u964d\u7684\u4e3b\u8981\u539f\u56e0\u6709\u4e09\u4e2a\uff1a\u68c0\u6d4b\u3001\u6cbb\u7597\u548c\u75c5\u6bd2\u611f\u67d3\u5bf9\u8c61\u7684\u8f6c\u53d8\u3002\u8fd9\u4e9b\u56e0\u7d20\u7684\u76f8\u5bf9\u8d21\u732e\u5c1a\u4e0d\u6e05\u695a\u3002\u7531\u4e8e\u6b7b\u4ea1\u62a5\u544a\u53ef\u80fd\u6ede\u540e\u8bca\u65ad\u6570\u5468\uff0c\u76ee\u524d\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u7684\u4e0a\u5347\u4ecd\u53ef\u80fd\u9884\u793a\u7740\u672a\u6765\u51e0\u5929\u6b7b\u4ea1\u7387\u7684\u4e0a\u5347\u3002\n\u81ea3\u6708\u4e2d\u65ec\u51a0\u72b6\u75c5\u6bd2\u88ab\u5ba3\u5e03\u4e3a\u56fd\u5bb6\u7d27\u6025\u72b6\u6001\u4ee5\u6765\uff0c\u5bf9\u51a0\u72b6\u75c5\u6bd2\u7684\u8bca\u65ad\u68c0\u6d4b\u5927\u5e45\u4e0a\u5347\u3002\u5728\u7f8e\u56fd\uff0c\u6bcf\u5929\u8fdb\u884c\u7684\u6d4b\u8bd5\u8d85\u8fc760\u4e07\u6b21\uff0c\u9ad8\u4e8e\u65e9\u6625\u7684\u6bcf\u5929\u7ea610\u4e07\u6b21\u3002\u7ea6\u7ff0\u00b7\u970d\u666e\u91d1\u65af\u5065\u5eb7\u5b89\u5168\u4e2d\u5fc3(Johns Hopkins Center For Health Security)\u9ad8\u7ea7\u5b66\u8005\u51ef\u7279\u7433\u00b7\u91cc\u5f17\u65af(Caitlin Rivers)\u8868\u793a\uff0c\u5c3d\u7ba1\u7f8e\u56fd\u4ecd\u7136\u6ca1\u6709\u8fbe\u5230\u4e13\u5bb6\u547c\u5401\u7684\u6bcf\u5929\u6570\u4ee5\u767e\u4e07\u8ba1\u7684\u68c0\u6d4b\u76ee\u6807\uff0c\u4f46\u589e\u52a0\u7684\u68c0\u6d4b\u5df2\u7ecf\u53d1\u73b0\u4e86\u66f4\u591a\u6709\u8f7b\u5fae\u75c7\u72b6\u6216\u6ca1\u6709\u75c7\u72b6\u7684\u611f\u67d3\u8005\uff0c\u964d\u4f4e\u4e86\u6b7b\u4e8e\u65b0\u51a0\u80ba\u708e\u7684\u60a3\u8005\u7684\u603b\u4f53\u6bd4\u4f8b\u3002\n\u4e9a\u5229\u6851\u90a3\u5dde\u7684\u533b\u9662\u6d41\u884c\u75c5\u5b66\u5bb6\u548c\u4f20\u67d3\u75c5\u4e13\u5bb6\u8428\u65af\u57fa\u5a05\u00b7\u6ce2\u4f69\u65af\u5e93(Saskia Popescu)\u8bf4\uff0c\u968f\u7740\u66f4\u591a\u7684\u68c0\u6d4b\u53ef\u7528\uff0c\u611f\u67d3\u901a\u5e38\u88ab\u66f4\u65e9\u5730\u53d1\u73b0\uff0c\u201c\u8fd9\u8ba9\u6211\u4eec\u80fd\u591f\u66f4\u65e9\u5730\u8fdb\u884c\u5e72\u9884\u3002\u201d\u8bb8\u591a\u6cbb\u7597\u65b9\u6cd5\u5728\u4eba\u4eec\u6fd2\u4e34\u6b7b\u4ea1\u524d\u7ed9\u4e88\u4f3c\u4e4e\u6548\u679c\u6700\u597d\u3002\n\u968f\u7740\u51e0\u5468\u7684\u65f6\u95f4\u8fc7\u53bb\uff0c\u533b\u751f\u548c\u62a4\u58eb\u5728\u5982\u4f55\u6cbb\u7597\u51a0\u72b6\u75c5\u6bd2\u65b9\u9762\u4e5f\u6709\u4e86\u66f4\u597d\u7684\u638c\u63e1\u3002\u5728\u51e0\u4e2a\u5dde\uff0c\u6025\u8bca\u79d1\u4e0d\u518d\u4eba\u6ee1\u4e3a\u60a3\uff1b\u6839\u636eCovid Tracking Project\u7684\u6570\u636e\uff0c\u4ece4\u6708\u52306\u6708\uff0c\u5168\u56fd\u4f4f\u9662\u4eba\u6570\u4ece\u8fd16\u4e07\u4eba\u4e0b\u964d\u5230\u4e0d\u52303\u4e07\u4eba\u3002\u5f17\u5409\u5c3c\u4e9a\u5927\u5b66(University Of Virginia)\u4f20\u67d3\u75c5\u3001\u80ba\u90e8\u548c\u5371\u91cd\u62a4\u7406\u4e13\u4e1a\u533b\u751f\u6cf0\u68ee\u00b7\u8d1d\u5c14(Taison Bell)\u535a\u58eb\u8bf4\uff0c\u8fd9\u53ef\u80fd\u7f13\u89e3\u4e86\u7cbe\u75b2\u529b\u7aed\u7684\u5458\u5de5\u548c\u6709\u9650\u7684\u533b\u7597\u4f9b\u5e94\u94fe\u7684\u538b\u529b\uff0c\u5305\u62ec\u90a3\u4e9b\u5e93\u5b58\u547c\u5438\u673a\u7b49\u6551\u751f\u8bbe\u5907\u7684\u516c\u53f8\u3002\u4ed6\u8bf4\uff0c\u5728\u538b\u529b\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u533b\u9662\u73b0\u5728\u201c\u80fd\u591f\u66f4\u597d\u5730\u7167\u987e\u5371\u91cd\u75c5\u4eba\u201d\u3002\n\u536b\u751f\u4fdd\u5065\u5de5\u4f5c\u8005\u4e5f\u53d8\u5f97\u66f4\u52a0\u4e86\u89e3\u6709\u5e0c\u671b\u7684\u6cbb\u7597\u65b9\u6cd5\u548c\u59d1\u606f\u6cbb\u7597\u9009\u62e9\uff0c\u4ee5\u5bf9\u6297\u51a0\u72b6\u75c5\u6bd2\u53ca\u5176\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u4fef\u5367\u4f4d\uff0c\u5373\u60a3\u8005\u7ffb\u8f6c\u8179\u90e8\uff0c\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00\u80ba\u90e8\u6765\u7f13\u89e3\u547c\u5438\u7a98\u8feb\u3002\u73b0\u5df2\u77e5\uff0c\u5371\u91cd\u60a3\u8005\u4e5f\u5bb9\u6613\u53d7\u5230\u8fc7\u5ea6\u51dd\u8840\u7684\u5f71\u54cd\uff0c\u5e76\u53ef\u80fd\u4ece\u8840\u6db2\u7a00\u91ca\u5242\u4e2d\u53d7\u76ca\u3002\u7c7b\u56fa\u9187\u5730\u585e\u7c73\u677e\u4f3c\u4e4e\u53ef\u4ee5\u51cf\u5c11\u91cd\u75c7\u65b0\u51a0\u80ba\u708e\u60a3\u8005\u7684\u6b7b\u4ea1\uff0c\u5c3d\u7ba1\u8bc1\u660e\u8fd9\u4e00\u70b9\u7684\u6570\u636e\u662f\u6700\u8fd1\u624d\u51fa\u73b0\u7684\u3002(\u53e6\u4e00\u79cd\u540d\u4e3a\u745e\u5fb7\u97e6\u7684\u6297\u75c5\u6bd2\u836f\u7269\u4f3c\u4e4e\u80fd\u52a0\u901f\u5eb7\u590d\uff0c\u4f46\u4f3c\u4e4e\u5bf9\u6b7b\u4ea1\u7387\u6ca1\u6709\u663e\u8457\u5f71\u54cd\u3002)", "note_en": "After a minor late-spring lull, the number of confirmed coronavirus cases in the United States is  once again on the rise. States like Arizona, Florida and Texas are seeing some of their highest numbers to date, and as the nation hurtles further into summer, the surge shows few signs of stopping.\n And yet the virus appears to be killing fewer of the people it infects. In April and May, Covid-19, the disease caused by the coronavirus, led to as many as 3,000 deaths per day, and claimed the lives of roughly 7 to 8 percent of Americans known to have been infected. The number of daily deaths is  now closer to 600, and the death rate is less than 5 percent.\n In general, experts see three broad reasons for the downward trend in the rate of coronavirus deaths: testing, treatment and a shift in whom the virus is infecting. The relative contribution of these factors is not yet clear. And because death reports can lag diagnoses by weeks, the current rise in coronavirus cases could still portend increases in mortality in the days to come.\n  Since mid-March, when the coronavirus was declared a national emergency, diagnostic testing for the coronavirus has risen significantly. More than 600,000 tests are administered each day in the United States, up from about 100,000 per day in early spring. Although the nation is still falling short of the  millions of daily tests that experts have called for, the increased testing has identified many more infected individuals with mild or no symptoms, driving down the overall proportion of patients who die from Covid-19, said Caitlin Rivers, a senior scholar at the Johns Hopkins Center for Health Security.\n And with more tests available, infections are often identified earlier, \u201cwhich allows us to intervene earlier,\u201d said Saskia Popescu, a hospital epidemiologist and infectious disease expert in Arizona. Many treatments seem to work best when given well before people are at death\u2019s door.\n As the weeks have worn on, doctors and nurses have also gained a better handle on how to treat the coronavirus. In several states, emergency departments are  no longer overflowing; between April and June, nationwide hospitalizations dropped to less than 30,000 from nearly 60,000,  according to the Covid Tracking Project. That may have eased the strain on exhausted employees and limited medical supply chains, including those that keep lifesaving equipment like ventilators in stock, said Dr. Taison Bell, a physician specializing in infectious disease and pulmonary and critical care at the University of Virginia. Under less pressure, hospitals are now \u201cbetter able to take care of critically ill patients,\u201d he said.\n  Health care workers have also become more knowledgeable about promising treatments and palliative care options to combat the coronavirus and its effects. For instance, prone positioning, in which patients are flipped onto their stomachs, can  ease respiratory distress by  opening up the lungs. Critically ill individuals are also now known to be vulnerable to  excessive blood clotting, and may  benefit from blood thinners. And the steroid  dexamethasone appears to reduce deaths among patients with severe Covid-19, although the data demonstrating this emerged only recently. (Another drug, an antiviral called remdesivir, seems to  speed recovery, but does not appear to have notable effects on mortality.)", "posttime": "2020-07-06 01:58:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75c5\u6bd2,\u7f8e\u56fd,coronavirus,\u51a0\u72b6\u75c5\u6bd2,cases", "title": "\u7f8e\u56fd\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\u6025\u5267\u4e0a\u5347\uff0c\u4f46\u6b7b\u4ea1\u4eba\u6570\u4ecd\u5728\u4e0b\u964d", "title_en": "U.S. Coronavirus Cases Are Rising Sharply, but Deaths Are Still Down", "transed": 1, "url": "https://www.nytimes.com/2020/07/03/health/coronavirus-mortality-testing.html", "via": "", "real_tags": ["\u75c5\u6bd2", "\u7f8e\u56fd", "\u51a0\u72b6\u75c5\u6bd2", "cases"]}]