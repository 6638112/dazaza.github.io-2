[{"category": "", "categoryclass": "", "imagename": "71c4d7206f35134f781bad2a07c73c8a.jpg", "infoid": 1071723, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5370\u5ea6\u6700\u9ad8\u6cd5\u9662\u8868\u793a\uff0c\u65b0\u52a0\u5761\u4ef2\u88c1\u6cd5\u9662\u53bb\u5e74\u505a\u51fa\u7684\u547d\u4ee4\u2014\u2014\u8be5\u6cd5\u9662\u66fe\u88c1\u5b9a\u963b\u6b62\u8fd9\u4e24\u5bb6\u5370\u5ea6\u5de8\u5934\u4e4b\u95f4\u7684\u4ea4\u6613\u2014\u2014\u5728\u5370\u5ea6\u662f\u53ef\u6267\u884c\u7684\u3002 Reliance Retail \u4e00\u5e74\u524d\u8868\u793a\uff0c\u5df2\u4e0e Future Group \u8fbe\u6210\u534f\u8bae\uff0c\u4ee5 34 \u4ebf\u7f8e\u5143\u6536\u8d2d\u540e\u8005\u7684\u96f6\u552e\u548c\u6279\u53d1\u4e1a\u52a1\u4ee5\u53ca\u7269\u6d41\u548c\u4ed3\u50a8\u4e1a\u52a1\u3002\u4e9a\u9a6c\u900a\u66fe\u6295\u8d44 Future Group \u7684\u4e00\u4e2a\u90e8\u95e8\uff0c\u6307\u8d23\u8fd9\u5bb6\u5370\u5ea6\u516c\u53f8\u8fdd\u53cd\u4e86\u5408\u540c\uff0c\u5e76\u8054\u7cfb\u4e86\u65b0\u52a0\u5761\u4ef2\u88c1\u5458\u4ee5\u7ec8\u6b62\u4ea4\u6613\u3002\u4e9a\u9a6c\u900a\u8ba4\u4e3a\uff0c\u4e9a\u9a6c\u900a\u4e0e Future Retail \u7684\u4ea4\u6613\u8d4b\u4e88\u4e86\u8fd9\u5bb6\u7f8e\u56fd\u7535\u5b50\u5546\u52a1\u5de8\u5934\u62d2\u7edd\u8d2d\u4e70 Future Retail \u66f4\u591a\u80a1\u4efd\u7684\u4f18\u5148\u6743\u3002\u5370\u5ea6\u516c\u53f8\u5f53\u65f6\u8fa9\u79f0\uff0c\u65b0\u52a0\u5761\u7684\u6cd5\u9662\u547d\u4ee4\u5728\u5357\u4e9a\u5e02\u573a\u65e0\u6548\u3002\u5370\u5ea6\u76d1\u7ba1\u673a\u6784\u5370\u5ea6\u7ade\u4e89\u59d4\u5458\u4f1a\u53bb\u5e74\u6279\u51c6\u4e86\u5370\u5ea6\u516c\u53f8\u4e4b\u95f4\u7684\u4ea4\u6613\u3002\u5728\u5370\u5ea6 400 \u4e2a\u57ce\u5e02\u7ecf\u8425 1,700 \u5bb6\u96f6\u552e\u5e97\u7684 Future Retail \u80a1\u4ef7\u4e0b\u8dcc 6%\uff0c\u800c\u7ecf\u8425 Reliance Retail \u7684\u4f01\u4e1a\u96c6\u56e2 Reliance Industries \u4e0b\u8dcc 1.3%\u3002\u4e9a\u9a6c\u900a\u3001\u6c83\u5c14\u739b\u7684 Flipkart \u548c\u5370\u5ea6\u6700\u6709\u4ef7\u503c\u7684\u516c\u53f8 Ambani \u7684 Reliance Industries \u9677\u5165\u4e86\u4e89\u593a\u5370\u5ea6\u96f6\u552e\u5e02\u573a\u7684\u6fc0\u70c8\u6218\u6597\u3002\n\u7531\u4e8e\u7535\u5b50\u5546\u52a1\u4ec5\u5360\u5370\u5ea6\u6240\u6709\u96f6\u552e\u989d\u7684 3 -7% - \u5e76\u4e14 Reliance Retail \u63a8\u51fa\u81ea\u5df1\u7684\u7535\u5b50\u5546\u52a1\u4e1a\u52a1\u4ee5\u5bf9\u6297\u4e9a\u9a6c\u900a\u548c Flipkart - \u636e\u62a5\u9053\uff0c\u4e9a\u9a6c\u900a\u4e0e Reliance Retail \u7684\u672a\u6765\u4ea4\u6613\u5df2\u88ab\u8bb8\u591a\u884c\u4e1a\u5206\u6790\u5e08\u89c6\u4e3a\u81f3\u5173\u91cd\u8981\u8fd9\u5bb6\u7f8e\u56fd\u7535\u5b50\u5546\u52a1\u516c\u53f8\u5728\u5370\u5ea6\u7684\u672a\u6765\u3002\u4e9a\u9a6c\u900a\u516b\u5e74\u524d\u5728\u5370\u5ea6\u5f00\u59cb\u4e86\u5b83\u7684\u65c5\u7a0b\uff0c\u5728\u8be5\u56fd\u7684\u672c\u5730\u4e1a\u52a1\u4e0a\u5df2\u6295\u8d44\u8d85\u8fc7 65 \u4ebf\u7f8e\u5143\u3002 Reliance Retail \u6210\u7acb\u4e8e 2006 \u5e74\uff0c\u6bcf\u5468\uff08\u622a\u81f3\u4eca\u5e74\u5e74\u521d\uff09\u901a\u8fc7\u5176\u5728\u5168\u56fd 6,500 \u591a\u4e2a\u57ce\u9547\u7684\u8fd1 12,000 \u5bb6\u5b9e\u4f53\u5e97\u4e3a\u8d85\u8fc7 350 \u4e07\u5ba2\u6237\u63d0\u4f9b\u670d\u52a1\u3002\u8fd9\u5bb6\u96f6\u552e\u8fde\u9501\u5e97\u7531\u5370\u5ea6\u9996\u5bcc\u7a46\u514b\u4ec0\u00b7\u5b89\u5df4\u5c3c (Mukesh Ambani) \u7ecf\u8425\uff0c\u53bb\u5e74\u7b79\u96c6\u4e86\u8d85\u8fc7 70 \u4ebf\u7f8e\u5143\u3002 Ambani \u7684\u53e6\u4e00\u5bb6\u5408\u8d44\u4f01\u4e1a Jio Platforms \u53bb\u5e74\u4e5f\u4ece\u5305\u62ec\u8c37\u6b4c\u548c Facebook \u5728\u5185\u7684\u5341\u591a\u5bb6\u5927\u578b\u6295\u8d44\u8005\u90a3\u91cc\u7b79\u96c6\u4e86\u8d85\u8fc7 200 \u4ebf\u7f8e\u5143\u3002", "note_en": "The Indian Supreme Court said the order by a Singapore arbitration court last year \u2014 which had  ruled to stall the deal between the two Indian giants\u00a0\u2014 is enforceable in India.\n Reliance Retail said a year ago it had reached an agreement with Future Group to acquire the latter\u2019s retail and wholesaler business, as well as its logistics and warehousing business, for $3.4 billion.\n Amazon, which had  invested in one of Future Group\u2019s units, accused the Indian firm of violating its contract and reached the Singapore arbitrator to halt the deal.\n Amazon\u2019s deal with Future Retail had given the American e-commerce giant the first right to refusal on purchase of more stakes in Future Retail, Amazon argued.\n The Indian firms had argued at the time that\u00a0a Singapore\u2019s court order wasn\u2019t valid in the South Asian market.\u00a0India\u2019s watchdog Competition Commission of India last year  approved the deal\u00a0between the Indian firms.\n Shares of Future Retail, which operates 1,700 retail stores across 400 Indian cities, dropped 6% on the order, while Reliance Industries \u2014 the conglomerate that runs Reliance Retail \u2014 were down 1.3%.\n  Amazon, Walmart\u2019s Flipkart and Ambani\u2019s Reliance Industries, the most valuable firm in India, are locked in an intense battle to command the Indian retail market.\n With e-commerce commanding only between 3 -7% of all retail sales in India \u2014 and Reliance Retail launching its own e-commerce business to fight Amazon and Flipkart \u2014 Amazon\u2019s reported future deal with Reliance Retail is already seen by many industry analysts as crucial for the American e-commerce firm\u2019s future in India.\n Amazon, which kickstarted its journey in India eight years ago, has invested more than $6.5 billion in its local business in the country.\n Founded in 2006, Reliance Retail serves more than 3.5 million customers each week (as of early this year) through its nearly 12,000 physical stores in more than 6,500 cities and towns in the country.\n The retail chain, run by India\u2019s richest man, Mukesh Ambani, raised over $7 billion last year. Ambani\u2019s other venture, Jio Platforms, also raised over $20 billion from more than a dozen marquee investors, including Google and Facebook last year.", "posttime": "2021-08-06 14:28:50", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "amazon,\u4ea4\u6613,\u4e9a\u9a6c\u900a,\u6700\u9ad8\u6cd5\u9662,reliance", "title": "\u5370\u5ea6\u6700\u9ad8\u6cd5\u9662\u88c1\u5b9a\u4e9a\u9a6c\u900a\u6401\u7f6e 3.4B \u7f8e\u5143\u7684 Future \u548c Reliance \u4ea4\u6613", "title_en": "\n\t\t\t\tIndia\u2019s Supreme Court rules in favor of Amazon to stall $3.4B Future and Reliance deal\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/08/05/india-supreme-court-rules-in-favor-of-amazon-to-stall-3-4b-future-and-reliance-deal/", "via": "", "real_tags": ["amazon", "\u4ea4\u6613", "\u4e9a\u9a6c\u900a", "\u6700\u9ad8\u6cd5\u9662", "reliance"]}, {"category": "", "categoryclass": "", "imagename": "821456bb1a064dfed14cc45c8a7a926c.jpg", "infoid": 1071722, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "StartupUtrecht\u3001UtrechtInc\u3001Holland Startup\u3001Utrecht Community \u7b49\u533a\u57df\u751f\u6001\u7cfb\u7edf\u7ba1\u7406\u65b9\u5c06\u521d\u521b\u4f01\u4e1a\u3001\u89c4\u6a21\u5316\u4f01\u4e1a\u3001\u4f01\u4e1a\u3001\u5929\u4f7f\u6295\u8d44\u4eba\u3001\u98ce\u9669\u6295\u8d44\u516c\u53f8\u3001\u5730\u65b9\u653f\u5e9c\u3001\u94f6\u884c\u548c\u5927\u5b66\u8054\u5408\u8d77\u6765\uff0c\u5171\u540c\u6784\u5efa\u5f53\u5730\u7684\u521d\u521b\u4f01\u4e1a\u751f\u6001\u7cfb\u7edf\u3002\u4ed6\u4eec\u8fd8\u53d7\u76ca\u4e8e\u5f3a\u5927\u7684\u8377\u5170\u6280\u672f\u5021\u5bfc\u8005\u8ba1\u5212 StartupDelta \u548c\u8377\u5170\u4f01\u4e1a\u5c40\uff0c\u5b83\u4eec\u66f4\u5e7f\u6cdb\u5730\u4fc3\u8fdb\u4e86\u8377\u5170\u7684\u53d1\u5c55\u3002\u4e4c\u5f97\u52d2\u652f\u662f\u8377\u5170\u7b2c\u56db\u5927\u57ce\u5e02\uff0c\u62e5\u6709 35 \u4e07\u5c45\u6c11\u3002\u5176\u529e\u516c\u5ba4\u548c\u8054\u5408\u529e\u516c\u7a7a\u95f4\u5305\u62ec Dotslash Utrecht\u3001De Stadstuin\u3001MindSpace \u548c Tribes\uff1b\u4ee5\u53ca\u50cf Startupbootcamp \u548c Techleap \u8fd9\u6837\u7684\u52a0\u901f\u5668\u7a0b\u5e8f\u3002\u8be5\u5730\u533a\u8457\u540d\u7684\u521d\u521b\u516c\u53f8\u5305\u62ec Distimo\uff08\u88ab AppAnnie \u6536\u8d2d\uff09\u3001\u72ec\u89d2\u517d GitLab\u3001MoneyMonk \u548c StuComm\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u66f4\u65b0\u7684\u4ea7\u54c1\uff0c\u4f8b\u5982 SnappCar\u3001Blendle\u3001Merus\u3001Nibblr\u3001United Wardrobe\u3001N\u00e4pp\u3001Lalaland\u30012DAYSMOOD \u548c Remind2Change\u3002\u6211\u4eec\u7684\u8c03\u67e5\u53d7\u8bbf\u8005\u8ba4\u4e3a\u751f\u6001\u7cfb\u7edf\u5728\u53ef\u6301\u7eed\u80fd\u6e90\u3001\u533b\u7597\u6280\u672f\u3001\u98df\u54c1\u6280\u672f\u3001\u751f\u547d\u79d1\u5b66\u3001\u5e02\u573a\u3001\u6df1\u5ea6\u6280\u672f\u3001\u6e38\u620f\u548c\u5a92\u4f53\u65b9\u9762\u975e\u5e38\u5f3a\u5927\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u4f3c\u4e4e\u8ba4\u4e3a\u5b83\u5728\u8bbe\u8ba1\u3001\u786c\u4ef6\u3001\u91d1\u878d\u79d1\u6280\u3001\u673a\u5668\u4eba\u548c\u519c\u4e1a\u79d1\u6280\u65b9\u9762\u8f83\u5f31\u3002\u53d7\u8bbf\u8005\u63d0\u5230\u7684\u8457\u540d\u521d\u521b\u516c\u53f8\u5305\u62ec Channable\u3001Pepscope\u3001Goin&#39; Connect\u3001Fundsup\u3001Tover\u3001Faqta\u3001Sensorfact\u3001SODAQ\u3001Picnic\u3001Neurolytics\u3001De Clique\u3001Solease\u3001BikeFlip\u3001Packaly\u3001DiManEx\u3001Trunkrs\u3001DialogueTrainer\u3001EatMyRide\u3001CART-Tech\u3001 Prolira \u7b49\u7b49\u3002\u5b83\u53ea\u662f\u8868\u660e\u8be5\u5730\u533a\u62e5\u6709\u5f3a\u5927\u4e14\u4e0d\u65ad\u53d1\u5c55\u7684\u751f\u6001\u7cfb\u7edf\u3002\u6295\u8d44\u573a\u666f\u88ab\u63cf\u8ff0\u4e3a\u4e13\u6ce8\u4e8e\u8f6f\u4ef6\u3001\u6e05\u6d01\u6280\u672f\u3001\u751f\u547d\u79d1\u5b66\u3001\u751f\u7269\u6280\u672f\u3001\u7c7b\u5668\u5b98\u30013D \u751f\u7269\u6253\u5370\u3001\u4eba\u5de5\u667a\u80fd\u548c VR/AR\u3002\u6709\u4eba\u8bf4\uff1a\u201c\u5728\u963f\u59c6\u65af\u7279\u4e39\u8fd8\u53ef\u4ee5\u3002\u4e4c\u5f97\u52d2\u652f\u6709\u70b9\u843d\u540e\u3002\u201d\u53e6\u4e00\u4f4d\u8bf4\uff1a\u201c\u6295\u8d44\u8005\u5173\u6ce8\u7684\u662f\u533b\u7597\u4fdd\u5065\u3001\u53ef\u6301\u7eed\u53d1\u5c55\u548c\u6559\u80b2\u9886\u57df\u7684\u65e9\u671f\u3001\u53ef\u6269\u5c55\u6280\u672f\u3002 [\u6709]\u8bb8\u591a\u5f53\u5730\u7684\u975e\u6b63\u5f0f\u6295\u8d44\u8005\u548c\u5728\u5168\u56fd\u8fd0\u8425\u7684\u98ce\u9669\u6295\u8d44\u516c\u53f8\u3002\u201d\u968f\u7740\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u8bb8\u591a\u53d7\u8bbf\u8005\u8ba4\u4e3a\u4eba\u4eec\u201c\u6700\u597d\u4ece\u5e02\u4e2d\u5fc3\u642c\u5230\u9644\u8fd1\u7684\u6751\u5e84\u201d\uff0c\u56e0\u4e3a\u201c\u5468\u56f4\u6709\u5f88\u591a\u81ea\u7136/\u7a7a\u95f4\u201d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e4c\u5f97\u52d2\u652f\u662f\u201c\u4e00\u4e2a\u4e0d\u65ad\u53d1\u5c55\u7684\u4e2d\u5fc3\u201d\uff0c\u8bb8\u591a\u4eba\u5c06\u201c\u7559\u5728\u8fd9\u5ea7\u57ce\u5e02\u3002\u4f46\u662f\u642c\u8fdb\u6765\u7684\u4eba\u8d8a\u6765\u8d8a\u5c11\uff0c\u8fdc\u7a0b\u5de5\u4f5c\u5c31\u53ef\u4ee5\u7559\u4e0b\u6765\u3002\u201d\u9274\u4e8e\u8377\u5170\u9760\u8fd1\u5176\u4ed6\u6b27\u6d32\u5927\u57ce\u5e02\uff0c\u5728\u8377\u5170\u8fdc\u7a0b\u5de5\u4f5c\u4e5f\u5f88\u5bb9\u6613\uff0c\u56e0\u6b64\u5b83\u53ef\u80fd\u4f1a\u5438\u5f15\u65b0\u7684\u6570\u5b57\u6e38\u7267\u6c11\uff0c\u201c\u8fd9\u8981\u5f52\u529f\u4e8e\u4e4c\u5f97\u52d2\u652f\u5728\u8be5\u56fd\u4e2d\u90e8\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u4ee5\u53ca\u751f\u6001\u7cfb\u7edf\u7684\u5438\u5f15\u529b\u3002\u201d\n\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u6570\u5b57\u3001\u6e38\u620f\u3001\u7535\u5b50\u5065\u5eb7\u3001\u6559\u80b2\u79d1\u6280\u3001\u53ef\u6301\u7eed\u6027\u3002\u60a8\u6240\u5728\u57ce\u5e02\u6700\u6709\u8da3\u7684\u521d\u521b\u516c\u53f8\u662f\u54ea\u4e9b\uff1f Channable\u3001Pandora Intelligence\u3001Sensorfact\u3001SnappCar\u3001Faqta\u3001StuComm\u3001DiManEx\u3001Prolira\u3001CART-Tech\u3002\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u4f60\u6240\u5728\u57ce\u5e02\u7684\u6295\u8d44\u73af\u5883\u5982\u4f55\uff1f\u4ed6\u4eec\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f\u8bb8\u591a\u5f53\u5730\u7684\u975e\u6b63\u5f0f\u6295\u8d44\u8005\u548c\u56fd\u5bb6\u8fd0\u8425\u7684\u98ce\u9669\u6295\u8d44\u516c\u53f8\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u7531\u4e8e\u4e4c\u5f97\u52d2\u652f\u4f4d\u4e8e\u8be5\u56fd\u4e2d\u90e8\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u548c\u751f\u6001\u7cfb\u7edf\u7684\u5438\u5f15\u529b\uff0c\u5176\u4ed6\u4eba\u5c06\u642c\u5165\u3002\u8c01\u662f\u60a8\u6240\u5728\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u5458\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\u3001\u521b\u59cb\u4eba\u3001\u5f8b\u5e08\u3001\u8bbe\u8ba1\u5e08\u7b49\uff09\uff1f Sjoerd Mol\uff08Benvalor\uff09\u3001Erik Stam\uff08\u4e4c\u5f97\u52d2\u652f\u5927\u5b66\uff09\u3001Robbert-Jan Hanse\uff08\u8377\u5170\u521d\u521b\u516c\u53f8\uff09\u3001Heerd Jan Hoogeveen\uff08\u4e4c\u5f97\u52d2\u652f\u521d\u521b\u516c\u53f8\uff09\u3001Jorg Kop\uff08UtrechtInc \u548c ROM\uff09\u3001Edgard Creemers\uff08ROM\uff09\u3002\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u4ece\u56fd\u9645\u54c1\u724c\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5927\u963f\u59c6\u65af\u7279\u4e39\u5730\u533a\u7684\u4e00\u90e8\u5206\uff0c\u4e0e\u8377\u5170\u7684\u6240\u6709\u5176\u4ed6\u4e3b\u8981\u521b\u4e1a\u5730\u533a\u5bc6\u5207\u5408\u4f5c\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u5f3a\uff1a\u4eba\u5de5\u667a\u80fd\u3001\u5065\u5eb7\u3001\u53ef\u6301\u7eed\u6027\u548c\u5b66\u4e60\u3002\u5f31\u70b9\uff1a\u673a\u5668\u4eba\u3001\u5de5\u7a0b\u3001ag\u3002\n\u60a8\u6240\u5728\u57ce\u5e02\u6700\u6709\u8da3\u7684\u521d\u521b\u516c\u53f8\u662f\u54ea\u4e9b\uff1f Solease\u3001SnappCar\u3001BikeFlip\u3001Packaly\u3001Sensorfact\u3001DiManEx\u3001N\u00e4pp\u3001Trunkrs\u3001StuComm\u3001Faqta\u3001DialogueTrainer\u3001EatMyRide\u3001CART-Tech\u3001Prolira\u3001MRIguidance\u3001Redgrasp\u3001SyncVR\u3001DigiDok\u3001Learned.io\u30012DAYSMOOD \u548c Goin&#39;\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u4f60\u6240\u5728\u57ce\u5e02\u7684\u6295\u8d44\u73af\u5883\u5982\u4f55\uff1f\u4ed6\u4eec\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f\u826f\u597d\u7684\u878d\u8d44\u6e20\u9053\u3002\u6295\u8d44\u8005\u573a\u666f\u4e13\u6ce8\u4e8e\u533b\u7597\u4fdd\u5065\u3001\u53ef\u6301\u7eed\u53d1\u5c55\u548c\u6559\u80b2\u9886\u57df\u7684\u65e9\u671f\u3001\u53ef\u6269\u5c55\u6280\u672f\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u7531\u4e8e\u8fd9\u5ea7\u53ef\u7231\u57ce\u5e02\u7684\u5b9c\u5c45\u6027\u548c\u7075\u6d3b\u5de5\u4f5c\u7684\u8bbe\u65bd\uff0c\u6211\u4eec\u770b\u5230\u8fdb\u5165\u8fd9\u5ea7\u57ce\u5e02\u7684\u521d\u521b\u516c\u53f8\u6709\u6240\u589e\u52a0\u3002\u8c01\u662f\u60a8\u6240\u5728\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u5458\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\u3001\u521b\u59cb\u4eba\u3001\u5f8b\u5e08\u3001\u8bbe\u8ba1\u5e08\u7b49\uff09\uff1f Jorg Kop\uff08UtrechtInc \u521b\u4e1a\u5b75\u5316\u5668\u603b\u76d1\uff09\u3001Heerd Jan Hoogeveen\uff08StartupUtrecht \u603b\u76d1\uff09\u3001Arjan Van Den Born\uff08ROM Utrecht \u603b\u76d1\uff09\u3002\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u53d1\u5c55\u8fc5\u901f\uff0c\u4e94\u5e74\u5185\u5728\u6b27\u6d32\u6392\u540d\u524d\u4e94\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u4e4c\u5f97\u52d2\u652f\u5730\u533a\u5728\u751f\u547d\u79d1\u5b66\u3001\u533b\u7597\u6280\u672f\u3001\u8f6f\u4ef6\uff08\u667a\u80fd\u670d\u52a1\uff09\u3001\u6e38\u620f\u548c\u5a92\u4f53\u65b9\u9762\u5b9e\u529b\u96c4\u539a\u3002\u60a8\u6240\u5728\u57ce\u5e02\u6700\u6709\u8da3\u7684\u521d\u521b\u516c\u53f8\u662f\u54ea\u4e9b\uff1f Channable\u3001Faqta\u3001Sensorfact\u3001SODAQ\u3001\u91ce\u9910\u3001Neurolytics\u3001De Clique\u3002\n\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u4f60\u6240\u5728\u57ce\u5e02\u7684\u6295\u8d44\u73af\u5883\u5982\u4f55\uff1f\u4ed6\u4eec\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f\u5f88\u591a\u91cd\u70b9\u90fd\u653e\u5728\u751f\u547d\u79d1\u5b66\u3001\u751f\u7269\u6280\u672f\u4e0a\uff0c\u56e0\u4e3a\u4e4c\u5f97\u52d2\u652f\u79d1\u5b66\u56ed\u6709\u5f88\u591a\u7814\u7a76\uff0c\u4e5f\u6709\u884d\u751f\u4ea7\u54c1\u3002\u5728\u79d1\u5b66\u56ed\uff0c\u7c7b\u5668\u5b98\u30013D \u751f\u7269\u6253\u5370\u3001\u82af\u7247\u4e0a\u7684\u5668\u5b98\u3001\u533b\u7597\u6280\u672f\u662f\u4eba\u4eec\u611f\u5174\u8da3\u7684\u9886\u57df\u3002\u8be5\u5730\u533a\u7684\u4e00\u4e9b\u98ce\u9669\u6295\u8d44\u516c\u53f8\u4e5f\u5173\u6ce8\u5065\u5eb7\u3002 IT/\u8f6f\u4ef6/\u6570\u636e/AI\u548cVR/AR\u4e5f\u662f\u6295\u8d44\u8005\u5173\u6ce8\u7684\u91cd\u8981\u9886\u57df\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u6211\u8ba4\u4e3a\u4ed6\u4eec\u4f1a\u7559\u4e0b\u6765\uff0c\u56e0\u4e3a\u4e4c\u5f97\u52d2\u652f\u4f4d\u4e8e\u8377\u5170\u548c\u6b27\u6d32\u7684\u4e2d\u5fc3\u3002\u5728\u8377\u5170\u8fdc\u7a0b\u5de5\u4f5c\u5f88\u5bb9\u6613\uff0c\u7f51\u901f\u6ca1\u95ee\u9898\u3002\u8c01\u662f\u60a8\u6240\u5728\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u5458\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\u3001\u521b\u59cb\u4eba\u3001\u5f8b\u5e08\u3001\u8bbe\u8ba1\u5e08\u7b49\uff09\uff1f UtrechtInc \u8463\u4e8b Jorg Kop\uff1b Bas van Abel\uff0cDe Clique \u548c Fairphone \u521b\u59cb\u4eba\uff1b Michiel Muller\uff0c\u91ce\u9910\u9996\u5e2d\u6267\u884c\u5b98\uff1b Robbert Jan Hanse\uff0cHolland Startup \u521b\u59cb\u4eba\uff1b\u548c StartupUtrecht \u603b\u76d1 Heerd Jan Hoogeveen\u3002\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u66f4\u591a\u7684\u521d\u521b\u516c\u53f8\u5df2\u7ecf\u53d1\u5c55\u6210\u4e3a\u6210\u529f\u7684\u89c4\u6a21\u5316\u4f01\u4e1a\u3002\u66f4\u591a\u7684\u8d44\u91d1\u4e00\u822c\u6295\u8d44\u4e8e\u521b\u65b0\u578b\u65b0\u516c\u53f8\u3002\u56fd\u9645\u4eba\u624d\u5c06\u4e4c\u5f97\u52d2\u652f\u89c6\u4e3a\u4e0e\u963f\u59c6\u65af\u7279\u4e39\u6bd7\u90bb\u7684\u5730\u65b9\u3002\u5904\u4e8e\u7eff\u8272\u548c\u53ef\u6301\u7eed\u89e3\u51b3\u65b9\u6848\u7684\u6700\u524d\u6cbf\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u5f3a\uff1a\u4e00\u822c\u6280\u672f\u5f00\u53d1\uff0c\u7279\u522b\u662f\u8f6f\u4ef6\u3001\u6e05\u6d01\u6280\u672f\u3001\u5e02\u573a\u3001\u6df1\u5ea6\u6280\u672f\u3002\u5927\u89c4\u6a21\u5546\u4e1a\u5316\u8f83\u5c11\u3002\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u4f60\u6240\u5728\u57ce\u5e02\u7684\u6295\u8d44\u73af\u5883\u5982\u4f55\uff1f\u4ed6\u4eec\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f\u4e13\u6ce8\u4e8e\u8f6f\u4ef6\u548c\u6e05\u6d01\u6280\u672f\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u7559\u5728\u57ce\u91cc\u3002\u4f46\u662f\u642c\u8fdb\u6765\u7684\u4eba\u8d8a\u6765\u8d8a\u5c11\uff0c\u8fdc\u7a0b\u5de5\u4f5c\u5c31\u53ef\u4ee5\u7559\u4e0b\u6765\u3002\n\u8c01\u662f\u60a8\u6240\u5728\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u5458\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\u3001\u521b\u59cb\u4eba\u3001\u5f8b\u5e08\u3001\u8bbe\u8ba1\u5e08\u7b49\uff09\uff1f\u4e4c\u5f97\u52d2\u652f\u516c\u53f8\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u4e00\u6b65\u6b65\u6539\u8fdb\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u6e05\u6d01\u6280\u672f\u3002\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u4f60\u6240\u5728\u57ce\u5e02\u7684\u6295\u8d44\u73af\u5883\u5982\u4f55\uff1f\u4ed6\u4eec\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f\u6e05\u6d01\u6280\u672f\u91cd\u70b9\u3002\u589e\u957f\u52bf\u5934\u5f3a\u52b2\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u642c\u8fdb\u6765\u3002\u4e94\u5e74\u540e\uff0c\u60a8\u8ba4\u4e3a\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\u5728\u54ea\u91cc\uff1f\u663e\u7740\u589e\u957f\u3002\u963f\u59c6\u65af\u7279\u4e39\u6b63\u5728\u4e3a\u81ea\u5df1\u5b9a\u4ef7\uff0c\u5c45\u4f4f\u6210\u672c\u53d8\u5f97\u592a\u9ad8\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u5e02\u573a\u8425\u9500\u548c\u533b\u7597\u9886\u57df\u5b9e\u529b\u96c4\u539a\u7684\u5927\u5b66\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u66f4\u5f3a\u5927\u7684 IT \u6559\u80b2\uff08\u5f00\u53d1\u4eba\u5458\uff01\uff09\u6765\u505a\u3002\n\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u7559\u4e0b\u6765\u642c\u8fdb\u6765\u3002\u4e4c\u5f97\u52d2\u652f\u662f\u4e00\u4e2a\u4e0d\u65ad\u53d1\u5c55\u7684\u4e2d\u5fc3\u3002\u8c01\u662f\u60a8\u6240\u5728\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u5458\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\u3001\u521b\u59cb\u4eba\u3001\u5f8b\u5e08\u3001\u8bbe\u8ba1\u5e08\u7b49\uff09\uff1f StartupUtrecht \u2014 \u56e2\u961f\u3002\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u55ef\u2026\u2026\u4ecd\u7136\u843d\u540e\u4e8e\u963f\u59c6\u65af\u7279\u4e39\uff0c\u4f46\u5229\u7528\u8377\u5170\u7684\u4e2d\u5fc3\u4f4d\u7f6e\uff08\u5bb9\u6613\u5230\u8fbe\uff09\uff0c\u5728\u5438\u5f15\u6709\u5174\u8da3\u52a0\u5165\u8fd9\u4e00\u9886\u57df\u7684\u4eba\u624d\u65b9\u9762\u5c06\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4e9a\u519b\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u5065\u5eb7\u79d1\u6280/\u6559\u80b2\u79d1\u6280\u2014\u2014\u6700\u9000\u51fa\u7684\u9886\u57df\uff1a\u4e4c\u5f97\u52d2\u652f\u7684 DLT/\u533a\u5757\u94fe/\u91d1\u878d\u79d1\u6280/\u5f00\u6e90\u9886\u57df\u3002\u5f31\u70b9\uff1a\u57fa\u4e8e\u786c\u4ef6\u7684\u521d\u521b\u516c\u53f8\uff08\u5728\u4ee3\u5c14\u592b\u7279/\u57c3\u56e0\u970d\u6e29\u66f4\u597d\uff09\u3002\u60a8\u6240\u5728\u57ce\u5e02\u6700\u6709\u8da3\u7684\u521d\u521b\u516c\u53f8\u662f\u54ea\u4e9b\uff1f GitLab\u3001Channable\u3001Pepscope\u3001Goin&#39; Connect\u3001Fundsup\u3002\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u4f60\u6240\u5728\u57ce\u5e02\u7684\u6295\u8d44\u73af\u5883\u5982\u4f55\uff1f\u4ed6\u4eec\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f\u4e13\u6ce8\u4e8e\u5065\u5eb7\u79d1\u6280\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u4f4f\u5bbf\uff1a\u5468\u56f4\u6709\u5f88\u591a\u81ea\u7136/\u7a7a\u95f4\u3002\n\u8c01\u662f\u60a8\u6240\u5728\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u5458\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\u3001\u521b\u59cb\u4eba\u3001\u5f8b\u5e08\u3001\u8bbe\u8ba1\u5e08\u7b49\uff09\uff1f\u4e54\u683c\u00b7\u79d1\u666e\u3001\u65af\u8482\u82ac\u00b7\u5e03\u62c9\u59c6\u3001\u8d3e\u65af\u73c0\u00b7\u6c83\u4f26\u4e1c\u514b\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u4e4c\u5f97\u52d2\u652f\u662f\u8377\u5170\u5145\u6ee1\u6d3b\u529b\u7684\u65e9\u671f\u3001\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u79d1\u6280\u521b\u4e1a\u4e2d\u5fc3\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u751f\u547d\u79d1\u5b66\u9886\u57df\u5b9e\u529b\u96c4\u539a\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u4eba\u4eec\u6700\u597d\u4ece\u5e02\u4e2d\u5fc3\u5411\u9644\u8fd1\u7684\u6751\u5e84\u8fc1\u79fb\uff08\u5747\u5728 10-20 \u516c\u91cc\u8303\u56f4\u5185\uff09\u3002\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u5b83\u5c06\u4ee5\u7c7b\u4f3c\u4e8e\u5168\u7403\u79d1\u6280\u9886\u57df\u7684\u901f\u5ea6\u589e\u957f\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u5f3a\uff1aIT\u3001\u6570\u5b57\u3001\u53ef\u6301\u7eed\u80fd\u6e90\u3001\u533b\u7597\u3001\u98df\u54c1\u3002\u8f83\u5f31\uff1a\u8bbe\u8ba1\u3001\u786c\u4ef6\u3001\u91d1\u878d\u79d1\u6280\u3002\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u4f60\u6240\u5728\u57ce\u5e02\u7684\u6295\u8d44\u73af\u5883\u5982\u4f55\uff1f\u4ed6\u4eec\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f\u4e13\u6ce8\u4e8e\u5efa\u8bbe\u66f4\u7f8e\u597d\u7684\u4e16\u754c\u548c\u5229\u6da6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5229\u6da6\u3002\n\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u505c\u7559\u3002 Tt \u662f\u4e00\u5ea7\u90c1\u90c1\u8471\u8471\u7684\u7eff\u8272\u57ce\u5e02\uff0c\u62e5\u6709\u5145\u8db3\u7684\u751f\u6d3b\u548c\u547c\u5438\u7a7a\u95f4\u3002\u8c01\u662f\u60a8\u6240\u5728\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u5458\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\u3001\u521b\u59cb\u4eba\u3001\u5f8b\u5e08\u3001\u8bbe\u8ba1\u5e08\u7b49\uff09\uff1f\u4e4c\u5f97\u52d2\u652f\u516c\u53f8\uff08Jasper Voorendonk\uff09\u3002\u70b9\u659c\u7ebf\uff08Jelle Drijver\uff09\u3002 StartupUtrecht (Heerd Jan Hoogeveen)\u3002\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u84ec\u52c3\u53d1\u5c55\u5e76\u4ecd\u5728\u589e\u957f\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u6211\u4eec\u64c5\u957f\u516c\u5171\u4e8b\u52a1\u3002\u6211\u4eec\u5728\u8425\u5229\u6027\u90e8\u95e8\u5f88\u5f31\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u4e4c\u5f97\u52d2\u652f\u5e02\u4e0d\u65ad\u6269\u5f20\uff1b\u4eba\u4eec\u603b\u662f\u4f1a\u642c\u8fdb\u6765\u3002\u4f60\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f SAAS\uff0c\u8f6f\u4ef6\uff0cB2B\u3002\n\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u4f60\u6240\u5728\u57ce\u5e02\u7684\u6295\u8d44\u73af\u5883\u5982\u4f55\uff1f\u4ed6\u4eec\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f\u5728\u963f\u59c6\u65af\u7279\u4e39\u6ca1\u95ee\u9898\u3002\u4e4c\u5f97\u52d2\u652f\u6709\u70b9\u843d\u540e\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u505c\u7559\u3002\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u5728\u8377\u5170\uff0c\u4ec5\u6b21\u4e8e\u963f\u59c6\u65af\u7279\u4e39\u3002\u60a8\u7684\u6280\u672f\u751f\u6001\u7cfb\u7edf\u5728\u54ea\u4e9b\u884c\u4e1a\u9886\u57df\u5f88\u5f3a\u5927\uff1f\u4f60\u6700\u5174\u594b\u7684\u662f\u4ec0\u4e48\uff1f\u5b83\u6709\u4ec0\u4e48\u5f31\u70b9\uff1f\u5f3a\uff1a\u5065\u5eb7\u3001\u6559\u80b2\u79d1\u6280\u3001IT\u3002\u79d1\u6280\u6295\u8d44\u8005\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u4f60\u6240\u5728\u57ce\u5e02\u7684\u6295\u8d44\u73af\u5883\u5982\u4f55\uff1f\u4ed6\u4eec\u7684\u91cd\u70b9\u662f\u4ec0\u4e48\uff1f IT\u3001\u5065\u5eb7\u3001\u6559\u80b2\u79d1\u6280\u3001\u65c5\u6e38\u3002\u968f\u7740 COVID-19 \u5927\u6d41\u884c\u671f\u95f4\u5411\u8fdc\u7a0b\u5de5\u4f5c\u7684\u8f6c\u53d8\uff0c\u4eba\u4eec\u4f1a\u7559\u5728\u60a8\u7684\u57ce\u5e02\u3001\u642c\u51fa\u53bb\u8fd8\u662f\u5176\u4ed6\u4eba\u642c\u8fdb\u6765\uff1f\u505c\u7559\u3002\u8c01\u662f\u60a8\u6240\u5728\u57ce\u5e02\u7684\u4e3b\u8981\u521b\u4e1a\u4eba\u5458\uff08\u4f8b\u5982\uff0c\u6295\u8d44\u8005\u3001\u521b\u59cb\u4eba\u3001\u5f8b\u5e08\u3001\u8bbe\u8ba1\u5e08\u7b49\uff09\uff1f\u4e54\u683c\u00b7\u79d1\u666e\u3001\u5e0c\u5c14\u5fb7\u00b7\u626c\u00b7\u970d\u683c\u6587\u3001\u7f57\u4f2f\u7279\u00b7\u626c\u00b7\u6c49\u65af\n\u60a8\u5982\u4f55\u770b\u5f85\u4e94\u5e74\u540e\u60a8\u6240\u5728\u57ce\u5e02\u7684\u79d1\u6280\u573a\u666f\uff1f\u6269\u5927\u3002", "note_en": "Area ecosystem wranglers such as StartupUtrecht, UtrechtInc, Holland Startup, Utrecht Community and others bring startups, scaleups, corporates, angels, VCs, local government, banks and universities together to build the local startup ecosystem. They also benefit from the formidable Netherlands tech advocate initiative StartupDelta and The Netherlands Enterprise Agency, which promote the Netherlands more widely.\n Utrecht is the fourth-largest city in the Netherlands, with 350,000 inhabitants. Its offices and co-working spaces include Dotslash Utrecht, De Stadstuin, MindSpace and Tribes; as well as accelerator programs like Startupbootcamp and Techleap.\n Notable startups from the region include Distimo (acquired by AppAnnie), unicorn GitLab, MoneyMonk and StuComm. Plus there are newer ones such as SnappCar, Blendle, Merus, Nibblr, United Wardrobe, N\u00e4pp, Lalaland, 2DAYSMOOD and Remind2Change.\n Our survey respondents think the ecosystem is strong in sustainable energy, medtech, food tech, life sciences, marketplaces, deep tech, gaming and media. However, they seem to think it\u2019s weaker in design, hardware, fintech, robotics and agritech.\n Notable startups named by our respondents include Channable, Pepscope, Goin\u2019 Connect, Fundsup, Tover, Faqta, Sensorfact, SODAQ, Picnic, Neurolytics, De Clique, Solease, BikeFlip, Packaly, DiManEx, Trunkrs, DialogueTrainer, EatMyRide, CART-Tech, Prolira, among many, many others. It just goes to show the region has a strong and growing ecosystem.\n The investment scene is described variously as focusing on software, clean tech, life sciences, biotech, organoids, 3D bioprinting, AI and VR/AR. One says: \u201cIn Amsterdam it\u2019s ok. Utrecht is a bit lagging.\u201d Another said, \u201cThe investor scene focuses on early-stage, scalable tech in healthcare, sustainability and education. [There are] many local informal investors and nationally operating VCs.\u201d\n  With the shift to remote working, many respondents think people will \u201cpreferably move out of the city center toward the villages nearby\u201d as there is \u201ca lot of nature/space around.\u201d That said, Utrecht is \u201ca growing hub\u201d and many will \u201cstay in the city. But fewer people will move in, and remote working is there to stay.\u201d It\u2019s also easy to work remotely in the Netherlands given its proximity to other big European cities, so it may attract new digital nomads, \u201cthanks to the central position of Utrecht in the middle of the country and the attractiveness of the ecosystem.\u201d\n     What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? Digital, gaming, e-health, edtech, sustainability.\n Which are the most interesting startups in your city? Channable, Pandora Intelligence, Sensorfact, SnappCar, Faqta, StuComm,  DiManEx, Prolira,  CART-Tech.\n What are the tech investors like? What is the investment scene like in your city? What\u2019s their focus? Many local informal investors and national operating VCs.\n With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? Others will be moving in, thanks to the central position of Utrecht in the middle of the country and the attractiveness of the ecosystem.\n Who are the key startup people in your city (e.g., investors, founders, lawyers, designers, etc.)?\u00a0 Sjoerd Mol (Benvalor), Erik Stam (Utrecht University), Robbert-Jan Hanse (Holland Startup), Heerd Jan Hoogeveen (Startup Utrecht), Jorg Kop (UtrechtInc and ROM), Edgard Creemers (ROM).\n Where do you see your city\u2019s tech scene in five years\u2019 time? Part of the greater Amsterdam region from an international brand perspective, closely working together with all other key startup regions in NL.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? Strong: AI, health, sustainability and learning. Weak: robotics, engineering, ag.\n Which are the most interesting startups in your city? Solease,  SnappCar,  BikeFlip, Packaly, Sensorfact,  DiManEx, N\u00e4pp, Trunkrs,  StuComm, Faqta, DialogueTrainer, EatMyRide,  CART-Tech, Prolira, MRIguidance, Redgrasp, SyncVR, DigiDok, Learned.io,  2DAYSMOOD, Hooray and  Goin\u2019 Connect.\n What are the tech investors like? What is the investment scene like in your city? What\u2019s their focus? Good access to funding. Investor scene focuses on early-stage, scalable tech in healthcare, sustainability and education.\n With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? We see an increase in startups coming to the city, due to livability in the lovely city and the facilities for flex working.\n Who are the key startup people in your city (e.g., investors, founders, lawyers, designers, etc.)?\u00a0 Jorg Kop (director of UtrechtInc startup incubator), Heerd Jan Hoogeveen (director of StartupUtrecht), Arjan Van Den Born (director, ROM Utrecht).\n Where do you see your city\u2019s tech scene in five years\u2019 time? Growing fast, in top five in Europe in five years.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? The Utrecht region is strong in life sciences, medtech, software (smart services), gaming and media.\n Which are the most interesting startups in your city? Channable, Faqta, Sensorfact,  SODAQ, Picnic,  Neurolytics,  De Clique.\n What are the tech investors like? What is the investment scene like in your city? What\u2019s their focus? A lot of focus is on life sciences, biotech, as there is a lot of research at the Utrecht science park and also spin-offs. At the science park, organoids, 3D bioprinting, organ on a chip, medtech are areas of interest. Also a number of the VCs in the area are health focused. IT/software/data/AI and VR/AR are also important focus areas for investors.\n With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? I think they will stay as Utrecht is very centrally located in the Netherlands and Europe. It\u2019s easy to work remotely in the Netherlands, internet speed is no problem.\n Who are the key startup people in your city (e.g., investors, founders, lawyers, designers, etc.)?\u00a0 Jorg Kop, director of UtrechtInc; Bas van Abel, founder De Clique and Fairphone; Michiel Muller, CEO Picnic; Robbert Jan Hanse, founder Holland Startup; and Heerd Jan Hoogeveen, director StartupUtrecht.\n Where do you see your city\u2019s tech scene in five years\u2019 time? More startups that have evolved into successful scaleups. More money invested in general in innovative new companies. International talent sees Utrecht as the place to be beside Amsterdam. At the forefront of green and sustainable solutions.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? Strong: tech development in general, specifically software, clean tech, marketplace, deep tech. Less in large scale commercialization.\n  What are the tech investors like? What is the investment scene like in your city? What\u2019s their focus? Focus on software and clean tech.\n With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? Stay in the city. But less people will move in, and remote working is there to stay.\n Who are the key startup people in your city (e.g., investors, founders, lawyers, designers, etc.)?\u00a0 UtrechtInc.\n Where do you see your city\u2019s tech scene in five years\u2019 time? Improving step by step.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? Clean tech.\n  What are the tech investors like? What is the investment scene like in your city? What\u2019s their focus? Clean tech focus. Growing in momentum.\n With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? Move in.\n Where do you see your city\u2019s tech scene in five years\u2019 time? Grown significantly. Amsterdam is pricing itself out and becoming too expensive to live in.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? Strong universities in the marketing and medical space. We could do with a bit stronger IT education (developers!).\n  With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? Stay and move in. Utrecht is a growing hub.\n Who are the key startup people in your city (e.g., investors, founders, lawyers, designers, etc.)?\u00a0 StartupUtrecht \u2014 the team.\n Where do you see your city\u2019s tech scene in five years\u2019 time? Well \u2026 still lagging Amsterdam, but leveraging the central place in the Netherlands (easy to get to), it will be a good runner-up in terms of attracting talent interested in joining this scene.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? Health tech/edtech \u2014 most exited: the DLT/blockchain/fintech/open-source space in Utrecht.\u00a0 Weak: Hardware-based startups (better in Delft/Eindhoven).\n Which are the most interesting startups in your city? GitLab, Channable,  Pepscope,  Goin\u2019 Connect,  Fundsup.\n What are the tech investors like? What is the investment scene like in your city? What\u2019s their focus? Focus on health tech.\n With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? Stay: a lot of nature/space around.\n Who are the key startup people in your city (e.g., investors, founders, lawyers, designers, etc.)?\u00a0 Jorg Kop, Stefan Braam, Jasper Voorendonk.\n Where do you see your city\u2019s tech scene in five years\u2019 time? Utrecht, as the Dutch vibrant hub for early-stage, highly scalable tech startups.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? Strong in life sciences.\n  With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? People will preferably move out of the city center toward the villages nearby (all within a range of 10-20 km).\n Where do you see your city\u2019s tech scene in five years\u2019 time? It will grow at a rate similar to the global tech scene.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? Strong: IT, digital, sustainable energy, medical, food. Weaker: design, hardware, fintech.\n  What are the tech investors like? What is the investment scene like in your city? What\u2019s their focus? A focus on building a better world and a profit, not just the profit.\n With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? Stay. Tt is a lush, green city with plenty of room to live and breathe.\n Who are the key startup people in your city (e.g., investors, founders, lawyers, designers, etc.)?\u00a0 Utrecht Inc (Jasper Voorendonk). Dotslash (Jelle Drijver). StartupUtrecht (Heerd Jan Hoogeveen).\n Where do you see your city\u2019s tech scene in five years\u2019 time? Thriving and still growing.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in?\n We\u2019re strong in public affairs. We\u2019re weak in the for-profit sector.\n  With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? The city of Utrecht is ever-expanding; people will always move in.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? SAAS, software, B2B.\n What are the tech investors like? What is the investment scene like in your city? What\u2019s their focus? In Amsterdam it\u2019s ok. Utrecht is a bit lagging.\n With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? Stay.\n Where do you see your city\u2019s tech scene in five years\u2019 time? In Holland, second after Amsterdam.\n  What industry sectors is your tech ecosystem strong in? What are you most excited by? What is it weak in? Strong: health, edtech, IT.\n  What are the tech investors like? What is the investment scene like in your city? What\u2019s their focus? IT, health, edtech, travel.\n With the shift to remote working during the COVID-19 pandemic, will people stay in your city, move out, or will others move in? Stay.\n Who are the key startup people in your city (e.g., investors, founders, lawyers, designers, etc.)?\u00a0 Jorg Kop, Heerd Jan Hoogeveen, Robbert Jan Hanse.\n Where do you see your city\u2019s tech scene in five years\u2019 time? Expanding.", "posttime": "2021-08-06 14:28:13", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u521b\u4e1a,\u963f\u59c6\u65af\u7279\u4e39,startup,\u8377\u5170", "title": "\u8377\u5170\u521b\u4e1a\u4e2d\u5fc3\u4e4c\u5f97\u52d2\u652f\u4ece\u963f\u59c6\u65af\u7279\u4e39\u7684\u9634\u5f71\u4e2d\u8131\u9896\u800c\u51fa", "title_en": "\n\t\t\t\tDutch startup hub Utrecht emerges from Amsterdam\u2019s shadow\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/08/05/dutch-startup-hub-utrecht-emerges-from-amsterdams-shadow/", "via": "", "real_tags": ["\u521b\u4e1a", "\u963f\u59c6\u65af\u7279\u4e39", "startup", "\u8377\u5170"]}, {"category": "", "categoryclass": "", "imagename": "158f85aa3a2b490498e1e46f5b5bc42f.jpg", "infoid": 1071721, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u7b79\u96c6\u4e86\u8d85\u8fc7 1 \u4ebf\u7f8e\u5143\u7684\u589e\u957f\u80a1\u6743\u8d44\u672c\u540e\uff0c\u60a3\u8005\u53c2\u4e0e\u516c\u53f8 Relatient \u8ba1\u5212\u4f7f\u7528\u90e8\u5206\u8d44\u91d1\u6536\u8d2d\u521d\u521b\u516c\u53f8 Radix Health\u3002\u8fd9\u7b14\u4ea4\u6613\u5c06\u4f7f\u7528 Radix \u7684\u673a\u5668\u5b66\u4e60\u8f6f\u4ef6\u6784\u5efa Relatient \u7684\u73b0\u6709\u5e73\u53f0\uff0c\u7528\u4e8e\u60a3\u8005-\u63d0\u4f9b\u8005\u5339\u914d\u3001\u81ea\u52a8\u8f6c\u8bca\u548c\u4f18\u5316\u65f6\u95f4\u8868\u3002\u4e24\u5bb6\u516c\u53f8\u6ca1\u6709\u900f\u9732\u4ea4\u6613\u6761\u6b3e\uff0c\u9884\u8ba1\u4ea4\u6613\u5c06\u4e8e\u672c\u6708\u5b8c\u6210\u3002\u4f4d\u4e8e\u7530\u7eb3\u897f\u5dde\u5bcc\u5170\u514b\u6797\u7684 Relatient \u4e3a\u533b\u7597\u4fdd\u5065\u63d0\u4f9b\u8005\u6784\u5efa\u4e86\u4e00\u5957\u89e3\u51b3\u65b9\u6848\uff0c\u4ece\u9884\u7ea6\u5b89\u6392\u5230\u767b\u8bb0\u548c\u60a3\u8005\u3002\u5927\u6d41\u884c\u5f00\u59cb\u540e\uff0c\u80fd\u591f\u4e0e\u60a3\u8005\u8fdb\u884c\u6709\u6548\u6c9f\u901a\u662f\u5173\u952e\uff0c\u4ece\u4f20\u8fbe\u6709\u5173\u8fd9\u79cd\u65b0\u75c5\u6bd2\u7684\u4fe1\u606f\u5230\u63d0\u4f9b\u6709\u5173\u63a9\u853d\u548c\u5e2e\u52a9\u5728\u9884\u7ea6\u524d\u8fdb\u884c\u5206\u7c7b\u7684\u4fe1\u606f\u3002\u9996\u5e2d\u6267\u884c\u5b98\u7c73\u6b47\u5c14\u00b7\u4f69\u91cc (Michele Perry) \u8868\u793a\uff0c\u5927\u6d41\u884c\u5c06\u60a3\u8005\u53c2\u4e0e\u8def\u7ebf\u56fe\u5411\u524d\u63a8\u8fdb\u4e86\u4e00\u4e24\u5e74\u3002\u5979\u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u58f0\u660e\u4e2d\u5199\u9053\uff1a\u201c\u5728\u5927\u6d41\u884c\u671f\u95f4\uff0c\u533b\u9662\u3001\u536b\u751f\u7cfb\u7edf\u548c\u533b\u7597\u8bca\u6240\u5927\u5e45\u589e\u52a0\u4e86\u57fa\u4e8e\u6587\u672c\u7684\u901a\u4fe1\u7684\u4f7f\u7528\uff0c\u4ee5\u5e2e\u52a9\u5e94\u5bf9\u4e0d\u65ad\u53d8\u5316\u7684\u52a8\u6001\u3002\u201d \u201c\u73b0\u5728\uff0c\u6211\u4eec\u770b\u5230\u5bf9 Radix Health \u7b49\u60a3\u8005\u8bbf\u95ee\u89e3\u51b3\u65b9\u6848\u7684\u9700\u6c42\u4e0d\u65ad\u589e\u957f\uff0c\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u5bb9\u91cf\u6765\u5e2e\u52a9\u89e3\u51b3\u5ef6\u8fdf\u62a4\u7406\u7684\u60a3\u8005\u79ef\u538b\u95ee\u9898\u3002\u201d\u9664\u4e86\u4e3a\u6b64\u6b21\u6536\u8d2d\u63d0\u4f9b\u8d44\u91d1\u5916\uff0cRelatient \u8fd8\u8ba1\u5212\u5c06\u90e8\u5206\u8d44\u91d1\u7528\u4e8e\u5145\u5206\u5229\u7528\u5f53\u524d\u7684\u673a\u4f1a\u3002\u4f8b\u5982\uff0c\u4f69\u91cc\u8868\u793a\uff0c\u8be5\u516c\u53f8\u5e0c\u671b\u5728\u5176 225 \u4eba\u7684\u5458\u5de5\u961f\u4f0d\u4e2d\u589e\u52a0 30 \u591a\u4eba\u3002", "note_en": "After raising more than $100 million in growth equity capital, patient engagement company Relatient plans to use a portion of the funds to acquire startup Radix Health. The deal would build out Relatient\u2019s existing platform with Radix\u2019s machine learning software for patient-provider matching, automating referrals and optimizing schedules.\n The companies did not disclose the terms of the deal, which is expected to close this month.\n   Franklin, Tenn.-based Relatient has built out a suite of solutions for healthcare providers, from appointment scheduling to check-in and patients. After the start of the pandemic, being able to effectively communicate with patients was key, from communicating information about this new virus, to providing information about masking and helping triage before an appointment.\n CEO Michele Perry said the pandemic pushed patient engagement roadmaps forward a year or two.\n \u201cDuring the pandemic, hospitals, health systems, and medical clinics drastically increased the use of text-based communications to help with the ever-changing dynamics,\u201d she wrote in an emailed statement. \u201cNow we\u2019re seeing demand grow for patient access solutions like Radix Health that can help meet the backlog of patients that delayed care through increased capacity.\u201d\n In addition to helping fund the acquisition, Relatient also plans to put some of the capital to use to make the most of the current opportunity. For example, Perry said the company is looking to add more than 30 people to its 225-person workforce.", "posttime": "2021-08-06 14:20:25", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6f\u4ef6,software,\u60a3\u8005", "title": "\u60a3\u8005\u53c2\u4e0e\u8f6f\u4ef6\u5236\u9020\u5546 Relatient \u7b79\u96c6\u4e86 1 \u4ebf\u7f8e\u5143\uff0c\u8ba1\u5212\u6536\u8d2d Radix Health \u4ee5\u7528\u4e8e\u5176\u57fa\u4e8e ML \u7684\u8f6f\u4ef6\uff0c\u8be5\u8f6f\u4ef6\u53ef\u5b9e\u73b0\u60a3\u8005\u4e0e\u63d0\u4f9b\u8005\u5339\u914d\uff0c\u66f4\u591a", "title_en": "Patient engagement software maker Relatient raises $100M, plans to acquire Radix Health for its ML-based software that enables patient-provider matching, more", "transed": 1, "url": "https://medcitynews.com/2021/08/relatient-plans-to-beef-up-patient-engagement-software-with-radix-acquisition/", "via": "", "real_tags": ["\u8f6f\u4ef6", "software", "\u60a3\u8005"]}, {"category": "", "categoryclass": "", "imagename": "4268e9dc16664f645fd2fa5ec2d6fcd4.jpeg", "infoid": 1071720, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u539f\u5b50\u64cd\u4f5c\u548c C++11 \u5185\u5b58\u5c4f\u969c\u4ee5\u53ca\u5b83\u5728 x86_64 CPU \u4e0a\u751f\u6210\u7684\u6c47\u7f16\u6307\u4ee4\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\u5c06 contfree_safe_ptr&lt;std::map&gt; \u7684\u5de5\u4f5c\u52a0\u901f\u5230\u5728\u529f\u80fd\u65b9\u9762\u7c7b\u4f3c\u4e8e std::map&lt;&gt; \u7684\u590d\u6742\u548c\u4f18\u5316\u7684\u65e0\u9501\u6570\u636e\u7ed3\u6784\u7684\u7ea7\u522b\uff0c\u4f8b\u5982\u793a\u4f8b\uff1a\u6765\u81ea libCDS \u5e93\uff08\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u5e93\uff09\u7684 SkipListMap \u548c BronsonAVLTreeMap\uff1ahttps://github.com/khizmax/libcds\u3002\u6211\u4eec\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6700\u521d\u7528\u4f5c contfree_safe_ptr&lt;T&gt; \u7684\u975e\u7ebf\u7a0b\u5b89\u5168 T \u7c7b\u83b7\u5f97\u8fd9\u6837\u7684\u591a\u7ebf\u7a0b\u6027\u80fd\u2014\u2014\u5b83\u662f safe_ptr&lt;T, contention_free_shared_mutex&gt; \u7c7b\uff0c\u5176\u4e2d contention_free_shared_mutex \u662f\u81ea\u5df1\u4f18\u5316\u7684\u5171\u4eab\u4e92\u65a5\u9501\u3002\u5373\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\u5b9e\u73b0\u60a8\u81ea\u5df1\u7684\u9ad8\u6027\u80fd\u65e0\u4e89\u7528\u5171\u4eab\u4e92\u65a5\u9501\uff0c\u8fd9\u5728\u9605\u8bfb\u4e0a\u51e0\u4e4e\u4e0d\u51b2\u7a81\u3002\u6211\u4eec\u5b9e\u73b0\u4e86\u6211\u4eec\u81ea\u5df1\u7684\u6d3b\u52a8\u9501\u2014\u2014\u81ea\u65cb\u9501\u548c\u9012\u5f52\u81ea\u65cb\u9501\u2014\u2014\u6765\u9501\u5b9a\u66f4\u65b0\u64cd\u4f5c\u4e2d\u7684\u884c\u3002\u6211\u4eec\u5c06\u521b\u5efa RAII \u963b\u585e\u6307\u9488\u4ee5\u907f\u514d\u591a\u91cd\u9501\u5b9a\u7684\u6210\u672c\u3002\u4ee5\u4e0b\u662f\u6027\u80fd\u6d4b\u8bd5\u7684\u7ed3\u679c\u3002\u4f5c\u4e3a\u201c\u53ea\u662f\u4e3a\u4e86\u597d\u73a9\u201d\u7684\u5956\u52b1\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u6211\u4eec\u81ea\u5df1\u7684\u7b80\u5316\u5206\u533a\u7c7b\u578b partitioned_map \u7c7b\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u8be5\u7c7b\u9488\u5bf9\u591a\u7ebf\u7a0b\u8fdb\u884c\u4e86\u66f4\u52a0\u4f18\u5316\uff0c\u7531\u51e0\u4e2a std::map \u7ec4\u6210\uff0c\u7c7b\u4f3c\u4e8e RDBMS \u4e2d\u7684\u5206\u533a\u8868\uff0c\u5f53\u6700\u521d\u77e5\u9053\u6bcf\u4e2a\u90e8\u5206\u7684\u8fb9\u754c\u65f6\u3002\u5982\u679c\u6211\u4eec\u66f4\u6539\u4e00\u7ec4\u7ebf\u7a0b\u4e2d\u7684\u76f8\u540c\u6570\u636e\uff0c\u5373\uff0c\u5982\u679c\u6211\u4eec\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e2d\u540c\u65f6\u8fd0\u884c thread_func() \u51fd\u6570\uff1a\u90a3\u4e48\u6bcf\u4e2a\u8c03\u7528 thread_func() \u51fd\u6570\u7684\u7ebf\u7a0b\u90fd\u5c06\u666e\u901a\u5171\u4eab\u53d8\u91cf int a \u52a0 1\uff1b\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u4e0d\u4f1a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u4e0e\u666e\u901a\u53d8\u91cf\u7684\u590d\u5408\u64cd\u4f5c\uff08RMW - \u8bfb\u53d6-\u4fee\u6539-\u5199\u5165\uff09\u7531\u8bb8\u591a\u5c0f\u64cd\u4f5c\u7ec4\u6210\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u5728\u8fd9\u4e9b\u5c0f\u64cd\u4f5c\u4e4b\u95f4\u66f4\u6539\u6570\u636e\u3002\u64cd\u4f5c a = a+1;\u81f3\u5c11\u5305\u542b\u4e09\u4e2a\u5c0f\u64cd\u4f5c\uff1a\n\u5bf9\u4e8e\u975e\u539f\u5b50int a\uff0c\u5982\u679c\u521d\u59cba=0\uff1b 2\u4e2a\u7ebf\u7a0b\u6267\u884c\u64cd\u4f5ca=a+1\uff1b\u90a3\u4e48\u7ed3\u679c\u5e94\u8be5\u662fa=2\uff1b\u4f46\u662f\u53ef\u80fd\u4f1a\u53d1\u751f\u4ee5\u4e0b\u60c5\u51b5\uff08\u9010\u6b65\uff09\uff1a int a = 0; // register1 = ?, register2 = ?, a = 0Thread 1: register1 = a; // register1 = 0, register2 = ?, a = 0Thread 2: register2 = a // register1 = 0, register2 = 0, a = 0Thread 1: register1++; // register1 = 1, register2 = 0, a = 0\u7ebf\u7a0b 2: register2++; // register1 = 1, register2 = 1, a = 0Thread 1: a = register1; // register1 = 1, register2 = 1, a = 1Thread 2: a = register2; // register1 = 1, register2 = 1, a = 1 \u4e24\u4e2a\u7ebf\u7a0b\u5bf9\u540c\u4e00\u4e2a\u521d\u59cb\u503c=0\u7684\u5168\u5c40\u53d8\u91cf\u52a0+1\uff0c\u4f46\u6700\u7ec8\u53d8\u91cfa=1\u2014\u2014\u8fd9\u6837\u7684\u95ee\u9898\u53eb\u505aData-Races\u3002\u4f7f\u7528\u5e26\u6709\u539f\u5b50\u53d8\u91cf\u7684\u539f\u5b50\u6307\u4ee4\u2014\u2014\u4f46\u6709\u4e00\u4e2a\u7f3a\u70b9\uff0c\u539f\u5b50\u51fd\u6570\u7684\u6570\u91cf\u975e\u5e38\u5c11\u2014\u2014\u56e0\u6b64\uff0c\u501f\u52a9\u6b64\u7c7b\u51fd\u6570\u5f88\u96be\u5b9e\u73b0\u590d\u6742\u7684\u903b\u8f91\uff1ahttp://en.cppreference.com/w /cpp/atomic/atomic \u4f7f\u7528\u9501\uff08std::mutex\u3001std::shared_timed_mutex\u3001spinlock\u2026\uff09\u2014\u2014\u5b83\u4eec\u5141\u8bb81\u4e2a\u7ebf\u7a0b\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u8fdb\u5165\u9501\u5b9a\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u6570\u636e\u7ade\u4e89\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4efb\u4f55\u666e\u901a\u7684\u975e\u7ebf\u7a0b\u5b89\u5168\u5bf9\u8c61\u6765\u4f7f\u7528\u4efb\u610f\u590d\u6742\u7684\u903b\u8f91\u3002\u5bf9\u4e8e std::atomic&lt;int&gt; a: \u5982\u679c\u6700\u521d a=0; 2\u4e2a\u7ebf\u7a0b\u6267\u884c\u64cd\u4f5ca+=1\uff1b\u90a3\u4e48\u7ed3\u679c\u603b\u662f a=2; std::atomic &lt; int &gt; a = 0; // register1 = ?, register2 = ?, a = 0Thread 1: register1 = a; // register1 = 0, register2 = ?, a = 0Thread 1: register1++; // register1 = 1, register2 = 0, a = 0\u7ebf\u7a0b 1: a = register1; // register1 = 1, register2 = 0, a = 1Thread 2: register2 = a; // register1 = 1, register2 = 1, a = 1Thread 2: register2++; // register1 = 1, register2 = 2, a = 1Thread 2: a = register2; // \u5bc4\u5b58\u5668 1 = 1\uff0c\u5bc4\u5b58\u5668 2 = 2\uff0ca = 2\n\u5728\u652f\u6301 LL/SC \u7684\u5904\u7406\u5668\u4e0a\uff0c\u4f8b\u5982\u5728 ARM \u4e0a\uff0c\u4f1a\u53d1\u751f\u5176\u4ed6\u6b65\u9aa4\uff0c\u4f46\u5177\u6709\u76f8\u540c\u7684\u6b63\u786e\u7ed3\u679c\uff1aa = 2\u3002\u987a\u5e8f\u4e00\u81f4\u6027 std::memory_order_seq_cst \u662f\u9ed8\u8ba4\u5185\u5b58\u5c4f\u969c\uff08\u6700\u4e25\u683c\u548c\u53ef\u9760\uff0c\u4f46\u4e5f\u662f\u76f8\u5bf9\u4e8e\u5176\u4ed6\u4eba\u6700\u6162\uff09\u3002\u4f18\u5316\uff1a\u5bf9\u4e8e std::atomic&lt;T&gt; a;\u4e24\u79cd\u4f18\u5316\u662f\u53ef\u80fd\u7684\uff0c\u8fd9\u5bf9\u4e8e volatile T a \u662f\u4e0d\u53ef\u80fd\u7684\uff1b\u878d\u5408\u4f18\u5316\uff1aa = 10\uff1b\u4e00 = 20;\u53ef\u4ee5\u7528a = 20\u7684\u7f16\u8bd1\u5668\u4ee3\u66ff\uff1b\u7528\u5e38\u6570\u4f18\u5316\u66ff\u4ee3\uff1aa = 1\uff1b\u672c\u5730 = \u4e00\u4e2a;\u53ef\u4ee5\u7528\u7f16\u8bd1\u5668\u4ee3\u66ff a = 1;\u672c\u5730 = 1;\u91cd\u65b0\u6392\u5e8f\uff1a std::atomic&lt;T&gt;a;\u64cd\u4f5c\u53ef\u4ee5\u6839\u636e\u4f7f\u7528\u7684\u5185\u5b58\u5c4f\u969c std::memory_order _... \u9650\u5236\u5bf9\u666e\u901a\u53d8\u91cf\u7684\u64cd\u4f5c\u548c\u5176\u4ed6\u539f\u5b50\u53d8\u91cf\u7684\u64cd\u4f5c\u7684\u91cd\u65b0\u6392\u5e8f\u3002 \u76f8\u53cd\uff0c volatile T a;\u4e0d\u5f71\u54cd\u5e38\u89c4\u53d8\u91cf\u7684\u987a\u5e8f\uff08\u975e\u539f\u5b50/\u975e\u6613\u5931\u6027\uff09\uff0c\u4f46\u5bf9\u6240\u6709\u6613\u5931\u6027\u53d8\u91cf\u7684\u8c03\u7528\u59cb\u7ec8\u4fdd\u6301\u4e25\u683c\u7684\u76f8\u4e92\u987a\u5e8f\uff0c\u5373\u4efb\u4f55\u4e24\u4e2a\u6613\u5931\u6027\u64cd\u4f5c\u7684\u6267\u884c\u987a\u5e8f\u90fd\u4e0d\u80fd\u88ab\u7f16\u8bd1\u5668\u6539\u53d8\uff0c\u4f46\u4e0d\u662f\u7531 CPU\u3002\u6ea2\u51fa\uff1astd::memory_order_release\u3001std::memory_order_acq_rel\u3001std::memory_order_seq_cst \u5185\u5b58\u5c4f\u969c\uff0c\u4e3a std::atomic&lt;T&gt; a \u6307\u5b9a\uff1b\u64cd\u4f5c\uff0c\u5728\u6267\u884c\u539f\u5b50\u64cd\u4f5c\u4e4b\u524d\u542f\u52a8\u6240\u6709\u5e38\u89c4\u53d8\u91cf\u7684\u6ea2\u51fa\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e9b\u5c4f\u969c\u5c06CPU\u5bc4\u5b58\u5668\u4e2d\u7684\u5e38\u89c4\u53d8\u91cf\u4e0a\u4f20\u5230\u4e3b\u5b58/\u7f13\u5b58\u4e2d\uff0c\u9664\u975e\u7f16\u8bd1\u5668\u53ef\u4ee5100%\u4fdd\u8bc1\u8fd9\u4e2a\u5c40\u90e8\u53d8\u91cf\u4e0d\u80fd\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u4f7f\u7528\u3002\u539f\u5b50\u6027/\u5bf9\u9f50\uff1a\u5bf9\u4e8e std::atomic&lt;T&gt; a;\u5176\u4ed6\u7ebf\u7a0b\u770b\u5230\u64cd\u4f5c\u5df2\u5b8c\u5168\u6267\u884c\u6216\u6839\u672c\u672a\u6267\u884c\u3002\u5bf9\u4e8e Integral \u7c7b\u578b T\uff0c\u8fd9\u662f\u901a\u8fc7\u7f16\u8bd1\u5668\u5728\u5185\u5b58\u4e2d\u5bf9\u9f50\u539f\u5b50\u53d8\u91cf\u4f4d\u7f6e\u6765\u5b9e\u73b0\u7684 - \u81f3\u5c11\uff0c\u8be5\u53d8\u91cf\u4f4d\u4e8e\u5355\u4e2a\u7f13\u5b58\u884c\u4e2d\uff0c\u4ee5\u4fbf CPU \u7684\u4e00\u6b21\u64cd\u4f5c\u53ef\u4ee5\u66f4\u6539\u6216\u52a0\u8f7d\u8be5\u53d8\u91cf\u3002\u76f8\u53cd\uff0c\u7f16\u8bd1\u5668\u4e0d\u4fdd\u8bc1 volatile \u53d8\u91cf\u7684\u5bf9\u9f50\u3002\u6613\u5931\u6027\u53d8\u91cf\u901a\u5e38\u7528\u4e8e\u8bbf\u95ee\u8bbe\u5907\u7684\u5185\u5b58\uff08\u6216\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff09\uff0c\u56e0\u6b64\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u7684 API \u4f1a\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u6613\u5931\u6027\u53d8\u91cf\u7684\u6307\u9488\uff0c\u5982\u679c\u9700\u8981\uff0c\u6b64 API \u53ef\u786e\u4fdd\u5bf9\u9f50\u3002\nRMW \u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff08\u8bfb-\u4fee\u6539-\u5199\uff09\uff1a\u5bf9\u4e8e std::atomic&lt;T&gt; a;\u64cd\u4f5c ( ++, --, += , -= , *=, /=, CAS, exchange) \u4ee5\u539f\u5b50\u65b9\u5f0f\u6267\u884c\uff0c\u5373\u5982\u679c\u4e24\u4e2a\u7ebf\u7a0b\u6267\u884c\u64cd\u4f5c ++a\uff1b\u90a3\u4e48 a \u53d8\u91cf\u5c06\u59cb\u7ec8\u589e\u52a0 2\u3002\u8fd9\u662f\u901a\u8fc7\u9501\u5b9a\u7f13\u5b58\u884c (x86_64) \u6216\u901a\u8fc7\u5728 RMW \u64cd\u4f5c\u671f\u95f4\u5728\u652f\u6301 LL/SC\uff08ARM\u3001PowerPC\uff09\u7684 CPU \u4e0a\u6807\u8bb0\u7f13\u5b58\u884c\u6765\u5b9e\u73b0\u7684\u3002\u53ef\u53d8\u53d8\u91cf\u4e0d\u80fd\u786e\u4fdd\u590d\u5408 RMW \u64cd\u4f5c\u7684\u539f\u5b50\u6027\u3002\u53d8\u91cf std::atomic \u548c volatile \u6709\u4e00\u4e2a\u901a\u7528\u89c4\u5219\uff1a\u6bcf\u6b21\u8bfb\u6216\u5199\u64cd\u4f5c\u603b\u662f\u8c03\u7528\u5185\u5b58/\u7f13\u5b58\uff0c\u5373\u8fd9\u4e9b\u503c\u6c38\u8fdc\u4e0d\u4f1a\u7f13\u5b58\u5728 CPU \u5bc4\u5b58\u5668\u4e2d\u3002\u6b64\u5916\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u666e\u901a\u53d8\u91cf\u548c\u5bf9\u8c61\uff08\u975e\u539f\u5b50/\u975e\u6613\u5931\u6027\uff09\uff0c\u7531\u7f16\u8bd1\u5668\u6216 CPU \u5b8c\u6210\u7684\u4efb\u4f55\u4f18\u5316\u548c\u72ec\u7acb\u6307\u4ee4\u7684\u4efb\u4f55\u91cd\u65b0\u6392\u5e8f\u90fd\u662f\u53ef\u80fd\u7684\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4f7f\u7528\u5e26\u6709 std::memory_order_release\u3001std::memory_order_acq_rel \u548c std::memory_order_seq_cst \u5185\u5b58\u5c4f\u969c\u7684\u539f\u5b50\u53d8\u91cf\u5199\u5165\u5185\u5b58\u7684\u64cd\u4f5c\u4fdd\u8bc1\u4e86\u6240\u6709\u975e\u539f\u5b50/\u975e\u6613\u5931\u6027\u53d8\u91cf\u7684\u6ea2\u51fa\uff08\u4ece\u5bc4\u5b58\u5668\u5199\u5165\u5185\u5b58\uff09\uff0c\u5176\u4e2d\u6b64\u523b\u5728 CPU \u5bc4\u5b58\u5668\u4e2d\uff0c\u7acb\u5373\uff1ahttps://en.wikipedia.org/wiki/Register_allocation#Spilling\u3002\u7f16\u8bd1\u5668\u548c\u5904\u7406\u5668\u66f4\u6539\u6307\u4ee4\u7684\u987a\u5e8f\u4ee5\u4f18\u5316\u7a0b\u5e8f\u5e76\u63d0\u9ad8\u5176\u6027\u80fd\u3002\u4ee5\u4e0b\u662f GCC \u7f16\u8bd1\u5668\u548c CPU x86_64 \u5b8c\u6210\u7684\u4f18\u5316\u793a\u4f8b\uff1ahttps://godbolt.org/g/n91hpt\u3002 GCC 7.0 \u7f16\u8bd1\u5668\u91cd\u65b0\u6392\u5e8f\uff1a\u5b83\u4ea4\u6362\u5199\u5165\u5185\u5b58 b = 5\uff1b\u5e76\u4ece\u5185\u5b58\u4e0a\u4f20\u5230\u5bc4\u5b58\u5668 int tmp_c = c ;\u3002\u8fd9\u5141\u8bb8\u4f60\u5c3d\u65e9\u8bf7\u6c42\u201cc\u201d\u503c\uff0c\u800c\u5728 CPU \u7b49\u5f85\u8fd9\u4e2a\u957f\u64cd\u4f5c\u7684\u540c\u65f6\uff0cCPU \u7ba1\u9053\u5141\u8bb8\u6267\u884c\u64cd\u4f5c b = 5\uff1b\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u4e0d\u76f8\u4e92\u4f9d\u8d56\u3002\n\u5b83\u7ed3\u5408\u4ece\u5185\u5b58\u4e0a\u4f20\u5230\u5bc4\u5b58\u5668 int tmp_a = a;\u548c\u52a0\u6cd5\u8fd0\u7b97 - tmp_c = tmp_c + tmp_a;\u7ed3\u679c\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u64cd\u4f5c add eax, a[rip] \u800c\u4e0d\u662f\u4e24\u4e2a\u64cd\u4f5c\u3002 x86_64 CPU\u91cd\u65b0\u6392\u5e8f\uff1aCPU\u53ef\u4ee5\u5c06\u5b9e\u9645\u5199\u5165\u5185\u5b58\u7684mov b[rip], 5\u548c\u4ece\u5185\u5b58\u8bfb\u53d6\u8fdb\u884c\u4ea4\u6362\uff0c\u7ed3\u5408\u52a0\u6cd5\u64cd\u4f5c\u2014\u2014add eax, a[rip]\u3002\u5728\u901a\u8fc7 mov b[rip], 5 \u6307\u4ee4\u5f00\u59cb\u5199\u5165\u5185\u5b58\u65f6\uff0c\u4f1a\u53d1\u751f\u4ee5\u4e0b\u60c5\u51b5\uff1a\u9996\u5148\uff0c\u5c06 5 \u7684\u503c\u548c b[rip] \u7684\u5730\u5740\u653e\u5165 Store-buffer \u961f\u5217\uff0c\u5305\u542b\u5730\u5740\u7684\u7f13\u5b58\u884c\u9884\u8ba1\u6240\u6709 CPU \u5185\u6838\u4e2d\u7684 b[rip] \u90fd\u5c06\u5931\u6548\u5e76\u7b49\u5f85\u5b83\u4eec\u7684\u54cd\u5e94\uff0c\u7136\u540e CPU-Core-0 \u4e3a\u5305\u542b b[rip] \u7684\u7f13\u5b58\u884c\u8bbe\u7f6e\u201c\u6392\u4ed6\u201d\u72b6\u6001\u3002\u53ea\u6709\u5728\u6b64\u4e4b\u540e\uff0c\u624d\u4f1a\u5c06 Store-buffer \u4e2d\u7684 5 \u503c\u5b9e\u9645\u5199\u5165 b[rip] \u5904\u7684\u8be5\u7f13\u5b58\u884c\u3002\u6709\u5173 x86_64 MOESI / MESIF \u4e0a\u7684\u7f13\u5b58\u4e00\u81f4\u6027\u534f\u8bae\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u6240\u6709\u5185\u6838\u7acb\u5373\u53ef\u89c1\u7684\u66f4\u6539\uff0c\u8bf7\u53c2\u9605\u6b64\u94fe\u63a5\u3002\u4e3a\u4e86\u4e0d\u4e00\u76f4\u7b49\u5f85\u2014\u2014\u5728\u201c5\u201d\u653e\u5165Store-Buffer\u4e4b\u540e\uff0c\u65e0\u9700\u7b49\u5f85\u5b9e\u9645\u7684\u7f13\u5b58\u6761\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u6267\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u6216\u5bc4\u5b58\u5668\u64cd\u4f5c\u3002\u8fd9\u5c31\u662f x86_64 CPU \u7684\u529f\u80fd\uff1a\u82f1\u7279\u5c14\u00ae 64 \u4f4d\u548c IA-32 \u67b6\u6784\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u624b\u518c\u7b2c 3 \u5377\uff083A\u30013B\u30013C \u548c 3D\uff09\uff1a\u7cfb\u7edf\u7f16\u7a0b\u6307\u5357\u3002 Intel-64 \u5185\u5b58\u6392\u5e8f\u6a21\u578b\u5141\u8bb8\u4f7f\u7528\u8f83\u65e9\u7684\u5b58\u50a8\u5c06\u52a0\u8f7d\u91cd\u65b0\u6392\u5e8f\u5230\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\u4f46\u662f\uff0c\u52a0\u8f7d\u4e0d\u4f1a\u4e0e\u5b58\u50a8\u91cd\u65b0\u6392\u5e8f\u5230\u540c\u4e00\u4f4d\u7f6e\u3002 x86_64 \u7cfb\u5217\u7684 CPU \u5177\u6709\u5f3a\u5927\u7684\u5185\u5b58\u6a21\u578b\u3002\u5177\u6709\u5f31\u5185\u5b58\u6a21\u578b\u7684 CPU\uff0c\u4f8b\u5982 PowerPC \u548c ARM v7/v8\uff0c\u53ef\u4ee5\u6267\u884c\u66f4\u591a\u7684\u91cd\u65b0\u6392\u5e8f\u3002\n\u4ee5\u4e0b\u662f\u53ef\u80fd\u5bf9\u666e\u901a\u53d8\u91cf\u3001\u6613\u5931\u6027\u53d8\u91cf\u548c\u539f\u5b50\u53d8\u91cf\u7684\u5185\u5b58\u4e2d\u7684\u6761\u76ee\u8fdb\u884c\u91cd\u65b0\u6392\u5e8f\u7684\u793a\u4f8b\u3002\u8fd9\u6bb5\u5e26\u6709\u666e\u901a\u53d8\u91cf\u7684\u4ee3\u7801\u53ef\u4ee5\u7531\u7f16\u8bd1\u5668\u6216 CPU \u91cd\u65b0\u6392\u5e8f\uff0c\u56e0\u4e3a\u5b83\u7684\u542b\u4e49\u5728\u4e00\u4e2a\u7ebf\u7a0b\u5185\u4e0d\u4f1a\u6539\u53d8\u3002\u4f46\u662f\u5728\u4e00\u7ec4\u7ebf\u7a0b\u4e2d\uff0c\u8fd9\u79cd\u91cd\u65b0\u6392\u5e8f\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u903b\u8f91\u3002\u5982\u679c\u4e24\u4e2a\u53d8\u91cf\u662f volatile\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u91cd\u65b0\u6392\u5e8f\u3002\u7f16\u8bd1\u5668\u4e0d\u80fd\u5728\u7f16\u8bd1\u65f6\u5bf9 volatile \u53d8\u91cf\u7684\u64cd\u4f5c\u91cd\u65b0\u6392\u5e8f\uff0c\u4f46\u7f16\u8bd1\u5668\u5141\u8bb8 CPU \u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u8fd9\u79cd\u91cd\u65b0\u6392\u5e8f\u3002\u4e3a\u4e86\u9632\u6b62\u5168\u90e8\u6216\u4ec5\u90e8\u5206\u91cd\u65b0\u6392\u5e8f\uff0c\u6709\u539f\u5b50\u64cd\u4f5c\uff08\u56de\u60f3\u4e00\u4e0b\u539f\u5b50\u64cd\u4f5c\u4f7f\u7528\u6700\u4e25\u683c\u7684\u5185\u5b58\u5c4f\u969c - \u9ed8\u8ba4\u60c5\u51b5\u4e0b std::memory_order_seq_cst \uff09\u3002\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u5b8c\u5168\u6309\u7167\u4fee\u6539\u540e\u7684\u987a\u5e8f\u770b\u5230\u5185\u5b58\u4e2d\u53d8\u91cf\u7684\u53d8\u5316\u3002\u5982\u679c\u6211\u4eec\u6ca1\u6709\u4e3a\u539f\u5b50\u64cd\u4f5c\u6307\u5b9a\u5185\u5b58\u5c4f\u969c\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4f7f\u7528\u6700\u4e25\u683c\u7684\u5c4f\u969c std::memory_order_seq_cst \uff0c\u5e76\u4e14\u6ca1\u6709\u539f\u5b50\u6216\u975e\u539f\u5b50\u64cd\u4f5c\u53ef\u4ee5\u7528\u6b64\u7c7b\u64cd\u4f5c\u91cd\u65b0\u6392\u5e8f\uff08\u4f46\u6709\u4f8b\u5916\u6211\u4eec\u4f1a\u8003\u8651\u4e4b\u540e\uff09\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5148\u5199\u5165\u666e\u901a\u53d8\u91cfa\u548cb\uff0c\u7136\u540e-\u5199\u5165\u539f\u5b50\u53d8\u91cfa_at\u548cb_at\uff0c\u8fd9\u4e2a\u987a\u5e8f\u662f\u4e0d\u80fd\u6539\u53d8\u7684\u3002\u6b64\u5916\uff0c\u5199\u5165\u5185\u5b58 b_at \u4e0d\u80fd\u65e9\u4e8e\u5199\u5165\u5185\u5b58 a_at\u3002\u4f46\u662f\u5199\u5165\u53d8\u91cf a \u548c b \u53ef\u4ee5\u76f8\u5bf9\u4e8e\u5f7c\u6b64\u91cd\u65b0\u6392\u5e8f\u3002\n\u5f53\u6211\u4eec\u8bf4\u201c\u53ef\u4ee5\u91cd\u65b0\u6392\u5e8f\u201d\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\uff0c\u4f46\u4e0d\u4e00\u5b9a\u3002\u8fd9\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u671f\u95f4\u5982\u4f55\u51b3\u5b9a\u4f18\u5316 C++ \u4ee3\u7801\uff0c\u6216\u8005 CPU \u5728\u8fd0\u884c\u65f6\u5982\u4f55\u51b3\u5b9a\u4f18\u5316\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5c06\u8003\u8651\u66f4\u5f31\u7684\u5185\u5b58\u5c4f\u969c\uff0c\u5b83\u5141\u8bb8\u5728\u5141\u8bb8\u7684\u65b9\u5411\u4e0a\u91cd\u65b0\u6392\u5e8f\u6307\u4ee4\u3002\u8fd9\u5141\u8bb8\u7f16\u8bd1\u5668\u548c CPU \u66f4\u597d\u5730\u4f18\u5316\u4ee3\u7801\u5e76\u63d0\u9ad8\u6027\u80fd\u3002 C++11 \u6807\u51c6\u5185\u5b58\u6a21\u578b\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 6 \u79cd\u7c7b\u578b\u7684\u5185\u5b58\u5c4f\u969c\uff0c\u5b83\u4eec\u5bf9\u5e94\u4e8e\u73b0\u4ee3 CPU \u7684\u63a8\u6d4b\u6267\u884c\u80fd\u529b\u3002\u901a\u8fc7\u4f7f\u7528\u5b83\u4eec\uff0c\u6211\u4eec\u4e0d\u4f1a\u5b8c\u5168\u7981\u6b62\u66f4\u6539\u8ba2\u5355\uff0c\u4f46\u6211\u4eec\u4ec5\u7981\u6b62\u5728\u5fc5\u8981\u7684\u65b9\u5411\u4e0a\u8fdb\u884c\u66f4\u6539\u3002\u8fd9\u5141\u8bb8\u7f16\u8bd1\u5668\u548c CPU \u5c3d\u53ef\u80fd\u5730\u4f18\u5316\u4ee3\u7801\u3002\u91cd\u65b0\u6392\u5e8f\u7684\u7981\u6b62\u65b9\u5411\u4f7f\u6211\u4eec\u80fd\u591f\u4fdd\u6301\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002 http://en.cppreference.com/w/cpp/atomic/memory_order memory_order_consume\u3002\u7acb\u5373\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u4f7f\u7528 memory_order_consume \u5c4f\u969c\uff0c\u56e0\u4e3a\u5728\u6807\u51c6\u4e2d\uff0c\u5bf9\u5176\u4f7f\u7528\u7684\u5b9e\u7528\u6027\u5b58\u5728\u6000\u7591 - \u6765\u81ea\u6807\u51c6\u7684\u5f15\u7528\u3002 (1.3) \u2014 memory_order_consume\uff1a\u52a0\u8f7d\u64cd\u4f5c\u5bf9\u53d7\u5f71\u54cd\u7684\u5185\u5b58\u4f4d\u7f6e\u6267\u884c\u6d88\u8017\u64cd\u4f5c\u3002 [\u6ce8\u610f\uff1a\u9996\u9009memory_order_acquire\uff0c\u5b83\u6bd4memory_order_consume\u63d0\u4f9b\u66f4\u5f3a\u7684\u4fdd\u8bc1\u3002\u5b9e\u73b0\u53d1\u73b0\u63d0\u4f9b\u6bd4 memory_order_acquire \u66f4\u597d\u7684\u6027\u80fd\u662f\u4e0d\u53ef\u884c\u7684\u3002\u89c4\u8303\u4fee\u8ba2\u6b63\u5728\u8003\u8651\u4e2d\u3002 \u2014 \u5c3e\u6ce8] memory_order_acq_rel\u3002\u53e6\u5916\uff0c\u6211\u4eec\u6ce8\u610f\u5230memory_order_acq_rel\u5c4f\u969c\u53ea\u7528\u4e8eRMW\uff08Read-Modify-Write\uff09\u7684\u539f\u5b50\u590d\u5408\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1acompare_exchange_weak()/_strong(), exchange(), fetch_(add, sub, and, or, xor ) \u6216\u5176\u5bf9\u5e94\u7684\u64cd\u4f5c\u7b26\uff1ahttp://en.cppreference.com/w/cpp/atomic/atomic \u5176\u4f59\u56db\u4e2a\u5185\u5b58\u5c4f\u969c\u53ef\u7528\u4e8e\u4efb\u4f55\u64cd\u4f5c\uff0c\u9664\u4e86\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u201cacquire\u201d\u4e0d\u7528\u4e8e store() \uff0c\u5e76\u4e14\u201c\u91ca\u653e\u201d\u4e0d\u7528\u4e8e load()\u3002\n\u6839\u636e\u9009\u62e9\u7684\u5185\u5b58\u5c4f\u969c\uff0c\u5bf9\u4e8e\u7f16\u8bd1\u5668\u548c CPU\uff0c\u7981\u6b62\u5c06\u53ef\u6267\u884c\u4ee3\u7801\u76f8\u5bf9\u4e8e\u5c4f\u969c\u5411\u4e0d\u540c\u65b9\u5411\u79fb\u52a8\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u7bad\u5934\u6307\u5b9a\u4e86\u4ec0\u4e48\uff0c\u4ec0\u4e48\u53ef\u4ee5\u4e92\u6362\uff0c\u4ec0\u4e48\u4e0d\u80fd\u4e92\u6362\uff1a \u5bf9\u4e8e\u8981\u4e92\u6362\u7684\u4e24\u6761\u6307\u4ee4\uff0c\u4e24\u6761\u6307\u4ee4\u7684\u5c4f\u969c\u5fc5\u987b\u5141\u8bb8\u8fd9\u6837\u7684\u4e92\u6362\u3002\u56e0\u4e3a\u201c\u5176\u4ed6\u4efb\u4f55\u4ee3\u7801\u201d\u662f\u6307\u6ca1\u6709\u4efb\u4f55\u969c\u788d\u7684\u666e\u901a\u975e\u539f\u5b50\u53d8\u91cf\uff0c\u56e0\u6b64\u5b83\u4eec\u5141\u8bb8\u4efb\u4f55\u987a\u5e8f\u66f4\u6539\u3002\u4ee5Relaxed-Release-Relaxed \u4e3a\u4f8b\uff0c\u5982\u60a8\u6240\u89c1\uff0c\u66f4\u6539\u76f8\u540c\u5185\u5b58\u5c4f\u969c\u987a\u5e8f\u7684\u53ef\u80fd\u6027\u53d6\u51b3\u4e8e\u5b83\u4eec\u51fa\u73b0\u7684\u987a\u5e8f\u3002\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c\u8fd9\u4e9b\u5185\u5b58\u5c4f\u969c\u662f\u4ec0\u4e48\u610f\u601d\uff0c\u5b83\u4eec\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u4ec0\u4e48\u597d\u5904\uff0c\u901a\u8fc7\u6700\u7b80\u5355\u7684\u201c\u81ea\u65cb\u9501\u201d\u7c7b\u578b\u9501\u7684\u5b9e\u73b0\u793a\u4f8b\uff0c\u5b83\u9700\u8981\u6700\u5e38\u89c1\u7684\u83b7\u53d6-\u91ca\u653e\u91cd\u65b0\u6392\u5e8f\u8bed\u4e49\u3002\u81ea\u65cb\u9501\u662f\u4e00\u79cd\u5728\u4f7f\u7528\u65b9\u5f0f\u4e0a\u7c7b\u4f3c\u4e8e std::mutex \u7684\u9501\u3002\u9996\u5148\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u6211\u4eec\u7684\u7a0b\u5e8f\u4f53\u4e2d\u5b9e\u73b0\u4e86\u81ea\u65cb\u9501\u7684\u6982\u5ff5\u3002\u7136\u540e\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u81ea\u65cb\u9501\u7c7b\u3002\u8981\u5b9e\u73b0\u9501\uff08\u4e92\u65a5\u9501\u3001\u81ea\u65cb\u9501...\uff09\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528\u83b7\u53d6-\u91ca\u653e\u8bed\u4e49\uff0cC++11 \u6807\u51c6 \u00a7 1.10.1 (3)\u3002 \u2026 \u4f8b\u5982\uff0c\u83b7\u53d6\u4e92\u65a5\u9501\u7684\u8c03\u7528\u5c06\u5bf9\u5305\u542b\u4e92\u65a5\u9501\u7684\u4f4d\u7f6e\u6267\u884c\u83b7\u53d6\u64cd\u4f5c\u3002\u76f8\u5e94\u5730\uff0c\u91ca\u653e\u76f8\u540c\u4e92\u65a5\u9501\u7684\u8c03\u7528\u5c06\u5728\u76f8\u540c\u4f4d\u7f6e\u6267\u884c\u91ca\u653e\u64cd\u4f5c\u3002\u975e\u6b63\u5f0f\u5730\uff0c\u5bf9 A \u6267\u884c\u91ca\u653e\u64cd\u4f5c\u4f1a\u5f3a\u5236\u5176\u4ed6\u5185\u5b58\u4f4d\u7f6e\u4e0a\u7684\u5148\u524d\u526f\u4f5c\u7528\u5bf9\u7a0d\u540e\u5bf9 A \u6267\u884c\u6d88\u8017\u6216\u83b7\u53d6\u64cd\u4f5c\u7684\u5176\u4ed6\u7ebf\u7a0b\u53ef\u89c1\u3002 Acquire-Release \u8bed\u4e49\u7684\u8981\u70b9\u662f\uff1a Thread-2 after\u6267\u884c flag.load(std::memory_order_acquire) \u64cd\u4f5c\u5e94\u8be5\u4f1a\u770b\u5230 Thread-1 \u5728\u6267\u884c flag.store(0, std: :memory_order_release) \u64cd\u4f5c\u3002\n\u9501\uff08\u4e92\u65a5\u9501\u3001\u81ea\u65cb\u9501\u2026\u2026\uff09\u7684\u57fa\u672c\u76ee\u7684\u662f\u521b\u5efa\u53ea\u80fd\u7531\u4e00\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u7684\u4e00\u90e8\u5206\u4ee3\u7801\u3002\u8fd9\u6837\u7684\u4ee3\u7801\u533a\u79f0\u4e3a\u4e34\u754c\u533a\u3002\u5728\u5176\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u666e\u901a\u4ee3\u7801\uff0c\u5305\u62ec\u90a3\u4e9b\u6ca1\u6709 std::atomic&lt;&gt; \u7684\u4ee3\u7801\u3002\u5185\u5b58\u5c4f\u969c\u963b\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\u7a0b\u5e8f\uff0c\u4ece\u800c\u4f7f\u4e34\u754c\u533a\u7684\u64cd\u4f5c\u4e0d\u4f1a\u8d85\u51fa\u5176\u9650\u5236\u3002\u9996\u5148\u6355\u83b7\u9501\u7684\u7ebf\u7a0b\u6267\u884c\u4ee3\u7801\u7684\u8fd9\u4e2a\u9501\uff0c\u5176\u4f59\u7ebf\u7a0b\u5728\u5faa\u73af\u4e2d\u7b49\u5f85\u3002\u5f53\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u9501\u65f6\uff0cCPU \u51b3\u5b9a\u4e0b\u4e00\u4e2a\u7b49\u5f85\u7684\u7ebf\u7a0b\u5c06\u6355\u83b7\u5b83\uff0c\u7b49\u7b49\u3002\u793a\u4f8b 1 \u66f4\u53ef\u53d6\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u5b83\uff0c\u6211\u4eec\u5c06\u793a\u610f\u6027\u5730\u5c55\u793a\u4f7f\u7528\u5185\u5b58\u5c4f\u969c\u7684\u610f\u56fe\u2014\u2014\u7eaf\u84dd\u8272\u8868\u793a\u539f\u5b50\u64cd\u4f5c\uff1a\u5c4f\u969c\u7684\u76ee\u7684\u5f88\u7b80\u5355\u2014\u2014\u7f16\u8bd1\u5668\u4f18\u5316\u5668\u4e0d\u5141\u8bb8\u5c06\u6307\u4ee4\u4ece\u4e34\u754c\u533a\u79fb\u5230\u5916\u90e8\uff1a\u4efb\u4f55\u5176\u4ed6\u72ec\u7acb\u6307\u4ee4\u6267\u884c\u987a\u5e8f\u7684\u6539\u53d8\u53ef\u4ee5\u7531\u7f16\u8bd1\u5668\uff08\u7f16\u8bd1\u65f6\uff09\u6216 CPU\uff08\u8fd0\u884c\u65f6\uff09\u6267\u884c\uff0c\u4ee5\u4f18\u5316\u6027\u80fd\u3002\u4f8b\u5982\uff0c\u8fd9\u884c int new_shared_value = shared_value;\u53ef\u4ee5\u5728 lock_flag.clear(std::memory_order_release); \u4e4b\u524d\u6267\u884c\u3002\u8fd9\u79cd\u91cd\u65b0\u6392\u5e8f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u5e76\u4e14\u4e0d\u4f1a\u9020\u6210\u6570\u636e\u7ade\u4e89\uff0c\u56e0\u4e3a\u8bbf\u95ee\u591a\u4e2a\u7ebf\u7a0b\u5171\u6709\u7684\u6570\u636e\u7684\u6574\u4e2a\u4ee3\u7801\u603b\u662f\u5305\u542b\u5728\u4e24\u4e2a\u5c4f\u969c\u4e2d\u2014\u2014\u201c\u83b7\u53d6\u201d\u548c\u201c\u91ca\u653e\u201d\u3002\u800c\u5728\u5916\u9762\uff0c\u6709\u4e00\u6bb5\u4ee3\u7801\u53ea\u5bf9\u7ebf\u7a0b\u672c\u5730\u6570\u636e\u8d77\u4f5c\u7528\uff0c\u5b83\u7684\u6267\u884c\u987a\u5e8f\u65e0\u5173\u7d27\u8981\u3002\u7ebf\u7a0b\u672c\u5730\u4f9d\u8d56\u603b\u662f\u4ee5\u7c7b\u4f3c\u4e8e\u5355\u7ebf\u7a0b\u6267\u884c\u7684\u65b9\u5f0f\u5b58\u50a8\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\uff0c int new_shared_value = shared_value;\u4e0d\u80fd\u5728 shared_value + = 25 \u4e4b\u524d\u6267\u884c\uff1b\n1, 6\uff1a\u7f16\u8bd1\u5668\u4e3a\u52a0\u8f7d\u64cd\u4f5c\u751f\u6210\u6c47\u7f16\u6307\u4ee4acquire-barrier\uff0c\u4e3a\u5b58\u50a8\u64cd\u4f5c\u751f\u6210\u91ca\u653e\u5c4f\u969c\uff0c\u5982\u679c\u8fd9\u4e9b\u5c4f\u969c\u5bf9\u4e8e\u7ed9\u5b9a\u7684CPU\u67b6\u6784\u662f\u5fc5\u8981\u7684 2\uff1a\u7f16\u8bd1\u5668\u53d6\u6d88\u5148\u524d\u5728CPU\u4e2d\u7684\u53d8\u91cf\u7f13\u5b58registers \u4ee5\u4fbf\u91cd\u65b0\u52a0\u8f7d\u88ab\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u6539\u53d8\u7684\u8fd9\u4e9b\u53d8\u91cf\u7684\u503c\u2014\u2014\u5728 load(acquire) \u64cd\u4f5c\u4e4b\u540e 5\uff1a\u7f16\u8bd1\u5668\u5c06\u6240\u6709\u53d8\u91cf\u7684\u503c\u4ece CPU \u5bc4\u5b58\u5668\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u88ab\u5176\u4ed6\u7ebf\u7a0b\u770b\u5230\u5176\u4ed6\u7ebf\u7a0b\uff0c\u5373\uff0c\u5b83\u6267\u884c\u6ea2\u51fa\uff08\u94fe\u63a5\uff09 - \u76f4\u5230\u5b58\u50a8\uff08\u91ca\u653e\uff093\u30014\uff1a\u7f16\u8bd1\u5668\u963b\u6b62\u4f18\u5316\u5668\u66f4\u6539\u7981\u6b62\u65b9\u5411\u4e0a\u7684\u6307\u4ee4\u987a\u5e8f - \u7531\u7ea2\u8272\u7bad\u5934\u6307\u793a \u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528 Relaxed-Release \u8bed\u4e49\u800c\u4e0d\u662f Acquire-Release\uff1a\u5728\u53f3\u8fb9\u3002\u5728relaxed-Release\u7684\u60c5\u51b5\u4e0b\uff0c\u4e34\u754c\u533a\u4e2d\u53d7\u9501\u4fdd\u62a4\u7684\u90e8\u5206\u4ee3\u7801\u53ef\u4ee5\u88ab\u7f16\u8bd1\u5668\u6216CPU\u79fb\u5230\u5916\u9762\u3002\u7136\u540e\uff0c\u6570\u636e\u7ade\u4e89\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898\u2014\u2014\u5728\u9501\u5b9a\u4e4b\u524d\uff0c\u8bb8\u591a\u7ebf\u7a0b\u5c06\u5f00\u59cb\u4e0e\u6570\u636e\u540c\u65f6\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u6570\u636e\u4e0d\u662f\u7531\u539f\u5b50\u64cd\u4f5c\u5904\u7406\u7684\u3002\u8bf7\u6ce8\u610f\uff0c\u901a\u5e38\u4e0d\u53ef\u80fd\u4ec5\u501f\u52a9\u539f\u5b50\u64cd\u4f5c\u6765\u5b9e\u73b0\u4e0e\u4e00\u822c\u6570\u636e\u76f8\u5173\u7684\u6240\u6709\u903b\u8f91\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f88\u5c11\uff0c\u800c\u4e14\u901f\u5ea6\u76f8\u5f53\u6162\u3002\u56e0\u6b64\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u66f4\u7b80\u5355\u5feb\u6377\uff1a\u901a\u8fc7\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c\u8bbe\u7f6e\u6807\u5fd7\u201c\u5173\u95ed\u201d\uff0c\u6267\u884c\u4e0e\u7ebf\u7a0b\u5171\u6709\u7684\u6570\u636e\u76f8\u5173\u7684\u6240\u6709\u975e\u539f\u5b50\u64cd\u4f5c\uff0c\u4ee5\u53ca\u8bbe\u7f6e\u6807\u5fd7\u201c\u6253\u5f00\u201d\u3002\n\u7ebf\u7a0b 1 \u6765\u5f97\u65e9\u4e00\u70b9\uff0c\u901a\u8fc7\u4e00\u6761\u539f\u5b50\u6307\u4ee4 test_and_set() \u4e00\u6b21\u6267\u884c 2 \u4e2a\u64cd\u4f5c\uff1a\u5b83\u6267\u884c\u68c0\u67e5\uff0c\u5982\u679c lock_flag == false\uff0c\u5219\u5c06\u201c\u771f\u201d\u503c\u8bbe\u7f6e\u4e3a\u5b83\uff08\u5373\u9501\u5b9a\u81ea\u65cb-lock) \u5e76\u8fd4\u56de\u201cfalse\u201d\u3002\u56e0\u6b64\uff0cwhile(lock_flag.test_and_set());\u8868\u8fbe\u5f0f\u7acb\u5373\u7ed3\u675f\uff0c\u4e34\u754c\u533a\u7684\u4ee3\u7801\u5f00\u59cb\u6267\u884c\u3002\u6b64\u65f6\uff0c\u7ebf\u7a0b 2 \u4e5f\u5f00\u59cb\u6267\u884c\u8fd9\u6761\u539f\u5b50\u6307\u4ee4 test_and_set()\uff1a\u5b83\u6267\u884c\u68c0\u67e5\uff0c\u5982\u679c lock_flag == false\uff0c\u5219\u8bbe\u7f6e\u201ctrue\u201d\u503c\u3002\u5426\u5219\uff0c\u5b83\u4e0d\u4f1a\u6539\u53d8\u4efb\u4f55\u4e1c\u897f\u5e76\u8fd4\u56de\u5f53\u524d\u7684\u201c\u771f\u201d\u503c\u3002\u56e0\u6b64\uff0cwhile(lock_flag.test_and_set());\u8868\u8fbe\u5f0f\u5c06\u88ab\u6267\u884c\uff0c\u76f4\u5230\uff0cwhile(lock_flag);\u7ebf\u7a0b1\u6267\u884c\u52a0\u6cd5\u64cd\u4f5cshared_value += 25\uff1b\u7136\u540e\u901a\u8fc7\u539f\u5b50\u64cd\u4f5c\uff08\u5373\u89e3\u9501\u81ea\u65cb\u9501\uff09\u8bbe\u7f6e lock_flag=false \u503c\u3002\u6700\u540e\uff0c\u7ebf\u7a0b2\u5728\u7b49\u5f85\u6761\u4ef6lock_flag == false\u540e\uff0c\u8d4b\u503clock_flag = true\uff0c\u8fd4\u56de\u201cfalse\u201d\uff0c\u5b8c\u6210\u5faa\u73af\u3002\u7136\u540e\u6267\u884cshared_value + = 25\u7684\u52a0\u6cd5\uff1b\u5e76\u5206\u914d lock_flag = false \uff08\u89e3\u9501\u81ea\u65cb\u9501\uff09\u3002\u8ba9\u6211\u4eec\u770b\u770b x86_64 \u7684\u6c47\u7f16\u4ee3\u7801\u5982\u4f55\uff0cwhi ......", "note_en": "In this article, we will detail the atomic operations and C++11 memory barriers and the assembler instructions generated by it on x86_64 CPUs.\n Next, we\u2019ll show how to speed up the work of  contfree_safe_ptr&lt;std::map&gt; up to the level of complex and optimized lock-free data structures that are similar to  std::map&lt;&gt; in terms of their functionality, for example:  SkipListMap and  BronsonAVLTreeMap from  libCDS library (Concurrent Data Structures library):  https://github.com/khizmax/libcds.\n And we can get such multi-threaded performance for any of your initially non-thread-safe  T-class used as  contfree_safe_ptr&lt;T&gt; \u2013 it is  safe_ptr&lt;T, contention_free_shared_mutex&gt; class, where  contention_free_shared_mutex is own optimized shared-mutex.\n Namely, we will show how to realize your own high-performance contention-free shared-mutex, which almost does not conflict on readings. We implement our own active locks - spinlock and recursive-spinlock - to lock the rows in the update operations. We will create RAII-blocking pointers to avoid the cost of multiple locking. Here are the results of performance tests.\n And as \u00abJust for fun\u00bb bonus, we will demonstrate the way of realization of our own class of simplified partitioned type  partitioned_map, which is even more optimized for multithreading, consisting of several  std::map, in analogy with partition table from RDBMS, when the boundaries of each section are known initially.\n    If we change the same data from a set of threads, i.e., if we run the  thread_func() function simultaneously in several threads:\n   then each thread calling the  thread_func() function adds  1 to the ordinary shared variable  int a; In the general case, such a code will not be thread-safe, because compound operations (RMW - read-modify-write) with the ordinary variables consist of many small operations, between which another thread can change the data. The operation  a = a+1; consists of at least three mini-operations:\n  For  non-atomic  int a, if initially  a=0; and 2 threads perform the operation  a=a+1; then the result should be  a=2; But the following can happen (step by step):\n  int a =  0; \t\t\t\t  // register1 = ?, register2 = ?, a = 0Thread 1: register1 = a; \t\t // register1 = 0, register2 = ?, a = 0Thread 2: register2 = a \t\t // register1 = 0, register2 = 0, a = 0Thread 1: register1++; \t\t // register1 = 1, register2 = 0, a = 0Thread 2: register2++; \t\t // register1 = 1, register2 = 1, a = 0Thread 1: a = register1; \t\t // register1 = 1, register2 = 1, a = 1Thread 2: a = register2; \t\t // register1 = 1, register2 = 1, a = 1\n Two threads added  +1 to the same global variable with initial value  = 0, but in the end, the variable  a = 1 - such a problem is called Data-Races.\n  To use atomic instructions with atomic variables - but there is one disadvantage, the number of atomic functions is very small - therefore, it is difficult to realize complex logic with the help of such functions:  http://en.cppreference.com/w/cpp/atomic/atomic\n    To use locks ( std::mutex,  std::shared_timed_mutex,  spinlock\u2026) \u2013 they admit 1 thread, one by one, to the locked code, so the problem of data-races does not arise and we can use arbitrary complex logic by using any normal not thread-safe objects.\n For  std:: atomic&lt;int&gt; a: if initially  a=0; and 2 threads perform the operation  a+=1; then the result always will be  a=2;\n     std::atomic &lt; int &gt; a =  0;  // register1 = ?, register2 = ?, a = 0Thread 1: register1 = a; \t\t // register1 = 0, register2 = ?, a = 0Thread 1: register1++; \t\t // register1 = 1, register2 = 0, a = 0Thread 1: a = register1; \t\t // register1 = 1, register2 = 0, a = 1Thread 2: register2 = a; \t\t // register1 = 1, register2 = 1, a = 1Thread 2: register2++; \t\t // register1 = 1, register2 = 2, a = 1Thread 2: a = register2; \t\t // register1 = 1, register2 = 2, a = 2\n On processors with LL/SC-support, for example on ARM, other steps occur, but with the same correct result:  a = 2.\n      Sequential Consistency  std::memory_order_seq_cst is the default memory barrier (the most strict and reliable, but also the slowest with regard to others).\n   Optimizations: For  std::atomic&lt;T&gt; a; two optimizations are possible, which are impossible for  volatile T a;  Optimization of the fusion:  a = 10;  a = 20; can be replaced by compiler with  a = 20;\n  Optimization of substitution by a constant:  a = 1; local = a; can be replaced by the compiler  a = 1; local = 1;\n  Reordering:  std::atomic&lt;T&gt;a; operations can limit reordering around themselves for operations with the ordinary variables and operations with other atomic variables in accordance with the used memory barrier  std::memory_order _... In contrast,  volatile T a; does not affect the order of regular variables (non-atomic / non-volatile), but the calls to all volatile variables always preserve a strict mutual order, i.e., the order of execution of any two volatile-operations cannot be changed by the compiler, but not by the CPU.\n  Spilling:  std::memory_order_release,  std::memory_order_acq_rel,  std::memory_order_seq_cst memory barriers, which are specified for  std::atomic&lt;T&gt; a; operations, initiate spilling of all regular variables before execution of an atomic operation. That is to say that these barriers upload the regular variables from the CPU registers into the main memory/ cache, except when the compiler can guarantee 100% that this local variable cannot be used in other threads.\n  Atomicity / alignment: For  std::atomic&lt;T&gt; a; other threads see that operation has been performed entirely or not performed at all. For Integral-types  T, this is achieved by alignment of the atomic variable location in memory by compiler - at least, the variable is in a single cache line, so that the variable can be changed or loaded by one operation of the CPU. Conversely, the compiler does not guarantee the alignment of the volatile variables. Volatile-variables are commonly used to access the memory of devices (or in  other cases), so an API of the device driver returns a pointer to volatile variables, and this API ensures alignment if necessary.\n  Atomicity of RMW-operations (read-modify-write): For  std::atomic&lt;T&gt; a; operations ( ++, --, += , -= , *=, /=, CAS, exchange) are performed atomically, i.e., if two threads do operation  ++a; then the  a-variable will always be increased by  2. This is achieved by locking cache-line ( x86_64) or by marking the cache line on CPUs that support LL/SC (ARM, PowerPC) for the duration of the RMW-operation. Volatile variables do not ensure atomicity of compound RMW-operations.\n There is one general rule for the variables  std::atomic and  volatile: each read or write operation always calls the memory/ cache, i.e., the values are never cached in the CPU registers.\n Also, we note that any optimizations and any reordering of independent instructions relative to each other done by the compiler or CPU are possible for ordinary variables and objects (non-atomic/non-volatile).\n Recall that operations of writing to memory with atomic variables with  std::memory_order_release,  std::memory_order_acq_rel and  std::memory_order_seq_cst memory barriers guarantee spilling (writing to the memory from the registers) of all non-atomic/non-volatile variables, which are in the CPU registers at the moment, at once:  https://en.wikipedia.org/wiki/Register_allocation#Spilling.\n  The compiler and processor change the order of instructions to optimize the program and to improve its performance.\n Here is an example of optimizations that are done by the GCC compiler and CPU x86_64:  https://godbolt.org/g/n91hpt.\n    GCC 7.0  compiler reordering:\t It interchanges writing to the memory  b = 5; and uploading from the memory to the register  int tmp_c = c ;. This allows you to ask for the \u201c c\u201d value as early as possible, and while the CPU is waiting for this long operation, the CPU pipeline allows the execution of operation  b = 5; as these 2 operations do not depend on each other.\n  It combines uploading from the memory into the register  int tmp_a = a; and the addition operation -  tmp_c = tmp_c + tmp_a; in the result, we have one operation add  eax,  a[rip] instead of two operations.\n  x86_64  CPU reordering:\t The CPU can exchange the actual writing to the memory  mov b[rip], 5 and reading from the memory, which is combined with the addition operation -  add eax, a[rip].\n Upon initiating the writing to the memory through  mov b[rip], 5 instruction, the following occurs: first, the value of  5 and the address of  b[rip] are placed in the Store-buffer queue, the cache lines containing the address  b[rip] in all the CPU cores are expected to be invalidated and a response from them is being waited, then CPU-Core-0 sets the \u201ceXclusive\u201d status for the cache line containing  b[rip]. Only after that, the actual writing of the value of  5 from the Store-buffer is carried out into this cache line at  b[rip]. For more details about the cache-coherency protocols on  x86_64 MOESI / MESIF, changes in which are visible in terms of all the cores immediately, see  this link.\n In order not to wait all this time - immediately after \u201c 5\u201d is placed in the Store-Buffer, without waiting for the actual cache entry, we can start execution of the following instructions: reading from the memory or registers operations. This is what the x86_64 CPU performs:\n Intel\u00ae 64 and IA-32 Architectures Software Developer\u2019s Manual Volume 3 (3A, 3B, 3C &amp; 3D):  System Programming Guide.\n The Intel-64 memory-ordering model allows a load to be reordered with an earlier store to a different location. However, loads are not reordered with stores to the same location.\n CPUs of the  x86_64 family have a strong memory model. And CPUs that have a weak memory model, for example, PowerPC and ARM v7/v8, can perform even more reorderings.\n Here are the examples of possible reordering of an entry in the memory of ordinary variables, volatile-variables and atomic variables.\n  This code with ordinary variables can be reordered by the compiler or by the CPU, because its meaning does not change within one thread. But within a set of threads, such reordering can affect the logic of the program.\n If two variables are volatile, then the following reordering is possible. The compiler cannot reorder operations on volatile variables at compile-time, but the compiler allows the CPU to do this reordering at run-time.\n  To prevent all or only some of the reordering, there are atomic operations (recall that atomic operations use the most stringent memory barrier -  std::memory_order_seq_cst by default).\n  Another thread can see the changes of the variables in the memory exactly in this modified order.\n If we do not specify the memory barrier for an atomic operation, then the most strict barrier  std::memory_order_seq_cst is used by default, and no atomic or non-atomic operations can be reordered with such operations (but there are exceptions that we will consider later).\n In the above case, we first write to the ordinary variables  a and  b, and then - to the atomic variables  a_at and  b_at, and this order cannot be changed. Also, writing to memory  b_at cannot occur earlier than writing to memory  a_at. But writing to the variables  a and  b can be reordered relative to each other.\n When we say \u201ccan be reordered\u201d, this means that they can, but not necessarily. It depends on how the compiler decides to optimize the C++ code during compilation, or how the CPU decides to do that at runtime.\n Below, we will consider more weak memory barriers, which allow reordering the instructions in the allowed directions. This allows the compiler and CPU to better optimize the code and increase the performance.\n  The C++11 standard memory model provides us with 6 types of memory barriers that correspond to the capabilities of modern CPUs for speculative execution. By using them, we do not completely prohibit the change of the order, but we prohibit it only in the necessary directions. This allows the compiler and the CPU to optimize the code as much as possible. And the forbidden directions of reordering allow us to keep correctness of our code.  http://en.cppreference.com/w/cpp/atomic/memory_order\n   memory_order_consume. Immediately, we note that we practically will not use  memory_order_consume barrier, because in the standard, there are doubts about the practicability of its usage -  a quotation from the standard.\n (1.3) \u2014 memory_order_consume: a load operation performs a consume operation on the affected memory location. [ Note:  Prefer memory_order_acquire, which provides stronger guarantees than memory_order_consume. Implementations have found it infeasible to provide performance better than that of memory_order_acquire. Specification revisions are under consideration. \u2014 end note ]\n memory_order_acq_rel. Also, we note that  memory_order_acq_rel barrier is used only for atomic compound operations of RMW (Read-Modify-Write), such as:  compare_exchange_weak()/ _strong(),  exchange(),  fetch_(add, sub, and, or, xor) or their corresponding operators:  http://en.cppreference.com/w/cpp/atomic/atomic\n The remaining four memory barriers can be used for any operations, except for the following: \u201c acquire\u201d is not used for  store(), and \u201c release\u201d is not used for  load().\n  Depending on the chosen memory barrier, for the compiler and the CPU, it is prohibited to move the executable code relative to the barrier in different directions.\n Now let\u2019s see what the arrows specify and what can be interchanged and what cannot be interchanged:\n  For two instructions to be interchanged, it is necessary that the barriers of both the instructions allow such an interchange. Because \u201cother any code\u201d means the ordinary non-atomic variables that do not have any barriers, then they allow any order changes. By the example of Relaxed-Release-Relaxed, as you can see, the possibility to change the order of the same memory barriers depends on the sequence of their appearance.\n Let\u2019s consider, what do these memory barriers mean and what advantages they give us, by the example of realization of the simplest \u201cspin-lock\u201d type lock, which requires the most common Acquire-Release reordering semantics. Spin-lock is a lock that is similar to  std::mutex in terms of its way of use.\n First, we realize the spin-lock concept direct in the body of our program. And then, we realized a separate spin-lock class. To realize locks ( mutex,  spinlock ...), you should use Acquire-Release semantics,  C++11 Standard \u00a7 1.10.1 (3).\n \u2026 For example, a call that acquires a mutex will perform an  acquire operation on the locations comprising the mutex. Correspondingly, a call that releases the same mutex will perform a  release operation on those same locations. Informally,  performing a release operation on A forces prior side effects on other memory locations to become visible to other threads that later perform a consume or an acquire operation on A.\n The main point of the Acquire-Release semantics is that: Thread-2 after performing the  flag.load(std::memory_order_acquire) operation should see all the changes to any variables/structures/classes (not even atomic ones) that have been made by Thread-1 before it executed the  flag.store(0, std::memory_order_release) operation.\n The basic purpose of locks ( mutex,  spinlock ...) is creation of a part of code that can be executed only by one thread at the same time. Such a code area is called the critical section. Inside it, you can use any normal code, including those without  std::atomic&lt;&gt;.\n Memory barriers prevent the compiler from optimizing the program so that no operation from the critical section goes beyond its limits.\n The thread, which captures the lock first, executes this lock of the code, and the remaining threads wait in the cycle. When the first thread releases the lock, the CPU decides which next of the waiting threads will capture it, etc.\n   Example-1 is more preferable. Therefore, for it, we will schematically show the intent of using memory barriers - solid blue shows atomic operations:\n   The purpose of the barriers is very simple - the compiler optimizer is not allowed to move instructions from the critical section to the outside:\n  Any other changes in the order of execution of independent instructions can be performed by the compiler (compile-time) or by the CPU (run-time) in order to optimize the performance.\n For example, the line  int new_shared_value = shared_value; can be executed before  lock_flag.clear(std::memory_order_release);. Such reordering is acceptable and does not create data-races, because the entire code, which accesses the data that is common for multiple threads, is always enclosed within two barriers - \u201c acquire\u201d and \u201c release\u201d. And outside, there is a code that works only with the thread local data, and it does not matter in which order it will be executed. The thread local dependencies are always stored in a way similar to that of single-threaded execution. That is why, int  new_shared_value = shared_value; cannot be executed before  shared_value + = 25;\n  1, 6: The compiler generates the assembler instructions acquire-barrier for the load operation and the release-barrier for the store operation, if these barriers are necessary for the given CPU architecture\n  2: The compiler cancels the previous caching of variables in the CPU registers in order to reload the values \u200b\u200bof these variables changed by another thread - after the  load( acquire) operation\n  5: The compiler saves the values \u200b\u200bof all variables from the CPU registers to the memory so that they can be seen by other threads, i.e., it executes spilling ( link) - up to store(release)\n  3, 4: The compiler prevents the optimizer from changing the order of the instructions in the forbidden directions - indicated by red arrows\n  And now let\u2019s see what happens, if we use  Relaxed- Release semantics instead of  Acquire-Release:\n  On the right. In case of  Relaxed-Release, part of the code inside the critical section, which is protected by a lock, can be moved outside by the compiler or CPU. Then, there will be a problem with Data Races - a lot of threads will start to work simultaneously with the data, which are not processed by atomic operations, before locking.\n Note that it is usually impossible to implement all logic in relation to general data only with the help of atomic operations, since there are very few of them and they are rather slow. Therefore, it is simpler and faster to do the following actions: to set the flag \u201cclosed\u201d by means of one atomic operation, to perform all non-atomic operations in relation to the data common to the threads, and to set the flag \u201copen\u201d.\n    Thread-1 comes a little earlier and performs 2 operations at a time by means of one atomic instruction  test_and_set(): it performs checkup and  if lock_flag == false, then it sets the \u201c true\u201d value to it (that is, locks spin-lock) and returns \u201c false\u201d. Therefore, the  while(lock_flag.test_and_set()); expression ends immediately and the code of the critical section starts to be executed.\n  At this point,  thread-2 also starts executing this atomic instruction  test_and_set(): it performs checkup and  if lock_flag == false, then it sets the \u201c true\u201d value. Otherwise, it does not change anything and returns the current \u201c true\u201d value. Therefore, the  while(lock_flag.test_and_set()); expression will be executed until,  while(lock_flag);\n  Thread-1 performs the addition operation  shared_value += 25; and then sets the  lock_flag=false value by means of an atomic operation (that is, unlocks spin-lock).\n  Finally,  thread-2, after finishing waiting for the condition  lock_flag == false, assigns  lock_flag = true, returns \u201c false\u201d and completes the cycle. Then it performs the addition of  shared_value + = 25; and assigns  lock_flag = false (unlocks spin-lock).\n    Let\u2019s see how the assembler code for x86_64, whi\n......", "posttime": "2021-08-06 14:19:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "std,shared,\u64cd\u4f5c", "title": "\u6211\u4eec\u4f7f std:shared_mutex \u5feb 10 \u500d", "title_en": "We Make a std:shared_mutex 10 Times Faster", "transed": 1, "url": "https://www.codeproject.com/Articles/1183423/We-Make-a-std-shared-mutex-10-Times-Faster", "via": "", "real_tags": ["std", "shared", "\u64cd\u4f5c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071719, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8a79\u59c6\u65af\u00b7\u53e4\u6069 (James Gunn) \u7684\u8840\u6dcb\u6dcb\uff0c\u77e5\u9053\u91cd\u65b0\u542f\u52a8 DC \u53cd\u82f1\u96c4\u5192\u9669\u662f\u66f4\u65b0\u4fee\u6b63\u4e3b\u4e49\u8d8b\u52bf\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u8868\u660e\u8be5\u7c7b\u578b\u53ef\u80fd\u4f1a\u8d70\u897f\u90e8\u9053\u8def\u3002\u81ea\u6740\u5c0f\u961f\u5927\u81f4\u6309\u7167\u60a8\u7684\u9884\u671f\u5f00\u59cb\u3002\u5728\u524d\u5f80\u5c9b\u56fd\u79d1\u5c14\u6258\u9a6c\u8033\u4ed6\u7684\u9014\u4e2d\uff0c\u6211\u4eec\u5411\u6211\u4eec\u4ecb\u7ecd\u4e86\u7ecf\u8fc7\u6539\u9020\u7684 X \u7279\u9063\u961f\u7684\u6210\u5458\uff0c\u8fd9\u662f\u4e00\u7fa4\u6742\u4e03\u6742\u516b\u7684\u8d85\u7ea7\uff08\u53cd\uff09\u82f1\u96c4\uff0c\u5728\u7f8e\u56fd\u9634\u6697\u7684\u60c5\u62a5\u673a\u6784\u963f\u683c\u65af (Argus) \u7684\u8981\u6c42\u4e0b\u4e3a\u79d8\u5bc6\u4efb\u52a1\u800c\u96c6\u7ed3\u3002\u8fd9\u4e9b\u90fd\u662f\u65b0\u9762\u5b54\uff0c\u4f46\u6211\u4eec\u5bf9\u4ed6\u4eec\u7684\u8ba4\u8bc6\u90fd\u662f\u4e00\u6837\u7684\uff1a\u6709\u72c2\u5984\u81ea\u5927\u7684\u806a\u660e\u4eba\u3001\u6f02\u4eae\u7537\u5b69\u3001\u6c89\u9ed8\u5be1\u8a00\u7684\u9ad8\u7ea7\u4eba\u7269\u2014\u2014\u719f\u6089\u7684\u5411\u5bfc\u8ba9\u6211\u4eec\u901a\u8fc7\u53e6\u4e00\u90e8\u57fa\u4e8e\u56e2\u961f\u7684\u8d85\u7ea7\u82f1\u96c4\u7535\u5f71\u6765\u4e86\u89e3\u6211\u4eec\u3002\u5728\u5f00\u573a\u6f14\u51fa\u4e4b\u524d\uff0c\u8fd9\u4e9b\u65b0\u4eba\u4e2d\u7684\u5927\u591a\u6570\u90fd\u5728\u4e00\u573a\u6b8b\u9177\u7684\u559c\u5267\u66b4\u529b\u72c2\u6b22\u4e2d\u88ab\u6d88\u706d\u4e86\uff0c\u4ed6\u4eec\u7684\u8138\u88ab\u7c98\u7cca\u7cca\u7684\u5f39\u5b54\u6240\u53d6\u4ee3\uff0c\u4ed6\u4eec\u7684\u5934\u90e8\u88ab\u70b8\u5f39\u690d\u5165\u7269\u70b8\u6bc1\uff0c\u4ed6\u4eec\u7684\u8eab\u4f53\u5728\u71c3\u70e7\u7684\u76f4\u5347\u673a\u6b8b\u9ab8\u4e2d\u88ab\u96fe\u5316\u3002\u89c2\u5bdf\u963f\u53e4\u65af\u7684\u7279\u5de5\u6240\u80fd\u60f3\u5230\u7684\u5c31\u662f\u5bf9\u4e0b\u4e00\u4e2a\u6b7b\u7684\u4eba\u4e0b\u6ce8\u3002\u81ea\u6740\u5c0f\u961f\u4e0d\u662f\u4f60\u7238\u7238\u7684\u8d85\u7ea7\u82f1\u96c4\u7535\u5f71\u3002\u55dc\u8840\u800c\u81ea\u7531\u4eb5\u6e0e\uff0c\u8a79\u59c6\u65af\u00b7\u53e4\u6069 (James Gunn) \u5bf9 2016 \u5e74\u7684\u300a\u81ea\u6740\u5c0f\u961f\u300b(Suicide Squad) \u7684\u94c1\u6746\u91cd\u5236\uff0c\u5373\u4f7f\u5728\u4e94\u5e74\u524d\u4f3c\u4e4e\u4e5f\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5f53\u65f6\u540c\u6837\u66b4\u529b\u548c\u65e0\u793c\u7684\u6b7b\u4f8d\u4ee5\u76f8\u5bf9\u72b9\u8c6b\u7684 5800 \u4e07\u7f8e\u5143\u5236\u4f5c\uff08\u636e\u62a5\u9053\uff0c\u300a\u81ea\u6740\u5c0f\u961f\u300b\u8017\u8d44\u7ea6 1.75 \u4ebf\u7f8e\u5143\uff09 \uff09\u3002\u4f46\u6b7b\u4f8d\u7684\u6210\u529f\uff0c\u8fde\u540c\u5b83\u7684\u7eed\u96c6\u548c X \u6218\u8b66\u884d\u751f\u7684\u6d1b\u6839\uff0c\u8bc1\u660e\u4e86\u5728\u7a33\u5b9a\u996e\u98df PG \u6f2b\u753b\u7535\u5f71\u4e2d\u957f\u5927\u7684\u89c2\u4f17\u5df2\u7ecf\u51c6\u5907\u597d\u8fce\u63a5 F \u70b8\u5f39\u548c\u8840\u8165\u65a9\u9996\uff0c\u5e76\u62e5\u6709\u5b83\u671f\u671b\u53d7\u5230\u6311\u6218\u3002\u81ea\u6740\u5c0f\u961f\u5728\u5492\u9a82\u548c\u8840\u8165\u65b9\u9762\u52a0\u500d\u4e0b\u6ce8 - \u5c31\u50cf\u5b83\u7684 R \u7ea7\u8868\u5144\u5f1f\u4e00\u6837\uff0c\u5b83\u5168\u529b\u6311\u6218\u73b0\u5728\u5df2\u7ecf\u6210\u719f\u7684\u6d41\u6d3e\u7684\u60ef\u4f8b\u3002 \u300a\u81ea\u6740\u5c0f\u961f\u300b\u5632\u7b11\u4e86\u540c\u7c7b\u8d85\u7ea7\u82f1\u96c4\u56e2\u961f\u7684\u4e0d\u5339\u914d\uff0c\u5176\u4e2d\u7684\u89d2\u8272\u5177\u6709\u672c\u8d28\u4e0a\u65e0\u7528\u7684\u529b\u91cf\uff0c\u4f8b\u5982\u5185\u68ee\u00b7\u83f2\u5229\u5b89 (Nathan Fillion) \u7684 TDK\uff0c\u5176\u53ef\u62c6\u5378\u7684\u56db\u80a2\u53ea\u80fd\u4ece\u8fdc\u5904\u6320\u75d2\u75d2\uff1b\u5b83\u53d6\u7b11\u65e0\u5904\u4e0d\u5728\u7684\u6709\u6728\u4e43\u4f0a\u548c\u7238\u7238\u95ee\u9898\u7684\u8d85\u7ea7\u82f1\u96c4\uff0cDavid Dastmalchian \u7684\u6ce2\u70b9\u4eba\u5728\u4ed6\u6240\u6709\u654c\u4eba\u7684\u8138\u4e0a\u770b\u5230\u4ed6\u8ba8\u538c\u7684\u6bcd\u4eb2\uff0c\u5305\u62ec\u6469\u5929\u5927\u697c\u5927\u5c0f\u7684\u5929\u4f53\u6d77\u661f\uff0c\u8fd9\u662f\u81ea\u6740\u5c0f\u961f\u7684\u4e3b\u8981\u5bf9\u624b\uff1b\u7136\u540e\u662f\u7ea6\u7ff0\u585e\u7eb3\uff08John Cena\uff09\u7684\u548c\u5e73\u7f14\u9020\u8005\uff0c\u4ed6\u51c6\u5907\u4ee5\u81ea\u7531\u7684\u540d\u4e49\u6740\u6b7b\u7edd\u5bf9\u6240\u6709\u4eba\uff0c\u5e76\u4e14\u626e\u6f14\u7684\u89d2\u8272\u5c31\u50cf\uff08\u53ea\u662f\u7a0d\u5fae\uff09\u66f4\u6781\u7aef\u7684\u6bcf\u4e2a\u7a7f\u7740\u6597\u7bf7\u7684\u8d85\u7ea7\u7231\u56fd\u8005\u66fe\u7ecf\u767b\u4e0a\u8fc7\u6f2b\u753b\u4e66\u5c01\u9762\u3002\u5c3d\u7ba1\u7ecf\u5e38\u662f\u6545\u610f\u611a\u8822\u7684\uff0c\u4f46\u300a\u81ea\u6740\u5c0f\u961f\u300b\u8bc1\u660e\u4e86\u8d85\u7ea7\u82f1\u96c4\u7535\u5f71\u5f00\u59cb\u8d70\u5411\u6210\u719f\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u5bf9\u66b4\u529b\u548c\u6027\u7684\u65e5\u76ca\u589e\u957f\u7684\u54c1\u5473\uff08\u300a\u81ea\u6740\u5c0f\u961f\u300b\u6700\u6709\u8da3\u7684\u573a\u666f\u4e4b\u4e00\u662f\u739b\u683c\u7279\u00b7\u7f57\u6bd4\u9970\u6f14\u7684\u54c8\u96f7\u00b7\u594e\u56e0\u5bf9\u79d1\u5c14\u6258\u00b7\u9a6c\u8033\u4ed6\u7684\u72ec\u88c1\u8005\u60c5\u6709\u72ec\u949f\uff09\uff1b\u8fd9\u79cd\u6d41\u6d3e\u73b0\u5728\u6b63\u5728\u53cd\u601d\u548c\u8bc4\u8bba\u81ea\u5df1\u3002\u867d\u7136\u8fd9\u8ba9\u50cf\u5188\u6069\u8fd9\u6837\u7684\u7535\u5f71\uff0c\u4ee5\u53ca\u4e4b\u524d\u7684\u6b7b\u4f8d\u548c\u6d1b\u6839\u4e00\u6837\uff0c\u8ba9\u4eba\u611f\u89c9\u65b0\u9c9c\uff0c\u4f46\u8fd9\u4e5f\u53ef\u80fd\u662f\u8d85\u7ea7\u82f1\u96c4\u7c7b\u578b\u5df2\u7ecf\u8fdb\u5165\u540e\u671f\u9636\u6bb5\u7684\u8bc1\u636e\u3002\u4ece 2000 \u5e74\u7684 X \u6218\u8b66\u548c 2002 \u5e74\u5c71\u59c6\u96f7\u7c73\u7684\u8718\u86db\u4fa0\u5f00\u59cb\uff0c\u8fd9\u90e8\u8d85\u7ea7\u82f1\u96c4\u7535\u5f71\u5728\u8fc7\u53bb\u7684\u51e0\u5341\u5e74\u91cc\u5df2\u7ecf\u6210\u4e3a\u597d\u83b1\u575e\u7684\u75f4\u8ff7\u8005\u3002\u8fd1\u5e74\u6765\uff0c\u968f\u7740\u4e2d\u7b49\u9884\u7b97\u7535\u5f71\u7684\u6d88\u5931\u548c\u539f\u521b\u5927\u7247\u53d8\u5f97\u8d8a\u6765\u8d8a\u7a00\u6709\uff0c\u7535\u5f71\u516c\u53f8\u5f00\u59cb\u5c06\u8d4c\u6ce8\u62bc\u5728\u4ed6\u4eec\u6269\u5c55\u7684\u6f2b\u753b\u4e16\u754c\u4e0a\u3002\u4e00\u76f4\u4ee5\u6765\uff0c\u8bc4\u8bba\u5458\u548c\u4e00\u4e9b\u4e3b\u8981\u7535\u5f71\u5236\u4f5c\u4eba\uff08\u5305\u62ec\u6700\u8457\u540d\u7684\u9a6c\u4e01\u00b7\u65af\u79d1\u585e\u65af\uff09\u90fd\u5728\u54c0\u53f9\u8d85\u7ea7\u82f1\u96c4\u7cfb\u5217\u7684\u6587\u5316\u4e3b\u5bfc\u5730\u4f4d\uff0c\u800c\u727a\u7272\u4e86\u5176\u4ed6\u4e00\u5207\u3002\u968f\u7740\u6f2b\u5a01\u8ba1\u5212\u8fdb\u5165 2026 \u5e74\u53ca\u4ee5\u540e\u7684\u4e0b\u4e00\u9636\u6bb5\uff0c\u8d85\u7ea7\u82f1\u96c4\u7684\u94f6\u5e55\u9ec4\u91d1\u65f6\u4ee3\u4f3c\u4e4e\u6c38\u8fdc\u4e0d\u4f1a\u7ed3\u675f\u3002\u7136\u800c\uff0c\u6b63\u5982\u8a79\u59c6\u65af\u00b7\u53e4\u6069\u672c\u4eba\u6240\u627f\u8ba4\u7684\u90a3\u6837\uff0c\u6ca1\u6709\u4e00\u79cd\u7c7b\u578b\u80fd\u6c38\u8fdc\u6d41\u884c\u3002\n\u97f3\u4e50\u5267\u3001\u53f2\u8bd7\u5267\u3001\u6d6a\u6f2b\u559c\u5267\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u90fd\u5728\u53ef\u9760\u7684\u7968\u623f\u5438\u5f15\u4eba\u7684\u9633\u5149\u4e0b\u5ea6\u8fc7\u4e86\u6109\u5feb\u7684\u4e00\u5929\u3002\u66fe\u51e0\u4f55\u65f6\uff0c\u897f\u65b9\u7edf\u6cbb\u7740\u3002\u591a\u5e74\u6765\uff0c\u897f\u65b9\u7535\u5f71\u548c\u7535\u89c6\u8282\u76ee\u7684\u5236\u4f5c\u5982\u6b64\u6709\u89c4\u5f8b\uff0c\u4f3c\u4e4e\u725b\u4ed4\u5185\u5bb9\u7684\u6d41\u6c38\u8fdc\u4e0d\u4f1a\u67af\u7aed\u3002\u968f\u7740\u7c89\u4e1d\u7fa4\u7684\u53d8\u8001\uff0c\u8fd9\u79cd\u7c7b\u578b\u53ea\u662f\u8fdb\u5316\u4e86\u3002\u610f\u5927\u5229\u9762\u897f\u90e8\u7247\u7528\u53cd\u82f1\u96c4\u4eba\u7269\u53d6\u4ee3\u4e86\u4f20\u7edf\u7684\u201c\u767d\u5e3d\u201d\uff0c\u7136\u540e\uff0c\u4ece\u5c71\u59c6\u00b7\u4f69\u91d1\u5e15\u7684\u8840\u8165\u5927\u7247\u300a\u72c2\u91ce\u4e00\u4f19\u300b\u7b49\u7535\u5f71\u5f00\u59cb\uff0c\u897f\u90e8\u7247\u8fdb\u5165\u4e86\u4fee\u6b63\u4e3b\u4e49\u9636\u6bb5\uff0c\u8fd9\u662f\u4e00\u4e2a\u53cd\u601d\u65f6\u671f\uff0c\u8bde\u751f\u4e86\u4e00\u4e9b\u6709\u53f2\u4ee5\u6765\u6700\u4f18\u79c0\u7684\u725b\u4ed4\u4f8b\u5b50\u56fe\u7247\u3002\u7136\u540e\u6d41\u6d3e\u8017\u5c3d\u4e86\u81ea\u5df1\u5e76\u9010\u6e10\u6d88\u5931\u3002\u6709\u4e86\u300a\u81ea\u6740\u5c0f\u961f\u300b\u4ee5\u53ca\u300a\u5b88\u671b\u8005\u300b\u548c\u300a\u7537\u5b69\u300b\u7b49\u7535\u89c6\u8282\u76ee\uff0c\u8d85\u7ea7\u82f1\u96c4\u7c7b\u578b\u73b0\u5728\u4f3c\u4e4e\u5904\u4e8e\u81ea\u5df1\u7684\u4fee\u6b63\u4e3b\u4e49\u9636\u6bb5\u3002\u4e13\u95e8\u9488\u5bf9\u6210\u5e74\u4eba\u7684\u8d85\u7ea7\u82f1\u96c4\u9879\u76ee\u6570\u91cf\u6b63\u5728\u589e\u52a0\u2014\u2014\u4f8b\u5982\uff0c\u81ea\u6740\u5c0f\u961f\u7684\u548c\u5e73\u7f14\u9020\u8005\u5c06\u5728\u660e\u5e74\u5c06\u4ed6\u81ea\u5df1\u7684 R \u7ea7\u7535\u89c6\u884d\u751f\u5267\u767b\u9646 HBO Max\u2014\u2014\u5c3d\u7ba1\u73b0\u5728\u5224\u65ad\u8fd9\u662f\u5426\u4f1a\u4ee5\u727a\u7272\u5bb6\u5ead\u4e3a\u4ee3\u4ef7\u8fd8\u4e3a\u65f6\u8fc7\u65e9-\u53cb\u597d\u7684\u6f2b\u753b\u4e66\u9879\u76ee\u3002 \uff08\u4e00\u4e9b\u8bc4\u8bba\u5458\u5df2\u7ecf\u60f3\u77e5\u9053\u9ed1\u5be1\u5987\u4ee4\u4eba\u5931\u671b\u7684\u7968\u623f\u662f\u5426\u8868\u660e\u5bf9\u6f2b\u5a01\u66f4\u7b80\u6d01\u3001\u66f4\u4f20\u7edf\u7684\u8d85\u7ea7\u82f1\u96c4\u6545\u4e8b\u54c1\u724c\u7684\u5174\u8da3\u6b63\u5728\u51cf\u5f31\uff0c\u4f46\u8003\u8651\u5230\u53ef\u80fd\u5bfc\u81f4\u8fd9\u90e8\u7535\u5f71\u8868\u73b0\u4e0d\u4f73\u7684\u65e0\u6570\u56e0\u7d20\uff0c\u4eba\u4eec\u5f88\u5bb9\u6613\u6301\u6000\u7591\u6001\u5ea6\u3002\uff09\u8d85\u7ea7\u82f1\u96c4\u7535\u5f71\u5df2\u7ecf\u6210\u4e3a\u597d\u83b1\u575e\u7684\u9996\u8981\u7c7b\u578b\uff0c\u4f46\u8be5\u7c7b\u578b\u76ee\u524d\u6240\u5904\u7684\u53d1\u5c55\u9636\u6bb5\u53ef\u80fd\u4f1a\u7279\u522b\u5f15\u4eba\u5165\u80dc\u3002\u6d41\u884c\u7684\u897f\u90e8\u4fee\u6b63\u4e3b\u4e49\u9636\u6bb5\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u8bf8\u5982\u9ea6\u51ef\u5e03\u4e0e\u7c73\u52d2\u592b\u4eba\u548c\u4e4c\u5c14\u624e\u5a1c\u7684\u7a81\u88ad\u8fd9\u6837\u7684\u7ecf\u5178\u7535\u5f71\uff0c\u5982\u679c\u6ca1\u6709\u51e0\u5341\u5e74\u9648\u65e7\u7684\u6bd4\u55bb\u6765\u5efa\u7acb\u548c\u98a0\u8986\uff0c\u8fd9\u4e9b\u7535\u5f71\u662f\u4e0d\u53ef\u80fd\u5b58\u5728\u7684\u3002\u7ee7\u300a\u81ea\u6740\u5c0f\u961f\u300b\u4e4b\u540e\uff0c\u4eba\u4eec\u5f88\u5bb9\u6613\u8ba4\u4e3a\u6211\u4eec\u53ef\u80fd\u4f1a\u51fa\u73b0\u66f4\u591a\u4ee5\u6210\u4eba\u4e3a\u5bfc\u5411\u7684\u4fee\u6b63\u4e3b\u4e49\u8d85\u7ea7\u82f1\u96c4\u6545\u4e8b\uff0c\u8fd9\u4e9b\u6545\u4e8b\u540c\u6837\u81ea\u7531\u3001\u521b\u9020\u6027\u548c\u5177\u6709\u9488\u5bf9\u6027\u7684\u4e3b\u9898\uff08\u662f\u7684\uff0c\u300a\u81ea\u6740\u5c0f\u961f\u300b\u5bf9\u7f8e\u56fd\u5916\u4ea4\u653f\u7b56\u6709\u8bdd\u8981\u8bf4\uff09\u3002\u6f2b\u5a01\u6e10\u5165\u4f73\u5883\u7684\u53f2\u8bd7\u300a\u590d\u4ec7\u8005\u8054\u76df\uff1a\u7ec8\u5c40\u4e4b\u6218\u300b\u51ed\u501f\u4e24\u5e74\u524d\u7684\u5de8\u989d\u7968\u623f\uff0c\u65e0\u7591\u5c06\u4ee3\u8868\u8d85\u7ea7\u82f1\u96c4\u7535\u5f71\u7684\u6d41\u884c\u9ad8\u5cf0\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u300a\u81ea\u6740\u5c0f\u961f\u300b\u5bf9\u4e8e\u8d85\u7ea7\u82f1\u96c4\u7535\u5f71\u6765\u8bf4\u53ef\u80fd\u5c31\u50cf\u897f\u90e8\u7247\u300a\u72c2\u91ce\u6218\u961f\u300b\u4e00\u6837\uff1a\u4e00\u4e2a\u9636\u6bb5\u7684\u8840\u8165\u3001\u6539\u53d8\u6e38\u620f\u89c4\u5219\u7684\u7ed3\u675f\uff0c\u4ee5\u53ca\u53e6\u4e00\u4e2a\u751a\u81f3\u66f4\u4e30\u5bcc\u7684\u9636\u6bb5\u7684\u5f00\u59cb\u3002", "note_en": "James Gunn\u2019s gory, knowing reboot of the DC antihero adventure is part of a newer revisionist trend that suggests the genre might be going the way of the western\n    T he  Suicide Squad begins roughly how you\u2019d expect. En route to the island nation of Corto Maltese, we\u2019re introduced to the members of a revamped Task Force X, a motley crew of super(anti)heroes assembled for a covert mission at the behest of shady US intelligence agency Argus. These are new faces, but we recognise them all the same: there\u2019s the cocksure wisecracker, the pretty boy, the taciturn senior figure \u2013 familiar guides to see us through another team-based superhero movie.\n   Before the opening credits, most of these newcomers are wiped out in an orgy of brutally comic violence, their faces replaced by gooey bullet holes, their heads exploded by bomb implants, their bodies atomised in a fiery helicopter wreck. All the observing Argus agents can think to do is make bets on who\u2019ll die next.\n  The Suicide Squad ain\u2019t your daddy\u2019s superhero movie. Bloodthirsty and liberally profane, James Gunn\u2019s hardcore do-over of 2016\u2019s Suicide Squad wouldn\u2019t have seemed possible even five years ago, when the similarly violent and irreverent Deadpool was made for a relatively hesitant $58m (The Suicide Squad reportedly cost about $175m). But the success of Deadpool, along with its sequel and the X-Men spin-off Logan, proved that an audience that grew up on a steady diet of PG comic book movies was ready for F-bombs and bloody decapitations, and to have its expectations challenged. The Suicide Squad doubles down on the swears and gore \u2013 and like its R-rated cousins, it goes all in on defying the conventions of a by now well-established genre.\n Ridiculing mismatched superhero team-ups of its kind, The Suicide Squad features characters with essentially useless powers like Nathan Fillion\u2019s TDK, whose detachable limbs can do little more than tickle the bad guys from a distance; it pokes fun at the ubiquity of superheroes with mummy and daddy issues, with David Dastmalchian\u2019s Polka-Dot Man seeing his detested mother in the faces of all his enemies, including the skyscraper-sized celestial starfish that is The Suicide Squad\u2019s chief antagonist; then there\u2019s John Cena\u2019s Peacemaker, who is prepared to kill absolutely everyone in the name of freedom, and plays like an (only slightly) more extreme version of every cape-wearing super-patriot who ever graced a comic book cover.\n  As wilfully silly as it often is, The Suicide Squad is proof that the superhero movie is beginning to mature. It\u2019s not just the increasing taste for violence and sex (one of The Suicide Squad\u2019s funniest scenes finds Margot Robbie\u2019s Harley Quinn falling in lust with Corto Maltese\u2019s hunky dictator); the genre is now reflecting and commenting on itself. And though this makes a film like Gunn\u2019s, and like Deadpool and Logan before it, feel fresh, it might also be evidence that the superhero genre has entered its late stage.\n Beginning with X-Men in 2000 and Sam Raimi\u2019s Spider-Man in 2002, the superhero movie has over the last couple of decades grown to become Hollywood\u2019s obsession. In recent years, as mid-budget movies disappeared and original blockbusters became ever rarer, studios have begun to bet the house on their extended comic book universes. All the while, commentators and some major film-makers (including, most famously,  Martin Scorsese) have bemoaned the cultural dominance of superhero franchises at the expense of most everything else. As Marvel plans its next phases into  2026 and beyond, it could almost seem as though the superhero\u2019s on-screen golden age will never end. As James Gunn himself  admits, however, no genre remains popular forever.\n The musical, the epic, the romcom \u2013 all have enjoyed their day in the sun as reliable box-office draws. Once upon a time, the western ruled. For years, western movies and TV shows were churned out with such regularity it might have seemed like the stream of cowboy content would never dry up. As the fanbase grew older, the genre simply evolved. The spaghetti western replaced the traditional \u201cwhite hat\u201d with the antihero and then, beginning with films like Sam Peckinpah\u2019s bloodbath oater The Wild Bunch, the western entered its revisionist phase, a period of reflection which birthed some of the finest ever examples of the cowboy picture. Then the genre exhausted itself and petered out.\n With The Suicide Squad, as well as TV shows like Watchmen and The Boys, it would seem the superhero genre is now in its own revisionist phase. The number of superhero projects aimed expressly at adults is growing \u2013 The Suicide Squad\u2019s Peacemaker, for one, has his own R-rated TV spinoff coming to HBO Max next year \u2013 though it\u2019s too early to tell if this will come at the expense of family-friendly comic book projects. ( Some commentators are already wondering whether Black Widow\u2019s disappointing box office indicates waning interest in Marvel\u2019s cleaner, more conventional brand of superhero story, but it\u2019s easy to be sceptical given the  myriad factors that might have led to that film\u2019s under-performance.)\n  However long the superhero movie has left as Hollywood\u2019s premier genre, the stage of evolution that the genre finds itself at now could prove particularly fascinating. The popular western\u2019s revisionist phase gave us such classics as McCabe &amp; Mrs Miller and Ulzana\u2019s Raid, films of great depth which couldn\u2019t have existed without decades of well-worn tropes to build upon and upend. Following The Suicide Squad, it\u2019s tempting to think we might be due more adult-oriented revisionist superhero stories that are as free, inventive and pointedly topical (yes, The Suicide Squad has things to say about American foreign policy).\n Marvel\u2019s crescendoing epic Avengers: Endgame, with its colossal box office showing two years ago, will undoubtedly represent the peak of the superhero movie\u2019s popularity. The Suicide Squad meanwhile may prove to be to the superhero movie what The Wild Bunch was to the western: a bloody, game-changing end to one phase, and the beginning of another, even richer one.", "posttime": "2021-08-06 14:18:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u5f71,squad", "title": "\u81ea\u6740\u5c0f\u961f\u662f\u8d85\u7ea7\u82f1\u96c4\u7535\u5f71\u7ed3\u5c40\u7684\u5f00\u59cb\u5417\uff1f", "title_en": "Is The Suicide Squad the beginning of the end for the superhero movie?", "transed": 1, "url": "https://www.theguardian.com/film/2021/aug/05/the-suicide-squad-superhero-dc-movie", "via": "", "real_tags": ["\u7535\u5f71", "squad"]}, {"category": "", "categoryclass": "", "imagename": "f8567c0fe8d2ffa140fc1c47254af1c1.jpg", "infoid": 1071718, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6ce8\u518c CNN \u7684 Wonder Theory \u79d1\u5b66\u901a\u8baf\u3002\u901a\u8fc7\u6709\u5173\u8ff7\u4eba\u53d1\u73b0\u3001\u79d1\u5b66\u8fdb\u6b65\u7b49\u7684\u65b0\u95fb\u63a2\u7d22\u5b87\u5b99\u3002 \uff08\u7f8e\u56fd\u6709\u7ebf\u7535\u89c6\u65b0\u95fb\u7f51\uff09\u5728\u897f\u4f2f\u5229\u4e9a\u5317\u6781\u6df1\u5904\u53d1\u73b0\u51b0\u51bb\u7684\u6d1e\u7a74\u72ee\u5b50\u5e7c\u5d3d\u770b\u8d77\u6765\u50cf\u662f\u7761\u7740\u4e86\uff0c\u8f7b\u8f7b\u4e00\u78b0\u53ef\u80fd\u4f1a\u5524\u9192\u5979\u3002\u5e7c\u5d3d\u7684\u91d1\u8272\u76ae\u6bdb\u4e0a\u6cbe\u6ee1\u4e86\u6ce5\u571f\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\u90fd\u5b8c\u597d\u65e0\u635f\u3002\u5979\u7684\u7259\u9f7f\u3001\u76ae\u80a4\u3001\u8f6f\u7ec4\u7ec7\u548c\u5668\u5b98\u90fd\u88ab\u5236\u6210\u6728\u4e43\u4f0a\uff0c\u4f46\u90fd\u5b8c\u597d\u65e0\u635f\u3002\u81ea\u4ece\u5979\u4e0a\u6b21\u95ed\u4e0a\u773c\u775b\u5927\u7ea6 28,000 \u5e74\u4ee5\u6765\uff0c\u5979\u7684\u722a\u5b50\u4ecd\u7136\u950b\u5229\u5230\u8db3\u4ee5\u523a\u7834\u4e00\u4f4d\u6b63\u5728\u7814\u7a76\u8fd9\u4e2a\u975e\u51e1\u7684\u2014\u2014\u800c\u4e14\u524d\u6240\u672a\u6709\u7684\u2014\u2014\u6c38\u4e45\u51bb\u571f\u4fdd\u5b58\u6807\u672c\u7684\u79d1\u5b66\u5bb6\u7684\u624b\u6307\u3002\u897f\u4f2f\u5229\u4e9a\u8f9b\u5df4\uff0c\u7ef0\u53f7\u65af\u5df4\u8fbe\uff0c\u662f\u4e24\u53ea\u6d1e\u7a74\u72ee\u5b9d\u5b9d\u4e4b\u4e00\u2014\u2014\u66fe\u7ecf\u5728\u5317\u534a\u7403\u5e7f\u6cdb\u6f2b\u6e38\u7684\u5df2\u706d\u7edd\u7684\u5927\u578b\u732b\u79d1\u52a8\u7269\u2014\u2014\u4e8e 2017 \u5e74\u548c 2018 \u5e74\u7531\u731b\u72b8\u8c61\u7259\u730e\u4eba\u5728\u4fc4\u7f57\u65af\u8fdc\u4e1c\u7684\u585e\u7f2a\u5229\u4e9a\u8d6b\u6cb3\u7554\u53d1\u73b0.\u6700\u521d\uff0c\u4eba\u4eec\u8ba4\u4e3a\u8fd9\u4e24\u53ea\u5e7c\u5d3d\u662f\u5144\u5f1f\u59d0\u59b9\uff0c\u56e0\u4e3a\u5b83\u4eec\u88ab\u53d1\u73b0\u76f8\u8ddd\u4ec5 15 \u7c73\uff0849 \u82f1\u5c3a\uff09\uff0c\u4f46\u4e00\u9879\u65b0\u7684\u7814\u7a76\u53d1\u73b0\u5b83\u4eec\u7684\u5e74\u9f84\u76f8\u5dee\u7ea6 15,000 \u5e74\u3002\u6839\u636e\u65e0\u7ebf\u7535\u78b3\u5b9a\u5e74\u6cd5\uff0c\u9c8d\u91cc\u65af\uff0c\u4f5c\u4e3a\u5df2\u77e5\u7684\u7b2c\u4e8c\u53ea\u5e7c\u5d3d\uff0c\u5df2\u6709 43,448 \u5c81\u3002 \u201c\u65af\u5df4\u8fbe\u53ef\u80fd\u662f\u8fc4\u4eca\u4e3a\u6b62\u53d1\u73b0\u7684\u4fdd\u5b58\u6700\u5b8c\u597d\u7684\u51b0\u6cb3\u65f6\u4ee3\u52a8\u7269\uff0c\u9664\u4e86\u76ae\u6bdb\u6709\u70b9\u76b1\u5df4\u5df4\u4e4b\u5916\uff0c\u51e0\u4e4e\u6ca1\u6709\u53d7\u635f\u3002\u5979\u751a\u81f3\u8fd8\u4fdd\u7559\u4e86\u80e1\u987b\u3002\u9c8d\u91cc\u65af\u7684\u53d7\u635f\u7a0b\u5ea6\u66f4\u5927\u4e00\u4e9b\uff0c\u4f46\u4ecd\u7136\u5f88\u597d\uff0c\u201d\u6d1b\u592b\u8bf4Dalen \u662f\u745e\u5178\u65af\u5fb7\u54e5\u5c14\u6469\u53e4\u9057\u4f20\u5b66\u4e2d\u5fc3\u8fdb\u5316\u9057\u4f20\u5b66\u6559\u6388\uff0c\u4e5f\u662f\u4e00\u9879\u5173\u4e8e\u5e7c\u5d3d\u7684\u65b0\u7814\u7a76\u7684\u4f5c\u8005\u3002\u7814\u7a76\u79f0\uff0c\u4e24\u53ea\u5e7c\u5d3d\u6b7b\u4ea1\u65f6\u53ea\u6709 1 \u6216 2 \u4e2a\u6708\u5927\u3002\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u5b83\u4eec\u662f\u5982\u4f55\u6b7b\u4ea1\u7684\uff0c\u4f46\u8fbe\u4f26\u548c\u5305\u62ec\u4fc4\u7f57\u65af\u548c\u65e5\u672c\u79d1\u5b66\u5bb6\u5728\u5185\u7684\u7814\u7a76\u5c0f\u7ec4\u8868\u793a\uff0c\u6ca1\u6709\u8ff9\u8c61\u8868\u660e\u5b83\u4eec\u88ab\u6355\u98df\u8005\u6740\u6b7b\u3002\n\u8ba1\u7b97\u673a\u65ad\u5c42\u626b\u63cf\u663e\u793a\u4ed6\u4eec\u7684\u9aa8\u9abc\u6709\u9885\u9aa8\u635f\u4f24\u3001\u808b\u9aa8\u8131\u81fc\u548c\u5176\u4ed6\u626d\u66f2\u3002 \u201c\u8003\u8651\u5230\u5b83\u4eec\u7684\u4fdd\u5b58\uff0c\u5b83\u4eec\u80af\u5b9a\u5f88\u5feb\u5c31\u88ab\u63a9\u57cb\u4e86\u3002\u6240\u4ee5\u5b83\u4eec\u53ef\u80fd\u6b7b\u4e8e\u6ce5\u77f3\u6d41\uff0c\u6216\u8005\u6389\u8fdb\u6c38\u4e45\u51bb\u571f\u7684\u88c2\u7f1d\u4e2d\uff0c\u201d\u8fbe\u4f26\u8bf4\u3002 \u201c\u7531\u4e8e\u5b63\u8282\u6027\u89e3\u51bb\u548c\u51bb\u7ed3\uff0c\u6c38\u4e45\u51bb\u571f\u5f62\u6210\u5927\u88c2\u7f1d\u3002\u201d\u5728\u4e0a\u4e00\u4e2a\u51b0\u6cb3\u65f6\u4ee3\uff0c\u897f\u4f2f\u5229\u4e9a\u5e76\u4e0d\u662f\u4eca\u5929\u7684\u7a7a\u5730\u3002\u731b\u72b8\u8c61\u3001\u82d4\u539f\u72fc\u3001\u718a\u3001\u957f\u6bdb\u7280\u725b\u3001\u91ce\u725b\u548c\u8d5b\u52a0\u7f9a\u7f8a\uff0c\u4ee5\u53ca\u6d1e\u7a74\u72ee\u2014\u2014\u4eca\u5929\u751f\u6d3b\u7684\u975e\u6d32\u72ee\u7684\u4e00\u4e2a\u7a0d\u5927\u7684\u4eb2\u621a\u2014\u2014\u6f2b\u6e38\u3002\u4e0d\u77e5\u9053\u6d1e\u72ee\u5982\u4f55\u9002\u5e94\u4e25\u9177\u7684\u9ad8\u7eac\u5ea6\u5730\u533a\u7684\u751f\u6d3b\uff0c\u8fd9\u91cc\u7684\u5b63\u8282\u53d8\u5316\u5feb\u3001\u98ce\u5927\u3001\u51ac\u5929\u5bd2\u51b7\u3001\u9ed1\u6697\u3002\u8be5\u7814\u7a76\u53d1\u8868\u5728\u7b2c\u56db\u7eaa\u6742\u5fd7\u4e0a\uff0c\u53d1\u73b0\u6d1e\u7a74\u72ee\u5b50\u7684\u5916\u5957\u4e0e\u975e\u6d32\u5e7c\u72ee\u7684\u5916\u5957\u76f8\u4f3c\u4f46\u4e0d\u5b8c\u5168\u76f8\u540c\u3002\u51b0\u6cb3\u65f6\u4ee3\u7684\u5e7c\u5d3d\u957f\u7740\u539a\u539a\u7684\u6bdb\u76ae\u5e95\u6bdb\uff0c\u8fd9\u53ef\u80fd\u6709\u52a9\u4e8e\u5b83\u4eec\u9002\u5e94\u5bd2\u51b7\u7684\u6c14\u5019\u3002\u8fd1\u5e74\u6765\uff0c\u66fe\u5728\u4fc4\u7f57\u65af\u8349\u539f\u4e0a\u6e38\u8361\u7684\u8bb8\u591a\u5df2\u706d\u7edd\u52a8\u7269\u7684\u6728\u4e43\u4f0a\u9057\u9ab8\u2014\u2014\u6bdb\u7280\u725b\u3001\u767e\u7075\u3001\u6d1e\u718a\u3001\u72ac\u79d1\u5c0f\u72d7\u2014\u2014\u7ecf\u5e38\u88ab\u730e\u4eba\u53d1\u73b0\uff0c\u4ed6\u4eec\u4f7f\u7528\u9ad8\u538b\u70b8\u6bc1\u96a7\u9053\u3002\u5c06\u6c34\u7ba1\u538b\u5165\u6c38\u4e45\u51bb\u571f\u5c42\u4e3b\u8981\u662f\u4e3a\u4e86\u5bfb\u627e\u957f\u800c\u5f2f\u66f2\u7684\u731b\u72b8\u8c61\u7259\u3002\u8c61\u7259\u8d38\u6613\u6709\u5229\u53ef\u56fe\u2014\u2014\u5982\u679c\u6709\u4e89\u8bae\u7684\u8bdd\u2014\u2014\u8c61\u7259\u88ab\u8c61\u7259\u96d5\u523b\u5e08\u548c\u6536\u85cf\u5bb6\u89c6\u4e3a\u8c61\u7259\u7684\u66ff\u4ee3\u54c1\u3002\u50cf\u8be5\u7814\u7a76\u7684\u5408\u8457\u8005\u517c\u897f\u4f2f\u5229\u4e9a\u4e3b\u8981\u57ce\u5e02\u96c5\u5e93\u8328\u514b\u79d1\u5b66\u9662\u7814\u7a76\u5458\u74e6\u5217\u91cc\u00b7\u666e\u6d1b\u7279\u5c3c\u79d1\u592b (Valery Plotnikov) \u7b49\u4fc4\u7f57\u65af\u79d1\u5b66\u5bb6\u966a\u4f34\u5e76\u4e0e\u957f\u7259\u730e\u4eba\u5efa\u7acb\u4e86\u5de5\u4f5c\u5173\u7cfb\uff0c\u4ed6\u4eec\u4ece\u6c38\u4e45\u51bb\u571f\u7684\u6ce5\u571f\u548c\u51b0\u4e2d\u53d1\u73b0\u4e86\u60ca\u4eba\u7684\u53d1\u73b0\u3002\n\u201c\u5728 2017 \u5e74\uff0c......\u6211\u5728\u51b0\u6d1e\u91cc\u548c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u201d\u666e\u6d1b\u7279\u5c3c\u79d1\u592b\u5728\u4f26\u6566\u81ea\u7136\u5386\u53f2\u535a\u7269\u9986\u4e0a\u4e2a\u6708\u53d1\u5e03\u7684\u64ad\u5ba2\u4e2d\u8bf4\u9053\u3002 \u201c\u5929\u6c14\u5f88\u51b7\uff0c\u5f88\u5371\u9669\uff0c\u5de5\u4f5c\u4e5f\u5f88\u8f9b\u82e6\uff0c\u73af\u5883\u5f88\u7cdf\u7cd5\uff0c\u868a\u5b50\u5f88\u591a\uff0c\u201d\u4ed6\u8865\u5145\u8bf4\uff0c\u5728\u4e0e\u8c61\u7259\u730e\u4eba\u4e00\u8d77\u5ea6\u8fc7\u7684\u4e00\u4e2a\u6708\u91cc\uff0c\u4ed6\u51cf\u6389\u4e86 10 \u516c\u65a4\uff0822 \u78c5\uff09\u3002\u4f46\u4ed6\u5efa\u7acb\u7684\u5173\u7cfb\u4ea7\u751f\u4e86\u79d1\u5b66\u4e0a\u7684\u8d22\u5bcc\uff0c\u666e\u6d1b\u7279\u5c3c\u79d1\u592b\u8bf4\u4ed6\u9047\u5230\u4e86\u6d1e\u7a74\u72ee\u5b50\u5e7c\u5d3d\u3001\u72fc\u5934\u548c\u4e00\u7cfb\u5217\u6728\u4e43\u4f0a\u731b\u72b8\u8c61\u3002\u6c14\u5019\u5371\u673a\u4e5f\u53d1\u6325\u4e86\u4f5c\u7528\u3002\u6e29\u6696\u7684\u590f\u5b63\u2014\u2014\u5317\u6781\u53d8\u6696\u7684\u901f\u5ea6\u662f\u5168\u7403\u5e73\u5747\u6c34\u5e73\u7684\u4e24\u500d\u2014\u2014\u524a\u5f31\u4e86\u6c38\u4e45\u51bb\u571f\u5c42\u5e76\u5ef6\u957f\u4e86\u8c61\u7259\u72e9\u730e\u5b63\u8282\u3002 \u201c\u8fd9\u4e9b\u5929\u80af\u5b9a\u6709\u66f4\u591a\u7684\u53d1\u73b0\u3002\u4e3b\u8981\u539f\u56e0\u662f\u5bf9\u731b\u72b8\u8c61\u7259\u7684\u9700\u6c42\u589e\u52a0\uff0c\u8fd9\u610f\u5473\u7740\u66f4\u591a\u7684\u4eba\u5728\u6c38\u4e45\u51bb\u571f\u4e2d\u5bfb\u627e\u3002\u4f46\u6c14\u5019\u53d8\u5316\u4e5f\u6709\u8d21\u732e\uff0c\u4f7f\u878d\u5316\uff08\u4ee5\u53ca\u5b9e\u5730\u5de5\u4f5c\uff09\u5b63\u8282\u66f4\u957f\uff0c \u201d\u8fbe\u4f26\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u89e3\u91ca\u9053\u3002\u79d1\u5b66\u5bb6\u4eec\u5fc5\u987b\u5148\u6d4b\u8bd5\u51b7\u51bb\u7684\u9057\u9ab8\u662f\u5426\u6709\u4f20\u67d3\u75c5\uff0c\u4f8b\u5982\u70ad\u75bd\u75c5\uff0c\u5728\u4ed6\u4eec\u8be6\u7ec6\u68c0\u67e5\u5b83\u4eec\u4e4b\u524d\uff0c\u8fd9\u4e9b\u75be\u75c5\u53ef\u80fd\u5904\u4e8e\u4f11\u7720\u72b6\u6001\uff0c\u5c3d\u7ba1\u8fbe\u4f26\u8bf4\u8fd9\u4e9b\u9057\u9ab8\u4e0d\u592a\u53ef\u80fd\u542b\u6709\u53e4\u8001\u7684\u75c5\u539f\u4f53\u3002\u5e7c\u5d3d\u7684\u6027\u522b\u901a\u8fc7CT\u626b\u63cf\u548c\u57fa\u4e8e\u9057\u4f20\u7684\u6027\u522b\u786e\u5b9a\u5f97\u5230\u786e\u8ba4\u3002\u8fbe\u4f26\u8bf4\uff0c\u4e0b\u4e00\u6b65\u5c06\u662f\u5bf9\u65af\u5df4\u8fbe\u7684 DNA \u8fdb\u884c\u6d4b\u5e8f\uff0c\u8fd9\u53ef\u4ee5\u63ed\u793a\u6d1e\u72ee\u7684\u8fdb\u5316\u5386\u53f2\u3001\u79cd\u7fa4\u89c4\u6a21\u53ca\u5176\u72ec\u7279\u7684\u9057\u4f20\u7279\u5f81\u3002", "note_en": "Sign up for CNN&#39;s Wonder Theory science newsletter.   Explore the universe with news on fascinating discoveries, scientific advancements and more.\n (CNN)Found frozen deep in the Siberian Arctic, the cave lion cub looks like she&#39;s asleep and one touch might  awaken her.\n The cub&#39;s golden fur is matted with mud but otherwise undamaged. Her teeth, skin, soft tissue and organs are mummified but all intact. Some 28,000 years since she last closed her eyes, her claws are still sharp enough to prick the finger of one of the scientists who are studying this remarkable -- and unprecedented -- permafrost-preserved specimen.\n The Siberian Simba, nicknamed Sparta, was one of two baby cave lions -- extinct big cats that used to roam widely across the northern hemisphere -- found in 2017 and 2018 by mammoth tusk hunters on the banks of the Semyuelyakh River in Russia&#39;s Far East.\n     Initially, it was thought the two cubs were siblings, as they were found just 15 meters (49 feet) apart, but a new study found that they differ in age by around 15,000 years. Boris, as the second cub is known, is 43,448 years  old, according to radio carbon dating.\n   &#34;Sparta is probably the best preserved Ice Age animal ever found, and is more or less undamaged apart from the fur being a bit ruffled. She even had the whiskers preserved. Boris is a bit more damaged, but still pretty good,&#34; said Love Dalen, a professor of evolutionary genetics at the Centre for Palaeogenetics in Stockholm, Sweden, and an author of a new study on the cubs.\n  Both cubs were just 1 or 2 months old when they perished, the study said. It&#39;s not clear how they died, but Dalen and the research team -- which includes Russian and Japanese scientists -- said there were no signs of them being killed by a predator.\n  Computed tomography scans showed skull damage, dislocation of ribs, and other distortions in their skeletons.\n &#34;Given their preservation they must have been buried very quickly. So maybe they died in a mudslide, or fell into a crack in the permafrost,&#34; Dalen said. &#34;Permafrost forms large cracks due to seasonal thawing and freezing.&#34;\n During the last Ice Age, Siberia wasn&#39;t the empty place it is today. Mammoths, tundra wolves, bears, woolly  rhinoceroses, bison and saiga antelopes roamed, along with cave lions -- a slightly bigger relative of African lions that live today.\n It&#39;s not known how the cave lion adapted to life in the harsh high latitudes, with its rapid changes of season, strong winds and cold, dark winters.\n The  study, published in the journal Quaternary, found that the cave lions&#39; coat was similar but not identical to that of an African lion cub. The Ice Age cubs had a long thick fur undercoat that might have helped them adapt to the cold climate.\n  The mummified remains of a number of extinct animals -- a  woolly rhino,  a  lark, a  cave bear,  a canine puppy -- that once roamed the Russia steppe have been found in recent years, often by hunters, who blast tunnels using high-pressure water hoses into the permafrost primarily in search of long curvy mammoth tusks. There is a lucrative -- if controversial -- trade in the tusks, which are prized by ivory carvers and collectors as an alternative to elephant ivory.\n Russian scientists like Valery Plotnikov, a co-author of the study and a researcher at the Academy of Sciences in Yakutsk, Siberia&#39;s main city, have  accompanied and developed working relationships with the tusk hunters, who unearth astonishing finds from the permafrost&#39;s mud and ice.\n &#34;In 2017, ... I worked with them in the hole, the ice cave,&#34; Plotnikov said on a  podcast produced by the Natural History Museum in London that was released last month.\n &#34;It&#39;s very cold, very dangerous and very hard to work, terrible conditions, many mosquitoes,&#34; he added, saying he lost 10 kilos (22 pounds) in the month he spent with the tusk hunters. But the relationships he forged have generated a scientific bonanza, with Plotnikov saying he&#39;s come across the cave lion cubs, a wolf head and a family of mummified mammoths.\n   The climate crisis has also played a role. Warmer summers -- the Arctic is warming two times faster than the global average -- have weakened the permafrost layer and lengthened the tusk-hunting season.\n &#34;There are definitely more finds being made these days. The main reason is the increased demand for mammoth ivory, meaning more people are out searching in the permafrost. But climate change also contributes, making the melting (and thus field work) season longer,&#34; Dalen explained via email.\n   The scientists have to test the frozen remains for infectious diseases, such as anthrax, that can lay dormant before they examine them in detail, although Dalen said that it was unlikely that the remains harbor ancient pathogens. The sex of the cubs was confirmed by CT scan and genetic-based sex determination.\n Dalen said that the next step would be to sequence the DNA of Sparta, which could reveal the evolutionary history of the cave lion, the population size and its unique genetic features.", "posttime": "2021-08-06 14:18:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u73b0,frozen", "title": "\u5728\u897f\u4f2f\u5229\u4e9a\u53d1\u73b0\u7684\u4fdd\u5b58\u5b8c\u597d\u7684\u6d1e\u7a74\u72ee\u5b50\u5e7c\u5d3d\u5df2\u6709 28,000 \u5e74\u7684\u5386\u53f2", "title_en": "Perfectly preserved cave lion cub found frozen in Siberia is 28,000 years old", "transed": 1, "url": "https://www.cnn.com/2021/08/05/world/frozen-cave-lion-cubs-siberia-scn/index.html", "via": "", "real_tags": ["\u53d1\u73b0", "frozen"]}, {"category": "", "categoryclass": "", "imagename": "7f2da5c408ae8be1605238538d50e1c1.jpg", "infoid": 1071717, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53c2\u8bae\u5458 Mark Warner (D-Va.) \u548c Rob Portman (R-Ohio) \u5468\u56db\u63d0\u4ea4\u4e86\u4e00\u9879\u7ade\u4e89\u6027\u4fee\u6b63\u6848\uff0c\u5bf9\u53c2\u8bae\u9662\u57fa\u7840\u8bbe\u65bd\u6cd5\u6848\u7684\u52a0\u5bc6\u8d27\u5e01\u6761\u6b3e\u8fdb\u884c\u4e86\u8f83\u65e9\u7684\u4fee\u6b63\u6848\u3002 CoinDesk \u83b7\u5f97\u4e86\u8be5\u4fee\u6b63\u6848\u7684\u526f\u672c\uff0c\u5176\u8303\u56f4\u6709\u9650\uff0c\u4ec5\u4e0d\u5305\u62ec\u5de5\u4f5c\u91cf\u8bc1\u660e\u6316\u6398\uff0c\u6216\u5141\u8bb8\u4e2a\u4eba\u63a7\u5236\u63d0\u4f9b\u8bbf\u95ee\u6570\u5b57\u8d44\u4ea7\u7684\u79c1\u94a5\u7684\u786c\u4ef6\u6216\u8f6f\u4ef6\u7684\u9500\u552e\u3002\u5728\u5468\u56db\u665a\u4e0a\u7684\u4e00\u6761\u63a8\u6587\u4e2d\uff0c\u603b\u90e8\u4f4d\u4e8e\u534e\u76db\u987f\u7279\u533a\u7684\u667a\u5e93\u786c\u5e01\u4e2d\u5fc3\u7684\u6267\u884c\u8463\u4e8b\u6770\u91cc\u5e03\u91cc\u6258\u79f0\u8be5\u4fee\u6b63\u6848\u662f\u201c\u707e\u96be\u6027\u7684\u201d\u3002\u4ed6\u8865\u5145\u8bf4\uff1a\u201c\u5b83\u5bf9\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u6ca1\u6709\u4efb\u4f55\u5e2e\u52a9\u3002\u8352\u8c2c\uff01\u201d\u7279\u5b9a\u4e8e\u52a0\u5bc6\u8d27\u5e01\u7684\u6761\u6b3e\u5c06\u4e3a\u57fa\u7840\u8bbe\u65bd\u6539\u5584\u7b79\u96c6 280 \u4ebf\u7f8e\u5143\uff0c\u7528\u4e8e 1 \u4e07\u4ebf\u7f8e\u5143\uff0c\u4f46\u4e00\u76f4\u5b58\u5728\u4e89\u8bae\uff0c\u77ed\u6682\u5730\u963b\u788d\u4e86\u6574\u4e2a\u57fa\u7840\u8bbe\u65bd\u6cd5\u6848\u3002\u53c2\u8bae\u5458 Ron Wyden (D-Ore.)\u3001Cynthia Lummis (R-Wyo.) \u548c Pat Toomey (R-Pa.) \u5728\u5468\u56db\u65e9\u4e9b\u65f6\u5019\u63d0\u51fa\u4e86\u4ed6\u4eec\u7684\u4fee\u6b63\u6848\uff0c\u4ee5\u786e\u4fdd\u77ff\u5de5\u3001\u8282\u70b9\u8fd0\u8425\u5546\u3001\u5f00\u53d1\u5546\u548c\u5176\u4ed6\u975e\u6258\u7ba1\u52a0\u5bc6\u884c\u4e1a\u53c2\u4e0e\u8005\u83b7\u5f97\u8c41\u514d\u6765\u81ea\u52a0\u5bc6\u7a0e\u6536\u62a5\u544a\u6761\u6b3e\u3002\u62dc\u767b\u653f\u5e9c\u6b64\u524d\u66fe\u5728\u5468\u56db\u665a\u95f4\u5728\u63a8\u7279\u4e0a\u5206\u4eab\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\u652f\u6301\u5b83\u6240\u8c13\u7684\u201c\u59a5\u534f\u201d\uff0c\u5e76\u5f52\u56e0\u4e8e\u767d\u5bab\u526f\u65b0\u95fb\u79d8\u4e66\u5b89\u5fb7\u9c81\u00b7\u8d1d\u8328\u3002\u6000\u767b\u5728\u63a8\u7279\u4e0a\u8bf4\uff0c\u7ade\u4e89\u6027\u4fee\u6b63\u6848\u201c\u4e3a\u6700\u5177\u6c14\u5019\u7834\u574f\u6027\u7684\u52a0\u5bc6\u6280\u672f\u5f62\u5f0f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u653f\u5e9c\u6279\u51c6\u7684\u5b89\u5168\u6e2f\uff0c\u79f0\u4e3a\u5de5\u4f5c\u91cf\u8bc1\u660e\u3002\u63a8\u8fdb\u8fd9\u9879\u4fee\u6b63\u6848\u5bf9\u6c14\u5019\u548c\u521b\u65b0\u6765\u8bf4\u90fd\u662f\u9519\u8bef\u7684\u3002\u201d\n\u540c\u6837\uff0cLummis \u53d1\u63a8\u6587\u8bf4\uff0c\u201c\u6211\u4eec\u7684\u4fee\u6b63\u6848\u4fdd\u62a4\u77ff\u5de5\u4ee5\u53ca\u786c\u4ef6\u548c\u8f6f\u4ef6\u5f00\u53d1\u5546\u3002\u53e6\u4e00\u4e2a\u6ca1\u6709\u3002\u9009\u62e9\u662f\u660e\u786e\u7684\u3002\u201d\u66f4\u65b0\uff08UTC \u65f6\u95f4 2021 \u5e74 8 \u6708 6 \u65e5 02:48\uff09\uff1a\u589e\u52a0\u767d\u5bab\u5bf9 Warner-Portman-Sinema \u4fee\u6b63\u6848\u7684\u652f\u6301\uff1b\u6000\u767b\u56de\u5e94\u3002\u6ce8\u518c\u540e\uff0c\u60a8\u5c06\u6536\u5230\u6709\u5173 CoinDesk \u4ea7\u54c1\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u5e76\u4e14\u60a8\u540c\u610f\u6211\u4eec\u7684\u6761\u6b3e\u548c\u6761\u4ef6\u4ee5\u53ca\u9690\u79c1\u653f\u7b56\u3002\u62ab\u9732 \u4f5c\u4e3a\u6709\u5173\u52a0\u5bc6\u8d27\u5e01\u3001\u6570\u5b57\u8d44\u4ea7\u548c\u8d27\u5e01\u672a\u6765\u7684\u65b0\u95fb\u548c\u4fe1\u606f\u7684\u9886\u5bfc\u8005\uff0cCoinDesk \u662f\u4e00\u5bb6\u81f4\u529b\u4e8e\u5b9e\u73b0\u6700\u9ad8\u65b0\u95fb\u6807\u51c6\u5e76\u9075\u5b88\u4e00\u5957\u4e25\u683c\u7684\u7f16\u8f91\u653f\u7b56\u7684\u5a92\u4f53\u673a\u6784\u3002 CoinDesk \u662f Digital Currency Group \u7684\u72ec\u7acb\u8fd0\u8425\u5b50\u516c\u53f8\uff0c\u8be5\u96c6\u56e2\u6295\u8d44\u4e8e\u52a0\u5bc6\u8d27\u5e01\u548c\u533a\u5757\u94fe\u521d\u521b\u516c\u53f8\u3002", "note_en": "Senators Mark Warner (D-Va.) and Rob Portman (R-Ohio) submitted a competing amendment on Thursday to an earlier amendment to the Senate infrastructure bill\u2019s cryptocurrency provision.\n The amendment, a copy of which was obtained by CoinDesk, is limited in scope, excluding only proof-of-work mining, or the selling of hardware or software that permits individuals to control private keys that provide access to digital assets.\n In a tweet Thursday evening, Jerry Brito, the executive director of the Washington, D.C.-based think tank Coin Center called the amendment &#34;disastrous.&#34; He added: &#34;And it does nothing for software devs. Ridiculous!&#34;\n The crypto-specific provision would raise $28 billion toward $1 trillion in infrastructure improvements but has been  contentious, briefly holding up the entire infrastructure bill.\n Senators Ron Wyden (D-Ore.), Cynthia Lummis (R-Wyo.) and Pat Toomey (R-Pa.)  proposed their amendment earlier Thursday to ensure miners, node operators, developers and other non-custodial crypto industry participants are exempt from the crypto tax reporting provision.\n The Biden administration formerly supported what it called the &#34;compromise&#34; in a  statement shared on Twitter late Thursday and attributed to White House Deputy Press Secretary Andrew Bates.\n Wyden  tweeted that the competing amendment &#34;provides a government-sanctioned safe harbor for the most climate-damaging form of crypto tech, called proof-of-work.\u00a0It would be a mistake for the climate and for innovation to advance this amendment.&#34;\n Similarly, Lummis  tweeted that, &#34;Our amendment protects miners as well as hardware and software developers. The other does not. The choice is clear.&#34;\n  UPDATE (Aug. 6, 2021, 02:48 UTC):\u00a0 Adds White House support for Warner-Portman-Sinema amendment; Wyden response.\n By signing up, you will receive emails about CoinDesk products and you agree to our  terms &amp; conditions and  privacy policy.\n   Disclosure The leader in news and information on cryptocurrency, digital assets and the future of money, CoinDesk is a media outlet that strives for the highest journalistic standards and abides by a  strict set of editorial policies. CoinDesk is an independent operating subsidiary of  Digital Currency Group, which invests in  cryptocurrencies and blockchain  startups.", "posttime": "2021-08-06 13:22:03", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6cd5\u6848,house,\u4fee\u6b63\u6848", "title": "\u53c2\u8bae\u5458\u534e\u7eb3\u548c\u6ce2\u7279\u66fc\u63d0\u51fa\u4e86\u4e00\u9879\u57fa\u7840\u8bbe\u65bd\u6cd5\u6848\u4fee\u6b63\u6848\uff0c\u4ec5\u5c06\u52a0\u5bc6\u77ff\u5de5\u6392\u9664\u5728\u7ecf\u7eaa\u4eba\u5b9a\u4e49\u4e4b\u5916\uff1b\u767d\u5bab\u8868\u793a\u652f\u6301", "title_en": "Senators Warner and Portman propose an amendment to infrastructure bill that only excludes crypto miners from broker definition; White House shows support", "transed": 1, "url": "https://www.coindesk.com/senator-who-wrote-controversial-crypto-tax-rule-proposes-modest-revision", "via": "", "real_tags": ["\u6cd5\u6848", "house", "\u4fee\u6b63\u6848"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071716, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6700\u8fd1\u6b63\u5728\u5e2e\u52a9\u6211\u5988\u5988\u4f7f\u7528 Microsoft Sharepoint \u5171\u4eab\u6587\u4ef6\u3002\u8be5\u6587\u4ef6\u662f\u5305\u542b\u4e00\u4e9b Word \u6587\u6863\u7684 zip \u5b58\u6863\u3002\u6211\u4eec\u4e0a\u4f20\u4e86\u6587\u4ef6\u5e76\u5411\u6536\u4ef6\u4eba\u53d1\u9001\u4e86\u4e00\u4e2a\u5171\u4eab\u94fe\u63a5\u3002\u4ed6\u4eec\u5355\u51fb\u4e86\u94fe\u63a5\uff0c\u4f46\u65e0\u6cd5\u4f7f\u7528\u8fd9\u4e9b\u6587\u4ef6\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8be5\u94fe\u63a5\u4e0d\u662f\u4e0b\u8f7d\u6587\u4ef6\uff0c\u800c\u662f\u6253\u5f00\u4e00\u4e2a\u5728\u7ebf\u6587\u4ef6\u6d4f\u89c8\u5668\uff0c\u8be5\u6d4f\u89c8\u5668\u5bfc\u822a\u5230 zip \u6587\u4ef6\u4e2d\u3002\u8fd9\u5f15\u8d77\u4e86\u6df7\u4e71\uff0c\u56e0\u4e3a\u7528\u6237\u4e0d\u660e\u767d\u6587\u4ef6\u7684\u5728\u7ebf\u89c6\u56fe\u4e0e\u5728\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u4fdd\u5b58\u6587\u4ef6\u4e0d\u540c\u3002\u8fd9\u5728\u5728\u7ebf\u6587\u4ef6\u9886\u57df\u5f88\u5e38\u89c1\u3002\u6240\u4ee5\u6211\u5f00\u59cb\u601d\u8003\uff1a\u6211\u4eec\u5982\u4f55\u624d\u80fd\u6784\u5efa\u51fa\u4e0d\u4f1a\u6301\u7eed\u8ba9\u4eba\u4eec\u611f\u5230\u56f0\u60d1\u7684\u8f6f\u4ef6\uff1f\u4e0a\u4e0b\u6587\u5f88\u91cd\u8981\u3002\u5982\u679c\u60a8\u5728\u8ba1\u7b97\u673a\u4e0a\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u5b83\u4e0e\u5728 Web \u6d4f\u89c8\u5668\u754c\u9762\u4e2d\u6253\u5f00\u5b83\u4e0d\u540c\uff0c\u4e5f\u4e0e\u5728\u624b\u673a\u4e0a\u6253\u5f00\u5b83\u4e0d\u540c\u3002\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\u3002\u6587\u4ef6\u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u5b83\u4eec\u662f\u73b0\u4ee3\u8ba1\u7b97\u7684\u57fa\u77f3\uff0c\u4eba\u4eec\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u73af\u5883\u4e2d\u5904\u7406\u6587\u4ef6\u3002\u6587\u4ef6\u6d4f\u89c8\u5668\u89c6\u56fe\u662f\u6211\u4eec\u884c\u4e1a\u7684\u6807\u5fd7\u3002\u4efb\u4f55\u4f7f\u7528\u8fc7\u5e26\u6709 GUI\uff08\u56fe\u5f62\u7528\u6237\u754c\u9762\uff09\u7684\u8ba1\u7b97\u673a\u7684\u4eba\u90fd\u77e5\u9053\u6587\u4ef6\u6d4f\u89c8\u5668\u662f\u4ec0\u4e48\u6837\u7684\u3002\u5b83\u770b\u8d77\u6765\u4e0e\u7ecf\u5178 Windows \u4e2d\u7684\u76f8\u540c\uff0c\u4e2d\u95f4\u662f\u6587\u4ef6\u5217\u8868\uff0c\u5de6\u4fa7\u901a\u5e38\u662f\u4e00\u4e9b\u5e38\u89c1\u6587\u4ef6\u5939\u3002\u5728\u4efb\u4f55\u4f60\u627e\u5230\u6587\u4ef6\u7684\u5730\u65b9\uff0c\u4f60\u6700\u7ec8\u90fd\u4f1a\u9047\u5230\u4e00\u4e2a\u770b\u8d77\u6765\u5f88\u719f\u6089\u7684\u6587\u4ef6\u6d4f\u89c8\u5668\u3002\u867d\u7136\u5b83\u4eec\u770b\u8d77\u6765\u76f8\u540c\uff0c\u4f46\u5b83\u4eec\u7684\u884c\u4e3a\u5e76\u4e0d\u76f8\u540c\u3002\u67d0\u4e9b\u6587\u4ef6\u6d4f\u89c8\u5668\u53ef\u4ee5\u521b\u5efa\u3001\u7f16\u8f91\u548c\u4fdd\u5b58\u6587\u4ef6\u3002\u6709\u4e9b\u53ea\u80fd\u663e\u793a\u5b83\u4eec\u3002\u6709\u4e9b\u53ea\u80fd\u5904\u7406\u67d0\u4e9b\u7c7b\u578b\u7684\u6587\u4ef6\u3002\u6709\u4e9b\u751a\u81f3\u4e0d\u4f1a\u663e\u793a\u6b63\u786e\u7684\u5217\u8868\u3002\u8fd9\u901a\u5e38\u662f\u5e73\u53f0\u9650\u5236\u3002\u7528\u6587\u4ef6\u505a\u67d0\u4e8b\u3002\u7528\u6237\u9700\u8981\u5c06\u6587\u4ef6\u4ece\u4e00\u4e2a\u6587\u4ef6\u6d4f\u89c8\u5668\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u6d4f\u89c8\u5668\u3002\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u662f\u4ee4\u4eba\u56f0\u60d1\u7684\u3002\u6211\u4eec\u6709\u8fd9\u4e48\u591a\u4e0d\u540c\u7684\u6d4f\u89c8\u5668\u662f\u4e00\u4ef6\u574f\u4e8b\u5417\uff1f\u6709\u6ca1\u6709\u529e\u6cd5\u7b80\u5316\u548c\u7cbe\u7b80\u8fd9\u4e2a\u652f\u79bb\u7834\u788e\u7684\u7cfb\u7edf\uff1f\u6211\u8ba4\u4e3a\u67e5\u770b\u8fd9\u4e9b\u95ee\u9898\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u6d4f\u89c8\u5668\u548c\u6bcf\u4e00\u4e2a\u65b0\u7684\u4e0a\u4e0b\u6587\u90fd\u4f1a\u8ba9\u4eba\u4eec\u66f4\u96be\u77e5\u9053\u5b83\u5e94\u8be5\u5982\u4f55\u5de5\u4f5c\u3002\u5b83\u4f7f\u6211\u4eec\u7684\u7528\u6237\u5b64\u7acb\uff0c\u5e76\u5c06\u4ed6\u4eec\u4fdd\u7559\u5728\u4e00\u4e2a\u8f83\u5c0f\u7684\u751f\u6001\u7cfb\u7edf\u4e2d\u3002\u5199\u4e8e 05/08/2021", "note_en": "I was recently helping my mother share a file using Microsoft Sharepoint. The file was a zip archive containing a few word documents. We uploaded the file and sent a share link to the recipient. They clicked the link and was unable to use the files. It turned out that rather than downloading the file, the link opens an online file browser that navigates into the zip. This caused confusion because the the user did not understand that a online view of the files is not the same as having the files on your computer.\n This is common in the world of online files. So I started to wonder:  How can we build software that does not continuously confuse people?\n  Context matters. If you open a folder on your computer, it is different than opening it in a web browser interface and it is different than opening it on your phone. In computers a lot depends on context. Files are a great example of this. They are a building block of modern computing and there are many different contexts where people work with files.\n The file browser view is iconic to our industry. Anyone who has used a computer with a GUI (Graphical User Interface) knows what a file browser looks like. It looks the same as it did in classic Windows, with a list of files in the centre and often some common folders on the left. Any place that you find files, you will eventually encounter a file browser that looks familiar.\n While they look the same, they do not act the same. Some file browsers can create, edit and save files. Some can only show them. Some can only work with certain types of files. Some wont even show the correct list. This is often a platform limitation. To do something with a file. users need to move the files from one file browser to a different one. To a user this is confusing.\n Is it a bad thing that we have so many different browsers? Are there ways to simplify and streamline this fragmented system? I think its important to look at these questions since every new file browser and every new context makes it harder for people to know how it all should work. It silos our users and keeps them within a smaller ecosystem.\n   Written 05/08/2021", "posttime": "2021-08-06 13:21:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "question,\u6587\u4ef6", "title": "\u5f00\u653e\u6027\u95ee\u9898\uff1a\u6211\u4eec\u5982\u4f55\u4fee\u590d\u6587\u4ef6\uff1f", "title_en": "Open Question: How Can We Fix Files?", "transed": 1, "url": "https://www.schroer.ca/2021/08/05/file-browsers/", "via": "", "real_tags": ["question", "\u6587\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "51304a0f61aa85c1bb44bfa765f4f9dd.jpg", "infoid": 1071713, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53c2\u8bae\u9662 1.2 \u4e07\u4ebf\u7f8e\u5143\u7684\u4e24\u515a\u57fa\u7840\u8bbe\u65bd\u200b\u200b\u6cd5\u6848\u63d0\u51fa\u4e86\u4e00\u9879\u5168\u56fd\u6d4b\u8bd5\u8ba1\u5212\uff0c\u8be5\u8ba1\u5212\u5c06\u5141\u8bb8\u653f\u5e9c\u6536\u96c6\u53f8\u673a\u7684\u6570\u636e\uff0c\u4ee5\u4fbf\u5411\u4ed6\u4eec\u6536\u53d6\u6bcf\u82f1\u91cc\u7684\u65c5\u884c\u8d39\u7528\u3002\u65b0\u6536\u5165\u5c06\u6709\u52a9\u4e8e\u4e3a\u516c\u8def\u4fe1\u6258\u57fa\u91d1\u63d0\u4f9b\u8d44\u91d1\uff0c\u8be5\u57fa\u91d1\u76ee\u524d\u4e3b\u8981\u4f9d\u9760\u71c3\u6cb9\u7a0e\u6765\u652f\u6301\u5168\u56fd\u7684\u516c\u8def\u548c\u516c\u5171\u4ea4\u901a\u3002\u6839\u636e\u8be5\u63d0\u6848\uff0c\u653f\u5e9c\u5c06\u901a\u8fc7\u667a\u80fd\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\u3001\u5176\u4ed6\u8f66\u8f7d\u8bbe\u5907\u3001\u6c7d\u8f66\u5236\u9020\u5546\u3001\u4fdd\u9669\u516c\u53f8\u3001\u52a0\u6cb9\u7ad9\u6216\u5176\u4ed6\u65b9\u5f0f\u6536\u96c6\u6709\u5173\u9a7e\u9a76\u5458\u884c\u9a76\u91cc\u7a0b\u7684\u4fe1\u606f\u3002\u76ee\u524d\uff0c\u8be5\u8ba1\u5212\u53ea\u662f\u4e00\u9879\u6d4b\u8bd5\u5de5\u4f5c\u2014\u2014\u653f\u5e9c\u5c06\u62db\u52df\u9a7e\u9a76\u5546\u7528\u548c\u4e58\u7528\u8f66\u7684\u5fd7\u613f\u8005\u2014\u2014\u4f46\u8fd9\u4e2a\u60f3\u6cd5\u4ecd\u7136\u5f15\u53d1\u4e86\u5bf9\u653f\u5e9c\u8ddf\u8e2a\u4eba\u4eec\u79c1\u4eba\u6570\u636e\u7684\u62c5\u5fe7\u3002 Demand Progress \u7684\u653f\u7b56\u987e\u95ee\u8096\u6069\u00b7\u7ef4\u7279\u5361 (Sean Vitka) \u8868\u793a\uff1a\u201c\u770b\u5230\u4e00\u9879\u4f3c\u4e4e\u4f9d\u8d56\u653f\u5e9c\u5bf9\u8f66\u8f86\u4f4d\u7f6e\u7684\u5927\u89c4\u6a21\u76d1\u89c6\u624d\u80fd\u53d1\u6325\u4f5c\u7528\u7684\u8ba1\u5212\u7684\u8fdb\u5c55\u4ee4\u4eba\u62c5\u5fe7\u3002\u201d\u53c2\u8bae\u5458\u7f57\u6069\u00b7\u6000\u767b (Ron Wyden) \u662f\u4e00\u4f4d\u8457\u540d\u7684\u76d1\u89c6\u6279\u8bc4\u5bb6\uff0c\u4ed6\u559c\u6b22\u4e00\u79cd\u53ef\u4ee5\u5b9a\u671f\u8bfb\u53d6\u91cc\u7a0b\u4f46\u4e0d\u4f1a\u8ddf\u8e2a\u9a7e\u9a76\u5458\u4f4d\u7f6e\u7684\u7a0b\u5e8f\u3002 Wyden \u53d1\u8a00\u4eba Keith Chu \u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u8bf4\uff1a\u201c\u4ed6\u53cd\u5bf9\u6240\u6709\u5bfc\u81f4\u5bf9\u4e2a\u4eba\u8f66\u8f86\u8fdb\u884c\u6301\u7eed\u4f4d\u7f6e\u8ddf\u8e2a\u7684\u65b9\u6cd5\uff0c\u4f46\u652f\u6301\u6709\u521b\u610f\u7684\u98de\u884c\u5458\u5bfb\u627e\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u3002\u201d \u201c\u53c2\u8bae\u5458 Wyden \u8fd8\u8ba4\u4e3a\uff0c\u5728\u91c7\u7528\u6c38\u4e45\u6027 [\u8f66\u8f86\u884c\u9a76\u91cc\u7a0b\uff0c\u6216 VMT\uff0c\u63d0\u6848] \u4e4b\u524d\uff0c\u6709\u5fc5\u8981\u5bf9\u9690\u79c1\u95ee\u9898\u8fdb\u884c\u66f4\u591a\u7814\u7a76\u548c\u76d1\u7763\u3002\u201d\u8be5\u6cd5\u6848\u5c06\u8bbe\u7acb\u4e00\u4e2a\u54a8\u8be2\u59d4\u5458\u4f1a\u6765\u6307\u5bfc\u8be5\u8ba1\u5212\uff0c\u5176\u4e2d\u5305\u62ec\u4ee3\u8868\u5dde\u4ea4\u901a\u90e8\u95e8\u548c\u5361\u8f66\u8fd0\u8f93\u884c\u4e1a\u7684\u5b98\u5458\u4ee5\u53ca\u6570\u636e\u5b89\u5168\u548c\u6d88\u8d39\u8005\u9690\u79c1\u4e13\u5bb6\u3002\u968f\u7740\u4e3a\u671f\u56db\u5e74\u7684\u8bd5\u70b9\u8ba1\u5212\u7684\u8fdb\u884c\uff0c\u4ea4\u901a\u548c\u8d22\u653f\u90e8\u8fd8\u5fc5\u987b\u8ba9\u56fd\u4f1a\u4e86\u89e3\u4ed6\u4eec\u5982\u4f55\u7ef4\u62a4\u5fd7\u613f\u8005\u7684\u9690\u79c1\u4ee5\u53ca\u6bcf\u82f1\u91cc\u6536\u8d39\u7684\u60f3\u6cd5\u5982\u4f55\u5f71\u54cd\u4f4e\u6536\u5165\u53f8\u673a\u3002\u4e0d\u8fc7\uff0c\u7ef4\u7279\u5361\u8868\u793a\uff0c\u8fd9\u4e2a\u6982\u5ff5\u53ef\u80fd\u4f1a\u4f7f\u7f8e\u56fd\u4eba\u7684\u79c1\u4eba\u6570\u636e\u9762\u4e34\u98ce\u9669\u3002 \u201c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u653f\u5e9c\u65e0\u6cd5\u4fdd\u8bc1\u8fd9\u6837\u7684\u6570\u636e\u5b89\u5168\uff0c\u8fd9\u4e5f\u662f\u653f\u5e9c\u7ef4\u62a4\u4e00\u4e2a\u5e9e\u5927\u7684\u7f8e\u56fd\u6c11\u4f17\u65c5\u6e38\u4fe1\u606f\u6570\u636e\u5e93\u662f\u4e2a\u574f\u4e3b\u610f\u7684\u53e6\u4e00\u4e2a\u539f\u56e0\u3002\u201d\n\u4e00\u6bb5\u65f6\u95f4\u4ee5\u6765\uff0c\u653f\u5e9c\u4e00\u76f4\u5728\u5173\u6ce8\u9a7e\u9a76\u8d39\uff0c\u4ee5\u5411\u516c\u8def\u4fe1\u6258\u57fa\u91d1\u63d0\u4f9b\u6240\u9700\u7684\u6536\u5165\u3002\u8be5\u8d26\u6237\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u7f3a\u4e4f\u6536\u5165\u6765\u652f\u6301\u8054\u90a6\u5728\u9ad8\u901f\u516c\u8def\u4e0a\u7684\u652f\u51fa\uff0c\u8feb\u4f7f\u8d22\u653f\u90e8\u4e00\u76f4\u4e0d\u5f97\u4e0d\u8f6c\u79fb\u8d44\u91d1\u3002\u5f62\u52bf\u5982\u6b64\u4e25\u5cfb\uff0c\u4ee5\u81f3\u4e8e\u56fd\u4f1a\u9884\u7b97\u529e\u516c\u5ba4 (CBO) \u9884\u8ba1\uff0c\u5982\u679c\u76ee\u524d\u7684\u71c3\u6cb9\u7a0e\u4ecd\u7136\u5b58\u5728\uff0c\u800c\u9ad8\u901f\u516c\u8def\u548c\u516c\u5171\u4ea4\u901a\u9879\u76ee\u7684\u8d44\u91d1\u968f\u7740\u901a\u8d27\u81a8\u80c0\u7387\u7684\u589e\u52a0\u800c\u589e\u52a0\uff0c\u90a3\u4e48\u8be5\u57fa\u91d1\u5728 2022 \u5e74\u81f3 2031 \u5e74\u4e4b\u95f4\u53ef\u80fd\u4f1a\u77ed\u7f3a\u8fd1 2000 \u4ebf\u7f8e\u5143\u3002 .\u4e3a\u4e86\u589e\u52a0\u6536\u5165\uff0cCBO \u5efa\u8bae\u4f7f\u7528 VMT \u6a21\u578b\u751a\u81f3\u7535\u52a8\u6c7d\u8f66\u63d0\u9ad8\u71c3\u6cb9\u7a0e\u6216\u5236\u5b9a\u65b0\u7a0e\uff0c\u4f46\u9274\u4e8e\u6570\u91cf\u5f88\u5c11\uff0c\u540e\u8005\u4e0d\u592a\u53ef\u80fd\u4ea7\u751f\u5f88\u591a\u94b1\u3002 Chu\u8fd8\u8868\u793a\uff0c\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u53f8\u673a\u5f00\u59cb\u4f7f\u7528\u7535\u52a8\u6c7d\u8f66\uff0cWyden\u4e0d\u60f3\u8ba9\u7535\u52a8\u6c7d\u8f66\u53d8\u5f97\u66f4\u52a0\u6602\u8d35\u3002\u636e\u62a5\u9053\uff0c\u5728\u5236\u5b9a\u57fa\u7840\u8bbe\u65bd\u6cd5\u6848\u4e4b\u524d\uff0cWyden \u62c5\u4efb\u4e3b\u5e2d\u7684\u53c2\u8bae\u9662\u8d22\u653f\u59d4\u5458\u4f1a\u6b63\u5728\u8fa9\u8bba\u4ec5\u901a\u8fc7\u5361\u8f66\u8fd0\u8f93 VMT \u7a0e\u6765\u652f\u4ed8\u65b0\u9879\u76ee\u7684\u60f3\u6cd5\uff0c\u8fd9\u5f15\u8d77\u4e86\u884c\u4e1a\u4ee3\u8868\u7684\u5f3a\u70c8\u53cd\u5bf9\u3002\u53c2\u8bae\u5458\u5728\u7ecf\u8fc7\u957f\u65f6\u95f4\u7684\u8c08\u5224\u540e\u4e8e 8 \u6708 1 \u65e5\u63d0\u51fa\u7684\u8be5\u6cd5\u6848\u8fd8\u63d0\u4f9b\u4e86\u5176\u4ed6\u5c1a\u672a\u88ab\u5173\u6ce8\u7684\u63d0\u6848\u3002\u5b83\u5c06\u7279\u522b\u7981\u6b62\u5728\u6240\u6709 Amtrak \u5217\u8f66\u4e0a\u4f7f\u7528\u7535\u5b50\u70df\u3002\u8be5\u6761\u6b3e\u662f\u5728\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u4f17\u8bae\u9662\u548c\u53c2\u8bae\u9662\u4ea4\u901a\u59d4\u5458\u4f1a\u901a\u8fc7\u7684\u4e00\u9879\u6cd5\u6848\u4e4b\u540e\u505a\u51fa\u7684\uff0c\u8be5\u6cd5\u6848\u5c06\u628a\u7f8e\u94c1\u7684\u7981\u70df\u653f\u7b56\u7eb3\u5165\u8054\u90a6\u6cd5\u5f8b\u3002\u8be5\u7acb\u6cd5\u7531\u4ee3\u8868\u534e\u76db\u987f\u7279\u533a\u7684\u6c11\u4e3b\u515a\u4eba Del. Eleanor Holmes \u548c\u7279\u62c9\u534e\u5dde\u7684\u6c11\u4e3b\u515a\u53c2\u8bae\u5458 Tom Carper \u63d0\u51fa\u3002\u8fd9\u4e2a\u6545\u4e8b\u5df2\u7ecf\u66f4\u65b0\uff0c\u4ee5\u6f84\u6e05\u53c2\u8bae\u5458\u7f57\u6069\u6000\u767b\u5728\u91cc\u7a0b\u8ddf\u8e2a\u8ba1\u5212\u4e0a\u7684\u7acb\u573a\u3002\u7b49\u5f85\uff01\u5728\u60a8\u5f00\u59cb\u65b0\u7684\u4e00\u5929\u4e4b\u524d\uff0c\u95ee\u95ee\u81ea\u5df1\uff1a\u5982\u679c\u6ca1\u6709 The Intercept\uff0c\u60a8\u521a\u521a\u9605\u8bfb\u7684\u6545\u4e8b\u7531\u5176\u4ed6\u65b0\u95fb\u5a92\u4f53\u5236\u4f5c\u7684\u53ef\u80fd\u6027\u6709\u591a\u5927\uff1f\u8003\u8651\u4e00\u4e0b\u6ca1\u6709 The Intercept \u7684\u5a92\u4f53\u4e16\u754c\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u622a\u8ddd\u3002\u8c01\u4f1a\u8ba9\u515a\u5185\u7cbe\u82f1\u5bf9\u4ed6\u4eec\u5ba3\u79f0\u7684\u4ef7\u503c\u89c2\u8d1f\u8d23\uff1f\u5982\u679c\u6211\u4eec\u7684\u8bb0\u8005\u6ca1\u6709\u53ca\u65f6\u62a5\u9053\uff0c\u8fd8\u6709\u591a\u5c11\u79d8\u5bc6\u6218\u4e89\u3001\u8bef\u5224\u548c\u53cd\u4e4c\u6258\u90a6\u6280\u672f\u4f1a\u88ab\u9690\u85cf\u8d77\u6765\uff1f\u6211\u4eec\u6240\u505a\u7684\u62a5\u9053\u5bf9\u6c11\u4e3b\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u5b83\u5e76\u4e0d\u5bb9\u6613\u3001\u5ec9\u4ef7\u6216\u6709\u5229\u53ef\u56fe\u3002 The Intercept \u662f\u4e00\u5bb6\u72ec\u7acb\u7684\u975e\u8425\u5229\u65b0\u95fb\u5a92\u4f53\u3002\u6211\u4eec\u6ca1\u6709\u5e7f\u544a\uff0c\u6240\u4ee5\u6211\u4eec\u4f9d\u9760\u6211\u4eec\u7684\u4f1a\u5458\u2014\u201435,000 \u540d\uff0c\u800c\u4e14\u8fd8\u5728\u4e0d\u65ad\u589e\u52a0\u2014\u2014\u6765\u5e2e\u52a9\u6211\u4eec\u5bf9\u6709\u6743\u52bf\u7684\u4eba\u8d1f\u8d23\u3002\u52a0\u5165\u5f88\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u82b1\u5f88\u591a\u94b1\uff1a\u60a8\u53ea\u9700\u6bcf\u6708 3 \u7f8e\u5143\u6216 5 \u7f8e\u5143\u5373\u53ef\u6210\u4e3a\u6c38\u4e45\u4f1a\u5458\u3002\u8fd9\u5c31\u662f\u652f\u6301\u60a8\u6240\u4f9d\u8d56\u7684\u65b0\u95fb\u6240\u9700\u8981\u7684\u5168\u90e8\u5185\u5bb9\u3002\u6210\u4e3a\u4f1a\u5458", "note_en": "The Senate\u2019s $1.2 trillion bipartisan infrastructure bill proposes a national test program that would allow the government to collect drivers\u2019 data in order to charge them per-mile travel fees. The new revenue would help finance the Highway Trust Fund, which currently depends mostly on fuel taxes to support roads and mass transit across the country.\n Under the proposal, the government would collect information about the miles that drivers travel from smartphone apps, another on-board device, automakers, insurance companies, gas stations, or other means. For now, the initiative would only be a test effort\u00a0\u2014\u00a0the government would solicit volunteers who drive commercial and passenger vehicles \u2014 but the idea still raises concerns about the government tracking people\u2019s private data.\n  \u201cIt\u2019s concerning to see the advancement of a plan that appears to depend on the government\u2019s mass surveillance of vehicles\u2019 location simply to function,\u201d said Sean Vitka, policy counsel at Demand Progress.\n Sen. Ron Wyden, D-Ore., a well-known critic of surveillance, favors\u00a0a type of program that may periodically read mileage but wouldn\u2019t track drivers\u2019 locations.\n \u201cHe is opposed to all approaches that lead to the persistent location tracking of personally owned vehicles, but supports creative pilots to find other solutions,\u201d Wyden spokesperson Keith Chu said in an email. \u201cSenator Wyden also believes more study and oversight of privacy issues is necessary before a permanent [vehicle miles traveled, or VMT, proposal] is adopted.\u201d\n The bill would establish an advisory board to guide the program that would include officials representing state transportation departments and the trucking industry as well as data security and consumer privacy experts. As the four-year pilot initiative goes on, the Transportation and Treasury departments would also have to keep Congress informed of how they maintain volunteers\u2019 privacy and how the per-mile fee idea could affect low-income drivers.\n Still, Vitka said the concept could put Americans\u2019 private data at risk. \u201cWe already know the government is unable to keep data like this secure, which is another reason why the government maintaining a giant database of travel information about people in the United States is a bad idea.\u201d\n The government has had its eyes for a while now on a driving fee to provide needed revenue to the Highway Trust Fund. The account has long lacked revenue to support federal spending on highways, driving the Treasury Department to consistently have to transfer money. The situation is so dire that the Congressional Budget Office, or CBO, has projected that the fund  could be short nearly $200 billion between 2022 and 2031 if current fuel taxes remain in place while funding for highway and mass transit projects increases with the rate of inflation.\n To increase revenues, the CBO suggested raising fuel taxes or enacting new taxes using the VMT model or even on electric vehicles, though the latter wouldn\u2019t be likely to generate much money given how few there are. Chu also said that Wyden doesn\u2019t want to make electric vehicles more expensive as more drivers begin to use them.\n Leading up to the infrastructure bill, the Senate Finance Committee, which Wyden chairs, was reportedly debating the idea of a\u00a0 trucking-only VMT tax to pay for new projects, prompting fierce opposition from industry representatives.\n The bill, which senators introduced August 1 after long negotiations, also offers other proposals that have flown under the radar. It would specifically ban using e-cigarettes on all Amtrak trains.\n That provision follows the passage earlier this year in the House and Senate transportation committees of a bill that would enshrine Amtrak\u2019s nonsmoking policy in federal law. The legislation was introduced by\u00a0Del.\u00a0Eleanor Holmes, a Democrat who represents Washington, D.C., and Democratic Sen. Tom Carper of Delaware.\n  This story has been updated to clarify Sen. Ron Wyden\u2019s position on mileage-tracking programs.\n Wait! Before you go  on about your day, ask yourself: How likely is it that the story you just read would have been produced by a different news outlet if The Intercept hadn\u2019t done it?Consider what the world of media would look like without The Intercept. Who would hold party elites accountable to the values they proclaim to have? How many covert wars, miscarriages of justice, and dystopian technologies would remain hidden if our reporters weren\u2019t on the beat?The kind of reporting we do is essential to democracy, but it is not easy, cheap, or profitable. The Intercept is an independent nonprofit news outlet. We don\u2019t have ads, so we depend on our members \u2014 35,000 and counting \u2014 to help us hold the powerful to account. Joining is simple and doesn\u2019t need to cost a lot: You can become a sustaining member for as little as $3 or $5 a month. That\u2019s all it takes to support the journalism you rely on.  Become\u00a0a\u00a0Member", "posttime": "2021-08-06 12:07:43", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6cd5\u6848,bill,\u653f\u5e9c", "title": "\u57fa\u7840\u8bbe\u65bd\u6cd5\u6848\u53ef\u4ee5\u4f7f\u653f\u5e9c\u80fd\u591f\u8ddf\u8e2a\u53f8\u673a\u7684\u65c5\u884c\u6570\u636e", "title_en": "Infrastructure Bill Could Enable Government To Track Drivers' Travel Data", "transed": 1, "url": "https://theintercept.com/2021/08/05/infrastructure-bill-travel-data-cars-privacy/", "via": "", "real_tags": ["\u6cd5\u6848", "bill", "\u653f\u5e9c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071712, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7d PDF \u6458\u8981\uff1a\u7ed9\u5b9a\u4e00\u5f20\u6905\u5b50\u7684\u56fe\u7247\uff0c\u6211\u4eec\u80fd\u5426\u63d0\u53d6\u6905\u5b50\u7684 3D \u5f62\u72b6\uff0c\u4e3a\u5176\u5408\u7406\u7684\u5173\u8282\u548c\u52a8\u4f5c\u5236\u4f5c\u52a8\u753b\uff0c\u5e76\u5728\u5176\u539f\u59cb\u56fe\u50cf\u7a7a\u95f4\u4e2d\u8fdb\u884c\u539f\u4f4d\u6e32\u67d3\uff1f\u4e0a\u8ff0\u95ee\u9898\u4fc3\u4f7f\u6211\u4eec\u8bbe\u8ba1\u4e00\u79cd\u81ea\u52a8\u5316\u65b9\u6cd5\u6765\u63d0\u53d6\u548c\u64cd\u4f5c\u5355\u4e2a\u56fe\u50cf\u4e2d\u7684\u94f0\u63a5\u5bf9\u8c61\u3002\u4e0e\u4e4b\u524d\u5728\u5bf9\u8c61\u64cd\u4f5c\u65b9\u9762\u7684\u5de5\u4f5c\u76f8\u6bd4\uff0c\u6211\u4eec\u7684\u5de5\u4f5c\u8d85\u8d8a\u4e86\u4e8c\u7ef4\u64cd\u4f5c\u5e76\u4e13\u6ce8\u4e8e\u53ef\u94f0\u63a5\u5bf9\u8c61\uff0c\u4ece\u800c\u4e3a\u53ef\u80fd\u7684\u5bf9\u8c61\u53d8\u5f62\u5f15\u5165\u4e86\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002\u6211\u4eec\u65b9\u6cd5\u7684\u6d41\u7a0b\u9996\u5148\u4ece\u8f93\u5165\u56fe\u50cf\u91cd\u5efa\u548c\u7ec6\u5316\u611f\u5174\u8da3\u5bf9\u8c61\u7684 3D \u7f51\u683c\u8868\u793a\uff1b\u5229\u7528\u8bed\u4e49\u90e8\u5206\u5206\u5272\u4fe1\u606f\u9884\u6d4b\u5176\u63a7\u5236\u5173\u8282\uff1b\u83b7\u5f97\u7684\u5bf9\u8c61 3-D \u7f51\u683c\u7136\u540e\u901a\u8fc7\u975e\u521a\u6027\u53d8\u5f62\u8fdb\u884c\u52a8\u753b\u5904\u7406\uff0c\u5e76\u6e32\u67d3\u4ee5\u5728\u5176\u539f\u59cb\u56fe\u50cf\u7a7a\u95f4\u4e2d\u6267\u884c\u539f\u4f4d\u8fd0\u52a8\u3002\u5b9a\u91cf\u8bc4\u4f30\u662f\u5bf9\u5355\u4e2a\u56fe\u50cf\u7684 3-D \u91cd\u5efa\u8fdb\u884c\u7684\uff0c\u8fd9\u662f\u4e00\u9879\u4e0e\u6211\u4eec\u7684\u7ba1\u9053\u76f8\u5173\u7684\u65e2\u5b9a\u4efb\u52a1\uff0c\u6211\u4eec\u7684\u7ed3\u679c\u660e\u663e\u8d85\u8fc7\u4e86 SOTA \u7684\u7ed3\u679c\u3002\u5e7f\u6cdb\u7684\u89c6\u89c9\u7ed3\u679c\u4e5f\u8bc1\u660e\u4e86\u6211\u4eec\u65b9\u6cd5\u7684\u9002\u7528\u6027\u3002", "note_en": "Download PDF  Abstract: Given a picture of a chair, could we extract the 3-D shape of the chair,animate its plausible articulations and motions, and render in-situ in itsoriginal image space? The above question prompts us to devise an automatedapproach to extract and manipulate articulated objects in single images.Comparing with previous efforts on object manipulation, our work goes beyond2-D manipulation and focuses on articulable objects, thus introduces greaterflexibility for possible object deformations. The pipeline of our approachstarts by reconstructing and refining a 3-D mesh representation of the objectof interest from an input image; its control joints are predicted by exploitingthe semantic part segmentation information; the obtained object 3-D mesh isthen rigged \\&amp; animated by non-rigid deformation, and rendered to performin-situ motions in its original image space. Quantitative evaluations arecarried out on 3-D reconstruction from single images, an established task thatis related to our pipeline, where our results surpass those of the SOTAs by anoticeable margin. Extensive visual results also demonstrate the applicabilityof our approach.", "posttime": "2021-08-06 12:06:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bf9\u8c61,object", "title": "\u5bf9\u8c61\u5524\u9192\uff1a3D \u5bf9\u8c61\u91cd\u5efa\uff0c\u5355\u4e2a\u56fe\u50cf\u7684\u52a8\u753b", "title_en": "Object Wake-Up: 3-D Object Reconstruction, Animation from a Single Image", "transed": 1, "url": "https://arxiv.org/abs/2108.02708", "via": "", "real_tags": ["\u5bf9\u8c61", "object"]}, {"category": "", "categoryclass": "", "imagename": "da41a066c3fe38d8c437575664373ff9.jpg", "infoid": 1071710, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5468\u524d\uff0c\u57c3\u5fb7\u52a0\u00b7\u5fb7\u6c83\u65af\u57fa\u8d70\u8fdb\u9a6c\u8428\u8bf8\u585e\u5dde\u8428\u9ed8\u7ef4\u5c14\u7684\u4e00\u5bb6 Stop &amp; Shop \u6742\u8d27\u5e97\uff0c\u5c31\u50cf\u8fdb\u5165\u8c0b\u6740\u73b0\u573a\u7684\u4fa6\u63a2\u3002\u4ed6\u8d70\u8fdb\u9ea6\u7247\u8fc7\u9053\uff0c\u5e0c\u671b\u5728\u90a3\u91cc\u627e\u5230\u786e\u51ff\u7684\u8bc1\u636e\u3002\u4ed6\u626b\u89c6\u4e86\u8d27\u67b6\u3002\u54e6\u4e0d\uff0c\u4ed6\u60f3\u3002\u4ed6\u6765\u5f97\u592a\u665a\u4e86\u3002\u8fd9\u5bb6\u5546\u5e97\u5df2\u7ecf\u7528\u65b0\u7684\u66ff\u6362\u4e86\u65e7\u7684 General Mills \u9ea6\u7247\u76d2\u2014\u2014\u6bd4\u5982 Cheerios \u548c Cocoa Puffs\u3002\u5c31\u597d\u50cf\u5acc\u7591\u4eba\u7684\u6307\u7eb9\u88ab\u64e6\u5e72\u51c0\u4e86\u4e00\u6837\u3002\u7136\u540e\u5fb7\u6c83\u65af\u57fa\u671d\u5546\u5e97\u540e\u9762\u8d70\u53bb\u3002\u679c\u7136\uff0c\u4e00\u4e2a\u8fc7\u9053\u7684\u5c3d\u5934\u5806\u6ee1\u4e86\u65e7\u76d2\u5b50\u7684\u53ef\u53ef\u6ce1\u8299\u548c\u82f9\u679c\u8089\u6842\u9ea6\u7247\u3002\u4ed6\u6293\u8d77\u4e00\u76d2\u65e7\u7684\u53ef\u53ef\u6ce1\u8299\uff0c\u548c\u65b0\u7684\u5e76\u6392\u653e\u7f6e\u3002\u554a\u54c8\uff01\u4ed6\u6536\u5230\u7684\u5c0f\u8d39\u662f\u5bf9\u7684\u3002\u901a\u7528\u78e8\u574a\u5df2\u5c06\u5176\u201c\u5bb6\u5ead\u88c5\u201d\u76d2\u5b50\u7684\u5bb9\u91cf\u4ece 19.3 \u76ce\u53f8\u51cf\u5c11\u5230 18.1 \u76ce\u53f8\u3002 Dworsky \u8d70\u5230\u6536\u94f6\u53f0\uff0c\u4e24\u4e2a\u76d2\u5b50\u2014\u2014\u5598\u6c14\uff01 \u2014\u2014\u4ef7\u683c\u4e00\u6837\u3002\u8fd9\u662f\u4e00\u4e2a\u5f7b\u5934\u5f7b\u5c3e\u7684\u6848\u4f8b\uff1aGeneral Mills \u662f\u53e6\u4e00\u4e2a\u201c\u6536\u7f29\u901a\u80c0\u201d\u7684\u8087\u4e8b\u8005\u3002 Dworsky \u662f\u524d\u9a6c\u8428\u8bf8\u585e\u5dde\u52a9\u7406\u68c0\u5bdf\u957f\u548c\u957f\u671f\u7684\u6d88\u8d39\u8005\u6743\u76ca\u5021\u5bfc\u8005\u3002\u4ed6\u82b1\u4e86\u51e0\u5341\u5e74\u65f6\u95f4\u5728\u4ed6\u7684\u7f51\u7ad9 Mouseprint \u4e0a\u8ddf\u8e2a\u516c\u53f8\u7f29\u51cf\u4ea7\u54c1\u7684\u5b9e\u4f8b\u3002\u4ed6\u7528\u539f\u6765\u7684\u540d\u5b57\uff0c\u7f29\u5c0f\u89c4\u6a21\u6765\u6307\u4ee3\u5b83\uff0c\u4f46\u7ecf\u6d4e\u5b66\u5bb6\u76ae\u5e15\u00b7\u9a6c\u5c14\u59c6\u683c\u4f26\u5927\u7ea6\u5341\u5e74\u524d\u5c06\u5b83\u91cd\u65b0\u547d\u540d\u4e3a\u201c\u6536\u7f29\u901a\u80c0\u201d\uff0c\u8fd9\u4e2a\u8bcd\u88ab\u4fdd\u7559\u4e86\u4e0b\u6765\u3002\u7f29\u5c0f\u89c4\u6a21\u548c\u6536\u7f29\u81a8\u80c0\u90fd\u662f\u6307\u540c\u4e00\u4ef6\u4e8b\uff1a\u516c\u53f8\u51cf\u5c11\u4ea7\u54c1\u7684\u5c3a\u5bf8\u6216\u6570\u91cf\uff0c\u540c\u65f6\u6536\u53d6\u76f8\u540c\u751a\u81f3\u66f4\u9ad8\u7684\u4ef7\u683c\u3002 \u201c\u7f29\u5c0f\u89c4\u6a21\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u5077\u5077\u6478\u6478\u7684\u4ef7\u683c\u4e0a\u6da8\uff0c\u201d\u5fb7\u6c83\u65af\u57fa\u8bf4\u3002 \u201c\u6d88\u8d39\u8005\u5f80\u5f80\u5bf9\u4ef7\u683c\u5f88\u654f\u611f\u3002\u4f46\u4ed6\u4eec\u6ca1\u6709\u51c0\u91cd\u610f\u8bc6\u3002\u4ed6\u4eec\u53ef\u4ee5\u7acb\u5373\u5224\u65ad\u4ed6\u4eec\u662f\u5426\u4e60\u60ef\u4e3a\u4e00\u7bb1\u6a59\u6c41\u652f\u4ed8 2.99 \u7f8e\u5143\uff0c\u800c\u8fd9\u4e00\u4ef7\u683c\u9ad8\u8fbe 3.19 \u7f8e\u5143\u3002\u4f46\u5982\u679c\u6a59\u6c41\u5bb9\u5668\u6ca1\u6709\u4e86\u4ece 64 \u76ce\u53f8\u5230 59 \u76ce\u53f8\uff0c\u4ed6\u4eec\u53ef\u80fd\u4e0d\u4f1a\u6ce8\u610f\u5230\u3002\u201d [\u7f16\u8005\u6ce8\uff1a\u8fd9\u662fPlanet Money \u65f6\u4e8b\u901a\u8baf\u7684\u6458\u5f55\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6ce8\u518c]\n\u5982\u679c\u6d88\u8d39\u8005\u662f\u7ecf\u5178\u7ecf\u6d4e\u7406\u8bba\u4e2d\u63cf\u8ff0\u7684\u7406\u6027\u751f\u7269\uff0c\u4ed6\u4eec\u4f1a\u6ce8\u610f\u5230\u6536\u7f29\u901a\u80c0\u3002\u4ed6\u4eec\u4f1a\u5bc6\u5207\u5173\u6ce8\u6bcf\u4e2a\u53ef\u53ef\u6ce1\u8299\u7684\u4ef7\u683c\uff0c\u800c\u4e0d\u4f1a\u8ff7\u604b\u516c\u53f8\u5982\u4f55\u5305\u88c5\u8fd9\u4e9b\u53ef\u53ef\u6ce1\u8299\u7684\u5671\u5934\u3002 John T. Gourville \u548c Jonathan J. Koehler \u7684\u4e00\u9879\u7814\u7a76\u5206\u6790\u4e86\u8c37\u7269\u548c\u5176\u4ed6\u884c\u4e1a\u5e02\u573a\u7684\u6570\u636e\uff0c\u53d1\u73b0\u6d88\u8d39\u8005\u6bd4\u7ecf\u5178\u7406\u8bba\u9884\u6d4b\u7684\u66f4\u5bb9\u6613\u4e0a\u5f53\u53d7\u9a97\u3002\u4ed6\u4eec\u5bf9\u4ef7\u683c\u53d8\u5316\u6bd4\u5bf9\u6570\u91cf\u53d8\u5316\u66f4\u654f\u611f\u3002\u5f53\u7136\uff0c\u516c\u53f8\u591a\u5e74\u6765\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e00\u70b9\u3002\u56de\u5230\u8fc7\u53bb\uff0c\u5fb7\u6c83\u65af\u57fa\u8bf4\uff0c\u4ed6\u8bb0\u5f97\u4e70\u8fc7\u66f4\u5927\u7684\u7cd6\u679c\u68d2\u548c\u66f4\u5927\u7684\u536b\u751f\u7eb8\u5377\u3002\u4ed6\u8bf4\uff0c\u6700\u521d\u7684 Charmin \u536b\u751f\u7eb8\u5377\u6709 650 \u5f20\u3002\u73b0\u5728\u4f60\u5fc5\u987b\u4e3a\u201cMega Rolls\u201d\u548c\u201cSuper Mega Rolls\u201d\u652f\u4ed8\u989d\u5916\u8d39\u7528\u2014\u2014\u5373\u4f7f\u662f\u90a3\u4e9b\u6bd4\u539f\u6765\u5c11\u5f97\u591a\u7684\u5e8a\u5355\u3002\u96ea\u4e0a\u52a0\u971c\u7684\u662f\uff0cCharmin \u6700\u8fd1\u7f29\u5c0f\u4e86\u536b\u751f\u5dfe\u7684\u5c3a\u5bf8\u3002\u8c08\u8bba\u4e00\u4e2a\u7cdf\u7cd5\u7684\u4ea4\u6613\u3002\u6536\u7f29\u901a\u80c0\u6216\u7f29\u5c0f\u89c4\u6a21\u53ef\u80fd\u4e0e\u5927\u4f17\u6d88\u8d39\u4e3b\u4e49\u4e00\u6837\u53e4\u8001\u3002\u591a\u5e74\u6765\uff0cDworsky \u8bb0\u5f55\u4e86\u4ece Doritos \u5230\u5a74\u513f\u6d17\u53d1\u6c34\u518d\u5230\u7267\u573a\u6577\u6599\u7684\u6240\u6709\u4e1c\u897f\u7684\u7f29\u5c0f\u5c3a\u5bf8\u3002 \u201c\u5f53\u5236\u9020\u5546\u9762\u4e34\u67d0\u79cd\u5b9a\u4ef7\u538b\u529b\u65f6\uff0c\u5f80\u5f80\u4f1a\u53d1\u751f\u88c1\u5458\uff0c\u201d\u4ed6\u8bf4\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6c7d\u6cb9\u6216\u8c37\u7269\u7684\u4ef7\u683c\u4e0a\u6da8\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5f53\u653f\u5e9c\u51e0\u4e2a\u6708\u524d\u5f00\u59cb\u62a5\u544a\u901a\u80c0\u98d9\u5347\u65f6\uff0c\u5fb7\u6c83\u65af\u57fa\u6b63\u5728\u5bfb\u627e\u5176\u72e1\u733e\u3001\u840e\u7f29\u7684\u8868\u4eb2\u3002\u6211\u4eec\u73b0\u5728\u770b\u5230\u4e86\u4e00\u6ce2\u6536\u7f29\u81a8\u80c0\uff0c\u4ece Tillamook \u51b0\u6dc7\u6dcb\u5230 Royal Canin \u732b\u7cae\u3002 Dworksy \u8bf4\uff1a\u201c\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u770b\u5230\u901a\u8d27\u81a8\u80c0\u7387\u4e0a\u5347\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u8ba4\u4e3a\u4f60\u4f1a\u770b\u5230\u66f4\u591a\u7269\u54c1\u88ab\u7f29\u5c0f\u5c3a\u5bf8\u3002\u201d \u201c\u800c\u4e14\u4e5f\u8bb8\u8fd9\u4f1a\u662f\u53cc\u91cd\u6253\u51fb\uff1a\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e9b\u4ea7\u54c1\u7684\u4ef7\u683c\u4e0a\u6da8\uff0c\u540c\u65f6\u4f60\u7684\u5305\u88c5\u5b9e\u9645\u4e0a\u5374\u51cf\u5c11\u4e86\u3002\u201d\u4e54\u7eb3\u68ee\u00b7\u83f2\u7b56 (Jonathan Fitzer) \u662f\u901a\u7528\u78e8\u574a (General Mills) \u751f\u4ea7\u7684\u53e6\u4e00\u79cd\u8c37\u7269 Cinnamon Toast Crunch \u7684\u5fe0\u5b9e\u7c89\u4e1d\u3002\u51e0\u5468\u524d\uff0c\u4ed6\u53bb\u4e86\u4f5b\u7f57\u91cc\u8fbe\u5dde\u5766\u5e15\u5e02\u7684\u4e00\u5bb6\u5f53\u5730\u6742\u8d27\u5e97\uff0c\u91cd\u65b0\u632f\u4f5c\u8d77\u6765\u3002\u4f46\u662f\u8d27\u67b6\u4e0a\u6709\u4e24\u4e2a\u4e0d\u540c\u7248\u672c\u7684\u4ea7\u54c1\u3002\u65e7\u76d2\u5b50\u548c\u5f80\u5e38\u4e00\u6837\u3002\u7136\u800c\uff0c\u65b0\u7684\u76d2\u5b50\u66f4\u9ad8\u66f4\u7626\u3002\u5b83\u88c5\u9970\u7740\u4e00\u5f20\u56fe\u7247\u5e7f\u544a Space Jam\uff0c\u4e00\u90e8\u7531\u52d2\u5e03\u6717\u8a79\u59c6\u65af\u4e3b\u6f14\u7684\u65b0\u7535\u5f71\u91cd\u542f\u3002 Fitzer \u5047\u8bbe\u66f4\u9ad8\u7684\u9ea6\u7247\u76d2\u610f\u5473\u7740\u66f4\u591a\u7684\u9ea6\u7247\uff0c\u8fd9\u53ef\u80fd\u662f\u53ef\u4ee5\u539f\u8c05\u7684\u3002 \u201c\u7136\u540e\u6211\u770b\u7740\u5e95\u90e8\uff0c\u6211\u770b\u5230\u6570\u5b57\u5df2\u7ecf\u5173\u95ed\uff0c\u6211\u60f3\uff0c&#39;\u54e6\uff0c\u73b0\u5728\u6765\u5427\u3002\u6211\u5728\u8fd9\u91cc\u88ab\u626f\u6389\u4e86\uff0c&#39;\u201d\u4ed6\u8bf4\u3002 Fitzer \u5173\u6ce8\u4e86 Reddit \u4e0a\u7684\u201cr/shrinkflation\u201d\u5e16\u5b50\uff0c\u4ed6\u5728\u7f51\u7ad9\u4e0a\u4e0a\u4f20\u4e86\u4e24\u4e2a\u76d2\u5b50\u7684\u56fe\u7247\u3002 \u201c\u8fd9\u662f\u75af\u72c2\u7684\u6536\u7f29\uff0c\u201d\u4e00\u4f4d\u8bc4\u8bba\u8005\u8bf4\u3002\u53e6\u4e00\u4e2a\u4eba\u5bf9 Cinnamon Toast Crunch \u7684\u5236\u9020\u5546\u8bf4\uff1a\u201c\u4f60\u4e3a\u4ec0\u4e48\u8981\u9634\u6697\uff0c\u54df\uff1f\u201d\u4e0a\u5468\uff0cGeneral Mills \u5ba3\u5e03\u539f\u6599\u3001\u5305\u88c5\u3001\u52b3\u52a8\u529b\u548c\u5361\u8f66\u8fd0\u8f93\u6210\u672c\u4e0d\u65ad\u4e0a\u5347\uff0c\u8feb\u4f7f\u5176\u8c03\u6574\u4e1a\u52a1\u3002\u5b83\u8868\u793a\u6b63\u5728\u91c7\u53d6\u201c\u5b9a\u4ef7\u884c\u52a8\u201d\u548c\u5176\u4ed6\u63aa\u65bd\u6765\u5e94\u5bf9\u8fd9\u79cd\u901a\u8d27\u81a8\u80c0\u3002\u6211\u4eec\u4e0e General Mills \u53d6\u5f97\u4e86\u8054\u7cfb\uff0c\u4e86\u89e3\u5b83\u6b63\u5728\u7f29\u51cf\u8c37\u7269\u89c4\u6a21\u4f5c\u4e3a\u5176\u6218\u7565\u7684\u4e00\u90e8\u5206\u3002\n\u201cGeneral Mills \u4e00\u76f4\u81f4\u529b\u4e8e\u5728\u6211\u4eec\u7684\u8c37\u7269\u4ea7\u54c1\u4e2d\u521b\u9020\u4e00\u81f4\u6027\u548c\u6807\u51c6\u5316\uff0c\u8ba9\u8d2d\u7269\u8005\u66f4\u5bb9\u6613\u533a\u5206\u8d27\u67b6\u4e0a\u7684\u5c3a\u5bf8\u3002\u5bf9\u4e8e\u5bfb\u6c42\u6bcf\u76ce\u53f8\u6700\u4f18\u60e0\u4ef7\u683c\u7684\u6d88\u8d39\u8005\u6765\u8bf4\uff0c\u6700\u5927\u7684\u4ef7\u503c\u901a\u5e38\u662f\u5728\u6211\u4eec\u66f4\u5927\u7684\u8c37\u7269\u76d2\u4e2d\uff0c\u201d\u901a\u7528\u78e8\u574a\u53d1\u8a00\u4eba Kelsey Roemhildt \u8bf4\u3002 \u201c\u8fd9\u4e00\u53d8\u5316\u8fd8\u5141\u8bb8\u66f4\u9ad8\u6548\u7684\u5361\u8f66\u88c5\u8f7d\uff0c\u4ece\u800c\u51cf\u5c11\u8def\u4e0a\u7684\u5361\u8f66\u548c\u4f7f\u7528\u7684\u52a0\u4ed1\u71c3\u6599\uff0c\u8fd9\u5bf9\u4e8e\u51cf\u5c11\u5168\u7403\u6392\u653e\u4ee5\u53ca\u62b5\u6d88\u4e0e\u901a\u8d27\u81a8\u80c0\u76f8\u5173\u7684\u6210\u672c\u589e\u52a0\u90fd\u5f88\u91cd\u8981\u3002\u201d\u901a\u7528\u78e8\u574a\u5bf9\u5176\u6536\u7f29\u901a\u80c0\u7684\u91cd\u65b0\u5b9a\u4e49\u4f3c\u4e4e\u662f\u7f8e\u56fd\u4f01\u4e1a\u754c\u7684\u5178\u578b\u3002\u516c\u53f8\u901a\u5e38\u5c06\u7f29\u5c0f\u89c4\u6a21\u4f5c\u4e3a\u6539\u5584\u73af\u5883\u3001\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u66f4\u591a\u9009\u62e9\u6216\u63d0\u9ad8\u4ea7\u54c1\u8d28\u91cf\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u4f8b\u5982\uff0c\u5f53 Charmin \u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u5728 WBUR \u9762\u5bf9\u8bb0\u8005\u5173\u4e8e\u7f29\u5c0f\u4ed6\u4eec\u7684\u5395\u7eb8\u65b9\u683c\u7684\u5c3a\u5bf8\u65f6\uff0c\u5979\u8868\u793a\u8fd9\u662f\u201c\u521b\u65b0\u201d\u7684\u7ed3\u679c\uff0c\u8ba9\u6d88\u8d39\u8005\u57fa\u672c\u4e0a\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u64e6\u5c41\u80a1\u3002\u5982\u679c\u8fd9\u79cd\u60c5\u51b5\u6301\u7eed\u4e0b\u53bb\uff0c\u4e5f\u8bb8\u6709\u4e00\u5929\u6211\u4eec\u90fd\u4f1a\u751f\u6d3b\u5728\u5c0f\u4eba\u56fd\u7684\u53cd\u4e4c\u6258\u90a6\u4e2d\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u88ab\u8feb\u5403\u5fae\u578b\u7cd6\u679c\uff0c\u559d\u5c0f\u996e\u6599\uff0c\u5e76\u7528\u5c0f\u65b9\u683c\u7eb8\u64e6\u5c41\u80a1\u3002\u6216\u8005\uff0c\u4e5f\u8bb8\u6d88\u8d39\u8005\u4f1a\u5f00\u59cb\u6ce8\u610f\u5230\u5e76\u8868\u8fbe\u62c5\u5fe7\uff0c\u6d88\u8d39\u8005\u9700\u6c42\u7684\u529b\u91cf\u5c06\u8feb\u4f7f\u516c\u53f8\u503e\u542c\u5e76\u8c03\u6574\u5176\u4ea7\u54c1\u7684\u89c4\u6a21\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u4e3a\u53ef\u53ef\u6ce1\u8299\u7231\u597d\u8005\u7948\u7977\u3002\u60a8\u559c\u6b22\u8fd9\u4e2a\u65f6\u4e8b\u901a\u8baf\u7247\u6bb5\u5417\uff1f\u597d\u5427\uff0c\u5b83\u5728\u60a8\u7684\u6536\u4ef6\u7bb1\u4e2d\u770b\u8d77\u6765\u66f4\u597d\uff01\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u6ce8\u518c\u3002", "note_en": "A couple of weeks ago, Edgar Dworsky walked into a Stop &amp; Shop grocery store in Somerville, Mass., like a detective entering a murder scene.\n  He stepped into the cereal aisle, where he hoped to find the smoking gun. He scanned the shelves. Oh no, he thought. He was too late. The store had already replaced old General Mills cereal boxes \u2014 such as Cheerios and Cocoa Puffs \u2014 with newer ones. It was as though the suspect&#39;s fingerprints had been wiped clean.\n  Then Dworsky headed toward the back of the store. Sure enough, old boxes of Cocoa Puffs and Apple Cinnamon Cheerios were stacked at the end of one of the aisles. He grabbed an old box of Cocoa Puffs and put it side by side with the new one. Aha! The tip he had received was right on the money. General Mills had downsized the contents of its &#34;family size&#34; boxes from 19.3 ounces to 18.1 ounces.\n  Dworsky went to the checkout aisle, and both boxes \u2014 gasp! \u2014 were the same price. It was an open-and-shut case: General Mills is yet another perpetrator of &#34;shrinkflation.&#34;\n        Dworsky is a former Massachusetts assistant attorney general and longtime consumer advocate. He has spent decades tracking instances of companies shrinking products on his website  Mouseprint. He refers to it by its original name, downsizing, but economist Pippa Malmgren rechristened it &#34;shrinkflation&#34; about a decade ago, and the term stuck. Downsizing and shrinkflation both refer to the same thing: companies reducing the size or quantity of their products while charging the same price or even more.\n  &#34;Downsizing is really a sneaky price increase,&#34; Dworsky says. &#34;Consumers tend to be price conscious. But they&#39;re not net-weight conscious. They can tell instantly if they&#39;re used to paying $2.99 for a carton of orange juice and that goes up to $3.19. But if the orange juice container goes from 64 ounces to 59 ounces, they&#39;re probably not going to notice.&#34;\n  [Editor&#39;s note: This is an excerpt of  Planet Money  &#39;s newsletter. You can    sign up here  ]\n  If consumers were the rational creatures depicted in classic economic theory, they would notice shrinkflation. They would keep their eyes on the price per Cocoa Puff and not fall for gimmicks in how companies package those Cocoa Puffs. A  study by John T. Gourville and Jonathan J. Koehler analyzed data from the market for cereal and other sectors and found that consumers are much more gullible than classic theory predicts. They are more sensitive to changes in price than to changes in quantity. Companies, of course, have known this for years.\n      Back in the day, Dworsky says, he remembers buying bigger candy bars and bigger rolls of toilet paper. The original Charmin roll of toilet paper, he says, had  650 sheets. Now you have to pay extra for &#34;Mega Rolls&#34; and &#34;Super Mega Rolls&#34; \u2014 and even those have many fewer sheets than the original. To add insult to injury, Charmin recently  shrank the size of their toilet sheets. Talk about a crappy deal.\n  Shrinkflation, or downsizing, is probably as old as mass consumerism. Over the years, Dworsky has documented the downsizing of everything from Doritos to baby shampoo to ranch dressing. &#34;The downsizing tends to happen when manufacturers face some type of pricing pressure,&#34; he says. For example, if the price of gasoline or grain goes up.\n  That is why, when the government began reporting surges in inflation several months ago, Dworsky was on the lookout for its devious, shrinkifying cousin. We&#39;re now seeing a wave of shrinkflation, from  Tillamook ice cream to  Royal Canin cat food. &#34;As we&#39;re seeing inflation picking up now, that&#39;s why I think you&#39;re going to see more items being downsized,&#34; Dworksy says. &#34;And maybe it&#39;s going to be a double-whammy: We&#39;re going to see some products going up in price at the same time that you&#39;re actually getting less in the package.&#34;\n      Jonathan Fitzer is a big fan of Cinnamon Toast Crunch, another cereal made by General Mills. A couple of weeks ago, he went to a local grocery store in Tampa, Fla., to re-up. But on the shelf were two different versions of the product. The old box was the same as always. The new box, however, was taller and skinnier. And it was adorned with a picture advertising  Space Jam, a new movie reboot starring LeBron James. Fitzer might have been forgiven for assuming a taller cereal box meant more cereal. &#34;And then I looked at the bottom and I saw the numbers were off and I was like, &#39;oh, come on now. I&#39;m getting ripped off here,&#39;&#34; he says.\n  Fitzer follows the &#34; r/shrinkflation&#34; thread on Reddit, and he uploaded a picture of the two boxes on the site. &#34;That&#39;s crazy shrinkage,&#34;  said one commenter. Another had words for the makers of Cinnamon Toast Crunch: &#34;Why ya being shady, yo?&#34;\n    Last week,  General Mills announced the rising cost of ingredients, packaging, labor, and trucking was forcing it to revamp its business. It said that it was taking &#34;pricing actions&#34; and other steps to grapple with this inflation. We reached out to General Mills about reports that it&#39;s downsizing its cereals as part of its strategy.\n  &#34;General Mills has been working to create consistency and standardization across our cereal products, making it easier for shoppers to distinguish between sizes on shelf. For consumers seeking the best price per ounce, the most value is normally in our larger boxes of cereal,&#34; says Kelsey Roemhildt, a General Mills spokesperson. &#34;This change also allows more efficient truck loading leading to fewer trucks on the road and fewer gallons of fuel used, which is important in both reducing global emissions as well as offsetting increased costs associated with inflation.&#34;\n  General Mills&#39; reframing of its shrinkflation seems to be pretty typical of Corporate America. Companies often sell downsizing as a way to help the environment, offer consumers more choice, or improve the quality of their products. When a spokesperson for Charmin, for example, was confronted by  reporters at WBUR about shrinking the size of their toilet sheet squares, she suggested it was the result of &#34;innovations&#34; that allow consumers to, basically, wipe their butts more efficiently.\n  If this keeps up, maybe someday we&#39;ll all be living in a Lilliputian dystopia where we&#39;re forced to eat miniature candy bars, drink tiny drinks, and wipe our bottoms with teeny-tiny squares of paper. Or maybe consumers will start to notice and voice concern and the power of consumer demand will force companies to listen and right-size their products. Until then, our prayers are with the lovers of Cocoa Puffs.\n  Did you enjoy this newsletter segment? Well, it looks even better in your inbox! You can   sign up here .", "posttime": "2021-08-06 12:06:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6536\u7f29,shrinkflation,\u6d88\u8d39\u8005", "title": "\u5f53\u5fc3\u201c\u6536\u7f29\u901a\u80c0\u201d\uff0c\u901a\u8d27\u81a8\u80c0\u7684\u72e1\u733e\u8868\u4eb2", "title_en": "Beware of 'shrinkflation,' inflation's devious cousin", "transed": 1, "url": "https://www.npr.org/sections/money/2021/07/06/1012409112/beware-of-shrinkflation-inflations-devious-cousin", "via": "", "real_tags": ["\u6536\u7f29", "\u6d88\u8d39\u8005"]}, {"category": "", "categoryclass": "", "imagename": "365e4730cecab4d5447439fb841dc361.jpg", "infoid": 1071709, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e CNBC \u770b\u5230\u7684\u51fa\u751f\u8bc1\u660e\uff0c\u9677\u5165\u56f0\u5883\u7684 Theranos \u521b\u59cb\u4eba\u4f0a\u4e3d\u838e\u767d\u00b7\u970d\u59c6\u65af\uff08Elizabeth Holmes\uff09\u751f\u4e0b\u4e86\u4e00\u4e2a\u5a74\u513f\u3002\u798f\u5c14\u6469\u65af\u56e0\u5979\u5df2\u5012\u95ed\u7684\u7845\u8c37\u521d\u521b\u516c\u53f8\u800c\u9762\u4e34\u5341\u591a\u9879\u7535\u6c47\u6b3a\u8bc8\u91cd\u7f6a\u3002\u5979\u7684\u6000\u5b55\u63a8\u8fdf\u4e86\u5979\u7684\u5ba1\u5224\u5f00\u59cb\u3002 Theranos \u521b\u59cb\u4eba\u4f0a\u4e3d\u838e\u767d\u00b7\u970d\u59c6\u65af (Elizabeth Holmes) \u7684\u6000\u5b55\u63a8\u8fdf\u4e86\u5979\u5373\u5c06\u8fdb\u884c\u7684\u6b3a\u8bc8\u5ba1\u5224\u7684\u5f00\u59cb\uff0c\u5979\u751f\u4e0b\u4e86\u4e00\u4e2a\u5a74\u513f\u3002 CNBC \u5468\u56db\u83b7\u5f97\u4e86\u5411\u5723\u9a6c\u7279\u5965\u53bf\u8bb0\u5f55\u5458\u529e\u516c\u5ba4\u63d0\u4ea4\u7684\u8bb0\u5f55\uff0c\u663e\u793a\u798f\u5c14\u6469\u65af\u548c\u5979\u7684\u642d\u6863\u6bd4\u5229\u57c3\u6587\u65af\u4e8e 7 \u6708 10 \u65e5\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7ea2\u6749\u57ce\u7684\u7ea2\u6749\u533b\u9662\u751f\u4e86\u4e00\u4e2a\u5b69\u5b50\u3002\u798f\u5c14\u6469\u65af\u7684\u5176\u4e2d\u4e00\u540d\u5f8b\u5e08\u827e\u7c73\u00b7\u8428\u54c8\u91cc\u4e9a (Amy Saharia) \u62d2\u7edd\u5bf9\u8fd9\u4e00\u6d88\u606f\u53d1\u8868\u8bc4\u8bba\u3002\u5ba1\u5224\u539f\u5b9a\u4e8e 7 \u6708\u5f00\u59cb\uff0c\u4f46\u56e0\u6000\u5b55\u63a8\u8fdf\u5230 8 \u6708 31 \u65e5\u3002\u798f\u5c14\u6469\u65af\u9762\u4e34\u4e5d\u9879\u7535\u6c47\u6b3a\u8bc8\u7f6a\u540d\u548c\u4e24\u9879\u4e32\u8c0b\u7535\u6c47\u6b3a\u8bc8\u7f6a\u540d\u3002\u68c0\u5bdf\u5b98\u6307\u63a7\u798f\u5c14\u6469\u65af\u5c31\u5176\u516c\u53f8\u7684\u8840\u6db2\u68c0\u6d4b\u6280\u672f\u6b3a\u9a97\u4e86\u6295\u8d44\u8005\u3001\u60a3\u8005\u548c\u533b\u751f\u3002\u5979\u5df2\u4e0d\u8ba4\u7f6a\u3002 NBC \u65b0\u95fb\u6cd5\u5f8b\u5206\u6790\u5e08\u4e39\u5c3c\u00b7\u585e\u74e6\u6d1b\u65af (Danny Cevallos) \u8bf4\uff1a\u201c\u4f5c\u4e3a\u4e00\u540d\u65b0\u5988\u5988\uff0c\u5979\u53ea\u80fd\u5f97\u5230\u966a\u5ba1\u5458\u7684\u540c\u60c5\u3002\u201d \u201c\u5982\u679c\u88ab\u5b9a\u7f6a\uff0c\u5373\u4f7f\u5979\u7684\u91cf\u5211\u6307\u5357\u8981\u6c42\u76d1\u7981\uff0c\u5979\u7684\u5f8b\u5e08\u4e5f\u4f1a\u5c06\u5979\u7684\u6bcd\u6027\u7f6e\u4e8e\u6cd5\u5b98\u9762\u524d\u548c\u4e2d\u5fc3\u4f4d\u7f6e\u3002\u201d\u5728\u4e0a\u4e2a\u6708\u63a5\u53d7 CNBC \u91c7\u8bbf\u65f6\uff0c\u6253\u7834 Theranos \u4e11\u95fb\u7684\u524d\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u8bb0\u8005\u7ea6\u7ff0\u00b7\u5361\u96f7\u9c81 (John Carreyrou) \u8868\u793a\uff0c\u4ed6\u66fe\u4e0e\u4e0e\u6b64\u6848\u6709\u5173\u7684\u4eba\u4ea4\u8c08\u8fc7\uff0c\u6709\u4e9b\u4eba\u201c\u8ba4\u4e3a\u5979\u5728\u4e3a\u81ea\u5df1\u7684\u6000\u5b55\u8ba1\u65f6\uff0c\u4ee5\u4fbf\u5728\u5ba1\u5224\u671f\u95f4\u9732\u9762\u83b7\u5f97\u966a\u5ba1\u56e2\u7684\u540c\u60c5\u3002\u201d\n\u201c\u5982\u679c\u4f0a\u4e3d\u838e\u767d\u88ab\u5224\u6709\u7f6a\uff0c\u6848\u4ef6\u63d0\u4ea4\u6cd5\u5b98\u5ba3\u5224\uff0c\u5982\u679c\u4ed6\u628a\u5979\u9001\u8fdb\u76d1\u72f1\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u4ed6\u5c31\u4f1a\u5265\u593a\u5b69\u5b50\u7684\u6bcd\u4eb2\u591a\u5e74\uff0c\u201d\u5361\u96f7\u9c81\u8bf4\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u91cd\u5927\u7684\u51b3\u5b9a\u3002\u201d\u8fd9\u4e0d\u662f\u798f\u5c14\u6469\u65af\u5bb6\u65cf\u552f\u4e00\u7684\u5a74\u513f\u6d88\u606f\u3002\u6839\u636e\u8fd9\u5bf9\u592b\u5987\u7684\u5728\u7ebf\u767b\u8bb0\uff0c\u5979\u7684\u5144\u5f1f\u514b\u91cc\u65af\u8482\u5b89\uff08Christian\uff09\u548c\u4ed6\u7684\u59bb\u5b50\u4e5f\u5728 Theranos \u5de5\u4f5c\uff0c\u4ed6\u4eec\u5c06\u5728 9 \u6708\u8fce\u6765\u4e00\u4e2a\u5b69\u5b50\u3002", "note_en": "Embattled Theranos founder Elizabeth Holmes has given birth to a baby, according to a birth certificate seen by CNBC.\n Holmes is facing a dozen felony counts of wire fraud over her defunct Silicon Valley startup. Her pregnancy delayed the start of her trial.\n Theranos founder Elizabeth Holmes, whose pregnancy delayed the start of her upcoming fraud trial, has given birth to a baby.\n Records filed with the San Mateo County Recorder office, obtained by CNBC on Thursday, reveal Holmes and her partner, Billy Evans, had a baby on July 10 at Sequoia Hospital in Redwood City, California.\n  One of Holmes&#39; attorneys, Amy Saharia, declined to comment on the news.  The trial was originally scheduled to begin in July, but was pushed back to August 31 due to her pregnancy. Holmes faces nine counts of wire fraud and two counts of conspiracy to commit wire fraud. Prosecutors allege Holmes deceived investors, patients and doctors about her company&#39;s blood testing technology. She has pleaded not guilty.\n  &#34;Being a new mother can only help get her sympathy from jurors,&#34; NBC news Legal Analyst Danny Cevallos, said.\u00a0&#34;If convicted, even if her sentencing guidelines call for incarceration, her attorneys will place her motherhood front and central before the judge.&#34;\n In an interview with CNBC last month, John Carreyrou, the former Wall Street Journal reporter who broke the Theranos scandal, said he spoke to people tied to the case and some &#34;think that she was timing her pregnancy in order to be showing during the trial to get the jury sympathies.&#34;\n &#34;If Elizabeth is convicted and the case goes to the judge for sentencing, if he sends her to prison for a long time he&#39;d be depriving the child of his or her mother for many years,&#34; Carreyrou said. &#34;And that&#39;s a heavy decision to make.&#34;\n This isn&#39;t the only baby news for the Holmes family. Her brother Christian, who also worked at Theranos, and his wife are expecting a child in September, according to the couple&#39;s online registry.", "posttime": "2021-08-06 12:06:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u798f\u5c14\u6469\u65af,holmes,theranos", "title": "\u4f0a\u4e3d\u838e\u767d\u00b7\u798f\u5c14\u6469\u65af (Elizabeth Holmes) \u5728 Theranos \u6b3a\u8bc8\u6848\u5ba1\u5224\u4e34\u8fd1\u4e4b\u9645\u5206\u5a29", "title_en": "Elizabeth Holmes gives birth as Theranos fraud trial nears", "transed": 1, "url": "https://www.cnbc.com/2021/08/06/elizabeth-holmes-gives-birth-as-theranos-fraud-trial-nears.html", "via": "", "real_tags": ["\u798f\u5c14\u6469\u65af", "holmes", "theranos"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071708, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5929\u771f\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u5e76\u4e0d\u662f\u7279\u522b\u56f0\u96be\u3002\u8fd9\u91cc\u7684\u6311\u6218\u662f\u50cf\u7f16\u5199\u6279\u5904\u7406\u67e5\u8be2\u4e00\u6837\u5b9e\u73b0\u5b83\uff0c\u4f46\u8981\u4ee5\u8fd9\u6837\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4f8b\u5982 materialize \u6216 dida \u4e4b\u7c7b\u7684\u589e\u91cf\u7cfb\u7edf\u53ef\u4ee5\u5728\u65b0\u7f16\u8f91\u5230\u8fbe\u65f6\u6709\u6548\u5730\u66f4\u65b0\u7ed3\u679c\u3002\u4e0d\u662f\u56e0\u4e3a\u8fd9\u6bb5\u4ee3\u7801\u672c\u8eab\u7279\u522b\u6709\u7528\uff0c\u800c\u662f\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u53d1\u73b0\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u89e3\u51b3\u54ea\u4e9b\u7c7b\u578b\u7684\u95ee\u9898\u7684\u754c\u9650\u3002\u8be5\u7ec3\u4e60\u6709\u70b9\u50cf GPU \u7f16\u7a0b\uff0c\u56e0\u4e3a\u907f\u514d\u987a\u5e8f\u7b97\u6cd5\u548c\u5171\u4eab\u53ef\u53d8\u6570\u636e\u7ed3\u6784\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u5730\u5c06\u95ee\u9898\u7684\u5b9e\u9645\u57fa\u672c\u6570\u636e\u4f9d\u8d56\u9879\u4e0e\u5178\u578b\u7f16\u7a0b\u6280\u672f\u610f\u5916\u5f15\u5165\u7684\u6570\u636e\u4f9d\u8d56\u9879\u5206\u5f00\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u7f16\u8f91\u6811\uff0c\u6bcf\u4e2a\u7f16\u8f91\u90fd\u4ee3\u8868\u4e00\u4e2a\u5b57\u7b26\u7684\u63d2\u5165\u3002\u6bcf\u4e2a\u7f16\u8f91\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 id\uff0c\u4e3a\u4e86\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u5c06\u8bf4\u5b83\u53ea\u662f\u4e00\u4e2a\u6574\u6570\u3002\u6bcf\u4e2a\u5176\u4ed6\u7f16\u8f91\u90fd\u6709\u4e00\u4e2a\u7236\u7f16\u8f91\u3002\u7f16\u8f91\u7684 id \u603b\u662f\u5927\u4e8e\u5176\u7236\u7ea7\u7684 id\u3002\u4e3a\u4e86\u6784\u5efa\u5b9e\u9645\u7684\u6587\u672c\uff0c\u6211\u4eec\u91c7\u7528\u8fd9\u68f5\u7f16\u8f91\u6811\uff0c\u6309 id \u5bf9\u6bcf\u4e2a\u7f16\u8f91\u7684\u5b50\u9879\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u6811\u8fdb\u884c\u9884\u5e8f\u904d\u5386\u3002\u521b\u5efa\u8868\u7f16\u8f91\uff08id \u6574\u6570\uff0cparent_id \u6574\u6570\uff0c\u5b57\u7b26\u6587\u672c\uff09\uff1b\u63d2\u5165\u7f16\u8f91\u503c\uff08 0 \uff0c null \uff0c &#39;a&#39; \uff09\uff1b\u63d2\u5165\u7f16\u8f91\u503c ( 1 , 0 , &#39;b&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 2 , 0 , &#39;e&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 3 , 1 , &#39;c&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 4 , 1 , &#39;d&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 5 , 2 , &#39;f&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 6 , 5 , &#39;g&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 7 , 5 , &#39;h&#39; );\u63d2\u5165\u7f16\u8f91\u503c ( 8 , 5 , &#39;i&#39; );\n\u9274\u4e8e\u6211\u4eec\u6b63\u5728\u5c1d\u8bd5\u5bf9\u8fd9\u7ec4\u7f16\u8f91\u8fdb\u884c\u6392\u5e8f\uff0c\u81ea\u7136\u7684\u53cd\u5e94\u662f\u4ece\u4ee5\u4e0b\u5185\u5bb9\u5f00\u59cb\uff1a\u4f46\u6211\u4eec\u7acb\u5373\u9677\u5165\u56f0\u5883\uff0c\u56e0\u4e3a\u6ca1\u6709\u660e\u663e\u7684\u6392\u5e8f\u952e\u3002\u8ba9\u6211\u4eec\u51b3\u5b9a\u4e00\u4e2a\u7f16\u8f91\u5e94\u8be5\u5728\u53e6\u4e00\u4e2a\u7f16\u8f91\u4e4b\u524d\u8fd8\u662f\u4e4b\u540e\u7684\u4fe1\u606f\u9690\u542b\u5728\u6811\u7684\u5f62\u72b6\u4e2d\u3002\u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u5b9e\u9645\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u5305\u542b\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u3002\u9012\u5f52\u8def\u5f84 (id, path , character) as ( select edits . id , edits . id , edits . character from edits where edits . parent_id is null union all select child . id , parent . path || &#39;,&#39; || child . id , child . character from edits as child, path as parent where child . parent_id = parent . id ) select * from path order by path \u3002\u5c0f\u8def ;\u8fd9\u5c31\u662f\u95ee\u9898\u7684\u672c\u8d28 - \u6309\u7167\u4ece\u6839\u76ee\u5f55\u5f00\u59cb\u7684\u8def\u5f84\u4e2d\u7684 id \u5bf9\u7f16\u8f91\u8fdb\u884c\u6392\u5e8f\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5bf9\u4e8e\u5e73\u8861\u826f\u597d\u7684\u6811\u6728\uff0c\u8fd9\u5c06\u662f\u6545\u4e8b\u7684\u7ed3\u5c3e\u3002\u4f46\u662f\u7528\u4e8e\u6587\u672c\u7f16\u8f91 crdt \u7684\u6811\u5f80\u5f80\u975e\u5e38\u6df1\u548c\u72ed\u7a84\uff0c\u56e0\u6b64\u5b9e\u73b0\u8fd9\u4e9b\u8def\u5f84\u5c06\u4f7f\u5b58\u50a8\u6210\u672c\u770b\u8d77\u6765\u50cf O(N\u00b2)\u3002 \uff08\u5728\u5178\u578b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53ea\u67e5\u770b\u5177\u6709\u591a\u4e2a\u5b69\u5b50\u7684\u8def\u5f84\u7684\u4e00\u90e8\u5206\u6765\u51cf\u5c11\u8fd9\u4e00\u70b9\u3002\u4f46\u6700\u574f\u7684\u60c5\u51b5\u4ecd\u7136\u662f O(N\u00b2)\uff09\u5728\u5927\u591a\u6570\u8bed\u8a00\u4e2d\uff0c\u5982\u679c\u663e\u5f0f\u5b58\u50a8\u5bc6\u94a5\u592a\u6602\u8d35\uff0c\u6211\u4eec\u53ea\u662f\u4f7f\u7528\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u8fdb\u884c\u6392\u5e8f\u3002\u521b\u5efa\u51fd\u6570 compare_edits (id1 integer , id2 integer ) \u5c06\u6bd4\u8f83\u8fd4\u56de\u4e3a ???;\u901a\u8fc7\u6bd4\u8f83 compare_edits( edit . id ) \u4ece\u7f16\u8f91\u987a\u5e8f\u4e2d\u9009\u62e9 *\uff1b\n\u589e\u91cf\u7ef4\u62a4\u8fd9\u6837\u7684\u6392\u5e8f\u8fd0\u7b97\u7b26\u4f1a\u5f88\u68d8\u624b\u3002\u53ef\u80fd\u5fc5\u987b\u663e\u5f0f\u5b58\u50a8\u4e00\u7ec4\u6bd4\u8f83\u3002\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u5982\u4f55\u4ee5\u4e00\u79cd\u4f7f\u6240\u9700\u7684\u6bd4\u8f83\u96c6\u76f8\u5bf9\u4e8e\u8f93\u5165\u7684\u5fae\u5c0f\u53d8\u5316\u4fdd\u6301\u7a33\u5b9a\u7684\u65b9\u5f0f\u9009\u62e9\u652f\u70b9\u5e76\u4e0d\u660e\u663e\u3002\u4f46\u5b83\u53ef\u80fd\u662f\u53ef\u80fd\u7684\u3002\u5982\u679c\u4f7f\u7528\u5185\u7f6e\u7684\u6392\u5e8f\u8fd0\u7b97\u7b26\u4e0d\u53ef\u884c\uff0c\u4e5f\u8bb8\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u663e\u5f0f\u904d\u5386\u6811\u3002 with recursiverightmost_child(id, parent_id) as ( select max (id), edit . parent_id from edit where edit . parent_id is not null group by parent_id),rightmost_descendant(id, child_id) as ( select id, id from edit union select parent . parent_id , child . child_id \u4ece rightmost_child \u4e3a\u7236\u7ea7\uff0c rightmost_descendant \u4e3a child where parent . id = child . id ),rightmost_leaf(id, Leaf_id) as ( select id, max (child_id) as leaf_id from rightmost_descendant group by id),prev_sibling(id) , prev_id) as ( select edit . id , ( select max (sibling . id ) from edit as mirror where edit . parent_id = mirror . parent_id and edit . id &gt; mirror . id ) as prev_id from edit where prev_id is not null ), prev_edit(id, prev_id) as ( -- \u6ca1\u6709\u4e0a\u4e00\u4e2a\u5144\u5f1f\u59d0\u59b9\u7684\u7f16\u8f91\u5728\u4ed6\u4eec\u7684\u7236\u7ea7\u4e4b\u540e\u9009\u62e9 edit . id , edit . parent_id from edit where prev_sibling where prev_sibling . id = edit . id ) union all - - \u5176\u4ed6\u7f16\u8f91\u51fa\u73b0\u5728\u4ed6\u4eec\u4e0a\u4e00\u4e2a\u5144\u5f1f\u9009\u62e9\u7f16\u8f91\u7684\u6700\u53f3\u8fb9\u7684\u53f6\u5b50\u4e4b\u540e. id \uff0c rightmost_leaf \u3002 Leaf_id \u6765\u81ea edit\u3001prev_sibling\u3001rightmost_leaf\uff0c\u5176\u4e2d edit \u3002 id = prev_sibling \u3002 id \u548c prev_sibling \u3002 prev_id = rightmost_leaf \u3002 id ),position(id, position, character) as ( -- root is at position 0 select edit . id , 0 , edit . character from edit where edit . parent_id is null union all -- \u6240\u6709\u5176\u4ed6\u7f16\u8f91\u90fd\u5728\u4ed6\u4eec\u4e0a\u4e00\u6b21\u7f16\u8f91\u4e4b\u540eselect edit . id , position . position + 1 , edit . character from edit, prev_edit, position where edit . id = prev_edit . id and prev_edit . prev_id = position . id ) select * from position order by position .\u4f4d\u7f6e ;\u8ba9\u5144\u5f1f=\u7f16\u8f91\uff08\uff1f\u7f16\u8f91\u3002\u7f16\u8f91\u3002\uff08\u7f16\u8f91\u7236~\u7236\uff09\uff09\u5165\u53e3rightmost_child =\u7f16\u8f91\uff08\uff1f\u7f16\u8f91\u3002\u7f16\u8f91\u3002\uff08\u6700\u5927[\u7f16\u8f91~\u7236]\uff09\uff09\u5165\u53e3rightmost_leaf=\u4fee\u590d\uff08\u7f16\u8f91\uff08\uff1f\u7f16\u8f91\u3002\u7f16\u8f91\u3002\u7f16\u8f91\uff09 ) (?[rightmost_leaf] . (rightmost_leaf (?edit . ?leaf .edit . (max [leaf | (leaf rightmost_child)]))))) \u5165\u53e3prev = edits (?edit .edit .let prev_siblings = (edit\u5144\u5f1f) ( ?sibling . (when (edit &gt;sibling)sibling)) in if !!prev_siblings (max [prev_siblings] rightmost_leaf) (edit parent)) \u5165\u53e3\u4f4d\u7f6e = fix (root . 0) (?[position] . (position | (position) (?edit . ?pos . (edit ~prev) . (pos + 1))))) inedits (?edit . (edit position) .edit . (edit character)) \u5728\u4efb\u4f55\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u53ef\u80fd\u4e0d\u5f97\u4e0d\u81f3\u5c11\u7ef4\u62a4\u4e00\u4e2a\u5173\u4e8e parent\u3001~parent \u548c character \u7684\u7d22\u5f15\uff0c\u53ef\u80fd\u8fd8\u6709\u8bb8\u591a\u4e2d\u95f4\u7ed3\u679c\u7684\u7d22\u5f15\u3002\u6709\u70b9\u4ee4\u4eba\u62c5\u5fe7\u7684\u662f\uff0c\u4ece\u4ee3\u7801\u4e2d\u6839\u672c\u65e0\u6cd5\u9884\u6d4b\u8fd9\u4e9b\u5c06\u662f\u4ec0\u4e48\u4ee5\u53ca\u5b83\u4eec\u5c06\u82b1\u8d39\u591a\u5c11\u3002\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0cprev \u7684\u8f93\u51fa\u975e\u5e38\u7a33\u5b9a\uff0c\u56e0\u6b64\u5e94\u8be5\u5141\u8bb8\u5408\u7406\u6709\u6548\u7684\u589e\u91cf\u7ef4\u62a4\u3002\u4f46\u662f\u4f4d\u7f6e\u8f93\u51fa\u7684\u5f88\u5927\u4e00\u90e8\u5206\u4f1a\u5728\u6bcf\u6b21\u65b0\u7f16\u8f91\u65f6\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u7ef4\u62a4\u8d77\u6765\u6548\u7387\u4f4e\u4e0b\u3002\u8fd9\u662f\u56e0\u4e3a prev \u9690\u5f0f\u8868\u793a\u6392\u5e8f\uff0c\u5c31\u76f8\u90bb\u7f16\u8f91\u4e4b\u95f4\u7684\u76f8\u5bf9\u6392\u5e8f\u800c\u8a00\uff0c\u800c position \u901a\u8fc7\u5bf9\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u7f16\u53f7\u6765\u663e\u5f0f\u8868\u793a\u6392\u5e8f\u3002\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6bcf\u4e2a\u65b0\u7684\u7f16\u8f91\u53ea\u6539\u53d8\u5b83\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u7f16\u8f91\u7684 prev \u503c\uff0c\u4f46\u589e\u52a0\u5b83\u53f3\u8fb9\u7684\u6bcf\u4e2a\u7f16\u8f91\u7684\u4f4d\u7f6e\u7f16\u53f7\u3002\n\u6211\u4eec\u4ece\u4e00\u4e2a\u7a7a\u5e8f\u5217\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u5728\u5176\u4e2d\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u5b58\u50a8\u7f16\u8f91\u3002\u5bf9\u4e8e\u6bcf\u6b21\u7f16\u8f91\uff0c\u6211\u4eec\u901a\u8fc7\u9996\u5148\u626b\u63cf\u5e8f\u5217\u627e\u5230\u5b83\u7684\u7236\u7ea7\uff0c\u7136\u540e\u5411\u53f3\u626b\u63cf\u627e\u5230\u6b63\u786e\u7684\u70b9\u63d2\u5165\u5b50\u7ea7\u6765\u5c06\u5176\u63d2\u5165\u5230\u5e8f\u5217\u4e2d\u3002\u5982\u679c\u5e8f\u5217\u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a b \u6811\uff0c\u90a3\u4e48\u8fd9\u4e9b\u626b\u63cf\u548c\u63d2\u5165\u662f\u76f8\u5f53\u4fbf\u5b9c\u7684\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u8ddf\u8e2a b \u6811\u6bcf\u4e2a\u5206\u652f\u4e2d\u7684\u5b57\u7b26\u6570\uff0c\u4ee5\u4fbf\u901a\u8fc7\u6cbf\u7740 b \u6811\u7684\u4e3b\u5e72\u8d70\u4e0b\u53bb\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u56de\u7b54\u8bf8\u5982\u201c\u7b2c 142 \u4e2a\u5b57\u7b26\u7684\u7f16\u8f91 ID \u662f\u4ec0\u4e48\u201d\u4e4b\u7c7b\u7684\u67e5\u8be2\u3002\u547d\u4ee4\u5f0f\u89e3\u51b3\u65b9\u6848\u6839\u636e\u67d0\u4e9b\u6709\u5e8f\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u4f4d\u7f6e\u9690\u5f0f\u8868\u793a\u6392\u5e8f\u3002\u5728\u6570\u636e\u7ed3\u6784\u7684\u5f00\u5934\u9644\u8fd1\u63d2\u5165\u65b0\u7f16\u8f91\u4e0d\u9700\u8981\u663e\u5f0f\u66f4\u65b0\u6bcf\u4e2a\u540e\u9762\u5143\u7d20\u7684\u4f4d\u7f6e - \u8be5\u4f4d\u7f6e\u9690\u542b\u5728\u6574\u4e2a\u7ed3\u6784\u4e2d\u3002\u4f7f\u7528\u9012\u5f52\u5e8f\u5217(last_id, characters, ids) as ( select edit . id , edit . character , array[ edit . id ] from edit where edit . parent_id is null union all select edit . id , -- insert edit.character and edit .id at insert_point substring ( sequence . characters , 1 , insert_point . insert_point - 1 ) || edit . character || substring ( sequence . characters , insert_point . insert_point ), sequence . ids [ 1 : insert_point . insert_point - 1 ] ||\u7f16\u8f91 . id || \u5e8f\u5217 . ids [ \u63d2\u5165\u70b9 . \u63d2\u5165\u70b9 :] \u6765\u81ea\u5e8f\u5217\uff0c\u7f16\u8f91\u8fde\u63a5\u6a2a\u5411\uff08\u9009\u62e9\u5408\u5e76\uff08\u5206\u949f\uff08i\uff09\uff0c\u6570\u7ec4\u957f\u5ea6\uff08\u5e8f\u5217\u3002ids\uff0c1\uff09+ 1\uff09\u4f5c\u4e3a\u63d2\u5165\u70b9\u6765\u81ea\u751f\u6210\u4e0b\u6807\uff08\u5e8f\u5217\u3002ids\uff0c1 ) as i -- \u4fa7\u5411\u7f16\u8f91\u8fde\u63a5\u7684\u7236\u7ea7\u7684\u6570\u7ec4\u626b\u63cf\uff08\u4ece generate_subscripts( sequence . ids , 1 ) \u4e2d\u9009\u62e9 j \u4f5c\u4e3a j where sequence . ids [j] = edit . parent_id ) as parent_ix on true -- \u5bf9\u7236\u7ea7\u7684\u6570\u7ec4\u626b\u63cfids[i] \u52a0\u5165\u6a2a\u5411\uff08\u4ece generate_subscripts( sequence . ids , 1 ) \u4e2d\u9009\u62e9 k\u4f5c\u4e3a k\uff0c\u7f16\u8f91\u4e3a o_edit \u5176\u4e2d\u5e8f\u5217\u3002 ids [k] = o_edit \u3002 parent_id \u548c\u5e8f\u5217\u3002 ids [i] = o_edit \u3002 id ) as o_parent_ix on true - \u627e\u5230 i &gt; parent_ix \u7684\u63d2\u5165\u70b9\u3002 j \u548c o_parent_ix \u3002 k &lt; parent_ix \u3002 j) \u4f5c\u4e3a\u5bf9 true where \u5e8f\u5217\u7684\u63d2\u5165\u70b9\u3002 last_id + 1 = \u7f16\u8f91\u3002 id ) select * from sequence order by last_id desclimit 1 ; Imp \u6ca1\u6709\u4efb\u4f55\u5e8f\u5217\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a\u6709\u5173\u7cfb\u7684\u6570\u636e\u7ed3\u6784\uff0c\u81f3\u5c11\u770b\u770b\u4ee3\u7801\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u3002 // \u5904\u7406\u201c\u6570\u7ec4\u201d\u7684\u51fd\u6570let insert = ?[sequence] . \uff1f\u4f4d\u7f6e \u3002 \uff1f\u7269\u54c1 \u3002\u8ba9 old = \u5e8f\u5217 (?old_position . ?old_item . (if (old_position &gt;= position) (old_position + 1) old_position) . old_item ) in old | (position . item)inlet find_min_pos = ?[sequence] \u3002 \uff1f[\u6761\u4ef6] \u3002 ( let found = sequence (?pos . ?edit . (when (cond pos edit) pos)) in min [found] ) in// \u5b9e\u9645 crdt codelet sequence = fix (0 . root) (?[sequence] . let next_edit = 1 + (max [sequence (?pos . ?edit .edit)]) in if !(edits next_edit) \u5e8f\u5217 let parent_pos = find_min_pos [sequence] [?pos . ?edit . ((next_edit parent) = edit)] \u5728let insert_point = find_min_pos [sequence] [?o_pos . ?o_edit . ( let o_parent_pos = find_min_pos [sequence] [?pos . ?edit . ((o_edit parent) = edit)] in (o_pos &gt; parent_pos) &amp; (parent_pos &gt; o_parent_pos) )] in insert [sequence] (if !!insertion_point inserting_point (max [sequence (?pos . ?edit . pos)])) next_edit ) insequence (?pos . ?edit . pos .edit . (edit character))\n\u8fd9\u4f7f\u5f53\u524d\u8e69\u811a\u7684\u89e3\u91ca\u5668\u5c48\u670d\uff0c\u4f46\u6211\u8ba4\u4e3a\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u5b83\u3002\u5bf9\u4e8e sql \u548c imp \u7248\u672c\uff0c\u4f3c\u4e4e\u53ef\u4ee5\u9010\u6b65\u7ef4\u62a4\u8fd9\u4e00\u70b9\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u6301\u4e45\u6570\u636e\u7ed3\u6784\u6765\u5b9e\u73b0\u6570\u7ec4\uff0c\u90a3\u4e48\u63d2\u5165\u4e0d\u4f1a\u592a\u6602\u8d35\u3002\u5982\u679c\u6211\u4eec\u63d0\u793a\u8fd0\u884c\u65f6\u4e0d\u4f1a\u5220\u9664\u4efb\u4f55\u7f16\u8f91\u5e76\u4e14\u65b0\u7f16\u8f91\u7684 id \u7f16\u53f7\u4f1a\u589e\u52a0\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u63a8\u65ad\u5b83\u4e0d\u9700\u8981\u5b58\u50a8\u6570\u7ec4\u7684\u65e7\u503c\uff08\u53c2\u89c1\u4f8b\u5982 edelweiss\uff09\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u5b8c\u5168\u5076\u7136\u7684\u987a\u5e8f\u4f9d\u8d56\uff0c\u5931\u53bb\u4e86\u5229\u7528\u5e76\u884c\u6027\u6216\u77e2\u91cf\u5316\u7684\u80fd\u529b\uff0c\u4e5f\u5931\u53bb\u4e86\u5904\u7406\u4e71\u5e8f\u7f16\u8f91\u7684\u80fd\u529b\u3002\u4efb\u4f55\u4e0b\u6e38\u4ee3\u7801\u7684\u589e\u91cf\u7ef4\u62a4\u53ef\u80fd\u9700\u8981\u80fd\u591f\u533a\u5206\u5e8f\u5217\u7684\u8fde\u7eed\u7248\u672c\u3002\u8be5\u5e8f\u5217\u6309\u4e00\u4e2a\u952e\u8fdb\u884c\u6392\u5e8f\uff0c\u8be5\u952e\u5b9e\u73b0\u751a\u81f3\u6bd4\u8f83\u7684\u6210\u672c\u90fd\u5f88\u9ad8\u3002\u5feb\u901f\u547d\u4ee4\u5f0f\u89e3\u51b3\u65b9\u6848\u4f9d\u8d56\u4e8e\u4e0d\u9002\u5408\u589e\u91cf\u7ef4\u62a4\u7684\u5de7\u5999\u9690\u5f0f\u6bd4\u8f83\u3002\u867d\u7136\u7f16\u8f91\u7684\u76f8\u5bf9\u987a\u5e8f\u662f\u7a33\u5b9a\u7684\uff08\u4f8b\u5982\uff0c\u5982\u679c id=4 \u51fa\u73b0\u5728 id=12 \u4e4b\u524d\uff0c\u90a3\u4e48\u5b83\u603b\u662f\u5728\u5b83\u4e4b\u524d\uff09\uff0c\u4f46\u7edd\u5bf9\u4f4d\u7f6e\u975e\u5e38\u4e0d\u7a33\u5b9a\uff08\u5982\u679c\u63d2\u5165\u65b0\u7684\u7f16\u8f91\uff0c\u5219\u5fc5\u987b\u589e\u52a0\u5176\u540e\u6240\u6709\u5185\u5bb9\u7684\u4f4d\u7f6e\uff09\u3002\u56e0\u6b64\uff0c\u7edd\u5bf9\u4f4d\u7f6e\u7684\u4efb\u4f55\u660e\u786e\u8868\u793a\u90fd\u5c06\u5bfc\u81f4\u4e0b\u6e38\u5927\u91cf\u6d41\u5931\u3002\u540e\u4e00\u4e2a\u95ee\u9898\u5e76\u4e0d\u662f\u5173\u7cfb\u8bed\u8a00\u72ec\u6709\u7684\u2014\u2014\u7a33\u5b9a\u7684 id \u662f\u4efb\u4f55\u589e\u91cf\u7ef4\u62a4\u95ee\u9898\u7684\u6838\u5fc3\uff08\u4f8b\u5982\uff0c\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u7684\u589e\u91cf\u7b97\u6cd5\u901a\u5e38\u4f9d\u8d56\u4e8e\u6307\u5411\u6811\u8282\u70b9\u7684\u6307\u9488\u800c\u4e0d\u662f\u5b57\u7b26\u4f4d\u7f6e\uff09\u3002\u5173\u7cfb\u8bed\u8a00\u7684\u96be\u70b9\u5728\u4e8e\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6307\u9488\u6807\u8bc6\u4f5c\u4e3a id\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u4e25\u683c\u7ea6\u675f\u7684\u6267\u884c\u987a\u5e8f\u3002\u4e5f\u8bb8\u4e00\u79cd\u9009\u62e9\u662f\u62e5\u6709\u4e00\u4e2a\u4e0b\u964d\u5230\u63d2\u5165\u548c\u5220\u9664\u7ea7\u522b\u7684\u9003\u751f\u8231\u53e3\u3002\u5728\u90a3\u4e2a\u7ea7\u522b\uff0c\u6211\u4eec\u53ef\u4ee5\u57fa\u4e8e\u64cd\u4f5c\u5386\u53f2\u6784\u5efa\u7a33\u5b9a\u7684 id\uff0c\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u6811\u8282\u70b9\u4f5c\u4e3a\u5e8f\u5217\u4e2d\u7684 id\u3002\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u5728\u58f0\u660e\u5c42\u4e2d\u65e0\u6cd5\u89c2\u5bdf\u5230 id \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4ee5\u4fbf\u63d2\u5165/\u5220\u9664\u7684\u987a\u5e8f\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u3002\n\u6211\u7684\u5de5\u4f5c\u76ee\u524d\u662f\u901a\u8fc7\u4e0e\u5728 github \u4e0a\u8d5e\u52a9\u6211\u7684\u4eba\u5206\u4eab\u60f3\u6cd5\u548c\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u6765\u8d44\u52a9\u7684\u3002", "note_en": "Doing this naively isn&#39;t particularly hard. The challenge here is to implement it as if writing a batch query, but in such a way that an incremental system like  materialize or  dida can efficiently update the result when new edits arrive. Not because this code would be particularly useful in itself, but because it helps discover the boundaries of what kinds of problems are possible to solve in this way.\n The exercise is a little like GPU programming, in that avoiding sequential algorithms and shared mutable data-structures requires very carefully separating the actual essential data dependencies of the problem from those accidentally introduced by typical programming techniques.\n   We have a tree of edits, each of which represents the insert of a single character.\n  Each edit has a unique id, which for the purpose of this simple example we&#39;ll say is just an integer.\n  Every other edit has a parent edit. The id of an edit is always greater than the id of its parent.\n To construct the actual text we take this tree of edits, sort the children of each edit by id, and then do an pre-order traversal of the tree.\n    create table  edit (id  integer , parent_id  integer , character  text ); insert into  edit  values  ( 0 ,  null ,  &#39;a&#39; ); insert into  edit  values  ( 1 ,  0 ,  &#39;b&#39; ); insert into  edit  values  ( 2 ,  0 ,  &#39;e&#39; ); insert into  edit  values  ( 3 ,  1 ,  &#39;c&#39; ); insert into  edit  values  ( 4 ,  1 ,  &#39;d&#39; ); insert into  edit  values  ( 5 ,  2 ,  &#39;f&#39; ); insert into  edit  values  ( 6 ,  5 ,  &#39;g&#39; ); insert into  edit  values  ( 7 ,  5 ,  &#39;h&#39; ); insert into  edit  values  ( 8 ,  5 ,  &#39;i&#39; );\n Given that we&#39;re trying to sort this set of edits, the natural reaction would be to start with something like:\n  But we&#39;re immediately stuck because there isn&#39;t an obvious sort key. The information that lets us decide whether one edit should become before or after another edit is implicit in the shape of the tree. To get an actual value to sort by, we would need to include all that information.\n with  recursive  path (id,  path , character)  as  (  select  edits . id ,  edits . id ,  edits . character  from  edits  where  edits . parent_id  is  null  union all select  child . id ,  parent . path  ||  &#39;,&#39;  ||  child . id ,  child . character  from  edits  as  child,  path  as  parent  where  child . parent_id  =  parent . id  ) select  *  from path order by path . path ;\n  This is the essence of the problem - sorting the edits by the ids in their path from the root. It&#39;s a beautiful solution, and for nicely balanced trees this would be the end of the story. But the trees for text editing crdts tend to be very deep and narrow so materializing these paths will make the storage cost look like O(N\u00b2).\n (We could maybe cut this down in the typical case by only looking at parts of the path with more than one child. But the worst case would still be O(N\u00b2))\n  In most languages, if explicitly storing the key was too expensive we&#39;d just sort using a custom comparison function instead.\n create function  compare_edits (id1  integer , id2  integer ) returns comparison  as  ???;  select  *  from  edit  order by  comparing compare_edits( edit . id );\n  It would be tricky to incrementally maintain such a sort operator. The set of comparisons would probably have to be explicitly stored. It&#39;s not obvious to me how to pick pivots in a way that makes the set of required comparisons stable with respect to small changes in the input. But it might be possible.\n  If using the builtin sort operator is not feasible, maybe we can explicitly traverse the tree ourselves.\n  with  recursiverightmost_child(id, parent_id)  as  (  select  max (id),  edit . parent_id  from  edit  where  edit . parent_id  is not  null  group by  parent_id),rightmost_descendant(id, child_id)  as  (  select  id, id  from  edit  union select  parent . parent_id ,  child . child_id  from  rightmost_child  as  parent, rightmost_descendant  as  child  where  parent . id  =  child . id ),rightmost_leaf(id, leaf_id)  as  (  select  id,  max (child_id)  as  leaf_id  from  rightmost_descendant  group by  id),prev_sibling(id, prev_id)  as  (  select  edit . id , (  select  max ( sibling . id )  from  edit  as  sibling  where  edit . parent_id  =  sibling . parent_id  and  edit . id  &gt;  sibling . id  )  as  prev_id  from  edit  where  prev_id  is not  null ),prev_edit(id, prev_id)  as  (  -- edits that have no prev siblings come after their parent  select  edit . id ,  edit . parent_id  from  edit  where  not  exists (  select  *  from  prev_sibling  where  prev_sibling . id  =  edit . id  )  union all  -- other edits come after the rightmost leaf of their prev sibling  select  edit . id ,  rightmost_leaf . leaf_id  from  edit, prev_sibling, rightmost_leaf  where  edit . id  =  prev_sibling . id  and  prev_sibling . prev_id  =  rightmost_leaf . id ),position(id, position, character)  as  (  -- root is at position 0  select  edit . id ,  0 ,  edit . character  from  edit  where  edit . parent_id  is  null  union all  -- every other edit comes after their prev edit  select  edit . id ,  position . position  +  1 ,  edit . character  from  edit, prev_edit, position  where  edit . id  =  prev_edit . id  and  prev_edit . prev_id  =  position . id ) select  * from  position order by  position . position ;\n   let sibling = edits (?edit . edit . (edit parent ~parent)) inlet rightmost_child = edits (?edit . edit . (max [edit ~parent])) inlet rightmost_leaf = fix (edits (?edit . edit . edit)) (?[rightmost_leaf] . (rightmost_leaf (?edit . ?leaf . edit . (max [leaf | (leaf rightmost_child)])))) inlet prev = edits (?edit . edit . let prev_siblings = (edit sibling) (?sibling . (when (edit &gt; sibling) sibling)) in if !!prev_siblings (max [prev_siblings] rightmost_leaf) (edit parent)) inlet position = fix (root . 0) (?[position] . (position | (position (?edit . ?pos . (edit ~prev) . (pos + 1))))) inedits (?edit . (edit position) . edit . (edit character))\n In either case, we&#39;re likely to have to maintain at least an index on  parent,  ~parent and  character and probably also indexes for many intermediate results too. It&#39;s somewhat concerning that it&#39;s not at all predictable from the code what those will be and how much they will cost.\n In the ideal case, the output of  prev is very stable and so should admit reasonably efficient incremental maintenance. But large parts of the output of  position will change on every new edit, so it is inherently inefficient to maintain.\n This is because  prev represents the ordering implicitly, in terms of relative ordering between adjacent edits, whereas  position represents the ordering explicitly by numbering each position in the sequence. In this problem, each new edit only changes the  prev value of the first edit to its right, but increments the  position number of every edit to its right.\n   We start with an empty sequence, in which we&#39;ll store the edits in the correct order.\n  For each edit, we insert it into the sequence by first scanning the sequence to find its parent, and then scanning to the right to find the correct point to insert the child.\n If the sequence is implemented as a b-tree then these scans and inserts are fairly cheap. We can also keep track of the number of characters in each branch of the b-tree so that queries like &#34;what is the edit id for the 142nd character&#34; can be efficiently answered by walking down the spine of the b-tree.\n  The imperative solution represents the ordering implicitly in terms of position in some ordered data-structure. Inserting a new edit near the beginning of the data-structure does not require explicitly updating the position of every later element - the position is implicit in the overall structure.\n   with  recursive sequence(last_id, characters, ids)  as  (  select  edit . id ,  edit . character , array[ edit . id ]  from  edit  where  edit . parent_id  is  null  union all select  edit . id ,  -- insert edit.character and edit.id at insertion_point  substring ( sequence . characters ,  1 ,  insertion_point . insertion_point - 1 )  ||  edit . character  ||  substring ( sequence . characters ,  insertion_point . insertion_point ),  sequence . ids [ 1 : insertion_point . insertion_point - 1 ]  ||  edit . id  ||  sequence . ids [ insertion_point . insertion_point :]  from  sequence, edit  join  lateral (  select  coalesce( min (i), array_length( sequence . ids ,  1 ) + 1 )  as  insertion_point  from  generate_subscripts( sequence . ids ,  1 )  as  i  -- array scan for parent of edit  join  lateral (  select  j  from  generate_subscripts( sequence . ids ,  1 )  as  j  where  sequence . ids [j]  =  edit . parent_id )  as  parent_ix on true  -- array scan for parent of ids[i]  join  lateral (  select  k  from  generate_subscripts( sequence . ids ,  1 )  as  k, edit  as  o_edit  where  sequence . ids [k]  =  o_edit . parent_id  and  sequence . ids [i]  =  o_edit . id )  as  o_parent_ix on true  -- find insertion point  where  i  &gt;  parent_ix . j  and  o_parent_ix . k  &lt;  parent_ix . j  )  as  insertion_point on true  where  sequence . last_id  +  1  =  edit . id ) select  *  from  sequence order by  last_id  desclimit  1 ;\n  Imp doesn&#39;t have any sequence data-structure, but we can fake one with relations to at least see what the code would look like.\n // functions for working with &#39;arrays&#39;let insert = ?[sequence] . ?position . ?item . let old = sequence (?old_position . ?old_item . (if (old_position &gt;= position) (old_position + 1) old_position) . old_item ) in old | (position . item)inlet find_min_pos = ?[sequence] . ?[cond] . ( let found = sequence (?pos . ?edit . (when (cond pos edit) pos)) in min [found] ) in// actual crdt codelet sequence = fix (0 . root) (?[sequence] . let next_edit = 1 + (max [sequence (?pos . ?edit . edit)]) in if !(edits next_edit) sequence let parent_pos = find_min_pos [sequence] [?pos . ?edit . ((next_edit parent) = edit)] in let insertion_point = find_min_pos [sequence] [?o_pos . ?o_edit . ( let o_parent_pos = find_min_pos [sequence] [?pos . ?edit . ((o_edit parent) = edit)] in (o_pos &gt; parent_pos) &amp; (parent_pos &gt; o_parent_pos) )] in insert [sequence] (if !!insertion_point insertion_point (max [sequence (?pos . ?edit . pos)])) next_edit ) insequence (?pos . ?edit . pos . edit . (edit character))\n This brings the current crappy interpreter to its knees, but I think that it is possible to execute it efficiently.\n For both the sql and imp versions it seems possible to incrementally maintain this. If we use a persistent data-structure to implement the array, then the inserts are not too expensive. If we hint to the runtime that no edits will be deleted and new edits will have increasing id numbers, then it can infer that it doesn&#39;t need to store old values of the arrays (see eg  edelweiss).\n On the other hand, we&#39;ve introduced a completely incidental sequential dependency, lost the ability to take advantage of parallelism or vectorization, and lost the ability to handle out-of-order edits. And incremental maintenance of any downstream code might require the ability to diff successive versions of the sequence.\n   The sequence is sorted by a key that is expensive to materialize or even compare. Fast imperative solutions rely on clever implicit comparisons that don&#39;t lend themselves to incremental maintenance.\n While the relative ordering of edits is stable (eg if  id=4 comes before  id=12 then it will always come before it) the absolute positions are very unstable (if a new edit is inserted, the positions of everything after it must be incremented). So any explicit representation of absolute position will cause massive churn downstream.\n The latter problem isn&#39;t unique to relational languages - stable ids are at the heart of any incremental maintenance problem (eg incremental algorithms in text editors often rely on pointers to tree nodes instead of character position). What makes life difficult in relational languages is that we can&#39;t use pointer identity as an id, because that requires a strongly-constrained execution order.\n Perhaps one option is to have an escape hatch that drops down to the level of inserts and deletes. At that level we can construct stable ids based on the history of operations, in a similar fashion to using tree nodes as ids into a sequence. We just have to guarantee that the details of the ids are not observable in the declarative layer so that the order of inserts/deletes does not affect the final result.\n My work is currently funded by sharing thoughts and work in progress with people who  sponsor me on github.", "posttime": "2021-08-06 12:05:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5173\u7cfb,ordering,\u7f16\u8f91", "title": "\u5173\u7cfb\u8bed\u8a00\u4e2d\u7684\u9690\u5f0f\u6392\u5e8f", "title_en": "Implicit Ordering in Relational Languages", "transed": 1, "url": "https://scattered-thoughts.net/writing/implicit-ordering-in-relational-languages", "via": "", "real_tags": ["\u5173\u7cfb", "ordering", "\u7f16\u8f91"]}, {"category": "", "categoryclass": "", "imagename": "ac1360095041925da55ebd2e07828d0b.jpg", "infoid": 1071706, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5185\u5bb9\u4ea4\u4ed8\u7f51\u7edc\u516c\u53f8 Cloudflare Inc. \u7684\u80a1\u7968\u5728\u4eca\u5929\u7684\u76d8\u540e\u4ea4\u6613\u4e2d\u4e0b\u8dcc\uff0c\u6b64\u524d\u6295\u8d44\u8005\u5bf9\u8be5\u516c\u53f8\u7684\u8282\u62cd\u89c4\u6a21\u6ca1\u6709\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u3002\u5728\u622a\u81f3 6 \u6708 30 \u65e5\u7684\u5b63\u5ea6\u4e2d\uff0cCloudflare \u62a5\u544a\u7684\u6536\u5165\u4e3a 1.524 \u4ebf\u7f8e\u5143\uff0c\u540c\u6bd4\u589e\u957f 53%\u3002\u672c\u5b63\u5ea6\u51c0\u4e8f\u635f\u4e3a 3550 \u4e07\u7f8e\u5143\u6216\u6bcf\u80a1 2 \u7f8e\u5206\uff0c\u800c 2020 \u5e74\u540c\u4e00\u5b63\u5ea6\u4e3a 2610 \u4e07\u7f8e\u5143\u6216\u6bcf\u80a1 3 \u7f8e\u5206\u3002\u5206\u6790\u5e08\u6b64\u524d\u9884\u6d4b\u6536\u5165\u4e3a 1.46 \u4ebf\u7f8e\u5143\uff0c\u6bcf\u80a1\u4e8f\u635f\u4e3a 3 \u7f8e\u5206\u3002\u672c\u5b63\u5ea6\u7684\u4eae\u70b9\u5305\u62ec Cloudflare \u7684\u590d\u5408\u5e74\u589e\u957f\u7387\u589e\u957f\u4e86 68%\uff0c\u56e0\u4e3a\u8be5\u516c\u53f8\u5c06\u5e74\u5316\u6536\u5165\u81f3\u5c11\u4e3a 100,000 \u7f8e\u5143\u7684\u5927\u5ba2\u6237\u6570\u91cf\u589e\u52a0\u5230 1,088 \u4e2a\u3002\u622a\u81f3\u672c\u5b63\u5ea6\u672b\uff0c\u8be5\u516c\u53f8\u76ee\u524d\u7ea6\u6709 19% \u7684\u5e78\u8fd0 1,000 \u5ba2\u6237\u4e3a\u4ed8\u8d39\u5ba2\u6237\u3002 Cloudflare \u5ba2\u6237\u603b\u6570\u73b0\u5728\u8d85\u8fc7 126,000\uff0c\u5176\u4e2d 48% \u7684\u6536\u5165\u6765\u81ea\u7f8e\u56fd\u4ee5\u5916\u3002\u8be5\u516c\u53f8\u73b0\u5728\u6bcf\u5929\u963b\u6b62\u8d85\u8fc7 870 \u4ebf\u4e2a\u7f51\u7edc\u5a01\u80c1\u3002 Cloudflare \u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u4fee\u00b7\u666e\u6797\u65af (Matthew Prince) \u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff1a\u201c\u4f5c\u4e3a\u4e0a\u5e02\u516c\u53f8\uff0c\u6211\u4eec\u8fce\u6765\u4e86\u6709\u53f2\u4ee5\u6765\u6700\u5f3a\u52b2\u7684\u5b63\u5ea6\uff0c\u6211\u4eec\u7684\u6536\u5165\u589e\u957f\u7ee7\u7eed\u52a0\u901f\uff0c\u540c\u6bd4\u589e\u957f 53%\u3002\u201d . \u201c\u65e0\u8bba\u6211\u4eec\u662f\u4e3a\u4e16\u754c\u4e0a\u6700\u590d\u6742\u7684\u7ec4\u7ec7\u63d0\u4f9b\u96f6\u4fe1\u4efb\u5b89\u5168\u89e3\u51b3\u65b9\u6848\uff0c\u8fd8\u662f\u901a\u8fc7 Cloudflare Workers \u5b9e\u73b0\u4e0b\u4e00\u4e2a\u5341\u4ebf\u7f8e\u5143\u7684\u4e1a\u52a1\uff0c\u6211\u4eec\u90fd\u5c06\u7ee7\u7eed\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u5ba2\u6237\u6240\u4f9d\u8d56\u7684\u5b89\u5168\u3001\u53ef\u7f16\u7a0b\u7684\u7f51\u7edc\u89e3\u51b3\u65b9\u6848\u3002\u201d Cloudflare \u4f30\u8ba1\u4e0b\u4e00\u5b63\u5ea6\u7684\u6536\u5165\u5728 1.65 \u4ebf\u7f8e\u5143\u81f3 1.66 \u4ebf\u7f8e\u5143\u4e4b\u95f4\uff0c\u8c03\u6574\u540e\u7684\u6bcf\u80a1\u4e8f\u635f\u4e3a 4 \u7f8e\u5206\u81f3 3 \u7f8e\u5206\u3002\u5206\u6790\u5e08\u6b64\u524d\u9884\u8ba1\u6bcf\u80a1\u4e8f\u635f 2 \u7f8e\u5206\uff0c\u6536\u5165\u4e3a 1.574 \u4ebf\u7f8e\u5143\u3002\nCloudflare \u8868\u793a\uff0c\u4ed6\u4eec\u9884\u8ba1\u5168\u5e74\u6536\u5165\u5c06\u5728 6.29 \u4ebf\u7f8e\u5143\u81f3 6.33 \u4ebf\u7f8e\u5143\u4e4b\u95f4\uff0c\u8c03\u6574\u540e\u6bcf\u80a1\u4e8f\u635f\u5728 11 \u81f3 12 \u7f8e\u5206\u4e4b\u95f4\u3002\u5c3d\u7ba1\u5b63\u5ea6\u6570\u636e\u8d85\u51fa\u4e86\u5206\u6790\u5e08\u7684\u9884\u671f\u5e76\u4e14\u4e0e\u9884\u671f\u5927\u81f4\u76f8\u7b26\uff0c\u4f46\u6295\u8d44\u8005\u5e76\u672a\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u3002 Cloudflare \u7684\u80a1\u4ef7\u5728\u76d8\u540e\u4ea4\u6613\u4e2d\u4e0b\u8dcc 5.5%\u3002\u4e0e\u6295\u8d44\u8005\u53ef\u80fd\u9884\u671f\u7684\u66f4\u597d\u76f8\u6bd4\uff0c\u6570\u636e\u5e76\u4e0d\u7cdf\u7cd5\u3002 Cloudflare \u4eca\u5e74\u8868\u73b0\u51fa\u8272\uff0c\u5176\u80a1\u4ef7\u4eca\u5e74\u8fc4\u4eca\u4e0a\u6da8\u4e86 63%\u3002\u4f34\u968f\u7740\u8fd9\u4e00\u6ea2\u4ef7\u800c\u6765\u7684\u662f\u5bf9\u5f3a\u52b2\u62a5\u544a\u7684\u9884\u671f\uff0c\u5c3d\u7ba1 Cloudflare \u5728\u524d\u56db\u4e2a\u5b63\u5ea6\u7684\u8868\u73b0\u8d85\u51fa\u4e86\u9884\u671f\uff0c\u4f46\u8fd9\u6b21\u7684\u5e45\u5ea6\u5e76\u4e0d\u5927\u3002\u52a0\u5165\u6211\u4eec\u7684 Cube \u4ff1\u4e50\u90e8\u548c Cube \u6d3b\u52a8\u4e13\u5bb6\u793e\u533a\uff0c\u8868\u8fbe\u60a8\u5bf9\u6211\u4eec\u4f7f\u547d\u7684\u652f\u6301\u3002\u52a0\u5165\u793e\u533a\uff0c\u5176\u4e2d\u5305\u62ec Amazon Web Services\uff0c\u5373\u5c06\u6210\u4e3a Amazon.com \u9996\u5e2d\u6267\u884c\u5b98 Andy Jassy\u3001\u6234\u5c14\u79d1\u6280\u516c\u53f8\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\u8fc8\u514b\u5c14\u6234\u5c14\u3001\u82f1\u7279\u5c14\u9996\u5e2d\u6267\u884c\u5b98 Pat Gelsinger \u4ee5\u53ca\u66f4\u591a\u540d\u4eba\u548c\u4e13\u5bb6\u3002\u6211\u4eec\u5c06\u4e8e 6 \u6708 16 \u65e5\u4e3e\u884c\u7b2c\u4e8c\u6b21\u4e91\u521b\u4e1a\u5c55\u793a\u4f1a\u3002\u5355\u51fb\u6b64\u5904\u52a0\u5165\u514d\u8d39\u4e14\u5f00\u653e\u7684 Startup Showcase \u6d3b\u52a8\u3002", "note_en": "Shares in content delivery network company Cloudflare Inc. dropped in after-hours trading today after investors were not impressed by the size of the company\u2019s beat.\n For the quarter ending June 30, Cloudflare reported revenue of $152.4 million, up 53% year-over-year. Net loss in the quarter was $35.5 million or two cents per share compared with $26.1 million or three cents per share in the same quarter of 2020.\n Analysts had  been predicting revenue of $146 million and a loss per share of three cents.\n Highlights in the quarter included a 68% increase in Cloudflare\u2019s compound annual growth rate as the company increased its number of large customers, those with at least $100,000 in annualized revenue, to 1,088. As of the end of the quarter, the company now counts about 19% of the Fortunate 1,000 as paying customers.\n Total Cloudflare customers are now over 126,000, with 48% of revenue coming from outside of the U.S. The company is now blocking more than 87 billion cyber threats per day.\n \u201cWe had our strongest quarter ever as a public company, and our revenue growth continued to accelerate, growing 53% year-over-year,\u201d Matthew Prince, co-founder a chief executive officer of Cloudflare (pictured), said in  a statement. \u201cWhether we\u2019re offering zero trust security solutions to the world\u2019s most sophisticated organizations or enabling the next billion-dollar business with Cloudflare Workers, we remain focused on delivering secure, programmable network solutions that our customers rely on.\u201d\n Cloudflare is estimating revenue of between $165 million and $166 million for the quarter ahead and an adjusted loss per share of four cents to three cents. Analysts had  been predicting revenue of $157.4 million on a loss of two cents per share.\n For the full year, Cloudflare said that they expected revenue to come in at between $629 million and $633 million and an adjusted loss of between 11 and 12 cents per share.\n Despite beating analyst estimates with the quarterly figures and being roughly in line with expectations on estimates, investors were not impressed. Share in Cloudflare dropped 5.5% in after-hours trading.\n It wasn\u2019t so much that the figures were bad versus that investors may have expected better. Cloudflare has been a stellar performer this year, with its share price up 63% year to date. With that premium comes expectations of strong reports, and although Cloudflare has beaten predictions in its previous four quarters, it wasn\u2019t by a large margin this time.\n  Show your support for our mission by joining our Cube Club and Cube Event Community of experts. Join the community that includes Amazon Web Services and soon to be Amazon.com CEO Andy Jassy, Dell Technologies founder and CEO Michael Dell, Intel CEO Pat Gelsinger and many more luminaries and experts.\n We are holding our second cloud startup showcase on June 16.\u00a0 Click here to join the free and open Startup Showcase event.", "posttime": "2021-08-06 10:50:50", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u8d85\u51fa,paying,cloudflare", "title": "Cloudflare \u8d85\u51fa\u9884\u671f\uff0c\u7b2c\u4e8c\u5b63\u5ea6\u6536\u5165\u4e3a 1.524 \u4ebf\u7f8e\u5143\uff0c\u540c\u6bd4\u589e\u957f 53%\uff0c48% \u6765\u81ea\u7f8e\u56fd\u4ee5\u5916\uff1b\u8d22\u5bcc 1,000 \u5f3a\u516c\u53f8\u4e2d\u7ea6\u6709 19% \u662f\u4ed8\u8d39\u5ba2\u6237", "title_en": "Cloudflare beats expectations with Q2 revenue of $152.4M, up 53% YoY, 48% came from outside of the US; says ~19% of Fortune 1,000 firms are paying customers", "transed": 1, "url": "https://siliconangle.com/2021/08/05/cloudflare-shares-drop-despite-beating-estimates-second-quarter-earnings/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u8d85\u51fa", "paying"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071705, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Berners-Lee \u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u7684\u513f\u5b50\uff0c1955 \u5e74\uff08\u4e0e\u53f2\u8482\u592b\u00b7\u4e54\u5e03\u65af\u548c\u6bd4\u5c14\u00b7\u76d6\u8328\u540c\u5e74\uff09\u51fa\u751f\u4e8e\u4f26\u6566\uff0c\u5e76\u5728\u725b\u6d25\u5927\u5b66\u5b66\u4e60\u7269\u7406\u5b66\u3002\u5728 1980 \u5e74\u4ee3\u53d7\u96c7\u4e8e CERN \u671f\u95f4\uff0cBerners-Lee \u89c2\u5bdf\u5230\u8ddf\u8e2a\u8be5\u7ec4\u7ec7\u904d\u5e03\u5168\u7403\u7684\u6570\u5343\u540d\u7814\u7a76\u4eba\u5458\u7684\u9879\u76ee\u548c\u8ba1\u7b97\u673a\u7cfb\u7edf\u662f\u591a\u4e48\u56f0\u96be\u3002\u6b63\u5982\u4ed6\u540e\u6765\u6240\u8bf4\uff1a\u201c\u5728\u90a3\u4e2a\u65f6\u4ee3\uff0c\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u6709\u4e0d\u540c\u7684\u4fe1\u606f\uff0c\u4f46\u4f60\u5fc5\u987b\u767b\u5f55\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u624d\u80fd\u83b7\u5f97\u5b83\u3002\u6b64\u5916\uff0c\u6709\u65f6\u60a8\u5fc5\u987b\u5728\u6bcf\u53f0\u8ba1\u7b97\u673a\u4e0a\u5b66\u4e60\u4e0d\u540c\u7684\u7a0b\u5e8f\u3002\u201d 1989 \u5e74 3 \u6708\uff0cBerners-Lee \u5411 CERN \u7684\u7ba1\u7406\u4eba\u5458\u63d0\u51fa\u4e86\u4e00\u4e2a\u4fe1\u606f\u7ba1\u7406\u7cfb\u7edf\u7684\u5efa\u8bae\uff0c\u8be5\u7cfb\u7edf\u4f7f\u7528\u8d85\u6587\u672c\u94fe\u63a5\u8fde\u63a5\u5230 Internet \u7684\u4e0d\u540c\u8ba1\u7b97\u673a\u4e0a\u7684\u6587\u6863\u3002 \uff08\u8d85\u6587\u672c\u662f 1963 \u5e74\u521b\u9020\u7684\u4e00\u4e2a\u672f\u8bed\uff0c\u5141\u8bb8\u4e00\u4e2a\u4eba\u901a\u8fc7\u5355\u51fb\u7f16\u7801\u7684\u5355\u8bcd\u6216\u77ed\u8bed\u6765\u83b7\u53d6\u6587\u6863\u6216\u4e00\u6bb5\u5185\u5bb9\u3002\uff09\u88ab\u4ed6\u7684\u8001\u677f\u6807\u8bb0\u4e3a\u201c\u6a21\u7cca\u4f46\u4ee4\u4eba\u5174\u594b\u201d\u7684\u63d0\u8bae\u6700\u521d\u672a\u88ab\u63a5\u53d7\u3002 Berners-Lee \u4e0e CERN \u7684\u6bd4\u5229\u65f6\u5de5\u7a0b\u5e08 Robert Cailliau \u5408\u4f5c\u5b8c\u5584\u4e86\u8be5\u63d0\u6848\uff0c1990 \u5e74\uff0c\u8fd9\u4f4d\u82f1\u56fd\u4eba\u7684\u8001\u677f\u7ed9\u4e86\u4ed6\u65f6\u95f4\u53c2\u4e0e\u8be5\u9879\u76ee\u3002\u5728\u6700\u521d\u5c06\u9879\u76ee\u79f0\u4e3a\u4fe1\u606f\u7ba1\u7406\u540e\uff0c\u4f2f\u7eb3\u65af-\u674e\u5c1d\u8bd5\u4e86\u8bf8\u5982\u4fe1\u606f\u77ff\u4e95\u548c\u4fe1\u606f\u7f51\u683c\u4e4b\u7c7b\u7684\u540d\u79f0\uff0c\u7136\u540e\u624d\u51b3\u5b9a\u4f7f\u7528\u4e07\u7ef4\u7f51\u3002\u5230 1990 \u5e74\u5e95\uff0cBerners-Lee \u4f7f\u7528\u53f2\u8482\u592b\u4e54\u5e03\u65af\u8bbe\u8ba1\u7684 NeXT \u8ba1\u7b97\u673a\u5f00\u53d1\u4e86\u4f5c\u4e3a Web \u57fa\u77f3\u7684\u5173\u952e\u6280\u672f\uff0c\u5305\u62ec\u7528\u4e8e\u521b\u5efa\u7f51\u9875\u7684\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00 (HTML)\uff1b\u8d85\u6587\u672c\u4f20\u8f93\u200b\u200b\u534f\u8bae (HTTP)\uff0c\u4e00\u7ec4\u7528\u4e8e\u901a\u8fc7 Web \u4f20\u8f93\u6570\u636e\u7684\u89c4\u5219\uff1b\u548c\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26 (URL)\uff0c\u6216\u7528\u4e8e\u67e5\u627e\u6587\u6863\u6216\u9875\u9762\u7684 Web \u5730\u5740\u3002\u4ed6\u8fd8\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u57fa\u672c\u7684\u6d4f\u89c8\u5668\u548c Web \u670d\u52a1\u5668\u8f6f\u4ef6\u3002 1991 \u5e74 8 \u6708 6 \u65e5\uff0c\u4f2f\u7eb3\u65af\u00b7\u674e (Berners-Lee) \u53d1\u5e03\u4e86\u6709\u53f2\u4ee5\u6765\u7b2c\u4e00\u4e2a\u7f51\u7ad9\uff0cWeb \u5f00\u59cb\u4f5c\u4e3a Internet \u4e0a\u7684\u4e00\u9879\u516c\u5f00\u53ef\u7528\u670d\u52a1\u51fa\u73b0\u3002\u6070\u5982\u5176\u5206\u5730\uff0c\u8be5\u7ad9\u70b9\u662f\u5173\u4e8e\u4e07\u7ef4\u7f51\u9879\u76ee\u7684\uff0c\u63cf\u8ff0\u4e86 Web \u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u3002\u5728\u4f2f\u7eb3\u65af-\u674e\u7684 NeXT \u8ba1\u7b97\u673a\u4e0a\u6258\u7ba1\u5728 CERN\uff0c\u8be5\u7ad9\u70b9\u7684 URL \u662f http://info.cern.ch\u3002 Berners-Lee \u5e76\u6ca1\u6709\u8bd5\u56fe\u4ece\u4ed6\u7684\u53d1\u660e\u4e2d\u83b7\u5229\uff0c\u5e76\u62d2\u7edd\u4e86 CERN \u8981\u6c42\u4e3a\u4ed6\u7684 Web \u6280\u672f\u7533\u8bf7\u4e13\u5229\u7684\u547c\u5401\u3002\u4ed6\u5e0c\u671b\u7f51\u7edc\u662f\u5f00\u653e\u548c\u514d\u8d39\u7684\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5feb\u5730\u6269\u5c55\u548c\u53d1\u5c55\u3002\u6b63\u5982\u4ed6\u540e\u6765\u8bf4\u7684\uff0c\u201c\u5982\u679c\u8fd9\u9879\u6280\u672f\u662f\u4e13\u6709\u7684\uff0c\u5e76\u4e14\u5728\u6211\u7684\u5b8c\u5168\u63a7\u5236\u4e4b\u4e0b\uff0c\u5b83\u53ef\u80fd\u4e0d\u4f1a\u8d77\u98de\u3002\u4f60\u4e0d\u80fd\u5efa\u8bae\u67d0\u7269\u6210\u4e3a\u4e00\u4e2a\u901a\u7528\u7a7a\u95f4\uff0c\u540c\u65f6\u4fdd\u6301\u5bf9\u5b83\u7684\u63a7\u5236\u3002\u201d 1993 \u5e74\uff0c\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u56fd\u5bb6\u8d85\u7ea7\u8ba1\u7b97\u5e94\u7528\u4e2d\u5fc3\u7684\u4e00\u4e2a\u56e2\u961f\u53d1\u5e03\u4e86 Mosaic\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u53d7\u5230\u516c\u4f17\u6b22\u8fce\u7684 Web \u6d4f\u89c8\u5668\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u91cc\uff0c\u96c5\u864e (1994)\u3001\u4e9a\u9a6c\u900a (1995)\u3001eBay (1995) \u548c\u8c37\u6b4c (1998) \u7b49\u7f51\u7ad9\u76f8\u7ee7\u63a8\u51fa\u3002\u6839\u636e Internet Live Stats \u7684\u6570\u636e\uff0c\u5230 2004 \u5e74 Facebook \u9996\u6b21\u4eae\u76f8\u65f6\uff0c\u5df2\u6709\u8d85\u8fc7 5100 \u4e07\u4e2a\u7f51\u7ad9\u3002\u4e0e\u6b64\u540c\u65f6\uff0c1994 \u5e74\uff0c\u4f2f\u7eb3\u65af-\u674e\u79bb\u5f00 CERN \u524d\u5f80\u9ebb\u7701\u7406\u5de5\u5b66\u9662\uff0c\u5728\u90a3\u91cc\u4ed6\u521b\u7acb\u4e86\u4e07\u7ef4\u7f51\u8054\u76df (W3C)\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ef4\u62a4 Web \u6807\u51c6\u7684\u7ec4\u7ec7\u3002\u8fd9\u4f4d\u4f4e\u8c03\u7684\u6709\u8fdc\u89c1\u7684\u4eba\u540e\u6765\u88ab\u300a\u65f6\u4ee3\u300b\u6742\u5fd7\u8bc4\u4e3a 20 \u4e16\u7eaa 100 \u4f4d\u6700\u91cd\u8981\u4eba\u7269\u4e4b\u4e00\uff0c\u5e76\u4e8e 2004 \u5e74\u88ab\u82f1\u56fd\u5973\u738b\u4f0a\u4e3d\u838e\u767d\u4e8c\u4e16\u5c01\u4e3a\u7235\u58eb\u3002 2009 \u5e74\uff0c\u4f2f\u7eb3\u65af-\u674e\u521b\u7acb\u4e86\u4e07\u7ef4\u7f51\u57fa\u91d1\u4f1a\uff0c\u8be5\u7ec4\u7ec7\u81f4\u529b\u4e8e\u786e\u4fdd\u7f51\u7edc\u9020\u798f\u4eba\u7c7b\u3002\u5728 2012 \u5e74\u4f26\u6566\u590f\u5b63\u5965\u8fd0\u4f1a\u5f00\u5e55\u5f0f\u4e0a\uff0c\u4ed6\u56e0\u53d1\u660e\u4e86\u7f51\u7edc\u800c\u611f\u5230\u8363\u5e78\uff0c\u5e76\u5728\u63a8\u7279\u4e0a\u5199\u9053\uff1a\u201c\u8fd9\u662f\u7ed9\u6240\u6709\u4eba\u7684\u3002\u201d", "note_en": "The son of computer scientists, Berners-Lee was born in London in 1955 (the same year as Steve Jobs and Bill Gates) and studied physics at Oxford. While employed at CERN in the 1980s, Berners-Lee observed how tough it was to keep track of the projects and computer systems of the organization\u2019s thousands of researchers, who were spread around the globe. As he later stated: \u201cIn those days, there was different information on different computers, but you had to log on to different computers to get at it. Also, sometimes you had to learn a different program on each computer.\u201d\n   In March 1989, Berners-Lee gave managers at CERN a proposal for an information management system that used hypertext to link documents on different computers that were connected to the Internet. (Hypertext, a term coined in 1963, allows a person to get a document or piece of content by clicking on a coded word or phrase.) Labelled \u201cvague but exciting\u201d by his boss, the proposal at first wasn\u2019t accepted. Berners-Lee teamed up with Robert Cailliau, a Belgian engineer at CERN, to refine the proposal, and in 1990 the Englishman\u2019s boss gave him time to work on the project. After originally calling the project Information Management, Berners-Lee tried out names such as Mine of Information and Information Mesh before settling on WorldWideWeb.\n  By the end of 1990, Berners-Lee, using a Steve Jobs-designed NeXT computer, had developed the key technologies that are the bedrock of the Web, including Hypertext Markup Language (HTML), for creating Web pages; Hypertext Transfer Protocol (HTTP), a set of rules for transferring data across the Web; and Uniform Resource Locators (URLs), or Web addresses for finding a document or page. He also had devised a basic browser and Web server software.\n The beginning of the Web as a publicly available service on the Internet arrived on August 6, 1991, when Berners-Lee published the first-ever website. Fittingly, the site was about the World Wide Web project, describing the Web and how to use it. Hosted at CERN on Berners-Lee\u2019s NeXT computer, the site\u2019s URL was http://info.cern.ch.\n   Berners-Lee didn\u2019t try to cash in on his invention and rejected CERN\u2019s call to patent his Web technology. He wanted the Web to be open and free so it could expand and evolve as rapidly as possible. As he later said, \u201cHad the technology been proprietary, and in my total control, it would probably not have taken off. You can\u2019t propose that something be a universal space and at the same time keep control of it.\u201d\n In 1993, a team at the University of Illinois\u2019 National Center for Supercomputing Applications released Mosaic, the first Web browser to become popular with the general public. The next few years saw the launch of such websites as Yahoo (1994), Amazon (1995), eBay (1995) and Google (1998). By the time Facebook debuted in 2004, there were more than 51 million websites, according to  Internet Live Stats.\n Meanwhile, in 1994, Berners-Lee left CERN for the Massachusetts Institute of Technology, where he founded the World Wide Web Consortium (W3C), an organization that maintains standards for the Web. The low-profile visionary went on to be named one of Time Magazine\u2019s 100 Most Important People of the 20th Century, and in 2004 was knighted by Queen Elizabeth II. In 2009, Berners-Lee started the World Wide Web Foundation, an organization focused on ensuring the Web benefits humanity. During the opening ceremony at the 2012 Summer Olympics in London, he was honored for inventing the Web and tweeted, \u201cThis is for everyone.\u201d", "posttime": "2021-08-06 10:50:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e07\u7ef4\u7f51,years,web", "title": "\u4e07\u7ef4\u7f51\u4eca\u5929\u5df2\u7ecf 30 \u5c81\u4e86", "title_en": "The WWW is 30 years old today", "transed": 1, "url": "https://www.history.com/.amp/news/the-worlds-first-web-site", "via": "", "real_tags": ["\u4e07\u7ef4\u7f51", "years", "web"]}]