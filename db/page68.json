[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1072147, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u4e00\u6b3e\u7814\u7a76\u578b\u8ba1\u7b97\u673a\uff0cEnzian \u4e13\u4e3a\u8ba1\u7b97\u673a\u7cfb\u7edf\u8f6f\u4ef6\u7814\u7a76\u800c\u8bbe\u8ba1\uff0c\u5e76\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\u3002 Enzian \u8282\u70b9\u62e5\u6709\u4e0e\u5927\u578b FPGA \u7d27\u5bc6\u8026\u5408\u7684\u5927\u578b\u670d\u52a1\u5668\u7ea7 CPU\uff0c\u4e24\u4fa7\u5177\u6709\u5145\u8db3\u7684\u4e3b\u5b58\u548c\u7f51\u7edc\u5e26\u5bbd\u3002\u6211\u4eec\u6784\u5efa Enzian \u662f\u4e3a\u4e86\u4e3a\u6211\u4eec\u7814\u7a76\u64cd\u4f5c\u7cfb\u7edf\u3001\u6570\u636e\u5e93\u3001\u786c\u4ef6\u52a0\u901f\u3001\u673a\u5668\u5b66\u4e60\u3001\u7f51\u7edc\u548c\u9ad8\u6027\u80fd\u8ba1\u7b97\u63d0\u4f9b\u4e00\u4e2a\u5e73\u53f0\uff0c\u800c\u4e14\u56e0\u4e3a\u90a3\u91cc\u6ca1\u6709\u4efb\u4f55\u53ef\u6bd4\u7684\u4e1c\u897f\uff0c\u5426\u5219\u6211\u4eec\u65e0\u6cd5\u638c\u63e1\u3002\u73b0\u5728\u5b83\u53ef\u4ee5\u5de5\u4f5c\u4e86\uff0c\u6211\u4eec\u60f3\u8ba9 Enzian \u7cfb\u7edf\u53ef\u4f9b\u5176\u4ed6\u7814\u7a76\u793e\u533a\u4f7f\u7528\u3002\u5982\u679c\u60a8\u60f3\u4e0e Enzian \u5408\u4f5c\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u4f7f\u5176\u66f4\u5e7f\u6cdb\u5730\u53ef\u7528\uff0c\u8bf7\u8054\u7cfb\u6211\u4eec\uff01", "note_en": "As a research computer, Enzian is designed for computer systems software research and deliberately over-engineered. Enzian node has a big server-class CPU closely coupled to a large FPGA, with ample main memory and network bandwidth on both sides.\n      We built Enzian to have a platform for our research into operating systems, databases, hardware acceleration, machine learning, networking, and high-performance computing, and because there was nothing comparable out there that we could get hold of otherwise.\n  Now that it works, we\u2019d like to make Enzian systems available to the rest of the research community. If you want to work with Enzian, or if you might be able to help us make it more widely available, please contact us!", "posttime": "2021-08-09 01:50:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7814\u7a76,research,enzian", "title": "Enzian \u662f\u7531\u82cf\u9ece\u4e16\u8054\u90a6\u7406\u5de5\u5b66\u9662\u7cfb\u7edf\u7ec4\u5236\u9020\u7684\u7814\u7a76\u8ba1\u7b97\u673a", "title_en": "Enzian is a research computer built by the Systems Group at ETH Zurich", "transed": 1, "url": "http://enzian.systems/", "via": "", "real_tags": ["\u7814\u7a76", "research", "enzian"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072146, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u901a\u5e38\u4e0d\u505a\u7edd\u5bf9\u7684\u4e8b\u60c5\uff0c\u4f46\u6211\u73b0\u5728\u77e5\u9053\u4e00\u4ef6\u4e8b\u4ece\u6839\u672c\u4e0a\u662f\u6b63\u786e\u7684\uff1a\u6ca1\u6709\u4eba\u80fd\u9760\u81ea\u5df1\u6210\u4e3a\u4e00\u540d\u4f18\u79c0\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u3002\u4f46\u5728\u4e00\u4e2a\u4e00\u76f4\u4ee5\u8d85\u7ea7\u5de8\u661f\u5fcd\u8005\u3001\u72ec\u72fc\u3001\u81ea\u5b66\u5929\u624d\u7684\u795e\u8bdd\u800c\u81ea\u8c6a\u7684\u884c\u4e1a\u4e2d\uff0c\u4f18\u79c0\u7684\u5f00\u53d1\u4eba\u5458\u4f3c\u4e4e\u4e0d\u662f\u5929\u751f\u7684\u2014\u2014\u4ed6\u4eec\u4ece\u5730\u4e0b\u5d1b\u8d77\uff0c\u5b8c\u5168\u6210\u578b\u5e76\u4e0d\u65ad\u6d8c\u73b0PRs \u4ed6\u4eec\u7684\u9192\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0c\u5728\u6211\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\uff0c\u6211\u8fd8\u6ca1\u6709\u89c1\u8fc7\u4e00\u4e2a\u4eba\u80fd\u591f\u5728\u4e0d\u5411\u4ed6\u4eba\u5b66\u4e60\u7684\u60c5\u51b5\u4e0b\u6210\u529f\u6210\u957f\u4e3a\u4e00\u540d\u79f0\u804c\u7684\u5f00\u53d1\u4eba\u5458\u3002\u800c\u4e14\uff0c\u6211\u62c5\u5fc3\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u884c\u4e1a\uff0c\u6211\u4eec\u5e76\u4e0d\u7ecf\u5e38\u79ef\u6781\u8c08\u8bba\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u6211\u4eec\u9700\u8981\u5176\u4ed6\u4eba\u5728\u5de5\u4f5c\u4e2d\u5e2e\u52a9\u6211\u4eec\u5b66\u4e60\u4e1c\u897f\uff0c\u5e76\u4e14\u6211\u4eec\u9700\u8981\u5728\u6211\u4eec\u7684\u5f00\u53d1\u548c\u5de5\u4f5c\u89c4\u5212\u8fc7\u7a0b\u4e2d\u4e3a\u8fd9\u79cd\u5b66\u4e60\u7559\u51fa\u7a7a\u95f4.\u5728\u201c\u4e13\u5bb6\u521d\u5b66\u8005\u7684\u5d1b\u8d77\u201d\u4e2d\uff0c\u6211\u6bcf\u9694\u51e0\u5e74\u91cd\u65b0\u9605\u8bfb\u4e00\u7bc7\u6587\u7ae0\uff0cErik \u8c08\u5230\u4e86\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u505c\u6b62\u5b66\u4e60\u3002\u4ed6\u7684\u57fa\u672c\u8bba\u70b9\u57fa\u4e8e\u5148\u524d\u5bf9\u6280\u80fd\u4e60\u5f97\u7684\u7814\u7a76\uff0c\u662f\u4eba\u4eec\u5f00\u59cb\u4e60\u5f97\u6280\u80fd\u7684\u901f\u5ea6\u975e\u5e38\u5feb\u3002\u4f46\u662f\uff0c\u5728\u5b66\u4e60\u8fc7\u7a0b\u7684\u67d0\u4e2a\u65f6\u523b\uff0c\u4ed6\u4eec\u4f1a\u505c\u6ede\u4e0d\u524d\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4f5c\u4e3a\u521d\u5b66\u8005\u5b66\u5230\u7684\u6280\u80fd\u5c06\u4f7f\u4ed6\u4eec\u6210\u4e3a\u4e13\u5bb6\u3002\u60f3\u4e00\u60f3\u80fd\u591f\u7f16\u5199\u6253\u5370\u5230\u7ec8\u7aef\u7684\u51fd\u6570\u4e0e\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u8fd4\u56de\u6587\u672c\u7684\u65b9\u6cd5\u7684\u7c7b\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u6587\u672c\u4f20\u9012\u7ed9\u5176\u4ed6\u68c0\u67e5\u5df2\u5904\u7406\u8f93\u5165\u7684\u65b9\u6cd5\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9\u524d\u7aef\u3002\u73b0\u5728\u5047\u8bbe\u8be5\u7c7b\u662f\u4e00\u4e2a\u5fc5\u987b\u6253\u5305\u624d\u80fd\u5728\u4e91\u4e2d\u5de5\u4f5c\u7684\u51fd\u6570\u3002\u800c\u4e14\uff0c\u6700\u91cd\u8981\u7684\u662f\uff0c\u5047\u8bbe\u8be5\u51fd\u6570\u5fc5\u987b\u5728\u4e00\u4e2a repo \u4e2d\u8fdb\u884c\u7248\u672c\u63a7\u5236\uff0c\u5176\u4e2d 5-6 \u4eba\u5b9a\u671f\u5408\u5e76\u4ee3\u7801\uff0c\u901a\u8fc7 CI/CD\uff0c\u5e76\u4e14\u662f\u8fd4\u56de\u67d0\u4e9b\u673a\u5668\u5b66\u4e60\u6a21\u578b\u8f93\u51fa\u7684\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u6709\u5ef6\u8fdf\u9650\u5236\u3002\u60a8\u53ef\u4ee5\u5f88\u5feb\u5730\u7528\u4efb\u4f55\u8bed\u8a00\u7f16\u5199\u6253\u5370\u8bed\u53e5\uff08\u5047\u8bbe\u60a8\u514b\u670d\u4e86\u5728\u672c\u5730\u673a\u5668\u4e0a\u5b89\u88c5\u5b83\u7684\u9ebb\u70e6\uff09\u3002\u4f46\u662f\u8981\u7406\u89e3\u5982\u4f55\u4ece\u6253\u5370\uff08\u201cHello World\u201d\uff09\u5230\u201c\u8fd9\u662f\u4e00\u4e2a\u4e3a\u60a8\u5b9e\u65f6\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u9884\u6d4b\u7684\u5e94\u7528\u7a0b\u5e8f\u201d\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u8ba9\u6211\u4eec\u56e2\u961f\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u5230\u90a3\u4e2a\u5730\u65b9\u5462\uff1f\u6211\u4eec\u5982\u4f55\u5e2e\u52a9\u5176\u4ed6\u4eba\u8d70\u51fa\u9ed1\u6697\u3001\u4ee4\u4eba\u6cae\u4e27\u7684\u5730\u65b9\uff0c\u5373\u4e13\u4e1a\u521d\u5b66\u8005\u7684\u5c40\u90e8\u6700\u4f4e\u70b9\uff0c\u8d8a\u8fc7\u7e41\u661f\uff0c\u8fdb\u5165\u4e91\u7aef\uff1f\u800c\u4e14\uff0c\u6211\u4eec\u5982\u4f55\u5e2e\u52a9\u81ea\u5df1\u6210\u4e3a\u66f4\u597d\u7684\u5f00\u53d1\u4eba\u5458\uff1f\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u60a8\u64c5\u957f\u7f16\u5199\u4ee3\u7801\u4f46\u4e0d\u64c5\u957f\u5ba1\u67e5\uff0c\u90a3\u4e48\u60a8\u5c06\u7f16\u5199\u5927\u91cf\u4ee3\u7801\u800c\u4e0d\u4f1a\u8fdb\u884c\u5927\u91cf\u5ba1\u67e5\uff0c\u56e0\u4e3a\u5bf9\u60a8\u7684\u5ba1\u67e5\u7684\u6700\u521d\u53cd\u9988\u5c06\u662f\u8d1f\u9762\u7684\u3002\u4f60\u5fc5\u987b\u514b\u670d\u5438\u542e\u7684\u5c40\u90e8\u6700\u5c0f\u503c\u3002\n\u2014 Vicki Boykis (@vboykis) 2021 \u5e74 7 \u6708 26 \u65e5 \u5728\u6211\u81ea\u5df1\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\uff0c\u6211\u6ce8\u610f\u5230\u5f00\u53d1\u4eba\u5458\u9700\u8981\u53d8\u5f97\u66f4\u597d\u7684\u4e09\u4ef6\u4e8b\uff1a\u8fd9\u662f\u6211\u6700\u8fd1\u53d1\u73b0\u7684\u5bf9\u6211\u4eec\u73b0\u5728\u79f0\u4e3a\u5fc3\u7406\u5b89\u5168\u7684\u73b0\u8c61\u7684\u6700\u4f73\u63cf\u8ff0\uff1a\u8fdd\u53cd\u76f4\u89c9\u4f46\u786e\u5b9e\u5982\u6b64\uff1a\u60a8\u5c06\u4e0e\u90a3\u4e9b\u8ba9\u60a8\u611f\u5230\u5f88\u81ea\u5728\u7684\u4eba\u4e00\u8d77\u505a\u6700\u806a\u660e\u7684\u5de5\u4f5c \u2014 jckbtchr (@jackbutcher) 2021 \u5e74 7 \u6708 18 \u65e5 \u7b80\u5355\u7684\u6545\u4e8b\u662f\uff0c\u5728\u826f\u597d\u3001\u9ad8\u6548\u7684\u8f6f\u4ef6\u73af\u5883\u4e2d\uff0c\u60a8\u6709\u6df7\u4e71\u7684\u7a7a\u95f4\u5411\u4e0a\u3002\u521d\u7ea7\u5f00\u53d1\u4eba\u5458\u4e2d\u65ad\u751f\u4ea7\uff0c\u4f7f\u516c\u53f8\u635f\u5931\u6570\u5343\u7f8e\u5143\uff0c\u8fd9\u662f\u5173\u4e8e\u8fd9\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u865a\u6784\u6545\u4e8b\u3002\u770b\u5230\u8fd9\u4e2a\u4e4b\u540e\uff0c\u4ed6\u5f00\u59cb\u628a\u684c\u5b50\u4e0a\u7684\u6240\u6709\u4e1c\u897f\u90fd\u653e\u5728\u4e00\u4e2a\u76d2\u5b50\u91cc\u3002\u9996\u5e2d\u6267\u884c\u5b98\u8d70\u5230\u4ed6\u9762\u524d\u8bf4\uff1a\u201c\u4f60\u8981\u53bb\u54ea\u91cc\uff1f\u201d \u201c\u6211\u53ea\u662f\u82b1\u4e86\u516c\u53f8\u8fd9\u4e48\u591a\u94b1\uff0c\u6211\u4ee5\u4e3a\u6211\u88ab\u89e3\u96c7\u4e86\u3002\u201d \u201c\u6211\u4eec\u53ea\u662f\u82b1\u4e86\u6570\u5343\u7f8e\u5143\u6765\u57f9\u8bad\u4f60\u3002\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u653e\u4f60\u8d70\uff1f\u201d\u8fd9\u662f\u53e6\u4e00\u672c\u771f\u5b9e\u7684\u4e66\uff0c\u6765\u81ea\u6211\u6b63\u5728\u9605\u8bfb\u7684\u4e00\u672c\u5f88\u68d2\u7684\u4e66\uff0cGerald Weinberg \u7684\u201c\u8ba1\u7b97\u673a\u7f16\u7a0b\u5fc3\u7406\u5b66\u201d\uff0c\u6211\u5f3a\u70c8\u9f13\u52b1\u6240\u6709\u4ece\u4e8b\u6216\u63a5\u8fd1\u5f00\u53d1\u5de5\u4f5c\u7684\u4eba\u9605\u8bfb\u8fd9\u672c\u4e66\uff0c\u56e0\u4e3a\u5b83\u89e3\u51b3\u4e86\u6211\u4eec\u601d\u8003\u65f6\u7684\u5927\u591a\u6570\u95ee\u9898\u6bcf\u5929\u8003\u8651\u7f16\u7a0b\u2014\u2014\u9879\u76ee\u89c4\u5212\u3001\u56e2\u961f\u7ed3\u6784\u548c\u969c\u788d\u7269\uff0c\u8fd8\u6709\u989d\u5916\u7684\u4ee4\u4eba\u5174\u594b\u7684\u8b66\u544a\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5df2\u7ecf\u5728 1971 \u5e74\u8ba8\u8bba\u8fc7\u5e76\u5199\u8fc7\u3002\n\u6211\u4e0d\u80fd\u518d\u5f3a\u70c8\u63a8\u8350\u300a\u8ba1\u7b97\u673a\u7f16\u7a0b\u5fc3\u7406\u5b66\u300b\u4e86\u3002\u5b83\u6db5\u76d6\u4e86\u6211\u4eec\u4eca\u5929\u5728\u5de5\u4e1a\u4e2d\u8c08\u8bba\u7684\u6bcf\u4e00\u4ef6\u4e8b\u3002\u5b83\u662f\u4ece 1971 \u5e74\u5f00\u59cb\u7684\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u662f\u5fc3\u7406\u5b89\u5168\u3002 pic.twitter.com/I0jltWWZwx \u2014 Vicki Boykis (@vboykis) 2021 \u5e74 8 \u6708 1 \u65e5\u8fd9\u4e2a\u8f76\u4e8b\u662f\u5173\u4e8e\u5f00\u53d1\u4eba\u5458\u6bd4\u5c14\u7684\uff0c\u4ed6\u6b63\u5728\u7814\u7a76\uff08\u8868\u9762\u4e0a\uff09\u5bfc\u5f39\u9632\u5fa1\u7cfb\u7edf\uff0c\u6307\u4ee4\u662f\u7528\u673a\u5668\u4ee3\u7801\u7f16\u5199\u7684\u3002\u4ed6\u5230\u4e86\u4e00\u4e2a\u4ed6\u8ba4\u4e3a\u4ed6\u60f3\u901a\u4e86\u7684\u5730\u6b65\uff0c\u4f46\u7531\u4e8e\u60a8\u53ef\u80fd\u9700\u8981\u5bf9\u5bfc\u5f39\u9632\u5fa1\u7cfb\u7edf\u8fdb\u884c\u7b2c\u4e8c\u6b21\u89c2\u5bdf\uff0c\u4ed6\u8ba9\u739b\u4e3d\u83b2\u68c0\u67e5\u4ed6\u7684\u4ee3\u7801\u3002\u90a3\u65f6\uff0c\u4ee3\u7801\u5ba1\u67e5\u4ecd\u5904\u4e8e\u521d\u671f\u9636\u6bb5\uff0c\u6e29\u4f2f\u683c\u5199\u9053\uff1a\u201c\u4ed6\u7684\u4ef7\u503c\u4f53\u7cfb\uff0c\u5728\u7f16\u7a0b\u65b9\u9762\uff0c\u8868\u660e\u79d8\u5bc6\u7684\u3001\u5360\u6709\u6027\u7684\u7f16\u7a0b\u662f\u4e0d\u597d\u7684\uff0c\u800c\u5f00\u653e\u7684\u3001\u5171\u4eab\u7684\u7f16\u7a0b\u662f\u597d\u7684\u3002\u53ef\u80fd\u5728\u4ed6\u7f16\u5199\u7684\u4ee3\u7801\u4e2d\u53d1\u73b0\u7684\u9519\u8bef\u2014\u2014\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\u672f\u8bed\u201c\u4ed6\u7684\u4ee3\u7801\u201d\u2014\u2014\u53ea\u662f\u4e3a\u4e86\u672a\u6765\u7684\u6539\u8fdb\u800c\u8fdb\u884c\u8c03\u67e5\u7684\u4e8b\u5b9e\uff0c\u800c\u4e0d\u662f\u5bf9\u4ed6\u4e2a\u4eba\u7684\u653b\u51fb\u3002 \u201c\u739b\u4e3d\u83b2\u5728 13 \u884c\u4ee3\u7801\u4e2d\u53d1\u73b0\u4e86 17 \u4e2a\u9519\u8bef\u3002\u6bd4\u5c14\u6ca1\u6709\u751f\u6c14\uff0c\u800c\u662f\u56db\u5904\u8f6c\u8f6c\uff0c\u200b\u200b\u544a\u8bc9\u5927\u5bb6\u8fd9\u6bb5\u4ee3\u7801\u662f\u591a\u4e48\u4e0d\u53ef\u80fd\uff0c\u800c\u4e14\u5979\u53d1\u73b0\u4e86 17 \u4e2a\u9519\u8bef\u662f\u591a\u4e48\u6709\u8da3\u3002\u6b63\u5f53\u4ed6\u8fd9\u6837\u505a\u7684\u65f6\u5019\uff0c\u6709\u51e0\u4e2a\u4eba\u52a0\u5165\u4e86\u8fdb\u6765\uff0c\u56e0\u4e3a\u6b64\u65f6\u8fd9\u662f\u4e00\u4e2a\u6e38\u620f\uff0c\u5e76\u4e14\u53d1\u73b0\u4e86\u66f4\u591a\u7684\u9519\u8bef\u3002\u4e00\u4e2a\u53ef\u80fd\u4ee5\u6bd4\u5c14\u6307\u8d23\u739b\u4e3d\u83b2\u963b\u6b62\u4ed6\u6216\u6bd4\u5c14\u9690\u85cf\u4ed6\u7684\u4ee3\u7801\u800c\u7ed3\u675f\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u4ed6\u8ba4\u4e3a\u5176\u4ed6\u4eba\u4f1a\u8ba4\u4e3a\u4ed6\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u7ed3\u679c\u597d\u5f97\u591a\uff0c\u56e0\u4e3a\u4e8b\u60c5\u662f\u516c\u5f00\u7684\u3002\u597d\u7684\u516c\u53f8\u4e3a\u9519\u8bef\u548c\u8349\u7a3f\u7559\u6709\u4f59\u5730\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5de5\u4f5c\u53ef\u4ee5\u9a6c\u864e\u3002\u76f8\u53cd\uff0c\u68c0\u67e5\u4e00\u6bb5\u4ee3\u7801\u7684\u4eba\u8d8a\u591a\uff08\u8fbe\u5230\u7279\u5b9a\u6570\u91cf n\uff0c\u5176\u4e2d\u66f4\u591a\u7684\u4ee3\u7801\u5ba1\u67e5\u5b9e\u9645\u4e0a\u5f00\u59cb\u6709\u5bb3\uff09\uff0c\u4ee3\u7801\u7684\u9632\u9519\u80fd\u529b\u5c31\u8d8a\u5f3a\u3002\u76f8\u53cd\uff0c\u4f18\u79c0\u7684\u56e2\u961f\u4f1a\u4e3a\u5f00\u53d1\u4eba\u5458\u7559\u4e0b\u4e00\u4e9b\u677e\u61c8\u7684\u7a7a\u95f4\u3002\u4ed6\u4eec\u77e5\u9053\u8fd9\u5c06\u9700\u8981\u4efb\u4f55\u5f00\u53d1\u4eba\u5458\uff0c\u65e0\u8bba\u5176\u6280\u80fd\u6c34\u5e73\u5982\u4f55\uff0c\u5165\u804c\u65f6\u95f4\u5982\u4f55\uff0c\u800c\u4e14\u6700\u7ec8\uff0c\u5f00\u53d1\u4eba\u5458\u90fd\u662f\u5177\u6709\u504f\u89c1\u548c\u4e0d\u540c\u6280\u80fd\u6c34\u5e73\u7684\u4ee3\u7801\u7684\u4eba\u3002\u5b9a\u671f\u5ba1\u67e5\u5f7c\u6b64\u4ee3\u7801\u7684\u56e2\u961f\u4f1a\u76f8\u4e92\u5347\u7ea7\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u4ed6\u4eec\u8fd8\u6dfb\u52a0\u4e86\u4fdd\u62a4\u63aa\u65bd\uff1a\u8fd0\u884c\u624b\u518c\u800c\u4e0d\u662f\u624b\u52a8\u8f93\u5165\u3001\u6613\u4e8e\u56de\u6eda\u7684\u751f\u4ea7\u7cfb\u7edf\u3001\u968f\u65f6\u53ef\u4ee5\u56de\u7b54\u95ee\u9898\u7684\u56e2\u961f\u6210\u5458\u3001\u826f\u597d\u7684\u6587\u6863\uff0c\u5e76\u4e14\u4ed6\u4eec\u6709\u4eba\u5458\u90a3\u4e9b\u7ecf\u5386\u5165\u804c\u57f9\u8bad\u7684\u4eba\u5bf9\u76f8\u540c\u7684\u8fc7\u7a0b\u505a\u51fa\u4e86\u8d21\u732e\u3002\n\u4ed6\u4eec\u8fd8\u63d0\u62d4\u91cd\u89c6\u6240\u6709\u8fd9\u4e9b\u6280\u80fd\u7684\u4eba\uff1a\u8010\u5fc3\u3001\u6307\u5bfc\uff0c\u4ee5\u53ca\u8981\u6c42\u5353\u8d8a\u6280\u672f\u540c\u65f6\u627f\u8ba4\u5b9e\u73b0\u76ee\u6807\u6240\u9700\u6761\u4ef6\u7684\u4eba\u3002\u4f60\u63d0\u62d4\u7684\u4eba\u4f1a\u544a\u8bc9\u4f60\u7684\u7ec4\u7ec7\u7ed3\u6784\u56fe\u4f60\u5e0c\u671b\u7ec4\u7ec7\u7684\u5916\u89c2\uff0c\u6240\u4ee5\u91cd\u8981\u7684\u662f\u8981\u7a81\u51fa\u5206\u4eab\u8fd9\u4e9b\u4ef7\u503c\u89c2\u7684\u4eba\u5e76\u4e3a\u7ec4\u7ec7\u5b9a\u4e0b\u57fa\u8c03\u3002\u5728\u4e2d\u4e16\u7eaa\uff0c\u793e\u533a\u5728\u884c\u4e1a\u4e2d\u5c06\u6700\u4f73\u5b9e\u8df5\u4f20\u9012\u7ed9\u540e\u4ee3\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u5b66\u5f92\u5236\u3002\u5982\u679c\u4f60\u7684\u7236\u6bcd\u5e0c\u671b\u4f60\u5728 12 \u5c81\u5de6\u53f3\u6210\u4e3a\u4e00\u540d\u917f\u9152\u5e08\uff0c\u4f60\u4f1a\u6536\u62fe\u884c\u56ca\uff0c\u5728\u8461\u8404\u56ed\u91cc\u4f4f\u4e0a\u51e0\u5e74\uff08\u4e00\u4e2a\u8bf1\u4eba\u7684\u60f3\u6cd5\uff09\uff0c\u5728\u90a3\u91cc\u7ecf\u9a8c\u4e30\u5bcc\u7684\u917f\u9152\u5e08\u4f1a\u652f\u4ed8\u4f60\u7684\u4f4f\u623f\u548c\u4f4f\u5bbf\u8d39\u7528\u4ee5\u6362\u53d6\u4f60\u505a\u4e86\u6240\u6709\u7e41\u91cd\u7684\u5de5\u4f5c\uff0c\u6700\u7ec8\u4f1a\u5bfc\u81f4\u4f60\u5728\u4f60\u7684\u4ea4\u6613\u4e2d\u53d8\u5f97\u719f\u7ec3\u3002\u6ca1\u6709\u5b66\u4e60\u5982\u4f55\u6784\u5efa Docker \u5bb9\u5668\u6216\u5904\u7406\u751f\u4ea7\u4e2d\u65ad\u7684\u5b66\u5f92\u671f\u3002\u6211\u4eec\u4e2a\u4eba\u62e5\u6709\u7684\u53ea\u6709\u4e66\u7c4d\uff08\u5982\u679c\u5b83\u4eec\u80fd\u591f\u8ddf\u4e0a\u6280\u672f\u53d8\u5316\u7684\u901f\u5ea6\uff09\u548c\u4e92\u8054\u7f51\u8d44\u6e90\uff0c\u8fd9\u4e9b\u8d44\u6e90\u53ef\u80fd\u6b63\u786e\u4e5f\u53ef\u80fd\u4e0d\u6b63\u786e\u3001\u8fc7\u65f6\u6216\u6536\u8d39\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u8ba9\u4e00\u4f4d\u4f18\u79c0\u7684\u8d44\u6df1\u4eba\u58eb\u966a\u4f34\u5728\u8eab\u8fb9\uff0c\u4ed6\u81f3\u5c11\u53ef\u4ee5\u7ed9\u4f60\u4e00\u70b9\u65f6\u95f4\u3002\u901a\u5e38\uff0c\u8fd9\u5b8c\u5168\u662f\u5076\u7136\u53d1\u751f\u7684\uff0c\u6211\u5e0c\u671b\u6211\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\u6765\u4e13\u95e8\u4e3a\u4f60\u5b9e\u73b0\u5b83\uff0c\u4f46\u662f\u6211\u5171\u4e8b\u8fc7\u7684\u6240\u6709\u975e\u5e38\u597d\u7684\u4eba\uff0c\u6211\u5728\u6211\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\u5b8c\u5168\u968f\u673a\u9047\u5230\u4e86\u4ed6\u4eec.\u4f46\u662f\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u544a\u8bc9\u60a8\u7ec4\u7ec7\u4e2d\u7684\u8fd9\u4e9b\u4eba\u662f\u8c01\uff0c\u5e76\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u5c1d\u8bd5\u4e0e\u4ed6\u4eec\u5408\u4f5c\u3002\u4f18\u79c0\u7684\u9ad8\u7ea7\u5f00\u53d1\u4eba\u5458\u4f1a\u95ee\u5f88\u591a\u95ee\u9898\u624d\u80fd\u627e\u5230\u95ee\u9898\u7684\u6839\u6e90\uff0c\u901a\u5e38\u4ed6\u4eec\u4f1a\u516c\u5f00\u63d0\u95ee\uff0c\u4ee5\u4fbf\u5176\u4ed6\u4eba\u627e\u5230\u7b54\u6848\u3002\u4f18\u79c0\u7684\u9ad8\u7ea7\u5f00\u53d1\u4eba\u5458\u4f1a\u5f04\u6e05\u695a\u590d\u6742\u7cfb\u7edf\u7684\u5de5\u4f5c\u539f\u7406\u3002\u4f18\u79c0\u7684\u9ad8\u7ea7\u5f00\u53d1\u4eba\u5458\u4f1a\u4ed4\u7ec6\u5ba1\u67e5 PR \u5e76\u63d0\u4f9b\u53cd\u9988\uff0c\u4ed6\u4eec\u4e5f\u4f1a\u56de\u7b54\u95ee\u9898\u3002\u5f88\u96be\u5b9a\u4e49\u4e00\u4e2a\u4f18\u79c0\u7684\u5f00\u53d1\u4eba\u5458\u4f1a\u505a\u4ec0\u4e48\uff0c\u4f46\u4f60\u5f88\u53ef\u80fd\u77e5\u9053\u4f60\u7ec4\u7ec7\u4e2d\u8c01\u662f\u4f18\u79c0\u7684\u4eba\uff0c\u56e0\u4e3a\u4f60\u603b\u662f\u542c\u8bf4\u4ed6\u4eec\uff0c\u800c\u4e14\u56e0\u4e3a\u5982\u679c\u4f60\u6709\u95ee\u9898\uff0c\u4ed6\u4eec\u662f\u4f60\u7684\u7b2c\u4e00\u4e2a\u4eba\u60f3\u4e00\u60f3\u4ec0\u4e48\u65f6\u5019\u53bb\u5bfb\u6c42\u5e2e\u52a9\u3002\u4e00\u65e6\u4f60\u627e\u5230\u4ed6\u4eec\uff0c\u60f3\u529e\u6cd5\u9760\u8fd1\u4ed6\u4eec\u5e76\u5438\u6536\u4ed6\u4eec\u7684\u77e5\u8bc6\u3002\u5f53\u4ed6\u4eec\u8bf4\u8bdd\u65f6\u503e\u542c\uff0c\u5e76\u89c2\u5bdf\u4ed6\u4eec\u5982\u4f55\u5ba1\u67e5\u4ee3\u7801\u3002\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u4e00\u79cd\u597d\u65b9\u6cd5\u662f\u8981\u6c42\u5728 PR \u8bc4\u8bba\u4e2d\u6807\u8bb0\u56e2\u961f\u3002\u5982\u679c\u60a8\u8fd8\u4e0d\u80fd\u8fdb\u884c\u4ee3\u7801\u5ba1\u67e5\uff0c\u8bf7\u5e2e\u52a9\u4ed6\u4eec\u7f16\u5199\u6587\u6863\u3002\u5982\u679c\u4f60\u80fd\u4ece\u4ed6\u4eec\u7684\u76d8\u5b50\u91cc\u62ff\u8d70\u4e00\u4ef6\u5c0f\u4e8b\uff0c\u4ed6\u4eec\u4e0b\u6b21\u4f1a\u611f\u8c22\u4f60\u7684\u5e2e\u52a9\u3002\u5982\u679c\u60a8\u81ea\u5df1\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u4f18\u79c0\u7684\u8d44\u6df1\u4eba\u58eb\uff0c\u8bf7\u6ce8\u610f\uff0c\u6210\u4e3a\u4f18\u79c0\u7684\u8d44\u6df1\u4eba\u58eb\u4e0d\u4ec5\u4ec5\u662f\u7f16\u5199\u826f\u597d\u3001\u6b63\u786e\u7684\u4ee3\u7801\u7684\u8d23\u4efb\uff0c\u5c3d\u7ba1\u8fd9\u672c\u8eab\u5c31\u662f\u4e00\u9879\u91cd\u5927\u800c\u91cd\u8981\u7684\u8d23\u4efb\u3002\u8fd9\u4e5f\u662f\u5728\u8bad\u7ec3\u5176\u4ed6\u4eba\u50cf\u4f60\u4e00\u6837\u5bcc\u6709\u6210\u6548\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u7ec4\u7ec7\u3001\u56e2\u961f\u548c\u9ad8\u7ea7\u4eba\u5458\u5728\u5e2e\u52a9\u4ed6\u4eba\u5347\u7ea7\u548c\u63d0\u9ad8\u751f\u4ea7\u529b\u65b9\u9762\u7684\u4f5c\u7528\u3002\u5728\u5f15\u5bfc\u6211\u4eec\u7684\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u81ea\u5df1\u7684\u89d2\u8272\u662f\u4ec0\u4e48\uff1f\u5b66\u4e60\u5982\u4f55\u5728\u6b63\u786e\u7684\u65f6\u95f4\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\u662f\u6210\u4e3a\u5f00\u53d1\u4eba\u5458\u7684\u57fa\u672c\u6280\u80fd\u4e4b\u4e00\u3002\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\u9700\u8981\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u3001\u5927\u91cf\u8bd5\u9a8c\u548c\u52aa\u529b\uff0c\u5e76\u9700\u8981\u5927\u91cf\u4fee\u8865\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u76f4\u5230\u95ee\u9898\u53d8\u5f97\u6709\u610f\u4e49\u4e3a\u6b62\u3002\u5c24\u5176\u662f\u4f5c\u4e3a\u4e00\u540d\u5927\u4e09\u5b66\u751f\uff0c\u63d0\u51fa\u597d\u7684\u95ee\u9898\u53ef\u80fd\u4f1a\u8ba9\u4eba\u671b\u800c\u751f\u754f\u3002\u6211\u6700\u8fd1\u610f\u8bc6\u5230\uff0c\u524d\u8f88\u5584\u4e8e\u63d0\u95ee\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u4ed6\u4eec\u5df2\u7ecf\u77e5\u9053\u81ea\u5df1\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002 \u201c\u6211\u662f\u4e00\u540d\u9ad8\u7ea7\u5f00\u53d1\u4eba\u5458\uff0c\u6211\u53ea\u662f\u67e5\u627e\u4e86\u5982\u4f55\u521b\u5efa NumPy \u6570\u7ec4\u7b49\u3002\u201d\u4f46\u6211\u521a\u521a\u4ece\u8fd9\u6761\u8bc4\u8bba\u4e2d\u610f\u8bc6\u5230\u4e00\u4e2a\u95ee\u9898\uff1a\u4f5c\u4e3a\u8d44\u6df1\u4eba\u58eb\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u6211\u4eec\u9700\u8981\u67e5\u627e\u4ec0\u4e48\u3002 https://t.co/KZT6nrWyaC pic.twitter.com/iZsQZIHzCl \u2014 Vicki Boykis (@vboykis) 2021 \u5e74 7 \u6708 29 \u65e5\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u63d0\u51fa\u611a\u8822\u95ee\u9898\u7684\u73af\u5883\u5f88\u91cd\u8981\u3002\u6211\u89c1\u8fc7\u7684\u6700\u597d\u7684\u5904\u7406\u65b9\u6cd5\u4e4b\u4e00\u662f\u5728 Slack \u4e0a\u6709\u4e00\u4e2a#dumbquestions \u9891\u9053\u3002\u53e6\u4e00\u4e2a\u662f\u8ba9\u4f18\u79c0\u7684\u8d44\u6df1\u4eba\u58eb\u5728\u4f1a\u8bae\u4e0a\u63d0\u51fa\u770b\u4f3c\u7b80\u5355\u7684\u95ee\u9898\uff0c\u4ee5\u589e\u5f3a\u4ed6\u4eba\u7684\u80fd\u529b\u3002\u5982\u679c\u8fd9\u4e09\u4ef6\u4e8b\u5c31\u8fd9\u4e48\u7b80\u5355\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u6bcf\u5929\u90fd\u505a\u5462\uff1f\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u96c7\u4f63\u5927\u91cf\u7684\u521d\u7ea7\u4eba\u5458\u5e76\u57f9\u8bad\u4ed6\u4eec\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u521b\u9020\u4eba\u4eec\u53ef\u4ee5\u5b66\u4e60\u7684\u5730\u65b9\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u6559\u4eba\u4eec\u5982\u4f55\u63d0\u51fa\u597d\u95ee\u9898\uff1f\n\u4ee4\u4eba\u6cae\u4e27\u7684\u7b54\u6848\u662f\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5b8c\u5168\u4e0d\u53ef\u89c1\u7684\uff0c\u5e76\u4e14\u5728\u4efb\u4f55\u5355\u4e2a\u7279\u5b9a\u4ea7\u54c1\u6216\u516c\u53f8\u7684\u5e95\u7ebf\u4e2d\u51e0\u4e4e\u90fd\u4e0d\u660e\u663e\uff0c\u800c\u4e14\u51e0\u4e4e\u4e0d\u53ef\u80fd\u89e3\u91ca\u5b83\u4eec\uff0c\u56e0\u4e3a\u77e5\u8bc6\u5de5\u4f5c\u4ecd\u7136\u65e0\u6cd5\u8861\u91cf\u751f\u4ea7\u529b\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\u800c\u4e14\uff0c\u6b64\u5916\uff0c\u5728\u6267\u884c\u5c42\u9762\uff0c\u5f88\u96be\u544a\u8bc9\u90a3\u4e9b\u6307\u5bfc\u548c\u8fdb\u884c\u5185\u90e8\u57f9\u8bad\u7684\u56e2\u961f\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u57fa\u4e8e\u5185\u90e8\u6d41\u7a0b\u7684\u56e2\u961f\uff0c\u5e76\u5956\u52b1\u90a3\u4e9b\u6295\u5165\u5de5\u4f5c\u7684\u56e2\u961f\uff0c\u9664\u975e\u4f18\u79c0\u7684\u56e2\u961f\u662f\u8fd8\u64c5\u957f\u8425\u9500\u81ea\u5df1\uff0c\u5e76\u5728\u57f9\u8bad\u65f6\u5c3d\u5feb\u53d1\u5e03\u597d\u7684\u4ee3\u7801\u3002\u4f46\u662f\uff0c\u6211\u575a\u4fe1\u5373\u4f7f\u5f00\u59cb\u8c08\u8bba\u4e8b\u7269\u5e76\u7ed9\u5b83\u4eec\u8d77\u540d\u5b57\u4e5f\u662f\u4e8b\u7269\u7684\u5f00\u59cb\uff0c\u6240\u4ee5\u6211\u5728\u8fd9\u91cc\u5206\u4eab\u8fd9\u4e2a\uff0c\u56e0\u4e3a\u6211\u5e0c\u671b\u66f4\u591a\u7684\u4eba\u5c06\u5176\u89c6\u4e3a\u4ed6\u4eec\u7684\u4e00\u90e8\u5206\u65e5\u5e38\u5de5\u4f5c\u6d41\u7a0b\u3002", "note_en": "I don\u2019t usually deal in absolutes, but I now know this one thing to be fundamentally true: no one becomes a good software engineer by themselves. But in an industry that has always prided itself on the myth of the superstar ninja, the  lone wolf, the self-taught genius, it can seem like good developers are not born - they rise out of the ground, fully-formed and churning out PRs their wake.\n In my career so far, I haven\u2019t seen a single person who has been able to grow successfully as a competent developer without learning from others. And, I\u2019m concerned that, as an industry, we don\u2019t often actively talk about the fact that  we need other people at work to help us learn things, and that we need room for this learning in our development and work planning processes.\n In  \u201cRise of the Expert Beginner\u201d, an essay that I re-read every couple of years, Erik talks about how developers stop learning. His basic thesis, based on previous studies of skill acquisition, is that people start acquiring skills very quickly. But, at some point in the learning process, they get to a point where they stagnate because the skills that they learned as a beginner will carry them to being an expert.\n Think about the difference between being able to write functions that print out to your terminal versus creating a class with methods that return text to pass to other methods that checks for sanitized inputs, and then passes it to a front-end. Now imagine that that class is a  function that has to be packaged to work in the cloud. And, on top of that, imagine that the function has to be version-controlled in a repo where 5-6 people are regularly merging code, pass CI/CD, and  is part of a system that returns the outputs of some machine learning model with latency constraints.\n You can write print statements in any language pretty quickly (given that  you get over the hump of installing it on your local machine). But it takes a very long time to understand how to get from print(\u201cHello World\u201d) to \u201cHere\u2019s an app that is making machine learning predictions for you in real-time.\u201d\n So how do we get everyone on our teams to that place? How do we help others get out of the dark, frustrating place that is the local minima of suckiness that is the expert beginner, past the stars, and into the cloud? And, how can we help ourselves become better developers?\n I.e if you are good at writing code but not at reviewing it, you\u2019re gonna be writing a lot of code and not doing a lot of reviews since the initial feedback to your reviews will be negative. You have to overcome that local minima of suckiness.\n\u2014 Vicki Boykis (@vboykis)  July 26, 2021\n There are three things that I\u2019ve noticed in my own career that developers need to become better:\n   This is the best recent description I\u2019ve found of the phenomenon we now call psychological safety:\n Counterintuitive but true: You\u2019ll do your smartest work with people you\u2019re comfortable being dumb around\n\u2014 jckbtchr (@jackbutcher)  July 18, 2021\n  The simple story is that, in a good, productive software environment, you have the room to mess up. The apocryphal story about how this works is the one where the junior developer breaks production, costing the company thousands of dollars. After he sees this, he starts putting everything on his desk in a box. The CEO comes up to him and says, \u201cWhere are you going?\u201d \u201cI just cost the company so much money, I figured I was fired.\u201d \u201cWe just paid thousands of dollars to train you. Why would we let you go?\u201d\n Here\u2019s another real one one, from an amazing book I\u2019m reading, Gerald Weinberg\u2019s  \u201cThe Psychology of Computer Programming\u201d, which I strongly encourage everyone who works in or near development to read because it addresses most of the issues we think about when we think about programming on a daily basis - project planning, team structure, and blockers, with the additional mindblowing caveat that all of this was already discussed and written about in 1971.\n I cannot recommend The Psychology of Computer Programming any more strongly. It covers every single thing we talk about in industry today. It is from 1971. For example, here is psychological safety.  pic.twitter.com/I0jltWWZwx\n\u2014 Vicki Boykis (@vboykis)  August 1, 2021\n The anecdote is about a developer, Bill, who was working on (ostensibly) a missile defense system, with instructions written in machine code. He got to a point where he thought he figured it out, but since you probably need a second set of eyes on a missile defense system, he asked Marilyn to review his code.\n Code review was still in the nascent stages in those days, and Weinberg writes, \u201cHis value system, when it came to programming, dictated that secretive, possessive programming was bad and that open, shared programming was good. Errors that might be found in code he had written - not \u201chis code\u201d for the terminology was not used here - were simply facts to be exposed to investigation with an eye to future improvement, not attacks on his person. \u201c\n Marilyn found 17 bugs in the 13 lines of code. Instead of fuming, Bill\u2019s reaction was to go around and tell everyone how impossible this code was, and how hilarious it was that she had found 17 bugs. While he was doing that, a few people joined in, for at this point, it was a game, and found a few more bugs. A scenario that could have ended with Bill accusing Marilyn of blocking him or of Bill hiding his code because he thought others would think he was a bad developer ended up much better because things were out in the open.\n Good companies leave room for bugs and rough drafts. It doesn\u2019t mean that work can be sloppy. On the contrary, the more people that check a piece of code (up to a certain number n where more code reviews actually start to be detrimental), the more error-proof the code becomes. Good teams, instead, leave the developer room for some slack. They know it\u2019s going to take any developer, regardless of skill level, time to onboard, and that, ultimately, developers are humans with biases and different skill levels of code.\n Teams that review each other\u2019s code regularly level each other up.In the process, they also add safeguards: runbooks instead of manual entry, production systems with easy rollback, team members who are readily available to answer questions, good documentation, and they have people who go through onboarding contribute to the same process.\n They also promote people who value all of these skills: patience, mentorship, and people who demand technical excellence while acknowledging what it takes to get there. Who you promote will tell your org chart how you want the organization to look, so it\u2019s important to spotlight people who share these values and set the tone for the organization.\n  In the Middle Ages, the way that communities passed on best practices to future generations  in the trades was through apprenticeships. If your parents wanted you to be  a winemaker, around age 12, you\u2019d pack your bags off and go live in a vineyard for several years (a tantalizing idea), where a seasoned winemaker would pay for your housing and lodging in return for you doing all the gruntwork that would eventually lead to you becoming skilled in your trade.\n There is no apprenticeship for learning how to build Docker containers or dealing with prod outages. All we have at our own personal disposal are books (if they can keep up with how quickly tech changes) and internet resources which may or may not be correct, or out of date, or paywalled.\n The antidote to this is being around just one good senior person who can give you at least a little of their time. Usually, this happens entirely by chance, and I wish I had a good recipe for how to make it happen for you specifically, but all of the very good people I\u2019ve worked with, I\u2019ve come across them entirely randomly in my career.\n There is a way, though, to tell who those people are in your organization, and to try to work with them if at all possible. Good senior developers  ask lots of questions to get to the root of problems, and usually they ask them publicly so others can find out the answer. Good senior developers figure out how  complicated systems work. Good senior developers carefully review PRs and give feedback, and  they also answer questions. It\u2019s hard to define what a good developer does absolutely, but chances are you know who the good people in your organization are, because you\u2019re always hearing about them, and because, if you have a question, they\u2019re the first person you think about when going to for help.\n Once you find them, find ways to be near them and absorb their knowledge. Listen when they talk, and watch how they review code. One great way to do this is to ask to tag-team on PR reviews. If you\u2019re not at the point where you can do code reviews yet, help them write documentation. If you can take even one small thing off their plate, they\u2019ll be grateful for your help next time.\n If you, yourself are the good,senior person in this situation, be aware that being a good, senior person is a responsibility that is more than just writing good, correct code, although that in itself is a large, important responsibility. It\u2019s also training other people to be as productive as you are.\n  We\u2019ve so far talked about the role of the organization, the team, and senior-level people in helping others to level up and become productive. What is our own role in bootstrapping our learning?\n Learning how to ask the right questions at the right time is one of the fundamental skills of being a developer. Formulating the right question takes a lot of time, a lot of trial and effort, and a lot of tinkering with different solutions until the question even makes sense.\n Especially as a junior, it can be very daunting to ask good questions.Something I realized recently is that one of the reasons senior people are good at asking questions is that they already know the shape of their expertise.\n &#34;I&#39;m a senior developer and I just looked up how to create a NumPy array, etc.&#34; But there&#39;s a problem here that I just realized from this comment: As senior people we can do this because we know what we need to look up.  https://t.co/KZT6nrWyaC  pic.twitter.com/iZsQZIHzCl\n\u2014 Vicki Boykis (@vboykis)  July 29, 2021\n This is why an evnironment where it\u2019s ok to ask stupid questions is important. One of the best ways I\u2019ve seen of dealing with this is having a #dumbquestions channel on Slack. Another is having the Good Senior People ask seemingly simple questions in meetings to empower others.\n  If it\u2019s as easy as these three things, why don\u2019t we do all of them every day? Why don\u2019t we hire tons of junior people and train them up, why don\u2019t we create places where people can learn, and why don\u2019t we all teach people how to ask good questions?\n The depressing answer is that all of these are completely invisible and almost not evident at all in the bottom line of any single given product or company, and it\u2019s almost impossible to account for them since knowledge work is still impossible to measure productivity-wise. In most cases, they\u2019re a nice-to-have. And, additionally, at the executive level, it can be very hard to tell teams that mentor and do internal training from ones that don\u2019t based on internal process alone and reward the ones that are putting in the work, unless the good teams are also good at marketing themselves and ship good code just as quickly as they train.\n However, I\u2019m a firm believer that even starting to talk about things and giving them a name is the beginning of something, and so here I am sharing this, because I\u2019m hopeful that more people will think about it as part of their daily workflows.", "posttime": "2021-08-09 01:49:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5c40\u90e8,minima,\u4ee3\u7801", "title": "Suckiness \u7684\u5c40\u90e8\u6700\u5c0f\u503c", "title_en": "The Local Minima of Suckiness", "transed": 1, "url": "http://veekaybee.github.io/2021/08/05/local-minima-of-suckiness/", "via": "", "real_tags": ["\u5c40\u90e8", "minima", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "949004924e0a52f9cd492d71714a1a42.jpg", "infoid": 1072145, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6d77\u602a\u5728\u5730\u7403\u4e0a\u5927\u591a\u6570\u822a\u6d77\u6587\u5316\u7684\u795e\u8bdd\u548c\u4f20\u8bf4\u4e2d\u626e\u6f14\u7740\u91cd\u8981\u7684\u89d2\u8272\uff0c\u5e76\u4e14\u62e5\u6709\u5982\u6b64\u9f13\u821e\u4eba\u5fc3\u7684\u6d77\u6d0b\u751f\u7269\u591a\u6837\u6027\uff0c\u4e0d\u96be\u770b\u51fa\u539f\u56e0\u3002\u4e0e\u9c7c\u7684\u9ad8\u7ea7\u7b56\u5c55\u4eba\u5965\u5229\u5f17\u00b7\u514b\u91cc\u95e8\u548c\u8f6f\u4f53\u52a8\u7269\u7684\u9ad8\u7ea7\u7b56\u5c55\u4eba\u4e54\u6069\u00b7\u963f\u5e03\u83b1\u7279\u4e00\u8d77\u63a2\u7d22\u6f5c\u4f0f\u5728\u535a\u7269\u9986\u6e7f\u85cf\u54c1\u4e2d\u7684\u6614\u65e5\u5947\u5999\u6d77\u602a\u80cc\u540e\u7684\u73b0\u5b9e\u7075\u611f\u3002\u6d77\u5996\u8d77\u6e90\u4e8e\u65af\u582a\u7684\u7eb3\u7ef4\u4e9a\u6c11\u95f4\u4f20\u8bf4\uff0c\u901a\u5e38\u88ab\u63cf\u8ff0\u4e3a\u4e00\u79cd\u5177\u6709\u653b\u51fb\u6027\u7684\u5934\u8db3\u7c7b\u751f\u7269\uff0c\u80fd\u591f\u6467\u6bc1\u6574\u8258\u8239\u5e76\u5c06\u6c34\u624b\u62d6\u5165\u5384\u8fd0\u3002\u4e54\u6069\u8bf4\uff1a\u201c\u4e16\u754c\u5404\u5730\u7684\u8bb8\u591a\u6587\u5316\u90fd\u6709\u5173\u4e8e\u6709\u89e6\u624b\u7684\u91ce\u517d\u9a9a\u6270\u6d77\u5458\u6216\u901a\u5e38\u8d77\u4e0d\u6765\u7684\u795e\u8bdd\u6216\u4f20\u8bf4\u3002\u201d\u5728\u53e4\u5e0c\u814a\uff0c\u4e9a\u91cc\u58eb\u591a\u5fb7\u548c\u666e\u6797\u5c3c\u5199\u8fc7\u5173\u4e8e teuthos\uff08\u9c7f\u9c7c\uff09\u7684\u6587\u7ae0\u3002\u6709\u5965\u5fb7\u8d5b\u4e2d\u7684 Scylla \u548c\u6765\u81ea\u52a0\u52d2\u6bd4\u6d77 (Lusca)\u3001\u65e5\u672c (Akkorokamui) \u548c\u65b0\u897f\u5170 (Te Wheke-a-Muturangi) \u7684\u7c7b\u4f3c\u795e\u8bdd\u3002\u4e54\u6069\u8bf4\uff1a\u201c\u9c7f\u9c7c\u548c\u7ae0\u9c7c\u786e\u5b9e\u662f\u4e0d\u5bfb\u5e38\u7684\u52a8\u7269\u3002\u4ed6\u4eec\u7684\u8eab\u4f53\u8ba1\u5212\u4e0e\u6211\u4eec\u5728\u6d77\u4e2d\u6240\u77e5\u7684\u4efb\u4f55\u5176\u4ed6\u4e8b\u7269\u90fd\u4e0d\u76f8\u4f3c\u3002\u5b83\u4eec\u5feb\u901f\u79fb\u52a8\uff0c\u5b83\u4eec\u7684\u8eab\u4f53\u3001\u624b\u81c2\u548c\u89e6\u624b\u79fb\u52a8\u7684\u65b9\u5f0f\u4f3c\u4e4e\u523a\u6fc0\u4e86\u6211\u4eec\u5bf9\u672a\u77e5\u4e8b\u7269\u7684\u6050\u60e7\u3002 \u201c\u6211\u8ba4\u4e3a\u5b83\u4eec\u662f\u5982\u6b64\u5947\u602a\u7684\u751f\u7269\uff0c\u4e00\u4e9b\u975e\u5e38\u5927\u7684\u7269\u79cd\u5f88\u5c11\u88ab\u770b\u5230\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u5f88\u53ef\u80fd\u6210\u4e3a\u6d77\u5996\u548c\u5176\u4ed6\u6d77\u517d\u4f20\u8bf4\u7684\u8d77\u70b9\u3002\n\u201c\u6211\u4eec\u8ba4\u4e3a\u53d1\u751f\u7684\u4e8b\u60c5\u662f\uff0c\u5de8\u578b\u9c7f\u9c7c\u548c\u5927\u7ae0\u9c7c\u7684\u90e8\u5206\u6d88\u5316\u6216\u8150\u70c2\u7684\u9057\u9ab8\u88ab\u51b2\u4e0a\u6d77\u6ee9\uff0c\u4eba\u4eec\u5f00\u59cb\u731c\u6d4b\u5b83\u4eec\u53ef\u80fd\u662f\u4ec0\u4e48\u3002 \u201c\u5728\u632a\u5a01\uff0c\u6d77\u5996\u795e\u8bdd\u4e0d\u65ad\u53d1\u5c55\uff0c\u8fd9\u79cd\u88ab\u51b2\u6bc1\u7684\u6807\u672c\u88ab\u89e3\u91ca\u4e3a\u6765\u81ea\u4e0a\u5e1d\u6216\u9b54\u9b3c\u7684\u4fe1\u606f\uff0c\u6709\u65f6\u88ab\u79f0\u4e3a\u6d77\u5929\u4f7f\u3001\u6d77\u9b54\u9b3c\u6216\u6d77\u50e7\u3002\u201d\u4ed6\u8865\u5145\u8bf4\uff0c\u201c\u8fd9\u4e9b\u4e8b\u60c5\u662f\u5206\u5f00\u53d1\u751f\u7684\uff0c\u4e16\u754c\u5404\u5730\u7684\u4eba\u4eec\u63d0\u51fa\u4e86\u7c7b\u4f3c\u7684\u7b54\u6848\u548c\u795e\u8bdd\u2014\u2014\u8fd9\u662f\u795e\u8bdd\u5f62\u5f0f\u7684\u8d8b\u540c\u8fdb\u5316\u7684\u4e00\u4e2a\u6848\u4f8b\u3002\u201d\u5de8\u578b\u9c7f\u9c7c (Architeuthis dux) \u4e8e 1857 \u5e74\u9996\u6b21\u88ab\u897f\u65b9\u79d1\u5b66\u5206\u7c7b\uff0c\u79d1\u5b66\u5bb6\u4eec\u4ecd\u5728\u5fd9\u4e8e\u89e3\u5f00\u4ed6\u4eec\u7684\u5965\u79d8\u3002 \u201c\u547d\u540d\u548c\u5206\u7c7b\u4e00\u79cd\u65b0\u52a8\u7269\u53ea\u662f\u4e00\u4e2a\u5f00\u59cb\uff0c\u201d\u4e54\u6069\u8bf4\u3002 \u201c\u6211\u4eec\u77e5\u9053\u5b83\u662f\u771f\u5b9e\u7684\uff0c\u800c\u4e0d\u662f\u4eba\u4eec\u60f3\u8c61\u4e2d\u7684\u795e\u8bdd\u4e2d\u7684\u91ce\u517d\uff0c\u4f46\u6211\u4eec\u4ecd\u7136\u53ea\u662f\u5f00\u59cb\u4e86\u89e3\u5b83\u4eec\u3002\u201d\u5de8\u578b\u9c7f\u9c7c\u751f\u6d3b\u5728\u4e16\u754c\u5404\u5730\u7684\u6e29\u5e26\u6c34\u57df\uff0c\u751f\u6d3b\u5728\u5730\u8868\u4ee5\u4e0b 200-1,400 \u7c73\u4e4b\u95f4\u3002\u4eba\u4eec\u8ba4\u4e3a\u96cc\u6027\u53ef\u4ee5\u957f\u5230 13 \u7c73\uff0c\u800c\u7a0d\u5c0f\u7684\u96c4\u6027\u53ef\u4ee5\u957f\u5230 10 \u7c73\u3002\u5de8\u578b\u9c7f\u9c7c\u4e0d\u6311\u98df\u2014\u2014\u5b83\u4eec\u6355\u98df\u9c7c\u7c7b\u548c\u7532\u58f3\u7c7b\u52a8\u7269\uff0c\u4e5f\u5403\u98df\u3002\u79d1\u5b66\u5bb6\u4eec\u53d1\u73b0\u4e86\u4e00\u4e9b\u81ea\u76f8\u6b8b\u6740\u7684\u8bc1\u636e\uff0c\u4f46\u83dc\u5355\u4e0a\u6ca1\u6709\u8239\u53ea\u7684\u8ff9\u8c61\u3002\n\u4ed6\u4eec\u6700\u5927\u7684\u9002\u5e94\u662f\u4ed6\u4eec\u7684\u5927\u773c\u775b\u3002\u5de8\u578b\u9c7f\u9c7c\u62e5\u6709\u5730\u7403\u4e0a\u6240\u6709\u751f\u7269\u7684\u7b2c\u4e8c\u5927\u773c\u775b\uff0c\u7528\u4e8e\u5e2e\u52a9\u63a2\u6d4b\u548c\u907f\u5f00\u62b9\u9999\u9cb8\uff0c\u62b9\u9999\u9cb8\u662f\u552f\u4e00\u5927\u5230\u8db3\u4ee5\u5728\u5b83\u4eec\u5b8c\u5168\u957f\u5927\u540e\u5403\u6389\u5de8\u578b\u9c7f\u9c7c\u7684\u6355\u98df\u8005\u3002\u867d\u7136\u5176\u4ed6\u4e00\u4e9b\u8f83\u5c0f\u7684\u9c7f\u9c7c\u79cd\u7c7b\u662f\u597d\u6597\u7684\u730e\u98df\u8005\uff0c\u4f46\u4eba\u4eec\u8ba4\u4e3a\u5de8\u578b\u9c7f\u9c7c\u5728\u8fdc\u79bb\u4eba\u7c7b\u63a5\u89e6\u7684\u6df1\u6e29\u5e26\u6c34\u57df\u8fc7\u7740\u5b64\u72ec\u7684\u751f\u6d3b\u3002\u636e\u4e54\u6069\u8bf4\uff0c\u201c\u5b83\u4eec\u53ef\u80fd\u65e0\u6cd5\u53d8\u5f97\u8db3\u591f\u5927\u4ee5\u51fb\u6c89\u4e00\u8258\u8239\uff0c\u4f46\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684\u8239\u7684\u5927\u5c0f\u3002\u201d &#39;\u5de8\u578b\u9c7f\u9c7c\u65e0\u6cd5\u5728\u5730\u8868\u83b7\u5f97\u5b83\u4eec\u6240\u9700\u7684\u6c27\u6c14\u3002\u56e0\u6b64\uff0c\u5f53\u4eba\u4eec\u786e\u5b9e\u5728\u5730\u8868\u9047\u5230\u6d3b\u4f53\u65f6\uff0c\u90a3\u662f\u56e0\u4e3a\u4ed6\u4eec\u538b\u529b\u5927\uff0c\u53ef\u80fd\u5feb\u8981\u6b7b\u4e86\u3002 \u201c\u6211\u4eec\u4ecd\u7136\u4e0d\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u4ea4\u914d\u7684\uff0c\u5b83\u4eec\u80fd\u6d3b\u591a\u4e45\uff0c\u5b83\u4eec\u662f\u5982\u4f55\u751f\u957f\u7684\u3002\u5b83\u4eec\u4ecd\u7136\u662f\u9ad8\u5ea6\u795e\u79d8\u7684\u91ce\u517d\uff0c\u4ee4\u4eba\u5174\u594b\u7684\u662f\u79d1\u5b66\u5bb6\u4ecd\u5728\u56de\u7b54\u8fd9\u4e9b\u95ee\u9898\u3002\u4f5c\u4e3a\u4e16\u754c\u5404\u5730\u822a\u6d77\u6c11\u4fd7\u7684\u4e00\u4e2a\u7279\u5f81\uff0c\u62e5\u6709\u4eba\u5f62\u8eaf\u5e72\u548c\u86c7\u5f62\u5c3e\u5df4\u7684\u6d77\u5996\u548c\u4eba\u9c7c\u5df2\u7ecf\u5728\u5730\u56fe\u548c\u4eba\u7c7b\u60f3\u8c61\u7684\u89d2\u843d\u91cc\u8426\u7ed5\u4e86\u6570\u5343\u5e74\u3002\u5965\u5229\u5f17\u8bf4\uff1a\u201c\u5728 18 \u4e16\u7eaa\uff0c\u4efb\u4f55\u4e58\u5750\u6728\u8239\u98de\u8d8a\u5730\u5e73\u7ebf\u7684\u4eba\u6bd4\u4eca\u5929\u81f3\u5c11\u6709\u65e0\u7ebf\u7535\u8054\u7cfb\u7684\u5b87\u822a\u5458\u66f4\u80fd\u4e0e\u5176\u4ed6\u4eba\u8131\u8282\u3002\u201d\n\u201c\u8fd9\u4e9b\u6c34\u624b\u6709\u65f6\u4f1a\u56e0\u4e3a\u4e0e\u5bb6\u91cc\u7684\u4eba\u6ca1\u6709\u63a5\u89e6\u800c\u65c5\u884c\u591a\u5e74\u3002\u4eba\u4eec\u5bf9\u4ed6\u4eec\u53ef\u80fd\u5728\u4e16\u754c\u53e6\u4e00\u7aef\u770b\u5230\u7684\u5947\u5999\u4e8b\u7269\u62b1\u6709\u5f88\u5927\u7684\u671f\u671b\u3002\u4ed6\u4eec\u7684\u6545\u4e8b\u975e\u5e38\u53d7\u6b22\u8fce\uff0c\u4ee5\u81f3\u4e8e\u65e5\u672c\u6709\u8fdb\u53d6\u5fc3\u7684\u5de5\u5320\u5728\u9690\u533f\u52a8\u7269\u6807\u672c\u65b9\u9762\u5efa\u7acb\u4e86\u84ec\u52c3\u53d1\u5c55\u7684\u8d38\u6613\u3002\u867d\u7136\u4eca\u5929\u6211\u4eec\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5b83\u4eec\u662f\u6076\u4f5c\u5267\u800c\u8ba4\u51fa\u521b\u9020\u6027\u52a8\u7269\u6807\u672c\u5265\u5236\u672f\u6216\u5de7\u5999\u5730\u5e72\u71e5\u6d77\u6d0b\u52a8\u7269\uff0c\u4f46\u7f8e\u4eba\u9c7c\u66fe\u7ecf\u662f\u597d\u5947\u5fc3\u548c\u72c2\u6b22\u8282\u6742\u800d\u7684\u79c1\u4eba\u6a71\u67dc\u7684\u73cd\u8d35\u7279\u5f81\u3002 Jenny Hanivers - \u53ef\u8ffd\u6eaf\u5230 1500 \u5e74\u4ee3 - \u662f\u4e00\u79cd\u5947\u5999\u7684\u6d77\u6d0b\u751f\u7269\uff0c\u7531\u9cd0\u9c7c\u6216 Rhinobatidae \u79d1\u7684\u9cd0\u9c7c\uff08\u4fd7\u79f0\u5409\u4ed6\u9c7c\uff09\u7684\u5e72\u71e5\u8eab\u4f53\u5236\u6210\u3002\u8fd9\u4e9b\u9c7c\u751f\u6d3b\u5728\u6d77\u5e95\uff0c\u867d\u7136\u5b83\u4eec\u8eab\u4f53\u7684\u524d\u7aef\u4f7f\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u9cd0\u9c7c\u6216\u9cd0\u9c7c\uff0c\u4f46\u8eab\u4f53\u7684\u5176\u4f59\u90e8\u5206\u66f4\u50cf\u9ca8\u9c7c\u3002\u5c3d\u7ba1\u97f3\u4e50\u540d\u79f0\uff08\u6307\u7684\u662f\u5b83\u4eec\u72ec\u7279\u7684\u4f53\u578b\uff09\uff0c\u5409\u4ed6\u9c7c\u4e0d\u4f1a\u4e3a\u6c34\u624b\u5531\u5c0f\u591c\u66f2\u3002\u8fd9\u79cd\u5e73\u9759\u7684\u5e95\u6816\u52a8\u7269\u5403\u65e0\u810a\u690e\u52a8\u7269\uff0c\u5728\u4e16\u754c\u5404\u5730\u7684\u6d45\u6d77\u4e2d\u90fd\u80fd\u627e\u5230\u3002\u6839\u636e\u5965\u5229\u5f17\u7684\u8bf4\u6cd5\uff0c\u5728\u5b83\u4eec\u7684\u4eb2\u621a\u2014\u2014\u5c04\u7ebf\u4e2d\u53ef\u4ee5\u770b\u5230\u4e0e\u8b66\u62a5\u5668\u884c\u4e3a\u6700\u76f8\u4f3c\u7684\u884c\u4e3a\u3002\u4ed6\u8bf4\uff1a\u201c\u4e00\u4e9b\u5c0f\u79cd\u7c7b\u7684\u9cd0\u9c7c\u559c\u6b22\u628a\u81ea\u5df1\u7684\u9f3b\u5b50\u4f38\u51fa\u6c34\u9762\uff0c\u6709\u65f6\u4f1a\u4ece\u6c34\u4e2d\u51fa\u73b0\u4e00\u4e2a\u5947\u602a\u7684\u50cf\u8138\u4e00\u6837\u7684\u5e7b\u5f71\u3002\u5b83\u4eec\u901a\u5e38\u662f\u6c34\u65cf\u7bb1\u7684\u7279\u5f81\uff0c\u6709\u4e9b\u7269\u79cd\u751a\u81f3\u4f1a\u8ba9\u4eba\u7c7b\u89e6\u6478\u5b83\u4eec\u3002 \u201c\u5982\u679c\u4f60\u770b\u4e00\u4e0b\u901a\u5e38\u4f4d\u4e8e\u6d77\u5e8a\u4e0a\u7684\u8eab\u4f53\u5e95\u90e8\uff0c\u4f60\u4f1a\u770b\u5230\u5b83\u4eec\u7528\u6765\u538b\u788e\u548c\u5403\u6389\u7532\u58f3\u7c7b\u52a8\u7269\u7684\u4e0b\u5df4\uff0c\u4ee5\u53ca\u6392\u51fa\u6c34\u7684\u547c\u5438\u5b54\u3002\u5f53\u5b83\u4eec\u5e72\u71e5\u6298\u53e0\u65f6\uff0c\u5c31\u4f1a\u9732\u51fa\u4e00\u5f20\u602a\u8bde\u7684\u8138\u3002\n\u8fd9\u4e9b\u52a8\u7269\u8fd8\u6709\u4e00\u4e2a\u5c16\u5c16\u7684\u9f3b\u5b50\u6216\u8bb2\u53f0\uff0c\u7c7b\u4f3c\u4e8e\u6559\u4f1a\u7684\u5e3d\u5b50\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u4eec\u6709\u65f6\u4e5f\u88ab\u79f0\u4e3a\u6d77\u4e3b\u6559\u3002\u6d77\u86c7\u548c\u6d77\u9f99\u51fa\u73b0\u5728\u4e16\u754c\u5404\u5730\u53ef\u8ffd\u6eaf\u5230\u53e4\u4ee3\u7684\u6545\u4e8b\u4e2d\uff0c\u901a\u5e38\u88ab\u63cf\u7ed8\u6210\u5bf9\u6c34\u624b\u9020\u6210\u4e25\u91cd\u7834\u574f\u3002\u5965\u5229\u5f17\u8bf4\uff1a\u201c\u6d77\u86c7\u795e\u8bdd\u53ef\u4ee5\u8ffd\u6eaf\u5230\u53e4\u4ee3\uff0c\u6211\u4eec\u751a\u81f3\u65e0\u6cd5\u8fa8\u522b\u3002\u201d \u201c\u5982\u679c\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u4ea7\u751f\u8fd9\u4e9b\u6545\u4e8b\u7684\u81ea\u7136\u4e16\u754c\u7684\u5019\u9009\u4eba\uff0c\u90a3\u4e48\u7687\u5e26\u9c7c\u5c31\u4f4d\u5c45\u699c\u9996\u3002\u201d\u5965\u5229\u5f17\u8bf4\uff1a\u201c\u7687\u5e26\u9c7c\u771f\u7684\u662f\u4e00\u79cd\u975e\u5e38\u6f02\u4eae\u7684\u52a8\u7269\u2014\u2014\u957f\u8fbe\u516b\u7c73\uff0c\u957f\u7740\u4e00\u5f20\u9a6c\u4f3c\u7684\u8138\uff0c\u5934\u4e0a\u6709\u706b\u7ea2\u8272\u7684\u51a0\uff0c\u9ccd\u4e00\u76f4\u5ef6\u4f38\u5230\u660e\u4eae\u7684\u91d1\u5c5e\u94f6\u8272\u8eab\u4f53\u3002\u4f60\u8fd8\u60f3\u4ece\u6d77\u602a\u90a3\u91cc\u5f97\u5230\u4ec0\u4e48\uff1f\u4e16\u754c\u4e0a\u6700\u957f\u7684\u786c\u9aa8\u9c7c\uff0c\u5de8\u578b\u7687\u5e26\u9c7c (Regalecus glesne)\uff0c\u5df2\u88ab\u8bb0\u5f55\u53ef\u957f\u8fbe 8 \u7c73\u3002\u5b83\u5728\u4e16\u754c\u5404\u5730\u7684\u6e29\u5e26\u548c\u70ed\u5e26\u6c34\u57df\u5747\u6709\u53d1\u73b0\uff0c\u636e\u4fe1\u751f\u6d3b\u5728 200 \u81f3 1,000 \u7c73\u7684\u6df1\u5904\u3002\u4e0e\u6d77\u6d0b\u4e2d\u8bb8\u591a\u6700\u5927\u7684\u751f\u7269\u4e00\u6837\uff0c\u7687\u5e26\u9c7c\u5403\u6d6e\u6e38\u751f\u7269\u3002 \u201c\u4e0d\u5e78\u7684\u662f\uff0c\u5f53\u4ed6\u4eec\u6d6e\u51fa\u6c34\u9762\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u9047\u5230\u4e86\u9ebb\u70e6\u5e76\u9677\u5165\u56f0\u5883\uff0c\u201d\u5965\u5229\u5f17\u89e3\u91ca\u8bf4\u3002\n\u7687\u5e26\u9c7c\u901a\u5e38\u4ee5\u5782\u76f4\u6216\u6c34\u5e73\u59ff\u52bf\u6e38\u6cf3\uff0c\u5229\u7528\u8eab\u4f53\u7684\u5de6\u53f3\u8d77\u4f0f\u548c\u80cc\u9ccd\u6765\u4fdd\u6301\u5e73\u8861\u548c\u5411\u524d\u79fb\u52a8\u3002\u53ea\u6709\u5728\u6c34\u9762\uff0c\u5b83\u4eec\u5728\u547c\u5438\u56f0\u96be\u65f6\u624d\u4f1a\u4fa7\u8eab\u6e38\u6cf3\u3002 \u201c\u5b83\u4eec\u5728\u6c34\u9762\u4e0a\u4fa7\u8eab\u6e38\u6cf3\uff0c\u8fd9\u4e9b\u4ece\u5de6\u5230\u53f3\u7684\u8d77\u4f0f\u53d8\u6210\u4e86\u5782\u76f4\u7684\u8d77\u4f0f\uff0c\u521b\u9020\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u5947\u89c2\uff0c\u751a\u81f3\u53ef\u4ee5\u4f7f\u5b83\u4eec\u7684\u8eab\u4f53\u5377\u51fa\u6c34\u9762\u3002\u201d\u5c3d\u7ba1\u751f\u6d3b\u5728\u6df1\u6d77\u3001\u4ee5\u6d6e\u6e38\u751f\u7269\u4e3a\u98df\u7684\u7687\u5e26\u9c7c\u5bf9\u6c89\u6ca1\u8239\u53ea\u6216\u5403\u6389\u6c34\u624b\u6ca1\u6709\u5174\u8da3\uff0c\u4f46\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u5b83\u4eec\u662f\u6df1\u6d77\u5730\u9707\u548c\u6d77\u5578\u7684\u53ef\u9760\u9884\u62a5\u5668\uff0c\u5728\u5730\u9707\u4e8b\u4ef6\u53d1\u751f\u524d\u5c31\u5c06\u81ea\u5df1\u6401\u6d45\u3002\u5c3d\u7ba1\u8be5\u7406\u8bba\u5c1a\u672a\u5f97\u5230\u8bc1\u5b9e\uff0c\u4f46\u5965\u5229\u5f17\u8ba4\u4e3a\u5b58\u5728\u4e00\u4e9b\u6709\u8da3\u7684\u5047\u8bbe\u8054\u7cfb\u3002 \u201c\u5b83\u662f\u4e00\u79cd\u957f\u800c\u6241\u5e73\u7684\u5e26\u72b6\u52a8\u7269\uff0c\u5982\u679c\u4f60\u6709\u8fd9\u79cd\u4f53\u578b\uff0c\u5b83\u53ef\u80fd\u4f1a\u7279\u522b\u53d7\u5230\u538b\u529b\u6ce2\u7684\u5f71\u54cd\uff0c\u201d\u4ed6\u8bf4\u3002 &#39;\u6709\u76f8\u5f53\u591a\u7684\u731c\u60f3\uff0c\u4f46\u53ef\u80fd\u6709\u5176\u6838\u5fc3\u7684\u4e1c\u897f\u3002 \u201c\u6d77\u6d0b\uff0c\u5c24\u5176\u662f\u6df1\u6d77\uff0c\u662f\u5730\u7403\u4e0a\u63a2\u7d22\u6700\u5c11\u7684\u6816\u606f\u5730\u3002\u4e00\u76f4\u4ece\u90a3\u91cc\u4f20\u6765\u7684\u56fe\u50cf\u5411\u6211\u4eec\u5c55\u793a\u4e86\u6211\u4eec\u771f\u6b63\u77e5\u9053\u7684\u5f88\u5c11\uff0c\u8fd8\u6709\u591a\u5c11\u60ca\u559c\u5728\u6df1\u6d77\u7b49\u7740\u6211\u4eec\u3002", "note_en": "Sea monsters have a prominent role in myths and legends of most seafaring cultures on Earth and with such inspiring  ocean biodiversity, it&#39;s not difficult to see why.\n  Join  Oliver Crimmen, Senior Curator of Fish, and  Jon Ablett, Senior Curator of Mollusca, as they explore the real-life inspiration behind fantastic sea monsters of yore that are lurking in the Museum&#39;s wet collections.\n  Originating in Scandinavian folklore, the kraken is usually depicted as an aggressive cephalopod-like creature capable of destroying entire ships and dragging sailors to their doom.\n  &#39;Many cultures around the world have a myth or legend about a tentacled beast bothering seamen or generally getting up to no good,&#39; Jon says.\n In ancient Greece, Aristotle and Pliny wrote about teuthos (squid). There&#39;s the Scylla in the Odyssey and similar myths from the Caribbean (Lusca), Japan (Akkorokamui) and New Zealand (Te Wheke-a-Muturangi).\n  Jon says, &#39;Squid and octopus really are unusual animals. Their body plan isn&#39;t similar to anything else that we know of in the sea. They move quickly and the way that their bodies, arms and tentacles move seem to stimulate something in our fear of the unknown.\n &#39;I think the fact that they are such odd creatures, with some very large species being very rarely seen, make it very likely that they could be the starting points for the kraken and other sea beast legends.\n &#39;What we think happened is that the partially digested or rotted remains of giant squid and large octopus were washing up on beaches and people were starting to guess what they might be.\n &#39;In Norway, the kraken myth grew and such washed-up specimens were interpreted as messages from God or the Devil, sometimes called sea angels, sea devils or sea monks.&#39;\n  He adds, &#39;These things happened separately and people around the world came up with similar answers and mythologies - a case of convergent evolution in myth form.&#39;\n  Giant squid ( Architeuthis dux) were first classified by Western science in 1857 and scientists are still busy unpacking their mysteries.\n &#39;Naming and classifying a new animal is only the beginning,&#39; Jon says. &#39;We knew it was real and not a mythical beast from people&#39;s imaginations, but we&#39;re still really just getting to know them.&#39;\n Found in temperate waters all over the world, giant squid live between 200-1,400 metres below the surface. Females are thought grow up to 13 metres and the slightly smaller males reach 10 metres.\n Giant squid aren&#39;t fussy eaters - they hunt fish and crustaceans and also scavenge. Scientists have found some evidence of cannibalism, but there&#39;s no sign of ships on the menu.\n Their greatest adaptation are their huge eyes. Giant squids have the second-largest eyes of any creature on Earth, \u00a0used to help detect and avoid sperm whales, which are the only predator large enough to eat giant squids when they are fully grown.\n While some other species of smaller squid are aggressive pack hunters, the giant squid is thought to lead a solitary life in deep, temperate water, far from human contact.\n  According to Jon, &#39;They probably can&#39;t get big enough to take down a ship, but then it depends on the size of your vessel.&#39;\n &#39;Giant squid can&#39;t get the oxygen they need at the surface. So when people do come across a live one at the surface, it&#39;s because they are stressed and probably dying.&#39;\n &#39;We still don&#39;t know how they mate, how long they live for, how they grow. They&#39;re still highly mysterious beasts and it&#39;s exciting that scientists are still answering these questions.&#39;\n  A feature of seafaring folklore around the world, sirens and merfolk with humanoid torsos and serpentine tails have haunted the corners of maps and human imagination for millennia.\n  Oliver says, &#39;Anybody travelling in a wooden ship over the horizon in the eighteenth century was more out of touch with the rest of humanity than today\u2019s astronauts who at least have radio contact.&#39;\n &#39;These sailors would sometimes be travelling for years out of contact with people at home. There were big expectations about the fantastic things they might have seen on the other side of the world.&#39;\n Their stories were so popular that enterprising craftspeople in Japan established a thriving trade in cryptozoological specimens.\n  Although today we may recognise creative taxidermy or artfully dried sea animals for the hoaxes they were, mermaids were once prized features of private cabinets of curiosity and carnival sideshows.\n  Jenny Hanivers - which date back to the 1500s - are fantastical sea creatures manufactured from the dried bodies of skates or rays from the family Rhinobatidae , commonly known as guitar fishes. These fishes live on the seabed, and while the front end of their bodies makes them look like rays or skates, the rest of the body is more like a shark.\n  Despite the musical name (which refers to their distinctive body shape), guitar fish don&#39;t serenade sailors. The placid, bottom-dwelling animals eat invertebrates and can be found all over the world in shallow seas.\n According to Oliver, the closest resemblance to siren-like behaviour is seen in their relatives, the rays. He says, &#39;Some small species of ray have endeared themselves to humans with their habit of poking their snouts up out of the water, which can sometimes create a strange face-like apparition emerging from the water. They are often features of aquaria where some species will even let humans touch them.\n &#39;If you look at the underside of the body, which is normally resting on the seabed, you will see the jaws they use to crush and eat crustaceans and the breathing apertures where water is expelled. When they are dried and folded, a kind of grotesque face is revealed.&#39;\n  The animals also have a pointed snout or rostrum, which resembles an ecclesiastical hat, which is why they were sometimes also called sea bishops.\n  Sea serpents and sea dragons appear in stories from all over the world dating back to antiquity, and are usually depicted creating havoc for sailors.\n  &#39;Sea serpent myths go back into antiquity to a point in time we can&#39;t even discern,&#39; Oliver says. &#39;If we are looking for candidates from the natural world that generated these tales, then the oarfish is at the top of the list.&#39;\n  Oliver says, &#39;The oarfish really is a fantastic looking animal - up to eight metres long, with a horse-like face, flame-red crest on its head and fin all the way down its bright, metallic silver body. What else do you want from a sea monster?&#39;\n  The world&#39;s longest bony fish, the giant oarfish ( Regalecus glesne),  has been documented growing up to eight meters in length.\n It is found worldwide in temperate and tropical waters and is thought to live at depths between 200 and 1,000 metres. Like many of the largest creatures in the sea, oarfish eat plankton.\n  &#39;Unfortunately, when they come to the surface, it means they are in trouble and stranding themselves,&#39; Oliver explains.\n  Oarfish usually swim in a vertical or horizontal position, using left and right undulations of their bodies and dorsal fins to balance and move forward. It is only at the surface, where they are struggling to breathe that they swim on their sides.\n &#39;Swimming on their sides at the surface, these left to right undulations become vertical undulations that create an interesting spectacle and can even cause their bodies to coil up out of the water.&#39;\n  Although deep-sea-dwelling, plankton-eating oarfish have no interest in sinking ships or consuming sailors, they are considered by some to be reliable predicators of deep-sea earthquakes and tsunamis, stranding themselves in numbers before seismic events.\n  While the theory remains unproven, Oliver believes there are some interesting hypothetical links. &#39;It&#39;s a long, flat, ribbon-shaped animal and if you have that kind of body shape, maybe it&#39;s going to be particularly affected by pressure waves,&#39; he says. &#39;There&#39;s quite a lot of conjecture, but there may be something at the heart of it.\n &#39;The sea, especially the deep sea, is the least explored habitat on Earth. Images coming back from there all the time are showing us just how little we really know and how many surprises are still waiting for us in the deep ocean.&#39;", "posttime": "2021-08-09 01:48:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u4eba\u9c7c,monsters,\u52a8\u7269", "title": "\u6d77\u602a\u53ca\u5176\u7075\u611f\u6765\u6e90\uff1a\u86c7\u3001\u7f8e\u4eba\u9c7c\u3001\u6d77\u5996\u7b49", "title_en": "Sea monsters and their inspiration: serpents, mermaids, the kraken and more", "transed": 1, "url": "https://www.nhm.ac.uk/discover/sea-monsters-inspiration-serpents-mermaids-the-kraken.html", "via": "", "real_tags": ["\u7f8e\u4eba\u9c7c", "monsters", "\u52a8\u7269"]}, {"category": "", "categoryclass": "", "imagename": "9f7d2389e187cdabe6f0dab242ec177b.png", "infoid": 1072142, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728 Grapl\uff0c\u6211\u4eec\u76f8\u4fe1\u4e3a\u4e86\u6784\u5efa\u6700\u597d\u7684\u9632\u5fa1\u7cfb\u7edf\uff0c\u6211\u4eec\u9700\u8981\u6df1\u5165\u4e86\u89e3\u653b\u51fb\u8005\u7684\u884c\u4e3a\u3002\u4f5c\u4e3a\u8be5\u76ee\u6807\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u6b63\u5728\u6295\u8d44\u8fdb\u653b\u6027\u5b89\u5168\u7814\u7a76\u3002\u7ee7\u7eed\u5173\u6ce8\u6211\u4eec\u7684\u535a\u5ba2\uff0c\u4e86\u89e3\u6709\u5173\u9ad8\u98ce\u9669\u6f0f\u6d1e\u3001\u6f0f\u6d1e\u5229\u7528\u548c\u9ad8\u7ea7\u5a01\u80c1\u7b56\u7565\u7684\u65b0\u7814\u7a76\u3002\u5728\u6b64\u5904\u67e5\u627e\u5df2\u53d1\u5e03\u7684 CVE-2021-3490 \u7684\u672c\u5730\u63d0\u6743 (LPE) \u6982\u5ff5\u8bc1\u660e\uff1ahttps://github.com/chompie1337/Linux_LPE_eBPF_CVE-2021-3490\u3002\u5b83\u9488\u5bf9 Ubuntu 20.10 (Groovy Gorilla) \u5185\u6838 5.8.0-25.26 \u5230 5.8.0-52.58\u3002\u548c Ubuntu 21.04 (Hirsute Hippo) 5.11.0-16.17\u3002\u8fd9\u7bc7\u535a\u6587\u65e8\u5728\u4ece\u6f0f\u6d1e\u5229\u7528\u5f00\u53d1\u4eba\u5458\u7684\u89d2\u5ea6\u8be6\u7ec6\u6982\u8ff0 eBPF\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86\uff1a\u6211\u5bf9 eBPF \u4e00\u65e0\u6240\u77e5\u3002\u6211\u5e0c\u671b\u901a\u8fc7\u5206\u4eab\u4e00\u4e2a PoC \u4ee5\u53ca\u6211\u7684\u5f00\u53d1\u7ecf\u9a8c\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u5176\u4ed6\u4eba\u5f00\u59cb\u4f7f\u7528 eBPF\u3002 Berkeley Packet Filter (BPF) \u6700\u521d\u662f\u4f5c\u4e3a\u5728\u5185\u6838\u4e2d\u6267\u884c\u6570\u636e\u5305\u8fc7\u6ee4\u7684\u4e00\u79cd\u65b9\u5f0f\u800c\u521b\u5efa\u7684\u3002\u5b83\u7684\u529f\u80fd\u540e\u6765\u88ab\u91cd\u65b0\u8bbe\u8ba1\u548c\u6269\u5c55\uff0c\u4ee5\u521b\u5efa\u6269\u5c55\u7684\u4f2f\u514b\u5229\u6570\u636e\u5305\u8fc7\u6ee4\u5668 (eBPF) [1]\u3002\u7b80\u800c\u8a00\u4e4b\uff0ceBPF \u4e3a\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u79cd\u65e0\u9700\u7f16\u5199\u5185\u6838\u6a21\u5757\u5373\u53ef\u5728\u5185\u6838\u4e2d\u8fd0\u884c\u4ee3\u7801\u7684\u65b9\u6cd5\u3002\u4f7f\u7528 eBPF \u4e0e\u5185\u6838\u6a21\u5757\u76f8\u6bd4\u7684\u6240\u8c13\u597d\u5904\u662f\u6613\u7528\u6027\u3001\u7a33\u5b9a\u6027\u548c\u5b89\u5168\u6027\u3002\u4e0e\u7eaf\u7528\u6237\u6a21\u5f0f\u7a0b\u5e8f\u76f8\u6bd4\uff0c\u901a\u8fc7\u76f4\u63a5\u5728\u5185\u6838\u4e2d\u6267\u884c\u67d0\u4e9b\u4efb\u52a1\u8fd8\u53ef\u4ee5\u83b7\u5f97\u6027\u80fd\u6539\u8fdb\u3002 eBPF \u7a0b\u5e8f\u7528\u4e8e\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4f8b\u5982\uff1a\u8ddf\u8e2a\u3001\u68c0\u6d4b\u3001\u6302\u94a9\u7cfb\u7edf\u8c03\u7528\u3001\u8c03\u8bd5\uff0c\u5f53\u7136\u8fd8\u6709\u6570\u636e\u5305\u6355\u83b7/\u8fc7\u6ee4\u3002 eBPF \u7a0b\u5e8f\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u5e76\u4f7f\u7528\u5de5\u5177\u94fe\uff08\u4f8b\u5982 BCC [18]\uff09\u7f16\u8bd1\u6210 eBPF \u5b57\u8282\u7801\u3002 eBPF VM \u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6307\u4ee4\u96c6\uff0c\u8be5\u6307\u4ee4\u96c6\u4f7f\u7528 11 \u4e2a* 64 \u4f4d\u5bc4\u5b58\u5668\u3001\u4e00\u4e2a\u7a0b\u5e8f\u8ba1\u6570\u5668\u548c\u4e00\u4e2a 512 \u5b57\u8282\u56fa\u5b9a\u5927\u5c0f\u7684\u5806\u6808\u3002\u4e5d\u4e2a\u5bc4\u5b58\u5668\u662f\u901a\u7528\u8bfb\u5199\uff0c\u4e00\u4e2a\u662f\u53ea\u8bfb\u5806\u6808\u6307\u9488\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u662f\u9690\u5f0f\u7684 [2] \u3002\u6307\u4ee4\u96c6\u4e0e x86 \u7c7b\u4f3c\uff0c\u53ef\u5bf9 64 \u4f4d\u548c 32 \u4f4d\u503c\u8fdb\u884c\u64cd\u4f5c\u3002\n*\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u4f7f\u7528\u4e86 12 \u4e2a\u5bc4\u5b58\u5668\uff0c\u4f46\u7b2c 12 \u4e2a\u5bc4\u5b58\u5668\u662f\u4e00\u4e2a\u8f85\u52a9\u5bc4\u5b58\u5668\uff0c\u4ec5\u7528\u4e8e\u6267\u884c ALU \u536b\u751f\u64cd\u4f5c [12]\u3002\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 bpf() [14] \u7cfb\u7edf\u8c03\u7528\u5c06\u5b57\u8282\u7801\u52a0\u8f7d\u5230\u5185\u6838\u4e2d\uff0c\u5176\u4e2d eBPF \u9a8c\u8bc1\u5668\u5c06\u6267\u884c\u8bb8\u591a\u68c0\u67e5\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u5728\u5185\u6838\u4e2d\u201c\u5b89\u5168\u201d\u8fd0\u884c\u3002\u8fd9\u4e2a\u9a8c\u8bc1\u6b65\u9aa4\u5f88\u5173\u952e\u2014\u2014eBPF \u4e3a\u975e\u7279\u6743\u7528\u6237\u516c\u5f00\u4e86\u4e00\u6761\u5728 ring0 \u4e2d\u6267\u884c\u7684\u8def\u5f84\u3002\u52a0\u8f7d\u7a0b\u5e8f\u540e\uff0c\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u5c06\u7a0b\u5e8f\u9644\u52a0\u5230\u201c\u6302\u94a9\u70b9\u201d\u3002\u6302\u94a9\u70b9\u662f\u5185\u6838\u4e2d\u53ef\u4ee5\u9644\u52a0 eBPF \u7a0b\u5e8f\u7684\u5730\u65b9 [5]\u3002 eBPF \u7a0b\u5e8f\u662f\u4e8b\u4ef6\u9a71\u52a8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5c06\u5728\u6302\u94a9\u70b9\u53d1\u751f\u67d0\u4e9b\u4e8b\u4ef6\u65f6\u6267\u884c\u3002\u7ecf\u5178\u7528\u4f8b\u662f\u5c06 eBPF \u7a0b\u5e8f\u9644\u52a0\u5230\u5957\u63a5\u5b57\uff0c\u5f53\u6570\u636e\u5199\u5165\u65f6\u7a0b\u5e8f\u5c06\u5728\u5957\u63a5\u5b57\u4e2d\u6267\u884c\u3002\u5982\u679c\u8bbe\u7f6e\u4e86 kconfig \u65cb\u94ae CONFIG_BPF_JIT\uff0c\u5219 eBPF \u7a0b\u5e8f\u5728\u9a8c\u8bc1\u548c\u52a0\u8f7d\u540e\u4f1a\u88ab JIT \u7f16\u8bd1\u4e3a\u539f\u751f\u6c47\u7f16\u6307\u4ee4\u3002\u5426\u5219\uff0c\u5f53\u7a0b\u5e8f\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u5728 eBPF \u89e3\u91ca\u5668\u4e2d\u8fd0\u884c\uff0c\u8be5\u89e3\u91ca\u5668\u89e3\u7801\u5e76\u6267\u884c eBPF \u5b57\u8282\u7801\u6307\u4ee4\u3002\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 eBPF \u6620\u5c04\u548c eBPF \u8f85\u52a9\u51fd\u6570\u4e0e\u5185\u6838\u4e2d\u8fd0\u884c\u7684 eBPF \u7a0b\u5e8f\u4ea4\u4e92\u5e76\u4ece\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u8fd9\u4e9b\u51fd\u6570\u901a\u8fc7 bpf() \u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u8bbf\u95ee\u3002 sysctl \u65cb\u94ae kernel.unprivileged_bpf_disabled \u51b3\u5b9a\u662f\u5426\u5141\u8bb8\u975e\u7279\u6743\u7528\u6237\u8fd0\u884c eBPF \u7a0b\u5e8f\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u5141\u8bb8\u975e\u7279\u6743\u7528\u6237\u5c06 eBPF \u7a0b\u5e8f\u9644\u52a0\u5230\u7528\u6237\u62e5\u6709\u7684\u5957\u63a5\u5b57\u3002\u5728\u8bb8\u591a Linux \u53d1\u884c\u7248\u4e2d\uff0c\u4f8b\u5982 Ubuntu\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528 unprivileged_bpf_disabled\u3002\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u66f4\u4ed4\u7ec6\u5730\u7814\u7a76 eBPF\uff0c\u56e0\u4e3a\u5141\u8bb8\u975e\u7279\u6743\u7528\u6237\u5728\u5185\u6838\u4e2d\u8fd0\u884c\u4ee3\u7801\u662f\u4e00\u4e2a\u6210\u719f\u7684\u653b\u51fb\u9762\u3002\u6211\u5728\u4e0a\u9762\u63d0\u5230\u8fc7\uff0c\u7528\u6237\u6a21\u5f0f\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528 eBPF \u6620\u5c04\u4e0e\u5185\u6838\u4e2d\u7684 eBPF \u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u88ab\u591a\u4e2a eBPF \u7a0b\u5e8f\u7528\u6765\u76f8\u4e92\u4ea4\u4e92\u3002\u5b83\u4eec\u662f\u5177\u6709\u4efb\u610f\u6570\u636e\u7ed3\u6784\u7684\u901a\u7528\u952e/\u503c\u5b58\u50a8 [6]\u3002\u6709\u591a\u79cd\u7c7b\u578b\u7684\u6620\u5c04\uff0c\u5305\u62ec\uff1a\u6570\u7ec4\u3001\u961f\u5217\u548c\u5806\u6808\u3002\nkey_size - \u7528\u4e8e\u7d22\u5f15\u5143\u7d20\u7684\u952e\u7684\u5b57\u8282\u5927\u5c0f\uff08\u7528\u4e8e\u6570\u7ec4\u6620\u5c04\uff09 map_flags - \u63cf\u8ff0\u6620\u5c04\u7684\u7279\u6b8a\u7279\u6027\uff0c\u4f8b\u5982\u662f\u5426\u5e94\u8be5\u9884\u5148\u5206\u914d\u6574\u4e2a\u6620\u5c04\u5185\u5b58\u3002\u53ef\u4ee5\u4f7f\u7528 BPF_MAP_CREATE \u547d\u4ee4\u901a\u8fc7 bpf() \u7cfb\u7edf\u8c03\u7528\u4ece\u7528\u6237\u7a7a\u95f4\u521b\u5efa\u548c\u66f4\u6539 eBPF \u6620\u5c04\uff0c\u4f7f\u7528 BPF_MAP_UPDATE_ELEM \u547d\u4ee4\u66f4\u65b0\uff0c\u5e76\u4f7f\u7528 BPF_MAP_LOOKUP_ELEM \u547d\u4ee4\u68c0\u7d22\u5176\u5185\u5bb9\u3002 eBPF \u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 BPF_MAP_CREATE \u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5e76\u8c03\u7528 eBPF \u8f85\u52a9\u51fd\u6570\u6765\u8bbf\u95ee eBPF \u6620\u5c04\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u6307\u5411\u6620\u5c04\u4e2d\u503c\u7684\u6307\u9488\u3002\u6211\u7f16\u5199\u7684\u6f0f\u6d1e\u5229\u7528\u4e86 eBPF \u9a8c\u8bc1\u5668\u4e2d\u7684\u4e00\u4e2a\u9519\u8bef\u3002\u56e0\u6b64\uff0c\u5728\u6df1\u5165\u7814\u7a76\u6f0f\u6d1e\u4e4b\u524d\uff0c\u91cd\u8981\u7684\u662f\u7b80\u8981\u89e3\u91ca\u9a8c\u8bc1\u5668\u7684\u5185\u90e8\u7ed3\u6784\u3002\u9a8c\u8bc1\u5668\u9996\u5148\u6784\u5efa\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u56fe\u3002\u7136\u540e\uff0c\u5b83\u5c06\u901a\u8fc7\u6bcf\u4e2a\u53ef\u80fd\u7684\u63a7\u5236\u6d41\u6765\u9a8c\u8bc1\u6bcf\u6761\u6307\u4ee4\u662f\u5426\u6709\u6548\u4ee5\u53ca\u6240\u6709\u5185\u5b58\u8bbf\u95ee\u90fd\u662f\u5b89\u5168\u7684 [3]\u3002\u4e4b\u540e\uff0c\u5b83\u5c06\u5411\u7a0b\u5e8f\u6dfb\u52a0\u8fd0\u884c\u65f6\u68c0\u67e5\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a ALU Sanitation\uff0c\u5c06\u8865\u4e01\u63d2\u5165 eBPF \u5b57\u8282\u7801\uff0c\u4ee5\u786e\u4fdd\u5728\u6267\u884c\u6307\u9488\u8fd0\u7b97\u65f6\u4e0d\u4f1a\u8fdd\u53cd\u8fd0\u884c\u65f6\u5141\u8bb8\u7684\u5185\u5b58\u8303\u56f4 [4]\u3002\u4e0d\u80fd\u6267\u884c\u6307\u9488\u6bd4\u8f83\uff0c\u53ea\u80fd\u5411\u6307\u9488\u6dfb\u52a0\u6216\u51cf\u53bb\u6807\u91cf\u503c\u3002 eBPF \u9a8c\u8bc1\u5668\u4e2d\u7684\u6807\u91cf\u503c\u662f\u4efb\u4f55\u4e0d\u662f\u4ece\u6307\u9488\u6d3e\u751f\u7684\u503c\u3002\u9a8c\u8bc1\u5668\u8ddf\u8e2a\u54ea\u4e9b\u5bc4\u5b58\u5668\u5305\u542b\u6307\u9488\uff0c\u54ea\u4e9b\u5305\u542b\u6807\u91cf\u503c\u3002\u6307\u9488\u8fd0\u7b97\u4e0d\u80fd\u79bb\u5f00\u5730\u56fe\u7684\u201c\u5b89\u5168\u201d\u8fb9\u754c\u3002\u610f\u601d\u662f\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u8bbf\u95ee\u9884\u5b9a\u4e49\u5730\u56fe\u5185\u5b58\u4e4b\u5916\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u4e3a\u6b64\uff0c\u9a8c\u8bc1\u5668\u4f1a\u8ddf\u8e2a\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7684\u4e0a\u9650\u548c\u4e0b\u9650\u3002\n\u6307\u9488\u4e0d\u80fd\u5b58\u50a8\u5728\u6620\u5c04\u4e2d\u6216\u5b58\u50a8\u4e3a\u8fd4\u56de\u503c\uff0c\u4ee5\u907f\u514d\u5185\u6838\u5730\u5740\u6cc4\u6f0f\u5230\u7528\u6237\u7a7a\u95f4\u3002\u9a8c\u8bc1\u5668\u4e3a\u6bcf\u4e2a\u53ef\u80fd\u7684\u6267\u884c\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u5bc4\u5b58\u5668\u5b58\u50a8\u4ee5\u4e0b\u8fb9\u754c\u503c\uff0c\u4ee5\u786e\u4fdd\u6ca1\u6709\u8d8a\u754c\u5185\u5b58\u8bbf\u95ee\uff1a umin_value \uff0c umax_value \u5b58\u50a8\u88ab\u89e3\u91ca\u4e3a\u65e0\u7b26\u53f7\u65f6\u7684\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c (64 bit) \u6574\u6570 smin_value \uff0c smax_value \u5728\u89e3\u91ca\u4e3a\u6709\u7b26\u53f7\uff0864 \u4f4d\uff09\u6574\u6570\u65f6\u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\u3002 u32_min_value , u32min_value \u5728\u89e3\u91ca\u4e3a\u65e0\u7b26\u53f7\uff0832 \u4f4d\uff09\u6574\u6570\u65f6\u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\u3002 s32_min_value , s32_max_value \u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\uff0c\u5f53\u89e3\u91ca\u4e3a\u6709\u7b26\u53f7\uff0832 \u4f4d\uff09\u6574\u6570\u65f6\u3002 var_off \u5305\u542b\u6709\u5173\u5df2\u77e5\u5bc4\u5b58\u5668\u4f4d\u7684\u4fe1\u606f\u3002\u5b83\u5b58\u50a8\u5728\u4e00\u4e2a\u540d\u4e3a tnum \u7684\u7ed3\u6784\u4e2d\uff0c\u8be5\u7ed3\u6784\u5305\u542b\u4e24\u4e2a 64 \u4f4d\u5b57\u6bb5\uff1a mask \u548c value \u3002\u5728\u63a9\u7801\u4e2d\u8bbe\u7f6e\u7684\u6bcf\u4e00\u4f4d\u90fd\u610f\u5473\u7740\u8be5\u4f4d\u7684\u503c\u662f\u672a\u77e5\u7684\u3002\u672a\u8bbe\u7f6e\u4f4d\u662f\u5df2\u77e5\u7684\uff0c\u5b83\u4eec\u7684\u771f\u5b9e\u503c\u5b58\u50a8\u5728 value \u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c var_off = {mask = 0x0; value = 0x1} \uff0c\u5bc4\u5b58\u5668\u7684\u6240\u6709\u4f4d\u90fd\u662f\u5df2\u77e5\u7684\uff0c\u5e76\u4e14\u5df2\u77e5\u5bc4\u5b58\u5668\u7684\u503c\u4e3a1\u3002\u5982\u679cvar_off = {mask = 0xFFFFFFFF00000000; value = 0x3} \u8868\u793a\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u5df2\u77e5\u4e3a 0x00000003\uff0c\u9ad8 32 \u4f4d\u672a\u77e5\u3002\n\u8fd9\u4e9b\u8fb9\u754c\u7528\u4e8e\u76f8\u4e92\u66f4\u65b0\u3002\u7279\u522b\u662f\uff0c\u5982\u679c var_off \u6307\u793a\u5bc4\u5b58\u5668\u662f\u5df2\u77e5\u5e38\u6570\uff0c\u5219\u66f4\u65b0\u6700\u5c0f/\u6700\u5927\u754c\u9650\u4ee5\u53cd\u6620\u5df2\u77e5\u503c\u3002\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\u4e3a\u4ec0\u4e48\u8fd9\u5f88\u91cd\u8981\uff01 ALU Sanitation \u662f\u4e00\u9879\u529f\u80fd\uff0c\u7528\u4e8e\u8865\u5145\u9a8c\u8bc1\u5668\u7684\u9759\u6001\u8303\u56f4\u8ddf\u8e2a\u3002\u5982\u679c\u5bc4\u5b58\u5668\u7684\u503c\u5728\u8fd0\u884c\u65f6\u672a\u843d\u5728\u5176\u9884\u671f\u8303\u56f4\u5185\uff0c\u5219\u8be5\u60f3\u6cd5\u662f\u4e3a\u4e86\u9632\u6b62 OOB \u5185\u5b58\u8bbf\u95ee\u3002\u6dfb\u52a0\u6b64\u529f\u80fd\u662f\u4e3a\u4e86\u5e2e\u52a9\u51cf\u8f7b\u9a8c\u8bc1\u5668\u4e2d\u7684\u6f5c\u5728\u6f0f\u6d1e\u5e76\u9632\u6b62\u6295\u673a\u653b\u51fb\u3002\u5bf9\u4e8e\u6d89\u53ca\u6307\u9488\u548c\u6807\u91cf\u5bc4\u5b58\u5668\u7684\u6bcf\u4e2a\u7b97\u672f\u8fd0\u7b97\uff0c\u90fd\u4f1a\u8ba1\u7b97 alu_limit\u3002\u8fd9\u8868\u793a\u53ef\u4ee5\u6dfb\u52a0\u5230\u6307\u9488\u6216\u4ece\u6307\u9488\u4e2d\u51cf\u53bb\u7684\u6700\u5927\u7edd\u5bf9\u503c [4]\u3002\u5728\u8fd9\u4e9b\u64cd\u4f5c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e4b\u524d\uff0c\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u4fee\u8865\u5b57\u8282\u7801\uff1a *patch ++ = BPF_MOV32_IMM ( BPF_REG_AX , aux - &gt;alu_limit ) \uff1b *\u8865\u4e01++ = BPF_ALU64_REG ( BPF_SUB , BPF_REG_AX , off_reg ) ; *\u8865\u4e01++ = BPF_ALU64_REG ( BPF_OR , BPF_REG_AX , off_reg ) ; *\u8865\u4e01++ = BPF_ALU64_IMM (BPF_NEG, BPF_REG_AX, 0); *\u8865\u4e01++ = BPF_ALU64_IMM (BPF_ARSH, BPF_REG_AX, 63); *\u8865\u4e01++ = BPF_ALU64_REG ( BPF_AND , BPF_REG_AX , off_reg ) ;\u6ce8\u610foff_reg \u4ee3\u8868\u88ab\u6dfb\u52a0\u5230\u6307\u9488\u5bc4\u5b58\u5668\u7684\u6807\u91cf\u5bc4\u5b58\u5668\uff0cBPF_REG_AUX \u4ee3\u8868\u8f85\u52a9\u5bc4\u5b58\u5668\u3002\u8fd0\u884c\u65f6 off_reg \u7684\u503c\u4ece alu_limit \u4e2d\u51cf\u53bb\u5e76\u5b58\u50a8\u5230 BPF_REG_AX \u4e2d\u3002\u5982\u679c off_reg &gt; alu_limit \uff0c\u5219\u8bbe\u7f6e BPF_REG_AX \u7684\u6700\u9ad8\u4f4d\uff08\u7b26\u53f7\u4f4d\uff09\u3002\u5982\u679c BPF_REG_AUX \u4e2d\u5b58\u50a8\u7684\u5dee\u503c\u4e3a\u6b63\uff0coff_reg \u4e3a\u8d1f\uff0c\u8868\u793a alu_limit \u548c\u5bc4\u5b58\u5668\u7684\u503c\u5177\u6709\u76f8\u53cd\u7684\u7b26\u53f7\uff0c\u5219 BPF_OR \u64cd\u4f5c\u5c06\u8bbe\u7f6e\u7b26\u53f7\u4f4d\u3002\nBPF_NEG \u64cd\u4f5c\u5c06\u5426\u5b9a\u7b26\u53f7\u4f4d\u3002\u5982\u679c\u8bbe\u7f6e\u4e86\u7b26\u53f7\u4f4d\uff0c\u5219\u4e3a 0\uff0c\u5426\u5219\u4e3a 1\u3002 BPF_ARSH \u64cd\u4f5c\u8fdb\u884c 63 \u4f4d\u7b97\u672f\u53f3\u79fb\u3002\u8fd9\u5c06\u7528\u5168 0 \u6216 1\uff08\u7b26\u53f7\u4f4d\u7684\u503c\uff09\u586b\u5145 BPF_REG_AX\u3002\u6839\u636e\u4e0a\u8ff0\u64cd\u4f5c\u7684\u7ed3\u679c\uff0cBPF_AND \u64cd\u4f5c\u8981\u4e48\u5c06 off_reg \u7f6e\u7a7a\uff0c\u8981\u4e48\u4fdd\u6301\u4e0d\u53d8\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c off_reg \u8d85\u8fc7 alu_limit \uff0c\u6216\u8005\u5982\u679c off_reg \u548c alu_limit \u5177\u6709\u76f8\u53cd\u7684\u7b26\u53f7\uff0c\u5219 off_reg \u7684\u503c\u5c06\u88ab\u66ff\u6362\u4e3a 0\uff0c\u4ece\u800c\u4f7f\u6307\u9488\u7b97\u672f\u8fd0\u7b97\u5f52\u96f6\u3002\u6700\u8fd1\u66f4\u65b0\u4e86 alu_limit \u7684\u8ba1\u7b97\u65b9\u5f0f [15]\u3002\u67d0\u4e9b Linux \u53d1\u884c\u7248\u53ef\u80fd\u5c1a\u672a\u91c7\u7528\u65b0\u7684\u5b9e\u73b0\u3002\u4e3a\u5b8c\u6574\u8d77\u89c1\uff0c\u6211\u5c06\u6db5\u76d6\u4e24\u8005\uff0c\u5e76\u5728\u4e0b\u4e00\u8282\u4e2d\u91cd\u65b0\u8ba8\u8bba\u4e3a\u4ec0\u4e48\u5dee\u5f02\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d8\u5f97\u76f8\u5173\u3002 alu_limit \u7531\u6307\u9488\u5bc4\u5b58\u5668\u7684\u8fb9\u754c\u51b3\u5b9a\u3002\u610f\u601d\u662f\uff0c\u5982\u679c\u6307\u9488\u5bc4\u5b58\u5668\u6307\u5411\u6620\u5c04\u7684\u5f00\u5934\uff0c\u5219\u51cf\u6cd5\u7684 alu_limit \u4e3a 0\uff0c\u52a0\u6cd5\u7684 alu_limit \u7b49\u4e8e\u6620\u5c04\u7684\u5927\u5c0f\uff08\u51cf 1\uff09\u3002 alu_limit \u968f\u6307\u9488\u5bc4\u5b58\u5668\u4e0a\u7684\u540e\u7eed\u64cd\u4f5c\u66f4\u65b0\u3002 alu_limit \u7531\u504f\u79fb\u5bc4\u5b58\u5668\u7684\u8fb9\u754c\u51b3\u5b9a\u3002\u8fd9\u610f\u5473\u7740\u662f\u5426\u5c06\u8fd0\u884c\u65f6\u504f\u79fb\u5bc4\u5b58\u5668\u7684\u503c\u4e0e\u9a8c\u8bc1\u5668\u9759\u6001\u8303\u56f4\u8ddf\u8e2a\u671f\u95f4\u8ba1\u7b97\u7684\u5bc4\u5b58\u5668\u8fb9\u754c\u8fdb\u884c\u6bd4\u8f83\u3002\n\u6211\u5bf9 eBPF \u9a8c\u8bc1\u5668\u7684\u521d\u6b65\u4e86\u89e3\u6765\u81ea Manfred Paul \u8fd9\u7bc7\u51fa\u8272\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4ed6\u5bf9 CVE-2020-8835 \u7684\u5229\u7528\u3002\u6211\u5f3a\u70c8\u5efa\u8bae\u68c0\u67e5\u4e00\u4e0b\uff01\u56de\u60f3\u4e00\u4e0b\uff0ceBPF \u6307\u4ee4\u96c6\u53ef\u4ee5\u5bf9\u6574\u4e2a 64 \u4f4d\u5bc4\u5b58\u5668\u6216\u4ec5\u4f4e 32 \u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u9a8c\u8bc1\u5668\u8303\u56f4\u8ddf\u8e2a\u5305\u542b\u5bc4\u5b58\u5668\u4f4e 32 \u4f4d\u7684\u5355\u72ec\u8fb9\u754c\uff1a {u,s}32_{min,max}_value \u3002\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u66f4\u65b0\u8fd9\u4e9b\u8fb9\u754c\u3002\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u6709\u4e24\u4e2a\u8ddf\u8e2a\u529f\u80fd\uff0c\u4e00\u4e2a 64 \u4f4d\u548c\u4e00\u4e2a 32 \u4f4d\u8ba1\u6570\u5668\u90e8\u5206\u3002\u4e24\u8005\u90fd\u5728\u51fd\u6570 adjust_scalar_min_max_vals \u4e2d\u8c03\u7528 64 \u4f4d\u64cd\u4f5c\u3002 * /* \u8b66\u544a\uff1a\u6b64\u51fd\u6570\u5bf9 64 \u4f4d\u503c\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46 * \u5b9e\u9645\u6267\u884c\u53ef\u80fd\u53d1\u751f\u5728 32 \u4f4d\u503c\u4e0a\u3002\u56e0\u6b64\uff0c*\u50cf\u4f4d\u79fb\u8fd9\u6837\u7684\u4e1c\u897f\u5728 32 \u4f4d\u60c5\u51b5\u4e0b\u9700\u8981\u989d\u5916\u68c0\u67e5\u3002*/ static int adjust_scalar_min_max_vals ( struct bpf_verifier_env *env, struct bpf_insn *insn, struct bpf_reg_state *dst_reg, struct bpf_reg_state src_reg ) { ... case BdPFst_AND - &gt;var_off = tnum_and (dst_reg - &gt;var_off , src_reg .var_off ) ; scalar32_min_max_and (dst_reg , &amp;src_reg ) ; scalar_min_max_and (dst_reg , &amp;src_reg ) ;\u4f11\u606f ;\u6848\u4f8b BPF_OR : dst_reg - &gt;var_off = tnum_or (dst_reg - &gt;var_off , src_reg .var_off ) ; scalar32_min_max_or (dst_reg , &amp;src_reg ) ; scalar_min_max_or (dst_reg , &amp;src_reg ) ;\u4f11\u606f ;\u6848\u4f8b BPF_XOR : dst_reg - &gt;var_off = tnum_xor (dst_reg - &gt;var_off , src_reg .var_off ) ; scalar32_min_max_xor (dst_reg , &amp;src_reg ) ; scalar_min_max_xor (dst_reg , &amp;src_reg ) ;\u4f11\u606f ; ... } \u6f0f\u6d1e CVE-2021-3490 \u4f4d\u4e8e BPF_AND \u3001 BPF_OR \u548c BPF_XOR \u64cd\u4f5c\u7684 32 \u4f4d\u8ddf\u8e2a\u51fd\u6570\u4e2d\u3002\u6bcf\u4e2a\u529f\u80fd\u90fd\u662f\u4e00\u6837\u7684\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b BPF_AND \u7684\u8fdd\u89c4\u4ee3\u7801\u7684\u6458\u5f55\uff1a static void scalar32_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known = tnum_subreg_is_const (src_reg - &gt;var_off) bool dst_known = tnum_subreg_is_const (dst_reg - &gt;var_off); struct tnum var32_off = tnum_subreg (dst_reg - &gt;var_off) ; s32 smin_val = src_reg-&gt;s32_min_value; u32 umax_val = src_reg - &gt;u32_max_value \uff1b /* \u5047\u8bbe scalar64_min_max_and \u5c06\u88ab\u8c03\u7528\uff0c\u6240\u4ee5\u5b83\u5b89\u5168 * \u8df3\u8fc7\u66f4\u65b0\u5df2\u77e5 32 \u4f4d\u60c5\u51b5\u7684\u5bc4\u5b58\u5668\u3002 */ \u5982\u679c (src_known &amp;&amp; dst_known ) \u8fd4\u56de\uff1b ... }\n\u5982\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u6240\u793a\uff0c\u5982\u679c\u6e90\u5bc4\u5b58\u5668\u548c\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u5df2\u77e5\uff0c\u5219\u8be5\u51fd\u6570\u4f1a\u8df3\u8fc7\u66f4\u65b0 32 \u4f4d\u8fb9\u754c\u3002\u8fd4\u56de\u4e0a\u9762\u7684\u6ce8\u91ca\u6307\u51fa\u8fd9\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a 64 \u4f4d\u5bf9\u5e94\u7269\u4f1a\u5904\u7406\u5b83\u3002\u6211\u4eec\u6765\u770b\u770b\uff1a static void scalar_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known = tnum_is_const (src_reg - &gt;var_off ) ; bool dst_known = tnum_is_const (dst_reg - &gt;var_off) ; s64 smin_val = src_reg-&gt;smin_value; u64 umin_val = src_reg - &gt;umin_value \uff1b if (src_known &amp;&amp; dst_known ) { __mark_reg_known (dst_reg , dst_reg - &gt;var_off .value ) ;\u8fd4\u56de ; } ... } \u7684\u786e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5982\u679csrc_known \u548cdst_known \u4e3a\u771f\uff0c\u51fd\u6570__mark_reg_known \u4f1a\u88ab\u8c03\u7528\u3002\u4f60\u80fd\u53d1\u73b0\u95ee\u9898\u5417\uff1f\u5728 scalar32_min_max_and \u4e2d\uff0c _known \u53d8\u91cf\u662f\u4f7f\u7528 tnum_subreg_is_const \u8ba1\u7b97\u7684\u3002 64 \u4f4d\u5bf9\u5e94 scalar_min_max_and \u4f7f\u7528 tnum_is_const \u3002\u533a\u522b\u5728\u4e8e\uff0c\u5982\u679c\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u662f\u5df2\u77e5\u5e38\u91cf\uff0c\u5219\u524d\u8005\u8fd4\u56de\u771f\uff0c\u800c\u540e\u8005\u4ec5\u5728\u6574\u4e2a 64 \u4f4d\u90fd\u662f\u5e38\u91cf\u65f6\u624d\u8fd4\u56de\u771f\u3002\u5982\u679c\u64cd\u4f5c\u6d89\u53ca\u4f4e 32 \u4f4d\u5df2\u77e5\u4f46\u9ad8 32 \u4f4d\u672a\u77e5\u7684\u5bc4\u5b58\u5668\uff0c\u5219\u8fdd\u53cd\u6ce8\u91ca\u4e2d\u6240\u8ff0\u7684\u5047\u8bbe\u3002\u5728\u51fd\u6570 adjust_scalar_min_max_vals \u4e2d\uff0c\u5728\u8fd4\u56de\u4e4b\u524d\uff0c\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u4e09\u4e2a\u51fd\u6570\u6700\u540e\u4e00\u6b21\u66f4\u65b0\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u8fb9\u754c\uff1a\u8fd9\u4e9b\u51fd\u6570\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u6709 32 \u4f4d\u548c 64 \u4f4d\u5bf9\u5e94\u9879\u3002\u6211\u5c06\u53ea\u4ecb\u7ecd 32 \u4f4d\u60c5\u51b5\uff0c\u56e0\u4e3a\u90a3\u662f\u9519\u8bef\u5f71\u54cd\u7684\u5185\u5bb9\u3002\nstatic void __update_reg32_bounds (struct bpf_reg_state *reg) { struct tnum var32_off = tnum_subreg (reg-&gt;var_off); /* \u6700\u5c0f\u6709\u7b26\u53f7\u662f\u6700\u5927\uff08\u7b26\u53f7\u4f4d\uff09 | min(other bits) */ reg - &gt;s32_min_value = max_t (s32 , reg - &gt;s32_min_value , var32_off .value | (var32_off .mask &amp; S32_MIN ) ) ; /* \u6700\u5927\u6709\u7b26\u53f7\u662f\u6700\u5c0f\uff08\u7b26\u53f7\u4f4d\uff09 | max(other bits) */ reg - &gt;s32_max_value = min_t (s32 , reg - &gt;s32_max_value , var32_off .value | (var32_off .mask &amp; S32_MAX ) ) ; reg - &gt;u32_min_value = max_t (u32 , reg - &gt;u32_min_value , (u32 )var32_off .value ) ; reg - &gt;u32_max_value = min (reg - &gt;u32_max_value , (u32 ) (var32_off .value | var32_off .mask ) ) ;\u8bf7\u6ce8\u610f\uff0c\u6700\u5c0f\u503c\u8fb9\u754c\u8bbe\u7f6e\u4e3a\u5f53\u524d\u6700\u5c0f\u503c\u6216\u5bc4\u5b58\u5668\u7684\u5df2\u77e5\u503c\uff0c\u4ee5\u8f83\u5927\u8005\u4e3a\u51c6\u3002\u7c7b\u4f3c\u5730\uff0c\u6700\u5927\u8fb9\u754c\u8bbe\u7f6e\u4e3a\u5f53\u524d\u6700\u5927\u503c\u6216\u5bc4\u5b58\u5668\u7684\u5df2\u77e5\u503c\uff0c\u4ee5\u8f83\u5c0f\u8005\u4e3a\u51c6\u3002\u7136\u540e\uff0c\u5728 __reg32_deduce_bounds \u4e2d\u4f7f\u7528\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u8fb9\u754c\u76f8\u4e92\u66f4\u65b0\u3002 /* \u4f7f\u7528\u6709\u7b26\u53f7\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\u6765\u901a\u77e5\u65e0\u7b26\u53f7\uff0c\u53cd\u4e4b\u4ea6\u7136 */ static void __reg32_deduce_bounds ( struct bpf_reg_state *reg ) { /* \u4ece\u6709\u7b26\u53f7\u7684\u8fb9\u754c\u4e2d\u5b66\u4e60\u7b26\u53f7\u3002 * \u5982\u679c\u6211\u4eec\u4e0d\u80fd\u8de8\u8d8a\u7b26\u53f7\u8fb9\u754c\uff0c\u90a3\u4e48\u6709\u7b26\u53f7\u8fb9\u754c\u548c * \u65e0\u7b26\u53f7\u8fb9\u754c * \u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u7ed3\u5408\u8d77\u6765\u3002\u8fd9\u751a\u81f3\u5728 * \u5426\u5b9a\u60c5\u51b5\u4e0b\u4e5f\u6709\u6548\uff0c\u4f8b\u5982 * -3 s&lt;= x s&lt;= -1 \u610f\u5473\u7740 0xf...fd u&lt;= x u&lt;= 0xf...ff\u3002 */ if (reg - &gt;s32_min_value &gt;= 0 || reg - &gt;s32_max_value &lt; 0 ) { reg - &gt;s32_min_value = reg - &gt;u32_min_value = max_t (u32 , reg - &gt;s32_min_value , reg - &gt;u32_min_value ) ; reg - &gt;s32_max_value = reg - &gt;u32_max_value = min_t (u32 , reg - &gt;s32_max_value , reg - &gt;u32_max_value ) ;\u8fd4\u56de ; } ... } static void __reg_bound_offset (struct bpf_reg_state *reg) { struct tnum var64_off = tnum_intersect (reg - &gt;var_off , tnum_range (reg - &gt;umin_value , reg - &gt;umax_value ) ) ; struct tnum var32_off = tnum_intersect (tnum_subreg (reg -&gt;var_off), tnum_range (reg -&gt;u32_min_value, reg -&gt;u32_max_value)); reg - &gt;var_off = tnum_or (tnum_clear_subreg (var64_off), var32_off); tnum_intersect \u63a5\u53d7\u4e24\u4e2a tnum \u5e76\u5c06\u4e24\u8005\u4f20\u8fbe\u7684\u77e5\u8bc6\u7ec4\u5408\u6210\u4e00\u4e2a tnum \u3002\u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u5b8c\u6210\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u8fd9\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u6f0f\u6d1e\u3002\n\u5047\u8bbe\u6211\u4eec\u6709\u6307\u4ee4 BPF_ALU64_REG(BPF_AND, R2, R3)\u3002\u8be5\u6307\u4ee4\u5bf9\u5bc4\u5b58\u5668 R2 \u548c R3 \u6267\u884c AND \u8fd0\u7b97\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728 R2 \u4e2d\u3002 R2 \u6709 var_off = {mask = 0xFFFFFFFF00000000; value = 0x1}\uff0c\u8868\u793a\u5df2\u77e5\u4f4e 32 \u4f4d\u503c\u4e3a 1\uff0c\u9ad8 32 \u4f4d\u672a\u77e5\u3002\u56e0\u4e3a\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u662f\u5df2\u77e5\u7684\uff0c\u6240\u4ee5\u5b83\u7684 32 \u4f4d\u8fb9\u754c\u7b49\u4e8e\u8be5\u503c\u3002 R3 \u6709 var_off = {mask = 0x0; value = 0x100000002}\uff0c\u610f\u5473\u7740\u6574\u4e2a 64 \u4f4d\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u7b49\u4e8e 0x100000002\u3002\u5982 adjust_scalar_min_max_vals \u7247\u6bb5\u7684\u7b2c 12 \u884c\u6240\u793a\uff0c\u51fd\u6570 tnum_and \u88ab\u8c03\u7528\u3002\u8fd9\u5c06\u6267\u884c AND \u8fd0\u7b97\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u76ee\u6807\u5bc4\u5b58\u5668 R2 \u7684 var_off \u4e2d\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u4f4e 32 \u4f4d\u90fd\u662f\u5df2\u77e5\u7684\u3002 R3 \u7684\u6240\u6709\u4f4d\u90fd\u662f\u5df2\u77e5\u7684\uff1a\u9ad8 31 \u4f4d\u662f 0\uff0c\u7b2c 32 \u4f4d\u662f 1\u3002\u8fd9\u610f\u5473\u7740 R2 \u5269\u4e0b var_off = {mask = 0x100000000;\u503c = 0x0}\u3002\u8fd9\u662f\u56e0\u4e3a 2 &amp; 1 = 0\uff08\u5bf9\u4e8e\u4f4e 32 \u4f4d\uff09\uff0c\u5e76\u4e14\u9664\u4e86\u7b2c 32 \u4f4d\u4e4b\u5916\u7684\u6240\u6709\u4f4d\u90fd\u5c06\u88ab\u79f0\u4e3a 0\uff0c\u56e0\u4e3a R3 \u5728\u7b2c 32 \u4f4d\u4e2d\u6709\u4e00\u4e2a 1\u3002\u5728\u4e0b\u4e00\u884c\uff0c\u8c03\u7528 scalar32_min_max_and\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u4f1a\u7acb\u5373\u8fd4\u56de\u5e76\u4e14\u4e0d\u4f1a\u6539\u53d8\u8fb9\u754c\uff0c\u56e0\u4e3a\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u90fd\u662f\u5df2\u77e5\u7684\u3002\u7136\u540e __update_reg32_bounds \u88ab\u8c03\u7528\u3002\u8fd9\u5c06\u8bbe\u7f6e u32_max_value = 0 \uff0c\u56e0\u4e3a var_off.value = 0 &lt; u32_max_value = 1 \u7684\u503c\u3002\u540c\u6837\uff0c\u5b83\u4f1a\u8bbe\u7f6e u32_min_value = 1 \u56e0\u4e3a var_off.value = 0 &lt; u32_min_value \u3002\u7b7e\u540d\u8fb9\u754c\u4e5f\u662f\u5982\u6b64\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7559\u4e0b\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u5176\u4e2d {u,s}32_max_value = 0 &lt; {u,s}32_min_value = 1 \uff01\n@@ - 7084 , 11 + 7084 , 10 @@ static void scalar32_min_max_and (struct bpf_reg_state *dst_reg , s32 smin_val = src_reg - &gt; s32_min_value ; u32 umax_val = 3 src_max - u32 umax_val = 3 src_max - u32 umax_val = 3 src_max - u /* 3 src_max - u /* 3 2_reg_\u548c * 4 _ \u548c * 4 \u5c06\u5b89\u5168\u79f0\u4e3a\u5b89\u5168\u8df3\u8fc7\u66f4\u65b0\u5df2\u77e5 32 \u4f4d\u60c5\u51b5\u7684\u5bc4\u5b58\u5668\u3002- */ - if (src_known &amp;&amp; dst_known ) + if (src_known &amp;&amp; dst_known ) { + __mark_reg32_known (dst_reg , var32_off .value ) ; return ; + } \u4e0a\u9762\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6e90\u548c\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u662f\u5df2\u77e5\u5e38\u91cf\uff0c\u5219\u5728\u8fd4\u56de\u4e4b\u524d\u5728\u76ee\u6807\u5bc4\u5b58\u5668\u4e0a\u8c03\u7528 __mark_reg32_known\u3002 /* \u5c06\u5bc4\u5b58\u5668\u7684\u672a\u77e5\u90e8\u5206\uff08\u53d8\u91cf\u504f\u79fb\u91cf\u6216\u6807\u91cf * \u503c\uff09\u6807\u8bb0\u4e3a\u5df2\u77e5\u503c @imm\u3002 */ static void __mark_reg32_known ( struct bpf_reg_state *reg, u64 imm ) { reg - &gt;var_off = tnum_const_subreg (reg - &gt;var_off , imm ) ; reg - &gt;s32_min_value = (s32 )imm ; reg - &gt; value.imm ; reg - &gt;s32_s3_s3_s32 .....", "note_en": "At  Grapl we believe that in order to build the best defensive system we need to deeply understand attacker behaviors. As part of that goal we&#39;re investing in offensive security research.  Keep up with our blog for new research on high risk vulnerabilities, exploitation, and advanced threat tactics.\n    Find the released local privilege escalation (LPE) Proof-of-Concept for  CVE-2021-3490 here:  https://github.com/chompie1337/Linux_LPE_eBPF_CVE-2021-3490. It targets Ubuntu 20.10 (Groovy Gorilla) kernels 5.8.0-25.26 through 5.8.0-52.58. and Ubuntu 21.04 (Hirsute Hippo) 5.11.0-16.17.\n    This blog post is intended to give a detailed overview of eBPF from the perspective of an exploit developer. In this post, I cover:\n     I had no knowledge of eBPF going into this. My hope is that by sharing a PoC as well as my experience developing it, it can help others get started with eBPF exploitation.\n                  Berkeley Packet Filter (BPF) was initially created as a way to perform packet filtering in the kernel. Its capabilities were later redesigned and extended to create extended Berkeley Packet Filter (eBPF)  [1].\n    Put simply, eBPF provides a way for a user mode application to run code in the kernel without needing to write a kernel module.The purported benefits of using eBPF versus a kernel module are ease of use, stability, and security. There are also performance improvements gained by doing certain tasks directly in the kernel compared to a pure user mode program. eBPF programs are used to do a myriad of things such as: tracing, instrumentation, hooking system calls, debugging, and of course, packet capturing/filtering.\n    eBPF programs are written in a high level language and compiled into eBPF bytecode using a toolchain (such as  BCC   [18]). The eBPF VM uses a simple instruction set that uses eleven* 64-bit registers, a program counter, and a 512 byte fixed-size stack. Nine registers are general purpose read-write, one is a read-only stack pointer and the program counter is implicit  [2] . The instruction set is similar to x86, and operates on both 64 and 32 bit values.\n          *Technically, it uses   12 registers,  but the 12th register is an auxiliary register only used to perform ALU sanitation operations   [12].\n  A user mode application loads the bytecode into the kernel using the   bpf()    [14] syscall, where the eBPF verifier will perform a number of checks to ensure the program is \u201csafe\u201d to run in the kernel. This verification step is critical - eBPF exposes a path for unprivileged users to execute in ring0.\n    After the program is loaded, the user mode application attaches the program to a \u201chook point\u201d. A hook point is a place in the kernel where eBPF programs can be attached  [5]. eBPF programs are event driven, meaning the program will execute when certain events occur at the hook point. The classic use case is attaching an eBPF program to a socket, where the program will execute when data is written to it.\n    If the   kconfig knob   CONFIG_BPF_JIT is set, the eBPF program is JIT compiled into native assembly instructions after it is verified and loaded. Otherwise, when the program is executed it is run in the eBPF interpreter which decodes and executes the eBPF bytecode instructions.\n  User mode applications can interact with and get data from the eBPF program running in the kernel using eBPF maps and eBPF helper functions, which are accessed via the    bpf()  syscall.\n      The     sysctl   knob    kernel.unprivileged_bpf_disabled  determines whether unprivileged users are allowed to run eBPF programs. If it is not set, unprivileged users are allowed to attach an eBPF program to a socket that the user owns. In many Linux distributions, such as Ubuntu,    unprivileged_bpf_disabled  is not enabled by default. Because of this, I decided to look into eBPF more closely, as allowing unprivileged users to run code in the kernel is a ripe attack surface.\n    I mentioned above that user mode processes can interact with a eBPF program in the kernel using eBPF maps. They can also be used by multiple eBPF programs to interact with each other. They are a generic key/value store with an arbitrary data structure  [6]. There are various types of maps including: arrays, queues, and stacks.\n      key_size  - the size in bytes of the key used to index an element (used in array maps)\n   map_flags  - describes special characteristics of the map, such as if the entire map memory should be preallocated or not.\n eBPF maps can be created and altered from user space via the    bpf()  syscall using the    BPF_MAP_CREATE  command, updated using the    BPF_MAP_UPDATE_ELEM  command, and retrieve its contents using the    BPF_MAP_LOOKUP_ELEM  command. eBPF maps can accessed by eBPF programs using the file descriptor returned by    BPF_MAP_CREATE  and calling eBPF helper functions, which will return pointers to values within the map.\n      The exploit I wrote leverages a bug in the eBPF verifier. So before I delve into the vulnerability it is important to briefly explain the internals of the verifier.\n    The verifier starts by building a control flow graph of the program. Then, it will verify each instruction is valid and all memory accesses are safe through each possible flow of control  [3]. Afterwards, it will add in runtime checks to the program. This process, called  ALU Sanitation, inserts patches to the eBPF bytecode to ensure permitted memory ranges are not violated during runtime when performing pointer arithmetic  [4].\n      No pointer comparisons can be performed, and only scalar values can be added or subtracted to a pointer. A scalar value in the eBPF verifier is any value that is not derived from a pointer. The verifier keeps track of which registers contain pointers and which contain scalar values.\n Pointer arithmetic can not leave the \u201csafe\u201d bounds of a map. Meaning, the program can not access anything outside the predefined map memory. To do so, verifier keeps track of the upper and lower bounds of the values for each register.\n No pointers can be stored in maps or stored as a return value, in order to avoid leaking kernel addresses to user space.\n     The verifier stores the following bound values, for every register in each possible path of execution, to ensure there are no out-of-bound memory accesses:\n  umin_value ,    umax_value  store the min/max value of the register when interpreted as an unsigned (64 bit) integer\n smin_value ,   smax_value  store the min/max value of the register when interpreted as a signed (64 bit) integer.\n u32_min_value ,   u32min_value  store the min/max value of the register when interpreted as an unsigned (32 bit) integer.\n s32_min_value ,   s32_max_value  store the min/max value of the register when interpreted as a signed (32 bit) integer.\n var_off  contains information about the bits of the the register that are known. It is stored in a structure called    tnum  which contains two 64 bit fields:    mask  and    value . Every bit that is set in    mask  means the value of that bit is  unknown. The unset bits are known, and their true value are stored in    value . For example, if    var_off = {mask = 0x0; value = 0x1} , all bits of the register are known, and the register is known to have a value of 1. If    var_off = {mask = 0xFFFFFFFF00000000; value = 0x3}  it means that the lower 32 bits of the register are known to be 0x00000003 and the upper 32 bits are unknown.\n These bounds are used to update each other. In particular, if    var_off  indicates the register is a known constant, the min/max bounds are updated to reflect the known value. We will see why this is important later!\n      ALU Sanitation is a feature that was introduced to supplement the static range tracking of the verifier. The idea is to prevent OOB memory accesses if the value of registers do not fall within their expected range during runtime. This was added to help mitigate potential vulnerabilities in the verifier and protect against speculative attacks.\n  For every arithmetic operation that involves a pointer and a scalar register, an    alu_limit  is calculated. This represents the maximum absolute value that can be added to or subtracted from the pointer  [4]. Before each of these operations, the bytecode is patched with the following instructions:\n  *patch ++  =  BPF_MOV32_IMM ( BPF_REG_AX , aux - &gt;alu_limit ) ; *patch ++  =  BPF_ALU64_REG ( BPF_SUB ,  BPF_REG_AX , off_reg ) ; *patch ++  =  BPF_ALU64_REG ( BPF_OR ,  BPF_REG_AX , off_reg ) ; *patch ++  =  BPF_ALU64_IMM ( BPF_NEG ,  BPF_REG_AX ,  0 ) ; *patch ++  =  BPF_ALU64_IMM ( BPF_ARSH ,  BPF_REG_AX ,  63 ) ; *patch ++  =  BPF_ALU64_REG ( BPF_AND ,  BPF_REG_AX , off_reg ) ;\n    Note that    off_reg  represents the scalar register being added to the pointer register, and    BPF_REG_AUX  represents the auxiliary register.\n      The value of    off_reg  at runtime is subtracted from    alu_limit  and stored into    BPF_REG_AX . If    off_reg &gt; alu_limit , the highest bit of    BPF_REG_AX  is set (the sign bit).\n If the difference stored in    BPF_REG_AUX  is positive and off_reg is negative, indicating that    alu_limit  and the register\u2019s value have opposing signs, the    BPF_OR  operation will set the sign bit.\n The    BPF_NEG  operation will negate the sign bit. If the sign bit is set, it will become 0, and if not, it will become 1.\n The    BPF_ARSH  operation does an arithmetic right shift of 63 bits. This fills    BPF_REG_AX  with either all 0s or 1s, the value of the sign bit.\n Depending on the result of the above operation, the    BPF_AND  operation will either null out    off_reg  or leave it unchanged.\n This means that if    off_reg  exceeds    alu_limit , or if    off_reg  and    alu_limit  have opposing signs, the value of    off_reg  will be replaced with 0, nulling the pointer arithmetic operation.\n        The way    alu_limit  is calculated was  recently updated  [15]. The new implementation may not have been adopted yet by some Linux distributions. For completeness, I will cover both, and revisit why the differences matter as they become relevant in the next sections.\n      The    alu_limit  is determined by the boundaries of the  pointer register. Meaning, if the pointer register points to the beginning of a map, the    alu_limit  for subtraction is 0, and the alu_limit for addition is equal to the size of the map (minus 1). The    alu_limit  is updated with subsequent operations on the pointer register.\n      The    alu_limit  is determined by the boundaries of the  offset register. Meaning if the value of the offset register at runtime is compared against the register\u2019s boundaries computed during the verifier\u2019s static range tracking.\n    My initial knowledge of the eBPF verifier came from this excellent   blog post  by Manfred Paul detailing his exploitation of CVE-2020-8835. I highly recommend checking it out!\n      Recall that the eBPF instruction set can operate on both the entire 64 bits of registers or just the lower 32 bits. For this reason, the verifier range tracking contains separate bounds for the lower 32 bits of a register:    {u,s}32_{min,max}_value .\n  These bounds are updated for every operation. Each operation has two tracking functions with a 64 bit and a 32 bit counter part. Both are called for a 64 bit operation in the function   adjust_scalar_min_max_vals  .\n  * /* WARNING: This function does calculations on 64-bit values, but * the actual execution may occur on 32-bit values. Therefore, * things like bitshifts need extra checks in the 32-bit case.*/ static int  adjust_scalar_min_max_vals ( struct bpf_verifier_env *env, struct bpf_insn *insn, struct bpf_reg_state *dst_reg, struct bpf_reg_state src_reg ) { ...  case  BPF_AND : dst_reg - &gt;var_off  =  tnum_and (dst_reg - &gt;var_off , src_reg .var_off ) ;  scalar32_min_max_and (dst_reg ,  &amp;src_reg ) ;  scalar_min_max_and (dst_reg ,  &amp;src_reg ) ;  break ;  case  BPF_OR : dst_reg - &gt;var_off  =  tnum_or (dst_reg - &gt;var_off , src_reg .var_off ) ;  scalar32_min_max_or (dst_reg ,  &amp;src_reg ) ;  scalar_min_max_or (dst_reg ,  &amp;src_reg ) ;  break ;  case  BPF_XOR : dst_reg - &gt;var_off  =  tnum_xor (dst_reg - &gt;var_off , src_reg .var_off ) ;  scalar32_min_max_xor (dst_reg ,  &amp;src_reg ) ;  scalar_min_max_xor (dst_reg ,  &amp;src_reg ) ;  break ;  ... }\n    The bug,  CVE-2021-3490, is found in the 32 bit tracking function for    BPF_AND ,    BPF_OR , and    BPF_XOR  operations. It is the same in each of the functions.\n    Let\u2019s take a look at an excerpt of the  offending code for    BPF_AND :\n  static  void  scalar32_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known  =  tnum_subreg_is_const (src_reg - &gt;var_off ) ; bool dst_known  =  tnum_subreg_is_const (dst_reg - &gt;var_off ) ; struct tnum var32_off  =  tnum_subreg (dst_reg - &gt;var_off ) ; s32 smin_val  = src_reg - &gt;s32_min_value ; u32 umax_val  = src_reg - &gt;u32_max_value ;  /* Assuming scalar64_min_max_and will be called so its safe * to skip updating register for known 32-bit case. */  if  (src_known  &amp;&amp; dst_known )  return ; ... }\n    As shown in the code snippet above, if the lower 32 bits of both the source and destination register are known, the function skips updating the 32 bit bounds.\n    The comment above the return states that this is OK, because the  64 bit  counterpart will take care of it. Let\u2019s take a look:\n  static  void  scalar_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known  =  tnum_is_const (src_reg - &gt;var_off ) ; bool dst_known  =  tnum_is_const (dst_reg - &gt;var_off ) ; s64 smin_val  = src_reg - &gt;smin_value ; u64 umin_val  = src_reg - &gt;umin_value ;  if  (src_known  &amp;&amp; dst_known )  {  __mark_reg_known (dst_reg , dst_reg - &gt;var_off .value ) ;  return ;  }  ... }\n  Indeed, we can see if    src_known  and    dst_known  are true, the function    __mark_reg_known  will be called. Can you spot the problem?\n    In    scalar32_min_max_and , the    _known  variable is calculated using    tnum_subreg_is_const  . The 64 bit counterpart,    scalar_min_max_and , uses    tnum_is_const . The difference is that the former returns true if the the lower 32 bits of the register are known constants, and the latter returns true only if the entire 64 bits are constant. If the operation involves registers where the lower 32 bits are known but the upper 32 bits are unknown, the assumption stated in the comment is violated.\n    In the function    adjust_scalar_min_max_vals , before returning, the bounds of the destination register are updated a last time by calling the  following three functions:\n    Each of these functions have 32 and 64 bit counterparts. I\u2019ll just cover the 32 bit case, since that is what the bug affects.\n      static  void  __update_reg32_bounds ( struct bpf_reg_state *reg ) { struct tnum var32_off  =  tnum_subreg (reg - &gt;var_off ) ;  /* min signed is max(sign bit) | min(other bits) */ reg - &gt;s32_min_value  =  max_t (s32 , reg - &gt;s32_min_value , var32_off .value  |  (var32_off .mask  &amp;  S32_MIN ) ) ;  /* max signed is min(sign bit) | max(other bits) */ reg - &gt;s32_max_value  =  min_t (s32 , reg - &gt;s32_max_value , var32_off .value  |  (var32_off .mask  &amp;  S32_MAX ) ) ; reg - &gt;u32_min_value  =  max_t (u32 , reg - &gt;u32_min_value ,  (u32 )var32_off .value ) ; reg - &gt;u32_max_value  =  min (reg - &gt;u32_max_value ,  (u32 ) (var32_off .value  | var32_off .mask ) ) ; }\n    Notice that the min bounds set to either the current min or the known value of register, whichever is larger. Similarly, the max bounds are set either the current max, or the known value of the register, whichever is smaller.\n  Then, the signed and unsigned bounds are used to update each other in   __reg32_deduce_bounds  .\n  /* Uses signed min/max values to inform unsigned, and vice-versa */ static  void  __reg32_deduce_bounds ( struct bpf_reg_state *reg ) {  /* Learn sign from signed bounds. * If we cannot cross the sign boundary, then signed and * unsigned bounds * are the same, so combine. This works even in the * negative case, e.g. * -3 s&lt;= x s&lt;= -1 implies 0xf...fd u&lt;= x u&lt;= 0xf...ff. */  if  (reg - &gt;s32_min_value  &gt;=  0  || reg - &gt;s32_max_value  &lt;  0 )  { reg - &gt;s32_min_value  = reg - &gt;u32_min_value  =  max_t (u32 , reg - &gt;s32_min_value , reg - &gt;u32_min_value ) ; reg - &gt;s32_max_value  = reg - &gt;u32_max_value  =  min_t (u32 , reg - &gt;s32_max_value , reg - &gt;u32_max_value ) ;  return ;  } ... }\n      static  void  __reg_bound_offset ( struct bpf_reg_state *reg ) { struct tnum var64_off  =  tnum_intersect (reg - &gt;var_off ,  tnum_range (reg - &gt;umin_value , reg - &gt;umax_value ) ) ; struct tnum var32_off  =  tnum_intersect ( tnum_subreg (reg - &gt;var_off ) , tnum_range (reg - &gt;u32_min_value , reg - &gt;u32_max_value ) ) ; reg - &gt;var_off  =  tnum_or ( tnum_clear_subreg (var64_off ) , var32_off ) ; }\n    tnum_intersect  takes two    tnum s and combines the knowledge conveyed by both into a single    tnum .\n Let\u2019s go through the steps using an example so we can understand why this is a critical vulnerability.\n  Suppose we have the instruction   BPF_ALU64_REG(BPF_AND, R2, R3). This instruction performs an   AND operation on registers   R2 and   R3 and saves the results in   R2.\n  R2 has   var_off = {mask = 0xFFFFFFFF00000000; value = 0x1}, meaning the lower 32 bits are known to have a value of 1, and the upper 32 bits are unknown. Because the lower 32 bits of the register are known, its 32bit bounds are equal to the value.\n R3 has   var_off = {mask = 0x0; value = 0x100000002}, meaning the entire 64 bits are known and equal to   0x100000002.\n   As shown on line 12 of the snippet of   adjust_scalar_min_max_vals, the function   tnum_and is called. This will perform an AND operation and save the results in var_off of the destination register,   R2. Recall, the lower 32 bits in both of the registers are known. All of the bits of R3 are known: the upper 31 bits of are 0, and the 32nd bit is 1. This means that    R2  is left with    var_off = {mask = 0x100000000; value = 0x0} . This is because 2 &amp; 1 = 0 (for the lower 32 bits), and all but the 32nd bit will be known to be 0, since    R3  has a 1 in the 32nd bit.\n On the next line,    scalar32_min_max_and  is called. We already know that this function will return immediately and make no changes to the bounds, because the lower 32 bits of both registers are known.\n Then    __update_reg32_bounds  is called. This will set    u32_max_value = 0 , because the value of    var_off.value = 0 &lt; u32_max_value = 1 . Similarly, it will set    u32_min_value = 1  because    var_off.value = 0 &lt; u32_min_value . The same goes for the signed bounds.\n Now we can see that in this case, we are left with a register where    {u,s}32_max_value = 0 &lt; {u,s}32_min_value = 1 !\n      @@  - 7084 , 11  + 7084 , 10 @@  static  void  scalar32_min_max_and (struct bpf_reg_state  *dst_reg , s32 smin_val  = src_reg - &gt;s32_min_value ; u32 umax_val  = src_reg - &gt;u32_max_value ;  -  /* Assuming scalar64_min_max_and will be called so its safe- * to skip updating register for known 32-bit case.- */ -  if  (src_known  &amp;&amp; dst_known ) +  if  (src_known  &amp;&amp; dst_known )  { +  __mark_reg32_known (dst_reg , var32_off .value ) ;  return ; +  }\n    Above we can see that now,   __mark_reg32_known  is called on the destination register before returning if the lower 32 bits of the source and destination register are known constants.\n    /* Mark the unknown part of a register (variable offset or scalar * value) as known to have the value @imm.*/ static  void  __mark_reg32_known ( struct bpf_reg_state *reg, u64 imm ) { reg - &gt;var_off  =  tnum_const_subreg (reg - &gt;var_off , imm ) ; reg - &gt;s32_min_value  =  (s32 )imm ; reg - &gt;s32_max_value  =  (s32 )imm\n......", "posttime": "2021-08-09 00:55:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u89e3,ebpf,pwning,bpf", "title": "\u4f7f\u7528 eBPF \u8fdb\u884c\u5185\u6838\u7834\u89e3\uff1a\u4e00\u4e2a\u7231\u60c5\u6545\u4e8b", "title_en": "Kernel Pwning with eBPF: A Love Story", "transed": 1, "url": "https://www.graplsecurity.com/post/kernel-pwning-with-ebpf-a-love-story", "via": "", "real_tags": ["\u7834\u89e3", "ebpf", "pwning", "bpf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072141, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Wildfire Games \u81ea\u8c6a\u5730\u5ba3\u5e03\u53d1\u5e03 0AD Alpha 25\uff1a\u201cYaun\u00e3\u201d\uff0c\u8fd9\u662f 0 AD \u7684\u7b2c 25 \u4e2a Alpha \u7248\u672c\uff0c\u8fd9\u662f\u4e00\u6b3e\u514d\u8d39\u3001\u5f00\u6e90\u7684\u53e4\u4ee3\u6218\u4e89\u5b9e\u65f6\u6218\u7565\u6e38\u620f\u3002 Yaun\u00e3 \u662f\u53e4\u6ce2\u65af\u8bed\u4e2d\u7231\u5965\u5c3c\u4e9a\u4eba\uff08\u5e0c\u814a\u4eba\uff09\u7684\u8bcd\u3002\u8ba2\u5355\u91cd\u7ec4\u2014\u2014\u73a9\u5bb6\u73b0\u5728\u53ef\u4ee5\u5c06\u65b0\u8ba2\u5355\u63a8\u5230\u751f\u4ea7\u961f\u5217\u7684\u524d\u9762 0 AD \u662f\u514d\u8d39\u8f6f\u4ef6\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728\u76f8\u540c\u7684\u8bb8\u53ef\u4e0b\u514d\u8d39\u4e0b\u8f7d\u3001\u91cd\u65b0\u5206\u53d1\u3001\u4fee\u6539\u548c\u8d21\u732e\u5e94\u7528\u7a0b\u5e8f\uff1a\u7528\u4e8e\u4ee3\u7801\u7684 GNU \u516c\u5171\u8bb8\u53ef\u7248\u672c 2 (GPL v2) \u548c\u7528\u4e8e\u827a\u672f\u4f5c\u54c1\u7684\u77e5\u8bc6\u5171\u4eab\u7f72\u540d\u76f8\u540c\u65b9\u5f0f\u5171\u4eab 3.0 (CC-BY-SA 3.0) .\u5c3d\u7ba1\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u6709\u4e9b\u4eba\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u7269\u7406\u5a92\u4f53\u51fa\u552e 0 AD \u7684\u526f\u672c\uff0c\u4f46\u60a8\u59cb\u7ec8\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4ece\u5f00\u53d1\u4eba\u5458\u5904\u5b8c\u5168\u514d\u8d39\u4e0b\u8f7d 0 AD\u3002\u6ca1\u6709\u201c\u514d\u8d39\u589e\u503c\u201d\u6a21\u5f0f\uff0c\u6ca1\u6709\u6e38\u620f\u5185\u5e7f\u544a\uff0c\u6ca1\u6709\u6355\u83b7\u3002", "note_en": "Wildfire Games proudly announces the release of 0AD Alpha 25: \u201cYaun\u00e3,\u201d the twenty-fifth alpha version of 0 A.D., a free, open-source real-time strategy game of ancient warfare.\u00a0Yaun\u00e3 is an\u00a0old Persian word for Ionians (Greeks).\n     Order Restructuring \u2013 Players Can Now Push New Orders To The Front Of Their Production Queues\n   0 A.D. is free software. This means you are free to download, redistribute, modify and   contribute \u00a0to the application under the same licences: GNU Public Licence version 2 (GPL v2) for code and Creative Commons Attribution Share-Alike 3.0 (CC-BY-SA 3.0) for artwork.\n Although you might find some people selling copies of 0 A.D., either over the internet or on physical media, you will always have the option to   download 0 A.D. \u00a0completely gratis, directly from the developers. No \u201cfreemium\u201d model, no in-game advertising, no catch.", "posttime": "2021-08-09 00:54:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ad,alpha", "title": "0 AD \u963f\u5c14\u6cd5 25\uff1aYaun\u0101", "title_en": "0 A.D. Alpha 25: Yaun\u0101", "transed": 1, "url": "https://play0ad.com/new-release-0-a-d-alpha-25-yauna/", "via": "", "real_tags": ["ad", "alpha"]}, {"category": "", "categoryclass": "", "imagename": "f1ac3d2c9a9eb77da56b61f928e0d7a6.png", "infoid": 1072140, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u636e\u62a5\u9053\uff0c\u652f\u4ed8\u670d\u52a1\u516c\u53f8 Xsolla \u89e3\u96c7\u4e86 150 \u540d\u5458\u5de5\uff0c\u6839\u636e\u5bf9\u5176\u6d3b\u52a8\u7684\u5927\u6570\u636e\u5206\u6790\uff08\u901a\u8fc7 Game World Observer\uff09\uff0c\u8be5\u516c\u53f8\u4f4d\u4e8e\u4fc4\u7f57\u65af\u5f7c\u5c14\u59c6\u7684\u529e\u516c\u5ba4\u7684\u5458\u5de5\u88ab\u89e3\u96c7\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0cXsolla \u7684\u9996\u5e2d\u6267\u884c\u5b98\u517c\u521b\u59cb\u4eba Aleksandr Agapitov \u5411\u53d7\u5f71\u54cd\u7684\u5458\u5de5\u53d1\u9001\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u89e3\u91ca\u4e86\u8fd9\u4e00\u51b3\u5b9a\uff0c\u5e76\u900f\u9732\u4ed6\u4eec\u5df2\u88ab\u89e3\u96c7\uff0c\u56e0\u4e3a\u4ed6\u4eec\u88ab\u6807\u8bb0\u4e3a\u201c\u4e0d\u656c\u4e1a\u4e14\u6548\u7387\u4f4e\u4e0b\u7684\u5458\u5de5\u201d\u3002 \u201c\u60a8\u6536\u5230\u8fd9\u5c01\u7535\u5b50\u90ae\u4ef6\u662f\u56e0\u4e3a\u6211\u7684\u5927\u6570\u636e\u56e2\u961f\u5206\u6790\u4e86\u60a8\u5728 Jira\u3001Confluence\u3001Gmail\u3001\u804a\u5929\u3001\u6587\u6863\u3001\u4eea\u8868\u677f\u4e2d\u7684\u6d3b\u52a8\uff0c\u5e76\u5c06\u60a8\u6807\u8bb0\u4e3a\u4e0d\u656c\u4e1a\u4e14\u6548\u7387\u4f4e\u4e0b\u7684\u5458\u5de5\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u60a8\u8fdc\u7a0b\u5de5\u4f5c\u65f6\uff0c\u60a8\u5e76\u4e0d\u603b\u662f\u5728\u5de5\u4f5c\u573a\u6240\u3002 \u201c\u4f60\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u53ef\u80fd\u4f1a\u611f\u5230\u9707\u60ca\uff0c\u4f46\u6211\u771f\u7684\u76f8\u4fe1 Xsolla \u4e0d\u9002\u5408\u4f60\u4eec\u3002 Nadia \u548c\u5979\u7684\u62a4\u7406\u56e2\u961f\u4e0e\u4e03\u5bb6\u9886\u5148\u7684\u4eba\u529b\u8d44\u6e90\u673a\u6784\u5408\u4f5c\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5e2e\u52a9\u60a8\u627e\u5230\u4e00\u4e2a\u597d\u5730\u65b9\uff0c\u5728\u90a3\u91cc\u60a8\u8d5a\u5f97\u66f4\u591a\uff0c\u5de5\u4f5c\u66f4\u5c11\u3002 Sasha \u5c06\u5e2e\u52a9\u60a8\u83b7\u5f97\u63a8\u8350\uff0c\u5305\u62ec\u6211\u81ea\u5df1\u7684\u63a8\u8350\u3002 Natalia \u4f1a\u4e3a\u60a8\u89e3\u8bfb\u60a8\u7684\u6743\u5229\u3002 \u201c\u518d\u6b21\u611f\u8c22\u60a8\u7684\u8d21\u732e\u3002\u5982\u679c\u4f60\u60f3\u548c\u6211\u4fdd\u6301\u8054\u7cfb\uff0c\u8bf7\u7ed9\u6211\u5199\u4e00\u5c01\u957f\u4fe1\uff0c\u628a\u4f60\u6240\u6709\u7684\u89c2\u5bdf\u3001\u4e0d\u516c\u548c\u611f\u6fc0\u3002\u201d\u8fd9\u7acb\u5373\u5f15\u53d1\u4e86\u53ef\u9884\u89c1\u7684\u53cd\u5f39\uff1a\u65e0\u8bba\u662f\u88c1\u5458\u672c\u8eab\u8fd8\u662f\u7535\u5b50\u90ae\u4ef6\u7684\u8bed\u6c14\u3002\u636e ProPerm.ru \u79f0\uff0c\u8be5\u516c\u53f8\u6b63\u5728\u8c03\u67e5\u5bfb\u627e\u6cc4\u9732\u7535\u5b50\u90ae\u4ef6\u7684\u5458\u5de5\u3002\u88c1\u5458\u540e\uff0c\u963f\u52a0\u76ae\u6258\u592b\u53ec\u5f00\u4e86\u4e00\u6b21\u65b0\u95fb\u53d1\u5e03\u4f1a\uff0c\u4ed6\u89e3\u91ca\u8bf4\uff0c\u5927\u89c4\u6a21\u88c1\u5458\u662f\u7531\u4e8e\u516c\u53f8\u5df2\u505c\u6b62\u663e\u793a 40% \u7684\u589e\u957f\u3002\u963f\u52a0\u76ae\u6258\u592b\u63d0\u4f9b\u4e86\u66f4\u591a\u7ec6\u8282\uff0c\u5305\u62ec\u4e0b\u5c97\u5458\u5de5\u603b\u6570\u53ef\u80fd\u5360\u516c\u53f8\u6240\u6709\u529e\u516c\u5ba4\u5458\u5de5\u603b\u6570\u7684 40%\u3002\n\u5728\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e4b\u540e\uff0c\u963f\u52a0\u76ae\u6258\u592b\u901a\u8fc7\u4e00\u6761\u63a8\u6587\u5f15\u53d1\u4e86\u8fdb\u4e00\u6b65\u7684\u4e89\u8bae\uff0c\u63a8\u6587\u5927\u81f4\u7ffb\u8bd1\u4e3a\u201c\u8ba9\u4f60\u4ed6\u5988\u7684\u5c41\u80a1\u6eda\u5f00\uff0c\u6216\u8005\u8ba9\u4f60\u4ed6\u5988\u7684\u5c41\u80a1\u6eda\u51fa\u53bb\u3002\u201d\u963f\u52a0\u76ae\u6258\u592b\u5728\u63a5\u53d7\u300a\u798f\u5e03\u65af\u4fc4\u7f57\u65af\u300b\u91c7\u8bbf\u65f6\u900f\u9732\uff0c\u5728\u4e0e\u7ecf\u7406\u8ba8\u8bba\u540e\uff0c60 \u540d\u53d7\u5f71\u54cd\u7684\u5458\u5de5\u53ef\u80fd\u4f1a\u7559\u5728\u516c\u53f8\uff0c\u800c\u88ab\u89e3\u96c7\u7684\u5458\u5de5\u5c06\u4fdd\u7559\u533b\u7597\u4fdd\u9669\uff0c\u5e76\u83b7\u5f97\u76f8\u5f53\u4e8e\u56db\u5230\u516d\u4e2a\u6708\u5de5\u8d44\u7684\u533b\u7597\u5de5\u8d44\u3002", "note_en": "Payment services company Xsolla has reportedly fired 150 of its employees, with workers in the company\u2019s office in Perm, Russia being terminated based on big data analysis of their activity (via  Game World Observer).\n Making the situation worse, Xsolla CEO and founder Aleksandr Agapitov sent an email to the affected employees explaining the decision, revealing that they had been let go because they had been tagged as \u201cunengaged and unproductive employees.\u201d\n   \u201cYou received this email because my big data team analyzed your activities in Jira, Confluence, Gmail, chats, documents, dashboards and tagged you as unengaged and unproductive employees. In other words, you were not always present at the workplace when you worked remotely.\n \u201cMany of you might be shocked, but I truly believe that Xsolla is not for you. Nadia and her care team partnered with seven leading HR agencies, as we will help you find a good place, where you will earn more and work even less. Sasha will help you get a recommendation, including the one from myself. And Natalia will read you your rights.\n \u201cOnce again, thank you for your contribution. If you want to stay in contact with me, please write me a long letter about all your observations, injustice, and gratitude.\u201d\n This prompted immediate and predictable backlash: both for the layoffs themselves and for the tone of the email. According to  ProPerm.ru, the company is investigating to find the employee who leaked the email.\n Following the layoffs, Agapitov held a press conference in which he explained that the mass layoffs were caused by the fact that the company has stopped showing 40% growth. Agapitov provided further details, including that the total number of laid-off employees could total 40% of the company\u2019s headcount across all of its offices.\n Following the press conference, Agapitov incited further controversy with a  Tweet that roughly translates to \u201cWork your fucking ass off or get your fucking ass out.\u201d\n Speaking with  Forbes Russia, Agapitov revealed that 60 of the affected employees might stay with the company following discussions with their managers, while those who have been let go will keep their medical insurance and receive medical pay equal to four to six monthly salaries.", "posttime": "2021-08-09 00:54:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5927\u6570\u636e,\u6570\u636e\u5206\u6790,based,\u5458\u5de5", "title": "\u827e\u514b\u7d22\u62c9\u57fa\u4e8e\u5bf9\u5176\u6d3b\u52a8\u7684\u5927\u6570\u636e\u5206\u6790\u89e3\u96c7\u4e86 150 \u540d\u5458\u5de5", "title_en": "Xsolla fires 150 employees based on big data analysis of their activity", "transed": 1, "url": "https://www.mcvuk.com/business-news/xsolla-fires-150-employees-based-on-big-data-analysis-of-their-activity-many-of-you-might-be-shocked-but-i-truly-believe-that-xsolla-is-not-for-you/", "via": "", "real_tags": ["\u5927\u6570\u636e", "\u6570\u636e\u5206\u6790", "based", "\u5458\u5de5"]}, {"category": "", "categoryclass": "", "imagename": "6d4fe6117029a98c7aa66fe2542b07c2.png", "infoid": 1072138, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u590f\u5b63\u7684\u4e09\u4f0f\u5929\u5df2\u7ecf\u5230\u6765\uff0c\u672c\u5468\u5e02\u573a\uff08\u80a1\u7968\u3001\u503a\u52a1\u3001\u5546\u54c1\u5e02\u573a\uff09\u51e0\u4e4e\u6ca1\u6709\u53d8\u52a8\uff0c\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u7684\u64b0\u7a3f\u4eba\u601d\u8003\u5982\u4f55\u5728\u80a1\u7968\u548c\u5546\u54c1\u5e02\u573a\u65e0\u7cbe\u6253\u91c7\u7684\u60c5\u51b5\u4e0b\u5ea6\u8fc7\u4ed6\u4eec\u7684\u4e00\u5929\u3002\u968f\u610f\u7684\u60f3\u6cd5\u6293\u4f4f\u4e86\u65e0\u804a\u7684\u65f6\u523b\u3002\u751a\u81f3\u300a\u91d1\u878d\u65f6\u62a5\u300b\u4e5f\u6682\u65f6\u7f29\u6c34\u4e86\uff1a\u672c\u5468\u6bcf\u5929 6 \u9875\uff0c\u4ece\u7ecf\u5178\u7684 12 \u9875\u51cf\u5c11\u4e86\u3002\u590f\u5929\u5230\u4e86\u3002\u5173\u4e8e\u5fb7\u56fd\u8d54\u507f\u7684\u4e89\u8bba\u4ecd\u5728\u7ee7\u7eed\u3002\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u82f1\u56fd\u548c\u6cd5\u56fd\u5df2\u7ecf\u6e05\u695a\uff0c\u5fb7\u56fd\u65e0\u6cd5\u5168\u989d\u652f\u4ed8\u3002 1921 \u5e74 8 \u6708 10 \u65e5\u5c31\u4e09\u4e2a\u6838\u5fc3\u95ee\u9898\u5c55\u5f00\u8c08\u5224\uff0c\u800c\u4e0d\u662f\u8fdd\u7ea6\uff1a\u5fb7\u56fd\u5411\u76ee\u524d\u5360\u9886\u5fb7\u56fd\u5730\u533a\u7684\u82f1\u56fd\u548c\u6cd5\u56fd\u58eb\u5175\u4ed8\u6b3e\u3001\u5b9e\u7269\uff08\u94a2\u3001\u7164\u3001\u6728\u6750\uff09\u8f6c\u79fb\u4ee3\u66ff\u5fb7\u56fd\u91d1\u9a6c\u514b\uff0c\u4ee5\u53ca\u627f\u62c5\u6218\u4e89\u503a\u52a1\u6b27\u6d32\u8f83\u5c0f\u7684\u56fd\u5bb6\u3002\u5386\u53f2\u4e8b\u5b9e\uff1a\u5fb7\u56fd\u5728\u7b2c\u4e00\u200b\u200b\u6b21\u4e16\u754c\u5927\u6218\u540e\u4f7f\u7528\u4e24\u79cd\u5e73\u884c\u8d27\u5e01\uff1a\u91d1\u9a6c\u514b\u548c\u7eb8\u5e01\u3002\u51e1\u5c14\u8d5b\u6761\u7ea6\u89c4\u5b9a\u4ee5\u91d1\u9a6c\u514b\u652f\u4ed8\uff0c\u8fd9\u9020\u6210\u4e86\u4e25\u91cd\u7684\u8d22\u653f\u538b\u529b\u3002 1920 \u5e74\u4ee3\u7684\u5fb7\u56fd\u5f53\u7136\u88ab\u79f0\u4e3a\u9b4f\u739b\u5171\u548c\u56fd\uff0c\u5e76\u5c06\u5728 9 \u6708\u5f00\u59cb\u7ecf\u5386\u4e25\u91cd\u7684\u901a\u8d27\u81a8\u80c0\uff0c\u8fd9\u79cd\u901a\u8d27\u81a8\u80c0\u4f1a\u6301\u7eed\u4e24\u5e74\u76f4\u5230\u91d1\u878d\u5d29\u6e83\u3002\u7ebd\u7ea6\u7684\u4ea4\u6613\u5458\u60f3\u77e5\u9053\u4ec0\u4e48\u53ef\u80fd\u4f1a\u6539\u53d8\u5e02\u573a\u3002 \u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u7684\u7f16\u8f91\u4eec\u63a8\u6d4b\uff0c\u9ad8\u7a0e\u6536\u548c\u516c\u5171\u652f\u51fa\u6b63\u5728\u635f\u5bb3\u516c\u4f17\u5bf9\u62e5\u6709\u80a1\u7968\u7684\u770b\u6cd5\u3002\u4e0d\u65f6\u6709\u8db3\u591f\u52c7\u6562\u7684\u4eba\u5bf9\u4e0d\u53d7\u6b22\u8fce\u7684\u666e\u901a\u80a1\u53d1\u8868\u610f\u89c1\u3002\u6807\u51c6\u77f3\u6cb9\u516c\u53f8\u5728 1911 \u5e74\u88ab\u62c6\u5206\u4e3a\u8fd1\u4e09\u6253\u516c\u53f8\uff0c\u672c\u6587\u5217\u51fa\u4e86\u6240\u6709\u524d\u6210\u5206\u7684\u4ef7\u683c\u3002\u5c3d\u7ba1\u8fc7\u53bb\u4e00\u5e74\u8270\u96be\uff0c\u4f46 1921 \u5e74\u5df2\u7ecf\u663e\u793a\u51fa\u77f3\u6cb9\u89e6\u5e95\u7684\u8ff9\u8c61\u3002\u4f5c\u8005\u5efa\u8bae\u7cbe\u660e\u7684\u6295\u8d44\u8005\u8d2d\u4e70\u6240\u6709\u8fd9\u4e9b\u80a1\u7968\u3002\u6bcf\u5bb6\u516c\u53f8\u7684\u4ea4\u6613\u4ef7\u683c\u90fd\u4f4e\u4e8e\u8d26\u9762\u4ef7\u503c\uff01\u5e02\u76c8\u7387\u4ecb\u4e8e 3 \u5230 5 \u4e4b\u95f4\u3002\u63d0\u9192\u4e00\u4e0b\uff0c\u65e0\u98ce\u9669\u503a\u5238\u7684\u6536\u76ca\u7387\u4e3a 5%\uff0c\u79ef\u6781\u9f13\u52b1\u6563\u6237\u6295\u8d44\u8005\u4e0d\u8981\u6301\u6709\u80a1\u7968\u3002\u5386\u53f2\u4e8b\u5b9e\uff1a\u62a5\u7eb8\u4e0a\u5bf9\u666e\u901a\u80a1\u7684\u51b7\u6f20\u4f1a\u8ba9\u73b0\u4ee3\u6295\u8d44\u8005\u5782\u6d8e\u4e09\u5c3a\u3002\u5982\u679c\u4ece 1921 \u5e74\u5230\u73b0\u5728\uff0c\u4e70\u5165\u5e76\u6301\u6709\u9053\u743c\u65af\u6307\u6570\uff0c\u603b\u56de\u62a5\u5c06\u662f 500,000%\uff085,000 \u500d\uff09\uff01\u6839\u636e\u57c3\u514b\u68ee\u7f8e\u5b5a\u7684\u524d\u8eab\u65b0\u6cfd\u897f\u6807\u51c6\u77f3\u6cb9\u516c\u53f8\uff08\u62c6\u5206\u8c03\u6574\u540e\u7684 0.04 \u7f8e\u5143\uff09\uff0c\u8d2d\u4e70\u548c\u6301\u6709 100 \u5e74\u5c06\u76f8\u5f53\u4e8e 800,000% \u7684\u56de\u62a5\uff088,000 \u500d\uff09\uff01\u81f4\u6211\u4eec\u7684\u8bfb\u8005\uff1a\u5982\u679c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u90a3\u4e48\u5728\u5f53\u65f6\u6295\u8d44\u4e8e\u5927\u76d8\u7684 100 \u7f8e\u5143\u4eca\u5929\u5c06\u4ef7\u503c 500,000 \u7f8e\u5143\uff01\u5728\u4eca\u5929\u7684\u6a21\u56e0\u80a1\u7968\u4e16\u754c\u4e2d\uff0c\u8fd9\u5982\u4f55\u6210\u4e3a\u5934\u6761\u65b0\u95fb\uff1f\n\u9605\u8bfb\u672c\u65f6\u4e8b\u901a\u8baf\u662f\u514d\u8d39\u7684\u3002\u5982\u679c\u60a8\u559c\u6b22\u5b83\uff0c\u8bf7\u5206\u4eab\u7ed9\u670b\u53cb\u6216\u901a\u8fc7 PayPal \u6350\u8d60\uff08\u4e0b\u9762\u7684\u6309\u94ae\uff09\u3002", "note_en": "Dog days of summer have arrived, bringing little to no movements in markets this week (equity, debt, commodity markets)\n  Writers at the FT ponder how to spend their day while equity and commodity markets vacillate listlessly. Random ideas captures the very moment of boredom. Even the Financial Times has temporarily shrunk: 6 pages per day this week down from the classic 12 pages. Summer has arrived.\n Wrangling over German reparations continues. Over the past year, it has become clear to Britain and France that Germany cannot pay in full. Instead of default, talks open on August 10, 1921 regarding three core issues: German payments to British and French soldiers currently occupying German regions, in kind (steel, coal, timber) transfers in lieu of German gold marks, and assumption of war debt of smaller European countries.\n Historical Fact: Germany operates two parallel currencies after WWI: the gold mark and paper mark. The Treaty of Versailles stipulates payment in gold marks, which is causing severe fiscal strain. The Germany of the 1920s is, of course, known as the Weimar Republic and will begin experiencing severe inflation in September that drags on for two years until financial implosion.\n Traders in New York wonder what might turn the market. The editors of the WSJ surmise that high taxation and public spending are harming public perception of owning equities.\n  Every now and then, someone brave enough offers their opinion on unpopular common stocks. Standard Oil was split into nearly three dozen companies in 1911, and this article lists the prices of all former constituents. Despite having a rough past year, 1921 has shown signs of an oil bottom. The writer recommends astute investors purchase shares in all of them. Every single company trades below book value! PE ratios range from 3 to 5. As a reminder, risk free bonds are yielding 5%, and retail investors are being actively encouraged not to own equities.\n  Historical Fact: The apathy in the papers regarding common stocks would make the modern day investor salivate. If one bought and held the Dow from 1921 to present, the total return would be 500,000% (5,000x)! Based on ExxonMobil\u2019s predecessor company Standard Oil of New Jersey ($0.04 split adjusted), buying and holding for 100 years would equate to an 800,000% return (8,000x)! To our readers: $100 invested in the broad market back then would be worth $500,000 today by doing  absolutely nothing! How\u2019s that for a headline in today\u2019s meme stock world?\n  Reading this newsletter is free. If you enjoy it, then please share to a friend or donate via PayPal (button below).", "posttime": "2021-08-09 00:53:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u534e\u5c14\u8857,\u91d1\u878d\u65f6\u62a5,ft,\u5fb7\u56fd", "title": "\u6211\u6bcf\u5468\u9605\u8bfb 100 \u5e74\u524d\u5230 1929 \u5e74\u7684\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u548c\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b", "title_en": "I'm reading the FT and WSJ from 100 years ago each week leading to 1929", "transed": 1, "url": "https://roaring20s.substack.com/p/august-8-1921", "via": "", "real_tags": ["\u534e\u5c14\u8857", "\u91d1\u878d\u65f6\u62a5", "ft", "\u5fb7\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "aea55b8bf17634e5a4a71fe2bfd67220.png", "infoid": 1072137, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u65e0\u8bba\u8c01\u91c7\u53d6\u8fd9\u79cd\u9884\u9632\u63aa\u65bd\uff0c\u90fd\u4f1a\u4f53\u9a8c\u5230\u4e50\u8da3\uff0c\u800c\u4e0d\u662f\u65f6\u4e0d\u65f6\u5730\u5931\u53bb\u4e09\u5206\u4e4b\u4e00\u6216\u56db\u540d\u4ea7\u8925\u70ed\u60a3\u8005\uff0c\u4f46\u53ef\u80fd\u53ea\u6709\u56db\u767e\u5206\u4e4b\u4e00\u201d\u6211\u7684\u670b\u53cb Doug McKenty\uff0c\u4ed6\u7684 Shift \u64ad\u5ba2\u521a\u521a\u88ab Mailchimp \u6682\u505c.\u4ed6\u5bf9\u4ed6\u6240\u8c13\u7684\u533b\u7597\u4fdd\u5065\u81ea\u7531\uff08\u9605\u8bfb\uff1a\u75ab\u82d7\u62a4\u7167\uff09\u7684\u58f0\u97f3\u8d8a\u6765\u8d8a\u76f4\u8a00\u4e0d\u8bb3\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5173\u4e8e\u754c\u9650\u4e4b\u5916\u7684\u4e1c\u897f\u3002 Mailchimp \u662f\u4e00\u4e2a\u7535\u5b50\u90ae\u4ef6\u5217\u8868\u63d0\u4f9b\u5546\uff0c\u4ee5\u8fd9\u6837\u505a\u800c\u95fb\u540d\u3002\u60a8\u6709\u6548\u5730\u5411 Mailchimp \u4ed8\u8d39\uff0c\u4ee5\u7ba1\u7406\u60a8\u53ef\u4ee5\u6216\u4e0d\u80fd\u5bf9\u81ea\u5df1\u7684\u7535\u5b50\u90ae\u4ef6\u8ba2\u9605\u8005\u8bf4\u7684\u8bdd\u3002\u60a8\u6b63\u5728\u4f7f\u7528\u4ed6\u4eec\u7684\u90ae\u4ef6\u670d\u52a1\u5668\uff0c\u5728\u4ed6\u4eec\u770b\u6765\uff0c\u8fd9\u5c31\u662f\u8d4b\u4e88\u4ed6\u4eec\u6743\u5229\u548c\u9053\u5fb7\u6743\u5a01\u6765\u76d1\u63a7\u60a8\u4e0e\u60a8\u81ea\u5df1\u7684\u53d7\u4f17\u7684\u901a\u4fe1\u5185\u5bb9\u7684\u539f\u56e0\u3002\u5728\u6211\u7684\u4e66\u300a\u65e0\u61c8\u53ef\u51fb\uff1a\u4fdd\u62a4\u81ea\u5df1\u514d\u53d7\u5e73\u53f0\u653b\u51fb\u3001\u53d6\u6d88\u6587\u5316\u548c\u5176\u4ed6\u5728\u7ebf\u707e\u96be\u300b\uff08\u7535\u5b50\u4e66\u7248\u672c\u73b0\u5df2\u514d\u8d39\u63d0\u4f9b\u4e00\u6bb5\u65f6\u95f4\uff09\u4e2d\uff0c\u6211\u7528\u4e86\u4e00\u6574\u7ae0\u6765\u8bb2\u8ff0\u5927\u578b\u79d1\u6280\u516c\u53f8\u7684\u9634\u8c0b\u8be1\u8ba1\u4ee5\u53ca\u4ed6\u4eec\u5982\u4f55\u8d85\u8d8a\u5728\u51b3\u5b9a\u4ec0\u4e48\u5728\u4ed6\u4eec\u7684\u8303\u56f4\u5185\uff0c\u4ec0\u4e48\u4e0d\u5728\u6216\u4e0d\u5e94\u8be5\u5728\u4ed6\u4eec\u7684\u8303\u56f4\u5185\u65f6\uff0c\u7406\u6027\u7684\u754c\u9650\u3002\u4efb\u4f55\u79d1\u6280\u516c\u53f8\u90fd\u4e0d\u5e94\u8be5\u6839\u636e\u4ed6\u4eec\u8ba4\u4e3a\u7528\u6237\u5728\u4ed6\u4eec\u81ea\u5df1\u7684\u5e73\u53f0\u4e0a\u505a\u4e86\u6216\u53ef\u80fd\u505a\u7684\u4e8b\u60c5\u6765\u6267\u884c\u4ed6\u4eec\u7684\u670d\u52a1\u6761\u6b3e\u3002\u7136\u800c Twitter\u3001Facebook\u3001Patreon \u4ee5\u53ca\u8c01\u77e5\u9053\u8fd8\u6709\u8c01\u8fd9\u6837\u505a\u4e86\u3002\u50cf Mailchimp \u8fd9\u6837\u7684\u90ae\u4ef6\u516c\u53f8\u8fde\u89e3\u6790\u4ed6\u4eec\u4ed8\u8d39\u5ba2\u6237\u7684\u5185\u5bb9\u90fd\u6ca1\u6709\u4e1a\u52a1\uff0c\u66f4\u4e0d\u7528\u8bf4\u7c97\u7565\u5730\u5224\u65ad\u5b83\u662f\u5426\u662f\u9519\u8bef\u4fe1\u606f\u3002\u90ae\u4ef6\u63d0\u4f9b\u5546\u5e94\u8be5\u53ea\u5173\u5fc3\u4e24\u4ef6\u4e8b\u548c\u4e24\u4ef6\u4e8b\uff1a\u5c31\u662f\u8fd9\u6837\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u771f\u7684\u4e0d\u662f\u4ed6\u4eec\u7684\u4e8b\uff0c\u8ba4\u4e3a\u5b83\u662f\u81ea\u5927\u548c\u50b2\u6162\u7684\u9ad8\u5ea6\u3002\nPatreon \u7684\u9996\u5e2d\u6267\u884c\u5b98 Jack Conte \u63cf\u8ff0\u4e86\u4ed6\u4eec\u7684\u4fe1\u4efb\u548c\u5b89\u5168\u56e2\u961f\u5982\u4f55\u901a\u8fc7\u57fa\u4e8e\u201c\u660e\u663e\u7684\u53ef\u89c2\u5bdf\u884c\u4e3a\u201d\u5bf9\u5176\u8fdb\u884c\u8bc4\u4f30\u6765\u6d88\u9664\u5c06\u67d0\u4eba\u7684\u5185\u5bb9\u8d27\u5e01\u5316\u7684\u51b3\u5b9a\u4e2d\u7684\u6240\u6709\u4e3b\u89c2\u56e0\u7d20\uff1a\u201c\u660e\u663e\u7684\u53ef\u89c2\u5bdf\u884c\u4e3a\u662f\u5728\u56e2\u961f\u5ba1\u67e5\u5185\u5bb9\u65f6\u6d88\u9664\u4e2a\u4eba\u4ef7\u503c\u89c2\u548c\u4fe1\u5ff5.\u8fd9\u662f\u4e00\u79cd\u5b8c\u5168\u57fa\u4e8e\u53ef\u89c2\u5bdf\u4e8b\u5b9e\u7684\u5ba1\u67e5\u65b9\u6cd5\uff1a\u76f8\u673a\u770b\u5230\u4e86\u4ec0\u4e48\uff0c\u97f3\u9891\u8bbe\u5907\u8bb0\u5f55\u4e86\u4ec0\u4e48\u3002\u4e0d\u7ba1\u4f60\u7684\u610f\u56fe\u662f\u4ec0\u4e48\uff0c\u4f60\u7684\u52a8\u673a\uff0c\u4f60\u662f\u8c01\uff0c\u4f60\u7684\u8eab\u4efd\uff0c\u4f60\u7684\u610f\u8bc6\u5f62\u6001\u3002\u4fe1\u4efb\u548c\u5b89\u5168\u56e2\u961f\u53ea\u5173\u6ce8 Manifest Observable Behaviour\u3002\u6211\u4eec\u53d8\u5f97\u4e25\u8c28\u548c\u5177\u4f53\uff0c\u56e0\u4e3a\u6211\u4eec\u8c08\u8bba\u7684\u662f\u53d6\u6d88\u4e00\u4e2a\u4eba\u7684\u6536\u5165\u3002\u5265\u593a\u4e00\u4e2a\u4eba\u7684\u6536\u5165\u7684\u6743\u529b\u662f\u4e00\u9879\u53d1\u4eba\u6df1\u7701\u7684\u8d23\u4efb\u3002\u8fd9\u4e0d\u662f\u4e00\u65f6\u5174\u8d77\u7684\u4e8b\u60c5\u3002\u201d\u8fd9\u4e2a\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u4ec0\u4e48\uff1f\u8fd9\u5b9e\u9645\u4e0a\u542c\u8d77\u6765\u5f88\u50cf\u4e00\u9879\u6cd5\u5f8b\u7a0b\u5e8f\uff0c\u5c3d\u7ba1\u5b83\u5b8c\u5168\u662f\u7247\u9762\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u6b63\u5f53\u7a0b\u5e8f\u6216\u6cd5\u5f8b\u4fdd\u62a4\u7684\u8868\u8c61\uff0c\u5e76\u4e14\u53ef\u80fd\u662f\u7531\u4e00\u7fa4\u5e26\u7740\u9f3b\u73af\u548c\u4eba\u79f0\u4ee3\u8bcd\u60c5\u7eea\u7684\u7d2b\u53d1\u5343\u79a7\u4e00\u4ee3\u6267\u884c\u7684-\u6212\u6307\u3002\u5f53\u79d1\u6280\u516c\u53f8\u81ea\u884c\u4ef2\u88c1\u4ec0\u4e48\u662f\u9519\u8bef\u4fe1\u606f\u6216\u4e0d\u662f\u9519\u8bef\u4fe1\u606f\u65f6\uff0c\u6216\u8005\u6839\u636e\u53d1\u751f\u5728\u4ed6\u4eec\u81ea\u5df1\u5e73\u53f0\u4e4b\u5916\u7684\u4e8b\u4ef6\u91c7\u53d6\u884c\u52a8\u65f6\uff0c\u4ed6\u4eec\u6240\u505a\u7684\u6838\u5fc3\u662f\u5bf9\u56fd\u9645\u6cd5\u8fdb\u884c\u88c1\u51b3\u3002\u60a8\u771f\u7684\u5e0c\u671b\u60a8\u7684\u57df\u540d\u6ce8\u518c\u5546\u6216\u7f51\u7edc\u4e3b\u673a\u8fd9\u6837\u505a\u5417\uff1f\u8fd9\u4e9b\u516c\u53f8\u8ba4\u4e3a\u4ed6\u4eec\u662f\u4e92\u8054\u7f51\u8bdd\u8bed\u7684\u8d35\u65cf\u3002\u73b0\u5b9e\u662f\u5b83\u4eec\u662f\u7ba1\u9053\u3002 \u201c\u4e8b\u5b9e\u6838\u67e5\u201d\u662f\u53e6\u4e00\u4e2a\u5b8c\u5168\u4e3b\u89c2\u7684\u6807\u8bed\uff0c\u88ab\u4f2a\u88c5\u6210\u5ba2\u89c2\u4e8b\u5b9e\u3002\u5982\u4eca\uff0c\u4e8b\u5b9e\u6838\u67e5\u66f4\u53ef\u80fd\u662f\u903b\u8f91\u8c2c\u8bef\uff0c\u800c\u73b0\u5b9e\u662f\uff0c\u5927\u591a\u6570\u4eba\u751a\u81f3\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u903b\u8f91\u8c2c\u8bef\u3002\u5f53\u7f8e\u8054\u793e\u201c\u4e8b\u5b9e\u6838\u67e5\u201d\u7f8e\u56fd\u53c2\u8bae\u9662\u5173\u4e8e\u4f0a\u7ef4\u83cc\u7d20\u529f\u6548\u7684\u8bc1\u8bcd\u65f6\u58f0\u79f0\u201c\u6ca1\u6709\u8bc1\u636e\u8868\u660e\u4f0a\u7ef4\u83cc\u7d20\u662f\u5bf9\u6297 COVID \u7684\u2018\u795e\u836f\u2019\u201d\u5e76\u4e14\u4ed6\u4eec\u5c06\u5176\u6807\u8bb0\u4e3a\u865a\u5047\uff0c\u4ed6\u4eec\u72af\u4e0b\u4e86\u4e00\u4e2a\u903b\u8f91\u8c2c\u8bef\uff0c\u79f0\u4e3a\u201c\u8bc9\u8bf8\u65e0\u77e5\u201d \uff08\u6ca1\u6709\u8bc1\u636e\u4e0d\u662f\u7f3a\u5e2d\u7684\u8bc1\u636e\uff09\u3002\n\u7edd\u5927\u591a\u6570\u5173\u4e8e COVID-19 \u7684\u5a92\u4f53\u53d9\u8ff0\uff0c\u5173\u4e8e\u53e3\u7f69\u3001\u5c01\u9501\u3001\u4f0a\u7ef4\u83cc\u7d20\u3001HCQ \u4ee5\u53ca\u662f\u7684\u75ab\u82d7\uff0c\u90fd\u53ef\u4ee5\u5f52\u7c7b\u4e3a\u4e94\u4e2a\u903b\u8f91\u8c2c\u8bef\uff1a \u8bc9\u8bf8\u6743\u5a01\uff1a\u4e13\u5bb6\u548c\u4e0d\u8d1f\u8d23\u4efb\u7684\u6280\u672f\u5b98\u50da\u6240\u8bf4\u7684\u5ba2\u89c2\u771f\u5b9e\u3002\u5982\u679c\u60a8\u4e0d\u540c\u610f\u4e13\u5bb6\u7684\u89c2\u70b9\uff0c\u90a3\u4e48\u60a8\u5c31\u662f\u5728\u8d28\u7591\u79d1\u5b66\u672c\u8eab\uff08\u5373\u4f7f\u662f\u90a3\u4e9b\u5728\u8d44\u52a9\u529f\u80fd\u83b7\u5f97\u6027\u7814\u7a76\u65b9\u9762\u975e\u5e38\u6295\u5165\u7684\u4eba\uff0c\u8fd9\u4e9b\u7814\u7a76\u5f88\u53ef\u80fd\u5bfc\u81f4\u5b9e\u9a8c\u5ba4\u53d1\u5e03\u5bfc\u81f4\u5927\u6d41\u884c\uff09\u3002 Bandwagon\uff1a\u56e0\u4e3a\u5176\u4ed6\u4eba\u90fd\u76f8\u4fe1\u67d0\u4e8b\uff0c\u6240\u4ee5\u4f60\u4e5f\u6709\u9053\u5fb7\u4e49\u52a1\u53bb\u76f8\u4fe1\u5b83\u3002\u60a8\u9047\u5230\u6216\u8bfb\u5230\u7684\u4efb\u4f55\u4e0e\u5176\u4ed6\u4eba\u8ba4\u4e3a\u771f\u5b9e\u7684\u5185\u5bb9\u76f8\u77db\u76fe\u7684\u5185\u5bb9\u90fd\u662f\u201c\u9519\u8bef\u4fe1\u606f\u201d\u3002 Ad Hominem\uff1a\u6839\u672c\u4e0d\u662f\u4e89\u8bba\uff0c\u800c\u662f\u653b\u51fb\u3002 \u201cCovidiots\u201d\u3001\u201cDeniers\u201d\u8fd9\u4e9b\u4e0d\u662f\u7406\u6027\u7684\u53cd\u9a73\uff0c\u800c\u662f\u8bfd\u8c24\u3002\u4efb\u4f55\u4f7f\u7528\u5b83\u4eec\u7684\u4eba\u90fd\u4e0d\u662f\u5728\u8c08\u8bba\u8bdd\u8bed\uff0c\u800c\u662f\u5728\u504f\u6267\u548c\u504f\u89c1\u3002\u8fd9\u548c\u79cd\u65cf\u4e3b\u4e49\u4e00\u6837\u4e0d\u53ef\u539f\u8c05\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u8bb8\u591a\u4eba\u9762\u4e34\u7740\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u51fa\u4e8e\u5b8c\u5168\u6b63\u5f53\u7684\u7406\u7531\u6765\u5ba1\u89c6\u81ea\u5df1\u7684\u504f\u89c1\u548c\u7279\u6743\u7684\u6311\u6218\u3002\u4efb\u4f55\u5bf9\u6000\u7591\u8bba\u8005\u548c\u9006\u5411\u8005\u91c7\u53d6\u8fd9\u79cd\u5176\u4ed6\u65b9\u5f0f\u7684\u4eba\u90fd\u7f3a\u4e4f\u4e0e\u79cd\u65cf\u4e3b\u4e49\u8005\u540c\u7b49\u7a0b\u5ea6\u7684\u81ea\u6211\u610f\u8bc6\u548c\u540c\u7406\u5fc3\u3002\u8bc9\u8bf8\u60c5\u611f\uff1a\u4f01\u4e1a\u5a92\u4f53\u56e0\u6050\u60e7\u800c\u84ec\u52c3\u53d1\u5c55\u3002\u5173\u4e8e\u6124\u6012\u7684\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6bcf\u6b21 CNN \u8bf4\u201cDelta \u53d8\u4f53\u201d\u65f6\uff0c\u5b83\u90fd\u662f\u201c\u9ad8\u5ea6\u4f20\u67d3\u6027\u7684\u201d\u800c\u4e0d\u662f\u201c\u4e0d\u90a3\u4e48\u81f4\u547d\u201d\u3002\u5982\u679c\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u82f1\u56fd\uff08\u4ee5\u53ca\u5176\u4ed6\uff09\u6700\u8fd1\u7684\u6570\u636e\u8868\u660e Delta \u53d8\u4f53\u7684\u6b7b\u4ea1\u7387\u751a\u81f3\u4f4e\u4e8e\u5df2\u7ecf\u5f88\u4f4e\u7684 Alpha \u53d8\u4f53\uff0c\u4e0e\u5b63\u8282\u6027\u6d41\u611f\u57fa\u672c\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u53ef\u80fd\u4f1a\u51b7\u9759\u4e0b\u6765\u3002\u6211\u4eec\u4e0d\u80fd\u6709\u90a3\u4e2a\u3002\u79fb\u52a8\u76ee\u6807\uff1a\u5728\u5927\u7ea6 18 \u4e2a\u6708\u5185\u4f7f\u66f2\u7ebf\u53d8\u5e73\u7684 15 \u5929\u53d8\u6210\u4e86#NoJabNoJob\u3002\u5982\u679c\u60a8\u5b8c\u5168\u63a5\u79cd\u4e86\u75ab\u82d7\uff0c\u60a8\u4ecd\u7136\u5e94\u8be5\u6234\u4e0a\u53e3\u7f69\uff0c\u5a92\u4f53\u5df2\u7ecf\u51b3\u5b9a\u79cb\u5b63\u5c06\u53d1\u751f\u7b2c\u56db\u6ce2\u75ab\u60c5\uff0c\u771f\u6b63\u5177\u6709\u524d\u77bb\u6027\u7684\u601d\u60f3\u5bb6\u6b63\u5728\u4e3a\u6211\u4eec\u51c6\u5907\u597d\u5e94\u5bf9\u6c14\u5019\u5c01\u9501\u3002 \u201c\u6211\u4eec\u90fd\u5728\u4e00\u8d77\u201d\u53d8\u6210\u4e86\u82cf\u65af\u535a\u58eb\u5173\u4e8e\u65af\u5185\u5947\u7684\u6545\u4e8b\u3002\u6b64\u5916\uff0c\u82cf\u65af\u535a\u58eb\u88ab\u53d6\u6d88\u4e86\u3002\u6709\u4e9b\u4eba\u8ba4\u4e3a\u8fd9\u4e00\u5207\u90fd\u6ca1\u6709\u4e3b\u89c2\u6027\u3002\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u6b63\u5982 Jack Conte \u6240\u505a\u7684\u90a3\u6837\uff0c\u5b58\u5728\u72ec\u7acb\u7684\u5ba2\u89c2\u771f\u7406\uff0c\u4f8b\u5982 Manifest Observable Behaviour\u3002\u6d88\u9664\u7ec6\u5fae\u5dee\u522b\u3001\u4e0d\u786e\u5b9a\u6027\u548c\u76f8\u4e92\u77db\u76fe\u7684\u6570\u636e\u7684\u9886\u57df\u3002\u601d\u60f3\u6b63\u786e\u7684\u4eba\u90fd\u7406\u89e3\u771f\u7406\uff0c\u53ea\u6709\u601d\u60f3\u9519\u8bef\u7684\u4eba\u624d\u4f1a\u8d28\u7591\u5b83\u3002\n\u60a8\u6b63\u5728\u52aa\u529b\u7406\u89e3\u4e3a\u4ec0\u4e48\u6709\u4e9b\u4eba\u5bf9\u75ab\u82d7\u72b9\u8c6b\u4e0d\u51b3\u3002 \u201c\u8ba9\u6211\u5e2e\u52a9\u4f60\u201d\u5927\u7ebf\u7a0b\uff1a\u60f3\u8c61\u4f60\u662f\u4e00\u4e2a\u6b63\u5e38\u4eba\u3002\u8fd9\u4e00\u5e74\u662f 2016 \u5e74\u3002\u65e0\u8bba\u5bf9\u9519\uff0c\u4f60\u76f8\u4fe1\u4f60\u5728\u5a92\u4f53\u4e0a\u770b\u5230\u7684\u5927\u90e8\u5206\u5185\u5bb9\u3002\u5b83\u76f8\u5f53\u6709\u8bf4\u670d\u529b\u5730\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u666e\u901a\u516c\u4f17\u53ef\u80fd\u53ea\u662f\u611f\u5230\u56f0\u60d1\u3001\u4e0d\u4fe1\u4efb\u548c\u72b9\u8c6b\uff0c\u800c\u4e0d\u662f\u6210\u4e3a\u9053\u5fb7\u4e0a\u5815\u843d\u7684\u602a\u7269\u3002\u6b64\u5916\uff0c\u5b83\u7ec6\u81f4\u5730\u5217\u4e3e\u4e86\u5b98\u65b9\u7ecf\u5178\u7684\u591a\u4e2a\u652f\u67f1\uff0c\u7ed3\u679c\u8bc1\u660e\u662f\u9519\u8bef\u4fe1\u606f\uff0c\u56e0\u4e3a\u7f3a\u5c11\u66f4\u597d\u7684\u8bcd\uff08\u9664\u975e\u8be5\u8bcd\u662f\u201c\u8c0e\u8a00\u201d\uff09\u3002\u6211\u4eec\u770b\u5230\u798f\u5947\u5728\u6444\u50cf\u673a\u505c\u6b62\u8f6c\u52a8\u7684\u90a3\u4e00\u523b\u6458\u4e0b\u4e86\u4ed6\u7684\u9762\u5177\u3002\u6211\u4eec\u770b\u5230 AOC \u5750\u5728\u4e00\u7fa4\u76f8\u5f53\u4eb2\u5bc6\u7684\u4eba\u7fa4\u4e2d\uff0c\u4e3a\u4e86\u62cd\u7167\u7684\u660e\u786e\u76ee\u7684\u800c\u6234\u4e0a\uff0c\u7136\u540e\u53c8\u8131\u4e0b\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u901a\u8fc7 Mailchimp \u5411\u81ea\u5df1\u7684\u8ba2\u9605\u8005\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u5927\u58f0\u60f3\u77e5\u9053\u9762\u5177\u662f\u5426\u53ea\u4e0d\u8fc7\u662f\u8868\u6f14\u5267\u9662\uff0c\u90a3\u4e48\u60a8\u5c06\u88ab\u5173\u95ed\u3002\u8fd9\u5176\u4e2d\u7684\u4efb\u4f55\u4e00\u9879\u5982\u4f55\u5efa\u7acb\u52a8\u5458\uff08\u636e\u79f0\uff09\u5b9e\u73b0\u7fa4\u4f53\u514d\u75ab\u6240\u9700\u7684\u6700\u540e 20% \u5230 30% \u6240\u9700\u7684\u53ef\u4fe1\u5ea6\u548c\u516c\u4f17\u4fe1\u4efb\uff1f\u5b83\u6ca1\u6709\u3002\u4ece\u4f0a\u62c9\u514b\u7684\u5927\u89c4\u6a21\u6740\u4f24\u6027\u6b66\u5668\u6210\u4e3a\u201c\u8d2b\u6c11\u7a9f\u201d\u5230\u201c\u6b21\u8d37\u88ab\u904f\u5236\u201d\u5230\u201c\u51cf\u4ea7\u5c31\u50cf\u770b\u7740\u6cb9\u6f06\u53d8\u5e72\u201d\uff0c\u4efb\u4f55\u5728\u8fc7\u53bb 20 \u5e74\u91cc\u4e00\u76f4\u8ddf\u8e2a\u4e13\u5bb6\u5f53\u5c40\u8bb0\u5f55\u7684\u4eba\u90fd\u6709\u5408\u7406\u7684\u7406\u7531\u76f8\u4fe1\u4e13\u5bb6\u4eec\u4ec0\u4e48\u90fd\u4e0d\u77e5\u9053\u3002\u81f3\u5c11\u6ca1\u6709\u4efb\u4f55\u9884\u6d4b\u4ef7\u503c\u3002\u6211\u4e66\u4e2d\u7684\u53e6\u4e00\u7ae0\u63d0\u51fa\u4e86\u201c\u53bb\u5e73\u53f0\u5316\u662f\u5426\u6709\u6548\uff1f\u201d\u8fd9\u4e2a\u95ee\u9898\u3002\u7b80\u77ed\u7684\u56de\u7b54\u662f\uff1a\u6ca1\u6709\u3002\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u6750\u6599\u7684\u6291\u5236\u4f1a\u653e\u5927\u5b83\u3002\u5982\u679c\u4f60\u60f3\u51cf\u5c11\u5173\u4e8e COVID \u7684\u4e0d\u5408\u903b\u8f91\u7684\u9634\u8c0b\u8bba\uff0c\u8bf7\u505c\u6b62\u5bf9\u4efb\u4f55\u4e0d\u662f\u76f2\u76ee\u6a21\u4eff\u798f\u5947\u7684\u4eba\u8fdb\u884c\u53bb\u5e73\u53f0\u5316\u3002\n\u771f\u6b63\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5168\u793e\u4f1a\u7684\u6279\u5224\u6027\u601d\u7ef4\u901f\u6210\u8bfe\u7a0b\uff0c\u800c\u4e0d\u662f\u4e0d\u65ad\u5730\u88ab\u529d\u963b\u548c\u544a\u8bc9\u4e0d\u8981\u601d\u8003\u4ec0\u4e48\u3002\u8fbe\u6c83\u65af\u56e2\u961f\uff0c\u540e\u671f\u5168\u7403\u5316\u7684\u6839\u6df1\u8482\u56fa\u7684\u7cbe\u82f1\u4eec\u8ba4\u4e3a\u6211\u4eec\u6b63\u5728\u8d70\u5411\u4e00\u4e2a\u7531\u4e13\u5bb6\u6280\u672f\u5b98\u50da\u7ba1\u7406\u7684\u4e16\u754c\u3002\u4f46\u4ed6\u4eec\u5e76\u6ca1\u6709\u53d6\u5f97\u4e00\u7cfb\u5217\u6210\u529f\uff0c\u800c\u4e14\u8fd9\u79cd\u516c\u5171\u653f\u7b56\u65b9\u6cd5\u53ef\u4ee5\u8bf4\u6ca1\u6709\u901a\u8fc7\u6700\u91cd\u8981\u7684\u8003\u9a8c\u3002\u6211\u4eec\u6b63\u671d\u7740\u4e00\u4e2a\u7531\u5f00\u6e90\u534f\u8bae\u548c\u667a\u80fd\u5408\u7ea6\u6240\u8868\u8fbe\u7684\u5171\u8bc6\u6cbb\u7406\u7684\u53bb\u4e2d\u5fc3\u5316\u4e16\u754c\u8fc8\u8fdb\u3002\u8fd9\u573a\u6218\u6597\u4e0d\u662f\u5173\u4e8e\u5de6\u6d3e\u4e0e\u53f3\u6d3e\u3001\u4fdd\u5b88\u6d3e\u4e0e\u81ea\u7531\u6d3e\u7684\u6597\u4e89\uff0c\u5176\u4e2d\u4efb\u4f55\u4e00\u65b9\u90fd\u4f1a\u8ba9\u4f60\u76f8\u4fe1\u5185\u5bb9\u5b8c\u5168\u5206\u4e3a\u771f\u76f8\u548c\u9519\u8bef\u4fe1\u606f\u3002\u672a\u6765 20 \u5e74\u7684\u51b3\u5b9a\u6027\u5f20\u529b\u5c06\u5728\u6743\u529b\u4e0b\u653e\u4e0e\u5b98\u50da\u4e3b\u4e49\u3001\u5e73\u53f0\u4e0e\u534f\u8bae\u4ee5\u53ca\u6c11\u65cf\u56fd\u5bb6\u4e0e\u7f51\u7edc\u4e4b\u95f4\u3002\u81f3\u4e8e\u4eca\u5929\u8fd9\u7bc7\u6587\u7ae0\u7684\u5f00\u573a\u767d\uff1f\u585e\u9ea6\u5c14\u7ef4\u65af\u8fc7\u7740\u60b2\u60e8\u7684\u751f\u6d3b\u3002\u8bf4\u670d\u5f53\u65f6\u7684\u533b\u7597\u673a\u6784\u5728\u8fdb\u884c\u5c38\u68c0\u540e\u548c\u5206\u5a29\u524d\u6d17\u624b\u53ef\u4ee5\u9632\u6b62\u201c\u5c38\u4f53\u9897\u7c92\u201d\u4ece\u5c38\u4f53\u4f20\u64ad\u5230\u6bcd\u4eb2\u548c\u65b0\u751f\u513f\u7684\u6597\u4e89\u88ab\u89c6\u4e3a\u5984\u60f3\u3002\u5f53\u7136\uff0c\u7f8e\u8054\u793e\u4f1a\u5c06\u5176\u201c\u4e8b\u5b9e\u68c0\u67e5\u201d\u4e3a\u5047\u3002 Politifact \u4f1a\u8bc4\u4ef7\u5b83\u201c\u7740\u706b\u7684\u88e4\u5b50\u201d\u3002\u6bd5\u7adf\uff0c\u6ca1\u6709\u7ec6\u83cc\u8fd9\u6837\u7684\u4e1c\u897f\u662f\u786e\u5b9a\u7684\u79d1\u5b66\u3002\u8511\u89c6\u548c\u5996\u9b54\u5316\u7684\u538b\u529b\u8ba9\u585e\u6885\u5c14\u7ef4\u65af\u5931\u53bb\u4e86\u5f88\u591a\u3002\u81ea 1857 \u5e74\u5f00\u59cb\u4ed6\u7684\u5199\u4f5c\u6d3b\u52a8\u4ee5\u5ba3\u4f20\u4ed6\u7684\u7406\u8bba\u76f4\u5230 1860 \u5e74\u4ed6\u7684\u300a\u75c5\u56e0\u5b66\u300b\u51fa\u7248\u4ee5\u6765\uff0c\u4ed6\u663e\u7136\u5728\u77ed\u77ed\u4e09\u5e74\u5185\u5c31\u8001\u4e86\u51e0\u5341\u5c81\u3002\u4ed6\u5b64\u72ec\u5730\u6b7b\u53bb\uff0c\u803b\u8fb1\u5730\u6b7b\u53bb\uff0c\u88ab\u4ed6\u7684\u533b\u5b66\u540c\u884c\u9001\u8fdb\u4e86\u7cbe\u795e\u75c5\u9662\u3002 Mark E. Jeftovic \u662f\u591a\u4f26\u591a\u7f51\u7edc\u670d\u52a1\u516c\u53f8easyDNS \u7684\u9996\u5e2d\u6267\u884c\u5b98\u3002\u8981\u5728\u60a8\u7684\u90ae\u7bb1\u4e2d\u63a5\u6536\u672a\u6765\u7684\u5e16\u5b50\uff0c\u8bf7\u52a0\u5165\u514d\u8d39\u7684 Bombthrower \u90ae\u4ef6\u5217\u8868\u3002\u8981\u5bf9\u51c6\u5907\u968f\u7740\u52a0\u5bc6\u6280\u672f\u7ee7\u7eed\u4e0a\u6da8\u800c\u5927\u83b7\u5168\u80dc\u7684\u516c\u53f8\u548c\u80a1\u7968\u8fdb\u884c\u4f18\u8d28\u7814\u7a76\uff0c\u8bf7\u5c1d\u8bd5\u6211\u4eec\u7684\u52a0\u5bc6\u8d27\u5e01\u8d44\u672c\u5bb6\u6295\u8d44\u7ec4\u5408\u8bd5\u7528\u4f18\u60e0\u3002", "note_en": "\u201cWhoever practices this prophylaxis will experience the pleasure, not from time to time to lose every third or fourth patient from puerperal fever, but perhaps lose only one in four hundred\u201d\n My friend  Doug McKenty, who does  The Shift podcast was just suspended by Mailchimp. He\u2019s been getting more vocal about what he calls healthcare freedom (read: vaccine passports), and something about that coloured outside the lines.\n Mailchimp, an email list provider, is known for doing this. You effectively pay Mailchimp to curate what you can or cannot say to your own email subscribers.\u00a0 You\u2019re using their mailservers, and in their mind that\u2019s what gives them the right and the moral authority to monitor  the content of your communications to your own audience.\n In my book  Unassailable: Protect Yourself From Deplatform Attacks, Cancel Culture and other Online Disasters (the e-book version has been  available for free for some time now) I devote an entire chapter to the machinations of the Big Tech and how they overstep the bounds of rationality when it comes to deciding what is within their purview and what isn\u2019t, or shouldn\u2019t be.\n No tech company should be enforcing their Terms of Service based on what they\u00a0 think their users have done or  might do off of their own platforms. Yet Twitter, Facebook, Patreon and who knows who else do that.\n A mailer company like Mailchimp has no business even parsing the content of their paying clients, let alone summarily judging whether it is misinformation or not. Mail providers should care about two things and two things only:\n  That\u2019s it. Beyond that it really isn\u2019t their business and it\u2019s the height of grandiosity and hubris to think that it is.\n Patreon\u2019s CEO Jack Conte  describes how their Trust and Safety Team remove all subjective elements from the decision to demonetize somebody\u2019s content by evaluating them based on \u201cManifest Observable Behaviour\u201d:\n \u201cManifest observable behavior is to remove personal values and beliefs when the team is reviewing content. It\u2019s a review method that\u2019s  entirely based on observable facts:  what has a camera seen,  what has an audio device recorded. It doesn\u2019t matter what your intentions are, your motivations, who you are, your identity, your ideology. The trust and safety team only looks at Manifest Observable Behaviour. We get rigorous and specific because we\u2019re talking about removing a person\u2019s income. The authority to take away a human being\u2019s income is a sobering responsibility. It is not something to be done on a whim.\u201d\n What does this process resemble? It actually sounds a lot like a legal proceeding, albeit one that\u2019s entirely one-sided, devoid of any semblance of due process or legal protection under the law, and probably carried out by teams of purple-haired Millennials with nose hoops and personal pronoun mood-rings.\n When tech companies take it upon themselves to arbitrate what is or isn\u2019t misinformation, or taking action based on events that occur outside of their own platforms what they are doing, at its core, is adjudicating international law. Do you really want your domain registrar or your web host doing that?\n These companies think they\u2019re the patricians of internet discourse. The reality is they\u2019re the plumbing.\n  \u201cFact Checks\u201d are another entirely subjective catch phrase dolled up to look like objective truth. These days a fact check is more likely to be a logical fallacy and the reality is, most people don\u2019t even know what logical fallacies  are.\n When the  Associated Press \u201cfact checked\u201d US Senate testimony on the efficacy of Ivermectin claiming  \u201cthere is no evidence that Ivermectin is a \u2018miracle drug\u2019 against COVID\u201d\u00a0and they labeled it  false, they committed a logical fallacy called \u201cappeal to ignorance\u201d (absence of evidence is not evidence of absence).\n The vast majority of all media narrative around COVID-19, on masks, lockdowns, Ivermectin, HCQ and yes, vaccines, can be categorized into  five logical fallacies:\n Appeal to Authority: whatever experts and unaccountable technocrats say is objectively true. If you disagree with the experts you are disputing science itself (even the ones who were neck deep in funding the gain-of-function research that quite possibly led to the lab release that caused the pandemic).\n Bandwagon: Because everybody else believes something, you have a moral obligation to believe it too. Anything you\u2019ve come across or read that contradicts what everybody else believes to be true is \u201cmisinformation\u201d.\n Ad Hominem: is not an argument at all, it\u2019s an attack. \u201cCovidiots\u201d, \u201cDeniers\u201d these are not rational counter-arguments, they\u2019re slurs. Anybody employing them is not\u00a0 engaging in discourse but rather bigotry and prejudice. This is as inexcusable as racism. Over the past few years many have been challenged to examine their own biases and privilege, in certain contexts for perfectly valid reasons. Anybody engaging in this type of othering toward skeptics and contrarians lacks self-awareness and empathy to the same degree as a racist.\n Appeal To Emotion: Corporate media thrives on fear. Social media platforms on anger. It\u2019s why every time CNN says \u201cDelta variant\u201d it is \u201chighly contagious\u201d instead of \u201cless fatal\u201d. If everybody knew that  recent data out of the UK (among others) indicates the Delta variant has a fatality rate that\u2019s even lower than the already quite low Alpha variant, basically the same as seasonal flu, then they may just calm down. And we can\u2019t have that.\n Moving the Goalposts: 15-days to flatten the curve became #NoJabNoJob in about 18 months. You\u2019re still supposed to wear a mask if you\u2019re fully vaccinated, the media has already decided that a fourth wave will occur in the fall and the really forward looking thinkers are gearing us up for climate lockdowns.\u00a0 \u201cWe\u2019re all in this together\u201d turned into that Dr. Seuss story about the Sneeches. Also, Dr Seuss got canceled.\n    There are those that believe there is no subjectivity involved in any of this. They think, as Jack Conte does, that there are standalone objective truths, like Manifest Observable Behaviour. Realms where nuance, uncertainty and conflicting data are banished. All right thinking people grok The Truth and only wrong thinking people dispute it.\n  You\u2019re struggling to understand why some people are vaccine hesitant. The \u201clet me help you\u201d megathread:\n Imagine you\u2019re a normal person. The year is 2016. Rightly or wrongly, you believe most of what you see in the media.\n   It lays out the case, fairly cogently, why the general public may just simply be confused, distrustful and hesitant as opposed to being morally reprobate monsters. Further, it enumerates, in painstaking detail, multiple pillars of official canon which turned out to be, misinformation, for lack of a better word (unless that word is  \u201clies\u201d).\n We see Fauci removing his mask the moment the cameras stop rolling. We see AOC sitting amongst a fairly close knit crowd put one on for the express purpose of a photo op and then take it off again. But if you send an email to your own subscribers via Mailchimp wondering out loud if masks are nothing more than performative theatre, you\u2019ll get shut down.\n How does any of this establish the credibility and public trust required to mobilize that last 20% to 30% needed to (purportedly) achieve herd immunity? It doesn\u2019t.\n From WMD in Iraq being a \u201cslum dunk\u201d through \u201cSubprime is Contained\u201d to \u201cTapering will be like watching paint dry\u201d, anybody who has actually been keeping track of the expert authorities track records  over the past 20 years has legitimate reason to believe that experts don\u2019t know anything. At least nothing of  predictive\u00a0value.\n Another chapter in  my book asks the question \u2018Does Deplatforming Even Work?\u2019 Short answer is: it doesn\u2019t. Over the long haul suppression of material amplifies it. If you want fewer unhinged conspiracy theories circulating about COVID, stop deplatforming anybody who isn\u2019t mindlessly parroting Fauci.\n What is really needed is a society-wide  crash course in critical thinking, and not to be incessantly hectored and told what  not\u00a0to think. The Davos crew, the entrenched elites of late stage globalism think we\u2019re headed toward a world managed by expert technocrats. But they haven\u2019t exactly put up a string of successes and this approach to public policy has arguably failed its most important test.\n We\u2019re headed toward a decentralized world governed by consensus as expressed through open source protocols and smart contracts. The battle is not about left vs right, conservative vs liberal where either side would have you believe that content cleanly bisects into Truth and Misinformation. The defining tension of the next 20 years will between decentralization vs bureaucracy, platforms vs protocols and nation states vs networks.\n As for the opening quote of today\u2019s piece? Semmelweis lived a tragic life. The  battle to convince the medical establishment of his day that  washing ones hands\u00a0 after performing an autopsy and before delivering a baby would prevent the spread of\u00a0 \u201ccadaverous particles\u201d from corpses to mothers and newborns was seen as delusional. Surely AP would have \u201cfact checked\u201d it as  false. Politifact would have rated it  \u201cpants on fire\u201d. After all, that there was no such thing as\u00a0 germs\u00a0was settled science.\n The stress of the scorn and demonization took a lot out of Semmelweis. He apparently aged the equivalent of decades in just three years since he commenced his writing campaign in 1857 promoting his theories until the publication of his Aetiology in 1860.\n  He died alone and in ignominy, having been committed to a mental institution by his medical peers.\n Mark E. Jeftovic is the CEO of the Toronto-based web services company  easyDNS. To receive future posts in your mailbox   join the free Bombthrower mailing list. To get premium research on companies and stocks that are poised to win big as crypto continues its ascent, try our\u00a0Crypto Capitalist Portfolio   trial offer.", "posttime": "2021-08-09 00:53:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bdd\u8bed,tech", "title": "\u5927\u79d1\u6280\u5e94\u8be5\u662f\u6c34\u7ba1\u5de5\uff0c\u800c\u4e0d\u662f\u4e92\u8054\u7f51\u8bdd\u8bed\u7684\u8d35\u65cf", "title_en": "Big Tech are supposed to be the plumbers, not patricians of internet discourse", "transed": 1, "url": "https://bombthrower.com/articles/when-dissent-is-misinformation-fallacies-become-facts/", "via": "", "real_tags": ["\u8bdd\u8bed", "tech"]}, {"category": "", "categoryclass": "", "imagename": "422f21ae7c1e866e7ca490d10b867485.jpeg", "infoid": 1072136, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u4f18\u6b65\u79d1\u6280\u516c\u53f8\u4e3a\u89e3\u51b3\u7531\u5927\u6d41\u884c\u5bfc\u81f4\u7684\u52b3\u52a8\u529b\u77ed\u7f3a\u95ee\u9898\u6295\u5165\u5de8\u8d44\u540e\uff0c\u53f8\u673a\u4eec\u91cd\u8fd4\u4f18\u6b65\u79d1\u6280\u516c\u53f8 UBER 2.81% \u548c Lyft LYFT 0.04%\u3002\u65b0\u6570\u636e\u663e\u793a\uff0c\u8fd9\u79cd\u8f6c\u53d8\u5e76\u672a\u5c06\u7968\u4ef7\u4ece\u5386\u53f2\u9ad8\u4f4d\u62c9\u4f4e\u3002\u6839\u636e\u5e02\u573a\u7814\u7a76\u516c\u53f8\u4e50\u5929\u60c5\u62a5\u7684\u6570\u636e\uff0c\u4f18\u6b65\u548c Lyft \u5728\u7f8e\u56fd\u7684\u5e73\u5747\u7968\u4ef7\u4ece 2 \u6708\u5230 7 \u6708\u9010\u6708\u4e0a\u6da8\uff0c\u6bcf\u6b21\u90fd\u521b\u4e0b\u65b0\u9ad8\u3002\u4e07\u6d88\u8d39\u8005\u3002\u867d\u7136 7 \u6708\u4efd\u7684\u5e73\u5747\u7968\u4ef7\u6bd4 6 \u6708\u4efd\u7565\u6709\u4e0a\u5347\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u4e0e\u5927\u6d41\u884c\u4e4b\u524d\u7684 2020 \u5e74 1 \u6708\u76f8\u6bd4\uff0c\u6d88\u8d39\u8005\u4e0a\u4e2a\u6708\u7684\u4e58\u8f66\u8d39\u7528\u589e\u52a0\u4e86 50% \u4ee5\u4e0a\u3002\u636e\u4e50\u5929\u79f0\uff0c\u8fd9\u662f\u81f3\u5c11\u4e09\u5e74\u6765\u7f8e\u56fd\u4eba\u4e3a\u4f18\u6b65\u548c Lyft \u652f\u4ed8\u7684\u8d39\u7528\u6700\u9ad8\u7684\u4e00\u6b21\u3002\u5c3d\u7ba1\u6700\u8fd1\u6709\u53f8\u673a\u6d8c\u5165\uff0c\u4f46\u516c\u53f8\u79f0\u8fd9\u662f\u7531\u6301\u7eed\u7684\u52b3\u52a8\u529b\u77ed\u7f3a\u63a8\u52a8\u7684\u5929\u4ef7\u3002\u4f18\u6b65\u5468\u4e09\u8868\u793a\uff0c\u4e0e\u524d\u4e00\u4e2a\u6708\u76f8\u6bd4\uff0c7 \u6708\u4efd\u6ce8\u518c\u7684\u53f8\u673a\u589e\u52a0\u4e86 30%\u3002 Lyft \u5468\u4e8c\u8868\u793a\uff0c\u4e0e\u524d\u4e09\u4e2a\u6708\u76f8\u6bd4\uff0c\u622a\u81f3 6 \u6708\u7684\u4e09\u4e2a\u6708\u671f\u95f4\u6ce8\u518c\u7684\u53f8\u673a\u589e\u52a0\u4e86 50%\u3002 \u201c\u6570\u636e\u5f88\u6e05\u695a\uff1a\u53f8\u673a\u4f9b\u5e94\u6ca1\u6709\u8ddf\u4e0a\u4e58\u5ba2\u9700\u6c42\u6fc0\u589e\u7684\u6b65\u4f10\uff0c\u5bfc\u81f4\u62fc\u8f66\u5e02\u573a\u5931\u53bb\u5e73\u8861\uff0c\u201dLyft \u53d1\u8a00\u4eba\u8868\u793a\uff0c\u5e76\u8865\u5145\u8bf4\u516c\u53f8\u5c06\u7ee7\u7eed\u6295\u8d44\u53f8\u673a\u6fc0\u52b1\u63aa\u65bd\uff0c\u4ee5\u7f13\u89e3\u77ed\u7f3a\u3002\u98d9\u5347\u7684\u4ef7\u683c\u5e76\u6ca1\u6709\u6291\u5236\u9884\u8ba2\uff0c\u8fd9\u53cd\u6620\u4e86\u53bb\u5e74\u5e7f\u6cdb\u7684\u5c01\u9501\u4f7f\u8bb8\u591a\u4eba\u7559\u5728\u5bb6\u4e2d\u540e\uff0c\u6d88\u8d39\u8005\u5bf9\u9ad8\u4ef7\u7684\u5bb9\u5fcd\u5ea6\u3002\u4f18\u6b65\u548c Lyft \u7684\u4e58\u8f66\u4e1a\u52a1\u5728\u7b2c\u4e8c\u5b63\u5ea6\u4ece\u53bb\u5e74\u7684\u4f4e\u70b9\u53cd\u5f39\uff0c\u7231\u8fea\u751f\u8d8b\u52bf\u7684\u6570\u636e\u663e\u793a\uff0c\u622a\u81f3 7 \u6708 19 \u65e5\u7684\u4e00\u5468\uff0c\u6d88\u8d39\u8005\u5728\u53eb\u8f66\u4e0a\u7684\u652f\u51fa\u4e0e\u53bb\u5e74\u540c\u671f\u76f8\u6bd4\u4ecd\u7136\u8f83\u9ad8\u3002\u52a0\u62ff\u5927\u7687\u5bb6\u94f6\u884c\u8d44\u672c\u5e02\u573a (RBC Capital Markets) \u5206\u6790\u5e08\u5e03\u62c9\u5fb7\u00b7\u57c3\u91cc\u514b\u68ee (Brad Erickson) \u8868\u793a\uff0cCovid-19 Delta \u53d8\u4f53\u201c\u53ef\u80fd\u4f1a\u518d\u6b21\u4f24\u5bb3\u4e00\u5207\uff0c\u4f46\u8fd9\u6b21\u53cd\u5f39\u7684\u901f\u5ea6\u4f1a\u5feb\u5f97\u591a\u201d\u3002 \u201c\u9884\u8ba2\u91cf\u4e0d\u4f1a\u4e0b\u964d 90%\u3002\u5b83\u4e0d\u4f1a\u63a5\u8fd1\u53bb\u5e74\u7684\u89c4\u6a21\uff0c\u201d\u4ed6\u8bf4\u3002\n\u4e24\u5bb6\u516c\u53f8\u90fd\u6ca1\u6709\u516c\u5f00\u62ab\u9732\u8fd1\u51e0\u4e2a\u6708\u5728\u5168\u56fd\u8303\u56f4\u5185\u7684\u4e58\u8f66\u4ef7\u683c\u8868\u73b0\u3002\u4ed6\u4eec\u4e5f\u6ca1\u6709\u8bf4\u660e\u8fd8\u9700\u8981\u591a\u5c11\u53f8\u673a\u624d\u80fd\u6ee1\u8db3\u9700\u6c42\u3002\u4f46\u4f18\u6b65\u672c\u5468\u8868\u793a\uff0c\u5728\u5df2\u7ecf\u7ed3\u675f\u5931\u4e1a\u6551\u6d4e\u7684\u57ce\u5e02\u6216\u5dde\uff0c\u4ef7\u683c\u6b63\u5728\u6062\u590d\u5230\u75ab\u60c5\u524d\u7684\u6c34\u5e73\u3002\u9ad8\u7ba1\u4eec\u8868\u793a\uff0c\u8fd9\u79cd\u8f6c\u53d8\u4fc3\u4f7f\u66f4\u591a\u7684\u53f8\u673a\u5728\u8fc8\u963f\u5bc6\u3001\u4e9a\u7279\u5170\u5927\u548c\u4f11\u65af\u987f\u7b49\u57ce\u5e02\u4e3a\u4f18\u6b65\u5de5\u4f5c\uff0c\u7f13\u89e3\u4e86\u6301\u7eed\u7684\u52b3\u52a8\u529b\u77ed\u7f3a\u5e76\u6291\u5236\u4e86\u9ad8\u4ef7\u3002\u5728\u7ebd\u7ea6\u3001\u65e7\u91d1\u5c71\u548c\u6d1b\u6749\u77f6\u2014\u2014\u4f18\u6b65\u6700\u5927\u7684\u56fd\u5185\u5e02\u573a\u2014\u2014\u201c\u9700\u6c42\u7ee7\u7eed\u8d85\u8fc7\u4f9b\u5e94\uff0c\u4ef7\u683c\u548c\u7b49\u5f85\u65f6\u95f4\u4ecd\u9ad8\u4e8e\u6211\u4eec\u7684\u8212\u9002\u6c34\u5e73\uff0c\u201d\u9996\u5e2d\u6267\u884c\u5b98\u8fbe\u62c9\u00b7\u79d1\u65af\u7f57\u8428\u897f\u5468\u4e09\u5728\u516c\u53f8\u516c\u5e03\u5b63\u5ea6\u4e1a\u7ee9\u540e\u544a\u8bc9\u5206\u6790\u5e08\u3002\u4f18\u6b65\u53d1\u8a00\u4eba\u91cd\u7533\uff0c\u60c5\u51b5\u56e0\u57ce\u5e02\u800c\u5f02\u3002\u4ed6\u8bf4\uff0c\u5728\u4e00\u4e9b\u5730\u65b9\uff0c\u4ef7\u683c\u6b63\u9010\u6e10\u63a5\u8fd1\u5927\u6d41\u884c\u524d\u7684\u6c34\u5e73\uff0c\u800c\u5728\u53e6\u4e00\u4e9b\u5730\u65b9\uff0c\u4ef7\u683c\u7ee7\u7eed\u4fdd\u6301\u9ad8\u4f4d\u3002\u65e9\u671f\u8ff9\u8c61\u8868\u660e\uff0c\u968f\u7740 Lyft \u7ee7\u7eed\u5411\u53f8\u673a\u63d0\u4f9b\u5956\u91d1\u4ee5\u53ca\u5176\u4ed6\u5dde\u9010\u6b65\u53d6\u6d88\u5931\u4e1a\u6551\u6d4e\uff0c\u53f8\u673a\u77ed\u7f3a\u548c\u9ad8\u4ef7\u5c06\u5728\u4e0b\u4e2a\u6708\u672c\u5b63\u5ea6\u672b\u6d88\u9000\u3002\u4f18\u6b65\u8868\u793a\uff0c\u5b83\u5728 6 \u6708\u4efd\u8c03\u67e5\u7684 90,000 \u540d\u975e\u6d3b\u8dc3\u53f8\u673a\u4e2d\u6709 90% \u8868\u793a\u4ed6\u4eec\u8ba1\u5212\u5728 9 \u6708\u4e4b\u524d\u8fd4\u56de\u3002\u4f18\u6b65\u548c Lyft \u5728\u53f8\u673a\u6fc0\u52b1\u65b9\u9762\u7684\u652f\u51fa\u589e\u52a0\uff0c\u518d\u52a0\u4e0a\u5373\u5c06\u5230\u6765\u7684 Delta \u53d8\u4f53\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u5bfc\u81f4\u5b83\u4eec\u7684\u80a1\u7968\u5728\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u66b4\u8dcc\uff0c\u5c3d\u7ba1\u5b83\u4eec\u8d85\u8fc7\u4e86\u5206\u6790\u5e08\u5bf9\u7b2c\u4e8c\u5b63\u5ea6\u9700\u6c42\u7684\u9884\u6d4b\u3002\u4e24\u53ea\u80a1\u7968\u90fd\u4ece\u4e0a\u5468\u7684\u4f4e\u70b9\u56de\u5347\u3002\u52a0\u62ff\u5927\u7687\u5bb6\u94f6\u884c\u7684\u57c3\u91cc\u514b\u68ee\u5148\u751f\u8868\u793a\uff0c\u5728\u9700\u6c42\u9010\u6e10\u51cf\u5c11\u3001\u53f8\u673a\u518d\u6b21\u56de\u907f\u62fc\u8f66\u7684\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u201c\u8fd9\u5c06\u4f7f\u516c\u53f8\u521a\u521a\u5b8c\u6210\u7684\u5927\u91cf\u6295\u8d44\u53d8\u5f97\u65e0\u5173\u7d27\u8981\u201d\u3002\u4f18\u6b65\u548c Lyft \u6709\u80fd\u529b\u518d\u6b21\u6295\u5165\u8d44\u91d1\uff0c\u4f46\u8fd9\u5c06\u8f6c\u5316\u4e3a\u201c\u635f\u5931\u5927\u91cf\u8d44\u91d1\u201d\u3002 Lyft \u8868\u793a\uff0c\u5728\u7b2c\u4e8c\u5b63\u5ea6\u82b1\u8d39 5.72 \u4ebf\u7f8e\u5143\u540e\uff0c\u5176\u7b2c\u4e09\u5b63\u5ea6\u6536\u5165\u5c06\u53d7\u5230\u6253\u51fb\uff0c\u56e0\u4e3a\u5b83\u8ba1\u5212\u5728\u53f8\u673a\u6fc0\u52b1\u65b9\u9762\u6295\u5165\u66f4\u591a\u8d44\u91d1\u3002 Lyft \u9996\u5e2d\u8d22\u52a1\u5b98\u5e03\u8d56\u6069\u00b7\u7f57\u4f2f\u8328 (Brian Roberts) \u5468\u4e8c\u5bf9\u5206\u6790\u5e08\u8868\u793a\uff1a\u201c\u6211\u4eec\u5c06\u7ef4\u6301\u8f83\u9ad8\u7684\u4f9b\u5e94\u6295\u8d44\uff0c\u4ee5\u5e2e\u52a9\u964d\u4f4e\u4ef7\u683c\u3002\u201d\u7f57\u4f2f\u8328\u5148\u751f\u8bf4\uff0c\u4ed6\u8ba4\u4e3a\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u4ef7\u683c\u4e0d\u4f1a\u4fdd\u6301\u8fd9\u4e48\u9ad8\u3002\n\u4f18\u6b65\u5728\u7b2c\u4e8c\u5b63\u5ea6\u5728\u6fc0\u52b1\u63aa\u65bd\u4e0a\u7684\u652f\u51fa\u8d85\u8fc7\u4e86\u5206\u6790\u5e08\u7684\u9884\u671f\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u672c\u5b63\u5ea6\u4e0d\u6253\u7b97\u5728\u8fd9\u4e9b\u65b9\u9762\u6295\u5165\u66f4\u591a\u8d44\u91d1\uff0c\u56e0\u4e3a\u5c3d\u7ba1\u53d6\u6d88\u4e86\u6fc0\u52b1\u63aa\u65bd\uff0c\u4f46\u6700\u8fd1\u51e0\u5468\u5b83\u4e00\u76f4\u5728\u62db\u52df\u53f8\u673a\u3002\u60a8\u5982\u4f55\u5e94\u5bf9\u53f8\u673a\u77ed\u7f3a\u548c\u9ad8\u6602\u7684\u4ef7\u683c\uff1f\u52a0\u5165\u4e0b\u9762\u7684\u5bf9\u8bdd\u3002\u7531\u4e8e\u4f18\u6b65\u548c Lyft \u7740\u773c\u4e8e\u957f\u671f\u5229\u6da6\uff0c\u5206\u6790\u5e08\u8868\u793a\uff0c\u4e0e\u5927\u6d41\u884c\u524d\u7684\u6298\u6263\u7387\u76f8\u6bd4\uff0c\u6d88\u8d39\u8005\u5e94\u8be5\u671f\u671b\u4e3a\u6bcf\u6b21\u4e58\u8f66\u652f\u4ed8\u66f4\u591a\u8d39\u7528\u3002\u4f46\u5206\u6790\u5e08\u4e5f\u4e0d\u8ba4\u4e3a\u4ef7\u683c\u4f1a\u4fdd\u6301\u5728\u76ee\u524d\u7684\u9ad8\u5ea6\u3002\u7531\u4e8e\u6301\u7eed\u7684\u5956\u91d1\uff0c\u53f8\u673a\u7684\u6536\u5165\u521b\u4e0b\u5386\u53f2\u65b0\u9ad8\u3002\u4f18\u6b65\u8868\u793a\uff0c\u5176\u53f8\u673a\u5728\u5176\u6700\u7e41\u5fd9\u7684\u5e02\u573a\u6bcf\u5c0f\u65f6\u7684\u6536\u5165\u8d85\u8fc7 40 \u7f8e\u5143\u3002\u4f46\u662f\uff0c\u4e00\u65e6\u6fc0\u52b1\u63aa\u65bd\u6d88\u5931\uff0c\u8fd1\u671f\u7684\u6311\u6218\u662f\u7559\u4f4f\u4ed6\u4eec\u3002 Derrick Stanfield Kivoi \u5728\u8fc8\u963f\u5bc6\u7ecf\u8425\u7740\u4e00\u5bb6\u5c0f\u578b\u6570\u5b57\u8425\u9500\u4e1a\u52a1\uff0c\u5e76\u5728 Uber \u65c1\u8fb9\u9a7e\u9a76\u4e86\u51e0\u5e74\uff0c\u4ed6\u5728\u4e00\u5e74\u7684\u4e2d\u65ad\u540e\u4e8e\u4eca\u5e74\u518d\u6b21\u5f00\u8f66\uff0c\u56e0\u4e3a\u6fc0\u52b1\u63aa\u65bd\u592a\u597d\u4e86\uff0c\u65e0\u6cd5\u62d2\u7edd\u3002\u4ed6\u8bf4\uff0c\u4f18\u6b65\u4e3a\u4ed6\u63d0\u4f9b\u4e86 100 \u7f8e\u5143\u7684\u8fde\u7eed\u4e09\u8d9f\u884c\u7a0b\uff0c\u7136\u540e\u5728\u5de5\u4f5c\u65e5\u5b8c\u6210\u7684 40 \u8d9f\u884c\u7a0b\u4e2d\u83b7\u5f97 250 \u7f8e\u5143\u7684\u5956\u91d1\u3002\u6700\u8fd1\u51e0\u5468\u5956\u91d1\u9010\u6e10\u51cf\u5c11\u2014\u2014\u4f18\u6b65\u7684 250 \u7f8e\u5143\u5956\u91d1\u964d\u81f3 50 \u7f8e\u5143\u2014\u2014\u800c Kivoi \u5148\u751f\u5728\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u5173\u95ed\u4e86\u8be5\u5e94\u7528\u7a0b\u5e8f\u3002 \u201c\u4e00\u65e6\u6fc0\u52b1\u63aa\u65bd\u505c\u6b62\uff0c\u6211\u5c31\u4f1a\u505c\u6b62\uff0c\u201d\u4ed6\u8bf4\u3002\u4f18\u6b65\u548c Lyft \u6b63\u8bd5\u56fe\u89e3\u51b3\u96f6\u5de5\u52b3\u52a8\u529b\u4e0d\u65ad\u53d8\u5316\u7684\u95ee\u9898\u3002\u4f18\u6b65\u4e0a\u6708\u5e95\u5ba3\u5e03\u4e3a\u53f8\u673a\u63d0\u4f9b\u514d\u8d39\u5728\u7ebf\u8bed\u8a00\u8bfe\u7a0b\u3002\u5b83\u8fd8\u5f00\u59cb\u5411\u53f8\u673a\u663e\u793a\u4e58\u5ba2\u4e3a\u4e58\u8f66\u652f\u4ed8\u7684\u603b\u4f53\u8d39\u7528\uff0c\u800c\u4e0d\u662f\u53ea\u5411\u4ed6\u4eec\u663e\u793a\u7968\u4ef7\u90e8\u5206\u3002\nLyft \u4e0a\u4e2a\u6708\u8868\u793a\uff0c\u5b83\u6b63\u5728\u63a2\u7d22\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\uff0c\u4ee5\u524a\u51cf\u53f8\u673a\u6700\u5927\u7684\u5f00\u652f\u4e4b\u4e00\uff0c\u8fd9\u53ef\u80fd\u6d89\u53ca\u6c7d\u6cb9\u6216\u4fdd\u9669\u7684\u5927\u5e45\u6298\u6263\u6216\u5e2e\u52a9\u8d2d\u4e70\u8f66\u8f86\u3002", "note_en": "Drivers are returning to  Uber Technologies    UBER  2.81%  and  Lyft    LYFT  0.04%  after the companies  spent big on incentives to address a pandemic-driven labor shortage. That shift isn\u2019t bringing down fares from record highs, new data show.\n  The average Uber and Lyft fare in the U.S. rose month-to-month from February through July, touching new highs every time, according to data from Rakuten Intelligence, a market-research firm that based its analysis on e-receipts from more than one million consumers. While the average fare in July edged up slightly from June, it meant consumers paid over 50% more for a ride last month compared with January 2020, before the pandemic.\n  That\u2019s the most Americans have paid for Uber and Lyft rides in at least three years, according to Rakuten.\n  The sky-high prices, which the companies say are driven by the continuing labor shortage, come despite a recent influx of drivers. Uber said Wednesday that 30%  more drivers signed up in July compared with the month before. Lyft said Tuesday that 50% more drivers signed up in the three-month period that ended in June compared with the preceding three months.\n      \u201cThe data is clear: Driver supply has not kept pace with the surge of demand from riders, throwing the ride-share market out of balance,\u201d a Lyft spokeswoman said, adding that the company would continue to  invest in driver incentives to ease the shortage.\n    Soaring prices haven\u2019t crimped bookings, reflecting consumers\u2019 tolerance for high prices after widespread lockdowns kept many at home last year. Uber and Lyft\u2019s ride  business rebounded in the second quarter from the lows of last year, and data from Edison Trends show that consumer spending on ride-hailing remained elevated for the week ended July 19 compared with the same week a year earlier.\n  The Covid-19 Delta variant \u201cmight hurt everything again, but this time things will bounce back a lot faster,\u201d said Brad Erickson, an analyst at RBC Capital Markets who covers both companies. \u201cBookings aren\u2019t going to go down 90%. It\u2019s not going to be anywhere close to the magnitude of last year,\u201d he said.\n  Neither company has publicly disclosed how ride prices have fared nationwide in recent months. Nor have they said how many more drivers are needed to meet demand. But Uber said this week that prices were returning to pre-Covid levels in cities or states that had ended unemployment benefits. That shift pushed more drivers to work for Uber in cities like Miami, Atlanta and Houston, alleviating the continuing labor crunch and tempering high prices, executives said.\n  In New York, San Francisco and Los Angeles\u2014Uber\u2019s top domestic markets\u2014\u201cdemand continues to outplay supply, and prices and wait times remain above our comfort levels,\u201d Chief Executive Dara Khosrowshahi told analysts Wednesday after the company reported quarterly results.\n  An Uber spokesman reiterated that the situation varies city-by-city. In some, he said, prices are inching closer to pre-pandemic levels, while they continue to remain high in others.\n    Early signs point to the driver shortage and high prices abating at the end of the current quarter next month, as Lyft continues to offer bonuses to drivers and as other states phase out unemployment benefits. Uber said 90% of the 90,000 inactive drivers it surveyed in June indicated they planned to return by September.\n  Uber and Lyft\u2019s elevated spending on driver incentives, combined with the uncertainty around the looming Delta variant, sent their stocks tumbling earlier in the week even though they beat analysts\u2019 second-quarter demand projections. Both stocks recovered from their lows this past week.\n  In the extreme scenario that demand tapers off and drivers shun ride-share all over again, \u201cit will make a lot of this investment the companies have just done irrelevant,\u201d said RBC\u2019s Mr. Erickson. Uber and Lyft have the muscle to pump in the money again, but it\u2019ll translate to \u201ca lot of lost dollars.\u201d\n  Lyft said its third-quarter revenue would take a hit as it planned to spend more on driver incentives, after spending $572 million on them through the second quarter. \u201cWe are maintaining elevated supply investments to help lower prices,\u201d Lyft Chief Financial Officer Brian Roberts told analysts on Tuesday. Mr. Roberts said he didn\u2019t think prices would remain this high in the long run.\n  Uber spent more on incentives than analysts had expected in the second quarter. The company said it doesn\u2019t plan to spend significantly more on them in the current quarter because it has been acquiring drivers in recent weeks despite pulling back on incentives.\n  How are you responding to the driver shortages and high prices? Join the conversation below.\n  As Uber and Lyft eye long-term profits, analysts say consumers should expect to pay more per ride compared with the discounted rates before the pandemic. But analysts also don\u2019t think prices will stay at their current heights.\n  Drivers\u2019 earnings are at an all-time high, thanks to the continuing bonuses. Uber said its drivers are making more than $40 an hour in its busiest markets. But a near-term challenge is retaining them once the incentives go away.\n  Derrick Stanfield Kivoi, who runs a small digital marketing business in Miami and has driven for Uber on the side for several years, took to driving again this year after a year-long hiatus because the incentives were too good to turn down. Uber offered him $100 for three consecutive rides, he said, and then followed with a $250 bonus for 40 rides completed during the weekday.\n  The bonuses tapered off in recent weeks\u2014Uber\u2019s $250 bonus dropped to $50\u2014and Mr. Kivoi turned off the app earlier this week. \u201cAs soon as the incentives stop, I\u2019m stopping,\u201d he said.\n  Uber and Lyft are trying to address the shifting dynamics of gig labor. Uber announced free online language classes for drivers late last month. It also started showing drivers what passengers paid for a ride overall, instead of showing them only the fare portion.\n  Lyft said last month it was exploring a partnership to trim one of drivers\u2019 biggest expenses, which could involve sizable discounts on gas or insurance or help with buying vehicles.", "posttime": "2021-08-08 23:52:37", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "2020,\u7f8e\u56fd,\u4f18\u6b65,shows,\u53f8\u673a", "title": "\u5bf9\u8d85\u8fc7 100 \u4e07\u6d88\u8d39\u8005\u7684\u7535\u5b50\u6536\u636e\u7684\u5206\u6790\u8868\u660e\uff0c\u4e0e 2020 \u5e74 1 \u6708\u76f8\u6bd4\uff0c2021 \u5e74 7 \u6708\u7f8e\u56fd\u4f18\u6b65\u548c Lyft \u7684\u5e73\u5747\u7968\u4ef7\u9ad8\u51fa 50%", "title_en": "Analysis of e-receipts from 1M+ consumers shows that the average Uber and Lyft fares in the US were 50% higher in July 2021 compared with January 2020", "transed": 1, "url": "https://www.wsj.com/articles/uber-and-lyft-drivers-are-coming-back-but-prices-arent-falling-11628337601?mod=djemalertNEWS", "via": "", "real_tags": ["2020", "\u7f8e\u56fd", "\u4f18\u6b65", "shows", "\u53f8\u673a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072135, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u524d\u7684\u5927\u6d41\u884c\u4f7f\u6bcf\u4e2a\u4eba\u90fd\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u60f3\u66f4\u591a\u5730\u8003\u8651\u75c5\u6bd2\uff0c\u4f46\u5b83\u4eec\u662f\u6211\u4eec\u751f\u6d3b\u4ee5\u53ca\u51e0\u4e4e\u6240\u6709\u751f\u7269\u7684\u751f\u6d3b\u7684\u6301\u7eed\u80cc\u666f\u3002\u4eba\u7c7b\u6709\u75c5\u6bd2\uff0c\u5176\u4ed6\u54fa\u4e73\u52a8\u7269\u6709\u75c5\u6bd2\uff08\u5076\u5c14\u4f1a\u6709\u707e\u96be\u6027\u7684\u91cd\u53e0\uff09\uff0c\u9e1f\u7c7b\u3001\u722c\u884c\u52a8\u7269\u548c\u9c7c\u7c7b\u4e5f\u6709\u81ea\u5df1\u7684\u75c5\u6bd2\u3002\u8815\u866b\u3001\u6d77\u7ef5\u3001\u8f6f\u4f53\u52a8\u7269\u3001\u6606\u866b\u2014\u2014\u5b83\u4eec\u90fd\u6709\u611f\u67d3\u5b83\u4eec\u7684\u75c5\u6bd2\u5957\u4ef6\uff0c\u4e00\u76f4\u5230\u653b\u51fb\u7ec6\u83cc\u7684\u566c\u83cc\u4f53\u3002\u5404\u79cd\u690d\u7269\u4e5f\u6709\u81ea\u5df1\u7684\u75c5\u6bd2\u8f7d\u91cf\u3002\u8fd9\u5c31\u662f\u7ecf\u8fc7\u51e0\u5341\u4ebf\u5e74\u7684\u8fdb\u5316\u7ade\u4e89\u540e\u7684\u6837\u5b50\uff1b\u75c5\u6bd2\u5728\u5b83\u4eec\u6240\u505a\u7684\u4e8b\u60c5\u4e0a\u592a\u6210\u529f\u4e86\uff0c\u4e0d\u53ef\u80fd\u65e0\u5904\u4e0d\u5728\u3002\u6211\u4eec\u8fd8\u5fc5\u987b\u5b66\u4e60\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u591a\u5f97\u591a\u7684\u5173\u4e8e\u6211\u4eec\u9488\u5bf9\u8fd9\u4e9b\u4e8b\u7269\u7684\u9632\u5fa1\u673a\u5236\u7684\u77e5\u8bc6\uff0c\u6211\u60f3\u5f3a\u8c03\u4eca\u5929\u5176\u4e2d\u4e00\u4e2a\u7684\u5947\u602a\u7279\u5f81\uff0c\u5982\u672c\u6587\u6240\u793a\u3002\u5f53\u60a8\u611f\u67d3 RNA \u75c5\u6bd2\u65f6\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u53cd\u51fb\u662f\u901a\u8fc7 RNAse \u9176\uff0c\u5b83\u8bd5\u56fe\u5206\u89e3\u5916\u6765\u5e8f\u5217\u3002\u5f53\u7136\uff0c\u5b83\u4eec\u4e5f\u4f1a\u5206\u89e3\u6211\u4eec\u81ea\u5df1\u7684\u8bb8\u591a RNA \u5206\u5b50\u2014\u2014\u8bb8\u591a\u7c7b\u578b\u7684 RNA \u5728\u7ec6\u80de\u4e2d\u7684\u534a\u8870\u671f\u76f8\u5f53\u77ed\uff0c\u5982\u679c\u4f60\u9700\u8981\u5b83\u4eec\u6301\u7eed\u66f4\u957f\u65f6\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\u4e00\u4e9b\u7279\u6b8a\u7684\u529f\u80fd\u4e0a\u5de5\u4f5c\u3002\u5f53\u7136\uff0c\u75c5\u6bd2\u65e9\u5c31\u5076\u7136\u53d1\u73b0\u4e86\u8fd9\u4e9b\u8be1\u8ba1\uff1a\u9057\u4f20\u7269\u8d28\u4e0d\u4f1a\u88ab\u5bbf\u4e3b\u9632\u5fa1\u5982\u6b64\u8fc5\u901f\u964d\u89e3\u7684 RNA \u75c5\u6bd2\u5177\u6709\u660e\u663e\u7684\u4f18\u52bf\u3002\u907f\u5f00 RNAse \u6d3b\u6027\u7684\u539f\u56e0\u4e4b\u4e00\u662f RNA \u5206\u5b50\u672c\u8eab\u7684\u5f62\u72b6\u548c\u6253\u7ed3\u5f88\u5947\u602a\u3002\u8fd9\u4e9b\u5e8f\u5217\uff08\u5916\u5207\u6838\u7cd6\u6838\u9178\u9176\u6297\u6027 RNA\uff0c\u6216 xrRNAs\uff09\u7ecf\u8fc7\u591a\u5e74\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u4ee5\u81f3\u4e8e\u4e00\u4e9b\u75c5\u6bd2\u65e2\u4f7f\u7528\u5b83\u4eec\u4f5c\u4e3a\u4fdd\u62a4\uff0c\u53c8\u4f5c\u4e3a\u4e00\u79cd\u624b\u6bb5\uff0c\u5c06\u5bbf\u4e3b RNAse \u9176\u5b9a\u5411\u5230\u65e0\u8bba\u5982\u4f55\u90fd\u9700\u8981\u5207\u5272 RNA \u7684\u4f4d\u7f6e\uff01\u75c5\u6bd2\u8f7b\u88c5\u4e0a\u9635\u3002\u4efb\u4f55\u53ef\u4ee5\u5378\u8f7d\u5230\u5bbf\u4e3b\u7ec6\u80de\u4e0a\u7684\u5de5\u4f5c\u901a\u5e38\u90fd\u662f\u3002\u9ec4\u75c5\u6bd2\u662f\u7b2c\u4e00\u4e2a\u88ab\u53d1\u73b0\u5229\u7528\u8fd9\u4e9b\u6548\u5e94\u7684\u5bb6\u65cf\uff08\u5c3d\u7ba1\u5b83\u4eec\u540e\u6765\u4e5f\u88ab\u53d1\u73b0\u5728\u5176\u4ed6\u7c7b\u578b\u7684\u75c5\u6bd2\u4e2d\uff09\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u5f15\u4eba\u6ce8\u76ee\uff1a\u9ec4\u70ed\u75c5\u3001\u5be8\u5361\u75c5\u6bd2\u3001\u57fa\u5b54\u80af\u96c5\u70ed\u548c\u767b\u9769\u70ed\u90fd\u662f\u7531\u8fd9\u4e00\u7ec4\u7684\u75c5\u539f\u4f53\u5f15\u8d77\u7684\u3002\u4f8b\u5982\uff0c\u5be8\u5361\u75c5\u6bd2\u5728\u5176 RNA \u7684\u4e00\u4e2a\u533a\u57df\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u6253\u7ed3\u7ed3\u6784\uff0c\u5f53\u5bbf\u4e3b\u7ec6\u80de RNA \u9176\u8bd5\u56fe\u6d88\u5316\u5b83\u65f6\uff0c\u5b83\u4f1a\u5bfc\u81f4\u5f62\u6210\u4e00\u7cfb\u5217\u4e0d\u5b8c\u5168\u5206\u89e3\u7684 RNA \u79cd\u7c7b\u3002\u8fd9\u4e9b\u4e1c\u897f\u5806\u79ef\u5728\u7ec6\u80de\u5185\uff0c\u5e76\u5f00\u59cb\u4f9d\u6b21\u7834\u574f\u5404\u79cd\u5176\u4ed6\u7ec6\u80de\u8fc7\u7a0b\uff08\u4f8b\u5982\u5bf9\u75c5\u6bd2\u653b\u51fb\u505a\u51fa\u53cd\u5e94\u7684\u8fc7\u7a0b\uff01\uff09\uff0c\u4ece\u800c\u4f7f\u611f\u67d3\u66f4\u52a0\u6210\u529f\u3002\u5f53\u7136\uff0c\u4f60\u603b\u662f\u8981\u4fdd\u62a4\u4f60\u5bf9\u8fd9\u4e9b\u4e8b\u60c5\u7684\u601d\u8003\u3002\u6211\u4eec\u7684\u5927\u8111\u503e\u5411\u4e8e\u5c06\u4ee3\u7406\u5f52\u56e0\u4e8e\u4e8b\u7269\u2014\u2014\u8fd9\u662f\u6211\u4eec\u5982\u4f55\u6a21\u62df\u52a8\u7269\uff08\u5305\u62ec\u5176\u4ed6\u4eba\u7c7b\uff09\u7b49\u5a01\u80c1\u884c\u4e3a\u7684\u65b9\u5f0f\uff0c\u8fd9\u786e\u5b9e\u662f\u4e00\u79cd\u6709\u4ef7\u503c\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u3002\u4f46\u8fd9\u4e5f\u8ba9\u6211\u4eec\u8ba4\u4e3a\u5b99\u65af\u6216\u4efb\u4f55\u8bd5\u56fe\u7528\u95ea\u7535\u51fb\u4e2d\u6211\u4eec\u7684\u4eba\uff0c\u98d3\u98ce\u5f15\u5bfc\u5230\u65e0\u8bba\u5982\u4f55\u90fd\u5e94\u5f97\u7684\u65e0\u795e\u7684\u7f6a\u4eba\u7a9d\u70b9\uff0c\u4ee5\u53ca\u6838\u78c1\u5171\u632f\u6837\u54c1\u8f6c\u6362\u5668\u6700\u540e\u5c06\u4e09\u4e2a\u5c0f\u65f6\u7684\u8bd5\u7ba1\u6389\u5230\u5730\u677f\u4e0a\u7684\u539f\u56e0\u591c\u665a\u662f\u56e0\u4e3a\u673a\u5668\u4eba\u8ba8\u538c\u4f60\u5e76\u5e0c\u671b\u4f60\u7684\u5b9e\u9a8c\u5931\u8d25\u3002\u75c5\u6bd2\u5e76\u6ca1\u6709\u8ba1\u5212\u597d\u5b83\u4eec\u7684\u7b56\u7565\u3002\u5b83\u4eec\u4f1a\u53d8\u5f02\u3001\u5f98\u5f8a\u3001\u8e52\u8dda\u800c\u884c\uff0c\u76f4\u5230\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u6765\u5236\u9020 Moar \u75c5\u6bd2\uff0c\u7136\u540e Moar \u75c5\u6bd2\u7684\u53d8\u5316\uff0c\u4e0d\u7ba1\u5b83\u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u9010\u6e10\u5728\u4eba\u7fa4\u4e2d\u53d8\u5f97\u66f4\u52a0\u666e\u904d\u3002\u6211\u4eec\u6b63\u5728\u770b\u5230\u8fd9\u6837\u7684\u7a81\u53d8\u6709\u591a\u5c11\u4e2a\u65f6\u4ee3\u7684\u6700\u7ec8\u7ed3\u679c\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5728\u5bbf\u4e3b\u751f\u7269\u53cd\u51fb\u7684\u538b\u529b\u4e0b\u5b8c\u6210\u7684\uff0c\u6240\u4ee5\u73b0\u5728\u770b\u8d77\u6765\u975e\u5e38\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u6ca1\u6709\u770b\u5230\u65e0\u6570\u3001\u4e0d\u53ef\u77e5\u7684\u5931\u706b\u6570\u91cf\u4e5f\u6709\u5e2e\u52a9\u3002\u8fd9\u4e0e\u5360\u661f\u5e08\u548c\u7b97\u547d\u5e08\u6709\u610f\u4f7f\u7528\u7684\u7b56\u7565\u76f8\u540c\uff1a\u5145\u5206\u5229\u7528\u60a8\u7684\u6210\u529f\uff0c\u5c06\u6240\u6709\u5931\u8d25\u626b\u9664\u5728\u89c6\u7ebf\u4e4b\u5916\u3002\u5982\u679c\u4e00\u5f00\u59cb\u4f60\u6ca1\u6709\u6210\u529f\uff0c\u90a3\u5c31\u9500\u6bc1\u4f60\u5c1d\u8bd5\u8fc7\u7684\u6240\u6709\u8bc1\u636e\u3002\u75c5\u6bd2\u6210\u529f\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u5e76\u8fc5\u901f\u4e0a\u5347\u5230\u9876\u90e8\uff1b\u75c5\u6bd2\u6545\u969c\u6d88\u5931\u3002\u4e0a\u9762\u94fe\u63a5\u7684\u8bba\u6587\u7740\u773c\u4e8e\u5be8\u5361\u75c5\u6bd2\u4e2d\u7684\u4e00\u4e2a\u7ed3\uff0c\u901a\u8fc7\u9ad8\u79d1\u6280\u624b\u6bb5\u5c06\u5316\u5b66\u624b\u67c4\u8fde\u63a5\u5230\u7ed3\u7684\u6bcf\u4e00\u7aef\u5e76\u6355\u83b7\u5149\u9677\u9631\u4e2d\u7684\u90a3\u4e9b\u3002\u8fd9\u5141\u8bb8\u60a8\u4ee5\u975e\u5e38\u53ef\u63a7\u7684\u65b9\u5f0f\u62c9\u52a8\u672b\u7aef\uff0c\u5e76\u5728\u5355\u4e2a RNA \u5206\u5b50\u4e0a\u53d1\u751f\u89e3\u5f00\u65f6\u83b7\u5f97\u89e3\u5f00\u7684\u6982\u51b5\u3002\u4ee5\u4e0b\u662f\u4ed6\u4eec\u7684\u53d1\u73b0\uff1a\u901a\u8fc7\u6d4b\u91cf xrRNA \u5728\u5176\u7ed3\u6784\u6539\u53d8\u65f6\u7684\u5ef6\u4f38\uff0c\u6211\u4eec\u786e\u5b9a\u4e86\u6298\u53e0\u4e2d\u7684\u4e2d\u95f4\u4f53\u5e76\u63a8\u65ad\u51fa\u5b83\u4eec\u7684\u7ed3\u6784\u3002\u6211\u4eec\u53d1\u73b0\u5929\u7136\u6298\u53e0\u7684\u6838\u5fc3\u5bf9\u673a\u68b0\u5c55\u5f00\u5177\u6709\u5f88\u5f3a\u7684\u62b5\u6297\u529b\uff0c\u4f46\u5b9e\u73b0\u8fd9\u79cd\u6781\u7aef\u62b5\u6297\u9700\u8981\u6298\u53e0\u4e2d\u7684\u7279\u5b9a\u6b65\u9aa4\u987a\u5e8f\uff1a\u9996\u5148\u5f62\u6210\u4e09\u87ba\u65cb\u8fde\u63a5\uff0c\u7136\u540e\u5c06 5&#39; \u672b\u7aef\u7a7f\u5165\u88c2\u7f1d\u5728\u901a\u8fc7 PK \u5c06\u5e26\u87ba\u7eb9\u7684 5&#39; \u7aef\u5468\u56f4\u7684\u73af\u95ed\u5408\u4e4b\u524d\uff0c\u901a\u8fc7\u4e09\u7ea7\u89e6\u70b9\u8fde\u63a5\u548c\u7a33\u5b9a\u3002\n\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u8bf4 RNA \u4e2d\u6709\u4e00\u4e2a\u7ed3\u65f6\uff0c\u8fd9\u6b63\u662f\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u800c\u8fd9\u4e9b\u7ed3\u2014\u2014\u5c31\u50cf\u4f60\u7528\u7ef3\u5b50\u7cfb\u5728\u4e00\u8d77\u7684\u90a3\u4e9b\u2014\u2014\u5177\u6709\u7279\u5b9a\u7684\u62d3\u6251\u7ed3\u6784\u548c\u7279\u5b9a\u7684\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u53ef\u4ee5\u8ba9\u5b83\u4eec\u6b63\u786e\u5730\u7cfb\u5728\u4e00\u8d77\u3002\u8fd9\u4e00\u4e2a\u7684\u7ed3\u6784\u5982\u53f3\u56fe\u6240\u793a\uff0c\u4f60\u53ef\u4ee5\u770b\u5230 5&#39; \u7aef\u901a\u8fc7\u90a3\u4e2a\u88c2\u7f1d\u5361\u56de\u3002 RNAse \u9176\u663e\u7136\u4e0d\u592a\u6e05\u695a\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e2d\u7684\u8bb8\u591a\u9176\u4ece 5&#39; \u7aef\u5f00\u59cb\u6d88\u5316\uff0c\u7136\u540e\u649e\u5230\u7ed3\u4e0a\u3002\u7136\u800c\uff0c\u8fd9\u7bc7\u8bba\u6587\u53d1\u73b0\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7ed3\u90fd\u751f\u800c\u5e73\u7b49\u3002\u4f3c\u4e4e\u4ec5\u4ec5\u5f62\u6210\u4efb\u4f55\u65e7\u7ed3\u672c\u8eab\u4e0d\u8db3\u4ee5\u62b5\u6297 RNA \u9176\uff0c\u4f46\u8fd9\u79cd\u5be8\u5361\u75c5\u6bd2\u5177\u6709\u6bd4\u5e73\u5e38\u9ad8\u5f97\u591a\u7684\u673a\u68b0\u62b5\u6297\u529b\uff0c\u8fd9\u5c31\u662f\u5173\u952e\u7279\u5f81\u3002\u4f5c\u8005\u8ba1\u5212\u7528\u6765\u81ea\u5176\u4ed6\u75c5\u6bd2\u7684 RNA \u7ed3\u6765\u6d4b\u8bd5\u8fd9\u4e2a\u60f3\u6cd5\u3002\u4e5f\u8bb8\u518d\u8fc7\u51e0\u767e\u4e07\u5e74\u5c31\u4f1a\u51fa\u73b0\u4e00\u79cd\u80fd\u591f\u5904\u7406\u8fd9\u4e9b\u4e8b\u60c5\u7684 RNA \u9176\uff0c\u800c\u4e14\u4e8b\u60c5\u4f1a\u7ee7\u7eed\u4e0b\u53bb\u3002\u5982\u679c\u6211\u5fc5\u987b\u4ece\u6211\u7684\u672c\u79d1\u6559\u80b2\u4e2d\u6311\u9009\u4e00\u4ef6\u5173\u4e8e\u7ec6\u80de\u751f\u7269\u5b66\u7684\u4e8b\u60c5\u2014\u2014\u54ce\u5440\uff0c\u6211\u7684\u7814\u7a76\u751f\u6559\u80b2\u2014\u2014\u591a\u5e74\u6765\u5df2\u7ecf\u5b8c\u5168\u6539\u53d8\u4e86\uff0c\u90a3\u5c31\u662f\u5df2\u7ecf\u53d1\u73b0\u7684 RNA \u5206\u5b50\u7684\u91ce\u751f\u529f\u80fd\u548c\u7ed3\u6784\u591a\u6837\u6027\u3002\u4e00\u822c\u6765\u8bf4\uff0cRNA \u53ef\u4ee5\u5f62\u6210\u6570\u91cf\u60ca\u4eba\u7684\u7ed3\u6784\uff0c\u53ea\u6709\u50bb\u74dc\u624d\u4f1a\u8ba4\u4e3a\u6211\u4eec\u5df2\u7ecf\u8d70\u5230\u4e86\u5c3d\u5934\u3002\u5f53\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u5236\u9020\u4e00\u4e9b\u6709\u7528\u7684\u4e1c\u897f\uff0c\u800c\u5927\u81ea\u7136\u4e5f\u4ece\u672a\u5b8c\u5168\u627e\u5230\u7528\u9014\uff01\u8fd9\u4e9b\u7ed3\u662f\u5426\u4f1a\u6210\u4e3a\u5c0f\u5206\u5b50\u7684\u76ee\u6807\uff0c\u8feb\u4f7f\u5b83\u4eec\u201c\u89e3\u5f00\u201d\u5e76\u4f7f\u5b83\u4eec\u5bf9 RNAse \u53d8\u5f31\uff1f\u867d\u7136\u5c1d\u8bd5\u5f00\u53d1\u9776\u5411 RNA \u7ed3\u6784\u7684\u5c0f\u5206\u5b50\u7597\u6cd5\u80af\u5b9a\u6709\u5f88\u591a\u5174\u8da3\uff0c\u4f46\u5927\u591a\u6570\u52aa\u529b\u5f80\u5f80\u96c6\u4e2d\u5728\u7a33\u5b9a\uff0c\u800c\u4e0d\u662f\u7834\u574f\u7a33\u5b9a\uff08\u6216\u201c\u89e3\u5f00\u201d\uff09\u6709\u95ee\u9898\u7684 RNA \u7ed3\u6784\u4e0a\u3002\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\u8bd5\u56fe\u7528\u5c0f\u5206\u5b50\u7834\u574f\u7a33\u5b9a\u7684 RNA \u7ed3\u6784\u53ef\u80fd\u5f88\u68d8\u624b\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u7834\u574f\u5c0f\u5206\u5b50\u7ed3\u5408\u4f4d\u70b9\u672c\u8eab\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u672a\u7ed3\u5408\u7684 RNA \u53ef\u80fd\u4f1a\u91cd\u65b0\u6298\u53e0\u6210\u7ed3\u7ed3\u6784\u3002\u6240\u4ee5\u4f60\u771f\u6b63\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5c0f\u5206\u5b50\uff0c\u5b83\u65e2\u80fd\u8bc6\u522b\u7ed3\u7ed3\u6784\uff0c\u53c8\u80fd\u7a33\u5b9a\u4e0d\u540c\u7684\u7ed3\u6784\uff0c\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4f7f RNA \u5bb9\u6613\u53d7\u5230 RNA \u9176\u7684\u653b\u51fb\u3002\u5f53\u7136\uff0c\u8fd8\u6709\u5176\u4ed6\u6f5c\u5728\u7684\u65b9\u6cd5\u53ef\u4ee5\u8bbe\u8ba1\u5c0f\u5206\u5b50\u4ee5\u7ed3\u5408\u53ef\u80fd\u5728\u6cbb\u7597\u4e0a\u6709\u7528\u7684\u6253\u7ed3\u7684 RNA \u7ed3\u6784\uff0c\u6211\u76f8\u4fe1\u7814\u7a76\u4eba\u5458\u6b63\u5728\u52aa\u529b\u5c1d\u8bd5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6211\u60f3\u77e5\u9053\u5236\u4f5c\u67d0\u79cd\u201c\u5200\u201d\uff08\u9176\u4fc3\uff1f\uff09\u6765\u5207\u5f00\u7ed3\u3002\u4e3a\u4e9a\u5386\u514b\u65af\u5de5\u4f5c\u3002\u5f3a\u884c\u89e3\u5f00\u4e00\u4e2a\u7ed3\u662f\u5f88\u56f0\u96be\u7684\u3002\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5c0f\u5206\u5b50\u6765\u8bf4\uff0c\u4ece\u4e00\u5f00\u59cb\u5c31\u963b\u6b62\u5b83\u88ab\u675f\u7f1a\u8d77\u6765\u53ef\u80fd\u8981\u5bb9\u6613\u5f97\u591a\u3002\u53ea\u9700\u7ed1\u5b9a\u5230\u9700\u8981\u5faa\u73af\u901a\u8fc7\u7684\u90e8\u5206\u6216\u9700\u8981\u5f2f\u66f2\u4ee5\u5141\u8bb8\u5176\u5faa\u73af\u901a\u8fc7\u7684\u90e8\u5206\u3002\u4f46\u662f\u5f53 RNA \u5f00\u59cb\u88ab\u6d88\u5316\u65f6\uff0c\u4f60\u9700\u8981\u653e\u624b\u3002\nOTOH\uff0c\u6211\u662f\u7a0b\u5e8f\u5458\uff0c\u800c\u4e0d\u662f\u751f\u7269\u5316\u5b66\u5bb6\u3002\u6240\u4ee5\u628a\u8fd9\u4e2a\u548c\u51e0\u7c92\u76d0\u4e00\u8d77\u5403\u3002\u5bf9\u4e8e\u6709\u5173\u5f52\u56e0\u4ee3\u7406\u4ef7\u503c\u7684\u6709\u7528\uff08\u5982\u679c\u590d\u6742\uff09\u8ba8\u8bba\uff0c\u6211\u5f3a\u70c8\u63a8\u8350\u60a8\u7684\u90bb\u5c45\u4e39\u5c3c\u5c14\u00b7\u4e39\u5c3c\u7279 (Daniel Dennett) \u7684\u201c\u6545\u610f\u7acb\u573a\u201d\u3002\u8ff7\u4eba\u3002\u6574\u4ef6\u4e8b\u542c\u8d77\u6765\u50cf\u662f\u5728\u8bf4\u5783\u573e\u8bdd\u3002 \u201c\u600e\u4e48\u4e86\uff0c\u54df\uff1f\u4f60\u7684\u57fa\u56e0\u7ec4\u6709\u7ed3\u5417\uff1f\u201d\u5475\u5475 \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u56de\u7b54\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u9488\u5bf9\u75c5\u6bd2\u5417\uff0c\u7b54\u6848\u662f\u201c\u53ef\u80fd\u662f\u201d\u3002\u6700\u8fd1\u51fa\u73b0\u4e86\u6bcf\u4e2a\u4eba\u6700\u559c\u6b22\u7684\u75c5\u6bd2\u7684\u521d\u6b65\u5de5\u4f5c\u3002 SARS-COV-2 \u75c5\u6bd2\u5305\u542b\u4e00\u4e2a\u201c\u5047\u7ed3\u201dRNA \u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u88ab\u8ba4\u4e3a\u662f\u75c5\u6bd2\u57fa\u56e0\u8868\u8fbe\u7684\u542f\u52a8\u5b50\u3002\u81f3\u5c11\u6709\u4e00\u4e2a\u7814\u7a76\u5c0f\u7ec4\u901a\u8fc7\u7b5b\u9009\u8fd9\u79cd\u7ed3\u6784\u5e76\u53d1\u73b0\u4e00\u79cd\u53ef\u4ee5\u6291\u5236\u7ec6\u80de\u57f9\u517b\u4e2d\u75c5\u6bd2\u590d\u5236\u7684\u6c1f\u55b9\u8bfa\u916e\u7c7b\u547d\u4e2d\uff0c\u8bc1\u660e\u4e86\u4e00\u4e9b\u521d\u6b65\u6210\u529f\u3002\u7531\u4e8e\u5176\u4ed6\u51a0\u72b6\u75c5\u6bd2\u5305\u542b\u8fd9\u6837\u7684\u7ed3\u6784\uff0c\u56e0\u6b64\u8fd9\u79cd\u7b56\u7565\u53ef\u80fd\u6709\u52a9\u4e8e\u4ea7\u751f\u5e7f\u8c31\u6297\u75c5\u6bd2\u836f\u7269\u3002\u8bf7\u53c2\u9605\uff1ahttps://www.pnas.org/content/118/26/e2023051118 \u4f60\u4f1a\u8ba4\u4e3a RNA \u62d3\u6251\u5f02\u6784\u9176\u4f1a\u9762\u4e34\u8fdb\u5316\u538b\u529b\u6765\u89e3\u5f00\u8fd9\u79cd\u7279\u6b8a\u7684\u7ed3 \u5728\u8fd9\u4e2a\u6d4f\u89c8\u5668\u4e2d\u4fdd\u5b58\u6211\u7684\u540d\u5b57\u3001\u7535\u5b50\u90ae\u4ef6\u548c\u7f51\u7ad9\u4e0b\u6b21\u6211\u8bc4\u8bba\u3002", "note_en": "The current pandemic has made everyone think a lot more about viruses than they ever had any desire to, but they\u2019re a constant background to our lives \u2013 and to the lives of pretty much every living creature. Humans have their viruses, other mammals have theirs (with occasional catastrophic overlaps), and birds, reptiles, and fish all have their own as well. Worms, ocean sponges, mollusks, insects \u2013 they all have their suite of viruses that infect them, all the way down to the phages that attack bacteria. Plants of all kinds have their own viral load as well. This is what things look like after a couple of billion years of evolutionary competition; viruses are too successful at what they do to not be everywhere.\n We\u2019ve also all had to learn a lot more than we ever wanted to about our defense mechanisms against these things, and I wanted to highlight an odd feature of one of those today, as seen in  this paper. When you\u2019re infected with an RNA virus, one of the common counterattacks is through RNAse enzymes, which attempt to break down the foreign sequences. They break down a lot of our own RNA molecules as well, of course \u2013 many types of RNA have a rather short half-life in the cell, and if you need them to last longer, you have to work in some special features.\n Viruses have long since stumbled onto those sorts of trick as well, of course: an RNA virus whose genetic material isn\u2019t degraded so quickly by host defenses has an obvious advantage. One of the things that dodges RNAse activity is for the RNA molecule itself to be oddly shaped and knotted. These sequences (exoribonuclease-resistant RNAs, or xrRNAs) have been elaborated over the years to the point that some viruses use them both as protection and as a means to have host RNAse enzymes directed to places where the RNA needs to be cut anyway! Viruses travel light. Any work that can be offloaded onto the host cell generally is.\n The flaviviruses were the first family seen to be taking advantage of these effects (although they\u2019ve since been noticed in other types of viruses as well). That one\u2019s pretty high-profile, though: yellow fever, Zika, chikungunya and dengue are all caused by pathogens in this group. Zika, for example, has an interesting knotted structure in one region of its RNA that causes a whole range of incompletely broken-down RNA species to form when the host cell RNAses try to digest it. These things pile up inside the cell and start disrupting all sorts of other cellular processes in turn (such as the ones that respond to viral attack!) making for a more successful infection.\n You always have to guard your thinking about these things, of course. Our brains have a bias towards imputing agency to things \u2013 it\u2019s how we model behavior of threats like animals (including other humans), and it\u2019s a valuable heuristic indeed. But it also makes us think that Zeus or whoever is trying to zap us with lightning bolts, that hurricanes steer into godless dens of sinners that deserved it anyway, and that the reason the NMR sample changer dropped three hours worth of tubes onto the floor last night is because the robot hates you and wants your experiments to fail. Viruses are not planning out their strategies. They mutate and wander and stumble and putz around randomly until something works a bit better to make Moar Virus, and then that Moar Virus change, whatever the hell it was, gradually becomes more common in the population. We\u2019re seeing the end result of who knows how many epochs of such mutations, all done under the pressure of host organism counterattacks, so it looks pretty impressive by now. The fact that we don\u2019t see the untold, unknowable number of misfires also helps. It\u2019s the same strategy that astrologers and fortunetellers use on purpose: make the most out of your successes and sweep all the failures out of sight. If at first you don\u2019t succeed, destroy all evidence that you even tried. Virus success is obvious and rises quickly to the top; virus failures vanish.\n The paper linked above looks at one of the knots in Zika viruses, by the high-tech means of attaching chemical handles to each end of the knot and capturing those in optical traps. This allows you to pull on the ends in a very controlled fashion and to get a profile of the unraveling as it takes place on a single RNA molecule. Here\u2019s what they find:\n By measuring the extension of the xrRNA as its structure changed, we identified intermediates in the folding and deduced their structures. We found that the core of the native fold was very resistant to mechanical unfolding, but achieving this extreme resistance required a specific sequence of steps in the folding: formation first of a three-helix junction, then threading of the 5\u2032 end into a cleft in this junction and stabilization by tertiary contacts, before closure of the ring around the threaded 5\u2032 end by a PK.\n  So when we say that there\u2019s a knot in the RNA, that is exactly what\u2019s going on, and these knots \u2013 like the ones you\u2019d tie with rope \u2013 have a particular topology and a particular series of steps to get them tied correctly. The structure of this one is shown in schematic at right, and you can see that 5\u2032 end stuck back in through that cleft. The RNAse enzymes obviously don\u2019t quite know what to make of this, since many of them start digesting from the 5\u2032 end and run smack into the knot. What this paper found, though, is that all knots are not created equal. It appears that just forming any old knot is insufficient by itself to fight off the RNAses, but this Zika one has much high mechanical resistance to being pulled apart than usual, and that\u2019s the key feature. The authors are planning to test this idea with RNA knots from other viruses. Perhaps in another few million years an RNAse will show up that will be able to deal with these things, and things will move on.\n If I had to pick one thing about cell biology from my undergraduate education \u2013 heck, my graduate education \u2013 that has utterly changed over the years, it would be the wild functional and structural variety of RNA molecules that have been uncovered. RNAs in general can form a bewildering number of structures, and only a fool would think that we\u2019ve come to the end of them. And there are surely useful things that we could make that nature has never quite gotten around to finding a use for, either!\n  Would these knots could be the target of a small molecule, forcing them to \u201cunknot\u201d and making them weak to RNAse ?\n  While there is certainly a lot of interest in trying to develop small molecule therapeutics that target RNA structures, most efforts tend to focus on stabilizing, rather than destabilizing (or \u201cunknotting\u201d) RNA structure in question. In a broad sense, trying to destabilize a stable RNA structure with a small molecule can be tricky, since by doing so you\u2019re likely going to disrupt the small molecule binding site itself. The unbound RNA may then just refold into the knot structure anyway. So what you really need is a small molecule that both recognizes the knot structure and stabilizes a different structure that somehow renders the RNA vulnerable to RNAses.\n Of course, there are potentially other ways to design small molecules to bind to knotted RNA structures that may be therapeutically useful, and I\u2019m sure researchers are hard at work trying to do just that.\n  I\u2019d wonder about making some kind of \u201cknife\u201d (enzymatic?) to slice through the knot. Worked for Alex.\n  Forcing a knot to be untied is difficult. But it might be a lot easier for a small molecule to prevent it from being tied in the first place. Just bind to the part that needs to loop through or the part that needs to flex to allow it to loop through. But you need to let go when the RNA starts being digested.\n OTOH, I\u2019m a programmer, not a biochemist. So take this with a few grains of salt.\n  For a useful (if complex) discussion on the value of ascribing agency, I highly recommend \u201cThe Intentional Stance\u201d by your somewhat-neighbor Daniel Dennett .\n  Fascinating. The whole thing sounds like trash talking. \u201cWhat up, yo? Got knots in your genome?\u201d Ha ha\n    To answer to the question, can we target viruses this way, the answer is \u201cpossibly yes\u201d. Initial work has recently appeared with everyone\u2019s favorite virus.\n The SARS-COV-2 virus contains a \u201cpseudoknot\u201d RNA structure that has been implicated as a promoter of viral gene expression. At least one research group has demonstrated some initial success by screening this structure and finding a fluoroquinolone-type hit that can inhibit viral replication in cell culture. Since other corona viruses contain such a structure, then this strategy might be useful to generate broad-spectrum antivirals. See:  https://www.pnas.org/content/118/26/e2023051118\n    You would think that RNA topoisomerases would be under evolutionary pressure to unfuck this particular kind of knot\n   Save my name, email, and website in this browser for the next time I comment.", "posttime": "2021-08-08 23:52:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75c5\u6bd2,viral", "title": "\u75c5\u6bd2\u7ed3", "title_en": "Viral Knots", "transed": 1, "url": "https://blogs.sciencemag.org/pipeline/archives/2021/08/06/viral-knots", "via": "", "real_tags": ["\u75c5\u6bd2", "viral"]}, {"category": "", "categoryclass": "", "imagename": "c4d1188ed3e742f866090ff6a2747638.jpg", "infoid": 1072134, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u5168\u65b0\u7684\u641c\u7d22\u5f15\u64ce\u67b6\u6784\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\uff1f\u8c01\u80fd\u6bd4 Algolia \u7684\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6280\u672f\u5b98 Julien Lemoine \u66f4\u80fd\u63cf\u8ff0\u641c\u7d22\u7684\u672a\u6765\u3002\u8fd9\u662f\u8be5\u7cfb\u5217\u7684\u7b2c\u4e00\u7bc7\u6587\u7ae0\u3002\u641c\u7d22\u5f15\u64ce\uff0c\u66f4\u666e\u904d\u7684\u4fe1\u606f\u68c0\u7d22\u7cfb\u7edf\uff0c\u5728\u5f53\u4eca\u51e0\u4e4e\u6240\u6709\u7684\u6280\u672f\u6808\u4e2d\u90fd\u53d1\u6325\u7740\u6838\u5fc3\u4f5c\u7528\u3002\u4fe1\u606f\u68c0\u7d22\u59cb\u4e8e\u8ba1\u7b97\u673a\u79d1\u5b66\u4e4b\u521d\u3002\u968f\u7740\u6587\u672c\u68c0\u7d22\u4f1a\u8bae (TREC) \u7684\u63a8\u51fa\uff0c\u7814\u7a76\u5728 90 \u5e74\u4ee3\u521d\u52a0\u901f\u3002\u81eaTREC\u4ee5\u6765\uff0c\u7ecf\u8fc730\u591a\u5e74\u7684\u6f14\u53d8\uff0c\u641c\u7d22\u5f15\u64ce\u4e0d\u65ad\u53d1\u5c55\u58ee\u5927\uff0c\u5e26\u6765\u4e86\u65b0\u7684\u6311\u6218\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u641c\u7d22\u5f15\u64ce\u67b6\u6784\u53d1\u5c55\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u91cc\u7a0b\u7891\u3002\u6211\u4eec\u8fd8\u63cf\u8ff0\u4e86\u8fd9\u4e9b\u67b6\u6784\u4eca\u5929\u9762\u4e34\u7684\u6311\u6218\u3002\u5982\u60a8\u6240\u89c1\uff0c\u6211\u4eec\u5c06\u5f15\u64ce\u5206\u4e3a\u56db\u4e2a\u67b6\u6784\u7c7b\u522b\u3002\u8fd9\u662f\u4e00\u79cd\u7b80\u5316\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u5f15\u64ce\u5177\u6709\u4e0d\u540c\u7684\u67b6\u6784\u7ec4\u5408\u3002\u6211\u4eec\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u8fd9\u4e9b\u67b6\u6784\u7684\u6700\u91cd\u8981\u7279\u5f81\u4e0a\u3002\u5728\u641c\u7d22\u5f15\u64ce\u7684\u65e9\u671f\uff0c\u7b2c\u4e00\u6b21\u5927\u9769\u547d\u662f\u4f7f\u7528\u5012\u6392\u7d22\u5f15\u3002 \u201c\u7d22\u5f15\u201d\u4e00\u8bcd\u6765\u81ea\u60a8\u5728\u4e66\u672b\u627e\u5230\u7684\u7d22\u5f15\uff0c\u5b83\u5c06\u4e00\u4e2a\u8bcd\u4e0e\u5305\u542b\u8be5\u8bcd\u4fe1\u606f\u7684\u4e0d\u540c\u9875\u9762\u76f8\u5173\u8054\u3002\u672c\u8d28\u4e0a\uff0c\u641c\u7d22\u5f15\u64ce\u4e3a\u6bcf\u4e2a\u5355\u8bcd\u6784\u5efa\u4e86\u4e00\u4e2a\u5b57\u5178\uff0c\u5176\u4e2d\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd\uff0c\u5b83\u5b58\u50a8\u548c\u6392\u5e8f\u5305\u542b\u8be5\u5355\u8bcd\u7684\u6587\u6863\u5217\u8868\u3002\u56e0\u6b64\uff0c\u5f53\u6700\u7ec8\u7528\u6237\u4f7f\u7528\u591a\u4e2a\u5355\u8bcd\u6267\u884c\u67e5\u8be2\u65f6\uff0c\u641c\u7d22\u5f15\u64ce\u53ef\u4ee5\u626b\u63cf\u6240\u6709\u5355\u8bcd\uff0c\u8ba1\u7b97\u4ea4\u96c6\uff08\u5305\u542b\u6240\u6709\u5355\u8bcd\u7684\u6587\u6863\uff09\uff0c\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u540d\u3002\u6240\u6709\u641c\u7d22\u5f15\u64ce\u90fd\u9075\u5faa\u7d22\u5f15\u7684\u4e00\u822c\u6982\u5ff5\u3002\u7d22\u5f15\u5f00\u8f9f\u4e86\u4e00\u4e2a\u65b0\u7684\u7814\u7a76\u9886\u57df\uff0c\u5373\u5982\u4f55\u4ee5\u6709\u6548\u7684\u65b9\u5f0f\u8868\u793a\u5012\u6392\u7d22\u5f15\uff08\u7531\u51e0\u4e2a\u5012\u6392\u5217\u8868\u7ec4\u6210\uff09\u3002\u8fd9\u9879\u7814\u7a76\u5bfc\u81f4\u4e86\u591a\u7ec4\u538b\u7f29\u7b97\u6cd5\u6765\u6709\u6548\u5730\u538b\u7f29\u548c\u626b\u63cf\u90a3\u4e9b\u5305\u542b\u8d8a\u6765\u8d8a\u591a\u4fe1\u606f\u7684\u5012\u6392\u5217\u8868\u3002\u5982\u679c\u60a8\u5bf9\u5012\u6392\u5217\u8868\u7684\u8868\u793a\u65b9\u5f0f\u4ee5\u53ca\u53ef\u4ee5\u4f7f\u7528\u7684\u4e0d\u540c\u7b97\u6cd5\u611f\u5174\u8da3\uff0c\u6211\u5efa\u8bae\u60a8\u9605\u8bfb Christopher D. Manning \u6240\u8457\u7684 Introduction to Information Retrieval \u4e00\u4e66\u3002\n\u5728\u8f6f\u4ef6\u67b6\u6784\u65b9\u9762\uff0c\u65e9\u671f\u7684\u641c\u7d22\u5f15\u64ce\u53ef\u4ee5\u6982\u62ec\u4e3a\uff1a \u4e00\u4e2a\u201c\u7d22\u5f15\u8fc7\u7a0b\u201d\uff0c\u5c06\u8bb0\u5f55\u5217\u8868\u8ba1\u7b97\u5e76\u751f\u6210\u4e00\u4e2a\u8868\u793a\u5012\u6392\u7d22\u5f15\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6 \u4e00\u4e2a\u201c\u67e5\u8be2\u5904\u7406\u201d\u641c\u7d22\u8fc7\u7a0b\uff0c\u5c06\u4e8c\u8fdb\u5236\u6587\u4ef6\u89e3\u91ca\u4e3a\u8ba1\u7b97\u7279\u5b9a\u67e5\u8be2\u7684\u5012\u6392\u5217\u8868\u7684\u4ea4\u96c6 \u5728\u8fd9\u4e2a\u9636\u6bb5\u6ca1\u6709\u7f29\u653e\u7684\u6982\u5ff5\u3002\u8fd9\u79cd\u67b6\u6784\u9002\u7528\u4e8e\u5c11\u91cf\u6570\u636e\u3002\u4e0a\u4e16\u7eaa 90 \u5e74\u4ee3\u521d\u671f\u7684\u7f51\u7edc\u6269\u5f20\uff0c\u6570\u636e\u91cf\u8fc5\u901f\u589e\u52a0\uff0c\u9700\u8981\u5bf9\u8fd9\u79cd\u67b6\u6784\u8fdb\u884c\u6269\u5c55\u3002\u5728\u4e92\u8054\u7f51\u7684\u65e9\u671f\uff0c\u7f51\u7ad9\u662f\u5728\u76ee\u5f55\u4e2d\u624b\u52a8\u5217\u51fa\u7684\u3002\u51e0\u5e74\u540e\u5f88\u660e\u663e\uff0c\u624b\u52a8\u5217\u8868\u65e0\u6cd5\u7ee7\u7eed\u5904\u7406\u8d8a\u6765\u8d8a\u591a\u7684\u7f51\u7ad9\uff08\u6839\u636e\u4e92\u8054\u7f51\u5b9e\u65f6\u7edf\u8ba1\uff0c\u7f51\u7ad9\u6570\u91cf\u4ece1993\u5e74\u7684130\u4e2a\u7f51\u7ad9\u53d1\u5c55\u52301995\u5e74\u768423,500\u4e2a\uff09\u3002\u4e8e\u662f\u5f00\u59cb\u4e86\u6700\u6d41\u884c\u7684\u641c\u7d22\u5f15\u64ce\u7528\u4f8b\uff1a\u7f51\u7edc\u641c\u7d22\u5f15\u64ce\u3002 1993 \u5e74\uff0c\u7b2c\u4e00\u4e2a\u7f51\u7edc\u641c\u7d22\u5f15\u64ce\u95ee\u4e16\u3002\u5728 90 \u5e74\u4ee3\u521d\uff0c\u5b83\u4eec\u90fd\u4e0d\u5f97\u4e0d\u5904\u7406\u5927\u91cf\u589e\u52a0\u7684\u6570\u636e\u91cf\u3002 1995 \u5e74\uff0c\u5f53\u6570\u5b57\u8bbe\u5907\u516c\u53f8 (DEC) \u63a8\u51fa Alta Vista \u65f6\uff0c\u5b83\u662f\u4e3a\u4e86\u8bf4\u660e\u4ed6\u4eec\u7684\u591a\u5904\u7406\u5668 64 \u4f4d Alpha \u670d\u52a1\u5668\u7684\u5f3a\u5927\u529f\u80fd\u3002\u5b83\u662f\u7b2c\u4e00\u4e2a\uff08\u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u4e2a\uff09\u5b8c\u5168\u5e76\u884c\u5316\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u80fd\u591f\u7d22\u5f15\u5f53\u65f6\u5217\u51fa\u7684 1000 \u4e07\u4e2a\u7f51\u7ad9\u3002\u60a8\u53ef\u4ee5\u5c06\u6587\u6863\u62c6\u5206\u4e3a N \u4e2a\u8f83\u5c0f\u7684\u6587\u6863\u96c6\uff0c\u800c\u4e0d\u662f\u5bf9\u6240\u6709\u6587\u6863\u4f7f\u7528\u4e00\u4e2a\u5012\u6392\u7d22\u5f15\u3002\u6bcf\u4e2a\u96c6\u5408\u79f0\u4e3a\u4e00\u4e2a\u5206\u7247\uff0c\u5305\u542b\u521d\u59cb\u6587\u6863\u96c6\u7684\u4e00\u4e2a\u5b50\u96c6\u3002\n\u73b0\u5728\u60a8\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\u6240\u6709\u8fd9\u4e9b\u5206\u7247\u7684\u7d22\u5f15\uff0c\u751f\u6210 N \u4e2a\u8f83\u5c0f\u7684\u5012\u6392\u7d22\u5f15\u800c\u4e0d\u662f\u4e00\u4e2a\u5927\u7684\u5012\u6392\u7d22\u5f15\u3002\u6700\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u6bcf\u4e2a\u5206\u7247\u4e2d\u5e76\u884c\u641c\u7d22\uff0c\u751f\u6210 N \u4e2a\u67e5\u8be2\u5e76\u805a\u5408\u7ed3\u679c\u4ee5\u751f\u6210\u7edf\u4e00\u7684\u7ed3\u679c\u96c6\u3002\u5206\u7247\u7684\u5f15\u5165\u4f7f\u641c\u7d22\u5f15\u64ce\u80fd\u591f\u5904\u7406\u5927\u91cf\u6570\u636e\u3002\u5728\u5206\u7247\u7684\u65e9\u671f\uff0c\u5206\u7247\u7684\u6570\u91cf\u4ee5\u53ca\u670d\u52a1\u5668\u7684\u6570\u91cf\u662f\u9884\u5148\u786e\u5b9a\u7684\u3002\u8bb8\u591a\u5b9e\u73b0\u4f7f\u7528\u6570\u5b66\u6563\u5217\u51fd\u6570\u5c06\u4e00\u4e2a\u6587\u6863\u5206\u914d\u7ed9 N \u4e2a\u5206\u7247\u4e4b\u4e00\u3002\u4e00\u4e2a\u6587\u6863\u603b\u662f\u88ab\u5206\u914d\u5230\u540c\u4e00\u4e2a\u5206\u7247\uff0c\u56e0\u6b64\u6c38\u8fdc\u4e0d\u4f1a\u5bfc\u81f4\u5206\u7247\u4e4b\u95f4\u7684\u8bb0\u5f55\u91cd\u590d\u3002\u8de8\u4e0d\u540c\u5206\u7247\uff08\u641c\u7d22\uff0c\u6bcf\u4e2a\u5206\u7247\u4e00\u4e2a\u7ebf\u7a0b\uff09\u7684\u641c\u7d22\u7ed3\u679c\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u901a\u8fc7 N \u4e2a\u7ed3\u679c\u7684\u5feb\u901f\u5408\u5e76\u6700\u7ec8\u786e\u5b9a \u7d22\u5f15\u548c\u641c\u7d22\u9700\u8981\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u8fdb\u884c\u7ed9\u5b9a\u5206\u7247\uff08\u5012\u6392\u7d22\u5f15\u5728\u672c\u5730\u5b58\u50a8\u4e0a\uff09 \uff09\u3002\u6ca1\u6709\u50cf\u5206\u5e03\u5f0f\u63d0\u4ea4\u8fd9\u6837\u7684\u673a\u5236\u5141\u8bb8\u7d22\u5f15\u64cd\u4f5c\u540c\u65f6\u5728\u6240\u6709\u5206\u7247\u4e0a\u53ef\u89c1\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8981\u66f4\u6539\u7d22\u5f15\u7684\u5c5e\u6027\u5217\u8868\uff0c\u6216\u8005\u5982\u679c\u8981\u66f4\u6539\u8bb0\u5f55\u7ed3\u6784\uff0c\u5219\u9700\u8981\u521b\u5efa\u53e6\u4e00\u4e2a\u7d22\u5f15\uff0c\u56e0\u4e3a\u60a8\u65e0\u6cd5\u4ee5\u539f\u5b50\u65b9\u5f0f\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u3002\u5f53\u5408\u5e76\u51fd\u6570\u5fc5\u987b\u5904\u7406\u975e\u4ee3\u6570\u805a\u5408\u65f6\uff0c\u65b0\u7c7b\u578b\u7684\u95ee\u9898\u5c31\u4f1a\u51fa\u73b0\u3002\u4e00\u4e2a\u793a\u4f8b\u662f\u57fa\u4e8e\u5b57\u6bb5\u503c\u6298\u53e0\u7ed3\u679c\uff08\u4f8b\u5982\uff0c\u60a8\u60f3\u8981\u6298\u53e0\u6bcf\u4e2a\u516c\u53f8\u540d\u79f0\u7684\u804c\u4f4d\uff0c\u7136\u540e\u663e\u793a\u6bcf\u4e2a\u7c7b\u522b\u7684\u524d 10 \u4e2a\u804c\u4f4d\u7684\u804c\u4f4d\u677f\uff09\u3002\n\u8fd9\u79cd\u7c7b\u578b\u7684\u67b6\u6784\u5728 90 \u5e74\u4ee3\u751a\u81f3 2000 \u5e74\u4ee3\u521d\u671f\u4f7f\u7528\u8fc7\u3002\u5f53\u7136\uff0c\u5bf9\u8fd9\u4e9b\u67b6\u6784\u8fdb\u884c\u4e86\u5927\u91cf\u6539\u8fdb\u548c\u6539\u8fdb\uff0c\u4ee5\u786e\u4fdd\u5b83\u4eec\u80fd\u591f\u652f\u6301\u8d1f\u8f7d\u3002\u4f8b\u5982\uff0c\u6279\u91cf\u7d22\u5f15\u5f88\u5feb\u88ab\u6570\u636e\u7ed3\u6784\u7684\u589e\u91cf\u6784\u5efa\u53d6\u4ee3\uff0c\u4ee5\u907f\u514d\u5728\u6bcf\u6b21\u901a\u8fc7\u65f6\u91cd\u5efa\u6574\u4e2a\u5012\u6392\u5217\u8868\uff08\u7c7b\u4f3c\u4e8e\u6570\u636e\u5e93\uff09\u3002\u5206\u7247\u662f\u641c\u7d22\u5f15\u64ce\u6269\u5927\u89c4\u6a21\u7684\u5173\u952e\u7ec4\u6210\u90e8\u5206\u3002\u4eca\u5929\uff0c\u9664\u4e86\u8fbe\u5230\u9ad8\u53ef\u7528\u6027\u7684\u5176\u4ed6\u539f\u5219\u5916\uff0c\u5b83\u662f\u6240\u6709\u641c\u7d22\u5f15\u64ce\u67b6\u6784\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u3002\u641c\u7d22\u5f15\u64ce\u9700\u8981\u6269\u5c55\uff0c\u4ee5\u7ba1\u7406\u5927\u91cf\u6570\u636e\u548c\u67e5\u8be2\u6570\u91cf\u3002\u6839\u636e Internet World Stats \u7684\u6570\u636e\uff0c1995 \u5e74\u4e92\u8054\u7f51\u7528\u6237\u53ea\u6709 1600 \u4e07\uff0c\u4f46\u5728 2020 \u5e74\u8fc5\u901f\u589e\u957f\u5230\u8d85\u8fc7 5B\u3002 \u4e0a\u4e00\u8282\u8ba8\u8bba\u4e86\u5982\u4f55\u901a\u8fc7\u5206\u7247\u6765\u7ba1\u7406\u5927\u91cf\u6570\u636e\u3002\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u662f\u5982\u4f55\u7ba1\u7406\u5927\u91cf\u7684\u67e5\u8be2\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u641c\u7d22\u7684\u9ad8\u53ef\u7528\u6027\uff08\u5373\u652f\u6301\u786c\u4ef6\u6545\u969c\uff09\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u5f15\u5165\u5012\u7f6e\u5206\u7247\u7684\u526f\u672c\uff0c\u4ee5\u4fbf\u80fd\u591f\u56de\u7b54\u6765\u81ea\u591a\u53f0\u673a\u5668\u7684\u67e5\u8be2\u3002\u4e00\u822c\u539f\u5219\u5f88\u7b80\u5355\uff1a\u6211\u4eec\u4f7f\u7528\u4e0e\u4ee5\u524d\u76f8\u540c\u7684\u67b6\u6784\uff0c\u4f46\u6211\u4eec\u6709 N \u7ec4\u673a\u5668\u80fd\u591f\u56de\u7b54\u4efb\u4f55\u67e5\u8be2\uff0c\u800c\u4e0d\u662f\u53ea\u6709\u4e00\u7ec4\u673a\u5668\u3002\u6bcf\u7ec4\u673a\u5668\u5305\u542b\u56de\u7b54\u4efb\u4f55\u67e5\u8be2\u7684\u6240\u6709\u5206\u7247\uff0c\u526f\u672c\u7684\u6570\u91cf\u53ef\u4ee5\u6839\u636e\u67e5\u8be2\u91cf\u589e\u52a0\u6216\u51cf\u5c11\u3002\u8fd9\u79cd\u67b6\u6784\u7684\u590d\u6742\u6027\u4e3b\u8981\u5728\u4e8e\u590d\u5236\u903b\u8f91\uff0c\u4e0e\u4e4b\u524d\u7684\u67b6\u6784\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\u548c\u7f3a\u70b9\u3002\u5012\u6392\u7d22\u5f15\u590d\u5236\u7684\u590d\u6742\u6027\u53d6\u51b3\u4e8e\u78c1\u76d8\u4e0a\u6570\u636e\u7ed3\u6784\u7684\u683c\u5f0f\u3002\u5206\u4ee3\u6570\u636e\u7ed3\u6784\u901a\u5e38\u7ecf\u8fc7\u4f18\u5316\u4ee5\u6700\u5c0f\u5316\u4f20\u8f93\u7684\u6570\u636e\u91cf\u3002\u5982\u679c\u60a8\u6709\u5174\u8da3\u4e86\u89e3\u6709\u5173\u78c1\u76d8\u4e0a\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u7ed3\u6784\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u6211\u5efa\u8bae\u60a8\u9605\u8bfb LevelDB \u952e\u503c\u5b58\u50a8\u5185\u90e8\u7ed3\u6784\u7684\u8bf4\u660e\uff1b\u540c\u6837\u7684\u6982\u5ff5\u4e5f\u7ecf\u5e38\u5e94\u7528\u4e8e\u641c\u7d22\u5f15\u64ce\u3002\u5f53\u67b6\u6784\u6258\u7ba1\u5728\u516c\u5171\u4e91\u73af\u5883\u4e2d\u65f6\uff0c\u4e0d\u540c\u7684\u673a\u5668\u7ec4\u5fc5\u987b\u6258\u7ba1\u5728\u4e0d\u540c\u7684\u53ef\u7528\u533a\u4e0a\uff0c\u4ee5\u5b9e\u73b0\u66f4\u597d\u7684\u670d\u52a1\u6c34\u5e73\u76ee\u6807 (SLO)\u3002\u9700\u8981\u8d1f\u8f7d\u5e73\u8861\u5668\u7ec4\u4ef6\u5c06\u67e5\u8be2\u5206\u53d1\u5230\u4e0d\u540c\u7684\u673a\u5668\u7ec4\uff0c\u5e76\u5728\u51fa\u9519\u65f6\u91cd\u8bd5\u3002\u8fd9\u79cd\u57fa\u4e8e\u526f\u672c\u7684\u641c\u7d22\u5f15\u64ce\u67b6\u6784\u4e0e\u524d\u4e00\u4e2a\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u7279\u5f81\uff0c\u4f46\u589e\u52a0\u4e86\uff1a\n\u901a\u8fc7\u6570\u636e\u590d\u5236\u5904\u7406\u65e0\u9650\u91cf\u67e5\u8be2\u7684\u80fd\u529b\uff08\u589e\u52a0\u5bb9\u91cf\u9700\u8981\u65f6\u95f4\uff0c\u901a\u5e38\u9700\u8981\u6570\u5c0f\u65f6\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u4ece\u73b0\u6709\u673a\u5668\u590d\u5236\u5012\u6392\u7d22\u5f15\u3002\u53ea\u6709\u5f53\u53ef\u4ee5\u9884\u671f\u6d41\u91cf\u589e\u52a0\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\uff09\u3002\u5728\u591a\u4f9b\u5e94\u5546\u90e8\u7f72\u4e2d\uff0c\u78c1\u76d8\u4e0a\u6570\u636e\u7ed3\u6784\u7684\u526f\u672c\u901a\u5e38\u88ab\u8f6c\u79fb\u7d22\u5f15\u64cd\u4f5c\u7684\u4e3b/\u526f\u672c\u8bbe\u7f6e\u6240\u53d6\u4ee3\u3002\u4e3b\u5206\u7247\u63a5\u6536\u7d22\u5f15\u64cd\u4f5c\uff0c\u5c06\u5b83\u4eec\u5b58\u50a8\u5728 LOG \u4e2d\u3002 LOG \u7531\u7d22\u5f15\u8fc7\u7a0b\u5728\u672c\u5730\u4f7f\u7528\uff0c\u5e76\u4e14 LOG \u88ab\u590d\u5236\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u4f4d\u7f6e\u3002\u8fd9\u79cd\u8bbe\u7f6e\u7684\u539f\u56e0\u662f\u590d\u5236\u7d22\u5f15\u64cd\u4f5c\u800c\u4e0d\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\u901a\u5e38\u66f4\u5feb\uff0c\u56e0\u4e3a\u5728\u4f20\u8f93\u5927\u578b\u4e8c\u8fdb\u5236\u6587\u4ef6\u65f6\uff0c\u63d0\u4f9b\u5546\u95f4\u5e26\u5bbd\u53ef\u80fd\u662f\u74f6\u9888\u3002\u9274\u4e8e\u641c\u7d22\u7684\u9ad8\u53ef\u7528\u6027\u5bf9\u6240\u6709\u5728\u7ebf\u4e1a\u52a1\u7684\u91cd\u8981\u6027\uff0c\u5728\u4e0d\u5f71\u54cd\u4e1a\u52a1\u7684\u60c5\u51b5\u4e0b\u5bb9\u5fcd\u786c\u4ef6\u6545\u969c\u81f3\u5173\u91cd\u8981\u3002\u67b6\u6784\u5fc5\u987b\u7ba1\u7406\u786c\u4ef6\u6545\u969c\uff0c\u4f7f\u5176\u5bf9\u6700\u7ec8\u7528\u6237\u4fdd\u6301\u900f\u660e\u3002\u524d\u9762\u8ba8\u8bba\u7684\u67b6\u6784\u5f15\u5165\u4e86\u5728\u4e0d\u5f71\u54cd\u641c\u7d22\u80fd\u529b\u7684\u60c5\u51b5\u4e0b\u63a5\u53d7\u786c\u4ef6\u6545\u969c\u7684\u53ef\u80fd\u6027\u3002\u50cf Snapshat \u8fd9\u6837\u7684\u65b0\u7528\u4f8b\u4f7f\u7d22\u5f15\u6210\u4e3a\u7cfb\u7edf\u7684\u5173\u952e\u90e8\u5206\uff1aSnapshot \u7684\u4fe1\u606f\u662f\u77ed\u6682\u7684\uff0c\u9700\u8981\u5feb\u901f\u641c\u7d22\uff0c\u56e0\u6b64\u7d22\u5f15\u4e5f\u9700\u8981\u9ad8\u53ef\u7528\u6027\u3002\u7d22\u5f15\u7684\u9ad8\u53ef\u7528\u6027\u901a\u8fc7\u4e0d\u540c\u7684\u4f53\u7cfb\u7ed3\u6784\u5f15\u5165\u641c\u7d22\u5f15\u64ce\uff0c\u8fd9\u4e9b\u4f53\u7cfb\u7ed3\u6784\u7684\u5171\u540c\u70b9\u662f\u81f3\u5c11\u4e24\u53f0\u673a\u5668\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u5206\u7247\u3002\u6700\u8457\u540d\u7684\u67b6\u6784\u662f Elasticsearch\uff0c\u5b83\u4e8e 2010 \u5e74\u63a8\u51fa\uff0c\u5177\u6709\u641c\u7d22\u548c\u7d22\u5f15\u7684\u9ad8\u53ef\u7528\u6027\u3002 Elasticsearch \u5f15\u5165\u7684\u6700\u91cd\u8981\u7684\u521b\u65b0\u4e0d\u662f\u7d22\u5f15\u7684\u9ad8\u53ef\u7528\u6027\uff1b\u8fd9\u662f\u5f39\u6027\u3002\u5f39\u6027\u662f\u5c06\u673a\u5668\u6dfb\u52a0\u5230\u73b0\u6709\u5b9e\u4f8b\u5e76\u5728\u673a\u5668\u4e4b\u95f4\u79fb\u52a8\u5206\u7247\u7684\u80fd\u529b\u3002\u8fd9\u662f\u641c\u7d22\u5f15\u64ce\u67b6\u6784\u7684\u91cd\u5927\u6f14\u53d8\uff01\u7d22\u5f15\u9ad8\u53ef\u7528\u6027\u7684\u5f15\u5165\u662f\u4e0a\u4e00\u8282\u4e2d\u63cf\u8ff0\u7684\u4e3b/\u526f\u672c\u67b6\u6784\u7684\u6f14\u53d8\u3002\u6bcf\u4e2a\u5206\u7247\u90fd\u6709\u4e00\u4e2a\u4e3b\u5206\u7247\uff0c\u4ece\u800c\u786e\u4fdd\u7d22\u5f15\u4f5c\u4e1a\u548c N \u4e2a\u526f\u672c\u7684\u552f\u4e00\u6392\u5e8f\u3002\u786e\u4fdd\u6bcf\u4e2a\u526f\u672c\u90fd\u4ee5\u76f8\u540c\u7684\u987a\u5e8f\u5904\u7406\u4f5c\u4e1a\u4ee5\u6536\u655b\u5230\u5b8c\u5168\u76f8\u540c\u7684\u72b6\u6001\uff0c\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002\u5047\u8bbe\u6258\u7ba1\u4e3b\u5206\u7247\u7684\u673a\u5668\u505c\u673a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u9886\u5bfc\u9009\u4e3e\u7b97\u6cd5\u5c06\u4e00\u4e2a\u526f\u672c\u9009\u4e3a\u65b0\u7684\u4e3b\u526f\u672c\uff0c\u4ee5\u786e\u4fdd\u5168\u5c40\u4e00\u81f4\u72b6\u6001\u3002\u5f53\u7d22\u5f15\u64cd\u4f5c\u8fdb\u5165\u7cfb\u7edf\u65f6\uff0c\u8def\u7531\u9636\u6bb5\u4f1a\u5c06\u64cd\u4f5c\u8def\u7531\u5230\u6b63\u786e\u7684\u4e3b\u5206\u7247\u3002\u6b64\u8def\u7531\u8fc7\u7a0b\u53ef\u7531\u4e09\u53f0\u673a\u5668\u4e2d\u7684\u4efb\u4f55\u4e00\u53f0\u6267\u884c\uff08\u56e0\u6b64\u60a8\u53ef\u4ee5\u9488\u5bf9\u4efb\u4f55\u673a\u5668\u6267\u884c\u7d22\u5f15\u64cd\u4f5c\uff09\u3002\u4e3b\u5206\u7247\u7684\u7d22\u5f15\u8fc7\u7a0b\u7136\u540e\u5c06\u5728\u6bcf\u4e2a\u5206\u7247\u4e0a\u590d\u5236\u7d22\u5f15\u64cd\u4f5c\uff0c\u4ece\u800c\u5bfc\u81f4\u5728\u4e09\u53f0\u673a\u5668\u4e0a\u5e76\u884c\u5e94\u7528\u7d22\u5f15\u64cd\u4f5c\uff08\u6a21\u5f0f 3\uff09\n\u6a21\u5f0f 3\uff1a\u5728\u4e00\u4e2a\u7d22\u5f15\u6709\u56db\u4e2a\u5206\u7247\u3001\u590d\u5236\u56e0\u5b50\u4e3a 3 \u7684\u60c5\u51b5\u4e0b\uff0c\u5206\u7247 1 \u7684\u7d22\u5f15\u64cd\u4f5c\u793a\u4f8b\u3002\u8d1f\u8f7d\u5747\u8861\u5668\u9009\u62e9\u6bcf\u4e2a\u5206\u7247\u7684\u4e09\u4e2a\u526f\u672c\u4e4b\u4e00\u6765\u6267\u884c\u67e5\u8be2\u3002\u4e09\u4e2a\u526f\u672c\u5141\u8bb8\u6bcf\u79d2\u6bd4\u5355\u4e2a\u5206\u7247\u526f\u672c\u591a\u4e09\u500d\u7684\u67e5\u8be2\u3002\u5728\u6b64\u8bbe\u7f6e\u4e2d\uff0c\u673a\u5668\u5206\u5e03\u5728\u4e24\u4e2a\u53ef\u7528\u533a (AZ) \u4e0a\u3002\u6bcf\u4e2a\u53ef\u7528\u533a\u90fd\u5728\u4e91\u63d0\u4f9b\u5546\u533a\u57df\u5185\u5c3d\u53ef\u80fd\u591a\u7684\u4e0d\u540c\u7269\u7406\u57fa\u7840\u8bbe\u65bd\u4e0a\u8fd0\u884c\u3002\u8fd9\u4e09\u4e2a\u526f\u672c\u7684\u5b58\u50a8\u65b9\u5f0f\u662f\uff0c\u7b2c\u4e00\u4e2a\u526f\u672c 100% \u6258\u7ba1\u5728\u7b2c\u4e00\u4e2a\u53ef\u7528\u533a\u4e0a\uff0c\u7b2c\u4e8c\u4e2a\u526f\u672c 100% \u6258\u7ba1\u5728\u7b2c\u4e8c\u4e2a\u53ef\u7528\u533a\u4e0a\uff0c\u7b2c\u4e09\u4e2a\u526f\u672c\u5728\u4e24\u4e2a\u53ef\u7528\u533a\u4e4b\u95f4\u62c6\u5206\u3002\u6a21\u5f0f 4 \u8bf4\u660e\u4e86\u53d1\u9001\u5230 100% \u6258\u7ba1\u5728\u7b2c\u4e00\u4e2a\u53ef\u7528\u533a\u4e0a\u7684\u526f\u672c\u7684\u4e00\u4e2a\u67e5\u8be2\u3002\u6a21\u5f0f 4\uff1a\u7531\u526f\u672c\u5904\u7406\u7684\u67e5\u8be2\u793a\u4f8b\uff0c\u5b8c\u5168\u6258\u7ba1\u5728\u7b2c\u4e00\u4e2a\u53ef\u7528\u533a\u4e0a \u5728\u6bcf\u53f0\u673a\u5668\u4e0a\uff0c\u7d22\u5f15\u548c\u641c\u7d22\u8fc7\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u672c\u5730\u5b58\u50a8\u7684\u6240\u6709\u5206\u7247\u3002\u5f39\u6027\u6765\u81ea\u5728\u73b0\u6709\u8bbe\u7f6e\u4e2d\u6dfb\u52a0\u548c\u5220\u9664\u673a\u5668\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\u6dfb\u52a0\u4e00\u53f0\u65b0\u673a\u5668\u3002\u7136\u540e\u788e\u7247\u4f1a\u81ea\u52a8\u79fb\u52a8\u5230\u65b0\u673a\u5668\u4e0a\uff0c\u4ee5\u786e\u4fdd\u60a8\u5728\u6bcf\u53f0\u673a\u5668\u4e0a\u5747\u5300\u52a0\u8f7d\u3002\u6839\u636e\u60a8\u7684\u641c\u7d22\u5f15\u64ce\u7684\u5206\u914d\u7b97\u6cd5\uff0c\u60a8\u6700\u7ec8\u53ef\u80fd\u4f1a\u5f97\u5230\u7c7b\u4f3c\u4e8e\u6a21\u5f0f 5 \u7684\u7ed3\u679c\u3002\u5728\u6b64\u67b6\u6784\u4e2d\uff0c\u5206\u7247\u7684\u6570\u91cf\u662f\u9759\u6001\u7684\u3002\u5b9a\u4e49\u5206\u7247\u6570\u91cf\u662f\u914d\u7f6e\u7684\u5173\u952e\u8981\u7d20\uff0c\u56e0\u4e3a\u5b83\u5b9a\u4e49\u4e86\u6269\u5c55\u80fd\u529b\u548c\u57fa\u7840\u6027\u80fd\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5206\u7247\u7684\u6570\u91cf\u4e0d\u8db3\u4ee5\u4f7f\u7528\u6240\u6709\u673a\u5668\u4e0a\u7684\u6240\u6709 CPU \u8d44\u6e90\u3002\u4e0d\u8fc7\uff0c\u60a8\u53ef\u4ee5\u589e\u52a0\u526f\u672c\u6570\u91cf\u4ee5\u652f\u6301\u6bcf\u79d2\u66f4\u591a\u67e5\u8be2\u5e76\u4f7f\u7528\u6240\u6709\u8d44\u6e90\uff0c\u8fd9\u662f\u6269\u5c55\u7684\u6807\u51c6\u65b9\u5f0f\u3002\u4e0d\u8981\u6709\u592a\u591a\u788e\u7247\u4e5f\u5f88\u91cd\u8981\u3002\u76ee\u6807\u662f\u5e76\u884c\u5904\u7406\u6240\u6709\u8fd9\u4e9b\u3002\u5982\u679c\u60a8\u6ca1\u6709\u8db3\u591f\u7684 CPU \u7ebf\u7a0b\u540c\u65f6\u7528\u4e8e\u6240\u6709\u5206\u7247\uff0c\u5219\u4f1a\u5bf9\u60a8\u7684\u54cd\u5e94\u65f6\u95f4\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u3002 Schema 5\uff1a\u5728\u7b2c\u4e8c\u4e2a\u53ef\u7528\u533a\u6dfb\u52a0\u65b0\u673a\u5668\u540e\u7684\u793a\u4f8b\n\u5728\u4fdd\u6301\u6240\u6709\u5206\u7247\u53ef\u7528\u7684\u540c\u65f6\uff0c\u6b64\u67b6\u6784\u53ef\u4ee5\u652f\u6301\u4e24\u79cd\u7c7b\u578b\u7684\u6545\u969c\uff1a \u4e00\u53f0\u673a\u5668\u505c\u673a\u3002\u8fd9\u4e0d\u4f1a\u5f71\u54cd\u7d22\u5f15\u548c\u641c\u7d22\u7684\u80fd\u529b\u3002\u6709\u8db3\u591f\u7684\u526f\u672c\u6765\u786e\u4fdd\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u6267\u884c\u641c\u7d22\u67e5\u8be2\u3002\u9886\u5bfc\u9009\u4e3e\u5c06\u9009\u4e3e\u4e24\u4e2a\u526f\u672c\u4e4b\u4e00\u4f5c\u4e3a\u4e3b\u3002\u552f\u4e00\u7684\u5f71\u54cd\u662f\u51cf\u5c11\u641c\u7d22\u5bb9\u91cf\uff0c\u56e0\u4e3a\u53ef\u7528\u4e8e\u641c\u7d22\u7684 CPU \u7ebf\u7a0b\u8f83\u5c11\u3002 1 \u4e2a AZ \u5df2\u5173\u95ed\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u4ecd\u7136\u53ef\u7528\uff0c\u4f46\u53ef\u6269\u5c55\u5bb9\u91cf\u8f83\u5c0f\u3002\u4e24\u4e2a\u5206\u7247\u7684\u7d22\u5f15\u5c06\u4e0d\u53ef\u7528\uff0c\u56e0\u4e3a\u53ea\u6709\u4e09\u4e2a\u526f\u672c\u4e2d\u7684\u4e00\u4e2a\u4ecd\u7136\u5b58\u5728\uff0c\u8fd9\u4f1a\u963b\u6b62\u9886\u5bfc\u8005\u9009\u4e3e\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u67b6\u6784\u662f\u5f53\u4eca\u641c\u7d22\u67b6\u6784\u4e2d\u6700\u5148\u8fdb\u7684\u6280\u672f\uff0c\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u80fd\u591f\u6839\u636e\u60a8\u914d\u7f6e\u7684\u5206\u7247\u6570\u91cf\u6269\u5c55\u6570\u636e \u6700\u65b0\u4e00\u4ee3\u67b6\u6784\u73b0\u5728\u5df2\u6709\u5341\u591a\u5e74\u7684\u5386\u53f2\u4e86\uff01\u4ece\u90a3\u65f6\u8d77\uff0c\u5feb\u901f\u589e\u957f\u7684\u5e02\u573a\u548c SaaS \u5e94\u7528\u7a0b\u5e8f\u5bf9\u8fd9\u4e9b\u67b6\u6784\u65bd\u52a0\u4e86\u8bb8\u591a\u9650\u5236\u3002\u73b0\u5728\u662f\u4e3a\u672a\u6765\u5341\u5e74\u8bbe\u8ba1\u4e0b\u4e00\u4ee3\u67b6\u6784\u7684\u65f6\u5019\u4e86\uff0c\u89e3\u51b3\u4ee5\u4e0b\u6311\u6218\uff1a \u4ee5\u4e9a\u5206\u949f\u7684\u901f\u5ea6\u6dfb\u52a0/\u5220\u9664\u673a\u5668\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4ece\u73b0\u6709\u5b9e\u4f8b\u4e2d\u6dfb\u52a0/\u5220\u9664\u673a\u5668\u3002\u4f46\u662f\uff0c\u6211\u4eec\u9700\u8981\u66f4\u8fdb\u4e00\u6b65\u652f\u6301\u52a8\u6001\u53ef\u6269\u5c55\u6027\uff1a\u80fd\u591f\u5728\u4e00\u5206\u949f\u5185\u6dfb\u52a0\u6216\u5220\u9664\u673a\u5668\uff0c\u5e76\u4e14\u80fd\u591f\u5728\u65b0\u673a\u5668\u53ef\u7528\u4e4b\u524d\u4e34\u65f6\u5904\u7406\u589e\u52a0\u7684\u6d41\u91cf\uff01\u4eca\u5929\u7684\u641c\u7d22\u5f15\u64ce\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u9700\u8981\u9884\u6d4b\u589e\u957f\uff0c\u5e76\u6269\u5c55\u5176\u57fa\u7840\u8bbe\u65bd\u4ee5\u5e94\u5bf9\u6d41\u91cf\u9ad8\u5cf0\u3002\u5168\u9762\u7684\u52a8\u6001\u53ef\u6269\u5c55\u6027\u5c06\u4f7f\u6bcf\u4e2a\u4eba\u90fd\u66f4\u52a0\u7ecf\u6d4e\u9ad8\u6548\uff0c\u540c\u65f6\u91ca\u653e\u641c\u7d22\u5f15\u64ce\u7684\u65b0\u521b\u610f\u7528\u6cd5\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u5927\u578b\u5e02\u573a\u63d0\u51fa\u4e86\u5229\u7528\u641c\u7d22\u5f15\u64ce\u5728\u5176\u5546\u5e97\u8fdb\u884c\u9650\u65f6\u62a2\u8d2d\u7684\u60f3\u6cd5\uff1a\u5ba2\u6237\u5fc5\u987b\u627e\u5230\u9690\u85cf\u5728\u5176\u5e9e\u5927\u76ee\u5f55\u4e2d\u7684\u5ec9\u4ef7\u4ea7\u54c1\u3002\u60a8\u53ef\u4ee5\u60f3\u8c61\u4ed6\u4eec\u7684\u641c\u7d22\u5f15\u64ce\u5728\u5411\u6570\u767e\u4e07\u7528\u6237\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u540e\u7acb\u5373\u6536\u5230\u5927\u91cf\u67e5\u8be2\uff0c\u4ed6\u4eec\u4e0a\u6b21\u6d3b\u52a8\u4ea7\u751f\u7684\u6d41\u91cf\u662f\u5e73\u5747\u6bcf\u65e5\u6d41\u91cf\u7684 160 \u500d\u3002\u4f46\u6bcf\u6b21\u641c\u7d22\u4e8b\u4ef6\u4f20\u64ad\u5f00\u6765\u65f6\u90fd\u4f1a\u53d1\u751f\u540c\u6837\u7684\u60c5\u51b5\uff0c\u8fd9\u901a\u5e38\u662f\u4e0d\u53ef\u80fd\u63d0\u524d\u8ba1\u5212\u7684\u3002\n\u4e00\u4e2a\u52a8\u6001\u6570\u91cf\u7684\u5206\u7247\u3002\u5206\u7247\u7684\u6570\u91cf\u662f\u6027\u80fd\u548c\u6269\u5c55\u80fd\u529b\u7684\u5173\u952e\u56e0\u7d20\u3002\u4e3a\u4e86\u8fbe\u5230\u6700\u4f73\u6548\u679c\uff0c\u8fd9\u4e2a\u6570\u5b57\u9700\u8981\u7ecf\u5e38\u6539\u53d8\u3002\u4e0b\u4e00\u4ee3\u641c\u7d22\u5f15\u64ce\u67b6\u6784\u5c06\u5141\u8bb8\u60a8\u52a8\u6001\u66f4\u6539\u6b64\u6570\u5b57\u3002\u5b83\u8fd8\u9700\u8981\u66f4\u8fdb\u4e00\u6b65\uff0c\u5f15\u64ce\u4f1a\u81ea\u52a8\u8c03\u6574\u6b64\u6570\u5b57\u4ee5\u786e\u4fdd\u60a8\u59cb\u7ec8\u62e5\u6709\u6700\u4f73\u6027\u80fd\u548c\u6269\u5c55\u80fd\u529b\u3002\u5206\u79bb\u641c\u7d22\u548c\u7d22\u5f15\u3002\u5728\u67e5\u8be2\u91cf\u548c\u6570\u636e\u91cf\u65b9\u9762\u8fdb\u884c\u6269\u5c55\u662f\u641c\u7d22\u5f15\u64ce\u6700\u82db\u523b\u7684\u60c5\u51b5\u3002\u5bf9\u4e8e\u5e02\u573a\u7b49\u8bb8\u591a\u7528\u4f8b\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u60a8\u4e3a\u6bcf\u4e2a\u526f\u672c\u6267\u884c\u7d22\u5f15\uff0c\u57fa\u7840\u8bbe\u65bd\u7684\u6210\u672c\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u8fc7\u9ad8\u3002\u589e\u52a0\u641c\u7d22\u6216\u7d22\u5f15\u5bb9\u91cf\u4f1a\u5f71\u54cd\u73b0\u6709\u673a\u5668\u7684\u8d44\u6e90\u6d88\u8017\u3002\u4f8b\u5982\uff0c\u5f53\u7cfb\u7edf\u5df2\u7ecf\u52a0\u8f7d\u65f6\uff0c\u6269\u5c55\u5176\u4e2d\u4e00\u4e2a\u5b50\u7cfb\u7edf\u4f1a\u4f7f\u6574\u4e2a\u7cfb\u7edf\u5d29\u6e83\u3002\u4e0b\u4e00\u4ee3\u5c06\u5177\u6709\u641c\u7d22\u548c\u7d22\u5f15\u7684\u9ad8\u53ef\u7528\u6027\uff0c\u540c\u65f6\u5bf9\u6bcf\u4e2a\u5206\u7247\u4ec5\u6267\u884c\u4e00\u6b21\u7d22\u5f15\u5de5\u4f5c\u3002\u5b83\u5c06\u5206\u522b\u7f29\u653e\u7d22\u5f15\u548c\u641c\u7d22\uff0c\u907f\u514d\u7d22\u5f15\u5bf9\u641c\u7d22\u7684\u4efb\u4f55\u8d1f\u9762\u5f71\u54cd\u3002\u5229\u7528\u7f51\u7edc\u5e26\u5bbd\u7684\u6f14\u8fdb\u3002\u5341\u5e74\u524d\uff0c\u673a\u5668\u4e4b\u95f4\u62e5\u6709 1Gbps \u7684\u94fe\u8def\u662f\u5e38\u6001\u3002\u4eca\u5929\uff0c\u60a8\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u4e91\u63d0\u4f9b\u5546\u4e2d\u9ad8\u8fbe 100 Gbps \u7684\u7f51\u7edc\u94fe\u63a5\uff0c\u8fd9\u5c06\u8d8a\u6765\u8d8a\u6210\u4e3a\u5e38\u6001\u3002\u4e0e\u5e26\u5bbd\u4e0a\u7684 100 \u500d\u56e0\u7d20\u76f8\u6bd4\uff0cCPU \u548c\u5b58\u50a8\u7684\u6539\u8fdb\u5728\u540c\u4e00\u65f6\u671f\u53d7\u5230\u7684\u9650\u5236\u8981\u5927\u5f97\u591a\uff01\u5229\u7528\u8fd9\u79cd\u7f51\u7edc\u67b6\u6784\u9700\u8981\u5177\u6709\u66f4\u591a\u5e76\u884c\u5316\u7684\u975e\u5e38\u4e0d\u540c\u7684\u6570\u636e\u4f20\u8f93\u4f7f\u7528\u3002\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u56e0\u7d20\uff0c\u9700\u8981\u6210\u4e3a\u641c\u7d22\u5f15\u64ce\u67b6\u6784\u7684\u6838\u5fc3\u624d\u80fd\u6709\u6548\u6269\u5c55\u3002\u672c\u673a\u591a\u79df\u6237\u4f18\u5316\u3002 SaaS \u5e94\u7528\u7a0b\u5e8f\u5728\u5355\u4e2a\u7d22\u5f15\u4e2d\u6258\u7ba1\u591a\u4e2a\u7528\u6237\u7684\u60c5\u51b5\u5f88\u666e\u904d\u3002\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u8bbe\u7f6e\u4e13\u7528\u7d22\u5f15\u7684\u6210\u672c\u592a\u9ad8\u4e86\u3002\u867d\u7136\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7b56\u7565\uff0c\u4f46\u4eca\u5929\u51e0\u4e4e\u4e0d\u53ef\u80fd\u4e3a\u6700\u5927\u7684\u7528\u6237\u63d0\u4f9b\u6709\u4fdd\u8bc1\u7684\u6027\u80fd\u3002\u65b0\u7684\u641c\u7d22\u67b6\u6784\u9700\u8981\u4e0d\u65ad\u53d1\u5c55\uff0c\u4ee5\u786e\u4fdd\u4ece\u903b\u8f91\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u4ecd\u7136\u53ef\u4ee5\u663e\u793a\u4e3a\u4e00\u4e2a\u7d22\u5f15\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6700\u91cd\u8981\u7684\u5ba2\u6237\u4ecd\u7136\u62e5\u6709\u4e13\u7528\u7684\u5206\u7247\u548c\u8d44\u6e90\uff0c\u4ee5\u786e\u4fdd\u6709\u4fdd\u8bc1\u7684\u6027\u80fd\u5e76\u907f\u514d\u6765\u81ea\u5176\u4ed6\u5ba2\u6237\u7684\u4efb\u4f55\u5f71\u54cd\u3002\u6211\u4eec\u5728 2019 \u5e74\u5f00\u59cb\u5f00\u53d1\u4e0b\u4e00\u4ee3\u67b6\u6784\u65f6\u786e\u5b9a\u4e86\u8fd9\u4e94\u4e2a\u72ec\u7279\u7684\u6311\u6218\u3002\u6211\u4eec\u5f00\u53d1\u4e86\u4e00\u4e2a\u72ec\u7279\u7684\u67b6\u6784\u6765\u89e3\u51b3\u8fd9\u4e94\u4e2a\u6311\u6218\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u6279\u5ba2\u6237\u6b63\u5728\u6d4b\u8bd5\u5b83\u3002\u4ee5\u4e0b\u6587\u7ae0\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u8be5\u67b6\u6784\u7684\u5de5\u4f5c\u539f\u7406\u4ee5\u53ca\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u8fd9\u4e94\u4e2a\u72ec\u7279\u7684\u641c\u7d22\u6311\u6218\u3002", "note_en": "What would a totally new search engine architecture look like? Who better than  Julien Lemoine, Co-founder &amp; CTO of  Algolia, to describe what the future of search will look like. This is the first article in a series.\n  Search engines, and more generally, information retrieval systems, play a central role in almost all of today\u2019s technical stacks. Information retrieval started in the beginning of computer science. Research accelerated in the early 90s with the introduction of the Text REtrieval Conference (TREC). After more than 30 years of evolution since TREC, search engines continue to grow and evolve, leading to new challenges.\n In this article, we look at some key milestones in the evolution of search engine architecture. We also describe the challenges those architectures face today. As you\u2019ll see, we grouped the engines into four architecture categories. This is a simplification, as there are in reality a lot of different engines with various mix of architectures. We did this to focus our attention on the most important characteristics of those architectures.\n  In the early days of search engines, the first big revolution was the use of  inverted indexes . The word \u201cindex\u201d comes from the index that you find at the end of books, which associates a word with the different pages that contain information about the word.\n Essentially, a search engine builds a dictionary of every word, where, for each word, it stores and sorts the list of documents that contain the word. Thus, when an end user performs a query with multiple words, the search engine can scan all the words, compute the  intersection  (documents that contain all the words), and rank them.\n All search engines follow this general concept of indexing. Indexing opened a new area of research on how to represent inverted indexes (composed of several inverted lists) in an efficient way. This research led to multiple sets of compression algorithms to efficiently compress and scan those inverted lists containing more and more information.\n If you\u2019re interested in the way inverted lists are represented, and the different algorithms that can be used, I recommend reading the book   Introduction to Information Retrieval  by Christopher D. Manning.\n In terms of software architecture, search engines in the early days could be summarized as:\n One \u201cindexing process\u201d taking the list of records to compute and producing a binary file representing the inverted index\n One \u201cquery processing\u201d search process interpreting the binary file to compute the intersection of inverted lists for a particular query\n   There was no concept of scaling at this stage. This architecture worked well for small amounts of data. The web expansion in the early 90s, where the volume of data increased rapidly, required a scaling of this architecture.\n  In the early days of the internet, websites were listed manually in a directory. It became obvious after a few years that a manual list could not continue to deal with the increasing number of websites (according to   internet live stats , the number of websites evolved from 130 websites in 1993, to 23,500 in 1995). Thus began the most popular use case for search engines: web search engines.\n In 1993, the first web search engines were introduced. They all had to handle a massive increase in the volume of data in the early 90s. In 1995, when Alta Vista was introduced by Digital Equipment Corporation (DEC), it was to illustrate the power of their multi-processor 64-bit Alpha servers. It was one of the first, if not the first, fully parallelized search engine able to index the 10M websites that were listed at the time.\n  Instead of having one inverted index with all the documents, you can split the documents in N smaller sets of documents. Each set is called a  shard  and contains a subset of the initial document set.\n Now you can run the  indexing  of all those shards in parallel, producing N smaller inverted indices instead of one big inverted index.\n Finally, you can  search  in each shard in parallel, producing N queries and aggregating the results to produce the unified result set.\n   The introduction of sharding enabled search engines to treat large volumes of data. In the early days of sharding, the number of shards, and by extension the number of servers, were fixed in advance. Many implementations used a mathematical hashing function to allocate one document to one of the N shards. A document was always allocated to the same shard and therefore will never lead to a duplication of records between the shards.\n  A distributed computation of the search results across the different shards (searching, one thread per shard), finalized by a fast merge of the N results\n  Indexing and searching need to be on the same machine for a given shard (inverted indexes are on local storage).\n There are no mechanisms like a distributed commit allowing an indexing operation to be visible on all shards at the same time. For example, if you want to change the list of attributes that you index, or if you want to change your record structure, you will need to create another index, as you cannot do those operations atomically.\n New types of problems crop up when the merge function has to deal with non-algebraic aggregation. An example is collapsing results based on field values (for example, a job board where you want to collapse jobs per company name, and then display the top 10 jobs for each category).\n This type of architecture was used during the 90s and even early 2000s. Of course, a lot of refinements and improvements were applied to those architectures to make sure they were able to support the load. For example, batch indexing was quickly replaced by incremental builds of data structures to avoid rebuilding the whole inverted list at each pass (similar to databases). Sharding is a key component of search engines to make them scale. Today, it\u2019s part of all search engine architectures in addition to other principles to reach  high availability , which we describe in the next section.\n  Search engines need to scale, to manage large volumes of data and numbers of queries. According to   Internet World Stats , there were only 16M internet users in 1995, but it grew quickly to reach more than 5B in 2020.\n The previous section discussed how to manage large volumes of data with sharding. The next problem is how to manage the large volume of  queries,  and the associated high-availability of search (that is, supporting hardware failures).\n Solving this problem requires introducing replicas of the inverted shards to be able to answer a query from multiple sets of machines. The general principle is straightforward: we use the same architecture as before, but we have N groups of machines able to answer any query instead of having only one group of machines. Each group of machines contains all the shards to answer any query and the number of replicas can grow or shrink depending on the volume of queries.\n The complexity of such architecture is mainly in the replication logic and has the same properties and drawbacks as the previous architecture. The complexity of the replication of inverted indices depends on the format of the data structure on disk. Generational data structures are often optimized to minimize the amount of data transferred. If you\u2019re interested in learning more about the different types of data structure on disk, I recommend reading   the description of the LevelDB key value store internals ; the same concept is often applied to search engines.\n When the architecture is hosted in a public cloud environment, the different groups of machines must be hosted on different availability zones to target a better service level objective (SLO). A load balancer component is required to distribute the queries to the different sets of machines, and to retry on error.\n This replica-based search engine architecture has exactly the same characteristics as the previous one, with the addition of:\n Capacity to handle an infinite amount of queries via replications of the data (increasing capacity takes time, usually hours as it requires copying the inverted indices from the existing machines. This is a good solution only when the increase of traffic can be anticipated.).\n In a multi-provider deployment, the copy of the on-disk data-structure is often replaced by a primary/replicas setup where the indexing operations are transfered. The primary shard receives indexing operations, stores them in a LOG. The LOG is consumed locally by the indexing process and the LOG is replicated to one or several locations. The reason for this setup is that it\u2019s usually faster to replicate the indexing operations instead of the binary files, as the inter-provider bandwidth can be the bottleneck when transferring large binary files.\n  Given the importance of high-availability of search for all online businesses, it\u2019s crucial to tolerate hardware failure without any business impact. Architectures must manage hardware failure so that it remains transparent to the end user.\n The previously discussed architecture introduced the possibility to accept hardware failure without impacting the ability to search. New use cases like Snapshat make indexing a critical piece of the system: Snapshot\u2019s information is ephemeral and needs to be searchable quickly, so the indexing also requires high availability. High availability of indexing was introduced to search engines via different architectures that all have in common that at least two machines can build one shard. The most famous architecture is Elasticsearch, introduced in 2010 with high availability of search and indexing. The most significant innovation Elasticsearch introduced was not the high availability of indexing; it was the elasticity. Elasticity is the ability to add machines to an existing instance and move shards between machines. It was a significant evolution of search engine architectures!\n The introduction of high availability of indexing is an evolution of the primary/replicas architecture described in the previous section. Each shard has one primary, thus ensuring a unique ordering of indexing jobs and N replicas. It\u2019s important to ensure that each replica will process the jobs in the same order to converge on the exact same state.\n Suppose the machine hosting the primary shard is down. In that case, one replica is elected as the new primary via a  leader election algorithm  to ensure a globally consistent state.\n   When an indexing operation comes to the system, a routing phase routes the operation to the correct primary shard. This routing process can be performed by any one of the three machines (so you can target any machine to perform the indexing operation). The indexing process of the primary shard will then replicate the indexing operation on every shard, resulting in the application of the indexing operation on three machines in parallel (schema 3)\n  Schema 3: Example of an indexing operation for the shard 1 in the case of one index with four shards, a replication factor of three.\n A load balancer selects one of the three copies of each shard to perform the query. The three copies allow three times more queries per second than with a single copy of the shard. In this setup, the machines are spread over two availability zones (AZ). Each AZ runs on as many different physical infrastructures as possible inside a cloud-provider region. The three copies are stored in a way where the first copy is 100% hosted on the first AZ, the second copy is 100% hosted on the second AZ, and the third copy is split between the two AZ. Schema 4 illustrates one query sent to the copy that is 100% hosted on the first AZ.\n   Schema 4: Example of a query processed by the replica, hosted fully on the first AZ\n On each machine, the indexing and the search processes can access all the shards stored locally. The elasticity comes from adding and removing machines to an existing setup. For example, it\u2019s possible to add a new machine to the previous example. The shards would then automatically be moved to the new machine to ensure you have an even-loaded spread on each machine. Depending on the allocation algorithm of your search engine, you can end up with a result similar to schema 5.\n The number of shards is static in this architecture. Defining the number of shards is a critical element of your configuration, as it defines the ability to scale and your underlying performance. In this example, the number of shards is not big enough to use all the CPU resources on all machines. Still, you can increase the number of replicas to support more queries per second and use all resources, which is the standard way to scale.\n It\u2019s also important not to have too many shards. The goal is to process all of them in parallel. If you do not have enough CPU threads for all shards at the same time, it will negatively impact your response time.\n  Schema 5: Example after the addition of a new machine in the second availability zone\n There are two types of failures that this architecture can support while keeping all shards available:\n One machine is down. This would have no impact on the ability to index and search. There are enough replicas to ensure we can still perform a search query. The leader election will elect one of the two replicas as master. The only impact would be to reduce the search capacity because fewer CPU threads are available for search.\n One AZ is down. In this case, the search would still be available with less capacity to scale. Indexing would be unavailable for two shards as only one of the three copies remains, which prevents a leader election.\n This type of architecture is today\u2019s state of the art in search architecture, with the following characteristics:\n Ability to scale in terms of data depending on the number of shards you configured\n  The latest generation of architecture is now more than ten years old! Since then, fast-growing marketplaces and SaaS applications have put many constraints on those architectures. It\u2019s now time to design the next generation of architecture for the next ten years, solving the following challenges:\n Sub-minute addition/removal of machines . We already know how to  add/remove machines from an existing instance. However, we need to go one step further to support dynamic scalability: the ability to add or remove machines in under a minute and the ability to temporarily handle the increased traffic before the new machine is available! Search engines today are more than ever required to anticipate growth, and scale their infrastructure for spikes of traffic. Total dynamic scalability will allow everyone to be more cost efficient while unlocking new creative usage of search engines. For example, one big marketplace presented the idea of a flash sale on their store leveraging the search engine: customers have to find a cheap product hidden in their large catalogue. You can imagine the flood of queries their search engine received just after they sent an email to millions of users, their last event generated 160 times more traffic than their average daily traffic. But the same happens every time some search event goes viral, which is usually impossible to plan for in advance.\n A dynamic number of shards . The number of shards is a critical factor of performance and ability to scale. To be optimum, this number would need to change often. The next generation of search engine architectures will allow you to change this number dynamically. It will also need to go further, where the engine tunes this number automatically to ensure you always have the optimum performance and ability to scale.\n Separation of search and indexing . Scaling both in terms of volume of queries and volume of data is the most demanding situation for a search engine. It\u2019s a problem for many use cases like marketplaces. In such a situation, the cost of infrastructure can quickly become prohibitive if you perform the indexing for each replica. Increasing the search or indexing capacity impacts the resource consumption of the existing machines. For example, when the system is already loaded, scaling one of the subsystems can make the whole system collapse. The next generation will have high availability of search and indexing while doing only a one-time indexing job for each shard. It will scale indexing and search separately, avoiding any negative impact of indexing on search.\n Leveraging the evolution of network bandwidth . Having a 1Gbps link between machines was the norm ten years ago. Today, you have access to up to 100 Gbps network links in a public cloud provider, and it will become more and more the norm. The CPU and storage improvements were much more limited in the same period than the 100X factor on the bandwidth! Leveraging such network architecture requires a very different data transfer usage with more parallelization. It\u2019s an essential factor that needs to be the core of the search engine architecture to scale efficiently.\n Native multi-tenant optimization . It\u2019s widespread for SaaS applications to host multiple users inside a single index. It would be way too expensive to have a dedicated index for each customer. While this is a great strategy, it\u2019s today pretty much impossible to deliver guaranteed performance for the biggest users. The new search architecture needs to evolve to make sure it can still  appear to be  one index from a logical perspective. Still, the most significant customers have dedicated shards and resources to ensure guaranteed performance and avoid any impacts from other customers.\n We identified those five unique challenges in 2019 when we started the work on our next-generation architecture. We&#39;ve developed a unique architecture aimed at solving those five challenges, and we have our first customers testing it. The following articles will give more details about how this architecture works and how we solve those five unique challenges of search.", "posttime": "2021-08-08 23:51:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u67b6\u6784,search,\u7d22\u5f15", "title": "\u641c\u7d22\u5f15\u64ce\u67b6\u6784\u7684\u6f14\u53d8\u2014\u2014Algolia \u641c\u7d22\u67b6\u6784\u7b2c 1 \u90e8\u5206", "title_en": "Evolution of Search Engines Architecture \u2013 Algolia Search Architecture Part 1", "transed": 1, "url": "http://highscalability.com/blog/2021/8/2/evolution-of-search-engines-architecture-algolia-new-search.html", "via": "", "real_tags": ["\u67b6\u6784", "search", "\u7d22\u5f15"]}, {"category": "", "categoryclass": "", "imagename": "944471e55080967c42772c2e81498ebe.jpeg", "infoid": 1072131, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u6ca1\u6709\u60f3\u8fc7\u4e9a\u9a6c\u900a\u4e0a\u4fbf\u5b9c\u7684\u6742\u724c\u4ea7\u54c1\u5982\u4f55\u80fd\u83b7\u5f97\u6570\u767e\u4e2a\u751a\u81f3\u6570\u5343\u4e2a\u8fd1\u4e4e\u5b8c\u7f8e\u7684\u661f\u7ea7\u8bc4\u5206\uff0c\u800c\u53ea\u6709\u5c11\u6570\u8d1f\u9762\u8bc4\u8bba\uff1f\u8fd9\u662f\u4e00\u79cd\u65b9\u6cd5\uff1a\u4e00\u4e9b\u5356\u5bb6\u8054\u7cfb\u4e0d\u6ee1\u610f\u7684\u4e70\u5bb6\u4fee\u6539\u6216\u5220\u9664\u4ed6\u4eec\u7684\u8d1f\u9762\u8bc4\u8bba\uff0c\u4ee5\u6362\u53d6\u9000\u6b3e\u6216\u793c\u54c1\u5361\u3002\u968f\u7740\u5fc3\u6000\u4e0d\u6ee1\u7684\u8d2d\u7269\u8005\u51cf\u5c11\uff0c\u6574\u4f53\u5e73\u5747\u661f\u7ea7\u4f1a\u4e0a\u5347\u3002\u901a\u8fc7\u4e9a\u9a6c\u900a\u8fd0\u9001\u4ea7\u54c1\u7684\u5356\u5bb6\u4e0d\u5e94\u8be5\u63a5\u89e6\u4e9a\u9a6c\u900a\u5b98\u65b9\u6e20\u9053\u4ee5\u5916\u7684\u5ba2\u6237\u2014\u2014\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u8fdd\u53cd\u4e86\u4ed6\u4eec\u5728\u96f6\u552e\u5e73\u53f0\u4e0a\u540c\u610f\u7684\u6761\u6b3e\u3002\u4eca\u5e74 3 \u6708\uff0c\u7ebd\u7ea6\u4eba\u51ef\u745f\u7433\u00b7\u65af\u79d1\u7279 (Katherine Scott) \u6839\u636e\u8fd1 1,000 \u6761\u4e9a\u9a6c\u900a\u5bf9\u8be5\u4ea7\u54c1\u7684\u70ed\u70c8\u8bc4\u8bba\u6311\u9009\u4e86\u4e00\u6b3e\u7528\u4e8e\u70f9\u996a\u7684\u55b7\u6cb9\u74f6\uff0c\u8be5\u4ea7\u54c1\u7684\u5e73\u5747\u8bc4\u5206\u4e3a 4.5 \u661f\u3002\u5979\u8bf4\uff0c\u5f53 10 \u7f8e\u5143\u7684\u55b7\u96fe\u5668\u5230\u8fbe\u65f6\uff0c\u5979\u53d1\u73b0\u8be5\u7269\u54c1\u5e76\u6ca1\u6709\u50cf\u5ba3\u4f20\u7684\u90a3\u6837\u5de5\u4f5c\uff1a\u5b83\u4ea7\u751f\u7684\u4e0d\u662f\u96fe\u6c14\uff0c\u800c\u662f\u4e00\u80a1\u6cb9\u6d41\u3002 \u201c\u8fd9\u5c31\u50cf\u4e00\u628a Super Soaker \u67aa\u800c\u4e0d\u662f\u55b7\u6f06\u7f50\uff0c\u8fd9\u8fdd\u80cc\u4e86\u4ea7\u54c1\u7684\u76ee\u7684\uff0c\u201d\u5979\u8bf4\u3002\u5979\u7559\u4e0b\u4e86\u8d1f\u9762\u8bc4\u8bba\u3002\u4e00\u5468\u540e\uff0cScott \u5973\u58eb\u6536\u5230\u4e00\u5c01\u81ea\u79f0\u6765\u81ea\u55b7\u6cb9\u673a\u54c1\u724c Auxtun \u5ba2\u6237\u670d\u52a1\u56e2\u961f\u7684\u7535\u5b50\u90ae\u4ef6\u2014\u2014\u6211\u5df2\u67e5\u770b\u8fc7\u8be5\u4fe1\u4ef6\u3002 \u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u5c06\u5411\u60a8\u6536\u53d6 $ + \u7a0e\u6b3e\uff08\u5982\u679c\u9002\u7528\uff09\u3002\u60a8\u53ef\u4ee5\u968f\u65f6\u5728\u5ba2\u6237\u4e2d\u5fc3\u66f4\u6539\u60a8\u7684\u8ba1\u8d39\u504f\u597d\u6216\u81f4\u7535\u5ba2\u6237\u670d\u52a1\u3002\u5982\u679c\u8d39\u7387\u6216\u6761\u6b3e\u53d1\u751f\u4efb\u4f55\u53d8\u5316\uff0c\u60a8\u5c06\u63d0\u524d\u6536\u5230\u901a\u77e5\u3002\u60a8\u53ef\u4ee5\u968f\u65f6\u81f4\u7535\u5ba2\u6237\u670d\u52a1\u90e8\u53d6\u6d88\u8ba2\u9605\u3002", "note_en": "Ever wonder how cheap, no-name products on Amazon can amass hundreds, sometimes thousands, of nearly perfect star ratings, with just a handful of negative reviews?\n  Here\u2019s one way: Some sellers are reaching out to unhappy buyers to revise or delete their negative reviews, in exchange for refunds or gift cards. With fewer disgruntled shoppers, the overall average star rating rises.\n  Sellers who ship products via Amazon aren\u2019t supposed to reach out to customers outside of Amazon\u2019s official channel\u2014in fact, it\u2019s a violation of the terms they agree to on the retail platform.\n  In March, New Yorker Katherine Scott picked out an oil spray bottle for cooking, based on nearly 1,000 glowing Amazon reviews of the product, which had a 4.5-star rating average. When the $10 sprayer arrived, she found the item didn\u2019t work as advertised: Instead of a mist, it produced a stream of oil, she said. \u201cIt was like a Super Soaker gun instead of a spray-paint can, which defeats the purpose of the product,\u201d she said. She left a negative review.\n  A week later, Ms. Scott received an email from someone claiming to be from the customer-service team of the oil sprayer\u2019s brand, Auxtun\u2014correspondence which I have reviewed.\n  You will be charged $  + tax (if applicable) for The Wall Street Journal. You may change your billing preferences at any time in the Customer Center or call  Customer Service. You will be notified in advance of any changes in rate or terms. You may cancel your subscription at anytime by calling  Customer Service.", "posttime": "2021-08-08 23:50:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amazon,\u4e9a\u9a6c\u900a,\u7559\u4e0b,customers,\u4ea7\u54c1", "title": "\u5f53\u4e9a\u9a6c\u900a\u5ba2\u6237\u7559\u4e0b\u8d1f\u9762\u8bc4\u8bba\u65f6\uff0c\u4e00\u4e9b\u5356\u5bb6\u4f1a\u8ffd\u6355\u4ed6\u4eec", "title_en": "When Amazon Customers Leave Negative Reviews, Some Sellers Hunt Them Down", "transed": 1, "url": "https://www.wsj.com/articles/when-amazon-customers-leave-negative-reviews-some-sellers-hunt-them-down-11628420400", "via": "", "real_tags": ["amazon", "\u4e9a\u9a6c\u900a", "\u7559\u4e0b", "customers", "\u4ea7\u54c1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072130, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u7f51\u7ad9\u9700\u8981\u542f\u7528 Cookie \u624d\u80fd\u8fd0\u884c\u3002\u8bf7\u786e\u4fdd Cookie \u5df2\u6253\u5f00\uff0c\u7136\u540e\u91cd\u65b0\u8bbf\u95ee\u6240\u9700\u7684\u9875\u9762\u3002", "note_en": "This site requires Cookies to be enabled to function. Please ensure Cookies are  turned on and then re-visit the desired page.", "posttime": "2021-08-08 23:50:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "press,immunity,cookie", "title": "\u5bf9 Covid-19 \u7684\u5929\u7136\u514d\u75ab\u529b\u6301\u4e45\u4e14\u6301\u4e45 \u2013 Cell Press Study", "title_en": "Natural immunity to Covid-19 is durable and persistent \u2013 Cell Press Study", "transed": 1, "url": "https://www.cell.com/cell-reports-medicine/fulltext/S2666-3791(21)00203-2", "via": "", "real_tags": ["press", "immunity", "cookie"]}, {"category": "", "categoryclass": "", "imagename": "4f08dd109f823cd034f75fa25c97c149.jpg", "infoid": 1072128, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u5b87\u822a\u5c40\u6700\u65b0\u7684\u706b\u661f\u63a2\u6d4b\u5668\u5468\u4e94\u9996\u6b21\u5c1d\u8bd5\u91c7\u96c6\u5ca9\u77f3\u6837\u672c\uff0c\u6700\u7ec8\u5c06\u5176\u5e26\u56de\u5730\u7403\u3002 \u201c\u6bc5\u529b\u201d\u53f7\u706b\u661f\u8f66\u94bb\u8fdb\u4e86\u5730\u7403 Jezero \u9668\u77f3\u5751\u7684\u5e95\u90e8\uff0c\u4ece\u5e73\u5766\u7684\u5ca9\u77f3\u677f\u4e2d\u63d0\u53d6\u4e86\u4e00\u4e2a\u624b\u6307\u5927\u5c0f\u7684\u4e1c\u897f\u3002\u8be5\u673a\u6784\u5468\u4e94\u8868\u793a\uff0c\u94bb\u5934\u4f3c\u4e4e\u6309\u9884\u671f\u5de5\u4f5c\uff0c\u4f46\u4f3c\u4e4e\u6ca1\u6709\u5ca9\u77f3\u8fdb\u5165\u6837\u54c1\u7ba1\u3002 \u201c\u867d\u7136\u8fd9\u4e0d\u662f\u6211\u4eec\u5e0c\u671b\u7684\u2018\u4e00\u6746\u8fdb\u6d1e\u2019\uff0c\u4f46\u5f00\u8f9f\u65b0\u5929\u5730\u603b\u662f\u5b58\u5728\u98ce\u9669\uff0c\u201d\u7f8e\u56fd\u5b87\u822a\u5c40\u5c40\u957f\u6258\u9a6c\u65af\u00b7\u7956\u5e03\u81e3\u8bf4\u3002\u7f8e\u56fd\u5b87\u822a\u5c40\u9879\u76ee\u79d1\u5b66\u5bb6\u80af\u00b7\u6cd5\u5229\u8bf4\uff0c\u4e0b\u4e00\u6b65\u5c06\u4f7f\u7528\u5b89\u88c5\u5728\u4e95\u4e0a\u7684\u76f8\u673a\u68c0\u67e5\u6d1e\u5185\u201c\u770b\u770b\u90a3\u91cc\u6709\u4ec0\u4e48\u201d\u3002\u4ed6\u8bf4\u4ed6\u4eec\u53ef\u80fd\u4f1a\u770b\u5230\u7834\u788e\u7684\u5ca9\u82af\uff0c\u6216\u8005\u53ef\u80fd\u4f1a\u53d1\u73b0\u6837\u54c1\u5df2\u7ecf\u53d8\u6210\u4e86\u6c99\u5b50\u3002 \u201c\u5ca9\u77f3\u7279\u6027\u53ef\u80fd\u4e0e\u6211\u4eec\u9884\u671f\u7684\u4e0d\u540c\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u8fd9\u6709\u70b9\u4ee4\u4eba\u6cae\u4e27\uff0c\u56e0\u4e3a\u8fd9\u6574\u4e2a\u590d\u6742\u7684\u673a\u5668\u8fd0\u8f6c\u826f\u597d\uff0c\u5de5\u7a0b\u8fd0\u8f6c\u826f\u597d\uff0c\u4f46\u706b\u661f\u4f3c\u4e4e\u6ca1\u6709\u5408\u4f5c\uff0c\u201d\u6cd5\u5229\u8bf4\uff0c\u5e76\u8865\u5145\u8bf4\u4ed6\u4e0d\u8ba4\u4e3a\u6545\u969c\u662f\u4e00\u4e2a\u957f\u671f\u95ee\u9898\u3002 \u201c\u6211\u4eec\u4f1a\u575a\u6301\u7684\u3002\u201d NASA \u7684\u76ee\u6807\u662f\u5728\u7ba1\u4e2d\u6536\u96c6\u591a\u8fbe 31 \u4e2a\u6837\u672c\uff0c\u5e76\u5c06\u5b83\u4eec\u85cf\u8d77\u6765\u4ee5\u5728\u5927\u7ea6\u5341\u5e74\u5185\u63d0\u53d6\u3002\u8ba1\u5212\u8981\u6c42\u5728 2030 \u5e74\u4ee3\u521d\u4e0e\u6b27\u6d32\u822a\u5929\u5c40\u7684\u53e6\u4e00\u9879\u4efb\u52a1\u4e2d\u5c06\u6837\u672c\u5e26\u5230\u5730\u7403\u3002 \u00a9 2021 \u7f8e\u8054\u793e\u3002\u7248\u6743\u6240\u6709\u3002\u672a\u7ecf\u8bb8\u53ef\uff0c\u4e0d\u5f97\u51fa\u7248\u3001\u4f20\u64ad\u3001\u6539\u5199\u6216\u91cd\u65b0\u5206\u53d1\u672c\u6750\u6599\u3002\u5f15\u6587\uff1a\u706b\u661f\u63a2\u6d4b\u5668\u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u83b7\u53d6\u5ca9\u77f3\u6837\u672c\uff082021 \u5e74\uff0c8 \u6708 7 \u65e5\uff09\u65f6\u7a7a\u7a7a\u5982\u4e5f\uff0c\u53d6\u81ea https://phys.org/news/2021-08-mars-rover-1st-sample.html \u672c\u6587\u6863\u53d7\u7248\u6743\u4fdd\u62a4\u3002\u9664\u4e86\u51fa\u4e8e\u79c1\u4eba\u5b66\u4e60\u6216\u7814\u7a76\u76ee\u7684\u7684\u4efb\u4f55\u516c\u5e73\u4ea4\u6613\u5916\uff0c\u672a\u7ecf\u4e66\u9762\u8bb8\u53ef\uff0c\u4e0d\u5f97\u590d\u5236\u4efb\u4f55\u90e8\u5206\u3002\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002", "note_en": "NASA&#39;s newest Mars rover came up empty Friday in its first attempt to pick up a rock sample to eventually be brought back to Earth.    The rover Perseverance drilled into the floor of the planet&#39;s Jezero Crater to extract a finger-sized   from slabs of flat rocks. The drill seemed to work as intended, but it appeared no rock made it into the sample tube, the agency said Friday.\n    &#34;While this is not the &#39;hole-in-one&#39; we hoped for, there is always risk with breaking new ground,&#34; said NASA&#39;s   chief Thomas Zurbuchen.\n  The next step will be using a camera mounted on a   to inspect inside the hole &#34;and see what&#39;s down there,&#34; said NASA project scientist Ken Farley. He said they might see the broken rock core, or might discover the sample had turned to sand. &#34;The rock properties might be different than we expected,&#34; he said.\n   &#34;It&#39;s a bit deflating because this whole complicated piece of machinery worked fine, the engineering worked just fine, but it seems Mars didn&#39;t cooperate,&#34; Farley said, adding that he didn&#39;t see the glitch as a long-term problem. &#34;We will persevere.&#34;\n  NASA aims to collect up to 31 samples in tubes and stash them for pickup in about a decade. Plans call for the samples to be brought to Earth in the early 2030s in another mission with the European Space Agency.        \u00a9 2021 The Associated Press. All rights reserved. This material may not be published, broadcast, rewritten or redistributed without permission.\n   Citation: Mars rover comes up empty in 1st try at getting rock sample (2021, August 7) retrieved 8 August 2021 from https://phys.org/news/2021-08-mars-rover-1st-sample.html\n  This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no part may be reproduced without the written permission. The content is provided for information purposes only.", "posttime": "2021-08-08 23:48:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u706b\u661f,\u83b7\u53d6,rover,\u5ca9\u77f3", "title": "\u706b\u661f\u63a2\u6d4b\u5668\u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u83b7\u53d6\u5ca9\u77f3\u6837\u672c\u65f6\u7a7a\u7a7a\u5982\u4e5f", "title_en": "Mars rover comes up empty in first try at getting rock sample", "transed": 1, "url": "https://phys.org/news/2021-08-mars-rover-1st-sample.html", "via": "", "real_tags": ["\u706b\u661f", "\u83b7\u53d6", "rover", "\u5ca9\u77f3"]}, {"category": "", "categoryclass": "", "imagename": "3b8b3d9ea5618079b1e3621d8e2c69f7.jpg", "infoid": 1072127, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5173\u4e8e\u6570\u5b57\u5316\u8f6c\u578b\u7684\u8ff7\u601d\u4e4b\u4e00\u662f\uff0c\u4e00\u5207\u90fd\u4e0e\u5229\u7528\u6280\u672f\u6709\u5173\u3002\u4e0d\u662f\u3002\u4e3a\u4e86\u53d6\u5f97\u6210\u529f\uff0c\u6570\u5b57\u5316\u8f6c\u578b\u672c\u8d28\u4e0a\u9700\u8981\u5e76\u4f9d\u8d56\u4e8e\u591a\u6837\u6027\u3002\u4eba\u5de5\u667a\u80fd (AI) \u662f\u4eba\u7c7b\u667a\u80fd\u7684\u7ed3\u679c\uff0c\u7531\u5176\u5de8\u5927\u7684\u624d\u80fd\u5b9e\u73b0\uff0c\u4f46\u4e5f\u5bb9\u6613\u53d7\u5230\u5176\u5c40\u9650\u6027\u7684\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u7ec4\u7ec7\u548c\u56e2\u961f\u5fc5\u987b\u5c06\u591a\u6837\u6027\u653e\u5728\u9996\u4f4d\uff0c\u5e76\u8d85\u8d8a\u4f20\u7edf\u610f\u4e49\u8fdb\u884c\u601d\u8003\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u591a\u6837\u6027\u56f4\u7ed5\u7740\u4e09\u4e2a\u5173\u952e\u652f\u67f1\u3002\u4eba\u662f\u4eba\u5de5\u667a\u80fd\u6700\u91cd\u8981\u7684\u90e8\u5206\uff1b\u4e8b\u5b9e\u662f\u4eba\u7c7b\u521b\u9020\u4e86\u4eba\u5de5\u667a\u80fd\u3002\u4eba\u7684\u591a\u6837\u6027\u2014\u2014\u521b\u5efa\u4eba\u5de5\u667a\u80fd\u7b97\u6cd5\u7684\u51b3\u7b56\u8005\u56e2\u961f\u2014\u2014\u5fc5\u987b\u53cd\u6620\u4e00\u822c\u4eba\u7fa4\u7684\u591a\u6837\u6027\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u786e\u4fdd\u5973\u6027\u5728\u4eba\u5de5\u667a\u80fd\u548c\u6280\u672f\u89d2\u8272\u4e2d\u7684\u673a\u4f1a\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u5305\u62ec\u6027\u522b\u3001\u79cd\u65cf\u3001\u6c11\u65cf\u3001\u6280\u80fd\u3001\u7ecf\u9a8c\u3001\u5730\u7406\u3001\u6559\u80b2\u3001\u89c2\u70b9\u3001\u5174\u8da3\u7b49\u7684\u5168\u90e8\u7ef4\u5ea6\u3002\u4e3a\u4ec0\u4e48\uff1f\u5f53\u60a8\u6709\u4e0d\u540c\u7684\u56e2\u961f\u5ba1\u67e5\u548c\u5206\u6790\u6570\u636e\u4ee5\u505a\u51fa\u51b3\u7b56\u65f6\uff0c\u60a8\u53ef\u4ee5\u51cf\u5c11\u4ed6\u4eec\u81ea\u5df1\u7684\u4e2a\u4eba\u548c\u72ec\u7279\u7684\u4eba\u7c7b\u7ecf\u5386\u3001\u7279\u6743\u548c\u9650\u5236\u4f7f\u4ed6\u4eec\u5bf9\u4ed6\u4eba\u7684\u7ecf\u5386\u89c6\u800c\u4e0d\u89c1\u7684\u53ef\u80fd\u6027\u3002\u603b\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u6709\u673a\u4f1a\u5e94\u7528\u4eba\u5de5\u667a\u80fd\u548c\u673a\u5668\u5b66\u4e60\u6765\u63a8\u52a8\u672a\u6765\u5e76\u505a\u597d\u4e8b\u3002\u8fd9\u59cb\u4e8e\u53cd\u6620\u6211\u4eec\u4e16\u754c\u7684\u5168\u9762\u591a\u6837\u6027\u548c\u4e30\u5bcc\u89c2\u70b9\u7684\u591a\u5143\u5316\u56e2\u961f\u3002\u6280\u80fd\u3001\u89c2\u70b9\u3001\u7ecf\u9a8c\u548c\u5730\u57df\u7684\u591a\u6837\u6027\u5728\u6211\u4eec\u7684\u6570\u5b57\u5316\u8f6c\u578b\u4e2d\u53d1\u6325\u4e86\u5173\u952e\u4f5c\u7528\u3002\u5728 Levi Strauss &amp; Co.\uff0c\u6211\u4eec\u4e0d\u65ad\u53d1\u5c55\u7684\u6218\u7565\u548c AI \u56e2\u961f\u4e0d\u4ec5\u4ec5\u5305\u62ec\u6570\u636e\u548c\u673a\u5668\u5b66\u4e60\u79d1\u5b66\u5bb6\u548c\u5de5\u7a0b\u5e08\u3002\u6211\u4eec\u6700\u8fd1\u4ece\u4e16\u754c\u5404\u5730\u7684\u7ec4\u7ec7\u4e2d\u6311\u9009\u4e86\u5458\u5de5\uff0c\u5e76\u6709\u610f\u5f00\u59cb\u57f9\u8bad\u4ee5\u524d\u6ca1\u6709\u7f16\u7801\u6216\u7edf\u8ba1\u7ecf\u9a8c\u7684\u4eba\u3002\u6211\u4eec\u8ba9\u96f6\u552e\u8fd0\u8425\u3001\u914d\u9001\u4e2d\u5fc3\u548c\u4ed3\u5e93\u7684\u4eba\u5458\u8fdb\u884c\u8bbe\u8ba1\u548c\u89c4\u5212\uff0c\u5e76\u8ba9\u4ed6\u4eec\u53c2\u52a0\u6211\u4eec\u6709\u53f2\u4ee5\u6765\u7684\u7b2c\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u8bad\u7ec3\u8425\uff0c\u5229\u7528\u4ed6\u4eec\u7684\u4e13\u4e1a\u96f6\u552e\u6280\u80fd\uff0c\u5e76\u901a\u8fc7\u7f16\u7801\u548c\u7edf\u8ba1\u589e\u5f3a\u4ed6\u4eec\u7684\u80fd\u529b\u3002\u6211\u4eec\u6ca1\u6709\u9650\u5236\u6240\u9700\u7684\u80cc\u666f\uff1b\u6211\u4eec\u53ea\u662f\u5bfb\u627e\u90a3\u4e9b\u597d\u5947\u7684\u95ee\u9898\u89e3\u51b3\u8005\uff0c\u5929\u751f\u5584\u4e8e\u5206\u6790\u5e76\u575a\u6301\u5bfb\u627e\u89e3\u51b3\u4e1a\u52a1\u95ee\u9898\u7684\u5404\u79cd\u65b9\u6cd5\u7684\u4eba\u3002\u73b0\u6709\u7684\u4e13\u5bb6\u96f6\u552e\u6280\u80fd\u548c\u589e\u52a0\u7684\u673a\u5668\u5b66\u4e60\u77e5\u8bc6\u76f8\u7ed3\u5408\uff0c\u610f\u5473\u7740\u4ece\u8be5\u8ba1\u5212\u6bd5\u4e1a\u7684\u5458\u5de5\u73b0\u5728\u5bf9\u4ed6\u4eec\u7684\u5546\u4e1a\u4ef7\u503c\u6709\u4e86\u6709\u610f\u4e49\u7684\u65b0\u89c2\u70b9\u3002\u8fd9\u9879\u96f6\u552e\u884c\u4e1a\u9996\u521b\u7684\u8ba1\u5212\u5e2e\u52a9\u6211\u4eec\u57f9\u517b\u4e86\u4e00\u652f\u624d\u534e\u6a2a\u6ea2\u4e14\u591a\u5143\u5316\u7684\u56e2\u961f\u6210\u5458\u3002\n\u4eba\u5de5\u667a\u80fd\u548c\u673a\u5668\u5b66\u4e60\u80fd\u529b\u53d6\u51b3\u4e8e\u8f93\u5165\u7cfb\u7edf\u7684\u6570\u636e\u3002\u6211\u4eec\u7ecf\u5e38\u5c06\u81ea\u5df1\u9650\u5236\u5728\u4ece\u7ed3\u6784\u5316\u8868\u683c\uff08\u6570\u5b57\u548c\u6570\u5b57\uff09\u7684\u89d2\u5ea6\u8003\u8651\u6570\u636e\uff0c\u4f46\u6570\u636e\u662f\u4efb\u4f55\u53ef\u4ee5\u6570\u5b57\u5316\u7684\u4e1c\u897f\u3002\u6211\u4eec\u516c\u53f8\u8fc7\u53bb 168 \u5e74\u6765\u4e00\u76f4\u751f\u4ea7\u7684\u725b\u4ed4\u88e4\u548c\u5939\u514b\u7684\u6570\u5b57\u56fe\u50cf\u662f\u6570\u636e\u3002\u5ba2\u6237\u670d\u52a1\u5bf9\u8bdd\uff08\u4ec5\u4f7f\u7528\u6743\u9650\u8bb0\u5f55\uff09\u662f\u6570\u636e\u3002\u4eba\u4eec\u5982\u4f55\u5728\u6211\u4eec\u5546\u5e97\u4e2d\u79fb\u52a8\u7684\u70ed\u56fe\u662f\u6570\u636e\u3002\u6211\u4eec\u6d88\u8d39\u8005\u7684\u8bc4\u8bba\u662f\u6570\u636e\u3002\u4eca\u5929\uff0c\u4e00\u5207\u53ef\u4ee5\u6570\u5b57\u5316\u7684\u4e1c\u897f\u90fd\u53d8\u6210\u4e86\u6570\u636e\u3002\u6211\u4eec\u9700\u8981\u62d3\u5bbd\u6211\u4eec\u5bf9\u6570\u636e\u7684\u770b\u6cd5\uff0c\u5e76\u786e\u4fdd\u6211\u4eec\u4e0d\u65ad\u5c06\u6240\u6709\u6570\u636e\u8f93\u5165\u5230\u4eba\u5de5\u667a\u80fd\u5de5\u4f5c\u4e2d\u3002\u5927\u591a\u6570\u9884\u6d4b\u6a21\u578b\u4f7f\u7528\u8fc7\u53bb\u7684\u6570\u636e\u6765\u9884\u6d4b\u672a\u6765\u3002\u4f46\u7531\u4e8e\u670d\u88c5\u884c\u4e1a\u4ecd\u5904\u4e8e\u6570\u5b57\u3001\u6570\u636e\u548c\u4eba\u5de5\u667a\u80fd\u91c7\u7528\u7684\u521d\u671f\u9636\u6bb5\uff0c\u56e0\u6b64\u53c2\u8003\u8fc7\u53bb\u7684\u6570\u636e\u901a\u5e38\u662f\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\u3002\u5728\u65f6\u5c1a\u9886\u57df\uff0c\u6211\u4eec\u671f\u5f85\u9884\u6d4b\u5bf9\u6ca1\u6709\u9500\u552e\u5386\u53f2\u7684\u5168\u65b0\u4ea7\u54c1\u7684\u8d8b\u52bf\u548c\u9700\u6c42\u3002\u6211\u4eec\u600e\u4e48\u505a\uff1f\u6211\u4eec\u4f7f\u7528\u7684\u6570\u636e\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u591a\uff0c\u4f8b\u5982\uff0c\u65b0\u4ea7\u54c1\u7684\u56fe\u50cf\u548c\u6211\u4eec\u8fc7\u53bb\u51e0\u5b63\u4ea7\u54c1\u7684\u6570\u636e\u5e93\u3002\u7136\u540e\u6211\u4eec\u5e94\u7528\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\u6765\u68c0\u6d4b\u8fc7\u53bb\u548c\u65b0\u65f6\u5c1a\u4ea7\u54c1\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u9884\u6d4b\u5bf9\u8fd9\u4e9b\u65b0\u4ea7\u54c1\u7684\u9700\u6c42\u3002\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6bd4\u7ecf\u9a8c\u6216\u76f4\u89c9\u66f4\u51c6\u786e\u7684\u4f30\u8ba1\uff0c\u7528\u6570\u636e\u548c\u4eba\u5de5\u667a\u80fd\u9a71\u52a8\u7684\u9884\u6d4b\u8865\u5145\u4ee5\u524d\u7684\u5b9e\u8df5\u3002\u5728 Levi Strauss &amp; Co.\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528\u6570\u5b57\u56fe\u50cf\u548c 3D \u8d44\u4ea7\u6765\u6a21\u62df\u8863\u670d\u7684\u611f\u89c9\uff0c\u751a\u81f3\u521b\u9020\u65b0\u7684\u65f6\u5c1a\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u6765\u7406\u89e3\u5404\u79cd\u725b\u4ed4\u88e4\u6b3e\u5f0f\u7684\u7ec6\u5fae\u5dee\u522b\uff0c\u5982\u9525\u5f62\u817f\u3001\u80e1\u987b\u56fe\u6848\u548c\u4eff\u65e7\u5916\u89c2\uff0c\u5e76\u68c0\u6d4b\u5f71\u54cd\u60ac\u5782\u3001\u8936\u76b1\u548c\u6298\u75d5\u7684\u7ec4\u4ef6\u7684\u7269\u7406\u7279\u6027\u3002\u7136\u540e\uff0c\u6211\u4eec\u80fd\u591f\u5c06\u5176\u4e0e\u5e02\u573a\u6570\u636e\u76f8\u7ed3\u5408\uff0c\u5728\u5176\u4e2d\u6211\u4eec\u53ef\u4ee5\u5b9a\u5236\u6211\u4eec\u7684\u4ea7\u54c1\u7cfb\u5217\u4ee5\u6ee1\u8db3\u4e0d\u65ad\u53d8\u5316\u7684\u6d88\u8d39\u8005\u9700\u6c42\u548c\u613f\u671b\uff0c\u5e76\u4e13\u6ce8\u4e8e\u6211\u4eec\u54c1\u724c\u5728\u4e0d\u540c\u4eba\u7fa4\u4e2d\u7684\u5305\u5bb9\u6027\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u521b\u9020\u65b0\u6b3e\u5f0f\u7684\u670d\u88c5\uff0c\u540c\u65f6\u59cb\u7ec8\u4fdd\u7559\u4e16\u754c\u4e00\u6d41\u8bbe\u8ba1\u5e08\u7684\u521b\u9020\u529b\u548c\u521b\u65b0\u7cbe\u795e\u3002\u9664\u4e86\u4eba\u548c\u6570\u636e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u786e\u4fdd\u6211\u4eec\u5728\u521b\u5efa\u548c\u751f\u6210\u7b97\u6cd5\u65f6\u4f7f\u7528\u7684\u5de5\u5177\u548c\u6280\u672f\u7684\u591a\u6837\u6027\u3002\u4e00\u4e9b\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u548c\u4ea7\u54c1\u4f7f\u7528\u5206\u7c7b\u6280\u672f\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u6027\u522b\u6216\u79cd\u65cf\u504f\u89c1\u6c38\u4e45\u5316\u3002\u4f8b\u5982\uff0c\u5206\u7c7b\u6280\u672f\u5047\u8bbe\u6027\u522b\u662f\u4e8c\u5143\u7684\uff0c\u5e76\u4e14\u901a\u5e38\u6839\u636e\u5916\u8c8c\u548c\u523b\u677f\u7684\u5047\u8bbe\u5c06\u4eba\u4eec\u6307\u5b9a\u4e3a\u201c\u7537\u6027\u201d\u6216\u201c\u5973\u6027\u201d\uff0c\u8fd9\u610f\u5473\u7740\u6240\u6709\u5176\u4ed6\u5f62\u5f0f\u7684\u6027\u522b\u8ba4\u540c\u90fd\u88ab\u5220\u9664\u4e86\u3002\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u9886\u57df\u5de5\u4f5c\u7684\u6240\u6709\u4eba\uff0c\u5728\u4efb\u4f55\u516c\u53f8\u6216\u884c\u4e1a\uff0c\u90fd\u8981\u9632\u6b62\u504f\u89c1\u548c\u5148\u8fdb\u6280\u672f\uff0c\u4ee5\u6355\u6349\u4eba\u4eec\u751f\u6d3b\u4e2d\u7684\u6240\u6709\u7ec6\u5fae\u5dee\u522b\u548c\u8303\u56f4\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u6570\u636e\u4e2d\u5254\u9664\u79cd\u65cf\uff0c\u4ee5\u5c1d\u8bd5\u5448\u73b0\u7b97\u6cd5\u76f2\u76ee\u7ade\u4e89\uff0c\u540c\u65f6\u4e0d\u65ad\u9632\u6b62\u504f\u89c1\u3002\n\u6211\u4eec\u81f4\u529b\u4e8e\u5b9e\u73b0 AI \u4ea7\u54c1\u548c\u7cfb\u7edf\u7684\u591a\u6837\u6027\uff0c\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u5f00\u6e90\u5de5\u5177\u3002\u5f00\u6e90\u5de5\u5177\u548c\u5e93\u672c\u8d28\u4e0a\u66f4\u52a0\u591a\u6837\u5316\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4f9b\u4e16\u754c\u5404\u5730\u7684\u6bcf\u4e2a\u4eba\u4f7f\u7528\uff0c\u5e76\u4e14\u6765\u81ea\u4e0d\u540c\u80cc\u666f\u548c\u9886\u57df\u7684\u4eba\u4eec\u81f4\u529b\u4e8e\u589e\u5f3a\u548c\u63a8\u8fdb\u5b83\u4eec\uff0c\u4e30\u5bcc\u4ed6\u4eec\u7684\u7ecf\u9a8c\uff0c\u4ece\u800c\u9650\u5236\u504f\u89c1\u3002\u6211\u4eec\u5728 Levi Strauss &amp; Company \u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u6211\u4eec\u7684\u7f8e\u56fd Red Tab \u5fe0\u8bda\u5ea6\u8ba1\u5212\u3002\u5f53\u7c89\u4e1d\u8bbe\u7f6e\u4ed6\u4eec\u7684\u4e2a\u4eba\u8d44\u6599\u65f6\uff0c\u6211\u4eec\u4e0d\u4f1a\u8981\u6c42\u4ed6\u4eec\u9009\u62e9\u6027\u522b\u6216\u8ba9 AI \u7cfb\u7edf\u505a\u51fa\u5047\u8bbe\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u8981\u6c42\u4ed6\u4eec\u9009\u62e9\u81ea\u5df1\u7684\u98ce\u683c\u504f\u597d\uff08\u5973\u6027\u3001\u7537\u6027\u3001\u4e24\u8005\u6216\u4e0d\u77e5\u9053\uff09\uff0c\u4ee5\u5e2e\u52a9\u6211\u4eec\u7684 AI \u7cfb\u7edf\u6784\u5efa\u91cf\u8eab\u5b9a\u5236\u7684\u8d2d\u7269\u4f53\u9a8c\u548c\u66f4\u4e2a\u6027\u5316\u7684\u4ea7\u54c1\u63a8\u8350\u3002\u4eba\u5458\u3001\u6570\u636e\u3001\u6280\u672f\u548c\u5de5\u5177\u7684\u591a\u6837\u6027\u6b63\u5728\u5e2e\u52a9 Levi Strauss &amp; Co. \u5f7b\u5e95\u6539\u53d8\u5176\u4e1a\u52a1\u548c\u6211\u4eec\u7684\u6574\u4e2a\u884c\u4e1a\uff0c\u5c06\u624b\u52a8\u8f6c\u53d8\u4e3a\u81ea\u52a8\u5316\uff0c\u5c06\u6a21\u62df\u8f6c\u53d8\u4e3a\u6570\u5b57\uff0c\u5e76\u5c06\u76f4\u89c2\u8f6c\u53d8\u4e3a\u9884\u6d4b\u3002\u6211\u4eec\u8fd8\u5728\u7ee7\u627f\u516c\u53f8 168 \u5e74\u6765\u4ee3\u8868\u5e73\u7b49\u3001\u6c11\u4e3b\u548c\u5305\u5bb9\u7684\u793e\u4f1a\u4ef7\u503c\u89c2\u3002\u4eba\u5de5\u667a\u80fd\u7684\u591a\u6837\u6027\u662f\u5ef6\u7eed\u8fd9\u4e00\u4f20\u7edf\u5e76\u5851\u9020\u65f6\u5c1a\u672a\u6765\u7684\u6700\u65b0\u673a\u4f1a\u4e4b\u4e00\u3002", "note_en": "One of the myths about digital transformation is that it\u2019s all about harnessing technology. It\u2019s not. To succeed, digital transformation inherently requires and relies on diversity. Artificial intelligence (AI) is the result of human intelligence, enabled by its vast talents and also susceptible to its limitations.\n Therefore, it is imperative for organizations and teams to make diversity a priority and think about it beyond the traditional sense. For me, diversity centers around three key pillars.\n  People are the most important part of artificial intelligence; the fact is that humans create artificial intelligence. The diversity of people \u2014 the team of decision-makers in the creation of AI algorithms \u2014 must reflect the diversity of the general population.\n This goes beyond ensuring opportunities for women in AI and technology roles. In addition, it includes the full dimensions of gender, race, ethnicity, skill set, experience, geography, education, perspectives, interests and more. Why? When you have diverse teams reviewing and analyzing data to make decisions, you mitigate the chances of their own individual and uniquely human experiences, privileges and limitations blinding them to the experiences of others.\n  Collectively, we have an opportunity to apply AI and machine learning to propel the future and do good. That begins with diverse teams of people who reflect the full diversity and rich perspectives of our world.\n  Diversity of skills, perspectives, experiences and geographies has played a key role in our digital transformation. At Levi Strauss &amp; Co., our growing strategy and AI team doesn\u2019t include solely data and machine learning scientists and engineers. We recently tapped employees from across the organization around the world and deliberately set out to train people with no previous experience in coding or statistics. We took people in retail operations, distribution centers and warehouses, and design and planning and put them through our first-ever machine learning bootcamp, building on their expert retail skills and supercharging them with coding and statistics.\n We did not limit the required backgrounds; we simply looked for people who were curious problem solvers, analytical by nature and persistent to look for various ways of approaching business issues. The combination of existing expert retail skills and added machine learning knowledge meant employees who graduated from the program now have meaningful new perspectives on top of their business value. This first-of-its-kind initiative in the retail industry helped us develop a talented and diverse bench of team members.\n  AI and machine learning capabilities are only as good as the data put into the system. We often limit ourselves to thinking of data in terms of structured tables \u2014 numbers and figures \u2014 but data is anything that can be digitized.\n The digital images of the jeans and jackets our company has been producing for the past 168 years are data. The customer service conversations (recorded only with permissions) are data. The heatmaps from how people move in our stores are data. The reviews from our consumers are data. Today, everything that can be digitized becomes data. We need to broaden how we think of data and ensure we constantly feed all data into AI work.\n Most predictive models use data from the past to predict the future. But because the apparel industry is still in the nascent stages of digital, data and AI adoption, having past data to reference is often a common problem. In fashion, we\u2019re looking ahead to predict trends and demand for completely new products, which have no sales history. How do we do that?\n We use more data than ever before, for example, both images of the new products and a database of our products from past seasons. We then apply computer vision algorithms to detect similarity between past and new fashion products, which helps us predict demand for those new products. These applications provide much more accurate estimates than experience or intuition do, supplementing previous practices with data- and AI-powered predictions.\n At Levi Strauss &amp; Co., we also use digital images and 3D assets to simulate how clothes feel and even create new fashion. For example, we train neural networks to understand the nuances around various jean styles like tapered legs, whisker patterns and distressed looks, and detect the physical properties of the components that affect the drapes, folds and creases. We\u2019re then able to combine this with market data, where we can tailor our product collections to meet changing consumer needs and desires and focus on the inclusiveness of our brand across demographics. Furthermore, we use AI to create new styles of apparel while always retaining the creativity and innovation of our world-class designers.\n  In addition to people and data, we need to ensure diversity in the tools and techniques we use in the creation and production of algorithms. Some AI systems and products use classification techniques, which can perpetuate gender or racial bias.\n For example, classification techniques assume gender is binary and commonly assign people as \u201cmale\u201d or \u201cfemale\u201d based on physical appearance and stereotypical assumptions, meaning all other forms of gender identity are erased. That\u2019s a problem, and it\u2019s upon all of us working in this space, in any company or industry, to prevent bias and advance techniques in order to capture all the nuances and ranges in people\u2019s lives. For example, we can take race out of the data to try and render an algorithm race-blind while continuously safeguarding against bias.\n We are committed to diversity in our AI products and systems and, in striving for that, we use open-source tools. Open-source tools and libraries by their nature are more diverse because they are available to everyone around the world and people from all backgrounds and fields work to enhance and advance them, enriching with their experiences and thus limiting bias.\n An example of how we do this at Levi Strauss &amp; Company is with our U.S. Red Tab loyalty program. As fans set up their profiles, we don\u2019t ask them to pick a gender or allow the AI system to make assumptions. Instead, we ask them to pick their style preferences (Women, Men, Both or Don\u2019t Know) in order to help our AI system build tailored shopping experiences and more personalized product recommendations.\n Diversity of people, data, and techniques and tools is helping Levi Strauss &amp; Co. revolutionize its business and our entire industry, transforming manual to automated, analog to digital, and intuitive to predictive. We are also building on the legacy of our company\u2019s social values, which has stood for equality, democracy and inclusiveness for 168 years. Diversity in AI is one of the latest opportunities to continue this legacy and shape the future of fashion.", "posttime": "2021-08-08 23:05:34", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6c\u578b,transformation,\u6570\u636e", "title": "\u6570\u5b57\u5316\u8f6c\u578b\u53d6\u51b3\u4e8e\u591a\u6837\u6027", "title_en": "\n\t\t\t\tDigital transformation depends on diversity\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/08/08/digital-transformation-depends-on-diversity/", "via": "", "real_tags": ["\u8f6c\u578b", "\u6570\u636e"]}]