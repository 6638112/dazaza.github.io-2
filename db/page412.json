[{"category": "", "categoryclass": "", "imagename": "3a9f183ca957ddb2c96eab9d0856164b.jpg", "infoid": 1030269, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u91cc\u6709\u4e00\u4e2a\u4e0d\u53ef\u907f\u514d\u7684\u4e8b\u5b9e\uff1a\u60a8\u6b63\u5728\u5de5\u4f5c\u7684\u8f6f\u4ef6\u9879\u76ee\u6709\u4e00\u4e9b\u6ca1\u4eba\u77e5\u9053\u7684\u7f3a\u9677\u3002\u4e0d\u662f\u4f60\uff0c\u4e0d\u662f\u4f60\u7684\u7528\u6237\uff0c\u4e5f\u4e0d\u662f\u4f60\u56e2\u961f\u4e2d\u7684\u4efb\u4f55\u4eba\u3002\u8fd9\u4e9b\u53ef\u80fd\u662fUI\u4e2d\u7684\u9519\u8bef\u5047\u8bbe\uff0c\u4e5f\u53ef\u80fd\u662f\u4f53\u7cfb\u7ed3\u6784\u4e2d\u6709\u6f0f\u6d1e\u7684\u62bd\u8c61\uff0c\u6216\u8005\u662f\u5bb9\u6613\u51fa\u9519\u7684\u53d1\u5e03\u8fc7\u7a0b\u3002\n\u53ea\u8981\u6709\u8db3\u591f\u7684\u65f6\u95f4\uff0c\u8fd9\u4e9b\u7f3a\u9677\u5c31\u4f1a\u88ab\u53d1\u73b0\u3002\u4f46\u662f\u65f6\u95f4\u5c31\u662f\u91d1\u94b1\u3002\u4f60\u8d8a\u65e9\u53d1\u73b0\u5b83\u4eec\uff0c\u4fee\u7406\u5b83\u4eec\u5c31\u8d8a\u4fbf\u5b9c\u3002\u90a3\u4e48\u4f60\u600e\u4e48\u80fd\u66f4\u5feb\u5730\u53d1\u73b0\u4ed6\u4eec\u5462\uff1f\n\u597d\u6d88\u606f\u662f\uff0c\u4f60\u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5\u6765\u8feb\u4f7f\u95ee\u9898\u6d6e\u51fa\u6c34\u9762\u3002\u4f60\u53ef\u80fd\u5df2\u7ecf\u5728\u505a\u5176\u4e2d\u7684\u4e00\u4e9b\u4e86\u3002\n\u627e\u51fa\u4e00\u90e8\u65e7\u7684\u6216\u4fbf\u5b9c\u7684\u624b\u673a\uff0c\u8bd5\u7740\u5728\u4e0a\u9762\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u4efb\u4f55\u4e3b\u8981\u7684\u6027\u80fd\u74f6\u9888\u90fd\u4f1a\u7a81\u7136\u53d8\u5f97\u660e\u663e\u8d77\u6765\u3002\n\u5047\u8bbe\u60a8\u662fTeam 1\u4e2d\u7684\u65b0\u5f00\u53d1\u4eba\u5458\u3002\u4ece\u60a8\u7684\u5f00\u53d1\u8ba1\u7b97\u673a\u4e2d\u5220\u9664\u9879\u76ee\uff0c\u514b\u9686\u6e90\u4ee3\u7801\u5e76\u4ece\u5934\u5f00\u59cb\u8bbe\u7f6e\u3002\u81ea\u8ff0\u6587\u4ef6\u548c\u8fc7\u65f6\u7684\u5b89\u88c5\u811a\u672c\u4e2d\u7684\u5dee\u8ddd\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u660e\u663e\u3002\n\u5c1d\u8bd5\u6dfb\u52a0\u5bf9\u5b8c\u5168\u4e0d\u540c\u7684\u6570\u636e\u5e93\u7684\u652f\u6301\u3002\u6cc4\u9732\u5230\u6570\u636e\u5c42\u62bd\u8c61\u4e2d\u7684\u5f53\u524d\u6570\u636e\u5e93\u7684\u8be6\u7ec6\u4fe1\u606f\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u663e\u800c\u6613\u89c1\u3002\n\u5c06\u51e0\u4e2a\u5c4f\u5e55\u4ece\u60a8\u7684\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\u79fb\u690d\u5230\u4e0d\u540c\u7684\u5e73\u53f0\u3002\u4f8b\u5982\uff0c\u7f16\u5199\u4e00\u4e2a\u539f\u5c01\u4e0d\u52a8\u5730\u91cd\u7528\u4e1a\u52a1\u5c42\u548c\u6570\u636e\u5c42\u7684\u547d\u4ee4\u884c\u754c\u9762\u3002\u67b6\u6784\u7684\u201c\u5e73\u53f0\u65e0\u5173\u201d\u90e8\u5206\u53ef\u80fd\u5f88\u5feb\u5c31\u4f1a\u663e\u793a\u4e3a\u4efb\u4f55\u4e1c\u897f-\u4f46\u662f\u3002\n\u5f00\u59cb\u6bcf\u5468\u53d1\u5e03\u624b\u673a\u5e94\u7528\u7684\u6d4b\u8bd5\u7248\u3002\u6bcf\u6708\u91ca\u653e\u8fc7\u7a0b\u4e2d\u7684\u75db\u82e6\u90e8\u5206\u5c06\u5f00\u59cb\u53d8\u5f97\u4e0d\u90a3\u4e48\u75db\u82e6\n\u5c06\u60a8\u7684\u8f6f\u4ef6\u4ea4\u5230\u771f\u6b63\u7684\u7528\u6237\u624b\u4e2d\uff0c\u800c\u4e0d\u544a\u8bc9\u4ed6\u4eec\u5982\u4f55\u4f7f\u7528\u3002\u7136\u540e\u4ed4\u7ec6\u89c2\u5bdf\u4ed6\u4eec\u5b9e\u9645\u662f\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u3002\n\u501f\u7528\u4ea4\u4e92\u8bbe\u8ba1\u7684\u672f\u8bed\uff0c\u8fd9\u4e9b\u90fd\u662f\u5f3a\u5236\u51fd\u6570\u7684\u793a\u4f8b\u3002\u5b83\u4eec\u4ee5\u4e00\u79cd\u5f88\u96be\u5ffd\u89c6\u7684\u65b9\u5f0f\u5c06\u9690\u85cf\u7684\u95ee\u9898\u5e26\u5230\u610f\u8bc6\u4e2d\uff0c\u56e0\u6b64\u5f88\u53ef\u80fd\u88ab\u89e3\u51b3\u3002\n\u5f53\u7136\uff0c\u5728\u751f\u4ea7\u6216\u73b0\u573a\u6f14\u793a\u4e2d\u51fa\u73b0\u95ee\u9898\u4e5f\u662f\u5982\u6b64\u3002\u4e0d\u540c\u7684\u662f\uff0c\u5f3a\u8feb\u51fd\u6570\u662f\u81ea\u613f\u5e94\u7528\u7684\u3002\u7528\u4f60\u81ea\u5df1\u7684\u65b9\u5f0f\u53bb\u53d1\u73b0\u95ee\u9898\uff0c\u538b\u529b\u66f4\u5c0f\uff0c\u66f4\u4e0d\u7528\u8bf4\u66f4\u4fbf\u5b9c\u4e86\u3002\n\u5982\u679c\u60a8\u5c06\u60a8\u7684\u8f6f\u4ef6\u60f3\u8c61\u4e3a\u968f\u65f6\u95f4\u6f14\u5316\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u6218\u7565\u6027\u5730\u5e94\u7528\u5f3a\u5236\u51fd\u6570\u662f\u52a0\u901f\u6b64\u6f14\u5316\u8fc7\u7a0b\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\n\u8fd9\u6837\u505a\u6709\u98ce\u9669\u5417\uff1f\u5f3a\u8feb\u529f\u80fd\u5c31\u50cf\u662f\u9ad8\u5f3a\u5ea6\u7684\u8bad\u7ec3\u73af\u5883\u3002\u867d\u7136\u57f9\u8bad\u5f88\u91cd\u8981\uff0c\u4f46\u5b83\u5e76\u4e0d\u5b8c\u5168\u662f\u771f\u5b9e\u7684\u4e16\u754c(\u201c\u5730\u56fe\u4e0d\u662f\u9886\u571f\u201d)\u3002\u5f3a\u8feb\u51fd\u6570\u901a\u5e38\u4ee5\u4e00\u79cd\u6210\u529f\u6807\u51c6\u4e3a\u6807\u51c6\uff0c\u5e76\u5f3a\u5316\u5b83\uff0c\u4ee5\u5f3a\u5236\u9002\u5e94\u3002\u7531\u4e8e\u4ed6\u4eec\u53ea\u5173\u6ce8\u4e00\u4e2a\u6807\u51c6\uff0c\u800c\u5ffd\u7565\u4e86\u5176\u4ed6\u6240\u6709\u4e1c\u897f\uff0c\u56e0\u6b64\u6709\u53ef\u80fd\u5728\u8fd9\u4e00\u70b9\u4e0a\u6295\u8d44\u592a\u591a\uff0c\u800c\u727a\u7272\u4e86\u66f4\u5927\u7684\u56fe\u666f\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u4e0d\u60f3\u82b1\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u8ba9\u4f60\u7684\u624b\u673a\u6e38\u620f\u5728\u4e00\u90e87\u5e74\u524d\u7684\u624b\u673a\u4e0a\u8fd0\u884c\u5f97\u975e\u5e38\u6d41\u7545\uff0c\u7ed3\u679c\u5374\u53d1\u73b0\u6ca1\u6709\u4eba\u89c9\u5f97\u6e38\u620f\u6709\u8da3\uff0c\u4f60\u7684\u94b1\u4e5f\u82b1\u5149\u4e86\u3002\n\u5f3a\u5236\u51fd\u6570\u662f\u4e00\u79cd\u5de5\u5177\uff1b\u77e5\u9053\u5728\u60a8\u7684\u56e2\u961f\u4e2d\u5e94\u7528\u54ea\u4e9b\u51fd\u6570\u4ee5\u53ca\u5e94\u7528\u5b83\u4eec\u7684\u9891\u7387\u662f\u53e6\u4e00\u6b21\u7684\u4e3b\u9898\u3002\n\u7136\u800c\uff0c\u7ed9\u51fa\u90e8\u5206\u7b54\u6848\uff1a\u6211\u6709\u4e00\u79cd\u611f\u89c9\uff0c\u5b9a\u671f\u4e0e\u6f5c\u5728\u5ba2\u6237\u8fdb\u884c\u9762\u5bf9\u9762\u6d4b\u8bd5\u53ef\u80fd\u662f\u6700\u7ec8\u7684\u5f3a\u5236\u529f\u80fd\u3002\u4e3a\u4ec0\u4e48\uff1f\u5b83\u4eec\u4e0d\u4ec5\u63ed\u793a\u4e86\u8bb8\u591a\u610f\u60f3\u4e0d\u5230\u7684\u3001\u72ec\u4e00\u65e0\u4e8c\u7684\u95ee\u9898\uff0c\u800c\u4e14\u8fd8\u8ba9\u60a8\u4e86\u89e3\u60a8\u53ef\u80fd\u60f3\u8981\u5e94\u7528\u54ea\u4e9b\u5176\u4ed6\u5f3a\u5236\u51fd\u6570\u3002\u5b83\u4eec\u5c31\u50cf\u662f\u201c\u5f3a\u5236\u51fd\u6570\u7684\u5f3a\u5236\u51fd\u6570\u201d\u3002\n\u5236\u9020\u987e\u5ba2\u60f3\u8981\u7684\u4e1c\u897f\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5728\u4ed6\u4eec\u9762\u524d\u62ff\u5230\u4e00\u4e2a\u539f\u578b\uff0c\u7136\u540e\u6839\u636e\u4ed6\u4eec\u7684\u53cd\u5e94\u8fdb\u884c\u6539\u8fdb\u3002\n\u4fdd\u7f57\u00b7\u683c\u96f7\u5384\u59c6--\u5982\u4f55\u542f\u52a8\u4e00\u5bb6\u521d\u521b\u4f01\u4e1a\u3002\n\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u7bc7\u6587\u7ae0\u6709\u7528\uff0c\u8bf7\u7ed9\u6211\u7559\u8a00\uff0c\u6216\u8005\u8003\u8651\u4f7f\u7528\u4e0b\u9762\u7684\u6309\u94ae\u4e4b\u4e00\u4e0e\u4f60\u7684\u670b\u53cb\u548c\u540c\u4e8b\u5206\u4eab\u5b83-Matt(@kiwiandroiddev)", "note_en": "Here\u2019s an unavoidable fact: the software project you\u2019re working on has some flaws that no one knows about. Not you, your users, nor anyone in your team. These could be anything from faulty assumptions in the UI to leaky abstractions in the architecture or an error-prone release process.\n Given enough time, these flaws will be discovered. But time is money.  The sooner you discover them, the cheaper they are to fix. So how do you find out about them sooner?\n The good news is that there are some things you can do to force issues up to the surface. You might already be doing some of them.\n  Dig out an old or cheap phone and try to run your app on it. Any major performance bottlenecks will suddenly become obvious\n Pretend you\u2019re a new developer in the team 1. Delete the project from your development machine, clone the source code and set it up from scratch. Gaps in the Readme file and outdated setup scripts will soon become obvious\n Try to add support for a completely different database. Details of your current database that have leaked into your data layer abstractions will soon become obvious\n Port a few screens from your front-end app to a different platform. For example, write a command-line interface that reuses the business and data layers untouched. \u201cPlatform-agnostic\u201d parts of the architecture might soon be shown up as anything-but\n Start releasing beta versions of your mobile app every week. The painful parts of your monthly release process will start to  become less painful\n Put your software into the hands of a real user without telling them how to use it. Then carefully watch how they actually use it\n To borrow a term from interaction design, these are all examples of  Forcing Functions. They raise hidden problems up to consciousness in such a way that they are difficult to ignore and therefore likely to be fixed.\n Of course, the same is true of having an issue show up in production or during a live demo. The difference is that Forcing Functions are  applied voluntarily. It\u2019s less stressful, not to mention cheaper, to find out about problems on your own terms.\n  If you imagine your software as something evolving over time, strategically applying forcing functions is a way of accelerating this evolutionary process.\n Are there any risks in doing this? A forcing function is like an intensive training environment. And while training is important, it\u2019s not quite the real world (\u201c The Map Is Not the Territory\u201c). Forcing functions typically take one criteria for success and intensify it in order to force an adaptation. Since they focus on one criteria and ignore everything else, there\u2019s a risk of investing too much on optimizing for that one thing at the expense of the bigger picture.\n In other words, you don\u2019t want to spend months getting your mobile game to run buttery-smooth on a 7 year old phone only to find out that no one finds the game fun and you\u2019ve run out of money.\n Forcing functions are a tool; knowing which of them to apply in your team and how often to apply them is a topic for another time.\n However, to give a partial answer: I have a feeling that  regular in-person tests with potential customers might be the ultimate forcing function. Why? Not only do they unearth a wealth of unexpected issues like nothing else, they also give you an idea of which other forcing functions you might want to apply. They\u2019re like a \u201cforcing function for forcing functions\u201d.\n  The only way to make something customers want is to get a prototype in front of them and refine it based on their reactions.\n Paul Graham \u2013  How to Start a Startup\n If you found this article useful, please drop me a comment or consider sharing it with your friends and colleagues using one of the buttons below  \u2013 Matt ( @kiwiandroiddev)", "posttime": "2020-10-21 16:26:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,\u5f00\u53d1,\u5f3a\u5236,functions,\u53ef\u80fd", "title": "\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u5f3a\u5236\u51fd\u6570", "title_en": "Forcing Functions in Software Development", "transed": 1, "url": "https://coderefinery.wordpress.com/2020/10/21/forcing-functions-in-software-development/", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u5f00\u53d1", "\u5f3a\u5236", "functions", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1030268, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fae\u8f6fAzure\u5c06\u642d\u8f7dSpaceX\u7684Starlink\u536b\u661f\u53d1\u5c04\u5347\u7a7a\u3002\u5fae\u8f6f\u548c\u57c3\u9686\u00b7\u9a6c\u65af\u514b\u7684\u516c\u53f8\u5c06\u5408\u4f5c\u5c06\u5fae\u8f6fAzure\u4e91\u8ba1\u7b97\u7f51\u7edc\u8fde\u63a5\u5230Starlink\u4e92\u8054\u7f51\u670d\u52a1\u3002\n\u51e0\u5468\u524d\uff0c\u5fae\u8f6f\u53d1\u5e03\u4e86Azure Orbital\uff0c\u8fd9\u662f\u4e00\u79cd\u536b\u661f\u8fde\u63a5\u5230\u4e91\u7684\u65b9\u5f0f\u3002\u6709\u4e86\u8fd9\u4e00\u65b0\u7684\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\uff0cAzure Orbary\u53ef\u80fd\u4f1a\u6269\u5927\u89c4\u6a21\uff0c\u4e3a\u4e0d\u65ad\u589e\u957f\u7684\u536b\u661f\u4e92\u8054\u7f51\u5e02\u573a\u63d0\u4f9b\u66f4\u591a\u9009\u62e9\u3002SpaceX\u603b\u88c1\u517c\u9996\u5e2d\u8fd0\u8425\u5b98\u683c\u6e29\u00b7\u8096\u7279\u5a01\u5c14(Gwynne Shotwell)\u8868\u793a\uff1a\u201c\u6211\u4eec\u4eca\u5929\u5ba3\u5e03\u7684\u5408\u4f5c\u5c06\u4f7f\u6211\u4eec\u80fd\u591f\u5171\u540c\u52aa\u529b\uff0c\u4e3a\u516c\u5171\u548c\u79c1\u8425\u90e8\u95e8\u63d0\u4f9b\u65b0\u7684\u4ea7\u54c1\uff0c\u901a\u8fc7Starlink\u63d0\u4f9b\u8fde\u63a5\uff0c\u4f9bAzure\u4f7f\u7528\u3002\u201dAzure Orbary\u548cSpaceX\u7684\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u5c06\u4e0e\u83b7\u5f97\u536b\u661f\u8fde\u63a5\u7684\u7ade\u4e89AWS\u670d\u52a1\u540c\u65f6\u5230\u6765\u3002\u636eCNBC\u62a5\u9053\uff0c\u6770\u592b\u00b7\u8d1d\u4f50\u65af(Jeff Bezos)\u7684\u4e9a\u9a6c\u900a\u4e5f\u5728\u5f00\u53d1Starlink\u7684\u7ade\u4e89\u5bf9\u624b\u67ef\u4f0a\u73c0(Kuiper)\u3002\u5982\u679c\u661f\u8054\u548c\u851a\u84dd\u8f68\u9053\u7387\u5148\u8fdb\u5165\u592a\u7a7a\uff0c\u4ed6\u4eec\u672a\u6765\u53ef\u80fd\u4f1a\u62e5\u6709\u66f4\u597d\u7684\u5e02\u573a\u4efd\u989d\u3002\u8fd9\u5b9e\u9645\u4e0a\u662fSpaceX\u548c\u4e9a\u9a6c\u900a\u4e4b\u95f4\u7684\u4e00\u573a\u536b\u661f\u592a\u7a7a\u7ade\u8d5b\u3002\u8fd9\u79cd\u5408\u4f5c\u5173\u7cfb\u53ef\u80fd\u5df2\u7ecf\u915d\u917f\u4e86\u4e00\u6bb5\u65f6\u95f4\u3002\u636e\u62a5\u9053\uff0c\u8fd1\u51e0\u4e2a\u6708\u6765\uff0c\u5e55\u540e\u4e00\u76f4\u5728\u8fdb\u884c\u6d4b\u8bd5\u3002\u6839\u636e\u5fae\u8f6f\u7684\u8bf4\u6cd5\uff0cStarlink\u7f51\u7edc\u53ef\u4ee5\u8fde\u63a5\u5fae\u8f6f\u7684\u6570\u636e\u4e2d\u5fc3\uff0c\u4ee5\u53ca\u4e00\u4e2a\u540d\u4e3a\u201cAzure Modular Data Center\u201d\u7684\u65b0\u4ea7\u54c1\u3002\u8fd9\u6b3e\u534a\u62d6\u8f66\u5927\u5c0f\u7684\u6570\u636e\u4e2d\u5fc3\u4ea7\u54c1\u201c\u9762\u5411\u5728\u6df7\u5408\u6216\u5177\u6709\u6311\u6218\u6027\u7684\u73af\u5883(\u5305\u62ec\u504f\u8fdc\u5730\u533a)\u4e2d\u9700\u8981\u4e91\u8ba1\u7b97\u80fd\u529b\u7684\u5ba2\u6237\u3002\u201d\u5b83\u5bf9\u4e8e\u81ea\u7136\u707e\u5bb3\u540e\u91cd\u5efa\u548c\u4fee\u590d\u53d7\u635f\u7684\u57fa\u7840\u8bbe\u65bd\u53ef\u80fd\u662f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u6709\u7528\u7684\u3002\u8fd9\u4e0eSpaceX\u76ee\u524d\u7684\u76ee\u6807\u662f\u4e00\u81f4\u7684\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u4e3a\u7f8e\u56fd\u897f\u6d77\u5cb8\u91ce\u706b\u4e2d\u7684\u7b2c\u4e00\u53cd\u5e94\u4eba\u5458\u63d0\u4f9b\u4e86\u8fde\u63a5\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u662f\u4e00\u4e2a\u4ee4\u4eba\u7740\u8ff7\u7684\u6280\u672f\u53d1\u5c55\uff0c\u8fd9\u79cd\u5408\u4f5c\u5173\u7cfb\u53ef\u80fd\u4f1a\u4e3a\u4e24\u5bb6\u516c\u53f8\u6253\u5f00\u65b0\u673a\u4f1a\u7684\u5927\u95e8\u3002\u6b63\u5982\u5fae\u8f6fAzure Global\u516c\u53f8\u526f\u603b\u88c1\u6c64\u59c6\u00b7\u57fa\u6069(Tom Keane)\u6240\u8bf4\uff0c\u201c\u5f53\u4eba\u4eec\u60f3\u5230\u5c06\u592a\u7a7a\u6280\u672f\u5e26\u516521\u4e16\u7eaa\u7684\u521b\u65b0\u548c\u8fdb\u5316\u65f6\uff0cSpaceX\u5f53\u7136\u662f\u4ed6\u4eec\u7b2c\u4e00\u65f6\u95f4\u60f3\u5230\u7684\u540d\u5b57\u3002\u201d\u968f\u7740\u5fae\u8f6f\u548cSpaceX\u7684\u5408\u4f5c\uff0cAzure\u53ef\u80fd\u4f1a\u6210\u4e3a\u201c\u6ee1\u8db3\u592a\u7a7a\u793e\u533a\u4efb\u52a1\u9700\u6c42\u7684\u9996\u9009\u5e73\u53f0\u548c\u751f\u6001\u7cfb\u7edf\u201d\u3002", "note_en": "Microsoft  Azure is blasting off to space with  SpaceX\u2019s Starlink satellites.   Microsoft and Elon Musk\u2019s company will be partnering to connect the  Microsoft Azure cloud computing network to the Starlink internet service.\n A few weeks ago, Microsoft announced Azure Orbital, a way for satellites to connect to the cloud. With this new partnership, Azure Orbital will likely expand and provide more options for a growing satellite internet market. Gwynne Shotwell, SpaceX president and COO, said that \u201cThe collaboration that we\u2019re announcing today will allow us to work together to deliver new offerings for both the public and the private sector to deliver connectivity through Starlink for use on Azure.\u201d   The Azure Orbital and SpaceX partnership is arriving simultaneously with competing AWS services that are getting satellite connectivity.  CNBC reports that Jeff Bezos\u2019 Amazon is also working on a Starlink competitor, Kuiper. If Starlink and Azure Orbital get to space first, they may have a better market share in the future. This is practically a space race of satellites between SpaceX and Amazon.   This partnership has likely been in the works for some time. It is reported that there have been tests going on in the background in recent months. According to Microsoft, the Starlink network can connect Microsoft data centers, as well as a new product called \u201cAzure Modular Data center.\u201d This semi-trailer sized data center product is \u201cfor customers who need cloud computing capabilities in hybrid or challenging environments, including remote areas.\u201d It could be incredibly useful for rebuilding and fixing damaged infrastructure after natural disasters. This falls in line with SpaceX\u2019s goals at present, as it has provided connectivity to first responders in the U.S with the wildfires on the west coast.   All-in-all, this is a fascinating development of technology, and this partnership could open doors to new opportunities for both companies. As Tom Keane,\u00a0Microsoft\u2019s corporate vice president of Azure Global, puts it, \u201cSpaceX is of course the name that people immediately think of when they think of innovation and the evolution that\u2019s occurring to bring space technology into the 21st century.\u201d With Microsoft and SpaceX working together, Azure could become \u201cthe platform and ecosystem of choice for the mission needs of the space community.\u201d", "posttime": "2020-10-21 16:25:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "microsoft,\u5fae\u8f6f,azure,announces", "title": "\u5fae\u8f6f\u5ba3\u5e03Azure Space\u4e0eSpaceX Starlink\u5408\u4f5c", "title_en": "Microsoft Announces Azure Space and Partnership with SpaceX Starlink", "transed": 1, "url": "https://hothardware.com/news/microsoft-azure-and-starlink-partnership", "via": "", "real_tags": ["microsoft", "\u5fae\u8f6f", "azure", "announces"]}, {"category": "", "categoryclass": "", "imagename": "d46f0f248f8718c165edc5bde56db42a.png", "infoid": 1030267, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PySpark\u662f\u4e00\u79cd\u5305\u88c5\u5668\u8bed\u8a00\uff0c\u5141\u8bb8\u7528\u6237\u4e0eApache Spark\u540e\u7aef\u4ea4\u4e92\u4ee5\u5feb\u901f\u5904\u7406\u6570\u636e\u3002Spark\u53ef\u4ee5\u5728\u5206\u5e03\u5f0f\u670d\u52a1\u5668\u7f51\u7edc\u4e2d\u7684\u6d77\u91cf\u6570\u636e\u96c6\u4e0a\u8fd0\u884c\uff0c\u5982\u679c\u4f7f\u7528\u5f97\u5f53\uff0c\u53ef\u63d0\u4f9b\u91cd\u5927\u7684\u6027\u80fd\u548c\u53ef\u9760\u6027\u4f18\u52bf\u3002\u5b83\u5e26\u6765\u4e86\u6311\u6218\uff0c\u5373\u4f7f\u5bf9\u4e8e\u7ecf\u9a8c\u4e30\u5bcc\u7684Python\u5f00\u53d1\u4eba\u5458\u4e5f\u662f\u5982\u6b64\uff0c\u56e0\u4e3aPySpark\u8bed\u6cd5\u5229\u7528\u4e86Spark\u7684JVM\u4f20\u7edf\uff0c\u56e0\u6b64\u5b9e\u73b0\u4e86\u53ef\u80fd\u4e0d\u719f\u6089\u7684\u4ee3\u7801\u6a21\u5f0f\u3002\n\u8fd9\u672c\u5173\u4e8ePySpark\u4ee3\u7801\u98ce\u683c\u7684\u56fa\u6267\u5df1\u89c1\u7684\u6307\u5357\u4ecb\u7ecd\u4e86\u6211\u4eec\u9047\u5230\u7684\u5e38\u89c1\u60c5\u51b5\uff0c\u4ee5\u53ca\u57fa\u4e8ePySpark Repos\u4e2d\u6700\u9891\u7e41\u51fa\u73b0\u7684\u4e3b\u9898\u7684\u76f8\u5173\u6700\u4f73\u5b9e\u8df5\u3002\n\u9664\u4e86PySpark\u7684\u7ec6\u8282\u4e4b\u5916\uff0c\u5e72\u51c0\u4ee3\u7801\u7684\u4e00\u822c\u5b9e\u8df5\u5728PySpark\u5b58\u50a8\u5e93\u4e2d\u4e5f\u5f88\u91cd\u8981-Google PyGuide\u662f\u4e86\u89e3\u66f4\u591a\u8fd9\u4e9b\u5b9e\u8df5\u7684\u6709\u529b\u8d77\u70b9\u3002\n\u9996\u9009\u9009\u9879\u66f4\u590d\u6742\u3001\u66f4\u957f\u3001\u66f4\u6c61\u67d3-\u800c\u4e14\u662f\u6b63\u786e\u7684\u3002\u867d\u7136\u901a\u5e38\u6700\u597d\u907f\u514d\u5b8c\u5168\u4f7f\u7528F.ol()\uff0c\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u5b83\u6216\u53e6\u4e00\u79cd\u663e\u5f0f\u9009\u62e9\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u7136\u800c\uff0c\u6211\u4eec\u6709\u5145\u5206\u7684\u7406\u7531\u66f4\u559c\u6b22\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u800c\u4e0d\u662f\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u3002\n\u4e0e\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e00\u6837\u4f7f\u7528\u663e\u5f0f\u5217\u65f6\uff0cDataFrame\u540d\u79f0\u548c\u67b6\u6784\u90fd\u663e\u5f0f\u7ed1\u5b9a\u5230dataframe\u53d8\u91cf\u3002\u8fd9\u610f\u5473\u7740\u5982\u679cdf1\u88ab\u5220\u9664\u6216\u91cd\u547d\u540d\uff0c\u5f15\u7528df1.colA\u5c06\u4e2d\u65ad\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0cF.ol(&#39\uff1bCola&39\uff1b)\u5c06\u59cb\u7ec8\u5f15\u7528\u6b63\u5728\u64cd\u4f5c\u7684\u6570\u636e\u5e27\u4e2d\u6307\u5b9a\u7684\u5217\uff0c\u5728\u672c\u4f8b\u4e2d\u540d\u4e3adf\u3002\u5b83\u6839\u672c\u4e0d\u9700\u8981\u8ddf\u8e2a\u5176\u4ed6\u6570\u636e\u5e27\u72b6\u6001\uff0c\u56e0\u6b64\u4ee3\u7801\u53d8\u5f97\u66f4\u52a0\u672c\u5730\u5316\uff0c\u4e0d\u592a\u5bb9\u6613\u51fa\u73b0\u201c\u8fdc\u8ddd\u79bb\u7684\u8be1\u5f02\u4ea4\u4e92\u201d\uff0c\u8fd9\u901a\u5e38\u662f\u8c03\u8bd5\u4e0a\u7684\u6311\u6218\u3002\n\u5982\u679c\u5217\u540d\u5305\u542b\u9700\u8981\u62ec\u53f7\u64cd\u4f5c\u7b26\u8bbf\u95ee\u7684\u7a7a\u683c\u6216\u5176\u4ed6\u4e0d\u53d7\u652f\u6301\u7684\u5b57\u7b26\uff0c\u5219df1[&#39\uff1bCola&39\uff1b]\u4e0eF.ol(&#39\uff1bCola&39\uff1b)\uff1b\u4e00\u6837\u96be\u4ee5\u5199\u5165\u3002\n\u5c06\u50cfF.ol(&#39\uff1bPROD_STATUS&#39\uff1b)==&#39\uff1bDelivered&#39\uff1b\u8fd9\u6837\u7684\u62bd\u8c61\u8868\u8fbe\u5f0f\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff0c\u4f7f\u5176\u53ef\u7528\u4e8e\u591a\u4e2a\u6570\u636e\u5e27\uff0c\u800cdf.prod_status==&#39\uff1bDelivered&#39\uff1b\u603b\u662f\u7ed1\u5b9a\u5230DF\n\u5e78\u8fd0\u7684\u662f\uff0c\u901a\u5e38\u4e0d\u9700\u8981\u4f7f\u7528F.ol()\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u3002\u5728Spark3.0\u4e4b\u524d\uff0c\u8fd9\u5bf9\u4e8e\u4e00\u4e9b\u51fd\u6570\u6765\u8bf4\u662f\u5fc5\u9700\u7684\uff0c\u6bd4\u5982F.Upper()\uff0c\u4f46\u662f\u4ece\u90a3\u4ee5\u540eAPI\u53d8\u5f97\u66f4\u52a0\u7edf\u4e00\u4e86\u3002\n\u5728\u67d0\u4e9b\u4e0a\u4e0b\u6587\u4e2d\uff0c\u53ef\u80fd\u53ef\u4ee5\u8bbf\u95ee\u591a\u4e2a\u6570\u636e\u5e27\u4e2d\u7684\u5217\uff0c\u5e76\u4e14\u540d\u79f0\u53ef\u80fd\u4f1a\u91cd\u53e0\u3002\u5e38\u89c1\u7684\u793a\u4f8b\u662fdf.join(df2\uff0con=(df.key==df2.key)\uff0cHOW=&#39\uff1bLEFT&#39\uff1b)\u8fd9\u6837\u7684\u5339\u914d\u8868\u8fbe\u5f0f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u5e27\u76f4\u63a5\u5f15\u7528\u5217\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528DataFrame\u522b\u540d\u6d88\u9664\u8fde\u63a5\u7684\u6b67\u4e49(\u8bf7\u53c2\u9605\u672c\u6307\u5357\u7684\u8fde\u63a5\u4e00\u8282\u4e2d\u7684\u66f4\u591a\u5185\u5bb9)\u3002\n\u903b\u8f91\u64cd\u4f5c\u901a\u5e38\u9a7b\u7559\u5728.filter()\u6216F.When()\u4e2d\uff0c\u9700\u8981\u5177\u6709\u53ef\u8bfb\u6027\u3002\u6211\u4eec\u5e94\u7528\u4e0e\u94fe\u63a5\u51fd\u6570\u76f8\u540c\u7684\u89c4\u5219\uff0c\u5c06\u540c\u4e00\u4ee3\u7801\u5757\u5185\u7684\u903b\u8f91\u8868\u8fbe\u5f0f\u6700\u591a\u4fdd\u7559\u4e3a\u4e09(3)\u4e2a\u8868\u8fbe\u5f0f\u3002\u5982\u679c\u5b83\u4eec\u53d8\u957f\u4e86\uff0c\u901a\u5e38\u662f\u4ee3\u7801\u53ef\u4ee5\u7b80\u5316\u6216\u63d0\u53d6\u51fa\u6765\u7684\u8ff9\u8c61\u3002\u5c06\u590d\u6742\u7684\u903b\u8f91\u8fd0\u7b97\u63d0\u53d6\u5230\u53d8\u91cf\u4e2d\u4f7f\u4ee3\u7801\u66f4\u6613\u4e8e\u9605\u8bfb\u548c\u63a8\u7406\uff0c\u8fd9\u4e5f\u51cf\u5c11\u4e86\u9519\u8bef\u3002\n#Bad F.When((F.ol(&#39\uff1bProd_Status&#39\uff1b)==&#39\uff1bDelivered&#39\uff1b)|(F.datediff(&#39\uff1bdeliveryDate_Actual&39\uff1b\uff0c&#39\uff1bCurrent_Date&#39\uff1b)&lt\uff1b0)&amp\uff1b((F.ol(&#39\uff1bCurrentRegistry&39\uff1b)\uff01=&#39\uff1b&#39\uff1b)|((F.datediff(&#39\uff1bDeliveryDate_Actual&#39\uff1b\uff0c&#39\uff1bCurrent_Date&#39\uff1b)&lt\uff1b0)&amp\uff1b((F.ol(&#39\uff1bOriginalOperator&#39\uff1b)\uff01=&#39\uff1b&#39\uff1b)|(F.ol(&#39\uff1bcurrentOperator&#39\uff1b)\uff01=&#39\uff1b&#39\uff1b)\uff0c&#39\uff1b\u6b63\u5728\u4f7f\u7528&#39\uff1b)\u3002\n\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u7b80\u5316\u3002\u9996\u5148\uff0c\u5c06\u91cd\u70b9\u653e\u5728\u5c06\u903b\u8f91\u6b65\u9aa4\u5206\u7ec4\u5230\u51e0\u4e2a\u547d\u540d\u53d8\u91cf\u4e2d\u3002PySpark\u8981\u6c42\u8868\u8fbe\u5f0f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u3002\u8fd9\u4e0e\u7528\u4e8e\u5206\u7ec4\u903b\u8f91\u64cd\u4f5c\u7684\u5b9e\u9645\u62ec\u53f7\u6df7\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u53ef\u8bfb\u6027\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u6709\u4e00\u4e2a\u539f\u59cb\u4f5c\u8005\u6ca1\u6709\u6ce8\u610f\u5230\u7684\u5197\u4f59(F.datediff(df.deliveryDate_Actual\uff0cdf.current_date)&lt\uff1b0)\uff0c\u56e0\u4e3a\u5b83\u5f88\u96be\u53d1\u73b0\u3002\n#\u8f83\u597d\u7684HAS_OPERATOR=((F.ol(&#39\uff1bOriginalOperator&#39\uff1b)\uff01=&#39\uff1b&#39\uff1b)|(F.ol(&#39\uff1bcurrentOperator&#39\uff1b)\uff01=&#39\uff1b&#39\uff1b)Delivery_Date_Passed=(F.datediff(&#39\uff1bdeliveryDate_Actual&#39\uff1b\uff0c&#39\uff1bCurrent_Date&#39\uff1b)&lt\uff1b0)HAS_REGISTION=(F.ol(&#39\uff1bCurrentRegistry&#39\uff1b)\u3002)\u3002RLIKE(&#39\uff1b.+&#39\uff1b)is_delivered=(F.ol(&#39\uff1bProd_Status&#39\uff1b)==&#39\uff1bDelivered&#39\uff1b)F.When(IS_Delivery|(Delivery_Date_Passed&amp\uff1b(HAS_REGISTION|HAS_OPERATOR))\uff0c&#39\uff1b\u670d\u52a1\u4e2d&#39\uff1b)\u3002\n\u4e0a\u9762\u7684\u793a\u4f8b\u53bb\u6389\u4e86\u5197\u4f59\u8868\u8fbe\u5f0f\uff0c\u66f4\u6613\u4e8e\u9605\u8bfb\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c11\u624b\u672f\u6b21\u6570\u6765\u8fdb\u4e00\u6b65\u6539\u5584\u5b83\u3002\n#Good Has_Operator=((F.ol(&#39\uff1bOriginalOperator&#39\uff1b)\uff01=&#39\uff1b&#39\uff1b)|(F.ol(&#39\uff1bcurrentOperator&#39\uff1b)\uff01=&#39\uff1b&#39\uff1b)Delivery_Date_Passed=(F.datediff(&#39\uff1bdeliveryDate_Actual&#39\uff1b\uff0c&#39\uff1bCurrent_Date&#39\uff1b)&lt\uff1b0)HAS_REGISTION=(F.ol(&#39\uff1bcurrentRegister&#39\uff1b)\uff1b)\u3002RLIKE(&#39\uff1b.+&#39\uff1b)IS_DEVERED=(F.ol(&#39\uff1bPROD_STATUS&#39\uff1b)==&#39\uff1bDelivered&#39\uff1b)IS_ACTIVE=(HAS_REGISTION|HAS_OPERATOR)F.When(IS_Delivery|(Delivery_Date_Passed&amp\uff1bis_active)\uff0c&#39\uff1b\u5728\u670d\u52a1\u4e2d&#39\uff1b)\n\u6ce8\u610fF.When\u8868\u8fbe\u5f0f\u73b0\u5728\u662f\u5982\u4f55\u7b80\u6d01\u548c\u53ef\u8bfb\u7684\uff0c\u5e76\u4e14\u6240\u9700\u7684\u884c\u4e3a\u5bf9\u4e8e\u4efb\u4f55\u5ba1\u9605\u8fd9\u6bb5\u4ee3\u7801\u7684\u4eba\u6765\u8bf4\u90fd\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\u5982\u679c\u8bfb\u8005\u6000\u7591\u6709\u9519\u8bef\uff0c\u5219\u53ea\u9700\u67e5\u770b\u5404\u4e2a\u8868\u8fbe\u5f0f\u3002\u5982\u679c\u60a8\u7684\u4ee3\u7801\u4e2d\u6709\u5355\u5143\u6d4b\u8bd5\uff0c\u5e76\u4e14\u5e0c\u671b\u5c06\u5b83\u4eec\u62bd\u8c61\u4e3a\u51fd\u6570\uff0c\u5b83\u8fd8\u53ef\u4ee5\u4f7f\u6bcf\u4e2a\u903b\u8f91\u5757\u6613\u4e8e\u6d4b\u8bd5\u3002\n\u5728\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u4e2d\u4ecd\u7136\u6709\u4e00\u4e9b\u4ee3\u7801\u91cd\u590d\uff1a\u5982\u4f55\u6d88\u9664\u91cd\u590d\u662f\u8bfb\u8005\u7684\u7ec3\u4e60\u3002\n\u5728PySpark\u8f6c\u6362\u5f00\u59cb\u65f6\u6216\u5728\u8fd4\u56de\u4e4b\u524d\u6267\u884cSELECT\u88ab\u8ba4\u4e3a\u662f\u5f88\u597d\u7684\u505a\u6cd5\u3002\u6b64SELECT\u8bed\u53e5\u6307\u5b9a\u4e0e\u8bfb\u53d6\u5668\u7684\u7ea6\u5b9a\u548c\u6709\u5173\u8f93\u5165\u548c\u8f93\u51fa\u7684\u9884\u671f\u6570\u636e\u5e27\u6a21\u5f0f\u7684\u4ee3\u7801\u3002\u4efb\u4f55\u9009\u62e9\u90fd\u5e94\u88ab\u89c6\u4e3a\u6b63\u5728\u51c6\u5907\u6570\u636e\u5e27\u4ee5\u4f9b\u8f6c\u6362\u7684\u4e0b\u4e00\u6b65\u4f7f\u7528\u7684\u6e05\u7406\u64cd\u4f5c\u3002\n\u4f7fSELECT\u8bed\u53e5\u5c3d\u53ef\u80fd\u7b80\u5355\u3002\u7531\u4e8e\u5e38\u89c1\u7684SQL\u4e60\u60ef\u7528\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u9009\u5b9a\u7684\u5217\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528spk.sql.function\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5916\u52a0\u4e00\u4e2a\u53ef\u9009\u7684.alias()\u4ee5\u8d4b\u4e88\u5b83\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u79f0\u3002\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u5e94\u8be5\u8c28\u614e\u4f7f\u7528\u3002\u5982\u679c\u5728\u540c\u4e00SELECT\u4e2d\u6709\u4e09\u4e2a\u4ee5\u4e0a\u8fd9\u6837\u7684\u7528\u6cd5\uff0c\u5219\u5c06\u5176\u91cd\u6784\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u51fd\u6570\uff0c\u5982CLEAN_&lt\uff1bdataframe name&gt\uff1b()\u6765\u5c01\u88c5\u64cd\u4f5c\u3002\n\u9664\u975e\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\u9700\u8981\uff0c\u5426\u5219\u4e0d\u9f13\u52b1\u5728SELECT\u4e2d\u4f7f\u7528\u6d89\u53ca\u591a\u4e2a\u6570\u636e\u5e27\u7684\u8868\u8fbe\u5f0f\u6216\u6761\u4ef6\u64cd\u4f5c(\u5982.When())\u3002\nSELECT()\u8bed\u53e5\u91cd\u65b0\u5b9a\u4e49\u6570\u636e\u5e27\u7684\u6a21\u5f0f\uff0c\u56e0\u6b64\u5b83\u81ea\u7136\u652f\u6301\u5305\u542b\u6216\u6392\u9664\u65e7\u5217\u548c\u65b0\u5217\uff0c\u4ee5\u53ca\u91cd\u65b0\u5b9a\u4e49\u9884\u5148\u5b58\u5728\u7684\u5217\u3002\u901a\u8fc7\u5c06\u6240\u6709\u6b64\u7c7b\u64cd\u4f5c\u96c6\u4e2d\u5728\u4e00\u6761\u8bed\u53e5\u4e2d\uff0c\u8bc6\u522b\u6700\u7ec8\u6a21\u5f0f\u53d8\u5f97\u5bb9\u6613\u5f97\u591a\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u66f4\u5177\u53ef\u8bfb\u6027\u3002\u5b83\u8fd8\u4f7f\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u3002\n#\u9519\u8bef\u7684df\u3002SELECT((F.coalesce(F.unix_Timestamp(&#39\uff1bCLOSED_AT&#39\uff1b\uff0cF.unix_Timestamp())-F.unix_Timestamp(&#39\uff1bCreated_at&#39\uff1b))/86400)\u3002\u522b\u540d(&#39\uff1bDays_OPEN&#39\uff1b))#Good DF\u3002With Column(&#39\uff1bDays_OPEN&#39\uff1b\uff0c(F.coalesce(F.UNIX_TIMESTAMP(&#39\uff1bCLOSED_AT&#39\uff1b)\uff0cF.UNIX_TIMESTAMP())-F.Unix_TIMESTAMP(&#39\uff1bCREATED_AT&#39\uff1b))/86400)\u3002\n\u5982\u679cSELECT\u8bed\u53e5\u4e2d\u7684\u5217\u5c06\u4fdd\u6301\u672a\u4f7f\u7528\u72b6\u6001\uff0c\u8bf7\u907f\u514d\u5728\u5176\u4e2d\u5305\u542b\u8fd9\u4e9b\u5217\uff0c\u800c\u662f\u9009\u62e9\u4e00\u7ec4\u663e\u5f0f\u7684\u5217-\u8fd9\u662f\u4f7f\u7528.drop()\u7684\u9996\u9009\u66ff\u4ee3\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4fdd\u8bc1\u6a21\u5f0f\u7a81\u53d8\u4e0d\u4f1a\u5bfc\u81f4\u610f\u5916\u7684\u5217\u81a8\u80c0\u6570\u636e\u5e27\u3002\u7136\u800c\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u5929\u751f\u4e0d\u9f13\u52b1\u5220\u9664\u5217\uff1b\u4f8b\u5982\uff0c\u901a\u5e38\u5728\u8054\u63a5\u4e4b\u540e\u5220\u9664\u5217\u662f\u5408\u9002\u7684\uff0c\u56e0\u4e3a\u8054\u63a5\u901a\u5e38\u4f1a\u5f15\u5165\u5197\u4f59\u5217\u3002\n\u6700\u540e\uff0c\u4e0d\u5efa\u8bae\u901a\u8fc7SELECT\u8bed\u53e5\u6dfb\u52a0\u65b0\u5217\uff0c\u800c\u662f\u5efa\u8bae\u5bf9\u5355\u4e2a\u5217\u4f7f\u7528.with Column()\u3002\u5728\u6dfb\u52a0\u6216\u64cd\u4f5c\u6570\u5341\u6216\u6570\u767e\u5217\u65f6\uff0c\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u8bf7\u4f7f\u7528\u5355\u4e2a.select()\u3002\n\u5982\u679c\u9700\u8981\u6dfb\u52a0\u7a7a\u5217\u4ee5\u6ee1\u8db3\u6a21\u5f0f\uff0c\u8bf7\u59cb\u7ec8\u4f7f\u7528F.litt(\u65e0)\u586b\u5145\u8be5\u5217\u3002\u5207\u52ff\u4f7f\u7528\u7a7a\u5b57\u7b26\u4e32\u6216\u8868\u793a\u7a7a\u503c\u7684\u5176\u4ed6\u5b57\u7b26\u4e32(\u5982NA)\u3002\n\u9664\u4e86\u8bed\u4e49\u4e0a\u6b63\u786e\u4e4b\u5916\uff0c\u4f7f\u7528F.litt(None)\u7684\u4e00\u4e2a\u5b9e\u9645\u539f\u56e0\u662f\u4fdd\u7559\u4f7f\u7528isNull\u7b49\u5b9e\u7528\u5de5\u5177\u7684\u80fd\u529b\uff0c\u800c\u4e0d\u5fc5\u9a8c\u8bc1\u7a7a\u5b57\u7b26\u4e32\u3001NULL\u548c&#39\uff1bna&#39\uff1bna\u7b49\u3002\n\u867d\u7136\u6ce8\u91ca\u53ef\u4ee5\u63d0\u4f9b\u5bf9\u4ee3\u7801\u7684\u6709\u7528\u89c1\u89e3\uff0c\u4f46\u91cd\u6784\u4ee3\u7801\u4ee5\u63d0\u9ad8\u5176\u53ef\u8bfb\u6027\u901a\u5e38\u66f4\u6709\u4ef7\u503c\u3002\u4ee3\u7801\u672c\u8eab\u5e94\u8be5\u662f\u53ef\u8bfb\u7684\u3002\u5982\u679c\u60a8\u4f7f\u7528\u6ce8\u91ca\u4e00\u6b65\u4e00\u6b65\u5730\u89e3\u91ca\u903b\u8f91\uff0c\u5219\u5e94\u8be5\u5bf9\u5176\u8fdb\u884c\u91cd\u6784\u3002\n#BAD#\u4e3aCOLS\uff1adf=df\u4e2d\u7684c\u8f6c\u6362\u65f6\u95f4\u6233\u5217COLS=[&#39\uff1bstart_date&#39\uff1b\uff0c&#39\uff1bdelivery_date&#39\uff1b]\u3002With Column(c\uff0cf.from_unixtime(f.ol(C)/1000))\u3002CAST(TimestampType()\u3002\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u5217\u88ab\u5f3a\u5236\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u3002\u8fd9\u6761\u8bc4\u8bba\u5e76\u6ca1\u6709\u589e\u52a0\u591a\u5c11\u4ef7\u503c\u3002\u6b64\u5916\uff0c\u5982\u679c\u66f4\u5197\u957f\u7684\u6ce8\u91ca\u53ea\u63d0\u4f9b\u4ee3\u7801\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u4ecd\u7136\u6ca1\u6709\u5e2e\u52a9\u3002\u4f8b\u5982\uff1a\n#BAD#\u904d\u5386\u6bcf\u4e00\u5217\uff0c\u9664\u4ee51000\uff0c\u56e0\u4e3aMILIS\u5e76\u8f6c\u6362\u4e3aCOLS\u4e2d\u7684\u65f6\u95f4\u6233COLS=[&#39\uff1bSTART_DATE&#39\uff1b\uff0c&#39\uff1bDelivery_Date&#39\uff1b]\uff1adf=df\u3002With Column(c\uff0cf.from_unixtime(f.ol(C)/1000))\u3002CAST(TimestampType()\u3002\n\u4e0e\u5176\u7559\u4e0b\u53ea\u63cf\u8ff0\u60a8\u7f16\u5199\u7684\u903b\u8f91\u7684\u6ce8\u91ca\uff0c\u4e0d\u5982\u7559\u4e0b\u7ed9\u51fa\u4e0a\u4e0b\u6587\u7684\u6ce8\u91ca\uff0c\u89e3\u91ca\u60a8\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u505a\u51fa\u7684\u51b3\u5b9a\u7684\u539f\u56e0\u3002\u8fd9\u5bf9\u4e8ePySpark\u6765\u8bf4\u5c24\u5176\u91cd\u8981\uff0c\u56e0\u4e3a\u8bfb\u8005\u53ef\u4ee5\u7406\u89e3\u60a8\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u901a\u5e38\u6ca1\u6709\u5173\u4e8e\u9988\u9001\u5230PySpark\u8f6c\u6362\u7684\u6570\u636e\u7684\u4e0a\u4e0b\u6587\u3002\u5c0f\u7684\u903b\u8f91\u7247\u6bb5\u53ef\u80fd\u9700\u8981\u6570\u5c0f\u65f6\u7684\u6570\u636e\u6316\u6398\u624d\u80fd\u7406\u89e3\u6b63\u786e\u7684\u884c\u4e3a\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u89e3\u91ca\u5176\u57fa\u672c\u539f\u7406\u7684\u6ce8\u91ca\u5c24\u5176\u6709\u4ef7\u503c\u3002\n#Good#\u6b64\u6570\u636e\u96c6\u7684\u4f7f\u7528\u8005\u9700\u8981\u7684\u662f\u65f6\u95f4\u6233\u800c\u4e0d\u662f\u65e5\u671f\uff0c\u6211\u4eec\u9700\u8981#\u5c06\u65f6\u95f4\u8c03\u65741000\uff0c\u56e0\u4e3a\u539f\u59cb\u6570\u636e\u6e90\u5c06\u8fd9\u4e9b\u6570\u636e\u5b58\u50a8\u4e3aMillis#\uff0c\u5c3d\u7ba1\u6587\u6863\u4e2d\u8bf4\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u65e5\u671f\u3002COLS=[&#39\uff1bSTART_DATE&#39\uff1b\uff0c&#39\uff1bDelivery_Date&#39\uff1b]COLS\u4e2d\u7684c\uff1adf=df\u3002With Column(c\uff0cf.from_unixtime(f.ol(C)/1000))\u3002CAST(TimestampType()\u3002\n\u5f3a\u70c8\u5efa\u8bae\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u907f\u514d\u4f7f\u7528UDF\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u6027\u80fd\u660e\u663e\u4e0d\u5982\u539f\u751fPySpark\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f3c\u4e4e\u9700\u8981UDF\u7684\u903b\u8f91\u53ef\u4ee5\u91cd\u6784\u4e3a\u53ea\u4f7f\u7528\u672c\u673aPySpark\u51fd\u6570\u3002\n\u4f7f\u7528\u8fde\u63a5\u65f6\u8981\u5c0f\u5fc3\uff01\u5982\u679c\u60a8\u6267\u884c\u5de6\u8054\u63a5\uff0c\u5e76\u4e14\u53f3\u4fa7\u5bf9\u4e00\u4e2a\u952e\u6709\u591a\u4e2a\u5339\u914d\u9879\uff0c\u5219\u8be5\u884c\u5c06\u4e0e\u5339\u914d\u9879\u4e00\u6837\u591a\u6b21\u91cd\u590d\u3002\u8fd9\u88ab\u79f0\u4e3a\u52a0\u5165\u7206\u70b8\uff0c\u53ef\u4ee5\u6781\u5927\u5730\u589e\u52a0\u53d8\u6362\u4f5c\u4e1a\u7684\u8f93\u51fa\u3002\u4e00\u5b9a\u8981\u4ed4\u7ec6\u68c0\u67e5\u60a8\u7684\u5047\u8bbe\uff0c\u4ee5\u786e\u4fdd\u60a8\u8981\u8fde\u63a5\u7684\u5bc6\u94a5\u662f\u552f\u4e00\u7684\uff0c\u9664\u975e\u60a8\u5e0c\u671b\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\u3002\n\u9519\u8bef\u7684\u8054\u63a5\u662f\u8bb8\u591a\u96be\u4ee5\u8c03\u8bd5\u7684\u95ee\u9898\u7684\u6839\u6e90\u3002\u5373\u4f7f\u60a8\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u503c(\u5185\u90e8)\uff0c\u4e5f\u6709\u4e00\u4e9b\u5185\u5bb9\u53ef\u4ee5\u5e2e\u52a9\u60a8\u660e\u786e\u6307\u5b9a\u65b9\u5f0f\uff1a\n#\u4e0d\u826f\u822a\u73ed=\u822a\u73ed\u3002\u52a0\u5165(\u98de\u673a\uff0c\u98de\u673a)#\u4e5f\u662f\u4e0d\u597d\u7684\u822a\u73ed=\u822a\u73ed\u3002\u52a0\u5165(\u98de\u673a\uff0c#39\uff1b\u98de\u673a_id&#39\uff1b\uff0c&#39\uff1b\u5185\u90e8#)#\u597d\u7684\u98de\u884c=\u98de\u884c\u3002\u52a0\u5165(Aircraft\uff0c&#39\uff1bAircraft_id&#39\uff1b\uff0cHOW=&#39\uff1bINTERNAL&#39\uff1b)\u3002\n\u907f\u514d\u53f3\u8fde\u63a5\u3002\u5982\u679c\u60a8\u8981\u4f7f\u7528\u53f3\u8054\u63a5\uff0c\u8bf7\u5207\u6362\u6570\u636e\u5e27\u7684\u987a\u5e8f\uff0c\u6539\u4e3a\u4f7f\u7528\u5de6\u8054\u63a5\u3002\u8fd9\u66f4\u52a0\u76f4\u89c2\uff0c\u56e0\u4e3a\u60a8\u6b63\u5728\u5bf9\u5176\u6267\u884c\u64cd\u4f5c\u7684\u6570\u636e\u5e27\u5c31\u662f\u60a8\u4ee5\u8fde\u63a5\u4e3a\u4e2d\u5fc3\u7684\u6570\u636e\u5e27\u3002\n\u907f\u514d\u91cd\u547d\u540d\u6240\u6709\u5217\u4ee5\u907f\u514d\u51b2\u7a81\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u4e3a\u6574\u4e2a\u6570\u636e\u5e27\u6307\u5b9a\u4e00\u4e2a\u522b\u540d\uff0c\u5e76\u4f7f\u7528\u8be5\u522b\u540d\u6765\u9009\u62e9\u5728\u672b\u5c3e\u9700\u8981\u54ea\u4e9b\u5217\u3002\n\u5217\uff1a\u822a\u73ed=\u822a\u73ed\u7684#BAD\u5217=[&#39\uff1bSTART_TIME&#39\uff1b\uff0c&#39\uff1bEND_TIME&#39\uff1b\uff0c&#39\uff1bIDLE_TIME&#39\uff1b\uff0c&#39\uff1bTOTAL_TIME&#39\uff1b]\u3002With ColumnRename(COL\uff0c&#39\uff1bFISTING_+COL)\u505c\u8f66=\u505c\u8f66\u3002WITH COLUN RENAMED(COL\uff0c&#39\uff1bPARKING_##+COL)\u822a\u73ed=\u822a\u73ed\u3002\u52a0\u5165(Parking\uff0con=&#39\uff1bFlight_code&#39\uff1b\uff0cHow=##39\uff1bLeft&39\uff1b)\u822a\u73ed=\u822a\u73ed\u3002\u9009\u62e9(F.ol(&#39\uff1bFLASS_START_TIME&#39\uff1b)\u3002\u522b\u540d(&#39\uff1bFIRST_START_TIME&#39\uff1b)\uff0cF.COL(&#39\uff1bFIRTS_END_TIME&#39\uff1b)\u3002\u522b\u540d(&#39\uff1bFIRST_END_TIME&#39\uff1b)\uff0cF.COL(&#39\uff1bPARKING_TOTAL_TIME&#39\uff1b)\u3002\u522b\u540d(&#39\uff1bCLIENT_PARKING_TOTAL_TIME&#39\uff1b))#\u597d\u7684\u822a\u73ed=\u822a\u73ed\u3002\u522b\u540d(\u822a\u73ed)\u505c\u8f66=\u505c\u8f66\u3002\u522b\u540d(\u505c\u8f66)\u822a\u73ed=\u822a\u73ed\u3002\u52a0\u5165(Parking\uff0con=&#39\uff1bFlight_code&#39\uff1b\uff0cHow=##39\uff1bLeft&39\uff1b)\u822a\u73ed=\u822a\u73ed\u3002\u9009\u62e9(F.ol(&#39\uff1bflights.start_time&#39\uff1b))\u3002\u522b\u540d(&#39\uff1bFIRST_START_TIME&#39\uff1b)\uff0cF.COL(&#39\uff1bflights.end_Time&#39\uff1b)\u3002\u522b\u540d(&#39\uff1bFIRST_END_TIME&#39\uff1b)\uff0cF.COL(&#39\uff1bPARKIN.TOTAL_TIME&#39\uff1b)\u3002\u522b\u540d(&#39\uff1bCLIENT_PARKING_TOTAL_TIME&#39\uff1b)\n\u5982\u679c\u4e24\u4e2a\u5217\u90fd\u4e0d\u9700\u8981\uff0c\u6700\u597d\u5728\u8fde\u63a5\u4e4b\u524d\u5220\u9664\u91cd\u53e0\u7684\u5217\uff1b\n\u5982\u679c\u60a8\u786e\u5b9e\u9700\u8981\u8fd9\u4e24\u4e2a\u540d\u79f0\uff0c\u6700\u597d\u5728\u52a0\u5165\u4e4b\u524d\u5c06\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u91cd\u547d\u540d\uff1b\n\u5728\u8f93\u51fa\u6570\u636e\u96c6\u4e4b\u524d\uff0c\u5e94\u59cb\u7ec8\u89e3\u6790\u4e0d\u660e\u786e\u7684\u5217\u3002\u8fd0\u884c\u5b8c\u8f6c\u6362\u540e\uff0c\u60a8\u5c06\u65e0\u6cd5\u518d\u533a\u5206\u5b83\u4eec\u3002\n\u5173\u4e8e\u8054\u63a5\u7684\u6700\u540e\u4e00\u53e5\u8bdd\u662f\uff0c\u4e0d\u8981\u4f7f\u7528.dropDuplates()\u6216.Distant()\u4f5c\u4e3a\u62d0\u6756\u3002\u5982\u679c\u89c2\u5bdf\u5230\u610f\u5916\u7684\u91cd\u590d\u884c\uff0c\u90a3\u4e48\u51fa\u73b0\u8fd9\u4e9b\u91cd\u590d\u884c\u51e0\u4e4e\u603b\u662f\u6709\u4e00\u4e2a\u6839\u672c\u539f\u56e0\u3002\u6dfb\u52a0.dropDuplates()\u53ea\u4f1a\u5c4f\u853d\u6b64\u95ee\u9898\uff0c\u5e76\u589e\u52a0\u8fd0\u884c\u65f6\u7684\u5f00\u9500\u3002\n\u94fe\u63a5\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u6709\u4e89\u8bae\u7684\u8bdd\u9898\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u56fa\u6267\u5df1\u89c1\u7684\u6307\u5357\uff0c\u6211\u4eec\u9009\u62e9\u5efa\u8bae\u5bf9\u94fe\u63a5\u7684\u4f7f\u7528\u8fdb\u884c\u4e00\u4e9b\u9650\u5236\u3002\u6709\u5173\u6b64\u5efa\u8bae\u80cc\u540e\u7684\u57fa\u672c\u539f\u7406\u7684\u8ba8\u8bba\uff0c\u8bf7\u53c2\u9605\u672c\u8282\u7684\u7ed3\u8bba\u3002\n\u907f\u514d\u5c06\u8868\u8fbe\u5f0f\u94fe\u63a5\u5230\u4e0d\u540c\u7c7b\u578b\u7684\u591a\u884c\u8868\u8fbe\u5f0f\u4e2d\uff0c\u7279\u522b\u662f\u5f53\u5b83\u4eec\u5177\u6709\u4e0d\u540c\u7684\u884c\u4e3a\u6216\u4e0a\u4e0b\u6587\u65f6\u3002\u4f8b\u5982\uff0c\u6df7\u5408\u67f1\u521b\u5efa\u6216\u52a0\u5165\u9009\u62e9\u548c\u8fc7\u6ee4\u3002\n#BAD df=(df.\u3002\u9009\u62e9(&#39\uff1ba&#39\uff1b\uff0c&#39\uff1bb&#39\uff1b\uff0c&#39\uff1bc&#39\uff1b\uff0c&#39\uff1b\u952e&#39\uff1b)\u3002\u8fc7\u6ee4\u5668(F.ol(&#39\uff1ba&#39\uff1b)==&#39\uff1b\u771f\u5b9e\u6027&#39\uff1b)\u3002With Column(&#39\uff1bboverc&39\uff1b\uff0cF.ol(&#39\uff1bb&39\uff1b)/F.coln(&#39\uff1bc&#39\uff1b))\u3002\u52a0\u5165(df2\uff0c&#39\uff1b\u952e&#39\uff1b\uff0cHOW=#39\uff1b\u5185\u90e8&#39\uff1b)\u3002\u52a0\u5165(DF3\uff0c&#39\uff1bKEY&#39\uff1b\uff0cHOW=&#39\uff1bLEFT&#39\uff1b)\u3002DROP(&#39\uff1bc&#39\uff1b)#Better(\u5206\u6b65\u9aa4)#\u7b2c\u4e00\uff1a\u6211\u4eec\u9009\u62e9\u5e76\u88c1\u526a\u6211\u4eec\u9700\u8981\u7684\u6570\u636e#\u7b2c\u4e8c\uff1a\u6211\u4eec\u521b\u5efa\u9700\u8981\u7684\u5217#\u7b2c\u4e09\uff1a\u8fde\u63a5\u5176\u4ed6\u6570\u636e\u5e27df=(Df)\u3002\u9009\u62e9(&#39\uff1ba&#39\uff1b\uff0c&#39\uff1bb&#39\uff1b\uff0c&#39\uff1bc&#39\uff1b\uff0c&#39\uff1b\u952e&#39\uff1b)\u3002\u8fc7\u6ee4\u5668(F.ol(&#39\uff1ba&#39\uff1b)==&#39\uff1b\u771f\u5b9e\u6027&#39\uff1b)df=df\u3002\u4f7f\u7528Column(&#39\uff1bboverc&39\uff1b\uff0cF.ol(&#39\uff1bb&39\uff1b)/F.coln(&#39\uff1bc&#39\uff1b))df=(df\u3002\u52a0\u5165(df2\uff0c&#39\uff1b\u952e&#39\uff1b\uff0cHOW=#39\uff1b\u5185\u90e8&#39\uff1b)\u3002\u52a0\u5165(DF3\uff0c&#39\uff1bKEY&#39\uff1b\uff0cHOW=&#39\uff1bLEFT&#39\uff1b)\u3002\u4e22\u5f03(&#39\uff1bc&#39\uff1b)\u3002\n\u5c06\u6bcf\u7ec4\u8868\u8fbe\u5f0f\u9694\u79bb\u5230\u5176\u81ea\u5df1\u7684\u903b\u8f91\u4ee3\u7801\u5757\u4e2d\u63d0\u9ad8\u4e86\u6613\u8bfb\u6027\uff0c\u5e76\u4e14\u66f4\u5bb9\u6613\u627e\u5230\u76f8\u5173\u903b\u8f91\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u4ee3\u7801\u7684\u8bfb\u8005\u53ef\u80fd\u4f1a\u8df3\u5230\u4ed6\u4eec\u770b\u5230\u6570\u636e\u5e27\u88ab\u5206\u914ddf=df\u7684\u4f4d\u7f6e\u3002\n#BAD df=(df.\u3002\u9009\u62e9(&#39\uff1bfoo&#39\uff1b\uff0c&#39\uff1bbar&#39\uff1b\uff0c&#39\uff1bfoobar&#39\uff1b\uff0c&#39\uff1babc&#39\uff1b)\u3002\u8fc7\u6ee4\u5668(F.ol(&#39\uff1babc&#39\uff1b)==123)\u3002JOIN(ANTHER_TABLE\uff0c&#39\uff1bSOME_FIELD&#39\uff1b)#Better df=(df.\u3002\u9009\u62e9(&#39\uff1bfoo&#39\uff1b\uff0c&#39\uff1bbar&#39\uff1b\uff0c&#39\uff1bfoobar&#39\uff1b\uff0c&#39\uff1babc&#39\uff1b)\u3002\u8fc7\u6ee4\u5668(F.ol(&#39\uff1bABC&#39\uff1b)==123)df=df\u3002JOIN(ANTHER_TABLE\uff0c&#39\uff1bSOME_FIELD&#39\uff1b\uff0cHOW=&#39\uff1bINTERNAL&#39\uff1b)\u3002\n\u5c06\u8868\u8fbe\u5f0f\u94fe\u63a5\u5728\u4e00\u8d77\u662f\u6709\u6b63\u5f53\u7406\u7531\u7684\u3002\u8fd9\u4e9b\u901a\u5e38\u8868\u793a\u539f\u5b50\u903b\u8f91\u6b65\u9aa4\uff0c\u5e76\u4e14\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u5728\u540c\u4e00\u5757\u4e2d\u5e94\u7528\u6700\u591a\u5305\u542b\u6570\u5b57\u94fe\u63a5\u8868\u8fbe\u5f0f\u7684\u89c4\u5219\uff0c\u4ee5\u4fdd\u6301\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u4e0d\u8d85\u8fc75\u6761\u8bed\u53e5\u94fe\u3002\n\u5982\u679c\u60a8\u53d1\u73b0\u60a8\u6b63\u5728\u5236\u9020\u66f4\u957f\u7684\u94fe\u6761\uff0c\u6216\u8005\u56e0\u4e3a\u53d8\u91cf\u7684\u5927\u5c0f\u800c\u9047\u5230\u9ebb\u70e6\uff0c\u8bf7\u8003\u8651\u5c06\u903b\u8f91\u63d0\u53d6\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u51fd\u6570\u4e2d\uff1a\n#Bad Customers_with_Shipping_Address=(Customers_with_Shipping_Address\u3002\u9009\u62e9(&#39\uff1ba&#39\uff1b\uff0c&#39\uff1bb&#39\uff1b\uff0c&#39\uff1bc&#39\uff1b\uff0c&#39\uff1b\u952e&#39\uff1b)\u3002\u8fc7\u6ee4\u5668(F.ol(&#39\uff1ba&#39\uff1b)==&#39\uff1b\u771f\u5b9e\u6027&#39\uff1b)\u3002With Column(&#39\uff1bboverc&39\uff1b\uff0cF.ol(&#39\uff1bb&39\uff1b)/F.coln(&#39\uff1bc&#39\uff1b))\u3002Join(df2\uff0c&#39\uff1bkey&#39\uff1b\uff0cHow=&#39\uff1bInternal&#39\uff1b))#Also Bad Customers_with_Shipping_Address=Customers_with_Shipping_Address\u3002\u9009\u62e9(&#39\uff1ba&#39\uff1b\uff0c&#39\uff1bb&#39\uff1b\uff0c&#39\uff1bc&#39\uff1b\uff0c&#39\uff1bkey&#39\uff1b)Customers_With_Shipping_Address=Customers_With_Shipping_Address\u3002\u7b5b\u9009\u5668(F.ol(&#39\uff1ba&#39\uff1b)==&#39\uff1btrue&39\uff1b)Customers_With_Shipping_Address=Customers_With_Shipping_Address\u3002With Column(&#39\uff1bboverc&39\uff1b\uff0cF.ol(&#39\uff1bb&#39\uff1b)/F.ol(&#39\uff1bc&#39\uff1b))Customers_With_Shipping_Address=Customers_With_Shipping_Address\u3002Join(df2\uff0c&#39\uff1bkey&#39\uff1b\uff0cHOW=&#39\uff1bInternal&#39\uff1b)#Better def Join_Customers_with_Shipping_Address(Customers\uff0cdf_to_Join)\uff1aCustomers=(Customers.\u3002\u9009\u62e9(&#39\uff1ba&#39\uff1b\uff0c&#39\uff1bb&#39\uff1b\uff0c&#39\uff1bc&#39\uff1b\uff0c&#39\uff1b\u952e&#39\uff1b)\u3002\u7b5b\u9009\u5668(F.ol(&#39\uff1ba&#39\uff1b)==&#39\uff1b\u771f\u5b9e\u6027&#39\uff1b))Customers=Customers\u3002With Column(&#39\uff1bboverc&39\uff1b\uff0cF.ol(&#39\uff1bb&39\uff1b)/F.ol(&#39\uff1bc&39\uff1b))Customers=Customers\u3002JOIN(DF_TO_JOIN\uff0c&#39\uff1bKEY&#39\uff1b\uff0cHOW=&#39\uff1bINTERNAL&39\uff1b)\u9000\u8d27\u5ba2\u6237\u3002\n3\u6761\u4ee5\u4e0a\u8bed\u53e5\u94fe\u662f\u5206\u89e3\u6210\u5355\u72ec\u7684\u3001\u547d\u540d\u826f\u597d\u7684\u51fd\u6570\u7684\u4e3b\u8981\u5019\u9009\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u5c01\u88c5\u4e86\u9694\u79bb\u7684\u903b\u8f91\u5757\u3002\nPySpark\u4ee3\u7801\u548cSQL\u4ee3\u7801\u7684\u533a\u522b\u3002\u94fe\u63a5\u662f\u4e0e\u5927\u591a\u6570(\u5982\u679c\u4e0d\u662f\u5168\u90e8)\u5176\u4ed6Python\u6837\u5f0f\u80cc\u9053\u800c\u9a70\u7684\u3002\u60a8\u4e0d\u662f\u5728Python\u4e2d\u94fe\u63a5\uff0c\u800c\u662f\u8d4b\u503c\u3002\n\u4e0d\u9f13\u52b1\u521b\u5efa\u5927\u578b\u5355\u4ee3\u7801\u5757\u3002\u8fd9\u4e9b\u901a\u5e38\u4f5c\u4e3a\u547d\u540d\u51fd\u6570\u63d0\u53d6\u4f1a\u66f4\u6709\u610f\u4e49\u3002\n\u5b83\u4e0d\u9700\u8981\u5168\u90e8\u6216\u4e0d\u9700\u8981\uff0c\u4f46\u6700\u591a\u4e94\u884c\u94fe\u63a5\u5c31\u53ef\u4ee5\u5728\u5b9e\u7528\u6027\u548c\u6613\u8bfb\u6027\u4e4b\u95f4\u53d6\u5f97\u5e73\u8861\u3002\n\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fIDE\uff0c\u5219\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u4f7f\u7528\u81ea\u52a8\u63d0\u53d6\u6216\u6267\u884c\u4ee3\u7801\u79fb\u52a8(\u5373\uff1apycharm\u4e2d\u7684cmd+Shift+Up)\u3002\n\u53ef\u4ee5\u94fe\u63a5\u8868\u8fbe\u5f0f\u7684\u539f\u56e0\u662f\u56e0\u4e3aPySpark\u662f\u4eceSpark\u5f00\u53d1\u7684\uff0cSpark\u6765\u81eaJVM\u8bed\u8a00\u3002\u8fd9\u610f\u5473\u7740\u4f20\u8f93\u4e86\u4e00\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u7279\u522b\u662f\u94fe\u5f0f\u6a21\u5f0f\u3002\u4f46\u662f\uff0cPython\u4e0d\u80fd\u4f18\u96c5\u5730\u652f\u6301\u591a\u884c\u8868\u8fbe\u5f0f\uff0c\u552f\u4e00\u7684\u9009\u62e9\u662f\u63d0\u4f9b\u663e\u5f0f\u6362\u884c\u7b26\uff0c\u6216\u8005\u5c06\u8868\u8fbe\u5f0f\u62ec\u5728\u5706\u62ec\u53f7\u4e2d\u3002\u5982\u679c\u94fe\u53d1\u751f\u5728\u6839\u8282\u70b9\uff0c\u5219\u53ea\u9700\u8981\u63d0\u4f9b\u663e\u5f0f\u6362\u884c\u7b26\u3002\u4f8b\u5982\uff1a\n#\u9700\u8981`\\`df=df\u3002\u7b5b\u9009\u5668(F.ol(&#39\uff1bevent&#39\uff1b)==&#39\uff1b\u6b63\u5728\u6267\u884c&#39\uff1b)\\\u3002\u8fc7\u6ee4\u5668(F.ol(&#39\uff1bHAS_TESTS&#39\uff1b)==True)\\\u3002\u5220\u9664(&#39\uff1bhas_tests&#39\uff1b)#\u94fe\u4e0d\u5728\u6839\u8282\u70b9\u4e2d\uff0c\u56e0\u6b64\u5b83\u4e0d\u9700\u8981`\\`df=df\u3002With Column(&#39\uff1b\u5b89\u5168&#39\uff1b\uff0cF.When(F.ol(&#39\uff1bhas_test&39\uff1b)==True\uff0c&#39\uff1bis safe&#39\uff1b)\u3002\u5f53(F.ol(&#39\uff1bHas_Executed&#39\uff1b)==True\uff0c&#39\uff1b\u6ca1\u6709\u6d4b\u8bd5\u4f46\u8fd0\u884c&#39\uff1b)\u3002\u5426\u5219(&#39\uff1b\u4e0d\u5b89\u5168&#39\uff1b)\u3002\n\u4e3a\u4fdd\u6301\u4e00\u81f4\uff0c\u8bf7\u5c06\u6574\u4e2a\u8868\u8fbe\u5f0f\u653e\u5165\u5355\u4e2a\u62ec\u53f7\u5757\u4e2d\uff0c\u5e76\u907f\u514d\u4f7f\u7528\\\uff1a\n#BAD DF=DF\u3002\u7b5b\u9009\u5668(F.ol(&#39\uff1bevent&#39\uff1b)==&#39\uff1b\u6b63\u5728\u6267\u884c&#39\uff1b)\\\u3002\u8fc7\u6ee4\u5668(F.ol(&#39\uff1bHAS_TESTS&#39\uff1b)==True)\\\u3002Drop(&#39\uff1bhas_tests&#39\uff1b)#Good df=(df.\u3002\u7b5b\u9009\u5668(F.ol(&#39\uff1bevent&#39\uff1b)==&#39\uff1b\u6b63\u5728\u6267\u884c&#39\uff1b)\u3002\u7b5b\u9009\u5668(F.ol(&#39\uff1bHAS_TESTS&#39\uff1b)==True)\u3002\u4e22\u5f03(&#39\uff1bHAS_TESTS&#39\uff1b)\u3002\n\u8981\u5c0f\u5fc3\u51fd\u6570\u53d8\u5f97\u592a\u5927\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u6587\u4ef6\u4e0d\u5e94\u8be5\u8d85\u8fc7250\u884c\uff0c\u4e00\u4e2a\u51fd\u6570\u4e0d\u5e94\u8be5\u8d85\u8fc770\u884c\u3002\n\u5c3d\u91cf\u5c06\u60a8\u7684\u4ee3\u7801\u4fdd\u5b58\u5728\u903b\u8f91\u5757\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u591a\u884c\u5f15\u7528\u76f8\u540c\u7684\u4e1c\u897f\uff0c\u8bd5\u7740\u628a\u5b83\u4eec\u653e\u5728\u4e00\u8d77\u3002\u5c06\u5b83\u4eec\u5206\u5f00\u4f1a\u964d\u4f4e\u4e0a\u4e0b\u6587\u548c\u53ef\u8bfb\u6027\u3002\n\u6d4b\u8bd5\u60a8\u7684\u4ee3\u7801\uff01\u5982\u679c\u53ef\u4ee5\u8fd0\u884c\u672c\u5730\u6d4b\u8bd5\uff0c\u8bf7\u8fd9\u6837\u505a\uff0c\u5e76\u786e\u4fdd\u60a8\u7684\u65b0\u4ee3\u7801\u662fc++\u3002\n.", "note_en": "PySpark is a wrapper language that allows users to interface with an Apache Spark backend to quickly process data. Spark can operate on massive datasets across a distributed network of servers, providing major performance and reliability benefits when utilized correctly. It presents challenges, even for experienced Python developers, as the PySpark syntax draws on the JVM heritage of Spark and therefore implements code patterns that may be unfamiliar.\n This opinionated guide to PySpark code style presents common situations we&#39;ve encountered and the associated best practices based on the most frequent recurring topics across PySpark repos.\n Beyond PySpark specifics, the general practices of clean code are important in PySpark repositories- the Google  PyGuide is a strong starting point for learning more about these practices.\n   The preferred option is more complicated, longer, and polluted - and correct. While typically it is best to avoid using F.col() altogether, there are certain cases where using it, or the alternative explicit selection, is unavoidable. There is, however, good reason to prefer the second example over the first one.\n When using explicit columns as in the first case, both the dataframe name and schema are explicitly bound to the dataframe variable. This means that if  df1 is deleted or renamed, the reference  df1.colA will break.\n By contrast,  F.col(&#39;colA&#39;) will always reference a column designated  &#39;colA&#39; in the dataframe being operated on, named  df, in this case. It does not require keeping track of other dataframes&#39; states at all, so the code becomes more local and less prone to \u201cspooky interaction at a distance,\u201d which is often challenging to debug.\n  If the column name has a space or other unsupported character that requires access by the bracketoperator then  df1[&#39;colA&#39;] is just as difficult to write as  F.col(&#39;colA&#39;);\n Assigning an abstract expression like  F.col(&#39;prod_status&#39;) == &#39;Delivered&#39; to a variable makes it reusablefor multiple dataframes, while  df.prod_status == &#39;Delivered&#39; is always bound to df\n Fortunately, a convoluted expression with  F.col() is usually not required.  Prior to Spark 3.0, this was necessary for some functions, like  F.upper(), but since then the API has become much more uniform.\n  In some contexts there may be access to columns from more than one dataframe, and there may be an overlap in names. A common example is in matching expressions like  df.join(df2, on=(df.key == df2.key), how=&#39;left&#39;). In such cases it is fine to reference columns by their dataframe directly. You can also disambiguate joins using dataframe aliases (see more in the  Joins section in this guide).\n  Logical operations, which often reside inside  .filter() or  F.when(), need to be readable. We apply the same rule as with chaining functions, keeping logic expressions inside the same code block to  three (3) expressions at most. If they grow longer, it is often a sign that the code can be simplified or extracted out. Extracting out complex logical operations into variables makes the code easier to read and reason about, which also reduces bugs.\n # bad F. when( ( F. col( &#39;prod_status&#39;)  ==  &#39;Delivered&#39;)  | ((( F. datediff( &#39;deliveryDate_actual&#39;,  &#39;current_date&#39;)  &lt;  0)  &amp; (( F. col( &#39;currentRegistration&#39;)  !=  &#39;&#39;)  | (( F. datediff( &#39;deliveryDate_actual&#39;,  &#39;current_date&#39;)  &lt;  0)  &amp; (( F. col( &#39;originalOperator&#39;)  !=  &#39;&#39;)  | ( F. col( &#39;currentOperator&#39;)  !=  &#39;&#39;)))))),  &#39;In Service&#39;)\n The code above can be simplified in different ways. To start, focus on grouping the logic steps in a few named variables. PySpark requires that expressions are wrapped with parentheses. This, mixed with actual parenthesis to group logical operations, can hurt readability. For example the code above has a redundant  (F.datediff(df.deliveryDate_actual, df.current_date) &lt; 0) that the original author didn&#39;t notice because it&#39;s very hard to spot.\n # better has_operator  = (( F. col( &#39;originalOperator&#39;)  !=  &#39;&#39;)  | ( F. col( &#39;currentOperator&#39;)  !=  &#39;&#39;)) delivery_date_passed  = ( F. datediff( &#39;deliveryDate_actual&#39;,  &#39;current_date&#39;)  &lt;  0) has_registration  = ( F. col( &#39;currentRegistration&#39;). rlike( &#39;.+&#39;)) is_delivered  = ( F. col( &#39;prod_status&#39;)  ==  &#39;Delivered&#39;) F. when( is_delivered  | ( delivery_date_passed  &amp; ( has_registration  |  has_operator)),  &#39;In Service&#39;)\n The above example drops the redundant expression and is easier to read. We can improve it further by reducing the number of operations.\n # good has_operator  = (( F. col( &#39;originalOperator&#39;)  !=  &#39;&#39;)  | ( F. col( &#39;currentOperator&#39;)  !=  &#39;&#39;)) delivery_date_passed  = ( F. datediff( &#39;deliveryDate_actual&#39;,  &#39;current_date&#39;)  &lt;  0) has_registration  = ( F. col( &#39;currentRegistration&#39;). rlike( &#39;.+&#39;)) is_delivered  = ( F. col( &#39;prod_status&#39;)  ==  &#39;Delivered&#39;) is_active  = ( has_registration  |  has_operator) F. when( is_delivered  | ( delivery_date_passed  &amp;  is_active),  &#39;In Service&#39;)\n Note how the  F.when expression is now succinct and readable and the desired behavior is clear to anyone reviewing this code. The reader only needs to visit the individual expressions if they suspect there is an error. It also makes each chunk of logic easy to test if you have unit tests in your code, and want to abstract them as functions.\n There is still some duplication of code in the final example: how to remove that duplication is an exercise for the reader.\n  Doing a select at the beginning of a PySpark transform, or before returning, is considered good practice. This  select statement specifies the contract with both the reader and the code about the expected dataframe schema for inputs and outputs. Any select should be seen as a cleaning operation that is preparing the dataframe for consumption by the next step in the transform.\n Keep select statements as simple as possible. Due to common SQL idioms, allow only  one function from  spark.sql.function to be used per selected column, plus an optional  .alias() to give it a meaningful name. Keep in mind that this should be used sparingly. If there are more than  three such uses in the same select, refactor it into a separate function like  clean_&lt;dataframe name&gt;() to encapsulate the operation.\n Expressions involving more than one dataframe, or conditional operations like  .when() are discouraged to be used in a select, unless required for performance reasons.\n    The  select() statement redefines the schema of a dataframe, so it naturally supports the inclusion or exclusion of columns, old and new, as well as the redefinition of pre-existing ones. By centralising all such operations in a single statement, it becomes much easier to identify the final schema, which makes code more readable. It also makes code more concise.\n      # bad df. select( (( F. coalesce( F. unix_timestamp( &#39;closed_at&#39;),  F. unix_timestamp())  -  F. unix_timestamp( &#39;created_at&#39;))  /  86400). alias( &#39;days_open&#39;)) # good df. withColumn(  &#39;days_open&#39;, ( F. coalesce( F. unix_timestamp( &#39;closed_at&#39;),  F. unix_timestamp())  -  F. unix_timestamp( &#39;created_at&#39;))  /  86400)\n Avoid including columns in the select statement if they are going to remain unused and choose instead an explicit set of columns - this is a preferred alternative to using  .drop() since it guarantees that schema mutations won&#39;t cause unexpected columns to bloat your dataframe. However, dropping columns isn&#39;t inherintly discouraged in all cases; for instance- it is commonly appropriate to drop columns after joins since it is common for joins to introduce redundant columns.\n Finally, instead of adding new columns via the select statement, using  .withColumn() is recommended instead for single columns. When adding or manipulating tens or hundreds of columns, use a single  .select() for performance reasons.\n  If you need to add an empty column to satisfy a schema, always use  F.lit(None) for populating that column. Never use an empty string or some other string signalling an empty value (such as  NA).\n Beyond being semantically correct, one practical reason for using  F.lit(None) is preserving the ability to use utilities like  isNull, instead of having to verify empty strings, nulls, and  &#39;NA&#39;, etc.\n   While comments can provide useful insight into code, it is often more valuable to refactor the code to improve its readability. The code should be readable by itself. If you are using comments to explain the logic step by step, you should refactor it.\n # bad # Cast the timestamp columns cols  = [ &#39;start_date&#39;,  &#39;delivery_date&#39;] for  c  in  cols:  df  =  df. withColumn( c,  F. from_unixtime( F. col( c)  /  1000). cast( TimestampType()))\n In the example above, we can see that those columns are getting cast to Timestamp. The comment doesn&#39;t add much value. Moreover, a more verbose comment might still be unhelpful if it onlyprovides information that already exists in the code. For example:\n # bad # Go through each column, divide by 1000 because millis and cast to timestamp cols  = [ &#39;start_date&#39;,  &#39;delivery_date&#39;] for  c  in  cols:  df  =  df. withColumn( c,  F. from_unixtime( F. col( c)  /  1000). cast( TimestampType()))\n Instead of leaving comments that only describe the logic you wrote, aim to leave comments that give context, that explain the &#34; why&#34; of decisions you made when writing the code. This is particularly important for PySpark, since the reader can understand your code, but often doesn&#39;t have context on the data that feeds into your PySpark transform. Small pieces of logic might have involved hours of digging through data to understand the correct behavior, in which case comments explaining the rationale are especially valuable.\n # good # The consumer of this dataset expects a timestamp instead of a date, and we need # to adjust the time by 1000 because the original datasource is storing these as millis # even though the documentation says it&#39;s actually a date. cols  = [ &#39;start_date&#39;,  &#39;delivery_date&#39;] for  c  in  cols:  df  =  df. withColumn( c,  F. from_unixtime( F. col( c)  /  1000). cast( TimestampType()))\n  It is highly recommended to avoid UDFs in all situations, as they are dramatically less performant than native PySpark. In most situations, logic that seems to necessitate a UDF can be refactored to use only native PySpark functions.\n  Be careful with joins! If you perform a left join, and the right side has multiple matches for a key, that row will be duplicated as many times as there are matches. This is called a &#34;join explosion&#34; and can dramatically bloat the output of your transforms job. Always double check your assumptions to see that the key you are joining on is unique, unless you are expecting the multiplication.\n Bad joins are the source of many tricky-to-debug issues. There are some things that help like specifying the  how explicitly, even if you are using the default value  (inner):\n # bad flights  =  flights. join( aircraft,  &#39;aircraft_id&#39;) # also bad flights  =  flights. join( aircraft,  &#39;aircraft_id&#39;,  &#39;inner&#39;) # good flights  =  flights. join( aircraft,  &#39;aircraft_id&#39;,  how = &#39;inner&#39;)\n Avoid  right joins. If you are about to use a  right join, switch the order of your dataframes and use a  left join instead. It is more intuitive since the dataframe you are doing the operation on is the one that you are centering your join around.\n  Avoid renaming all columns to avoid collisions. Instead, give an alias to thewhole dataframe, and use that alias to select which columns you want in the end.\n # bad columns  = [ &#39;start_time&#39;,  &#39;end_time&#39;,  &#39;idle_time&#39;,  &#39;total_time&#39;] for  col  in  columns:  flights  =  flights. withColumnRenamed( col,  &#39;flights_&#39;  +  col)  parking  =  parking. withColumnRenamed( col,  &#39;parking_&#39;  +  col) flights  =  flights. join( parking,  on = &#39;flight_code&#39;,  how = &#39;left&#39;) flights  =  flights. select(  F. col( &#39;flights_start_time&#39;). alias( &#39;flight_start_time&#39;),  F. col( &#39;flights_end_time&#39;). alias( &#39;flight_end_time&#39;),  F. col( &#39;parking_total_time&#39;). alias( &#39;client_parking_total_time&#39;)) # good flights  =  flights. alias( &#39;flights&#39;) parking  =  parking. alias( &#39;parking&#39;) flights  =  flights. join( parking,  on = &#39;flight_code&#39;,  how = &#39;left&#39;) flights  =  flights. select(  F. col( &#39;flights.start_time&#39;). alias( &#39;flight_start_time&#39;),  F. col( &#39;flights.end_time&#39;). alias( &#39;flight_end_time&#39;),  F. col( &#39;parking.total_time&#39;). alias( &#39;client_parking_total_time&#39;))\n  It&#39;s probably best to drop overlapping columns  prior to joining if you don&#39;t need both;\n In case you do need both, it might be best to rename one of them prior to joining;\n You should always resolve ambiguous columns before outputting a dataset. After the transform is finished running you can no longer distinguish them.\n As a last word about joins, don&#39;t use  .dropDuplicates() or  .distinct() as a crutch. If unexpected duplicate rows are observed, there&#39;s almost always an underlying reason for why those duplicate rows appear. Adding  .dropDuplicates() only masks this problem and adds overhead to the runtime.\n  Chaining expressions is a contentious topic, however, since this is an opinionated guide, we are opting to recommend some limits on the usage of chaining. See the conclusion of this section for a discussion of the rationale behind this recommendation.\n Avoid chaining of expressions into multi-line expressions with different types, particularly if they have different behaviours or contexts. For example- mixing column creation or joining with selecting and filtering.\n # bad df  = (  df . select( &#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;key&#39;) . filter( F. col( &#39;a&#39;)  ==  &#39;truthiness&#39;) . withColumn( &#39;boverc&#39;,  F. col( &#39;b&#39;)  /  F. col( &#39;c&#39;)) . join( df2,  &#39;key&#39;,  how = &#39;inner&#39;) . join( df3,  &#39;key&#39;,  how = &#39;left&#39;) . drop( &#39;c&#39;)) # better (seperating into steps) # first: we select and trim down the data that we need # second: we create the columns that we need to have # third: joining with other dataframes df  = (  df . select( &#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;key&#39;) . filter( F. col( &#39;a&#39;)  ==  &#39;truthiness&#39;)) df  =  df. withColumn( &#39;boverc&#39;,  F. col( &#39;b&#39;)  /  F. col( &#39;c&#39;)) df  = (  df . join( df2,  &#39;key&#39;,  how = &#39;inner&#39;) . join( df3,  &#39;key&#39;,  how = &#39;left&#39;) . drop( &#39;c&#39;))\n Having each group of expressions isolated into its own logical code block improves legibility and makes it easier to find relevant logic.For example, a reader of the code below will probably jump to where they see dataframes being assigned  df = df....\n # bad df  = (  df . select( &#39;foo&#39;,  &#39;bar&#39;,  &#39;foobar&#39;,  &#39;abc&#39;) . filter( F. col( &#39;abc&#39;)  ==  123) . join( another_table,  &#39;some_field&#39;)) # better df  = (  df . select( &#39;foo&#39;,  &#39;bar&#39;,  &#39;foobar&#39;,  &#39;abc&#39;) . filter( F. col( &#39;abc&#39;)  ==  123)) df  =  df. join( another_table,  &#39;some_field&#39;,  how = &#39;inner&#39;)\n There are legitimate reasons to chain expressions together. These commonly represent atomic logic steps, and are acceptable. Apply a rule with a maximum of number chained expressions in the same block to keep the code readable.We recommend chains of no longer than 5 statements.\n If you find you are making longer chains, or having trouble because of the size of your variables, consider extracting the logic into a separate function:\n # bad customers_with_shipping_address  = (  customers_with_shipping_address . select( &#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;key&#39;) . filter( F. col( &#39;a&#39;)  ==  &#39;truthiness&#39;) . withColumn( &#39;boverc&#39;,  F. col( &#39;b&#39;)  /  F. col( &#39;c&#39;)) . join( df2,  &#39;key&#39;,  how = &#39;inner&#39;)) # also bad customers_with_shipping_address  =  customers_with_shipping_address. select( &#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;key&#39;) customers_with_shipping_address  =  customers_with_shipping_address. filter( F. col( &#39;a&#39;)  ==  &#39;truthiness&#39;) customers_with_shipping_address  =  customers_with_shipping_address. withColumn( &#39;boverc&#39;,  F. col( &#39;b&#39;)  /  F. col( &#39;c&#39;)) customers_with_shipping_address  =  customers_with_shipping_address. join( df2,  &#39;key&#39;,  how = &#39;inner&#39;) # better def  join_customers_with_shipping_address( customers,  df_to_join):  customers  = (  customers . select( &#39;a&#39;,  &#39;b&#39;,  &#39;c&#39;,  &#39;key&#39;) . filter( F. col( &#39;a&#39;)  ==  &#39;truthiness&#39;) )  customers  =  customers. withColumn( &#39;boverc&#39;,  F. col( &#39;b&#39;)  /  F. col( &#39;c&#39;))  customers  =  customers. join( df_to_join,  &#39;key&#39;,  how = &#39;inner&#39;)  return  customers\n Chains of more than 3 statement are prime candidates to factor into separate, well-named functions since they are already encapsulated, isolated blocks of logic.\n  Differentiation between PySpark code and SQL code. Chaining is something that goes against most, if not all, other Python styling. You don\u2019t chain in Python, you assign.\n Discourage the creation of large single code blocks. These would often make more sense extracted as a named function.\n It doesn\u2019t need to be all or nothing, but a maximum of five lines of chaining balances practicality with legibility.\n If you are using an IDE, it makes it easier to use automatic extractions or do code movements (i.e:  cmd + shift + up in pycharm)\n  The reason you can chain expressions is because PySpark was developed from Spark, which comes from JVM languages. This meant some design patterns were transported, specifically chainability. However, Python doesn&#39;t support multiline expressions gracefully and the only alternatives are to either provide explicit line breaks, or wrap the expression in parentheses. You only need to provide explicit line breaks if the chain happens at the root node. For example:\n # needs `\\` df  =  df. filter( F. col( &#39;event&#39;)  ==  &#39;executing&#39;)\\ . filter( F. col( &#39;has_tests&#39;)  ==  True)\\ . drop( &#39;has_tests&#39;) # chain not in root node so it doesn&#39;t need the `\\` df  =  df. withColumn( &#39;safety&#39;,  F. when( F. col( &#39;has_tests&#39;)  ==  True,  &#39;is safe&#39;) . when( F. col( &#39;has_executed&#39;)  ==  True,  &#39;no tests but runs&#39;) . otherwise( &#39;not safe&#39;))\n To keep things consistent, please wrap the entire expression into a single parenthesis block, and avoid using  \\:\n # bad df  =  df. filter( F. col( &#39;event&#39;)  ==  &#39;executing&#39;)\\ . filter( F. col( &#39;has_tests&#39;)  ==  True)\\ . drop( &#39;has_tests&#39;) # good df  = (  df . filter( F. col( &#39;event&#39;)  ==  &#39;executing&#39;) . filter( F. col( &#39;has_tests&#39;)  ==  True) . drop( &#39;has_tests&#39;))\n  Be wary of functions that grow too large. As a general rule, a fileshould not be over 250 lines, and a function should not be over 70 lines.\n Try to keep your code in logical blocks. For example, if you havemultiple lines referencing the same things, try to keep themtogether. Separating them reduces context and readability.\n Test your code! If you  can run the local tests, do so and makesure that your new code is c\n......", "posttime": "2020-10-21 16:07:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6837\u5f0f,style,\u4ee3\u7801", "title": "PySpark\u6837\u5f0f\u6307\u5357", "title_en": "PySpark Style Guide", "transed": 1, "url": "https://github.com/palantir/pyspark-style-guide", "via": "", "real_tags": ["\u6837\u5f0f", "style", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "40eb13feee3fbf6f736cf02175ed7f50.jpg", "infoid": 1030266, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u4e00\u4efd\u65b0\u7684\u62a5\u544a\uff0c\u8d85\u8fc710\u4e07\u540d\u5973\u6027\u7684\u5047\u88f8\u7167\u5df2\u7ecf\u4ece\u793e\u4ea4\u5a92\u4f53\u7167\u7247\u4e2d\u521b\u5efa\u51fa\u6765\uff0c\u5e76\u5728\u7f51\u4e0a\u5206\u4eab\u3002\n\u901a\u8fc7\u4eba\u5de5\u667a\u80fd(AI)\u5c06\u8863\u670d\u4ece\u5973\u6027\u7167\u7247\u4e2d\u6570\u5b57\u5316\u79fb\u9664\uff0c\u5e76\u5728\u5373\u65f6\u901a\u8baf\u5e94\u7528Telegram\u4e0a\u4f20\u64ad\u3002\n\u60c5\u62a5\u516c\u53f8Sensity\u7684\u62a5\u544a\u79f0\uff0c\u5176\u4e2d\u4e00\u4e9b\u76ee\u6807\u4f3c\u4e4e\u662f\u672a\u6210\u5e74\u4eba\u3002\nDeepfake\u662f\u8ba1\u7b97\u673a\u751f\u6210\u7684\uff0c\u901a\u5e38\u662f\u903c\u771f\u7684\u56fe\u50cf\u548c\u89c6\u9891\uff0c\u57fa\u4e8e\u771f\u5b9e\u7684\u6a21\u677f\u3002\u5b83\u7684\u7528\u9014\u4e4b\u4e00\u662f\u5236\u4f5c\u540d\u4eba\u7684\u5047\u8272\u60c5\u89c6\u9891\u526a\u8f91\u3002\n\u4f46Sensity\u9996\u5e2d\u6267\u884c\u5b98\u4e54\u6cbb\u00b7\u5e15\u7279\u91cc\u5c3c(Giorgio Patrini)\u8868\u793a\uff0c\u4f7f\u7528\u79c1\u4eba\u7167\u7247\u7684\u8f6c\u53d8\u76f8\u5bf9\u8f83\u65b0\u3002\n\u4ed6\u8b66\u544a\u8bf4\uff0c\u62e5\u6709\u4e00\u4e2a\u62e5\u6709\u516c\u5f00\u7167\u7247\u7684\u793e\u4ea4\u5a92\u4f53\u8d26\u6237\u8db3\u4ee5\u8ba9\u4efb\u4f55\u4eba\u6210\u4e3a\u653b\u51fb\u76ee\u6807\u3002\n\u8fd9\u4e2a\u4eba\u5de5\u667a\u80fd\u9a71\u52a8\u7684\u673a\u5668\u4eba\u751f\u6d3b\u5728\u7535\u62a5\u79c1\u4eba\u6d88\u606f\u9891\u9053\u5185\u3002\u7528\u6237\u53ef\u4ee5\u5411\u673a\u5668\u4eba\u53d1\u9001\u4e00\u5f20\u5973\u6027\u7684\u7167\u7247\uff0c\u5b83\u5c06\u5728\u51e0\u5206\u949f\u5185\u514d\u8d39\u6570\u5b57\u8131\u6389\u5979\u7684\u8863\u670d\u3002\n\u82f1\u56fd\u5e7f\u64ad\u516c\u53f8\u6d4b\u8bd5\u4e86\u591a\u5f20\u56fe\u7247\uff0c\u6240\u6709\u56fe\u7247\u90fd\u5f81\u5f97\u4e86\u53d7\u8bd5\u8005\u7684\u540c\u610f\uff0c\u6ca1\u6709\u4e00\u5f20\u662f\u5b8c\u5168\u771f\u5b9e\u7684--\u6211\u4eec\u7684\u7ed3\u679c\u5305\u62ec\u4e00\u5f20\u6a2a\u9694\u819c\u4e0a\u6709\u809a\u8110\u7684\u5973\u4eba\u7684\u7167\u7247\u3002\n\u53bb\u5e74\uff0c\u4e00\u6b3e\u7c7b\u4f3c\u7684\u5e94\u7528\u7a0b\u5e8f\u88ab\u5173\u95ed\uff0c\u4f46\u636e\u4fe1\u8be5\u8f6f\u4ef6\u6709\u7834\u89e3\u7248\u672c\u5728\u6d41\u901a\u3002\n\u8fd0\u884c\u8fd9\u9879\u670d\u52a1\u7684\u7ba1\u7406\u5458(\u4ec5\u88ab\u79f0\u4e3a\u201cP#34\uff1b\u201d)\u8bf4\uff1a\u201c\u6211\u4e0d\u5728\u4e4e\u90a3\u4e48\u591a\u3002\u201d\u8fd9\u662f\u4e0d\u5e26\u66b4\u529b\u7684\u5a31\u4e50\u8282\u76ee\u3002\n\u4ed6\u8fd8\u8bf4\uff0c\u56e2\u961f\u5173\u6ce8\u54ea\u4e9b\u7167\u7247\u88ab\u5206\u4eab\uff0c\u5f53\u6211\u4eec\u770b\u5230\u672a\u6210\u5e74\u4eba\u65f6\uff0c\u6211\u4eec\u4f1a\u6c38\u4e45\u5c4f\u853d\u7528\u6237\u3002\n\u4f46\u4ed6\u8bf4\uff0c\u662f\u5426\u4e0e\u4ed6\u4eba\u5206\u4eab\u8fd9\u5f20\u7167\u7247\u53d6\u51b3\u4e8e\u6700\u521d\u4f7f\u7528\u673a\u5668\u4eba\u521b\u5efa\u5b83\u7684\u4eba\u3002\n\u4ed6\u4e3a\u5b83\u7684\u76f8\u5bf9\u5371\u5bb3\u7a0b\u5ea6\u8fa9\u62a4\u8bf4\uff1a\u4e16\u754c\u4e0a\u6709\u6218\u4e89\u3001\u75be\u75c5\u548c\u8bb8\u591a\u6709\u5bb3\u7684\u4e1c\u897f\u3002\u4ed6\u8fd8\u58f0\u79f0\u4ed6\u5f88\u5feb\u5c31\u4f1a\u5220\u9664\u6240\u6709\u7684\u56fe\u7247\u3002\nSensity\u62a5\u544a\u79f0\uff0c2019\u5e747\u6708\u81f32020\u5e74\u671f\u95f4\uff0c\u7ea6\u6709104,852\u540d\u5973\u6027\u6210\u4e3a\u653b\u51fb\u76ee\u6807\uff0c\u5e76\u516c\u5f00\u5206\u4eab\u4e86\u5979\u4eec\u7684\u5047\u88f8\u7167\u3002\n\u5b83\u7684\u8c03\u67e5\u53d1\u73b0\uff0c\u4e00\u4e9b\u56fe\u7247\u4f3c\u4e4e\u672a\u6210\u5e74\uff0c\u8fd9\u8868\u660e\u4e00\u4e9b\u7528\u6237\u4e3b\u8981\u662f\u4f7f\u7528\u8be5\u673a\u5668\u4eba\u6765\u751f\u6210\u548c\u5206\u4eab\u604b\u7ae5\u7656\u5185\u5bb9\u3002\nSensity\u8868\u793a\uff0c\u8be5\u673a\u5668\u4eba\u5728\u4fc4\u7f57\u65af\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9VK\u4e0a\u6709\u5927\u91cf\u5e7f\u544a\uff0c\u8be5\u5e73\u53f0\u4e0a\u7684\u4e00\u9879\u8c03\u67e5\u663e\u793a\uff0c\u5927\u591a\u6570\u7528\u6237\u6765\u81ea\u4fc4\u7f57\u65af\u548c\u524d\u82cf\u8054\u56fd\u5bb6\u3002\n\u4f46VK\u8868\u793a\uff1a\u5b83\u4e0d\u5bb9\u5fcd\u5e73\u53f0\u4e0a\u7684\u6b64\u7c7b\u5185\u5bb9\u6216\u94fe\u63a5\uff0c\u5e76\u963b\u6b62\u4f20\u64ad\u8fd9\u4e9b\u5185\u5bb9\u6216\u94fe\u63a5\u7684\u793e\u533a\u3002\nSensity\u7684\u4e54\u6cbb\u00b7\u5e15\u7279\u91cc\u5c3c(Giorgio Patrini)\u8868\u793a\uff0c\u8bb8\u591a\u8fd9\u6837\u7684\u7f51\u7ad9\u6216\u5e94\u7528\u7a0b\u5e8f\u90fd\u4e0d\u4f1a\u9690\u85cf\u6216\u5728\u5730\u4e0b\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u4eec\u5e76\u4e0d\u662f\u4e25\u683c\u975e\u6cd5\u7684\uff0cSensity\u7684\u4e54\u6cbb\u00b7\u5e15\u7279\u91cc\u5c3c(Giorgio Patrini)\u8bf4\u3002\n\u62a5\u544a\u7684\u4f5c\u8005\u8bf4\uff0c\u4ed6\u4eec\u5df2\u7ecf\u4e0eTelegram\u3001VK\u548c\u76f8\u5173\u6267\u6cd5\u673a\u6784\u5206\u4eab\u4e86\u4ed6\u4eec\u7684\u6240\u6709\u8c03\u67e5\u7ed3\u679c\uff0c\u4f46\u6ca1\u6709\u5f97\u5230\u56de\u5e94\u3002\n\u201c\u6df1\u5ea6\u9020\u5047\u4e0e\u4fe1\u606f\u542f\u793a\u5f55\u201d\u4e00\u4e66\u7684\u4f5c\u8005\u59ae\u5a1c\u00b7\u5e0c\u514b\u8bf4\uff0c\u6df1\u5ea6\u9020\u5047\u7684\u521b\u9020\u8005\u904d\u5e03\u4e16\u754c\u5404\u5730\uff0c\u6cd5\u5f8b\u4fdd\u62a4\u6b63\u5728\u7528\u8fd9\u9879\u6280\u672f\u8fce\u5934\u8d76\u4e0a\u3002\u201c\u6df1\u5ea6\u9020\u5047\u4e0e\u4fe1\u606f\u672b\u65e5\u201d\u4e00\u4e66\u7684\u4f5c\u8005\u5c3c\u5a1c\u00b7\u5e0c\u514b\u8bf4\uff0c\u6df1\u5ea6\u9020\u5047\u7684\u521b\u9020\u8005\u904d\u5e03\u4e16\u754c\u5404\u5730\uff0c\u6cd5\u5f8b\u4fdd\u62a4\u6b63\u5728\u7528\u8fd9\u9879\u6280\u672f\u8fce\u5934\u8d76\u4e0a\u3002\n\u5185\u5bb9\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u53ea\u662f\u4e2a\u65f6\u95f4\u95ee\u9898\u3002\u5979\u8bf4\uff0c\u6df1\u5ea6\u5047\u5192\u8272\u60c5\u89c6\u9891\u7684\u6570\u91cf\u4f3c\u4e4e\u6bcf\u516d\u4e2a\u6708\u5c31\u4f1a\u7ffb\u4e00\u756a\u3002\n\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\uff0c\u6211\u4eec\u7684\u6cd5\u5f8b\u5236\u5ea6\u4e0d\u9002\u5408\u8fd9\u4e2a\u76ee\u7684\u3002\u7531\u4e8e\u8fd9\u4e9b\u6307\u6570\u6027\u7684\u6280\u672f\u8fdb\u6b65\uff0c\u793e\u4f1a\u53d8\u5316\u7684\u901f\u5ea6\u6bd4\u6211\u4eec\u60f3\u8c61\u7684\u8981\u5feb\uff0c\u800c\u6211\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u793e\u4f1a\u8fd8\u6ca1\u6709\u51b3\u5b9a\u5982\u4f55\u89c4\u8303\u8fd9\u4e00\u70b9\u3002\n\u5bf9\u4e8e\u5047\u8272\u60c5\u7684\u53d7\u5bb3\u8005\u6765\u8bf4\uff0c\u8fd9\u662f\u6bc1\u706d\u6027\u7684\u3002\u8fd9\u4f1a\u5f7b\u5e95\u98a0\u8986\u4ed6\u4eec\u7684\u751f\u6d3b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u89c9\u5f97\u53d7\u5230\u4e86\u4fb5\u72af\u548c\u7f9e\u8fb1\u3002\n\u53bb\u5e74\uff0c\u7f8e\u56fd\u5f17\u5409\u5c3c\u4e9a\u5dde\u6210\u4e3a\u9996\u6279\u53d6\u7f14\u6df1\u5ea6\u5047\u8d27\u7684\u5730\u65b9\u4e4b\u4e00\n\u82f1\u56fd\u73b0\u884c\u7684\u5173\u4e8e\u5047\u88f8\u7167\u7684\u6cd5\u5f8b\u6700\u8fd1\u5728\u4e00\u4efd\u5927\u5b66\u62a5\u544a\u4e2d\u88ab\u6279\u8bc4\u4e3a\u524d\u540e\u77db\u76fe\u3001\u8fc7\u65f6\u548c\u4ee4\u4eba\u56f0\u60d1\u3002\n\u5987\u5973\u63f4\u52a9\u6148\u5584\u673a\u6784\u7684\u9732\u897f\u00b7\u54c8\u5fb7\u5229(Lucy Hadley)\u8868\u793a\uff0c\u5c3d\u7ba1\u5728\u590d\u4ec7\u3001\u8272\u60c5\u548c\u88d9\u88c5\u7b49\u95ee\u9898\u4e0a\u53d6\u5f97\u4e86\u8fdb\u5c55\uff0c\u4f46\u6cd5\u5f8b\u4e0a\u4ecd\u7136\u5b58\u5728\u8bb8\u591a\u660e\u663e\u7684\u5dee\u8ddd\u3002\n\u867d\u7136\u8fd9\u4e9b\u7edf\u8ba1\u6570\u636e\u663e\u793a\u4e86\u6df1\u4f2a\u56fe\u50cf\u53ef\u80fd\u4f1a\u591a\u4e48\u666e\u904d\uff0c\u4f46\u76ee\u524d\u8fd9\u5e76\u4e0d\u662f\u4e00\u79cd\u5177\u4f53\u7684\u8fdd\u6cd5\u884c\u4e3a\u3002\n\u653f\u5e9c\u5df2\u6307\u793a\u6cd5\u5f8b\u59d4\u5458\u4f1a\u5ba1\u67e5\u82f1\u683c\u5170\u548c\u5a01\u5c14\u58eb\u56f4\u7ed5\u8fd9\u4e00\u95ee\u9898\u7684\u6cd5\u5f8b\u3002\u5176\u8c03\u67e5\u7ed3\u679c\u5c06\u4e8e2021\u5e74\u516c\u5e03\u3002", "note_en": "Faked nude images of more than 100,000 women have been created from social media pictures and shared online, according to a new report.\n Clothes are digitally removed from pictures of women by Artificial Intelligence (AI), and spread on the messaging app Telegram.\n Some of those targeted &#34;appeared to be underage&#34;, the report by intelligence company Sensity said.\n    Deepfakes are computer-generated, often realistic images and video, based on a real template. One of its uses has been to create faked pornographic video clips of celebrities.\n But Sensity&#39;s chief executive Giorgio Patrini said the shift to using photos of private individuals is relatively new.\n &#34;Having a social media account with public photos is enough for anyone to become a target,&#34; he warned.\n  The artificial intelligence-powered bot lives inside a Telegram private messaging channel. Users can send the bot a photo of a woman, and it will digitally remove her clothes in minutes, at no cost.\n The BBC tested multiple images, all with the subjects&#39; consent, and none were completely realistic - our results included a photo of a woman with a belly button on her diaphragm.\n A similar app was shut down last year, but it is believed there are cracked versions of the software in circulation.\n The administrator running the service, known only as &#34;P&#34; said: &#34;I don&#39;t care that much. This is entertainment that does not carry violence.\n  He also said the team looks at what photos are shared, and &#34;when we see minors we block the user for good.&#34;\n  But the decision on whether to share the photo with others is up to whoever used the bot to create it in the first place, he said.\n Defending its relative level of harm, he added: &#34;There are wars, diseases, many bad things that are harmful in the world.&#34; He has also claimed he will soon remove all of the images.\n   Sensity reported that between July 2019 and 2020, approximately 104,852 women have been targeted and had fake naked images of them shared publicly.\n Its investigation found that some of the images appeared underage, &#34;suggesting that some users were primarily using the bot to generate and share paedophilic content.&#34;\n Sensity said the bot has had significant advertising on the Russian social media site VK, and a survey on the platform showed that most users were from Russia and ex-USSR countries.\n But VK said: &#34;It doesn&#39;t tolerate such content or links on the platform and blocks communities that distribute them.&#34;\n  &#34;Many of these websites or apps do not hide or operate underground, because they are not strictly outlawed,&#34; said Sensity&#39;s Giorgio Patrini.\n   The authors of the report say they have shared all their findings with Telegram, VK and relevant law enforcement agencies, but have not had a response.\n Nina Schick, author of the book Deep Fakes and the Infocalypse, said deepfake creators were all over the world, and that legal protections were &#34;playing catch-up&#34; with the technology.\n &#34;It&#39;s only a matter of time until that content becomes more sophisticated. The number of deepfake porn videos seems to be doubling every six months,&#34; she said.\n &#34;Our legal systems are not fit for purpose on this issue. Society is changing quicker than we can imagine due to these exponential technological advances, and we as a society haven&#39;t decided how to regulate this.\n &#34;It&#39;s devastating, for victims of fake porn. It can completely upend their life because they feel violated and humiliated.&#34;\n Last year the US state of Virginia became one of the first places to  outlaw deepfakes\n The current UK law around fake nude images has recently been criticised for being &#34;inconsistent, out-of-date and confusing&#34; in a  university report.\n Despite progress on issues like revenge porn and upskirting, &#34;there remain many glaring gaps in the law&#34;, says Lucy Hadley of the Women&#39;s Aid charity.\n While these statistics show how widespread deep-fake images can be, it is not currently a specific offence.\n The government has instructed the  Law Commission to review the law around the issue in England and Wales. Its findings are due in 2021.", "posttime": "2020-10-21 15:32:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5973\u6027,naked,\u673a\u5668\u4eba", "title": "\u7f51\u4e0a\u5206\u4eab\u7684\u6570\u5343\u540d\u5973\u6027\u7684\u5047\u88f8\u7167", "title_en": "Fake naked photos of thousands of women shared online", "transed": 1, "url": "https://www.bbc.com/news/technology-54584127", "via": "", "real_tags": ["\u5973\u6027", "naked", "\u673a\u5668\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "8a3fcbb26b685266c79911fa3a8e0bd8.jpg", "infoid": 1030265, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f7f\u7528\u4ee5AR\u4e3a\u4e2d\u5fc3\u7684\u773c\u955c\u62cd\u6444\u7eaa\u5f55\u7247\u7684\u60f3\u6cd5\u542c\u8d77\u6765\u53ef\u80fd\u6709\u4e9b\u82b1\u54e8\uff0c\u4f46\u201c\u7b2c\u4e00\u4eba\u79f0\u201d\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u6c89\u91cd\u7684\u8bdd\u9898\uff1a\u6c14\u5019\u53d8\u5316\u3002\n\u8be5\u7cfb\u5217\u8282\u76ee\u7684\u5236\u7247\u4eba\u662f\u8bb0\u8005\u4f18\u7d20\u798f\u00b7\u5965\u9a6c\u5c14(\u4ed6\u8bf4\uff0c\u81ea2016\u5e74\u4ee5\u6765\uff0c\u4ed6\u6bcf\u5929\u90fd\u6234\u7740\u773c\u955c)\u548c\u4ed6\u7684\u6807\u7b7eOur Stories\u9879\u76ee\uff0c\u8be5\u9879\u76ee\u5df2\u7ecf\u57f9\u8bad\u4e86140\u4e2a\u56fd\u5bb6\u76841\u4e07\u591a\u4eba\u7528\u624b\u673a\u521b\u4f5c\u65b0\u95fb\u3002\n\u201c\u7b2c\u4e00\u4eba\u79f0\u201d\u542c\u8d77\u6765\u50cf\u662f\u8fd9\u9879\u5de5\u4f5c\u7684\u5ef6\u4f38--\u7814\u7a76\u5c0f\u7ec4\u7ed9\u516d\u4e2a\u56fd\u5bb6\u7684\u53d7\u8bd5\u8005\u9001\u53bb\u773c\u955c\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4ed6\u4eec\u6b63\u5728\u505a\u7684\u6297\u51fb\u6c14\u5019\u53d8\u5316\u7684\u5de5\u4f5c\u3002\n\u5965\u9a6c\u5c14\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u544a\u8bc9\u6211\uff1a\u201c\u5f53\u65b0\u51a0\u80ba\u708e\u8d70\u7ea2\u65f6\uff0c\u5f88\u591a\u5168\u7403\u5a92\u4f53\u4f5c\u54c1\u90fd\u505c\u6b62\u4e86\u62cd\u6444\u3002\u201d\u201c\u4f46\u6211\u4eec\u7684\u521b\u65b0\u8005\u5e76\u6ca1\u6709\u505c\u6b62\u5de5\u4f5c\u3002\u5411\u4ed6\u4eec\u8fd0\u9001\u773c\u955c\u53ef\u4ee5\u8ba9\u6211\u4eec\u63a5\u89e6\u5230\u6545\u4e8b\uff0c\u5426\u5219\u5728\u51a0\u72b6\u75c5\u6bd2\u5371\u673a\u671f\u95f4\u662f\u4e0d\u53ef\u80fd\u8bb2\u51fa\u6765\u7684\u3002\u201c\u3002\n\u4ed6\u8865\u5145\u8bf4\uff0c\u7528\u773c\u955c\u62cd\u6444\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u5236\u4f5c\u65b9\u6cd5-\u5b83\u8fd8\u5141\u8bb8\u89c2\u4f17\u4ece\u6c14\u5019\u6d3b\u52a8\u5bb6\u7684\u89d2\u5ea6\u770b\u95ee\u9898\u3002\n\u4ed6\u8bf4\uff1a\u201c\u4e3a\u8fd9\u6837\u7684\u7cfb\u5217\u5267\u6355\u6349POV\u89c4\u683c\u955c\u5934\u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\uff0c\u6211\u4eec\u53ef\u4ee5\u4eb2\u773c\u76ee\u7779\u53d8\u9769\u5236\u9020\u8005\u5b9e\u9645\u52a8\u624b\uff0c\u521b\u9020\u3001\u5347\u7ea7\u3001\u56de\u6536\u548c\u505a\u51fa\u4ed6\u4eec\u60f3\u770b\u5230\u7684\u6539\u53d8\u3002\u201d\u201c\u4ed6\u4eec\u7684\u8eab\u4f53\u52a8\u4f5c\uff0c\u770b\u5230\u53cc\u624b\u5728\u5de5\u4f5c\uff0c\u901a\u8fc7\u4ed6\u4eec\u7684\u6709\u5229\u4f4d\u7f6e\uff0c\u4f7f\u4ed6\u4eec\u7684\u52a8\u4f5c\u66f4\u5177\u5173\u8054\u6027\u3001\u8da3\u5473\u6027\u548c\u8eab\u4e34\u5176\u5883\u7684\u611f\u89c9\u3002\u201d\u5f53\u5e74\u8f7b\u89c2\u4f17\u770b\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u4f1a\u60f3\u2018\u6211\u5927\u6982\u4e5f\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u2019\u201c\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u90e8\u7535\u89c6\u5267\u6bcf\u96c6\u8fd8\u5305\u62ecAR\u955c\u5934-\u4f8b\u5982\uff0c\u4e00\u4e2a\u955c\u5934\u4f1a\u5728\u4f60\u7684\u5730\u677f\u4e0a\u589e\u52a0\u88c2\u7f1d\uff0c\u4ee5\u8868\u660e\u7f3a\u6c34\uff0c\u800c\u53e6\u4e00\u4e2a\u955c\u5934\u4f1a\u5728\u5929\u7a7a\u4e2d\u6dfb\u52a0\u4e8c\u6c27\u5316\u78b3\u4e91\uff0c\u4ee5\u8bf4\u660e\u78b3\u6392\u653e\u3002\n\u201c\u7b2c\u4e00\u4eba\u79f0\u201d\u5c06\u4e8e\u672c\u5468\u516d(10\u670824\u65e5)\u9996\u6620\u3002\u4f60\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u9884\u544a\u7247\u3002", "note_en": "The idea of filming a documentary using  AR-centric eyewear might sound gimmicky, but \u201cFirst Person\u201d is tackling a weighty topic: climate change.\n The series is produced by journalist Yusuf Omar (who said he\u2019s been wearing Spectacles \u201cevery day of my life since 2016\u201d) and his  Hashtag Our Stories program, which has trained more than 10,000 people in 140 countries to create journalism with their mobile phones.\n  \u201cFirst Person\u201d sounds like an extension of that work \u2014 the team sent Spectacles to subjects in six countries so that they could document the work that they\u2019re doing to fight climate change.\n \u201cWhen Covid-19 hit, a lot of global media productions stopped shooting,\u201d Omar told me via email. \u201cBut our innovators didn\u2019t stop working. Shipping Spectacles to them allowed us to reach stories, otherwise impossible to tell during the coronavirus crisis.\u201d\n  He added that filming with Spectacles isn\u2019t just a production method \u2014 it also allows viewers to literally see things from a climate activist\u2019s perspective.\n \u201cThe beauty of capturing POV Specs footage for a series like this is that we get to witness change makers actually getting their hands dirty and creating, upcycling, recycling and making the change they want to see,\u201d he said. \u201cTheir physical actions, seeing both hands at work, through their vantage point make their actions relatable, interesting and immersive. When young audiences watch it, they think \u2018I can probably do that too.\u2019\u201d\n In fact, the series also includes AR lenses for each episode \u2014 one lens, for example, will add cracks to your floor to indicate water shortage, while another will add carbon dioxide clouds in the sky to illustrate carbon emissions.\n \u201cFirst Person\u201d premieres this Saturday, October 24. You can watch the trailer below.", "posttime": "2020-10-21 15:16:46", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7b2c\u4e00\u4eba\u79f0,trailer,\u773c\u955c", "title": "\n\u89c2\u770b\u201c\u7b2c\u4e00\u4eba\u79f0\u201d\u7684\u9884\u544a\u7247\uff0c\u8fd9\u662f\u4e00\u90e8\u5728Snapchat\u773c\u955c\u4e0a\u62cd\u6444\u7684\u4ee5\u6c14\u5019\u4e3a\u91cd\u70b9\u7684\u7cfb\u5217\u5267\u3002", "title_en": "\n\t\t\t\tWatch the trailer for \u2018First Person,\u2019 a climate-focused series shot on Snapchat Spectacles\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/10/21/snapchat-first-person-trailer/", "via": "", "real_tags": ["\u7b2c\u4e00\u4eba\u79f0", "trailer", "\u773c\u955c"]}, {"category": "", "categoryclass": "", "imagename": "e59aec519ef06d73fd94eacf26958a58.png", "infoid": 1030264, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Authelia\u662f\u4e00\u4e2a\u5f00\u6e90\u670d\u52a1\u5668\uff0c\u63d0\u4f9b\u767b\u5f55\u95e8\u6237\u5e76\u4e0eNginx\u5408\u4f5c\u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\u8bf7\u6c42\u3002\nAuthelia\u5141\u8bb8\u5b58\u50a8\u5728LDAP\u4e2d\u7684\u7528\u6237\u63d0\u4f9b\u4ed6\u4eec\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u4f5c\u4e3a\u9996\u8981\u56e0\u7d20\u3002\nAuthelia\u63d0\u4f9b\u767b\u5f55\u95e8\u6237\uff0c\u8ba9\u60a8\u7684\u7528\u6237\u53ea\u9700\u767b\u5f55\u4e00\u6b21\u5373\u53ef\u8bbf\u95ee\u6240\u6709\u5185\u5bb9\u3002\nAuthelia\u63a7\u5236\u7528\u6237\u5c1d\u8bd5\u767b\u5f55\u7684\u6b21\u6570\uff0c\u4ee5\u907f\u514d\u66b4\u529b\u653b\u51fb\u3002\nAuthelia\u53ef\u4ee5\u914d\u7f6e\u4e3a\u9ad8\u5ea6\u53ef\u7528\u548c\u53ef\u4f38\u7f29\uff0c\u53ef\u4ee5\u5728Kubernetes\u6216\u4efb\u4f55\u96c6\u7fa4\u4e0a\u8fd0\u884c\u3002", "note_en": "Authelia is an open-source server providing a login portal and treating authentication requests in cooperation with  NGINX.\n  Authelia allows users stored in a LDAP to provide their username and password as first factor.\n  Authelia offers a login portal to allow your users to login once and access everything.\n          Authelia regulates the number of login attempts made by a user to avoid brute force attacks.\n  Authelia can be configured to be highly available and scalable and run on  Kubernetes or any cluster.", "posttime": "2020-10-21 15:12:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,open,\u63d0\u4f9b", "title": "Authelia\uff1a\u5f00\u6e90\u7684\u5168\u529f\u80fd\u8ba4\u8bc1\u670d\u52a1\u5668", "title_en": "Authelia: Open-source full-featured authentication server", "transed": 1, "url": "https://www.authelia.com/", "via": "", "real_tags": ["\u5f00\u6e90", "open", "\u63d0\u4f9b"]}, {"category": "", "categoryclass": "", "imagename": "707068c6f1e3c09b45b700c8ea75e686.png", "infoid": 1030263, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u76ee\u524d\u53ea\u6709Linux\u88ab\u9a8c\u8bc1\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u6211\u4eec\u5bf9\u6700\u7ec8\u4e5f\u652f\u6301Windows\u7684\u60f3\u6cd5\u6301\u5f00\u653e\u6001\u5ea6\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u662f\u4e00\u4e2aAlpha\uff0c\u56e0\u6b64\u6570\u636e\u4e22\u5931\u7684\u98ce\u9669\u662f\u771f\u5b9e\u7684\uff0c\u5e76\u4e14\u53ef\u80fd\u4e0d\u7a33\u5b9a\u3002\n\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528\u6e38\u8247\uff0c\u8bf7\u67e5\u770b\u5165\u95e8\u6307\u5357\uff1ahttps://ycht.tech/Installation/gettingstarted/\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u4e00\u4e9b\u8ba1\u5212\u5916\u7684\u4e1c\u897f\uff0c\u8bf7\u6253\u5f00\u4e00\u4e2a\u529f\u80fd\u8bf7\u6c42\u95ee\u9898\uff0c\u6211\u4eec\u4f1a\u8003\u8651\u5982\u4f55\u6dfb\u52a0\u5b83\u3002\n\u76ee\u524d\uff0c\u6e38\u8247\u4e0e\u6e2f\u53e3\u6a21\u677f\u517c\u5bb9\u3002\u60a8\u5c06\u5728\u6dfb\u52a0\u6a21\u677f\u8bbe\u7f6e\u4e2d\u6dfb\u52a0\u6a21\u677fURL\u3002\u6a21\u677f\u5c06\u88ab\u8bfb\u53d6\uff0c\u5206\u79bb\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u7136\u540e\u5bfc\u5165\u5230\u6570\u636e\u5e93\u4e2d\u3002\u4e0e\u6a21\u677f\u76f8\u5173\u8054\u7684\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u6570\u636e\u5e93\u5173\u7cfb\u94fe\u63a5\uff0c\u56e0\u6b64\u5f53\u6a21\u677f\u88ab\u79fb\u9664\u65f6\uff0c\u4e0e\u5176\u76f8\u5173\u8054\u7684\u5e94\u7528\u7a0b\u5e8f\u4e5f\u662f\u5982\u6b64\u3002\u6211\u4eec\u8fd8\u5b58\u50a8\u4e86\u6a21\u677fURL\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u6309\u4e00\u4e0b\u6309\u94ae\u6765\u66f4\u65b0\u6a21\u677f\u3002\n\u5728\u6a21\u677f\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u53d8\u91cf(\u4ece\uff01\u5f00\u59cb\uff01)\u3002\u5c06\u5b83\u4eec\u81ea\u52a8\u66ff\u6362\u4e3a\u7528\u6237\u5728\u5176\u670d\u52a1\u5668\u8bbe\u7f6e\u4e2d\u8bbe\u7f6e\u7684\u4efb\u4f55\u53d8\u91cf(\u5373\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\uff01config\u5c06\u66ff\u6362\u4e3a/yacht/appdata/Config)\u3002\n\u5982\u679c\u60a8\u4f7f\u7528ARM\uff0c\u4f46\u56fe\u5f62\u672a\u663e\u793a\uff0c\u8bf7\u5c06\u4ee5\u4e0b\u5185\u5bb9\u6dfb\u52a0\u5230\u60a8\u7684cmdline.txt\u4e2d\uff1a", "note_en": "Currently only linux has been verified as working but we are open to the idea of supporting windows eventually as well.\n Keep in mind, this is an alpha so the risk of data loss is real and it may not be stable\n  Check out the getting started guide if this is the first time you&#39;ve used Yacht:  https://ycht.tech/Installation/gettingstarted/\n     If you want something that&#39;s not planned please open a feature request issue and we&#39;ll see about getting it added.\n  Currently Yacht is compatible with portainer templates. You&#39;ll add a template url in the &#34;Add Template&#34; settings. The the template will be read, separated into apps, and imported into the database. The apps associated with the templates are linked via a db relationship so when the template is removed, so are the apps associated with it. We store the template url as well so we can enable updating templates with a button press.\n   In templates you are able to define variables (starting with  !) to have them automatically replaced by whatever variable the user has set in their server settings (ie.  !config will be replaced by  /yacht/AppData/Config by default).\n  If you&#39;re on arm and graphs aren&#39;t showing up add the following to your cmdline.txt:", "posttime": "2020-10-21 15:12:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "web,\u6a21\u677f", "title": "Yacht\uff1a\u7528\u4e8e\u7ba1\u7406\u5bb9\u5668\u7684Web\u754c\u9762\uff0c\u53ea\u9700\u5355\u51fb\u4e00\u6b21\u5373\u53ef\u90e8\u7f72", "title_en": "Yacht: Web interface for managing containers with 1 click deployments", "transed": 1, "url": "https://github.com/SelfhostedPro/Yacht", "via": "", "real_tags": ["web", "\u6a21\u677f"]}, {"category": "", "categoryclass": "", "imagename": "74b080e3ca08fd6336ea82018bea49a9.png", "infoid": 1030262, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u65b0\u7684\u8bc1\u636e\u8868\u660e\uff0c\u65b0\u51a0\u80ba\u708e\u60a3\u8005\u7f3a\u4e4f\u7ef4\u751f\u7d20D\u4e0e\u4e0d\u826f\u7ed3\u5c40\u6709\u5173\u3002\u76f8\u53cd\uff0c\u8865\u5145\u7ef4\u751f\u7d20D\u53ef\u4ee5\u9632\u6b62\u65b0\u51a0\u80ba\u708e\u6700\u521d\u7684\u80ba\u6ce1\u5f25\u6f2b\u6027\u635f\u4f24\u9010\u6e10\u6076\u5316\u3002\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u52a0\u91cd\u65b0\u51a0\u80ba\u708e\u80ba\u708e\u7684\u673a\u5236\u76ee\u524d\u4ecd\u77e5\u4e4b\u751a\u5c11\u3002\u5728\u8fd9\u7bc7\u7efc\u8ff0\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u5185\u76ae\u529f\u80fd\u969c\u788d\u5728\u8fd9\u4e00\u4e8b\u4ef6\u4e2d\u53ef\u80fd\u626e\u6f14\u7684\u89d2\u8272\u7684\u7406\u8bba\u57fa\u7840\u3002\u672c\u6587\u5c31\u7ef4\u751f\u7d20D\u7684\u6297\u708e\u548c\u6297\u8840\u6813\u4f5c\u7528\uff0c(2)\u7ef4\u751f\u7d20D\u53d7\u4f53\u548c\u7ef4\u751f\u7d20D\u53d7\u4f53\u914d\u4f53\uff0c(3)\u7ef4\u751f\u7d20D\u5bf9\u5185\u76ae\u529f\u80fd\u969c\u788d\u7684\u4fdd\u62a4\u4f5c\u7528\uff0c(4)\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u7684\u5371\u9669\u6027\uff0c(5)\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u4e0e\u5185\u76ae\u529f\u80fd\u969c\u788d\u7684\u5173\u7cfb\uff0c(6)\u4e0e\u65b0\u51a0\u80ba\u708e\u6709\u5173\u7684\u7ef4\u751f\u7d20D\u7684\u7279\u70b9\uff0c(7)\u7ef4\u751f\u7d20D\u5728\u5148\u5929\u548c\u9002\u5e94\u6027\u53cd\u5e94\u4e2d\u7684\u4f5c\u7528\uff0c(8)\u4fc3\u8fdb\u7ec6\u80de\u56e0\u5b50\u98ce\u66b4\u7684\u5185\u76ae\u7ec6\u80de\u6fc0\u6d3b\u7684\u751f\u7269\u6807\u5fd7\u7269\uff0c\u4ee5\u53ca(9)\u708e\u75c7\u548c\u7a33\u6001\u4e4b\u95f4\u7684\u53cc\u5411\u5173\u7cfb\u4f5c\u4e00\u7b80\u8981\u7efc\u8ff0\u3002\u6700\u540e\uff0c\u6211\u4eec\u5047\u8bbe\u4e0e\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u76f8\u5173\u7684\u5185\u76ae\u529f\u80fd\u969c\u788d\u662f\u7531\u4e8e\u7ef4\u751f\u7d20D\u53d7\u4f53\u4e0e\u5176\u5728\u8840\u7ba1\u5185\u76ae\u7ec6\u80de\u4e0a\u7684\u914d\u4f53\u7ed3\u5408\u51cf\u5c11\u6240\u81f4\uff0c\u8fd9\u53ef\u80fd\u662f\u901a\u8fc7\u589e\u52a0\u5e72\u6270\u7d201\u03b1\u800c\u4ecb\u5bfc\u7684\u3002\u4e00\u7cfb\u5217\u53ef\u80fd\u7684\u4e8b\u4ef6\u53ef\u63cf\u8ff0\u4e3a(1)\u8840\u7ba1\u7d27\u5f20\u7d20II\u8f6c\u6362\u9176\u76f8\u5173\u7684\u521d\u59cb\u5185\u76ae\u635f\u4f24\uff0c\u7ee7\u800c\u662f\u7ef4\u751f\u7d20D\u53d7\u4f53\u76f8\u5173\u7684\u5185\u76ae\u529f\u80fd\u969c\u788d\uff0c(2)\u5185\u76ae\u635f\u4f24\u6076\u5316\u4e3a\u5185\u76ae\u708e\u3001\u51dd\u8840\u969c\u788d\u548c\u8840\u6813\u5f62\u6210\uff0c(3)\u8840\u7ba1\u635f\u4f24\u52a0\u5267\u80ba\u90e8\u75c5\u7406\uff0c\u4f7f\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u7684\u60a3\u8005\u66f4\u5bb9\u6613\u6b7b\u4ea1\u3002", "note_en": "There is emerging evidence to suggest that vitamin D deficiency is associated with adverse outcomes in COVID-19 patients. Conversely, vitamin D supplementation protects against an initial alveolar diffuse damage of COVID-19 becoming progressively worse. The mechanisms by which vitamin D deficiency exacerbates COVID-19 pneumonia remain poorly understood. In this review we describe the rationale of the putative role of endothelial dysfunction in this event. Herein, we will briefly review (1) anti-inflammatory and anti-thrombotic effects of vitamin D, (2) vitamin D receptor and vitamin D receptor ligand, (3) protective role of vitamin D against endothelial dysfunction, (4) risk of vitamin D deficiency, (5) vitamin D deficiency in association with endothelial dysfunction, (6) the characteristics of vitamin D relevant to COVID-19, (7) the role of vitamin D on innate and adaptive response, (8) biomarkers of endothelial cell activation contributing to cytokine storm, and (9) the bidirectional relationship between inflammation and homeostasis. Finally, we hypothesize that endothelial dysfunction relevant to vitamin D deficiency results from decreased binding of the vitamin D receptor with its ligand on the vascular endothelium and that it may be immune-mediated via increased interferon 1 \u03b1. A possible sequence of events may be described as (1) angiotensin II converting enzyme-related initial endothelial injury followed by vitamin D receptor-related endothelial dysfunction, (2) endothelial lesions deteriorating to endothelialitis, coagulopathy and thrombosis, and (3) vascular damage exacerbating pulmonary pathology and making patients with vitamin D deficiency vulnerable to death.", "posttime": "2020-10-21 15:12:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ef4\u751f\u7d20,\u7f3a\u4e4f,deficiency", "title": "\u7ef4\u751f\u7d20D\u7f3a\u4e4f\u4e0e\u5185\u76ae\u529f\u80fd\u7684\u5173\u7cfb", "title_en": "Vitamin D deficiency in association with endothelial function", "transed": 1, "url": "https://pubmed.ncbi.nlm.nih.gov/33070539/", "via": "", "real_tags": ["\u7ef4\u751f\u7d20", "\u7f3a\u4e4f"]}, {"category": "", "categoryclass": "", "imagename": "663bc5650ca53e919602096273dfe800.jpg", "infoid": 1030261, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u8428\u91cc\u5927\u5b66\u7ea6\u7ff0\u4e54\u00b7\u9ea6\u514b\u6cd5\u767b\u6559\u6388\u5f00\u53d1\u7684\u4e00\u9879\u65b0\u7406\u8bba\uff0c\u5927\u8111\u4e2d\u7684\u7535\u78c1\u80fd\u4f7f\u5927\u8111\u7269\u8d28\u80fd\u591f\u521b\u9020\u6211\u4eec\u7684\u610f\u8bc6\u4ee5\u53ca\u6211\u4eec\u610f\u8bc6\u548c\u601d\u8003\u7684\u80fd\u529b\u3002\u9ea6\u514b\u6cd5\u767b\u6559\u6388\u5728\u201c\u610f\u8bc6\u7684\u795e\u7ecf\u79d1\u5b66\u201d\u6742\u5fd7\u4e0a\u53d1\u8868\u4e86\u4ed6\u7684\u7406\u8bba\uff0c\u4ed6\u63d0\u51fa\u610f\u8bc6\u5b9e\u9645\u4e0a\u662f\u5927\u8111\u7684\u80fd\u91cf\u573a\u3002\u8fd9\u4e00\u7406\u8bba\u53ef\u80fd\u4e3a\u6709\u610f\u8bc6\u7684\u4eba\u5de5\u667a\u80fd\u7684\u53d1\u5c55\u94fa\u5e73\u9053\u8def\uff0c\u6709\u610f\u8bc6\u5e76\u6709\u80fd\u529b\u601d\u8003\u7684\u673a\u5668\u4eba\u5c06\u6210\u4e3a\u73b0\u5b9e\u3002\n\u65e9\u671f\u5173\u4e8e\u6211\u4eec\u7684\u610f\u8bc6\u662f\u4ec0\u4e48\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u88ab\u521b\u9020\u7684\u7406\u8bba\u503e\u5411\u4e8e\u8d85\u81ea\u7136\uff0c\u8ba4\u4e3a\u4eba\u7c7b\uff0c\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u52a8\u7269\u90fd\u62e5\u6709\u4e00\u4e2a\u975e\u7269\u8d28\u7684\u7075\u9b42\uff0c\u8d4b\u4e88\u610f\u8bc6\u3001\u601d\u60f3\u548c\u81ea\u7531\u610f\u5fd7-\u8fd9\u4e9b\u80fd\u529b\u662f\u65e0\u751f\u547d\u7684\u7269\u4f53\u6240\u7f3a\u4e4f\u7684\u3002\u4eca\u5929\uff0c\u5927\u591a\u6570\u79d1\u5b66\u5bb6\u5df2\u7ecf\u629b\u5f03\u4e86\u8fd9\u79cd\u88ab\u79f0\u4e3a\u4e8c\u5143\u8bba\u7684\u89c2\u70b9\uff0c\u8f6c\u800c\u63a5\u53d7\u5927\u8111\u672c\u8eab\u53ca\u5176\u7531\u6570\u5341\u4ebf\u795e\u7ecf\u7ec4\u6210\u7684\u7f51\u7edc\u4ea7\u751f\u7684\u610f\u8bc6\u7684\u4e00\u5143\u8bba\u89c2\u70b9\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u9ea6\u514b\u6cd5\u767b\u63d0\u51fa\u4e86\u4e00\u79cd\u79d1\u5b66\u7684\u4e8c\u5143\u8bba\u5f62\u5f0f\uff0c\u5176\u57fa\u7840\u662f\u7269\u8d28\u548c\u80fd\u91cf\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u800c\u4e0d\u662f\u7269\u8d28\u548c\u7075\u9b42\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\n\u8fd9\u4e00\u7406\u8bba\u57fa\u4e8e\u79d1\u5b66\u4e8b\u5b9e\uff1a\u5f53\u5927\u8111\u548c\u795e\u7ecf\u7cfb\u7edf\u4e2d\u7684\u795e\u7ecf\u5143\u71c3\u70e7\u65f6\uff0c\u5b83\u4eec\u4e0d\u4ec5\u6cbf\u7740\u7ebf\u72b6\u795e\u7ecf\u7ea4\u7ef4\u53d1\u9001\u719f\u6089\u7684\u7535\u4fe1\u53f7\uff0c\u800c\u4e14\u8fd8\u5411\u5468\u56f4\u7ec4\u7ec7\u53d1\u9001\u8109\u51b2\u3002\u8fd9\u79cd\u80fd\u91cf\u901a\u5e38\u88ab\u5ffd\u89c6\uff0c\u4f46\u5b83\u643a\u5e26\u7684\u4fe1\u606f\u4e0e\u53d1\u5c04\u76f8\u540c\uff0c\u4f46\u5b83\u662f\u4e00\u79cd\u65e0\u5f62\u7684\u80fd\u91cf\u6ce2\uff0c\u800c\u4e0d\u662f\u8fdb\u51fa\u795e\u7ecf\u7684\u539f\u5b50\u6d41\u3002\n\u8fd9\u4e00\u9886\u57df\u662f\u4f17\u6240\u5468\u77e5\u7684\uff0c\u901a\u5e38\u901a\u8fc7\u8111\u7535\u56fe(EEG)\u548c\u8111\u78c1\u56fe(MEG)\u7b49\u8111\u626b\u63cf\u6280\u672f\u68c0\u6d4b\u5230\uff0c\u4f46\u4e4b\u524d\u66fe\u88ab\u8ba4\u4e3a\u4e0e\u5927\u8111\u529f\u80fd\u65e0\u5173\u800c\u4e0d\u5c51\u4e00\u987e\u3002\u76f8\u53cd\uff0c\u9ea6\u514b\u6cd5\u767b\u63d0\u51fa\uff0c\u5927\u8111\u4fe1\u606f\u4e30\u5bcc\u7684\u7535\u78c1\u573a\u5b9e\u9645\u4e0a\u672c\u8eab\u5c31\u662f\u610f\u8bc6\u7684\u6240\u5728\u5730\uff0c\u9a71\u52a8\u7740\u81ea\u7531\u610f\u5fd7\u548c\u81ea\u613f\u884c\u52a8\u3002\u8fd9\u4e00\u65b0\u53d1\u73b0\u4e5f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u4eca\u5929\u7684\u8ba1\u7b97\u673a\u5c3d\u7ba1\u6781\u5176\u590d\u6742\uff0c\u8fd0\u884c\u901f\u5ea6\u6781\u5feb\uff0c\u5374\u6ca1\u6709\u8868\u73b0\u51fa\u4e1d\u6beb\u7684\u610f\u8bc6\u706b\u82b1\uff1b\u7136\u800c\uff0c\u53ea\u8981\u6280\u672f\u53d1\u5c55\u5f97\u5f53\uff0c\u80fd\u591f\u611f\u77e5\u5e76\u80fd\u72ec\u7acb\u601d\u8003\u7684\u673a\u5668\u4eba\u5c31\u80fd\u6210\u4e3a\u73b0\u5b9e\u3002\n\u5206\u5b50\u9057\u4f20\u5b66\u6559\u6388\u3001\u8428\u91cc\u5927\u5b66\u91cf\u5b50\u751f\u7269\u5b66\u535a\u58eb\u751f\u57f9\u8bad\u4e2d\u5fc3\u4e3b\u4efb\u7ea6\u7ff0\u4e54\u00b7\u9ea6\u514b\u6cd5\u767b(Johnjoe McFadden)\u8bf4\uff1a\u201c\u51e0\u5343\u5e74\u6765\uff0c\u54f2\u5b66\u5bb6\u3001\u795e\u5b66\u5bb6\u3001\u795e\u79d8\u4e3b\u4e49\u8005\u548c\u666e\u901a\u4eba\u4e00\u76f4\u5728\u601d\u8003\u5982\u4f55\u611f\u77e5\u5e76\u8bbe\u6cd5\u601d\u8003\u3002\u201d\u6211\u76f8\u4fe1\u8fd9\u4e2a\u8c1c\u56e2\u73b0\u5728\u5df2\u7ecf\u89e3\u5f00\u4e86\uff0c\u90a3\u5c31\u662f\u795e\u7ecf\u8fde\u63a5\u5230\u81ea\u6211\u751f\u6210\u7684\u4f53\u9a8c\uff0c\u4ee5\u9a71\u52a8\u6211\u4eec\u6240\u8bf4\u7684\u81ea\u7531\u610f\u5fd7\u548c\u6211\u4eec\u7684\u81ea\u613f\u884c\u52a8\u3002\u66f4\u591a\u4fe1\u606f\uff0c\u7ea6\u7ff0\u4e54\u00b7\u9ea6\u514b\u6cd5\u767b(Johnjoe McFadden)\u62a5\u9053\u3002\u6574\u5408\u5927\u8111EM\u9886\u57df\u7684\u4fe1\u606f\uff1a\u610f\u8bc6\u7684CEMI\u9886\u57df\u7406\u8bba\uff0c\u610f\u8bc6\u7684\u795e\u7ecf\u79d1\u5b66(2020)\u3002DOI\uff1a10.1093/NC/NIAA016\u3002\n\u5f15\u6587\uff1a\u7814\u7a76\u4eba\u5458\u63d0\u51fa\u65b0\u7684\u610f\u8bc6\u7406\u8bba(2020\u5e7410\u670820\u65e5)\uff0c\u68c0\u7d22\u81eahttps://medicalxpress.com/news/2020-10-theory-consciousness.html\u3002\n\u672c\u6587\u6863\u53d7\u7248\u6743\u4fdd\u62a4\u3002\u9664\u4e3a\u79c1\u4eba\u5b66\u4e60\u6216\u7814\u7a76\u7684\u76ee\u7684\u800c\u8fdb\u884c\u7684\u4efb\u4f55\u516c\u5e73\u4ea4\u6613\u5916\uff0c\u672a\u7ecf\u4e66\u9762\u8bb8\u53ef\u4e0d\u5f97\u590d\u5236\u4efb\u4f55\u90e8\u5206\u3002\u63d0\u4f9b\u7684\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002", "note_en": "Electromagnetic energy in the brain enables brain matter to create our consciousness and our ability to be aware and think, according to a new theory developed by Professor Johnjoe McFadden from the University of Surrey.    Publishing his theory in the journal  Neuroscience of Consciousness, Professor McFadden posits that consciousness is in fact the brain&#39;s energy field. This theory could pave the way toward the development of conscious AI, with robots that are aware and have the ability to think becoming a reality.\n  Early theories on what our consciousness is and how it has been created tended toward the supernatural, suggesting that humans and probably other animals possess an immaterial soul that confers consciousness, thought and free will\u2014capabilities that inanimate objects lack. Most scientists today have discarded this view, known as dualism, to embrace a &#39;monistic&#39; view of a consciousness generated by the brain itself and its network of billions of nerves. By contrast, McFadden proposes a scientific form of dualism based on the difference between matter and energy, rather than matter and soul.\n  The theory is based on scientific fact: when neurons in the brain and nervous system fire, they not only send the familiar electrical signal down the wire-like nerve fibres, but they also send a pulse of   into the surrounding tissue. Such energy is usually disregarded, yet it carries the same information as   firings, but as an immaterial wave of energy, rather than a flow of atoms in and out of the nerves.\n  This   field is well-known and is routinely detected by brain-scanning techniques such as electroencephalogram (EEG) and magnetoencephalography (MEG) but has previously been dismissed as irrelevant to brain function. Instead, McFadden proposes that the brain&#39;s information-rich electromagnetic field is in fact itself the seat of consciousness, driving &#39;free will&#39; and voluntary actions. This new   also accounts for why, despite their immense complexity and ultra-fast operation, today&#39;s computers have not exhibited the slightest spark of consciousness; however, with the right technical development, robots that are aware and can think for themselves could become a reality.\n  Johnjoe McFadden, Professor of Molecular Genetics and Director of the Quantum Biology Doctoral Training Centre at the University of Surrey, said: &#34;How   becomes aware and manages to think is a mystery that has been pondered by philosophers, theologians, mystics and ordinary people for millennia. I believe this mystery has now been solved, and that   is the experience of nerves plugging into the  &#39;s self-generated   to drive what we call &#39;free will&#39; and our voluntary actions.&#34;        More information:\t\t\t\t\t\t\t\t\t\t\t\tJohnjoe McFadden. Integrating information in the brain&#39;s EM field: the cemi field theory of consciousness,  Neuroscience of Consciousness (2020).  DOI: 10.1093/nc/niaa016\n     Citation: Researcher proposes new theory of consciousness (2020, October 20) retrieved 21 October 2020 from https://medicalxpress.com/news/2020-10-theory-consciousness.html\n  This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no part may be reproduced without the written permission. The content is provided for information purposes only.", "posttime": "2020-10-21 15:12:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u5458,proposes,\u610f\u8bc6", "title": "\u7814\u7a76\u4eba\u5458\u63d0\u51fa\u65b0\u7684\u610f\u8bc6\u7406\u8bba", "title_en": "Researcher proposes new theory of consciousness", "transed": 1, "url": "https://medicalxpress.com/news/2020-10-theory-consciousness.html", "via": "", "real_tags": ["\u4eba\u5458", "proposes", "\u610f\u8bc6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1030260, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u5bf9\u6211\u6765\u8bf4\uff0cORM\u5f0a\u5927\u4e8e\u5229\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u6765\u5f88\u597d\u5730\u589e\u5f3a\u4e0eSQLIN\u7a0b\u5e8f\u7684\u5408\u4f5c\uff0c\u4f46\u5b83\u4eec\u4e0d\u5e94\u8be5\u53d6\u4ee3\u5b83\u3002\n\u4e00\u4e9b\u80cc\u666f\u77e5\u8bc6\uff1a\u5728\u8fc7\u53bb\u768430\u4e2a\u6708\u91cc\uff0c\u6211\u4e00\u76f4\u5728\u4f7f\u7528\u5fc5\u987b\u4e0ePostgres\u63a5\u53e3\u7684\u4ee3\u7801\uff0c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u8fd8\u5fc5\u987b\u4e0eSQLite\u63a5\u53e3\u3002\u5176\u4e2d\u5927\u90e8\u5206\u662fSQLAlChemy(\u6211\u5f88\u559c\u6b22)\u548cHibernate(\u6211\u4e0d\u559c\u6b22)\u3002\u6211\u4f7f\u7528\u8fc7\u73b0\u6709\u7684\u4ee3\u7801\u548c\u6570\u636e\u6a21\u578b\uff0c\u4e5f\u8bbe\u8ba1\u8fc7\u81ea\u5df1\u7684\u4ee3\u7801\u548c\u6570\u636e\u6a21\u578b\u3002\u5927\u591a\u6570\u6570\u636e\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684\u5b58\u50a8(\u201c\u65f6\u95f4\u7ebf\u201d)\uff0c\u91cd\u70b9\u653e\u5728\u521b\u5efa\u62a5\u544a\u4e0a\u3002\n\u5173\u4e8e\u5bf9\u8c61/\u5173\u7cfbImpedanceMismatch\u7684\u6587\u7ae0\u5df2\u7ecf\u5f88\u591a\u4e86\u3002\u9664\u975e\u4f60\u4eb2\u8eab\u7ecf\u5386\u8fc7\uff0c\u5426\u5219\u5f88\u96be\u6b23\u8d4f\u5b83\u3002\u7ebd\u74e6\u5fb7\u5728\u4ed6\u8457\u540d\u7684\u6587\u7ae0\u4e2d\u63d0\u51fa\u4e86\u8bb8\u591a\u4ee4\u4eba\u4fe1\u670d\u7684\u7406\u7531\uff0c\u89e3\u91ca\u4e86\u5965\u59c6\u65af\u4e3a\u4ec0\u4e48\u4f1a\u9677\u5165\u6ce5\u6f6d\u3002\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u6211\u5fc5\u987b\u76f4\u63a5\u5904\u7406\u5f88\u591a\u95ee\u9898\uff1a\u5b9e\u4f53\u8eab\u4efd\u95ee\u9898\u3001\u53cc\u91cd\u6a21\u5f0f\u95ee\u9898\u3001\u6570\u636e\u68c0\u7d22\u673a\u5236\u95ee\u9898\u548c\u90e8\u5206\u5bf9\u8c61\u95ee\u9898\u3002\u6211\u60f3\u7b80\u5355\u8c08\u8c08\u6211\u5728\u8fd9\u4e9b\u95ee\u9898\u4e0a\u7684\u7ecf\u9a8c\uff0c\u5e76\u52a0\u4e0a\u6211\u81ea\u5df1\u7684\u4e00\u4e2a\u3002\n\u4e5f\u8bb8\u6211\u9047\u5230\u7684ORMS\u4e2d\u6700\u5177\u98a0\u8986\u6027\u7684\u95ee\u9898\u662f\u201c\u5c5e\u6027\u8bb0\u5f55\u201d\u6216\u201c\u5bbd\u8868\u201d\uff0c\u5373\u4e0d\u65ad\u7d2f\u79ef\u5c5e\u6027\u7684\u8868\u3002\u5c3d\u7ba1\u6211\u5f88\u60f3\u907f\u514d\u5b83\uff0c\u4f46\u6709\u65f6\u5b83\u662f\u5fc5\u8981\u7684(\u5c3d\u7ba1\u50cfPostgres\u7684hstore\u8fd9\u6837\u7684\u4e1c\u897f\u53ef\u4ee5\u5e2e\u52a9\u6211)\u3002\u4f8b\u5982\uff0c\u5ba2\u6237\u53ef\u80fd\u4f1a\u5411\u60a8\u63d0\u4f9b\u5927\u91cf\u6570\u636e\uff0c\u4ed6\u4eec\u5e0c\u671b\u5c06\u8fd9\u4e9b\u6570\u636e\u9644\u52a0\u5230\u57fa\u4e8e\u5404\u79cd\u4e1a\u52a1\u903b\u8f91\u7684\u62a5\u544a\u4e2d\u3002\u6b64\u5916\uff0c\u60a8\u5bf9\u8fd9\u4e9b\u6570\u636e\u6ca1\u6709\u592a\u591a\u7684\u6d1e\u5bdf\u529b\uff1b\u60a8\u53ea\u662f\u5728\u80e1\u4e71\u6446\u5f04\u5b83\u3002\n\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u8fd9\u672c\u8eab\u5e76\u4e0d\u662f\u4e00\u4ef6\u53ef\u6015\u7684\u4e8b\u60c5\u3002\u6709\u4e86ORM\uff0c\u5b83\u5c31\u6210\u4e86\u771f\u6b63\u7684\u75db\u70b9\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u95ee\u9898\u5f00\u59cb\u51fa\u73b0\u5728\u4efb\u4f55\u76f4\u63a5\u4f7f\u7528\u5b9e\u4f53\u521b\u5efa\u67e5\u8be2\u7684\u67e5\u8be2\u4e2d\u3002\u5728\u9879\u76ee\u7684\u65e9\u671f\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u7c7b\u4f3c\u4e8eHibernate\u7684\u67e5\u8be2\u3002\n\u5f53foo\u6709\u4e94\u4e2a\u5c5e\u6027\u65f6\uff0c\u8fd9\u53ef\u80fd\u5f88\u597d\uff0c\u4f46\u662f\u5f53\u5b83\u6709\u4e00\u767e\u4e2a\u5c5e\u6027\u65f6\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u6570\u636e\u6d88\u9632\u8f6f\u7ba1\u3002\u8fd9\u7b49\u540c\u4e8e\u4f7f\u7528SELECT*\uff0c\u5b83\u901a\u5e38\u8868\u8fbe\u7684\u4fe1\u606f\u6bd4\u9884\u671f\u7684\u8981\u591a\u3002\u7136\u800c\uff0cORM\u9f13\u52b1\u8fd9\u79cd\u4f7f\u7528\uff0c\u5e76\u4e14\u7ecf\u5e38\u4f7f\u7f16\u5199\u7cbe\u786e\u7684\u9884\u6d4b\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u5c31\u50cf\u5b83\u4eec\u5728SQL\u4e2d\u4e00\u6837\u3002(\u6211\u901a\u8fc7\u6dfb\u52a0\u9002\u5f53\u7684\u6295\u5f71\u4f18\u5316\u4e86\u8fd9\u7c7b\u67e5\u8be2\uff0c\u5e76\u5c06\u8fd0\u884c\u65f6\u95f4\u4ece\u51e0\u5206\u949f\u51cf\u5c11\u5230\u51e0\u79d2\uff1b\u6240\u6709\u65f6\u95f4\u90fd\u82b1\u5728\u4e86\u5c06\u6570\u636e\u5e93\u884c\u8f6c\u6362\u4e3aJava\u5bf9\u8c61\u4e0a\u3002)\u3002\n\u8fd9\u5bfc\u81f4\u4e86\u53e6\u4e00\u4e2a\u7cdf\u7cd5\u7684\u7ecf\u5386\uff1a\u6709\u5bb3\u5730\u4f7f\u7528\u5916\u952e\u3002\u5728\u6211\u4f7f\u7528\u8fc7\u7684ORM\u4e2d\uff0c\u7c7b\u4e4b\u95f4\u7684\u94fe\u63a5\u5728\u6570\u636e\u6a21\u578b\u4e2d\u8868\u793a\u4e3a\u5916\u952e\uff0c\u5982\u679c\u6ca1\u6709\u4ed4\u7ec6\u914d\u7f6e\uff0c\u5728\u68c0\u7d22\u5bf9\u8c61\u65f6\u4f1a\u5bfc\u81f4\u5927\u91cf\u8fde\u63a5\u3002(\u5728\u6211\u7684\u5de5\u4f5c\u4e2d\uff0c\u6700\u8fd1\u5bf9\u4e00\u4e2a\u8fd9\u6837\u7684\u8868\u8fdb\u884c\u4e86\u8ba1\u6570\uff0c\u7ed3\u679c\u4ea7\u751f\u4e86600\u591a\u4e2a\u5c5e\u6027\u548c14\u4e2a\u8fde\u63a5\u6765\u8bbf\u95ee\u5355\u4e2a\u5bf9\u8c61\uff0c\u4f7f\u7528\u9996\u9009\u67e5\u8be2\u65b9\u6cd5\u3002)\u3002\n\u5c5e\u6027\u722c\u884c\u548c\u8fc7\u5ea6\u4f7f\u7528\u5916\u952e\u544a\u8bc9\u6211\uff0c\u4e3a\u4e86\u6709\u6548\u5730\u4f7f\u7528ORM\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u4e86\u89e3SQL\u3002\u4e0eORMS\u7684\u4e89\u7528\u4e4b\u5904\u5728\u4e8e\uff0c\u5982\u679c\u60a8\u9700\u8981\u4e86\u89e3SQL\uff0c\u53ea\u9700\u4f7f\u7528SQL\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u77e5\u9053\u5982\u4f55\u5c06\u975eSQL\u8f6c\u6362\u4e3aSQL\u3002\n\u5f53\u60a8\u8bd5\u56fe\u4f7f\u7528ORM\u5b9e\u9645\u7f16\u5199\u67e5\u8be2\u65f6\uff0c\u4e86\u89e3\u5982\u4f55\u7f16\u5199SQL\u53d8\u5f97\u66f4\u52a0\u91cd\u8981\u3002\u5f53\u6548\u7387\u4ee4\u4eba\u62c5\u5fe7\u65f6\uff0c\u8fd9\u4e00\u70b9\u5c24\u4e3a\u91cd\u8981\u3002\n\u5728\u6211\u770b\u6765\uff0c\u9664\u975e\u60a8\u6709\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u6570\u636e\u6a21\u578b(\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u4ece\u6765\u4e0d\u505a\u8fde\u63a5)\uff0c\u5426\u5219\u60a8\u5c06\u7aed\u5c3d\u5168\u529b\u8ba1\u7b97\u51fa\u5982\u4f55\u8ba9ORM\u751f\u6210\u9ad8\u6548\u8fd0\u884c\u7684SQL\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u6bd4\u5b9e\u9645\u7684SQL\u66f4\u52a0\u6a21\u7cca\u3002\n\u5982\u679c\u60a8\u9009\u62e9\u4fdd\u6301\u67e5\u8be2\u7b80\u5355\uff0c\u90a3\u4e48\u60a8\u6700\u7ec8\u5c06\u5728\u4ee3\u7801\u4e2d\u5b8c\u6210\u5927\u91cf\u5de5\u4f5c\uff0c\u800c\u8fd9\u4e9b\u5de5\u4f5c\u53ef\u4ee5\u5728\u6570\u636e\u5e93\u4e2d\u66f4\u5feb\u5730\u5b8c\u6210\u3002\u7a97\u53e3\u51fd\u6570\u662f\u76f8\u5bf9\u9ad8\u7ea7\u7684SQL\uff0c\u7528ORM\u7f16\u5199\u8d77\u6765\u5f88\u75db\u82e6\u3002\u4e0d\u5c06\u5b83\u4eec\u5199\u5165\u67e5\u8be2\u53ef\u80fd\u610f\u5473\u7740\u60a8\u4f1a\u5c06\u5927\u91cf\u989d\u5916\u6570\u636e\u4ece\u6570\u636e\u5e93\u4f20\u8f93\u5230\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u9009\u62e9\u4f7f\u7528\u6a21\u677f\u7cfb\u7edf\u7f16\u5199\u67e5\u8be2\uff0c\u5e76\u4f7f\u7528ORM\u63cf\u8ff0\u8868\u3002\u901a\u8fc7\u76f4\u63a5\u4f7f\u7528SQL\uff0c\u6211\u83b7\u5f97\u4e86\u8868\u7684\u5e94\u7528\u5c42\u63cf\u8ff0\u7684\u4fbf\u5229\u6027\u3002\u8fd9\u6bd4\u6211\u5230\u76ee\u524d\u4e3a\u6b62\u7528\u8fc7\u7684\u4efb\u4f55\u4e1c\u897f\u9ebb\u70e6\u90fd\u8981\u5c11\u5f97\u591a\u3002\n\u8fd9\u4f3c\u4e4e\u662f\u90a3\u4e9b\u4e0d\u53ef\u907f\u514d\u7684\u88c1\u5458\u4e4b\u4e00\u3002\u5982\u679c\u4f60\u8bd5\u56fe\u6446\u8131\u5b83\uff0c\u4f60\u53ea\u4f1a\u5236\u9020\u66f4\u591a\u7684\u95ee\u9898\u6216\u589e\u52a0\u592a\u591a\u7684\u590d\u6742\u6027\u3002\n\u95ee\u9898\u5728\u4e8e\uff0c\u60a8\u6700\u7ec8\u5728\u4e24\u4e2a\u4f4d\u7f6e\u62e5\u6709\u6570\u636e\u5b9a\u4e49\uff1a\u6570\u636e\u5e93\u548c\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u5c06\u5b9a\u4e49\u5b8c\u5168\u4fdd\u7559\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u5219\u6700\u7ec8\u5fc5\u987b\u4f7f\u7528ORM\u4ee3\u7801\u7f16\u5199SQL DataDefinition Language(DDL)\uff0c\u8fd9\u4e0e\u5728ORM\u4e2d\u7f16\u5199\u9ad8\u7ea7\u67e5\u8be2\u662f\u76f8\u540c\u7684\u3002\u5982\u679c\u60a8\u5c06\u5176\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u5219\u4e3a\u4e86\u65b9\u4fbf\u548c\u9632\u6b62\u8fc7\u591a\u7684\u201c\u5b57\u7b26\u4e32\u952e\u5165\u201d\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u8868\u793a\u5f62\u5f0f\u3002\n\u6211\u66f4\u559c\u6b22\u5c06\u6570\u636e\u5b9a\u4e49\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u7136\u540e\u5c06\u5176\u8bfb\u53d6\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u5b83\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u5b83\u4f7f\u95ee\u9898\u66f4\u6613\u4e8e\u7ba1\u7406\u3002\u6211\u53d1\u73b0\u7528\u53cd\u5c04\u6280\u672f\u6765\u83b7\u53d6\u6570\u636e\u5b9a\u4e49\u662f\u4e0d\u503c\u5f97\u7684\uff0c\u6211\u4e0d\u5f97\u4e0d\u5728\u4e24\u4e2a\u5730\u65b9\u7ba1\u7406\u6570\u636e\u5b9a\u4e49\u7684\u4e0d\u7a33\u5b9a\u6027\u3002\n\u4f46\u662f\uff0c\u8be5\u6b7b\u7684\u8fc1\u79fb\u95ee\u9898\u662f\u771f\u6b63\u7684\u523a\u75db\uff1a\u66f4\u6539\u6a21\u578b\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff0c\u4f46\u5728\u6570\u636e\u5e93\u4e2d\u5374\u662f\u771f\u6b63\u7684\u75db\u82e6\u3002\u6bd5\u7adf\uff0c\u6570\u636e\u5e93\u662f\u6301\u4e45\u7684\uff0c\u800c\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u4e0d\u662f\u3002ORM\u5728\u8fd9\u91cc\u53ea\u662f\u4e2a\u969c\u788d\uff0c\u56e0\u4e3a\u5b83\u4eec\u6839\u672c\u4e0d\u80fd\u5e2e\u52a9\u7ba1\u7406\u6570\u636e\u8fc1\u79fb\u3002\u6211\u7684\u5de5\u4f5c\u539f\u5219\u662f\u6570\u636e\u5e93\u7684\u6570\u636e\u5b9a\u4e49\u4e0d\u5e94\u8be5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u64cd\u4f5c\u3002\u76f8\u53cd\uff0c\u5e94\u8be5\u64cd\u4f5c\u67e5\u8be2\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u67e5\u8be2\u662f\u60a8\u5bf9\u6570\u636e\u5e93\u7684API\u3002\u56e0\u6b64\uff0c\u6211\u4e0d\u518d\u8003\u8651\u5bf9\u8c61\uff0c\u800c\u662f\u8003\u8651\u5177\u6709\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u3002\n\u56e0\u6b64\uff0c\u4eba\u4eec\u4e0d\u5f97\u4e0d\u95ee\uff0c\u9664\u4e86\u65b9\u4fbf\u8fdb\u884c\u67e5\u8be2\u4e4b\u5916\uff0c\u60a8\u662f\u5426\u5e94\u8be5\u4f7f\u7528ORM\u5462\uff1f\n\u5728\u4f7f\u7528ORM\u65f6\uff0c\u5904\u7406\u5b9e\u4f53\u6807\u8bc6\u662f\u60a8\u5fc5\u987b\u59cb\u7ec8\u7262\u8bb0\u7684\u4e8b\u60c5\u4e4b\u4e00\uff0c\u5b83\u8feb\u4f7f\u60a8\u4e3a\u4e24\u4e2a\u7cfb\u7edf\u7f16\u5199\u4ee3\u7801\uff0c\u800c\u53ea\u6709\u4e00\u4e2a\u7cfb\u7edf\u7684\u53ef\u8868\u8fbe\u6027\u3002\n\u5f53\u60a8\u6709\u5916\u952e\u65f6\uff0c\u60a8\u4f7f\u7528\u6807\u8bc6\u7b26\u5f15\u7528\u76f8\u5173\u6807\u8bc6\u3002\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u201c\u6807\u8bc6\u7b26\u201d\u6709\u591a\u79cd\u542b\u4e49\uff0c\u4f46\u901a\u5e38\u662f\u5185\u5b58\u4f4d\u7f6e(\u6307\u9488)\u3002\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u5b83\u662f\u5bf9\u8c61\u672c\u8eab\u7684\u72b6\u6001\u3002\u8fd9\u4e24\u4ef6\u4e8b\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u76f8\u5904\uff0c\u56e0\u4e3a\u60a8\u5b9e\u9645\u4e0a\u53ea\u80fd\u5728\u6570\u636e\u5e93(\u60a8\u6b63\u5728\u5904\u7406\u7684\u6570\u636e\u7684\u6700\u7ec8\u76ee\u7684\u5730)\u4e2d\u4f7f\u7528\u6570\u636e\u5e93\u6807\u8bc6\u7b26\u3002\n\u8fd9\u5bfc\u81f4\u5fc5\u987b\u901a\u8fc7\u624b\u52a8\u5237\u65b0\u7f13\u5b58\u6216\u6267\u884c\u90e8\u5206\u63d0\u4ea4\u6765\u64cd\u4f5cORM\u6765\u83b7\u53d6\u6570\u636e\u5e93\u6807\u8bc6\u7b26\uff0c\u4ee5\u83b7\u53d6\u5b9e\u9645\u7684\u6570\u636e\u5e93\u6807\u8bc6\u7b26\u3002\n\u6211\u751a\u81f3\u4e0d\u80fd\u5c06\u5176\u79f0\u4e3a\u6cc4\u6f0f\u62bd\u8c61\uff0c\u56e0\u4e3a\u201c\u6cc4\u6f0f\u201d\u610f\u5473\u7740\u76f8\u5bf9\u4e8e\u6e90\u4ee3\u7801\u6709\u5c11\u91cf\u5185\u5bb9\u6cc4\u6f0f\u3002\n\u7ebd\u74e6\u5fb7\u63d0\u5230\u7684\u4e00\u4e9b\u4e8b\u60c5\u662f\u5f00\u53d1\u4eba\u5458\u9700\u8981\u5904\u7406\u4e8b\u52a1\u3002\u4e8b\u52a1\u662f\u52a8\u6001\u9650\u5b9a\u4f5c\u7528\u57df\u7684\uff0c\u8fd9\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u662f\u4e00\u4e2a\u5f3a\u5927\u4f46\u901a\u5e38\u88ab\u5ffd\u7565\u7684\u6982\u5ff5\uff0c\u56e0\u4e3a\u5982\u679c\u8fc7\u5ea6\u4f7f\u7528\u5b83\u4eec\u4f1a\u5bfc\u81f4\u878d\u5408\u3002\u8fd9\u5bfc\u81f4\u4e86\u5927\u91cf\u5e26\u6709\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u7684boilerplatecode\uff0c\u5e76\u4ed4\u7ec6\u8003\u8651\u4e86\u4e8b\u52a1\u8fb9\u754c\u5e94\u8be5\u53d1\u751f\u5728\u54ea\u91cc\u3002\u5b83\u8fd8\u4f7f\u60a8\u53ef\u4ee5\u5c06\u4f1a\u8bdd\u5bf9\u8c61\u4f20\u9012\u7ed9\u53ef\u80fd\u5fc5\u987b\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u7684\u4efb\u4f55\u51fd\u6570/\u65b9\u6cd5\u3002\n\u7531\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5bf9\u57fa\u4e8e\u65f6\u95f4\u7684\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56\uff0c\u4e8b\u52a1\u7684\u6982\u5ff5\u5f88\u96be\u8f6c\u5316\u4e3a\u5e94\u7528\u7a0b\u5e8f\u3002\u6b63\u5982\u524d\u9762\u63d0\u5230\u7684\uff0c\u52a8\u6001\u4f5c\u7528\u57df\u662f\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f46\u5b83\u4e0e\u4e3b\u5bfc\u8303\u5f0f\u8bcd\u6c47\u5316\u4f5c\u7528\u57df\u4e0d\u4e00\u81f4\u3002\u56e0\u6b64\uff0c\u5728\u7f16\u5199\u4f7f\u7528\u6570\u636e\u5e93\u7684\u4ee3\u7801\u65f6\uff0c\u60a8\u5fc5\u987b\u975e\u5e38\u5c0f\u5fc3\u5730\u4e86\u89e3\u4e8b\u52a1\u7684\u201c\u4f55\u65f6\u201d\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u6a21\u5757\u5316\u53d8\u5f97\u68d8\u624b(\u201c\u8fd9\u91cc\u6709\u4e00\u4e2a\u4ec5\u5728\u67d0\u4e9b\u4e0a\u4e0b\u6587\u4e2d\u6709\u6548\u7684\u6709\u7528\u51fd\u6570\u201d)\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u5f00\u59cb\u8d28\u7591\u76f4\u63a5\u62d2\u7edd\u5b58\u50a8\u8fc7\u7a0b\u80cc\u540e\u7684\u667a\u6167\u3002\u8fd9\u542c\u8d77\u6765\u5f88\u5f02\u7aef\uff0c\u4f46\u5b83\u53ef\u80fd\u9002\u7528\u4e8e\u6211\u7684\u7528\u4f8b\u3002(\u563f\uff0c\u968f\u7740\u201cdevops\u201d\u7684\u51fa\u73b0\uff0c\u5f00\u53d1\u4eba\u5458\u548c\u6570\u636e\u5e93\u7ba1\u7406\u5458\u4e4b\u95f4\u7684\u5206\u6b67\u57fa\u672c\u4e0a\u662f\u4e0d\u5b58\u5728\u7684\u3002)\n\u6211\u53d1\u73b0\u81ea\u5df1\u5c06\u6570\u636e\u5e93\u770b\u4f5c\u662f\u53e6\u4e00\u79cd\u5177\u6709API\u7684\u6570\u636e\u7c7b\u578b\uff1a\u67e5\u8be2\u3002\u67e5\u8be2\u8fd4\u56de\u67d0\u79cd\u7c7b\u578b\u7684\u503c\uff0c\u8fd9\u4e9b\u503c\u5728\u7a0b\u5e8f\u4e2d\u8868\u793a\u4e3a\u67d0\u4e2a\u5bf9\u8c61\u3002\u901a\u8fc7\u4e0d\u518d\u5c06\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5bf9\u8c61\u89c6\u4e3a\u8981\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u7684\u5bf9\u8c61(ORMS\u7684\u5b58\u5728\u7406\u7531)\uff0c\u800c\u5c06\u6570\u636e\u5e93\u89c6\u4e3a(\u5927\u578b\u4e14\u590d\u6742\u7684)\u6570\u636e\u7c7b\u578b\uff0c\u6211\u53d1\u73b0\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6570\u636e\u5e93\u8981\u7b80\u5355\u5f97\u591a\u3002\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u6ca1\u6709\u65e9\u70b9\u770b\u5230\u3002\n(\u5e94\u8be5\u660e\u786e\u7684\u662f\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u6240\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u5e94\u8be5\u8fd9\u6837\u5904\u7406\u6570\u636e\u5e93\u3002\u6211\u8981\u8bf4\u7684\u662f\uff0c\u6839\u636e\u6211\u6b63\u5728\u5904\u7406\u7684\u6570\u636e\uff0c\u8fd9\u7b26\u5408\u6211\u7684\u7528\u4f8b\u3002)\u3002\n\u4e0d\u7ba1\u6211\u662f\u5426\u53d1\u73b0\u5b58\u50a8\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5e76\u4e0d\u90a3\u4e48\u90aa\u6076\uff0c\u6216\u8005\u6211\u662f\u5426\u7ee7\u7eed\u4f7f\u7528\u6a21\u677f\u5316\u7684SQL\uff0c\u6211\u90fd\u77e5\u9053\u4e00\u4ef6\u4e8b\uff1a\u6211\u4e0d\u4f1a\u843d\u5165\u201cORMS\u4f7f\u4e8b\u60c5\u53d8\u5f97\u5bb9\u6613\u201d\u7684\u9677\u9631\u3002\u5b83\u4eec\u662f\u8868\u793a\u6570\u636e\u5b9a\u4e49\u7684\u4e00\u79cd\u53ef\u4ee5\u63a5\u53d7\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u7f16\u5199\u67e5\u8be2\u7684\u65b9\u5f0f\u5f88\u5dee\uff0c\u5b58\u50a8\u5bf9\u8c61\u72b6\u6001\u7684\u65b9\u5f0f\u4e5f\u5f88\u7cdf\u7cd5\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fRDBMS\uff0c\u8bf7\u54ac\u7d27\u7259\u5173\u5b66\u4e60SQL\u3002", "note_en": "I\u2019ve come to the conclusion that, for me, ORMs are more detriment thanbenefit. In short, they can be used to nicely augment working with SQLin a program, but they should not replace it.\n Some background: For the past 30 months I\u2019ve been working with codethat has to interface with Postgres and to some extent, SQLite. Mostof that has been with  SQLAlchemy (which I quite like) and  Hibernate(which I don\u2019t). I\u2019ve worked with existing code and data models, aswell as designing my own. Most of the data is event-based storage(\u201ctimelines\u201d) with a heavy emphasis on creating reports.\n Much has been written about the Object/Relational ImpedanceMismatch. It\u2019s hard to appreciate it until you live it. Neward, in his well known essay, lays out many cogent reasons why ORMs turn intoquagmires. In my experience, I\u2019ve had to deal directly with a fairnumber of them:  entity identity issues,  dual-schema problem,  dataretrieval mechanism concern, and the  partial-object problem. I want totalk briefly about my experiences with these issues and add one of myown.\n Perhaps the most subversive issue I\u2019ve had with ORMs is \u201cattributecreep\u201d or \u201cwide tables\u201d, that is, tables that just keep accruingattributes. As much as I\u2019d like to avoid it, sometimes it becomesnecessary (although things like  Postgres\u2019 hstore can help). Forexample, a client may be providing you with lots of data that theywant attached to reports based on various business logic. Furthermore,you don\u2019t have much insight into this data; you\u2019re just schlepping itaround.\n This in and of itself isn\u2019t a terrible thing in a database. It becomesa real pain point with an ORM. Specifically, the problem starts toshow up in any query that uses the entity directly to create thequery. You may have a Hibernate query like so early on in the project.\n  This may be fine when Foo has five attributes, but becomes a data firehose when it has a hundred. This is the equivalent of using  SELECT*, which is usually saying more than what is intended. ORMs, however,encourage this use and often make writing precise projections astedious as they are in SQL. (I have optimized such queries by addingthe appropriate projection and reduced the run time from minutes toseconds; all the time was spent translating the database row into aJava object.)\n Which leads to another bad experience: the pernicious use of foreignkeys. In the ORMs I\u2019ve used, links between classes are represented inthe data model as foreign keys which, if not configured carefully,result in a large number of joins when retrieving the object. (Arecent count of one such table in my work resulted in over 600attributes and 14 joins to access a single object, using the preferredquery methodology.)\n Attribute creep and excessive use of foreign keys shows me is that inorder to use ORMs effectively, you still need to know SQL. Mycontention with ORMs is that, if you need to know SQL, just use SQLsince it prevents the need to know how non-SQL gets translated to SQL.\n Knowing how to write SQL becomes even more important when you attemptto actually write queries using an ORM. This is especially importantwhen efficiency is a concern.\n From what I\u2019ve seen, unless you have a really simple data model (thatis, you never do joins), you will be bending over backwards to figureout how to get an ORM to generate SQL that runs efficiently. Most ofthe time, it\u2019s more obfuscated than actual SQL.\n And if you elect to keep the query simple, you end up doing a lot ofwork in the code that could be done in the database faster.  Windowfunctions are relatively advanced SQL that is painful to write withORMs. Not writing them into the query likely means you will betransferring a lot of extra data from the database to yourapplication.\n In these cases, I\u2019ve elected to write queries using a templatingsystem and describe the tables using the ORM. I get the convenience ofan application level description of the table with direct use ofSQL. It\u2019s a lot less trouble than anything else I\u2019ve used so far.\n This one seems to be one of those unavoidable redundancies. If youtry to get rid of it, you only make more problems or add excessivecomplexity.\n The problem is that you end up having a data definition in two places:the database and your application. If you keep the definitionentirely in the application, you end up having to write the SQL DataDefinition Language (DDL) with the ORM code, which is the samecomplication as writing advanced queries in the ORM. If you keep itin the database, you will probably want a representation in theapplication for convenience and to prevent too much \u201cstring typing\u201d.\n I much prefer to keep the data definition in the database and read itinto the application. It doesn\u2019t solve the problem, but it makes itmore manageable. I\u2019ve found that reflection techniques to get thedata definition are not worth it and I succumb to managing theredundancy of data definitons in two places.\n But the damn migration issue is a real kick in the teeth: changing themodel is no big deal in the application, but a real pain in thedatabase. After all, databases are persistent whereas applicationdata is not. ORMs simply get in the way here because they don\u2019t helpmanage data migration at all. I work on the principle that thedatabase\u2019s data definitions aren\u2019t things you should manipulate in theapplication. Instead, manipulate the results of queries. That is,the queries are your API to the database. So instead of thinkingabout objects, I think about functions with return types.\n Thus, one is forced to ask, should you use an ORM for anything butconvenience in making queries?\n Dealing with entity identities is one of those things that you have tokeep in mind at all times when working with ORMs, forcing you to writefor two systems while only have the expressivity of one.\n When you have foreign keys, you refer to related identities with anidentifier. In your application, \u201cidentifier\u201d takes on variousmeanings, but usually it\u2019s the memory location (a pointer). In thedatabase, it\u2019s the state of the object itself. These two things don\u2019treally get along because you can really only use database identifiersin the database (the ultimate destination of the data you\u2019re workingwith).\n What this results in is having to manipulate the ORM to get a databaseidentifier by manually flushing the cache or doing a partial commit toget the actual database identifier.\n I can\u2019t even call this a leaky abstraction because the work \u201cleak\u201dimplies small amounts of the contents escaping relative to the source.\n Something that Neward alludes to is the need for developers to handletransactions. Transactions are dynamically scoped, which is a powerfulbut mostly neglected concept in programming languages due to theconfusion they cause if overused. This leads to a lot of boilerplatecode with exception handlers and a careful consideration of wheretransaction boundaries should occur. It also makes you pass sessionobjects around to any function/method that might have to communicatewith the database.\n The concept of a transaction translates poorly to applications due totheir reliance on context based on time. As mentioned, dynamic scopingis one way to use this in a program, but it is at odds with lexicalscoping, the dominant paradigm. Thus, you must take great care to knowabout the \u201cwhen\u201d of a transaction when writing code that works withdatabases and can make modularity tricky (\u201cHere\u2019s a useful functionthat will only work in certain contexts\u201d).\n  At this point, I\u2019m starting to question the wisdom behind the outrightrejection of  stored procedures. It sounds  heretical, but it may workfor my use cases. (And hey, with the advent of \u201cdevops\u201d, the dividebetween the developer and the database administrator is basicallynon-existent.)\n I\u2019ve found myself thinking about the database as just another datatype that has an API: the queries. The queries return values of sometype, which are represented as some object in the program. By movingaway from thinking of the objects in my application as something to bestored in a database (the raison d\u2019\u00eatre for ORMs) and instead thinkingof the database as a (large and complex) data type, I\u2019ve found workingwith a database from an application to be much simpler. And wonderingwhy I didn\u2019t see it earlier.\n (It should be made clear that I am not claiming this is how allapplications should deal with a database. All I am saying is thatthis fits my use case based on the data I am working with.)\n Regardless of whether I find that stored procedures aren\u2019t actuallythat evil or whether I keep using templated SQL, I do know one thing:I won\u2019t fall into the \u201cORMs make it easy\u201d trap. They are an acceptableway to represent a data definition, but a poor way to write queriesand a bad way to store object state. If you\u2019re using an RDBMS, bitethe bullet and learn SQL.", "posttime": "2020-10-21 14:54:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b66\u4e60,taught,\u6570\u636e\u5e93", "title": "Orms\u6559\u4f1a\u6211\u7684\uff1a\u53ea\u9700\u5b66\u4e60SQL(2014)", "title_en": "What ORMs Have Taught Me: Just Learn SQL (2014)", "transed": 1, "url": "https://wozniak.ca/blog/2014/08/03/1/", "via": "", "real_tags": ["\u5b66\u4e60", "taught", "\u6570\u636e\u5e93"]}, {"category": "", "categoryclass": "", "imagename": "9777c4662921ff2c4e18742ec7d96b33.png", "infoid": 1030259, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e0a\u4e00\u7bc7\u5173\u4e8e\u73b0\u4ee3C++\u7684\u535a\u5ba2\u6587\u7ae0\u83b7\u5f97\u4e86\u60ca\u4eba\u6570\u91cf\u7684\u53cd\u9988\u3002\u6709\u4e9b\u4eba\u751a\u81f3\u7528\u5176\u4ed6\u8bed\u8a00\u91cd\u65b0\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u5305\u62ecGo\u4e2d\u7684\u4e00\u4e2a\uff0cRust\u4e2d\u7684\u4e24\u4e2a\u4e0d\u540c\u7684\uff0c\u751a\u81f3\u8fd9\u4e2a\u7a0d\u5fae\u6709\u70b9\u8d39\u89e3\u7684C++\u91cd\u65b0\u5b9e\u73b0\u662f\u4e00\u4e2a\u58f0\u660e\u5f0f\u6d41\u6c34\u7ebf\u3002\u8fd9\u4ef6\u4e8b\u4e5f\u5728Reddit\u548cHacker\u65b0\u95fb\u4e0a\u88ab\u8c08\u8bba\u8fc7\u3002\u4e0d\u65ad\u5f39\u51fa\u7684\u4e24\u6761\u4e3b\u8981\u8bc4\u8bba\u5982\u4e0b\u3002\n\u8ba9\u6211\u4eec\u540c\u65f6\u89e3\u51b3\u8fd9\u4e24\u4e2a\u95ee\u9898\u5427\u3002\u6709\u5f88\u591a\u652f\u6301Unicode\u7684\u6587\u672c\u5904\u7406\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u6211\u4eec\u5c06\u4f7f\u752810,000\u516c\u65a4\u7684\u9524\u5b50\uff1aUnicode\u7684\u56fd\u9645\u7ec4\u4ef6\u3002\u5b9e\u9645\u7684\u4ee3\u7801\u66f4\u6539\u4e0d\u662f\u90a3\u4e48\u5927\uff0c\u611f\u5174\u8da3\u7684\u4eba\u53ef\u4ee5\u5728\u8fd9\u4e2aGithub\u56de\u8d2d\u4e2d\u67e5\u627e\u8be6\u7ec6\u4fe1\u606f\u3002\u4e0e\u8fd9\u7bc7\u535a\u5ba2\u76f8\u5173\u7684\u662f\u6784\u5efa\u548c\u4f9d\u8d56\u7ba1\u7406\u3002\u4ecb\u5b50\u6784\u5efa\u5b9a\u4e49\u76f8\u5f53\u7b80\u77ed\uff1a\u7ebf\u7a0b\u4f9d\u8d56\u662f\u9488\u5bf9\u591a\u7ebf\u7a0b\u90e8\u5206\u7684(\u53c2\u89c1\u672c\u6587\u672b\u5c3e)\u3002\u6211\u662f\u5728Linux\u4e0a\u5f00\u53d1\u7684\uff0c\u5e76\u4f7f\u7528\u4e86ICU\u63d0\u4f9b\u7684\u4fbf\u6377\u7cfb\u7edf\u3002Windows\u548cMac\u4e0d\u63d0\u4f9b\u7cfb\u7edf\u5e93\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728\u8fd9\u4e9b\u5e73\u53f0\u4e0a\u4ece\u5934\u5f00\u59cb\u6784\u5efaICU\u3002\u8fd9\u662f\u901a\u8fc7\u5728\u9879\u76ee\u7684\u6e90\u6839\u76ee\u5f55\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u5b9e\u73b0\u7684\uff1a\n\u8fd9\u5c06\u8054\u7cfbMeson\u7684WrapDB\u670d\u52a1\u5668\u5e76\u4e0b\u8f7dICU\u7684\u6784\u5efa\u5b9a\u4e49\u6587\u4ef6\u3002\u8fd9\u5c31\u662f\u4f60\u9700\u8981\u505a\u7684\u5168\u90e8\u4e8b\u60c5\u3002\u6784\u5efa\u6587\u4ef6\u4e0d\u9700\u8981\u4efb\u4f55\u66f4\u6539\u3002\u5f53\u60a8\u5f00\u59cb\u6784\u5efa\u9879\u76ee\u65f6\uff0cMeson\u5c06\u81ea\u52a8\u4e0b\u8f7d\u5e76\u6784\u5efa\u4f9d\u8d56\u9879\u3002\u4ee5\u4e0b\u662f\u4e0b\u8f7d\u6b65\u9aa4\u7684\u5c4f\u5e55\u622a\u56fe\uff1a\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u7f3a\u70b9\u662f\uff0cWrapDB\u8fd8\u6ca1\u6709\u90a3\u4e48\u591a\u5305\u3002\u7136\u800c\uff0c\u6709\u4eba\u544a\u8bc9\u6211\uff0c\u8003\u8651\u5230\u4e0b\u4e00\u4e2aMeson\u7248\u672c(\u51e0\u5468\u540e)\u548c\u4e00\u4e9b\u4e0a\u6e38\u8865\u4e01\uff0c\u53ef\u4ee5\u5c06\u6574\u4e2aGTK\u5c0f\u90e8\u4ef6\u5de5\u5177\u5305\u4f5c\u4e3a\u4e00\u4e2a\u5b50\u9879\u76ee\u6784\u5efa\uff0c\u5373\u4f7f\u662f\u5728Windows\u4e0a\u4e5f\u662f\u5982\u6b64\u3002\n\u5982\u679c\u6709\u4eba\u60f3\u4e3a\u8fd9\u4e2a\u9879\u76ee\u505a\u8d21\u732e\uff0c\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u8f6c\u6362\u73b0\u6709\u9879\u76ee\u5e76\u5c06\u5176\u63d0\u4ea4\u5230wrapdb\u6216\u6210\u4e3a\u5ba1\u67e5\u8005\u3002\u4ecb\u5b50\u7f51\u7ad9\u6709\u76f8\u5173\u6587\u6863\u3002\n\u591a\u4f4d\u4eba\u58eb\u6307\u51fa\uff0c\u867d\u7136\u539f\u6765\u7684\u7a0b\u5e8f\u8fd0\u884c\u5f97\u5f88\u597d\uff0c\u4f46\u53ea\u7528\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u74f6\u9888\uff0c\u800c\u4e14\u5728C++\u4e2d\u5f88\u96be\u5e76\u884c\u6267\u884c\u5de5\u4f5c\u3002\u8fd9\u4e5f\u662f\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\u53d8\u5f97\u66f4\u597d\u7684\u4e8b\u60c5\u4e4b\u4e00\u3002\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u5e94\u8be5\u662f\u4f7f\u7528Transform_Reduce\u7684\u5e76\u884c\u7248\u672c\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5927\u591a\u6570\u5e76\u884cSTL\u5b9e\u73b0\u4ecd\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u5728\u591a\u5e73\u53f0\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u5b9e\u73b0\u3002\u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u76f8\u5f53\u5bb9\u6613\u5730\u6eda\u52a8\u6211\u4eec\u81ea\u5df1\u7684\u4e92\u65a5\u4f53\uff0c\u800c\u4e0d\u9700\u8981\u624b\u52a8\u521b\u5efa\u6216\u9501\u5b9a\u5355\u4e2a\u4e92\u65a5\u4f53\u3002\u4ee3\u7801\u5305\u542b\u5b9e\u9645\u7ec6\u8282\uff0c\u4f46\u5176\u8981\u70b9(\u7565\u6709\u7f16\u8f91)\u5982\u4e0b\uff1a\n\u8fd9\u91cc\uff0cCOUNT_WORD_FILES\u51fd\u6570\u8ba1\u7b97\u5355\u4e2a\u6587\u4ef6\u4e2d\u7684\u5b57\u6570\uff0cPOP_FOREND\u51fd\u6570\u5c06\u5404\u4e2a\u7ed3\u679c\u8fde\u63a5\u5230\u6700\u7ec8\u7ed3\u679c\u3002\u901a\u8fc7\u4f7f\u7528\u65e0\u5171\u4eab\u4f53\u7cfb\u7ed3\u6784\u3001\u7eaf\u51fd\u6570\u548c\u503c\u7c7b\u578b\uff0c\u6240\u6709\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\u90fd\u53ef\u4ee5\u50cf\u5355\u7ebf\u7a0b\u4e00\u6837\u7f16\u5199\uff0c\u7ebf\u7a0b\u548c\u4e92\u65a5\u7ba1\u7406\u7684\u7ec6\u8282\u53ef\u4ee5\u7559\u7ed9\u5e93\u4ee3\u7801\u3002\u54c8\u65af\u514b\u5c14\u7684\u7c89\u4e1d\u4eec\u4f1a\u611f\u5230\u81ea\u8c6a(\u6216\u8005\u53ef\u80fd\u611f\u5230\u6050\u60e7\uff0c\u4e0d\u662f\u5f88\u786e\u5b9a)\u3002", "note_en": "My previous blog post about modern C++ got a surprising amount of feedback. Some people even reimplemented the program in other languages, including one\u00a0 in Go,  two  different ones in Rust and even  this slightly brain bending C++ reimplementation as a declarative style pipeline. It also got talked about on Reddit and Hacker news. Two major comments that kept popping up were the following.\n  Let&#39;s solve both of these problems at the same time. There are many &#34;lite&#34; solutions for doing Unicode aware text processing, but we&#39;re going to use the 10 000 kilogram hammer:  International Components for Unicode. The actual code changes are not that big, interested parties can go look up the details in  this Github repo. The thing that is relevant for this blog post is the build and dependency management. The Meson build definition is quite short:     The threads dependency is for the multithreaded parts (see end of this post). I developed this on Linux and used the convenient system provided ICU. Windows and Mac do not provide system libs so we need to build ICU from scratch on those platforms. This is achieved by running the following command in your project&#39;s source root:\n  This contacts Meson&#39;s  WrapDB server and downloads build definition files for ICU. That is all you need to do. The build files do not need any changes. When you start building the project, Meson will automatically download and build the dependency. Here is a screenshot of the download step:\n      One notable downside of this approach is that WrapDB does not have all that many packages yet. However I have been told that given the next Meson release (in a few weeks) and some upstream patches, it is possible to build the entire GTK widget toolkit as a subproject, even on Windows.\n If anyone wants to contribute to the project, contributions are most welcome. You can for example convert existing projects and submit them to wrapdb or become a reviewer. The Meson web site has  the relevant documentation.\n  Several people pointed out that while the original program worked fine, it only uses one thread. This may be a bottleneck and that &#34;in C++ it is hard to execute work in parallel&#34;. This is again one of those things that has gotten a lot better in the last few years. The &#34;correct&#34; solution would be to use the parallel version of  transform_reduce. Unfortunately most parallel STL implementations are still in the process of being implemented so we can&#39;t use those in multiplatform code. We can, however, roll our own fairly easily,  without needing to create or lock a single mutex by hand. The code has the actual details, but the (slightly edited) gist of of it is this:\n    Here the  count_word_files function calculates the number of words in a single file and the  pop_future function joins individual results to the final result. By using a share-nothing architecture, pure functions and value types all business logic code can be written as if it was single threaded and the details of thread and mutex management can be left to library code. Haskell fans would be proud (or possibly horrified, not really sure).", "posttime": "2020-10-21 14:02:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "c++,meson,style,\u6784\u5efa", "title": "\u4f7f\u7528MESON\u5bf9C\u3001C++\u548c\u5176\u4ed6\u8bed\u8a00\u8fdb\u884c\u8d27\u8fd0\u5f0f\u4f9d\u8d56\u7ba1\u7406", "title_en": "Cargo-style dependency management for C, C++ and other languages with Meson", "transed": 1, "url": "https://nibblestew.blogspot.com/2020/10/cargo-style-dependency-management-for-c.html", "via": "", "real_tags": ["c++", "meson", "style", "\u6784\u5efa"]}, {"category": "", "categoryclass": "", "imagename": "18b6543ca958addeb58b9457547435ea.png", "infoid": 1030258, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ec0\u4e48\u662f\u5171\u8bc6\u7b97\u6cd5\uff1f\u4ec0\u4e48\u662f\u5206\u5e03\u5f0f\u6570\u636e\u5e93\uff1fKubernetes\u548cZooKeeper\u5982\u4f55\u4ee5\u5bb9\u9519\u65b9\u5f0f\u5b58\u50a8\u6570\u636e\uff1f\n\u8fd9\u4e9b\u662f\u6211\u4eec\u5c06\u5728\u672c\u6587\u4e2d\u5c1d\u8bd5\u56de\u7b54\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u672c\u6587\u7684A\u90e8\u5206\u5c06\u5c1d\u8bd5\u89e3\u91ca\u60a8\u5c06\u5728\u5f53\u524d\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u4e16\u754c\u4e2d\u542c\u5230\u7684\u4e00\u4e9b\u5e38\u89c1\u672f\u8bed\u3002\u5728B\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5171\u8bc6\u7b97\u6cd5\u7684\u57fa\u672c\u6982\u5ff5\u3002C\u90e8\u5206\u5c06\u4ecb\u7ecd\u4e24\u4e2a\u8457\u540d\u7684\u5171\u8bc6\u7b97\u6cd5\uff0cRAFT\u548cZAB\uff0c\u6700\u540e\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u8fd9\u4e9b\u7b97\u6cd5\u5982\u4f55\u652f\u6301ZooKeeper\u548cKubernetes\u7684\u5206\u5e03\u5f0f\u672c\u8d28\u3002\n\u8fd9\u4e9b\u6982\u5ff5\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u65b0\uff0c\u4f46\u4e86\u89e3\u5b83\u4eec\u80af\u5b9a\u4f1a\u5bf9\u4f60\u7684\u5de5\u4f5c\u6216\u4e0b\u4e00\u6b21\u9762\u8bd5\u6709\u6240\u5e2e\u52a9\u3002\u9a6c\u4e01\u00b7\u514b\u83b1\u666e\u66fc(Martin Kleppmann)\u5199\u7684\u4e00\u672c\u540d\u4e3a\u201c\u8bbe\u8ba1\u6570\u636e\u5bc6\u96c6\u578b\u5e94\u7528\u7a0b\u5e8f\u201d(Designing Data-\u5bc6\u96c6\u578bApplications)\u7684\u4f18\u79c0\u8457\u4f5c\u4e2d\u501f\u7528\u4e86\u5927\u91cf\u6587\u5b57\u5185\u5bb9\u3002\u795d\u60a8\u5b66\u4e60\u6109\u5feb\uff01\n\u5728\u5355\u5f15\u5bfc\u8005\u590d\u5236\u4e2d\uff0c\u5f15\u5bfc\u8005(\u4e3b)\u5c06\u6570\u636e\u590d\u5236\u5230\u5176\u6240\u6709\u8ddf\u968f\u8005(\u8bfb\u53d6\u526f\u672c\u3001\u8f85\u52a9\u8282\u70b9)\u3002\u8fd9\u662f\u6700\u5e38\u7528\u7684\u590d\u5236\u6a21\u5f0f\u3002\u6bcf\u5f53\u65b0\u5199\u5165\u5230\u8fbe\u4e3b\u8282\u70b9\u65f6\uff0c\u5b83\u90fd\u4f1a\u5c06\u8be5\u5199\u5165\u4fdd\u7559\u5230\u5176\u672c\u5730\u5b58\u50a8\uff0c\u5e76\u5c06\u76f8\u540c\u7684\u6570\u636e\u4f5c\u4e3a\u66f4\u6539\u6d41\u6216\u590d\u5236\u65e5\u5fd7\u53d1\u9001\u5230\u5176\u6240\u6709\u590d\u5236\u526f\u672c\u3002\u7136\u540e\uff0c\u6bcf\u4e2a\u8f85\u52a9\u8282\u70b9\u6309\u7167\u5728\u9886\u5bfc\u8282\u70b9\u4e0a\u5904\u7406\u6570\u636e\u7684\u76f8\u540c\u987a\u5e8f\u66f4\u65b0\u5176\u81ea\u5df1\u7684\u672c\u5730\u6570\u636e\u526f\u672c\u3002\n\u5728\u9886\u5bfc\u8005-\u8ddf\u968f\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u4e24\u4e2a\u8282\u70b9\u90fd\u8ba4\u4e3a\u81ea\u5df1\u662f\u9886\u5bfc\u8005\u7684\u60c5\u51b5\u3002\u8fd9\u79cd\u60c5\u51b5\u53eb\u505a\u88c2\u8111\u3002\u5982\u679c\u4e24\u4f4d\u9886\u5bfc\u4eba\u90fd\u63a5\u53d7\u5199\u5165\u662f\u5371\u9669\u7684\uff0c\u800c\u4e14\u6ca1\u6709\u89e3\u51b3\u51b2\u7a81\u7684\u8fc7\u7a0b\u3002\u6570\u636e\u53ef\u80fd\u4f1a\u4e22\u5931\u6216\u635f\u574f\u3002\n\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u6211\u4eec\u6709\u4e94\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\u3002\u8282\u70b9A\u662f\u5f53\u524d\u7684\u9886\u5bfc\u8005\uff0c\u5176\u4f59\u7684\u662f\u8ddf\u968f\u8005\u3002\u73b0\u5728\u5047\u8bbe\u6211\u4eec\u7684\u8282\u70b9A\u51fa\u73b0\u6545\u969c\u3002\u5176\u4f59\u8282\u70b9\u5728\u5b83\u4eec\u4e4b\u95f4\u505a\u51fa\u51b3\u5b9a\uff0c\u5e76\u5c06\u8282\u70b9B\u63d0\u5347\u4e3a\u65b0\u7684\u9886\u5bfc\u8005\u3002\u73b0\u5728\u8282\u70b9A\u91cd\u65b0\u8054\u673a\u3002\u8fd9\u4e2a\u8282\u70b9\u76f4\u5230\u73b0\u5728\u8fd8\u4e0d\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u5e76\u4e14\u4ecd\u7136\u76f8\u4fe1\u81ea\u5df1\u662f\u9886\u5bfc\u8005\uff0c\u8fd9\u5bfc\u81f4\u7cfb\u7edf\u6709\u4e24\u4e2a\u9886\u5bfc\u8005\u8282\u70b9\u3002\n\u7ebf\u6027\u5316\u80cc\u540e\u7684\u57fa\u672c\u601d\u60f3\u662f\u4f7f\u7cfb\u7edf\u770b\u8d77\u6765\u597d\u50cf\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u526f\u672c\uff0c\u5e76\u4e14\u5176\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\u3002\u6709\u4e86\u8fd9\u4e2a\u4fdd\u8bc1\uff0c\u5373\u4f7f\u53ef\u80fd\u6709\u591a\u4e2a\u526f\u672c\uff0c\u5b9e\u9645\u4e0a\u5e94\u7528\u7a0b\u5e8f\u4e5f\u4e0d\u9700\u8981\u62c5\u5fc3\u5b83\u4eec\u3002\n\u53ef\u7ebf\u6027\u5316\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u89e3\u51b3\u4e86\u4e00\u4e9b\u975e\u5e38\u91cd\u8981\u7684\u7528\u4f8b\uff0c\u4f8b\u5982\u9501\u5b9a\u548c\u9886\u5bfc\u8005\u9009\u4e3e\u3001\u6570\u636e\u5e93\u552f\u4e00\u6027\u4fdd\u8bc1(\u552f\u4e00\u6027\u7ea6\u675f)\u548c\u8de8\u901a\u9053\u5b9a\u65f6\u4f9d\u8d56\u3002\n\u60a8\u53ef\u80fd\u8ba4\u4e3a\u5b9e\u73b0\u8fd9\u4e00\u70b9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u771f\u6b63\u53ea\u4f7f\u7528\u6570\u636e\u7684\u5355\u4e2a\u526f\u672c\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u4e0d\u53ef\u5bb9\u9519\u7684\u3002\u5982\u679c\u4fdd\u5b58\u8be5\u526f\u672c\u7684\u8282\u70b9\u51fa\u73b0\u6545\u969c\uff0c\u6570\u636e\u5c06\u4e22\u5931\uff0c\u6216\u8005\u81f3\u5c11\u5728\u91cd\u65b0\u542f\u52a8\u8be5\u8282\u70b9\u4e4b\u524d\u65e0\u6cd5\u8bbf\u95ee\u3002\u73b0\u5728\u95ee\u9898\u51fa\u73b0\u4e86\uff0c\u5982\u4f55\u5728\u590d\u5236\u7684\u6570\u636e\u5e93\u4e2d\u5b9e\u73b0\u7ebf\u6027\u5316\u3002\n\u5355\u4e2a\u5f15\u5bfc\u8005\u590d\u5236\uff1a\u5728\u8fd9\u91cc\uff0c\u5f15\u5bfc\u8005\u62e5\u6709\u7528\u4e8e\u5199\u5165\u7684\u6570\u636e\u7684\u4e3b\u62f7\u8d1d\uff0c\u800c\u8ddf\u968f\u8005\u5728\u5176\u4ed6\u8282\u70b9\u4e0a\u7ef4\u62a4\u6570\u636e\u7684\u5907\u4efd\u62f7\u8d1d\u3002\u5982\u679c\u4f60\u4ece\u9886\u5bfc\u8005\u6216\u540c\u6b65\u66f4\u65b0\u7684\u8ffd\u968f\u8005\u90a3\u91cc\u9605\u8bfb\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u6709\u53ef\u80fd\u6210\u4e3a\u7ebf\u6027\u5316\u7684\u3002\n\u5355\u5f15\u5bfc\u5668\u590d\u5236\u901a\u8fc7\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u5f15\u5bfc\u5668\uff0c\u5e76\u5bf9\u5f15\u5bfc\u5668\u4e0a\u5355\u4e2aCPU\u6838\u5fc3\u4e0a\u7684\u6240\u6709\u64cd\u4f5c\u8fdb\u884c\u6392\u5e8f\uff0c\u4ece\u800c\u786e\u5b9a\u64cd\u4f5c\u7684\u603b\u987a\u5e8f\u3002\u56e0\u6b64\uff0c\u6311\u6218\u662f\u5982\u4f55\u5728\u541e\u5410\u91cf\u5927\u4e8e\u5355\u4e2a\u9886\u5bfc\u8005\u53ef\u4ee5\u5904\u7406\u7684\u60c5\u51b5\u4e0b\u6269\u5c55\u7cfb\u7edf\uff0c\u4ee5\u53ca\u5728\u9886\u5bfc\u8005\u51fa\u73b0\u6545\u969c\u65f6\u5982\u4f55\u5904\u7406\u6545\u969c\u8f6c\u79fb\u3002\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u4e2a\u95ee\u9898\u79f0\u4e3a\u5168\u5e8f\u5e7f\u64ad\u6216\u539f\u5b50\u5e7f\u64ad\u3002\n\u5168\u987a\u5e8f\u5e7f\u64ad\u901a\u5e38\u88ab\u63cf\u8ff0\u4e3a\u7528\u4e8e\u5728\u8282\u70b9\u4e4b\u95f4\u4ea4\u6362\u6d88\u606f\u7684\u534f\u8bae\u3002\u975e\u6b63\u5f0f\u5730\uff0c\u5b83\u8981\u6c42\u59cb\u7ec8\u6ee1\u8db3\u4e24\u4e2a\u5b89\u5168\u5c5e\u6027\uff1a\n\u4ea4\u4ed8\u53ef\u9760\u3002\u4e0d\u4f1a\u4e22\u5931\u4efb\u4f55\u6d88\u606f\u3002\u5982\u679c\u5c06\u6d88\u606f\u4f20\u9012\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u4f1a\u5c06\u5176\u4f20\u9012\u5230\u6240\u6709\u8282\u70b9\u3002\n\u67e5\u770b\u603b\u8ba2\u5355\u5e7f\u64ad\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\uff0c\u5b83\u662f\u521b\u5efa\u65e5\u5fd7(\u5982\u590d\u5236\u65e5\u5fd7\u4e2d\u7684\u65e5\u5fd7)\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5176\u4e2d\u4f20\u9012\u6d88\u606f\u7c7b\u4f3c\u4e8e\u5c06\u6d88\u606f\u8ffd\u52a0\u5230\u65e5\u5fd7\u3002\u7531\u4e8e\u6240\u6709\u8282\u70b9\u5fc5\u987b\u4ee5\u76f8\u540c\u7684\u987a\u5e8f\u4f20\u9012\u76f8\u540c\u7684\u6d88\u606f\uff0c\u56e0\u6b64\u6240\u6709\u8282\u70b9\u90fd\u53ef\u4ee5\u8bfb\u53d6\u65e5\u5fd7\u5e76\u770b\u5230\u76f8\u540c\u7684\u6d88\u606f\u5e8f\u5217\u3002\n\u603b\u8ba2\u5355\u5e7f\u64ad\u662f\u5f02\u6b65\u7684\u3002\u4fdd\u8bc1\u4ee5\u56fa\u5b9a\u987a\u5e8f\u53ef\u9760\u5730\u4f20\u9012\u6d88\u606f\uff0c\u4f46\u4e0d\u80fd\u4fdd\u8bc1\u4f55\u65f6\u4f20\u9012\u6d88\u606f(\u56e0\u6b64\uff0c\u4e00\u4e2a\u6536\u4ef6\u4eba\u53ef\u80fd\u4f1a\u843d\u540e\u4e8e\u5176\u4ed6\u6536\u4ef6\u4eba)\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u7ebf\u6027\u5316\u662f\u8fd1\u671f\u7684\u4fdd\u8bc1\u3002\u4fdd\u8bc1\u8bfb\u53d6\u65f6\u4f1a\u770b\u5230\u5199\u5165\u7684\u6700\u65b0\u503c\u3002\n\u51e0\u4e4e\u6240\u6709\u7684\u5171\u8bc6\u7b97\u6cd5\u5728\u5185\u90e8\u90fd\u4f7f\u7528\u9886\u5bfc\u8005\u3002\u8fd9\u4e9b\u534f\u8bae\u5229\u7528\u7eaa\u5143\u7f16\u53f7\uff0c\u5e76\u4fdd\u8bc1\u5728\u6bcf\u4e2a\u7eaa\u5143\u5185\uff0c\u9886\u5bfc\u8005\u662f\u552f\u4e00\u7684\u3002\n1.\u6bcf\u6b21\u8ba4\u4e3a\u73b0\u4efb\u9886\u5bfc\u4eba\u5df2\u7ecf\u53bb\u4e16\uff0c\u8282\u70b9\u4e4b\u95f4\u5c31\u4f1a\u5f00\u59cb\u6295\u7968\u9009\u4e3e\u65b0\u7684\u9886\u5bfc\u4eba\u3002\n2.\u8be5\u9009\u4e3e\u88ab\u8d4b\u4e88\u9012\u589e\u7684\u7eaa\u5143\u7f16\u53f7\uff0c\u56e0\u6b64\u7eaa\u5143\u7f16\u53f7\u662f\u5b8c\u5168\u6709\u5e8f\u7684\u5e76\u4e14\u5355\u8c03\u9012\u589e\u3002\n3.\u5982\u679c\u4e24\u4e2a\u4e0d\u540c\u65f6\u4ee3\u7684\u4e0d\u540c\u9886\u5bfc\u4eba\u4e4b\u95f4\u5b58\u5728\u51b2\u7a81(\u53ef\u80fd\u662f\u56e0\u4e3a\u524d\u4e00\u4f4d\u9886\u5bfc\u4eba\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u53bb\u4e16)\uff0c\u90a3\u4e48\u4ee5\u7eaa\u5143\u6570\u8f83\u9ad8\u7684\u9886\u5bfc\u4eba\u4e3a\u51c6\u3002\n4.\u9886\u5bfc\u8005\u5728\u88ab\u5141\u8bb8\u4f5c\u51fa\u4efb\u4f55\u51b3\u5b9a\u4e4b\u524d\uff0c\u5fc5\u987b\u4ece\u4e00\u5b9a\u7684\u8282\u70b9\u6cd5\u5b9a\u4eba\u6570\u4e2d\u6536\u96c6\u9009\u7968\u3002\u53ea\u6709\u5f53\u8282\u70b9\u4e0d\u77e5\u9053\u6709\u4efb\u4f55\u5176\u4ed6\u5177\u6709\u66f4\u9ad8\u7eaa\u5143\u7684\u9886\u5bfc\u8005\u65f6\uff0c\u5b83\u624d\u4f1a\u6295\u7968\u652f\u6301\u4e00\u9879\u63d0\u8bae\u3002\u8fd9\u53ef\u4ee5\u9632\u6b62\u5927\u8111\u5206\u88c2\u7684\u95ee\u9898\u3002\n\u5171\u8bc6\u610f\u5473\u7740\u591a\u4e2a\u670d\u52a1\u5668\u5c31\u76f8\u540c\u7684\u4fe1\u606f\u8fbe\u6210\u4e00\u81f4\u3002\u901a\u5e38\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a\u6b65\u9aa4\u5b9a\u4e49\u4e00\u81f4\u6027\u7b97\u6cd5\uff1a\n\u5f53\u9009\u4eba\u3002\u6d41\u7a0b\u4f1a\u9009\u51fa\u4e00\u4f4d\u9886\u5bfc\u4eba\u6765\u505a\u51b3\u7b56\u3002\u9886\u5bfc\u8005\u63d0\u51fa\u4e0b\u4e00\u4e2a\u6709\u6548\u7684\u8f93\u51fa\u503c\u3002\n\u6295\u7968\u5427\u3002\u65e0\u6545\u969c\u6d41\u7a0b\u76d1\u542c\u9886\u5bfc\u63d0\u51fa\u7684\u503c\uff0c\u5bf9\u5176\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u6709\u6548\u503c\u63d0\u51fa\u3002\n\u51b3\u5b9a\u5427\u3002\u975e\u6545\u969c\u6d41\u7a0b\u5fc5\u987b\u5c31\u5355\u4e2a\u6b63\u786e\u7684\u8f93\u51fa\u503c\u8fbe\u6210\u5171\u8bc6\u3002\n\u5171\u8bc6\u7b97\u6cd5\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e00\u5927\u7a81\u7834\u3002\u5b83\u4eec\u4e3a\u7cfb\u7edf\u5e26\u6765\u4e86\u5177\u4f53\u7684\u5b89\u5168\u5c5e\u6027(\u4e00\u81f4\u6027\u3001\u5b8c\u6574\u6027\u548c\u6709\u6548\u6027)\uff0c\u4f46\u5b83\u4eec\u4ecd\u7136\u5177\u6709\u5bb9\u9519\u6027\u3002\u5b83\u4eec\u63d0\u4f9b\u5168\u987a\u5e8f\u5e7f\u64ad\uff0c\u56e0\u6b64\u5b83\u4eec\u8fd8\u53ef\u4ee5\u4ee5\u5bb9\u9519\u7684\u65b9\u5f0f\u5b9e\u73b0\u53ef\u7ebf\u6027\u5316\u7684\u539f\u5b50\u64cd\u4f5c\u3002\n\u7b97\u6cd5\u53ef\u4ee5\u5bb9\u5fcd\u7684\u5931\u8d25\u6b21\u6570\u662f\u6709\u9650\u5236\u7684\u3002\u4efb\u4f55\u5171\u8bc6\u7b97\u6cd5\u90fd\u9700\u8981\u81f3\u5c11\u5927\u591a\u6570\u8282\u70b9\u6b63\u5e38\u5de5\u4f5c\u624d\u80fd\u786e\u4fdd\u7ec8\u6b62\u3002\n\u5171\u8bc6\u7b97\u6cd5\u6709\u4e00\u4e9b\u4e0e\u4e4b\u76f8\u5173\u7684\u5c40\u9650\u6027\uff0c\u8fd9\u9650\u5236\u4e86\u5b83\u4eec\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7684\u53ef\u7528\u6027\u3002\n\u8282\u70b9\u5728\u51b3\u5b9a\u63d0\u6848\u4e4b\u524d\u5bf9\u5176\u8fdb\u884c\u6295\u7968\u7684\u8fc7\u7a0b\u662f\u4e00\u79cd\u540c\u6b65\u590d\u5236\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\u3002\n\u534f\u5546\u4e00\u81f4\u5236\u5ea6\u603b\u662f\u9700\u8981\u7edd\u5bf9\u591a\u6570\u624d\u80fd\u8fd0\u4f5c\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5728\u56db\u4e2a\u8282\u70b9\u7684\u4ef2\u88c1\u4e2d\uff0c\u60a8\u81f3\u5c11\u9700\u8981\u4e09\u4e2a\u8282\u70b9\u624d\u80fd\u8fd0\u884c\u3002\n\u5171\u8bc6\u7cfb\u7edf\u901a\u5e38\u4f9d\u9760\u8d85\u65f6\u6765\u68c0\u6d4b\u6545\u969c\u8282\u70b9\u3002\u5728\u5177\u6709\u9ad8\u5ea6\u53ef\u53d8\u7684\u7f51\u7edc\u5ef6\u8fdf\u7684\u73af\u5883\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u53d1\u751f\u8282\u70b9\u9519\u8bef\u5730\u8ba4\u4e3a\u9886\u5bfc\u8005\u7531\u4e8e\u6682\u65f6\u6027\u7f51\u7edc\u95ee\u9898\u800c\u53d1\u751f\u6545\u969c\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9891\u7e41\u7684\u9886\u5bfc\u4eba\u9009\u4e3e\u4f1a\u5bfc\u81f4\u7cdf\u7cd5\u7684\u8868\u73b0\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6700\u7ec8\u53ef\u80fd\u4f1a\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\u6765\u9009\u62e9\u9886\u5bfc\u4eba\uff0c\u800c\u4e0d\u662f\u505a\u4efb\u4f55\u6709\u7528\u7684\u5de5\u4f5c\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u90fd\u5728\u7b49\u5f85\u7684\u90e8\u5206\uff1a\u7406\u89e3\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u8bfb\u5230\u7684\u4e00\u5207\u662f\u5982\u4f55\u6784\u6210\u5404\u79cd\u5171\u8bc6\u7b97\u6cd5\u7684\u652f\u67f1\u7684\u3002\u7136\u540e\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5404\u79cd\u5e38\u7528\u7684\u534f\u8c03\u670d\u52a1\u7684\u5de5\u4f5c\u539f\u7406\uff1aZooKeeper\u548cetcd\u3002\nRAFT\u7b97\u6cd5\u662f\u4e00\u79cd\u5355\u5f15\u5bfc\u8005\u7b97\u6cd5\u3002RAFT\u7b97\u6cd5\u4e2d\u7684\u8282\u70b9\u53ef\u4ee5\u5904\u4e8e\u4ee5\u4e0b\u4e09\u79cd\u72b6\u6001\u4e4b\u4e00\uff1a\n\u9886\u5bfc\u8005\u4fdd\u6301\u4ee5\u5fc3\u8df3\u8d85\u65f6\u6307\u5b9a\u7684\u89c4\u5219\u95f4\u9694\u5411\u6240\u6709\u8ddf\u968f\u8005\u53d1\u9001\u5fc3\u8df3\u3002\u6240\u6709\u6d88\u606f\u90fd\u901a\u8fc7\u6b64\u5fc3\u8df3\u8fdb\u884c\u901a\u4fe1\u3002RAFT\u7b97\u6cd5\u9075\u5faa\u4ee5\u4e0b\u6b65\u9aa4\u3002\n\u5982\u679c\u8ffd\u968f\u8005\u6ca1\u6709\u6536\u5230\u9886\u5bfc\u4eba\u7684\u6765\u4fe1\uff0c\u90a3\u4e48\u4ed6\u4eec\u53ef\u4ee5\u6210\u4e3a\u5019\u9009\u4eba\u3002\u9009\u4e3e\u8d85\u65f6\u662f\u6307\u8ffd\u968f\u8005\u5728\u6210\u4e3a\u5019\u9009\u4eba\u4e4b\u524d\u7b49\u5f85\u7684\u65f6\u95f4\u3002\u5b83\u662f\u968f\u673a\u7684\uff0c\u4ecb\u4e8e150ms\u548c300ms\u4e4b\u95f4\u3002\n\u7136\u540e\uff0c\u5019\u9009\u4eba\u5f00\u59cb\u65b0\u7684\u9009\u4e3e\u4efb\u671f\u3002\u5b83\u4e3a\u81ea\u5df1\u6295\u7968\uff0c\u5e76\u5411\u5176\u4ed6\u8282\u70b9\u53d1\u9001\u8bf7\u6c42\u6295\u7968\u6d88\u606f\u3002\u8282\u70b9\u7528\u5b83\u4eec\u7684\u6295\u7968\u8fdb\u884c\u56de\u590d\u3002\n\u5982\u679c\u5019\u9009\u4eba\u4ece\u591a\u6570\u8282\u70b9\u83b7\u5f97\u9009\u7968\uff0c\u5b83\u5c31\u4f1a\u6210\u4e3a\u9886\u5bfc\u8005\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u505a\u9886\u5bfc\u4eba\u9009\u4e3e\u3002\u6240\u6709\u66f4\u6539\u90fd\u8981\u7ecf\u8fc7\u5f15\u7ebf\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002\n\u5728\u9886\u5bfc\u4eba\u9009\u4e3e\u671f\u95f4\uff0c\u8bf7\u6c42\u6295\u7968\u8fd8\u5305\u542b\u6709\u5173\u5019\u9009\u4eba\u65e5\u5fd7\u7684\u4fe1\u606f\uff0c\u4ee5\u786e\u5b9a\u54ea\u4e2a\u65e5\u5fd7\u662f\u6700\u65b0\u7684\u3002\u5982\u679c\u8bf7\u6c42\u6295\u7968\u7684\u5019\u9009\u4eba\u7684\u66f4\u65b0\u6570\u636e\u5c11\u4e8e\u5b83\u8bf7\u6c42\u6295\u7968\u7684\u8ffd\u968f\u8005\uff0c\u5219\u8ffd\u968f\u8005\u6839\u672c\u4e0d\u4f1a\u6295\u7968\u7ed9\u6240\u8ff0\u5019\u9009\u4eba\u3002\n\u6bcf\u4e2a\u66f4\u6539\u90fd\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u6761\u76ee\u6dfb\u52a0\u5230\u9886\u5bfc\u8005\u7684\u65e5\u5fd7\u4e2d\u3002\u65e5\u5fd7\u6761\u76ee\u6700\u521d\u662f\u672a\u63d0\u4ea4\u7684\u3002\n\u9886\u5bfc\u8005\u7b49\u5f85\uff0c\u76f4\u5230\u5927\u591a\u6570\u8282\u70b9\u5df2\u7ecf\u5199\u5165\u8be5\u6761\u76ee\u3002\u6536\u5230\u54cd\u5e94\u540e\uff0c\u73b0\u5728\u63d0\u4ea4\u6761\u76ee\u3002\n\u7136\u540e\uff0c\u9886\u5bfc\u8005\u66f4\u65b0\u8ddf\u968f\u8005\u8be5\u503c\u5df2\u63d0\u4ea4\u7684\u4fe1\u606f\u3002\u8ffd\u968f\u8005\u8282\u70b9\u7136\u540e\u5206\u522b\u63d0\u4ea4\u8be5\u503c\u3002\n\u7fa4\u96c6\u73b0\u5728\u5df2\u5c31\u7cfb\u7edf\u72b6\u6001\u8fbe\u6210\u5171\u8bc6\u3002\u6b64\u8fc7\u7a0b\u79f0\u4e3a\u65e5\u5fd7\u590d\u5236\u3002\n\u89e3\u51b3\u4e86\u5206\u88c2\u5927\u8111\u95ee\u9898\uff0c\u56e0\u4e3a\u5728\u96c6\u7fa4\u4e2d\uff0c\u4efb\u4f55\u65f6\u5019\u90fd\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u8fbe\u5230\u591a\u6570\u3002\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u7684\u7968\u6570\u76f8\u7b49\uff0c\u5219\u6295\u7968\u5c06\u518d\u6b21\u8fdb\u884c\u3002\n\u6b63\u5982\u60a8\u4e00\u5b9a\u5df2\u7ecf\u610f\u8bc6\u5230\u7684\u90a3\u6837\uff0c\u8be5\u7b97\u6cd5\u4f7f\u7528\u4e86\u6211\u4eec\u4e4b\u524d\u7814\u7a76\u8fc7\u7684\u4e24\u9636\u6bb5\u63d0\u4ea4\u7684\u6982\u5ff5\u3002\u9996\u5148\uff0c\u7531\u4e00\u4f4d\u9886\u5bfc\u4eba\u53d1\u8d77\u4e00\u8f6e\u6295\u7968\u3002\u5728\u8d85\u8fc7\u534a\u6570\u7684\u9009\u7968\u88ab\u63a5\u53d7\u540e\uff0c\u5c31\u4f1a\u53d1\u8d77\u627f\u8bfa\u3002\n\u5b83\u6b63\u5728\u5404\u79cd\u7cfb\u7edf\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982etcd\u548cConsul(Hashicorp)\u3002MongoDB\u7684\u590d\u5236\u4e5f\u53d7\u5230RAFT\u7b97\u6cd5\u7684\u5e7f\u6cdb\u5f71\u54cd\u3002\nZAB(\u52a8\u7269\u56ed\u9972\u517b\u5458\u539f\u5b50\u5e7f\u64ad)\u662f\u52a8\u7269\u56ed\u9972\u517b\u5458\u4f7f\u7528\u7684\u4e00\u79cd\u5171\u8bc6\u534f\u8bae\u3002ZAB\u662f\u9488\u5bf9ZooKeeper\u7684\u4e13\u7528\u534f\u8bae\uff0c\u56e0\u6b64\u5b83\u7684\u4f7f\u7528\u4ec5\u9650\u4e8eZooKeeper\u3002\u624e\u5e03\u548c\u52a8\u7269\u56ed\u7ba1\u7406\u5458\u4e00\u8d77\u51fa\u751f\u4e8e2007\u5e74\u3002\n\u5982\u679c\u9886\u5bfc\u8005\u5728\u63d0\u4ea4\u9636\u6bb5\u5931\u8d25\uff0c\u5e76\u4e14\u6b64\u5199\u5165\u64cd\u4f5c\u5df2\u5728\u81f3\u5c11\u4e00\u4e2a\u8ddf\u968f\u8005\u4e0a\u63d0\u4ea4\uff0c\u5219\u8be5\u8ddf\u968f\u8005\u80af\u5b9a\u4f1a\u88ab\u9009\u4e3a\u9886\u5bfc\u8005\uff0c\u56e0\u4e3a\u5b83\u7684zxid\u662f\u6700\u5927\u7684\u3002\u88ab\u9009\u4e3a\u9886\u8896\u540e\uff0c\u6b64\u8ddf\u968f\u8005\u8ba9\u6240\u6709\u8ddf\u968f\u8005\u63d0\u4ea4\u6b64\u6d88\u606f\u3002\n\u4ece\u4e0a\u9762\u7684\u56fe\u8868\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u63a2\u7d22\u8fc7\u7684\u5171\u8bc6\u7b97\u6cd5\u6709\u5e7f\u6cdb\u7684\u5b9e\u73b0\uff0c\u6bd4\u5982ZooKeeper\u3001etcd\u548cChubby\u3002\u5b83\u4eec\u95f4\u63a5\u7528\u4e8e\u89e3\u51b3\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u5404\u79cd\u95ee\u9898\uff0c\u5982\u670d\u52a1\u53d1\u73b0\u3001\u534f\u8c03\u3001\u9501\u5b9a\u3001\u6545\u969c\u68c0\u6d4b\u548c\u4e3b\u673a\u9009\u4e3e\u3002\n\u201c\u4e00\u79cd\u9ad8\u5ea6\u4e00\u81f4\u7684\u5206\u5e03\u5f0f\u952e\u503c\u5b58\u50a8\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u9760\u7684\u65b9\u5f0f\u6765\u5b58\u50a8\u9700\u8981\u7531\u5206\u5e03\u5f0f\u7cfb\u7edf\u6216\u8ba1\u7b97\u673a\u7fa4\u96c6\u8bbf\u95ee\u7684\u6570\u636e\u3002\u5b83\u53ef\u4ee5\u5728\u7f51\u7edc\u5206\u533a\u671f\u95f4\u4f18\u96c5\u5730\u5904\u7406\u9886\u5bfc\u8005\u9009\u4e3e\uff0c\u5e76\u53ef\u4ee5\u5bb9\u5fcd\u673a\u5668\u6545\u969c\uff0c\u5373\u4f7f\u5728\u9886\u5bfc\u8005\u8282\u70b9\u4e2d\u4e5f\u662f\u5982\u6b64\u3002ETCD\u673a\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u901a\u8fc7RAFT\u5171\u8bc6\u7b97\u6cd5\u8fdb\u884c\u5904\u7406\u3002\n\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4f7f\u7528\u5b83\u7684\u4e00\u4e9b\u6d41\u884c\u5de5\u5177/\u8f6f\u4ef6\u3002\nEtcd\u7528\u4f5c\u670d\u52a1\u53d1\u73b0\u7684\u540e\u7aef\uff0c\u5e76\u5b58\u50a8\u6240\u6709\u96c6\u7fa4\u72b6\u6001\u548c\u914d\u7f6e\uff0c\u672c\u8d28\u4e0a\u662f\u4f5c\u4e3a\u5176\u6570\u636e\u5e93\u3002\n\u5b83\u4f7f\u7528etcd\u7684\u624b\u8868\u529f\u80fd\u6765\u76d1\u89c6\u5bf9\u8fd9\u4e24\u9879\u5185\u5bb9\u7684\u66f4\u6539\u3002\u5982\u679c\u5b83\u4eec\u6709\u5206\u6b67\uff0c\u5e93\u4f2f\u5185\u65af\u5c31\u4f1a\u505a\u51fa\u6539\u53d8\uff0c\u4f7f\u5b9e\u9645\u72b6\u6001\u548c\u671f\u671b\u72b6\u6001\u76f8\u534f\u8c03\u3002\n\u901a\u8fc7kubectl create\u8fdb\u884c\u7684\u4efb\u4f55\u66f4\u6539\u90fd\u5c06\u5bfc\u81f4etcd\u4e2d\u7684\u6761\u76ee\u66f4\u65b0\u3002\n\u7528\u4e8e\u7ef4\u62a4\u914d\u7f6e\u4fe1\u606f\u3001\u547d\u540d\u3001\u63d0\u4f9b\u5206\u5e03\u5f0f\u540c\u6b65\u548c\u63d0\u4f9b\u7ec4\u670d\u52a1\u7684\u96c6\u4e2d\u5f0f\u670d\u52a1\u3002\n\u52a8\u7269\u56ed\u770b\u5b88\u4eba\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u6280\u672f\u5947\u8ff9\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u4f1a\u6df1\u5165\u8ba8\u8bba\u5b83\u7684\u5168\u90e8\u7ec6\u8282\u3002\nZooKeeper\u7ef4\u62a4\u96c6\u7fa4\u914d\u7f6e\u4fe1\u606f\uff0c\u8be5\u4fe1\u606f\u5728\u96c6\u7fa4\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e4b\u95f4\u5171\u4eab\u3002\n\u5b83\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u9501\u3001\u961f\u5217\u7b49\u6765\u89e3\u51b3\u96c6\u7fa4\u4e2d\u7684\u5206\u5e03\u5f0f\u540c\u6b65\u95ee\u9898\u3002\nZooKeeper\u8fd8\u5728\u7fa4\u7ec4\u670d\u52a1\u4e2d\u5e2e\u52a9\u9009\u62e9\u96c6\u7fa4\u4e2d\u7684\u4e3b\u8981\u52a8\u7269(\u9886\u5bfc\u8005\u9009\u4e3e\u8fc7\u7a0b)\u3002\n\u63d0\u4f9b\u66f4\u6539\u901a\u77e5\u529f\u80fd\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u53d1\u73b0\u53e6\u4e00\u4e2a\u5ba2\u6237\u7aef\u4f55\u65f6\u52a0\u5165\u96c6\u7fa4(\u57fa\u4e8e\u5b83\u5199\u5165ZooKeeper\u7684\u503c)\uff0c\u6216\u8005\u53e6\u4e00\u4e2a\u5ba2\u6237\u7aef\u662f\u5426\u5931\u8d25\u3002\n\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\uff0c\u60a8\u5f88\u5c11\u9700\u8981\u76f4\u63a5\u4f7f\u7528ZooKeeper\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u5e76\u4e0d\u9002\u5408\u4f5c\u4e3a\u901a\u7528\u6570\u636e\u5e93\u3002\u66f4\u6709\u53ef\u80fd\u7684\u662f\uff0c\u60a8\u6700\u7ec8\u4f1a\u901a\u8fc7\u5176\u4ed6\u9879\u76ee\u95f4\u63a5\u4f9d\u8d56\u5b83\u3002\u4f8b\u5982\uff0cHBase\u3001Hadoop\u7eb1\u7ebf\u3001OpenStack Nova\u3001Akka\u548cKafka\u90fd\u4f9d\u8d56\u4e8e\u5728\u540e\u53f0\u8fd0\u884c\u7684ZooKeeper\u3002\n\u201cApache Kafka\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u4e8b\u4ef6\u6d41\u5e73\u53f0\uff0c\u88ab\u6570\u5343\u5bb6\u516c\u53f8\u7528\u4e8e\u9ad8\u6027\u80fd\u6570\u636e\u7ba1\u9053\u3001\u6d41\u5206\u6790\u3001\u6570\u636e\u96c6\u6210\u548c\u4efb\u52a1\u5173\u952e\u578b\u5e94\u7528\u7a0b\u5e8f\u3002\u201d-Apache Kafka\u7f51\u7ad9\u3002\n\u63a7\u5236\u8005\u9009\u4e3e\uff1a\u63a7\u5236\u8005\u662fKafka\u751f\u6001\u7cfb\u7edf\u4e2d\u6700\u91cd\u8981\u7684\u7ecf\u7eaa\u5b9e\u4f53\u4e4b\u4e00\uff0c\u5b83\u4e5f\u6709\u8d23\u4efb\u7ef4\u62a4\u6240\u6709\u5206\u533a\u7684\u9886\u5bfc\u8005-\u8ffd\u968f\u8005\u5173\u7cfb\u3002\n\u4e3b\u9898\u914d\u7f6e\uff1a\u5305\u62ec\u6240\u6709\u4e3b\u9898\u7684\u914d\u7f6e\uff0c\u5305\u62ec\u5df2\u6709\u4e3b\u9898\u7684\u5217\u8868\uff0c\u5982\u6bcf\u4e2a\u4e3b\u9898\u7684\u5206\u533a\u6570\u3001\u6240\u6709\u526f\u672c\u7684\u4f4d\u7f6e\u7b49\u3002\n\u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff1a\u6240\u6709\u4e3b\u9898\u7684\u8bbf\u95ee\u63a7\u5236\u5217\u8868\u6216ACL\u4e5f\u5728ZooKeeper\u4e2d\u7ef4\u62a4\u3002\n\u96c6\u7fa4\u7684\u6210\u5458\u8eab\u4efd\uff1aZooKeeper\u8fd8\u7ef4\u62a4\u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u523b\u8fd0\u884c\u5e76\u4e14\u662f\u96c6\u7fa4\u4e00\u90e8\u5206\u7684\u6240\u6709\u4ee3\u7406\u7684\u5217\u8868\u3002\n\u7136\u800c\uff0cKafka\u5f88\u5feb\u5c31\u8ba1\u5212\u53d6\u6d88\u5bf9ZooKeeper\u7684\u4f9d\u8d56\uff0c\u4ee5\u7b80\u5316\u5176\u67b6\u6784\u3002\u5728\u4ed6\u4eec\u7684\u535a\u5ba2https://www.confluent.io/blog/category/apache-kafka\u4e0a\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u4e0e\u5361\u592b\u5361\u5de5\u4f5c\u6709\u5173\u7684\u4ee4\u4eba\u60ca\u53f9\u7684\u6587\u7ae0\u3002\n\u8fd9\u4e9b\u90fd\u662f\u6211\u8fd9\u8fb9\u7684\uff0c\u4f19\u8ba1\u4eec\u3002\u6211\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u5bf9\u4f60\u6709\u610f\u4e49\u3002\u8bf7\u968f\u65f6\u7ed9\u51fa\u60a8\u7684\u53cd\u9988\u610f\u89c1\u3002", "note_en": "What are consensus algorithms?  What are distributed databases? How do Kubernetes and ZooKeeper store data in a fault-tolerant way?\n These are some of the questions that we will try to answer in this article. Part A of the article will try to explain some of the common terminologies that you will hear in the current world of distributed computing. In Part B, we will explore the basic concepts of consensus algorithms. Part C will cover two famous consensus algorithms,  Raft and  Zab, and towards the end, we will explore how these algorithms power the distributed nature of  ZooKeeper and  Kubernetes.\n These concepts might seem new, but knowledge of them will surely help you in your work or your next interview. A lot of textual content has been borrowed from the superb book written by Martin Kleppmann, titled  Designing Data-Intensive Applications. Happy learning!\n  In a single-leader replication, the leader (primary) replicates data to all of its followers (read replicas, secondary nodes). This is the most commonly used mode of replication. Whenever a new write comes to the primary node, it keeps that write to its local storage and sends the same data to all its replicas as a change stream or replication log. Each secondary then updates its own local copy of data in the same order as it was processed on the leader node.\n  In leader-follower situations, it could happen that two nodes both believe that they are the leader. This situation is called  split-brain. It is dangerous if both leaders accept writes, and there is no process for resolving conflicts. Data is likely to be lost or corrupted.\n  Let\u2019s consider a situation where we have five nodes. Node A is the current leader and the rest are followers. Now suppose our Node A goes down. The rest of the nodes decide amongst themselves and promote Node B as the new leader. Now Node A comes back online. This node isn\u2019t aware of what has happened until now and still believes itself to be the leader, which results in the system to be having two leader nodes.\n  The basic idea behind linearizability is to make a system appear as if there were only one copy of the data and that all operations in it are atomic. With this guarantee, even though there may be multiple replicas, in reality, the application does not need to worry about them.\n Linearizability is important as it solves some of the very important use cases, such as lock and leader election, database uniqueness guarantees (uniqueness constraints), and cross-channel timing dependencies.\n You might think that the simplest way to achieve this would be to really only use a single copy of the data. However, this approach is not fault-tolerant. If the node holding that one copy failed, the data would be lost, or at least inaccessible until the node was brought up again. Now the question arises, how to achieve linearizability in a replicated database.\n Single leader replication: Here the leader has the primary copy of the data that is used for writes, and the followers maintain backup copies of the data on other nodes. If you make reads from the leader, or from synchronously updated followers, then they have the potential  to be linearizable.\n  Single-leader replication determines a total order of operations by choosing one node as the leader and sequencing all operations on a single CPU core on the leader. The challenge then is how to scale the system if the throughput is greater than a single leader can handle, and also how to handle failover if the leader fails. In distributed systems, this problem is known as  total order broadcast or  atomic broadcast.\n Total order broadcast is usually described as a protocol for exchanging messages between nodes. Informally, it requires that two safety properties always be satisfied:\n Reliable delivery. No messages are lost. If a message is delivered to one node, it is delivered to all nodes.\n Another way of looking at total order broadcast is that it is a way of creating a log  (as in a replication log) where delivering a message is like appending to the log. Since all nodes must deliver the same messages in the same order, all nodes can read the log and see the same sequence of messages.\n  Total order broadcast is asynchronous. Messages are guaranteed to be delivered reliably in a fixed order, but there is no guarantee about when a message will be delivered (so one recipient may lag behind the others). By contrast, linearizability is a recency guarantee. A read is guaranteed to see the latest value written.\n  Almost all of the consensus algorithms internally make use of a leader. These protocols make use of epoch number and guarantee that within each epoch, the leader is unique.\n 1. Every time the current leader is thought to be dead, a vote is started among the nodes to elect a new leader.\n 2. This election is given an incremented epoch number, and thus epoch numbers are totally ordered and monotonically increasing.\n 3. If there is a conflict between two different leaders in two different epochs (perhaps because the previous leader actually wasn\u2019t dead after all), then the leader with the higher epoch number prevails.\n 4. Before a leader is allowed to decide anything, it must collect votes from a quorum of nodes. A node votes in favour of a proposal only if it is not aware of any other leader with a higher epoch. This prevents the split-brain problem.\n  Consensus means multiple servers agreeing on the same information. Generally, we can define a consensus algorithm by three steps:\n Elect. Processes elect a leader to make decisions. The leader proposes the next valid output value.\n Vote. The non-faulty processes listen to the value being proposed by the leader, validate it, and propose it as the next valid value.\n Decide. The non-faulty processes must come to a consensus on a single correct output value.\n   Consensus algorithms are a huge breakthrough for distributed systems. They bring concrete safety properties (agreement, integrity, and validity) to systems and they nevertheless remain fault-tolerant. They provide total order broadcast, and therefore they can also implement linearizable atomic operations in a fault-tolerant way.\n  There is a limit to the number of failures that an algorithm can tolerate. Any consensus algorithm requires at least a majority of nodes to be functioning correctly in order to assure termination.\n  Consensus algorithms have some limitations associated with them, which restrict their usability in some situations.\n The process by which nodes vote on proposals before they are decided is a kind of synchronous replication, leading to performance issues.\n Consensus systems always require a strict majority to operate. This means, in a quorum of four nodes, you need a minimum of three nodes to operate.\n Consensus systems generally rely on timeouts to detect failed nodes. In environments with highly variable network delays, it often happens that a node falsely believes the leader to have failed due to a transient network issue. Frequent leader elections in such scenarios result in terrible performance because the system can end up spending more time choosing a leader than doing any useful work.\n  Finally, the part we are all waiting for: understanding how everything we have read till now forms the backbone of various consensus algorithms. Then we look at the workings of various commonly used coordinations services: ZooKeeper and  etcd.\n  Raft is a single-leader algorithm. A node in the Raft algorithm can be in one of the three states:\n     The leader keeps sending a heartbeat to all the followers at regular intervals specified by the heartbeat timeout. All messages are communicated through this heartbeat. The Raft algorithm follows the following steps.\n If followers don\u2019t hear from a leader, then they can become a candidate. The  election timeout is the amount of time a follower waits until becoming a candidate. It is randomised to be between 150ms and 300ms.\n The candidate then starts a new election term. It votes for itself and sends out  request vote messages to other nodes. Nodes reply with their vote.\n The candidate becomes the leader if it gets votes from a majority of nodes. This process is called  leader election . All changes go through the leader, as shown in the figure above.\n During a leader election, the request vote also contains information about the candidate\u2019s log to figure out which one is the latest. If the candidate requesting the vote has less updated data than the follower from which it is requesting vote, the follower simply doesn\u2019t vote for the said candidate.\n Each change is added as an entry in the leader\u2019s log. The log entry is initially uncommitted.\n  The leader waits until a majority of nodes have written the entry. After receiving the response, the entry is now committed.\n The leader then updates the followers that the value has been committed. Follower nodes then commit this value respectively.\n The cluster has now come to a consensus about the system state. This process is called  log replication.\n The split-brain problem is solved because in the cluster at any moment only one node can achieve a majority. If two nodes have equal votes, then the voting happens again.\n As you must have realised, this algorithm uses the concept of two-phase commit that we previously explored. First, a round of votes is initiated from a leader. After the acceptance of more than half of the votes, a commit is launched.\n It is being used in a variety of systems such as etcd and  Consul (Hashicorp). MongoDB\u2019s replication is also widely influenced by the Raft algorithm\n  ZAB (ZooKeeper Atomic BroadCast) is a consensus protocol used in ZooKeeper. ZAB is a dedicated protocol for ZooKeeper and hence its usage is limited to ZooKeeper. ZAB was born in 2007 along with ZooKeeper.\n  If the leader fails in the commit phase and this write operation has been committed on at least one follower, then this follower will definitely be selected as a leader because its zxid is the greatest. After being selected as the leader, this follower lets all followers commit this message.\n  As we can see from the above chart, the consensus algorithms we have explored until now have a wide range of implementations such ZooKeeper, etcd, and  Chubby. They are indirectly used to solve various issues in distributed systems such as service discovery, coordination, locks, failure detection, and master election.\n   \u201ca strongly consistent, distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines. It gracefully handles leader elections during network partitions and can tolerate machine failure, even in the leader node. Communication between etcd machines is handled via the Raft consensus algorithm.\u201d\n Let us now take a look at some of the popular tools/software where it is being used.\n  etcd is used as the back end for service discovery and stores all the clusters state and configurations, essentially as its database.\n It uses etcd\u2019s  watch functionality to monitor changes to either of these two things. If they diverge, Kubernetes makes changes to reconcile the actual state and the desired state.\n  Any change you make via  kubectl create will cause an entry in etcd to be updated.\n     \u201ca centralised service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.\u201d\n ZooKeeper is itself a technical marvel, so we won\u2019t be going into complete in-depth details of it.\n ZooKeeper maintains cluster configuration info which is shared across all the nodes in the cluster.\n It can be used for solving distributed synchronization problems in the cluster by using locks, queues, etc.\n ZooKeeper also helps in group service with the selection of a primary in the cluster (the leader election process).\n Provides change notification capabilities. Clients can find out when another client joins the cluster (based on the value it writes to ZooKeeper) or if another client fails.\n  As an application developer, you will rarely need to use ZooKeeper directly because it is actually not well suited as a general-purpose database. It is more likely that you will end up relying on it indirectly via some other project. For example, HBase, Hadoop YARN, OpenStack Nova, Akka, and Kafka all rely on ZooKeeper running in the background.\n   \u201cApache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.\u201d \u2014  Apache Kafka website\n  Controller election: The controller is one of the most important broking entities in a Kafka ecosystem, and it also has the responsibility to maintain the leader-follower relationship across all the partitions.\n Configuration of topics: It includes the configuration regarding all the topics, including the list of existing topics, like the number of partitions for each topic, the location of all the replicas, etc.\n Access control lists: Access control lists or ACLs for all the topics are also maintained within ZooKeeper.\n Membership of the cluster: ZooKeeper also maintains a list of all the brokers that are functioning at any given moment and are a part of the cluster.\n However, Kafka is soon planning to remove the dependency on ZooKeeper in order to simplify its architecture. Some amazing articles related to working of Kafka can be found on their blog  https://www.confluent.io/blog/category/apache-kafka\n  That&#39;s all from my side, folks. I hope this article made sense to you. Please feel free to give your feedback.", "posttime": "2020-10-21 14:01:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "algorithms,\u7b97\u6cd5,\u5171\u8bc6,consensus,\u8282\u70b9", "title": "\u63ed\u5f00\u5171\u8bc6\u7b97\u6cd5\u7684\u795e\u79d8\u9762\u7eb1\u53ca\u5176\u5b9e\u73b0", "title_en": "Demystifying Consensus Algorithms and Their Implementations", "transed": 1, "url": "https://medium.com/better-programming/demystifying-consensus-algorithms-and-their-implementations-c52f8aca3020", "via": "", "real_tags": ["\u7b97\u6cd5", "\u5171\u8bc6", "consensus", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "89d09d49e274db65505e2cc37f5da969.jpg", "infoid": 1030256, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u793e\u4ea4\u5a92\u4f53\u4e0a\u4e00\u76f4\u6d41\u4f20\u7740\u4e00\u4e2a\u6301\u7eed\u4e0d\u65ad\u7684\u8c0e\u8a00\uff1aCOVID\u7684\u6b7b\u4ea1\u4eba\u6570\u8fdc\u8fdc\u4f4e\u4e8e\u5b98\u65b9\u7edf\u8ba1\u768421.8\u4e07\u591a\u4eba\uff0c\u56e0\u6b64\u8fd9\u79cd\u75be\u75c5\u7684\u5371\u9669\u88ab\u5938\u5927\u4e86\u30028\u6708\u4efd\uff0c\u7279\u6717\u666e\u603b\u7edf\u8f6c\u53d1\u4e86\u4e00\u6761\u63a8\u6587\uff0c\u58f0\u79f0\u8fd9\u4e9b\u62a5\u544a\u7684\u6b7b\u4ea1\u4eba\u6570\u4e2d\u53ea\u67096%\u5b9e\u9645\u4e0a\u6765\u81ea\u65b0\u51a0\u80ba\u708e\u3002(\u8fd9\u6761\u63a8\u6587\u6765\u81ea\u4e00\u540d\u88ab\u63ed\u7a7f\u7684\u9634\u8c0b\u5e7b\u60f3QAnon\u7684\u8ffd\u968f\u8005\u3002)\u3002\u63a8\u7279\u4ee5\u5305\u542b\u865a\u5047\u4fe1\u606f\u4e3a\u7531\u5220\u9664\u4e86\u8fd9\u7bc7\u5e16\u5b50\uff0c\u4f46\u8bf8\u5982\u6b64\u7c7b\u7684\u634f\u9020\u4ecd\u5728\u7ee7\u7eed\u4f20\u64ad\u3002\u7f8e\u56fd\u582a\u8428\u65af\u5dde\u4f17\u8bae\u5458\u7f57\u6770\u00b7\u9a6c\u6b47\u5c14(Roger Marshall)9\u6708\u62b1\u6028\u79f0\uff0c\u8138\u4e66\u5220\u9664\u4e86\u4e00\u7bc7\u5e16\u5b50\uff0c\u4ed6\u5728\u5e16\u5b50\u4e2d\u58f0\u79f0\uff0c\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3\u62a5\u544a\u7684\u65b0\u51a0\u80ba\u708e\u6b7b\u4ea1\u75c5\u4f8b\u4e2d\uff0c\u670994%\u201c\u662f\u989d\u5916\u76842-3\u79cd\u4e25\u91cd\u75be\u75c5\u9020\u6210\u7684\uff0c\u800c\u4e14\u662f\u9ad8\u9f84\u201d\u3002\n\u73b0\u5728\u6765\u770b\u4e00\u4e9b\u4e8b\u5b9e\uff1a\u7814\u7a76\u4eba\u5458\u6bcb\u5eb8\u7f6e\u7591\u5730\u77e5\u9053\uff0c\u7f8e\u56fd\u65b0\u51a0\u80ba\u708e\u7684\u6b7b\u4ea1\u4eba\u6570\u5df2\u8d85\u8fc720\u591a\u4e07\u4eba\u3002\u8fd9\u4e9b\u6570\u5b57\u6709\u4e09\u884c\u8bc1\u636e\u652f\u6301\uff0c\u5305\u62ec\u6b7b\u4ea1\u8bc1\u660e\u3002\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u4e0e\u9884\u9632\u4e2d\u5fc3(CDC)\u56fd\u5bb6\u5065\u5eb7\u7edf\u8ba1\u4e2d\u5fc3(National Center For Health Statistics)\u9996\u5e2d\u6b7b\u4ea1\u7edf\u8ba1\u5b66\u5bb6\u7f57\u4f2f\u7279\u00b7\u5b89\u5fb7\u68ee(Robert Anderson)\u8868\u793a\uff0c\u8ba4\u4e3a\u53ea\u67096%\u7684\u6b7b\u4ea1\u771f\u7684\u662f\u7531\u51a0\u72b6\u75c5\u6bd2\u9020\u6210\u7684\u4e0d\u51c6\u786e\u60f3\u6cd5\uff0c\u662f\u5bf9\u6b7b\u4ea1\u8bc1\u660e\u5de5\u4f5c\u539f\u7406\u7684\u201c\u4e25\u91cd\u8bef\u89e3\u201d\u3002\n\u51a0\u72b6\u75c5\u6bd2\u81f4\u6b7b\u4eba\u6570\u7684\u8303\u56f4\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u5373\u4f7f\u6700\u7ec8\u6570\u5b57\u8981\u7b49\u5230\u5927\u6d41\u884c\u7ed3\u675f\u624d\u80fd\u77e5\u9053\u3002\u7ea6\u7ff0\u00b7\u970d\u666e\u91d1\u65af\u5927\u5b66\u5f6d\u535a\u516c\u5171\u536b\u751f\u5b66\u9662\u7684\u4f20\u67d3\u75c5\u6d41\u884c\u75c5\u5b66\u5bb6\u8d3e\u65af\u6c40\u00b7\u83b1\u65af\u52d2\u8bf4\uff1a\u201c\u6211\u4eec\u5bf9\u6b7b\u4ea1\u7684\u89c4\u6a21\u548c\u91cf\u7ea7\u76f8\u5f53\u6709\u4fe1\u5fc3\uff0c\u4f46\u6211\u4eec\u8fd8\u4e0d\u6e05\u695a\u786e\u5207\u7684\u6570\u5b57\u3002\u201d\u8981\u7406\u89e3\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u6570\u5b57\u5305\u542b\u4e00\u4e9b\u4e0d\u786e\u5b9a\u6027\uff0c\u91cd\u8981\u7684\u662f\u8981\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u6536\u96c6\u548c\u8ba1\u7b97\u7684\u3002\n\u6b7b\u4ea1\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u6765\u6e90\u88ab\u79f0\u4e3a\u75c5\u4f8b\u76d1\u6d4b\u3002\u5b89\u5fb7\u68ee\u8bf4\uff0c\u533b\u7597\u4fdd\u5065\u63d0\u4f9b\u8005\u88ab\u8981\u6c42\u5411\u5dde\u536b\u751f\u90e8\u95e8\u62a5\u544a\u67d0\u4e9b\u75be\u75c5\u7684\u75c5\u4f8b\u548c\u6b7b\u4ea1\u60c5\u51b5\uff0c\u5305\u62ec\u9ebb\u75b9\u3001\u816e\u817a\u708e\u548c\u73b0\u5728\u7684\u65b0\u51a0\u80ba\u708e\uff0c\u540e\u8005\u8fdb\u800c\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4f20\u9012\u7ed9\u75be\u63a7\u4e2d\u5fc3\u3002\u5168\u56fd\u516c\u5171\u536b\u751f\u7edf\u8ba1\u548c\u4fe1\u606f\u7cfb\u7edf\u534f\u4f1a\u6267\u884c\u8463\u4e8b\u8096\u5a1c\u00b7\u97e6\u4f2f\u65af\u7279(Shawna Webster)\u8bf4\uff0c\u76d1\u6d4b\u6570\u636e\u662f\u4e00\u79cd\u201c\u5feb\u901f\u548c\u80ae\u810f\u201d\u7684\u6838\u7b97\u3002\u5979\u8bf4\uff0c\u5404\u5dde\u6536\u96c6\u4e86\u6240\u6709\u5173\u4e8e\u8fd9\u4e9b\u75be\u75c5\u7684\u4fe1\u606f\uff0c\u4f46\u8fd9\u662f\u7b2c\u4e00\u6b21\u901a\u8fc7\u6838\u7b97-\u6ca1\u6709\u4eba\u6709\u65f6\u95f4\u4ed4\u7ec6\u68c0\u67e5\u4fe1\u606f\u6216\u5bfb\u627e\u4e22\u5931\u7684\u5b9e\u9a8c\u5ba4\u6d4b\u8bd5\u3002\u4e3a\u6b64\uff0c\u4f60\u5fc5\u987b\u5bfb\u627e\u4e0b\u4e00\u4e2a\u4fe1\u606f\u6e90\uff1a\u91cd\u8981\u8bb0\u5f55\u3002\n\u7b2c\u4e8c\u6761\u8bc1\u636e\u6765\u81ea\u56fd\u5bb6\u751f\u547d\u7edf\u8ba1\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u8bb0\u5f55\u51fa\u751f\u548c\u6b7b\u4ea1\u8bc1\u660e\u3002\u5f53\u6709\u4eba\u6b7b\u4ea1\u65f6\uff0c\u6b7b\u4ea1\u8bc1\u660e\u4f1a\u5728\u6b7b\u4ea1\u53d1\u751f\u7684\u5dde\u5b58\u6863\u3002\u8fd9\u4e9b\u8bb0\u5f55\u5728\u5dde\u4e00\u7ea7\u767b\u8bb0\u540e\uff0c\u4f1a\u88ab\u53d1\u9001\u5230\u56fd\u5bb6\u536b\u751f\u7edf\u8ba1\u4e2d\u5fc3\uff0c\u8be5\u4e2d\u5fc3\u8ffd\u8e2a\u56fd\u5bb6\u4e00\u7ea7\u7684\u6b7b\u4ea1\u60c5\u51b5\u3002\u6b7b\u4ea1\u8bc1\u660e\u4e0d\u4f1a\u88ab\u5f52\u6863\u5230\u7cfb\u7edf\u4e2d\uff0c\u76f4\u5230\u63d0\u4ea4\u4e86\u51fa\u8272\u7684\u6d4b\u8bd5\u7ed3\u679c\uff0c\u4fe1\u606f\u5c3d\u53ef\u80fd\u5b8c\u6574\u3002\u97e6\u4f2f\u65af\u7279\u8bf4\uff0c\u5f53\u4e00\u4efd\u8bb0\u5f55\u8fdb\u5165\u751f\u547d\u8bb0\u5f55\u7cfb\u7edf\u65f6\uff0c\u201c\u5b83\u5df2\u7ecf\u63a5\u8fd1\u5b8c\u7f8e\u4e86\u3002\u201d\n\u5b89\u5fb7\u68ee\u8bf4\uff0c\u533b\u751f\u3001\u6cd5\u533b\u6216\u9a8c\u5c38\u5b98\u5728\u6b7b\u4ea1\u8bc1\u660e\u4e0a\u586b\u5199\u6b7b\u4ea1\u539f\u56e0\uff0c\u4ed6\u4eec\u88ab\u6307\u793a\u53ea\u5305\u62ec\u90a3\u4e9b\u5bfc\u81f4\u6216\u5bfc\u81f4\u6b7b\u4ea1\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u4e00\u4e2a\u5b57\u6bb5\u5217\u51fa\u4e86\u5bfc\u81f4\u6b7b\u4ea1\u7684\u4e00\u7cfb\u5217\u4e8b\u4ef6\u3002\u5b89\u5fb7\u68ee\u8bf4\uff1a\u201c\u6211\u4eec\u771f\u6b63\u60f3\u8981\u4e86\u89e3\u7684\u662f\u5f15\u53d1\u5bfc\u81f4\u6b7b\u4ea1\u7684\u4e00\u8fde\u4e32\u4e8b\u4ef6\u7684\u6761\u4ef6\u6216\u75be\u75c5\u3002\u201d\u5bf9\u65b0\u51a0\u80ba\u708e\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u6709\u70b9\u50cf\u65b0\u51a0\u80ba\u708e\u80ba\u708e\u5f15\u8d77\u7684\u6025\u6027\u547c\u5438\u7a98\u8feb\u3002\u4ed6\u8bf4\uff0c\u8bc1\u4e66\u7684\u7b2c\u4e8c\u90e8\u5206\u5217\u51fa\u4e86\u5176\u4ed6\u53ef\u80fd\u5bfc\u81f4\u6b7b\u4ea1\u7684\u91cd\u8981\u6761\u4ef6\uff0c\u4f46\u4e0d\u662f\u5bfc\u81f4\u6b7b\u4ea1\u7684\u4e8b\u4ef6\u5e8f\u5217\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u5408\u5e76\u75c7\uff0c\u867d\u7136\u5b83\u4eec\u53ef\u4ee5\u662f\u4fc3\u6210\u56e0\u7d20\uff0c\u4f46\u5b83\u4eec\u4e0d\u80fd\u76f4\u63a5\u53c2\u4e0e\u6700\u7ec8\u5bfc\u81f4\u6b7b\u4ea1\u7684\u56e0\u679c\u94fe\u6761\u3002\u5b89\u5fb7\u68ee\u8bf4\uff0c\u7cd6\u5c3f\u75c5\u6216\u5fc3\u810f\u75c5\u7b49\u5148\u524d\u5b58\u5728\u7684\u75be\u75c5\u662f\u5e38\u89c1\u7684\u5e76\u5b58\u75be\u75c5\uff0c\u5b83\u4eec\u4f1a\u4f7f\u4eba\u66f4\u5bb9\u6613\u611f\u67d3\u51a0\u72b6\u75c5\u6bd2\uff0c\u201c\u4f46\u4e8b\u5b9e\u662f\uff1a\u4ed6\u4eec\u4e0d\u4f1a\u6b7b\u4e8e\u8fd9\u79cd\u5148\u524d\u5b58\u5728\u7684\u75be\u75c5\u3002\u201d\n\u201c\u5f53\u6211\u4eec\u95eeCOVID\u662f\u5426\u6740\u4e86\u4eba\u65f6\uff0c\u610f\u601d\u662f\u2018\u5982\u679c\u4ed6\u4eec\u6ca1\u6709\u611f\u67d3\u75c5\u6bd2\uff0c\u4ed6\u4eec\u4f1a\u4e0d\u4f1a\u6b7b\u5f97\u66f4\u65e9\uff1f\u2019\u201d\u83b1\u65af\u52d2\u8bf4\u3002\u5373\u4f7f\u662f\u8fd9\u6837\u4e00\u4e2a\u60a3\u6709\u5fc3\u810f\u75c5\u6216\u7cd6\u5c3f\u75c5\u7b49\u6f5c\u5728\u7f29\u77ed\u5bff\u547d\u7684\u4eba\uff0c\u5982\u679c\u6ca1\u6709\u611f\u67d3\u65b0\u51a0\u80ba\u708e\uff0c\u4e5f\u53ef\u80fd\u518d\u6d3b5\u5e74\u300110\u5e74\u6216\u66f4\u957f\u65f6\u95f4\u3002\n\u7279\u6717\u666e\u548cQanon\u5439\u6367\u76846%\u8fd9\u4e2a\u6570\u5b57\u6765\u81ea\u75be\u63a7\u4e2d\u5fc3\u7684\u4e00\u4efd\u6bcf\u5468\u62a5\u544a\uff0c\u62a5\u544a\u79f0\uff0c\u5728\u5176\u7edf\u8ba1\u76846%\u7684\u51a0\u72b6\u75c5\u6bd2\u6b7b\u4ea1\u75c5\u4f8b\u4e2d\uff0c\u65b0\u51a0\u80ba\u708e\u662f\u6b7b\u4ea1\u8bc1\u660e\u4e0a\u552f\u4e00\u5217\u51fa\u7684\u60c5\u51b5\u3002\u8fd9\u4e00\u89c2\u5bdf\u7ed3\u679c\u5f88\u53ef\u80fd\u610f\u5473\u7740\u90a3\u4e9b\u6b7b\u4ea1\u8bc1\u660e\u662f\u4e0d\u5b8c\u6574\u7684\uff0c\u56e0\u4e3a\u8bc1\u660e\u8005\u53ea\u7ed9\u51fa\u4e86\u6f5c\u5728\u7684\u6b7b\u56e0\uff0c\u800c\u6ca1\u6709\u7ed9\u51fa\u5bfc\u81f4i\u7684\u5b8c\u6574\u56e0\u679c\u5e8f\u5217\u3002\n\u76d1\u6d4b\u548c\u91cd\u8981\u7edf\u8ba1\u6570\u636e\u63d0\u4f9b\u4e86\u4e00\u5e45\u76f8\u5f53\u597d\u7684\u56fe\u666f\uff0c\u53ef\u4ee5\u770b\u51fa\u6709\u591a\u5c11\u6b7b\u4ea1\u662f\u7531\u51a0\u72b6\u75c5\u6bd2\u9020\u6210\u7684\uff0c\u4f46\u5b83\u4eec\u5e76\u6ca1\u6709\u6db5\u76d6\u6240\u6709\u7684\u6b7b\u4ea1\u4eba\u6570\uff0c\u8fd9\u5c31\u662f\u6700\u540e\u4e00\u6761\u8bc1\u636e\u7684\u7528\u6b66\u4e4b\u5730\uff1a\u989d\u5916\u7684\u6b7b\u4ea1\u4eba\u6570\u3002\u5f17\u5409\u5c3c\u4e9a\u8054\u90a6\u5927\u5b66\u533b\u5b66\u9662\u7684\u5185\u79d1\u533b\u751f\u517c\u4eba\u53e3\u5065\u5eb7\u7814\u7a76\u5458\u53f2\u8482\u82ac\u00b7\u4f0d\u5c14\u592b(Steven Woolf)\u8bf4\uff0c\u8fd9\u662f\u8d85\u8fc7\u90a3\u4e2a\u65f6\u671f\u5386\u53f2\u6a21\u5f0f\u7684\u6b7b\u4ea1\u4eba\u6570\u3002\u5728\u672c\u6708\u53d1\u8868\u5728\u201c\u7f8e\u56fd\u533b\u5b66\u4f1a\u6742\u5fd7\u201d(JAMA)\u4e0a\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\uff0c\u4f0d\u5c14\u592b\u548c\u4ed6\u7684\u540c\u4e8b\u68c0\u67e5\u4e86\u7f8e\u56fd3\u67081\u65e5\u81f38\u67081\u65e5\u7684\u6b7b\u4ea1\u8bb0\u5f55\uff0c\u5e76\u5c06\u5176\u4e0e\u9884\u671f\u6b7b\u4ea1\u6570\u5b57\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u4ed6\u4eec\u53d1\u73b0\uff0c\u4e0e\u524d\u51e0\u5e74\u76f8\u6bd4\uff0c\u8fd9\u6bb5\u65f6\u95f4\u5185\u7684\u6b7b\u4ea1\u4eba\u6570\u589e\u52a0\u4e8620%-\u603b\u5171\u589e\u52a0\u4e86225,530\u4eba\u3002\n\u5176\u4e2d\u4e09\u5206\u4e4b\u4e8c\u7684\u6848\u4f8b\u88ab\u5f52\u548e\u4e8e\u6b7b\u4ea1\u8bc1\u660e\u4e0a\u7684\u65b0\u51a0\u80ba\u708e\uff0c\u4f0d\u5c14\u592b\u8bf4\uff0c\u5bf9\u5176\u4f59\u7684\u6709\u4e24\u79cd\u89e3\u91ca\uff1a\u5176\u4e2d\u4e00\u4e9b\u662f\u65b0\u51a0\u80ba\u708e\u7684\u6b7b\u4ea1\uff0c\u6839\u672c\u6ca1\u6709\u8bb0\u5f55\u5728\u6848\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u8fd9\u4e2a\u4eba\u6b7b\u5728\u5bb6\u91cc\uff0c\u4ece\u672a\u63a5\u53d7\u8fc7\u6d4b\u8bd5\uff0c\u6216\u8005\u662f\u56e0\u4e3a\u8bc1\u4e66\u7f16\u7801\u9519\u8bef\u3002\u4e00\u4e9b\u989d\u5916\u7684\u6b7b\u4ea1\u53ef\u80fd\u662f\u5927\u6d41\u884c\u7684\u7ed3\u679c\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\u75c5\u6bd2\u672c\u8eab\u3002\u4f8b\u5982\uff0c\u4ed6\u8bf4\uff0c\u60f3\u8c61\u4e00\u4e0b\u4e00\u4e2a\u80f8\u75db\u7684\u60a3\u8005\u56e0\u4e3a\u4e0d\u60f3\u611f\u67d3\u75c5\u6bd2\u800c\u5bb3\u6015\u53bb\u533b\u9662\uff0c\u7136\u540e\u6b7b\u4e8e\u5fc3\u810f\u75c5\u53d1\u4f5c\u3002\u4f0d\u5c14\u592b\u79f0\u4e4b\u4e3a\u201c\u95f4\u63a5\u6b7b\u4ea1\u201d\u3002\u201c\u6b7b\u4ea1\u5e76\u4e0d\u662f\u7531\u75c5\u6bd2\u672c\u8eab\u9020\u6210\u7684\uff0c\u4f46\u5927\u6d41\u884c\u6b63\u5728\u593a\u8d70\u751f\u547d\uff0c\u201d\u4ed6\u8bf4\u3002\n\u4f0d\u5c14\u592b\u7814\u7a76\u4e2d\u7684\u6570\u5b57\u6765\u81ea\u4e34\u65f6\u6b7b\u4ea1\u6570\u636e\uff0c\u75be\u75c5\u9884\u9632\u63a7\u5236\u4e2d\u5fc3\u8fd8\u6ca1\u6709\u68c0\u67e5\u8fc7\u7f16\u7801\u9519\u8bef\u6216\u5176\u4ed6\u95ee\u9898\uff0c\u6240\u4ee5\u5b83\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4e0d\u7cbe\u786e\u7684\u3002\u7136\u800c\uff0c\u8ba9\u4ed6\u5bf9\u8fd9\u4e9b\u7ed3\u679c\u5efa\u7acb\u4fe1\u5fc3\u7684\u662f\uff0c\u4ed6\u4eec\u5df2\u7ecf\u88ab\u4ed6\u7684\u56e2\u961f\u548c\u5176\u4ed6\u4eba\u590d\u5236\u4e86\u65e0\u6570\u6b21\u3002\u201c\u6240\u6709\u5bf9\u8fd9\u4e9b\u6570\u636e\u7684\u4e25\u8083\u5206\u6790\u90fd\u8868\u660e\uff0c\u6211\u4eec\u5728\u65b0\u95fb\u4e2d\u542c\u5230\u7684\u6b7b\u4ea1\u4eba\u6570\u662f\u4e00\u4e2a\u4f4e\u4f30\u7684\u6570\u5b57\uff0c\u201d\u4ed6\u8bf4\u3002\n\u65b0\u51a0\u80ba\u708e\u73b0\u5728\u662f\u7f8e\u56fd\u7b2c\u4e09\u5927\u6b7b\u56e0\u3002\u65e0\u8bba\u6b7b\u4ea1\u4eba\u6570\u52a0\u8d77\u6765\u662f218,511\u4eba\uff0c219,681\u4eba\uff0c\u8fd8\u662f219,541\u4eba--\u6b63\u5982\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u4e0e\u9884\u9632\u4e2d\u5fc3\u3001\u7ea6\u7ff0\u00b7\u970d\u666e\u91d1\u65af\u5927\u5b66\u548c\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d10\u670819\u65e5\u5206\u522b\u62a5\u9053\u7684\u90a3\u6837--\u7f29\u77ed\u7684\u751f\u547d\u662f\u4e00\u4e2a\u60ca\u4eba\u7684\u6570\u5b57\u3002\n\u4ece\u201c\u79d1\u5b66\u7f8e\u56fd\u4eba\u201d\u8fd9\u91cc\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u51a0\u72b6\u75c5\u6bd2\u7206\u53d1\u7684\u4fe1\u606f\u3002\u5728\u8fd9\u91cc\u9605\u8bfb\u6211\u4eec\u7684\u56fd\u9645\u6742\u5fd7\u7f51\u7edc\u7684\u62a5\u9053\u3002", "note_en": "A persistent falsehood has been circulating on social media: the  number of COVID deaths is much lower than the official statistic of more than  218,000, and therefore the danger of the disease has been overblown. In August President Trump retweeted a post claiming that only 6 percent of these reported deaths were actually from COVID-19. (The tweet originated from a follower of the debunked conspiracy fantasy QAnon.) Twitter removed the post for containing false information, but fabrications such as these continue to spread. U.S. Representative\u00a0Roger Marshall of Kansas  complained in September that Facebook had removed a post in which he claimed that 94 percent of COVID-19 deaths reported by the Centers for Disease Control and Prevention \u201cwere the result of 2-3 additional serious illnesses and were of advanced age.\u201d\n  Now some facts: Researchers know beyond a doubt that the number of COVID-19 deaths in the U.S. have surpassed 200,000. These numbers are supported by three lines of evidence, including death certificates. The inaccurate idea that only 6 percent of the deaths were really caused by the coronavirus is \u201ca gross misinterpretation\u201d of how death certificates work, says Robert Anderson, lead mortality statistician at the CDC\u2019s National Center for Health Statistics.\n  The scope of the coronavirus\u2019s deadly toll is clear, even if final numbers  will not be known until the pandemic is over. \u201cWe\u2019re pretty confident about the scale and order of magnitude of deaths, but we\u2019re not clear on the exact number yet,\u201d says Justin Lessler, an infectious disease epidemiologist at the Johns Hopkins Bloomberg School of Public Health. To understand why the figures contain some uncertainty, it is important to know how they are collected and calculated.\n  The first source of death data is called case surveillance. Health care providers are required to report cases and deaths from certain diseases, including measles, mumps and now COVID-19, to their state\u2019s health department, which, in turn, passes this information along to the CDC, Anderson says. The surveillance data are a kind of \u201cquick and dirty\u201d accounting, says Shawna Webster, executive director of the National Association for Public Health Statistics and Information Systems. The states gather all the information they can on these diseases, but this is the first pass of the accounting\u2014no one has time to double-check the information or look for missing lab tests, she says. For that, you have to look for the next source of information: vital records.\n    This second line of evidence comes from the  National Vital Statistics System, which records birth and death certificates. When somebody dies, a death certificate is filed in the state where the death occurred. And after the records are registered at a state level, they are sent to the National Center for Health Statistics, which tracks deaths at a national level. Death certificates are not filed in the system until outstanding test results are in and the information is as complete as possible. By the time a record gets to the vital records system, \u201cit is as close to perfect as it\u2019s going to get,\u201d Webster says.\n  A physician, medical examiner or coroner fills out the cause of mortality on the death certificate, and they are instructed to include only those conditions that caused or contributed to death, Anderson says. One field lists the sequence of events leading to the death. \u201cWhat we\u2019re really trying to get at is the condition or disease that started the chain of events leading to the death,\u201d Anderson says. \u201cFor COVID-19, that might be something like acute respiratory distress due to pneumonia due to COVID-19.\u201d A second part of the certificate lists other significant conditions that may have contributed to the death yet were not part of the sequence of events that led up to it, he says. These are called comorbidities, and while they can be contributing factors, they cannot be directly involved in the chain of cause and effect that ended in death. Preexisting medical conditions such as diabetes or heart disease are common comorbidities, and they can make a person more vulnerable to the coronavirus, Anderson says, \u201cbut the fact is: they\u2019re not dying from that preexisting condition.\u201d\n  \u201cWhen we ask if COVID killed somebody, it means \u2018Did they die sooner than they would have if they didn\u2019t have the virus?\u2019\u201d Lessler says. Even such a person with a potentially life-shortening preexisting condition such as heart disease or diabetes may have lived another five, 10 or many more years, had they not become infected with COVID-19.\n  The 6 percent number touted by Trump and QAnon comes from a  weekly CDC report stating that in 6 percent of the coronavirus mortality cases it counted, COVID-19 was the only condition listed on the death certificate. That observation likely means that those death certificates were incomplete because the certifiers only gave the underlying cause of death and not the full causal sequence that led to it, Anderson says. Even someone who does not have a preexisting condition and dies from COVID-19 will also have comorbidities in the form of symptoms, such as respiratory failure, caused by the coronavirus. The idea that a death certificate with ailments listed in addition to COVID-19 means that the person did not really die from the virus is simply false, Anderson says.\n  The surveillance and vital statistics data provide a pretty good picture of how many deaths are attributable to the coronavirus, but they do not capture all of them, and that is where the final line of evidence come in: excess deaths. They are the number of deaths that occur above and beyond the historical pattern for that time period, says Steven Woolf, a physician and population health researcher at the Virginia Commonwealth University School of Medicine. In a paper published in  JAMA this month, Woolf and his colleagues  examined death records in the U.S. from March 1 through August 1 and compared them with the expected mortality numbers. They found that there was a 20 percent increase in deaths during this time period\u2014for a total of 225,530 excess deaths\u2014compared with previous years.\n  Two thirds of these cases were attributed to COVID-19 on the death certificates, and Woolf says there are two types of explanations for the rest: Some of them were COVID-19 deaths that simply were not documented as such, perhaps because the person died at home and was never tested or because the certificate was miscoded. And some of the extra deaths were probably a consequence of the pandemic yet not necessarily the virus itself. For instance, he says, imagine a patient with chest pain who is scared to go to the hospital because they do not want to get the virus and then dies of a heart attack. Woolf calls this \u201cindirect mortality.\u201d \u201cThe deaths aren\u2019t literally caused by the virus itself but the pandemic is claiming lives,\u201d he says.\n  The numbers in Woolf\u2019s study come from provisional death data, the kind that the CDC has not yet checked for miscoding or other issues, so it comes with some degree of imprecision. What builds his confidence in these results, however, is the fact that they have been replicated numerous times by his group and others. \u201cAll serious analyses of these data are showing that the number of deaths we\u2019re hearing on the news is an undercount,\u201d he says.\n  COVID-19 is now the third leading cause of death in the U.S. Whether the deaths add up to 218,511, 219,681 or 219,541\u2014as reported by the CDC, Johns Hopkins University and the  New York Times, respectively, on October 19\u2014it\u2019s a staggering number of lives cut short.\n  Read more about the coronavirus outbreak from Scientific American   here. And read coverage from our international network of magazines  here.", "posttime": "2020-10-21 13:31:12", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "covid,false,\u6b7b\u4ea1", "title": "\u63ed\u7a7fCOVID\u6b7b\u4ea1\u4eba\u6570\u88ab\u5938\u5927\u7684\u865a\u5047\u8bf4\u6cd5", "title_en": "Debunking the False Claim That COVID Death Counts Are Inflated", "transed": 1, "url": "https://www.scientificamerican.com/article/debunking-the-false-claim-that-covid-death-counts-are-inflated/", "via": "", "real_tags": ["covid", "false", "\u6b7b\u4ea1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1030255, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5173\u4e8ePineappleFund.Me\u8ddd\u79bb\u6211\u7684\u4f7f\u547d\u548c\u6148\u5584\u9879\u76eePineapplefund.org\u7ed3\u675f\u5df2\u7ecf\u4e24\u5e74\u591a\u4e86\uff0c\u6211\u5927\u90e8\u5206\u7684\u6bd4\u7279\u5e01\u90fd\u662f\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\u6350\u8d60\u7684\u3002\n\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u6211\u7684\u60c5\u51b5\uff0c\u73b0\u5728\u6211\u548c\u6211\u7684\u5bb6\u4eba\u90fd\u5904\u4e8e\u76f8\u5f53\u56f0\u96be\u7684\u5883\u5730\uff01\u6211\u5931\u53bb\u4e86\u4e00\u53f0\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u91cc\u9762\u6709\u6211\u751f\u6d3b\u4e2d\u7684\u8bb8\u591a\u4fe1\u606f\uff0c\u8fd8\u6709\u4e00\u4e2a\u88c5\u67092000\u591a\u4e2a\u6bd4\u7279\u5e01\u7684\u51b0\u51b7\u94b1\u5305\uff01\u8fd9\u662f\u6211\u5728\u6bd4\u7279\u5e01\u7684\u6700\u540e\u4e00\u7b14\u5b58\u6b3e\u3002\n\u78b0\u5de7\u7684\u662f\uff0c\u73b0\u5728\u6211\u4e0d\u5f97\u4e0d\u91cd\u65b0\u5f00\u59cb\u6211\u7684\u6574\u4e2a\u751f\u6d3b\uff0c\u6211\u8fd8\u6709\u5f88\u957f\u5f88\u8270\u96be\u7684\u8def\u8981\u8d70\u3002\u6211\u771f\u7684\u5e0c\u671b\u6211\u80fd\u62ff\u5230\u6211\u7684\u51b0\u51b7\u94b1\u5305\u3002\n\u6211\u9700\u8981\u5927\u7ea625\u4ebfBTC\u6765\u89e3\u51b3\u6211\u7684\u95ee\u9898\u5e76\u8fdb\u4e00\u6b65\u53d1\u5c55\uff0c\u8fd9\u53ea\u662f\u6211\u4ece\u83e0\u841d\u57fa\u91d1\u6350\u8d60\u7684\u91d1\u989d\u7684\u8fd10.05%\u3002\n\u6211\u4ece\u6765\u6ca1\u6709\u60f3\u8fc7\u6211\u4f1a\u56e0\u4e3a\u53d1\u8d22\u800c\u4e0d\u5f97\u4e0d\u6c42\u52a9\uff0c\u4f46\u662f\u751f\u6d3b\u4e2d\u6709\u4e0d\u540c\u7684\u60c5\u51b5\uff0c\u4eca\u5929\u6211\u60f3\u95ee\u95ee\u6bcf\u4e00\u4e2a\u5173\u5fc3\u6211\u6d3b\u52a8\u7684\u4eba\uff0c\u6bcf\u4e00\u4e2a\u63a5\u53d7\u8fc7\u6211\u5e2e\u52a9\u7684\u4eba\uff0c\u670b\u53cb\u4eec\uff0c\u6211\u4e00\u76f4\u5bf9\u4f60\u4eec\u5f88\u597d\uff0c\u771f\u7684\u5e0c\u671b\u4f60\u4eec\u80fd\u540c\u6837\u56de\u7b54\u6211\uff0c\u5728\u6211\u56f0\u96be\u7684\u60c5\u51b5\u4e0b\u5e2e\u52a9\u6211\u3002\u6211\u76f8\u4fe1\u56de\u65cb\u9556\u6548\u5e94\u3002\u4e0d\u8981\u65e0\u52a8\u4e8e\u8877\uff01\n\u6211\u76f8\u4fe1\u5947\u8ff9\u548c\u5584\u826f\uff0c\u56e0\u4e3a\u6700\u8fd1\u6211\u4e00\u76f4\u5728\u5e2e\u52a9\u76f8\u4fe1\u5947\u8ff9\uff0c\u4e3a\u4e16\u754c\u5404\u5730\u7684\u8bb8\u591a\u4eba\u505a\u597d\u4e8b\uff01\n\u83e0\u841d\u57fa\u91d1\u662f\u7528\u52a0\u5bc6\u8d27\u5e01\u8d22\u5bcc\u8fdb\u884c\u6148\u5584\u4e8b\u4e1a\u7684\u4e00\u6b21\u8bd5\u9a8c\u3002\u5f53\u4f60\u7684\u6e38\u620f\u91d1\u53d8\u6210\u4e86\u5b9d\u7bb1\uff0c\u800c\u4f60\u5df2\u7ecf\u8fc7\u4e86\u94b1\u7684\u9971\u8db3\u70b9\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\n\u6211\u51b3\u5b9a\u5c06\u6211\u7684\u5927\u90e8\u5206\u52a0\u5bc6\u8d27\u5e01\u6350\u8d60\u7ed9\u4e16\u754c\u5404\u5730\u7684\u6148\u5584\u673a\u6784\uff0c\u7533\u8bf7\u7a0b\u5e8f\u5f00\u653e\uff0c\u5e76\u4e3a\u5927\u5927\u5c0f\u5c0f\u7684\u6148\u5584\u673a\u6784\u63d0\u4f9b\u8d44\u91d1\u3002\u6211\u4e13\u6ce8\u4e8e\u6211\u76f8\u4fe1\u7684\u4e8b\u4e1a\uff0c\u6216\u8005\u6211\u4ece\u6211\u7684\u7ecf\u9a8c\u4e2d\u77e5\u9053\u4f1a\u594f\u6548\u7684\u4e8b\u4e1a\u3002\n\u57282017\u5e74\u5bc6\u7801\u6ce1\u6cab\u51fa\u73b0\u7684\u65f6\u5019\uff0c5104BTC\u53d8\u6210\u4e865500\u4e07\u7f8e\u5143\u7684\u6148\u5584\u4e8b\u4e1a\u3002\u6211\u4e3a\u5373\u5c06\u5230\u6765\u7684\u5f71\u54cd\u611f\u5230\u9ad8\u5174\u548c\u81ea\u8c6a\uff0c\u8fd9\u4e3b\u8981\u8981\u5f52\u529f\u4e8e\u4ee4\u4eba\u60ca\u53f9\u7684\u6148\u5584\u673a\u6784\u548c\u80cc\u540e\u656c\u4e1a\u7684\u4eba\u4eec\u3002\n\u6211\u5c06\u4fdd\u6301\u533f\u540d\uff0c\u56e0\u4e3a\u83e0\u841d\u57fa\u91d1\u7684\u91cd\u70b9\u4e0d\u662f\u6211\u3002\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u9879\u76ee\u662f\u6210\u529f\u7684\u3002\u5982\u679c\u4f60\u6709\u5e78\u62e5\u6709\u5bc6\u7801\u8d22\u5bcc\uff0c\u8003\u8651\u652f\u6301\u4f60\u5bf9\u6211\u4eec\u8fd9\u4e2a\u4e16\u754c\u7684\u6e34\u671b\u5427\uff1a)\u3002\n\u5728\u66f4\u5927\u7684\u89c4\u6a21\u4e0a\uff0c\u83e0\u841d\u57fa\u91d1\u521b\u9020\u4e86\u4e00\u79cd\u66f4\u795e\u79d8\u7684\u52a0\u5bc6\u8d27\u5e01\u6148\u5584\u5f62\u5f0f\u3002\n\u8be5\u7ec4\u7ec7\u662f\u53bb\u5e7412\u6708\u7531\u4e00\u4f4d\u7ef0\u53f7\u4e3a\u201cPine\u201d\u7684\u533f\u540d\u6350\u8d60\u8005\u521b\u7acb\u7684\uff0c\u4ed6\u58f0\u79f0\u81ea\u5df1\u662f\u4e16\u754c\u4e0a\u6700\u5927\u7684250\u540d\u6bd4\u7279\u5e01\u6301\u6709\u8005\u4e4b\u4e00\u3002\u8be5\u57fa\u91d1\u7684\u76ee\u6807\u662f\u6350\u8d60\u4ef7\u503c8600\u4e07\u7f8e\u5143\u7684\u6bd4\u7279\u5e01\uff0c\u5e76\u5df2\u7ecf\u541113\u4e2a\u7ec4\u7ec7\u6350\u8d60\u4e86\u4ef7\u503c2000\u4e07\u7f8e\u5143\u7684\u6bd4\u7279\u5e01\uff0c\u5176\u4e2d\u5305\u62ec\u5411\u4e3a\u6492\u54c8\u62c9\u4ee5\u5357\u975e\u6d32\u5730\u533a\u7684\u4eba\u4eec\u63d0\u4f9b\u6e05\u6d01\u6c34\u7684\u6c34\u9879\u76ee(Water Project)\u548c\u6570\u5b57\u6743\u5229\u76d1\u7763\u673a\u6784\u7535\u5b50\u524d\u6cbf\u57fa\u91d1\u4f1a(Electronic Frontier Foundation)\u6350\u8d60\u4e86100\u4e07\u7f8e\u5143\u3002\n(\u8fd9\u4e9b\u6350\u6b3e\u53ef\u4ee5\u901a\u8fc7\u6bd4\u7279\u5e01\u7684\u6570\u5b57\u8d26\u7c3f\u7cfb\u7edf\u8fdb\u884c\u6838\u5b9e\uff0c\u8be5\u7cfb\u7edf\u5c06\u6bcf\u7b14\u4ea4\u6613\u8bb0\u5f55\u5728\u4e00\u4e2a\u516c\u5171\u6570\u636e\u5e93\u4e2d\u3002)\u3002\n\u4e0d\u7ba1\u6d3e\u6069\u662f\u8c01\uff0c\u4ed6\u6216\u5979\u4f3c\u4e4e\u5df2\u7ecf\u627e\u5230\u4e86\u4e00\u79cd\u5c06\u6bd4\u7279\u5e01\u8f6c\u6362\u6210\u5b9e\u9645\u6709\u7528\u7684\u4e1c\u897f\u7684\u65b9\u6cd5\u3002\n\u5728\u6bd4\u7279\u5e01\u51fa\u73b0\u7684\u6700\u521d\u51e0\u5929\u7684\u67d0\u4e2a\u65f6\u5019\uff0c\u6211\u770b\u5230\u4e86\u5206\u6563\u8d27\u5e01\u7684\u627f\u8bfa\uff0c\u4e8e\u662f\u51b3\u5b9a\u7528\u795e\u5947\u7684\u4e92\u8054\u7f51\u4ee3\u5e01\u8fdb\u884c\u4e70\u5356\u3002\u591a\u5e74\u6765\u4eba\u4eec\u5bf9\u6bd4\u7279\u5e01\u6536\u5165\u7684\u9884\u671f\u5bfc\u81f4\u4e86\u6bd4\u6211\u5f53\u65f6\u80fd\u82b1\u7684\u94b1\u591a\u5f97\u591a\u7684\u94b1\uff0c\u6211\u628a\u6211\u7684\u5927\u90e8\u5206\u6bd4\u7279\u5e01\u90fd\u6350\u4e86\u51fa\u6765\uff0c\u5c31\u5728\u6700\u8fd1\uff0c\u5728\u610f\u60f3\u4e0d\u5230\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u628a\u5176\u4ed6\u6240\u6709\u7684\u6bd4\u7279\u5e01\u548c\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e00\u8d77\u5f04\u4e22\u4e86\u3002\n\u6211\u8fc7\u53bb\u5e38\u5e38\u628a\u5927\u90e8\u5206\u94b1\u6350\u7ed9\u6148\u5584\u673a\u6784\u3002\u987a\u4fbf\u544a\u8bc9\u4f60\u4e00\u4e0b\uff0c\u6211\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u83e0\u841d\u57fa\u91d1\u7684\u89c4\u6a21\u6bd4\u6574\u4e2a\u5e02\u573a\u7684\u6bd4\u7279\u5e01\u5e3d\u5b50\u8fd8\u5927\uff0c\u800c\u4e14\u662f\u5f53\u5929\u6700\u5bcc\u6709\u7684250\u4e2a\u6bd4\u7279\u5e01\u5730\u5740\u4e4b\u4e00\u3002\n\u5f53\u65f6\uff0c\u6211\u8ba4\u4e3a\u6211\u4e0d\u53ef\u80fd\u843d\u5230\u8fd9\u79cd\u5730\u6b65\u3002\u4f46\u73b0\u5728\u6211\u6b63\u5728\u5de5\u4f5c\uff0c\u8bd5\u56fe\u4ece\u9707\u60ca\u4e2d\u6062\u590d\u8fc7\u6765\u3002\u6211\u76f8\u4fe1\u5947\u8ff9\uff0c\u6211\u771f\u7684\u5e0c\u671b\u6709\u4e00\u5929\u6211\u80fd\u627e\u5230\u4e22\u5931\u7684\u6bd4\u7279\u5e01\u3002\u6536\u96c6\u5230\u7684\u6bd4\u7279\u5e01\u5c06\u7528\u6765\u89e3\u51b3\u6211\u76ee\u524d\u7684\u95ee\u9898\uff0c\u5e76\u52aa\u529b\u6062\u590d\u5bf9\u4e22\u5931\u7684\u6bd4\u7279\u5e01\u7684\u8bbf\u95ee\u3002\n\u6211\u73b0\u5728\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u6240\u4ee5\u6211\u8bf7\u6c42\u5e2e\u52a9\u3002\u83e0\u841d\u57fa\u91d1\u4ee3\u8868\u4e86\u6211\u6301\u6709\u7684\u5927\u90e8\u5206\u52a0\u5bc6\u8d27\u5e01\uff0c\u6700\u8fd1\u6211\u7528\u7b14\u8bb0\u672c\u7535\u8111\u4e22\u5931\u4e86\u5269\u4e0b\u7684\u6bd4\u7279\u5e01\u3002\n\u5e7f\u544a\u4ece\u6765\u5c31\u4e0d\u662f\u57fa\u91d1\u4f1a\u7684\u610f\u4e49\u6240\u5728\uff0c\u6211\u4e5f\u4e0d\u60f3\u8981\u540d\u6c14\u3002\u6211\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4eba\uff0c\u5728\u6211\u7684\u751f\u6d3b\u4e2d\u6211\u975e\u5e38\u8c26\u865a\uff0c\u6ca1\u6709\u4eba\u77e5\u9053\u6211\u5728\u6bd4\u7279\u5e01\u6216\u83e0\u841d\u57fa\u91d1\u7684\u50a8\u84c4\uff0c\u53ea\u6709\u6211\u7684\u5bb6\u4eba\uff0c\u4ed6\u4eec\u603b\u662f\u652f\u6301\u6211\u7684\u6240\u6709\u52aa\u529b\u3002\n\u8bf7\u968f\u65f6\u7ed9\u6b64\u57df\u4e2d\u7684\u8054\u7cfb\u4eba\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4f1a\u56de\u590d\u60a8\u7684\uff01\uff01Contact@pineapplefund.me\u3002\n\u6211\u975e\u5e38\u559c\u6b22\u83e0\u841d\u3002\u4f60\u77e5\u9053\u83e0\u841d\u542b\u6709\u5f88\u9ad8\u7684\u83e0\u841d\u7d20\u5417\uff1f\u83e0\u841d\u7d20\u88ab\u8bc1\u660e\u662f\u6d88\u708e\u3001\u8212\u7f13\u548c\u6d88\u5316\u7684\u3002\n\u8bf7\u968f\u65f6\u7ed9\u6b64\u57df\u4e2d\u7684\u8054\u7cfb\u4eba\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4f1a\u56de\u590d\u60a8\u7684\uff01", "note_en": "About PineappleFund.Me  It&#39;s been over 2 years since my mission and the end of the charity project pineapplefund.org, where I donated most of my Bitcoin.\n     Briefly about my situation, now my family and I are in quite a difficult situation! I lost access to a laptop with a lot of information that was part of my life, as well as access to a cold wallet with more than 2000 bitcoins! These were my last savings at Bitcoin.\n  It just so happens that now I have to start my whole life again, and I have a long and hard way to go. I really hope that I can get access to my cold wallet.\n  I need about 25\u00a0BTC to solve my problems and develop further, it&#39;s only almost 0.05% of the amount I donated from the Pineapple Fund.\n  I never thought that I would ever have to ask for help because I had a fortune, but there are different situations in life, and today I want to ask everyone who cares about my activities and everyone who has received help from me.\u00a0 Friends, I have been kind to you and I really hope that you will answer me the same and help me in my difficult situation. I believe in the boomerang effect. Do not remain indifferent!\n  I believe in miracles and kindness, because lately I have been helping to believe in miracles and to do good for many people around the world!\n    Pineapple Fund was an experiment in philanthropy with cryptocurrency wealth. What happens when your &#39;play-money&#39; becomes a treasure chest, and you&#39;re past the satiety point of money?\n  I decided to donate the majority of my cryptocurrency to charities around the world, with an open application process and funding charities big and small. I focused on causes I believe in, or causes I know will work from my experiences.\n  Timed with the 2017 crypto bubble, 5104 BTC was turned into $55 million for charities. I&#39;m happy and proud of the impact that will come, mostly thanks to the amazing charities and the dedicated people behind them.\n  I&#39;m going to remain anonymous, because the point of the Pineapple Fund is not me. I consider this project a success. If you&#39;re ever blessed with crypto fortune, consider supporting what you aspire our world to be :)\n  &#34;On a larger scale, the Pineapple Fund created a more mysterious form of cryptocurrency philanthropy.\n  The organization was started in December by an anonymous donor who goes by the nickname \u201cPine\u201d and claims to be among the 250 largest holders of Bitcoin in the world. The fund aims to give away $86 million worth of Bitcoin, and has already given $20 million worth of the currency to 13 organizations, including million-dollar donations to the Water Project, which provides clean water to people in sub-Saharan Africa, and the Electronic Frontier Foundation, a digital rights watchdog.\n  (These donations can be verified thanks to Bitcoin\u2019s digital ledger system, which records every transaction in a public database.)\n  Whoever Pine is, he or she seems to have found a way to convert Bitcoin into something actually useful.\n   Somewhere in the first days of bitcoin&#39;s existence I saw a promise of decentralized money and decided to buy/sell with magic internet tokens. Expectations of crushing income from bitcoins over the years led to much more money than I could spend at that moment, and I donated most of my bitcoins, and just recently under unforeseen circumstances I lost all my other bitcoins along with my laptop.\n   I used to donate most of my money to charity. For your information, the Pineapple Fund\u00a0was bigger than the whole market bitcoin hat when I came in, and it was one of the richest 250 bitcoin addresses that day.\n At the time, I didn&#39;t think I could end up in this situation.\u00a0 Now I&#39;m working and trying to recover from the shock. I believe in miracles and I really hope that someday I will be able to access the lost bitcoins. The collected bitcoins will be used to solve my current problems and also to work on restoring access to the lost bitcoins.\n  I don&#39;t have anything right now, so I&#39;m asking for help. The Pineapple Fund\u00a0represented most of my crypto-currency holdings, and recently I lost the remaining bitcoins with my laptop.\n   Advertising has never been the meaning of the foundation, and I don&#39;t want fame. I am a simple person and in my life I am very modest, nobody knew about my savings at bitcoin or Pineapple Fund, only my family, they always supported me in all my endeavors.\n   Feel free to email the contact in this domain and I will get back to you!\u00a0 contact@pineapplefund.me\n    I&#39;m very fond of pineapples. Did you know that pineapples contain high levels of bromelin, which proved to be anti-inflammatory, relaxing and digestive?!\n   Feel free to email the contact in this domain and I will get back to you!", "posttime": "2020-10-21 13:08:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "apple,\u6bd4\u7279\u5e01,\u57fa\u91d1,fund,\u83e0\u841d", "title": "\u83e0\u841d\u57fa\u91d1\u5931\u53bb\u6240\u6709\u6bd4\u7279\u5e01\u7834\u4ea7", "title_en": "Pineapple Fund lost all bitcoins and went bankrupt", "transed": 1, "url": "https://www.pineapplefund.me/", "via": "", "real_tags": ["apple", "\u6bd4\u7279\u5e01", "\u57fa\u91d1", "fund", "\u83e0\u841d"]}, {"category": "", "categoryclass": "", "imagename": "99dcc9556fea6f1408d586d4e82b65e0.jpg", "infoid": 1030254, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(PhysOrg.com)--\u5982\u679c\u4f60\u6f2b\u6b65\u5230\u535a\u7269\u9986\u7684\u5730\u9707\u4eea\u524d\uff0c\u9664\u975e\u4f60\u8db3\u591f\u5e78\u8fd0\u5730\u5728\u5730\u9707\u53d1\u751f\u65f6\u6b63\u597d\u5728\u90a3\u91cc\uff0c\u5426\u5219\u4f60\u6240\u770b\u5230\u7684\u53ea\u662f\u4e00\u4e2a\u6b63\u5728\u8bb0\u5f55\u7684\u5c0f\u6446\u52a8\u4fe1\u53f7\u3002\u8fd9\u4e9b\u6446\u52a8\u4e2d\u7684\u4e1c\u897f\u88ab\u5730\u9707\u5b66\u5bb6\u79f0\u4e3a\u566a\u97f3\uff0c\u56e0\u4e3a\u4fe1\u53f7\u603b\u662f\u5728\u90a3\u91cc\uff0c\u5e76\u4e14\u8d77\u6e90\u4e8e\u5927\u5730\u9707\u5f15\u8d77\u7684\u9707\u52a8\u4e4b\u95f4\u5730\u7403\u7684\u6b63\u5e38\u6d3b\u52a8\u3002\n\u76f4\u5230\u6700\u8fd1\uff0c\u5f88\u5c11\u6709\u7814\u7a76\u4eba\u5458\u6ce8\u610f\u5230\u8fd9\u4e9b\u660e\u663e\u4ee4\u4eba\u538c\u70e6\u7684\u4fe1\u53f7--\u4eba\u4eec\u8ba4\u4e3a\uff0c\u5206\u6790\u5b83\u4eec\u5c31\u50cf\u6279\u8bc4\u7535\u68af\u97f3\u4e50\u4e00\u6837\u3002\n\u4f46\u73b0\u5728\uff0c\u5723\u8def\u6613\u65af\u534e\u76db\u987f\u5927\u5b66(Washington University)\u7684\u4e00\u540d\u5730\u9707\u5b66\u5bb6\u548c\u4ed6\u7684\u987e\u95ee\uff0c\u5728\u4e09\u5e74\u524d\u4e00\u4e2a\u5076\u7136\u3001\u5e7d\u9ed8\u7684\u53d1\u73b0\u7684\u57fa\u7840\u4e0a\uff0c\u53d1\u73b0\u4e86\u975e\u6d32\u51e0\u5185\u4e9a\u6e7e\u90a6\u5c3c\u6e7e\u6bd4\u5965\u79d1\u5c9b\u9644\u8fd1\u7684\u4e00\u4e2a\u5730\u9707\u566a\u58f0\u6e90\u3002\u5c3d\u7ba1\u770b\u8d77\u6765\u4e0d\u592a\u53ef\u80fd\uff0c\u4f46\u8fd9\u4e2a\u9707\u6e90\u7684\u5f3a\u5ea6\u968f\u7740\u5357\u5927\u897f\u6d0b\u98ce\u66b4\u6d3b\u52a8\u7684\u5f3a\u5ea6\u800c\u4e0d\u540c\u3002\u5728\u6700\u5927\u7684\u98ce\u66b4\u671f\u95f4\uff0c\u6765\u81ea\u90a6\u5c3c\u6e7e\u7684\u5730\u9707\u6ce2\u88ab\u4e16\u754c\u5404\u5730\u7684\u5bbd\u5e26\u5730\u9707\u4eea\u8bb0\u5f55\u4e0b\u6765\u3002\n\u534e\u76db\u987f\u5927\u5b66\u535a\u58eb\u751f\u52a0\u52d2\u7279\u00b7\u6b27\u62c9(Garrett Euler)\u4f7f\u7528\u4e00\u79cd\u540d\u4e3a\u4ea4\u53c9\u76f8\u5173\u7684\u6570\u5b66\u6280\u672f\uff0c\u5206\u6790\u4e86\u5580\u9ea6\u9686\u3001\u5357\u975e\u3001\u57c3\u585e\u4fc4\u6bd4\u4e9a\u548c\u5766\u6851\u5c3c\u4e9a\u7684\u56db\u4e2a\u5bbd\u5e26\u5730\u9707\u4eea\u9635\u5217\uff0c\u53d1\u73b0\u4ee528\u79d2\u548c26\u79d2\u7684\u5468\u671f\u632f\u8361\u7684\u5730\u9707\u566a\u58f0\u8d77\u6e90\u4e8e\u90a6\u5c3c\u6e7e\uff0c\u5e76\u968f\u7740\u5357\u5927\u897f\u6d0b\u98ce\u66b4\u6d3b\u52a8\u7684\u5f3a\u5ea6\u800c\u53d8\u5316\u3002\u5728\u6700\u5927\u7684\u98ce\u66b4\u671f\u95f4\uff0c\u6765\u81ea\u90a6\u5c3c\u6e7e\u7684\u5730\u9707\u6ce2\u88ab\u4e16\u754c\u5404\u5730\u7684\u5bbd\u5e26\u5730\u9707\u4eea\u8bb0\u5f55\u4e0b\u6765\u3002\n\u867d\u7136\u9020\u6210\u975e\u6d32\u9644\u8fd1\u5730\u9707\u566a\u97f3\u7684\u786e\u5207\u673a\u5236\u5c1a\u4e0d\u6e05\u695a\uff0c\u4f46\u6b27\u62c9\u63a8\u6d4b\uff0c\u5357\u5927\u897f\u6d0b\u98ce\u66b4\u4ea7\u751f\u7684\u957f\u5468\u671f\u6d77\u6d6a\u53cd\u5c04\u51fa\u975e\u6d32\u6d77\u5cb8\uff0c\u96c6\u4e2d\u5728\u6bd4\u5965\u79d1\u5c9b\u9644\u8fd1\u3002\u6d77\u6d6a\u4e0e\u6d45\u6d77\u5e95\u7684\u76f8\u4e92\u4f5c\u7528\u5c06\u6d77\u6d6a\u80fd\u91cf\u8f6c\u53d8\u4e3a\u7a7f\u8fc7\u56fa\u4f53\u5730\u7403\u7684\u5730\u9707\u6ce2\u3002\u566a\u58f0\u6e90\u6700\u65e9\u662f\u7531\u54e5\u4f26\u6bd4\u4e9a\u5927\u5b66\u535a\u58eb\u6770\u514b\u00b7\u5965\u5229\u5f17\u4e8e1962\u5e74\u53d1\u73b0\u7684\uff0c\u4f46\u6b27\u62c9\u7684\u5de5\u4f5c\u662f\u7b2c\u4e00\u4e2a\u51c6\u786e\u5b9a\u4f4d\u566a\u58f0\u6e90\u7684\u4eba\u3002\n\u201c\u6709\u4eba\u8bf4\uff0c\u4e00\u4e2a\u7814\u7a76\u4eba\u5458\u7684\u566a\u97f3\u5c31\u662f\u53e6\u4e00\u4e2a\u7814\u7a76\u4eba\u5458\u7684\u4fe1\u53f7\uff0c\u201d\u6b27\u62c9\u7684\u8054\u5408\u987e\u95ee\u9053\u683c\u62c9\u65af\u00b7A\u00b7\u7ef4\u6069\u65af\u535a\u58eb\u8bf4\uff0c\u4ed6\u662f\u534e\u76db\u987f\u5927\u5b66\u5730\u7403\u4e0e\u884c\u661f\u79d1\u5b66\u7cfb\u7684\u6559\u6388\u517c\u827a\u672f\u4e0e\u653e\u5927\u5668\u79d1\u5b66\u7cfb\u4e3b\u4efb\u3002\u201c\u5f53\u6211\u4eec\u4e0d\u7406\u89e3\u5b83\u7684\u65f6\u5019\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u566a\u97f3\u3002\u5f53\u6211\u4eec\u8fd9\u6837\u505a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4fe1\u53f7\u3002\u5728\u8fc7\u53bb\uff0c\u8fd9\u7c7b\u6570\u636e\u6839\u672c\u4e0d\u7a81\u51fa\uff0c\u4f46\u5c31\u5728\u6700\u8fd1\uff0c\u4eba\u4eec\u5f00\u59cb\u5173\u6ce8\u5982\u4f55\u5206\u6790\u5b83\u3002\u5bf9\u4e8e\u566a\u97f3\u53ef\u80fd\u63ed\u793a\u7684\u4e1c\u897f\uff0c\u6709\u5f88\u591a\u8010\u4eba\u5bfb\u5473\u7684\u53ef\u80fd\u6027\u3002\u201c\u3002\n\u867d\u7136\u5730\u9707\u566a\u58f0\u5206\u6790\u4ecd\u5728\u53d1\u5c55\u4e2d\uff0c\u4f46\u4e00\u4e9b\u5730\u9707\u5b66\u5bb6\u6b63\u5728\u5bf9\u566a\u58f0\u8fdb\u884c\u5efa\u6a21\uff0c\u4ee5\u5bfb\u627e\u53ef\u80fd\u63ed\u793a\u5168\u7403\u53d8\u6696\u6548\u5e94\u7684\u4fe1\u53f7\u3002\u4f8b\u5982\uff0c\u968f\u7740\u98ce\u66b4\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5730\u9707\u566a\u58f0\u53ef\u80fd\u4f1a\u6709\u76f8\u5e94\u7684\u6ce2\u52a8\u3002\u5176\u4ed6\u4eba\u6b63\u5728\u8003\u8651\u4f7f\u7528\u5730\u9707\u566a\u97f3\u6765\u7ed8\u5236\u706b\u5c71\u5ca9\u6d46\u5ba4\u7684\u5730\u56fe\u3002\u751a\u81f3\u5df2\u7ecf\u6709\u4e00\u4e9b\u975e\u5e38\u521d\u6b65\u7684\u5de5\u4f5c\u63a2\u7d22\u5730\u9707\u566a\u58f0\u53ef\u80fd\u9884\u6d4b\u5730\u9707\u7684\u53ef\u80fd\u6027\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u4e00\u4e2a\u533a\u57df\u7684\u6ce2\u901f\u53ef\u80fd\u4f1a\u968f\u7740\u538b\u529b\u7684\u589e\u52a0\u800c\u6539\u53d8\u3002\n\u4eca\u5e7412\u6708\uff0c\u6b27\u62c9\u5728\u65e7\u91d1\u5c71\u4e3e\u884c\u7684\u7f8e\u56fd\u5730\u7403\u7269\u7406\u8054\u76df\u79cb\u5b63\u4f1a\u8bae\u4e0a\u4ecb\u7ecd\u4e86\u4ed6\u7684\u89c2\u5bdf\u7ed3\u679c\u3002\n\u6b27\u62c9\u5728\u8c08\u5230\u4ed6\u6700\u521d\u7684\u6570\u636e\u65f6\u8bf4\uff1a\u201c\u6211\u4eec\u6709\u4e00\u4e9b\u975e\u5e38\u79bb\u5947\u7684\u89c2\u5bdf\u7ed3\u679c\uff0c\u6211\u4eec\u4ecd\u5728\u52aa\u529b\u5f04\u6e05\u695a\u3002\u201d\u201c\u5176\u4e00\u662f\u4fe1\u53f7\u7684\u5468\u671f\u6bd4\u6211\u4eec\u9884\u671f\u7684\u8981\u957f\u3002\u5b83\u5728\u9891\u7387\u4e0a\u6709\u591a\u4e2a\u5cf0\u503c-\u5b83\u572828\u79d2\u548c26\u79d2\u4e4b\u95f4\u201c\u55e1\u55e1\u201d\u3002\u5728\u4e0e\u6d77\u4e0a\u98ce\u66b4\u76f8\u5173\u7684\u7279\u5b9a\u65f6\u95f4\u91cc\uff0c\u5b83\u771f\u7684\u3001\u771f\u7684\u5f88\u5f3a\u3002\n\u201c\u53e6\u4e00\u4e2a\u89c2\u5bdf\u7ed3\u679c\u662f\uff0c\u4fe1\u53f7\u7684\u4f4d\u7f6e\u968f\u9891\u7387\u800c\u79fb\u52a8\u300228\u79d2\u5468\u671f\u6ce2\u6bb5\u7684\u9707\u6e90\u8ddd\u79bb26\u79d2\u9707\u6e90\u7ea6300\u516c\u91cc\uff0c\u672c\u8d28\u4e0a\u662f\u5728\u5580\u9ea6\u9686\u5c71\u3002\u201c\u3002\n\u4e92\u76f8\u5173\u5c06\u901a\u5e38\u8bb0\u5f55\u5728\u4e24\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u7684\u4e24\u4e2a\u5730\u9707\u4fe1\u53f7\u7684\u76f8\u4f3c\u6027\u4f5c\u4e3a\u5b83\u4eec\u4e4b\u95f4\u7684\u65f6\u95f4\u5ef6\u8fdf\u7684\u51fd\u6570\u8fdb\u884c\u6bd4\u8f83-\u672c\u8d28\u4e0a\u662f\u5c06\u4e00\u4e2a\u4fe1\u53f7\u6ed1\u8fc7\u53e6\u4e00\u4e2a\u4fe1\u53f7\uff0c\u76f4\u5230\u5b83\u4eec\u5339\u914d\u3002\u76f8\u5173\u51fd\u6570\u4e2d\u7684\u5cf0\u503c\u5bf9\u5e94\u4e8e\u4e24\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5e73\u5747\u5730\u9707\u901f\u5ea6\u3002\u7136\u800c\uff0c\u8981\u4e92\u76f8\u5173\u8054\u5730\u9707\u566a\u58f0\uff0c\u6b27\u62c9\u9762\u4e34\u7740\u4e00\u4e2a\u96be\u9898\uff0c\u56e0\u4e3a\u5730\u9707\u566a\u58f0\u6ca1\u6709\u660e\u786e\u7684\u7ec8\u6b62\u3002\n\u4ed6\u8bf4\uff1a\u201c\u8fd9\u79cd\u566a\u97f3\u662f\u7531\u8de8\u8d8a\u76f8\u5f53\u957f\u7684\u5730\u9707\u8bb0\u5f55\u7684\u91cd\u53e0\u4fe1\u53f7\u7684\u523a\u8033\u58f0\u97f3\u7ec4\u6210\u7684\uff0c\u8fd9\u4e9b\u4fe1\u53f7\u5fc5\u987b\u8fdb\u884c\u5e73\u5747\uff0c\u800c\u8fd9\u4e9b\u4fe1\u606f\u5c31\u6784\u6210\u4e86\u8fd9\u4e2a\u566a\u58f0\u573a\u3002\u201d\n\u6b27\u62c9\u57282007\u5e74\u8fdb\u5165\u4e86\u5730\u9707\u566a\u58f0\u9886\u57df\uff0c\u5f53\u65f6\u4ed6\u53d1\u73b0\u5580\u9ea6\u968632\u4e2a\u4e0d\u540c\u5730\u9707\u53f0\u7ad9\u4e2d\u7684\u4e00\u4e2a\u53f0\u7ad9\u7684\u566a\u58f0\u51fa\u73b0\u4e86\u6301\u7eed\u7684\u5c16\u5cf0\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e9b\u9489\u5b50\u76f8\u5f53\u4e8e\u5580\u9ea6\u9686\u72c2\u70ed\u7684\u7403\u8ff7\u57282006\u5e74\u975e\u6d32\u56fd\u5bb6\u676f(African Cup Of Nations)\u6bd4\u8d5b\u671f\u95f4\u8fdb\u7403\u6216\u53d1\u6325\u5173\u952e\u4f5c\u7528\u540e\uff0c\u5728\u5404\u4e2a\u57ce\u5e02\u6b22\u4e50\u3001\u5e86\u795d\u7684\u8e29\u8e0f\u811a\u6b65\u3002\n\u8fd9\u662f\u7b2c\u4e00\u6b21\u5728\u5730\u9707\u4fe1\u53f7\u4e2d\u53d1\u73b0\u7531\u4eba\u7c7b\u4ea7\u751f\u7684\u5e7f\u6cdb\u7684\u4eba\u4e3a\u566a\u97f3\u3002\u8fd9\u4e5f\u662f\u5df2\u77e5\u7684\u7b2c\u4e00\u4e2a\u5173\u4e8e\u201c\u811a\u9707\u201d\u7684\u62a5\u9053\u3002\n\u201c\u5f53\u6211\u5f97\u5230\u8fd9\u4e9b\u6570\u636e\u65f6\uff0c\u6211\u88ab\u96be\u4f4f\u4e86\uff0c\u56e0\u4e3a\u5728\u90a3\u6bb5\u65f6\u95f4\u91cc\u6ca1\u6709\u8bb0\u5f55\u5230\u4efb\u4f55\u5730\u9707\uff0c\u201d\u4ed6\u8bf4\u3002\u6211\u4eec\u6700\u7ec8\u5c06\u4e24\u4ef6\u4e8b\u653e\u5728\u4e00\u8d77\uff0c\u8ba4\u4e3a\u8fd9\u662f\u6570\u5343\u540d\u7403\u8ff7\u5206\u6563\u5728\u6570\u82f1\u91cc\u4e4b\u5916\u7684\u7ed3\u679c\uff0c\u4ed6\u4eec\u5bf9\u4ece\u8fdb\u7403\u5230\u660e\u661f\u7403\u5458\u7684\u53cd\u5e94\uff0c\u518d\u5230\u6700\u7ec8\u7684\u80dc\u5229\u505a\u51fa\u4e86\u4e0d\u540c\u7684\u53cd\u5e94\u3002\u6240\u6709\u7684\u60c5\u666f\u90fd\u6709\u8f7b\u5fae\u7684\u6ce2\u52a8\u3002\u90a3\u662f\u6211\u5bf9\u5730\u9707\u566a\u97f3\u4ea7\u751f\u5174\u8da3\u7684\u5f00\u59cb\u3002\u4ece\u90a3\u4ee5\u540e\uff0c\u5b83\u6210\u957f\u4e86\u5f88\u591a\u3002\u201c\u3002\u5f15\u7528\uff1a\u5730\u9707\u4eea\u566a\u97f3\u5305\u62ec\u6765\u81ea\u5357\u5927\u897f\u6d0b\u98ce\u66b4\u7684\u4fe1\u53f7\uff0c\u8db3\u7403\u6bd4\u8d5b(2011\u5e741\u670817\u65e5)\u7684\u8db3\u9707\u4fe1\u53f7\uff0c\u4ecehttps://phys.org/news/2011-01-seismometer-noise-south-atlantic-storms.html\u4e0a\u68c0\u7d22\u5230\u3002\n\u672c\u6587\u6863\u53d7\u7248\u6743\u4fdd\u62a4\u3002\u9664\u4e3a\u79c1\u4eba\u5b66\u4e60\u6216\u7814\u7a76\u7684\u76ee\u7684\u800c\u8fdb\u884c\u7684\u4efb\u4f55\u516c\u5e73\u4ea4\u6613\u5916\uff0c\u672a\u7ecf\u4e66\u9762\u8bb8\u53ef\u4e0d\u5f97\u590d\u5236\u4efb\u4f55\u90e8\u5206\u3002\u63d0\u4f9b\u7684\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002", "note_en": "(PhysOrg.com) -- If you wander up to a seismograph in a museum, unless you are lucky enough to be there right during an earthquake, all you will see is a small wiggly signal being recorded.    What\u2019s inside the wiggles is called noise by seismologists, because the signal is always there and originates from the normal activity of the earth between the jolts caused by large earthquakes.\n  Up until recently, few researchers paid any heed to these apparently boring signals \u2013 analyzing them, it was thought, would be like critiquing elevator music.\n  But now a seismologist and his adviser from Washington University in St. Louis, building on a serendipitous, humorous find of three years ago linking   and soccer, have discovered a source of seismic noise in Africa near the island of Bioko in the Bight of Bonny in the Gulf of Guinea. Improbable as it may seem the strength of this source varies with the intensity of storm activity in the Southern Atlantic Ocean. During the largest storms, seismic waves from the Bight of Bonny are recorded by broadband seismometers all around the world.\n   Washington University doctoral candidate Garrett Euler, using a mathematical technique called cross correlation, analyzed four arrays of broadband seismometers in Cameroon, South Africa, Ethiopia and Tanzania and found that seismic noise oscillating at 28 and 26 second periods originates in the Bight of Bonny and varies with the intensity of storm activity in the Southern Atlantic Ocean. During the largest storms, seismic waves from the Bight of Bonny are recorded by broadband seismometers all around the world.\n  Although the exact mechanism causing seismic noise near Africa is unknown, Euler speculates that long-period ocean waves from storms in the Southern Atlantic Ocean reflect off the coast of Africa and focus near the island of Bioko. The interaction of the waves with the shallow seafloor changes the ocean wave energy into seismic waves that travel through solid earth. The noise source was first discovered by Jack Oliver, PhD, of Columbia University in 1962, but Euler\u2019s work is the first to accurately locate the source.\n  \u201cIt\u2019s said that one researcher\u2019s noise is another\u2019s signal,\u201d says Euler\u2019s co-advisor Douglas A. Wiens, PhD, professor and chair of Washington University\u2019s earth and planetary sciences department in Arts &amp; Sciences. \u201cWhen we don\u2019t understand it, we call it noise. When we do, we call it a signal. In the past, this kind of data didn\u2019t stick out at all, but just recently people are coming to grips with how to analyze it. There are intriguing possibilities for what noise might reveal.\u201d\n    Although seismic noise analysis is still developing, some seismologists are modeling noise to look for a signature that could reveal a global warming effect. For instance, as the number of storms increase, perhaps there are corresponding fluctuations in seismic noise. Others are considering using seismic noise to map volcanic magma chambers. There has even been some very preliminary work exploring the possibility that seismic noise might predict earthquakes. The idea is that the wave speed of a region might change as stress builds up before an  .\n  Euler gave a presentation on his observations at the fall meeting of the American Geophysical Union in San Francisco this December.\n  \u201cWe have some very bizarre observations that we\u2019re still trying to figure out,\u201d says Euler, of his initial data. \u201cOne is the signal is at longer periods than we\u2019d expected. It has multiple peaks in frequency \u2014 it \u2018hums\u2019 at 28 seconds, as well as 26 seconds. It\u2019s really, really strong during some particular times that correlate with storms at sea.\n  \u201cAnother observation is that the signal shifts its location with frequency. The source of the 28-second period band is about 300 kilometers from the 26-second source, which is essentially at Mount Cameroon.\u201d\n  Cross correlation compares the similarity of two seismic signals, usually recorded at two different locations, as a function of the time lag between them \u2014 essentially sliding one signal past the other until they match up. Peaks in the correlation function correspond to the average seismic velocity between the two locations. To cross correlate seismic noise, though, Euler faces a conundrum because there is no well-defined termination of seismic noise.\n  \u201cThis noise is made up of a cacophony of overlapping signals across quite long seismic records that have to be averaged, and that information comprises this noise field,\u201d he says.\n  Euler wandered into the field of seismic noise in 2007 when he found consistent spikes in noise from one of 32 different seismic stations in Cameroon. The spikes turned out to correspond with joyous, celebratory foot-stomping of Cameroon\u2019s avid soccer fans at various cities after goals were scored or key plays made during the African Cup of Nations games in 2006.\n  This was the first time widespread anthropogenic noise \u2014 created by humans \u2014 had been found in seismic signals. And it was the first known reporting of \u201cfootquakes.\u201d\n  \u201cWhen I got that data, I was stumped, because there hadn\u2019t been any earthquakes recorded during that time,\u201d he says. &#34;We finally put two and two together and saw this as the result of thousands of fans spread out over many miles, reacting to things ranging from a goal, to the reaction of a star player, to the ultimate, a win. There were slight fluctuations in all the scenarios. That was the start of my interest in seismic noise. It\u2019s grown a lot since.\u201d           Citation: Seismometer noise includes signals from South Atlantic storms, &#39;footquakes&#39; from soccer matches (2011, January 17) retrieved 21 October 2020 from https://phys.org/news/2011-01-seismometer-noise-south-atlantic-storms.html\n  This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no part may be reproduced without the written permission. The content is provided for information purposes only.", "posttime": "2020-10-21 13:08:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6765\u81ea,noise,\u4fe1\u53f7", "title": "\u5730\u9707\u4eea\u566a\u97f3\u5305\u62ec\u6765\u81ea\u98ce\u66b4\u7684\u4fe1\u53f7\uff0c\u6765\u81ea\u8db3\u7403\u7684\u201c\u811a\u9707\u201d(2011)", "title_en": "Seismometer noise includes signals from storms, 'footquakes' from soccer (2011)", "transed": 1, "url": "https://phys.org/news/2011-01-seismometer-noise-south-atlantic-storms.html", "via": "", "real_tags": ["\u6765\u81ea", "noise", "\u4fe1\u53f7"]}]