[{"category": "", "categoryclass": "", "imagename": "a16397eb55f8b10fdacb1227d4145217.png", "infoid": 1030818, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PermalLink GitHub\u662f5000\u591a\u4e07\u5f00\u53d1\u4eba\u5458\u7684\u5bb6\u56ed\uff0c\u4ed6\u4eec\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u540c\u6258\u7ba1\u548c\u5ba1\u67e5\u4ee3\u7801\u3001\u7ba1\u7406\u9879\u76ee\u548c\u6784\u5efa\u8f6f\u4ef6\u3002\n\u62a5\u540d\u3002\nCreate Reaction App 4.0\u662f\u4e00\u4e2a\u4e3b\u8981\u7248\u672c\uff0c\u5177\u6709\u51e0\u4e2a\u65b0\u529f\u80fd\uff0c\u5305\u62ec\u5bf9\u5feb\u901f\u5237\u65b0\u7684\u652f\u6301\uff01\n\u611f\u8c22\u6240\u6709\u5728\u6b64\u7248\u672c\u4e2d\u8f9b\u52e4\u5de5\u4f5c\u7684\u7ef4\u62a4\u8005\u548c\u8d21\u732e\u8005\uff01\ud83d\ude4c\u3002\n\u6ce8\u610f\uff1a\u5982\u679c\u5728\u5347\u7ea7\u540e\u9047\u5230\u9519\u8bef\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5220\u9664\u60a8\u7684node_module\u6587\u4ef6\u5939\uff0c\u5e76\u901a\u8fc7\u8fd0\u884cYAIN(\u6216NPM\u5b89\u88c5)\u6765\u91cd\u65b0\u5b89\u88c5\u60a8\u7684\u4f9d\u8d56\u9879\u3002\n\u5982\u679c\u60a8\u4ee5\u524d\u5f39\u51fa\uff0c\u4f46\u73b0\u5728\u60f3\u8981\u5347\u7ea7\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u89e3\u51b3\u65b9\u6848\u662f\u627e\u5230\u60a8\u5f39\u51fa\u7684\u63d0\u4ea4(\u4ee5\u53ca\u4efb\u4f55\u66f4\u6539\u914d\u7f6e\u7684\u540e\u7eed\u63d0\u4ea4)\uff0c\u6062\u590d\u5b83\u4eec\uff0c\u5347\u7ea7\uff0c\u7136\u540e\u6709\u9009\u62e9\u5730\u518d\u6b21\u5f39\u51fa\u3002\u60a8\u5f39\u51fa\u7684\u529f\u80fd\u73b0\u5728\u4e5f\u53ef\u80fd\u5f00\u7bb1\u5373\u7528\u3002\n\u4e0e\u4efb\u4f55\u4e3b\u8981\u7248\u672c\u4e00\u6837\uff0cREACTION-SCRIPTS@4.0.0\u5305\u542b\u8bb8\u591a\u7a81\u7834\u6027\u66f4\u6539\u3002\u6211\u4eec\u9884\u8ba1\u5b83\u4eec\u4e0d\u4f1a\u5f71\u54cd\u6bcf\u4e2a\u7528\u6237\uff0c\u4f46\u6211\u4eec\u5efa\u8bae\u60a8\u9605\u8bfb\u672c\u8282\uff0c\u770b\u770b\u662f\u5426\u6709\u4e0e\u60a8\u76f8\u5173\u7684\u5185\u5bb9\u3002\u5982\u679c\u6211\u4eec\u9057\u6f0f\u4e86\u4ec0\u4e48\uff0c\u8bf7\u91cd\u65b0\u5f52\u6863\u3002\n\u6211\u4eec\u5df2\u7ecf\u5347\u7ea7\u5230ESLint7\uff0c\u5e76\u6dfb\u52a0\u4e86\u8bb8\u591a\u65b0\u89c4\u5219\uff0c\u5305\u62ec\u4e00\u4e9b\u7528\u4e8eJest\u548cReaction\u6d4b\u8bd5\u5e93\u7684\u89c4\u5219\uff0c\u4ee5\u53ca\u5bfc\u5165/\u65e0\u533f\u540d\u9ed8\u8ba4\u5bfc\u51fa\u89c4\u5219\u3002\u6211\u4eec\u8fd8\u5c06eslint-plugin-hooks\u5347\u7ea7\u5230\u7248\u672c4.0.0\uff0c\u5e76\u5220\u9664\u4e86EXTEND_ESLINT\u6807\u5fd7\uff0c\u56e0\u4e3a\u5b83\u4e0d\u518d\u9700\u8981\u81ea\u5b9a\u4e49ESLint\u914d\u7f6e\u3002\n\u6211\u4eec\u5df2\u7ecf\u5347\u7ea7\u5230Jest 26\uff0c\u73b0\u5728\u5728Jest\u914d\u7f6e\u4e2d\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3atrue\u3002\n\u6211\u4eec\u5df2\u7ecf\u5207\u6362\u5230Workbox InjectManifest\u63d2\u4ef6\uff0c\u5e76\u5c06PWA\u6a21\u677f\u79fb\u52a8\u5230\u5b83\u4eec\u81ea\u5df1\u7684\u5b58\u50a8\u5e93\u4e2d\u3002\n\u6211\u4eec\u5728\u521b\u5efa\u65b0\u5e94\u7528\u65f6\u5220\u9664\u4e86\u8fc7\u65f6\u7684TypeScript\u6807\u5fd7\u3002\u6539\u7528--template tyescript\u3002\u6211\u4eec\u8fd8\u5220\u9664\u4e86\u4e0d\u63a8\u8350\u4f7f\u7528\u7684NODE_PATH\u6807\u5fd7\uff0c\u56e0\u4e3a\u5df2\u901a\u8fc7\u5728jsconfig.json\u4e2d\u8bbe\u7f6e\u57fa\u672c\u8def\u5f84\u6765\u66ff\u6362\u8be5\u6807\u5fd7\u3002\n\u6211\u4eec\u5df2\u7ecf\u66f4\u6539\u4e86\u73af\u5883\u6587\u4ef6\u7684\u52a0\u8f7d\u987a\u5e8f\uff0c\u4ee5\u7b26\u5408dotenv\u89c4\u8303\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605#9037\u3002", "note_en": "Permalink     GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.\n  Sign up\n       Create React App 4.0 is a major release with several new features, including support for Fast Refresh!\n Thanks to all the maintainers and contributors who worked so hard on this release!  \ud83d\ude4c\n        NOTE: You may need to delete your  node_modules folder and reinstall your dependencies by running  yarn (or  npm install) if you encounter errors after upgrading.\n If you previously ejected but now want to upgrade, one common solution is to find the commits where you ejected (and any subsequent commits changing the configuration), revert them, upgrade, and later optionally eject again. It\u2019s also possible that the feature you ejected for is now supported out of the box.\n  Like any major release,  react-scripts@4.0.0 contains a number of breaking changes. We expect that they won&#39;t affect every user, but we recommend you look over this section to see if something is relevant to you. If we missed something, please file a new issue.\n  We&#39;ve upgraded to ESLint 7 and added many new rules including some for Jest and React Testing Library as well as the  import/no-anonymous-default-export rule. We&#39;ve also upgraded  eslint-plugin-hooks to version 4.0.0 and removed the  EXTEND_ESLINT flag as it is no longer required to customize the ESLint config.\n  We&#39;ve upgraded to Jest 26 and now set  resetMocks to  true by default in the Jest config.\n  We&#39;ve switched to the Workbox InjectManifest plugin and moved the PWA templates into their own  repository.\n  We&#39;ve removed the deprecated  typescript flag when creating a new app. Use  --template typescript instead. We&#39;ve also dropped deprecated  NODE_PATH flag as this has been replaced by setting the base path in  jsconfig.json.\n  We&#39;ve changed the loading order of env files to match the  dotenv specification. See #9037 for more details.", "posttime": "2020-10-24 07:29:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "reaction,react,\u5347\u7ea7", "title": "\u521b\u5efaReaction App 4.0", "title_en": "Create React App 4.0", "transed": 1, "url": "https://github.com/facebook/create-react-app/blob/master/CHANGELOG.md", "via": "", "real_tags": ["reaction", "react", "\u5347\u7ea7"]}, {"category": "", "categoryclass": "", "imagename": "aa8de57c5842f67d924a4b6959358dfb.png", "infoid": 1030817, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5206\u6790\u5e08\u9762\u4e34\u7684\u6700\u5e38\u89c1\u7684\u6280\u672f\u9762\u8bd5\uff0c\u7279\u522b\u662f\u5728\u4ed6\u4eec\u804c\u4e1a\u751f\u6daf\u7684\u65e9\u671f\uff0c\u5c31\u662fSQL\u9762\u8bd5\u3002\u5b83\u6709\u7740\u6781\u5176\u5c34\u5c2c\u7684\u7ecf\u5386\u7684\u574f\u540d\u58f0\uff0c\u4f46\u4ece\u62db\u8058\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u4ecd\u7136\u662f\u56de\u7b54\u4e24\u4e2a\u95ee\u9898\u7684\u597d\u65b9\u6cd5\uff1a\n\u8be5\u5019\u9009\u4eba\u662f\u5426\u80fd\u591f\u72ec\u7acb\u7f16\u5199\u903b\u8f91\u4ee5\u6210\u529f\u9ad8\u6548\u5730\u62c9\u53d6\u6570\u636e\uff1f\u4ed6\u4eec\u80fd\u591f\u6070\u5f53\u5730\u89e3\u91ca\u6570\u636e\u5417\uff1f\n\u8fd9\u4e9b\u91c7\u8bbf(\u5047\u8bbe\u4ed6\u4eec\u662f\u73b0\u573a\u76f4\u64ad\u7684\uff0c\u800c\u4e0d\u662f\u5e26\u56de\u5bb6\u7684\uff0c\u4e5f\u4e0d\u662f\u91c7\u8bbf)\u901a\u5e38\u662f\u8fd9\u6837\u8fdb\u884c\u7684\uff1a\n\u5e94\u8058\u8005\u5c06SQL\u5199\u5728\u767d\u677f\u4e0a\u3001\u8bb0\u4e8b\u672c\u6587\u4ef6\u4e2d\u6216\u5176\u4ed6\u53ef\u80fd\u80fd\u591f\u4e5f\u53ef\u80fd\u65e0\u6cd5\u5904\u7406SQL\u7684\u5730\u65b9\u3002\u6211\u4eec\u9f13\u52b1\u8003\u751f\u5728\u5199\u4e0b\u4ed6\u4eec\u7684\u95ee\u9898\u548c\u56de\u7b54\u95ee\u9898\u65f6\u8be6\u7ec6\u8ba8\u8bba\u4ed6\u4eec\u7684\u903b\u8f91\u3002\n\u8fd9\u4e00\u7cfb\u5217\u95ee\u9898\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff0c\u56e0\u4e3a\u524d\u51e0\u4e2a\u95ee\u9898\u7684\u7ed3\u6784\u901a\u5e38\u662f\u4e3a\u4e86\u8ba9\u5e94\u8058\u8005\u6709\u65f6\u95f4\u719f\u6089\u5e76\u8be2\u95ee\u6709\u5173\u6570\u636e\u7684\u95ee\u9898\u3002\n\u5982\u679c\u4f60\u62c5\u5fc3SQL\u9762\u8bd5\uff0c\u6216\u8005\u4e00\u76f4\u5728\u82e6\u82e6\u6323\u624e\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u5c0f\u8d34\u58eb\uff0c\u5b83\u4eec\u5728\u6211\u7684\u6574\u4e2a\u804c\u4e1a\u751f\u6daf\u4e2d\u90fd\u5bf9\u6211\u6709\u5e2e\u52a9\uff1a\nSQL\u9762\u8bd5\u7ecf\u5e38\u8ba9\u6211\u60f3\u8d77\u5b66\u6821\u7684\u8003\u8bd5\uff0c\u9664\u975e\u6709\u4eba\u5728\u6211\u5de5\u4f5c\u65f6\u4ed4\u7ec6\u5730\u770b\u7740\u6211\u3002\u5b83\u589e\u52a0\u4e86\u5927\u591a\u6570\u5206\u6790\u5e08\u65e5\u5e38\u751f\u6d3b\u4e2d\u6839\u672c\u4e0d\u5b58\u5728\u7684\u538b\u529b\u3002\n\u4ee5\u4e0b\u662f\u4eba\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u5c34\u5c2c\uff0c\u4f46\u5728SQL\u9762\u8bd5\u4e2d\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\u884c\u4e3a\u5217\u8868\uff1a\n2.\u505a\u597d\u7b14\u8bb0\uff0c\u7279\u522b\u662f\u5173\u4e8e\u8868\u683c\u7684\u683c\u5f0f\u3002(\u5e26\u4e0a\u7eb8\u548c\u7b14\u4ee5\u9632\u4e07\u4e00\u3002)\u3002\n\u6211\u5f88\u96be\u8bb0\u4f4f\u65b0\u8868\u683c\u7684\u7ed3\u6784\uff0c\u5373\u4f7f\u662f\u7b80\u5355\u7684\u8868\u683c\u3002\u5728\u5bb9\u6613\u63a5\u8fd1\u7684\u5730\u65b9\u5199\u4e0b\u8868\u683c\u683c\u5f0f\uff0c\u5e76\u95ee\u9762\u8bd5\u5b98\u4efb\u4f55\u4f60\u53ef\u80fd\u6709\u7684\u95ee\u9898\u3002\u9519\u8fc7\u4e86\u5176\u4e2d\u4e00\u6839\u67f1\u5b50\u7684\u540d\u5b57\u5417\uff1f\u5bf9\u67d0\u4e8b\u7684\u542b\u4e49\u611f\u5230\u56f0\u60d1\u5417\uff1f\u4e0d\u786e\u5b9a\u8be5\u8868\u662f\u6309\u7528\u6237\u8ba1\u7b97\u8fd8\u662f\u6309\u5e10\u6237\u8ba1\u7b97\uff1f\u95ee\u3002\n\u8bb0\u4f4f\uff0c\u9762\u8bd5\u5b98\u662f\u4e00\u79cd\u8d44\u6e90\uff0c\u4ed6\u4eec\u6709\u8d23\u4efb\u5f04\u6e05\u695a\u95ee\u9898\u7684\u524d\u63d0\u3002\n3.\u8bf4\u51fa\u4f60\u7684\u60f3\u6cd5\u3002\u5982\u679c\u4f60\u9700\u8981\u65f6\u95f4\u6765\u6574\u7406\u4f60\u7684\u60f3\u6cd5\uff0c\u4f60\u53ef\u4ee5\u8981\u6c42\u82b1\u70b9\u65f6\u95f4\u3002\n\u867d\u7136\u8fd9\u4e9b\u95ee\u9898\u901a\u5e38\u6709\u6b63\u786e\u7684\u548c\u9519\u8bef\u7684(\u548c\u6709\u6548\u7684\u548c\u65e0\u6548\u7684)\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u662fSQL\u7ec3\u4e60\u662f\u5173\u4e8e\u903b\u8f91\u63a8\u7406\u7684\u3002\u9762\u8bd5\u5b98\u5bf9\u4f60\u7684\u601d\u8def\u7ed9\u4e88\u4e86\u90e8\u5206\u4fe1\u4efb\uff0c\u4f46\u5982\u679c\u4f60\u4ece\u6765\u4e0d\u8868\u8fbe\u51fa\u6765\uff0c\u9762\u8bd5\u5b98\u5c31\u4e0d\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\n\u6211\u9700\u8981\u5ba2\u6237\u7ec4A\u548c\u5ba2\u6237\u7ec4B\u7684\u5e73\u5747\u6536\u5165\u6765\u4e86\u89e3\u54ea\u4e00\u7ec4\u901a\u5e38\u5728\u6211\u4eec\u7684\u4ea7\u54c1\u4e0a\u82b1\u8d39\u66f4\u591a\u3002\n\u6211\u9700\u8981\u8868A\u548c\u8868B\uff0c\u7b2c\u4e00\u4e2a\u7528\u4e8e\u6536\u5165\uff0c\u7b2c\u4e8c\u4e2a\u7528\u4e8e\u5ba2\u6237\u6240\u5c5e\u7684\u7ec4\u3002\u56e0\u4e3a\u8868A\u662f\u4e00\u4e2a\u4e8b\u52a1\u5217\u8868\uff0c\u6240\u4ee5\u6211\u9700\u8981\u9996\u5148\u6c47\u603b\u3002\n\u6211\u7684\u67e5\u8be2\u7684\u8fd9\u4e00\u90e8\u5206\u5c06\u8868A\u4e2d\u6bcf\u4e2a\u5ba2\u6237\u7684\u6536\u5165\u76f8\u52a0\u3002\u6211\u60f3\u5728\u8fde\u63a5\u5230\u6211\u4eec\u7684\u7ec4\u7c7b\u578b\u6570\u636e\u4e4b\u524d\u786e\u5b9a\u8fd9\u4e00\u70b9\u3002\n\u5728\u7b2c\u4e00\u90e8\u5206\u4e2d\uff0c\u6211\u5148\u5c06\u6bcf\u4e2a\u5ba2\u6237\u7684\u6536\u5165\u6570\u636e\u76f8\u52a0\uff0c\u7136\u540e\u6839\u636e\u5ba2\u6237ID\u4ece\u4e00\u4e2a\u5355\u72ec\u7684\u8868\u4e2d\u52a0\u5165\u5ba2\u6237\u7c7b\u578b\u6570\u636e\uff0c\u7136\u540e\u5728\u8fd9\u91cc\u6309\u5ba2\u6237\u7ec4\u8ba1\u7b97\u6bcf\u4e2a\u5ba2\u6237\u7684\u5e73\u5747\u6536\u5165\u3002\nA\u7ec4\u7684\u5e73\u5747\u6536\u5165\u8f83\u9ad8\uff0c\u4f46\u770b\u770b\u8fd9\u4e2a\u7ec4\u662f\u5426\u8db3\u591f\u5927\uff0c\u6211\u4eec\u5e94\u8be5\u66f4\u591a\u5730\u5173\u6ce8\u4ed6\u4eec\uff0c\u800c\u4e0d\u662fB\u7ec4\uff0c\u8fd9\u5c06\u662f\u4e00\u4ef6\u6709\u8da3\u7684\u4e8b\u60c5\u3002\n\u5982\u679c\u60a8\u4ece\u672a\u89e3\u91ca\u8fc7\u5982\u4f55\u7f16\u5199SQL\uff0c\u8bf7\u82b1\u4e9b\u65f6\u95f4\u7ec3\u4e60\u4e00\u4e0b\u3002\u5728\u9762\u8bd5\u672c\u8eab\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8981\u6c42\u65f6\u95f4\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u66f4\u6e05\u695a\u5730\u8c08\u8bba\u4f60\u5df2\u7ecf\u7ecf\u5386\u7684\u6b65\u9aa4\u6216\u51b3\u5b9a\u4e0b\u4e00\u6b65\u7684\u884c\u52a8\u3002\nSQL\u9762\u8bd5\u5f88\u5c11\u662f\u4e3a\u4e86\u6d4b\u8bd5\u67d0\u4eba\u8bb0\u4f4f\u8bed\u6cd5\u7ec6\u8282\u7684\u80fd\u529b\uff0c\u4ed6\u4eec\u6253\u5b57\u7684\u901f\u5ea6\uff0c\u4ed6\u4eec\u5199\u5f97\u6709\u591a\u597d\uff0c\u6216\u8005\u4efb\u4f55\u4e0e\u6210\u529f\u7684\u5206\u6790\u5e08\u65e0\u5173\u7684\u56e0\u7d20\u3002\u8bb0\u4f4f\u6211\u4eec\u4f7f\u7528\u7684SQL\u7c7b\u578b\u7684\u201ccase When\u201d\u8bed\u53e5\u7684\u8bed\u6cd5\u4e0d\u4f1a\u5bf9\u60a8\u6709\u4ec0\u4e48\u574f\u5904\uff0c\u4f46\u6211\u4eec\u4e0d\u4f1a\u6d4b\u8bd5\u90a3\u4e9b\u901a\u8fc7\u8c37\u6b4c\u641c\u7d22\u5c31\u80fd\u8f7b\u677e\u89e3\u51b3\u7684\u95ee\u9898\u3002\n\u9762\u8bd5\u5b98\u901a\u5e38\u4e5f\u4e0d\u4f1a\u8bd5\u56fe\u6b3a\u9a97\u4f60(\u6bd5\u7adf\uff0c\u6570\u636e\u5e93\u901a\u5e38\u4e0d\u662f\u7528\u6765\u6b3a\u9a97\u5206\u6790\u5e08\u7684)\u3002\u6211\u4eec\u53ea\u662f\u60f3\u786e\u4fdd\u60a8\u80fd\u591f\u6784\u5efa\u903b\u8f91(\u548c/\u6216\u770b\u5230\u60a8\u7684\u903b\u8f91\u4e2d\u7684\u7f3a\u9677)\u6765\u83b7\u53d6\u60a8\u9700\u8981\u7684\u6570\u636e\u3002\n\u4f5c\u4e3a\u4e00\u540d\u9762\u8bd5\u5b98\uff0c\u6211\u6709\u65f6\u62c5\u5fc3\u81ea\u5df1\u65e0\u6cd5\u9605\u8bfb\u6216\u7406\u89e3\u4e00\u4e2a\u67e5\u8be2\uff0c\u6bcf\u5f53\u6211\u770b\u5230\u4e00\u4e2a\u5f88\u957f\u7684\u5d4c\u5957\u67e5\u8be2\u65f6\uff0c\u6211\u5c31\u4f1a\u60ca\u614c\u5931\u63aa\u3002\u5982\u679c\u8fd9\u5c01\u4fe1\u5bf9\u4f60\u6765\u8bf4\u5f88\u96be\u5199\uff0c\u90a3\u4e48\u6211\u53ef\u80fd\u4e5f\u5f88\u96be\u8bfb\u61c2\u3002\n\u867d\u7136\u6ca1\u6709\u5fc5\u8981\u5f3a\u8c03\u4f60\u7684SQL\u683c\u5f0f\u6216\u505a\u7b14\u8bb0\u7684\u7ec6\u8282\uff0c\u4f46\u5b83\u5e2e\u52a9\u4e86\u6211\u548c\u6211\u7684\u9762\u8bd5\u5b98\u5728\u8fd9\u91cc\u6295\u8d44\u3002\u5728\u6709\u5e2e\u52a9\u7684\u5730\u65b9\u7f29\u8fdb\uff0c\u6807\u8bb0\u67e5\u8be2\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u4e3a\u65b0\u5217\u6307\u5b9a\u5b9e\u7528\u540d\u79f0\uff0c\u5e76\u4f7f\u7528`with\u2018/cte\u8bed\u53e5\u6765\u5206\u89e3\u67e5\u8be2\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5d4c\u5957\u67e5\u8be2\u3002\u50cf\u201c\u5047\u8bbeX\u662f\u4e0d\u540c\u7684\u201d\u6216\u201c\u6761\u4ef6\u5047\u8bbe\u8fd9\u4e9b\u503c\u90fd\u4e0d\u662f\u8d1f\u503c\u6216\u96f6\u201d\u8fd9\u6837\u7684\u6ce8\u91ca\u5bf9\u9762\u8bd5\u5b98\u548c\u60a8\u81ea\u5df1\u90fd\u5f88\u6709\u5e2e\u52a9\uff0c\u53ef\u4ee5\u63d0\u9192\u60a8\u6ce8\u610f\u67e5\u8be2\u7684\u57fa\u672c\u903b\u8f91\u3002(#34\uff1b\u5047\u8bbeX\u662fDISTINCT\uff1b\u6216&#34\uff1b\u6761\u4ef6\u5047\u8bbe\u8fd9\u4e9b\u503c\u90fd\u4e0d\u662f\u8d1f\u503c\u6216\u96f6\u503c)\u5bf9\u9762\u8bd5\u5b98\u548c\u60a8\u81ea\u5df1\u90fd\u5f88\u6709\u7528\u3002\n\u6f14\u793a\u8fd9\u9879\u6280\u80fd\u4e5f\u5f88\u597d\uff0c\u56e0\u4e3a\u8fd9\u79cd\u7ec4\u7ec7\u548c\u6587\u6863\u5bf9\u4e8e\u91ce\u5916\u5206\u6790\u5e08\u6765\u8bf4\u5f88\u91cd\u8981\u3002\u6bd5\u7adf\uff0c\u6211\u4eec\u786e\u5b9e\u4f1a\u91cd\u65b0\u8bbf\u95ee\u6211\u4eec\u81ea\u5df1\u7684\u67e5\u8be2\uff0c\u5e76\u5f7c\u6b64\u5171\u4eab\u67e5\u8be2\u3002\n\u5f53\u8c08\u5230SQL\u9762\u8bd5\u65f6\uff0c\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u66ff\u4ee3\u771f\u6b63\u64c5\u957f\u7f16\u5199SQL\u6765\u62c9\u53d6\u6570\u636e\u3002\u7ec3\u4e60\uff01\n\u6beb\u65e0\u7591\u95ee\uff0c\u8fde\u63a5\u662f\u67e5\u8be2\u4e2d\u6700\u5e38\u89c1\u3001\u6700\u96be\u5904\u7406\u7684\u90e8\u5206\uff0c\u56e0\u4e3a\u5b83\u5f80\u5f80\u662f\u6211\u4eec\u4f7f\u7528\u7684\u6700\u5e38\u89c1\u3001\u6700\u62bd\u8c61\u7684\u8bed\u53e5\uff0c\u6709\u53ef\u80fd\u5f7b\u5e95\u6bc1\u6389\u4e00\u5207\u3002\u50cf\u8fd9\u6837\u7684\u89c6\u89c9\u6548\u679c\u4f1a\u6709\u6240\u5e2e\u52a9\uff1a\n\u5176\u4ed6\u53ef\u80fd\u51fa\u73b0\u7684\u5e38\u89c1\u8bed\u53e5\u6709`group by`(\u53ca\u5176\u5173\u8054\u7684\u805a\u5408)\u3001`case When\u3001`\u548c`union`\u3002\n\u6839\u636e\u6211\u7684\u4e2a\u4eba\u7ecf\u9a8c\uff0cSQL\u7ec3\u4e60\u4fa7\u91cd\u4e8e\u57fa\u672c\u903b\u8f91\uff0c\u56e0\u4e3a\u53ef\u4ee5\u76f8\u5f53\u5feb\u5730\u5b66\u4e60\u66f4\u590d\u6742\u7684\u8bed\u53e5(\u6709\u65f6\u8fd8\u53ef\u4ee5\u901a\u8fc7\u66f4\u7b80\u5355\u7684\u8bed\u53e5\u6765\u5b8c\u6210)\u3002\n\u6709\u5174\u8da3\u6210\u4e3aHubSpot\u7684\u5206\u6790\u5e08\u5417\uff1f\u4eca\u5929\u5c31\u7533\u8bf7\u6211\u4eec\u7a7a\u7f3a\u7684\u5206\u6790\u5e08\u804c\u4f4d\u5427\uff01\n\u5728\u8fd9\u91cc\u6ce8\u518c\uff0c\u6211\u4eec\u4f1a\u8ba9\u60a8\u968f\u65f6\u4e86\u89e3HubSpot\u7684\u6700\u65b0\u4ea7\u54c1\u3001\u7528\u6237\u4f53\u9a8c\u548c\u5de5\u7a0b\u8bbe\u8ba1\u3002\n\u4eceHubSpot\u4ea7\u54c1\u535a\u5ba2\u76f4\u63a5\u8fd4\u56de\u6700\u65b0\u7684\u5de5\u7a0b\u3001\u7528\u6237\u4f53\u9a8c\u548c\u4ea7\u54c1\u65b0\u95fb\u5230\u60a8\u7684\u6536\u4ef6\u7bb1\u3002", "note_en": "The most common technical interview that  analysts face, especially early in their careers, is the SQL interview. It has a bad reputation as a profoundly awkward experience, but from a recruiting perspective, it remains a good way to answer two questions:\n Is this candidate able to independently write logic to pull data successfully and efficiently? Are they able to interpret the data appropriately?\n These interviews (assuming they&#39;re live, rather than take-home, or interviews) usually go something like this:\n The candidate writes SQL on a whiteboard, in a Notepad file, or some other place that may or may not be able to process SQL. Candidates are encouraged to &#34;talk through&#34; their logic as they write their query and answer the question.\n The series of questions becomes more difficult, since the first few are often structured to give the candidate time to become acquainted with and ask questions about the data.\n If you&#39;re concerned about a SQL interview or have struggled through them, here are some tips that have helped me throughout my career:\n  SQL interviews often remind me of exams in school, except someone is carefully watching me as I work. It adds a level of stress that simply doesn&#39;t exist in the day-to-day of most analysts.\n Here are a list of behaviors that people may find awkward, but are completely okay during a SQL interview:\n  2. Take great notes, especially about the format of the tables. (Bring pen and paper just in case.)\n I struggle to remember the structure of new tables, even simple ones. Write the table formats down in an accessible place, and ask the interviewer any questions you might have. Missed the name of one of the columns? Confused about what something means? Not sure if the table is on a per user or per account basis? Ask.\n Remember that your interviewer is a resource, and it&#39;s their responsibility to be clear on the premise of the problem.\n 3. Say what you&#39;re thinking.\u00a0Ask to take a moment if you need time to put your thoughts together.\n Although these questions often have &#34;right&#34; and &#34;wrong&#34; (and &#34;efficient&#34; and &#34;inefficient&#34;) solutions, a SQL exercise is about logical reasoning. Interviewers give out partial credit for your line of thinking, but if you never express it, the interviewer has no idea what happened.\n  I need the mean revenue of customer group A and customer group B to understand which group typically spends more on our products.\n I need both table A and table B, the first for revenue, the second for what group a customer belongs to. Because table A is a list of transactions, I&#39;ll need to aggregate up first.\n This part of my query sums the revenue for each customer in table A. I want to nail this down before I join to our group type data.\n I summed revenue data for each customer in this first section before joining in the customer type data from a separate table by customer ID. I then calculated the mean revenue per customer by customer group here.\n Group A has a higher mean revenue, but it would be interesting to see if this group is big enough that we should focus more on them than on Group B.\n If you&#39;ve never had to explain how you wrote some SQL, take some time to practice doing so. In the interview itself, it&#39;s also okay to ask for time so that you can speak more clearly about the steps you&#39;ve gone through or determine your next step.\n  SQL interviews are rarely designed to test someone&#39;s ability to remember details in syntax, how quickly they type, how nicely they write, or any number of factors that simply aren&#39;t relevant to success as an analyst. Memorizing the syntax of a `case when` statement in the type of SQL we use won&#39;t hurt you, but we don&#39;t test for things that are easily solved by a Google search.\n Interviewers usually aren&#39;t trying to trick you either (after all, databases aren&#39;t usually designed to trick analysts). We just want to make sure you can build the logic (and/or see the flaws in your logic) to get the data you need.\n  As an interviewer, I&#39;m sometimes afraid that I won&#39;t be able to read or understand a query and panic any time I see a long nested query. If it&#39;s difficult for you to write, it&#39;s likely difficult for me to read.\n Although there is no need to stress over the details of your SQL formatting or note-taking, it&#39;s helped both me and my interviewers to invest here. Indent where it helps, label what different parts of your query do, give new columns practical names, and use `with`/CTE statements to break up your query instead of using nested queries. Notes like &#34;assuming X is distinct&#34; or &#34;condition assumes none of these values are negative or zero&#34; are helpful reminders both for your interviewers and yourself of the query&#39;s underlying logic.\n This skill is also great to demonstrate, since this kind of organization and documentation is important for an analyst out in the wild. We do, after all, revisit our own queries and share queries with each other.\n  When it comes to a SQL interview, there is no substitute for being really good at writing SQL to pull data. Practice!\n Far and away, joins are the most common &#34;difficult&#34; part of a query to handle because it tends to be the most common, abstract statement we use that has the real ability to ruin \u00a0 absolutely everything.\u00a0Visuals such as these can help:\n    Other common statements that are likely to appear are `group by` (and their associated aggregations), `case when,` and `union`.\n In my personal experience, SQL exercises are focused on fundamental logic, since more complicated statements can be learned fairly quickly (and sometimes done through more simple statements).\n  Interested in becoming an Analyst at HubSpot?  Apply to one of our open Analyst positions today!\n    Sign up here and we&#39;ll keep you updated on the latest in product, UX, and engineering from HubSpot.\n Back  The latest engineering, UX, and product news from the HubSpot Product Blog, straight to your inbox.", "posttime": "2020-10-24 07:28:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9762\u8bd5,sql,ace", "title": "\u5728SQL\u9762\u8bd5\u4e2d\u593a\u5f97\u738b\u724c\u7684\u516d\u4e2a\u5c0f\u8d34\u58eb", "title_en": "Six Tips to Ace a SQL Interview", "transed": 1, "url": "https://product.hubspot.com/blog/six-tips-to-ace-an-analyst-sql-interview", "via": "", "real_tags": ["\u9762\u8bd5", "sql", "ace"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1030816, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u60f3\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u5404\u79cd\u6570\u636e\u5e8f\u5217\u5316\u683c\u5f0f\uff0c\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u6bd4\u8f83\u3002\u57fa\u672c\u4e0a\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u201c\u6211\u4eec\u80fd\u627e\u5230\u6bd4JSON\u66f4\u597d\u7684\u4e1c\u897f\u5417\uff1f\u201d\u4f46\u662f\uff0c\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u67e5\u770b\u8fd9\u4e9b\u5185\u5bb9\u662f\u4e3a\u4e86\u6570\u636e\u5e8f\u5217\u5316\uff0c\u800c\u4e0d\u662f\u4e3a\u4e86\u914d\u7f6e\u6587\u4ef6\u6216\u5176\u4ed6\u4e1c\u897f\uff0c\u56e0\u6b64\u8fd9\u662f\u5224\u65ad\u8fd9\u4e9b\u5185\u5bb9\u7684\u76ee\u6807\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ed3\u6784\u7684\u7c7b\u578b\u4fe1\u606f\u662f\u5728\u63a5\u6536\u7a0b\u5e8f\u68c0\u67e5\u7684\u5355\u72ec\u6587\u4ef6(\u6a21\u5f0f)\u4e2d\u5b9a\u4e49\u7684\uff0c\u8fd8\u662f\u6d88\u606f\u672c\u8eab\u5305\u542b\u7c7b\u578b\u4fe1\u606f\u3002\u8fd9\u51e0\u4e4e\u5c31\u662f\u9759\u6001\u7c7b\u578b\u7f16\u7a0b\u8bed\u8a00\u548c\u52a8\u6001\u7c7b\u578b\u7f16\u7a0b\u8bed\u8a00\u4e4b\u95f4\u7684\u533a\u522b\u3002\u5c31\u50cf\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0c\u8fd9\u4e24\u79cd\u8bed\u8a00\u90fd\u6709\u4f18\u7f3a\u70b9\uff0c\u5b83\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u90fd\u4e0d\u603b\u662f\u6bd4\u53e6\u4e00\u79cd\u66f4\u597d\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u5c06\u82f9\u679c\u4e0e\u82f9\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u6ce8\u610f\u5230\u8fd9\u4e9b\u4e1c\u897f\u5c5e\u4e8e\u54ea\u4e00\u7c7b\uff0c\u4f46\u4e0d\u4f1a\u6839\u636e\u5b83\u4eec\u505a\u51fa\u4ef7\u503c\u5224\u65ad\u3002\u8fd8\u6709\u6a21\u7cca\u7684\u8fb9\uff1b\u8bb8\u591a\u81ea\u63cf\u8ff0\u683c\u5f0f\u4e5f\u53ef\u4ee5\u6709\u4e00\u4e2a\u67b6\u6784\u5c42\u3002\u540c\u6837\uff0c\u6211\u4eec\u4e0d\u4f1a\u771f\u6b63\u6bd4\u8f83\u5de5\u5177\u8d28\u91cf\uff1b\u6211\u4eec\u7684\u76ee\u6807\u662f\u67e5\u770b\u683c\u5f0f\u7684\u5185\u5728\u5c5e\u6027\u3002\u4e0d\u8fc7\uff0c\u4ed6\u4eec\u5468\u56f4\u7684\u6587\u5316\u53ef\u80fd\u4f1a\u88ab\u8003\u8651\u5728\u5185\u3002\n\u8fd9\u4e00\u70b9\u4e5f\u5f88\u91cd\u8981\uff0c\u4e0d\u8981\u4e0eRPC\u534f\u8bae\u6df7\u4e3a\u4e00\u8c08\uff0c\u5c3d\u7ba1RPC\u534f\u8bae\u4e2d\u4f7f\u7528\u4e86\u5176\u4e2d\u8bb8\u591a\u5185\u5bb9\u3002\u8bf7\u8bb0\u4f4f\uff0cHTTP/REST\u63a5\u53e3\u901a\u5e38\u53ea\u662f\u4e00\u79cdRPC\u534f\u8bae\uff0c\u65e0\u8bba\u662f\u5426\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u73b0\u3002\n\u622a\u81f32020\u5e7410\u6708\u7684\u6700\u65b0\u60c5\u51b5\u3002\u4e0d\u4f1a\u5c1d\u8bd5\u5305\u62ec\u65e0\u6570\u7684\u5c0f\u4e8b\uff0c\u56e0\u4e3a\u4e16\u754c\u4e0a\u53ea\u6709\u90a3\u4e48\u591a\u65f6\u95f4\u3002\n\u73b0\u5728\u6240\u6709\u7684\u4e1c\u897f\u90fd\u4f1a\u62ff\u6765\u505a\u6bd4\u8f83\u3002\u6211\u4eec\u90fd\u77e5\u9053JSON\uff0c\u6211\u4eec\u90fd\u540c\u610f\u5b83\u5df2\u7ecf\u8db3\u591f\u597d\u4e86\uff0c\u4f46\u662f\u771f\u7684\u6709\u70b9\u5783\u573e\u3002\n\u7c7b\u522b\uff1a\u4eba\u7c7b\u53ef\u8bfb\u7684\u3001\u81ea\u6211\u63cf\u8ff0\u7684\u3002(https://json-schema.org/\u662f\u5b58\u5728\u7684\uff0c\u4f46\u4f3c\u4e4e\u6ca1\u6709\u5f97\u5230\u5e7f\u6cdb\u4f7f\u7528\u3002)\u3002\u6709\u4e00\u4e2aRPC\u534f\u8bae\uff0c\u4f46\u5b83\u4f3c\u4e4e\u4e5f\u5f88\u5c11\u4f7f\u7528\uff0c\u8fd9\u53ef\u80fd\u66f4\u901a\u7528\u3002\n\u7b80\u5355-\u6613\u4e8e\u8bfb\u3001\u5199\u548c\u7406\u89e3\u2026\u3002\u81f3\u5c11\u5bf9\u7b80\u5355\u7684\u4e8b\u60c5\u6765\u8bf4\u662f\u8fd9\u6837\u3002\u4e0d\u8fc7\uff0c\u7ed3\u679c\u8fd8\u662f\u6709\u5f88\u591a\u4eba\u88ab\u6293\u5230\u4e86\u3002\n\u7c7b\u578b\u7cfb\u7edf\u975e\u5e38\u5783\u573e-\u6ca1\u6709\u65e5\u671f/\u65f6\u95f4\uff0c\u6ca1\u6709\u5b9e\u578b\u6574\u6570\uff0c\u6ca1\u6709\u5b9e\u578b\u7ed3\u6784\uff0c\u6ca1\u6709\u8054\u5408/\u5143\u7ec4/\u7b49\u7b49\n\u503e\u5411\u4e8e\u4e0d\u9f13\u52b1\u6a21\u5f0f\u7684\u201c\u7b80\u5355\u5230\u4e0d\u9700\u8981\u5b83\u201d\uff0c\u76f4\u5230\u5b83\u53d8\u5f97\u4e0d\u90a3\u4e48\u7b80\u5355\u3002\n\u6ca1\u6709\u6807\u51c6\u5316\u7684\u8868\u5355\u57df\u53ef\u4ee5\u88ab\u91cd\u65b0\u6392\u5e8f\u3001\u590d\u5236\u7b49\u3002\u8fd9\u4f7f\u5f97\u6563\u5217\u5b83\u53d8\u5f97\u56f0\u96be\uff0c\u5fc5\u987b\u8bfb\u53d6\u6574\u4e2a\u6d88\u606f\u624d\u80fd\u5f00\u59cb\u9a8c\u8bc1\u5b83\uff0c\u7b49\u7b49\u3002\n\u592a\u590d\u6742\u4e86-\u51fa\u4e8e\u67d0\u4e9b\u8be5\u6b7b\u7684\u539f\u56e0\uff0c\u4ed6\u4eec\u5c06\u5176\u6253\u9020\u6210JSON\u7684\u4e25\u683c\u8d85\u96c6\uff0c\u800c\u4e14\u6ca1\u6709\u4eba\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u6240\u4ee5\u8fd9\u53ea\u662f\u4e00\u5806\u5f92\u52b3\u3002\n\u4e0d\u786e\u5b9a\u662f\u5426\u6709\u4eba\u771f\u6b63\u77e5\u9053XML\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002\u6211\u60f3\u8fd9\u57fa\u672c\u4e0a\u662fW3C\u7684\u9519\u5427\uff1f\u6709\u4e9b\u4e8b\u60c5\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u6700\u7ec8\u6211\u4e0d\u786e\u5b9a\u8fd9\u662f\u4e0d\u662f\u4efb\u4f55\u4eba\u771f\u6b63\u60f3\u8981\u4f7f\u7528\u7684\u4e1c\u897f\uff0c\u8fd9\u53ea\u4f1a\u662f\u8fc7\u53bb\u7684\u53c8\u4e00\u4e2a\u9519\u8bef\u3002\n\u7c7b\u522b\uff1a\u4eba\u7c7b\u53ef\u8bfb\u7684\u3001\u81ea\u6211\u63cf\u8ff0\u7684\u3001\u5177\u6709\u5e38\u89c1\u6a21\u5f0f\u7528\u6cd5\u7684\u3002\u6709RPC\u534f\u8bae\u548c\u8bb8\u591a\u5176\u4ed6\u590d\u6742\u7684\u4e1c\u897f\u3002\n\u53c8\u540dProtocol Buffers\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u611a\u8822\u7684\u540d\u5b57\u3002\u8c37\u6b4c\u5e38\u7528\u7684\u3001\u5feb\u901f\u7684\u5728\u7ebf\u5e8f\u5217\u5316\u683c\u5f0f\u3002\n\u5728\u8c37\u6b4c\u7684\u652f\u6301\u4e0b\uff0c\u5b83\u5c06\u64c5\u957f\u8c37\u6b4c\u770b\u91cd\u7684\u4e1c\u897f\u3002\n\u73b0\u5728\u5bf9\u7248\u672c\u5316\u65b9\u6848\u63d0\u4f9b\u4e86\u4e00\u4e9b\u652f\u6301\uff0c\u5c3d\u7ba1\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u5f88\u96be\u89e3\u51b3\u7684\u95ee\u9898\n\u5728\u8c37\u6b4c\u7684\u652f\u6301\u4e0b\uff0c\u5b83\u5c06\u64c5\u957f\u8c37\u6b4c\u770b\u91cd\u7684\u4e1c\u897f\u3002\n\u7c7b\u522b\uff1a\u673a\u5668\u53ef\u8bfb\uff0c\u6a21\u5f0f\u5b9a\u4e49\u3002\u4e3b\u8981\u9488\u5bf9RPC\u8bbe\u8ba1\uff0c\u5b83\u5185\u7f6e\u4e8e\u53c2\u8003\u5b9e\u73b0\u4e2d\u3002\n\u7528\u6237\uff1aSandStorm.io\u3001Cloudflare\uff1f\u3001\u5404\u79cd\u5176\u4ed6\u7528\u6237\uff0c\u4f46\u770b\u8d77\u6765\u5e76\u4e0d\u591a\u3002\n\u662f\u7531\u4e00\u4f4d\u5728\u8c37\u6b4c\u81f4\u529b\u4e8eProtobuf\u7684\u4eba\u5236\u4f5c\u7684\uff0c\u6240\u4ee5\u5b83\u80cc\u540e\u6709\u5f88\u591a\u7ecf\u9a8c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u8fd9\u53ea\u732b\u603b\u662f\u6b63\u786e\u7684\uff0c\u4f46\u80af\u5b9a\u6709\u4e00\u4e9b\u89c2\u70b9\u8bd5\u56fe\u8868\u8fbe\u51fa\u6765\u3002\n\u5f88\u591a\u6587\u6863\u548c\u6982\u5ff5\u90fd\u662f\u76f8\u5f53\u4f4e\u7ea7\u7684\uff0c\u60a8\u901a\u5e38\u4e0d\u9700\u8981\u5b83\u3002\n\u770b\u8d77\u6765\u6bd4\u534f\u8baeBuf\u66f4\u590d\u6742-\u8fd9\u53ef\u80fd\u662f\u7b2c\u4e09\u65b9\u5b9e\u73b0\u8f83\u5c11\u7684\u539f\u56e0\u4e4b\u4e00\u3002\n\u963f\u5e15\u5947\u7248\u672c\u7684Protobuf\u3002\u6709\u4eba\u771f\u7684\u7528\u8fd9\u4e2a\u5417\uff1f\u663e\u7136\uff0cFacebook\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53d1\u660e\u4e86\u5b83\uff0c\u7136\u540e\u628a\u5b83\u7ed9\u4e86\u963f\u5e15\u5947\u3002\u8fd8\u6709\u5176\u4ed6\u4eba\u5417\uff1f\n\u7528\u6237\uff1a\u57fa\u672c\u4e0a\u90fd\u662fFacebook\uff1fTwitter\u548cAirbnb\u663e\u7136\u4e5f\u5728\u4f7f\u7528\u5b83\uff0c\u6240\u4ee5\u663e\u7136\u5b83\u5e76\u4e0d\u662f\u4e0d\u53d7\u6b22\u8fce\u3002\n\u611f\u89c9\u6709\u70b9\u50cf\u8c37\u6b4c\u5bf9Capn Proto\u7684\u56de\u5e94\uff0c\u56e0\u4e3a\u5b83\u6709\u4e00\u4e9b\u76f8\u540c\u7684\u8bbe\u8ba1\u76ee\u6807--\u96f6\u62f7\u8d1d\u5e8f\u5217\u5316\u548c\u66f4\u6613\u4e8e\u7248\u672c\u5316\u7684\u5e03\u5c40\u3002\n\u975e\u5e38\u597d\u7684\u7c7b\u578b\u7cfb\u7edf-\u6709\u8bf8\u5982fixnum\u3001DateTime\u3001BLOBS\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\n\u6bd4\u9700\u8981\u7684\u8981\u590d\u6742\u4e00\u4e9b\uff0c\u5c3d\u7ba1\u8fd9\u662f\u4e3a\u4e86\u7d27\u51d1\u548c\u5168\u9762\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u6570\u5b57\u88ab\u5bc6\u96c6\u5730\u6253\u5305\u6210\u66f4\u5c11\u7684\u6bd4\u7279\u3002\n\u53e6\u4e00\u4e2aCBOR\uff0c\u6216\u8005\u66f4\u786e\u5207\u5730\u8bf4\uff0cCBOR\u5c31\u662f\u4ece\u8fd9\u4e2a\u6d3e\u751f\u51fa\u6765\u7684\u3002\u8bbe\u8ba1\u7b80\u5355\u7d27\u51d1\u3002\u6709\u70b9\u50cf\u7a0d\u5fae\u964d\u4f4e\u7684CBOR\uff0c\u5b9e\u9645\u4e0a\uff0c\u5b83\u4eec\u7684\u6574\u6570\u89c4\u8303\u5185\u5bb9\u770b\u8d77\u6765\u51e0\u4e4e\u76f8\u540c\u3002\n\u987e\u540d\u601d\u4e49\uff0cJSON\u7684\u4e8c\u8fdb\u5236\u5206\u652f\u3002\u7531MongoDB\u521b\u5efa\uff0c\u4f5c\u4e3a\u5176\u5185\u90e8\u6570\u636e\u683c\u5f0f\u3002\n\u6709\u8da3\u4f46\u5b9e\u9645\u4e0a\u4e0d\u5728\u5e8f\u5217\u5316\u8bed\u8a00\u8303\u56f4\u5185\u7684\u4e1c\u897f\uff0c\u6216\u8005\u5728\u5176\u4ed6\u65b9\u9762\u4e0d\u76f8\u5173\u7684\u4e1c\u897f\u3002\n\u65e0\u6548\uff0c\u5b83\u88ab\u8bbe\u8ba1\u4e3a\u914d\u7f6e\u8bed\u8a00\uff0c\u800c\u4e0d\u662f\u5e8f\u5217\u5316\u683c\u5f0f\u3002\u5b83\u57fa\u672c\u4e0a\u662f\u4e00\u79cd\u5c1d\u8bd5\uff0c\u8bd5\u56fe\u4f7f\u50cfwindows.INI\u6587\u4ef6\u8fd9\u6837\u7b80\u5355\u548c\u666e\u904d\u7684\u4e1c\u897f\u6210\u4e3a\u4e00\u79cd\u5b9e\u9645\u7684\u89c4\u8303\uff0c\u800c\u4e0d\u662f\u4e00\u79cd\u65f6\u5c1a\u3002\n\u7c7b\u522b\uff1a\u4eba\u7c7b\u53ef\u8bfb\u7684\uff0c\u6709\u70b9\u81ea\u6211\u63cf\u8ff0\u7684\uff0c\u5c3d\u7ba1\u901a\u5e38\u60a8\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u60a8\u8bd5\u56fe\u5c06\u5176\u4e0e\u4e4b\u76f8\u9002\u5e94\u3002\n\u751f\u9508\u7684\u7269\u4f53\u7b26\u53f7\u3002\u56e0\u4e3a\u5c06Rust\u7684ML-y\u7c7b\u578b\u7cfb\u7edf\u786c\u585e\u5230JSON\u4e2d\u5e76\u4e0d\u662f\u5f88\u6709\u8da3\u3002\u5728\u8fd9\u4e2a\u76ee\u7684\u4e0a\u6548\u679c\u975e\u5e38\u597d\uff0c\u4f46\u5728\u5176\u4ed6\u5730\u65b9\u57fa\u672c\u4e0a\u6ca1\u6709\u5c1d\u8bd5\u8fc7\u3002\n\u7c7b\u522b\uff1a\u4eba\u7c7b\u53ef\u8bfb\u7684\uff0c\u6709\u70b9\u81ea\u6211\u63cf\u8ff0\u7684\uff0c\u5c3d\u7ba1\u901a\u5e38\u60a8\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u60a8\u8bd5\u56fe\u5c06\u5176\u4e0e\u4e4b\u76f8\u9002\u5e94\u3002\n\u5305\u62ec\u4e3b\u8981\u662f\u4e3a\u4e86\u5b8c\u6574\u6027\u3002\u9664\u4e86\u4e0d\u80fd\u4fdd\u8bc1\u7a33\u5b9a\u6027\u7684\u5355\u4e2a\u7279\u5b9a\u5b9e\u73b0\u4e4b\u5916\uff0c\u5b83\u4e0d\u662f\u6807\u51c6\u5316\u7684\uff0c\u56e0\u6b64\u4e0d\u6253\u7b97\u7528\u4e8e\u901a\u7528\u7528\u9014\u3002\u5b83\u7684\u76ee\u7684\u662f\u4f5c\u4e3a\u4e00\u79cd\u7528\u4e8eServo\u7684\u5feb\u901f\u800c\u7b80\u5355\u7684RPC/IPC\u683c\u5f0f\uff0c\u800c\u5b9e\u9645\u7684\u683c\u5f0f\u57fa\u672c\u4e0a\u662f\u8be5\u76ee\u6807\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\n\u7528\u6237\uff1a\u4f3a\u670d\uff0c\u7531\u5185\u5411\u7684\u4eba\u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u4ed6\u4eec\u4e0d\u5728\u4e4e\u80fd\u5426\u76f8\u4e92\u4ea4\u8c08\u3002(\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5229\u57fa\u5e02\u573a\uff0c\u8c01\u77e5\u9053\u5462\uff1f)\u3002\n\u8be5\u7279\u5b9a\u5e93\u7684\u7279\u5b9a\u7248\u672c\u4ee5\u5916\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u662f\u672a\u5b9a\u4e49\u7684\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u4f60\u4e0d\u4ecb\u610f\u7684\u8bdd\uff0c\u90a3\u5c31\u592a\u597d\u4e86\u3002\n\u67d0\u4e2a\u611a\u8822\u7684\u7535\u4fe1\u6807\u51c6\u673a\u6784\u8bd5\u56fe\u505a\u534f\u8bae\u7a0d\u540e\u4f1a\u505a\u7684\u4e8b\u60c5\u3002\u6240\u8ba8\u8bba\u7684\u6807\u51c6\u673a\u6784\u4e0e\u521b\u9020\u73b0\u5b9e\u7684\u4efb\u6027\u5e7b\u89c9\u7684\u6807\u51c6\u673a\u6784\u6709\u5173\uff0c\u8be5\u673a\u6784\u88ab\u79f0\u4e3aOSI\u7f51\u7edc\u6a21\u578b\u3002\n\u4f46\u5b9e\u9645\u4e0a\u4e5f\u6709\u597d\u7684\u4e00\u9762\u3002\u5982\u679c\u5b83\u4e0d\u662f\u6545\u610f\u590d\u6742\u548c\u8fc7\u5ea6\u8bbe\u8ba1\uff0c\u5b83\u53ef\u80fd\u4f1a\u76f8\u5f53\u4e0d\u9519\u3002\n\u7528\u6237\uff1a\u5e0c\u671b\u60a8\u770b\u5230\u7684\u552f\u4e00\u4f4d\u7f6e\u662f\u5728LDAP\u548cSSL\u8bc1\u4e66\u4e2d\u3002\n\u4e8c\u8fdb\u5236\u548c\u6587\u672c\u683c\u5f0f\uff0c\u4ee5\u53ca\u5c06\u5176\u653e\u5165\u51e0\u4e4e\u4efb\u4f55\u5176\u4ed6\u6570\u636e\u683c\u5f0f\u7684\u65b9\u6cd5\u3002\n\u5305\u62ec\u7684\u4e3b\u8981\u662f\u6b47\u65af\u5e95\u91cc\u7684\u8461\u8404\u5e72\u3002\u592a\u9633\u5fae\u7cfb\u7edf\u516c\u53f8\u8bd5\u56fe\u505aProtobuf\u540e\u6765\u4f1a\u505a\u7684\u4e8b\u60c5\u3002\n\u57fa\u672c\u4e0a\uff0c\u5f53\u60a8\u662f\u4e00\u540d\u975e\u5e38\u4f18\u79c0\u7684C\u7a0b\u5e8f\u5458\uff0c\u5e76\u4e14\u5e0c\u671b\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u7ed3\u6784\u5316\u6570\u636e\u65f6\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\u3002\u4e0d\u8fc7\uff0c\u5c31\u8fd9\u4e00\u70b9\u800c\u8a00\uff0c\u8fd9\u662f\u76f8\u5f53\u5408\u7406\u7684\u3002\n\u9664\u975e\u4f60\u662f20\u4e16\u7eaa90\u5e74\u4ee3\u521d\u7684C\u7a0b\u5e8f\uff0c\u5426\u5219\u4e0d\u4e00\u5b9a\u80fd\u505a\u5f88\u591a\u4e8b\u60c5\u3002\nLisp\u4ee3\u7801\u662f\u7531\u4ec0\u4e48\u7ec4\u6210\u7684\uff0c\u4e00\u4e2a\u6765\u81ea\u66f4\u6587\u660e\u65f6\u4ee3\u7684\u4f18\u96c5\u7b26\u53f7\u3002\u4e0e\u8bb8\u591aLisp\u89e3\u51b3\u65b9\u6848\u4e00\u6837\uff0c\u5b83\u5de5\u4f5c\u5f97\u975e\u5e38\u597d\uff0c\u76f4\u5230\u60a8\u9700\u8981\u83b7\u5f97\u4e24\u4e2aLisp\u5b9e\u73b0\u624d\u80fd\u4f7f\u7528\u76f8\u540c\u7684\u4e1c\u897f\u3002\u5c3d\u7ba1\u81f3\u5c11\u4ece20\u4e16\u7eaa70\u5e74\u4ee3\u5f00\u59cb\u5c1d\u8bd5\uff0c\u4f46\u5728Lisp\u4e4b\u5916\u4e00\u76f4\u6ca1\u6709\u6210\u529f\u5730\u6d41\u884c\u8d77\u6765\u3002\n\u6ca1\u6709\u771f\u6b63\u7684\u901a\u7528\u89c4\u8303\uff0c\u66f4\u4e0d\u7528\u8bf4\u5b9e\u73b0\u4e86\u3002\u4e0d\u8fc7\uff0cEDN\u662f\u4e00\u4e2a\u76f8\u5f53\u4e0d\u9519\u7684\u5f00\u7aef\u3002\n\u7528\u6237\uff1a\u4efb\u4f55\u7c7b\u4f3cLisp\u7684\u8bed\u8a00\uff0c\u4e3b\u8981\u7684\u771f\u5b9e\u793a\u4f8b\u662fScheme\u3001racket\u3001Clojure\u548c\u7406\u8bba\u4e0a\u7684Common Lisp\u3002\n\u4efb\u4f55\u6709Lisp\u89e3\u91ca\u5668\u7684\u4eba\u90fd\u4f1a\u5c1d\u8bd5\u7528read\u6765\u9605\u8bfb\u5b83\uff0c\u5c3d\u7ba1\u8fd9\u5df2\u7ecf\u88ab\u8bc1\u660e\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u60f3\u6cd5\u3002\n\u65e0\u8bba\u60a8\u4f7f\u7528\u54ea\u79cd\u5f62\u5f0f\u7684S\u8868\u8fbe\u5f0f\uff0c\u603b\u4f1a\u6709\u4eba\u4e3a\u4ed6\u4eec\u7684\u7279\u5b9a\u5f62\u5f0f\u7684Lisp\u4e0d\u80fd\u52a0\u8f7dRead\u800c\u611f\u5230\u607c\u706b\u3002\n\u8fd9\u5b9e\u9645\u4e0a\u6709\u70b9\u6709\u8da3\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u5c06\u6bcf\u79cd\u683c\u5f0f\u4f5c\u4e3a\u5bf9\u4e4b\u524d\u683c\u5f0f\u7684\u53cd\u5e94\u8fdb\u884c\u8ddf\u8e2a\u3002ASN.1\u3001XDR\u548c\u4e00\u4e2a\u7531\u66f4\u5947\u602a\u7684\u4e1c\u897f\u7ec4\u6210\u7684\u52a8\u7269\u56ed\u65e9\u5728\u5f53\u524d\u7684\u4e92\u8054\u7f51\u65f6\u4ee3\u4e4b\u524d\u5c31\u5b58\u5728\u4e86\u3002\u73b0\u4ee3\u59cb\u4e8eXML\u3002XML\u6709\u81ea\u5df1\u7684\u60a0\u4e45\u5386\u53f2\uff0c\u4f46\u5b83\u5f62\u6210\u4e86\u67d0\u79cd\u74f6\u9888\u3002\u8fd9\u662f\u6280\u672f\u672c\u4f53\u8bba\u7684\u53d8\u5316\u4e4b\u4e00\uff0c\u5c31\u50cf\u5927\u706d\u7edd\u4e00\u6837\u3002\u4eba\u4eec\u771f\u6b63\u5173\u5fc3\u7684\u5927\u591a\u6570\u4e8b\u60c5\u90fd\u662f\u5728\u5bf9XML\u7684\u53cd\u5e94\u4e2d\u5f62\u6210\u7684\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u6211\u8981\u4ece\u8fd9\u91cc\u5f00\u59cb\u7684\u3002\n\u56e0\u6b64\uff0c\u6700\u5e7f\u4e3a\u6d41\u4f20\u7684\u4e8b\u60c5\u7684\u5bb6\u8c31\u662f(\u5bf9\u90a3\u4e9b\u4f7f\u7528\u624b\u673a\u7684\u4eba\u8868\u793a\u6b49\u610f)\uff1a\n/--&&gt\uff1bCBORXML-(XML\u8fc7\u4e8e\u5197\u957f)-+-&&gt\uff1bJSON--(JSON\uff0c\u4f46\u4e8c\u8fdb\u5236\u4e14\u7d27\u51d1)--+-&gt\uff1bmsgpack|\\-&gt\uff1bYAML\\--&gt\uff1bbson||\\-(XML\uff0c\u4f46\u4e8c\u8fdb\u5236)-+--&&gt\uff1bProtobuf--(\u534f\u8bae\uff0c\u4f46\u901f\u5ea6\u66f4\u5feb)-+--&gt\uff1bCap&39\uff1bn\u534f\u8bae\\-&gt\uff1b\u5e73\u7f13\u51b2\u5668\u3002\n\u56e0\u6b64\uff0c\u5f53\u60a8\u5b9e\u9645\u67e5\u770b\u6b64\u5217\u8868\u65f6\uff0c\u6709\u4e00\u4ef6\u4e8b\u975e\u5e38\u7a81\u51fa\uff1a\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709JSON\u7684\u66ff\u4ee3\u54c1\u3002\u5728\u201c\u4eba\u7c7b\u53ef\u8bfb\u201d\u4e13\u680f\u91cc\uff0c\u6ca1\u6709\u4ec0\u4e48\u6bd4\u8fd9\u66f4\u597d\u7684\u4e86\u3002\u54e6\uff0c\u5df2\u7ecf\u6709\u5f88\u591a\u4eba\u8bd5\u8fc7\u4e86\uff0c\u6bd4\u5982\uff1a\n\u2026\u3002\u4f46\u5176\u4e2d\u4f3c\u4e4e\u6ca1\u6709\u51e0\u4e2a\u662f\u6700\u65b0\u7684\uff0c\u66f4\u4e0d\u7528\u8bf4\u5e7f\u6cdb\u4f7f\u7528\u4e86\u3002JSON5\u53ef\u80fd\u662f\u6700\u63a5\u8fd1\u7684\uff0c\u56e0\u4e3a\u5b83\u6700\u63a5\u8fd1\u5b83\u7684\u524d\u8eab\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u521b\u65b0\u7684\u6210\u719f\u9886\u57df\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u975e\u5b9e\u9645\u88ab\u591a\u4e2a\u7ec4\u7ec7\u4f7f\u7528\uff0c\u5426\u5219\u8bf7\u505c\u6b62\u5efa\u8bae\u66f4\u591a\u5185\u5bb9", "note_en": "I want to take a brief look at various data serialization formats and compare them. Basically the goal is to answer the question, \u201ccan we find something better than JSON?\u201d However, note that we are looking at these things for DATA SERIALIZATION, not for config files and stuff, so that\u2019s the goal by which these will be judged.\n   That is, whether the type information for a structure is defined in a separate file (a schema) that a receiving program checks against, or whether the message itself contains type information. It\u2019s almost exactly the difference between statically and dynamically typed programming languages. Like programming languages, both have pros and cons, neither of them are always better than the other. The goal of this is to compare apples to apples, so we\u2019re gonna note which category these things fall into but not make value judgements based on them. There\u2019s also fuzzy edges; many self-describing formats optionally have a schema layer too. Similarly, we will not really compare tooling quality; the goal is to look at the intrinsic properties of the formats. The culture surrounding them may be considered though.\n This is also important not to conflate with an RPC protocol, though many of these things are used IN RPC protocols. Keep in mind that HTTP/REST interfaces are often just a type of RPC protocol, whether realized that way or not.\n Up to date as of October 2020. Doesn\u2019t try to include myriad minor things, \u2019cause there\u2019s only so much time in the world.\n    What everything gets currently compared against. We all know JSON, we all agree it\u2019s Sorta Good Enough but really is kinda crap.\n Category: Human-readable, self-describing. ( https://json-schema.org/ exists but does not seem very widely used.) Has an  RPC protocol but it also seems lightly used,  this might be more general.\n   Simple \u2013 Easy to read, write, and understand\u2026 at least for simple things.  Turns out there\u2019s a lot of gotcha\u2019s though.\n  Type system is pretty shit \u2013 no date/time, no real integers, no real structs, no unions/tuples/etc\n Tends to discourage schema\u2019s \u2013 \u201cSo simple it doesn\u2019t need it\u201d, until it becomes less simple.\n No normalized form \u2013 fields may be reordered,  duplicated, etc. Makes hashing it hard, gotta read whole message to begin verifying it, etc.\n         Way too complicated \u2013 they made it a strict superset of JSON for some damn reason, and nobody uses that form, so it\u2019s just a pile of wasted effort\n   Not sure anyone really knows how XML happened. It\u2019s basically the W3C\u2019s fault, I think? It\u2019s okay for some things but in the end I\u2019m not sure it\u2019s something anyone actually  wants to use, it\u2019s just going to be one more of those mistakes of the past.\n Category: Human-readable, self-describing with common schema usage. Has an  RPC protocol and many other complicated things.\n         aka Protocol Buffers, but that\u2019s a pretty dumb name. Google\u2019s common, fast on-the-wire serialization format.\n    Backed by Google, so it\u2019s going to be good at the things Google values\n  Now has some support for versioning schemas, though it\u2019s a hard problem in general\n  Backed by Google, so it\u2019s going to be good at the things Google values\n    Category: Machine-readable, schema-defined. Designed primarily for RPC, which is built in to the reference implementation.\n Users: sandstorm.io, Cloudflare?, various other people but it doesn\u2019t seem like that many\n  Made by one of the people who worked heavily on Protobuf at Google, so  there\u2019s lots of experience behind it. That said, doesn\u2019t mean this cat\u2019s always  right, but there\u2019s certainly opinions that are trying to be expressed.\n  Lots of the docs and concepts are pretty low level, you usually ain\u2019t gonna need it\n Seems more complicated than protobuf \u2013 this might be one reason there\u2019s fewer 3rd-party implementations\n   Apache\u2019s version of Protobuf. Does anyone actually use this? Facebook, apparently, since they invented it and then gave it to Apache. Anyone else?\n  Users: Basically mostly Facebook? Twitter and AirBNB also apparently use it, so apparently it\u2019s not UNpopular.\n       Feels a little like Google\u2019s answer to Cap\u2019n Proto, as it has some of the same design goals \u2013 zero-copy serialization and layouts that are more amenable to versioning.\n             Pretty good type system \u2013 there\u2019s things like fixnum\u2019s, datetime\u2019s, blobs, etc\n  Kinda more complicated than it needs to be, though this is for the sake of compactness and comprehensive types. Numbers are densely packed into fewer bits when possible, for example.\n   The Other CBOR, or rather,  CBOR is derived from this. Designed to be simple and compact. Kinda a  lot like a slightly chopped down CBOR, actually, their integer specification stuff looks nearly identical.\n         As the name implies, a binary-ifcation of JSON. Created by MongoDB as its internal data format.\n        Things that are interesting but not actually in the scope of serialization languages, or are otherwise irrelevant.\n   Invalid, it\u2019s designed as a config language, not a serialization format. It\u2019s basically an attempt to make something as simple and ubiquitous as windows .INI files that is an actual specification rather than a fashion.\n Category: Human-readable, sorta self-describing though usually you have a specific data structure you\u2019re trying to fit it into.\n        Rusty Object Notation. Because shoehorning Rust\u2019s ML-y type systeminto JSON isn\u2019t very much fun. Works startlingly well for this purpose but is basically untried elsewhere.\n Category: Human-readable, sorta self-describing though usually you have a specific data structure you\u2019re trying to fit it into.\n        Included mainly for completeness. It\u2019s not standardized outside of a single particular implementation which doesn\u2019t promise stability, so not intended for general-purpose use. It\u2019s intended as a fast and easy RPC/IPC format for Servo, and the actual format is basically an implementation detail of that goal.\n Users: Servo, programs written by introverts who don\u2019t care about being able to talk to each other. (Turns out this is a useful niche though, who knew.)\n    Anything other than that specific version of that specific library is undefined. If you\u2019re OK with that though, it\u2019s great.\n   Some stupid telecom standards body\u2019s attempt at doing what protobuf would do later. The standard body in question is related to the one that created the willful illusion of reality called  the OSI networking model.\n Actually has some up sides though. If it wasn\u2019t willfully complicated and overdesigned, it might be pretty good.\n  Users: Hopefully the only places you\u2019ve seen this are in LDAP and in SSL certificates.\n  Binary and text forms, with methods for it to be shoved into just about any other data format ever\n     Included mainly for hysterical raisins. Sun Microsystems\u2019s attempt at doing what protobuf would do later.\n Basically what happens when you\u2019re a very good C coder and want to transmit structured data over the network. Pretty reasonable as far as that goes, though.\n      Doesn\u2019t necessarily do much unless you\u2019re a C program from the early 1990\u2019s\n  What Lisp code is made of,  an elegant notation from a more civilized time. Like lots of Lisp solutions, it works really well until you need to get two Lisp implementations to use the same kind of thing. Has steadfastly not managed to catch on outside of Lisp despite trying since at least the 1970\u2019s.\n Does not have an actual universal spec, let alone implementations.  EDN is a pretty nice start though.\n  Users: Any Lisp-like language, primary Real Examples are Scheme, Racket, Clojure and theoretically Common Lisp.\n    Anyone out there with a Lisp interpreter will try to read it with  READ, despite  it already been proven that\u2019s a terrible idea.\n No matter what form of S-expression you use, somewhere out there someone will be annoyed that their particular form of Lisp can\u2019t load it with  READ.\n         This is actually kinda interesting \u2019cause it\u2019s easy to trace each format as a reaction to ones before it. ASN.1, XDR and a zoo of even stranger stuff predate the current internet age. The Modern Age starts with XML. XML has a long lineage of its own, but it forms a kinda bottleneck. It\u2019s one of those technological ontology changes, like a mass extinction. Most of the things people actually care about formed in reaction to XML, so that\u2019s where I\u2019m going to start.\n So, the family tree of the most widespread things would be (apologies for those on mobile):\n /--&gt; CBORXML---(XML is too verbose)-+---&gt; JSON --(JSON but binary and compact)---+--&gt; msgpack | \\---&gt; YAML \\--&gt; BSON | | \\---(XML but binary)------+---&gt; Protobuf --(Protobuf but faster)---+---&gt; Cap&#39;n Proto \\---&gt; Thrift \\---&gt; Flatbuffers\n  So when you actually look at this list, one thing stands out: There isn\u2019t actually a replacement for JSON. Nothing better than it in the \u201chuman readable\u201d column. Oh, there\u2019s been many that have  tried, such as:\n  \u2026But few of those seem kept up to date, let alone used widely. JSON5 probably comes closest, by virtue of being closest to its predecessor. This seems an area ripe for innovation though.\n   That said, please stop suggesting more unless they get actually used by more than one organization", "posttime": "2020-10-24 07:28:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "json", "title": "\u6bd4JSON\u597d\u5417\uff1f", "title_en": "Better Than JSON?", "transed": 1, "url": "https://wiki.alopex.li/BetterThanJson", "via": "", "real_tags": ["json"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1030815, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u9020\r\u5e10\u76ee", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2020-10-24 07:28:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u81ea\u884c\u8f66,backup,\u521b\u9020", "title": "\u4f7f\u7528\u60a8\u7684\u81ea\u884c\u8f66\u4f5c\u4e3a\u5907\u7528\u7535\u6e90", "title_en": "Use Your Bike as a Backup to Your Backup Power Supply", "transed": 1, "url": "https://spectrum.ieee.org/geek-life/hands-on/use-your-bike-as-a-backup-to-your-backup-power-supply", "via": "", "real_tags": ["\u81ea\u884c\u8f66", "backup", "\u521b\u9020"]}, {"category": "", "categoryclass": "", "imagename": "b71218dca4cb24dacf72f3c3635d835f.jpg", "infoid": 1030810, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u6b63\u5728\u4e3a\u4f60\u7684\u6885\u8d5b\u5fb7\u65af-\u5954\u9a70(Mercedes-Benz)SUV\u5bfb\u627e\u4e00\u70b9\u989d\u5916\u7684\u5f71\u54cd\u529b\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u8df3\u8fc7\u95ea\u4eae\u7684\u5fbd\u7ae0\uff0c\u8f6c\u800c\u9009\u62e9\u534e\u4e3d\u7684\u989c\u8272\u3002\u6839\u636e\u7f8e\u56fd\u56fd\u5bb6\u516c\u8def\u4ea4\u901a\u5b89\u5168\u7ba1\u7406\u5c40(NHTSA)\u7684\u4e00\u4efd\u62a5\u544a\uff0c\u6709\u95ee\u9898\u7684\u88ab\u7167\u4eae\u7684\u4e09\u89d2\u661f\u6b63\u5728\u5bfc\u81f4\u4e00\u4e9b\u7ebf\u8def\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e9bGLE\u548cGLS\u8f66\u578b\u7684\u52a8\u529b\u8f6c\u5411\u6545\u969c\u3002\u81ea\u90a3\u4ee5\u540e\uff0c\u6885\u8d5b\u5fb7\u65af-\u5954\u9a70(Mercedes-Benz)\u5df2\u5c31\u8fd9\u4e00\u95ee\u9898\u53d1\u5e03\u4e86\u6b63\u5f0f\u53ec\u56de\u3002\n\u6839\u636e\u53ec\u56de\uff0c\u95ee\u9898\u7684\u786e\u5207\u539f\u56e0\u662f\u7167\u660e\u5fbd\u7ae0\u7684\u5730\u9762\u4e0d\u597d\u3002\u5982\u679c\u6709\u95ee\u9898\u7684GLS\u6216GLE\u63a5\u5730\u4e0d\u826f\uff0c\u5219\u52a8\u529b\u8f6c\u5411\u4ee5\u53ca\u5de6\u524d\u5927\u706f\u548c\u96e8\u5237\u9a6c\u8fbe\u53ef\u80fd\u4f1a\u5931\u6548\u3002\u6240\u6709\u8fd9\u4e9b\u663e\u7136\u90fd\u4f1a\u5f71\u54cd\u8f66\u8f86\u7684\u5b89\u5168--\u4f60\u53ef\u4ee5\u60f3\u8c61\u5728\u4e0b\u96ea\u6216\u4e0b\u96e8\u7684\u591c\u665a\u5f00\u8f66\u4f1a\u6709\u591a\u5371\u9669\u3002\n\u603b\u5171\u670912,799\u8f86\u6c7d\u8f66\u53d7\u5230\u5f71\u54cd\uff0c\u5305\u62ec\u8fd9\u4e24\u4e2a\u8303\u56f4\u5185\u6bcf\u4e2a\u88c5\u9970\u7ea7\u522b\u7684\u6c7d\u8f66\u3002\u6240\u6709\u7684SUV\u90fd\u662f\u5728\u963f\u62c9\u5df4\u9a6c\u5dde\u7f8e\u56fd\u672c\u571f\u5236\u9020\u7684\uff0c\u8fd9\u4e2a\u95ee\u9898\u81ea2019\u5e7412\u6708\u4ee5\u6765\u4e00\u76f4\u5728\u8fd9\u5bb6\u5fb7\u56fd\u6c7d\u8f66\u5236\u9020\u5546\u7684\u96f7\u8fbe\u4e0a\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u6b21\u53ec\u56de\u6ca1\u6709\u5177\u4f53\u7684\u4e8b\u6545\u88ab\u5f15\u7528\u4e3a\u539f\u56e0\uff1b\u4e5f\u6ca1\u6709\u7531\u4e8e\u8fd9\u4e2a\u95ee\u9898\u800c\u5bfc\u81f4\u7684\u4e8b\u6545\u6216\u4eba\u5458\u53d7\u4f24\u7684\u62a5\u544a\u3002\n\u6885\u8d5b\u5fb7\u65af\u8868\u793a\uff0c\u7ecf\u9500\u5546\u5df2\u7ecf\u610f\u8bc6\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ece12\u67088\u65e5\u5f00\u59cb\uff0c\u987e\u5ba2\u53ef\u4ee5\u5f00\u59cb\u514d\u8d39\u7ef4\u4fee\u6c7d\u8f66\u3002\u540c\u6708\u5c06\u901a\u8fc7\u7f8e\u56fd\u90ae\u4ef6\u53d1\u51fa\u901a\u77e5\uff0c\u63d0\u9192\u8f66\u4e3b\u8fd9\u6837\u505a\u3002\n\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u60f3\u7ed9\u4f60\u7684\u90bb\u5c45\u7559\u4e0b\u6df1\u523b\u5370\u8c61\uff0c\u5728\u4f60\u8fd9\u4e48\u505a\u4e4b\u524d\uff0c\u53ea\u8981\u786e\u4fdd\u4f60\u5e26\u7740\u5e26\u7740\u7167\u660e\u5fbd\u7ae0\u7684GLE\u6216GLS\u53bb\u4fee\u7406\u5c31\u884c\u4e86\u3002\u4f60\u4e0d\u4f1a\u5e0c\u671b\u4f60\u7684\u52a8\u529b\u65b9\u5411\u76d8\u7184\u706d\uff0c\u5c31\u50cf\u9694\u58c1\u7684\u7ea6\u7ff0\u900a\u592b\u5987\u770b\u5230\u4f60\u7684\u65b0\u5954\u9a70\u5fbd\u7ae0\u4eae\u8d77\u6765\u4e00\u6837\u3002\u90a3\u5c31\u592a\u53ef\u60dc\u4e86\u3002", "note_en": "If you&#39;re looking for a little extra clout for your Mercedes-Benz SUV, maybe skip the light-up badge and go for a flashy color instead. According to  a report from the National Highway Traffic Safety Administration (NHTSA), the illuminated three-pointed star in question is causing some wiring issues that could lead to power steering failure on some  GLE and  GLS models. Mercedes-Benz has since issued an official recall for the issue .\n The exact cause of the problem is a bad ground on the illuminated badge, per the recall. If the GLS or GLE in question is suffering from a bad ground, the power steering could be rendered ineffective as well as the left headlight and the wiper motor. All of these things clearly affect the safety of the vehicle\u2014and you can imagine how this would be especially dangerous driving on a snowy or rainy night.\n In total, 12,799 vehicles are affected, consisting of cars from  every trim level throughout those two ranges. All of the SUVs were built stateside in Alabama, and the issue has been on the radar of the German automaker since December of 2019. It&#39;s to be noted that no specific accident has been cited as the cause of this recall; and there have been no accidents or injuries reported as a result of this issue.\n Mercedes says that dealerships are aware of this issue and that customers can begin to take their vehicles in for free repairs starting on Dec. 8. Notices will be sent out via U.S. mail during the same month to remind owners to do as such.\n So if you&#39;re looking to impress your neighbors, just make sure you take your light-up badge-equipped GLE or GLS in for repairs before you do. You wouldn&#39;t want your power steering to go out just as the Johnsons next door see your new Mercedes&#39; emblem light up . Now that would be a shame.", "posttime": "2020-10-24 07:27:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6c\u5411,mercedes", "title": "\u53d1\u5149\u7684\u6885\u8d5b\u5fb7\u65af-\u5954\u9a70\u5fbd\u7ae0\u53ef\u80fd\u5bfc\u81f4\u52a8\u529b\u8f6c\u5411\u6545\u969c", "title_en": "Illuminated Mercedes-Benz badge can cause power steering failure", "transed": 1, "url": "https://www.thedrive.com/news/37213/recall-mercedes-benzs-illuminated-badge-can-cause-power-steering-failure", "via": "", "real_tags": ["\u8f6c\u5411", "mercedes"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1030809, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "LWN\u8ba2\u6237\u5df2\u5411\u60a8\u63d0\u4f9b\u4ee5\u4e0b\u4ec5\u9650\u8ba2\u9605\u7684\u5185\u5bb9\u3002\u6570\u4ee5\u5343\u8ba1\u7684\u7528\u6237\u4f9d\u8d56LWN\u83b7\u53d6\u6765\u81eaLinux\u548c\u81ea\u7531\u8f6f\u4ef6\u793e\u533a\u7684\u6700\u597d\u6d88\u606f\u3002\u5982\u679c\u60a8\u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\uff0c\u8bf7\u8003\u8651\u63a5\u53d7\u53f3\u8fb9\u7684\u8bd5\u7528\u62a5\u4ef7\u3002\u611f\u8c22\u60a8\u8bbf\u95eeLWN.net\uff01\n\u514d\u8d39\u8bd5\u7528LWN 1\u4e2a\u6708\uff1a\u65e0\u9700\u4ed8\u6b3e\u6216\u4fe1\u7528\u5361\u3002\u73b0\u5728\u6fc0\u6d3b\u60a8\u7684\u8bd5\u7528\u8ba2\u9605\uff0c\u770b\u770b\u4e3a\u4ec0\u4e48\u6210\u5343\u4e0a\u4e07\u7684\u8bfb\u8005\u8ba2\u9605LWN.net\u3002\nGNU Autoconf\uff0c\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6784\u5efa\u5de5\u5177\uff0c\u5728\u4e0e\u5404\u79cdUNIX\u7684\u517c\u5bb9\u6027\u65b9\u9762\u5927\u653e\u5f02\u5f69\uff0c\u81ea2012\u5e74\u4e0a\u4e00\u6b21\u53d1\u5e03\u4ee5\u6765\uff0c\u5b83\u5df2\u7ecf\u79ef\u7d2f\u4e86\u5f88\u591a\u6539\u8fdb-\u8fd8\u6709\u4e00\u4e9b\u8865\u4e01\u6b63\u5728\u7b49\u5f85\u5ba1\u67e5\u3002\u867d\u7136\u8bb8\u591a\u9879\u76ee\u5df2\u7ecf\u5207\u6362\u5230\u5176\u4ed6\u6784\u5efa\u7cfb\u7edf\uff0c\u4f46\u5bf9Autoconf\u7684\u5174\u8da3\u4f9d\u7136\u5b58\u5728\u3002\u73b0\u5728\uff0c\u4e00\u4e2a\u5c0f\u56e2\u961f(\u514d\u8d23\u58f0\u660e\uff1a\u5305\u62ec\u6211\u5728\u5185)\u6b63\u5728\u66f4\u65b0\u5b83\uff0c\u901a\u8fc7\u4e00\u4e9b\u5ef6\u8fdf\u7684\u7ef4\u62a4\u548c\u4ee3\u7801\u5ba1\u67e5\u6765\u5de5\u4f5c\u3002\u53ef\u6d4b\u8bd5\u7684\u6d4b\u8bd5\u7248\u73b0\u5df2\u53d1\u5e03", "note_en": "The following subscription-only content has been made available to you by an LWN subscriber. Thousands of subscribers depend on LWN for the best news from the Linux and free software communities. If you enjoy this article, please consider accepting the trial offer on the right. Thank youfor visiting LWN.net!\n Try LWN for free for 1 month: no payment or credit card required.  Activate your trial subscription now and see why thousands of readers subscribe to LWN.net.\n GNU  Autoconf, awidely used build tool that shines at compatibility with avariety of Unixes, has accumulated many improvements since its last releasein\u00a02012 \u2014 and there are patches awaiting review. While many projects have switched toother build systems, interest in Autoconf remains. Now, a small team(disclaimer: including me) is rejuvenating it, working through somedeferred maintenance and code review. A  testablebeta is now out", "posttime": "2020-10-24 07:26:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d3b\u529b,rejuvenating,lwn", "title": "\u6062\u590d\u6d3b\u529b\u81ea\u52a8\u4f1a\u8bae", "title_en": "Rejuvenating Autoconf", "transed": 1, "url": "https://lwn.net/SubscriberLink/834682/a90b9cdbc37077f4/", "via": "", "real_tags": ["\u6d3b\u529b", "lwn"]}, {"category": "", "categoryclass": "", "imagename": "f41b5e323cb8e0d2e3a5fa475f497d18.jpeg", "infoid": 1030808, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Youtube-dl\u662f\u4e00\u4e2a\u7528\u4e8e\u4ece\u4e92\u8054\u7f51\u4e0b\u8f7d\u89c6\u9891\u7684\u5f00\u6e90\u5b9e\u7528\u7a0b\u5e8f\u3002\u5b83\u6700\u521d\u53ea\u662f\u4e00\u4e2a\u4e0b\u8f7dYouTube\u89c6\u9891\u7684\u7b80\u5355\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u4f46\u540e\u6765\u53d1\u5c55\u5230\u652f\u6301\u5404\u79cd\u5404\u6837\u7684\u89c6\u9891\u7f51\u7ad9\u3002\n\u4eca\u5929\uff0c\u6211\u4eec\u6000\u7740\u6c89\u91cd\u7684\u5fc3\u60c5\u62a5\u544a\uff0c\u7f8e\u56fd\u5531\u7247\u4e1a\u534f\u4f1a(RIAA)\u5df2\u5411GitHub\u53d1\u51faDMCA\u8bf7\u6c42\uff0c\u8981\u6c42\u62c6\u9664youtube-dl\u5b58\u50a8\u5e93\u53ca\u5176\u5206\u652f\uff1a\n\u8fd9\u4e00\u8bf7\u6c42\u662f\u5728YouTube-dl\u4fb5\u72afRIAA\u6210\u5458\u516c\u53f8\u62e5\u6709\u7684\u89c6\u542c\u5185\u5bb9\u7248\u6743\u7684\u501f\u53e3\u4e0b\u63d0\u51fa\u7684\u3002\u5728\u6b64\u4e4b\u524d\uff0cRIAA\u6700\u8fd1\u5411Twitch\u53d1\u51fa\u4e86DMCA\u8bf7\u6c42\uff0c\u8981\u6c42\u5bf9RIAA\u8ba4\u4e3a\u4fb5\u72af\u7248\u6743\u7684\u6d41\u5a92\u4f53\u7528\u6237\u91c7\u53d6\u884c\u52a8\u3002\n\u8fd9\u4e00\u8bf7\u6c42\u7684\u4e00\u4e2a\u4e25\u91cd\u95ee\u9898\u662f\u8f7b\u8511\u548c\u76f4\u63a5\u6709\u5bb3\u7684\u8bed\u8a00\uff0c\u5b83\u5c06youtube-dl\u6846\u5b9a\u4e3a\u56fa\u6709\u7684\u4fb5\u72af\u7248\u6743\u7684\u884c\u4e3a\uff1a\n\u6b64\u6e90\u4ee3\u7801\u7684\u660e\u786e\u76ee\u7684\u662f(I)\u89c4\u907f\u6388\u6743\u6d41\u5a92\u4f53\u670d\u52a1(\u5982YouTube)\u4f7f\u7528\u7684\u6280\u672f\u4fdd\u62a4\u63aa\u65bd\uff0c\u4ee5\u53ca(Ii)\u672a\u7ecf\u6388\u6743\u590d\u5236\u548c\u5206\u53d1\u6211\u4eec\u7684\u6210\u5458\u516c\u53f8\u62e5\u6709\u7684\u97f3\u4e50\u89c6\u9891\u548c\u5f55\u97f3\u7528\u4e8e\u6b64\u7c7b\u7528\u9014\u3002\u6211\u4eec\u6ce8\u610f\u5230\u8be5\u6e90\u4ee3\u7801\u5728GitHub\u4e0a\u88ab\u63cf\u8ff0\u4e3a\u201c\u4e00\u4e2a\u4eceYouTube.com\u548c\u5176\u4ed6\u51e0\u4e2a\u7f51\u7ad9\u4e0b\u8f7d\u89c6\u9891\u7684\u547d\u4ee4\u884c\u7a0b\u5e8f\u201d\u3002\n\u9996\u5148\uff0c(I)\u548c(Ii)\u4e2d\u5b9a\u4e49\u7684\u201c\u660e\u786e\u76ee\u7684\u201d\u5ffd\u7565\u4e86youtube-dl\u7684\u8d77\u6e90\u548c\u5b9e\u9645\u4f7f\u7528\u6848\u4f8b\uff0c\u5c06\u5176\u63cf\u8ff0\u4e3a\u4e25\u683c\u8bbe\u8ba1\u7528\u6765\u653b\u51fb\u97f3\u4e50\u884c\u4e1a\u7684\u8f6f\u4ef6\u3002\nYouTube-dl\u6700\u521d\u662f\u91cc\u5361\u591a\u00b7\u52a0\u897f\u4e9a\u00b7\u5188\u8428\u96f7\u65af(Ricardo Garcia Gonzalez)\u7684\u5ba0\u513f\u9879\u76ee\uff0c\u65e9\u57282006\u5e74\uff0c\u5c31\u901a\u8fc7\u5df2\u6545\u7684\u4e54\u00b7\u5df4\u5c14(Joe Barr)\u5728Linux.com\u4e0a\u7684\u4e00\u7bc7\u65b0\u95fb\u6545\u4e8b\u800c\u58f0\u540d\u9e4a\u8d77\u3002\u5b83\u65e9\u4e8e\u8bb8\u591a\u201c\u6388\u6743\u201d\u6e20\u9053\uff0c\u6bd4\u5982Vevo(2009)\u6216YouTube Music(2015)\u7b49\u5206\u9500\u7f51\u7edc\u3002Youtube-dl\u4ece\u6765\u6ca1\u6709\u6253\u7b97\u7ed5\u8fc7\u8fd9\u4e9b\uff0c\u56e0\u4e3a\u5728\u5b83\u7b2c\u4e00\u6b21\u53d1\u5e03\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u9891\u9053\u5e76\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u8fd8\u5904\u4e8e\u8d77\u6b65\u9636\u6bb5\u3002\n\u58f0\u79f0\u89c4\u907f\u6280\u672f\u4fdd\u62a4\u63aa\u65bd\u662fyoutube-dl\u7684\u4e00\u4e2a\u660e\u786e\u76ee\u7684\uff0c\u8fd9\u53ea\u8868\u660e\u4e86raa\u65b9\u9762\u7f3a\u4e4f\u5173\u6ce8\uff0c\u6216\u8005\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5bf9\u6b64\u66f4\u4e0d\u5173\u5fc3\u3002\n(Ii)\u672a\u7ecf\u6388\u6743\u590d\u5236\u548c\u5206\u53d1\u6211\u4eec\u4f1a\u5458\u516c\u53f8\u62e5\u6709\u7684\u97f3\u4e50\u5f55\u50cf\u5e26\u548c\u5f55\u97f3\u5236\u54c1\u4ee5\u4f9b\u4f7f\u7528\u3002\n\u5c3d\u7ba1youtube-dl\u786e\u5b9e\u53ef\u4ee5\u7528\u6765\u590d\u5236\u97f3\u4e50\u89c6\u9891\u548c\u5f55\u97f3\uff0c\u4f46\u5b83\u672c\u8eab\u4e0d\u80fd\u4ee5\u4efb\u4f55\u65b9\u5f0f\u8fdb\u884c\u5206\u53d1\u3002YouTube-DL\u53ea\u80fd\u4e0b\u8f7d\u8fd9\u4e9b\u8bb0\u5f55\uff0c\u4f46\u6ca1\u6709\u7528\u4e8e\u8fdb\u4e00\u6b65\u5206\u53d1\u8fd9\u4e9b\u8bb0\u5f55\u7684\u5185\u7f6e\u529f\u80fd\u3002\n\u8fd9\u53ef\u80fd\u786e\u5b9e\u4f1a\u5bf9RIAA\u6210\u5458\u9020\u6210\u6f5c\u5728\u7684\u4f24\u5bb3\uff0c\u4f46\u8fd9\u91cc\u7684\u758f\u5ffd\u4e4b\u5904\u5728\u4e8e-\u518d\u8bf4\u4e00\u6b21-\u8fd9\u4e0d\u662fyoutube-dl\u7684\u660e\u786e\u76ee\u7684\u3002\u8fd9\u4e2a\u95ee\u9898\u6e90\u4e8eyoutube-dl\u4e0d\u5206\u9752\u7ea2\u7682\u767d\u5730\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u7684\u7f51\u7ad9\u4e0b\u8f7d\u4ec0\u4e48\u7c7b\u578b\u7684\u516c\u5171\u89c6\u9891\u3002\n\u5173\u952e\u7684\u5047\u8bbe\u662f\uff0c\u5982\u679c\u4e00\u6bb5\u89c6\u9891\u88ab\u516c\u5f00\uff0c\u90a3\u4e48\u4e0b\u8f7d\u4f9b\u4e2a\u4eba\u4f7f\u7528\u5e94\u8be5\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\u8fd9\u5728\u535a\u5ba2\u3001\u64ad\u5ba2\u548c\u4e00\u822c\u5728\u4e92\u8054\u7f51\u4e0a\u5171\u4eab\u7684\u539f\u521b\u5185\u5bb9\u7684\u60c5\u51b5\u4e0b\u90fd\u5f88\u6709\u6548\u3002\u56e0\u6b64\uff0c\u4f7f\u7528youtube-dl(\u6f5c\u5728\u5730)\u590d\u5236RIAA\u6210\u5458\u516c\u53f8\u62e5\u6709\u7684\u97f3\u4e50\u89c6\u9891\u6216\u5f55\u97f3\u7684\u80fd\u529b\u4e0d\u662f\u5185\u7f6e\u529f\u80fd\uff0c\u800c\u662f\u610f\u60f3\u4e0d\u5230\u7684\u526f\u4f5c\u7528\u3002\n\u867d\u7136RIAA\u6709\u6743\u5173\u6ce8\u8f6f\u4ef6\u7684\u8fd9\u4e00\u65b9\u9762\uff0c\u4f46\u5c06\u5176\u63cf\u8ff0\u4e3a\u4e00\u4e2a\u5185\u6db5\u7279\u6027\u662f\u4e0d\u8bda\u5b9e\u7684\u3002\u5728\u9881\u53d1\u8fd9\u4efddmca\u7684\u8fc7\u7a0b\u4e2d\uff0criaa\u5207\u65ad\u4e86youtube-dl\u7684\u9884\u671f\u826f\u6027\u4f7f\u7528\u3002\n\u6211\u4eec\u53ea\u80fd\u5e0c\u671bRIAA\u548cYouTube-dl\u56e2\u961f\u80fd\u591f\u5c3d\u5feb\u8fbe\u6210\u5b89\u6392\uff0c\u8ba9\u7528\u6237\u80fd\u591f\u7ee7\u7eed\u975e\u6076\u610f\u4f7f\u7528\u8be5\u8f6f\u4ef6\u3002\n\u968f\u7740GitHub\u5b58\u50a8\u5e93\u7684\u5173\u95ed\uff0c\u5f00\u53d1\u5df2\u7ecf\u6682\u505c\u3002\u76ee\u524d\uff0c\u5982\u679c\u60a8\u9700\u8981\u5b89\u88c5youtube-dl\uff0c\u5728PyPI\u4e0a\u4ecd\u7136\u53ef\u4ee5\u627e\u5230\u6700\u65b0\u7248\u672c\u7684\u526f\u672c\u3002", "note_en": "youtube-dl is an open-source utility for downloading videos from the internet. It started off as a simple command line tool for downloading YouTube videos, but has since grown to support a wide assortment of video sites.\n Today, it is with a heavy heart that we report that the  Recording Industry Association of America ( RIAA) has issued a  DMCA request to  GitHub, to have the  youtube-dl repository and its forks taken down:\n  This request comes under the pretense that  youtube-dl infringes the copyright of audiovisual content owned by  RIAA member companies. It also follows the  RIAA\u2019s recent  issuing of  DMCA requests to  Twitch demanding action against streamers who the  RIAA believe to be infringing copyright.\n  A serious issue with this request, is the dismissive and outright harmful language which frames  youtube-dl as  inherently  in violation of copyright:\n The clear purpose of this source code is to (i) circumvent the technological protection measures used by authorized streaming services such as YouTube, and (ii) reproduce and distribute music videos and sound recordings owned by our member companies without authorization for such use. We note that the source code is described on GitHub as \u201ca command-line program to download videos from YouTube.com and a few more sites.\u201d\n To begin with, the defined \u201c clear  purposes\u201d in (i) and (ii) ignore the origins and actual use cases for  youtube-dl, portraying it as software strictly designed to attack the music industry.\n  youtube-dl started off as a pet-project of  Ricardo Garcia Gonzalez all the way  back in 2006, coming into prominence through a  news story on Linux.com by the late Joe Barr. It long predates a lot of these \u201c authorized\u201d channels, like distribution networks such as   Vevo (2009) or   YouTube  Music (2015).  youtube-dl was never  intended to circumvent these, because at the time that it was first released, these channels did not exist or were in inception.\n Claiming that  circumvention of technological protection measures is a clear purpose of  youtube-dl, only demonstrates a lack of attention, or worse yet care, on the  RIAA\u2019s part.\n (ii) reproduction and distribution of music videos and sound recordings owned by our member companies without authorization for such use.\n Although it is true that  youtube-dl can be used to reproduce music videos and sound recordings, on its own it is not capable of distribution by any means.  youtube-dl can only download these recordings, but has no built-in feature for the purposes of further distributing such recordings.\n This might indeed present a potential harm to  RIAA members, but the oversight here is that -again- this is not a   clear purpose of  youtube-dl. The issue arises from  youtube-dl being indiscriminate in what kinds of   public videos it can download from a given website.\n The key assumption is that if a video is made  public, then there should not be any problem in downloading it for personal use. And this works very well in the case of blogs, podcasts and generally original content shared on the internet. Thus, the ability to use  youtube-dl for  (potentially)  reproducing music videos or sound recordings owned by  RIAA member companies is not a built-in feature, but an unintended side-effect.\n While the  RIAA have the right to be concerned by this aspect of the software, it is dishonest to portray this as an intensional feature. And in the process of issuing this DMCA, the  RIAA are cutting off the   intended benign use of  youtube-dl.\n  We can only hope the  RIAA and the  youtube-dl team can reach an arrangement as soon as possible, for users to be able to continue non-malicious usage of the software.\n With the GitHub repository down, development has been suspended. For the time being, if you need to install  youtube-dl, a copy of the latest release is still available on  PyPI.", "posttime": "2020-10-24 07:26:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "youtube,dl,language", "title": "RIAA\u9488\u5bf9YouTube-dl\u7684DMCA\u4e2d\u7684\u6709\u5bb3\u8bed\u8a00", "title_en": "Harmful language in the RIAA's DMCA against YouTube-dl", "transed": 1, "url": "https://datahorde.org/?p=1654", "via": "", "real_tags": ["youtube", "dl", "language"]}, {"category": "", "categoryclass": "", "imagename": "6cb1fe1b63513636c5597c5515c40750.png", "infoid": 1030807, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TwitGrid\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5bbd\u9875\u5e03\u5c40\uff0c\u7528\u4e8e\u9605\u8bfbTwitter\u8ba2\u9605\u6e90\uff0c\u5b83\u53ea\u663e\u793a\u4f60\u5173\u5fc3\u7684\u7528\u6237\u7684Adense\uff0c\u5373\u65f6\u6982\u89c8\u6700\u65b0\u5e16\u5b50\u3002\u5b83\u4e0d\u4f1a\u5c06\u591a\u4e2a\u8ba2\u9605\u6e90\u6df7\u5408\u5728\u4e00\u4e2a\u65e0\u9650\u6eda\u52a8\u7684\u6df7\u4e71\u4e2d\u3002\nConst handlesTopInterests=&#39\uff1bvilimpoc checklyhq dspillere GreatDismal Tim_Nolet&39\uff1b\uff1bconst handlesFunStuff=&#39\uff1bbvg_Kampagne Fryup\u8b66\u5bdf\u5c40\u97e9\u56fd\u65c5\u6e38Thingiverse NI_News\u725b\u6392_UM ConanOBrien taylorswft13 jimmykimmel&#39\uff1b\n\u5411\u4e0a/\u5411\u4e0b\u7ffb\u9875\u5c06\u5e73\u6ed1\u6eda\u52a8\u6574\u4e2a\u89c6\u53e3\uff0c\u6355\u6349\u5230\u4e0b\u4e00\u7ec4\u63d0\u8981\u3002\u9f20\u6807\u6eda\u8f6e\u5411\u4e0a/\u5411\u4e0b\u6eda\u52a8\u5404\u4e2a\u7528\u6237\u6458\u8981\u3002\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u4e3b\u9875/\u7ed3\u5c3e\u6eda\u52a8\u5230\u9876\u90e8/\u5e95\u90e8\u3002\n\u56e0\u4e3a\u5927\u591a\u6570\u4eba\u90fd\u6709\u53ef\u7528\u7684\u957f\u671f\u8bb0\u5fc6\u529b\uff0c\u6240\u4ee5\u4f60\u4f1a\u77e5\u9053\u4f60\u8bfb\u5230\u4e86\u4ec0\u4e48\uff0c\u800c\u4e0d\u662f\u50cfRSS\u90a3\u6837(\u867d\u7136\u6ca1\u6709\u90a3\u4e48\u81ea\u52a8)\u3002\n\u4e0d\u4f1a\u6709\u4e00\u4e2a\u7b97\u6cd5\u5c06\u4f60\u60f3\u770b\u7684\u4e1c\u897f\u548c\u4f60\u5b9e\u9645\u770b\u5230\u7684\u4e1c\u897f\u8054\u7cfb\u8d77\u6765\uff0c\u4e5f\u4e0d\u4f1a\u8ba9\u5b83\u8ba4\u4e3a\u4f60\u53ef\u80fd\u611f\u5174\u8da3\u7684\u4e1c\u897f\u6d6e\u51fa\u6c34\u9762\u3002", "note_en": "TwitGrid is a simple, broadsheet layout for reading Twitter feeds that shows adense, instant overview of the latest posts from only the users you care about.It doesn&#39;t mix multiple feeds up into an infinite-scrolling jumble.\n  const handlesTopInterests = &#39;vilimpoc checklyhq dspillere GreatDismal tim_nolet&#39;;const handlesFunStuff = &#39;BVG_Kampagne fryuppolice KoreanTravel thingiverse NI_News steak_umm ConanOBrien taylorswift13 jimmykimmel&#39;;\n   Page Up / Down will smooth scroll the whole viewport, snapping to the next set of feeds.  Mouse Wheel Up / Down scrolls the individual user feeds.  Home / End scrolls to the top / bottom, as expected.\n      Because most people have usable long-term memory, you&#39;ll know what you have readand haven&#39;t, somewhat in the vein of RSS (though less automatic).\n There will not be an algorithm intermediating what you want to see and what youactually see or surfacing things it thinks you might be interested in.", "posttime": "2020-10-24 07:26:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7528\u4e8e,simple", "title": "TwitGrid-\u7528\u4e8e\u9605\u8bfbTwitter\u63d0\u8981\u7684\u7b80\u5355\u7684\u5bbd\u9875\u5e03\u5c40", "title_en": "TwitGrid \u2013 A simple, broadsheet layout for reading Twitter feeds", "transed": 1, "url": "https://github.com/nuket/TwitGrid", "via": "", "real_tags": ["\u7528\u4e8e", "simple"]}, {"category": "", "categoryclass": "", "imagename": "2a5dca92492491d6f8d451bd87ca4155.jpg", "infoid": 1030806, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60f3\u8c61\u4e00\u4e0b\uff0c\u5728\u4e00\u573a\u6fc0\u70c8\u7684\u53f2\u524d\u7bee\u7403\u6bd4\u8d5b\u4e2d\uff0c\u76ae\u4eba\u961f\u548c\u6bdb\u76ae\u961f\u4f7f\u7528\u4e00\u4e2a\u5145\u6c14\u7684\u5de8\u5927\u7403\u56ca\u6765\u4f20\u7403\u3002\u4e00\u540d\u73a9\u5bb6\u5361\u4f4f\u4e86\u624b\u6307\uff0c\u6ce8\u610f\u5230\u624b\u6307\u6307\u5411\u4e00\u4fa7\u3002\u672c\u80fd\u5730\uff0c\u4ed6\u731b\u5730\u4f7f\u52b2\u62c9\u4e86\u4e00\u4e0b\uff0c\u6210\u529f\u5730\u91cd\u65b0\u8c03\u6574\u4e86\u9519\u4f4d\u3002\u4e0b\u5468\uff0c\u4e00\u540d\u961f\u53cb\u4e5f\u4f1a\u53d7\u5230\u540c\u6837\u7684\u4f24\u5bb3\uff0c\u800c\u6709\u7ecf\u9a8c\u7684\u961f\u53cb\u4e5f\u4f1a\u8fdb\u884c\u540c\u6837\u7684\u6062\u590d\u6027\u52a8\u4f5c\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4ed6\u4e0d\u65ad\u5730\u4ece\u7ecf\u9a8c\u4e2d\u5b66\u4e60\uff0c\u5e76\u83b7\u5f97\u4e86\u5f53\u5730\u4eba\u7684\u8d5e\u8a89\uff0c\u88ab\u8a89\u4e3aGo-\u200bto One Setter\u3002\u8fd9\u4e9b\u6280\u80fd\u7136\u540e\u4f1a\u4f20\u7ed9\u4ed6\u7684\u5b69\u5b50\u3002\u8fd9\u4e9b\u63a5\u9aa8\u5e08\uff0c\u8fde\u540c\u8428\u6ee1\u3001\u52a9\u4ea7\u58eb\u548c\u8349\u836f\u533b\u751f\uff0c\u5728\u8bb8\u591a\u6587\u5316\u4e2d\u53d1\u5c55\u8d77\u6765\uff0c\u5305\u62ec\u53e4\u57c3\u53ca\u548c\u65e9\u671f\u590f\u5a01\u5937\u3002\u8003\u53e4\u5b66\u5bb6\u53d1\u73b0\u4e86\u65ad\u81c2\u7684\u57c3\u53ca\u6728\u4e43\u4f0a\uff0c\u8fd9\u4e9b\u6728\u4e43\u4f0a\u9996\u5148\u7528\u6728\u6761\u6811\u76ae\u5939\u677f\u56fa\u5b9a\uff0c\u7136\u540e\u7528\u4e9a\u9ebb\u5e03\u5305\u88f9\u3002\u4e00\u4efd\u7ea62900\u5e74\u7684\u7eb8\u838e\u8349\u7eb8\u8bb0\u8f7d\uff0c\u8fd9\u79cd\u5939\u677f\u5e94\u8be5\u7528\u77f3\u818f\u548c\u8702\u871c\u52a0\u56fa\u3002\u5927\u7ea6500\u5e74\uff0c\u5370\u5ea6\u7684Susruta\u548c\u5e0c\u814a\u7684Hippocrates\u63cf\u8ff0\u4e86\u7528\u6728\u6761\u3001\u7af9\u6761\u6216\u94c5\u7247\u5305\u88f9\u7740\u7ef3\u5b50\u6216\u4e9a\u9ebb\u6761\u6765\u56fa\u5b9a\u9aa8\u6298\uff0c\u4e9a\u9ebb\u6761\u7528\u732a\u6cb9\u3001\u8721\u3001\u6ca5\u9752\u6216\u86cb\u6e05\u786c\u5316\u3002\u6d78\u900f\u8840\u6db2\u5e76\u4efb\u5176\u786c\u5316\u7684\u7ef7\u5e26\u4e5f\u8db3\u591f\u4e86\u3002\n\u5927\u7ea6250\u5e74\u5de6\u53f3\uff0c\u57c3\u53ca\u4e9a\u5386\u5c71\u5927\u5e02\u6210\u4e3a\u6587\u660e\u7684\u79d1\u5b66\u77e5\u8bc6\u4e2d\u5fc3\uff0c\u5b66\u8005\u4eec\u4ece\u5f88\u8fdc\u7684\u5730\u65b9\u8d76\u6765\u5b66\u4e60\u3002\u4e9a\u5386\u5c71\u5927\u4eba\u7cbe\u660e\u5730\u7ef4\u62a4\u4e86\u4ed6\u4eec\u4f18\u8d8a\u7684\u77e5\u8bc6\u57fa\u7840\uff0c\u5728\u6e38\u5ba2\u8fdb\u5165\u57ce\u5e02\u65f6\u6ca1\u6536\u4e86\u4ed6\u4eec\u5b66\u4e60\u7684\u4f5c\u54c1\u3002\u5b98\u5458\u4eec\u8ba9\u6284\u5199\u5458\u590d\u5236\u5377\u8f74\uff0c\u5c06\u539f\u4ef6\u653e\u5728\u5f53\u5730\u56fe\u4e66\u9986\uff0c\u5e76\u5728\u65c5\u884c\u8005\u79bb\u5f00\u65f6\u5411\u4ed6\u4eec\u63d0\u4f9b\u539f\u4ef6\u7684\u526f\u672c\u3002\u4e9a\u5386\u5c71\u5927\u4eba\u8fdb\u884c\u4e86\u7b2c\u4e00\u6b21\u7cfb\u7edf\u7684\u4eba\u4f53\u89e3\u5256\u3002\u53c2\u89c2\u8005\u8fd8\u53ef\u4ee5\u60ca\u53f9\u4e8e\u4e00\u5177\u7531\u7ec6\u7ebf\u56fa\u5b9a\u5e76\u5782\u76f4\u60ac\u6302\u7684\u4eba\u7c7b\u9aa8\u9abc\uff0c\u8fd9\u662f\u4eca\u5929\u4f3c\u4e4e\u975e\u5e38\u5e38\u89c1\u7684\u53e6\u4e00\u4ef6\u4e8b\u3002\n\u4ece\u53e4\u4ee3\u5f00\u59cb\uff0c\u6218\u6597\u521b\u4f24\u5c31\u5728\u77ed\u65f6\u95f4\u5185\u4e3a\u533b\u751f\u63d0\u4f9b\u4e86\u5927\u91cf\u5065\u5eb7\u7537\u6027\u7684\u4f24\u5bb3\u3002\u4e00\u6b21\u53c8\u4e00\u6b21\uff0c\u8fd9\u79cd\u96c6\u4e2d\u7684\u7ecf\u9a8c\u6781\u5927\u5730\u589e\u52a0\u4e86\u5bf9\u4f24\u53e3\u6108\u5408\u7684\u7406\u89e3\u3002\u8fd9\u5c31\u662f\u5e0c\u814a\u533b\u751f\u52a0\u4f26\u5728\u5927\u7ea6150\u5e74\u4e2d\u83b7\u5f97\u7684\u667a\u6167\u3002\u4ed6\u5728\u7f57\u9a6c\u5de5\u4f5c\uff0c\u662f\u89d2\u6597\u58eb\u7684\u7b49\u4ef7\u7269\uff0c\u76f8\u5f53\u4e8e\u73b0\u4ee3\u7684\u200b\u56e2\u961f\u533b\u751f\u3002\u56e0\u6b64\uff0c\u52a0\u4f26\u6709\u673a\u4f1a\u5904\u7406\u8840\u8ff9\uff0c\u4ed6\u5bf9\u4f24\u53e3\u6108\u5408\u548c\u4f24\u53e3\u7ba1\u7406\u63d0\u51fa\u4e86\u8bb8\u591a\u539f\u521b\u6027\u7684\u89c2\u5bdf\u610f\u89c1\uff0c\u5176\u4e2d\u4e00\u4e9b\u6700\u7ec8\u88ab\u8bc1\u660e\u662f\u660e\u663e\u9519\u8bef\u7684\u3002(\u4f8b\u5982\uff0c\u4ed6\u8ba4\u4e3a\u9aa8\u5934\u662f\u7531\u7cbe\u5b50\u5236\u6210\u7684\u3002)\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4ed6\u7684\u8457\u4f5c\u4ecd\u88ab\u89c6\u4e3a\u6559\u6761\uff0c\u5e76\u5728\u6b27\u6d32\u76db\u884c\u4e86\u4e00\u5343\u591a\u5e74--\u8fd9\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u533b\u5b66\u8fdb\u6b65\u7684\u9ed1\u6697\u65f6\u4ee3(\u200b)\u3002\n\u7136\u540e\u542f\u8499\u8fd0\u52a8\u5230\u6765\u4e86\u3002\u5b89\u5e03\u7f57\u4f0a\u65af\u00b7\u5e15\u96f7(Ambroise Par\u00e9)\u662f\u4e00\u4f4d16\u4e16\u7eaa\u7684\u5185\u79d1\u533b\u751f\uff0c\u4e0e\u6587\u827a\u590d\u5174\u65f6\u671f\u7684\u827a\u672f\u5bb6\u548c\u89e3\u5256\u5b66\u5bb6\u540c\u65f6\u4ee3\uff0c\u66fe\u4e3a\u51e0\u4f4d\u6cd5\u56fd\u56fd\u738b\u548c\u4ed6\u4eec\u7684\u56db\u9762\u695a\u6b4c\u7684\u58eb\u5175\u670d\u52a1\u3002\u5f53\u65f6\uff0c\u5916\u79d1\u533b\u751f\u6b63\u5728\u4f7f\u7528\u7ea2\u8272\u7684\u200b\u70ed\u706b\u94b3\u6216\u6cb8\u6cb9\u6765\u5c01\u95ed\u622a\u80a2\u4f24\u53e3\u7684\u539f\u59cb\u3001\u6d41\u8840\u7684\u8089\u3002\u4efb\u4f55\u4e00\u79cd\u6cbb\u7597\u90fd\u975e\u5e38\u75db\u82e6\uff0c\u800c\u4e14\u5728\u6b62\u8840\u6216\u9884\u9632\u611f\u67d3\u65b9\u9762\u90fd\u4e0d\u662f\u7279\u522b\u6709\u6548\u3002\u6709\u4e00\u5929\uff0c\u7531\u4e8e\u6ca1\u6709\u70ed\u6cb9\uff0c\u5e15\u96f7\u7528\u5e3d\u5c3e\u4e0a\u7684\u7ebf\u628a\u51fa\u8840\u7684\u8840\u7ba1\u672b\u7aef\u7ed1\u8d77\u6765\uff0c\u7136\u540e\u7528\u901a\u5e38\u7684\u677e\u8282\u6cb9\u548c\u7eb1\u5e03\u5305\u624e\u4f24\u53e3\u3002\u968f\u4e4b\u800c\u6765\u7684\u662f\u8fc5\u901f\u7684\u6108\u5408\uff0c\u4ece\u90a3\u4ee5\u540e\uff0c\u58eb\u5175\u4eec\u4e00\u76f4\u5bf9\u6218\u573a\u4e0a\u7684\u5fc5\u8981\u6027\u5e26\u6765\u7684\u624b\u672f\u6539\u8fdb\u5fc3\u5b58\u611f\u6fc0\u3002\u5e15\u96f7\u88ab\u6070\u5982\u5176\u5206\u5730\u79f0\u4e3a\u73b0\u4ee3\u5916\u79d1\u4e4b\u7236\u3002\n\u5728\u6587\u827a\u590d\u5174\u65f6\u671f\u63a5\u53d7\u5927\u5b66\u57f9\u8bad\u7684\u533b\u751f\u8ba4\u4e3a\u5916\u79d1\u624b\u672f\u4f4e\u4e8e\u4ed6\u4eec\u3002\u4ed6\u4eec\u5c06\u4e3b\u8981\u5305\u62ec\u653e\u8840\u548c\u622a\u80a2\u7684\u200b\u624b\u672f\u964d\u7ea7\u5230\u7406\u53d1\u5e08\u624b\u4e2d\uff1b\u5c3d\u7ba1\u4ed6\u4eec\u53ea\u662f\u5b66\u5f92\u57f9\u8bad\uff0c\u4f46\u4ed6\u4eec\u62e5\u6709\u6700\u950b\u5229\u7684\u5200\u5b50\u3002\u5e15\u96f7\u662f\u8fd9\u4e2a\u7406\u53d1\u5e08-\u200b\u5916\u79d1\u533b\u751f\u534f\u4f1a\u7684\u6210\u5458\u3002\u8fd9\u610f\u5473\u7740\u76f4\u5230\u5341\u516d\u4e16\u7eaa\u4e2d\u53f6(\u200b)\uff0c\u7406\u8bba\u4e0a\u4e00\u4e2a\u4eba\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u533b\u751f\u5750\u7740\u7684\u65f6\u5019\u4e00\u6b21\u522e\u80e1\u5b50\u548c\u622a\u80a2\u3002\u6b64\u540e\uff0c\u5916\u79d1\u533b\u751f\u4ece\u7406\u53d1\u5e08\u6269\u5c55\u5230\u5355\u72ec\u7684\u7279\u8bb8\u533b\u751f\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4ed6\u4eec\u7684\u5de5\u4f5c\u8fd8\u662f\u88ab\u8d2c\u4f4e\u4e86\u3002\n\u7406\u53d1\u5e08-\u200b\u5916\u79d1\u533b\u751f\u65f6\u4ee3\u7684\u4e24\u4e2a\u9057\u7559\u7269\u4ecd\u7136\u5b58\u5728\u3002Red-\u200b\u548c-\u200bWhite-\u200b\u6761\u7eb9\u7406\u53d1\u6746\u4ee3\u8868\u7406\u53d1\u5e08-\u200b\u5916\u79d1\u533b\u751f\u7684\u8840\u6db2\u548c\u7ef7\u5e26\uff1b\u5728\u82f1\u56fd\uff0c\u5916\u79d1\u533b\u751f\u88ab\u79f0\u4e3a\u5148\u751f\uff0c\u800c\u5185\u79d1\u533b\u751f\u88ab\u79f0\u4e3a\u533b\u751f\uff0c\u5c3d\u7ba1\u5728\u6700\u8fd1\u51e0\u4e2a\u4e16\u7eaa\uff0c\u4ed6\u4eec\u63a5\u53d7\u4e86\u540c\u6837\u7684\u6838\u5fc3\uff0c\u57fa\u4e8e\u5927\u5b66\u7684\u200b\u533b\u5b66\u6559\u80b2\u3002\u82f1\u56fd\u5916\u79d1\u533b\u751f\u4f3c\u4e4e\u5bf9\u8fd9\u4e00\u533a\u522b\u611f\u5230\u81ea\u8c6a\uff0c\u5e76\u559c\u6b22\u5fae\u5999\u5730\u70ab\u8000\u81ea\u5df1\u4e30\u5bcc\u591a\u5f69\u7684\u5386\u53f2\u3002\u5728\u4e16\u754c\u5404\u5730\uff0c\u5176\u4ed6\u533b\u5b66\u4e13\u5bb6\u6709\u65f6\u8ba4\u4e3a\u5916\u79d1\u533b\u751f\u662f\u51b2\u52a8\u7684\u3002\u6211\u4eec\u5916\u79d1\u533b\u751f\u5b81\u613f\u8ba4\u4e3a\u81ea\u5df1\u662f\u679c\u65ad\u7684\u3002\u6279\u8bc4\u8005\u751a\u81f3\u5c06\u5916\u79d1\u533b\u751f\u63cf\u8ff0\u4e3a\u5bf9\u6216\u9519\uff0c\u4f46\u4ece\u6765\u6ca1\u6709\u6000\u7591\u8fc7\u3002\n\u201c\u6574\u5f62\u5916\u79d1\u201d\u8fd9\u4e2a\u8bcd\u662f\u7531\u6cd5\u56fd\u5185\u79d1\u533b\u751f\u5c3c\u53e4\u62c9\u65af\u00b7\u5b89\u5fb7\u91cc\u57281741\u5e74\u9996\u521b\u7684\uff0c\u4ed6\u5199\u4e86\u7b2c\u4e00\u672c\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u4e66\u201c\u6574\u5f62\u5916\u79d1\u201d(Orthop\u00e9die)\u3002Ortho-\u200b\u5728\u5e0c\u814a\u8bed\u4e2d\u7684\u610f\u601d\u662f\u201c\u76f4\u7684\u201d\u6216\u201c\u6b63\u786e\u7684\u201d\uff0c\u5982\u5728\u6b63\u7edf(\u6b63\u786e\u7684\u4fe1\u4ef0)\u548c\u6b63\u7578(\u76f4\u9f7f)\u4e2d\uff1b\u4ee5\u53cap\u00e9die\u830e\u3002\n\u5728\u5b89\u5fb7\u91cc\u548c\u7ef4\u5185\u5c14\u7684\u65f6\u4ee3\uff0c\u5916\u79d1\u533b\u751f\u5e76\u4e0d\u662f\u4e13\u79d1\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\uff0c\u4ed6\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4eba\u90fd\u80fd\u505a\u5f97\u6bd4\u5176\u4ed6\u4eba\u66f4\u597d\u3002\u968f\u7740\u5168\u8eab\u9ebb\u9189\u7684\u53d1\u73b0\u548c\u5df4\u65af\u5fb7\u5173\u4e8e\u7ec6\u83cc\u662f\u611f\u67d3\u6e90\u7684\u63d0\u8bae\u9010\u6e10\u88ab\u63a5\u53d7\uff0c\u8fd9\u79cd\u60c5\u51b5\u572819\u4e16\u7eaa\u53d1\u751f\u4e86\u620f\u5267\u6027\u7684\u53d8\u5316\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u5916\u79d1\u533b\u751f\u6ca1\u6709\u7406\u7531\u5728\u624b\u672f\u524d\u6d17\u624b\uff0c\u800c\u4e14\u901a\u5e38\u4f1a\u5728\u5c06\u624b\u672f\u5668\u68b0\u66f4\u6362\u5230\u5de5\u5177\u5305\u4e4b\u524d\uff0c\u5728\u71d5\u5c3e\u670d\u4e0a\u64e6\u62ed\u624b\u672f\u5668\u68b0\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u5916\u79d1\u533b\u751f\u6ca1\u6709\u7406\u7531\u5728\u624b\u672f\u524d\u6d17\u624b\uff0c\u800c\u4e14\u7ecf\u5e38\u4f1a\u5728\u5916\u5957\u4e0a\u64e6\u62ed\u624b\u672f\u5668\u68b0\u3002\u5230\u4e8619\u4e16\u7eaa\u4e2d\u53f6(\u200b)\uff0c\u5168\u8eab\u9ebb\u9189\u4f7f\u5916\u79d1\u533b\u751f\u80fd\u591f\u66f4\u6709\u6761\u4e0d\u7d0a\u5730\u64cd\u4f5c\uff0c\u6cbb\u7597\u66f4\u590d\u6742\u7684\u95ee\u9898\u3002(\u5728\u6b64\u4e4b\u524d\uff0c\u4eba\u4eec\u975e\u5e38\u770b\u91cd\u901f\u5ea6\uff0c\u6709\u4e00\u6b21\uff0c\u5916\u79d1\u533b\u751f\u52a9\u624b\u9644\u8fd1\u7684\u624b\u6307\u548c\u75c5\u4eba\u7684\u817f\u4e00\u8d77\u8131\u843d\u4e86\u3002)\u3002\n\u8377\u5170\u9646\u519b\u5916\u79d1\u533b\u751f\u5b89\u4e1c\u5c3c\u4e4c\u65af\u00b7\u9a6c\u8482\u68ee(Antonius Mathijsen)\u63d0\u4f9b\u4e8619\u4e16\u7eaa\u4e2d\u671f\u200b19\u4e16\u7eaa\u4e2d\u671f\u7684\u53e6\u4e00\u9879\u7a81\u7834\uff0c\u6781\u5927\u5730\u51cf\u8f7b\u4e86\u7ed9\u65ad\u80a2\u6253\u77f3\u818f\u7684\u8d1f\u62c5\u3002\u4ed6\u628a\u5df4\u9ece\u7c89\u7684\u818f\u836f\u6d82\u5728\u6e7f\u6da6\u7684\u957f\u6761\u7eb1\u5e03\u4e0a\uff0c\u7136\u540e\u628a\u5b83\u4eec\u5377\u8d77\u6765\u3002\u5f53\u4ed6\u9700\u8981\u6253\u77f3\u818f\u65f6\uff0c\u4ed6\u4f1a\u77ed\u6682\u5730\u5728\u6c34\u4e2d\u6d78\u6ce1\u4e00\u5377\uff0c\u4ee5\u6fc0\u6d3b\u5df4\u9ece\u7684\u77f3\u818f\uff0c\u7136\u540e\u7528\u7ef7\u5e26\u591a\u6b21\u7f20\u7ed5\u53d7\u4f24\u7684\u80a2\u4f53\uff0c\u5f88\u5feb\u5c31\u786c\u5316\u4e86\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u56fa\u5316\u7684\u77f3\u818f\u6a21\u5b50\u95fb\u8d77\u6765\u6bd4\u4e4b\u524d\u63a8\u8350\u7684\u732a\u6cb9\u3001\u86cb\u6e05\u6216\u8001\u8840\u8981\u597d\u3002\u51e0\u5e74\u540e\uff0c\u9a6c\u8482\u68ee\u7684\u53d1\u660e\u5728\u514b\u91cc\u7c73\u4e9a\u6218\u4e89\u671f\u95f4\u5f97\u5230\u4e86\u953b\u70bc\u3002\u4f20\u8bf4\u5728\u90a3\u573a\u51b2\u7a81\u4e2d\uff0c\u5f53\u519b\u4e8b\u5916\u79d1\u533b\u751f\u7f3a\u6c34\u65f6\uff0c\u4ed6\u4eec\u4f1a\u7528\u5c3f\u6db2\u5f04\u6e7f\u5df4\u9ece\u7684\u77f3\u818f\u3002\u514b\u91cc\u7c73\u4e9a\u6218\u4e89\u4e5f\u4f7f\u5f17\u6d1b\u4f26\u65af\u00b7\u5357\u4e01\u683c\u5c14\u5728\u7ec4\u7ec7\u62a4\u7406\u4f24\u5458\u65b9\u9762\u53d6\u5f97\u7684\u6210\u5c31\u800c\u95fb\u540d\uff0c\u53ef\u80fd\u5305\u62ec\u90a3\u4e9b\u6234\u7740\u81ed\u6c14\u718f\u5929\u7684\u77f3\u818f\u7684\u58eb\u5175\u3002\n\u5927\u7ea6\u5728\u540c\u4e00\u65f6\u95f4\uff0c\u4eba\u4eec\u5bf9\u75be\u75c5\u7684\u7ec6\u83cc\u7406\u8bba\u4e5f\u6709\u4e86\u8d8a\u6765\u8d8a\u591a\u7684\u8ba4\u8bc6\u548c\u63a5\u53d7\uff0c\u8fd9\u6162\u6162\u5730\u5bfc\u81f4\u4e86\u65e0\u83cc\u6280\u672f\u7684\u53d1\u5c55\uff0c\u4ee5\u53ca\u6a61\u80f6\u624b\u5957\u548c\u5916\u79d1\u7a97\u5e18\u7684\u4f7f\u7528\u3002\u5728\u90a3\u4e4b\u540e\uff0c\u624b\u672f\u53ef\u80fd\u4f1a\u6301\u7eed\u51e0\u4e2a\u5c0f\u65f6\uff0c\u5f88\u6709\u5e0c\u671b\u60a3\u8005\u4e0d\u4ec5\u80fd\u5728\u4e25\u9177\u7684\u8003\u9a8c\u4e2d\u5e78\u5b58\u4e0b\u6765\uff0c\u800c\u4e14\u6700\u7ec8\u4f1a\u75ca\u6108\u800c\u4e0d\u4f1a\u611f\u67d3\u3002\n\u6240\u6709\u8fd9\u4e9b\u521a\u521a\u63cf\u8ff0\u7684\u5148\u9a71\u90fd\u662f\u533b\u751f\uff0c\u533b\u5b66\u535a\u58eb\uff0c\u8fd9\u95e8\u5b66\u79d1\u7684\u6839\u6e90\u53ef\u4ee5\u8ffd\u6eaf\u5230\u5927\u7ea62500\u5e74\u524d\u7684\u5e0c\u6ce2\u514b\u62c9\u5e95\u3002\u4e00\u4e2a\u5206\u652f\u5b66\u79d1\u662f\u6700\u8fd1\u53d1\u5c55\u8d77\u6765\u7684\uff0c\u5728Show-\u200bme State\u4e2d\u8fd9\u6837\u505a\u662f\u6070\u5f53\u7684\u3002DO\u662f\u9aa8\u79d1\u533b\u751f\u7684\u7f29\u5199\u3002\u5f53\u7136\uff0cOsteo\u7684\u610f\u601d\u662f\u201c\u9aa8\u5934\u201d\uff0c\u800c\u201cPensation\u201d\u7684\u610f\u601d\u662f\u201c\u75be\u75c5\u201d\u3002\u5bc6\u82cf\u91cc\u5dde\u533b\u5b66\u535a\u58eb\u5b89\u5fb7\u9c81\u00b7\u65af\u8482\u5c14\u572819\u4e16\u7eaa\u672b\u5f15\u5165\u4e86\u9aa8\u79d1\u533b\u5b66\u3002\u4ed6\u7684\u7814\u7a76\u548c\u89c2\u5bdf\u4f7f\u4ed6\u8ba4\u8bc6\u5230\uff0c\u808c\u8089\u9aa8\u9abc\u7cfb\u7edf\u662f\u5168\u8eab\u5065\u5eb7\u548c\u75be\u75c5\u7684\u6838\u5fc3\u3002\u4ed6\u76f8\u4fe1\uff0c\u901a\u8fc7\u5e94\u7528\u624b\u52a8\u6280\u672f(\u73b0\u5728\u79f0\u4e3a\u9aa8\u79d1\u624b\u6cd5\u533b\u5b66)\u6765\u6539\u5584\u8eab\u4f53\u7ed3\u6784\uff0c\u5c06\u4fc3\u8fdb\u5404\u79cd\u5668\u5b98\u7cfb\u7edf\u7684\u6b63\u5e38\u529f\u80fd\u548c\u81ea\u6211\u200b\u6108\u5408\uff0c\u5305\u62ec\u6d88\u5316\u7cfb\u7edf\u548c\u547c\u5438\u7cfb\u7edf\u75be\u75c5\u3002\u5f53\u65f6\uff0c\u8bb8\u591a\u4f20\u7edf\u7684\u533b\u7597\u65b9\u6cd5\u5e76\u4e0d\u662f\u7279\u522b\u6709\u6548\uff0c\u6240\u4ee5\u9aa8\u79d1\u5f88\u5feb\u5c31\u53d1\u5c55\u4e86\u4e00\u6279\u8ffd\u968f\u8005\u30021892\u5e74\uff0c\u4ed6\u4ecd\u7136\u5f00\u529e\u4e86\u7b2c\u4e00\u6240\u9aa8\u79d1\u5b66\u6821\u3002\n\u53cd\u6620\u4e86\u65af\u8482\u5c14\u535a\u58eb\u7684\u6574\u4f53\u54f2\u5b66\uff0c\u8bb8\u591aDO\u4f20\u7edf\u4e0a\u503e\u5411\u4e8e\u521d\u7ea7\u4fdd\u5065-\u200b\u5bb6\u5ead\u5b9e\u8df5\u3001\u666e\u901a\u5185\u79d1\u548c\u513f\u79d1\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4eca\u5929\u9aa8\u79d1\u533b\u5b66\u9662\u7684\u6bd5\u4e1a\u751f\u53ef\u4ee5\u9009\u62e9\u4e13\u653b\uff0c\u53ef\u4ee5\u9009\u62e9\u9aa8\u79d1\u6216MD\u4f4f\u9662\u533b\u5e08\u57f9\u8bad\u8ba1\u5212\u3002\u5728\u5927\u591a\u6570\u793e\u533a\uff0cMD\u7684\u4eba\u6570\u8fdc\u8fdc\u591a\u4e8eDO\uff0c\u4f46\u7531\u4e8e\u65e2\u662f\u5b9e\u4e60\u751f\u53c8\u662f\u5b9e\u8df5\u8005\uff0cMD\u548cDO\u7ecf\u5e38\u5e76\u80a9\u5de5\u4f5c\uff0c\u5171\u4eab\u9aa8\u9abc\u7684\u533b\u7597\u6240\u6709\u6743\u3002\n\u5f53\u533b\u751f\u8fd8\u5728\u53d1\u5c55\u9aa8\u79d1\u7684\u65f6\u5019\uff0c\u4e00\u4e9bMD\u5916\u79d1\u533b\u751f\u5df2\u7ecf\u5f00\u59cb\u4e13\u653b\u5927\u8111\u3001\u773c\u775b\u6216\u8eab\u4f53\u5176\u4ed6\u90e8\u4f4d\u7684\u6cbb\u7597\uff1b\u4f46\u9aa8\u6298\u6cbb\u7597\u4ecd\u7136\u662f\u57ce\u5e02\u7684\u5168\u79d1\u533b\u751f\u7684\u9886\u57df\uff0c\u6709\u65f6\u4f1a\u7559\u7ed9\u519c\u6751\u548c\u8d2b\u56f0\u5730\u533a\u7684\u6574\u9aa8\u5e08\u6765\u7167\u987e\u3002\u968f\u7740\u5de5\u4e1a\u9769\u547d\uff0c\u7279\u522b\u662f\u82f1\u683c\u5170\u66fc\u5f7b\u65af\u7279\u8fd0\u6cb3\u7684\u4fee\u5efa\uff0c\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u8fd9\u6761\u8fd0\u6cb3\u4ecd\u7136\u662f\u4e16\u754c\u4e0a\u6700\u957f\u7684\u6cb3\u6d41\u901a\u822a\u8fd0\u6cb3\uff0c\u5168\u957f36\u82f1\u91cc\u3002\u800c\u4e0d\u662f\u901a\u5e38\u53d1\u751f\u5728\u521b\u4f24\u6cbb\u7597\u5feb\u901f\u8fdb\u6b65\u7684\u6218\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u548c\u5e73\u65f6\u671f\u7684\u5927\u89c4\u6a21\u9879\u76ee\uff0c\u6d89\u53ca\u6570\u767e\u53f0\u8d77\u91cd\u673a\u3001\u673a\u8f66\u548c\u6316\u6398\u673a\uff0c\u6570\u5343\u8f86\u5361\u8f66\u548c\u9a6c\u8f66\uff0c\u4ee5\u53ca1.7\u4e07\u540d\u5efa\u7b51\u5de5\u4eba\u3002\u5728\u516d\u5e74\u7684\u200b\u65bd\u5de5\u671f\u5185\uff0c\u8fd9\u79cd\u6df7\u5408\u6750\u6599\u9020\u6210\u4e86\u5927\u91cf\u7684\u9aa8\u9abc\u635f\u4f24\u3002\n\u51e0\u5e74\u524d\uff0c\u7531\u4e8e\u4f26\u6566\u5bb6\u91cc\u7684\u56f0\u96be\u65f6\u671f\uff0c\u5f53\u65f6\u5341\u51e0\u5c81\u7684\u7f57\u4f2f\u7279\u00b7\u743c\u65af\u642c\u5230\u4e86\u5229\u7269\u6d66\uff0c\u548c\u4ed6\u7684\u53d4\u53d4\u4f11\u00b7\u6b27\u6587\u00b7\u6258\u9a6c\u65af\u4f4f\u5728\u4e00\u8d77\u3002\u6258\u9a6c\u65af\u662f\u4e00\u540d\u9aa8\u79d1\u533b\u751f\u3002\u4ed6\u7684\u7236\u4eb2\u3001\u7956\u7236\u548c\u66fe\u662f\u200b\u7684\u7956\u7236\u90fd\u662f\u63a5\u9aa8\u5e08\u3002\u6258\u9a6c\u65af\u5bf9\u9aa8\u9abc\u75be\u75c5\u7684\u7ba1\u7406\u505a\u51fa\u4e86\u591a\u9879\u8d21\u732e\uff0c\u5176\u4e2d\u5305\u62ec\u53d1\u8868\u5173\u4e8e\u7ed3\u6838\u75c5\u548c\u80a1\u9aa8\u9aa8\u6298\u7684\u8bba\u6587\u3002\u4ed6\u9f13\u52b1\u4ed6\u7684\u4f84\u5b50\u7f57\u4f2f\u7279\u53bb\u533b\u5b66\u9662\uff0c\u7136\u540e\u548c\u4ed6\u4e00\u8d77\u884c\u533b\u3002\n\u6258\u9a6c\u65af\u53d1\u660e\u4e86\u4e00\u79cd\u5939\u677f\uff0c\u7528\u4e8e\u6682\u65f6\u56fa\u5b9a\u9aa8\u6298\u7684\u817f\uff0c\u743c\u65af\u8bbe\u8ba1\u4e86\u4e00\u79cd\u7b28\u91cd\u7684\u7ef7\u5e26\uff0c\u4f9b\u819d\u76d6\u624b\u672f\u540e\u4f7f\u7528\u3002\u8fd9\u4e24\u9879\u8fdb\u6b65\u90fd\u4ee5\u521b\u65b0\u8005\u7684\u540d\u5b57\u547d\u540d\uff0c\u81f3\u4eca\u4ecd\u5728\u4f7f\u7528\u3002\u7136\u800c\uff0c\u8fd9\u4e24\u4f4d\u9aa8\u79d1\u533b\u751f\u5728\u533b\u5b66\u4e0a\u7559\u4e0b\u7684\u6700\u503c\u5f97\u6ce8\u610f\u548c\u6700\u6301\u4e45\u7684\u5370\u8bb0\u662f\u4ed6\u4eec\u5b9a\u4e49\u4e86\u4e13\u4e1a\u3002\u8fd0\u6cb3\u5efa\u8bbe\uff0c\u7136\u540e\u6218\u4e89-\u200b\u8fd9\u4e9b\u9aa8\u9abc\u635f\u4f24\u7684\u7ecf\u5386\uff0c\u65e0\u8bba\u662f\u4e25\u91cd\u7684\u8fd8\u662f\u5e7f\u6cdb\u7684\uff0c\u7ed3\u675f\u4e86\u957f\u8fbe\u6570\u5341\u5e74\u7684\u5173\u4e8e\u9aa8\u79d1\u4e13\u4e1a\u6027\u8d28\u7684\u200b\u8ba8\u8bba\u3002\u5b83\u5e94\u8be5\u5305\u62ec\u5916\u79d1\u624b\u672f\uff0c\u8fd8\u662f\u53ea\u4e13\u6ce8\u4e8e\u7528\u77f3\u818f\u548c\u5939\u677f\u77eb\u6b63\u6b6a\u6b6a\u626d\u626d\u7684\u513f\u7ae5\uff1f\u81ea1920\u5e74\u4ee5\u6765\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6070\u5f53\u5730\u79f0\u5176\u4e3a\u9aa8\u79d1\u4e13\u79d1\u3002\n\u6539\u7f16\u81ea\u201c\u9aa8\u5934\u201d\uff1a\u91cc\u91cc\u5916\u5916\u3002\u7248\u6743\u6240\u6709\u00a92020\uff0c\u4f5c\u8005\uff1aRoy A.Meals\u3002\u7ecf\u51fa\u7248\u5546W.W.Norton&amp\uff1bCompany\uff0cInc.\u8bb8\u53ef\u4f7f\u7528\u3002\u7248\u6743\u6240\u6709\u3002\n\u7f57\u4f0a\u00b7A\u00b7\u7c73\u5c14\u65af\u662f\u52a0\u5dde\u5927\u5b66\u6d1b\u6749\u77f6\u5206\u6821\u7684\u6574\u5f62\u5916\u79d1\u4e34\u5e8a\u6559\u6388\u3002\u4f5c\u4e3a\u201c\u9aa8\u5934\uff1a\u5185\u5916\u201d\u548c\u51e0\u672c\u533b\u5b66\u4e66\u7c4d\u7684\u4f5c\u8005\uff0c\u4ed6\u4ece\u4e8b\u624b\u5916\u79d1\u7684\u5b9e\u8df5\u3001\u7814\u7a76\u548c\u6559\u5b66\u5df2\u670940\u5e74\u4e4b\u4e45\u3002\u4ed6\u66fe\u62c5\u4efb\u7f8e\u56fd\u624b\u5916\u79d1\u5b66\u4f1a\u4e3b\u5e2d\uff0c\u804c\u4e1a\u751f\u6daf\u7684\u5927\u90e8\u5206\u65f6\u95f4\u4e5f\u662f\u201c\u624b\u5916\u79d1\u6742\u5fd7\u201d\u7684\u7f16\u8f91\u59d4\u5458\u4f1a\u6210\u5458\u3002", "note_en": "Imagine a heated prehistoric game of basketball where the two teams, the Skins and the Furs, use an inflated mammoth bladder for the ball. One player jams his finger and notes that it is pointing sideways. Instinctively, he yanks on it and successfully realigns the dislocation. Next week a teammate incurs the same injury, and the experienced one performs the same restorative maneuver. Over time he continues to learn from experience and achieves local acclaim as the go-\u200bto bonesetter. These skills are then passed down to his children. These bonesetters, along with shamans, midwives, and herbalists, developed in many cultures, including ancient Egypt and early Hawaii. Archaeologists have discovered Egyptian mummies with broken arms that bonesetters first splinted with strips of wood bark and then wrapped with linen. A papyrus from about 2900   records that such splints should be reinforced with plaster and honey. About 500  , Susruta in India and  Hippocrates in Greece described stabilizing fractures with strips of wood, bamboo, or sheet lead wrapped with string or linen strips stiffened with lard, wax, pitch, or egg white. Bandages saturated with blood and left to harden also sufficed.\n Around 250   the city of Alexandria, Egypt, became civilization\u2019s center of scientific knowledge, and scholars came from great distances to learn. The Alexandrians shrewdly maintained their superior knowledge base by confiscating the visitors\u2019 learned writings as they entered the city. Officials had scribes copy the scrolls, placed the originals in the local library, and provided the travelers copies of their originals upon their departure. Alexandrians performed the first systematic human cadaver dissections. Visitors could also marvel at a human skeleton secured in proper alignment by fine wires and suspended vertically, another first that seems so commonplace today.\n  Beginning in ancient times, combat trauma has provided doctors with large numbers of injuries in healthy men in a short period of time. Again and again, this concentrated experience has added greatly to the understanding of wound healing. Such was the wisdom gained by the Greek physician  Galen in about 150. He worked in Rome and was the gladiators\u2019 equivalent to a modern-\u200bday team physician. Galen therefore had the opportunity to manage gore, and he made many original observations about wound healing and wound management, some of which eventually turned out to be glaringly wrong. (He thought, for example, that bone was made out of sperm.) Nonetheless, his writings were taken as dogma and prevailed in Europe for over a thousand years\u2014\u200btruly the Dark Ages for medical advances.\n Then the Enlightenment arrived.  Ambroise Par\u00e9, a sixteenth-\u200bcentury physician and contemporary of the Renaissance artists and anatomists, served several French kings and their embattled soldiers. At the time, surgeons were using red-\u200bhot pokers or boiling oil to seal the raw, bleeding flesh of amputation wounds. Either treatment was agonizingly painful, and neither was particularly effective in staunching blood loss or preventing infection. Short of hot oil one day, Par\u00e9 used threads from his coattail to tie off the ends of bleeding vessels before dressing the wound with the usual turpentine and gauze. Prompt healing ensued, and soldiers forever after have been grateful for improvements in surgery brought about by a battlefield necessity. Par\u00e9 is appropriately known as the father of modern surgery.\n Physicians who were university trained during the Renaissance considered surgery beneath them. They relegated operations\u2014\u200bwhich consisted mainly of bloodletting and amputations\u2014\u200bto the barbers; although they were merely apprenticeship trained, they had the sharpest knives. Par\u00e9 was among this guild of barber-\u200bsurgeons. This meant that until the mid-\u200bsixteenth century, one could theoretically have a shave and an amputation at one sitting by the same practitioner. Thereafter, surgeons branched away from barbers and became separately chartered. Nonetheless, their work was demeaned.\n Two holdovers from the barber-\u200bsurgeon era persist. Red-\u200band-\u200bwhite-\u200bstriped barber poles represent the blood and bandages of the barber-\u200bsurgeons; and in England, a surgeon is addressed as Mister whereas a physician is addressed as Doctor even though in recent centuries they have received the same core, university-\u200bbased, medical education. British surgeons seem to be proud of the distinction and enjoy subtly flaunting their colorful history. Around the world, other medical specialists sometimes view surgeons as impulsive. We surgeons rather consider ourselves as decisive. Detractors have even described surgeons as being right or wrong but never in doubt.\n  The word  orthopedic was coined in 1741 by  Nicolas Andry, a French physician who wrote the first book on the topic,  Orthop\u00e9die.  Ortho-\u200b is Greek for \u201cstraight\u201d or \u201ccorrect,\u201d as in orthodoxy (correct belief) and orthodontics (straight teeth); and  p\u00e9die stems from the Greek word meaning \u201cchild.\u201d In his book, Andry described how families and physicians could prevent and correct skeletal deformities in children. Of course, at the time the means of doing so were entirely nonsurgical. It would be another hundred years before general anesthesia and the thought of elective surgery came about. The graphic that Andry chose for the  frontispiece of his book to illustrate his thoughts on straightening a child has become iconic.\n Nicolas Andry\u2019s publication of  Orthop\u00e9die kickstarted orthopedics as a distinct specialty; and later in the eighteenth century, Jean-\u200bAndr\u00e9 Venel provided practical applications for many of Andry\u2019s teachings related to nonoperative treatments for children\u2019s foot and spine deformities.\n During Andry\u2019s and Venel\u2019s time, surgeons were not subspecialized because there was nothing special that any one of them could do better than the others. This changed dramatically in the nineteenth century with the discovery of general anesthesia and with the gradual acceptance of  Pasteur\u2019s proposal that bacteria were the source of infection. Up until that time, surgeons had no reason to wash their hands before surgery and would often wipe their surgical instruments on their coattails before replacing them in their kit. By the mid-\u200bnineteenth century, general anesthesia allowed surgeons to operate more methodically and treat more complex problems. (Prior to this, a premium was placed on speed, and in one instance, the nearby fingers of the surgeon\u2019s assistant came off along with the patient\u2019s leg.)\n A Dutch army surgeon named Antonius Mathijsen provided another mid-\u200bnineteenth-\u200bcentury breakthrough that greatly eased the burden of applying casts to broken limbs. He applied plaster of paris powder to long strips of moist gauze and then rolled them up. When he needed a cast, he momentarily immersed a roll in water to activate the plaster of paris and then circled the injured limb multiple times with the bandage, which quickly hardened. Undoubtedly the solidified plaster cast smelled better than the previously recommended lard, egg white, or old blood. Several years later, Mathijsen\u2019s invention received a workout during the Crimean War. Legend has it that when military surgeons during that conflict were short of water, they would moisten the plaster of paris with urine. The Crimean War also made  Florence Nightingale famous for her achievements in organizing nursing care for wounded soldiers, probably including those with reeking casts.\n Around the same time there was also growing awareness and acceptance of the germ theory of disease, which slowly led to the development of aseptic techniques and the use of rubber gloves and surgical drapes. After that, operations could last hours with good prospects that the patient would not only survive the ordeal but eventually heal without infection.\n  All these pioneers just described were medical doctors, MDs, with the roots of the discipline going back to Hippocrates about 2,500 years ago. A branch discipline developed far more recently and appropriately did so in the Show-\u200bMe State.  DO is short for doctor of osteopathic medicine.  Osteo, of course, means \u201cbone,\u201d and  pathy means \u201cdisease.\u201d Missourian Andrew Still, MD, introduced osteopathic medicine in the late 1800s. His research and observations led him to an understanding that the musculoskeletal system was central to health and disease throughout the body. He believed that improving the body\u2019s structure through the application of manual techniques, now known as osteopathic manipulative medicine, would promote normal function and self-\u200bhealing of various organ systems, including digestive and respiratory ailments. At the time, many conventional medical treatments were not particularly effective, so osteopathy quickly developed a following. Dr. Still opened the first school of osteopathy in 1892.\n  Reflective of Dr. Still\u2019s holistic philosophy, many DOs traditionally gravitated to primary care\u2014\u200bfamily practice, general internal medicine, and pediatrics. Nonetheless, graduates from schools of osteopathic medicine today may choose to specialize and can do so either in osteopathic or in MD residency training programs. In most communities, there are far more MDs than DOs, but as both trainees and practitioners, MDs and DOs often work side by side, sharing medical ownership of bone.\n At the time when Dr. Still was developing osteopathy, some MD surgeons had already begun to specialize in treatments of the brain, eye, or other body parts; but fracture treatment remained within the domain of the generalist in cities and at times left to the care of bonesetters in rural and impoverished areas. This changed with the Industrial Revolution and specifically with the building of the Manchester Ship Canal in England, which remains the world\u2019s longest river navigation canal at thirty-six miles. Rather than wartime, when rapid advances in the treatment of trauma typically take place, this was a massive peacetime project involving hundreds of cranes, locomotives, and excavators; thousands of trucks and wagons; and seventeen thousand construction workers. The mix produced a great number of skeletal injuries over the six-\u200byear construction period.\n A few years earlier and because of hard times at home in London, Robert Jones, then a teenager, moved to Liverpool to live with his uncle, Hugh Owen Thomas. Thomas was an orthopedist. His father, grandfather, and great-\u200bgrandfather had been bonesetters. Thomas made multiple contributions to the management of skeletal diseases that included publishing treatises on tuberculosis and on femur fractures. He encouraged his nephew, Robert, to attend medical school and then to join him in practice, which Robert did. Together, Thomas and Jones developed a special interest in fracture management, whereas most orthopedists at the time dealt primarily with children\u2019s skeletal deformities.\n In a fortuitous turn of events in 1888, Jones became surgeon-\u200bsuperintendent of the Manchester Ship Canal construction project and took advantage of this opportunity to develop the first comprehensive accident service in the world. He spaced three hospitals at intervals along the canal with first aid stations interspersed. Jones staffed the hospitals with personnel skilled in fracture management and operated on many of the injured workers himself. This intense experience of operative as well as nonoperative fracture management contributed to the development of techniques for improved fracture care. The newly gained knowledge also proved invaluable during the soon-\u200bto-\u200bfollow World War I, and Jones was appointed Inspector of Military Orthopaedics, overseeing a thirty-thousand-\u200bbed organization.\n Thomas invented a splint for temporary immobilization of broken legs, and Jones devised a bulky bandage to be used after knee surgery. Both of these advances bear their innovator\u2019s name and are still used today. The most noteworthy and lasting mark that these two orthopedists made on medicine, however, was that they defined the specialty. Canal building and then war\u2014\u200bthese experiences with skeletal injuries, both intensive and extensive, ended a decades-\u200blong discussion about the nature of the specialty of orthopedics. Should it include surgical procedures or just focus on straightening crooked children with casts and splints? Since 1920 everyone appropriately calls the specialty orthopedic surgery.\n  Adapted from  Bones: Inside and Out . Copyright \u00a9 2020 by Roy A. Meals. Used with permission of the publisher, W.W. Norton &amp; Company, Inc. All rights reserved.\n  Roy A. Meals is a clinical professor of orthopedic surgery at UCLA. The author of  Bones: Inside and Out and several medical books, he has practiced, researched, and taught hand surgery for forty years. He has served as president of the American Society for Surgery of the Hand and has also been on the editorial board of the  Journal of Hand Surgery for most of his career.", "posttime": "2020-10-24 07:26:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5916\u79d1\u533b\u751f,history", "title": "\u5916\u79d1\u533b\u751f\u7b80\u53f2", "title_en": "A Brief History of Surgeons", "transed": 1, "url": "https://www.laphamsquarterly.org/roundtable/brief-history-surgeons", "via": "", "real_tags": ["\u5916\u79d1\u533b\u751f", "history"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1030804, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "140\u591a\u5e74\u6765\uff0c\u4e00\u95e8\u5927\u70ae\r\u5df2\u7ecf\u4ece\u7231\u4e01\u5821\u57ce\u5821\u7684\u57ce\u5899\u53d1\u5c04\u4e86\u4fe1\u53f7\r\u4e0b\u53481\u70b9\u7684\u65f6\u95f4\u3002\u65f6\u95f4\u67aa\u5730\u56fe\u51fa\u7248\u4e86\r\u57281861\u5e74\u548c1862\u5e74\u4e3aW&amp\uff1bAK Johnston\u7684\u90ae\u5c40\u76ee\u5f55\uff0c\r\u5730\u7406\u5b66\u5bb6\u548c\u96d5\u523b\u5bb6\u732e\u7ed9\u5973\u738b\u3002\u8fd9\u4e9b\u5730\u56fe\u8ba9\r\u7231\u4e01\u5821\u77e5\u9053\u4e00\u70b9\u949f\u58f0\u54cd\u8d77\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\r\u4ece\u7231\u4e01\u5821\u57ce\u5821\u51fa\u53d1\u7a7f\u8d8a\u7231\u4e01\u5821\u3002\n\u5df2\u6c9f\u901a\r\u7531\u4f11\u74e6\u7279\u5148\u751f\u64b0\u5199\uff0c\u8fd9\u662f\u4e3a\u65f6\u4ee3\u67aa\u8ba4\u8d2d\u57fa\u91d1\u51c6\u5907\u7684\r\u4f5c\u8005\uff1aC Piazzi Smyth\u6559\u6388\uff0c\u82cf\u683c\u5170\u7687\u5bb6\u5929\u6587\u5b66\u5bb6\u3002\n(\u201c\u67aa\u201d\uff0ca\r\u57ce\u5821\u7684\u534a\u6708\u70ae\u53f0\u91cc\u7684\u5927\u70ae\u662f\r\u5728\u683c\u6797\u5a01\u6cbb\u65f6\u95f4\u4e0b\u53481\u70b9\u6574\u53d1\u5c04\r\u5e73\u5747\u65f6\u95f4\uff0c\u6bcf\u5929\u3001\u661f\u671f\u65e5\u548c\u8282\u5047\u65e5\u9664\u5916\uff0c\u901a\u8fc7\r\u6765\u81ea\u7687\u5bb6\u5929\u6587\u53f0\u7684\u7535\u5b66\u5f71\u54cd\u673a\u6784\r\u5361\u5c14\u987f\u5c71\u3002)\u3002\n\u5df2\u6c9f\u901a\r\u7531\u4f11\u74e6\u7279\u5148\u751f\u64b0\u5199\uff0c\u8fd9\u662f\u4e3a\u65f6\u4ee3\u67aa\u8ba4\u8d2d\u57fa\u91d1\u51c6\u5907\u7684\r\u4f5c\u8005\uff1aC Piazzi Smyth\u6559\u6388\uff0c\u82cf\u683c\u5170\u7687\u5bb6\u5929\u6587\u5b66\u5bb6\u3002\n\u89e3\u96c7\u7f8e\u56fd\u4eba\u7684\u4f20\u7edf\r\u6765\u81ea\u7231\u4e01\u5821\u57ce\u5821\u7684\u949f\u8868\u67aa\u4eca\u5929\u8fd8\u5728\u7ee7\u7eed\u3002\r\u5728\u8fc7\u53bb\u7684140\u5e74\u91cc\uff0c\u4eba\u4eec\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u67aa\u652f\u3002\r\u6709\u4e9b\u7535\u6c60\u7684\u88c5\u836f\u91cf\u6bd4\u73b0\u5728\u4f7f\u7528\u7684\u8981\u5f3a\u5f97\u591a\u3002\n\u4e3a\u6bcf\u4e00\u4e2a\r\u8ddd\u79bb\u57ce\u5821\u7684\u989d\u5916\u5706\uff0c\u51cf\u4e00\r\u7b2c\u4e8c\uff0c\u4ece\u201c\u65f6\u4ee3\u4e4b\u67aa\u201d\u62a5\u9053\u7684\u90a3\u4e00\u523b\u8d77\u5230\r\u7ed9\u51fa\u2026\u7684\u786e\u5207\u65f6\u523b\r1\uff1a00&#39\uff1b\u949f\u3002\n\u5728\u5c71\u811a\u4e0b\r1862\u5e74\u7684\u65f6\u95f4-\u67aa\u652f\u5730\u56fe\u6709\u4e24\u4e2a\u6ce8\u91ca\uff0c\u5176\u4e2d\u5305\u62ec\u4e00\u4e2a\u76f8\u5f53\u957f\u7684\u53e5\u5b50\r\u6ce8\u91ca2\u7684\u89e3\u91ca\u3002\n1.\u4e3a\u4ee5\u4e0b\u9879\u76ee\u63d0\u4f9b\u670d\u52a1\uff1a\r\u89c2\u5bdf\u8005\u6240\u5904\u7684\u6bcf\u4e00\u5708\u989d\u5916\u7684\u8ddd\u79bb\r\u53ef\u80fd\u6765\u81ea\u5361\u65af\u7279\u5c14\uff0c\u4ed6\u5e94\u8be5\u51cf\u53bb\u4e00\u79d2\uff0c\r\u5230\u6d4b\u91cf\u7684\u58f0\u97f3\u4f20\u64ad\u901f\u7387\uff0c\u4ece\r\u4ed6\u542c\u5230\u65f6\u95f4\u67aa\u7684\u62a5\u544a\u7684\u77ac\u95f4\r\u547d\u4ee4\u4ee5\u83b7\u53d6\u706b\u707e\u7684\u51c6\u786e\u65f6\u523b\uff1b\u62161\u70b9\u949f\u3002\n2.\u5411\u516c\u4f17\u5f00\u653e\r\u65f6\u4ee3\u7684\u95ea\u5149-\u67aa\u7684\u706b\uff0c\u65e0\u8bba\u4ec0\u4e48\u65f6\u5019\u90fd\u53ef\u4ee5\u770b\u5230\uff0c\r\u7531\u4e8e\u5149\u901f\u6781\u5927\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\r\u5bf9\u4efb\u610f\u8ddd\u79bb\u8fdb\u884c\u6821\u6b63\uff1b\u5e76\u53e6\u884c\u5b89\u6392\r\u901a\u8fc7\u7535\u6d41\u7684\u4f5c\u7528\u65b9\u5f0f\uff0c\u56e0\u6b64\r\u7684\u7b2c60\u79d2\u7684\u6ef4\u7b54\u58f0\u51c6\u786e\u5730\u51fa\u73b0\u3002\r\u5361\u5c14\u987f\u7687\u5bb6\u5929\u6587\u53f0\u7684\u6821\u51c6\u6b63\u5e38\u949f\r\u5c71\u4e0a\uff0c\u65e0\u8bba\u662f\u590f\u5929\u8fd8\u662f\u51ac\u5929\uff0c\u90fd\u4e0d\u4f1a\u5931\u53bb\r\u6700\u5c0f\u7684\u53ef\u5bdf\u89c9\u5230\u7684\u4e00\u79d2\u7684\u5206\u6570\uff1a1\u548c\r\u201c\u949f\u4e00\u5c0f\u65f6\u53c8\u4e00\u5c0f\u65f6\u5730\u5c0f\u5fc3\u5730\u8c03\u51c6\u4e86\u3002\u201d\r\u4e0e\u5929\u6587\u53f0\u7684\u5929\u6587\u89c2\u6d4b\u7ed3\u679c\u4fdd\u6301\u4e00\u81f4\r\u5929\u6587\u53f0\uff0c\u65e0\u8bba\u662f\u767d\u5929\u8fd8\u662f\u9ed1\u591c\uff0c\u603b\u662f\u663e\u793a\u771f\u5b9e\u7684\r\u65f6\u95f4\uff0c\u5c3d\u53ef\u80fd\u63a5\u8fd1\u5b83\u53ef\u4ee5\u88ab\u786e\u5b9a\u7684\u65f6\u95f4\uff0c\u7528\u4eba\u7c7b\u7684\u65b9\u6cd5\u3002", "note_en": "For over 140 years, a cannon \r has has been fired from the ramparts of Edinburgh castle to signal \r the time at 1pm. Time-Gun maps were published \r in 1861 and 1862 for the Post Office Directory by W &amp; AK Johnston, \r Geographers and Engravers to the Queen.   These maps let the people of \r Edinburgh know the time taken for the sound of the one o&#39;clock gun \r to travel from the gun at Edinburgh castle across Edinburgh.\n  Communicated \r by Mr Hewat, as prepared for the Time-Gun Subscripton Fund \r by Professor C Piazzi Smyth, Astronomer Royal for Scotland\n    (The Gun, a \r large cannon in the Half-Moon Battery, at the Castle, is \r fired off at the precise instant of 1 o&#39;clock PM, Greenwich \r Mean Time, daily, Sundays and holidays excepted, through the \r agency of electric influence from the Royal Observatory on \r the Calton Hill.)\n  Communicated \r by Mr Hewat, as prepared for the Time-Gun Subscripton Fund \r by Professor C Piazzi Smyth, Astronomer Royal for Scotland\n  The tradition of firing the \r 1 o&#39;clock gun from Edinburgh Castle continues today.\u00a0 Several \r different guns have been used over the past 140 years.\u00a0\u00a0 \r Some with a far more powerful charge than is used today.\n  For every \r additional circle of distance from the Castel, subtract one \r second from the instant of the report of the &#34;Time-Gun&#34; to \r give the exact moment of \r 1 o&#39;clock\n  At the foot of the \r 1862 Time-Gun map were two notes, including quite a long sentence \r of explanation for note 2.\n  1.\u00a0 For \r every additional circle of distance at which the observer \r may be from the Castel, he should subtract one second, due \r to the measured rate at which sound travels, from the \r instant at which he hears the REPORT of the Time-Gun in \r order to obtain the exact moment of the fire; or, 1 o&#39;clock.\n  2.\u00a0 The \r FLASH of the Time-Gun&#39;s fire, whenever it can be seen, \r requires, owing to the immense velocity of light, no \r correction for any distance;\u00a0 and is otherwise arranged \r by the manner in which the electricity is made to act, so as \r to occur true to the tick of the 60th second of the \r Regulated Normal Clock of the Royal Observatory on Calton \r Hill, both Summer and Winter, without the loss of the \r smallest appreciable fraction of a second:\u00a0 and the \r said clock being, from hour to hour carefully adjusted in \r accordance with astronomical observations kept up at the \r observatory, both by night and by day, shows always the true \r time, as close as it can be ascertained, by human means.", "posttime": "2020-10-24 07:25:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65f6\u95f4,gun", "title": "\u65f6\u95f4\u67aa-\u5730\u56fe", "title_en": "Time Gun \u2013 Maps", "transed": 1, "url": "http://www.edinphoto.org.uk/0_maps_2/0_map_edinburgh_time-gun_1861_-_map_notes.htm", "via": "", "real_tags": ["\u65f6\u95f4", "gun"]}, {"category": "", "categoryclass": "", "imagename": "44724c33467d8557ff321189042ede72.png", "infoid": 1030803, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u7814\u7a76\u4e86\u4ec0\u4e48\u662f\u5730\u56fe\u4ee5\u53ca\u5982\u4f55\u5728SF2\u4e2d\u4f7f\u7528\u5730\u56fe\uff0c\u5e76\u5728\u6700\u540e\u63d0\u5230\u4e86\u5982\u4f55\u4ee5\u4e0d\u540c\u7684\u6570\u91cf\u79fb\u52a8\u591a\u5c42(\u6216\u6eda\u52a8)\u5730\u56fe\u6765\u5b9e\u73b0\u89c6\u5dee\u6eda\u52a8\uff0c\u4ece\u800c\u521b\u9020\u51fa\u6df1\u5ea6\u7684\u9519\u89c9\u3002\n\u4e0d\u8fc7\uff0c\u8fd9\u5b9e\u9645\u4e0a\u53ea\u9002\u7528\u4e8e\u76f4\u7acb\u7684\u56fe\u5143\u3002\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u5c06\u8fd9\u79cd\u6548\u679c\u7528\u4e8e\u5730\u677f\u548c\u5929\u82b1\u677f\u7b49\u6c34\u5e73\u8868\u9762-\u6211\u4eec\u8981\u4e48\u9700\u8981\u4f7f\u7528\u66f4\u591a\u6211\u4eec\u6ca1\u6709\u7684\u5c42\uff0c\u8981\u4e48\u9700\u8981\u5927\u91cf\u7684\u74f7\u7816\u6765\u8868\u793a\u4e0d\u540c\u7684\u900f\u89c6\u89d2\u5ea6\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u613f\u4f7f\u7528\u7684\u3002\n\u5bf9\u4e8e\u5730\u677f\u548c\u5929\u82b1\u677f\u7b49\u6c34\u5e73\u8868\u9762\uff0cSF2\u4f7f\u7528\u53e6\u4e00\u79cd\u79f0\u4e3a\u884c\u6eda\u52a8\u7684\u6280\u672f(\u4e5f\u79f0\u4e3a\u3002\u884c\u6eda\u52a8)\u3002\n\u6211\u4eec\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u770b\u5230\uff0cCPS1\u6709\u4e09\u5c42\u53ef\u4ee5\u72ec\u7acb\u6eda\u52a8\u7684\u5e73\u94fa\u5730\u56fe\uff1a\u6eda\u52a81\u52303\u3002\u5176\u4e2d\u4e00\u5c42\u662f\u7279\u6b8a\u7684\uff0c\u9664\u4e86\u6574\u4e2a\u5c42\u672c\u8eab\u4e4b\u5916\uff0c\u8fd8\u5141\u8bb8\u6c34\u5e73\u6eda\u52a8\u6bcf\u4e00\u884c\u50cf\u7d20\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u7684\u5730\u677f\u4e0a\u770b\u5230\u8fd9\u4e2a\u6548\u679c\uff1a\n\u8fd9\u4e00\u5c42\u662f\u5377\u8f742\u3002\u5728SF2\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u201c\u4e3b\u201d\u5377\u8f74\u3002\u5176\u4ed6\u4e24\u4e2a\u5377\u8f74\u548c\u7cbe\u7075\u603b\u662f\u76f8\u5bf9\u4e8e\u8fd9\u4e2a\u4e3b\u5377\u8f74\u7684\u4f4d\u7f6e\u548c\u90a3\u4e9b\u5377\u8f74\u7684Z\u6df1\u5ea6\u653e\u7f6e\u5728\u67d0\u4e2a\u4f4d\u7f6e\u3002\n\u6211\u4eec\u53ef\u4ee5\u628a\u6218\u6597\u673a\u811a\u4e0b\u7684\u4e00\u6761\u5047\u60f3\u7ebf\u60f3\u8c61\u6210Z\u6df1\u5ea6\u4e3a\u96f6\u3002\u6218\u6597\u673a\u524d\u9762\u7684\u5c11\u91cf\u5730\u9762\u5177\u6709\u8d1fZ\u6df1\u5ea6\uff0c\u80cc\u666f\u5143\u7d20\u5177\u6709\u4e00\u4e9b\u6b63Z\u6df1\u5ea6\u3002\n\u5f53\u76f8\u673a\u6c34\u5e73\u79fb\u52a8\u65f6\uff0cZ\u6df1\u5ea6\u4e3a\u8d1f\u7684\u5143\u7d20\u7684\u79fb\u52a8\u6bd4Z=0\u7684\u5143\u7d20\u79fb\u52a8\u7684\u591a\uff0c\u800cZ=0\u7684\u5143\u7d20\u7684\u79fb\u52a8\u53c8\u6bd4\u6df1\u5ea6\u4e3a\u6b63\u7684\u5143\u7d20\u79fb\u52a8\u7684\u591a\u3002\u975e\u5e38\u8fdc\u7684\u5143\u7d20(\u5728\u6444\u5f71\u548c\u5efa\u6a21\u4e2d\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c\u65e0\u7a77\u8fdc\u201d)\u6839\u672c\u4e0d\u4f1a\u79fb\u52a8\u3002\n\u8fd9\u4e0e\u6211\u4eec\u4e0e\u73b0\u5b9e\u4e16\u754c\u7684\u4f53\u9a8c\u76f8\u543b\u5408\uff0c\u4f8b\u5982\uff0c\u4e58\u5750\u706b\u8f66\uff0c\u5411\u7a97\u5916\u671b\u53bb\u4e00\u5ea7\u9065\u8fdc\u7684\u5c71\u3002\u5728\u4e00\u5206\u949f\u7684\u65f6\u95f4\u91cc\uff0c\u5c71\u4f3c\u4e4e\u4e00\u52a8\u4e0d\u52a8\uff0c\u66f4\u8fd1\u7684\u7279\u5f81\u51fa\u73b0\u4e86\uff0c\u8de8\u8fc7\u4e86\u6211\u4eec\u7684\u89c6\u7ebf\uff0c\u4ece\u89c6\u7ebf\u4e2d\u6d88\u5931\u4e86\uff0c\u800c\u94c1\u8def\u8d70\u5eca\u8fb9\u4e0a\u7684\u6805\u680f\u547c\u5578\u800c\u8fc7\uff0c\u552f\u4e00\u8ba9\u6211\u4eec\u771f\u6b63\u611f\u53d7\u5230\u706b\u8f66\u901f\u5ea6\u7684\u7269\u4f53\u3002\n\u8ba9\u6211\u4eec\u6765\u770b\u770bE Honda\u7684\u821e\u53f0\uff0c\u56e0\u4e3a\u5b83\u662f\u6700\u6709\u8da3\u7684\u3002\u6240\u6709\u7684SF2\u8d5b\u6bb5\u90fd\u6709\u4e00\u4e2a\u89c6\u5dee\u6eda\u52a8\u7684\u5730\u677f\uff0c\u53ea\u6709\u5c11\u6570\u51e0\u4e2a\u4e5f\u6709\u5929\u82b1\u677f\uff0c\u4f46E Honda\u7684\u821e\u53f0\u4e2d\u592e\u4e5f\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6d74\u7f38\u3002\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u821e\u53f0\u662f\u5982\u4f55\u5206\u5c42\u7684\uff1a\n\u6211\u4eec\u6709\u5e26\u6709\u6d74\u7f38\u6b63\u9762\u7684Scroll1\uff0c\u5305\u542b\u5730\u677f\u3001\u5929\u82b1\u677f\u548c\u6d74\u7f38\u9876\u9762\u7684Scroll2\uff0c\u4ee5\u53ca\u5e26\u6709\u80cc\u666f\u7684Scroll3\u3002\n\u8fd9\u4e09\u4e2a\u5c42\u4e0e\u7cbe\u7075\u7ed3\u5408\u5728\u4e00\u8d77\u521b\u5efa\u4e86\u5982\u4e0b\u6240\u793a\u7684\u5b8c\u6574\u56fe\u50cf\u3002Ken\u548cRyu\u7684\u7cbe\u7075\u951a\u5b9a\u5728Scroll 2\u4e0a\uff0c\u6d74\u7f38\u6ef4\u6c34\u548c\u4e00\u4e2a\u5c0f\u6d74\u7f38\u951a\u5b9a\u5728Scroll 1\u4e0a\uff0cScroll 1\u5305\u542b\u4e86\u6d74\u7f38\u7684\u524d\u8868\u9762\u3002\n\u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u6eda\u52a81\u7ed8\u5236\u5728\u5176\u4ed6\u5c42\u7684\u9876\u90e8\uff0c\u4f46\u5b83\u5305\u542b\u7684\u5bf9\u8c61\u663e\u793a\u5728\u5730\u677f\u548c\u6d74\u7f38\u9876\u90e8\u4e4b\u95f4\u3002\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u56e0\u4e3aScroll 1\u79fb\u52a8\u8d77\u6765\u5c31\u50cf\u5b83\u4f4d\u4e8e\u90a3\u91cc\u4e00\u6837\u3002\u8fd9\u91cc\u7684\u5173\u952e\u662f\u56fe\u5c42\u7684\u4f18\u5148\u7ea7(\u5728\u54ea\u4e9b\u56fe\u5c42\u4e0a\u7ed8\u5236)\u548c\u56fe\u5c42\u7684\u4f4d\u79fb\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u4e1c\u897f\u3002\n\u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5377\u8f74\u4e0d\u4e00\u5b9a\u8981\u5206\u5c421\u5728\u9876\u90e8\u548c3\u5728\u5e95\u90e8\uff0c\u5b83\u53ea\u662f\u78b0\u5de7\u662f\u8fd9\u6837\u7684E\u672c\u7530\u7684\u821e\u53f0\u3002\u9f99\u7684\u821e\u53f0\u7528\u5377\u8f741\u6765\u753b\u5929\u7a7a\uff0c\u628a\u5b83\u653e\u5728\u6240\u6709\u5176\u4ed6\u7684\u4e0b\u9762\u3002\u5929\u7a7a\u4e2d\u7684\u4e91\u5f69\u72ec\u7acb\u4e8e\u6211\u4eec\u5728\u821e\u53f0\u4e0a\u7684\u79fb\u52a8\u800c\u98de\u8fc7-\u89c6\u5dee\u4e0d\u662f\u7528\u6765\u505a\u6240\u6709\u4e8b\u60c5\u7684\u3002\nScroll 2\u4e2d\u7684\u8fde\u7eed\u884c\u6839\u636e\u5b83\u4eec\u6240\u5c5e\u7684\u4e24\u4e2a\u66f2\u9762\u88ab\u5206\u7ec4\u5728\u4e00\u8d77\uff0c\u5e76\u4e14\u8be5\u7ec4\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u88ab\u4f4d\u79fb\u4e00\u5b9a\u7684\u91cf\u4ee5\u521b\u5efa\u526a\u5207\u53d8\u6362\u3002\u6211\u5728\u697c\u5c42\u5468\u56f4\u753b\u4e86\u4e00\u4e2a\u77e9\u5f62\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u770b\u5230\u5b83\u7684\u6548\u679c\uff1a\n\u5728\u821e\u53f0\u4e2d\u592e\uff0c\u6c34\u5e73\u504f\u79fb\u4e3a\u96f6\uff0c\u5e76\u4e14\u5e73\u94fa\u88ab\u539f\u5c01\u4e0d\u52a8\u5730\u7ed8\u5236\u3002\u5f53\u6211\u4eec\u79bb\u5f00\u821e\u53f0\u4e2d\u5fc3\u65f6\uff0c\u77e9\u5f62\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u503e\u659c\uff0c\u6574\u4e2a\u56fe\u5c42\u4e5f\u4f1a\u6eda\u52a8\uff0c\u7ed9\u4eba\u4e00\u79cd\u5e73\u9762\u6c34\u5e73\u9762\u7684\u611f\u89c9\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u770b3D\u573a\u666f\u4e00\u6837\u3002\n\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u628a\u6d74\u7f38\u7684\u524d\u9762\u653e\u5728\u5377\u8f742\u91cc\uff1f\u56e0\u4e3a\u5b83\u4e0a\u9762\u670916\u884c\u697c\u5c42\u50cf\u7d20\u3002\u5982\u679c\u6d74\u7f38\u5728\u540c\u4e00\u5c42\uff0c\u5b83\u5c31\u4f1a\u548c\u5730\u7816\u4e00\u8d77\u88ab\u526a\u6389\uff0c\u8fd9\u6837\u770b\u8d77\u6765\u5c31\u4e0d\u5bf9\u4e86\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u88ab\u526a\u6389\u7684\u5730\u677f\u6392\u5728\u6d74\u7f38\u540e\u9762\u6d88\u5931\u4e86\uff1a\n\u540c\u6837\u7684\u6548\u679c\u4e5f\u7528\u4e8e\u5929\u82b1\u677f\u548c\u6d74\u7f38\u9876\u90e8\u3002\u6700\u8fdc\u7684\u80cc\u666f\u5c42Scroll3\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u4e8b\u60c5\u53d1\u751f\uff0c\u76f4\u5230\u8fd9\u4e00\u8f6e\u7ed3\u675f\uff0c\u4eba\u7c7b\u4e3e\u8d77\u4e86\u4ed6\u7684\u724c\u5b50\u3002(\u6211\u8fc7\u53bb\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u7cd6\u679c\u5e7f\u544a\uff0c\u4f46\u539f\u6765\u6c49\u5b57\u8bf4\u7684\u662f\u201c\u5b8c\u6574\u7684\u5706\u201d)\u3002\n\u8fd9\u662fCPS1\u5982\u4f55\u4f7f\u7528\u884c\u6eda\u52a8\u4ee5\u53ca\u5206\u5c42\u5e73\u94fa\u5730\u56fe\u6765\u521b\u5efa\u89c6\u5dee\u6548\u679c\u7684\u53ef\u89c6\u6982\u8ff0\u3002\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u4e86\u89e3\u5b9e\u73b0\u8fd9\u4e00\u5207\u7684\u4ee3\u7801\u3002", "note_en": "In the last post we looked at what tilemaps are and how they\u2019re used in SF2, and ended with a mention of how multiple layers (or  scrolls) of tilemaps can be moved at different amounts to achieve  parallax scrolling, creating the illusion of depth.\n  This really only works for elements that are standing upright, though. There\u2019s no way we can use this effect for horizontal surfaces like floors and ceilings \u2013 we\u2019d either need to use a lot more layers which we don\u2019t have, or a huge amount of tiles to represent different perspective angles, which we\u2019d rather not.\n For horizontal surfaces like floors and ceilings, SF2 uses another technique called row scrolling (a.k.a. line scrolling).\n We saw in the previous post that the CPS1 has three layers of tilemaps which can be scrolled independently: Scrolls 1 through 3. One of these layers is special, and allows for each individual row of pixels to be scrolled horizontally, in addition to the entire layer itself. We can see this effect on the the floor here:\n  This layer is Scroll 2. In SF2 we can think of this as the \u201cmain\u201d scroll. The other two scrolls and the sprites are always positioned somewhere relative to this main scroll\u2019s position, and the  Z-depth of those scrolls.\n We can think of an imaginary line just underneath the feet of our fighters as having a Z-depth of zero. A small amount of floor in front of the fighters has a negative Z-depth, with background elements having some positive Z-depth.\n As the camera moves horizontally, elements with a negative Z-depth move more than elements at Z=0, which in turn move more than elements with a positive depth. Elements very far away (in photography and modelling we call this \u201cat infinity\u201d) don\u2019t move at all.\n This matches our experience with the real world, for example riding a train and looking out the window a far away mountain. In the space of a minute, the mountain seems not to move at all, nearer features appear, cross our vision and disappear from view, while the fence bordering the railways corridor whizzes past, the only object giving us a true sense of the train\u2019s speed.\n Let\u2019s take a look at E Honda\u2019s stage as it is the most interesting. All of the SF2 stages have a floor with parallax scrolling, only a few also have a ceiling, but E Honda\u2019s also has a nice bath in the centre of the stage. Let\u2019s look at how that stage is layered:\n  We have Scroll 1, with the front surface of the bath, Scroll 2 containing the floor, ceiling and the top surface of the bath, and Scroll 3 with the background.\n The three layers combine with the sprites to create the full image shown below. Ken and Ryu\u2019s sprites are anchored to Scroll 2, water dripping from the bath and a small tub are anchored to Scroll 1, which contains the front surface of the bath.\n  Note that while Scroll 1 is drawn on top of the other layers, the object it contains appears between the floor and the top of the bath. This works, because Scroll 1 moves as if it were located there. The key thing here is that the layer\u2019s  priority (which layers it is drawn on top of) and the layer\u2019s  displacement are two different things.\n Note also that the scrolls don\u2019t have to be layered with 1 on top and 3 at the bottom, it just happens to be this way for E Honda\u2019s stage. Ryu\u2019s stage uses Scroll 1 for drawing the sky, which places it underneath all the others. The clouds in the sky fly past independently of our movement on the stage \u2013 parallax isn\u2019t used for it all.\n Consecutive rows in Scroll 2 are grouped together depending on which surface they belong two, and each row within that group is displaced by a certain amount to create a  shear transformation. I\u2019ve drawn a rectangle around the floor area so its effect can be easily seen:\n  In the centre of the stage, the horizontal offset is zero, and the tiles are drawn unmodified. As we move away from the centre of the stage, the rectangle becomes more and more skewed, and the entire layer also scrolls, giving the appearance of a flat horizontal plane behaving as if we were looking at a 3D scene.\n Why can\u2019t the front of the bath just go in Scroll 2? Because there are 16 rows of floor pixels that are beyond it. If the bath were in the same layer, it would be sheared along with the floor tiles, which wouldn\u2019t look right. You can see the sheared floor rows disappearing behind the bath here:\n  The same effect is used on the ceiling and the top of the bath. Nothing remarkable happens with Scroll 3, the most distant, background layer, until the round ends and man holds up his sign. (I used to think it was meant to be some sort of candy bar commercial, but it turns out the kanji says something like \u201cround complete\u201d).\n This has been a visual overview of how the CPS1 uses row scrolling in addition to layered tilemaps to create parallax effects. In the next post, we\u2019ll look under the hood at the code that makes all this happen.", "posttime": "2020-10-24 07:25:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u89c6\u5dee,scrolling,\u6eda\u52a8", "title": "\u8857\u5934\u6597\u58eb2\u4e2d\u89c6\u5dee\u6548\u679c\u7684\u884c\u6eda\u52a8", "title_en": "Row scrolling for parallax effects in Street Fighters 2", "transed": 1, "url": "https://sf2platinum.wordpress.com/2020/10/15/row-scrolling-for-parallax-effects/", "via": "", "real_tags": ["\u89c6\u5dee", "scrolling", "\u6eda\u52a8"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1030802, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u540c\u4e8bMatt Jibson\u548c\u6211\u6700\u8fd1\u53d1\u73b0\u81ea\u5df1\u4e0d\u5e78\u5730\u9677\u5165\u4e86\u8c03\u8bd5\u6765\u81eaRust\u7f16\u8bd1\u5668\u7684\u8fd9\u4e2a\u4e25\u91cd\u7684\u5f02\u6b65/\u7b49\u5f85\u76f8\u5173\u9519\u8bef\u7684\u5883\u5730\uff1a\n\u9519\u8bef[E0277]\uff1a`(dyn Futures\uff1a\uff1aStream&lt\uff1bItem=std\uff1a\uff1aresult\uff1a\uff1aResult&lt\uff1bstd\uff1a\uff1avec\uff1a\uff1aVec&lt\uff1brepr\uff1a\uff1aRow&gt\uff1b\uff0ccomm\uff1a\uff1aError&gt\uff1b&gt\uff1b+std\uff1a\uff1aMarker\uff1a\uff1aSend+std\uff1a\uff1aMarker\uff1a\uff1aUnpin+#39\uff1bStatic)`\u65e0\u6cd5\u5728\u7ebf\u7a0b\u4e4b\u95f4\u5b89\u5168\u5171\u4eab--&gt\uff1bsrc/Materialized/src/mux.rs\uff1a138\uff1a100|138|Async FN Handle_Connection(&amp\uff1bSelf\uff0cconn\uff1aSniffedStream&lt\uff1bTcpStream&gt\uff1b)-&gt\uff1bResult&lt\uff1b()\uff0c\u65e0\u8bba\u5982\u4f55\uff1a\uff1aError&gt\uff1b{|_^139||self.handleconnection(Conn).wait140||}\u3002|_^`(dyn Futures\uff1a\uff1aStream&lt\uff1bItem=std\uff1a\uff1aresult\uff1a\uff1aResult&lt\uff1bstd\uff1a\uff1avec\uff1a\uff1aVec&lt\uff1brepr\uff1a\uff1aRow&gt\uff1b\uff0ccomm\uff1a\uff1aError&gt\uff1b&gt\uff1b+std\uff1a\uff1aMarker\uff1a\uff1aSend+Std\uff1a\uff1aMarker\uff1a\uff1aUnpin+&#39\uff1bStatic)`\u65e0\u6cd5\u5728\u7ebf\u7a0b\u4e4b\u95f4\u5b89\u5168\u5171\u4eab|=\u5e2e\u52a9\uff1a`(Dyn Futures\uff1a\uff1aStream&lt\uff1bItem=std\uff1a\uff1aresult\uff1a\uff1aResult&lt\uff1bstd\uff1a\uff1avec\uff1a\uff1aVec&lt\uff1brepr\uff1a\uff1aRow&gt\uff1b)\u6ca1\u6709\u5b9e\u73b0\u7279\u6027`std\uff1a\uff1aMarker\uff1a\uff1aSync`\u3002\uff0ccomm\uff1a\uff1aError&gt\uff1b&gt\uff1b+std\uff1a\uff1aMarker\uff1a\uff1aSend+std\uff1a\uff1aMarker\uff1a\uff1aUnpin+&#39\uff1bStatic)`=\u5907\u6ce8\uff1a\u7531\u4e8e\u5bf9`std\uff1a\uff1aPtr\uff1a\uff1aUnique&lt\uff1b(Dyn Futures\uff1a\uff1aStream&lt\uff1bItem=std\uff1a\uff1aresult\uff1a\uff1aResult&lt\uff1bstd\uff1a\uff1avec\uff1a\uff1aVec&lt\uff1brepr\uff1a\uff1aRow&gt\uff1b\uff0ccomm\uff1a\uff1aError&gt\uff1b&gt\uff1b+std\uff1a\uff1aMarker\uff1a\uff1aSend+std\uff1a\uff1aMarker\uff1a\uff1aUnpin+#39\uff1bStatic)&gt\uff1b`=\u6ce8\u610f\uff1a\u5fc5\u586b\uff0c\u56e0\u4e3a\u5b83\u51fa\u73b0\u5728\u7c7b\u578b`std\uff1a\uff1aBoxed\uff1a\uff1aBox&lt\uff1b(dyn Futures\uff1a\uff1aStream&lt\uff1bItem=std\uff1a\uff1aresult\uff1a\uff1aResult&lt\uff1bstd\uff1a\uff1avec\uff1a\uff1aVec&lt\uff1brepr\uff1a\uff1aRow&gt\uff1b\uff0ccomm\uff1a\uff1aError&gt\uff1b&gt\uff1b+std\uff1a\uff1aMarker\uff1a\uff1aSend+std\uff1a\uff1aMarker\uff1a\uff1aUnpin+&#39\uff1bStatic)&gt\uff1b\u4e2d\u3002`=\u6ce8\u610f\uff1a\u5fc5\u586b\uff0c\u56e0\u4e3a\u5b83\u51fa\u73b0\u5728\u7c7b\u578b`std\uff1a\uff1aoption\uff1a\uff1aOption&lt\uff1bstd\uff1a\uff1aboxed\uff1a\uff1aBox&lt\uff1b(dyn Futures\uff1a\uff1aStream&lt\uff1bItem=std\uff1a\uff1aresult\uff1a\uff1aResult&lt\uff1bstd\uff1a\uff1avec\uff1a\uff1aVec&lt\uff1brepr\uff1a\uff1aRow&gt\uff1b\uff0cComm\uff1a\uff1aError&gt\uff1b&gt\uff1b+std\uff1a\uff1aMarker\uff1a\uff1aSend+std\uff1a\uff1aMarker\uff1a\uff1aUnpin)&gt\uff1b\u4e2d\u3002`=\u5907\u6ce8\uff1a\u5fc5\u9700\uff0c\u56e0\u4e3a\u5b83\u51fa\u73b0\u5728`coord\uff1a\uff1aSession\uff1a\uff1aPortal`=Note\uff1aRequired\u7c7b\u578b\u4e2d\uff0c\u56e0\u4e3a\u5b83\u51fa\u73b0\u5728`&amp\uff1bcoord\uff1a\uff1aSession\uff1a\uff1aPortal`=\u5907\u6ce8`&amp\uff1bcoord\uff1a\uff1aSession\uff1a\uff1aSend`\u7684\u5b9e\u65bd\u8981\u6c42\u4e2d\uff0c\u56e0\u4e3a\u5b83\u51fa\u73b0\u5728`for&lt\uff1b&#39\uff1bt0\u3001&#39\uff1bt1\u3001&#39\uff1bt2\u3001&#39\uff1bt3\u3001&#39\uff1bt4\u3001&#39\uff1bt5\u3001&#39\uff1bt6\u3001&#39\uff1bt5\u3001&#39\uff1bt6\u3001&#39\uff1bt4\u3001&#39\uff1bt5\u3001&#39\uff1bt6\u3001&#39\uff1bt2\u3001&#39\uff1bt3\u3001&#39\uff1bt4\u3001&#39\uff1bt5\u3001&#39\uff1bt6\u3001&#39\uff1bT7\uff0c&#39\uff1bt8&gt\uff1b{std\uff1a\uff1aFuture\uff1a\uff1aResumeTy\uff0c&amp\uff1br MUT pgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine&lt\uff1bpgwire\uff1a\uff1aserver\uff1a\uff1aConn&lt\uff1bore\uff1a\uff1anetio\uff1a\uff1aSniffedStream&lt\uff1btokio\uff1a\uff1anet\uff1a\uff1aTcpStream&gt\uff1b&gt\uff1b&gt\uff1b\uff0cstd\uff1a\uff1aString\uff1a\uff1aString\uff0cpgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine&lt\uff1bpgwire\uff1a\uff1aserver\uff1a\uff1aConn&lt\uff1bore\uff1a\uff1anetio\uff1a\uff1aSniffedStream&lt\uff1btokio\uff1a\uff1anet\uff1a\uff1aTcpStream&gt\uff1b&gt\uff1b&gt\uff1b\uff0c&amp\uff1b\u7684mut coord\uff1a\uff1aSessionClient\uff0ccoord\uff1a\uff1aSessionClient\uff0c&amp\uff1bt0 coord\uff1a\uff1aSession\uff1a\uff1aSession\uff0c&amp\uff1b&#39\uff1bt1 MUT coord\uff1a\uff1aSession\uff1a\uff1aSession\uff0c&amp\uff1b&amp\uff1b&#39\uff1bT2\u5b57\u7b26\u4e32\uff0c&amp\uff1bT3 std\uff1a\uff1astring\uff1a\uff1astring\uff0cstd\uff1a\uff1aoption\uff1a\uff1aoption&lt\uff1b&amp\uff1b&#39\uff1bt4 coord\uff1a\uff1asession\uff1a\uff1aPortal&gt\uff1b\uff0cTokio_postgres\uff1a\uff1aError\uff1a\uff1asqlState\uff1a\uff1asqlState\uff0cIml Futures\uff1a\uff1aFuture\uff0c()\uff0c&amp\uff1b&39\uff1bT7 coord\uff1a\uff1aSession\uff1a\uff1aPortal\uff0cIml Futures\uff1a\uff1aFuture}`=\u5907\u6ce8\uff1a\u5fc5\u9700\uff0c\u56e0\u4e3a\u5b83\u51fa\u73b0\u5728\u7c7b\u578b`[Static generator@pgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine\uff1a\uff1a&lt\uff1bA&gt\uff1b\uff1a\uff1adescribe_portal\uff1a\uff1a#0 0\uff1a&amp\uff1bmut pgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine&lt\uff1bpgwire\uff1a\uff1aserver\uff1a\uff1aConn&lt\uff1bore\uff1a\uff1anetio\uff1a\uff1aSniffedStream&lt\uff1b]\u4e2d\u3002Tokio\uff1a\uff1aNet\uff1a\uff1aTcpStream&gt\uff1b&gt\uff1b&gt\uff1b\uff0c1\uff1astd\uff1a\uff1astring\uff1a\uff1aString\uff0c&lt\uff1b&#39\uff1br\uff0c&#39\uff1bs\uff0c&#39\uff1bt0\uff0c&#39\uff1bt1\uff0c&#39\uff1bt2\uff0c&#39\uff1bT3\uff0c&#39\uff1bT4\uff0c&#39\uff1bT5\uff0c&#39\uff1bT6\uff0c&#39\uff1bT7\uff0c&#39\uff1bT8&gt\uff1b{std\uff1a\uff1aFuture\uff1a\uff1aResumeTy\uff0c&amp\uff1b&#39\uff1bR MUT pgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine&lt\uff1bpgwire\uff1a\uff1aserver\uff1a\uff1aConn&lt\uff1bore\uff1a\uff1anetio\uff1a\uff1aSniffedStream&lt\uff1btokio\uff1a\uff1anet\uff1a\uff1aTcpStream&gt\uff1b&gt\uff1b&gt\uff1b\uff0cstd\uff1a\uff1aString\uff1a\uff1aString\uff0cpgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine&lt\uff1bpgwire\uff1a\uff1aserver\uff1a\uff1aConn&lt\uff1bore\uff1a\uff1anetio\uff1a\uff1aSniffedStream&lt\uff1btokio\uff1a\uff1anet\uff1a\uff1aTcpStream&gt\uff1b&gt\uff1b&gt\uff1b\uff0c&amp\uff1b\u7684MUT Coord\uff1a\uff1aSessionClient\uff0cCoord\uff1a\uff1aSessionClient\uff0c&amp\uff1b&39\uff1bT0 coord\uff1a\uff1asession\uff1a\uff1asession\uff0c&amp\uff1b&#39\uff1bt1mut coord\uff1a\uff1asession\uff1a\uff1asession\uff0c&amp\uff1b&#39\uff1bt2str\uff0c&amp\uff1b&#39\uff1bt3 std\uff1a\uff1astring\uff0cstd\uff1a\uff1aoption\uff1a\uff1aoption&lt\uff1b&amp\uff1b&#39\uff1bt4 coord\uff1a\uff1asession\uff1a\uff1aportal&gt\uff1b\uff0cTokio_postgres\uff1a\uff1aerror\uff1a\uff1asqlstate\uff1a\uff1aSqlState\uff0cImpl Futures\uff1a\uff1aFuture\uff0c()\uff0c&amp\uff1b&#39\uff1bT7 coord\uff1a\uff1aSession\uff1a\uff1aPortal\uff0cIml Futures\uff1a\uff1aFuture}]`=\u6ce8\u610f\uff1a\u5fc5\u586b\uff0c\u56e0\u4e3a\u5b83\u51fa\u73b0\u5728`std\uff1a\uff1afuture\uff1a\uff1afrom_generator\uff1a\uff1aGenFuture&lt\uff1b[static generator@pgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine\uff1a\uff1a&lt\uff1bA&gt\uff1b\uff1a\uff1adescribe_portal\uff1a\uff1a#0 0\uff1a&amp\uff1bmut pgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine&lt\uff1bpgwire\uff1a\uff1aserver\uff1a\uff1aConn&lt\uff1bore\uff1a\uff1anetio\uff1a\uff1aSniffedStream&lt\uff1btokio\uff1a\uff1anet\uff1a\uff1aTcpStream&gt\uff1b&gt\uff1b&gt\uff1b\u7c7b\u578b\u4e2d\u3002\uff0c1\uff1astd\uff1a\uff1aString\uff1a\uff1a&lt\uff1b&#39\uff1br\uff0c&#39\uff1bs\uff0c&#39\uff1bt0\uff0c&#39\uff1bt1\uff0c&#39\uff1bt2\uff0c&#39\uff1bT3\uff0c&#39\uff1bt4\uff0c&#39\uff1bt5\uff0c&#39\uff1bt6\uff0c&#39\uff1bt7\uff0c&#39\uff1bt8&gt\uff1b{std\uff1a\uff1aFuture\uff1a\uff1aResumeTy\uff0c&amp\uff1br mut pgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine&lt\uff1bpgwire\uff1a\uff1aserver\uff1a\uff1aConn&lt\uff1bOre\uff1a\uff1anetio\uff1a\uff1aSniffedStream&lt\uff1btokio\uff1a\uff1anet\uff1a\uff1aTcpStream&gt\uff1b&gt\uff1b&gt\uff1b\uff0cstd\uff1a\uff1aString\uff1a\uff1aString\uff0cpgwire\uff1a\uff1aprotocol\uff1a\uff1aStateMachine&lt\uff1bpgwire\uff1a\uff1aserver\uff1a\uff1aConn&lt\uff1bore\uff1a\uff1anetio\uff1a\uff1aSniffedStream&lt\uff1btokio\uff1a\uff1anet\uff1a\uff1aTcpStream&gt\uff1b&gt\uff1b&gt\uff1b\uff0c&amp\uff1b\u7684MUT Coord\uff1a\uff1aSessionClient\uff0cCoord\uff1a\uff1aSessionClient\uff0c&amp\uff1bt0 Coord\uff1a\uff1aSession\uff1a\uff1aSession\uff0c&amp\uff1b&39\uff1bT1\u9759\u97f3\u4ee3\u7801\uff1a\uff1aSession\uff1a\uff1aSession\uff0c&amp\uff1b&amp\uff1b&#39\uff1bT2\u5b57\u7b26\u4e32\uff0c&amp\uff1b&#39\uff1bT3 STD\uff1a\uff1aString\uff1a\uff1aString\uff0cSTD\uff1a\uff1aOption\uff1a\uff1aOption&l\n\u60a8\u53ef\u4ee5\u5728GitHub\u4e0a\u67e5\u770b\u5b8c\u6574\u534f\u8bae\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u6211\u5c06\u5c3d\u6700\u5927\u52aa\u529b\u5728\u8fd9\u91cc\u5c55\u793a\u4e00\u4e2a\u7b80\u5316\u7248\u672c\u3002\u4e0eRust\u4e2d\u7684\u5927\u591a\u6570\u73b0\u4ee3\u7f51\u7edc\u4ee3\u7801\u4e00\u6837\uff0c\u6211\u4eec\u7684\u5b9e\u73b0\u5b8c\u5168\u662f\u5f02\u6b65\u7684\uff0c\u4f7f\u7528\u6700\u8fd1\u7a33\u5b9a\u7684\u5f02\u6b65/\u7b49\u5f85\u8bed\u6cd5\u3002\nStruct session{portals\uff1aHashMap&lt\uff1bstring\uff0cPortal&&gt;\uff0c}struct Portal{SQL\uff1astring\uff0cRow_Rows\uff1aOption&lt\uff1bVec&lt\uff1bRow&gt\uff1b\uff0c}Async FN Execute_Query(SQL\uff1a&amp\uff1bstr)-&gt\uff1bResult&lt\uff1bvec&lt\uff1bRow&gt\uff1b\uff0cError&gt\uff1b{/*...*/}\u5f02\u6b65FN HANDLE_EXECUTE(CONN\uff1aCONN\uff0cSESSION\uff1aSESSION\uff0cPORTAL_NAME\uff1a&amp\uff1bSTR\uff0cMAX_ROWS\uff1ausize\uff0c)-&gt\uff1bresult&lt\uff1b()\uff0cError&gt\uff1b{let portal=match session.portals.get_mut(Portal_Name){ome(Portal)=&gt\uff1bportal\uff0cNONE=&gt\uff1bbaal\uff01(&#34\uff1b\u672a\u77e5\u7aef\u53e3\u3002\n.", "note_en": "My colleague  Matt Jibson and I recently found ourselvesin the unfortunate situation of debugging this hefty async/await-related errorfrom the Rust compiler:\n error[E0277]: `(dyn futures::Stream&lt;Item = std::result::Result&lt;std::vec::Vec&lt;repr::Row&gt;, comm::Error&gt;&gt; + std::marker::Send + std::marker::Unpin + &#39;static)` cannot be shared between threads safely --&gt; src/materialized/src/mux.rs:138:100 |138 | async fn handle_connection(&amp;self, conn: SniffedStream&lt;TcpStream&gt;) -&gt; Result&lt;(), anyhow::Error&gt; { | ____________________________________________________________________________________________________^139 | | self.handle_connection(conn).await140 | | } | |_____^ `(dyn futures::Stream&lt;Item = std::result::Result&lt;std::vec::Vec&lt;repr::Row&gt;, comm::Error&gt;&gt; + std::marker::Send + std::marker::Unpin + &#39;static)` cannot be shared between threads safely | = help: the trait `std::marker::Sync` is not implemented for `(dyn futures::Stream&lt;Item = std::result::Result&lt;std::vec::Vec&lt;repr::Row&gt;, comm::Error&gt;&gt; + std::marker::Send + std::marker::Unpin + &#39;static)` = note: required because of the requirements on the impl of `std::marker::Sync` for `std::ptr::Unique&lt;(dyn futures::Stream&lt;Item = std::result::Result&lt;std::vec::Vec&lt;repr::Row&gt;, comm::Error&gt;&gt; + std::marker::Send + std::marker::Unpin + &#39;static)&gt;` = note: required because it appears within the type `std::boxed::Box&lt;(dyn futures::Stream&lt;Item = std::result::Result&lt;std::vec::Vec&lt;repr::Row&gt;, comm::Error&gt;&gt; + std::marker::Send + std::marker::Unpin + &#39;static)&gt;` = note: required because it appears within the type `std::option::Option&lt;std::boxed::Box&lt;(dyn futures::Stream&lt;Item = std::result::Result&lt;std::vec::Vec&lt;repr::Row&gt;, comm::Error&gt;&gt; + std::marker::Send + std::marker::Unpin + &#39;static)&gt;&gt;` = note: required because it appears within the type `coord::session::Portal` = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;coord::session::Portal` = note: required because it appears within the type `for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1, &#39;t2, &#39;t3, &#39;t4, &#39;t5, &#39;t6, &#39;t7, &#39;t8&gt; {std::future::ResumeTy, &amp;&#39;r mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, std::string::String, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, &amp;&#39;s mut coord::SessionClient, coord::SessionClient, &amp;&#39;t0 coord::session::Session, &amp;&#39;t1 mut coord::session::Session, &amp;&#39;t2 str, &amp;&#39;t3 std::string::String, std::option::Option&lt;&amp;&#39;t4 coord::session::Portal&gt;, tokio_postgres::error::sqlstate::SqlState, impl futures::Future, (), &amp;&#39;t7 coord::session::Portal, impl futures::Future}` = note: required because it appears within the type `[static generator@pgwire::protocol::StateMachine::&lt;A&gt;::describe_portal::#0 0:&amp;mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, 1:std::string::String for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1, &#39;t2, &#39;t3, &#39;t4, &#39;t5, &#39;t6, &#39;t7, &#39;t8&gt; {std::future::ResumeTy, &amp;&#39;r mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, std::string::String, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, &amp;&#39;s mut coord::SessionClient, coord::SessionClient, &amp;&#39;t0 coord::session::Session, &amp;&#39;t1 mut coord::session::Session, &amp;&#39;t2 str, &amp;&#39;t3 std::string::String, std::option::Option&lt;&amp;&#39;t4 coord::session::Portal&gt;, tokio_postgres::error::sqlstate::SqlState, impl futures::Future, (), &amp;&#39;t7 coord::session::Portal, impl futures::Future}]` = note: required because it appears within the type `std::future::from_generator::GenFuture&lt;[static generator@pgwire::protocol::StateMachine::&lt;A&gt;::describe_portal::#0 0:&amp;mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, 1:std::string::String for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1, &#39;t2, &#39;t3, &#39;t4, &#39;t5, &#39;t6, &#39;t7, &#39;t8&gt; {std::future::ResumeTy, &amp;&#39;r mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, std::string::String, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, &amp;&#39;s mut coord::SessionClient, coord::SessionClient, &amp;&#39;t0 coord::session::Session, &amp;&#39;t1 mut coord::session::Session, &amp;&#39;t2 str, &amp;&#39;t3 std::string::String, std::option::Option&lt;&amp;&#39;t4 coord::session::Portal&gt;, tokio_postgres::error::sqlstate::SqlState, impl futures::Future, (), &amp;&#39;t7 coord::session::Portal, impl futures::Future}]&gt;` = note: required because it appears within the type `impl futures::Future` = note: required because it appears within the type `impl futures::Future` = note: required because it appears within the type `for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1, &#39;t2, &#39;t3, &#39;t4, &#39;t5, &#39;t6, &#39;t7, &#39;t8, &#39;t9, &#39;t10, &#39;t11&gt; {std::future::ResumeTy, &amp;&#39;r mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, &amp;&#39;s mut pgwire::codec::FramedConn&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, pgwire::codec::FramedConn&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, impl futures::Future, (), std::option::Option&lt;pgwire::message::FrontendMessage&gt;, std::time::Instant, &amp;&#39;t1 str, std::string::String, impl futures::Future, std::vec::Vec&lt;u32&gt;, impl futures::Future, std::vec::Vec&lt;pgrepr::format::Format&gt;, std::vec::Vec&lt;std::option::Option&lt;std::vec::Vec&lt;u8&gt;&gt;&gt;, impl futures::Future, i32, usize, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future}` = note: required because it appears within the type `[static generator@pgwire::protocol::StateMachine::&lt;A&gt;::advance_ready::#0 0:&amp;mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt; for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1, &#39;t2, &#39;t3, &#39;t4, &#39;t5, &#39;t6, &#39;t7, &#39;t8, &#39;t9, &#39;t10, &#39;t11&gt; {std::future::ResumeTy, &amp;&#39;r mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, &amp;&#39;s mut pgwire::codec::FramedConn&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, pgwire::codec::FramedConn&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, impl futures::Future, (), std::option::Option&lt;pgwire::message::FrontendMessage&gt;, std::time::Instant, &amp;&#39;t1 str, std::string::String, impl futures::Future, std::vec::Vec&lt;u32&gt;, impl futures::Future, std::vec::Vec&lt;pgrepr::format::Format&gt;, std::vec::Vec&lt;std::option::Option&lt;std::vec::Vec&lt;u8&gt;&gt;&gt;, impl futures::Future, i32, usize, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future}]` = note: required because it appears within the type `std::future::from_generator::GenFuture&lt;[static generator@pgwire::protocol::StateMachine::&lt;A&gt;::advance_ready::#0 0:&amp;mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt; for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1, &#39;t2, &#39;t3, &#39;t4, &#39;t5, &#39;t6, &#39;t7, &#39;t8, &#39;t9, &#39;t10, &#39;t11&gt; {std::future::ResumeTy, &amp;&#39;r mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, &amp;&#39;s mut pgwire::codec::FramedConn&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, pgwire::codec::FramedConn&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, impl futures::Future, (), std::option::Option&lt;pgwire::message::FrontendMessage&gt;, std::time::Instant, &amp;&#39;t1 str, std::string::String, impl futures::Future, std::vec::Vec&lt;u32&gt;, impl futures::Future, std::vec::Vec&lt;pgrepr::format::Format&gt;, std::vec::Vec&lt;std::option::Option&lt;std::vec::Vec&lt;u8&gt;&gt;&gt;, impl futures::Future, i32, usize, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future, impl futures::Future}]&gt;` = note: required because it appears within the type `impl futures::Future` = note: required because it appears within the type `impl futures::Future` = note: required because it appears within the type `for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1&gt; {std::future::ResumeTy, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, i32, std::vec::Vec&lt;(std::string::String, std::string::String)&gt;, &amp;&#39;r mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, impl futures::Future, (), pgwire::protocol::State, impl futures::Future, impl futures::Future, coord::SessionClient, impl futures::Future}` = note: required because it appears within the type `[static generator@pgwire::protocol::StateMachine::&lt;A&gt;::run::#0 0:pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, 1:i32, 2:std::vec::Vec&lt;(std::string::String, std::string::String)&gt; for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1&gt; {std::future::ResumeTy, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, i32, std::vec::Vec&lt;(std::string::String, std::string::String)&gt;, &amp;&#39;r mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, impl futures::Future, (), pgwire::protocol::State, impl futures::Future, impl futures::Future, coord::SessionClient, impl futures::Future}]` = note: required because it appears within the type `std::future::from_generator::GenFuture&lt;[static generator@pgwire::protocol::StateMachine::&lt;A&gt;::run::#0 0:pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, 1:i32, 2:std::vec::Vec&lt;(std::string::String, std::string::String)&gt; for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1&gt; {std::future::ResumeTy, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, i32, std::vec::Vec&lt;(std::string::String, std::string::String)&gt;, &amp;&#39;r mut pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, impl futures::Future, (), pgwire::protocol::State, impl futures::Future, impl futures::Future, coord::SessionClient, impl futures::Future}]&gt;` = note: required because it appears within the type `impl futures::Future` = note: required because it appears within the type `impl futures::Future` = note: required because it appears within the type `for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1, &#39;t2, &#39;t3, &#39;t4, &#39;t5, &#39;t6, &#39;t7, &#39;t8, &#39;t9, &#39;t10&gt; {std::future::ResumeTy, &amp;&#39;r pgwire::Server, ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;, pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;, &amp;&#39;s mut pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;, impl futures::Future, (), std::result::Result&lt;pgwire::message::FrontendStartupMessage, std::io::Error&gt;, pgwire::message::FrontendStartupMessage, i32, std::vec::Vec&lt;(std::string::String, std::string::String)&gt;, u32, coord::SessionClient, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, impl futures::Future, bool, pgwire::Server, &amp;&#39;t1 coord::Client, coord::Client, &amp;&#39;t2 mut coord::Client, impl futures::Future, &amp;&#39;t4 mut ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;, u8, [u8; 1], &amp;&#39;t5 [u8], &amp;&#39;t6 [u8; 1], tokio::io::util::write_all::WriteAll&lt;&#39;t7, ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;, &amp;&#39;t8 openssl::ssl::SslAcceptor, impl futures::Future, tokio::io::util::write_all::WriteAll&lt;&#39;t10, pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;}` = note: required because it appears within the type `[static generator@pgwire::Server::handle_connection::#0 0:&amp;pgwire::Server, 1:ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt; for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1, &#39;t2, &#39;t3, &#39;t4, &#39;t5, &#39;t6, &#39;t7, &#39;t8, &#39;t9, &#39;t10&gt; {std::future::ResumeTy, &amp;&#39;r pgwire::Server, ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;, pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;, &amp;&#39;s mut pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;, impl futures::Future, (), std::result::Result&lt;pgwire::message::FrontendStartupMessage, std::io::Error&gt;, pgwire::message::FrontendStartupMessage, i32, std::vec::Vec&lt;(std::string::String, std::string::String)&gt;, u32, coord::SessionClient, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, impl futures::Future, bool, pgwire::Server, &amp;&#39;t1 coord::Client, coord::Client, &amp;&#39;t2 mut coord::Client, impl futures::Future, &amp;&#39;t4 mut ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;, u8, [u8; 1], &amp;&#39;t5 [u8], &amp;&#39;t6 [u8; 1], tokio::io::util::write_all::WriteAll&lt;&#39;t7, ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;, &amp;&#39;t8 openssl::ssl::SslAcceptor, impl futures::Future, tokio::io::util::write_all::WriteAll&lt;&#39;t10, pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;}]` = note: required because it appears within the type `std::future::from_generator::GenFuture&lt;[static generator@pgwire::Server::handle_connection::#0 0:&amp;pgwire::Server, 1:ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt; for&lt;&#39;r, &#39;s, &#39;t0, &#39;t1, &#39;t2, &#39;t3, &#39;t4, &#39;t5, &#39;t6, &#39;t7, &#39;t8, &#39;t9, &#39;t10&gt; {std::future::ResumeTy, &amp;&#39;r pgwire::Server, ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;, pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;, &amp;&#39;s mut pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;, impl futures::Future, (), std::result::Result&lt;pgwire::message::FrontendStartupMessage, std::io::Error&gt;, pgwire::message::FrontendStartupMessage, i32, std::vec::Vec&lt;(std::string::String, std::string::String)&gt;, u32, coord::SessionClient, pgwire::protocol::StateMachine&lt;pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;, impl futures::Future, bool, pgwire::Server, &amp;&#39;t1 coord::Client, coord::Client, &amp;&#39;t2 mut coord::Client, impl futures::Future, &amp;&#39;t4 mut ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;, u8, [u8; 1], &amp;&#39;t5 [u8], &amp;&#39;t6 [u8; 1], tokio::io::util::write_all::WriteAll&lt;&#39;t7, ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;, &amp;&#39;t8 openssl::ssl::SslAcceptor, impl futures::Future, tokio::io::util::write_all::WriteAll&lt;&#39;t10, pgwire::server::Conn&lt;ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;&gt;&gt;}]&gt;` = note: required because it appears within the type `impl futures::Future` = note: required because it appears within the type `impl futures::Future` = note: required because it appears within the type `for&lt;&#39;r, &#39;s&gt; {std::future::ResumeTy, &amp;&#39;r pgwire::Server, ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;, impl futures::Future, ()}` = note: required because it appears within the type `[static generator@src/materialized/src/mux.rs:138:100: 140:6 _self:&amp;pgwire::Server, conn:ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt; for&lt;&#39;r, &#39;s&gt; {std::future::ResumeTy, &amp;&#39;r pgwire::Server, ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;, impl futures::Future, ()}]` = note: required because it appears within the type `std::future::from_generator::GenFuture&lt;[static generator@src/materialized/src/mux.rs:138:100: 140:6 _self:&amp;pgwire::Server, conn:ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt; for&lt;&#39;r, &#39;s&gt; {std::future::ResumeTy, &amp;&#39;r pgwire::Server, ore::netio::SniffedStream&lt;tokio::net::TcpStream&gt;, impl futures::Future, ()}]&gt;` = note: required because it appears within the type `impl futures::Future` = note: required because it appears within the type `impl futures::Future` = note: required for the cast to the object type `dyn futures::Future&lt;Output = std::result::Result&lt;(), anyhow::Error&gt;&gt; + std::marker::Send`\n  It turns out there is a clever way to convince the compiler to spit out a farmore helpful error messages. I\u2019ve now forgotten this trick twice and so have hadto invent it thrice, so I figured it was time to write it down. Maybe you\u2019llfind it useful too.\n   The code in question is Materialize\u2019s implementation of the PostgreSQLnetwork protocol  1. Roughly speaking, the protocol works like this:\n The server plans the SQL query. If the query is valid, the serverestablishes a \u201cportal\u201d for the query.  2\n  The client optionally asks questions about the portal, like \u201chow manycolumns will be in the result set?\u201d and \u201cwhat are the types of thosecolumns?\u201d\n  The client asks the server to execute the portal, optionally asking thatno more than  n rows are returned.\n  The server executes the query, and sends up to  n rows back to the client.If the result contains more than  n rows, the server additionally tellsthe client \u201cyou might want to ask for more rows.\u201d\n You can view the gory details of the full protocol  on GitHub.I\u2019m going to do my best to present a simplified version here. Like most modernnetworking code in Rust, our implementation is entirely asynchronous,using the recently-stabilized  async/await syntax.\n  struct  Session  {  portals :  HashMap &lt; String ,  Portal &gt; , } struct  Portal  {  sql :  String ,  remaining_rows :  Option &lt; Vec &lt; Row &gt;&gt; , } async  fn  execute_query ( sql :  &amp; str )  -&gt;  Result &lt; Vec &lt; Row &gt; ,  Error &gt;  {  /* ... */  } async  fn  handle_execute (  conn :  Conn ,  session :  Session ,  portal_name :  &amp; str ,  max_rows :  usize , )  -&gt;  Result &lt; (),  Error &gt;  {  let  portal  =  match  session .portals .get_mut ( portal_name )  {  Some ( portal )  =&gt;  portal ,  None  =&gt;  bail! ( &#34;unknown port\n......", "posttime": "2020-10-24 07:25:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u8c03\u8bd5,async,std", "title": "\u8c03\u8bd5Rust\u4e2d\u7684\u5f02\u6b65\u53d1\u751f\u5668\u9519\u8bef", "title_en": "Debugging async generator errors in Rust", "transed": 1, "url": "https://meltware.com/2020/10/21/rust-async-nonsense.html?", "via": "", "real_tags": ["rust", "\u8c03\u8bd5", "async", "std"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1030801, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e94\u5927\u4f17\u8981\u6c42\uff0c\u6211\u6b63\u5728\u505a\u53e6\u4e00\u7bc7LLVM\u5e16\u5b50\u3002\u8fd9\u4e00\u6b21\uff0c\u5b83\u662f\u5355\u4e00\u9759\u6001\u8d4b\u503c(\u6216SSA)\u5f62\u5f0f\uff0c\u8fd9\u662f\u4f18\u5316\u7f16\u8bd1\u5668\u7684\u4e2d\u95f4\u8868\u793a\u4e2d\u7684\u4e00\u4e2a\u5e38\u89c1\u7279\u6027\u3002\n\u5c31\u50cf\u4e0a\u4e00\u4e2a\u4e00\u6837\uff0cSSA\u662f\u7f16\u8bd1\u5668\u548cIR\u8bbe\u8ba1\u7684\u4e3b\u9898\uff0c\u6211\u5927\u90e8\u5206\u90fd\u80fd\u7406\u89e3\uff0c\u4f46\u53ef\u4ee5\u4ece\u4e00\u4e9b\u81ea\u6211\u6307\u5bfc\u7684\u5b66\u4e60\u4e2d\u53d7\u76ca\u3002\u6211\u4eec\u5230\u4e86\u3002\n\u5728\u6700\u9ad8\u7ea7\u522b\uff0c\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u662f\u5355\u4e00\u7684\uff1a\u5c06\u4e00\u4e9b\u6e90\u8bed\u8a00\u8f93\u5165\u8f6c\u6362\u6210\u4e00\u4e9b\u673a\u5668\u8bed\u8a00\u8f93\u51fa\u3002\u5728\u5185\u90e8\uff0c\u8fd9\u53ef\u4ee5\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u6e05\u6670\u63cf\u8ff0\u7684\u4efb\u52a1\uff1a\n\u9a8c\u8bc1AST(\u4f8b\u5982\uff0c\u786e\u4fdd\u6807\u8bc6\u7b26\u7684\u6240\u6709\u4f7f\u7528\u90fd\u4e0e\u6e90\u8bed\u8a00\u7684\u4f5c\u7528\u57df\u548c\u5b9a\u4e49\u89c4\u5219\u4e00\u81f4)3\u3002\n\u5c06AST\u7ffb\u8bd1\u6210\u673a\u5668\u7801\uff0c\u53ca\u5176\u6240\u6709\u590d\u6742\u6027(\u6307\u4ee4\u9009\u62e9\u3001\u5bc4\u5b58\u5668\u5206\u914d\u3001\u5e27\u751f\u6210&amp\uff1bc)\u3002\n\u5728\u5355\u904d\u7f16\u8bd1\u5668\u4e2d\uff0c(4)\u662f\u6574\u4f53\u5f0f\u7684\uff1a\u673a\u5668\u4ee3\u7801\u662f\u5728\u7f16\u8bd1\u5668\u904d\u5386AST\u65f6\u751f\u6210\u7684\uff0c\u4e0d\u4f1a\u91cd\u65b0\u8bbf\u95ee\u4ee5\u524d\u751f\u6210\u7684\u4ee3\u7801\u3002\u8fd9\u662f\u975e\u5e38\u5feb\u7684(\u5c31\u7f16\u8bd1\u5668\u6027\u80fd\u800c\u8a00)\uff0c\u4f46\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u9650\u5236\uff1a\n\u4f18\u5316\u6f5c\u529b\uff1a\u56e0\u4e3a\u673a\u5668\u4ee3\u7801\u662f\u5728\u4e00\u6b21\u904d\u5386\u4e2d\u751f\u6210\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u4ee5\u8fdb\u884c\u4f18\u5316\u3002\u5355\u904d\u7f16\u8bd1\u5668\u503e\u5411\u4e8e\u751f\u6210\u6781\u5176\u7f13\u6162\u548c\u4fdd\u5b88\u7684\u673a\u5668\u4ee3\u7801\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff1asystem V ABI(\u7531Linux\u548cMacOS\u4f7f\u7528)\u5728\u5f53\u524d\u5806\u6808\u6307\u9488(%rsp)\u4e4b\u5916\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684128\u5b57\u8282\u533a\u57df\uff0c\u5176\u5806\u6808\u5e27\u53ef\u4ee5\u653e\u5165\u5176\u4e2d\u7684\u53f6\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u8be5\u533a\u57df\u3002\u8fd9\u53c8\u8282\u7701\u4e86\u51fd\u6570\u5e8f\u8a00\u548c\u7ed3\u675f\u8bed\u4e2d\u7684\u4e00\u4e9b\u5806\u6808\u7ba1\u7406\u6307\u4ee4\u3002\n\u5355\u904d\u7f16\u8bd1\u5668\u5c06\u5f88\u96be\u5229\u7528ABI\u63d0\u4f9b\u7684\u8fd9\u79cd\u4f18\u5316\uff1a\u5b83\u9700\u8981\u5728\u6bcf\u4e2a\u81ea\u52a8\u53d8\u91cf\u88ab\u8bbf\u95ee\u65f6\u4e3a\u5b83\u4eec\u53d1\u51fa\u4e00\u4e2a\u5806\u6808\u69fd\uff0c\u5e76\u4e14\u5982\u679c\u6240\u6709\u53d8\u91cf\u90fd\u4f4d\u4e8e\u7ea2\u8272\u533a\u57df\u5185\uff0c\u5219\u4e0d\u80fd\u91cd\u65b0\u8bbf\u95ee\u5176\u51fd\u6570\u5e8f\u8a00\u4ee5\u8fdb\u884c\u64e6\u9664\u3002\n\u8bed\u8a00\u9650\u5236\uff1a\u5355\u904d\u7f16\u8bd1\u5668\u5f88\u96be\u505a\u51fa\u516c\u5171\u8bed\u8a00\u8bbe\u8ba1\u51b3\u7b56\uff0c\u6bd4\u5982\u5141\u8bb8\u5728\u58f0\u660e\u6216\u5b9a\u4e49\u4e4b\u524d\u4f7f\u7528\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u6709\u6548\u7684C++\uff1a\nClass rect{public\uff1aint area(){return width()*Height()\uff1b}int width(){return 5\uff1b}int high(){return 5\uff1b}}\uff1b\nC\u548cC++\u901a\u5e38\u8981\u6c42\u9884\u5148\u58f0\u660e\u548c/\u6216\u5b9a\u4e49\u6807\u8bc6\u7b26\uff0c\u4f46\u6210\u5458\u51fd\u6570\u4f53\u53ef\u4ee5\u5f15\u7528\u6574\u4e2a\u7c7b\u8303\u56f4\u3002\u8fd9\u5c06\u4f7f\u5355\u904d\u7f16\u8bd1\u5668\u611f\u5230\u6cae\u4e27\uff0c\u56e0\u4e3a\u5b83\u5e0c\u671bRECT\uff1a\uff1aWIDTH\u548cRECT\uff1a\uff1aHEIGHT\u5df2\u7ecf\u5b58\u5728\u4e8e\u67d0\u4e9b\u7528\u4e8e\u8c03\u7528\u751f\u6210\u7684\u7b26\u53f7\u67e5\u627e\u8868\u4e2d\u3002\n\u5bf9IR\u6267\u884c\u5206\u6790(\u6216\u901a\u9053)\uff0c\u5e76\u6839\u636e\u67d0\u4e9b\u4f18\u5316\u914d\u7f6e\u6587\u4ef6(\u4ee3\u7801\u5927\u5c0f\u3001\u6027\u80fd&amp\uff1bc)\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u3002\n\u8be5IR\u6216\u8005\u88ab\u7ffb\u8bd1\u6210\u673a\u5668\u4ee3\u7801\uff0c\u6216\u8005\u88ab\u964d\u4f4e\u5230\u53e6\u4e00\u4e2aIR\uff0c\u7528\u4e8e\u8fdb\u4e00\u6b65\u7684\u76ee\u6807\u4e13\u95e8\u5316\u6216\u4f18\u53164\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6613\u4e8e\u6b63\u786e\u8f6c\u6362\u4e14\u6613\u4e8e\u4f18\u5316\u7684IR\u3002\u8ba9\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5177\u6709\u9759\u6001\u5355\u4e00\u8d4b\u503c\u5c5e\u6027\u7684IRS\u4f1a\u586b\u8865\u8fd9\u4e2a\u7a7a\u767d\u3002\n\u5728\u5176\u6838\u5fc3\uff0c\u4efb\u4f55\u7a0b\u5e8f\u6e90\u7a0b\u5e8f\u7684SSA\u5f62\u5f0f\u53ea\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u7ea6\u675f\uff1a\u6240\u6709\u53d8\u91cf\u6070\u597d\u8d4b\u503c(\u5373\uff0c\u5b58\u50a8\u5230)\u4e00\u6b21\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5173\u4e8eFLAGS\u53d8\u91cf\uff0c\u4ee5\u4e0b\u51fd\u6570(\u5b9e\u9645\u4e0a\u4e0d\u662f\u975e\u5e38\u6709\u7528\u7684)\u4e0d\u662f\u6709\u6548\u7684SSA\u5f62\u5f0f\uff1a\nINT HELPUP_OPEN(char*fname){INT FLAGS=O_RDWR\uff1bIF(\uff01Access(fname\uff0cF_OK)){FLAGS|=O_CREAT\uff1b}int fd=open(fname\uff0cflag\uff0c0644)\uff1b\u8fd4\u56defd\uff1b}\u3002\n\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6807\u5fd7\u88ab\u5b58\u50a8\u4e3a\u4e24\u6b21\uff1a\u4e00\u6b21\u7528\u4e8e\u521d\u59cb\u5316\uff0c\u4ee5\u53ca(\u53ef\u80fd)\u5728\u6761\u4ef6\u4e3b\u4f53\u5185\u518d\u6b21\u5b58\u50a8\u3002\n\u4f5c\u4e3a\u7a0b\u5e8f\u5458\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u5199HELPUP_OPEN\uff0c\u4f7f\u6bcf\u4e2a\u81ea\u52a8\u53d8\u91cf\u53ea\u5b58\u50a8\u4e00\u6b21\uff1a\nInt help_open(char*fname){if(\uff01Access(fname\uff0cF_OK)){INT\u6807\u5fd7=O_RDWR|O_CREAT\uff1b\u8fd4\u56deOPEN(fNAME\uff0cFLAGS\uff0c0644)\uff1b}ELSE{INT FLAGS=O_RDWR\uff1bRETURN OPEN(fname\uff0cFLAGS\uff0c0644)\uff1b}}\u3002\n\u4f46\u8fd9\u662f\u7b28\u62d9\u548c\u91cd\u590d\u7684\uff1a\u6211\u4eec\u57fa\u672c\u4e0a\u9700\u8981\u590d\u5236\u4efb\u4f55\u53d8\u91cf\u540e\u9762\u7684\u6bcf\u4e00\u6761\u4f7f\u7528\u94fe\uff0c\u8fd9\u4e9b\u53d8\u91cf\u88ab\u5b58\u50a8\u5230\u4e0d\u6b62\u4e00\u6b21\u3002\u8fd9\u4e0d\u5229\u4e8e\u53ef\u8bfb\u6027\u3001\u53ef\u7ef4\u62a4\u6027\u6216\u4ee3\u7801\u5927\u5c0f\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u505a\u6211\u4eec\u4e00\u8d2f\u505a\u7684\u4e8b\u60c5\uff1a\u8ba9\u7f16\u8bd1\u5668\u4e3a\u6211\u4eec\u505a\u7e41\u91cd\u7684\u5de5\u4f5c\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5728\u4e24\u4e2a\u7b80\u5355\u89c4\u5219\u7684\u6761\u4ef6\u4e0b\uff0c\u5b58\u5728\u4ece\u6bcf\u4e2a\u6709\u6548\u7a0b\u5e8f\u5230\u7b49\u4ef7SSA\u5f62\u5f0f\u7684\u8f6c\u6362\u3002\n\u89c4\u52191\uff1a\u6bcf\u5f53\u6211\u4eec\u770b\u5230\u5b58\u50a8\u5230\u5df2\u7ecf\u5b58\u50a8\u7684\u53d8\u91cf\u7684\u5b58\u50a8\u65f6\uff0c\u6211\u4eec\u5c31\u7528\u8be5\u53d8\u91cf\u7684\u5168\u65b0\u201c\u7248\u672c\u201d\u66ff\u6362\u5b83\u3002\n\u4f7f\u7528\u89c4\u5219#1\u548c\u4e0a\u9762\u7684\u793a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528_N\u540e\u7f00\u91cd\u5199\u6807\u5fd7\u4ee5\u6307\u793a\u7248\u672c\uff1a\nINT HELPUP_OPEN(char*fname){INT FLAGS_0=O_RDWR\uff1b//\u5728\u6b64\u58f0\u660e\u4ee5\u907f\u514d\u5904\u7406C\u4f5c\u7528\u57df\u3002INT FLAGS_1\uff1b\u5982\u679c(\uff01Access(fname\uff0cF_OK)){FLAGS_1=FLAGS_0|O_CREAT\uff1b}int FD=OPEN(fname\uff0cFLAGS_1,0644)\uff1b\u8fd4\u56deFD\uff1b}\u3002\n\u6253\u5f00(...\uff0cFLAGS_1\uff0c...)\u3002\u662f\u4e0d\u6b63\u786e\u7684\uff1a\u5b83\u65e0\u6761\u4ef6\u5730\u8d4b\u503cO_CREATT\uff0c\u8fd9\u4e0d\u5728\u539f\u59cb\u51fd\u6570\u8bed\u4e49\u4e2d\u3002\n\u6253\u5f00(...\uff0cFLAGS_0\uff0c...)\u3002\u4e5f\u662f\u4e0d\u6b63\u786e\u7684\uff1a\u5b83\u4ece\u4e0d\u8d4b\u503cO_CREAT\uff0c\u51fa\u4e8e\u540c\u6837\u7684\u539f\u56e0\uff0c\u8fd9\u4e5f\u662f\u9519\u8bef\u7684\u3002\n\u89c4\u52192\uff1a\u6bcf\u5f53\u6211\u4eec\u9700\u8981\u6839\u636e\u63a7\u5236\u6d41\u9009\u62e9\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u90fd\u4f1a\u4f7f\u7528\u03c6\u51fd\u6570(\u03c6)\u6839\u636e\u6211\u4eec\u7684\u9009\u62e9\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\u3002\nINT HELPUP_OPEN(char*fname){INT FLAGS_0=O_RDWR\uff1b//\u5728\u6b64\u58f0\u660e\u4ee5\u907f\u514d\u5904\u7406C\u4f5c\u7528\u57df\u3002INT FLAGS_1\uff1b\u5982\u679c(\uff01Access(FNAME\uff0cF_OK)){FLAGS_1=FLAGS_0|O_CREAT\uff1b}INT FLAGS_2=\u03c6(FLAGS_0\uff0cFLAGS_1)\uff1bINT FD=OPEN(FNAME\uff0cFLAGS_2,0644)\uff1b\u8fd4\u56deFD\uff1b}\u3002\n\u6211\u4eec\u7684\u56f0\u5883\u89e3\u51b3\u4e86\uff1aOPEN\u59cb\u7ec8\u63a5\u53d7FLAGS_2\uff0c\u5176\u4e2dFLAGS_2\u662f\u5c06\u03c6\u5e94\u7528\u4e8eFLAGS_0\u548cFLAGS_1\u800c\u751f\u6210\u7684\u65b0\u7684ssa\u53d8\u91cf\u3002\n\u8fd8\u8981\u6ce8\u610f\uff0c\u03c6\u662f\u4e00\u4e2a\u7b26\u53f7\u51fd\u6570\uff1a\u5728\u5185\u90e8\u4f7f\u7528SSAForm\u7684\u7f16\u8bd1\u5668\u4e0d\u4f1a\u5728\u751f\u6210\u7684\u4ee3\u78015\u4e2d\u8c03\u7528\u771f\u6b63\u7684\u03c6\u51fd\u6570\u3002\u03c6\u7684\u5b58\u5728\u53ea\u662f\u4e3a\u4e86\u534f\u8c03\u89c4\u5219#1\u548c\u63a7\u5236\u6d41\u7684\u5b58\u5728\u3002\n\u56e0\u6b64\uff0c\u7528C\u793a\u4f8b\u8c08\u8bbaSSA\u8868\u5355\u6709\u70b9\u611a\u8822(\u56e0\u4e3a\u6211\u4eec\u9996\u5148\u8981\u7ffb\u8bd1\u7684\u662fC\u548c\u5176\u4ed6\u9ad8\u7ea7\u8bed\u8a00)\u3002\u8ba9\u6211\u4eec\u6df1\u5165\u4e86\u89e3LLVM\u7684IR\u5b9e\u9645\u4e0a\u662f\u5982\u4f55\u8868\u793a\u5b83\u4eec\u7684\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5f53\u6211\u4eec\u5728\u6ca1\u6709\u4f18\u5316\u7684\u60c5\u51b5\u4e0b\u901a\u8fc7clang\u8fd0\u884c\u6211\u4eec\u7684\u7b2c\u4e00\u4e2ahelp_open\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a\n\u5b9a\u4e49DSO_LOCAL I32@HELPUP_OPEN(i8*%fname)#0{entry\uff1a%fname.addr=alloca i8*\uff0cALIGN 8%FLAGS=ALLOCAI32\uff0cALIGN 4%FD=ALLOCAI32\uff0cALIGN 4\u5b58\u50a8I8*%fname\uff0cI8**%fname.addr\uff0cALIGN 8\u5b58\u50a8I32 2\uff0cI32*%\u6807\u5fd7\uff0cALIGN 4%0=\u52a0\u8f7di8*\uff0ci8**%fname.addr\uff0cALIGN 8%CALL=Call I32@Access(i8*%0\uff0cI32 0)#4%tobool=ICMP ne I32%\u547c\u53eb\uff0c0 br i1%tobool\uff0c\u6807\u7b7e%if.end\uff0c\u6807\u7b7e%if.Then\uff1a\uff1bPreds=%Entry%1=\u52a0\u8f7dI32\u3001I32*%\u6807\u5fd7\uff0c\u5bf9\u9f504%\u6216=\u6216I32%1\uff0c64\u5b58\u50a8I32%\u6216I32*%\u6807\u5fd7\uff0c\u5bf9\u9f504 br\u6807\u7b7e%if.end if.end\uff1a\uff1bPreds=%if.Then\uff0c%Entry%2=\u52a0\u8f7dI8*\uff0cI8**%fname.addr\uff0cAlign 8%3=\u52a0\u8f7dI32\uff0cI32*%\u6807\u5fd7\uff0cAlign 4%Call1=Call I32(I8*\uff0cI32\uff0c...)@OPEN(I8*%2\uff0cI32%3\uff0cI32 420)\u5b58\u50a8I32%Call1\uff0cI32*%FD\uff0cAlign 4%4=\u52a0\u8f7dI32\uff0cI32*%FD\uff0cAlign 4 ret I32%4}\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u6765\u81ea\u2026\u7684%3\u8c03\u7528OPEN\u3002\u6765\u81ea\u540d\u4e3a%FLAGS\u7684I32*\u7684\u52a0\u8f7d\uff1f\u03c6\u5728\u54ea\u91cc\uff1f\n\u8fd9\u662f\u6211\u5728\u9605\u8bfbLLVM\u7684IR\u65f6\u7ecf\u5e38\u72af\u7684\u9519\u8bef\uff1a\u53ea\u6709\u503c\uff0c\u800c\u4e0d\u662f\u5185\u5b58\uff0c\u624d\u662fSSA\u5f62\u5f0f\u3002\u56e0\u4e3a\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u7981\u7528\u4e86\u4f18\u5316\uff0c\u6240\u4ee5%FLAGS\u53ea\u662f\u4e00\u4e2a\u5806\u6808\u69fd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4e2d\u5b58\u50a8\u4efb\u610f\u591a\u6b21\uff0c\u8fd9\u6b63\u662fLLVM\u5728\u4e0a\u9762\u9009\u62e9\u505a\u7684\u3002\n\u56e0\u6b64\uff0c\u5f53\u4f20\u9012\u76f4\u63a5\u4f7f\u7528\u5806\u6808\u63d2\u69fd\u7684IR\u65f6\uff0cLLVM\u57fa\u4e8eSSA\u7684\u4f18\u5316\u6ca1\u6709\u90a3\u4e48\u6709\u7528\u3002\u6211\u4eec\u5e0c\u671b\u5c3d\u53ef\u80fd\u6700\u5927\u9650\u5ea6\u5730\u4f7f\u7528SSA\u53d8\u91cf\uff0c\u4ee5\u4f7f\u672a\u6765\u7684\u4f18\u5316\u8fc7\u7a0b\u5c3d\u53ef\u80fd\u6709\u6548\u3002\n\u6b64\u6587\u4ef6(\u4f18\u5316\u8fc7\u7a0b)\u5c06\u5185\u5b58\u5f15\u7528\u63d0\u5347\u4e3a\u5bc4\u5b58\u5668\u5f15\u7528\u3002\u5b83\u63a8\u5e7f\u53ea\u6709\u88c5\u5165\u548c\u5b58\u50a8\u4f5c\u4e3a\u7528\u9014\u7684\u5206\u914d\u6307\u4ee4\u3002\u901a\u8fc7\u4f7f\u7528\u4e3b\u63a7\u5668\u8fb9\u754c\u653e\u7f6e\u03c6\u8282\u70b9\uff0c\u7136\u540e\u6309\u6df1\u5ea6\u4f18\u5148\u987a\u5e8f\u904d\u5386\u51fd\u6570\u4ee5\u9002\u5f53\u5730\u91cd\u5199\u52a0\u8f7d\u548c\u5b58\u50a8\u6765\u8f6c\u6362\u5206\u914d\u3002\u8fd9\u53ea\u662f\u6784\u5efa\u201c\u4fee\u526a\u7684\u201dSSA\u8868\u5355\u7684\u6807\u51c6SSA\u6784\u5efa\u7b97\u6cd5\u3002\n\u5b9a\u4e49DSO_LOCAL I32@HELPUP_OPEN(I8*nocatch readonly%fname)local_unname_addr#0{entry\uff1a%call=call I32@access(i8*%fname\uff0cI32 0)#4%tobool.not=ICMP eq I32%call\uff0c0%spec.select=select i1%tobool.not\uff0cI32 66\uff0cI32 2%Call1=call I32(i8*\uff0cI32\uff0c...)@open(i8*%fname\uff0cI32%spec.select\uff0cI32 420)#4\uff0c\uff01dbg\uff0122 ret I32%Call1\uff0c\uff01dbg\uff0123}\n\u53c8\u88ab\u632b\u8d25\u4e86\uff01\u591a\u4e8f\u4e86mem2reg\uff0c\u6211\u4eec\u7684\u5806\u6808\u69fd\u6d88\u5931\u4e86\uff0c\u4f46\u662fLLVM\u5b9e\u9645\u4e0a\u4f18\u5316\u5f97\u592a\u591a\u4e86\uff1a\u5b83\u8ba4\u4e3a\u6211\u4eec\u7684\u6807\u5fd7\u503c\u5b8c\u5168\u4f9d\u8d56\u4e8e\u6211\u4eec\u7684\u8bbf\u95ee\u8c03\u7528\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u5b8c\u5168\u5220\u9664\u4e86\u6761\u4ef6\u3002\n\u201cSELECT\u201d\u6307\u4ee4\u7528\u4e8e\u6839\u636e\u6761\u4ef6\u9009\u62e9\u4e00\u4e2a\u503c\uff0c\u800c\u4e0d\u9700\u8981IR\u7ea7\u5206\u652f\u3002\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u66f4\u597d\u7684\u4f8b\u5b50\u3002\u8ba9\u6211\u4eec\u505a\u4e00\u4e9bLLVM\u4e0d\u80fd\u7b80\u5355\u5730\u4f18\u5316\u4e3aSELECT(\u6216SELECT\u5e8f\u5217)\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u4f7f\u7528\u6211\u4eec\u53ea\u63d0\u4f9b\u4e86\u58f0\u660e\u7684\u51fd\u6570\u6dfb\u52a0Else IF\uff1a\nSize_t\u6587\u4ef6\u5927\u5c0f(char*)\uff1bint help_open(char*fname){int flag=O_RDWR\uff1bif(\uff01Access(fname\uff0cF_OK)){FLAGS|=O_CREAT\uff1b}ELSE IF(fileSize(Fname)&gt\uff1b0){FLAGS|=O_TRUNC\uff1b}int fd=open(fname\uff0cflag\uff0c0644)\uff1b\u8fd4\u56defd\uff1b}\u3002\n\u5b9a\u4e49DSO_LOCAL I32@HELPUP_OPEN(I8*%fname)LOCAL_UNNAME_ADDR#0{entry\uff1a%call=call I32@access(i8*%fname\uff0cI32 0)#5%tobool.not=ICMP eq I32%call\uff0c0 br i1%tobool.not\uff0cLabel%if.end4\uff0cLabel%if.Else if.Else\uff1a\uff1bPreds=%entry%Call1=call i64@filesize(i8*%fname)#5%cmp.not=ICMP eq i64%Call1\uff0c0%spec.select=select i1%cmp.not\uff0ci32 2\uff0ci32 514 br\u6807\u7b7e%if.end4 if.end4\uff1a\uff1bPreds=%if.Else\uff0c%Entry%Flags.0=Phi I32[66\uff0c%Entry]\uff0c[%spec.select\uff0c%if.Else]%call5=call I32(i8*\uff0cI32\uff0c...)@open(i8*%fname\uff0cI32%flag s.0\uff0cI32 420)#5 ret I32%call5}\u3002\nLlvm\u7684phi\u6bd4\u6211\u4e4b\u524d\u6784\u9020\u7684\u03c6(FLAGS_0\uff0cFLAGS_1)\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u4f46\u5e76\u4e0d\u590d\u6742\uff1a\u5b83\u63a5\u53d7\u4e00\u4e2a\u914d\u5bf9\u5217\u8868(\u5728\u672c\u4f8b\u4e2d\u662f\u4e24\u4e2a)\uff0c\u6bcf\u4e2a\u914d\u5bf9\u5305\u542b\u4e00\u4e2a\u53ef\u80fd\u7684\u503c\u4ee5\u53ca\u8be5\u503c\u7684\u539f\u59cb\u57fa\u672c\u5757(\u901a\u8fc7\u6784\u9020\uff0c\u5b83\u59cb\u7ec8\u662f\u03c6\u8282\u70b9\u4e0a\u4e0b\u6587\u4e2d\u7684\u524d\u5bfc\u5757)\u3002\n\u8f93\u5165\u503c\u7684\u7c7b\u578b\u7531\u7b2c\u4e00\u4e2a\u7c7b\u578b\u5b57\u6bb5\u6307\u5b9a\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u2018phi\u2019\u6307\u4ee4\u5c06\u4e00\u7ec4\u5bf9\u4f5c\u4e3a\u53c2\u6570\uff0c\u5f53\u524d\u5757\u7684\u6bcf\u4e2a\u524d\u7f6e\u57fa\u672c\u5757\u90fd\u6709\u4e00\u4e2a\u5bf9\u3002\u53ea\u6709\u7b2c\u4e00\u7c7b\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u7528\u4f5cPHI\u8282\u70b9\u7684\u503c\u53c2\u6570\u3002\u53ea\u6709\u6807\u7b7e\u53ef\u4ee5\u7528\u4f5c\u6807\u7b7e\u53c2\u6570\u3002\n\u5728\u57fa\u672c\u5757\u7684\u5f00\u59cb\u548cPHI\u6307\u4ee4\u4e4b\u95f4\u4e0d\u80fd\u6709\u975ePHI\u6307\u4ee4\uff1a\u5373PHI\u6307\u4ee4\u5fc5\u987b\u662f\u57fa\u672c\u5757\u4e2d\u7684\u7b2c\u4e00\u4e2a\u3002\n\u8fd8\u53ef\u4ee5\u770b\u5230\uff0cLLVM\u4ecd\u7136\u5f88\u806a\u660e\uff1a\u6211\u4eec\u7684\u03c6\u9009\u62e9\u4e4b\u4e00\u662f\u8ba1\u7b97\u7684SELECT(%spec.select)\uff0c\u56e0\u6b64LLVM\u4ecd\u7136\u8bbe\u6cd5\u90e8\u5206\u64e6\u9664\u4e86\u539f\u59cb\u63a7\u5236\u6d41\u3002\n\u6240\u4ee5\u8fd9\u5f88\u9177\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u63a7\u5236\u6d41\u6211\u4eec\u660e\u663e\u5ffd\u7565\u4e86\u3002\nInt do_ath(int count\uff0cint base){for(int i=0\uff1bi&lt\uff1bcount\uff1bi++){base+=base\uff1b}return base\uff1b}\u3002\n\u5b9a\u4e49DSO_LOCAL I32@do_ath(I32%count\uff0cI32%base)LOCAL_UNNAME_ADDR#0{entry\uff1a%cmp5=ICMP SGT I32%count\uff0c0 br i1%cmp5\uff0cLABEL%for.body\uff0cLABEL%for.cond.leanup for.cond.leanup\uff1a\uff1bPreds=%for.body\uff0c%entry%base.addr.0.lcssa=phi I32[%base\uff0c%entry]\uff0c[%add\uff0c%for.body]ret I32%base.addr.0.lcssa for.body\uff1a\uff1bPreds=%entry\uff0c%for.body%i.07=phi I32[%Inc\uff0c%for.body]\uff0c[0\uff0c%entry]%base.addr.06=Phi I32[%add\uff0c%for.body]\uff0c[%base\uff0c%entry]%add=shl NSW I32%base.addr.06\uff0c1%Inc=\u6dfb\u52a0NUW NSW I32%i.07\uff0c1%exitcond.not=ICMP eq I32%Inc\uff0c%count br i1%exitcond.not\uff0c\u6807\u7b7e%for.cond.leanup\uff0c\u6807\u7b7e%for.body\uff0c\uff01llvm.loop\uff0126}\u3002\n\u56e0\u4e3a\u6211\u4eec\u901a\u8fc7COUNT\u63d0\u4f9b\u5faa\u73af\u754c\u9650\uff0c\u6240\u4ee5LLVM\u65e0\u6cd5\u786e\u4fdd\u6211\u4eec\u771f\u6b63\u8fdb\u5165\u5faa\u73af\u4f53\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u03c6\u5728\u521d\u59cb\u7684%base\u548c%add.LLVM\u7684PHI\u8bed\u6cd5\u4e4b\u95f4\u8fdb\u884c\u9009\u62e9\u3002LLVM\u7684PHI\u8bed\u6cd5\u5f88\u6709\u5e2e\u52a9\u5730\u544a\u8bc9\u6211\u4eec\uff0c%base\u6765\u81eaEntry\u5757\uff0c%add\u6765\u81ea\u5faa\u73af\uff0c\u6b63\u5982\u6211\u4eec\u9884\u671f\u7684\u90a3\u6837\u3002\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48LLVM\u4e3a\u7ed3\u679c\u503c\u9009\u62e9\u4e86\u5982\u6b64\u53ef\u6015\u7684\u540d\u79f0(%base.addr.0.lcssa)\u3002\n\u6211\u4eec\u7684\u7d22\u5f15\u53d8\u91cf\u521d\u59cb\u5316\u4e00\u6b21\uff0c\u7136\u540e\u4f7f\u7528\u6bcf\u6b21for\u8fed\u4ee3\u8fdb\u884c\u66f4\u65b0\uff0c\u56e0\u6b64\u5b83\u8fd8\u9700\u8981\u4e00\u4e2a\u03c6\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u7684\u9009\u62e9\u662f%Inc(\u6bcf\u4e2a\u4e3b\u4f53\u4ece%i.07\u8ba1\u7b97)\u548c0\u6587\u672c(\u5373\u6211\u4eec\u7684\u521d\u59cb\u5316\u503c)\u3002\n\u6700\u540e\uff0c\u5faa\u73af\u4f53\u7684\u6838\u5fc3\uff1a\u6211\u4eec\u9700\u8981\u83b7\u53d6base\uff0c\u5176\u4e2dbase\u662finitialbase\u503c(%base)\uff0c\u6216\u8005\u662f\u4f5c\u4e3a\u524d\u4e00\u4e2a\u5faa\u73af\u7684\u4e00\u90e8\u5206\u8ba1\u7b97\u7684\u503c(%add)\u3002\u6700\u540e\u4e00\u6b21\u03c6\u5230\u8fbe\u90a3\u91cc\u3002\nIR\u7684\u5176\u4f59\u90e8\u5206\u662f\u7c3f\u8bb0\uff1a\u6211\u4eec\u9700\u8981\u5355\u72ec\u7684SSA\u53d8\u91cf\u6765\u8ba1\u7b97\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u7684\u52a0\u6cd5(%add)\u3001\u589e\u91cf(%Inc)\u548c\u9000\u51fa\u68c0\u67e5(%exitcond.not)\u3002\n\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u4ec0\u4e48\u662fSSA\u8868\u5355\uff0c\u4ee5\u53caLLVM\u5982\u4f55\u8868\u793a\u5b83\u4eec6.\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u5173\u5fc3\u5462\uff1f\n\u6b63\u5982\u6211\u5728\u6587\u7ae0\u524d\u9762\u7b80\u8981\u63d0\u5230\u7684\uff0c\u5f52\u6839\u7ed3\u5e95\u662f\u4f18\u5316\u6f5c\u529b\uff1aSSA\u5f62\u5f0f\u7684\u7a0b\u5e8f\u7279\u522b\u9002\u5408\u4e8e\u8bb8\u591a\u6709\u6548\u7684\u4f18\u5316\u3002\n\u4f18\u5316\u7f16\u8bd1\u5668\u53ef\u4ee5\u505a\u7684\u6700\u7b80\u5355\u7684\u4e8b\u60c5\u4e4b\u4e00\u5c31\u662f\u5220\u9664\u53ef\u80fd\u65e0\u6cd5\u6267\u884c\u7684\u4ee3\u7801\u3002\u8fd9\u4f7f\u5f97\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u66f4\u5c0f(\u800c\u4e14\u901a\u5e38\u66f4\u5feb\uff0c\u56e0\u4e3a\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u4e2d\u53ef\u4ee5\u5bb9\u7eb3\u66f4\u591a\u7684\u6587\u4ef6)\u3002\n\u201c\u6b7b\u201d\u4ee3\u7801\u5206\u4e3a\u51e0\u7c7b7\uff0c\u4f46\u5e38\u89c1\u7684\u4e00\u7c7b\u662f\u4e0d\u80fd\u5f71\u54cd\u7a0b\u5e8f\u884c\u4e3a\u7684\u8d4b\u503c\uff0c\u5982\u5197\u4f59\u521d\u59cb\u5316\uff1a\nInt main(Void){int x=100\uff1bif(rand()%2){x=200\uff1b}Else if(rand()%2){x=300\uff1b}Else{x=400\uff1b}\u8fd4\u56dex\uff1b}\u3002\n\u5982\u679c\u6ca1\u6709SSA\u8868\u5355\uff0c\u4f18\u5316\u7f16\u8bd1\u5668\u5c06\u9700\u8981\u68c0\u67e5x\u7684\u4efb\u4f55\u4f7f\u7528\u662f\u5426\u8fbe\u5230\u5176\u539f\u59cb\u5b9a\u4e49(x=100)\u3002\u5355\u8c03\u4e4f\u5473\u3002\u5728SSA\u5f62\u5f0f\u4e2d\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\uff1a\nInt main(Void){int x_0=100\uff1b//\u5ffd\u7565\u4f5c\u7528\u57df\u3002\u8ba1\u7b97\u673a\u4e0d\u662f\u771f\u5b9e\u751f\u6d3b\u3002If(rand()%2){int x_1=200\uff1b}Else if(rand()%2){int x_2=300\uff1b}Else{int x_3=400\uff1b}\u8fd4\u56de\u03c6(x_1\uff0cx_2\uff0cx_3)\uff1b}\u3002\n\u5b9a\u4e49DSO_LOCAL I32@main()local_unname_addr#0{entry\uff1a%call=call I32@rand()#3%0=and I32%call\uff0c1%tobool.not=ICMP eq I32%0\uff0c0 br i1%tobool.not\uff0cLabel%if.Else\uff0cLabel%if.end6 if.Else\uff1a\uff1bPreds=%Entry%Call1=call I32@rand()#3%1=and I32%Call1\uff0c1%tobool3.not=ICMP eq I32%1\uff0c0%.\u3002=SELECT i1%tobool3.not\uff0cI32 400\uff0cI32 300 br\u6807\u7b7e%if.end6 if.end6\uff1a\uff1bPreds=%if.Else\uff0c%Entry%x.0=Phi I32[200\uff0c%Entry]\uff0c[%\u3002\uff0c%if.Else]ret I32%x.0}\n\u7f16\u8bd1\u5668\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5e38\u91cf\u53d8\u91cf\u4ee3\u66ff\u5e38\u91cf\u503c\u672c\u8eab\u6765\u4f18\u5316\u7a0b\u5e8f\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0bC\u7684\u53e6\u4e00\u4e2a\u6591\u70b9\uff1a\nInt SOME_MATH(Int X){int y=7\uff1bint z=10\uff1bint a\uff1bif(rand()%2){a=y+z\uff1b}Else if(rand()%2){a=y+z\uff1b}Else{a=y-z\uff1b}return x+a\uff1b}\u3002\n\u4f5c\u4e3a\u4eba\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230y\u548cz\u88ab\u8d4b\u4e88\u4e86\u5fae\u4e0d\u8db3\u9053\u7684\u503c\uff0c\u5e76\u4e14\u4ece\u672a\u4fee\u6539\u8fc78\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u7f16\u8bd1\u5668\u6765\u8bf4\uff0c\u8fd9\u662f\u4ece\u4e0a\u9762\u5f97\u5230\u7684\u5b9a\u4e49\u95ee\u9898\u7684\u4e00\u4e2a\u53d8\u4f53\uff1a\u5728\u5b83\u53ef\u4ee5\u5206\u522b\u75287\u548c10\u66ff\u6362y\u548cz\u4e4b\u524d\uff0c\u5b83\u9700\u8981\u786e\u4fddy\u548cz\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u8d4b\u4e88\u4e0d\u540c\u7684\u503c\u3002\nInt SOME_MATH(Int X){int y_0=7\uff1bint z_0=10\uff1bint a_0\uff1bif(rand()%2){int a_1=y_0+z_0\uff1b}Else if(rand()%2){int a_2=y_0+z_0\uff1b}Else{int a_3=y_0-z_0\uff1b}int a_4=\u03c6(a_1\uff0ca_2\uff0ca_3)\uff1b\u8fd4\u56dex+a_4\uff1b}\u3002\n\u8fd9\u5b9e\u9645\u4e0a\u4e0e\u6211\u4eec\u7684\u539f\u59cb\u5f62\u5f0f\u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b\uff1a\u7f16\u8bd1\u5668\u73b0\u5728\u53ef\u4ee5\u770b\u5230y\u548cz\u7684\u6bcf\u4e00\u4e2a\u52a0\u8f7d\u90fd\u662f\u539f\u59cb\u8d4b\u503c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4eec\u90fd\u662f\u53ef\u4ee5\u5b89\u5168\u66f4\u6362\u7684\uff01\nInt SOME_MATH(Int X){int y=7\uff1bint z=10\uff1bint a_0\uff1bif(rand()%2){int a_1=7+10\uff1b}Else if(rand()%2){int a_2=7+10\uff1b}Else{int a_3=7-10\uff1b}int a_4=\u03c6(a_1\uff0ca_2\uff0ca_3)\uff1breturn x+a_4\uff1b}\u3002\n\u6240\u4ee5\u6211\u4eec\u53bb\u6389\u4e86\u51e0\u4e2a\u6f5c\u5728\u7684\u6ce8\u518c\u64cd\u4f5c\uff0c\u8fd9\u5f88\u597d\u3002\u4f46\u8fd9\u91cc\u662f\u771f\u6b63\u5173\u952e\u7684\u90e8\u5206\uff1a\u6211\u4eec\u5df2\u7ecf\u4e3a\u5176\u4ed6\u51e0\u4e2a\u4f18\u5316\u505a\u597d\u4e86\u51c6\u5907\uff1a\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4f20\u64ad\u4e86\u4e00\u4e9b\u5e38\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e9b\u5fae\u4e0d\u8db3\u9053\u7684\u5e38\u91cf\u6298\u53e0\uff1a7+10\u53d8\u621017\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\u5728SSA\u5f62\u5f0f\u4e2d\uff0c\u89c2\u5bdf\u5230\u53ea\u6709x\u548ca_{1..4}\u53ef\u4ee5\u5f71\u54cd\u7a0b\u5e8f\u7684\u884c\u4e3a\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u4e0a\u9762\u7684\u6b7b\u4ee3\u7801\u6d88\u9664\uff0c\u5e76\u5b8c\u5168\u5220\u9664y\u548cz\uff01\n\u8fd9\u624d\u662f\u4f18\u5316\u7f16\u8bd1\u5668\u7684\u771f\u6b63\u9b54\u529b\uff1a\u6bcf\u4e2a\u5355\u72ec\u7684\u4f18\u5316\u90fd\u5f88\u7b80\u5355\uff0c\u800c\u4e14\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u72ec\u7acb\u7684\uff0c\u4f46\u5b83\u4eec\u4e00\u8d77\u4ea7\u751f\u4e86\u4e00\u4e2a\u826f\u6027\u5faa\u73af\uff0c\u53ef\u4ee5\u91cd\u590d\u8fdb\u884c\uff0c\u76f4\u5230\u6536\u76ca\u51cf\u5c11\u3002\n\u5bc4\u5b58\u5668\u5206\u914d(\u6216\u8005\uff1a\u5bc4\u5b58\u5668\u8c03\u5ea6)\u672c\u8eab\u5e76\u4e0d\u662f\u4e00\u79cd\u4f18\u5316\uff0c\u66f4\u591a\u7684\u662f\u7f16\u8bd1\u5668\u5de5\u7a0b\u4e2d\u4e0d\u53ef\u907f\u514d\u7684\u95ee\u9898\uff1a\u5047\u88c5\u53ef\u4ee5\u8bbf\u95ee\u65e0\u9650\u6570\u91cf\u7684\u53ef\u5bfb\u5740\u53d8\u91cf\u5f88\u6709\u8da3\uff0c\u4f46\u7f16\u8bd1\u5668\u6700\u7ec8\u575a\u6301\u5c06\u8fd0\u7b97\u5f52\u7ed3\u4e3a\u4e00\u5c0f\u90e8\u5206\u56fa\u5b9a\u7684CPU\u5bc4\u5b58\u5668\u3002\n\u5bc4\u5b58\u5668\u5206\u914d\u7684\u7ea6\u675f\u548c\u590d\u6742\u6027\u56e0\u4f53\u7cfb\u7ed3\u6784\u800c\u5f02\uff1a\u4f17\u6240\u5468\u77e5\uff0cx86(AMD64\u4e4b\u524d\u7684\u7248\u672c)\u9700\u8981\u5bc4\u5b58\u56689(\u53ea\u67098\u4e2a\u5b8c\u6574\u7684\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5176\u4e2d6\u4e2a\u53ef\u80fd\u5728\u51fd\u6570\u7684\u4f5c\u7528\u57df10\u5185\u53ef\u7528)\uff0c\u800cRISC\u4f53\u7cfb\u7ed3\u6784\u901a\u5e38\u4f7f\u7528\u66f4\u591a\u6570\u91cf\u7684\u5bc4\u5b58\u5668\u6765\u5f25\u8865\u7f3a\u5c11\u5bc4\u5b58\u5668-\u5185\u5b58\u64cd\u4f5c\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u51cf\u5c11\u5230SSA\u5f62\u5f0f\u5bf9\u5bc4\u5b58\u5668\u5206\u914d\u5668\u65e2\u6709\u95f4\u63a5\u7684\u597d\u5904\uff0c\u4e5f\u6709\u76f4\u63a5\u7684\u597d\u5904\uff1a\n\u95f4\u63a5\u5730\uff1a\u6d88\u9664\u5197\u4f59\u52a0\u8f7d\u548c\u5b58\u50a8\u51cf\u5c11\u4e86\u5bc4\u5b58\u5668\u5206\u914d\u5668\u7684\u603b\u4f53\u538b\u529b\uff0c\u4f7f\u5176\u80fd\u591f\u907f\u514d\u6602\u8d35\u7684\u6ea2\u51fa(\u5373\uff0c\u5fc5\u987b\u4e34\u65f6\u5c06\u6709\u6548\u5bc4\u5b58\u5668\u8f6c\u79fb\u5230\u4e3b\u5b58\u50a8\u5668\u4ee5\u5bb9\u7eb3\u53e6\u4e00\u6761\u6307\u4ee4)\u3002\n\u76f4\u63a5\uff1a\u5728\u5386\u53f2\u4e0a\uff0c\u7f16\u8bd1\u5668\u5728\u5bc4\u5b58\u5668\u5206\u914d\u4e4b\u524d\u5c06\u03c6\u964d\u4f4e\u4e3a\u526f\u672c\uff0c\u8fd9\u610f\u5473\u7740\u5bc4\u5b58\u5668\u5206\u914d\u5668\u4f20\u7edf\u4e0a\u6ca1\u6709\u4eceSSA\u8868\u672c\u8eab\u4e2d\u53d7\u76ca\u3002\u7136\u800c\uff0c(\u534a)\u6700\u8fd1\u6709\u5173\u4e8e\u5c06SSA\u8868\u76f4\u63a5\u5e94\u7528\u4e8e\u7ebf\u6027\u548c\u7740\u8272\u5206\u914d\u5668\u7684(\u534a)\u8fd1\u671f\u7814\u7a76\u3002\n\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u662f\uff1a\u73b0\u4ee3JavaScript\u5f15\u64ce\u4f7f\u7528JIT\u6765\u52a0\u901f\u7a0b\u5e8f\u8bc4\u4f30\u3002\u8fd9\u4e9bJIT\u7ecf\u5e38\u4f7f\u7528\u7ebf\u6027\u5bc4\u5b58\u5668\u5206\u914d\u5668\uff0c\u5728\u5bc4\u5b58\u5668\u9009\u62e9\u901f\u5ea6(\u987e\u540d\u601d\u4e49\uff0c\u7ebf\u6027)\u548c\u53ef\u63a5\u53d7\u7684\u5bc4\u5b58\u5668\u8c03\u5ea6\u4e4b\u95f4\u8fdb\u884c\u53ef\u63a5\u53d7\u7684\u6298\u8877\u3002\u4eceSSA\u683c\u5f0f\u8f6c\u6362\u51fa\u6765\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u53ca\u65f6\u7684\u64cd\u4f5c\uff0c\u5728\u7f16\u8bd1\u65f6\u95f4\u662f\u6267\u884c\u65f6\u95f4\u4e00\u90e8\u5206\u7684JIT\u548c\u5176\u4ed6\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5bf9SSA\u8868\u793a\u672c\u8eab\u7684\u7ebf\u6027\u5206\u914d\u5f88\u6709\u5438\u5f15\u529b\u3002\n\u5173\u4e8eSSA\uff0c\u6211\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6ca1\u6709\u6d89\u53ca\u5230\u5f88\u591a\u4e8b\u60c5\uff1a\u4f18\u52bf\u8fb9\u754c\u3001\u201c\u4fee\u526a\u201d\u7684SSA\u5f62\u5f0f\u548c\u4e0d\u592a\u4f18\u5316\u7684SSA\u5f62\u5f0f\u4e4b\u95f4\u7684\u6743\u8861\uff0c\u4ee5\u53ca\u7a0b\u5e8f\u7684SSA\u5f62\u5f0f\u548c\u7f16\u8bd1\u5668\u505c\u6b62\u4f18\u5316\u7684\u51b3\u5b9a\u4e4b\u95f4\u7684\u53cd\u9988\u673a\u5236\u7b49\u7b49\u3002\u6bcf\u4e00\u7bc7\u90fd\u53ef\u4ee5\u662f\u81ea\u5df1\u7684\u535a\u5ba2\u5e16\u5b50\uff0c\u4e5f\u53ef\u80fd\u662f\u5c06\u6765\u7684\u5e16\u5b50\uff01\n\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u6bcf\u4e2a\u4efb\u52a1\u5728\u6982\u5ff5\u4e0a\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u5e76\u4e14\u90fd\u6709\u5b9a\u4e49\u826f\u597d\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u4e2a\u522b\u7f16\u8bd1\u5668\u5728\u5408\u5e76\u6216\u8fdb\u4e00\u6b65\u62c6\u5206\u4efb\u52a1\u65b9\u9762\u5177\u6709\u4e00\u5b9a\u7684\u7075\u6d3b\u6027\u3002-\u21a9\u3002\nAST\u548c\u4e2d\u95f4\u8868\u793a\u4e4b\u95f4\u7684\u533a\u522b\u5f88\u6a21\u7cca\uff1aRust\u5728\u7f16\u8bd1\u8fc7\u7a0b\u7684\u65e9\u671f\u5c06\u5b83\u4eec\u7684AST\u8f6c\u6362\u4e3aHIR\uff0c\u5e76\u4e14\u8bed\u8a00\u53ef\u4ee5\u88ab\u8bbe\u8ba1\u4e3a\u5177\u6709\u53ef\u4fee\u6539\u7684AST\uff0c\u4ee5\u8fdb\u884c\u5206\u6790\uff0c\u5426\u5219\u5728IR\u4e0a\u662f\u6700\u597d\u7684\u3002-\u21a9\u3002\n\u8fd9\u53ef\u4ee5\u5206\u4e3a\u8bcd\u6cd5\u9a8c\u8bc1(\u4f8b\u5982\uff0c\u4f7f\u7528\u672a\u58f0\u660e\u7684\u6807\u8bc6\u7b26)\u548c\u8bed\u4e49\u9a8c\u8bc1(\u4f8b\u5982\uff0c\u9519\u8bef\u7684\u521d\u59cb\u5316\u3002\n.", "note_en": "By  popular demand, I\u2019m doing anotherLLVM post. This time, it\u2019s  single static assignment (or SSA) form, a common featurein the intermediate representations of optimizing compilers.\n Like  the last one, SSA is atopic in compiler and IR design that I  mostly understand but could benefit from some self-guidededucation on. So here we are.\n  At the highest level, a compiler\u2019s job is singular: to turn some source language  inputinto some machine language  output. Internally, this breaks down into a sequence of clearlydelineated  1 tasks:\n Validating the AST (e.g., ensuring that all uses of identifiers are consistent with thesource language\u2019s scoping and definition rules)  3\n  Translating the AST into machine code, with all of its complexities (instruction selection,register allocation, frame generation, &amp;c)\n In a  single-pass compiler, (4) is monolithic: machine code is generated as the compiler walksthe AST, with no revisiting of previously generated code. This is extremely fast (in terms ofcompiler performance) in exchange for some a few significant limitations:\n Optimization potential: because machine code is generated in a single pass, it can\u2019t be revisitedfor optimizations. Single-pass compilers tend to generate extremely slow and  conservativemachine code.\n  By way of example: the  System V ABI (used by Linux and macOS) defines  a special 128-byte region beyond the current stack pointer ( %rsp) that can be used by leaf functions whose stack frames fit within it. This, in turn, saves a few stack management instructions in the function prologue and epilogue.\n  A single-pass compiler will struggle to take advantage of this ABI-supplied optimization: it needs to emit a stack slot for each automatic variable as they\u2019re visited, and cannot revisit its function prologue for erasure if all variables fit within the red zone.\n  Language limitations: single-pass compilers struggle with common language design decisions, likeallowing use of identifiers before their declaration or definition. For example, the followingis valid C++:\n  class  Rect  {  public:  int  area ()  {  return  width ()  *  height ();  }  int  width ()  {  return  5 ;  }  int  height ()  {  return  5 ;  }  };\n  C and C++  generally require pre-declaration and/or definition for identifiers, but member function bodies may reference the entire class scope. This will frustrate a single-pass compiler, which expects  Rect::width and  Rect::height to already exist in some symbol lookup table for call generation.\n    Analyses (or passes) are performed on the IR, refining it according to some optimizationprofile (code size, performance, &amp;c)\n  The IR is either translated to machine code  or lowered to  another IR, for further targetspecialization or optimization  4\n So, we want an IR that\u2019s easy to  correctly transform and that\u2019s amenable to optimization. Let\u2019stalk about why IRs that have the  static single assignment property fill that niche.\n  At its core, the SSA form of any program source program introduces only one new constraint:all variables are assigned (i.e., stored to)  exactly once.\n By way of example: the following (not actually very helpful) function is  not in a valid SSA formwith respect to the  flags variable:\n int  helpful_open ( char  * fname )  {  int  flags  =  O_RDWR ;  if  ( ! access ( fname ,  F_OK ))  {  flags  |=  O_CREAT ;  }  int  fd  =  open ( fname ,  flags ,  0644 );  return  fd ; }\n Why? Because  flags is stored to twice: once for initialization, and (potentially) again insidethe conditional body.\n As programmers, we could rewrite  helpful_open to only ever store once to each automatic variable:\n int  helpful_open ( char  * fname )  {  if  ( ! access ( fname ,  F_OK ))  {  int  flags  =  O_RDWR  |  O_CREAT ;  return  open ( fname ,  flags ,  0644 );  }  else  {  int  flags  =  O_RDWR ;  return  open ( fname ,  flags ,  0644 );  } }\n But this is clumsy and repetitive: we essentially need to duplicate every chain of uses thatfollow any variable that is stored to more than once. That\u2019s not great for readability,maintainability, or code size.\n So, we do what we always do: make the compiler do the hard work for us. Fortunately there existsa transformation from every valid program into an equivalent SSA form, conditioned on two simplerules.\n Rule #1: Whenever we see a store to an already-stored variable, we replace it with a brandnew \u201cversion\u201d of that variable.\n Using rule #1 and the example above, we can rewrite  flags using  _N suffixes to indicate versions:\n int  helpful_open ( char  * fname )  {  int  flags_0  =  O_RDWR ;  // Declared up here to avoid dealing with C scopes.  int  flags_1 ;  if  ( ! access ( fname ,  F_OK ))  {  flags_1  =  flags_0  |  O_CREAT ;  }  int  fd  =  open ( fname ,  flags_1 ,  0644 );  return  fd ; }\n  open(..., flags_1, ...) is incorrect: it unconditionally assigns  O_CREAT, which wasn\u2019t in theoriginal function semantics.\n  open(..., flags_0, ...) is  also incorrect: it  never assigns  O_CREAT, and thusis wrong for the same reason.\n  Rule #2: Whenever we need to  choose a variable based on control flow, we use the Phi function(\u03c6) to introduce a  new variable based on our choice.\n  int  helpful_open ( char  * fname )  {  int  flags_0  =  O_RDWR ;  // Declared up here to avoid dealing with C scopes.  int  flags_1 ;  if  ( ! access ( fname ,  F_OK ))  {  flags_1  =  flags_0  |  O_CREAT ;  }  int  flags_2  =  \u03c6 ( flags_0 ,  flags_1 );  int  fd  =  open ( fname ,  flags_2 ,  0644 );  return  fd ; }\n Our quandary is resolved:  open  always takes  flags_2, where  flags_2 is a fresh SSA variableproduced applying \u03c6 to  flags_0 and  flags_1.\n Observe, too, that \u03c6 is a  symbolic function: compilers that use SSA forms internally do notemit real \u03c6 functions in generated code  5. \u03c6 exists  solely to reconcile rule #1 with theexistence of control flow.\n As such, it\u2019s a little bit silly to talk about SSA forms with C examples (since C and otherhigh-level languages are what we\u2019re translating from in the first place). Let\u2019s dive into howLLVM\u2019s IR actually represents them.\n  First of all, let\u2019s see what happens when we run our very first  helpful_open through  clangwith no optimizations:\n define  dso_local  i32  @helpful_open ( i8 *  %fname )  #0  { entry:  %fname.addr  =  alloca  i8 *,  align  8  %flags  =  alloca  i32 ,  align  4  %fd  =  alloca  i32 ,  align  4  store  i8 *  %fname ,  i8 **  %fname.addr ,  align  8  store  i32  2 ,  i32 *  %flags ,  align  4  %0  =  load  i8 *,  i8 **  %fname.addr ,  align  8  %call  =  call  i32  @access ( i8 *  %0 ,  i32  0 )  #4  %tobool  =  icmp  ne  i32  %call ,  0  br  i1  %tobool ,  label  %if.end ,  label  %if.then if.then:  ; preds = %entry  %1  =  load  i32 ,  i32 *  %flags ,  align  4  %or  =  or  i32  %1 ,  64  store  i32  %or ,  i32 *  %flags ,  align  4  br  label  %if.end if.end:  ; preds = %if.then, %entry  %2  =  load  i8 *,  i8 **  %fname.addr ,  align  8  %3  =  load  i32 ,  i32 *  %flags ,  align  4  %call1  =  call  i32  ( i8 *,  i32 ,  ...)  @open ( i8 *  %2 ,  i32  %3 ,  i32  420 )  store  i32  %call1 ,  i32 *  %fd ,  align  4  %4  =  load  i32 ,  i32 *  %fd ,  align  4  ret  i32  %4 }\n  So, we call  open with  %3, which comes from\u2026a  load from an  i32* named  %flags?Where\u2019s the \u03c6?\n This is something that  consistently slips me up when reading LLVM\u2019s IR: only  values, not memory, are in SSA form. Because we\u2019ve compiled with optimizations disabled,  %flags isjust a stack slot that we can  store into as many times as we please, and that\u2019s  exactly whatLLVM has elected to do above.\n As such, LLVM\u2019s SSA-based optimizations aren\u2019t all that useful when passed IR that makes directuse of stack slots. We want to  maximize our use of SSA variables, whenever possible, to makefuture optimization passes as effective as possible.\n  This file (optimization pass) promotes memory references to be register references. It promotesalloca instructions which only have loads and stores as uses. An alloca is transformed by usingdominator frontiers to place phi nodes, then traversing the function in depth-first order torewrite loads and stores as appropriate. This is just the standard SSA construction algorithm toconstruct \u201cpruned\u201d SSA form.\n   define  dso_local  i32  @helpful_open ( i8 *  nocapture  readonly  %fname )  local_unnamed_addr  #0  { entry:  %call  =  call  i32  @access ( i8 *  %fname ,  i32  0 )  #4  %tobool.not  =  icmp  eq  i32  %call ,  0  %spec.select  =  select  i1  %tobool.not ,  i32  66 ,  i32  2  %call1  =  call  i32  ( i8 *,  i32 ,  ...)  @open ( i8 *  %fname ,  i32  %spec.select ,  i32  420 )  #4 ,  !dbg  !22  ret  i32  %call1 ,  !dbg  !23 }\n Foiled again! Our stack slots are gone thanks to  mem2reg, but LLVM has actually optimized too far: it figured out that our flags value is wholly dependent on the return value of our access call and erased the conditional entirely.\n    The \u2018select\u2019 instruction is used to choose one value based on a condition, without IR-level branching.\n So we need a better example. Let\u2019s do something that LLVM can\u2019t trivially optimize into a select (or sequence of  selects), like adding an  else if with a function that we\u2019ve onlyprovided the declaration for:\n size_t  filesize ( char  * ); int  helpful_open ( char  * fname )  {  int  flags  =  O_RDWR ;  if  ( ! access ( fname ,  F_OK ))  {  flags  |=  O_CREAT ;  }  else  if  ( filesize ( fname )  &gt;  0 )  {  flags  |=  O_TRUNC ;  }  int  fd  =  open ( fname ,  flags ,  0644 );  return  fd ; }\n  define  dso_local  i32  @helpful_open ( i8 *  %fname )  local_unnamed_addr  #0  { entry:  %call  =  call  i32  @access ( i8 *  %fname ,  i32  0 )  #5  %tobool.not  =  icmp  eq  i32  %call ,  0  br  i1  %tobool.not ,  label  %if.end4 ,  label  %if.else if.else:  ; preds = %entry  %call1  =  call  i64  @filesize ( i8 *  %fname )  #5  %cmp.not  =  icmp  eq  i64  %call1 ,  0  %spec.select  =  select  i1  %cmp.not ,  i32  2 ,  i32  514  br  label  %if.end4 if.end4:  ; preds = %if.else, %entry  %flags.0  =  phi  i32  [  66 ,  %entry  ],  [  %spec.select ,  %if.else  ]  %call5  =  call  i32  ( i8 *,  i32 ,  ...)  @open ( i8 *  %fname ,  i32  %flags.0 ,  i32  420 )  #5  ret  i32  %call5 }\n    LLVM\u2019s  phi is slightly more complicated than the  \u03c6(flags_0, flags_1) that I made up before, butnot by much: it takes a list of pairs (two, in this case), with each pair containing a possiblevalue and that value\u2019s originating basic block (which, by construction, is always a predecessorblock in the context of the \u03c6 node).\n   The type of the incoming values is specified with the first type field. After this, the \u2018phi\u2019instruction takes a list of pairs as arguments, with one pair for each predecessor basic blockof the current block. Only values of first class type may be used as the value arguments to thePHI node. Only labels may be used as the label arguments.\n  There must be no non-phi instructions between the start of a basic block and the PHIinstructions: i.e. PHI instructions must be first in a basic block.\n Observe, too, that LLVM is  still being clever: one of our \u03c6 choices is a computed select ( %spec.select), so LLVM  still managed to partially erase the original control flow.\n So that\u2019s cool. But there\u2019s a piece of control flow that we\u2019ve conspicuously ignored.\n  int  do_math ( int  count ,  int  base )  {  for  ( int  i  =  0 ;  i  &lt;  count ;  i ++ )  {  base  +=  base ;  }  return  base ; }\n  define  dso_local  i32  @do_math ( i32  %count ,  i32  %base )  local_unnamed_addr  #0  { entry:  %cmp5  =  icmp  sgt  i32  %count ,  0  br  i1  %cmp5 ,  label  %for.body ,  label  %for.cond.cleanup for.cond.cleanup:  ; preds = %for.body, %entry  %base.addr.0.lcssa  =  phi  i32  [  %base ,  %entry  ],  [  %add ,  %for.body  ]  ret  i32  %base.addr.0.lcssa for.body:  ; preds = %entry, %for.body  %i.07  =  phi  i32  [  %inc ,  %for.body  ],  [  0 ,  %entry  ]  %base.addr.06  =  phi  i32  [  %add ,  %for.body  ],  [  %base ,  %entry  ]  %add  =  shl  nsw  i32  %base.addr.06 ,  1  %inc  =  add  nuw  nsw  i32  %i.07 ,  1  %exitcond.not  =  icmp  eq  i32  %inc ,  %count  br  i1  %exitcond.not ,  label  %for.cond.cleanup ,  label  %for.body ,  !llvm.loop  !26 }\n  Because we supply the loop bounds via  count, LLVM has no way to ensure that we  actually enterthe loop body. Consequently, our very first \u03c6 selects between the initial  %base and  %add.LLVM\u2019s  phi syntax helpfully tells us that  %base comes from the entry block and  %add fromthe loop, just as we expect. I have no idea why LLVM selected such a hideous name for the resultingvalue ( %base.addr.0.lcssa).\n  Our index variable is initialized once and then updated with each  for iteration, so it alsoneeds a \u03c6. Our selections here are  %inc (which each body computes from  %i.07) and the  0literal (i.e., our initialization value).\n  Finally, the heart of our loop body: we need to get  base, where  base is either the initialbase value ( %base) or the value computed as part of the prior loop ( %add). One last \u03c6 getsus there.\n The rest of the IR is bookkeeping: we need separate SSA variables to compute the addition ( %add),increment ( %inc), and exit check ( %exitcond.not) with each loop iteration.\n   So now we know what an SSA form  is, and how LLVM represents them  6. Why should we care?\n As I briefly alluded to early in the post, it comes down to optimization potential: the SSA formsof programs are  particularly suited to a number of effective optimizations.\n   One of the simplest things that an optimizing compiler can do is  remove code that  cannot possiblybe executed. This makes the resulting binary smaller (and usually faster, since more of it canfit in the instruction cache).\n \u201cDead\u201d code falls into several categories  7, but a common one is assignments that cannotaffect program behavior, like redundant initialization:\n int  main ( void )  {  int  x  =  100 ;  if  ( rand ()  %  2 )  {  x  =  200 ;  }  else  if  ( rand ()  %  2 )  {  x  =  300 ;  }  else  {  x  =  400 ;  }  return  x ; }\n Without an SSA form, an optimizing compiler would need to check whether any  use of  x  reachesits original definition ( x = 100). Tedious. In SSA form, the impossibility of that is obvious:\n int  main ( void )  {  int  x_0  =  100 ;  // Just ignore the scoping. Computers aren&#39;t real life.  if  ( rand ()  %  2 )  {  int  x_1  =  200 ;  }  else  if  ( rand ()  %  2 )  {  int  x_2  =  300 ;  }  else  {  int  x_3  =  400 ;  }  return  \u03c6 ( x_1 ,  x_2 ,  x_3 ); }\n  define  dso_local  i32  @main ()  local_unnamed_addr  #0  { entry:  %call  =  call  i32  @rand ()  #3  %0  =  and  i32  %call ,  1  %tobool.not  =  icmp  eq  i32  %0 ,  0  br  i1  %tobool.not ,  label  %if.else ,  label  %if.end6 if.else:  ; preds = %entry  %call1  =  call  i32  @rand ()  #3  %1  =  and  i32  %call1 ,  1  %tobool3.not  =  icmp  eq  i32  %1 ,  0  %.  =  select  i1  %tobool3.not ,  i32  400 ,  i32  300  br  label  %if.end6 if.end6:  ; preds = %if.else, %entry  %x.0  =  phi  i32  [  200 ,  %entry  ],  [  %. ,  %if.else  ]  ret  i32  %x.0 }\n   Compilers can also optimize a program by  substituting uses of a constant variable for the constantvalue itself. Let\u2019s take a look at another blob of C:\n int  some_math ( int  x )  {  int  y  =  7 ;  int  z  =  10 ;  int  a ;  if  ( rand ()  %  2 )  {  a  =  y  +  z ;  }  else  if  ( rand ()  %  2 )  {  a  =  y  +  z ;  }  else  {  a  =  y  -  z ;  }  return  x  +  a ; }\n As humans, we can see that  y and  z are trivially assigned and never modified  8. For the compiler,however, this is a variant of the  reaching definition problem from above: before it canreplace  y and  z with  7 and  10 respectively, it needs to make sure that  y and  z are neverassigned a  different value.\n  int  some_math ( int  x )  {  int  y_0  =  7 ;  int  z_0  =  10 ;  int  a_0 ;  if  ( rand ()  %  2 )  {  int  a_1  =  y_0  +  z_0 ;  }  else  if  ( rand ()  %  2 )  {  int  a_2  =  y_0  +  z_0 ;  }  else  {  int  a_3  =  y_0  -  z_0 ;  }  int  a_4  =  \u03c6 ( a_1 ,  a_2 ,  a_3 );  return  x  +  a_4 ; }\n This is virtually identical to our original form, but with one critical difference:the compiler can now see that  every load of  y and  z is the original assignment. In otherwords, they\u2019re all safe to replace!\n int  some_math ( int  x )  {  int  y  =  7 ;  int  z  =  10 ;  int  a_0 ;  if  ( rand ()  %  2 )  {  int  a_1  =  7  +  10 ;  }  else  if  ( rand ()  %  2 )  {  int  a_2  =  7  +  10 ;  }  else  {  int  a_3  =  7  -  10 ;  }  int  a_4  =  \u03c6 ( a_1 ,  a_2 ,  a_3 );  return  x  +  a_4 ; }\n So we\u2019ve gotten rid of a few potential register operations, which is nice. But here\u2019s the  reallycritical part: we\u2019ve set ourselves up for  several other optimizations:\n Now that we\u2019ve propagated some of our constants, we can do some trivial constant folding:  7 + 10 becomes  17, and soforth.\n  In SSA form, it\u2019s trivial to observe that only  x and  a_{1..4} can affect the program\u2019s behavior.So we can apply our  dead code elimination from above and delete  y and  z entirely!\n This is the  real magic of an optimizing compiler: each individual optimization is simple andlargely independent, but together they produce a  virtuous cycle that can be repeated untilgains diminish.\n   Register allocation (alternatively: register scheduling) is less of an optimization  itself, andmore of an unavoidable problem in compiler engineering: it\u2019s fun to pretend to have access to aninfinite number of addressable variables, but the compiler  eventually insists that we boil ouroperations down to a  small, fixed set of CPU registers.\n The constraints and complexities of register allocation vary by architecture: x86 (prior to AMD64)is notoriously starved for registers  9 (only 8 full general purpose registers, of which 6 might beusable within a function\u2019s scope  10), while RISC architectures typically employ larger numbersof registers to compensate for the lack of register-memory operations.\n Just as above, reductions to SSA form have both indirect and direct advantages for the registerallocator:\n Indirectly: Eliminations of redundant loads and stores reduces the overall  pressure on theregister allocator, allowing it to avoid expensive  spills (i.e., having to temporarily transfer alive register to main memory to accommodate another instruction).\n  Directly: Compilers have historically lowered \u03c6s into copies before register allocation,meaning that register allocators traditionally haven\u2019t benefited from the SSA form  itself  11.There is, however, (semi-)recent research on direct application of SSA forms to both linearand coloring allocators  12  13.\n  A concrete example: modern JavaScript engines use JITs toaccelerate program evaluation. These JITs frequently use  linear register allocators for theiracceptable tradeoff between register selection speed (linear, as the name suggests) andacceptable register scheduling. Converting out of SSA form is a timely operation of its own, solinear allocation on the SSA representation  itself is appealing in JITs and other contexts wherecompile time is part of execution time.\n  There are  many things about SSA that I didn\u2019t cover in this post: dominance frontiers, tradeoffsbetween \u201cpruned\u201d and less optimal SSA forms, and feedback mechanisms between the SSA form of aprogram and the compiler\u2019s decision to cease optimizing, among others. Each of these could beits own blog post, and maybe will be in the future!\n In the sense that each task is conceptually isolated and has well-defined inputs and outputs. Individual compilers have  some flexibility with respect to whether they combine or further split the tasks.\u00a0 \u21a9\n  The distinction between an AST and an intermediate representation is hazy: Rust converts their AST to  HIR early in the compilation process, and languages can be designed to have ASTs that are amendable to analyses that would otherwise be best on an IR.\u00a0 \u21a9\n  This can be broken up into  lexical validation (e.g. use of an undeclared identifier) and  semantic validation (e.g. incorrect initializa\n......", "posttime": "2020-10-24 07:24:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e86\u89e3,static,\u7f16\u8bd1\u5668", "title": "\u4e86\u89e3\u9759\u6001\u5355\u4e00\u5206\u914d\u8868\u5355", "title_en": "Understanding static single assignment forms", "transed": 1, "url": "https://blog.yossarian.net/2020/10/23/Understanding-static-single-assignment-forms", "via": "", "real_tags": ["\u4e86\u89e3", "static", "\u7f16\u8bd1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "d45451e0f71b872780c4d5648f5ab3ac.png", "infoid": 1030799, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u65e9\u671f\u7684\u9879\u76ee\uff0c\u65e8\u5728\u4f7fRUST\u6210\u4e3a\u6784\u5efa\u56fe\u5f62\u5904\u7406\u5668\u4ee3\u7801\ud83d\ude80\ud83d\udea7\u7684\u4e00\u6d41\u8bed\u8a00\u548c\u751f\u6001\u7cfb\u7edf\u3002\n\u7f16\u8bd1\u548c\u8fd0\u884c\u975e\u5e38\u7b80\u5355\u7684\u7740\u8272\u5668\u662f\u53ef\u884c\u7684\uff0c\u6838\u5fc3\u5e93\u7684\u5f88\u5927\u4e00\u90e8\u5206\u4e5f\u4f1a\u7f16\u8bd1\u3002\n\u7136\u800c\uff0c\u8bb8\u591a\u4e1c\u897f\u8fd8\u6ca1\u6709\u5b9e\u73b0\uff1a\u4f8b\u5982\uff0c\u5faa\u73af\u548c\u5f00\u5173\u8fd8\u4e0d\u53d7\u652f\u6301\uff01\u8fd9\u610f\u5473\u7740\uff0c\u867d\u7136\u8fd9\u4e2a\u9879\u76ee\u5728\u6280\u672f\u4e0a\u662f\u53ef\u7528\u7684\uff0c\u4f46\u8fd8\u8fdc\u8fdc\u6ca1\u6709\u51c6\u5907\u597d\u6295\u5165\u751f\u4ea7\u3002\n#[spirv(entry=&#34\uff1bFragment&#34\uff1b)]pub fn main_fs(input\uff1ainput&lt\uff1bve4&gt\uff1b\uff0cmut output\uff1aoutput&lt\uff1bvec4&gt\uff1b){let dir\uff1ave3=input\u3002\u52a0\u8f7d()\u3002Truncate()\uff1b\u8bbecs_pos=ve4(dir.\u30020\uff0c-\u76ee\u5f55\u30021\uff0c1.0\uff0c1.0)\uff1b\u8bbews_pos={let p=Clip_to_world\u3002Mul_ve4(Cs_Pos)\uff1bp.truncate()/p.3}\uff1b\u8bbedir=(ws_pos-ye_pos)\u3002Normalize()\uff1b//\u5bf9Preetham\u5929\u7a7a\u6a21\u578b\u6c42\u503c\uff0c\u8ba9color=sky(dir\uff0csun_pos)\uff1b\u8f93\u51fa\u3002\u5546\u5e97(\u989c\u8272\u3002\u6269\u5c55(0.0))}\u3002\n\u5386\u53f2\u4e0a\uff0c\u5728\u6e38\u620f\u4e2d\uff0cGPU\u7f16\u7a0b\u90fd\u662f\u901a\u8fc7\u7f16\u5199HLSL\u6216\u5728\u8f83\u5c0f\u7a0b\u5ea6\u4e0a\u7f16\u5199GLSL\u6765\u5b8c\u6210\u7684\u3002\u8fd9\u4e9b\u662f\u591a\u5e74\u6765\u968f\u5448\u73b0API\u4e00\u8d77\u53d1\u5c55\u7684\u7b80\u5355\u7f16\u7a0b\u8bed\u8a00\u3002\u7136\u800c\uff0c\u968f\u7740\u6e38\u620f\u5f15\u64ce\u7684\u53d1\u5c55\uff0c\u8fd9\u4e9b\u8bed\u8a00\u672a\u80fd\u63d0\u4f9b\u5904\u7406\u5927\u578b\u4ee3\u7801\u5e93\u7684\u673a\u5236\uff0c\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u76f8\u6bd4\uff0c\u5b83\u4eec\u901a\u5e38\u843d\u540e\u4e8e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u3002\n\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5229\u57fa\u5e02\u573a\u7684\u5229\u57fa\u8bed\u8a00\uff0c\u90e8\u5206\u539f\u56e0\u662f\u6574\u4e2a\u884c\u4e1a\u5df2\u7ecf\u6295\u5165\u4e86\u76f8\u5f53\u591a\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u7ef4\u6301\u73b0\u72b6\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5229\u57fa\u5e02\u573a\u7684\u5229\u57fa\u8bed\u8a00\uff0c\u90e8\u5206\u539f\u56e0\u662f\u6574\u4e2a\u884c\u4e1a\u6295\u5165\u4e86\u76f8\u5f53\u591a\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u6765\u7ef4\u6301\u73b0\u72b6\u3002\u867d\u7136\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u4e24\u79cd\u8bed\u8a00\u90fd\u6709\u66f4\u597d\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u4f46\u5b83\u4eec\u90fd\u4e0d\u80fd\u53d6\u4ee3HLSL\u6216GLSL\u3002\u8981\u4e48\u662f\u56e0\u4e3a\u5b83\u4eec\u662f\u4f9b\u5e94\u5546\u9501\u5b9a\u7684\uff0c\u8981\u4e48\u662f\u56e0\u4e3a\u5b83\u4eec\u4e0d\u652f\u6301\u4f20\u7edf\u7684\u56fe\u5f62\u7ba1\u9053\u3002\u8fd9\u65b9\u9762\u7684\u793a\u4f8b\u5305\u62ecCUDA\u548cOpenCL\u3002\u867d\u7136\u6709\u4eba\u8bd5\u56fe\u5728\u8fd9\u4e2a\u9886\u57df\u521b\u9020\u8bed\u8a00\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u4eba\u5728Gamedev\u793e\u533a\u83b7\u5f97\u4efb\u4f55\u663e\u8457\u7684\u5438\u5f15\u529b\u3002\n\u6211\u4eec\u5bf9\u8fd9\u4e2a\u9879\u76ee\u7684\u5e0c\u671b\u662f\u901a\u8fc7\u5c06\u73b0\u6709\u7684\u3001\u4f4e\u7ea7\u7684\u3001\u5b89\u5168\u7684\u3001\u9ad8\u6027\u80fd\u7684\u8bed\u8a00(\u5373Rust)\u5f15\u5165GPU\uff0c\u4ece\u800c\u63a8\u52a8\u6574\u4e2a\u884c\u4e1a\u5411\u524d\u53d1\u5c55\u3002\u968f\u4e4b\u800c\u6765\u7684\u662f\u4e00\u4e9b\u4e0d\u5bb9\u5ffd\u89c6\u7684\u989d\u5916\u597d\u5904\uff1a\u4e1a\u754c\u6700\u597d\u7684\u8f6f\u4ef6\u5305/\u6a21\u5757\u7cfb\u7edf\u3001\u9488\u5bf9\u7ade\u4e89\u6761\u4ef6\u6216\u8d8a\u754c\u5185\u5b58\u8bbf\u95ee\u800c\u6784\u5efa\u7684\u5b89\u5168\u3001\u7528\u4e8e\u6539\u8fdb\u7a0b\u5e8f\u5458\u5de5\u4f5c\u6d41\u7a0b\u7684\u5e7f\u6cdb\u5de5\u5177\u548c\u5b9e\u7528\u7a0b\u5e8f\uff0c\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\uff01\n\u5728\u767b\u8239\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u5efa\u7acb\u6211\u4eec\u81ea\u5df1\u7684\u65b0\u6e38\u620f\u5f15\u64ce\u4ece\u5934\u5f00\u59cb\u5728\u94c1\u9508\u3002\u6211\u4eec\u4e4b\u524d\u6709\u5185\u90e8\u5f00\u53d1RLSL\u539f\u578b\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u6709\u4e00\u652f\u4f18\u79c0\u7684\u6e32\u67d3\u5de5\u7a0b\u5e08\u56e2\u961f\uff0c\u4ed6\u4eec\u719f\u6089\u6765\u81ea\u6e38\u620f\u3001\u6e38\u620f\u5f15\u64ce\u548c\u5176\u4ed6\u884c\u4e1a\u7684\u5f53\u524d\u7740\u8272\u8bed\u8a00\u4e2d\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u76f8\u4fe1\uff0c\u6211\u4eec\u5904\u4e8e\u72ec\u7279\u7684\u5730\u4f4d\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u6211\u4eec\u5e0c\u671b\u7528\u4e00\u79cd\u4f18\u79c0\u7684\u8bed\u8a00\u7b80\u5316\u6211\u4eec\u81ea\u5df1\u7684\u5185\u90e8\u5f00\u53d1\uff0c\u5efa\u7acb\u4e00\u4e2a\u5f00\u6e90\u56fe\u5f62\u751f\u6001\u7cfb\u7edf\u548c\u793e\u533a\uff0c\u4fc3\u8fdbGPU\u548cCPU\u4e4b\u95f4\u7684\u4ee3\u7801\u5171\u4eab\uff0c\u6700\u91cd\u8981\u7684\u662f\uff1a\u4f7f\u6211\u4eec(\u672a\u6765\u7684)\u7528\u6237\u548c\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u66f4\u5feb\u5730\u6784\u5efa\u51fa\u8272\u7684\u5916\u89c2\u548c\u5f15\u4eba\u5165\u80dc\u7684\u4f53\u9a8c\u3002\n\u5982\u679c\u6211\u4eec\u505a\u5bf9\u4e86\u8fd9\u4e2a\u9879\u76ee\uff0c\u5c31\u4e0d\u4e00\u5b9a\u9700\u8981\u6574\u4e2a\u6e32\u67d3\u5de5\u7a0b\u5e08\u56e2\u961f\u6765\u6784\u5efa\u4e00\u6b3e\u597d\u770b\u7684\u6e38\u620f\uff0c\u76f8\u53cd\uff0c\u4f60\u53ea\u9700\u8981\u4f7f\u7528\u51e0\u4e2a\u73b0\u6709\u7684\u5f00\u653e\u6e90\u7801\u677f\u6761\u7bb1\uff0c\u5c31\u53ef\u4ee5\u63d0\u4f9b\u521b\u9020\u4f60\u60f3\u8981\u7684\u4f53\u9a8c\u6240\u9700\u7684\u56fe\u5f62\u6548\u679c\u3002\u4eba\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u4ececrates.io\u627e\u5230\u5e76\u4f7f\u7528\u5408\u9002\u7684\u7bb1\u5b50\uff0c\u800c\u4e0d\u662f\u5728\u8bba\u575b\u5e16\u5b50\u4e0a\u5171\u4eab\u548c\u590d\u5236TAA\u4ee3\u7801\u7247\u6bb5\u3002\nRustc\u7f16\u8bd1\u5668\u540e\u7aef\u751f\u6210SPIR-V\uff0c\u63d2\u5165VIA-Z codegen-\u540e\u7aef\u3002\u672a\u6765\u7684\u7248\u672c\u53ef\u80fd\u4f1a\u652f\u6301DXIL(DirectX\u7684\u76ee\u6807)\u6216WGSL(\u4e0eSPIR-V\u53cc\u5c04\u7684WebGPU\u7740\u8272\u8bed\u8a00)\u3002\n\u9ad8\u7ea7\u6e32\u67d3\u56fe\u5f62\u5229\u7528\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f7f\u5f97\u7528\u6237\u5f88\u5bb9\u6613\u5f00\u53d1\u548c\u4f7f\u7528\u6e32\u67d3\u6548\u679c\u3002\n\u6211\u4eec\u5c06\u6b64repo\u7528\u4f5c\u4e0e\u9879\u76ee\u76f8\u5173\u7684\u6240\u6709\u5185\u5bb9\u7684\u5355\u4e00repo\uff1a\u677f\u6761\u7bb1\u3001\u5de5\u5177\u3001\u7740\u8272\u5668\u3001\u793a\u4f8b\u3001\u6d4b\u8bd5\u548c\u8bbe\u8ba1\u6587\u6863\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u540c\u4e00\u4f4d\u7f6e\u4f7f\u7528\u6db5\u76d6\u6240\u6709\u5185\u5bb9\u7684\u95ee\u9898\u548cPR\u3001repo\u4e2d\u7684\u4ea4\u53c9\u5f15\u7528\u5185\u5bb9\uff0c\u4ee5\u53ca\u5176\u4ed6GitHub repo\uff0c\u5982rspirv\u548crust\u672c\u8eab\u3002\n\u6211\u4eec\u6bcf\u5468\u90fd\u4f1a\u5728\u4e00\u4e2a\u4e0d\u548c\u8c10\u7684\u7535\u8bdd\u4e0a\u4f1a\u9762\uff0c\u8ba8\u8bba\u8bbe\u8ba1\u548c\u5206\u7c7b\u95ee\u9898\u3002\u6bcf\u6b21\u4f1a\u8bae\u90fd\u6709\u8bae\u7a0b\u3001\u94fe\u63a5\u548c\u4f1a\u8bae\u8bb0\u5f55\u7684\u95ee\u9898\u3002\nSpirv-builder\uff0c\u63d0\u4f9b\u5728CPU build.rs\u6587\u4ef6\u4e2d\u6784\u5efaGPU\u673a\u7bb1\u7684\u4fbf\u6377\u65b9\u6cd5\u3002\n\u6211\u4eec\u6b22\u8fce\u793e\u533a\u5bf9\u8fd9\u4e2a\u9879\u76ee\u7684\u8d21\u732e\u3002\u5982\u679c\u60a8\u60f3\u5f00\u59cb\uff0c\u8bf7\u52a1\u5fc5\u67e5\u770bRust-GPU\u5f00\u53d1\u6307\u5357\u548c\u6211\u4eec\u7684\u8d21\u732e\u8005\u6307\u5357\uff0c\u4e86\u89e3\u6709\u5173\u5982\u4f55\u5f00\u59cb\u7684\u66f4\u591a\u4fe1\u606f\u3002\n\u9664\u975e\u60a8\u53e6\u6709\u660e\u786e\u8bf4\u660e\uff0c\u5426\u5219\u6839\u636eApache-2.0\u8bb8\u53ef\u8bc1\u7684\u5b9a\u4e49\uff0c\u60a8\u6545\u610f\u63d0\u4ea4\u4ee5\u5305\u542b\u5728\u4f5c\u54c1\u4e2d\u7684\u4efb\u4f55\u6295\u7a3f\u90fd\u5e94\u5982\u4e0a\u6240\u8ff0\u83b7\u5f97\u53cc\u91cd\u8bb8\u53ef\uff0c\u4e0d\u53d7\u4efb\u4f55\u9644\u52a0\u6761\u6b3e\u6216\u6761\u4ef6\u7684\u9650\u5236\u3002", "note_en": "This is a very early stage project to make Rust a first-class language and ecosystem for building GPU code  \ud83d\ude80 \ud83d\udea7\n  Compiling and running very simple shaders works, and a significant portion of  the core library also compiles.\n However, many things aren&#39;t implemented yet: for example, loops and switches aren&#39;t supported yet! That means that while being technically usable, this project is far from being production-ready.\n   #[spirv(entry =  &#34;fragment&#34;)] pub  fn  main_fs(input: Input&lt;Vec4&gt;,  mut output: Output&lt;Vec4&gt;) {  let dir: Vec3  = input. load(). truncate();  let cs_pos  =  Vec4(dir. 0,  -dir. 1,  1.0,  1.0);  let ws_pos  = {  let p  = clip_to_world. mul_vec4(cs_pos); p. truncate()  / p. 3 };  let dir  = (ws_pos  - eye_pos). normalize();  // evaluate Preetham sky model  let color  =  sky(dir, sun_pos); output. store(color. extend( 0.0))}\n   Historically in games GPU programming has been done through writing either HLSL, or to a lesser extent GLSL. These are simple programming languages that have evolved along with rendering APIs over the years. However, as game engines have evolved, these languages have failed to provide mechanisms for dealing with large codebases, and have generally stayed behind the curve compared to other programming languages.\n In part this is because it&#39;s a niche language for a niche market, and in part this has been because the industry as a whole has sunk quite a lot of time and effort into the status quo. While over-all better alternatives to both languages exist, none of them are in a place to replace HLSL or GLSL. Either because they are vendor locked, or because they don&#39;t support the traditional graphics pipeline. Examples of this include CUDA and OpenCL. And while attempts have been made to create language in this space, none of them have gained any notable traction in the gamedev community.\n Our hope with this project is that we push the industry forward by bringing an existing, low-level, safe, and high performance language to the GPU; namely  Rust. And with it come some additional benefits that can&#39;t be overlooked: a package/module system that&#39;s one of the industry&#39;s best, built in safety against race-conditions or out of bounds memory access, a wide range of tools and utilities to improve programmer workflows, and many others!\n  At Embark, we&#39;ve been building our own new game engine from the ground up in Rust. We have previous experience in-house developing the  RLSL prototype, and we have a team of excellent rendering engineers that are familiar with the problems in current shading languages both from games, game engines and other industries. So, we believe we are uniquely positioned to attempt solving this problem.\n We want to streamline our own internal development with a single great language, build an open source graphics ecosystem and community, facilitate code-sharing between GPU and CPU, and most importantly: to enable our (future) users, and fellow developers, to more rapidly build great looking and engaging experiences.\n If we do this project right, one wouldn&#39;t necessarily need an entire team of rendering engineers to build a good looking game, instead one would simply use a few of the existing open-source crates that provide the graphical effects needed to create the experience you&#39;re after. Instead of sharing and copy&#39;n&#39;pasting snippets of TAA code on forum posts, one could simply find and use the right crates from  crates.io.\n   rustc compiler backend to generate  SPIR-V, plugging in via  -Z codegen-backend. Possible a future version could suppport  DXIL (the target for DirectX) or  WGSL (the WebGPU shading language that&#39;s bijective with SPIR-V)\n   High-level render graph to take advantage of this, make it easy for users to develop and use rendering effects.\n   We use this repo as a monorepo for everything related to the project: crates, tools, shaders, examples, tests, and design documents. This way, we can use issues and PRs covering everything in the same place, cross-reference stuff within the repo, as well as with other GitHub repos such as  rspirv and  Rust itself.\n We meet weekly over a Discord call to discuss design and triage issues. Each meeting has an  issue with agenda, links and minutes.\n    spirv-builder for a convenient way of building a GPU crate in a CPU build.rs file.\n  We welcome community contributions to this project. If you would like to get started, be sure to checkout the   rust-gpu dev guide and our  Contributor Guide for more information on how to get started.\n      Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.", "posttime": "2020-10-24 07:20:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,rust,gpu,\u8bed\u8a00", "title": "Rust-GPU\uff1a\u4f7fRust\u6210\u4e3aGPU\u4ee3\u7801\u7684\u4e00\u6d41\u8bed\u8a00\u548c\u751f\u6001\u7cfb\u7edf", "title_en": "Rust-GPU: Making Rust a first-class language and ecosystem for GPU code", "transed": 1, "url": "https://github.com/EmbarkStudios/rust-gpu", "via": "", "real_tags": ["\u4ee3\u7801", "rust", "gpu", "\u8bed\u8a00"]}, {"category": "", "categoryclass": "", "imagename": "605c5c22287b7af81b04e5ea08237f77.jpg", "infoid": 1030798, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea\u52a8\u9a7e\u9a76\u6280\u672f\u662f\u4e00\u4e2a\u5723\u676f\uff0c\u6709\u671b\u6c38\u8fdc\u6539\u53d8\u6211\u4eec\u4e0e\u6c7d\u8f66\u4e92\u52a8\u7684\u65b9\u5f0f\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5df2\u7ecf\u6709\u4e86\u5927\u91cf\u7684\u7092\u4f5c\u548c\u5174\u594b\uff0c\u4f46\u5c06\u53f8\u673a\u4ece\u7b49\u5f0f\u4e2d\u5254\u9664\u7684\u6574\u8f66\u4ecd\u7136\u9065\u9065\u65e0\u671f\u3002\u7279\u65af\u62c9\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u5c06\u81ea\u5df1\u5b9a\u4f4d\u4e3a\u8fd9\u4e00\u9886\u57df\u7684\u5e02\u573a\u9886\u5148\u8005\uff0c\u4ed6\u4eec\u7684\u81ea\u52a8\u9a7e\u9a76\u6280\u672f\u5141\u8bb8\u5728\u9009\u5b9a\u7684\u9ad8\u901f\u516c\u8def\u4e0a\u62e5\u6709\u4e00\u4e9b\u6709\u9650\u7684\u81ea\u4e3b\u6743\u3002\u7136\u800c\uff0c\u5728\u6700\u8fd1\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\uff0c\u4ed6\u4eec\u9884\u793a\u7740\u5728\u4ed6\u4eec\u7684Early Access\u8ba1\u5212\u4e2d\uff0c\u4e3a\u9009\u62e9\u6d4b\u8bd5\u7248\u6d4b\u8bd5\u8005\u63d0\u4f9b\u7684\u4e00\u79cd\u65b0\u7684\u201c\u5168\u81ea\u52a8\u9a7e\u9a76\u201d\u80fd\u529b\u7684\u5230\u6765\u3002\n\u65b0\u7684\u8f6f\u4ef6\u66f4\u65b0\u8fdb\u4e00\u6b65\u6269\u5c55\u4e86\u7279\u65af\u62c9\u6c7d\u8f66\u534a\u81ea\u52a8\u9a7e\u9a76\u7684\u80fd\u529b\u3002\u5c3d\u7ba1\u6709\u201c\u5168\u81ea\u52a8\u9a7e\u9a76\u201d\u7684\u81ea\u5439\u81ea\u64c2\u7684\u7ef0\u53f7\uff0c\u6216\u7b80\u79f0FSD\uff0c\u4f46\u5b83\u4ecd\u7136\u88ab\u5f52\u7c7b\u4e3a\u4e8c\u7ea7\u9a7e\u9a76\u81ea\u52a8\u5316\u7cfb\u7edf\uff0c\u5b83\u4f9d\u8d56\u4e8e\u4eba\u5de5\u5e72\u9884\u4f5c\u4e3a\u540e\u5907\u3002\u8fd9\u610f\u5473\u7740\u53f8\u673a\u5fc5\u987b\u5168\u795e\u8d2f\u6ce8\uff0c\u968f\u65f6\u51c6\u5907\u63a5\u624b\u3002\u7528\u6237\u88ab\u544a\u77e5\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u8981\u628a\u624b\u653e\u5728\u65b9\u5411\u76d8\u4e0a\uff0c\u4f46\u53ef\u4ee5\u9884\u89c1\u7684\u662f\uff0c\u7528\u6237\u65e0\u89c6\u8fd9\u4e00\u63aa\u65bd\u7684\u89c6\u9891\u5df2\u7ecf\u6d6e\u51fa\u6c34\u9762\u3002\n\u6d88\u9632\u5904\u548c\u4ee5\u524d\u7684Autopilot\u8f6f\u4ef6\u7684\u4e3b\u8981\u533a\u522b\u662f\u80fd\u591f\u5728\u57ce\u5e02\u8857\u9053\u4e0a\u5bfc\u822a\u3002\u4ee5\u524d\uff0c\u7279\u65af\u62c9\u7684\u8f66\u8f86\u53ea\u80fd\u5728\u9ad8\u901f\u516c\u8def\u4e0a\u81ea\u52a8\u9a7e\u9a76\uff0c\u90a3\u91cc\u7684\u8f66\u6d41\u66f4\u89c4\u5219\uff0c\u66f4\u5bb9\u6613\u5904\u7406\u3002\u57ce\u5e02\u8857\u9053\u5e26\u6765\u4e86\u66f4\u5927\u7684\u590d\u6742\u6027\uff0c\u5371\u9669\u56e0\u7d20\u5305\u62ec\u505c\u653e\u7684\u6c7d\u8f66\u3001\u884c\u4eba\u3001\u81ea\u884c\u8f66\u548c\u590d\u6742\u7684\u5341\u5b57\u8def\u53e3\u3002\u4e0e\u8be5\u9886\u57df\u7684\u5176\u4ed6\u516c\u53f8\u5728\u6fc0\u5149\u96f7\u8fbe\u6280\u672f\u4e0a\u6295\u5165\u5de8\u8d44\u4e0d\u540c\uff0c\u7279\u65af\u62c9\u7684\u7cfb\u7edf\u5b8c\u5168\u4f9d\u8d56\u76f8\u673a\u548c\u96f7\u8fbe\u6765\u5bfc\u822a\u5468\u56f4\u7684\u4e16\u754c\u3002\n\u8bb8\u591a\u53f8\u6cd5\u7ba1\u8f96\u533a\u90fd\u6709\u7ba1\u7406\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u6d4b\u8bd5\u98ce\u9669\u7684\u6cd5\u89c4\u3002\u5c24\u5176\u662f\u57282018\u5e74\u4e00\u540d\u884c\u4eba\u88ab\u4f18\u6b65(Uber)\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u649e\u6b7b\u540e\uff0c\u8bb8\u591a\u4eba\u4e00\u76f4\u5bf9\u5728\u516c\u5171\u9053\u8def\u4e0a\u653e\u4efb\u8fd9\u9879\u6280\u672f\u7684\u98ce\u9669\u4fdd\u6301\u8b66\u60d5\u3002\n\u7279\u65af\u62c9\u4f3c\u4e4e\u6709\u80fd\u529b\u7ed5\u8fc7\u8fd9\u4e00\u8981\u6c42\uff0c\u53ea\u9700\u7b80\u5355\u5730\u8bf4\u660e\u53f8\u673a\u5bf9\u8f66\u8f86\u8d1f\u6709\u8d23\u4efb\uff0c\u5fc5\u987b\u59cb\u7ec8\u4fdd\u6301\u8b66\u60d5\u3002\u95ee\u9898\u662f\uff0c\u8fd9\u4e2a\u9009\u9879\u5ffd\u7565\u4e86\u81ea\u52a8\u9a7e\u9a76\u5bf9\u4eba\u7c7b\u53f8\u673a\u7684\u5f71\u54cd\u3002\u50cf\u5de1\u822a\u63a7\u5236\u8fd9\u6837\u7684\u4f20\u7edf\u8f85\u52a9\u8bbe\u5907\u4ecd\u7136\u9700\u8981\u53f8\u673a\u9a7e\u9a76\uff0c\u786e\u4fdd\u4ed6\u4eec\u7684\u6ce8\u610f\u529b\u5b8c\u5168\u96c6\u4e2d\u5728\u9a7e\u9a76\u4efb\u52a1\u4e0a\u3002\u7136\u800c\uff0c\u5f53\u8f66\u8f86\u63a5\u7ba1\u6240\u6709\u9a7e\u9a76\u804c\u8d23\u65f6\uff0c\u73af\u8def\u4e2d\u7684\u4eba\u5c31\u4f1a\u62c5\u8d1f\u8d77\u8b66\u60d5\u5371\u9669\u7684\u89d2\u8272\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u8bd5\u56fe\u6301\u7eed\u5730\u4e13\u6ce8\u4e8e\u8fd9\u6837\u4e00\u9879\u4efb\u52a1\uff0c\u800c\u5b9e\u9645\u4e0a\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u8fd9\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002\u798f\u7279\u81ea\u5df1\u7684\u5de5\u7a0b\u5e08\u5728\u6d4b\u8bd5\u516c\u53f8\u7684\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u65f6\u7ecf\u5e38\u4f1a\u7761\u7740\u3002\u5b83\u5c06\u8868\u660e\uff0c\u4efb\u4f55\u671f\u671b\u4eba\u7c7b\u4e0d\u65ad\u51c6\u5907\u63a5\u7ba1\u7684\u7cfb\u7edf\uff0c\u5982\u679c\u4e0d\u8ba9\u4ed6\u4eec\u53c2\u4e0e\u8fdb\u6765\uff0c\u5c31\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u7279\u65af\u62c9\u51b3\u5b9a\u5411\u516c\u4f17\u5f00\u653e\u6d4b\u8bd5\u7248\u6d4b\u8bd5\u662f\u6709\u4e89\u8bae\u7684\u3002\u5141\u8bb8\u516c\u4f17\u4f7f\u7528\u8fd9\u9879\u6280\u672f\u4e0d\u4ec5\u4f1a\u7ed9\u7279\u65af\u62c9\u8f66\u4e3b\u5e26\u6765\u98ce\u9669\uff0c\u5176\u4ed6\u9053\u8def\u4f7f\u7528\u8005\u4e5f\u4f1a\u9762\u4e34\u98ce\u9669\u3002NHTSA\u53d1\u51fa\u4e25\u5389\u8b66\u544a\uff0c\u79f0\u5176\u201c\u5c06\u6beb\u4e0d\u72b9\u8c6b\u5730\u91c7\u53d6\u884c\u52a8\uff0c\u4fdd\u62a4\u516c\u4f17\u514d\u53d7\u4e0d\u5408\u7406\u7684\u5b89\u5168\u98ce\u9669\u201d\u3002\u5f53\u7136\uff0c\u7279\u65af\u62c9\u5e76\u4e0d\u662f\u552f\u4e00\u5bb6\u5728\u81ea\u52a8\u9a7e\u9a76\u9886\u57df\u53d6\u5f97\u8fdb\u5c55\u7684\u516c\u53f8\u3002\u901a\u7528\u6c7d\u8f66\u7684Cruise\u5c06\u5728\u4eca\u5e74\u5e74\u5e95\u524d\u5728\u6ca1\u6709\u4eba\u7c7b\u76d1\u7763\u7684\u60c5\u51b5\u4e0b\u6d4b\u8bd5\u4ed6\u4eec\u7684\u673a\u5668\u4eba\u8f66\u8f86\uff0cAlphabet\u7684Waymo\u5df2\u7ecf\u8fd0\u8425\u5b8c\u5168\u65e0\u4eba\u9a7e\u9a76\u7684\u62fc\u8f66\u670d\u52a1\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u4e58\u5ba2\u9075\u5b88\u4e86\u4e25\u683c\u7684\u4fdd\u5bc6\u534f\u8bae\u3002\n\u8fd9\u4e9b\u60c5\u51b5\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u65e0\u8bba\u662f\u514b\u9c81\u65af\u8fd8\u662fWaymo\u90fd\u4e0d\u4f9d\u8d56\u4eba\u7c7b\u4fdd\u6301\u5bf9\u5371\u9669\u7684\u6301\u7eed\u8b66\u60d5\u3002\u4ed6\u4eec\u7684\u7cfb\u7edf\u5df2\u7ecf\u53d1\u5c55\u5230\u4e86\u76d1\u7ba1\u673a\u6784\u613f\u610f\u8ba9\u8fd9\u4e9b\u516c\u53f8\u5728\u6ca1\u6709\u76f4\u63a5\u5e72\u9884\u7684\u60c5\u51b5\u4e0b\u8fd0\u8425\u8f66\u8f86\u7684\u5730\u6b65\u3002\u8fd9\u79cd\u5bf9\u6bd4\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u6765\u611f\u77e5\uff0c\u6bcf\u79cd\u65b9\u5f0f\u90fd\u6709\u4e00\u5b9a\u7684\u6b63\u786e\u6027\u3002\u7279\u65af\u62c9\u7684\u6280\u672f\u53ef\u4ee5\u88ab\u89c6\u4e3a\u91c7\u53d6\u4e86\u4e00\u6761\u7b80\u5355\u7684\u51fa\u8def\uff0c\u8ba9\u4eba\u7c7b\u8d1f\u8d23\u5f25\u8865\u81ea\u52a8\u9a7e\u9a76\u7cfb\u7edf\u4e2d\u7684\u7f3a\u9677\uff0c\u5e76\u4fdd\u62a4\u516c\u53f8\u514d\u53d7\u8bc9\u8bbc\u3002\u8003\u8651\u5230\u4ed6\u4eec\u6700\u8fd1\u66f4\u65b0\u4e86\u8f66\u8f7d\u6444\u50cf\u5934\u56fa\u4ef6\uff0c\u8fd9\u4f3c\u4e4e\u662f\u6709\u9053\u7406\u7684\u3002\u6216\u8005\uff0c\u7279\u65af\u62c9\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u89c6\u4e3a\u66f4\u8c28\u614e\u7684\u9009\u62e9\uff0c\u5728\u51fa\u73b0\u95ee\u9898\u7684\u60c5\u51b5\u4e0b\u8ba9\u4eba\u4fdd\u6301\u5728\u5faa\u73af\u4e2d\u3002\u7136\u800c\uff0c\u8003\u8651\u5230\u5df2\u7ecf\u666e\u904d\u5b58\u5728\u7684\u8bc1\u636e\u8868\u660e\uff0c\u8fd9\u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u594f\u6548\uff0c\u4eba\u4eec\u9700\u8981\u6709\u6148\u5584\u7cbe\u795e\u624d\u80fd\u6301\u6709\u540e\u4e00\u79cd\u89c2\u70b9\u3002\n\u4e00\u79cd\u4fdd\u5b88\u7684\u89c2\u70b9\u8ba4\u4e3a\uff0c\u968f\u7740\u8fd9\u9879\u6280\u672f\u7684\u63a8\u51fa\uff0c\u6211\u4eec\u5c06\u770b\u5230\u66f4\u591a\u4e25\u91cd\u7684\u5931\u8bef\uff0c\u8fd9\u662f\u4eba\u7c7b\u53f8\u673a\u4e0d\u4f1a\u72af\u7684-\u5c31\u50cf\u7279\u65af\u62c9\u81ea\u52a8\u9a7e\u9a76\u6280\u672f\u7684\u524d\u51e0\u6b21\u8fed\u4ee3\u4e00\u6837\u3002\u4e8b\u60c5\u53d8\u5f97\u6bdb\u9aa8\u609a\u7136\u7684\u5730\u65b9\u662f\u786e\u5b9a\u8fd9\u4e9b\u5931\u8bef\u662f\u5426\u6bd4\u628a\u4eba\u7559\u5728\u65b9\u5411\u76d8\u4e0a\u63d0\u4f9b\u66f4\u597d\u7684\u5b89\u5168\u8bb0\u5f55\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5373\u4f7f\u662f\u591a\u8d77\u6b7b\u4ea1\u4e8b\u4ef6\u4e5f\u6ca1\u6709\u51cf\u7f13\u8fd9\u5bb6\u6c7d\u8f66\u5236\u9020\u5546\u7684\u63a8\u8fdb\u901f\u5ea6\uff0c\u6240\u4ee5\u671f\u5f85\u7740\u5728\u4f60\u9644\u8fd1\u7684\u516c\u5171\u9053\u8def\u4e0a\u7ee7\u7eed\u770b\u5230\u53d1\u5c55\u3002", "note_en": "Self-driving technology is a holy grail that promises to forever change the way we interact with cars. Thus far, there\u2019s been plenty of hype and excitement, but full vehicles that remove the driver from the equation have remained far off. Tesla have long posited themselves as a market leader in this area, with their Autopilot technology allowing some limited autonomy on select highways. However, in a recent announcement,  they have heralded the arrival of a new \u201cFull Self Driving\u201d ability for select beta testers in their early access program.\n   The new software update further extends the capabilities of Tesla vehicles to drive semi-autonomously. Despite the boastful \u201cFull Self Driving\u201d moniker, or FSD for short, it\u2019s still classified as  a Level 2 driving automation system, which relies on human intervention as a backup. This means that the driver must be paying attention and ready to take over in an instant, at all times. Users are instructed to keep their hands on the wheel at all times, but predictably,  videos have already surfaced of users ignoring this measure.\n The major difference between FSD and the previous Autopilot software is the ability to navigate city streets. Formerly, Tesla vehicles were only able to self-drive on highways, where the more regular flow of traffic is easier to handle. City streets introduce far greater complexity, with hazards like parked cars, pedestrians, bicycles, and complicated intersections. Unlike others in the field,  who are investing heavily in LIDAR technology, Tesla\u2019s system relies entirely on cameras and radar to navigate the world around it.\n  Regulations are in place in many jurisdictions to manage the risks of testing autonomous vehicles. Particularly after  a pedestrian was killed by an Uber autonomous car in 2018, many have been wary of the risks of letting this technology loose on public roads.\n Tesla appear capable of shortcutting this requirement, by simply stating that the driver is responsible for the vehicle and must remain alert at all times. The problem is that this option ignores the effect that autonomous driving has on a human driver. Traditional aids like cruise control still require the driver to steer, ensuring their attention is fully trained on the driving task. However, when the vehicle takes over all driving duties, the human in the loop is left with the role of staying vigilant for danger. Trying to continuously concentrate on such a task, while not being actually required to do anything most of the time, is acutely difficult for most people.  Ford\u2019s own engineers routinely fell asleep during testing of the company\u2019s autonomous vehicles. It goes to show that any system that expects a human to be constantly ready to take over doesn\u2019t work without keeping them involved.\n  Tesla\u2019s decision to open the beta test to the public has proved controversial. Allowing the public to use the technology puts not just Tesla owners, but other road users at risk too.  The NHTSA have delivered a stern warning, stating it \u201cwill not hesitate to take action to protect the public against unreasonable risks to safety.\u201d Of course, Tesla are not the only company forging ahead in the field of autonomous driving.  GM\u2019s Cruise will be trialing their robotic vehicles without human oversight before the year is out, and Alphabet\u2019s Waymo has already been running an entirely driverless rideshare service for some time,  with riders held to a strict non-disclosure agreement.\n  The difference in these cases is that neither Cruise or Waymo are relying on a human to remain continually watchful for danger. Their systems have been developed to a point where regulators are comfortable allowing the companies run the vehicles without direct intervention. This contrast can be perceived in two ways, which each have some validity. Tesla\u2019s technology could be seen as taking the easy way out, holding a human responsible to make up for shortcomings in the autonomous system and protect the company from litigation.  Given their recent updates to their in-car camera firmware, this seems plausible. Alternatively, Tesla\u2019s approach could be seen as the more cautious choice, keeping a human in the loop in the event something does go wrong. However, given that evidence is already prevalent that this doesn\u2019t work well in practice, one would need to be charitable to hold the latter opinion.\n A conservative view suggests that as the technology rolls out, we\u2019ll see more egregious slip ups that a human driver wouldn\u2019t have made \u2014  just like previous iterations of Tesla\u2019s self driving technology. Where things get hairy is determining if those slip-ups deliver a better safety record than leaving humans behind the wheel. Thus far,  even multiple fatalities haven\u2019t slowed the automaker\u2019s push, so expect to see development continue on public roads near you.", "posttime": "2020-10-24 07:20:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7279\u65af\u62c9,\u9a7e\u9a76,begins", "title": "\u7279\u65af\u62c9\u5f00\u59cb\u201c\u5168\u81ea\u52a8\u9a7e\u9a76\u201d\u516c\u6d4b\uff0cWaymo\u548cCruise\u65e0\u4eba\u503c\u5b88", "title_en": "Tesla Begins \u201cFull Self Driving\u201d Public Beta as Waymo and Cruise Go Unattended", "transed": 1, "url": "https://hackaday.com/2020/10/23/tesla-begins-full-self-driving-public-beta-as-waymo-and-cruise-go-unattended/", "via": "", "real_tags": ["\u7279\u65af\u62c9", "\u9a7e\u9a76", "begins"]}]