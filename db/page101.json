[{"category": "", "categoryclass": "", "imagename": "ef6abc1be8f2f3b35838a55416b7be81.png", "infoid": 1072453, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e24\u8005\u90fd\u7ed9\u4e86\u6211\u4e00\u79cd\u611f\u53d7\u7a7a\u95f4\u5982\u4f55\u5de5\u4f5c\u3002\u8981\u6e05\u695a\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u662f\u201c\u5206\u5e03\u201d\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\uff1a\u4ed6\u4eec\u53ea\u662f\u6b63\u5e38\u7684\u53cd\u5e94\u7f51\u7ad9\u3002 \u201c\u5206\u5e03\u56e0\u7d20\u201d\u662f\u6307\u72b6\u6001\u548c\u903b\u8f91/\u6743\u9650\u66f4\u65b0\u72b6\u6001\u7684\u751f\u547d\uff1a\u5728\u533a\u5757\u94fe\u4e2d\u800c\u4e0d\u662f\u5728\u201c\u96c6\u4e2d\u201d\u6570\u636e\u5e93\u4e2d\u3002\n\u8fd9\u4e9b\u5ba2\u6237\u7aefAPI\u4e0d\u4f7f\u7528\u4efb\u4f55\u4e1c\u897f\u6765\u9a8c\u8bc1\u533a\u5757\u94fe\u72b6\u6001\u6216\u54cd\u5e94\u7684\u771f\u5b9e\u6027\u3002\u7ed3\u679c\u751a\u81f3\u6ca1\u6709\u7b7e\u7f72\u3002\n\u6211\u53ea\u662f\u60f3\u6307\u51fa\u8fd9\u662f\u641e\u7b11\u7684\uff0c\u6211\u770b\u5230\u5b83\u88ab\u9732\u73e0\u88ab\u53d6\u6d88\u4e86\u3002\u6211\u7684\u4fe1\u5ff5\u662f\uff0c\u5f62\u8c61\u53d8\u5316\u5f80\u5f80\u4e0e\u9a97\u5c40\u6709\u5173\uff0c\u6240\u4ee5Opensea\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u9a97\u5c40\u3002\n\u60a8\u9009\u62e9\u4f7f\u7528OpenSea\u83b7\u5f97Opensea\u4eba\u5458\u5c06\u4e3a\u60a8\u652f\u4ed8\u7684\u4ef7\u503c\u3002\u90a3\u4e2a\u6570\u636e\u4e0d\u5728\u94fe\u4e0a\uff0c\u56e0\u4e3a\u8fd9\u4e0d\u662f\u5e02\u573a\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5c3d\u7ba1\u6bcf\u4e2a\u5e02\u573a\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5e02\u573a\u8ba2\u5355\u4e0a\u7684\u94fe\u6761\uff0c\u4f46\u5b83\u4f1a\u5f88\u9177\u3002\n\u8fd9\u542c\u8d77\u6765\u50cf\u662f\u4f60\u63cf\u8ff0\u4e86\u7b2c2\u5c42\u89e3\u51b3\u65b9\u6848\uff0c\u8c22\u5929opensea\u652f\u6301\u591a\u8fb9\u5f62\uff0c\u8fd9\u4f7f\u5f97\u5b83\u66f4\u4fbf\u5b9c\uff0c\u66f4\u5feb\uff0c\u66f4\u5bb9\u6613\u4f7f\u7528\u3002\u6211\u4eb2\u81ea\u5e0c\u671bZK-rollups\u771f\u6b63\u4f7f\u5b83\u66f4\u4fbf\u5b9c\uff0c\u66f4\u5bb9\u6613\u4f7f\u7528\u3002\n\u6bcf\u4e2a\u7528\u6237\u90fd\u5fc5\u987b\u652f\u4ed8\u4e00\u5207\u8d39\u7528\u3002\u6211\u5b9e\u9645\u4e0a\u81ea\u5df1\u6b63\u5728\u52aa\u529b\uff0c\u6211\u8ba4\u4e3a\u94c6\u63a5\u548c\u4f7f\u7528\u8d4c\u6ce8\u7684\u6536\u76ca\u6765\u652f\u4ed8\u975eWeb3\u7528\u6237\u7684\u5de5\u4f5c\u3002\u6211\u6709\u5174\u8da3\u542c\u5230\u522b\u4eba\u5982\u4f55\u8ba9Web2\u7528\u6237\u5728\u6ca1\u6709\u4ed8\u8d39\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528Web3\u3002 DM ME\uff01", "note_en": "Both gave me a feeling for how the space works. To be clear, there is nothing particularly \u201cdistributed\u201d about the apps themselves: they\u2019re just normal react websites. The \u201cdistributedness\u201d refers to where the state and the logic/permissions for updating the state lives: on the blockchain instead of in a \u201ccentralized\u201d database.\n Just to clarify, this is what the author wanted to do. You can create distributed apps easily using  Fleek or by manually uploading to IPFS, Arweave or Filecoin.\n A server! But, as we know, people don\u2019t want to run their own servers. As it happens, companies have emerged that sell API access to an ethereum node they run as a service, along with providing analytics, enhanced APIs they\u2019ve built on top of the default ethereum APIs, and access to historical transactions. Which sounds\u2026 familiar. At this point, there are basically two companies. Almost all dApps use either Infura or Alchemy in order to interact with the blockchain. In fact, even when you connect a wallet like MetaMask to a dApp, and the dApp interacts with the blockchain via your wallet, MetaMask is just making calls to Infura!\n This is true at the moment, but there is work being done on  Light Clients which:\n The purpose of the light client protocol is to allow users in low-capacity environments (embedded smart property environments, smartphones, browser extensions, some desktops, etc) to maintain a high-security assurance about the current state of some particular part of the Ethereum state or verify the execution of a transaction.\n And also alternatives to Infura such as  Pockt Network which is a decentralised Web3 infrastructure company. Per Pockt Network\u2019s website:\n Instead of deploying to a single service provider, paying absurd fees for random outages and leaked data, tap into Pocket\u2019s trustless API protocol and route your requests to 1000\u2019s of independent full nodes. Available for all major blockchain networks.\n  These client APIs are not using anything to verify blockchain state or the authenticity of responses. The results aren\u2019t even signed.\n   Partisans of the blockchain might say that it\u2019s okay if these types of centralized platforms emerge, because the state itself is available on the blockchain, so if these platforms misbehave clients can simply move elsewhere. However, I would suggest that this is a very simplistic view of the dynamics that make platforms what they are.I also wanted to create a more traditional NFT. Most people think of images and digital art when they think of NFTs, but NFTs generally do not store that data on-chain.\n This is true, most NFTs do not store data on-chain. But this is not always true, you can store the data on the chain. You can also use alternative layer-1s such as  Tezos,  https://www.avax.network/ which makes it much more cost efficient to store on-chain data. However, I am not a fan of this. One of the big rebuttals we don\u2019t have an answer for is \u201cwhat if we store illegal images on the chain?\u201d currently it is too expensive to do so, but genuinely there is no work being done on this that I can see and it is a concern for everyone.\n You also have to consider sending NFTs to other people that are prohibitively expensive to sell. You can easily make an NFT that costs say, $4000 to sell (just make it contain a lot of data) and this person will be stuck with it attached to their identity forever. Opensea lets you \u201chide\u201d them, but this only works on their frontend.\n Looking at many of the NFTs on popular marketplaces being sold for tens, hundreds, or millions of dollars, that URL often just points to some VPS running Apache somewhere.\n This is a lie. Most NFTs which sell for millions use IPFS, Arweave, Filecoin or others for decentralised storage of data. A lot of NFTs do use Google Drive or Imgur or whatever. However, I can promise you that one of the first things people do when making sure they are not rugged (crypto-term for scammed) is to make sure it\u2019s not possible for the author to suddenly delete or change the image.\n So as an experiment, I made an NFT that changes based on who is looking at it, since the web server that serves the image can choose to serve different images based on the IP or User Agent of the requester.\n I just wanted to point out that this was hilarious and I saw it was taken down by Opensea. My belief is that image changing is often related to scams, so Opensea took it down thinking it was a scam.\n What I found most interesting, though, is that after OpenSea removed my NFT, it also no longer appeared in any crypto wallet on my device.A wallet like MetaMask needs to do basic things like display your balance, your recent transactions, and your NFTs, as well as more complex things like constructing transactions, interacting with smart contracts, etc. In short, MetaMask needs to interact with the blockchain, but the blockchain has been built such that clients like MetaMask can\u2019t interact with it. So like my dApp, MetaMask accomplishes this by making API calls to three companies that have consolidated in this space.All this means that if your NFT is removed from OpenSea, it also disappears from your wallet. It doesn\u2019t functionally matter that my NFT is indelibly on the blockchain somewhere, because the wallet (and increasingly everything else in the ecosystem) is just using the OpenSea API to display NFTs, which began returning 304 No Content for the query of NFTs owned by my address!\n This is true, wallets suck so much it\u2019s funny. I was sent a \u00a32k NFT the other day which I can\u2019t sell because Opensea has glitched and my wallet won\u2019t show me the NFT, which means I can\u2019t send it or sell it! (they are working on this, and I have told them that relying on centralised Opensea is a very bad idea).\n Almost everyone in Web3 hates Opensea and their centralised mess. There are alternatives being worked on such as  OpenDao,  NFTX and more. The sooner Opensea dies, the better.\n I think this is a very fair comment from Moxie and we should dunk on wallets and Opensea for this mess they\u2019ve created. However, I wanted to point out that people in Web3 don\u2019t sit idly by and enjoy this centralised mess. We are actively building alternatives!\n Likewise, the web3 protocols are slow to evolve. When building First Derivative, it would have been great to price minting derivatives as a percentage of the underlying\u2019s value. That data isn\u2019t on chain, but it\u2019s in an API that OpenSea will give you.\n This is how markets work, and why arbitrage exists. See  Flash Boys for how this works in the stock market. Your NFT is only worth what someone wants to pay. Someone on Opensea may pay 5 eth for it, but someone on Discord may pay 10 eth.\n You chose to use Opensea to get the value of what people on Opensea will pay you for. That data isn\u2019t on chain because that\u2019s not how markets work, although it\u2019d be cool if every market place used the same market-order book on-chain.\n People are excited about NFT royalties for the way that can benefit creators, but royalties aren\u2019t specified in ERC-721\n You\u2019re right, royalties are specified in  ERC-2981. I would also like to point out that ERC-721 is not the only NFT standard, take a look at  ERC-1155 if you wanted to dive deeper :-)\n so OpenSea has its own way of configuring royalties that exists in web2 space. Iterating quickly on centralized platforms is already outpacing the distributed protocols and consolidating control into platforms.\n  \u201cIt\u2019s early days still\u201d is the most common refrain I see from people in the web3 space when discussing matters like these. In some ways, cryptocurrency\u2019s failure to scale beyond relatively nascent engineering is what makes it possible to consider the days \u201cearly,\u201d since objectively it has already been a decade or more.\n This is because it is early days, still. As you could read from my article there is so much work being done. NFTs are only 3 years old. Layer 1\u2019s and 2\u2019s are arguably only around a year old.\n When you think about it, OpenSea would actually be much \u201cbetter\u201d in the immediate sense if all the web3 parts were gone. It would be faster, cheaper for everyone, and easier to use.For example, to accept a bid on my NFT, I would have had to pay over $80-$150+ just in ethereum transaction fees.\n This sounds like you\u2019re describing a  layer-2 solution, thankfully Opensea supports polygon which does make it cheaper, faster, and easier to use. I am personally hoping for  zk-rollups to really make it cheaper, easier to use.\n I will say we shouldn\u2019t strive for \u201ccheaper\u201d, we should strive for \u201cso cheap its free\u201d. Opensea lets you mint NFTs for free using Polygon. The benefits of fully decentralised technologies without the downside of a microtransaction at every aspect of it. I talk more about this later.\n So the money draws people into OpenSea, they improve the experience by building a platform that iterates on the underlying web3 protocols in web2 space, they eventually offer the ability to \u201cmint\u201d NFTs through OpenSea itself instead of through your own smart contract, and eventually this all opens the door for Coinbase to offer access to the validated NFT market with their own platform via your debit card. That opens the door to Coinbase managing the tokens themselves through dark pools that Coinbase holds, which helpfully eliminates the transaction fees and makes it possible to avoid having to interact with smart contracts at all. Eventually, all the web3 parts are gone, and you have a website for buying and selling JPEGS with your debit card. The project can\u2019t start as a web2 platform because of the market dynamics, but the same market dynamics and the fundamental forces of centralization will likely drive it to end up there.\n Moxie is right about this currently. It is harder to use true web3 stuff than it is to use a centralised platform. The user experience of Web3 is its biggest problem, and something we are all working very hard on. Things like  Argent Wallet are working hard to improve this, but we still have a long way to go because we are in the early days.\n  I think was this a fair article that accurately portrays some parts of web3 at this given moment in time. Moxie mentions:\n  Which is fair. I just thought I\u2019d write this and explain what\u2019s being done to fix this and go further. My personal pet hates for crypto are:\n Illegal images being sent to your wallet, forcing you to go to prison in some places.\n  Every user will have to pay for everything. I am actually working on this myself, I think staking and using the proceeds from staking to pay for non-web3 users would work. I\u2019m interested to hear how others are letting web2 users use web3 without paying.  DM me!\n There is some genuinely cool tech being worked on here, but due to the monetrary aspect there are scams up to my eyeballs. And those scams make the whole industry look bad. I think Moxie focussed on the NFT side too much which is arguably the side with the most scams / problems. There\u2019s still a lot of genuinely cool technology that exists  outside of NFTs.\n   You also need to realise that Web3 is world-wide, not just America or Europe. Some countries have unstable currencies and to use USD you need to pay a hefty fee. Web3 lets them have the safety of USD without this fee. Or you can use decentralised finance to invest, bank or do other things not available to you. You can earn money in pay-2-earn games, a lot more than you could with a job in some countries.\n A lot of people who criticise Web3 come from a privileged position and do not see it benefitting them. It does, however, benefit everyone else in the world.", "posttime": "2022-01-09 21:54:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56de\u7b54,impressions,opensea", "title": "\u56de\u7b54\u6211\u7684\u7b2c\u4e00\u5370\u8c613", "title_en": "In Response to My first impressions of Web3", "transed": 1, "url": "https://skerritt.blog/response-to-moxie/", "via": "", "real_tags": ["\u56de\u7b54", "opensea"]}, {"category": "", "categoryclass": "", "imagename": "2c78658e363649cb9b032c7e00ce9414.png", "infoid": 1072452, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7531\u4e8e\u6211\u4eec\u662f\u653f\u5e9c\u8b66\u544a\uff0c\u5173\u4e8e\u6f5c\u5728\u7684\u5065\u5eb7\u5371\u5bb3\u996e\u98df\u548c\u996e\u9152\u7684\u6f5c\u5728\u8b66\u544a\uff0c\u5b83\u4ee4\u4eba\u8033\u76ee\u4e00\u65b0\uff08\u548c\u56f0\u60d1\uff09\uff0c\u770b\u5230\u4e00\u4e2a\u5e7f\u6cdb\u5c0a\u91cd\u7684\u98df\u54c1\u4f5c\u5bb6\u8fd1\u671f\uff0c\u201c\u4eba\u4eec\u4e0d\u5fc5\u8981\u5730\u5bb3\u6015\u7ec6\u83cc\u201d\u3002\n\u6211\u627f\u8ba4\u8981\u8fdd\u53cd\u81ea\u5df1\u7684\u80a1\u7968\u5236\u4f5c\u6307\u5bfc\u65b9\u9488\uff0c\u867d\u7136\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\uff0c\u800c\u4e0d\u662f\u51e0\u5929\u3002\u5f53\u6211\u716e\u4e00\u4e2a\u665a\u9910\u65f6\uff0c\u6211\u4f7f\u7528\u5269\u4e0b\u7684\u5e9f\u6599\u548c\u9aa8\u5934\u5f00\u59cb\u80a1\u7968\uff0c\u5728\u6211\u6e05\u7406\u7684\u65f6\u5019\u7168\uff0c\u7136\u540e\u5728\u6211\u4e0a\u5e8a\u7761\u89c9\u524d\u62ff\u51fa\u9505\u3002\u5728\u90a3\u4e00\u70b9\u4e0a\uff0c\u51b7\u5374\u70ed\u80a1\u6709\u592a\u9ebb\u70e6\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u5728\u51b0\u7bb1\u91cc\u52a0\u70ed\u90bb\u5c45\u3002\u76f8\u53cd\uff0c\u6211\u8986\u76d6\u4e86\u9505\uff0c\u5728\u5ba4\u6e29\u4e0b\u7559\u4e0b\u5b83\uff0c\u65e9\u4e0a\u518d\u52a0\u70ed\uff0c\u5728\u7d27\u5f20\uff0c\u51b7\u5374\u548c\u5236\u51b7\u4e4b\u524d\uff0c\u5927\u7ea6\u516b\u4e2a\u5c0f\u65f6\u3002\u6211\u7684\u80a1\u7968\u4e5f\u6ca1\u6709\u8ba9\u6211\u6216\u6211\u7684\u5bb6\u4eba\u751f\u75c5\u3002\n\u6b63\u5982\u65af\u5948\u5fb7\u535a\u58eb\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u201c\u5750\u5728\u7089\u5b50\u548c\u751f\u957f\u7ec6\u83cc\u540e\u4e24\u4e09\u5929\u540e\uff0cRuhlman\u7684\u5e93\u5b58\u51e0\u4e4e\u80af\u5b9a\u6709\u9ad8\u6c34\u5e73\u7684\u4f20\u67d3\u6027\u68ad\u83cc\u7ec6\u80de\uff0c\u6216\u8089\u6bd2\u6746\u83cc\u6216\u82bd\u5b62\u6746\u83cc\u6216\u82bd\u5b62\u6746\u83cc\u7ec6\u80de\u53ca\u5176\u6bd2\u7d20\uff0c\u6216\u4e00\u4e9b\u5176\u7ec4\u5408\u3002\u201c\n\u50cf\u8089\u7c7b\u5e93\u5b58\u4e00\u6837\uff0c\u6240\u6709\u6e7f\u6da6\u7684\u98df\u7269\u90fd\u6613\u4e8e\u901a\u8fc7\u751f\u5b58\u8005\u7ec6\u83cc\u6765\u91cd\u65b0\u6e17\u900f\u3002 \uff08\u70d8\u7119\u98df\u54c1\u901a\u5e38\u5bf9\u7ec6\u83cc\u8fc7\u4e8e\u5e72\u71e5;\u5b83\u4eec\u88ab\u6a21\u5177\u6240\u635f\u574f\u3002\uff09\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5e94\u8be5\u907f\u514d\u5728\u6211\u4eec\u51c6\u5907\u6d3e\u5bf9\u6216\u5047\u671f\u76db\u5bb4\u65f6\u957f\u65f6\u95f4\u5728\u5ba4\u6e29\u4e0b\u716e\u719f\u7684\u98df\u7269\uff08\u6216\u4eab\u53d7\u4ed6\u4eec\u7684\u61d2\u60f0 - UPS\uff09\u6216\u8005\u91ce\u9910\u6216\u4e3a\u5e7c\u513f\u6253\u5305\u5348\u9910\u76d2\uff0c\u4ee5\u53ca\u8001\u4eba\u548c\u751f\u75c5\u7684\u5e7c\u513f\u66f4\u8106\u5f31\u3002\u6700\u597d\u8ba9\u6f6e\u6e7f\u7684\u5348\u9910\u7269\u54c1\u5bd2\u51b7\u6216\u70ed\uff0c\u5305\u56f4\u51b7\u85cf\u5305\u6216\u70ed\u6c34\u74f6\u3002\n\u65af\u5948\u5fb7\u535a\u58eb\u8865\u5145\u8bf4\uff0c\u5b83\u6700\u5b89\u5168\u7684\u51b7\u5374\u5269\u83dc\u9732\u51fa\u5e76\u8d28\u91cf\u4e0d\u6bd4\u4e24\u82f1\u5bf8\u539a\uff0c\u56e0\u6b64\u5b83\u4eec\u5f88\u5feb\u51c9\u723d\u3002\u5982\u679c\u5b83\u4eec\u4ecd\u7136\u5f88\u70ed\uff0c\u8bf7\u5728\u53f0\u9762\u4e0a\u5f00\u59cb\u51b7\u5374\u3002\u5f53\u5bb9\u5668\u4e0d\u518d\u70ed\u5230\u89e6\u6478\u65f6\uff0c\u5c06\u5b83\u653e\u5165\u51b0\u7bb1\u4e2d\uff0c\u4e00\u65e6\u98df\u7269\u597d\u51b7\u5374\u3002", "note_en": "PEPPERED as we are by government warnings about the potential health hazards of eating and drinking just about everything, it was refreshing (and perplexing) to see a widely respected food writer assert recently that \u201cpeople are unnecessarily afraid of bacteria\u201d in the kitchen.\n In April, Michael Ruhlman, author of \u201cRatio\u201d and \u201cThe Elements of Cooking\u201d and co-author of books by Thomas Keller and other chefs, said on his  blog that  he likes to make chicken stock and leave it out on the stovetop all week, using portions day to day to make quick soups and sauces.\n But what about the harmful microbes that could grow on foods if they were not kept either chilled or hot? \u201cOnce your stock is cooked, it\u2019s safe to eat,\u201d Mr. Ruhlman wrote. \u201cIf there were bad bacteria in it, you\u2019d have killed them.\u201d After the stock has cooled, simply reheat it, he continued, and \u201cany bacteria that landed there and began to multiply will be dispatched well before the stock hits a simmer.\u201d\n Sounds plausible, and Mr. Ruhlman and his family are alive and well. But after checking with an independent expert on food safety, I wouldn\u2019t follow this recipe without slapping a biohazard label on my stockpot.\n  The Food and Drug Administration sets regulations for commercial food production. These specify that cooked foods should sit out at temperatures from 41 degrees to 135 degrees, the range in which bacteria can grow and multiply, for no more than four hours.\n Guidelines for the consumer and home cook, which come from the Department of Agriculture Food Safety and Inspection Service, are even stricter. The current brochure,  \u201cKeep Food Safe! Food Safety Basics,\u201d on the U.S.D.A. Web site, says not to leave prepared foods in the bacterial growth zone for longer than two hours. And if it\u2019s a 90-degree summer day, cut the two hours to one.\n Mr. Ruhlman\u2019s stock spends days in the bacterial growth zone, and he happily makes it into chicken soup for his children.\n I\u2019ll admit to violating the guidelines in my own stock-making, though by a few hours, not days. When I cook a roast for dinner, I use leftover scraps and bones to start the stock, simmer it while I clean up, and take the pot off the heat right before I go to bed. At that point it\u2019s too much trouble to cool the hot stock so it won\u2019t warm up its neighbors in the refrigerator. Instead, I cover the pot, leave it at room temperature and reheat it in the morning, about eight hours later, before straining, cooling and refrigerating it. And my stock hasn\u2019t made me or my family ill, either.\n Can I be even more relaxed about my stock-making? Or have Mr. Ruhlman and I just been lucky? For an expert opinion, I sent our recipes to  O. Peter Snyder, a food scientist and veteran educator and consultant to the food-service industry, who has at times taken issue with government guidelines he considers unnecessarily conservative.\n  Dr. Snyder replied in an e-mail: \u201cThe process described by Mr. Ruhlman is a very high-risk procedure. It depends totally on reheating the stock before it is used to be sure that it doesn\u2019t make anyone ill or possibly kill them.\u201d\n It\u2019s a basic fact that every cook should know: bacteria that cause illness inevitably end up on nearly every ingredient we cook with, and even boiling won\u2019t kill all of them.\n Boiling does kill any bacteria active at the time, including E. coli and salmonella. But a number of survivalist species of bacteria are able to form inactive seedlike spores. These dormant spores are commonly found in farmland soils, in dust, on animals and field-grown vegetables and grains. And the spores can survive boiling temperatures.\n After a food is cooked and its temperature drops below 130 degrees, these spores germinate and begin to grow, multiply and produce toxins. One such spore-forming bacterium is Clostridium botulinum, which can grow in the oxygen-poor depths of a stockpot, and whose neurotoxin causes botulism.\n Once they\u2019ve germinated, bacteria multiply quickly in nourishing stock. They can double their numbers every 90 minutes at room temperature, every 15 minutes at body temperature. A single germinated spore can become 1,000 bacteria in a matter of hours, a billion in a few days.\n As Dr. Snyder put it, \u201cAfter sitting on the stove and growing bacteria for two or three days, Mr. Ruhlman\u2019s stock almost certainly has high levels of infectious Clostridium perfringens cells, or Clostridium botulinum or Bacillus cereus cells and their toxins, or some combination thereof.\u201d\n  Why has the Ruhlman family survived? Because Mr. Ruhlman boils the stock before he serves it, Dr. Snyder wrote. Any active bacteria are killed by holding the stock for a minute at 150 degrees or above, and botulism toxin is inactivated by 10 minutes at the boil.\n  But quickly reheating a contaminated stock just up to serving temperature won\u2019t destroy its active bacteria and toxins, and the stock will make people sick.\n \u201cIf Mr. Ruhlman ever has a cup of his three-day-old stock without thoroughly boiling it first, he will probably only do it once,\u201d Dr. Snyder wrote. \u201cIt is irresponsible of any cook to prepare food in a way that actually creates a new and significant hazard, even though the hazard may be eliminated in a later step.\u201d\n Safety is one problem with keeping a stock at room temperature. Flavor is another. A reboiled three-day-old stock may be safe to eat, but it is now seasoned with millions to billions of dead bacteria and their inactivated toxins. It\u2019s conceivable that they might add an interesting flavor, but more likely that the bacteria have feasted on the stock\u2019s sugars and savory amino acids, the air has oxidized and staled the fat, and the stock has become less tasty.\n I spoke with Mr. Ruhlman about Dr. Snyder\u2019s analysis of his stovetop-stored stock. \u201cI agree that I should have been clearer about the importance of the \u2018kill step,\u2019 a good 10 minutes at the boil,\u201d he said. \u201cAnd certainly to make the freshest, cleanest stock, it\u2019s always best to strain, cool and chill it as rapidly as possible.\u201d\n What about my lazy method of letting stock cool overnight, then reboiling and refrigerating it first thing in the morning? Dr. Snyder gave it a pass because it would spend only a few hours below 135 degrees, not enough time for the bacterial spores to germinate, start growing and reach hazardous numbers.\n Like meat stocks, all moist cooked foods are susceptible to being recolonized by survivalist bacteria. (Baked goods are generally too dry for bacteria; they\u2019re spoiled by molds.) That\u2019s why we should avoid leaving cooked foods out at room temperature for long when we\u2019re preparing for a party or holiday feast (or enjoying their lazy follow-ups), or having a picnic, or packing lunch boxes for young children, who along with the elderly and ill are more vulnerable. It\u2019s best to keep moist lunch items either cold or hot, surrounded by cold packs or in a thermos.\n  What are the actual odds of getting sick from casual food handling at home? No one really knows. There are many variables involved, and only a small fraction of illnesses are reported, even to a family doctor, since they\u2019re usually brief. But one unambiguous and heartbreaking story can bring home the value of handling food carefully.\n In 2008, a 26-year-old Japanese mother in the Osaka region shared a meal of leftover fried rice with her two children, ages 1 and 2. She had prepared and served the rice the day before and kept it at room temperature.\n All three became ill 30 minutes after eating the leftovers, and were hospitalized. Both children lost consciousness, and the youngest died seven hours after the meal. Pathologists later reported in the journal Pediatrics that the rice contained a very common spore-forming bacterium, Bacillus cereus, along with a heat-resistant toxin that the bacterium tends to make on starchy foods, and that can cause vomiting even after being heated to the boil.\n It may be true that most cases of food-borne illness aren\u2019t that serious, and that most reported cases can be traced to foods that were contaminated during their production or processing. But it is also true that one simple mistake at home can be fatal.\n Even though I know this, I tend to discount specific government guidelines because they seem to change arbitrarily, and they don\u2019t seem workable in real life. This is true of the latest U.S.D.A. numbers. It\u2019s unrealistic to expect home cooks to chill or reheat or discard dishes every two hours during a dinner party, or every hour at a summer barbecue.\n Dr. Snyder agreed that official pronouncements on food safety can be inconsistent and self-defeating. \u201cThe F.D.A. Food Code is very conservatively written,\u201d he wrote. \u201cFour hours after it\u2019s cooked is plenty fast enough to get food into the refrigerator.\u201d And slow enough to relax and enjoy the meal.\n Dr. Snyder added that it\u2019s safest to cool leftovers uncovered and in a mass no thicker than two inches, so they cool through quickly. If they\u2019re still hot, start the cooling on the countertop. When the container is no longer hot to the touch, put it in the refrigerator, and cover it once the food is good and cold.\n  My own everyday approach to safety is to try to keep cooked foods either hot or cold until I\u2019m ready to serve them, get leftovers in the fridge during the pause before dessert or soon after, and reheat leftovers that need it until they\u2019re boiling or steaming.\n This set of habits isn\u2019t dictated by an unnecessary, pleasure-killing fear of microbes. It simply acknowledges their inevitable presence in my kitchen, and the fact that both my food and anyone who eats it will be better off if the care I give it doesn\u2019t end with the cooking.", "posttime": "2022-01-09 21:54:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ec6\u83cc,rules", "title": "\u5f2f\u66f2\u7ec6\u83cc\u89c4\u5219\uff082011\uff09", "title_en": "Bending the Rules on Bacteria (2011)", "transed": 1, "url": "https://www.nytimes.com/2011/08/24/dining/bending-the-rules-on-bacteria-and-food-safety.html", "via": "", "real_tags": ["\u7ec6\u83cc", "rules"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072451, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u81ea\u5df1\u7684\u6700\u4f73\u7ed3\u679c\u6307\u6570\u7531\u5e02\u573a\u4e0a\u6700\u597d\u7684\u641c\u7d22\u5f15\u64ce\u7684\u7ed3\u679c\u589e\u5f3a\u3002", "note_en": "Our own index of the finest results augmented by the results from the best search engines on the market.\n                 Kagi has been built to let people discover the content that amplifies their knowledge. A search engine envisioned as a tool for the user, not for the advertiser. A true search companion.", "posttime": "2022-01-09 21:53:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "kagi,premium,\u6307\u6570", "title": "Kagi\uff1a\u9ad8\u7ea7\u641c\u7d22\u5f15\u64ce", "title_en": "Kagi: A Premium Search Engine", "transed": 1, "url": "https://kagi.com/", "via": "", "real_tags": ["kagi", "premium", "\u6307\u6570"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072450, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4efb\u4f55\u5c1d\u8bd5\u62c6\u5378PC DOS 1.1\u5f15\u5bfc\u6247\u533a\u7684\u4eba\u5f88\u5feb\u5c31\u4f1a\u901a\u77e5\u504f\u79fb1A3H\u52301Beh\uff0c\u6709\u4e00\u4e2a\u521a\u521a\u5c5e\u4e8e\u7684\u5b57\u8282\u5e8f\u5217\u3002\u5b83\u4f3c\u4e4e\u662f\u4ee3\u7801\u7684\u7247\u6bb5\uff0c\u4f46\u5b83\u5728\u5f15\u5bfc\u6247\u533a\u4e2d\u6ca1\u6709\u76ee\u7684\uff0c\u4ece\u672a\u6267\u884c\u8fc7\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u90a3\u91cc\u7684\u5783\u573e\u5b57\u8282\u5e8f\u5217\u4ee5\u53ca\u5b83\u6765\u81ea\u54ea\u91cc\uff1f\nPC DOS 1.1\u5f15\u5bfc\u6247\u533a\u4e2d\u7684\u5783\u573e\u4e0d\u662f\u6b64\u7c7b\u5783\u573e\u7684\u552f\u4e00\u5b9e\u4f8b\u3002\u4f8b\u5982\uff0cIBMBio.com\u8fd8\u5305\u542b\u4e00\u4e2a\u4e0d\u540c\u4e14\u8f83\u5927\u7684\u5783\u573e\u5e8f\u5217\uff0c\u90e8\u5206\u5730\u662f\u91cd\u590dIBMBio.com\u672c\u8eab\u7684\u5185\u5bb9\u3002\n\u4e0e\u5b57\u7b26\u4e32\u7ec8\u6b62\u6709\u53e6\u4e00\u79cd\u964c\u751f\u6027\uff0c\u5c3d\u7ba1\u5b83\u5927\u591a\u6765\u81eaPC DOS 1.1\u3002\nDOS\u901a\u5e38\u4e0d\u4f7f\u7528\u6b64\u6280\u672f\uff08\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u7f8e\u5143\u7ec8\u6b62\uff09\uff0c\u5c3d\u7ba1\u4f8b\u5982\u8c03\u8bd5\u4f7f\u7528\u62c6\u5378\u5668\u4e2d\u7684\u6307\u4ee4\u78c1\u5e26\u8868\u4e2d\u7684\u9ad8\u6bd4\u7279\u7ec8\u6b62\uff0c\u4f46\u518d\u6b21\u4fdd\u5b58\u6bcf\u4e2a\u52a9\u8bb0\u7b26\u7684\u5b57\u8282\u3002", "note_en": "Anyone trying to disassemble the PC DOS 1.1 boot sector soon notices that at offsets 1A3h through 1BEh there is a byte sequence that just does not belong. It appears to be a fragment of code, but it has no purpose in the boot sector and is never executed. So why is the sequence of junk bytes there, and where did it come from?\n The immediate answer is \u201cit came from FORMAT.COM\u201d. The junk is copied verbatim from FORMAT.COM to the boot sector. But those junk bytes are  not part of FORMAT.COM, either. So the question merely shifts to \u201cwhy are the junk bytes in FORMAT.COM, and where did they come from?\u201d\n It is not known if anyone answered the question in the past, but the answer has been found now, almost 40 years later\u2014twice independently.\n  The junk bytes are a fragment of Microsoft\u2019s linker, LINK.EXE. There is an  almost identical code sequence within LINK.EXE that was shipped on the PC DOS 1.1 disk. The sequence is close enough and unique enough that it\u2019s extremely implausible that it might have come from anywhere else.\n For one thing, the code fragment looks like something generated by a high-level language compiler, yet the bulk of DOS 1.1 was written in assembly language. Notably MASM and LINK were not; both were written in Microsoft\u2019s Pascal.\n The first person to make this discovery (as far as we can tell) was Daniel B. Sedory aka The Starman, whose  illustrated PC DOS 1.1 boot sector page is much nicer than anything I could put together.\n I followed about two weeks later. Back when I was  reconstructing PC DOS 1.1, I noticed the boot sector junk, but at the time I did not make the next step of trying to identify where it might have come from.\n The junk in the PC DOS 1.1 boot sector isn\u2019t the only instance of such junk. For example IBMBIO.COM also contains a different and larger junk sequence which is partly a repetition of the contents of IBMBIO.COM itself.\n It is virtually certain that the junk bytes came indirectly from development tools used for building PC DOS 1.1, namely Microsoft\u2019s assembler/linker. MASM can define \u201cuninitialized data\u201d and the linker interprets that quite literally, placing uninitialized data into the resulting executable. The bytes are probably somewhat unpredictable memory contents and might contain fragments of the linked program\u2019s data or code, or even fragments of the linker itself.\n The junk somewhat complicates analysis of the resulting executables because it\u2019s not trivial to prove that it has no function; even if the junk bytes never get executed, they might end up being copied somewhere, or become part of the stack contents, and affect program execution indirectly.\n  There is no reason to believe that the junk bytes are the result of programmer intent. But there are two other oddities that are not random and are much harder to explain.\n One is \u201czero-terminated strings\u201d. When the boot sector checks whether a disk is bootable, it verifies that the first two root directory entries are IBMBIO.COM and IBMDOS.COM. To that end, the strings \u2018ibmbio com\u2019 and \u2018ibmdos com\u2019 are stored in the boot sector. They are stored in lowercase (and the root directory contents are forced to lowercase, too), which is itself odd, since it\u2019s not clear how the directory entries could ever not be uppercase. Perhaps this was not strictly enough specified, or the boot sector code tried to be extra careful.\n But the real weirdness is that the strings are \u201cterminated\u201d with ASCII character \u20180\u2019 (zero). That is to say, in the boot sector they are stored as \u201cibmbio com0ibmdos com0\u201d. The zeros have no function since only up to 11 bytes are compared for each of the two file names. This was perhaps a oversight and the strings were meant to be null-terminated, but instead of writing\n    Since the terminator has no function, the mistake was never found and corrected. That is just speculation but it makes at least some sort of sense.\n There is  another strangeness related to string termination, although it was mostly gone from PC DOS 1.1.\n In PC DOS 1.0, strings in the boot sector  and in IBMBIO.COM are null-terminated, but the last character of text also has the high bit set. The routine which prints the strings strips the high bit from all characters.\n Again, it\u2019s very unclear what purpose this might have had. The high bits are simply stripped and thrown away, but it cannot be a coincidence that the last character of each string in the boot sector and in IBMBIO.COM has the high bit set.\n In PC DOS 1.1, the high bits are no longer set on the boot sector and IBMBIO.COM strings, but the print string routine in the boot sector still strips them. That was presumably a harmless omission.\n It is possible that in some earlier incarnation, the strings were high-bit-terminated, then changed to null-terminated, but the high bit still remained set and stripped in PC DOS 1.0, and in PC DOS 1.1 only the stripping remained.\n Note that in the PC DOS 1.0 boot sector, the strange zero-termination is combined with high-bit-termination, and the strings \u2018ibmbio com0\u2019 and \u2018ibmdos com0\u2019 are each stored with the last byte as B0h, which is ASCII \u20180\u2019 (30h) + 80h. In PC DOS 1.1, the high bit is no longer set.\n  Terminating strings by setting the high bit of the last character was a somewhat common practice on machines with limited memory and no need to process anything beyond 7-bit ASCII (that is, a great many systems in 1980 and earlier). Microsoft used this technique in BASIC; especially for storing BASIC token tables, using the high bit instead of a length or terminator byte saved hundreds of bytes of precious ROM.\n DOS does not generally use this technique (strings are generally dollar-terminated), although for example DEBUG uses high bit termination for the instruction mnemonic table in the disassembler, again saving a byte per mnemonic which does add up.\n Terminating strings by setting the high bit was clearly a widespread technique at the time (one most likely independently invented more than once) and presumably known to all Microsoft programmers. It is thus not surprising to find it in the parts of DOS written by Microsoft (boot sector, IBMBIO.COM, SYS.COM, FORMAT.COM), quite possibly even written by a single programmer, Bob O\u2019Rear.\n It is possible that Microsoft used some assembler string definition macros which automatically added the high bit terminator (see e.g. \u2018Q\u2019 macro in BASIC\u2019s  BINTRP.H). That might partially explain the strange double termination seen e.g. in FORMAT.COM from  PC DOS 0.9 where strings are terminated with ASCII \u2018$\u2019 and a B0h byte (ASCII \u20180\u2019 with high bit set); whatever it was meant to accomplish, the B0h is redundant because DOS won\u2019t get past the \u2018$\u2019 when displaying strings. But if a string definition macro automatically set the high bit, an extra byte would have had to be added because DOS would not recognize ASCII \u2018$\u2019 with high bit set as the expected terminator.\n All in all, it\u2019s clear that the code Microsoft wrote for PC DOS underwent some evolution and was cleaned up only after the PC DOS 1.0 release, with some vestiges of the earlier iterations remaining even in PC DOS 1.1.", "posttime": "2022-01-09 21:53:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "pc,\u62c6\u5378", "title": "\u672a\u8ba4\u5b9a\u7684PC DOS 1.1\u5f15\u5bfc\u6247\u533a\u5783\u573e\u8bc6\u522b", "title_en": "Unidentified PC DOS 1.1 Boot Sector Junk Identified", "transed": 1, "url": "https://www.os2museum.com/wp/unidentified-pc-dos-1-1-boot-sector-junk-identified/", "via": "", "real_tags": ["pc", "\u62c6\u5378"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072449, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5357\u5361\u7f57\u6765\u7eb3\u5dde\u79d1\u6280\u516c\u53f8\u7684\u9996\u5e2d\u6267\u884c\u5b98\u5df2\u8bc9\u8bf8\u4e8e20\u6b21\u6709\u5173\u7684\u91d1\u5c5e\u6b3a\u8bc8\u7f6a\uff0c\u8be5\u6b3a\u8bc8\u4e0e\u8bbe\u5b9a\u7684PHONY\u516c\u53f8\u7684\u7cbe\u5fc3\u7edf\u4e00\u7f51\u7edc\u6709\u5173\uff0c\u4ee5\u83b7\u5f97\u8d85\u8fc7735,000\u4e2a\u4e92\u8054\u7f51\u534f\u8bae\uff08IP\uff09\u5730\u5740\uff0c\u4ece\u975e\u8425\u5229\u7ec4\u7ec7\u79df\u8d41\u6570\u5b57\u623f\u5730\u4ea7\u79df\u8d41\u5317\u7f8e\u7684\u5b9e\u4f53\u3002\n\u52302013\u5e74\uff0c\u8bb8\u591a\u7f51\u7edc\u8fd0\u8425\u5546\u4f9d\u8d56\u4e8e\u5e2e\u52a9\u963b\u6b62\u5783\u573e\u7535\u5b50\u90ae\u4ef6\u7684\u96c6\u56e2\uff0c\u8bb8\u591aMicfo\u7684\u5ba2\u6237\u964d\u843d\u5728Spamhaus\u7684\u96f7\u8fbe\u4e0a\u3002\u4f46\u662f\uff0c\u65af\u5a01\u5c14\u6c83\u5c71\u5f00\u59cb\u963b\u6b62MICFO\u7684IP\u5730\u5740\u8303\u56f4\uff0cMICFO\u79fb\u4f4d\u9f7f\u8f6e\uff0c\u5e76\u5f00\u59cb\u8f6c\u552eIP\u5730\u5740\uff0c\u4e3b\u8981\u7528\u4e8e\u8425\u9500\u201c\u865a\u62df\u4e13\u7528\u7f51\u7edc\u201d\u6216VPN\u670d\u52a1\uff0c\u5e2e\u52a9\u5ba2\u6237\u5728\u7ebf\u9690\u85cf\u5176\u771f\u5b9eIP\u5730\u5740\u3002\n\u4f46\u662f\u51e0\u4e2a\u661f\u671f\u540e\uff0c\u4e91\u521b\u65b0\u4f7f\u6cd5\u5b98\u5728Afrinic\u7684\u7956\u56fd\u5c45\u4f4f\u7684\u6cd5\u5b98\u4e2d\u51bb\u7ed3\u4e86Afrinic Bank\u8d26\u6237\u76845000\u4e07\u7f8e\u5143\uff0c\u4e89\u8bbaAfrinic\u201c\u4ee5\u6076\u610f\u884c\u4e8b\uff0c\u4ee4\u4eba\u538c\u6076\u7684\u57fa\u7840\u73b7\u6c61\u4e86\u4e91\u521b\u65b0\u58f0\u8a89\uff0c\u201d\u5b83\u6709\u4e49\u52a1\u4fdd\u62a4\u5176\u5ba2\u6237\u514d\u53d7\u670d\u52a1\u7684\u7834\u574f\u3002\n\u8fd9\u663e\u7136\u660e\u663e\u660e\u663e\u7684\u4eba\u8ba4\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u8d5a\u94b1\u7684\u552f\u4e00\u65b9\u5f0f\u662f\u8086\u65e0\u5fcc\u60ee\u3002\u597d\u7684\uff0c\u4e5f\u8bb8\u4e0d\u662f\u552f\u4e00\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u5236\u4f5c\u201c\u5de8\u5927\u201d\u91d1\u989d\u7684\u552f\u4e00\u65b9\u6cd5\u3002\u5982\u679c\u4ed6\u4eec\u5c3d\u53ef\u80fd\u591a\u5730\u52aa\u529b\u505a\u51fa\u5408\u6cd5\u7684\u52aa\u529b\uff0c\u4ed6\u4eec\u53ef\u80fd\u4e0d\u4f1a\u90a3\u4e48\u591a\uff0c\u4f46\u4ed6\u4eec\u80af\u5b9a\u4f1a\u56e0\u4e3a\u5730\u72f1\u800c\u4fdd\u6301\u8f83\u957f\uff01\u800c\u4e14\uff0c\u4e25\u91cd\uff0c\u4f55\u65f6\u8db3\u591f\u8d85\u8fc71mm / yr\uff0c$ 200mm / yr ????\u666e\u901a\u4eba\u53ef\u4ee5\u8fbe\u523050\u4e07\u7f8e\u5143/\u5e74\u3002\u6211\u8ba4\u4e3a\u5b83\u4eec\u8db3\u4ee5\u5f04\u6e05\u695a\u5982\u4f55\u751f\u6d3b\u5728500k /\u5e74\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u80fd\uff0c\u4ed6\u4eec\u5e76\u4e0d\u50cf\u4ed6\u4eec\u8ba4\u4e3a\u7684\u90a3\u6837\u660e\u4eae\u3002\n\u5e03\u83b1\u6069\uff0c\u4f60\u53d1\u5e03\u4e862020\u5e74\u7684\u5e3d\u5b50\u91c7\u8bbf\u5417\uff1f\u9605\u8bfb\u4f1a\u5f88\u6709\u8da3\u3002\u6211\u4f3c\u4e4e\u65e0\u6cd5\u627e\u5230\u5b83\u3002", "note_en": "The CEO of a South Carolina technology firm has pleaded guilty to 20 counts of wire fraud in connection with an elaborate network of phony companies set up to obtain more than 735,000 Internet Protocol (IP) addresses from the nonprofit organization that leases the digital real estate to entities in North America.\n  In 2018, the  American Registry for Internet Numbers (ARIN), which oversees IP addresses assigned to entities in the U.S., Canada, and parts of the Caribbean, notified Charleston, S.C. based  Micfo LLC that it intended to revoke 735,000 addresses.\n ARIN said they wanted the addresses back because the company and its owner \u2014 38-year-old  Amir Golestan \u2014 had obtained them under false pretenses. A global  shortage of IPv4 addresses has massively driven up the price of these resources over the years: At the time of this dispute, a single IP address could fetch between $15 and $25 on the open market.\n Micfo responded by suing ARIN to try to stop the IP address seizure. Ultimately, ARIN and Micfo settled the dispute in arbitration, with Micfo returning most of the addresses that it hadn\u2019t already sold.\n But the legal tussle caught the attention of  South Carolina U.S. Attorney Sherri Lydon, who in May 2019  filed criminal wire fraud charges against Golestan, alleging he\u2019d orchestrated a network of shell companies and fake identities to prevent ARIN from knowing the addresses were all going to the same buyer.\n Each of those shell companies involved the production of notarized affidavits in the names of people who didn\u2019t exist. As a result, Lydon was able to charge Golestan with 20 counts of wire fraud \u2014 one for each payment made by the phony companies that bought the IP addresses from ARIN.\n  On Nov. 16, just two days into his trial, Golestan changed his \u201cnot guilty\u201d plea, agreeing to plead guilty to all 20 wire fraud charges. KrebsOnSecurity interviewed Golestan about his case at length last year, but he has not responded to requests for comment on his plea change.\n By 2013, a number of Micfo\u2019s customers had landed on the radar of  Spamhaus, a group that many network operators rely upon to help block junk email. But shortly after Spamhaus began blocking Micfo\u2019s IP address ranges, Micfo shifted gears and began reselling IP addresses mainly to companies marketing \u201cvirtual private networking\u201d or VPN services that help customers hide their real IP addresses online.\n In a 2020 interview, Golestan told KrebsOnSecurity that Micfo was at one point responsible for brokering roughly 40 percent of the IP addresses used by the world\u2019s largest VPN providers. Throughout that conversation, Golestan maintained his innocence, even as he explained that the creation of the phony companies was necessary to prevent entities like Spamhaus from interfering with his business going forward.\n Stephen Ryan, an attorney representing ARIN, said Golestan changed his plea after the court heard from a former Micfo employee and public notary who described being instructed by Golestan to knowingly certify false documents.\n \u201cHer testimony made him appear bullying and unsavory,\u201d Ryan said. \u201cBecause it turned out he had also sued her to try to prevent her from disclosing the actions he\u2019d directed.\u201d\n Golestan\u2019s  rather sparse plea agreement ( first reported by The Wall Street Journal) does not specify any sort of leniency he might gain from prosecutors for agreeing to end the trial prematurely. But it\u2019s worth noting that a conviction on a single act of wire fraud can result in fines and up to 20 years in prison.\n The courtroom drama comes as ARIN\u2019s counterpart in Africa is embroiled in a similar, albeit much larger dispute over millions of African IP addresses. In July 2021, the  African Network Information Centre (AFRINIC)  took back more than six million IP addresses from  Cloud Innovation, a company incorporated in the African offshore entity haven of Seychelles (pronounced, quite aptly \u2014 \u201csay shells\u201d).\n  AFRINIC revoked the addresses \u2014 valued at around USD $120 million \u2014 after an internal review found that most of them were being used outside of Africa by various entities in China and Hong Kong. Like ARIN, AFRINIC\u2019s policies require those who are leasing IP addresses to demonstrate that the addresses are being used by entities within their geographic region.\n But just weeks later, Cloud Innovation convinced a judge in AFRINIC\u2019s home country of Mauritius  to freeze $50 million in AFRINIC bank accounts,  arguing that AFRINIC had \u201cacted in bad faith and upon frivolous grounds to tarnish the reputation of Cloud Innovation,\u201d and that it was obligated to protect its customers from disruption of service.\n That financial freeze has since been partially lifted, but the legal wrangling between AFRINIC and Cloud Innovation continues. The company\u2019s CEO is also suing the CEO and board chair of AFRINIC in an $80 million defamation case.\n Ron Guilmette is a security researcher who spent several years tracing how tens of millions of dollars worth of AFRINIC IP addresses were  privately sold to address brokers by a former AFRINIC executive. Guilmette said Golestan\u2019s guilty plea is a positive sign for AFRINIC, ARIN and the three other  Regional Internet Registries (RIRs).\n \u201cIt\u2019s good news for the rule of law,\u201d Guilmette said. \u201cIt has implications for the AFRINIC case because it reaffirms the authority of all RIRs, including AFRINIC and ARIN.\u201d\n       Iranian?\u2026.hmmmmm\u2026.no foolin\u2019\u2026\u2026to paraphrase Frank Zappa from \u201cCamarillo Brillo\u201d\u2026..\n  If he had figured out a way to do this without deliberately lying in the notary process, somehow\u2026\n  The Notary process in the US is a joke. In many states you pay the fee and get someone to say you\u2019re a good person in front of a magistrate and *POOF*, you\u2019re a notary.\n    It\u2019s kind of sad that these obviously bright people think that the only way they can make money is to be unscrupulous. OK, maybe not the only way, but the only way to make \u2018huge\u2019 amounts of money. If they put as much effort into legitimate efforts, they probably wouldn\u2019t make quite as much, but they would sure as hell get to keep it longer! And, seriously, when is enough enough $1MM/yr, $200MM/yr???? The average person can live on $50K/yr. I\u2019d think they are bright enough to figure out how to live on $500K/yr. If they can\u2019t then they aren\u2019t as bright as they think they are.\n  Most hosting companies are now charging about $20 a month for a dedicated IP number now and days, because of the IP4 shortage\n      No worries, his younger brother Amin Golestan runs Braveway, Aventice, Micfo, ALTUS COMMUNICATIONS among other shell companies for him now.\n  Their sister also runs the same operation under Azadeh Golestan Parast trading as Virtual Dedicated Datacenter Services\n  If he\u2019s a green card holder, then he can be deported if convicted. He\u2019d probably be a hero back in Iran and treated well if he can continue scamming from there.\n If he\u2019s a US citizen, then he should become a televangelist, after studying the techniques of the masters of con, e.g. Ernest Angley, Peter Popoff, Reverend Ike, Robert Tilton, Jim Bakker and their like. He has already has the hair and the wardrobe. He could end up making more than he was making, tax free.\n  Why are all these retarded political comments being accepted? Is moderation broke? Half of the comments here are reddit-tier \u2018troll\u2019 posts.\n    Brian, did you publish the 2020 interview of Golestan? It would be interesting to read. I can\u2019t seem to locate it.\n    arin et afrinic we see that they have no qualms about helping crooks we must not forget all the others like apnic, lacnic , Ripe ncc , rirns.arin.net , ca -servers.ca , nic.expert , nic.art , dnsowl , ultradns , registrar -servers , cloudflare and etc \u2026 And above all we must not forget the hosts selling armored vps like frantech.ca buyvm.net which are used a lot by pedophile forums, zoophiles, phishing sites, botnets and etc \u2026 are they all accomplices or not? me on what I could see on their servers I said to myself that it might be time to step up and investigate them!\n  Quite strange that ARIN decided to settle out of court with a criminal. Almost smells here that someone inside at ARIN is in cahoots, perhaps providing him a roadmap of what to do, and then to facilitate the settlement with him. I\u2019m certain that he\u2019s passed along the blueprint to his family and friends, for them to enact the same crimes from different states and different countries. IMO -non attorney- Filing bogus notarized affidavits is a serious breach of laws and he should be held fully accountable. Stealing from public domain, what others could need and use, would have countless victims other than ARIN.", "posttime": "2022-01-09 21:51:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9996\u5e2d,ceo,afrinic", "title": "\u6280\u672f\u9996\u5e2d\u6267\u884c\u5b98\u5728IP\u5730\u5740\u65b9\u6848\u4e2d\u6073\u6c42\u6b3a\u8bc8", "title_en": "Tech CEO pleads to wire fraud in IP address scheme", "transed": 1, "url": "https://krebsonsecurity.com/2021/11/tech-ceo-pleads-to-wire-fraud-in-ip-address-scheme/", "via": "", "real_tags": ["\u9996\u5e2d", "ceo", "afrinic"]}, {"category": "", "categoryclass": "", "imagename": "5bcb13a1b7250dfb835a985f838806b4.jpg", "infoid": 1072448, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": " - \u5377\u3002 86\uff0c\u6ca1\u6709\u3002 32\uff081920\u5e7410\u67081\u65e5\uff09; v\u300285\uff0c\u6ca1\u6709\u3002 33\uff081920\u5e7410\u67082\u65e5\uff09-V\u3002 88\uff0c\u5426\u3002 201\uff081924\u5e743\u670818\u65e5\uff09\u3002\n\u7ebd\u7ea6\u683c\u5170\u5fb7\u3002 \uff08\u7ebd\u7ea6\uff0c\u7ebd\u7ea6\uff097\u67087\u65e5\u3002 1922\u5e74\uff0cp\u3002 87.\u4ece\u56fd\u4f1a\u56fe\u4e66\u9986\u68c0\u7d22\uff0cwww.loc.gov/Item/sn83045774/1922-05-07/1922-05-07/D-1/\u3002", "note_en": "-\u00a0 Vol. 86, no. 32 (Oct. 1, 1920) ; v. 85, no. 33 (Oct. 2, 1920)-v. 88, no. 201 (Mar. 18, 1924).\n  -\u00a0 Available on microfilm from Library of Congress, Photoduplication Service, and New York Public Library.\n  -\u00a0 Archived issues are available in digital format from the Library of Congress Chronicling America online collection.\n The Library of Congress believes that the newspapers in Chronicling America are in the public domain or have no known copyright restrictions. Newspapers published in the United States more than 95 years ago are in the public domain in their entirety. Any newspapers in Chronicling America that were published less than 95 years ago are also believed to be in the public domain, but may contain some copyrighted third party materials. Researchers using newspapers published less than 95 years ago should be alert for modern content (for example, registered and renewed for copyright and published with notice) that may be copyrighted. Responsibility for making an independent legal assessment of an item and securing any necessary permissions ultimately rests with persons desiring to use the item.\n The NEH awardee responsible for producing each digital object is presented in the Chronicling America page display, below the page image \u2013 e.g. Image produced by the Library of Congress. For more information on current NDNP awardees, see  https://www.loc.gov/ndnp/listawardees.html.\n For more information on Library of Congress policies and disclaimers regarding rights and reproductions, see  https://www.loc.gov/homepage/legal.html\n Citations are generated automatically from bibliographic data as a convenience, and may not be complete or accurate.\n      The New York herald. (New York, NY) 7 May. 1922, p. 87. Retrieved from the Library of Congress, www.loc.gov/item/sn83045774/1922-05-07/ed-1/.", "posttime": "2022-01-09 21:50:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5168\u4e16\u754c,world,item", "title": "\u5168\u4e16\u754c\u5728\u4e00\u767e\u5e74\uff081922\u5e74\uff09\u662f\u4ec0\u4e48", "title_en": "What the world will be like in a hundred years (1922)", "transed": 1, "url": "https://www.loc.gov/resource/sn83045774/1922-05-07/ed-1?sp=87", "via": "", "real_tags": ["\u5168\u4e16\u754c", "world", "item"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072447, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u591a\u5f0f\u8054\u8fd0\u56fe\u50cf\u67e5\u770b\u5668", "note_en": "Multimodal image viewer", "posttime": "2022-01-09 21:50:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u591c\u95f4,image,\u56fe\u50cf", "title": "\u4f26\u52c3\u6717\u7684\u201c\u591c\u95f4\u89c2\u5bdf\u201d717-\u5343\u5146\u50cf\u7d20\u56fe\u50cf", "title_en": "717-gigapixel image of Rembrandt's 'The Night Watch'", "transed": 1, "url": "https://hyper-resolution.org/view.html?pointer=0.259,0.015&r=0.0000,0.1920,1.0000,0.6351&i=Rijksmuseum/SK-C-5/SK-C-5_VIS_20-um_2019-12-21", "via": "", "real_tags": ["\u591c\u95f4", "image", "\u56fe\u50cf"]}, {"category": "", "categoryclass": "", "imagename": "67fac4bdde844113c72d3dcffba0a648.jpg", "infoid": 1072446, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7cfb\u597d\u5b89\u5168\u5e26\u3002 NVIDIA\u7814\u7a76\u6b63\u5728\u91cd\u65b0\u8c03\u6574\u4e00\u4e2a\u65b0\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\uff0c\u4ece\u6807\u51c6\u76842D\u56fe\u50cf\u521b\u5efa3D\u5bf9\u8c61\u6a21\u578b - \u5e76\u4e14\u53ef\u4ee5\u5c06\u50cf\u9a91\u58eb\u9a91\u58eb\u7684AI\u52a8\u529b\u7684KITT\u4e00\u6837\u5e26\u6765\u6807\u5fd7\u6027\u7684\u6c7d\u8f66 - \u5728NVIDIA Omniverse\u4e2d\u3002\n\u201c\u56e0\u4e3a\u6211\u4eec\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u4e0a\u57f9\u8bad\u800c\u4e0d\u662f\u5178\u578b\u7684\u7ba1\u9053\uff0c\u5b83\u4f9d\u8d56\u4e8e\u5408\u6210\u6570\u636e\uff0cAI\u6a21\u578b\u66f4\u597d\u5730\u63a8\u5e7f\u5230\u73b0\u5b9e\u4e16\u754c\u5e94\u7528\u7a0b\u5e8f\uff0c\u201d\u8be5\u9879\u76ee\u7684\u4f5c\u8005NVIDIA\u7814\u7a76\u5458Jun Gao\u8bf4\u3002\n\u56e0\u4e3a\u4ece\u4e0d\u540c\u89d2\u5ea6\u6355\u83b7\u76f8\u540c\u5bf9\u8c61\u7684\u5b9e\u65f6\u4e16\u754c\u6570\u636e\u96c6\u662f\u7f55\u89c1\u7684\uff0c\u4f7f\u75282D\u52303D\u7684\u56fe\u50cf\u7684\u5927\u591a\u6570AI\u5de5\u5177\u90fd\u4f7f\u7528ShapEnet\u200b\u200b\u7b49\u5408\u62103D\u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3\u3002\nGTC\u6ce8\u518c\u662f\u514d\u8d39\u7684\uff0c\u5e76\u4e8e4\u670823\u65e5\u5f00\u653e\u3002\u4e0e\u4f1a\u8005\u5c06\u4e8e5\u670811\u65e5\u53ef\u83b7\u5f97\u6309\u9700\u5185\u5bb9\u3002", "note_en": "Fasten your seatbelts.  NVIDIA Research is revving up a new deep learning engine that creates 3D object models from standard 2D images \u2014 and can bring iconic cars like the  Knight Rider\u2019s AI-powered KITT to life \u2014 in  NVIDIA Omniverse.\n Developed by the NVIDIA AI Research Lab in Toronto, the GANverse3D application inflates flat images into realistic 3D models that can be visualized and controlled in virtual environments. This capability could help architects, creators, game developers and designers easily add new objects to their mockups without needing expertise in 3D modeling, or a large budget to spend on renderings.\n A single photo of a car, for example, could be turned into a 3D model that can drive around a virtual scene, complete with realistic headlights, tail lights and blinkers.\n  To generate a dataset for training, the researchers harnessed a generative adversarial network, or GAN, to  synthesize images depicting the same object from multiple viewpoints \u2014 like a photographer who walks around a parked vehicle, taking shots from different angles. These multi-view images were plugged into a  rendering framework for inverse graphics, the process of inferring 3D mesh models from 2D images.\n Once trained on multi-view images, GANverse3D needs only a single 2D image to predict a 3D mesh model. This model can be used with a 3D neural renderer that gives developers control to customize objects and swap out backgrounds.\n When imported as an extension in the  NVIDIA Omniverse platform and run on  NVIDIA RTX GPUs, GANverse3D can be used to recreate any 2D image into 3D \u2014 like the beloved crime-fighting car KITT, from the popular 1980s  Knight Rider TV show.\n  Instead, with no aid from 3D assets, \u201cWe turned a GAN model into a very efficient data generator so we can create 3D objects from any 2D image on the web,\u201d said Wenzheng Chen, research scientist at NVIDIA and lead author on the project.\n \u201cBecause we trained on real images instead of the typical pipeline, which relies on  synthetic data, the AI model generalizes better to real-world applications,\u201d said NVIDIA researcher Jun Gao, an author on the project.\n The  research behind GANverse3D will be presented at two upcoming conferences: the International Conference on Learning Representations in May, and the Conference on Computer Vision and Pattern Recognition, in June.\n  Creators in gaming, architecture and design rely on virtual environments like the NVIDIA Omniverse simulation and collaboration platform to test out new ideas and visualize prototypes before creating their final products. With  Omniverse Connectors, developers can use their preferred 3D applications in Omniverse to simulate complex virtual worlds with real-time ray tracing.\n But not every creator has the time and resources to create 3D models of every object they sketch. The cost of capturing the number of multi-view images necessary to render a showroom\u2019s worth of cars, or a street\u2019s worth of buildings, can be prohibitive.\n That\u2019s where a trained GANverse3D application can be used to convert standard images of a car, a building or even a horse into a 3D figure that can be customized and animated in Omniverse.\n To recreate KITT, the researchers simply fed the trained model an image of the car, letting GANverse3D predict a corresponding 3D textured mesh, as well as different parts of the vehicle such as wheels and headlights. They then used  NVIDIA Omniverse Kit and  NVIDIA PhysX tools to convert the predicted texture into high-quality materials that give KITT a more realistic look and feel, and placed it in a dynamic driving sequence.\n \u201cOmniverse allows researchers to bring exciting, cutting-edge research directly to creators and end users,\u201d said Jean-Francois Lafleche, deep learning engineer at NVIDIA. \u201cOffering GANverse3D as an extension in Omniverse will help artists create richer virtual worlds for game development, city planning or even training new machine learning models.\u201d\n  Because real-world datasets that capture the same object from different angles are rare, most AI tools that convert images from 2D to 3D are trained using  synthetic 3D datasets like ShapeNet.\n To obtain multi-view images from real-world data \u2014 like images of cars available publicly on the web \u2014 the NVIDIA researchers instead turned to a GAN model, manipulating its neural network layers to turn it into a data generator.\n The team found that opening the first four layers of the neural network and freezing the remaining 12 caused the GAN to render images of the same object from different viewpoints.\n Keeping the first four layers frozen and the other 12 layers variable caused the neural network to generate different images from the same viewpoint. By manually assigning standard viewpoints, with vehicles pictured at a specific elevation and camera distance, the researchers could rapidly generate a multi-view dataset from individual 2D images.\n The final model, trained on 55,000 car images generated by the GAN, outperformed an inverse graphics network trained on the popular Pascal3D dataset.\n Read the  full ICLR paper, authored by Wenzheng Chen, fellow NVIDIA researchers Jun Gao and Huan Ling, Sanja Fidler, director of NVIDIA\u2019s Toronto research lab, University of Waterloo student Yuxuan Zhang, Stanford student Yinan Zhang and MIT professor Antonio Torralba. Additional collaborators on the CVPR paper include Jean-Francois Lafleche, NVIDIA researcher Kangxue Yin and Adela Barriuso.\n The NVIDIA Research team consists of more than 200 scientists around the globe, focusing on areas such as AI, computer vision, self-driving cars, robotics and graphics. Learn more about the company\u2019s latest research and industry breakthroughs in NVIDIA CEO Jensen Huang\u2019s  keynote address at this week\u2019s GPU Technology Conference.\n GTC registration is free, and open through April 23. Attendees will have access to on-demand content through May 11.", "posttime": "2022-01-09 21:49:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "nvidia,single", "title": "NVIDIA\u5de5\u5177\u4ece\u5355\u4e2a\u9759\u6b62\u56fe\u50cf\u751f\u6210\u5b8c\u6574\u76843D\u6a21\u578b", "title_en": "Nvidia tool generates full 3D models from a single still image", "transed": 1, "url": "https://blogs.nvidia.com/blog/2021/04/16/gan-research-knight-rider-ai-omniverse/", "via": "", "real_tags": ["nvidia", "single"]}, {"category": "", "categoryclass": "", "imagename": "80c0e3098d16f39068a6610d8aa3b998.jpeg", "infoid": 1072445, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f88\u5c11\u6709\u4eba\u53ef\u4ee5\u62b5\u6297\u4e00\u4e2a\u65b0\u751f\u7684\u5a74\u513f\u5fae\u7b11 - \u4fe1\u53f7\u4f20\u64ad\u79ef\u6781\u7684\u60c5\u7eea\uff0c\u4f8b\u5982\u559c\u60a6\u548c\u5174\u8da3\u3002\u5f53\u7136\uff0c\u65b0\u7236\u6bcd\u5c24\u5176\u5982\u6b64\u3002\u4e00\u9879\u7814\u7a76\u53d1\u73b0\uff0c\u65b0\u6bcd\u4eb2\u770b\u7740\u4ed6\u4eec16\u5c0f\u65f6\u7684\u5a74\u513f80\uff05\u7684\u65f6\u95f4\uff0c34\uff05\u7684\u65f6\u95f4\u7b11\u4e86\u7b11\u3002\n\u5f53\u7814\u7a76\u4eba\u5458\u5f00\u59cb\u89c2\u5bdf\u5a74\u513f\u65f6\uff0c\u4ed6\u4eec\u7684\u5927\u90e8\u5206\u521d\u59cb\u7ed3\u679c\u4e0e\u7236\u6bcd\u62a5\u544a\u4e0d\u540c\u3002 1959\u5e74\u7684\u4e00\u9879\u7814\u7a76\uff0c\u5b9a\u4e49\u4e86\u201c\u793e\u4f1a\u7b11\u5bb9\u201d\u5728\u5fae\u7b11\u524d\u5bfb\u6c42\u773c\u795e\u63a5\u89e6\uff0c\u53d1\u73b0\u8fd9\u9879\u7814\u7a76\u4e2d\u7684400\u540d\u5a74\u513f\u90fd\u6ca1\u6709\u5728\u7b2c\u4e00\u5468\u7b11\u4e86\u7b11\u3002\u53ea\u670911\uff05\u7684\u4eba\u5728\u4e24\u5468\u7684\u5e74\u9f84\u4e0a\u8868\u73b0\u51fa\u793e\u4f1a\u7b11\u5bb9\u3002\u5927\u7ea660\uff05\u7684\u4eba\u5728\u4e09\u4e2a\u661f\u671f\u5185\u8fdb\u884c\u4e86\u793e\u4f1a\u7b11\u4e86\u7b11\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u4eba\u90fd\u5728\u7b2c\u4e00\u4e2a\u6708\u5185\u8fdb\u884c\u4e86\u793e\u4f1a\u5fae\u7b11\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5177\u6709\u65b0\u751f\u513f\u7684\u884c\u4e3a\u7814\u7a76\u4ecd\u7136\u7a00\u7f3a\uff0c\u5e76\u4e14\u9700\u8981\u7cbe\u5fc3\u5206\u6790\u6765\u89e3\u91ca\u67d0\u4e9b\u884c\u4e3a\u7684\u542b\u4e49\u3002\u867d\u7136\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u7814\u7a76\uff0c\u4f46\u5047\u8bbe\u8fd9\u4e9b\u65e9\u671f\u7b11\u5bb9\u5177\u6709\u793e\u4f1a\u610f\u4e49\u662f\u5408\u7406\u7684\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u8bb8\u591a\u4eba\u5728\u8be5\u9886\u57df\uff0c\u5b83\u662f\u6700\u4e0d\u660e\u786e\u7684\uff0c\u8fd9\u4e9b\u7b11\u5bb9\u7edd\u5bf9\u4e0d\u4ec5\u4ec5\u662f\u53cd\u5c04\u3002", "note_en": "Very few people can resist smiling at a newborn baby \u2013 signalling positive emotions, such as joy and interest. Of course, this is especially true for new parents. One study found that new mothers looked at their 16-hour-old babies 80% of the time and  smiled at them 34% of the time.\n Sometimes newborn babies even smile back, creating a magical moment for the parents that is often ruined by someone pointing out that the smile can\u2019t be real. Even textbooks tend to  regard neonatal smiling as a reflex rather than an actual expression of joy and happiness. But is this really the case?\n Up to the second half of the 20th century, the behaviour of newborns was considered mostly reflexive. Scientists assumed that newborns had a limited ability to feel and express emotions, and did not have enough social experience to interact with their caregivers.\n It was even believed that  newborn babies couldn\u2019t feel pain in the same way as adults \u2013 meaning they were sometimes subjected to painful surgical procedures without analgesia. It wasn\u2019t until the 1980s that medical professionals realised that the stress of the pain actually led to life-threatening shock and complications.\n   Over the past 50 years,  data has slowly accumulated suggesting that neonates are more than just reflexive beings. They are competent enough to actively regulate their own states. For example, they can fall asleep to shut out stressful distractions, or fuss and cry if they need stimulation and more interaction. They can also imitate smiles as early as the first 36 hours of life and can even learn from previous experience as early as the first day of life.\n  However, when it comes to feelings such as happiness and joy, we have continued to question whether newborns can be socially competent beings. Up until the early 2000s, newborn babies were thought to smile only in response to muscle twitches, penile erections, bowel or bladder movements or for no particular reason at all. Most studies and textbooks \u2013  even in the 21st century \u2013 still suggest that the first \u201csocial smile\u201d occurs only  after the second month of life.\n And there was evidence to support it. In 1872, Charles Darwin argued that emotional expressions were universal and inborn, and documented the first real smiles of his own child at 45 days of age. My own research has replicated these observations. When we asked 957 parents to observe and record smiling in their children for a study,  they reported the first \u201csocial smiles\u201d of their babies just after four weeks on average.\n When researchers started observing infants, most of their initial results were not that different from the parental reports. A study from 1959, which defined \u201csocial smiles\u201d as  seeking eye-contact before smiling, found that none of the 400 babies in the study smiled during the first week. Only 11% showed a social smile by two weeks of age. About 60% had socially smiled by three weeks, and almost all of them had socially smiled within the first month.\n Some researchers still fail to register smiles early on, and many smiles occur during sleep \u2013 unrelated to the social world. Indeed, even foetuses, observed within the womb with a 4D ultrasonographic method,  smile from at least the 23rd week of gestation. But other studies show that newborns do smile on rare occasions \u2013 at most  once in every four minutes for some one-day-olds. And the question now is what those smiles mean.\n  There have long been signs that newborn smiles could signal positive emotions to some extent. Smiles have been noted in the first few days of life  as a response to stroking of the cheek or the belly. Newborns also smile  in response to sweet tastes and smells. These findings were published decades ago when smiles were considered purely as innate reflexes. The reason that scientists at the time didn\u2019t interpret them as emotional was partly because the smiles looked different to social smiles.\n  \u201cReal\u201d smiles \u2013 called  Duchenne smiles \u2013 involve not only the major muscle that pulls the mouth to the side and upward, but also the muscles around the eyes. Neonatal smiles were thought to involve only the mouth region. However, when scientists micro-analysed facial movements, frame by frame, using a  dedicated coding system, smiles from as early as one day of age were more often than not  accompanied by cheek and eye movements.\n More and more studies have since suggested that newborn babies do smile when they are awake, and that these smiles closely resemble real social smiles. And when newborns are in an interactive, awake state, they smile  twice as much as compared to when they are asleep \u2013 more evidence that social factors could be involved. What\u2019s more,  babies often start with moving their cheeks and their brows before they smile, as if focusing their attention on the caregiver\u2019s face. So it is completely possible that these newborn babies actually mean to smile.\n Babies learn about the power of smiling early. While caregivers often smile at their newborns, this behaviour will be dependent on the baby\u2019s state \u2013 they are less likely to smile if the baby is crying. As a result, babies quickly gain a remarkable ability to regulate the behaviour of their parents. If a baby keeps eye contact, blinks and smiles, their parent will likely smile back \u2013 making the smile rewarding.\n Unsurprisingly, studies on mothers have shown that they are  deeply affected by the smiles of their babies \u2013 even on a neurophysiological level. One study measured brain activity in mothers using  fMRI scanning. When mothers saw their own infant smiling, activities in areas of the brain involved in processing emotions \u2013 including the amygdala and the limbic system \u2013 were enhanced.  Dopaminergic brain areas, known as the reward system in the brain, were also highly active.\n Unfortunately, behavioural studies with neonates are still scarce and require elaborate analyses to interpret the meanings of certain behaviour. While further studies are needed, it is plausible to assume that these early smiles have a social meaning. To many of us in the field, it is at the very least clear that these smiles are definitely more than just a reflex.", "posttime": "2022-01-09 21:49:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6311\u6218,smiling,\u793e\u4f1a", "title": "\u65b0\u751f\u513f\u53ea\u662f\u4e00\u4e2a\u53cd\u5c04\u5417\uff1f\u7814\u7a76\u6311\u6218\u4e86\u6559\u79d1\u4e66\uff082018\u5e74\uff09", "title_en": "Is newborn smiling just a reflex? Research is challenging the textbooks (2018)", "transed": 1, "url": "https://theconversation.com/is-newborn-smiling-really-just-a-reflex-research-is-challenging-the-textbooks-105220", "via": "", "real_tags": ["\u6311\u6218", "smiling", "\u793e\u4f1a"]}, {"category": "", "categoryclass": "", "imagename": "c0dc560616b461ec61b276c5c5bf12d5.jpeg", "infoid": 1072444, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u4e0e\u9884\u9632\u4e2d\u5fc3\u5468\u4e00\u62a5\u9053\uff0c\u7f8e\u56fd\u7b2c\u56db\u4e2a\u5dde\u7684\u7b2c\u56db\u4e2a\u4eba\u5728\u6ca1\u6709\u79bb\u5f00\u7f8e\u56fd\u5927\u9646\u7684\u60c5\u51b5\u4e0b\u795e\u79d8\u5730\u611f\u67d3\u4e86\u4e00\u79cd\u81f4\u547d\u7684\u5357\u4e9a\u7ec6\u83cc\u3002\u8fd9\u56db\u8d77\u6848\u4ef6\u4e2d\u6709\u4e24\u8d77\u5df2\u7ecf\u6b7b\u4ea1\uff0c\u5305\u62ec\u4e0a\u4e2a\u6708\u5e95\u5728\u4e54\u6cbb\u4e9a\u5dde\u7684\u9a8c\u5c38\u68c0\u67e5\u4e2d\u53d1\u73b0\u7684\u6700\u65b0\u4e00\u8d77\u6848\u4ef6\u3002 CDC \u8c03\u67e5\u4eba\u5458\u786e\u5b9a\u8fd9\u56db\u8d77\u6848\u4ef6\u90fd\u5b58\u5728\u5173\u8054\uff0c\u4ed6\u4eec\u6000\u7591\u53ef\u80fd\u662f\u8fc4\u4eca\u4e3a\u6b62\u672a\u77e5\u7684\u8fdb\u53e3\u4ea7\u54c1\u9020\u6210\u7684\u3002\u75be\u75c5\u9884\u9632\u63a7\u5236\u4e2d\u5fc3\u6b64\u524d\u66fe\u4e8e 6 \u6708 30 \u65e5\u53d1\u5e03\u4e86\u5173\u4e8e\u65e9\u671f\u4e09\u8d77\u75c5\u4f8b\u7684\u54a8\u8be2\u3002\u4e09\u6708\u4efd\u5728\u582a\u8428\u65af\u5dde\u7684\u4e00\u540d\u6210\u5e74\u4eba\u4e2d\u53d1\u73b0\u4e86\u7b2c\u4e00\u4f8b\u75c5\u4f8b\uff0c\u8fd9\u4e5f\u662f\u81f4\u547d\u7684\u3002\u4eca\u5e74 5 \u6708\uff0c\u8c03\u67e5\u4eba\u5458\u5728\u660e\u5c3c\u82cf\u8fbe\u5dde\u7684\u4e00\u540d 4 \u5c81\u5973\u5b69\u548c\u4e00\u540d\u6210\u5e74\u4eba\u4e2d\u53d1\u73b0\u4e86\u53e6\u4e00\u4f8b\u75c5\u4f8b\u3002\u8fd9\u4e24\u540d\u60a3\u8005\u5728\u88ab\u91ca\u653e\u5230\u8fc7\u6e21\u62a4\u7406\u673a\u6784\u4e4b\u524d\u90fd\u4f4f\u9662\u4e86\u5f88\u957f\u65f6\u95f4\u3002\u636e\u62a5\u9053\uff0c\u5fb7\u514b\u8428\u65af\u5dde\u7684\u5e74\u8f7b\u5973\u5b69\u56e0\u611f\u67d3\u800c\u8111\u90e8\u53d7\u635f\u3002 CDC \u518d\u6b21\u8b66\u544a\u533b\u7597\u4fdd\u5065\u63d0\u4f9b\u8005\u6ce8\u610f\u7f55\u89c1\u4e14\u901a\u5e38\u96be\u4ee5\u8bca\u65ad\u7684\u611f\u67d3\uff0c\u79f0\u4e3a\u7c7b\u9f3b\u75bd\uff0c\u5373\u4f7f\u662f\u672a\u65c5\u884c\u8fc7\u7684\u4eba\u4e5f\u662f\u5982\u6b64\u3002\u540c\u65f6\uff0c\u5bf9\u611f\u67d3\u7ec6\u83cc Burkholderia pseudomallei \u7684\u6765\u6e90\u7684\u8c03\u67e5\u4ecd\u5728\u7ee7\u7eed\u3002\u636e CDC \u79f0\uff0c\u8be5\u673a\u6784\u8fdb\u884c\u7684\u5168\u57fa\u56e0\u7ec4\u6d4b\u5e8f\u53d1\u73b0\uff0c\u8fd9\u56db\u4e2a\u75c5\u4f8b\u4e2d\u7684\u6bcf\u4e2a\u75c5\u4f8b\u4e2d\u7684\u5047\u9f3b\u75bd\u82bd\u5b62\u6746\u83cc\u83cc\u682a\u5f7c\u6b64\u5bc6\u5207\u5339\u914d\u3002\u8fd9\u4e9b\u83cc\u682a\u4e0e\u5728\u4e9a\u6d32\uff0c\u5c24\u5176\u662f\u5357\u4e9a\u53d1\u73b0\u7684\u83cc\u682a\u6709\u5173\u3002 B. pseudomallei \u662f\u4e00\u79cd\u751f\u6d3b\u5728\u70ed\u5e26\u548c\u4e9a\u70ed\u5e26\u6c14\u5019\u7684\u571f\u58e4\u548c\u6c34\u4e2d\u7684\u73af\u5883\u7ec6\u83cc\u3002\u5728\u7f8e\u56fd\uff0c\u5b83\u6700\u5e38\u51fa\u73b0\u5728\u6700\u8fd1\u53bb\u8fc7\u7ec6\u83cc\u6d41\u884c\u5730\u533a\u7684\u4eba\u8eab\u4e0a\u3002\u7136\u800c\uff0c\u5b83\u4e4b\u524d\u4e5f\u66fe\u5728\u7f8e\u56fd\u51fa\u4e4e\u610f\u6599\u5730\u51fa\u73b0\u5728\u6ca1\u6709\u8fd1\u671f\u65c5\u884c\u53f2\u7684\u4eba\u7fa4\u4e2d\u3002\u8fc7\u53bb\u7684\u795e\u79d8\u6848\u4f8b\u8ba9\u7814\u7a76\u4eba\u5458\u63a8\u6d4b\uff0c\u5047\u9f3b\u75bd\u82bd\u5b62\u6746\u83cc\u73b0\u5728\u53ef\u80fd\u6f5c\u4f0f\u5728\u7f8e\u56fd\u67d0\u4e9b\u5730\u533a\u7684\u571f\u58e4\u548c\u6c34\u57df\u4e2d\u3002\u4f46\u662f\uff0c\u5728\u5f53\u524d\u7684\u75c5\u4f8b\u7fa4\u4e2d\uff0cCDC \u8c03\u67e5\u4eba\u5458\u8868\u793a\uff0c\u8fd9\u4e9b\u83cc\u682a\u4e0e\u6765\u81ea\u5357\u4e9a\u7684\u83cc\u682a\u6700\u4e3a\u5bc6\u5207\u76f8\u5173\uff0c\u800c\u4e0d\u662f\u4e4b\u524d\u5728\u5317\u7f8e\u53d1\u73b0\u7684\u4efb\u4f55\u83cc\u682a\u3002\n\u8be5\u673a\u6784\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\uff1a\u201c\u76ee\u524d\uff0cCDC \u8ba4\u4e3a\u6700\u53ef\u80fd\u7684\u539f\u56e0\u662f\u8fdb\u53e3\u4ea7\u54c1\uff08\u4f8b\u5982\u98df\u54c1\u6216\u996e\u6599\u3001\u4e2a\u4eba\u62a4\u7406\u6216\u6e05\u6d01\u4ea7\u54c1\u6216\u836f\u54c1\uff09\u6216\u5176\u4e2d\u4e00\u79cd\u4ea7\u54c1\u7684\u6210\u5206\u3002\u201d \u201c\u7ec6\u83cc\u901a\u5e38\u751f\u6d3b\u5728\u6f6e\u6e7f\u7684\u571f\u58e4\u548c\u6c34\u4e2d\u3002\u7136\u800c\uff0c\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u4e5f\u53d1\u73b0\u5b83\u4f1a\u6c61\u67d3\u7ec6\u83cc\u5e38\u89c1\u533a\u57df\u7684\u6f6e\u6e7f\u6216\u6f6e\u6e7f\u7684\u4ea7\u54c1\u3002\u201d\u5230\u76ee\u524d\u4e3a\u6b62\uff0cCDC \u5df2\u7ecf\u4ece\u56db\u540d\u60a3\u8005\u7684\u5bb6\u4e2d\u6536\u96c6\u5e76\u68c0\u6d4b\u4e86 100 \u591a\u4e2a\u4ea7\u54c1\u3001\u571f\u58e4\u548c\u6c34\u6837\u672c\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u6837\u672c\u5bf9\u5047\u9f3b\u75bd\u82bd\u5b62\u6746\u83cc\u5448\u9633\u6027\u53cd\u5e94\u3002\u8be5\u673a\u6784\u6307\u51fa\uff0c\u8ffd\u8e2a\u5047\u9f3b\u75bd\u82bd\u5b62\u6746\u83cc\u7684\u6765\u6e90\u6709\u65f6\u53ef\u80fd\u5f88\u56f0\u96be\uff0c\u56e0\u4e3a\u7ec6\u83cc\u53ef\u80fd\u9700\u8981\u4e24\u5230\u4e09\u5468\u7684\u65f6\u95f4\u624d\u80fd\u53d1\u5c55\u6210\u611f\u67d3\uff0c\u4ece\u800c\u6269\u5927\u4e86\u53ef\u80fd\u7684\u66b4\u9732\u65f6\u95f4\u7a97\u53e3\u5e76\u6d4b\u8bd5\u4e86\u60a3\u8005\u7684\u8bb0\u5fc6\u3002\u4e00\u65e6\u7c7b\u9f3b\u75bd\u53d1\u751f\uff0c\u8bca\u65ad\u5b83\u53ef\u80fd\u662f\u53e6\u4e00\u4e2a\u5177\u6709\u6311\u6218\u6027\u7684\u8fc7\u7a0b\u3002\u7c7b\u9f3b\u75bd\u88ab\u79f0\u4e3a\u201c\u4f1f\u5927\u7684\u6a21\u4eff\u8005\u201d\uff0c\u56e0\u4e3a\u5b83\u7684\u75c7\u72b6\u53ef\u80fd\u5dee\u5f02\u5f88\u5927\u4e14\u542b\u7cca\u4e0d\u6e05\u3002\u5b83\u6709\u65f6\u4f1a\u88ab\u8bef\u8ba4\u4e3a\u662f\u5176\u4ed6\u4e25\u91cd\u7684\u75be\u75c5\uff0c\u4f8b\u5982\u80ba\u7ed3\u6838\u3002\u4eba\u4eec\u53ef\u4ee5\u901a\u8fc7\u6444\u5165\u7ec6\u83cc\u6216\u63a5\u89e6\u76ae\u80a4\u7834\u635f\u800c\u88ab\u611f\u67d3\u3002\u4e34\u5e8a\u5b9e\u9a8c\u5ba4\u5de5\u4f5c\u4eba\u5458\u4e5f\u6709\u88ab\u96fe\u5316\u9897\u7c92\u611f\u67d3\u7684\u98ce\u9669\u3002\u75c7\u72b6\u53ef\u80fd\u5305\u62ec\u5c40\u90e8\u75bc\u75db\u6216\u80bf\u80c0\u3001\u53d1\u70e7\u3001\u6e83\u75a1\u3001\u8113\u80bf\u3001\u54b3\u55fd\u3001\u80f8\u75db\u3001\u9ad8\u70e7\u3001\u5934\u75db\u3001\u538c\u98df\u3001\u547c\u5438\u7a98\u8feb\u3001\u8179\u90e8\u4e0d\u9002\u3001\u5173\u8282\u75db\u3001\u5b9a\u5411\u969c\u788d\u3001\u4f53\u91cd\u51cf\u8f7b\u3001\u80c3\u6216\u80f8\u75db\u3001\u808c\u8089\u6216\u5173\u8282\u75db\u3001\u75be\u75c5\u9884\u9632\u63a7\u5236\u4e2d\u5fc3\u6307\u51fa\uff0c\u548c\u766b\u75eb\u53d1\u4f5c\u3002\u5728\u8fd9\u56db\u4e2a\u76f8\u5173\u75c5\u4f8b\u4e2d\uff0c\u60a3\u8005\u51fa\u73b0\u4e86\u4e00\u7cfb\u5217\u75c7\u72b6\uff0c\u4ece\u54b3\u55fd\u548c\u547c\u5438\u6025\u4fc3\u5230\u865a\u5f31\u3001\u75b2\u52b3\u3001\u6076\u5fc3\u3001\u5455\u5410\u3001\u95f4\u6b47\u6027\u53d1\u70e7\u4ee5\u53ca\u8eaf\u5e72\u3001\u8179\u90e8\u548c\u9762\u90e8\u76ae\u75b9\u3002\u7c7b\u9f3b\u75bd\u7684\u6b7b\u4ea1\u7387\u4ece 10% \u5230 50% \u4e0d\u7b49\uff0c\u7cd6\u5c3f\u75c5\u3001\u80be\u75c5\u3001\u6162\u6027\u80ba\u75c5\u548c\u8fc7\u5ea6\u996e\u9152\u7684\u4eba\u9762\u4e34\u7684\u98ce\u9669\u6700\u5927\u3002\u5982\u679c\u8bca\u65ad\u5ef6\u8fdf\uff0c\u98ce\u9669\u53ef\u80fd\u4f1a\u8fdb\u4e00\u6b65\u4e0a\u5347\u3002 B. \u5047\u9f3b\u75bd\u5929\u751f\u5bf9\u8bb8\u591a\u6297\u751f\u7d20\u6cbb\u7597\u5177\u6709\u6297\u6027\u3002\u4f7f\u7528\u9519\u8bef\u7684\u836f\u7269\u5ef6\u8fdf\u8bca\u65ad\u548c\u6cbb\u7597\u53ef\u80fd\u4f1a\u4f7f\u611f\u67d3\u4e0d\u53d7\u63a7\u5236\u5730\u4f20\u64ad\u3002\u5982\u679c\u5b83\u53d8\u6210\u5168\u8eab\u6027\u7684\uff0c\u5728 90% \u7684\u75c5\u4f8b\u4e2d\u5b83\u53ef\u80fd\u662f\u81f4\u547d\u7684\u3002", "note_en": "A fourth person in a fourth US state has mysteriously contracted a deadly South Asian bacterium without leaving the continental US, the Centers for Disease Control and Prevention  reported Monday.\n Two of the four cases have been fatal, including the latest one identified in Georgia late last month during a post-mortem exam.\n  CDC investigators determined that all four cases are connected and they suspect a so-far-unknown imported product may be to blame. The CDC had previously released  an advisory on June 30 about  the three earlier cases. The first case was identified in an adult in Kansas in March, which was also fatal. In May, investigators identified a case  in a 4-year-old Texas girl and another case in an adult in Minnesota. Both of those patients were hospitalized for extended periods before being released to transitional care facilities. The young girl in Texas reportedly suffered brain damage from the infection.\n Once again, the CDC is warning healthcare providers to be on the lookout for the rare and often difficult-to-diagnose infection, called melioidosis\u2014even in people who haven&#39;t traveled. Meanwhile, the investigation continues into the source of the infecting bacteria,  Burkholderia pseudomallei.\n According to the CDC, whole genome sequencing conducted by the agency found the  B. pseudomallei strains in each of the four cases closely matched each other. The strains link back to those found in Asia, particularly South Asia.\n B.\u00a0 pseudomallei is an environmental bacterium that lives in soil and water in tropical and subtropical climates. In the US, it&#39;s most often spotted in people who have recently traveled to places where the bacteria are endemic. However, It has also shown up unexpectedly in the US before in people with no recent travel history. Past mysterious cases have led researchers to speculate that  B. pseudomallei may now be lurking in soils and waters in some areas of the US.\n    But, in the current cluster of cases, CDC investigators say the strains are most closely related to those from South Asia, and not any strains previously identified in North America.\n  &#34;Currently, CDC believes the most likely cause is an imported product (such as a food or drink, personal care or cleaning products or medicine) or an ingredient in one of those types of products,&#34; the agency said in a statement. &#34;The bacteria normally lives in moist soil and water. However, in rare cases, it has also been found to contaminate wet or moist products in the areas where the bacteria are common.&#34;\n So far, the CDC has collected and tested more than 100 samples of products, soil, and water from the four patient&#39;s homes, but none have turned up positive for  B. pseudomallei. The agency noted that tracking down a source of  B. pseudomallei can sometimes be difficult as the bacteria can take two to three weeks to develop into an infection, broadening the window of possible exposure times and testing patients&#39; memories.\n Once melioidosis takes hold, diagnosing it can be another challenging process. Melioidosis has been called the &#34;Great Mimicker&#34; because its symptoms can vary greatly and be vague. It&#39;s sometimes mistaken for other serious illnesses, such as tuberculosis.\n People can become infected by ingesting the bacteria or having contact with a break in the skin. Clinical laboratory workers are also at risk of becoming infected through aerosolized particles. Symptoms can span localized pain or swelling, fever, ulceration, abscess, cough, chest pain, high fever, headache, anorexia, respiratory distress, abdominal discomfort, joint pain, disorientation, weight loss, stomach or chest pain, muscle or joint pain, and seizures, the CDC notes.\n In the four linked cases, the patients presented with a range of symptoms from cough and shortness of breath to weakness, fatigue, nausea, vomiting, intermittent fever, and rash on the trunk, abdomen, and face.\n The fatality rate of melioidosis ranges from 10 percent to 50 percent, and people with diabetes, kidney disease, chronic lung disease, and excessive alcohol use are most at risk. The risks can go up further if there&#39;s a delay in diagnoses.  B. pseudomallei is  inherently resistant to many antibiotic treatments. Delayed diagnosis and treatment with the wrong drugs could allow the infection to spread unchecked. If it becomes systemic, it can be fatal in 90 percent of cases.", "posttime": "2021-08-10 07:05:08", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u6765\u81ea,mysteriously,\u53ef\u80fd", "title": "\u7f8e\u56fd\u7b2c\u56db\u4eba\u795e\u79d8\u611f\u67d3\u6765\u81ea\u5357\u4e9a\u7684\u81f4\u547d\u7ec6\u83cc", "title_en": "4th person in US mysteriously stricken with deadly bacteria from South Asia", "transed": 1, "url": "https://arstechnica.com/science/2021/08/4th-person-in-us-mysteriously-stricken-with-deadly-bacteria-from-south-asia/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u6765\u81ea", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "84854ed0e861b1a34390a064a6d80277.jpg", "infoid": 1072442, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Ahmer Inam \u662f\u6587\u601d\u6d77\u8f89 EDGE \u7684\u9996\u5e2d\u4eba\u5de5\u667a\u80fd\u5b98 (CAIO)\u3002\u4ed6\u5728\u63a8\u52a8\u7ec4\u7ec7\u8f6c\u578b\u65b9\u9762\u62e5\u6709 20 \u591a\u5e74\u7684\u7ecf\u9a8c\u3002\u4ed6\u7684\u7ecf\u9a8c\u5305\u62ec\u5728 Nike Inc.\u3001Wells Fargo\u3001Sonic Automotive \u548c Cambia Health Solutions \u62c5\u4efb\u9886\u5bfc\u804c\u52a1\u3002\u4f7f\u7528\u6570\u636e\u548c\u5206\u6790\u6765\u8bc6\u522b\u548c\u7ed8\u5236\u53d7\u5168\u7403\u822a\u8fd0\u5371\u673a\u5f71\u54cd\u7684\u5e93\u5b58\u3002\u5982\u679c\u60a8\u6ca1\u6709\u5173\u4e8e\u8fd0\u8f93\u6750\u6599\u7684\u8239\u4e0a\u7269\u54c1\u7684\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u5229\u7528\u8fd9\u6b21\u5371\u673a\u4f5c\u4e3a\u4e00\u4e2a\u673a\u4f1a\uff0c\u8bc1\u660e\u4f18\u5148\u4f7f\u7528\u6570\u636e\u3001\u7269\u8054\u7f51\u548c\u9ad8\u7ea7\u5206\u6790\uff08\u4f8b\u5982\u673a\u5668\u5b66\u4e60\u548c\u6a21\u62df\uff09\u8fdb\u884c\u4f9b\u5e94\u94fe\u6570\u5b57\u5316\u8f6c\u578b\u7684\u5408\u7406\u6027\u3002\u5982\u679c\u60a8\u8981\u6210\u529f\u8861\u91cf\u77ed\u7f3a\u5bf9\u60a8\u7684\u8fd0\u8425\u6709\u4f55\u5f71\u54cd\uff0c\u60a8\u9700\u8981\u59cb\u7ec8\u4e86\u89e3\u8d27\u7269\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u60a8\u6ca1\u6709\u73b0\u6210\u7684\u6570\u636e\uff0c\u90a3\u4e48\u60a8\u9700\u8981\u4e0e\u4f9b\u5e94\u5546\u5408\u4f5c\u5e76\u4f7f\u7528\u5b89\u5168\u73af\u5883\u6765\u5171\u4eab\u7b2c\u4e8c\u65b9\u6570\u636e\uff0c\u4ee5\u63d0\u4f9b AI \u9a71\u52a8\u7684\u53ef\u64cd\u4f5c\u89c1\u89e3\uff0c\u4e86\u89e3\u5bf9\u4ece\u521d\u521b\u516c\u53f8\u5230\u96f6\u552e\u5546\u7684\u6240\u6709\u76f8\u5173\u65b9\u7684\u4e1a\u52a1\u5f71\u54cd\u7ed9\u6d88\u8d39\u8005\u3002\u6a21\u62df\u548c\u9884\u6d4b\u8fd9\u4e9b\u4f9b\u7ed9\u4fa7\u95ee\u9898\u5bf9\u9700\u6c42\u4fa7\u7684\u5f71\u54cd\u3002\u8fdb\u884c\u573a\u666f\u89c4\u5212\u7ec3\u4e60\u5e76\u4e3a\u5173\u952e\u4e1a\u52a1\u51b3\u7b56\u63d0\u4f9b\u4fe1\u606f\u3002\u5982\u679c\u8fd9\u79cd\u80fd\u529b\u6ca1\u6709\u5230\u4f4d\uff0c\u5927\u6d41\u884c\u3001\u5185\u4e71\u6216\u65e0\u6cd5\u63a7\u5236\u7684\u52a0\u606f\u7b49\u7d27\u6025\u60c5\u51b5\u5c06\u5bf9\u60a8\u7684\u5546\u4e1a\u8ba1\u5212\u9020\u6210\u4e25\u91cd\u7834\u574f\u3002\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e3a\u5951\u673a\uff0c\u5236\u5b9a\u707e\u5bb3\u7ba1\u7406\u8ba1\u5212\uff0c\u4e3a\u6f5c\u5728\u98ce\u9669\u505a\u597d\u51c6\u5907\u3002", "note_en": "Ahmer Inam is the chief artificial intelligence officer (CAIO) at  Pactera EDGE. He has more than 20 years of experience driving organizational transformation. His experience includes leadership roles at Nike Inc., Wells Fargo, Sonic Automotive and Cambia Health Solutions.\n   Use data and analytics to identify and map out the inventory being affected by the global shipping crisis. If you don\u2019t have the data about what is on a ship transporting your materials, then use this crisis as an opportunity to justify prioritizing supply chain digital transformation with data, IoT and advanced analytics (e.g., machine learning and simulation). You need to know the location of your goods all times if you are going to successfully gauge what impact a shortage will have on your operation.\n If you don\u2019t have the data readily available, then you need to partner with a vendor and use a secure environment to share second-party data to deliver AI-driven actionable insights on the business impact on all parties involved, from startup to retailer to the consumer.\n Simulate and forecast the impact of these supply-side issues on the demand side. Conduct scenario planning exercises and inform critical business decisions. If this ability is not in place, an emergency like a pandemic, civil unrest or an uncontrollable rate hike will wreak havoc on your business plan. Use this situation as an opportunity to put a disaster management program in place to prepare for the potential risks.", "posttime": "2021-08-10 07:04:12", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4eba\u5de5\u667a\u80fd,\u5e2e\u52a9,ai,\u6570\u636e", "title": "\u4eba\u5de5\u667a\u80fd\u5e2e\u52a9\u7f13\u89e3\u5168\u7403\u822a\u8fd0\u5371\u673a\u7684 5 \u79cd\u65b9\u5f0f", "title_en": "\n\t\t\t\t5 ways AI can help mitigate the global shipping crisis\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/08/09/5-ways-ai-can-help-mitigate-the-global-shipping-crisis/", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "\u5e2e\u52a9", "ai", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "9a4246d8e578565a70ab6078db9f7698.jpg", "infoid": 1072440, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u745e\u58eb EPFL \u6280\u672f\u5927\u5b66\u7684\u4e00\u540d\u7814\u7a76\u4eba\u5458\u8d62\u5f97\u4e86 3,500 \u7f8e\u5143\u7684\u5956\u91d1\uff0c\u56e0\u4e3a\u4ed6\u786e\u5b9a\u4e86\u4e00\u4e2a\u5173\u952e\u7684 Twitter \u7b97\u6cd5\u504f\u7231\u770b\u8d77\u6765\u82d7\u6761\u3001\u5e74\u8f7b\u3001\u80a4\u8272\u8f83\u6d45\u6216\u80a4\u8272\u8f83\u6696\u7684\u9762\u5b54\u3002 Twitter \u5468\u65e5\u5ba3\u5e03\u5c06\u5956\u9879\u6388\u4e88 Bogdan Kulynych\uff0c\u4e00\u4f4d\u7814\u7a76\u9690\u79c1\u3001\u5b89\u5168\u3001\u4eba\u5de5\u667a\u80fd\u548c\u793e\u4f1a\u7684\u7814\u7a76\u751f\u3002 Twitter \u8d5e\u52a9\u4e86\u8fd9\u573a\u6bd4\u8d5b\uff0c\u4ee5\u627e\u51fa\u5b83\u7528\u6765\u88c1\u526a\u5b83\u5728\u4f60\u7684 Twitter \u65f6\u95f4\u7ebf\u4e0a\u663e\u793a\u7684\u7167\u7247\u7684\u201c\u663e\u7740\u6027\u201d\u7b97\u6cd5\u4e2d\u7684\u95ee\u9898\u3002 Twitter \u4e3a\u53d1\u73b0 AI \u504f\u89c1\u800c\u63d0\u4f9b\u7684\u8d4f\u91d1\u662f\u5bf9\u73b0\u5728\u4e3b\u6d41\u7684\u6f0f\u6d1e\u8d4f\u91d1\u505a\u6cd5\u7684\u4e00\u79cd\u65b0\u65b9\u5f0f\uff0c\u5373\u516c\u53f8\u652f\u4ed8\u7ed9\u5916\u90e8\u4eba\u5458\u4ee5\u5bfb\u627e\u5b89\u5168\u6f0f\u6d1e\u3002\u7528\u6700\u65b0\u7684\u79d1\u6280\u65b0\u95fb\u3001\u4ea7\u54c1\u548c\u8bc4\u8bba\u4e3a\u60a8\u7684\u95f2\u804a\u589e\u6dfb\u8da3\u5473\u3002\u5de5\u4f5c\u65e5\u53d1\u8d27\u3002\u4eba\u5de5\u667a\u80fd\u901a\u8fc7\u6709\u6548\u5904\u7406\u51cc\u4e71\u7684\u4e3b\u9898\uff08\u4f8b\u5982\u4e3a\u89c6\u9891\u6dfb\u52a0\u5b57\u5e55\u3001\u53d1\u73b0\u7f51\u7edc\u9493\u9c7c\u7535\u5b50\u90ae\u4ef6\u548c\u8bc6\u522b\u60a8\u7684\u8138\u4ee5\u89e3\u9501\u624b\u673a\uff09\uff0c\u5f7b\u5e95\u6539\u53d8\u4e86\u8ba1\u7b97\u65b9\u5f0f\u3002\u4f46\u662f\u5728\u73b0\u5b9e\u4e16\u754c\u6570\u636e\u4e0a\u8bad\u7ec3\u7684 AI \u7b97\u6cd5\u53ef\u4ee5\u53cd\u6620\u73b0\u5b9e\u4e16\u754c\u7684\u95ee\u9898\uff0c\u800c\u89e3\u51b3 AI \u504f\u89c1\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u4e00\u4e2a\u70ed\u95e8\u9886\u57df\u3002 Twitter \u7684\u8d4f\u91d1\u8ba1\u5212\u65e8\u5728\u53d1\u73b0\u6b64\u7c7b\u95ee\u9898\uff0c\u4ee5\u4fbf\u6700\u7ec8\u7ea0\u6b63\u8fd9\u4e9b\u95ee\u9898\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0cTwitter \u672c\u8eab\u4e5f\u8bc1\u5b9e\u5176 AI \u7cfb\u7edf\u5728\u5176\u88c1\u526a\u7b97\u6cd5\u504f\u7231\u767d\u4eba\u56fe\u50cf\u800c\u975e\u9ed1\u4eba\u56fe\u50cf\u65f6\u663e\u793a\u51fa\u504f\u89c1\u3002\u4f46\u662f Kulynych \u5728\u7b97\u6cd5\u5982\u4f55\u88c1\u526a\u7167\u7247\u4ee5\u5f3a\u8c03\u5b83\u8ba4\u4e3a\u6700\u91cd\u8981\u7684\u65b9\u9762\u53d1\u73b0\u4e86\u5176\u4ed6\u95ee\u9898\u3002 Kulynych \u5728\u4ed6\u7684\u9879\u76ee\u8c03\u67e5\u7ed3\u679c\u4e2d\u8bf4\uff1a\u201c\u76ee\u6807\u6a21\u578b\u503e\u5411\u4e8e\u8ba4\u4e3a\u66f4\u7a81\u51fa\u7684\u4eba\u7684\u63cf\u8ff0\u663e\u5f97\u82d7\u6761\u3001\u5e74\u8f7b\u3001\u6d45\u8272\u6216\u6e29\u6696\u7684\u80a4\u8272\u548c\u5149\u6ed1\u7684\u76ae\u80a4\u7eb9\u7406\uff0c\u4ee5\u53ca\u523b\u677f\u7684\u5973\u6027\u9762\u90e8\u7279\u5f81\u3002\u201d \u201c\u8fd9\u79cd\u504f\u89c1\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5c11\u6570\u7fa4\u4f53\u88ab\u6392\u9664\u5728\u5916\uff0c\u5e76\u5728\u6570\u4ee5\u5343\u8ba1\u7684\u56fe\u50cf\u4e2d\u5ef6\u7eed\u523b\u677f\u7684\u7f8e\u611f\u6807\u51c6\u3002\u201d Kulynych \u7684\u7cfb\u7edf\u5c06\u4eba\u8138\u539f\u59cb\u7167\u7247\u7684\u663e\u7740\u6027\u4e0e\u4e00\u7cfb\u5217 AI \u751f\u6210\u7684\u53d8\u5316\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u4ed6\u53d1\u73b0\uff0c\u9762\u90e8\u8d8a\u5e74\u8f7b\u8d8a\u7626\uff0c\u663e\u7740\u6027\u5206\u6570\u901a\u5e38\u4f1a\u589e\u52a0\u3002\u8be5\u7b97\u6cd5\u8fd8\u4e3a\u66f4\u4eae\u3001\u66f4\u6696\u8272\u8c03\u3001\u66f4\u9ad8\u5bf9\u6bd4\u5ea6\u548c\u66f4\u9971\u548c\u989c\u8272\u7684\u76ae\u80a4\u7ed9\u51fa\u4e86\u66f4\u9ad8\u7684\u5206\u6570\u3002\n\u5728\u6211\u4eec\u4e0e\u670b\u53cb\u6216\u793e\u4ea4\u5a92\u4f53\u5206\u4eab\u7167\u7247\u4e4b\u524d\uff0c\u6211\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u90fd\u4f7f\u7528\u76f8\u673a\u548c\u5e94\u7528\u7f8e\u989c\u6ee4\u955c\u7684\u7f16\u8f91\u5e94\u7528\u7a0b\u5e8f\uff0c\u63a8\u7279\u79f0\u8d5e\u53c2\u8d5b\u4f5c\u54c1\u5f88\u91cd\u8981\u3002\u8fd9\u4f1a\u626d\u66f2\u6211\u4eec\u5bf9\u5438\u5f15\u529b\u7684\u671f\u671b\u3002\u7f8e\u5bb9\u548c\u5e94\u7528\u8fc7\u6ee4\u5668\u5f88\u666e\u904d\u3002 Facetune \u662f\u4e00\u6b3e\u9876\u7ea7\u5e94\u7528\uff0c\u6709\u671b\u5e2e\u52a9\u60a8\u201c\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u8131\u9896\u800c\u51fa\u201d\u3002 B612 \u662f\u53e6\u4e00\u79cd\u6d41\u884c\u7684\u8fc7\u6ee4\u5668\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u201c\u667a\u80fd\u7f8e\u5bb9\u201d\u5de5\u5177\uff0c\u53ef\u4ee5\u63a8\u8350\u60a8\u7684\u8138\u578b\u548c\u5176\u4ed6\u5916\u89c2\u53d8\u5316\u3002\u4f46\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u7f8e\u5316\u8fc7\u6ee4\u5668\u4f1a\u201c\u5bf9\u5fc3\u7406\u5065\u5eb7\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u201d\uff0c\u8c37\u6b4c\u5728\u5176 Pixel \u76f8\u673a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u9ed8\u8ba4\u7981\u7528\u4e86\u81ea\u52a8\u4fee\u9970\u3002\u5b83\u8fd8\u505c\u6b62\u5c06\u5176\u8c03\u6574\u79f0\u4e3a\u201c\u7f8e\u5bb9\u201d\u8fc7\u6ee4\u5668\u3002", "note_en": "A researcher at Switzerland&#39;s EPFL technical university won a $3,500 prize for determining that a key Twitter algorithm favors faces that look slim and young and with skin that is lighter-colored or with warmer tones. Twitter announced on Sunday it awarded the prize to  Bogdan Kulynych, a graduate student examining privacy, security, AI and society.\n Twitter sponsored the contest to find problems in the &#34;saliency&#34; algorithm it uses to crop the photos it shows on your Twitter timeline. The  bounty that Twitter offered to find AI bias is a new spin on the now mainstream practice of the bug bounties that companies pay outsiders to find security vulnerabilities.\n  Spice up your small talk with the latest tech news, products and reviews. Delivered on weekdays.\n AI has revolutionized computing by effectively tackling messy subjects like captioning videos, spotting phishing emails and recognizing your face to unlock your phone. But AI algorithms trained on real-world data can reflect real-world problems, and tackling AI bias is a hot area in computer science. Twitter&#39;s bounty is designed to find such problems so they eventually can be corrected.\n Earlier this year, Twitter itself confirmed its AI system showed bias when its cropping algorithm  favored images of white people over Black people. But Kulynych found other problems in how the algorithm cropped photos to emphasize what it deemed most important.\n  &#34;The target model is biased towards deeming more salient the depictions of people that appear slim, young, of light or warm skin color and smooth skin texture, and with stereotypically feminine facial traits,&#34;  Kulynych said in his project findings. &#34;This bias could result in exclusion of minoritized populations and perpetuation of stereotypical beauty standards in thousands of images.&#34;\n Kulynych&#39;s system compared the saliency of an original photo of a human face to a series of AI-generated variations. He found salience scores often increased with faces that appeared younger and thinner. The algorithm also issued higher scores for skin that was lighter, warmer toned, higher contrast and with more saturated colors.\n  Twitter praised the contest entry as important in a world where many of us use camera and editing apps that apply beauty filters before we share photos with friends or on social media. That can distort our expectations of attractiveness.\n Beauty and apps filters are widespread.  Facetune, one top app, promises to help you &#34;stand out on social media.&#34;  B612, another popular filter, offers a &#34;smart beauty&#34; tool that can recommend changes to your face shape and other appearance changes. But concluding that beautification filters can &#34;negatively impact mental well-being,&#34;  Google disabled its automatic touch-ups by default in its Pixel camera app. It also stopped calling its adjustments &#34;beauty&#34; filters.", "posttime": "2021-08-10 06:47:29", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7b97\u6cd5,\u76ae\u80a4,photo,twitter", "title": "Twitter \u7684\u7167\u7247\u88c1\u526a\u7b97\u6cd5\u504f\u5411\u4e8e\u62e5\u6709\u66f4\u82d7\u6761\u3001\u66f4\u5e74\u8f7b\u7684\u9762\u5b54\u548c\u66f4\u767d\u7699\u7684\u76ae\u80a4\u7684\u4eba\uff1b\u4e00\u4f4d\u7814\u7a76\u4eba\u5458\u56e0\u8fd9\u4e00\u53d1\u73b0\u83b7\u5f97\u4e86 3,500 \u7f8e\u5143\u7684\u5956\u91d1", "title_en": "Twitter's photo cropping algorithm favors people with slimmer, younger-looking faces, and lighter skin; a researcher was awarded $3,500 for the discovery", "transed": 1, "url": "https://www.cnet.com/tech/mobile/twitter-ai-bias-contest-shows-beauty-filters-hoodwink-the-algorithm/", "via": "", "real_tags": ["\u7b97\u6cd5", "\u76ae\u80a4", "photo", "twitter"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072439, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5047\u8bbe\u60a8\u9762\u524d\u6709\u4e00\u4e2a\u5e26\u4e09\u4e2a\u6401\u677f\u7684\u53a8\u67dc\u3002\u5728\u6700\u4e0a\u9762\u7684\u67b6\u5b50\u4e0a\uff0c\u60a8\u6709\u6700\u7f8e\u5473\u7684\u5c0f\u5403\u548c\u7f8e\u98df\u3002\u5de7\u514b\u529b\u66f2\u5947\u3001\u8106\u76ae\u5947\u591a\u548c\u51b7\u51bb\u5f00\u5fc3\u679c\u51b0\u6dc7\u6dcb\u3002\u5728\u4e2d\u95f4\u7684\u67b6\u5b50\u4e0a\uff0c\u4f60\u6709\u4e00\u4e9b\u201c\u4e0d\u9519\u201d\u7684\u96f6\u98df\uff0c\u4f46\u4e0d\u662f\u6700\u7f8e\u5473\u7684\u3002\u4e5f\u8bb8\u6765\u70b9\u725b\u8089\u5e72\u3001\u666e\u901a\u6912\u76d0\u8106\u997c\u548c\u683c\u5170\u8bfa\u62c9\u9ea6\u7247\u5427\u3002\u5728\u6700\u5e95\u5c42\u7684\u67b6\u5b50\u4e0a\uff0c\u60a8\u6709\u751f\u5b58\u96f6\u98df\u3002\u9664\u975e\u4f60\u997f\u4e86\uff0c\u5426\u5219\u4f60\u4e0d\u4f1a\u5403\u5b83\u4eec\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u90a3\u662f\u666e\u901a\u7684\u674f\u4ec1\u3002\u6211\u53d1\u73b0\u5f53\u6211\u60f3\u5403\u70b9\u96f6\u98df\u65f6\uff0c\u6211\u7684\u624b\u603b\u662f\u4f1a\u4f38\u624b\u53bb\u62ff\u6700\u4e0a\u5c42\u7684\u4e1c\u897f\u3002\u5982\u679c\u67dc\u5b50\u91cc\u653e\u6ee1\u4e86\u8f6f\u5de7\u514b\u529b\u997c\u5e72\u548c\u6ef4\u7740\u6cb9\u7684\u8fa3\u5473\u85af\u7247\uff0c\u6211\u6c38\u8fdc\u4e0d\u4f1a\u4f38\u624b\u53bb\u62ff\u674f\u4ec1\u3002\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u674f\u4ec1\u4ece\u672a\u88ab\u5403\u6389\u3002\u5728\u9876\u7ea7\u5546\u54c1\u9762\u524d\uff0c\u674f\u4ec1\u4f3c\u4e4e\u4e0d\u591f\u7f8e\u5473\u3002\u4ed6\u4eec\u5f88\u65e0\u804a\u3002\u4f46\u6211\u53d1\u73b0\uff0c\u5f53\u6240\u6709\u7f8e\u5473\u7684\u4e0a\u67b6\u5546\u54c1\u90fd\u7528\u5b8c\uff0c\u5269\u4e0b\u7684\u53ea\u6709\u666e\u901a\u6912\u76d0\u5377\u997c\u7b49\u4e2d\u67b6\u5546\u54c1\u65f6\uff0c\u666e\u901a\u6912\u76d0\u5377\u997c\u5f00\u59cb\u6f02\u6d6e\u5230\u9876\u90e8\u3002\u5b83\u4eec\u53d8\u6210\u4e86\u9876\u7ea7\u7269\u54c1\uff0c\u4f38\u624b\u53bb\u62ff\u5b83\u4eec\u53d8\u5f97\u76f8\u5bf9\u672c\u80fd\u3002\u9009\u9879\uff0c\u4e0d\u4ec5\u5728\u96f6\u98df\u65b9\u9762\uff0c\u800c\u4e14\u5728\u4efb\u4f55\u9886\u57df\uff0c\u90fd\u503e\u5411\u4e8e\u6309\u7167\u6700\u4ee4\u4eba\u6ee1\u610f\u7684\u65b9\u5f0f\u5bf9\u81ea\u5df1\u8fdb\u884c\u6392\u5e8f\u3002\u5e73\u5747\u800c\u8a00\uff0c\u60a8\u4f1a\u9009\u62e9\u5728\u6ee1\u610f\u5ea6\u961f\u5217\u4e2d\u6392\u540d\u9760\u524d\u7684\u9879\u76ee\u3002\u6709\u8da3\u7684\u662f\uff0c\u77ed\u671f\u5185\u6700\u4ee4\u4eba\u6ee1\u610f\u7684\u901a\u5e38\u4e0d\u662f\u957f\u671f\u6700\u5065\u5eb7\u7684\u3002\u9009\u62e9\u4e00\u4e2a\u9009\u9879\u6240\u9700\u7684\u610f\u5fd7\u529b\u548c\u7eaa\u5f8b\u7684\u6570\u91cf\u968f\u7740\u5b83\u5728\u6ee1\u610f\u5ea6\u961f\u5217\u4e2d\u7684\u6392\u5e8f\u987a\u5e8f\u800c\u589e\u52a0\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u9879\u76ee\u2014\u2014\u6700\u4e0a\u5c42\u7684\u9879\u76ee\u2014\u2014\u5c06\u9700\u8981\u5f88\u5c11\u7684\u610f\u5fd7\u529b\u6765\u91c7\u53d6\u884c\u52a8\u3002\u7136\u800c\uff0c\u961f\u5217\u672b\u5c3e\u7684\u9879\u76ee\u4e0d\u592a\u4ee4\u4eba\u6ee1\u610f\u4f46\u53ef\u80fd\u66f4\u5065\u5eb7\uff0c\u5f80\u5f80\u9700\u8981\u5927\u91cf\u7684\u957f\u671f\u601d\u8003\u548c\u7eaa\u5f8b\u3002\u9009\u9879\u4e0d\u5177\u6709\u5185\u5728\u7684\u6ee1\u8db3\u4ef7\u503c\u3002\u4ed6\u4eec\u603b\u662f\u76f8\u5bf9\u7684\u3002\u5728\u5386\u53f2\u4e0a\u6ca1\u6709\u9876\u7ea7\u5546\u54c1\u7684\u60c5\u51b5\u4e0b\uff0c\u961f\u5217\u4e2d\u8f83\u4f4e\u7684\u5546\u54c1\u5c06\u6d6e\u51fa\u6c34\u9762\uff0c\u5b83\u4eec\u672c\u8eab\u6210\u4e3a\u9876\u7ea7\u5546\u54c1\u3002\n\u5728\u4e00\u6392\u5976\u916a\u6ce1\u8299\u3001\u5de7\u514b\u529b\u66f2\u5947\u997c\u5e72\u548c\u7eaf\u674f\u4ec1\u4e2d\uff0c\u674f\u4ec1\u542c\u8d77\u6765\u5f88\u5e73\u51e1\uff0c\u6ca1\u6709\u5438\u5f15\u529b\u3002\u4f46\u5728\u4e00\u4e2a\u5305\u542b\u8fc7\u671f\u725b\u5976\u3001\u751f\u7c73\u548c\u674f\u4ec1\u7684\u6b8b\u9177\u7b49\u7ea7\u5236\u5ea6\u4e2d\uff0c\u674f\u4ec1\u4f1a\u8fc5\u901f\u6392\u5230\u961f\u5217\u7684\u5f00\u5934\uff0c\u53d8\u5f97\u4ee4\u4eba\u5fc3\u788e\u3002\u800c\u4e14\u4f60\u4e0d\u4f1a\u56e0\u4e3a\u5403\u5b83\u4eec\u800c\u611f\u5230\u88ab\u5265\u524a\u3002\u60a8\u5c06\u4ece\u5b83\u4eec\u4e2d\u6216\u591a\u6216\u5c11\u5730\u83b7\u5f97\u4e0e\u4efb\u4f55\u5386\u53f2\u4e0a\u7684\u9876\u7ea7\u5546\u54c1\u76f8\u540c\u7684\u6ee1\u8db3\u611f\u3002\u8fd9\u4e2a\u539f\u5219\u5bf9\u6211\u5403\u96f6\u98df\u5f88\u6709\u7528\uff0c\u5f53\u7136\uff0c\u4f46\u5728\u5b83\u5bf9\u751f\u6d3b\u65b9\u5f0f\u6210\u763e\u7684\u5e94\u7528\u4e2d\u5bf9\u6211\u7684\u5e2e\u52a9\u66f4\u5927\u3002\u6211\u7684\u751f\u6d3b\u65b9\u5f0f\u67dc\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a \u9876\u5c42\uff1a\u5de5\u4f5c\uff0c\u68c0\u67e5\u67d0\u79cd\u6570\u5b57\u63d0\u8981\uff0c\u5982 reddit\u3001twitter \u6216 instagram\uff0c\u548c\u73a9\u7535\u5b50\u6e38\u620f \u81ea\u7136\uff0c\u6211\u505a\u4e86\u5f88\u591a\u9876\u5c42\u7684\u52a8\u4f5c\uff0c\u4f46\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u5e95\u5c42\u2014\u2014\u8d27\u67b6\u52a8\u4f5c\u3002\u6211\u5bf9\u6700\u5e95\u5c42\u7684\u7269\u54c1\u4ea7\u751f\u4e86\u81f4\u547d\u7684\u8bef\u89e3\uff1a\u6211\u4ee5\u4e3a\u6211\u8ba8\u538c\u5b9e\u65f6\u793e\u4ea4\uff0c\u56e0\u4e3a\u5b83\u672c\u8d28\u4e0a\u8ba9\u6211\u4e0d\u6ee1\u610f\u3002\u6211\u8ba4\u4e3a\u81ea\u5df1\u662f\u4e00\u4e2a\u5929\u751f\u7684\u5185\u5411\u8005\uff0c\u6ca1\u6709\u6539\u53d8\u7684\u80fd\u529b\u3002\u5b9e\u9645\u4e0a\uff0c\u5e76\u4e0d\u662f\u6211\u4e0d\u559c\u6b22\u793e\u4ea4\u2014\u2014\u800c\u662f\u6211\u66f4\u559c\u6b22\u73a9\u7535\u5b50\u6e38\u620f\u3002\u5e76\u4e14\u6211\u53ef\u4ee5\u968f\u65f6\u9009\u62e9\u73a9\u89c6\u9891\u6e38\u620f\u6216\u67e5\u770b\u6211\u7684\u624b\u673a\uff0c\u6211\u51e0\u4e4e\u603b\u662f\u9996\u5148\u5bf9\u5b83\u4eec\u91c7\u53d6\u884c\u52a8\uff0c\u5c06\u4efb\u4f55\u6e05\u9192\u80fd\u529b\u7684\u788e\u5c51\uff08\u901a\u5e38\u6ca1\u6709\uff09\u7559\u7ed9\u961f\u5217\u4e2d\u8f83\u4f4e\u7684\u9879\u76ee\u3002\u6211\u5728\u5bb6\u5ead\u6210\u5458\u7684\u5b69\u5b50\u8eab\u4e0a\u89c2\u5bdf\u5230\u4e86\u8fd9\u4e00\u70b9\uff1a\u5982\u679c\u4f60\u7ed9\u4ed6\u4eec\u4e00\u4e2a iPad \u6765\u73a9\uff0c\u4ed6\u4eec\u662f\u4e0d\u4f1a\u62d2\u7edd\u7684\u3002\u5f53\u4ed6\u4eec\u771f\u6b63\u63a5\u89e6\u5230\u5b83\u65f6\uff0c\u4ed6\u4eec\u4f1a\u6df1\u6df1\u5730\u6c89\u6d78\u5728\u6570\u5b57\u4e16\u754c\u4e2d\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u4eec\u5728\u771f\u5b9e\u4e16\u754c\u4e2d\u51e0\u4e4e\u65e0\u6cd5\u83b7\u5f97\u3002\u4f46\u662f\u62ff\u6389 iPad\uff0c\u4e00\u4ef6\u4e86\u4e0d\u8d77\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff1a\u4ed6\u4eec\u627e\u5230\u4e86\u5176\u4ed6\u4e8b\u60c5\u505a\u3002\u5f53\u7136\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u6682\u65f6\u611f\u5230\u4e0d\u9002\uff0c\u4f46\u5b69\u5b50\u6bd5\u7adf\u662f\u5b69\u5b50\uff0c\u4e0d\u4f1a\u5728\u6ca1\u6709\u627e\u5230\u67d0\u79cd\u5a31\u4e50\u65b9\u5f0f\u7684\u60c5\u51b5\u4e0b\u8ba9\u4e00\u79d2\u949f\u8fc7\u53bb\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5f53\u9876\u5c42 iPad \u88ab\u4ece\u7b49\u5f0f\u4e2d\u79fb\u9664\u65f6\uff0c\u6401\u67b6\u7cfb\u7edf\u4e2d\u8f83\u4f4e\u7684\u7269\u54c1\uff0c\u5982\u4e24\u5757\u4e50\u9ad8\u79ef\u6728\uff0c\u6d6e\u51fa\u6c34\u9762\uff0c\u5b69\u5b50\u4eec\u5f00\u59cb\u50cf iPad \u4e00\u6837\u8d2a\u5a6a\u5730\u73a9\u5b83\u4eec\u3002\u81f3\u4e8e\u6211\uff0c\u4e00\u4e2a\u6210\u5e74\u4eba\uff0c\u5728\u9762\u5bf9\u6570\u5b57\u8bbe\u5907\u65f6\u4f3c\u4e4e\u4e0d\u9700\u8981\u4e2a\u4eba\u79e9\u5e8f\u6216\u63a7\u5236\u65f6\u95f4\uff0c\u6211\u60f3\u51cf\u5c11\u5de5\u4f5c\u3001\u68c0\u67e5\u63d0\u8981\u548c\u73a9\u7535\u5b50\u6e38\u620f\u7684\u65f6\u95f4\u6709\u4e00\u4e2a\u539f\u56e0\uff1aRNG\u3002\u5f00\u53d1\u4eba\u5458\u77e5\u9053 RNG \u662f\u4e00\u79cd\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u5728\u89c6\u9891\u6e38\u620f\u4e16\u754c\u4e2d\uff0c\u6e38\u620f\u73a9\u5bb6\u63d0\u5230\u8fd9\u4e2a\u9996\u5b57\u6bcd\u7f29\u5199\u8bcd\u53ea\u662f\u4e3a\u4e86\u6307\u4ee3\u6e38\u620f\u4e2d\u7684\u201c\u968f\u673a\u6027\u201d\u3002\u968f\u673a\u4e0e\u5426\uff0c\u5728\u73a9\u7535\u5b50\u6e38\u620f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u4e00\u5b9a\u4f1a\u8f93\u3002\u5c24\u5176\u662f\u5728\u4e0e\u5176\u4ed6\u771f\u4eba\u5bf9\u6218\u7684\u7f51\u7edc\u6e38\u620f\u4e2d\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u8f93\u7403\u5f88\u7cdf\u7cd5\u3002\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u5267\u70c8\u548c\u5185\u810f\u7684\u75bc\u75db\u3002\u75bc\u75db\u53ea\u6301\u7eed\u51e0\u79d2\u949f\uff0c\u4f46\u50cf\u5200\u5b50\u4e00\u6837\u523a\u75db\u3002\u5f53\u8f93\u7403\u53d1\u751f\u5728\u4f60\u559c\u6b22\u7684\u6e38\u620f\u4e2d\u65f6\uff0c\u5b83\u4f1a\u7279\u522b\u75db\u82e6\uff1b\u4f60\u4e00\u76f4\u5728\u52aa\u529b\u8ba9\u81ea\u5df1\u53d8\u5f97\u66f4\u597d\u3002\n\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u573a\u6bd4\u8d5b\u662f\u706b\u7bad\u8054\u76df\u3002\u4e00\u5e74\u534a\u4ee5\u6765\uff0c\u6211\u51e0\u4e4e\u6bcf\u5929\u90fd\u5728\u73a9\u3002\u5f53\u6211\u83b7\u80dc\u65f6\uff0c\u90a3\u662f\u7eaf\u7cb9\u7684\u72c2\u559c\u3002\u5f53\u6211\u8f93\u7403\u65f6\uff0c\u75db\u82e6\u4f1a\u4f34\u968f\u7740\u6124\u6012\uff0c\u8fd9\u53d6\u51b3\u4e8e\u8f93\u7403\u7684\u4e25\u91cd\u7a0b\u5ea6\uff0c\u6216\u8005\u6211\u89c9\u5f97\u6253\u7403\u662f\u591a\u4e48\u5f92\u52b3\u3002\u4f60\u544a\u8bc9\u81ea\u5df1\uff0c\u5982\u679c\u6211\u7ee7\u7eed\u6253\u7403\uff0c\u6211\u4f1a\u53d8\u5f97\u66f4\u597d\uff0c\u6211\u4f1a\u8f93\u5f97\u66f4\u5c11\u3002\u5f53\u7136\uff0c\u8fd9\u662f\u8c0e\u8a00\u3002\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u5931\u53bb\u66f4\u5c11\uff0c\u56e0\u4e3a\u5f53\u4f60\u53d8\u5f97\u66f4\u597d\u65f6\uff0c\u4f60\u4f1a\u9047\u5230\u540c\u6837\u53d8\u5f97\u66f4\u597d\u7684\u4eba\u3002\u7ed3\u679c\u662f\u4f60\u603b\u662f\u5728\u4e0e\u5fd7\u540c\u9053\u5408\u7684\u4eba\u6bd4\u8d5b\u3002\u60b2\u5267\u5c31\u8fd9\u6837\u53d1\u751f\u4e86\uff1a\u4f60\u5728\u6570\u5b57\u5316\u3001\u5feb\u8282\u594f\u7684\u6e38\u620f\u4e2d\u8f93\u8d62\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u968f\u673a\u7684\u3002\u6e38\u620f\u672c\u8eab\u4e0d\u662f\u968f\u673a\u7684\uff0c\u4f46\u60a8\u5728\u6570\u5b57\u4e16\u754c\u4e2d\u4e0e\u5176\u4ed6\u4eba\u7684\u4e92\u52a8\u6216\u591a\u6216\u5c11\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\u3002\u5728\u706b\u7bad\u8054\u76df\u7684\u6bd4\u8d5b\u4e2d\uff0c\u4e24\u4e2a\u7403\u5458\u53ef\u80fd\u540c\u65f6\u98de\u5411\u540c\u4e00\u4e2a\u7403\uff0c\u4e00\u5343\u4e2a\u56e0\u7d20\u5c06\u51b3\u5b9a\u7403\u7684\u8d70\u5411\u3002\u8fd9\u79cd\u4e92\u52a8\u5728\u706b\u7bad\u8054\u76df\u4e2d\u88ab\u79f0\u4e3a\u201c50/50\u201d\uff0c\u56e0\u4e3a\u5b83\u672c\u8d28\u4e0a\u51e0\u4e4e\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\u3002\u95ee\u9898\u662f\uff0c\u5982\u679c\u8d62\u5f97\u4e00\u573a\u6bd4\u8d5b\u5bf9\u4f60\u6765\u8bf4\u975e\u5e38\u91cd\u8981\uff0c\u800c\u80dc\u5229\u662f\u7531\u8fd9\u4e9b\u6df7\u4e71\u7684\u4e92\u52a8\u51b3\u5b9a\u7684\uff0c\u90a3\u4e48\u4f60\u5c31\u5c06\u81ea\u5df1\u7684\u60c5\u7eea\u7559\u7ed9\u4e86\u673a\u4f1a\u3002\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u8f93\u8d62\u7684\u60c5\u7eea\u540e\u679c\u53ef\u80fd\u4f1a\u6301\u7eed\u51e0\u4e2a\u5c0f\u65f6\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u5929\u4e0b\u5348 1 \u70b9\u5de6\u53f3\uff0c\u6211\u6709 50% \u7684\u673a\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u5c0f\u65f6\u91cc\u611f\u89c9\u5f88\u7cdf\u7cd5\u3002\u4f60\u731c\u600e\u4e48\u7740\u2014\u2014\u6211\u505a\u5230\u4e86\u3002\u5f53\u6211\u6709\u5931\u8d25\u7684\u4e00\u5929\u65f6\uff0c\u6211\u7684\u5fc3\u60c5\u4f1a\u5982\u6b64\u75db\u82e6\uff0c\u4ee5\u81f3\u4e8e\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u5c0f\u65f6\u91cc\uff0c\u6211\u53ea\u60f3\u505a\u4efb\u4f55\u4e8b\uff0c\u53ea\u662f\u75b2\u5026\u3002\u5de5\u4f5c\u4e5f\u662f\u4e00\u6837\uff1a\u5982\u679c\u6211\u7684\u60c5\u7eea\u53d6\u51b3\u4e8e\u6211\u6253\u5f00\u7535\u5b50\u90ae\u4ef6\u6536\u4ef6\u7bb1\u65f6\u6536\u5230\u7684\u9519\u8bef\u62a5\u544a\u7684\u591a\u5c11\u6216\u591a\u5c11\uff0c\u6216\u8005\u524d\u4e00\u5929\u4ea7\u751f\u4e86\u591a\u5c11\u6d41\u91cf\u548c\u9500\u552e\u989d\uff0c\u90a3\u4e48\u6211\u7684\u60c5\u7eea\u7a33\u5b9a\u6027\u5c31\u53d6\u51b3\u4e8e\u673a\u4f1a\u4e86.\u5f53\u7136\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8fd9\u4e9b\u6570\u5b57\u5f80\u5f80\u4f1a\u5f62\u6210\u5e73\u5747\u503c\uff0c\u4f46\u5728\u65e5\u5e38\u5de5\u4f5c\u4e2d\uff0c\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u5168\u4e86\u89e3\u5373\u5c06\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u5f62\u72b6\u6216\u5f62\u5f0f\u3002\u6211\u66fe\u7ecf\u5c06\u5de5\u4f5c\u7535\u5b50\u90ae\u4ef6\u548c\u901a\u77e5\u76f4\u63a5\u53d1\u9001\u5230\u6211\u7684\u624b\u673a\u9501\u5b9a\u5c4f\u5e55\uff0c\u6240\u4ee5\u6211\u603b\u662f\u77e5\u9053\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u5728\u624b\u8155\u7684\u6bcf\u4e00\u6b21\u8f6c\u52a8\u4e2d\u90fd\u5728\u5076\u7136\u5730\u8df3\u821e\u3002\u6709\u65f6\uff0c\u597d\u6d88\u606f\u4f1a\u70b9\u4eae\u6211\u7684\u624b\u673a\uff0c\u4e5f\u4f1a\u70b9\u4eae\u6211\u7684\u8138\u3002\u5176\u4ed6\u65f6\u5019\uff0c\u5b8c\u5168\u76f8\u53cd\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u73b0\u5728\u6bcf\u5929\u65e9\u4e0a\u53ea\u68c0\u67e5\u4e00\u6b21\u4efb\u4f55\u7c7b\u578b\u7684\u901a\u77e5\u3002\u5426\u5219\uff0c\u6211\u7684\u624b\u673a\u5b8c\u5168\u6ca1\u6709\u4efb\u4f55\u901a\u77e5\u548c\u5e10\u6237\u3002\u6700\u540e\uff1a\u9972\u6599\u3002\u6211\u6240\u8bf4\u7684\u63d0\u8981\u662f\u6307\u6570\u5b57\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u63d0\u4f9b\u4e0d\u65ad\u53d8\u5316\u7684\u63d0\u8981\u5e76\u4e3a\u60a8\u63d0\u4f9b\u65b0\u7684\u4e1c\u897f\u3002 Reddit\u3001Instagram\u3001Twitter\u3001Facebook \u7b49\u3002\u9972\u6599\u53d8\u5f97\u5371\u9669\u6709\u4e24\u4e2a\u539f\u56e0\uff1a1\uff09RNG\u3002\u4f60\u6c38\u8fdc\u4e0d\u77e5\u9053\u4f60\u4f1a\u5f97\u5230\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5b83\u662f\u5426\u4f1a\u8ba9\u4f60\u5fc3\u70e6\u610f\u4e71\u6216\u8ba9\u4f60\u5feb\u4e50\uff0c2) \u5355\u7eaf\u7684\u63d0\u795e\u884c\u4e3a\u53d8\u6210\u4e86\u672c\u80fd\u3002\u6211\u53ef\u80fd\u5728\u6392\u961f\uff0c\u6216\u8005\u4ece\u4e00\u4e2a\u623f\u95f4\u8d70\u5230\u53e6\u4e00\u4e2a\u623f\u95f4\uff0c\u7136\u540e\u53cd\u5c04\u6027\u5730\u4f38\u624b\u53bb\u67e5\u770b\u4e00\u4e9b\u63d0\u8981\uff0c\u7136\u540e\u5728 5 \u79d2\u5185\uff0c\u4ece\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8df3\u5230\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6765\u5237\u65b0\uff0c\u6ca1\u6709\u4efb\u4f55\u660e\u663e\u7684\u539f\u56e0\u3002\u62c9\u52a8\u5237\u65b0\u5df2\u7ecf\u627e\u5230\u4e86\u6211\u7684\u9876\u5c42\u67b6\u5b50\u3002\u6211\u7b2c\u4e00\u6b21\u5728\u5403\u96f6\u98df\u7684\u8fc7\u7a0b\u4e2d\u4eb2\u773c\u76ee\u7779\u4e86\u9876\u7ea7\u8d27\u67b6\u539f\u5219\u7684\u4f5c\u7528\uff0c\u540e\u6765\u53c8\u4e0e\u5b69\u5b50\u4eec\u4ee5\u53ca iPad \u7684\u5b58\u5728\u4e0e\u5426\u3002\u6240\u4ee5\u6211\u5fc3\u91cc\u60f3\uff1a\u5982\u679c\u6211\u5f7b\u5e95\u6d17\u52ab\u6211\u7684\u9876\u5c42\u67b6\u5b50\uff0c\u628a\u6211\u4e60\u60ef\u6027\u5730\u559c\u6b22\u7684\u6240\u6709\u7269\u54c1\u90fd\u6254\u6389\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u6211\u4f1a\u56e0\u4e3a\u61d2\u60f0\u800c\u53d1\u75af\u5417\uff1f\u6216\u8005\u6211\u4f1a\u627e\u522b\u7684\u4e8b\u60c5\u505a\u5417\uff1f\u6211\u62d4\u6389\u4e86\u6211\u7684\u6e38\u620f\u7535\u8111\u3002\u6211\u7981\u7528\u4e86\u624b\u673a\u4e0a\u7684\u6240\u6709\u901a\u77e5\u3002\u6211\u5e0c\u671b\u5b83\u662f\u8fd9\u6837\u7684\uff0c\u6bcf\u6b21\u6211\u68c0\u67e5\u6211\u7684\u624b\u673a\u65f6\uff0c\u90fd\u4e0d\u4f1a\u6709\u901a\u77e5\u3002\u8fd9\u6837\uff0c\u6211\u4ec0\u81f3\u4e0d\u5fc5\u68c0\u67e5\u3002\u6211\u53ea\u77e5\u9053\u4e0d\u4f1a\u6709\u3002\u5728\u793e\u4ea4\u6216\u5bb6\u5ead\u6d3b\u52a8\u4e2d\uff0c\u6211\u5b8c\u5168\u5173\u95ed\u4e86\u624b\u673a\u3002\u5f53\u6211\u5bf9\u8c08\u8bdd\u611f\u5230\u538c\u70e6\u65f6\uff0c\u6211\u4e0d\u60f3\u8dd1\u8fc7\u53bb\u3002\u6211\u60f3\u6446\u8131\u65e0\u804a\uff0c\u770b\u770b\u53e6\u4e00\u8fb9\u6709\u4ec0\u4e48\u3002\u7ed3\u679c\u6b63\u5982\u8fd9\u4e2a\u5b8f\u5927\u7684\u4f2a\u539f\u7406\u6240\u9884\u671f\u7684\u90a3\u6837\u3002\u5728\u793e\u4ea4\u573a\u5408\uff0c\u4e0d\u754f\u60e7\u624b\u673a\u8ba9\u6211\u627e\u5230\u4e86\u5176\u4ed6\u5a31\u4e50\u65b9\u5f0f\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8c08\u8bdd\u53ef\u4ee5\u5f88\u6709\u8da3\u3002\u8c01\u77e5\u9053\uff1f\u5f53\u7136\uff0c\u5728\u6709\u7535\u5b50\u6e38\u620f\u7684\u60c5\u51b5\u4e0b\uff0c\u8c08\u8bdd\u4e0d\u4f1a\u662f\uff0c\u4f46\u522b\u65e0\u9009\u62e9\uff0c\u4f60\u627e\u5230\u4e86\u529e\u6cd5\u3002\u8fd9\u6709\u70b9\u50cf\u805a\u4f1a\u4e2d\u5bb3\u7f9e\u7684\u4eba\u8eb2\u5230\u89d2\u843d\u91cc\u770b\u624b\u673a\uff0c\u597d\u50cf\u4ed6\u4eec\u5728\u505a\u67d0\u4e8b\uff0c\u4ee5\u907f\u514d\u793e\u4ea4\u7684\u9648\u8bcd\u6ee5\u8c03\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u73b0\u5728\u77e5\u9053\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u5b8c\u5168\u5173\u95ed\u4f60\u7684\u624b\u673a\uff0c\u6216\u8005\u628a\u5b83\u629b\u5728\u8111\u540e\uff0c\u8fd9\u6837\u4f60\u5c31\u5fc5\u987b\u8fdb\u884c\u793e\u4ea4\u3002\u5f53\u4f60\u4e0d\u5f97\u4e0d\u8fd9\u6837\u505a\u65f6\uff0c\u4f60\u4f1a\u7684\u3002\u800c\u4e14\u4f60\u4e5f\u4f1a\u505a\u5f97\u5f88\u597d\uff0c\u5982\u679c\u9664\u4e86\u5f7b\u5e95\u5a31\u4e50\u81ea\u5df1\u4e4b\u5916\u522b\u65e0\u4ed6\u6cd5\u3002\n\u6ca1\u6709\u7535\u5b50\u6e38\u620f\u53ef\u73a9\uff0c\u5728\u6211\u7684\u4e00\u5929\u4e2d\u5df2\u7ecf\u5f00\u653e\u4e86\u5f88\u591a\u65f6\u95f4\u3002\u7531\u4e8e\u5750\u7740\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u5b9e\u9645\u4e0a\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64\u6211\u603b\u80fd\u627e\u5230\u53ef\u4ee5\u505a\u7684\u4e8b\u60c5\u3002\u6211\u5f00\u59cb\u63a5\u89e6\u674f\u4ec1\u2014\u2014\u76f8\u5f53\u4e8e\u73b0\u5b9e\u751f\u6d3b\u3002\u6211\u5f00\u59cb\u9605\u8bfb\u66f4\u591a\uff0c\u65e0\u8bba\u662f\u4ece\u7ef4\u57fa\u767e\u79d1\u7684\u5154\u5b50\u6d1e\u4e2d\u6389\u4e0b\u6765\u7684\u957f\u65f6\u95f4\u4f1a\u8bdd\uff0c\u8fd8\u662f 21 \u4e16\u7eaa\u7684 21 \u8bfe\uff0c\u73b0\u5728\u975e\u5e38\u5f15\u4eba\u6ce8\u76ee\u7684\u57fa\u56e0\u3002 \uff08\u4f60\u77e5\u9053\u5417\uff0c\u5728 1920 \u5e74\u4ee3\uff0c\u5728\u7f8e\u5229\u575a\u5408\u4f17\u56fd\uff0c\u5efa\u7acb\u201c\u6b96\u6c11\u5730\u201d\u662f\u4e3a\u4e86\u805a\u96c6\u201c\u611a\u8822\u201d\u7684\u4eba\u5e76\u5bf9\u5176\u8fdb\u884c\u7edd\u80b2\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u4e0d\u4f1a\u7e41\u6b96\uff1f\u5f97\u5230\u7f8e\u56fd\u6700\u9ad8\u6cd5\u9662\u7684\u6279\u51c6\u7b49\u7b49\u3002\u5254\u9664\u201c\u5f31\u201d\u53ea\u662f\u56fd\u5bb6\u4e4b\u95f4\u7684\u4e00\u79cd\u8d8b\u52bf\uff0c\u5305\u62ec\u7eb3\u7cb9\u5fb7\u56fd\uff0c\u5728\u9057\u4f20\u5b66\u7684\u65b0\u53d1\u73b0\u548c\u89e3\u91ca\u4e2d\u3002\uff09\u5f53\u6211\u538c\u5026\u4e86\u8eba\u5728\u6570\u5b57\u8bbe\u5907\u4e0a\u65f6\uff0c\u6211\u653e\u4e0b\u5b83\uff0c\u5750\u76f4\uff0c\u5e76\u8003\u8651\u6211\u7684\u4e0b\u4e00\u6b65\u884c\u52a8\u3002 \u201c\u55ef\uff0c\u6211\u4e0d\u80fd\u73a9\u7535\u5b50\u6e38\u620f\u3002\u6211\u6ca1\u6709\u4efb\u4f55\u53ef\u4ee5\u8ff7\u5931\u7684\u6570\u5b57\u4fe1\u606f\u3002\u800c\u4e14\u6211\u4e0d\u4f1a\u5750\u5728\u8fd9\u91cc\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u201d\u4e8e\u662f\u6211\u8d77\u8eab\u6d17\u7897\uff0c\u6253\u626b\u53a8\u623f\u3002\u6211\u62e7\u7d27\u4e86\u4e00\u4e2a\u677e\u52a8\u7684\u95e8\u628a\u624b\u3002\u6211\u5728\u623f\u5b50\u5468\u56f4\u505a\u4e86\u4e00\u4e9b\u5176\u4ed6\u7ef4\u4fee\u3002\u8fd9\u662f\u8fd9\u4e2a\u5947\u602a\u5b9e\u9a8c\u7684\u7b2c\u4e09\u5468\u3002\u800c\u4e14\u6211\u6ca1\u6709\u9a97\u4f60\u2014\u2014\u627e\u4e00\u4efd\u5bb6\u52a1\u6d3b\u548c\u73a9\u706b\u7bad\u8054\u76df\u4e00\u6837\u4ee4\u4eba\u5174\u594b\u3002", "note_en": "Say you have before you a kitchen cabinet with three shelves. On the top shelf you have your most delicious snacks and delicacies. Chocolate chip cookies, crispy cheetos, and frozen pistachio gelato. In the middle shelf you have snacks that are &#34;not bad&#34;, but not the most scrumptious. Maybe some beef jerky, plain pretzels, and a granola bar. On the bottom shelf, you have your survival snacks. You wouldn&#39;t eat them unless you were starving. For me that&#39;d be plain almonds.\n I&#39;ve found that when I&#39;m in the mood for a snack, my hand will always reach for top-shelf items. If the cabinet is stocked with soft chocolate chip cookies and spicy potato chips dripping with oil, I&#39;ll never reach for the almonds. The end result was that almonds never got eaten. In the presence of top-shelf items, almonds just didn&#39;t seem delicious enough. They were boring.\n But I found that as soon as all the delicious top-shelf items ran out, and all I was left with were mid-shelf items like plain pretzels, the plain pretzels began floating to the top. They became a top-shelf item, and reaching for them became relatively instinctual.\n  Options, not just in snacking but in any domain, tend to sort themselves by most satisfying first.\n On average, you will choose items sorted higher in the satisfaction queue. And anecdotally, what is most satisfying in the short term is typically not what is healthiest in the long term.\n The amount of will-power and discipline required to choose an option increases with its sort order in the satisfaction queue. That is, the first item\u2014the top-shelf item\u2014, will require very little will-power to act upon. Items towards the end of the queue, however, that are less satisfying but probably healthier, tend to require large doses of long-term thinking and discipline.\n Options do not possess an inherent satisfaction value. They are always relative to one another. In the absence of a historically top-shelf item, items lower in the queue will surface to the top and themselves become top-shelf items.\n In a queue of cheese puffs, chocolate chip cookies, and plain almonds, almonds sound mundane and unappealing. But in a cruel hierarchy containing expired milk, uncooked rice, and almonds, almonds will quickly sort to the beginning of the queue and become heartbreakingly delicious. And you will not feel ripped off for eating them. You will derive more or less equal satisfaction from them as you would any historical top-shelf item.\n This principle has been useful for me in snacking, sure, but has served me far greater in its application towards lifestyle addictions. My lifestyle cabinet looked like this:\n Top shelf:  working, checking some sort of digital feed, like reddit, or twitter, or instagram, and playing video games\n   Naturally, I was doing a lot of top-shelf actions, but hardly any bottom-shelf actions. And I had developed a fatal misunderstanding towards bottom-shelf items: I had thought I hated socializing in real-time because it was inherently unsatisfying to me. I had qualified myself as an innate introvert with no capacity for change. In reality, it wasn&#39;t that I disliked socializing\u2014it was that I enjoyed playing video games more. And with the options of playing video games or checking my phone always available to me, I almost always acted on them first, leaving whatever crumbs of waking capacity (usually none) to items lower in the queue.\n I observed this in the children of family members: if you gave them an iPad to play with, they weren&#39;t going to say no. And when they do get their hands on it, they lose themselves so deeply into the digital world, that they are mostly unavailable in the real one. But take away the iPad, and a remarkable thing happens: they find something else to do. Sure, they might throw a momentary fit, but a kid is a kid, and will not let one second pass without finding some way to entertain themselves. In these cases, where the top-shelf iPad was removed from the equation, items lower in the shelving system, like two blocks of legos, surfaced to the top, and the kids began playing with them with as equal voracity as the iPad.\n As for me, a grown adult with no seeming need for personal order or control in time spent facing a digital device, I wanted to reduce working, checking feeds, and playing video games for one reason:  RNG.\n Developers know RNG as a random number generator. In the video game world, gamers refer to the acronym simply to refer to &#34;randomness&#34; in a game. Random or not, in the course of playing video games, you are bound to lose. Especially in a networked game where you play against other real people. Losing, in a word, sucks. It&#39;s a very sharp and gutting pain. The pain lasts only seconds, but stabs like a knife. Losing can be especially painful when it happens in a game you love; one which you&#39;ve been working hard to better yourself in.\n For me, this game was Rocket League. I&#39;d been playing almost every day for a year and a half. When I&#39;m winning, it&#39;s pure ecstasy. When I&#39;m losing, it&#39;s pain coupled with RAGE, depending on how bad the loss is, or how futile I feel playing. You tell yourself, if I keep playing, I&#39;ll get better, and I&#39;ll lose less. Of course, that&#39;s a lie. You won&#39;t ever lose less, because as you get better, you get matched up against people who are also getting better. The result is that you&#39;re always playing against like-minded people.\n The tragedy comes into play thusly: whether you win or lose in a digital, fast-paced game is largely random. The games themselves aren&#39;t random, but the interactions you have in the digital world with other people are more or less unpredictable. In a game of Rocket League, two players may fly towards the same ball, at the same time, and a thousand factors will determine which way the ball goes. This interaction is literally called a &#34;50/50&#34; in Rocket League, because it&#39;s almost inherently unpredictable. The problem is, if winning a game is very important to you, and victories are decided by these chaotic interactions, then you leave your emotions to chance. In my experience, the emotional aftermath of winning or losing could last a couple hours. That meant that every day, there was a 50% chance that around 1PM, I would feel like shit for the next two hours. And guess what\u2014I did. When I had a losing day, I would be in such a bitter mood, that I felt like doing nothing but languishing for the next few hours.\n Same with work: if my emotions depended on how little or many bug reports I&#39;d receive when I open my email inbox, or how much traffic and sales the previous day had generated, then I was leaving my emotional stability in the hands of chance. Of course, these figures tend to form averages over time, but on a day-to-day basis, you never quite knew the shape or form of what was to come. I used to have work email and notifications make it directly to my phone lock screen, so I was  always in the know. In other words, I danced with chance at every turn of the wrist. Sometimes, good news would light up my phone, and with it my face. Other times, definitively the opposite. The short of it is that I now only check notifications, of any kind, once a day in the morning. Otherwise, my phone is completely devoid of notifications and accounts of any kind.\n Lastly: feeds. By feeds I mean digital applications that offer feeds that constantly change and offer you something new. Reddit, Instagram, Twitter, Facebook, and the like. Feeds became dangerous for two reasons: 1) RNG. You never quite knew what you were going to get, and whether it would upset you or make you happy, and 2) the mere act of refreshing feeds became instinctual. I could be standing in line, or walking from room to room, and reflexively reach for my phone to check some feed, and in the span of 5 seconds, bounce from app to app pulling-to-refresh, for no apparent reason whatsoever. Pulling to refresh had found its way to my top shelf.\n I had first witnessed the top shelf principle in action in my very serious ordeal with snacking, and later with kids and the presence or absence of an iPad. So I thought to myself: if I completely ransacked my top shelf, and disposed of all the items I&#39;m habitually inclined to, what would happen? Would I go mad with idleness? Or would I find something else to do?\n I unplugged my gaming PC. I disabled all notifications from my phone. I wanted it to be so that every time I checked my phone, there would be no notifications. This way, I wouldn&#39;t even have to check. I would just know there wouldn\u2019t be any. In the midst of social or family events, I completely turned my phone off. I didn&#39;t want to run to it when I felt bored with conversation. I wanted to push past boredom to see what lay on the other side.\n The result has been as anticipated by this grand pseudo-principle. In social situations, not cowering to my phone has led me to find other ways to entertain myself. And it turns out, conversation can be quite entertaining. Who knew? Of course, in the presence of video games, conversation wouldn&#39;t be, but stranded with no other options, you find a way. It&#39;s sort of like the cliche of the shy person in a party retreating to the corner and checking their phone, to seem like they&#39;re doing something, as to avoid socializing. In this case, I now know the solution to this problem is shutting off your phone entirely, or leaving it behind, so that you  have to socialize. When you have to, you will. And you&#39;ll do it well too, if for no reason other than to thoroughly entertain yourself.\n Not having video games to reach to, great blocks of time have opened in my day. And as sitting and not doing anything is quite literally undefined, I always found  something to do. I began reaching for the almonds-equivalent of real life. I began reading more, whether it be a long session falling down the Wikipedia rabbit hole, or  21 Lessons for the 21st Century, and now the very compelling  The Gene. (Did you know that in the 1920&#39;s, in the United States of America, &#34;colonies&#34; were set up to aggregate &#34;dumb&#34; people and sterilize them so they wouldn&#39;t reproduce? Approved by the U.S Supreme Court and everything. Culling the &#34;weak&#34; was just a trend amongst nations, including Nazi Germany, amidst new discoveries and interpretations in genetics.) When I grew tired of laying with a digital device, I put it down, sat up straight, and contemplated my next move. &#34;Well, I can&#39;t play video games. I don&#39;t have any digital feeds to get lost in. And I&#39;m not going to sit here and do nothing.&#34; So I got up and did the dishes and cleaned the kitchen. I tightened a loose door knob. I did some other repairs around the house.\n This is week three of this strange experiment. And I kid you not\u2014finding a chore to be done has been as exciting a prospect as playing a game of Rocket League.", "posttime": "2021-08-10 06:47:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9876\u7ea7,shelf,\u4e0d\u4f1a", "title": "\u9876\u7ea7\u539f\u5219", "title_en": "The Top-Shelf Principle", "transed": 1, "url": "https://listed.to/@mo/4733/the-top-shelf-principle", "via": "", "real_tags": ["\u9876\u7ea7", "shelf", "\u4e0d\u4f1a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072438, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4e00\u4e2a\u6175\u61d2\u7684\u5468\u4e8c\u4e0b\u5348\u3002\u4e5f\u8bb8\u4f60\u6b63\u5728\u95f2\u901b\u4f60\u6700\u559c\u6b22\u7684\u65b0\u95fb\u805a\u5408\u5668\uff0c\u6216\u8005\u8bbf\u95ee The Orange \u7f51\u7ad9\uff0c\u901a\u8fc7\u6a21\u7cca\u7684\u521b\u4e1a\u56e2\u4f53\u601d\u7ef4\u6765\u5bfb\u627e\u6709\u8da3\u7684\u94fe\u63a5\u3002\u7136\u800c\uff0c\u4eca\u5929\uff0c\u4f60\u9047\u5230\u4e86\u4e00\u4e2a\u8c1c\u3002\u4e00\u79cd\u4e13\u6709\u7684\u3001\u95ed\u6e90\u7684\u3001\u5546\u4e1a\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u4e00\u4e2a\u5947\u602a\u7684\u65f6\u4ee3\u9519\u8bef\u3002\u8fd9\u4e9b\u7a0b\u5e8f\uff0c\u5982\u679c\u4f60\u53ef\u4ee5\u8fd9\u6837\u79f0\u547c\u5b83\u4eec\u7684\u8bdd\uff0c\u5c31\u50cf\u662f\u957f\u65f6\u95f4\u7528\u952e\u76d8\u6253\u67b6\u7684\u7ed3\u679c\u3002\u8be5\u8bed\u8a00\u7b80\u79f0\u4e3a\u201cK\u201d\u3002\u5728\u4e0d\u81ea\u89c9\u5730\u5c06\u89c6\u7ebf\u4ece\u9644\u8fd1\u7ec8\u7aef\u7684 C \u7f16\u8bd1\u5668\u8f93\u51fa\u4e0a\u79fb\u5f00\u4e4b\u524d\uff0c\u60a8\u5bf9\u5355\u5b57\u6bcd\u540d\u79f0\u7684\u7c97\u4fd7\u5192\u6627\u55e4\u4e4b\u4ee5\u9f3b\u3002 int sum = 0;for (int i = 0; i &lt; 100; i++) { sum += i;} \u8fd9\u4e9b\u7a0b\u5e8f\u7684\u7ed3\u6784\u4e4b\u95f4\u6ca1\u6709\u53ef\u89c1\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u60a8\u5728 K \u4e2d\u770b\u4e0d\u5230\u4efb\u4f55\u8bcd\u7c7b\uff0c\u4e5f\u6ca1\u6709\u8981\u638c\u63e1\u7684\u540d\u79f0\u6765\u63d0\u53d6\u542b\u4e49\u3002\u4ee4\u4eba\u6cae\u4e27\uff0c\u4f46\u2026\u2026\u6709\u8da3\u3002 K \u4f3c\u4e4e\u662f\u8fd9\u4e9b\u201c\u4ee3\u7801\u9ad8\u5c14\u592b\u201d\u8bed\u8a00\u4e4b\u4e00\uff0c\u65e8\u5728\u7f16\u5199\u795e\u79d8\u7684\u5355\u884c\u4ee3\u7801\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\uff08\u952e\uff09\u51fb\u5e76\u5c55\u793a\u4e00\u4e2a\u4eba\u7684\u806a\u660e\u624d\u667a\u3002\u8c01\u4e0d\u559c\u6b22\u5c55\u793a\u81ea\u5df1\u7684\u806a\u660e\uff1f\u7136\u540e\u4f60\u76b1\u8d77\u7709\u5934\uff0c\u8bb0\u4f4f\u806a\u660e\u7684\u4ee3\u7801\u662f\u4e0d\u53ef\u80fd\u7ef4\u62a4\u7684\u3002\u5728\u4e00\u7bc7\u8bba\u6587\u80fd\u591f\u4ece\u4f60\u7684\u624b\u6307\u4e0a\u8bb2\u51fa\u7b80\u5355\u4ee3\u7801\u7684\u4ef7\u503c\u4e4b\u524d\uff0c\u5373\u4f7f\u662f\u5728\u65af\u5766\u798f\u5927\u5b66\u53d7\u8fc7\u6559\u80b2\u7684\u6700\u521d\u7ea7\u7684\u8c37\u6b4c\u5458\u5de5\u4e5f\u80fd\u7406\u89e3\uff08\u4f18\u5316\u662f\u4e07\u6076\u4e4b\u6e90\uff0c\u6b63\u5982\u4f60\u66fe\u7ecf\u8bfb\u8fc7\u7684\u90a3\u6837\uff09\u522b\u4eba\u6307\u51fa\u66f4\u76f4\u63a5\u5730\u7ffb\u8bd1\u6210\u53e6\u4e00\u79cd\u8bed\u8a00\u53ef\u80fd\u770b\u8d77\u6765\u50cf\uff1a\u73b0\u5728\u901a\u4fe1\u66f4\u6e05\u6670\u4e86\u3002\u5982\u679c K \u4e2d\u7684\u6bcf\u4e2a\u6807\u70b9\u5b57\u7b26\u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u8bcd\u6027\uff0c\u5e76\u4e14\u60a8\u98a0\u5012\u5b83\u4eec\u7684\u987a\u5e8f\u2026\u2026\u5012\u9000\uff01\u4f60\u5fcd\u4f4f\u4e86\u7b11\u58f0\u3002\u63a5\u4e0b\u6765\u662f\u4ec0\u4e48\uff1f\u4ecd\u7136\u6000\u7591\uff0c\u4f46\u8d8a\u6765\u8d8a\u591a\u5730\u6295\u5165\u5230\u8fd9\u4e2a\u8c1c\u9898\u4e2d\uff0c\u4f60\u82b1\u4e00\u4e9b\u65f6\u95f4\u9605\u8bfb\u66f4\u591a\u5173\u4e8e K \u7684\u5185\u5bb9\u3002\u4e00\u4e9b\u6d41\u6c13\u75af\u5b50\u5df2\u7ecf\u4e3a\u8be5\u8bed\u8a00\u7684\u65b9\u8a00\u63d0\u4f9b\u4e86\u4e3b\u8981\u5de5\u4f5c\u7684\u5f00\u6e90\u89e3\u91ca\u5668\uff0c\u6240\u4ee5\u4f60\u8bd5\u4e00\u8bd5\u3002\u60a8\u9605\u8bfb\u4e86\u4e00\u4e9b\u6587\u7ae0\u548c\u6559\u7a0b\uff0c\u7ffb\u9605\u4e86\u4f5c\u4e3a\u8be5\u8bed\u8a00\u4e3b\u8981\u7efc\u5408\u53c2\u8003\u8d44\u6599\u7684 K2 \u624b\u518c\uff0c\u5e76\u5c1d\u8bd5\u89e3\u51b3\u4e00\u4e9b Project Euler \u95ee\u9898\u3002\n\u5728\u60a8\u9605\u8bfb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u4f1a\u77ed\u6682\u5730\u9047\u5230 J \u548c APL\uff0c\u5b83\u4eec\u770b\u8d77\u6765\u6bd4 K \u66f4\u964c\u751f\uff0c\u4f46\u2026\u2026\u5728\u8bb8\u591a\u65b9\u9762\u90fd\u76f8\u540c\u3002 J \u548c APL \u6709 K \u7684\u4ece\u53f3\u5230\u5de6\u6c42\u503c\uff08\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u4ee4\u4eba\u8ba8\u538c\u5730\u8511\u89c6 PEMDAS\uff09\uff0c/ \u7b26\u53f7\u7684\u610f\u601d\u662f\u201c\u51cf\u5c11\u201d\uff0c\u60a8\u53ef\u4ee5\u50cf\u6dfb\u52a0\u5355\u4e2a\u6570\u5b57\u4e00\u6837\u8f7b\u677e\u5730\u5c06 5 \u6dfb\u52a0\u5230\u6574\u4e2a\u77e9\u9635\u3002\u4e3a\u4ec0\u4e48\u4f60\u60f3\u8981\u8fd9\u4e2a\u5c5e\u6027\u4ecd\u7136\u96be\u4ee5\u6349\u6478 - \u5b83\u770b\u8d77\u6765\u76f8\u5f53\u5b66\u672f\u548c\u6570\u5b66 - \u4f46\u4f60\u4e0d\u5f97\u4e0d\u627f\u8ba4\u5b83\u76f8\u5f53\u6574\u6d01\u3002\u4f60\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u5370\u8c61\uff0cK \u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u4e00\u6b21\u6027\u7684\u602a\u4eba\uff0c\u800c\u662f\u6574\u4e2a\u5bb6\u8c31\u4e2d\u7684\u4e00\u5458\u3002\u597d\u5427\uff0cK\u6709\u4e00\u4e9b\u5438\u5f15\u529b\u3002\u80fd\u591f\u51b2\u6389 ,/ \u6241\u5e73\u5316\u5217\u8868\u662f\u5f88\u597d\u7684\u3002 \u201c\u7b49\u7ea7\u201d\u8fd0\u7b97\u7b26 &lt; \u548c &gt; \u8d77\u521d\u4f3c\u4e4e\u662f\u4e00\u79cd\u7b28\u62d9\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c\u4f46\u662f\u60a8\u5f00\u59cb\u53d1\u73b0\u201c\u7f6e\u6362\u5411\u91cf\u201d\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u7528\u9014\u3002\u5173\u4e8e\u5217\u8868\u7d22\u5f15\u548c\u51fd\u6570\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u6210\u4e3a\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u975e\u5e38\u6b63\u786e\u7684\u3002 K \u4f3c\u4e4e\u592a\u7279\u5b9a\u4e8e\u9886\u57df\u800c\u65e0\u6cd5\u7528\u4e8e\u5b9e\u9645\u5de5\u4f5c\uff0c\u4f46\u4e5f\u8bb8\u5c06\u67d0\u4e9b K \u539f\u8bed\u5b9e\u73b0\u4e3a\u60a8\u6700\u559c\u6b22\u7684\u8bed\u8a00\u7684\u5e93\u4f1a\u5f88\u65b9\u4fbf\uff1f\u7b26\u53f7\u4ecd\u7136\u611f\u89c9\u50cf\u4e00\u4e2a\u95ee\u9898\u3002\u7b80\u5355\u5730\u4f7f\u7528\u62fc\u5199\u7684\u540d\u79f0\u4e0d\u662f\u66f4\u6e05\u6670\u3001\u66f4\u6613\u8bfb\u5417\uff1f\u4e5f\u8bb8\u800c\u4e0d\u662f\u5199\u4f5c\uff1a\u539f\u5219\u4e0a\uff0c\u8fd9\u5e94\u8be5\u66f4\u5177\u53ef\u8bfb\u6027\u548c\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u60a8\u5df2\u5c3d\u804c\u5c3d\u8d23\u5730\u5c06\u5b9a\u4e49\u5206\u89e3\u4e3a\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u90e8\u5206\uff0c\u5e76\u4e3a\u5b83\u4eec\u6307\u5b9a\u4e86\u6e05\u6670\u3001\u6709\u610f\u4e49\u7684\u540d\u79f0\uff0c\u8fd9\u662f\u60a8\u5728\u6700\u65e9\u7684\u7f16\u7a0b\u8bfe\u7a0b\u4e2d\u5b66\u5230\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u5e76\u5728\u60a8\u7684\u6574\u4e2a\u804c\u4e1a\u751f\u6daf\u4e2d\u5f97\u5230\u4e86\u8d2f\u5f7b\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e00\u6b21\u7684\u7ed3\u679c\u4ee4\u4eba\u62c5\u5fe7\uff0c\u4ee4\u4eba\u4e0d\u6ee1\u610f\u3002\u5982\u679c\u4f60\u5199\u5f97\u66f4\u7b80\u6d01\uff0c\u201cmostCommon\u201d\u8fd9\u4e2a\u540d\u5b57\u6bd4 K \u4e2d\u7684\u6574\u4e2a\u5b9a\u4e49\u90fd\u8981\u957f\u3002\u53ef\u4ee5\u628a K \u5199\u6210\u4e00\u4e2a\u770b\u8d77\u6765\u5f88\u5947\u602a\u7684 Lisp\u3001M \u8868\u8fbe\u5f0f\u7b49\u7b49\uff1a\u6216\u8005\u4f60\u53ef\u4ee5\u5728\u6ca1\u6709\u6761\u4ef6\u3001\u9012\u5f52\u6216\u4efb\u4f55\u660e\u786e\u547d\u540d\u7684\u53d8\u91cf\u7684\u60c5\u51b5\u4e0b\u8868\u8fbe\u76f8\u540c\u7684\u60f3\u6cd5\uff1a\u7ed9 K \u4e60\u8bed\u4e00\u4e2a\u540d\u5b57\u662f\u5426\u4f1a\u8ba9\u5b83\u66f4\u6e05\u6670\uff0c\u6216\u8005\u5b83\u662f\u5426\u63a9\u76d6\u4e86\u5b9e\u9645\u53d1\u751f\u7684\u4e8b\u60c5\uff1f\n\u201c\u5e8f\u6570\u201d\u8fd9\u4e2a\u8bcd\u53ef\u4ee5\u662f\u4efb\u4f55\u610f\u601d\uff0c\u4f46\u7ec4\u5408 &lt;&lt; \u53ea\u5177\u6709\u4e00\u79cd\u542b\u4e49\u3002 \uff08\u90a3\u4e2a\u70b9\u51fb\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u662f\u5f53\u5b83\u70b9\u51fb\u65f6\u5b83\u5f88\u4ee4\u4eba\u6ee1\u610f\u3002\uff09\u5982\u679c\u539f\u59cb\u201c\u7ec4\u201d\u53ea\u662f\u8fd9\u4e2a\u8bcd\u5f00\u5934\uff0c\u4f60\u4f1a\u6bd4\u770b\u5230\u7b26\u53f7=\u66f4\u4e86\u89e3\u5b83\u505a\u4e86\u4ec0\u4e48\u5417\uff1f\u6709\u65f6\uff0c\u957f\u540d\u79f0\u66f4\u5177\u63cf\u8ff0\u6027\uff0c\u4f46\u6709\u65f6\u53ea\u662f\u2026\u2026\u66f4\u957f\u3002\u5b83\u6bd4 +/!100 \u66f4\u660e\u786e\uff0c\u4f46\u73b0\u5728\u5b83\u5728\u4f60\u7684\u5634\u91cc\u7559\u4e0b\u4e86\u4e0d\u597d\u7684\u5473\u9053\u3002\u67e5\u770b\u60a8\u540c\u4e8b\u4eca\u5929\u63d0\u4ea4\u7684\u8865\u4e01\uff0c\u60a8\u53d1\u73b0\u4e00\u4e2a\u5177\u6709\u719f\u6089\u7ed3\u6784\u7684\u5faa\u73af\uff1a let max = list[0];for (let i = 0; i &lt; list.length; i++) { if (list[i] &gt;\u6700\u5927\u503c\uff09{ \u6700\u5927\u503c = \u5217\u8868 [i];\u60a8\u63d0\u51fa\u4e86\u4e00\u4e2a\u66ff\u4ee3\u65b9\u6848\uff0c\u5bf9\u907f\u514d\u4e0e JavaScript \u7684\u53ef\u53d8\u53c2\u6570 Math.max() \u53d1\u751f\u51b2\u7a81\u6240\u9700\u7684 lambda \u8868\u793a\u6cd5\u7565\u6709\u754f\u7f29\uff1a\u60a8\u7684\u5efa\u8bae\u88ab\u62d2\u7edd\u4e3a\u795e\u79d8\u4e14\u8fc7\u4e8e\u590d\u6742\u3002 Lambda \u5f88\u96be\u7406\u89e3\uff0c\u66f4\u4e0d\u7528\u8bf4reduce()\u3002\u6709\u4eba\u8ba4\u4e3a\uff0cfor \u5faa\u73af\u66f4\u52a0\u76f4\u89c2\u3001\u81ea\u7136\u548c\u53ef\u8bfb\u3002\u5982\u679c\u60a8\u5728\u4ee3\u7801\u5e93\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u5de7\u5999\u7684\u6280\u5de7\uff0c\u5c06\u65e0\u6cd5\u7ef4\u62a4\u3002\u505a\u51fa\u59a5\u534f\uff1a\nlet max = list[0];for (let i = 0; i &lt; list.length; i++) { max = Math.max(list[i], max);} \u5728 Orange \u7f51\u7ad9\u4e0a\uff0c\u6709\u4eba\u53d1\u8d77\u4e86\u4e00\u4e2a\u5173\u4e8e\u4e00\u79cd\u5e26\u6709\u5355\u5b57\u6bcd\u540d\u79f0\u7684\u6666\u6da9\u8bed\u8a00\u3002\u8bc4\u8bba\u8005\u5f88\u5feb\u5c31\u5bf9\u5b83\u7684\u4e0d\u53ef\u8bfb\u6027\u8868\u793a\u6000\u7591\u3002", "note_en": "It is a lazy Tuesday afternoon. Perhaps you were idly browsing your favorite news aggregator, or visiting The Orange Website to wade through murky startup groupthink in search of interesting links.\n Today, though, you arrived at an enigma. A proprietary, closed-source, commercial programming language. A bizarre anachronism. The programs, if you can call them that, resemble the results of a prolonged fistfight with a keyboard. The language is simply called \u201c K\u201d. You snort at the vulgar presumptuousness of a single-letter name, before self-consciously averting your eyes from the C compiler output in a nearby terminal.\n    int sum = 0;for (int i = 0; i &lt; 100; i++) {\tsum += i;}\n There is no visible correspondence between the structure of these programs. You discern no parts of speech in the K, no names to grasp onto to extract meaning. Frustrating, and yet\u2026 intriguing. K seems to be one of these \u201ccode golf\u201d languages designed for writing cryptic one-liners that minimize (key)strokes and demonstrate one\u2019s cleverness. Who doesn\u2019t like to demonstrate their own cleverness? Then you scowl and remember that  clever code is impossible to maintain.\n Before a treatise can work its way out of your fingers on the value of  simple code which is comprehensible to even the most junior Stanford-educated Google employee, (optimization being the root of all evil, as you once read, paraphrased) someone else points out that a more direct translation into  another language might look like:\n  The correspondence is clearer now. If each punctuation character in the K is a separate part of speech, and you reverse their order\u2026\n  Backwards! You stifle a chuckle. What next? Still dubious, but increasingly invested in this puzzle, you spend some time reading more about K. A few  rogue  lunatics have  furnished mostly-working open source interpreters for dialects of the language, so you give them a try. You read a few  essays and  tutorials, flip through the  manual for K2 that serves as the primary comprehensive reference for the language, and have a go at solving some  Project Euler problems.\n In the course of your reading you briefly encounter  J and  APL, which seem even  more alien than K, and yet\u2026 the same in many ways. J and APL have K\u2019s right-to-left evaluation (in annoying defiance of  PEMDAS, for some reason), the  / symbol means \u201creduce\u201d, and you can add 5 to an entire matrix at once as easily as a single number.  Why you would want this property remains elusive- it seems rather  academic and  mathy- but you can\u2019t help but admit that it\u2019s rather neat. You have a growing impression that K is not simply a one-off oddity, but rather a member of a whole family tree.\n Fine, K has some appeal. Being able to dash off  ,/ to flatten a list is nice. The \u201cgrade\u201d operators  &lt; and  &gt; seemed like a clumsy way to sort at first, but you\u2019re starting to see that \u201cpermutation vectors\u201d have many other uses. There\u2019s something deeply  right about how list indexing and function application are the same operation. K seems too domain-specific to use for  real work, but maybe it would be handy to implement some of the K primitives as a library for your favorite language?\n The symbols still feel like a problem. Wouldn\u2019t it be clearer and more readable to simply use spelled-out names? Maybe instead of writing:\n    In principle, this should be more readable and easier to understand. You have dutifully broken down the definition into reusable parts and given them clear, meaningful names, a best-practice that you learned in your earliest programming courses and have carried forward throughout your professional career. Still,  this time there\u2019s something worryingly unsatisfying about the results. The name \u201cmostCommon\u201d is longer than the  entire definition in K if you write it more succinctly.\n It is possible to write K as if it were a strange-looking Lisp,  M-Expressions and all:\n  Or you could express the same idea without conditionals, recursion, or any explicitly named variables:\n  Does giving a K idiom a name make it  clearer, or does it obscure what is  actually happening?\n  The word \u201cordinal\u201d can mean anything, but the composition  &lt;&lt; has exactly one meaning. (That one took a while to click, but it was satisfying when it did.) If the primitive \u201cgroup\u201d was just that word to begin with, would you have known what it  did any more than if you saw the symbol  =?\n  Sometimes a long name is more descriptive, but sometimes it\u2019s just\u2026 longer.\n   It\u2019s more  explicit than  +/!100, but now it leaves a bad taste in your mouth.\n  Reviewing a patch one of your coworkers submitted today, you recognize a loop with a familiar structure:\n let max = list[0];for (let i = 0; i &lt; list.length; i++) {\tif (list[i] &gt; max) { max = list[i]; }}\n You suggest an alternative, wincing slightly at the lambda notation you need to avoid running afoul of JavaScript\u2019s variadic  Math.max():\n  Your suggestion is rebuffed as cryptic and overly complex. Lambdas are hard to understand, not to mention   reduce(). A for loop is much more intuitive, natural, and readable, it is argued. If you used clever tricks everwhere in the codebase, it would be impossible to maintain. A compromise is committed:\n let max = list[0];for (let i = 0; i &lt; list.length; i++) {\tmax = Math.max(list[i], max);}\n On The Orange Website, someone has started a thread about an obscure language with a single-letter name. Commenters are quick to express incredulity at how unreadable it is.", "posttime": "2021-08-10 06:46:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5426\u8ba4,stages,\u8bed\u8a00", "title": "\u5426\u8ba4\u9636\u6bb5", "title_en": "Stages of Denial", "transed": 1, "url": "https://beyondloom.com/blog/denial.html", "via": "", "real_tags": ["\u5426\u8ba4", "stages", "\u8bed\u8a00"]}, {"category": "", "categoryclass": "", "imagename": "eca2f078b1442731841c27ff5ef2343b.png", "infoid": 1072437, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Elle \u662f\u4e00\u4e2a\u7528\u4e8e\u9ed1\u76d2\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u4e00\u81f4\u6027\u68c0\u67e5\u5668\u3002\u7eaf\u7cb9\u57fa\u4e8e\u5ba2\u6237\u5bf9\u4ea4\u6613\u7684\u89c2\u5bdf\uff0c\u5e76\u7ed9\u5b9a\u5bf9\u6570\u636e\u7c7b\u578b\u548c\u64cd\u4f5c\u7684\u4e00\u4e9b\u6700\u5c0f\u7ea6\u675f\uff0c\u5b83\u53ef\u4ee5\u544a\u8bc9\u60a8\u8be5\u89c2\u5bdf\u662f\u5426\u8868\u73b0\u51fa\u5404\u79cd\u4ea4\u6613\u5f02\u5e38\u3002\u5c31\u50cf\u806a\u660e\u7684\u5f8b\u5e08\u4e00\u6837\uff0cElle \u4f1a\u5728\u6545\u4e8b\u4e2d\u5bfb\u627e\u4e0d\u53ef\u80fd\u6309\u8be5\u987a\u5e8f\u53d1\u751f\u7684\u4e00\u7cfb\u5217\u4e8b\u4ef6\uff0c\u5e76\u4f7f\u7528\u8be5\u63a8\u8bba\u6765\u8bc1\u660e\u6545\u4e8b\u4e0d\u80fd\u81ea\u6d3d\u3002\u6982\u8ff0\uff1aElle \u9002\u7528\u4e8e\u591a\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u5e76\u4e14\u4ec5\u5bf9\u4e8b\u52a1\u7ed3\u6784\u8bbe\u7f6e\u4e86\u6700\u5c0f\u7684\u3001\u5b9e\u7528\u7684\u7ea6\u675f\u3002\u9ad8\u6548\uff1aElle \u5728\u5386\u53f2\u957f\u5ea6\u4e0a\u662f ~\u7ebf\u6027\u7684\uff0c\u5e76\u4e14 ~constant\uff0c\u800c\u4e0d\u662f\u6307\u6570\uff0c\u5173\u4e8e\u5e76\u53d1\u6027\u3002\u6709\u6548\uff1aElle \u5728\u6211\u4eec\u68c0\u67e5\u8fc7\u7684\u6bcf\u4e2a\u6570\u636e\u5e93\u4e2d\u90fd\u53d1\u73b0\u4e86\u610f\u5916\u5f02\u5e38\uff0c\u4ece\u5185\u90e8\u4e00\u81f4\u6027\u8fdd\u89c4\u5230\u53cd\u4f9d\u8d56\u5faa\u73af\u3001\u810f\u8bfb\u3001\u66f4\u65b0\u4e22\u5931\u5230\u5b9e\u65f6\u8fdd\u89c4\u3002\u58f0\u97f3\uff1aElle \u53ef\u4ee5\u4ece Adya\u3001Liskov \u548c O&#39;Neil \u7684\u5e7f\u4e49\u9694\u79bb\u7ea7\u522b\u5b9a\u4e49\u4e2d\u627e\u5230\u6240\u6709\uff08\u975e\u8c13\u8bcd\uff09\u5f02\u5e38\u3002 Elucidative\uff1aElle \u53ef\u4ee5\u6307\u51fa\u89c1\u8bc1\u4e00\u81f4\u6027\u8fdd\u89c4\u7684\u6700\u5c0f\u4ea4\u6613\u96c6\uff1b\u5176\u7ed3\u8bba\u6613\u4e8e\u7406\u89e3\u548c\u9a8c\u8bc1\u3002\u8be5\u5b58\u50a8\u5e93\u5305\u542b Elleconsistency \u68c0\u67e5\u5668\u7684 Clojure \u5b9e\u73b0\u53ca\u5176\u968f\u9644\u7684\u6d4b\u8bd5\u5957\u4ef6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u68c0\u67e5\u81ea\u5df1\u7684\u5386\u53f2\u8bb0\u5f55\u3002\u6211\u4eec\u7684\u8bba\u6587\u6df1\u5165\u4e86\u89e3\u4e86 Elle \u80cc\u540e\u7684\u76ee\u6807\u548c\u76f4\u89c9\uff0c\u5e76\u5bf9\u5176\u7a33\u5065\u6027\u8bc1\u660e\u8fdb\u884c\u4e86\u7c97\u7565\u7684\u5f62\u5f0f\u5316\u3002\u4e00\u4e2a\u8fdc\u672a\u5b8c\u6210\u7684\u6b63\u5f0f\u8bc1\u660e\u8349\u56fe\u662f\u7528 Isabelle/HOL \u8bc1\u660e\u8bed\u8a00\u7f16\u5199\u7684\u3002\n\u5982\u679c\u60a8\u60f3\u4f7f\u7528 Elle \u68c0\u67e5\u6570\u636e\u5e93\uff0c\u8bf7\u53c2\u9605 https://jepsen.io\uff1b Elle \u662f\u5185\u7f6e\u7684\u3002\u5982\u679c\u4f60\u60f3\u5728\u4e0d\u4f7f\u7528 Jepsen \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 Elle \u68c0\u67e5\u4f60\u81ea\u5df1\u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u4f60\u53ef\u4ee5\u5c06 Elle \u4f5c\u4e3a\u4f9d\u8d56\u6dfb\u52a0\u5230\u4efb\u4f55 JVM \u9879\u76ee\uff0c\u5e76\u76f4\u63a5\u8c03\u7528\u5b83\u7684\u68c0\u67e5\u5668\u51fd\u6570\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u975e JVM \u8bed\u8a00\uff0c\u5219\u53ef\u4ee5\u5c06\u5386\u53f2\u8bb0\u5f55\u5199\u5165\u6587\u4ef6\u6216\u6d41\uff0c\u5e76\u8c03\u7528\u4e00\u4e2a\u5c0f\u578b\u5305\u88c5\u7a0b\u5e8f\u6765\u751f\u6210\u8f93\u51fa\u3002 Elle \u4ecd\u5728\u79ef\u6781\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u5bf9\u5176\u63a8\u7406\u89c4\u5219\u8fd8\u4e0d\u662f 100% \u6709\u4fe1\u5fc3\u3002 Jepsen \u5efa\u8bae\u624b\u52a8\u68c0\u67e5\u62a5\u544a\u7684\u5f02\u5e38\u4ee5\u786e\u4fdd\u5b83\u4eec\u6709\u6548\u3002\u5982\u679c\u60a8\u613f\u610f\u505a\u51fa\u8d21\u732e\uff0c\u6211\u4eec\u7279\u522b\u6b22\u8fce\u60a8\u5728\u5f62\u5f0f\u8bc1\u660e\u548c\u4e25\u683c\u5b9a\u4e49\u4e00\u81f4\u6027\u6a21\u578b\u65b9\u9762\u63d0\u4f9b\u5e2e\u52a9\u3002\u60f3\u8c61\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\uff08\u7531 :x \u6216 :y \u4e4b\u7c7b\u7684\u952e\u6807\u8bc6\uff09\u90fd\u662f\u4e00\u4e2a\u6570\u5b57\u5217\u8868\u3002\u4e8b\u52a1\u7531\u8bfb\u53d6 [:r :x [1 2 3]] \u7ec4\u6210\uff0c\u5b83\u8fd4\u56de\u7ed9\u5b9a\u5217\u8868\u7684\u5f53\u524d\u503c\uff0c\u5e76\u5199\u5165 [:append :y 4]\uff0c\u5c06\u4e00\u4e2a\u6570\u5b57\u9644\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002\u6211\u4eec\u6784\u5efa\u4e86\u4e09\u4e2a\u4e8b\u52a1\u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u90fd\u5df2\u77e5\u5df2\u63d0\u4ea4\uff08:type :ok\uff09\u3002\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u5c06 1 \u9644\u52a0\u5230 :x \u5e76\u89c2\u5bdf\u5230 \u200b\u200b:y = [1]\u3002\u7b2c\u4e8c\u4e2a\u9644\u52a0 2 \u5230 :x \u548c 1 \u5230 :y\u3002\u7b2c\u4e09\u4e2a\u89c2\u5bdf x\uff0c\u5e76\u5c06\u5176\u503c\u89c6\u4e3a [1 2]\u3002 =&gt; ( def h [{ :type :ok, :value [[ :append :x 1] [ :r :y [ 1]]]} { :type :ok, :value [[ :append :x 2] [ :append :y 1]]} { :type :ok, :value [[ :r :x [ 1 2]]]}])h \u73b0\u5728\uff0c\u6211\u4eec\u8981\u6c42 Elle \u68c0\u67e5\u8fd9\u4e2a\u5386\u53f2\u8bb0\u5f55\uff0c\u671f\u671b\u5b83\u662f\u53ef\u5e8f\u5217\u5316\u7684\uff0c\u5e76\u62e5\u6709\u5b83\u5c06\u5f02\u5e38\u8f6c\u50a8\u5230\u540d\u4e3a out/ \u7684\u76ee\u5f55\u3002 =&gt; ( pprint ( a/check { :consistency-models [ :serializable], :directory &quot;out &quot;} h)){ :valid? false, :anomaly-types ( :G1c), :anomalies { :G1c [{ :cycle [{ :type :ok, :value [[ :append :x 2] [ :append :y 1]]} { :type :\u597d\u7684, :value [[ :append :x 1] [ :r :y [ 1]]]} { :type :ok, :value [[ :append :x 2] [ :append :y 1]]}], :steps ({ :type :wr, :key :y, :value 1, :a-mop-index 1, :b-mop-index 1} { :type :ww, :key :x, :value 1, : value&#39; 2, :a-mop-index 0, :b-mop-index 0}), :type :G1c}]}, :not #{ :read-committed}, :also-not #{ :consistent-view :cursor-stability :forward-consistent-view :monotonic-atomic-view :monotonic-snapshot-read :monotonic-view :repeatable-read :serializable :snapshot-isolation :strict-serializable :update-serializable}}\n\u8fd9\u91ccElle\u53ef\u4ee5\u6839\u636eT1\u548cT2\u5404\u81ea\u7684\u8bfb\u5199\u60c5\u51b5\u63a8\u65ad\u51faT1\u548cT2\u4e4b\u95f4\u7684\u8bfb\u5199\u5173\u7cfb\u3002 T2 \u548c T1 \u4e4b\u95f4\u7684\u5199-\u5199\u5173\u7cfb\u662f\u53ef\u63a8\u65ad\u7684\uff0c\u56e0\u4e3a T3 \u89c2\u5bdf\u5230 x = [1,2]\uff0c\u8fd9\u9650\u5236\u4e86\u53ef\u80fd\u7684\u8ffd\u52a0\u987a\u5e8f\u3002\u8fd9\u662f\u4e00\u4e2a G1c \u5f02\u5e38\uff1a\u5faa\u73af\u4fe1\u606f\u6d41\u3002 :cycle \u5b57\u6bb5\u663e\u793a\u8be5\u5faa\u73af\u4e2d\u7684\u64cd\u4f5c\uff0c\u800c :steps \u663e\u793a\u5faa\u73af\u4e2d\u6bcf\u5bf9\u64cd\u4f5c\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u57fa\u4e8e\u8fd9\u4e2a\u5f02\u5e38\uff0cElle \u5f97\u51fa\u7684\u7ed3\u8bba\u662f\u8fd9\u4e2a\u5386\u53f2\u4e0d\u662f read-committed ---\u8fd9\u662f Elle \u53ef\u4ee5\u8bc1\u660e\u88ab\u8fdd\u53cd\u7684\u6700\u5f31\u7684\u7ea7\u522b\u3002\u6b64\u5916\uff0c\u6b64\u5386\u53f2\u8bb0\u5f55\u8fd8\u8fdd\u53cd\u4e86\u51e0\u4e2a\u66f4\u5f3a\u7684\u9694\u79bb\u7ea7\u522b\uff0c\u4f8b\u5982\u4e00\u81f4\u89c6\u56fe\u548c\u66f4\u65b0\u53ef\u5e8f\u5217\u5316\u3002 $ cat out/G1c.txtG1c #0Let: T1 = {:type :ok, :value [[:append :x 2] [:append :y 1]]} T2 = {:type :ok, :value [[: append :x 1] [:r :y [1]]]}\u7136\u540e\uff1a - T1 &lt; T2\uff0c\u56e0\u4e3a T2 \u89c2\u5bdf\u5230 T1 \u5c06 1 \u9644\u52a0\u5230\u952e :y\u3002 - \u4f46\u662f\uff0cT2 &lt; T1\uff0c\u56e0\u4e3a T1 \u5728 T2 \u5c06 1 \u9644\u52a0\u5230 :x \u4e4b\u540e\u9644\u52a0\u4e86 2\uff1a\u77db\u76fe\uff01\u9664\u4e86\u4e3a\u6bcf\u4e2a\u5355\u72ec\u7684\u5faa\u73af\u7ed8\u5236\u4e00\u4e2a\u56fe\u5f62\u4e4b\u5916\uff0cElle \u8fd8\u4e3a\u4f9d\u8d56\u56fe\u7684\u6bcf\u4e2a\u5f3a\u8fde\u63a5\u7ec4\u4ef6\u751f\u6210\u4e00\u4e2a\u56fe\u3002\u8fd9\u6709\u52a9\u4e8e\u5904\u7406\u5f02\u5e38\u884c\u4e3a\u7684\u8303\u56f4\uff0c\u800c\u5468\u671f\u663e\u793a\u5c3d\u53ef\u80fd\u5c0f\u7684\u4ea4\u6613\u96c6\u3002\u8fd9\u662f\u4e00\u4e2a\u6765\u81ea\u66f4\u590d\u6742\u5386\u53f2\u7684\u56fe\uff0c\u6d89\u53ca\u5b9e\u65f6\u8fb9\u7f18\u3001\u5199-\u5199\u3001\u5199-\u8bfb\u548c\u8bfb-\u5199\u4f9d\u8d56\u5173\u7cfb\uff1a \u4f5c\u4e3a\u7528\u6237\uff0c\u60a8\u8fdb\u5165 Elle \u7684\u4e3b\u8981\u5165\u53e3\u70b9\u5c06\u662f elle.list-append/check \u548c elle.rw-register/\u67e5\u770b\u3002\u4e24\u4e2a\u547d\u540d\u7a7a\u95f4\u4e5f\u6709\u7528\u4e8e\u751f\u6210\u4e8b\u52a1\u5e8f\u5217\u7684\u4ee3\u7801\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4ee3\u7801\u5e94\u7528\u4e8e\u60a8\u7684\u6570\u636e\u5e93\uff1b\u53c2\u89c1\uff0c\u4f8b\u5982\uff0celle.list-append/gen\u3002 Elle \u6709\u5404\u79cd\u5404\u6837\u7684\u5f02\u5e38\u548c\u4e00\u81f4\u6027\u6a21\u578b\uff1b\u53c2\u89c1 elle.consistency-model \u7684\u5b9a\u4e49\u3002\u5e76\u975e\u6bcf\u4e2a\u5f02\u5e38\u90fd\u53ef\u4ee5\u68c0\u6d4b\u5230\uff0c\u4f46\u6211\u4eec\u7684\u76ee\u6807\u662f\u5b8c\u6574\u6027\u3002 Elle \u671f\u671b\u5176\u89c2\u5bdf\u5230\u7684\u5386\u53f2\u4e0e Jepsen \u7684\u683c\u5f0f\u76f8\u540c\u3002\u4e00\u4e2a\u89c2\u5bdf\u5230\u7684\u5386\u53f2\u5e94\u8be5\u662f\u4e00\u4e2a\u6309\u5b9e\u65f6\u987a\u5e8f\u6392\u5217\u7684\u64cd\u4f5c\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u662f\u4e00\u4e2a\u5982\u4e0b\u5f62\u5f0f\u7684\u6620\u5c04\uff1a\n{ :type \u4e4b\u4e00:invoke, ok, :info, :fail :process \u5355\u4e2a\u6267\u884c\u7ebf\u7a0b\u7684\u903b\u8f91\u6807\u8bc6\u7b26:value \u4e8b\u52a1;\u7ed3\u6784\u548c\u8bed\u4e49\u5404\u4e0d\u76f8\u540c}\u6bcf\u4e2a\u8fdb\u7a0b\u5e94\u8be5\u4ea4\u66ff\u6267\u884c :invoke \u548c :ok/ :info/ :failoperations\u3002 :ok \u8868\u793a\u660e\u786e\u63d0\u4ea4\u7684\u64cd\u4f5c\u3002 :failed \u8868\u793a\u5b83\u80af\u5b9a\u6ca1\u6709\u53d1\u751f\u2014\u2014\u4f8b\u5982\u5b83\u88ab\u4e2d\u6b62\uff0c\u4ece\u672a\u63d0\u4ea4\u5230\u6570\u636e\u5e93\u7b49\u3002 :info \u8868\u793a\u4e0d\u786e\u5b9a\u72b6\u6001\uff1b\u4ea4\u6613\u53ef\u80fd\u53d1\u751f\u4e5f\u53ef\u80fd\u6ca1\u6709\u53d1\u751f\u3002\u5728 :info \u4e4b\u540e\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u4e0d\u4f1a\u6267\u884c\u53e6\u4e00\u4e2a\u64cd\u4f5c\uff1b\u8c03\u7528\u5728\u5386\u53f2\u7684\u5176\u4f59\u90e8\u5206\u4fdd\u6301\u5f00\u653e\u3002 elle.core\uff1aElle \u63a8\u7406\u7cfb\u7edf\u7684\u6838\u5fc3\u3002\u8ba1\u7b97\u4e8b\u52a1\u56fe\u5e76\u627e\u5230\u5b83\u4eec\u7684\u5faa\u73af\u3002\u5305\u62ec\u6bcf\u4e2a\u6d41\u7a0b\u548c\u5b9e\u65f6\u8ba2\u5355\u7684\u901a\u7528\u56fe\u8868\u3002 elle.rw-register\uff1a\u5199/\u8bfb\u5bc4\u5b58\u5668\u3002\u63a8\u7406\u89c4\u5219\u8f83\u5f31\uff0c\u4f46\u57fa\u672c\u9002\u7528\u4e8e\u6240\u6709\u7cfb\u7edf\u3002\u5bf9\u8c61\u662f\u5bc4\u5b58\u5668\uff1b\u5199\u5165\u76f2\u76ee\u66ff\u6362\u503c\u3002 elle.list-append\uff1aElle \u6700\u5f3a\u5927\u7684\u63a8\u7406\u89c4\u5219\u3002\u5bf9\u8c61\u662f\u5217\u8868\uff0c\u5199\u5165\u5c06\u552f\u4e00\u5143\u7d20\u9644\u52a0\u5230\u8fd9\u4e9b\u5217\u8868\u4e2d\u3002\u4e0b\u56fe\u663e\u793a\u4e86 Elle \u5728\u4e00\u81f4\u6027\u6a21\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\uff1aa -&gt; b \u8868\u793a\u5982\u679c a \u6210\u7acb\uff0c\u90a3\u4e48 b \u4e5f\u6210\u7acb\u3002\u8be5\u7ed3\u6784\u7684\u6765\u6e90\u53ef\u4ee5\u5728 elle.consistency-model \u4e2d\u627e\u5230\u3002\u6b64\u56fe\u663e\u793a\u4e86 Elle \u5f02\u5e38\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u7bad\u5934 a -&gt; bimplies \u5982\u679c\u6211\u4eec\u5728\u5386\u53f2\u4e2d\u89c2\u5bdf\u5230\u5f02\u5e38 a\uff0c\u90a3\u4e48 b \u4e5f\u5b58\u5728\u4e8e\u5386\u53f2\u4e2d\u3002\nElle \u53ef\u4ee5\u4ece Adya\u3001Liskov \u548c O&#39;Neil \u7684\u5e7f\u4e49\u9694\u79bb\u7ea7\u522b\u5b9a\u4e49\u4e2d\u68c0\u67e5\u6bcf\u4e2a\u975e\u8c13\u8bcd\u5f02\u5e38\u3002\u5176\u4e2d\u5305\u62ec\uff1a \u7279\u5b9a\u68c0\u67e5\u5668\u53ef\u4f7f\u7528\u5176\u4ed6\u5f02\u5e38\uff08\u4f8b\u5982\u5783\u573e\u8bfb\u53d6\u3001\u810f\u66f4\u65b0\u3001\u4e0d\u4e00\u81f4\u7684\u7248\u672c\u987a\u5e8f\uff09\u3002\u5e76\u975e\u6240\u6709\u8fd9\u4e9b\u90fd\u5df2\u5b8c\u5168\u5b9e\u73b0\u2014\u2014\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8bba\u6587\u3002\u4e0d\u4e00\u81f4\u7684\u7248\u672c\u987a\u5e8f\uff1a\u63a8\u7406\u89c4\u5219\u5efa\u8bae\u5bf9\u5355\u4e2a\u5bc6\u94a5\u8fdb\u884c\u5faa\u73af\u66f4\u65b0\u3002\u5783\u573e\u8bfb\u53d6\uff1a\u8bfb\u53d6\u89c2\u5bdf\u5230\u7684\u72b6\u6001\u4e0d\u53ef\u80fd\u662f\u4efb\u4f55\u5199\u5165\u7684\u4ea7\u7269\u3002\u6b64\u5916\uff0cElle \u53ef\u4ee5\u6839\u636e\u8fdb\u7a0b\uff08\u4f8b\u5982\u4f1a\u8bdd\uff09\u6216\u5b9e\u65f6\u987a\u5e8f\u63a8\u65ad\u4e8b\u52a1\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f7f\u5176\u80fd\u591f\u533a\u5206\u4e25\u683c\u7684\u53ef\u4e32\u884c\u5316\u548c\u53ef\u4e32\u884c\u5316\u3002\u5bf9\u4e8e\u5217\u8868\uff0cElle \u53ef\u4ee5\u57fa\u4e8e\u5355\u6b21\u8bfb\u53d6\u63a8\u65ad\u51fa\u952e\u7684 Adya \u7248\u672c\u987a\u5e8f\u7684\u5b8c\u6574\u524d\u7f00\u3002\u5bf9\u4e8e\u5bc4\u5b58\u5668\uff0cElle \u53ef\u4ee5\u6839\u636e\u521d\u59cb\u72b6\u6001\u3001writes-follow-reads\u3001\u8fdb\u7a0b\u548c\u5b9e\u65f6\u987a\u5e8f\u63a8\u65ad\u7248\u672c\u987a\u5e8f\u3002\u5f53 Elle \u58f0\u79f0\u53ef\u89c2\u5bdf\u5386\u53f2\u4e2d\u7684\u5f02\u5e38\u65f6\uff0c\u5b83\u5177\u4f53\u610f\u5473\u7740\u5728\u4e0e\u8be5\u89c2\u5bdf\u5386\u53f2\u517c\u5bb9\u7684\u4efb\u4f55\u62bd\u8c61\u7684 Adya \u98ce\u683c\u7684\u5386\u53f2\u4e2d\uff0c\u8981\u4e48\u5b58\u5728\u76f8\u5e94\u7684\u5f02\u5e38\uff0c\u8981\u4e48\u53d1\u751f\u4e86\u66f4\u7cdf\u7684\u4e8b\u60c5\u2014\u2014\u4f8b\u5982\u4e2d\u6b62\u7684\u9605\u8bfb\u3002\u8fd9\u662f\u6d4b\u8bd5\u771f\u5b9e\u4e16\u754c\u6570\u636e\u5e93\u7684\u81ea\u7136\u7ed3\u679c\uff1b\u5982\u679c\u6570\u636e\u5e93\u4ee5\u6b63\u786e\u7684\u65b9\u5f0f\u5b58\u5728\uff0c\u5b83\u53ef\u80fd\u4f1a\u8868\u73b0\u51fa\u5b9e\u9645\u4e0a\u6ca1\u6709\u53d1\u751f\u7684\u5f02\u5e38\uff0c\u6216\u8005\u63a9\u76d6\u4e86\u786e\u5b9e\u53d1\u751f\u7684\u5f02\u5e38\u3002\u6211\u4eec\u901a\u8fc7\u80fd\u591f\u533a\u5206\u8bb8\u591a\u7c7b\u522b\u7684\u8bfb\u53d6\u5e76\u5bf9\u8bb8\u591a\u5f02\u5e38\u8fdb\u884c\u91c7\u6837\u6765\u9650\u5236\u8fd9\u4e2a\u95ee\u9898\u7684\u5f71\u54cd\u2014\u2014\u5e0c\u671b\u6700\u7ec8\u6211\u4eec\u80fd\u5e78\u8fd0\u5730\u770b\u5230\u5f02\u5e38\u7684\u201c\u771f\u5b9e\u60c5\u51b5\u201d\u3002\nElle \u4e0d\u5b8c\u6574\uff1a\u5b83\u53ef\u80fd\u65e0\u6cd5\u8bc6\u522b\u88ab\u6d4b\u7cfb\u7edf\u4e2d\u5b58\u5728\u7684\u5f02\u5e38\u3002\u8fd9\u662f\u4e24\u4e2a\u56e0\u7d20\u7684\u7ed3\u679c\uff1aElle \u68c0\u67e5\u4ece\u771f\u5b9e\u6570\u636e\u5e93\u4e2d\u89c2\u5bdf\u5230\u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u5176\u4e2d\u4ea4\u6613\u7ed3\u679c\u53ef\u80fd\u672a\u88ab\u89c2\u5bdf\u5230\uff0c\u5e76\u4e14\u65f6\u95f4\u4fe1\u606f\u53ef\u80fd\u4e0d\u50cf\u4eba\u4eec\u5e0c\u671b\u7684\u90a3\u6837\u7cbe\u786e\u3002\u53ef\u4e32\u884c\u5316\u68c0\u67e5\u662f NP \u5b8c\u5168\u7684\uff1b Elle \u6709\u610f\u5c06\u5176\u63a8\u65ad\u9650\u5236\u4e3a\u53ef\u5728\u7ebf\u6027\uff08\u6216\u5bf9\u6570\u7ebf\u6027\uff09\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u63a8\u65ad\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u8ba4\u4e3a Elle \u662f\u201c\u8db3\u591f\u5b8c\u6574\u201d\u7684\u3002\u4e0d\u786e\u5b9a\u6027\u901a\u5e38\u4ec5\u9650\u4e8e\u672a\u89c2\u5bdf\u5230\u7684\u4ea4\u6613\uff0c\u6216\u5386\u53f2\u672b\u5c3e\u7684\u4e00\u5c0f\u90e8\u5206\u4ea4\u6613\u3002\u8fd9\u4e9b\u56fe\u663e\u793a\u4e86 Elle \u7684\u6027\u80fd\u4e0e Knossos \u7ebf\u6027\u5316\u68c0\u67e5\u5668\u7684\u5bf9\u6bd4\uff0c\u9a8c\u8bc1\u4e86\u4e0d\u540c\u957f\u5ea6 (l) \u548c\u5e76\u53d1 (c) \u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u8fd9\u4e9b\u5386\u53f2\u8bb0\u5f55\u662f\u4ece\u6a21\u62df\u7684\u53ef\u5e8f\u5217\u5316\u5feb\u7167\u9694\u79bb\u7684\u5185\u5b58\u6570\u636e\u5e93\u4e2d\u8bb0\u5f55\u7684\u3002\u8d8a\u4f4e\u8d8a\u597d\u3002\u4e00\u822c\u6765\u8bf4\uff0cElle \u5728\u51e0\u79d2\u949f\u5230\u51e0\u5206\u949f\u5185\u68c0\u67e5\u73b0\u5b9e\u4e16\u754c\u7684\u5386\u53f2\uff0c\u800c\u4e0d\u662f\u51e0\u79d2\u949f\u5230\u51e0\u5343\u5e74\u3002\u5728 Knossos \u901a\u5e38\u4ec5\u9650\u4e8e\u6bcf\u4e2a\u5386\u53f2\u8bb0\u5f55\u6570\u767e\u6b21\u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0cElle \u53ef\u4ee5\u8f7b\u677e\u5904\u7406\u6570\u5341\u4e07\u6b21\u64cd\u4f5c\u3002 Knossos \u8fd0\u884c\u65f6\u968f\u7740\u5e76\u53d1\u5448\u6307\u6570\u53d8\u5316\uff1b Elle \u662f\u6709\u6548\u7684\u5e38\u91cf\u3002\u968f\u7740\u5e76\u53d1\u6027\u7684\u589e\u52a0\uff0c\u8fd0\u884c\u65f6\u4f1a\u7565\u6709\u4e0b\u964d\uff0c\u56e0\u4e3a\u66f4\u591a\u7684\u4e8b\u52a1\u4f1a\u56e0\u51b2\u7a81\u800c\u4e2d\u6b62\u3002 Knossos \u4e5f\u662f\u6e29\u548c\u7684\u8d85\u7ebf\u6027\u5386\u53f2\u957f\u5ea6\uff1b Elle\u5b9e\u9645\u4e0a\u662f\u7ebf\u6027\u7684\u3002\n\u6211\u8fd8\u6ca1\u6709\u771f\u6b63\u4f18\u5316 Elle ---\u6211\u76f8\u4fe1\u5b83\u53ef\u4ee5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u53d8\u5f97\u66f4\u5feb\u3002\u6709\u4e00\u4e9b\u5730\u65b9\uff08\u7279\u522b\u662f\u5728\u6ce8\u518c\u6d4b\u8bd5\u671f\u95f4\u4ece\u4e8b\u52a1\u56fe\u4e2d\u63a8\u65ad\u7248\u672c\u987a\u5e8f\uff09\u53ef\u80fd\u4f1a\u5f88\u75db\u82e6\uff1b\u6211\u4f1a\u8fb9\u8d70\u8fb9\u6253\u78e8\u7c97\u7cd9\u7684\u8fb9\u7f18\u3002 Elle \u7684\u7248\u6743\u4e3a 2019--2020 Jepsen, LLC \u548c Peter Alvaro\u3002 Elle \u5e93\u5728 Eclipse \u516c\u5171\u8bb8\u53ef\u8bc1 2.0 \u7248\u4e0b\u53ef\u7528\uff0c\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9 GPL-2.0 \u548c\u7c7b\u8def\u5f84\u4f8b\u5916\u3002 Elle \u7684\u7075\u611f\u6765\u81ea\u4e0e Asha Karim \u7684\u5bf9\u8bdd\uff0cKit Patella (@mkcp) \u7f16\u5199\u4e86 Elle \u68c0\u67e5\u5668\u7684\u7b2c\u4e00\u4e2a\u539f\u578b\u3002", "note_en": "Elle is a transactional consistency checker for black-box databases. Basedpurely on client observations of transactions, and given some minimalconstraints on datatypes and operations, it can tell you whether thatobservation exhibits a variety of transactional anomalies. Like a cleverlawyer, Elle looks for a sequence of events in a story which couldn&#39;t possiblyhave happened in that order, and uses that inference to prove the story can&#39;tbe consistent.\n  General: Elle works over a variety of datatypes and places only minimal, practical constraints on transaction structure.\n Efficient: Elle is ~linear in history length, and ~constant, rather than exponential, with respect to concurrency.\n Effective: Elle has found unexpected anomalies in  every  database  we&#39;ve  checked, ranging from internal consistency violations to anti-dependency cycles to dirty read to lost updates to realtime violations.\n Sound: Elle can find every (non-predicate) anomaly from Adya, Liskov, &amp; O&#39;Neil&#39;s  Generalized Isolation Level Definitions.\n Elucidative: Elle can point to a minimal set of transactions which witness a consistency violation; its conclusions are easy to understand and verify.\n This repository encompasses a  Clojure implementation of the Elleconsistency checker and its  accompanying test suite, which youcan use to check your own histories. Our paper providesdeep insight into the goals and intuition behind Elle, and a roughformalization of its soundness proof. A nowhere-near-complete formal proof sketch is written in the Isabelle/HOL proof language.\n If you want to check a database using Elle, see  https://jepsen.io; Elle comes built-in. If you want to use Elle to check your own histories without using Jepsen, you can add Elle as a dependency to any JVM project, and invoke its checker functions directly. If you&#39;re working in a non-JVM language, you can write your history to a file or stream, and call a small wrapper program to produce output.\n Elle is still under active development, and we&#39;re not 100% confident in itsinference rules yet. Jepsen recommends checking reported anomalies by hand tomake sure they&#39;re valid. If you&#39;d like to contribute, we&#39;d especially welcome your help in the  formal proof, and in  rigorously defining consistency models.\n    Imagine a database where each object (identified by keys like  :x or  :y) isa list of numbers. Transactions are made up of reads  [:r :x [1 2 3]], whichreturn the current value of the given list, and writes  [:append :y 4], whichappend a number to the end of the list.\n  We construct a history of three transactions, each of which is known tohave committed ( :type :ok). The first transaction appends 1 to  :x andobserves  :y = [1]. The second appends 2 to  :x and 1 to  :y. The thirdobserves  x, and sees its value as  [1 2].\n =&gt; ( def  h [{ :type  :ok,  :value [[ :append  :x  1] [ :r  :y [ 1]]]} { :type  :ok,  :value [[ :append  :x  2] [ :append  :y  1]]} { :type  :ok,  :value [[ :r  :x [ 1  2]]]}])h\n Now, we ask Elle to check this history, expecting it to be serializable, andhave it dump anomalies to a directory called  out/.\n =&gt; ( pprint ( a/check { :consistency-models [ :serializable],  :directory   &#34;out &#34;} h)){ :valid?  false,  :anomaly-types ( :G1c),  :anomalies { :G1c [{ :cycle [{ :type  :ok,  :value [[ :append  :x  2] [ :append  :y  1]]} { :type  :ok,  :value [[ :append  :x  1] [ :r  :y [ 1]]]} { :type  :ok,  :value [[ :append  :x  2] [ :append  :y  1]]}],  :steps ({ :type  :wr,  :key  :y,  :value  1,  :a-mop-index  1,  :b-mop-index  1} { :type  :ww,  :key  :x,  :value  1, :value&#39;  2,  :a-mop-index  0,  :b-mop-index  0}),  :type  :G1c}]},  :not #{ :read-committed},  :also-not #{ :consistent-view  :cursor-stability  :forward-consistent-view  :monotonic-atomic-view  :monotonic-snapshot-read  :monotonic-view  :repeatable-read  :serializable  :snapshot-isolation  :strict-serializable  :update-serializable}}\n Here, Elle can infer the write-read relationship between T1 and T2 on the basisof their respective reads and writes. The write-write relationship between T2and T1 is inferrable because T3 observed  x = [1,2], which constrains thepossible orders of appends. This is a G1c anomaly: cyclic information flow. The :cycle field shows the operations in that cycle, and  :steps shows thedependencies between each pair of operations in the cycle.\n On the basis of this anomaly, Elle has concluded that this history is notread-committed---this is the weakest level Elle can demonstrate is violated. Inaddition, several stronger isolation levels, such as consistent-view andupdate-serializable, are also violated by this history.\n  $ cat out/G1c.txtG1c #0Let: T1 = {:type :ok, :value [[:append :x 2] [:append :y 1]]} T2 = {:type :ok, :value [[:append :x 1] [:r :y [1]]]}Then: - T1 &lt; T2, because T2 observed T1&#39;s append of 1 to key :y. - However, T2 &lt; T1, because T1 appended 2 after T2 appended 1 to :x: a contradiction!\n   In addition to rendering a graph for each individual cycle, Elle generates aplot for each strongly-connected component of the dependency graph. This can behelpful for getting a handle on the  scope of an anomalous behavior, whereascycles show as small a set of transactions as possible. Here&#39;s a plot from amore complex history, involving realtime edges, write-write, write-read, andread-write dependencies:\n   As a user, your main entry points into Elle will be  elle.list-append/checkand  elle.rw-register/check. Both namespaces also have code for generatingsequences of transactions which you can apply to your database; see, forexample,  elle.list-append/gen.\n Elle has a broad variety of anomalies and consistency models; see elle.consistency-model for their definitions. Not every anomaly isdetectable, but we aim for completeness.\n   Elle expects its observed histories in the same format as  Jepsen. An observed history should be a list of operations in real-time order, where each operation is a map of the form:\n { :type One of  :invoke, ok,  :info,  :fail  :process A logical identifier  for a single thread of execution  :value A transaction  ; structure and semantics vary}\n Each process should perform alternating  :invoke and  :ok/ :info/ :failoperations.  :ok indicates the operation definitely committed.  :failindicates it definitely did not occur--e.g. it was aborted, was never submittedto the database, etc.  :info indicates an indeterminate state; the transactionmay or may not have taken place. After an  :info, a process may not perform another operation; the invocation remains open for the rest of the history.\n  elle.core: The heart of Elle&#39;s inference system. Computes transaction graphs and finds cycles over them. Includes general-purpose graphs for per-process and realtime orders.\n elle.rw-register: Write/Read registers. Weaker inference rules, but applicable to basically all systems. Objects are registers; writes blindly replace values.\n elle.list-append: Elle&#39;s most powerful inference rules. Objects are lists, writes append unique elements to those lists.\n  The following plot shows Elle&#39;s relationships between consistency models: anarrow  a -&gt; b implies if  a holds, then so does  b. Sources for thisstructure can be found in  elle.consistency-model.\n  This plot shows the relationships between Elle&#39;s anomalies. An arrow  a -&gt; bimplies if we observe anomaly  a in a history, then  b exists in the historyas well.\n   Elle can check for every non-predicate anomaly from Adya, Liskov, and O&#39;Neil&#39;s  Generalized Isolation Level Definitions. These include:\n  There are additional anomalies (e.g. garbage reads, dirty updates, inconsistent version orders) available for specific checkers. Not all of these are implemented fully yet---see the paper for details.\n Inconsistent Version Orders: Inference rules suggested a cyclic order of updates to a single key.\n   Garbage Reads: A read observes a state which could not have been the product of any write.\n In addition, Elle can infer transaction dependencies on the basis of process(e.g. session) or realtime order, allowing it to distinguish between, say,strict serializability and serializability.\n For lists, Elle can infer a complete prefix of the Adya version order for a keybased on a single read. For registers, Elle can infer version orders on thebasis of the initial state, writes-follow-reads, process, and real-time orders.\n When Elle claims an anomaly in an observable history, it specifically meansthat in any abstract Adya-style history which is compatible with that observedhistory, either a corresponding anomaly exists, or something worsehappened---e.g. an aborted read. This is a natural consequence of testingreal-world databases; if the database lies in  just the right way, it mightappear to exhibit anomalies which didn&#39;t actually happen, or mask anomalieswhich did. We limit the impact of this problem by being able to distinguishbetween many classes of reads, and sampling many anomalies---hoping thateventually, we get lucky and see the anomaly for what it &#34;really is&#34;.\n  Elle is not complete: it may fail to identify anomalies which were present inthe system under test. This is a consequence of two factors:\n Elle checks histories observed from real databases, where the results of transactions might go unobserved, and timing information might not be as precise as one would like.\n Serializability checking is NP-complete; Elle intentionally limits its inferences to those solvable in linear (or log-linear) time.\n In practice, we believe Elle is &#34;complete enough&#34;. Indeterminacy is generallylimited to unobserved transactions, or a small set of transactions at the veryend of the history.\n   These plots show Elle&#39;s performance vs the  Knossos linearizability checker, verifying histories of various lengths (l) and concurrencies (c), recorded from a simulated serializable snapshot isolated in-memory database. Lower is better.\n In general, Elle checks real-world histories in a matter of seconds to minutes,rather than seconds to millennia. Where Knossos is often limited to a fewhundred operations per history, Elle can handle hundreds of thousands ofoperations easily.\n Knossos runtimes diverge exponentially with concurrency; Elle is effectivelyconstant. There&#39;s a slight drop in runtime as concurrency increases, as moretransactions abort due to conflicts. Knossos is also mildly superlinear inhistory length; Elle is effectively linear.\n I haven&#39;t really optimized Elle yet---I&#39;m sure it can be made faster with time.There are some spots (especially in inferring version orders from transactiongraphs during register tests) which might be painful; I&#39;ll sand off rough edgesas I go.\n  Elle is copyright 2019--2020 Jepsen, LLC and Peter Alvaro. The Elle library is available under the Eclipse Public License, version 2.0, or, at your option, GPL-2.0 with the classpath exception.\n  Elle was inspired by conversations with Asha Karim, and Kit Patella (@mkcp) wrote the first prototype of the Elle checker.", "posttime": "2021-08-10 06:46:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6570\u636e\u5e93,database,\u9ed1\u76d2,transactional,elle", "title": "Elle\uff1a\u9ed1\u76d2\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u4e00\u81f4\u6027\u68c0\u67e5\u5668", "title_en": "Elle: A transactional consistency checker for black-box databases", "transed": 1, "url": "https://github.com/jepsen-io/elle", "via": "", "real_tags": ["\u6570\u636e\u5e93", "database", "\u9ed1\u76d2", "elle"]}]