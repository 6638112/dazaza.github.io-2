[{"category": "", "categoryclass": "", "imagename": "f6039ec9b118d35171f948a6eacb6319.png", "infoid": 1069424, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ee5\u4e0b\u5de5\u5177\u53ef\u8ba9\u60a8\u68c0\u67e5\u6d6e\u70b9\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u6d41\u7a0b\uff0c\u67e5\u770b\u820d\u5165\u53d1\u751f\u7684\u4f4d\u7f6e\u3001\u89e6\u53d1\u5f02\u5e38\u7684\u65f6\u95f4\u3001\u53ef\u80fd\u4e22\u5931\u7cbe\u5ea6\u7684\u65f6\u95f4\u3001\u7279\u6b8a\u503c\u4f20\u64ad\u7684\u65f6\u95f4\u3001\u9519\u8bef\u7d2f\u79ef\u7684\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u4ee4\u4eba\u5934\u75bc\u7684\u6d6e\u70b9\u95ee\u9898\u3002 [fpinspect]# ./fpinspect &quot;sqrt(45.0*e+phi)/pi&quot;Exception: 0 (1 roundings) INEXACT (45.000000 * e) Trace (1 operation) MULException: 0 (1 roundings) INEXACT phi Trace (1 operation) ) MULException: 0 (2 roundings) INEXACT ((45.000000 * e) + phi)Exception: 1 (2 roundings) INEXACT ((45.000000 * e) + phi) Trace (2 operation) MUL ADDException: 0 (3 roundings) INEXACT sqrt (((45.000000 * e) + phi))\u4f8b\u5916\uff1a1\uff083 \u820d\u5165\uff09\u4e0d\u7cbe\u786e\u7684 sqrt(((45.000000 * e) + phi))\u4f8b\u5916\uff1a2\uff083 \u820d\u5165\uff09\u4e0d\u7cbe\u786e\u7684 sqrt(((45.000000 * e) + phi) ) \u8ddf\u8e2a\uff083 \u6b21\u64cd\u4f5c\uff09MUL ADD ADDException\uff1a0\uff083 \u6b21\u820d\u5165\uff09\u4e0d\u6b63\u786e\u7684 piException\uff1a1\uff083 \u6b21\u820d\u5165\uff09\u4e0d\u6b63\u786e\u7684 piException\uff1a2\uff083 \u6b21\u820d\u5165\uff09\u4e0d\u6b63\u786e\u7684 pi \u8ddf\u8e2a\uff083 \u6b21\u64cd\u4f5c\uff09MUL ADD ADDException\uff1a0\uff084 \u6b21\u820d\u5165\uff09\u4e0d\u6b63\u786e\uff08sqrt\uff09 (((45.000000 * e) + phi)) / pi)\u4f8b\u5916\uff1a1\uff084 \u820d\u5165\uff09\u4e0d\u51c6\u786e\uff08sqrt\uff08\uff08\uff0845.000000 * e\uff09+ phi\uff09\uff09/pi\uff09\u4f8b\u5916\uff1a2\uff084 \u820d\u5165\uff09\u4e0d\u51c6\u786e\uff08sqrt\uff08\uff08\uff08\uff09 (45.000000 * e) + phi))) / pi)\u4f8b\u5916\uff1a3 (4 \u820d\u5165) INEXACT (sqrt(((45.000000 * e) + phi)) / pi) Trace (4 operation) ns) MUL ADD ADD DIV(sqrt(((45.000000 * e) + phi))) / pi) ans: 3.54370117187500 err: 0.00000126456894 \u5982\u60a8\u6240\u89c1\uff0c\u8868\u8fbe\u5f0f sqrt(45.0*e+ pi) \u4ea7\u751f\u4e86\u5927\u91cf\u7684\u8f93\u51fa,\u6bcf\u4e2a\u7a7a\u884c\u5206\u9694\u7684\u533a\u57df\u90fd\u662f\u4e00\u4e2a\u89e6\u53d1\u5f02\u5e38\u7684\u5b50\u8868\u8fbe\u5f0f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a 45 * e \u662f\u4e00\u4e2a\u4e0d\u7cbe\u786e\u7684\u503c\uff0c\u9996\u5148\u5448\u73b0\u4e0d\u7cbe\u786e\u7684\u5f02\u5e38\u3002\u5728\u8fd9\u91cc\u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u6d89\u53ca 1 \u4e2a\u64cd\u4f5c\uff0ctotal\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u64cd\u4f5c\u53ea\u662f\u4e00\u4e2a MUL\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230\u7ed3\u679c\u8868\u8fbe\u5f0f\uff0c\u56e0\u4e3a\u5b83\u4e0d\u7cbe\u786e\uff0c\u5bfc\u81f4\u4e86\u4e00\u4e2a\u820d\u5165\u3002\u6cbf\u7740\u5f02\u5e38\u5217\u8868\u5411\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5f02\u5e38\u4f20\u64ad\u5230 MUL \u4e2d\u7684 phi\uff08\u8fd9\u4e5f\u662f\u4e00\u4e2a\u4e0d\u7cbe\u786e\u7684\u503c\uff09\uff0c\u5e76\u7ee7\u7eed\uff0c\u6bcf\u4e2a\u65b0\u7684\u4e0d\u7cbe\u786e\u5b50\u8868\u8fbe\u5f0f\u5bfc\u81f4\u591a\u6b21\u820d\u5165\u3002\u7531\u4e8e\u50cf sqrt \u8fd9\u6837\u7684\u5185\u6838\u672c\u8eab\u53ef\u80fd\u4f1a\u4f7f\u7528\u50cf add \u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u8fd8\u770b\u5230\u6700\u540e\u4e00\u7ec4\u5f02\u5e38\u5728\u5b83\u7684\u8ddf\u8e2a\u4e2d\u5305\u542b\u4e00\u4e2a\u989d\u5916\u7684 ADD\u3002\u8868\u8fbe\u5f0f\u7684\u6700\u7ec8\u7ed3\u679c\u5728 ans: \u4e2d\u7ed9\u51fa\uff0c\u4e0b\u9762\u4f60\u4f1a\u53d1\u73b0\u8ba1\u7b97\u8be5\u8868\u8fbe\u5f0f\u7684\u7d2f\u79ef\u8bef\u5dee err:\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u51fd\u6570\u7cbe\u786e\u5230\u4e94\u4e2a\u5c3e\u6570\u4f4d\uff0c\u603b\u5171\u4e03\u4f4d\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6709~0.71 ULP \u9519\u8bef\u3002\u8be5\u7a0b\u5e8f\u5b8c\u5168\u5728\u8f6f\u4ef6\u4e2d\u5b9e\u73b0 IEEE-754 \u6d6e\u70b9\uff0c\u6a21\u62df\u6240\u6709\u820d\u5165\u6a21\u5f0f\u3001\u5f02\u5e38\u548c\u5fae\u5c0f\u68c0\u6d4b\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5728\u8bc4\u4f30\u8868\u8fbe\u5f0f\u65f6\u8fdb\u884c\u914d\u7f6e\u3002\u9664\u8d85\u8d8a\u51fd\u6570\u5916\uff0c\u6240\u6709\u6d6e\u70b9\u8ba1\u7b97\u4e5f\u7cbe\u786e\u5230 &lt;= 1 ULP \u7684\u8bef\u5dee\u3002\u76ee\u524d\u652f\u6301 32 \u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9 float32.{h,c} \u548c 64 \u4f4d\u53cc\u7cbe\u5ea6\u6d6e\u70b9 float64.{h,c}\uff0c\u56e0\u4e3a 32 \u4f4d\u5355\u7cbe\u5ea6\u9700\u8981\u53cc\u7cbe\u5ea6\u7cbe\u5ea6\u5185\u6838 kernel32.{h,c} \u4ee5\u4ea7\u751f\u6b63\u786e\u820d\u5165\u548c\u622a\u65ad\u7684\u7ed3\u679c&lt;= 1 ULP \u7684\u9519\u8bef\u3002\n\u76ee\u524d\u6ca1\u6709 64 \u4f4d\u5185\u6838\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u5728\u8f6f\u4ef6\u4e2d\u5b9e\u73b0 80 \u4f4d\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6216 128 \u4f4d\u56db\u7cbe\u5ea6\u6d6e\u70b9\uff0c\u4ee5\u5177\u6709\u4ea7\u751f\u6b63\u786e\u820d\u5165\u548c\u622a\u65ad\u7ed3\u679c\u6240\u9700\u7684\u7cbe\u5ea6&lt; = 1 ULP \u9519\u8bef\u3002", "note_en": "The following tool lets you inspect the computational flow of a floating pointexpression, seeing where rounding occurs, when exceptions are triggered,when precision may be lost, when special values propagate, when erroraccumulates, and other floating point headaches.\n  [fpinspect]# ./fpinspect &#34;sqrt(45.0*e+phi)/pi&#34;Exception: 0 (1 roundings) INEXACT (45.000000 * e) Trace (1 operations) MULException: 0 (1 roundings) INEXACT phi Trace (1 operations) MULException: 0 (2 roundings) INEXACT ((45.000000 * e) + phi)Exception: 1 (2 roundings) INEXACT ((45.000000 * e) + phi) Trace (2 operations) MUL ADDException: 0 (3 roundings) INEXACT sqrt(((45.000000 * e) + phi))Exception: 1 (3 roundings) INEXACT sqrt(((45.000000 * e) + phi))Exception: 2 (3 roundings) INEXACT sqrt(((45.000000 * e) + phi)) Trace (3 operations) MUL ADD ADDException: 0 (3 roundings) INEXACT piException: 1 (3 roundings) INEXACT piException: 2 (3 roundings) INEXACT pi Trace (3 operations) MUL ADD ADDException: 0 (4 roundings) INEXACT (sqrt(((45.000000 * e) + phi)) / pi)Exception: 1 (4 roundings) INEXACT (sqrt(((45.000000 * e) + phi)) / pi)Exception: 2 (4 roundings) INEXACT (sqrt(((45.000000 * e) + phi)) / pi)Exception: 3 (4 roundings) INEXACT (sqrt(((45.000000 * e) + phi)) / pi) Trace (4 operations) MUL ADD ADD DIV(sqrt(((45.000000 * e) + phi)) / pi) ans: 3.54370117187500 err: 0.00000126456894\n As you can see, the expression  sqrt(45.0*e+phi)/pi produces a lot of output,each empty-line-separated region is a subexpression which triggered an exception,in this case because  45 * e is an inexact value, the inexact exception ispresented first. Here you can see that such an expression involved  1 operations,total and in this case the operation is just a  MUL. We can also see that theresulting expression, because it&#39;s inexact, incurred one rounding.\n Following down the exception list, we can see that the exception propagatedto  phi in a  MUL (which is also an inexact value), and continued, with eachnew inexact subexpression resulting in several roundings. Since kernels like sqrt might themselves use operations like  add, we also see the final groupof exceptions contains an additional  ADD in it&#39;s trace.\n The final result of the expression is given in  ans: and below that you willfind the accumulative error  err: of evaluating that expression, in this casethis function is exact to five mantissa digits of precision, out of a total ofseven, which means this expression has ~0.71 ULP of error.\n         This program implements IEEE-754 floating point completely in software, emulatingall rounding modes, exceptions, and tininess detection methods which can beconfigured when evaluating an expression. With exception to transcendentalfunctions, all floating point computation is also accurate to &lt;= 1 ULP of error.\n Currently there is support for 32-bit single-precision floating-point float32.{h,c} and 64-bit double-precision floating-point  float64.{h,c}, asdouble-precision is necessary for 32-bit single-precision kernels kernel32.{h,c} to produce correctly rounded and truncated resultsto &lt;= 1 ULP of error.\n   There are currently no 64-bit kernels, as that would require either 80-bitextended-precision floating-point, or 128-bit quadruple-precision floating-pointto be implemented in software to have the precision necessary to producecorrectly rounded and truncated results to &lt;= 1 ULP of error.", "posttime": "2021-07-24 15:58:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8868\u8fbe\u5f0f,point", "title": "\u6d6e\u70b9\u8868\u8fbe\u5f0f\u68c0\u67e5\u5668", "title_en": "Floating Point Expression Inspector", "transed": 1, "url": "https://github.com/graphitemaster/fpinspect", "via": "", "real_tags": ["\u8868\u8fbe\u5f0f", "point"]}, {"category": "", "categoryclass": "", "imagename": "6bd4a5237d0e7f544b430adff84de44e.png", "infoid": 1069423, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u81f4\u7684\u547d\u540d\u7b56\u7565\u5f88\u91cd\u8981\uff0c\u5e94\u8be5\u662f anycloud \u5de5\u4f5c\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u9057\u61be\u7684\u662f\uff0c\u5b83\u7ecf\u5e38\u88ab\u5ffd\u89c6\u3002\u5f53\u60a8\u62e5\u6709\u51e0\u53f0\u201c\u5ba0\u7269\u201d\u670d\u52a1\u5668\u65f6\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u79cd\u5962\u4f88\uff0c\u4f46\u968f\u7740\u6258\u7ba1\u8d44\u6e90\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5b83\u5f88\u5feb\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002\u8fd9\u662f\u5b9e\u73b0\u57fa\u672c\u4e00\u81f4\u6027\u6c34\u5e73\u7684\u7b2c\u4e00\u6b65\uff0c\u4e5f\u662f\u5efa\u7acb\u4efb\u4f55\u7c7b\u578b\u7684\u4e91\u6cbb\u7406\u7684\u5148\u51b3\u6761\u4ef6\u3002\u540e\u8005\u4f1a\u5f88\u5feb\u544a\u8bc9\u6211\u4eec\u6211\u4eec\u6b63\u5728\u5904\u7406\u4ec0\u4e48\u7c7b\u578b\u7684\u8d44\u6e90\uff0c\u5b83\u4eec\u5c5e\u4e8e\u54ea\u4e2a\u9879\u76ee\u548c\u73af\u5883\uff0c\u5b83\u4eec\u4f4d\u4e8e\u4f55\u5904\u4ee5\u53ca\u5b83\u4eec\u5728\u529f\u80fd\u4e0a\u662f\u5426\u5f7c\u6b64\u7b49\u6548\u3002\u51cf\u5c11\u7406\u89e3\u4ee3\u7801\u7684\u52aa\u529b\uff0c\u5e76\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u4e13\u6ce8\u4e8e\u66f4\u91cd\u8981\u7684\u65b9\u9762\uff0c\u800c\u4e0d\u662f\u4e89\u8bba\u547d\u540d\u6807\u51c6\u3002\u6211\u4e0d\u592a\u786e\u5b9a\u6211\u7b2c\u4e00\u6b21\u770b\u5230\u8fd9\u53e5\u8bdd\u662f\u4ec0\u4e48\u65f6\u5019\uff0c\u4f46\u5b83\u540e\u6765\u6210\u4e86\u6211\u7684\u6700\u7231\u4e4b\u4e00\u3002 Martin Fowler \u5c06\u5176\u5f52\u529f\u4e8e PhilKarlton\u3002\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u4e91\u7ea7\u8d44\u6e90\u7684\u547d\u540d\u7ea6\u5b9a\u5e94\u8be5\u5982\u4f55\u3002\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86 GCP\uff0c\u4f46\u6982\u5ff5\u548c\u7b56\u7565\u662f\u901a\u7528\u7684\uff0c\u53ef\u4ee5\u8f7b\u677e\u9002\u5e94\u5176\u4ed6\u4e91\u63d0\u4f9b\u5546\u3002\u5728\u8bbe\u8ba1\u547d\u540d\u7ea6\u5b9a\u65f6\uff0c\u60a8\u5e94\u8be5\u8003\u8651\u4e91\u63d0\u4f9b\u5546\u65bd\u52a0\u7684\u9650\u5236\u3002\u6bcf\u4e2a\u8d44\u6e90\u90fd\u5e26\u6709\u4e00\u7ec4\u547d\u540d\u9650\u5236\u3002\u7ecf\u9a8c\u6cd5\u5219\u662f\u4fdd\u6301\u7b80\u77ed\u548c\u7b80\u5355\uff08\u4ec5\u5bf9\u5404\u4e2a\u7ec4\u4ef6\u4f7f\u7528\u5b57\u6bcd\u548c\u6570\u5b57\uff0c\u4fdd\u7559 - \u4f5c\u4e3a\u5206\u9694\u7b26\uff09\u3002 GCP \u5c06\u5927\u591a\u6570\u8d44\u6e90\u7684\u540d\u79f0\u957f\u5ea6\u9650\u5236\u4e3a 62 \u6216 63 \u4e2a\u5b57\u7b26\uff0c\u9879\u76ee ID \u9650\u5236\u4e3a 30\u3002\u8d44\u6e90\u5fc5\u987b\u5177\u6709\u552f\u4e00\u7684\u540d\u79f0\uff0c\u65e0\u8bba\u662f\u5728\u5168\u7403\u8303\u56f4\u5185\u8fd8\u662f\u5728\u7ed9\u5b9a\u8303\u56f4\u5185\u3002\u4e00\u4e9b\u8d44\u6e90\u6709\u989d\u5916\u7684\u9650\u5236\u9700\u8981\u8003\u8651\uff08\u4f8b\u5982 GCP \u9879\u76ee\u4e0d\u80fd\u7acb\u5373\u5220\u9664\uff09\u3002\n\u9996\u5148\u6211\u4eec\u5efa\u7acb\u6240\u6709\u76f4\u63a5\u7ba1\u7406\u7684\u8d44\u6e90\u90fd\u5e94\u8be5\u9075\u5faa\u7684\u547d\u540d\u6a21\u5f0f\u2014\u2014\u5168\u5c40\u547d\u540d\u6a21\u5f0f\u3002\u8fd9\u662f\u7528\u4e8e\u6240\u6709\u8d44\u6e90\u7684\u56fa\u5b9a\u503c\u524d\u7f00\u3002\u901a\u5e38\u662f\u7ec4\u7ec7\u540d\u79f0\u7684\u67d0\u79cd\u5f62\u5f0f\u7684\u7f29\u5199\u3002\u8fd9\u4e0e GCP \u9879\u76ee\u4e0d\u540c\u3002\u901a\u5e38\u4e00\u4e2a\u9879\u76ee\u5c06\u6709\u591a\u4e2a GCP \u9879\u76ee\u3002\u6211\u4eec\u4f7f\u7528\u6241\u5e73\u5c42\u6b21\u7ed3\u6784\uff0c\u9879\u76ee\u4f5c\u4e3a\u5c06\u8d44\u6e90\u7ec4\u7ec7\u6210\u7ec4\u7684\u4e3b\u8981\u673a\u5236\u3002\u6211\u559c\u6b22\u4f7f\u7528\u6241\u5e73\u5c42\u6b21\u7ed3\u6784\uff0c\u56e0\u4e3a\u5b83\u975e\u5e38\u901a\u7528\u4e14\u7075\u6d3b\uff0c\u51e0\u4e4e\u53ef\u4ee5\u9002\u5e94\u4efb\u4f55\u7ec4\u7ec7\u7ed3\u6784\u3002\u60a8\u53ef\u80fd\u4f1a\u8003\u8651\u7528\u67d0\u79cd\u5176\u4ed6\u5f62\u5f0f\u7684\u56e2\u961f\uff08\u4f8b\u5982\u56e2\u961f\u3001\u4ea7\u54c1\uff09\u6765\u4ee3\u66ff\u5b83\uff0c\u4f46\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u594f\u6548\u3002\u8d44\u6e90\u5c5e\u4e8e\u90e8\u7f72\u73af\u5883\u3002\u5efa\u7acb\u4e00\u4e2a\u5728\u6574\u4e2a\u7ec4\u7ec7\u4e2d\u4f7f\u7528\u7684\u901a\u7528\u540d\u79f0\u96c6\u662f\u6709\u76ca\u7684\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6211\u5c1d\u8bd5\u4e86\u5404\u79cd\u673a\u5236\u6765\u6784\u5efa\u8d44\u6e90\u7684\u7f29\u5199\u2014\u2014\u5982\u679c\u540d\u79f0\u57fa\u4e8e API \u8d44\u6e90\u540d\u79f0\uff0c\u5219\u53ef\u4ee5\u83b7\u5f97\u6700\u4e00\u81f4\u7684\u7ed3\u679c\u3002\u7ed9\u5b9a\u8d44\u6e90\u7c7b\u578b\u7684\u7f29\u5199\u3002\u5728 GCP \u4e2d\uff0c\u6211\u503e\u5411\u4e8e\u4f7f\u7528\u4e09\u4e2a\u5b57\u6bcd\u3002\u5bf9\u4e8e\u66f4\u5927\u548c\u66f4\u9891\u7e41\u4f7f\u7528\u7684 API\uff08\u4f8b\u5982 Compute\u3001Kubernetes\uff09\uff0cAPI \u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u4ee3\u8868\uff0c\u8d44\u6e90\u7c7b\u578b\u7684\u5176\u4f59\u4e24\u4e2a\u5b57\u6bcd\u4ee3\u8868\u3002\u5bf9\u4e8e\u8d44\u6e90\u8f83\u5c11\u7684 API\uff0c\u60c5\u51b5\u6b63\u597d\u76f8\u53cd\u3002\u6211\u77e5\u9053\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5b8c\u5168\u786e\u5b9a\u7684\u89c4\u5219\uff0c\u4f46\u8fd9\u5c06\u59cb\u7ec8\u662f\u5bf9\u5176\u7b80\u77ed\u548c\u53ef\u7528\u7684\u59a5\u534f\u3002\u5f53\u6709\u53ef\u80fd\u5728\u4e0d\u540c\u4f4d\u7f6e\u521b\u5efa\u7ed9\u5b9a\u8d44\u6e90\u65f6\u9700\u8981\u4f4d\u7f6e\u3002\n\u533a\u57df - \u4e94\u4e2a\u5b57\u6bcd\u7684\u9996\u5b57\u6bcd\u7f29\u7565\u8bcd\uff08\u4e24\u4e2a\u5b57\u6bcd\u4ee3\u8868\u5927\u9646\uff0c\u4e24\u4e2a\u4ee3\u8868\u57fa\u672c\u65b9\u5411\uff0c1 \u4f4d\u6570\u5b57\uff09 Multi-Dual-regional - \u9075\u5faa GCP \u81ea\u5df1\u7684\u547d\u540d\uff08\u4e24\u4e2a\u5b57\u6bcd\u4ee3\u8868\u591a\uff0c\u56db\u4e2a\u5b57\u6bcd\u4ee3\u8868\u53cc\u533a\u57df\uff09 \u7528\u4e8e\u533a\u5206\u8d44\u6e90\u7684\u63cf\u8ff0\u540c\u7c7b\u578b\u4f46\u4e0d\u540c\u7684\u89d2\u8272\u3002\u4f8b\u5982\uff0c\u4e00\u7ec4\u5177\u6709\u4e0d\u540c\u7528\u9014\u7684\u670d\u52a1\u5668 - \u524d\u7aef\u548c\u540e\u7aef\u3002\u8fd9\u4e0d\u5e94\u8be5\u7528\u4e8e\u533a\u5206\u540c\u4e00\u7528\u9014\u8d44\u6e90\u7684\u591a\u4e2a\u5b9e\u4f8b\uff0c\u800c\u662f\u4f7f\u7528\u540e\u7f00\u3002\u5f53\u6ca1\u6709\u66f4\u597d\u3001\u66f4\u5177\u4f53\u7684\u672f\u8bed\u53ef\u7528\u65f6\uff0c\u5c31\u7528\u4e8e\u63cf\u8ff0\u7684\u901a\u7528\u5173\u952e\u5b57\u8fbe\u6210\u4e00\u81f4\u4e5f\u662f\u6709\u76ca\u7684\u3002\u8fd9\u907f\u514d\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u540d\u79f0\uff0c\u5982 main\u3001core\u3001common\u3001this \u548c similar\u3002\u901a\u5e38\u597d\u7684\u7b56\u7565\u662f\u4f7f\u7528\u62c9\u4e01\u5e8f\u6570\u5e8f\u5217\uff0c\u5373\u4e00\u7ea7\u3001\u4e8c\u7ea7\u3001\u4e09\u7ea7\u7b49\u3002\u53ef\u8bfb\u6027\u597d\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 Terraform random_idresource \u8f7b\u677e\u751f\u6210\u3002\u5f53\u6709\u591a\u4e2a\u5b9e\u4f8b\u65f6\uff0c\u6216\u8005\u5f53\u9700\u8981\u552f\u4e00\u6027\u65f6\uff0c\u4f7f\u7528\u540e\u7f00\u5c06\u8d44\u6e90\u4e0e\u5176\u5bf9\u7b49\u8d44\u6e90\u533a\u5206\u5f00\u6765\u3002\u8ba9\u6211\u4eec\u56de\u987e\u51e0\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u8bf4\u660e\u5982\u4f55\u6839\u636e\u4e0a\u8ff0\u65e2\u5b9a\u6a21\u5f0f\u547d\u540d\u8d44\u6e90\u3002\u51fa\u4e8e\u6b64\u547d\u540d\u7ea6\u5b9a\u7684\u76ee\u7684\uff0c\u9879\u76ee\uff08\u548c\u6587\u4ef6\u5939\uff09\u88ab\u89c6\u4e3a\u8d44\u6e90\u5bb9\u5668\uff0c\u56e0\u6b64\u7701\u7565\u540d\u79f0\u7684\u8d44\u6e90\u90e8\u5206\u3002\n\u60a8\u53ef\u4ee5\u6ce8\u610f\u5230 GCP \u9ed8\u8ba4\u4e3a\u901a\u8fc7\u63a7\u5236\u53f0\u521b\u5efa\u7684\u9879\u76ee\u6267\u884c\u6b64\u64cd\u4f5c - \u4f8b\u5982 Rapid-depot-253717\u3002GCP \u4e2d\u7684\u9879\u76ee ID \u5fc5\u987b\u5168\u5c40\u552f\u4e00\u4e14\u4e0d\u80fd\u7acb\u5373\u5220\u9664\u3002\u8fd9\u5bf9\u4e8e\u81ea\u52a8\u5316\u6765\u8bf4\u662f\u4e0d\u5e78\u7684\uff0c\u56e0\u4e3a\u60a8\u65e0\u6cd5\u4f7f\u7528\u5220\u9664\u540e\u7684\u540c\u540d\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5305\u542b\u72ec\u7279\u7684\u968f\u673a\u540e\u7f00\u90e8\u5206\u7684\u539f\u56e0\u3002\u6587\u4ef6\u5939\uff1a\u6211\u4eec\u4e0d\u4f7f\u7528 GCP \u6587\u4ef6\u5939\u6765\u7ec4\u7ec7\u9879\u76ee\u3002\u6211\u666e\u904d\u8ba4\u4e3a\uff0c\u4fdd\u6301\u7b80\u5355\u548c\u6241\u5e73\u5f80\u5f80\u662f\u6709\u76ca\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u60f3\u8fdb\u4e00\u6b65\u6784\u5efa\u60a8\u7684\u8d44\u6e90\uff0c\u8bf7\u8003\u8651\u5728\u60a8\u7684\u547d\u540d\u6a21\u5f0f\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982 [org_group]\u3002 Folderscan \u7136\u540e\u9075\u5faa [prefix]-[org-group] \u6a21\u5f0f\u3002GCP \u8fd8\u5141\u8bb8\u914d\u7f6e\u9879\u76ee\u540d\u79f0\u3002\u6211\u5efa\u8bae\u5c06\u5176\u8bbe\u7f6e\u4e3a\u4e0e\u9879\u76ee ID \u76f8\u540c\u7684\u503c\u5e76\u5fd8\u8bb0\u5b83\u3002\u51fa\u4e8e\u6240\u6709\u5b9e\u9645\u76ee\u7684\uff0c\u60a8\u5c06\u901a\u8fc7 ID \u5f15\u7528\u9879\u76ee\u3002\u603b\u4f1a\u6709\u4e00\u4e9b\u4f8b\u5916\uff0c\u5373\u65e0\u6cd5\u9075\u5faa\u5168\u5c40\u547d\u540d\u6a21\u5f0f\uff08\u4f8b\u5982\u8d44\u6e90\u4e0d\u5141\u8bb8 - \u5728\u540d\u79f0\u4e2d\uff09\u6216\u8005\u5b83\u6839\u672c\u6ca1\u6709\u610f\u4e49\u3002\u5982\u679c\u53ef\u80fd\uff0c\u5e94\u4f7f\u7528\u5b8c\u6574\u6a21\u5f0f\u7684\u5b50\u96c6\uff0c\u5e76\u8bb0\u5f55\u6240\u6709\u5f02\u5e38\u3002\u670d\u52a1\u8d26\u53f7\u53ea\u9075\u5faa[\u8d44\u6e90]-[\u63cf\u8ff0]\u6a21\u5f0f\uff0c\u56e0\u4e3a\u9879\u76ee\u5df2\u7ecf\u5305\u542b\u5728@\u4e4b\u540e\u7684\u90e8\u5206\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u91cd\u590d\u8fd9\u4e00\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8bdd\u9898\uff0c\u4e5f\u8bb8\u662f\u53e6\u4e00\u7bc7\u6587\u7ae0\uff0c\u4f46\u4f60\u5e94\u8be5\u5efa\u7acb\u547d\u540d\u7ea6\u5b9a\u7ec4\u548c\u5982\u4f55\u5206\u914d\u6743\u9650\u7684\u7b56\u7565\u3002\u6839\u636e\u7ecf\u9a8c\uff0c\u6c38\u8fdc\u4e0d\u8981\u5c06\u6743\u9650\u76f4\u63a5\u5206\u914d\u7ed9\u4e2a\u4eba\uff0c\u800c\u5e94\u4ec5\u5206\u914d\u7ed9\u7ec4\u3002\u60a8\u8fd8\u5e94\u8be5\u4ecb\u7ecd\u6807\u7b7e\uff08\u6216\u6807\u7b7e\uff09\u7684\u4f7f\u7528\u3002\u4e00\u4e2a\u597d\u7684\u65b9\u6cd5\u662f\u6dfb\u52a0\u4fe1\u606f\u4ee5\u8fdb\u4e00\u6b65\u5bf9\u60a8\u7684\u8d44\u6e90\u8fdb\u884c\u5206\u7c7b\uff0c\u4f8b\u5982\u6210\u672c\u4e2d\u5fc3\u3002\u5f53\u60a8\u65e0\u6cd5\u76f4\u63a5\u7ba1\u7406\u8d44\u6e90\u540d\u79f0\u65f6\uff0c\u6807\u7b7e\u4e5f\u5f88\u6709\u7528\uff0c\u4f46\u60a8\u53ef\u4ee5\u7ba1\u7406\u4e00\u7ec4\u4f20\u64ad\u5230\u5b50\u8d44\u6e90\uff08\u4f8b\u5982 GKE \u96c6\u7fa4\u6807\u7b7e\u6216\u5b9e\u4f8b\u7ec4\uff09\u7684\u6807\u7b7e\u3002\u4e0d\u8981\u590d\u5236\u547d\u540d\u7ea6\u5b9a\u4e2d\u5df2\u7ecf\u5305\u542b\u7684\u4fe1\u606f\uff08\u4f8b\u5982\u9879\u76ee\uff09\u6216\u4f7f\u7528\u53ef\u4ece\u5bf9\u8c61\u672c\u8eab\u83b7\u53d6\u7684\u4fe1\u606f\uff08\u4f8b\u5982\u521b\u5efa\u65f6\u95f4\u6233\uff09\u521b\u5efa\u5927\u91cf\u552f\u4e00\u6807\u7b7e\u3002\n\u8de8\u57fa\u7840\u67b6\u6784\u7684 DNS \u547d\u540d\u7ea6\u5b9a\u518d\u6b21\u6210\u4e3a\u4e00\u4e2a\u66f4\u5927\u7684\u4e3b\u9898\uff0c\u4f46\u60a8\u7edd\u5bf9\u5e94\u8be5\u62e5\u6709\u4e00\u4e2a\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u7b56\u7565\u53ef\u4ee5\u662f\u4ee5 [project]-[env].&lt;common_dns_domain&gt; \u5f62\u5f0f\u4e3a\u6bcf\u4e2a GCP \u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u5b50\u57df\u3002\u4e3a\u7ed9\u5b9a\u8d44\u6e90\u521b\u5efa\u7684 DNS \u8bb0\u5f55\u5e94\u9075\u5faa GlobalNaming \u6a21\u5f0f\u7684 [resource]-[resource_location]-[description]-[suffix] \u90e8\u5206\uff0c\u56e0\u6b64\u955c\u50cf\u8d44\u6e90\u540d\u79f0\u3002\u5f53\u60a8\u5f00\u59cb\u4f7f\u7528\u4e91\u6216\u65b0\u9879\u76ee\u65f6\uff0c\u60a8\u5e94\u8be5\u9996\u5148\u5efa\u7acb\u4e00\u81f4\u7684\u547d\u540d\u7ea6\u5b9a\u3002\u8fd9\u662f\u4e00\u5f00\u59cb\u5f88\u5bb9\u6613\u505a\u7684\u4e8b\u60c5\u4e4b\u4e00\uff0c\u4f46\u540e\u6765\u5f88\u96be\u89e3\u51b3\u3002\u60a8\u6bcf\u5929\u90fd\u4f1a\u4ece\u4e2d\u53d7\u76ca\u3002\u547d\u540d\u7ea6\u5b9a\u6210\u529f\u7684\u5173\u952e\u662f\u5c3d\u65e9\u5efa\u7acb\u547d\u540d\u7ea6\u5b9a\uff0c\u5e76\u5728\u6574\u4e2a\u57fa\u7840\u67b6\u6784\u4e2d\u65e0\u60c5\u5730\u9075\u5faa\u547d\u540d\u7ea6\u5b9a\u3002\u81ea\u52a8\u5316\u6709\u5f88\u5927\u5e2e\u52a9\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6ca1\u6709\u7075\u4e39\u5999\u836f\uff0c\u5b9e\u9645\u7684\u547d\u540d\u7ea6\u5b9a\u5e94\u8be5\u59cb\u7ec8\u9002\u5408\u60a8\u7684\u73af\u5883\u3002\u91cd\u70b9\u662f\u6709\u4e00\u4e2a\uff01\u6211\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u80fd\u7ed9\u4f60\u4e00\u4e2a\u826f\u597d\u7684\u5f00\u7aef\u3002\u611f\u8c22\u60a8\u4e00\u8def\u8d70\u5230\u8fd9\u91cc\u3002\u5982\u679c\u4f60\u73b0\u5728\u8ba4\u4e3a\u6211\u6709\u4e25\u91cd\u7684\u5f3a\u8feb\u75c7\uff08\u6211\u53ef\u80fd\u4f1a\uff09\uff0c\u6211\u4e0d\u4f1a\u8d23\u602a\u4f60\uff0c\u4f46\u662f\u5c1d\u8bd5\u5728\u4e00\u4e2a\u6709 120 \u4e2a Kubernetes \u96c6\u7fa4\u7684\u73af\u5883\u4e2d\u5de5\u4f5c\uff0c\u5e76\u4e14\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u53ea\u662f\u96c6\u7fa4\uff01\u795d\u4f60\u7684\u4e91\u4e4b\u65c5\u597d\u8fd0\uff0c\u6211\u5f88\u60f3\u542c\u542c\u4f60\u547d\u540d\u4e8b\u7269\u7684\u7ecf\u9a8c\u3002\u4f60\u53ef\u4ee5\u5728@stepanstipl \u4e0a\u5173\u6ce8\u6211\u3002", "note_en": "Consistent naming strategy is important and should be an essential part of anycloud effort. Sadly it\u2019s often overlooked. It might seem like a luxury when yourun a few \u201cpet\u201d servers, but it quickly becomes critical as the number ofmanaged resources grows. It is the first step in achieving even basic levelsof consistency and prerequisite to establishing any sort of cloud governance.\n     The latter will quickly tell us what type of resources are we dealing with, towhich project and environment they belong, where are they located and whetherthey\u2019re functionally equivalent to each other.\n   Reduces effort to understand code and allows developers to focus on more important aspects than arguing over naming standards.\n I\u2019m not quite sure when I first came across this quote, but itsince became one of my favourites. Martin Fowler  attributes it to PhilKarlton.\n     We\u2019ll focus on how a naming convention for cloud-level resources should looklike. GCP is used in our examples, but the concepts and strategies are genericand can be easily adapted to other cloud providers.\n  When designing your naming convention, you should take into account limitationsimposed by the cloud provider. Each resource comes with a set of namingrestrictions. The rule of thumb is to keep it short and simple (use only lettersand numbers for individual components, keep  - as separator).\n GCP limits name length for most of the resources to 62 or 63 characters,Project IDs are limited to 30. Resources must have unique names, eitherglobally or within a given scope. Some resources have additional constraintsto take into consideration (e.g. GCP Projects can\u2019t be immediately deleted).\n  First we establish naming pattern that all directly managed resources shouldfollow - Global Naming Pattern.\n     This is a fixed value prefix used for all resources. Typically some form of abbreviation for your organization name.\n   This is different from a GCP Project. Typically one Projectwill have multiple GCP Projects.We\u2019re using flat hierarchy and Project serves as the main mechanism of organizingresources into groups. I like using flat hierarchy as it\u2019s very universal andflexible to fit pretty much any organizational structure. You might considerreplacing this with some other form of group (e.g. team, product), but in myexperience it never quite works in the long term.\n   Resources belong to deployment environments. It\u2019s beneficial to establish acommon set of names used across your organization.\n   I\u2019ve tried various mechanisms over the time to construct theabbreviation for resources - most consistent results are achieved if the names arebased on the API resource names.Abbreviation of the given resource type. In GCP I tend to use three letters.\n For larger and more frequently used APIs (e.g. Compute, Kubernetes) first letterstands for the API and the remaining two for the resource type. For APIs with fewerresources, it\u2019s the other way around. I know this is not a completely deterministicrule, but this will always be a compromise to it short and usable.\n   Location is required when there\u2019s a possibility to create a given resource indifferent locations.\n Regional - five letter acronym (two letters for the continent, two forcardinal directions, 1 digit)\n   Multi- and Dual-regional - follow GCP\u2019s own naming (two letters formulti and 4 letters for dual-regional)\n   A description used to distinguish between resources of the same type butdifferent roles. For example a group of servers with a different purpose - frontend and  backend. This should not be used to differentiatebetween multiple instances of the same purpose resource, use  suffixinstead.\n It\u2019s also beneficial to agree on generic keywords used for description, when thereis no better, more specific, term available. This avoids many different nameslike  main,  core,  common,  this and similar. Often good strategy is to usethe Latin ordinal sequence, i.e.  primary,  secondary,  tertiary, etc.\n    good for readability and easily generated with Terraform  random_idresource.Use Suffix to differentiate resource from its peers when there are multiple instances, orwhen there\u2019s a requirement for uniqueness.\n   Let\u2019s go over several full examples of how resources should be named basedon the above established pattern.\n    Projects (and Folders) are considered resource containers for the purpose ofthis naming convention and therefore omit the  resource part of the name.\n You can notice GCP does this by default forprojects created via console - e.g.  rapid-depot-253717.Project IDs in GCP have to be globally unique and cannot be deleted immediately.This is unfortunate for automation, as you can\u2019t create a project with the samename right after it has been deleted. And that\u2019s why we include the unique randomsuffix part.\n Folders: We don\u2019t use GCP folders to organize projects. Igenerally believe that keeping it simple and flat is beneficial more often thannot. However, if you want to further structure your resources, consider addingan additional component to your naming pattern, such as  [org_group]. Folderscan then follow  [prefix]-[org-group] pattern.GCP also allows configuring Project Name. I recommend to set this to the same valueas Project ID and forget about it. For all the practical purposes you\u2019llreference the Projects by their IDs.\n     There will always be exceptions where it\u2019s not possible to follow theGlobal Naming Pattern (for example resource does not allow  - in thename) or when it simply doesn\u2019t make sense. A subset of thefull pattern should be used if possible and all exceptions documented.\n  Service accounts follow the  [resource]-[description] pattern only, as theproject is already included in the part after  @ and therefore there\u2019s no needto repeat that bit,\n   This is a complex topic, perhaps for another article, but you should establish anaming convention for groups and a strategy on how to assign permissions. As arule of thumb, never assign permissions directly to individuals, but to groupsonly.\n  You should also cover the use of labels (or tags). A good one is to addinformation to further categorize your resources, such as  cost-center. Labelsare also helpful in situations when you can\u2019t manage resource names directly,but you can manage a set of labels that is propagated to the child resources (e.g.GKE Cluster labels or Instance Groups).\n Do not duplicate information already contained in your naming convention (suchas  project) or create large numbers of unique labels with information that canbe obtained from the objects themselves (such as  creationTimestamp).\n  DNS naming convention across your infrastructure is again a larger topic, but youshould definitely have one. A simple strategy can be creating a subdomain for eachGCP project in the  [project]-[env].&lt;common_dns_domain&gt; form. DNS recordscreated for given resources should then follow the [resource]-[resource_location]-[description]-[suffix] part of the GlobalNaming pattern and therefore mirror the resource name.\n    You should establish a consistent naming convention as one of the first thingswhen you start using cloud or on a new project. It\u2019s one of those thingsthat are really easy to do in the beginning, but much more difficult to fixlater on. And you\u2019ll benefit from it every day.\n The key to success with naming conventions is establishing them early on andruthlessly following across your entire infrastructure. Automation helps a lot.\n As usual, there\u2019s no silver bullet and the actual naming conventionshould always be tailored to your environment. The main point is having one! AndI hope this post gives you a head start.\n Thanks for making it all the way till here. I wouldn\u2019t blame you if you thinkby now that I have a serious OCD (and I probably do), but try to work in anenvironment with 120 Kubernetes clusters and every single one of them namedsimply just  cluster!\n Good luck on your cloud journey and I would love to hear about your experiencewith naming things. You can follow me on @stepanstipl.", "posttime": "2021-07-24 14:45:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u547d\u540d,naming,\u8d44\u6e90", "title": "\u4e91\u547d\u540d\u7ea6\u5b9a", "title_en": "Cloud Naming Convention", "transed": 1, "url": "https://stepan.wtf/cloud-naming-convention/", "via": "", "real_tags": ["\u547d\u540d", "naming", "\u8d44\u6e90"]}, {"category": "", "categoryclass": "", "imagename": "e68c09f5c2d65919a50681834b1a611d.png", "infoid": 1069422, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136 Erlang \u8fd0\u884c\u65f6\u4ee5\u4f5c\u4e3a Elixir \u7f16\u8bd1\u7684\u9ad8\u5e76\u53d1\u5e73\u53f0\u800c\u95fb\u540d\uff0c\u4f46\u6211\u4eec\u5927\u591a\u6570\u4eba\u6700\u7ec8\u5728\u65e5\u5e38\u5de5\u4f5c\u4e2d\u89e3\u51b3\u4e86\u76f8\u540c\u7684\u95ee\u9898\u3002\u6211\u4eec\u4f7f\u7528 Phoenix \u6765\u5f15\u5bfc\u6211\u4eec\u7684 Web \u5e94\u7528\u7a0b\u5e8f\uff0c\u7f16\u5199 JSON API \u5e76\u5728\u6211\u4eec\u7684\u9875\u9762\u4e0a\u6492\u4e0a\u4e00\u4e9b javascript\u3002\u5c3d\u7ba1\u786e\u5b9e\u901a\u8fc7\u4f7f\u7528 Phoenix \u6211\u4eec\u5df2\u7ecf\u514d\u8d39\u83b7\u5f97\u4e86\u6574\u4e2a\u5e76\u53d1\u6a21\u578b\uff0c\u4f46\u6211\u4eec\u4e3a\u6211\u4eec\u7684\u4ea7\u54c1\u5f00\u53d1\u7684\u5927\u591a\u6570\u529f\u80fd\u5e76\u6ca1\u6709\u5229\u7528\u6240\u6709\u7ecf\u5e38\u5206\u5e03\u5f0f\u7684 Erlang\u3001\u590d\u6742\u7684\u76d1\u7763\u6811\u6216 GenServers \u961f\u5217\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u7684\u76ee\u7684\u662f\u5f3a\u8c03\u4e00\u4e9b\u5e38\u89c1\u7684\u573a\u666f\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 Erlang \u7684\u5e76\u53d1\u6a21\u578b\u4ee5\u53ca Elixir \u7684\u62bd\u8c61\u6765\u6784\u5efa\u66f4\u597d\u3001\u66f4\u5feb\u548c\u66f4\u5b89\u5168\u7684\u8f6f\u4ef6\u3002\u628a\u5b83\u60f3\u8c61\u6210\u2026\u2026\u4e00\u672c\u98df\u8c31\u3002\u6211\u4eec\u53ef\u80fd\u8981\u89e3\u51b3\u7684\u6700\u7b80\u5355\u7684\u95ee\u9898\u662f\u5982\u4f55\u8fdb\u884c\u201c\u5373\u53d1\u5373\u5fd8\u201d\u7684\u8ba1\u7b97\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5982\u4f55\u544a\u8bc9\u6211\u4eec\u7684\u7cfb\u7edf\u5f02\u6b65\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u800c\u4e0d\u5173\u5fc3\u5b83\u4f55\u65f6\u5b8c\u6210\uff0c\u4e5f\u4e0d\u5173\u5fc3\u7ed3\u679c\u3002\u4e3a\u6b64\uff0cElixir \u63d0\u4f9b\u4e86 Task \u62bd\u8c61\u3002\u4efb\u52a1\u662f\u65e8\u5728\u5728\u5176\u751f\u547d\u5468\u671f\u5185\u8fd0\u884c\u5355\u4e2a\u64cd\u4f5c\u7684\u8fdb\u7a0b\u3002\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a\u957f\u671f\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bb0\u5f55\u7684\u6279\u5904\u7406\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u77ed\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u53d1\u9001 Slack \u901a\u77e5\u3002\u901a\u5e38\uff0c\u8fd0\u884c\u4e00\u6b21\u6027\u4efb\u52a1\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 Task.start/1\u3002\u4f46\u662f\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u63d0\u793a\uff1a\u4e0d\u8981\u90a3\u6837\u505a\u3002\u5728 Elixir \u4e2d\u8fd0\u884c\u4e00\u6b21\u6027\u64cd\u4f5c\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u4f7f\u7528 Task.Supervisor.start_child/2 \u5728\u76d1\u7763\u6811\u4e0b\u751f\u6210\u4efb\u52a1\u3002\u6700\u597d\u5728\u5b83\u4eec\u81ea\u5df1\u7684\u76d1\u7763\u6811\u4e0b\u8fd0\u884c\u4efb\u52a1\u7684\u4e3b\u8981\u539f\u56e0\u662f\u5141\u8bb8\u5bf9\u8fdb\u7a0b\u8fdb\u884c\u9002\u5f53\u7684\u6e05\u7406\u3002\u5f53\u4e00\u4e2a Supervisor \u88ab\u5220\u9664\u65f6\uff0c\u5b83\u7684\u6240\u6709\u5b50\u5143\u7d20\u4e5f\u4f1a\u88ab\u5220\u9664\uff0c\u8fd9\u4f7f\u60a8\u53ef\u4ee5\u5e72\u51c0\u5730\u5220\u9664\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u60a8\u5e0c\u671b\u91cd\u65b0\u542f\u52a8\u60a8\u7684\u4efb\u52a1\u3002\u5b9e\u9645\u4e0a\uff0cTask.Supervisor \u7684\u9ed8\u8ba4\u7b56\u7565\u662f :temporary\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u91cd\u65b0\u542f\u52a8\u3002\u5982\u679c\u4e8b\u60c5\u5728\u67d0\u4e2a\u65f6\u5019\u53d8\u5f97\u5947\u602a\uff0c\u8fd9\u53ea\u662f\u4e00\u79cd\u907f\u514d\u60ac\u7a7a\u8fdb\u7a0b\u7684\u65b9\u6cd5\u3002\u4ed6\u4eec\u603b\u662f\u8fd9\u6837\u505a\u3002\ndefmodule FireAndForgetExample.Application do use Application def start(_type, _args) do children = [ # \u542f\u52a8OTP\u5e94\u7528\u4e0b\u7684\u76d1\u7763\u6811\u3002 {Task.Supervisor, name: FireAndForgetExample.TaskSupervisor} ] Supervisor.start_link(children, strategy: :one_for_one) endenddefmodule FireAndForgetExample.OtherModule do def process_event(event) do # \u542f\u52a8\u76d1\u7763\u6811\u4e0b\u7684\u4efb\u52a1\u3002 Task.Supervisor.start_child(FireAndForgetExample.TaskSupervisor, fn -&gt; send_slack_notification(&quot;Hey! We got an event!&quot;) end) event |&gt; do_something() |&gt; do_something_else() endend \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u771f\u7684\u5173\u5fc3\u7ed3\u679c\u5462\uff1f\u6709\u65f6\u8fd0\u884c\u67d0\u4e2a\u64cd\u4f5c\u5e76\u5fd8\u8bb0\u5b83\u662f\u6709\u7528\u7684\uff0c\u4f46\u5927\u591a\u6570\u65f6\u5019\u6211\u4eec\u786e\u5b9e\u60f3\u5bf9\u5b83\u7684\u7ed3\u679c\u505a\u4e00\u4e9b\u4e8b\u60c5\u3002\u5982\u679c\u6211\u4eec\u624b\u5934\u7684\u95ee\u9898\u662f\u7531\u591a\u4e2a\u64cd\u4f5c\u7ec4\u6210\u7684\uff0c\u60a8\u53ef\u4ee5\u5f02\u6b65\u8fd0\u884c\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u76f8\u4e92\u4f9d\u8d56\uff0c\u4f8b\u5982\uff0c\u5c06\u4e00\u5806\u6587\u6863\u4e0a\u4f20\u5230 S3\uff0c\u6216\u5411\u4e0d\u540c\u7684\u4eba\u53d1\u9001\u4e00\u6279\u7535\u5b50\u90ae\u4ef6\uff0c\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5b9e\u65bd\u6247\u5165/\u6247\u51fa\u7b56\u7565\u3002\u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4efb\u52a1\u6765\u5b8c\u6210\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528\u4e3b\u7ba1\u7684\u60c5\u51b5\u4e0b\u5929\u771f\u5730\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u50cf\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\u90a3\u6837\u5728\u4e3b\u7ba1\u4e0b\u542f\u52a8\u5b83\u4eec\u3002\u6211\u603b\u662f\u5efa\u8bae\u5728\u5c06\u8981\u4ea4\u4ed8\u5230\u751f\u4ea7\u73af\u5883\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528 Supervisor\uff0c\u4f46\u662f\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u6ca1\u6709\u5b83\u7684\u4f8b\u5b50\uff1a defmodule FanInFanOutExample do def send_notifications(notifications) do notice # Spin a task per element |&gt; Enum.map(&amp;Task.async(fn -&gt; send_single_notification(&amp;1) end) # \u7b49\u5f85\u6240\u6709\u8fd9\u4e9b |&gt; Enum.map(&amp;Task.await/1) end def send_single_notification(notification) do # ... endend \u597d\u7684\u4e8b\u60c5\u8fd9\u79cd\u65b9\u6cd5\u662f\u5b83\u53ea\u9700\u8981\u6700\u957f\u7684\u4efb\u52a1\uff0c\u5f53\u51fd\u6570\u5b8c\u6210\u65f6\uff0c\u6211\u4eec\u5c06\u6709\u4e00\u4e2a\u5305\u542b\u6240\u6709\u7ed3\u679c\u7684\u5217\u8868\u3002\u5728 Elixir 1.11 \u4e2d\u8fd8\u6709 Task.await_many/2\uff0c\u5b83\u5728\u5f15\u64ce\u76d6\u4e0b\uff0c\u5b83\u6240\u505a\u7684\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u7684\u8fed\u4ee3\u548c\u7b49\u5f85\uff0c\u4f46\u6700\u7ec8\uff0c\u786e\u5b9e\u8ba9\u6211\u4eec\u5230\u8fbe\u4e86\u540c\u4e00\u4e2a\u5730\u65b9\u3002\u6211\u4eec\u53ef\u80fd\u9047\u5230\u7684\u53e6\u4e00\u79cd\u95ee\u9898\u662f\u201c_How can we can run some work\u6bcf\u9694 N \u5206\u949f/\u79d2\u5b9a\u671f/etc.&quot;\u3002\u5229\u7528 Eli \u4e2d\u53ef\u7528\u7684\u4e0d\u540c\u62bd\u8c61\uff0c\u8fd9\u662f\u76f8\u5f53\u7b80\u5355\u7684xir \u4f46\u6700\u7ec8\u5728 OTP \u4e2d\uff1aGenServer\u3002\nGenServer \u662f\u201c\u901a\u7528\u670d\u52a1\u5668\u201d\u7684\u7f29\u5199\u3002\u5b83\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u53ef\u4ee5\u63a5\u6536\u6d88\u606f\u5e76\u5141\u8bb8\u6211\u4eec\u6307\u5b9a\u56de\u8c03\u7684\u8fc7\u7a0b\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u6d88\u606f\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002\u6211\u4e0d\u4f1a\u8be6\u7ec6\u4ecb\u7ecd GenServers\uff0c\u56e0\u4e3a\u6211\u4e4b\u524d\u5df2\u7ecf\u5199\u8fc7\u5173\u4e8e\u5b83\u4eec\u7684\u6587\u7ae0\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u4f7f\u7528 GenServer \u8fdb\u884c\u8c03\u5ea6\uff1f\u7b80\u5355\uff1a\u5229\u7528 handle_info/2 \u56de\u8c03\u548c Process.send_after/3\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5c06\u5411\u6267\u884c\u5de5\u4f5c\u7684 GenServer \u6dfb\u52a0\u4e00\u4e2a\u56de\u8c03\uff0c\u7136\u540e\u4f7f\u7528 Process.send_after/3 \u8c03\u5ea6\u6d88\u606f\u3002\u6700\u540e\uff0c\u4e3a\u4e86\u786e\u4fdd\u5b83\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u518d\u6b21\u8fd0\u884c\uff0c\u6211\u4eec\u786e\u4fdd\u5728\u56de\u8c03\u8fd4\u56de\u4e4b\u524d\u518d\u6b21\u8c03\u7528 Process.send_after/3\u3002\u8ba9\u6211\u4eec\u770b\u770b\u5b83\u7684\u5916\u89c2\uff1a defmodule SchedulingExample do use GenServer @default_minutes 3 def start_link(args \\\\ []) do GenServer.start_link(__MODULE__, to_map(args)) end defp to_map(args) do %{ minutes: Keyword.get( args, :minutes, @default_minutes), always: Keyword.get(args, :forever, true), } end def init(%{minutes: minutes} = state) do schedule_work(minutes) {:ok, state} end def handle_info(:work, %{minutes:minutes,forever:forever} = state) do # \u5728\u8fd9\u91cc\u505a\u6211\u7684\u5de5\u4f5c...\u5982\u679c\u6c38\u8fdc\u505a schedule_work(minutes) end {:noreply, state} end defp schedule_work(minutes) do milliseconds = to_milliseconds(minutes) Process.send_after(self(), :work, milliseconds) end defp to_milliseconds(minutes) do minutes |&gt; :timer.minutes() |&gt; Kernel.trunc() endend \u6b64\u5916\uff0c\u5f53\u5229\u7528 GenServers \u548c\u5176\u4ed6\u62bd\u8c61\u6d41\u7a0b\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8c03\u7528\uff0c\u4f7f\u670d\u52a1\u5668\u6a21\u5757\u5177\u6709\u5c3d\u53ef\u80fd\u5c11\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u5728\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u5982\u679c GenServer \u53ef\u4ee5\u7b80\u5355\u5730\u4ece\u6a21\u5757\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u662f\u9ec4\u91d1\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6d41\u7a0b\u7ba1\u7406\u4e0e\u6211\u4eec\u7684\u4e1a\u52a1\u5b8c\u5168\u5206\u79bb\uff0c\u4ece\u800c\u66f4\u8f7b\u677e\u5730\u8fdb\u884c\u6d4b\u8bd5\u2026\u2026\u4ee5\u53ca\u66f4\u8f7b\u677e\u7684\u65f6\u95f4\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4e5f\u60f3\u5728 Supervisor \u4e0b\u751f\u6210\u8fd9\u79cd\u5de5\u4f5c\u8fdb\u7a0b\uff0c\u4f46\u53ef\u80fd\u4f7f\u7528\u4e0d\u540c\u7684\u7b56\u7565\uff0c\u4f8b\u5982 :one_for_one\uff0c\u4ee5\u4fbf\u5b83\u4eec\u5728\u5d29\u6e83\u65f6\u91cd\u65b0\u542f\u52a8\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728\u7279\u5b9a\u65f6\u95f4\u8fd0\u884c\u6211\u4eec\u7684\u4ee3\u7801\u3002\u4e0d\u4e00\u5b9a\u6bcf 3 \u5206\u949f\u4e00\u6b21\uff0c\u800c\u662f\u6bcf\u5929\u65e9\u4e0a 8 \u70b9\u3002\u867d\u7136\u5229\u7528\u76f8\u540c\u7684\u5de5\u5177\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u6211\u4f1a\u52a1\u5b9e\u5e76\u63a8\u8350 Quantum\u3002\u5b83\u5141\u8bb8\u60a8\u4f7f\u7528 cron \u8bed\u6cd5\u6765\u5b89\u6392\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u6d88\u9664\u7ba1\u7406\u6d41\u7a0b\u7684\u6240\u6709\u590d\u6742\u6027\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5e93\uff0c\u5728\u793e\u533a\u5185\u88ab\u5e7f\u6cdb\u91c7\u7528\uff0c\u975e\u5e38\u8f7b\u5de7......\u800c\u4e14\u975e\u5e38\u7b80\u5355\u3002\u6709\u65f6\uff0c\u60a8\u4f1a\u53d1\u73b0\u81ea\u5df1\u6709\u4e00\u4e2a\u7aef\u70b9\uff0c\u8be5\u7aef\u70b9\u7684\u67e5\u8be2\u65f6\u95f4\u592a\u957f\uff0c\u6216\u8005\u4e00\u4e2a\u8fc7\u7a0b\u5fc5\u987b\u59cb\u7ec8\u5904\u7406\u5927\u91cf\u6570\u636e\u5e76\u63d0\u4f9b\u7cdf\u7cd5\u7684\u7528\u6237\u4f53\u9a8c\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6709\u65f6\u7f13\u5b58\u7ed3\u679c\u53ef\u80fd\u662f\u6709\u610f\u4e49\u7684\u3002\u6709\u65f6\uff0c\u82b1\u51e0\u4e2a\u5c0f\u65f6\u8c03\u6574\u67e5\u8be2\u672c\u8eab\u6216\u91cd\u65b0\u8bbe\u8ba1\u89e3\u51b3\u65b9\u6848\u53ef\u80fd\u66f4\u6709\u610f\u4e49\uff0c\u4f46\u6709\u65f6\u7f13\u5b58\u53ef\u80fd\u66f4\u6709\u610f\u4e49\u3002\u8ba9\u6211\u4eec\u8c08\u8c08\u5b83\u4ec0\u4e48\u65f6\u5019\u51fa\u73b0\u3002\n\u5982\u679c\u60a8\u5df2\u7ecf\u4f7f\u7528\u8fc7 Elixir \u6216 Erlang\uff0c\u60a8\u5c31\u4f1a\u77e5\u9053\u5b83\u7684\u6570\u636e\u7ed3\u6784\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f46\u662f\uff0c\u5b83\u6709\u81ea\u5df1\u7684\u65b9\u5f0f\u6765\u5904\u7406\u5171\u4eab\u7684\u53ef\u53d8\u72b6\u6001\uff1a\u8fdb\u7a0b\u3002\u4e3a\u4e86\u4fdd\u5b58\u4e00\u4e9b\u72b6\u6001\uff0c\u8bbf\u95ee\u5b83\u5e76\u66f4\u6539\u5b83\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u8fdb\u7a0b\u4ee5\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4fdd\u6301\u67d0\u79cd\u72b6\u6001\u7684\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u3002\u4ee3\u7406\u662f\u56f4\u7ed5\u72b6\u6001\u7684\u6700\u7b80\u5355\u7684\u62bd\u8c61\uff0c\u6709\u65f6\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u7684\u662f\u4e00\u4e2a\u6ca1\u6709\u592a\u591a\u7535\u6c60\u7684\u7b80\u5355\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u5b9e\u9645\u4e0a\u53ef\u80fd\u662f\u6700\u597d\u7684\u9009\u62e9\u3002 Agents \u7684\u4e00\u4e2a\u597d\u5904\u662f\u5b83\u662f\u4e00\u4e2a\u5355\u4e00\u8fdb\u7a0b\uff0c\u8fd9\u610f\u5473\u7740\u8bb8\u591a\u5e76\u53d1\u5ba2\u6237\u7aef\u5c06\u4f9d\u6b21\u83b7\u5f97\u5b83\u4eec\u7684 Agent \u4efd\u989d\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u4e0d\u5fc5\u62c5\u5fc3\u7ade\u4e89\u6761\u4ef6\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5b83\u5f00\u59cb\u6210\u4e3a\u74f6\u9888\uff0c\u90a3\u4e5f\u53ef\u80fd\u662f\u4e00\u4ef6\u574f\u4e8b\u3002\u5176\u4ed6\u65f6\u5019\uff0c\u5982\u679c\u7279\u5de5\u6ca1\u6709\u4e3a\u4f60\u526a\u65ad\u5b83\uff0c\u4f60\u53ef\u80fd\u4f1a\u66f4\u5feb\u4e00\u4e9b\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0cETS \u53ef\u80fd\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 ETS \u7684\u597d\u5904\u662f\u5b83\u603b\u662f\u66f4\u5feb\uff0c\u56e0\u4e3a\u5b83\u4e0d\u901a\u8fc7 Erlang \u8c03\u5ea6\u5668\uff0c\u6b64\u5916\u5b83\u8fd8\u652f\u6301\u5e76\u53d1\u8bfb\u53d6\u548c\u5199\u5165\uff0c\u800c\u4ee3\u7406\u4e0d\u652f\u6301\u3002\u4f46\u662f\uff0c\u5f53\u60a8\u60f3\u8981\u8fdb\u884c\u539f\u5b50\u64cd\u4f5c\u65f6\uff0c\u5b83\u4f1a\u53d7\u5230\u66f4\u591a\u9650\u5236\u3002\u603b\u7684\u6765\u8bf4\uff0c\u5b83\u975e\u5e38\u9002\u5408\u7b80\u5355\u7684\u5171\u4eab\u952e/\u503c\u5b58\u50a8\uff0c\u4f46\u662f\u5426\u66f4\u9002\u5408\u6216\u4e0d\u9002\u5408\u60a8\u7684\u7279\u5b9a\u95ee\u9898\uff0c\u8fd9\u53d6\u51b3\u4e8e\u60a8\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a defmodule EtsCacheExample do def init!(seed, table_name) when is_atom(table_name) do case :ets.info(table_name) do :undefined -&gt; :ets.new(table_name, [:set , :public, :named_table]) _ -&gt; \u5f15\u53d1\u201c\u540d\u79f0\u4e3a #{table_name(pool_name)} \u7684 ETS \u8868\u5df2\u7ecf\u5b58\u5728\u3002\u201d end add(seed, pool_name) end def teardown(table_name) do :ets.delete(table_name) end def add(value, table_name) do :ets.insert_new(table_name, {value}) end def exists?(value, pool_name) do case :ets.lookup(table_name, value) do [] -&gt; false _ -&gt; true end end def retrieve_all(table_name) do table_name |&gt; :ets.match({:&quot;$1&quot;}) |&gt; List.flatten( ) endend \u6211\u8981\u63d0\u5230\u7684\u7b2c\u4e09\u4e2a\u9009\u9879\u662f GenServers\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7406\u6216 ETS \u5c31\u8db3\u591f\u4e86\uff0c\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e3a\u6bcf\u4e2a API \u7528\u6237\u63d0\u4f9b\u81ea\u5df1\u7684\u5c0f\u7f13\u5b58\u53ef\u80fd\u662f\u6709\u610f\u4e49\u7684\u3002\u4e00\u4e2a\u5f88\u597d\u7684\u7406\u7531\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4e3a\u8bfb/\u5199\u63d0\u4f9b\u4e00\u5b9a\u7684\u539f\u5b50\u6027\uff0c\u800c\u4ee3\u7406\u5c06\u6210\u4e3a\u74f6\u9888\u3002 GenServers \u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u5b83\u4eec\u5141\u8bb8\u6211\u4eec\u975e\u5e38\u8f7b\u677e\u5730\u4e3a\u6bcf\u4e2a\u7528\u6237\u542f\u52a8\u4e00\u4e2a\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u6210\u4e3a Agent \u7684\u74f6\u9888\u3002\u7136\u800c\uff0c\u867d\u7136 Elixir \u786e\u5b9e\u63d0\u4f9b\u4e86\u4f7f\u7f13\u5b58\u53d8\u5f97\u5bb9\u6613\u7684\u5fc5\u8981\u62bd\u8c61\uff0c\u4f46\u6211\u5bf9\u6b64\u7684\u5efa\u8bae\u901a\u5e38\u662f\u4f9d\u9760\u793e\u533a\u7684\u80a9\u8180\u3002\u4f8b\u5982\uff0cSa\u0161a Juri\u0107 \u4e0d\u4e45\u524d\u5199\u8fc7 ConCache \u5c31\u662f\u8fd9\u6837\u505a\u7684\uff0c\u4f46\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u7684\u3002\u4e0d\u5b9e\u73b0\u5b83\u81ea\u5df1\u7684\u4e00\u4e2a\u597d\u5904\u662f\u5728\u5904\u7406\u5e76\u53d1\u65f6\u6709\u5f88\u591a\u8fb9\u7f18\u60c5\u51b5\uff0c\u5e76\u4e14\u5728\u6700\u521d\u51e0\u6b21\u5f88\u5bb9\u6613\u51fa\u9519\u3002\u6b63\u5982\u4ed6\u4eec\u6240\u8bf4\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u4e24\u4e2a\u6700\u96be\u7684\u95ee\u9898\u662f\u547d\u540d\u548c\u7f13\u5b58\u3002\u6709\u4e86\u8fd9\u4e00\u5207\uff0c\u6211\u5e0c\u671b\u80fd\u591f\u4e3a\u60a8\u53ef\u80fd\u9047\u5230\u7684\u4e00\u4e9b\u95ee\u9898\u63d0\u4f9b\u4e00\u4e9b\u6f5c\u5728\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5c31\u50cf IT \u4e2d\u7684\u6240\u6709\u95ee\u9898\u4e00\u6837\uff0c\u6bcf\u4e2a\u89e3\u51b3\u65b9\u6848\u6709\u65f6\u90fd\u6709\u610f\u4e49\uff0c\u6709\u65f6\u5374\u6ca1\u6709\uff0c\u4f46\u5f52\u6839\u7ed3\u5e95\uff0c\u6211\u76f8\u4fe1\u8fd9\u4e9b\u90fd\u662f Elixir \u6216 Erlang \u5f00\u53d1\u4eba\u5458\u7684\u4e3b\u8981\u6280\u672f\u3002 Elixir \u4f7f\u5904\u7406\u5e76\u53d1\u4ee3\u7801\u53d8\u5f97\u5982\u6b64\u5bb9\u6613\uff0c\u5927\u591a\u6570\u95ee\u9898\u90fd\u53ef\u4ee5\u89e3\u51b3\uff0c\u800c\u65e0\u9700\u5f15\u5165\u7b2c\u4e09\u65b9\u5e93\u3002\u5f53\u7136\u8fd8\u6709\u5f88\u591a\u4e0d\u80fd\u63d0\u53ca\u7684\u5185\u5bb9\uff0c\u4f8b\u5982\u4f7f\u7528 gen_statem \u8fdb\u884c\u72b6\u6001\u673a\uff0c\u6216\u4f7f\u7528\u5de5\u4f5c\u6c60\u8fdb\u884c\u8282\u6d41\u5de5\u4f5c\uff0c\u4f46\u6211\u5c06\u7559\u5f85\u6539\u5929\u518d\u8bf4\u3002\n\u54e6\uff0c\u6700\u540e\u4e00\u4ef6\u4e8b\uff0c\u4e0d\u8981\u5fd8\u8bb0\u76d1\u7763\u4f60\u7684\u8fc7\u7a0b......\u8fd9\u662f\u514d\u8d39\u7684\u5bb9\u9519:)", "note_en": "While the Erlang runtime is known for being a highly concurrent platform to which Elixir compiles, most of us end up solving the same problems in our daily jobs. We use Phoenix to bootstrap our web applications, write JSON APIs and sprinkle our pages with some javascript. And although it is true that simply by using Phoenix we&#39;re already getting for free the whole concurrency model, the majority of the features we develop for our products don&#39;t leverage all that often distributed Erlang, complex supervision trees or fleets of GenServers.\n In this post, my intention is to highlight some common scenarios where we can leverage Erlang&#39;s concurrency model as well as Elixir&#39;s abstractions to build better, faster and more secure software. Think of it like... A cookbook.\n  The easiest problem we may have to solve is how to do a &#34;fire and forget&#34; computation. In other words, how can we tell our system to execute some code asynchronously and not care about when it finishes, nor the result. To do this Elixir provides with the  Task abstraction.\n Tasks are processes meant to run a single action within their life-cycle. It can be a long-lived operation, like batch processing of records, or a short one, like sending a Slack notification.\n Usually, to run a one-off task the easiest thing is to use  Task.start/1. However, here is the first tip: don&#39;t do that. The best way to run a one-off action in Elixir is to spawn the tasks under a supervision tree, with  Task.Supervisor.start_child/2.\n The main reason why it&#39;s preferable to run tasks under their own supervision tree is to allow for a proper clean-up of processes. When a Supervisor is taken down, so are all its children, which allows you to take down the application cleanly.\n This doesn&#39;t mean that you want your tasks to be restarted. In fact, the default strategy for the  Task.Supervisor is  :temporary, which means they&#39;re never restarted. It&#39;s just a means to avoid dangling processes if things go weird at some point. And they always do.\n  defmodule FireAndForgetExample.Application do use Application def start(_type, _args) do children = [ # Start the supervision tree under the OTP Application. {Task.Supervisor, name: FireAndForgetExample.TaskSupervisor} ] Supervisor.start_link(children, strategy: :one_for_one) endenddefmodule FireAndForgetExample.OtherModule do def process_event(event) do # Start the task under the supervision tree. Task.Supervisor.start_child(FireAndForgetExample.TaskSupervisor, fn -&gt; send_slack_notification(&#34;Hey! We got an event!&#34;) end) event |&gt; do_something() |&gt; do_something_else() endend\n  However, what if we do care about the results? Sometimes it&#39;s useful to run a certain operation and forget about it, but most times we actually do want to do something with its result.\n If the problem we have at hand is one which consists of multiple operations which you can run asynchronously because they don&#39;t depend on each other, like for example, uploading a bunch of documents to S3, or sending a batch of emails to different people, the easiest solution is to implement a  fan-in/fan-out strategy.\n This can be done by using tasks too. We can do it naively without using a Supervisor or we can spin them up under a Supervisor as we&#39;ve mentioned before. I always recommend using a Supervisor in code that is going to be shipped to production, however, for the sake of simplicity, let&#39;s see an example without it:\n defmodule FanInFanOutExample do def send_notifications(notifications) do notifications # Spin a task per element |&gt; Enum.map(&amp;Task.async(fn -&gt; send_single_notification(&amp;1) end) # Await all of them |&gt; Enum.map(&amp;Task.await/1) end def send_single_notification(notification) do # ... endend\n The good thing about this approach is that it will only take as long as the the longest task, and by the time the function has finished we will have a list with all the results. In Elixir 1.11 there&#39;s also  Task.await_many/2, which under the hood, it does a little bit more than a simple iteration and an await, but in the end, does get us to the same place.\n  A different kind of problem we might come across is &#34;_How can we run some work periodically every N minutes/seconds/etc.&#34;. This is fairly simple leveraging a different abstraction available in Elixir but ultimately in OTP: the  GenServer.\n GenServer is short for a &#34;Generic Server&#34;. It&#39;s basically a process that can receive messages and allows us to specify callbacks so it does different things with those messages. I won&#39;t go very much into detail about GenServers because  I already wrote about them a while back.\n So, how do we do the scheduling with a GenServer? Simple: by leveraging the  handle_info/2 callback and  Process.send_after/3. In other words, we will add a callback to the GenServer which does the work and then schedule the message with  Process.send_after/3. Lastly, to make sure it runs again after some time, we make sure to call  Process.send_after/3 again before the callback returns. Let&#39;s see how it looks:\n defmodule SchedulingExample do use GenServer @default_minutes 3 def start_link(args \\\\ []) do GenServer.start_link(__MODULE__, to_map(args)) end defp to_map(args) do %{ minutes: Keyword.get(args, :minutes, @default_minutes), forever: Keyword.get(args, :forever, true), } end def init(%{minutes: minutes} = state) do schedule_work(minutes) {:ok, state} end def handle_info(:work, %{minutes: minutes, forever: forever} = state) do # Do my work here ... if forever do schedule_work(minutes) end {:noreply, state} end defp schedule_work(minutes) do milliseconds = to_milliseconds(minutes) Process.send_after(self(), :work, milliseconds) end defp to_milliseconds(minutes) do minutes |&gt; :timer.minutes() |&gt; Kernel.trunc() endend\n Also, when leveraging GenServers and other abstractions over processes, it&#39;s usually a good call to keep the server module with as little business logic as possible. In this particular case, if the GenServer can simply call a function from a module, we&#39;re golden. This way we can decouple completely process management from our business, allowing for easier testing... And an easier time.\n Lastly, we probably want to spawn this kind of worker processes under a Supervisor too, but probably with a different strategy, like a  :one_for_one, so they&#39;re restarted in case they crash.\n  In some cases, we might want to run our code at specific times. Not necessarily  every 3 minutes, but  every day at 08.00AM. While this is perfectly achievable leveraging the same tools, I&#39;ll be pragmatic and recommend  Quantum. It allows you to schedule the execution of functions with a cron syntax and takes away all the complexity of managing processes. It&#39;s a seasoned library, widely-adopted within the community, very lightweight... And extremely simple.\n  Occasionally you will find yourself with an endpoint that that makes queries that take too long or a process which consistently has to crunch a lot of data and provides a bad user experience. In these situations  sometimes caching the results may make sense. Sometimes it might make more sense to spend a few hours tweaking the queries themselves or redesigning the solution, but sometimes caching might make sense. Let&#39;s talk about when it does.\n  If you&#39;re already experienced with Elixir or Erlang, you&#39;ll know that its data structures are immutable, however, it has its own way to work with the shared mutable state: processes. In order to save some state, access it and change it, we can do so with a process and in many different ways.\n The most simple solution for holding some state is creating an  Agent. Agents are the simplest possible abstraction around the state, and sometimes, if what we need is precisely a simple solution without too many batteries, it might actually be the best option. One of the good things about Agents is that it is a  single process, which means that many concurrent clients will get their share of the Agent sequentially, which means you don&#39;t have to worry about race conditions. On the other hand, that can also be a bad thing if it starts becoming a bottleneck.\n  Other times, if the Agent doesn&#39;t cut it for you, you might something faster. In these cases  ETS might be a good option. The good thing about ETS is that it will always be faster because it doesn&#39;t go through the Erlang Scheduler, furthermore it also supports concurrent reads and writes, which the Agent does not. However, it&#39;s a bit more limited when you want to do atomic operations. Overall it&#39;s very well suited for a simple shared key/value store, but if it&#39;s better suited or not for your specific problem, that&#39;s up to you. A naive approach could look something like the below:\n defmodule EtsCacheExample do def init!(seed, table_name) when is_atom(table_name) do case :ets.info(table_name) do :undefined -&gt; :ets.new(table_name, [:set, :public, :named_table]) _ -&gt; raise &#34;ETS table with name #{table_name(pool_name)} already exists.&#34; end add(seed, pool_name) end def teardown(table_name) do :ets.delete(table_name) end def add(value, table_name) do :ets.insert_new(table_name, {value}) end def exists?(value, pool_name) do case :ets.lookup(table_name, value) do [] -&gt; false _ -&gt; true end end def retrieve_all(table_name) do table_name |&gt; :ets.match({:&#34;$1&#34;}) |&gt; List.flatten() endend\n  The third option I&#39;m going to mention is GenServers. Most of the times either the Agent or ETS should be enough, however, in some cases it might make sense to provide each API user with its own little cache. A good reason could be because we need to provide certain atomicity for the read/writes and an Agent would be a bottleneck. One of the strengths of GenServers is that they allow us to spin one up per user very easily, so they don&#39;t become a bottleneck where the Agent does.\n  However, while Elixir does provide the necessary abstractions to make caching easy, my recommendation on this one is usually to lean on the community&#39;s shoulders. Sa\u0161a Juri\u0107, for example, wrote a while back  ConCache which does exactly this, but there are many others out there. The good thing about not implementing one it&#39;s own is that there are many edge cases when dealing with concurrency and it&#39;s easy to get it wrong the first few times. As they say, the two hardest problems in computer science are naming and caching.\n  With all this, I hope to have shed some light in some potential solutions to some of your maybe problems. Like all problems in IT, every solution sometimes makes sense and sometimes it does not, but at the end of the day, I believe that these are all staple techniques within any Elixir or Erlang developer. Elixir makes it so easy to work with concurrent code that most problems can be tackled without the need to bring a third-party library. There are of course more than could be mentioned, like using   gen_statem for state machines, or worker pools for throttling work, but I&#39;ll leave those for another day.\n Oh, and one last thing, don&#39;t forget to supervise your processes... It&#39;s fault-tolerance for free :)", "posttime": "2021-07-24 14:45:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b9e\u7528,practical,\u53ef\u80fd", "title": "Elixir\uff1a\u5b9e\u7528\u5e76\u53d1\u98df\u8c31", "title_en": "Elixir: Practical Concurrency Cookbook", "transed": 1, "url": "https://functional.works-hub.com/learn/elixir-practical-concurrency-3794f", "via": "", "real_tags": ["\u5b9e\u7528", "practical", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "3865165d6ee836dcda8563d9e172c2d5.jpg", "infoid": 1069421, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Sweetch \u7684\u521b\u59cb\u4eba Yossi Bahagon \u5c06\u516c\u53f8\u7684\u6570\u5b57\u63d0\u9192\u65b9\u6cd5\u63cf\u8ff0\u4e3a\u4eba\u5de5\u667a\u80fd\u548c\u60c5\u5546\u7684\u6df7\u5408\u4f53\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u5c06\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u6765\u5206\u6790\u901a\u8fc7\u667a\u80fd\u624b\u673a\u83b7\u53d6\u7684\u201c\u751f\u547d\u5370\u8bb0\u201d\u6570\u636e\u3002\u7136\u540e\uff0c\u5b83\u4f1a\u5728\u60a8\u53ef\u80fd\u66f4\u6709\u53ef\u80fd\u56de\u5e94\u7684\u65f6\u5019\uff0c\u4ee5\u9f13\u52b1\u5408\u89c4\u7684\u201c\u8bed\u6c14\u201d\u4f20\u9012\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5728\u5468\u4e00 12 \u70b9\u5230 3 \u70b9\u4e4b\u95f4\u5f00\u4f1a\uff0c\u4f46\u4ecd\u60f3\u8fdb\u884c\u4e00\u4e9b\u953b\u70bc\uff0cSweech \u4e0d\u4f1a\u5efa\u8bae\u5728\u8fd9\u4e9b\u65f6\u95f4\u8fdb\u884c\u953b\u70bc\uff0c\u6216\u8005\u8ba9\u60a8\u56e0\u5750\u5728\u4f1a\u8bae\u4e0a\u800c\u4e0d\u662f\u53c2\u52a0\u4f1a\u8bae\u800c\u611f\u5230\u7f9e\u803b\u3002 \u201c\u8fd9\u662f\u5173\u4e8e\u6301\u7eed\u7684\u8d85\u4e2a\u6027\u5316\u53c2\u4e0e\uff0c\u5b83\u589e\u52a0\u4e86\u60a3\u8005\u505a [\u4ed6\u4eec\u9700\u8981] \u505a\u7684\u4e8b\u60c5\u7684\u53ef\u80fd\u6027\uff0c\u201d\u5df4\u54c8\u8d21\u8bf4\u3002\u5468\u4e00\uff0cSweetch \u5ba3\u5e03\u4e86\u7531 Entre\u00e9 Capital \u9886\u6295\u7684 2000 \u4e07\u7f8e\u5143 A \u8f6e\u878d\u8d44\u3002\u5176\u4ed6\u6295\u8d44\u8005\u5305\u62ec Noaber\u3001Kortex Ventures\u3001Insurtech VC\u3001Fin TLV Ventures \u4ee5\u53ca\u73b0\u6709\u6295\u8d44\u8005 Philips\u3001OurCrowd \u548c Qure Ventures\u3002 Bahagon \u662f\u4e00\u540d\u53d7\u8fc7\u57f9\u8bad\u7684\u5bb6\u5ead\u533b\u751f\uff0c\u4f46\u4ed6\u804c\u4e1a\u751f\u6daf\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5728\u6570\u5b57\u5065\u5eb7\u9886\u57df\u5ea6\u8fc7\u3002 2008 \u5e74\uff0cBagahon \u521b\u7acb\u4e86 Clalit Health Services \u7684\u6570\u5b57\u5065\u5eb7\u90e8\u95e8\uff0c\u8fd9\u662f\u4e00\u5bb6\u975e\u8425\u5229\u6027\u4fdd\u9669\u548c\u533b\u7597\u670d\u52a1\u63d0\u4f9b\u5546\uff0c\u76ee\u524d\u4e3a 60% \u7684\u4ee5\u8272\u5217\u4eba\u53e3\u63d0\u4f9b\u4fdd\u9669\u3002\u4ed6\u4e4b\u524d\u7684\u516c\u53f8 Luminox Health \u4e8e 2016 \u5e74\u88ab\u4ee5\u8272\u5217\u6295\u8d44\u8005\u5e73\u53f0 OurCrowd \u6536\u8d2d\uff0cBahagon \u7ee7\u7eed\u7ba1\u7406\u8be5\u57fa\u91d1\u7684\u6570\u5b57\u5065\u5eb7\u90e8\u95e8\u3002 Sweetch \u6210\u7acb\u4e8e 2013 \u5e74\uff0c\u662f Bahagon \u7684\u53e6\u4e00\u4e2a\u6570\u5b57\u5065\u5eb7\u4f01\u4e1a\u2014\u2014\u8fd9\u6b21\u65e8\u5728\u63d0\u9ad8\u60a3\u8005\u7684\u4f9d\u4ece\u6027\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u5f15\u8d77\u4e86\u4e00\u4e9b\u5174\u8da3\uff0c\u5e76\u4e14\u662f\u4ece 400 \u591a\u4e2a\u53c2\u4e0e\u62dc\u8033 G4A \u8ba1\u5212\u4e2d\u9009\u51fa\u7684\u4e94\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e4b\u4e00\uff0c\u7c7b\u4f3c\u4e8e\u5236\u836f\u5de8\u5934\u5f00\u53d1\u7684\u52a0\u901f\u5668\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0cSweetch \u9996\u5e2d\u6267\u884c\u5b98 Yoni Nevo \u8868\u793a\u8be5\u5e94\u7528\u7a0b\u5e8f\u62e5\u6709\u201c\u6570\u4e07\u7528\u6237\u201d\uff08\u8be5\u516c\u53f8\u4e0d\u4f1a\u63d0\u4f9b\u5177\u4f53\u6570\u5b57\uff09\u3002\n\u5b83\u76ee\u524d\u88ab\u7528\u4e8e\u60a3\u6709\u5fc3\u8840\u7ba1\u75be\u75c5\u3001\u7cd6\u5c3f\u75c5\u3001\u80a5\u80d6\u75c7\u3001\u9ad8\u8840\u538b\u3001\u7c7b\u98ce\u6e7f\u6027\u5173\u8282\u708e\u3001\u708e\u75c7\u6027\u80a0\u75c5\u7684\u60a3\u8005\uff0c\u5e76\u4e14\u4e0e\u5176\u4ed6\u60a3\u8005\u6709\u6240\u4e0d\u540c\uff1a\u4e73\u817a\u764c\u6cbb\u7597\u3002 Sweetch \u4e0d\u662f\u4e3a\u7528\u6237\u5728\u5e94\u7528\u5546\u5e97\u968f\u610f\u4e0b\u8f7d\u800c\u8bbe\u8ba1\u7684\uff08\u4f60\u53ef\u4ee5\u4e0b\u8f7d\u5b83\uff0c\u4f46\u6ca1\u6709\u8bbf\u95ee\u7801\u5c31\u65e0\u6cd5\u4e0b\u8f7d\uff09\uff1b\u76f8\u53cd\uff0c\u4ed6\u4eec\u7684\u4e0a\u5e02\u6218\u7565\u662f\u4e0e\u533b\u7597\u4fdd\u5065\u7ec4\u7ec7\u3001\u5236\u836f\u516c\u53f8\u3001\u4ed8\u6b3e\u4eba\u6216\u4f9b\u5e94\u5546\u5408\u4f5c\u3002\u7136\u540e\u63d0\u4f9b\u8005\u53ef\u80fd\u4f1a\u5728\u5b9e\u9645\u6cbb\u7597\u7684\u540c\u65f6\u5f00\u51fa Sweetch\uff0c\u4ee5\u9f13\u52b1\u4ed6\u4eec\u575a\u6301\u4e0b\u53bb\u3002\u6709\u8bc1\u636e\u8868\u660e\uff0c\u4eba\u4eec\u5e76\u4e0d\u603b\u662f\u542c\u4ece\u533b\u751f\u7684\u547d\u4ee4\u2014\u2014\u5c24\u5176\u662f\u5728\u6162\u6027\u75c5\u65b9\u9762\u3002\u75be\u75c5\u9884\u9632\u63a7\u5236\u4e2d\u5fc3 2017 \u5e74\u7684\u4e00\u4efd\u62a5\u544a\u6307\u51fa\uff0c\u5728\u7f8e\u56fd\u5f00\u51fa\u7684\u5904\u65b9\u4e2d\u6709\u4e94\u5206\u4e4b\u4e00\u4ece\u672a\u586b\u5199\u8fc7\uff0c\u591a\u8fbe 50% \u7684\u836f\u7269\u88ab\u9519\u8bef\u670d\u7528\uff08\u5728\u9519\u8bef\u7684\u65f6\u95f4\u3001\u9519\u8bef\u7684\u5242\u91cf\u7b49\uff09\u3002\u7136\u800c\uff0c\u63d0\u9ad8\u60a3\u8005\u4f9d\u4ece\u6027\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u95ee\u9898\u3002 CDC \u62a5\u544a\u6982\u8ff0\u4e86\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\u2014\u2014\u5176\u4e2d\u4e00\u4e9b\u4e0e\u533b\u7597\u4fdd\u5065\u7cfb\u7edf\u7684\u5173\u7cfb\u6bd4\u4e0e\u5065\u5eb7\u6280\u672f\u7684\u5173\u7cfb\u66f4\u5927\u3002\u5176\u4e2d\u5305\u62ec\u964d\u4f4e\u7528\u836f\u7684\u7ecf\u6d4e\u969c\u788d\uff0c\u589e\u52a0\u57fa\u4e8e\u56e2\u961f\u7684\u533b\u7597\u4fdd\u5065\uff08\u4f8b\u5982\uff0c\u60a8\u7684\u836f\u5242\u5e08\u548c\u533b\u751f\u534f\u8c03\u5904\u65b9\u836f\uff09\uff0c\u4ee5\u53ca\u9996\u5148\u589e\u52a0\u83b7\u5f97\u533b\u7597\u4fdd\u5065\u7684\u673a\u4f1a\u3002\u8be5\u62a5\u544a\u786e\u5b9e\u5f3a\u8c03\u4e86\u5065\u5eb7\u4fe1\u606f\u6280\u672f\u5e2e\u52a9\u89e3\u51b3\u8fdd\u89c4\u95ee\u9898\u7684\u9014\u5f84\uff08\u5b83\u7279\u522b\u63d0\u5230\u4e86\u7535\u5b50\u5904\u65b9\u8f6f\u4ef6\uff09\u3002\u50cf\u65af\u5a01\u5947\u4e00\u6837\uff0c\u79d1\u6280\u516c\u53f8\u53ea\u6709\u5728\u81ea\u8eab\u6ca1\u6709\u4e0d\u5408\u89c4\u95ee\u9898\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u89e3\u51b3\u533b\u5b66\u4e0a\u7684\u4e0d\u5408\u89c4\u95ee\u9898\u3002\u4e3a\u6b64\uff0cBahagon \u8868\u793a\u8be5\u5e94\u7528\u7a0b\u5e8f\u6709\u7528\u6237\u7559\u5b58\u8bb0\u5f55\u3002 \u201c\u5373\u4f7f\u5728 24 \u4e2a\u6708\u4e4b\u540e\uff0c\u6211\u4eec\u4ecd\u7136\u770b\u5230\u5927\u7ea6 45% \u5f00\u59cb\u4f7f\u7528\u8be5\u7cfb\u7edf\u7684\u60a3\u8005\u7ee7\u7eed\u4f7f\u7528\u5b83\uff0c\u201d\u4ed6\u8bf4\u3002\u7528\u6237\u7559\u5b58\u5bf9\u4efb\u4f55\u5e94\u7528\u5f00\u53d1\u8005\u6765\u8bf4\u90fd\u662f\u4e00\u4e2a\u597d\u5146\u5934\u3002\u4f46\u5728\u5065\u5eb7\u9886\u57df\uff0c\u60c5\u51b5\u66f4\u4e3a\u590d\u6742\u3002\u4e00\u4e9b\u7814\u7a76\u8868\u660e\uff0c\u6d88\u8d39\u8005\u8bc4\u5206\u5e76\u4e0d\u662f\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5728\u6539\u5584\u7ed3\u679c\u65b9\u9762\u6548\u679c\u5982\u4f55\u7684\u7cdf\u7cd5\u6807\u5fd7\uff08\u60a8\u53ef\u80fd\u559c\u6b22\u5e76\u4f7f\u7528\u67d0\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u5b83\u4e0d\u4f1a\u8ba9\u60a8\u53d8\u5f97\u66f4\u5065\u5eb7\uff09\u3002\n\u5728\u8fd9\u65b9\u9762\uff0c\u65af\u5a01\u5947\u786e\u5b9e\u6709\u4e00\u9879\u8bd5\u9a8c\uff0c\u5728\u7ea6\u7ff0\u970d\u666e\u91d1\u65af\u4e34\u5e8a\u7814\u7a76\u7f51\u7edc\u7684\u4e24\u4e2a\u5730\u70b9\u8fdb\u884c\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u5728\u4e09\u4e2a\u6708\u5185\u5bf9 55 \u540d\u60a3\u6709\u524d\u9a71\u7cd6\u5c3f\u75c5\u7684\u6210\u5e74\u4eba\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002 47 \u540d\u53c2\u4e0e\u8005\u5b8c\u6210\u4e86\u8bd5\u9a8c\uff0c\u5e73\u5747\u800c\u8a00\uff0c\u4ed6\u4eec\u5e73\u5747\u589e\u52a0\u4e86 2.8 MET \u5c0f\u65f6\u7684\u4f53\u529b\u6d3b\u52a8\uff08\u4ed6\u4eec\u53ef\u80fd\u5b9e\u9645\u4e0a\u953b\u70bc\u4e86\u66f4\u77ed\u7684\u65f6\u95f4\uff0c\u4f46\u4ed6\u4eec\u7684\u5f3a\u5ea6\u76f8\u5f53\u4e8e 2.8 \u5c0f\u65f6\u7684\u5de5\u4f5c\uff09\uff0c\u5e76\u51cf\u6389\u4e86\u7ea6 1.6 \u516c\u65a4\u3002\u7528\u6237\u8fd8\u964d\u4f4e\u4e86\u4ed6\u4eec\u7684 A1c \u6c34\u5e73\uff0c\u8fd9\u662f\u8861\u91cf\u5e73\u5747\u8840\u7cd6\u7684\u5173\u952e\u6307\u6807\u3002\u7cd6\u5c3f\u75c5\u524d\u671f\u6210\u4eba\u7684 A1c \u901a\u5e38\u5728 5.7% \u5230 6.5% \u4e4b\u95f4\uff0c\u800c\u672c\u8bd5\u9a8c\u4e2d\u7684\u4eba\u5c06\u5176 A1c \u6c34\u5e73\u964d\u4f4e\u4e86\u7ea6 0.1%\uff08\u8be5\u7814\u7a76\u5c06\u8fd9\u79cd\u964d\u4f4e\u79f0\u4e3a\u201c\u5177\u6709\u4e34\u5e8a\u610f\u4e49\u201d\u3002\uff09\u8be5\u7814\u7a76\u5e76\u672a\u4e13\u95e8\u5c06 Sweetch \u4e0e\u4efb\u4f55\u5176\u4ed6\u7cd6\u5c3f\u75c5\u524d\u671f\u5e72\u9884\u63aa\u65bd\u3002\u4f46\u662f\uff0c\u5373\u5c06\u5bf9\u6b64\u8fdb\u884c\u7814\u7a76\u3002\u5728 2020 \u5e74 12 \u6708\u7684\u4e00\u6b21\u91c7\u8bbf\u4e2d\uff0c\u5df4\u54c8\u8d21\u6307\u51fa\uff0c\u65af\u5a01\u5947\u5df2\u83b7\u5f97\u7f8e\u56fd\u56fd\u7acb\u536b\u751f\u7814\u7a76\u9662\u7684\u8d44\u52a9\uff0c\u4ee5\u7ee7\u7eed\u6d4b\u8bd5\u65af\u5a01\u5947\u4e0e\u5176\u4ed6\u7cd6\u5c3f\u75c5\u201c\u9ec4\u91d1\u6807\u51c6\u201d\u5e72\u9884\u63aa\u65bd\u7684\u5bf9\u6bd4\u3002 Nevo \u548c Bahagon \u6ca1\u6709\u63d0\u4f9b\u8be5\u9879\u76ee\u7684\u5177\u4f53\u66f4\u65b0\uff0c\u4f46\u6307\u51fa\u201c\u5927\u7ea6\u4e00\u4e2a\u6708\u540e\u201d\u8be5\u516c\u53f8\u53ef\u80fd\u4f1a\u5ba3\u5e03 NIH \u8d44\u91d1\u548c\u5373\u5c06\u8fdb\u884c\u7684\u968f\u673a\u5bf9\u7167\u8bd5\u9a8c\u7684\u66f4\u65b0\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u516c\u53f8\u8ba1\u5212\u5229\u7528 A \u8f6e\u878d\u8d44\u6269\u5c55\u5230\u7f8e\u56fd\u548c\u5df4\u897f\u7684\u5e02\u573a\uff0c\u6269\u5927\u7528\u6237\u7fa4\u5e76\u589e\u5f3a\u5e73\u53f0\uff0c\u4e3a\u66f4\u591a\u6761\u4ef6\u63d0\u4f9b\u5177\u4f53\u548c\u91cf\u8eab\u5b9a\u5236\u7684\u5efa\u8bae\u3002", "note_en": "Yossi Bahagon, the founder of Sweetch, describes the company\u2019s approach to digital reminders as a mixture of artificial intelligence and emotional intelligence. The app will use AI to analyse \u201clifeprint\u201d data picked up through a smartphone. Then it delivers messages to when you might be more likely to respond to them and in a \u201ctone of voice\u201d that encourages compliance.\n For instance if you have meetings on Mondays between 12 and 3, but still want to get in some exercise, Sweetch won\u2019t suggest getting a workout in during those times, or shame you for sitting through a meeting rather than getting a run in.\n  \u201cIt\u2019s about ongoing hyperpersonalized engagement that increases the likelihood of the patient doing what [they need] to do,\u201d says Bahagon.\n On Monday, Sweetch announced a $20 million Series A round led by Entre\u00e9 Capital. Other investors include Noaber, Kortex Ventures, Insurtech VC, Fin TLV Ventures and existing investors Philips, OurCrowd and Qure Ventures.\n Bahagon is a family physician by training, but he\u2019s spent the majority of his career in the digital health arena. In 2008 Bagahon founded the digital health division of Clalit Health Services, a nonprofit insurance and medical services provider that currently insures  60% of the Israeli population. His previous company, Luminox Health, was acquired by Israeli investor platform OurCrowd in 2016, and Bahagon stayed on to manage the fund\u2019s digital health arm.\n Sweetch, which was founded in 2013, is yet another digital health venture for Bahagon \u2014 this time aimed at increased patient compliance. The app has already generated some interest and was one of five apps selected from over 400 to participate in the  Bayer G4A program, something like an accelerator developed by the pharmaceutical giant.\n So far, Sweetch CEO Yoni Nevo says the app has \u201ctens of thousands of users,\u201d (the company would not provide a specific number).\n It\u2019s currently being used in patients with cardiovascular diseases, diabetes, obesity, hypertension, rheumatoid arthritis, inflammatory bowel disease, and, in a bit of a departure from the rest: breast cancer treatment.\n Sweetch isn\u2019t designed for users to download at will on the app store (you can download it, but won\u2019t get far without an access code); their go-to-market strategy is instead to partner with healthcare organizations, pharma companies, payers or providers. Then providers might prescribe Sweetch alongside the actual treatment to encourage them to stick with it.\n There is evidence that people don\u2019t always follow doctors\u2019 orders \u2014 particularly when it comes to chronic conditions.  One 2017 report from the CDC notes that one in five prescriptions written in the United States are never filled, and up to 50% of medicines were taken incorrectly (at the wrong time, wrong dose, etc.).\n Improving patient compliance, though, is a more complicated problem. The CDC report outlined a few solutions \u2014 some of which have more to do with the healthcare system than they do with health tech. Those include lowering economic barriers to medication, increasing team-based healthcare (your pharmacist and doctor coordinating prescription refills, for instance), and increasing access to healthcare in the first place.\n The report does highlight an avenue for health information technology to help address the noncompliance problem (it specifically mentions e-prescribing software).\n Tech, like Sweetch, can only address the noncompliance problem in medicine if it doesn\u2019t have a noncompliance problem of its own. To that end, Bahagon says the app has a record of user retention. \u201cEven after 24 months, we still see around 45% of the patients that started using the system continue to use it,\u201d he says.\n User retention is a good sign for any app developer. But in the health space, it\u2019s more complicated. Some studies  suggest that consumer ratings are poor markers of how well these apps work to improve outcomes (you might like an app and use it, but it doesn\u2019t make you any healthier).\n In that regard, Sweetch does  have a trial under its belt, conducted at two sites in the Johns Hopkins Clinical Research Network.\n The app was tested on 55 adults with prediabetes over the course of three months. Forty-seven of the participants finished the trial, and on average, they increased their physical activity by an average of 2.8 MET-hours (they may have actually exercised for shorter periods, but their intensity was the equivalent of 2.8 hours of work), and lost about 1.6 kilograms.\n The users also lowered their A1c levels, a key measure of average blood sugar. Prediabetic adults usually have an A1c  between 5.7 and 6.5 percent, and those in this trial reduced their A1c levels by about .1% (the study refers to that reduction as \u201cclinically meaningful.\u201d)\n This study didn\u2019t specifically compare Sweetch to any other prediabetes interventions. However, a study on that is upcoming. In  a December 2020 interview, Bahagon noted that Sweetch had received a grant from the National Institutes of Health to continue testing Sweetch against other \u201cgold standard\u201d interventions for diabetes.\n Nevo and Bahagon didn\u2019t provide concrete updates on the project, but noted that \u201cin a month or so\u201d the company may announce updates on the NIH funding and upcoming randomized controlled trials.\n In the meantime, the company plans to use the Series A funding to expand into markets in the U.S. and Brazil, grow the user base and enhance the platform to provide specific and tailored recommendations for even more conditions.", "posttime": "2021-07-24 14:08:33", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7a0b\u5e8f,\u5f00\u53d1,entre,led,sweetch", "title": "Sweetch \u5f00\u53d1\u4e86\u4e00\u6b3e AI \u9a71\u52a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u65e8\u5728\u63d0\u9ad8\u60a3\u8005\u7684\u4f9d\u4ece\u6027\u548c\u6539\u5584\u5065\u5eb7\u7ed3\u679c\uff0c\u7b79\u96c6\u4e86 2000 \u4e07\u7f8e\u5143\u7684 A \u8f6e\u878d\u8d44\uff0c\u7531Entre\u00e9 Capital \u9886\u6295", "title_en": "Sweetch, which has developed an AI-powered app that aims to increase patient compliance and boost health outcomes, raises $20M Series A led by Entre\u00e9 Capital", "transed": 1, "url": "https://techcrunch.com/2021/07/19/switch-raises-20m-for-a-personalized-engagement-system-designed-to-boost-health-outcomes/", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u5f00\u53d1", "entre", "led", "sweetch"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069420, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3\u7684\u65f6\u95f4\u91cc\uff0c\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\u4ee5\u51ef\u5c14\u7279\u4eba\u6216\u963f\u62c9\u4f2f\u8bed\u7684\u65b9\u5f0f\u7ed8\u5236\u7ed3\uff0c\u5c31\u50cf\u5728\u53d1\u5149\u7684\u5723\u7ecf\u6216\u53ef\u5170\u7ecf\uff08\u5982\u51ef\u5c14\u65af\u4e4b\u4e66\u6216\u6f02\u4eae\u7684\u90e8\u843d\u7eb9\u8eab\uff09\u4e2d\u7ed8\u5236\u7684\u90a3\u6837\u3002\u53ef\u4ee5\u6253\u5370\u7684\u6d77\u62a5 \u5982\u679c\u60a8\u662f\u8001\u5e08\uff0c\u6211\u4eec\u9080\u8bf7\u60a8\u5728\u8bfe\u5802\u4e0a\u6548\u4eff\u8fd9\u79cd\u65b9\u6cd5\uff0c\u8bf7\u6253\u5370\u6b64\u6d77\u62a5\u4f5c\u4e3a\u8be5\u65b9\u6cd5\u7684\u53c2\u8003\u3002", "note_en": "In an hour or so, you will learn how to draw knotwork, in the Celtic or the Arabic manner, like those in illuminated bibles or corans such as the Book of Kells or the nice tribal tatoos.\n    Poster you can print    If you are a teacher, you are invited to emulate this method in your classroom, print this poster as a reference of the method.", "posttime": "2021-07-24 14:08:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "celtic,\u65b9\u6cd5", "title": "\u51ef\u5c14\u7279\u7ed3\uff082019\uff09", "title_en": "Celtic Knotwork (2019)", "transed": 1, "url": "http://www.entrelacs.net/-Celtic-Knotwork-The-ultimate-", "via": "", "real_tags": ["celtic", "\u65b9\u6cd5"]}]