[{"category": "", "categoryclass": "", "imagename": "fa8e1970c1559e22ccdfba516d81ef6e.png", "infoid": 1069361, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5168\u7403 Go \u793e\u533a\u4ece\u4e00\u5f00\u59cb\u5c31\u63a5\u53d7\u4e86 GitHub\u2014\u2014\u4f5c\u4e3a\u4ee3\u7801\u534f\u4f5c\u7684\u5730\u65b9\u548c\u53d1\u5e03\u5305\u7684\u5730\u65b9\u2014\u2014\u5bfc\u81f4 Go \u6210\u4e3a\u4eca\u5929 GitHub \u4e0a\u6392\u540d\u524d 15 \u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002\u6211\u4eec\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03 GitHub \u7684\u4f9b\u5e94\u94fe\u5b89\u5168\u529f\u80fd\u73b0\u5df2\u53ef\u7528\u4e8e Go \u6a21\u5757\uff0c\u8fd9\u5c06\u6709\u52a9\u4e8e Go \u793e\u533a\u53d1\u73b0\u3001\u62a5\u544a\u548c\u9884\u9632\u5b89\u5168\u6f0f\u6d1e\u3002 Go \u7684\u521b\u5efa\u90e8\u5206\u662f\u4e3a\u4e86\u89e3\u51b3\u7ba1\u7406\u5927\u578b\u8f6f\u4ef6\u4e2d\u7684\u4f9d\u8d56\u9879\u7684\u95ee\u9898\u3002 GitHub \u662f\u5f00\u6e90 Go \u6a21\u5757\u6700\u53d7\u6b22\u8fce\u7684\u4e3b\u673a\u3002\u4eca\u5929\u5ba3\u5e03\u7684\u529f\u80fd\u4e0d\u4ec5\u4f1a\u5e2e\u52a9 GitHub \u7528\u6237\uff0c\u8fd8\u4f1a\u5e2e\u52a9\u4efb\u4f55\u4f9d\u8d56 GitHub \u6258\u7ba1\u6a21\u5757\u7684\u4eba\u3002\u6211\u4eec\u5f88\u9ad8\u5174 GitHub \u6b63\u5728\u6295\u8d44\u4e8e\u6709\u76ca\u4e8e\u6574\u4e2a Go \u751f\u6001\u7cfb\u7edf\u7684\u6539\u8fdb\uff0c\u6211\u4eec\u671f\u5f85\u672a\u6765\u4e0e\u4ed6\u4eec\u8fdb\u884c\u66f4\u591a\u5408\u4f5c\u3002 \u2013 Steve Francia\uff0c\u4ea7\u54c1\u8d1f\u8d23\u4eba\uff1aGo Language @ Google Go \u6a21\u5757\u4e8e 2019 \u5e74\u63a8\u51fa\uff0c\u4f7f\u4f9d\u8d56\u7ba1\u7406\u66f4\u5bb9\u6613\uff0c\u7248\u672c\u4fe1\u606f\u66f4\u660e\u786e\uff0c\u6839\u636e Go \u5f00\u53d1\u4eba\u5458\u8c03\u67e5 2020 \u5df2\u83b7\u200b\u200b\u5f97\u8fd1\u4e4e\u666e\u904d\u7684\u91c7\u7528\u3002\u4e0b\u9762\uff0c\u6211\u5c06\u5411\u60a8\u4ecb\u7ecd GitHub \u7684\u6bcf\u4e2a\u4f9b\u5e94\u94fe\u5b89\u5168\u529f\u80fd\u5982\u4f55\u4e0e Go \u6a21\u5757\u914d\u5408\u4f7f\u7528\uff0c\u4ee5\u63d0\u9ad8 Go \u793e\u533a\u7684\u5b89\u5168\u6027\u3002 GitHub \u7684\u54a8\u8be2\u6570\u636e\u5e93\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u5b89\u5168\u54a8\u8be2\u6570\u636e\u5e93\uff0c\u4e13\u6ce8\u4e8e\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u9ad8\u8d28\u91cf\u3001\u53ef\u64cd\u4f5c\u7684\u6f0f\u6d1e\u4fe1\u606f\u3002\u5b83\u5728\u77e5\u8bc6\u5171\u4eab\u7f72\u540d 4.0 \u4e0b\u83b7\u5f97\u8bb8\u53ef\uff0c\u56e0\u6b64\u6570\u636e\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u53d1\u5e03\u4e86 150 \u591a\u4e2a\u73b0\u6709\u7684 Go \u5efa\u8bae\uff0c\u5e76\u4e14\u968f\u7740\u6211\u4eec\u7ba1\u7406\u73b0\u6709\u6f0f\u6d1e\u548c\u5bf9\u65b0\u53d1\u73b0\u7684\u6f0f\u6d1e\u8fdb\u884c\u5206\u7c7b\uff0c\u8fd9\u4e2a\u6570\u5b57\u6bcf\u5929\u90fd\u5728\u589e\u957f\u3002\u5982\u679c\u60a8\u662f Go \u6a21\u5757\u7ef4\u62a4\u8005\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b89\u5168\u516c\u544a\u6765\u534f\u8c03\u62ab\u9732\u6f0f\u6d1e\u3002\u60a8\u53ef\u4ee5\u4e0e\u6f0f\u6d1e\u62a5\u544a\u8005\uff08\u4f8b\u5982\u5b89\u5168\u7814\u7a76\u4eba\u5458\uff09\u5408\u4f5c\uff0c\u5728\u516c\u5f00\u5ba3\u5e03\u6f0f\u6d1e\u4e4b\u524d\u79c1\u4e0b\u8ba8\u8bba\u548c\u4fee\u590d\u6f0f\u6d1e\u3002\u5b89\u5168\u516c\u544a\u8fd8\u4f7f\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u4e3a\u60a8\u7684\u516c\u544a\u8bf7\u6c42\u5e38\u89c1\u6f0f\u6d1e\u548c\u66b4\u9732 (CVE) \u6807\u8bc6\u53f7\uff0c\u5e76\u5c06\u5176\u53d1\u5e03\u5230\u56fd\u5bb6\u6f0f\u6d1e\u6570\u636e\u5e93 (NVD)\u3002 GitHub \u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\u5206\u6790\u5b58\u50a8\u5e93\u7684 go.mod \u6587\u4ef6\u4ee5\u4e86\u89e3\u5b58\u50a8\u5e93\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u9664\u4e86\u5b89\u5168\u5efa\u8bae\u4e4b\u5916\uff0c\u4f9d\u8d56\u5173\u7cfb\u56fe\u8fd8\u63d0\u4f9b\u4e86\u63d0\u9192\u5f00\u53d1\u4eba\u5458\u6ce8\u610f\u6613\u53d7\u653b\u51fb\u7684\u4f9d\u8d56\u9879\u6240\u9700\u7684\u4fe1\u606f\u3002\u8981\u67e5\u770b\u5b58\u50a8\u5e93\u68c0\u6d4b\u5230\u7684\u4f9d\u8d56\u9879\uff0c\u8bf7\u9009\u62e9\u5b58\u50a8\u5e93\u7684 Insights \u9009\u9879\u5361\uff0c\u7136\u540e\u4ece\u5de6\u4fa7\u8fb9\u680f\u4e2d\u9009\u62e9 Dependency graph\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a\u516c\u5171\u5b58\u50a8\u5e93\u542f\u7528\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u4f46\u60a8\u5fc5\u987b\u4e3a\u79c1\u6709\u5b58\u50a8\u5e93\u542f\u7528\u5b83\u3002\u5982\u679c\u60a8\u7684\u516c\u5171\u5b58\u50a8\u5e93\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\u5c1a\u672a\u586b\u5145\uff0c\u5f88\u5feb\u5c31\u4f1a\u586b\u5145\u3002\u5982\u679c\u60a8\u8feb\u4e0d\u53ca\u5f85\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u66f4\u6539\u63a8\u9001\u5230 go.mod \u6587\u4ef6\u6765\u89e6\u53d1\u66f4\u65b0\u3002\u4e3a\u4e86\u5e2e\u52a9\u9632\u6b62\u5f15\u5165\u65b0\u7684\u6f0f\u6d1e\uff0c\u60a8\u53ef\u4ee5\u5728\u5ba1\u67e5\u62c9\u53d6\u8bf7\u6c42\u65f6\u4f7f\u7528\u4f9d\u8d56\u9879\u5ba1\u67e5\u6765\u67e5\u770b\u5bf9 go.mod \u6587\u4ef6\u6240\u505a\u66f4\u6539\u7684\u5f71\u54cd\u3002\u5f53\u60a8\u5728\u4f7f\u7528\u7684 Go \u6a21\u5757\u4e2d\u53d1\u73b0\u65b0\u6f0f\u6d1e\u65f6\uff0c Dependabot \u8b66\u62a5\u4f1a\u901a\u77e5\u60a8\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u65b0\u7684\u901a\u77e5\u914d\u7f6e\u6765\u5fae\u8c03\u60a8\u6536\u5230\u7684\u901a\u77e5\u3002\u6709\u4ec0\u4e48\u6bd4\u5bf9\u8106\u5f31\u7684\u4f9d\u8d56\u9879\u53d1\u51fa\u8b66\u62a5\u66f4\u597d\u7684\u5462\uff1f\u83b7\u53d6\u62c9\u53d6\u8bf7\u6c42\uff0c\u81ea\u52a8\u5c06\u6613\u53d7\u653b\u51fb\u7684 Go \u6a21\u5757\u5347\u7ea7\u5230\u6ca1\u6709\u6f0f\u6d1e\u7684\u7248\u672c\uff01\u8fd9\u6b63\u662f Dependabot \u5b89\u5168\u66f4\u65b0\u6240\u505a\u7684\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u81ea\u52a8\u751f\u6210\u62c9\u53d6\u8bf7\u6c42\u4ee5\u66f4\u65b0\u6613\u53d7\u653b\u51fb\u7684\u4f9d\u8d56\u9879\u7684\u5b58\u50a8\u5e93\u6bd4\u90a3\u4e9b\u6ca1\u6709\u7684\u5b58\u50a8\u5e93\u4fee\u8865\u8f6f\u4ef6\u7684\u901f\u5ea6\u5feb 40%\u3002\u7acb\u5373\u5f00\u59cb\u4fdd\u62a4\u60a8\u7684 Go \u5b58\u50a8\u5e93\uff0c\u6216\u4e86\u89e3\u6709\u5173 GitHub \u7684\u6bcf\u4e2a\u4f9b\u5e94\u94fe\u5b89\u5168\u529f\u80fd\u7684\u66f4\u591a\u4fe1\u606f\uff1a", "note_en": "The global Go community embraced GitHub from the beginning\u2014both as a place to collaborate on code and a place to publish packages\u2014leading to Go becoming one of the top 15 programming languages on GitHub today. We\u2019re excited to announce that GitHub\u2019s supply chain security features are now available for Go modules, which will help the Go community discover, report, and prevent security vulnerabilities.\n Go was created, in part, to address the problem of managing dependencies in large-scale software. GitHub is the most popular host for open-source Go modules. The features announced today will help not just GitHub users but anyone who depends on GitHub-hosted modules. We are thrilled that GitHub is investing in improvements that benefit the entire Go ecosystem, and we look forward to more collaborations with them in the future.   \u2013 Steve Francia, Product Lead: Go Language @ Google\n Go modules were introduced in 2019 to make dependency management easier and version information more explicit, and according to the  Go Developer Survey 2020 have gained near-universal adoption. Below, I\u2019ll walk you through how each of GitHub\u2019s supply chain security features works with Go modules to improve security for the Go community.\n  GitHub\u2019s Advisory Database is an open database of security advisories focused on high quality, actionable vulnerability information for developers. It\u2019s licensed under  Creative Commons Attribution 4.0, so the data can be used anywhere.\n So far, we\u2019ve published  over 150 existing Go advisories, and this number is growing every day as we curate existing vulnerabilities and triage newly discovered ones.\n  If you\u2019re a Go module maintainer, you can use Security Advisories for coordinated disclosure of vulnerabilities. You can collaborate with vulnerability reporters, such as security researchers, to privately discuss and fix vulnerabilities before announcing them publicly. Security Advisories also make it easy for you to request a  Common Vulnerabilities and Exposures (CVE) identification number for your advisories and to publish them to the  National Vulnerability Database (NVD).\n   GitHub\u2019s dependency graph analyzes a repository\u2019s  go.mod files to understand the repository\u2019s dependencies. Along with security advisories, the dependency graph provides the information needed to alert developers to vulnerable dependencies. To view a repository\u2019s detected dependencies, select the repository\u2019s  Insights tab, then select  Dependency graph from the sidebar on the left.\n  The dependency graph is enabled by default for public repositories, but you must enable it  for private repositories. If the dependency graph for your public repository hasn\u2019t already been populated, it will be soon. If you can\u2019t wait you can trigger the update by pushing a change to your  go.mod file.\n To help prevent new vulnerabilities from being introduced, you can use  dependency review to see the impact of changes to your  go.mod files when reviewing pull requests.\n   Dependabot alerts notify you when new vulnerabilities are discovered in Go modules you\u2019re already using. You can use our  new notification configuration to fine-tune which notifications you receive.\n   What\u2019s better than being alerted to a vulnerable dependency? Getting a pull request that automatically upgrades your vulnerable Go modules to a version without the vulnerability! That\u2019s exactly what Dependabot security updates do.\n We\u2019ve found that repositories that automatically generate pull requests to update vulnerable dependencies patch their software  40% faster than those who don\u2019t.\n   Get started today by  securing your Go repository, or learn more about each of GitHub\u2019s supply chain security features:", "posttime": "2021-07-24 07:23:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e26\u6765,supply,\u6f0f\u6d1e", "title": "\u4e3a Go \u793e\u533a\u5e26\u6765\u4f9b\u5e94\u94fe\u5b89\u5168\u529f\u80fd", "title_en": "Bringing supply chain security features to the Go community", "transed": 1, "url": "https://github.blog/2021-07-22-github-supply-chain-security-features-go-community/", "via": "", "real_tags": ["\u5e26\u6765", "supply", "\u6f0f\u6d1e"]}, {"category": "", "categoryclass": "", "imagename": "e5465b3c0eac91cbdd27f5cfbb5a6a50.jpg", "infoid": 1069360, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\uff08\u53c8\u4e00\u4e2a\uff09\u53cd\u5bf9\u5728\u60a8\u53d7\u4eba\u5c0a\u656c\u7684\u7f51\u7ad9\u4e0a\u4f7f\u7528\u7b2c\u4e09\u65b9\u5d4c\u5165\u7684\u8bba\u70b9\uff1a\u8272\u60c5\u516c\u53f8 5 Star HD Porn \u8d2d\u4e70\u4e86\u89c6\u9891\u6258\u7ba1\u7f51\u7ad9 Vidme \u7684\u8fc7\u671f\u57df\u540d\uff0c\u8be5\u7f51\u7ad9\u4e8e 2017 \u5e74\u5012\u95ed\u3002\u8fd9\u610f\u5473\u7740\u4efb\u4f55\u5e26\u6709 Vidme \u7684\u7f51\u7ad9\u73b0\u5728\u90fd\u53ef\u4ee5\u5d4c\u5165\u5bf9\u4ed6\u4eec\u6709\u8272\u60c5\u5185\u5bb9\u3002\u6839\u636e\u6700\u5148\u62a5\u9053\u8fd9\u4e2a\u6545\u4e8b\u7684\u4e3b\u677f\uff0c\u5e26\u6709\u610f\u5916\u8272\u60c5\u5d4c\u5165\u7684\u7f51\u7ad9\u5217\u8868\u5305\u62ec\u7ebd\u7ea6\u6742\u5fd7\u3001\u534e\u76db\u987f\u90ae\u62a5\u3001\u8d6b\u82ac\u987f\u90ae\u62a5\u7b49\u3002\u662f\u7684\uff0c\u6211\u4eec\u5728 The Verge \u4e0a\u53d1\u73b0\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u5d4c\u5165\uff0c\u7136\u540e\u5c06\u5176\u7981\u7528\u3002\u8fd9\u662f\u94fe\u63a5\u8150\u70c2\u7684\u4e00\u4e2a\u975e\u5e38\u6781\u7aef\u7684\u4f8b\u5b50\uff0c\u5f53\u5728\u7ebf\u5185\u5bb9\u6216\u56fe\u50cf\u88ab\u5220\u9664\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u635f\u574f\u65f6\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u6b64\u94fe\u63a5\u4e0d\u4f1a\u6307\u5411\u5176\u539f\u59cb\u76ee\u6807\u3002\u5728\u524d\u603b\u7edf\u7279\u6717\u666e\u5728 1 \u6708\u4efd\u5728\u56fd\u4f1a\u5927\u53a6\u717d\u52a8\u9a9a\u4e71\u540e\u88ab\u7981\u6b62\u4f7f\u7528 Twitter \u4e4b\u540e\uff0c\u6211\u4eec\u770b\u5230\u4e86\u53e6\u4e00\u4e2a\u666e\u904d\u7684\u4f8b\u5b50\u3002\u8fd9\u4f4d\u524d\u603b\u7edf\u591a\u5e74\u6765\u5728 Twitter \u4e0a\u53d1\u51fa\u7684\u6570\u5343\u6761\u63a8\u6587\u90fd\u88ab\u5220\u9664\u4e86\uff0c\u8fd9\u4e9b\u63a8\u6587\u7684\u4efb\u4f55\u5d4c\u5165\u73b0\u5728\u90fd\u663e\u793a\u4e3a\u7a7a\u7684\u7070\u8272\u6846\u3002\u524d\u603b\u7edf\u7684\u4e00\u4e9b\u63a8\u6587\u5fc5\u987b\u6839\u636e\u300a\u603b\u7edf\u8bb0\u5f55\u6cd5\u300b\uff08\u6bd4 Twitter \u65e9\u4e86 40 \u5e74\uff09\u4fdd\u7559\u4e0b\u6765\uff0c\u5e76\u4e14\u4ed6\u7684\u5927\u90e8\u5206\u63a8\u6587\u90fd\u6709\u4e00\u4e2a\u7531\u72ec\u7acb\u5f00\u53d1\u8005\u6784\u5efa\u7684\u53ef\u5206\u7c7b\u5b58\u6863\uff0c\u56e0\u6b64\u4ed6\u7684\u63a8\u6587\u5e76\u672a\u5b8c\u5168\u4ece\u4e92\u8054\u7f51\u3002\u5927\u591a\u6570\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u90fd\u652f\u6301\u5d4c\u5165\u5176\u5185\u5bb9\uff1b Twitter \u5728 2012 \u5e74\u542f\u7528\u4e86\u5d4c\u5165\u529f\u80fd\uff0cFacebook\u3001Snapchat\u3001YouTube \u548c Instagram \u4e5f\u90fd\u5141\u8bb8\u67d0\u4e9b\u7248\u672c\u7684\u5d4c\u5165\u529f\u80fd\u3002 Reddit \u5728\u5176\u5d4c\u5165\u7684\u5185\u5bb9\u4e0a\u6709\u4e00\u4e2a\u9009\u9879\uff0c\u5982\u679c\u5e16\u5b50\u88ab\u7f16\u8f91\uff0c\u7528\u6237\u53ef\u4ee5\u5c06\u5b83\u4eec\u6e05\u7a7a\u3002\u5982\u679c\u4f7f\u7528\u5f97\u5f53\uff0c\u5d4c\u5165\u7684\u5185\u5bb9\u53ef\u4ee5\u5e2e\u52a9\u5728\u7ebf\u8bf4\u660e\u535a\u5ba2\u6587\u7ae0\u6216\u65b0\u95fb\u9879\u76ee\uff0c\u5e76\u63d0\u4f9b\u53ef\u4fe1\u5ea6\u3002\u4f46\u662f\uff0c\u5f53\u94fe\u63a5\u53d8\u574f\u65f6\uff0c\u5c31\u50cf\u5728 Vidme \u6848\u4f8b\u4e2d\u663e\u7136\u90a3\u6837\uff0c\u5904\u7406\u6570\u4ee5\u5343\u8ba1\u7684\u5d4c\u5165\u5185\u5bb9\u53ef\u80fd\u4f1a\u8ba9\u4eba\u5934\u75bc\u4e0d\u5df2\u3002", "note_en": "Here\u2019s (yet another) argument against using third-party embeds on your respectable website: Porn company 5 Star HD Porn bought the expired domain for video hosting site Vidme, which went  out of business in 2017. This means that any websites with Vidme embeds now have porn on them.  According to  Motherboard, which reported the story first, the list of websites with unexpected porn embeds includes  New York Magazine, the  Washington Post,  HuffPost, and others. And yes, we discovered one such embed on  The Verge and have since disabled it.\n   It\u2019s a very extreme example of link rot, which is what happens when online content or images are deleted or otherwise broken, so the links don\u2019t point back to their original targets. We saw another widespread example of this after former  President Trump was banned from Twitter in January after inciting a riot at the Capitol. The thousands of tweets the former president sent out over the years he was on  Twitter were wiped out, and any embeds of the tweets now display as empty gray boxes. Some of the former president\u2019s tweets must be preserved under the Presidential Records Act (which predates Twitter by more than four decades), and there\u2019s a  sortable archive of most of his tweets built by an independent developer, so his tweets haven\u2019t totally disappeared from the internet.\n Most social media platforms have enabled embeds of their content; Twitter activated embeds in 2012, and Facebook, Snapchat, YouTube, and Instagram all allow some version of embeds as well. Reddit has an  option on its embedded content which allows users to have them blanked out if the post is edited.\n Used correctly, embedded content can help illustrate a blog post or news item online, and provide a layer of credibility. But when links go bad, as they apparently have in the Vidme case, it can be a serious headache to deal with thousands of embeds that don\u2019t go where they\u2019re supposed to.", "posttime": "2021-07-24 07:23:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u57df\u540d,\u5185\u5bb9,embeds,\u5d4c\u5165", "title": "\u8d2d\u4e70\u57df\u540d\u540e\uff0c\u65e7\u7684 Vidme \u5d4c\u5165\u5185\u5bb9\u53d8\u6210\u8272\u60c5\u5185\u5bb9", "title_en": "Old Vidme embeds turn into porn after domain purchase", "transed": 1, "url": "https://www.theverge.com/2021/7/22/22589403/porn-site-bought-expired-video-hosting-site-old-embeds", "via": "", "real_tags": ["\u57df\u540d", "\u5185\u5bb9", "embeds", "\u5d4c\u5165"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069359, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6458\u8981\uff1a\u5982\u679c\u6211\u4eec\u6709\u4e00\u79cd\u542f\u53d1\u5f0f\u65b9\u6cd5\u53ef\u4ee5\u5ec9\u4ef7\u5730\u731c\u6d4b\u67d0\u4e2a\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5206\u652f\u9884\u6d4b\u5668\u5728\u7d27\u5bc6\u5faa\u73af\u4e2d\u5220\u9664\u6570\u636e\u4f9d\u8d56\u6027\u3002\u8fd9\u5141\u8bb8 CPU \u5e76\u884c\u8fd0\u884c\u66f4\u591a\u6307\u4ee4\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u3002\u5982\u679c\u8fd9\u4e2a\u89e3\u91ca\u5bf9\u60a8\u6ca1\u6709\u591a\u5927\u610f\u4e49\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u4ee5\u4e86\u89e3\u4e00\u4e9b\u4f7f\u60a8\u7684 CPU \u53d8\u5feb\u7684\u9b54\u6cd5\uff01 Per Vognsen \u7684 twitter \u63d0\u8981\u5145\u6ee1\u4e86\u7b80\u6d01\u7684\u4f4e\u7ea7\u597d\u5947\u5fc3\uff0c\u901a\u5e38\u5229\u7528 CPU \u529f\u80fd\u6765\u83b7\u5f97\u4e00\u4e9b\u6027\u80fd\u4f18\u52bf\u3002\u6700\u8fd1\u4ed6\u5728\u63a8\u7279\u4e0a\u63d0\u5230\u4e86\u4e00\u4e2a\u6211\u4ece\u672a\u542c\u8bf4\u8fc7\u7684\u6280\u5de7\u2014\u2014\u4ef7\u503c\u6295\u673a\u3002 1 \u8be5\u6280\u5de7\u5229\u7528\u5206\u652f\u9884\u6d4b\u5668\u6765\u731c\u6d4b\u503c\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u591a\u6307\u4ee4\u5e76\u884c\u6027\uff0c\u4ece\u800c\u6d88\u9664 L1 \u7f13\u5b58\u4e0a\u7684\u74f6\u9888\u3002\u8bf7\u6ce8\u610f\uff0c\u74f6\u9888\u4e0d\u662f\u7531\u4e8e L1 \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u800c\u662f\u7531\u4e8e L1 \u7f13\u5b58\u547d\u4e2d\u5f15\u5165\u4e86\u4e0d\u9700\u8981\u7684\u6570\u636e\u4f9d\u8d56\u6027\u3002\u53cd\u8fc7\u6765\uff0cPer \u5f15\u7528\u4e86 Paul Khuong \u7684\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u90e8\u7f72\u6b64\u6280\u5de7\u7684\u771f\u5b9e\u793a\u4f8b\u3002\u53cd\u8fc7\u6765\uff0c\u4fdd\u7f57\u63d0\u5230\u4e86\u65c1\u9053\u653b\u51fb\u3002 \u21a9\ufe0e \u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u89e3\u91ca\u4e86\u6240\u6d89\u53ca\u7684\u673a\u5236\uff0c\u5305\u62ec\u5206\u652f\u9884\u6d4b\u548c CPU \u7f13\u5b58\u7684\u5165\u95e8\uff0c\u56e0\u6b64\u4efb\u4f55\u5177\u6709 C \u8bed\u8a00\u77e5\u8bc6\u4ee5\u53ca\u5982\u4f55\u5728 CPU \u4e0a\u6267\u884c\u4ee3\u7801\u7684\u4eba\u90fd\u5e94\u8be5\u80fd\u591f\u7406\u89e3\u3002\u8be5\u5e16\u5b50\u7684\u4ee3\u7801\u53ef\u5728\u6b64\u5904\u83b7\u5f97\u3002\u6240\u6709\u6570\u5b57\u5747\u6765\u81ea\u81f3\u5f3a E5-1650 v3\uff0c\u8fd9\u662f\u4e00\u6b3e\u82f1\u7279\u5c14 Haswell \u5904\u7406\u5668\uff0c\u5177\u6709 32kB\u3001256kB \u548c 15MB \u7684 L1/L2/L3 \u7f13\u5b58\u3002\u4ee3\u7801\u662f\u7528 clang -O3 \u7f16\u8bd1\u7684\uff0c\u800c\u4e0d\u662f\u7528 gcc \u7f16\u8bd1\u7684\uff0c\u539f\u56e0\u7a0d\u540e\u89e3\u91ca\u3002\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u60f3\u5f3a\u8c03\u4e00\u4e0b L1 \u7f13\u5b58\u547d\u4e2d\u51e0\u4e4e\u80af\u5b9a\u4e0d\u662f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u74f6\u9888\uff01\u8fd9\u53ea\u662f\u4e00\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u6280\u5de7\uff0c\u5b83\u9610\u660e\u4e86\u4e00\u4e9b CPU \u529f\u80fd\uff0c\u800c\u4e0d\u662f\u5173\u4e8e\u5982\u4f55\u63d0\u9ad8\u666e\u901a C \u4ee3\u7801\u6bb5\u6027\u80fd\u7684\u6307\u5357\u3002\n\u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u94fe\u8868\u6570\u636e\u7c7b\u578b\uff0c\u4ee5\u53ca\u4e00\u4e2a\u5bf9\u7ed9\u5b9a\u94fe\u8868\u7684\u6240\u6709\u5143\u7d20\u6c42\u548c\u7684\u51fd\u6570\uff1a typedef struct Node { uint64_t value ;\u7ed3\u6784\u8282\u70b9 *next ; // \u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e3a NULL } Node ; uint64_t sum1 (Node * node ) { uint64_t value = 0 ; while (node) { value += node -&gt;value ;\u8282\u70b9=\u8282\u70b9-&gt;\u4e0b\u4e00\u4e2a\uff1b } \u8fd4\u56de\u503c\uff1b } \u5230\u73b0\u5728\u4e3a\u6b62\u8fd8\u633a\u597d\u3002\u6211\u4eec\u7684\u6d4b\u8bd5\u7528\u4f8b\u662f\u8fd9\u6837\u5de5\u4f5c\u7684\uff1a\u6784\u5efa\u4e00\u4e2a\u94fe\u8868\uff0c\u5176\u4e2d\u8282\u70b9\u5728\u8fde\u7eed\u5185\u5b58\u4e2d\u6309\u987a\u5e8f\u5b58\u5728\uff0c\u7136\u540e\u67e5\u770b\u5c06\u5b83\u4eec\u5168\u90e8\u52a0\u8d77\u6765\u9700\u8981\u591a\u957f\u65f6\u95f4\uff1a // \u5206\u914d 5MB \u7684\u94fe\u8868\u8282\u70b9\uff0c\u5e76\u6309\u987a\u5e8f\u94fe\u63a5\u5b83\u4eec\uff0c\u4f7f\u7528 // \u968f\u673a`value` \u4e2d\u7684\u6570\u636e\u3002 uint64_t n = 312500 llu\uff1b // 312500 * sizeof(Node) = 312500 * 16 bytes = 5000000 bytes Node *nodes = malloc (n * sizeof (Node)); for ( uint64_t i = 0 ; i &lt; n - 1 ; i ++) { \u8282\u70b9 [i ].value = random_uint64 ();\u8282\u70b9 [i ].next = &amp;nodes [i + 1 ]; } \u8282\u70b9 [n - 1 ].value = random_uint64 ();\u8282\u70b9 [n - 1 ].next = NULL ; // \u73b0\u5728\u6c42\u548c\u3002 sum1 (&amp;nodes [ 0 ]);\u5728\u5177\u6709\u76f8\u5bf9\u8f83\u65e7\u7684 Xeon E5-1650 v3 \u7684\u670d\u52a1\u5668\u4e0a\uff0c\u4f7f\u7528\u793a\u4f8b\u6570\u636e\u8fd0\u884c sum1 \u9700\u8981 0.36 \u6beb\u79d2\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6b63\u5728\u4ee5\u5927\u7ea6 14GB/s \u7684\u901f\u5ea6\u5904\u7406\u6211\u4eec\u7684\u94fe\u8868\u3002\u5728\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u786e\u5b9a\u74f6\u9888\u5e76\u901a\u8fc7\u4ef7\u503c\u63a8\u6d4b\u6765\u89e3\u51b3\u5b83\uff0c\u4ece\u800c\u4f7f\u8be5\u6570\u636e\u96c6\u7684\u541e\u5410\u91cf\u8fbe\u5230 30GB/s\u3002\u4fee\u590d\u7684\u5f71\u54cd\u53d6\u51b3\u4e8e\u6570\u636e\u96c6\u7684\u5927\u5c0f\u3002\u5982\u679c\u5b83\u5df2\u7ecf\u5b8c\u5168\u5728 CPU \u7f13\u5b58\u4e2d\uff0c\u90a3\u4e48\u6539\u8fdb\u4f1a\u66f4\u52a0\u660e\u663e\uff0c\u5426\u5219\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u53d7\u5230\u4ece RAM \u8bfb\u53d6\u6570\u636e\u7684\u901f\u5ea6\u7684\u9650\u5236\u3002\u6b64\u56fe\u663e\u793a\u4e86\u4e0d\u540c\u5927\u5c0f\u6570\u636e\u96c6\u7684\u6027\u80fd\u6539\u8fdb\uff08\u8d8a\u9ad8\u8d8a\u597d\uff09\uff1a\u8be5\u56fe\u663e\u793a\u4e86 sum1 \u7684\u6027\u80fd\u4ee5\u53ca\u4e09\u4e2a\u6539\u8fdb\u51fd\u6570 sum2\u3001sum3 \u548c sum4 \u7684\u6027\u80fd\u3002\u5982\u679c\u6570\u636e\u5b8c\u5168\u9002\u5408 L1 \u7f13\u5b58\uff0816kB \u6570\u636e\u96c6\uff09\uff0c\u6211\u4eec\u4ece sum1 \u4e2d\u7684 14GB/s \u541e\u5410\u91cf\u5230 sum4 \u4e2d\u8d85\u8fc7 40GB/s\uff0c\u800c\u9002\u5408 L2 \u548c L3 \u7f13\u5b58\uff08128kB \u6570\u636e\u96c6\uff09\u7684\u6570\u636e\u96c6\u6027\u80fd\u7565\u6709\u4e0b\u964d\u548c 5MB \u6570\u636e\u96c6\uff09\u3002\u5982\u679c\u6570\u636e\u96c6\u4e0d\u5b8c\u5168\u9002\u5408\u4efb\u4f55 CPU \u7f13\u5b58\uff08~4GB \u6570\u636e\u96c6\uff09\uff0c\u6211\u4eec\u4f1a\u4ece 10GB/s \u5230 15GB/s\uff0c\u8fd9\u4e0e RAM \u5141\u8bb8\u7684\u901f\u5ea6\u4e00\u6837\u5feb\u3002 2\n\u6709\u5173\u4e3a\u4ec0\u4e48\u6211\u8ba4\u4e3a 15GB/s \u662f\u4e0d\u8bc9\u8bf8\u66f4\u6df1\u5c42\u6b21\u53d8\u5316\u7684\u9650\u5236\u7684\u66f4\u591a\u6570\u636e\uff0c\u8bf7\u53c2\u9605\u6700\u540e\u4e00\u8282\u4e2d\u7684\u8bc4\u8bba\u3002 \u21a9\ufe0e \u73b0\u4ee3 CPU \u4e0d\u662f\u4e32\u884c\u5904\u7406\u6307\u4ee4\uff0c\u800c\u662f\u540c\u65f6\u5904\u7406\u8bb8\u591a\u6307\u4ee4\u3002\u4ed6\u4eec\u4e00\u6b21\u8bfb\u53d6\u8bb8\u591a\u6307\u4ee4\uff0c\u5c06\u5b83\u4eec\u5206\u9636\u6bb5\u5206\u89e3\uff0c\u7136\u540e\u5c1d\u8bd5\u7528\u5c3d\u53ef\u80fd\u591a\u7684\u6307\u4ee4\u4e2d\u7684\u5c3d\u53ef\u80fd\u591a\u7684\u4efb\u52a1\u6765\u586b\u5145\u4ed6\u4eec\u62e5\u6709\u7684\u6240\u6709\u8ba1\u7b97\u5355\u5143\u3002 3 \u4f8b\u5982\uff0c\u73b0\u4ee3\u82f1\u7279\u5c14\u5904\u7406\u5668\u7684\u8bbe\u8ba1\u541e\u5410\u91cf\u4e3a\u6bcf\u4e2a\u65f6\u949f\u5468\u671f 4 \u6761\u6307\u4ee4\uff0c\u800c AMD Zen \u5904\u7406\u5668\u7684\u541e\u5410\u91cf\u9ad8\u8fbe 5 \u6216 6 \u6761\u30024 \u7136\u800c\uff0c\u5f53\u60f3\u8981\u5e76\u884c\u6267\u884c\u6307\u4ee4\u65f6\uff0c\u5206\u652f\u4f1a\u5e26\u6765\u6311\u6218\u3002\u8ba9\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684\u51fd\u6570 sum1\uff1a\u4e3a\u4e86\u6269\u5c55\u8fd9\u4e2a\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u5f00\u59cb\u9605\u8bfb\u4e71\u5e8f\u6267\u884c\u548c\u6d41\u6c34\u7ebf\u3002 \u21a9\ufe0e Agner Fog \u7684\u5fae\u67b6\u6784\u6587\u6863\u5305\u542b\u5927\u91cf\u6709\u5173 Intel \u548c AMD x86 \u5904\u7406\u5668\u6d41\u6c34\u7ebf\u7279\u6027\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u6bcf\u4e2a\u67b6\u6784\u7684\u541e\u5410\u91cf\u6570\u5b57\u901a\u5e38\u5728\u201c\u7ba1\u9053\u201d\u90e8\u5206\u3002 \u21a9\ufe0e uint64_t sum1 (Node * node ) { uint64_t value = 0 ; while (node) { value += node -&gt;value ;\u8282\u70b9=\u8282\u70b9-&gt;\u4e0b\u4e00\u4e2a\uff1b } \u8fd4\u56de\u503c\uff1b }; rdi = \u8282\u70b9\u548c rax = \u503c\u3002 ; rax \u662f\u8fd4\u56de\u503c\u5bc4\u5b58\u5668\uff08\u6211\u4eec\u6b63\u5728\u8fd4\u56de\u503c\uff09 sum1: xor rax , rax ;\u503c = 0 \u6d4b\u8bd5 rdi , rdi ;\u5982\u679c\u8282\u70b9\u4e3a NULL\uff0c\u5219\u9000\u51fa\uff0c\u5426\u5219\u5f00\u59cb\u5faa\u73af je \u7ed3\u675f\u5faa\u73af\uff1a\u6dfb\u52a0 rax , qword ptr [ rdi ] ; value += node-&gt;value mov rdi , qword ptr [ rdi + 8 ] ;\u8282\u70b9 = \u8282\u70b9-&gt;\u4e0b\u4e00\u4e2a\u6d4b\u8bd5 rdi , rdi ;\u5982\u679c\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u5219\u91cd\u590d\u5faa\u73af\uff0cjne \u5faa\u73af\uff1b\u5426\u5219\u9000\u51fa\u7ed3\u675fret\n\u5faa\u73af\u4f53\u7531 4 \u6761\u6307\u4ee4\u7ec4\u6210\uff0c\u6700\u540e\u4e00\u6761\u662f\u8df3\u8f6c\u3002\u5728\u6ca1\u6709\u7279\u6b8a\u63aa\u65bd\u7684\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u5728\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4\u4e4b\u524d\u6267\u884c\u76f4\u5230 jne \u7684\u6bcf\u6761\u6307\u4ee4\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u77e5\u9053\u6211\u4eec\u662f\u8981\u5230\u5faa\u73af\u7684\u5f00\u5934\u8fd8\u662f\u7ee7\u7eed\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6761\u4ef6\u8df3\u8f6c\u4f1a\u5728 CPU \u5185\u90e8\u7684\u6307\u4ee4\u7ea7\u5e76\u884c\u6027\u4e2d\u5f15\u5165\u969c\u788d\u3002\u7136\u800c\uff0c\u4e00\u6b21\u6267\u884c\u591a\u6761\u6307\u4ee4\u975e\u5e38\u91cd\u8981\uff0c\u4ee5\u81f3\u4e8e\u6240\u6709\u73b0\u4ee3 CPU \u4e2d\u90fd\u5b58\u5728\u4e13\u7528\u786c\u4ef6\u2014\u2014\u5206\u652f\u9884\u6d4b\u5668\u2014\u2014\u4ee5\u5bf9\u6bcf\u6b21\u6761\u4ef6\u8df3\u8f6c\u65f6\u6211\u4eec\u5c06\u91c7\u7528\u7684\u65b9\u5f0f\u8fdb\u884c\u6709\u6839\u636e\u7684\u731c\u6d4b\u3002\u5176\u5de5\u4f5c\u539f\u7406\u7684\u7ec6\u8282\u8d85\u51fa\u4e86\u672c\u535a\u6587\u7684\u8303\u56f4\uff0c\u4f46\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u60a8\u7684 CPU \u4f1a\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u89c2\u5bdf\u60a8\u7684\u7a0b\u5e8f\uff0c\u5e76\u5c1d\u8bd5\u901a\u8fc7\u8bb0\u4f4f\u8fc7\u53bb\u53d1\u751f\u7684\u4e8b\u60c5\u6765\u9884\u6d4b\u5c06\u91c7\u7528\u54ea\u4e2a\u5206\u652f\u3002 5 \u9664\u4e86\u4e00\u76f4\u6709\u7528\u7684 Agner Fog\uff08\u53c2\u89c1\u5fae\u67b6\u6784\u6587\u6863\u7684\u7b2c 3 \u8282\uff09\uff0cDan Luu \u6709\u4e00\u7bc7\u5f88\u597d\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u89e3\u91ca\u4e86\u6267\u884c\u5206\u652f\u9884\u6d4b\u7684\u5404\u79cd\u65b9\u6cd5\u3002 \u21a9\ufe0e \u5373\u4f7f\u5bf9\u5206\u652f\u9884\u6d4b\u77e5\u4e4b\u751a\u5c11\uff0c\u6211\u4eec\u4e5f\u5e0c\u671b\u9884\u6d4b\u5668\u80fd\u591f\u4e3a\u6211\u4eec\u7684\u6d4b\u8bd5\u7528\u4f8b\u505a\u4e00\u4e2a\u5f88\u597d\u7684\u5de5\u4f5c\u2014\u2014\u9664\u4e86\u6211\u4eec\u505c\u6b62\u4f7f\u7528\u5217\u8868\u4e4b\u5916\uff0c\u6211\u4eec\u603b\u662f\u56de\u5230\u5faa\u73af\u7684\u5f00\u59cb\u3002\u5728 Linux \u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 perf stat \u9a8c\u8bc1\u8fd9\u79cd\u60c5\u51b5\uff1a\u5206\u652f\u9884\u6d4b\u5668\u5728 99.96% \u7684\u65f6\u95f4\u5185\u90fd\u6b63\u786e\u3002\u6240\u4ee5 CPU \u53ef\u4ee5\u968f\u610f\u5e76\u884c\u5316\u6211\u4eec\u7684\u6307\u4ee4\uff0c\u5bf9\u5417\uff1f \u2026\u5bf9\uff1f ; rdi = \u8282\u70b9\u548c rax = \u503c\u3002\u5faa\u73af\uff1a\u6dfb\u52a0 rax \uff0c qword ptr [ rdi ] \uff1b value += node-&gt;value mov rdi , qword ptr [ rdi + 8 ] ;\u8282\u70b9 = \u8282\u70b9-&gt;\u4e0b\u4e00\u4e2a\u6d4b\u8bd5 rdi , rdi ;\u5982\u679c\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u5219\u91cd\u590d\u5faa\u73af\uff0cjne \u5faa\u73af\uff1b\u5426\u5219 exit \u8981\u9012\u589e\u503c\uff08 rax \uff09\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u8282\u70b9\uff08 rdi \uff09\u7684\u503c\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5faa\u73af\u7684\u524d\u4e00\u6b21\u8fed\u4ee3\u3002\u56e0\u6b64\uff0c\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u4e4b\u95f4\u5b58\u5728\u6570\u636e\u4f9d\u8d56\u6027\uff1a\u6211\u4eec\u5fc5\u987b\u5728\u8fed\u4ee3 n \u65f6\u5b8c\u6210\u8bfb\u53d6 node-&gt;next ( [rdi + 8]) \uff0c\u7136\u540e\u624d\u80fd\u5f00\u59cb\u5728\u8fed\u4ee3 n+1 \u5904\u6267\u884c\u52a0\u6cd5\u3002\n\u6b64\u5916\uff0c\u52a0\u8f7d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u503c\u7684 mov \u662f\u5faa\u73af\u4e2d\u6700\u6162\u7684\u6307\u4ee4\u3002\u73b0\u4ee3 CPU \u5728\u6dfb\u52a0\u6570\u5b57\u65b9\u9762\u6bd4\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u8981\u597d\u5f97\u591a\u3002\u4e3a\u6b64\uff0cCPU \u548c\u4e3b\u5b58\u4e4b\u95f4\u5b58\u5728\u4e00\u7cfb\u5217\u5feb\u901f\u7f13\u5b58\u3002\u4ece\u4e3b\u5185\u5b58\u8bfb\u53d6\u548c\u5199\u5165\u7684\u6240\u6709\u64cd\u4f5c\u901a\u5e38\u90fd\u7ecf\u8fc7\u7f13\u5b58\u2014\u2014\u5982\u679c\u6211\u4eec\u611f\u5174\u8da3\u7684\u6570\u636e\u4e0d\u5b58\u5728\uff0cCPU \u5c06\u52a0\u8f7d\u4e00\u5757\u5185\u5b58\uff08\u201c\u7f13\u5b58\u7ebf\u201d\uff0cx86 \u4e0a\u7684 64 \u5b57\u8282\uff09\uff0c\u5176\u4e2d\u5305\u542b\u6211\u4eec\u60f3\u8981\u7684\u6570\u636e\u8fdb\u5165\u7f13\u5b58\u3002 6 \u6700\u5feb\u7684\u7f13\u5b58\u901a\u5e38\u79f0\u4e3a L1\uff08\u8fde\u7eed\u7684\u7f13\u5b58\u5c42\u53ef\u9884\u6d4b\u5730\u79f0\u4e3a L2\u3001L3 \u2026\u2026\uff09\u3002\u5f53\u6d89\u53ca\u5230 CPU \u7f13\u5b58\u65f6\uff0c\u6211\u4eec\u7684\u8bbe\u7f6e\u662f\u6700\u597d\u7684\u60c5\u51b5\u2014\u2014\u6211\u4eec\u987a\u5e8f\u8bfb\u53d6\u4e00\u5806\u5185\u5b58\uff0c\u6cbf\u9014\u5229\u7528\u6bcf\u4e2a\u5b57\u8282\u3002\u7136\u800c\uff0c\u5373\u4f7f L1 \u7f13\u5b58\u975e\u5e38\u5feb\uff0c\u5b83\u4e5f\u4e0d\u662f\u514d\u8d39\u7684\uff1a\u5728\u6211\u4eec\u7684 mov \u4e2d\u8bfb\u53d6\u5b83\u5927\u7ea6\u9700\u8981 4 \u4e2a CPU \u5468\u671f\uff0c\u800c\u6dfb\u52a0\u3001\u6d4b\u8bd5\u548c jne \u9700\u8981 1 \u4e2a CPU \u5468\u671f\u3002 7 \u56e0\u6b64\uff0c\u901a\u8fc7\u5355\u4e2a\u5faa\u73af\u8fed\u4ee3\u6240\u9700\u7684\u5468\u671f\u6570\u53d7\u4ece L1 \u7f13\u5b58\u8bfb\u53d6\u6240\u9700\u7684 4 \u4e2a\u5468\u671f\u7684\u9650\u5236\u3002\u6211\u4ece\u6d4b\u8bd5\u7a0b\u5e8f\u7684\u81f3\u5f3a\u83b7\u5f97\u7684\u6570\u636e\u5927\u81f4\u4e0e\u6b64\u4e00\u81f4\uff1a\u6211\u8bf4\u201c\u901a\u5e38\u201d\u662f\u56e0\u4e3a\u53ef\u4ee5\u4f7f\u7528\u6d41\u5f0f SIMD \u6307\u4ee4\u907f\u514d\u7f13\u5b58\uff0c\u8fd9\u4e9b\u6307\u4ee4\u53ef\u4ee5\u7ed5\u8fc7\u7f13\u5b58\u5199\u5165\u6216\u590d\u5236\u5185\u5b58\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u662f\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u5185\u5b58\u90fd\u901a\u8fc7\u7f13\u5b58\u3002 \u21a9\ufe0e \u540c\u6837\uff0cAgner Fog \u7684\u6027\u80fd\u9875\u9762\u662f\u6211\u80fd\u627e\u5230\u7684\u6700\u597d\u7684\u8d44\u6e90\u6765\u83b7\u53d6\u8fd9\u4e9b\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60f3\u8981\u627e\u5230 Haswell CPU \u7684\u8fd9\u4e9b\u7f16\u53f7\uff1a add\u3001test \u548c jne \u7684\u7f16\u53f7\u4f4d\u4e8e\u6307\u4ee4\u8868\u7684 Haswell \u90e8\u5206\u3002\n\u21a9\ufe0e16KB\uff0c10000\u6b21\u8fed\u4ee3SUM1\uff1a8465052097154389858\uff0c1.12us\uff0c14.25GB /\u79d2\uff0c3.91\u5faa\u73af/ ELEM\uff0c1.03 instrs /\u5468\u671f\uff0c3.48GHz\uff0c4.01 instrs / elem128kB\uff0c10000\u6b21\u8fed\u4ee3SUM1\uff1a6947699366156898439\uff0c9.06us\uff0c14.13GB / S\uff0c3.95\u5468\u671f/elem, 1.01 instrs/cycle, 3.49GHz, 4.00 instrs/elem5000kB, 100 \u6b21\u8fed\u4ee3 sum1: 2134986631019855758, 0.36ms, 14.07GB/s, 3,91.emstrs/elem4,4.00 instrs/elem5000kB, 100\u8fed\u4ee3 sum1: 15446485409674718527, 0.43 s, 9.94GB/s, 5.60 cycle/elem, 0.71 instrs/cycle, 3.48GHz, 4.00 instrs/elem \u91cd\u8981\u7684\u6570\u5b57\u662fcycles/elem\u548cinstrs/cycle\u3002\u6211\u4eec\u4e3a\u6bcf\u4e2a\u5217\u8868\u5143\u7d20\uff08\u5373\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\uff09\u82b1\u8d39\u5927\u7ea6 4 \u4e2a\u5468\u671f\uff0c\u5bf9\u5e94\u4e8e\u6bcf\u4e2a\u5468\u671f\u5927\u7ea6 1 \u6761\u6307\u4ee4\u7684\u541e\u5410\u91cf\u3002\u9274\u4e8e\u6240\u8ba8\u8bba\u7684 CPU \u8bbe\u8ba1\u4e3a\u6bcf\u5468\u671f 4 \u6761\u6307\u4ee4\u7684\u541e\u5410\u91cf\uff0c\u6211\u4eec\u6d6a\u8d39\u4e86\u5927\u91cf\u53ef\u7528\u7684 CPU \u9b54\u6cd5\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u76f4\u5728\u7b49\u5f85 L1 \u7f13\u5b58\u3002\u6211\u4eec\u7ec8\u4e8e\u5f97\u5230\u4e86\u8bc0\u7a8d\u3002\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u7b49\u5f85\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u8282\u70b9\u5730\u5740\u662f\u4ec0\u4e48\u3002\u7136\u800c\uff0c\u5728\u6211\u4eec\u7684\u8bbe\u7f6e\u4e2d\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u8fde\u7eed\u7684\u5185\u5b58\u5757\u4e2d\u5206\u914d\u5217\u8868\uff0c\u56e0\u6b64\u8282\u70b9\u603b\u662f\u5f7c\u6b64\u76f8\u90bb\u3002\u6240\u4ee5\u8fd9\u91cc\u7684\u5173\u952e\u601d\u60f3\u662f\uff1a\u5c1d\u8bd5\u901a\u8fc7\u78b0\u649e\u524d\u4e00\u4e2a\u503c\u6765\u731c\u6d4b\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u731c\u6d4b\u9519\u8bef\uff0c\u5219\u5c06\u8282\u70b9\u8bbe\u7f6e\u4e3a\u201c\u771f\u5b9e\u201d\u7684\u4e0b\u4e00\u4e2a\u503c\u3002\u5728 C \u4e2d\uff0c\u5b83\u662f\u8fd9\u6837\u7684\uff1a uint64_t fast_sum (Node * node ) { uint64_t value = 0 ;\u8282\u70b9 * \u4e0b\u4e00\u4e2a = NULL ; while (node) { value += node -&gt;value ;\u4e0b\u4e00\u4e2a=\u8282\u70b9-&gt;\u4e0b\u4e00\u4e2a\uff1b // \u731c\u6d4b\u4e0b\u4e00\u4e2a\u503c\u8282\u70b9++; // \u4f46\u5982\u679c\u6211\u4eec\u731c\u9519\u4e86\uff0c\u8bf7\u4fee\u590d\u5b83\uff08\u4ee5\u9632\u8282\u70b9 // \u5f7c\u6b64\u76f8\u90bb\uff09\u3002\u5982\u679c\uff08\u8282\u70b9\uff01=\u4e0b\u4e00\u4e2a\uff09{\u8282\u70b9=\u4e0b\u4e00\u4e2a\uff1b } } \u8fd4\u56de\u503c\uff1b\u8fd9\u770b\u8d77\u6765\u5f88\u5947\u602a\u3002\u6211\u4eec\u4ecd\u5728\u6bd4\u8f83\u8282\u70b9\u4e2d\u8bfb\u53d6 node-&gt;next != next \u4ee5\u786e\u4fdd\u6211\u4eec\u7684\u731c\u6d4b\u662f\u6b63\u786e\u7684\u3002\u56e0\u6b64\uff0c\u4e4d\u4e00\u770b\uff0c\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u4e00\u79cd\u6539\u8fdb\u3002\n\u8fd9\u5c31\u662f\u5206\u652f\u9884\u6d4b\u5668\u7684\u7528\u6b66\u4e4b\u5730\u3002\u5728\u5927\u591a\u6570\u8282\u70b9\u5f7c\u6b64\u76f8\u90bb\u7684\u5217\u8868\u7684\u60c5\u51b5\u4e0b\uff08\u5982\u6211\u4eec\u7684\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684\u60c5\u51b5\uff09\uff0c\u5206\u652f\u9884\u6d4b\u5668\u5c06\u731c\u6d4b if (node != next) { .. . } \u5206\u652f\u6ca1\u6709\u88ab\u91c7\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u901a\u8fc7\u5faa\u73af\u8fed\u4ee3\u800c\u4e0d\u5fc5\u7b49\u5f85 L1 \u8bfb\u53d6\u3002\u8bf7\u6ce8\u610f\uff0c\u5f53\u5206\u652f\u9884\u6d4b\u5668\u9519\u8bef\u65f6\uff08\u4f8b\u5982\u5f53\u5217\u8868\u7ed3\u675f\u65f6\uff0c\u6216\u8005\u5982\u679c\u6211\u4eec\u6709\u4e0d\u8fde\u7eed\u7684\u8282\u70b9\uff09\uff0cCPU \u5c06\u9700\u8981\u56de\u6eaf\u5e76\u4ece\u5931\u8d25\u7684\u5206\u652f\u9884\u6d4b\u4e2d\u91cd\u65b0\u8fd0\u884c\uff0c\u8fd9\u662f\u4ee3\u4ef7\u9ad8\u6602\u7684\uff0815 \u5230 20 \u4e2a\u5468\u671f\u6211\u4eec\u7684\u5904\u7406\u5668 8)\u3002\u7136\u800c\uff0c\u5982\u679c\u5217\u8868\u5927\u90e8\u5206\u662f\u8fde\u7eed\u7684\uff0c\u8fd9\u4e2a\u6280\u5de7\u5c31\u4f1a\u8d77\u4f5c\u7528\u5e76\u4f7f\u6211\u4eec\u7684\u51fd\u6570\u5feb 50-200%\u3002\u8bf7\u53c2\u9605 Agner Fog \u7684\u5fae\u4f53\u7cfb\u7ed3\u6784\u6587\u6863\u4e2d Haswell \u5904\u7406\u5668\u7684\u201c\u9519\u8bef\u9884\u6d4b\u60e9\u7f5a\u201d\u3002 \u21a9\ufe0e \u7136\u800c\uff0c\u8981\u5b8c\u6210\u6700\u7ec8\u4ee3\u7801\u5e76\u663e\u793a\u6570\u5b57\uff0c\u8fd8\u6709\u6700\u540e\u4e00\u4e2a\u6311\u6218\u2014\u2014\u8ba9\u7f16\u8bd1\u5668\u76f8\u4fe1\u6211\u4eec\u7684\u4ee3\u7801\u503c\u5f97\u7f16\u8bd1\u3002\u8ba9\u6211\u4eec\u56de\u5230\u6211\u4eec\u5728 C \u4e2d\u5c55\u793a\u7684\u7528\u4e8e\u4ef7\u503c\u63a8\u6d4b\u7684\u4ee3\u7801\uff1a uint64_t fast_sum (Node * node ) { uint64_t value = 0 ;\u8282\u70b9 * \u4e0b\u4e00\u4e2a = NULL ; while (node) { value += node -&gt;value ;\u4e0b\u4e00\u4e2a=\u8282\u70b9-&gt;\u4e0b\u4e00\u4e2a\uff1b\u8282\u70b9++\uff1b\u5982\u679c\uff08\u8282\u70b9\uff01=\u4e0b\u4e00\u4e2a\uff09{\u8282\u70b9=\u4e0b\u4e00\u4e2a\uff1b } } \u8fd4\u56de\u503c\uff1b gcc \u548c clang \u5f88\u5bb9\u6613\u63a8\u65ad\u51fa\u8fd9\u79cd\u731c\u6d4b\u5728\u8bed\u4e49\u4e0a\u6beb\u65e0\u610f\u4e49\uff0c\u7136\u540e\u7f16\u8bd1\u6211\u4eec\u7684\u6280\u5de7\uff0c\u4f7f fast_sum \u7684\u7f16\u8bd1\u7248\u672c\u4e0e sum1 \u76f8\u540c\u3002\u8fd9\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u667a\u80fd\u64a4\u9500\u4eba\u7c7b\u5173\u4e8e\u6211\u4eec\u6b63\u5728\u7f16\u8bd1\u7684\u5e95\u5c42\u5e73\u53f0\u7684\u77e5\u8bc6\u7684\u4f8b\u5b50\u3002\nPer Vognsen \u7684\u8981\u70b9\u4f7f\u7528\u4ee5\u4e0b\u6280\u5de7\u6765\u8ba9\u7f16\u8bd1\u5668\u8fd0\u884c\u2014\u2014\u8fd9\u662f\u5bf9 sum1\u3001sum2 \u7684\u7b2c\u4e00\u4e2a\u6539\u8fdb\uff1a static uint64_t sum2 (Node *node ) { uint64_t value = 0 ; while (node) { value += node -&gt;value ;\u8282\u70b9 *predicted_next = \u8282\u70b9 + 1 ;\u8282\u70b9 *next = \u8282\u70b9 -&gt;next ; if (next == Predicted_next) { // \u901a\u8fc7\u8ba9\u7f16\u8bd1\u5668\u8ba4\u4e3a\u6211\u4eec\u5728\u8fd9\u91cc\u6539\u53d8\u4e86 predicted_next \u6765\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\u8fd9\u4e2a\u663e\u7136\u6beb\u65e0\u610f\u4e49\u7684\u5206\u652f\u3002 // // \u4f46\u662f\uff0c\u6b64\u6280\u5de7\u4e0d\u9002\u7528\u4e8e GCC\uff0c\u4ec5\u9002\u7528\u4e8e clang\u3002 GCC \u5728\u8fd9\u91cc // \u63a8\u5bfc\u51fa `next` \u548c `predicted_next` \u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64 // \u5c06\u5b83\u4eec\u5408\u5e76\u5230\u540c\u4e00\u4e2a\u53d8\u91cf\u4e2d\uff0c\u8fd9\u91cd\u65b0\u5f15\u5165\u4e86 // \u6211\u4eec\u60f3\u8981\u6446\u8131\u7684\u6570\u636e\u4f9d\u8d56\u6027\u3002 asm ( &quot;&quot; : &quot;+r&quot; (predicted_next ));\u8282\u70b9 = \u9884\u6d4b_\u4e0b\u4e00\u4e2a\uff1b } else { \u8282\u70b9=\u4e0b\u4e00\u4e2a\uff1b } } \u8fd4\u56de\u503c\uff1b\u7136\u800c\uff0c\u6b63\u5982\u8bc4\u8bba\u4e2d\u6240\u89e3\u91ca\u7684\u90a3\u6837\uff0cgcc \u4ecd\u7136\u6ca1\u6709\u5b8c\u5168\u7231\u4e0a\u5b83\u3002 9 \u6b64\u5916\uff0cclang \u751f\u6210\u7684\u5faa\u73af\u5e76\u6ca1\u6709\u60f3\u8c61\u7684\u90a3\u4e48\u7d27\u51d1\uff0c\u6bcf\u4e2a\u5143\u7d20\u9700\u8981 10 \u6761\u6307\u4ee4\u3002\u6240\u4ee5\u6211\u6c42\u52a9\u4e8e\u624b\u52a8\u5199\u51fa\u4e00\u4e2a\u66f4\u597d\u7684\u5faa\u73af\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a sum3: 10 \u8fd9\u5c31\u662f\u6211\u575a\u6301\u4f7f\u7528 clang \u6765\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u539f\u56e0\u3002\u6211\u4e0d\u77e5\u9053 Per \u5728\u4ed6\u7684\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u7684\u662f\u4ec0\u4e48\u7f16\u8bd1\u5668\u3002 \u21a9\ufe0e \u8fd9\u91cc\u6211\u5c55\u793a\u4e86 Intel \u8bed\u6cd5\u4e2d\u7684\u6c47\u7f16\u7248\u672c\uff0c\u4f46\u5728\u4ee3\u7801\u4e2d\u6211\u7f16\u5199\u4e86\u5185\u8054\u6c47\u7f16\uff0c\u4f7f\u7528 AT&amp;T \u8bed\u6cd5\uff0c\u56e0\u4e3a\u5b83\u66f4\u597d\u5730\u652f\u6301\u3002 \u21a9\ufe0e ; rax = \u503c\uff0crcx = \u4e0b\u4e00\u4e2a\uff0crdi = \u8282\u70b9\uff1b\u6ce8\u610f rax \u662f\u8fd4\u56de\u503c\u5bc4\u5b58\u5668\uff08\u6211\u4eec\u6b63\u5728\u8fd4\u56de\u503c\uff09 sum3: xor rax , rax ;\u503c = 0 \u5f02\u6216 rcx , rcx ; next = NULL \u6d4b\u8bd5 rdi , rdi ;\u5982\u679c\u8282\u70b9\u4e3a\u7a7a\uff0c\u5219\u8d70\u5230\u6700\u540e\uff0cje end\uff1b\u5426\u5219\u5f00\u59cb\u5faa\u73af loop_body: add rax , qword ptr [ rdi ] ; value += node-&gt;value mov rcx , qword ptr [ rdi + 8 ] ; next = node-&gt;next add rdi , 16 ; node++ cmp rcx , rdi ;\u5982\u679c node \u4e0d\u7b49\u4e8e next\uff0c\u5219 jne assign_node \uff1b\u8f6c\u5230assign_node\uff0c\u5426\u5219jmp loop_body ;\u91cd\u65b0\u542f\u52a8\u5faa\u73afassign_node: mov rdi , rcx ;\u8282\u70b9 = \u4e0b\u4e00\u4e2a\u6d4b\u8bd5 rdi , rdi ;\u5982\u679c\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u5219\u91cd\u65b0\u542f\u52a8\u5faa\u73af\uff0c jne loop_body \uff1b\u5426\u5219\u9000\u51fa\u3002 end: ret \u4ee3\u7801\u4f9d\u8d56\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u5982\u679c node \u7b49\u4e8e next\uff0c\u6211\u4eec\u5728\u589e\u52a0\u5b83\u4e4b\u540e\u4e0d\u80fd\u4e3a NULL\uff0c\u907f\u514d\u4e86\u989d\u5916\u7684\u6d4b\u8bd5\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5143\u7d20\u53ea\u53d6 6 \u6761\u6307\u4ee4\uff08\u4ece loop_body \u5230assign_node\uff09\u3002\u6700\u540e\uff0csum4 \u4e0e sum3 \u76f8\u540c\uff0c\u4f46 loop_body \u5c55\u5f00\u4e86 16 \u6b21\u3002\n16KB\uff0c10000\u6b21\u8fed\u4ee3SUM1\uff1a8465052097154389858\uff0c1.12us\uff0c14.25GB / S\uff0c3.91\u5faa\u73af/ ELEM\uff0c1.03 instrs /\u5468\u671f\uff0c3.48GHz\uff0c4.01 instrs / ELEM SUM2\uff1a8465052097154389858\uff0c0.57us\uff0c27.95GB / S\uff0c1.99\u5faa\u73af/ ELEM\uff0c 5.02 instrs/cycle, 3.48GHz, 10.01 instrs/elem sum3: 8465052097154389858, 0.41us, 39.23GB/s, 1.42cycles/elem, 4.23 instrs/cycle, 3.45052097154389858, 0.41us, 39.23GB/s, 4.23 instrs/cycle, 36805209715438986 /s, 1.34 \u5468\u671f/elem, 3.80 instrs/cycle, 3.48GHz, 5.07 instrs/elem128kB, 10000 \u6b21\u8fed\u4ee3 sum1: 6947699366156898439, 9.06us, 14.13GB,95.5 GHz instrs/s,14.13GB,95.4 \u5468\u671f instr/s,4.0 GHz instrs/elem128kB, 10000 \u6b21\u8fed\u4ee3/ ELEM SUM2\uff1a6947699366156898439\uff0c4.75us\uff0c26.95GB / S\uff0c2.07\u5faa\u73af/ ELEM\uff0c4.84 instrs /\u5468\u671f\uff0c3.48GHz\uff0c10.00 instrs / ELEM SUM3\uff1a6947699366156898439\uff0c3.85us\uff0c33.23GB / S\uff0c1.68\u5faa\u73af/ ELEM\uff0c3.58 instrs /\u5468\u671f\uff0c3.48GHz\uff0c6.00 instrs / ELEM SUM4\uff1a6947699366156898439\uff0c3.36us\uff0c38.14GB /\u79d2\uff0c1.46\u5faa\u73af/ ELEM\uff0c3.46 instrs /\u5468\u671f\uff0c3.49GHz\uff0c5.06 instrs / elem5000kB\uff0c100\u6b21\u8fed\u4ee3SUM1\uff1a2134986631019855758\uff0c0.36ms\uff0c14.07 GB/s, 3.96 \u5468\u671f/ elem, 1.01 instrs/cycle, 3.48GHz, 4.00 instrs/elem sum2: 2134986631019855758, 0.19ms, 26.25GB/s, 2.12 \u5468\u671f/elem, 4.71 instrs/cycle, 4.00 instrs/elem sum2,4045758, 0.19ms, 26.25GB/s, 4.71 instrs/cycle, 4.00 instrs.855755758 104 1000000000000000000000000\u5f1528.69GB/s, 1.94 \u5468\u671f/elem, 3.09 instrs/cycle, 3.48GHz, 6.00 instrs/elem sum4: 2134986631019855758, 0.16ms, 30.30GB/s, 1.84,55 GHz instrs/elem, 1.84s.36 \u5468\u671f instr.367 \u5468\u671felem4294MB, 1 \u6b21\u8fed\u4ee3 sum1: 15446485409674718527, 0.43 s, 9.94GB/s, 5.60 \u5468\u671f/elem, 0.71 instrs/\u5468\u671f, 3.48GHz, 4.00 instrs/elem 4803,407s/elem 4803,40s/elem 4803,407s/elem 4804,873.71s/elem 4804,80.71s/elem 4804,873.73/48526:70 2.45 instrs /\u5468\u671f\uff0c3.48GHz\uff0c10.00 instrs / ELEM SUM3\uff1a15446485409674718527\uff0c0.29 S\uff0c14.72GB / S\uff0c3.77\u5faa\u73af/ ELEM\uff0c1.59 instrs /\u5468\u671f\uff0c3.47GHz\uff0c6.00 instrs / ELEM SUM4\uff1a15446485409674718527\uff0c0.29 S\uff0c15.02GB /s, 3.70 cycle/elem, 1.37 instrs/cycle, 3.47GHz, 5.06 instrs/elem \u524d\u4e09\u4e2a\u6570\u636e\u96c6\u9002\u5408 L1 / L2 / L3 \u7f13\u5b58\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6539\u8fdb\u975e\u5e38\u660e\u663e\uff0csum3 / sum4 \u4ee5\u6bcf\u79d2\u5927\u7ea6 4 \u6761\u6307\u4ee4\u7684\u901f\u5ea6\u5904\u7406\u6570\u636e\uff0c\u8fd9\u5e94\u8be5\u63a5\u8fd1\u6211\u6d4b\u8bd5\u4ee3\u7801\u7684\u5904\u7406\u5668\u7684\u9650\u5236\u3002\u5f53\u6570\u636e\u4e0d\u9002\u5408\u7f13\u5b58\u65f6\uff0c\u74f6\u9888\u5c31\u4f1a\u586b\u5145\u5b83\uff0c\u6211\u4eec\u4ee5\u5927\u7ea6 15 GB/s \u7684\u901f\u5ea6\u5904\u7406\u6570\u636e\u3002\u6211\u76f8\u4fe1\u8fd9\u662f\u4ece RAM \u4e2d\u201c\u7b80\u5355\u201d\u5355\u7ebf\u7a0b\u8bfb\u53d6\u6240\u80fd\u8fbe\u5230\u7684\u6700\u5feb\u901f\u5ea6\uff0c\u5e76\u4e14\u5b83\u4e0e\u6765\u81ea sysbench \u7684\u6570\u636e\u4e00\u81f4\uff1aRAM \u8bfb\u53d6\u901f\u5ea6\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528 SIMD \u6d41\u6307\u4ee4\u6216\u901a\u8fc7\u4ece\u591a\u4e2a\u7ebf\u7a0b\u8bfb\u53d6\u6765\u63d0\u9ad8\uff0c\u5c3d\u7ba1\u5b9e\u65bd\u8d77\u6765\u4f1a\u590d\u6742\u5f97\u591a\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u8fd9\u4e2a\u4f4e\u7ea7\u6280\u5de7\u7684\u65c5\u7a0b\uff01\u5982\u679c\u4f60\u60f3\u8981\u66f4\u591a\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u6211\u518d\u600e\u4e48\u63a8\u8350 Per \u7684\u5e10\u6237\u4e5f\u4e0d\u4e3a\u8fc7\u2014\u2014\u5f04\u6e05\u695a\u4ed6\u7684\u6280\u5de7\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8fd9\u5f88\u6709\u6559\u80b2\u610f\u4e49\u3002\u611f\u8c22 Alexandru Scvortov\u3001Niklas Hamb\u00fcchen\u3001Alex Appetiti \u548c Carter T Schonwald \u9605\u8bfb\u672c\u6587\u7684\u8349\u7a3f\u3002 Niklas \u8fd8\u6f84\u6e05\u4e86\u4e00\u4e9b\u6709\u5173 RAM \u901f\u5ea6\u7684\u7ec6\u8282\uff0c\u5e76\u5efa\u8bae\u4f7f\u7528 sysbench \u6765\u7279\u522b\u6d4b\u91cf\u5355\u7ebf\u7a0b RAM \u8bfb\u53d6\u901f\u5ea6\u3002", "note_en": "Abstract: If we have a heuristic to guess some value cheaply, we can remove a data dependency in a tight loop using the branch predictor. This allows the CPU to run more instructions in parallel, increasing performance. If this explanation does not make much sense to you, keep reading to learn about some of the magic making your CPU fast!\n Per Vognsen\u2019s twitter feed is full of neat low-level curiosities, usually leveraging CPU features for some performance benefit.\n Recently he tweeted about a trick that I had never heard of \u2013 value speculation.  1 The trick exploits the branch predictor to guess values, enabling more instruction parallelism and therefore removing a bottleneck on the L1 cache. Note that the bottleneck is  not due to L1 cache misses, but on L1 cache  hits introducing unwanted data dependencies.\n Per, in turn, referenced  a blog post by Paul Khuong with a real-world example deploying this trick. Paul, in turn, references side-channel attacks. \u21a9\ufe0e\n In this post I explain the machinery involved, including a primer on branch prediction and CPU caches, so that anybody with a passing knowledge of C and how code is executed on CPUs should be able to follow.\n The code for the post is available  here. All the numbers are from a Xeon E5-1650 v3, an Intel Haswell processor with L1 / L2 / L3 cache of 32kB, 256kB, and 15MB respectively. The code was compiled with  clang -O3, and not with  gcc, for reasons explained  later.\n Before starting, I\u2019d like to stress that L1 cache  hits are almost certainly  not the bottleneck of your application! This is just a very neat trick that illuminates some CPU features, not a guide on how to improve the performance of your average piece of C code.\n  We have a simple linked list data type, and a function summing all the elements of a given linked list:\n typedef  struct Node  {    uint64_t value ;    struct Node  *next ;  // NULL for the last node   } Node ;     uint64_t sum1 (Node * node )  {    uint64_t value  =  0 ;    while  (node )  {   value  += node -&gt;value ;   node  = node -&gt;next ;    }    return value ;   }\n So far so good. Our test case works as follows: build a linked list where the nodes live sequentially in contiguous memory, then see how long it takes to sum them all up:\n // Allocate 5MB of linked list nodes, and link them sequentially, with   // random data in the `value`s.   uint64_t n  =  312500 llu ;  // 312500 * sizeof(Node) = 312500 * 16 bytes = 5000000 bytes  Node  *nodes  = malloc (n  *  sizeof (Node ));   for  ( uint64_t i  =  0 ; i  &lt; n  -  1 ; i ++)  {   nodes [i ].value  = random_uint64 ();   nodes [i ].next  =  &amp;nodes [i + 1 ];   }  nodes [n - 1 ].value  = random_uint64 ();  nodes [n - 1 ].next  = NULL ;     // Now sum.  sum1 (&amp;nodes [ 0 ]);\n On a server with a relatively old Xeon E5-1650 v3, running  sum1 with the sample data takes 0.36 milliseconds, which means that we\u2019re processing our linked list at roughly 14GB/s. In the rest of the post will will identify the bottleneck and get around it with value speculation, bringing the throughput for this dataset to 30GB/s.\n The impact of the fix varies depending on the size of the dataset. If it is already entirely in the CPU cache, the improvement is much more pronounced, since otherwise we are quickly constrained by how fast we can read data from RAM. This graph shows the performance improvement over differently sized datasets (higher is better):\n  The chart shows the performance of  sum1 together with the performance of three improved functions,  sum2,  sum3, and  sum4. We go from a throughput of 14GB/s in  sum1 to more than 40GB/s in  sum4 if the data fits entirely in the L1 cache (the 16kB dataset), with the performance decreasing slightly for datasets fitting in the L2 and L3 cache (128kB and 5MB datasets). If the dataset does not fit entirely in any CPU cache (~4GB dataset) we go from 10GB/s to 15GB/s, which is as fast as the RAM allows.  2\n See remarks in the  last section for more data on why I think 15GB/s is the limit without resorting to deeper changes. \u21a9\ufe0e\n  Modern CPUs do not process instructions serially, but rather handle many at the same time. They read many instructions at once, break them down in stages, and then try to fill all the computation units they have with as many tasks from as many instructions as possible.  3 For instance, modern Intel processors are designed for a throughput of 4 instructions per clock cycle, and AMD Zen processors for up to 5 or 6.  4\n However, branches pose a challenge when wanting to execute instructions in parallel. Let\u2019s go back to our function  sum1:\n To expand on this topic, you can start reading on  out-of-order execution and  pipelining. \u21a9\ufe0e\n Agner Fog\u2019s  microarchitecture document contains tons of details about the pipeline characteristics for Intel and AMD x86 processors. The numbers on throughput for each architecture are usually in the \u201cPipeline\u201d section. \u21a9\ufe0e\n uint64_t sum1 (Node * node )  {    uint64_t value  =  0 ;    while  (node )  {   value  += node -&gt;value ;   node  = node -&gt;next ;    }    return value ;   }\n  ; rdi = node and rax = value.   ; rax is the return value register (we&#39;re returning value)   sum1:    xor  rax ,  rax  ; value = 0    test  rdi ,  rdi  ; if node is NULL, exit, otherwise start loop    je end   loop:    add  rax ,  qword  ptr  [ rdi ]  ; value += node-&gt;value    mov  rdi ,  qword  ptr  [ rdi  +  8 ]  ; node = node-&gt;next    test  rdi ,  rdi  ; if node is not NULL, repeat loop,    jne loop  ; otherwise exit   end    ret\n The loop body is made out of 4 instructions, the last of which a jump. Without special measures, every instruction up to the  jne must be executed before proceeding to the next instruction, since we need to know if we\u2019ll go to the beginning of the loop or continue. In other words the conditional jump would introduce a barrier in the instruction level parallelism internal to the CPU.\n However, executing many instructions at once is so important that dedicated hardware \u2013 the  branch predictor \u2013 is present in all modern CPUs to make an educated guess on which way we\u2019ll go at every conditional jump. The details of how this works are beyond the scope of this blog post, but conceptually your CPU observes your program as it runs and tries to predict which branch will be taken by remembering what happened in the past.  5\n Apart from the ever useful Agner Fog (see Section 3 of the  microarchitecture document), Dan Luu has a  nice blogpost explaining less dryly various ways of performing branch prediction. \u21a9\ufe0e\n Even without knowing much about the branch prediction, we expect the predictor to do a great job for our test case \u2013 we always go back to the beginning of the loop apart from when we stop consuming the list. On Linux, we can verify that this is the case with  perf stat:\n  The branch predictor gets it right 99.96% of the time. So the CPU can parallelize our instructions with abandon, right? \u2026right?\n   ; rdi = node and rax = value.   loop:    add  rax ,  qword  ptr  [ rdi ]  ; value += node-&gt;value    mov  rdi ,  qword  ptr  [ rdi  +  8 ]  ; node = node-&gt;next    test  rdi ,  rdi  ; if node is not NULL, repeat loop,    jne loop  ; otherwise exit\n To increment  value ( rax), we need to know the value of  node ( rdi), which depends on the previous iteration of the loop. So there\u2019s a  data dependency between each iteration of the loop: we must have finished reading  node-&gt;next ( [rdi + 8]) at iteration  n before we can start executing the  add at iteration  n+1.\n Moreover, the  mov which loads the next value of  node is by far the slowest instruction in the loop.\n  Modern CPUs are a lot better at adding numbers than reading from memory. For this reason, a series of fast caches exist between the CPU and main memory. All reading and writing from main memory normally goes through the cache \u2013 if the data we are interested in is not already present, the CPU will load a chunk of memory (a \u201ccache line\u201d, 64 bytes on x86) which contains our desired data into the cache.  6 The fastest cache is usually called L1 (successive caching layers being predictably called L2, L3, \u2026).\n Our setup is the best-case scenario when it comes to CPU caches \u2013 we read a bunch of memory sequentially, utilizing every byte along the way. However, even if the L1 cache is very fast, it is not free: it takes around 4 CPU cycles to read from it in our  mov, compared to 1 CPU cycle for  add,  test, and  jne.  7\n So the number of cycles needed to go through a single loop iteration is bounded by the 4 cycles it takes to read from L1 cache. The data I get from the Xeon I tested the program with is roughly consistent with this:\n I say \u201cnormally\u201d because the cache can be avoided using streaming SIMD instructions, which can write or copy memory bypassing the cache. However these methods are opt-in, and by default all memory goes through the cache. \u21a9\ufe0e\n Again, Agner Fog\u2019s  page on performance is the best resource I could find to source these numbers. For example, if one wanted to find these numbers for a Haswell CPU:\n The numbers for  add,  test, and  jne are in the Haswell section of the  instruction tables.\n \u21a9\ufe0e\n 16kB, 10000 iterations sum1: 8465052097154389858, 1.12us, 14.25GB/s, 3.91 cycles/elem, 1.03 instrs/cycle, 3.48GHz, 4.01 instrs/elem128kB, 10000 iterations sum1: 6947699366156898439, 9.06us, 14.13GB/s, 3.95 cycles/elem, 1.01 instrs/cycle, 3.49GHz, 4.00 instrs/elem5000kB, 100 iterations sum1: 2134986631019855758, 0.36ms, 14.07GB/s, 3.96 cycles/elem, 1.01 instrs/cycle, 3.48GHz, 4.00 instrs/elem4294MB, 1 iterations sum1: 15446485409674718527, 0.43 s, 9.94GB/s, 5.60 cycles/elem, 0.71 instrs/cycle, 3.48GHz, 4.00 instrs/elem\n The important numbers are  cycles/elem and  instrs/cycle. We spend roughly 4 cycles per list element (that is to say, per loop iteration), corresponding to a throughput of roughly 1 instruction per cycle. Given that the CPU in question is designed for a throughput of 4 instructions per cycle, we\u2019re wasting a lot of the CPU magic at our disposal, because we\u2019re stuck waiting on the L1 cache.\n  We finally get to the trick. As discussed, we are stuck waiting on reading what the next node address is. However, in our setup we allocate the list in a contiguous block of memory, and therefore the nodes are always next to each other.\n So here\u2019s the key idea: try to guess the next node by just bumping the previous value. If the guess is wrong, set the node to the \u201creal\u201d next value. In C, this is how it would look like:\n uint64_t faster_sum (Node * node )  {    uint64_t value  =  0 ;   Node * next  = NULL ;    while  (node )  {   value  += node -&gt;value ;   next  = node -&gt;next ;    // Guess the next value   node ++;    // But fix it up if we guessed wrong (in case the nodes are not    // next to each other).    if  (node  != next )  {   node  = next ;    }    }    return value ;   }\n This looks quite bizarre. We are still reading  node-&gt;next in the comparison  node != next to make sure our guess is right. So at first glance this might not seem like an improvement.\n This is where the branch predictor comes in. In the case of lists where most nodes  are next to each other (as is the case in our test code), the branch predictor will guess that the  if (node != next) { ... } branch is not taken, and therefore we\u2019ll go through loop iterations without having to wait for the L1 read.\n Note that when the branch predictor  is wrong (for example when the list ends, or if we have non-contiguous nodes) the CPU will need to backtrack and re-run from the failed branch prediction, which is costly (15 to 20 cycles on our processor  8). However, if the list is mostly contiguous, the trick works and makes our function 50-200% faster.\n See \u201cMisprediction penalty\u201d for Haswell processor in Agner Fog\u2019s  microarchitecture document. \u21a9\ufe0e\n However there is one last challenge remaining to reach the final code and show you numbers \u2013 convincing compilers that our code is worth compiling.\n  Let\u2019s go back to the code we showed for value speculation in C:\n uint64_t faster_sum (Node * node )  {    uint64_t value  =  0 ;   Node * next  = NULL ;    while  (node )  {   value  += node -&gt;value ;   next  = node -&gt;next ;   node ++;    if  (node  != next )  {   node  = next ;    }    }    return value ;   }\n Both  gcc and  clang easily deduce that the guessing is semantically pointless, and compile our trick away, making the compiled version of  faster_sum the same as  sum1. This is an instance where the compiler smartness undoes human knowledge about the underlying platform we\u2019re compiling for.\n Per Vognsen\u2019s gist uses the following trick to get compilers to behave \u2013 this is the first improvement to our  sum1,  sum2:\n static  uint64_t sum2 (Node  *node )  {    uint64_t value  =  0 ;    while  (node )  {   value  += node -&gt;value ;   Node  *predicted_next  = node  +  1 ;   Node  *next  = node -&gt;next ;    if  (next  == predicted_next )  {    // Prevent compilers optimizing this apparently meaningless branch away    // by making them think we&#39;re changing predicted_next here.    //    // This trick, however, does not work with GCC, only with clang. GCC here    // derives that `next` and `predicted_next` are the same, and therefore    // merges them into the same variable, which re-introduces the data    // dependency we wanted to get rid of.   asm ( &#34;&#34;  :  &#34;+r&#34; (predicted_next ));   node  = predicted_next ;    }  else  {   node  = next ;    }    }    return value ;   }\n However  gcc still doesn\u2019t fully fall for it, as explained in the comment.  9 Moreover,  clang\u2019s generated loop is not as tight as it could, taking 10 instructions per element. So I resorted to manually writing out a better loop, which we\u2019ll call  sum3:  10\n This is why I stuck to  clang for this post. I don\u2019t know what compiler Per is using for his tests. \u21a9\ufe0e\n Here I show the assembly version in Intel syntax, but  in the code I write inline assembly, using AT&amp;T syntax since it is better supported. \u21a9\ufe0e\n ; rax = value, rcx = next, rdi = node   ; Note that rax is the return value register (we are returning the value)   sum3:    xor  rax ,  rax  ; value = 0    xor  rcx ,  rcx  ; next = NULL    test  rdi ,  rdi  ; if node is null, go to the end,    je end  ; otherwise start loop   loop_body:    add  rax ,  qword  ptr  [ rdi ]  ; value += node-&gt;value    mov  rcx ,  qword  ptr  [ rdi  +  8 ]  ; next = node-&gt;next    add  rdi ,  16  ; node++    cmp  rcx ,  rdi  ; if node is not equal to next,    jne assign_node  ; go to assign_node, otherwise    jmp loop_body  ; restart the loop   assign_node:    mov  rdi ,  rcx  ; node = next    test  rdi ,  rdi  ; if node is not null restart the loop,    jne loop_body  ; otherwise exit.   end:    ret\n The code relies on the fact that  node can\u2019t be  NULL after we increment it if it is equal to  next, avoiding an additional test, and taking only 6 instructions per element (from  loop_body to  assign_node). Finally,  sum4 is the same as  sum3, but with  loop_body unrolled 16 times.\n   16kB, 10000 iterations sum1: 8465052097154389858, 1.12us, 14.25GB/s, 3.91 cycles/elem, 1.03 instrs/cycle, 3.48GHz, 4.01 instrs/elem sum2: 8465052097154389858, 0.57us, 27.95GB/s, 1.99 cycles/elem, 5.02 instrs/cycle, 3.48GHz, 10.01 instrs/elem sum3: 8465052097154389858, 0.41us, 39.23GB/s, 1.42 cycles/elem, 4.23 instrs/cycle, 3.48GHz, 6.01 instrs/elem sum4: 8465052097154389858, 0.38us, 41.69GB/s, 1.34 cycles/elem, 3.80 instrs/cycle, 3.48GHz, 5.07 instrs/elem128kB, 10000 iterations sum1: 6947699366156898439, 9.06us, 14.13GB/s, 3.95 cycles/elem, 1.01 instrs/cycle, 3.49GHz, 4.00 instrs/elem sum2: 6947699366156898439, 4.75us, 26.95GB/s, 2.07 cycles/elem, 4.84 instrs/cycle, 3.48GHz, 10.00 instrs/elem sum3: 6947699366156898439, 3.85us, 33.23GB/s, 1.68 cycles/elem, 3.58 instrs/cycle, 3.48GHz, 6.00 instrs/elem sum4: 6947699366156898439, 3.36us, 38.14GB/s, 1.46 cycles/elem, 3.46 instrs/cycle, 3.49GHz, 5.06 instrs/elem5000kB, 100 iterations sum1: 2134986631019855758, 0.36ms, 14.07GB/s, 3.96 cycles/elem, 1.01 instrs/cycle, 3.48GHz, 4.00 instrs/elem sum2: 2134986631019855758, 0.19ms, 26.25GB/s, 2.12 cycles/elem, 4.71 instrs/cycle, 3.48GHz, 10.00 instrs/elem sum3: 2134986631019855758, 0.17ms, 28.69GB/s, 1.94 cycles/elem, 3.09 instrs/cycle, 3.48GHz, 6.00 instrs/elem sum4: 2134986631019855758, 0.16ms, 30.30GB/s, 1.84 cycles/elem, 2.76 instrs/cycle, 3.48GHz, 5.06 instrs/elem4294MB, 1 iterations sum1: 15446485409674718527, 0.43 s, 9.94GB/s, 5.60 cycles/elem, 0.71 instrs/cycle, 3.48GHz, 4.00 instrs/elem sum2: 15446485409674718527, 0.31 s, 13.64GB/s, 4.08 cycles/elem, 2.45 instrs/cycle, 3.48GHz, 10.00 instrs/elem sum3: 15446485409674718527, 0.29 s, 14.72GB/s, 3.77 cycles/elem, 1.59 instrs/cycle, 3.47GHz, 6.00 instrs/elem sum4: 15446485409674718527, 0.29 s, 15.02GB/s, 3.70 cycles/elem, 1.37 instrs/cycle, 3.47GHz, 5.06 instrs/elem\n   The first three datasets are meant to fit in the L1 / L2 / L3 cache. In those cases, the improvements are very pronounced, and  sum3 /  sum4 are crunching the data at around 4 instructions per second, which should be close to the limit on the processor I tested the code on. When the data does not fit in the cache, the bottleneck becomes filling it, and we process the data at roughly 15 GB/s.\n I believe that this is as fast as one can go with \u201csimple\u201d single-threaded reading from RAM, and it\u2019s consistent with data from  sysbench:\n  The RAM-reading speed could probably be improved using SIMD streaming instructions or by reading from multiple threads, although the implementation would be significantly more complicated.\n And so we complete our journey into this low-level trick! If you want more of this, I can\u2019t reccomend  Per\u2019s account enough \u2013 figuring out how his tricks works has been very educational.\n Thanks to  Alexandru Scvortov,  Niklas Hamb\u00fcchen, Alex Appetiti, and  Carter T Schonwald for reading drafts of this post. Niklas also clarified some details regarding RAM speeds, and suggested  sysbench to measure single threaded RAM reading speed in particular.", "posttime": "2021-07-24 07:22:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f13\u5b58,\u6295\u673a,l1,cpu", "title": "\u7528\u4ef7\u503c\u6295\u673a\u6253\u8d25 L1 \u7f13\u5b58", "title_en": "Beating the L1 cache with value speculation", "transed": 1, "url": "https://mazzo.li/posts/value-speculation.html", "via": "", "real_tags": ["\u7f13\u5b58", "\u6295\u673a", "l1", "cpu"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069358, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b63\u5982\u60a8\u6240\u60f3\u8c61\u7684\u90a3\u6837\uff0c\u60a8\u5728\u559c\u5267\u6e38\u620f\u4e2d\u53ef\u4ee5\u505a\u7684\u5f88\u591a\u4e8b\u60c5\u5728\u8bd5\u56fe\u4fdd\u6301\u4e25\u8083\u65f6\u90fd\u884c\u4e0d\u901a\u3002\u4f60\u4e0d\u80fd\u7528\u4e00\u6bb5\u6709\u8da3\u7684\u81ea\u6211\u53c2\u7167\u5bf9\u8bdd\u6765\u63a9\u76d6\u4e00\u4e2a\u7cdf\u7cd5\u7684\u8c1c\u9898\u3002\u5443\uff0c\u4e0d\u662f\u6211\u66fe\u7ecf\u8fd9\u6837\u505a\u8fc7\u3002\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u4fdd\u6301\u57fa\u8c03\u548c\u620f\u5267\u6027\u5f27\u7ebf\u7684\u5916\u89c2\u4e5f\u662f\u4e00\u4e2a\u6311\u6218\u3002\u53e6\u4e00\u4e2a\u6311\u6218\u662f\u6587\u5316\u2014\u2014\u6211\u4eec\u8bd5\u56fe\u5728\u4e00\u4e2a\u5176\u4ed6\u4eba\u90fd\u5728\u5236\u4f5c\u6709\u8da3\u7684\u6e38\u620f\u3001\u8bb2\u7b11\u8bdd\u548c\u975e\u5e38\u53e4\u602a\u7684\u73af\u5883\u4e2d\u5236\u4f5c\u8fd9\u6b3e\u6e38\u620f\u200b\u200b\u3002\u8fd9\u5c31\u50cf\u5728\u5bbf\u820d\u805a\u4f1a\u671f\u95f4\u8bd5\u56fe\u4e3a\u7269\u7406\u51b3\u8d5b\u8865\u4e60\u3002\u52a0\u5165\u515a\u4f1a\u5bb9\u6613\u5f97\u591a\u3002 1989 \u5e74 10 \u6708 17 \u65e5\uff0cLucasArts [1] LucasArts \u7684\u9ad8\u7ea7\u804c\u5458\u5728 1992 \u5e74\u590f\u5929\u4e4b\u524d\u88ab\u79f0\u4e3a Lucasfilm Games\u3002\u4e3a\u4e86\u907f\u514d\u6df7\u6dc6\uff0c\u6211\u5728\u672c\u6587\u4e2d\u4f7f\u7528\u4e86\u201cLucasArts\u201d\u8fd9\u4e2a\u540d\u79f0\u3002\u805a\u96c6\u5728\u5929\u884c\u8005\u7267\u573a\u7684\u4e3b\u5c4b\uff0c\u53c2\u52a0\u4ed6\u4eec\u7684\u5b9a\u671f\u89c4\u5212\u4f1a\u8bae\u4e4b\u4e00\u3002\u5728\u8bc9\u8bbc\u8fc7\u7a0b\u4e2d\uff0c\u51e0\u4e4e\u4ece\u4e00\u5f00\u59cb\u5c31\u5728\u5de5\u4f5c\u5ba4\u5de5\u4f5c\u7684\u8bbe\u8ba1\u5e08\u517c\u7a0b\u5e8f\u5458\u8bfa\u4e9a\u00b7\u6cd5\u5c14\u65af\u5766 (Noah Falstein) \u4e86\u89e3\u5230\uff0c\u4ed6\u5c06\u8d1f\u8d23\u4e00\u4e2a\u540d\u4e3a The Dig \u7684\u6fc0\u52a8\u4eba\u5fc3\u7684\u65b0\u9879\u76ee\uff0c\u8be5\u9879\u76ee\u6e90\u4e8e\u4e00\u4e2a\u5192\u9669\u6e38\u620f\u7684\u60f3\u6cd5\uff0c\u6b63\u662f\u53f2\u8482\u6587\u00b7\u65af\u76ae\u5c14\u4f2f\u683c (Steven Spielberg) \u5411 LucasArts \u5448\u73b0\u7684\u3002 Falstein \u56de\u5fc6\u8bf4\uff0c\u5904\u7406\u5b8c\u90a3\u4ef6\u4e8b\u540e\u4e0d\u4e45\uff0c\u201c\u6211\u4eec\u611f\u5230\u623f\u95f4\u5f00\u59cb\u9707\u52a8\u2014\u2014\u8fd9\u5e76\u4e0d\u5947\u602a\uff0c\u6211\u4eec\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u7ecf\u5386\u4e86\u591a\u6b21\u5730\u9707\u2014\u2014\u4f46\u7a81\u7136\u95f4\u5b83\u53d8\u5f97\u66f4\u52a0\u5f3a\u70c8\uff0c\u6211\u4eec\u5f00\u59cb\u542c\u5230\u6709\u4eba\u5c16\u53eb\uff0c\u6709\u7684\u73bb\u7483\u6389\u5230\u4e86\u5730\u677f\u4e0a\uff0c\u6211\u4eec\u5927\u591a\u6570\u4eba\u90fd\u6f5c\u5165\u7ea2\u6728\u4f1a\u8bae\u684c\u5e95\u4e0b\u8eb2\u907f\u3002\u201d\u8fd9\u662f\u6d1b\u9a6c\u666e\u5217\u5854\u5730\u9707\uff0c\u8fd9\u573a\u5730\u9707\u5c06\u9020\u6210 63 \u4eba\u6b7b\u4ea1\uff0c\u53e6\u5916 400 \u4eba\u53d7\u91cd\u4f24\uff0c\u5e76\u5728\u5317\u52a0\u5dde\u9020\u6210\u4e86\u65e0\u6570\u7684\u8d22\u4ea7\u635f\u5931\u3002\u6216\u8bb8 Falstein \u548c\u4ed6\u7684\u540c\u4e8b\u5e94\u8be5\u628a\u5b83\u5f53\u4f5c\u4e00\u4e2a\u9884\u5146\u3002 Dig \u5c06\u53d8\u6210\u4e00\u573a\u6162\u52a8\u4f5c\u7684\u60e8\u8d25\uff0c\u5728\u5b83\u7684\u91cd\u538b\u4e0b\u7c89\u788e\u4e86\u7ecf\u9a8c\u4e30\u5bcc\u7684\u6e38\u620f\u5f00\u53d1\u8005\uff0c\u5176\u52e4\u594b\u4e0e\u5730\u9707\u6467\u6bc1\u4e86\u5965\u514b\u5170\u7684\u5c3c\u7c73\u5179\u9ad8\u901f\u516c\u8def\u4e00\u6837\u3002 1995 \u5e74\u672b\uff0c\u5f53\u6e38\u620f\u7684\u5b8c\u6210\u7248\u672c\u6700\u7ec8\u51fa\u73b0\u5728\u5546\u5e97\u7684\u8d27\u67b6\u4e0a\u65f6\uff0c\u4e00\u4e2a\u76f8\u5f53\u7c97\u9c81\u7684\u95ee\u9898\u5c06\u96be\u4ee5\u907f\u514d\uff1a\u4f60\u82b1\u4e86\u516d\u5e74\u65f6\u95f4\u5236\u4f5c\u8fd9\u4e2a\uff1f\u4e3a\u4e86\u8bb2\u8ff0 LucasArts \u5386\u53f2\u4e0a\u6700\u8457\u540d\u7684\u9ebb\u70e6\u9879\u76ee The Dig \u7684\u5b8c\u6574\u6545\u4e8b\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u65f6\u95f4\u5f80\u56de\u62e8\u5f97\u66f4\u8fdc\uff1a\u4e00\u76f4\u8ffd\u6eaf\u5230 1980 \u5e74\u4ee3\u4e2d\u671f\uff0c\u5f53\u65f6\u53f2\u8482\u6587\u00b7\u65af\u76ae\u5c14\u4f2f\u683c (Steven Spielberg) \u5728\u50cf\u300a\u593a\u5b9d\u5947\u5175\u300b\u548c\u300aET\uff1a\u5916\u661f\u4eba\u300b\u7b49\u5927\u7247\u7684\u5b9e\u529b\u3002\u5728\u6b64\u671f\u95f4\uff0c\u4e5f\u5c31\u662f Prestige TV \u51fa\u73b0\u7684\u8bb8\u591a\u5e74\u524d\uff0c\u65af\u76ae\u5c14\u4f2f\u683c\u5411 NBC \u63d0\u51fa\u4e86\u4e00\u4e2a\u540d\u4e3a\u300aAmazing Stories\u300b\u7684\u65b0\u9009\u96c6\u7cfb\u5217\u7684\u63d0\u6848\uff0c\u4ee5\u5728 1930 \u5e74\u4ee3\u548c 1940 \u5e74\u4ee3\u6210\u4e3a\u5370\u5237\u79d1\u5e7b\u5c0f\u8bf4\u5b75\u5316\u5668\u7684\u4f4e\u4fd7\u6742\u5fd7\u547d\u540d\u3002\u4ed6\u627f\u8bfa\u5076\u5c14\u4f1a\u81ea\u5df1\u5bfc\u6f14\u4e00\u96c6\uff0c\u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u53ea\u4f1a\u629b\u51fa\u53ef\u4ee5\u7531\u5176\u4ed6\u7f16\u5267\u548c\u5bfc\u6f14\u53d8\u6210\u73b0\u5b9e\u7684\u5927\u7eb2\u3002\u5728\u90a3\u4e9b\u613f\u610f\u5bfc\u6f14\u5267\u96c6\u7684\u4eba\u4e2d\uff0c\u6709\u4e00\u4e9b\u597d\u83b1\u575e\u6700\u53d7\u5c0a\u656c\u7684\u7535\u5f71\u5236\u7247\u4eba\uff1a\u50cf\u9a6c\u4e01\u00b7\u65af\u79d1\u585e\u65af\u3001\u6b27\u6587\u00b7\u514b\u4ec0\u7eb3\u3001\u7f57\u4f2f\u7279\u00b7\u6cfd\u7c73\u5409\u65af\u548c\u514b\u6797\u7279\u00b7\u4f0a\u65af\u7279\u4f0d\u5fb7\u8fd9\u6837\u7684\u4eba\u3002\u81ea\u7136\u800c\u7136\u5730\uff0cNBC \u5c31\u65e0\u6240\u4e0d\u7528\u5176\u6781\u4e86\u3002\u5728 1980 \u5e74\u4ee3\u7684\u7535\u89c6\u4e0a\uff0c\u60a8\u65e0\u6cd5\u5e0c\u671b\u770b\u5230\u8fd9\u6837\u7684\u5927\u94f6\u5e55\u4eba\u624d\u540d\u5355\u3002\u65b0\u7cfb\u5217\u4e8e 1985 \u5e74 9 \u6708 29 \u65e5\u9996\u6b21\u4eae\u76f8\uff0c\u5927\u8086\u5ba3\u4f20\u3002\u4f46\u4e0d\u77e5\u4f55\u6545\uff0c\u5b83\u4ece\u672a\u51fa\u73b0\u5728\u300a\u795e\u5947\u6545\u4e8b\u300b\u4e2d\uff1b\u4ece\u7b2c\u4e00\u96c6\u5f00\u59cb\uff0c\u8bc4\u8bba\u5bb6\u548c\u516c\u4f17\u7684\u4e3b\u8981\u53cd\u5e94\u662f\u4e00\u79cd\u6a21\u7cca\u7684\u5931\u671b\u3002\u90e8\u5206\u95ee\u9898\u662f\u6bcf\u96c6\u7684\u64ad\u653e\u65f6\u95f4\u53ea\u6709\u534a\u5c0f\u65f6\uff0c\u5982\u679c\u8003\u8651\u5230\u5e7f\u544a\u548c\u5b57\u5e55\uff0c\u5219\u4e3a 22 \u5206\u949f\uff1b\u5728\u90a3\u5fae\u4e0d\u8db3\u9053\u7684\u65f6\u95f4\u91cc\uff0c\u6545\u4e8b\u6216\u89d2\u8272\u53d1\u5c55\u7684\u7a7a\u95f4\u4e0d\u5927\u3002\u4f46\u53e6\u4e00\u4e2a\u66f4\u5927\u7684\u95ee\u9898\u662f\uff0c\u6545\u4e8b\u548c\u89d2\u8272\u901a\u5e38\u4e0d\u662f\u90a3\u4e48\u6709\u8da3\u6216\u539f\u521b\u3002\u65af\u76ae\u5c14\u4f2f\u683c\u4fe1\u5b88\u8bfa\u8a00\uff0c\u4f5c\u4e3a\u8be5\u5267\u7684\u521b\u610f\u4eba\uff0c\u4ed6\u4eb2\u81ea\u63d0\u4f9b\u4e86\u5df2\u5b8c\u6210\u7684 45 \u96c6\u7ea6 80% \u7684\u8d77\u6e90\uff0c\u4f46\u4ed6\u4e22\u5f03\u7684\u5927\u7eb2\u5f80\u5f80\u662f\u5bf9\u5176\u4ed6\u4eba\u5df2\u7ecf\u505a\u5f97\u66f4\u597d\u7684\u4e8b\u60c5\u7684\u7ffb\u7248\u3002\u5f53\u4ed6\u6709\u4e00\u4e2a\u4ed6\u771f\u6b63\u559c\u6b22\u7684\u60f3\u6cd5\u65f6\u2014\u2014\u6bd4\u5982\u5173\u4e8e\u4e00\u7fa4\u5fae\u578b\u5916\u661f\u4eba\u5e2e\u52a9\u5730\u7403\u4e0a\u516c\u5bd3\u697c\u7684\u5c45\u6c11\u89e3\u51b3\u4ed6\u4eec\u5728\u5730\u7403\u4e0a\u9047\u5230\u7684\u95ee\u9898\u2014\u2014\u4ed6\u503e\u5411\u4e8e\u5728\u5176\u4ed6\u5730\u65b9\u8d2d\u7269\u3002\u4f8b\u5982\uff0c\u4e0a\u8ff0\u60f3\u6cd5\u5bfc\u81f4\u4e86\u7535\u5f71\u4e0d\u5305\u62ec\u7535\u6c60\u3002\u5728\u7ecf\u5386\u4e86\u8bb8\u591a\u66f2\u6298\u4e4b\u540e\uff0c\u5c06\u6210\u4e3a\u7535\u8111\u6e38\u620f The Dig \u7684\u60c5\u8282\u521b\u610f\u4e0d\u5982\u90a3\u4e2a\u521b\u610f\u3002\u5b83\u6d89\u53ca\u4e00\u7ec4\u672a\u6765\u6d3e\u8003\u53e4\u5b66\u5bb6\u5728\u5e9f\u589f\u4e2d\u6316\u6398\u89c2\u4f17\u4f1a\u8ba4\u4e3a\u662f\u5931\u843d\u7684\u5916\u661f\u6587\u660e\u3002\u76f4\u5230\uff0c\u4e5f\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u955c\u5934\u63ed\u5f00\u4e86\u5927\u5e55\uff1a\u8003\u53e4\u5b66\u5bb6\u53d1\u73b0\u7684\u5947\u602a\u96d5\u50cf\u5c06\u88ab\u8bc1\u660e\u662f\u7c73\u8001\u9f20\uff0c\u800c\u5176\u80cc\u540e\u7684\u5de8\u5927\u5efa\u7b51\u662f\u7761\u7f8e\u4eba\u57ce\u5821\u3002\u4ed6\u4eec\u6b63\u5728\u8fea\u65af\u5c3c\u4e50\u56ed\u6316\u6398\uff0c\u5c31\u5728\u5730\u7403\u4e0a\uff01\u8fd9\u91cc\u7684\u95ee\u9898\u662f\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u770b\u5230\u4e86\u6240\u6709\u8fd9\u4e00\u5207\uff0c\u6700\u660e\u663e\u7684\u662f\u5728\u4eba\u733f\u661f\u7403\u7684\u7ed3\u5c3e\uff0c\u5f53\u5b83\u81ea\u5df1\u7684\u4e09\u540d\u5b87\u822a\u5458\u88ab\u56f0\u5728\u81ea\u5df1\u660e\u663e\u7684\u5916\u661f\u4e16\u754c\u65f6\uff0c\u4ed6\u4eec\u81ea\u5df1\u7684\u9ad8\u6f6e\u5df2\u7ecf\u5230\u6765\uff0c\u4ed6\u4eec\u53d1\u73b0\u4e86\u81ea\u7531\u5973\u795e\u50cf\u7684\u4e00\u534a\u2014\u2014\u57cb\u5728\u6c99\u5b50\u91cc\u3002\u56e0\u6b64\uff0c\u5f53\u8fd9\u4e2a\u7279\u5b9a\u7684\u60f3\u6cd5\u88ab\u8ba4\u4e3a\u5bf9\u4e8e\u300a\u795e\u5947\u6545\u4e8b\u300b\u7684\u5236\u4f5c\u6210\u672c\u592a\u9ad8\u65f6\uff0c\u5bf9\u540e\u4ee3\u6765\u8bf4\u5e76\u6ca1\u6709\u592a\u5927\u7684\u635f\u5931\u3002\u4f46\u672a\u6765\u8003\u53e4\u5b66\u7684\u6838\u5fc3\u6982\u5ff5\u5361\u5728\u65af\u76ae\u5c14\u4f2f\u683c\u7684\u53e3\u4e2d\uff0c\u540e\u6765\u53c8\u5728\u4e00\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u80cc\u666f\u4e0b\u518d\u6b21\u63a8\u51fa\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u8282\u76ee\u7684\u6536\u89c6\u7387\u8fc5\u901f\u4e0b\u964d\u3002\u4e24\u5b63\u7684\u521d\u59cb\u5408\u540c\u4e00\u5c65\u884c\u5b8c\u6bd5\uff0c\u300a\u60ca\u5929\u52a8\u5730\u7684\u6545\u4e8b\u300b\u5c31\u6084\u6084\u5730\u4ece\u7535\u6ce2\u4e2d\u6d88\u5931\u4e86\u3002\u5546\u4e1a\u5a92\u4f53\u6ca1\u6709\u4efb\u4f55\u4fdd\u8bc1\uff0c\u5373\u4f7f\u662f\u53f2\u8482\u6587\u65af\u76ae\u5c14\u4f2f\u683c\u7684\u70b9\u77f3\u6210\u91d1\uff0c\u8fd9\u6210\u4e3a\u4e00\u4e2a\u5ba2\u89c2\u7684\u6559\u8bad\u3002\u5feb\u8fdb\u51e0\u5e74\uff0c\u5f53\u65af\u76ae\u5c14\u4f2f\u683c\u4e0e\u4ed6\u7684\u597d\u670b\u53cb\u4e54\u6cbb\u5362\u5361\u65af\u5408\u4f5c\u5236\u4f5c\u4ed6\u6700\u65b0\u7684\u7535\u5f71\u5927\u7247\u5370\u7b2c\u5b89\u7eb3\u743c\u65af\u548c\u6700\u540e\u7684\u5341\u5b57\u519b\u65f6\uff0c\u4ed6\u6b63\u5904\u4e8e\u540e\u671f\u5236\u4f5c\u9636\u6bb5\u3002\u540e\u8005\u81ea\u5df1\u7684\u6e38\u620f\u5de5\u4f5c\u5ba4\u7684\u8bfa\u4e9a\u00b7\u6cd5\u5c14\u65af\u5766 (Noah Falstein) \u5df2\u88ab\u9009\u4e2d\u4e3a\u7535\u5f71\u8bbe\u8ba1\u4e00\u6b3e\u5192\u9669\u6e38\u620f\u3002\u5c3d\u7ba1\u65af\u76ae\u5c14\u4f2f\u683c\u6ca1\u6709\u81ea\u5df1\u7684\u6e38\u620f\u5de5\u4f5c\u5ba4\uff0c\u4f46\u8bbd\u523a\u7684\u662f\uff0c\u65af\u76ae\u5c14\u4f2f\u683c\u4e2a\u4eba\u5bf9\u7535\u8111\u6e38\u620f\u7684\u5174\u8da3\u8fdc\u8fdc\u8d85\u8fc7\u5362\u5361\u65af\u3002\u4ed6\u975e\u5e38\u5bc6\u5207\u5730\u5173\u6ce8 Falstein \u7684\u9879\u76ee\uff0c\u4ee5\u81f3\u4e8e\u5145\u5f53\u4e86\u4e00\u79cd\u975e\u5b98\u65b9\u7684 Beta \u6d4b\u8bd5\u5458\u3002\u5373\u4f7f\u5728\u7535\u5f71\u548c\u6e38\u620f\u4e0a\u6620\u540e\uff0c\u65af\u76ae\u5c14\u4f2f\u683c\u4e5f\u4f1a\u65f6\u4e0d\u65f6\u5730\u7ed9 LucasArts \u6253\u7535\u8bdd\uff0c\u4e3a\u4ed6\u4eec\u7684\u5176\u4ed6\u5192\u9669\u5bfb\u6c42\u7ebf\u7d22\uff0c\u6216\u8005\u6709\u65f6\u53ea\u662f\u4e3a\u4e86\u62cd\u62cd\u98ce\uff1b\u663e\u7136\uff0c\u4ed6\u5bf9\u5feb\u901f\u53d1\u5c55\u7684\u4e92\u52a8\u5a92\u4f53\u4e16\u754c\u5f88\u611f\u5174\u8da3\u3002\u5728\u5176\u4e2d\u4e00\u6b21\u8c08\u8bdd\u4e2d\uff0c\u4ed6\u8bf4\u4ed6\u6709\u4e00\u4e2a\u6982\u5ff5\uff0c\u5176\u8d77\u6e90\u53ef\u4ee5\u8ffd\u6eaf\u5230\u300a\u795e\u5947\u6545\u4e8b\u300b\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u4e2a\u6982\u5ff5\u53ef\u4ee5\u5f88\u597d\u5730\u7528\u4f5c\u6e38\u620f\u3002\u7136\u540e\u4ed6\u95ee\u4ed6\u662f\u5426\u53ef\u4ee5\u628a\u5b83\u5e26\u5230\u5929\u884c\u8005\u7267\u573a\u3002\u4ed6\u4e0d\u5fc5\u95ee\u4e24\u6b21\u3002\u65af\u76ae\u5c14\u4f2f\u683c\u6982\u8ff0\u7684\u6545\u4e8b\u4fdd\u7559\u4e86\u672a\u6765\u4e3b\u4e49\u8003\u53e4\u5b66\u4f5c\u4e3a\u5176\u6838\u5fc3\u4e3b\u9898\uff0c\u4f46\u660e\u667a\u5730\u653e\u5f03\u4e86\u7c73\u8001\u9f20\u7684\u9648\u8bcd\u6ee5\u8c03\u3002\u76f8\u53cd\uff0c\u8003\u53e4\u5b66\u5bb6\u5c06\u5728\u4e00\u4e2a\u771f\u6b63\u7684\u5916\u661f\u884c\u661f\u4e0a\uff0c\u53d1\u73b0\u65af\u76ae\u5c14\u4f2f\u683c\u8ba4\u4e3a\u662f\u5411 1950 \u5e74\u4ee3\u79d1\u5e7b\u7ecf\u5178\u300a\u7981\u5fcc\u661f\u7403\u300b\u81f4\u656c\u7684\u4e0d\u53ef\u601d\u8bae\u7684\u5148\u8fdb\u6280\u672f\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4e2a\u522b\u8003\u53e4\u5b66\u5bb6\u4f1a\u53d8\u5f97\u4e0d\u4fe1\u4efb\u5e76\u6700\u7ec8\u76f8\u4e92\u5f00\u6218\uff1b\u8fd9\u90e8\u5206\u60c5\u8282\u8ba9\u4eba\u56de\u60f3\u8d77\u65af\u76ae\u5c14\u4f2f\u683c\u559c\u6b22\u7684\u53e6\u4e00\u90e8\u7535\u5f71\uff0c\u7ecf\u5178\u7684\u897f\u90e8\u9a6c\u5fb7\u96f7\u5c71\u8109\u7684\u5b9d\u85cf\u3002\u4ea4\u7ed9\u4f60\u4e86\uff0c\u8bfa\u4e9a\u00b7\u6cd5\u5c14\u65af\u5766\u2014\u2014\u5728\u5730\u9707\u5e26\u6765\u7684\u4e0d\u6109\u5feb\u7684\u4e8b\u60c5\u88ab\u629b\u5728\u8111\u540e\uff0c\u5c31\u662f\u8fd9\u6837\u3002 LucasArts \u7684\u529e\u516c\u5ba4\u91cc\u6324\u6ee1\u4e86\u5728\u300a\u661f\u7403\u5927\u6218\u300b\u548c\u300a\u5370\u7b2c\u5b89\u7eb3\u743c\u65af\u300b\u7684\u5723\u5730\u5d07\u62dc\u957f\u5927\u7684\u5e74\u8f7b\u4eba\uff0c\u73b0\u5728\u4ed6\u4eec\u53d1\u73b0\u81ea\u5df1\u5904\u4e8e\u5b8c\u5168\u51fa\u4e4e\u610f\u6599\u7684\u4f4d\u7f6e\uff0c\u6bcf\u5929\u90fd\u5728\u5929\u884c\u8005\u7267\u573a\u4e0a\u73ed\uff0c\u88ab\u4ed6\u4eec\u7684\u7eaa\u5ff5\u54c1\u5305\u56f4\u7740\u3002\u795e\uff0c\u6709\u65f6\u662f\u795e\u660e\u81ea\u5df1\u3002\u4ed6\u4eec\u4e0e\u795e\u5723\u63a5\u89e6\u7684\u6545\u4e8b\u603b\u662f\u5f88\u6709\u8da3\uff0c\u5c24\u5176\u662f\u56e0\u4e3a\u5b83\u4eec\u542c\u8d77\u6765\u66f4\u50cf\u662f\u65af\u76ae\u5c14\u4f2f\u683c\u7535\u5f71\u4e2d\u7684\u60c5\u8282\uff0c\u800c\u4e0d\u662f\u4efb\u4f55\u4f3c\u662f\u800c\u975e\u7684\u73b0\u5b9e\u3002\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u666e\u901a\u4e2d\u4ea7\u9636\u7ea7\u5b69\u5b50\u80af\u5b9a\u4e0d\u4f1a\u5076\u7136\u627e\u5230\u4e00\u4efd\u4e3a\u661f\u7403\u5927\u6218\u7b56\u5212\u8005\u5de5\u4f5c\u7684\u5de5\u4f5c\uff0c\u4e0d\u662f\u5417\uff1f\u597d\u5427\uff0c\u4e8b\u5b9e\u8bc1\u660e\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4ed6\u4eec\u786e\u5b9e\u5982\u6b64\u3002\u5f53\u65f6\u6709\u62b1\u8d1f\u7684 LucasArts \u6e38\u620f\u8bbe\u8ba1\u5e08 Dave Grossman \u51fa\u5e2d\u4e86\u4e0e\u65af\u76ae\u5c14\u4f2f\u683c\u7684\u540e\u7eed\u4f1a\u8bae\uff0c\u5176\u4e2d\u8fd8\u5305\u62ec Lucas\u3001Falstein \u548c Maniac Mansion \u548c Monkey Island \u540d\u4eba\u7684\u6e38\u620f\u8bbe\u8ba1\u5e08 Ron Gilbert\u3002\u4ed6\u7684\u63cf\u8ff0\u5982\u6b64\u7cbe\u5f69\u5730\u6355\u6349\u5230\u4e86\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6210\u4e3a\u4e00\u4e2a\u661f\u5149\u71a0\u71a0\u7684\u5e74\u8f7b\u4eba\u7684\u611f\u89c9\uff0c\u6211\u60f3\u5728\u8fd9\u91cc\u5b8c\u6574\u5f15\u7528\u5b83\u3002\u5929\u884c\u8005\u7684\u4e3b\u5c4b\u662f\u4e00\u4e2a\u975e\u5e38\u65f6\u9ae6\u7684\u5730\u65b9\uff0c\u4f1a\u8bae\u5728\u4e00\u4e2a\u6709\u706b\u8f66\u8f66\u53a2\u5927\u5c0f\u7684\u684c\u5b50\u7684\u4f1a\u8bae\u5ba4\u4e3e\u884c\uff0c\u684c\u5b50\u7531\u6a61\u6728\u6216\u6843\u82b1\u5fc3\u6728\u6216\u5176\u4ed6\u4e00\u4e9b\u6602\u8d35\u7684\u6728\u6750\u5236\u6210\u3002\u6211\u662f\u4e00\u4e2a\u70e6\u8e81\u7684\u5c0f\u5b69\uff0c\u8863\u670d\u5df2\u7ecf\u76b1\u5df4\u5df4\u7684\uff0c\u8fd9\u4e2a\u623f\u95f4\u8ba9\u6211\u89c9\u5f97\u5c31\u50cf\u8212\u8299\u857e\u91cc\u7684\u70df\u5934\u4e00\u6837\u683c\u683c\u4e0d\u5165\u3002\u6211\u53ea\u662f\u5728\u8fd9\u91cc\u6709\u70b9\u7d27\u5f20\u3002\u7136\u540e\u4e54\u6cbb\u548c\u53f2\u8482\u6587\u51fa\u73b0\u4e86\uff0c\u6211\u4eec\u90fd\u6253\u62db\u547c\u3002\u73b0\u5728\uff0c\u6211\u4e00\u76f4\u5f88\u9177\uff0c\u597d\u50cf\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff0c\u6211\u77e5\u9053\u4ed6\u4eec\u53ea\u662f\u50cf\u5176\u4ed6\u4eba\u4e00\u6837\u6253\u55b7\u568f\u548c\u653e\u4e0b\u53c9\u5b50\u7684\u4eba\uff0c\u4f46\u662f\u2026\u2026\u662f\u5362\u5361\u65af\u548c\u65af\u76ae\u5c14\u4f2f\u683c\uff01\u8fd9\u4e9b\u4eba\u662f\u6709\u540d\u7684\u3001\u6709\u6743\u52bf\u7684\u3001\u5bcc\u6709\u7684\uff0c\u867d\u7136\u4ed6\u4eec\u7684\u884c\u4e3a\u4e0d\u50cf\u90a3\u4e9b\u4e1c\u897f\uff0c\u4f46\u6211\u5b8c\u5168\u88ab\u5413\u5012\u4e86\u3002 \uff08\u6211\u5e94\u8be5\u63d0\u4e00\u4e0b\uff0c\u867d\u7136\u6b64\u65f6\u6211\u5df2\u7ecf\u4e3a\u4e54\u6cbb\u5de5\u4f5c\u4e86\u4e00\u5e74\u5de6\u53f3\uff0c\u4f46\u8fd9\u53ea\u662f\u6211\u7b2c\u4e8c\u6b21\u89c1\u5230\u4ed6\u3002\uff09\u6211\u610f\u8bc6\u5230\u6211\u73b0\u5728\u771f\u7684\u5f88\u7d27\u5f20\u3002\u4e54\u6cbb\u548c\u53f2\u8482\u6587\u4e92\u76f8\u95f2\u804a\u4e86\u4e00\u4f1a\u513f\u3002\u4ed6\u4eec\u5df2\u7ecf\u6210\u4e3a\u670b\u53cb\u5f88\u957f\u65f6\u95f4\u4e86\uff0c\u8fd9\u8868\u660e\u3002\u4e54\u6cbb\u4f3c\u4e4e\u7279\u522b\u5174\u594b\u5730\u544a\u8bc9\u53f2\u8482\u6587\u4ed6\u7684\u65b0\u8f66\uff0c\u6211\u8ba4\u4e3a\u662f\u4e00\u8f86\u8bb4\u6b4c\u2014\u2014\u5b83\u4eec\u751a\u81f3\u8fd8\u6ca1\u6709\u5411\u516c\u4f17\u5f00\u653e\uff0c\u4f46\u4ed6\u8bbe\u6cd5\u628a\u7b2c\u4e00\u8f86\u4ece\u8239\u4e0a\u5f04\u4e0b\u6765\uff0c\u800c\u4e14\u5b83\u5c31\u505c\u5728\u4e86\u5927\u697c\u524d\u7684\u663e\u773c\u5904.\n\u5f88\u5feb\u4ed6\u4eec\u5c31\u5f00\u59cb\u8c08\u8bba The Dig \u7684\u60f3\u6cd5\uff0c\u4ed6\u4eec\u662f\u521b\u610f\u7684\u5feb\u901f\u5c04\u51fb\u673a\u67aa\u3002\u663e\u7136\uff0c\u4ed6\u4eec\u7ecf\u5e38\u8fd9\u6837\u505a\u3002\u8fd9\u4e00\u5207\u90fd\u662f\u975e\u5e38\u9ad8\u7ea7\u7684\u6982\u5ff5\uff0c\u5e76\u4e14\u904d\u5e03\u6574\u4e2a\u5730\u56fe\uff0c\u6211\u4e0d\u77e5\u9053\u6211\u4eec\u5c06\u5982\u4f55\u5c06\u5176\u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\u5236\u4f5c\u6210\u6e38\u620f\uff0c\u4f46\u8fd9\u5c31\u662f\u5934\u8111\u98ce\u66b4\u4f1a\u8bae\u7684\u5168\u90e8\u5185\u5bb9\u3002\u7f57\u6069\u548c\u8bfa\u4e9a\u63d0\u51fa\u4e86\u4e00\u4e9b\u60f3\u6cd5\u3002\u6211\u81ea\u5df1\u4e5f\u6709\u4e00\u4e9b\uff0c\u4f46\u4e0d\u77e5\u4f55\u6545\uff0c\u6211\u89c9\u5f97\u81ea\u5df1\u6ca1\u6709\u8d44\u683c\u548c\u4ed6\u4eec\u6253\u4ea4\u9053\u3002\u6240\u4ee5\u6211\u5750\u4e0b\u6765\u503e\u542c\uff0c\u6e10\u6e10\u5730\uff0c\u6211\u7684\u7d27\u5f20\u548c\u6211\u4ec0\u4e48\u90fd\u6ca1\u8bf4\u7684\u5c34\u5c2c\u4e00\u8d77\u52a0\u5165\u4e86\u3002\u5982\u679c\u6211\u6ca1\u8bb0\u9519\u7684\u8bdd\uff0c\u4e3a\u805a\u4f1a\u63d0\u4f9b\u4e86\u5c0f\u5403\uff0c\u67d0\u79cd\u6613\u788e\u7684\u78b3\u6c34\u5316\u5408\u7269\u98df\u54c1\uff0c\u7389\u7c73\u9762\u5305\u3002\u6240\u4ee5\u6211\u62ff\u4e86\u4e00\u5757\u2014\u2014\u6211\u6709\u70b9\u997f\u4e86\uff0c\u5b83\u8ba9\u6211\u53ef\u4ee5\u7528\u6211\u7684\u624b\u505a\u70b9\u4ec0\u4e48\u3002\u6211\u54ac\u4e00\u53e3\u3002\u901a\u5e38\uff0c\u5929\u884c\u8005\u7267\u573a\u7684\u98df\u7269\u7edd\u5bf9\u4ee4\u4eba\u60ca\u53f9\uff0c\u4f46\u8fd9\u79cd\u7279\u6b8a\u7684\u7389\u7c73\u9762\u5305\u5df2\u7ecf\u505a\u5f97\u7279\u522b\u5e72\u4e86\u3002\u7c89\u7b14\u5e72\u3002\u6211\u7684\u5634\u5df2\u7ecf\u56e0\u4e3a\u7d27\u5f20\u800c\u5e72\u6e34\u4e86\uff0c\u6240\u4ee5\u6211\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u541e\u4e0b\u54ac\u8fc7\u7684\u4e1c\u897f\uff0c\u5f53\u6211\u5480\u56bc\u548c\u5482\u5634\u65f6\uff0c\u6211\u786e\u5b9a\u6211\u53d1\u51fa\u7684\u566a\u97f3\u6bd4\u7eb8\u4e0a\u7684\u5341\u4e8c\u53ea\u9ec4\u9f20\u72fc\u8fd8\u8981\u591a\u5305\uff0c\u5373\u4f7f\u6bcf\u4e2a\u4eba\u90fd\u5047\u88c5\u6ca1\u6709\u6ce8\u610f\u5230\u3002\u623f\u95f4\u91cc\u6709\u996e\u6599\uff0c\u4f46\u5b83\u4eec\u88ab\u653e\u5728\u4e86\u4e0d\u788d\u4e8b\u7684\u5730\u65b9\uff0c\u79bb\u6211\u4eec\u5750\u7684\u5730\u65b9\u5927\u7ea6\u56db\u5206\u4e4b\u4e00\u82f1\u91cc\uff0c\u6211\u4e0d\u80fd\u5728\u4e0d\u7834\u574f\u4e00\u5207\u7684\u60c5\u51b5\u4e0b\u8d77\u5e8a\u53bb\u62ff\uff0c\u6211\u6562\u80af\u5b9a\u73b0\u5728\u4e54\u6cbb\u548c\u53f2\u8482\u6587\u9996\u5148\u60f3\u77e5\u9053\u6211\u4e3a\u4ec0\u4e48\u8981\u53c2\u52a0\u4f1a\u8bae\u3002\u6211\u60f3\u653e\u5f03\u7389\u7c73\u9762\u5305\uff0c\u4f46\u5b83\u5df2\u7ecf\u5f00\u59cb\u5206\u5d29\u79bb\u6790\uff0c\u6211\u4e0d\u80fd\u628a\u5b83\u653e\u5728\u6211\u7684\u5c0f\u9910\u5dfe\u7eb8\u4e0a\u800c\u4e0d\u4f1a\u628a\u5b83\u5f04\u5f97\u4e00\u56e2\u7cdf\u3002\u6240\u4ee5\u6211\u628a\u6574\u5757\u90fd\u5403\u4e86\u3002\u5927\u7ea6\u9700\u8981\u4e8c\u5341\u5206\u949f\u3002\u6211\u81ea\u5df1\u8eab\u4e0a\u6ee1\u662f\u7ec6\u788e\u7684\u788e\u5c51\uff0c\u4f46\u81f3\u5c11\u534e\u4e3d\u7684\u684c\u5b50\u4e0a\u6ca1\u6709\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8d4c\u6ce8\u76f8\u5f53\u9ad8\u3002\u56e0\u4e3a\u6211\u6c89\u9ed8\u4e86\u8fd9\u4e48\u4e45\uff0c\u5149\u662f\u6211\u8bf4\u51fa\u6765\u5c31\u662f\u4e00\u4ef6\u503c\u5f97\u6ce8\u610f\u7684\u4e8b\u60c5\uff0c\u6211\u6240\u8bf4\u7684\u4efb\u4f55\u4e8b\u60c5\u90fd\u5fc5\u987b\u7b26\u5408\u90a3\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u6807\u51c6\u3002\u4f60\u4e0d\u80fd\u7528\u4e00\u6b21\u6027\u7684\u8bc4\u8bba\u6253\u7834\u957f\u65f6\u95f4\u7684\u6c89\u9ed8\uff0c\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u6c89\u91cd\u7684\u3001\u4ee4\u4eba\u60ca\u53f9\u7684\u89c2\u5bdf\uff0c\u8ba9\u623f\u95f4\u91cc\u7684\u6bcf\u4e2a\u4eba\u90fd\u5728\u5b83\u7684\u5149\u8292\u4e2d\u91cd\u65b0\u5ba1\u89c6\u81ea\u5df1\u3002\u5f53\u6211\u5728\u7b49\u5f85\u4e00\u4e2a\u597d\u7684\u60f3\u6cd5\u65f6\uff0c\u66f4\u591a\u7684\u65f6\u95f4\u6d41\u901d\u5e76\u63d0\u9ad8\u4e86\u6807\u51c6\u3002\u6211\u5728\u4f1a\u8bae\u5269\u4e0b\u7684\u65f6\u95f4\u91cc\u51e0\u4e4e\u5b8c\u5168\u762b\u75ea\uff0c\u8bd5\u56fe\u5f04\u6e05\u695a\u5982\u4f55\u5728\u6ca1\u6709\u4eba\u6ce8\u610f\u5230\u7684\u60c5\u51b5\u4e0b\u79bb\u5f00\u623f\u95f4\uff0c\u6216\u8005\u66f4\u597d\u7684\u662f\uff0c\u6211\u5982\u4f55\u53ca\u65f6\u8fd4\u56de\u5e76\u5b89\u6392\u4e0d\u5728\u90a3\u91cc\u9996\u5148\u3002\u6240\u4ee5\uff0c\u662f\u7684\uff0c\u5728\u6211\u4eec\u5236\u4f5c The Dig \u65f6\uff0c\u6211\u786e\u5b9e\u5728\u6280\u672f\u4e0a\u4e0e\u53f2\u8482\u6587\u65af\u76ae\u5c14\u4f2f\u683c\u9762\u5bf9\u9762\u8fc7\u4e00\u6b21\u3002\u540e\u6765\u6211\u5b9e\u9645\u4e0a\u548c\u4ed6\u8c08\u8fc7\uff0c\u5f53\u4ed6\u6253\u7535\u8bdd\u7ed9\u6211\u4eec\u5176\u4ed6\u6e38\u620f\u7684\u63d0\u793a\u65f6\uff08\u6211\u8ba4\u4e3a\u662f\u89e6\u624b\u4e4b\u65e5\uff09\uff0c\u4ed6\u6b63\u5728\u548c\u4ed6\u7684\u513f\u5b50\u73a9\u3002 \uff08\u6210\u4e3a\u8457\u540d\u7535\u5f71\u5236\u4f5c\u4eba\u7684\u9c9c\u4e3a\u4eba\u77e5\u7684\u597d\u5904\u4e4b\u4e00\u662f\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4e0e\u6e38\u620f\u8bbe\u8ba1\u5e08\u4ea4\u8c08\u4ee5\u83b7\u53d6\u63d0\u793a\uff0c\u800c\u4e0d\u662f\u62e8\u6253\u63d0\u793a\u7ebf\u3002\uff09 \u597d\u4eba\u3002\u7535\u8111\u6e38\u620f\u754c\u5bf9\u65af\u76ae\u5c14\u4f2f\u683c\u53c2\u4e0e The Dig \u7684\u53cd\u5e94\u4e0e\u6234\u592b\u683c\u7f57\u65af\u66fc\u5728\u8fd9\u6b21\u4f1a\u8bae\u4e0a\u7684\u884c\u4e3a\u76f8\u4f3c\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4e00\u4e9b\u5927\u80c6\u7684\u884c\u4e1a\u6284\u5199\u5458\u5f00\u59cb\u79f0\u6e38\u620f\u662f\u4e00\u79cd\u6bd4\u7535\u5f71\u66f4\u4ee4\u4eba\u5174\u594b\u7684\u5a92\u4ecb\uff0c\u7531\u4e8e\u7279\u6b8a\u7684\u4ea4\u4e92\u6027\u800c\u6ce8\u5b9a\u4f1a\u66f4\u53d7\u6b22\u8fce\uff0c\u5305\u56f4 The Dig \u7684\u5a92\u4f53\u4f1a\u6beb\u4e0d\u7559\u60c5\u5730\u660e\u786e\u6307\u51fa\u5b83\u4eec\u7684\u80a4\u6d45\u865a\u5f20\u58f0\u52bf\uff0c\u6e38\u620f\u7684\u81ea\u5351\u611f\u5230\u5e95\u6709\u591a\u6df1\uff1a\u65af\u76ae\u5c14\u4f2f\u683c\u7684\u540d\u5b57\u80af\u5b9a\u4f1a\u51fa\u73b0\u5728\u6bcf\u4e2a\u5e7f\u544a\u3001\u9884\u89c8\u6216\u6700\u7ec8\u8bc4\u8bba\u7684\u7b2c\u4e00\u6bb5\u3002 \u201c\u53f2\u8482\u6587\u00b7\u65af\u76ae\u5c14\u4f2f\u683c\uff08Steven Spielberg\uff09\u5c48\u5c0a\u8868\u73b0\u51fa\u5bf9\u5c0f\u8001\u6211\u4eec\u7684\u5174\u8da3\uff01\u201d\u8fd0\u884c\u9690\u5f0f\u6d88\u606f\u3002\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u7092\u4f5c\u4e0e\u4ed6\u7684\u5b9e\u9645\u8d21\u732e\u6709\u70b9\u4e0d\u6210\u6bd4\u4f8b\u3002\u5728\u4e3a\u6e38\u620f\u63d0\u4f9b\u4e86\u6700\u521d\u7684\u60f3\u6cd5\u4e4b\u540e\u2014\u2014\u8fd9\u4e2a\u60f3\u6cd5\u4f1a\u5728\u6e38\u620f\u53d1\u5e03\u65f6\u53d8\u5f97\u65e0\u6cd5\u8bc6\u522b\u2014\u2014\u65af\u76ae\u5c14\u4f2f\u683c\u7ee7\u7eed\u8ba9\u81ea\u5df1\u5076\u5c14\u8fdb\u884c\u54a8\u8be2\uff1b\u5728\u5927\u7ea6 18 \u4e2a\u6708\u7684\u65f6\u95f4\u91cc\uff0c\u4ed6\u4f1a\u89c1\u4e86 Falstein \u548c\u4ed6\u7684\u540c\u4e8b\u8fdb\u884c\u4e86\u56db\u6b21\u5934\u8111\u98ce\u66b4\uff0c\u5176\u4e2d\u4e24\u6b21\u8fd8\u5305\u62ec\u4ed6\u7684\u597d\u53cb\u4e54\u6cbb\u5362\u5361\u65af\u3002 \uff08\u6beb\u65e0\u7591\u95ee\uff0c\u591a\u4e8f\u4e86\u4ed6\u670b\u53cb\u7684\u9f13\u52b1\uff0c\u5362\u5361\u65af\u81ea\u5df1\u53c2\u4e0e\u4e86 The Dig \u7684\u8fc7\u7a0b\u5c31\u50cf\u4ed6\u5728\u4ed6\u7684\u6e38\u620f\u5de5\u4f5c\u5ba4\u7684\u4f5c\u54c1\u4e2d\u6240\u505a\u7684\u4e00\u6837\u3002\uff09\u7136\u800c\uff0c\u8fd9\u4e9b\u5bf9\u8bdd\u662f\u5426\u5177\u6709\u771f\u6b63\u7684\u5b9e\u9645\u7528\u9014\u8fd8\u4e0d\u592a\u6e05\u695a\u7ed9\u5728\u6218\u58d5\u91cc\u7684\u5f00\u53d1\u5546\u3002\u663e\u7136\uff0c\u65af\u76ae\u5c14\u4f2f\u683c\u548c\u5362\u5361\u65af\u90fd\u4e0d\u662f\u6e38\u620f\u8bbe\u8ba1\u5e08\uff0c\u56e0\u6b64\u4ed6\u4eec\u503e\u5411\u4e8e\u5173\u6ce8\u53ef\u80fd\u4ea7\u751f\u53ef\u89c2\u770b\u7535\u5f71\u4f46\u5bf9\u5236\u4f5c\u53ef\u73a9\u6e38\u620f\u5e2e\u52a9\u4e0d\u5927\u7684\u4e1c\u897f\u3002\u8bfa\u4e9a\u00b7\u6cd5\u5c14\u65af\u5766 (Noah Falstein) \u5f88\u5feb\u53d1\u73b0\uff0c\u9886\u5bfc\u4e00\u4e2a\u6d89\u53ca\u4e24\u4e2a\u5982\u6b64\u5f15\u4eba\u6ce8\u76ee\u7684\u4eba\u7269\u7684\u9879\u76ee\u5e76\u4e0d\u50cf\u4ed6\u60f3\u8c61\u7684\u90a3\u6837\u4ee4\u4eba\u7fa1\u6155\u3002\u6b64\u540e\uff0c\u4ed6\u8c28\u614e\u5730\u63cf\u8ff0\u4e86\u4e00\u4e2a\u9879\u76ee\uff0c\u201c\u6bcf\u4e2a\u4eba\u90fd\u60f3\u6295\u5165\u4e24\u5206\u94b1\uff0c\u8fd9\u53ef\u80fd\u975e\u5e38\u96be\u4ee5\u7ba1\u7406\u3002\u201d\n\u5728\u5bfb\u6c42\u4e00\u6b3e\u53ef\u4ee5\u5728 SCUMM\uff08LucasArts \u7684\u5185\u90e8\u70b9\u51fb\u5f0f\u5192\u9669\u5f15\u64ce\uff09\u7684\u9650\u5236\u8303\u56f4\u5185\u5b9e\u65bd\u7684\u6e38\u620f\u65f6\uff0cFalstein \u524a\u5f31\u4e86\u65af\u76ae\u5c14\u4f2f\u683c\u5173\u4e8e\u4e24\u652f\u8003\u53e4\u5b66\u5bb6\u56e2\u961f\u76f8\u4e92\u5c55\u5f00\u516c\u5f00\u6218\u4e89\u7684\u60f3\u6cd5\u3002\u4ed6\u7684\u6700\u7ec8\u8bbe\u8ba1\u6587\u4ef6\u6700\u540e\u4e00\u6b21\u66f4\u65b0\u662f\u5728 1991 \u5e74 1 \u6708 30 \u65e5\uff0c\u5b83\u53d1\u751f\u5728\u201c\u672a\u6765\uff0c\u8ddd\u9ea6\u57fa\u5229\u666e\u9a71\u52a8\u5668\u4f7f\u8d85\u5149\u901f\u65c5\u884c\u6210\u4e3a\u53ef\u80fd\u8fd1 80 \u5e74\uff0c\u4ee5\u53ca\u7b2c\u4e00\u4e2a\u661f\u9645\u6b96\u6c11\u5730\u6210\u7acb\u4ec5 50 \u5e74\u3002\u518d\u6b21\u5411\u65af\u76ae\u5c14\u4f2f\u683c\u7684\u65e7\u300a\u795e\u5947\u6545\u4e8b\u300b\u5927\u7eb2\u81f4\u656c\uff0c\u4e00\u4e2a\u65e0\u4eba\u63a2\u6d4b\u5668\u6700\u8fd1\u53d1\u73b0\u4e86\u4e00\u5ea7\u5de8\u5927\u7684\u96d5\u50cf\uff0c\u8038\u7acb\u5728\u4e00\u4e2a\u8fc4\u4eca\u4e3a\u6b62\u5c1a\u672a\u63a2\u7d22\u8fc7\u7684\u661f\u7403\u8868\u9762\u7684\u5176\u4ed6\u5916\u661f\u5e9f\u589f\u4e2d\u3002\u4e3a\u4e86\u5411\u73c0\u897f\u96ea\u83b1\u6700\u8457\u540d\u7684\u8bd7\u81f4\u656c\uff0c\u8fd9\u4e2a\u661f\u7403\u88ab\u547d\u540d\u4e3a\u5965\u5179\u66fc\u8fea\u4e9a\u65af\u3002\u73b0\u5728\u4e09\u4e2a\u4eba\u6765\u5230\u5965\u5179\u66fc\u8fea\u4e9a\u65af\u8c03\u67e5\u63a2\u6d4b\u5668\u7684\u53d1\u73b0\u2014\u2014\u4f46\u4ed6\u4eec\u4e0d\u518d\u662f\u771f\u6b63\u7684\u8003\u53e4\u5b66\u5bb6\uff0c\u53ea\u662f\u673a\u4f1a\u4e3b\u4e49\u7684\u5bfb\u5b9d\u8005\uff0c\u7531\u4e00\u4e2a\u540d\u53eb\u6c64\u59c6\u5c11\u6821\u7684\u7c97\u7565\u89d2\u8272\uff08\u5927\u6982\u662f\u5bf9\u5927\u536b\u9c8d\u4f0a\u7684\u70b9\u5934\uff09\u9886\u5bfc\u3002\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u6c64\u59c6\u5c11\u6821\u7684\u4e24\u4e2a\u4e0b\u5c5e\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4f5c\u4e3a\u5979\u7684\u5316\u8eab\u3002\u5728\u4eba\u7c7b\u7740\u9646\u540e\u4e0d\u4e45\uff0c\u4e00\u7cfb\u5217\u4e0d\u5e78\u7684\u4e8b\u4ef6\u63a5\u8e35\u800c\u81f3\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u6c64\u59c6\u5c11\u6821\u88ab\u6740\uff0c\u4ed6\u4eec\u7684\u98de\u8239\u53d7\u635f\uff0c\u65e0\u6cd5\u4fee\u590d\u3002\u4e24\u4e2a\u5e78\u5b58\u8005\u53d1\u751f\u4e89\u6267\uff0c\u5404\u5954\u4e1c\u897f\uff0c\u4f46\u5728\u8fd9\u4e2a\u7248\u672c\u7684\u5267\u672c\u4e2d\uff0c\u4ed6\u4eec\u662f\u51b7\u6218\u800c\u4e0d\u662f\u70ed\u6218\u3002\u968f\u7740\u6e38\u620f\u7684\u8fdb\u884c\uff0c\u73a9\u5bb6\u53d1\u73b0\u751f\u6d3b\u5728\u5e9f\u589f\u4e2d\u7684\u4e00\u4e2a\u539f\u59cb\u5916\u661f\u4eba\u79cd\u65cf\u5b9e\u9645\u4e0a\u662f\u66f4\u5148\u8fdb\u7684\u7956\u5148\u7684\u540e\u4ee3\uff0c\u4ed6\u4eec\u5f88\u4e45\u4ee5\u524d\u6467\u6bc1\u4e86\u4ed6\u4eec\u7684\u6587\u660e\uff0c\u5e76\u7528\u5185\u5728\u7684\u7ec6\u83cc\u6218\u51e0\u4e4e\u6d88\u706d\u4e86\u4ed6\u4eec\u7684\u6574\u4e2a\u7269\u79cd\u3002\u4f46\u662f\uff0c\u73a9\u5bb6\u7ee7\u7eed\u5b66\u4e60\uff0c\u4e24\u4e2a\u6d3e\u7cfb\u7684\u5e78\u5b58\u8005\u90fd\u5728\u5730\u7403\u8868\u9762\u4e0b\u7684\u4f4e\u6e29\u7761\u7720\u4e2d\u8fdb\u884c\u4e86\u4e16\u754c\u672b\u65e5\u7684\u6700\u540e\u6218\u4e89\u3002\u5979\u7684\u6700\u7ec8\u76ee\u6807\u662f\u5524\u9192\u8fd9\u4e9b\u5e78\u5b58\u8005\u5e76\u5728\u4ed6\u4eec\u4e4b\u95f4\u534f\u5546\u548c\u5e73\uff0c\u8fd9\u65e2\u662f\u56e0\u4e3a\u8fd9\u662f\u6b63\u786e\u7684\u505a\u6cd5\uff0c\u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e9b\u5916\u661f\u4eba\u5e94\u8be5\u62e5\u6709\u4fee\u7406\u635f\u574f\u7684\u5b87\u5b99\u98de\u8239\u6240\u9700\u7684\u77e5\u8bc6\u548c\u5de5\u5177\u3002\u65e0\u8bba\u597d\u574f\uff0c\u8fd9\u4e2a\u7cbe\u7b80\u4f46\u4ecd\u7136\u96c4\u5fc3\u52c3\u52c3\u7684 The Dig \u613f\u666f\u4ece\u672a\u8d85\u51fa\u6700\u7ec8\u8bbe\u8ba1\u6587\u4ef6\u548c\u5927\u91cf\u4f34\u968f\u7684\u6982\u5ff5\u827a\u672f\u53d1\u5c55\u3002 \u201c\u5728\u5176\u4e2d\u4e00\u4e2a\u66f4\u6709\u8da3\u7684\u8c1c\u9898\u4e0a\u8fdb\u884c\u4e86\u4e00\u4e9b SCUMM \u7f16\u7a0b\uff0c\u4f46\u4e0d\u591a[\u66f4\u591a]\uff0c\u201dFalstein \u8bf4\u3002\u4ed6\u5728 1991 \u5e74\u5f88\u65e9\u5c31\u9000\u51fa\u4e86\u8fd9\u4e2a\u9879\u76ee\uff0c\u8f6c\u800c\u5e2e\u52a9\u54c8\u5c14\u00b7\u5df4\u4f0d\u5fb7\u5904\u7406\u5370\u7b2c\u5b89\u7eb3\u00b7\u743c\u65af\u548c\u4e9a\u7279\u5170\u8482\u65af\u7684\u547d\u8fd0\u3002\u5f53\u4ed6\u7684\u7b2c\u4e8c\u573a\u5370\u7b2c\u5b89\u7eb3\u743c\u65af\u6bd4\u8d5b\u7ed3\u675f\u65f6\uff0c\u5c3d\u7ba1\u4ed6\u6709\u7740\u957f\u671f\u4e14\u582a\u79f0\u5178\u8303\u7684\u8bb0\u5f55\uff0c\u4f46\u4ed6\u8fd8\u662f\u88ab\u89e3\u96c7\u4e86\u3002\u4e0e\u6b64\u540c\u65f6\uff0cThe Dig \u9677\u5165\u4e86\u4e00\u5e74\u6216\u66f4\u957f\u65f6\u95f4\u7684\u56f0\u5883\uff0c\u76f4\u5230\u5b83\u88ab\u4f20\u7ed9\u4e86 Brian Moriarty\uff0c\u4ed6\u662f 1980 \u5e74\u4ee3\u6587\u672c\u5192\u9669\u5de8\u5934 Infocom \u548c LucasArts \u81ea\u5df1\u53ef\u7231\u6292\u60c5\u7684 Loom \u7684\u4e09\u6b3e\u6e38\u620f\u7684\u4f5c\u5bb6\u548c\u8bbe\u8ba1\u5e08\u3002\u6700\u8fd1\uff0c\u4ed6\u4e00\u76f4\u5728\u4e3a\u4e00\u6b3e\u57fa\u4e8e\u300a\u5e74\u8f7b\u7684\u5370\u7b2c\u5b89\u7eb3\u743c\u65af\u7f16\u5e74\u53f2\u300b\u7684\u6e38\u620f\u8d77\u8349\u8ba1\u5212\uff0c\u8fd9\u662f\u65af\u76ae\u5c14\u4f2f\u683c\u6700\u8fd1\u4e00\u6b21\u4ee4\u4eba\u5931\u671b\u5730\u6d89\u8db3\u7535\u89c6\u9886\u57df\uff0c\u4f46\u7531\u4e8e\u4e2a\u4eba\u5bf9\u8be5\u9879\u76ee\u7f3a\u4e4f\u70ed\u60c5\uff0c\u5bfc\u81f4\u8fdb\u5c55\u4ee4\u4eba\u6cae\u4e27\u3002 Moriarty \u88ab\u79f0\u4e3a\u6c14\u8d28\u6700\u201c\u6587\u5b66\u201d\u7684\u6e38\u620f\u8bbe\u8ba1\u5e08\u4e4b\u4e00\uff1b\u4ed6\u5728 Infocom \u7684\u8001\u540c\u4e8b\u79f0\u4ed6\u4e3a\u201c\u83ab\u91cc\u4e9a\u8482\u6559\u6388\u201d\uff0c\u4e0e\u5176\u8bf4\u662f\u5bf9\u798f\u5c14\u6469\u65af\u6240\u5904\u7684\u73af\u5883\uff0c\u4e0d\u5982\u8bf4\u662f\u5bf9\u4ed6\u7684\u4e00\u822c\u6027\u60c5\u7684\u8ba4\u53ef\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u7684\u300a\u4e09\u4f4d\u4e00\u4f53\u300b\u63a5\u8fd1\u4e8e Infocom \u51fa\u7248\u7684\u9ad8\u7ea7\u6587\u5b66\u4f5c\u54c1\uff0c\u800c\u4ed6\u7684 Loom \u51e0\u4e4e\u62e5\u6709\u540c\u6837\u4ee4\u4eba\u96be\u4ee5\u5fd8\u6000\u7684\u7f8e\u3002\u6709\u7406\u7531\u8ba4\u4e3a\u81ea\u5df1\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u4e92\u52a8\u5f0f\u5bfc\u6f14\uff0c\u4ed6\u8981\u6c42\u5b8c\u5168\u63a7\u5236 The Dig \u7684\u5404\u4e2a\u65b9\u9762\uff0c\u4f5c\u4e3a\u63a5\u53d7\u5b83\u7684\u6761\u4ef6\u3002 LucasArts \u7684\u7ba1\u7406\u5c42\u627f\u8ba4\u4e86\u4ed6\u7684\u5353\u8d8a\u58f0\u8a89\u3002 Moriarty \u5728 The Dig \u4e0a\u82b1\u8d39\u7684 18 \u4e2a\u6708\u671f\u95f4\u53d1\u751f\u7684\u5927\u90e8\u5206\u4e8b\u60c5\u4ecd\u7136\u6a21\u7cca\u4e0d\u6e05\uff0c\u4f46\u5b83\u663e\u7136\u53d8\u6210\u4e86\u4e00\u4e2a\u975e\u5e38\u9ebb\u70e6\u3001\u6fc0\u70c8\u7684\u9879\u76ee\u3002\u4ed6\u5bf9 Falstein \u7684\u613f\u666f\u8fdb\u884c\u4e86\u6982\u62ec\u6027\u5206\u7c7b\uff0c\u8fd9\u8ba9\u4ed6\u4e0e\u56e2\u961f\u4e2d\u7684\u8bb8\u591a\u4eba\u8d70\u9519\u4e86\u8def\u2014\u2014\u4ed6\u4eec\u559c\u6b22\u751a\u81f3\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u79ef\u6781\u8d21\u732e\u4e86\u8fd9\u4e00\u613f\u666f\u3002\u76f8\u53cd\uff0c\u4ed6\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u6846\u67b6\u60c5\u8282\u3002 The Dig \u73b0\u5728\u53d1\u751f\u5728 1998 \u5e74\uff0c\u800c\u4e0d\u662f\u9065\u8fdc\u7684\u672a\u6765\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u7684\u5f00\u5934\u5c06\u7a81\u51fa\u5c55\u793a\u4e9a\u7279\u5170\u8482\u65af\u53f7\uff0c\u8fd9\u662f\u4e00\u8258\u76ee\u524d\u7531\u7f8e\u56fd\u5b87\u822a\u5c40\u9a7e\u9a76\u7684\u822a\u5929\u98de\u673a\u3002\u4e00\u9897\u5de8\u5927\u7684\u5c0f\u884c\u661f\u6b63\u5728\u4e0e\u5730\u7403\u53d1\u751f\u78b0\u649e\u3002\u4eba\u7c7b\u552f\u4e00\u7684\u5e0c\u671b\u662f\u5728\u592a\u7a7a\u4e0e\u5b83\u76f8\u9047\u5e76\u5728\u5176\u8868\u9762\u5b89\u653e\u4e00\u5957\u6838\u5f39\u3002\u4e00\u65e6\u7206\u70b8\uff0c\u5b83\u4eec\u6709\u671b\u4f7f\u5c0f\u884c\u661f\u504f\u8f6c\u8db3\u4ee5\u907f\u5f00\u5730\u7403\u3002 \uff08\u4e0e 1998 \u5e74\u7684\u4e24\u90e8\u7cdf\u7cd5\u7684\u7535\u5f71\u76f8\u4f3c\uff0c\u8fd9\u5927\u6982\u662f\u5de7\u5408\u3002\uff09\u4f60\u626e\u6f14\u6ce2\u58eb\u987f\u6d1b\u592b\uff0c\u4efb\u52a1\u7684\u6307\u6325\u5b98\u3002\u4f46\u6210\u529f\u6267\u884c\u4efb\u52a1\u3001\u62ef\u6551\u5730\u7403\u53ea\u662f\u771f\u6b63\u5267\u60c5\u7684\u5e8f\u5e55\u3002\u4e00\u65e6\u60a8\u6709\u65f6\u95f4\u63a2\u7d22\u8fd9\u9897\u5c0f\u884c\u661f\uff0c\u60a8\u548c\u60a8\u7684\u8239\u5458\u5c31\u4f1a\u5f00\u59cb\u53d1\u73b0\u5b83\u7684\u8bb8\u591a\u5947\u602a\u4e4b\u5904\uff0c\u8fd9\u8bc1\u660e\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u667a\u80fd\u5b58\u5728\u5728\u60a8\u9762\u524d\u3002\u5728\u4f60\u7684\u8c03\u67e5\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u8bf1\u6740\u88c5\u7f6e\uff0c\u5c06\u4f60\u548c\u5176\u4ed6\u4e09\u540d\u8239\u5458\u5e26\u5230\u4e86\u4e00\u4e2a\u5145\u6ee1\u5916\u661f\u6280\u672f\u6b8b\u4f59\u7684\u795e\u79d8\u4e16\u754c\u3002\n......", "note_en": "As you would imagine, a lot of the things you can do in a comedy game just don\u2019t work when trying to remain serious. You can\u2019t cover up a bad puzzle with a funny line of self-referential dialog. Er, not that I ever did that. But anyway, it was also a challenge to maintain the tone and some semblance of a dramatic arc. Another challenge was cultural \u2014 we were trying to build this game in an environment where everyone else was building funny games, telling jokes, and being pretty outlandish. It was like trying to cram for a physics final during a dorm party. It would have been a lot easier to join the party.\n On October 17, 1989, the senior staff of LucasArts   [1] LucasArts was known as Lucasfilm Games until the summer of 1992. To avoid confusion, I use the name \u201cLucasArts\u201d throughout this article. assembled in the Main House of Skywalker Ranch for one of their regular planning meetings. In the course of proceedings, Noah Falstein, a designer and programmer who had been with the studio almost from the beginning, learned that he was to be given stewardship of an exciting new project called  The Dig, born from an idea for an adventure game that had been presented to LucasArts by none other than Steven Spielberg. Soon after that bit of business was taken care of, remembers Falstein, \u201cwe felt the room start to shake \u2014 not too unusual, we\u2019d been through many earthquakes in California \u2014 but then suddenly it got much stronger, and we started to hear someone scream, and some glass crash to the floor somewhere, and most of us dived under the mahogany conference table to ride it out.\u201d It was the Loma Prieta Earthquake, which would kill 63 people, seriously injure another 400, and do untold amounts of property damage all around Northern California.\n Perhaps Falstein and his colleagues should have taken it as an omen.  The Dig would turn into a slow-motion fiasco that crushed experienced game developers under its weight with the same assiduity with which the earthquake collapsed Oakland\u2019s Nimitz Freeway. When a finished version of the game finally appeared on store shelves in late 1995, one rather ungenerous question would be hard to avoid asking: it took you six years to make  this?\n  In order to tell the full story of  The Dig, the most famously troubled project in the history of LucasArts, we have to wind the clock back yet further: all the way back to the mid-1980s, when Steven Spielberg was flying high on the strength of blockbusters like   Raiders of the Lost Ark and   E.T.: The Extra-Terrestrial. During this period, many years before the advent of Prestige TV, Spielberg approached NBC with a proposal for a new anthology series named   Amazing Stories, after the pulp magazine that had been such an incubator of printed science fiction in the 1930s and 1940s. He would direct the occasional episode himself, he promised, but would mostly just throw out outlines which could be turned into reality by other screenwriters and directors. Among those willing to direct episodes were some of the most respected filmmakers in Hollywood: people like Martin Scorsese, Irvin Kershner, Robert Zemeckis, and Clint Eastwood. Naturally, NBC was all over it; nowhere else on the television of the 1980s could you hope to see a roster of big-screen talent anything like that. The new series debuted with much hype on September 29, 1985.\n  But somehow it just never came together for  Amazing Stories; right from the first episodes, the dominant reaction from both critics and the public was one of vague disappointment. Part of the problem was each episode\u2019s running time of just half an hour, or 22 minutes once commercials and credits were factored in; there wasn\u2019t much scope for story or character development in that paltry span of time. But another, even bigger problem was that what story and characters were there weren\u2019t often all that interesting or original. Spielberg kept his promise to serve as the show\u2019s idea man, personally providing the genesis of some 80 percent of the 45 episodes that were completed, but the outlines he tossed off were too often retreads of things that others had already done better. When he had an idea he  really liked \u2014 such as the one about a group of miniature aliens who help the residents of an earthbound apartment block with their very earthbound problems \u2014 he tended to shop it elsewhere. The aforementioned idea, for example, led to the film   Batteries Not Included.\n The episode idea that would become the computer game  The Dig after many tortuous twists and turns was less original than that one. It involved a team of futuristic archaeologists digging in the ruins of what the audience would be led to assume was a lost alien civilization. Until, that is, the final shot set up the big reveal: the strange statue the archaeologists had been uncovering would be shown to be Mickey Mouse, while the enormous building behind it was the Sleeping Beauty Castle. They were digging at Disneyland, right here on Planet Earth!\n The problem here was that we had seen all of this before, most notably at the end of   Planet of the Apes, whose own climax had come when its own trio of astronauts stranded on its own apparently alien world had discovered the Statue of Liberty half-buried in the sand. Thus it was no great loss to posterity when this particular idea was judged too expensive for  Amazing Stories to produc e. But the core concept of archaeology in the future got stuck in Spielberg\u2019s craw, to be trotted out again later in a very different context.\n In the meantime, the show\u2019s ratings were falling off quickly. As soon as the initial contract for two seasons had been fulfilled,  Amazing Stories quietly disappeared from the airwaves. It became an object lesson that nothing is guaranteed in commercial media, not even Steven Spielberg\u2019s Midas touch.\n Fast-forward a couple of years, to when Spielberg was in the post-production phase of his latest cinematic blockbuster,   Indiana Jones and the Last Crusade, which he was making in partnership with his good friend George Lucas. Noah Falstein of  the latter\u2019s very own games studio had been drafted to design  an adventure game of the movie. Despite his lack of a games studio of his own, Spielberg was ironically far more personally interested in computer games than Lucas; he followed Falstein\u2019s project quite closely, to the point of serving as a sort of unofficial beta tester. Even after the movie and game were released, Spielberg would ring up LucasArts from time to time to beg for hints for their other adventures, or sometimes just to shoot the breeze; he was clearly intrigued by the rapidly evolving world of interactive media. During one of these conversations, he said he had a concept whose origins dated back to  Amazing Stories, one which he believed might work well as a game. And then he asked if he could bring it over to Skywalker Ranch. He didn\u2019t have to ask twice.\n The story that Spielberg outlined retained futuristic archaeology as its core motif, but wisely abandoned the clich\u00e9d reveal of Mickey Mouse. Instead the archaeologists would be on an actual alien planet, discovering impossibly advanced technology in what Spielberg conceived as an homage to the 1950s science-fiction classic   Forbidden Planet. Over time, the individual archaeologists would come to distrust and eventually go to war with one another; this part of the plot hearkened back to another film that Spielberg loved, the classic Western   The Treasure of the Sierra Madre. Over to you, Noah Falstein \u2014 after the unpleasant business of the earthquake was behind everybody, that is.\n  The offices of LucasArts were filled with young men who had grown up worshiping at the shrines of  Star Wars and Indiana Jones, and who now found themselves in the completely unexpected position of going to work every day at Skywalker Ranch, surrounded by the memorabilia of their gods and sometimes by the deities themselves. Their stories of divine contact are always entertaining, not least for the way that they tend to sound more like a plot from one of Spielberg\u2019s films than any plausible reality; surely ordinary middle-class kids in the real world don\u2019t just stumble into a job working for the mastermind of  Star Wars, do they? Well, it turns out that in some cases they do. Dave Grossman, an aspiring LucasArts game designer at the time, was present at a follow-up meeting with Spielberg that also included Lucas, Falstein, and game designer Ron Gilbert of   Maniac Mansion and   Monkey Island fame. His account so magnificently captures what it was like to be a starstruck youngster in those circumstances that I want to quote it in full here.\n The Main House at Skywalker is a pretty swanky place, and the meeting is in a boardroom with a table the size of a railroad car, made of oak or mahogany or some other sort of expensive wood. I\u2019m a fidgety young kid with clothes that come pre-wrinkled, and this room makes me feel about as out of place as a cigarette butt in a souffl\u00e9. I\u2019m a little on edge just being in here.\n Then George and Steven show up and we all say hello. Now, I\u2019ve been playing it cool like it\u2019s no big deal, and I know they\u2019re just people who sneeze and drop forks like everybody else, but\u2026 it\u2019s Lucas and Spielberg! These guys are famous and powerful and rich and, although they don\u2019t act like any of those things, I\u2019m totally intimidated. (I should mention that although I\u2019ve been working for George for a year or so at this point, this is only the second time I\u2019ve met him.) I realize I\u2019m really fairly nervous now.\n George and Steven chit-chat with each other for a little bit. They\u2019ve been friends a long time and it shows. George seems particularly excited to tell Steven about his new car, an  Acura I think \u2013 they\u2019re not even available to the public yet, but he\u2019s managed to get the first one off the boat, and it\u2019s parked conspicuously right in front of the building.\n Pretty soon they start talking about ideas for The Dig, and they are Rapid-Fire Machine Guns of Creativity. Clearly they do this a lot. It\u2019s all very high-concept and all over the map, and I have no idea how we\u2019re going to make any of it into a game, but that\u2019s kind of what brainstorming sessions are all about. Ron and Noah offer up a few thoughts. I have a few myself, but somehow I don\u2019t feel worthy enough to break in with them. So I sit and listen, and gradually my nervousness is joined by embarrassment that I\u2019m not saying anything.\n A snack has been provided for the gathering, some sort of crumbly carbohydrate item, corn bread, if I remember correctly. So I take a piece \u2013 I\u2019m kind of hungry, and it gives me something to do with my hands. I take a bite. Normally, the food at Skywalker Ranch is absolutely amazing, but this particular corn bread has been made extra dry. Chalk dry. My mouth is already parched from being nervous, so it takes me a while before I\u2019m able to swallow the bite, and as I chomp and smack at it I\u2019m sure I\u2019m making more noise than a dozen weasels in a paper bag, even though everyone pretends not to notice. There are drinks in the room, but they have been placed out of the way, approximately a quarter-mile from where we\u2019re sitting, and I can\u2019t get up to get one without disrupting everything, and I\u2019m sure by now George and Steven are wondering why I\u2019m in the meeting in the first place.\n I want to abandon the corn bread, but it\u2019s begun falling apart, and I can\u2019t put it down on my tiny napkin without making a huge mess. So I eat the whole piece. It takes about twenty minutes. I myself am covered with tiny crumbs, but at least there aren\u2019t any on the gorgeous table.\n By now the stakes are quite high. Because I\u2019ve been quiet so long, the mere fact of my speaking up will be a noteworthy event, and anything I say has to measure up to that noteworthiness. You can\u2019t break a long silence with a throwaway comment, it has to be a weighty, breathtaking observation that causes each person in the room to re-examine himself in its light. While I\u2019m waiting for a thought that good, more time goes by and raises the bar even higher. I spend the rest of the meeting in a state of near-total paralysis, trying to figure out how I can get out of the room without anyone noticing, or, better yet, how I can go back in time and arrange not to be there in the first place.\n So, yes, I did technically get to meet Steven Spielberg face-to-face once while we were working on The Dig. I actually talked to him later on, when he called to get hints on one of our other games (I think it was  Day of the Tentacle), which he was playing with his son. (One of the lesser-known perks of being a famous filmmaker is that you can talk directly to the game designers for hints instead of calling the hint line.) Nice guy.\n The broader world of computer gaming\u2019s reaction to Spielberg\u2019s involvement in  The Dig would parallel the behavior of Dave Grossman at this meeting. At the same time that some bold industry scribes were beginning to call games a more exciting medium than cinema, destined for even more popularity thanks to the special sauce of interactivity, the press that surrounded  The Dig would point out with merciless clarity just how shallow their bravado was, how deep gaming\u2019s inferiority complex really ran: Spielberg\u2019s name was guaranteed to show up in the first paragraph of every advertisement, preview, or, eventually, review. \u201cSteven Spielberg is deigning to show an interest in little old  us!\u201d ran the implicit message.\n It must be said that the hype was somewhat out of proportion to his actual contribution. After providing the initial idea for the game \u2014 an idea that would be transformed beyond all recognition by the time the game was released \u2014 Spielberg continued to make himself available for occasional consultations; he met with Falstein and his colleagues for four brainstorming sessions, two of which also included his buddy George Lucas, over the course of about eighteen months. (Thanks no doubt to the prompting of his friend, Lucas\u2019s own involvement with  The Dig was as hands-on as he ever got with one of his games studio\u2019s creations.) Yet it\u2019s rather less clear whether these conversations were of much real, practical use to the developers down in the trenches. Neither Spielberg nor Lucas was, to state the obvious, a game designer, and thus they tended to focus on things that might yield watchable movies but were less helpful for making a playable game. Noah Falstein soon discovered that heading a project which involved two such high-profile figures was a less enviable role than then he had envisioned it to be; he has since circumspectly described a project where \u201ceveryone wanted to put their two cents in, and that can be extremely hard to manage.\u201d\n In his quest for a game that could be implemented within the strictures of SCUMM, LucasArts\u2019s in-house point-and-click adventure engine, Falstein whittled away at Spielberg\u2019s idea of two teams of archaeologists who enter into open war with one another. His final design document, last updated on January 30, 1991, takes place in \u201cthe future, nearly 80 years since the McKillip Drive made faster-than-light travel a possibility, and only 50 years since the first star colonies were founded.\u201d In another nod back to Spielberg\u2019s old  Amazing Stories outline that got the ball rolling, an unmanned probe has recently discovered an immense statue towering amidst other alien ruins on the surface of a heretofore unexplored planet; in a nod to  the most famous poem by Percy Shelley, the planet has been named Ozymandias. Three humans have now come to Ozymandias to investigate the probe\u2019s findings \u2014 but they\u2019re no longer proper archaeologists, only opportunistic treasure hunters, led by a sketchy character named Major Tom (presumably a nod to  David Bowie). The player can choose either of Major Tom\u2019s two subordinates as her avatar.\n A series of unfortunate events ensues shortly after the humans make their landing, over the course of which Major Tom is killed and their spaceship damaged beyond any obvious possibility of repair. The two survivors have an argument and go their separate ways, but in this version of the script theirs is a cold rather than a hot war. As the game goes on, the player discovers that a primitive race of aliens living amidst the ruins are in fact the descendants of far more advanced ancestors, who long ago destroyed their civilization and almost wiped out their entire species with internecine germ warfare. But, the player goes on to learn, there are survivors of both factions who fought the apocalyptic final war suspended in cryogenic sleep beneath the surface of the planet. Her ultimate goal becomes to awaken these survivors and negotiate a peace between them, both because it\u2019s simply the right thing to do and because these aliens should have the knowledge and tools she needs to repair her damaged spaceship.\n  For better or for worse, this pared-down but still ambitious vision for  The Dig never developed much beyond that final design document and a considerable amount of accompanying concept art. \u201cThere was a little bit of SCUMM programming done on one of the more interesting puzzles, but not much [more],\u201d says Falstein. He was pulled off the project very early in 1991, assigned instead to help Hal Barwood with   Indiana Jones and the Fate of Atlantis. And when this, his second Indiana Jones game, was finished, he was laid off despite a long and largely exemplary track record.\n Meanwhile  The Dig spent a year or more in limbo, until it was passed to Brian Moriarty, the writer and designer of three games for the 1980s text-adventure giant Infocom and of LucasArts\u2019s own lovely, lyrical   Loom. Of late, he\u2019d been drafting a plan for a game based on   The Young Indiana Jones Chronicles, Spielberg\u2019s latest disappointing foray into television, but a lack of personal enthusiasm for the project had led to a frustrating lack of progress. Moriarty was known as one of the most \u201cliterary\u201d of game designers by temperament; his old colleagues at Infocom had called him \u201cProfessor Moriarty,\u201d more as a nod to his general disposition than to the milieu of Sherlock Holmes. And indeed, his   Trinity is a close as Infocom ever got to publishing a work of high literature, while his  Loom possesses almost an equally haunting beauty. Seeing himself with some justification as a genuine interactive auteur, he demanded total control of every aspect of  The Dig as a condition of taking it on. Bowing to his stellar reputation, LucasArts\u2019s management agreed.\n  Much of of what went on during the eighteen months that Moriarty spent working on  The Dig remains obscure, but it plainly turned into a very troubled, acrimonious project. He got off on the wrong foot with many on his team by summarily binning Falstein\u2019s vision \u2014 a vision which they had liked or even in some cases actively contributed to. Instead he devised an entirely new framing plot.\n Rather than the far future,  The Dig would now take place in 1998; in fact, its beginning would prominently feature the  Atlantis, a Space Shuttle that was currently being flown by NASA. A massive asteroid is on a collision course with Earth. Humanity\u2019s only hope is to meet it in space and plant a set of nuclear bombs on its surface. Once exploded, they will hopefully deflect the asteroid just enough to avoid the Earth. (The similarity with not  one but  two terrible 1998 movies is presumably coincidental.) You play Boston Low, the commander of the mission.\n But carrying the mission out successfully and saving the Earth is only a prelude to the real plot. Once you have the leisure to explore the asteroid, you and your crew begin to discover a number of oddities about it, evidence that another form of intelligent being has been here before you. In the midst of your investigations, you set off a booby trap which whisks you and three other crew members light years away to a mysterious world littered with remnants of alien techn\n......", "posttime": "2021-07-24 07:22:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6316\u6398,dig,\u6e38\u620f", "title": "\u6316\u6398", "title_en": "The Dig", "transed": 1, "url": "https://www.filfre.net/2021/07/the-dig/", "via": "", "real_tags": ["\u6316\u6398", "dig", "\u6e38\u620f"]}, {"category": "", "categoryclass": "", "imagename": "f09b1bc96dd46c6104a32b423fa278e8.jpg", "infoid": 1069357, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u770b\u4f3c\u4e0d\u8d77\u773c\u7684\u8150\u8680\u9752\u94dc\u5757\u8ba9\u8c03\u67e5\u4eba\u5458\u56f0\u60d1\u4e86\u4e00\u4e2a\u591a\u4e16\u7eaa\uff0c\u81ea\u4ece\u5b83\u88ab\u8bc1\u660e\u5305\u542b\u5728\u53e4\u5e0c\u814a\u4e16\u754c\u6839\u672c\u4e0d\u5e94\u8be5\u5b58\u5728\u7684\u7cbe\u5bc6\u9f7f\u8f6e\u4e4b\u540e\u3002\u6b63\u5982\u6258\u5c3c\u00b7\u5f17\u91cc\u65af (Tony Freeth) \u89e3\u91ca\u7684\u90a3\u6837\uff0c\u4e00\u9879\u4f7f\u7528\u5c16\u7aef\u6280\u672f\u7684\u65b0\u7814\u7a76\u73b0\u5728\u63ed\u793a\u4e86\u8fd9\u53f0\u673a\u5668\u53ef\u4ee5\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u505a\u5230\u7684\u3002 1900 \u5e74\u6625\u5929\uff0c\u4e00\u7fa4\u6d77\u7ef5\u6f5c\u6c34\u5458\u8eb2\u907f\u4e86\u4e00\u573a\u731b\u70c8\u7684\u5730\u4e2d\u6d77\u98ce\u66b4\u3002\u98ce\u66b4\u5e73\u606f\u540e\uff0c\u4ed6\u4eec\u5728\u514b\u91cc\u7279\u5c9b\u548c\u5e0c\u814a\u5927\u9646\u4e4b\u95f4\u7684\u5c0f\u5c9b\u5b89\u63d0\u57fa\u7279\u62c9\u9644\u8fd1\u7684\u5f53\u5730\u6c34\u57df\u6f5c\u6c34\u5bfb\u627e\u6d77\u7ef5\u3002\u4e00\u4e2a\u5076\u7136\u7684\u673a\u4f1a\uff0c\u4ed6\u4eec\u53d1\u73b0\u4e86\u4e00\u4e2a\u88c5\u6ee1\u53e4\u5e0c\u814a\u5b9d\u85cf\u7684\u6c89\u8239\uff0c\u5f15\u53d1\u4e86\u5386\u53f2\u4e0a\u7b2c\u4e00\u6b21\u91cd\u5927\u7684\u6c34\u4e0b\u8003\u53e4\u884c\u52a8\u3002\u5230 1901 \u5e74\u521d\uff0c\u5728\u5e0c\u814a\u6d77\u519b\u70ae\u8230\u7684\u76d1\u7763\u4e0b\uff0c\u6f5c\u6c34\u5458\u4eec\u5f00\u59cb\u56de\u6536\u4e00\u7cfb\u5217\u7cbe\u7f8e\u7684\u53e4\u5e0c\u814a\u5546\u54c1\u2014\u2014\u7cbe\u7f8e\u7684\u9752\u94dc\u96d5\u5851\u3001\u7cbe\u7f8e\u7684\u73bb\u7483\u5668\u76bf\u3001\u73e0\u5b9d\u3001\u53cc\u8033\u74f6\u3001\u5bb6\u5177\u914d\u4ef6\u548c\u9910\u5177\u3002\u4ed6\u4eec\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u65e0\u6cd5\u8fa8\u8ba4\u7684\u80bf\u5757\uff0c\u6709\u4e00\u672c\u5927\u5b57\u5178\u90a3\u4e48\u5927\uff0c\u5f88\u53ef\u80fd\u662f\u56e0\u4e3a\u5b83\u770b\u8d77\u6765\u662f\u7eff\u8272\u7684\uff0c\u6240\u4ee5\u88ab\u53d1\u73b0\u662f\u9752\u94dc\u8272\u7684\u3002\u5f53\u65f6\u5e76\u4e0d\u8ba4\u4e3a\u8fd9\u662f\u4ec0\u4e48\u4e86\u4e0d\u8d77\u7684\u4e8b\u60c5\u3002\u7136\u800c\uff0c\u73b0\u5728\uff0c\u5b83\u88ab\u8ba4\u4e3a\u662f\u8fc4\u4eca\u4e3a\u6b62\u4ece\u53e4\u4ee3\u4e16\u754c\u4e2d\u6062\u590d\u7684\u6700\u91cd\u8981\u7684\u9ad8\u79d1\u6280\u7269\u54c1\uff1a\u53e4\u5e0c\u814a\u5929\u6587\u8ba1\u7b97\u673a\uff0c\u88ab\u79f0\u4e3a\u5b89\u63d0\u57fa\u7279\u62c9\u673a\u68b0\u88c5\u7f6e\u3002\u6570\u6708\u540e\uff0c\u8be5\u7269\u4f53\u88c2\u5f00\uff0c\u9732\u51fa\u91cc\u9762\u6709\u786c\u5e01\u5927\u5c0f\u7684\u5fae\u5c0f\u9f7f\u8f6e\u3002\u8fd9\u662f\u4e00\u4e2a\u60ca\u4eba\u7684\u53d1\u73b0\uff1a\u751a\u81f3\u6ca1\u6709\u4eba\u60f3\u5230\u53e4\u5e0c\u814a\u4f1a\u5b58\u5728\u5982\u6b64\u7cbe\u5bc6\u7684\u9f7f\u8f6e\u3002\u4eca\u5929\uff0c\u53ea\u6709\u4e09\u5206\u4e4b\u4e00\u7684\u539f\u59cb\u673a\u68b0\u88c5\u7f6e\u5e78\u5b58\u4e0b\u6765\uff0c\u5206\u6210 82 \u4e2a\u788e\u7247\u2014\u2014\u7528\u5b57\u6bcd AG \u548c\u6570\u5b57 1-75 \u8868\u793a\u3002\u8fd9\u662f\u4e00\u4e2a\u6076\u9b54\u822c\u7684 3D \u62fc\u56fe\u6e38\u620f\uff0c\u5168\u90e8\u6df7\u6742\u5728\u4e00\u8d77\uff0c\u5177\u6709\u4e0d\u5b8c\u6574\u548c\u4e25\u91cd\u8150\u8680\u7684\u7ec4\u4ef6\u3002\u591a\u5e74\u6765\uff0c\u5404\u79cd\u5b66\u8005\u8bd5\u56fe\u5229\u7528\u8fd9\u4e9b\u96f6\u788e\u7684\u5143\u7d20\u6765\u63a8\u65ad\u673a\u5668\u7684\u7528\u9014\u3002\u6700\u65b0\u5e94\u5bf9\u8fd9\u4e00\u6311\u6218\u7684\u662f\u4e00\u4e2a\u591a\u5b66\u79d1\u79d1\u5b66\u5bb6\u56e2\u961f\uff0c\u6211\u662f\u5176\u4e2d\u7684\u4e00\u5458\uff1a\u4f26\u6566\u5927\u5b66\u5b66\u9662 (UCL) Antikythera \u7814\u7a76\u56e2\u961f\u3002\u8be5\u56e2\u961f\u662f\u5728\u6210\u50cf\u4e13\u5bb6 Lindsay MacDonald \u548c\u6750\u6599\u79d1\u5b66\u5bb6 Adam Wojcik \u9080\u8bf7\u6211\u52a0\u5165 UCL \u65f6\u521b\u5efa\u7684\u3002\u6211\u4eec\u4e0e\u8003\u53e4\u51b6\u91d1\u5b66\u5bb6 Myrto Georgakopoulou \u4ee5\u53ca\u4e24\u540d\u535a\u58eb\u751f\u3001\u949f\u8868\u5b66\u5bb6 David Higgon \u548c\u7269\u7406\u5b66\u5bb6 Aris Dacanalis \u5408\u4f5c\uff0c\u62d3\u5bbd\u4e86\u6211\u4eec\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002\u6211\u4eec\u7684\u4e24\u4e2a\u5b66\u751f\u90fd\u4e3a\u6211\u4eec\u7684\u7814\u7a76\u505a\u51fa\u4e86\u91cd\u8981\u8d21\u732e\u3002\u6211\u4eec\u4f7f\u7528\u4e86\u65b0\u7684\u60f3\u6cd5\u548c\u5bf9\u6240\u6709\u6570\u636e\u7684\u4ed4\u7ec6\u68c0\u67e5\u6765\u6311\u6218\u4ee5\u524d\u7684\u7814\u7a76\uff0c\u5e76\u521b\u5efa\u4e86\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u6240\u6709\u8bc1\u636e\u7684\u6a21\u578b\u3002\u4ece\u4e00\u5f00\u59cb\uff0c\u8be5\u673a\u5236\u5c31\u5f15\u8d77\u4e86\u4e89\u8bae\uff0c\u5173\u4e8e\u5b83\u662f\u7528\u4e8e\u8ddf\u8e2a\u661f\u661f\u7684\u661f\u76d8\u8fd8\u662f\u5bfc\u822a\u8bbe\u5907\u7684\u6fc0\u70c8\u4e89\u8bba\u3002\u4e24\u8005\u90fd\u88ab\u8bc1\u660e\u662f\u9519\u8bef\u7684\uff0c\u4f46\u63ed\u5f00\u673a\u5668\u7684\u79d8\u5bc6\u5c06\u662f\u4e00\u4e2a\u6f2b\u957f\u800c\u8270\u96be\u7684\u4fa6\u63a2\u6545\u4e8b\uff0c\u5145\u6ee1\u4e86\u91cd\u5927\u9519\u8bef\u548c\u60ca\u4eba\u7684\u8fdb\u5c55\u3002\u7b2c\u4e00\u6b21\u771f\u6b63\u7684\u542f\u8499\u6765\u81ea 1905 \u5e74\u7684\u5fb7\u56fd\u8bed\u8a00\u5b66\u5bb6\u963f\u5c14\u4f2f\u7279\u00b7\u96f7\u59c6 (Albert Rehm)\u3002\u5728\u4ed6\u672a\u53d1\u8868\u7684\u7814\u7a76\u7b14\u8bb0\u4e2d\u57cb\u85cf\u7740\u4e00\u4e9b\u975e\u51e1\u7684\u60f3\u6cd5\u3002 Rehm \u9605\u8bfb\u4e86\u6709\u5173\u4ece\u5730\u7403\u770b\u6052\u661f\u5347\u8d77\u548c\u843d\u4e0b\u7684\u673a\u5236\u4e0a\u7684\u94ed\u6587\uff0c\u4ed6\u8fd8\u53d1\u73b0\u4e86\u5173\u952e\u7684\u5929\u6587\u5468\u671f\u2014\u2014\u6708\u7403\u7684 19 \u5e74\u548c 76 \u5e74\u5468\u671f\u4ee5\u53ca 223 \u4e2a\u6708\u7684\u65e5\u98df\u5468\u671f\u3002 Rehm \u8fd8\u63d0\u51fa\u4e86\u4e00\u4e2a\u6fc0\u8fdb\u7684\u5efa\u8bae\uff0c\u5373\u8be5\u8bbe\u5907\u662f\u4e00\u53f0\u5929\u6587\u8ba1\u7b97\u673a\u3002\u4ed6\u6709\u4e00\u4e2a\u5f00\u521b\u6027\u7684\u60f3\u6cd5\uff0c\u5373\u5b83\u5305\u542b\u884c\u661f\u9f7f\u8f6e\u88c5\u7f6e\u2014\u2014\u5373\u5b89\u88c5\u5728\u5176\u4ed6\u9f7f\u8f6e\u4e0a\u7684\u9f7f\u8f6e\u2014\u2014\u5bf9\u4e8e\u53e4\u5e0c\u814a\u6765\u8bf4\uff0c\u8fd9\u79cd\u590d\u6742\u7a0b\u5ea6\u4f3c\u4e4e\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u3002\u6b64\u5916\uff0cRehm \u63d0\u8bae\u5c06\u53e4\u4ee3\u4e16\u754c\u4e2d\u5df2\u77e5\u7684\u6240\u6709\u4e94\u9897\u884c\u661f\uff08\u6c34\u661f\u3001\u91d1\u661f\u3001\u706b\u661f\u3001\u6728\u661f\u548c\u571f\u661f\uff09\u90fd\u663e\u793a\u5728\u673a\u68b0\u88c5\u7f6e\u6b63\u9762\u7684\u73af\u5f62\u7cfb\u7edf\u4e2d\u3002\u4ed6\u53ea\u662f\u6ca1\u6709\u8db3\u591f\u7684\u8bc1\u636e\u6765\u8fde\u8d2f\u5730\u7406\u89e3\u4ed6\u7684\u76f4\u89c9\uff0c\u800c\u96f7\u59c6\u5bf9\u5185\u90e8\u673a\u68b0\u7ed3\u6784\u7684\u7406\u89e3\u662f\u5b8c\u5168\u9519\u8bef\u7684\u3002\u7136\u800c\uff0c\u4e00\u4e2a\u591a\u4e16\u7eaa\u540e\uff0c\u4ed6\u7684\u60ca\u4eba\u60f3\u6cd5\u6210\u4e3a\u4e86 UCL Antikythera \u7814\u7a76\u56e2\u961f\u521b\u9020\u7684\u65b0\u673a\u5668\u6a21\u578b\u7684\u6838\u5fc3\u3002\u5728 Rehm \u56e0\u6570\u636e\u4e0d\u8db3\u800c\u82e6\u82e6\u6323\u624e 50 \u5e74\u540e\uff0c\u82f1\u56fd\u7269\u7406\u5b66\u5bb6\u5fb7\u91cc\u514b\u00b7\u5fb7\u00b7\u7d22\u62c9\u00b7\u666e\u83b1\u65af (Derek de Solla Price) \u5f00\u59cb\u4e86\u957f\u8fbe 20 \u5e74\u7684\u7814\u7a76\u4e4b\u65c5\uff0c\u6700\u7ec8\u53d1\u8868\u4e86\u4e00\u7bc7\u8457\u540d\u7684\u5e0c\u814a\u4eba\u9f7f\u8f6e (Gears) \u8bba\u6587 (1974)\u3002\u4ed6\u610f\u8bc6\u5230\uff0c\u8981\u7406\u89e3\u8be5\u673a\u5236\uff0c\u8feb\u5207\u9700\u8981\u65b0\u6570\u636e\u6765\u6307\u5bfc\u4ed6\u4e86\u89e3\u96f6\u788e\u548c\u6df7\u4e71\u7684\u8bc1\u636e\u3002\n\u666e\u83b1\u65af\u7684\u5927\u90e8\u5206\u8fdb\u5c55\u662f\u57fa\u4e8e\u673a\u68b0\u788e\u7247\u7684 X \u5c04\u7ebf\uff0c\u7531 Charalambos \u548c Emily Karakalos \u6536\u96c6\u548c\u5206\u6790\u3002\u8fd9\u4f7f\u5f97\u80fd\u591f\u8bc6\u522b\u51fa 30 \u4e2a\u5e78\u5b58\u7684\u9f7f\u8f6e\uff1a\u7247\u6bb5 A \u4e2d\u6709 27 \u4e2a\uff0c\u7247\u6bb5 B\u3001C \u548c D \u5404\u6709\u4e00\u4e2a\u3002 \u51e0\u4e4e\u6ca1\u6709\u4e00\u4e2a\u9f7f\u8f6e\u662f\u5b8c\u6574\u7684\uff0c\u56e0\u6b64\u4ed6\u4eec\u9700\u8981\u4f30\u8ba1\u6bcf\u4e2a\u9f7f\u8f6e\u4e0a\u6700\u91cd\u8981\u7684\u9f7f\u6570\u2014\u2014\u5bf9\u4e8e\u7406\u89e3\u9f7f\u8f6e\u8ba1\u7b97\u5668\u7684\u5de5\u4f5c\u539f\u7406\u81f3\u5173\u91cd\u8981\u3002\u4ece\u8fd9\u4e9b X \u5c04\u7ebf\u7167\u7247\u4e2d\uff0c\u666e\u8d56\u65af\u53d1\u73b0\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u53d1\u73b0\uff0c\u5373 Rehm \u5728\u673a\u68b0\u88c5\u7f6e\u7684\u94ed\u6587\u4e2d\u786e\u5b9a\u7684 19 \u5e74\u7684\u6708\u7403\u5468\u671f\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4f20\u52a8\u88c5\u7f6e\u6765\u8ba1\u7b97\u3002\u5c3d\u7ba1\u666e\u83b1\u65af\u53d6\u5f97\u4e86\u5f88\u5927\u7684\u8fdb\u6b65\uff0c\u4f46\u4ed6\u4e5f\u72af\u4e86\u5f88\u591a\u9519\u8bef\uff0c\u53ea\u5bf9\u884c\u661f\u63d0\u51fa\u4e86\u672a\u89e3\u51b3\u7684\u5efa\u8bae\u3002 1983 \u5e74\u666e\u83b1\u65af\u53bb\u4e16\u65f6\uff0c\u4f26\u6566\u79d1\u5b66\u535a\u7269\u9986\u673a\u68b0\u5de5\u7a0b\u9986\u957f\u8fc8\u514b\u5c14\u00b7\u8d56\u7279 (Michael Wright) \u63a5\u53d7\u4e86\u6311\u6218\uff0c\u4ed6\u5728\u7814\u7a76\u9f7f\u8f6e\u8bbe\u5907\u65b9\u9762\u62e5\u6709\u4e30\u5bcc\u7684\u7ecf\u9a8c\u3002\u867d\u7136\u666e\u83b1\u65af\u5df2\u7ecf\u53d1\u73b0\u4e86\u4e00\u4e9b\u65e5\u6708\u7cfb\u7edf\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4f46\u8d56\u7279\u5374\u7740\u624b\u91cd\u5efa\u884c\u661f\u9f7f\u8f6e\u88c5\u7f6e\u548c\u663e\u793a\u5668\u3002\u5728\u8fd9\u91cc\uff0c\u505c\u4e0b\u6765\u601d\u8003\u4e00\u4e0b\u53e4\u5e0c\u814a\u4eba\u5982\u4f55\u770b\u5f85\u5b87\u5b99\u662f\u6709\u5e2e\u52a9\u7684\u3002\u4ed6\u4eec\u7684\u89c2\u70b9\uff08\u51e0\u4e4e\uff09\u5b8c\u5168\u4ee5\u5730\u7403\u4e3a\u4e2d\u5fc3\uff0c\u5e76\u88ab\u9519\u8bef\u7684\u4fe1\u5ff5\u6240\u652f\u914d\uff0c\u5373\u592a\u9633\u3001\u6708\u4eae\u548c\u884c\u661f\u90fd\u5728\u201c\u56fa\u5b9a\u6052\u661f\u201d\u7684\u80cc\u666f\u4e0b\u56f4\u7ed5\u5730\u7403\u8fd0\u52a8\u3002\u4ece\u5730\u7403\u4e0a\u770b\uff0c\u884c\u661f\u4f3c\u4e4e\u4ee5\u4ee4\u4eba\u8d39\u89e3\u7684\u65b9\u5f0f\u5728\u6052\u661f\u7684\u80cc\u666f\u4e0b\u79fb\u52a8\u3002\u8fd9\u751a\u81f3\u53cd\u6620\u5728\u73b0\u4ee3\u8bcd\u201c\u884c\u661f\u201d\u7684\u53e4\u5e0c\u814a\u8d77\u6e90\u4e2d\uff1aplanetai\uff0c\u610f\u601d\u662f\u201c\u6d41\u6d6a\u201d\u3002\u4f8b\u5982\uff0c\u4ece\u5730\u7403\u4e0a\u770b\uff0c\u91d1\u661f\u6709\u65f6\u5728\u592a\u9633\u524d\u9762\uff0c\u6709\u65f6\u5728\u592a\u9633\u540e\u9762\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f3c\u4e4e\u5728\u5929\u7a7a\u4e2d\u5411\u897f\u79fb\u52a8\uff0c\u4e0e\u592a\u9633\u7684\u65b9\u5411\u76f8\u540c\uff0c\u4f46\u6709\u65f6\u91d1\u661f\u4f1a\u5728\u4e00\u4e2a\u9759\u6b62\u70b9\u5bf9\u7740\u661f\u661f\u9759\u6b62\u4e0d\u52a8\uff0c\u7136\u540e\u5411\u4e1c\u5411\u540e\u5faa\u73af\u5e76\u5230\u8fbe\u53e6\u4e00\u4e2a\u9759\u6b62\u70b9\uff0c\u7136\u540e\u6062\u590d\u5411\u897f\u8fd0\u52a8\u4e00\u6b21\u66f4\u591a\u7684\u3002\u8fd9\u4e2a\u4f1a\u5408\u5468\u671f\u2014\u2014\u4e5f\u5c31\u662f\u5b83\u76f8\u5bf9\u4e8e\u592a\u9633\u7684\u5468\u671f\u2014\u2014\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u91cd\u590d\u3002\u6240\u6709\u884c\u661f\u90fd\u6709\u7c7b\u4f3c\u7684\u8fd0\u52a8\uff0c\u8fd9\u7ed9\u53e4\u4ee3\u5929\u6587\u5b66\u5bb6\u5e26\u6765\u4e86\u4e00\u4e2a\u6838\u5fc3\u95ee\u9898\u3002\u6b63\u662f\u7531\u4e8e\u6ca1\u6709\u610f\u8bc6\u5230\u884c\u661f\u56f4\u7ed5\u592a\u9633\u8fd0\u52a8\uff0c\u624d\u4f7f\u5f97\u884c\u661f\u8fd0\u52a8\u770b\u8d77\u6765\u5982\u6b64\u83ab\u540d\u5176\u5999\u3002\u5728\u516c\u5143\u524d 1 \u5343\u5e74\uff0c\u5df4\u6bd4\u4f26\u4eba\u53d1\u73b0\u4e86\u6240\u8c13\u7684\u884c\u661f\u201c\u5468\u671f\u5173\u7cfb\u201d\uff0c\u8fd9\u5c06\u6574\u6570\u4e2a\u4f1a\u5408\u5468\u671f\u7b49\u540c\u4e8e\u6574\u6570\u5e74\u3002\u4f8b\u5982\uff0c\u5728\u91d1\u661f\u7684\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u53d1\u73b0\u4e86\u884c\u661f\u5728\u516b\u5e74\u5185\u7ecf\u5386\u4e94\u4e2a\u4f1a\u5408\u5468\u671f\u7684\u5468\u671f\u5173\u7cfb\u3002\u7136\u540e\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5468\u671f\u5173\u7cfb\u6765\u9884\u6d4b\u884c\u661f\u5728\u5929\u7a7a\u4e2d\u7684\u672a\u6765\u4f4d\u7f6e\u3002\u53e4\u5e0c\u814a\u4eba\u5728\u6b64\u57fa\u7840\u4e0a\u63d0\u51fa\u4e86\u89e3\u91ca\u884c\u661f\u8fd0\u52a8\u7684\u51e0\u4f55\u7406\u8bba\u3002\u8fd9\u4e9b\u7406\u8bba\u975e\u5e38\u9002\u7528\u4e8e\u5728\u9f7f\u8f6e\u8ba1\u7b97\u673a\u4e2d\u673a\u68b0\u5316\u884c\u661f\u7684\u53ef\u53d8\u8fd0\u52a8\u3002\u8fd9\u662f\u4e00\u4e2a\u9769\u547d\u6027\u7684\u60f3\u6cd5\uff1a\u591a\u4e8f\u4e86\u8fd9\u53f0\u673a\u5668\uff0c\u53e4\u5e0c\u814a\u5929\u6587\u7406\u8bba\u7684\u7ed3\u679c\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u8f6c\u52a8\u628a\u624b\u6765\u8ba1\u7b97\u3002 UCL \u56e2\u961f\u7814\u7a76\u4e86 Wright \u7684\u5f00\u521b\u6027\u5de5\u4f5c\u3002\u4ed6\u5728\u4e3b\u9a71\u52a8\u8f6e\u4e0a\u53d1\u73b0\u4e86\u8f74\u627f\u548c\u5176\u4ed6\u7ed3\u6784\u7684\u8bc1\u636e\u3002\u8fd9\u4e2a\u56db\u8f90\u9f7f\u8f6e\u7a81\u51fa\u5728\u7247\u6bb5 A \u7684\u524d\u9762\u3002\u5b83\u7531\u8f93\u5165\u624b\u67c4\u8f6c\u52a8\uff0c\u6bcf\u5e74\u65cb\u8f6c\u4e00\u6b21\uff0c\u4ece\u800c\u4f7f\u6240\u6709\u5176\u4ed6\u9f7f\u8f6e\u8fd0\u52a8\u3002\u8d56\u7279\u5224\u65ad\u4e00\u5b9a\u6709\u4e00\u4e2a\u5e7f\u6cdb\u7684\u884c\u661f\u9f7f\u8f6e\u7cfb\u7edf\uff0c\u5b89\u88c5\u5728\u4e3b\u9a71\u52a8\u8f6e\u4e0a\u3002\u6839\u636e\u8fd9\u4e00\u8bc1\u636e\uff0c\u4ed6\u63d0\u51fa\u673a\u5668\u7684\u4e3b\u8981\u76ee\u7684\u4e4b\u4e00\u662f\u8ba1\u7b97\u663e\u793a\u5728\u673a\u5668\u524d\u90e8\u7684\u884c\u661f\u7684\u4f4d\u7f6e\u3002\u53d7\u4e2d\u4e16\u7eaa\u5929\u6587\u949f\u7684\u542f\u53d1\uff0c\u8d56\u7279\u8fd8\u4e3a\u4ed6\u91cd\u5efa\u7684\u5b89\u63d0\u51ef\u5e0c\u62c9\u673a\u68b0\u88c5\u7f6e\u5f15\u5165\u4e86\u88ab\u79f0\u4e3a\u201c\u9488\u69fd\u8ddf\u968f\u5668\u201d\u88c5\u7f6e\u7684\u88c5\u7f6e\u3002\u5f53\u4e0e\u9f7f\u8f6e\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u8fd9\u4e9b\u8bbe\u5907\u53ef\u7528\u4e8e\u6a21\u62df\u884c\u661f\u7684\u53cd\u5411\u5faa\u73af\u3002\u4ed6\u4ee5\u6781\u5927\u7684\u521b\u9020\u529b\u6210\u529f\u5730\u4e3a\u673a\u68b0\u88c5\u7f6e\u5efa\u9020\u4e86\u4e00\u4e2a\u5929\u6587\u9986\uff0c\u7528\u6765\u8ffd\u8e2a\u65e5\u671f\u3001\u592a\u9633\u3001\u6708\u4eae\u548c\u4e94\u9897\u884c\u661f\u3002\u4ed6\u8ba4\u4e3a\u8f93\u51fa\u663e\u793a\u4e3a\u673a\u5668\u6b63\u9762\u7684\u4e00\u4e2a\u6307\u9488\u7cfb\u7edf\uff0c\u4ee5\u6307\u793a\u5b83\u4eec\u5728\u9ec4\u9053\u5341\u4e8c\u5bab\u4e2d\u7684\u4f4d\u7f6e\u3002\u4ed6\u5728 2002 \u5e74\u53d1\u8868\u7684\u7ed3\u679c\u662f Antikythera \u7814\u7a76\u7684\u91cc\u7a0b\u7891\uff0c\u5c3d\u7ba1\u968f\u540e\u4ed6\u7684\u6a21\u578b\u9762\u4e34\u591a\u91cd\u6311\u6218\u3002\u8fd9\u662f\u51fa\u73b0\u5728 CWA 108 \u4e2d\u7684\u4e00\u7bc7\u6587\u7ae0\u7684\u6458\u5f55\u3002\u8bf7\u7ee7\u7eed\u9605\u8bfb\u6742\u5fd7\uff08\u70b9\u51fb\u6b64\u5904\u8ba2\u9605\uff09\u6216\u6211\u4eec\u7684\u65b0\u7f51\u7ad9 The Past\uff0c\u8be5\u7f51\u7ad9\u4ee5\u6570\u5b57\u65b9\u5f0f\u63d0\u4f9b\u8be5\u6742\u5fd7\u7684\u6240\u6709\u5185\u5bb9\u3002\u5728 The Past\uff0c\u60a8\u5c06\u80fd\u591f\u5b8c\u6574\u9605\u8bfb\u6bcf\u7bc7\u6587\u7ae0\u4ee5\u53ca\u6211\u4eec\u5176\u4ed6\u6742\u5fd7 Current Archaeology\u3001Minerva \u548c Military History Matters \u7684\u5185\u5bb9\u3002", "note_en": "A seemingly unassuming lump of corroded bronze has confounded investigators for more than a century, ever since it proved to contain precision gearwheels that simply should not have existed in the ancient Greek world. A new study, using cutting-edge techniques, has now revealed what this machine could do, and how it did it, as Tony Freeth explains.\n  In spring 1900, a party of sponge divers took shelter from a violent Mediterranean storm. When the storm subsided, they dived for sponges in the local waters near the tiny island of Antikythera, between Crete and mainland Greece. By chance, they found a wreck full of ancient Greek treasures, triggering the first major underwater archaeology operation in history. Overseen by a gunboat from the Greek navy to deter looters, by early 1901 the divers had begun to recover a wonderful array of ancient Greek goods \u2013 beautiful bronze sculptures, superb glassware, jewellery, amphorae, furniture fittings, and tableware.\n  They also found an undistinguished lump, the size of a large dictionary, which was probably recovered because it looked green, suggesting bronze. It was not considered to be anything remarkable at the time. Now, though, it is recognised as by far the most important object of high technology ever recovered from the ancient world: an ancient Greek astronomical calculating machine, known as the Antikythera Mechanism.\n  Months after it was recovered, the object split apart, revealing tiny gearwheels inside, around the size of coins. It was an astonishing discovery: no one had even thought that such precision gearwheels could exist in ancient Greece. Today, only a third of the original Mechanism survives, split into 82 fragments \u2013 designated by letters A-G and numbers 1-75. It is a fiendish 3D jigsaw puzzle, all jumbled together, with incomplete and severely corroded components. Over the years, various scholars have sought to use these fragmentary elements to deduce the purpose of the machine. The latest to tackle this challenge are a multidisciplinary team of scientists, of which I am part: the University College London (UCL) Antikythera Research Team. The team was created when imaging specialist Lindsay MacDonald and materials scientist Adam Wojcik invited me to join UCL. We widened our expertise by teaming up with Myrto Georgakopoulou, an archaeometallurgist, plus two PhD students, horologist David Higgon and physicist Aris Dacanalis. Both of our students made essential contributions to our research. We have used new ideas and a close examination of all the data to challenge previous research and to create the first model that satisfies all the evidence.\n  From the beginning, the Mechanism generated controversy, with fierce arguments about whether it was an astrolabe for tracking the stars or a navigation device. Both proved to be wrong, but uncovering the machine\u2019s secrets would be a long and difficult detective story, peppered with major mistakes as well as surprising progress.\n  The first real enlightenment came from a German philologist, Albert Rehm, in the period from 1905. Buried in his unpublished research notes are some extraordinary ideas. Rehm read inscriptions on the Mechanism concerning the risings and settings of the stars as viewed from Earth, and he found key astronomical cycles, too \u2013 19-year and 76-year cycles of the Moon and a 223-month eclipse cycle. Rehm also made the radical suggestion that the device was an astronomical calculating machine. He had the groundbreaking idea that it contained epicyclic gearing \u2013 that is, gears mounted on other gears \u2013 a level of sophistication seemingly incredible for ancient Greece. In addition, Rehm proposed that all five planets known in the ancient world (Mercury, Venus, Mars, Jupiter, and Saturn) were displayed in a ring system on the front of the Mechanism. He simply did not have enough evidence to make coherent sense of his intuitions, and Rehm\u2019s understanding of the internal mechanical structure was entirely wrong. More than a century later, though, his astonishing ideas are at the core of the new model of the machine created by the UCL Antikythera Research Team.\n  Fifty years after Rehm and his struggle with inadequate data, a British physicist, Derek de Solla Price, started a 20-year odyssey of research that culminated in a famous paper  Gears from the Greeks (1974). He appreciated that to understand the Mechanism, there was a pressing need for new data to guide him through the fragmentary and confusing evidence.\n Much of Price\u2019s progress was based on X-rays of the Mechanism fragments, gathered and analysed by Charalambos and Emily Karakalos. These enabled the identification of 30 surviving gears: 27 in Fragment A and one in each of Fragments B, C, and D. Almost none of the gears were complete, so they needed to estimate the all-important number of teeth on each one \u2013 essential for understanding the workings of a geared calculating machine. From these X-rays, Price made a crucial discovery that the 19-year cycle of the Moon, identified by Rehm in the inscriptions on the Mechanism, could be calculated using its gearing.\n  Though Price made great progress, he also got much wrong, and only made unresolved suggestions about the planets. When Price died in 1983, the challenge was taken up by Michael Wright, a curator of Mechanical Engineering at London\u2019s Science Museum, who had extensive experience of studying geared devices. While Price had discovered how some of the Sun\u2013Moon system worked, it was Wright who set about reconstructing the gearing and a display for the planets.\n Here, it is helpful to pause and consider how the ancient Greeks perceived the Cosmos. Their view was (almost) entirely Earth-centred and dominated by the mistaken belief that the Sun, Moon, and planets all moved around the Earth, against a background of \u2018fixed stars\u2019. When seen from Earth, the planets appear to move against the backdrop of the stars in perplexing ways. This is even reflected in the ancient Greek origin for the modern word \u2018planet\u2019:  planetai, meaning \u2018wandering\u2019. Venus, for example, is sometimes ahead of the Sun and sometimes behind when viewed from Earth. Mostly it seems to move westwards through the sky, in the same direction as the Sun, but at times Venus will stand still against the stars at a stationary point, before looping backwards towards the east and reaching another stationary point, then resuming westwards motion once more. This synodic cycle \u2013 that is, its cycle relative to the Sun \u2013 is repeated again and again. Similar motions are shared by all the planets, creating a central problem for ancient astronomers. It was the failure to appreciate that the planets move around the sun that made the planetary motions seem so inexplicable.\n In the 1st millennium BC, the Babylonians discovered what are known as \u2018period relations\u2019 for the planets, which equated a whole number of synodic cycles with a whole number of years. In the case of Venus, for example, they found the period relation that the planet goes through five synodic cycles in eight years. They could then use these period relations to predict the future positions of the planets in the sky. The ancient Greeks built on this by proposing geometrical theories for explaining planetary motions. These theories were ideal for mechanising the variable motions of the planets in a geared calculating machine. It was a revolutionary idea: thanks to the machine, the outcomes of ancient Greek astronomical theories could be calculated with the simple turn of a handle.\n The UCL team looked at the pioneering work by Wright. He found evidence of bearings and other structures on the Main Drive Wheel. This four-spoked gear is prominent at the front of Fragment A. It is turned by the input handle and rotates once a year, thereby setting all the other gears in motion. Wright judged that there must have been an extensive epicyclic gearing system, mounted on the Main Drive Wheel. On the basis of this evidence, he proposed that one of the main purposes of the machine was to calculate the positions of the planets, which were displayed at the front of the machine. Inspired by astronomical clocks from the Middle Ages, Wright also introduced devices known as a \u2018pin-and-slotted follower\u2019 mechanisms to his reconstruction of the Antikythera Mechanism. When used alongside the gears, these devices could be used to mimic the backward loops of the planets. With great ingenuity, he managed to construct a planetarium for the Mechanism, which tracked the date, Sun, Moon, and five planets. He thought the outputs were shown as a system of pointers on the front of the machine to indicate their positions in the Zodiac. The publication of his results in 2002 was a landmark in Antikythera research, even though multiple challenges to his model would subsequently follow.\n  This is an extract of an article that appeared in\u00a0 CWA 108.\u00a0Read on in the magazine\u00a0( Click here to subscribe) or on our new website,\u00a0 The Past, which offers all of the magazine\u2019s content digitally. At  The Past you will be able to read each article in full as well as the content of our other magazines,\u00a0 Current Archaeology,\u00a0 Minerva, and\u00a0 Military History Matters.", "posttime": "2021-07-24 07:22:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u673a\u68b0,mechanism,\u884c\u661f", "title": "Antikythera \u673a\u68b0\u88c5\u7f6e \u2013 \u4e16\u754c\u8003\u53e4\u5b66", "title_en": "The Antikythera Mechanism \u2013 World Archaeology", "transed": 1, "url": "https://www.world-archaeology.com/features/the-antikythera-mechanism/", "via": "", "real_tags": ["\u673a\u68b0", "mechanism", "\u884c\u661f"]}]