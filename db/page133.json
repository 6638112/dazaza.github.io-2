[{"category": "", "categoryclass": "", "imagename": "2f9b7240157ef71de5be9e3fd2687af8.jpg", "infoid": 1069596, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u7684\u65b0\u4e00\u671f\u201c\u5de5\u4eba\u9636\u7ea7\u201d\u5373\u5c06\u51fa\u7248\u5e76\u4e0a\u7ebf\u3002\u4eca\u5929\u8ba2\u9605\u4ee5\u83b7\u53d6\u5b83\u3002\u4e00\u7bc7\u8bba\u6587\uff1a\u4e9a\u9a6c\u900a\u7684\u4ed3\u5e93\u533a\u662f\u201c\u90ca\u533a\u548c\u90ca\u533a\u793e\u4f1a\u5316\u7684\u4e3b\u8981\u5de5\u4eba\u9636\u7ea7\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u60a8\u6b63\u5728\u5efa\u7acb\u79df\u6237\u5de5\u4f1a\u6216\u653f\u515a\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u793e\u4ea4\u7a7a\u95f4\u3002\u5b83\u5177\u6709\u66f4\u5e7f\u6cdb\u7684\u91cd\u8981\u6027\u3002\u201d\u8fd9\u662f\u7531\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u5f15\u8ff0\u7684\u7ec4\u7ec7\u8005\u548c\u5730\u7406\u5b66\u5bb6 Spencer Cox \u63d0\u4f9b\u7684\u3002 \u300a\u6cf0\u6664\u58eb\u62a5\u300b\u6587\u7ae0\u7684\u4f5c\u8005\u3001\u52b3\u5de5\u8bb0\u8005 E. Tammy Kim \u9075\u5faa Cox \u7684\u5f15\u8ff0\uff0c\u5e76\u9644\u4e0a\u4e86\u793e\u4f1a\u4e3b\u4e49\u897f\u96c5\u56fe\u5e02\u8bae\u5458 Kshama Sawant \u7684\u4e00\u81f4\u4e3b\u5f20\u3002 \u201c\u5982\u679c\u4f60\u770b\u770b\u4e9a\u9a6c\u900a\u5de5\u4eba\u7684\u610f\u8bc6\uff0c\u5b83\u662f\u4e00\u4e2a\u5173\u4e8e\u5de5\u4eba\u9636\u7ea7\u6574\u4f53\u72b6\u51b5\u7684\u6307\u5357\uff0c\u201d\u8428\u4e07\u7279\u8bf4\u3002\u5982\u679c\u9636\u7ea7\u662f\u4e00\u79cd\u793e\u4f1a\u5173\u7cfb\uff0c\u5de5\u4eba\u9636\u7ea7\u6bcf\u5929\u90fd\u5728\u5f62\u6210\u548c\u518d\u9020\uff0c\u90a3\u4e48\u8fd9\u79cd\u5f62\u6210\u8d8a\u6765\u8d8a\u591a\u5730\u53d1\u751f\u5728\u4e9a\u9a6c\u900a\u4ed3\u5e93\u7684\u5e9e\u5927\u7ed3\u6784\u4e2d\uff0c\u5de5\u4eba\u9762\u4e34\u8d44\u672c\uff0c\u4f53\u73b0\u5728\u673a\u5668\u548c\u7ecf\u7406\u7684\u55e1\u55e1\u58f0\u4e2d\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u624b\uff0c\u4fc3\u4f7f\u4ed6\u4eec\u52a0\u5feb\u6b65\u4f10\u3002\u5b83\u53d1\u751f\u5728\u5916\u9762\u7684\u505c\u8f66\u573a\uff0c\u4eba\u4eec\u5728\u90a3\u91cc\u62bd\u70df\u3001\u9017\u7559\u3001\u804a\u5929\u548c\u6050\u60e7\u3002\u4e9a\u9a6c\u900a\u662f\u5426\u771f\u7684\u662f\u793e\u4f1a\u5316\u7684\u4e3b\u8981\u7a7a\u95f4\uff0c\u6216\u8005\u4ec5\u4ec5\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u7a7a\u95f4\uff0c\u4e0d\u5982\u638c\u63e1\u4e9a\u9a6c\u900a\u5728\u5de5\u4eba\u9636\u7ea7\u751f\u6d3b\u4e2d\u4f5c\u4e3a\u4e00\u79cd\u8fd1\u4e4e\u81ea\u7136\u7684\u529b\u91cf\u8fd0\u4f5c\u7684\u7a0b\u5ea6\u66f4\u91cd\u8981\u3002\u4e9a\u9a6c\u900a\u8fd0\u8425\u7684\u6781\u7aef\u5730\u7406\u5206\u53c9\u4f7f\u95ee\u9898\u590d\u6742\u5316\uff1a\u4e00\u4e9b\u793e\u533a\u51e0\u4e4e\u5b8c\u5168\u88ab\u4e9a\u9a6c\u900a\u5438\u5c18\uff0c\u800c\u5728\u53e6\u4e00\u4e9b\u793e\u533a\uff0c\u4eba\u4eec\u4e0d\u8ba4\u8bc6\u4e3a\u8be5\u516c\u53f8\u5de5\u4f5c\u7684\u4efb\u4f55\u4eba\u3002\u8003\u8651\u5230\u5ba2\u6237\u65e2\u770b\u4e0d\u5230\u4e5f\u542c\u4e0d\u5230\u4ed3\u5e93\u5de5\u4eba\uff0c\u8fd9\u79cd\u4e0d\u5747\u5300\u6027\u66f4\u4e3a\u91cd\u8981\uff1b\u81f3\u5c11\u5728\u6c83\u5c14\u739b\uff0c\u4f60\u53bb\u4e00\u5bb6\u5546\u5e97\uff0c\u4f60\u4f1a\u770b\u5230\u5de5\u4eba\u2014\u2014\u4f60\u77e5\u9053\u4ed6\u4eec\u5b58\u5728\u3002\u4ee5\u4e0b\u662f\u5b83\u5728\u5176\u4e2d\u4e00\u4e2a\u4ed3\u5e93\u9644\u8fd1\u7684\u8bb8\u591a\u793e\u533a\u4e2d\u7684\u8868\u73b0\u3002\u4e9a\u9a6c\u900a\u7684\u7533\u8bf7\u6d41\u7a0b\u5f80\u5f80\u662f\u6577\u884d\u7684\u3002\u4f60\u7533\u8bf7\uff0c\u4f60\u5f97\u5230\u4e00\u4efd\u5de5\u4f5c\u3002\u53d6\u6d88\u6f5c\u5728\u96c7\u4e3b\u548c\u6f5c\u5728\u5458\u5de5\u4e4b\u95f4\u7684\u9762\u8bd5\u6216\u5927\u91cf\u5bf9\u8bdd\uff0c\u4f7f\u516c\u53f8\u80fd\u591f\u5728\u201c\u9ad8\u5cf0\u201d\u671f\u95f4\u52a0\u5f3a\u4e1a\u52a1\uff0c\u8fd9\u5305\u62ec\u5047\u65e5\u5b63\u8282\u4ee5\u53ca\u9ec4\u91d1\u65e5\u524d\u540e\u7684\u65f6\u95f4\uff0c\u516c\u53f8\u7684\u5047\u671f\u65e8\u5728\u6253\u7834\u590f\u5929\u7684\u5e73\u9759\u3002\u5728\u8fd9\u4e9b\u65f6\u671f\uff0c\u4e9a\u9a6c\u900a\u5df2\u7ecf\u5e9e\u5927\u7684\u52b3\u52a8\u529b\u8ddf\u4e0d\u4e0a\u6fc0\u589e\u7684\u9700\u6c42\uff0c\u56e0\u6b64\u8be5\u516c\u53f8\u5f15\u5165\u4e86\u5927\u6279\u201c\u5b63\u8282\u6027\u5458\u5de5\u201d\uff0c\u5373\u62db\u52df\u5feb\u901f\u73b0\u91d1\u7684\u4e34\u65f6\u5de5\u2014\u2014\u4e9a\u9a6c\u900a\u7684\u8d77\u85aa\u6bcf\u5c0f\u65f6 15 \u7f8e\u5143\uff0c\u4f4e\u4e8e\u4ed3\u50a8\u7684\u5e73\u5747\u6c34\u5e73\u884c\u4e1a\uff0c\u4f46\u5b83\u4ecd\u7136\u6bd4\u6211\u4eec 7.25 \u7f8e\u5143\u7684\u8054\u90a6\u6700\u4f4e\u5de5\u8d44\u9ad8\u5f97\u591a\u3002\u5f53\u9500\u552e\u6fc0\u589e\u6d88\u9000\u65f6\uff0c\u51e0\u4e4e\u6240\u6709\u8fd9\u4e9b\u4e34\u65f6\u5de5\u90fd\u4f1a\u88ab\u653e\u5f00\u3002\u8fd9\u4e00\u8fc7\u7a0b\u5728\u8fc7\u53bb\u4e00\u5e74\u4e2d\u6108\u6f14\u6108\u70c8\uff0c\u56e0\u4e3a\u5728\u5927\u6d41\u884c\u671f\u95f4\u9500\u552e\u989d\u589e\u52a0\u7684\u63a8\u52a8\u4e0b\uff0c\u4e9a\u9a6c\u900a\u8fdb\u884c\u4e86\u5386\u53f2\u4e0a\u51e0\u4e4e\u524d\u6240\u672a\u6709\u7684\u62db\u8058\u70ed\u6f6e\uff0c\u5728\u51e0\u4e2a\u6708\u5185\u589e\u52a0\u4e86\u8fd1 50 \u4e07\u4eba\u7684\u5de5\u8d44\u3002\u7ed3\u679c\u662f\u6574\u4e2a\u793e\u533a\u90fd\u88ab\u5438\u6536\u5230\u4ed3\u5e93\u4e2d\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u770b\u770b\u8fd9\u7bc7\u5173\u4e8e JFK8 \u7684\u62a5\u9053\uff0c\u7ebd\u7ea6\u53f2\u5766\u987f\u5c9b\u7684\u4e9a\u9a6c\u900a\u4ed3\u5e93\uff0c\u5b83\u4e00\u76f4\u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u53d1\u9175\u573a\u6240\uff1a\n\u5f53\u591c\u5e55\u964d\u4e34\uff0c\u5361\u8f66\u9a76\u8fc7\u65f6\uff0c\u521a\u4e0b\u73ed\u7684\u9ad8\u4e2d\u751f Tiara Mangroo \u62e5\u62b1\u4e86\u5979\u7684\u7537\u670b\u53cb\u3002\u4ed6\u4e5f\u5728\u53f2\u5766\u987f\u5c9b\u4e3a\u4e9a\u9a6c\u900a\u5de5\u4f5c\uff0c\u5979\u7684\u7236\u4eb2\u3001\u53d4\u53d4\u3001\u5802\u5144\u5f1f\u548c\u6700\u597d\u7684\u670b\u53cb\u4e5f\u662f\u5982\u6b64\u3002\u5927\u5b66\u751f\u57fa\u52aa\u00b7\u5e03\u8c22\u5c14 (Keanu Bushell) \u767d\u5929\u5de5\u4f5c\uff0c\u665a\u4e0a\u548c\u7236\u4eb2\u4e00\u8d77\u5de5\u4f5c\uff0c\u5171\u7528\u4e00\u8f86\u6c7d\u8f66\uff0c\u6bcf\u5929\u5f80\u8fd4\u5e03\u9c81\u514b\u6797\u548c\u80af\u5c3c\u8fea\u56fd\u9645\u673a\u573a 4 \u8d9f\u3002\u4e00\u5bf9\u6bcd\u5973\u4e3a\u4ed6\u4eec\u7684\u534a\u591c\u4f11\u606f\u51c6\u5907\u4e86\u996d\u83dc\uff1b\u5176\u4ed6\u4eba\u5219\u5c06\u7ea2\u725b\u6216\u661f\u5df4\u514b\u661f\u51b0\u4e50\u88c5\u5728\u5de5\u4eba\u968f\u8eab\u643a\u5e26\u7684\u900f\u660e\u9632\u76d7\u888b\u4e2d\u3002\u5927\u591a\u6570\u4eba\u8bf4\u4ed6\u4eec\u5f88\u611f\u6fc0\u80fd\u88ab\u96c7\u7528\u3002\u8fd9\u4e9b\u662f\u4e9a\u9a6c\u900a\u96c7\u7528\u7684\u6574\u4e2a\u5bb6\u5ead\u3002\u4ed6\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u5c06\u5728\u51e0\u5468\u5185\u88ab\u89e3\u96c7\uff0c\u4f46\u8bb8\u591a\u4eba\u751a\u81f3\u4f1a\u56e0\u4e3a\u65e0\u6cd5\u5fcd\u53d7\u5de5\u4f5c\u7684\u538b\u529b\u548c\u538b\u529b\u800c\u66f4\u65e9\u8f9e\u804c\u3002\u8fd9\u79cd\u6d41\u5931\u662f\u516c\u53f8\u9ad8\u5c42\u5173\u6ce8\u7684\u95ee\u9898\uff0c\u4ed6\u4eec\u8d8a\u6765\u8d8a\u591a\u5730\u4ece\u8d8a\u6765\u8d8a\u8fdc\u7684\u5730\u65b9\u6d3e\u4eba\u8fdb\u6765\uff0c\u4ee5\u7ef4\u6301\u9ad8\u5cf0\u671f\u6240\u9700\u7684\u4eba\u5458\u914d\u5907\u6c34\u5e73\u3002\u6b63\u5982\u9886\u5bfc\u4e9a\u9a6c\u900a\u4f01\u4e1a\u56e2\u961f\u5206\u6790\u4ed3\u5e93\u7684\u4fdd\u7f57\u00b7\u65af\u7279\u9c81\u666e (Paul Stroup) \u544a\u8bc9\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\uff0c\u201c\u516d\u5230\u4e03\u4e2a\u4eba\u7533\u8bf7\u7b49\u4e8e\u4e00\u4e2a\u4eba\u51fa\u73b0\u5e76\u5b9e\u9645\u5de5\u4f5c\u3002 . . .\u4f60\u9700\u8981\u6bcf\u5e74\u6709\u516b\u3001\u4e5d\u3001\u4e00\u5343\u4e07\u4eba\u7533\u8bf7\u3002\u201d\u6b63\u5982\u62a5\u7eb8\u6240\u6307\u51fa\u7684\uff0c\u8fd9\u5927\u7ea6\u662f\u7f8e\u56fd\u52b3\u52a8\u529b\u7684 5%\u3002\u770b\u770b\u53e6\u4e00\u4e2a\u6d77\u5cb8\uff0c\u4f60\u4f1a\u53d1\u73b0\u7c7b\u4f3c\u7684\u52a8\u6001\u6b63\u5728\u4e0a\u6f14\u3002\u653e\u5927\u67d0\u4e9b\u5730\u70b9\uff0c\u60a8\u4f1a\u77a5\u89c1\u4e00\u4e2a\u53ef\u80fd\u7684\u672a\u6765\uff1a\u4e00\u4e2a\u516c\u53f8\u57ce\u9547\uff0c\u5728\u90a3\u91cc\u5784\u65ad\u96c7\u4e3b\u6709\u6548\u5730\u6210\u4e3a\u516c\u5171\u4ea7\u54c1\u548c\u670d\u52a1\u7684\u7ba1\u7406\u7ed3\u6784\u3002\u8fd9\u79cd\u63cf\u8ff0\u8d8a\u6765\u8d8a\u9002\u7528\u4e8e\u897f\u96c5\u56fe\uff0c\u4e9a\u9a6c\u900a\u5728\u897f\u96c5\u56fe\u62e5\u6709\u7684\u529e\u516c\u7a7a\u95f4\u76f8\u5f53\u4e8e\u63a5\u4e0b\u6765\u7684 40 \u5927\u96c7\u4e3b\u7684\u603b\u548c\uff0c\u8fd9\u4e00\u70b9\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u662f\u6b63\u786e\u7684\u3002\u4f46\u662f\uff0c\u8fd9\u9002\u7528\u4e8e\u516c\u53f8\u4ed3\u5e93\u9644\u8fd1\u533a\u57df\u7684\u65b9\u5f0f\u5374\u9c9c\u4e3a\u4eba\u77e5\u3002\u4ee5\u5185\u9646\u5e1d\u56fd\u4e3a\u4f8b\uff0c\u8fd9\u662f\u52a0\u5229\u798f\u5c3c\u4e9a\u7684\u4e00\u4e2a\u90ca\u533a\u548c\u90ca\u533a\uff0c\u7531\u4e8e\u9760\u8fd1\u6d1b\u6749\u77f6\uff0c\u4ed3\u5e93\u904d\u5e03\u3002\u5728\u5723\u8d1d\u7eb3\u8fea\u8bfa\u7684\u4e00\u6240\u516c\u7acb\u9ad8\u4e2d Cajon \u9ad8\u4e2d\uff0c\u5b66\u751f\uff08\u5176\u4e2d\u8bb8\u591a\u5bb6\u5ead\u6210\u5458\u5728\u4e9a\u9a6c\u900a\u5de5\u4f5c\uff09\u53ef\u4ee5\u53c2\u52a0\u4e9a\u9a6c\u900a\u7269\u6d41\u548c\u5546\u4e1a\u7ba1\u7406\u9014\u5f84\u804c\u4e1a\u65b9\u5411\u7684\u8bfe\u7a0b\u3002\u5341\u51e0\u540d\u5b66\u751f\u805a\u96c6\u5728\u4e00\u95f4\u7a7a\u8c03\u6559\u5ba4\u7684\u5de5\u4f5c\u53f0\u524d\uff0c\u8be5\u6559\u5ba4\u65e8\u5728\u6a21\u62df\u4e9a\u9a6c\u900a\u8bbe\u65bd\u7684\u5185\u90e8\u3002\u5728\u4e00\u9762\u5899\u4e0a\uff0c\u4e9a\u9a6c\u900a\u7684\u5de8\u578b\u6807\u5fd7\u5728\u9ec4\u8272\u548c\u7eff\u8272\u7684\u6a2a\u5e45\u4e0a\u9732\u9f7f\u800c\u7b11\u3002 \u201c\u5ba2\u6237\u75f4\u8ff7\u201d\u548c\u201c\u4ea4\u4ed8\u7ed3\u679c\u201d\u8fd9\u4e24\u4e2a\u5b57\u662f\u5728\u4f01\u4e1a\u98ce\u683c\u7684\u9ec4\u8272\u80cc\u666f\u4e0b\u7ed8\u5236\u7684\u3002\u5728\u767d\u677f\u4e0a\uff0c\u4e00\u4f4d\u8001\u5e08\u5199\u4e0b\u4e86\u201c\u7269\u6d41\u6700\u7ec8\u9879\u76ee\u201d\uff0c\u5f53\u5929\u7684\u8bfe\u7a0b\u662f\u4e9a\u9a6c\u900a\u7684\u201c14 \u6761\u9886\u5bfc\u539f\u5219\u201d\u3002\u6bcf\u4e2a\u9752\u5c11\u5e74\u90fd\u7a7f\u7740\u5370\u6709\u4e9a\u9a6c\u900a\u6807\u5fd7\u7684\u516c\u53f8\u9ad8\u5c14\u592b\u7403\u886b\u3002\u5b66\u751f\u548c\u5de5\u4f5c\u4eba\u5458\u5bf9\u4e0e\u516c\u53f8\u7684\u8054\u7cfb\u611f\u5230\u81ea\u8c6a\u3002\u4e9a\u9a6c\u900a\u4e0e\u5b66\u6821\u5408\u4f5c\uff0c\u4f5c\u4e3a\u5176\u5728\u5185\u9646\u5e1d\u56fd\u6210\u7acb\u4e94\u5468\u5e74\u7684\u4e00\u90e8\u5206\uff0c\u6350\u8d60\u4e86 50,000 \u7f8e\u5143\u6765\u542f\u52a8\u8bd5\u70b9\u8ba1\u5212\uff0c\u5de8\u5927\u7684\u62bd\u5956\u5f0f\u4e9a\u9a6c\u900a\u652f\u7968\u5c55\u793a\u5728\u6559\u5ba4\u5165\u53e3\u7684\u663e\u773c\u4f4d\u7f6e\u3002\u5b66\u751f\u4eec\u5df2\u7ecf\u5b9e\u5730\u8003\u5bdf\u4e86\u9644\u8fd1\u7684\u4e9a\u9a6c\u900a\u4ed3\u5e93\u3002\u4e00\u4e2a\u8bbe\u8ba1\u6210\u7c7b\u4f3c\u4e8e\u4e9a\u9a6c\u900a\u8bbe\u65bd\u7684\u516c\u7acb\u9ad8\u4e2d\u6559\u5ba4\uff0c\u5b66\u751f\u5728\u4ed6\u4eec\u7684\u8863\u670d\u4e0a\u6234\u7740\u4e9a\u9a6c\u900a\u6807\u5fd7\uff0c\u56e0\u4e3a\u4ed6\u4eec\u8bb0\u4f4f\u4e9a\u9a6c\u900a\u7684\u9886\u5bfc\u539f\u5219\uff08\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5176\u4e2d\u8fd8\u5305\u62ec\u201c\u6240\u6709\u6743\u201d\u548c\u201c\u601d\u8003\u5927\u201d\uff0c\u5177\u6709\u4f18\u70b9\u7684\u7981\u4ee4\u4f9b\u672c\u6742\u5fd7\u8bfb\u8005\u5728\u60f3\u8c61\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u4ee5\u4e9a\u9a6c\u900a\u4e3a\u4f8b\u7684\u95ee\u9898\u65f6\uff09\u3002\u516c\u53f8\u4e0e\u9ad8\u4e2d\u7b49\u516c\u5171\u4ea7\u54c1\u4e4b\u95f4\u7684\u8fd9\u79cd\u5173\u7cfb\u662f\u5c06\u4e9a\u9a6c\u900a\u89c6\u4e3a\u201c\u90ca\u533a\u548c\u90ca\u533a\u793e\u4f1a\u5316\u7684\u4e3b\u8981\u5de5\u4eba\u9636\u7ea7\u7a7a\u95f4\u201d\u7684\u4e00\u90e8\u5206\u3002\n\u5e9e\u7136\u5927\u7269\u5c31\u5728\u8fd9\u91cc\uff0c\u4e0d\u4ec5\u4ea7\u751f\u5229\u6da6\uff0c\u8fd8\u4ea7\u751f\u4eba\u3002\u8fd9\u9700\u8981\u4f01\u4e1a\u704c\u8f93\u3001\u793e\u4f1a\u758f\u8fdc\u548c\u5bf9\u81ea\u5df1\u7684\u52b3\u52a8\u7684\u6df1\u523b\u758f\u79bb\uff0c\u5c24\u5176\u662f\u5728\u4e00\u4e2a\u4eba\u6253\u7834\u81ea\u5df1\u7684\u8eab\u4f53\u5c06\u8fd9\u4e48\u591a\u5546\u54c1\u9001\u5230\u4eba\u4eec\u5bb6\u95e8\u53e3\u65f6\uff0c\u8fd9\u5c24\u5176\u6ca1\u6709\u610f\u4e49\u3002\u4f46\u662f\uff0c\u5982\u679c\u51fa\u73b0\u4e00\u79cd\u62b5\u6297\u548c\u7ec4\u7ec7\u7684\u6587\u5316\uff0c\u5b83\u53ef\u80fd\u4f1a\u53d8\u5f97\u5b8c\u5168\u4e0d\u540c\uff1a\u4ed3\u5e93\u662f\u6597\u4e89\u3001\u7ade\u4e89\u548c\u56e2\u7ed3\u7684\u573a\u6240\uff0c\u800c\u4e9a\u9a6c\u900a\u5219\u662f\u5ba1\u67e5\u7684\u5bf9\u8c61\uff0c\u662f\u654c\u4eba\u3002\u76ee\u524d\u4ed3\u5e93\u5185\u5916\u90fd\u6709\u4eba\u5728\u4e3a\u540e\u4e00\u79cd\u7ed3\u679c\u800c\u52aa\u529b\uff0c\u5373\u4f7f\u662f\u6770\u592b\u00b7\u8d1d\u4f50\u65af\u8fd9\u6837\u7684\u4eba\u4e5f\u65e0\u6cd5\u963b\u6b62\u4ed6\u4eec\u3002\u6b63\u5982\u4e00\u4f4d\u4e0d\u540c\u65f6\u4ee3\u7684\u8457\u540d\u5386\u53f2\u5b66\u5bb6\u6240\u8a00\uff1a\u201c\u5de5\u4eba\u9636\u7ea7\u4e0d\u662f\u6309\u65f6\u5347\u8d77\u7684\u3002\u5b83\u662f\u81ea\u5df1\u5236\u9020\u7684\u3002\u201d\u5b83\u4ecd\u7136\u662f\uff0c\u5e76\u4e14\u968f\u7740\u6bcf\u6b21\u8f6c\u53d8\uff0c\u5b83\u90fd\u4f1a\u91cd\u65b0\u5236\u4f5c\u3002\u8fd9\u662f\u5426\u4f1a\u5bfc\u81f4\u7edd\u671b\u3001\u6fc0\u8fdb\u7684\u70ed\u60c5\uff0c\u6216\u8005\u5b8c\u5168\u4e0d\u540c\u7684\u4e1c\u897f\u8fd8\u6709\u5f85\u89c2\u5bdf\u3002 Alex N. Press \u662f Jacobin \u7684\u4e13\u804c\u4f5c\u5bb6\u3002\u5979\u7684\u4f5c\u54c1\u51fa\u73b0\u5728\u534e\u76db\u987f\u90ae\u62a5\u3001Vox\u3001\u56fd\u5bb6\u548c n+1 \u7b49\u5730\u65b9\u3002 ESC A \u8bba\u6587\uff1a\u4e9a\u9a6c\u900a\u7684\u4ed3\u5e93\u533a\u662f\u201c\u90ca\u533a\u548c\u90ca\u533a\u793e\u4f1a\u5316\u7684\u4e3b\u8981\u5de5\u4eba\u9636\u7ea7\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u60a8\u6b63\u5728\u5efa\u7acb\u79df\u6237\u5de5\u4f1a\u6216\u653f\u515a\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u793e\u4ea4\u7a7a\u95f4\u3002\u5b83\u5177\u6709\u66f4\u5e7f\u6cdb\u7684\u91cd\u8981\u6027\u3002\u201d\u8fd9\u662f\u7531\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u5f15\u8ff0\u7684\u7ec4\u7ec7\u8005\u548c\u5730\u7406\u5b66\u5bb6 Spencer Cox \u63d0\u4f9b\u7684\u3002\u4f5c\u8005 [\u2026] \u4e00\u7bc7\u8bba\u6587\uff1a\u4e9a\u9a6c\u900a\u7684\u4ed3\u5e93\u533a\u662f\u201c\u90ca\u533a\u548c\u90ca\u533a\u793e\u4f1a\u5316\u7684\u4e3b\u8981\u5de5\u4eba\u9636\u7ea7\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u60a8\u6b63\u5728\u5efa\u7acb\u79df\u6237\u5de5\u4f1a\u6216\u653f\u515a\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u793e\u4ea4\u7a7a\u95f4\u3002\u5b83\u5177\u6709\u66f4\u5e7f\u6cdb\u7684\u91cd\u8981\u6027\u3002\u201d\u8fd9\u662f\u7531\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u5f15\u8ff0\u7684\u7ec4\u7ec7\u8005\u548c\u5730\u7406\u5b66\u5bb6 Spencer Cox \u63d0\u4f9b\u7684\u3002\u4f5c\u8005 [\u2026] \u4e00\u7bc7\u8bba\u6587\uff1a\u4e9a\u9a6c\u900a\u7684\u4ed3\u5e93\u533a\u662f\u201c\u90ca\u533a\u548c\u90ca\u533a\u793e\u4f1a\u5316\u7684\u4e3b\u8981\u5de5\u4eba\u9636\u7ea7\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u60a8\u6b63\u5728\u5efa\u7acb\u79df\u6237\u5de5\u4f1a\u6216\u653f\u515a\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u793e\u4ea4\u7a7a\u95f4\u3002\u5b83\u5177\u6709\u66f4\u5e7f\u6cdb\u7684\u91cd\u8981\u6027\u3002\u201d\u8fd9\u662f\u7531\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u5f15\u8ff0\u7684\u7ec4\u7ec7\u8005\u548c\u5730\u7406\u5b66\u5bb6 Spencer Cox \u63d0\u4f9b\u7684\u3002\u4f5c\u8005 [\u2026]", "note_en": "Our new issue, \u201cThe Working Class,\u201d is out in print and online soon.  Subscribe today to get it.\n     A thesis: Amazon\u2019s warehouse zones are \u201cthe major working-class space of suburban and exurban socialization. So even if you\u2019re building a tenant union or a political party, this is a major social space. It has a broader importance.\u201d This comes courtesy of organizer and geographer Spencer Cox,  quoted in the  New York Times.\n The author of the  Times article, labor reporter E. Tammy Kim, follows Cox\u2019s quote with a congruent assertion from socialist Seattle city councilor Kshama Sawant. \u201cIf you look at the consciousness of Amazon workers, it\u2019s a guide to where the working class is as a whole,\u201d says Sawant.\n If class is a social relation and the working class is made and remade daily, that formation is increasingly happening inside the massive structures that house Amazon\u2019s warehouses, where workers face capital embodied in the whir of machinery and barking managers and the beeps of the scanner in their hands, prodding them to pick up the pace. It is happening in the parking lots outside, where people smoke and linger and chat and dread. Whether Amazon is really  the major space of socialization, or merely  a major one, is less important than grasping the degree to which Amazon is operating as a near force of nature in working-class life.\n The  extreme geographic bifurcation of Amazon\u2019s operations complicates the matter: some communities are vacuumed up almost completely by Amazon, while in others, people don\u2019t know anyone who works for the company. Such unevenness is of further importance given that the warehouse worker is neither seen nor heard by the customer; at least at Walmart, you go to a store and you see the workers \u2014 you know they exist.\n Here\u2019s how it plays out in many communities near one of the warehouses. Amazon\u2019s application process is, often, perfunctory. You apply, you get a job. Doing away with interviews or much conversation at all between potential employer and potential employee enables the company to beef up during \u201cpeak,\u201d which consists of the holiday season as well as the time around  Prime Day, the company\u2019s holiday that exists to break up the summer lull. During these periods, Amazon\u2019s already immense workforce cannot keep up with surging demand, so the company brings in armies of \u201c seasonal associates,\u201d temporary workers who enlist for quick cash \u2014 $15 an hour, Amazon\u2019s starting wage, is below the average for the warehousing industry, but it\u2019s still a hell of a lot more than our $7.25 federal minimum wage. Almost all of these temps are let go when the surge in sales recedes. This process has only intensified over the past year as Amazon, buoyed by increased sales during the pandemic, has gone on a  hiring spree almost unprecedented in history, adding nearly five hundred thousand people to its payroll in a matter of months.\n The result is that whole communities are absorbed into the warehouse. For an example of what that looks, take this reporting about JFK8, an Amazon warehouse on Staten Island, New York, that has been a  particular site of ferment:\n As dusk settled and trucks rolled by, Tiara Mangroo, a high school student just off her shift, embraced her boyfriend. He worked for Amazon on Staten Island too, as did her father, uncle, cousins and best friend. Keanu Bushell, a college student, worked days, and his father nights, sharing one car that made four daily trips between Brooklyn and JFK8. A mother and daughter organized containers of meals for their middle-of-the-night breaks; others packed Red Bull or Starbucks Frappuccinos in the clear theft-prevention bags that workers carried. Most said they were grateful just to be employed.\n These are entire families employed by Amazon. Many of them will be let go within weeks, though many others will quit even sooner, unable to endure the stress and strain of the job. This churn is a concern for the higher-ups at the company, who are increasingly busing people in from farther and farther away to maintain the staffing levels required during peak. As Paul Stroup, who led Amazon corporate teams in analyzing the warehouses,  tells the  New York Times, \u201cSix to seven people who apply equals one person showing up and actually doing work. . . . You need to have eight, nine, 10 million people apply each year.\u201d As the newspaper notes, that\u2019s about 5 percent of the US workforce.\n Look to the other coast and you find a similar dynamic playing out. Zoom in on certain locales and you get glimpses into one possible future: a company town, in which a monopsony employer effectively becomes the governing structure for public goods and services. That this description increasingly applies to  Seattle, where Amazon has as much office space as the next forty largest employers combined, has  long been true. But the way this applies to areas near the company\u2019s warehouses is less understood.\n Take the Inland Empire, a rural and exurban region in California saturated with warehouses because of its proximity to Los Angeles. At Cajon High School, a public high school in San Bernardino, students \u2014 many of whom have family members employed at Amazon \u2014 can take classes in the Amazon Logistics and Business Management Pathways career track.\n  A dozen students sat clustered at work tables inside an air-conditioned classroom, which was designed to emulate the inside of an Amazon facility. On one wall, Amazon\u2019s giant logo grinned across a yellow and green banner. The words \u201cCUSTOMER OBSESSION\u201d and \u201cDELIVER RESULTS\u201d were painted against a corporate-style yellow backdrop. On a whiteboard, a teacher had written the words \u201cLogistics Final Project,\u201d and the lesson of the day was on Amazon\u2019s \u201c14 Leadership Principles.\u201d Each teenager wore a company golf shirt emblazoned with the Amazon logo.\n Students and staff members expressed pride in being associated with the company. Amazon partnered with the school as part of its five-year anniversary in the Inland Empire, donating $50,000 to start the pilot program, the giant sweepstakes-style Amazon check displayed prominently at the classroom entrance. The students had already taken field trips to tour the nearby Amazon warehouse.\n A public high-school classroom designed to resemble an Amazon facility, with students wearing Amazon logos on their clothing as they memorize Amazon\u2019s leadership principles (which, it is worth noting, also include \u201cOwnership\u201d and \u201cThink Big,\u201d injunctions that hold merit for readers of this magazine when imagining how we might solve the problems exemplified by Amazon). Such a relationship between the company and public goods like a high school is part of what it means to consider Amazon as \u201cthe major working-class space of suburban and exurban socialization.\u201d\n The behemoth is here, producing not only profit but people, too. That entails corporate indoctrination, social estrangement, and profound alienation from one\u2019s labor, which is particularly meaningless as one breaks one\u2019s body to get so many goods to people\u2019s doors.\n But were a culture of resistance and organization to emerge, it could become something quite different: the warehouse as site of struggle and contestation and solidarity, and Amazon as object of scrutiny, an enemy. There are currently people, both inside and outside the warehouses, working toward the latter outcome, and even the likes of Jeff Bezos can\u2019t stop them. As a noted historian of a different era  put it, \u201cThe working class did not rise like the sun at an appointed time. It was present at its own making.\u201d It still is, and with each shift it is remade anew. Whether that will lead to despair, militant enthusiasm, or something entirely different remains to be seen.\n  Alex N. Press is a staff writer at  Jacobin. Her writing has appeared in the  Washington Post,  Vox, the  Nation, and  n+1, among other places.\n    ESC   A thesis: Amazon\u2019s warehouse zones are \u201cthe major working-class space of suburban and exurban socialization. So even if you\u2019re building a tenant union or a political party, this is a major social space. It has a broader importance.\u201d This comes courtesy of organizer and geographer Spencer Cox, quoted in the New York Times. The author [\u2026]\n  A thesis: Amazon\u2019s warehouse zones are \u201cthe major working-class space of suburban and exurban socialization. So even if you\u2019re building a tenant union or a political party, this is a major social space. It has a broader importance.\u201d This comes courtesy of organizer and geographer Spencer Cox, quoted in the New York Times. The author [\u2026]\n  A thesis: Amazon\u2019s warehouse zones are \u201cthe major working-class space of suburban and exurban socialization. So even if you\u2019re building a tenant union or a political party, this is a major social space. It has a broader importance.\u201d This comes courtesy of organizer and geographer Spencer Cox, quoted in the New York Times. The author [\u2026]", "posttime": "2021-07-25 13:16:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e9a\u9a6c\u900a,amazon,\u7f8e\u56fd,creating", "title": "\u4e9a\u9a6c\u900a\u6b63\u5728\u7f8e\u56fd\u5404\u5730\u521b\u5efa\u516c\u53f8\u57ce\u9547", "title_en": "Amazon Is Creating Company Towns Across the United States", "transed": 1, "url": "https://jacobinmag.com/2021/07/amazon-warehouse-communities-towns-geography-warehouse-fulfillment-jfk8-cajon-inland-empire", "via": "", "real_tags": ["\u4e9a\u9a6c\u900a", "amazon", "\u7f8e\u56fd", "creating"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069595, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Ractors\uff08api \u6587\u6863\u3001\u8bbe\u8ba1\u6587\u6863\uff09\u662f Ruby 3.0 \u7684\u4e00\u79cd\u65b0\u7684\u5e76\u53d1\u62bd\u8c61\uff0c\u5176\u7075\u611f\u6765\u81ea\u4e8e actor \u6a21\u578b\u3002\u4ece\u60f3\u8981\u5411\u53e6\u4e00\u4e2a Ractor \u53d1\u9001\u4e00\u4e9b\u4fe1\u606f\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u901a\u4fe1\u53ef\u4ee5\u662f\uff1a \u5f02\u6b65\uff08\u6216\u975e\u963b\u585e\uff09\uff1a\u4e00\u4e2a Ractor \u53ef\u4ee5\u4f7f\u7528 Ractor#send \u5411\u53e6\u4e00\u4e2a\u53d1\u9001\u4fe1\u606f\uff0c\u5c06\u5176\u653e\u5165\u4e00\u4e2a\u65e0\u9650\u961f\u5217\u4e2d\uff0c\u8be5\u961f\u5217\u53ef\u4ee5\u901a\u8fc7 Ractor.receive \u540c\u6b65\uff08\u6216\u963b\u585e\uff09\u88ab\u76ee\u6807 Ractor \u8bfb\u53d6\uff1a\u4e00\u4e2a Ractor \u53ef\u4ee5\u4f7f\u7528 Ractor.yield \u963b\u585e\uff0c\u76f4\u5230\u53e6\u4e00\u4e2a Ractor \u8c03\u7528 Ractor#take \u8ba9\u6211\u4eec\u8003\u8651\u5f02\u6b65\u60c5\u51b5\uff1a\u5047\u8bbe\u6211\u4eec\u60f3\u5411\u53e6\u4e00\u4e2a Ractor \u53d1\u9001\u4fe1\u606f\uff0c\u4f46\u662f\u4e0d\u60f3\u963b\u6b62\u5b83\u5b8c\u6210\u5904\u7406\u3002\u5982\u679c\u63a5\u6536\u65b9 Ractor \u592a\u6162\u800c\u65e0\u6cd5\u5904\u7406\u6570\u636e\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f receiver_ractor = Ractor.new do loop do message = Ractor.receive sleep 1 puts &quot; Processed #{message } &quot; end endcounter = 0 while true counter += 1 receiver_ractor.send(counter) end \u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u5982\u679c\u63a5\u6536\u5668\u8ddf\u4e0d\u4e0a\u53d1\u9001\u65b9\uff0c\u5c06\u4f7f\u7528\u8d8a\u6765\u8d8a\u591a\u7684\u5185\u5b58\uff0c\u76f4\u5230\u7cfb\u7edf\u5185\u5b58\u8017\u5c3d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5d29\u6e83\u3002\n\u67e5\u770b Ractor API\uff0c\u53d1\u9001\u65b9\u6ca1\u6709\u5185\u7f6e\u65b9\u6cd5\u6765\u68c0\u67e5\u63a5\u6536\u65b9\u662f\u5426\u843d\u540e\uff0c\u6240\u4ee5\u6211\u60f3\u51fa\u4e86\u4ee5\u4e0b\u65b9\u6cd5\uff1areceiver_ractor = Ractor.new do processing_queue = Queue.new Thread.new do sleep(1) # \u6a21\u62df\u8fd9\u4e2a\u7ebf\u7a0b\u7684\u6162\u542f\u52a8\u5faa\u73af do message = processing_queue.pop puts &quot; Processed from queue: #{message } &quot; end end loop do queue_size = processing_queue.size sender, message = Ractor.select( Ractor.current , yield_value: queue_size) if sender != :yield processing_queue &lt;&lt; message puts &quot; \u6dfb\u52a0\u6d88\u606f\u5230\u961f\u5217\uff1a#{message } &quot; else puts &quot; Sent queue status: #{queue_size } &quot; end end endreceiver_ractor.send(1)receiver_ractor.send (2)receiver_ractor.send(3)puts\u201c\u5b8c\u6210\u63d0\u4ea4\u201dsleep(0.5)receiver_ractor.take#\u5f3a\u5236\u5237\u65b0statusputs\u201c\u63a5\u6536\u5668\u961f\u5217\u957f\u5ea6\uff1a#{receiver_ractor.take}\u201dsleep(1)receiver_ractor.take#\u5f3a\u5236\u5237\u65b0statusputs\u201c\u63a5\u6536\u5668\u961f\u5217\u957f\u5ea6\uff1a#{receiver_ractor.take } &quot; &lt;internal:ractor&gt;:267: \u8b66\u544a\uff1aRacto r \u662f\u5b9e\u9a8c\u6027\u7684\uff0c\u5728\u672a\u6765\u7684 Ruby \u7248\u672c\u4e2d\u884c\u4e3a\u53ef\u80fd\u4f1a\u6539\u53d8\uff01\u8fd8\u6709\u5f88\u591a\u5b9e\u73b0\u95ee\u9898\u3002 \u5b8c\u6210\u63d0\u4ea4\u6dfb\u52a0\u6d88\u606f\u5230\u961f\u5217\uff1a1\u6dfb\u52a0\u6d88\u606f\u5230\u961f\u5217\uff1a2\u6dfb\u52a0\u6d88\u606f\u5230\u961f\u5217\uff1a3\u53d1\u9001\u961f\u5217\u72b6\u6001\uff1a3\u53d1\u9001\u961f\u5217\u72b6\u6001\uff1a3\u63a5\u6536\u5668\u961f\u5217\u957f\u5ea6\uff1a3\u4ece\u961f\u5217\u5904\u7406\uff1a1\u4ece\u961f\u5217\u5904\u7406\uff1a2\u4ece\u961f\u5217\u5904\u7406\uff1a3\u53d1\u9001\u961f\u5217\u72b6\u6001:3Sent queue status: 0Receiver queue length: 0 \u63a5\u6536\u8005Ractor\u5524\u9192\uff0c\u8bfb\u53d6\u4e09\u4e2a\u6d88\u606f\uff0c\u5e76\u91cd\u5b9a\u5411\u5230processing_queue \u4e3bRactor\u5524\u9192\uff0c\u5f3a\u5236\u5237\u65b0queue_size\uff08\u66f4\u591a\u7ec6\u8282\u89c1\u4e0b\u6587\uff09\u63a5\u6536\u8005Ractor\u7684\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u5524\u9192\u5e76\u5904\u7406\u4e09\u4e2a\u6d88\u606f\uff1a1\u30012 \u548c 3 \u4e3b Ractor \u5524\u9192\uff0c\u5f3a\u5236\u5237\u65b0 queue_size\uff08\u518d\u6b21\uff09-\u6ce8\u610f\u9700\u8981\u5237\u65b0\uff0c\u56e0\u4e3a\u8be5\u503c\u5df2\u8fc7\u65f6\uff08\u4ece 3 \u53d8\u4e3a 0\uff09\n\u5728\u63a5\u6536\u5668 Ractor \u4e2d\uff0c\u6b64\u7b56\u7565\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a \u73b0\u5728\u6709\u4e24\u4e2a\u7ebf\u7a0b\u3002\u5176\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528 Ractor.select \u4e00\u6b21\u505a\u4e24\u4ef6\u4e8b - \u63a5\u6536\u65b0\u9879\u76ee\u8fdb\u884c\u5904\u7406\uff0c\u5c06\u5b83\u4eec\u653e\u5728\u5e38\u89c4\u7ebf\u7a0b\u5b89\u5168\u961f\u5217\u4e2d\uff0c\u6216\u8005\u8fd4\u56de\u961f\u5217\u7684\u5f53\u524d\u5927\u5c0f\u3002\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u53ea\u5904\u7406\u7ebf\u7a0b\u5b89\u5168\u961f\u5217\u4e2d\u7684\u9879\u76ee\u3002\u53d1\u4ef6\u4eba\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 send \u6765\u53d1\u9001\u9879\u76ee\uff0c\u6216\u8005\u8c03\u7528 take \u4e24\u6b21\u6765\u83b7\u53d6\u961f\u5217\u7684\u5927\u5c0f\u3002\u4e3a\u4ec0\u4e48\u4e24\u6b21\uff1f\u56e0\u4e3a\u8fd9\u4e2a\u503c\u53ea\u5728 select \u88ab\u8c03\u7528\u4e4b\u524d\u5237\u65b0\uff0c\u5982\u679c\u5728 select \u88ab\u8f93\u5165\u548c\u4efb\u4f55 send \u6216 take \u8c03\u7528\u4e4b\u95f4\u7ecf\u8fc7\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u8fd9\u4e2a\u503c\u53ef\u80fd\u4f1a\u8fc7\u65f6\uff0c\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u3002\u8fde\u7eed\u4e24\u6b21\u8c03\u7528 take \u4fdd\u8bc1\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u201c\u65b0\u9c9c\u201d\u7684\u503c\u2014\u2014\u6211\u4eec\u77e5\u9053\u8fd9\u4e2a\u503c\u53ea\u662f\u4e3a\u7b2c\u4e8c\u6b21\u5237\u65b0\u800c\u5237\u65b0\u3002\u5728\u8fd9\u79cd\u7ed3\u6784\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u65bd\u8bb8\u591a\u7b56\u7565\u6765\u66f4\u597d\u5730\u5728\u4e24\u4e2a Ractor \u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u539f\u59cb\u793a\u4f8b\u4ee5\u786e\u4fdd\u53d1\u9001\u65b9\u6c38\u8fdc\u4e0d\u4f1a\u201c\u9886\u5148\u592a\u591a\u201d\u63a5\u6536\u65b9\uff1areceiver_ractor = Ractor.new do processing_queue = Queue.new Thread.new do loop do message = processing_queue.pop sleep(1 ) puts &quot; Processed #{message } &quot; end end loop do queue_size = processing_queue.size sender, message = Ractor.select( Ractor.current, yield_value: queue_size) if sender != :yield processing_queue &lt;&lt; message puts &quot; \u6dfb\u52a0\u6d88\u606f\u5230\u961f\u5217: #{message } &quot; else puts &quot; Sent queue status: #{queue_size } &quot; end end endcounter = 0 while true counter += 1 receiver_ractor.send(counter) if counter % 10 == 0 receiver_ractor.take # \u5f3a\u5236\u5237\u65b0\u72b6\u6001 queue_size =receiver_ractor.take if queue_size &gt; 5 puts &quot; Ractor \u843d\u540e ( #{queue_size } \u5143\u7d20\u672a\u5904\u7406); \u7761\u7720\u4e00\u6bb5\u65f6\u95f4 &quot; sleep(1) while (receiver_ractor.take &amp;&amp; receiver_ractor.take &gt; 1) end end end &lt;internal: ractor&gt;:267: \u8b66\u544a\uff1aRactor \u662f\u5b9e\u9a8c\u6027\u7684\uff0c\u672a\u6765\u7684\u884c\u4e3a\u53ef\u80fd\u4f1a\u6539\u53d8e \u7248\u672c\u7684 Ruby\uff01\u8fd8\u6709\u5f88\u591a\u5b9e\u73b0\u95ee\u9898\u3002 \u5411\u961f\u5217\u6dfb\u52a0\u6d88\u606f\uff1a1\u5411\u961f\u5217\u6dfb\u52a0\u6d88\u606f\uff1a2\u5411\u961f\u5217\u6dfb\u52a0\u6d88\u606f\uff1a3\u5411\u961f\u5217\u6dfb\u52a0\u6d88\u606f\uff1a4\u5411\u961f\u5217\u6dfb\u52a0\u6d88\u606f\uff1a5\u5411\u961f\u5217\u6dfb\u52a0\u6d88\u606f\uff1a6\u5411\u961f\u5217\u6dfb\u52a0\u6d88\u606f\uff1a7\u5411\u961f\u5217\u6dfb\u52a0\u6d88\u606f\uff1a8\u5411\u961f\u5217\u6dfb\u52a0\u6d88\u606fqueue: 9Added message to queue: 10Sent queue status: 10Sent queue status: 9Ractor is fall behind (9 \u4e2a\u5143\u7d20\u672a\u5904\u7406);\u4f11\u7720\u4e00\u6bb5\u65f6\u95f4\u53d1\u9001\u961f\u5217\u72b6\u6001\uff1a9\u53d1\u9001\u961f\u5217\u72b6\u6001\uff1a9Processed 1\u53d1\u9001\u961f\u5217\u72b6\u6001\uff1a9Sent\u961f\u5217\u72b6\u6001\uff1a8Processed 2\u53d1\u9001\u961f\u5217\u72b6\u6001\uff1a8Sent\u961f\u5217\u72b6\u6001\uff1a7Processed 3\u53d1\u9001\u961f\u5217\u72b6\u6001\uff1a7Sent\u961f\u5217\u72b6\u6001\uff1a6Processed 4Sent\u961f\u5217\u72b6\u6001\uff1a6Sent\u961f\u5217\u72b6\u6001\uff1a5Processed 5Sent queue status: 5Sent queue status: 4Processed 6Sent queue status: 4Sent queue status: 3Processed 7Sent queue status: 3Sent queue status: 2Processed 8Sent queue status: 2Sent queue status: 1Added message to queue: 11Added message to queue: 12Added message to queue: 13Added message to queue: 14Added message to queue: 15Added message to queue: 16Added message to queue: 17Added message to queue: 18Added message to queue: 19Added message to queue: 20Sent queue status: 11Sent queue status: 11Ractor is fall behind (11 elements unprocessed) ;\u7761\u4e00\u4f1a\u513f \u7761\u7720\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u53ef\u4ee5\u5b8c\u6210\u5de5\u4f5c\u3002\u5176\u4ed6\u66ff\u4ee3\u65b9\u6848\u53ef\u80fd\u662f\u5207\u6362\u5230\u540c\u6b65\u901a\u4fe1\uff0c\u6216\u8005\u5c06\u5de5\u4f5c\u63d0\u4ea4\u5230\u4e0d\u540c\u7684 Ractor/\u4ee3\u7801\u8def\u5f84\u3002", "note_en": "Ractors ( api documentation,  design documentation) are a new concurrency abstraction for Ruby 3.0 inspired on the actor model.\n  From the point of view of a Ractor that wants to send some information to another, communication can either be:\n  asynchrous (or  non-blocking): a Ractor can send information to another using   Ractor#send, placing it into an infinite queue that can be read by the destination Ractor with   Ractor.receive\n  synchronous (or  blocking): a Ractor can use   Ractor.yield to block until another Ractor calls   Ractor#take\n  Let\u2019s consider the async case: Let\u2019s say we want to send information to another Ractor, but don\u2019t want to block for it to finish processing it. What happens if the receiving Ractor is too slow to process the data?\n  receiver_ractor =  Ractor.new  do loop  do message =  Ractor.receive sleep  1 puts   &#34; Processed   #{message } &#34;  end endcounter =  0 while  true counter +=  1 receiver_ractor.send(counter) end\n      As expected, if the receiver cannot keep up with the sender, more and more memory will be used, until the system memory is exhausted and the application crashes.\n  Looking at the Ractor API, there\u2019s no built-in way for the sender to check if the receiver is falling behind or not, so I came up with the following approach:\n  receiver_ractor =  Ractor.new  do processing_queue =  Queue.new  Thread.new  do sleep( 1)  # simulate a slow start for this thread loop  do message = processing_queue.pop puts   &#34; Processed from queue:   #{message } &#34;  end  end loop  do queue_size = processing_queue.size sender, message =  Ractor.select( Ractor.current,  yield_value: queue_size)  if sender !=  :yield processing_queue &lt;&lt; message puts   &#34; Added message to queue:   #{message } &#34;  else puts   &#34; Sent queue status:   #{queue_size } &#34;  end  end endreceiver_ractor.send( 1)receiver_ractor.send( 2)receiver_ractor.send( 3)puts   &#34; Finished submissions &#34;sleep( 0.5)receiver_ractor.take  # force refresh statusputs   &#34; Receiver queue length:   #{receiver_ractor.take } &#34;sleep( 1)receiver_ractor.take  # force refresh statusputs   &#34; Receiver queue length:   #{receiver_ractor.take } &#34;\n    &lt;internal:ractor&gt;:267: warning: Ractor is experimental, and the behavior may change in future versions of Ruby! Also there are many implementation issues.Finished submissionsAdded message to queue: 1Added message to queue: 2Added message to queue: 3Sent queue status: 3Sent queue status: 3Receiver queue length: 3Processed from queue: 1Processed from queue: 2Processed from queue: 3Sent queue status: 3Sent queue status: 0Receiver queue length: 0\n    The receiver Ractor wakes up, reads the three messages, and redirects them to the  processing_queue\n  The main Ractor wakes up, forces a refresh of the  queue_size (see below for more details)\n      The receiver Ractor\u2019s second thread wakes up and processes the three messages:  1,  2 and  3\n  The main Ractor wakes up, forces a refresh of the  queue_size (again)\u2009\u2014\u2009notice that this refresh was needed, because the value was outdated (goes from 3 to 0)\n  Inside the receiver Ractor, this strategy works as follows: There are now two threads. One of the threads uses   Ractor.select to do two things at once\u2009\u2014\u2009either receive new items for processing, putting them on a regular thread-safe queue, or returning back the current size of the queue. The second thread just processes items from the thread-safe queue.\n  The sender can now either use  send to send items, or call  take twice to get the size of the queue. Why twice? Because this value is only refreshed before  select gets called, if a long time passes between  select is entered and any calls to  send or  take, this value can become outdated, as happened the example above. Calling  take twice in a row guarantees that we get a &#34;fresh&#34; value\u2009\u2014\u2009we know the value was just refreshed for the second  take.\n  Building atop this construction, we can implement a number of strategies for better communication between two Ractors. For instance, we can review the original example to make sure that the sender never runs &#34;too far ahead&#34; the receiver:\n  receiver_ractor =  Ractor.new  do processing_queue =  Queue.new  Thread.new  do loop  do message = processing_queue.pop sleep( 1) puts   &#34; Processed   #{message } &#34;  end  end loop  do queue_size = processing_queue.size sender, message =  Ractor.select( Ractor.current,  yield_value: queue_size)  if sender !=  :yield processing_queue &lt;&lt; message puts   &#34; Added message to queue:   #{message } &#34;  else puts   &#34; Sent queue status:   #{queue_size } &#34;  end  end endcounter =  0 while  true counter +=  1 receiver_ractor.send(counter)  if counter %  10 ==  0 receiver_ractor.take  # force refresh status queue_size = receiver_ractor.take  if queue_size &gt;  5 puts   &#34; Ractor is falling behind (  #{queue_size }  elements unprocessed); sleeping for a while &#34; sleep( 1)  while (receiver_ractor.take &amp;&amp; receiver_ractor.take &gt;  1)  end  end end\n    &lt;internal:ractor&gt;:267: warning: Ractor is experimental, and the behavior may change in future versions of Ruby! Also there are many implementation issues.Added message to queue: 1Added message to queue: 2Added message to queue: 3Added message to queue: 4Added message to queue: 5Added message to queue: 6Added message to queue: 7Added message to queue: 8Added message to queue: 9Added message to queue: 10Sent queue status: 10Sent queue status: 9Ractor is falling behind (9 elements unprocessed); sleeping for a whileSent queue status: 9Sent queue status: 9Processed 1Sent queue status: 9Sent queue status: 8Processed 2Sent queue status: 8Sent queue status: 7Processed 3Sent queue status: 7Sent queue status: 6Processed 4Sent queue status: 6Sent queue status: 5Processed 5Sent queue status: 5Sent queue status: 4Processed 6Sent queue status: 4Sent queue status: 3Processed 7Sent queue status: 3Sent queue status: 2Processed 8Sent queue status: 2Sent queue status: 1Added message to queue: 11Added message to queue: 12Added message to queue: 13Added message to queue: 14Added message to queue: 15Added message to queue: 16Added message to queue: 17Added message to queue: 18Added message to queue: 19Added message to queue: 20Sent queue status: 11Sent queue status: 11Ractor is falling behind (11 elements unprocessed); sleeping for a while\n  Sleeping is a very simplistic solution, but gets the job done. Other alternatives could be to switch to synchronous communication, or to instead submit the work to a different Ractor/code path.", "posttime": "2021-07-25 13:16:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ruby,ractor", "title": "Ruby Ractor \u5b9e\u9a8c\uff1a\u5b89\u5168\u5f02\u6b65\u901a\u4fe1\uff082021\uff09", "title_en": "Ruby Ractor Experiments: Safe async communication (2021)", "transed": 1, "url": "https://ivoanjo.me/blog/2021/02/14/ractor-experiments-safe-async/", "via": "", "real_tags": ["ruby", "ractor"]}, {"category": "", "categoryclass": "", "imagename": "7cf484ceeae6bc7fc2161eddc603cd15.jpg", "infoid": 1069594, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5e74\u6765\uff0c\u6211\u4e00\u76f4\u5728\u8bbe\u8ba1\u548c\u5b9e\u65bd\u4e00\u79cd\u529f\u80fd\u6027\u6559\u5b66\u8bed\u8a00\uff0c\u7279\u522b\u662f\u5728\u79bb\u6563\u6570\u5b66\u8bfe\u7a0b\u7684\u80cc\u666f\u4e0b\u4f7f\u7528\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\u8ba9\u5b66\u751f\u5728\u4ed6\u4eec\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u6559\u80b2\u65e9\u671f\u63a5\u89e6\u4e00\u4e9b\u51fd\u6570\u5f0f\u548c\u9759\u6001\u7c7b\u578b\u7684\u7f16\u7a0b\uff0c\u5e76\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u4e00\u79cd\u6709\u8da3\u800c\u5177\u4f53\u7684\u65b9\u5f0f\u6765\u4e86\u89e3\u4ed6\u4eec\u5728\u79bb\u6563\u6570\u5b66\u8bfe\u7a0b\u4e2d\u5b66\u5230\u7684\u6982\u5ff5\u4e0e\u8ba1\u7b97\u4e4b\u95f4\u7684\u8054\u7cfb\u3002\u6211\u4e0d\u662f\u7b2c\u4e00\u4e2a\u60f3\u5230\u7ed3\u5408 FP + \u79bb\u6563\u6570\u5b66\u7684\u4eba\uff0c\u4f46\u6211\u8ba4\u4e3a\u6709\u673a\u4f1a\u4f7f\u7528\u4e13\u95e8\u4e3a\u6b64\u76ee\u7684\u800c\u8bbe\u8ba1\u7684\u8bed\u8a00\u6765\u505a\u5f97\u5f88\u597d\u3002 \uff08\u800c\u4e14\uff0c\u6211\u5728\u5f00\u73a9\u7b11\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u79cd\u8bed\u8a00\u53ea\u662f\u5f88\u6709\u8da3\u3002\uff09\u5f53\u7136\uff0c\u8be5\u8bed\u8a00\u6709\u4e00\u4e2a\u5bcc\u6709\u8868\u73b0\u529b\u7684\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\uff0c\u5177\u6709\u81ea\u7136\u6570\u3001\u6709\u7406\u6570\u3001\u5e03\u5c14\u503c\u548c Unicode \u5b57\u7b26\u7b49\u57fa\u672c\u7c7b\u578b\uff0c\u4ee5\u53ca sum \u548c\u4ea7\u54c1\u7c7b\u578b\u3001\u5217\u8868\u3001\u5b57\u7b26\u4e32\u4ee5\u53ca\u5b9a\u4e49\u4efb\u610f\u9012\u5f52\u7c7b\u578b\u7684\u80fd\u529b\u3002\u5b83\u8fd8\u5177\u6709\u6709\u9650\u96c6\u7684\u5185\u7f6e\u7c7b\u578b\u548c\u8bed\u6cd5\u3002\u4f8b\u5982\uff0c\uff08\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u6211\u5c06\u4f7f\u7528 Unicode \u8bed\u6cd5\uff0c\u56e0\u4e3a\u5b83\u770b\u8d77\u6765\u4e0d\u9519\uff0c\u4f46\u4e5f\u6709\u6240\u6709\u5185\u5bb9\u7684 ASCII \u7b49\u4ef7\u7269\u3002\uff09\u96c6\u5408\u652f\u6301\u901a\u5e38\u7684\u64cd\u4f5c\uff0c\u5982\u5e76\u96c6\u3001\u4ea4\u96c6\u548c\u5dee\u96c6\uff0c\u4ee5\u53ca\u96c6\u5408\u7406\u89e3\u7b26\u53f7\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\uff0c\u8fd9\u5c06\u4e3a\u5b66\u751f\u63d0\u4f9b\u4e00\u4e2a\u4e30\u5bcc\u7684\u64cd\u573a\uff0c\u8ba9\u4ed6\u4eec\u73a9\u5f04\u901a\u5e38\u5728\u79bb\u6563\u6570\u5b66\u8bfe\u4e2d\u6559\u6388\u7684\u57fa\u672c\u96c6\u5408\u8bba\u3002\u5982\u679c\u60a8\u4e60\u60ef\u4e8e\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u8bed\u8a00\u8fdb\u884c\u7f16\u7a0b\uff0c\u5e0c\u671b\u4ee5\u4e0a\u6240\u6709\u5185\u5bb9\u770b\u8d77\u6765\u90fd\u5f88\u6b63\u5e38\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u6000\u7591\u8fd9\u91cc\u6709\u4e9b\u4e1c\u897f\u4f1a\u8ba9\u5b66\u751f\u611f\u5230\u975e\u5e38\u56f0\u60d1\u3002\u6211\u592a\u4e60\u60ef\u4e86\uff0c\u6211\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u624d\u610f\u8bc6\u5230\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\uff1b\u4e5f\u8bb8\u4f60\u4e5f\u6ca1\u6709\u610f\u8bc6\u5230\u3002 \uff08\u597d\u5427\uff0c\u4e5f\u8bb8\u6211\u5728\u535a\u5ba2\u6587\u7ae0\u7684\u6807\u9898\u4e2d\u6cc4\u9732\u4e86\u5b83\u2026\u2026\uff09\u5728\u6570\u5b66\u8bfe\u4e0a\uff0c\u6211\u4eec\u901a\u5e38\u544a\u8bc9\u5b66\u751f\u8fd9\u662f\u4e00\u4e2a\u96c6\u5408\u3002\u4f46\u5728 Disco \u4e2d\uff0c\u2115 \u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u800c {1,2,3} \u4e4b\u7c7b\u7684\u4e1c\u897f\u662f\u4e00\u4e2a\u96c6\u5408\u3002\u5982\u679c\u4f60\u88ab\u544a\u77e5\u8fd9\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u8fd9\u79cd\u533a\u522b\u5bf9\u4f60\u6765\u8bf4\u4f1a\u663e\u5f97\u975e\u5e38\u5947\u602a\u548c\u4eba\u4e3a\u3002\u4f8b\u5982\uff0c\u73b0\u5728\u5728 Disco \u4e2d\uff0c\u60a8\u53ef\u4ee5\u8be2\u95ee {1,2} \u662f\u5426\u662f {1,2,3} \u7684\u5b50\u96c6\uff1a\u4f46\u662f\u5982\u679c\u60a8\u5c1d\u8bd5\u8be2\u95ee {1,2} \u662f\u5426\u662f \u2115 \u7684\u5b50\u96c6\uff0c\u60a8\u4f1a\u5f97\u5230\u4e00\u4e2a\u8bed\u6cd5\u9519\u8bef\uff1aDisco&gt; {1,2} \u2286 \u21151:10: |1 | {1,2} \u2286 \u2115 | ^\u5173\u952e\u5b57\u201c\u2115\u201d\u4e0d\u80fd\u7528\u4f5c\u6807\u8bc6\u7b26\n\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5404\u79cd\u65b9\u6cd5\u6765\u6539\u8fdb\u8fd9\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\u2014\u2014\u81f3\u5c11\uff0c\u8ba9\u5b83\u66f4\u4f18\u96c5\u5730\u5931\u8d25\u3002\u4f46\u57fa\u672c\u95ee\u9898\u4ecd\u7136\u5b58\u5728\uff1a\u7c7b\u578b\u548c\u96c6\u5408\u4e4b\u95f4\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff0c\u4e3a\u4ec0\u4e48\u5b83\u5f88\u91cd\u8981\uff1f\u5982\u679c\u5b83\u4e0d\u91cd\u8981\uff0c\u6211\u4eec\u5e94\u8be5\u6446\u8131\u5b83\uff1b\u5982\u679c\u5b83\u5f88\u91cd\u8981\uff0c\u90a3\u4e48\u6211\u9700\u8981\u80fd\u591f\u5411\u5b66\u751f\u89e3\u91ca\u5b83\uff01\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5b8c\u5168\u6446\u8131\u8fd9\u79cd\u533a\u522b\uff0c\u4f46\u8fd9\u4f3c\u4e4e\u4f1a\u76f4\u63a5\u5bfc\u81f4\u4f9d\u8d56\u7c7b\u578b\u7cfb\u7edf\u548c\u7ec6\u5316\u7c7b\u578b\u3002\u7ec6\u5316\u7c7b\u578b\u975e\u5e38\u9177\uff0c\u4f46\u6211\u771f\u7684\u4e0d\u60f3\u53bb\u90a3\u91cc\uff08Disco \u7684\u7c7b\u578b\u7cfb\u7edf\u5df2\u7ecf\u8db3\u591f\u590d\u6742\uff09\u3002\u7136\u800c\uff0c\u6211\u8ba4\u4e3a\u5b9e\u9645\u4e0a\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u533a\u522b\uff1b\u8fd9\u7bc7\u535a\u6587\u662f\u6211\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u660e\u786e\u6211\u5bf9\u533a\u522b\u7684\u60f3\u6cd5\u4ee5\u53ca\u6211\u8ba1\u5212\u5982\u4f55\u5411\u5b66\u751f\u89e3\u91ca\u5b83\u3002\u90a3\u4e48\u96c6\u5408\u548c\u7c7b\u578b\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f\u53e3\u53f7\u662f\u7c7b\u578b\u662f\u5185\u6db5\u7684\uff0c\u800c\u96c6\u5408\u662f\u5916\u5ef6\u7684\u3002 \uff08\u6211\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u5bf9\u6211\u7684\u5b66\u751f\u4f7f\u7528\u8fd9\u4e9b\u8bcd\u3002\uff09 \u90a3\u5c31\u662f\uff1a \u96c6\u5408\u7684\u7279\u5f81\u5728\u4e8e\u5173\u7cfb\uff1a\u6211\u4eec\u53ef\u4ee5\u95ee\u54ea\u4e9b\u9879\u76ee\u662f\u96c6\u5408\u7684\u5143\u7d20\uff0c\u54ea\u4e9b\u4e0d\u662f\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u7c7b\u578b\u7684\u7279\u5f81\u5728\u4e8e\u7c7b\u578b\u7684\u5143\u7d20\u662f\u5982\u4f55\u6784\u5efa\u7684\uff1a\u6211\u4eec\u53ef\u4ee5\u4ee5\u7279\u5b9a\u4e8e\u7c7b\u578b\u7684\u67d0\u4e9b\u65b9\u5f0f\u6784\u9020\u7c7b\u578b\u7684\u5143\u7d20\uff08\u5e76\u89e3\u6784\u5b83\u4eec\uff09\u3002\u8fd9\u770b\u8d77\u6765\u6709\u70b9\u5bf9\u79f0\uff0c\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\u5982\u679c\u60a8\u4e00\u5f00\u59cb\u751a\u81f3\u4e0d\u77e5\u9053\u5982\u4f55\u5236\u4f5c\u6216\u8c08\u8bba\u4efb\u4f55\u4e8b\u7269\uff0c\u60a8\u5c31\u4e0d\u80fd\u95ee\u4e8b\u7269\u662f\u5426\u662f\u96c6\u5408\u7684\u5143\u7d20\u3002\u6240\u4ee5\u7c7b\u578b\u5148\u4e8e\u96c6\u5408\uff1a\u7c7b\u578b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ee5\u6709\u5e8f\u65b9\u5f0f\u6784\u5efa\u7684\u503c\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\uff1b\u53ea\u6709\u8fd9\u6837\u6211\u4eec\u624d\u80fd\u5f00\u59cb\u6311\u9009\u67d0\u4e9b\u503c\u5c06\u5b83\u4eec\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\n\u5f53\u7136\uff0c\u8fd9\u4e00\u5207\u90fd\u4ee5\u67d0\u79cd\u7c7b\u578b\u8bba\u4e3a\u57fa\u7840\u3002\u5f53\u7136\uff0c\u6211\u77e5\u9053\u4eba\u4eec\u53ef\u4ee5\u5c06\u516c\u7406\u96c6\u5408\u8bba\u4f5c\u4e3a\u57fa\u7840\uff0c\u4ece\u7a7a\u96c6\u5efa\u7acb\u4e00\u5207\u3002\u4f46\u662f\u6211\u6b63\u5728\u6784\u5efa\u4e00\u79cd\u7c7b\u578b\u5316\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\uff0c\u6240\u4ee5\u6211\u5f53\u7136\u4ee5\u7c7b\u578b\u7406\u8bba\u4e3a\u57fa\u7840\uff01\u7136\u800c\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u51e0\u4e4e\u662f\u6bcf\u4e2a\u5728\u804c\u6570\u5b66\u5bb6\u5728\u5b9e\u8df5\u4e2d\u6240\u505a\u7684\u3002\u6ca1\u6709\u4eba\u771f\u6b63\u6839\u636e\u516c\u7406\u96c6\u5408\u8bba\u5de5\u4f5c\u6216\u601d\u8003\uff08\u9664\u4e86\u96c6\u5408\u8bba\u8005\uff09\u3002\u5373\u4f7f\u5728\u5178\u578b\u7684\u6570\u5b66\u8bfe\u4e0a\uff0c\u6709\u4e9b\u96c6\u5408\u4e5f\u5f88\u7279\u522b\u3002\u5728\u6211\u4eec\u8c08\u8bba\u96c6\u5408\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u5148\u4ecb\u7ecd\u7279\u6b8a\u96c6\u5408\uff0c\u4ee5\u4fbf\u6211\u4eec\u77e5\u9053\u4ec0\u4e48\u662f\uff0c\u4ec0\u4e48\u662f\u4ec0\u4e48\u3002\u5728\u8ba8\u8bba\u96c6\u5408\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u5148\u4ecb\u7ecd\u96c6\u5408\u4e0a\u7684\u7279\u6b8a\u7b1b\u5361\u5c14\u79ef\u8fd0\u7b97\uff0c\u4ee5\u4fbf\u6211\u4eec\u77e5\u9053\u5143\u7ec4\u662f\u4ec0\u4e48\u3002\u7b49\u7b49\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u7c7b\u578b\u89c6\u4e3a\u4e00\u79cd\u8bed\u8a00\uff0c\u7528\u4e8e\u63cf\u8ff0\u8fd9\u79cd\u5148\u9a8c\u7c7b\u7684\u7279\u6b8a\u96c6\u5408\u3002\u90a3\u4e48\u6211\u5230\u5e95\u8981\u5bf9\u6211\u7684\u5b66\u751f\u8bf4\u4e9b\u4ec0\u4e48\u5462\uff1f\u9996\u5148\uff0c\u5728\u4ecb\u7ecd\u8bed\u8a00\u65f6\uff0c\u6211\u4f1a\u544a\u8bc9\u4ed6\u4eec\u5404\u79cd\u5185\u7f6e\u7684\u539f\u59cb\u7c7b\u578b\uff0c\u4f8b\u5982\u81ea\u7136\u6570\u3001\u6709\u7406\u6570\u3001\u5e03\u5c14\u503c\u548c\u5b57\u7b26\u3002\u6211\u4e0d\u4f1a\u5bf9\u6b64\u6709\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff0c\u800c\u4e14\u6211\u8ba4\u4e3a\u6211\u4e0d\u9700\u8981\uff1a\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u50cf Python \u6216 Java \u8fd9\u6837\u7684\u5177\u6709\u539f\u59cb\u503c\u7c7b\u578b\u7684\u8bed\u8a00\u3002\u7136\u800c\uff0c\u5f53\u6211\u4eec\u5f00\u59cb\u8c08\u8bba\u96c6\u5408\u65f6\uff08\u901a\u5e38\u662f\u5728\u4ece\u547d\u9898\u903b\u8f91\u5f00\u59cb\u4e4b\u540e\u7684\u7b2c\u4e8c\u5355\u5143\uff09\uff0c\u6211\u4eec\u5c06\u96c6\u5408\u5b9a\u4e49\u4e3a\u503c\u7684\u96c6\u5408\uff0c\u6211\u5c06\u660e\u786e\u6307\u51fa\u4e0e\u7c7b\u578b\u7684\u76f8\u4f3c\u6027\u3002\u6211\u4f1a\u544a\u8bc9\u4ed6\u4eec\u7c7b\u578b\u662f\u7279\u6b8a\u7684\u5185\u7f6e\u96c6\u5408\uff0c\u5e26\u6709\u6784\u5efa\u5143\u7d20\u7684\u89c4\u5219\u3002\u6211\u4eec\u5c06\u7ee7\u7eed\u8ba8\u8bba\u4e0d\u76f8\u4ea4\u8054\u5408\u548c\u7b1b\u5361\u5c14\u79ef\uff0c\u5e76\u7ec3\u4e60\u6784\u5efa\u548c\u548c\u79ef\u7c7b\u578b\u7684\u5143\u7d20\u3002 \uff08\u5f53\u6211\u4eec\u7a0d\u540e\u8ba8\u8bba\u9012\u5f52\u65f6\uff0c\u4ed6\u4eec\u5c06\u56e0\u6b64\u62e5\u6709\u5f00\u59cb\u6784\u5efa\u9012\u5f52\u7c7b\u578b\uff08\u4f8b\u5982\u5217\u8868\u548c\u6811\uff09\u6240\u9700\u7684\u5de5\u5177\u3002\uff09\u53e6\u5916\u8981\u63d0\u5230\u7684\u5c06\u662f\u5f53\u6211\u4eec\u7f16\u5199\u96c6\u5408\u7c7b\u578b\u65f6\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff0c\u96c6\u5408\u2115\uff0c\u6211\u4eec\u5fc5\u987b\u5199\u4e0b\u5143\u7d20\u7684\u7c7b\u578b\u2014\u2014\u6362\u53e5\u8bdd\u8bf4\uff0c\u662f\u5b87\u5b99\uff0c\u6216\u8005\u4ece\u4e2d\u9009\u62e9\u5143\u7d20\u7684\u73af\u5883\u96c6\u3002\u5728\u4ecb\u7ecd\u96c6\u5408\u8bba\u65f6\uff0c\u4f20\u7edf\u4e0a\u53ea\u6709\u5728\u8c08\u5230\u96c6\u5408\u8865\u8fd0\u7b97\u65f6\u624d\u63d0\u5230\u5b87\u5b99\u96c6\u5408\uff1b\u4f46\u4e8b\u5b9e\u662f\uff0c\u6570\u5b66\u5bb6\u5728\u63cf\u8ff0\u7ed9\u5b9a\u96c6\u5408\u65f6\u603b\u662f\u4f1a\u60f3\u5230\u4e00\u4e9b\u5b87\u5b99\u3002\u73b0\u5728\uff0c\u56de\u5230 {1,2} \u2286 \u2115 \u7684\u4f8b\u5b50\uff0c\u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u8bed\u6cd5\u9519\u8bef\uff0c\u5b66\u751f\u4eec\u4ecd\u7136\u4f1a\u611f\u5230\u56f0\u60d1\uff0c\u6211\u5bf9\u5982\u4f55\u4f7f\u5b83\u8d77\u4f5c\u7528\u6709\u4e00\u4e9b\u60f3\u6cd5\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u662f\u5141\u8bb8\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u7c7b\u578b\uff08\u4f46\u4e0d\u80fd\u53cd\u8fc7\u6765\uff01\uff09\uff0c\u4f7f\u7528 T : Set T\u3002\u5982\u679c\u6211\u544a\u8bc9\u4ed6\u4eec\u7c7b\u578b\u662f\u7279\u6b8a\u7684\u96c6\u5408\uff0c\u90a3\u4e48\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u4ed6\u4eec\u4f1a\u671f\u671b\u80fd\u591f\u4f7f\u7528\u5b83\u4eec\u50cf\u8fd9\u6837\uff01\u7136\u800c\uff0c\u8fd9\u662f\u4e00\u4e2a\u6781\u5176\u91cd\u8981\u7684\u53d8\u5316\uff1a\u8fd9\u610f\u5473\u7740 Disco \u73b0\u5728\u80fd\u591f\u8868\u793a\u65e0\u9650\u96c6\u5408\uff0c\u9700\u8981\u901a\u8fc7\u6df1\u5ea6\u5d4c\u5165\u5728\u5185\u90e8\u8868\u793a\u96c6\u5408\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u5730\u5b58\u50a8\u5b83\u4eec\u7684\u5143\u7d20\uff08\u5c31\u50cf\u76ee\u524d\u7684\u60c5\u51b5\uff09\u3002\u4f8b\u5982\uff0c 2 \u2208 (\u2115 \\ {3,5}) \u5e94\u8be5\u8bc4\u4f30\u4e3a\u771f\uff0c\u4f46\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u4ec5\u4ec5\u679a\u4e3e \u2115 \\ {3,5} \u7684\u6240\u6709\u5143\u7d20\uff0c\u56e0\u4e3a\u6709\u65e0\u7a77\u591a\u4e2a\u3002\u4e5f\u8bb8\u5728\u4ee5\u540e\u7684\u5e16\u5b50\u4e2d\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u4e2a\uff01\u6b64\u6761\u76ee\u53d1\u5e03\u5728\u9879\u76ee\u3001\u6559\u5b66\u548c\u6807\u8bb0\u57fa\u7840\u3001\u8bed\u8a00\u3001\u6570\u5b66\u3001\u6559\u5b66\u6cd5\u3001\u7f16\u7a0b\u3001\u96c6\u5408\u3001\u7c7b\u578b\u4e2d\u3002\u4e3a\u6c38\u4e45\u94fe\u63a5\u6dfb\u52a0\u4e66\u7b7e\u3002", "note_en": "For several years I have been designing and implementing a  functional teaching language especially for use in the context of a Discrete Mathematics course. The idea is for students to be exposed to some functional and statically-typed programming early in their computer science education, and to give them a fun and concrete way to see the connections between the concepts they learn in a Discrete Math course and computation. I am  not the first to think of combining FP + Discrete Math, but I think there is an opportunity to do it really well with a language designed expressly for the purpose. (And, who am I kidding, designing and implementing a language is just plain fun.)\n Of course the language has an expressive static type system, with base types like natural numbers, rationals, Booleans, and Unicode characters, as well as sum and product types, lists, strings, and the ability to define arbitrary recursive types. It also has built-in types and syntax for finite sets. For example,\n  (Incidentally, I will be using Unicode syntax since it looks nice, but there are also ASCII equivalents for everything.) Sets support the usual operations like union, intersection, and difference, as well as set comprehension notation. The intention is that this will provide a rich playground for students to play around with the basic set theory that is typically taught in a discrete math class.\n  Hopefully the above all seems pretty normal if you are used to programming in a statically typed language. Unfortunately, there is something here that I suspect is going to be deeply confusing to students. I am so used to it that it took me a long time to realize what was wrong; maybe you have not realized it either. (Well, perhaps I gave it away with the title of the blog post\u2026)\n In a math class, we typically tell students that   is a  set. But in Disco,  \u2115 is a  type and something like  {1,2,3} is a set. If you have been told that   is a set, the distinction is going to seem very weird and artificial to you. For example, right now in Disco, you can ask whether  {1,2} is a subset of  {1,2,3}:\n  But if you try to ask whether  {1,2} is a subset of  \u2115, you get a syntax error:\n Disco&gt; {1,2} \u2286 \u21151:10: |1 | {1,2} \u2286 \u2115 | ^keyword &#34;\u2115&#34; cannot be used as an identifier\n Now, we could try various things to improve this particular example\u2014at the very least, make it fail more gracefully. But the fundamental question remains: what is the distinction between types and sets, and why is it important? If it\u2019s not important, we should get rid of it; if it is important, then I need to be able to explain it to students!\n We could try to completely get rid of the distinction, but this seems like it would lead directly to a dependent type system and refinement types. Refinement types  are super cool but I really don\u2019t think I want to go there (Disco\u2019s type system is  already complicated enough).\n However, I think there actually is an important distinction; this blog post is my first attempt at crystallizing my thoughts on the distinction and how I plan to explain it to students.\n  So what is the difference between sets and types? The slogan is that types are  intensional, whereas sets are  extensional. (I won\u2019t actually use those words with my students.) That is:\n Sets are characterized by the   relation: we can  ask which items are elements of a set and which are not.\n Types, on the other hand, are characterized by how elements of the type are built: we can  construct elements of a type (and  deconstruct them) in certain ways specific to the type.\n This seems kind of symmetric, but it is not. You can\u2019t ask whether a thing is an element of a set if you don\u2019t know how to even make or talk about any things in the first place. So types are prior to sets: types provide a universe of values, constructed in orderly ways, that we can work with; only then can we start picking out certain values to place them in a set.\n Of course, this all presupposes some kind of type theory as foundational. Of course I am aware that one can instead take axiomatic set theory as a foundation and build everything up from the empty set. But I\u2019m building a typed functional programming language, so of course I\u2019m taking type theory as foundational! More importantly, however, it\u2019s what almost every working mathematician does  in practice. No one actually works or thinks in terms of axiomatic set theory (besides set theorists). Even in a typical math class, some sets are special. Before we can talk about the set  , we have to introduce the special set   so we know what  ,  , and   are. Before we can talk about the set   we have to introduce the special Cartesian product operation on sets so we know what tuples are. And so on. We can think of types as a  language for describing this prior class of special sets.\n  So what will I actually say to my students? First of all, when introducing the language, I will tell them about various built-in primitive types like naturals, rationals, booleans, and characters. I won\u2019t make a big deal about it, and I don\u2019t think I will need to: for the most part they will have already seen a language like Python or Java with types for primitive values.\n When we get to talking about sets, however (usually the second unit, after starting with propositional logic), we will define sets as collections of values, and I will explicitly point out the similarity to types. I will tell them that types are  special built-in sets with rules for building their elements. We will go on to talk about disjoint union and Cartesian product, and practice building elements of sum and product types. (When we later get to recursion, they will therefore have the tools they need to start building recursive types such as lists and trees.)\n The other thing to mention will be the way that when we write the type of a set, as in,  Set \u2115, we have to write down the type of the elements\u2014in other words, the  universe, or ambient set from which the elements are chosen. When introducing set theory, traditionally one mentions universe sets only when talking about the set complement operation; but the fact is that mathematicians always have some universe set in mind when describing a given set.\n Now, coming back to the example of  {1,2} \u2286 \u2115, it would still be confusing for students if this is a syntax error, and I have some ideas about how to make it work. Briefly, the idea is to allow types to be used in expressions (but not the other way around!), with  T : Set T. If I tell them that types are special sets, then logically they will expect to be able to use them as such! However, this is an extremely nontrivial change: it means that Disco would now be able to represent  infinite sets, requiring sets to be internally represented via a deep embedding, rather than simply storing their elements (as is currently the case). For example,  2 \u2208 (\u2115 \\ {3,5}) should evaluate to  true, but we obviously can\u2019t just enumerate all the elements of  \u2115 \\ {3,5} since there are infinitely many. More on this in a future post, perhaps!\n    This entry was posted in  projects,  teaching and tagged  foundations,  language,  math,  pedagogy,  programming,  sets,  types. Bookmark the  permalink.", "posttime": "2021-07-25 13:16:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u7f16\u7a0b,\u6570\u5b66,sets,\u7c7b\u578b", "title": "\u6570\u5b66\u548c\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7c7b\u578b\u4e0e\u96c6\u5408", "title_en": "Types versus sets in math and programming languages", "transed": 1, "url": "https://byorgey.wordpress.com/2021/06/24/types-versus-sets-in-math-and-programming-languages/", "via": "", "real_tags": ["\u7f16\u7a0b", "\u6570\u5b66", "sets", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069592, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u60f3\u8c61\u4e00\u67b6\u98de\u884c\u5668\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u8c61\u4e00\u67b6\u6bd4\u7a7a\u6c14\u91cd\u7684\u98de\u884c\u5668\uff0c\u4ee5\u67d0\u79cd\u65b9\u5f0f\u7528\u673a\u7ffc\u6216\u87ba\u65cb\u6868\u4fdd\u6301\u5728\u9ad8\u7a7a\u3002\u91cd\u4e8e\u7a7a\u6c14\u7684\u98de\u884c\u5728\u6709\u5173\u822a\u7a7a\u7684\u8ba8\u8bba\u4e2d\u5360\u4e3b\u5bfc\u5730\u4f4d\u3002 \u201c\u53ef\u6301\u7eed\u201d\u98de\u884c\u5668\u88ab\u8bbe\u8ba1\u5f97\u5c3d\u53ef\u80fd\u8f7b\uff08\u540c\u65f6\u4ecd\u7136\u6bd4\u7a7a\u6c14\u91cd\uff09\uff0c\u56e0\u6b64\u5b83\u4eec\u9700\u8981\u66f4\u5c11\u7684\u80fd\u91cf\u6765\u4f7f\u7528\u4efb\u4f55\u53ef\u518d\u751f\u80fd\u6e90\u6765\u63d0\u5347\u3002\u8fd9\u4e9b\u673a\u5668\u5305\u62ec\u4eba\u529b\u98de\u673a\uff0c\u4f8b\u5982\u4f7f\u7528\u8e0f\u677f\u65cb\u8f6c\u87ba\u65cb\u6868\u7684\u98de\u673a\u3002\u66f4\u8f7b\u7684\u4ecd\u7136\u662f\u98ce\u7b5d\u548c\u6ed1\u7fd4\u673a\uff0c\u5b83\u4eec\u4ecd\u7136\u6bd4\u7a7a\u6c14\u91cd\uff0c\u4f46\u4f9d\u9760\u7a7a\u6c14\u963b\u529b\u548c\u5468\u56f4\u8f83\u8f7b\u7684\u7a7a\u6c14\u98de\u884c\u3002\u8f83\u5c11\u8ba8\u8bba\u7684\u662f\u98de\u884c\u5668\u6bd4\u5b83\u4eec\u98de\u8fc7\u7684\u7a7a\u6c14\u8f7b\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u6750\u6599\u548c\u4e58\u5ba2\u7684\u91cd\u91cf\u88ab\u5b83\u4eec\u5305\u542b\u7684\u70ed\u7a7a\u6c14\u6216\u8f7b\u6c14\u4f53\u62b5\u6d88\u3002 [1] \u4e5f\u8bb8\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5927\u591a\u6570\u4eba\u90fd\u4e58\u5750\u5ba2\u673a\u800c\u4e0d\u662f\u9f50\u67cf\u6797\u98de\u8247\u3002\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u4f7f\u8f7b\u4e8e\u7a7a\u6c14\u7684\u98de\u884c\u53ef\u6301\u7eed\u53d1\u5c55\u5f88\u7b80\u5355\uff1a\u7528\u9633\u5149\u52a0\u70ed\u88c5\u6ee1\u7a7a\u6c14\u7684\u5bb9\u5668\uff0c\u4f7f\u5176\u4e0a\u5347\u3002 2020 \u5e74 1 \u6708\uff0c\u83b1\u8482\u897f\u4e9a\u00b7\u8bfa\u57c3\u7c73\u00b7\u9a6c\u514b\u65af (Leticia Noemi Marqu\u00e9s) \u4e58\u5750 Aerocene Pacha \u592a\u9633\u80fd\u6c14\u7403\u81ea\u7531\u98de\u884c\uff0c\u8fd9\u662f\u9996\u4e2a\u83b7\u5f97\u56fd\u9645\u822a\u7a7a\u8054\u5408\u4f1a\u8ba4\u8bc1\u7684\u5168\u592a\u9633\u80fd\u3001\u65e0\u7ef3\u8f7d\u4eba\u98de\u884c\u3002\u4ee5\u524d\u7684\u6b64\u7c7b\u98de\u884c\u672a\u7ecf\u8ba4\u8bc1\u6216\u4f9d\u8d56\u4e19\u70f7\u71c3\u70e7\u5668\u6216\u5145\u6c14\u53d1\u751f\u5668 [2]\u3002 Aerocene Pacha \u4e0d\u662f\u4ece\u592a\u9633\u80fd\u7535\u6c60\u677f\u6216\u7535\u6c60\u800c\u662f\u76f4\u63a5\u5438\u6536\u5728\u4fe1\u5c01\uff08\u6c14\u7403\u7684\u7ec7\u7269\uff09\u4e2d\u7684\u592a\u9633\u80fd\u98de\u884c\u3002\u592a\u9633\u6c14\u7403\u662f\u70ed\u6c14\u7403\u7684\u4e00\u4e2a\u5b50\u7c7b\uff0c\u5b83\u4e0a\u5347\u662f\u56e0\u4e3a\u91cc\u9762\u7684\u70ed\u7a7a\u6c14\u6bd4\u5916\u9762\u7684\u7a7a\u6c14\u5bc6\u5ea6\u5c0f\u3002\u70ed\u6c14\u7403\u548c\u6c26\u6c14\u7403\u662f\u5728 18 \u4e16\u7eaa\u7684\u6cd5\u56fd\u5b9e\u9a8c\u4e2d\u5f00\u53d1\u51fa\u6765\u7684\u3002 1783 \u5e74\uff0c\u822a\u5929\u5458\u63a5\u8fde\u53d6\u5f97\u4e86\u4e00\u7cfb\u5217\u7684\u70ed\u6c14\u7403\u7b2c\u4e00\u6b21\u3002 11 \u6708\uff0cMontgolfier \u5144\u5f1f\u53d1\u5c04\u4e86\u7b2c\u4e00\u4e2a\u8f7d\u6709\u52a8\u7269\u7684\u70ed\u6c14\u7403\uff08\u5185\u542b\u9e2d\u5b50\u3001\u516c\u9e21\u548c\u7f8a\uff09\u3002 9 \u6708\uff0cPilatre de Rozier \u548c Marquis D&#39;Arlandes \u6210\u4e3a\u7b2c\u4e00\u6279\u5728\u70ed\u6c14\u7403\u4e2d\u81ea\u7531\u98de\u884c\u7684\u4eba\u3002\u6700\u540e\u4e00\u4e2a\u6c14\u7403\u98de\u884c\u7684\u98ce\u9669\u662f\u4fe1\u5c01\u4f1a\u88ab\u7528\u6765\u52a0\u70ed\u70ed\u7a7a\u6c14\u7684\u4f59\u70ec\u70b9\u71c3\u3002 [1] \u592a\u9633\u6c14\u7403\u5728\u8fd9\u6bb5\u5386\u53f2\u4e2d\u7b49\u5f85\u7740\u3001\u6f5c\u4f0f\u7740\u3002\u53ef\u4ee5\u8bf4\uff0c\u592a\u9633\u6c14\u7403\u662f\u5728 1794 \u5e74\u7684\u4e00\u6b21\u4e8b\u6545\u4e2d\u53d1\u660e\u7684\uff0c\u5f53\u65f6\u6cd5\u56fd\u7684\u4e00\u4e2a\u70ed\u6c14\u7403\u6446\u8131\u4e86\u7cfb\u7ef3\uff0c\u5b8c\u5168\u4f9d\u9760\u592a\u9633\u7684\u70ed\u91cf\u5347\u5230\u4e86\u7a7a\u4e2d\u3002 [2] \u968f\u7740\u6c14\u7403\u53d1\u660e\u8005\u5f00\u59cb\u8bbe\u8ba1\u7531\u5185\u71c3\u673a\u9a71\u52a8\u7684\u98de\u8247\uff0c\u5982\u9f50\u67cf\u6797\u98de\u8247\uff0c\u8fd9\u79cd\u73b0\u8c61\u7684\u6f5c\u529b\u6ca1\u6709\u88ab\u6ce8\u610f\u5230\u3002\u5728 1960 \u5e74\u4ee3\uff0cEd Yost \u901a\u8fc7\u589e\u52a0\u4e19\u70f7\u71c3\u70e7\u5668\u5bf9\u70ed\u6c14\u7403\u8fdb\u884c\u4e86\u6539\u8fdb\uff0c\u4e19\u70f7\u71c3\u70e7\u5668\u662f\u5f53\u4eca\u6700\u5e38\u7528\u7684\u71c3\u6599\u6765\u6e90\u3002\u706b\u707e\u98ce\u9669\u7ee7\u7eed\u56f0\u6270\u7740\u6700\u8fd1\u7684\u70ed\u6c14\u7403\uff0c\u4fc3\u4f7f\u4e0d\u6d89\u53ca\u71c3\u70e7\u7684\u66ff\u4ee3\u8bbe\u8ba1\u3002\u5728 1990 \u5e74\u4ee3\uff0c\u4e9a\u5386\u676d\u5fb7\u7f57\u00b7\u4e4c\u91cc\u97e6 (Alejandro Uribe) \u5c06\u5df4\u897f\u793e\u533a\u4e3a\u8282\u65e5\u5efa\u9020\u7684\u65e0\u4eba\u7eb8\u6c14\u7403\u6539\u9020\u6210\u5b8c\u5168\u592a\u9633\u80fd\uff0c\u4ee5\u6d88\u9664\u6c14\u7403\u70b9\u71c3\u68ee\u6797\u706b\u707e\u7684\u5371\u9669\u3002\u592a\u9633\u80fd\u6c14\u7403\u7684\u539f\u7406\u4e0e\u71c3\u70e7\u70ed\u6c14\u7403\u76f8\u540c\uff0c\u4f46\u7528\u5916\u58f3\u5438\u6536\u9633\u5149\u6765\u4ee3\u66ff\u71c3\u70e7\u5668\u3002\u4ece 1972 \u5e74\u5f00\u59cb\uff0cDominic Michaelis \u8bbe\u8ba1\u5e76\u6d4b\u8bd5\u4e86\u4e00\u7cfb\u5217\u8f7d\u4eba\u592a\u9633\u80fd\u6c14\u7403\uff0c\u91cc\u9762\u6709\u900f\u660e\u7684\u805a\u916f\u5916\u58f3\u548c\u9ed1\u8272\u7ec7\u7269\u4ee5\u5438\u6536\u70ed\u91cf\u3002 [2] Julian Nott \u4f7f\u7528\u5176\u4e2d\u4e4b\u4e00\u4e8e 1981 \u5e74\u6210\u529f\u98de\u8d8a\u82f1\u5409\u5229\u6d77\u5ce1\u3002\u8fd9\u4e9b\u98de\u884c\u5f97\u5230\u4e19\u70f7\u71c3\u70e7\u5668\u7684\u534f\u52a9\u3002\u7279\u96f7\u897f\u00b7\u5df4\u6069\u65af (Tracy Barnes) \u4e8e 1973 \u5e74\u4f7f\u7528\u56db\u9762\u4f53\u5f62\u72b6\u7684\u5355\u5c42\u5916\u58f3\u8fdb\u884c\u4e86\u7b2c\u4e00\u6b21\u5168\u592a\u9633\u80fd\u6c14\u7403\u98de\u884c\u3002 [3] \u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u6c14\u7403\u662f\u5982\u4f55\u81a8\u80c0\u7684\u3002 Aerocene Pacha \u662f\u6700\u65b0\u7684\u8f7d\u4eba\u3001\u65e0\u7ef3\u3001\u8868\u9762\u4e0a\u5b8c\u5168\u72ec\u7acb\u4e8e\u5316\u77f3\u71c3\u6599\u7684\u592a\u9633\u80fd\u6c14\u7403\u98de\u884c\u3002\u8be5\u56e2\u961f\u901a\u8fc7\u4f7f\u7528\u8e0f\u677f\u52a8\u529b\u8fd0\u884c\u7684\u98ce\u6247\u4f7f\u4fe1\u5c01\u81a8\u80c0\u3002\u8f7d\u4eba\u592a\u9633\u80fd\u6c14\u7403\u7ed3\u5408\u4e86\u7528\u4e8e\u79d1\u5b66\u7814\u7a76\u7684\u71c3\u70e7\u5668\u52a0\u70ed\u6c14\u7403\u548c\u65e0\u4eba\u592a\u9633\u80fd\u6c14\u7403\u7684\u6280\u672f\u3002\u540e\u8005\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f 1977 \u5e74\u7684 Montgolfi\u00e8re Infrarouge (MIR)\uff0c\u5b83\u5728\u5e73\u6d41\u5c42\u4e0b\u5c42\u5faa\u73af\uff0c\u767d\u5929\u9760\u9633\u5149\u98de\u884c\uff0c\u665a\u4e0a\u9760\u7ea2\u5916\u7ebf\u98de\u884c\u3002 [2] \u7531\u4e8e\u7a7a\u6c14\u7a00\u8584\uff0c\u7ea2\u5916\u7ebf\u8db3\u4ee5\u7ef4\u6301\u5927\u7ea6 20 \u516c\u91cc\u7684\u9ad8\u5ea6\u3002 [4] \u6700\u8fd1\u7684\u4f8b\u5b50\u4f7f\u7528\u4e86\u66f4\u7b80\u5355\u7684\u6280\u672f\u2014\u2014Heliotrope \u592a\u9633\u80fd\u70ed\u6c14\u7403\u7684\u5236\u9020\u6210\u672c\u7ea6\u4e3a 30 \u7f8e\u5143\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fdd\u6301\u5e95\u90e8\u6253\u5f00\u5e76\u6765\u56de\u8d70\u52a8\u76f4\u5230\u5145\u6ee1\u7a7a\u6c14\u6765\u201c\u5145\u6c14\u201d\u3002\u7814\u7a76\u4eba\u5458\u8fd8\u63a2\u7d22\u4e86\u4f7f\u7528\u7cfb\u7559\u592a\u9633\u80fd\u6c14\u7403\u53d1\u7535\u7684\u6f5c\u529b\u3002\u7531\u7f57\u4f2f\u7279\u00b7\u683c\u96f7\u7eb3 (Robert Grena) \u8bbe\u8ba1\u7684\u4e00\u4e2a\u98ce\u80fd\u592a\u9633\u80fd\u7cfb\u7edf\u7531\u4e00\u5c0f\u888b\u6c22\u6c14\u8f85\u52a9\uff0c\u5e76\u901a\u8fc7\u5728\u9633\u5149\u4e0b\u201c\u5145\u7535\u201d\u4e00\u6bb5\u65f6\u95f4\u8fdb\u884c\u9884\u70ed\u3002 [5] \u5f53\u5b83\u88ab\u91ca\u653e\u65f6\uff0c\u6c14\u7403\u4ece\u5b83\u7684\u8d77\u951a\u673a\u4e0a\u89e3\u5f00\u5b83\u7684\u7ef3\u7d22\uff0c\u5b83\u4e3a\u53d1\u7535\u673a\u63d0\u4f9b\u52a8\u529b\u3002\u98ce\u529b\u901a\u8fc7\u6c34\u5e73\u62c9\u52a8\u6c14\u7403\u548c\u7ef3\u7d22\u6765\u53d1\u6325\u4f5c\u7528\u3002 Grena \u63d0\u51fa\u4e86\u5728\u6c14\u7403\u6700\u9ad8\u9ad8\u5ea6\u653e\u6c14\u7684\u7cfb\u7edf\uff0c\u8fd9\u6837\u80fd\u91cf\u5c31\u4e0d\u4f1a\u5728\u4e0b\u964d\u65f6\u56e0\u7a7a\u6c14\u6216\u98ce\u963b\u529b\u800c\u635f\u5931\u3002\u8fd9\u4e9b\u88c5\u7f6e\u4e2d\u6700\u7b80\u5355\u7684\u4e00\u79cd\u662f\u7531\u56fa\u5b9a\u5728\u4fe1\u5c01\u4e0a\u7684\u6746\u7ec4\u6210\uff0c\u8fd9\u4e9b\u6746\u5728\u4e0a\u5347\u65f6\u88ab\u5632\u8bbd\u7684\u7ef3\u5b50\u4fdd\u6301\u5f2f\u66f2\uff0c\u5e76\u5728\u4e0b\u964d\u65f6\u91ca\u653e\u5f20\u529b\u65f6\u62c9\u76f4\uff0c\u5c06\u4fe1\u5c01\u62c9\u7d27\u3002\nAerocene \u98de\u884c\u53ca\u5176\u540c\u7c7b\u98de\u884c\u662f\u5426\u9884\u793a\u7740\u6211\u4eec\u66f4\u53ef\u80fd\u4e58\u5750\u592a\u9633\u6c14\u7403\u800c\u4e0d\u662f\u5ba2\u673a\u98de\u884c\u7684\u65f6\u4ee3\uff1f\u56db\u5341\u5e74\u524d\uff0c\u6731\u5229\u5b89\u00b7\u8bfa\u7279 (Julian Nott) \u6a2a\u6e21\u82f1\u5409\u5229\u6d77\u5ce1\u65f6\u8bc1\u660e\u4e86\u901a\u8fc7\uff08\u4e3b\u8981\u662f\uff09\u592a\u9633\u80fd\u6c14\u7403\u8fdb\u884c\u56fd\u9645\u65c5\u884c\u662f\u53ef\u80fd\u7684\u3002 Nott\u4ece\u591a\u4f5b\u897f\u5317\u7684\u4e00\u4e2a\u70b9\u98de\u5230\u52a0\u6765\u9644\u8fd1\u7684Tournehem sur la Hem\uff0c\u98de\u884c\u8ddd\u79bb\u8d85\u8fc760\u516c\u91cc\u3002 Aerocene \u592a\u9633\u6c14\u7403\u98de\u884c\u8ddd\u79bb\u4e3a 2.55 \u516c\u91cc\uff08\u4ee5\u4e4c\u9e26\u5728\u8d77\u98de\u548c\u7740\u9646\u70b9\u4e4b\u95f4\u98de\u884c\u65f6\u6d4b\u91cf\uff09\u7684\u5b98\u65b9\u4e16\u754c\u7eaa\u5f55\u5e76\u4e0d\u90a3\u4e48\u4ee4\u4eba\u9f13\u821e\u3002\u5927\u591a\u6570\u592a\u9633\u6c14\u7403\u5c1d\u8bd5\uff0c\u7279\u522b\u662f\u7528\u4e8e\u79d1\u5b66\u76ee\u7684\uff0c\u90fd\u96c6\u4e2d\u5728\u9ad8\u5ea6\u800c\u4e0d\u662f\u8ddd\u79bb\u4e0a\uff0c\u56e0\u6b64\u4ecd\u6709\u672a\u5f00\u53d1\u7684\u6f5c\u529b\u3002\u5982\u679c\u592a\u9633\u80fd\u6280\u672f\u80fd\u591f\u50cf\u4e19\u70f7\u71c3\u70e7\u5668\u4e00\u6837\u53ef\u9760\uff0c\u5b83\u4eec\u5c31\u53ef\u4ee5\u8f7d\u5ba2\u6a2a\u6e21\u592a\u5e73\u6d0b\uff0c\u8fd9\u662f\u7531 Per Lindstrand \u548c Richard Branson \u4e8e 1991 \u5e74\u5728 46 \u5c0f\u65f6 15 \u5206\u949f\u5185\u521b\u9020\u7684 7671 \u516c\u91cc\u7684\u70ed\u6c14\u7403\u8ddd\u79bb\u8bb0\u5f55\uff08\u66f4\u957f\u7684\u98de\u884c\u8ddd\u79bb\uff09\u5df2\u5c06\u70ed\u7a7a\u6c14\u4e0e\u5176\u4ed6\u6c14\u4f53\u6280\u672f\u76f8\u7ed3\u5408\uff09\u3002 [6] \u8fd9\u5c06\u4e0e Kanellos Kanellopoulos \u5728 1988 \u5e74\u521b\u9020\u7684 115 \u516c\u91cc\u7684\u4eba\u7c7b\u98de\u884c\u5409\u5c3c\u65af\u4e16\u754c\u7eaa\u5f55\u76f8\u5ab2\u7f8e\u3002 [7] \u95ee\u9898\u4ecd\u7136\u662f\u5168\u592a\u9633\u80fd\u6c14\u7403\u9700\u8981\u9633\u5149\uff0c\u800c\u5728\u957f\u9014\u65c5\u884c\u4e2d\u5929\u7a7a\u5f88\u5c11\u6709\u4e91\u3002 .\u4efb\u4f55\u57fa\u4e8e\u592a\u9633\u80fd\u6c14\u7403\u7684\u8fd0\u8f93\u7cfb\u7edf\u90fd\u5fc5\u987b\u662f\u673a\u4f1a\u4e3b\u4e49\u7684\uff0c\u98de\u884c\u5458\u7b49\u5f85\u5b89\u5168\u6761\u4ef6\uff0c\u5e76\u53ef\u80fd\u5c06\u65c5\u7a0b\u5206\u6210\u77ed\u9636\u6bb5\u3002 [1] \u798f\u514b\u65af\uff0cJ.\uff082008 \u5e74\uff09\u3002\u6c14\u7403\u3001\u98de\u8247\u548c\u98ce\u7b5d\u2014\u2014\u6bd4\u7a7a\u6c14\u8f7b\uff1a\u8fc7\u53bb\u3001\u73b0\u5728\u548c\u672a\u6765\u3002\u822a\u7a7a\u6742\u5fd7 (1968), 112(1133), 421-429\u3002 doi:10.1017/S0001924000002384 [2] Aerocene Community, 2021. \u592a\u9633\u70ed\u6c14\u7403\u548c Aerocene \u7b80\u53f2\u3002 [\u5728\u7ebf] Aerocene.org\u3002\u53ef\u5728\uff1a&lt; https://aerocene.org/a-brief-solar-ballooning-and-aerocene/#&gt; [2021 \u5e74 7 \u6708 11 \u65e5\u8bbf\u95ee]\u3002 [3] \u5e03\u6717\uff0cD.\uff0c\uff081974\uff09\u3002 Sunstat\uff1a\u4e58\u7740\u9633\u5149\u7684\u6c14\u7403\u3002\u70ed\u6c14\u7403\uff0cXI(2)\uff0c\u7b2c 5-9 \u9875\u3002\u53ef\u5728\uff1a&lt; https://www.brisbanehotairballooning.com.au/wp-content/uploads/2015/02/SunstatArticleinBallooning.pdf&gt; [2021 \u5e74 7 \u6708 11 \u65e5\u8bbf\u95ee]\u3002 [4] Bowman, D.\u3001Norman, P.\u3001Pauken, M.\u3001Albert, S.\u3001Dexheimer, D.\u3001Yang, X.\u3001Krishnamoorthy, S.\u3001Komjathy, A. \u548c Cutts, J.\uff0c\uff082020 \u5e74\uff09 \uff09\u3002\u4f7f\u7528 Heliotrope \u592a\u9633\u80fd\u70ed\u6c14\u7403\u8fdb\u884c\u591a\u5c0f\u65f6\u5e73\u6d41\u5c42\u98de\u884c\u3002\u5927\u6c14\u4e0e\u6d77\u6d0b\u6280\u672f\u6742\u5fd7\uff0c37(6)\uff0c\u7b2c 1051-1066 \u9875\u3002 [5] Grena, R., (2013)\u3002\u592a\u9633\u80fd\u6c14\u7403\u4f5c\u4e3a\u6df7\u5408\u592a\u9633\u80fd-\u98ce\u80fd\u7cfb\u7edf\u3002\u592a\u9633\u80fd\uff0c88\uff0c\u7b2c 215-226 \u9875\u3002 https://doi.org/10.1016/j.solener.2012.11.021\n[6] \u00c5kerstedt, H., nd CIA \u8457\u540d\u7684\u98de\u884c\u548c\u8868\u6f14\uff1a\u7b2c 10 \u90e8\u5206\uff0c1991-1995\u3002 [\u5728\u7ebf] \u56fd\u9645\u822a\u7a7a\u8054\u5408\u4f1a\u3002\u53ef\u5728\uff1a&lt; https://www.fai.org/sites/default/files/documents/rpt_10_1991-1995.pdf&gt; [2021 \u5e74 7 \u6708 11 \u65e5\u8bbf\u95ee]\u3002 [7] \u5409\u5c3c\u65af\u4e16\u754c\u7eaa\u5f55\u3002\uff0c\uff08nd\uff09\u3002\u6700\u957f\u7684\u4eba\u529b\u98de\u884c\uff08\u8ddd\u79bb\uff09\u3002\u53ef\u5728\uff1a&lt; https://www.guinnessworldrecords.com/world-records/longest-human-powered-flight-%28distance%29&gt; [2021 \u5e74 7 \u6708 11 \u65e5\u8bbf\u95ee]\u3002 [8] Reay, D. (1977)\u3002 \u201c\u4eba\u529b\u65cb\u7ffc\u673a\u548c\u2018\u9e1f\u4eba\u2019\u7684\u6301\u4e45\u6027\u201d\uff0c\u8f7d\u4e8e\uff1a\u4eba\u529b\u98de\u884c\u7684\u5386\u53f2\uff0c\u7b2c 249-262 \u9875\u3002 https://doi.org/10.1016/C2013-0-02894-0", "note_en": "If you picture a flying machine, you probably imagine a craft which is heavier than air, somehow kept aloft with wings or propellers. Heavier-than-air flight dominates discourses about aviation. \u201cSustainable\u201d crafts are designed to be as light as possible (whilst remaining heavier than air), so that they require less energy from whatever renewable source they use for lift. These machines include human-powered planes such as those using pedals to rotate a propeller. Lighter still are kites and gliders, which remain heavier than air, but rely on air resistance and lighter air around them to fly.\n Less discussed are flying machines which are lighter than the air they fly through because the weight of their materials and passengers is counterbalanced by the hot air or light gases they contain. [1] Perhaps this is because most of us experience flight in passenger airliners, not Zeppelins. In theory, making lighter-than-air flight sustainable is simple: heat a container full of air with sunlight so that it rises. In January 2020, Leticia Noemi Marqu\u00e9s flew freely in the  Aerocene Pacha solar balloon, the first F\u00e9d\u00e9ration A\u00e9ronautique Internationale certified fully-solar, untethered, manned flight. Previous flights of this kind went uncertified or relied on propane burners or inflation generators [2]. Aerocene Pacha flies on solar energy not from solar panels or batteries but absorbed directly in the envelope (the fabric of the balloon).\n Solar balloons are a subcategory of hot air balloons, which rise because the hot air inside is less dense than the external air. Hot air and helium balloons were developed in 18th century French experiments. In quick succession in 1783, aeronauts achieved a series of firsts for ballooning. In November, the Montgolfier brothers launched the first animal-carrying hot air balloon (containing a duck, rooster and sheep). In September Pilatre de Rozier and Marquis D\u2019Arlandes were the first people to fly untethered in a hot air balloon. This last balloon flew with the risk that the envelope would ignite from the embers which were used to heat the hot air. [1]\n  The solar balloon awaited, latent, within this history. It could be said that the solar balloon invented itself in an accident in 1794, when a hot air balloon in France freed itself from its tethers and rose into the air purely from the heat of the sun. [2] The potential of this phenomena went unnoticed as balloon inventors moved on to design airships powered by the internal combustion engine, like Zeppelins. In the 1960s, Ed Yost refined the hot air balloon with the addition of a propane burner, which the fuel source used most commonly today. The risk of fire continues to haunt recent hot air balloons, prompting alternative designs which do not involve combustion. In the 1990s, Alejandro Uribe adapted the unmanned paper balloons Brazilian communities build for festivals to be fully solar to eliminate the danger of balloon-lit forest fires.\n Solar balloons rely on the same principle as combustion hot air balloons, but with sunlight absorbed by the envelope to replace the burner. From 1972, Dominic Michaelis designed and tested a series of manned solar balloons with transparent polyester envelopes and black fabric inside to absorb heat. [2] Julian Nott used one of these to successfully fly across the English Channel in 1981. These flights were assisted by propane burners. Tracy Barnes performed the first fully solar balloon flight in 1973, using a tetrahedral-shaped single skin envelope. [3] It is unclear how the balloon was inflated. Aerocene Pacha is the most recent solar balloon flight to be manned, untethered and, ostensibly, entirely independent from fossil fuels. The team inflated the envelope with fans run on pedal power.\n  Manned solar balloons combine the technologies of burner-heated balloons and unmanned solar balloons used in scientific research. An example of the latter was the 1977 Montgolfi\u00e8re Infrarouge (MIR), which circulated in the lower stratosphere, flying on sunlight in the day and infrared at night. [2] Infrared is sufficient to maintain altitudes of around 20 kilometres because the air is so thin. [4] Recent examples use simpler technology \u2013 the Heliotrope Solar Hot-Air Balloon costs around 30 dollars to make and can be \u201cram inflated\u201d by holding the bottom open and walking it to and fro until it fills with air.\n Researchers have also explored the potential of using tethered solar balloons to generate electricity. One wind-solar system, designed by Robert Grena, is aided by a small pocket of hydrogen and pre-heated by \u201ccharging\u201d for a period of time in the sun. [5] When it is released, the balloon unwinds its rope from its windlass, which powers a generator. Wind-power contributes by pulling the balloon, and so the rope, horizontally. Grena proposes systems for deflating the balloon at its peak altitude, so energy is not lost from air or wind resistance as it falls. The simplest of these contraptions consists of rods fixed to the envelope which are held bent by taunt strings for the ascent and straighten when the tension is released for the fall, pulling the envelope shut.\n  Do Aerocene flights and their ilk herald an age in which we are more likely to fly by solar balloon than passenger plane? Julian Nott proved that international travel via (primarily) solar-powered balloon is possible forty years ago, when he crossed the English Channel. Nott flew from a point northwest of Dover to Tournehem sur la Hem near Calais, making the flight distance over 60km. Aerocene\u2019s official world record for solar-balloon flight distance at 2.55km (measured as the crow flies between lift-off and landing points) is less encouraging. Most solar balloon attempts, especially for scientific purposes, have focused on altitude rather than distance, so there is as yet unexplored potential.\n If solar technology could be made as reliable as propane burners, they could carry passengers across the Pacific, which is the hot air balloon distance record of 7671km, set by Per Lindstrand and Richard Branson in 46 hours and 15 minutes in 1991 (far longer flights have combined hot air with other gas technology). [6] This would rival the human powered flight Guinness World Record of 115 km, set by Kanellos Kanellopoulos in 1988. [7] The problem remains that fully solar balloons need sunlight, and it is rare for the sky to remain unclouded for long journeys. Any transport system based on solar balloons would have to be opportunistic, where pilots wait for safe conditions and perhaps break journeys into short stages.\n  [1] Folkes, J. (2008). Balloons, airships and kites \u2013 lighter than air: Past, present and future.\u00a0The Aeronautical Journal (1968),\u00a0112(1133), 421-429. doi:10.1017/S0001924000002384\n [2] Aerocene Community, 2021.\u00a0A brief history of Solar Ballooning and Aerocene. [online] Aerocene.org. Available at: &lt; https://aerocene.org/a-brief-solar-ballooning-and-aerocene/#&gt; [Accessed 11 July 2021].\n [3] Brown, D., (1974). Sunstat: A Balloon that Rides on Sunbeams. Ballooning, XI(2), pp.5-9. Available at: &lt; https://www.brisbanehotairballooning.com.au/wp-content/uploads/2015/02/SunstatArticleinBallooning.pdf&gt; [Accessed 11 July 2021].\n [4] Bowman, D., Norman, P., Pauken, M., Albert, S., Dexheimer, D., Yang, X., Krishnamoorthy, S., Komjathy, A. and Cutts, J., (2020). Multihour Stratospheric Flights with the Heliotrope Solar Hot-Air Balloon. Journal of Atmospheric and Oceanic Technology, 37(6), pp.1051-1066.\n [5] Grena, R., (2013). Solar balloons as mixed solar\u2013wind power systems.\u00a0Solar Energy, 88, pp.215-226.  https://doi.org/10.1016/j.solener.2012.11.021\n [6] \u00c5kerstedt, H., n.d.\u00a0CIA Notable flights and performances: Part 10, 1991-1995. [online] F\u00e9d\u00e9ration A\u00e9ronautique Internationale. Available at: &lt; https://www.fai.org/sites/default/files/documents/rpt_10_1991-1995.pdf&gt; [Accessed 11 July 2021]. [7] Guinness World Records., (n.d.). Longest human powered flight (distance). Available at: &lt; https://www.guinnessworldrecords.com/world-records/longest-human-powered-flight-%28distance%29&gt; [Accessed 11 July 2021].\n [8] Reay, D., (1977). \u201cMan-Powered Rotocraft and the Persistence of the \u2018Bird-Men\u2019\u201d In: The History of Man-Powered Flight, pp.249-262.  https://doi.org/10.1016/C2013-0-02894-0", "posttime": "2021-07-25 13:15:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u592a\u9633,heat,\u6c14\u7403", "title": "\u53ea\u5728\u592a\u9633\u7684\u70ed\u91cf\u4e0b\u98de\u884c", "title_en": "Flying Only with the Heat of the Sun", "transed": 1, "url": "https://www.notechmagazine.com/2021/07/flying-only-with-the-heat-of-the-sun.html", "via": "", "real_tags": ["\u592a\u9633", "heat", "\u6c14\u7403"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069591, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e0\u8bba\u60a8\u4f7f\u7528 AWS \u505a\u4ec0\u4e48\uff0c\u60a8\u6700\u7ec8\u90fd\u53ef\u80fd\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u670d\u52a1\uff0c\u56e0\u4e3a\u5176\u4ed6\u4e00\u5207\u90fd\u4e0e\u5b83\u4eec\u4ea4\u4e92\u3002\u5c31\u50cf\u5b83\u662f\u624b\u52a8\u7684\uff0c\u4f46 EC2 \u5b9e\u4f8b\u7c7b\u4f3c\u4e8e\u60a8\u5728 Linode\u3001DigitalOcean \u6216 Rackspace \u4e0a\u83b7\u5f97\u7684\u865a\u62df\u4e13\u7528\u670d\u52a1\u5668\u3002\u4f7f\u7528\u5b83\u6765\u5b58\u50a8\u7f51\u7ad9\u7684\u56fe\u50cf\u548c\u5176\u4ed6\u8d44\u4ea7\u3002\u4fdd\u7559\u5907\u4efd\u5e76\u5728\u670d\u52a1\u4e4b\u95f4\u5171\u4eab\u6587\u4ef6\u3002\u6258\u7ba1\u9759\u6001\u7f51\u7ad9\u3002\u6b64\u5916\uff0c\u8bb8\u591a\u5176\u4ed6 AWS \u670d\u52a1\u4ece S3 \u5199\u5165\u548c\u8bfb\u53d6\u3002\u7528\u5b83\u6765\u514b\u670d\u201c\u6211\u4eec\u6240\u6709\u7684\u4e1c\u897f\u90fd\u5728\u4e92\u8054\u7f51\u4e0a\uff01\u201d\u7684\u53cd\u5bf9\u610f\u89c1\u3002\u901a\u8fc7\u6dfb\u52a0\u989d\u5916\u7684\u5b89\u5168\u5c42\u3002\u4f7f\u60a8\u7684\u6240\u6709 AWS \u670d\u52a1\u770b\u8d77\u6765\u597d\u50cf\u90fd\u5728\u540c\u4e00\u4e2a\u5c0f\u7f51\u7edc\u4e0a\uff0c\u800c\u4e0d\u662f\u66f4\u5927\u7f51\u7edc\u4e2d\u7684\u5c0f\u5757\u3002\u4f7f\u7528\u5b83\u6765\u8fd0\u884c\u5c0f\u7684\u81ea\u5305\u542b\u7684 JS\u3001Java \u6216 Python \u7247\u6bb5\u6765\u6267\u884c\u79bb\u6563\u4efb\u52a1\u3002\u67d0\u79cd\u5c06\u961f\u5217\u548c\u6267\u884c\u5408\u4e8c\u4e3a\u4e00\u7684\u7ec4\u5408\u3002\u7528\u4e8e\u5b58\u50a8\u5e76\u6267\u884c\u5bf9 AWS \u8bbe\u7f6e\u7684\u66f4\u6539\u6216\u54cd\u5e94 S3 \u6216 DynamoDB \u4e2d\u7684\u4e8b\u4ef6\u3002\u5982\u679c\u60a8\u6b63\u5728\u8bbe\u7f6e Web \u5e94\u7528\u7a0b\u5e8f\uff0c\u90a3\u4e48\u8fd9\u4e9b\u4e3b\u8981\u662f\u60a8\u6700\u7ec8\u4f1a\u4f7f\u7528\u7684\u5185\u5bb9\u3002\u8fd9\u4e9b\u7c7b\u4f3c\u4e8e\u60a8\u5728 Heroku \u7684\u63d2\u4ef6\u5e02\u573a\u4e2d\u627e\u5230\u7684\u5185\u5bb9\u3002\u4f7f\u7528\u5b83\u6765\u4ee3\u7406\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f API\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u9650\u5236\u4e0d\u826f\u7684\u5ba2\u6237\u7aef\u6d41\u91cf\u3001\u6d4b\u8bd5\u65b0\u7248\u672c\u5e76\u66f4\u5e72\u51c0\u5730\u5448\u73b0\u65b9\u6cd5\u3002\n\u4f7f\u7528\u5b83\u6765\u8d2d\u4e70\u4e00\u4e2a\u65b0\u57df\u5e76\u4e3a\u8be5\u57df\u8bbe\u7f6e DNS \u8bb0\u5f55\u3002\u4f7f\u7528\u5b83\u53d1\u9001\u4e00\u6b21\u6027\u7535\u5b50\u90ae\u4ef6\uff0c\u5982\u5bc6\u7801\u91cd\u7f6e\u3001\u901a\u77e5\u7b49\u3002\u5982\u679c\u60a8\u7f16\u5199\u4e86\u6240\u6709\u4ee3\u7801\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u53d1\u9001\u65b0\u95fb\u901a\u8baf\uff0c\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u4f7f\u7528\u5b83\u53ef\u4ee5\u901a\u8fc7\u5c06\u9759\u6001\u6587\u4ef6\u4f20\u9012\u5206\u6563\u5230\u66f4\u63a5\u8fd1\u7528\u6237\u6240\u5728\u7684\u4f4d\u7f6e\u6765\u4f7f\u60a8\u7684\u7f51\u7ad9\u52a0\u8f7d\u901f\u5ea6\u66f4\u5feb\u3002\u4f7f\u7528\u5b83\u6765\u62c9\u5165 S3 \u6216 RDS \u4e2d\u7684\u6570\u636e\uff0c\u7136\u540e\u641c\u7d22\u5b83\u4ee5\u67e5\u627e\u201cJimmy\u201d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u3002\u4f7f\u7528\u5b83\u6765\u5b58\u50a8\u6570\u636e\u4ee5\u4f9b\u5c06\u6765\u5728\u961f\u5217\u4e2d\u5904\u7406\u3002\u672f\u8bed\u662f\u5b58\u50a8\u201c\u6d88\u606f\u201d\uff0c\u4f46\u5b83\u4e0e\u7535\u5b50\u90ae\u4ef6\u6216\u77ed\u4fe1\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 SQS\u6ca1\u6709\u4efb\u4f55\u903b\u8f91\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u653e\u4e1c\u897f\u548c\u53d6\u51fa\u4e1c\u897f\u7684\u5730\u65b9\u3002\u4f7f\u7528\u5b83\u6765\u963b\u6b62\u5bf9 Cloudfront \u53d7\u4fdd\u62a4\u7ad9\u70b9\u7684\u9519\u8bef\u8bf7\u6c42\uff08\u4e5f\u5c31\u662f\u963b\u6b62\u4eba\u4eec\u9488\u5bf9 /wp-admin \u5c1d\u8bd5 10,000 \u4e2a\u5bc6\u7801\uff09\u4f7f\u7528\u5b83\u6765\u4e3a\u6700\u7ec8\u7528\u6237 -\uff08\u975e AWS\uff09 - \u4f7f\u7528 Google\u3001Facebook \u7b49\u63d0\u4f9b\u767b\u5f55\u7684\u80fd\u529b\u3002\n\u4f7f\u7528\u5b83\u540c\u65f6\u5728\u4e00\u5806\u4e0d\u540c\u7684 IOS \u548c Android \u8bbe\u5907\u4e0a\u6d4b\u8bd5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u4f7f\u7528\u5b83\u4ee5\u4e00\u79cd\u7406\u667a\u7684\u65b9\u5f0f\u5c06\u60a8\u7684\u4ee3\u7801\u4ece\u60a8\u7684 CodeCommit \u5b58\u50a8\u5e93\uff08\u6216 Github\uff09\u83b7\u53d6\u5230\u4e00\u5806 EC2 \u5b9e\u4f8b\u4e0a\u3002\u4f7f\u7528\u5b83\u5bf9\u60a8\u7684\u4ee3\u7801\u8fd0\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\uff0c\u7136\u540e\u6839\u636e\u5b83\u662f\u5426\u901a\u8fc7\u8fd9\u4e9b\u6d4b\u8bd5\u6765\u5bf9\u5176\u8fdb\u884c\u5904\u7406\u3002\u4f7f\u7528\u5b83\u53ef\u4ee5\u5c06 Dockerfile \u653e\u5165 EC2 \u5b9e\u4f8b\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u8fd0\u884c\u7f51\u7ad9\u3002\u5f53\u5b83\u53d8\u5f97\u592a\u6602\u8d35\u65f6\uff0c\u4f7f\u7528\u5b83\u6765\u5c06\u60a8\u5728 Heroku \u4e0a\u6258\u7ba1\u7684\u5e94\u7528\u7a0b\u5e8f\u79fb\u52a8\u5230 AWS\u3002\u4f7f\u7528\u5b83\u53ef\u4ee5\u5c06 Windows \u5e94\u7528\u7a0b\u5e8f\u7684\u526f\u672c\u653e\u5728\u4eba\u4eec\u53ef\u4ee5\u8fdc\u7a0b\u8bbf\u95ee\u7684 Windows \u673a\u5668\u4e0a\u3002\u4f7f\u7528\u5b83\u6765\u652f\u4ed8\u60a8\u7684 Telco + AWS \u4ee5\u83b7\u5f97\u4ece\u60a8\u7684\u6570\u636e\u4e2d\u5fc3\u6216\u7f51\u7edc\u5230 AWS \u7684\u4e13\u7528\u79df\u7528\u7ebf\u8def\u3002\u6570\u636e\u6bd4\u4e92\u8054\u7f51\u4fbf\u5b9c\u3002\n\u4f7f\u7528\u5b83\u53ef\u4ee5\u5c06\u5176\u4ed6\u9700\u8981 Microsoft Active Directory \u6765\u63a7\u5236\u5b83\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u8054\u7cfb\u5728\u4e00\u8d77\u3002\u4f7f\u7528\u5b83\u53ef\u4ee5\u8ba9\u60a8\u7ec4\u4e2d\u7684\u5176\u4ed6 AWS \u7528\u6237\u8bbf\u95ee\u60a8\u6784\u5efa\u7684\u9884\u8bbe\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u4e0d\u5fc5\u9605\u8bfb\u6b64\u7c7b\u6307\u5357\u3002\u4f7f\u7528\u5b83\u6765\u505c\u6b62\u8d2d\u4e70\u66f4\u591a\u5b58\u50a8\u7a7a\u95f4\u4ee5\u4fdd\u6301 Word Docs \u6b63\u5e38\u8fd0\u884c\u3002\u4f7f\u5c06\u6587\u4ef6\u4ece\u516c\u53f8\u7f51\u7edc\u81ea\u52a8\u83b7\u53d6\u5230 S3 \u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\u4f7f\u7528\u5b83\u4ece AWS \u7684\u5176\u4ed6\u5730\u65b9\u63d0\u53d6\u3001\u8f6c\u6362\u548c\u52a0\u8f7d\u6570\u636e\u3002\u5b89\u6392\u4f55\u65f6\u53d1\u751f\u5e76\u5728\u5931\u8d25\u65f6\u6536\u5230\u8b66\u62a5\u3002\u4f7f\u7528\u5b83\u6765\u8fed\u4ee3\u4fdd\u5b58\u5728 S3 \u4e2d\u7684\u5927\u91cf\u539f\u59cb\u6570\u636e\u6587\u672c\u6587\u4ef6\u3002\u4f7f\u7528\u5b83\u6765\u5907\u4efd\u60a8\u4fdd\u5b58\u5728 S3 \u4e0a\u7684\u5907\u4efd\u3002\u6b64\u5916\uff0c\u8bf7\u6ce8\u610f\u5feb\u901f\u53d6\u56de\u6570\u636e\u7684\u6210\u672c\u3002\u7528\u4e8e\u957f\u671f\u5b58\u6863\u3002\u4f7f\u7528\u5b83\u53ef\u4ee5\u975e\u5e38\u5feb\u901f\u5730\u6444\u53d6\u5927\u91cf\u6570\u636e\uff08\u7528\u4e8e\u5206\u6790\u6216\u4eba\u4eec\u8f6c\u53d1 Kanye \u4e4b\u7c7b\u7684\u6570\u636e\uff09\uff0c\u7136\u540e\u60a8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6 AWS \u670d\u52a1\u8fdb\u884c\u5206\u6790\u3002\n\u4f7f\u7528\u5b83\u6765\u5b58\u50a8\u4e00\u5927\u5806\u5206\u6790\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u4e9b\u5904\u7406\uff0c\u7136\u540e\u5c06\u5176\u8f6c\u50a8\u51fa\u6765\u3002\u4f7f\u7528\u5b83\u6765\u6839\u636e\u73b0\u6709\u6570\u636e\u9884\u6d4b\u672a\u6765\u884c\u4e3a\uff0c\u4ee5\u89e3\u51b3\u6b3a\u8bc8\u68c0\u6d4b\u6216\u201c\u4e70\u4e86 x \u7684\u4eba\u4e5f\u4e70\u4e86 y\u201d\u7b49\u95ee\u9898\u3002\u4f7f\u7528\u5b83\u5728 EC2 \u4e4b\u4e0a\u6784\u5efa\u201c\u51b3\u7b56\u8005\u201d\u548c\u201c\u5de5\u4eba\u201d\u7684\u670d\u52a1\u4ee5\u5b8c\u6210\u8bbe\u5b9a\u7684\u4efb\u52a1\u3002\u4e0e SQS \u4e0d\u540c - \u903b\u8f91\u662f\u5728\u670d\u52a1\u5185\u90e8\u8bbe\u7f6e\u7684\uff0c\u4ee5\u786e\u5b9a\u5e94\u8be5\u5982\u4f55\u53d1\u751f\u4ee5\u53ca\u5e94\u8be5\u53d1\u751f\u4ec0\u4e48\u3002\u4f7f\u7528\u5b83\u6765\u83b7\u53d6\u4e00\u5806\u786c\u76d8\u9a71\u52a8\u5668\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u8fde\u63a5\u5230\u60a8\u7684\u7f51\u7edc\uff0c\u4ece\u800c\u4f7f\u5927\u91cf\uff08TB \u7ea7\u6570\u636e\uff09\u8fdb\u51fa AWS \u7ba1\u7406 AWS \u53d8\u5f97\u5982\u6b64\u56f0\u96be\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u4eec\u53d1\u660e\u4e86\u4e00\u7cfb\u5217\u670d\u52a1\u6765\u51fa\u552e\u7ed9\u60a8\u66f4\u5bb9\u6613\u7ba1\u7406\u3002\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u5927\u578b AWS \u8bbe\u7f6e\u5e76\u4e14\u6b63\u5728\u53d1\u751f\u8981\u8ddf\u8e2a\u7684\u66f4\u6539\uff0c\u8bf7\u4f7f\u7528\u5b83\u6765\u9632\u6b62\u53d1\u75af\u3002\u4f7f\u7528\u5b83\u6765\u627e\u51fa\u60a8\u5728 AWS \u8bbe\u7f6e\uff08\u672a\u4f7f\u7528\u7684 EC2 \u5b9e\u4f8b\u7b49\uff09\u4e2d\u652f\u4ed8\u8fc7\u591a\u7684\u5730\u65b9\u3002\n\u4f7f\u7528\u5b83\u6765\u626b\u63cf\u60a8\u7684 AWS \u8bbe\u7f6e\u4ee5\u786e\u5b9a\u60a8\u662f\u5426\u4ee5\u4e0d\u5b89\u5168\u7684\u65b9\u5f0f\u8bbe\u7f6e\u5b83", "note_en": "No matter what you do with AWS you&#39;ll probably end up using these services as everything else interacts with them.\n  It&#39;s like \t\t\tIt&#39;s handwavy, but EC2 instances are similar to the virtual private servers you&#39;d get at Linode, DigitalOcean or Rackspace.\n    Use this to \t\t\tStore images and other assets for websites. Keep backups and share files between services. Host static websites. Also, many of the other AWS services write and read from S3.\n  Use this to \t\t\tOvercome objections that &#34;all our stuff is on the internet!&#34; by adding an additional layer of security. Makes it appear as if all of your AWS services are on the same little network instead of being small pieces in a much bigger network.\n  Use this to \t\t\tRun little self contained snippets of JS, Java or Python to do discrete tasks. Sort of a combination of a queue and execution in one. Used for storing and then executing changes to your AWS setup or responding to events in S3 or DynamoDB.\n If you&#39;re setting up a web app, these are mostly what you&#39;d end up using. These are similar to what you&#39;d find in Heroku&#39;s Addon Marketplace.\n  Use this to \t\t\tProxy your apps API through this so you can throttle bad client traffic, test new versions, and present methods more cleanly.\n    Use this to \t\t\tBuy a new domain and set up the DNS records for that domain.\n  Use this to \t\t\tSend one-off emails like password resets, notifications, etc. You could use it to send a newsletter if you wrote all the code, but that&#39;s not a great idea.\n  Use this to \t\t\tMake your websites load faster by spreading out static file delivery to be closer to where your users are.\n  Use this to \t\t\tPull in data on S3 or in RDS and then search it for every instance of &#39;Jimmy.&#39;\n        Use this to \t\t\tStore data for future processing in a queue. The lingo for this is storing &#34;messages&#34; but it doesn&#39;t have anything to do with email or SMS. SQS doesn&#39;t have any logic, it&#39;s just a place to put things and take things out.\n  Use this to \t\t\tBlock bad requests to Cloudfront protected sites (aka stop people trying 10,000 passwords against /wp-admin)\n   Use this to \t\t\tGive end users - (non AWS) - the ability to log in with Google, Facebook, etc.\n  Use this to \t\t\tTest your app on a bunch of different IOS and Android devices simultaneously.\n         Use this to \t\t\tGet your code from your CodeCommit repo (or Github) onto a bunch of EC2 instances in a sane way.\n  Use this to \t\t\tRun automated tests on your code and then do stuff with it depending on if it passes those tests.\n  Use this to \t\t\tPut a Dockerfile into an EC2 instance so you can run a website.\n  Use this to \t\t\tMove your app hosted on Heroku to AWS when it gets too expensive.\n   Use this to \t\t\tPut a copy of a Windows application on a Windows machine that people get remote access to.\n  Use this to \t\t\tPay your Telco + AWS to get a dedicated leased line from your data center or network to AWS. Cheaper than Internet out for Data.\n  Use this to \t\t\tTie together other apps that need a Microsoft Active Directory to control them.\n        Use this to \t\t\tGive other AWS users in your group access to preset apps you&#39;ve built so they don&#39;t have to read guides like this.\n  Use this to \t\t\tStop buying more storage to keep Word Docs on. Make automating getting files into S3 from your corporate network easier.\n   Use this to \t\t\tExtract, Transform and Load data from elsewhere in AWS. Schedule when it happens and get alerts when they fail.\n  Use this to \t\t\tIterate over massive text files of raw data that you&#39;re keeping in S3.\n  Use this to \t\t\tMake backups of your backups that you keep on S3. Also, beware the cost of getting data back out in a hurry. For long term archiving.\n  Use this to \t\t\tIngest lots of data very quickly (for things like analytics or people retweeting Kanye) that you then later use other AWS services to analyze.\n  Use this to \t\t\tStore a whole bunch of analytics data, do some processing, and dump it out.\n  Use this to \t\t\tPredict future behavior from existing data for problems like fraud detection or &#34;people that bought x also bought y.&#34;\n  Use this to \t\t\tBuild a service of &#34;deciders&#34; and &#34;workers&#34; on top of EC2 to accomplish a set task. Unlike SQS - logic is set up inside the service to determine how and what should happen.\n  Use this to \t\t\tGet a bunch of hard drives you can attach to your network to make getting large amounts (Terabytes of Data) into and out of AWS\n AWS can get so difficult to manage that they invented a bunch of services to sell you to make it easier to manage.\n        Use this to \t\t\tKeep from going insane if you have a large AWS setup and changes are happening that you want to track.\n    Use this to \t\t\tFind out where you&#39;re paying too much in your AWS setup (unused EC2 instances, etc.).\n  Use this to \t\t\tScans your AWS setup to determine if you&#39;ve setup it up in an insecure way", "posttime": "2021-07-25 13:15:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e9a\u9a6c\u900a,amazon,\u82f1\u8bed,web", "title": "\u7b80\u5355\u82f1\u8bed\u7684\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1 (2019)", "title_en": "Amazon Web Services In Plain English (2019)", "transed": 1, "url": "https://www.web3us.com/how-guides/amazon-web-services-plain-english", "via": "", "real_tags": ["\u4e9a\u9a6c\u900a", "amazon", "\u82f1\u8bed", "web"]}]